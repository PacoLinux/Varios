VERSION B06

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:1    
        1        1        /*M* VNS$SEND Mail sending main program  */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMC,PLM=5,IND=5,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
        8        8
        9        9        /*P* NAME: VNS$SEND
       10       10             DESCRIPTION: This module performs the message sending functions
       11       11                       for the mail system. It gives the user the ablity to
       12       12                       send messages from files or interactively.
       13       13                                                                            */
       14       14        VNS$SEND: PROC MAIN;
       15       15
       16       16          %INCLUDE B$JIT;
       17      619          %INCLUDE B$TABLES_C;
       18      727          %INCLUDE B_ERRORS_C;
       19     1854          %INCLUDE B_SEGIDS_C;
       20     2393          %INCLUDE CP_6;
       21     7952          %INCLUDE CP_6_SUBS;
       22     8492          %INCLUDE VM_MACRO_C;
       23     9760          %INCLUDE VN_SUBS_C;
       24     9888          %INCLUDE VO_SUBS_C;
       25     9939          %INCLUDE VM_PERR_C;
       26    10234          %INCLUDE VM_DATA_R;
       27    10665          %INCLUDE XU_PERR_C;
       28    10856          %INCLUDE XU_MACRO_C;
       29    13962        %INCLUDE XU_SUBS_C;
       30    14054          %INCLUDE XU_FORMAT_C;
       31    14216          %INCLUDE XUE_MACRO_C;
       32    14960          %INCLUDE XUH_MACRO_C;
       33    15044          %INCLUDE XUM_MACRO_C;
       34    15071          %INCLUDE XUR_ENTRY;
       35    15103
       36    15104          %B$SR_NON_BLANK (NAME=NON_BLANK);
       37    15108          %B$TCB (STCLASS="BASED(B$TCB$)");
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:2    
       38    15111          %B$ALT;
       39    15119          %PARSE$OUT (NAME=P$B,STCLASS="BASED(BLK$)");
       40    15164          %PARSE$SYM (NAME=P$S,STCLASS="BASED(BLK$)");
       41    15202          %P_PCB (STCLASS=STATIC);
       42    15401          %XUE_ENTRIES;
       43    15425
       44    15426          %XUR_INIT( MOREMEM     = VMA$MOREMEM,
       45    15427                     PCB         = P_PCB,
       46    15428                     PREPROCESS  = YES,
       47    15429                     COMMANDS    = NO,  /* changed to YES at Options prompt */
       48    15430                     PRE_EXEC    = VNS$PRE_EXEC,
       49    15431                     POST_EXEC   = VNS$POST_EXEC,
       50    15432                     INHIBIT_END = YES,
       51    15433                     SYNTAX      = YES,
       52    15434                     SPELLING    = YES,
       53    15435                     DONT_STRIP_PROMPT = YES);
       54    15534
       55    15535          %F$DCB;
       56    15592    1   dcl BSD     sbin based;
       57    15593        /***** Dcbs *****/
       58    15594    1   DCL M$EDIT DCB;
       59    15595    1   DCL M$EDIT_NUM UBIN CONSTANT INIT(DCBNUM(M$EDIT));
       60    15596    1   DCL M$ENCL DCB;
       61    15597    1   DCL M$ENCL_NUM UBIN CONSTANT INIT(DCBNUM(M$ENCL));
       62    15598    1   DCL M$APND DCB;
       63    15599    1   DCL M$APND_NUM UBIN CONSTANT INIT(DCBNUM(M$APND));
       64    15600        /***** Parse nodes *****/
       65    15601    1   DCL SEND_NODES PTR SYMREF;
       66    15602    1   DCL PRIVILEGED_NODES PTR SYMREF;
       67    15603    1   DCL SEND_CMD PTR SYMREF;
       68    15604    1   DCL CMD_TO PTR SYMREF;
       69    15605    1   DCL CMD_SUBJECT PTR SYMREF;
       70    15606    1   DCL CMD_BODY PTR SYMREF;
       71    15607    1   DCL CMD_RTO PTR SYMREF;
       72    15608    1   DCL CMD_REF PTR SYMREF;
       73    15609    1   DCL CMD_COPY PTR SYMREF;
       74    15610    1   DCL CMD_BC PTR SYMREF;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:3    
       75    15611    1   DCL CMD_DEFER PTR SYMREF;
       76    15612    1   DCL CMD_SIGNED PTR SYMREF;
       77    15613    1   DCL OPTION_NODES PTR SYMREF;
       78    15614        /*
       79    15615            Addresses of nodes for the parser.  Ordinarily these will have the
       80    15616            the values of the SYMREFs above.  But, with some imaginative
       81    15617            patching using PATCH_MAIL_NODES, these pointers can obtain values
       82    15618            for user modified nodes (ie, foreign language nodes).
       83    15619        */
       84    15620    1   DCL SEND_NODES$ PTR;
       85    15621    1   DCL SEND_CMD$ PTR;
       86    15622    1   DCL CMD_TO$ PTR;
       87    15623    1   DCL CMD_SUBJECT$ PTR;
       88    15624    1   DCL CMD_BODY$ PTR;
       89    15625    1   DCL CMD_RTO$ PTR;
       90    15626    1   DCL CMD_REF$ PTR;
       91    15627    1   DCL CMD_COPY$ PTR;
       92    15628    1   DCL CMD_BC$ PTR;
       93    15629    1   DCL CMD_DEFER$ PTR;
       94    15630    1   DCL CMD_SIGNED$ PTR;
       95    15631    1   DCL OPTION_NODES$ PTR;
       96    15632
       97    15633        /***** External routines *****/
       98    15634    1   DCL VNS$BREAK ENTRY ASYNC;
       99    15635    1   DCL VNS$BREAK_DISABLE ENTRY;
      100    15636    1   DCL VNS$BREAK_ENABLE ENTRY;
      101    15637    1   DCL VNS$XCON ENTRY ASYNC ALTRET;
      102    15638    1   DCL X$HELP ENTRY(1) ALTRET;
      103    15639    1   DCL VMA$ADDRESS ENTRY(5) ALTRET;
      104    15640    1   DCL VMA$ENLARGE_SEGMENT ENTRY(2) ALTRET;
      105    15641    1   DCL VMA$GET_SITE_NAME ENTRY(4) ALTRET;
      106    15642    1   DCL VMA$MOREMEM ENTRY(3) ALTRET;
      107    15643    1   DCL VMA$ERRMSG ENTRY(5);
      108    15644    1   DCL VMA$DEL_ADD_RECORD ENTRY(4) ALTRET;
      109    15645    1   DCL VMA$PUT_ADD_RECORD ENTRY(4) ALTRET;
      110    15646    1   DCL VMA$GET_ADD_RECORD ENTRY(4) ALTRET;
      111    15647    1   DCL VMA$OPEN_GLOBAL ENTRY(1) ALTRET;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:4    
      112    15648    1   DCL VMA$OPEN_SRCH_LIST ENTRY(1) ALTRET;
      113    15649    1   DCL VMB$USE_SPECIFIED ENTRY(7) ALTRET;
      114    15650    1   DCL VMB$USE_DEFAULT ENTRY(7) ALTRET;
      115    15651    1   dcl VMB$TESTREG entry(1) altret;
      116    15652    1   DCL VMC$DOSEND ENTRY(2) ALTRET;
      117    15653    1   DCL VMD$DI_MESSAGE ENTRY (6) ALTRET;
      118    15654    1   DCL VMD$DI_BLIND ENTRY(2);
      119    15655    1   DCL VMD$DI_COPY ENTRY(2);
      120    15656    1   DCL VMD$DI_REFERENCE ENTRY(2);
      121    15657    1   DCL VMD$DI_SUBJECT ENTRY(2);
      122    15658    1   DCL VMD$DI_TO ENTRY(2);
      123    15659    1   DCL VMD$DI_SIGNED ENTRY(2);
      124    15660    1   DCL VMD$DI_FCOPY ENTRY(2);
      125    15661    1   DCL VMD$DI_RR ENTRY(2);
      126    15662    1   DCL VMD$DI_RTO ENTRY(2);
      127    15663    1   DCL VMD$DI_DEFER ENTRY(2);
      128    15664    1   DCL VMD$DI_OPTS ENTRY(2);
      129    15665    1   DCL VMD$DI_BROADCAST ENTRY(2);
      130    15666    1   DCL VMD$DI_DR ENTRY(2);
      131    15667    1   DCL VMD$WRITE_BUF ENTRY(1);
      132    15668    1   DCL VMD$GET_HEADER ENTRY(2) ALTRET;
      133    15669    1   DCL VMD$PUT_HEADER ENTRY(2) ALTRET;
      134    15670    1   DCL VMD$DEL_BODY ENTRY(7) ALTRET;
      135    15671    1   DCL VMD$DEL_HEADER ENTRY(2) ALTRET;
      136    15672    1   DCL VMD$GET_PROFILE ENTRY(1) ALTRET;
      137    15673    1   DCL VMD$PUT_BODY ENTRY(7) ALTRET;
      138    15674    1   DCL VMD$PUT_TRACE ENTRY(7) ALTRET;
      139    15675    1   DCL VMD$DEL_TRACE ENTRY(7) ALTRET;
      140    15676    1   DCL VMD$PUT_SITE ENTRY (2) ALTRET;
      141    15677    1   DCL VMD$GET_ENCL ENTRY(9) ALTRET;
      142    15678    1   DCL VMD$PUT_ENCL ENTRY(9) ALTRET;
      143    15679    1   DCL VMD$DEL_ENCL ENTRY(9) ALTRET;
      144    15680    1   DCL VMA$OPEN_ENCL_SEGS ENTRY ALTRET;
      145    15681    1   DCL VMD$GETNODES  entry(4);
      146    15682        %INIT_STR(DODCL=YES);
      147    15705    1   DCL VMF$FROM ENTRY(1) ALTRET;
      148    15706    1   DCL VMF$MAKE_ADDRESS1 ENTRY(2);
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:5    
      149    15707    1   DCL VMF$MAKE_ADDRESS1SITE ENTRY(2);
      150    15708    1   DCL VMM$EDIT_MESSAGE_OUT ENTRY(5) ALTRET;
      151    15709    1   DCL VMX$OCTBIN ENTRY(2);
      152    15710    1   DCL X$ALLOCATE ENTRY(1) ALTRET;
      153    15711    1   DCL X$DEALLOCATE ENTRY(1) ALTRET;
      154    15712    1   DCL VNS$PRE_EXEC ENTRY(2);
      155    15713    1   DCL VNS$POST_EXEC ENTRY(2);
      156    15714        /***** Flags *****/
      157    15715    1   DCL DID_SEND BIT(1);
      158    15716    1   DCL PROMPT_OPTIONS BIT(1);
      159    15717    1   DCL ERR_FLAG BIT(1);
      160    15718    1   DCL ID_ASSIGNED BIT(1);
      161    15719    1   DCL PROC_OPTIONS BIT(1);
      162    15720    1   DCL SI_FILE BIT(1);
      163    15721    1   DCL TESTMODE BIT(1) STATIC INIT(%NO#);
      164    15722    1   DCL PREPROCESS_OPT BIT(1);
      165    15723    1   DCL PREPROCESS BIT(1);
      166    15724        /***** Misc variables *****/
      167    15725    1   DCL CMD_DCB UBIN STATIC INIT(DCBNUM(M$SI));
      168    15726    1   DCL SEED UBIN WORD STATIC INIT(0);
      169    15727    1   DCL 1 WORK_DATE STATIC,
      170    15728    1         2 MONTH CHAR (2) CALIGNED,
      171    15729    1         2 * CHAR(1) CALIGNED INIT('/'),
      172    15730    1         2 DAY CHAR(2) CALIGNED,
      173    15731    1         2 * CHAR(1) CALIGNED INIT('/'),
      174    15732    1         2 YEAR CHAR(2) CALIGNED;
      175    15733    1   DCL WORK_DATEC REDEF WORK_DATE CHAR(8);
      176    15734    1   DCL 1 WORK_TIME STATIC,
      177    15735    1         2 HOUR CHAR(2) CALIGNED,
      178    15736    1         2 * CHAR(1) CALIGNED INIT(':'),
      179    15737    1         2 MINUTE CHAR(2) CALIGNED;
      180    15738    1   DCL WORK_TIMEC REDEF WORK_TIME CHAR(5);
      181    15739    1   DCL TIME_INIT CONSTANT CHAR(5) INIT('00:00');
      182    15740    1   DCL VNS_REMEMBER(0:1) REMEMBER STATIC SYMDEF;
      183    15741            %EQU BREAK_EXIT = 0;
      184    15742            %EQU BREAK_REPEAT = 1;
      185    15743    1   DCL VNS_BREAK_TYPE SBIN STATIC SYMDEF INIT(%BREAK_EXIT);
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:6    
      186    15744    1   DCL WORK_UTS UBIN WORD STATIC;
      187    15745    1   DCL ANSI_TIME CHAR (8) STATIC;
      188    15746    1   DCL ANSI_DATE CHAR (6) STATIC;
      189    15747    1   DCL INVOKE_EDITOR$ STATIC PTR INIT(ADDR(NIL));
      190    15748    1   DCL DEFAULT_EDITOR$ STATIC PTR INIT(ADDR(DEFAULT_EDITOR));
      191    15749          %VLP_NAME (FPTN=DEFAULT_EDITOR,STCLASS=CONSTANT,NAME='EDIT');
      192    15776    1   DCL P_PCB$TEXT CHAR(P_PCB.NCHARS) UNAL BASED(P_PCB.TEXT$);
      193    15777    1   DCL OUT$ PTR;
      194    15778          %VLP_ERRCODE (FPTN=OUTERR,STCLASS="REDEF OUT$");
      195    15823    1   DCL ENCL$ PTR STATIC INIT(ADDR(NIL));
      196    15824    1   DCL ENCLREC$ PTR STATIC INIT(ADDR(NIL));
      197    15825    1   DCL BLK$ PTR;
      198    15826    1   DCL TMP$ PTR;
      199    15827        %POINTER (NAME=TMPR$,STCLASS="REDEF TMP$");
      200    15832    1   DCL CMD_BUF CHAR(300) STATIC;
      201    15833          %VLP_NAME (FPTN=USER_NAME,LEN=256,STCLASS=AUTO);
      202    15860    1   DCL SIZE SBIN WORD;
      203    15861    1   DCL IAM CHAR(8) CONSTANT INIT('*IAM');
      204    15862    1   DCL I SBIN WORD;
      205    15863    1   DCL J SBIN WORD;
      206    15864    1   DCL ENTRY_REASON SBIN WORD;
      207    15865    1   DCL GATEWAY BIT (1) SYMREF;
      208    15866    1   DCL DUMMY SBIN WORD AUTO;
      209    15867        /***** Prompt strings *****/
      210    15868        %VLP_NAMEV( FPTN=VN_TO_,        STCLASS="SYMREF");
      211    15875        %VLP_NAMEV( FPTN=VN_REPLY_TO,   STCLASS="SYMREF");
      212    15882        %VLP_NAMEV( FPTN=VN_SUBJECT,    STCLASS="SYMREF");
      213    15889        %VLP_NAMEV( FPTN=VN_REFERENCE,  STCLASS="SYMREF");
      214    15896        %VLP_NAMEV( FPTN=VN_COPY,       STCLASS="SYMREF");
      215    15903        %VLP_NAMEV( FPTN=VN_BLIND_COPY, STCLASS="SYMREF");
      216    15910        %VLP_NAMEV( FPTN=VN_FCOPY,      STCLASS="SYMREF");
      217    15917        %VLP_NAMEV( FPTN=VN_RR,         STCLASS="SYMREF");
      218    15924        %VLP_NAMEV( FPTN=VN_DEFER,      STCLASS="SYMREF");
      219    15931        %VLP_NAMEV( FPTN=VN_SIGNED,     STCLASS="SYMREF");
      220    15938        %VLP_NAMEV( FPTN=VN_BROADCAST,  STCLASS="SYMREF");
      221    15945        %VLP_NAMEV( FPTN=VN_DR,         STCLASS="SYMREF");
      222    15952        %VLP_NAMEV( FPTN=VN_YES_CHAR,   STCLASS="SYMREF");
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:7    
      223    15959        %VLP_NAMEV( FPTN=VN_NO_CHAR,    STCLASS="SYMREF");
      224    15966        %VLP_NAMEV( FPTN=VN_OPTIONS,    STCLASS="SYMREF");
      225    15973        %VLP_NAMEV( FPTN=VN_BODY,       STCLASS="SYMREF");
      226    15980        %VLP_NAMEV( FPTN=VN_BODY2,      STCLASS="SYMREF");
      227    15987
      228    15988        %VLP_ERRCODE( FPTN=E_CMD_TO_PROMPT,      STCLASS="SYMREF READONLY");
      229    16033               %VLP_ERRCODE( FPTN=E_CMD_SUBJECT_PROMPT, STCLASS="SYMREF READONLY");
      230    16078               %VLP_ERRCODE( FPTN=E_CMD_RTO_PROMPT, STCLASS="SYMREF READONLY");
      231    16123               %VLP_ERRCODE( FPTN=E_CMD_REF_PROMPT, STCLASS="SYMREF READONLY");
      232    16168               %VLP_ERRCODE( FPTN=E_CMD_COPY_PROMPT, STCLASS="SYMREF READONLY");
      233    16213               %VLP_ERRCODE( FPTN=E_CMD_BC_PROMPT, STCLASS="SYMREF READONLY");
      234    16258               %VLP_ERRCODE( FPTN=E_CMD_FILE_COPY_PROMPT,STCLASS="SYMREF READONLY");
      235    16303               %VLP_ERRCODE( FPTN=E_RR_PROMPT,   STCLASS="SYMREF READONLY");
      236    16348               %VLP_ERRCODE( FPTN=E_CMD_DEFER_PROMPT, STCLASS="SYMREF READONLY");
      237    16393               %VLP_ERRCODE( FPTN=E_CMD_SIGNED_PROMPT, STCLASS="SYMREF READONLY");
      238    16438               %VLP_ERRCODE( FPTN=E_BROADCAST_PROMPT, STCLASS="SYMREF READONLY");
      239    16483               %VLP_ERRCODE( FPTN=E_DR_PROMPT,   STCLASS="SYMREF READONLY");
      240    16528               %VLP_ERRCODE( FPTN=E_NO_CHAR,     STCLASS="SYMREF READONLY");
      241    16573               %VLP_ERRCODE( FPTN=E_YES_CHAR,    STCLASS="SYMREF READONLY");
      242    16618               %VLP_ERRCODE( FPTN=E_OPTIONS_PROMPT, FCG="VN",MID=S, STCLASS=
             16618                   "CONSTANT SYMDEF",
      243    16619               ERR#=%E$OPTIONS_PROMPT);
      244    16664        /*E* ERROR: VNS-E$OPTIONS_PROMPT-0
      245    16665             MESSAGE:Options:
      246    16666        */
      247    16667               %VLP_ERRCODE( FPTN=E_CMD_BODY_PROMPT, FCG="VN",MID=S, STCLASS=
             16667                   "CONSTANT SYMDEF",
      248    16668               ERR#=%E$CMD_BODY_PROMPT );
      249    16713        /*E* ERROR: VNS-E$CMD_BODY_PROMPT-0
      250    16714             MESSAGE:Body:
      251    16715        */
      252    16716               %VLP_ERRCODE( FPTN=E_CMD_BODY2_PROMPT, FCG="VN",MID=S, STCLASS=
             16716                   "CONSTANT SYMDEF",
      253    16717               ERR#=%E$CMD_BODY2_PROMPT );
      254    16762        /*E* ERROR: VNS-E$CMD_BODY2_PROMPT-0
      255    16763             MESSAGE:&&&&&
      256    16764        */
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:8    
      257    16765
      258    16766    1   dcl 1  IBEX_PROMPT    constant,
      259    16767    1         2 SIZ        ubin(9) caligned init(1),
      260    16768    1         2 TEXT       char(1)          init('!');
      261    16769
      262    16770
      263    16771        %EJECT;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:9    
      264    16772        /***** Mail macros *****/
      265    16773        %SET LISTMAC='1'B;
      266    16774        %SET LISTSUB='1'B;
      267    16775        %SET LISTEXP='1'B;
      268    16776        /*
      269    16777            The following allows multiple parse nodes
      270    16778            in different languages.  When initializing the macro follow this
      271    16779            convention:  Nn=nodename   where n is the EQU value of PN_nodename
      272    16780            found in the file VM_MACRO_C.
      273    16781        */
      274    16782        %PARSE_NODES (NAME     =  VN_DEFAULT_NODES,
      275    16783                      STCLASS  =  "CONSTANT SYMDEF",
      276    16784                      N13      =  SEND_NODES,
      277    16785                      N14      =  PRIVILEGED_NODES,
      278    16786                      N15      =  SEND_CMD,
      279    16787                      N16      =  CMD_TO,
      280    16788                      N17      =  CMD_SUBJECT,
      281    16789                      N18      =  CMD_BODY,
      282    16790                      N19      =  CMD_RTO,
      283    16791                      N20      =  CMD_REF,
      284    16792                      N21      =  CMD_COPY,
      285    16793                      N22      =  CMD_BC,
      286    16794                      N23      =  CMD_DEFER,
      287    16795                      N24      =  CMD_SIGNED,
      288    16796                      N25      =  OPTION_NODES );
             16797        %LSET LISTDIR='0'B;
             16819    1   dcl  VN_DEFAULT_NODES (0:29) ptr CONSTANT SYMDEF aligned INIT(
             16820    1                       ADDR(NIL),  ADDR(NIL),   ADDR(NIL),   ADDR(NIL),
             16821    1                       ADDR(NIL),  ADDR(NIL),   ADDR(NIL),   ADDR(NIL),
             16822    1                       ADDR(NIL),  ADDR(NIL),   ADDR(NIL),  ADDR(NIL),
             16823    1                       ADDR(NIL), ADDR(SEND_NODES),  ADDR(PRIVILEGED_NODES),  ADDR(
             16823                                SEND_CMD),
             16824    1                       ADDR(CMD_TO), ADDR(CMD_SUBJECT),  ADDR(CMD_BODY),  ADDR(CMD_RTO)
             16824                                ,
             16825    1                       ADDR(CMD_REF), ADDR(CMD_COPY),  ADDR(CMD_BC),  ADDR(CMD_DEFER),
             16826    1                       ADDR(CMD_SIGNED), ADDR(OPTION_NODES),  ADDR(NIL),  ADDR(NIL),
             16827    1                       ADDR(NIL), ADDR(NIL)                          )
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:10   
             16828    1                       /**/;
      289    16831
      290    16832        %NATL_PAIRS(  NAME     =  VN_NATL_NODES,
      291    16833                      STCLASS  =  "CONSTANT SYMDEF",
      292    16834                      NATL_CHARS= "' '*0",
      293    16835                      NODES$   =  "addr(VN_DEFAULT_NODES),addr(nil)*0"   );
             16836        %LSET LISTDIR='0'B;
             16848    1   dcl 1 VN_NATL_NODES  CONSTANT SYMDEF aligned,
             16849    1         2 NATLS char(5) aligned INIT(' '*0)/**/,
             16850    1         2 PARSE_NODES$(0:4) ptr aligned INIT(addr(VN_DEFAULT_NODES),addr(nil)*0 )/**/;
      294    16853
      295    16854        %PARSE_NODES( NAME     =  NODES_TO_USE,
      296    16855                      STCLASS  =  "based(NODES$)"   );
             16856        %LSET LISTDIR='0'B;
             16878    1   dcl  NODES_TO_USE (0:29) ptr based(NODES$) aligned /*(
             16879    1                       ADDR(NIL),  ADDR(NIL),   ADDR(NIL),   ADDR(NIL),
             16880    1                       ADDR(NIL),  ADDR(NIL),   ADDR(NIL),   ADDR(NIL),
             16881    1                       ADDR(NIL),  ADDR(NIL),   ADDR(NIL),  ADDR(NIL),
             16882    1                       ADDR(NIL), ADDR(NIL),  ADDR(NIL),  ADDR(NIL),
             16883    1                       ADDR(NIL), ADDR(NIL),  ADDR(NIL),  ADDR(NIL),
             16884    1                       ADDR(NIL), ADDR(NIL),  ADDR(NIL),  ADDR(NIL),
             16885    1                       ADDR(NIL), ADDR(NIL),  ADDR(NIL),  ADDR(NIL),
             16886    1                       ADDR(NIL), ADDR(NIL)                          )
             16887    1                       /**/;
      297    16890
      298    16891    1   dcl  NODES$            ptr;
      299    16892
      300    16893    1   dcl 1  VN_NODENAMES   constant symdef
      301    16894
      302    16895             %BUILD_NODENAMES( N=13, NAME=SEND_NODES);
             16896        %lset LISTDIR = '0'B;
             16900    1        ,2 * ubin(18) caligned init(13)
             16901    1          ,2 * ubin(9) caligned init(10)
             16902    1          ,2 * char(10) caligned init('SEND_NODES')
      303    16907             %BUILD_NODENAMES( N=14, NAME=PRIVILEGED_NODES);
             16908        %lset LISTDIR = '0'B;
             16912    1        ,2 * ubin(18) caligned init(14)
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:11   
             16913    1          ,2 * ubin(9) caligned init(16)
             16914    1          ,2 * char(16) caligned init('PRIVILEGED_NODES')
      304    16919             %BUILD_NODENAMES( N=15, NAME=SEND_CMD);
             16920        %lset LISTDIR = '0'B;
             16924    1        ,2 * ubin(18) caligned init(15)
             16925    1          ,2 * ubin(9) caligned init(8)
             16926    1          ,2 * char(8) caligned init('SEND_CMD')
      305    16931             %BUILD_NODENAMES( N=16, NAME=CMD_TO);
             16932        %lset LISTDIR = '0'B;
             16936    1        ,2 * ubin(18) caligned init(16)
             16937    1          ,2 * ubin(9) caligned init(6)
             16938    1          ,2 * char(6) caligned init('CMD_TO')
      306    16943             %BUILD_NODENAMES( N=17, NAME=CMD_SUBJECT);
             16944        %lset LISTDIR = '0'B;
             16948    1        ,2 * ubin(18) caligned init(17)
             16949    1          ,2 * ubin(9) caligned init(11)
             16950    1          ,2 * char(11) caligned init('CMD_SUBJECT')
      307    16955             %BUILD_NODENAMES( N=18, NAME=CMD_BODY);
             16956        %lset LISTDIR = '0'B;
             16960    1        ,2 * ubin(18) caligned init(18)
             16961    1          ,2 * ubin(9) caligned init(8)
             16962    1          ,2 * char(8) caligned init('CMD_BODY')
      308    16967             %BUILD_NODENAMES( N=19, NAME=CMD_RTO);
             16968        %lset LISTDIR = '0'B;
             16972    1        ,2 * ubin(18) caligned init(19)
             16973    1          ,2 * ubin(9) caligned init(7)
             16974    1          ,2 * char(7) caligned init('CMD_RTO')
      309    16979             %BUILD_NODENAMES( N=20, NAME=CMD_REF);
             16980        %lset LISTDIR = '0'B;
             16984    1        ,2 * ubin(18) caligned init(20)
             16985    1          ,2 * ubin(9) caligned init(7)
             16986    1          ,2 * char(7) caligned init('CMD_REF')
      310    16991             %BUILD_NODENAMES( N=21, NAME=CMD_COPY);
             16992        %lset LISTDIR = '0'B;
             16996    1        ,2 * ubin(18) caligned init(21)
             16997    1          ,2 * ubin(9) caligned init(8)
             16998    1          ,2 * char(8) caligned init('CMD_COPY')
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:12   
      311    17003             %BUILD_NODENAMES( N=22, NAME=CMD_BC);
             17004        %lset LISTDIR = '0'B;
             17008    1        ,2 * ubin(18) caligned init(22)
             17009    1          ,2 * ubin(9) caligned init(6)
             17010    1          ,2 * char(6) caligned init('CMD_BC')
      312    17015             %BUILD_NODENAMES( N=23, NAME=CMD_DEFER);
             17016        %lset LISTDIR = '0'B;
             17020    1        ,2 * ubin(18) caligned init(23)
             17021    1          ,2 * ubin(9) caligned init(9)
             17022    1          ,2 * char(9) caligned init('CMD_DEFER')
      313    17027             %BUILD_NODENAMES( N=24, NAME=CMD_SIGNED);
             17028        %lset LISTDIR = '0'B;
             17032    1        ,2 * ubin(18) caligned init(24)
             17033    1          ,2 * ubin(9) caligned init(10)
             17034    1          ,2 * char(10) caligned init('CMD_SIGNED')
      314    17039             %BUILD_NODENAMES( N=25, NAME=OPTION_NODES);
             17040        %lset LISTDIR = '0'B;
             17044    1        ,2 * ubin(18) caligned init(25)
             17045    1          ,2 * ubin(9) caligned init(12)
             17046    1          ,2 * char(12) caligned init('OPTION_NODES')
      315    17051             %BUILD_NODENAMES( DONE=YES );
             17052        %lset LISTDIR = '0'B;
             17060    1          ,2 * ubin(27) caligned init(0);
      316    17063
      317    17064
      318    17065        %VLP_NAME(FPTN=VN_NODEFID,NAME='VM_NODES',STCLASS="CONSTANT SYMDEF");
             17066        %LSET LISTDIR='0'B;
             17090    1   DCL 1 VN_NODEFID CONSTANT SYMDEF,2 L# UBIN(9)INIT(8)/**/ UNAL,2 NAME# CHAR(0)INIT(
             17090            'VM_NODES')/**/ ;
      319    17092
      320    17093          %VM_ADDTYPES;
             17094        %EQU    VM_ADD_RESOLVED = 1;   /* Resolved address entry */
             17095        %EQU    VM_ADD_UNRESOLVED = 2; /* Unresolved address entry */
      321    17097
      322    17098          %VM_BODYTYPES;
             17099        %EQU    VM_BODY_TEXT = 1;   /* Text record */
             17100        %EQU    VM_BODY_GRAPHICS = 2;   /* Graphics data. RESERVED FOR FUTURE USE */
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:13   
             17101        %EQU    VM_BODY_ENCODED_ERR = 3; /* Encoded error/time/textc information */
             17102        %EQU    VM_BODY_BINARY_ENCL = 4; /* Binary enclosure record */
      323    17104
      324    17105          %VM_KEYTYPES;
             17106        %EQU    VM_TYPE_PRO   = 1;      /* The Profile record */
             17107        %EQU    VM_TYPE_ACC   = 2;      /* The access-control record */
             17108        %EQU    VM_TYPE_HEAD  = 8;      /* The Header record */
             17109        %EQU    VM_TYPE_DELIV = 9;      /* The delivery records */
             17110        %EQU    VM_TYPE_SITE  = 10;     /* SITE INFORMATION */
             17111        %EQU    VM_TYPE_TO    = 16;     /* The original TO record */
             17112        %EQU    VM_TYPE_ITO   = 17;     /* The intersystem TO record */
             17113        %EQU    VM_TYPE_C     = 24;     /* The original Copies record */
             17114        %EQU    VM_TYPE_IC    = 25;     /* The intersystem Copies record */
             17115        %EQU    VM_TYPE_BC    = 32;     /* The original Blind Copies record */
             17116        %EQU    VM_TYPE_IBC   = 33;     /* The intersystem Blind Copies record */
             17117        %EQU    VM_TYPE_RTO   = 36;     /* The Reply To record */
             17118        %EQU    VM_TYPE_TRACE = 44;     /* The message trace record(s) */
             17119        %EQU    VM_TYPE_BODY  = 48;     /* The message body record(s) */
             17120        %EQU    VM_TYPE_LIST  = 60;     /* Definition for a LIST of addresses */
             17121        %EQU    VM_TYPE_USER  = 80;     /* Definition for a USER */
             17122        %EQU    VM_TYPE_ID    = 90;     /* The unique-message-ID cross reference */
             17123        %EQU    VM_TYPE_ENCL  = 100;    /* The binary enclosure context record*/
             17124        %EQU    VM_TYPE_ENCL_INIT = 101;/* To initialize the first enclosure record */
      325    17126
      326    17127          %VM_PROFILE;
             17128        %LSET LISTDIR='0'B;
             17137    1   DCL 1 VM_PROFILE BASED(VM_PROFILE$),
             17138    1         2 VERSION CHAR(3) /*('B00')/**/,
             17139                               /* What version of MAIL last wrote this file */
             17140    1         2 OPT,
             17141    1           3 HEADERS BIT(1) UNAL /*('0'B)/**/,
             17142                               /* Set if headers are desired on COPY, DELETE, MOVE, etc. */
             17143    1           3 FCOPY BIT(1) UNAL /*('0'B)/**/,
             17144                               /* Set if FILE_FOLDER is to be used for filing msgs */
             17145    1           3 RETURN_RECEIPT BIT(1) UNAL /*('0'B)/**/,
             17146                               /* Set if return receipt is desired for all messages */
             17147    1           3 RENUMBER BIT(1) UNAL /*('0'B)/**/,
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:14   
             17148                               /* Set if messages are to be renumbered at exit time */
             17149    1           3 PAGE BIT(1) UNAL /*('0'B)/**/,
             17150                               /* Set if messages are to be displayed on seperate pages */
             17151    1           3 AUTO_EDIT BIT(1) UNAL /*('0'B)/**/,
             17152                               /* Set if Editor is to be called to create *BODY */
             17153    1           3 DISPTRACE BIT(1) UNAL /*('1'B)/**/,
             17154                             /* Display TRACE records in mailgrams */
             17155    1           3 COMBINE BIT(1) UNAL /*('0'B)/**/,
             17156                             /* Combine DELIVs, ACKs, and ERRs with file copy */
             17157    1           3 DELIVERY_RECEIPT BIT (1) UNAL /*('0'B)/**/,
             17158                             /* Request delivery receipt */
             17159    1           3 ANS_RECEIVERS BIT(1) UNAL /*('0'B)/**/,
             17160                             /* ANS RECEIVERS by default */
             17161    1           3 PREPROCESS BIT(1) UNAL /*('0'B)/**/,
             17162                             /* Do preprocessing in SEND by default */
             17163    1           3 EXT_ADDR_DISP BIT(1) UNAL /*('0'B)/**/,
             17164                             /* Display long TO: C: and BC fields */
             17165    1           3 DEL_ON_DETACH BIT(1) UNAL /*('0'B)/**/,
             17166                             /* Delete enclosures upon DETACH */
             17167    1           3 RESERVED BIT(32) UNAL /*('0'B)/**/,
             17168    1         2 PROFILE_SIZE UBIN WORD /*(0)/**/,
             17169                               /* How many words in this PROFILE */
             17170    1         2 FREE$ PTR /*(ADDR(NIL))/**/,
             17171                               /* Head of FREE BLOCKS CHAIN in WORK_AREA */
             17172    1         2 NEXT$ PTR /*(ADDR(VM_PROFILE.WORK_AREA))/**/,
             17173                               /* Ptr to next avail. word in WORK_AREA */
             17174    1         2 NUM_MESSAGES UBIN WORD /*(0)/**/,
             17175                               /* Current number of messages in file */
             17176    1         2 NUM_NEW_MESSAGES UBIN WORD /*(0)/**/,
             17177                               /* Number of new messages in file */
             17178    1         2 NUM_DEL_MESSAGES UBIN WORD /*(0)/**/,
             17179                               /* Number of deleted messages in file */
             17180    1         2 NUM_MOLD_MESSAGES UBIN WORD /*(0)/**/,
             17181                               /* Number of marked as old messages in file */
             17182    1         2 HI_MESSAGE_NUMBER UBIN WORD /*(0)/**/,
             17183                               /* Highest message number in this folder */
             17184    1         2 GRANULES UBIN WORD /*(0)/**/,
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:15   
             17185                               /* Max # of granules to be allowed in message file */
             17186    1         2 SETUP,
             17187                               /* First command to be executed upon entry to mail */
             17188    1           3 COUNT UBIN BYTE CALIGNED /*(8)/**/,
             17189    1           3 TEXT CHAR(256) CALIGNED /*('LIST NEW ')/**/,
             17190    1         2 FILE_FOLDER$ PTR /*(ADDR(NIL))/**/,
             17191                             /* Address to be used for storing copies of messages by user */
             17192    1         2 SEARCH_LIST$ (0:8) PTR /*(ADDR(NIL)*0)/**/,
             17193                               /* What folders to search for address resolution */
             17194    1         2 SIGNED$ PTR /*(ADDR(NIL))/**/,
             17195                               /* Who do I claim to be? */
             17196    1         2 NAME_KEY CHAR(20) ALIGNED /*(' ')/**/,
             17197                               /* ACCT||UNAME of owner of this folder */
             17198    1         2 LOW_DEL_NUM UBIN WORD ALIGNED /*(0)/**/,
             17199    1         2 RECS_DELETED UBIN WORD ALIGNED /*(0)/**/,
             17200                       /* Total records deleted since last recopy */
             17201    1         2 HIGH_RECS UBIN WORD ALIGNED /*(0)/**/,
             17202                       /* High water mark of file size since last copy */
             17203    1         2 EDITOR$ PTR /*(ADDR(NIL))/**/,
             17204                       /* Editor to use when editing a message to be sent */
             17205    1         2 REPLY_TO$ PTR /*(ADDR(NIL))/**/,
             17206                       /* Address to be used for replying to messages */
             17207    1         2 NUM_LOST UBIN WORD ALIGNED /*(0)/**/,
             17208                               /* Number of messages lost due to lack of disk space */
             17209    1         2 RESERVED (0:13) UBIN WORD ALIGNED /*(0*0)/**/,
             17210                               /* Reserved for future use */
             17211    1         2 WORK_AREA UBIN WORD;
             17212                               /* Work area used for string space */
      327    17214
      328    17215          %VM_HEADER;
             17216        %LSET LISTDIR='0'B;
             17225    1   DCL 1 VM_HEADER BASED (VM_HEADER$),
             17226    1         2 HEADER_SIZE UBIN WORD /*(0)/**/,
             17227                               /* Number of words in this header */
             17228    1         2 CREATION_DATE UBIN WORD /*(0)/**/,
             17229                               /* Date message created (passed to send) */
             17230    1         2 DELIVERY_DATE UBIN WORD /*(0)/**/,
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:16   
             17231                               /* Date message is to be/was delivered */
             17232    1         2 FIRST_DELIVERY UBIN WORD /*(0)/**/,
             17233                             /* Date/time of MAILMAN's first delivery pass */
             17234    1         2 RESERVED_DATES (0:4) UBIN WORD /*(0*0)/**/,
             17235                               /* Reserved for future use */
             17236    1         2 NUM_RECORDS UBIN WORD /*(0)/**/,
             17237                               /* Number of records in message body */
             17238    1         2 STATUS,
             17239    1           3 ERR BIT(1) UNAL /*('0'B)/**/,
             17240                        /* Set if message is being returned to sender -
             17241                           see HDR.ERROR and HDR.BAD_ADDR */
             17242    1           3 ANSWER BIT(1) UNAL /*('0'B)/**/,
             17243                               /* Set if this is an answer to a received message */
             17244    1           3 ACK BIT(1) UNAL /*('0'B)/**/,
             17245                               /* Set if this is an ack to a received message */
             17246    1           3 DEFER BIT(1) UNAL /*('0'B)/**/,
             17247                               /* Set if deferred message (sent at HDR.DELIVERY_DATE) */
             17248    1           3 RR BIT(1) UNAL /*('0'B)/**/,
             17249                               /* Set if "Return Receipt" requested */
             17250    1           3 CRYPT BIT(1) UNAL /*('0'B)/**/,
             17251                               /* Set if message body is encrypted */
             17252    1           3 OLD BIT(1) UNAL /*('0'B)/**/,
             17253                        /* Set if message is "old" (has at least had
             17254                           header printed in prior session). */
             17255    1           3 MAKE_OLD BIT(1) UNAL /*('0'B)/**/,
             17256                        /* Set if message is to be marked "old" when
             17257                           message file is overwritten. */
             17258    1           3 EXAM BIT(1) UNAL /*('0'B)/**/,
             17259                               /* Set if message has been examined */
             17260    1           3 DEL BIT(1) UNAL /*('0'B)/**/,
             17261                               /* Set if message has been deleted */
             17262    1           3 FCOPY BIT(1) UNAL /*('0'B)/**/,
             17263                               /* Set if message is a FILE COPY */
             17264    1           3 MARK BIT(1) UNAL /*('0'B)/**/,
             17265                               /* Set if message has been MARKed */
             17266    1           3 GRAPHICS BIT(1) UNAL /*('0'B)/**/,
             17267                               /* Set if message contains graphics */
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:17   
             17268    1           3 FORWARDED BIT(1) UNAL /*('0'B)/**/,
             17269                               /* Set if message was result of FORWARD command */
             17270    1           3 ANS_TO BIT(1) UNAL /*('0'B)/**/,
             17271                               /* Used to tell MAILMAN to set RETURN_TO_ORIGIN */
             17272    1           3 DR BIT(1) UNAL /*('0'B)/**/,
             17273                             /* Delivery receipt requested */
             17274    1           3 DELIVERY BIT(1) UNAL /*('0'B)/**/,
             17275                             /* This 'gram is a delivery receipt */
             17276    1           3 BROADCAST BIT(1) UNAL /*('0'B)/**/,
             17277                             /* Broadcast (junk) mail; don't return errors */
             17278    1           3 PRIMARY BIT(1) UNAL /*('0'B)/**/,
             17279                             /* Recipient is on primary TO: list */
             17280    1           3 C BIT(1) UNAL /*('0'B)/**/,
             17281                             /* Recipient is on C: list */
             17282    1           3 BC BIT(1) UNAL /*('0'B)/**/,
             17283                             /* Recipient is on BC: list */
             17284    1           3 THINGED BIT(1) UNAL /*('0'B)/**/,
             17285                             /* Thing has already [attempted to] sched this */
             17286    1           3 RRACK BIT(1) UNAL /*('0'B)/**/,
             17287                             /* Set if this is a rr ack to a displayed message */
             17288    1           3 PRE_B00 BIT(1) UNAL /*('0'B)/**/,
             17289                             /* Set when a pre-B00 message is read */
             17290    1           3 ENCL BIT(1) UNAL /*('0'B)/**/,
             17291                             /* This mailgram has binary enclosures */
             17292    1           3 RESERVED BIT(11) UNAL /*('0'B)/**/,
             17293    1         2 MISC ALIGNED,
             17294    1           3 PHASE UBIN (4) UNAL /*(0)/**/,
             17295                             /* Current phase of delivery */
             17296    1           3 * UBIN (32) UNAL /*(0)/**/,
             17297                               /* Reserved for future use */
             17298    1         2 ERROR,
             17299                               /* Reason message was returned to sender */
             17300    1           3 FCG BIT(12) UNAL /*('0'B)/**/,
             17301    1           3 MID BIT(6) UNAL /*('0'B)/**/,
             17302    1           3 MON BIT(1) UNAL /*('0'B)/**/,
             17303    1           3 ERR# UBIN(14) UNAL /*(0)/**/,
             17304    1           3 SEV UBIN(3) UNAL /*(0)/**/,
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:18   
             17305    1         2 FREE$ PTR /*(ADDR(NIL))/**/,
             17306                               /* Head of FREE BLOCKS CHAIN in WORK_AREA */
             17307    1         2 NEXT$ PTR /*(ADDR(VM_HEADER.WORK_AREA))/**/,
             17308                               /* Ptr to next avail. word in WORK_AREA */
             17309    1         2 BAD_ADDRESS$ PTR /*(ADDR(NIL))/**/,
             17310                               /* Ptr to bad address textc info */
             17311    1         2 BLIND$ PTR /*(ADDR(NIL))/**/,
             17312                               /* Ptr to BLIND COPY textc info */
             17313    1         2 COPY$ PTR /*(ADDR(NIL))/**/,
             17314                               /* Ptr to COPY textc info */
             17315    1         2 FILE_FOLDER$ PTR /*(ADDR(NIL))/**/,
             17316                             /* Address to be used for storing copies of messages by user */
             17317    1         2 FROM$ PTR /*(ADDR(NIL))/**/,
             17318                               /* Ptr to FROM textc info */
             17319    1         2 REFERENCE$ PTR /*(ADDR(NIL))/**/,
             17320                               /* Ptr to REFERENCE textc info */
             17321    1         2 REPLY_TO$ PTR /*(ADDR(NIL))/**/,
             17322                               /* Ptr to REPLY-TO textc info */
             17323    1         2 RETURN_ADDRESS$ PTR /*(ADDR(NIL))/**/,
             17324                               /* Ptr to RETURN_ADDRESS address structure */
             17325    1         2 SIGNED$ PTR /*(ADDR(NIL))/**/,
             17326                               /* Signature text */
             17327    1         2 SUBJECT$ PTR /*(ADDR(NIL))/**/,
             17328                               /* Ptr to SUBJECT textc info */
             17329    1         2 TO$ PTR /*(ADDR(NIL))/**/,
             17330                               /* Ptr to TO textc info */
             17331    1         2 UNIQUE_ID$ PTR /*(ADDR(NIL))/**/,
             17332                                    /* Unique identifier for this message */
             17333    1         2 REFERS_TO_ID$ PTR /*(ADDR(NIL))/**/,
             17334                                    /* Identifies original mailgram for ACK/ERR/ANS */
             17335    1         2 NUM_TRACE_RECORDS UBIN WORD /*(0)/**/,
             17336                                    /* Number of TRACE records */
             17337    1         2 NUM_ENCL_RECORDS UBIN WORD /*(0)/**/,
             17338                             /* Number of binary enclosure records MINUS  context record */
             17339    1         2 RESERVED (0:5) UBIN WORD /*(0*0)/**/,
             17340                               /* Reserved for future expansion */
             17341    1         2 WORK_AREA UBIN WORD;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:19   
             17342                               /* Base of work area for textc data */
      329    17344
      330    17345          %VM_SEARCH_INFO;
             17346        %LSET LISTDIR='0'B;
             17355    1   DCL 1 VM_SEARCH_INFO STATIC,
             17356    1         2 NUM_ENTRIES UBIN WORD,
             17357                            /* Number of folders to be searched */
             17358    1         2 DCB# (0:10) UBIN WORD INIT(0*11)/**/,
             17359                            /* Number of dcb which points to folder to search */
             17360    1         2 MAP(0:10) UBIN WORD INIT(0*11)/**/,
             17361                           /* Maps entry numbers to SEARCH_LIST$ in profile */
             17362    1         2 GETDCB#(0:10) UBIN WORD INIT(0*11)/**/,
             17363                            /* DCB number for this slot (via get dcb) */
             17364    1         2 ACTIVE BIT(1) UNAL INIT('0'B)/**/,
             17365                            /* All files are open */
             17366    1         2 GLOBAL BIT(1) UNAL INIT('0'B)/**/,
             17367                            /* Global folder exists */
             17368    1         2 CURRENT BIT(1) UNAL INIT('0'B)/**/,
             17369                            /* Local folder exists */
             17370    1         2 * BIT(33) UNAL;
      331    17372
      332    17373          %VM_FOLDER_INFO (NAME=VM_CURRENT_FOLDER, STCLASS=STATIC SYMDEF);
             17374        %LSET LISTDIR='0'B;
             17383    1   DCL 1 VM_CURRENT_FOLDER STATIC SYMDEF,
             17384    1         2 PSID CHAR(6) CALIGNED INIT(' ')/**/,
             17385                          /* Packset on which this folder resides */
             17386    1         2 ACCT CHAR(8) CALIGNED INIT(' ')/**/,
             17387                            /* Account where this folder resides */
             17388    1         2 FOLDER CHAR(25) CALIGNED INIT(' ')/**/,
             17389                            /* Name of this folder */
             17390    1         2 PASS CHAR(8) CALIGNED INIT(' ')/**/,
             17391                            /* Password (if any) of this folder */
             17392    1         2 SITENAME CHAR(8) INIT(' ')/**/,
             17393                            /* Site where this folder exists */
             17394    1         2 TIME,
             17395                            /* Various times of interest */
             17396    1           3 ACCESS UBIN WORD INIT(0)/**/,
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:20   
             17397                            /* Time that this file was last accessed */
             17398    1           3 CREATION UBIN WORD INIT(0)/**/,
             17399                            /* Time that this file was created */
             17400    1           3 MODIFY UBIN WORD INIT(0)/**/,
             17401                            /* Time that this file was last modified */
             17402    1         2 NRECS UBIN WORD INIT(0)/**/,
             17403                            /* Number of records in this file */
             17404    1         2 UGRANS UBIN WORD INIT(0)/**/,
             17405                            /* Number of granules currently in use */
             17406    1         2 FLAGS,
             17407    1           3 UPDATE BIT(1) UNAL INIT('0'B)/**/,
             17408                            /* May the user UPDATE or just READ this folder */
             17409    1           3 OWNER BIT(1) UNAL INIT('0'B)/**/,
             17410                            /* Is current user OWNER of this folder? */
             17411    1           3 ACCT_SPEC BIT(1) UNAL INIT('0'B)/**/,
             17412                            /* Was a account specified in the address? */
             17413    1           3 FOLDER_SPEC BIT(1) UNAL INIT('0'B)/**/,
             17414                            /* Was a folder specified in the address? */
             17415    1           3 SITENAME_SPEC BIT(1) UNAL INIT('0'B)/**/,
             17416                            /* Was a sitename specified in the address? */
             17417    1           3 OPEN BIT(1) UNAL INIT('0'B)/**/,
             17418                            /* Has this folder been opened? */
             17419    1           3 RESERVED BIT(30) UNAL INIT('0'B)/**/,
             17420    1         2 USER_NAME,
             17421                            /* Name that got us to this folder */
             17422    1           3 COUNT UBIN BYTE CALIGNED INIT(0)/**/,
             17423    1           3 TEXT CHAR(200) CALIGNED INIT(' ')/**/;
      333    17425
      334    17426          %VM_BODYREC (TYP=%VM_BODY_TEXT,STCLASS=STATIC,VARYLEN=NO);
             17427        %LSET LISTDIR='0'B;
             17436    1   DCL 1 VM_BODYREC STATIC,
             17437    1         2 TYPE UBIN BYTE CALIGNED INIT(1)/**/,
             17438                        /* The type of the record to be accessed. */
             17439    1         2 RESERVED UBIN (27) UNAL INIT(0)/**/,
             17440                         /* Reserved for future use */
             17441    1         2 VALUE,
             17442    1           3 COUNT UBIN WORD,
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:21   
             17443                        /* Number of bytes of DATA */
             17454    1           3 DATA CHAR(300) CALIGNED;
      335    17458
      336    17459
      337    17460        %VM_ADD_HEAD;
             17461        %LSET LISTDIR='0'B;
             17470    1   DCL 1 VM_ADD_HEAD BASED(VM_ADDLIST$),
             17471    1         2 ADDRESS_SIZE UBIN WORD /*(0)/**/,
             17472                               /* Number of words in this address list */
             17473    1         2 NUM_ENTRIES UBIN WORD /*(0)/**/,
             17474                               /* Number of entries in list */
             17475    1         2 FLAGS,
             17476    1           3 ERR# BIT(1) UNAL /*('0'B)/**/,
             17477                               /* Some error found in address list */
             17478    1           3 RESERVED BIT(35) UNAL /*('0'B)/**/,
             17479                               /* Reserved for future expansion */
             17480    1         2 HEAD$ PTR /*(ADDR(NIL))/**/,
             17481                               /* Head of link list */
             17482    1         2 FREE$ PTR /*(ADDR(NIL))/**/,
             17483                               /* Ptr to first entry in free block list */
             17484    1         2 NEXT$ PTR /*(ADDR(NIL))/**/,
             17485                               /* Ptr to next available word in work area */
             17486    1         2 WORK_AREA UBIN WORD;
             17487                               /* First word of work area. */
      338    17489        %VM_ADD_HEAD (NAME=VM_ENCL_HEAD,STCLASS="BASED(VM_ENCLLIST$)");
             17490        %LSET LISTDIR='0'B;
             17499    1   DCL 1 VM_ENCL_HEAD BASED(VM_ENCLLIST$),
             17500    1         2 ADDRESS_SIZE UBIN WORD /*(0)/**/,
             17501                               /* Number of words in this address list */
             17502    1         2 NUM_ENTRIES UBIN WORD /*(0)/**/,
             17503                               /* Number of entries in list */
             17504    1         2 FLAGS,
             17505    1           3 ERR# BIT(1) UNAL /*('0'B)/**/,
             17506                               /* Some error found in address list */
             17507    1           3 RESERVED BIT(35) UNAL /*('0'B)/**/,
             17508                               /* Reserved for future expansion */
             17509    1         2 HEAD$ PTR /*(ADDR(NIL))/**/,
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:22   
             17510                               /* Head of link list */
             17511    1         2 FREE$ PTR /*(ADDR(NIL))/**/,
             17512                               /* Ptr to first entry in free block list */
             17513    1         2 NEXT$ PTR /*(ADDR(NIL))/**/,
             17514                               /* Ptr to next available word in work area */
             17515    1         2 WORK_AREA UBIN WORD;
             17516                               /* First word of work area. */
      339    17518        %VM_ADD_HEAD (NAME=INIT_ENCL_HEAD,STCLASS=CONSTANT);
             17519        %LSET LISTDIR='0'B;
             17528    1   DCL 1 INIT_ENCL_HEAD CONSTANT,
             17529    1         2 ADDRESS_SIZE UBIN WORD INIT(0)/**/,
             17530                               /* Number of words in this address list */
             17531    1         2 NUM_ENTRIES UBIN WORD INIT(0)/**/,
             17532                               /* Number of entries in list */
             17533    1         2 FLAGS,
             17534    1           3 ERR# BIT(1) UNAL INIT('0'B)/**/,
             17535                               /* Some error found in address list */
             17536    1           3 RESERVED BIT(35) UNAL INIT('0'B)/**/,
             17537                               /* Reserved for future expansion */
             17538    1         2 HEAD$ PTR INIT(ADDR(NIL))/**/,
             17539                               /* Head of link list */
             17540    1         2 FREE$ PTR INIT(ADDR(NIL))/**/,
             17541                               /* Ptr to first entry in free block list */
             17542    1         2 NEXT$ PTR INIT(ADDR(NIL))/**/,
             17543                               /* Ptr to next available word in work area */
             17544    1         2 WORK_AREA UBIN WORD;
             17545                               /* First word of work area. */
      340    17547        %VM_INFOKEY (NAME=VM_ENCLLIST_KEY,TYP=%VM_TYPE_ENCL);
             17548        %LSET LISTDIR='0'B;
             17557    1   DCL 1 VM_ENCLLIST_KEY STATIC,
             17558    1         2 COUNT UBIN BYTE CALIGNED INIT(5)/**/,
             17559    1         2 TYPE UBIN BYTE CALIGNED INIT(100)/**/,
             17560                        /* The type of the record to be accessed. */
             17561    1         2 MESSAGE_NUMBER UBIN WORD CALIGNED INIT(0)/**/;
             17562                        /* Number of this message. */
      341    17564        %VM_BODYREC (NAME=VM_ENCLREC,VARYLEN=YES,TYP=%VM_BODY_BINARY_ENCL,
      342    17565                     STCLASS="BASED(VM_ENCLREC$)");
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:23   
             17566        %LSET LISTDIR='0'B;
             17575    1   DCL 1 VM_ENCLREC BASED(VM_ENCLREC$),
             17576    1         2 TYPE UBIN BYTE CALIGNED /*(4)/**/,
             17577                        /* The type of the record to be accessed. */
             17578    1         2 RESERVED UBIN (27) UNAL /*(0)/**/,
             17579                         /* Reserved for future use */
             17580    1         2 VALUE,
             17581    1           3 COUNT UBIN WORD,
             17582                        /* Number of bytes of DATA */
             17591    1           3 DATA CHAR(VM_ENCLREC.VALUE.COUNT) CALIGNED;
      343    17597        %VM_BODYKEY (NAME=VM_ENCLKEY,TYP=%VM_TYPE_ENCL_INIT);
             17598        %LSET LISTDIR='0'B;
             17607    1   DCL 1 VM_ENCLKEY STATIC,
             17608    1         2 COUNT UBIN BYTE CALIGNED INIT(7)/**/,
             17609    1         2 TYPE UBIN BYTE CALIGNED INIT(101)/**/,
             17610                        /* The type of the record to be accessed. */
             17611    1         2 MESSAGE_NUMBER UBIN WORD CALIGNED INIT(0)/**/,
             17612                        /* Number of this message. */
             17613    1         2 REC_NUMBER UBIN HALF CALIGNED INIT(0)/**/;
             17614                        /* The record number identifying the line of
             17615                           the message body to be accessed. */
      344    17617        %VM_ENCLOS (STCLASS="BASED(ENCL$)");
             17618        %LSET LISTDIR='0'B;
             17627    1   DCL 1 VM_ENCLOS BASED(ENCL$),
             17628    1         2 NEXT$ PTR /*(ADDR(NIL))/**/,
             17629                             /* Ptr to next entry on list */
             17630    1         2 PREV$ PTR /*(ADDR(NIL))/**/,
             17631                             /* Ptr to previous entry on list */
             17632    1         2 FLAGS,
             17633    1           3 DELETED BIT(1) UNAL /*('0'B)/**/,
             17634                             /* Set if this enclosure is deleted */
             17635    1           3 FORWARD BIT(1) UNAL /*('0'B)/**/,
             17636                             /* Set if this encl. is from a fwd mailgram */
             17637    1           3 RESERVED BIT(34) UNAL /*('0'B)/**/,
             17638                             /* Misc flags for future use */
             17639    1         2 RESERVED (0:5) UBIN WORD /*(0*0)/**/,
             17640                             /* Reserved for future use */
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:24   
             17641    1         2 NRECS UBIN WORD WALIGNED /*(0)/**/,
             17642                             /* Number of records in this enclosure */
             17643    1         2 TYPE UBIN BYTE  CALIGNED /*(0)/**/,
             17644                             /* Type, 101-199, of the record */
             17645    1         2 TITLE$ PTR /*(ADDR(NIL))/**/;
             17646                             /* Pointer to title string */
      345    17648        %VM_ENCLOS (NAME=INIT_ENCLOS,STCLASS=CONSTANT);
             17649        %LSET LISTDIR='0'B;
             17658    1   DCL 1 INIT_ENCLOS CONSTANT,
             17659    1         2 NEXT$ PTR INIT(ADDR(NIL))/**/,
             17660                             /* Ptr to next entry on list */
             17661    1         2 PREV$ PTR INIT(ADDR(NIL))/**/,
             17662                             /* Ptr to previous entry on list */
             17663    1         2 FLAGS,
             17664    1           3 DELETED BIT(1) UNAL INIT('0'B)/**/,
             17665                             /* Set if this enclosure is deleted */
             17666    1           3 FORWARD BIT(1) UNAL INIT('0'B)/**/,
             17667                             /* Set if this encl. is from a fwd mailgram */
             17668    1           3 RESERVED BIT(34) UNAL INIT('0'B)/**/,
             17669                             /* Misc flags for future use */
             17670    1         2 RESERVED (0:5) UBIN WORD INIT(0*0)/**/,
             17671                             /* Reserved for future use */
             17672    1         2 NRECS UBIN WORD WALIGNED INIT(0)/**/,
             17673                             /* Number of records in this enclosure */
             17674    1         2 TYPE UBIN BYTE  CALIGNED INIT(0)/**/,
             17675                             /* Type, 101-199, of the record */
             17676    1         2 TITLE$ PTR INIT(ADDR(NIL))/**/;
             17677                             /* Pointer to title string */
      346    17679          %VM_RADDRESS (NAME=VM$RADDRESS,STCLASS=BASED);
             17680        %LSET LISTDIR='0'B;
             17689    1   DCL 1 VM$RADDRESS BASED,
             17690    1         2 NEXT$ PTR /*(ADDR(NIL))/**/,
             17691                               /* Ptr to next entry on list */
             17692    1         2 PREV$ PTR /*(ADDR(NIL))/**/,
             17693                               /* Ptr to previous entry on list */
             17694    1         2 FLAGS,
             17695    1           3 UNDEF# BIT (1) UNAL /*('0'B)/**/,
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:25   
             17696                               /* This entry is not valid. Report as an error */
             17697    1           3 USER# BIT(1) UNAL /*('0'B)/**/,
             17698                               /* USER def, not LIST */
             17699    1           3 RESERVED BIT(7) UNAL /*('0'B)/**/,
             17700                               /* Reserved for future use */
             17701    1         2 TYPE UBIN BYTE UNAL /*(1)/**/,
             17702    1         2 NAME_KEY CHAR(20) CALIGNED /*(' ')/**/,
             17703                               /* Used only for USER definitions */
             17704    1         2 FOLDER CHAR(25) CALIGNED /*(' '*0)/**/,
             17705    1         2 NOMAD REDEF FOLDER,
             17706    1           3 FOLDER CHAR (18) CALIGNED,
             17707    1           3 DELIM CHAR (1) CALIGNED,
             17708    1           3 PSID CHAR (6) CALIGNED,
             17709    1         2 PASS CHAR(8) CALIGNED /*(' '*0)/**/,
             17710                               /* NOTE: Passwords are encrypted */
             17711    1         2 SITENAME CHAR(8) CALIGNED /*(' '*0)/**/,
             17712    1         2 ACCT CHAR(8) CALIGNED /*(' '*0)/**/;
      347    17714
      348    17715          %VM_UADDRESS (NAME=VM$UADDRESS,STCLASS=BASED);
             17716        %LSET LISTDIR='0'B;
             17725    1   DCL 1 VM$UADDRESS BASED,
             17726    1         2 NEXT$ PTR /*(ADDR(NIL))/**/,
             17727                               /* Ptr to next entry on list */
             17728    1         2 PREV$ PTR /*(ADDR(NIL))/**/,
             17729                               /* Ptr to previous entry on list */
             17730    1         2 FLAGS,
             17731    1           3 UNDEF# BIT (1) UNAL /*('0'B)/**/,
             17732                               /* This entry is not valid. Report as an error */
             17733    1           3 USER# BIT(1) UNAL /*('0'B)/**/,
             17734                               /* USER def, not LIST */
             17735    1           3 RESERVED BIT(7) UNAL /*('0'B)/**/,
             17736                               /* Reserved for future use */
             17737    1         2 TYPE UBIN BYTE UNAL /*(2)/**/,
             17738    1         2 NAME_KEY CHAR(20) CALIGNED /*(' ')/**/,
             17739                               /* Used only for USER definitions */
             17740    1         2 FOLDER CHAR(25) CALIGNED /*(' '*0)/**/,
             17741    1         2 NOMAD REDEF FOLDER,
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:26   
             17742    1           3 FOLDER CHAR (18) CALIGNED,
             17743    1           3 DELIM CHAR (1) CALIGNED,
             17744    1           3 PSID CHAR (6) CALIGNED,
             17745    1         2 PASS CHAR(8) CALIGNED /*(' '*0)/**/,
             17746                               /* NOTE: Passwords are encrypted */
             17747    1         2 SITENAME CHAR(8) CALIGNED /*(' '*0)/**/,
             17748    1         2 USER_NAME,
             17749    1           3 COUNT UBIN BYTE CALIGNED /*(0)/**/,
             17750    1           3 TEXT CHAR(200) CALIGNED /*(' ')/**/;
      349    17752          %VM_SITE;
             17753        %LSET LISTDIR='0'B;
             17762    1   DCL 1 VM_SITE STATIC,
             17763    1         2 FLAGS,
             17764    1           3 RETURN_TO_ORIGIN BIT(1) UNAL INIT('0'B)/**/,
             17765                         /* Receiver should "become" new ORIGIN site.
             17766                            Used in ANSWER cases */
             17767    1           3 RESERVED BIT(35) UNAL INIT('0'B)/**/,
             17768    1         2 NUM_SITES UBIN WORD INIT(0)/**/,
             17769                      /* How many sites have received this message so far */
             17770    1         2 ORIGIN CHAR(8) CALIGNED INIT(' ')/**/,
             17771                      /* Where did this message originate? */
             17772    1         2 RECEIVER_SITE (0:25) CHAR(8) CALIGNED;
             17773                      /* Contains the siteids (as known to sender) where
             17774                         this message has been sent. Used to detect loops */
      350    17776        %SET LISTMAC='0'B;
      351    17777        %SET LISTSUB='0'B;
      352    17778        %SET LISTEXP='0'B;
      353    17779        %VM_RADDRESS;
      354    17814        /***** Constant versions *****/
      355    17815          %VM_HEADER (NAME=CVM_HEADER,STCLASS=CONSTANT);
      356    17944        %EJECT;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:27   
      357    17945        /***** Misc structures *****/
      358    17946        %F_FDS (NAME=F_FDSSIGNED, DCB=M$ME, STCLASS=STATIC,
      359    17947             FMT=FMT_SIGNED,
      360    17948             NVECS=1,
      361    17949             VECTR=VECT);
      362    18062               %F_FDS (NAME=F_FDSSPACE, DCB=M$ME,
      363    18063               VECTR=VECT, FMT=FMT_SPACE, NVECS=0);
      364    18176    1   DCL VECT VECTOR STATIC;
      365    18177    1   DCL 1 FMT_SIGNED STATIC,
      366    18178    1         2 * CHAR(0) INIT ('%V'),
      367    18179    1         2 * BIT(9) UNAL INIT('037'O),
      368    18180    1         2 * CHAR(0) INIT('%A');
      369    18181    1   DCL FMT_SPACE CHAR(0) CONSTANT INIT
      370    18182    1       ('%1X');
      371    18183    1   DCL BLANK_CHAR CHAR(1) CONSTANT INIT(' ');
      372    18184    1   DCL UTS UBIN WORD STATIC;               /* Current uts */
      373    18185
      374    18186          %XUM$MCB (NAME=MCB,STCLASS=STATIC);
      375    18190
      376    18191          %VLP_NAME (FPTN=TEMP_TEXTC,LEN=256,STCLASS=AUTO);
      377    18218
      378    18219        %FPT_XCON (UENTRY=VNS$XCON, STCLASS=CONSTANT);
      379    18233        %FPT_INT (UENTRY=VNS$BREAK, STCLASS=CONSTANT);
      380    18247        %FPT_OPEN (FPTN=OPEN_WORK,
      381    18248                   STCLASS=CONSTANT,
      382    18249                       ACS=DIRECT,
      383    18250                       ASN=FILE,
      384    18251                       DCB=M$WORK,
      385    18252                       EXIST=OLDFILE,
      386    18253                       ORG=KEYED,
      387    18254                       NAME=VM_SEND_FILE_NAME);
      388    18363
      389    18364        %FPT_OPEN (FPTN=OPEN_FORWARD_FILE,
      390    18365                   STCLASS=CONSTANT,
      391    18366                       ACS=SEQUEN,
      392    18367                       ASN=FILE,
      393    18368                       DCB=M$EDIT,
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:28   
      394    18369                       EXIST=OLDFILE,
      395    18370                       FUN=UPDATE,
      396    18371                       ORG=CONSEC,
      397    18372                       NAME=VM_FORWARD_FILE_NAME,
      398    18373                       PASS=VM_FORWARD_FILE_PASS);
      399    18482
      400    18483        %FPT_OPEN (FPTN=OPEN_APPEND,
      401    18484                   STCLASS=CONSTANT,
      402    18485                      DCB=M$APND,
      403    18486                      FUN=IN,
      404    18487                      NAME=FID_NAME,
      405    18488                      ACCT=FID_ACCT,
      406    18489                      PASS=FID_PASS,
      407    18490                      SN=FID_SN);
      408    18599
      409    18600
      410    18601        %FPT_CLOSE (FPTN=CLOSE_SAVE,
      411    18602                       DISP=SAVE);
      412    18644
      413    18645        %FPT_CLOSE (FPTN=CLOSE_SCRATCH,
      414    18646                        DISP=SCRATCH);
      415    18688
      416    18689        %FPT_READ (FPTN=READ_SI,
      417    18690                       DCB=M$SI,
      418    18691                       BUF=CMD_BUF);
      419    18730
      420    18731        %FPT_READ (FPTN=READ_ENCL_FILE,
      421    18732                    DCB=M$ENCL);
      422    18771
      423    18772
      424    18773
      425    18774
      426    18775        %FPT_PROMPT (FPTN=CHANGE_PROMPT, DCB=M$SI, STCLASS="STATIC SYMDEF");
      427    18803
      428    18804        %FPT_SINPUT (FPTN=SET_INPUT,
      429    18805                     DCB=M$SI,
      430    18806                     POSITION=NO);
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:29   
      431    18843
      432    18844        %FPT_LINK(FPTN=LINKFPT,
      433    18845             ECHO=NO,
      434    18846             TEXTC=YES);
      435    18864
      436    18865        %VLP_ACCT (FPTN=SYS_ACCT,ACCT=':SYS', STCLASS=CONSTANT);
      437    18878
      438    18879        %FPT_FID (FPTN=CHECK_FID_CONST,
      439    18880                       STCLASS=CONSTANT,
      440    18881                       ACCT=FID_ACCT,
      441    18882                       NAME=FID_NAME,
      442    18883                       PASS=FID_PASS,
      443    18884                       SN=FID_SN);
      444    18907
      445    18908        %FPT_FID( FPTN=CHECK_FID,
      446    18909                  STCLASS="");
      447    18932
      448    18933        %FPT_OPEN (FPTN=OPEN_SI_DEFAULT,
      449    18934                   STCLASS=CONSTANT,
      450    18935                       REASSIGN=YES,
      451    18936                       FUN=IN,
      452    18937                       ASN=DEVICE,
      453    18938                       ORG=CONSEC,
      454    18939                       ACS=SEQUEN,
      455    18940                       SCRUB=YES,
      456    18941                       WSN=ERASE,
      457    18942                       DCB=M$SI);
      458    19051
      459    19052        %FPT_OPEN (FPTN=OPEN_SI,
      460    19053                   STCLASS=CONSTANT,
      461    19054                       DCB=M$SI,
      462    19055                       SCRUB =YES,
      463    19056                       FUN=IN,
      464    19057                       NAME=FID_NAME,
      465    19058                       ACCT=FID_ACCT,
      466    19059                       PASS=FID_PASS,
      467    19060                       SN=FID_SN);
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:30   
      468    19169
      469    19170        %FPT_OPEN (FPTN=OPEN_ENCL_FILE,
      470    19171                   STCLASS = CONSTANT,
      471    19172                       ASN=FILE,
      472    19173                       DCB=M$ENCL,
      473    19174                       FUN=IN,
      474    19175                       ORG=CONSEC,
      475    19176                       NAME=FID_NAME,
      476    19177                       ACCT=FID_ACCT,
      477    19178                       PASS=FID_PASS,
      478    19179                       SN=FID_SN);
      479    19288
      480    19289        %FPT_OPEN (FPTN=OPEN_FORWARD_ENCL_FILE,
      481    19290                       ACS=DIRECT,
      482    19291                       ASN=FILE,
      483    19292                       DCB=M$ENCL,
      484    19293                       EXIST=OLDFILE,
      485    19294                       FUN=IN,
      486    19295                       NAME=VM_FORWARD_ENCL_NAME,
      487    19296                       PASS=VM_FORWARD_FILE_PASS,
      488    19297                       ORG=KEYED,
      489    19298                       SCRUB=YES,
      490    19299                       STCLASS=CONSTANT);
      491    19408        %FPT_OPEN( FPTN=OPEN_FPT,
      492    19409                   STCLASS="");
      493    19518
      494    19519        %VLP_NAME (FPTN=FID_NAME);
      495    19546        %VLP_ACCT (FPTN=FID_ACCT);
      496    19559        %VLP_PASS (FPTN=FID_PASS);
      497    19572        %VLP_SN (FPTN=FID_SN);
      498    19585
      499    19586        %FPT_ERR (FPTN=NOTSENT_ERR, STCLASS=CONSTANT, CODE=E_NOTSENT);
      500    19601
      501    19602        %FPT_WAIT  (FPTN=TAKE_THIRTY,
      502    19603                    STCLASS=CONSTANT,
      503    19604                    UNITS=30);
      504    19618
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:31   
      505    19619        %FPT_TIME (FPTN=GET_TIME,               /* Get current time */
      506    19620                   STCLASS=CONSTANT,
      507    19621                       SOURCE=CLOCK,
      508    19622                       DEST=UTS,
      509    19623                       TSTAMP=UTS);
      510    19642
      511    19643        %FPT_TIME (FPTN=GET_CURRENT,
      512    19644                   STCLASS=CONSTANT,
      513    19645                       SOURCE=CLOCK,
      514    19646                       DATE=WORK_DATE,
      515    19647                       TIME=WORK_TIME,
      516    19648                       DEST=LOCAL);
      517    19667
      518    19668        %FPT_TIME (FPTN=CHECK_TIME,
      519    19669                   STCLASS=CONSTANT,
      520    19670                       SOURCE=LOCAL,
      521    19671                       DATE=WORK_DATE,
      522    19672                       TIME=WORK_TIME,
      523    19673                       DEST=UTS,
      524    19674                       TSTAMP=WORK_UTS);
      525    19693
      526    19694        %FPT_TIME  (FPTN=GET_ANSI_TIME,
      527    19695                    STCLASS=CONSTANT,
      528    19696                    SOURCE=CLOCK,
      529    19697                    DEST=ANS,
      530    19698                    TIME=ANSI_TIME,
      531    19699                    DATE=ANSI_DATE);
      532    19718
      533    19719        %FPT_TIME (FPTN=GET_UTS,
      534    19720                   STCLASS=CONSTANT,
      535    19721                       SOURCE=UTS,
      536    19722                       DATE=WORK_DATE,
      537    19723                       TIME=WORK_TIME,
      538    19724                       DEST=LOCAL,
      539    19725                       TSTAMP = WORK_UTS);
      540    19744
      541    19745        /***** Fpts to manipulate mail comgroup *****/
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:32   
      542    19746        %FPT_OPEN (FPTN=OPEN_MAILCG,
      543    19747                   STCLASS=CONSTANT,
      544    19748                       DCB=M$MAIL_COMGROUP,
      545    19749                       ASN=COMGROUP,
      546    19750                       FUN=UPDATE,
      547    19751                       NAME=VM_MAILCG_NAME,
      548    19752                       ACCT=VM_MAIL_ACCT,
      549    19753                       SETSTA=VM_MAILCG_SETSTA,
      550    19754                       SHARE=ALL);
      551    19863
      552    19864        %FPT_WRITE     (FPTN=WRITE_MAILCG,
      553    19865                            DCB=M$MAIL_COMGROUP,
      554    19866                            BUF=VM_CGBUFFER,
      555    19867                            STATION=MAILCG_STATION);
      556    19898
      557    19899        %VM_CGBUFFER;
      558    19930
      559    19931        %VLP_STATION (FPTN=MAILCG_STATION,
      560    19932                      STCLASS=CONSTANT,
      561    19933                       STATION='MAILMAN',
      562    19934                       DIRONLY=YES);
      563    19961
      564    19962               %FPT_OPEN (FPTN=OPEN_EDIT_FILE,
      565    19963               STCLASS=CONSTANT,
      566    19964               ASN=FILE,
      567    19965               DCB=M$EDIT,
      568    19966               FUN=IN,
      569    19967               NAME=EDIT_NAME,
      570    19968               ORG=KEYED,
      571    19969               SCRUB=YES,
      572    19970               SHARE=NONE);
      573    20079
      574    20080        %VLP_NAME (FPTN=EDIT_NAME,NAME='*BODY',STCLASS=CONSTANT);
      575    20107
      576    20108        /***** X$HELP structures *****/
      577    20109        %XUH_PARAM (NAME=HELP_PARAM,
      578    20110                       PROCNAME=SEND_PROG_NAME,
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:33   
      579    20111                       PROCACCT=SYS_ACCT,
      580    20112                       OUTDCB1=M$ME);
      581    20173               %VLP_NAME (FPTN=MAIL_PROG_NAME,
      582    20174               NAME='MAIL');
      583    20201
      584    20202        %VLP_NAME (FPTN=SEND_PROG_NAME,
      585    20203                       NAME='SEND');
      586    20230
      587    20231        /***** Cmds to reset command line dcbs *****/
      588    20232        %FPT_YC (FPTN    =  RESET_#1,
      589    20233                 STCLASS =  CONSTANT,
      590    20234                 CMD     =  RESET_#1_CMD,
      591    20235                 ECHO    =  NO,
      592    20236                 NOERR   =  YES);
      593    20253
      594    20254    1   DCL RESET_#1_CMD CHAR(0) CONSTANT INIT('!RESET #1');
      595    20255
      596    20256        %FPT_YC (FPTN    =  RESET_#2,
      597    20257                 STCLASS =  CONSTANT,
      598    20258                 CMD     =  RESET_#2_CMD,
      599    20259                 ECHO    =  NO,
      600    20260                 NOERR   =  YES);
      601    20277
      602    20278    1   DCL RESET_#2_CMD CHAR(0) CONSTANT INIT('!RESET #2');
      603    20279
      604    20280        %FPT_YC (FPTN    =  RESET_#3,
      605    20281                 STCLASS =  CONSTANT,
      606    20282                 CMD     =  RESET_#3_CMD,
      607    20283                 ECHO    =  NO,
      608    20284                 NOERR   =  YES);
      609    20301
      610    20302    1   DCL RESET_#3_CMD CHAR(0) CONSTANT INIT('!RESET #3');
      611    20303
      612    20304        %FPT_YC (FPTN    =  RESET_#4,
      613    20305                 STCLASS =  CONSTANT,
      614    20306                 CMD     =  RESET_#4_CMD,
      615    20307                 ECHO    =  NO,
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:34   
      616    20308                 NOERR   =  YES);
      617    20325
      618    20326    1   DCL RESET_#4_CMD CHAR(0) CONSTANT INIT('!RESET #4');
      619    20327
      620    20328        /***** Error codes *****/
      621    20329          %VLP_ERRCODE (FPTN=E_SYNERR,FCG="XU",MID="R",
      622    20330                        ERR#=%E$SYNERR,STCLASS=CONSTANT);
      623    20375               %VLP_ERRCODE (FPTN=E_NOTALLOW,FCG="VN",MID="S",
      624    20376               ERR#=%E$NOTALLOW,STCLASS=CONSTANT);
      625    20421               %VLP_ERRCODE (FPTN=E_NAMENTALLOWED,FCG="VM",MID="O",
      626    20422               ERR#=%E$NAMENTALLOWED,STCLASS=CONSTANT);
      627    20467               %VLP_ERRCODE (FPTN=E_BADMAIL,FCG="VN",MID="S",
      628    20468               ERR#=%E$BADMAIL,STCLASS=CONSTANT);
      629    20513               %VLP_ERRCODE (FPTN=E_NOMORE,FCG="VN",MID="S",
      630    20514               ERR#=%E$NOMORE,STCLASS=CONSTANT);
      631    20559               %VLP_ERRCODE (FPTN=E_BADADDRESS,FCG="VN",MID="S",
      632    20560               ERR#=%E$BADADDRESS,STCLASS=CONSTANT);
      633    20605        /*E*    ERROR: VNS-E$BADADDRESS-0
      634    20606                MESSAGE: The address %U1 is undefined or illegal.
      635    20607        */
      636    20608               %VLP_ERRCODE (FPTN=E_MISSINGFIELDS, FCG="VN", MID="S",
      637    20609               ERR#=%E$MISSINGFIELDS, STCLASS=CONSTANT);
      638    20654        /*E*  ERROR:   VNS-E$MISSINGFIELDS-0
      639    20655              MESSAGE: The TO field was not supplied (or was not recognized) in a SEND
      640    20656                       file processed with the GATEWAY option.  The message cannot be sent.
      641    20657        */
      642    20658               %VLP_ERRCODE (FPTN=E_NCG1,FCG="VN",MID="S",
      643    20659               ERR#=%E$NCG1,STCLASS=CONSTANT);
      644    20704        /*E* ERROR: VNS-E$NCG1-0
      645    20705             MESSAGE: Error accessing the MAILMAN comgroup for the following
      646    20706                      reason.  MAILMAN may not be running, see your mail administrator.
      647    20707        */
      648    20708               %VLP_ERRCODE (FPTN=E_NOTSENT,FCG="VN",MID="S",
      649    20709               ERR#=%E$NOTSENT,SEV=4,STCLASS=CONSTANT);
      650    20754        /*E*    ERROR: VNS-E$NOTSENT-4
      651    20755                MESSAGE: Message was not sent.
      652    20756                DESCRIPTION: This message needs a severity of 4 because it is
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:35   
      653    20757                             used on M$ERR calls to abnormally terminate SEND,
      654    20758                             and the error severity becomes the STEPCC.
      655    20759        */
      656    20760               %VLP_ERRCODE (FPTN=E_BADRTOADDRESS,FCG="VN",MID="S",
      657    20761               ERR#=%E$BADRTOADDRESS,STCLASS=CONSTANT);
      658    20806        /*E*    ERROR: VNS-E$BADRTOADDRESS-0
      659    20807                MESSAGE: Check the REPLY TO address specified in your profile.
      660    20808        */
      661    20809               %VLP_ERRCODE (FPTN=E_SENDBRKMSG,FCG="VN",MID='S',
      662    20810               ERR#=%E$SENDBRKMSG,STCLASS=CONSTANT);
      663    20855        /*E*    ERROR:   VNS-E$SENDBRKMSG-0
      664    20856                MESSAGE: Use CANCEL to NOT send this message,
      665    20857                         or QUIT to send the message and exit.
      666    20858        */
      667    20859               %VLP_ERRCODE (FPTN=E_USING_MSG_FMT,FCG="VM",MID='O',
      668    20860               ERR#=%E$USING_MSG_FMT,STCLASS=CONSTANT);
      669    20905               %VLP_ERRCODE (FPTN=E_FORMSGFMT,FCG="VN",MID='S',
      670    20906               ERR#=%E$FORMSGFMT,STCLASS=CONSTANT);
      671    20951        /*E*    ERROR:   VNS-E$FORMSGFMT-0
      672    20952                MESSAGE:<<Forwarded text will be appended>>
      673    20953        */
      674    20954               %VLP_ERRCODE (FPTN=E_FORENCLFMT,FCG="VN",MID='S',
      675    20955               ERR#=%E$FORENCLFMT,STCLASS=CONSTANT);
      676    21000        /*E*    ERROR:   VNS-E$FORENCLFMT-0
      677    21001                MESSAGE:<<Forwarded enclosures will be attached>>
      678    21002        */
      679    21003               %VLP_ERRCODE (FPTN=E_EDITMESFMT,FCG="VN",MID='S',
      680    21004               ERR#=%E$EDITMESFMT,STCLASS=CONSTANT);
      681    21049        /*E*    ERROR:   VNS-E$EDITMESFMT-0
      682    21050                MESSAGE:Editing *BODY
      683    21051        */
      684    21052               %VLP_ERRCODE (FPTN=E_TOREQUIRED,FCG="VN",MID='S',
      685    21053               ERR#=%E$TOREQUIRED,STCLASS=CONSTANT);
      686    21098        /*E*    ERROR:   VNS-E$TOREQUIRED-0
      687    21099                MESSAGE:The TO field is required for SEND to operate.
      688    21100        */
      689    21101               %VLP_ERRCODE (FPTN=E_TOOMANYSITES,FCG="VN",MID='S',
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:36   
      690    21102               ERR#=%E$TOOMANYSITES,STCLASS=CONSTANT);
      691    21147        /*E*    ERROR:   VNS-E$TOOMANYSITES-0
      692    21148                MESSAGE:Too many receiver sites specified.
      693    21149        */
      694    21150               %VLP_ERRCODE (FPTN=E_PASTDEFER,FCG="VN",MID='S',
      695    21151               ERR#=%E$PASTDEFER,STCLASS=CONSTANT);
      696    21196        /*E*    ERROR:   VNS-E$PASTDEFER-0
      697    21197                MESSAGE:Deferred delivery date is not in the future.
      698    21198        */
      699    21199        %EJECT;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:37   
      700    21200        /*
      701    21201             ***** Setup ASNYC routines for exit and break control ...
      702    21202        */
      703    21203    1        CALL M$XCON (FPT_XCON);
      704    21204    1        REMEMBER ABORT_SEND IN VNS_REMEMBER (%BREAK_EXIT);
      705    21205    1        REMEMBER OPTION_BREAK IN VNS_REMEMBER (%BREAK_REPEAT);
      706    21206    1        CALL M$INT (FPT_INT);
      707    21207        /*
      708    21208             ***** Get the name of this site ...
      709    21209        */
      710    21210    1        CALL VMA$GET_SITE_NAME (IAM,VM_SITENAME) ALTRET(E_PMME);
      711    21211        /*
      712    21212             ***** Get user name ...
      713    21213        */
      714    21214    1        USER_NAME.L# = SIZEC(USER_NAME.NAME#);
      715    21215    1        CALL VMF$FROM (USER_NAME) ALTRET(E_PMME);
      716    21216        /*
      717    21217             ***** How data segments are used in mail/send/mailman ...
      718    21218
      719    21219                   Segments used in all modules
      720    21220                   ----------------------------
      721    21221                   VM_ADDLIST
      722    21222                      - used for building new address list (VMA$EXPAND_LIST).
      723    21223
      724    21224                   VM_HEADER
      725    21225                      - used to contain the header of a message.
      726    21226
      727    21227                   VM_PROFILE
      728    21228                      - used to contain the profile of a folder.
      729    21229
      730    21230                   VM_WORK
      731    21231                      - used to contain list and user definitions when
      732    21232                        expanding an address list.
      733    21233
      734    21234                   Segments used by only mail and send
      735    21235                   -----------------------------------
      736    21236                   VM_PARSEAREA
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:38   
      737    21237                      - used to contain input and parse info (XUR$GETCMD)
      738    21238
      739    21239                   VM_ENCLLIST
      740    21240                      - used to contain the enclosure context record
      741    21241        */
      742    21242    1        CALL VMA$ENLARGE_SEGMENT (VM_ADDLIST_,1024) ALTRET(E_PMME);
      743    21243    1        CALL VMA$ENLARGE_SEGMENT (VM_HEADER_,1024) ALTRET(E_PMME);
      744    21244    1        CALL VMA$ENLARGE_SEGMENT (VM_PROFILE_,1024) ALTRET(E_PMME);
      745    21245    1        CALL VMA$ENLARGE_SEGMENT (VM_WORK_,1024) ALTRET(E_PMME);
      746    21246    1        CALL VMA$ENLARGE_SEGMENT (VM_PARSEAREA_,1024) ALTRET(E_PMME);
      747    21247    1        CALL VMA$OPEN_ENCL_SEGS ALTRET(E_PMME);
      748    21248        /*
      749    21249             ***** Initialization of XUR$GETCMD data ...
      750    21250        */
      751    21251    1        XUR_INIT.WORK_ = VM_PARSEAREA_;  /* Setup parser workarea */
      752    21252    1        CALL XUR$INIT(XUR_INIT) ALTRET(ABORT_SEND);
      753    21253    1        CALL XUR$SETDCBS (M$SI_NUM,M$ME_NUM);
      754    21254    1        CALL XUR$SETERRMSG (ERRMSG_FID) ALTRET(E_PMME);
      755    21255        /*
      756    21256            ***** Setup parse nodes depending on native language
      757    21257        */
      758    21258    1        call VMD$GETNODES(VN_NATL_NODES, NODES$, VN_NODEFID, VN_NODENAMES);
      759    21259    1        IF NOT (B$JIT.PRIV.ACTIVE.FMSEC OR TESTMODE)
      760    21260    1        THEN
      761    21261    1             SEND_NODES$ = NODES_TO_USE(%PN_SEND_NODES);
      762    21262    1        ELSE
      763    21263    1             SEND_NODES$ = NODES_TO_USE(%PN_PRIVILEGED_NODES);
      764    21264    1        SEND_CMD$       = NODES_TO_USE(%PN_SEND_CMD);
      765    21265    1        CMD_TO$         = NODES_TO_USE(%PN_CMD_TO);
      766    21266    1        CMD_SUBJECT$    = NODES_TO_USE(%PN_CMD_SUBJECT);
      767    21267    1        CMD_BODY$       = NODES_TO_USE(%PN_CMD_BODY);
      768    21268    1        CMD_RTO$        = NODES_TO_USE(%PN_CMD_RTO);
      769    21269    1        CMD_REF$        = NODES_TO_USE(%PN_CMD_REF);
      770    21270    1        CMD_COPY$       = NODES_TO_USE(%PN_CMD_COPY);
      771    21271    1        CMD_BC$         = NODES_TO_USE(%PN_CMD_BC);
      772    21272    1        CMD_DEFER$      = NODES_TO_USE(%PN_CMD_DEFER);
      773    21273    1        CMD_SIGNED$     = NODES_TO_USE(%PN_CMD_SIGNED);
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:39   
      774    21274    1        OPTION_NODES$   = NODES_TO_USE(%PN_OPTION_NODES);
      775    21275             %INIT_STR( STR=VN_OPTIONS, CODE=E_OPTIONS_PROMPT);
      776    21298        /*
      777    21299             ***** Initialize global flags ...
      778    21300        */
      779    21301    1        DID_SEND      = %NO#;
      780    21302    1        PROMPT_OPTIONS = %NO#;
      781    21303    1        ERR_FLAG      = %NO#;
      782    21304    1        ID_ASSIGNED   = %NO#;
      783    21305    1        PROC_OPTIONS  = %NO#;
      784    21306    1        SI_FILE       = %NO#;
      785    21307    1        PREPROCESS_OPT = %NO#;
      786    21308    1        PREPROCESS    = %NO#;
      787    21309        /*
      788    21310            ***** Initialize binary enclosure stuff *****
      789    21311        */
      790    21312    1        VM_ENCL_HEAD.NUM_ENTRIES = 0;
      791    21313    1        VM_ENCL_HEAD.HEAD$ = ADDR(NIL);
      792    21314        /*
      793    21315             ***** Setup the default search list.
      794    21316                   Therefore, open :MAIL_CENTRAL.:MAIL
      795    21317                   if it exists. Otherwise, an unregistered system ...
      796    21318        */
      797    21319    1        CALL VMA$OPEN_GLOBAL (M$MAIL_GLOBAL_NUM)
      798    21320    2        WHENRETURN DO;
      799    21321    2             VM_SEARCH_INFO.NUM_ENTRIES = 1;
      800    21322    2             VM_SEARCH_INFO.GLOBAL = %YES#;
      801    21323    2             VM_SEARCH_INFO.DCB#(0) = M$MAIL_GLOBAL_NUM;
      802    21324    2        END;
      803    21325    2        WHENALTRETURN DO;
      804    21326    2             VM_SEARCH_INFO.NUM_ENTRIES = 0;
      805    21327    2             VM_SEARCH_INFO.GLOBAL = %NO#;
      806    21328    2        END;
      807    21329        /*
      808    21330             ***** Parse the command invocation line ...
      809    21331        */
      810    21332    1        SIZE = B$JIT.CCARS;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:40   
      811    21333    1        call XUR$GETCMD(SEND_CMD$->BSD,OUT$,IBEX_PROMPT,B$JIT.CCBUF,SIZE)
      812    21334    2        whenaltreturn do;
      813    21335    2             call XUR$ERRPTR;
      814    21336    2             call XUR$ERRMSG (OUTERR);
      815    21337    2             goto ABORT_SEND;
      816    21338    2        end;
      817    21339        /*
      818    21340             ***** Process command line options ...
      819    21341        */
      820    21342    1        ENTRY_REASON = OUT$ -> P$B.SUBLK$(0) -> P$B.CODE;
      821    21343    2        DO J = 1 TO OUT$ -> P$B.NSUBLKS - 1;
      822    21344    2             BLK$ = OUT$ -> P$B.SUBLK$(J);
      823    21345    3             DO CASE (P$B.CODE);         /* Get all options */
      824    21346    3             CASE (%OPT_OPTION);
      825    21347    3                 PROMPT_OPTIONS = %YES#; /* Prompt for 'OPTIONS:' */
      826    21348    3             CASE (%OPT_MAILADD);
      827    21349    3                 CALL VMB$USE_SPECIFIED (BLK$,USER_NAME,VM_CURRENT_FOLDER,
      828    21350    3                   M$MAIL_FILE_NUM,VM_SEARCH_INFO,%UPDATE#) ALTRET(BAD_MAIL);
      829    21351    3             CASE (%OPT_FID1);
      830    21352    3                 OPEN_FPT         = OPEN_SI;
      831    21353    3                 OPEN_FPT.V_      = vector(OPEN_FPT.V);
      832    21354    3                 CHECK_FID        = CHECK_FID_CONST;
      833    21355    3                 CHECK_FID.V_     = vector(CHECK_FID.V);
      834    21356    3                 CHECK_FID.TEXTFID_ = vector(P$S.TEXT);
      835    21357    3                 CHECK_FID.ASN_   = vector(OPEN_FPT.V.ASN#);
      836    21358    3                 CHECK_FID.RES_   = vector(OPEN_FPT.V.RES#);
      837    21359    3                 call M$FID( CHECK_FID ) altret(E_PMME);
      838    21360    3                 call M$OPEN( OPEN_FPT ) altret(E_PMME);
      839    21361    3                 SI_FILE = %YES#;
      840    21362    3             CASE (%OPT_GATEWAY);
      841    21363    3                 GATEWAY = %YES#;
      842    21364    3             CASE (%OPT_PREPROCESS);
      843    21365    3                 PREPROCESS_OPT = %YES#;
      844    21366    3                 PREPROCESS = %YES#;
      845    21367    3                 IF P$B.NSUBLKS > 0 THEN IF P$B.SUBLK$(0) -> P$B.CODE = %OPT_NO
      846    21368    3                      THEN
      847    21369    3                           PREPROCESS = %NO#;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:41   
      848    21370    3             END;
      849    21371    2        END;
      850    21372        /*
      851    21373             ***** Try to open the comgroup to MAILMAN now, to report up front
      852    21374                   if SEND won't work, then close it til later ...
      853    21375        */
      854    21376    1        CALL BINCHAR (VM_MAILCG_SETSTA.MYSTATION#,B$JIT.SYSID);
      855    21377    1        CALL INSERT (VM_MAILCG_SETSTA.MYSTATION#,0,4,'SEND');
      856    21378    1        IF NOT TESTMODE
      857    21379    2        THEN DO;
      858    21380    2             CALL M$OPEN (OPEN_MAILCG) ALTRET(E_CG);
      859    21381    2             VM_CGBUFFER.COMMAND = %VO_DUMMY#;
      860    21382    2             CALL M$WRITE (WRITE_MAILCG) ALTRET(E_CG);
      861    21383    2             CLOSE_SAVE.V.DCB# = M$MAIL_COMGROUP_NUM;
      862    21384    2             CALL M$CLOSE (CLOSE_SAVE) ALTRET (E_CG);
      863    21385    2        END;
      864    21386    2        DO NEVER;
      865    21387    2   E_CG:
      866    21388    2             CALL M$SENV;
      867    21389    2             CALL VMA$ERRMSG (E_NCG1);
      868    21390    2             CALL M$RENV;
      869    21391    2             CALL MON_ERR;
      870    21392    2             GOTO ABORT_SEND;
      871    21393    2        END;
      872    21394        /*
      873    21395             ***** Reset dcbs #1 - #4
      874    21396                   they cause problems later when M$LINKing
      875    21397                   to other processors ...
      876    21398        */
      877    21399    1        IF B$JIT.PRFLAGS.SI
      878    21400    1        THEN
      879    21401    1             CALL M$YC (RESET_#1) ALTRET(IGNORE_YC1);
      880    21402    1   IGNORE_YC1:
      881    21403    1        IF B$JIT.PRFLAGS.UI
      882    21404    1        THEN
      883    21405    1             CALL M$YC (RESET_#2) ALTRET(IGNORE_YC2);
      884    21406    1   IGNORE_YC2:
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:42   
      885    21407    1        IF B$JIT.PRFLAGS.OU
      886    21408    1        THEN
      887    21409    1             CALL M$YC (RESET_#3) ALTRET(IGNORE_YC3);
      888    21410    1   IGNORE_YC3:
      889    21411    1        IF B$JIT.PRFLAGS.LS
      890    21412    1        THEN
      891    21413    1             CALL M$YC (RESET_#4) ALTRET(IGNORE_YC4);
      892    21414    1   IGNORE_YC4: ;
      893    21415        /*
      894    21416             ***** If the reason for entry is other than send,
      895    21417                   then the work file already contains useful info.
      896    21418                   Open it and pickup the header info ...
      897    21419        */
      898    21420    1        OPEN_FPT = OPEN_WORK;
      899    21421    1        OPEN_FPT.V_ = VECTOR(OPEN_FPT.V);
      900    21422    1        IF ENTRY_REASON = %MAIL_ACK
      901    21423    1          OR ENTRY_REASON = %MAIL_ANSWER
      902    21424    2        THEN DO;
      903    21425    2             OPEN_FPT.V.FUN# = %UPDATE#;
      904    21426    2             CALL M$OPEN (OPEN_FPT) ALTRET(E_PMME);
      905    21427    2             CALL VMD$GET_HEADER (0,M$WORK_NUM) ALTRET(E_PMME);
      906    21428    2        END;
      907    21429        /*
      908    21430             ***** Otherwise, create new work file
      909    21431                   and initialize a default header ...
      910    21432        */
      911    21433    2        ELSE DO;
      912    21434    2             OPEN_FPT.V.FUN# = %CREATE#;
      913    21435    2             CALL M$OPEN (OPEN_FPT) ALTRET(E_PMME);
      914    21436    2             VM_HEADER = CVM_HEADER;
      915    21437    2             VM_HEADER.NEXT$ = ADDR(VM_HEADER.WORK_AREA);
      916    21438    2             VM_HEADER.HEADER_SIZE = 1024;
      917    21439    2        END;
      918    21440        /*
      919    21441             ***** Initialize MCB to manage VM_HEADER.WORK_AREA ...
      920    21442        */
      921    21443    1        MCB.TYPE = 0;                    /* Bytes */
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:43   
      922    21444    1        MCB.MIN_SIZE = 12;
      923    21445    1        MCB.SEGMENT_BASE$ = VM_HEADER$;
      924    21446    1        MCB.HI_SEGMENT$ = VM_HEADER.NEXT$;
      925    21447    1        MCB.WKSZ = VM_HEADER.HEADER_SIZE;
      926    21448    1        MCB.FREE_HEAD$ = VM_HEADER.FREE$;
      927    21449        /*
      928    21450             ***** Open the user's central folder unless
      929    21451                   the user had specified to use a different folder ...
      930    21452        */
      931    21453    1        IF DCBADDR(M$MAIL_FILE_NUM) -> F$DCB.FCD# = %NO#
      932    21454    2        THEN DO;
      933    21455    2             CALL VMB$USE_DEFAULT (,USER_NAME,VM_CURRENT_FOLDER,
      934    21456    2               M$MAIL_FILE_NUM,VM_SEARCH_INFO,%UPDATE#,'1'B)
      935    21457    3             WHENALTRETURN DO;
      936    21458    4                  call VMB$TESTREG(USER_NAME) whenreturn do;
      937    21459    4                       goto BAD_MAIL;;
      938    21460    4                  end;
      939    21461    3                  if B$JIT.ACCN = SUBSTR(USER_NAME.NAME#,1,8)
      940    21462    3                  then goto BAD_MAIL;
      941    21463                            /* Try for logon account */
      942    21464    3                  USER_NAME.L# = LENGTHC(B$JIT.ACCN) + 1;
      943    21465    3                  substr(USER_NAME.NAME#,0,1) = '.';
      944    21466    3                  SUBSTR(USER_NAME.NAME#,1,8)=B$JIT.ACCN;
      945    21467    3                  CALL VMB$USE_DEFAULT (,USER_NAME,VM_CURRENT_FOLDER,
      946    21468    3                    M$MAIL_FILE_NUM,VM_SEARCH_INFO,%UPDATE#,'1'B) ALTRET(BAD_MAIL);
      947    21469    3                  TEMP_TEXTC.L#=SIZEC(TEMP_TEXTC.NAME#);
      948    21470    3                  CALL VMF$MAKE_ADDRESS1(TEMP_TEXTC,VM_CURRENT_FOLDER);
      949    21471    3                  call XUR$INFOMSG(E_USING_MSG_FMT,,M$ME_NUM,vector(TEMP_TEXTC));
      950    21472    3             END;                /* Whenaltreturn */
      951    21473    2        END;
      952    21474
      953    21475    1        IF VM_CURRENT_FOLDER.FLAGS.UPDATE = %NO#
      954    21476    2        THEN DO;
      955    21477
      956    21478        /*E* ERROR: VNS-E$NOTALLOW-0
      957    21479             MESSAGE: You are not allowed to send from this mailbox.
      958    21480             MESSAGE1: You must have write access to send from a mailbox.
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:44   
      959    21481             */
      960    21482
      961    21483    2             CALL VMA$ERRMSG(E_NOTALLOW);
      962    21484    2             GOTO ABORT_SEND;
      963    21485    2        END;
      964    21486        /*
      965    21487             ***** Get the profile record from the specified folder ...
      966    21488        */
      967    21489    1        CALL VMD$GET_PROFILE (M$MAIL_FILE_NUM) ALTRET(BAD_MAIL);
      968    21490    2        DO NEVER;
      969    21491    2   BAD_MAIL: ;
      970    21492        /*E* ERROR:VNS-E$BADMAIL-0
      971    21493             MESSAGE: Monitor error trying to open the mail file
      972    21494              */
      973    21495    2             CALL M$SENV;
      974    21496    2             CALL VMA$ERRMSG(E_BADMAIL);
      975    21497    2             CALL M$RENV;
      976    21498    2             CALL MON_ERR;
      977    21499    2             GOTO ABORT_SEND;
      978    21500    2        END;
      979    21501        /*
      980    21502             ***** Setup default editor name ...
      981    21503        */
      982    21504    1        TMP$ = VM_PROFILE.EDITOR$;
      983    21505    1        IF TMPR$.SEGID = %DS3SID /* for backward compatibility */
      984    21506    1        THEN
      985    21507    1             DEFAULT_EDITOR$ = TMP$;
      986    21508        /*
      987    21509             ***** Set up search list in VM_SEARCH_INFO ...
      988    21510        */
      989    21511    1        VM_SEARCH_INFO.CURRENT = '1'B;   /* It must be ok if we got this far */
      990    21512    1        CALL VMA$OPEN_SRCH_LIST (VM_SEARCH_INFO);
      991    21513        /*
      992    21514            ***** Setup preprocessing option ...
      993    21515        */
      994    21516    1        IF GATEWAY
      995    21517    1        THEN
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:45   
      996    21518    1             PREPROCESS = %NO#;
      997    21519    1        ELSE
      998    21520    1             IF NOT PREPROCESS_OPT
      999    21521    1             THEN
     1000    21522    1                  PREPROCESS = VM_PROFILE.OPT.PREPROCESS;
     1001    21523    1        IF PREPROCESS ~= XUR_INIT.PREPROCESS#
     1002    21524    2        THEN DO;
     1003    21525    2             XUR_INIT.PREPROCESS# = PREPROCESS;
     1004    21526    2             CALL XUR$INIT (XUR_INIT);
     1005    21527    2             CALL XUR$SETERRMSG (ERRMSG_FID);
     1006    21528    2        END;
     1007    21529        /*
     1008    21530             ***** Setup return address information ...
     1009    21531        */
     1010    21532    1        VM_RADDRESS.ACCT = VM_CURRENT_FOLDER.ACCT;
     1011    21533    1        VM_RADDRESS.PASS = ' ';
     1012    21534    1        VM_RADDRESS.SITENAME = VM_CURRENT_FOLDER.SITENAME;
     1013    21535    1        VM_RADDRESS.TYPE = %VM_ADD_RESOLVED;
     1014    21536    1        VM_RADDRESS.NEXT$ = ADDR(NIL);
     1015    21537    1        VM_RADDRESS.PREV$ = ADDR(NIL);
     1016    21538    1        CALL CONCAT (VM_RADDRESS.NAME_KEY, B$JIT.ACCN, B$JIT.UNAME);
     1017    21539    1        IF VM_CURRENT_FOLDER.PSID = ' '
     1018    21540    1        THEN
     1019    21541    1             VM_RADDRESS.FOLDER = VM_CURRENT_FOLDER.FOLDER;
     1020    21542    2        ELSE DO;
     1021    21543    2             VM_RADDRESS.NOMAD.FOLDER = VM_CURRENT_FOLDER.FOLDER;
     1022    21544    2             VM_RADDRESS.NOMAD.DELIM = ' ';
     1023    21545    2             VM_RADDRESS.NOMAD.PSID = VM_CURRENT_FOLDER.PSID;
     1024    21546    2        END;
     1025    21547    1        CALL ALLOC$RADDRESS( VM_HEADER.RETURN_ADDRESS$, VM_RADDRESS) ALTRET(E_ALLOCATE)
             21547                 ;
     1026    21548        /*
     1027    21549             ***** Setup the FILE_FOLDER address ...
     1028    21550        */
     1029    21551    1        IF VM_PROFILE.FILE_FOLDER$ ~= ADDR(NIL)
     1030    21552    2        THEN DO;
     1031    21553    2             CALL ALLOC$RADDRESS (VM_HEADER.FILE_FOLDER$,
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:46   
     1032    21554    2               VM_PROFILE.FILE_FOLDER$ -> VM$RADDRESS) ALTRET(E_ALLOCATE);
     1033    21555    2        END;
     1034    21556        /*
     1035    21557             ***** Set up the default reply-to address ...
     1036    21558        */
     1037    21559    1        TMP$ = VM_PROFILE.REPLY_TO$;
     1038    21560    1        IF TMPR$.SEGID = %DS3SID /* for backward compatibility */
     1039    21561    2        THEN DO;
     1040    21562    2             SIZE = VM_PROFILE.REPLY_TO$ -> X$STRING.SIZ;
     1041    21563    2             CALL ALLOC$TEXTC (VM_HEADER.REPLY_TO$, SIZE,
     1042    21564    2               VM_PROFILE.REPLY_TO$ -> X$STRING.TEXT) ALTRET(E_ALLOCATE);
     1043    21565    2        END;
     1044    21566    2        ELSE DO;
     1045    21567    2             TEMP_TEXTC.L# = LENGTHC(TEMP_TEXTC.NAME#);
     1046    21568    2             CALL VMF$MAKE_ADDRESS1SITE (TEMP_TEXTC,VM_CURRENT_FOLDER);
     1047    21569    2             SIZE = TEMP_TEXTC.L#;
     1048    21570    2             CALL ALLOC$TEXTC (VM_HEADER.REPLY_TO$, SIZE, TEMP_TEXTC.NAME#) ALTRET(
             21570                      E_ALLOCATE);
     1049    21571    2        END;
     1050    21572        /*
     1051    21573             ***** Convert the address and write the reply-to address record ...
     1052    21574        */
     1053    21575    1        CALL XUR$GETCMD (CMD_RTO$->BSD,OUT$,,VM_HEADER.REPLY_TO$->X$STRING.TEXT,SIZE)
     1054    21576    2        WHENALTRETURN DO;
     1055    21577    2             CALL VMA$ERRMSG (OUTERR);
     1056    21578    2             GOTO ABORT_SEND;
     1057    21579    2        END;
     1058    21580    1        CALL GET$ADDLIST(%VM_TYPE_RTO)
     1059    21581    2        WHENALTRETURN DO;
     1060    21582    2             CALL VMA$ERRMSG (E_BADRTOADDRESS);
     1061    21583    2             GOTO ABORT_SEND;
     1062    21584    2        END;
     1063    21585        /*
     1064    21586             ***** Setup from information
     1065    21587        */
     1066    21588    1        TEMP_TEXTC.L# = LENGTHC(TEMP_TEXTC.NAME#);
     1067    21589    1        TEMP_TEXTC.NAME# = ' ';
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:47   
     1068    21590    1        CALL VMF$FROM (TEMP_TEXTC) ALTRET(E_PMME);
     1069    21591    2        call VMB$TESTREG(TEMP_TEXTC) whenaltreturn do;
     1070    21592              /**  Unregistered User, FROM: B$JIT.ACCN   **/
     1071    21593    2             substr(TEMP_TEXTC.NAME#,1) = B$JIT.ACCN;
     1072    21594    2             substr(TEMP_TEXTC.NAME#,0,1) = '.'; /*  DP#psid.acct   */
     1073    21595    2             TEMP_TEXTC.L# = lengthc(TEMP_TEXTC.NAME#);
     1074    21596    2             call X$STRIP_BLANKS( addr(TEMP_TEXTC) );
     1075    21597    2        end;
     1076    21598    1        IF VM_CURRENT_FOLDER.SITENAME ~= ' ' THEN /* Append site name */
     1077    21599    2        DO;
     1078    21600    2             CALL INDEX (J,' ',VM_CURRENT_FOLDER.SITENAME);
     1079    21601    2             CALL INSERT (TEMP_TEXTC.NAME#,TEMP_TEXTC.L#,,' @',VM_CURRENT_FOLDER.
             21601                      SITENAME);
     1080    21602    2             TEMP_TEXTC.L# = TEMP_TEXTC.L# + J +2;
     1081    21603    2        END;
     1082    21604    1        SIZE = TEMP_TEXTC.L#;
     1083    21605    1        CALL ALLOC$TEXTC (VM_HEADER.FROM$, SIZE, TEMP_TEXTC.NAME#) ALTRET(E_ALLOCATE);
     1084    21606    1        VM_HEADER.FROM$ = MCB.ADDRESS$;
     1085    21607        /*
     1086    21608             ***** Setup signed information ...
     1087    21609        */
     1088    21610    1        IF VM_PROFILE.SIGNED$ ~= ADDR(NIL)
     1089    21611    2        THEN DO;
     1090    21612    2             SIZE = VM_PROFILE.SIGNED$ -> X$STRING.SIZ;
     1091    21613    2             CALL ALLOC$TEXTC (VM_HEADER.SIGNED$, SIZE,
     1092    21614    2               VM_PROFILE.SIGNED$ -> X$STRING.TEXT) ALTRET(E_ALLOCATE);
     1093    21615    2        END;
     1094    21616        /*
     1095    21617             ***** Set up creation date ...
     1096    21618        */
     1097    21619    1        CALL M$TIME (GET_TIME);
     1098    21620    1        VM_HEADER.CREATION_DATE = UTS;
     1099    21621        /*
     1100    21622             ***** If ENTRY_REASON is MAIL_ACK then all fields
     1101    21623                   were filled in by mail before it linked to
     1102    21624                   send. Do it now!!!
     1103    21625        */
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:48   
     1104    21626    1        IF ENTRY_REASON = %MAIL_ACK
     1105    21627    2        THEN DO;
     1106    21628    2             CALL DO$SEND ALTRET(ABORT_SEND);
     1107    21629    2             GOTO EXIT_SEND;
     1108    21630    2        END;
     1109    21631        /*
     1110    21632             ***** Initialize for cases other than ack ...
     1111    21633        */
     1112    21634    1        VM_HEADER.STATUS.RR = VM_PROFILE.OPT.RETURN_RECEIPT;
     1113    21635    1        VM_HEADER.STATUS.DR = VM_PROFILE.OPT.DELIVERY_RECEIPT;
     1114    21636    1        VM_HEADER.STATUS.FCOPY = VM_PROFILE.OPT.FCOPY;
     1115    21637        /*
     1116    21638             ***** Open dcb for command input ...
     1117    21639        */
     1118    21640    1        IF NOT SI_FILE
     1119    21641    2        THEN DO;
     1120    21642    2             CALL M$OPEN (OPEN_SI_DEFAULT) ALTRET(E_PMME);
     1121    21643    2        END;
     1122    21644        /*
     1123    21645             ***** Read and process any commands from a command stream ...
     1124    21646
     1125    21647                If input is non-interactive, read the command stream and
     1126    21648                process all lines as header fields until the first non-header
     1127    21649                line is found, then switch to reading message body lines.
     1128    21650                This applies to XEQ and batch job input as well as SEND files,
     1129    21651                so that they can also define all header fields up front.
     1130    21652                Note that, since any line not recognized as a header field
     1131    21653                is treated as the start of the body, syntax errors in header
     1132    21654                lines aren't noted as such; the line in error just becomes
     1133    21655                the first body line.
     1134    21656        */
     1135    21657    2        DO WHILE (SI_FILE OR (B$JIT.NEXTCC ~= %CC_FROMUC#
     1136    21658    2          AND NOT DCBADDR(M$SI_NUM)->F$DCB.DDEV.IC#));
     1137    21659    2             CALL READ_CC ALTRET(EOF);
     1138    21660    2             CALL XUR$GETCMD(SEND_NODES$->BSD,OUT$,,CMD_BUF,SIZE)
     1139    21661    3             WHENRETURN DO;
     1140    21662    3                  CALL PROCESS_CMD ALTRET(ABORT_SEND);
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:49   
     1141    21663    3             END;
     1142    21664    3             WHENALTRETURN DO;
     1143    21665    3                  IF OUTERR = E_SYNERR
     1144    21666    4                  THEN DO;
     1145    21667    4                       CALL PROCESS_BODY;
     1146    21668    4                       GOTO EOF;
     1147    21669    4                  END;
     1148    21670    3                  CALL CMD_ERR;
     1149    21671    3             END;
     1150    21672    2        END;
     1151    21673    1   EOF: ;
     1152    21674        /*
     1153    21675             ***** If everything necessary was found in the command file,
     1154    21676                   and there were no errors, and an options prompt wasn't
     1155    21677                   requested, send the message now and go home ...
     1156    21678        */
     1157    21679    1        IF VM_HEADER.TO$ ~= ADDR(NIL)
     1158    21680    1          AND (VM_HEADER.SUBJECT$ ~= ADDR(NIL) OR GATEWAY)
     1159    21681    1          AND ERR_FLAG = %NO#
     1160    21682    1          AND PROMPT_OPTIONS = %NO#
     1161    21683    1          AND (ENTRY_REASON ~= %MAIL_FORWARD
     1162    21684    1          AND ENTRY_REASON ~= %MAIL_ANSWER)
     1163    21685    2        THEN DO;
     1164    21686    2             CALL DO$SEND ALTRET(ABORT_SEND);
     1165    21687    2             GOTO EXIT_SEND;
     1166    21688    2        END;
     1167    21689        /*
     1168    21690             ***** In gateway mode, we can only get this far if the
     1169    21691                   manditory TO field is missing (or misspelled).
     1170    21692                   Since gateways can't prompt for input, SEND must die
     1171    21693                   with an appropriate error if this happens ...
     1172    21694        */
     1173    21695    1        IF GATEWAY
     1174    21696    1        THEN
     1175    21697    1             CALL VMA$ERRMSG (E_MISSINGFIELDS);
     1176    21698        /*
     1177    21699             ***** If send has been reading a file,
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:50   
     1178    21700                   then switch to the command stream ...
     1179    21701        */
     1180    21702    1        IF SI_FILE
     1181    21703    2        THEN DO;
     1182    21704    2             SI_FILE = %NO#;
     1183    21705    2             CLOSE_SAVE.V.DCB# = M$SI_NUM;
     1184    21706    2             CALL M$CLOSE (CLOSE_SAVE) ALTRET(E_PMME);
     1185    21707    2             CALL M$OPEN (OPEN_SI_DEFAULT) ALTRET(E_PMME);
     1186    21708    2        END;
     1187    21709        /*
     1188    21710             ***** Prompt for fields normally present if they're not presupplied ...
     1189    21711        */
     1190    21712    1        IF VM_HEADER.TO$ = ADDR(NIL)
     1191    21713    1        THEN
     1192    21714    1             CALL PROMPT$TO ALTRET(ABORT_SEND);
     1193    21715        /**/
     1194    21716    1        if VM_HEADER.SUBJECT$ = addr(nil) or ENTRY_REASON = %MAIL_ANSWER then
     1195    21717    2        DO;
     1196    21718                  %INIT_STR( STR=VN_SUBJECT, CODE=E_CMD_SUBJECT_PROMPT, VECT=
             21718                      CHANGE_PROMPT.PROMPT_);
     1197    21741    3             DO NEVER;
     1198    21742    3   E_SUBJECT:
     1199    21743    3                  CALL CMD_ERR ALTRET(GET_OPTIONS);
     1200    21744    3             END;                /* Do never ... end */
     1201    21745    2             P_PCB.COMMENT.LEAD = '  '; /* don't strip leading comments */
     1202    21746    2             CALL XUR$GETCMD (CMD_SUBJECT$->BSD,OUT$,VN_SUBJECT) altret(E_SUBJECT);
     1203    21747    2             P_PCB.COMMENT.LEAD = ' "';
     1204    21748
     1205    21749    2             IF OUT$->P$B.SUBLK$(0)->P$S.TEXT ~= ' '
     1206    21750    2             THEN
     1207    21751    2                  CALL PROCESS_CMD ALTRET(ABORT_SEND);
     1208    21752    2        END;
     1209    21753        /*
     1210    21754             ***** If we get this far, break-Quit will return to Options
     1211    21755                   prompt instead of terminating immediately ...
     1212    21756        */
     1213    21757    1        VNS_BREAK_TYPE = %BREAK_REPEAT;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:51   
     1214    21758        /*
     1215    21759             ***** If there is no message body yet,
     1216    21760                   setup to edit the message before the Option prompt if AUTOEDIT set,
     1217    21761                   or prompt the user for the body otherwise ...
     1218    21762        */
     1219    21763    1        IF VM_HEADER.NUM_RECORDS = 0
     1220    21764    2        THEN DO;
     1221    21765    2             IF VM_PROFILE.OPT.AUTO_EDIT
     1222    21766    3             THEN DO;
     1223    21767    3                  INVOKE_EDITOR$ = DEFAULT_EDITOR$;
     1224    21768    3             END;
     1225    21769    3             ELSE DO;
     1226    21770    3                  call APPEND_BODY;
     1227    21771    3             END;
     1228    21772    2        END;
     1229    21773        /*
     1230    21774             ***** Setup to prompt for options (enable GETCMD builtins, etc) ...
     1231    21775        */
     1232    21776    1   GET_OPTIONS:
     1233    21777    1        CALL VNS$BREAK_DISABLE;
     1234    21778    1        PROC_OPTIONS = %YES#;
     1235    21779    1        CHANGE_PROMPT.PROMPT_ = vector(VN_OPTIONS.NAME#);
     1236    21780    1        XUR_INIT.PRE_EXEC$$ = ENTADDR(VNS$PRE_EXEC);
     1237    21781    1        XUR_INIT.COMMANDS# = %YES#;
     1238    21782    1        CALL XUR$INIT(XUR_INIT);
     1239    21783    1        CALL XUR$SETERRMSG (ERRMSG_FID) ALTRET(E_PMME);
     1240    21784    1        CALL VNS$BREAK_ENABLE;
     1241    21785        /*
     1242    21786             ***** Loop to prompt for additional options ...
     1243    21787        */
     1244    21788    2        DO FOREVER;
     1245    21789        /*
     1246    21790            If the message is to be edited (due either to AUTOEDIT or an EDIT command)
     1247    21791            do it now, before issuing an Option prompt.
     1248    21792        */
     1249    21793    2             IF INVOKE_EDITOR$ ~= ADDR(NIL)
     1250    21794    3             THEN DO;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:52   
     1251    21795    3                  CALL EDIT_MSG ALTRET(ABORT_SEND);
     1252    21796    3             END;
     1253    21797        /*
     1254    21798            ***** Make sure there is a TO: field....
     1255    21799        */
     1256    21800    2             IF VM_HEADER.TO$ = ADDR(NIL)
     1257    21801    3             THEN DO;
     1258    21802    3                  CALL XUR$ERRMSG (E_TOREQUIRED);
     1259    21803    3                  CALL PROMPT$TO ALTRET(ABORT_SEND);
     1260    21804    3             END;
     1261    21805        /*
     1262    21806            Get and process an option command from the user.
     1263    21807            (An END command terminates SEND from within PROCESS_CMD.)
     1264    21808        */
     1265    21809    2             CALL XUR$GETCMD (OPTION_NODES$->BSD,OUT$,VN_OPTIONS) ALTRET(E_OPTIONS);
     1266    21810    2             CALL PROCESS_CMD ALTRET(ABORT_SEND);
     1267    21811        /*
     1268    21812            Handle exceptions within the options loop ...
     1269    21813        */
     1270    21814    3             DO NEVER;
     1271    21815    3   E_OPTIONS:
     1272    21816    3                  CALL CMD_ERR ALTRET(EXIT_DOSEND);
     1273    21817    3             END;
     1274    21818    3             DO NEVER;
     1275    21819    3   OPTION_BREAK:  ;    /**  Break return point  **/
     1276    21820        /*
     1277    21821                After a break response unwinds into the options loop, anything
     1278    21822                that might have been temporarily changed must be put back the
     1279    21823                way it would have been if the normal control flow had not been
     1280    21824                interrupted by the break.
     1281    21825        */
     1282    21826    3                  CALL XUR$ERRMSG( E_SENDBRKMSG);
     1283    21827    3                  P_PCB.COMMENT.LEAD = ' "';
     1284    21828    3                  P_PCB.NOLEADBLANKS = %NO#;
     1285    21829    3                  INVOKE_EDITOR$ = ADDR(NIL);
     1286    21830    3                  IF NOT PROC_OPTIONS
     1287    21831    3                  THEN
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:53   
     1288    21832    3                       GOTO GET_OPTIONS;
     1289    21833    3             END;
     1290    21834    2             IF CHANGE_PROMPT.PROMPT_ ~= VECTOR(VN_OPTIONS.NAME#)
     1291    21835    3             THEN DO;
     1292    21836    3                  CHANGE_PROMPT.PROMPT_ = VECTOR(VN_OPTIONS.NAME#);
     1293    21837    3                  CALL M$PROMPT (CHANGE_PROMPT);
     1294    21838    3             END;
     1295    21839    2        END;
     1296    21840        /*
     1297    21841             ***** If the message has not yet been sent,
     1298    21842                   do so and exit ...
     1299    21843        */
     1300    21844    1   EXIT_DOSEND:
     1301    21845    1        CALL DO$SEND ALTRET(ABORT_SEND);
     1302    21846
     1303    21847    1   EXIT_SEND:
     1304    21848    1        CALL M$EXIT;
     1305    21849
     1306    21850        /*
     1307    21851            ***** Mainline exception handling logic ...
     1308    21852        */
     1309    21853    1   E_PMME:
     1310    21854    1        CALL MON_ERR;
     1311    21855    1        GOTO ABORT_SEND;
     1312    21856        /**/
     1313    21857    1   E_ALLOCATE:
     1314    21858    1        CALL VMA$ERRMSG (MCB.ERR);
     1315    21859    1   ABORT_SEND:
     1316    21860    1        CALL M$ERR (NOTSENT_ERR);
     1317    21861        %EJECT;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:54   
     1318    21862        /********************************************************************/
     1319    21863        /*I*
     1320    21864            NAME: CMD_ERR
     1321    21865            PURPOSE: To diagnose errors on commands.
     1322    21866            DESCRIPTION:
     1323    21867                This routine fields errors from XUR$GETCMD and READ_CC.
     1324    21868                EOF results in an altreturn with no diagnostic, since this is
     1325    21869                often an expected loop-terminating condition.
     1326    21870                Syntax errors normally result in the command being echoed,
     1327    21871                followed by a pointer to the error, but not in gateway mode,
     1328    21872                because then all diagnostic output must be suppressed.
     1329    21873                Finally, VMA$ERRMSG is called to terminate SEND in gateway
     1330    21874                mode or to diagnose the error otherwise.
     1331    21875        */
     1332    21876        /********************************************************************/
     1333    21877    1   CMD_ERR: PROC ALTRET;
     1334    21878
     1335    21879    2        IF OUTERR.MON AND OUTERR.ERR# = %E$EOF
     1336    21880    2        THEN
     1337    21881    2             ALTRETURN;
     1338    21882    2        IF NOT GATEWAY AND OUTERR = E_SYNERR
     1339    21883    3        THEN DO;
     1340    21884    3             CALL XUR$ECHOIF;
     1341    21885    3             CALL XUR$ERRPTR;
     1342    21886    3        END;
     1343    21887    2        CALL VMA$ERRMSG (OUTERR,CMD_DCB);
     1344    21888    2        ERR_FLAG = %YES#;
     1345    21889    2        RETURN;
     1346    21890
     1347    21891    2   END CMD_ERR;
     1348    21892        %EJECT;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:55   
     1349    21893        /********************************************************************/
     1350    21894        /*I*
     1351    21895            NAME: MON_ERR
     1352    21896            PURPOSE: To diagnose an error on a monitor call.
     1353    21897            DESCRIPTION:
     1354    21898                This little routine diagnoses errors on monitor calls.
     1355    21899                It doesn't do much, but it's used in so many places that it's
     1356    21900                convenient to have a separate routine to do it.
     1357    21901        */
     1358    21902        /********************************************************************/
     1359    21903    1   MON_ERR: PROC;
     1360    21904
     1361    21905    2        CALL VMA$ERRMSG (B$TCB.ALT$->B$ALT.ERR, B$TCB.ALT$->B$ALT.DCB#);
     1362    21906    2        ERR_FLAG = %YES#;
     1363    21907    2        RETURN;
     1364    21908
     1365    21909    2   END MON_ERR;
     1366    21910        %EJECT;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:56   
     1367    21911        /*************************************************************/
     1368    21912        /*I*
     1369    21913            NAME: READ_CC
     1370    21914            CALL: CALL READ_CC ALTRET(eof)
     1371    21915            INPUT:  CMD_DCB = the dcb# to read from
     1372    21916            OUTPUT: CMD_BUF = the command just read
     1373    21917                    SIZE = the length of the command, sans trailing blanks
     1374    21918            DESCRIPTION:
     1375    21919                This routine is only called where commands are known to come
     1376    21920                from either a file or the terminal.  The rest of the time,
     1377    21921                XUR$GETCMD gets commands, so that SEND doesn't need to know
     1378    21922                if they come from the normal SI stream or from an ADAPT dialog.
     1379    21923
     1380    21924                WARNING: SEND command input is convoluted, what with juggling
     1381    21925                the differing requirements of file, interactive, and ADAPT
     1382    21926                dialog input, especially with regard to exception paths.
     1383    21927                I think the current logic, although it might seem wierd, is
     1384    21928                consistent and correct, but if it proves to be faulty, take
     1385    21929                care that the fix preserves all current capabilities!
     1386    21930        */
     1387    21931        /*************************************************************/
     1388    21932    1   READ_CC: PROC ALTRET;
     1389    21933
     1390    21934    2   REREAD:
     1391    21935    2        READ_SI.V.DCB# = CMD_DCB;
     1392    21936    2        CALL M$READ (READ_SI) ALTRET(E_READ);
     1393    21937    2        SIZE = DCBADDR(CMD_DCB) -> F$DCB.ARS#;
     1394    21938    2        RETURN;
     1395    21939        /**/
     1396    21940    2   E_READ:
     1397    21941    2        IF B$TCB.ALT$ -> B$ALT.ERR.CODE = %E$EOF
     1398    21942    2        THEN
     1399    21943    2             ALTRETURN;
     1400    21944        /*
     1401    21945           ****  Abort if receiving errors when reading from file(send fid).
     1402    21946        */
     1403    21947    2        CALL MON_ERR;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:57   
     1404    21948    2        IF SI_FILE
     1405    21949    3        THEN DO;
     1406    21950    3             CALL XUR$ERRMSG(E_NOTSENT);
     1407    21951    3             CALL M$ERR (NOTSENT_ERR);
     1408    21952    3        END;
     1409    21953    2        GOTO REREAD;
     1410    21954
     1411    21955    2   END READ_CC;
     1412    21956        %EJECT;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:58   
     1413    21957        /********************************************************************/
     1414    21958        /*I*
     1415    21959            NAME: PROCESS_BODY
     1416    21960            PURPOSE: To read and process the message body.
     1417    21961            DESCRIPTION:
     1418    21962                This routine reads message body lines and writes them to the
     1419    21963                message file.  It continues reading and writing lines until
     1420    21964                EOF is encountered, or until a zero length record is read from
     1421    21965                the terminal.  (Zero length records in a file are treated as
     1422    21966                blanks lines, because some editors can represent blank lines
     1423    21967                that way.)
     1424    21968                Even though body lines don't really need to be parsed, they
     1425    21969                must be passed through GETCMD to make any command variable
     1426    21970                substitutions necessary.  Also, unless lines are being read
     1427    21971                from a file, they must be read by GETCMD so that they can be
     1428    21972                supplied by an ADAPT dialog.
     1429    21973                Since the start of the body in a file is indicated by a line
     1430    21974                that can't be parsed as a header field, the routine is set up
     1431    21975                so that it expects the first body line to have already been
     1432    21976                read and parsed.
     1433    21977        */
     1434    21978        /********************************************************************/
     1435    21979
     1436    21980    1   PROCESS_BODY: PROC;
     1437    21981    3        DO FOREVER;
     1438    21982        /*
     1439    21983            ***** Exit if zero-length record read from the terminal ...
     1440    21984        */
     1441    21985    3             SIZE = P_PCB.NCHARS;
     1442    21986    3             IF SIZE = 0
     1443    21987    3             THEN IF DCBADDR(CMD_DCB)->F$DCB.DDEV.IC#
     1444    21988    3                  THEN
     1445    21989    3                       EXIT;
     1446    21990    3                  ELSE IF GATEWAY AND VM_HEADER.NUM_RECORDS = 0
     1447    21991    3                       THEN /* ignore leading null records in gateway mode */
     1448    21992    3                            GOTO NEXT_LINE;
     1449    21993        /*
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:59   
     1450    21994            ***** Write the record to the message file ...
     1451    21995        */
     1452    21996    3             IF SIZE > 0
     1453    21997    4             THEN DO;
     1454    21998    4                  CALL SEARCHR (SIZE, DUMMY, NON_BLANK, P_PCB$TEXT)
     1455    21999    5                  WHENRETURN DO;
     1456    22000    5                       SIZE = SIZE + 1;
     1457    22001    5                       VM_BODYREC.VALUE.DATA = SUBSTR (P_PCB$TEXT,0,SIZE);
     1458    22002    5                  END;
     1459    22003    5                  WHENALTRETURN DO;
     1460    22004    5                       SIZE = 0;
     1461    22005    5                  END;
     1462    22006    4             END;
     1463    22007    3             VM_BODYREC.VALUE.COUNT = SIZE;
     1464    22008    3             IF DCBADDR(CMD_DCB)->F$DCB.ASN#=%FILE#
     1465    22009    3             THEN
     1466    22010    3                  CALL VMD$PUT_BODY (0,M$WORK_NUM,VM_HEADER.NUM_RECORDS,SIZE,0,
     1467    22011    3                    VM_BODYREC,DCBADDR(CMD_DCB)->F$DCB.DVBYTE) ALTRET(E_BODY);
     1468    22012    3             ELSE
     1469    22013    3                  CALL VMD$PUT_BODY (0,M$WORK_NUM,
     1470    22014    3                    VM_HEADER.NUM_RECORDS,SIZE,0,VM_BODYREC) ALTRET(E_BODY);
     1471    22015    3             VM_HEADER.NUM_RECORDS = VM_HEADER.NUM_RECORDS + 1;
     1472    22016        /*
     1473    22017            ***** Report any errors and continue (except return on EOF) ...
     1474    22018        */
     1475    22019    4             DO NEVER;
     1476    22020    4   E_BODY:        ;
     1477    22021    4                  CALL MON_ERR;
     1478    22022    4             END;
     1479    22023    4             DO NEVER;
     1480    22024    4   E_BODY1:       ;
     1481    22025    4                  CALL CMD_ERR ALTRET(EOF);
     1482    22026    4             END;
     1483    22027    3   NEXT_LINE: ;
     1484    22028        /*
     1485    22029             ***** Set the prompt string to 5 blanks ...
     1486    22030        */
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:60   
     1487    22031    3             IF CHANGE_PROMPT.PROMPT_ ~= VECTOR(VN_BODY2)
     1488    22032    4             THEN DO;
     1489    22033    4                  IF VM_HEADER.NUM_RECORDS = 0
     1490    22034    5                  THEN DO;
     1491    22035                            %INIT_STR( STR=VN_BODY, CODE=E_CMD_BODY_PROMPT, TEST=YES, VECT=
             22035                                CHANGE_PROMPT.PROMPT_);
     1492    22058    5                  END;
     1493    22059    5                  ELSE DO;
     1494    22060                            %INIT_STR( STR=VN_BODY2, CODE=E_CMD_BODY2_PROMPT, TEST=YES, VECT
             22060                                =CHANGE_PROMPT.PROMPT_);
     1495    22083    5                  END;
     1496    22084    4                  P_PCB.NOLEADBLANKS = %YES#;
     1497    22085    4             END;
     1498    22086        /*
     1499    22087            ***** Read the next body line and loop ...
     1500    22088        */
     1501    22089    3             IF NOT DCBADDR(CMD_DCB)-> F$DCB.DDEV.IC#
     1502    22090    4             THEN DO;
     1503    22091    4                  CALL M$PROMPT (CHANGE_PROMPT);
     1504    22092    4                  CALL READ_CC ALTRET(EOF);
     1505    22093    4                  CALL XUR$GETCMD (CMD_BODY$->BSD, OUT$,, CMD_BUF, SIZE) ALTRET(E_BODY1
             22093                           );
     1506    22094    4             END;
     1507    22095    3             ELSE
     1508    22096    3                  CALL XUR$GETCMD (CMD_BODY$->BSD, OUT$, CHANGE_PROMPT.PROMPT_)
     1509    22097    3                    ALTRET(E_BODY1);
     1510    22098    3        END;
     1511    22099    2   EOF: ;
     1512    22100    2        P_PCB.NOLEADBLANKS = %NO#;
     1513    22101    2        RETURN;
     1514    22102
     1515    22103        /********************************************************************/
     1516    22104        /*I*
     1517    22105            NAME: APPEND_BODY
     1518    22106            PURPOSE: To append lines to the message body.
     1519    22107            DESCRIPTION:
     1520    22108                The APPEND command uses this entry into PROCESS_BODY to avoid
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:61   
     1521    22109                having to pre-read and parse the first appended line.
     1522    22110        */
     1523    22111        /********************************************************************/
     1524    22112
     1525    22113    2   APPEND_BODY: ENTRY;
     1526    22114
     1527    22115    2        GOTO NEXT_LINE;
     1528    22116
     1529    22117    2   END PROCESS_BODY;
     1530    22118        %EJECT;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:62   
     1531    22119        /******************************************************************/
     1532    22120        /*I*
     1533    22121           NAME: PROCESS_ENCL
     1534    22122           PURPOSE: To append enclosure records to a mailgram
     1535    22123           DESCRIPTION: This routine goes through the parse tree and for
     1536    22124                 each node, it opens the file, reads the records and writes
     1537    22125                 them to the message body, updates the enclosure context
     1538    22126                 record and the message header.
     1539    22127        */
     1540    22128        /******************************************************************/
     1541    22129
     1542    22130    1   PROCESS_ENCL: PROC ALTRET;
     1543    22131
     1544    22132    2   DCL PTR1$ PTR;   /* PTR1$ and PTR2$ are misc. pointers for going */
     1545    22133    2   DCL PTR2$ PTR;   /* through the parse tree.                      */
     1546    22134    2   DCL PREV_ENT$ PTR; /* Pointer to the prev. entry in the list     */
     1547    22135    2   DCL REC$ PTR;    /* Pointer to the record data buffer            */
     1548    22136    2   DCL PAGESIZE SBIN WORD STATIC INIT(4096);
     1549    22137    2   DCL 1 TEXTC BASED,
     1550    22138    2         2 L# UBIN(9) UNAL,
     1551    22139    2         2 TEXT# CHAR(TEXTC.L#);
     1552    22140        %FPT_PRECORD(FPTN=ENCL_REC,KEYS=NO,N=-1);
     1553    22161
     1554    22162    3        DO I = 0 TO OUT$->P$B.SUBLK$(0)->P$B.NSUBLKS - 1;
     1555    22163
     1556    22164           /* Set up context pointers */
     1557    22165
     1558    22166    4             IF VM_ENCL_HEAD.NUM_ENTRIES > 0 THEN DO;
     1559    22167    4                  PREV_ENT$ = ENCL$;
     1560    22168    4                  ENCL$ = VM_ENCL_HEAD.NEXT$;
     1561    22169              /* Make sure there is enough room for another entry
     1562    22170                 in the linked list                               */
     1563    22171
     1564    22172    4                  IF VBOUND(VM_ENCLLIST_) - POFFW(VM_ENCL_HEAD.NEXT$,VM_ENCLLIST$) < %
             22172                           VM_ENCLLIST_ENTRY_SIZE
     1565    22173    4                  THEN
     1566    22174    4                       VBOUND(VM_ENCLLIST_) = VBOUND(VM_ENCLLIST_) + PAGESIZE;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:63   
     1567    22175    4             END;
     1568    22176    4             ELSE DO;
     1569    22177    4                  VM_ENCL_HEAD = INIT_ENCL_HEAD;
     1570    22178    4                  ENCL$ = PINCRW(VM_ENCLLIST$,SIZEW(VM_ENCL_HEAD));
     1571    22179    4                  VM_ENCL_HEAD.HEAD$ = ENCL$;
     1572    22180    4             END;
     1573    22181
     1574    22182    3             VM_ENCLOS = INIT_ENCLOS;
     1575    22183    3             PTR1$ = OUT$->P$B.SUBLK$(0)->P$B.SUBLK$(I);
     1576    22184
     1577    22185           /* Go through the parts of each file/title string */
     1578    22186
     1579    22187    4             DO J = 0 TO PTR1$->P$B.NSUBLKS - 1;
     1580    22188    4                  PTR2$ = PTR1$->P$B.SUBLK$(J);
     1581    22189    5                  DO CASE (PTR2$->P$S.NDTYPE);
     1582    22190    5                  CASE (%FID#);
     1583    22191    5                      OPEN_FPT      = OPEN_ENCL_FILE;
     1584    22192    5                      OPEN_FPT.V_   = VECTOR(OPEN_ENCL_FILE.V);
     1585    22193    5                      CHECK_FID     = CHECK_FID_CONST;
     1586    22194    5                      CHECK_FID.V_  = VECTOR(CHECK_FID.V);
     1587    22195    5                      CHECK_FID.TEXTFID_ = VECTOR(PTR2$->P$S.TEXT);
     1588    22196    5                      CHECK_FID.ASN_ = VECTOR(OPEN_FPT.V.ASN#);
     1589    22197    5                      CHECK_FID.RES_ = VECTOR(OPEN_FPT.V.RES#);
     1590    22198    5                      CALL M$FID (CHECK_FID) ALTRET (E_ENCL);
     1591    22199    5                      CALL M$OPEN (OPEN_ENCL_FILE) ALTRET (E_ENCL);
     1592    22200
     1593    22201    5                  CASE (%DSTRING#);
     1594    22202    5                      VM_ENCLOS.TITLE$ = PINCRW(ENCL$,SIZEW(VM_ENCLOS));
     1595    22203    5                      VM_ENCLOS.TITLE$->TEXTC.L# = PTR2$->P$S.COUNT;
     1596    22204    5                      VM_ENCLOS.TITLE$->TEXTC.TEXT# = PTR2$->P$S.TEXT;
     1597    22205
     1598    22206    5                  END; /* CASE */
     1599    22207    4             END; /* DO J */
     1600    22208
     1601    22209           /* Set up and init the read buffer. Start with a size of one
     1602    22210              page. Note that 2 words are left at the beginning of the
     1603    22211              buffer for type, textc count data, etc.                    */
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:64   
     1604    22212
     1605    22213    3             READ_ENCL_FILE.BUF_.BUF$ = PINCRW(VBASE(VM_ENCLREC_),2);
     1606    22214    3             READ_ENCL_FILE.BUF_.BOUND = 8 + (PAGESIZE - 8);
     1607    22215
     1608    22216           /* Read/write loop until EOF */
     1609    22217
     1610    22218    4             DO FOREVER;
     1611    22219
     1612    22220    4   REREAD:
     1613    22221    4                  CALL M$READ (READ_ENCL_FILE)
     1614    22222
     1615    22223    5                  WHENALTRETURN DO;
     1616    22224    5                       IF B$TCB.ALT$->B$ALT.ERR.CODE = %E$EOF
     1617    22225    5                       THEN
     1618    22226    5                            GOTO EOF;
     1619    22227
     1620    22228    5                       IF B$TCB.ALT$->B$ALT.ERR.CODE = %E$LD
     1621    22229    6                       THEN DO;
     1622    22230    6                            READ_ENCL_FILE.BUF_.BOUND = READ_ENCL_FILE.BUF_.BOUND +
             22230                                     PAGESIZE;
     1623    22231    6                            ENCL_REC.V.DCB# = M$ENCL_NUM;
     1624    22232    6                            CALL M$PRECORD (ENCL_REC) ALTRET(E_ENCL);
     1625    22233    6                            GOTO REREAD;
     1626    22234    6                       END;
     1627    22235
     1628    22236    5                       GOTO E_ENCL;
     1629    22237
     1630    22238    5                  END;
     1631    22239
     1632    22240    4                  SIZE = DCBADDR(M$ENCL_NUM)->F$DCB.ARS#;
     1633    22241    4                  VM_ENCLREC.TYPE = %VM_BODY_BINARY_ENCL;
     1634    22242    4                  VM_ENCLREC.VALUE.COUNT = SIZE;
     1635    22243
     1636    22244    4                  CALL VMD$PUT_ENCL (0,M$WORK_NUM,VM_ENCLOS.NRECS,SIZE,0, ,
     1637    22245    4                    DCBADDR(M$ENCL_NUM)->F$DCB.DVBYTE,VM_ENCL_HEAD.NUM_ENTRIES+1,
     1638    22246    4                    VM_ENCLREC$)
     1639    22247    4                    ALTRET (E_ENCL);
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:65   
     1640    22248
     1641    22249
     1642    22250    4                  VM_ENCLOS.NRECS = VM_ENCLOS.NRECS + 1;
     1643    22251
     1644    22252    4             END; /* FOREVER */
     1645    22253
     1646    22254    3   EOF:
     1647    22255
     1648    22256            /* Update the context pointers, linked list stuff, etc. */
     1649    22257
     1650    22258    4             IF VM_ENCL_HEAD.NUM_ENTRIES > 0 THEN DO;
     1651    22259    4                  VM_ENCLOS.PREV$ = PREV_ENT$;
     1652    22260    4                  PREV_ENT$->VM_ENCLOS.NEXT$ = ENCL$;
     1653    22261    4             END;
     1654    22262
     1655    22263    3             VM_ENCLOS.TYPE = %VM_TYPE_ENCL + VM_ENCL_HEAD.NUM_ENTRIES + 1;
     1656    22264    3             VM_ENCL_HEAD.NUM_ENTRIES = VM_ENCL_HEAD.NUM_ENTRIES + 1;
     1657    22265    3             IF VM_ENCLOS.TITLE$ ~= ADDR(NIL) THEN
     1658    22266    3                  VM_ENCL_HEAD.NEXT$ = PINCRW(ENCL$,SIZEW(VM_ENCLOS)+ 1 + VM_ENCLOS.
             22266                           TITLE$->TEXTC.L#/4);
     1659    22267    3             ELSE
     1660    22268    3                  VM_ENCL_HEAD.NEXT$ = PINCRW(ENCL$,SIZEW(VM_ENCLOS) + 1);
     1661    22269    3             VM_ENCL_HEAD.ADDRESS_SIZE = POFFW(VM_ENCL_HEAD.NEXT$,VM_ENCLLIST$);
     1662    22270    3             VM_HEADER.NUM_ENCL_RECORDS = VM_HEADER.NUM_ENCL_RECORDS + VM_ENCLOS.NRECS;
     1663    22271
     1664    22272    3             CLOSE_SAVE.V.DCB# = M$ENCL_NUM;
     1665    22273    3             CALL M$CLOSE (CLOSE_SAVE) ALTRET (E_ENCL);
     1666    22274
     1667    22275    3        END; /* DO I */
     1668    22276
     1669    22277    2        VM_HEADER.STATUS.ENCL = %YES#;
     1670    22278        /* Write the context record */
     1671    22279
     1672    22280    2        CALL VMA$PUT_ADD_RECORD (%VM_TYPE_ENCL,VM_ENCLLIST_,M$WORK_NUM) ALTRET (E_ENCL)
             22280                 ;
     1673    22281
     1674    22282    2        RETURN;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:66   
     1675    22283
     1676    22284    2   E_ENCL:
     1677    22285
     1678    22286    2        CALL MON_ERR;
     1679    22287
     1680    22288    2        ALTRETURN;
     1681    22289
     1682    22290    2   END PROCESS_ENCL;
     1683    22291        %EJECT;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:67   
     1684    22292        /********************************************************************/
     1685    22293        /*I*
     1686    22294             NAME: EDIT_MSG
     1687    22295             PURPOSE: To edit the current message and replace it with the
     1688    22296                      contents of the edited file.
     1689    22297             INPUT: INVOKE_EDITOR$ = points to TEXTC string of editor to use
     1690    22298        */
     1691    22299        /********************************************************************/
     1692    22300
     1693    22301    1   EDIT_MSG: PROC ALTRET;
     1694    22302        /*
     1695    22303            ***** Set up the edit command ...
     1696    22304        */
     1697    22305    2        TEMP_TEXTC.L# = INVOKE_EDITOR$ -> X$STRING.SIZ + LENGTHC(' *BODY');
     1698    22306    2        CALL CONCAT (TEMP_TEXTC.NAME#, INVOKE_EDITOR$ -> X$STRING.TEXT, ' *BODY');
     1699    22307    2        INVOKE_EDITOR$ = ADDR(NIL);
     1700    22308        /*
     1701    22309            ***** Write the current message with header out to *BODY ...
     1702    22310        */
     1703    22311    2        CALL VMM$EDIT_MESSAGE_OUT (0,0,M$WORK_NUM,%YES#,(ENTRY_REASON~=%MAIL_ANSWER))
     1704    22312    3        WHENALTRETURN DO;
     1705    22313    3             CALL MON_ERR;
     1706    22314    3             RETURN;
     1707    22315    3        END;
     1708    22316        /*
     1709    22317            ***** Link to the editor ...
     1710    22318        */
     1711    22319    2        CALL XUR$INFOMSG (E_EDITMESFMT,,M$ME_NUM);
     1712    22320    2        LINKFPT.CP_CMD_ = VECTOR(TEMP_TEXTC);
     1713    22321    2        CALL M$LINK (LINKFPT)
     1714    22322    3        WHENALTRETURN DO;
     1715    22323    3             CALL MON_ERR;
     1716    22324    3             RETURN;
     1717    22325    3        END;
     1718    22326        /*
     1719    22327            ***** Open the edit file ...
     1720    22328        */
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:68   
     1721    22329    2        CALL M$OPEN (OPEN_EDIT_FILE)
     1722    22330    3        WHENALTRETURN DO;
     1723    22331    3             CALL MON_ERR;
     1724    22332    3             ALTRETURN;
     1725    22333    3        END;
     1726    22334    2        CALL VNS$BREAK_DISABLE;
     1727    22335    2        DID_SEND = %NO#;
     1728    22336        /*
     1729    22337            ***** Remove existing header fields ....
     1730    22338        */
     1731    22339    2        IF ENTRY_REASON ~= %MAIL_ANSWER
     1732    22340    3        THEN DO;
     1733    22341    3             CALL ERASE$FLD (VM_HEADER.TO$) ALTRET(E_ALLOCATE);
     1734    22342    3             CALL ERASE$ADDR (VM_HEADER.COPY$, %VM_TYPE_C) ALTRET(E_ALLOCATE);
     1735    22343    3        END;
     1736    22344    2        CALL ERASE$ADDR (VM_HEADER.BLIND$, %VM_TYPE_BC) ALTRET(E_ALLOCATE);
     1737    22345    2        CALL ERASE$ADDR (VM_HEADER.REPLY_TO$, %VM_TYPE_RTO) ALTRET(E_ALLOCATE);
     1738    22346    2        CALL ERASE$FLD (VM_HEADER.SUBJECT$) ALTRET(E_ALLOCATE);
     1739    22347    2        CALL ERASE$FLD (VM_HEADER.REFERENCE$) ALTRET(E_ALLOCATE);
     1740    22348    2        CALL ERASE$FLD (VM_HEADER.SIGNED$) ALTRET(E_ALLOCATE);
     1741    22349    2        VM_HEADER.STATUS.FCOPY = %NO#;
     1742    22350    2        VM_HEADER.STATUS.RR = %NO#;
     1743    22351    2        VM_HEADER.DELIVERY_DATE = 0;
     1744    22352    2        VM_HEADER.DELIVERY_DATE = 0;
     1745    22353        /*
     1746    22354            ****  Remove message contents ....
     1747    22355        */
     1748    22356    2        IF VM_HEADER.NUM_RECORDS > 0
     1749    22357    3        THEN DO;
     1750    22358    3             CALL VMD$DEL_BODY (0,M$WORK_NUM,0,VM_HEADER.NUM_RECORDS - 1)
     1751    22359    4             WHENALTRETURN DO;
     1752    22360    4                  CALL MON_ERR;
     1753    22361    4             END;
     1754    22362    3             VM_HEADER.NUM_RECORDS = 0;
     1755    22363    3        END;
     1756    22364    2        IF VM_HEADER.NUM_TRACE_RECORDS > 0
     1757    22365    3        THEN DO;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:69   
     1758    22366    3             CALL VMD$DEL_TRACE (0,M$WORK_NUM,0,VM_HEADER.NUM_TRACE_RECORDS - 1)
     1759    22367    4             WHENALTRETURN DO;
     1760    22368    4                  CALL MON_ERR;
     1761    22369    4             END;
     1762    22370    3             VM_HEADER.NUM_TRACE_RECORDS = 0;
     1763    22371    3        END;
     1764    22372        /*
     1765    22373             ***** Disable preprocessing and built-ins while rereading message ...
     1766    22374        */
     1767    22375    2        XUR_INIT.COMMANDS# = %NO#;
     1768    22376    2        XUR_INIT.PREPROCESS# = %NO#;
     1769    22377    2        CALL XUR$INIT (XUR_INIT);
     1770    22378    2        CALL XUR$SETERRMSG (ERRMSG_FID);
     1771    22379        /*
     1772    22380            ***** Read *BODY and process all lines to rebuild the message ...
     1773    22381        */
     1774    22382    2        CMD_DCB = M$EDIT_NUM;
     1775    22383    3        DO FOREVER;
     1776    22384    3             CALL READ_CC ALTRET(EOF);
     1777    22385    3             CALL XUR$GETCMD (SEND_NODES$->BSD,OUT$,,CMD_BUF,SIZE)
     1778    22386    4             WHENRETURN DO;
     1779    22387    4                  CALL PROCESS_CMD ALTRET(ALT);
     1780    22388    4             END;
     1781    22389    4             WHENALTRETURN DO;
     1782    22390    4                  IF OUTERR = E_SYNERR
     1783    22391    5                  THEN DO;
     1784    22392    5                       CALL PROCESS_BODY;
     1785    22393    5                       GOTO EOF;
     1786    22394    5                  END;
     1787    22395    4                  CALL CMD_ERR;
     1788    22396    4             END;
     1789    22397    3        END;
     1790    22398    2   EOF: ;
     1791    22399    2        CMD_DCB = M$SI_NUM;
     1792    22400    2        CLOSE_SCRATCH.V.DCB# = M$EDIT_NUM;
     1793    22401    3        CALL M$CLOSE (CLOSE_SCRATCH) WHENALTRETURN DO; END;
     1794    22402        /*
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:70   
     1795    22403             ***** Re-enable preprocessing and built-in commands ...
     1796    22404        */
     1797    22405    2        XUR_INIT.COMMANDS# = %YES#;
     1798    22406    2        XUR_INIT.PREPROCESS# = PREPROCESS;
     1799    22407    2        CALL XUR$INIT (XUR_INIT);
     1800    22408    2        CALL XUR$SETERRMSG (ERRMSG_FID);
     1801    22409    2        CALL VNS$BREAK_ENABLE;
     1802    22410
     1803    22411    2        RETURN;
     1804    22412    2   ALT: ALTRETURN;
     1805    22413
     1806    22414    2   E_ALLOCATE: ;
     1807    22415    2        CALL XUR$ERRMSG (MCB.ERR);
     1808    22416    2        ALTRETURN;
     1809    22417
     1810    22418    2   END EDIT_MSG;
     1811    22419        %EJECT;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:71   
     1812    22420        /********************************************************************/
     1813    22421        /*I*
     1814    22422            NAME: PROCESS_CMD
     1815    22423            PURPOSE: To process a SEND command.
     1816    22424            DESCRIPTION:
     1817    22425                This routine consists of a DO CASE to process SEND commands.
     1818    22426                All errors are diagnosed internally.  Fatal errors result in
     1819    22427                an altreturn; nonfatal errors return normally.  Errors that
     1820    22428                could occur during file input (eg, before any prompts have
     1821    22429                been issued) are diagnosed via VMA$ERRMSG, which will abort
     1822    22430                SEND immediately (and avoid writing to DO) when running in
     1823    22431                GATEWAY mode.  Errors in commands that can only be issued at
     1824    22432                the Options: prompt can be diagnosed normally via XUR$ERRMSG.
     1825    22433                Errors that can occur during file input must also set ERR_FLAG
     1826    22434                to prevent sending the message; this isn't necessary for other
     1827    22435                errors.
     1828    22436        */
     1829    22437        /********************************************************************/
     1830    22438
     1831    22439    1   PROCESS_CMD: PROC ALTRET;
     1832    22440
     1833    22441    3   CMD_CASE: DO CASE(OUT$ -> P$B.CODE);    /* Do command */
     1834    22442        %SPACE 6;

     1835    22443        /* APPEND command */
     1836    22444    3        CASE (%CMD_APPEND);
     1837    22445    3            IF P$B.NSUBLKS = 0 THEN CALL APPEND_BODY;
     1838    22446    3            ELSE
     1839    22447    4            DO;
     1840    22448    4                 OPEN_FPT          = OPEN_APPEND;
     1841    22449    4                 OPEN_FPT.V_       = VECTOR(OPEN_FPT.V);
     1842    22450    4                 CHECK_FID         = CHECK_FID_CONST;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:72   
     1843    22451    4                 CHECK_FID.V_      = VECTOR(CHECK_FID.V);
     1844    22452    4                 CHECK_FID.TEXTFID_ = VECTOR(P$S.TEXT);
     1845    22453    4                 CHECK_FID.ASN_    = VECTOR(OPEN_FPT.V.ASN#);
     1846    22454    4                 CHECK_FID.RES_    = VECTOR(OPEN_FPT.V.RES#);
     1847    22455    4                 CALL M$FID(CHECK_FID) ALTRET(E_APND);
     1848    22456    4                 CALL M$OPEN(OPEN_FPT) ALTRET(E_APND);
     1849    22457    4                 CMD_DCB = M$APND_NUM;
     1850    22458    4                 CALL APPEND_BODY;
     1851    22459    4                 CLOSE_SAVE.V.DCB# = M$APND_NUM;
     1852    22460    4                 CALL M$CLOSE(CLOSE_SAVE);
     1853    22461    4            END;
     1854    22462    4            DO NEVER;
     1855    22463    4   E_APND:
     1856    22464    4                 CALL MON_ERR;
     1857    22465    4            END;
     1858    22466        %SPACE 6;

     1859    22467        /* ATTACH command */
     1860    22468    3        CASE (%CMD_ATTACH);
     1861    22469    3            CALL PROCESS_ENCL;
     1862    22470        %SPACE 6;

     1863    22471        /* Blind copy command */
     1864    22472    3        CASE (%CMD_BC);
     1865    22473    3            CALL REREAD$CHK
     1866    22474    4            WHENALTRETURN DO;
     1867    22475    4                 CALL REREAD$CMD (VN_BLIND_COPY, VM_HEADER.BLIND$, E_CMD_BC_PROMPT,
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:73   
     1868    22476    4                   CMD_BC$, %NO# ) ALTRET(RET);
     1869    22477    4            END;
     1870    22478    3            CALL REPLACE$ADDR (VM_HEADER.BLIND$, %VM_TYPE_BC) ALTRET(E_ALLOCATE);
     1871    22479        %SPACE 6;

     1872    22480    3        CASE (%CMD_BLANK);              /* Do nothing */
     1873    22481        %SPACE 6;

     1874    22482        /* Broadcast command */
     1875    22483    3        CASE (%CMD_BROADCAST);
     1876    22484    3            IF OUT$ -> P$B.SUBLK$(0) -> P$B.CODE = %OPT_YES
     1877    22485    3            THEN
     1878    22486    3                 VM_HEADER.STATUS.BROADCAST = %YES#;
     1879    22487    3            ELSE
     1880    22488    3                 VM_HEADER.STATUS.BROADCAST = %NO#;
     1881    22489        %SPACE 6;

     1882    22490        /* Cancel command */
     1883    22491    3        CASE (%CMD_CANCEL);
     1884    22492    3            CALL M$EXIT;
     1885    22493        %SPACE 6;

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:74   
     1886    22494        /* Crpt command */
     1887    22495    3        CASE (%CMD_CRPT);
     1888    22496    3            CALL VMX$OCTBIN (OUT$->P$B.SUBLK$(0)->P$S,SEED);
     1889    22497    3            VM_HEADER.STATUS.CRYPT = (SEED ~= 0);
     1890    22498        %SPACE 6;

     1891    22499        /* Copy command */
     1892    22500    3        CASE (%CMD_COPY);
     1893    22501    3            CALL REREAD$CHK
     1894    22502    4            WHENALTRETURN DO;
     1895    22503    4                 CALL REREAD$CMD (VN_COPY, VM_HEADER.COPY$, E_CMD_COPY_PROMPT,
     1896    22504    4                   CMD_COPY$, %NO# ) ALTRET(RET);
     1897    22505    4            END;
     1898    22506    3            CALL REPLACE$ADDR (VM_HEADER.COPY$, %VM_TYPE_C) ALTRET(E_ALLOCATE);
     1899    22507        %SPACE 6;

     1900    22508        /* Date command; for gateways;  privileged */
     1901    22509    3        CASE (%CMD_DATE);
     1902    22510    3            CALL REPLACE$TSTAMP (VM_HEADER.CREATION_DATE);
     1903    22511        %SPACE 6;

     1904    22512        /* Defer command */
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:75   
     1905    22513    3        CASE (%CMD_DEFER);
     1906    22514    3            CALL REREAD$CHK
     1907    22515    4            WHENALTRETURN DO;
     1908    22516    5                 IF VM_HEADER.DELIVERY_DATE ~= 0 then do;
     1909    22517    5                      WORK_UTS = VM_HEADER.DELIVERY_DATE;
     1910    22518    5                      CALL M$TIME (GET_UTS);
     1911    22519    5                 END;
     1912    22520    4                 else call M$TIME(GET_CURRENT);
     1913    22521    4                 TEMP_TEXTC.L# = LENGTHC(WORK_TIMEC) + LENGTHC(WORK_DATEC) + 1;
     1914    22522    4                 CALL CONCAT (TEMP_TEXTC.NAME#,SUBSTR(WORK_TIMEC,0,5),',',WORK_DATEC);
     1915    22523    4                 CALL REREAD$CMD (VN_DEFER, ADDR(TEMP_TEXTC), E_CMD_DEFER_PROMPT,
     1916    22524    4                   CMD_DEFER$, %NO# ) ALTRET(RET);
     1917    22525    4            END;
     1918    22526    3            CALL VNS$BREAK_DISABLE;
     1919    22527    3            CALL REPLACE$TSTAMP (VM_HEADER.DELIVERY_DATE)
     1920    22528    4            WHENRETURN DO;
     1921    22529    4                 IF VM_HEADER.DELIVERY_DATE > VM_HEADER.CREATION_DATE
     1922    22530    5                 THEN DO;
     1923    22531    5                      VM_HEADER.STATUS.DEFER = %YES#;
     1924    22532    5                      IF DID_SEND = %YES# THEN
     1925    22533    5                           DID_SEND = %NO#;
     1926    22534    5                 END;
     1927    22535    5                 ELSE DO;
     1928    22536    5                      VM_HEADER.DELIVERY_DATE = 0;
     1929    22537    5                      CALL VMA$ERRMSG (E_PASTDEFER);
     1930    22538    5                 END;
     1931    22539    4            END;
     1932    22540    3            CALL VNS$BREAK_ENABLE;
     1933    22541        %SPACE 6;

     1934    22542        /* Display command */
     1935    22543    3        CASE (%CMD_DISPLAY);
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:76   
     1936    22544    3            IF OUT$ -> P$B.NSUBLKS = 0
     1937    22545    4            THEN DO;              /* Display the whole message */
     1938    22546    4                 CALL VMD$DI_MESSAGE (0,M$ME_NUM,M$WORK_NUM,0,'1'B);
     1939    22547    4                 IF VM_HEADER.SIGNED$ ~= ADDR(NIL)
     1940    22548    5                 THEN DO;
     1941    22549    5                      VECT=VECTOR(VM_HEADER.SIGNED$->X$STRING.TEXT);
     1942    22550    5                      CALL VMD$WRITE_BUF(F_FDSSIGNED);
     1943    22551    5                 END;
     1944    22552    4                 IF ENTRY_REASON = %MAIL_FORWARD OR ENTRY_REASON =
     1945    22553    4                   %MAIL_FORWARD_ENCL
     1946    22554    5                 THEN DO;
     1947    22555    5                      call XUR$INFOMSG( E_FORMSGFMT,, M$ME_NUM );
     1948    22556    5                      IF ENTRY_REASON = %MAIL_FORWARD_ENCL THEN
     1949    22557    5                           CALL XUR$INFOMSG ( E_FORENCLFMT, , M$ME_NUM);
     1950    22558    5                 END;
     1951    22559
     1952    22560    4                 VECT = VECTOR(BLANK_CHAR); /* Display option info. */
     1953    22561    4                 CALL VMD$WRITE_BUF(F_FDSSPACE);
     1954    22562    4                 CALL VMD$DI_OPTS(VM_HEADER,M$ME_NUM);
     1955    22563
     1956    22564    4            END;
     1957    22565    4            ELSE DO;              /* Display individual parts */
     1958    22566    5                 DO CASE (OUT$ -> P$B.SUBLK$(0) -> P$B.CODE);
     1959    22567    5                 CASE (%OPT_BC);
     1960    22568    5                     CALL VMD$DI_BLIND (VM_HEADER,M$ME_NUM);
     1961    22569    5                 CASE (%OPT_COPY);
     1962    22570    5                     CALL VMD$DI_COPY (VM_HEADER,M$ME_NUM);
     1963    22571    5                 CASE (%OPT_REF);
     1964    22572    5                     CALL VMD$DI_REFERENCE (VM_HEADER,M$ME_NUM);
     1965    22573    5                 CASE (%OPT_SUBJECT);
     1966    22574    5                     CALL VMD$DI_SUBJECT (VM_HEADER,M$ME_NUM);
     1967    22575    5                 CASE (%OPT_TO);
     1968    22576    5                     CALL VMD$DI_TO (VM_HEADER,M$ME_NUM);
     1969    22577    5                 CASE (%OPT_SIGNED);
     1970    22578    5                     CALL VMD$DI_SIGNED (VM_HEADER,M$ME_NUM);
     1971    22579    5                 CASE (%OPT_FILE_COPY);
     1972    22580    5                     CALL VMD$DI_FCOPY (VM_HEADER,M$ME_NUM);
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:77   
     1973    22581    5                 CASE (%OPT_RR);
     1974    22582    5                     CALL VMD$DI_RR (VM_HEADER,M$ME_NUM);
     1975    22583    5                 CASE (%OPT_RTO);
     1976    22584    5                     CALL VMD$DI_RTO (VM_HEADER,M$ME_NUM);
     1977    22585    5                 CASE (%OPT_DEFER);
     1978    22586    5                     CALL VMD$DI_DEFER (VM_HEADER,M$ME_NUM);
     1979    22587    5                 CASE(%OPT_BROADCAST);
     1980    22588    5                     CALL VMD$DI_BROADCAST (VM_HEADER,M$ME_NUM);
     1981    22589    5                 CASE(%OPT_DR);
     1982    22590    5                     CALL VMD$DI_DR (VM_HEADER,M$ME_NUM);
     1983    22591    5                 END;
     1984    22592    4            END;
     1985    22593
     1986    22594        %SPACE 6;

     1987    22595        /* Delivery Receipt command */
     1988    22596    3        CASE (%CMD_DR);
     1989    22597    3            IF OUT$ -> P$B.SUBLK$(0) -> P$B.CODE = %OPT_YES
     1990    22598    3            THEN
     1991    22599    3                 VM_HEADER.STATUS.DR = %YES#;
     1992    22600    3            ELSE
     1993    22601    3                 VM_HEADER.STATUS.DR = %NO#;
     1994    22602        %SPACE 6;

     1995    22603        /* Edit command  */
     1996    22604    3        CASE (%CMD_EDIT);
     1997    22605    3            IF OUT$ -> P$B.NSUBLKS = 0
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:78   
     1998    22606    3            THEN
     1999    22607    3                 INVOKE_EDITOR$ = DEFAULT_EDITOR$;
     2000    22608    3            ELSE
     2001    22609    3                 INVOKE_EDITOR$ = OUT$ -> P$B.SUBLK$(0) -> P$S.TEXTC$;
     2002    22610        %SPACE 6;

     2003    22611        /* End, Exit, Quit command */
     2004    22612    3        CASE(%CMD_EXIT);
     2005    22613    3            CALL DO$SEND ALTRET(ALT);
     2006    22614    3            CALL M$EXIT;       /*** Terminate SEND ***/
     2007    22615        %SPACE 6;

     2008    22616        /* Fcopy command */
     2009    22617    3        CASE (%CMD_FILE_COPY);
     2010    22618    3            IF OUT$ -> P$B.NSUBLKS = 0
     2011    22619    3            THEN                      /* Assume yes */
     2012    22620    3                 VM_HEADER.STATUS.FCOPY = %YES#;
     2013    22621    4            ELSE DO;
     2014    22622    4                 BLK$ = OUT$ -> P$B.SUBLK$(0);
     2015    22623    5                 DO CASE (BLK$ -> P$B.CODE);
     2016    22624    5                 CASE(%OPT_YES);
     2017    22625    5                     VM_HEADER.STATUS.FCOPY = %YES#;
     2018    22626    5                 CASE(%OPT_NO);
     2019    22627    5                     VM_HEADER.STATUS.FCOPY = %NO#;
     2020    22628    5                 CASE(ELSE); /* must be folder name */
     2021    22629    5                     VM_HEADER.STATUS.FCOPY = %YES#;
     2022    22630    5                     VM_RADDRESS.ACCT = VM_CURRENT_FOLDER.ACCT;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:79   
     2023    22631    5                     VM_RADDRESS.FOLDER = VM_CURRENT_FOLDER.FOLDER;
     2024    22632    5                     VM_RADDRESS.PASS = VM_CURRENT_FOLDER.PASS;
     2025    22633    5                     VM_RADDRESS.SITENAME = VM_CURRENT_FOLDER.SITENAME;
     2026    22634    5                     VM_RADDRESS.NEXT$ = ADDR(NIL);
     2027    22635    5                     VM_RADDRESS.PREV$ = ADDR(NIL);
     2028    22636    5                     VM_RADDRESS.FLAGS = %NO#;
     2029    22637    5                     VM_RADDRESS.TYPE = %VM_ADD_RESOLVED;
     2030    22638    6                     DO I = 0 TO BLK$ -> P$B.NSUBLKS - 1;
     2031    22639    6                          TMP$ = BLK$ -> P$B.SUBLK$(I);
     2032    22640    7                          DO CASE (TMP$ -> P$B.CODE);
     2033    22641    7                          CASE (%ADD_ACCT);
     2034    22642    7                              VM_RADDRESS.ACCT = TMP$ -> P$S.TEXT;
     2035    22643    7                          CASE (%ADD_FOLDER);
     2036    22644    7                              VM_RADDRESS.FOLDER = TMP$ -> P$S.TEXT;
     2037    22645    7                          CASE (%ADD_PASS);
     2038    22646    7                              VM_RADDRESS.PASS = TMP$ -> P$S.TEXT;
     2039    22647    7                          CASE (%ADD_NAME);
     2040    22648    7                              CALL VMA$ERRMSG (E_NAMENTALLOWED);
     2041    22649    7                              ERR_FLAG = %YES#;
     2042    22650    7                              GOTO RET;
     2043    22651    7                          END; /* Do case ... end */
     2044    22652    6                     END; /* Do I = ... end */
     2045    22653    5                     CALL ALLOC$RADDRESS (VM_HEADER.FILE_FOLDER$, VM_RADDRESS) ALTRET(
             22653                              E_ALLOCATE);
     2046    22654    5                 END;
     2047    22655    4            END;
     2048    22656        %SPACE 6;

     2049    22657        /* From command;  privileged */
     2050    22658    3        CASE (%CMD_FROM);
     2051    22659    3            CALL REPLACE$ADDR (VM_HEADER.FROM$, 0) ALTRET(E_ALLOCATE);
     2052    22660    3            CALL ERASE$ADDR (VM_HEADER.REPLY_TO$, %VM_TYPE_RTO) ALTRET(E_ALLOCATE);
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:80   
     2053    22661    3            CALL ERASE$FLD (VM_HEADER.SIGNED$) ALTRET(E_ALLOCATE);
     2054    22662        %SPACE 6;

     2055    22663        /* Help commands */
     2056    22664    3        CASE (%CMD_HELP);
     2057    22665    3            HELP_PARAM.HELP$ = OUT$ -> P$B.SUBLK$(0) -> P$S.TEXTC$;
     2058    22666    3            HELP_PARAM.MORE# = %NO#;
     2059    22667    3            CALL XUR$HELP (HELP_PARAM);
     2060    22668
     2061    22669    3        CASE (%CMD_QUES1);
     2062    22670    3            CALL XUR$MOREMSG (HELP_PARAM) ALTRET(NO_MORE);
     2063    22671    3        CASE (%CMD_QUES2);
     2064    22672    3            CALL XUR$ALLMSG (HELP_PARAM) ALTRET(NO_MORE);
     2065    22673        /**/
     2066    22674    4            DO NEVER;
     2067    22675    4   NO_MORE:
     2068    22676        /*E*    ERROR: VNS-E$NOMORE-0
     2069    22677                MESSAGE: No messages available. */
     2070    22678    4                 CALL XUR$ERRMSG (E_NOMORE);
     2071    22679    4            END;                      /* Do never ... end */
     2072    22680        %SPACE 6;

     2073    22681        /* Intersystem Blind Copy command: privileged */
     2074    22682    3        CASE(%CMD_INTERSYS_BC);
     2075    22683    3            CALL GET$ADDLIST (%VM_TYPE_IBC);
     2076    22684        %SPACE 6;

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:81   
     2077    22685        /* Intersystem Copy command: privileged */
     2078    22686    3        CASE(%CMD_INTERSYS_C);
     2079    22687    3            CALL GET$ADDLIST (%VM_TYPE_IC);
     2080    22688        %SPACE 6;

     2081    22689        /* Intersystem To command: privileged */
     2082    22690    3        CASE(%CMD_INTERSYS_TO);
     2083    22691    3            CALL GET$ADDLIST (%VM_TYPE_ITO);
     2084    22692        %SPACE 6;

     2085    22693        /* LINK command */
     2086    22694    3        CASE(%CMD_LINK);
     2087    22695        /*
     2088    22696             ***** LINK is a holdover from back before the DO (or !) builtin
     2089    22697             ***** was available.  The command is retained for compatibility,
     2090    22698             ***** but, as of B03, the implementation has been changed to be
     2091    22699             ***** a simple passthru to the builtin.
     2092    22700        */
     2093    22701    3            CALL INDEX (I, ' ', P_PCB$TEXT);
     2094    22702    3            SUBSTR (P_PCB$TEXT, 0, I) = '!';
     2095    22703    3            CALL XUR$GETCMD (OPTION_NODES$->BSD, OUT$,, P_PCB$TEXT, P_PCB.NCHARS)
     2096    22704    4            WHENALTRETURN DO;
     2097    22705    4                 CALL CMD_ERR;
     2098    22706    4            END;
     2099    22707        %SPACE 6;

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:82   
     2100    22708        /*  MESSAGEID: priviledged command                            */
     2101    22709    3        CASE (%CMD_MESSAGE_ID);
     2102    22710    3            CALL REPLACE$FLD (VM_HEADER.UNIQUE_ID$) ALTRET(E_ALLOCATE);
     2103    22711    3            ID_ASSIGNED = (VM_HEADER.UNIQUE_ID$ ~= ADDR(NIL));
     2104    22712        %SPACE 6;

     2105    22713        /* Reference command */
     2106    22714    3        CASE (%CMD_REF);
     2107    22715    3            CALL REREAD$CHK
     2108    22716    4            WHENALTRETURN DO;
     2109    22717    4                 CALL REREAD$CMD (VN_REFERENCE, VM_HEADER.REFERENCE$, E_CMD_REF_PROMPT,
     2110    22718    4                   CMD_REF$, %YES# ) ALTRET(RET);
     2111    22719    4            END;
     2112    22720    3            CALL REPLACE$FLD (VM_HEADER.REFERENCE$) ALTRET(E_ALLOCATE);
     2113    22721        %SPACE 6;

     2114    22722        /* PREPROCESS command */
     2115    22723    3        CASE (%CMD_PREPROCESS);
     2116    22724    3            IF OUT$ -> P$B.NSUBLKS = 0
     2117    22725    3            THEN                      /* Assume yes */
     2118    22726    3                 PREPROCESS = %YES#;
     2119    22727    3            ELSE
     2120    22728    3                 IF OUT$ -> P$B.SUBLK$(0) -> P$B.CODE = %OPT_YES
     2121    22729    3                 THEN
     2122    22730    3                      PREPROCESS = %YES#;
     2123    22731    3                 ELSE
     2124    22732    3                      PREPROCESS = %NO#;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:83   
     2125    22733    3            IF PREPROCESS ~= XUR_INIT.PREPROCESS#
     2126    22734    4            THEN DO;
     2127    22735    4                 XUR_INIT.PREPROCESS# = PREPROCESS;
     2128    22736    4                 CALL XUR$INIT (XUR_INIT);
     2129    22737    4                 CALL XUR$SETERRMSG (ERRMSG_FID);
     2130    22738    4            END;
     2131    22739        %SPACE 6;

     2132    22740        /*   REFERENCEID: priviledged command                         */
     2133    22741    3        CASE (%CMD_REF_MESSAGE_ID);
     2134    22742    3            CALL REPLACE$FLD (VM_HEADER.REFERS_TO_ID$) ALTRET(E_ALLOCATE);
     2135    22743        %SPACE 6;

     2136    22744        /* Rr command */
     2137    22745    3        CASE (%CMD_RR);
     2138    22746    3            IF OUT$ -> P$B.SUBLK$(0) -> P$B.CODE = %OPT_YES
     2139    22747    3            THEN
     2140    22748    3                 VM_HEADER.STATUS.RR = %YES#;
     2141    22749    3            ELSE
     2142    22750    3                 VM_HEADER.STATUS.RR = %NO#;
     2143    22751        %SPACE 6;

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:84   
     2144    22752        /* Reply to command */
     2145    22753    3        CASE (%CMD_RTO);
     2146    22754    3            CALL REREAD$CHK
     2147    22755    4            WHENALTRETURN DO;
     2148    22756    4                 CALL REREAD$CMD (VN_REPLY_TO, VM_HEADER.REPLY_TO$, E_CMD_RTO_PROMPT,
     2149    22757    4                   CMD_RTO$, %NO# ) ALTRET(RET);
     2150    22758    4            END;
     2151    22759    3            CALL REPLACE$ADDR (VM_HEADER.REPLY_TO$, %VM_TYPE_RTO) ALTRET(E_ALLOCATE);
     2152    22760        %SPACE 6;

     2153    22761        /* Send command */
     2154    22762    3        CASE (%CMD_SEND);
     2155    22763    3            CALL DO$SEND ALTRET(ALT);
     2156    22764        %SPACE 6;

     2157    22765        /* Signed command */
     2158    22766    3        CASE (%CMD_SIGNED);
     2159    22767    3            CALL REREAD$CHK
     2160    22768    4            WHENALTRETURN DO;
     2161    22769    4                 P_PCB.NOLEADBLANKS = %YES#;
     2162    22770    4                 CALL REREAD$CMD (VN_SIGNED, VM_HEADER.SIGNED$, E_CMD_SIGNED_PROMPT,
     2163    22771    5                   CMD_SIGNED$, %YES# ) WHENALTRETURN DO;
     2164    22772    5                      P_PCB.NOLEADBLANKS = %NO#;
     2165    22773    5                      GOTO RET;
     2166    22774    5                 END;
     2167    22775    4                 P_PCB.NOLEADBLANKS = %NO#;
     2168    22776    4            END;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:85   
     2169    22777    3            CALL REPLACE$FLD (VM_HEADER.SIGNED$) ALTRET(E_ALLOCATE);
     2170    22778        %SPACE 6;

     2171    22779        /* SiteInfo command: privileged */
     2172    22780    3        CASE (%CMD_SITEINFO);
     2173    22781    3            VM_SITE = '0'B;
     2174    22782    3            VM_SITE.ORIGIN = OUT$ -> P$B.SUBLK$(0) -> P$S.TEXT;
     2175    22783    3            VM_SITE.NUM_SITES = OUT$ -> P$B.NSUBLKS - 1;
     2176    22784    3            IF VM_SITE.NUM_SITES > 26
     2177    22785    4            THEN DO;
     2178    22786    4                 CALL VMA$ERRMSG (E_TOOMANYSITES);
     2179    22787    4                 ERR_FLAG = %YES#;
     2180    22788    4                 VM_SITE.NUM_SITES = 26;
     2181    22789    4            END;
     2182    22790    4            DO I = 0 TO VM_SITE.NUM_SITES - 1;
     2183    22791    4                 VM_SITE.RECEIVER_SITE(I) = P$B.SUBLK$(I+1) -> P$S.TEXT;
     2184    22792    4            END;
     2185    22793    3            CALL VMD$PUT_SITE (VM_SITE,M$WORK_NUM)
     2186    22794    4            WHENALTRETURN DO;
     2187    22795    4                 CALL MON_ERR;
     2188    22796    4            END;
     2189    22797        %SPACE 6;

     2190    22798        /* Subject command */
     2191    22799    3        CASE (%CMD_SUBJECT);
     2192    22800    3            CALL REREAD$CHK
     2193    22801    4            WHENALTRETURN DO;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:86   
     2194    22802    4                 CALL REREAD$CMD (VN_SUBJECT, VM_HEADER.SUBJECT$, E_CMD_SUBJECT_PROMPT,
     2195    22803    4                   CMD_SUBJECT$, %YES# ) ALTRET(RET);
     2196    22804    4            END;
     2197    22805    3            CALL REPLACE$FLD (VM_HEADER.SUBJECT$) ALTRET(E_ALLOCATE);
     2198    22806    3            IF VM_HEADER.SUBJECT$ = ADDR(NIL) AND NOT PROC_OPTIONS
     2199    22807    3            THEN /* avoid Subject prompt if null subject is provided */
     2200    22808    3                 CALL ALLOC$TEXTC (VM_HEADER.SUBJECT$, 1, BLANK_CHAR) ALTRET(E_ALLOCATE
             22808                          );
     2201    22809        %SPACE 6;

     2202    22810        /* To command */
     2203    22811    3        CASE (%CMD_TO);
     2204    22812    3            CALL REREAD$CHK
     2205    22813    4            WHENALTRETURN DO;
     2206    22814    4                 CALL REREAD$CMD (VN_TO_, VM_HEADER.TO$, E_CMD_TO_PROMPT,
     2207    22815    4                   CMD_TO$, %NO# ) ALTRET(RET);
     2208    22816    4            END;
     2209    22817    3            CALL REPLACE$ADDR (VM_HEADER.TO$, %VM_TYPE_TO) ALTRET(E_ALLOCATE);
     2210    22818        %SPACE 6;

     2211    22819    3        CASE (%CMD_TRACE);
     2212    22820    3            IF OUT$ -> P$B.NSUBLKS = 0
     2213    22821    4            THEN DO;
     2214    22822    4                 SIZE = 0;
     2215    22823    4            END;
     2216    22824    4            ELSE DO;
     2217    22825    4                 BLK$ = OUT$ -> P$B.SUBLK$(0);
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:87   
     2218    22826    4                 SIZE = P_PCB.NCHARS - P$B.CPOS;
     2219    22827    4                 IF SIZE > 0
     2220    22828    4                 THEN
     2221    22829    4                      VM_BODYREC.VALUE.DATA = SUBSTR (P_PCB$TEXT, P$B.CPOS, SIZE);
     2222    22830    4            END;
     2223    22831    3            VM_BODYREC.VALUE.COUNT = SIZE;
     2224    22832    3            CALL VMD$PUT_TRACE (0, M$WORK_NUM, VM_HEADER.NUM_TRACE_RECORDS,
     2225    22833    3              SIZE, 0, VM_BODYREC)
     2226    22834    4            WHENRETURN DO;
     2227    22835    4                 VM_HEADER.NUM_TRACE_RECORDS = VM_HEADER.NUM_TRACE_RECORDS + 1;
     2228    22836    4            END;
     2229    22837    4            WHENALTRETURN DO;
     2230    22838    4                 CALL MON_ERR;
     2231    22839    4            END;
     2232    22840        %SPACE 6;

     2233    22841        /*   TYPE:    priviledged command                             */
     2234    22842    3        CASE (%CMD_TYPE);
     2235    22843    3            VM_HEADER.STATUS = '0'B;
     2236    22844    4            DO CASE (OUT$ -> P$B.SUBLK$(0) -> P$B.CODE);
     2237    22845    4            CASE (%TYPE_ERR); VM_HEADER.STATUS.ERR = %YES#;
     2238    22846    4            CASE (%TYPE_ACK); VM_HEADER.STATUS.ACK = %YES#;
     2239    22847    4            CASE (%TYPE_RRACK); VM_HEADER.STATUS.RRACK = %YES#;
     2240    22848    4            CASE (%TYPE_ANSWER); VM_HEADER.STATUS.ANSWER = %YES#;
     2241    22849    4            CASE (%TYPE_DELIVERY); VM_HEADER.STATUS.DELIVERY = %YES#;
     2242    22850    4            END;
     2243    22851        %SPACE 6;

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:88   
     2244    22852    3        END CMD_CASE;
     2245    22853
     2246    22854    2   RET: RETURN;
     2247    22855        /**/
     2248    22856    2   E_ALLOCATE:
     2249    22857    2        CALL VMA$ERRMSG (MCB.ERR);
     2250    22858        /**/
     2251    22859    2   ALT: ALTRETURN;
     2252    22860
     2253    22861    2   END PROCESS_CMD;
     2254    22862        %EJECT;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:89   
     2255    22863        /********************************************************************/
     2256    22864        /*I*
     2257    22865             NAME: GET$ADDLIST
     2258    22866             DESCRIPTION: This routine will format the address list for
     2259    22867                            the approiate record
     2260    22868        */
     2261    22869        /********************************************************************/
     2262    22870
     2263    22871    1   GET$ADDLIST: PROC (VM_TYPE) ALTRET;
     2264    22872
     2265    22873        %VM_UADDRESS (NAME=VM$UADDRESS,STCLASS="BASED(TMP$)");
     2266    22910        %VM_RADDRESS (NAME=VM$RADDRESS, STCLASS="BASED(TMP$)");
     2267    22945    2   DCL VM_TYPE SBIN;
     2268    22946
     2269    22947    2   DCL I SBIN;
     2270    22948    2   DCL TMP$ PTR;
     2271    22949        /*
     2272    22950             ***** Convert parse tree into address list ...
     2273    22951        */
     2274    22952    2        CALL VMA$ADDRESS (OUT$,USER_NAME,VM_SEARCH_INFO) ALTRET(E_ADDRESS);
     2275    22953        /*
     2276    22954           Blank out the passwords... they're not needed by MAILMAN
     2277    22955        */
     2278    22956    2        TMP$ = VM_ADD_HEAD.HEAD$;
     2279    22957    3        DO I = 1 TO VM_ADD_HEAD.NUM_ENTRIES;
     2280    22958    3             IF VM$RADDRESS.TYPE = %VM_ADD_RESOLVED
     2281    22959    3             THEN
     2282    22960    3                  VM$RADDRESS.PASS = ' ';
     2283    22961    3             TMP$ = VM$RADDRESS.NEXT$;
     2284    22962    3        END;
     2285    22963        /*
     2286    22964             ***** Now write this record into the message file ...
     2287    22965        */
     2288    22966    2        CALL VMA$PUT_ADD_RECORD (VM_TYPE,VM_ADDLIST_,M$WORK_NUM) ALTRET(E_ADDRESS);
     2289    22967    2        RETURN;
     2290    22968        /**/
     2291    22969    2   E_ADDRESS:
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:90   
     2292    22970        /*
     2293    22971          **** If address error flag isn't set, this is a PMME error, so abort.
     2294    22972        */
     2295    22973    2        IF NOT VM_ADD_HEAD.FLAGS.ERR#
     2296    22974    3        THEN DO;
     2297    22975    3             CALL MON_ERR;
     2298    22976    3             CALL M$ERR (NOTSENT_ERR);
     2299    22977    3        END;
     2300    22978        /*
     2301    22979          **** Make a pass through the address list and write out the bad addresses.
     2302    22980        */
     2303    22981    2        TMP$ = VM_ADD_HEAD.HEAD$;
     2304    22982    3        DO I = 1 TO VM_ADD_HEAD.NUM_ENTRIES;
     2305    22983    3             IF VM$UADDRESS.TYPE = %VM_ADD_UNRESOLVED AND
     2306    22984    4               VM$UADDRESS.FLAGS.UNDEF# THEN DO;
     2307    22985    4                  if VM$UADDRESS.USER_NAME.COUNT > 31 then
     2308    22986    5                  do; /**  Textc too long for M$ERRMSG  **/
     2309    22987    5                       VM$UADDRESS.USER_NAME.COUNT = 31;
     2310    22988    5                       substr(VM$UADDRESS.USER_NAME.TEXT,28) = '...';
     2311    22989    5                  end;
     2312    22990    4                  CALL VMA$ERRMSG (E_BADADDRESS,,
     2313    22991    4                    VECTOR(ADDR(VM$UADDRESS.USER_NAME)->X$STRING));
     2314    22992    4             END;
     2315    22993    3             TMP$ = VM$UADDRESS.NEXT$;
     2316    22994    3        END;
     2317    22995    2        ERR_FLAG = %YES#;
     2318    22996    2        ALTRETURN;
     2319    22997
     2320    22998    2   END GET$ADDLIST;
     2321    22999        %EJECT;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:91   
     2322    23000        /********************************************************************/
     2323    23001        /*I*
     2324    23002             NAME: REREAD$CHK
     2325    23003             PURPOSE: To altreturn if an option needs to be reread.
     2326    23004             DESCRIPTION: This is a separate subroutine from REREAD$CMD so
     2327    23005                          that the full parameter list for that call is only
     2328    23006                          built when it's really needed.
     2329    23007        */
     2330    23008        /********************************************************************/
     2331    23009    1   REREAD$CHK: PROC ALTRET;
     2332    23010
     2333    23011    2        IF NOT DCBADDR(CMD_DCB) -> F$DCB.DDEV.IC#
     2334    23012    2          OR NOT PROC_OPTIONS
     2335    23013    2        THEN /* only reread when input is from terminal, at Option prompt */
     2336    23014    2             RETURN;
     2337    23015    2        IF OUT$-> P$B.NSUBLKS = 0
     2338    23016    2        THEN /* reread if no field value is specified */
     2339    23017    2             ALTRETURN;
     2340    23018    2        IF OUT$ -> P$B.SUBLK$(0) -> P$B.CPOS = P_PCB.NCHARS
     2341    23019    2        THEN   /* treat null string same as no string */
     2342    23020    2             ALTRETURN;
     2343    23021
     2344    23022    2        RETURN;
     2345    23023
     2346    23024    2   END REREAD$CHK;
     2347    23025        %EJECT;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:92   
     2348    23026        /********************************************************************/
     2349    23027        /*I*
     2350    23028             NAME: REREAD$CMD
     2351    23029             PURPOSE: Performs a reread using the specified parameters.
     2352    23030        */
     2353    23031        /********************************************************************/
     2354    23032    1   REREAD$CMD: PROC(CMD_PROMPT, TEXT$, PROMPT_CODE, NODE$, ASIS)  ALTRET;
     2355    23033
     2356    23034        %VLP_NAMEV( FPTN=CMD_PROMPT, STCLASS="");
     2357    23041    2   DCL TEXT$ PTR;                          /* Reread info. */
     2358    23042        %VLP_ERRCODE (FPTN=PROMPT_CODE, STCLASS="");
     2359    23087    2   DCL NODE$ PTR;
     2360    23088    2   DCL ASIS BIT(1);    /* don't strip leading comments if set */
     2361    23089
     2362    23090            %INIT_STR (STR=CMD_PROMPT, CODE=PROMPT_CODE, TEST=YES,
     2363    23091              VECT=CHANGE_PROMPT.PROMPT_);
     2364    23114    2        CALL M$PROMPT (CHANGE_PROMPT);
     2365    23115    2        IF TEXT$ = ADDR(NIL)
     2366    23116    2        THEN
     2367    23117    2             SET_INPUT.BUF_ = VECTOR(NIL);
     2368    23118    2        ELSE
     2369    23119    2             SET_INPUT.BUF_ = VECTOR(TEXT$ -> X$STRING.TEXT);
     2370    23120    2        CALL M$SINPUT (SET_INPUT)
     2371    23121    3        WHENALTRETURN DO;
     2372    23122    3             CALL MON_ERR;
     2373    23123    3        END;
     2374    23124    2        IF ASIS
     2375    23125    2        THEN
     2376    23126    2             P_PCB.COMMENT.LEAD = '  ';
     2377    23127    2        READ_SI.V.DVBYTE.REREAD# = %YES#;
     2378    23128    3        DO NEVER
     2379    23129    3   ERR:      CALL CMD_ERR ALTRET(ALT);
     2380    23130    3        END;
     2381    23131    2        CALL READ_CC ALTRET(ALT);
     2382    23132    2        CALL XUR$GETCMD (NODE$->BSD, OUT$, CMD_PROMPT, CMD_BUF, SIZE) ALTRET(ERR);
     2383    23133    2        P_PCB.COMMENT.LEAD = ' "';
     2384    23134    2        READ_SI.V.DVBYTE.REREAD# = %NO#;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:93   
     2385    23135
     2386    23136    2        RETURN;
     2387    23137    2   ALT: ALTRETURN;
     2388    23138
     2389    23139    2   END REREAD$CMD;
     2390    23140        %EJECT;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:94   
     2391    23141        /********************************************************************/
     2392    23142        /*I*
     2393    23143             NAME: ALLOC$TEXTC
     2394    23144             PURPOSE: To allocate a textc field in the header record.
     2395    23145        */
     2396    23146        /********************************************************************/
     2397    23147
     2398    23148    1   ALLOC$TEXTC: PROC (FLD$, SIZE, TEXT) ALTRET;
     2399    23149    2   DCL FLD$ PTR;
     2400    23150    2   DCL SIZE UBIN;
     2401    23151    2   DCL TEXT CHAR(511);
     2402    23152    2   DCL MAX_TEXTC_SIZE SBIN;
     2403    23153    2   DCL ALLOC_TEXTC BIT(1);
     2404    23154
     2405    23155    2        MAX_TEXTC_SIZE = 510;
     2406    23156    2        ALLOC_TEXTC = %YES#;
     2407    23157    2        MCB.SIZE = SIZE + 1;
     2408    23158    2        GOTO COMMON;
     2409    23159
     2410    23160        /********************************************************************/
     2411    23161        /*I*
     2412    23162             NAME: ALLOC$RADDRESS
     2413    23163             PURPOSE: To allocate an RADDRESS block in the header record.
     2414    23164        */
     2415    23165        /********************************************************************/
     2416    23166
     2417    23167    2   ALLOC$RADDRESS: ENTRY (FLD$, SIZE) ALTRET;
     2418    23168
     2419    23169    2        ALLOC_TEXTC = %NO#;
     2420    23170    2        MCB.SIZE = SIZEC(VM$RADDRESS);
     2421    23171
     2422    23172    2   COMMON: ;
     2423    23173    2        CALL VNS$BREAK_DISABLE;
     2424    23174    2        CALL ERASE$FLD (FLD$) ALTRET(ALT);
     2425    23175    2        CALL X$ALLOCATE (MCB)
     2426    23176    3        WHENALTRETURN DO;
     2427    23177    3             CALL VMA$ENLARGE_SEGMENT (VM_HEADER_, 1024) ALTRET(E_PMME);
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:95   
     2428    23178    3             MCB.WKSZ = MCB.WKSZ + 1024;
     2429    23179    3             CALL X$ALLOCATE (MCB) ALTRET(ALT);
     2430    23180    3        END;
     2431    23181    2        FLD$ = MCB.ADDRESS$;
     2432    23182
     2433    23183    2        IF ALLOC_TEXTC
     2434    23184    3        THEN DO; /* this is a TEXTC call */
     2435    23185    4             IF SIZE <= MAX_TEXTC_SIZE THEN DO;
     2436    23186    4                  FLD$ -> X$STRING.SIZ = SIZE;
     2437    23187    4                  FLD$ -> X$STRING.TEXT = SUBSTR (TEXT, 0, SIZE);
     2438    23188    4             END;
     2439    23189    4             ELSE DO;
     2440    23190    4                  FLD$->X$STRING.SIZ = MAX_TEXTC_SIZE;
     2441    23191    4                  FLD$->X$STRING.TEXT = SUBSTR(TEXT, 0, MAX_TEXTC_SIZE);
     2442    23192    4                  CALL CHECK$FLD (FLD$, MAX_TEXTC_SIZE);
     2443    23193    4             END;
     2444    23194    3        END;
     2445    23195    2        ELSE /* this is an RADDRESS call; SIZE is really the RADDRESS block */
     2446    23196    2             FLD$ -> VM$RADDRESS = ADDR(SIZE) -> VM$RADDRESS;
     2447    23197    2        CALL VNS$BREAK_ENABLE;
     2448    23198    2        RETURN;
     2449    23199
     2450    23200    2   E_PMME:
     2451    23201    2        MCB.ERR = B$TCB.ALT$ -> B$ALT.ERR;
     2452    23202    2   ALT: ALTRETURN;
     2453    23203
     2454    23204    2   END ALLOC$TEXTC;
     2455    23205        %EJECT;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:96   
     2456    23206        /********************************************************************/
     2457    23207        /*I*
     2458    23208             NAME: CHECK$FLD
     2459    23209             PURPOSE: To add a '>' as the last character of the TO:, C:,
     2460    23210                      and BC: fields when the size of the field is
     2461    23211                      greater than MAX_SIZE;
     2462    23212        */
     2463    23213        /********************************************************************/
     2464    23214
     2465    23215    1   CHECK$FLD: PROC(P1$,MAX_SIZE);
     2466    23216
     2467    23217    2   DCL P1$ PTR;
     2468    23218    2   DCL MAX_SIZE SBIN;
     2469    23219
     2470    23220    2   DCL CONTINUE_CHAR CHAR(1) BASED;
     2471    23221    2   DCL P2$ PTR;
     2472    23222
     2473    23223    2        IF (P1$ = VM_HEADER.TO$) OR (P1$ = VM_HEADER.BLIND$) OR
     2474    23224    3          (P1$ = VM_HEADER.COPY$) THEN DO;
     2475    23225    3             P2$ = PINCRC(P1$,MAX_SIZE);
     2476    23226    3             P2$->CONTINUE_CHAR = '>';
     2477    23227    3        END;
     2478    23228
     2479    23229    2        RETURN;
     2480    23230    2   END CHECK$FLD;
     2481    23231        %EJECT;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:97   
     2482    23232        /********************************************************************/
     2483    23233        /*I*
     2484    23234             NAME: ERASE$FLD
     2485    23235             PURPOSE: To remove a field (typically from the header record).
     2486    23236        */
     2487    23237        /********************************************************************/
     2488    23238
     2489    23239    1   ERASE$FLD: PROC (FLD$) ALTRET;
     2490    23240    2   DCL FLD$ PTR;
     2491    23241        %POINTER (NAME=FLD,STCLASS="REDEF FLD$");
     2492    23246
     2493    23247    2        IF FLD$ ~= ADDR(NIL)
     2494    23248    3        THEN DO;
     2495    23249    3             MCB.ADDRESS$ = FLD$;
     2496    23250    3             CALL X$DEALLOCATE (MCB) ALTRET(ALT);
     2497    23251    3             FLD$ = ADDR(NIL);
     2498    23252    3        END;
     2499    23253
     2500    23254    2        RETURN;
     2501    23255    2   ALT: ALTRETURN;
     2502    23256
     2503    23257    2   END ERASE$FLD;
     2504    23258        %EJECT;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:98   
     2505    23259        /********************************************************************/
     2506    23260        /*I*
     2507    23261             NAME: ERASE$ADDR
     2508    23262             PURPOSE: To remove an address list from the header and delete
     2509    23263                     the corresponding address record from the message file.
     2510    23264        */
     2511    23265        /********************************************************************/
     2512    23266
     2513    23267    1   ERASE$ADDR: PROC (FLD$, TYPE) ALTRET;
     2514    23268    2   DCL FLD$ PTR;
     2515    23269        %POINTER (NAME=FLD,STCLASS="REDEF FLD$");
     2516    23274    2   DCL TYPE UBIN;
     2517    23275
     2518    23276    2        IF FLD$ ~= ADDR(NIL)
     2519    23277    3        THEN DO;
     2520    23278    3             MCB.ADDRESS$ = FLD$;
     2521    23279    3             CALL X$DEALLOCATE (MCB) ALTRET(ALT);
     2522    23280    3             FLD$ = ADDR(NIL);
     2523    23281    3             IF TYPE > 0
     2524    23282    3             THEN
     2525    23283    3                  CALL VMA$DEL_ADD_RECORD (TYPE,,M$WORK_NUM);
     2526    23284    3        END;
     2527    23285
     2528    23286    2        RETURN;
     2529    23287    2   ALT: ALTRETURN;
     2530    23288
     2531    23289    2   END ERASE$ADDR;
     2532    23290        %EJECT;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:99   
     2533    23291        /********************************************************************/
     2534    23292        /*I*
     2535    23293            NAME: REPLACE$FLD
     2536    23294            PURPOSE: Replace a field in the header with text from a command.
     2537    23295            DESCRIPTION: This routine releases any existing value for the
     2538    23296            specified field, and puts in any text from the command just parsed.
     2539    23297        */
     2540    23298        /********************************************************************/
     2541    23299
     2542    23300    1   REPLACE$FLD: PROC (FLD$) ALTRET;
     2543    23301    2   DCL FLD$ PTR;
     2544    23302
     2545    23303    2        IF OUT$ -> P$B.NSUBLKS ~= 0
     2546    23304    3        THEN DO;
     2547    23305    3             BLK$ = OUT$ -> P$B.SUBLK$(0);
     2548    23306    3             I = P$B.CPOS;
     2549    23307    3             IF SUBSTR (P_PCB$TEXT, I) = ' '
     2550    23308    3             THEN      /* treat blank or null value like no value */
     2551    23309    3                  GOTO REMOVE;
     2552    23310    3             CALL SEARCHR (J, DUMMY, NON_BLANK, P_PCB$TEXT);
     2553    23311    3             J = J - I + 1;
     2554    23312    3             IF FLD$ ~= ADDR(NIL)
     2555    23313    3             THEN IF FLD$ -> X$STRING.TEXT = SUBSTR (P_PCB$TEXT, I, J)
     2556    23314    3                  THEN /* leave current value if new one is identical */
     2557    23315    3                       RETURN;
     2558    23316    3             CALL VNS$BREAK_DISABLE;
     2559    23317    3             DID_SEND = %NO#;
     2560    23318    3             CALL ALLOC$TEXTC (FLD$, J, PINCRC(P_PCB.TEXT$,I)->BSD) ALTRET(ALT);
     2561    23319    3             CALL VNS$BREAK_ENABLE;
     2562    23320    3        END;
     2563    23321    3        ELSE DO;
     2564    23322    3   REMOVE:   ;
     2565    23323    3             IF FLD$ ~= ADDR(NIL)
     2566    23324    4             THEN DO;
     2567    23325    4                  CALL VNS$BREAK_DISABLE;
     2568    23326    4                  CALL ERASE$FLD (FLD$) ALTRET(ALT);
     2569    23327    4                  CALL VNS$BREAK_ENABLE;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:100  
     2570    23328    4             END;
     2571    23329    3        END;
     2572    23330
     2573    23331    2        RETURN;
     2574    23332    2   ALT: ALTRETURN;
     2575    23333
     2576    23334    2   END REPLACE$FLD;
     2577    23335        %EJECT;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:101  
     2578    23336        /********************************************************************/
     2579    23337        /*I*
     2580    23338            NAME: REPLACE$ADDR
     2581    23339            PURPOSE: To replace an address list.
     2582    23340            DESCRIPTION: This routine puts the address list text into a new
     2583    23341            block in the header and tries to create a corresponding address
     2584    23342            record, which also validates the list.  If an error is found, the
     2585    23343            existing list, if any, is retained.
     2586    23344        */
     2587    23345        /********************************************************************/
     2588    23346
     2589    23347    1   REPLACE$ADDR: PROC (FLD$, TYPE) ALTRET;
     2590    23348    2   DCL FLD$ PTR;
     2591    23349    2   DCL TYPE UBIN;
     2592    23350
     2593    23351    2        IF OUT$ -> P$B.NSUBLKS ~= 0
     2594    23352    3        THEN DO;                  /* Something to process */
     2595    23353    3             BLK$ = OUT$ -> P$B.SUBLK$(0) -> P$B.SUBLK$(0);
     2596    23354    3             I = P$B.CPOS;
     2597    23355                /* Back up CPOS to start of actual text */
     2598    23356    4             DO CASE(P$B.CODE);
     2599    23357    4             CASE (%ADD_ACCT, %ADD_FOLDER);
     2600    23358    4                 I = I - 1; /* Adjust for "." or "/" */
     2601    23359    4             CASE (%ADD_PSID);
     2602    23360    4                 I = I - 3; /* Adjust for "DP#" */
     2603    23361    4             END;
     2604    23362    3             CALL SEARCHR (J, DUMMY, NON_BLANK, P_PCB$TEXT);
     2605    23363    3             J = J - I + 1;
     2606    23364    3             IF FLD$ ~= ADDR(NIL)
     2607    23365    3             THEN IF FLD$ -> X$STRING.TEXT = SUBSTR (P_PCB$TEXT, I, J)
     2608    23366    3                  THEN /* leave current value if new one is identical */
     2609    23367    3                       RETURN;
     2610    23368        /*
     2611    23369             ***** Convert the address and write the address record ...
     2612    23370        */
     2613    23371    3             CALL VNS$BREAK_DISABLE;
     2614    23372    3             IF TYPE > 0
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:102  
     2615    23373    3             THEN
     2616    23374    3                  CALL GET$ADDLIST (TYPE)
     2617    23375    4                  WHENALTRETURN DO;
     2618    23376    4                       CALL VNS$BREAK_ENABLE;
     2619    23377    4                       RETURN;
     2620    23378    4                  END;
     2621    23379        /*
     2622    23380             ***** If no errors found, replace the header text for the field ...
     2623    23381        */
     2624    23382    3             DID_SEND = %NO#;
     2625    23383    3             CALL ALLOC$TEXTC (FLD$, J, PINCRC(P_PCB.TEXT$,I)->BSD) ALTRET(ALT);
     2626    23384    3             CALL VNS$BREAK_ENABLE;
     2627    23385    3        END;
     2628    23386    3        ELSE DO;
     2629    23387    3             IF FLD$ ~= ADDR(NIL)
     2630    23388    4             THEN DO;
     2631    23389    4                  CALL VNS$BREAK_DISABLE;
     2632    23390    4                  CALL ERASE$ADDR (FLD$, TYPE) ALTRET(ALT);
     2633    23391    4                  CALL VNS$BREAK_ENABLE;
     2634    23392    4             END;
     2635    23393    3        END;
     2636    23394
     2637    23395    2        RETURN;
     2638    23396    2   ALT: ALTRETURN;
     2639    23397
     2640    23398    2   END REPLACE$ADDR;
     2641    23399        %EJECT;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:103  
     2642    23400        /********************************************************************/
     2643    23401        /*I*
     2644    23402            NAME: REPLACE$TSTAMP
     2645    23403            PURPOSE: To replace a timestamp in the header record.
     2646    23404        */
     2647    23405        /********************************************************************/
     2648    23406
     2649    23407    1   REPLACE$TSTAMP: PROC (TSTAMP) ALTRET;
     2650    23408    2   DCL TSTAMP UBIN;
     2651    23409
     2652    23410        /*
     2653    23411             ***** Set result to zero if there is nothing to convert...
     2654    23412        */
     2655    23413    2        IF OUT$ -> P$B.NSUBLKS = 0
     2656    23414    3        THEN DO;
     2657    23415    3             TSTAMP = 0;
     2658    23416    3             ALTRETURN;
     2659    23417    3        END;
     2660    23418        /*
     2661    23419             ***** Start with current date, and time of midnight ...
     2662    23420        */
     2663    23421    2        CALL M$TIME (GET_CURRENT);
     2664    23422    2        WORK_TIMEC = TIME_INIT;
     2665    23423        /*
     2666    23424             ***** Fill in fields provided by the command ...
     2667    23425        */
     2668    23426    3        DO I = 0 TO OUT$ -> P$B.NSUBLKS - 1;
     2669    23427    3             BLK$ = OUT$ -> P$B.SUBLK$(I);
     2670    23428    4             DO CASE (BLK$ -> P$B.CODE);
     2671    23429    4             CASE (%OPT_DATE);
     2672    23430    4                 CALL CHARBIN (J, BLK$->P$B.SUBLK$(0)->P$S.TEXT);
     2673    23431    4                 CALL BINCHAR(WORK_DATE.MONTH, J);
     2674    23432    4                 CALL CHARBIN (J, BLK$->P$B.SUBLK$(1)->P$S.TEXT);
     2675    23433    4                 CALL BINCHAR (WORK_DATE.DAY, J);
     2676    23434    4                 IF BLK$->P$B.NSUBLKS = 3
     2677    23435    5                 THEN DO;       /* A year specified */
     2678    23436    5                      CALL CHARBIN (J, BLK$->P$B.SUBLK$(2)->P$S.TEXT);
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:104  
     2679    23437    5                      CALL BINCHAR (WORK_DATE.YEAR, J);
     2680    23438    5                 END;
     2681    23439    4             CASE (%OPT_TIME);
     2682    23440    4                 CALL CHARBIN (J, BLK$->P$B.SUBLK$(0)->P$S.TEXT);
     2683    23441    4                 CALL BINCHAR (WORK_TIME.HOUR, J);
     2684    23442    4                 CALL CHARBIN (J, BLK$->P$B.SUBLK$(1)->P$S.TEXT);
     2685    23443    4                 CALL BINCHAR (WORK_TIME.MINUTE, J);
     2686    23444    4             END;
     2687    23445    3        END;
     2688    23446        /*
     2689    23447              ***** Now convert the time into a uts ...
     2690    23448        */
     2691    23449    2        CALL M$TIME (CHECK_TIME) ALTRET(BAD_TIME);
     2692    23450    2        TSTAMP = WORK_UTS;
     2693    23451    2        RETURN;
     2694    23452
     2695    23453    2   BAD_TIME: ;
     2696    23454    2        CALL MON_ERR;
     2697    23455    2        ALTRETURN;
     2698    23456
     2699    23457    2   END REPLACE$TSTAMP;
     2700    23458        %EJECT;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:105  
     2701    23459        /********************************************************************/
     2702    23460        /*I*
     2703    23461             NAME: PROMPT$TO
     2704    23462             PURPOSE: Prompts for TO information, parses, and processes it.
     2705    23463        */
     2706    23464        /********************************************************************/
     2707    23465
     2708    23466    1   PROMPT$TO: PROC  ALTRET;
     2709    23467    2   DCL SAVE_BREAK_TYPE SBIN;
     2710    23468
     2711    23469    2        SAVE_BREAK_TYPE = VNS_BREAK_TYPE;
     2712    23470    2        VNS_BREAK_TYPE = %BREAK_EXIT;
     2713    23471             %INIT_STR( STR=VN_TO_, CODE=E_CMD_TO_PROMPT, TEST=YES, VECT=
             23471                 CHANGE_PROMPT.PROMPT_);
     2714    23494    3        DO WHILE VM_HEADER.TO$ = ADDR(NIL);
     2715    23495    3             CALL XUR$GETCMD (CMD_TO$->BSD,OUT$,VN_TO_)
     2716    23496    4             WHENRETURN DO;
     2717    23497    4                  CALL PROCESS_CMD ALTRET(ALT);
     2718    23498    4             END;
     2719    23499    4             WHENALTRETURN DO;
     2720    23500    4                  CALL CMD_ERR ALTRET(ALT);
     2721    23501    4             END;
     2722    23502    3        END;
     2723    23503    2        VNS_BREAK_TYPE = SAVE_BREAK_TYPE;
     2724    23504
     2725    23505    2        RETURN;
     2726    23506    2   ALT: ALTRETURN;
     2727    23507
     2728    23508    2   END PROMPT$TO;
     2729    23509        %EJECT;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:106  
     2730    23510        /********************************************************************/
     2731    23511        /*I*
     2732    23512            NAME: DO$SEND
     2733    23513            PURPOSE: To prepare the message for transmission and pass it on to
     2734    23514                     MAILMAN to actually send it.
     2735    23515        */
     2736    23516        /********************************************************************/
     2737    23517
     2738    23518    1   DO$SEND: PROC ALTRET;
     2739    23519    2   DCL NUM_RECORDS SBIN;
     2740    23520    2   DCL UNIQUE_ID_STRING CHAR (128);
     2741    23521    2   DCL PTR$_OFFSET SBIN;
     2742    23522    2   DCL NEXT$ PTR;
     2743    23523    2   DCL PREV$ PTR;
     2744    23524    2   DCL NEW_TYPE UBIN;
     2745    23525    2   DCL PAGESIZE SBIN WORD STATIC INIT(4096);
     2746    23526
     2747    23527        %VM_ADD_HEAD (NAME=FWD_ENCL_HEAD,STCLASS=STATIC);
     2748    23556        %VM_INFOKEY (STCLASS=STATIC);
     2749    23573        /*
     2750    23574            Don't resend it if we've already sent it, unless it's been changed.
     2751    23575        */
     2752    23576    2        IF DID_SEND
     2753    23577    2        THEN
     2754    23578    2             RETURN;
     2755    23579        /*
     2756    23580           Open the MAILCG if it's not currently open.  If it can't be opened, or
     2757    23581           if it opens and we can't get a test message through to the mailman,
     2758    23582           complain to the user, wait thirty seconds, and try again.
     2759    23583        */
     2760    23584    2   OPENCG:
     2761    23585    2        CALL VNS$BREAK_DISABLE;
     2762    23586    2        CALL M$OPEN (OPEN_MAILCG) ALTRET (E_CG);
     2763    23587    2        VM_CGBUFFER.COMMAND = %VO_DUMMY#;
     2764    23588    2        CALL M$WRITE (WRITE_MAILCG) ALTRET (E_CG);
     2765    23589    3        DO WHILE ('0'B);
     2766    23590    3   E_CG:     ;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:107  
     2767    23591    3             CALL M$SENV;
     2768    23592    3             CLOSE_SAVE.V.DCB# = M$MAIL_COMGROUP_NUM;
     2769    23593    4             CALL M$CLOSE (CLOSE_SAVE) WHENALTRETURN DO; END;
     2770    23594    3             CALL VMA$ERRMSG (E_NCG1);
     2771    23595    3             CALL MON_ERR;
     2772    23596    3             IF B$JIT.MODE = %M_INT#
     2773    23597    4             THEN DO;
     2774    23598    4                  CALL VNS$BREAK_ENABLE;
     2775    23599    4                  CALL M$WAIT (TAKE_THIRTY);
     2776    23600    4                  GOTO OPENCG;
     2777    23601    4             END;
     2778    23602    3             ALTRETURN;
     2779    23603    3        END;
     2780    23604        /*
     2781    23605             ***** Construct a unique-ID string for this message, and put it
     2782    23606                   in the header.  The strings take one of two forms:
     2783    23607
     2784    23608                 <yymmdd.hhmmssss.sysidn@host.CP6> if this system supports
     2785    23609                    intersystem mail (and its own name is known), or
     2786    23610
     2787    23611                 <yymmdd.hhmmssss.sysidn@CP6> if MAIL is running standalone.
     2788    23612
     2789    23613                   This code is bypassed if the SENDer has included a MESSAGE ID:
     2790    23614                   command in a file being sent;  this is possible only for FMSEC
     2791    23615                   users, and is used when incoming network mailgrams contain an ID.
     2792    23616
     2793    23617        */
     2794    23618    2        IF NOT ID_ASSIGNED
     2795    23619    3        THEN DO;
     2796    23620    3             CALL M$TIME (GET_ANSI_TIME);
     2797    23621    3             CALL CONCAT (UNIQUE_ID_STRING, '<', ANSI_DATE, '.', ANSI_TIME, '.');
     2798    23622    3             CALL INDEX (SIZE, ' ', UNIQUE_ID_STRING);
     2799    23623    3             CALL BINCHAR (SUBSTR(UNIQUE_ID_STRING, SIZE, 6), B$JIT.SYSID);
     2800    23624    3             SIZE = SIZE + 6;
     2801    23625    3             IF VM_SITENAME ~= ' '
     2802    23626    4             THEN DO;
     2803    23627    4                  CALL INSERT (UNIQUE_ID_STRING, SIZE, , '@', VM_SITENAME);
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:108  
     2804    23628    4                  CALL INDEX (SIZE, ' ', UNIQUE_ID_STRING);
     2805    23629    4                  CALL INSERT (UNIQUE_ID_STRING, SIZE, , '.CP6>');
     2806    23630    4                  SIZE = SIZE + 5;
     2807    23631    4             END;
     2808    23632    4             ELSE DO;
     2809    23633    4                  CALL INSERT (UNIQUE_ID_STRING, SIZE, , '@CP6>');
     2810    23634    4                  SIZE = SIZE + 5;
     2811    23635    4             END;
     2812    23636    3             CALL ALLOC$TEXTC (VM_HEADER.UNIQUE_ID$, SIZE, UNIQUE_ID_STRING)
     2813    23637    3               ALTRET(E_ALLOCATE);
     2814    23638    3        END;
     2815    23639        /*
     2816    23640             ***** Save count of body records so that records appended by this
     2817    23641                   routine can be removed on exit.
     2818    23642        */
     2819    23643    2        NUM_RECORDS = VM_HEADER.NUM_RECORDS;
     2820    23644        /*
     2821    23645             ***** If there is a signature (SIGNED$), append it to the body.
     2822    23646        */
     2823    23647    2        IF VM_HEADER.SIGNED$ ~= ADDR(NIL)
     2824    23648    3        THEN DO;
     2825    23649    3             VM_BODYREC.VALUE.COUNT = 0;
     2826    23650    3             SIZE = 0;
     2827    23651    3             CALL VMD$PUT_BODY (0,M$WORK_NUM,VM_HEADER.NUM_RECORDS,
     2828    23652    3               SIZE,0,VM_BODYREC) ALTRET(E_PMME);
     2829    23653    3             VM_HEADER.NUM_RECORDS = VM_HEADER.NUM_RECORDS + 1;
     2830    23654    3             SIZE = VM_HEADER.SIGNED$ -> X$STRING.SIZ;
     2831    23655    3             VM_BODYREC.VALUE.DATA = VM_HEADER.SIGNED$ -> X$STRING.TEXT;
     2832    23656    3             VM_BODYREC.VALUE.COUNT = VM_HEADER.SIGNED$ -> X$STRING.SIZ;
     2833    23657    3             CALL VMD$PUT_BODY (0,M$WORK_NUM,VM_HEADER.NUM_RECORDS,
     2834    23658    3               SIZE,0,VM_BODYREC) ALTRET(E_PMME);
     2835    23659    3             VM_HEADER.NUM_RECORDS = VM_HEADER.NUM_RECORDS + 1;
     2836    23660    3        END;                      /* Append signature */
     2837    23661        /*
     2838    23662             ***** If send was entered to handle a forward command
     2839    23663                   then it is necessary to now append the forwarded
     2840    23664                   message to the current body ...
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:109  
     2841    23665        */
     2842    23666    2        IF ENTRY_REASON = %MAIL_FORWARD OR ENTRY_REASON = %MAIL_FORWARD_ENCL
     2843    23667    3        THEN DO;
     2844    23668    3             VM_BODYREC.VALUE.DATA = ' ';
     2845    23669    3             SIZE = 1;
     2846    23670    3             VM_BODYREC.VALUE.COUNT = 1;
     2847    23671    3             CALL VMD$PUT_BODY (0,M$WORK_NUM,VM_HEADER.NUM_RECORDS,
     2848    23672    3               SIZE,0,VM_BODYREC) ALTRET(E_PMME);
     2849    23673    3             VM_HEADER.NUM_RECORDS = VM_HEADER.NUM_RECORDS + 1;
     2850    23674    3             VM_HEADER.STATUS.FORWARDED = %YES#;
     2851    23675    3             CLOSE_SAVE.V.DCB# = M$SI_NUM;
     2852    23676    3             CALL M$CLOSE (CLOSE_SAVE) ALTRET(E_PMME);
     2853    23677    3             CALL M$OPEN (OPEN_FORWARD_FILE) ALTRET(E_PMME);
     2854    23678    3             CMD_DCB = M$EDIT_NUM;
     2855    23679    4             DO FOREVER;
     2856    23680    4                  CALL READ_CC ALTRET(END_APPEND);
     2857    23681    4                  VM_BODYREC.VALUE.COUNT = SIZE;
     2858    23682    4                  IF SIZE > 0
     2859    23683    4                  THEN
     2860    23684    4                       VM_BODYREC.VALUE.DATA = SUBSTR (CMD_BUF, 0, SIZE);
     2861    23685    4                  CALL VMD$PUT_BODY (0,M$WORK_NUM,VM_HEADER.NUM_RECORDS,
     2862    23686    4                    SIZE,0,VM_BODYREC,DCBADDR(M$SI_NUM)->F$DCB.DVBYTE) ALTRET(E_PMME);
     2863    23687    4                  VM_HEADER.NUM_RECORDS = VM_HEADER.NUM_RECORDS + 1;
     2864    23688    4             END;                /* Do forever ... end */
     2865    23689    3   END_APPEND: ;
     2866    23690    4             IF ENTRY_REASON = %MAIL_FORWARD_ENCL THEN DO;
     2867    23691    4                  CALL M$OPEN (OPEN_FORWARD_ENCL_FILE) ALTRET (E_PMME);
     2868    23692    5                  IF VM_ENCL_HEAD.NUM_ENTRIES = 0 THEN DO;
     2869    23693                       /* There are no other enclosures. Just append
     2870    23694                          the ones from the forwarded mailgram.      */
     2871    23695    5   GET_ENCL_LIST:      CALL VMA$GET_ADD_RECORD (%VM_TYPE_ENCL,VM_ENCLLIST_,
     2872    23696    5                         M$ENCL_NUM,0)
     2873    23697    6                       WHENALTRETURN DO;
     2874    23698    7                            IF B$TCB.ALT$->B$ALT.ERR.CODE = %E$LD THEN DO;
     2875    23699    7                                 VBOUND(VM_ENCLLIST_) = VBOUND(VM_ENCLLIST_)
     2876    23700    7                                   + PAGESIZE;
     2877    23701    7                                 GOTO GET_ENCL_LIST;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:110  
     2878    23702    7                            END;
     2879    23703    6                       END; /* WHENALTRETURN */
     2880    23704
     2881    23705    5                       ENCL$ = VM_ENCL_HEAD.HEAD$;
     2882    23706    6                       DO I = 0 TO VM_ENCL_HEAD.NUM_ENTRIES - 1;
     2883    23707    7                            IF VM_ENCLOS.FLAGS.DELETED = %NO# THEN DO;
     2884    23708    8                                 DO J = 0 TO VM_ENCLOS.NRECS - 1;
     2885    23709    8   GET_ENCL_REC1:                     CALL VMD$GET_ENCL(0,M$ENCL_NUM,J,SIZE,,,,
     2886    23710    8                                        VM_ENCLOS.TYPE-%VM_TYPE_ENCL,VM_ENCLREC$)
     2887    23711    9                                      WHENALTRETURN DO;
     2888    23712   10                                           IF B$TCB.ALT$->B$ALT.ERR.CODE = %E$LD THEN
             23712                                                    DO;
     2889    23713   10                                                VBOUND(VM_ENCLREC_) = VBOUND(
             23713                                                         VM_ENCLREC_)
     2890    23714   10                                                  + PAGESIZE;
     2891    23715   10                                                GOTO GET_ENCL_REC1;
     2892    23716   10                                           END;
     2893    23717    9                                      END; /* WHENALTRETURN */
     2894    23718    8                                      CALL VMD$PUT_ENCL (0,M$WORK_NUM,J,SIZE,
     2895    23719    8                                        0,,DCBADDR(M$ENCL_NUM)->F$DCB.DVBYTE,
     2896    23720    8                                        VM_ENCLOS.TYPE-%VM_TYPE_ENCL,VM_ENCLREC$);
     2897    23721    8                                      VM_HEADER.NUM_ENCL_RECORDS = VM_HEADER.
             23721                                               NUM_ENCL_RECORDS + 1;
     2898    23722    8                                 END; /* J */
     2899    23723    7                                 VM_ENCLOS.FLAGS.FORWARD = %YES#;
     2900    23724    7                            END; /* IF DELETED = %NO# */
     2901    23725    6                            ENCL$ = VM_ENCLOS.NEXT$;
     2902    23726    6                       END; /* I */
     2903    23727    5                  END; /* NUM_ENTRIES = 0 */
     2904    23728    5                  ELSE DO;
     2905    23729                    /* This will be alot different, requiring screwing
     2906    23730                       around with pointers in the context and stuff like
     2907    23731                       that.
     2908    23732
     2909    23733                       Setup to read VM_ENCL_HEAD from *FORWARD_ENCL_FILE.
     2910    23734                       Since the record must be read in two step, the VMA
     2911    23735                       can't be used so build the key here.               */
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:111  
     2912    23736
     2913    23737    5                       VM_INFOKEY.TYPE = %VM_TYPE_ENCL;
     2914    23738    5                       VM_INFOKEY.MESSAGE_NUMBER = 0;
     2915    23739    5                       READ_ENCL_FILE.KEY_ = VECTOR(VM_INFOKEY);
     2916    23740    5                       READ_ENCL_FILE.BUF_ = VECTOR(FWD_ENCL_HEAD);
     2917    23741    5                       CALL M$READ(READ_ENCL_FILE)
     2918    23742    6                       WHENALTRETURN DO;
     2919    23743    6                            IF B$TCB.ALT$->B$ALT.ERR.CODE = %E$LD THEN
     2920    23744    6                                 ;/* Lost data is ok here */
     2921    23745    6                            ELSE
     2922    23746    6                                 GOTO E_PMME;
     2923    23747    6                       END; /* WHENALTRETURN */
     2924    23748
     2925    23749                    /* Next, setup to read then rest of the context record
     2926    23750                       with CONT=YES                                      */
     2927    23751
     2928    23752    5                       READ_ENCL_FILE.V.DVBYTE.CONT# = %YES#;
     2929    23753    5                       READ_ENCL_FILE.BUF_.BUF$ = VM_ENCL_HEAD.NEXT$;
     2930    23754    5                       READ_ENCL_FILE.BUF_.BOUND =
     2931    23755    5                         (FWD_ENCL_HEAD.ADDRESS_SIZE - SIZEW(FWD_ENCL_HEAD))*4 - 1;
     2932    23756    5                       CALL M$READ(READ_ENCL_FILE) ALTRET (E_PMME);
     2933    23757
     2934    23758                    /* Save the current value of ENCL$ for PREV$ in
     2935    23759                       in the next VM_ENCLOS                             */
     2936    23760
     2937    23761    5                       PREV$ = ENCL$;
     2938    23762
     2939    23763                    /* Position ENCL$ to the current ENCL.HEAD$.
     2940    23764                       Fix PREV$ to point to the new enclosures.         */
     2941    23765
     2942    23766    5                       ENCL$ = VM_ENCL_HEAD.HEAD$;
     2943    23767    5                       VM_ENCLOS.PREV$ = VM_ENCL_HEAD.NEXT$;
     2944    23768
     2945    23769                    /* Now position ENCL$ to the new stuff               */
     2946    23770    5                       ENCL$ = VM_ENCL_HEAD.NEXT$;
     2947    23771
     2948    23772                    /* Fix NEXT$ to point to the current enclosures      */
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:112  
     2949    23773    5                       VM_ENCLOS.NEXT$ = VM_ENCL_HEAD.HEAD$;
     2950    23774
     2951    23775                    /* Loop thru the forwarded enclosures                */
     2952    23776    6                       DO I = 0 TO FWD_ENCL_HEAD.NUM_ENTRIES - 1;
     2953    23777    6                            NEW_TYPE=VM_ENCLOS.TYPE + VM_ENCL_HEAD.NUM_ENTRIES;
     2954    23778    7                            IF VM_ENCLOS.FLAGS.DELETED = %NO# THEN DO;
     2955    23779    8                                 DO J = 0 TO VM_ENCLOS.NRECS;
     2956    23780    8   GET_ENCL_REC2:                     CALL VMD$GET_ENCL(0,M$ENCL_NUM,J,SIZE,,,,
     2957    23781    8                                        VM_ENCLOS.TYPE-%VM_TYPE_ENCL,VM_ENCLREC$)
     2958    23782    9                                      WHENALTRETURN DO;
     2959    23783   10                                           IF B$TCB.ALT$->B$ALT.ERR.CODE = %E$LD THEN
             23783                                                    DO;
     2960    23784   10                                                VBOUND(VM_ENCLREC_) = VBOUND(
             23784                                                         VM_ENCLREC_)
     2961    23785   10                                                  + PAGESIZE;
     2962    23786   10                                                GOTO GET_ENCL_REC2;
     2963    23787   10                                           END;
     2964    23788    9                                      END; /* WHENALTRETURN */
     2965    23789    8                                      CALL VMD$PUT_ENCL (0,M$WORK_NUM,J,SIZE,
     2966    23790    8                                        0,,DCBADDR(M$ENCL_NUM)->F$DCB.DVBYTE,
     2967    23791    8                                        NEW_TYPE-%VM_TYPE_ENCL,VM_ENCLREC$);
     2968    23792    8                                      VM_HEADER.NUM_ENCL_RECORDS =
     2969    23793    8                                        VM_HEADER.NUM_ENCL_RECORDS + 1;
     2970    23794    8                                 END; /* J */
     2971    23795    7                            END; /* IF NOT DELETED */
     2972    23796
     2973    23797                    /* Update the pointers in VM_ENCLOS ans VM_ENCL_HEAD
     2974    23798                       as required.                                      */
     2975    23799
     2976    23800    6                            VM_ENCLOS.TYPE = NEW_TYPE;
     2977    23801    6                            VM_ENCLOS.FLAGS.FORWARD = %YES#;
     2978    23802    6                            IF VM_ENCLOS.NEXT$ ~= ADDR(NIL) THEN
     2979    23803    6                                 VM_ENCLOS.NEXT$ = PREV$;
     2980    23804
     2981    23805    7                            IF VM_ENCLOS.TITLE$ ~= ADDR(NIL) THEN DO;
     2982    23806    7                                 VM_ENCLOS.TITLE$ = PINCRW(ADDR(VM_ENCLOS.TITLE$),1);
     2983    23807    7                                 VM_ENCL_HEAD.NEXT$ = PINCRW(ENCL$,
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:113  
     2984    23808    7                                   SIZEW(VM_ENCLOS) + 1 +
     2985    23809    7                                   VM_ENCLOS.TITLE$->X$STRING.SIZ/4);
     2986    23810    7                            END;
     2987    23811    6                            ELSE
     2988    23812    6                                 VM_ENCL_HEAD.NEXT$ = PINCRW(ENCL$,SIZEW(VM_ENCLOS) + 1
             23812                                          );
     2989    23813    6                            IF VM_ENCLOS.PREV$ ~= ADDR(NIL) THEN
     2990    23814    6                                 VM_ENCLOS.PREV$ = VM_ENCL_HEAD.NEXT$;
     2991    23815
     2992    23816    6                            VM_ENCL_HEAD.HEAD$ = ENCL$;
     2993    23817    6                            VM_ENCL_HEAD.NUM_ENTRIES = VM_ENCL_HEAD.NUM_ENTRIES + 1;
     2994    23818    6                            VM_ENCL_HEAD.ADDRESS_SIZE = POFFW(VM_ENCL_HEAD.NEXT$,
     2995    23819    6                              VM_ENCLLIST$);
     2996    23820    6                            PREV$ = ENCL$;
     2997    23821    6                            ENCL$ = VM_ENCLOS.PREV$;
     2998    23822    6                       END; /* I */
     2999    23823    5                  END;
     3000    23824    4                  VM_HEADER.STATUS.ENCL = %YES#;
     3001    23825    4                  CALL VMA$PUT_ADD_RECORD (%VM_TYPE_ENCL,VM_ENCLLIST_,
     3002    23826    4                    M$WORK_NUM,0);
     3003    23827    4                  CLOSE_SCRATCH.V.DCB# = M$ENCL_NUM;
     3004    23828    4                  CALL M$CLOSE (CLOSE_SCRATCH) ALTRET (E_PMME);
     3005    23829    4             END; /* IF ENTRY_REASON = %MAIL_FORWARD_ENCL */
     3006    23830    3             CLOSE_SAVE.V.DCB# = M$EDIT_NUM;
     3007    23831    3             CALL M$CLOSE (CLOSE_SAVE) ALTRET(E_PMME);
     3008    23832    3             CMD_DCB = M$SI_NUM;
     3009    23833    3        END;                      /* Append message */
     3010    23834        /*
     3011    23835             ***** Update NEXT$ in header ...
     3012    23836        */
     3013    23837    2        VM_HEADER.NEXT$ = PINCRW(MCB.HI_SEGMENT$,1);
     3014    23838        /*
     3015    23839             ***** Write the header into the work file ...
     3016    23840        */
     3017    23841    2        CALL VMD$PUT_HEADER (0,M$WORK_NUM) ALTRET(E_SEND);
     3018    23842        /*
     3019    23843             ***** Send it off to mailman ...
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:114  
     3020    23844        */
     3021    23845    2        CALL VMC$DOSEND (M$WORK_NUM,SEED) ALTRET(E_SEND);
     3022    23846    2        DID_SEND = %YES#;
     3023    23847    2        IF VM_HEADER.NUM_RECORDS > NUM_RECORDS
     3024    23848    3        THEN DO;
     3025    23849    3             CALL VMD$DEL_BODY (0,M$WORK_NUM,NUM_RECORDS,VM_HEADER.NUM_RECORDS-1)
     3026    23850    3               ALTRET(E_PMME);
     3027    23851    3             VM_HEADER.NUM_RECORDS = NUM_RECORDS;
     3028    23852    3        END;
     3029    23853    2        CLOSE_SAVE.V.DCB# = M$MAIL_COMGROUP_NUM;
     3030    23854    3        CALL M$CLOSE (CLOSE_SAVE) WHENALTRETURN DO; END;
     3031    23855    2        CALL VNS$BREAK_ENABLE;
     3032    23856    2        RETURN;
     3033    23857        /**/
     3034    23858    2   E_ALLOCATE: ;
     3035    23859    2        CALL VMA$ERRMSG (MCB.ERR);
     3036    23860    2        GOTO E_SEND;
     3037    23861    2   E_PMME: ;
     3038    23862    2        CALL MON_ERR;
     3039    23863    2   E_SEND: ;
     3040    23864    2        ALTRETURN;
     3041    23865    2   END DO$SEND;
     3042    23866    1   END VNS$SEND;
     3043    23867        %EOD;

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:115  
--  Include file information  --

   XUR_ENTRY.:LIB_E05  cannot be made into a system file and is referenced.
   XUM_MACRO_C.:LIB_E05  is referenced.
   XUH_MACRO_C.:LIB_E05  is referenced.
   XUE_MACRO_C.:LIB_E05  is referenced.
   XU_FORMAT_C.:LIB_E05  is referenced.
   XU_SUBS_C.:LIB_E05  is referenced.
   XU_MACRO_C.:LIB_E05  is referenced.
   XU_PERR_C.:LIB_E05  is referenced.
   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   VM_PERR_C.:VMB6TOU  is referenced.
   VO_SUBS_C.:VMB6TOU  is referenced.
   VN_SUBS_C.:VMB6TOU  is referenced.
   VM_MACRO_C.:VMB6TOU  is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
   B_SEGIDS_C.:LIB_E05  is referenced.
   B_ERRORS_C.:LIB_E05  is referenced.
   B$TABLES_C.:LIB_E05  cannot be made into a system file and is referenced.
   B$JIT_C.:LIB_E05  is referenced.
   B$JIT.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure VNS$SEND.

   Procedure VNS$SEND requires 4273 words for executable code.
   Procedure VNS$SEND requires 308 words of local(AUTO) storage.

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:116  

 Object Unit name= VNS$SEND                                   File name= VNS$SEND.:VMB6TOU
 UTS= AUG 20 '97 15:27:51.60 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$MAIL_FILE
    2   DCB   even  none     0      0  M$MAIL_CENTRAL
    3   DCB   even  none     0      0  M$MAIL_GLOBAL
    4   DCB   even  none     0      0  M$WORK
    5   DCB   even  none     0      0  M$MAIL_COMGROUP
    6   DCB   even  none     0      0  M$DO
    7   DCB   even  none     0      0  M$LO
    8   DCB   even  none     0      0  M$ME
    9   DCB   even  none     0      0  M$NODE
   10   DCB   even  none     0      0  M$SI
   11   Data  even  none   758   1366  VNS$SEND
   12   DCB   even  none     0      0  M$EDIT
   13  RoData even  UTS    868   1544  VNS$SEND
   14   DCB   even  none     0      0  M$ENCL
   15   DCB   even  none     0      0  M$APND
   16   Proc  even  none  4273  10261  VNS$SEND
   17  RoData even  none   178    262  VNS$SEND

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    16      0   yes            yes      Main       0  VNS$SEND
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:117  

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
   11     76  VNS_REMEMBER                      11    102  VNS_BREAK_TYPE
   13     11  E_OPTIONS_PROMPT                  13     12  E_CMD_BODY_PROMPT
   13     13  E_CMD_BODY2_PROMPT                13     15  VN_DEFAULT_NODES
   13     53  VN_NATL_NODES                     13     62  VN_NODENAMES
   13    132  VN_NODEFID                        11    272  VM_CURRENT_FOLDER
   11   1100  CHANGE_PROMPT

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes          ~proc      0 B_POINTER
 yes     yes           Std       0 VMA$OPEN_ENCL_SEGS
 yes     yes           Std       1 VMD$GET_PROFILE
         yes           Std       4 VMD$GETNODES
 yes     yes           Std       2 VMD$GET_HEADER
 yes     yes           Std       7 XUR$INFOMSG
         yes           Std       2 VMF$MAKE_ADDRESS1SITE
 yes     yes           Std       6 XUR$GETCMD
         yes           Std       2 VNS$PRE_EXEC
 yes     yes           Std       2 VMA$ENLARGE_SEGMENT
 yes     yes           Std       7 VMB$USE_DEFAULT
 yes     yes           Std       1 VMA$OPEN_SRCH_LIST
 yes     yes           Std       4 XUR$SETDCBS
         yes           Std       0 VNS$BREAK_ENABLE
         yes           Std       2 VMF$MAKE_ADDRESS1
         yes           Std       1 X$STRIP_BLANKS
         yes           Std       2 VNS$POST_EXEC
 yes     yes           Std       3 VMA$MOREMEM
 yes     yes           Std       2 XTX$ADAPT
 yes     yes           Std       1 VMA$OPEN_GLOBAL
 yes     yes           Std       1 VMB$TESTREG
 yes     yes          Async      0 VNS$XCON
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:118  
 yes     yes           Std       3 VMD$ERRMSG
         yes           Std       5 VMA$ERRMSG
         yes           Std       0 VNS$BREAK_DISABLE
         yes          Async      0 VNS$BREAK
 yes     yes           Std       1 VMF$FROM
 yes     yes           Std       3 XUR$INIT
 yes     yes           Std       1 XUR$SETERRMSG
 yes     yes           Std       2 XUR$ERRPTR
 yes     yes           Std       7 XUR$ERRMSG
 yes     yes           Std       4 VMA$GET_SITE_NAME
 yes     yes           Std       7 VMB$USE_SPECIFIED
 yes     yes           Std       1 XUR$ECHOIF
 yes     yes           Std       7 VMD$PUT_BODY
 yes     yes           Std       9 VMD$PUT_ENCL
 yes     yes           Std       4 VMA$PUT_ADD_RECORD
 yes     yes           Std       5 VMM$EDIT_MESSAGE_OUT
 yes     yes           Std       7 VMD$DEL_TRACE
 yes     yes           Std       7 VMD$DEL_BODY
         yes           Std       2 VMD$DI_TO
 yes     yes           Std       6 VMD$DI_MESSAGE
         yes           Std       2 VMD$DI_OPTS
         yes           Std       2 VMD$DI_COPY
         yes           Std       2 VMD$DI_FCOPY
         yes           Std       1 VMD$WRITE_BUF
         yes           Std       2 VMD$DI_DR
 yes     yes           Std       1 XUR$MOREMSG
         yes           Std       2 VMD$DI_RTO
         yes           Std       2 VMD$DI_RR
 yes     yes           Std       1 XUR$HELP
         yes           Std       2 VMD$DI_SUBJECT
         yes           Std       2 VMD$DI_SIGNED
 yes     yes           Std       1 XUR$ALLMSG
 yes     yes           Std       7 VMD$PUT_TRACE
         yes           Std       2 VMD$DI_DEFER
         yes           Std       2 VMD$DI_BLIND
         yes           Std       2 VMX$OCTBIN
 yes     yes           Std       2 VMD$PUT_SITE
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:119  
         yes           Std       2 VMD$DI_REFERENCE
         yes           Std       2 VMD$DI_BROADCAST
 yes     yes           Std       5 VMA$ADDRESS
 yes     yes           Std       1 X$ALLOCATE
 yes     yes           Std       1 X$DEALLOCATE
 yes     yes           Std       4 VMA$DEL_ADD_RECORD
 yes     yes           Std       4 VMA$GET_ADD_RECORD
 yes     yes           Std       2 VMC$DOSEND
 yes     yes           Std       9 VMD$GET_ENCL
 yes     yes           Std       2 VMD$PUT_HEADER
                       nStd      0 X66_MAUTO
                       nStd      0 X66_MARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                             r    VM_HEADER$                       r    VM_PROFILE$
r    VM_ADDLIST$                      r    VM_ADDREC$                       r    VM_WORK$
r    VM_SELECT$                       r    VM_PARSEAREA$                    r    VM_INPUT$
r    VM_COPY$                              VM_ENCLLIST$                          VM_ENCLREC$
     VM_HEADER_                            VM_HEADER_INIT_                       VM_PROFILE_
     VM_ADDLIST_                           VM_ADDREC_                            VM_WORK_
     VM_SELECT_                            VM_PARSEAREA_                         VM_INPUT_
     VM_COPY_                              VM_ENCLLIST_                          VM_ENCLREC_
     M$MAIL_FILE                           M$MAIL_CENTRAL                        M$MAIL_GLOBAL
     M$WORK                                M$MAIL_COMGROUP                       M$DO
     M$LO                                  M$ME                                  M$NODE
     M$SI                                  M$MAIL_FILE_NUM                       M$MAIL_CENTRAL_NUM
     M$MAIL_GLOBAL_NUM                     M$WORK_NUM                            M$MAIL_COMGROUP_NUM
     M$DO_NUM                              M$ME_NUM                              M$LO_NUM
     M$SI_NUM                              M$NODE_NUM                       r    B$JIT$
r    B$TCB$                                VM_MAIL_ACCT                          VM_NAME_MAP_NAME
     ERRMSG_FID                            VM_SEND_FILE_NAME                     VM_FORWARD_FILE_NAME
     VM_FORWARD_ENCL_NAME                  VM_FORWARD_FILE_PASS                  VM_MAILCG_NAME
     VM_SITENAME                           VM_MAILCG_SETSTA                 r    B$SR_NON_BLANK$
     M$EDIT                                M$ENCL                                M$APND
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:120  
     SEND_NODES                            PRIVILEGED_NODES                      SEND_CMD
     CMD_TO                                CMD_SUBJECT                           CMD_BODY
     CMD_RTO                               CMD_REF                               CMD_COPY
     CMD_BC                                CMD_DEFER                             CMD_SIGNED
     OPTION_NODES                          GATEWAY                               VN_TO_
     VN_REPLY_TO                           VN_SUBJECT                            VN_REFERENCE
     VN_COPY                               VN_BLIND_COPY                         VN_FCOPY
     VN_RR                                 VN_DEFER                              VN_SIGNED
     VN_BROADCAST                          VN_DR                                 VN_YES_CHAR
     VN_NO_CHAR                            VN_OPTIONS                            VN_BODY
     VN_BODY2                         r    E_CMD_TO_PROMPT                  r    E_CMD_SUBJECT_PROMPT
r    E_CMD_RTO_PROMPT                 r    E_CMD_REF_PROMPT                 r    E_CMD_COPY_PROMPT
r    E_CMD_BC_PROMPT                  r    E_CMD_FILE_COPY_PROMPT           r    E_RR_PROMPT
r    E_CMD_DEFER_PROMPT               r    E_CMD_SIGNED_PROMPT              r    E_BROADCAST_PROMPT
r    E_DR_PROMPT                      r    E_NO_CHAR                        r    E_YES_CHAR

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID                                 ROSID
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:121  


        1        1        /*M* VNS$SEND Mail sending main program  */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMC,PLM=5,IND=5,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
        8        8
        9        9        /*P* NAME: VNS$SEND
       10       10             DESCRIPTION: This module performs the message sending functions
       11       11                       for the mail system. It gives the user the ablity to
       12       12                       send messages from files or interactively.
       13       13                                                                            */
       14       14        VNS$SEND: PROC MAIN;

     14 16 000000   000000 700200 xent  VNS$SEND     TSX0  ! X66_MAUTO
        16 000001   000464 000000                    ZERO    308,0

       15       15
       16       16          %INCLUDE B$JIT;
       17      619          %INCLUDE B$TABLES_C;
       18      727          %INCLUDE B_ERRORS_C;
       19     1854          %INCLUDE B_SEGIDS_C;
       20     2393          %INCLUDE CP_6;
       21     7952          %INCLUDE CP_6_SUBS;
       22     8492          %INCLUDE VM_MACRO_C;
       23     9760          %INCLUDE VN_SUBS_C;
       24     9888          %INCLUDE VO_SUBS_C;
       25     9939          %INCLUDE VM_PERR_C;
       26    10234          %INCLUDE VM_DATA_R;
       27    10665          %INCLUDE XU_PERR_C;
       28    10856          %INCLUDE XU_MACRO_C;
       29    13962        %INCLUDE XU_SUBS_C;
       30    14054          %INCLUDE XU_FORMAT_C;
       31    14216          %INCLUDE XUE_MACRO_C;
       32    14960          %INCLUDE XUH_MACRO_C;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:122  
       33    15044          %INCLUDE XUM_MACRO_C;
       34    15071          %INCLUDE XUR_ENTRY;
       35    15103
       36    15104          %B$SR_NON_BLANK (NAME=NON_BLANK);
       37    15108          %B$TCB (STCLASS="BASED(B$TCB$)");
       38    15111          %B$ALT;
       39    15119          %PARSE$OUT (NAME=P$B,STCLASS="BASED(BLK$)");
       40    15164          %PARSE$SYM (NAME=P$S,STCLASS="BASED(BLK$)");
       41    15202          %P_PCB (STCLASS=STATIC);
       42    15401          %XUE_ENTRIES;
       43    15425
       44    15426          %XUR_INIT( MOREMEM     = VMA$MOREMEM,
       45    15427                     PCB         = P_PCB,
       46    15428                     PREPROCESS  = YES,
       47    15429                     COMMANDS    = NO,  /* changed to YES at Options prompt */
       48    15430                     PRE_EXEC    = VNS$PRE_EXEC,
       49    15431                     POST_EXEC   = VNS$POST_EXEC,
       50    15432                     INHIBIT_END = YES,
       51    15433                     SYNTAX      = YES,
       52    15434                     SPELLING    = YES,
       53    15435                     DONT_STRIP_PROMPT = YES);
       54    15534
       55    15535          %F$DCB;
       56    15592    1   dcl BSD     sbin based;
       57    15593        /***** Dcbs *****/
       58    15594    1   DCL M$EDIT DCB;
       59    15595    1   DCL M$EDIT_NUM UBIN CONSTANT INIT(DCBNUM(M$EDIT));
       60    15596    1   DCL M$ENCL DCB;
       61    15597    1   DCL M$ENCL_NUM UBIN CONSTANT INIT(DCBNUM(M$ENCL));
       62    15598    1   DCL M$APND DCB;
       63    15599    1   DCL M$APND_NUM UBIN CONSTANT INIT(DCBNUM(M$APND));
       64    15600        /***** Parse nodes *****/
       65    15601    1   DCL SEND_NODES PTR SYMREF;
       66    15602    1   DCL PRIVILEGED_NODES PTR SYMREF;
       67    15603    1   DCL SEND_CMD PTR SYMREF;
       68    15604    1   DCL CMD_TO PTR SYMREF;
       69    15605    1   DCL CMD_SUBJECT PTR SYMREF;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:123  
       70    15606    1   DCL CMD_BODY PTR SYMREF;
       71    15607    1   DCL CMD_RTO PTR SYMREF;
       72    15608    1   DCL CMD_REF PTR SYMREF;
       73    15609    1   DCL CMD_COPY PTR SYMREF;
       74    15610    1   DCL CMD_BC PTR SYMREF;
       75    15611    1   DCL CMD_DEFER PTR SYMREF;
       76    15612    1   DCL CMD_SIGNED PTR SYMREF;
       77    15613    1   DCL OPTION_NODES PTR SYMREF;
       78    15614        /*
       79    15615            Addresses of nodes for the parser.  Ordinarily these will have the
       80    15616            the values of the SYMREFs above.  But, with some imaginative
       81    15617            patching using PATCH_MAIL_NODES, these pointers can obtain values
       82    15618            for user modified nodes (ie, foreign language nodes).
       83    15619        */
       84    15620    1   DCL SEND_NODES$ PTR;
       85    15621    1   DCL SEND_CMD$ PTR;
       86    15622    1   DCL CMD_TO$ PTR;
       87    15623    1   DCL CMD_SUBJECT$ PTR;
       88    15624    1   DCL CMD_BODY$ PTR;
       89    15625    1   DCL CMD_RTO$ PTR;
       90    15626    1   DCL CMD_REF$ PTR;
       91    15627    1   DCL CMD_COPY$ PTR;
       92    15628    1   DCL CMD_BC$ PTR;
       93    15629    1   DCL CMD_DEFER$ PTR;
       94    15630    1   DCL CMD_SIGNED$ PTR;
       95    15631    1   DCL OPTION_NODES$ PTR;
       96    15632
       97    15633        /***** External routines *****/
       98    15634    1   DCL VNS$BREAK ENTRY ASYNC;
       99    15635    1   DCL VNS$BREAK_DISABLE ENTRY;
      100    15636    1   DCL VNS$BREAK_ENABLE ENTRY;
      101    15637    1   DCL VNS$XCON ENTRY ASYNC ALTRET;
      102    15638    1   DCL X$HELP ENTRY(1) ALTRET;
      103    15639    1   DCL VMA$ADDRESS ENTRY(5) ALTRET;
      104    15640    1   DCL VMA$ENLARGE_SEGMENT ENTRY(2) ALTRET;
      105    15641    1   DCL VMA$GET_SITE_NAME ENTRY(4) ALTRET;
      106    15642    1   DCL VMA$MOREMEM ENTRY(3) ALTRET;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:124  
      107    15643    1   DCL VMA$ERRMSG ENTRY(5);
      108    15644    1   DCL VMA$DEL_ADD_RECORD ENTRY(4) ALTRET;
      109    15645    1   DCL VMA$PUT_ADD_RECORD ENTRY(4) ALTRET;
      110    15646    1   DCL VMA$GET_ADD_RECORD ENTRY(4) ALTRET;
      111    15647    1   DCL VMA$OPEN_GLOBAL ENTRY(1) ALTRET;
      112    15648    1   DCL VMA$OPEN_SRCH_LIST ENTRY(1) ALTRET;
      113    15649    1   DCL VMB$USE_SPECIFIED ENTRY(7) ALTRET;
      114    15650    1   DCL VMB$USE_DEFAULT ENTRY(7) ALTRET;
      115    15651    1   dcl VMB$TESTREG entry(1) altret;
      116    15652    1   DCL VMC$DOSEND ENTRY(2) ALTRET;
      117    15653    1   DCL VMD$DI_MESSAGE ENTRY (6) ALTRET;
      118    15654    1   DCL VMD$DI_BLIND ENTRY(2);
      119    15655    1   DCL VMD$DI_COPY ENTRY(2);
      120    15656    1   DCL VMD$DI_REFERENCE ENTRY(2);
      121    15657    1   DCL VMD$DI_SUBJECT ENTRY(2);
      122    15658    1   DCL VMD$DI_TO ENTRY(2);
      123    15659    1   DCL VMD$DI_SIGNED ENTRY(2);
      124    15660    1   DCL VMD$DI_FCOPY ENTRY(2);
      125    15661    1   DCL VMD$DI_RR ENTRY(2);
      126    15662    1   DCL VMD$DI_RTO ENTRY(2);
      127    15663    1   DCL VMD$DI_DEFER ENTRY(2);
      128    15664    1   DCL VMD$DI_OPTS ENTRY(2);
      129    15665    1   DCL VMD$DI_BROADCAST ENTRY(2);
      130    15666    1   DCL VMD$DI_DR ENTRY(2);
      131    15667    1   DCL VMD$WRITE_BUF ENTRY(1);
      132    15668    1   DCL VMD$GET_HEADER ENTRY(2) ALTRET;
      133    15669    1   DCL VMD$PUT_HEADER ENTRY(2) ALTRET;
      134    15670    1   DCL VMD$DEL_BODY ENTRY(7) ALTRET;
      135    15671    1   DCL VMD$DEL_HEADER ENTRY(2) ALTRET;
      136    15672    1   DCL VMD$GET_PROFILE ENTRY(1) ALTRET;
      137    15673    1   DCL VMD$PUT_BODY ENTRY(7) ALTRET;
      138    15674    1   DCL VMD$PUT_TRACE ENTRY(7) ALTRET;
      139    15675    1   DCL VMD$DEL_TRACE ENTRY(7) ALTRET;
      140    15676    1   DCL VMD$PUT_SITE ENTRY (2) ALTRET;
      141    15677    1   DCL VMD$GET_ENCL ENTRY(9) ALTRET;
      142    15678    1   DCL VMD$PUT_ENCL ENTRY(9) ALTRET;
      143    15679    1   DCL VMD$DEL_ENCL ENTRY(9) ALTRET;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:125  
      144    15680    1   DCL VMA$OPEN_ENCL_SEGS ENTRY ALTRET;
      145    15681    1   DCL VMD$GETNODES  entry(4);
      146    15682        %INIT_STR(DODCL=YES);
      147    15705    1   DCL VMF$FROM ENTRY(1) ALTRET;
      148    15706    1   DCL VMF$MAKE_ADDRESS1 ENTRY(2);
      149    15707    1   DCL VMF$MAKE_ADDRESS1SITE ENTRY(2);
      150    15708    1   DCL VMM$EDIT_MESSAGE_OUT ENTRY(5) ALTRET;
      151    15709    1   DCL VMX$OCTBIN ENTRY(2);
      152    15710    1   DCL X$ALLOCATE ENTRY(1) ALTRET;
      153    15711    1   DCL X$DEALLOCATE ENTRY(1) ALTRET;
      154    15712    1   DCL VNS$PRE_EXEC ENTRY(2);
      155    15713    1   DCL VNS$POST_EXEC ENTRY(2);
      156    15714        /***** Flags *****/
      157    15715    1   DCL DID_SEND BIT(1);
      158    15716    1   DCL PROMPT_OPTIONS BIT(1);
      159    15717    1   DCL ERR_FLAG BIT(1);
      160    15718    1   DCL ID_ASSIGNED BIT(1);
      161    15719    1   DCL PROC_OPTIONS BIT(1);
      162    15720    1   DCL SI_FILE BIT(1);
      163    15721    1   DCL TESTMODE BIT(1) STATIC INIT(%NO#);
      164    15722    1   DCL PREPROCESS_OPT BIT(1);
      165    15723    1   DCL PREPROCESS BIT(1);
      166    15724        /***** Misc variables *****/
      167    15725    1   DCL CMD_DCB UBIN STATIC INIT(DCBNUM(M$SI));
      168    15726    1   DCL SEED UBIN WORD STATIC INIT(0);
      169    15727    1   DCL 1 WORK_DATE STATIC,
      170    15728    1         2 MONTH CHAR (2) CALIGNED,
      171    15729    1         2 * CHAR(1) CALIGNED INIT('/'),
      172    15730    1         2 DAY CHAR(2) CALIGNED,
      173    15731    1         2 * CHAR(1) CALIGNED INIT('/'),
      174    15732    1         2 YEAR CHAR(2) CALIGNED;
      175    15733    1   DCL WORK_DATEC REDEF WORK_DATE CHAR(8);
      176    15734    1   DCL 1 WORK_TIME STATIC,
      177    15735    1         2 HOUR CHAR(2) CALIGNED,
      178    15736    1         2 * CHAR(1) CALIGNED INIT(':'),
      179    15737    1         2 MINUTE CHAR(2) CALIGNED;
      180    15738    1   DCL WORK_TIMEC REDEF WORK_TIME CHAR(5);
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:126  
      181    15739    1   DCL TIME_INIT CONSTANT CHAR(5) INIT('00:00');
      182    15740    1   DCL VNS_REMEMBER(0:1) REMEMBER STATIC SYMDEF;
      183    15741            %EQU BREAK_EXIT = 0;
      184    15742            %EQU BREAK_REPEAT = 1;
      185    15743    1   DCL VNS_BREAK_TYPE SBIN STATIC SYMDEF INIT(%BREAK_EXIT);
      186    15744    1   DCL WORK_UTS UBIN WORD STATIC;
      187    15745    1   DCL ANSI_TIME CHAR (8) STATIC;
      188    15746    1   DCL ANSI_DATE CHAR (6) STATIC;
      189    15747    1   DCL INVOKE_EDITOR$ STATIC PTR INIT(ADDR(NIL));
      190    15748    1   DCL DEFAULT_EDITOR$ STATIC PTR INIT(ADDR(DEFAULT_EDITOR));
      191    15749          %VLP_NAME (FPTN=DEFAULT_EDITOR,STCLASS=CONSTANT,NAME='EDIT');
      192    15776    1   DCL P_PCB$TEXT CHAR(P_PCB.NCHARS) UNAL BASED(P_PCB.TEXT$);
      193    15777    1   DCL OUT$ PTR;
      194    15778          %VLP_ERRCODE (FPTN=OUTERR,STCLASS="REDEF OUT$");
      195    15823    1   DCL ENCL$ PTR STATIC INIT(ADDR(NIL));
      196    15824    1   DCL ENCLREC$ PTR STATIC INIT(ADDR(NIL));
      197    15825    1   DCL BLK$ PTR;
      198    15826    1   DCL TMP$ PTR;
      199    15827        %POINTER (NAME=TMPR$,STCLASS="REDEF TMP$");
      200    15832    1   DCL CMD_BUF CHAR(300) STATIC;
      201    15833          %VLP_NAME (FPTN=USER_NAME,LEN=256,STCLASS=AUTO);
      202    15860    1   DCL SIZE SBIN WORD;
      203    15861    1   DCL IAM CHAR(8) CONSTANT INIT('*IAM');
      204    15862    1   DCL I SBIN WORD;
      205    15863    1   DCL J SBIN WORD;
      206    15864    1   DCL ENTRY_REASON SBIN WORD;
      207    15865    1   DCL GATEWAY BIT (1) SYMREF;
      208    15866    1   DCL DUMMY SBIN WORD AUTO;
      209    15867        /***** Prompt strings *****/
      210    15868        %VLP_NAMEV( FPTN=VN_TO_,        STCLASS="SYMREF");
      211    15875        %VLP_NAMEV( FPTN=VN_REPLY_TO,   STCLASS="SYMREF");
      212    15882        %VLP_NAMEV( FPTN=VN_SUBJECT,    STCLASS="SYMREF");
      213    15889        %VLP_NAMEV( FPTN=VN_REFERENCE,  STCLASS="SYMREF");
      214    15896        %VLP_NAMEV( FPTN=VN_COPY,       STCLASS="SYMREF");
      215    15903        %VLP_NAMEV( FPTN=VN_BLIND_COPY, STCLASS="SYMREF");
      216    15910        %VLP_NAMEV( FPTN=VN_FCOPY,      STCLASS="SYMREF");
      217    15917        %VLP_NAMEV( FPTN=VN_RR,         STCLASS="SYMREF");
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:127  
      218    15924        %VLP_NAMEV( FPTN=VN_DEFER,      STCLASS="SYMREF");
      219    15931        %VLP_NAMEV( FPTN=VN_SIGNED,     STCLASS="SYMREF");
      220    15938        %VLP_NAMEV( FPTN=VN_BROADCAST,  STCLASS="SYMREF");
      221    15945        %VLP_NAMEV( FPTN=VN_DR,         STCLASS="SYMREF");
      222    15952        %VLP_NAMEV( FPTN=VN_YES_CHAR,   STCLASS="SYMREF");
      223    15959        %VLP_NAMEV( FPTN=VN_NO_CHAR,    STCLASS="SYMREF");
      224    15966        %VLP_NAMEV( FPTN=VN_OPTIONS,    STCLASS="SYMREF");
      225    15973        %VLP_NAMEV( FPTN=VN_BODY,       STCLASS="SYMREF");
      226    15980        %VLP_NAMEV( FPTN=VN_BODY2,      STCLASS="SYMREF");
      227    15987
      228    15988        %VLP_ERRCODE( FPTN=E_CMD_TO_PROMPT,      STCLASS="SYMREF READONLY");
      229    16033               %VLP_ERRCODE( FPTN=E_CMD_SUBJECT_PROMPT, STCLASS="SYMREF READONLY");
      230    16078               %VLP_ERRCODE( FPTN=E_CMD_RTO_PROMPT, STCLASS="SYMREF READONLY");
      231    16123               %VLP_ERRCODE( FPTN=E_CMD_REF_PROMPT, STCLASS="SYMREF READONLY");
      232    16168               %VLP_ERRCODE( FPTN=E_CMD_COPY_PROMPT, STCLASS="SYMREF READONLY");
      233    16213               %VLP_ERRCODE( FPTN=E_CMD_BC_PROMPT, STCLASS="SYMREF READONLY");
      234    16258               %VLP_ERRCODE( FPTN=E_CMD_FILE_COPY_PROMPT,STCLASS="SYMREF READONLY");
      235    16303               %VLP_ERRCODE( FPTN=E_RR_PROMPT,   STCLASS="SYMREF READONLY");
      236    16348               %VLP_ERRCODE( FPTN=E_CMD_DEFER_PROMPT, STCLASS="SYMREF READONLY");
      237    16393               %VLP_ERRCODE( FPTN=E_CMD_SIGNED_PROMPT, STCLASS="SYMREF READONLY");
      238    16438               %VLP_ERRCODE( FPTN=E_BROADCAST_PROMPT, STCLASS="SYMREF READONLY");
      239    16483               %VLP_ERRCODE( FPTN=E_DR_PROMPT,   STCLASS="SYMREF READONLY");
      240    16528               %VLP_ERRCODE( FPTN=E_NO_CHAR,     STCLASS="SYMREF READONLY");
      241    16573               %VLP_ERRCODE( FPTN=E_YES_CHAR,    STCLASS="SYMREF READONLY");
      242    16618               %VLP_ERRCODE( FPTN=E_OPTIONS_PROMPT, FCG="VN",MID=S, STCLASS=
             16618                   "CONSTANT SYMDEF",
      243    16619               ERR#=%E$OPTIONS_PROMPT);
      244    16664        /*E* ERROR: VNS-E$OPTIONS_PROMPT-0
      245    16665             MESSAGE:Options:
      246    16666        */
      247    16667               %VLP_ERRCODE( FPTN=E_CMD_BODY_PROMPT, FCG="VN",MID=S, STCLASS=
             16667                   "CONSTANT SYMDEF",
      248    16668               ERR#=%E$CMD_BODY_PROMPT );
      249    16713        /*E* ERROR: VNS-E$CMD_BODY_PROMPT-0
      250    16714             MESSAGE:Body:
      251    16715        */
      252    16716               %VLP_ERRCODE( FPTN=E_CMD_BODY2_PROMPT, FCG="VN",MID=S, STCLASS=
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:128  
             16716                   "CONSTANT SYMDEF",
      253    16717               ERR#=%E$CMD_BODY2_PROMPT );
      254    16762        /*E* ERROR: VNS-E$CMD_BODY2_PROMPT-0
      255    16763             MESSAGE:&&&&&
      256    16764        */
      257    16765
      258    16766    1   dcl 1  IBEX_PROMPT    constant,
      259    16767    1         2 SIZ        ubin(9) caligned init(1),
      260    16768    1         2 TEXT       char(1)          init('!');
      261    16769
      262    16770
      263    16771        %EJECT;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:129  
      264    16772        /***** Mail macros *****/
      265    16773        %SET LISTMAC='1'B;
      266    16774        %SET LISTSUB='1'B;
      267    16775        %SET LISTEXP='1'B;
      268    16776        /*
      269    16777            The following allows multiple parse nodes
      270    16778            in different languages.  When initializing the macro follow this
      271    16779            convention:  Nn=nodename   where n is the EQU value of PN_nodename
      272    16780            found in the file VM_MACRO_C.
      273    16781        */
      274    16782        %PARSE_NODES (NAME     =  VN_DEFAULT_NODES,
      275    16783                      STCLASS  =  "CONSTANT SYMDEF",
      276    16784                      N13      =  SEND_NODES,
      277    16785                      N14      =  PRIVILEGED_NODES,
      278    16786                      N15      =  SEND_CMD,
      279    16787                      N16      =  CMD_TO,
      280    16788                      N17      =  CMD_SUBJECT,
      281    16789                      N18      =  CMD_BODY,
      282    16790                      N19      =  CMD_RTO,
      283    16791                      N20      =  CMD_REF,
      284    16792                      N21      =  CMD_COPY,
      285    16793                      N22      =  CMD_BC,
      286    16794                      N23      =  CMD_DEFER,
      287    16795                      N24      =  CMD_SIGNED,
      288    16796                      N25      =  OPTION_NODES );
             16797        %LSET LISTDIR='0'B;
             16819    1   dcl  VN_DEFAULT_NODES (0:29) ptr CONSTANT SYMDEF aligned INIT(
             16820    1                       ADDR(NIL),  ADDR(NIL),   ADDR(NIL),   ADDR(NIL),
             16821    1                       ADDR(NIL),  ADDR(NIL),   ADDR(NIL),   ADDR(NIL),
             16822    1                       ADDR(NIL),  ADDR(NIL),   ADDR(NIL),  ADDR(NIL),
             16823    1                       ADDR(NIL), ADDR(SEND_NODES),  ADDR(PRIVILEGED_NODES),  ADDR(
             16823                                SEND_CMD),
             16824    1                       ADDR(CMD_TO), ADDR(CMD_SUBJECT),  ADDR(CMD_BODY), ADDR(CMD_RTO)
             16824                                ,
             16825    1                       ADDR(CMD_REF), ADDR(CMD_COPY),  ADDR(CMD_BC),  ADDR(CMD_DEFER),
             16826    1                       ADDR(CMD_SIGNED), ADDR(OPTION_NODES),  ADDR(NIL),  ADDR(NIL),
             16827    1                       ADDR(NIL), ADDR(NIL)                          )
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:130  
             16828    1                       /**/;
      289    16831
      290    16832        %NATL_PAIRS(  NAME     =  VN_NATL_NODES,
      291    16833                      STCLASS  =  "CONSTANT SYMDEF",
      292    16834                      NATL_CHARS= "' '*0",
      293    16835                      NODES$   =  "addr(VN_DEFAULT_NODES),addr(nil)*0"   );
             16836        %LSET LISTDIR='0'B;
             16848    1   dcl 1 VN_NATL_NODES  CONSTANT SYMDEF aligned,
             16849    1         2 NATLS char(5) aligned INIT(' '*0)/**/,
             16850    1        2 PARSE_NODES$(0:4) ptr aligned INIT(addr(VN_DEFAULT_NODES),addr(nil)*0 )/**/;
      294    16853
      295    16854        %PARSE_NODES( NAME     =  NODES_TO_USE,
      296    16855                      STCLASS  =  "based(NODES$)"   );
             16856        %LSET LISTDIR='0'B;
             16878    1   dcl  NODES_TO_USE (0:29) ptr based(NODES$) aligned /*(
             16879    1                       ADDR(NIL),  ADDR(NIL),   ADDR(NIL),   ADDR(NIL),
             16880    1                       ADDR(NIL),  ADDR(NIL),   ADDR(NIL),   ADDR(NIL),
             16881    1                       ADDR(NIL),  ADDR(NIL),   ADDR(NIL),  ADDR(NIL),
             16882    1                       ADDR(NIL), ADDR(NIL),  ADDR(NIL),  ADDR(NIL),
             16883    1                       ADDR(NIL), ADDR(NIL),  ADDR(NIL),  ADDR(NIL),
             16884    1                       ADDR(NIL), ADDR(NIL),  ADDR(NIL),  ADDR(NIL),
             16885    1                       ADDR(NIL), ADDR(NIL),  ADDR(NIL),  ADDR(NIL),
             16886    1                       ADDR(NIL), ADDR(NIL)                          )
             16887    1                       /**/;
      297    16890
      298    16891    1   dcl  NODES$            ptr;
      299    16892
      300    16893    1   dcl 1  VN_NODENAMES   constant symdef
      301    16894
      302    16895             %BUILD_NODENAMES( N=13, NAME=SEND_NODES);
             16896        %lset LISTDIR = '0'B;
             16900    1        ,2 * ubin(18) caligned init(13)
             16901    1          ,2 * ubin(9) caligned init(10)
             16902    1          ,2 * char(10) caligned init('SEND_NODES')
      303    16907             %BUILD_NODENAMES( N=14, NAME=PRIVILEGED_NODES);
             16908        %lset LISTDIR = '0'B;
             16912    1        ,2 * ubin(18) caligned init(14)
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:131  
             16913    1          ,2 * ubin(9) caligned init(16)
             16914    1          ,2 * char(16) caligned init('PRIVILEGED_NODES')
      304    16919             %BUILD_NODENAMES( N=15, NAME=SEND_CMD);
             16920        %lset LISTDIR = '0'B;
             16924    1        ,2 * ubin(18) caligned init(15)
             16925    1          ,2 * ubin(9) caligned init(8)
             16926    1          ,2 * char(8) caligned init('SEND_CMD')
      305    16931             %BUILD_NODENAMES( N=16, NAME=CMD_TO);
             16932        %lset LISTDIR = '0'B;
             16936    1        ,2 * ubin(18) caligned init(16)
             16937    1          ,2 * ubin(9) caligned init(6)
             16938    1          ,2 * char(6) caligned init('CMD_TO')
      306    16943             %BUILD_NODENAMES( N=17, NAME=CMD_SUBJECT);
             16944        %lset LISTDIR = '0'B;
             16948    1        ,2 * ubin(18) caligned init(17)
             16949    1          ,2 * ubin(9) caligned init(11)
             16950    1          ,2 * char(11) caligned init('CMD_SUBJECT')
      307    16955             %BUILD_NODENAMES( N=18, NAME=CMD_BODY);
             16956        %lset LISTDIR = '0'B;
             16960    1        ,2 * ubin(18) caligned init(18)
             16961    1          ,2 * ubin(9) caligned init(8)
             16962    1          ,2 * char(8) caligned init('CMD_BODY')
      308    16967             %BUILD_NODENAMES( N=19, NAME=CMD_RTO);
             16968        %lset LISTDIR = '0'B;
             16972    1        ,2 * ubin(18) caligned init(19)
             16973    1          ,2 * ubin(9) caligned init(7)
             16974    1          ,2 * char(7) caligned init('CMD_RTO')
      309    16979             %BUILD_NODENAMES( N=20, NAME=CMD_REF);
             16980        %lset LISTDIR = '0'B;
             16984    1        ,2 * ubin(18) caligned init(20)
             16985    1          ,2 * ubin(9) caligned init(7)
             16986    1          ,2 * char(7) caligned init('CMD_REF')
      310    16991             %BUILD_NODENAMES( N=21, NAME=CMD_COPY);
             16992        %lset LISTDIR = '0'B;
             16996    1        ,2 * ubin(18) caligned init(21)
             16997    1          ,2 * ubin(9) caligned init(8)
             16998    1          ,2 * char(8) caligned init('CMD_COPY')
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:132  
      311    17003             %BUILD_NODENAMES( N=22, NAME=CMD_BC);
             17004        %lset LISTDIR = '0'B;
             17008    1        ,2 * ubin(18) caligned init(22)
             17009    1          ,2 * ubin(9) caligned init(6)
             17010    1          ,2 * char(6) caligned init('CMD_BC')
      312    17015             %BUILD_NODENAMES( N=23, NAME=CMD_DEFER);
             17016        %lset LISTDIR = '0'B;
             17020    1        ,2 * ubin(18) caligned init(23)
             17021    1          ,2 * ubin(9) caligned init(9)
             17022    1          ,2 * char(9) caligned init('CMD_DEFER')
      313    17027             %BUILD_NODENAMES( N=24, NAME=CMD_SIGNED);
             17028        %lset LISTDIR = '0'B;
             17032    1        ,2 * ubin(18) caligned init(24)
             17033    1          ,2 * ubin(9) caligned init(10)
             17034    1          ,2 * char(10) caligned init('CMD_SIGNED')
      314    17039             %BUILD_NODENAMES( N=25, NAME=OPTION_NODES);
             17040        %lset LISTDIR = '0'B;
             17044    1        ,2 * ubin(18) caligned init(25)
             17045    1          ,2 * ubin(9) caligned init(12)
             17046    1          ,2 * char(12) caligned init('OPTION_NODES')
      315    17051             %BUILD_NODENAMES( DONE=YES );
             17052        %lset LISTDIR = '0'B;
             17060    1          ,2 * ubin(27) caligned init(0);
      316    17063
      317    17064
      318    17065        %VLP_NAME(FPTN=VN_NODEFID,NAME='VM_NODES',STCLASS="CONSTANT SYMDEF");
             17066        %LSET LISTDIR='0'B;
             17090    1   DCL 1 VN_NODEFID CONSTANT SYMDEF,2 L# UBIN(9)INIT(8)/**/ UNAL,2 NAME# CHAR(0)INIT(
             17090            'VM_NODES')/**/ ;
      319    17092
      320    17093          %VM_ADDTYPES;
             17094        %EQU    VM_ADD_RESOLVED = 1;   /* Resolved address entry */
             17095        %EQU    VM_ADD_UNRESOLVED = 2; /* Unresolved address entry */
      321    17097
      322    17098          %VM_BODYTYPES;
             17099        %EQU    VM_BODY_TEXT = 1;   /* Text record */
             17100        %EQU    VM_BODY_GRAPHICS = 2;   /* Graphics data. RESERVED FOR FUTURE USE */
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:133  
             17101        %EQU    VM_BODY_ENCODED_ERR = 3; /* Encoded error/time/textc information */
             17102        %EQU    VM_BODY_BINARY_ENCL = 4; /* Binary enclosure record */
      323    17104
      324    17105          %VM_KEYTYPES;
             17106        %EQU    VM_TYPE_PRO   = 1;      /* The Profile record */
             17107        %EQU    VM_TYPE_ACC   = 2;      /* The access-control record */
             17108        %EQU    VM_TYPE_HEAD  = 8;      /* The Header record */
             17109        %EQU    VM_TYPE_DELIV = 9;      /* The delivery records */
             17110        %EQU    VM_TYPE_SITE  = 10;     /* SITE INFORMATION */
             17111        %EQU    VM_TYPE_TO    = 16;     /* The original TO record */
             17112        %EQU    VM_TYPE_ITO   = 17;     /* The intersystem TO record */
             17113        %EQU    VM_TYPE_C     = 24;     /* The original Copies record */
             17114        %EQU    VM_TYPE_IC    = 25;     /* The intersystem Copies record */
             17115        %EQU    VM_TYPE_BC    = 32;     /* The original Blind Copies record */
             17116        %EQU    VM_TYPE_IBC   = 33;     /* The intersystem Blind Copies record */
             17117        %EQU    VM_TYPE_RTO   = 36;     /* The Reply To record */
             17118        %EQU    VM_TYPE_TRACE = 44;     /* The message trace record(s) */
             17119        %EQU    VM_TYPE_BODY  = 48;     /* The message body record(s) */
             17120        %EQU    VM_TYPE_LIST  = 60;     /* Definition for a LIST of addresses */
             17121        %EQU    VM_TYPE_USER  = 80;     /* Definition for a USER */
             17122        %EQU    VM_TYPE_ID    = 90;     /* The unique-message-ID cross reference */
             17123        %EQU    VM_TYPE_ENCL  = 100;    /* The binary enclosure context record*/
             17124        %EQU    VM_TYPE_ENCL_INIT = 101;/* To initialize the first enclosure record */
      325    17126
      326    17127          %VM_PROFILE;
             17128        %LSET LISTDIR='0'B;
             17137    1   DCL 1 VM_PROFILE BASED(VM_PROFILE$),
             17138    1         2 VERSION CHAR(3) /*('B00')/**/,
             17139                               /* What version of MAIL last wrote this file */
             17140    1         2 OPT,
             17141    1           3 HEADERS BIT(1) UNAL /*('0'B)/**/,
             17142                               /* Set if headers are desired on COPY, DELETE, MOVE, etc. */
             17143    1           3 FCOPY BIT(1) UNAL /*('0'B)/**/,
             17144                               /* Set if FILE_FOLDER is to be used for filing msgs */
             17145    1           3 RETURN_RECEIPT BIT(1) UNAL /*('0'B)/**/,
             17146                               /* Set if return receipt is desired for all messages */
             17147    1           3 RENUMBER BIT(1) UNAL /*('0'B)/**/,
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:134  
             17148                               /* Set if messages are to be renumbered at exit time */
             17149    1           3 PAGE BIT(1) UNAL /*('0'B)/**/,
             17150                               /* Set if messages are to be displayed on seperate pages */
             17151    1           3 AUTO_EDIT BIT(1) UNAL /*('0'B)/**/,
             17152                               /* Set if Editor is to be called to create *BODY */
             17153    1           3 DISPTRACE BIT(1) UNAL /*('1'B)/**/,
             17154                             /* Display TRACE records in mailgrams */
             17155    1           3 COMBINE BIT(1) UNAL /*('0'B)/**/,
             17156                             /* Combine DELIVs, ACKs, and ERRs with file copy */
             17157    1           3 DELIVERY_RECEIPT BIT (1) UNAL /*('0'B)/**/,
             17158                             /* Request delivery receipt */
             17159    1           3 ANS_RECEIVERS BIT(1) UNAL /*('0'B)/**/,
             17160                             /* ANS RECEIVERS by default */
             17161    1           3 PREPROCESS BIT(1) UNAL /*('0'B)/**/,
             17162                             /* Do preprocessing in SEND by default */
             17163    1           3 EXT_ADDR_DISP BIT(1) UNAL /*('0'B)/**/,
             17164                             /* Display long TO: C: and BC fields */
             17165    1           3 DEL_ON_DETACH BIT(1) UNAL /*('0'B)/**/,
             17166                             /* Delete enclosures upon DETACH */
             17167    1           3 RESERVED BIT(32) UNAL /*('0'B)/**/,
             17168    1         2 PROFILE_SIZE UBIN WORD /*(0)/**/,
             17169                               /* How many words in this PROFILE */
             17170    1         2 FREE$ PTR /*(ADDR(NIL))/**/,
             17171                               /* Head of FREE BLOCKS CHAIN in WORK_AREA */
             17172    1         2 NEXT$ PTR /*(ADDR(VM_PROFILE.WORK_AREA))/**/,
             17173                               /* Ptr to next avail. word in WORK_AREA */
             17174    1         2 NUM_MESSAGES UBIN WORD /*(0)/**/,
             17175                               /* Current number of messages in file */
             17176    1         2 NUM_NEW_MESSAGES UBIN WORD /*(0)/**/,
             17177                               /* Number of new messages in file */
             17178    1         2 NUM_DEL_MESSAGES UBIN WORD /*(0)/**/,
             17179                               /* Number of deleted messages in file */
             17180    1         2 NUM_MOLD_MESSAGES UBIN WORD /*(0)/**/,
             17181                               /* Number of marked as old messages in file */
             17182    1         2 HI_MESSAGE_NUMBER UBIN WORD /*(0)/**/,
             17183                               /* Highest message number in this folder */
             17184    1         2 GRANULES UBIN WORD /*(0)/**/,
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:135  
             17185                               /* Max # of granules to be allowed in message file */
             17186    1         2 SETUP,
             17187                               /* First command to be executed upon entry to mail */
             17188    1           3 COUNT UBIN BYTE CALIGNED /*(8)/**/,
             17189    1           3 TEXT CHAR(256) CALIGNED /*('LIST NEW ')/**/,
             17190    1         2 FILE_FOLDER$ PTR /*(ADDR(NIL))/**/,
             17191                            /* Address to be used for storing copies of messages by user */
             17192    1         2 SEARCH_LIST$ (0:8) PTR /*(ADDR(NIL)*0)/**/,
             17193                               /* What folders to search for address resolution */
             17194    1         2 SIGNED$ PTR /*(ADDR(NIL))/**/,
             17195                               /* Who do I claim to be? */
             17196    1         2 NAME_KEY CHAR(20) ALIGNED /*(' ')/**/,
             17197                               /* ACCT||UNAME of owner of this folder */
             17198    1         2 LOW_DEL_NUM UBIN WORD ALIGNED /*(0)/**/,
             17199    1         2 RECS_DELETED UBIN WORD ALIGNED /*(0)/**/,
             17200                       /* Total records deleted since last recopy */
             17201    1         2 HIGH_RECS UBIN WORD ALIGNED /*(0)/**/,
             17202                       /* High water mark of file size since last copy */
             17203    1         2 EDITOR$ PTR /*(ADDR(NIL))/**/,
             17204                       /* Editor to use when editing a message to be sent */
             17205    1         2 REPLY_TO$ PTR /*(ADDR(NIL))/**/,
             17206                       /* Address to be used for replying to messages */
             17207    1         2 NUM_LOST UBIN WORD ALIGNED /*(0)/**/,
             17208                               /* Number of messages lost due to lack of disk space */
             17209    1         2 RESERVED (0:13) UBIN WORD ALIGNED /*(0*0)/**/,
             17210                               /* Reserved for future use */
             17211    1         2 WORK_AREA UBIN WORD;
             17212                               /* Work area used for string space */
      327    17214
      328    17215          %VM_HEADER;
             17216        %LSET LISTDIR='0'B;
             17225    1   DCL 1 VM_HEADER BASED (VM_HEADER$),
             17226    1         2 HEADER_SIZE UBIN WORD /*(0)/**/,
             17227                               /* Number of words in this header */
             17228    1         2 CREATION_DATE UBIN WORD /*(0)/**/,
             17229                               /* Date message created (passed to send) */
             17230    1         2 DELIVERY_DATE UBIN WORD /*(0)/**/,
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:136  
             17231                               /* Date message is to be/was delivered */
             17232    1         2 FIRST_DELIVERY UBIN WORD /*(0)/**/,
             17233                             /* Date/time of MAILMAN's first delivery pass */
             17234    1         2 RESERVED_DATES (0:4) UBIN WORD /*(0*0)/**/,
             17235                               /* Reserved for future use */
             17236    1         2 NUM_RECORDS UBIN WORD /*(0)/**/,
             17237                               /* Number of records in message body */
             17238    1         2 STATUS,
             17239    1           3 ERR BIT(1) UNAL /*('0'B)/**/,
             17240                        /* Set if message is being returned to sender -
             17241                           see HDR.ERROR and HDR.BAD_ADDR */
             17242    1           3 ANSWER BIT(1) UNAL /*('0'B)/**/,
             17243                               /* Set if this is an answer to a received message */
             17244    1           3 ACK BIT(1) UNAL /*('0'B)/**/,
             17245                               /* Set if this is an ack to a received message */
             17246    1           3 DEFER BIT(1) UNAL /*('0'B)/**/,
             17247                               /* Set if deferred message (sent at HDR.DELIVERY_DATE) */
             17248    1           3 RR BIT(1) UNAL /*('0'B)/**/,
             17249                               /* Set if "Return Receipt" requested */
             17250    1           3 CRYPT BIT(1) UNAL /*('0'B)/**/,
             17251                               /* Set if message body is encrypted */
             17252    1           3 OLD BIT(1) UNAL /*('0'B)/**/,
             17253                        /* Set if message is "old" (has at least had
             17254                           header printed in prior session). */
             17255    1           3 MAKE_OLD BIT(1) UNAL /*('0'B)/**/,
             17256                        /* Set if message is to be marked "old" when
             17257                           message file is overwritten. */
             17258    1           3 EXAM BIT(1) UNAL /*('0'B)/**/,
             17259                               /* Set if message has been examined */
             17260    1           3 DEL BIT(1) UNAL /*('0'B)/**/,
             17261                               /* Set if message has been deleted */
             17262    1           3 FCOPY BIT(1) UNAL /*('0'B)/**/,
             17263                               /* Set if message is a FILE COPY */
             17264    1           3 MARK BIT(1) UNAL /*('0'B)/**/,
             17265                               /* Set if message has been MARKed */
             17266    1           3 GRAPHICS BIT(1) UNAL /*('0'B)/**/,
             17267                               /* Set if message contains graphics */
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:137  
             17268    1           3 FORWARDED BIT(1) UNAL /*('0'B)/**/,
             17269                               /* Set if message was result of FORWARD command */
             17270    1           3 ANS_TO BIT(1) UNAL /*('0'B)/**/,
             17271                               /* Used to tell MAILMAN to set RETURN_TO_ORIGIN */
             17272    1           3 DR BIT(1) UNAL /*('0'B)/**/,
             17273                             /* Delivery receipt requested */
             17274    1           3 DELIVERY BIT(1) UNAL /*('0'B)/**/,
             17275                             /* This 'gram is a delivery receipt */
             17276    1           3 BROADCAST BIT(1) UNAL /*('0'B)/**/,
             17277                             /* Broadcast (junk) mail; don't return errors */
             17278    1           3 PRIMARY BIT(1) UNAL /*('0'B)/**/,
             17279                             /* Recipient is on primary TO: list */
             17280    1           3 C BIT(1) UNAL /*('0'B)/**/,
             17281                             /* Recipient is on C: list */
             17282    1           3 BC BIT(1) UNAL /*('0'B)/**/,
             17283                             /* Recipient is on BC: list */
             17284    1           3 THINGED BIT(1) UNAL /*('0'B)/**/,
             17285                             /* Thing has already [attempted to] sched this */
             17286    1           3 RRACK BIT(1) UNAL /*('0'B)/**/,
             17287                             /* Set if this is a rr ack to a displayed message */
             17288    1           3 PRE_B00 BIT(1) UNAL /*('0'B)/**/,
             17289                             /* Set when a pre-B00 message is read */
             17290    1           3 ENCL BIT(1) UNAL /*('0'B)/**/,
             17291                             /* This mailgram has binary enclosures */
             17292    1           3 RESERVED BIT(11) UNAL /*('0'B)/**/,
             17293    1         2 MISC ALIGNED,
             17294    1           3 PHASE UBIN (4) UNAL /*(0)/**/,
             17295                             /* Current phase of delivery */
             17296    1           3 * UBIN (32) UNAL /*(0)/**/,
             17297                               /* Reserved for future use */
             17298    1         2 ERROR,
             17299                               /* Reason message was returned to sender */
             17300    1           3 FCG BIT(12) UNAL /*('0'B)/**/,
             17301    1           3 MID BIT(6) UNAL /*('0'B)/**/,
             17302    1           3 MON BIT(1) UNAL /*('0'B)/**/,
             17303    1           3 ERR# UBIN(14) UNAL /*(0)/**/,
             17304    1           3 SEV UBIN(3) UNAL /*(0)/**/,
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:138  
             17305    1         2 FREE$ PTR /*(ADDR(NIL))/**/,
             17306                               /* Head of FREE BLOCKS CHAIN in WORK_AREA */
             17307    1         2 NEXT$ PTR /*(ADDR(VM_HEADER.WORK_AREA))/**/,
             17308                               /* Ptr to next avail. word in WORK_AREA */
             17309    1         2 BAD_ADDRESS$ PTR /*(ADDR(NIL))/**/,
             17310                               /* Ptr to bad address textc info */
             17311    1         2 BLIND$ PTR /*(ADDR(NIL))/**/,
             17312                               /* Ptr to BLIND COPY textc info */
             17313    1         2 COPY$ PTR /*(ADDR(NIL))/**/,
             17314                               /* Ptr to COPY textc info */
             17315    1         2 FILE_FOLDER$ PTR /*(ADDR(NIL))/**/,
             17316                            /* Address to be used for storing copies of messages by user */
             17317    1         2 FROM$ PTR /*(ADDR(NIL))/**/,
             17318                               /* Ptr to FROM textc info */
             17319    1         2 REFERENCE$ PTR /*(ADDR(NIL))/**/,
             17320                               /* Ptr to REFERENCE textc info */
             17321    1         2 REPLY_TO$ PTR /*(ADDR(NIL))/**/,
             17322                               /* Ptr to REPLY-TO textc info */
             17323    1         2 RETURN_ADDRESS$ PTR /*(ADDR(NIL))/**/,
             17324                               /* Ptr to RETURN_ADDRESS address structure */
             17325    1         2 SIGNED$ PTR /*(ADDR(NIL))/**/,
             17326                               /* Signature text */
             17327    1         2 SUBJECT$ PTR /*(ADDR(NIL))/**/,
             17328                               /* Ptr to SUBJECT textc info */
             17329    1         2 TO$ PTR /*(ADDR(NIL))/**/,
             17330                               /* Ptr to TO textc info */
             17331    1         2 UNIQUE_ID$ PTR /*(ADDR(NIL))/**/,
             17332                                    /* Unique identifier for this message */
             17333    1         2 REFERS_TO_ID$ PTR /*(ADDR(NIL))/**/,
             17334                                    /* Identifies original mailgram for ACK/ERR/ANS */
             17335    1         2 NUM_TRACE_RECORDS UBIN WORD /*(0)/**/,
             17336                                    /* Number of TRACE records */
             17337    1         2 NUM_ENCL_RECORDS UBIN WORD /*(0)/**/,
             17338                             /* Number of binary enclosure records MINUS  context record */
             17339    1         2 RESERVED (0:5) UBIN WORD /*(0*0)/**/,
             17340                               /* Reserved for future expansion */
             17341    1         2 WORK_AREA UBIN WORD;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:139  
             17342                               /* Base of work area for textc data */
      329    17344
      330    17345          %VM_SEARCH_INFO;
             17346        %LSET LISTDIR='0'B;
             17355    1   DCL 1 VM_SEARCH_INFO STATIC,
             17356    1         2 NUM_ENTRIES UBIN WORD,
             17357                            /* Number of folders to be searched */
             17358    1         2 DCB# (0:10) UBIN WORD INIT(0*11)/**/,
             17359                            /* Number of dcb which points to folder to search */
             17360    1         2 MAP(0:10) UBIN WORD INIT(0*11)/**/,
             17361                           /* Maps entry numbers to SEARCH_LIST$ in profile */
             17362    1         2 GETDCB#(0:10) UBIN WORD INIT(0*11)/**/,
             17363                            /* DCB number for this slot (via get dcb) */
             17364    1         2 ACTIVE BIT(1) UNAL INIT('0'B)/**/,
             17365                            /* All files are open */
             17366    1         2 GLOBAL BIT(1) UNAL INIT('0'B)/**/,
             17367                            /* Global folder exists */
             17368    1         2 CURRENT BIT(1) UNAL INIT('0'B)/**/,
             17369                            /* Local folder exists */
             17370    1         2 * BIT(33) UNAL;
      331    17372
      332    17373          %VM_FOLDER_INFO (NAME=VM_CURRENT_FOLDER, STCLASS=STATIC SYMDEF);
             17374        %LSET LISTDIR='0'B;
             17383    1   DCL 1 VM_CURRENT_FOLDER STATIC SYMDEF,
             17384    1         2 PSID CHAR(6) CALIGNED INIT(' ')/**/,
             17385                          /* Packset on which this folder resides */
             17386    1         2 ACCT CHAR(8) CALIGNED INIT(' ')/**/,
             17387                            /* Account where this folder resides */
             17388    1         2 FOLDER CHAR(25) CALIGNED INIT(' ')/**/,
             17389                            /* Name of this folder */
             17390    1         2 PASS CHAR(8) CALIGNED INIT(' ')/**/,
             17391                            /* Password (if any) of this folder */
             17392    1         2 SITENAME CHAR(8) INIT(' ')/**/,
             17393                            /* Site where this folder exists */
             17394    1         2 TIME,
             17395                            /* Various times of interest */
             17396    1           3 ACCESS UBIN WORD INIT(0)/**/,
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:140  
             17397                            /* Time that this file was last accessed */
             17398    1           3 CREATION UBIN WORD INIT(0)/**/,
             17399                            /* Time that this file was created */
             17400    1           3 MODIFY UBIN WORD INIT(0)/**/,
             17401                            /* Time that this file was last modified */
             17402    1         2 NRECS UBIN WORD INIT(0)/**/,
             17403                            /* Number of records in this file */
             17404    1         2 UGRANS UBIN WORD INIT(0)/**/,
             17405                            /* Number of granules currently in use */
             17406    1         2 FLAGS,
             17407    1           3 UPDATE BIT(1) UNAL INIT('0'B)/**/,
             17408                            /* May the user UPDATE or just READ this folder */
             17409    1           3 OWNER BIT(1) UNAL INIT('0'B)/**/,
             17410                            /* Is current user OWNER of this folder? */
             17411    1           3 ACCT_SPEC BIT(1) UNAL INIT('0'B)/**/,
             17412                            /* Was a account specified in the address? */
             17413    1           3 FOLDER_SPEC BIT(1) UNAL INIT('0'B)/**/,
             17414                            /* Was a folder specified in the address? */
             17415    1           3 SITENAME_SPEC BIT(1) UNAL INIT('0'B)/**/,
             17416                            /* Was a sitename specified in the address? */
             17417    1           3 OPEN BIT(1) UNAL INIT('0'B)/**/,
             17418                            /* Has this folder been opened? */
             17419    1           3 RESERVED BIT(30) UNAL INIT('0'B)/**/,
             17420    1         2 USER_NAME,
             17421                            /* Name that got us to this folder */
             17422    1           3 COUNT UBIN BYTE CALIGNED INIT(0)/**/,
             17423    1           3 TEXT CHAR(200) CALIGNED INIT(' ')/**/;
      333    17425
      334    17426          %VM_BODYREC (TYP=%VM_BODY_TEXT,STCLASS=STATIC,VARYLEN=NO);
             17427        %LSET LISTDIR='0'B;
             17436    1   DCL 1 VM_BODYREC STATIC,
             17437    1         2 TYPE UBIN BYTE CALIGNED INIT(1)/**/,
             17438                        /* The type of the record to be accessed. */
             17439    1         2 RESERVED UBIN (27) UNAL INIT(0)/**/,
             17440                         /* Reserved for future use */
             17441    1         2 VALUE,
             17442    1           3 COUNT UBIN WORD,
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:141  
             17443                        /* Number of bytes of DATA */
             17454    1           3 DATA CHAR(300) CALIGNED;
      335    17458
      336    17459
      337    17460        %VM_ADD_HEAD;
             17461        %LSET LISTDIR='0'B;
             17470    1   DCL 1 VM_ADD_HEAD BASED(VM_ADDLIST$),
             17471    1         2 ADDRESS_SIZE UBIN WORD /*(0)/**/,
             17472                               /* Number of words in this address list */
             17473    1         2 NUM_ENTRIES UBIN WORD /*(0)/**/,
             17474                               /* Number of entries in list */
             17475    1         2 FLAGS,
             17476    1           3 ERR# BIT(1) UNAL /*('0'B)/**/,
             17477                               /* Some error found in address list */
             17478    1           3 RESERVED BIT(35) UNAL /*('0'B)/**/,
             17479                               /* Reserved for future expansion */
             17480    1         2 HEAD$ PTR /*(ADDR(NIL))/**/,
             17481                               /* Head of link list */
             17482    1         2 FREE$ PTR /*(ADDR(NIL))/**/,
             17483                               /* Ptr to first entry in free block list */
             17484    1         2 NEXT$ PTR /*(ADDR(NIL))/**/,
             17485                               /* Ptr to next available word in work area */
             17486    1         2 WORK_AREA UBIN WORD;
             17487                               /* First word of work area. */
      338    17489        %VM_ADD_HEAD (NAME=VM_ENCL_HEAD,STCLASS="BASED(VM_ENCLLIST$)");
             17490        %LSET LISTDIR='0'B;
             17499    1   DCL 1 VM_ENCL_HEAD BASED(VM_ENCLLIST$),
             17500    1         2 ADDRESS_SIZE UBIN WORD /*(0)/**/,
             17501                               /* Number of words in this address list */
             17502    1         2 NUM_ENTRIES UBIN WORD /*(0)/**/,
             17503                               /* Number of entries in list */
             17504    1         2 FLAGS,
             17505    1           3 ERR# BIT(1) UNAL /*('0'B)/**/,
             17506                               /* Some error found in address list */
             17507    1           3 RESERVED BIT(35) UNAL /*('0'B)/**/,
             17508                               /* Reserved for future expansion */
             17509    1         2 HEAD$ PTR /*(ADDR(NIL))/**/,
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:142  
             17510                               /* Head of link list */
             17511    1         2 FREE$ PTR /*(ADDR(NIL))/**/,
             17512                               /* Ptr to first entry in free block list */
             17513    1         2 NEXT$ PTR /*(ADDR(NIL))/**/,
             17514                               /* Ptr to next available word in work area */
             17515    1         2 WORK_AREA UBIN WORD;
             17516                               /* First word of work area. */
      339    17518        %VM_ADD_HEAD (NAME=INIT_ENCL_HEAD,STCLASS=CONSTANT);
             17519        %LSET LISTDIR='0'B;
             17528    1   DCL 1 INIT_ENCL_HEAD CONSTANT,
             17529    1         2 ADDRESS_SIZE UBIN WORD INIT(0)/**/,
             17530                               /* Number of words in this address list */
             17531    1         2 NUM_ENTRIES UBIN WORD INIT(0)/**/,
             17532                               /* Number of entries in list */
             17533    1         2 FLAGS,
             17534    1           3 ERR# BIT(1) UNAL INIT('0'B)/**/,
             17535                               /* Some error found in address list */
             17536    1           3 RESERVED BIT(35) UNAL INIT('0'B)/**/,
             17537                               /* Reserved for future expansion */
             17538    1         2 HEAD$ PTR INIT(ADDR(NIL))/**/,
             17539                               /* Head of link list */
             17540    1         2 FREE$ PTR INIT(ADDR(NIL))/**/,
             17541                               /* Ptr to first entry in free block list */
             17542    1         2 NEXT$ PTR INIT(ADDR(NIL))/**/,
             17543                               /* Ptr to next available word in work area */
             17544    1         2 WORK_AREA UBIN WORD;
             17545                               /* First word of work area. */
      340    17547        %VM_INFOKEY (NAME=VM_ENCLLIST_KEY,TYP=%VM_TYPE_ENCL);
             17548        %LSET LISTDIR='0'B;
             17557    1   DCL 1 VM_ENCLLIST_KEY STATIC,
             17558    1         2 COUNT UBIN BYTE CALIGNED INIT(5)/**/,
             17559    1         2 TYPE UBIN BYTE CALIGNED INIT(100)/**/,
             17560                        /* The type of the record to be accessed. */
             17561    1         2 MESSAGE_NUMBER UBIN WORD CALIGNED INIT(0)/**/;
             17562                        /* Number of this message. */
      341    17564        %VM_BODYREC (NAME=VM_ENCLREC,VARYLEN=YES,TYP=%VM_BODY_BINARY_ENCL,
      342    17565                     STCLASS="BASED(VM_ENCLREC$)");
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:143  
             17566        %LSET LISTDIR='0'B;
             17575    1   DCL 1 VM_ENCLREC BASED(VM_ENCLREC$),
             17576    1         2 TYPE UBIN BYTE CALIGNED /*(4)/**/,
             17577                        /* The type of the record to be accessed. */
             17578    1         2 RESERVED UBIN (27) UNAL /*(0)/**/,
             17579                         /* Reserved for future use */
             17580    1         2 VALUE,
             17581    1           3 COUNT UBIN WORD,
             17582                        /* Number of bytes of DATA */
             17591    1           3 DATA CHAR(VM_ENCLREC.VALUE.COUNT) CALIGNED;
      343    17597        %VM_BODYKEY (NAME=VM_ENCLKEY,TYP=%VM_TYPE_ENCL_INIT);
             17598        %LSET LISTDIR='0'B;
             17607    1   DCL 1 VM_ENCLKEY STATIC,
             17608    1         2 COUNT UBIN BYTE CALIGNED INIT(7)/**/,
             17609    1         2 TYPE UBIN BYTE CALIGNED INIT(101)/**/,
             17610                        /* The type of the record to be accessed. */
             17611    1         2 MESSAGE_NUMBER UBIN WORD CALIGNED INIT(0)/**/,
             17612                        /* Number of this message. */
             17613    1         2 REC_NUMBER UBIN HALF CALIGNED INIT(0)/**/;
             17614                        /* The record number identifying the line of
             17615                           the message body to be accessed. */
      344    17617        %VM_ENCLOS (STCLASS="BASED(ENCL$)");
             17618        %LSET LISTDIR='0'B;
             17627    1   DCL 1 VM_ENCLOS BASED(ENCL$),
             17628    1         2 NEXT$ PTR /*(ADDR(NIL))/**/,
             17629                             /* Ptr to next entry on list */
             17630    1         2 PREV$ PTR /*(ADDR(NIL))/**/,
             17631                             /* Ptr to previous entry on list */
             17632    1         2 FLAGS,
             17633    1           3 DELETED BIT(1) UNAL /*('0'B)/**/,
             17634                             /* Set if this enclosure is deleted */
             17635    1           3 FORWARD BIT(1) UNAL /*('0'B)/**/,
             17636                             /* Set if this encl. is from a fwd mailgram */
             17637    1           3 RESERVED BIT(34) UNAL /*('0'B)/**/,
             17638                             /* Misc flags for future use */
             17639    1         2 RESERVED (0:5) UBIN WORD /*(0*0)/**/,
             17640                             /* Reserved for future use */
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:144  
             17641    1         2 NRECS UBIN WORD WALIGNED /*(0)/**/,
             17642                             /* Number of records in this enclosure */
             17643    1         2 TYPE UBIN BYTE  CALIGNED /*(0)/**/,
             17644                             /* Type, 101-199, of the record */
             17645    1         2 TITLE$ PTR /*(ADDR(NIL))/**/;
             17646                             /* Pointer to title string */
      345    17648        %VM_ENCLOS (NAME=INIT_ENCLOS,STCLASS=CONSTANT);
             17649        %LSET LISTDIR='0'B;
             17658    1   DCL 1 INIT_ENCLOS CONSTANT,
             17659    1         2 NEXT$ PTR INIT(ADDR(NIL))/**/,
             17660                             /* Ptr to next entry on list */
             17661    1         2 PREV$ PTR INIT(ADDR(NIL))/**/,
             17662                             /* Ptr to previous entry on list */
             17663    1         2 FLAGS,
             17664    1           3 DELETED BIT(1) UNAL INIT('0'B)/**/,
             17665                             /* Set if this enclosure is deleted */
             17666    1           3 FORWARD BIT(1) UNAL INIT('0'B)/**/,
             17667                             /* Set if this encl. is from a fwd mailgram */
             17668    1           3 RESERVED BIT(34) UNAL INIT('0'B)/**/,
             17669                             /* Misc flags for future use */
             17670    1         2 RESERVED (0:5) UBIN WORD INIT(0*0)/**/,
             17671                             /* Reserved for future use */
             17672    1         2 NRECS UBIN WORD WALIGNED INIT(0)/**/,
             17673                             /* Number of records in this enclosure */
             17674    1         2 TYPE UBIN BYTE  CALIGNED INIT(0)/**/,
             17675                             /* Type, 101-199, of the record */
             17676    1         2 TITLE$ PTR INIT(ADDR(NIL))/**/;
             17677                             /* Pointer to title string */
      346    17679          %VM_RADDRESS (NAME=VM$RADDRESS,STCLASS=BASED);
             17680        %LSET LISTDIR='0'B;
             17689    1   DCL 1 VM$RADDRESS BASED,
             17690    1         2 NEXT$ PTR /*(ADDR(NIL))/**/,
             17691                               /* Ptr to next entry on list */
             17692    1         2 PREV$ PTR /*(ADDR(NIL))/**/,
             17693                               /* Ptr to previous entry on list */
             17694    1         2 FLAGS,
             17695    1           3 UNDEF# BIT (1) UNAL /*('0'B)/**/,
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:145  
             17696                               /* This entry is not valid. Report as an error */
             17697    1           3 USER# BIT(1) UNAL /*('0'B)/**/,
             17698                               /* USER def, not LIST */
             17699    1           3 RESERVED BIT(7) UNAL /*('0'B)/**/,
             17700                               /* Reserved for future use */
             17701    1         2 TYPE UBIN BYTE UNAL /*(1)/**/,
             17702    1         2 NAME_KEY CHAR(20) CALIGNED /*(' ')/**/,
             17703                               /* Used only for USER definitions */
             17704    1         2 FOLDER CHAR(25) CALIGNED /*(' '*0)/**/,
             17705    1         2 NOMAD REDEF FOLDER,
             17706    1           3 FOLDER CHAR (18) CALIGNED,
             17707    1           3 DELIM CHAR (1) CALIGNED,
             17708    1           3 PSID CHAR (6) CALIGNED,
             17709    1         2 PASS CHAR(8) CALIGNED /*(' '*0)/**/,
             17710                               /* NOTE: Passwords are encrypted */
             17711    1         2 SITENAME CHAR(8) CALIGNED /*(' '*0)/**/,
             17712    1         2 ACCT CHAR(8) CALIGNED /*(' '*0)/**/;
      347    17714
      348    17715          %VM_UADDRESS (NAME=VM$UADDRESS,STCLASS=BASED);
             17716        %LSET LISTDIR='0'B;
             17725    1   DCL 1 VM$UADDRESS BASED,
             17726    1         2 NEXT$ PTR /*(ADDR(NIL))/**/,
             17727                               /* Ptr to next entry on list */
             17728    1         2 PREV$ PTR /*(ADDR(NIL))/**/,
             17729                               /* Ptr to previous entry on list */
             17730    1         2 FLAGS,
             17731    1           3 UNDEF# BIT (1) UNAL /*('0'B)/**/,
             17732                               /* This entry is not valid. Report as an error */
             17733    1           3 USER# BIT(1) UNAL /*('0'B)/**/,
             17734                               /* USER def, not LIST */
             17735    1           3 RESERVED BIT(7) UNAL /*('0'B)/**/,
             17736                               /* Reserved for future use */
             17737    1         2 TYPE UBIN BYTE UNAL /*(2)/**/,
             17738    1         2 NAME_KEY CHAR(20) CALIGNED /*(' ')/**/,
             17739                               /* Used only for USER definitions */
             17740    1         2 FOLDER CHAR(25) CALIGNED /*(' '*0)/**/,
             17741    1         2 NOMAD REDEF FOLDER,
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:146  
             17742    1           3 FOLDER CHAR (18) CALIGNED,
             17743    1           3 DELIM CHAR (1) CALIGNED,
             17744    1           3 PSID CHAR (6) CALIGNED,
             17745    1         2 PASS CHAR(8) CALIGNED /*(' '*0)/**/,
             17746                               /* NOTE: Passwords are encrypted */
             17747    1         2 SITENAME CHAR(8) CALIGNED /*(' '*0)/**/,
             17748    1         2 USER_NAME,
             17749    1           3 COUNT UBIN BYTE CALIGNED /*(0)/**/,
             17750    1           3 TEXT CHAR(200) CALIGNED /*(' ')/**/;
      349    17752          %VM_SITE;
             17753        %LSET LISTDIR='0'B;
             17762    1   DCL 1 VM_SITE STATIC,
             17763    1         2 FLAGS,
             17764    1           3 RETURN_TO_ORIGIN BIT(1) UNAL INIT('0'B)/**/,
             17765                         /* Receiver should "become" new ORIGIN site.
             17766                            Used in ANSWER cases */
             17767    1           3 RESERVED BIT(35) UNAL INIT('0'B)/**/,
             17768    1         2 NUM_SITES UBIN WORD INIT(0)/**/,
             17769                      /* How many sites have received this message so far */
             17770    1         2 ORIGIN CHAR(8) CALIGNED INIT(' ')/**/,
             17771                      /* Where did this message originate? */
             17772    1         2 RECEIVER_SITE (0:25) CHAR(8) CALIGNED;
             17773                      /* Contains the siteids (as known to sender) where
             17774                         this message has been sent. Used to detect loops */
      350    17776        %SET LISTMAC='0'B;
      351    17777        %SET LISTSUB='0'B;
      352    17778        %SET LISTEXP='0'B;
      353    17779        %VM_RADDRESS;
      354    17814        /***** Constant versions *****/
      355    17815          %VM_HEADER (NAME=CVM_HEADER,STCLASS=CONSTANT);
      356    17944        %EJECT;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:147  
      357    17945        /***** Misc structures *****/
      358    17946        %F_FDS (NAME=F_FDSSIGNED, DCB=M$ME, STCLASS=STATIC,
      359    17947             FMT=FMT_SIGNED,
      360    17948             NVECS=1,
      361    17949             VECTR=VECT);
      362    18062               %F_FDS (NAME=F_FDSSPACE, DCB=M$ME,
      363    18063               VECTR=VECT, FMT=FMT_SPACE, NVECS=0);
      364    18176    1   DCL VECT VECTOR STATIC;
      365    18177    1   DCL 1 FMT_SIGNED STATIC,
      366    18178    1         2 * CHAR(0) INIT ('%V'),
      367    18179    1         2 * BIT(9) UNAL INIT('037'O),
      368    18180    1         2 * CHAR(0) INIT('%A');
      369    18181    1   DCL FMT_SPACE CHAR(0) CONSTANT INIT
      370    18182    1       ('%1X');
      371    18183    1   DCL BLANK_CHAR CHAR(1) CONSTANT INIT(' ');
      372    18184    1   DCL UTS UBIN WORD STATIC;               /* Current uts */
      373    18185
      374    18186          %XUM$MCB (NAME=MCB,STCLASS=STATIC);
      375    18190
      376    18191          %VLP_NAME (FPTN=TEMP_TEXTC,LEN=256,STCLASS=AUTO);
      377    18218
      378    18219        %FPT_XCON (UENTRY=VNS$XCON, STCLASS=CONSTANT);
      379    18233        %FPT_INT (UENTRY=VNS$BREAK, STCLASS=CONSTANT);
      380    18247        %FPT_OPEN (FPTN=OPEN_WORK,
      381    18248                   STCLASS=CONSTANT,
      382    18249                       ACS=DIRECT,
      383    18250                       ASN=FILE,
      384    18251                       DCB=M$WORK,
      385    18252                       EXIST=OLDFILE,
      386    18253                       ORG=KEYED,
      387    18254                       NAME=VM_SEND_FILE_NAME);
      388    18363
      389    18364        %FPT_OPEN (FPTN=OPEN_FORWARD_FILE,
      390    18365                   STCLASS=CONSTANT,
      391    18366                       ACS=SEQUEN,
      392    18367                       ASN=FILE,
      393    18368                       DCB=M$EDIT,
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:148  
      394    18369                       EXIST=OLDFILE,
      395    18370                       FUN=UPDATE,
      396    18371                       ORG=CONSEC,
      397    18372                       NAME=VM_FORWARD_FILE_NAME,
      398    18373                       PASS=VM_FORWARD_FILE_PASS);
      399    18482
      400    18483        %FPT_OPEN (FPTN=OPEN_APPEND,
      401    18484                   STCLASS=CONSTANT,
      402    18485                      DCB=M$APND,
      403    18486                      FUN=IN,
      404    18487                      NAME=FID_NAME,
      405    18488                      ACCT=FID_ACCT,
      406    18489                      PASS=FID_PASS,
      407    18490                      SN=FID_SN);
      408    18599
      409    18600
      410    18601        %FPT_CLOSE (FPTN=CLOSE_SAVE,
      411    18602                       DISP=SAVE);
      412    18644
      413    18645        %FPT_CLOSE (FPTN=CLOSE_SCRATCH,
      414    18646                        DISP=SCRATCH);
      415    18688
      416    18689        %FPT_READ (FPTN=READ_SI,
      417    18690                       DCB=M$SI,
      418    18691                       BUF=CMD_BUF);
      419    18730
      420    18731        %FPT_READ (FPTN=READ_ENCL_FILE,
      421    18732                    DCB=M$ENCL);
      422    18771
      423    18772
      424    18773
      425    18774
      426    18775        %FPT_PROMPT (FPTN=CHANGE_PROMPT, DCB=M$SI, STCLASS="STATIC SYMDEF");
      427    18803
      428    18804        %FPT_SINPUT (FPTN=SET_INPUT,
      429    18805                     DCB=M$SI,
      430    18806                     POSITION=NO);
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:149  
      431    18843
      432    18844        %FPT_LINK(FPTN=LINKFPT,
      433    18845             ECHO=NO,
      434    18846             TEXTC=YES);
      435    18864
      436    18865        %VLP_ACCT (FPTN=SYS_ACCT,ACCT=':SYS', STCLASS=CONSTANT);
      437    18878
      438    18879        %FPT_FID (FPTN=CHECK_FID_CONST,
      439    18880                       STCLASS=CONSTANT,
      440    18881                       ACCT=FID_ACCT,
      441    18882                       NAME=FID_NAME,
      442    18883                       PASS=FID_PASS,
      443    18884                       SN=FID_SN);
      444    18907
      445    18908        %FPT_FID( FPTN=CHECK_FID,
      446    18909                  STCLASS="");
      447    18932
      448    18933        %FPT_OPEN (FPTN=OPEN_SI_DEFAULT,
      449    18934                   STCLASS=CONSTANT,
      450    18935                       REASSIGN=YES,
      451    18936                       FUN=IN,
      452    18937                       ASN=DEVICE,
      453    18938                       ORG=CONSEC,
      454    18939                       ACS=SEQUEN,
      455    18940                       SCRUB=YES,
      456    18941                       WSN=ERASE,
      457    18942                       DCB=M$SI);
      458    19051
      459    19052        %FPT_OPEN (FPTN=OPEN_SI,
      460    19053                   STCLASS=CONSTANT,
      461    19054                       DCB=M$SI,
      462    19055                       SCRUB =YES,
      463    19056                       FUN=IN,
      464    19057                       NAME=FID_NAME,
      465    19058                       ACCT=FID_ACCT,
      466    19059                       PASS=FID_PASS,
      467    19060                       SN=FID_SN);
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:150  
      468    19169
      469    19170        %FPT_OPEN (FPTN=OPEN_ENCL_FILE,
      470    19171                   STCLASS = CONSTANT,
      471    19172                       ASN=FILE,
      472    19173                       DCB=M$ENCL,
      473    19174                       FUN=IN,
      474    19175                       ORG=CONSEC,
      475    19176                       NAME=FID_NAME,
      476    19177                       ACCT=FID_ACCT,
      477    19178                       PASS=FID_PASS,
      478    19179                       SN=FID_SN);
      479    19288
      480    19289        %FPT_OPEN (FPTN=OPEN_FORWARD_ENCL_FILE,
      481    19290                       ACS=DIRECT,
      482    19291                       ASN=FILE,
      483    19292                       DCB=M$ENCL,
      484    19293                       EXIST=OLDFILE,
      485    19294                       FUN=IN,
      486    19295                       NAME=VM_FORWARD_ENCL_NAME,
      487    19296                       PASS=VM_FORWARD_FILE_PASS,
      488    19297                       ORG=KEYED,
      489    19298                       SCRUB=YES,
      490    19299                       STCLASS=CONSTANT);
      491    19408        %FPT_OPEN( FPTN=OPEN_FPT,
      492    19409                   STCLASS="");
      493    19518
      494    19519        %VLP_NAME (FPTN=FID_NAME);
      495    19546        %VLP_ACCT (FPTN=FID_ACCT);
      496    19559        %VLP_PASS (FPTN=FID_PASS);
      497    19572        %VLP_SN (FPTN=FID_SN);
      498    19585
      499    19586        %FPT_ERR (FPTN=NOTSENT_ERR, STCLASS=CONSTANT, CODE=E_NOTSENT);
      500    19601
      501    19602        %FPT_WAIT  (FPTN=TAKE_THIRTY,
      502    19603                    STCLASS=CONSTANT,
      503    19604                    UNITS=30);
      504    19618
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:151  
      505    19619        %FPT_TIME (FPTN=GET_TIME,               /* Get current time */
      506    19620                   STCLASS=CONSTANT,
      507    19621                       SOURCE=CLOCK,
      508    19622                       DEST=UTS,
      509    19623                       TSTAMP=UTS);
      510    19642
      511    19643        %FPT_TIME (FPTN=GET_CURRENT,
      512    19644                   STCLASS=CONSTANT,
      513    19645                       SOURCE=CLOCK,
      514    19646                       DATE=WORK_DATE,
      515    19647                       TIME=WORK_TIME,
      516    19648                       DEST=LOCAL);
      517    19667
      518    19668        %FPT_TIME (FPTN=CHECK_TIME,
      519    19669                   STCLASS=CONSTANT,
      520    19670                       SOURCE=LOCAL,
      521    19671                       DATE=WORK_DATE,
      522    19672                       TIME=WORK_TIME,
      523    19673                       DEST=UTS,
      524    19674                       TSTAMP=WORK_UTS);
      525    19693
      526    19694        %FPT_TIME  (FPTN=GET_ANSI_TIME,
      527    19695                    STCLASS=CONSTANT,
      528    19696                    SOURCE=CLOCK,
      529    19697                    DEST=ANS,
      530    19698                    TIME=ANSI_TIME,
      531    19699                    DATE=ANSI_DATE);
      532    19718
      533    19719        %FPT_TIME (FPTN=GET_UTS,
      534    19720                   STCLASS=CONSTANT,
      535    19721                       SOURCE=UTS,
      536    19722                       DATE=WORK_DATE,
      537    19723                       TIME=WORK_TIME,
      538    19724                       DEST=LOCAL,
      539    19725                       TSTAMP = WORK_UTS);
      540    19744
      541    19745        /***** Fpts to manipulate mail comgroup *****/
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:152  
      542    19746        %FPT_OPEN (FPTN=OPEN_MAILCG,
      543    19747                   STCLASS=CONSTANT,
      544    19748                       DCB=M$MAIL_COMGROUP,
      545    19749                       ASN=COMGROUP,
      546    19750                       FUN=UPDATE,
      547    19751                       NAME=VM_MAILCG_NAME,
      548    19752                       ACCT=VM_MAIL_ACCT,
      549    19753                       SETSTA=VM_MAILCG_SETSTA,
      550    19754                       SHARE=ALL);
      551    19863
      552    19864        %FPT_WRITE     (FPTN=WRITE_MAILCG,
      553    19865                            DCB=M$MAIL_COMGROUP,
      554    19866                            BUF=VM_CGBUFFER,
      555    19867                            STATION=MAILCG_STATION);
      556    19898
      557    19899        %VM_CGBUFFER;
      558    19930
      559    19931        %VLP_STATION (FPTN=MAILCG_STATION,
      560    19932                      STCLASS=CONSTANT,
      561    19933                       STATION='MAILMAN',
      562    19934                       DIRONLY=YES);
      563    19961
      564    19962               %FPT_OPEN (FPTN=OPEN_EDIT_FILE,
      565    19963               STCLASS=CONSTANT,
      566    19964               ASN=FILE,
      567    19965               DCB=M$EDIT,
      568    19966               FUN=IN,
      569    19967               NAME=EDIT_NAME,
      570    19968               ORG=KEYED,
      571    19969               SCRUB=YES,
      572    19970               SHARE=NONE);
      573    20079
      574    20080        %VLP_NAME (FPTN=EDIT_NAME,NAME='*BODY',STCLASS=CONSTANT);
      575    20107
      576    20108        /***** X$HELP structures *****/
      577    20109        %XUH_PARAM (NAME=HELP_PARAM,
      578    20110                       PROCNAME=SEND_PROG_NAME,
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:153  
      579    20111                       PROCACCT=SYS_ACCT,
      580    20112                       OUTDCB1=M$ME);
      581    20173               %VLP_NAME (FPTN=MAIL_PROG_NAME,
      582    20174               NAME='MAIL');
      583    20201
      584    20202        %VLP_NAME (FPTN=SEND_PROG_NAME,
      585    20203                       NAME='SEND');
      586    20230
      587    20231        /***** Cmds to reset command line dcbs *****/
      588    20232        %FPT_YC (FPTN    =  RESET_#1,
      589    20233                 STCLASS =  CONSTANT,
      590    20234                 CMD     =  RESET_#1_CMD,
      591    20235                 ECHO    =  NO,
      592    20236                 NOERR   =  YES);
      593    20253
      594    20254    1   DCL RESET_#1_CMD CHAR(0) CONSTANT INIT('!RESET #1');
      595    20255
      596    20256        %FPT_YC (FPTN    =  RESET_#2,
      597    20257                 STCLASS =  CONSTANT,
      598    20258                 CMD     =  RESET_#2_CMD,
      599    20259                 ECHO    =  NO,
      600    20260                 NOERR   =  YES);
      601    20277
      602    20278    1   DCL RESET_#2_CMD CHAR(0) CONSTANT INIT('!RESET #2');
      603    20279
      604    20280        %FPT_YC (FPTN    =  RESET_#3,
      605    20281                 STCLASS =  CONSTANT,
      606    20282                 CMD     =  RESET_#3_CMD,
      607    20283                 ECHO    =  NO,
      608    20284                 NOERR   =  YES);
      609    20301
      610    20302    1   DCL RESET_#3_CMD CHAR(0) CONSTANT INIT('!RESET #3');
      611    20303
      612    20304        %FPT_YC (FPTN    =  RESET_#4,
      613    20305                 STCLASS =  CONSTANT,
      614    20306                 CMD     =  RESET_#4_CMD,
      615    20307                 ECHO    =  NO,
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:154  
      616    20308                 NOERR   =  YES);
      617    20325
      618    20326    1   DCL RESET_#4_CMD CHAR(0) CONSTANT INIT('!RESET #4');
      619    20327
      620    20328        /***** Error codes *****/
      621    20329          %VLP_ERRCODE (FPTN=E_SYNERR,FCG="XU",MID="R",
      622    20330                        ERR#=%E$SYNERR,STCLASS=CONSTANT);
      623    20375               %VLP_ERRCODE (FPTN=E_NOTALLOW,FCG="VN",MID="S",
      624    20376               ERR#=%E$NOTALLOW,STCLASS=CONSTANT);
      625    20421               %VLP_ERRCODE (FPTN=E_NAMENTALLOWED,FCG="VM",MID="O",
      626    20422               ERR#=%E$NAMENTALLOWED,STCLASS=CONSTANT);
      627    20467               %VLP_ERRCODE (FPTN=E_BADMAIL,FCG="VN",MID="S",
      628    20468               ERR#=%E$BADMAIL,STCLASS=CONSTANT);
      629    20513               %VLP_ERRCODE (FPTN=E_NOMORE,FCG="VN",MID="S",
      630    20514               ERR#=%E$NOMORE,STCLASS=CONSTANT);
      631    20559               %VLP_ERRCODE (FPTN=E_BADADDRESS,FCG="VN",MID="S",
      632    20560               ERR#=%E$BADADDRESS,STCLASS=CONSTANT);
      633    20605        /*E*    ERROR: VNS-E$BADADDRESS-0
      634    20606                MESSAGE: The address %U1 is undefined or illegal.
      635    20607        */
      636    20608               %VLP_ERRCODE (FPTN=E_MISSINGFIELDS, FCG="VN", MID="S",
      637    20609               ERR#=%E$MISSINGFIELDS, STCLASS=CONSTANT);
      638    20654        /*E*  ERROR:   VNS-E$MISSINGFIELDS-0
      639    20655              MESSAGE: The TO field was not supplied (or was not recognized) in a SEND
      640    20656                       file processed with the GATEWAY option.  The message cannot be sent.
      641    20657        */
      642    20658               %VLP_ERRCODE (FPTN=E_NCG1,FCG="VN",MID="S",
      643    20659               ERR#=%E$NCG1,STCLASS=CONSTANT);
      644    20704        /*E* ERROR: VNS-E$NCG1-0
      645    20705             MESSAGE: Error accessing the MAILMAN comgroup for the following
      646    20706                      reason.  MAILMAN may not be running, see your mail administrator.
      647    20707        */
      648    20708               %VLP_ERRCODE (FPTN=E_NOTSENT,FCG="VN",MID="S",
      649    20709               ERR#=%E$NOTSENT,SEV=4,STCLASS=CONSTANT);
      650    20754        /*E*    ERROR: VNS-E$NOTSENT-4
      651    20755                MESSAGE: Message was not sent.
      652    20756                DESCRIPTION: This message needs a severity of 4 because it is
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:155  
      653    20757                             used on M$ERR calls to abnormally terminate SEND,
      654    20758                             and the error severity becomes the STEPCC.
      655    20759        */
      656    20760               %VLP_ERRCODE (FPTN=E_BADRTOADDRESS,FCG="VN",MID="S",
      657    20761               ERR#=%E$BADRTOADDRESS,STCLASS=CONSTANT);
      658    20806        /*E*    ERROR: VNS-E$BADRTOADDRESS-0
      659    20807                MESSAGE: Check the REPLY TO address specified in your profile.
      660    20808        */
      661    20809               %VLP_ERRCODE (FPTN=E_SENDBRKMSG,FCG="VN",MID='S',
      662    20810               ERR#=%E$SENDBRKMSG,STCLASS=CONSTANT);
      663    20855        /*E*    ERROR:   VNS-E$SENDBRKMSG-0
      664    20856                MESSAGE: Use CANCEL to NOT send this message,
      665    20857                         or QUIT to send the message and exit.
      666    20858        */
      667    20859               %VLP_ERRCODE (FPTN=E_USING_MSG_FMT,FCG="VM",MID='O',
      668    20860               ERR#=%E$USING_MSG_FMT,STCLASS=CONSTANT);
      669    20905               %VLP_ERRCODE (FPTN=E_FORMSGFMT,FCG="VN",MID='S',
      670    20906               ERR#=%E$FORMSGFMT,STCLASS=CONSTANT);
      671    20951        /*E*    ERROR:   VNS-E$FORMSGFMT-0
      672    20952                MESSAGE:<<Forwarded text will be appended>>
      673    20953        */
      674    20954               %VLP_ERRCODE (FPTN=E_FORENCLFMT,FCG="VN",MID='S',
      675    20955               ERR#=%E$FORENCLFMT,STCLASS=CONSTANT);
      676    21000        /*E*    ERROR:   VNS-E$FORENCLFMT-0
      677    21001                MESSAGE:<<Forwarded enclosures will be attached>>
      678    21002        */
      679    21003               %VLP_ERRCODE (FPTN=E_EDITMESFMT,FCG="VN",MID='S',
      680    21004               ERR#=%E$EDITMESFMT,STCLASS=CONSTANT);
      681    21049        /*E*    ERROR:   VNS-E$EDITMESFMT-0
      682    21050                MESSAGE:Editing *BODY
      683    21051        */
      684    21052               %VLP_ERRCODE (FPTN=E_TOREQUIRED,FCG="VN",MID='S',
      685    21053               ERR#=%E$TOREQUIRED,STCLASS=CONSTANT);
      686    21098        /*E*    ERROR:   VNS-E$TOREQUIRED-0
      687    21099                MESSAGE:The TO field is required for SEND to operate.
      688    21100        */
      689    21101               %VLP_ERRCODE (FPTN=E_TOOMANYSITES,FCG="VN",MID='S',
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:156  
      690    21102               ERR#=%E$TOOMANYSITES,STCLASS=CONSTANT);
      691    21147        /*E*    ERROR:   VNS-E$TOOMANYSITES-0
      692    21148                MESSAGE:Too many receiver sites specified.
      693    21149        */
      694    21150               %VLP_ERRCODE (FPTN=E_PASTDEFER,FCG="VN",MID='S',
      695    21151               ERR#=%E$PASTDEFER,STCLASS=CONSTANT);
      696    21196        /*E*    ERROR:   VNS-E$PASTDEFER-0
      697    21197                MESSAGE:Deferred delivery date is not in the future.
      698    21198        */
      699    21199        %EJECT;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:157  
      700    21200        /*
      701    21201             ***** Setup ASNYC routines for exit and break control ...
      702    21202        */
      703    21203    1        CALL M$XCON (FPT_XCON);

  21203 16 000002   000230 630400 13                 EPPR0   FPT_XCON
        16 000003   010003 713400                    CLIMB   4099
        16 000004   400400 401760                    pmme    nvectors=2

      704    21204    1        REMEMBER ABORT_SEND IN VNS_REMEMBER (%BREAK_EXIT);

  21204 16 000005   002031 635000 16                 EAA     ABORT_SEND
        16 000006   000076 452400 11                 STP2    VNS_REMEMBER
        16 000007   000077 755000 11                 STA     VNS_REMEMBER+1

      705    21205    1        REMEMBER OPTION_BREAK IN VNS_REMEMBER (%BREAK_REPEAT);

  21205 16 000010   001761 635000 16                 EAA     OPTION_BREAK
        16 000011   000100 452400 11                 STP2    VNS_REMEMBER+2
        16 000012   000101 755000 11                 STA     VNS_REMEMBER+3

      706    21206    1        CALL M$INT (FPT_INT);

  21206 16 000013   000236 630400 13                 EPPR0   FPT_INT
        16 000014   010002 713400                    CLIMB   4098
        16 000015   400000 401760                    pmme    nvectors=1

      707    21207        /*
      708    21208             ***** Get the name of this site ...
      709    21209        */
      710    21210    1        CALL VMA$GET_SITE_NAME (IAM,VM_SITENAME) ALTRET(E_PMME);

  21210 16 000016   000001 630400 17                 EPPR0   1
        16 000017   000000 631400 17                 EPPR1   0
        16 000020   000000 701000 xent               TSX1    VMA$GET_SITE_NAME
        16 000021   002022 702000 16                 TSX2    E_PMME

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:158  
      711    21211        /*
      712    21212             ***** Get user name ...
      713    21213        */
      714    21214    1        USER_NAME.L# = SIZEC(USER_NAME.NAME#);

  21214 16 000022   400000 236003                    LDQ     -131072,DU
        16 000023   200032 552140                    STBQ    USER_NAME,'40'O,AUTO

      715    21215    1        CALL VMF$FROM (USER_NAME) ALTRET(E_PMME);

  21215 16 000024   200032 630500                    EPPR0   USER_NAME,,AUTO
        16 000025   200450 450500                    STP0    P2$+1,,AUTO
        16 000026   200450 630500                    EPPR0   P2$+1,,AUTO
        16 000027   000003 631400 17                 EPPR1   3
        16 000030   000000 701000 xent               TSX1    VMF$FROM
        16 000031   002022 702000 16                 TSX2    E_PMME

      716    21216        /*
      717    21217             ***** How data segments are used in mail/send/mailman ...
      718    21218
      719    21219                   Segments used in all modules
      720    21220                   ----------------------------
      721    21221                   VM_ADDLIST
      722    21222                      - used for building new address list (VMA$EXPAND_LIST).
      723    21223
      724    21224                   VM_HEADER
      725    21225                      - used to contain the header of a message.
      726    21226
      727    21227                   VM_PROFILE
      728    21228                      - used to contain the profile of a folder.
      729    21229
      730    21230                   VM_WORK
      731    21231                      - used to contain list and user definitions when
      732    21232                        expanding an address list.
      733    21233
      734    21234                   Segments used by only mail and send
      735    21235                   -----------------------------------
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:159  
      736    21236                   VM_PARSEAREA
      737    21237                      - used to contain input and parse info (XUR$GETCMD)
      738    21238
      739    21239                   VM_ENCLLIST
      740    21240                      - used to contain the enclosure context record
      741    21241        */
      742    21242    1        CALL VMA$ENLARGE_SEGMENT (VM_ADDLIST_,1024) ALTRET(E_PMME);

  21242 16 000032   000005 630400 17                 EPPR0   5
        16 000033   000000 631400 17                 EPPR1   0
        16 000034   000000 701000 xent               TSX1    VMA$ENLARGE_SEGMENT
        16 000035   002022 702000 16                 TSX2    E_PMME

      743    21243    1        CALL VMA$ENLARGE_SEGMENT (VM_HEADER_,1024) ALTRET(E_PMME);

  21243 16 000036   000007 630400 17                 EPPR0   7
        16 000037   000000 631400 17                 EPPR1   0
        16 000040   000000 701000 xent               TSX1    VMA$ENLARGE_SEGMENT
        16 000041   002022 702000 16                 TSX2    E_PMME

      744    21244    1        CALL VMA$ENLARGE_SEGMENT (VM_PROFILE_,1024) ALTRET(E_PMME);

  21244 16 000042   000011 630400 17                 EPPR0   9
        16 000043   000000 631400 17                 EPPR1   0
        16 000044   000000 701000 xent               TSX1    VMA$ENLARGE_SEGMENT
        16 000045   002022 702000 16                 TSX2    E_PMME

      745    21245    1        CALL VMA$ENLARGE_SEGMENT (VM_WORK_,1024) ALTRET(E_PMME);

  21245 16 000046   000013 630400 17                 EPPR0   11
        16 000047   000000 631400 17                 EPPR1   0
        16 000050   000000 701000 xent               TSX1    VMA$ENLARGE_SEGMENT
        16 000051   002022 702000 16                 TSX2    E_PMME

      746    21246    1        CALL VMA$ENLARGE_SEGMENT (VM_PARSEAREA_,1024) ALTRET(E_PMME);

  21246 16 000052   000015 630400 17                 EPPR0   13
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:160  
        16 000053   000000 631400 17                 EPPR1   0
        16 000054   000000 701000 xent               TSX1    VMA$ENLARGE_SEGMENT
        16 000055   002022 702000 16                 TSX2    E_PMME

      747    21247    1        CALL VMA$OPEN_ENCL_SEGS ALTRET(E_PMME);

  21247 16 000056   000017 631400 17                 EPPR1   15
        16 000057   000000 701000 xent               TSX1    VMA$OPEN_ENCL_SEGS
        16 000060   002022 702000 16                 TSX2    E_PMME

      748    21248        /*
      749    21249             ***** Initialization of XUR$GETCMD data ...
      750    21250        */
      751    21251    1        XUR_INIT.WORK_ = VM_PARSEAREA_;  /* Setup parser workarea */

  21251 16 000061   000000 237000 xsym               LDAQ    VM_PARSEAREA_
        16 000062   000023 755000 11                 STA     XUR_INIT+5
        16 000063   000024 756000 11                 STQ     XUR_INIT+6

      752    21252    1        CALL XUR$INIT(XUR_INIT) ALTRET(ABORT_SEND);

  21252 16 000064   000020 630400 17                 EPPR0   16
        16 000065   000003 631400 17                 EPPR1   3
        16 000066   000000 701000 xent               TSX1    XUR$INIT
        16 000067   002031 702000 16                 TSX2    ABORT_SEND

      753    21253    1        CALL XUR$SETDCBS (M$SI_NUM,M$ME_NUM);

  21253 16 000070   000021 630400 17                 EPPR0   17
        16 000071   000000 631400 17                 EPPR1   0
        16 000072   000000 701000 xent               TSX1    XUR$SETDCBS
        16 000073   000000 011000                    NOP     0

      754    21254    1        CALL XUR$SETERRMSG (ERRMSG_FID) ALTRET(E_PMME);

  21254 16 000074   000023 630400 17                 EPPR0   19
        16 000075   000003 631400 17                 EPPR1   3
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:161  
        16 000076   000000 701000 xent               TSX1    XUR$SETERRMSG
        16 000077   002022 702000 16                 TSX2    E_PMME

      755    21255        /*
      756    21256            ***** Setup parse nodes depending on native language
      757    21257        */
      758    21258    1        call VMD$GETNODES(VN_NATL_NODES, NODES$, VN_NODEFID, VN_NODENAMES);

  21258 16 000100   000026 237000 17                 LDAQ    22
        16 000101   200452 757100                    STAQ    P2$+3,,AUTO
        16 000102   200140 630500                    EPPR0   NODES$,,AUTO
        16 000103   200451 450500                    STP0    P2$+2,,AUTO
        16 000104   000025 236000 17                 LDQ     21
        16 000105   200450 756100                    STQ     P2$+1,,AUTO
        16 000106   200450 630500                    EPPR0   P2$+1,,AUTO
        16 000107   000024 631400 17                 EPPR1   20
        16 000110   000000 701000 xent               TSX1    VMD$GETNODES
        16 000111   000000 011000                    NOP     0

      759    21259    1        IF NOT (B$JIT.PRIV.ACTIVE.FMSEC OR TESTMODE)

  21259 16 000112   000000 470400 xsym               LDP0    B$JIT$
        16 000113   000013 236100                    LDQ     11,,PR0
        16 000114   100000 316003                    CANQ    32768,DU
        16 000115   000124 601000 16                 TNZ     s:21263
        16 000116   000066 234000 11                 SZN     TESTMODE
        16 000117   000124 604000 16                 TMI     s:21263

      760    21260    1        THEN
      761    21261    1             SEND_NODES$ = NODES_TO_USE(%PN_SEND_NODES);

  21261 16 000120   200140 471500                    LDP1    NODES$,,AUTO
        16 000121   100015 236100                    LDQ     13,,PR1
        16 000122   200003 756100                    STQ     SEND_NODES$,,AUTO
        16 000123   000127 710000 16                 TRA     s:21264

      762    21262    1        ELSE
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:162  
      763    21263    1             SEND_NODES$ = NODES_TO_USE(%PN_PRIVILEGED_NODES);

  21263 16 000124   200140 471500                    LDP1    NODES$,,AUTO
        16 000125   100016 236100                    LDQ     14,,PR1
        16 000126   200003 756100                    STQ     SEND_NODES$,,AUTO

      764    21264    1        SEND_CMD$       = NODES_TO_USE(%PN_SEND_CMD);

  21264 16 000127   100017 236100                    LDQ     15,,PR1
        16 000130   200004 756100                    STQ     SEND_CMD$,,AUTO

      765    21265    1        CMD_TO$         = NODES_TO_USE(%PN_CMD_TO);

  21265 16 000131   100020 236100                    LDQ     16,,PR1
        16 000132   200005 756100                    STQ     CMD_TO$,,AUTO

      766    21266    1        CMD_SUBJECT$    = NODES_TO_USE(%PN_CMD_SUBJECT);

  21266 16 000133   100021 236100                    LDQ     17,,PR1
        16 000134   200006 756100                    STQ     CMD_SUBJECT$,,AUTO

      767    21267    1        CMD_BODY$       = NODES_TO_USE(%PN_CMD_BODY);

  21267 16 000135   100022 236100                    LDQ     18,,PR1
        16 000136   200007 756100                    STQ     CMD_BODY$,,AUTO

      768    21268    1        CMD_RTO$        = NODES_TO_USE(%PN_CMD_RTO);

  21268 16 000137   100023 236100                    LDQ     19,,PR1
        16 000140   200010 756100                    STQ     CMD_RTO$,,AUTO

      769    21269    1        CMD_REF$        = NODES_TO_USE(%PN_CMD_REF);

  21269 16 000141   100024 236100                    LDQ     20,,PR1
        16 000142   200011 756100                    STQ     CMD_REF$,,AUTO

      770    21270    1        CMD_COPY$       = NODES_TO_USE(%PN_CMD_COPY);
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:163  

  21270 16 000143   100025 236100                    LDQ     21,,PR1
        16 000144   200012 756100                    STQ     CMD_COPY$,,AUTO

      771    21271    1        CMD_BC$         = NODES_TO_USE(%PN_CMD_BC);

  21271 16 000145   100026 236100                    LDQ     22,,PR1
        16 000146   200013 756100                    STQ     CMD_BC$,,AUTO

      772    21272    1        CMD_DEFER$      = NODES_TO_USE(%PN_CMD_DEFER);

  21272 16 000147   100027 236100                    LDQ     23,,PR1
        16 000150   200014 756100                    STQ     CMD_DEFER$,,AUTO

      773    21273    1        CMD_SIGNED$     = NODES_TO_USE(%PN_CMD_SIGNED);

  21273 16 000151   100030 236100                    LDQ     24,,PR1
        16 000152   200015 756100                    STQ     CMD_SIGNED$,,AUTO

      774    21274    1        OPTION_NODES$   = NODES_TO_USE(%PN_OPTION_NODES);

  21274 16 000153   100031 236100                    LDQ     25,,PR1
        16 000154   200016 756100                    STQ     OPTION_NODES$,,AUTO

      775    21275             %INIT_STR( STR=VN_OPTIONS, CODE=E_OPTIONS_PROMPT);

  21290 16 000155   000030 630400 17                 EPPR0   24
        16 000156   000000 631400 17                 EPPR1   0
        16 000157   000000 701000 xent               TSX1    VMD$ERRMSG
        16 000160   000000 011000                    NOP     0

      776    21298        /*
      777    21299             ***** Initialize global flags ...
      778    21300        */
      779    21301    1        DID_SEND      = %NO#;

  21301 16 000161   200017 450100                    STZ     DID_SEND,,AUTO
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:164  

      780    21302    1        PROMPT_OPTIONS = %NO#;

  21302 16 000162   200020 450100                    STZ     PROMPT_OPTIONS,,AUTO

      781    21303    1        ERR_FLAG      = %NO#;

  21303 16 000163   200021 450100                    STZ     ERR_FLAG,,AUTO

      782    21304    1        ID_ASSIGNED   = %NO#;

  21304 16 000164   200022 450100                    STZ     ID_ASSIGNED,,AUTO

      783    21305    1        PROC_OPTIONS  = %NO#;

  21305 16 000165   200023 450100                    STZ     PROC_OPTIONS,,AUTO

      784    21306    1        SI_FILE       = %NO#;

  21306 16 000166   200024 450100                    STZ     SI_FILE,,AUTO

      785    21307    1        PREPROCESS_OPT = %NO#;

  21307 16 000167   200025 450100                    STZ     PREPROCESS_OPT,,AUTO

      786    21308    1        PREPROCESS    = %NO#;

  21308 16 000170   200026 450100                    STZ     PREPROCESS,,AUTO

      787    21309        /*
      788    21310            ***** Initialize binary enclosure stuff *****
      789    21311        */
      790    21312    1        VM_ENCL_HEAD.NUM_ENTRIES = 0;

  21312 16 000171   000000 470400 xsym               LDP0    VM_ENCLLIST$
        16 000172   000001 450100                    STZ     1,,PR0

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:165  
      791    21313    1        VM_ENCL_HEAD.HEAD$ = ADDR(NIL);

  21313 16 000173   000032 236000 17                 LDQ     26
        16 000174   000003 756100                    STQ     3,,PR0

      792    21314        /*
      793    21315             ***** Setup the default search list.
      794    21316                   Therefore, open :MAIL_CENTRAL.:MAIL
      795    21317                   if it exists. Otherwise, an unregistered system ...
      796    21318        */
      797    21319    1        CALL VMA$OPEN_GLOBAL (M$MAIL_GLOBAL_NUM)

  21319 16 000175   000033 630400 17                 EPPR0   27
        16 000176   000003 631400 17                 EPPR1   3
        16 000177   000000 701000 xent               TSX1    VMA$OPEN_GLOBAL
        16 000200   000210 702000 16                 TSX2    s:21326

      798    21320    2        WHENRETURN DO;

      799    21321    2             VM_SEARCH_INFO.NUM_ENTRIES = 1;

  21321 16 000201   000001 235007                    LDA     1,DL
        16 000202   000227 755000 11                 STA     VM_SEARCH_INFO

      800    21322    2             VM_SEARCH_INFO.GLOBAL = %YES#;

  21322 16 000203   200000 236003                    LDQ     65536,DU
        16 000204   000271 256000 11                 ORSQ    VM_SEARCH_INFO+34

      801    21323    2             VM_SEARCH_INFO.DCB#(0) = M$MAIL_GLOBAL_NUM;

  21323 16 000205   000000 235000 xsym               LDA     M$MAIL_GLOBAL_NUM
        16 000206   000230 755000 11                 STA     VM_SEARCH_INFO+1

      802    21324    2        END;

  21324 16 000207   000213 710000 16                 TRA     s:21332
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:166  

      803    21325    2        WHENALTRETURN DO;

      804    21326    2             VM_SEARCH_INFO.NUM_ENTRIES = 0;

  21326 16 000210   000227 450000 11                 STZ     VM_SEARCH_INFO

      805    21327    2             VM_SEARCH_INFO.GLOBAL = %NO#;

  21327 16 000211   000034 236000 17                 LDQ     28
        16 000212   000271 356000 11                 ANSQ    VM_SEARCH_INFO+34

      806    21328    2        END;

      807    21329        /*
      808    21330             ***** Parse the command invocation line ...
      809    21331        */
      810    21332    1        SIZE = B$JIT.CCARS;

  21332 16 000213   000000 470400 xsym               LDP0    B$JIT$
        16 000214   000032 236100                    LDQ     26,,PR0
        16 000215   000022 732000                    QRS     18
        16 000216   200133 756100                    STQ     SIZE,,AUTO

      811    21333    1        call XUR$GETCMD(SEND_CMD$->BSD,OUT$,IBEX_PROMPT,B$JIT.CCBUF,SIZE)

  21333 16 000217   200133 631500                    EPPR1   SIZE,,AUTO
        16 000220   200454 451500                    STP1    P2$+5,,AUTO
        16 000221   000000 236000 xsym               LDQ     B$JIT$
        16 000222   000033 036003                    ADLQ    27,DU
        16 000223   000036 235000 17                 LDA     30
        16 000224   200452 757100                    STAQ    P2$+3,,AUTO
        16 000225   200027 633500                    EPPR3   OUT$,,AUTO
        16 000226   200451 453500                    STP3    P2$+2,,AUTO
        16 000227   200004 236100                    LDQ     SEND_CMD$,,AUTO
        16 000230   200450 756100                    STQ     P2$+1,,AUTO
        16 000231   200450 630500                    EPPR0   P2$+1,,AUTO
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:167  
        16 000232   000035 631400 17                 EPPR1   29
        16 000233   000000 701000 xent               TSX1    XUR$GETCMD
        16 000234   000236 702000 16                 TSX2    s:21335
        16 000235   000250 710000 16                 TRA     s:21342

      812    21334    2        whenaltreturn do;

      813    21335    2             call XUR$ERRPTR;

  21335 16 000236   000017 631400 17                 EPPR1   15
        16 000237   000000 701000 xent               TSX1    XUR$ERRPTR
        16 000240   000000 011000                    NOP     0

      814    21336    2             call XUR$ERRMSG (OUTERR);

  21336 16 000241   200027 630500                    EPPR0   OUT$,,AUTO
        16 000242   200450 450500                    STP0    P2$+1,,AUTO
        16 000243   200450 630500                    EPPR0   P2$+1,,AUTO
        16 000244   000003 631400 17                 EPPR1   3
        16 000245   000000 701000 xent               TSX1    XUR$ERRMSG
        16 000246   000000 011000                    NOP     0

      815    21337    2             goto ABORT_SEND;

  21337 16 000247   002031 710000 16                 TRA     ABORT_SEND

      816    21338    2        end;
      817    21339        /*
      818    21340             ***** Process command line options ...
      819    21341        */
      820    21342    1        ENTRY_REASON = OUT$ -> P$B.SUBLK$(0) -> P$B.CODE;

  21342 16 000250   200027 470500                    LDP0    OUT$,,AUTO
        16 000251   000003 471500                    LDP1    3,,PR0
        16 000252   100000 236100                    LDQ     0,,PR1
        16 000253   777777 376007                    ANQ     -1,DL
        16 000254   200136 756100                    STQ     ENTRY_REASON,,AUTO
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:168  

      821    21343    2        DO J = 1 TO OUT$ -> P$B.NSUBLKS - 1;

  21343 16 000255   000001 235007                    LDA     1,DL
        16 000256   200135 755100                    STA     J,,AUTO
        16 000257   000411 710000 16                 TRA     s:21371+1

      822    21344    2             BLK$ = OUT$ -> P$B.SUBLK$(J);

  21344 16 000260   200027 470500                    LDP0    OUT$,,AUTO
        16 000261   200135 720100                    LXL0    J,,AUTO
        16 000262   000003 236110                    LDQ     3,X0,PR0
        16 000263   200030 756100                    STQ     BLK$,,AUTO

      823    21345    3             DO CASE (P$B.CODE);         /* Get all options */

  21345 16 000264   200030 471500                    LDP1    BLK$,,AUTO
        16 000265   100000 721100                    LXL1    0,,PR1
        16 000266   000006 101003                    CMPX1   6,DU
        16 000267   000271 602011 16                 TNC     s:21345+5,X1
        16 000270   000410 710000 16                 TRA     s:21371
        16 000271   000410 710000 16                 TRA     s:21371
        16 000272   000317 710000 16                 TRA     s:21352
        16 000273   000373 710000 16                 TRA     s:21363
        16 000274   000277 710000 16                 TRA     s:21347
        16 000275   000302 710000 16                 TRA     s:21349
        16 000276   000376 710000 16                 TRA     s:21365

      824    21346    3             CASE (%OPT_OPTION);

      825    21347    3                 PROMPT_OPTIONS = %YES#; /* Prompt for 'OPTIONS:' */

  21347 16 000277   400000 236003                    LDQ     -131072,DU
        16 000300   200020 756100                    STQ     PROMPT_OPTIONS,,AUTO
        16 000301   000410 710000 16                 TRA     s:21371

      826    21348    3             CASE (%OPT_MAILADD);
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:169  

      827    21349    3                 CALL VMB$USE_SPECIFIED (BLK$,USER_NAME,VM_CURRENT_FOLDER,

  21349 16 000302   000042 237000 17                 LDAQ    34
        16 000303   200454 757100                    STAQ    P2$+5,,AUTO
        16 000304   000044 237000 17                 LDAQ    36
        16 000305   200452 757100                    STAQ    P2$+3,,AUTO
        16 000306   200032 633500                    EPPR3   USER_NAME,,AUTO
        16 000307   200451 453500                    STP3    P2$+2,,AUTO
        16 000310   200030 634500                    EPPR4   BLK$,,AUTO
        16 000311   200450 454500                    STP4    P2$+1,,AUTO
        16 000312   200450 630500                    EPPR0   P2$+1,,AUTO
        16 000313   000037 631400 17                 EPPR1   31
        16 000314   000000 701000 xent               TSX1    VMB$USE_SPECIFIED
        16 000315   000745 702000 16                 TSX2    BAD_MAIL
        16 000316   000410 710000 16                 TRA     s:21371

      828    21350    3                   M$MAIL_FILE_NUM,VM_SEARCH_INFO,%UPDATE#) ALTRET(BAD_MAIL);
      829    21351    3             CASE (%OPT_FID1);

      830    21352    3                 OPEN_FPT         = OPEN_SI;

  21352 16 000317   000100 100400                    MLR     fill='000'O
        16 000320   000644 000350 13                 ADSC9   OPEN_SI                  cn=0,n=232
        16 000321   200272 000350                    ADSC9   OPEN_FPT,,AUTO           cn=0,n=232

      831    21353    3                 OPEN_FPT.V_      = vector(OPEN_FPT.V);

  21353 16 000322   000041 235000 17                 LDA     33
        16 000323   200450 452500                    STP2    P2$+1,,AUTO
        16 000324   200450 236100                    LDQ     P2$+1,,AUTO
        16 000325   000336 036003                    ADLQ    222,DU
        16 000326   200272 757100                    STAQ    OPEN_FPT,,AUTO

      832    21354    3                 CHECK_FID        = CHECK_FID_CONST;

  21354 16 000327   000100 100400                    MLR     fill='000'O
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:170  
        16 000330   000522 000140 13                 ADSC9   CHECK_FID_CONST          cn=0,n=96
        16 000331   200242 000140                    ADSC9   CHECK_FID,,AUTO          cn=0,n=96

      833    21355    3                 CHECK_FID.V_     = vector(CHECK_FID.V);

  21355 16 000332   000046 235000 17                 LDA     38
        16 000333   200450 452500                    STP2    P2$+1,,AUTO
        16 000334   200450 236100                    LDQ     P2$+1,,AUTO
        16 000335   000266 036003                    ADLQ    182,DU
        16 000336   200242 757100                    STAQ    CHECK_FID,,AUTO

      834    21356    3                 CHECK_FID.TEXTFID_ = vector(P$S.TEXT);

  21356 16 000337   100004 236100                    LDQ     4,,PR1
        16 000340   000033 772000                    QRL     27
        16 000341   000064 737000                    LLS     52
        16 000342   000140 135007                    SBLA    96,DL
        16 000343   200030 236100                    LDQ     BLK$,,AUTO
        16 000344   000047 036000 17                 ADLQ    39
        16 000345   200244 757100                    STAQ    CHECK_FID+2,,AUTO

      835    21357    3                 CHECK_FID.ASN_   = vector(OPEN_FPT.V.ASN#);

  21357 16 000346   177640 235007                    LDA     65440,DL
        16 000347   200450 452500                    STP2    P2$+1,,AUTO
        16 000350   200450 236100                    LDQ     P2$+1,,AUTO
        16 000351   000050 036000 17                 ADLQ    40
        16 000352   200260 757100                    STAQ    CHECK_FID+14,,AUTO

      836    21358    3                 CHECK_FID.RES_   = vector(OPEN_FPT.V.RES#);

  21358 16 000353   777640 235007                    LDA     -96,DL
        16 000354   200450 452500                    STP2    P2$+1,,AUTO
        16 000355   200450 236100                    LDQ     P2$+1,,AUTO
        16 000356   000342 036003                    ADLQ    226,DU
        16 000357   200262 757100                    STAQ    CHECK_FID+16,,AUTO

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:171  
      837    21359    3                 call M$FID( CHECK_FID ) altret(E_PMME);

  21359 16 000360   200242 630500                    EPPR0   CHECK_FID,,AUTO
        16 000361   420001 713400                    CLIMB   alt,+8193
        16 000362   404400 401760                    pmme    nvectors=10
        16 000363   002022 702000 16                 TSX2    E_PMME

      838    21360    3                 call M$OPEN( OPEN_FPT ) altret(E_PMME);

  21360 16 000364   200272 630500                    EPPR0   OPEN_FPT,,AUTO
        16 000365   450000 713400                    CLIMB   alt,open
        16 000366   410400 401760                    pmme    nvectors=18
        16 000367   002022 702000 16                 TSX2    E_PMME

      839    21361    3                 SI_FILE = %YES#;

  21361 16 000370   400000 236003                    LDQ     -131072,DU
        16 000371   200024 756100                    STQ     SI_FILE,,AUTO
        16 000372   000410 710000 16                 TRA     s:21371

      840    21362    3             CASE (%OPT_GATEWAY);

      841    21363    3                 GATEWAY = %YES#;

  21363 16 000373   400000 236003                    LDQ     -131072,DU
        16 000374   000000 756000 xsym               STQ     GATEWAY
        16 000375   000410 710000 16                 TRA     s:21371

      842    21364    3             CASE (%OPT_PREPROCESS);

      843    21365    3                 PREPROCESS_OPT = %YES#;

  21365 16 000376   400000 236003                    LDQ     -131072,DU
        16 000377   200025 756100                    STQ     PREPROCESS_OPT,,AUTO

      844    21366    3                 PREPROCESS = %YES#;

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:172  
  21366 16 000400   200026 756100                    STQ     PREPROCESS,,AUTO

      845    21367    3                 IF P$B.NSUBLKS > 0 THEN IF P$B.SUBLK$(0) -> P$B.CODE = %OPT_NO

  21367 16 000401   100001 222100                    LDX2    1,,PR1
        16 000402   000410 600000 16                 TZE     s:21371

  21367 16 000403   100003 473500                    LDP3    3,,PR1
        16 000404   300000 723100                    LXL3    0,,PR3
        16 000405   000037 103003                    CMPX3   31,DU
        16 000406   000410 601000 16                 TNZ     s:21371

      846    21368    3                      THEN
      847    21369    3                           PREPROCESS = %NO#;

  21369 16 000407   200026 450100                    STZ     PREPROCESS,,AUTO

      848    21370    3             END;

      849    21371    2        END;

  21371 16 000410   200135 054100                    AOS     J,,AUTO
        16 000411   200027 470500                    LDP0    OUT$,,AUTO
        16 000412   000001 236100                    LDQ     1,,PR0
        16 000413   000022 772000                    QRL     18
        16 000414   200135 116100                    CMPQ    J,,AUTO
        16 000415   000260 605400 16                 TPNZ    s:21344

      850    21372        /*
      851    21373             ***** Try to open the comgroup to MAILMAN now, to report up front
      852    21374                   if SEND won't work, then close it til later ...
      853    21375        */
      854    21376    1        CALL BINCHAR (VM_MAILCG_SETSTA.MYSTATION#,B$JIT.SYSID);

  21376 16 000416   000000 471400 xsym               LDP1    B$JIT$
        16 000417   100000 236100                    LDQ     0,,PR1
        16 000420   777777 376007                    ANQ     -1,DL
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:173  
        16 000421   000000 235003                    LDA     0,DU
        16 000422   200450 757100                    STAQ    P2$+1,,AUTO
        16 000423   000000 301500                    BTD
        16 000424   200450 000010                    NDSC9   P2$+1,,AUTO              cn=0,s=lsgnf,sf=0,n=8
        16 000425   000000 030010 xsym               NDSC9   VM_MAILCG_SETSTA         cn=0,s=nosgn,sf=0,n=8

      855    21377    1        CALL INSERT (VM_MAILCG_SETSTA.MYSTATION#,0,4,'SEND');

  21377 16 000426   001531 236000 13                 LDQ     E_PASTDEFER+1
        16 000427   000000 756000 xsym               STQ     VM_MAILCG_SETSTA

      856    21378    1        IF NOT TESTMODE

  21378 16 000430   000066 234000 11                 SZN     TESTMODE
        16 000431   000452 604000 16                 TMI     s:21386

      857    21379    2        THEN DO;

      858    21380    2             CALL M$OPEN (OPEN_MAILCG) ALTRET(E_CG);

  21380 16 000432   001232 630400 13                 EPPR0   OPEN_MAILCG
        16 000433   450000 713400                    CLIMB   alt,open
        16 000434   410400 401760                    pmme    nvectors=18
        16 000435   000453 702000 16                 TSX2    E_CG

      859    21381    2             VM_CGBUFFER.COMMAND = %VO_DUMMY#;

  21381 16 000436   000015 235007                    LDA     13,DL
        16 000437   001200 755000 11                 STA     VM_CGBUFFER+2

      860    21382    2             CALL M$WRITE (WRITE_MAILCG) ALTRET(E_CG);

  21382 16 000440   001162 630400 11                 EPPR0   WRITE_MAILCG
        16 000441   440001 713400                    CLIMB   alt,write
        16 000442   401400 401760                    pmme    nvectors=4
        16 000443   000453 702000 16                 TSX2    E_CG

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:174  
      861    21383    2             CLOSE_SAVE.V.DCB# = M$MAIL_COMGROUP_NUM;

  21383 16 000444   000000 720000 xsym               LXL0    M$MAIL_COMGROUP_NUM
        16 000445   001002 740000 11                 STX0    CLOSE_SAVE+26

      862    21384    2             CALL M$CLOSE (CLOSE_SAVE) ALTRET (E_CG);

  21384 16 000446   000750 630400 11                 EPPR0   CLOSE_SAVE
        16 000447   450001 713400                    CLIMB   alt,close
        16 000450   406000 401760                    pmme    nvectors=13
        16 000451   000453 702000 16                 TSX2    E_CG

      863    21385    2        END;

      864    21386    2        DO NEVER;

  21386 16 000452   000466 710000 16                 TRA     s:21399

      865    21387    2   E_CG:
      866    21388    2             CALL M$SENV;

  21388 16 000453   010011 713400       E_CG         CLIMB   4105
        16 000454   000000 401760                    pmme    nvectors=0

      867    21389    2             CALL VMA$ERRMSG (E_NCG1);

  21389 16 000455   000051 630400 17                 EPPR0   41
        16 000456   000003 631400 17                 EPPR1   3
        16 000457   000000 701000 xent               TSX1    VMA$ERRMSG
        16 000460   000000 011000                    NOP     0

      868    21390    2             CALL M$RENV;

  21390 16 000461   010016 713400                    CLIMB   4110
        16 000462   000000 401760                    pmme    nvectors=0

      869    21391    2             CALL MON_ERR;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:175  

  21391 16 000463   002075 701000 16                 TSX1    MON_ERR
        16 000464   000000 011000                    NOP     0

      870    21392    2             GOTO ABORT_SEND;

  21392 16 000465   002031 710000 16                 TRA     ABORT_SEND

      871    21393    2        END;

      872    21394        /*
      873    21395             ***** Reset dcbs #1 - #4
      874    21396                   they cause problems later when M$LINKing
      875    21397                   to other processors ...
      876    21398        */
      877    21399    1        IF B$JIT.PRFLAGS.SI

  21399 16 000466   000000 470400 xsym               LDP0    B$JIT$
        16 000467   000030 234100                    SZN     24,,PR0
        16 000470   000475 605000 16                 TPL     IGNORE_YC1

      878    21400    1        THEN
      879    21401    1             CALL M$YC (RESET_#1) ALTRET(IGNORE_YC1);

  21401 16 000471   001430 630400 13                 EPPR0   RESET_#1
        16 000472   400011 713400                    CLIMB   alt,+9
        16 000473   401000 401760                    pmme    nvectors=3
        16 000474   000475 702000 16                 TSX2    IGNORE_YC1

      880    21402    1   IGNORE_YC1:
      881    21403    1        IF B$JIT.PRFLAGS.UI

  21403 16 000475   000000 470400 xsym  IGNORE_YC1   LDP0    B$JIT$
        16 000476   000030 236100                    LDQ     24,,PR0
        16 000477   200000 316003                    CANQ    65536,DU
        16 000500   000505 600000 16                 TZE     IGNORE_YC2

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:176  
      882    21404    1        THEN
      883    21405    1             CALL M$YC (RESET_#2) ALTRET(IGNORE_YC2);

  21405 16 000501   001444 630400 13                 EPPR0   RESET_#2
        16 000502   400011 713400                    CLIMB   alt,+9
        16 000503   401000 401760                    pmme    nvectors=3
        16 000504   000505 702000 16                 TSX2    IGNORE_YC2

      884    21406    1   IGNORE_YC2:
      885    21407    1        IF B$JIT.PRFLAGS.OU

  21407 16 000505   000000 470400 xsym  IGNORE_YC2   LDP0    B$JIT$
        16 000506   000030 236100                    LDQ     24,,PR0
        16 000507   100000 316003                    CANQ    32768,DU
        16 000510   000515 600000 16                 TZE     IGNORE_YC3

      886    21408    1        THEN
      887    21409    1             CALL M$YC (RESET_#3) ALTRET(IGNORE_YC3);

  21409 16 000511   001460 630400 13                 EPPR0   RESET_#3
        16 000512   400011 713400                    CLIMB   alt,+9
        16 000513   401000 401760                    pmme    nvectors=3
        16 000514   000515 702000 16                 TSX2    IGNORE_YC3

      888    21410    1   IGNORE_YC3:
      889    21411    1        IF B$JIT.PRFLAGS.LS

  21411 16 000515   000000 470400 xsym  IGNORE_YC3   LDP0    B$JIT$
        16 000516   000030 236100                    LDQ     24,,PR0
        16 000517   040000 316003                    CANQ    16384,DU
        16 000520   000525 600000 16                 TZE     IGNORE_YC4

      890    21412    1        THEN
      891    21413    1             CALL M$YC (RESET_#4) ALTRET(IGNORE_YC4);

  21413 16 000521   001474 630400 13                 EPPR0   RESET_#4
        16 000522   400011 713400                    CLIMB   alt,+9
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:177  
        16 000523   401000 401760                    pmme    nvectors=3
        16 000524   000525 702000 16                 TSX2    IGNORE_YC4

  21411 16 000525                       IGNORE_YC4   null
      892    21414    1   IGNORE_YC4: ;
      893    21415        /*
      894    21416             ***** If the reason for entry is other than send,
      895    21417                   then the work file already contains useful info.
      896    21418                   Open it and pickup the header info ...
      897    21419        */
      898    21420    1        OPEN_FPT = OPEN_WORK;

  21420 16 000525   000100 100400                    MLR     fill='000'O
        16 000526   000242 000350 13                 ADSC9   OPEN_WORK                cn=0,n=232
        16 000527   200272 000350                    ADSC9   OPEN_FPT,,AUTO           cn=0,n=232

      899    21421    1        OPEN_FPT.V_ = VECTOR(OPEN_FPT.V);

  21421 16 000530   000041 235000 17                 LDA     33
        16 000531   200450 452500                    STP2    P2$+1,,AUTO
        16 000532   200450 236100                    LDQ     P2$+1,,AUTO
        16 000533   000336 036003                    ADLQ    222,DU
        16 000534   200272 757100                    STAQ    OPEN_FPT,,AUTO

      900    21422    1        IF ENTRY_REASON = %MAIL_ACK

  21422 16 000535   200136 235100                    LDA     ENTRY_REASON,,AUTO
        16 000536   000001 115007                    CMPA    1,DL
        16 000537   000542 600000 16                 TZE     s:21425
        16 000540   000002 115007                    CMPA    2,DL
        16 000541   000555 601000 16                 TNZ     s:21434

      901    21423    1          OR ENTRY_REASON = %MAIL_ANSWER
      902    21424    2        THEN DO;

      903    21425    2             OPEN_FPT.V.FUN# = %UPDATE#;

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:178  
  21425 16 000542   001000 236007                    LDQ     512,DL
        16 000543   200337 552110                    STBQ    OPEN_FPT+37,'10'O,AUTO

      904    21426    2             CALL M$OPEN (OPEN_FPT) ALTRET(E_PMME);

  21426 16 000544   200272 630500                    EPPR0   OPEN_FPT,,AUTO
        16 000545   450000 713400                    CLIMB   alt,open
        16 000546   410400 401760                    pmme    nvectors=18
        16 000547   002022 702000 16                 TSX2    E_PMME

      905    21427    2             CALL VMD$GET_HEADER (0,M$WORK_NUM) ALTRET(E_PMME);

  21427 16 000550   000052 630400 17                 EPPR0   42
        16 000551   000000 631400 17                 EPPR1   0
        16 000552   000000 701000 xent               TSX1    VMD$GET_HEADER
        16 000553   002022 702000 16                 TSX2    E_PMME

      906    21428    2        END;

  21428 16 000554   000574 710000 16                 TRA     s:21443

      907    21429        /*
      908    21430             ***** Otherwise, create new work file
      909    21431                   and initialize a default header ...
      910    21432        */
      911    21433    2        ELSE DO;

      912    21434    2             OPEN_FPT.V.FUN# = %CREATE#;

  21434 16 000555   003000 236007                    LDQ     1536,DL
        16 000556   200337 552110                    STBQ    OPEN_FPT+37,'10'O,AUTO

      913    21435    2             CALL M$OPEN (OPEN_FPT) ALTRET(E_PMME);

  21435 16 000557   200272 630500                    EPPR0   OPEN_FPT,,AUTO
        16 000560   450000 713400                    CLIMB   alt,open
        16 000561   410400 401760                    pmme    nvectors=18
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:179  
        16 000562   002022 702000 16                 TSX2    E_PMME

      914    21436    2             VM_HEADER = CVM_HEADER;

  21436 16 000563   000000 470400 xsym               LDP0    VM_HEADER$
        16 000564   000100 100400                    MLR     fill='000'O
        16 000565   000160 000224 13                 ADSC9   CVM_HEADER               cn=0,n=148
        16 000566   000000 000224                    ADSC9   0,,PR0                   cn=0,n=148

      915    21437    2             VM_HEADER.NEXT$ = ADDR(VM_HEADER.WORK_AREA);

  21437 16 000567   000000 236000 xsym               LDQ     VM_HEADER$
        16 000570   000044 036003                    ADLQ    36,DU
        16 000571   000016 756100                    STQ     14,,PR0

      916    21438    2             VM_HEADER.HEADER_SIZE = 1024;

  21438 16 000572   002000 235007                    LDA     1024,DL
        16 000573   000000 755100                    STA     0,,PR0

      917    21439    2        END;

      918    21440        /*
      919    21441             ***** Initialize MCB to manage VM_HEADER.WORK_AREA ...
      920    21442        */
      921    21443    1        MCB.TYPE = 0;                    /* Bytes */

  21443 16 000574   000744 450000 11                 STZ     MCB+5

      922    21444    1        MCB.MIN_SIZE = 12;

  21444 16 000575   000014 235007                    LDA     12,DL
        16 000576   000746 755000 11                 STA     MCB+7

      923    21445    1        MCB.SEGMENT_BASE$ = VM_HEADER$;

  21445 16 000577   000000 236000 xsym               LDQ     VM_HEADER$
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:180  
        16 000600   000741 756000 11                 STQ     MCB+2

      924    21446    1        MCB.HI_SEGMENT$ = VM_HEADER.NEXT$;

  21446 16 000601   000000 470400 xsym               LDP0    VM_HEADER$
        16 000602   000016 236100                    LDQ     14,,PR0
        16 000603   000742 756000 11                 STQ     MCB+3

      925    21447    1        MCB.WKSZ = VM_HEADER.HEADER_SIZE;

  21447 16 000604   000000 235100                    LDA     0,,PR0
        16 000605   000743 755000 11                 STA     MCB+4

      926    21448    1        MCB.FREE_HEAD$ = VM_HEADER.FREE$;

  21448 16 000606   000015 236100                    LDQ     13,,PR0
        16 000607   000740 756000 11                 STQ     MCB+1

      927    21449        /*
      928    21450             ***** Open the user's central folder unless
      929    21451                   the user had specified to use a different folder ...
      930    21452        */
      931    21453    1        IF DCBADDR(M$MAIL_FILE_NUM) -> F$DCB.FCD# = %NO#

  21453 16 000610   000054 471400 17                 LDP1    44
        16 000611   100000 473500                    LDP3    0,,PR1
        16 000612   000000 720000 xsym               LXL0    M$MAIL_FILE_NUM
        16 000613   300000 474510                    LDP4    0,X0,PR3
        16 000614   400031 236100                    LDQ     25,,PR4
        16 000615   020000 316007                    CANQ    8192,DL
        16 000616   000731 601000 16                 TNZ     s:21475

      932    21454    2        THEN DO;

      933    21455    2             CALL VMB$USE_DEFAULT (,USER_NAME,VM_CURRENT_FOLDER,

  21455 16 000617   000057 236000 17                 LDQ     47
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:181  
        16 000620   200456 756100                    STQ     P2$+7,,AUTO
        16 000621   000042 237000 17                 LDAQ    34
        16 000622   200454 757100                    STAQ    P2$+5,,AUTO
        16 000623   000044 237000 17                 LDAQ    36
        16 000624   200452 757100                    STAQ    P2$+3,,AUTO
        16 000625   200032 635500                    EPPR5   USER_NAME,,AUTO
        16 000626   200451 455500                    STP5    P2$+2,,AUTO
        16 000627   000032 236000 17                 LDQ     26
        16 000630   200450 756100                    STQ     P2$+1,,AUTO
        16 000631   200450 630500                    EPPR0   P2$+1,,AUTO
        16 000632   000055 631400 17                 EPPR1   45
        16 000633   000000 701000 xent               TSX1    VMB$USE_DEFAULT
        16 000634   000636 702000 16                 TSX2    s:21458
        16 000635   000731 710000 16                 TRA     s:21475

      934    21456    2               M$MAIL_FILE_NUM,VM_SEARCH_INFO,%UPDATE#,'1'B)
      935    21457    3             WHENALTRETURN DO;

      936    21458    4                  call VMB$TESTREG(USER_NAME) whenreturn do;

  21458 16 000636   200032 630500                    EPPR0   USER_NAME,,AUTO
        16 000637   200450 450500                    STP0    P2$+1,,AUTO
        16 000640   200450 630500                    EPPR0   P2$+1,,AUTO
        16 000641   000003 631400 17                 EPPR1   3
        16 000642   000000 701000 xent               TSX1    VMB$TESTREG
        16 000643   000645 702000 16                 TSX2    s:21461

      937    21459    4                       goto BAD_MAIL;;

  21459 16 000644   000745 710000 16                 TRA     BAD_MAIL

      938    21460    4                  end;
      939    21461    3                  if B$JIT.ACCN = SUBSTR(USER_NAME.NAME#,1,8)

  21461 16 000645   000000 470400 xsym               LDP0    B$JIT$
        16 000646   040100 106500                    CMPC    fill='040'O
        16 000647   000001 000010                    ADSC9   1,,PR0                   cn=0,n=8
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:182  
        16 000650   200032 400010                    ADSC9   USER_NAME,,AUTO          cn=2,n=8
        16 000651   000745 600000 16                 TZE     BAD_MAIL

      940    21462    3                  then goto BAD_MAIL;
      941    21463                            /* Try for logon account */
      942    21464    3                  USER_NAME.L# = LENGTHC(B$JIT.ACCN) + 1;

  21464 16 000652   011000 236003                    LDQ     4608,DU
        16 000653   200032 552140                    STBQ    USER_NAME,'40'O,AUTO

      943    21465    3                  substr(USER_NAME.NAME#,0,1) = '.';

  21465 16 000654   000056 236003                    LDQ     46,DU
        16 000655   200032 552120                    STBQ    USER_NAME,'20'O,AUTO

      944    21466    3                  SUBSTR(USER_NAME.NAME#,1,8)=B$JIT.ACCN;

  21466 16 000656   040100 100500                    MLR     fill='040'O
        16 000657   000001 000010                    ADSC9   1,,PR0                   cn=0,n=8
        16 000660   200032 400010                    ADSC9   USER_NAME,,AUTO          cn=2,n=8

      945    21467    3                  CALL VMB$USE_DEFAULT (,USER_NAME,VM_CURRENT_FOLDER,

  21467 16 000661   000057 236000 17                 LDQ     47
        16 000662   200456 756100                    STQ     P2$+7,,AUTO
        16 000663   000042 237000 17                 LDAQ    34
        16 000664   200454 757100                    STAQ    P2$+5,,AUTO
        16 000665   000044 237000 17                 LDAQ    36
        16 000666   200452 757100                    STAQ    P2$+3,,AUTO
        16 000667   200032 631500                    EPPR1   USER_NAME,,AUTO
        16 000670   200451 451500                    STP1    P2$+2,,AUTO
        16 000671   000032 236000 17                 LDQ     26
        16 000672   200450 756100                    STQ     P2$+1,,AUTO
        16 000673   200450 630500                    EPPR0   P2$+1,,AUTO
        16 000674   000055 631400 17                 EPPR1   45
        16 000675   000000 701000 xent               TSX1    VMB$USE_DEFAULT
        16 000676   000745 702000 16                 TSX2    BAD_MAIL
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:183  

      946    21468    3                    M$MAIL_FILE_NUM,VM_SEARCH_INFO,%UPDATE#,'1'B) ALTRET(BAD_MAIL);
      947    21469    3                  TEMP_TEXTC.L#=SIZEC(TEMP_TEXTC.NAME#);

  21469 16 000677   400000 236003                    LDQ     -131072,DU
        16 000700   200141 552140                    STBQ    TEMP_TEXTC,'40'O,AUTO

      948    21470    3                  CALL VMF$MAKE_ADDRESS1(TEMP_TEXTC,VM_CURRENT_FOLDER);

  21470 16 000701   000044 236000 17                 LDQ     36
        16 000702   200451 756100                    STQ     P2$+2,,AUTO
        16 000703   200141 630500                    EPPR0   TEMP_TEXTC,,AUTO
        16 000704   200450 450500                    STP0    P2$+1,,AUTO
        16 000705   200450 630500                    EPPR0   P2$+1,,AUTO
        16 000706   000000 631400 17                 EPPR1   0
        16 000707   000000 701000 xent               TSX1    VMF$MAKE_ADDRESS1
        16 000710   000000 011000                    NOP     0

      949    21471    3                  call XUR$INFOMSG(E_USING_MSG_FMT,,M$ME_NUM,vector(TEMP_TEXTC));

  21471 16 000711   000060 235000 17                 LDA     48
        16 000712   200450 452500                    STP2    P2$+1,,AUTO
        16 000713   200450 236100                    LDQ     P2$+1,,AUTO
        16 000714   000141 036003                    ADLQ    97,DU
        16 000715   200452 757100                    STAQ    P2$+3,,AUTO
        16 000716   200452 630500                    EPPR0   P2$+3,,AUTO
        16 000717   200457 450500                    STP0    P2$+8,,AUTO
        16 000720   000022 236000 17                 LDQ     18
        16 000721   200456 756100                    STQ     P2$+7,,AUTO
        16 000722   000032 236000 17                 LDQ     26
        16 000723   000061 235000 17                 LDA     49
        16 000724   200454 757100                    STAQ    P2$+5,,AUTO
        16 000725   200454 630500                    EPPR0   P2$+5,,AUTO
        16 000726   000024 631400 17                 EPPR1   20
        16 000727   000000 701000 xent               TSX1    XUR$INFOMSG
        16 000730   000000 011000                    NOP     0

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:184  
      950    21472    3             END;                /* Whenaltreturn */

      951    21473    2        END;

      952    21474
      953    21475    1        IF VM_CURRENT_FOLDER.FLAGS.UPDATE = %NO#

  21475 16 000731   000315 234000 11                 SZN     VM_CURRENT_FOLDER+19
        16 000732   000740 604000 16                 TMI     s:21489

      954    21476    2        THEN DO;

      955    21477
      956    21478        /*E* ERROR: VNS-E$NOTALLOW-0
      957    21479             MESSAGE: You are not allowed to send from this mailbox.
      958    21480             MESSAGE1: You must have write access to send from a mailbox.
      959    21481             */
      960    21482
      961    21483    2             CALL VMA$ERRMSG(E_NOTALLOW);

  21483 16 000733   000062 630400 17                 EPPR0   50
        16 000734   000003 631400 17                 EPPR1   3
        16 000735   000000 701000 xent               TSX1    VMA$ERRMSG
        16 000736   000000 011000                    NOP     0

      962    21484    2             GOTO ABORT_SEND;

  21484 16 000737   002031 710000 16                 TRA     ABORT_SEND

      963    21485    2        END;
      964    21486        /*
      965    21487             ***** Get the profile record from the specified folder ...
      966    21488        */
      967    21489    1        CALL VMD$GET_PROFILE (M$MAIL_FILE_NUM) ALTRET(BAD_MAIL);

  21489 16 000740   000045 630400 17                 EPPR0   37
        16 000741   000003 631400 17                 EPPR1   3
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:185  
        16 000742   000000 701000 xent               TSX1    VMD$GET_PROFILE
        16 000743   000745 702000 16                 TSX2    BAD_MAIL

      968    21490    2        DO NEVER;

  21490 16 000744   000760 710000 16                 TRA     s:21504

  21475 16 000745                       BAD_MAIL     null
      969    21491    2   BAD_MAIL: ;
      970    21492        /*E* ERROR:VNS-E$BADMAIL-0
      971    21493             MESSAGE: Monitor error trying to open the mail file
      972    21494              */
      973    21495    2             CALL M$SENV;

  21495 16 000745   010011 713400                    CLIMB   4105
        16 000746   000000 401760                    pmme    nvectors=0

      974    21496    2             CALL VMA$ERRMSG(E_BADMAIL);

  21496 16 000747   000063 630400 17                 EPPR0   51
        16 000750   000003 631400 17                 EPPR1   3
        16 000751   000000 701000 xent               TSX1    VMA$ERRMSG
        16 000752   000000 011000                    NOP     0

      975    21497    2             CALL M$RENV;

  21497 16 000753   010016 713400                    CLIMB   4110
        16 000754   000000 401760                    pmme    nvectors=0

      976    21498    2             CALL MON_ERR;

  21498 16 000755   002075 701000 16                 TSX1    MON_ERR
        16 000756   000000 011000                    NOP     0

      977    21499    2             GOTO ABORT_SEND;

  21499 16 000757   002031 710000 16                 TRA     ABORT_SEND
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:186  

      978    21500    2        END;

      979    21501        /*
      980    21502             ***** Setup default editor name ...
      981    21503        */
      982    21504    1        TMP$ = VM_PROFILE.EDITOR$;

  21504 16 000760   000000 470400 xsym               LDP0    VM_PROFILE$
        16 000761   000137 236100                    LDQ     95,,PR0
        16 000762   200031 756100                    STQ     TMP$,,AUTO

      983    21505    1        IF TMPR$.SEGID = %DS3SID /* for backward compatibility */

  21505 16 000763   200031 236100                    LDQ     TMP$,,AUTO
        16 000764   007777 376007                    ANQ     4095,DL
        16 000765   006006 116007                    CMPQ    3078,DL
        16 000766   000771 601000 16                 TNZ     s:21511

      984    21506    1        THEN
      985    21507    1             DEFAULT_EDITOR$ = TMP$;

  21507 16 000767   200031 236100                    LDQ     TMP$,,AUTO
        16 000770   000111 756000 11                 STQ     DEFAULT_EDITOR$

      986    21508        /*
      987    21509             ***** Set up search list in VM_SEARCH_INFO ...
      988    21510        */
      989    21511    1        VM_SEARCH_INFO.CURRENT = '1'B;   /* It must be ok if we got this far */

  21511 16 000771   100000 236003                    LDQ     32768,DU
        16 000772   000271 256000 11                 ORSQ    VM_SEARCH_INFO+34

      990    21512    1        CALL VMA$OPEN_SRCH_LIST (VM_SEARCH_INFO);

  21512 16 000773   000042 630400 17                 EPPR0   34
        16 000774   000003 631400 17                 EPPR1   3
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:187  
        16 000775   000000 701000 xent               TSX1    VMA$OPEN_SRCH_LIST
        16 000776   000000 011000                    NOP     0

      991    21513        /*
      992    21514            ***** Setup preprocessing option ...
      993    21515        */
      994    21516    1        IF GATEWAY

  21516 16 000777   000000 234000 xsym               SZN     GATEWAY
        16 001000   001003 605000 16                 TPL     s:21520

      995    21517    1        THEN
      996    21518    1             PREPROCESS = %NO#;

  21518 16 001001   200026 450100                    STZ     PREPROCESS,,AUTO
        16 001002   001012 710000 16                 TRA     s:21523

      997    21519    1        ELSE
      998    21520    1             IF NOT PREPROCESS_OPT

  21520 16 001003   200025 234100                    SZN     PREPROCESS_OPT,,AUTO
        16 001004   001012 604000 16                 TMI     s:21523

      999    21521    1             THEN
     1000    21522    1                  PREPROCESS = VM_PROFILE.OPT.PREPROCESS;

  21522 16 001005   000000 470400 xsym               LDP0    VM_PROFILE$
        16 001006   000001 236100                    LDQ     1,,PR0
        16 001007   000001 736000                    QLS     1
        16 001010   400000 376003                    ANQ     -131072,DU
        16 001011   200026 756100                    STQ     PREPROCESS,,AUTO

     1001    21523    1        IF PREPROCESS ~= XUR_INIT.PREPROCESS#

  21523 16 001012   000000 066500                    CMPB    filb='0'B
        16 001013   200026 000001                    BDSC    PREPROCESS,,AUTO         by=0,bit=0,n=1
        16 001014   000016 010001 11                 BDSC    XUR_INIT                 by=0,bit=1,n=1
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:188  
        16 001015   001033 600000 16                 TZE     s:21532

     1002    21524    2        THEN DO;

     1003    21525    2             XUR_INIT.PREPROCESS# = PREPROCESS;

  21525 16 001016   200026 236100                    LDQ     PREPROCESS,,AUTO
        16 001017   000001 772000                    QRL     1
        16 001020   000016 676000 11                 ERQ     XUR_INIT
        16 001021   200000 376003                    ANQ     65536,DU
        16 001022   000016 656000 11                 ERSQ    XUR_INIT

     1004    21526    2             CALL XUR$INIT (XUR_INIT);

  21526 16 001023   000020 630400 17                 EPPR0   16
        16 001024   000003 631400 17                 EPPR1   3
        16 001025   000000 701000 xent               TSX1    XUR$INIT
        16 001026   000000 011000                    NOP     0

     1005    21527    2             CALL XUR$SETERRMSG (ERRMSG_FID);

  21527 16 001027   000023 630400 17                 EPPR0   19
        16 001030   000003 631400 17                 EPPR1   3
        16 001031   000000 701000 xent               TSX1    XUR$SETERRMSG
        16 001032   000000 011000                    NOP     0

     1006    21528    2        END;

     1007    21529        /*
     1008    21530             ***** Setup return address information ...
     1009    21531        */
     1010    21532    1        VM_RADDRESS.ACCT = VM_CURRENT_FOLDER.ACCT;

  21532 16 001033   040000 100400                    MLR     fill='040'O
        16 001034   000273 400010 11                 ADSC9   VM_CURRENT_FOLDER+1      cn=2,n=8
        16 001035   000633 600010 11                 ADSC9   VM_RADDRESS+17           cn=3,n=8

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:189  
     1011    21533    1        VM_RADDRESS.PASS = ' ';

  21533 16 001036   040000 100400                    MLR     fill='040'O
        16 001037   000064 000001 17                 ADSC9   52                       cn=0,n=1
        16 001040   000627 600010 11                 ADSC9   VM_RADDRESS+13           cn=3,n=8

     1012    21534    1        VM_RADDRESS.SITENAME = VM_CURRENT_FOLDER.SITENAME;

  21534 16 001041   040000 100400                    MLR     fill='040'O
        16 001042   000305 600010 11                 ADSC9   VM_CURRENT_FOLDER+11     cn=3,n=8
        16 001043   000631 600010 11                 ADSC9   VM_RADDRESS+15           cn=3,n=8

     1013    21535    1        VM_RADDRESS.TYPE = %VM_ADD_RESOLVED;

  21535 16 001044   000001 236003                    LDQ     1,DU
        16 001045   000614 552020 11                 STBQ    VM_RADDRESS+2,'20'O

     1014    21536    1        VM_RADDRESS.NEXT$ = ADDR(NIL);

  21536 16 001046   000032 236000 17                 LDQ     26
        16 001047   000612 756000 11                 STQ     VM_RADDRESS

     1015    21537    1        VM_RADDRESS.PREV$ = ADDR(NIL);

  21537 16 001050   000613 756000 11                 STQ     VM_RADDRESS+1

     1016    21538    1        CALL CONCAT (VM_RADDRESS.NAME_KEY, B$JIT.ACCN, B$JIT.UNAME);

  21538 16 001051   000000 470400 xsym               LDP0    B$JIT$
        16 001052   040000 100500                    MLR     fill='040'O
        16 001053   000001 000010                    ADSC9   1,,PR0                   cn=0,n=8
        16 001054   000614 400010 11                 ADSC9   VM_RADDRESS+2            cn=2,n=8
        16 001055   040000 100500                    MLR     fill='040'O
        16 001056   000003 000014                    ADSC9   3,,PR0                   cn=0,n=12
        16 001057   000616 400014 11                 ADSC9   VM_RADDRESS+4            cn=2,n=12

     1017    21539    1        IF VM_CURRENT_FOLDER.PSID = ' '
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:190  

  21539 16 001060   040000 106400                    CMPC    fill='040'O
        16 001061   000272 000006 11                 ADSC9   VM_CURRENT_FOLDER        cn=0,n=6
        16 001062   000064 000001 17                 ADSC9   52                       cn=0,n=1
        16 001063   001070 601000 16                 TNZ     s:21543

     1018    21540    1        THEN
     1019    21541    1             VM_RADDRESS.FOLDER = VM_CURRENT_FOLDER.FOLDER;

  21541 16 001064   040000 100400                    MLR     fill='040'O
        16 001065   000275 400031 11                 ADSC9   VM_CURRENT_FOLDER+3      cn=2,n=25
        16 001066   000621 400031 11                 ADSC9   VM_RADDRESS+7            cn=2,n=25
        16 001067   001100 710000 16                 TRA     s:21547

     1020    21542    2        ELSE DO;

     1021    21543    2             VM_RADDRESS.NOMAD.FOLDER = VM_CURRENT_FOLDER.FOLDER;

  21543 16 001070   040000 100400                    MLR     fill='040'O
        16 001071   000275 400022 11                 ADSC9   VM_CURRENT_FOLDER+3      cn=2,n=18
        16 001072   000621 400022 11                 ADSC9   VM_RADDRESS+7            cn=2,n=18

     1022    21544    2             VM_RADDRESS.NOMAD.DELIM = ' ';

  21544 16 001073   040000 236003                    LDQ     16384,DU
        16 001074   000626 552040 11                 STBQ    VM_RADDRESS+12,'40'O

     1023    21545    2             VM_RADDRESS.NOMAD.PSID = VM_CURRENT_FOLDER.PSID;

  21545 16 001075   040000 100400                    MLR     fill='040'O
        16 001076   000272 000006 11                 ADSC9   VM_CURRENT_FOLDER        cn=0,n=6
        16 001077   000626 200006 11                 ADSC9   VM_RADDRESS+12           cn=1,n=6

     1024    21546    2        END;

     1025    21547    1       CALL ALLOC$RADDRESS( VM_HEADER.RETURN_ADDRESS$, VM_RADDRESS) ALTRET(E_ALLOCATE)
             21547                 ;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:191  

  21547 16 001100   000065 236000 17                 LDQ     53
        16 001101   200440 756100                    STQ     @FLD$+1,,AUTO
        16 001102   000000 236000 xsym               LDQ     VM_HEADER$
        16 001103   000026 036003                    ADLQ    22,DU
        16 001104   200437 756100                    STQ     NEW_TYPE+2,,AUTO
        16 001105   006023 701000 16                 TSX1    ALLOC$RADDRESS
        16 001106   002025 702000 16                 TSX2    E_ALLOCATE

     1026    21548        /*
     1027    21549             ***** Setup the FILE_FOLDER address ...
     1028    21550        */
     1029    21551    1        IF VM_PROFILE.FILE_FOLDER$ ~= ADDR(NIL)

  21551 16 001107   000000 470400 xsym               LDP0    VM_PROFILE$
        16 001110   000114 236100                    LDQ     76,,PR0
        16 001111   000032 116000 17                 CMPQ    26
        16 001112   001122 600000 16                 TZE     s:21559

     1030    21552    2        THEN DO;

     1031    21553    2             CALL ALLOC$RADDRESS (VM_HEADER.FILE_FOLDER$,

  21553 16 001113   000114 471500                    LDP1    76,,PR0
        16 001114   200440 451500                    STP1    @FLD$+1,,AUTO
        16 001115   000000 236000 xsym               LDQ     VM_HEADER$
        16 001116   000022 036003                    ADLQ    18,DU
        16 001117   200437 756100                    STQ     NEW_TYPE+2,,AUTO
        16 001120   006023 701000 16                 TSX1    ALLOC$RADDRESS
        16 001121   002025 702000 16                 TSX2    E_ALLOCATE

     1032    21554    2               VM_PROFILE.FILE_FOLDER$ -> VM$RADDRESS) ALTRET(E_ALLOCATE);
     1033    21555    2        END;

     1034    21556        /*
     1035    21557             ***** Set up the default reply-to address ...
     1036    21558        */
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:192  
     1037    21559    1        TMP$ = VM_PROFILE.REPLY_TO$;

  21559 16 001122   000000 470400 xsym               LDP0    VM_PROFILE$
        16 001123   000140 236100                    LDQ     96,,PR0
        16 001124   200031 756100                    STQ     TMP$,,AUTO

     1038    21560    1        IF TMPR$.SEGID = %DS3SID /* for backward compatibility */

  21560 16 001125   200031 236100                    LDQ     TMP$,,AUTO
        16 001126   007777 376007                    ANQ     4095,DL
        16 001127   006006 116007                    CMPQ    3078,DL
        16 001130   001151 601000 16                 TNZ     s:21567

     1039    21561    2        THEN DO;

     1040    21562    2             SIZE = VM_PROFILE.REPLY_TO$ -> X$STRING.SIZ;

  21562 16 001131   000140 471500                    LDP1    96,,PR0
        16 001132   000100 101500                    MRL     fill='000'O
        16 001133   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
        16 001134   200133 000004                    ADSC9   SIZE,,AUTO               cn=0,n=4

     1041    21563    2             CALL ALLOC$TEXTC (VM_HEADER.REPLY_TO$, SIZE,

  21563 16 001135   200450 451500                    STP1    P2$+1,,AUTO
        16 001136   200450 236100                    LDQ     P2$+1,,AUTO
        16 001137   200000 036007                    ADLQ    65536,DL
        16 001140   200441 756100                    STQ     @SIZE+1,,AUTO
        16 001141   200133 633500                    EPPR3   SIZE,,AUTO
        16 001142   200440 453500                    STP3    @FLD$+1,,AUTO
        16 001143   000000 236000 xsym               LDQ     VM_HEADER$
        16 001144   000025 036003                    ADLQ    21,DU
        16 001145   200437 756100                    STQ     NEW_TYPE+2,,AUTO
        16 001146   006011 701000 16                 TSX1    ALLOC$TEXTC
        16 001147   002025 702000 16                 TSX2    E_ALLOCATE

     1042    21564    2               VM_PROFILE.REPLY_TO$ -> X$STRING.TEXT) ALTRET(E_ALLOCATE);
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:193  
     1043    21565    2        END;

  21565 16 001150   001201 710000 16                 TRA     s:21575

     1044    21566    2        ELSE DO;

     1045    21567    2             TEMP_TEXTC.L# = LENGTHC(TEMP_TEXTC.NAME#);

  21567 16 001151   400000 236003                    LDQ     -131072,DU
        16 001152   200141 552140                    STBQ    TEMP_TEXTC,'40'O,AUTO

     1046    21568    2             CALL VMF$MAKE_ADDRESS1SITE (TEMP_TEXTC,VM_CURRENT_FOLDER);

  21568 16 001153   000044 236000 17                 LDQ     36
        16 001154   200451 756100                    STQ     P2$+2,,AUTO
        16 001155   200141 631500                    EPPR1   TEMP_TEXTC,,AUTO
        16 001156   200450 451500                    STP1    P2$+1,,AUTO
        16 001157   200450 630500                    EPPR0   P2$+1,,AUTO
        16 001160   000000 631400 17                 EPPR1   0
        16 001161   000000 701000 xent               TSX1    VMF$MAKE_ADDRESS1SITE
        16 001162   000000 011000                    NOP     0

     1047    21569    2             SIZE = TEMP_TEXTC.L#;

  21569 16 001163   200141 236100                    LDQ     TEMP_TEXTC,,AUTO
        16 001164   000033 772000                    QRL     27
        16 001165   200133 756100                    STQ     SIZE,,AUTO

     1048    21570    2             CALL ALLOC$TEXTC (VM_HEADER.REPLY_TO$, SIZE, TEMP_TEXTC.NAME#) ALTRET(
             21570                      E_ALLOCATE);

  21570 16 001166   200450 452500                    STP2    P2$+1,,AUTO
        16 001167   200450 236100                    LDQ     P2$+1,,AUTO
        16 001170   000066 036000 17                 ADLQ    54
        16 001171   200441 756100                    STQ     @SIZE+1,,AUTO
        16 001172   200133 630500                    EPPR0   SIZE,,AUTO
        16 001173   200440 450500                    STP0    @FLD$+1,,AUTO
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:194  
        16 001174   000000 236000 xsym               LDQ     VM_HEADER$
        16 001175   000025 036003                    ADLQ    21,DU
        16 001176   200437 756100                    STQ     NEW_TYPE+2,,AUTO
        16 001177   006011 701000 16                 TSX1    ALLOC$TEXTC
        16 001200   002025 702000 16                 TSX2    E_ALLOCATE

     1049    21571    2        END;

     1050    21572        /*
     1051    21573             ***** Convert the address and write the reply-to address record ...
     1052    21574        */
     1053    21575    1        CALL XUR$GETCMD (CMD_RTO$->BSD,OUT$,,VM_HEADER.REPLY_TO$->X$STRING.TEXT,SIZE)

  21575 16 001201   000000 470400 xsym               LDP0    VM_HEADER$
        16 001202   000025 471500                    LDP1    21,,PR0
        16 001203   200133 633500                    EPPR3   SIZE,,AUTO
        16 001204   200454 453500                    STP3    P2$+5,,AUTO
        16 001205   200455 451500                    STP1    P2$+6,,AUTO
        16 001206   200455 236100                    LDQ     P2$+6,,AUTO
        16 001207   200000 036007                    ADLQ    65536,DL
        16 001210   000032 235000 17                 LDA     26
        16 001211   200452 757100                    STAQ    P2$+3,,AUTO
        16 001212   200027 634500                    EPPR4   OUT$,,AUTO
        16 001213   200451 454500                    STP4    P2$+2,,AUTO
        16 001214   200010 236100                    LDQ     CMD_RTO$,,AUTO
        16 001215   200450 756100                    STQ     P2$+1,,AUTO
        16 001216   200450 630500                    EPPR0   P2$+1,,AUTO
        16 001217   000035 631400 17                 EPPR1   29
        16 001220   000000 701000 xent               TSX1    XUR$GETCMD
        16 001221   001223 702000 16                 TSX2    s:21577
        16 001222   001232 710000 16                 TRA     s:21580

     1054    21576    2        WHENALTRETURN DO;

     1055    21577    2             CALL VMA$ERRMSG (OUTERR);

  21577 16 001223   200027 630500                    EPPR0   OUT$,,AUTO
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:195  
        16 001224   200450 450500                    STP0    P2$+1,,AUTO
        16 001225   200450 630500                    EPPR0   P2$+1,,AUTO
        16 001226   000003 631400 17                 EPPR1   3
        16 001227   000000 701000 xent               TSX1    VMA$ERRMSG
        16 001230   000000 011000                    NOP     0

     1056    21578    2             GOTO ABORT_SEND;

  21578 16 001231   002031 710000 16                 TRA     ABORT_SEND

     1057    21579    2        END;
     1058    21580    1        CALL GET$ADDLIST(%VM_TYPE_RTO)

  21580 16 001232   000070 236000 17                 LDQ     56
        16 001233   200375 756100                    STQ     @NODE$+1,,AUTO
        16 001234   005450 701000 16                 TSX1    GET$ADDLIST
        16 001235   001237 702000 16                 TSX2    s:21582
        16 001236   001244 710000 16                 TRA     s:21588

     1059    21581    2        WHENALTRETURN DO;

     1060    21582    2             CALL VMA$ERRMSG (E_BADRTOADDRESS);

  21582 16 001237   000071 630400 17                 EPPR0   57
        16 001240   000003 631400 17                 EPPR1   3
        16 001241   000000 701000 xent               TSX1    VMA$ERRMSG
        16 001242   000000 011000                    NOP     0

     1061    21583    2             GOTO ABORT_SEND;

  21583 16 001243   002031 710000 16                 TRA     ABORT_SEND

     1062    21584    2        END;
     1063    21585        /*
     1064    21586             ***** Setup from information
     1065    21587        */
     1066    21588    1        TEMP_TEXTC.L# = LENGTHC(TEMP_TEXTC.NAME#);
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:196  

  21588 16 001244   400000 236003                    LDQ     -131072,DU
        16 001245   200141 552140                    STBQ    TEMP_TEXTC,'40'O,AUTO

     1067    21589    1        TEMP_TEXTC.NAME# = ' ';

  21589 16 001246   040100 100400                    MLR     fill='040'O
        16 001247   000064 000001 17                 ADSC9   52                       cn=0,n=1
        16 001250   200141 200400                    ADSC9   TEMP_TEXTC,,AUTO         cn=1,n=256

     1068    21590    1        CALL VMF$FROM (TEMP_TEXTC) ALTRET(E_PMME);

  21590 16 001251   200141 630500                    EPPR0   TEMP_TEXTC,,AUTO
        16 001252   200450 450500                    STP0    P2$+1,,AUTO
        16 001253   200450 630500                    EPPR0   P2$+1,,AUTO
        16 001254   000003 631400 17                 EPPR1   3
        16 001255   000000 701000 xent               TSX1    VMF$FROM
        16 001256   002022 702000 16                 TSX2    E_PMME

     1069    21591    2        call VMB$TESTREG(TEMP_TEXTC) whenaltreturn do;

  21591 16 001257   200141 630500                    EPPR0   TEMP_TEXTC,,AUTO
        16 001260   200450 450500                    STP0    P2$+1,,AUTO
        16 001261   200450 630500                    EPPR0   P2$+1,,AUTO
        16 001262   000003 631400 17                 EPPR1   3
        16 001263   000000 701000 xent               TSX1    VMB$TESTREG
        16 001264   001266 702000 16                 TSX2    s:21593
        16 001265   001306 710000 16                 TRA     s:21598

     1070    21592              /**  Unregistered User, FROM: B$JIT.ACCN   **/
     1071    21593    2             substr(TEMP_TEXTC.NAME#,1) = B$JIT.ACCN;

  21593 16 001266   000000 470400 xsym               LDP0    B$JIT$
        16 001267   040100 100500                    MLR     fill='040'O
        16 001270   000001 000010                    ADSC9   1,,PR0                   cn=0,n=8
        16 001271   200141 400377                    ADSC9   TEMP_TEXTC,,AUTO         cn=2,n=255

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:197  
     1072    21594    2             substr(TEMP_TEXTC.NAME#,0,1) = '.'; /*  DP#psid.acct   */

  21594 16 001272   000056 236003                    LDQ     46,DU
        16 001273   200141 552120                    STBQ    TEMP_TEXTC,'20'O,AUTO

     1073    21595    2             TEMP_TEXTC.L# = lengthc(TEMP_TEXTC.NAME#);

  21595 16 001274   400000 236003                    LDQ     -131072,DU
        16 001275   200141 552140                    STBQ    TEMP_TEXTC,'40'O,AUTO

     1074    21596    2             call X$STRIP_BLANKS( addr(TEMP_TEXTC) );

  21596 16 001276   200141 631500                    EPPR1   TEMP_TEXTC,,AUTO
        16 001277   200450 451500                    STP1    P2$+1,,AUTO
        16 001300   200450 633500                    EPPR3   P2$+1,,AUTO
        16 001301   200451 453500                    STP3    P2$+2,,AUTO
        16 001302   200451 630500                    EPPR0   P2$+2,,AUTO
        16 001303   000003 631400 17                 EPPR1   3
        16 001304   000000 701000 xent               TSX1    X$STRIP_BLANKS
        16 001305   000000 011000                    NOP     0

     1075    21597    2        end;

     1076    21598    1        IF VM_CURRENT_FOLDER.SITENAME ~= ' ' THEN /* Append site name */

  21598 16 001306   040000 106400                    CMPC    fill='040'O
        16 001307   000305 600010 11                 ADSC9   VM_CURRENT_FOLDER+11     cn=3,n=8
        16 001310   000064 000001 17                 ADSC9   52                       cn=0,n=1
        16 001311   001345 600000 16                 TZE     s:21604

     1077    21599    2        DO;

     1078    21600    2             CALL INDEX (J,' ',VM_CURRENT_FOLDER.SITENAME);

  21600 16 001312   000000 124400                    SCM     mask='000'O
        16 001313   000305 600010 11                 ADSC9   VM_CURRENT_FOLDER+11     cn=3,n=8
        16 001314   000064 000001 17                 ADSC9   52                       cn=0,n=1
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:198  
        16 001315   200135 000100                    ARG     J,,AUTO

     1079    21601    2             CALL INSERT (TEMP_TEXTC.NAME#,TEMP_TEXTC.L#,,' @',VM_CURRENT_FOLDER.
             21601                      SITENAME);

  21601 16 001316   200141 236100                    LDQ     TEMP_TEXTC,,AUTO
        16 001317   000033 772000                    QRL     27
        16 001320   777377 620006                    EAX0    -257,QL
        16 001321   777777 660003                    ERX0    -1,DU
        16 001322   040146 100400                    MLR     fill='040'O
        16 001323   001532 000002 13                 ADSC9   E_PASTDEFER+2            cn=0,n=2
        16 001324   200141 200010                    ADSC9   TEMP_TEXTC,Q,AUTO        cn=1,n=*X0
        16 001325   200450 756100                    STQ     P2$+1,,AUTO
        16 001326   000000 636010                    EAQ     0,X0
        16 001327   000022 772000                    QRL     18
        16 001330   000003 116007                    CMPQ    3,DL
        16 001331   001337 602000 16                 TNC     s:21602
        16 001332   777776 621010                    EAX1    -2,X0
        16 001333   200450 235100                    LDA     P2$+1,,AUTO
        16 001334   040145 100400                    MLR     fill='040'O
        16 001335   000305 600010 11                 ADSC9   VM_CURRENT_FOLDER+11     cn=3,n=8
        16 001336   200141 600011                    ADSC9   TEMP_TEXTC,A,AUTO        cn=3,n=*X1

     1080    21602    2             TEMP_TEXTC.L# = TEMP_TEXTC.L# + J +2;

  21602 16 001337   200141 236100                    LDQ     TEMP_TEXTC,,AUTO
        16 001340   000033 772000                    QRL     27
        16 001341   200135 036100                    ADLQ    J,,AUTO
        16 001342   000002 036007                    ADLQ    2,DL
        16 001343   000033 736000                    QLS     27
        16 001344   200141 552140                    STBQ    TEMP_TEXTC,'40'O,AUTO

     1081    21603    2        END;

     1082    21604    1        SIZE = TEMP_TEXTC.L#;

  21604 16 001345   200141 236100                    LDQ     TEMP_TEXTC,,AUTO
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:199  
        16 001346   000033 772000                    QRL     27
        16 001347   200133 756100                    STQ     SIZE,,AUTO

     1083    21605    1        CALL ALLOC$TEXTC (VM_HEADER.FROM$, SIZE, TEMP_TEXTC.NAME#) ALTRET(E_ALLOCATE);

  21605 16 001350   200450 452500                    STP2    P2$+1,,AUTO
        16 001351   200450 236100                    LDQ     P2$+1,,AUTO
        16 001352   000066 036000 17                 ADLQ    54
        16 001353   200441 756100                    STQ     @SIZE+1,,AUTO
        16 001354   200133 630500                    EPPR0   SIZE,,AUTO
        16 001355   200440 450500                    STP0    @FLD$+1,,AUTO
        16 001356   000000 236000 xsym               LDQ     VM_HEADER$
        16 001357   000023 036003                    ADLQ    19,DU
        16 001360   200437 756100                    STQ     NEW_TYPE+2,,AUTO
        16 001361   006011 701000 16                 TSX1    ALLOC$TEXTC
        16 001362   002025 702000 16                 TSX2    E_ALLOCATE

     1084    21606    1        VM_HEADER.FROM$ = MCB.ADDRESS$;

  21606 16 001363   000737 236000 11                 LDQ     MCB
        16 001364   000000 470400 xsym               LDP0    VM_HEADER$
        16 001365   000023 756100                    STQ     19,,PR0

     1085    21607        /*
     1086    21608             ***** Setup signed information ...
     1087    21609        */
     1088    21610    1        IF VM_PROFILE.SIGNED$ ~= ADDR(NIL)

  21610 16 001366   000000 471400 xsym               LDP1    VM_PROFILE$
        16 001367   100126 236100                    LDQ     86,,PR1
        16 001370   000032 116000 17                 CMPQ    26
        16 001371   001412 600000 16                 TZE     s:21619

     1089    21611    2        THEN DO;

     1090    21612    2             SIZE = VM_PROFILE.SIGNED$ -> X$STRING.SIZ;

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:200  
  21612 16 001372   100126 473500                    LDP3    86,,PR1
        16 001373   000100 101500                    MRL     fill='000'O
        16 001374   300000 000001                    ADSC9   0,,PR3                   cn=0,n=1
        16 001375   200133 000004                    ADSC9   SIZE,,AUTO               cn=0,n=4

     1091    21613    2             CALL ALLOC$TEXTC (VM_HEADER.SIGNED$, SIZE,

  21613 16 001376   100126 473500                    LDP3    86,,PR1
        16 001377   200450 453500                    STP3    P2$+1,,AUTO
        16 001400   200450 236100                    LDQ     P2$+1,,AUTO
        16 001401   200000 036007                    ADLQ    65536,DL
        16 001402   200441 756100                    STQ     @SIZE+1,,AUTO
        16 001403   200133 634500                    EPPR4   SIZE,,AUTO
        16 001404   200440 454500                    STP4    @FLD$+1,,AUTO
        16 001405   000000 236000 xsym               LDQ     VM_HEADER$
        16 001406   000027 036003                    ADLQ    23,DU
        16 001407   200437 756100                    STQ     NEW_TYPE+2,,AUTO
        16 001410   006011 701000 16                 TSX1    ALLOC$TEXTC
        16 001411   002025 702000 16                 TSX2    E_ALLOCATE

     1092    21614    2               VM_PROFILE.SIGNED$ -> X$STRING.TEXT) ALTRET(E_ALLOCATE);
     1093    21615    2        END;

     1094    21616        /*
     1095    21617             ***** Set up creation date ...
     1096    21618        */
     1097    21619    1        CALL M$TIME (GET_TIME);

  21619 16 001412   001136 630400 13                 EPPR0   GET_TIME
        16 001413   020004 713400                    CLIMB   8196
        16 001414   402000 401760                    pmme    nvectors=5

     1098    21620    1        VM_HEADER.CREATION_DATE = UTS;

  21620 16 001415   000000 470400 xsym               LDP0    VM_HEADER$
        16 001416   000736 235000 11                 LDA     UTS
        16 001417   000001 755100                    STA     1,,PR0
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:201  

     1099    21621        /*
     1100    21622             ***** If ENTRY_REASON is MAIL_ACK then all fields
     1101    21623                   were filled in by mail before it linked to
     1102    21624                   send. Do it now!!!
     1103    21625        */
     1104    21626    1        IF ENTRY_REASON = %MAIL_ACK

  21626 16 001420   200136 236100                    LDQ     ENTRY_REASON,,AUTO
        16 001421   000001 116007                    CMPQ    1,DL
        16 001422   001426 601000 16                 TNZ     s:21634

     1105    21627    2        THEN DO;

     1106    21628    2             CALL DO$SEND ALTRET(ABORT_SEND);

  21628 16 001423   007020 701000 16                 TSX1    DO$SEND
        16 001424   002031 702000 16                 TSX2    ABORT_SEND

     1107    21629    2             GOTO EXIT_SEND;

  21629 16 001425   002020 710000 16                 TRA     EXIT_SEND

     1108    21630    2        END;
     1109    21631        /*
     1110    21632             ***** Initialize for cases other than ack ...
     1111    21633        */
     1112    21634    1        VM_HEADER.STATUS.RR = VM_PROFILE.OPT.RETURN_RECEIPT;

  21634 16 001426   000000 471400 xsym               LDP1    VM_PROFILE$
        16 001427   100000 236100                    LDQ     0,,PR1
        16 001430   000031 736000                    QLS     25
        16 001431   000012 676100                    ERQ     10,,PR0
        16 001432   020000 376003                    ANQ     8192,DU
        16 001433   000012 656100                    ERSQ    10,,PR0

     1113    21635    1        VM_HEADER.STATUS.DR = VM_PROFILE.OPT.DELIVERY_RECEIPT;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:202  

  21635 16 001434   100000 236100                    LDQ     0,,PR1
        16 001435   000024 736000                    QLS     20
        16 001436   000012 676100                    ERQ     10,,PR0
        16 001437   000004 376003                    ANQ     4,DU
        16 001440   000012 656100                    ERSQ    10,,PR0

     1114    21636    1        VM_HEADER.STATUS.FCOPY = VM_PROFILE.OPT.FCOPY;

  21636 16 001441   100000 236100                    LDQ     0,,PR1
        16 001442   000022 736000                    QLS     18
        16 001443   000012 676100                    ERQ     10,,PR0
        16 001444   000200 376003                    ANQ     128,DU
        16 001445   000012 656100                    ERSQ    10,,PR0

     1115    21637        /*
     1116    21638             ***** Open dcb for command input ...
     1117    21639        */
     1118    21640    1        IF NOT SI_FILE

  21640 16 001446   200024 234100                    SZN     SI_FILE,,AUTO
        16 001447   001454 604000 16                 TMI     s:21657

     1119    21641    2        THEN DO;

     1120    21642    2             CALL M$OPEN (OPEN_SI_DEFAULT) ALTRET(E_PMME);

  21642 16 001450   000552 630400 13                 EPPR0   OPEN_SI_DEFAULT
        16 001451   450000 713400                    CLIMB   alt,open
        16 001452   410400 401760                    pmme    nvectors=18
        16 001453   002022 702000 16                 TSX2    E_PMME

     1121    21643    2        END;

     1122    21644        /*
     1123    21645             ***** Read and process any commands from a command stream ...
     1124    21646
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:203  
     1125    21647                If input is non-interactive, read the command stream and
     1126    21648                process all lines as header fields until the first non-header
     1127    21649                line is found, then switch to reading message body lines.
     1128    21650                This applies to XEQ and batch job input as well as SEND files,
     1129    21651                so that they can also define all header fields up front.
     1130    21652                Note that, since any line not recognized as a header field
     1131    21653                is treated as the start of the body, syntax errors in header
     1132    21654                lines aren't noted as such; the line in error just becomes
     1133    21655                the first body line.
     1134    21656        */
     1135    21657    2        DO WHILE (SI_FILE OR (B$JIT.NEXTCC ~= %CC_FROMUC#

  21657 16 001454   001507 710000 16                 TRA     s:21672

     1136    21658    2          AND NOT DCBADDR(M$SI_NUM)->F$DCB.DDEV.IC#));
     1137    21659    2             CALL READ_CC ALTRET(EOF);

  21659 16 001455   002114 701000 16                 TSX1    READ_CC
        16 001456   001525 702000 16                 TSX2    EOF

     1138    21660    2             CALL XUR$GETCMD(SEND_NODES$->BSD,OUT$,,CMD_BUF,SIZE)

  21660 16 001457   200133 630500                    EPPR0   SIZE,,AUTO
        16 001460   200454 450500                    STP0    P2$+5,,AUTO
        16 001461   000072 236000 17                 LDQ     58
        16 001462   000032 235000 17                 LDA     26
        16 001463   200452 757100                    STAQ    P2$+3,,AUTO
        16 001464   200027 631500                    EPPR1   OUT$,,AUTO
        16 001465   200451 451500                    STP1    P2$+2,,AUTO
        16 001466   200003 236100                    LDQ     SEND_NODES$,,AUTO
        16 001467   200450 756100                    STQ     P2$+1,,AUTO
        16 001470   200450 630500                    EPPR0   P2$+1,,AUTO
        16 001471   000035 631400 17                 EPPR1   29
        16 001472   000000 701000 xent               TSX1    XUR$GETCMD
        16 001473   001477 702000 16                 TSX2    s:21665

     1139    21661    3             WHENRETURN DO;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:204  

     1140    21662    3                  CALL PROCESS_CMD ALTRET(ABORT_SEND);

  21662 16 001474   003513 701000 16                 TSX1    PROCESS_CMD
        16 001475   002031 702000 16                 TSX2    ABORT_SEND

     1141    21663    3             END;

  21663 16 001476   001507 710000 16                 TRA     s:21672

     1142    21664    3             WHENALTRETURN DO;

     1143    21665    3                  IF OUTERR = E_SYNERR

  21665 16 001477   200027 236100                    LDQ     OUT$,,AUTO
        16 001500   001507 116000 13                 CMPQ    E_SYNERR
        16 001501   001505 601000 16                 TNZ     s:21670

     1144    21666    4                  THEN DO;

     1145    21667    4                       CALL PROCESS_BODY;

  21667 16 001502   002157 701000 16                 TSX1    PROCESS_BODY
        16 001503   000000 011000                    NOP     0

     1146    21668    4                       GOTO EOF;

  21668 16 001504   001525 710000 16                 TRA     EOF

     1147    21669    4                  END;
     1148    21670    3                  CALL CMD_ERR;

  21670 16 001505   002035 701000 16                 TSX1    CMD_ERR
        16 001506   000000 011000                    NOP     0

     1149    21671    3             END;

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:205  
     1150    21672    2        END;

  21672 16 001507   200024 234100                    SZN     SI_FILE,,AUTO
        16 001510   001455 604000 16                 TMI     s:21659
        16 001511   000000 470400 xsym               LDP0    B$JIT$
        16 001512   000151 236100                    LDQ     105,,PR0
        16 001513   000777 376003                    ANQ     511,DU
        16 001514   000003 116003                    CMPQ    3,DU
        16 001515   001525 600000 16                 TZE     EOF
        16 001516   000054 471400 17                 LDP1    44
        16 001517   100000 473500                    LDP3    0,,PR1
        16 001520   000000 720000 xsym               LXL0    M$SI_NUM
        16 001521   300000 474510                    LDP4    0,X0,PR3
        16 001522   400004 236100                    LDQ     4,,PR4
        16 001523   100000 316007                    CANQ    32768,DL
        16 001524   001455 600000 16                 TZE     s:21659

  21670 16 001525                       EOF          null
     1151    21673    1   EOF: ;
     1152    21674        /*
     1153    21675             ***** If everything necessary was found in the command file,
     1154    21676                   and there were no errors, and an options prompt wasn't
     1155    21677                   requested, send the message now and go home ...
     1156    21678        */
     1157    21679    1        IF VM_HEADER.TO$ ~= ADDR(NIL)

  21679 16 001525   000000 470400 xsym               LDP0    VM_HEADER$
        16 001526   000031 236100                    LDQ     25,,PR0
        16 001527   000032 116000 17                 CMPQ    26
        16 001530   001552 600000 16                 TZE     s:21695
        16 001531   000030 236100                    LDQ     24,,PR0
        16 001532   000032 116000 17                 CMPQ    26
        16 001533   001536 601000 16                 TNZ     EOF+9
        16 001534   000000 234000 xsym               SZN     GATEWAY
        16 001535   001552 605000 16                 TPL     s:21695
        16 001536   200021 234100                    SZN     ERR_FLAG,,AUTO
        16 001537   001552 604000 16                 TMI     s:21695
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:206  
        16 001540   200020 234100                    SZN     PROMPT_OPTIONS,,AUTO
        16 001541   001552 604000 16                 TMI     s:21695
        16 001542   200136 235100                    LDA     ENTRY_REASON,,AUTO
        16 001543   000003 115007                    CMPA    3,DL
        16 001544   001552 600000 16                 TZE     s:21695
        16 001545   000002 115007                    CMPA    2,DL
        16 001546   001552 600000 16                 TZE     s:21695

     1158    21680    1          AND (VM_HEADER.SUBJECT$ ~= ADDR(NIL) OR GATEWAY)
     1159    21681    1          AND ERR_FLAG = %NO#
     1160    21682    1          AND PROMPT_OPTIONS = %NO#
     1161    21683    1          AND (ENTRY_REASON ~= %MAIL_FORWARD
     1162    21684    1          AND ENTRY_REASON ~= %MAIL_ANSWER)
     1163    21685    2        THEN DO;

     1164    21686    2             CALL DO$SEND ALTRET(ABORT_SEND);

  21686 16 001547   007020 701000 16                 TSX1    DO$SEND
        16 001550   002031 702000 16                 TSX2    ABORT_SEND

     1165    21687    2             GOTO EXIT_SEND;

  21687 16 001551   002020 710000 16                 TRA     EXIT_SEND

     1166    21688    2        END;
     1167    21689        /*
     1168    21690             ***** In gateway mode, we can only get this far if the
     1169    21691                   manditory TO field is missing (or misspelled).
     1170    21692                   Since gateways can't prompt for input, SEND must die
     1171    21693                   with an appropriate error if this happens ...
     1172    21694        */
     1173    21695    1        IF GATEWAY

  21695 16 001552   000000 234000 xsym               SZN     GATEWAY
        16 001553   001560 605000 16                 TPL     s:21702

     1174    21696    1        THEN
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:207  
     1175    21697    1             CALL VMA$ERRMSG (E_MISSINGFIELDS);

  21697 16 001554   000073 630400 17                 EPPR0   59
        16 001555   000003 631400 17                 EPPR1   3
        16 001556   000000 701000 xent               TSX1    VMA$ERRMSG
        16 001557   000000 011000                    NOP     0

     1176    21698        /*
     1177    21699             ***** If send has been reading a file,
     1178    21700                   then switch to the command stream ...
     1179    21701        */
     1180    21702    1        IF SI_FILE

  21702 16 001560   200024 234100                    SZN     SI_FILE,,AUTO
        16 001561   001575 605000 16                 TPL     s:21712

     1181    21703    2        THEN DO;

     1182    21704    2             SI_FILE = %NO#;

  21704 16 001562   200024 450100                    STZ     SI_FILE,,AUTO

     1183    21705    2             CLOSE_SAVE.V.DCB# = M$SI_NUM;

  21705 16 001563   000000 720000 xsym               LXL0    M$SI_NUM
        16 001564   001002 740000 11                 STX0    CLOSE_SAVE+26

     1184    21706    2             CALL M$CLOSE (CLOSE_SAVE) ALTRET(E_PMME);

  21706 16 001565   000750 630400 11                 EPPR0   CLOSE_SAVE
        16 001566   450001 713400                    CLIMB   alt,close
        16 001567   406000 401760                    pmme    nvectors=13
        16 001570   002022 702000 16                 TSX2    E_PMME

     1185    21707    2             CALL M$OPEN (OPEN_SI_DEFAULT) ALTRET(E_PMME);

  21707 16 001571   000552 630400 13                 EPPR0   OPEN_SI_DEFAULT
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:208  
        16 001572   450000 713400                    CLIMB   alt,open
        16 001573   410400 401760                    pmme    nvectors=18
        16 001574   002022 702000 16                 TSX2    E_PMME

     1186    21708    2        END;

     1187    21709        /*
     1188    21710             ***** Prompt for fields normally present if they're not presupplied ...
     1189    21711        */
     1190    21712    1        IF VM_HEADER.TO$ = ADDR(NIL)

  21712 16 001575   000000 470400 xsym               LDP0    VM_HEADER$
        16 001576   000031 236100                    LDQ     25,,PR0
        16 001577   000032 116000 17                 CMPQ    26
        16 001600   001603 601000 16                 TNZ     s:21716

     1191    21713    1        THEN
     1192    21714    1             CALL PROMPT$TO ALTRET(ABORT_SEND);

  21714 16 001601   006741 701000 16                 TSX1    PROMPT$TO
        16 001602   002031 702000 16                 TSX2    ABORT_SEND

     1193    21715        /**/
     1194    21716    1        if VM_HEADER.SUBJECT$ = addr(nil) or ENTRY_REASON = %MAIL_ANSWER then

  21716 16 001603   000000 470400 xsym               LDP0    VM_HEADER$
        16 001604   000030 236100                    LDQ     24,,PR0
        16 001605   000032 116000 17                 CMPQ    26
        16 001606   001612 600000 16                 TZE     s:21733
        16 001607   200136 235100                    LDA     ENTRY_REASON,,AUTO
        16 001610   000002 115007                    CMPA    2,DL
        16 001611   001652 601000 16                 TNZ     s:21757

     1195    21717    2        DO;

     1196    21718                  %INIT_STR( STR=VN_SUBJECT, CODE=E_CMD_SUBJECT_PROMPT, VECT=
             21718                      CHANGE_PROMPT.PROMPT_);
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:209  

  21733 16 001612   000075 630400 17                 EPPR0   61
        16 001613   000074 631400 17                 EPPR1   60
        16 001614   000000 701000 xent               TSX1    VMD$ERRMSG
        16 001615   000000 011000                    NOP     0

     1197    21741    3             DO NEVER;

  21741 16 001616   001621 710000 16                 TRA     s:21745

     1198    21742    3   E_SUBJECT:
     1199    21743    3                  CALL CMD_ERR ALTRET(GET_OPTIONS);

  21743 16 001617   002035 701000 16    E_SUBJECT    TSX1    CMD_ERR
        16 001620   001670 702000 16                 TSX2    GET_OPTIONS

     1200    21744    3             END;                /* Do never ... end */

     1201    21745    2             P_PCB.COMMENT.LEAD = '  '; /* don't strip leading comments */

  21745 16 001621   001533 220000 13                 LDX0    E_PASTDEFER+3
        16 001622   000007 740000 11                 STX0    P_PCB+7

     1202    21746    2             CALL XUR$GETCMD (CMD_SUBJECT$->BSD,OUT$,VN_SUBJECT) altret(E_SUBJECT);

  21746 16 001623   000076 236000 17                 LDQ     62
        16 001624   200452 756100                    STQ     P2$+3,,AUTO
        16 001625   200027 630500                    EPPR0   OUT$,,AUTO
        16 001626   200451 450500                    STP0    P2$+2,,AUTO
        16 001627   200006 236100                    LDQ     CMD_SUBJECT$,,AUTO
        16 001630   200450 756100                    STQ     P2$+1,,AUTO
        16 001631   200450 630500                    EPPR0   P2$+1,,AUTO
        16 001632   000074 631400 17                 EPPR1   60
        16 001633   000000 701000 xent               TSX1    XUR$GETCMD
        16 001634   001617 702000 16                 TSX2    E_SUBJECT

     1203    21747    2             P_PCB.COMMENT.LEAD = ' "';
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:210  

  21747 16 001635   001534 220000 13                 LDX0    E_PASTDEFER+4
        16 001636   000007 740000 11                 STX0    P_PCB+7

     1204    21748
     1205    21749    2             IF OUT$->P$B.SUBLK$(0)->P$S.TEXT ~= ' '

  21749 16 001637   200027 470500                    LDP0    OUT$,,AUTO
        16 001640   000003 471500                    LDP1    3,,PR0
        16 001641   100004 236100                    LDQ     4,,PR1
        16 001642   000033 772000                    QRL     27
        16 001643   000000 621006                    EAX1    0,QL
        16 001644   040000 106540                    CMPC    fill='040'O
        16 001645   100004 200011                    ADSC9   4,,PR1                   cn=1,n=*X1
        16 001646   000064 000001 17                 ADSC9   52                       cn=0,n=1
        16 001647   001652 600000 16                 TZE     s:21757

     1206    21750    2             THEN
     1207    21751    2                  CALL PROCESS_CMD ALTRET(ABORT_SEND);

  21751 16 001650   003513 701000 16                 TSX1    PROCESS_CMD
        16 001651   002031 702000 16                 TSX2    ABORT_SEND

     1208    21752    2        END;

     1209    21753        /*
     1210    21754             ***** If we get this far, break-Quit will return to Options
     1211    21755                   prompt instead of terminating immediately ...
     1212    21756        */
     1213    21757    1        VNS_BREAK_TYPE = %BREAK_REPEAT;

  21757 16 001652   000001 235007                    LDA     1,DL
        16 001653   000102 755000 11                 STA     VNS_BREAK_TYPE

     1214    21758        /*
     1215    21759             ***** If there is no message body yet,
     1216    21760                   setup to edit the message before the Option prompt if AUTOEDIT set,
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:211  
     1217    21761                   or prompt the user for the body otherwise ...
     1218    21762        */
     1219    21763    1        IF VM_HEADER.NUM_RECORDS = 0

  21763 16 001654   000000 470400 xsym               LDP0    VM_HEADER$
        16 001655   000011 235100                    LDA     9,,PR0
        16 001656   001670 601000 16                 TNZ     GET_OPTIONS

     1220    21764    2        THEN DO;

     1221    21765    2             IF VM_PROFILE.OPT.AUTO_EDIT

  21765 16 001657   000000 471400 xsym               LDP1    VM_PROFILE$
        16 001660   100000 236100                    LDQ     0,,PR1
        16 001661   000010 316007                    CANQ    8,DL
        16 001662   001666 600000 16                 TZE     s:21770

     1222    21766    3             THEN DO;

     1223    21767    3                  INVOKE_EDITOR$ = DEFAULT_EDITOR$;

  21767 16 001663   000111 236000 11                 LDQ     DEFAULT_EDITOR$
        16 001664   000110 756000 11                 STQ     INVOKE_EDITOR$

     1224    21768    3             END;

  21768 16 001665   001670 710000 16                 TRA     GET_OPTIONS

     1225    21769    3             ELSE DO;

     1226    21770    3                  call APPEND_BODY;

  21770 16 001666   002442 701000 16                 TSX1    APPEND_BODY
        16 001667   000000 011000                    NOP     0

     1227    21771    3             END;

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:212  
     1228    21772    2        END;

     1229    21773        /*
     1230    21774             ***** Setup to prompt for options (enable GETCMD builtins, etc) ...
     1231    21775        */
     1232    21776    1   GET_OPTIONS:
     1233    21777    1        CALL VNS$BREAK_DISABLE;

  21777 16 001670   000017 631400 17    GET_OPTIONS  EPPR1   15
        16 001671   000000 701000 xent               TSX1    VNS$BREAK_DISABLE
        16 001672   000000 011000                    NOP     0

     1234    21778    1        PROC_OPTIONS = %YES#;

  21778 16 001673   400000 236003                    LDQ     -131072,DU
        16 001674   200023 756100                    STQ     PROC_OPTIONS,,AUTO

     1235    21779    1        CHANGE_PROMPT.PROMPT_ = vector(VN_OPTIONS.NAME#);

  21779 16 001675   000000 236000 xsym               LDQ     VN_OPTIONS
        16 001676   000033 772000                    QRL     27
        16 001677   000064 737000                    LLS     52
        16 001700   000140 135007                    SBLA    96,DL
        16 001701   000100 236000 17                 LDQ     64
        16 001702   001104 757000 11                 STAQ    CHANGE_PROMPT+4

     1236    21780    1        XUR_INIT.PRE_EXEC$$ = ENTADDR(VNS$PRE_EXEC);

  21780 16 001703   000000 636000 xent               EAQ     VNS$PRE_EXEC
        16 001704   000025 756000 11                 STQ     XUR_INIT+7

     1237    21781    1        XUR_INIT.COMMANDS# = %YES#;

  21781 16 001705   100000 236003                    LDQ     32768,DU
        16 001706   000016 256000 11                 ORSQ    XUR_INIT

     1238    21782    1        CALL XUR$INIT(XUR_INIT);
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:213  

  21782 16 001707   000020 630400 17                 EPPR0   16
        16 001710   000003 631400 17                 EPPR1   3
        16 001711   000000 701000 xent               TSX1    XUR$INIT
        16 001712   000000 011000                    NOP     0

     1239    21783    1        CALL XUR$SETERRMSG (ERRMSG_FID) ALTRET(E_PMME);

  21783 16 001713   000023 630400 17                 EPPR0   19
        16 001714   000003 631400 17                 EPPR1   3
        16 001715   000000 701000 xent               TSX1    XUR$SETERRMSG
        16 001716   002022 702000 16                 TSX2    E_PMME

     1240    21784    1        CALL VNS$BREAK_ENABLE;

  21784 16 001717   000017 631400 17                 EPPR1   15
        16 001720   000000 701000 xent               TSX1    VNS$BREAK_ENABLE
        16 001721   000000 011000                    NOP     0

     1241    21785        /*
     1242    21786             ***** Loop to prompt for additional options ...
     1243    21787        */
     1244    21788    2        DO FOREVER;

     1245    21789        /*
     1246    21790            If the message is to be edited (due either to AUTOEDIT or an EDIT command)
     1247    21791            do it now, before issuing an Option prompt.
     1248    21792        */
     1249    21793    2             IF INVOKE_EDITOR$ ~= ADDR(NIL)

  21793 16 001722   000110 236000 11                 LDQ     INVOKE_EDITOR$
        16 001723   000032 116000 17                 CMPQ    26
        16 001724   001727 600000 16                 TZE     s:21800

     1250    21794    3             THEN DO;

     1251    21795    3                  CALL EDIT_MSG ALTRET(ABORT_SEND);
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:214  

  21795 16 001725   003112 701000 16                 TSX1    EDIT_MSG
        16 001726   002031 702000 16                 TSX2    ABORT_SEND

     1252    21796    3             END;

     1253    21797        /*
     1254    21798            ***** Make sure there is a TO: field....
     1255    21799        */
     1256    21800    2             IF VM_HEADER.TO$ = ADDR(NIL)

  21800 16 001727   000000 470400 xsym               LDP0    VM_HEADER$
        16 001730   000031 236100                    LDQ     25,,PR0
        16 001731   000032 116000 17                 CMPQ    26
        16 001732   001741 601000 16                 TNZ     s:21809

     1257    21801    3             THEN DO;

     1258    21802    3                  CALL XUR$ERRMSG (E_TOREQUIRED);

  21802 16 001733   000101 630400 17                 EPPR0   65
        16 001734   000003 631400 17                 EPPR1   3
        16 001735   000000 701000 xent               TSX1    XUR$ERRMSG
        16 001736   000000 011000                    NOP     0

     1259    21803    3                  CALL PROMPT$TO ALTRET(ABORT_SEND);

  21803 16 001737   006741 701000 16                 TSX1    PROMPT$TO
        16 001740   002031 702000 16                 TSX2    ABORT_SEND

     1260    21804    3             END;

     1261    21805        /*
     1262    21806            Get and process an option command from the user.
     1263    21807            (An END command terminates SEND from within PROCESS_CMD.)
     1264    21808        */
     1265    21809    2             CALL XUR$GETCMD (OPTION_NODES$->BSD,OUT$,VN_OPTIONS) ALTRET(E_OPTIONS);
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:215  

  21809 16 001741   000031 236000 17                 LDQ     25
        16 001742   200452 756100                    STQ     P2$+3,,AUTO
        16 001743   200027 630500                    EPPR0   OUT$,,AUTO
        16 001744   200451 450500                    STP0    P2$+2,,AUTO
        16 001745   200016 236100                    LDQ     OPTION_NODES$,,AUTO
        16 001746   200450 756100                    STQ     P2$+1,,AUTO
        16 001747   200450 630500                    EPPR0   P2$+1,,AUTO
        16 001750   000074 631400 17                 EPPR1   60
        16 001751   000000 701000 xent               TSX1    XUR$GETCMD
        16 001752   001756 702000 16                 TSX2    E_OPTIONS

     1266    21810    2             CALL PROCESS_CMD ALTRET(ABORT_SEND);

  21810 16 001753   003513 701000 16                 TSX1    PROCESS_CMD
        16 001754   002031 702000 16                 TSX2    ABORT_SEND

     1267    21811        /*
     1268    21812            Handle exceptions within the options loop ...
     1269    21813        */
     1270    21814    3             DO NEVER;

  21814 16 001755   001760 710000 16                 TRA     s:21818

     1271    21815    3   E_OPTIONS:
     1272    21816    3                  CALL CMD_ERR ALTRET(EXIT_DOSEND);

  21816 16 001756   002035 701000 16    E_OPTIONS    TSX1    CMD_ERR
        16 001757   002016 702000 16                 TSX2    EXIT_DOSEND

     1273    21817    3             END;

     1274    21818    3             DO NEVER;

  21818 16 001760   001775 710000 16                 TRA     s:21834

  21809 16 001761                       OPTION_BREAK null
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:216  
     1275    21819    3   OPTION_BREAK:  ;    /**  Break return point  **/
     1276    21820        /*
     1277    21821                After a break response unwinds into the options loop, anything
     1278    21822                that might have been temporarily changed must be put back the
     1279    21823                way it would have been if the normal control flow had not been
     1280    21824                interrupted by the break.
     1281    21825        */
     1282    21826    3                  CALL XUR$ERRMSG( E_SENDBRKMSG);

  21826 16 001761   000102 630400 17                 EPPR0   66
        16 001762   000003 631400 17                 EPPR1   3
        16 001763   000000 701000 xent               TSX1    XUR$ERRMSG
        16 001764   000000 011000                    NOP     0

     1283    21827    3                  P_PCB.COMMENT.LEAD = ' "';

  21827 16 001765   001534 220000 13                 LDX0    E_PASTDEFER+4
        16 001766   000007 740000 11                 STX0    P_PCB+7

     1284    21828    3                  P_PCB.NOLEADBLANKS = %NO#;

  21828 16 001767   000103 236000 17                 LDQ     67
        16 001770   000005 356000 11                 ANSQ    P_PCB+5

     1285    21829    3                  INVOKE_EDITOR$ = ADDR(NIL);

  21829 16 001771   000032 236000 17                 LDQ     26
        16 001772   000110 756000 11                 STQ     INVOKE_EDITOR$

     1286    21830    3                  IF NOT PROC_OPTIONS

  21830 16 001773   200023 234100                    SZN     PROC_OPTIONS,,AUTO
        16 001774   001670 605000 16                 TPL     GET_OPTIONS

     1287    21831    3                  THEN
     1288    21832    3                       GOTO GET_OPTIONS;
     1289    21833    3             END;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:217  

     1290    21834    2             IF CHANGE_PROMPT.PROMPT_ ~= VECTOR(VN_OPTIONS.NAME#)

  21834 16 001775   000000 236000 xsym               LDQ     VN_OPTIONS
        16 001776   000033 772000                    QRL     27
        16 001777   000064 737000                    LLS     52
        16 002000   000140 135007                    SBLA    96,DL
        16 002001   000100 236000 17                 LDQ     64
        16 002002   001104 117000 11                 CMPAQ   CHANGE_PROMPT+4
        16 002003   001722 600000 16                 TZE     s:21793

     1291    21835    3             THEN DO;

     1292    21836    3                  CHANGE_PROMPT.PROMPT_ = VECTOR(VN_OPTIONS.NAME#);

  21836 16 002004   000000 236000 xsym               LDQ     VN_OPTIONS
        16 002005   000033 772000                    QRL     27
        16 002006   000064 737000                    LLS     52
        16 002007   000140 135007                    SBLA    96,DL
        16 002010   000100 236000 17                 LDQ     64
        16 002011   001104 757000 11                 STAQ    CHANGE_PROMPT+4

     1293    21837    3                  CALL M$PROMPT (CHANGE_PROMPT);

  21837 16 002012   001100 630400 11                 EPPR0   CHANGE_PROMPT
        16 002013   160002 713400                    CLIMB   57346
        16 002014   401000 401760                    pmme    nvectors=3

     1294    21838    3             END;

     1295    21839    2        END;

  21839 16 002015   001722 710000 16                 TRA     s:21793

     1296    21840        /*
     1297    21841             ***** If the message has not yet been sent,
     1298    21842                   do so and exit ...
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:218  
     1299    21843        */
     1300    21844    1   EXIT_DOSEND:
     1301    21845    1        CALL DO$SEND ALTRET(ABORT_SEND);

  21845 16 002016   007020 701000 16    EXIT_DOSEND  TSX1    DO$SEND
        16 002017   002031 702000 16                 TSX2    ABORT_SEND

     1302    21846
     1303    21847    1   EXIT_SEND:
     1304    21848    1        CALL M$EXIT;

  21848 16 002020   000001 713400       EXIT_SEND    CLIMB   exit
        16 002021   000000 401760                    pmme    nvectors=0

     1305    21849
     1306    21850        /*
     1307    21851            ***** Mainline exception handling logic ...
     1308    21852        */
     1309    21853    1   E_PMME:
     1310    21854    1        CALL MON_ERR;

  21854 16 002022   002075 701000 16    E_PMME       TSX1    MON_ERR
        16 002023   000000 011000                    NOP     0

     1311    21855    1        GOTO ABORT_SEND;

  21855 16 002024   002031 710000 16                 TRA     ABORT_SEND

     1312    21856        /**/
     1313    21857    1   E_ALLOCATE:
     1314    21858    1        CALL VMA$ERRMSG (MCB.ERR);

  21858 16 002025   000104 630400 17    E_ALLOCATE   EPPR0   68
        16 002026   000003 631400 17                 EPPR1   3
        16 002027   000000 701000 xent               TSX1    VMA$ERRMSG
        16 002030   000000 011000                    NOP     0

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:219  
     1315    21859    1   ABORT_SEND:
     1316    21860    1        CALL M$ERR (NOTSENT_ERR);

  21860 16 002031   001122 630400 13    ABORT_SEND   EPPR0   NOTSENT_ERR
        16 002032   000002 713400                    CLIMB   err
        16 002033   400400 401760                    pmme    nvectors=2
        16 002034   010260 710000 16                 TRA     s:23866

     1317    21861        %EJECT;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:220  
     1318    21862        /********************************************************************/
     1319    21863        /*I*
     1320    21864            NAME: CMD_ERR
     1321    21865            PURPOSE: To diagnose errors on commands.
     1322    21866            DESCRIPTION:
     1323    21867                This routine fields errors from XUR$GETCMD and READ_CC.
     1324    21868                EOF results in an altreturn with no diagnostic, since this is
     1325    21869                often an expected loop-terminating condition.
     1326    21870                Syntax errors normally result in the command being echoed,
     1327    21871                followed by a pointer to the error, but not in gateway mode,
     1328    21872                because then all diagnostic output must be suppressed.
     1329    21873                Finally, VMA$ERRMSG is called to terminate SEND in gateway
     1330    21874                mode or to diagnose the error otherwise.
     1331    21875        */
     1332    21876        /********************************************************************/
     1333    21877    1   CMD_ERR: PROC ALTRET;

  21877 16 002035   200376 741300       CMD_ERR      STX1  ! @FLD$+1,,AUTO

     1334    21878
     1335    21879    2        IF OUTERR.MON AND OUTERR.ERR# = %E$EOF

  21879 16 002036   200027 236100                    LDQ     OUT$,,AUTO
        16 002037   400000 316007                    CANQ    -131072,DL
        16 002040   002046 600000 16                 TZE     s:21882
        16 002041   200027 236100                    LDQ     OUT$,,AUTO
        16 002042   377770 376007                    ANQ     131064,DL
        16 002043   000060 116007                    CMPQ    48,DL
        16 002044   002046 601000 16                 TNZ     s:21882

     1336    21880    2        THEN
     1337    21881    2             ALTRETURN;

  21881 16 002045   000000 702211                    TSX2  ! 0,X1

     1338    21882    2        IF NOT GATEWAY AND OUTERR = E_SYNERR

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:221  
  21882 16 002046   000000 234000 xsym               SZN     GATEWAY
        16 002047   002061 604000 16                 TMI     s:21887
        16 002050   200027 236100                    LDQ     OUT$,,AUTO
        16 002051   001507 116000 13                 CMPQ    E_SYNERR
        16 002052   002061 601000 16                 TNZ     s:21887

     1339    21883    3        THEN DO;

     1340    21884    3             CALL XUR$ECHOIF;

  21884 16 002053   000017 631400 17                 EPPR1   15
        16 002054   000000 701000 xent               TSX1    XUR$ECHOIF
        16 002055   000000 011000                    NOP     0

     1341    21885    3             CALL XUR$ERRPTR;

  21885 16 002056   000017 631400 17                 EPPR1   15
        16 002057   000000 701000 xent               TSX1    XUR$ERRPTR
        16 002060   000000 011000                    NOP     0

     1342    21886    3        END;

     1343    21887    2        CALL VMA$ERRMSG (OUTERR,CMD_DCB);

  21887 16 002061   000105 236000 17                 LDQ     69
        16 002062   200451 756100                    STQ     P2$+2,,AUTO
        16 002063   200027 630500                    EPPR0   OUT$,,AUTO
        16 002064   200450 450500                    STP0    P2$+1,,AUTO
        16 002065   200450 630500                    EPPR0   P2$+1,,AUTO
        16 002066   000000 631400 17                 EPPR1   0
        16 002067   000000 701000 xent               TSX1    VMA$ERRMSG
        16 002070   000000 011000                    NOP     0

     1344    21888    2        ERR_FLAG = %YES#;

  21888 16 002071   400000 236003                    LDQ     -131072,DU
        16 002072   200021 756100                    STQ     ERR_FLAG,,AUTO
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:222  

     1345    21889    2        RETURN;

  21889 16 002073   200376 221300                    LDX1  ! @FLD$+1,,AUTO
        16 002074   000001 702211                    TSX2  ! 1,X1

     1346    21890
     1347    21891    2   END CMD_ERR;
     1348    21892        %EJECT;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:223  
     1349    21893        /********************************************************************/
     1350    21894        /*I*
     1351    21895            NAME: MON_ERR
     1352    21896            PURPOSE: To diagnose an error on a monitor call.
     1353    21897            DESCRIPTION:
     1354    21898                This little routine diagnoses errors on monitor calls.
     1355    21899                It doesn't do much, but it's used in so many places that it's
     1356    21900                convenient to have a separate routine to do it.
     1357    21901        */
     1358    21902        /********************************************************************/
     1359    21903    1   MON_ERR: PROC;

  21903 16 002075   200440 741300       MON_ERR      STX1  ! @FLD$+1,,AUTO

     1360    21904
     1361    21905    2        CALL VMA$ERRMSG (B$TCB.ALT$->B$ALT.ERR, B$TCB.ALT$->B$ALT.DCB#);

  21905 16 002076   000000 470400 xsym               LDP0    B$TCB$
        16 002077   000000 471500                    LDP1    0,,PR0
        16 002100   100101 633500                    EPPR3   65,,PR1
        16 002101   200451 453500                    STP3    P2$+2,,AUTO
        16 002102   100102 634500                    EPPR4   66,,PR1
        16 002103   200450 454500                    STP4    P2$+1,,AUTO
        16 002104   200450 630500                    EPPR0   P2$+1,,AUTO
        16 002105   000000 631400 17                 EPPR1   0
        16 002106   000000 701000 xent               TSX1    VMA$ERRMSG
        16 002107   000000 011000                    NOP     0

     1362    21906    2        ERR_FLAG = %YES#;

  21906 16 002110   400000 236003                    LDQ     -131072,DU
        16 002111   200021 756100                    STQ     ERR_FLAG,,AUTO

     1363    21907    2        RETURN;

  21907 16 002112   200440 221300                    LDX1  ! @FLD$+1,,AUTO
        16 002113   000001 702211                    TSX2  ! 1,X1
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:224  

     1364    21908
     1365    21909    2   END MON_ERR;
     1366    21910        %EJECT;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:225  
     1367    21911        /*************************************************************/
     1368    21912        /*I*
     1369    21913            NAME: READ_CC
     1370    21914            CALL: CALL READ_CC ALTRET(eof)
     1371    21915            INPUT:  CMD_DCB = the dcb# to read from
     1372    21916            OUTPUT: CMD_BUF = the command just read
     1373    21917                    SIZE = the length of the command, sans trailing blanks
     1374    21918            DESCRIPTION:
     1375    21919                This routine is only called where commands are known to come
     1376    21920                from either a file or the terminal.  The rest of the time,
     1377    21921                XUR$GETCMD gets commands, so that SEND doesn't need to know
     1378    21922                if they come from the normal SI stream or from an ADAPT dialog.
     1379    21923
     1380    21924                WARNING: SEND command input is convoluted, what with juggling
     1381    21925                the differing requirements of file, interactive, and ADAPT
     1382    21926                dialog input, especially with regard to exception paths.
     1383    21927                I think the current logic, although it might seem wierd, is
     1384    21928                consistent and correct, but if it proves to be faulty, take
     1385    21929                care that the fix preserves all current capabilities!
     1386    21930        */
     1387    21931        /*************************************************************/
     1388    21932    1   READ_CC: PROC ALTRET;

  21932 16 002114   200436 741300       READ_CC      STX1  ! NEW_TYPE+1,,AUTO

     1389    21933
     1390    21934    2   REREAD:
     1391    21935    2        READ_SI.V.DCB# = CMD_DCB;

  21935 16 002115   000067 720000 11    REREAD       LXL0    CMD_DCB
        16 002116   001054 740000 11                 STX0    READ_SI+8

     1392    21936    2        CALL M$READ (READ_SI) ALTRET(E_READ);

  21936 16 002117   001044 630400 11                 EPPR0   READ_SI
        16 002120   440000 713400                    CLIMB   alt,read
        16 002121   401400 401760                    pmme    nvectors=4
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:226  
        16 002122   002133 702000 16                 TSX2    E_READ

     1393    21937    2        SIZE = DCBADDR(CMD_DCB) -> F$DCB.ARS#;

  21937 16 002123   000054 470400 17                 LDP0    44
        16 002124   000000 471500                    LDP1    0,,PR0
        16 002125   000067 720000 11                 LXL0    CMD_DCB
        16 002126   100000 473510                    LDP3    0,X0,PR1
        16 002127   300000 235100                    LDA     0,,PR3
        16 002130   200133 755100                    STA     SIZE,,AUTO

     1394    21938    2        RETURN;

  21938 16 002131   200436 221300                    LDX1  ! NEW_TYPE+1,,AUTO
        16 002132   000001 702211                    TSX2  ! 1,X1

     1395    21939        /**/
     1396    21940    2   E_READ:
     1397    21941    2        IF B$TCB.ALT$ -> B$ALT.ERR.CODE = %E$EOF

  21941 16 002133   000000 470400 xsym  E_READ       LDP0    B$TCB$
        16 002134   000000 471500                    LDP1    0,,PR0
        16 002135   100102 236100                    LDQ     66,,PR1
        16 002136   377770 376007                    ANQ     131064,DL
        16 002137   000060 116007                    CMPQ    48,DL
        16 002140   002143 601000 16                 TNZ     s:21947

     1398    21942    2        THEN
     1399    21943    2             ALTRETURN;

  21943 16 002141   200436 221300                    LDX1  ! NEW_TYPE+1,,AUTO
        16 002142   000000 702211                    TSX2  ! 0,X1

     1400    21944        /*
     1401    21945           ****  Abort if receiving errors when reading from file(send fid).
     1402    21946        */
     1403    21947    2        CALL MON_ERR;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:227  

  21947 16 002143   002075 701000 16                 TSX1    MON_ERR
        16 002144   000000 011000                    NOP     0

     1404    21948    2        IF SI_FILE

  21948 16 002145   200024 234100                    SZN     SI_FILE,,AUTO
        16 002146   002156 605000 16                 TPL     s:21953

     1405    21949    3        THEN DO;

     1406    21950    3             CALL XUR$ERRMSG(E_NOTSENT);

  21950 16 002147   000106 630400 17                 EPPR0   70
        16 002150   000003 631400 17                 EPPR1   3
        16 002151   000000 701000 xent               TSX1    XUR$ERRMSG
        16 002152   000000 011000                    NOP     0

     1407    21951    3             CALL M$ERR (NOTSENT_ERR);

  21951 16 002153   001122 630400 13                 EPPR0   NOTSENT_ERR
        16 002154   000002 713400                    CLIMB   err
        16 002155   400400 401760                    pmme    nvectors=2

     1408    21952    3        END;

     1409    21953    2        GOTO REREAD;

  21953 16 002156   002115 710000 16                 TRA     REREAD

     1410    21954
     1411    21955    2   END READ_CC;
     1412    21956        %EJECT;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:228  
     1413    21957        /********************************************************************/
     1414    21958        /*I*
     1415    21959            NAME: PROCESS_BODY
     1416    21960            PURPOSE: To read and process the message body.
     1417    21961            DESCRIPTION:
     1418    21962                This routine reads message body lines and writes them to the
     1419    21963                message file.  It continues reading and writing lines until
     1420    21964                EOF is encountered, or until a zero length record is read from
     1421    21965                the terminal.  (Zero length records in a file are treated as
     1422    21966                blanks lines, because some editors can represent blank lines
     1423    21967                that way.)
     1424    21968                Even though body lines don't really need to be parsed, they
     1425    21969                must be passed through GETCMD to make any command variable
     1426    21970                substitutions necessary.  Also, unless lines are being read
     1427    21971                from a file, they must be read by GETCMD so that they can be
     1428    21972                supplied by an ADAPT dialog.
     1429    21973                Since the start of the body in a file is indicated by a line
     1430    21974                that can't be parsed as a header field, the routine is set up
     1431    21975                so that it expects the first body line to have already been
     1432    21976                read and parsed.
     1433    21977        */
     1434    21978        /********************************************************************/
     1435    21979
     1436    21980    1   PROCESS_BODY: PROC;

  21980 16 002157   200370 741300       PROCESS_BODY STX1  ! SAVE_BREAK_TYPE+3,,AUTO

     1437    21981    3        DO FOREVER;

     1438    21982        /*
     1439    21983            ***** Exit if zero-length record read from the terminal ...
     1440    21984        */
     1441    21985    3             SIZE = P_PCB.NCHARS;

  21985 16 002160   000011 235000 11                 LDA     P_PCB+9
        16 002161   200133 755100                    STA     SIZE,,AUTO

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:229  
     1442    21986    3             IF SIZE = 0

  21986 16 002162   002177 601000 16                 TNZ     s:21996

     1443    21987    3             THEN IF DCBADDR(CMD_DCB)->F$DCB.DDEV.IC#

  21987 16 002163   000054 470400 17                 LDP0    44
        16 002164   000000 471500                    LDP1    0,,PR0
        16 002165   000067 720000 11                 LXL0    CMD_DCB
        16 002166   100000 473510                    LDP3    0,X0,PR1
        16 002167   300004 236100                    LDQ     4,,PR3
        16 002170   100000 316007                    CANQ    32768,DL
        16 002171   002436 601000 16                 TNZ     EOF

     1444    21988    3                  THEN
     1445    21989    3                       EXIT;
     1446    21990    3                  ELSE IF GATEWAY AND VM_HEADER.NUM_RECORDS = 0

  21990 16 002172   000000 234000 xsym               SZN     GATEWAY
        16 002173   002177 605000 16                 TPL     s:21996
        16 002174   000000 474400 xsym               LDP4    VM_HEADER$
        16 002175   400011 235100                    LDA     9,,PR4
        16 002176   002310 600000 16                 TZE     NEXT_LINE

     1447    21991    3                       THEN /* ignore leading null records in gateway mode */
     1448    21992    3                            GOTO NEXT_LINE;
     1449    21993        /*
     1450    21994            ***** Write the record to the message file ...
     1451    21995        */
     1452    21996    3             IF SIZE > 0

  21996 16 002177   200133 235100                    LDA     SIZE,,AUTO
        16 002200   002227 604400 16                 TMOZ    s:22007

     1453    21997    4             THEN DO;

     1454    21998    4                  CALL SEARCHR (SIZE, DUMMY, NON_BLANK, P_PCB$TEXT)
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:230  

  21998 16 002201   000011 236000 11                 LDQ     P_PCB+9
        16 002202   000000 470400 xsym               LDP0    B$SR_NON_BLANK$
        16 002203   000000 471400 11                 LDP1    P_PCB
        16 002204   000000 620006                    EAX0    0,QL
        16 002205   000000 165540                    TCTR
        16 002206   100000 000010                    ADSC9   0,,PR1                   cn=0,n=*X0
        16 002207   000000 000100                    ARG     0,,PR0
        16 002210   200133 000100                    ARG     SIZE,,AUTO
        16 002211   200133 235100                    LDA     SIZE,,AUTO
        16 002212   000033 771000                    ARL     27
        16 002213   200137 755100                    STA     DUMMY,,AUTO
        16 002214   200133 551140                    STBA    SIZE,'40'O,AUTO
        16 002215   002226 606400 16                 TTN     s:22004
        16 002216   200133 054100                    AOS     SIZE,,AUTO
        16 002217   200133 156100                    SSQ     SIZE,,AUTO

     1455    21999    5                  WHENRETURN DO;

     1456    22000    5                       SIZE = SIZE + 1;

  22000 16 002220   200133 054100                    AOS     SIZE,,AUTO

     1457    22001    5                       VM_BODYREC.VALUE.DATA = SUBSTR (P_PCB$TEXT,0,SIZE);

  22001 16 002221   200133 721100                    LXL1    SIZE,,AUTO
        16 002222   040000 100540                    MLR     fill='040'O
        16 002223   100000 000011                    ADSC9   0,,PR1                   cn=0,n=*X1
        16 002224   000403 000454 11                 ADSC9   VM_BODYREC+2             cn=0,n=300

     1458    22002    5                  END;

  22002 16 002225   002227 710000 16                 TRA     s:22007

     1459    22003    5                  WHENALTRETURN DO;

     1460    22004    5                       SIZE = 0;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:231  

  22004 16 002226   200133 450100                    STZ     SIZE,,AUTO

     1461    22005    5                  END;

     1462    22006    4             END;

     1463    22007    3             VM_BODYREC.VALUE.COUNT = SIZE;

  22007 16 002227   200133 235100                    LDA     SIZE,,AUTO
        16 002230   000402 755000 11                 STA     VM_BODYREC+1

     1464    22008    3             IF DCBADDR(CMD_DCB)->F$DCB.ASN#=%FILE#

  22008 16 002231   000054 470400 17                 LDP0    44
        16 002232   000000 471500                    LDP1    0,,PR0
        16 002233   000067 720000 11                 LXL0    CMD_DCB
        16 002234   100000 473510                    LDP3    0,X0,PR1
        16 002235   300032 236100                    LDQ     26,,PR3
        16 002236   777000 376007                    ANQ     -512,DL
        16 002237   001000 116007                    CMPQ    512,DL
        16 002240   002261 601000 16                 TNZ     s:22013

     1465    22009    3             THEN
     1466    22010    3                  CALL VMD$PUT_BODY (0,M$WORK_NUM,VM_HEADER.NUM_RECORDS,SIZE,0,

  22010 16 002241   300003 634500                    EPPR4   3,,PR3
        16 002242   200456 454500                    STP4    P2$+7,,AUTO
        16 002243   000110 237000 17                 LDAQ    72
        16 002244   200454 757100                    STAQ    P2$+5,,AUTO
        16 002245   200133 635500                    EPPR5   SIZE,,AUTO
        16 002246   200453 455500                    STP5    P2$+4,,AUTO
        16 002247   000000 236000 xsym               LDQ     VM_HEADER$
        16 002250   000011 036003                    ADLQ    9,DU
        16 002251   200452 756100                    STQ     P2$+3,,AUTO
        16 002252   000052 237000 17                 LDAQ    42
        16 002253   200450 757100                    STAQ    P2$+1,,AUTO
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:232  
        16 002254   200450 630500                    EPPR0   P2$+1,,AUTO
        16 002255   000055 631400 17                 EPPR1   45
        16 002256   000000 701000 xent               TSX1    VMD$PUT_BODY
        16 002257   002303 702000 16                 TSX2    E_BODY
        16 002260   002276 710000 16                 TRA     s:22015

     1467    22011    3                    VM_BODYREC,DCBADDR(CMD_DCB)->F$DCB.DVBYTE) ALTRET(E_BODY);
     1468    22012    3             ELSE
     1469    22013    3                  CALL VMD$PUT_BODY (0,M$WORK_NUM,

  22013 16 002261   000110 237000 17                 LDAQ    72
        16 002262   200454 757100                    STAQ    P2$+5,,AUTO
        16 002263   200133 634500                    EPPR4   SIZE,,AUTO
        16 002264   200453 454500                    STP4    P2$+4,,AUTO
        16 002265   000000 236000 xsym               LDQ     VM_HEADER$
        16 002266   000011 036003                    ADLQ    9,DU
        16 002267   200452 756100                    STQ     P2$+3,,AUTO
        16 002270   000052 237000 17                 LDAQ    42
        16 002271   200450 757100                    STAQ    P2$+1,,AUTO
        16 002272   200450 630500                    EPPR0   P2$+1,,AUTO
        16 002273   000037 631400 17                 EPPR1   31
        16 002274   000000 701000 xent               TSX1    VMD$PUT_BODY
        16 002275   002303 702000 16                 TSX2    E_BODY

     1470    22014    3                    VM_HEADER.NUM_RECORDS,SIZE,0,VM_BODYREC) ALTRET(E_BODY);
     1471    22015    3             VM_HEADER.NUM_RECORDS = VM_HEADER.NUM_RECORDS + 1;

  22015 16 002276   000000 470400 xsym               LDP0    VM_HEADER$
        16 002277   000011 235100                    LDA     9,,PR0
        16 002300   000001 035007                    ADLA    1,DL
        16 002301   000011 755100                    STA     9,,PR0

     1472    22016        /*
     1473    22017            ***** Report any errors and continue (except return on EOF) ...
     1474    22018        */
     1475    22019    4             DO NEVER;

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:233  
  22019 16 002302   002305 710000 16                 TRA     s:22023

  22012 16 002303                       E_BODY       null
     1476    22020    4   E_BODY:        ;
     1477    22021    4                  CALL MON_ERR;

  22021 16 002303   002075 701000 16                 TSX1    MON_ERR
        16 002304   000000 011000                    NOP     0

     1478    22022    4             END;

     1479    22023    4             DO NEVER;

  22023 16 002305   002310 710000 16                 TRA     NEXT_LINE

  22023 16 002306                       E_BODY1      null
     1480    22024    4   E_BODY1:       ;
     1481    22025    4                  CALL CMD_ERR ALTRET(EOF);

  22025 16 002306   002035 701000 16                 TSX1    CMD_ERR
        16 002307   002436 702000 16                 TSX2    EOF

     1482    22026    4             END;

  22023 16 002310                       NEXT_LINE    null
     1483    22027    3   NEXT_LINE: ;
     1484    22028        /*
     1485    22029             ***** Set the prompt string to 5 blanks ...
     1486    22030        */
     1487    22031    3             IF CHANGE_PROMPT.PROMPT_ ~= VECTOR(VN_BODY2)

  22031 16 002310   000000 236000 xsym               LDQ     VN_BODY2
        16 002311   000033 772000                    QRL     27
        16 002312   000001 620006                    EAX0    1,QL
        16 002313   000000 635010                    EAA     0,X0
        16 002314   000002 771000                    ARL     2
        16 002315   000140 135007                    SBLA    96,DL
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:234  
        16 002316   000112 236000 17                 LDQ     74
        16 002317   001104 117000 11                 CMPAQ   CHANGE_PROMPT+4
        16 002320   002371 600000 16                 TZE     s:22089

     1488    22032    4             THEN DO;

     1489    22033    4                  IF VM_HEADER.NUM_RECORDS = 0

  22033 16 002321   000000 470400 xsym               LDP0    VM_HEADER$
        16 002322   000011 235100                    LDA     9,,PR0
        16 002323   002346 601000 16                 TNZ     s:22067

     1490    22034    5                  THEN DO;

     1491    22035                            %INIT_STR( STR=VN_BODY, CODE=E_CMD_BODY_PROMPT, TEST=YES, VECT=
             22035                                CHANGE_PROMPT.PROMPT_);

  22042 16 002324   000000 236000 xsym               LDQ     VN_BODY
        16 002325   000033 772000                    QRL     27
        16 002326   000000 621006                    EAX1    0,QL
        16 002327   040000 106440                    CMPC    fill='040'O
        16 002330   000000 200011 xsym               ADSC9   VN_BODY                  cn=1,n=*X1
        16 002331   000064 000001 17                 ADSC9   52                       cn=0,n=1
        16 002332   002340 601000 16                 TNZ     s:22047

  22044 16 002333   000113 630400 17                 EPPR0   75
        16 002334   000074 631400 17                 EPPR1   60
        16 002335   000000 701000 xent               TSX1    VMD$ERRMSG
        16 002336   000000 011000                    NOP     0

  22045 16 002337   002367 710000 16                 TRA     s:22084

  22047 16 002340   000000 635011                    EAA     0,X1
        16 002341   000002 771000                    ARL     2
        16 002342   000140 135007                    SBLA    96,DL
        16 002343   000116 236000 17                 LDQ     78
        16 002344   001104 757000 11                 STAQ    CHANGE_PROMPT+4
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:235  

     1492    22058    5                  END;

  22058 16 002345   002367 710000 16                 TRA     s:22084

     1493    22059    5                  ELSE DO;

     1494    22060                           %INIT_STR( STR=VN_BODY2, CODE=E_CMD_BODY2_PROMPT, TEST=YES, VECT
             22060                                =CHANGE_PROMPT.PROMPT_);

  22067 16 002346   000000 236000 xsym               LDQ     VN_BODY2
        16 002347   000033 772000                    QRL     27
        16 002350   000000 621006                    EAX1    0,QL
        16 002351   040000 106440                    CMPC    fill='040'O
        16 002352   000000 200011 xsym               ADSC9   VN_BODY2                 cn=1,n=*X1
        16 002353   000064 000001 17                 ADSC9   52                       cn=0,n=1
        16 002354   002362 601000 16                 TNZ     s:22072

  22069 16 002355   000117 630400 17                 EPPR0   79
        16 002356   000074 631400 17                 EPPR1   60
        16 002357   000000 701000 xent               TSX1    VMD$ERRMSG
        16 002360   000000 011000                    NOP     0

  22070 16 002361   002367 710000 16                 TRA     s:22084

  22072 16 002362   000000 635011                    EAA     0,X1
        16 002363   000002 771000                    ARL     2
        16 002364   000140 135007                    SBLA    96,DL
        16 002365   000122 236000 17                 LDQ     82
        16 002366   001104 757000 11                 STAQ    CHANGE_PROMPT+4

     1495    22083    5                  END;

     1496    22084    4                  P_PCB.NOLEADBLANKS = %YES#;

  22084 16 002367   100000 236007                    LDQ     32768,DL
        16 002370   000005 256000 11                 ORSQ    P_PCB+5
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:236  

     1497    22085    4             END;

     1498    22086        /*
     1499    22087            ***** Read the next body line and loop ...
     1500    22088        */
     1501    22089    3             IF NOT DCBADDR(CMD_DCB)-> F$DCB.DDEV.IC#

  22089 16 002371   000054 470400 17                 LDP0    44
        16 002372   000000 471500                    LDP1    0,,PR0
        16 002373   000067 720000 11                 LXL0    CMD_DCB
        16 002374   100000 473510                    LDP3    0,X0,PR1
        16 002375   300004 236100                    LDQ     4,,PR3
        16 002376   100000 316007                    CANQ    32768,DL
        16 002377   002423 601000 16                 TNZ     s:22096

     1502    22090    4             THEN DO;

     1503    22091    4                  CALL M$PROMPT (CHANGE_PROMPT);

  22091 16 002400   001100 630400 11                 EPPR0   CHANGE_PROMPT
        16 002401   160002 713400                    CLIMB   57346
        16 002402   401000 401760                    pmme    nvectors=3

     1504    22092    4                  CALL READ_CC ALTRET(EOF);

  22092 16 002403   002114 701000 16                 TSX1    READ_CC
        16 002404   002436 702000 16                 TSX2    EOF

     1505    22093    4                 CALL XUR$GETCMD (CMD_BODY$->BSD, OUT$,, CMD_BUF, SIZE) ALTRET(E_BODY1
             22093                           );

  22093 16 002405   200133 630500                    EPPR0   SIZE,,AUTO
        16 002406   200454 450500                    STP0    P2$+5,,AUTO
        16 002407   000072 236000 17                 LDQ     58
        16 002410   000032 235000 17                 LDA     26
        16 002411   200452 757100                    STAQ    P2$+3,,AUTO
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:237  
        16 002412   200027 631500                    EPPR1   OUT$,,AUTO
        16 002413   200451 451500                    STP1    P2$+2,,AUTO
        16 002414   200007 236100                    LDQ     CMD_BODY$,,AUTO
        16 002415   200450 756100                    STQ     P2$+1,,AUTO
        16 002416   200450 630500                    EPPR0   P2$+1,,AUTO
        16 002417   000035 631400 17                 EPPR1   29
        16 002420   000000 701000 xent               TSX1    XUR$GETCMD
        16 002421   002306 702000 16                 TSX2    E_BODY1

     1506    22094    4             END;

  22094 16 002422   002160 710000 16                 TRA     s:21985

     1507    22095    3             ELSE
     1508    22096    3                  CALL XUR$GETCMD (CMD_BODY$->BSD, OUT$, CHANGE_PROMPT.PROMPT_)

  22096 16 002423   000077 236000 17                 LDQ     63
        16 002424   200452 756100                    STQ     P2$+3,,AUTO
        16 002425   200027 634500                    EPPR4   OUT$,,AUTO
        16 002426   200451 454500                    STP4    P2$+2,,AUTO
        16 002427   200007 236100                    LDQ     CMD_BODY$,,AUTO
        16 002430   200450 756100                    STQ     P2$+1,,AUTO
        16 002431   200450 630500                    EPPR0   P2$+1,,AUTO
        16 002432   000074 631400 17                 EPPR1   60
        16 002433   000000 701000 xent               TSX1    XUR$GETCMD
        16 002434   002306 702000 16                 TSX2    E_BODY1

     1509    22097    3                    ALTRET(E_BODY1);
     1510    22098    3        END;

  22098 16 002435   002160 710000 16                 TRA     s:21985

     1511    22099    2   EOF: ;

  22099 16 002436                       EOF          null
     1512    22100    2        P_PCB.NOLEADBLANKS = %NO#;

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:238  
  22100 16 002436   000103 236000 17                 LDQ     67
        16 002437   000005 356000 11                 ANSQ    P_PCB+5

     1513    22101    2        RETURN;

  22101 16 002440   200370 221300                    LDX1  ! SAVE_BREAK_TYPE+3,,AUTO
        16 002441   000001 702211                    TSX2  ! 1,X1

     1514    22102
     1515    22103        /********************************************************************/
     1516    22104        /*I*
     1517    22105            NAME: APPEND_BODY
     1518    22106            PURPOSE: To append lines to the message body.
     1519    22107            DESCRIPTION:
     1520    22108                The APPEND command uses this entry into PROCESS_BODY to avoid
     1521    22109                having to pre-read and parse the first appended line.
     1522    22110        */
     1523    22111        /********************************************************************/
     1524    22112
     1525    22113    2   APPEND_BODY: ENTRY;

  22113 16 002442   200370 741300       APPEND_BODY  STX1  ! SAVE_BREAK_TYPE+3,,AUTO

     1526    22114
     1527    22115    2        GOTO NEXT_LINE;

  22115 16 002443   002310 710000 16                 TRA     NEXT_LINE

     1528    22116
     1529    22117    2   END PROCESS_BODY;
     1530    22118        %EJECT;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:239  
     1531    22119        /******************************************************************/
     1532    22120        /*I*
     1533    22121           NAME: PROCESS_ENCL
     1534    22122           PURPOSE: To append enclosure records to a mailgram
     1535    22123           DESCRIPTION: This routine goes through the parse tree and for
     1536    22124                 each node, it opens the file, reads the records and writes
     1537    22125                 them to the message body, updates the enclosure context
     1538    22126                 record and the message header.
     1539    22127        */
     1540    22128        /******************************************************************/
     1541    22129
     1542    22130    1   PROCESS_ENCL: PROC ALTRET;

  22130 16 002444   200370 741300       PROCESS_ENCL STX1  ! SAVE_BREAK_TYPE+3,,AUTO

     1543    22131
     1544    22132    2   DCL PTR1$ PTR;   /* PTR1$ and PTR2$ are misc. pointers for going */
     1545    22133    2   DCL PTR2$ PTR;   /* through the parse tree.                      */
     1546    22134    2   DCL PREV_ENT$ PTR; /* Pointer to the prev. entry in the list     */
     1547    22135    2   DCL REC$ PTR;    /* Pointer to the record data buffer            */
     1548    22136    2   DCL PAGESIZE SBIN WORD STATIC INIT(4096);
     1549    22137    2   DCL 1 TEXTC BASED,
     1550    22138    2         2 L# UBIN(9) UNAL,
     1551    22139    2         2 TEXT# CHAR(TEXTC.L#);
     1552    22140        %FPT_PRECORD(FPTN=ENCL_REC,KEYS=NO,N=-1);
     1553    22161
     1554    22162    3        DO I = 0 TO OUT$->P$B.SUBLK$(0)->P$B.NSUBLKS - 1;

  22162 16 002445   200134 450100                    STZ     I,,AUTO
        16 002446   003067 710000 16                 TRA     s:22275+1

     1555    22163
     1556    22164           /* Set up context pointers */
     1557    22165
     1558    22166    4             IF VM_ENCL_HEAD.NUM_ENTRIES > 0 THEN DO;

  22166 16 002447   000000 470400 xsym               LDP0    VM_ENCLLIST$
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:240  
        16 002450   000001 235100                    LDA     1,,PR0
        16 002451   002502 600000 16                 TZE     s:22177

     1559    22167    4                  PREV_ENT$ = ENCL$;

  22167 16 002452   000112 236000 11                 LDQ     ENCL$
        16 002453   200373 756100                    STQ     PREV_ENT$,,AUTO

     1560    22168    4                  ENCL$ = VM_ENCL_HEAD.NEXT$;

  22168 16 002454   000005 236100                    LDQ     5,,PR0
        16 002455   000112 756000 11                 STQ     ENCL$

     1561    22169              /* Make sure there is enough room for another entry
     1562    22170                 in the linked list                               */
     1563    22171
     1564    22172    4                  IF VBOUND(VM_ENCLLIST_) - POFFW(VM_ENCL_HEAD.NEXT$,VM_ENCLLIST$) < %
             22172                           VM_ENCLLIST_ENTRY_SIZE

  22172 16 002456   000000 235000 xsym               LDA     VM_ENCLLIST$
        16 002457   000022 771000                    ARL     18
        16 002460   200450 755100                    STA     P2$+1,,AUTO
        16 002461   000005 236100                    LDQ     5,,PR0
        16 002462   000022 772000                    QRL     18
        16 002463   200450 136100                    SBLQ    P2$+1,,AUTO
        16 002464   200451 756100                    STQ     P2$+2,,AUTO
        16 002465   000000 236000 xsym               LDQ     VM_ENCLLIST_
        16 002466   000020 772000                    QRL     16
        16 002467   200451 136100                    SBLQ    P2$+2,,AUTO
        16 002470   000112 116007                    CMPQ    74,DL
        16 002471   002512 605000 16                 TPL     s:22182

     1565    22173    4                  THEN
     1566    22174    4                       VBOUND(VM_ENCLLIST_) = VBOUND(VM_ENCLLIST_) + PAGESIZE;

  22174 16 002472   000000 236000 xsym               LDQ     VM_ENCLLIST_
        16 002473   000020 772000                    QRL     16
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:241  
        16 002474   001340 036000 11                 ADLQ    PAGESIZE
        16 002475   000020 736000                    QLS     16
        16 002476   000000 676000 xsym               ERQ     VM_ENCLLIST_
        16 002477   000123 376000 17                 ANQ     83
        16 002500   000000 656000 xsym               ERSQ    VM_ENCLLIST_

     1567    22175    4             END;

  22175 16 002501   002512 710000 16                 TRA     s:22182

     1568    22176    4             ELSE DO;

     1569    22177    4                  VM_ENCL_HEAD = INIT_ENCL_HEAD;

  22177 16 002502   000100 100400                    MLR     fill='000'O
        16 002503   000135 000034 13                 ADSC9   INIT_ENCL_HEAD           cn=0,n=28
        16 002504   000000 000034                    ADSC9   0,,PR0                   cn=0,n=28

     1570    22178    4                  ENCL$ = PINCRW(VM_ENCLLIST$,SIZEW(VM_ENCL_HEAD));

  22178 16 002505   000000 236000 xsym               LDQ     VM_ENCLLIST$
        16 002506   000007 036003                    ADLQ    7,DU
        16 002507   000112 756000 11                 STQ     ENCL$

     1571    22179    4                  VM_ENCL_HEAD.HEAD$ = ENCL$;

  22179 16 002510   000000 470400 xsym               LDP0    VM_ENCLLIST$
        16 002511   000003 756100                    STQ     3,,PR0

     1572    22180    4             END;

     1573    22181
     1574    22182    3             VM_ENCLOS = INIT_ENCLOS;

  22182 16 002512   000112 471400 11                 LDP1    ENCL$
        16 002513   000100 100400                    MLR     fill='000'O
        16 002514   000144 000060 13                 ADSC9   INIT_ENCLOS              cn=0,n=48
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:242  
        16 002515   100000 000060                    ADSC9   0,,PR1                   cn=0,n=48

     1575    22183    3             PTR1$ = OUT$->P$B.SUBLK$(0)->P$B.SUBLK$(I);

  22183 16 002516   200027 470500                    LDP0    OUT$,,AUTO
        16 002517   000003 473500                    LDP3    3,,PR0
        16 002520   200134 720100                    LXL0    I,,AUTO
        16 002521   300003 236110                    LDQ     3,X0,PR3
        16 002522   200371 756100                    STQ     PTR1$,,AUTO

     1576    22184
     1577    22185           /* Go through the parts of each file/title string */
     1578    22186
     1579    22187    4             DO J = 0 TO PTR1$->P$B.NSUBLKS - 1;

  22187 16 002523   200135 450100                    STZ     J,,AUTO
        16 002524   002656 710000 16                 TRA     s:22207+1

     1580    22188    4                  PTR2$ = PTR1$->P$B.SUBLK$(J);

  22188 16 002525   200371 470500                    LDP0    PTR1$,,AUTO
        16 002526   200135 720100                    LXL0    J,,AUTO
        16 002527   000003 236110                    LDQ     3,X0,PR0
        16 002530   200372 756100                    STQ     PTR2$,,AUTO

     1581    22189    5                  DO CASE (PTR2$->P$S.NDTYPE);

  22189 16 002531   200372 471500                    LDP1    PTR2$,,AUTO
        16 002532   100000 236100                    LDQ     0,,PR1
        16 002533   000022 772000                    QRL     18
        16 002534   000077 376007                    ANQ     63,DL
        16 002535   000005 136007                    SBLQ    5,DL
        16 002536   000022 116007                    CMPQ    18,DL
        16 002537   002541 602006 16                 TNC     s:22189+8,QL
        16 002540   002655 710000 16                 TRA     s:22207
        16 002541   002632 710000 16                 TRA     s:22202
        16 002542   002655 710000 16                 TRA     s:22207
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:243  
        16 002543   002655 710000 16                 TRA     s:22207
        16 002544   002655 710000 16                 TRA     s:22207
        16 002545   002655 710000 16                 TRA     s:22207
        16 002546   002655 710000 16                 TRA     s:22207
        16 002547   002655 710000 16                 TRA     s:22207
        16 002550   002655 710000 16                 TRA     s:22207
        16 002551   002655 710000 16                 TRA     s:22207
        16 002552   002655 710000 16                 TRA     s:22207
        16 002553   002655 710000 16                 TRA     s:22207
        16 002554   002655 710000 16                 TRA     s:22207
        16 002555   002655 710000 16                 TRA     s:22207
        16 002556   002655 710000 16                 TRA     s:22207
        16 002557   002655 710000 16                 TRA     s:22207
        16 002560   002655 710000 16                 TRA     s:22207
        16 002561   002655 710000 16                 TRA     s:22207
        16 002562   002563 710000 16                 TRA     s:22191

     1582    22190    5                  CASE (%FID#);

     1583    22191    5                      OPEN_FPT      = OPEN_ENCL_FILE;

  22191 16 002563   000100 100400                    MLR     fill='000'O
        16 002564   000736 000350 13                 ADSC9   OPEN_ENCL_FILE           cn=0,n=232
        16 002565   200272 000350                    ADSC9   OPEN_FPT,,AUTO           cn=0,n=232

     1584    22192    5                      OPEN_FPT.V_   = VECTOR(OPEN_ENCL_FILE.V);

  22192 16 002566   000124 237000 17                 LDAQ    84
        16 002567   200272 757100                    STAQ    OPEN_FPT,,AUTO

     1585    22193    5                      CHECK_FID     = CHECK_FID_CONST;

  22193 16 002570   000100 100400                    MLR     fill='000'O
        16 002571   000522 000140 13                 ADSC9   CHECK_FID_CONST          cn=0,n=96
        16 002572   200242 000140                    ADSC9   CHECK_FID,,AUTO          cn=0,n=96

     1586    22194    5                      CHECK_FID.V_  = VECTOR(CHECK_FID.V);
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:244  

  22194 16 002573   000046 235000 17                 LDA     38
        16 002574   200450 452500                    STP2    P2$+1,,AUTO
        16 002575   200450 236100                    LDQ     P2$+1,,AUTO
        16 002576   000266 036003                    ADLQ    182,DU
        16 002577   200242 757100                    STAQ    CHECK_FID,,AUTO

     1587    22195    5                      CHECK_FID.TEXTFID_ = VECTOR(PTR2$->P$S.TEXT);

  22195 16 002600   100004 236100                    LDQ     4,,PR1
        16 002601   000033 772000                    QRL     27
        16 002602   000064 737000                    LLS     52
        16 002603   000140 135007                    SBLA    96,DL
        16 002604   200372 236100                    LDQ     PTR2$,,AUTO
        16 002605   000047 036000 17                 ADLQ    39
        16 002606   200244 757100                    STAQ    CHECK_FID+2,,AUTO

     1588    22196    5                      CHECK_FID.ASN_ = VECTOR(OPEN_FPT.V.ASN#);

  22196 16 002607   177640 235007                    LDA     65440,DL
        16 002610   200450 452500                    STP2    P2$+1,,AUTO
        16 002611   200450 236100                    LDQ     P2$+1,,AUTO
        16 002612   000050 036000 17                 ADLQ    40
        16 002613   200260 757100                    STAQ    CHECK_FID+14,,AUTO

     1589    22197    5                      CHECK_FID.RES_ = VECTOR(OPEN_FPT.V.RES#);

  22197 16 002614   777640 235007                    LDA     -96,DL
        16 002615   200450 452500                    STP2    P2$+1,,AUTO
        16 002616   200450 236100                    LDQ     P2$+1,,AUTO
        16 002617   000342 036003                    ADLQ    226,DU
        16 002620   200262 757100                    STAQ    CHECK_FID+16,,AUTO

     1590    22198    5                      CALL M$FID (CHECK_FID) ALTRET (E_ENCL);

  22198 16 002621   200242 630500                    EPPR0   CHECK_FID,,AUTO
        16 002622   420001 713400                    CLIMB   alt,+8193
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:245  
        16 002623   404400 401760                    pmme    nvectors=10
        16 002624   003106 702000 16                 TSX2    E_ENCL

     1591    22199    5                      CALL M$OPEN (OPEN_ENCL_FILE) ALTRET (E_ENCL);

  22199 16 002625   000736 630400 13                 EPPR0   OPEN_ENCL_FILE
        16 002626   450000 713400                    CLIMB   alt,open
        16 002627   410400 401760                    pmme    nvectors=18
        16 002630   003106 702000 16                 TSX2    E_ENCL
        16 002631   002655 710000 16                 TRA     s:22207

     1592    22200
     1593    22201    5                  CASE (%DSTRING#);

     1594    22202    5                      VM_ENCLOS.TITLE$ = PINCRW(ENCL$,SIZEW(VM_ENCLOS));

  22202 16 002632   000112 236000 11                 LDQ     ENCL$
        16 002633   000014 036003                    ADLQ    12,DU
        16 002634   000112 473400 11                 LDP3    ENCL$
        16 002635   300013 756100                    STQ     11,,PR3

     1595    22203    5                      VM_ENCLOS.TITLE$->TEXTC.L# = PTR2$->P$S.COUNT;

  22203 16 002636   300013 474500                    LDP4    11,,PR3
        16 002637   000100 100500                    MLR     fill='000'O
        16 002640   100004 000001                    ADSC9   4,,PR1                   cn=0,n=1
        16 002641   400000 000001                    ADSC9   0,,PR4                   cn=0,n=1

     1596    22204    5                      VM_ENCLOS.TITLE$->TEXTC.TEXT# = PTR2$->P$S.TEXT;

  22204 16 002642   300013 474500                    LDP4    11,,PR3
        16 002643   000100 101500                    MRL     fill='000'O
        16 002644   400000 000001                    ADSC9   0,,PR4                   cn=0,n=1
        16 002645   200450 000002                    ADSC9   P2$+1,,AUTO              cn=0,n=2
        16 002646   200450 220100                    LDX0    P2$+1,,AUTO
        16 002647   100004 236100                    LDQ     4,,PR1
        16 002650   000033 772000                    QRL     27
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:246  
        16 002651   000000 621006                    EAX1    0,QL
        16 002652   040140 100540                    MLR     fill='040'O
        16 002653   100004 200011                    ADSC9   4,,PR1                   cn=1,n=*X1
        16 002654   400000 200010                    ADSC9   0,,PR4                   cn=1,n=*X0

     1597    22205
     1598    22206    5                  END; /* CASE */

     1599    22207    4             END; /* DO J */

  22207 16 002655   200135 054100                    AOS     J,,AUTO
        16 002656   200371 470500                    LDP0    PTR1$,,AUTO
        16 002657   000001 236100                    LDQ     1,,PR0
        16 002660   000022 772000                    QRL     18
        16 002661   200135 116100                    CMPQ    J,,AUTO
        16 002662   002525 605400 16                 TPNZ    s:22188

     1600    22208
     1601    22209           /* Set up and init the read buffer. Start with a size of one
     1602    22210              page. Note that 2 words are left at the beginning of the
     1603    22211              buffer for type, textc count data, etc.                    */
     1604    22212
     1605    22213    3             READ_ENCL_FILE.BUF_.BUF$ = PINCRW(VBASE(VM_ENCLREC_),2);

  22213 16 002663   000001 236000 xsym               LDQ     VM_ENCLREC_+1
        16 002664   000002 036003                    ADLQ    2,DU
        16 002665   001067 756000 11                 STQ     READ_ENCL_FILE+5

     1606    22214    3             READ_ENCL_FILE.BUF_.BOUND = 8 + (PAGESIZE - 8);

  22214 16 002666   001340 236000 11                 LDQ     PAGESIZE
        16 002667   000020 736000                    QLS     16
        16 002670   001066 676000 11                 ERQ     READ_ENCL_FILE+4
        16 002671   000123 376000 17                 ANQ     83
        16 002672   001066 656000 11                 ERSQ    READ_ENCL_FILE+4

     1607    22215
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:247  
     1608    22216           /* Read/write loop until EOF */
     1609    22217
     1610    22218    4             DO FOREVER;

     1611    22219
     1612    22220    4   REREAD:
     1613    22221    4                  CALL M$READ (READ_ENCL_FILE)

  22221 16 002673   001062 630400 11    REREAD       EPPR0   READ_ENCL_FILE
        16 002674   440000 713400                    CLIMB   alt,read
        16 002675   401400 401760                    pmme    nvectors=4
        16 002676   002700 702000 16                 TSX2    s:22224
        16 002677   002727 710000 16                 TRA     s:22240

     1614    22222
     1615    22223    5                  WHENALTRETURN DO;

     1616    22224    5                       IF B$TCB.ALT$->B$ALT.ERR.CODE = %E$EOF

  22224 16 002700   000000 470400 xsym               LDP0    B$TCB$
        16 002701   000000 471500                    LDP1    0,,PR0
        16 002702   100102 236100                    LDQ     66,,PR1
        16 002703   377770 376007                    ANQ     131064,DL
        16 002704   000060 116007                    CMPQ    48,DL
        16 002705   003002 600000 16                 TZE     EOF

     1617    22225    5                       THEN
     1618    22226    5                            GOTO EOF;
     1619    22227
     1620    22228    5                       IF B$TCB.ALT$->B$ALT.ERR.CODE = %E$LD

  22228 16 002706   000070 116007                    CMPQ    56,DL
        16 002707   002726 601000 16                 TNZ     s:22236

     1621    22229    6                       THEN DO;

     1622    22230    6                            READ_ENCL_FILE.BUF_.BOUND = READ_ENCL_FILE.BUF_.BOUND +
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:248  
             22230                                     PAGESIZE;

  22230 16 002710   001066 236000 11                 LDQ     READ_ENCL_FILE+4
        16 002711   000020 772000                    QRL     16
        16 002712   001340 036000 11                 ADLQ    PAGESIZE
        16 002713   000020 736000                    QLS     16
        16 002714   001066 676000 11                 ERQ     READ_ENCL_FILE+4
        16 002715   000123 376000 17                 ANQ     83
        16 002716   001066 656000 11                 ERSQ    READ_ENCL_FILE+4

     1623    22231    6                            ENCL_REC.V.DCB# = M$ENCL_NUM;

  22231 16 002717   000001 720000 13                 LXL0    M$ENCL_NUM
        16 002720   001350 740000 11                 STX0    ENCL_REC+6

     1624    22232    6                            CALL M$PRECORD (ENCL_REC) ALTRET(E_ENCL);

  22232 16 002721   001342 630400 11                 EPPR0   ENCL_REC
        16 002722   440003 713400                    CLIMB   alt,+16387
        16 002723   401000 401760                    pmme    nvectors=3
        16 002724   003106 702000 16                 TSX2    E_ENCL

     1625    22233    6                            GOTO REREAD;

  22233 16 002725   002673 710000 16                 TRA     REREAD

     1626    22234    6                       END;
     1627    22235
     1628    22236    5                       GOTO E_ENCL;

  22236 16 002726   003106 710000 16                 TRA     E_ENCL

     1629    22237
     1630    22238    5                  END;
     1631    22239
     1632    22240    4                  SIZE = DCBADDR(M$ENCL_NUM)->F$DCB.ARS#;

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:249  
  22240 16 002727   000054 470400 17                 LDP0    44
        16 002730   000000 471500                    LDP1    0,,PR0
        16 002731   000001 720000 13                 LXL0    M$ENCL_NUM
        16 002732   100000 473510                    LDP3    0,X0,PR1
        16 002733   300000 235100                    LDA     0,,PR3
        16 002734   200133 755100                    STA     SIZE,,AUTO

     1633    22241    4                  VM_ENCLREC.TYPE = %VM_BODY_BINARY_ENCL;

  22241 16 002735   000000 474400 xsym               LDP4    VM_ENCLREC$
        16 002736   004000 236003                    LDQ     2048,DU
        16 002737   400000 552140                    STBQ    0,'40'O,PR4

     1634    22242    4                  VM_ENCLREC.VALUE.COUNT = SIZE;

  22242 16 002740   200133 235100                    LDA     SIZE,,AUTO
        16 002741   000000 474400 xsym               LDP4    VM_ENCLREC$
        16 002742   400001 755100                    STA     1,,PR4

     1635    22243
     1636    22244    4                  CALL VMD$PUT_ENCL (0,M$WORK_NUM,VM_ENCLOS.NRECS,SIZE,0, ,

  22244 16 002743   000000 475400 xsym               LDP5    VM_ENCLLIST$
        16 002744   500001 235100                    LDA     1,,PR5
        16 002745   000001 035007                    ADLA    1,DL
        16 002746   200450 755100                    STA     P2$+1,,AUTO
        16 002747   000127 236000 17                 LDQ     87
        16 002750   200461 756100                    STQ     P2$+10,,AUTO
        16 002751   200450 636500                    EPPR6   P2$+1,,AUTO
        16 002752   200460 456500                    STP6    P2$+9,,AUTO
        16 002753   300003 637500                    EPPR7   3,,PR3
        16 002754   200457 457500                    STP7    P2$+8,,AUTO
        16 002755   000032 236000 17                 LDQ     26
        16 002756   200456 756100                    STQ     P2$+7,,AUTO
        16 002757   000052 236000 17                 LDQ     42
        16 002760   200455 756100                    STQ     P2$+6,,AUTO
        16 002761   200133 630500                    EPPR0   SIZE,,AUTO
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:250  
        16 002762   200454 450500                    STP0    P2$+5,,AUTO
        16 002763   000112 236000 11                 LDQ     ENCL$
        16 002764   000011 036003                    ADLQ    9,DU
        16 002765   000053 235000 17                 LDA     43
        16 002766   200452 757100                    STAQ    P2$+3,,AUTO
        16 002767   000052 236000 17                 LDQ     42
        16 002770   200451 756100                    STQ     P2$+2,,AUTO
        16 002771   200451 630500                    EPPR0   P2$+2,,AUTO
        16 002772   000126 631400 17                 EPPR1   86
        16 002773   000000 701000 xent               TSX1    VMD$PUT_ENCL
        16 002774   003106 702000 16                 TSX2    E_ENCL

     1637    22245    4                    DCBADDR(M$ENCL_NUM)->F$DCB.DVBYTE,VM_ENCL_HEAD.NUM_ENTRIES+1,
     1638    22246    4                    VM_ENCLREC$)
     1639    22247    4                    ALTRET (E_ENCL);
     1640    22248
     1641    22249
     1642    22250    4                  VM_ENCLOS.NRECS = VM_ENCLOS.NRECS + 1;

  22250 16 002775   000112 470400 11                 LDP0    ENCL$
        16 002776   000011 235100                    LDA     9,,PR0
        16 002777   000001 035007                    ADLA    1,DL
        16 003000   000011 755100                    STA     9,,PR0

     1643    22251
     1644    22252    4             END; /* FOREVER */

  22252 16 003001   002673 710000 16                 TRA     REREAD

     1645    22253
     1646    22254    3   EOF:
     1647    22255
     1648    22256            /* Update the context pointers, linked list stuff, etc. */
     1649    22257
     1650    22258    4             IF VM_ENCL_HEAD.NUM_ENTRIES > 0 THEN DO;

  22258 16 003002   000000 473400 xsym  EOF          LDP3    VM_ENCLLIST$
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:251  
        16 003003   300001 235100                    LDA     1,,PR3
        16 003004   003013 600000 16                 TZE     s:22263

     1651    22259    4                  VM_ENCLOS.PREV$ = PREV_ENT$;

  22259 16 003005   200373 236100                    LDQ     PREV_ENT$,,AUTO
        16 003006   000112 474400 11                 LDP4    ENCL$
        16 003007   400001 756100                    STQ     1,,PR4

     1652    22260    4                  PREV_ENT$->VM_ENCLOS.NEXT$ = ENCL$;

  22260 16 003010   000112 236000 11                 LDQ     ENCL$
        16 003011   200373 471500                    LDP1    PREV_ENT$,,AUTO
        16 003012   100000 756100                    STQ     0,,PR1

     1653    22261    4             END;

     1654    22262
     1655    22263    3             VM_ENCLOS.TYPE = %VM_TYPE_ENCL + VM_ENCL_HEAD.NUM_ENTRIES + 1;

  22263 16 003013   000000 471400 xsym               LDP1    VM_ENCLLIST$
        16 003014   000112 473400 11                 LDP3    ENCL$
        16 003015   100001 235100                    LDA     1,,PR1
        16 003016   000145 035007                    ADLA    101,DL
        16 003017   000033 735000                    ALS     27
        16 003020   300012 755100                    STA     10,,PR3

     1656    22264    3             VM_ENCL_HEAD.NUM_ENTRIES = VM_ENCL_HEAD.NUM_ENTRIES + 1;

  22264 16 003021   100001 235100                    LDA     1,,PR1
        16 003022   000001 035007                    ADLA    1,DL
        16 003023   100001 755100                    STA     1,,PR1

     1657    22265    3             IF VM_ENCLOS.TITLE$ ~= ADDR(NIL) THEN

  22265 16 003024   300013 236100                    LDQ     11,,PR3
        16 003025   000032 116000 17                 CMPQ    26
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:252  
        16 003026   003042 600000 16                 TZE     s:22268

     1658    22266    3                  VM_ENCL_HEAD.NEXT$ = PINCRW(ENCL$,SIZEW(VM_ENCLOS)+ 1 + VM_ENCLOS.
             22266                           TITLE$->TEXTC.L#/4);

  22266 16 003027   300013 474500                    LDP4    11,,PR3
        16 003030   000100 101500                    MRL     fill='000'O
        16 003031   400000 000001                    ADSC9   0,,PR4                   cn=0,n=1
        16 003032   200450 000004                    ADSC9   P2$+1,,AUTO              cn=0,n=4
        16 003033   200450 236100                    LDQ     P2$+1,,AUTO
        16 003034   000002 772000                    QRL     2
        16 003035   000022 736000                    QLS     18
        16 003036   000015 036003                    ADLQ    13,DU
        16 003037   000112 036000 11                 ADLQ    ENCL$
        16 003040   100005 756100                    STQ     5,,PR1
        16 003041   003045 710000 16                 TRA     s:22269

     1659    22267    3             ELSE
     1660    22268    3                  VM_ENCL_HEAD.NEXT$ = PINCRW(ENCL$,SIZEW(VM_ENCLOS) + 1);

  22268 16 003042   000112 236000 11                 LDQ     ENCL$
        16 003043   000015 036003                    ADLQ    13,DU
        16 003044   100005 756100                    STQ     5,,PR1

     1661    22269    3             VM_ENCL_HEAD.ADDRESS_SIZE = POFFW(VM_ENCL_HEAD.NEXT$,VM_ENCLLIST$);

  22269 16 003045   000000 235000 xsym               LDA     VM_ENCLLIST$
        16 003046   000022 771000                    ARL     18
        16 003047   200450 755100                    STA     P2$+1,,AUTO
        16 003050   100005 236100                    LDQ     5,,PR1
        16 003051   000022 772000                    QRL     18
        16 003052   200450 136100                    SBLQ    P2$+1,,AUTO
        16 003053   100000 756100                    STQ     0,,PR1

     1662    22270    3            VM_HEADER.NUM_ENCL_RECORDS = VM_HEADER.NUM_ENCL_RECORDS + VM_ENCLOS.NRECS;

  22270 16 003054   000000 471400 xsym               LDP1    VM_HEADER$
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:253  
        16 003055   100035 236100                    LDQ     29,,PR1
        16 003056   300011 036100                    ADLQ    9,,PR3
        16 003057   100035 756100                    STQ     29,,PR1

     1663    22271
     1664    22272    3             CLOSE_SAVE.V.DCB# = M$ENCL_NUM;

  22272 16 003060   000001 720000 13                 LXL0    M$ENCL_NUM
        16 003061   001002 740000 11                 STX0    CLOSE_SAVE+26

     1665    22273    3             CALL M$CLOSE (CLOSE_SAVE) ALTRET (E_ENCL);

  22273 16 003062   000750 630400 11                 EPPR0   CLOSE_SAVE
        16 003063   450001 713400                    CLIMB   alt,close
        16 003064   406000 401760                    pmme    nvectors=13
        16 003065   003106 702000 16                 TSX2    E_ENCL

     1666    22274
     1667    22275    3        END; /* DO I */

  22275 16 003066   200134 054100                    AOS     I,,AUTO
        16 003067   200027 470500                    LDP0    OUT$,,AUTO
        16 003070   000003 471500                    LDP1    3,,PR0
        16 003071   100001 236100                    LDQ     1,,PR1
        16 003072   000022 772000                    QRL     18
        16 003073   200134 116100                    CMPQ    I,,AUTO
        16 003074   002447 605400 16                 TPNZ    s:22166

     1668    22276
     1669    22277    2        VM_HEADER.STATUS.ENCL = %YES#;

  22277 16 003075   000000 473400 xsym               LDP3    VM_HEADER$
        16 003076   004000 236007                    LDQ     2048,DL
        16 003077   300012 256100                    ORSQ    10,,PR3

     1670    22278        /* Write the context record */
     1671    22279
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:254  
     1672    22280    2       CALL VMA$PUT_ADD_RECORD (%VM_TYPE_ENCL,VM_ENCLLIST_,M$WORK_NUM) ALTRET (E_ENCL)
             22280                 ;

  22280 16 003100   000131 630400 17                 EPPR0   89
        16 003101   000074 631400 17                 EPPR1   60
        16 003102   000000 701000 xent               TSX1    VMA$PUT_ADD_RECORD
        16 003103   003106 702000 16                 TSX2    E_ENCL

     1673    22281
     1674    22282    2        RETURN;

  22282 16 003104   200370 221300                    LDX1  ! SAVE_BREAK_TYPE+3,,AUTO
        16 003105   000001 702211                    TSX2  ! 1,X1

     1675    22283
     1676    22284    2   E_ENCL:
     1677    22285
     1678    22286    2        CALL MON_ERR;

  22286 16 003106   002075 701000 16    E_ENCL       TSX1    MON_ERR
        16 003107   000000 011000                    NOP     0

     1679    22287
     1680    22288    2        ALTRETURN;

  22288 16 003110   200370 221300                    LDX1  ! SAVE_BREAK_TYPE+3,,AUTO
        16 003111   000000 702211                    TSX2  ! 0,X1

     1681    22289
     1682    22290    2   END PROCESS_ENCL;
     1683    22291        %EJECT;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:255  
     1684    22292        /********************************************************************/
     1685    22293        /*I*
     1686    22294             NAME: EDIT_MSG
     1687    22295             PURPOSE: To edit the current message and replace it with the
     1688    22296                      contents of the edited file.
     1689    22297             INPUT: INVOKE_EDITOR$ = points to TEXTC string of editor to use
     1690    22298        */
     1691    22299        /********************************************************************/
     1692    22300
     1693    22301    1   EDIT_MSG: PROC ALTRET;

  22301 16 003112   200364 741300       EDIT_MSG     STX1  ! OPEN_FPT+58,,AUTO

     1694    22302        /*
     1695    22303            ***** Set up the edit command ...
     1696    22304        */
     1697    22305    2        TEMP_TEXTC.L# = INVOKE_EDITOR$ -> X$STRING.SIZ + LENGTHC(' *BODY');

  22305 16 003113   000110 470400 11                 LDP0    INVOKE_EDITOR$
        16 003114   000100 101500                    MRL     fill='000'O
        16 003115   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
        16 003116   200450 000004                    ADSC9   P2$+1,,AUTO              cn=0,n=4
        16 003117   200450 236100                    LDQ     P2$+1,,AUTO
        16 003120   000006 036007                    ADLQ    6,DL
        16 003121   000033 736000                    QLS     27
        16 003122   200141 552140                    STBQ    TEMP_TEXTC,'40'O,AUTO

     1698    22306    2        CALL CONCAT (TEMP_TEXTC.NAME#, INVOKE_EDITOR$ -> X$STRING.TEXT, ' *BODY');

  22306 16 003123   000100 101500                    MRL     fill='000'O
        16 003124   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
        16 003125   200450 000002                    ADSC9   P2$+1,,AUTO              cn=0,n=2
        16 003126   200450 220100                    LDX0    P2$+1,,AUTO
        16 003127   040100 100540                    MLR     fill='040'O
        16 003130   000000 200010                    ADSC9   0,,PR0                   cn=1,n=*X0
        16 003131   200141 200400                    ADSC9   TEMP_TEXTC,,AUTO         cn=1,n=256
        16 003132   000000 636010                    EAQ     0,X0
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:256  
        16 003133   000022 772000                    QRL     18
        16 003134   000400 116007                    CMPQ    256,DL
        16 003135   003146 603000 16                 TRC     s:22307
        16 003136   200451 740100                    STX0    P2$+2,,AUTO
        16 003137   777377 620010                    EAX0    -257,X0
        16 003140   777777 660003                    ERX0    -1,DU
        16 003141   200451 235100                    LDA     P2$+2,,AUTO
        16 003142   000022 771000                    ARL     18
        16 003143   040145 100400                    MLR     fill='040'O
        16 003144   001535 000006 13                 ADSC9   E_PASTDEFER+5            cn=0,n=6
        16 003145   200141 200010                    ADSC9   TEMP_TEXTC,A,AUTO        cn=1,n=*X0

     1699    22307    2        INVOKE_EDITOR$ = ADDR(NIL);

  22307 16 003146   000032 236000 17                 LDQ     26
        16 003147   000110 756000 11                 STQ     INVOKE_EDITOR$

     1700    22308        /*
     1701    22309            ***** Write the current message with header out to *BODY ...
     1702    22310        */
     1703    22311    2        CALL VMM$EDIT_MESSAGE_OUT (0,0,M$WORK_NUM,%YES#,(ENTRY_REASON~=%MAIL_ANSWER))

  22311 16 003150   400000 220003                    LDX0    -131072,DU
        16 003151   200136 235100                    LDA     ENTRY_REASON,,AUTO
        16 003152   000002 115007                    CMPA    2,DL
        16 003153   003155 601000 16                 TNZ     s:22311+5
        16 003154   000000 220003                    LDX0    0,DU
        16 003155   000000 636010                    EAQ     0,X0
        16 003156   200450 676100                    ERQ     P2$+1,,AUTO
        16 003157   400000 376003                    ANQ     -131072,DU
        16 003160   200450 656100                    ERSQ    P2$+1,,AUTO
        16 003161   200450 630500                    EPPR0   P2$+1,,AUTO
        16 003162   200456 450500                    STP0    P2$+7,,AUTO
        16 003163   000134 237000 17                 LDAQ    92
        16 003164   200454 757100                    STAQ    P2$+5,,AUTO
        16 003165   000136 237000 17                 LDAQ    94
        16 003166   200452 757100                    STAQ    P2$+3,,AUTO
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:257  
        16 003167   200452 630500                    EPPR0   P2$+3,,AUTO
        16 003170   000035 631400 17                 EPPR1   29
        16 003171   000000 701000 xent               TSX1    VMM$EDIT_MESSAGE_OUT
        16 003172   003174 702000 16                 TSX2    s:22313
        16 003173   003200 710000 16                 TRA     s:22319

     1704    22312    3        WHENALTRETURN DO;

     1705    22313    3             CALL MON_ERR;

  22313 16 003174   002075 701000 16                 TSX1    MON_ERR
        16 003175   000000 011000                    NOP     0

     1706    22314    3             RETURN;

  22314 16 003176   200364 221300                    LDX1  ! OPEN_FPT+58,,AUTO
        16 003177   000001 702211                    TSX2  ! 1,X1

     1707    22315    3        END;
     1708    22316        /*
     1709    22317            ***** Link to the editor ...
     1710    22318        */
     1711    22319    2        CALL XUR$INFOMSG (E_EDITMESFMT,,M$ME_NUM);

  22319 16 003200   000022 236000 17                 LDQ     18
        16 003201   200452 756100                    STQ     P2$+3,,AUTO
        16 003202   000032 236000 17                 LDQ     26
        16 003203   000140 235000 17                 LDA     96
        16 003204   200450 757100                    STAQ    P2$+1,,AUTO
        16 003205   200450 630500                    EPPR0   P2$+1,,AUTO
        16 003206   000074 631400 17                 EPPR1   60
        16 003207   000000 701000 xent               TSX1    XUR$INFOMSG
        16 003210   000000 011000                    NOP     0

     1712    22320    2        LINKFPT.CP_CMD_ = VECTOR(TEMP_TEXTC);

  22320 16 003211   000060 235000 17                 LDA     48
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:258  
        16 003212   200450 452500                    STP2    P2$+1,,AUTO
        16 003213   200450 236100                    LDQ     P2$+1,,AUTO
        16 003214   000141 036003                    ADLQ    97,DU
        16 003215   001134 757000 11                 STAQ    LINKFPT+10

     1713    22321    2        CALL M$LINK (LINKFPT)

  22321 16 003216   001122 630400 11                 EPPR0   LINKFPT
        16 003217   400005 713400                    CLIMB   alt,+5
        16 003220   403000 401760                    pmme    nvectors=7
        16 003221   003223 702000 16                 TSX2    s:22323
        16 003222   003227 710000 16                 TRA     s:22329

     1714    22322    3        WHENALTRETURN DO;

     1715    22323    3             CALL MON_ERR;

  22323 16 003223   002075 701000 16                 TSX1    MON_ERR
        16 003224   000000 011000                    NOP     0

     1716    22324    3             RETURN;

  22324 16 003225   200364 221300                    LDX1  ! OPEN_FPT+58,,AUTO
        16 003226   000001 702211                    TSX2  ! 1,X1

     1717    22325    3        END;
     1718    22326        /*
     1719    22327            ***** Open the edit file ...
     1720    22328        */
     1721    22329    2        CALL M$OPEN (OPEN_EDIT_FILE)

  22329 16 003227   001334 630400 13                 EPPR0   OPEN_EDIT_FILE
        16 003230   450000 713400                    CLIMB   alt,open
        16 003231   410400 401760                    pmme    nvectors=18
        16 003232   003234 702000 16                 TSX2    s:22331
        16 003233   003240 710000 16                 TRA     s:22334

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:259  
     1722    22330    3        WHENALTRETURN DO;

     1723    22331    3             CALL MON_ERR;

  22331 16 003234   002075 701000 16                 TSX1    MON_ERR
        16 003235   000000 011000                    NOP     0

     1724    22332    3             ALTRETURN;

  22332 16 003236   200364 221300                    LDX1  ! OPEN_FPT+58,,AUTO
        16 003237   000000 702211                    TSX2  ! 0,X1

     1725    22333    3        END;
     1726    22334    2        CALL VNS$BREAK_DISABLE;

  22334 16 003240   000017 631400 17                 EPPR1   15
        16 003241   000000 701000 xent               TSX1    VNS$BREAK_DISABLE
        16 003242   000000 011000                    NOP     0

     1727    22335    2        DID_SEND = %NO#;

  22335 16 003243   200017 450100                    STZ     DID_SEND,,AUTO

     1728    22336        /*
     1729    22337            ***** Remove existing header fields ....
     1730    22338        */
     1731    22339    2        IF ENTRY_REASON ~= %MAIL_ANSWER

  22339 16 003244   200136 235100                    LDA     ENTRY_REASON,,AUTO
        16 003245   000002 115007                    CMPA    2,DL
        16 003246   003263 600000 16                 TZE     s:22344

     1732    22340    3        THEN DO;

     1733    22341    3             CALL ERASE$FLD (VM_HEADER.TO$) ALTRET(E_ALLOCATE);

  22341 16 003247   000000 236000 xsym               LDQ     VM_HEADER$
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:260  
        16 003250   000031 036003                    ADLQ    25,DU
        16 003251   200445 756100                    STQ     ALLOC_TEXTC+2,,AUTO
        16 003252   006204 701000 16                 TSX1    ERASE$FLD
        16 003253   003505 702000 16                 TSX2    E_ALLOCATE

     1734    22342    3             CALL ERASE$ADDR (VM_HEADER.COPY$, %VM_TYPE_C) ALTRET(E_ALLOCATE);

  22342 16 003254   000142 236000 17                 LDQ     98
        16 003255   200376 756100                    STQ     @FLD$+1,,AUTO
        16 003256   000000 236000 xsym               LDQ     VM_HEADER$
        16 003257   000021 036003                    ADLQ    17,DU
        16 003260   200375 756100                    STQ     @NODE$+1,,AUTO
        16 003261   006225 701000 16                 TSX1    ERASE$ADDR
        16 003262   003505 702000 16                 TSX2    E_ALLOCATE

     1735    22343    3        END;

     1736    22344    2        CALL ERASE$ADDR (VM_HEADER.BLIND$, %VM_TYPE_BC) ALTRET(E_ALLOCATE);

  22344 16 003263   000144 236000 17                 LDQ     100
        16 003264   200376 756100                    STQ     @FLD$+1,,AUTO
        16 003265   000000 236000 xsym               LDQ     VM_HEADER$
        16 003266   000020 036003                    ADLQ    16,DU
        16 003267   200375 756100                    STQ     @NODE$+1,,AUTO
        16 003270   006225 701000 16                 TSX1    ERASE$ADDR
        16 003271   003505 702000 16                 TSX2    E_ALLOCATE

     1737    22345    2        CALL ERASE$ADDR (VM_HEADER.REPLY_TO$, %VM_TYPE_RTO) ALTRET(E_ALLOCATE);

  22345 16 003272   000070 236000 17                 LDQ     56
        16 003273   200376 756100                    STQ     @FLD$+1,,AUTO
        16 003274   000000 236000 xsym               LDQ     VM_HEADER$
        16 003275   000025 036003                    ADLQ    21,DU
        16 003276   200375 756100                    STQ     @NODE$+1,,AUTO
        16 003277   006225 701000 16                 TSX1    ERASE$ADDR
        16 003300   003505 702000 16                 TSX2    E_ALLOCATE

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:261  
     1738    22346    2        CALL ERASE$FLD (VM_HEADER.SUBJECT$) ALTRET(E_ALLOCATE);

  22346 16 003301   000000 236000 xsym               LDQ     VM_HEADER$
        16 003302   000030 036003                    ADLQ    24,DU
        16 003303   200445 756100                    STQ     ALLOC_TEXTC+2,,AUTO
        16 003304   006204 701000 16                 TSX1    ERASE$FLD
        16 003305   003505 702000 16                 TSX2    E_ALLOCATE

     1739    22347    2        CALL ERASE$FLD (VM_HEADER.REFERENCE$) ALTRET(E_ALLOCATE);

  22347 16 003306   000000 236000 xsym               LDQ     VM_HEADER$
        16 003307   000024 036003                    ADLQ    20,DU
        16 003310   200445 756100                    STQ     ALLOC_TEXTC+2,,AUTO
        16 003311   006204 701000 16                 TSX1    ERASE$FLD
        16 003312   003505 702000 16                 TSX2    E_ALLOCATE

     1740    22348    2        CALL ERASE$FLD (VM_HEADER.SIGNED$) ALTRET(E_ALLOCATE);

  22348 16 003313   000000 236000 xsym               LDQ     VM_HEADER$
        16 003314   000027 036003                    ADLQ    23,DU
        16 003315   200445 756100                    STQ     ALLOC_TEXTC+2,,AUTO
        16 003316   006204 701000 16                 TSX1    ERASE$FLD
        16 003317   003505 702000 16                 TSX2    E_ALLOCATE

     1741    22349    2        VM_HEADER.STATUS.FCOPY = %NO#;

  22349 16 003320   000000 470400 xsym               LDP0    VM_HEADER$
        16 003321   000145 236000 17                 LDQ     101
        16 003322   000012 356100                    ANSQ    10,,PR0

     1742    22350    2        VM_HEADER.STATUS.RR = %NO#;

  22350 16 003323   000146 236000 17                 LDQ     102
        16 003324   000012 356100                    ANSQ    10,,PR0

     1743    22351    2        VM_HEADER.DELIVERY_DATE = 0;

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:262  
  22351 16 003325   000002 450100                    STZ     2,,PR0

     1744    22352    2        VM_HEADER.DELIVERY_DATE = 0;

  22352 16 003326   000002 450100                    STZ     2,,PR0

     1745    22353        /*
     1746    22354            ****  Remove message contents ....
     1747    22355        */
     1748    22356    2        IF VM_HEADER.NUM_RECORDS > 0

  22356 16 003327   000011 235100                    LDA     9,,PR0
        16 003330   003352 600000 16                 TZE     s:22364

     1749    22357    3        THEN DO;

     1750    22358    3             CALL VMD$DEL_BODY (0,M$WORK_NUM,0,VM_HEADER.NUM_RECORDS - 1)

  22358 16 003331   000001 135007                    SBLA    1,DL
        16 003332   200450 755100                    STA     P2$+1,,AUTO
        16 003333   200450 631500                    EPPR1   P2$+1,,AUTO
        16 003334   200455 451500                    STP1    P2$+6,,AUTO
        16 003335   000052 236000 17                 LDQ     42
        16 003336   200454 756100                    STQ     P2$+5,,AUTO
        16 003337   000052 237000 17                 LDAQ    42
        16 003340   200452 757100                    STAQ    P2$+3,,AUTO
        16 003341   200452 630500                    EPPR0   P2$+3,,AUTO
        16 003342   000024 631400 17                 EPPR1   20
        16 003343   000000 701000 xent               TSX1    VMD$DEL_BODY
        16 003344   003346 702000 16                 TSX2    s:22360
        16 003345   003350 710000 16                 TRA     s:22362

     1751    22359    4             WHENALTRETURN DO;

     1752    22360    4                  CALL MON_ERR;

  22360 16 003346   002075 701000 16                 TSX1    MON_ERR
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:263  
        16 003347   000000 011000                    NOP     0

     1753    22361    4             END;

     1754    22362    3             VM_HEADER.NUM_RECORDS = 0;

  22362 16 003350   000000 470400 xsym               LDP0    VM_HEADER$
        16 003351   000011 450100                    STZ     9,,PR0

     1755    22363    3        END;

     1756    22364    2        IF VM_HEADER.NUM_TRACE_RECORDS > 0

  22364 16 003352   000034 235100                    LDA     28,,PR0
        16 003353   003375 600000 16                 TZE     s:22375

     1757    22365    3        THEN DO;

     1758    22366    3             CALL VMD$DEL_TRACE (0,M$WORK_NUM,0,VM_HEADER.NUM_TRACE_RECORDS - 1)

  22366 16 003354   000001 135007                    SBLA    1,DL
        16 003355   200450 755100                    STA     P2$+1,,AUTO
        16 003356   200450 631500                    EPPR1   P2$+1,,AUTO
        16 003357   200455 451500                    STP1    P2$+6,,AUTO
        16 003360   000052 236000 17                 LDQ     42
        16 003361   200454 756100                    STQ     P2$+5,,AUTO
        16 003362   000052 237000 17                 LDAQ    42
        16 003363   200452 757100                    STAQ    P2$+3,,AUTO
        16 003364   200452 630500                    EPPR0   P2$+3,,AUTO
        16 003365   000024 631400 17                 EPPR1   20
        16 003366   000000 701000 xent               TSX1    VMD$DEL_TRACE
        16 003367   003371 702000 16                 TSX2    s:22368
        16 003370   003373 710000 16                 TRA     s:22370

     1759    22367    4             WHENALTRETURN DO;

     1760    22368    4                  CALL MON_ERR;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:264  

  22368 16 003371   002075 701000 16                 TSX1    MON_ERR
        16 003372   000000 011000                    NOP     0

     1761    22369    4             END;

     1762    22370    3             VM_HEADER.NUM_TRACE_RECORDS = 0;

  22370 16 003373   000000 470400 xsym               LDP0    VM_HEADER$
        16 003374   000034 450100                    STZ     28,,PR0

     1763    22371    3        END;

     1764    22372        /*
     1765    22373             ***** Disable preprocessing and built-ins while rereading message ...
     1766    22374        */
     1767    22375    2        XUR_INIT.COMMANDS# = %NO#;

  22375 16 003375   000147 236000 17                 LDQ     103
        16 003376   000016 356000 11                 ANSQ    XUR_INIT

     1768    22376    2        XUR_INIT.PREPROCESS# = %NO#;

  22376 16 003377   000034 236000 17                 LDQ     28
        16 003400   000016 356000 11                 ANSQ    XUR_INIT

     1769    22377    2        CALL XUR$INIT (XUR_INIT);

  22377 16 003401   000020 630400 17                 EPPR0   16
        16 003402   000003 631400 17                 EPPR1   3
        16 003403   000000 701000 xent               TSX1    XUR$INIT
        16 003404   000000 011000                    NOP     0

     1770    22378    2        CALL XUR$SETERRMSG (ERRMSG_FID);

  22378 16 003405   000023 630400 17                 EPPR0   19
        16 003406   000003 631400 17                 EPPR1   3
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:265  
        16 003407   000000 701000 xent               TSX1    XUR$SETERRMSG
        16 003410   000000 011000                    NOP     0

     1771    22379        /*
     1772    22380            ***** Read *BODY and process all lines to rebuild the message ...
     1773    22381        */
     1774    22382    2        CMD_DCB = M$EDIT_NUM;

  22382 16 003411   000000 235000 13                 LDA     M$EDIT_NUM
        16 003412   000067 755000 11                 STA     CMD_DCB

     1775    22383    3        DO FOREVER;

     1776    22384    3             CALL READ_CC ALTRET(EOF);

  22384 16 003413   002114 701000 16                 TSX1    READ_CC
        16 003414   003446 702000 16                 TSX2    EOF

     1777    22385    3             CALL XUR$GETCMD (SEND_NODES$->BSD,OUT$,,CMD_BUF,SIZE)

  22385 16 003415   200133 630500                    EPPR0   SIZE,,AUTO
        16 003416   200454 450500                    STP0    P2$+5,,AUTO
        16 003417   000072 236000 17                 LDQ     58
        16 003420   000032 235000 17                 LDA     26
        16 003421   200452 757100                    STAQ    P2$+3,,AUTO
        16 003422   200027 631500                    EPPR1   OUT$,,AUTO
        16 003423   200451 451500                    STP1    P2$+2,,AUTO
        16 003424   200003 236100                    LDQ     SEND_NODES$,,AUTO
        16 003425   200450 756100                    STQ     P2$+1,,AUTO
        16 003426   200450 630500                    EPPR0   P2$+1,,AUTO
        16 003427   000035 631400 17                 EPPR1   29
        16 003430   000000 701000 xent               TSX1    XUR$GETCMD
        16 003431   003435 702000 16                 TSX2    s:22390

     1778    22386    4             WHENRETURN DO;

     1779    22387    4                  CALL PROCESS_CMD ALTRET(ALT);
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:266  

  22387 16 003432   003513 701000 16                 TSX1    PROCESS_CMD
        16 003433   003503 702000 16                 TSX2    ALT

     1780    22388    4             END;

  22388 16 003434   003445 710000 16                 TRA     s:22397

     1781    22389    4             WHENALTRETURN DO;

     1782    22390    4                  IF OUTERR = E_SYNERR

  22390 16 003435   200027 236100                    LDQ     OUT$,,AUTO
        16 003436   001507 116000 13                 CMPQ    E_SYNERR
        16 003437   003443 601000 16                 TNZ     s:22395

     1783    22391    5                  THEN DO;

     1784    22392    5                       CALL PROCESS_BODY;

  22392 16 003440   002157 701000 16                 TSX1    PROCESS_BODY
        16 003441   000000 011000                    NOP     0

     1785    22393    5                       GOTO EOF;

  22393 16 003442   003446 710000 16                 TRA     EOF

     1786    22394    5                  END;
     1787    22395    4                  CALL CMD_ERR;

  22395 16 003443   002035 701000 16                 TSX1    CMD_ERR
        16 003444   000000 011000                    NOP     0

     1788    22396    4             END;

     1789    22397    3        END;

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:267  
  22397 16 003445   003413 710000 16                 TRA     s:22384

  22393 16 003446                       EOF          null
     1790    22398    2   EOF: ;
     1791    22399    2        CMD_DCB = M$SI_NUM;

  22399 16 003446   000000 235000 xsym               LDA     M$SI_NUM
        16 003447   000067 755000 11                 STA     CMD_DCB

     1792    22400    2        CLOSE_SCRATCH.V.DCB# = M$EDIT_NUM;

  22400 16 003450   000000 720000 13                 LXL0    M$EDIT_NUM
        16 003451   001040 740000 11                 STX0    CLOSE_SCRATCH+26

     1793    22401    3        CALL M$CLOSE (CLOSE_SCRATCH) WHENALTRETURN DO; END;

  22401 16 003452   001006 630400 11                 EPPR0   CLOSE_SCRATCH
        16 003453   450001 713400                    CLIMB   alt,close
        16 003454   406000 401760                    pmme    nvectors=13
        16 003455   003457 702000 16                 TSX2    s:22405
        16 003456   003457 710000 16                 TRA     s:22405

     1794    22402        /*
     1795    22403             ***** Re-enable preprocessing and built-in commands ...
     1796    22404        */
     1797    22405    2        XUR_INIT.COMMANDS# = %YES#;

  22405 16 003457   100000 236003                    LDQ     32768,DU
        16 003460   000016 256000 11                 ORSQ    XUR_INIT

     1798    22406    2        XUR_INIT.PREPROCESS# = PREPROCESS;

  22406 16 003461   200026 236100                    LDQ     PREPROCESS,,AUTO
        16 003462   000001 772000                    QRL     1
        16 003463   000016 676000 11                 ERQ     XUR_INIT
        16 003464   200000 376003                    ANQ     65536,DU
        16 003465   000016 656000 11                 ERSQ    XUR_INIT
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:268  

     1799    22407    2        CALL XUR$INIT (XUR_INIT);

  22407 16 003466   000020 630400 17                 EPPR0   16
        16 003467   000003 631400 17                 EPPR1   3
        16 003470   000000 701000 xent               TSX1    XUR$INIT
        16 003471   000000 011000                    NOP     0

     1800    22408    2        CALL XUR$SETERRMSG (ERRMSG_FID);

  22408 16 003472   000023 630400 17                 EPPR0   19
        16 003473   000003 631400 17                 EPPR1   3
        16 003474   000000 701000 xent               TSX1    XUR$SETERRMSG
        16 003475   000000 011000                    NOP     0

     1801    22409    2        CALL VNS$BREAK_ENABLE;

  22409 16 003476   000017 631400 17                 EPPR1   15
        16 003477   000000 701000 xent               TSX1    VNS$BREAK_ENABLE
        16 003500   000000 011000                    NOP     0

     1802    22410
     1803    22411    2        RETURN;

  22411 16 003501   200364 221300                    LDX1  ! OPEN_FPT+58,,AUTO
        16 003502   000001 702211                    TSX2  ! 1,X1

     1804    22412    2   ALT: ALTRETURN;

  22412 16 003503   200364 221300       ALT          LDX1  ! OPEN_FPT+58,,AUTO
        16 003504   000000 702211                    TSX2  ! 0,X1

  22406 16 003505                       E_ALLOCATE   null
     1805    22413
     1806    22414    2   E_ALLOCATE: ;
     1807    22415    2        CALL XUR$ERRMSG (MCB.ERR);

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:269  
  22415 16 003505   000104 630400 17                 EPPR0   68
        16 003506   000003 631400 17                 EPPR1   3
        16 003507   000000 701000 xent               TSX1    XUR$ERRMSG
        16 003510   000000 011000                    NOP     0

     1808    22416    2        ALTRETURN;

  22416 16 003511   200364 221300                    LDX1  ! OPEN_FPT+58,,AUTO
        16 003512   000000 702211                    TSX2  ! 0,X1

     1809    22417
     1810    22418    2   END EDIT_MSG;
     1811    22419        %EJECT;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:270  
     1812    22420        /********************************************************************/
     1813    22421        /*I*
     1814    22422            NAME: PROCESS_CMD
     1815    22423            PURPOSE: To process a SEND command.
     1816    22424            DESCRIPTION:
     1817    22425                This routine consists of a DO CASE to process SEND commands.
     1818    22426                All errors are diagnosed internally.  Fatal errors result in
     1819    22427                an altreturn; nonfatal errors return normally.  Errors that
     1820    22428                could occur during file input (eg, before any prompts have
     1821    22429                been issued) are diagnosed via VMA$ERRMSG, which will abort
     1822    22430                SEND immediately (and avoid writing to DO) when running in
     1823    22431                GATEWAY mode.  Errors in commands that can only be issued at
     1824    22432                the Options: prompt can be diagnosed normally via XUR$ERRMSG.
     1825    22433                Errors that can occur during file input must also set ERR_FLAG
     1826    22434                to prevent sending the message; this isn't necessary for other
     1827    22435                errors.
     1828    22436        */
     1829    22437        /********************************************************************/
     1830    22438
     1831    22439    1   PROCESS_CMD: PROC ALTRET;

  22439 16 003513   200366 741300       PROCESS_CMD  STX1  ! SAVE_BREAK_TYPE+1,,AUTO

     1832    22440
     1833    22441    3   CMD_CASE: DO CASE(OUT$ -> P$B.CODE);    /* Do command */

  22441 16 003514   200027 470500       CMD_CASE     LDP0    OUT$,,AUTO
        16 003515   000000 720100                    LXL0    0,,PR0
        16 003516   000046 100003                    CMPX0   38,DU
        16 003517   003521 602010 16                 TNC     CMD_CASE+5,X0
        16 003520   005440 710000 16                 TRA     RET
        16 003521   005440 710000 16                 TRA     RET
        16 003522   003666 710000 16                 TRA     s:22473
        16 003523   003732 710000 16                 TRA     s:22492
        16 003524   003760 710000 16                 TRA     s:22501
        16 003525   003735 710000 16                 TRA     s:22496
        16 003526   004016 710000 16                 TRA     s:22514
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:271  
        16 003527   004117 710000 16                 TRA     s:22544
        16 003530   004421 710000 16                 TRA     s:22605
        16 003531   004432 710000 16                 TRA     s:22613
        16 003532   004437 710000 16                 TRA     s:22618
        16 003533   004635 710000 16                 TRA     s:22665
        16 003534   004647 710000 16                 TRA     s:22670
        16 003535   004654 710000 16                 TRA     s:22672
        16 003536   004756 710000 16                 TRA     s:22715
        16 003537   005051 710000 16                 TRA     s:22746
        16 003540   005115 710000 16                 TRA     s:22763
        16 003541   005120 710000 16                 TRA     s:22767
        16 003542   005241 710000 16                 TRA     s:22800
        16 003543   005304 710000 16                 TRA     s:22812
        16 003544   005440 710000 16                 TRA     RET
        16 003545   005440 710000 16                 TRA     RET
        16 003546   004705 710000 16                 TRA     s:22701
        16 003547   005065 710000 16                 TRA     s:22754
        16 003550   004611 710000 16                 TRA     s:22659
        16 003551   004010 710000 16                 TRA     s:22510
        16 003552   004405 710000 16                 TRA     s:22597
        16 003553   003716 710000 16                 TRA     s:22484
        16 003554   005334 710000 16                 TRA     s:22820
        16 003555   004740 710000 16                 TRA     s:22710
        16 003556   005043 710000 16                 TRA     s:22742
        16 003557   005404 710000 16                 TRA     s:22843
        16 003560   004666 710000 16                 TRA     s:22683
        16 003561   004673 710000 16                 TRA     s:22687
        16 003562   004700 710000 16                 TRA     s:22691
        16 003563   005156 710000 16                 TRA     s:22781
        16 003564   003567 710000 16                 TRA     s:22445
        16 003565   005004 710000 16                 TRA     s:22724
        16 003566   003663 710000 16                 TRA     s:22469

     1834    22442        %SPACE 6;

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:272  
     1835    22443        /* APPEND command */
     1836    22444    3        CASE (%CMD_APPEND);

     1837    22445    3            IF P$B.NSUBLKS = 0 THEN CALL APPEND_BODY;

  22445 16 003567   200030 471500                    LDP1    BLK$,,AUTO
        16 003570   100001 222100                    LDX2    1,,PR1
        16 003571   003575 601000 16                 TNZ     s:22448

  22445 16 003572   002442 701000 16                 TSX1    APPEND_BODY
        16 003573   000000 011000                    NOP     0
        16 003574   003657 710000 16                 TRA     s:22462

     1838    22446    3            ELSE
     1839    22447    4            DO;

     1840    22448    4                 OPEN_FPT          = OPEN_APPEND;

  22448 16 003575   000100 100400                    MLR     fill='000'O
        16 003576   000426 000350 13                 ADSC9   OPEN_APPEND              cn=0,n=232
        16 003577   200272 000350                    ADSC9   OPEN_FPT,,AUTO           cn=0,n=232

     1841    22449    4                 OPEN_FPT.V_       = VECTOR(OPEN_FPT.V);

  22449 16 003600   000041 235000 17                 LDA     33
        16 003601   200450 452500                    STP2    P2$+1,,AUTO
        16 003602   200450 236100                    LDQ     P2$+1,,AUTO
        16 003603   000336 036003                    ADLQ    222,DU
        16 003604   200272 757100                    STAQ    OPEN_FPT,,AUTO

     1842    22450    4                 CHECK_FID         = CHECK_FID_CONST;

  22450 16 003605   000100 100400                    MLR     fill='000'O
        16 003606   000522 000140 13                 ADSC9   CHECK_FID_CONST          cn=0,n=96
        16 003607   200242 000140                    ADSC9   CHECK_FID,,AUTO          cn=0,n=96

     1843    22451    4                 CHECK_FID.V_      = VECTOR(CHECK_FID.V);
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:273  

  22451 16 003610   000046 235000 17                 LDA     38
        16 003611   200450 452500                    STP2    P2$+1,,AUTO
        16 003612   200450 236100                    LDQ     P2$+1,,AUTO
        16 003613   000266 036003                    ADLQ    182,DU
        16 003614   200242 757100                    STAQ    CHECK_FID,,AUTO

     1844    22452    4                 CHECK_FID.TEXTFID_ = VECTOR(P$S.TEXT);

  22452 16 003615   100004 236100                    LDQ     4,,PR1
        16 003616   000033 772000                    QRL     27
        16 003617   000064 737000                    LLS     52
        16 003620   000140 135007                    SBLA    96,DL
        16 003621   200030 236100                    LDQ     BLK$,,AUTO
        16 003622   000047 036000 17                 ADLQ    39
        16 003623   200244 757100                    STAQ    CHECK_FID+2,,AUTO

     1845    22453    4                 CHECK_FID.ASN_    = VECTOR(OPEN_FPT.V.ASN#);

  22453 16 003624   177640 235007                    LDA     65440,DL
        16 003625   200450 452500                    STP2    P2$+1,,AUTO
        16 003626   200450 236100                    LDQ     P2$+1,,AUTO
        16 003627   000050 036000 17                 ADLQ    40
        16 003630   200260 757100                    STAQ    CHECK_FID+14,,AUTO

     1846    22454    4                 CHECK_FID.RES_    = VECTOR(OPEN_FPT.V.RES#);

  22454 16 003631   777640 235007                    LDA     -96,DL
        16 003632   200450 452500                    STP2    P2$+1,,AUTO
        16 003633   200450 236100                    LDQ     P2$+1,,AUTO
        16 003634   000342 036003                    ADLQ    226,DU
        16 003635   200262 757100                    STAQ    CHECK_FID+16,,AUTO

     1847    22455    4                 CALL M$FID(CHECK_FID) ALTRET(E_APND);

  22455 16 003636   200242 630500                    EPPR0   CHECK_FID,,AUTO
        16 003637   420001 713400                    CLIMB   alt,+8193
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:274  
        16 003640   404400 401760                    pmme    nvectors=10
        16 003641   003660 702000 16                 TSX2    E_APND

     1848    22456    4                 CALL M$OPEN(OPEN_FPT) ALTRET(E_APND);

  22456 16 003642   200272 630500                    EPPR0   OPEN_FPT,,AUTO
        16 003643   450000 713400                    CLIMB   alt,open
        16 003644   410400 401760                    pmme    nvectors=18
        16 003645   003660 702000 16                 TSX2    E_APND

     1849    22457    4                 CMD_DCB = M$APND_NUM;

  22457 16 003646   000002 235000 13                 LDA     M$APND_NUM
        16 003647   000067 755000 11                 STA     CMD_DCB

     1850    22458    4                 CALL APPEND_BODY;

  22458 16 003650   002442 701000 16                 TSX1    APPEND_BODY
        16 003651   000000 011000                    NOP     0

     1851    22459    4                 CLOSE_SAVE.V.DCB# = M$APND_NUM;

  22459 16 003652   000002 720000 13                 LXL0    M$APND_NUM
        16 003653   001002 740000 11                 STX0    CLOSE_SAVE+26

     1852    22460    4                 CALL M$CLOSE(CLOSE_SAVE);

  22460 16 003654   000750 630400 11                 EPPR0   CLOSE_SAVE
        16 003655   050001 713400                    CLIMB   close
        16 003656   406000 401760                    pmme    nvectors=13

     1853    22461    4            END;

     1854    22462    4            DO NEVER;

  22462 16 003657   005440 710000 16                 TRA     RET

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:275  
     1855    22463    4   E_APND:
     1856    22464    4                 CALL MON_ERR;

  22464 16 003660   002075 701000 16    E_APND       TSX1    MON_ERR
        16 003661   000000 011000                    NOP     0

     1857    22465    4            END;

  22465 16 003662   005440 710000 16                 TRA     RET

     1858    22466        %SPACE 6;

     1859    22467        /* ATTACH command */
     1860    22468    3        CASE (%CMD_ATTACH);

     1861    22469    3            CALL PROCESS_ENCL;

  22469 16 003663   002444 701000 16                 TSX1    PROCESS_ENCL
        16 003664   000000 011000                    NOP     0
        16 003665   005440 710000 16                 TRA     RET

     1862    22470        %SPACE 6;

     1863    22471        /* Blind copy command */
     1864    22472    3        CASE (%CMD_BC);

     1865    22473    3            CALL REREAD$CHK
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:276  

  22473 16 003666   005621 701000 16                 TSX1    REREAD$CHK
        16 003667   003671 702000 16                 TSX2    s:22475
        16 003670   003706 710000 16                 TRA     s:22478

     1866    22474    4            WHENALTRETURN DO;

     1867    22475    4                 CALL REREAD$CMD (VN_BLIND_COPY, VM_HEADER.BLIND$, E_CMD_BC_PROMPT,

  22475 16 003671   000052 236000 17                 LDQ     42
        16 003672   200375 756100                    STQ     @NODE$+1,,AUTO
        16 003673   200013 630500                    EPPR0   CMD_BC$,,AUTO
        16 003674   200374 450500                    STP0    REC$,,AUTO
        16 003675   000150 236000 17                 LDQ     104
        16 003676   200373 756100                    STQ     PREV_ENT$,,AUTO
        16 003677   000000 236000 xsym               LDQ     VM_HEADER$
        16 003700   000020 036003                    ADLQ    16,DU
        16 003701   200372 756100                    STQ     PTR2$,,AUTO
        16 003702   000151 236000 17                 LDQ     105
        16 003703   200371 756100                    STQ     PTR1$,,AUTO
        16 003704   005646 701000 16                 TSX1    REREAD$CMD
        16 003705   005440 702000 16                 TSX2    RET

     1868    22476    4                   CMD_BC$, %NO# ) ALTRET(RET);
     1869    22477    4            END;

     1870    22478    3            CALL REPLACE$ADDR (VM_HEADER.BLIND$, %VM_TYPE_BC) ALTRET(E_ALLOCATE);

  22478 16 003706   000144 236000 17                 LDQ     100
        16 003707   200372 756100                    STQ     PTR2$,,AUTO
        16 003710   000000 236000 xsym               LDQ     VM_HEADER$
        16 003711   000020 036003                    ADLQ    16,DU
        16 003712   200371 756100                    STQ     PTR1$,,AUTO
        16 003713   006411 701000 16                 TSX1    REPLACE$ADDR
        16 003714   005442 702000 16                 TSX2    E_ALLOCATE
        16 003715   005440 710000 16                 TRA     RET

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:277  
     1871    22479        %SPACE 6;

     1872    22480    3        CASE (%CMD_BLANK);              /* Do nothing */

     1873    22481        %SPACE 6;

     1874    22482        /* Broadcast command */
     1875    22483    3        CASE (%CMD_BROADCAST);

     1876    22484    3            IF OUT$ -> P$B.SUBLK$(0) -> P$B.CODE = %OPT_YES

  22484 16 003716   000003 471500                    LDP1    3,,PR0
        16 003717   100000 722100                    LXL2    0,,PR1
        16 003720   000036 102003                    CMPX2   30,DU
        16 003721   003726 601000 16                 TNZ     s:22488

     1877    22485    3            THEN
     1878    22486    3                 VM_HEADER.STATUS.BROADCAST = %YES#;

  22486 16 003722   000000 473400 xsym               LDP3    VM_HEADER$
        16 003723   000001 236003                    LDQ     1,DU
        16 003724   300012 256100                    ORSQ    10,,PR3
        16 003725   005440 710000 16                 TRA     RET

     1879    22487    3            ELSE
     1880    22488    3                 VM_HEADER.STATUS.BROADCAST = %NO#;

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:278  
  22488 16 003726   000000 473400 xsym               LDP3    VM_HEADER$
        16 003727   000152 236000 17                 LDQ     106
        16 003730   300012 356100                    ANSQ    10,,PR3
        16 003731   005440 710000 16                 TRA     RET

     1881    22489        %SPACE 6;

     1882    22490        /* Cancel command */
     1883    22491    3        CASE (%CMD_CANCEL);

     1884    22492    3            CALL M$EXIT;

  22492 16 003732   000001 713400                    CLIMB   exit
        16 003733   000000 401760                    pmme    nvectors=0
        16 003734   005440 710000 16                 TRA     RET

     1885    22493        %SPACE 6;

     1886    22494        /* Crpt command */
     1887    22495    3        CASE (%CMD_CRPT);

     1888    22496    3            CALL VMX$OCTBIN (OUT$->P$B.SUBLK$(0)->P$S,SEED);

  22496 16 003735   000003 471500                    LDP1    3,,PR0
        16 003736   000153 236000 17                 LDQ     107
        16 003737   200451 756100                    STQ     P2$+2,,AUTO
        16 003740   200450 451500                    STP1    P2$+1,,AUTO
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:279  
        16 003741   200450 630500                    EPPR0   P2$+1,,AUTO
        16 003742   000000 631400 17                 EPPR1   0
        16 003743   000000 701000 xent               TSX1    VMX$OCTBIN
        16 003744   000000 011000                    NOP     0

     1889    22497    3            VM_HEADER.STATUS.CRYPT = (SEED ~= 0);

  22497 16 003745   400000 220003                    LDX0    -131072,DU
        16 003746   000070 235000 11                 LDA     SEED
        16 003747   003751 601000 16                 TNZ     s:22497+4
        16 003750   000000 220003                    LDX0    0,DU
        16 003751   000000 470400 xsym               LDP0    VM_HEADER$
        16 003752   000000 636010                    EAQ     0,X0
        16 003753   000005 772000                    QRL     5
        16 003754   000012 676100                    ERQ     10,,PR0
        16 003755   010000 376003                    ANQ     4096,DU
        16 003756   000012 656100                    ERSQ    10,,PR0
        16 003757   005440 710000 16                 TRA     RET

     1890    22498        %SPACE 6;

     1891    22499        /* Copy command */
     1892    22500    3        CASE (%CMD_COPY);

     1893    22501    3            CALL REREAD$CHK

  22501 16 003760   005621 701000 16                 TSX1    REREAD$CHK
        16 003761   003763 702000 16                 TSX2    s:22503
        16 003762   004000 710000 16                 TRA     s:22506

     1894    22502    4            WHENALTRETURN DO;

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:280  
     1895    22503    4                 CALL REREAD$CMD (VN_COPY, VM_HEADER.COPY$, E_CMD_COPY_PROMPT,

  22503 16 003763   000052 236000 17                 LDQ     42
        16 003764   200375 756100                    STQ     @NODE$+1,,AUTO
        16 003765   200012 630500                    EPPR0   CMD_COPY$,,AUTO
        16 003766   200374 450500                    STP0    REC$,,AUTO
        16 003767   000154 236000 17                 LDQ     108
        16 003770   200373 756100                    STQ     PREV_ENT$,,AUTO
        16 003771   000000 236000 xsym               LDQ     VM_HEADER$
        16 003772   000021 036003                    ADLQ    17,DU
        16 003773   200372 756100                    STQ     PTR2$,,AUTO
        16 003774   000155 236000 17                 LDQ     109
        16 003775   200371 756100                    STQ     PTR1$,,AUTO
        16 003776   005646 701000 16                 TSX1    REREAD$CMD
        16 003777   005440 702000 16                 TSX2    RET

     1896    22504    4                   CMD_COPY$, %NO# ) ALTRET(RET);
     1897    22505    4            END;

     1898    22506    3            CALL REPLACE$ADDR (VM_HEADER.COPY$, %VM_TYPE_C) ALTRET(E_ALLOCATE);

  22506 16 004000   000142 236000 17                 LDQ     98
        16 004001   200372 756100                    STQ     PTR2$,,AUTO
        16 004002   000000 236000 xsym               LDQ     VM_HEADER$
        16 004003   000021 036003                    ADLQ    17,DU
        16 004004   200371 756100                    STQ     PTR1$,,AUTO
        16 004005   006411 701000 16                 TSX1    REPLACE$ADDR
        16 004006   005442 702000 16                 TSX2    E_ALLOCATE
        16 004007   005440 710000 16                 TRA     RET

     1899    22507        %SPACE 6;

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:281  
     1900    22508        /* Date command; for gateways;  privileged */
     1901    22509    3        CASE (%CMD_DATE);

     1902    22510    3            CALL REPLACE$TSTAMP (VM_HEADER.CREATION_DATE);

  22510 16 004010   000000 236000 xsym               LDQ     VM_HEADER$
        16 004011   000001 036003                    ADLQ    1,DU
        16 004012   200371 756100                    STQ     PTR1$,,AUTO
        16 004013   006573 701000 16                 TSX1    REPLACE$TSTAMP
        16 004014   000000 011000                    NOP     0
        16 004015   005440 710000 16                 TRA     RET

     1903    22511        %SPACE 6;

     1904    22512        /* Defer command */
     1905    22513    3        CASE (%CMD_DEFER);

     1906    22514    3            CALL REREAD$CHK

  22514 16 004016   005621 701000 16                 TSX1    REREAD$CHK
        16 004017   004021 702000 16                 TSX2    s:22516
        16 004020   004064 710000 16                 TRA     s:22526

     1907    22515    4            WHENALTRETURN DO;

     1908    22516    5                 IF VM_HEADER.DELIVERY_DATE ~= 0 then do;

  22516 16 004021   000000 470400 xsym               LDP0    VM_HEADER$
        16 004022   000002 235100                    LDA     2,,PR0
        16 004023   004031 600000 16                 TZE     s:22520

     1909    22517    5                      WORK_UTS = VM_HEADER.DELIVERY_DATE;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:282  

  22517 16 004024   000103 755000 11                 STA     WORK_UTS

     1910    22518    5                      CALL M$TIME (GET_UTS);

  22518 16 004025   001216 630400 13                 EPPR0   GET_UTS
        16 004026   020004 713400                    CLIMB   8196
        16 004027   402000 401760                    pmme    nvectors=5

     1911    22519    5                 END;

  22519 16 004030   004034 710000 16                 TRA     s:22521

     1912    22520    4                 else call M$TIME(GET_CURRENT);

  22520 16 004031   001152 630400 13                 EPPR0   GET_CURRENT
        16 004032   020004 713400                    CLIMB   8196
        16 004033   402000 401760                    pmme    nvectors=5

     1913    22521    4                 TEMP_TEXTC.L# = LENGTHC(WORK_TIMEC) + LENGTHC(WORK_DATEC) + 1;

  22521 16 004034   016000 236003                    LDQ     7168,DU
        16 004035   200141 552140                    STBQ    TEMP_TEXTC,'40'O,AUTO

     1914    22522    4                 CALL CONCAT (TEMP_TEXTC.NAME#,SUBSTR(WORK_TIMEC,0,5),',',WORK_DATEC);

  22522 16 004036   040100 100400                    MLR     fill='040'O
        16 004037   000073 000005 11                 ADSC9   WORK_TIME                cn=0,n=5
        16 004040   200141 200005                    ADSC9   TEMP_TEXTC,,AUTO         cn=1,n=5
        16 004041   054000 236007                    LDQ     22528,DL
        16 004042   200142 552110                    STBQ    TEMP_TEXTC+1,'10'O,AUTO
        16 004043   040100 100400                    MLR     fill='040'O
        16 004044   000071 000010 11                 ADSC9   WORK_DATE                cn=0,n=8
        16 004045   200142 600372                    ADSC9   TEMP_TEXTC+1,,AUTO       cn=3,n=250

     1915    22523    4                 CALL REREAD$CMD (VN_DEFER, ADDR(TEMP_TEXTC), E_CMD_DEFER_PROMPT,

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:283  
  22523 16 004046   200141 630500                    EPPR0   TEMP_TEXTC,,AUTO
        16 004047   200462 450500                    STP0    P2$+11,,AUTO
        16 004050   000052 236000 17                 LDQ     42
        16 004051   200375 756100                    STQ     @NODE$+1,,AUTO
        16 004052   200014 631500                    EPPR1   CMD_DEFER$,,AUTO
        16 004053   200374 451500                    STP1    REC$,,AUTO
        16 004054   000156 236000 17                 LDQ     110
        16 004055   200373 756100                    STQ     PREV_ENT$,,AUTO
        16 004056   200462 633500                    EPPR3   P2$+11,,AUTO
        16 004057   200372 453500                    STP3    PTR2$,,AUTO
        16 004060   000157 236000 17                 LDQ     111
        16 004061   200371 756100                    STQ     PTR1$,,AUTO
        16 004062   005646 701000 16                 TSX1    REREAD$CMD
        16 004063   005440 702000 16                 TSX2    RET

     1916    22524    4                   CMD_DEFER$, %NO# ) ALTRET(RET);
     1917    22525    4            END;

     1918    22526    3            CALL VNS$BREAK_DISABLE;

  22526 16 004064   000017 631400 17                 EPPR1   15
        16 004065   000000 701000 xent               TSX1    VNS$BREAK_DISABLE
        16 004066   000000 011000                    NOP     0

     1919    22527    3            CALL REPLACE$TSTAMP (VM_HEADER.DELIVERY_DATE)

  22527 16 004067   000000 236000 xsym               LDQ     VM_HEADER$
        16 004070   000002 036003                    ADLQ    2,DU
        16 004071   200371 756100                    STQ     PTR1$,,AUTO
        16 004072   006573 701000 16                 TSX1    REPLACE$TSTAMP
        16 004073   004113 702000 16                 TSX2    s:22540

     1920    22528    4            WHENRETURN DO;

     1921    22529    4                 IF VM_HEADER.DELIVERY_DATE > VM_HEADER.CREATION_DATE

  22529 16 004074   000000 470400 xsym               LDP0    VM_HEADER$
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:284  
        16 004075   000001 236100                    LDQ     1,,PR0
        16 004076   000002 116100                    CMPQ    2,,PR0
        16 004077   004106 603000 16                 TRC     s:22536

     1922    22530    5                 THEN DO;

     1923    22531    5                      VM_HEADER.STATUS.DEFER = %YES#;

  22531 16 004100   040000 236003                    LDQ     16384,DU
        16 004101   000012 256100                    ORSQ    10,,PR0

     1924    22532    5                      IF DID_SEND = %YES# THEN

  22532 16 004102   200017 234100                    SZN     DID_SEND,,AUTO
        16 004103   004113 605000 16                 TPL     s:22540

     1925    22533    5                           DID_SEND = %NO#;

  22533 16 004104   200017 450100                    STZ     DID_SEND,,AUTO

     1926    22534    5                 END;

  22534 16 004105   004113 710000 16                 TRA     s:22540

     1927    22535    5                 ELSE DO;

     1928    22536    5                      VM_HEADER.DELIVERY_DATE = 0;

  22536 16 004106   000002 450100                    STZ     2,,PR0

     1929    22537    5                      CALL VMA$ERRMSG (E_PASTDEFER);

  22537 16 004107   000160 630400 17                 EPPR0   112
        16 004110   000003 631400 17                 EPPR1   3
        16 004111   000000 701000 xent               TSX1    VMA$ERRMSG
        16 004112   000000 011000                    NOP     0

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:285  
     1930    22538    5                 END;

     1931    22539    4            END;

     1932    22540    3            CALL VNS$BREAK_ENABLE;

  22540 16 004113   000017 631400 17                 EPPR1   15
        16 004114   000000 701000 xent               TSX1    VNS$BREAK_ENABLE
        16 004115   000000 011000                    NOP     0
        16 004116   005440 710000 16                 TRA     RET

     1933    22541        %SPACE 6;

     1934    22542        /* Display command */
     1935    22543    3        CASE (%CMD_DISPLAY);

     1936    22544    3            IF OUT$ -> P$B.NSUBLKS = 0

  22544 16 004117   000001 222100                    LDX2    1,,PR0
        16 004120   004221 601000 16                 TNZ     s:22566

     1937    22545    4            THEN DO;              /* Display the whole message */

     1938    22546    4                 CALL VMD$DI_MESSAGE (0,M$ME_NUM,M$WORK_NUM,0,'1'B);

  22546 16 004121   000161 630400 17                 EPPR0   113
        16 004122   000035 631400 17                 EPPR1   29
        16 004123   000000 701000 xent               TSX1    VMD$DI_MESSAGE
        16 004124   000000 011000                    NOP     0

     1939    22547    4                 IF VM_HEADER.SIGNED$ ~= ADDR(NIL)

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:286  
  22547 16 004125   000000 470400 xsym               LDP0    VM_HEADER$
        16 004126   000027 236100                    LDQ     23,,PR0
        16 004127   000032 116000 17                 CMPQ    26
        16 004130   004151 600000 16                 TZE     s:22552

     1940    22548    5                 THEN DO;

     1941    22549    5                      VECT=VECTOR(VM_HEADER.SIGNED$->X$STRING.TEXT);

  22549 16 004131   000027 471500                    LDP1    23,,PR0
        16 004132   000100 101500                    MRL     fill='000'O
        16 004133   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
        16 004134   200450 000002                    ADSC9   P2$+1,,AUTO              cn=0,n=2
        16 004135   200450 220100                    LDX0    P2$+1,,AUTO
        16 004136   000000 635010                    EAA     0,X0
        16 004137   000002 771000                    ARL     2
        16 004140   000140 135007                    SBLA    96,DL
        16 004141   200451 451500                    STP1    P2$+2,,AUTO
        16 004142   200451 236100                    LDQ     P2$+2,,AUTO
        16 004143   200000 036007                    ADLQ    65536,DL
        16 004144   000732 757000 11                 STAQ    VECT

     1942    22550    5                      CALL VMD$WRITE_BUF(F_FDSSIGNED);

  22550 16 004145   000166 630400 17                 EPPR0   118
        16 004146   000003 631400 17                 EPPR1   3
        16 004147   000000 701000 xent               TSX1    VMD$WRITE_BUF
        16 004150   000000 011000                    NOP     0

     1943    22551    5                 END;

     1944    22552    4                 IF ENTRY_REASON = %MAIL_FORWARD OR ENTRY_REASON =

  22552 16 004151   200136 235100                    LDA     ENTRY_REASON,,AUTO
        16 004152   000003 115007                    CMPA    3,DL
        16 004153   004156 600000 16                 TZE     s:22555
        16 004154   000006 115007                    CMPA    6,DL
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:287  
        16 004155   004203 601000 16                 TNZ     s:22560

     1945    22553    4                   %MAIL_FORWARD_ENCL
     1946    22554    5                 THEN DO;

     1947    22555    5                      call XUR$INFOMSG( E_FORMSGFMT,, M$ME_NUM );

  22555 16 004156   000022 236000 17                 LDQ     18
        16 004157   200452 756100                    STQ     P2$+3,,AUTO
        16 004160   000032 236000 17                 LDQ     26
        16 004161   000167 235000 17                 LDA     119
        16 004162   200450 757100                    STAQ    P2$+1,,AUTO
        16 004163   200450 630500                    EPPR0   P2$+1,,AUTO
        16 004164   000074 631400 17                 EPPR1   60
        16 004165   000000 701000 xent               TSX1    XUR$INFOMSG
        16 004166   000000 011000                    NOP     0

     1948    22556    5                      IF ENTRY_REASON = %MAIL_FORWARD_ENCL THEN

  22556 16 004167   200136 235100                    LDA     ENTRY_REASON,,AUTO
        16 004170   000006 115007                    CMPA    6,DL
        16 004171   004203 601000 16                 TNZ     s:22560

     1949    22557    5                           CALL XUR$INFOMSG ( E_FORENCLFMT, , M$ME_NUM);

  22557 16 004172   000022 236000 17                 LDQ     18
        16 004173   200452 756100                    STQ     P2$+3,,AUTO
        16 004174   000032 236000 17                 LDQ     26
        16 004175   000170 235000 17                 LDA     120
        16 004176   200450 757100                    STAQ    P2$+1,,AUTO
        16 004177   200450 630500                    EPPR0   P2$+1,,AUTO
        16 004200   000074 631400 17                 EPPR1   60
        16 004201   000000 701000 xent               TSX1    XUR$INFOMSG
        16 004202   000000 011000                    NOP     0

     1950    22558    5                 END;

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:288  
     1951    22559
     1952    22560    4                 VECT = VECTOR(BLANK_CHAR); /* Display option info. */

  22560 16 004203   000172 237000 17                 LDAQ    122
        16 004204   000732 757000 11                 STAQ    VECT

     1953    22561    4                 CALL VMD$WRITE_BUF(F_FDSSPACE);

  22561 16 004205   000174 630400 17                 EPPR0   124
        16 004206   000003 631400 17                 EPPR1   3
        16 004207   000000 701000 xent               TSX1    VMD$WRITE_BUF
        16 004210   000000 011000                    NOP     0

     1954    22562    4                 CALL VMD$DI_OPTS(VM_HEADER,M$ME_NUM);

  22562 16 004211   000022 236000 17                 LDQ     18
        16 004212   000000 235000 xsym               LDA     VM_HEADER$
        16 004213   200450 757100                    STAQ    P2$+1,,AUTO
        16 004214   200450 630500                    EPPR0   P2$+1,,AUTO
        16 004215   000000 631400 17                 EPPR1   0
        16 004216   000000 701000 xent               TSX1    VMD$DI_OPTS
        16 004217   000000 011000                    NOP     0

     1955    22563
     1956    22564    4            END;

  22564 16 004220   005440 710000 16                 TRA     RET

     1957    22565    4            ELSE DO;              /* Display individual parts */

     1958    22566    5                 DO CASE (OUT$ -> P$B.SUBLK$(0) -> P$B.CODE);

  22566 16 004221   000003 471500                    LDP1    3,,PR0
        16 004222   100000 236100                    LDQ     0,,PR1
        16 004223   777777 376007                    ANQ     -1,DL
        16 004224   000012 136007                    SBLQ    10,DL
        16 004225   000015 116007                    CMPQ    13,DL
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:289  
        16 004226   004230 602006 16                 TNC     s:22566+7,QL
        16 004227   005440 710000 16                 TRA     RET
        16 004230   004245 710000 16                 TRA     s:22568
        16 004231   004255 710000 16                 TRA     s:22570
        16 004232   004404 710000 16                 TRA     s:22592
        16 004233   004265 710000 16                 TRA     s:22572
        16 004234   004275 710000 16                 TRA     s:22574
        16 004235   004305 710000 16                 TRA     s:22576
        16 004236   004315 710000 16                 TRA     s:22578
        16 004237   004325 710000 16                 TRA     s:22580
        16 004240   004355 710000 16                 TRA     s:22586
        16 004241   004335 710000 16                 TRA     s:22582
        16 004242   004345 710000 16                 TRA     s:22584
        16 004243   004375 710000 16                 TRA     s:22590
        16 004244   004365 710000 16                 TRA     s:22588

     1959    22567    5                 CASE (%OPT_BC);

     1960    22568    5                     CALL VMD$DI_BLIND (VM_HEADER,M$ME_NUM);

  22568 16 004245   000022 236000 17                 LDQ     18
        16 004246   000000 235000 xsym               LDA     VM_HEADER$
        16 004247   200450 757100                    STAQ    P2$+1,,AUTO
        16 004250   200450 630500                    EPPR0   P2$+1,,AUTO
        16 004251   000000 631400 17                 EPPR1   0
        16 004252   000000 701000 xent               TSX1    VMD$DI_BLIND
        16 004253   000000 011000                    NOP     0
        16 004254   005440 710000 16                 TRA     RET

     1961    22569    5                 CASE (%OPT_COPY);

     1962    22570    5                     CALL VMD$DI_COPY (VM_HEADER,M$ME_NUM);

  22570 16 004255   000022 236000 17                 LDQ     18
        16 004256   000000 235000 xsym               LDA     VM_HEADER$
        16 004257   200450 757100                    STAQ    P2$+1,,AUTO
        16 004260   200450 630500                    EPPR0   P2$+1,,AUTO
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:290  
        16 004261   000000 631400 17                 EPPR1   0
        16 004262   000000 701000 xent               TSX1    VMD$DI_COPY
        16 004263   000000 011000                    NOP     0
        16 004264   005440 710000 16                 TRA     RET

     1963    22571    5                 CASE (%OPT_REF);

     1964    22572    5                     CALL VMD$DI_REFERENCE (VM_HEADER,M$ME_NUM);

  22572 16 004265   000022 236000 17                 LDQ     18
        16 004266   000000 235000 xsym               LDA     VM_HEADER$
        16 004267   200450 757100                    STAQ    P2$+1,,AUTO
        16 004270   200450 630500                    EPPR0   P2$+1,,AUTO
        16 004271   000000 631400 17                 EPPR1   0
        16 004272   000000 701000 xent               TSX1    VMD$DI_REFERENCE
        16 004273   000000 011000                    NOP     0
        16 004274   005440 710000 16                 TRA     RET

     1965    22573    5                 CASE (%OPT_SUBJECT);

     1966    22574    5                     CALL VMD$DI_SUBJECT (VM_HEADER,M$ME_NUM);

  22574 16 004275   000022 236000 17                 LDQ     18
        16 004276   000000 235000 xsym               LDA     VM_HEADER$
        16 004277   200450 757100                    STAQ    P2$+1,,AUTO
        16 004300   200450 630500                    EPPR0   P2$+1,,AUTO
        16 004301   000000 631400 17                 EPPR1   0
        16 004302   000000 701000 xent               TSX1    VMD$DI_SUBJECT
        16 004303   000000 011000                    NOP     0
        16 004304   005440 710000 16                 TRA     RET

     1967    22575    5                 CASE (%OPT_TO);

     1968    22576    5                     CALL VMD$DI_TO (VM_HEADER,M$ME_NUM);

  22576 16 004305   000022 236000 17                 LDQ     18
        16 004306   000000 235000 xsym               LDA     VM_HEADER$
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:291  
        16 004307   200450 757100                    STAQ    P2$+1,,AUTO
        16 004310   200450 630500                    EPPR0   P2$+1,,AUTO
        16 004311   000000 631400 17                 EPPR1   0
        16 004312   000000 701000 xent               TSX1    VMD$DI_TO
        16 004313   000000 011000                    NOP     0
        16 004314   005440 710000 16                 TRA     RET

     1969    22577    5                 CASE (%OPT_SIGNED);

     1970    22578    5                     CALL VMD$DI_SIGNED (VM_HEADER,M$ME_NUM);

  22578 16 004315   000022 236000 17                 LDQ     18
        16 004316   000000 235000 xsym               LDA     VM_HEADER$
        16 004317   200450 757100                    STAQ    P2$+1,,AUTO
        16 004320   200450 630500                    EPPR0   P2$+1,,AUTO
        16 004321   000000 631400 17                 EPPR1   0
        16 004322   000000 701000 xent               TSX1    VMD$DI_SIGNED
        16 004323   000000 011000                    NOP     0
        16 004324   005440 710000 16                 TRA     RET

     1971    22579    5                 CASE (%OPT_FILE_COPY);

     1972    22580    5                     CALL VMD$DI_FCOPY (VM_HEADER,M$ME_NUM);

  22580 16 004325   000022 236000 17                 LDQ     18
        16 004326   000000 235000 xsym               LDA     VM_HEADER$
        16 004327   200450 757100                    STAQ    P2$+1,,AUTO
        16 004330   200450 630500                    EPPR0   P2$+1,,AUTO
        16 004331   000000 631400 17                 EPPR1   0
        16 004332   000000 701000 xent               TSX1    VMD$DI_FCOPY
        16 004333   000000 011000                    NOP     0
        16 004334   005440 710000 16                 TRA     RET

     1973    22581    5                 CASE (%OPT_RR);

     1974    22582    5                     CALL VMD$DI_RR (VM_HEADER,M$ME_NUM);

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:292  
  22582 16 004335   000022 236000 17                 LDQ     18
        16 004336   000000 235000 xsym               LDA     VM_HEADER$
        16 004337   200450 757100                    STAQ    P2$+1,,AUTO
        16 004340   200450 630500                    EPPR0   P2$+1,,AUTO
        16 004341   000000 631400 17                 EPPR1   0
        16 004342   000000 701000 xent               TSX1    VMD$DI_RR
        16 004343   000000 011000                    NOP     0
        16 004344   005440 710000 16                 TRA     RET

     1975    22583    5                 CASE (%OPT_RTO);

     1976    22584    5                     CALL VMD$DI_RTO (VM_HEADER,M$ME_NUM);

  22584 16 004345   000022 236000 17                 LDQ     18
        16 004346   000000 235000 xsym               LDA     VM_HEADER$
        16 004347   200450 757100                    STAQ    P2$+1,,AUTO
        16 004350   200450 630500                    EPPR0   P2$+1,,AUTO
        16 004351   000000 631400 17                 EPPR1   0
        16 004352   000000 701000 xent               TSX1    VMD$DI_RTO
        16 004353   000000 011000                    NOP     0
        16 004354   005440 710000 16                 TRA     RET

     1977    22585    5                 CASE (%OPT_DEFER);

     1978    22586    5                     CALL VMD$DI_DEFER (VM_HEADER,M$ME_NUM);

  22586 16 004355   000022 236000 17                 LDQ     18
        16 004356   000000 235000 xsym               LDA     VM_HEADER$
        16 004357   200450 757100                    STAQ    P2$+1,,AUTO
        16 004360   200450 630500                    EPPR0   P2$+1,,AUTO
        16 004361   000000 631400 17                 EPPR1   0
        16 004362   000000 701000 xent               TSX1    VMD$DI_DEFER
        16 004363   000000 011000                    NOP     0
        16 004364   005440 710000 16                 TRA     RET

     1979    22587    5                 CASE(%OPT_BROADCAST);

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:293  
     1980    22588    5                     CALL VMD$DI_BROADCAST (VM_HEADER,M$ME_NUM);

  22588 16 004365   000022 236000 17                 LDQ     18
        16 004366   000000 235000 xsym               LDA     VM_HEADER$
        16 004367   200450 757100                    STAQ    P2$+1,,AUTO
        16 004370   200450 630500                    EPPR0   P2$+1,,AUTO
        16 004371   000000 631400 17                 EPPR1   0
        16 004372   000000 701000 xent               TSX1    VMD$DI_BROADCAST
        16 004373   000000 011000                    NOP     0
        16 004374   005440 710000 16                 TRA     RET

     1981    22589    5                 CASE(%OPT_DR);

     1982    22590    5                     CALL VMD$DI_DR (VM_HEADER,M$ME_NUM);

  22590 16 004375   000022 236000 17                 LDQ     18
        16 004376   000000 235000 xsym               LDA     VM_HEADER$
        16 004377   200450 757100                    STAQ    P2$+1,,AUTO
        16 004400   200450 630500                    EPPR0   P2$+1,,AUTO
        16 004401   000000 631400 17                 EPPR1   0
        16 004402   000000 701000 xent               TSX1    VMD$DI_DR
        16 004403   000000 011000                    NOP     0

     1983    22591    5                 END;

     1984    22592    4            END;

  22592 16 004404   005440 710000 16                 TRA     RET

     1985    22593
     1986    22594        %SPACE 6;

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:294  
     1987    22595        /* Delivery Receipt command */
     1988    22596    3        CASE (%CMD_DR);

     1989    22597    3            IF OUT$ -> P$B.SUBLK$(0) -> P$B.CODE = %OPT_YES

  22597 16 004405   000003 471500                    LDP1    3,,PR0
        16 004406   100000 722100                    LXL2    0,,PR1
        16 004407   000036 102003                    CMPX2   30,DU
        16 004410   004415 601000 16                 TNZ     s:22601

     1990    22598    3            THEN
     1991    22599    3                 VM_HEADER.STATUS.DR = %YES#;

  22599 16 004411   000000 473400 xsym               LDP3    VM_HEADER$
        16 004412   000004 236003                    LDQ     4,DU
        16 004413   300012 256100                    ORSQ    10,,PR3
        16 004414   005440 710000 16                 TRA     RET

     1992    22600    3            ELSE
     1993    22601    3                 VM_HEADER.STATUS.DR = %NO#;

  22601 16 004415   000000 473400 xsym               LDP3    VM_HEADER$
        16 004416   000175 236000 17                 LDQ     125
        16 004417   300012 356100                    ANSQ    10,,PR3
        16 004420   005440 710000 16                 TRA     RET

     1994    22602        %SPACE 6;

     1995    22603        /* Edit command  */
     1996    22604    3        CASE (%CMD_EDIT);

     1997    22605    3            IF OUT$ -> P$B.NSUBLKS = 0
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:295  

  22605 16 004421   000001 222100                    LDX2    1,,PR0
        16 004422   004426 601000 16                 TNZ     s:22609

     1998    22606    3            THEN
     1999    22607    3                 INVOKE_EDITOR$ = DEFAULT_EDITOR$;

  22607 16 004423   000111 236000 11                 LDQ     DEFAULT_EDITOR$
        16 004424   000110 756000 11                 STQ     INVOKE_EDITOR$
        16 004425   005440 710000 16                 TRA     RET

     2000    22608    3            ELSE
     2001    22609    3                 INVOKE_EDITOR$ = OUT$ -> P$B.SUBLK$(0) -> P$S.TEXTC$;

  22609 16 004426   000003 471500                    LDP1    3,,PR0
        16 004427   100003 236100                    LDQ     3,,PR1
        16 004430   000110 756000 11                 STQ     INVOKE_EDITOR$
        16 004431   005440 710000 16                 TRA     RET

     2002    22610        %SPACE 6;

     2003    22611        /* End, Exit, Quit command */
     2004    22612    3        CASE(%CMD_EXIT);

     2005    22613    3            CALL DO$SEND ALTRET(ALT);

  22613 16 004432   007020 701000 16                 TSX1    DO$SEND
        16 004433   005446 702000 16                 TSX2    ALT

     2006    22614    3            CALL M$EXIT;       /*** Terminate SEND ***/

  22614 16 004434   000001 713400                    CLIMB   exit
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:296  
        16 004435   000000 401760                    pmme    nvectors=0
        16 004436   005440 710000 16                 TRA     RET

     2007    22615        %SPACE 6;

     2008    22616        /* Fcopy command */
     2009    22617    3        CASE (%CMD_FILE_COPY);

     2010    22618    3            IF OUT$ -> P$B.NSUBLKS = 0

  22618 16 004437   000001 222100                    LDX2    1,,PR0
        16 004440   004445 601000 16                 TNZ     s:22622

     2011    22619    3            THEN                      /* Assume yes */
     2012    22620    3                 VM_HEADER.STATUS.FCOPY = %YES#;

  22620 16 004441   000000 471400 xsym               LDP1    VM_HEADER$
        16 004442   000200 236003                    LDQ     128,DU
        16 004443   100012 256100                    ORSQ    10,,PR1
        16 004444   005440 710000 16                 TRA     RET

     2013    22621    4            ELSE DO;

     2014    22622    4                 BLK$ = OUT$ -> P$B.SUBLK$(0);

  22622 16 004445   000003 236100                    LDQ     3,,PR0
        16 004446   200030 756100                    STQ     BLK$,,AUTO

     2015    22623    5                 DO CASE (BLK$ -> P$B.CODE);

  22623 16 004447   200030 471500                    LDP1    BLK$,,AUTO
        16 004450   100000 236100                    LDQ     0,,PR1
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:297  
        16 004451   777777 376007                    ANQ     -1,DL
        16 004452   000036 136007                    SBLQ    30,DL
        16 004453   000002 116007                    CMPQ    2,DL
        16 004454   004456 602006 16                 TNC     s:22623+7,QL
        16 004455   004470 710000 16                 TRA     s:22629
        16 004456   004460 710000 16                 TRA     s:22625
        16 004457   004464 710000 16                 TRA     s:22627

     2016    22624    5                 CASE(%OPT_YES);

     2017    22625    5                     VM_HEADER.STATUS.FCOPY = %YES#;

  22625 16 004460   000000 473400 xsym               LDP3    VM_HEADER$
        16 004461   000200 236003                    LDQ     128,DU
        16 004462   300012 256100                    ORSQ    10,,PR3
        16 004463   005440 710000 16                 TRA     RET

     2018    22626    5                 CASE(%OPT_NO);

     2019    22627    5                     VM_HEADER.STATUS.FCOPY = %NO#;

  22627 16 004464   000000 473400 xsym               LDP3    VM_HEADER$
        16 004465   000145 236000 17                 LDQ     101
        16 004466   300012 356100                    ANSQ    10,,PR3
        16 004467   005440 710000 16                 TRA     RET

     2020    22628    5                 CASE(ELSE); /* must be folder name */

     2021    22629    5                     VM_HEADER.STATUS.FCOPY = %YES#;

  22629 16 004470   000000 473400 xsym               LDP3    VM_HEADER$
        16 004471   000200 236003                    LDQ     128,DU
        16 004472   300012 256100                    ORSQ    10,,PR3

     2022    22630    5                     VM_RADDRESS.ACCT = VM_CURRENT_FOLDER.ACCT;

  22630 16 004473   040000 100400                    MLR     fill='040'O
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:298  
        16 004474   000273 400010 11                 ADSC9   VM_CURRENT_FOLDER+1      cn=2,n=8
        16 004475   000633 600010 11                 ADSC9   VM_RADDRESS+17           cn=3,n=8

     2023    22631    5                     VM_RADDRESS.FOLDER = VM_CURRENT_FOLDER.FOLDER;

  22631 16 004476   040000 100400                    MLR     fill='040'O
        16 004477   000275 400031 11                 ADSC9   VM_CURRENT_FOLDER+3      cn=2,n=25
        16 004500   000621 400031 11                 ADSC9   VM_RADDRESS+7            cn=2,n=25

     2024    22632    5                     VM_RADDRESS.PASS = VM_CURRENT_FOLDER.PASS;

  22632 16 004501   040000 100400                    MLR     fill='040'O
        16 004502   000303 600010 11                 ADSC9   VM_CURRENT_FOLDER+9      cn=3,n=8
        16 004503   000627 600010 11                 ADSC9   VM_RADDRESS+13           cn=3,n=8

     2025    22633    5                     VM_RADDRESS.SITENAME = VM_CURRENT_FOLDER.SITENAME;

  22633 16 004504   040000 100400                    MLR     fill='040'O
        16 004505   000305 600010 11                 ADSC9   VM_CURRENT_FOLDER+11     cn=3,n=8
        16 004506   000631 600010 11                 ADSC9   VM_RADDRESS+15           cn=3,n=8

     2026    22634    5                     VM_RADDRESS.NEXT$ = ADDR(NIL);

  22634 16 004507   000032 236000 17                 LDQ     26
        16 004510   000612 756000 11                 STQ     VM_RADDRESS

     2027    22635    5                     VM_RADDRESS.PREV$ = ADDR(NIL);

  22635 16 004511   000613 756000 11                 STQ     VM_RADDRESS+1

     2028    22636    5                     VM_RADDRESS.FLAGS = %NO#;

  22636 16 004512   000000 236003                    LDQ     0,DU
        16 004513   000614 552040 11                 STBQ    VM_RADDRESS+2,'40'O

     2029    22637    5                     VM_RADDRESS.TYPE = %VM_ADD_RESOLVED;

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:299  
  22637 16 004514   000001 236003                    LDQ     1,DU
        16 004515   000614 552020 11                 STBQ    VM_RADDRESS+2,'20'O

     2030    22638    6                     DO I = 0 TO BLK$ -> P$B.NSUBLKS - 1;

  22638 16 004516   200134 450100                    STZ     I,,AUTO
        16 004517   004574 710000 16                 TRA     s:22652+1

     2031    22639    6                          TMP$ = BLK$ -> P$B.SUBLK$(I);

  22639 16 004520   200030 470500                    LDP0    BLK$,,AUTO
        16 004521   200134 720100                    LXL0    I,,AUTO
        16 004522   000003 236110                    LDQ     3,X0,PR0
        16 004523   200031 756100                    STQ     TMP$,,AUTO

     2032    22640    7                          DO CASE (TMP$ -> P$B.CODE);

  22640 16 004524   200031 471500                    LDP1    TMP$,,AUTO
        16 004525   100000 721100                    LXL1    0,,PR1
        16 004526   000006 101003                    CMPX1   6,DU
        16 004527   004531 602011 16                 TNC     s:22640+5,X1
        16 004530   004573 710000 16                 TRA     s:22652
        16 004531   004573 710000 16                 TRA     s:22652
        16 004532   004573 710000 16                 TRA     s:22652
        16 004533   004537 710000 16                 TRA     s:22642
        16 004534   004546 710000 16                 TRA     s:22644
        16 004535   004564 710000 16                 TRA     s:22648
        16 004536   004555 710000 16                 TRA     s:22646

     2033    22641    7                          CASE (%ADD_ACCT);

     2034    22642    7                              VM_RADDRESS.ACCT = TMP$ -> P$S.TEXT;

  22642 16 004537   100004 236100                    LDQ     4,,PR1
        16 004540   000033 772000                    QRL     27
        16 004541   000000 622006                    EAX2    0,QL
        16 004542   040000 100540                    MLR     fill='040'O
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:300  
        16 004543   100004 200012                    ADSC9   4,,PR1                   cn=1,n=*X2
        16 004544   000633 600010 11                 ADSC9   VM_RADDRESS+17           cn=3,n=8
        16 004545   004573 710000 16                 TRA     s:22652

     2035    22643    7                          CASE (%ADD_FOLDER);

     2036    22644    7                              VM_RADDRESS.FOLDER = TMP$ -> P$S.TEXT;

  22644 16 004546   100004 236100                    LDQ     4,,PR1
        16 004547   000033 772000                    QRL     27
        16 004550   000000 622006                    EAX2    0,QL
        16 004551   040000 100540                    MLR     fill='040'O
        16 004552   100004 200012                    ADSC9   4,,PR1                   cn=1,n=*X2
        16 004553   000621 400031 11                 ADSC9   VM_RADDRESS+7            cn=2,n=25
        16 004554   004573 710000 16                 TRA     s:22652

     2037    22645    7                          CASE (%ADD_PASS);

     2038    22646    7                              VM_RADDRESS.PASS = TMP$ -> P$S.TEXT;

  22646 16 004555   100004 236100                    LDQ     4,,PR1
        16 004556   000033 772000                    QRL     27
        16 004557   000000 622006                    EAX2    0,QL
        16 004560   040000 100540                    MLR     fill='040'O
        16 004561   100004 200012                    ADSC9   4,,PR1                   cn=1,n=*X2
        16 004562   000627 600010 11                 ADSC9   VM_RADDRESS+13           cn=3,n=8
        16 004563   004573 710000 16                 TRA     s:22652

     2039    22647    7                          CASE (%ADD_NAME);

     2040    22648    7                              CALL VMA$ERRMSG (E_NAMENTALLOWED);

  22648 16 004564   000176 630400 17                 EPPR0   126
        16 004565   000003 631400 17                 EPPR1   3
        16 004566   000000 701000 xent               TSX1    VMA$ERRMSG
        16 004567   000000 011000                    NOP     0

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:301  
     2041    22649    7                              ERR_FLAG = %YES#;

  22649 16 004570   400000 236003                    LDQ     -131072,DU
        16 004571   200021 756100                    STQ     ERR_FLAG,,AUTO

     2042    22650    7                              GOTO RET;

  22650 16 004572   005440 710000 16                 TRA     RET

     2043    22651    7                          END; /* Do case ... end */

     2044    22652    6                     END; /* Do I = ... end */

  22652 16 004573   200134 054100                    AOS     I,,AUTO
        16 004574   200030 470500                    LDP0    BLK$,,AUTO
        16 004575   000001 236100                    LDQ     1,,PR0
        16 004576   000022 772000                    QRL     18
        16 004577   200134 116100                    CMPQ    I,,AUTO
        16 004600   004520 605400 16                 TPNZ    s:22639

     2045    22653    5                     CALL ALLOC$RADDRESS (VM_HEADER.FILE_FOLDER$, VM_RADDRESS) ALTRET(
             22653                              E_ALLOCATE);

  22653 16 004601   000065 236000 17                 LDQ     53
        16 004602   200440 756100                    STQ     @FLD$+1,,AUTO
        16 004603   000000 236000 xsym               LDQ     VM_HEADER$
        16 004604   000022 036003                    ADLQ    18,DU
        16 004605   200437 756100                    STQ     NEW_TYPE+2,,AUTO
        16 004606   006023 701000 16                 TSX1    ALLOC$RADDRESS
        16 004607   005442 702000 16                 TSX2    E_ALLOCATE

     2046    22654    5                 END;

     2047    22655    4            END;

  22655 16 004610   005440 710000 16                 TRA     RET

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:302  
     2048    22656        %SPACE 6;

     2049    22657        /* From command;  privileged */
     2050    22658    3        CASE (%CMD_FROM);

     2051    22659    3            CALL REPLACE$ADDR (VM_HEADER.FROM$, 0) ALTRET(E_ALLOCATE);

  22659 16 004611   000052 236000 17                 LDQ     42
        16 004612   200372 756100                    STQ     PTR2$,,AUTO
        16 004613   000000 236000 xsym               LDQ     VM_HEADER$
        16 004614   000023 036003                    ADLQ    19,DU
        16 004615   200371 756100                    STQ     PTR1$,,AUTO
        16 004616   006411 701000 16                 TSX1    REPLACE$ADDR
        16 004617   005442 702000 16                 TSX2    E_ALLOCATE

     2052    22660    3            CALL ERASE$ADDR (VM_HEADER.REPLY_TO$, %VM_TYPE_RTO) ALTRET(E_ALLOCATE);

  22660 16 004620   000070 236000 17                 LDQ     56
        16 004621   200376 756100                    STQ     @FLD$+1,,AUTO
        16 004622   000000 236000 xsym               LDQ     VM_HEADER$
        16 004623   000025 036003                    ADLQ    21,DU
        16 004624   200375 756100                    STQ     @NODE$+1,,AUTO
        16 004625   006225 701000 16                 TSX1    ERASE$ADDR
        16 004626   005442 702000 16                 TSX2    E_ALLOCATE

     2053    22661    3            CALL ERASE$FLD (VM_HEADER.SIGNED$) ALTRET(E_ALLOCATE);

  22661 16 004627   000000 236000 xsym               LDQ     VM_HEADER$
        16 004630   000027 036003                    ADLQ    23,DU
        16 004631   200445 756100                    STQ     ALLOC_TEXTC+2,,AUTO
        16 004632   006204 701000 16                 TSX1    ERASE$FLD
        16 004633   005442 702000 16                 TSX2    E_ALLOCATE
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:303  
        16 004634   005440 710000 16                 TRA     RET

     2054    22662        %SPACE 6;

     2055    22663        /* Help commands */
     2056    22664    3        CASE (%CMD_HELP);

     2057    22665    3            HELP_PARAM.HELP$ = OUT$ -> P$B.SUBLK$(0) -> P$S.TEXTC$;

  22665 16 004635   000003 471500                    LDP1    3,,PR0
        16 004636   100003 236100                    LDQ     3,,PR1
        16 004637   001253 756000 11                 STQ     HELP_PARAM+9

     2058    22666    3            HELP_PARAM.MORE# = %NO#;

  22666 16 004640   000145 236000 17                 LDQ     101
        16 004641   001254 356000 11                 ANSQ    HELP_PARAM+10

     2059    22667    3            CALL XUR$HELP (HELP_PARAM);

  22667 16 004642   000177 630400 17                 EPPR0   127
        16 004643   000003 631400 17                 EPPR1   3
        16 004644   000000 701000 xent               TSX1    XUR$HELP
        16 004645   000000 011000                    NOP     0
        16 004646   005440 710000 16                 TRA     RET

     2060    22668
     2061    22669    3        CASE (%CMD_QUES1);

     2062    22670    3            CALL XUR$MOREMSG (HELP_PARAM) ALTRET(NO_MORE);

  22670 16 004647   000177 630400 17                 EPPR0   127
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:304  
        16 004650   000003 631400 17                 EPPR1   3
        16 004651   000000 701000 xent               TSX1    XUR$MOREMSG
        16 004652   004661 702000 16                 TSX2    NO_MORE
        16 004653   005440 710000 16                 TRA     RET

     2063    22671    3        CASE (%CMD_QUES2);

     2064    22672    3            CALL XUR$ALLMSG (HELP_PARAM) ALTRET(NO_MORE);

  22672 16 004654   000177 630400 17                 EPPR0   127
        16 004655   000003 631400 17                 EPPR1   3
        16 004656   000000 701000 xent               TSX1    XUR$ALLMSG
        16 004657   004661 702000 16                 TSX2    NO_MORE

     2065    22673        /**/
     2066    22674    4            DO NEVER;

  22674 16 004660   005440 710000 16                 TRA     RET

     2067    22675    4   NO_MORE:
     2068    22676        /*E*    ERROR: VNS-E$NOMORE-0
     2069    22677                MESSAGE: No messages available. */
     2070    22678    4                 CALL XUR$ERRMSG (E_NOMORE);

  22678 16 004661   000200 630400 17    NO_MORE      EPPR0   128
        16 004662   000003 631400 17                 EPPR1   3
        16 004663   000000 701000 xent               TSX1    XUR$ERRMSG
        16 004664   000000 011000                    NOP     0

     2071    22679    4            END;                      /* Do never ... end */

  22679 16 004665   005440 710000 16                 TRA     RET

     2072    22680        %SPACE 6;

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:305  
     2073    22681        /* Intersystem Blind Copy command: privileged */
     2074    22682    3        CASE(%CMD_INTERSYS_BC);

     2075    22683    3            CALL GET$ADDLIST (%VM_TYPE_IBC);

  22683 16 004666   000202 236000 17                 LDQ     130
        16 004667   200375 756100                    STQ     @NODE$+1,,AUTO
        16 004670   005450 701000 16                 TSX1    GET$ADDLIST
        16 004671   000000 011000                    NOP     0
        16 004672   005440 710000 16                 TRA     RET

     2076    22684        %SPACE 6;

     2077    22685        /* Intersystem Copy command: privileged */
     2078    22686    3        CASE(%CMD_INTERSYS_C);

     2079    22687    3            CALL GET$ADDLIST (%VM_TYPE_IC);

  22687 16 004673   000204 236000 17                 LDQ     132
        16 004674   200375 756100                    STQ     @NODE$+1,,AUTO
        16 004675   005450 701000 16                 TSX1    GET$ADDLIST
        16 004676   000000 011000                    NOP     0
        16 004677   005440 710000 16                 TRA     RET

     2080    22688        %SPACE 6;

     2081    22689        /* Intersystem To command: privileged */
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:306  
     2082    22690    3        CASE(%CMD_INTERSYS_TO);

     2083    22691    3            CALL GET$ADDLIST (%VM_TYPE_ITO);

  22691 16 004700   000206 236000 17                 LDQ     134
        16 004701   200375 756100                    STQ     @NODE$+1,,AUTO
        16 004702   005450 701000 16                 TSX1    GET$ADDLIST
        16 004703   000000 011000                    NOP     0
        16 004704   005440 710000 16                 TRA     RET

     2084    22692        %SPACE 6;

     2085    22693        /* LINK command */
     2086    22694    3        CASE(%CMD_LINK);

     2087    22695        /*
     2088    22696             ***** LINK is a holdover from back before the DO (or !) builtin
     2089    22697             ***** was available.  The command is retained for compatibility,
     2090    22698             ***** but, as of B03, the implementation has been changed to be
     2091    22699             ***** a simple passthru to the builtin.
     2092    22700        */
     2093    22701    3            CALL INDEX (I, ' ', P_PCB$TEXT);

  22701 16 004705   000000 471400 11                 LDP1    P_PCB
        16 004706   000011 722000 11                 LXL2    P_PCB+9
        16 004707   000000 124540                    SCM     mask='000'O
        16 004710   100000 000012                    ADSC9   0,,PR1                   cn=0,n=*X2
        16 004711   000064 000001 17                 ADSC9   52                       cn=0,n=1
        16 004712   200134 000100                    ARG     I,,AUTO

     2094    22702    3            SUBSTR (P_PCB$TEXT, 0, I) = '!';

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:307  
  22702 16 004713   200134 723100                    LXL3    I,,AUTO
        16 004714   040140 100400                    MLR     fill='040'O
        16 004715   000207 000001 17                 ADSC9   135                      cn=0,n=1
        16 004716   100000 000013                    ADSC9   0,,PR1                   cn=0,n=*X3

     2095    22703    3            CALL XUR$GETCMD (OPTION_NODES$->BSD, OUT$,, P_PCB$TEXT, P_PCB.NCHARS)

  22703 16 004717   000210 236000 17                 LDQ     136
        16 004720   200454 756100                    STQ     P2$+5,,AUTO
        16 004721   000000 236000 11                 LDQ     P_PCB
        16 004722   000032 235000 17                 LDA     26
        16 004723   200452 757100                    STAQ    P2$+3,,AUTO
        16 004724   200027 630500                    EPPR0   OUT$,,AUTO
        16 004725   200451 450500                    STP0    P2$+2,,AUTO
        16 004726   200016 236100                    LDQ     OPTION_NODES$,,AUTO
        16 004727   200450 756100                    STQ     P2$+1,,AUTO
        16 004730   200450 630500                    EPPR0   P2$+1,,AUTO
        16 004731   000035 631400 17                 EPPR1   29
        16 004732   000000 701000 xent               TSX1    XUR$GETCMD
        16 004733   004735 702000 16                 TSX2    s:22705
        16 004734   004737 710000 16                 TRA     s:22706

     2096    22704    4            WHENALTRETURN DO;

     2097    22705    4                 CALL CMD_ERR;

  22705 16 004735   002035 701000 16                 TSX1    CMD_ERR
        16 004736   000000 011000                    NOP     0

     2098    22706    4            END;

  22706 16 004737   005440 710000 16                 TRA     RET

     2099    22707        %SPACE 6;

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:308  
     2100    22708        /*  MESSAGEID: priviledged command                            */
     2101    22709    3        CASE (%CMD_MESSAGE_ID);

     2102    22710    3            CALL REPLACE$FLD (VM_HEADER.UNIQUE_ID$) ALTRET(E_ALLOCATE);

  22710 16 004740   000000 236000 xsym               LDQ     VM_HEADER$
        16 004741   000032 036003                    ADLQ    26,DU
        16 004742   200371 756100                    STQ     PTR1$,,AUTO
        16 004743   006262 701000 16                 TSX1    REPLACE$FLD
        16 004744   005442 702000 16                 TSX2    E_ALLOCATE

     2103    22711    3            ID_ASSIGNED = (VM_HEADER.UNIQUE_ID$ ~= ADDR(NIL));

  22711 16 004745   400000 220003                    LDX0    -131072,DU
        16 004746   000000 470400 xsym               LDP0    VM_HEADER$
        16 004747   000032 236100                    LDQ     26,,PR0
        16 004750   000032 116000 17                 CMPQ    26
        16 004751   004753 601000 16                 TNZ     s:22711+6
        16 004752   000000 220003                    LDX0    0,DU
        16 004753   000000 636010                    EAQ     0,X0
        16 004754   200022 756100                    STQ     ID_ASSIGNED,,AUTO
        16 004755   005440 710000 16                 TRA     RET

     2104    22712        %SPACE 6;

     2105    22713        /* Reference command */
     2106    22714    3        CASE (%CMD_REF);

     2107    22715    3            CALL REREAD$CHK

  22715 16 004756   005621 701000 16                 TSX1    REREAD$CHK
        16 004757   004761 702000 16                 TSX2    s:22717
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:309  
        16 004760   004776 710000 16                 TRA     s:22720

     2108    22716    4            WHENALTRETURN DO;

     2109    22717    4                CALL REREAD$CMD (VN_REFERENCE, VM_HEADER.REFERENCE$, E_CMD_REF_PROMPT,

  22717 16 004761   000057 236000 17                 LDQ     47
        16 004762   200375 756100                    STQ     @NODE$+1,,AUTO
        16 004763   200011 630500                    EPPR0   CMD_REF$,,AUTO
        16 004764   200374 450500                    STP0    REC$,,AUTO
        16 004765   000211 236000 17                 LDQ     137
        16 004766   200373 756100                    STQ     PREV_ENT$,,AUTO
        16 004767   000000 236000 xsym               LDQ     VM_HEADER$
        16 004770   000024 036003                    ADLQ    20,DU
        16 004771   200372 756100                    STQ     PTR2$,,AUTO
        16 004772   000212 236000 17                 LDQ     138
        16 004773   200371 756100                    STQ     PTR1$,,AUTO
        16 004774   005646 701000 16                 TSX1    REREAD$CMD
        16 004775   005440 702000 16                 TSX2    RET

     2110    22718    4                   CMD_REF$, %YES# ) ALTRET(RET);
     2111    22719    4            END;

     2112    22720    3            CALL REPLACE$FLD (VM_HEADER.REFERENCE$) ALTRET(E_ALLOCATE);

  22720 16 004776   000000 236000 xsym               LDQ     VM_HEADER$
        16 004777   000024 036003                    ADLQ    20,DU
        16 005000   200371 756100                    STQ     PTR1$,,AUTO
        16 005001   006262 701000 16                 TSX1    REPLACE$FLD
        16 005002   005442 702000 16                 TSX2    E_ALLOCATE
        16 005003   005440 710000 16                 TRA     RET

     2113    22721        %SPACE 6;

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:310  
     2114    22722        /* PREPROCESS command */
     2115    22723    3        CASE (%CMD_PREPROCESS);

     2116    22724    3            IF OUT$ -> P$B.NSUBLKS = 0

  22724 16 005004   000001 222100                    LDX2    1,,PR0
        16 005005   005011 601000 16                 TNZ     s:22728

     2117    22725    3            THEN                      /* Assume yes */
     2118    22726    3                 PREPROCESS = %YES#;

  22726 16 005006   400000 236003                    LDQ     -131072,DU
        16 005007   200026 756100                    STQ     PREPROCESS,,AUTO
        16 005010   005021 710000 16                 TRA     s:22733

     2119    22727    3            ELSE
     2120    22728    3                 IF OUT$ -> P$B.SUBLK$(0) -> P$B.CODE = %OPT_YES

  22728 16 005011   000003 471500                    LDP1    3,,PR0
        16 005012   100000 723100                    LXL3    0,,PR1
        16 005013   000036 103003                    CMPX3   30,DU
        16 005014   005020 601000 16                 TNZ     s:22732

     2121    22729    3                 THEN
     2122    22730    3                      PREPROCESS = %YES#;

  22730 16 005015   400000 236003                    LDQ     -131072,DU
        16 005016   200026 756100                    STQ     PREPROCESS,,AUTO
        16 005017   005021 710000 16                 TRA     s:22733

     2123    22731    3                 ELSE
     2124    22732    3                      PREPROCESS = %NO#;

  22732 16 005020   200026 450100                    STZ     PREPROCESS,,AUTO

     2125    22733    3            IF PREPROCESS ~= XUR_INIT.PREPROCESS#

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:311  
  22733 16 005021   000000 066500                    CMPB    filb='0'B
        16 005022   200026 000001                    BDSC    PREPROCESS,,AUTO         by=0,bit=0,n=1
        16 005023   000016 010001 11                 BDSC    XUR_INIT                 by=0,bit=1,n=1
        16 005024   005440 600000 16                 TZE     RET

     2126    22734    4            THEN DO;

     2127    22735    4                 XUR_INIT.PREPROCESS# = PREPROCESS;

  22735 16 005025   200026 236100                    LDQ     PREPROCESS,,AUTO
        16 005026   000001 772000                    QRL     1
        16 005027   000016 676000 11                 ERQ     XUR_INIT
        16 005030   200000 376003                    ANQ     65536,DU
        16 005031   000016 656000 11                 ERSQ    XUR_INIT

     2128    22736    4                 CALL XUR$INIT (XUR_INIT);

  22736 16 005032   000020 630400 17                 EPPR0   16
        16 005033   000003 631400 17                 EPPR1   3
        16 005034   000000 701000 xent               TSX1    XUR$INIT
        16 005035   000000 011000                    NOP     0

     2129    22737    4                 CALL XUR$SETERRMSG (ERRMSG_FID);

  22737 16 005036   000023 630400 17                 EPPR0   19
        16 005037   000003 631400 17                 EPPR1   3
        16 005040   000000 701000 xent               TSX1    XUR$SETERRMSG
        16 005041   000000 011000                    NOP     0

     2130    22738    4            END;

  22738 16 005042   005440 710000 16                 TRA     RET

     2131    22739        %SPACE 6;

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:312  
     2132    22740        /*   REFERENCEID: priviledged command                         */
     2133    22741    3        CASE (%CMD_REF_MESSAGE_ID);

     2134    22742    3            CALL REPLACE$FLD (VM_HEADER.REFERS_TO_ID$) ALTRET(E_ALLOCATE);

  22742 16 005043   000000 236000 xsym               LDQ     VM_HEADER$
        16 005044   000033 036003                    ADLQ    27,DU
        16 005045   200371 756100                    STQ     PTR1$,,AUTO
        16 005046   006262 701000 16                 TSX1    REPLACE$FLD
        16 005047   005442 702000 16                 TSX2    E_ALLOCATE
        16 005050   005440 710000 16                 TRA     RET

     2135    22743        %SPACE 6;

     2136    22744        /* Rr command */
     2137    22745    3        CASE (%CMD_RR);

     2138    22746    3            IF OUT$ -> P$B.SUBLK$(0) -> P$B.CODE = %OPT_YES

  22746 16 005051   000003 471500                    LDP1    3,,PR0
        16 005052   100000 722100                    LXL2    0,,PR1
        16 005053   000036 102003                    CMPX2   30,DU
        16 005054   005061 601000 16                 TNZ     s:22750

     2139    22747    3            THEN
     2140    22748    3                 VM_HEADER.STATUS.RR = %YES#;

  22748 16 005055   000000 473400 xsym               LDP3    VM_HEADER$
        16 005056   020000 236003                    LDQ     8192,DU
        16 005057   300012 256100                    ORSQ    10,,PR3
        16 005060   005440 710000 16                 TRA     RET

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:313  
     2141    22749    3            ELSE
     2142    22750    3                 VM_HEADER.STATUS.RR = %NO#;

  22750 16 005061   000000 473400 xsym               LDP3    VM_HEADER$
        16 005062   000146 236000 17                 LDQ     102
        16 005063   300012 356100                    ANSQ    10,,PR3
        16 005064   005440 710000 16                 TRA     RET

     2143    22751        %SPACE 6;

     2144    22752        /* Reply to command */
     2145    22753    3        CASE (%CMD_RTO);

     2146    22754    3            CALL REREAD$CHK

  22754 16 005065   005621 701000 16                 TSX1    REREAD$CHK
        16 005066   005070 702000 16                 TSX2    s:22756
        16 005067   005105 710000 16                 TRA     s:22759

     2147    22755    4            WHENALTRETURN DO;

     2148    22756    4                 CALL REREAD$CMD (VN_REPLY_TO, VM_HEADER.REPLY_TO$, E_CMD_RTO_PROMPT,

  22756 16 005070   000052 236000 17                 LDQ     42
        16 005071   200375 756100                    STQ     @NODE$+1,,AUTO
        16 005072   200010 630500                    EPPR0   CMD_RTO$,,AUTO
        16 005073   200374 450500                    STP0    REC$,,AUTO
        16 005074   000213 236000 17                 LDQ     139
        16 005075   200373 756100                    STQ     PREV_ENT$,,AUTO
        16 005076   000000 236000 xsym               LDQ     VM_HEADER$
        16 005077   000025 036003                    ADLQ    21,DU
        16 005100   200372 756100                    STQ     PTR2$,,AUTO
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:314  
        16 005101   000214 236000 17                 LDQ     140
        16 005102   200371 756100                    STQ     PTR1$,,AUTO
        16 005103   005646 701000 16                 TSX1    REREAD$CMD
        16 005104   005440 702000 16                 TSX2    RET

     2149    22757    4                   CMD_RTO$, %NO# ) ALTRET(RET);
     2150    22758    4            END;

     2151    22759    3            CALL REPLACE$ADDR (VM_HEADER.REPLY_TO$, %VM_TYPE_RTO) ALTRET(E_ALLOCATE);

  22759 16 005105   000070 236000 17                 LDQ     56
        16 005106   200372 756100                    STQ     PTR2$,,AUTO
        16 005107   000000 236000 xsym               LDQ     VM_HEADER$
        16 005110   000025 036003                    ADLQ    21,DU
        16 005111   200371 756100                    STQ     PTR1$,,AUTO
        16 005112   006411 701000 16                 TSX1    REPLACE$ADDR
        16 005113   005442 702000 16                 TSX2    E_ALLOCATE
        16 005114   005440 710000 16                 TRA     RET

     2152    22760        %SPACE 6;

     2153    22761        /* Send command */
     2154    22762    3        CASE (%CMD_SEND);

     2155    22763    3            CALL DO$SEND ALTRET(ALT);

  22763 16 005115   007020 701000 16                 TSX1    DO$SEND
        16 005116   005446 702000 16                 TSX2    ALT
        16 005117   005440 710000 16                 TRA     RET

     2156    22764        %SPACE 6;

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:315  
     2157    22765        /* Signed command */
     2158    22766    3        CASE (%CMD_SIGNED);

     2159    22767    3            CALL REREAD$CHK

  22767 16 005120   005621 701000 16                 TSX1    REREAD$CHK
        16 005121   005123 702000 16                 TSX2    s:22769
        16 005122   005150 710000 16                 TRA     s:22777

     2160    22768    4            WHENALTRETURN DO;

     2161    22769    4                 P_PCB.NOLEADBLANKS = %YES#;

  22769 16 005123   100000 236007                    LDQ     32768,DL
        16 005124   000005 256000 11                 ORSQ    P_PCB+5

     2162    22770    4                 CALL REREAD$CMD (VN_SIGNED, VM_HEADER.SIGNED$, E_CMD_SIGNED_PROMPT,

  22770 16 005125   000057 236000 17                 LDQ     47
        16 005126   200375 756100                    STQ     @NODE$+1,,AUTO
        16 005127   200015 630500                    EPPR0   CMD_SIGNED$,,AUTO
        16 005130   200374 450500                    STP0    REC$,,AUTO
        16 005131   000215 236000 17                 LDQ     141
        16 005132   200373 756100                    STQ     PREV_ENT$,,AUTO
        16 005133   000000 236000 xsym               LDQ     VM_HEADER$
        16 005134   000027 036003                    ADLQ    23,DU
        16 005135   200372 756100                    STQ     PTR2$,,AUTO
        16 005136   000216 236000 17                 LDQ     142
        16 005137   200371 756100                    STQ     PTR1$,,AUTO
        16 005140   005646 701000 16                 TSX1    REREAD$CMD
        16 005141   005143 702000 16                 TSX2    s:22772
        16 005142   005146 710000 16                 TRA     s:22775

     2163    22771    5                   CMD_SIGNED$, %YES# ) WHENALTRETURN DO;

     2164    22772    5                      P_PCB.NOLEADBLANKS = %NO#;

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:316  
  22772 16 005143   000103 236000 17                 LDQ     67
        16 005144   000005 356000 11                 ANSQ    P_PCB+5

     2165    22773    5                      GOTO RET;

  22773 16 005145   005440 710000 16                 TRA     RET

     2166    22774    5                 END;
     2167    22775    4                 P_PCB.NOLEADBLANKS = %NO#;

  22775 16 005146   000103 236000 17                 LDQ     67
        16 005147   000005 356000 11                 ANSQ    P_PCB+5

     2168    22776    4            END;

     2169    22777    3            CALL REPLACE$FLD (VM_HEADER.SIGNED$) ALTRET(E_ALLOCATE);

  22777 16 005150   000000 236000 xsym               LDQ     VM_HEADER$
        16 005151   000027 036003                    ADLQ    23,DU
        16 005152   200371 756100                    STQ     PTR1$,,AUTO
        16 005153   006262 701000 16                 TSX1    REPLACE$FLD
        16 005154   005442 702000 16                 TSX2    E_ALLOCATE
        16 005155   005440 710000 16                 TRA     RET

     2170    22778        %SPACE 6;

     2171    22779        /* SiteInfo command: privileged */
     2172    22780    3        CASE (%CMD_SITEINFO);

     2173    22781    3            VM_SITE = '0'B;

  22781 16 005156   000000 100400                    MLR     fill='000'O
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:317  
        16 005157   000017 000001 17                 ADSC9   15                       cn=0,n=1
        16 005160   000522 000340 11                 ADSC9   VM_SITE                  cn=0,n=224

     2174    22782    3            VM_SITE.ORIGIN = OUT$ -> P$B.SUBLK$(0) -> P$S.TEXT;

  22782 16 005161   000003 471500                    LDP1    3,,PR0
        16 005162   100004 236100                    LDQ     4,,PR1
        16 005163   000033 772000                    QRL     27
        16 005164   000000 620006                    EAX0    0,QL
        16 005165   040000 100540                    MLR     fill='040'O
        16 005166   100004 200010                    ADSC9   4,,PR1                   cn=1,n=*X0
        16 005167   000524 000010 11                 ADSC9   VM_SITE+2                cn=0,n=8

     2175    22783    3            VM_SITE.NUM_SITES = OUT$ -> P$B.NSUBLKS - 1;

  22783 16 005170   000001 236100                    LDQ     1,,PR0
        16 005171   000022 772000                    QRL     18
        16 005172   000001 136007                    SBLQ    1,DL
        16 005173   000523 756000 11                 STQ     VM_SITE+1

     2176    22784    3            IF VM_SITE.NUM_SITES > 26

  22784 16 005174   000033 116007                    CMPQ    27,DL
        16 005175   005206 602000 16                 TNC     s:22790

     2177    22785    4            THEN DO;

     2178    22786    4                 CALL VMA$ERRMSG (E_TOOMANYSITES);

  22786 16 005176   000217 630400 17                 EPPR0   143
        16 005177   000003 631400 17                 EPPR1   3
        16 005200   000000 701000 xent               TSX1    VMA$ERRMSG
        16 005201   000000 011000                    NOP     0

     2179    22787    4                 ERR_FLAG = %YES#;

  22787 16 005202   400000 236003                    LDQ     -131072,DU
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:318  
        16 005203   200021 756100                    STQ     ERR_FLAG,,AUTO

     2180    22788    4                 VM_SITE.NUM_SITES = 26;

  22788 16 005204   000032 235007                    LDA     26,DL
        16 005205   000523 755000 11                 STA     VM_SITE+1

     2181    22789    4            END;

     2182    22790    4            DO I = 0 TO VM_SITE.NUM_SITES - 1;

  22790 16 005206   200134 450100                    STZ     I,,AUTO
        16 005207   005225 710000 16                 TRA     s:22792+1

     2183    22791    4                 VM_SITE.RECEIVER_SITE(I) = P$B.SUBLK$(I+1) -> P$S.TEXT;

  22791 16 005210   200134 235100                    LDA     I,,AUTO
        16 005211   000001 735000                    ALS     1
        16 005212   200030 470500                    LDP0    BLK$,,AUTO
        16 005213   200134 720100                    LXL0    I,,AUTO
        16 005214   000004 471510                    LDP1    4,X0,PR0
        16 005215   100004 236100                    LDQ     4,,PR1
        16 005216   000033 772000                    QRL     27
        16 005217   000002 735000                    ALS     2
        16 005220   000000 621006                    EAX1    0,QL
        16 005221   040005 100540                    MLR     fill='040'O
        16 005222   100004 200011                    ADSC9   4,,PR1                   cn=1,n=*X1
        16 005223   000526 000010 11                 ADSC9   VM_SITE+4,A              cn=0,n=8

     2184    22792    4            END;

  22792 16 005224   200134 054100                    AOS     I,,AUTO
        16 005225   200134 236100                    LDQ     I,,AUTO
        16 005226   005210 604000 16                 TMI     s:22791
        16 005227   000523 116000 11                 CMPQ    VM_SITE+1
        16 005230   005210 602000 16                 TNC     s:22791

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:319  
     2185    22793    3            CALL VMD$PUT_SITE (VM_SITE,M$WORK_NUM)

  22793 16 005231   000220 630400 17                 EPPR0   144
        16 005232   000000 631400 17                 EPPR1   0
        16 005233   000000 701000 xent               TSX1    VMD$PUT_SITE
        16 005234   005236 702000 16                 TSX2    s:22795
        16 005235   005240 710000 16                 TRA     s:22796

     2186    22794    4            WHENALTRETURN DO;

     2187    22795    4                 CALL MON_ERR;

  22795 16 005236   002075 701000 16                 TSX1    MON_ERR
        16 005237   000000 011000                    NOP     0

     2188    22796    4            END;

  22796 16 005240   005440 710000 16                 TRA     RET

     2189    22797        %SPACE 6;

     2190    22798        /* Subject command */
     2191    22799    3        CASE (%CMD_SUBJECT);

     2192    22800    3            CALL REREAD$CHK

  22800 16 005241   005621 701000 16                 TSX1    REREAD$CHK
        16 005242   005244 702000 16                 TSX2    s:22802
        16 005243   005261 710000 16                 TRA     s:22805

     2193    22801    4            WHENALTRETURN DO;

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:320  
     2194    22802    4                CALL REREAD$CMD (VN_SUBJECT, VM_HEADER.SUBJECT$, E_CMD_SUBJECT_PROMPT,

  22802 16 005244   000057 236000 17                 LDQ     47
        16 005245   200375 756100                    STQ     @NODE$+1,,AUTO
        16 005246   200006 630500                    EPPR0   CMD_SUBJECT$,,AUTO
        16 005247   200374 450500                    STP0    REC$,,AUTO
        16 005250   000075 236000 17                 LDQ     61
        16 005251   200373 756100                    STQ     PREV_ENT$,,AUTO
        16 005252   000000 236000 xsym               LDQ     VM_HEADER$
        16 005253   000030 036003                    ADLQ    24,DU
        16 005254   200372 756100                    STQ     PTR2$,,AUTO
        16 005255   000076 236000 17                 LDQ     62
        16 005256   200371 756100                    STQ     PTR1$,,AUTO
        16 005257   005646 701000 16                 TSX1    REREAD$CMD
        16 005260   005440 702000 16                 TSX2    RET

     2195    22803    4                   CMD_SUBJECT$, %YES# ) ALTRET(RET);
     2196    22804    4            END;

     2197    22805    3            CALL REPLACE$FLD (VM_HEADER.SUBJECT$) ALTRET(E_ALLOCATE);

  22805 16 005261   000000 236000 xsym               LDQ     VM_HEADER$
        16 005262   000030 036003                    ADLQ    24,DU
        16 005263   200371 756100                    STQ     PTR1$,,AUTO
        16 005264   006262 701000 16                 TSX1    REPLACE$FLD
        16 005265   005442 702000 16                 TSX2    E_ALLOCATE

     2198    22806    3            IF VM_HEADER.SUBJECT$ = ADDR(NIL) AND NOT PROC_OPTIONS

  22806 16 005266   000000 470400 xsym               LDP0    VM_HEADER$
        16 005267   000030 236100                    LDQ     24,,PR0
        16 005270   000032 116000 17                 CMPQ    26
        16 005271   005440 601000 16                 TNZ     RET
        16 005272   200023 234100                    SZN     PROC_OPTIONS,,AUTO
        16 005273   005440 604000 16                 TMI     RET

     2199    22807    3            THEN /* avoid Subject prompt if null subject is provided */
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:321  
     2200    22808    3                CALL ALLOC$TEXTC (VM_HEADER.SUBJECT$, 1, BLANK_CHAR) ALTRET(E_ALLOCATE
             22808                          );

  22808 16 005274   000222 237000 17                 LDAQ    146
        16 005275   200440 757100                    STAQ    @FLD$+1,,AUTO
        16 005276   000000 236000 xsym               LDQ     VM_HEADER$
        16 005277   000030 036003                    ADLQ    24,DU
        16 005300   200437 756100                    STQ     NEW_TYPE+2,,AUTO
        16 005301   006011 701000 16                 TSX1    ALLOC$TEXTC
        16 005302   005442 702000 16                 TSX2    E_ALLOCATE
        16 005303   005440 710000 16                 TRA     RET

     2201    22809        %SPACE 6;

     2202    22810        /* To command */
     2203    22811    3        CASE (%CMD_TO);

     2204    22812    3            CALL REREAD$CHK

  22812 16 005304   005621 701000 16                 TSX1    REREAD$CHK
        16 005305   005307 702000 16                 TSX2    s:22814
        16 005306   005324 710000 16                 TRA     s:22817

     2205    22813    4            WHENALTRETURN DO;

     2206    22814    4                 CALL REREAD$CMD (VN_TO_, VM_HEADER.TO$, E_CMD_TO_PROMPT,

  22814 16 005307   000052 236000 17                 LDQ     42
        16 005310   200375 756100                    STQ     @NODE$+1,,AUTO
        16 005311   200005 630500                    EPPR0   CMD_TO$,,AUTO
        16 005312   200374 450500                    STP0    REC$,,AUTO
        16 005313   000224 236000 17                 LDQ     148
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:322  
        16 005314   200373 756100                    STQ     PREV_ENT$,,AUTO
        16 005315   000000 236000 xsym               LDQ     VM_HEADER$
        16 005316   000031 036003                    ADLQ    25,DU
        16 005317   200372 756100                    STQ     PTR2$,,AUTO
        16 005320   000225 236000 17                 LDQ     149
        16 005321   200371 756100                    STQ     PTR1$,,AUTO
        16 005322   005646 701000 16                 TSX1    REREAD$CMD
        16 005323   005440 702000 16                 TSX2    RET

     2207    22815    4                   CMD_TO$, %NO# ) ALTRET(RET);
     2208    22816    4            END;

     2209    22817    3            CALL REPLACE$ADDR (VM_HEADER.TO$, %VM_TYPE_TO) ALTRET(E_ALLOCATE);

  22817 16 005324   000227 236000 17                 LDQ     151
        16 005325   200372 756100                    STQ     PTR2$,,AUTO
        16 005326   000000 236000 xsym               LDQ     VM_HEADER$
        16 005327   000031 036003                    ADLQ    25,DU
        16 005330   200371 756100                    STQ     PTR1$,,AUTO
        16 005331   006411 701000 16                 TSX1    REPLACE$ADDR
        16 005332   005442 702000 16                 TSX2    E_ALLOCATE
        16 005333   005440 710000 16                 TRA     RET

     2210    22818        %SPACE 6;

     2211    22819    3        CASE (%CMD_TRACE);

     2212    22820    3            IF OUT$ -> P$B.NSUBLKS = 0

  22820 16 005334   000001 222100                    LDX2    1,,PR0
        16 005335   005340 601000 16                 TNZ     s:22825

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:323  
     2213    22821    4            THEN DO;

     2214    22822    4                 SIZE = 0;

  22822 16 005336   200133 450100                    STZ     SIZE,,AUTO

     2215    22823    4            END;

  22823 16 005337   005355 710000 16                 TRA     s:22831

     2216    22824    4            ELSE DO;

     2217    22825    4                 BLK$ = OUT$ -> P$B.SUBLK$(0);

  22825 16 005340   000003 236100                    LDQ     3,,PR0
        16 005341   200030 756100                    STQ     BLK$,,AUTO

     2218    22826    4                 SIZE = P_PCB.NCHARS - P$B.CPOS;

  22826 16 005342   200030 471500                    LDP1    BLK$,,AUTO
        16 005343   000011 236000 11                 LDQ     P_PCB+9
        16 005344   100002 136100                    SBLQ    2,,PR1
        16 005345   200133 756100                    STQ     SIZE,,AUTO

     2219    22827    4                 IF SIZE > 0

  22827 16 005346   005355 604400 16                 TMOZ    s:22831

     2220    22828    4                 THEN
     2221    22829    4                      VM_BODYREC.VALUE.DATA = SUBSTR (P_PCB$TEXT, P$B.CPOS, SIZE);

  22829 16 005347   100002 235100                    LDA     2,,PR1
        16 005350   000000 473400 11                 LDP3    P_PCB
        16 005351   000000 620006                    EAX0    0,QL
        16 005352   040000 100545                    MLR     fill='040'O
        16 005353   300000 000010                    ADSC9   0,A,PR3                  cn=0,n=*X0
        16 005354   000403 000454 11                 ADSC9   VM_BODYREC+2             cn=0,n=300
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:324  

     2222    22830    4            END;

     2223    22831    3            VM_BODYREC.VALUE.COUNT = SIZE;

  22831 16 005355   200133 235100                    LDA     SIZE,,AUTO
        16 005356   000402 755000 11                 STA     VM_BODYREC+1

     2224    22832    3            CALL VMD$PUT_TRACE (0, M$WORK_NUM, VM_HEADER.NUM_TRACE_RECORDS,

  22832 16 005357   000110 237000 17                 LDAQ    72
        16 005360   200454 757100                    STAQ    P2$+5,,AUTO
        16 005361   200133 631500                    EPPR1   SIZE,,AUTO
        16 005362   200453 451500                    STP1    P2$+4,,AUTO
        16 005363   000000 236000 xsym               LDQ     VM_HEADER$
        16 005364   000034 036003                    ADLQ    28,DU
        16 005365   200452 756100                    STQ     P2$+3,,AUTO
        16 005366   000052 237000 17                 LDAQ    42
        16 005367   200450 757100                    STAQ    P2$+1,,AUTO
        16 005370   200450 630500                    EPPR0   P2$+1,,AUTO
        16 005371   000037 631400 17                 EPPR1   31
        16 005372   000000 701000 xent               TSX1    VMD$PUT_TRACE
        16 005373   005401 702000 16                 TSX2    s:22838

     2225    22833    3              SIZE, 0, VM_BODYREC)
     2226    22834    4            WHENRETURN DO;

     2227    22835    4                 VM_HEADER.NUM_TRACE_RECORDS = VM_HEADER.NUM_TRACE_RECORDS + 1;

  22835 16 005374   000000 470400 xsym               LDP0    VM_HEADER$
        16 005375   000034 235100                    LDA     28,,PR0
        16 005376   000001 035007                    ADLA    1,DL
        16 005377   000034 755100                    STA     28,,PR0

     2228    22836    4            END;

  22836 16 005400   005403 710000 16                 TRA     s:22839
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:325  

     2229    22837    4            WHENALTRETURN DO;

     2230    22838    4                 CALL MON_ERR;

  22838 16 005401   002075 701000 16                 TSX1    MON_ERR
        16 005402   000000 011000                    NOP     0

     2231    22839    4            END;

  22839 16 005403   005440 710000 16                 TRA     RET

     2232    22840        %SPACE 6;

     2233    22841        /*   TYPE:    priviledged command                             */
     2234    22842    3        CASE (%CMD_TYPE);

     2235    22843    3            VM_HEADER.STATUS = '0'B;

  22843 16 005404   000000 471400 xsym               LDP1    VM_HEADER$
        16 005405   100012 450100                    STZ     10,,PR1

     2236    22844    4            DO CASE (OUT$ -> P$B.SUBLK$(0) -> P$B.CODE);

  22844 16 005406   200027 470500                    LDP0    OUT$,,AUTO
        16 005407   000003 473500                    LDP3    3,,PR0
        16 005410   300000 720100                    LXL0    0,,PR3
        16 005411   000006 100003                    CMPX0   6,DU
        16 005412   005414 602010 16                 TNC     s:22844+6,X0
        16 005413   005440 710000 16                 TRA     RET
        16 005414   005440 710000 16                 TRA     RET
        16 005415   005422 710000 16                 TRA     s:22845
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:326  
        16 005416   005425 710000 16                 TRA     s:22846
        16 005417   005436 710000 16                 TRA     s:22849
        16 005420   005433 710000 16                 TRA     s:22848
        16 005421   005430 710000 16                 TRA     s:22847

     2237    22845    4            CASE (%TYPE_ERR); VM_HEADER.STATUS.ERR = %YES#;

  22845 16 005422   400000 236003                    LDQ     -131072,DU
        16 005423   100012 256100                    ORSQ    10,,PR1
        16 005424   005440 710000 16                 TRA     RET

     2238    22846    4            CASE (%TYPE_ACK); VM_HEADER.STATUS.ACK = %YES#;

  22846 16 005425   100000 236003                    LDQ     32768,DU
        16 005426   100012 256100                    ORSQ    10,,PR1
        16 005427   005440 710000 16                 TRA     RET

     2239    22847    4            CASE (%TYPE_RRACK); VM_HEADER.STATUS.RRACK = %YES#;

  22847 16 005430   020000 236007                    LDQ     8192,DL
        16 005431   100012 256100                    ORSQ    10,,PR1
        16 005432   005440 710000 16                 TRA     RET

     2240    22848    4            CASE (%TYPE_ANSWER); VM_HEADER.STATUS.ANSWER = %YES#;

  22848 16 005433   200000 236003                    LDQ     65536,DU
        16 005434   100012 256100                    ORSQ    10,,PR1
        16 005435   005440 710000 16                 TRA     RET

     2241    22849    4            CASE (%TYPE_DELIVERY); VM_HEADER.STATUS.DELIVERY = %YES#;

  22849 16 005436   000002 236003                    LDQ     2,DU
        16 005437   100012 256100                    ORSQ    10,,PR1

     2242    22850    4            END;

     2243    22851        %SPACE 6;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:327  

     2244    22852    3        END CMD_CASE;

     2245    22853
     2246    22854    2   RET: RETURN;

  22854 16 005440   200366 221300       RET          LDX1  ! SAVE_BREAK_TYPE+1,,AUTO
        16 005441   000001 702211                    TSX2  ! 1,X1

     2247    22855        /**/
     2248    22856    2   E_ALLOCATE:
     2249    22857    2        CALL VMA$ERRMSG (MCB.ERR);

  22857 16 005442   000104 630400 17    E_ALLOCATE   EPPR0   68
        16 005443   000003 631400 17                 EPPR1   3
        16 005444   000000 701000 xent               TSX1    VMA$ERRMSG
        16 005445   000000 011000                    NOP     0

     2250    22858        /**/
     2251    22859    2   ALT: ALTRETURN;

  22859 16 005446   200366 221300       ALT          LDX1  ! SAVE_BREAK_TYPE+1,,AUTO
        16 005447   000000 702211                    TSX2  ! 0,X1

     2252    22860
     2253    22861    2   END PROCESS_CMD;
     2254    22862        %EJECT;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:328  
     2255    22863        /********************************************************************/
     2256    22864        /*I*
     2257    22865             NAME: GET$ADDLIST
     2258    22866             DESCRIPTION: This routine will format the address list for
     2259    22867                            the approiate record
     2260    22868        */
     2261    22869        /********************************************************************/
     2262    22870
     2263    22871    1   GET$ADDLIST: PROC (VM_TYPE) ALTRET;

  22871 16 005450   200374 741300       GET$ADDLIST  STX1  ! REC$,,AUTO

     2264    22872
     2265    22873        %VM_UADDRESS (NAME=VM$UADDRESS,STCLASS="BASED(TMP$)");
     2266    22910        %VM_RADDRESS (NAME=VM$RADDRESS, STCLASS="BASED(TMP$)");
     2267    22945    2   DCL VM_TYPE SBIN;
     2268    22946
     2269    22947    2   DCL I SBIN;
     2270    22948    2   DCL TMP$ PTR;
     2271    22949        /*
     2272    22950             ***** Convert parse tree into address list ...
     2273    22951        */
     2274    22952    2        CALL VMA$ADDRESS (OUT$,USER_NAME,VM_SEARCH_INFO) ALTRET(E_ADDRESS);

  22952 16 005451   000042 236000 17                 LDQ     34
        16 005452   200452 756100                    STQ     P2$+3,,AUTO
        16 005453   200032 630500                    EPPR0   USER_NAME,,AUTO
        16 005454   200451 450500                    STP0    P2$+2,,AUTO
        16 005455   200027 631500                    EPPR1   OUT$,,AUTO
        16 005456   200450 451500                    STP1    P2$+1,,AUTO
        16 005457   200450 630500                    EPPR0   P2$+1,,AUTO
        16 005460   000074 631400 17                 EPPR1   60
        16 005461   000000 701000 xent               TSX1    VMA$ADDRESS
        16 005462   005524 702000 16                 TSX2    E_ADDRESS

     2275    22953        /*
     2276    22954           Blank out the passwords... they're not needed by MAILMAN
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:329  
     2277    22955        */
     2278    22956    2        TMP$ = VM_ADD_HEAD.HEAD$;

  22956 16 005463   000000 470400 xsym               LDP0    VM_ADDLIST$
        16 005464   000003 236100                    LDQ     3,,PR0
        16 005465   200377 756100                    STQ     TMP$,,AUTO

     2279    22957    3        DO I = 1 TO VM_ADD_HEAD.NUM_ENTRIES;

  22957 16 005466   000001 235007                    LDA     1,DL
        16 005467   200376 755100                    STA     I,,AUTO
        16 005470   005504 710000 16                 TRA     s:22962+1

     2280    22958    3             IF VM$RADDRESS.TYPE = %VM_ADD_RESOLVED

  22958 16 005471   200377 470500                    LDP0    TMP$,,AUTO
        16 005472   000002 236100                    LDQ     2,,PR0
        16 005473   000777 376003                    ANQ     511,DU
        16 005474   000001 116003                    CMPQ    1,DU
        16 005475   005501 601000 16                 TNZ     s:22961

     2281    22959    3             THEN
     2282    22960    3                  VM$RADDRESS.PASS = ' ';

  22960 16 005476   040100 100400                    MLR     fill='040'O
        16 005477   000064 000001 17                 ADSC9   52                       cn=0,n=1
        16 005500   000015 600010                    ADSC9   13,,PR0                  cn=3,n=8

     2283    22961    3             TMP$ = VM$RADDRESS.NEXT$;

  22961 16 005501   000000 236100                    LDQ     0,,PR0
        16 005502   200377 756100                    STQ     TMP$,,AUTO

     2284    22962    3        END;

  22962 16 005503   200376 054100                    AOS     I,,AUTO
        16 005504   000000 470400 xsym               LDP0    VM_ADDLIST$
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:330  
        16 005505   000001 236100                    LDQ     1,,PR0
        16 005506   005471 604000 16                 TMI     s:22958
        16 005507   200376 116100                    CMPQ    I,,AUTO
        16 005510   005471 605000 16                 TPL     s:22958

     2285    22963        /*
     2286    22964             ***** Now write this record into the message file ...
     2287    22965        */
     2288    22966    2        CALL VMA$PUT_ADD_RECORD (VM_TYPE,VM_ADDLIST_,M$WORK_NUM) ALTRET(E_ADDRESS);

  22966 16 005511   000053 236000 17                 LDQ     43
        16 005512   200452 756100                    STQ     P2$+3,,AUTO
        16 005513   000005 236000 17                 LDQ     5
        16 005514   200375 235100                    LDA     @VM_TYPE,,AUTO
        16 005515   200450 757100                    STAQ    P2$+1,,AUTO
        16 005516   200450 630500                    EPPR0   P2$+1,,AUTO
        16 005517   000074 631400 17                 EPPR1   60
        16 005520   000000 701000 xent               TSX1    VMA$PUT_ADD_RECORD
        16 005521   005524 702000 16                 TSX2    E_ADDRESS

     2289    22967    2        RETURN;

  22967 16 005522   200374 221300                    LDX1  ! REC$,,AUTO
        16 005523   000001 702211                    TSX2  ! 1,X1

     2290    22968        /**/
     2291    22969    2   E_ADDRESS:
     2292    22970        /*
     2293    22971          **** If address error flag isn't set, this is a PMME error, so abort.
     2294    22972        */
     2295    22973    2        IF NOT VM_ADD_HEAD.FLAGS.ERR#

  22973 16 005524   000000 470400 xsym  E_ADDRESS    LDP0    VM_ADDLIST$
        16 005525   000002 234100                    SZN     2,,PR0
        16 005526   005534 604000 16                 TMI     s:22981

     2296    22974    3        THEN DO;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:331  

     2297    22975    3             CALL MON_ERR;

  22975 16 005527   002075 701000 16                 TSX1    MON_ERR
        16 005530   000000 011000                    NOP     0

     2298    22976    3             CALL M$ERR (NOTSENT_ERR);

  22976 16 005531   001122 630400 13                 EPPR0   NOTSENT_ERR
        16 005532   000002 713400                    CLIMB   err
        16 005533   400400 401760                    pmme    nvectors=2

     2299    22977    3        END;

     2300    22978        /*
     2301    22979          **** Make a pass through the address list and write out the bad addresses.
     2302    22980        */
     2303    22981    2        TMP$ = VM_ADD_HEAD.HEAD$;

  22981 16 005534   000000 470400 xsym               LDP0    VM_ADDLIST$
        16 005535   000003 236100                    LDQ     3,,PR0
        16 005536   200377 756100                    STQ     TMP$,,AUTO

     2304    22982    3        DO I = 1 TO VM_ADD_HEAD.NUM_ENTRIES;

  22982 16 005537   000001 235007                    LDA     1,DL
        16 005540   200376 755100                    STA     I,,AUTO
        16 005541   005610 710000 16                 TRA     s:22994+1

     2305    22983    3             IF VM$UADDRESS.TYPE = %VM_ADD_UNRESOLVED AND

  22983 16 005542   200377 470500                    LDP0    TMP$,,AUTO
        16 005543   000002 236100                    LDQ     2,,PR0
        16 005544   000777 376003                    ANQ     511,DU
        16 005545   000002 116003                    CMPQ    2,DU
        16 005546   005604 601000 16                 TNZ     s:22993
        16 005547   000002 234100                    SZN     2,,PR0
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:332  
        16 005550   005604 605000 16                 TPL     s:22993

     2306    22984    4               VM$UADDRESS.FLAGS.UNDEF# THEN DO;

     2307    22985    4                  if VM$UADDRESS.USER_NAME.COUNT > 31 then

  22985 16 005551   000021 236100                    LDQ     17,,PR0
        16 005552   000777 376007                    ANQ     511,DL
        16 005553   000040 116007                    CMPQ    32,DL
        16 005554   005562 602000 16                 TNC     s:22990

     2308    22986    5                  do; /**  Textc too long for M$ERRMSG  **/

     2309    22987    5                       VM$UADDRESS.USER_NAME.COUNT = 31;

  22987 16 005555   000037 236007                    LDQ     31,DL
        16 005556   000021 552104                    STBQ    17,'04'O,PR0

     2310    22988    5                       substr(VM$UADDRESS.USER_NAME.TEXT,28) = '...';

  22988 16 005557   040100 100400                    MLR     fill='040'O
        16 005560   001537 000003 13                 ADSC9   E_PASTDEFER+7            cn=0,n=3
        16 005561   000031 000254                    ADSC9   25,,PR0                  cn=0,n=172

     2311    22989    5                  end;

     2312    22990    4                  CALL VMA$ERRMSG (E_BADADDRESS,,

  22990 16 005562   000021 720100                    LXL0    17,,PR0
        16 005563   000777 360003                    ANX0    511,DU
        16 005564   000001 621010                    EAX1    1,X0
        16 005565   000000 635011                    EAA     0,X1
        16 005566   000002 771000                    ARL     2
        16 005567   000140 135007                    SBLA    96,DL
        16 005570   200377 236100                    LDQ     TMP$,,AUTO
        16 005571   000230 036000 17                 ADLQ    152
        16 005572   200450 757100                    STAQ    P2$+1,,AUTO
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:333  
        16 005573   200450 631500                    EPPR1   P2$+1,,AUTO
        16 005574   200454 451500                    STP1    P2$+5,,AUTO
        16 005575   000032 236000 17                 LDQ     26
        16 005576   000231 235000 17                 LDA     153
        16 005577   200452 757100                    STAQ    P2$+3,,AUTO
        16 005600   200452 630500                    EPPR0   P2$+3,,AUTO
        16 005601   000074 631400 17                 EPPR1   60
        16 005602   000000 701000 xent               TSX1    VMA$ERRMSG
        16 005603   000000 011000                    NOP     0

     2313    22991    4                    VECTOR(ADDR(VM$UADDRESS.USER_NAME)->X$STRING));
     2314    22992    4             END;

     2315    22993    3             TMP$ = VM$UADDRESS.NEXT$;

  22993 16 005604   200377 470500                    LDP0    TMP$,,AUTO
        16 005605   000000 236100                    LDQ     0,,PR0
        16 005606   200377 756100                    STQ     TMP$,,AUTO

     2316    22994    3        END;

  22994 16 005607   200376 054100                    AOS     I,,AUTO
        16 005610   000000 470400 xsym               LDP0    VM_ADDLIST$
        16 005611   000001 236100                    LDQ     1,,PR0
        16 005612   005542 604000 16                 TMI     s:22983
        16 005613   200376 116100                    CMPQ    I,,AUTO
        16 005614   005542 605000 16                 TPL     s:22983

     2317    22995    2        ERR_FLAG = %YES#;

  22995 16 005615   400000 236003                    LDQ     -131072,DU
        16 005616   200021 756100                    STQ     ERR_FLAG,,AUTO

     2318    22996    2        ALTRETURN;

  22996 16 005617   200374 221300                    LDX1  ! REC$,,AUTO
        16 005620   000000 702211                    TSX2  ! 0,X1
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:334  

     2319    22997
     2320    22998    2   END GET$ADDLIST;
     2321    22999        %EJECT;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:335  
     2322    23000        /********************************************************************/
     2323    23001        /*I*
     2324    23002             NAME: REREAD$CHK
     2325    23003             PURPOSE: To altreturn if an option needs to be reread.
     2326    23004             DESCRIPTION: This is a separate subroutine from REREAD$CMD so
     2327    23005                          that the full parameter list for that call is only
     2328    23006                          built when it's really needed.
     2329    23007        */
     2330    23008        /********************************************************************/
     2331    23009    1   REREAD$CHK: PROC ALTRET;

  23009 16 005621   200370 741300       REREAD$CHK   STX1  ! SAVE_BREAK_TYPE+3,,AUTO

     2332    23010
     2333    23011    2        IF NOT DCBADDR(CMD_DCB) -> F$DCB.DDEV.IC#

  23011 16 005622   000054 470400 17                 LDP0    44
        16 005623   000000 471500                    LDP1    0,,PR0
        16 005624   000067 720000 11                 LXL0    CMD_DCB
        16 005625   100000 473510                    LDP3    0,X0,PR1
        16 005626   300004 236100                    LDQ     4,,PR3
        16 005627   100000 316007                    CANQ    32768,DL
        16 005630   005633 600000 16                 TZE     s:23014
        16 005631   200023 234100                    SZN     PROC_OPTIONS,,AUTO
        16 005632   005634 604000 16                 TMI     s:23015

     2334    23012    2          OR NOT PROC_OPTIONS
     2335    23013    2        THEN /* only reread when input is from terminal, at Option prompt */
     2336    23014    2             RETURN;

  23014 16 005633   000001 702211                    TSX2  ! 1,X1

     2337    23015    2        IF OUT$-> P$B.NSUBLKS = 0

  23015 16 005634   200027 474500                    LDP4    OUT$,,AUTO
        16 005635   400001 222100                    LDX2    1,,PR4
        16 005636   005640 601000 16                 TNZ     s:23018
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:336  

     2338    23016    2        THEN /* reread if no field value is specified */
     2339    23017    2             ALTRETURN;

  23017 16 005637   000000 702211                    TSX2  ! 0,X1

     2340    23018    2        IF OUT$ -> P$B.SUBLK$(0) -> P$B.CPOS = P_PCB.NCHARS

  23018 16 005640   400003 475500                    LDP5    3,,PR4
        16 005641   500002 236100                    LDQ     2,,PR5
        16 005642   000011 116000 11                 CMPQ    P_PCB+9
        16 005643   005645 601000 16                 TNZ     s:23022

     2341    23019    2        THEN   /* treat null string same as no string */
     2342    23020    2             ALTRETURN;

  23020 16 005644   000000 702211                    TSX2  ! 0,X1

     2343    23021
     2344    23022    2        RETURN;

  23022 16 005645   000001 702211                    TSX2  ! 1,X1

     2345    23023
     2346    23024    2   END REREAD$CHK;
     2347    23025        %EJECT;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:337  
     2348    23026        /********************************************************************/
     2349    23027        /*I*
     2350    23028             NAME: REREAD$CMD
     2351    23029             PURPOSE: Performs a reread using the specified parameters.
     2352    23030        */
     2353    23031        /********************************************************************/
     2354    23032    1   REREAD$CMD: PROC(CMD_PROMPT, TEXT$, PROMPT_CODE, NODE$, ASIS)  ALTRET;

  23032 16 005646   200370 741300       REREAD$CMD   STX1  ! SAVE_BREAK_TYPE+3,,AUTO

     2355    23033
     2356    23034        %VLP_NAMEV( FPTN=CMD_PROMPT, STCLASS="");
     2357    23041    2   DCL TEXT$ PTR;                          /* Reread info. */
     2358    23042        %VLP_ERRCODE (FPTN=PROMPT_CODE, STCLASS="");
     2359    23087    2   DCL NODE$ PTR;
     2360    23088    2   DCL ASIS BIT(1);    /* don't strip leading comments if set */
     2361    23089
     2362    23090            %INIT_STR (STR=CMD_PROMPT, CODE=PROMPT_CODE, TEST=YES,
     2363    23091              VECT=CHANGE_PROMPT.PROMPT_);

  23098 16 005647   200371 470500                    LDP0    @CMD_PROMPT,,AUTO
        16 005650   000100 101500                    MRL     fill='000'O
        16 005651   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
        16 005652   200450 000002                    ADSC9   P2$+1,,AUTO              cn=0,n=2
        16 005653   200450 220100                    LDX0    P2$+1,,AUTO
        16 005654   040000 106540                    CMPC    fill='040'O
        16 005655   000000 200010                    ADSC9   0,,PR0                   cn=1,n=*X0
        16 005656   000064 000001 17                 ADSC9   52                       cn=0,n=1
        16 005657   005672 601000 16                 TNZ     s:23103

  23100 16 005660   000077 236000 17                 LDQ     63
        16 005661   200452 756100                    STQ     P2$+3,,AUTO
        16 005662   200371 236100                    LDQ     @CMD_PROMPT,,AUTO
        16 005663   200373 235100                    LDA     @PROMPT_CODE,,AUTO
        16 005664   200450 757100                    STAQ    P2$+1,,AUTO
        16 005665   200450 630500                    EPPR0   P2$+1,,AUTO
        16 005666   000074 631400 17                 EPPR1   60
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:338  
        16 005667   000000 701000 xent               TSX1    VMD$ERRMSG
        16 005670   000000 011000                    NOP     0

  23101 16 005671   005710 710000 16                 TRA     s:23114

  23103 16 005672   000100 101500                    MRL     fill='000'O
        16 005673   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
        16 005674   200450 000002                    ADSC9   P2$+1,,AUTO              cn=0,n=2
        16 005675   200450 220100                    LDX0    P2$+1,,AUTO
        16 005676   000100 101500                    MRL     fill='000'O
        16 005677   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
        16 005700   200451 000002                    ADSC9   P2$+2,,AUTO              cn=0,n=2
        16 005701   200451 222100                    LDX2    P2$+2,,AUTO
        16 005702   000000 635012                    EAA     0,X2
        16 005703   000002 771000                    ARL     2
        16 005704   000140 135007                    SBLA    96,DL
        16 005705   200371 236100                    LDQ     @CMD_PROMPT,,AUTO
        16 005706   200000 036007                    ADLQ    65536,DL
        16 005707   001104 757000 11                 STAQ    CHANGE_PROMPT+4

     2364    23114    2        CALL M$PROMPT (CHANGE_PROMPT);

  23114 16 005710   001100 630400 11                 EPPR0   CHANGE_PROMPT
        16 005711   160002 713400                    CLIMB   57346
        16 005712   401000 401760                    pmme    nvectors=3

     2365    23115    2        IF TEXT$ = ADDR(NIL)

  23115 16 005713   200372 470500                    LDP0    @TEXT$,,AUTO
        16 005714   000000 236100                    LDQ     0,,PR0
        16 005715   000032 116000 17                 CMPQ    26
        16 005716   005722 601000 16                 TNZ     s:23119

     2366    23116    2        THEN
     2367    23117    2             SET_INPUT.BUF_ = VECTOR(NIL);

  23117 16 005717   000232 237000 17                 LDAQ    154
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:339  
        16 005720   001116 757000 11                 STAQ    SET_INPUT+4
        16 005721   005736 710000 16                 TRA     s:23120

     2368    23118    2        ELSE
     2369    23119    2             SET_INPUT.BUF_ = VECTOR(TEXT$ -> X$STRING.TEXT);

  23119 16 005722   000000 471500                    LDP1    0,,PR0
        16 005723   000100 101500                    MRL     fill='000'O
        16 005724   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
        16 005725   200450 000002                    ADSC9   P2$+1,,AUTO              cn=0,n=2
        16 005726   200450 220100                    LDX0    P2$+1,,AUTO
        16 005727   000000 635010                    EAA     0,X0
        16 005730   000002 771000                    ARL     2
        16 005731   000140 135007                    SBLA    96,DL
        16 005732   200451 451500                    STP1    P2$+2,,AUTO
        16 005733   200451 236100                    LDQ     P2$+2,,AUTO
        16 005734   200000 036007                    ADLQ    65536,DL
        16 005735   001116 757000 11                 STAQ    SET_INPUT+4

     2370    23120    2        CALL M$SINPUT (SET_INPUT)

  23120 16 005736   001112 630400 11                 EPPR0   SET_INPUT
        16 005737   560013 713400                    CLIMB   alt,+57355
        16 005740   401000 401760                    pmme    nvectors=3
        16 005741   005743 702000 16                 TSX2    s:23122
        16 005742   005745 710000 16                 TRA     s:23124

     2371    23121    3        WHENALTRETURN DO;

     2372    23122    3             CALL MON_ERR;

  23122 16 005743   002075 701000 16                 TSX1    MON_ERR
        16 005744   000000 011000                    NOP     0

     2373    23123    3        END;

     2374    23124    2        IF ASIS
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:340  

  23124 16 005745   200375 470500                    LDP0    @ASIS,,AUTO
        16 005746   000000 066500                    CMPB    filb='0'B
        16 005747   000000 000001                    BDSC    0,,PR0                   by=0,bit=0,n=1
        16 005750   000017 000022 17                 BDSC    15                       by=0,bit=0,n=18
        16 005751   005754 600000 16                 TZE     s:23127

     2375    23125    2        THEN
     2376    23126    2             P_PCB.COMMENT.LEAD = '  ';

  23126 16 005752   001533 220000 13                 LDX0    E_PASTDEFER+3
        16 005753   000007 740000 11                 STX0    P_PCB+7

     2377    23127    2        READ_SI.V.DVBYTE.REREAD# = %YES#;

  23127 16 005754   100000 236003                    LDQ     32768,DU
        16 005755   001057 256000 11                 ORSQ    READ_SI+11

     2378    23128    3        DO NEVER

  23128 16 005756   005761 710000 16                 TRA     s:23131

     2379    23129    3   ERR:      CALL CMD_ERR ALTRET(ALT);

  23129 16 005757   002035 701000 16    ERR          TSX1    CMD_ERR
        16 005760   006007 702000 16                 TSX2    ALT

     2380    23130    3        END;

     2381    23131    2        CALL READ_CC ALTRET(ALT);

  23131 16 005761   002114 701000 16                 TSX1    READ_CC
        16 005762   006007 702000 16                 TSX2    ALT

     2382    23132    2        CALL XUR$GETCMD (NODE$->BSD, OUT$, CMD_PROMPT, CMD_BUF, SIZE) ALTRET(ERR);

  23132 16 005763   200374 470500                    LDP0    @NODE$,,AUTO
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:341  
        16 005764   000000 471500                    LDP1    0,,PR0
        16 005765   200133 633500                    EPPR3   SIZE,,AUTO
        16 005766   200454 453500                    STP3    P2$+5,,AUTO
        16 005767   000072 236000 17                 LDQ     58
        16 005770   200371 235100                    LDA     @CMD_PROMPT,,AUTO
        16 005771   200452 757100                    STAQ    P2$+3,,AUTO
        16 005772   200027 634500                    EPPR4   OUT$,,AUTO
        16 005773   200451 454500                    STP4    P2$+2,,AUTO
        16 005774   200450 451500                    STP1    P2$+1,,AUTO
        16 005775   200450 630500                    EPPR0   P2$+1,,AUTO
        16 005776   000035 631400 17                 EPPR1   29
        16 005777   000000 701000 xent               TSX1    XUR$GETCMD
        16 006000   005757 702000 16                 TSX2    ERR

     2383    23133    2        P_PCB.COMMENT.LEAD = ' "';

  23133 16 006001   001534 220000 13                 LDX0    E_PASTDEFER+4
        16 006002   000007 740000 11                 STX0    P_PCB+7

     2384    23134    2        READ_SI.V.DVBYTE.REREAD# = %NO#;

  23134 16 006003   000147 236000 17                 LDQ     103
        16 006004   001057 356000 11                 ANSQ    READ_SI+11

     2385    23135
     2386    23136    2        RETURN;

  23136 16 006005   200370 221300                    LDX1  ! SAVE_BREAK_TYPE+3,,AUTO
        16 006006   000001 702211                    TSX2  ! 1,X1

     2387    23137    2   ALT: ALTRETURN;

  23137 16 006007   200370 221300       ALT          LDX1  ! SAVE_BREAK_TYPE+3,,AUTO
        16 006010   000000 702211                    TSX2  ! 0,X1

     2388    23138
     2389    23139    2   END REREAD$CMD;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:342  
     2390    23140        %EJECT;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:343  
     2391    23141        /********************************************************************/
     2392    23142        /*I*
     2393    23143             NAME: ALLOC$TEXTC
     2394    23144             PURPOSE: To allocate a textc field in the header record.
     2395    23145        */
     2396    23146        /********************************************************************/
     2397    23147
     2398    23148    1   ALLOC$TEXTC: PROC (FLD$, SIZE, TEXT) ALTRET;

  23148 16 006011   200436 741300       ALLOC$TEXTC  STX1  ! NEW_TYPE+1,,AUTO

     2399    23149    2   DCL FLD$ PTR;
     2400    23150    2   DCL SIZE UBIN;
     2401    23151    2   DCL TEXT CHAR(511);
     2402    23152    2   DCL MAX_TEXTC_SIZE SBIN;
     2403    23153    2   DCL ALLOC_TEXTC BIT(1);
     2404    23154
     2405    23155    2        MAX_TEXTC_SIZE = 510;

  23155 16 006012   000776 235007                    LDA     510,DL
        16 006013   200442 755100                    STA     MAX_TEXTC_SIZE,,AUTO

     2406    23156    2        ALLOC_TEXTC = %YES#;

  23156 16 006014   400000 236003                    LDQ     -131072,DU
        16 006015   200443 756100                    STQ     ALLOC_TEXTC,,AUTO

     2407    23157    2        MCB.SIZE = SIZE + 1;

  23157 16 006016   200440 470500                    LDP0    @SIZE,,AUTO
        16 006017   000000 235100                    LDA     0,,PR0
        16 006020   000001 035007                    ADLA    1,DL
        16 006021   000745 755000 11                 STA     MCB+6

     2408    23158    2        GOTO COMMON;

  23158 16 006022   006027 710000 16                 TRA     COMMON
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:344  

     2409    23159
     2410    23160        /********************************************************************/
     2411    23161        /*I*
     2412    23162             NAME: ALLOC$RADDRESS
     2413    23163             PURPOSE: To allocate an RADDRESS block in the header record.
     2414    23164        */
     2415    23165        /********************************************************************/
     2416    23166
     2417    23167    2   ALLOC$RADDRESS: ENTRY (FLD$, SIZE) ALTRET;

  23167 16 006023   200436 741300       ALLOC$RADDR* STX1  ! NEW_TYPE+1,,AUTO

     2418    23168
     2419    23169    2        ALLOC_TEXTC = %NO#;

  23169 16 006024   200443 450100                    STZ     ALLOC_TEXTC,,AUTO

     2420    23170    2        MCB.SIZE = SIZEC(VM$RADDRESS);

  23170 16 006025   000120 235007                    LDA     80,DL
        16 006026   000745 755000 11                 STA     MCB+6

  23170 16 006027                       COMMON       null
     2421    23171
     2422    23172    2   COMMON: ;
     2423    23173    2        CALL VNS$BREAK_DISABLE;

  23173 16 006027   000017 631400 17                 EPPR1   15
        16 006030   000000 701000 xent               TSX1    VNS$BREAK_DISABLE
        16 006031   000000 011000                    NOP     0

     2424    23174    2        CALL ERASE$FLD (FLD$) ALTRET(ALT);

  23174 16 006032   200437 236100                    LDQ     @FLD$,,AUTO
        16 006033   200445 756100                    STQ     ALLOC_TEXTC+2,,AUTO
        16 006034   006204 701000 16                 TSX1    ERASE$FLD
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:345  
        16 006035   006152 702000 16                 TSX2    ALT

     2425    23175    2        CALL X$ALLOCATE (MCB)

  23175 16 006036   000234 630400 17                 EPPR0   156
        16 006037   000003 631400 17                 EPPR1   3
        16 006040   000000 701000 xent               TSX1    X$ALLOCATE
        16 006041   006043 702000 16                 TSX2    s:23177
        16 006042   006056 710000 16                 TRA     s:23181

     2426    23176    3        WHENALTRETURN DO;

     2427    23177    3             CALL VMA$ENLARGE_SEGMENT (VM_HEADER_, 1024) ALTRET(E_PMME);

  23177 16 006043   000007 630400 17                 EPPR0   7
        16 006044   000000 631400 17                 EPPR1   0
        16 006045   000000 701000 xent               TSX1    VMA$ENLARGE_SEGMENT
        16 006046   006146 702000 16                 TSX2    E_PMME

     2428    23178    3             MCB.WKSZ = MCB.WKSZ + 1024;

  23178 16 006047   000743 235000 11                 LDA     MCB+4
        16 006050   002000 035007                    ADLA    1024,DL
        16 006051   000743 755000 11                 STA     MCB+4

     2429    23179    3             CALL X$ALLOCATE (MCB) ALTRET(ALT);

  23179 16 006052   000234 630400 17                 EPPR0   156
        16 006053   000003 631400 17                 EPPR1   3
        16 006054   000000 701000 xent               TSX1    X$ALLOCATE
        16 006055   006152 702000 16                 TSX2    ALT

     2430    23180    3        END;

     2431    23181    2        FLD$ = MCB.ADDRESS$;

  23181 16 006056   000737 236000 11                 LDQ     MCB
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:346  
        16 006057   200437 470500                    LDP0    @FLD$,,AUTO
        16 006060   000000 756100                    STQ     0,,PR0

     2432    23182
     2433    23183    2        IF ALLOC_TEXTC

  23183 16 006061   200443 234100                    SZN     ALLOC_TEXTC,,AUTO
        16 006062   006134 605000 16                 TPL     s:23196

     2434    23184    3        THEN DO; /* this is a TEXTC call */

     2435    23185    4             IF SIZE <= MAX_TEXTC_SIZE THEN DO;

  23185 16 006063   200440 471500                    LDP1    @SIZE,,AUTO
        16 006064   100000 236100                    LDQ     0,,PR1
        16 006065   006107 604000 16                 TMI     s:23190
        16 006066   200442 116100                    CMPQ    MAX_TEXTC_SIZE,,AUTO
        16 006067   006107 605400 16                 TPNZ    s:23190

     2436    23186    4                  FLD$ -> X$STRING.SIZ = SIZE;

  23186 16 006070   000000 473500                    LDP3    0,,PR0
        16 006071   000100 101500                    MRL     fill='000'O
        16 006072   100000 000004                    ADSC9   0,,PR1                   cn=0,n=4
        16 006073   300000 000001                    ADSC9   0,,PR3                   cn=0,n=1

     2437    23187    4                  FLD$ -> X$STRING.TEXT = SUBSTR (TEXT, 0, SIZE);

  23187 16 006074   000000 473500                    LDP3    0,,PR0
        16 006075   000100 101500                    MRL     fill='000'O
        16 006076   300000 000001                    ADSC9   0,,PR3                   cn=0,n=1
        16 006077   200450 000002                    ADSC9   P2$+1,,AUTO              cn=0,n=2
        16 006100   200450 220100                    LDX0    P2$+1,,AUTO
        16 006101   100000 721100                    LXL1    0,,PR1
        16 006102   200441 474500                    LDP4    @TEXT,,AUTO
        16 006103   040140 100540                    MLR     fill='040'O
        16 006104   400000 000011                    ADSC9   0,,PR4                   cn=0,n=*X1
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:347  
        16 006105   300000 200010                    ADSC9   0,,PR3                   cn=1,n=*X0

     2438    23188    4             END;

  23188 16 006106   006141 710000 16                 TRA     s:23197

     2439    23189    4             ELSE DO;

     2440    23190    4                  FLD$->X$STRING.SIZ = MAX_TEXTC_SIZE;

  23190 16 006107   000000 473500                    LDP3    0,,PR0
        16 006110   000100 101500                    MRL     fill='000'O
        16 006111   200442 000004                    ADSC9   MAX_TEXTC_SIZE,,AUTO     cn=0,n=4
        16 006112   300000 000001                    ADSC9   0,,PR3                   cn=0,n=1

     2441    23191    4                  FLD$->X$STRING.TEXT = SUBSTR(TEXT, 0, MAX_TEXTC_SIZE);

  23191 16 006113   000000 473500                    LDP3    0,,PR0
        16 006114   000100 101500                    MRL     fill='000'O
        16 006115   300000 000001                    ADSC9   0,,PR3                   cn=0,n=1
        16 006116   200450 000002                    ADSC9   P2$+1,,AUTO              cn=0,n=2
        16 006117   200450 220100                    LDX0    P2$+1,,AUTO
        16 006120   200441 474500                    LDP4    @TEXT,,AUTO
        16 006121   200442 721100                    LXL1    MAX_TEXTC_SIZE,,AUTO
        16 006122   040140 100540                    MLR     fill='040'O
        16 006123   400000 000011                    ADSC9   0,,PR4                   cn=0,n=*X1
        16 006124   300000 200010                    ADSC9   0,,PR3                   cn=1,n=*X0

     2442    23192    4                  CALL CHECK$FLD (FLD$, MAX_TEXTC_SIZE);

  23192 16 006125   200442 633500                    EPPR3   MAX_TEXTC_SIZE,,AUTO
        16 006126   200446 453500                    STP3    @FLD$+1,,AUTO
        16 006127   200437 236100                    LDQ     @FLD$,,AUTO
        16 006130   200445 756100                    STQ     ALLOC_TEXTC+2,,AUTO
        16 006131   006154 701000 16                 TSX1    CHECK$FLD
        16 006132   000000 011000                    NOP     0

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:348  
     2443    23193    4             END;

     2444    23194    3        END;

  23194 16 006133   006141 710000 16                 TRA     s:23197

     2445    23195    2        ELSE /* this is an RADDRESS call; SIZE is really the RADDRESS block */
     2446    23196    2             FLD$ -> VM$RADDRESS = ADDR(SIZE) -> VM$RADDRESS;

  23196 16 006134   000000 471500                    LDP1    0,,PR0
        16 006135   200440 473500                    LDP3    @SIZE,,AUTO
        16 006136   000100 100500                    MLR     fill='000'O
        16 006137   300000 000117                    ADSC9   0,,PR3                   cn=0,n=79
        16 006140   100000 000117                    ADSC9   0,,PR1                   cn=0,n=79

     2447    23197    2        CALL VNS$BREAK_ENABLE;

  23197 16 006141   000017 631400 17                 EPPR1   15
        16 006142   000000 701000 xent               TSX1    VNS$BREAK_ENABLE
        16 006143   000000 011000                    NOP     0

     2448    23198    2        RETURN;

  23198 16 006144   200436 221300                    LDX1  ! NEW_TYPE+1,,AUTO
        16 006145   000001 702211                    TSX2  ! 1,X1

     2449    23199
     2450    23200    2   E_PMME:
     2451    23201    2        MCB.ERR = B$TCB.ALT$ -> B$ALT.ERR;

  23201 16 006146   000000 470400 xsym  E_PMME       LDP0    B$TCB$
        16 006147   000000 471500                    LDP1    0,,PR0
        16 006150   100102 236100                    LDQ     66,,PR1
        16 006151   000747 756000 11                 STQ     MCB+8

     2452    23202    2   ALT: ALTRETURN;

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:349  
  23202 16 006152   200436 221300       ALT          LDX1  ! NEW_TYPE+1,,AUTO
        16 006153   000000 702211                    TSX2  ! 0,X1

     2453    23203
     2454    23204    2   END ALLOC$TEXTC;
     2455    23205        %EJECT;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:350  
     2456    23206        /********************************************************************/
     2457    23207        /*I*
     2458    23208             NAME: CHECK$FLD
     2459    23209             PURPOSE: To add a '>' as the last character of the TO:, C:,
     2460    23210                      and BC: fields when the size of the field is
     2461    23211                      greater than MAX_SIZE;
     2462    23212        */
     2463    23213        /********************************************************************/
     2464    23214
     2465    23215    1   CHECK$FLD: PROC(P1$,MAX_SIZE);

  23215 16 006154   200444 741300       CHECK$FLD    STX1  ! ALLOC_TEXTC+1,,AUTO

     2466    23216
     2467    23217    2   DCL P1$ PTR;
     2468    23218    2   DCL MAX_SIZE SBIN;
     2469    23219
     2470    23220    2   DCL CONTINUE_CHAR CHAR(1) BASED;
     2471    23221    2   DCL P2$ PTR;
     2472    23222
     2473    23223    2        IF (P1$ = VM_HEADER.TO$) OR (P1$ = VM_HEADER.BLIND$) OR

  23223 16 006155   200445 470500                    LDP0    @P1$,,AUTO
        16 006156   000000 471400 xsym               LDP1    VM_HEADER$
        16 006157   000000 236100                    LDQ     0,,PR0
        16 006160   100031 116100                    CMPQ    25,,PR1
        16 006161   006166 600000 16                 TZE     s:23225
        16 006162   100020 116100                    CMPQ    16,,PR1
        16 006163   006166 600000 16                 TZE     s:23225
        16 006164   100021 116100                    CMPQ    17,,PR1
        16 006165   006202 601000 16                 TNZ     s:23229

     2474    23224    3          (P1$ = VM_HEADER.COPY$) THEN DO;

     2475    23225    3             P2$ = PINCRC(P1$,MAX_SIZE);

  23225 16 006166   200446 473500                    LDP3    @MAX_SIZE,,AUTO
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:351  
        16 006167   300000 236100                    LDQ     0,,PR3
        16 006170   000000 474500                    LDP4    0,,PR0
        16 006171   000011 402007                    MPY     9,DL
        16 006172   000000 116003                    CMPQ    0,DU
        16 006173   006175 605000 16                 TPL     s:23225+7
        16 006174   000044 036003                    ADLQ    36,DU
        16 006175   400000 503506                    ABD     0,QL,PR4
        16 006176   200447 454500                    STP4    P2$,,AUTO

     2476    23226    3             P2$->CONTINUE_CHAR = '>';

  23226 16 006177   040100 100400                    MLR     fill='040'O
        16 006200   000235 000001 17                 ADSC9   157                      cn=0,n=1
        16 006201   400000 000001                    ADSC9   0,,PR4                   cn=0,n=1

     2477    23227    3        END;

     2478    23228
     2479    23229    2        RETURN;

  23229 16 006202   200444 221300                    LDX1  ! ALLOC_TEXTC+1,,AUTO
        16 006203   000001 702211                    TSX2  ! 1,X1

     2480    23230    2   END CHECK$FLD;
     2481    23231        %EJECT;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:352  
     2482    23232        /********************************************************************/
     2483    23233        /*I*
     2484    23234             NAME: ERASE$FLD
     2485    23235             PURPOSE: To remove a field (typically from the header record).
     2486    23236        */
     2487    23237        /********************************************************************/
     2488    23238
     2489    23239    1   ERASE$FLD: PROC (FLD$) ALTRET;

  23239 16 006204   200444 741300       ERASE$FLD    STX1  ! ALLOC_TEXTC+1,,AUTO

     2490    23240    2   DCL FLD$ PTR;
     2491    23241        %POINTER (NAME=FLD,STCLASS="REDEF FLD$");
     2492    23246
     2493    23247    2        IF FLD$ ~= ADDR(NIL)

  23247 16 006205   200445 470500                    LDP0    @FLD$,,AUTO
        16 006206   000000 236100                    LDQ     0,,PR0
        16 006207   000032 116000 17                 CMPQ    26
        16 006210   006221 600000 16                 TZE     s:23254

     2494    23248    3        THEN DO;

     2495    23249    3             MCB.ADDRESS$ = FLD$;

  23249 16 006211   000737 756000 11                 STQ     MCB

     2496    23250    3             CALL X$DEALLOCATE (MCB) ALTRET(ALT);

  23250 16 006212   000234 630400 17                 EPPR0   156
        16 006213   000003 631400 17                 EPPR1   3
        16 006214   000000 701000 xent               TSX1    X$DEALLOCATE
        16 006215   006223 702000 16                 TSX2    ALT

     2497    23251    3             FLD$ = ADDR(NIL);

  23251 16 006216   000032 236000 17                 LDQ     26
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:353  
        16 006217   200445 470500                    LDP0    @FLD$,,AUTO
        16 006220   000000 756100                    STQ     0,,PR0

     2498    23252    3        END;

     2499    23253
     2500    23254    2        RETURN;

  23254 16 006221   200444 221300                    LDX1  ! ALLOC_TEXTC+1,,AUTO
        16 006222   000001 702211                    TSX2  ! 1,X1

     2501    23255    2   ALT: ALTRETURN;

  23255 16 006223   200444 221300       ALT          LDX1  ! ALLOC_TEXTC+1,,AUTO
        16 006224   000000 702211                    TSX2  ! 0,X1

     2502    23256
     2503    23257    2   END ERASE$FLD;
     2504    23258        %EJECT;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:354  
     2505    23259        /********************************************************************/
     2506    23260        /*I*
     2507    23261             NAME: ERASE$ADDR
     2508    23262             PURPOSE: To remove an address list from the header and delete
     2509    23263                     the corresponding address record from the message file.
     2510    23264        */
     2511    23265        /********************************************************************/
     2512    23266
     2513    23267    1   ERASE$ADDR: PROC (FLD$, TYPE) ALTRET;

  23267 16 006225   200374 741300       ERASE$ADDR   STX1  ! @NODE$,,AUTO

     2514    23268    2   DCL FLD$ PTR;
     2515    23269        %POINTER (NAME=FLD,STCLASS="REDEF FLD$");
     2516    23274    2   DCL TYPE UBIN;
     2517    23275
     2518    23276    2        IF FLD$ ~= ADDR(NIL)

  23276 16 006226   200375 470500                    LDP0    @FLD$,,AUTO
        16 006227   000000 236100                    LDQ     0,,PR0
        16 006230   000032 116000 17                 CMPQ    26
        16 006231   006256 600000 16                 TZE     s:23286

     2519    23277    3        THEN DO;

     2520    23278    3             MCB.ADDRESS$ = FLD$;

  23278 16 006232   000737 756000 11                 STQ     MCB

     2521    23279    3             CALL X$DEALLOCATE (MCB) ALTRET(ALT);

  23279 16 006233   000234 630400 17                 EPPR0   156
        16 006234   000003 631400 17                 EPPR1   3
        16 006235   000000 701000 xent               TSX1    X$DEALLOCATE
        16 006236   006260 702000 16                 TSX2    ALT

     2522    23280    3             FLD$ = ADDR(NIL);
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:355  

  23280 16 006237   000032 236000 17                 LDQ     26
        16 006240   200375 470500                    LDP0    @FLD$,,AUTO
        16 006241   000000 756100                    STQ     0,,PR0

     2523    23281    3             IF TYPE > 0

  23281 16 006242   200376 471500                    LDP1    @TYPE,,AUTO
        16 006243   100000 235100                    LDA     0,,PR1
        16 006244   006256 600000 16                 TZE     s:23286

     2524    23282    3             THEN
     2525    23283    3                  CALL VMA$DEL_ADD_RECORD (TYPE,,M$WORK_NUM);

  23283 16 006245   000053 236000 17                 LDQ     43
        16 006246   200452 756100                    STQ     P2$+3,,AUTO
        16 006247   000032 236000 17                 LDQ     26
        16 006250   200376 235100                    LDA     @TYPE,,AUTO
        16 006251   200450 757100                    STAQ    P2$+1,,AUTO
        16 006252   200450 630500                    EPPR0   P2$+1,,AUTO
        16 006253   000074 631400 17                 EPPR1   60
        16 006254   000000 701000 xent               TSX1    VMA$DEL_ADD_RECORD
        16 006255   000000 011000                    NOP     0

     2526    23284    3        END;

     2527    23285
     2528    23286    2        RETURN;

  23286 16 006256   200374 221300                    LDX1  ! @NODE$,,AUTO
        16 006257   000001 702211                    TSX2  ! 1,X1

     2529    23287    2   ALT: ALTRETURN;

  23287 16 006260   200374 221300       ALT          LDX1  ! @NODE$,,AUTO
        16 006261   000000 702211                    TSX2  ! 0,X1

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:356  
     2530    23288
     2531    23289    2   END ERASE$ADDR;
     2532    23290        %EJECT;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:357  
     2533    23291        /********************************************************************/
     2534    23292        /*I*
     2535    23293            NAME: REPLACE$FLD
     2536    23294            PURPOSE: Replace a field in the header with text from a command.
     2537    23295            DESCRIPTION: This routine releases any existing value for the
     2538    23296            specified field, and puts in any text from the command just parsed.
     2539    23297        */
     2540    23298        /********************************************************************/
     2541    23299
     2542    23300    1   REPLACE$FLD: PROC (FLD$) ALTRET;

  23300 16 006262   200370 741300       REPLACE$FLD  STX1  ! SAVE_BREAK_TYPE+3,,AUTO

     2543    23301    2   DCL FLD$ PTR;
     2544    23302
     2545    23303    2        IF OUT$ -> P$B.NSUBLKS ~= 0

  23303 16 006263   200027 470500                    LDP0    OUT$,,AUTO
        16 006264   000001 220100                    LDX0    1,,PR0
        16 006265   006367 600000 16                 TZE     REMOVE

     2546    23304    3        THEN DO;

     2547    23305    3             BLK$ = OUT$ -> P$B.SUBLK$(0);

  23305 16 006266   000003 236100                    LDQ     3,,PR0
        16 006267   200030 756100                    STQ     BLK$,,AUTO

     2548    23306    3             I = P$B.CPOS;

  23306 16 006270   200030 471500                    LDP1    BLK$,,AUTO
        16 006271   100002 235100                    LDA     2,,PR1
        16 006272   200134 755100                    STA     I,,AUTO

     2549    23307    3             IF SUBSTR (P_PCB$TEXT, I) = ' '

  23307 16 006273   000011 236000 11                 LDQ     P_PCB+9
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:358  
        16 006274   200134 136100                    SBLQ    I,,AUTO
        16 006275   000000 473400 11                 LDP3    P_PCB
        16 006276   000000 620006                    EAX0    0,QL
        16 006277   040000 106545                    CMPC    fill='040'O
        16 006300   300000 000010                    ADSC9   0,A,PR3                  cn=0,n=*X0
        16 006301   000064 000001 17                 ADSC9   52                       cn=0,n=1
        16 006302   006367 600000 16                 TZE     REMOVE

     2550    23308    3             THEN      /* treat blank or null value like no value */
     2551    23309    3                  GOTO REMOVE;
     2552    23310    3             CALL SEARCHR (J, DUMMY, NON_BLANK, P_PCB$TEXT);

  23310 16 006303   000011 236000 11                 LDQ     P_PCB+9
        16 006304   000000 474400 xsym               LDP4    B$SR_NON_BLANK$
        16 006305   000000 620006                    EAX0    0,QL
        16 006306   000000 165540                    TCTR
        16 006307   300000 000010                    ADSC9   0,,PR3                   cn=0,n=*X0
        16 006310   400000 000100                    ARG     0,,PR4
        16 006311   200135 000100                    ARG     J,,AUTO
        16 006312   200135 235100                    LDA     J,,AUTO
        16 006313   000033 771000                    ARL     27
        16 006314   200137 755100                    STA     DUMMY,,AUTO
        16 006315   200135 551140                    STBA    J,'40'O,AUTO
        16 006316   006321 606400 16                 TTN     s:23311
        16 006317   200135 054100                    AOS     J,,AUTO
        16 006320   200135 156100                    SSQ     J,,AUTO

     2553    23311    3             J = J - I + 1;

  23311 16 006321   200135 236100                    LDQ     J,,AUTO
        16 006322   200134 136100                    SBLQ    I,,AUTO
        16 006323   000001 036007                    ADLQ    1,DL
        16 006324   200135 756100                    STQ     J,,AUTO

     2554    23312    3             IF FLD$ ~= ADDR(NIL)

  23312 16 006325   200371 475500                    LDP5    @FLD$,,AUTO
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:359  
        16 006326   500000 236100                    LDQ     0,,PR5
        16 006327   000032 116000 17                 CMPQ    26
        16 006330   006345 600000 16                 TZE     s:23316

     2555    23313    3             THEN IF FLD$ -> X$STRING.TEXT = SUBSTR (P_PCB$TEXT, I, J)

  23313 16 006331   500000 476500                    LDP6    0,,PR5
        16 006332   000100 101500                    MRL     fill='000'O
        16 006333   600000 000001                    ADSC9   0,,PR6                   cn=0,n=1
        16 006334   200450 000002                    ADSC9   P2$+1,,AUTO              cn=0,n=2
        16 006335   200450 222100                    LDX2    P2$+1,,AUTO
        16 006336   200135 723100                    LXL3    J,,AUTO
        16 006337   200134 236100                    LDQ     I,,AUTO
        16 006340   040146 106540                    CMPC    fill='040'O
        16 006341   600000 200012                    ADSC9   0,,PR6                   cn=1,n=*X2
        16 006342   300000 000013                    ADSC9   0,Q,PR3                  cn=0,n=*X3
        16 006343   006345 601000 16                 TNZ     s:23316

     2556    23314    3                  THEN /* leave current value if new one is identical */
     2557    23315    3                       RETURN;

  23315 16 006344   000001 702211                    TSX2  ! 1,X1

     2558    23316    3             CALL VNS$BREAK_DISABLE;

  23316 16 006345   000017 631400 17                 EPPR1   15
        16 006346   000000 701000 xent               TSX1    VNS$BREAK_DISABLE
        16 006347   000000 011000                    NOP     0

     2559    23317    3             DID_SEND = %NO#;

  23317 16 006350   200017 450100                    STZ     DID_SEND,,AUTO

     2560    23318    3             CALL ALLOC$TEXTC (FLD$, J, PINCRC(P_PCB.TEXT$,I)->BSD) ALTRET(ALT);

  23318 16 006351   200134 236100                    LDQ     I,,AUTO
        16 006352   000020 736000                    QLS     16
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:360  
        16 006353   000000 036000 11                 ADLQ    P_PCB
        16 006354   200441 756100                    STQ     @TEXT,,AUTO
        16 006355   200135 630500                    EPPR0   J,,AUTO
        16 006356   200440 450500                    STP0    @SIZE,,AUTO
        16 006357   200371 236100                    LDQ     @FLD$,,AUTO
        16 006360   200437 756100                    STQ     @FLD$,,AUTO
        16 006361   006011 701000 16                 TSX1    ALLOC$TEXTC
        16 006362   006407 702000 16                 TSX2    ALT

     2561    23319    3             CALL VNS$BREAK_ENABLE;

  23319 16 006363   000017 631400 17                 EPPR1   15
        16 006364   000000 701000 xent               TSX1    VNS$BREAK_ENABLE
        16 006365   000000 011000                    NOP     0

     2562    23320    3        END;

  23320 16 006366   006405 710000 16                 TRA     s:23331

     2563    23321    3        ELSE DO;

  23318 16 006367                       REMOVE       null
     2564    23322    3   REMOVE:   ;
     2565    23323    3             IF FLD$ ~= ADDR(NIL)

  23323 16 006367   200371 471500                    LDP1    @FLD$,,AUTO
        16 006370   100000 236100                    LDQ     0,,PR1
        16 006371   000032 116000 17                 CMPQ    26
        16 006372   006405 600000 16                 TZE     s:23331

     2566    23324    4             THEN DO;

     2567    23325    4                  CALL VNS$BREAK_DISABLE;

  23325 16 006373   000017 631400 17                 EPPR1   15
        16 006374   000000 701000 xent               TSX1    VNS$BREAK_DISABLE
        16 006375   000000 011000                    NOP     0
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:361  

     2568    23326    4                  CALL ERASE$FLD (FLD$) ALTRET(ALT);

  23326 16 006376   200371 236100                    LDQ     @FLD$,,AUTO
        16 006377   200445 756100                    STQ     @FLD$,,AUTO
        16 006400   006204 701000 16                 TSX1    ERASE$FLD
        16 006401   006407 702000 16                 TSX2    ALT

     2569    23327    4                  CALL VNS$BREAK_ENABLE;

  23327 16 006402   000017 631400 17                 EPPR1   15
        16 006403   000000 701000 xent               TSX1    VNS$BREAK_ENABLE
        16 006404   000000 011000                    NOP     0

     2570    23328    4             END;

     2571    23329    3        END;

     2572    23330
     2573    23331    2        RETURN;

  23331 16 006405   200370 221300                    LDX1  ! SAVE_BREAK_TYPE+3,,AUTO
        16 006406   000001 702211                    TSX2  ! 1,X1

     2574    23332    2   ALT: ALTRETURN;

  23332 16 006407   200370 221300       ALT          LDX1  ! SAVE_BREAK_TYPE+3,,AUTO
        16 006410   000000 702211                    TSX2  ! 0,X1

     2575    23333
     2576    23334    2   END REPLACE$FLD;
     2577    23335        %EJECT;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:362  
     2578    23336        /********************************************************************/
     2579    23337        /*I*
     2580    23338            NAME: REPLACE$ADDR
     2581    23339            PURPOSE: To replace an address list.
     2582    23340            DESCRIPTION: This routine puts the address list text into a new
     2583    23341            block in the header and tries to create a corresponding address
     2584    23342            record, which also validates the list.  If an error is found, the
     2585    23343            existing list, if any, is retained.
     2586    23344        */
     2587    23345        /********************************************************************/
     2588    23346
     2589    23347    1   REPLACE$ADDR: PROC (FLD$, TYPE) ALTRET;

  23347 16 006411   200370 741300       REPLACE$ADDR STX1  ! SAVE_BREAK_TYPE+3,,AUTO

     2590    23348    2   DCL FLD$ PTR;
     2591    23349    2   DCL TYPE UBIN;
     2592    23350
     2593    23351    2        IF OUT$ -> P$B.NSUBLKS ~= 0

  23351 16 006412   200027 470500                    LDP0    OUT$,,AUTO
        16 006413   000001 220100                    LDX0    1,,PR0
        16 006414   006547 600000 16                 TZE     s:23387

     2594    23352    3        THEN DO;                  /* Something to process */

     2595    23353    3             BLK$ = OUT$ -> P$B.SUBLK$(0) -> P$B.SUBLK$(0);

  23353 16 006415   000003 471500                    LDP1    3,,PR0
        16 006416   100003 236100                    LDQ     3,,PR1
        16 006417   200030 756100                    STQ     BLK$,,AUTO

     2596    23354    3             I = P$B.CPOS;

  23354 16 006420   200030 471500                    LDP1    BLK$,,AUTO
        16 006421   100002 235100                    LDA     2,,PR1
        16 006422   200134 755100                    STA     I,,AUTO
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:363  

     2597    23355                /* Back up CPOS to start of actual text */
     2598    23356    4             DO CASE(P$B.CODE);

  23356 16 006423   100000 720100                    LXL0    0,,PR1
        16 006424   000011 100003                    CMPX0   9,DU
        16 006425   006427 602010 16                 TNC     s:23356+4,X0
        16 006426   006445 710000 16                 TRA     s:23362
        16 006427   006445 710000 16                 TRA     s:23362
        16 006430   006445 710000 16                 TRA     s:23362
        16 006431   006440 710000 16                 TRA     s:23358
        16 006432   006440 710000 16                 TRA     s:23358
        16 006433   006445 710000 16                 TRA     s:23362
        16 006434   006445 710000 16                 TRA     s:23362
        16 006435   006445 710000 16                 TRA     s:23362
        16 006436   006445 710000 16                 TRA     s:23362
        16 006437   006443 710000 16                 TRA     s:23360

     2599    23357    4             CASE (%ADD_ACCT, %ADD_FOLDER);

     2600    23358    4                 I = I - 1; /* Adjust for "." or "/" */

  23358 16 006440   000001 336007                    LCQ     1,DL
        16 006441   200134 056100                    ASQ     I,,AUTO
        16 006442   006445 710000 16                 TRA     s:23362

     2601    23359    4             CASE (%ADD_PSID);

     2602    23360    4                 I = I - 3; /* Adjust for "DP#" */

  23360 16 006443   000003 336007                    LCQ     3,DL
        16 006444   200134 056100                    ASQ     I,,AUTO

     2603    23361    4             END;

     2604    23362    3             CALL SEARCHR (J, DUMMY, NON_BLANK, P_PCB$TEXT);

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:364  
  23362 16 006445   000011 236000 11                 LDQ     P_PCB+9
        16 006446   000000 473400 xsym               LDP3    B$SR_NON_BLANK$
        16 006447   000000 474400 11                 LDP4    P_PCB
        16 006450   000000 622006                    EAX2    0,QL
        16 006451   000000 165540                    TCTR
        16 006452   400000 000012                    ADSC9   0,,PR4                   cn=0,n=*X2
        16 006453   300000 000100                    ARG     0,,PR3
        16 006454   200135 000100                    ARG     J,,AUTO
        16 006455   200135 235100                    LDA     J,,AUTO
        16 006456   000033 771000                    ARL     27
        16 006457   200137 755100                    STA     DUMMY,,AUTO
        16 006460   200135 551140                    STBA    J,'40'O,AUTO
        16 006461   006464 606400 16                 TTN     s:23363
        16 006462   200135 054100                    AOS     J,,AUTO
        16 006463   200135 156100                    SSQ     J,,AUTO

     2605    23363    3             J = J - I + 1;

  23363 16 006464   200135 236100                    LDQ     J,,AUTO
        16 006465   200134 136100                    SBLQ    I,,AUTO
        16 006466   000001 036007                    ADLQ    1,DL
        16 006467   200135 756100                    STQ     J,,AUTO

     2606    23364    3             IF FLD$ ~= ADDR(NIL)

  23364 16 006470   200371 475500                    LDP5    @FLD$,,AUTO
        16 006471   500000 236100                    LDQ     0,,PR5
        16 006472   000032 116000 17                 CMPQ    26
        16 006473   006510 600000 16                 TZE     s:23371

     2607    23365    3             THEN IF FLD$ -> X$STRING.TEXT = SUBSTR (P_PCB$TEXT, I, J)

  23365 16 006474   500000 476500                    LDP6    0,,PR5
        16 006475   000100 101500                    MRL     fill='000'O
        16 006476   600000 000001                    ADSC9   0,,PR6                   cn=0,n=1
        16 006477   200450 000002                    ADSC9   P2$+1,,AUTO              cn=0,n=2
        16 006500   200450 220100                    LDX0    P2$+1,,AUTO
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:365  
        16 006501   200135 723100                    LXL3    J,,AUTO
        16 006502   200134 236100                    LDQ     I,,AUTO
        16 006503   040146 106540                    CMPC    fill='040'O
        16 006504   600000 200010                    ADSC9   0,,PR6                   cn=1,n=*X0
        16 006505   400000 000013                    ADSC9   0,Q,PR4                  cn=0,n=*X3
        16 006506   006510 601000 16                 TNZ     s:23371

     2608    23366    3                  THEN /* leave current value if new one is identical */
     2609    23367    3                       RETURN;

  23367 16 006507   000001 702211                    TSX2  ! 1,X1

     2610    23368        /*
     2611    23369             ***** Convert the address and write the address record ...
     2612    23370        */
     2613    23371    3             CALL VNS$BREAK_DISABLE;

  23371 16 006510   000017 631400 17                 EPPR1   15
        16 006511   000000 701000 xent               TSX1    VNS$BREAK_DISABLE
        16 006512   000000 011000                    NOP     0

     2614    23372    3             IF TYPE > 0

  23372 16 006513   200372 470500                    LDP0    @TYPE,,AUTO
        16 006514   000000 235100                    LDA     0,,PR0
        16 006515   006530 600000 16                 TZE     s:23382

     2615    23373    3             THEN
     2616    23374    3                  CALL GET$ADDLIST (TYPE)

  23374 16 006516   200372 236100                    LDQ     @TYPE,,AUTO
        16 006517   200375 756100                    STQ     @FLD$,,AUTO
        16 006520   005450 701000 16                 TSX1    GET$ADDLIST
        16 006521   006523 702000 16                 TSX2    s:23376
        16 006522   006530 710000 16                 TRA     s:23382

     2617    23375    4                  WHENALTRETURN DO;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:366  

     2618    23376    4                       CALL VNS$BREAK_ENABLE;

  23376 16 006523   000017 631400 17                 EPPR1   15
        16 006524   000000 701000 xent               TSX1    VNS$BREAK_ENABLE
        16 006525   000000 011000                    NOP     0

     2619    23377    4                       RETURN;

  23377 16 006526   200370 221300                    LDX1  ! SAVE_BREAK_TYPE+3,,AUTO
        16 006527   000001 702211                    TSX2  ! 1,X1

     2620    23378    4                  END;
     2621    23379        /*
     2622    23380             ***** If no errors found, replace the header text for the field ...
     2623    23381        */
     2624    23382    3             DID_SEND = %NO#;

  23382 16 006530   200017 450100                    STZ     DID_SEND,,AUTO

     2625    23383    3             CALL ALLOC$TEXTC (FLD$, J, PINCRC(P_PCB.TEXT$,I)->BSD) ALTRET(ALT);

  23383 16 006531   200134 236100                    LDQ     I,,AUTO
        16 006532   000020 736000                    QLS     16
        16 006533   000000 036000 11                 ADLQ    P_PCB
        16 006534   200441 756100                    STQ     @TEXT,,AUTO
        16 006535   200135 630500                    EPPR0   J,,AUTO
        16 006536   200440 450500                    STP0    @SIZE,,AUTO
        16 006537   200371 236100                    LDQ     @FLD$,,AUTO
        16 006540   200437 756100                    STQ     @FLD$,,AUTO
        16 006541   006011 701000 16                 TSX1    ALLOC$TEXTC
        16 006542   006571 702000 16                 TSX2    ALT

     2626    23384    3             CALL VNS$BREAK_ENABLE;

  23384 16 006543   000017 631400 17                 EPPR1   15
        16 006544   000000 701000 xent               TSX1    VNS$BREAK_ENABLE
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:367  
        16 006545   000000 011000                    NOP     0

     2627    23385    3        END;

  23385 16 006546   006567 710000 16                 TRA     s:23395

     2628    23386    3        ELSE DO;

     2629    23387    3             IF FLD$ ~= ADDR(NIL)

  23387 16 006547   200371 471500                    LDP1    @FLD$,,AUTO
        16 006550   100000 236100                    LDQ     0,,PR1
        16 006551   000032 116000 17                 CMPQ    26
        16 006552   006567 600000 16                 TZE     s:23395

     2630    23388    4             THEN DO;

     2631    23389    4                  CALL VNS$BREAK_DISABLE;

  23389 16 006553   000017 631400 17                 EPPR1   15
        16 006554   000000 701000 xent               TSX1    VNS$BREAK_DISABLE
        16 006555   000000 011000                    NOP     0

     2632    23390    4                  CALL ERASE$ADDR (FLD$, TYPE) ALTRET(ALT);

  23390 16 006556   200372 236100                    LDQ     @TYPE,,AUTO
        16 006557   200376 756100                    STQ     @TYPE,,AUTO
        16 006560   200371 236100                    LDQ     @FLD$,,AUTO
        16 006561   200375 756100                    STQ     @FLD$,,AUTO
        16 006562   006225 701000 16                 TSX1    ERASE$ADDR
        16 006563   006571 702000 16                 TSX2    ALT

     2633    23391    4                  CALL VNS$BREAK_ENABLE;

  23391 16 006564   000017 631400 17                 EPPR1   15
        16 006565   000000 701000 xent               TSX1    VNS$BREAK_ENABLE
        16 006566   000000 011000                    NOP     0
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:368  

     2634    23392    4             END;

     2635    23393    3        END;

     2636    23394
     2637    23395    2        RETURN;

  23395 16 006567   200370 221300                    LDX1  ! SAVE_BREAK_TYPE+3,,AUTO
        16 006570   000001 702211                    TSX2  ! 1,X1

     2638    23396    2   ALT: ALTRETURN;

  23396 16 006571   200370 221300       ALT          LDX1  ! SAVE_BREAK_TYPE+3,,AUTO
        16 006572   000000 702211                    TSX2  ! 0,X1

     2639    23397
     2640    23398    2   END REPLACE$ADDR;
     2641    23399        %EJECT;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:369  
     2642    23400        /********************************************************************/
     2643    23401        /*I*
     2644    23402            NAME: REPLACE$TSTAMP
     2645    23403            PURPOSE: To replace a timestamp in the header record.
     2646    23404        */
     2647    23405        /********************************************************************/
     2648    23406
     2649    23407    1   REPLACE$TSTAMP: PROC (TSTAMP) ALTRET;

  23407 16 006573   200370 741300       REPLACE$TST* STX1  ! SAVE_BREAK_TYPE+3,,AUTO

     2650    23408    2   DCL TSTAMP UBIN;
     2651    23409
     2652    23410        /*
     2653    23411             ***** Set result to zero if there is nothing to convert...
     2654    23412        */
     2655    23413    2        IF OUT$ -> P$B.NSUBLKS = 0

  23413 16 006574   200027 470500                    LDP0    OUT$,,AUTO
        16 006575   000001 220100                    LDX0    1,,PR0
        16 006576   006603 601000 16                 TNZ     s:23421

     2656    23414    3        THEN DO;

     2657    23415    3             TSTAMP = 0;

  23415 16 006577   200371 471500                    LDP1    @TSTAMP,,AUTO
        16 006600   100000 450100                    STZ     0,,PR1

     2658    23416    3             ALTRETURN;

  23416 16 006601   200370 221300                    LDX1  ! SAVE_BREAK_TYPE+3,,AUTO
        16 006602   000000 702211                    TSX2  ! 0,X1

     2659    23417    3        END;
     2660    23418        /*
     2661    23419             ***** Start with current date, and time of midnight ...
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:370  
     2662    23420        */
     2663    23421    2        CALL M$TIME (GET_CURRENT);

  23421 16 006603   001152 630400 13                 EPPR0   GET_CURRENT
        16 006604   020004 713400                    CLIMB   8196
        16 006605   402000 401760                    pmme    nvectors=5

     2664    23422    2        WORK_TIMEC = TIME_INIT;

  23422 16 006606   040000 100400                    MLR     fill='040'O
        16 006607   000003 000005 13                 ADSC9   TIME_INIT                cn=0,n=5
        16 006610   000073 000005 11                 ADSC9   WORK_TIME                cn=0,n=5

     2665    23423        /*
     2666    23424             ***** Fill in fields provided by the command ...
     2667    23425        */
     2668    23426    3        DO I = 0 TO OUT$ -> P$B.NSUBLKS - 1;

  23426 16 006611   200134 450100                    STZ     I,,AUTO
        16 006612   006717 710000 16                 TRA     s:23445+1

     2669    23427    3             BLK$ = OUT$ -> P$B.SUBLK$(I);

  23427 16 006613   200027 470500                    LDP0    OUT$,,AUTO
        16 006614   200134 720100                    LXL0    I,,AUTO
        16 006615   000003 236110                    LDQ     3,X0,PR0
        16 006616   200030 756100                    STQ     BLK$,,AUTO

     2670    23428    4             DO CASE (BLK$ -> P$B.CODE);

  23428 16 006617   200030 471500                    LDP1    BLK$,,AUTO
        16 006620   100000 236100                    LDQ     0,,PR1
        16 006621   777777 376007                    ANQ     -1,DL
        16 006622   000050 136007                    SBLQ    40,DL
        16 006623   000002 116007                    CMPQ    2,DL
        16 006624   006626 602006 16                 TNC     s:23428+7,QL
        16 006625   006716 710000 16                 TRA     s:23445
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:371  
        16 006626   006630 710000 16                 TRA     s:23430
        16 006627   006672 710000 16                 TRA     s:23440

     2671    23429    4             CASE (%OPT_DATE);

     2672    23430    4                 CALL CHARBIN (J, BLK$->P$B.SUBLK$(0)->P$S.TEXT);

  23430 16 006630   100003 473500                    LDP3    3,,PR1
        16 006631   300004 236100                    LDQ     4,,PR3
        16 006632   000033 772000                    QRL     27
        16 006633   000000 621006                    EAX1    0,QL
        16 006634   000100 305540                    DTB
        16 006635   300004 230011                    NDSC9   4,,PR3                   cn=1,s=nosgn,sf=0,n=*X1
        16 006636   200135 000004                    NDSC9   J,,AUTO                  cn=0,s=lsgnf,sf=0,n=4

     2673    23431    4                 CALL BINCHAR(WORK_DATE.MONTH, J);

  23431 16 006637   000000 301500                    BTD
        16 006640   200135 000004                    NDSC9   J,,AUTO                  cn=0,s=lsgnf,sf=0,n=4
        16 006641   000071 030002 11                 NDSC9   WORK_DATE                cn=0,s=nosgn,sf=0,n=2

     2674    23432    4                 CALL CHARBIN (J, BLK$->P$B.SUBLK$(1)->P$S.TEXT);

  23432 16 006642   100004 473500                    LDP3    4,,PR1
        16 006643   300004 236100                    LDQ     4,,PR3
        16 006644   000033 772000                    QRL     27
        16 006645   000000 621006                    EAX1    0,QL
        16 006646   000100 305540                    DTB
        16 006647   300004 230011                    NDSC9   4,,PR3                   cn=1,s=nosgn,sf=0,n=*X1
        16 006650   200135 000004                    NDSC9   J,,AUTO                  cn=0,s=lsgnf,sf=0,n=4

     2675    23433    4                 CALL BINCHAR (WORK_DATE.DAY, J);

  23433 16 006651   000000 301500                    BTD
        16 006652   200135 000004                    NDSC9   J,,AUTO                  cn=0,s=lsgnf,sf=0,n=4
        16 006653   000071 630002 11                 NDSC9   WORK_DATE                cn=3,s=nosgn,sf=0,n=2

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:372  
     2676    23434    4                 IF BLK$->P$B.NSUBLKS = 3

  23434 16 006654   100001 221100                    LDX1    1,,PR1
        16 006655   000003 101003                    CMPX1   3,DU
        16 006656   006716 601000 16                 TNZ     s:23445

     2677    23435    5                 THEN DO;       /* A year specified */

     2678    23436    5                      CALL CHARBIN (J, BLK$->P$B.SUBLK$(2)->P$S.TEXT);

  23436 16 006657   100005 473500                    LDP3    5,,PR1
        16 006660   300004 236100                    LDQ     4,,PR3
        16 006661   000033 772000                    QRL     27
        16 006662   000000 622006                    EAX2    0,QL
        16 006663   000100 305540                    DTB
        16 006664   300004 230012                    NDSC9   4,,PR3                   cn=1,s=nosgn,sf=0,n=*X2
        16 006665   200135 000004                    NDSC9   J,,AUTO                  cn=0,s=lsgnf,sf=0,n=4

     2679    23437    5                      CALL BINCHAR (WORK_DATE.YEAR, J);

  23437 16 006666   000000 301500                    BTD
        16 006667   200135 000004                    NDSC9   J,,AUTO                  cn=0,s=lsgnf,sf=0,n=4
        16 006670   000072 430002 11                 NDSC9   WORK_DATE+1              cn=2,s=nosgn,sf=0,n=2

     2680    23438    5                 END;

  23438 16 006671   006716 710000 16                 TRA     s:23445

     2681    23439    4             CASE (%OPT_TIME);

     2682    23440    4                 CALL CHARBIN (J, BLK$->P$B.SUBLK$(0)->P$S.TEXT);

  23440 16 006672   100003 473500                    LDP3    3,,PR1
        16 006673   300004 236100                    LDQ     4,,PR3
        16 006674   000033 772000                    QRL     27
        16 006675   000000 621006                    EAX1    0,QL
        16 006676   000100 305540                    DTB
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:373  
        16 006677   300004 230011                    NDSC9   4,,PR3                   cn=1,s=nosgn,sf=0,n=*X1
        16 006700   200135 000004                    NDSC9   J,,AUTO                  cn=0,s=lsgnf,sf=0,n=4

     2683    23441    4                 CALL BINCHAR (WORK_TIME.HOUR, J);

  23441 16 006701   000000 301500                    BTD
        16 006702   200135 000004                    NDSC9   J,,AUTO                  cn=0,s=lsgnf,sf=0,n=4
        16 006703   000073 030002 11                 NDSC9   WORK_TIME                cn=0,s=nosgn,sf=0,n=2

     2684    23442    4                 CALL CHARBIN (J, BLK$->P$B.SUBLK$(1)->P$S.TEXT);

  23442 16 006704   100004 473500                    LDP3    4,,PR1
        16 006705   300004 236100                    LDQ     4,,PR3
        16 006706   000033 772000                    QRL     27
        16 006707   000000 621006                    EAX1    0,QL
        16 006710   000100 305540                    DTB
        16 006711   300004 230011                    NDSC9   4,,PR3                   cn=1,s=nosgn,sf=0,n=*X1
        16 006712   200135 000004                    NDSC9   J,,AUTO                  cn=0,s=lsgnf,sf=0,n=4

     2685    23443    4                 CALL BINCHAR (WORK_TIME.MINUTE, J);

  23443 16 006713   000000 301500                    BTD
        16 006714   200135 000004                    NDSC9   J,,AUTO                  cn=0,s=lsgnf,sf=0,n=4
        16 006715   000073 630002 11                 NDSC9   WORK_TIME                cn=3,s=nosgn,sf=0,n=2

     2686    23444    4             END;

     2687    23445    3        END;

  23445 16 006716   200134 054100                    AOS     I,,AUTO
        16 006717   200027 470500                    LDP0    OUT$,,AUTO
        16 006720   000001 236100                    LDQ     1,,PR0
        16 006721   000022 772000                    QRL     18
        16 006722   200134 116100                    CMPQ    I,,AUTO
        16 006723   006613 605400 16                 TPNZ    s:23427

     2688    23446        /*
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:374  
     2689    23447              ***** Now convert the time into a uts ...
     2690    23448        */
     2691    23449    2        CALL M$TIME (CHECK_TIME) ALTRET(BAD_TIME);

  23449 16 006724   001166 630400 13                 EPPR0   CHECK_TIME
        16 006725   420004 713400                    CLIMB   alt,+8196
        16 006726   402000 401760                    pmme    nvectors=5
        16 006727   006735 702000 16                 TSX2    BAD_TIME

     2692    23450    2        TSTAMP = WORK_UTS;

  23450 16 006730   200371 470500                    LDP0    @TSTAMP,,AUTO
        16 006731   000103 235000 11                 LDA     WORK_UTS
        16 006732   000000 755100                    STA     0,,PR0

     2693    23451    2        RETURN;

  23451 16 006733   200370 221300                    LDX1  ! SAVE_BREAK_TYPE+3,,AUTO
        16 006734   000001 702211                    TSX2  ! 1,X1

  23450 16 006735                       BAD_TIME     null
     2694    23452
     2695    23453    2   BAD_TIME: ;
     2696    23454    2        CALL MON_ERR;

  23454 16 006735   002075 701000 16                 TSX1    MON_ERR
        16 006736   000000 011000                    NOP     0

     2697    23455    2        ALTRETURN;

  23455 16 006737   200370 221300                    LDX1  ! SAVE_BREAK_TYPE+3,,AUTO
        16 006740   000000 702211                    TSX2  ! 0,X1

     2698    23456
     2699    23457    2   END REPLACE$TSTAMP;
     2700    23458        %EJECT;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:375  
     2701    23459        /********************************************************************/
     2702    23460        /*I*
     2703    23461             NAME: PROMPT$TO
     2704    23462             PURPOSE: Prompts for TO information, parses, and processes it.
     2705    23463        */
     2706    23464        /********************************************************************/
     2707    23465
     2708    23466    1   PROMPT$TO: PROC  ALTRET;

  23466 16 006741   200364 741300       PROMPT$TO    STX1  ! OPEN_FPT+58,,AUTO

     2709    23467    2   DCL SAVE_BREAK_TYPE SBIN;
     2710    23468
     2711    23469    2        SAVE_BREAK_TYPE = VNS_BREAK_TYPE;

  23469 16 006742   000102 235000 11                 LDA     VNS_BREAK_TYPE
        16 006743   200365 755100                    STA     SAVE_BREAK_TYPE,,AUTO

     2712    23470    2        VNS_BREAK_TYPE = %BREAK_EXIT;

  23470 16 006744   000102 450000 11                 STZ     VNS_BREAK_TYPE

     2713    23471             %INIT_STR( STR=VN_TO_, CODE=E_CMD_TO_PROMPT, TEST=YES, VECT=
             23471                 CHANGE_PROMPT.PROMPT_);

  23478 16 006745   000000 236000 xsym               LDQ     VN_TO_
        16 006746   000033 772000                    QRL     27
        16 006747   000000 620006                    EAX0    0,QL
        16 006750   040000 106440                    CMPC    fill='040'O
        16 006751   000000 200010 xsym               ADSC9   VN_TO_                   cn=1,n=*X0
        16 006752   000064 000001 17                 ADSC9   52                       cn=0,n=1
        16 006753   006761 601000 16                 TNZ     s:23483

  23480 16 006754   000236 630400 17                 EPPR0   158
        16 006755   000074 631400 17                 EPPR1   60
        16 006756   000000 701000 xent               TSX1    VMD$ERRMSG
        16 006757   000000 011000                    NOP     0
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:376  

  23481 16 006760   006766 710000 16                 TRA     s:23494

  23483 16 006761   000000 635010                    EAA     0,X0
        16 006762   000002 771000                    ARL     2
        16 006763   000140 135007                    SBLA    96,DL
        16 006764   000241 236000 17                 LDQ     161
        16 006765   001104 757000 11                 STAQ    CHANGE_PROMPT+4

     2714    23494    3        DO WHILE VM_HEADER.TO$ = ADDR(NIL);

  23494 16 006766   007006 710000 16                 TRA     s:23502

     2715    23495    3             CALL XUR$GETCMD (CMD_TO$->BSD,OUT$,VN_TO_)

  23495 16 006767   000225 236000 17                 LDQ     149
        16 006770   200452 756100                    STQ     P2$+3,,AUTO
        16 006771   200027 630500                    EPPR0   OUT$,,AUTO
        16 006772   200451 450500                    STP0    P2$+2,,AUTO
        16 006773   200005 236100                    LDQ     CMD_TO$,,AUTO
        16 006774   200450 756100                    STQ     P2$+1,,AUTO
        16 006775   200450 630500                    EPPR0   P2$+1,,AUTO
        16 006776   000074 631400 17                 EPPR1   60
        16 006777   000000 701000 xent               TSX1    XUR$GETCMD
        16 007000   007004 702000 16                 TSX2    s:23500

     2716    23496    4             WHENRETURN DO;

     2717    23497    4                  CALL PROCESS_CMD ALTRET(ALT);

  23497 16 007001   003513 701000 16                 TSX1    PROCESS_CMD
        16 007002   007016 702000 16                 TSX2    ALT

     2718    23498    4             END;

  23498 16 007003   007006 710000 16                 TRA     s:23502

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:377  
     2719    23499    4             WHENALTRETURN DO;

     2720    23500    4                  CALL CMD_ERR ALTRET(ALT);

  23500 16 007004   002035 701000 16                 TSX1    CMD_ERR
        16 007005   007016 702000 16                 TSX2    ALT

     2721    23501    4             END;

     2722    23502    3        END;

  23502 16 007006   000000 470400 xsym               LDP0    VM_HEADER$
        16 007007   000031 236100                    LDQ     25,,PR0
        16 007010   000032 116000 17                 CMPQ    26
        16 007011   006767 600000 16                 TZE     s:23495

     2723    23503    2        VNS_BREAK_TYPE = SAVE_BREAK_TYPE;

  23503 16 007012   200365 235100                    LDA     SAVE_BREAK_TYPE,,AUTO
        16 007013   000102 755000 11                 STA     VNS_BREAK_TYPE

     2724    23504
     2725    23505    2        RETURN;

  23505 16 007014   200364 221300                    LDX1  ! OPEN_FPT+58,,AUTO
        16 007015   000001 702211                    TSX2  ! 1,X1

     2726    23506    2   ALT: ALTRETURN;

  23506 16 007016   200364 221300       ALT          LDX1  ! OPEN_FPT+58,,AUTO
        16 007017   000000 702211                    TSX2  ! 0,X1

     2727    23507
     2728    23508    2   END PROMPT$TO;
     2729    23509        %EJECT;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:378  
     2730    23510        /********************************************************************/
     2731    23511        /*I*
     2732    23512            NAME: DO$SEND
     2733    23513            PURPOSE: To prepare the message for transmission and pass it on to
     2734    23514                     MAILMAN to actually send it.
     2735    23515        */
     2736    23516        /********************************************************************/
     2737    23517
     2738    23518    1   DO$SEND: PROC ALTRET;

  23518 16 007020   200370 741300       DO$SEND      STX1  ! SAVE_BREAK_TYPE+3,,AUTO

     2739    23519    2   DCL NUM_RECORDS SBIN;
     2740    23520    2   DCL UNIQUE_ID_STRING CHAR (128);
     2741    23521    2   DCL PTR$_OFFSET SBIN;
     2742    23522    2   DCL NEXT$ PTR;
     2743    23523    2   DCL PREV$ PTR;
     2744    23524    2   DCL NEW_TYPE UBIN;
     2745    23525    2   DCL PAGESIZE SBIN WORD STATIC INIT(4096);
     2746    23526
     2747    23527        %VM_ADD_HEAD (NAME=FWD_ENCL_HEAD,STCLASS=STATIC);
     2748    23556        %VM_INFOKEY (STCLASS=STATIC);
     2749    23573        /*
     2750    23574            Don't resend it if we've already sent it, unless it's been changed.
     2751    23575        */
     2752    23576    2        IF DID_SEND

  23576 16 007021   200017 234100                    SZN     DID_SEND,,AUTO
        16 007022   007024 605000 16                 TPL     OPENCG

     2753    23577    2        THEN
     2754    23578    2             RETURN;

  23578 16 007023   000001 702211                    TSX2  ! 1,X1

     2755    23579        /*
     2756    23580           Open the MAILCG if it's not currently open.  If it can't be opened, or
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:379  
     2757    23581           if it opens and we can't get a test message through to the mailman,
     2758    23582           complain to the user, wait thirty seconds, and try again.
     2759    23583        */
     2760    23584    2   OPENCG:
     2761    23585    2        CALL VNS$BREAK_DISABLE;

  23585 16 007024   000017 631400 17    OPENCG       EPPR1   15
        16 007025   000000 701000 xent               TSX1    VNS$BREAK_DISABLE
        16 007026   000000 011000                    NOP     0

     2762    23586    2        CALL M$OPEN (OPEN_MAILCG) ALTRET (E_CG);

  23586 16 007027   001232 630400 13                 EPPR0   OPEN_MAILCG
        16 007030   450000 713400                    CLIMB   alt,open
        16 007031   410400 401760                    pmme    nvectors=18
        16 007032   007042 702000 16                 TSX2    E_CG

     2763    23587    2        VM_CGBUFFER.COMMAND = %VO_DUMMY#;

  23587 16 007033   000015 235007                    LDA     13,DL
        16 007034   001200 755000 11                 STA     VM_CGBUFFER+2

     2764    23588    2        CALL M$WRITE (WRITE_MAILCG) ALTRET (E_CG);

  23588 16 007035   001162 630400 11                 EPPR0   WRITE_MAILCG
        16 007036   440001 713400                    CLIMB   alt,write
        16 007037   401400 401760                    pmme    nvectors=4
        16 007040   007042 702000 16                 TSX2    E_CG

     2765    23589    3        DO WHILE ('0'B);

  23589 16 007041   007077 710000 16                 TRA     s:23618

  23588 16 007042                       E_CG         null
     2766    23590    3   E_CG:     ;
     2767    23591    3             CALL M$SENV;

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:380  
  23591 16 007042   010011 713400                    CLIMB   4105
        16 007043   000000 401760                    pmme    nvectors=0

     2768    23592    3             CLOSE_SAVE.V.DCB# = M$MAIL_COMGROUP_NUM;

  23592 16 007044   000000 720000 xsym               LXL0    M$MAIL_COMGROUP_NUM
        16 007045   001002 740000 11                 STX0    CLOSE_SAVE+26

     2769    23593    4             CALL M$CLOSE (CLOSE_SAVE) WHENALTRETURN DO; END;

  23593 16 007046   000750 630400 11                 EPPR0   CLOSE_SAVE
        16 007047   450001 713400                    CLIMB   alt,close
        16 007050   406000 401760                    pmme    nvectors=13
        16 007051   007053 702000 16                 TSX2    s:23594
        16 007052   007053 710000 16                 TRA     s:23594

     2770    23594    3             CALL VMA$ERRMSG (E_NCG1);

  23594 16 007053   000051 630400 17                 EPPR0   41
        16 007054   000003 631400 17                 EPPR1   3
        16 007055   000000 701000 xent               TSX1    VMA$ERRMSG
        16 007056   000000 011000                    NOP     0

     2771    23595    3             CALL MON_ERR;

  23595 16 007057   002075 701000 16                 TSX1    MON_ERR
        16 007060   000000 011000                    NOP     0

     2772    23596    3             IF B$JIT.MODE = %M_INT#

  23596 16 007061   000000 470400 xsym               LDP0    B$JIT$
        16 007062   000000 236100                    LDQ     0,,PR0
        16 007063   740000 376003                    ANQ     -16384,DU
        16 007064   140000 116003                    CMPQ    49152,DU
        16 007065   007075 601000 16                 TNZ     s:23602

     2773    23597    4             THEN DO;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:381  

     2774    23598    4                  CALL VNS$BREAK_ENABLE;

  23598 16 007066   000017 631400 17                 EPPR1   15
        16 007067   000000 701000 xent               TSX1    VNS$BREAK_ENABLE
        16 007070   000000 011000                    NOP     0

     2775    23599    4                  CALL M$WAIT (TAKE_THIRTY);

  23599 16 007071   001130 630400 13                 EPPR0   TAKE_THIRTY
        16 007072   020006 713400                    CLIMB   8198
        16 007073   400400 401760                    pmme    nvectors=2

     2776    23600    4                  GOTO OPENCG;

  23600 16 007074   007024 710000 16                 TRA     OPENCG

     2777    23601    4             END;
     2778    23602    3             ALTRETURN;

  23602 16 007075   200370 221300                    LDX1  ! SAVE_BREAK_TYPE+3,,AUTO
        16 007076   000000 702211                    TSX2  ! 0,X1

     2779    23603    3        END;

     2780    23604        /*
     2781    23605             ***** Construct a unique-ID string for this message, and put it
     2782    23606                   in the header.  The strings take one of two forms:
     2783    23607
     2784    23608                 <yymmdd.hhmmssss.sysidn@host.CP6> if this system supports
     2785    23609                    intersystem mail (and its own name is known), or
     2786    23610
     2787    23611                 <yymmdd.hhmmssss.sysidn@CP6> if MAIL is running standalone.
     2788    23612
     2789    23613                   This code is bypassed if the SENDer has included a MESSAGE ID:
     2790    23614                   command in a file being sent;  this is possible only for FMSEC
     2791    23615                   users, and is used when incoming network mailgrams contain an ID.
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:382  
     2792    23616
     2793    23617        */
     2794    23618    2        IF NOT ID_ASSIGNED

  23618 16 007077   200022 234100                    SZN     ID_ASSIGNED,,AUTO
        16 007100   007222 604000 16                 TMI     s:23643

     2795    23619    3        THEN DO;

     2796    23620    3             CALL M$TIME (GET_ANSI_TIME);

  23620 16 007101   001202 630400 13                 EPPR0   GET_ANSI_TIME
        16 007102   020004 713400                    CLIMB   8196
        16 007103   402000 401760                    pmme    nvectors=5

     2797    23621    3             CALL CONCAT (UNIQUE_ID_STRING, '<', ANSI_DATE, '.', ANSI_TIME, '.');

  23621 16 007104   074000 236003                    LDQ     30720,DU
        16 007105   200372 756100                    STQ     UNIQUE_ID_STRING,,AUTO
        16 007106   040100 100400                    MLR     fill='040'O
        16 007107   000106 000006 11                 ADSC9   ANSI_DATE                cn=0,n=6
        16 007110   200372 200006                    ADSC9   UNIQUE_ID_STRING,,AUTO   cn=1,n=6
        16 007111   000056 236007                    LDQ     46,DL
        16 007112   200373 552104                    STBQ    @PROMPT_CODE,'04'O,AUTO
        16 007113   000104 237000 11                 LDAQ    ANSI_TIME
        16 007114   200374 757100                    STAQ    @NODE$,,AUTO
        16 007115   040100 100400                    MLR     fill='040'O
        16 007116   000242 000001 17                 ADSC9   162                      cn=0,n=1
        16 007117   200376 000160                    ADSC9   @TYPE,,AUTO              cn=0,n=112

     2798    23622    3             CALL INDEX (SIZE, ' ', UNIQUE_ID_STRING);

  23622 16 007120   000000 124500                    SCM     mask='000'O
        16 007121   200372 000200                    ADSC9   UNIQUE_ID_STRING,,AUTO   cn=0,n=128
        16 007122   000064 000001 17                 ADSC9   52                       cn=0,n=1
        16 007123   200133 000100                    ARG     SIZE,,AUTO

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:383  
     2799    23623    3             CALL BINCHAR (SUBSTR(UNIQUE_ID_STRING, SIZE, 6), B$JIT.SYSID);

  23623 16 007124   000000 470400 xsym               LDP0    B$JIT$
        16 007125   000000 236100                    LDQ     0,,PR0
        16 007126   777777 376007                    ANQ     -1,DL
        16 007127   000000 235003                    LDA     0,DU
        16 007130   200450 757100                    STAQ    P2$+1,,AUTO
        16 007131   200133 235100                    LDA     SIZE,,AUTO
        16 007132   000105 301500                    BTD
        16 007133   200450 000010                    NDSC9   P2$+1,,AUTO              cn=0,s=lsgnf,sf=0,n=8
        16 007134   200372 030006                    NDSC9   UNIQUE_ID_STRING,A,AUTO  cn=0,s=nosgn,sf=0,n=6

     2800    23624    3             SIZE = SIZE + 6;

  23624 16 007135   000006 236007                    LDQ     6,DL
        16 007136   200133 056100                    ASQ     SIZE,,AUTO

     2801    23625    3             IF VM_SITENAME ~= ' '

  23625 16 007137   040000 106400                    CMPC    fill='040'O
        16 007140   000000 000010 xsym               ADSC9   VM_SITENAME              cn=0,n=8
        16 007141   000064 000001 17                 ADSC9   52                       cn=0,n=1
        16 007142   007200 600000 16                 TZE     s:23633

     2802    23626    4             THEN DO;

     2803    23627    4                  CALL INSERT (UNIQUE_ID_STRING, SIZE, , '@', VM_SITENAME);

  23627 16 007143   200133 720100                    LXL0    SIZE,,AUTO
        16 007144   777577 620010                    EAX0    -129,X0
        16 007145   777777 660003                    ERX0    -1,DU
        16 007146   200133 235100                    LDA     SIZE,,AUTO
        16 007147   040145 100400                    MLR     fill='040'O
        16 007150   000243 000001 17                 ADSC9   163                      cn=0,n=1
        16 007151   200372 000010                    ADSC9   UNIQUE_ID_STRING,A,AUTO  cn=0,n=*X0
        16 007152   200133 236100                    LDQ     SIZE,,AUTO
        16 007153   000177 116007                    CMPQ    127,DL
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:384  
        16 007154   007162 605000 16                 TPL     s:23628
        16 007155   777600 620006                    EAX0    -128,QL
        16 007156   777777 660003                    ERX0    -1,DU
        16 007157   040146 100400                    MLR     fill='040'O
        16 007160   000000 000010 xsym               ADSC9   VM_SITENAME              cn=0,n=8
        16 007161   200372 200010                    ADSC9   UNIQUE_ID_STRING,Q,AUTO  cn=1,n=*X0

     2804    23628    4                  CALL INDEX (SIZE, ' ', UNIQUE_ID_STRING);

  23628 16 007162   000000 124500                    SCM     mask='000'O
        16 007163   200372 000200                    ADSC9   UNIQUE_ID_STRING,,AUTO   cn=0,n=128
        16 007164   000064 000001 17                 ADSC9   52                       cn=0,n=1
        16 007165   200133 000100                    ARG     SIZE,,AUTO

     2805    23629    4                  CALL INSERT (UNIQUE_ID_STRING, SIZE, , '.CP6>');

  23629 16 007166   200133 720100                    LXL0    SIZE,,AUTO
        16 007167   777577 620010                    EAX0    -129,X0
        16 007170   777777 660003                    ERX0    -1,DU
        16 007171   200133 235100                    LDA     SIZE,,AUTO
        16 007172   040145 100400                    MLR     fill='040'O
        16 007173   001540 000005 13                 ADSC9   E_PASTDEFER+8            cn=0,n=5
        16 007174   200372 000010                    ADSC9   UNIQUE_ID_STRING,A,AUTO  cn=0,n=*X0

     2806    23630    4                  SIZE = SIZE + 5;

  23630 16 007175   000005 236007                    LDQ     5,DL
        16 007176   200133 056100                    ASQ     SIZE,,AUTO

     2807    23631    4             END;

  23631 16 007177   007211 710000 16                 TRA     s:23636

     2808    23632    4             ELSE DO;

     2809    23633    4                  CALL INSERT (UNIQUE_ID_STRING, SIZE, , '@CP6>');

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:385  
  23633 16 007200   200133 720100                    LXL0    SIZE,,AUTO
        16 007201   777577 620010                    EAX0    -129,X0
        16 007202   777777 660003                    ERX0    -1,DU
        16 007203   200133 235100                    LDA     SIZE,,AUTO
        16 007204   040145 100400                    MLR     fill='040'O
        16 007205   001542 000005 13                 ADSC9   E_PASTDEFER+10           cn=0,n=5
        16 007206   200372 000010                    ADSC9   UNIQUE_ID_STRING,A,AUTO  cn=0,n=*X0

     2810    23634    4                  SIZE = SIZE + 5;

  23634 16 007207   000005 236007                    LDQ     5,DL
        16 007210   200133 056100                    ASQ     SIZE,,AUTO

     2811    23635    4             END;

     2812    23636    3             CALL ALLOC$TEXTC (VM_HEADER.UNIQUE_ID$, SIZE, UNIQUE_ID_STRING)

  23636 16 007211   200372 631500                    EPPR1   UNIQUE_ID_STRING,,AUTO
        16 007212   200441 451500                    STP1    @TEXT,,AUTO
        16 007213   200133 633500                    EPPR3   SIZE,,AUTO
        16 007214   200440 453500                    STP3    @SIZE,,AUTO
        16 007215   000000 236000 xsym               LDQ     VM_HEADER$
        16 007216   000032 036003                    ADLQ    26,DU
        16 007217   200437 756100                    STQ     @FLD$,,AUTO
        16 007220   006011 701000 16                 TSX1    ALLOC$TEXTC
        16 007221   010247 702000 16                 TSX2    E_ALLOCATE

     2813    23637    3               ALTRET(E_ALLOCATE);
     2814    23638    3        END;

     2815    23639        /*
     2816    23640             ***** Save count of body records so that records appended by this
     2817    23641                   routine can be removed on exit.
     2818    23642        */
     2819    23643    2        NUM_RECORDS = VM_HEADER.NUM_RECORDS;

  23643 16 007222   000000 470400 xsym               LDP0    VM_HEADER$
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:386  
        16 007223   000011 235100                    LDA     9,,PR0
        16 007224   200371 755100                    STA     NUM_RECORDS,,AUTO

     2820    23644        /*
     2821    23645             ***** If there is a signature (SIGNED$), append it to the body.
     2822    23646        */
     2823    23647    2        IF VM_HEADER.SIGNED$ ~= ADDR(NIL)

  23647 16 007225   000027 236100                    LDQ     23,,PR0
        16 007226   000032 116000 17                 CMPQ    26
        16 007227   007314 600000 16                 TZE     s:23666

     2824    23648    3        THEN DO;

     2825    23649    3             VM_BODYREC.VALUE.COUNT = 0;

  23649 16 007230   000402 450000 11                 STZ     VM_BODYREC+1

     2826    23650    3             SIZE = 0;

  23650 16 007231   200133 450100                    STZ     SIZE,,AUTO

     2827    23651    3             CALL VMD$PUT_BODY (0,M$WORK_NUM,VM_HEADER.NUM_RECORDS,

  23651 16 007232   000110 237000 17                 LDAQ    72
        16 007233   200454 757100                    STAQ    P2$+5,,AUTO
        16 007234   200133 631500                    EPPR1   SIZE,,AUTO
        16 007235   200453 451500                    STP1    P2$+4,,AUTO
        16 007236   000000 236000 xsym               LDQ     VM_HEADER$
        16 007237   000011 036003                    ADLQ    9,DU
        16 007240   200452 756100                    STQ     P2$+3,,AUTO
        16 007241   000052 237000 17                 LDAQ    42
        16 007242   200450 757100                    STAQ    P2$+1,,AUTO
        16 007243   200450 630500                    EPPR0   P2$+1,,AUTO
        16 007244   000037 631400 17                 EPPR1   31
        16 007245   000000 701000 xent               TSX1    VMD$PUT_BODY
        16 007246   010254 702000 16                 TSX2    E_PMME
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:387  

     2828    23652    3               SIZE,0,VM_BODYREC) ALTRET(E_PMME);
     2829    23653    3             VM_HEADER.NUM_RECORDS = VM_HEADER.NUM_RECORDS + 1;

  23653 16 007247   000000 470400 xsym               LDP0    VM_HEADER$
        16 007250   000011 235100                    LDA     9,,PR0
        16 007251   000001 035007                    ADLA    1,DL
        16 007252   000011 755100                    STA     9,,PR0

     2830    23654    3             SIZE = VM_HEADER.SIGNED$ -> X$STRING.SIZ;

  23654 16 007253   000027 471500                    LDP1    23,,PR0
        16 007254   000100 101500                    MRL     fill='000'O
        16 007255   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
        16 007256   200133 000004                    ADSC9   SIZE,,AUTO               cn=0,n=4

     2831    23655    3             VM_BODYREC.VALUE.DATA = VM_HEADER.SIGNED$ -> X$STRING.TEXT;

  23655 16 007257   000027 471500                    LDP1    23,,PR0
        16 007260   000100 101500                    MRL     fill='000'O
        16 007261   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
        16 007262   200450 000002                    ADSC9   P2$+1,,AUTO              cn=0,n=2
        16 007263   200450 220100                    LDX0    P2$+1,,AUTO
        16 007264   040000 100540                    MLR     fill='040'O
        16 007265   100000 200010                    ADSC9   0,,PR1                   cn=1,n=*X0
        16 007266   000403 000454 11                 ADSC9   VM_BODYREC+2             cn=0,n=300

     2832    23656    3             VM_BODYREC.VALUE.COUNT = VM_HEADER.SIGNED$ -> X$STRING.SIZ;

  23656 16 007267   000027 471500                    LDP1    23,,PR0
        16 007270   000000 101500                    MRL     fill='000'O
        16 007271   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
        16 007272   000402 000004 11                 ADSC9   VM_BODYREC+1             cn=0,n=4

     2833    23657    3             CALL VMD$PUT_BODY (0,M$WORK_NUM,VM_HEADER.NUM_RECORDS,

  23657 16 007273   000110 237000 17                 LDAQ    72
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:388  
        16 007274   200454 757100                    STAQ    P2$+5,,AUTO
        16 007275   200133 631500                    EPPR1   SIZE,,AUTO
        16 007276   200453 451500                    STP1    P2$+4,,AUTO
        16 007277   000000 236000 xsym               LDQ     VM_HEADER$
        16 007300   000011 036003                    ADLQ    9,DU
        16 007301   200452 756100                    STQ     P2$+3,,AUTO
        16 007302   000052 237000 17                 LDAQ    42
        16 007303   200450 757100                    STAQ    P2$+1,,AUTO
        16 007304   200450 630500                    EPPR0   P2$+1,,AUTO
        16 007305   000037 631400 17                 EPPR1   31
        16 007306   000000 701000 xent               TSX1    VMD$PUT_BODY
        16 007307   010254 702000 16                 TSX2    E_PMME

     2834    23658    3               SIZE,0,VM_BODYREC) ALTRET(E_PMME);
     2835    23659    3             VM_HEADER.NUM_RECORDS = VM_HEADER.NUM_RECORDS + 1;

  23659 16 007310   000000 470400 xsym               LDP0    VM_HEADER$
        16 007311   000011 235100                    LDA     9,,PR0
        16 007312   000001 035007                    ADLA    1,DL
        16 007313   000011 755100                    STA     9,,PR0

     2836    23660    3        END;                      /* Append signature */

     2837    23661        /*
     2838    23662             ***** If send was entered to handle a forward command
     2839    23663                   then it is necessary to now append the forwarded
     2840    23664                   message to the current body ...
     2841    23665        */
     2842    23666    2        IF ENTRY_REASON = %MAIL_FORWARD OR ENTRY_REASON = %MAIL_FORWARD_ENCL

  23666 16 007314   200136 235100                    LDA     ENTRY_REASON,,AUTO
        16 007315   000003 115007                    CMPA    3,DL
        16 007316   007321 600000 16                 TZE     s:23668
        16 007317   000006 115007                    CMPA    6,DL
        16 007320   010171 601000 16                 TNZ     s:23837

     2843    23667    3        THEN DO;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:389  

     2844    23668    3             VM_BODYREC.VALUE.DATA = ' ';

  23668 16 007321   040000 100400                    MLR     fill='040'O
        16 007322   000064 000001 17                 ADSC9   52                       cn=0,n=1
        16 007323   000403 000454 11                 ADSC9   VM_BODYREC+2             cn=0,n=300

     2845    23669    3             SIZE = 1;

  23669 16 007324   000001 236007                    LDQ     1,DL
        16 007325   200133 756100                    STQ     SIZE,,AUTO

     2846    23670    3             VM_BODYREC.VALUE.COUNT = 1;

  23670 16 007326   000402 756000 11                 STQ     VM_BODYREC+1

     2847    23671    3             CALL VMD$PUT_BODY (0,M$WORK_NUM,VM_HEADER.NUM_RECORDS,

  23671 16 007327   000110 237000 17                 LDAQ    72
        16 007330   200454 757100                    STAQ    P2$+5,,AUTO
        16 007331   200133 631500                    EPPR1   SIZE,,AUTO
        16 007332   200453 451500                    STP1    P2$+4,,AUTO
        16 007333   000000 236000 xsym               LDQ     VM_HEADER$
        16 007334   000011 036003                    ADLQ    9,DU
        16 007335   200452 756100                    STQ     P2$+3,,AUTO
        16 007336   000052 237000 17                 LDAQ    42
        16 007337   200450 757100                    STAQ    P2$+1,,AUTO
        16 007340   200450 630500                    EPPR0   P2$+1,,AUTO
        16 007341   000037 631400 17                 EPPR1   31
        16 007342   000000 701000 xent               TSX1    VMD$PUT_BODY
        16 007343   010254 702000 16                 TSX2    E_PMME

     2848    23672    3               SIZE,0,VM_BODYREC) ALTRET(E_PMME);
     2849    23673    3             VM_HEADER.NUM_RECORDS = VM_HEADER.NUM_RECORDS + 1;

  23673 16 007344   000000 470400 xsym               LDP0    VM_HEADER$
        16 007345   000011 235100                    LDA     9,,PR0
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:390  
        16 007346   000001 035007                    ADLA    1,DL
        16 007347   000011 755100                    STA     9,,PR0

     2850    23674    3             VM_HEADER.STATUS.FORWARDED = %YES#;

  23674 16 007350   000020 236003                    LDQ     16,DU
        16 007351   000012 256100                    ORSQ    10,,PR0

     2851    23675    3             CLOSE_SAVE.V.DCB# = M$SI_NUM;

  23675 16 007352   000000 720000 xsym               LXL0    M$SI_NUM
        16 007353   001002 740000 11                 STX0    CLOSE_SAVE+26

     2852    23676    3             CALL M$CLOSE (CLOSE_SAVE) ALTRET(E_PMME);

  23676 16 007354   000750 630400 11                 EPPR0   CLOSE_SAVE
        16 007355   450001 713400                    CLIMB   alt,close
        16 007356   406000 401760                    pmme    nvectors=13
        16 007357   010254 702000 16                 TSX2    E_PMME

     2853    23677    3             CALL M$OPEN (OPEN_FORWARD_FILE) ALTRET(E_PMME);

  23677 16 007360   000334 630400 13                 EPPR0   OPEN_FORWARD_FILE
        16 007361   450000 713400                    CLIMB   alt,open
        16 007362   410400 401760                    pmme    nvectors=18
        16 007363   010254 702000 16                 TSX2    E_PMME

     2854    23678    3             CMD_DCB = M$EDIT_NUM;

  23678 16 007364   000000 235000 13                 LDA     M$EDIT_NUM
        16 007365   000067 755000 11                 STA     CMD_DCB

     2855    23679    4             DO FOREVER;

     2856    23680    4                  CALL READ_CC ALTRET(END_APPEND);

  23680 16 007366   002114 701000 16                 TSX1    READ_CC
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:391  
        16 007367   007427 702000 16                 TSX2    END_APPEND

     2857    23681    4                  VM_BODYREC.VALUE.COUNT = SIZE;

  23681 16 007370   200133 235100                    LDA     SIZE,,AUTO
        16 007371   000402 755000 11                 STA     VM_BODYREC+1

     2858    23682    4                  IF SIZE > 0

  23682 16 007372   007377 604400 16                 TMOZ    s:23685

     2859    23683    4                  THEN
     2860    23684    4                       VM_BODYREC.VALUE.DATA = SUBSTR (CMD_BUF, 0, SIZE);

  23684 16 007373   000000 620005                    EAX0    0,AL
        16 007374   040000 100440                    MLR     fill='040'O
        16 007375   000114 000010 11                 ADSC9   CMD_BUF                  cn=0,n=*X0
        16 007376   000403 000454 11                 ADSC9   VM_BODYREC+2             cn=0,n=300

     2861    23685    4                  CALL VMD$PUT_BODY (0,M$WORK_NUM,VM_HEADER.NUM_RECORDS,

  23685 16 007377   000054 470400 17                 LDP0    44
        16 007400   000000 471500                    LDP1    0,,PR0
        16 007401   000000 720000 xsym               LXL0    M$SI_NUM
        16 007402   100000 473510                    LDP3    0,X0,PR1
        16 007403   300003 634500                    EPPR4   3,,PR3
        16 007404   200456 454500                    STP4    P2$+7,,AUTO
        16 007405   000110 237000 17                 LDAQ    72
        16 007406   200454 757100                    STAQ    P2$+5,,AUTO
        16 007407   200133 635500                    EPPR5   SIZE,,AUTO
        16 007410   200453 455500                    STP5    P2$+4,,AUTO
        16 007411   000000 236000 xsym               LDQ     VM_HEADER$
        16 007412   000011 036003                    ADLQ    9,DU
        16 007413   200452 756100                    STQ     P2$+3,,AUTO
        16 007414   000052 237000 17                 LDAQ    42
        16 007415   200450 757100                    STAQ    P2$+1,,AUTO
        16 007416   200450 630500                    EPPR0   P2$+1,,AUTO
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:392  
        16 007417   000055 631400 17                 EPPR1   45
        16 007420   000000 701000 xent               TSX1    VMD$PUT_BODY
        16 007421   010254 702000 16                 TSX2    E_PMME

     2862    23686    4                    SIZE,0,VM_BODYREC,DCBADDR(M$SI_NUM)->F$DCB.DVBYTE) ALTRET(E_PMME);
     2863    23687    4                  VM_HEADER.NUM_RECORDS = VM_HEADER.NUM_RECORDS + 1;

  23687 16 007422   000000 470400 xsym               LDP0    VM_HEADER$
        16 007423   000011 235100                    LDA     9,,PR0
        16 007424   000001 035007                    ADLA    1,DL
        16 007425   000011 755100                    STA     9,,PR0

     2864    23688    4             END;                /* Do forever ... end */

  23688 16 007426   007366 710000 16                 TRA     s:23680

  23686 16 007427                       END_APPEND   null
     2865    23689    3   END_APPEND: ;
     2866    23690    4             IF ENTRY_REASON = %MAIL_FORWARD_ENCL THEN DO;

  23690 16 007427   200136 235100                    LDA     ENTRY_REASON,,AUTO
        16 007430   000006 115007                    CMPA    6,DL
        16 007431   010161 601000 16                 TNZ     s:23830

     2867    23691    4                  CALL M$OPEN (OPEN_FORWARD_ENCL_FILE) ALTRET (E_PMME);

  23691 16 007432   001030 630400 13                 EPPR0   OPEN_FORWARD_ENCL_FILE
        16 007433   450000 713400                    CLIMB   alt,open
        16 007434   410400 401760                    pmme    nvectors=18
        16 007435   010254 702000 16                 TSX2    E_PMME

     2868    23692    5                  IF VM_ENCL_HEAD.NUM_ENTRIES = 0 THEN DO;

  23692 16 007436   000000 470400 xsym               LDP0    VM_ENCLLIST$
        16 007437   000001 235100                    LDA     1,,PR0
        16 007440   007633 601000 16                 TNZ     s:23737

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:393  
     2869    23693                       /* There are no other enclosures. Just append
     2870    23694                          the ones from the forwarded mailgram.      */
     2871    23695    5   GET_ENCL_LIST:      CALL VMA$GET_ADD_RECORD (%VM_TYPE_ENCL,VM_ENCLLIST_,

  23695 16 007441   000244 630400 17    GET_ENCL_LI* EPPR0   164
        16 007442   000024 631400 17                 EPPR1   20
        16 007443   000000 701000 xent               TSX1    VMA$GET_ADD_RECORD
        16 007444   007446 702000 16                 TSX2    s:23698
        16 007445   007464 710000 16                 TRA     s:23705

     2872    23696    5                         M$ENCL_NUM,0)
     2873    23697    6                       WHENALTRETURN DO;

     2874    23698    7                            IF B$TCB.ALT$->B$ALT.ERR.CODE = %E$LD THEN DO;

  23698 16 007446   000000 470400 xsym               LDP0    B$TCB$
        16 007447   000000 471500                    LDP1    0,,PR0
        16 007450   100102 236100                    LDQ     66,,PR1
        16 007451   377770 376007                    ANQ     131064,DL
        16 007452   000070 116007                    CMPQ    56,DL
        16 007453   007464 601000 16                 TNZ     s:23705

     2875    23699    7                                 VBOUND(VM_ENCLLIST_) = VBOUND(VM_ENCLLIST_)

  23699 16 007454   000000 236000 xsym               LDQ     VM_ENCLLIST_
        16 007455   000020 772000                    QRL     16
        16 007456   001354 036000 11                 ADLQ    PAGESIZE
        16 007457   000020 736000                    QLS     16
        16 007460   000000 676000 xsym               ERQ     VM_ENCLLIST_
        16 007461   000123 376000 17                 ANQ     83
        16 007462   000000 656000 xsym               ERSQ    VM_ENCLLIST_

     2876    23700    7                                   + PAGESIZE;
     2877    23701    7                                 GOTO GET_ENCL_LIST;

  23701 16 007463   007441 710000 16                 TRA     GET_ENCL_LIST

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:394  
     2878    23702    7                            END;
     2879    23703    6                       END; /* WHENALTRETURN */
     2880    23704
     2881    23705    5                       ENCL$ = VM_ENCL_HEAD.HEAD$;

  23705 16 007464   000000 470400 xsym               LDP0    VM_ENCLLIST$
        16 007465   000003 236100                    LDQ     3,,PR0
        16 007466   000112 756000 11                 STQ     ENCL$

     2882    23706    6                       DO I = 0 TO VM_ENCL_HEAD.NUM_ENTRIES - 1;

  23706 16 007467   200134 450100                    STZ     I,,AUTO
        16 007470   007625 710000 16                 TRA     s:23726+1

     2883    23707    7                            IF VM_ENCLOS.FLAGS.DELETED = %NO# THEN DO;

  23707 16 007471   000112 470400 11                 LDP0    ENCL$
        16 007472   000002 234100                    SZN     2,,PR0
        16 007473   007622 604000 16                 TMI     s:23725

     2884    23708    8                                 DO J = 0 TO VM_ENCLOS.NRECS - 1;

  23708 16 007474   200135 450100                    STZ     J,,AUTO
        16 007475   007613 710000 16                 TRA     s:23722+1

     2885    23709    8   GET_ENCL_REC1:                     CALL VMD$GET_ENCL(0,M$ENCL_NUM,J,SIZE,,,,

  23709 16 007476   000112 470400 11    GET_ENCL_RE* LDP0    ENCL$
        16 007477   000012 236100                    LDQ     10,,PR0
        16 007500   000033 772000                    QRL     27
        16 007501   000144 136007                    SBLQ    100,DL
        16 007502   200450 756100                    STQ     P2$+1,,AUTO
        16 007503   000127 236000 17                 LDQ     87
        16 007504   200461 756100                    STQ     P2$+10,,AUTO
        16 007505   200450 631500                    EPPR1   P2$+1,,AUTO
        16 007506   200460 451500                    STP1    P2$+9,,AUTO
        16 007507   000032 236000 17                 LDQ     26
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:395  
        16 007510   000032 235000 17                 LDA     26
        16 007511   200456 757100                    STAQ    P2$+7,,AUTO
        16 007512   000032 236000 17                 LDQ     26
        16 007513   200455 756100                    STQ     P2$+6,,AUTO
        16 007514   200133 633500                    EPPR3   SIZE,,AUTO
        16 007515   200454 453500                    STP3    P2$+5,,AUTO
        16 007516   200135 634500                    EPPR4   J,,AUTO
        16 007517   200453 454500                    STP4    P2$+4,,AUTO
        16 007520   000246 236000 17                 LDQ     166
        16 007521   200452 756100                    STQ     P2$+3,,AUTO
        16 007522   000052 236000 17                 LDQ     42
        16 007523   200451 756100                    STQ     P2$+2,,AUTO
        16 007524   200451 630500                    EPPR0   P2$+2,,AUTO
        16 007525   000126 631400 17                 EPPR1   86
        16 007526   000000 701000 xent               TSX1    VMD$GET_ENCL
        16 007527   007531 702000 16                 TSX2    s:23712
        16 007530   007547 710000 16                 TRA     s:23718

     2886    23710    8                                        VM_ENCLOS.TYPE-%VM_TYPE_ENCL,VM_ENCLREC$)
     2887    23711    9                                      WHENALTRETURN DO;

     2888    23712   10                                           IF B$TCB.ALT$->B$ALT.ERR.CODE = %E$LD THEN
             23712                                                    DO;

  23712 16 007531   000000 470400 xsym               LDP0    B$TCB$
        16 007532   000000 471500                    LDP1    0,,PR0
        16 007533   100102 236100                    LDQ     66,,PR1
        16 007534   377770 376007                    ANQ     131064,DL
        16 007535   000070 116007                    CMPQ    56,DL
        16 007536   007547 601000 16                 TNZ     s:23718

     2889    23713   10                                                VBOUND(VM_ENCLREC_) = VBOUND(
             23713                                                         VM_ENCLREC_)

  23713 16 007537   000000 236000 xsym               LDQ     VM_ENCLREC_
        16 007540   000020 772000                    QRL     16
        16 007541   001354 036000 11                 ADLQ    PAGESIZE
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:396  
        16 007542   000020 736000                    QLS     16
        16 007543   000000 676000 xsym               ERQ     VM_ENCLREC_
        16 007544   000123 376000 17                 ANQ     83
        16 007545   000000 656000 xsym               ERSQ    VM_ENCLREC_

     2890    23714   10                                                  + PAGESIZE;
     2891    23715   10                                                GOTO GET_ENCL_REC1;

  23715 16 007546   007476 710000 16                 TRA     GET_ENCL_REC1

     2892    23716   10                                           END;
     2893    23717    9                                      END; /* WHENALTRETURN */
     2894    23718    8                                      CALL VMD$PUT_ENCL (0,M$WORK_NUM,J,SIZE,

  23718 16 007547   000054 470400 17                 LDP0    44
        16 007550   000000 471500                    LDP1    0,,PR0
        16 007551   000001 720000 13                 LXL0    M$ENCL_NUM
        16 007552   100000 473510                    LDP3    0,X0,PR1
        16 007553   000112 474400 11                 LDP4    ENCL$
        16 007554   400012 236100                    LDQ     10,,PR4
        16 007555   000033 772000                    QRL     27
        16 007556   000144 136007                    SBLQ    100,DL
        16 007557   200450 756100                    STQ     P2$+1,,AUTO
        16 007560   000127 236000 17                 LDQ     87
        16 007561   200461 756100                    STQ     P2$+10,,AUTO
        16 007562   200450 635500                    EPPR5   P2$+1,,AUTO
        16 007563   200460 455500                    STP5    P2$+9,,AUTO
        16 007564   300003 636500                    EPPR6   3,,PR3
        16 007565   200457 456500                    STP6    P2$+8,,AUTO
        16 007566   000032 236000 17                 LDQ     26
        16 007567   200456 756100                    STQ     P2$+7,,AUTO
        16 007570   000052 236000 17                 LDQ     42
        16 007571   200455 756100                    STQ     P2$+6,,AUTO
        16 007572   200133 637500                    EPPR7   SIZE,,AUTO
        16 007573   200454 457500                    STP7    P2$+5,,AUTO
        16 007574   200135 630500                    EPPR0   J,,AUTO
        16 007575   200453 450500                    STP0    P2$+4,,AUTO
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:397  
        16 007576   000053 236000 17                 LDQ     43
        16 007577   200452 756100                    STQ     P2$+3,,AUTO
        16 007600   000052 236000 17                 LDQ     42
        16 007601   200451 756100                    STQ     P2$+2,,AUTO
        16 007602   200451 630500                    EPPR0   P2$+2,,AUTO
        16 007603   000126 631400 17                 EPPR1   86
        16 007604   000000 701000 xent               TSX1    VMD$PUT_ENCL
        16 007605   000000 011000                    NOP     0

     2895    23719    8                                        0,,DCBADDR(M$ENCL_NUM)->F$DCB.DVBYTE,
     2896    23720    8                                        VM_ENCLOS.TYPE-%VM_TYPE_ENCL,VM_ENCLREC$);
     2897    23721    8                                      VM_HEADER.NUM_ENCL_RECORDS = VM_HEADER.
             23721                                               NUM_ENCL_RECORDS + 1;

  23721 16 007606   000000 470400 xsym               LDP0    VM_HEADER$
        16 007607   000035 235100                    LDA     29,,PR0
        16 007610   000001 035007                    ADLA    1,DL
        16 007611   000035 755100                    STA     29,,PR0

     2898    23722    8                                 END; /* J */

  23722 16 007612   200135 054100                    AOS     J,,AUTO
        16 007613   000112 470400 11                 LDP0    ENCL$
        16 007614   200135 236100                    LDQ     J,,AUTO
        16 007615   007476 604000 16                 TMI     GET_ENCL_REC1
        16 007616   000011 116100                    CMPQ    9,,PR0
        16 007617   007476 602000 16                 TNC     GET_ENCL_REC1

     2899    23723    7                                 VM_ENCLOS.FLAGS.FORWARD = %YES#;

  23723 16 007620   200000 236003                    LDQ     65536,DU
        16 007621   000002 256100                    ORSQ    2,,PR0

     2900    23724    7                            END; /* IF DELETED = %NO# */

     2901    23725    6                            ENCL$ = VM_ENCLOS.NEXT$;

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:398  
  23725 16 007622   000000 236100                    LDQ     0,,PR0
        16 007623   000112 756000 11                 STQ     ENCL$

     2902    23726    6                       END; /* I */

  23726 16 007624   200134 054100                    AOS     I,,AUTO
        16 007625   000000 470400 xsym               LDP0    VM_ENCLLIST$
        16 007626   200134 236100                    LDQ     I,,AUTO
        16 007627   007471 604000 16                 TMI     s:23707
        16 007630   000001 116100                    CMPQ    1,,PR0
        16 007631   007471 602000 16                 TNC     s:23707

     2903    23727    5                  END; /* NUM_ENTRIES = 0 */

  23727 16 007632   010144 710000 16                 TRA     s:23824

     2904    23728    5                  ELSE DO;

     2905    23729                    /* This will be alot different, requiring screwing
     2906    23730                       around with pointers in the context and stuff like
     2907    23731                       that.
     2908    23732
     2909    23733                       Setup to read VM_ENCL_HEAD from *FORWARD_ENCL_FILE.
     2910    23734                       Since the record must be read in two step, the VMA
     2911    23735                       can't be used so build the key here.               */
     2912    23736
     2913    23737    5                       VM_INFOKEY.TYPE = %VM_TYPE_ENCL;

  23737 16 007633   000144 236003                    LDQ     100,DU
        16 007634   001364 552020 11                 STBQ    VM_INFOKEY,'20'O

     2914    23738    5                       VM_INFOKEY.MESSAGE_NUMBER = 0;

  23738 16 007635   000000 100400                    MLR     fill='000'O
        16 007636   000017 000004 17                 ADSC9   15                       cn=0,n=4
        16 007637   001364 400004 11                 ADSC9   VM_INFOKEY               cn=2,n=4

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:399  
     2915    23739    5                       READ_ENCL_FILE.KEY_ = VECTOR(VM_INFOKEY);

  23739 16 007640   000250 237000 17                 LDAQ    168
        16 007641   001064 757000 11                 STAQ    READ_ENCL_FILE+2

     2916    23740    5                       READ_ENCL_FILE.BUF_ = VECTOR(FWD_ENCL_HEAD);

  23740 16 007642   000252 237000 17                 LDAQ    170
        16 007643   001066 757000 11                 STAQ    READ_ENCL_FILE+4

     2917    23741    5                       CALL M$READ(READ_ENCL_FILE)

  23741 16 007644   001062 630400 11                 EPPR0   READ_ENCL_FILE
        16 007645   440000 713400                    CLIMB   alt,read
        16 007646   401400 401760                    pmme    nvectors=4
        16 007647   007651 702000 16                 TSX2    s:23743
        16 007650   007660 710000 16                 TRA     s:23752

     2918    23742    6                       WHENALTRETURN DO;

     2919    23743    6                            IF B$TCB.ALT$->B$ALT.ERR.CODE = %E$LD THEN

  23743 16 007651   000000 470400 xsym               LDP0    B$TCB$
        16 007652   000000 471500                    LDP1    0,,PR0
        16 007653   100102 236100                    LDQ     66,,PR1
        16 007654   377770 376007                    ANQ     131064,DL
        16 007655   000070 116007                    CMPQ    56,DL
        16 007656   010254 601000 16                 TNZ     E_PMME

  23743 16 007657   007660 710000 16                 TRA     s:23752

     2920    23744    6                                 ;/* Lost data is ok here */
     2921    23745    6                            ELSE
     2922    23746    6                                 GOTO E_PMME;
     2923    23747    6                       END; /* WHENALTRETURN */
     2924    23748
     2925    23749                    /* Next, setup to read then rest of the context record
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:400  
     2926    23750                       with CONT=YES                                      */
     2927    23751
     2928    23752    5                       READ_ENCL_FILE.V.DVBYTE.CONT# = %YES#;

  23752 16 007660   001000 236003                    LDQ     512,DU
        16 007661   001075 256000 11                 ORSQ    READ_ENCL_FILE+11

     2929    23753    5                       READ_ENCL_FILE.BUF_.BUF$ = VM_ENCL_HEAD.NEXT$;

  23753 16 007662   000000 470400 xsym               LDP0    VM_ENCLLIST$
        16 007663   000005 236100                    LDQ     5,,PR0
        16 007664   001067 756000 11                 STQ     READ_ENCL_FILE+5

     2930    23754    5                       READ_ENCL_FILE.BUF_.BOUND =

  23754 16 007665   001355 236000 11                 LDQ     FWD_ENCL_HEAD
        16 007666   000002 736000                    QLS     2
        16 007667   000035 136007                    SBLQ    29,DL
        16 007670   000020 736000                    QLS     16
        16 007671   001066 676000 11                 ERQ     READ_ENCL_FILE+4
        16 007672   000123 376000 17                 ANQ     83
        16 007673   001066 656000 11                 ERSQ    READ_ENCL_FILE+4

     2931    23755    5                         (FWD_ENCL_HEAD.ADDRESS_SIZE - SIZEW(FWD_ENCL_HEAD))*4 - 1;
     2932    23756    5                       CALL M$READ(READ_ENCL_FILE) ALTRET (E_PMME);

  23756 16 007674   001062 630400 11                 EPPR0   READ_ENCL_FILE
        16 007675   440000 713400                    CLIMB   alt,read
        16 007676   401400 401760                    pmme    nvectors=4
        16 007677   010254 702000 16                 TSX2    E_PMME

     2933    23757
     2934    23758                    /* Save the current value of ENCL$ for PREV$ in
     2935    23759                       in the next VM_ENCLOS                             */
     2936    23760
     2937    23761    5                       PREV$ = ENCL$;

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:401  
  23761 16 007700   000112 236000 11                 LDQ     ENCL$
        16 007701   200434 756100                    STQ     PREV$,,AUTO

     2938    23762
     2939    23763                    /* Position ENCL$ to the current ENCL.HEAD$.
     2940    23764                       Fix PREV$ to point to the new enclosures.         */
     2941    23765
     2942    23766    5                       ENCL$ = VM_ENCL_HEAD.HEAD$;

  23766 16 007702   000000 470400 xsym               LDP0    VM_ENCLLIST$
        16 007703   000003 236100                    LDQ     3,,PR0
        16 007704   000112 756000 11                 STQ     ENCL$

     2943    23767    5                       VM_ENCLOS.PREV$ = VM_ENCL_HEAD.NEXT$;

  23767 16 007705   000005 236100                    LDQ     5,,PR0
        16 007706   000112 471400 11                 LDP1    ENCL$
        16 007707   100001 756100                    STQ     1,,PR1

     2944    23768
     2945    23769                    /* Now position ENCL$ to the new stuff               */
     2946    23770    5                       ENCL$ = VM_ENCL_HEAD.NEXT$;

  23770 16 007710   000005 236100                    LDQ     5,,PR0
        16 007711   000112 756000 11                 STQ     ENCL$

     2947    23771
     2948    23772                    /* Fix NEXT$ to point to the current enclosures      */
     2949    23773    5                       VM_ENCLOS.NEXT$ = VM_ENCL_HEAD.HEAD$;

  23773 16 007712   000003 236100                    LDQ     3,,PR0
        16 007713   000112 471400 11                 LDP1    ENCL$
        16 007714   100000 756100                    STQ     0,,PR1

     2950    23774
     2951    23775                    /* Loop thru the forwarded enclosures                */
     2952    23776    6                       DO I = 0 TO FWD_ENCL_HEAD.NUM_ENTRIES - 1;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:402  

  23776 16 007715   200134 450100                    STZ     I,,AUTO
        16 007716   010140 710000 16                 TRA     s:23822+1

     2953    23777    6                            NEW_TYPE=VM_ENCLOS.TYPE + VM_ENCL_HEAD.NUM_ENTRIES;

  23777 16 007717   000000 470400 xsym               LDP0    VM_ENCLLIST$
        16 007720   000112 471400 11                 LDP1    ENCL$
        16 007721   100012 236100                    LDQ     10,,PR1
        16 007722   000033 772000                    QRL     27
        16 007723   000001 036100                    ADLQ    1,,PR0
        16 007724   200435 756100                    STQ     NEW_TYPE,,AUTO

     2954    23778    7                            IF VM_ENCLOS.FLAGS.DELETED = %NO# THEN DO;

  23778 16 007725   100002 234100                    SZN     2,,PR1
        16 007726   010051 604000 16                 TMI     s:23800

     2955    23779    8                                 DO J = 0 TO VM_ENCLOS.NRECS;

  23779 16 007727   200135 450100                    STZ     J,,AUTO
        16 007730   010044 710000 16                 TRA     s:23794+1

     2956    23780    8   GET_ENCL_REC2:                     CALL VMD$GET_ENCL(0,M$ENCL_NUM,J,SIZE,,,,

  23780 16 007731   000112 470400 11    GET_ENCL_RE* LDP0    ENCL$
        16 007732   000012 236100                    LDQ     10,,PR0
        16 007733   000033 772000                    QRL     27
        16 007734   000144 136007                    SBLQ    100,DL
        16 007735   200450 756100                    STQ     P2$+1,,AUTO
        16 007736   000127 236000 17                 LDQ     87
        16 007737   200461 756100                    STQ     P2$+10,,AUTO
        16 007740   200450 631500                    EPPR1   P2$+1,,AUTO
        16 007741   200460 451500                    STP1    P2$+9,,AUTO
        16 007742   000032 236000 17                 LDQ     26
        16 007743   000032 235000 17                 LDA     26
        16 007744   200456 757100                    STAQ    P2$+7,,AUTO
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:403  
        16 007745   000032 236000 17                 LDQ     26
        16 007746   200455 756100                    STQ     P2$+6,,AUTO
        16 007747   200133 633500                    EPPR3   SIZE,,AUTO
        16 007750   200454 453500                    STP3    P2$+5,,AUTO
        16 007751   200135 634500                    EPPR4   J,,AUTO
        16 007752   200453 454500                    STP4    P2$+4,,AUTO
        16 007753   000246 236000 17                 LDQ     166
        16 007754   200452 756100                    STQ     P2$+3,,AUTO
        16 007755   000052 236000 17                 LDQ     42
        16 007756   200451 756100                    STQ     P2$+2,,AUTO
        16 007757   200451 630500                    EPPR0   P2$+2,,AUTO
        16 007760   000126 631400 17                 EPPR1   86
        16 007761   000000 701000 xent               TSX1    VMD$GET_ENCL
        16 007762   007764 702000 16                 TSX2    s:23783
        16 007763   010002 710000 16                 TRA     s:23789

     2957    23781    8                                        VM_ENCLOS.TYPE-%VM_TYPE_ENCL,VM_ENCLREC$)
     2958    23782    9                                      WHENALTRETURN DO;

     2959    23783   10                                           IF B$TCB.ALT$->B$ALT.ERR.CODE = %E$LD THEN
             23783                                                    DO;

  23783 16 007764   000000 470400 xsym               LDP0    B$TCB$
        16 007765   000000 471500                    LDP1    0,,PR0
        16 007766   100102 236100                    LDQ     66,,PR1
        16 007767   377770 376007                    ANQ     131064,DL
        16 007770   000070 116007                    CMPQ    56,DL
        16 007771   010002 601000 16                 TNZ     s:23789

     2960    23784   10                                                VBOUND(VM_ENCLREC_) = VBOUND(
             23784                                                         VM_ENCLREC_)

  23784 16 007772   000000 236000 xsym               LDQ     VM_ENCLREC_
        16 007773   000020 772000                    QRL     16
        16 007774   001354 036000 11                 ADLQ    PAGESIZE
        16 007775   000020 736000                    QLS     16
        16 007776   000000 676000 xsym               ERQ     VM_ENCLREC_
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:404  
        16 007777   000123 376000 17                 ANQ     83
        16 010000   000000 656000 xsym               ERSQ    VM_ENCLREC_

     2961    23785   10                                                  + PAGESIZE;
     2962    23786   10                                                GOTO GET_ENCL_REC2;

  23786 16 010001   007731 710000 16                 TRA     GET_ENCL_REC2

     2963    23787   10                                           END;
     2964    23788    9                                      END; /* WHENALTRETURN */
     2965    23789    8                                      CALL VMD$PUT_ENCL (0,M$WORK_NUM,J,SIZE,

  23789 16 010002   000054 470400 17                 LDP0    44
        16 010003   000000 471500                    LDP1    0,,PR0
        16 010004   000001 720000 13                 LXL0    M$ENCL_NUM
        16 010005   100000 473510                    LDP3    0,X0,PR1
        16 010006   200435 235100                    LDA     NEW_TYPE,,AUTO
        16 010007   000144 135007                    SBLA    100,DL
        16 010010   200450 755100                    STA     P2$+1,,AUTO
        16 010011   000127 236000 17                 LDQ     87
        16 010012   200461 756100                    STQ     P2$+10,,AUTO
        16 010013   200450 634500                    EPPR4   P2$+1,,AUTO
        16 010014   200460 454500                    STP4    P2$+9,,AUTO
        16 010015   300003 635500                    EPPR5   3,,PR3
        16 010016   200457 455500                    STP5    P2$+8,,AUTO
        16 010017   000032 236000 17                 LDQ     26
        16 010020   200456 756100                    STQ     P2$+7,,AUTO
        16 010021   000052 236000 17                 LDQ     42
        16 010022   200455 756100                    STQ     P2$+6,,AUTO
        16 010023   200133 636500                    EPPR6   SIZE,,AUTO
        16 010024   200454 456500                    STP6    P2$+5,,AUTO
        16 010025   200135 637500                    EPPR7   J,,AUTO
        16 010026   200453 457500                    STP7    P2$+4,,AUTO
        16 010027   000053 236000 17                 LDQ     43
        16 010030   200452 756100                    STQ     P2$+3,,AUTO
        16 010031   000052 236000 17                 LDQ     42
        16 010032   200451 756100                    STQ     P2$+2,,AUTO
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:405  
        16 010033   200451 630500                    EPPR0   P2$+2,,AUTO
        16 010034   000126 631400 17                 EPPR1   86
        16 010035   000000 701000 xent               TSX1    VMD$PUT_ENCL
        16 010036   000000 011000                    NOP     0

     2966    23790    8                                        0,,DCBADDR(M$ENCL_NUM)->F$DCB.DVBYTE,
     2967    23791    8                                        NEW_TYPE-%VM_TYPE_ENCL,VM_ENCLREC$);
     2968    23792    8                                      VM_HEADER.NUM_ENCL_RECORDS =

  23792 16 010037   000000 470400 xsym               LDP0    VM_HEADER$
        16 010040   000035 235100                    LDA     29,,PR0
        16 010041   000001 035007                    ADLA    1,DL
        16 010042   000035 755100                    STA     29,,PR0

     2969    23793    8                                        VM_HEADER.NUM_ENCL_RECORDS + 1;
     2970    23794    8                                 END; /* J */

  23794 16 010043   200135 054100                    AOS     J,,AUTO
        16 010044   000112 470400 11                 LDP0    ENCL$
        16 010045   000011 236100                    LDQ     9,,PR0
        16 010046   007731 604000 16                 TMI     GET_ENCL_REC2
        16 010047   200135 116100                    CMPQ    J,,AUTO
        16 010050   007731 605000 16                 TPL     GET_ENCL_REC2

     2971    23795    7                            END; /* IF NOT DELETED */

     2972    23796
     2973    23797                    /* Update the pointers in VM_ENCLOS ans VM_ENCL_HEAD
     2974    23798                       as required.                                      */
     2975    23799
     2976    23800    6                            VM_ENCLOS.TYPE = NEW_TYPE;

  23800 16 010051   000112 470400 11                 LDP0    ENCL$
        16 010052   200435 235100                    LDA     NEW_TYPE,,AUTO
        16 010053   000033 735000                    ALS     27
        16 010054   000012 755100                    STA     10,,PR0

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:406  
     2977    23801    6                            VM_ENCLOS.FLAGS.FORWARD = %YES#;

  23801 16 010055   200000 236003                    LDQ     65536,DU
        16 010056   000002 256100                    ORSQ    2,,PR0

     2978    23802    6                            IF VM_ENCLOS.NEXT$ ~= ADDR(NIL) THEN

  23802 16 010057   000000 236100                    LDQ     0,,PR0
        16 010060   000032 116000 17                 CMPQ    26
        16 010061   010064 600000 16                 TZE     s:23805

     2979    23803    6                                 VM_ENCLOS.NEXT$ = PREV$;

  23803 16 010062   200434 236100                    LDQ     PREV$,,AUTO
        16 010063   000000 756100                    STQ     0,,PR0

     2980    23804
     2981    23805    7                            IF VM_ENCLOS.TITLE$ ~= ADDR(NIL) THEN DO;

  23805 16 010064   000013 236100                    LDQ     11,,PR0
        16 010065   000032 116000 17                 CMPQ    26
        16 010066   010106 600000 16                 TZE     s:23812

     2982    23806    7                                 VM_ENCLOS.TITLE$ = PINCRW(ADDR(VM_ENCLOS.TITLE$),1);

  23806 16 010067   000112 236000 11                 LDQ     ENCL$
        16 010070   000014 036003                    ADLQ    12,DU
        16 010071   000013 756100                    STQ     11,,PR0

     2983    23807    7                                 VM_ENCL_HEAD.NEXT$ = PINCRW(ENCL$,

  23807 16 010072   000013 471500                    LDP1    11,,PR0
        16 010073   000100 101500                    MRL     fill='000'O
        16 010074   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
        16 010075   200450 000004                    ADSC9   P2$+1,,AUTO              cn=0,n=4
        16 010076   200450 236100                    LDQ     P2$+1,,AUTO
        16 010077   000002 772000                    QRL     2
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:407  
        16 010100   000022 736000                    QLS     18
        16 010101   000015 036003                    ADLQ    13,DU
        16 010102   000112 036000 11                 ADLQ    ENCL$
        16 010103   000000 471400 xsym               LDP1    VM_ENCLLIST$
        16 010104   100005 756100                    STQ     5,,PR1

     2984    23808    7                                   SIZEW(VM_ENCLOS) + 1 +
     2985    23809    7                                   VM_ENCLOS.TITLE$->X$STRING.SIZ/4);
     2986    23810    7                            END;

  23810 16 010105   010112 710000 16                 TRA     s:23813

     2987    23811    6                            ELSE
     2988    23812    6                                VM_ENCL_HEAD.NEXT$ = PINCRW(ENCL$,SIZEW(VM_ENCLOS) + 1
             23812                                          );

  23812 16 010106   000112 236000 11                 LDQ     ENCL$
        16 010107   000015 036003                    ADLQ    13,DU
        16 010110   000000 471400 xsym               LDP1    VM_ENCLLIST$
        16 010111   100005 756100                    STQ     5,,PR1

     2989    23813    6                            IF VM_ENCLOS.PREV$ ~= ADDR(NIL) THEN

  23813 16 010112   000001 236100                    LDQ     1,,PR0
        16 010113   000032 116000 17                 CMPQ    26
        16 010114   010117 600000 16                 TZE     s:23816

     2990    23814    6                                 VM_ENCLOS.PREV$ = VM_ENCL_HEAD.NEXT$;

  23814 16 010115   100005 236100                    LDQ     5,,PR1
        16 010116   000001 756100                    STQ     1,,PR0

     2991    23815
     2992    23816    6                            VM_ENCL_HEAD.HEAD$ = ENCL$;

  23816 16 010117   000112 236000 11                 LDQ     ENCL$
        16 010120   100003 756100                    STQ     3,,PR1
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:408  

     2993    23817    6                            VM_ENCL_HEAD.NUM_ENTRIES = VM_ENCL_HEAD.NUM_ENTRIES + 1;

  23817 16 010121   100001 235100                    LDA     1,,PR1
        16 010122   000001 035007                    ADLA    1,DL
        16 010123   100001 755100                    STA     1,,PR1

     2994    23818    6                            VM_ENCL_HEAD.ADDRESS_SIZE = POFFW(VM_ENCL_HEAD.NEXT$,

  23818 16 010124   000000 235000 xsym               LDA     VM_ENCLLIST$
        16 010125   000022 771000                    ARL     18
        16 010126   200450 755100                    STA     P2$+1,,AUTO
        16 010127   100005 236100                    LDQ     5,,PR1
        16 010130   000022 772000                    QRL     18
        16 010131   200450 136100                    SBLQ    P2$+1,,AUTO
        16 010132   100000 756100                    STQ     0,,PR1

     2995    23819    6                              VM_ENCLLIST$);
     2996    23820    6                            PREV$ = ENCL$;

  23820 16 010133   000112 236000 11                 LDQ     ENCL$
        16 010134   200434 756100                    STQ     PREV$,,AUTO

     2997    23821    6                            ENCL$ = VM_ENCLOS.PREV$;

  23821 16 010135   000001 236100                    LDQ     1,,PR0
        16 010136   000112 756000 11                 STQ     ENCL$

     2998    23822    6                       END; /* I */

  23822 16 010137   200134 054100                    AOS     I,,AUTO
        16 010140   200134 236100                    LDQ     I,,AUTO
        16 010141   007717 604000 16                 TMI     s:23777
        16 010142   001356 116000 11                 CMPQ    FWD_ENCL_HEAD+1
        16 010143   007717 602000 16                 TNC     s:23777

     2999    23823    5                  END;
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:409  

     3000    23824    4                  VM_HEADER.STATUS.ENCL = %YES#;

  23824 16 010144   000000 470400 xsym               LDP0    VM_HEADER$
        16 010145   004000 236007                    LDQ     2048,DL
        16 010146   000012 256100                    ORSQ    10,,PR0

     3001    23825    4                  CALL VMA$PUT_ADD_RECORD (%VM_TYPE_ENCL,VM_ENCLLIST_,

  23825 16 010147   000254 630400 17                 EPPR0   172
        16 010150   000024 631400 17                 EPPR1   20
        16 010151   000000 701000 xent               TSX1    VMA$PUT_ADD_RECORD
        16 010152   000000 011000                    NOP     0

     3002    23826    4                    M$WORK_NUM,0);
     3003    23827    4                  CLOSE_SCRATCH.V.DCB# = M$ENCL_NUM;

  23827 16 010153   000001 720000 13                 LXL0    M$ENCL_NUM
        16 010154   001040 740000 11                 STX0    CLOSE_SCRATCH+26

     3004    23828    4                  CALL M$CLOSE (CLOSE_SCRATCH) ALTRET (E_PMME);

  23828 16 010155   001006 630400 11                 EPPR0   CLOSE_SCRATCH
        16 010156   450001 713400                    CLIMB   alt,close
        16 010157   406000 401760                    pmme    nvectors=13
        16 010160   010254 702000 16                 TSX2    E_PMME

     3005    23829    4             END; /* IF ENTRY_REASON = %MAIL_FORWARD_ENCL */

     3006    23830    3             CLOSE_SAVE.V.DCB# = M$EDIT_NUM;

  23830 16 010161   000000 720000 13                 LXL0    M$EDIT_NUM
        16 010162   001002 740000 11                 STX0    CLOSE_SAVE+26

     3007    23831    3             CALL M$CLOSE (CLOSE_SAVE) ALTRET(E_PMME);

  23831 16 010163   000750 630400 11                 EPPR0   CLOSE_SAVE
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:410  
        16 010164   450001 713400                    CLIMB   alt,close
        16 010165   406000 401760                    pmme    nvectors=13
        16 010166   010254 702000 16                 TSX2    E_PMME

     3008    23832    3             CMD_DCB = M$SI_NUM;

  23832 16 010167   000000 235000 xsym               LDA     M$SI_NUM
        16 010170   000067 755000 11                 STA     CMD_DCB

     3009    23833    3        END;                      /* Append message */

     3010    23834        /*
     3011    23835             ***** Update NEXT$ in header ...
     3012    23836        */
     3013    23837    2        VM_HEADER.NEXT$ = PINCRW(MCB.HI_SEGMENT$,1);

  23837 16 010171   000742 236000 11                 LDQ     MCB+3
        16 010172   000001 036003                    ADLQ    1,DU
        16 010173   000000 470400 xsym               LDP0    VM_HEADER$
        16 010174   000016 756100                    STQ     14,,PR0

     3014    23838        /*
     3015    23839             ***** Write the header into the work file ...
     3016    23840        */
     3017    23841    2        CALL VMD$PUT_HEADER (0,M$WORK_NUM) ALTRET(E_SEND);

  23841 16 010175   000052 630400 17                 EPPR0   42
        16 010176   000000 631400 17                 EPPR1   0
        16 010177   000000 701000 xent               TSX1    VMD$PUT_HEADER
        16 010200   010256 702000 16                 TSX2    E_SEND

     3018    23842        /*
     3019    23843             ***** Send it off to mailman ...
     3020    23844        */
     3021    23845    2        CALL VMC$DOSEND (M$WORK_NUM,SEED) ALTRET(E_SEND);

  23845 16 010201   000260 630400 17                 EPPR0   176
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:411  
        16 010202   000000 631400 17                 EPPR1   0
        16 010203   000000 701000 xent               TSX1    VMC$DOSEND
        16 010204   010256 702000 16                 TSX2    E_SEND

     3022    23846    2        DID_SEND = %YES#;

  23846 16 010205   400000 236003                    LDQ     -131072,DU
        16 010206   200017 756100                    STQ     DID_SEND,,AUTO

     3023    23847    2        IF VM_HEADER.NUM_RECORDS > NUM_RECORDS

  23847 16 010207   000000 470400 xsym               LDP0    VM_HEADER$
        16 010210   000011 236100                    LDQ     9,,PR0
        16 010211   010214 604000 16                 TMI     s:23849
        16 010212   200371 116100                    CMPQ    NUM_RECORDS,,AUTO
        16 010213   010233 604400 16                 TMOZ    s:23853

     3024    23848    3        THEN DO;

     3025    23849    3             CALL VMD$DEL_BODY (0,M$WORK_NUM,NUM_RECORDS,VM_HEADER.NUM_RECORDS-1)

  23849 16 010214   000001 136007                    SBLQ    1,DL
        16 010215   200450 756100                    STQ     P2$+1,,AUTO
        16 010216   200450 631500                    EPPR1   P2$+1,,AUTO
        16 010217   200455 451500                    STP1    P2$+6,,AUTO
        16 010220   200371 633500                    EPPR3   NUM_RECORDS,,AUTO
        16 010221   200454 453500                    STP3    P2$+5,,AUTO
        16 010222   000052 237000 17                 LDAQ    42
        16 010223   200452 757100                    STAQ    P2$+3,,AUTO
        16 010224   200452 630500                    EPPR0   P2$+3,,AUTO
        16 010225   000024 631400 17                 EPPR1   20
        16 010226   000000 701000 xent               TSX1    VMD$DEL_BODY
        16 010227   010254 702000 16                 TSX2    E_PMME

     3026    23850    3               ALTRET(E_PMME);
     3027    23851    3             VM_HEADER.NUM_RECORDS = NUM_RECORDS;

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:412  
  23851 16 010230   200371 235100                    LDA     NUM_RECORDS,,AUTO
        16 010231   000000 470400 xsym               LDP0    VM_HEADER$
        16 010232   000011 755100                    STA     9,,PR0

     3028    23852    3        END;

     3029    23853    2        CLOSE_SAVE.V.DCB# = M$MAIL_COMGROUP_NUM;

  23853 16 010233   000000 720000 xsym               LXL0    M$MAIL_COMGROUP_NUM
        16 010234   001002 740000 11                 STX0    CLOSE_SAVE+26

     3030    23854    3        CALL M$CLOSE (CLOSE_SAVE) WHENALTRETURN DO; END;

  23854 16 010235   000750 630400 11                 EPPR0   CLOSE_SAVE
        16 010236   450001 713400                    CLIMB   alt,close
        16 010237   406000 401760                    pmme    nvectors=13
        16 010240   010242 702000 16                 TSX2    s:23855
        16 010241   010242 710000 16                 TRA     s:23855

     3031    23855    2        CALL VNS$BREAK_ENABLE;

  23855 16 010242   000017 631400 17                 EPPR1   15
        16 010243   000000 701000 xent               TSX1    VNS$BREAK_ENABLE
        16 010244   000000 011000                    NOP     0

     3032    23856    2        RETURN;

  23856 16 010245   200370 221300                    LDX1  ! SAVE_BREAK_TYPE+3,,AUTO
        16 010246   000001 702211                    TSX2  ! 1,X1

  23853 16 010247                       E_ALLOCATE   null
     3033    23857        /**/
     3034    23858    2   E_ALLOCATE: ;
     3035    23859    2        CALL VMA$ERRMSG (MCB.ERR);

  23859 16 010247   000104 630400 17                 EPPR0   68
        16 010250   000003 631400 17                 EPPR1   3
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:413  
        16 010251   000000 701000 xent               TSX1    VMA$ERRMSG
        16 010252   000000 011000                    NOP     0

     3036    23860    2        GOTO E_SEND;

  23860 16 010253   010256 710000 16                 TRA     E_SEND

  23853 16 010254                       E_PMME       null
     3037    23861    2   E_PMME: ;
     3038    23862    2        CALL MON_ERR;

  23862 16 010254   002075 701000 16                 TSX1    MON_ERR
        16 010255   000000 011000                    NOP     0

  23853 16 010256                       E_SEND       null
     3039    23863    2   E_SEND: ;
     3040    23864    2        ALTRETURN;

  23864 16 010256   200370 221300                    LDX1  ! SAVE_BREAK_TYPE+3,,AUTO
        16 010257   000000 702211                    TSX2  ! 0,X1

     3041    23865    2   END DO$SEND;
     3042    23866    1   END VNS$SEND;

  23866 16 010260   000000 702200 xent               TSX2  ! X66_MARET

P_PCB
 Sect OctLoc
  11     000   000000 006014   000000 006014   000000 006014   000000 006014    ................
  11     004   000000 000000   000000 600000   000000 000000   040042 040042    ............ " "
  11     010   000000 040000   000000 000000   000000 000000   000000 006014    .. .............
  11     014   000000 006014   000000 000000                                    ........

XUR_INIT
 Sect OctLoc
  11     016   624000 000001   000000 000000   000000 000000   000000 000000    ................
  11     022   000000 006000   000000 177640   000000 006014   000000 000000    ................
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:414  
  11     026   000000 006014   000000 000000   000000 000000   ****** ******    ................
  11     032   000000 177640   000000 006014   000000 000000   000000 000000    ................
  11     036   000000 177640   000000 006014   000000 000000   04000* ******    ............ ...
  11     042   000000 000000   000000 000000   000000 000000   000000 000000    ................
  11     062*  000000 000000   000000 000000   000000 000000                    ............

TESTMODE
 Sect OctLoc
  11     066   0***** ******                                                    ....

CMD_DCB
 Sect OctLoc
  11     067   000000 000000                                                    ....

SEED
 Sect OctLoc
  11     070   000000 000000                                                    ....

WORK_DATE
 Sect OctLoc
  11     071   ****** 057***   ***057 ******                                    ../../..

WORK_TIME
 Sect OctLoc
  11     073   ****** 072***   ****** ******                                    ..:.....

VNS_BREAK_TYPE
 Sect OctLoc
  11     102   000000 000000                                                    ....

INVOKE_EDITOR$
 Sect OctLoc
  11     110   000000 006014                                                    ....

DEFAULT_EDITOR$
 Sect OctLoc
  11     111   000005 006000                                                    ....
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:415  

ENCL$
 Sect OctLoc
  11     112   000000 006014                                                    ....

ENCLREC$
 Sect OctLoc
  11     113   000000 006014                                                    ....

CMD_BUF
 Sect OctLoc
  11     114   ****** ******   ****** ******   ****** ******   ****** ******    ................

VM_SEARCH_INFO
 Sect OctLoc
  11     227   ****** ******   000000 000000   000000 000000   000000 000000    ................
  11     233   000000 000000   000000 000000   000000 000000   000000 000000    ................
  11     267*  000000 000000   000000 000000   00**** ******                    ............

VM_CURRENT_FOLDER
 Sect OctLoc
  11     272   040040 040040   040040 040040   040040 040040   040040 040040
  11     306*  040040 040040   040040 040***   000000 000000   000000 000000           .........
  11     312   000000 000000   000000 000000   000000 000000   000000 000000    ................
  11     316   000040 040040   040040 040040   040040 040040   040040 040040    .
  11     322   040040 040040   040040 040040   040040 040040   040040 040040
  11     376*  040040 040040   040040 040040   040*** ******                             ...

VM_BODYREC
 Sect OctLoc
  11     401   001000 000000   ****** ******   ****** ******   ****** ******    ................
  11     515*  ****** ******                                                    ....

VM_ENCLLIST_KEY
 Sect OctLoc
  11     516   005144 000000   000000 ******                                    .d......

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:416  
VM_ENCLKEY
 Sect OctLoc
  11     520   007145 000000   000000 000000                                    .e......

VM_SITE
 Sect OctLoc
  11     522   000000 000000   000000 000000   040040 040040   040040 040040    ........
  11     606*  ****** ******   ****** ******   ****** ******   ****** ******    ................

VM_RADDRESS
 Sect OctLoc
  11     612   000000 006014   000000 006014   000001 040040   040040 040040    ..........
  11     616   040040 040040   040040 040040   040040 040040   040040 040040
  11     632*  040040 040040   040040 040040   040040 040040   040040 040***                   .

F_FDSSIGNED
 Sect OctLoc
  11     636   000001 177640   000734 006000   000000 000000   000000 000000    ................
  11     642   000000 000000   000000 177640   000000 006014   000000 000001    ................
  11     646   000000 000000   000000 000001   000732 006000   000000 101500    ..............A.
  11     652   000000 000000   000000 000000   000000 000001   000000 000012    ................
  11     656   000000 000000   ****** ******   ****** ******   000000 000000    ................
  11     662   000000 000000   000000 000000   000000 000000   000000 006014    ................
  11     666   000000 006014   000000 006014   000000 006014   000000 000000    ................
  11     672   000000 000000   000000 000000                                    ........

F_FDSSPACE
 Sect OctLoc
  11     674   000000 577640   000225 006000   000000 000000   000000 000000    ................
  11     700   000000 000000   000000 177640   000000 006014   000000 000001    ................
  11     704   000000 000000   000000 000000   000732 006000   000000 101500    ..............A.
  11     710   000000 000000   000000 000000   000000 000001   000000 000012    ................
  11     714   000000 000000   ****** ******   ****** ******   000000 000000    ................
  11     720   000000 000000   000000 000000   000000 000000   000000 006014    ................
  11     724   000000 006014   000000 006014   000000 006014   000000 000000    ................
  11     730   000000 000000   000000 000000                                    ........

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:417  
FMT_SIGNED
 Sect OctLoc
  11     734   045126 037045   101*** ******                                    %V.%A...

MCB
 Sect OctLoc
  11     737   ****** ******   ****** ******   ****** ******   ****** ******    ................

CLOSE_SAVE
 Sect OctLoc
  11     750   000003 777640   001002 006000   000000 177640   000000 006014    ................
  11     754   000000 177640   000000 006014   000000 177640   000000 006014    ................
  11    1000*  000000 177640   000000 006014   000000 000002   000000 000040    ...............
  11    1004   000220 000000   000000 000000                                    ........

CLOSE_SCRATCH
 Sect OctLoc
  11    1006   000003 777640   001040 006000   000000 177640   000000 006014    ..... ..........
  11    1012   000000 177640   000000 006014   000000 177640   000000 006014    ................
  11    1036*  000000 177640   000000 006014   000000 000001   000000 000040    ...............
  11    1042   000220 000000   000000 000000                                    ........

READ_SI
 Sect OctLoc
  11    1044   000005 777640   001054 006000   000000 177640   000000 006014    .....,..........
  11    1050   000112 777640   000114 006000   000000 177640   000000 006014    .J...L..........
  11    1054   000000 400000   000000 000000   000000 000000   000000 000000    ................
  11    1060   000000 000000   000000 000000                                    ........

READ_ENCL_FILE
 Sect OctLoc
  11    1062   000005 777640   001072 006000   000000 177640   000000 006014    .....:..........
  11    1066   000000 177640   000000 006014   000000 177640   000000 006014    ................
  11    1072   000000 400000   000000 000000   000000 000000   000000 000000    ................
  11    1076   000000 000000   000000 000000                                    ........

CHANGE_PROMPT
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:418  
 Sect OctLoc
  11    1100   000003 777640   001106 006000   000000 177640   000000 006014    .....F..........
  11    1104   000000 177640   000000 006014   000000 000000   000000 000000    ................
  11    1110   000000 000000   000000 000000                                    ........

SET_INPUT
 Sect OctLoc
  11    1112   000001 777640   001120 006000   000000 177640   000000 006014    .....P..........
  11    1116   000000 17764*   000000 006014   000000 400000   000000 000000    ................

LINKFPT
 Sect OctLoc
  11    1122   000000 177640   000000 006014   000000 177640   000000 006014    ................
  11    1136*  000001 777640   001140 006000   400000 000000   000000 000000    .....`..........

FID_NAME
 Sect OctLoc
  11    1142   037040 040040   040040 040040   040040 040040   040040 040040    .
  11    1146   040040 040040   040040 040040   040040 040040   040040 040040

FID_ACCT
 Sect OctLoc
  11    1152   040040 040040   040040 040040

FID_PASS
 Sect OctLoc
  11    1154   040040 040040   040040 040040

FID_SN
 Sect OctLoc
  11    1156   000000 000001   040040 040040   040040 ******                    ....      ..

WRITE_MAILCG
 Sect OctLoc
  11    1162   000003 777640   001172 006000   000000 177640   000000 006014    .....z..........
  11    1166   000043 777640   001176 006000   000007 777640   001324 006000    .#...~..........
  11    1172   000000 400400   000000 000000   000000 000000   000000 000000    ................
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:419  

VM_CGBUFFER
 Sect OctLoc
  11    1176   040040 040040   040040 040040   000000 000000   000040 040040            .....
  11    1202   040040 040040   040040 040040   040040 040040   040040 040040
  11    1206   040040 040040   040040 000000   040040 040040   040040 040040          ..
  11    1212   040040 040040   040040 040040   040040 040040   040040 040040
  11    1216   040040 040040   040040 040040   000040 040040   040040 040040            .
  11    1222   040040 040040   040040 040040   040040 040040   040040 040040
  11    1226   040040 040040   040040 040040   ****** ******   040040 040040            ....
  11    1232   040040 040040   040040 040040   040040 040040   040040 040040
  11    1236   040040 040040   040040 040040   040040 040040   040040 040040

HELP_PARAM
 Sect OctLoc
  11    1242   000001 177640   001336 006000   000001 777640   000520 006000    ................
  11    1246   000000 177640   000000 006014   000000 177640   000000 006014    ................
  11    1252   000000 000000   000000 006014   000000 000000   0***** ******    ................
  11    1256   000000 000000   000000 000000   003040 040040   040040 040040    .........
  11    1262   040040 040040   040040 040040   040040 040040   040040 040040
  11    1266   040040 040040   040040 040040   040040 040000   040040 040040               .
  11    1272   040040 040040   040040 040040   040040 040040   040040 040040
  11    1306*  040*** ******   ****** ******   000000 177640   000000 006014     ...............
  11    1312   000000 177640   000000 006014   000000 177640   000000 006014    ................
  11    1316   000000 177640   000000 006014   000000 361101   000000 000000    ...........A....
  11    1322   000000 000000   000000 000000   000000 000000   000000 000000    ................
  11    1332*  000000 000000                                                    ....

MAIL_PROG_NAME
 Sect OctLoc
  11    1334   004115 101111   114*** ******                                    .MAIL...

SEND_PROG_NAME
 Sect OctLoc
  11    1336   004123 105116   104*** ******                                    .SEND...

PAGESIZE
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:420  
 Sect OctLoc
  11    1340   000000 010000                                                    ....

ENCL_REC
 Sect OctLoc
  11    1342   000003 777640   001350 006000   000000 177640   000000 006014    ................
  11    1346   000000 177640   000000 006014   000000 000000   777777 777777    ................
  11    1352   000000 000000   0***** ******                                    ........

PAGESIZE
 Sect OctLoc
  11    1354   000000 010000                                                    ....

FWD_ENCL_HEAD
 Sect OctLoc
  11    1355   000000 000000   000000 000000   000000 000000   000000 006014    ................
  11    1361   000000 006014   000000 006014   ****** ******                    ............

VM_INFOKEY
 Sect OctLoc
  11    1364   005000 000000   000000 ******                                    ........

M$EDIT_NUM
 Sect OctLoc
  13     000   000000 000000                                                    ....

M$ENCL_NUM
 Sect OctLoc
  13     001   000000 000000                                                    ....

M$APND_NUM
 Sect OctLoc
  13     002   000000 000000                                                    ....

TIME_INIT
 Sect OctLoc
  13     003   060060 072060   060*** ******                                    00:00...
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:421  

DEFAULT_EDITOR
 Sect OctLoc
  13     005   004105 104111   124*** ******                                    .EDIT...

IAM
 Sect OctLoc
  13     007   052111 101115   040040 040040                                    *IAM

E_OPTIONS_PROMPT
 Sect OctLoc
  13     011   261623 016200                                                    ....

E_CMD_BODY_PROMPT
 Sect OctLoc
  13     012   261623 016100                                                    ...@

E_CMD_BODY2_PROMPT
 Sect OctLoc
  13     013   261623 016220                                                    ....

IBEX_PROMPT
 Sect OctLoc
  13     014   001041 ******                                                    .!..

VN_DEFAULT_NODES
 Sect OctLoc
  13     015   000000 006014   000000 006014   000000 006014   000000 006014    ................
  13     031*  000000 006014   000000 006000   000000 006000   000000 006000    ................
  13     035   000000 006000   000000 006000   000000 006000   000000 006000    ................
  13     045*  000000 006000   000000 006000   000000 006014   000000 006014    ................
  13     051   000000 006014   000000 006014                                    ........

VN_NATL_NODES
 Sect OctLoc
  13     053   040040 040040   040*** ******   000015 006000   000000 006014         ...........
  13     057   000000 006014   000000 006014   000000 006014                    ............
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:422  

VN_NODENAMES
 Sect OctLoc
  13     062   000015 012123   105116 104137   116117 104105   123000 016020    ...SEND_NODES...
  13     066   120122 111126   111114 105107   105104 137116   117104 105123    PRIVILEGED_NODES
  13     072   000017 010123   105116 104137   103115 104000   020006 103115    ...SEND_CMD...CM
  13     076   104137 124117   000021 013103   115104 137123   125102 112105    D_TO...CMD_SUBJE
  13     102   103124 000022   010103 115104   137102 117104   131000 023007    CT...CMD_BODY...
  13     106   103115 104137   122124 117000   024007 103115   104137 122105    CMD_RTO...CMD_RE
  13     112   106000 025010   103115 104137   103117 120131   000026 006103    F...CMD_COPY...C
  13     116   115104 137102   103000 027011   103115 104137   104105 106105    MD_BC...CMD_DEFE
  13     122   122000 030012   103115 104137   123111 107116   105104 000031    R...CMD_SIGNED..
  13     126   014117 120124   111117 116137   116117 104105   123000 000000    .OPTION_NODES...

VN_NODEFID
 Sect OctLoc
  13     132   010126 115137   116117 104105   123*** ******                    .VM_NODES...

INIT_ENCL_HEAD
 Sect OctLoc
  13     135   000000 000000   000000 000000   000000 000000   000000 006014    ................
  13     141   000000 006014   000000 006014   ****** ******                    ............

INIT_ENCLOS
 Sect OctLoc
  13     144   000000 006014   000000 006014   000000 000000   000000 000000    ................
  13     150   000000 000000   000000 000000   000000 000000   000000 000000    ................
  13     154   000000 000000   000000 000000   000*** ******   000000 006014    ................

CVM_HEADER
 Sect OctLoc
  13     160   000000 000000   000000 000000   000000 000000   000000 000000    ................
  13     174*  000000 000000   000000 006014   000224 006000   000000 006014    ................
  13     200   000000 006014   000000 006014   000000 006014   000000 006014    ................
  13     214*  000000 000000   000000 000000   000000 000000   000000 000000    ................
  13     224*  ****** ******                                                    ....

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:423  
FMT_SPACE
 Sect OctLoc
  13     225   045061 130***                                                    %1X.

BLANK_CHAR
 Sect OctLoc
  13     226   040*** ******                                                     ...

FPT_XCON
 Sect OctLoc
  13     230   000001 777640   000234 006000   000000 177640   000000 006014    ................
  13     234   000000 000000   000000 000000                                    ........

FPT_INT
 Sect OctLoc
  13     236   000001 777640   000240 006000   000000 000000   000000 000000    ................

OPEN_WORK
 Sect OctLoc
  13     242   000025 777640   000306 006000   000000 177640   000000 006014    ................
  13     246   000000 177640   000000 006014   000007 777640   000000 006000    ................
  13     252   000000 177640   000000 006014   000000 177640   000000 006014    ................
  13     306*  000000 000442   000000 000001   252525 002002   000040 252520    ............. ..
  13     312   000040 040040   000000 000000   000000 777777   000000 000000    .   ............
  13     316   000000 000000   000000 000000   000000 000000   000000 000000    ................
  13     322   251000 622000   000000 000000   000000 000000   111250 000000    ............I...
  13     326   040040 040040   000000 000000   000000 000000   000000 000000        ............
  13     332   000000 000000   ****** ******                                    ........

OPEN_FORWARD_FILE
 Sect OctLoc
  13     334   000025 777640   000400 006000   000000 177640   000000 006014    ................
  13     340   000000 177640   000000 006014   000007 377640   000000 006000    ................
  13     344   000001 777640   000000 006000   000000 177640   000000 006014    ................
  13     350   000000 177640   000000 006014   000000 177640   000000 006014    ................
  13     400*  000000 000442   000000 001001   252525 001001   000040 252520    ............. ..
  13     404   000040 040040   000000 000000   000000 777777   000000 000000    .   ............
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:424  
  13     410   000000 000000   000000 000000   000000 000000   000000 000000    ................
  13     414   251000 622000   000000 000000   000000 000000   111250 000000    ............I...
  13     420   040040 040040   000000 000000   000000 000000   000000 000000        ............
  13     424   000000 000000   ****** ******                                    ........

OPEN_APPEND
 Sect OctLoc
  13     426   000025 777640   000472 006000   000003 777640   001156 006000    .............n..
  13     432   000000 177640   000000 006014   000007 777640   001142 006000    .............b..
  13     436   000001 777640   001154 006000   000000 177640   000000 006014    .....l..........
  13     442   000000 177640   000000 006014   000000 177640   000000 006014    ................
  13     452*  000001 777640   001152 006000   000000 177640   000000 006014    .....j..........
  13     456   000000 177640   000000 006014   000000 177640   000000 006014    ................
  13     472*  000000 000042   000000 002000   252525 000000   000040 252520    ..."......... ..
  13     476   000040 040040   000000 000000   000000 777777   000000 000000    .   ............
  13     502   000000 000000   000000 000000   000000 000000   000000 000000    ................
  13     506   251000 622000   000000 000000   000000 000000   111250 000000    ............I...
  13     512   040040 040040   000000 000000   000000 000000   000000 000000        ............
  13     516   000000 000000   ****** ******                                    ........

SYS_ACCT
 Sect OctLoc
  13     520   072123 131123   040040 040040                                    :SYS

CHECK_FID_CONST
 Sect OctLoc
  13     522   000003 777640   000546 006000   000000 177640   000000 006014    ................
  13     526   000007 777640   001142 006000   000001 777640   001152 006000    .....b.......j..
  13     532   000001 777640   001154 006000   000003 777640   001156 006000    .....l.......n..
  13     536   000000 177640   000000 006014   000000 177640   000000 006014    ................
  13     546*  777000 000000   000000 000000   000000 000000   ****** ******    ................

OPEN_SI_DEFAULT
 Sect OctLoc
  13     552   000025 777640   000616 006000   000000 177640   000000 006014    ................
  13     556   000000 177640   000000 006014   000000 177640   000000 006014    ................
  13     602*  000000 177640   000000 006014   000000 377640   000000 006014    ................
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:425  
  13     606   000000 177640   000000 006014   000000 177640   000000 006014    ................
  13     616*  000000 600042   000000 002003   252525 001001   000040 252520    ..."......... ..
  13     622   000040 040040   000000 000000   000000 777777   000000 000000    .   ............
  13     626   000000 000000   000000 000000   000000 000000   000000 000000    ................
  13     632   251000 622000   000000 000000   000000 000000   111250 000000    ............I...
  13     636   040040 040040   000000 000000   000000 000000   000000 000000        ............
  13     642   000000 000000   ****** ******                                    ........

OPEN_SI
 Sect OctLoc
  13     644   000025 777640   000710 006000   000003 777640   001156 006000    .............n..
  13     650   000000 177640   000000 006014   000007 777640   001142 006000    .............b..
  13     654   000001 777640   001154 006000   000000 177640   000000 006014    .....l..........
  13     660   000000 177640   000000 006014   000000 177640   000000 006014    ................
  13     670*  000001 777640   001152 006000   000000 177640   000000 006014    .....j..........
  13     674   000000 177640   000000 006014   000000 177640   000000 006014    ................
  13     710*  000000 400042   000000 002000   252525 000000   000040 252520    ..."......... ..
  13     714   000040 040040   000000 000000   000000 777777   000000 000000    .   ............
  13     720   000000 000000   000000 000000   000000 000000   000000 000000    ................
  13     724   251000 622000   000000 000000   000000 000000   111250 000000    ............I...
  13     730   040040 040040   000000 000000   000000 000000   000000 000000        ............
  13     734   000000 000000   ****** ******                                    ........

OPEN_ENCL_FILE
 Sect OctLoc
  13     736   000025 777640   001002 006000   000003 777640   001156 006000    .............n..
  13     742   000000 177640   000000 006014   000007 777640   001142 006000    .............b..
  13     746   000001 777640   001154 006000   000000 177640   000000 006014    .....l..........
  13     752   000000 177640   000000 006014   000000 177640   000000 006014    ................
  13     762*  000001 777640   001152 006000   000000 177640   000000 006014    .....j..........
  13     766   000000 177640   000000 006014   000000 177640   000000 006014    ................
  13    1002*  000000 000042   000000 002001   252525 001000   000040 252520    ..."......... ..
  13    1006   000040 040040   000000 000000   000000 777777   000000 000000    .   ............
  13    1012   000000 000000   000000 000000   000000 000000   000000 000000    ................
  13    1016   251000 622000   000000 000000   000000 000000   111250 000000    ............I...
  13    1022   040040 040040   000000 000000   000000 000000   000000 000000        ............
  13    1026   000000 000000   ****** ******                                    ........
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:426  

OPEN_FORWARD_ENCL_FILE
 Sect OctLoc
  13    1030   000025 777640   001074 006000   000000 177640   000000 006014    .....<..........
  13    1034   000000 177640   000000 006014   000007 377640   000000 006000    ................
  13    1040   000001 777640   000000 006000   000000 177640   000000 006014    ................
  13    1044   000000 177640   000000 006014   000000 177640   000000 006014    ................
  13    1074*  000000 400442   000000 002001   252525 002002   000040 252520    ............. ..
  13    1100   000040 040040   000000 000000   000000 777777   000000 000000    .   ............
  13    1104   000000 000000   000000 000000   000000 000000   000000 000000    ................
  13    1110   251000 622000   000000 000000   000000 000000   111250 000000    ............I...
  13    1114   040040 040040   000000 000000   000000 000000   000000 000000        ............
  13    1120   000000 000000   ****** ******                                    ........

NOTSENT_ERR
 Sect OctLoc
  13    1122   000001 777640   001126 006000   000000 777640   001517 006000    .....V..........
  13    1126   000000 000000   000000 000000                                    ........

TAKE_THIRTY
 Sect OctLoc
  13    1130   000001 777640   001134 006000   000000 177640   000000 006014    .....\..........
  13    1134   000000 000036   000000 000001                                    ........

GET_TIME
 Sect OctLoc
  13    1136   000001 777640   001150 006000   000000 177640   000000 006014    .....h..........
  13    1142   000000 177640   000000 006014   000000 177640   000000 006014    ................
  13    1146   000000 777640   000736 006000   000004 000000   ****** ******    ................

GET_CURRENT
 Sect OctLoc
  13    1152   000001 777640   001164 006000   000001 777640   000071 006000    .....t.......9..
  13    1156   000001 177640   000073 006000   000000 177640   000000 006014    .....;..........
  13    1162   000000 177640   000000 006014   000003 000000   ****** ******    ................

CHECK_TIME
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:427  
 Sect OctLoc
  13    1166   000001 777640   001200 006000   000001 777640   000071 006000    .............9..
  13    1172   000001 177640   000073 006000   000000 177640   000000 006014    .....;..........
  13    1176   000000 777640   000103 006000   003004 000000   ****** ******    .....C..........

GET_ANSI_TIME
 Sect OctLoc
  13    1202   000001 777640   001214 006000   000001 377640   000106 006000    .............F..
  13    1206   000001 777640   000104 006000   000000 177640   000000 006014    .....D..........
  13    1212   000000 177640   000000 006014   000002 000000   ****** ******    ................

GET_UTS
 Sect OctLoc
  13    1216   000001 777640   001230 006000   000001 777640   000071 006000    .............9..
  13    1222   000001 177640   000073 006000   000000 177640   000000 006014    .....;..........
  13    1226   000000 777640   000103 006000   004003 000000   ****** ******    .....C..........

OPEN_MAILCG
 Sect OctLoc
  13    1232   000025 777640   001276 006000   000000 177640   000000 006014    ................
  13    1236   000013 777640   000000 006000   000001 777640   000000 006000    ................
  13    1242   000000 177640   000000 006014   000000 177640   000000 006014    ................
  13    1256*  000001 777640   000000 006000   000000 177640   000000 006014    ................
  13    1262   000000 177640   000000 006014   000000 177640   000000 006014    ................
  13    1276*  000000 000052   000000 001004   252525 000000   000040 252520    ...*......... ..
  13    1302   000040 040040   000000 000000   000000 777777   000000 000000    .   ............
  13    1306   000000 000000   000000 000000   000000 000000   000000 000000    ................
  13    1312   251000 622000   000000 000000   000000 000000   111250 000000    ............I...
  13    1316   040040 040040   000000 000000   000000 000000   000000 000000        ............
  13    1322   000000 000000   ****** ******                                    ........

MAILCG_STATION
 Sect OctLoc
  13    1324   115101 111114   115101 116040   040040 040040   040040 040040    MAILMAN
  13    1330   005000 000000   000000 000000   000000 000000   000000 000000    ................

OPEN_EDIT_FILE
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:428  
 Sect OctLoc
  13    1334   000025 777640   001400 006000   000000 177640   000000 006014    ................
  13    1340   000000 177640   000000 006014   000001 377640   001426 006000    ................
  13    1344   000000 177640   000000 006014   000000 177640   000000 006014    ................
  13    1400*  000000 400072   000000 002001   252525 002000   000040 252520    ...:......... ..
  13    1404   000040 040040   000000 000000   000000 777777   000000 000000    .   ............
  13    1410   000000 000000   000000 000000   000000 000000   000000 000000    ................
  13    1414   251000 622000   000000 000000   000000 000000   111250 000000    ............I...
  13    1420   040040 040040   000000 000000   000000 000000   000000 000000        ............
  13    1424   000000 000000   ****** ******                                    ........

EDIT_NAME
 Sect OctLoc
  13    1426   005052 102117   104131 ******                                    .*BODY..

RESET_#1
 Sect OctLoc
  13    1430   000002 177640   001440 006000   000001 777640   001436 006000    ................
  13    1434   000000 177640   000000 006014   200000 000000   0***** ******    ................

RESET_#1_CMD
 Sect OctLoc
  13    1440   041122 105123   105124 040043   061*** ******                    !RESET #1...

RESET_#2
 Sect OctLoc
  13    1444   000002 177640   001454 006000   000001 777640   001452 006000    ................
  13    1450   000000 177640   000000 006014   200000 000000   0***** ******    ................

RESET_#2_CMD
 Sect OctLoc
  13    1454   041122 105123   105124 040043   062*** ******                    !RESET #2...

RESET_#3
 Sect OctLoc
  13    1460   000002 177640   001470 006000   000001 777640   001466 006000    ................
  13    1464   000000 177640   000000 006014   200000 000000   0***** ******    ................
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:429  

RESET_#3_CMD
 Sect OctLoc
  13    1470   041122 105123   105124 040043   063*** ******                    !RESET #3...

RESET_#4
 Sect OctLoc
  13    1474   000002 177640   001504 006000   000001 777640   001502 006000    ................
  13    1500   000000 177640   000000 006014   200000 000000   0***** ******    ................

RESET_#4_CMD
 Sect OctLoc
  13    1504   041122 105123   105124 040043   064*** ******                    !RESET #4...

E_SYNERR
 Sect OctLoc
  13    1507   302522 000010                                                    ....

E_NOTALLOW
 Sect OctLoc
  13    1510   261623 011300                                                    ....

E_NAMENTALLOWED
 Sect OctLoc
  13    1511   261517 010070                                                    ...8

E_BADMAIL
 Sect OctLoc
  13    1512   261623 011310                                                    ....

E_NOMORE
 Sect OctLoc
  13    1513   261623 011330                                                    ....

E_BADADDRESS
 Sect OctLoc
  13    1514   261623 011340                                                    ....
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:430  

E_MISSINGFIELDS
 Sect OctLoc
  13    1515   261623 011420                                                    ....

E_NCG1
 Sect OctLoc
  13    1516   261623 011370                                                    ....

E_NOTSENT
 Sect OctLoc
  13    1517   261623 011404                                                    ....

E_BADRTOADDRESS
 Sect OctLoc
  13    1520   261623 011410                                                    ....

E_SENDBRKMSG
 Sect OctLoc
  13    1521   261623 011430                                                    ....

E_USING_MSG_FMT
 Sect OctLoc
  13    1522   261517 017660                                                    ....

E_FORMSGFMT
 Sect OctLoc
  13    1523   261623 016050                                                    ...(

E_FORENCLFMT
 Sect OctLoc
  13    1524   261623 016240                                                    ....

E_EDITMESFMT
 Sect OctLoc
  13    1525   261623 016040                                                    ...

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:431  
E_TOREQUIRED
 Sect OctLoc
  13    1526   261623 016230                                                    ....

E_TOOMANYSITES
 Sect OctLoc
  13    1527   261623 011440                                                    ....

E_PASTDEFER
 Sect OctLoc
  13    1530   261623 011450                                                    ....

(unnamed)
 Sect OctLoc
  13    1531   123105 116104   040100 040040   040040 040040   040042 040040    SEND @       "
  13    1535   040052 102117   104131 040040   056056 056040   056103 120066     *BODY  ... .CP6
  13    1541   076040 040040   100103 120066   076040 040040                    >   @CP6>

(unnamed)
 Sect OctLoc
  17     000   000002 000000   000007 006000   000000 006000   000001 000000    ................
  17     004   000000 002000   000000 006000   000004 006000   000000 006000    ................
  17     010   000004 006000   000000 006000   000004 006000   000000 006000    ................
  17     014   000004 006000   000000 006000   000004 006000   000000 000000    ................
  17     020   000016 006000   000000 006000   000000 006000   000000 006000    ................
  17     024   000004 000000   000053 006000   000132 006000   000062 006000    .....+...Z...2..
  17     030   000011 006000   000000 006000   000000 006014   000000 006000    ................
  17     034   577777 777777   000005 000000   000014 006000   000006 000000    ................
  17     040   000000 000001   000025 777640   000227 006000   000040 006000    ............. ..
  17     044   000272 006000   000000 006000   000003 777640   000004 200000    ................
  17     050   000337 600000   001516 006000   000017 006000   000000 006000    ................
  17     054   000000 006003   000007 000000   400000 000000   000056 006000    ................
  17     060   000100 177640   001522 006000   001510 006000   001512 006000    .@..............
  17     064   040040 040040   000612 006000   000141 200000   000000 000044        .....a.....$
  17     070   000067 006000   001520 006000   000114 006000   001515 006000    .7.......L......
  17     074   000003 000000   000000 006000   000000 006000   001104 006000    .............D..
  17     100   000000 206000   001526 006000   001521 006000   777777 677777    ................
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:432  
  17     104   000747 006000   000067 006000   001517 006000   000000 000000    .....7..........
  17     110   000017 006000   000401 006000   000000 006000   000012 006000    ................
  17     114   000000 006000   001104 006000   000000 206000   000013 006000    .....D..........
  17     120   000000 006000   001104 006000   000000 206000   777777 600000    .....D..........
  17     124   000025 777640   001002 006000   000011 000000   000000 006000    ................
  17     130   000000 000144   000130 006000   000000 006000   000000 006000    ...d.X..........
  17     134   000000 006000   000056 006000   000017 006000   000017 006000    ................
  17     140   001525 006000   000000 000030   000141 006000   000000 000040    .........a.....
  17     144   000143 006000   777577 777777   757777 777777   677777 777777    .c..............
  17     150   000000 006000   000000 006000   777776 777777   000070 006000    .............8..
  17     154   000000 006000   000000 006000   000000 006000   000000 006000    ................
  17     160   001530 006000   000017 006000   000000 006000   000000 006000    ................
  17     164   000017 006000   000056 006000   000636 006000   001523 006000    ................
  17     170   001524 006000   000000 000000   000000 177640   000226 006000    ................
  17     174   000674 006000   777773 777777   001511 006000   001242 006000    ................
  17     200   001513 006000   000000 000041   000201 006000   000000 000031    .......!........
  17     204   000203 006000   000000 000021   000205 006000   041040 040040    ............!
  17     210   000011 006000   000000 006000   000000 006000   000000 006000    ................
  17     214   000000 006000   000000 006000   000000 006000   001527 006000    ................
  17     220   000522 006000   000000 006000   000040 006000   000226 006000    ......... ......
  17     224   000000 006000   000000 006000   000000 000020   000226 006000    ................
  17     230   000021 600000   001514 006000   000000 177640   000000 006014    ................
  17     234   000737 006000   076040 040040   000000 006000   000000 006000    ....>   ........
  17     240   001104 006000   000000 206000   056040 040040   100040 040040    .D.......   @
  17     244   000130 006000   000000 006000   000001 006000   000017 006000    .X..............
  17     250   000001 377640   001364 006000   000006 777640   001355 006000    ................
  17     254   000130 006000   000000 006000   000000 006000   000017 006000    .X..............
  17     260   000000 006000   000070 006000                                    .....8..
     3043    23867        %EOD;

PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:433  
--  Include file information  --

   XUR_ENTRY.:LIB_E05  cannot be made into a system file and is referenced.
   XUM_MACRO_C.:LIB_E05  is referenced.
   XUH_MACRO_C.:LIB_E05  is referenced.
   XUE_MACRO_C.:LIB_E05  is referenced.
   XU_FORMAT_C.:LIB_E05  is referenced.
   XU_SUBS_C.:LIB_E05  is referenced.
   XU_MACRO_C.:LIB_E05  is referenced.
   XU_PERR_C.:LIB_E05  is referenced.
   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   VM_PERR_C.:VMB6TOU  is referenced.
   VO_SUBS_C.:VMB6TOU  is referenced.
   VN_SUBS_C.:VMB6TOU  is referenced.
   VM_MACRO_C.:VMB6TOU  is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
   B_SEGIDS_C.:LIB_E05  is referenced.
   B_ERRORS_C.:LIB_E05  is referenced.
   B$TABLES_C.:LIB_E05  cannot be made into a system file and is referenced.
   B$JIT_C.:LIB_E05  is referenced.
   B$JIT.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure VNS$SEND.
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:434  

 **** Variables and constants ****

  ****  Section 011  Data  VNS$SEND

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   106-0-0/c CHAR(6)     r     1 ANSI_DATE                104-0-0/c CHAR(8)     r     1 ANSI_TIME
  1100-0-0/d STRC(360)   r     1 CHANGE_PROMPT            750-0-0/d STRC(1080)  r     1 CLOSE_SAVE
  1006-0-0/d STRC(1080)  r     1 CLOSE_SCRATCH            114-0-0/c CHAR(300)   r     1 CMD_BUF
    67-0-0/w UBIN        r     1 CMD_DCB                  111-0-0/w PTR         r     1 DEFAULT_EDITOR$
   112-0-0/w PTR         r     1 ENCL$                    113-0-0/w PTR               1 ENCLREC$
  1342-0-0/d STRC(360)   r     1 ENCL_REC                1152-0-0/c STRC(72)    r     1 FID_ACCT
  1142-0-0/c STRC(288)   r     1 FID_NAME                1154-0-0/c STRC(72)    r     1 FID_PASS
  1156-0-0/d STRC(90)    r     1 FID_SN                   734-0-0/c STRC(45)    r     1 FMT_SIGNED
  1355-0-0/w STRC(252)   r     1 FWD_ENCL_HEAD            636-0-0/w STRC(1080)  r     1 F_FDSSIGNED
   674-0-0/w STRC(1080)  r     1 F_FDSSPACE              1242-0-0/d STRC(2052)  r     1 HELP_PARAM
   110-0-0/w PTR         r     1 INVOKE_EDITOR$          1122-0-0/d STRC(576)   r     1 LINKFPT
  1334-0-0/c STRC(45)          1 MAIL_PROG_NAME           737-0-0/w STRC(324)   r     1 MCB
  1340-0-0/w SBIN        r     1 PAGESIZE                1354-0-0/w SBIN        r     1 PAGESIZE
     0-0-0/w STRC(504)   r     1 P_PCB                   1062-0-0/d STRC(504)   r     1 READ_ENCL_FILE
  1044-0-0/d STRC(504)   r     1 READ_SI                   70-0-0/w UBIN        r     1 SEED
  1336-0-0/c STRC(45)    r     1 SEND_PROG_NAME          1112-0-0/d STRC(288)   r     1 SET_INPUT
    66-0-0/b BIT         r     1 TESTMODE                 736-0-0/w UBIN        r     1 UTS
   732-0-0/d VECT        r     1 VECT                     401-0-0/w STRC(2772)  r     1 VM_BODYREC
  1176-0-0/c STRC(1296)  r     1 VM_CGBUFFER              272-0-0/w STRC(2529)  r     1 VM_CURRENT_FOLDER
   520-0-0/c STRC(72)          1 VM_ENCLKEY               516-0-0/c STRC(54)          1 VM_ENCLLIST_KEY
  1364-0-0/c STRC(54)    r     1 VM_INFOKEY               612-0-0/w STRC(711)   r     1 VM_RADDRESS
   227-0-0/w STRC(1260)  r     1 VM_SEARCH_INFO           522-0-0/w STRC(2016)  r     1 VM_SITE
   102-0-0/w SBIN        r     1 VNS_BREAK_TYPE
    76-0-0/d REMB        r     1 VNS_REMEMBER(0:1)
    71-0-0/c STRC(72)    r     1 WORK_DATE                 71-0-0/c CHAR(8)     r     1 WORK_DATEC
    73-0-0/c STRC(45)    r     1 WORK_TIME                 73-0-0/c CHAR(5)     r     1 WORK_TIMEC
   103-0-0/w UBIN        r     1 WORK_UTS                1162-0-0/d STRC(432)   r     1 WRITE_MAILCG
    16-0-0/d STRC(1404)  r     1 XUR_INIT

  ****  Section 013 RoData VNS$SEND
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:435  

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   226-0-0/c CHAR        r     1 BLANK_CHAR               522-0-0/d STRC(864)   r     1 CHECK_FID_CONST
  1166-0-0/d STRC(432)   r     1 CHECK_TIME               160-0-0/w STRC(1332)  r     1 CVM_HEADER
     5-0-0/c STRC(45)    r     1 DEFAULT_EDITOR          1426-0-0/c STRC(54)    r     1 EDIT_NAME
  1514-0-0/w STRC        r     1 E_BADADDRESS            1512-0-0/w STRC        r     1 E_BADMAIL
  1520-0-0/w STRC        r     1 E_BADRTOADDRESS           13-0-0/w STRC        r     1 E_CMD_BODY2_PROMPT
    12-0-0/w STRC        r     1 E_CMD_BODY_PROMPT       1525-0-0/w STRC        r     1 E_EDITMESFMT
  1524-0-0/w STRC        r     1 E_FORENCLFMT            1523-0-0/w STRC        r     1 E_FORMSGFMT
  1515-0-0/w STRC        r     1 E_MISSINGFIELDS         1511-0-0/w STRC        r     1 E_NAMENTALLOWED
  1516-0-0/w STRC        r     1 E_NCG1                  1513-0-0/w STRC        r     1 E_NOMORE
  1510-0-0/w STRC        r     1 E_NOTALLOW              1517-0-0/w STRC        r     1 E_NOTSENT
    11-0-0/w STRC        r     1 E_OPTIONS_PROMPT        1530-0-0/w STRC        r     1 E_PASTDEFER
  1521-0-0/w STRC        r     1 E_SENDBRKMSG            1507-0-0/w STRC        r     1 E_SYNERR
  1527-0-0/w STRC        r     1 E_TOOMANYSITES          1526-0-0/w STRC        r     1 E_TOREQUIRED
  1522-0-0/w STRC        r     1 E_USING_MSG_FMT          225-0-0/c CHAR(3)     r     1 FMT_SPACE
   236-0-0/d STRC(144)   r     1 FPT_INT                  230-0-0/d STRC(216)   r     1 FPT_XCON
  1202-0-0/d STRC(432)   r     1 GET_ANSI_TIME           1152-0-0/d STRC(432)   r     1 GET_CURRENT
  1136-0-0/d STRC(432)   r     1 GET_TIME                1216-0-0/d STRC(432)   r     1 GET_UTS
     7-0-0/c CHAR(8)     r     1 IAM                       14-0-0/c STRC(18)    r     1 IBEX_PROMPT
   144-0-0/w STRC(432)   r     1 INIT_ENCLOS              135-0-0/w STRC(252)   r     1 INIT_ENCL_HEAD
     2-0-0/w UBIN        r     1 M$APND_NUM                 0-0-0/w UBIN        r     1 M$EDIT_NUM
     1-0-0/w UBIN        r     1 M$ENCL_NUM              1324-0-0/w STRC(288)   r     1 MAILCG_STATION
  1122-0-0/d STRC(216)   r     1 NOTSENT_ERR              426-0-0/d STRC(2088)  r     1 OPEN_APPEND
  1334-0-0/d STRC(2088)  r     1 OPEN_EDIT_FILE           736-0-0/d STRC(2088)  r     1 OPEN_ENCL_FILE
  1030-0-0/d STRC(2088)  r     1 OPEN_FORWARD_ENCL_FILE
   334-0-0/d STRC(2088)  r     1 OPEN_FORWARD_FILE       1232-0-0/d STRC(2088)  r     1 OPEN_MAILCG
   644-0-0/d STRC(2088)  r     1 OPEN_SI                  552-0-0/d STRC(2088)  r     1 OPEN_SI_DEFAULT
   242-0-0/d STRC(2088)  r     1 OPEN_WORK               1430-0-0/d STRC(288)   r     1 RESET_#1
  1440-0-0/c CHAR(9)     r     1 RESET_#1_CMD            1444-0-0/d STRC(288)   r     1 RESET_#2
  1454-0-0/c CHAR(9)     r     1 RESET_#2_CMD            1460-0-0/d STRC(288)   r     1 RESET_#3
  1470-0-0/c CHAR(9)     r     1 RESET_#3_CMD            1474-0-0/d STRC(288)   r     1 RESET_#4
  1504-0-0/c CHAR(9)     r     1 RESET_#4_CMD             520-0-0/c STRC(72)    r     1 SYS_ACCT
  1130-0-0/d STRC(216)   r     1 TAKE_THIRTY                3-0-0/c CHAR(5)     r     1 TIME_INIT
    15-0-0/w PTR         r     1 VN_DEFAULT_NODES(0:29)
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:436  
    53-0-0/w STRC(252)   r     1 VN_NATL_NODES            132-0-0/c STRC(81)    r     1 VN_NODEFID
    62-0-0/c STRC(1440)  r     1 VN_NODENAMES

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   375-0-0/w PTR         r     1 @ASIS                    371-0-0/w PTR         r     1 @CMD_PROMPT
   437-0-0/w PTR         r     1 @FLD$                    445-0-0/w PTR         r     1 @FLD$
   375-0-0/w PTR         r     1 @FLD$                    371-0-0/w PTR         r     1 @FLD$
   371-0-0/w PTR         r     1 @FLD$                    446-0-0/w PTR         r     1 @MAX_SIZE
   374-0-0/w PTR         r     1 @NODE$                   445-0-0/w PTR         r     1 @P1$
   373-0-0/w PTR         r     1 @PROMPT_CODE             440-0-0/w PTR         r     1 @SIZE
   441-0-0/w PTR         r     1 @TEXT                    372-0-0/w PTR         r     1 @TEXT$
   371-0-0/w PTR         r     1 @TSTAMP                  376-0-0/w PTR         r     1 @TYPE
   372-0-0/w PTR         r     1 @TYPE                    375-0-0/w PTR         r     1 @VM_TYPE
   443-0-0/b BIT         r     1 ALLOC_TEXTC               *0-0-0/b BIT         r     1 ASIS
    30-0-0/w PTR         r     1 BLK$                     242-0-0/d STRC(864)   r     1 CHECK_FID
    13-0-0/w PTR         r     1 CMD_BC$                    7-0-0/w PTR         r     1 CMD_BODY$
    12-0-0/w PTR         r     1 CMD_COPY$                 14-0-0/w PTR         r     1 CMD_DEFER$
    *0-0-0/c ASTR(9)     r     1 CMD_PROMPT                11-0-0/w PTR         r     1 CMD_REF$
    10-0-0/w PTR         r     1 CMD_RTO$                  15-0-0/w PTR         r     1 CMD_SIGNED$
     6-0-0/w PTR         r     1 CMD_SUBJECT$               5-0-0/w PTR         r     1 CMD_TO$
    17-0-0/b BIT         r     1 DID_SEND                 137-0-0/w SBIN        r     1 DUMMY
   136-0-0/w SBIN        r     1 ENTRY_REASON              21-0-0/b BIT         r     1 ERR_FLAG
    *0-0-0/w STRC              1 FLD                       *0-0-0/w STRC              1 FLD
    *0-0-0/w PTR         r     1 FLD$                      *0-0-0/w PTR         r     1 FLD$
    *0-0-0/w PTR         r     1 FLD$                      *0-0-0/w PTR         r     1 FLD$
    *0-0-0/w PTR         r     1 FLD$                     134-0-0/w SBIN        r     1 I
   376-0-0/w SBIN        r     1 I                         22-0-0/b BIT         r     1 ID_ASSIGNED
   135-0-0/w SBIN        r     1 J                         *0-0-0/w SBIN        r     1 MAX_SIZE
   442-0-0/w SBIN        r     1 MAX_TEXTC_SIZE           435-0-0/w UBIN        r     1 NEW_TYPE
   433-0-0/w PTR               1 NEXT$                     *0-0-0/w PTR         r     1 NODE$
   140-0-0/w PTR         r     1 NODES$                   371-0-0/w SBIN        r     1 NUM_RECORDS
   272-0-0/d STRC(2088)  r     1 OPEN_FPT                  16-0-0/w PTR         r     1 OPTION_NODES$
    27-0-0/w PTR         r     1 OUT$                      27-0-0/w STRC        r     1 OUTERR
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:437  
    *0-0-0/w PTR         r     1 P1$                      447-0-0/w PTR         r     1 P2$
    26-0-0/b BIT         r     1 PREPROCESS                25-0-0/b BIT         r     1 PREPROCESS_OPT
   434-0-0/w PTR         r     1 PREV$                    373-0-0/w PTR         r     1 PREV_ENT$
    23-0-0/b BIT         r     1 PROC_OPTIONS              *0-0-0/w STRC        r     1 PROMPT_CODE
    20-0-0/b BIT         r     1 PROMPT_OPTIONS           432-0-0/w SBIN              1 PTR$_OFFSET
   371-0-0/w PTR         r     1 PTR1$                    372-0-0/w PTR         r     1 PTR2$
   374-0-0/w PTR               1 REC$                     365-0-0/w SBIN        r     1 SAVE_BREAK_TYPE
     4-0-0/w PTR         r     1 SEND_CMD$                  3-0-0/w PTR         r     1 SEND_NODES$
   133-0-0/w SBIN        r     1 SIZE                      *0-0-0/w UBIN        r     1 SIZE
    24-0-0/b BIT         r     1 SI_FILE                  141-0-0/c STRC(2313)  r     1 TEMP_TEXTC
    *0-0-0/c CHAR(511)   r     1 TEXT                      *0-0-0/w PTR         r     1 TEXT$
    31-0-0/w PTR         r     1 TMP$                     377-0-0/w PTR         r     1 TMP$
    31-0-0/w STRC        r     1 TMPR$                     *0-0-0/w UBIN        r     1 TSTAMP
    *0-0-0/w UBIN        r     1 TYPE                      *0-0-0/w UBIN        r     1 TYPE
   372-0-0/c CHAR(128)   r     1 UNIQUE_ID_STRING          32-0-0/c STRC(2313)  r     1 USER_NAME
    *0-0-0/w SBIN        r     1 VM_TYPE

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$                     0-0-0/w PTR         r     1 B$SR_NON_BLANK$
     0-0-0/w PTR         r     1 B$TCB$                     0-0-0/w PTR         r     1 CMD_BC
     0-0-0/w PTR         r     1 CMD_BODY                   0-0-0/w PTR         r     1 CMD_COPY
     0-0-0/w PTR         r     1 CMD_DEFER                  0-0-0/w PTR         r     1 CMD_REF
     0-0-0/w PTR         r     1 CMD_RTO                    0-0-0/w PTR         r     1 CMD_SIGNED
     0-0-0/w PTR         r     1 CMD_SUBJECT                0-0-0/w PTR         r     1 CMD_TO
     0-0-0/c ASTR(9)     r     1 ERRMSG_FID                 0-0-0/w STRC              1 E_BROADCAST_PROMPT
     0-0-0/w STRC        r     1 E_CMD_BC_PROMPT            0-0-0/w STRC        r     1 E_CMD_COPY_PROMPT
     0-0-0/w STRC        r     1 E_CMD_DEFER_PROMPT
     0-0-0/w STRC              1 E_CMD_FILE_COPY_PROMPT
     0-0-0/w STRC        r     1 E_CMD_REF_PROMPT           0-0-0/w STRC        r     1 E_CMD_RTO_PROMPT
     0-0-0/w STRC        r     1 E_CMD_SIGNED_PROMPT        0-0-0/w STRC        r     1 E_CMD_SUBJECT_PROMPT
     0-0-0/w STRC        r     1 E_CMD_TO_PROMPT            0-0-0/w STRC              1 E_DR_PROMPT
     0-0-0/w STRC              1 E_NO_CHAR                  0-0-0/w STRC              1 E_RR_PROMPT
     0-0-0/w STRC              1 E_YES_CHAR                 0-0-0/b BIT         r     1 GATEWAY
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:438  
     0-0-0/w UBIN              1 M$DO_NUM                   0-0-0/w UBIN              1 M$LO_NUM
     0-0-0/w UBIN              1 M$MAIL_CENTRAL_NUM         0-0-0/w UBIN        r     1 M$MAIL_COMGROUP_NUM
     0-0-0/w UBIN        r     1 M$MAIL_FILE_NUM            0-0-0/w UBIN        r     1 M$MAIL_GLOBAL_NUM
     0-0-0/w UBIN        r     1 M$ME_NUM                   0-0-0/w UBIN              1 M$NODE_NUM
     0-0-0/w UBIN        r     1 M$SI_NUM                   0-0-0/w UBIN        r     1 M$WORK_NUM
     0-0-0/w PTR         r     1 OPTION_NODES               0-0-0/w PTR         r     1 PRIVILEGED_NODES
     0-0-0/w PTR         r     1 SEND_CMD                   0-0-0/w PTR         r     1 SEND_NODES
     0-0-0/w PTR         r     1 VM_ADDLIST$                0-0-0/d VECT        r     1 VM_ADDLIST_
     0-0-0/w PTR               1 VM_ADDREC$                 0-0-0/d VECT              1 VM_ADDREC_
     0-0-0/w PTR               1 VM_COPY$                   0-0-0/d VECT              1 VM_COPY_
     0-0-0/w PTR         r     1 VM_ENCLLIST$               0-0-0/d VECT        r     1 VM_ENCLLIST_
     0-0-0/w PTR         r     1 VM_ENCLREC$                0-0-0/d VECT        r     1 VM_ENCLREC_
     0-0-0/c STRC(270)   r     1 VM_FORWARD_ENCL_NAME       0-0-0/c STRC(270)   r     1 VM_FORWARD_FILE_NAME
     0-0-0/c STRC(72)    r     1 VM_FORWARD_FILE_PASS       0-0-0/w PTR         r     1 VM_HEADER$
     0-0-0/d VECT        r     1 VM_HEADER_                 0-0-0/d VECT              1 VM_HEADER_INIT_
     0-0-0/w PTR               1 VM_INPUT$                  0-0-0/d VECT              1 VM_INPUT_
     0-0-0/c STRC(72)    r     1 VM_MAILCG_NAME             0-0-0/w STRC(432)   r     1 VM_MAILCG_SETSTA
     0-0-0/c STRC(72)    r     1 VM_MAIL_ACCT               0-0-0/c STRC(54)          1 VM_NAME_MAP_NAME
     0-0-0/w PTR               1 VM_PARSEAREA$              0-0-0/d VECT        r     1 VM_PARSEAREA_
     0-0-0/w PTR         r     1 VM_PROFILE$                0-0-0/d VECT        r     1 VM_PROFILE_
     0-0-0/w PTR               1 VM_SELECT$                 0-0-0/d VECT              1 VM_SELECT_
     0-0-0/c STRC(288)   r     1 VM_SEND_FILE_NAME          0-0-0/c CHAR(8)     r     1 VM_SITENAME
     0-0-0/w PTR               1 VM_WORK$                   0-0-0/d VECT        r     1 VM_WORK_
     0-0-0/c ASTR(9)     r     1 VN_BLIND_COPY              0-0-0/c ASTR(9)     r     1 VN_BODY
     0-0-0/c ASTR(9)     r     1 VN_BODY2                   0-0-0/c ASTR(9)     r     1 VN_BROADCAST
     0-0-0/c ASTR(9)     r     1 VN_COPY                    0-0-0/c ASTR(9)     r     1 VN_DEFER
     0-0-0/c ASTR(9)     r     1 VN_DR                      0-0-0/c ASTR(9)     r     1 VN_FCOPY
     0-0-0/c ASTR(9)     r     1 VN_NO_CHAR                 0-0-0/c ASTR(9)     r     1 VN_OPTIONS
     0-0-0/c ASTR(9)     r     1 VN_REFERENCE               0-0-0/c ASTR(9)     r     1 VN_REPLY_TO
     0-0-0/c ASTR(9)     r     1 VN_RR                      0-0-0/c ASTR(9)     r     1 VN_SIGNED
     0-0-0/c ASTR(9)     r     1 VN_SUBJECT                 0-0-0/c ASTR(9)     r     1 VN_TO_
     0-0-0/c ASTR(9)     r     1 VN_YES_CHAR

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:439  

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/d STRC(8856)  r     1 B$JIT
     0-0-0/w STRC(144)   r     1 B$TCB                      0-0-0/w SBIN        r     1 BSD
     0-0-0/c CHAR        r     1 CONTINUE_CHAR              0-0-0/d ASTR(3528)  r     1 F$DCB
     0-0-0N  NULL        r     1 M$APND                     0-0-0N  NULL        r     1 M$DO
     0-0-0N  NULL        r     1 M$EDIT                     0-0-0N  NULL        r     1 M$ENCL
     0-0-0N  NULL        r     1 M$LO                       0-0-0N  NULL        r     1 M$MAIL_CENTRAL
     0-0-0N  NULL        r     1 M$MAIL_COMGROUP            0-0-0N  NULL        r     1 M$MAIL_FILE
     0-0-0N  NULL        r     1 M$MAIL_GLOBAL              0-0-0N  NULL        r     1 M$ME
     0-0-0N  NULL        r     1 M$NODE                     0-0-0N  NULL        r     1 M$SI
     0-0-0N  NULL        r     1 M$UC                       0-0-0N  NULL        r     1 M$WORK
     0-0-0/w PTR         r     1 NODES_TO_USE(0:29)
     0-0-0/d STRC(4608)  r     1 NON_BLANK                  0-0-0/w STRC(144)   r     1 P$B
     0-0-0/w ASTR(153)   r     1 P$S                        0-0-0/c ACHR        r     1 P_PCB$TEXT
     0-0-0/c ASTR(9)     r     1 TEXTC                      0-0-0/w STRC(711)   r     1 VM$RADDRESS
     0-0-0/w STRC(711)   r     1 VM$RADDRESS                0-0-0/w STRC(2448)        1 VM$UADDRESS
     0-0-0/w STRC(2448)  r     1 VM$UADDRESS                0-0-0/w STRC(252)   r     1 VM_ADD_HEAD
     0-0-0/w STRC(432)   r     1 VM_ENCLOS                  0-0-0/w ASTR(72)    r     1 VM_ENCLREC
     0-0-0/w STRC(252)   r     1 VM_ENCL_HEAD               0-0-0/w STRC(1332)  r     1 VM_HEADER
     0-0-0/w STRC(4068)  r     1 VM_PROFILE                 0-0-0/c ASTR(9)     r     1 X$STRING


   Procedure VNS$SEND requires 4273 words for executable code.
   Procedure VNS$SEND requires 308 words of local(AUTO) storage.
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:440  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:441  
          MINI XREF LISTING

ABORT_SEND
     21860**LABEL   21204--REMEMBR 21252--CALLALT 21337--GOTO    21392--GOTO    21484--GOTO    21499--GOTO
     21578--GOTO    21583--GOTO    21628--CALLALT 21662--CALLALT 21686--CALLALT 21714--CALLALT 21751--CALLALT
     21795--CALLALT 21803--CALLALT 21810--CALLALT 21845--CALLALT 21855--GOTO
ALLOC$RADDRESS IN PROCEDURE ALLOC$TEXTC
     23167**ENTRY   21547--CALL    21553--CALL    22653--CALL
ALLOC$TEXTC
     23148**PROC    21563--CALL    21570--CALL    21605--CALL    21613--CALL    22808--CALL    23318--CALL
     23383--CALL    23636--CALL
ALLOC_TEXTC IN PROCEDURE ALLOC$TEXTC
     23153**DCL     23156<<ASSIGN  23169<<ASSIGN  23183>>IF
ALT IN PROCEDURE ALLOC$TEXTC
     23202**LABEL   23174--CALLALT 23179--CALLALT
ALT IN PROCEDURE EDIT_MSG
     22412**LABEL   22387--CALLALT
ALT IN PROCEDURE ERASE$ADDR
     23287**LABEL   23279--CALLALT
ALT IN PROCEDURE ERASE$FLD
     23255**LABEL   23250--CALLALT
ALT IN PROCEDURE PROCESS_CMD
     22859**LABEL   22613--CALLALT 22763--CALLALT
ALT IN PROCEDURE PROMPT$TO
     23506**LABEL   23497--CALLALT 23500--CALLALT
ALT IN PROCEDURE REPLACE$ADDR
     23396**LABEL   23383--CALLALT 23390--CALLALT
ALT IN PROCEDURE REPLACE$FLD
     23332**LABEL   23318--CALLALT 23326--CALLALT
ALT IN PROCEDURE REREAD$CMD
     23137**LABEL   23129--CALLALT 23131--CALLALT
ANSI_DATE
     15746**DCL     19710--DCLINIT 19711--DCLINIT 23621>>CALLBLT
ANSI_TIME
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:442  
     15745**DCL     19712--DCLINIT 19713--DCLINIT 23621>>CALLBLT
APPEND_BODY IN PROCEDURE PROCESS_BODY
     22113**ENTRY   21770--CALL    22445--CALL    22458--CALL
ASIS IN PROCEDURE REREAD$CMD
     23088**DCL     23032--PROC    23124>>IF
B$ALT.CODE
     15113**DCL     15113--REDEF   15114--REDEF   15114--REDEF
B$ALT.DCB#
     15114**DCL     21905<>CALL
B$ALT.ERR
     15114**DCL     21905<>CALL    23201>>ASSIGN
B$ALT.ERR.CODE
     15115**DCL     21941>>IF      22224>>IF      22228>>IF      23698>>IF      23712>>IF      23743>>IF
     23783>>IF
B$ALT.ERR.ERR#
     15115**DCL     15115--REDEF
B$ALT.EVID
     15114**DCL     15114--REDEF   15114--REDEF
B$JIT.ACCN
       343**DCL     21461>>IF      21464--ASSIGN  21466>>ASSIGN  21538>>CALLBLT 21593>>ASSIGN
B$JIT.CCARS
       431**DCL     21332>>ASSIGN
B$JIT.CCBUF
       431**DCL     21333<>CALL
B$JIT.CPFLAGS1.SLEAZE
       437**DCL       437--REDEF
B$JIT.ERR.MID
       344**DCL       344--REDEF
B$JIT.JRESPEAK
       505**DCL       506--REDEF
B$JIT.MODE
       338**DCL     23596>>IF
B$JIT.NEXTCC
       485**DCL     21657>>DOWHILE
B$JIT.ORIGINATOR_PORT.FROM_CR
       614**DCL       614--REDEF     615--REDEF
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:443  
B$JIT.PNR
       518**DCL       518--REDEF
B$JIT.PRFLAGS.LS
       427**DCL     21411>>IF
B$JIT.PRFLAGS.OU
       427**DCL     21407>>IF
B$JIT.PRFLAGS.SI
       427**DCL     21399>>IF
B$JIT.PRFLAGS.UI
       427**DCL     21403>>IF
B$JIT.PRIV.ACTIVE.FMSEC
       345**DCL     21259>>IF
B$JIT.SYSID
       343**DCL     21376>>CALLBLT 23623>>CALLBLT
B$JIT.TSLINE
       612**DCL       613--REDEF
B$JIT.UNAME
       343**DCL     21538>>CALLBLT
B$JIT$
     10441**DCL       338--IMP-PTR 21259>>IF      21332>>ASSIGN  21333>>CALL    21376>>CALLBLT 21399>>IF
     21403>>IF      21407>>IF      21411>>IF      21461>>IF      21466>>ASSIGN  21538>>CALLBLT 21538>>CALLBLT
     21593>>ASSIGN  21657>>DOWHILE 23596>>IF      23623>>CALLBLT
B$SR_NON_BLANK$
     15105**DCL     15106--IMP-PTR 21998>>CALLBLT 23310>>CALLBLT 23362>>CALLBLT
B$TCB.ALT$
     15109**DCL     21905>>CALL    21905>>CALL    21941>>IF      22224>>IF      22228>>IF      23201>>ASSIGN
     23698>>IF      23712>>IF      23743>>IF      23783>>IF
B$TCB$
     10442**DCL     15109--IMP-PTR 21905>>CALL    21905>>CALL    21941>>IF      22224>>IF      22228>>IF
     23201>>ASSIGN  23698>>IF      23712>>IF      23743>>IF      23783>>IF
BAD_MAIL
     21475**LABEL   21349--CALLALT 21459--GOTO    21462--GOTO    21467--CALLALT 21489--CALLALT
BAD_TIME IN PROCEDURE REPLACE$TSTAMP
     23450**LABEL   23449--CALLALT
BLANK_CHAR
     18183**DCL     22560--ASSIGN  22808<>CALL
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:444  
BLK$
     15825**DCL     15125--IMP-PTR 15171--IMP-PTR 21344<<ASSIGN  21345>>DOCASE  21349<>CALL    21356>>ASSIGN
     21356>>ASSIGN  21367>>IF      21367>>IF      22445>>IF      22452>>ASSIGN  22452>>ASSIGN  22622<<ASSIGN
     22623>>DOCASE  22638>>DOINDEX 22639>>ASSIGN  22791>>ASSIGN  22791>>ASSIGN  22825<<ASSIGN  22826>>ASSIGN
     22829>>ASSIGN  23305<<ASSIGN  23306>>ASSIGN  23353<<ASSIGN  23354>>ASSIGN  23356>>DOCASE  23427<<ASSIGN
     23428>>DOCASE  23430>>CALLBLT 23430>>CALLBLT 23432>>CALLBLT 23432>>CALLBLT 23434>>IF      23436>>CALLBLT
     23436>>CALLBLT 23440>>CALLBLT 23440>>CALLBLT 23442>>CALLBLT 23442>>CALLBLT
BSD
     15592**DCL     21333<>CALL    21575<>CALL    21660<>CALL    21746<>CALL    21809<>CALL    22093<>CALL
     22096<>CALL    22385<>CALL    22703<>CALL    23132<>CALL    23318<>CALL    23383<>CALL    23495<>CALL
CHANGE_PROMPT
     18791**DCL     21837<>CALL    22091<>CALL    23114<>CALL
CHANGE_PROMPT.PROMPT_
     18797**DCL     21733<>CALL    21779<<ASSIGN  21834>>IF      21836<<ASSIGN  22031>>IF      22044<>CALL
     22047<<ASSIGN  22069<>CALL    22072<<ASSIGN  22096<>CALL    23100<>CALL    23103<<ASSIGN  23480<>CALL
     23483<<ASSIGN
CHANGE_PROMPT.V
     18799**DCL     18793--DCLINIT
CHECK$FLD
     23215**PROC    23192--CALL
CHECK_FID
     18920**DCL     21354<<ASSIGN  21359<>CALL    22193<<ASSIGN  22198<>CALL    22450<<ASSIGN  22455<>CALL
CHECK_FID.ASN_
     18923**DCL     21357<<ASSIGN  22196<<ASSIGN  22453<<ASSIGN
CHECK_FID.RES_
     18923**DCL     21358<<ASSIGN  22197<<ASSIGN  22454<<ASSIGN
CHECK_FID.TEXTFID_
     18920**DCL     21356<<ASSIGN  22195<<ASSIGN  22452<<ASSIGN
CHECK_FID.V
     18924**DCL     21355--ASSIGN  22194--ASSIGN  22451--ASSIGN
CHECK_FID.V_
     18920**DCL     21355<<ASSIGN  22194<<ASSIGN  22451<<ASSIGN
CHECK_FID_CONST
     18895**DCL     21354>>ASSIGN  22193>>ASSIGN  22450>>ASSIGN
CHECK_FID_CONST.V
     18899**DCL     18895--DCLINIT
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:445  
CHECK_TIME
     19685**DCL     23449<>CALL
CHECK_TIME.V
     19689**DCL     19685--DCLINIT
CLOSE_SAVE
     18625**DCL     21384<>CALL    21706<>CALL    22273<>CALL    22460<>CALL    23593<>CALL    23676<>CALL
     23831<>CALL    23854<>CALL
CLOSE_SAVE.SN_
     18625**DCL     18625--REDEF
CLOSE_SAVE.UTL_
     18626**DCL     18626--REDEF
CLOSE_SAVE.V
     18630**DCL     18625--DCLINIT
CLOSE_SAVE.V.DCB#
     18631**DCL     21383<<ASSIGN  21705<<ASSIGN  22272<<ASSIGN  22459<<ASSIGN  23592<<ASSIGN  23675<<ASSIGN
     23830<<ASSIGN  23853<<ASSIGN
CLOSE_SAVE.V.EXPIRE#
     18640**DCL     18640--REDEF
CLOSE_SAVE.V.TYPE#
     18638**DCL     18638--REDEF
CLOSE_SAVE.V.XTNSIZE#
     18635**DCL     18635--REDEF   18637--REDEF
CLOSE_SCRATCH
     18669**DCL     22401<>CALL    23828<>CALL
CLOSE_SCRATCH.SN_
     18669**DCL     18669--REDEF
CLOSE_SCRATCH.UTL_
     18670**DCL     18670--REDEF
CLOSE_SCRATCH.V
     18674**DCL     18669--DCLINIT
CLOSE_SCRATCH.V.DCB#
     18675**DCL     22400<<ASSIGN  23827<<ASSIGN
CLOSE_SCRATCH.V.EXPIRE#
     18684**DCL     18684--REDEF
CLOSE_SCRATCH.V.TYPE#
     18682**DCL     18682--REDEF
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:446  
CLOSE_SCRATCH.V.XTNSIZE#
     18679**DCL     18679--REDEF   18681--REDEF
CMD_BC
     15610**DCL     16825--DCLINIT
CMD_BC$
     15628**DCL     21271<<ASSIGN  22475<>CALL
CMD_BODY
     15606**DCL     16824--DCLINIT
CMD_BODY$
     15624**DCL     21267<<ASSIGN  22093>>CALL    22096>>CALL
CMD_BUF
     15832**DCL     18710--DCLINIT 18711--DCLINIT 21660<>CALL    22093<>CALL    22385<>CALL    23132<>CALL
     23684>>ASSIGN
CMD_COPY
     15609**DCL     16825--DCLINIT
CMD_COPY$
     15627**DCL     21270<<ASSIGN  22503<>CALL
CMD_DCB
     15725**DCL     21887<>CALL    21935>>ASSIGN  21937--ASSIGN  21987--IF      22008--IF      22010--CALL
     22089--IF      22382<<ASSIGN  22399<<ASSIGN  22457<<ASSIGN  23011--IF      23678<<ASSIGN  23832<<ASSIGN
CMD_DEFER
     15611**DCL     16825--DCLINIT
CMD_DEFER$
     15629**DCL     21272<<ASSIGN  22523<>CALL
CMD_ERR
     21877**PROC    21670--CALL    21743--CALL    21816--CALL    22025--CALL    22395--CALL    22705--CALL
     23129--CALL    23500--CALL
CMD_PROMPT IN PROCEDURE REREAD$CMD
     23039**DCL     23032--PROC    23100<>CALL    23132<>CALL
CMD_PROMPT.L# IN PROCEDURE REREAD$CMD
     23039**DCL     23039--IMP-SIZ 23098>>IF      23100>>CALL    23103>>ASSIGN  23103>>ASSIGN  23132>>CALL
CMD_PROMPT.NAME# IN PROCEDURE REREAD$CMD
     23039**DCL     23098>>IF      23103--ASSIGN
CMD_REF
     15608**DCL     16825--DCLINIT
CMD_REF$
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:447  
     15626**DCL     21269<<ASSIGN  22717<>CALL
CMD_RTO
     15607**DCL     16824--DCLINIT
CMD_RTO$
     15625**DCL     21268<<ASSIGN  21575>>CALL    22756<>CALL
CMD_SIGNED
     15612**DCL     16826--DCLINIT
CMD_SIGNED$
     15630**DCL     21273<<ASSIGN  22770<>CALL
CMD_SUBJECT
     15605**DCL     16824--DCLINIT
CMD_SUBJECT$
     15623**DCL     21266<<ASSIGN  21746>>CALL    22802<>CALL
CMD_TO
     15604**DCL     16824--DCLINIT
CMD_TO$
     15622**DCL     21265<<ASSIGN  22814<>CALL    23495>>CALL
COMMON IN PROCEDURE ALLOC$TEXTC
     23170**LABEL   23158--GOTO
CONTINUE_CHAR IN PROCEDURE CHECK$FLD
     23220**DCL     23226<<ASSIGN
CVM_HEADER
     17825**DCL     21436>>ASSIGN
CVM_HEADER.WORK_AREA
     17941**DCL     17907--DCLINIT
DEFAULT_EDITOR
     15774**DCL     15748--DCLINIT
DEFAULT_EDITOR$
     15748**DCL     21507<<ASSIGN  21767>>ASSIGN  22607>>ASSIGN
DID_SEND
     15715**DCL     21301<<ASSIGN  22335<<ASSIGN  22532>>IF      22533<<ASSIGN  23317<<ASSIGN  23382<<ASSIGN
     23576>>IF      23846<<ASSIGN
DO$SEND
     23518**PROC    21628--CALL    21686--CALL    21845--CALL    22613--CALL    22763--CALL
DUMMY
     15866**DCL     21998<<CALLBLT 23310<<CALLBLT 23362<<CALLBLT
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:448  
EDIT_MSG
     22301**PROC    21795--CALL
EDIT_NAME
     20105**DCL     20036--DCLINIT
ENCL$
     15823**DCL     17627--IMP-PTR 22167>>ASSIGN  22168<<ASSIGN  22178<<ASSIGN  22179>>ASSIGN  22182>>ASSIGN
     22202>>ASSIGN  22202>>ASSIGN  22203>>ASSIGN  22204>>ASSIGN  22204>>ASSIGN  22244>>CALL    22250>>ASSIGN
     22250>>ASSIGN  22259>>ASSIGN  22260>>ASSIGN  22263>>ASSIGN  22265>>IF      22266>>ASSIGN  22266>>ASSIGN
     22268>>ASSIGN  22270>>ASSIGN  23705<<ASSIGN  23707>>IF      23708>>DOINDEX 23709>>CALL    23718>>CALL
     23723>>ASSIGN  23725<<ASSIGN  23725>>ASSIGN  23761>>ASSIGN  23766<<ASSIGN  23767>>ASSIGN  23770<<ASSIGN
     23773>>ASSIGN  23777>>ASSIGN  23778>>IF      23779>>DOINDEX 23780>>CALL    23800>>ASSIGN  23801>>ASSIGN
     23802>>IF      23803>>ASSIGN  23805>>IF      23806>>ASSIGN  23806>>ASSIGN  23807>>ASSIGN  23807>>ASSIGN
     23812>>ASSIGN  23813>>IF      23814>>ASSIGN  23816>>ASSIGN  23820>>ASSIGN  23821<<ASSIGN  23821>>ASSIGN
ENCL_REC IN PROCEDURE PROCESS_ENCL
     22151**DCL     22232<>CALL
ENCL_REC.V IN PROCEDURE PROCESS_ENCL
     22153**DCL     22151--DCLINIT
ENCL_REC.V.DCB# IN PROCEDURE PROCESS_ENCL
     22153**DCL     22231<<ASSIGN
END_APPEND IN PROCEDURE DO$SEND
     23686**LABEL   23680--CALLALT
ENTRY_REASON
     15864**DCL     21342<<ASSIGN  21422>>IF      21422>>IF      21626>>IF      21679>>IF      21679>>IF
     21716>>IF      22311>>CALL    22339>>IF      22552>>IF      22552>>IF      22556>>IF      23666>>IF
     23666>>IF      23690>>IF
EOF
     21670**LABEL   21659--CALLALT 21668--GOTO
EOF IN PROCEDURE EDIT_MSG
     22393**LABEL   22384--CALLALT 22393--GOTO
EOF IN PROCEDURE PROCESS_BODY
     22099**LABEL   22025--CALLALT 22092--CALLALT
EOF IN PROCEDURE PROCESS_ENCL
     22258**LABEL   22226--GOTO
ERASE$ADDR
     23267**PROC    22342--CALL    22344--CALL    22345--CALL    22660--CALL    23390--CALL
ERASE$FLD
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:449  
     23239**PROC    22341--CALL    22346--CALL    22347--CALL    22348--CALL    22661--CALL    23174--CALL
     23326--CALL
ERR IN PROCEDURE REREAD$CMD
     23129**LABEL   23132--CALLALT
ERRMSG_FID
     10510**DCL     21254<>CALL    21527<>CALL    21783<>CALL    22378<>CALL    22408<>CALL    22737<>CALL
ERRMSG_FID.L#
     10510**DCL     10510--IMP-SIZ 21254>>CALL    21527>>CALL    21783>>CALL    22378>>CALL    22408>>CALL
     22737>>CALL
ERR_FLAG
     15717**DCL     21303<<ASSIGN  21679>>IF      21888<<ASSIGN  21906<<ASSIGN  22649<<ASSIGN  22787<<ASSIGN
     22995<<ASSIGN
EXIT_DOSEND
     21845**LABEL   21816--CALLALT
EXIT_SEND
     21848**LABEL   21629--GOTO    21687--GOTO
E_ADDRESS IN PROCEDURE GET$ADDLIST
     22973**LABEL   22952--CALLALT 22966--CALLALT
E_ALLOCATE
     21858**LABEL   21547--CALLALT 21553--CALLALT 21563--CALLALT 21570--CALLALT 21605--CALLALT 21613--CALLALT
E_ALLOCATE IN PROCEDURE DO$SEND
     23853**LABEL   23636--CALLALT
E_ALLOCATE IN PROCEDURE EDIT_MSG
     22406**LABEL   22341--CALLALT 22342--CALLALT 22344--CALLALT 22345--CALLALT 22346--CALLALT 22347--CALLALT
     22348--CALLALT
E_ALLOCATE IN PROCEDURE PROCESS_CMD
     22857**LABEL   22478--CALLALT 22506--CALLALT 22653--CALLALT 22659--CALLALT 22660--CALLALT 22661--CALLALT
     22710--CALLALT 22720--CALLALT 22742--CALLALT 22759--CALLALT 22777--CALLALT 22805--CALLALT 22808--CALLALT
     22817--CALLALT
E_APND IN PROCEDURE PROCESS_CMD
     22464**LABEL   22455--CALLALT 22456--CALLALT
E_BADADDRESS
     20572**DCL     22990<>CALL
E_BADMAIL
     20480**DCL     21496<>CALL
E_BADRTOADDRESS
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:450  
     20773**DCL     21582<>CALL
E_BODY IN PROCEDURE PROCESS_BODY
     22012**LABEL   22010--CALLALT 22013--CALLALT
E_BODY1 IN PROCEDURE PROCESS_BODY
     22023**LABEL   22093--CALLALT 22096--CALLALT
E_CG
     21388**LABEL   21380--CALLALT 21382--CALLALT 21384--CALLALT
E_CG IN PROCEDURE DO$SEND
     23588**LABEL   23586--CALLALT 23588--CALLALT
E_CMD_BC_PROMPT
     16225**DCL     22475<>CALL
E_CMD_BODY2_PROMPT
     16729**DCL     22069<>CALL
E_CMD_BODY_PROMPT
     16680**DCL     22044<>CALL
E_CMD_COPY_PROMPT
     16180**DCL     22503<>CALL
E_CMD_DEFER_PROMPT
     16360**DCL     22523<>CALL
E_CMD_REF_PROMPT
     16135**DCL     22717<>CALL
E_CMD_RTO_PROMPT
     16090**DCL     22756<>CALL
E_CMD_SIGNED_PROMPT
     16405**DCL     22770<>CALL
E_CMD_SUBJECT_PROMPT
     16045**DCL     21733<>CALL    22802<>CALL
E_CMD_TO_PROMPT
     16000**DCL     22814<>CALL    23480<>CALL
E_EDITMESFMT
     21016**DCL     22319<>CALL
E_ENCL IN PROCEDURE PROCESS_ENCL
     22286**LABEL   22198--CALLALT 22199--CALLALT 22232--CALLALT 22236--GOTO    22244--CALLALT 22273--CALLALT
     22280--CALLALT
E_FORENCLFMT
     20967**DCL     22557<>CALL
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:451  
E_FORMSGFMT
     20918**DCL     22555<>CALL
E_MISSINGFIELDS
     20621**DCL     21697<>CALL
E_NAMENTALLOWED
     20434**DCL     22648<>CALL
E_NCG1
     20671**DCL     21389<>CALL    23594<>CALL
E_NOMORE
     20526**DCL     22678<>CALL
E_NOTALLOW
     20388**DCL     21483<>CALL
E_NOTSENT
     20721**DCL     19597--DCLINIT 21950<>CALL
E_OPTIONS
     21816**LABEL   21809--CALLALT
E_OPTIONS_PROMPT
     16631**DCL     21290<>CALL
E_PASTDEFER
     21163**DCL     22537<>CALL
E_PMME
     21854**LABEL   21210--CALLALT 21215--CALLALT 21242--CALLALT 21243--CALLALT 21244--CALLALT 21245--CALLALT
     21246--CALLALT 21247--CALLALT 21254--CALLALT 21359--CALLALT 21360--CALLALT 21426--CALLALT 21427--CALLALT
     21435--CALLALT 21590--CALLALT 21642--CALLALT 21706--CALLALT 21707--CALLALT 21783--CALLALT
E_PMME IN PROCEDURE ALLOC$TEXTC
     23201**LABEL   23177--CALLALT
E_PMME IN PROCEDURE DO$SEND
     23853**LABEL   23651--CALLALT 23657--CALLALT 23671--CALLALT 23676--CALLALT 23677--CALLALT 23685--CALLALT
     23691--CALLALT 23746--GOTO    23756--CALLALT 23828--CALLALT 23831--CALLALT 23849--CALLALT
E_READ IN PROCEDURE READ_CC
     21941**LABEL   21936--CALLALT
E_SEND IN PROCEDURE DO$SEND
     23853**LABEL   23841--CALLALT 23845--CALLALT 23860--GOTO
E_SENDBRKMSG
     20822**DCL     21826<>CALL
E_SUBJECT
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:452  
     21743**LABEL   21746--CALLALT
E_SYNERR
     20342**DCL     21665>>IF      21882>>IF      22390>>IF
E_TOOMANYSITES
     21114**DCL     22786<>CALL
E_TOREQUIRED
     21065**DCL     21802<>CALL
E_USING_MSG_FMT
     20872**DCL     21471<>CALL
F$DCB.ACTPOS
     15568**DCL     15568--REDEF
F$DCB.ARS#
     15542**DCL     15542--REDEF   21937>>ASSIGN  22240>>ASSIGN
F$DCB.ASN#
     15557**DCL     22008>>IF
F$DCB.ATTR
     15561**DCL     15562--REDEF
F$DCB.BORROW
     15576**DCL     15576--REDEF   15576--REDEF   15576--REDEF
F$DCB.DCBNAME.L
     15590**DCL     15590--IMP-SIZ
F$DCB.DDEV.IC#
     15548**DCL     21657>>DOWHILE 21987>>IF      22089>>IF      23011>>IF
F$DCB.DVBYTE
     15545**DCL     22010<>CALL    22244<>CALL    23685<>CALL    23718<>CALL    23789<>CALL
F$DCB.EOMCHAR#
     15546**DCL     15546--REDEF
F$DCB.FCD#
     15555**DCL     21453>>IF
F$DCB.FLDID
     15571**DCL     15571--REDEF
F$DCB.FORM$
     15565**DCL     15565--REDEF
F$DCB.FSECT
     15581**DCL     15581--REDEF
F$DCB.FSN#
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:453  
     15558**DCL     15558--REDEF   15558--REDEF   15559--REDEF
F$DCB.HEADER$
     15564**DCL     15564--REDEF
F$DCB.IXTNSIZE#
     15562**DCL     15562--REDEF
F$DCB.LASTSTA$
     15551**DCL     15551--REDEF
F$DCB.LVL
     15577**DCL     15577--REDEF
F$DCB.NAME#.C
     15552**DCL     15552--REDEF
F$DCB.NOEOF
     15574**DCL     15574--REDEF
F$DCB.NRECS#
     15563**DCL     15563--REDEF
F$DCB.NRECX
     15582**DCL     15582--REDEF
F$DCB.OHDR
     15574**DCL     15574--REDEF
F$DCB.ORG#
     15557**DCL     15557--REDEF
F$DCB.PRECNO
     15580**DCL     15580--REDEF
F$DCB.RCSZ
     15586**DCL     15586--REDEF
F$DCB.RES#
     15553**DCL     15553--REDEF
F$DCB.SETX
     15565**DCL     15565--REDEF
F$DCB.TAB$
     15565**DCL     15565--REDEF
F$DCB.TDA
     15579**DCL     15580--REDEF
F$DCB.WSN#
     15553**DCL     15553--REDEF
FID_ACCT
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:454  
     19557**DCL     18560--DCLINIT 18896--DCLINIT 19130--DCLINIT 19249--DCLINIT
FID_NAME
     19544**DCL     18556--DCLINIT 18896--DCLINIT 19126--DCLINIT 19245--DCLINIT
FID_PASS
     19570**DCL     18557--DCLINIT 18897--DCLINIT 19127--DCLINIT 19246--DCLINIT
FID_SN
     19583**DCL     18555--DCLINIT 18897--DCLINIT 19125--DCLINIT 19244--DCLINIT
FLD$ IN PROCEDURE ALLOC$TEXTC
     23149**DCL     23148--PROC    23167--ENTRY   23174<>CALL    23181<<ASSIGN  23186>>ASSIGN  23187>>ASSIGN
     23187>>ASSIGN  23190>>ASSIGN  23191>>ASSIGN  23191>>ASSIGN  23192<>CALL    23196>>ASSIGN
FLD$ IN PROCEDURE ERASE$ADDR
     23268**DCL     23267--PROC    23270--REDEF   23276>>IF      23278>>ASSIGN  23280<<ASSIGN
FLD$ IN PROCEDURE ERASE$FLD
     23240**DCL     23239--PROC    23242--REDEF   23247>>IF      23249>>ASSIGN  23251<<ASSIGN
FLD$ IN PROCEDURE REPLACE$ADDR
     23348**DCL     23347--PROC    23364>>IF      23365>>IF      23365>>IF      23383<>CALL    23387>>IF
     23390<>CALL
FLD$ IN PROCEDURE REPLACE$FLD
     23301**DCL     23300--PROC    23312>>IF      23313>>IF      23313>>IF      23318<>CALL    23323>>IF
     23326<>CALL
FMT_SIGNED
     18177**DCL     17968--DCLINIT 17970--DCLINIT
FMT_SPACE
     18181**DCL     18082--DCLINIT 18084--DCLINIT
FPT_INT
     18244**DCL     21206<>CALL
FPT_INT.V
     18244**DCL     18244--DCLINIT
FPT_XCON
     18230**DCL     21203<>CALL
FPT_XCON.V
     18231**DCL     18230--DCLINIT
FWD_ENCL_HEAD IN PROCEDURE DO$SEND
     23537**DCL     23740--ASSIGN  23754--ASSIGN
FWD_ENCL_HEAD.ADDRESS_SIZE IN PROCEDURE DO$SEND
     23538**DCL     23754>>ASSIGN
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:455  
FWD_ENCL_HEAD.NUM_ENTRIES IN PROCEDURE DO$SEND
     23540**DCL     23776>>DOINDEX
F_FDSSIGNED
     17963**DCL     22550<>CALL
F_FDSSPACE
     18077**DCL     22561<>CALL
GATEWAY
     15865**DCL     21363<<ASSIGN  21516>>IF      21679>>IF      21695>>IF      21882>>IF      21990>>IF
GET$ADDLIST
     22871**PROC    21580--CALL    22683--CALL    22687--CALL    22691--CALL    23374--CALL
GET_ANSI_TIME
     19710**DCL     23620<>CALL
GET_ANSI_TIME.V
     19714**DCL     19710--DCLINIT
GET_CURRENT
     19659**DCL     22520<>CALL    23421<>CALL
GET_CURRENT.V
     19663**DCL     19659--DCLINIT
GET_ENCL_LIST IN PROCEDURE DO$SEND
     23695**LABEL   23701--GOTO
GET_ENCL_REC1 IN PROCEDURE DO$SEND
     23709**LABEL   23715--GOTO
GET_ENCL_REC2 IN PROCEDURE DO$SEND
     23780**LABEL   23786--GOTO
GET_OPTIONS
     21777**LABEL   21743--CALLALT 21832--GOTO
GET_TIME
     19634**DCL     21619<>CALL
GET_TIME.V
     19638**DCL     19634--DCLINIT
GET_UTS
     19736**DCL     22518<>CALL
GET_UTS.V
     19740**DCL     19736--DCLINIT
HELP_PARAM
     20132**DCL     22667<>CALL    22670<>CALL    22672<>CALL
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:456  
HELP_PARAM.HELP$
     20142**DCL     22665<<ASSIGN
HELP_PARAM.MORE#
     20145**DCL     22666<<ASSIGN
I
     15862**DCL     22162<<DOINDEX 22183>>ASSIGN  22638<<DOINDEX 22639>>ASSIGN  22701<<CALLBLT 22702>>ASSIGN
     22790<<DOINDEX 22791>>ASSIGN  22791>>ASSIGN  22791>>ASSIGN  23306<<ASSIGN  23307>>IF      23311>>ASSIGN
     23313>>IF      23318>>CALL    23354<<ASSIGN  23358<<ASSIGN  23358>>ASSIGN  23360<<ASSIGN  23360>>ASSIGN
     23363>>ASSIGN  23365>>IF      23383>>CALL    23426<<DOINDEX 23427>>ASSIGN  23706<<DOINDEX 23776<<DOINDEX
I IN PROCEDURE GET$ADDLIST
     22947**DCL     22957<<DOINDEX 22982<<DOINDEX
IAM
     15861**DCL     21210<>CALL
IBEX_PROMPT
     16766**DCL     21333<>CALL
ID_ASSIGNED
     15718**DCL     21304<<ASSIGN  22711<<ASSIGN  23618>>IF
IGNORE_YC1
     21403**LABEL   21401--CALLALT
IGNORE_YC2
     21407**LABEL   21405--CALLALT
IGNORE_YC3
     21411**LABEL   21409--CALLALT
IGNORE_YC4
     21411**LABEL   21413--CALLALT
INIT_ENCLOS
     17658**DCL     22182>>ASSIGN
INIT_ENCL_HEAD
     17528**DCL     22177>>ASSIGN
INVOKE_EDITOR$
     15747**DCL     21767<<ASSIGN  21793>>IF      21829<<ASSIGN  22305>>ASSIGN  22306>>CALLBLT 22306>>CALLBLT
     22307<<ASSIGN  22607<<ASSIGN  22609<<ASSIGN
J
     15863**DCL     21343<<DOINDEX 21344>>ASSIGN  21600<<CALLBLT 21602>>ASSIGN  22187<<DOINDEX 22188>>ASSIGN
     23310<<CALLBLT 23311<<ASSIGN  23311>>ASSIGN  23313>>IF      23318<>CALL    23362<<CALLBLT 23363<<ASSIGN
     23363>>ASSIGN  23365>>IF      23383<>CALL    23430<<CALLBLT 23431>>CALLBLT 23432<<CALLBLT 23433>>CALLBLT
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:457  
     23436<<CALLBLT 23437>>CALLBLT 23440<<CALLBLT 23441>>CALLBLT 23442<<CALLBLT 23443>>CALLBLT 23708<<DOINDEX
     23709<>CALL    23718<>CALL    23779<<DOINDEX 23780<>CALL    23789<>CALL
LINKFPT
     18859**DCL     22321<>CALL
LINKFPT.CP_CMD_
     18860**DCL     22320<<ASSIGN
LINKFPT.V
     18861**DCL     18861--DCLINIT
M$APND_NUM
     15599**DCL     22457>>ASSIGN  22459>>ASSIGN
M$CLOSE
      7880**DCL-ENT 21384--CALL    21706--CALL    22273--CALL    22401--CALL    22460--CALL    23593--CALL
     23676--CALL    23828--CALL    23831--CALL    23854--CALL
M$EDIT_NUM
     15595**DCL     22382>>ASSIGN  22400>>ASSIGN  23678>>ASSIGN  23830>>ASSIGN
M$ENCL_NUM
     15597**DCL     22231>>ASSIGN  22240--ASSIGN  22244--CALL    22272>>ASSIGN  23695<>CALL    23709<>CALL
     23718--CALL    23780<>CALL    23789--CALL    23827>>ASSIGN
M$ERR
      7892**DCL-ENT 21860--CALL    21951--CALL    22976--CALL
M$EXIT
      7892**DCL-ENT 21848--CALL    22492--CALL    22614--CALL
M$FID
      7943**DCL-ENT 21359--CALL    22198--CALL    22455--CALL
M$INT
      7935**DCL-ENT 21206--CALL
M$LINK
      7892**DCL-ENT 22321--CALL
M$MAIL_COMGROUP_NUM
     10429**DCL     21383>>ASSIGN  23592>>ASSIGN  23853>>ASSIGN
M$MAIL_FILE_NUM
     10421**DCL     21349<>CALL    21453--IF      21455<>CALL    21467<>CALL    21489<>CALL
M$MAIL_GLOBAL_NUM
     10425**DCL     21319<>CALL    21323>>ASSIGN
M$ME_NUM
     10433**DCL     21253<>CALL    21471<>CALL    22319<>CALL    22546<>CALL    22555<>CALL    22557<>CALL
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:458  
     22562<>CALL    22568<>CALL    22570<>CALL    22572<>CALL    22574<>CALL    22576<>CALL    22578<>CALL
     22580<>CALL    22582<>CALL    22584<>CALL    22586<>CALL    22588<>CALL    22590<>CALL
M$OPEN
      7880**DCL-ENT 21360--CALL    21380--CALL    21426--CALL    21435--CALL    21642--CALL    21707--CALL
     22199--CALL    22329--CALL    22456--CALL    23586--CALL    23677--CALL    23691--CALL
M$PRECORD
      7884**DCL-ENT 22232--CALL
M$PROMPT
      7904**DCL-ENT 21837--CALL    22091--CALL    23114--CALL
M$READ
      7881**DCL-ENT 21936--CALL    22221--CALL    23741--CALL    23756--CALL
M$RENV
      7936**DCL-ENT 21390--CALL    21497--CALL
M$SENV
      7936**DCL-ENT 21388--CALL    21495--CALL    23591--CALL
M$SINPUT
      7907**DCL-ENT 23120--CALL
M$SI_NUM
     10437**DCL     21253<>CALL    21657--DOWHILE 21705>>ASSIGN  22399>>ASSIGN  23675>>ASSIGN  23685--CALL
     23832>>ASSIGN
M$TIME
      7947**DCL-ENT 21619--CALL    22518--CALL    22520--CALL    23421--CALL    23449--CALL    23620--CALL
M$WAIT
      7938**DCL-ENT 23599--CALL
M$WORK_NUM
     10427**DCL     21427<>CALL    22010<>CALL    22013<>CALL    22244<>CALL    22280<>CALL    22311<>CALL
     22358<>CALL    22366<>CALL    22546<>CALL    22793<>CALL    22832<>CALL    22966<>CALL    23283<>CALL
     23651<>CALL    23657<>CALL    23671<>CALL    23685<>CALL    23718<>CALL    23789<>CALL    23825<>CALL
     23841<>CALL    23845<>CALL    23849<>CALL
M$WRITE
      7881**DCL-ENT 21382--CALL    23588--CALL
M$XCON
      7935**DCL-ENT 21203--CALL
M$YC
      7894**DCL-ENT 21401--CALL    21405--CALL    21409--CALL    21413--CALL
MAILCG_STATION
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:459  
     19946**DCL     19886--DCLINIT
MAILCG_STATION.MSGIDXT
     19956**DCL     19959--REDEF
MAX_SIZE IN PROCEDURE CHECK$FLD
     23218**DCL     23215--PROC    23225>>ASSIGN
MAX_TEXTC_SIZE IN PROCEDURE ALLOC$TEXTC
     23152**DCL     23155<<ASSIGN  23185>>IF      23190>>ASSIGN  23191>>ASSIGN  23192<>CALL
MCB
     18187**DCL     23175<>CALL    23179<>CALL    23250<>CALL    23279<>CALL
MCB.ADDRESS$
     18187**DCL     21606>>ASSIGN  23181>>ASSIGN  23249<<ASSIGN  23278<<ASSIGN
MCB.ERR
     18188**DCL     21858<>CALL    22415<>CALL    22857<>CALL    23201<<ASSIGN  23859<>CALL
MCB.FREE_HEAD$
     18187**DCL     21448<<ASSIGN
MCB.HI_SEGMENT$
     18187**DCL     21446<<ASSIGN  23837>>ASSIGN
MCB.MIN_SIZE
     18188**DCL     21444<<ASSIGN
MCB.SEGMENT_BASE$
     18187**DCL     21445<<ASSIGN
MCB.SIZE
     18187**DCL     23157<<ASSIGN  23170<<ASSIGN
MCB.TYPE
     18187**DCL     21443<<ASSIGN
MCB.WKSZ
     18187**DCL     21447<<ASSIGN  23178<<ASSIGN  23178>>ASSIGN
MON_ERR
     21903**PROC    21391--CALL    21498--CALL    21854--CALL    21947--CALL    22021--CALL    22286--CALL
     22313--CALL    22323--CALL    22331--CALL    22360--CALL    22368--CALL    22464--CALL    22795--CALL
     22838--CALL    22975--CALL    23122--CALL    23454--CALL    23595--CALL    23862--CALL
NEW_TYPE IN PROCEDURE DO$SEND
     23524**DCL     23777<<ASSIGN  23789>>CALL    23800>>ASSIGN
NEXT_LINE IN PROCEDURE PROCESS_BODY
     22023**LABEL   21992--GOTO    22115--GOTO
NODE$ IN PROCEDURE REREAD$CMD
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:460  
     23087**DCL     23032--PROC    23132>>CALL
NODES$
     16891**DCL     16878--IMP-PTR 21258<>CALL    21261>>ASSIGN  21263>>ASSIGN  21264>>ASSIGN  21265>>ASSIGN
     21266>>ASSIGN  21267>>ASSIGN  21268>>ASSIGN  21269>>ASSIGN  21270>>ASSIGN  21271>>ASSIGN  21272>>ASSIGN
     21273>>ASSIGN  21274>>ASSIGN
NODES_TO_USE
     16878**DCL     21261>>ASSIGN  21263>>ASSIGN  21264>>ASSIGN  21265>>ASSIGN  21266>>ASSIGN  21267>>ASSIGN
     21268>>ASSIGN  21269>>ASSIGN  21270>>ASSIGN  21271>>ASSIGN  21272>>ASSIGN  21273>>ASSIGN  21274>>ASSIGN
NON_BLANK
     15106**DCL     21998>>CALLBLT 23310>>CALLBLT 23362>>CALLBLT
NOTSENT_ERR
     19597**DCL     21860<>CALL    21951<>CALL    22976<>CALL
NOTSENT_ERR.V
     19597**DCL     19597--DCLINIT
NOTSENT_ERR.V.STEPCC#
     19598**DCL     19598--REDEF
NO_MORE IN PROCEDURE PROCESS_CMD
     22678**LABEL   22670--CALLALT 22672--CALLALT
NUM_RECORDS IN PROCEDURE DO$SEND
     23519**DCL     23643<<ASSIGN  23847>>IF      23849<>CALL    23851>>ASSIGN
OPENCG IN PROCEDURE DO$SEND
     23585**LABEL   23600--GOTO
OPEN_APPEND
     18555**DCL     22448>>ASSIGN
OPEN_APPEND.ACSVEH_
     18557**DCL     18558--REDEF
OPEN_APPEND.ALTKEYS_
     18563**DCL     18564--REDEF   18564--REDEF
OPEN_APPEND.HDR_
     18562**DCL     18563--REDEF
OPEN_APPEND.TAB_
     18561**DCL     18562--REDEF
OPEN_APPEND.UHL_
     18555**DCL     18556--REDEF   18556--REDEF
OPEN_APPEND.V
     18564**DCL     18555--DCLINIT
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:461  
OPEN_APPEND.V.FSN#
     18595**DCL     18595--REDEF   18595--REDEF
OPEN_APPEND.WSN_
     18561**DCL     18561--REDEF
OPEN_EDIT_FILE
     20035**DCL     22329<>CALL
OPEN_EDIT_FILE.ACSVEH_
     20037**DCL     20038--REDEF
OPEN_EDIT_FILE.ALTKEYS_
     20043**DCL     20044--REDEF   20044--REDEF
OPEN_EDIT_FILE.HDR_
     20042**DCL     20043--REDEF
OPEN_EDIT_FILE.TAB_
     20041**DCL     20042--REDEF
OPEN_EDIT_FILE.UHL_
     20035**DCL     20036--REDEF   20036--REDEF
OPEN_EDIT_FILE.V
     20044**DCL     20035--DCLINIT
OPEN_EDIT_FILE.V.FSN#
     20075**DCL     20075--REDEF   20075--REDEF
OPEN_EDIT_FILE.WSN_
     20041**DCL     20041--REDEF
OPEN_ENCL_FILE
     19244**DCL     22191>>ASSIGN  22199<>CALL
OPEN_ENCL_FILE.ACSVEH_
     19246**DCL     19247--REDEF
OPEN_ENCL_FILE.ALTKEYS_
     19252**DCL     19253--REDEF   19253--REDEF
OPEN_ENCL_FILE.HDR_
     19251**DCL     19252--REDEF
OPEN_ENCL_FILE.TAB_
     19250**DCL     19251--REDEF
OPEN_ENCL_FILE.UHL_
     19244**DCL     19245--REDEF   19245--REDEF
OPEN_ENCL_FILE.V
     19253**DCL     19244--DCLINIT 22192--ASSIGN
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:462  
OPEN_ENCL_FILE.V.FSN#
     19284**DCL     19284--REDEF   19284--REDEF
OPEN_ENCL_FILE.WSN_
     19250**DCL     19250--REDEF
OPEN_FORWARD_ENCL_FILE
     19364**DCL     23691<>CALL
OPEN_FORWARD_ENCL_FILE.ACSVEH_
     19366**DCL     19367--REDEF
OPEN_FORWARD_ENCL_FILE.ALTKEYS_
     19372**DCL     19373--REDEF   19373--REDEF
OPEN_FORWARD_ENCL_FILE.HDR_
     19371**DCL     19372--REDEF
OPEN_FORWARD_ENCL_FILE.TAB_
     19370**DCL     19371--REDEF
OPEN_FORWARD_ENCL_FILE.UHL_
     19364**DCL     19365--REDEF   19365--REDEF
OPEN_FORWARD_ENCL_FILE.V
     19373**DCL     19364--DCLINIT
OPEN_FORWARD_ENCL_FILE.V.FSN#
     19404**DCL     19404--REDEF   19404--REDEF
OPEN_FORWARD_ENCL_FILE.WSN_
     19370**DCL     19370--REDEF
OPEN_FORWARD_FILE
     18438**DCL     23677<>CALL
OPEN_FORWARD_FILE.ACSVEH_
     18440**DCL     18441--REDEF
OPEN_FORWARD_FILE.ALTKEYS_
     18446**DCL     18447--REDEF   18447--REDEF
OPEN_FORWARD_FILE.HDR_
     18445**DCL     18446--REDEF
OPEN_FORWARD_FILE.TAB_
     18444**DCL     18445--REDEF
OPEN_FORWARD_FILE.UHL_
     18438**DCL     18439--REDEF   18439--REDEF
OPEN_FORWARD_FILE.V
     18447**DCL     18438--DCLINIT
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:463  
OPEN_FORWARD_FILE.V.FSN#
     18478**DCL     18478--REDEF   18478--REDEF
OPEN_FORWARD_FILE.WSN_
     18444**DCL     18444--REDEF
OPEN_FPT
     19474**DCL     21352<<ASSIGN  21360<>CALL    21420<<ASSIGN  21426<>CALL    21435<>CALL    22191<<ASSIGN
     22448<<ASSIGN  22456<>CALL
OPEN_FPT.ACSVEH_
     19476**DCL     19477--REDEF
OPEN_FPT.ALTKEYS_
     19482**DCL     19483--REDEF   19483--REDEF
OPEN_FPT.HDR_
     19481**DCL     19482--REDEF
OPEN_FPT.TAB_
     19480**DCL     19481--REDEF
OPEN_FPT.UHL_
     19474**DCL     19475--REDEF   19475--REDEF
OPEN_FPT.V
     19483**DCL     21353--ASSIGN  21421--ASSIGN  22449--ASSIGN
OPEN_FPT.V.ASN#
     19493**DCL     21357--ASSIGN  22196--ASSIGN  22453--ASSIGN
OPEN_FPT.V.FSN#
     19514**DCL     19514--REDEF   19514--REDEF
OPEN_FPT.V.FUN#
     19493**DCL     21425<<ASSIGN  21434<<ASSIGN
OPEN_FPT.V.RES#
     19498**DCL     21358--ASSIGN  22197--ASSIGN  22454--ASSIGN
OPEN_FPT.V_
     19474**DCL     21353<<ASSIGN  21421<<ASSIGN  22192<<ASSIGN  22449<<ASSIGN
OPEN_FPT.WSN_
     19480**DCL     19480--REDEF
OPEN_MAILCG
     19819**DCL     21380<>CALL    23586<>CALL
OPEN_MAILCG.ACSVEH_
     19821**DCL     19822--REDEF
OPEN_MAILCG.ALTKEYS_
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:464  
     19827**DCL     19828--REDEF   19828--REDEF
OPEN_MAILCG.HDR_
     19826**DCL     19827--REDEF
OPEN_MAILCG.TAB_
     19825**DCL     19826--REDEF
OPEN_MAILCG.UHL_
     19819**DCL     19820--REDEF   19820--REDEF
OPEN_MAILCG.V
     19828**DCL     19819--DCLINIT
OPEN_MAILCG.V.FSN#
     19859**DCL     19859--REDEF   19859--REDEF
OPEN_MAILCG.WSN_
     19825**DCL     19825--REDEF
OPEN_SI
     19125**DCL     21352>>ASSIGN
OPEN_SI.ACSVEH_
     19127**DCL     19128--REDEF
OPEN_SI.ALTKEYS_
     19133**DCL     19134--REDEF   19134--REDEF
OPEN_SI.HDR_
     19132**DCL     19133--REDEF
OPEN_SI.TAB_
     19131**DCL     19132--REDEF
OPEN_SI.UHL_
     19125**DCL     19126--REDEF   19126--REDEF
OPEN_SI.V
     19134**DCL     19125--DCLINIT
OPEN_SI.V.FSN#
     19165**DCL     19165--REDEF   19165--REDEF
OPEN_SI.WSN_
     19131**DCL     19131--REDEF
OPEN_SI_DEFAULT
     19007**DCL     21642<>CALL    21707<>CALL
OPEN_SI_DEFAULT.ACSVEH_
     19009**DCL     19010--REDEF
OPEN_SI_DEFAULT.ALTKEYS_
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:465  
     19015**DCL     19016--REDEF   19016--REDEF
OPEN_SI_DEFAULT.HDR_
     19014**DCL     19015--REDEF
OPEN_SI_DEFAULT.TAB_
     19013**DCL     19014--REDEF
OPEN_SI_DEFAULT.UHL_
     19007**DCL     19008--REDEF   19008--REDEF
OPEN_SI_DEFAULT.V
     19016**DCL     19007--DCLINIT
OPEN_SI_DEFAULT.V.FSN#
     19047**DCL     19047--REDEF   19047--REDEF
OPEN_SI_DEFAULT.WSN_
     19013**DCL     19013--REDEF
OPEN_WORK
     18319**DCL     21420>>ASSIGN
OPEN_WORK.ACSVEH_
     18321**DCL     18322--REDEF
OPEN_WORK.ALTKEYS_
     18327**DCL     18328--REDEF   18328--REDEF
OPEN_WORK.HDR_
     18326**DCL     18327--REDEF
OPEN_WORK.TAB_
     18325**DCL     18326--REDEF
OPEN_WORK.UHL_
     18319**DCL     18320--REDEF   18320--REDEF
OPEN_WORK.V
     18328**DCL     18319--DCLINIT
OPEN_WORK.V.FSN#
     18359**DCL     18359--REDEF   18359--REDEF
OPEN_WORK.WSN_
     18325**DCL     18325--REDEF
OPTION_BREAK
     21809**LABEL   21205--REMEMBR
OPTION_NODES
     15613**DCL     16826--DCLINIT
OPTION_NODES$
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:466  
     15631**DCL     21274<<ASSIGN  21809>>CALL    22703>>CALL
OUT$
     15777**DCL     15790--REDEF   21333<>CALL    21342>>ASSIGN  21343>>DOINDEX 21344>>ASSIGN  21575<>CALL
     21660<>CALL    21746<>CALL    21749>>IF      21749>>IF      21809<>CALL    22093<>CALL    22096<>CALL
     22162>>DOINDEX 22183>>ASSIGN  22385<>CALL    22441>>DOCASE  22484>>IF      22496>>CALL    22496>>CALL
     22544>>IF      22566>>DOCASE  22597>>IF      22605>>IF      22609>>ASSIGN  22618>>IF      22622>>ASSIGN
     22665>>ASSIGN  22703<>CALL    22724>>IF      22728>>IF      22746>>IF      22782>>ASSIGN  22782>>ASSIGN
     22783>>ASSIGN  22820>>IF      22825>>ASSIGN  22844>>DOCASE  22952<>CALL    23015>>IF      23018>>IF
     23132<>CALL    23303>>IF      23305>>ASSIGN  23351>>IF      23353>>ASSIGN  23413>>IF      23426>>DOINDEX
     23427>>ASSIGN  23495<>CALL
OUTERR
     15790**DCL     21336<>CALL    21577<>CALL    21665>>IF      21882>>IF      21887<>CALL    22390>>IF
OUTERR.ERR#
     15820**DCL     21879>>IF
OUTERR.MON
     15819**DCL     21879>>IF
P$B.CODE
     15133**DCL     21342>>ASSIGN  21345>>DOCASE  21367>>IF      22441>>DOCASE  22484>>IF      22566>>DOCASE
     22597>>IF      22623>>DOCASE  22640>>DOCASE  22728>>IF      22746>>IF      22844>>DOCASE  23356>>DOCASE
     23428>>DOCASE
P$B.CPOS
     15151**DCL     22826>>ASSIGN  22829>>ASSIGN  23018>>IF      23306>>ASSIGN  23354>>ASSIGN
P$B.NSUBLKS
     15137**DCL     21343>>DOINDEX 21367>>IF      22162>>DOINDEX 22187>>DOINDEX 22445>>IF      22544>>IF
     22605>>IF      22618>>IF      22638>>DOINDEX 22724>>IF      22783>>ASSIGN  22820>>IF      23015>>IF
     23303>>IF      23351>>IF      23413>>IF      23426>>DOINDEX 23434>>IF
P$B.SUBLK$
     15158**DCL     21342>>ASSIGN  21344>>ASSIGN  21367>>IF      21749>>IF      21749>>IF      22162>>DOINDEX
     22183>>ASSIGN  22183>>ASSIGN  22188>>ASSIGN  22484>>IF      22496>>CALL    22496>>CALL    22566>>DOCASE
     22597>>IF      22609>>ASSIGN  22622>>ASSIGN  22639>>ASSIGN  22665>>ASSIGN  22728>>IF      22746>>IF
     22782>>ASSIGN  22782>>ASSIGN  22791>>ASSIGN  22791>>ASSIGN  22825>>ASSIGN  22844>>DOCASE  23018>>IF
     23305>>ASSIGN  23353>>ASSIGN  23353>>ASSIGN  23427>>ASSIGN  23430>>CALLBLT 23430>>CALLBLT 23432>>CALLBLT
     23432>>CALLBLT 23436>>CALLBLT 23436>>CALLBLT 23440>>CALLBLT 23440>>CALLBLT 23442>>CALLBLT 23442>>CALLBLT
P$S
     15171**DCL     22496<>CALL
P$S.COUNT
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:467  
     15194**DCL     15197--IMP-SIZ 21356>>ASSIGN  21749>>IF      22195>>ASSIGN  22203>>ASSIGN  22204>>ASSIGN
     22452>>ASSIGN  22496>>CALL    22642>>ASSIGN  22644>>ASSIGN  22646>>ASSIGN  22782>>ASSIGN  22791>>ASSIGN
     23430>>CALLBLT 23432>>CALLBLT 23436>>CALLBLT 23440>>CALLBLT 23442>>CALLBLT
P$S.NDTYPE
     15174**DCL     22189>>DOCASE
P$S.TEXT
     15197**DCL     21356--ASSIGN  21749>>IF      22195--ASSIGN  22204>>ASSIGN  22452--ASSIGN  22642>>ASSIGN
     22644>>ASSIGN  22646>>ASSIGN  22782>>ASSIGN  22791>>ASSIGN  23430>>CALLBLT 23432>>CALLBLT 23436>>CALLBLT
     23440>>CALLBLT 23442>>CALLBLT
P$S.TEXTC$
     15189**DCL     22609>>ASSIGN  22665>>ASSIGN
P1$ IN PROCEDURE CHECK$FLD
     23217**DCL     23215--PROC    23223>>IF      23223>>IF      23223>>IF      23225>>ASSIGN
P2$ IN PROCEDURE CHECK$FLD
     23221**DCL     23225<<ASSIGN  23226>>ASSIGN
PAGESIZE IN PROCEDURE DO$SEND
     23525**DCL     23699>>ASSIGN  23713>>ASSIGN  23784>>ASSIGN
PAGESIZE IN PROCEDURE PROCESS_ENCL
     22136**DCL     22174>>ASSIGN  22214>>ASSIGN  22230>>ASSIGN
PREPROCESS
     15723**DCL     21308<<ASSIGN  21366<<ASSIGN  21369<<ASSIGN  21518<<ASSIGN  21522<<ASSIGN  21523>>IF
     21525>>ASSIGN  22406>>ASSIGN  22726<<ASSIGN  22730<<ASSIGN  22732<<ASSIGN  22733>>IF      22735>>ASSIGN
PREPROCESS_OPT
     15722**DCL     21307<<ASSIGN  21365<<ASSIGN  21520>>IF
PREV$ IN PROCEDURE DO$SEND
     23523**DCL     23761<<ASSIGN  23803>>ASSIGN  23820<<ASSIGN
PREV_ENT$ IN PROCEDURE PROCESS_ENCL
     22134**DCL     22167<<ASSIGN  22259>>ASSIGN  22260>>ASSIGN
PRIVILEGED_NODES
     15602**DCL     16823--DCLINIT
PROCESS_BODY
     21980**PROC    21667--CALL    22392--CALL
PROCESS_CMD
     22439**PROC    21662--CALL    21751--CALL    21810--CALL    22387--CALL    23497--CALL
PROCESS_ENCL
     22130**PROC    22469--CALL
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:468  
PROC_OPTIONS
     15719**DCL     21305<<ASSIGN  21778<<ASSIGN  21830>>IF      22806>>IF      23011>>IF
PROMPT$TO
     23466**PROC    21714--CALL    21803--CALL
PROMPT_CODE IN PROCEDURE REREAD$CMD
     23054**DCL     23032--PROC    23100<>CALL
PROMPT_OPTIONS
     15716**DCL     21302<<ASSIGN  21347<<ASSIGN  21679>>IF
PTR1$ IN PROCEDURE PROCESS_ENCL
     22132**DCL     22183<<ASSIGN  22187>>DOINDEX 22188>>ASSIGN
PTR2$ IN PROCEDURE PROCESS_ENCL
     22133**DCL     22188<<ASSIGN  22189>>DOCASE  22195>>ASSIGN  22195>>ASSIGN  22203>>ASSIGN  22204>>ASSIGN
     22204>>ASSIGN
P_PCB
     15220**DCL     15470--DCLINIT
P_PCB.COMMENT.LEAD
     15338**DCL     21745<<ASSIGN  21747<<ASSIGN  21827<<ASSIGN  23126<<ASSIGN  23133<<ASSIGN
P_PCB.NCHARS
     15367**DCL     15776--IMP-SIZ 21985>>ASSIGN  21998>>CALLBLT 22001>>ASSIGN  22701>>CALLBLT 22702>>ASSIGN
     22703>>CALL    22703<>CALL    22826>>ASSIGN  22829>>ASSIGN  23018>>IF      23307>>IF      23310>>CALLBLT
     23313>>IF      23362>>CALLBLT 23365>>IF
P_PCB.NOLEADBLANKS
     15265**DCL     21828<<ASSIGN  22084<<ASSIGN  22100<<ASSIGN  22769<<ASSIGN  22772<<ASSIGN  22775<<ASSIGN
P_PCB.TEXT$
     15221**DCL     15776--IMP-PTR 21998>>CALLBLT 22001>>ASSIGN  22701>>CALLBLT 22702>>ASSIGN  22703>>CALL
     22829>>ASSIGN  23307>>IF      23310>>CALLBLT 23313>>IF      23318>>CALL    23362>>CALLBLT 23365>>IF
     23383>>CALL
P_PCB$TEXT
     15776**DCL     21998>>CALLBLT 22001>>ASSIGN  22701>>CALLBLT 22702<<ASSIGN  22703<>CALL    22829>>ASSIGN
     23307>>IF      23310>>CALLBLT 23313>>IF      23362>>CALLBLT 23365>>IF
READ_CC
     21932**PROC    21659--CALL    22092--CALL    22384--CALL    23131--CALL    23680--CALL
READ_ENCL_FILE
     18749**DCL     22221<>CALL    23741<>CALL    23756<>CALL
READ_ENCL_FILE.BUF_
     18751**DCL     23740<<ASSIGN
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:469  
READ_ENCL_FILE.BUF_.BOUND
     18751**DCL     22214<<ASSIGN  22230<<ASSIGN  22230>>ASSIGN  23754<<ASSIGN
READ_ENCL_FILE.BUF_.BUF$
     18752**DCL     22213<<ASSIGN  23753<<ASSIGN
READ_ENCL_FILE.KEY_
     18749**DCL     23739<<ASSIGN
READ_ENCL_FILE.STATION_
     18752**DCL     18753--REDEF
READ_ENCL_FILE.V
     18753**DCL     18749--DCLINIT
READ_ENCL_FILE.V.DVBYTE.CONT#
     18766**DCL     23752<<ASSIGN
READ_ENCL_FILE.V.DVBYTE.REREAD#
     18764**DCL     18764--REDEF
READ_ENCL_FILE.V.INDX#
     18762**DCL     18762--REDEF
READ_SI
     18708**DCL     21936<>CALL
READ_SI.STATION_
     18711**DCL     18712--REDEF
READ_SI.V
     18712**DCL     18708--DCLINIT
READ_SI.V.DCB#
     18712**DCL     21935<<ASSIGN
READ_SI.V.DVBYTE.REREAD#
     18723**DCL     18723--REDEF   23127<<ASSIGN  23134<<ASSIGN
READ_SI.V.INDX#
     18721**DCL     18721--REDEF
REMOVE IN PROCEDURE REPLACE$FLD
     23318**LABEL   23309--GOTO
REPLACE$ADDR
     23347**PROC    22478--CALL    22506--CALL    22659--CALL    22759--CALL    22817--CALL
REPLACE$FLD
     23300**PROC    22710--CALL    22720--CALL    22742--CALL    22777--CALL    22805--CALL
REPLACE$TSTAMP
     23407**PROC    22510--CALL    22527--CALL
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:470  
REREAD IN PROCEDURE PROCESS_ENCL
     22221**LABEL   22233--GOTO
REREAD IN PROCEDURE READ_CC
     21935**LABEL   21953--GOTO
REREAD$CHK
     23009**PROC    22473--CALL    22501--CALL    22514--CALL    22715--CALL    22754--CALL    22767--CALL
     22800--CALL    22812--CALL
REREAD$CMD
     23032**PROC    22475--CALL    22503--CALL    22523--CALL    22717--CALL    22756--CALL    22770--CALL
     22802--CALL    22814--CALL
RESET_#1
     20249**DCL     21401<>CALL
RESET_#1.V
     20250**DCL     20249--DCLINIT
RESET_#1_CMD
     20254**DCL     20249--DCLINIT
RESET_#2
     20273**DCL     21405<>CALL
RESET_#2.V
     20274**DCL     20273--DCLINIT
RESET_#2_CMD
     20278**DCL     20273--DCLINIT
RESET_#3
     20297**DCL     21409<>CALL
RESET_#3.V
     20298**DCL     20297--DCLINIT
RESET_#3_CMD
     20302**DCL     20297--DCLINIT
RESET_#4
     20321**DCL     21413<>CALL
RESET_#4.V
     20322**DCL     20321--DCLINIT
RESET_#4_CMD
     20326**DCL     20321--DCLINIT
RET IN PROCEDURE PROCESS_CMD
     22854**LABEL   22475--CALLALT 22503--CALLALT 22523--CALLALT 22650--GOTO    22717--CALLALT 22756--CALLALT
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:471  
     22773--GOTO    22802--CALLALT 22814--CALLALT
SAVE_BREAK_TYPE IN PROCEDURE PROMPT$TO
     23467**DCL     23469<<ASSIGN  23503>>ASSIGN
SEED
     15726**DCL     22496<>CALL    22497>>ASSIGN  23845<>CALL
SEND_CMD
     15603**DCL     16823--DCLINIT
SEND_CMD$
     15621**DCL     21264<<ASSIGN  21333>>CALL
SEND_NODES
     15601**DCL     16823--DCLINIT
SEND_NODES$
     15620**DCL     21261<<ASSIGN  21263<<ASSIGN  21660>>CALL    22385>>CALL
SEND_PROG_NAME
     20228**DCL     20136--DCLINIT
SET_INPUT
     18822**DCL     23120<>CALL
SET_INPUT.BUF_
     18829**DCL     23117<<ASSIGN  23119<<ASSIGN
SET_INPUT.V
     18834**DCL     18824--DCLINIT
SIZE
     15860**DCL     21332<<ASSIGN  21333<>CALL    21562<<ASSIGN  21563<>CALL    21569<<ASSIGN  21570<>CALL
     21575<>CALL    21604<<ASSIGN  21605<>CALL    21612<<ASSIGN  21613<>CALL    21660<>CALL    21937<<ASSIGN
     21985<<ASSIGN  21986>>IF      21996>>IF      21998<<CALLBLT 22000<<ASSIGN  22000>>ASSIGN  22001>>ASSIGN
     22004<<ASSIGN  22007>>ASSIGN  22010<>CALL    22013<>CALL    22093<>CALL    22240<<ASSIGN  22242>>ASSIGN
     22244<>CALL    22385<>CALL    22822<<ASSIGN  22826<<ASSIGN  22827>>IF      22829>>ASSIGN  22831>>ASSIGN
     22832<>CALL    23132<>CALL    23622<<CALLBLT 23623>>CALLBLT 23624<<ASSIGN  23624>>ASSIGN  23627>>CALLBLT
     23628<<CALLBLT 23629>>CALLBLT 23630<<ASSIGN  23630>>ASSIGN  23633>>CALLBLT 23634<<ASSIGN  23634>>ASSIGN
     23636<>CALL    23650<<ASSIGN  23651<>CALL    23654<<ASSIGN  23657<>CALL    23669<<ASSIGN  23671<>CALL
     23681>>ASSIGN  23682>>IF      23684>>ASSIGN  23685<>CALL    23709<>CALL    23718<>CALL    23780<>CALL
     23789<>CALL
SIZE IN PROCEDURE ALLOC$TEXTC
     23150**DCL     23148--PROC    23157>>ASSIGN  23167--ENTRY   23185>>IF      23186>>ASSIGN  23187>>ASSIGN
     23196--ASSIGN
SI_FILE
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:472  
     15720**DCL     21306<<ASSIGN  21361<<ASSIGN  21640>>IF      21657>>DOWHILE 21702>>IF      21704<<ASSIGN
     21948>>IF
SYS_ACCT
     18876**DCL     20137--DCLINIT
TAKE_THIRTY
     19615**DCL     23599<>CALL
TAKE_THIRTY.V
     19616**DCL     19615--DCLINIT
TEMP_TEXTC
     18216**DCL     21470<>CALL    21471--CALL    21568<>CALL    21590<>CALL    21591<>CALL    21596--CALL
     22320--ASSIGN  22523--CALL
TEMP_TEXTC.L#
     18216**DCL     21469<<ASSIGN  21567<<ASSIGN  21569>>ASSIGN  21588<<ASSIGN  21595<<ASSIGN  21601>>CALLBLT
     21602<<ASSIGN  21602>>ASSIGN  21604>>ASSIGN  22305<<ASSIGN  22521<<ASSIGN
TEMP_TEXTC.NAME#
     18216**DCL     21469--ASSIGN  21567--ASSIGN  21570<>CALL    21588--ASSIGN  21589<<ASSIGN  21593<<ASSIGN
     21594<<ASSIGN  21595--ASSIGN  21601<<CALLBLT 21605<>CALL    22306<<CALLBLT 22522<<CALLBLT
TESTMODE
     15721**DCL     21259>>IF      21378>>IF
TEXT IN PROCEDURE ALLOC$TEXTC
     23151**DCL     23148--PROC    23187>>ASSIGN  23191>>ASSIGN
TEXT$ IN PROCEDURE REREAD$CMD
     23041**DCL     23032--PROC    23115>>IF      23119>>ASSIGN  23119>>ASSIGN
TEXTC.L# IN PROCEDURE PROCESS_ENCL
     22138**DCL     22139--IMP-SIZ 22203<<ASSIGN  22204>>ASSIGN  22266>>ASSIGN
TEXTC.TEXT# IN PROCEDURE PROCESS_ENCL
     22139**DCL     22204<<ASSIGN
TIME_INIT
     15739**DCL     23422>>ASSIGN
TMP$
     15826**DCL     15828--REDEF   21504<<ASSIGN  21507>>ASSIGN  21559<<ASSIGN  22639<<ASSIGN  22640>>DOCASE
     22642>>ASSIGN  22642>>ASSIGN  22644>>ASSIGN  22644>>ASSIGN  22646>>ASSIGN  22646>>ASSIGN
TMP$ IN PROCEDURE GET$ADDLIST
     22948**DCL     22883--IMP-PTR 22920--IMP-PTR 22956<<ASSIGN  22958>>IF      22960>>ASSIGN  22961<<ASSIGN
     22961>>ASSIGN  22981<<ASSIGN  22983>>IF      22983>>IF      22985>>IF      22987>>ASSIGN  22988>>ASSIGN
     22990>>CALL    22990>>CALL    22993<<ASSIGN  22993>>ASSIGN
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:473  
TMPR$.SEGID
     15830**DCL     21505>>IF      21560>>IF
TSTAMP IN PROCEDURE REPLACE$TSTAMP
     23408**DCL     23407--PROC    23415<<ASSIGN  23450<<ASSIGN
TYPE IN PROCEDURE ERASE$ADDR
     23274**DCL     23267--PROC    23281>>IF      23283<>CALL
TYPE IN PROCEDURE REPLACE$ADDR
     23349**DCL     23347--PROC    23372>>IF      23374<>CALL    23390<>CALL
UNIQUE_ID_STRING IN PROCEDURE DO$SEND
     23520**DCL     23621<<CALLBLT 23622>>CALLBLT 23623<<CALLBLT 23627<<CALLBLT 23628>>CALLBLT 23629<<CALLBLT
     23633<<CALLBLT 23636<>CALL
USER_NAME
     15858**DCL     21215<>CALL    21349<>CALL    21455<>CALL    21458<>CALL    21467<>CALL    22952<>CALL
USER_NAME.L#
     15858**DCL     21214<<ASSIGN  21464<<ASSIGN
USER_NAME.NAME#
     15858**DCL     21214--ASSIGN  21461>>IF      21465<<ASSIGN  21466<<ASSIGN
UTS
     18184**DCL     19638--DCLINIT 21620>>ASSIGN
VECT
     18176**DCL     17993--DCLINIT 18107--DCLINIT 22549<<ASSIGN  22560<<ASSIGN
VM$RADDRESS
     17689**DCL     21553<>CALL    23170--ASSIGN  23196<<ASSIGN  23196>>ASSIGN
VM$RADDRESS.FOLDER
     17704**DCL     17705--REDEF
VM$RADDRESS.FOLDER IN PROCEDURE GET$ADDLIST
     22935**DCL     22936--REDEF
VM$RADDRESS.NEXT$ IN PROCEDURE GET$ADDLIST
     22921**DCL     22961>>ASSIGN
VM$RADDRESS.PASS IN PROCEDURE GET$ADDLIST
     22940**DCL     22960<<ASSIGN
VM$RADDRESS.TYPE IN PROCEDURE GET$ADDLIST
     22932**DCL     22958>>IF
VM$UADDRESS.FOLDER
     17740**DCL     17741--REDEF
VM$UADDRESS.FLAGS.UNDEF# IN PROCEDURE GET$ADDLIST
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:474  
     22889**DCL     22983>>IF
VM$UADDRESS.FOLDER IN PROCEDURE GET$ADDLIST
     22898**DCL     22899--REDEF
VM$UADDRESS.NEXT$ IN PROCEDURE GET$ADDLIST
     22884**DCL     22993>>ASSIGN
VM$UADDRESS.TYPE IN PROCEDURE GET$ADDLIST
     22895**DCL     22983>>IF
VM$UADDRESS.USER_NAME IN PROCEDURE GET$ADDLIST
     22906**DCL     22990--CALL    22990--CALL
VM$UADDRESS.USER_NAME.COUNT IN PROCEDURE GET$ADDLIST
     22907**DCL     22985>>IF      22987<<ASSIGN
VM$UADDRESS.USER_NAME.TEXT IN PROCEDURE GET$ADDLIST
     22908**DCL     22988<<ASSIGN
VMA$ADDRESS
     15639**DCL-ENT 22952--CALL
VMA$DEL_ADD_RECORD
     15644**DCL-ENT 23283--CALL
VMA$ENLARGE_SEGMENT
     15640**DCL-ENT 21242--CALL    21243--CALL    21244--CALL    21245--CALL    21246--CALL    23177--CALL
VMA$ERRMSG
     15643**DCL-ENT 21389--CALL    21483--CALL    21496--CALL    21577--CALL    21582--CALL    21697--CALL
     21858--CALL    21887--CALL    21905--CALL    22537--CALL    22648--CALL    22786--CALL    22857--CALL
     22990--CALL    23594--CALL    23859--CALL
VMA$GET_ADD_RECORD
     15646**DCL-ENT 23695--CALL
VMA$GET_SITE_NAME
     15641**DCL-ENT 21210--CALL
VMA$MOREMEM
     15642**DCL-ENT 15479--DCLINIT
VMA$OPEN_ENCL_SEGS
     15680**DCL-ENT 21247--CALL
VMA$OPEN_GLOBAL
     15647**DCL-ENT 21319--CALL
VMA$OPEN_SRCH_LIST
     15648**DCL-ENT 21512--CALL
VMA$PUT_ADD_RECORD
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:475  
     15645**DCL-ENT 22280--CALL    22966--CALL    23825--CALL
VMB$TESTREG
     15651**DCL-ENT 21458--CALL    21591--CALL
VMB$USE_DEFAULT
     15650**DCL-ENT 21455--CALL    21467--CALL
VMB$USE_SPECIFIED
     15649**DCL-ENT 21349--CALL
VMC$DOSEND
     15652**DCL-ENT 23845--CALL
VMD$DEL_BODY
     15670**DCL-ENT 22358--CALL    23849--CALL
VMD$DEL_TRACE
     15675**DCL-ENT 22366--CALL
VMD$DI_BLIND
     15654**DCL-ENT 22568--CALL
VMD$DI_BROADCAST
     15665**DCL-ENT 22588--CALL
VMD$DI_COPY
     15655**DCL-ENT 22570--CALL
VMD$DI_DEFER
     15663**DCL-ENT 22586--CALL
VMD$DI_DR
     15666**DCL-ENT 22590--CALL
VMD$DI_FCOPY
     15660**DCL-ENT 22580--CALL
VMD$DI_MESSAGE
     15653**DCL-ENT 22546--CALL
VMD$DI_OPTS
     15664**DCL-ENT 22562--CALL
VMD$DI_REFERENCE
     15656**DCL-ENT 22572--CALL
VMD$DI_RR
     15661**DCL-ENT 22582--CALL
VMD$DI_RTO
     15662**DCL-ENT 22584--CALL
VMD$DI_SIGNED
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:476  
     15659**DCL-ENT 22578--CALL
VMD$DI_SUBJECT
     15657**DCL-ENT 22574--CALL
VMD$DI_TO
     15658**DCL-ENT 22576--CALL
VMD$ERRMSG
     15685**DCL-ENT 21290--CALL    21733--CALL    22044--CALL    22069--CALL    23100--CALL    23480--CALL
VMD$GETNODES
     15681**DCL-ENT 21258--CALL
VMD$GET_ENCL
     15677**DCL-ENT 23709--CALL    23780--CALL
VMD$GET_HEADER
     15668**DCL-ENT 21427--CALL
VMD$GET_PROFILE
     15672**DCL-ENT 21489--CALL
VMD$PUT_BODY
     15673**DCL-ENT 22010--CALL    22013--CALL    23651--CALL    23657--CALL    23671--CALL    23685--CALL
VMD$PUT_ENCL
     15678**DCL-ENT 22244--CALL    23718--CALL    23789--CALL
VMD$PUT_HEADER
     15669**DCL-ENT 23841--CALL
VMD$PUT_SITE
     15676**DCL-ENT 22793--CALL
VMD$PUT_TRACE
     15674**DCL-ENT 22832--CALL
VMD$WRITE_BUF
     15667**DCL-ENT 22550--CALL    22561--CALL
VMF$FROM
     15705**DCL-ENT 21215--CALL    21590--CALL
VMF$MAKE_ADDRESS1
     15706**DCL-ENT 21470--CALL
VMF$MAKE_ADDRESS1SITE
     15707**DCL-ENT 21568--CALL
VMM$EDIT_MESSAGE_OUT
     15708**DCL-ENT 22311--CALL
VMX$OCTBIN
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:477  
     15709**DCL-ENT 22496--CALL
VM_ADDLIST$
     10364**DCL     17470--IMP-PTR 22956>>ASSIGN  22957>>DOINDEX 22973>>IF      22981>>ASSIGN  22982>>DOINDEX
VM_ADDLIST_
     10388**DCL     21242<>CALL    22966<>CALL
VM_ADD_HEAD.FLAGS.ERR#
     17476**DCL     22973>>IF
VM_ADD_HEAD.HEAD$
     17480**DCL     22956>>ASSIGN  22981>>ASSIGN
VM_ADD_HEAD.NUM_ENTRIES
     17473**DCL     22957>>DOINDEX 22982>>DOINDEX
VM_BODYREC
     17436**DCL     22010<>CALL    22013<>CALL    22832<>CALL    23651<>CALL    23657<>CALL    23671<>CALL
     23685<>CALL
VM_BODYREC.VALUE.COUNT
     17442**DCL     22007<<ASSIGN  22831<<ASSIGN  23649<<ASSIGN  23656<<ASSIGN  23670<<ASSIGN  23681<<ASSIGN
VM_BODYREC.VALUE.DATA
     17454**DCL     22001<<ASSIGN  22829<<ASSIGN  23655<<ASSIGN  23668<<ASSIGN  23684<<ASSIGN
VM_CGBUFFER
     19909**DCL     19885--DCLINIT 19886--DCLINIT
VM_CGBUFFER.COMMAND
     19911**DCL     21381<<ASSIGN  23587<<ASSIGN
VM_CURRENT_FOLDER
     17383**DCL     21349<>CALL    21455<>CALL    21467<>CALL    21470<>CALL    21568<>CALL
VM_CURRENT_FOLDER.ACCT
     17386**DCL     21532>>ASSIGN  22630>>ASSIGN
VM_CURRENT_FOLDER.FLAGS.UPDATE
     17407**DCL     21475>>IF
VM_CURRENT_FOLDER.FOLDER
     17388**DCL     21541>>ASSIGN  21543>>ASSIGN  22631>>ASSIGN
VM_CURRENT_FOLDER.PASS
     17390**DCL     22632>>ASSIGN
VM_CURRENT_FOLDER.PSID
     17384**DCL     21539>>IF      21545>>ASSIGN
VM_CURRENT_FOLDER.SITENAME
     17392**DCL     21534>>ASSIGN  21598>>IF      21600>>CALLBLT 21601>>CALLBLT 22633>>ASSIGN
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:478  
VM_ENCLLIST$
     10379**DCL     17499--IMP-PTR 21312>>ASSIGN  21313>>ASSIGN  22166>>IF      22168>>ASSIGN  22172>>IF
     22172>>IF      22177>>ASSIGN  22178>>ASSIGN  22179>>ASSIGN  22244>>CALL    22258>>IF      22263>>ASSIGN
     22264>>ASSIGN  22264>>ASSIGN  22266>>ASSIGN  22268>>ASSIGN  22269>>ASSIGN  22269>>ASSIGN  22269>>ASSIGN
     23692>>IF      23705>>ASSIGN  23706>>DOINDEX 23753>>ASSIGN  23766>>ASSIGN  23767>>ASSIGN  23770>>ASSIGN
     23773>>ASSIGN  23777>>ASSIGN  23807>>ASSIGN  23812>>ASSIGN  23814>>ASSIGN  23816>>ASSIGN  23817>>ASSIGN
     23817>>ASSIGN  23818>>ASSIGN  23818>>ASSIGN  23818>>ASSIGN
VM_ENCLLIST_
     10395**DCL     22172>>IF      22174<<ASSIGN  22174>>ASSIGN  22280<>CALL    23695<>CALL    23699<<ASSIGN
     23699>>ASSIGN  23825<>CALL
VM_ENCLOS
     17627**DCL     22182<<ASSIGN  22202--ASSIGN  22266--ASSIGN  22268--ASSIGN  23807--ASSIGN  23812--ASSIGN
VM_ENCLOS.FLAGS.DELETED
     17633**DCL     23707>>IF      23778>>IF
VM_ENCLOS.FLAGS.FORWARD
     17635**DCL     23723<<ASSIGN  23801<<ASSIGN
VM_ENCLOS.NEXT$
     17628**DCL     22260<<ASSIGN  23725>>ASSIGN  23773<<ASSIGN  23802>>IF      23803<<ASSIGN
VM_ENCLOS.NRECS
     17641**DCL     22244<>CALL    22250<<ASSIGN  22250>>ASSIGN  22270>>ASSIGN  23708>>DOINDEX 23779>>DOINDEX
VM_ENCLOS.PREV$
     17630**DCL     22259<<ASSIGN  23767<<ASSIGN  23813>>IF      23814<<ASSIGN  23821>>ASSIGN
VM_ENCLOS.TITLE$
     17645**DCL     22202<<ASSIGN  22203>>ASSIGN  22204>>ASSIGN  22204>>ASSIGN  22265>>IF      22266>>ASSIGN
     23805>>IF      23806<<ASSIGN  23806--ASSIGN  23807>>ASSIGN
VM_ENCLOS.TYPE
     17643**DCL     22263<<ASSIGN  23709>>CALL    23718>>CALL    23777>>ASSIGN  23780>>CALL    23800<<ASSIGN
VM_ENCLREC.TYPE
     17576**DCL     22241<<ASSIGN
VM_ENCLREC.VALUE.COUNT
     17581**DCL     17591--IMP-SIZ 22242<<ASSIGN
VM_ENCLREC$
     10381**DCL     17575--IMP-PTR 22241>>ASSIGN  22242>>ASSIGN  22244<>CALL    23709<>CALL    23718<>CALL
     23780<>CALL    23789<>CALL
VM_ENCLREC_
     10396**DCL     22213>>ASSIGN  23713<<ASSIGN  23713>>ASSIGN  23784<<ASSIGN  23784>>ASSIGN
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:479  
VM_ENCL_HEAD
     17499**DCL     22177<<ASSIGN  22178--ASSIGN
VM_ENCL_HEAD.ADDRESS_SIZE
     17500**DCL     22269<<ASSIGN  23818<<ASSIGN
VM_ENCL_HEAD.HEAD$
     17509**DCL     21313<<ASSIGN  22179<<ASSIGN  23705>>ASSIGN  23766>>ASSIGN  23773>>ASSIGN  23816<<ASSIGN
VM_ENCL_HEAD.NEXT$
     17513**DCL     22168>>ASSIGN  22172>>IF      22266<<ASSIGN  22268<<ASSIGN  22269>>ASSIGN  23753>>ASSIGN
     23767>>ASSIGN  23770>>ASSIGN  23807<<ASSIGN  23812<<ASSIGN  23814>>ASSIGN  23818>>ASSIGN
VM_ENCL_HEAD.NUM_ENTRIES
     17502**DCL     21312<<ASSIGN  22166>>IF      22244>>CALL    22258>>IF      22263>>ASSIGN  22264<<ASSIGN
     22264>>ASSIGN  23692>>IF      23706>>DOINDEX 23777>>ASSIGN  23817<<ASSIGN  23817>>ASSIGN
VM_FORWARD_ENCL_NAME
     10591**DCL     19365--DCLINIT
VM_FORWARD_FILE_NAME
     10564**DCL     18439--DCLINIT
VM_FORWARD_FILE_PASS
     10604**DCL     18440--DCLINIT 19366--DCLINIT
VM_HEADER
     17225**DCL     21436<<ASSIGN  22562<>CALL    22568<>CALL    22570<>CALL    22572<>CALL    22574<>CALL
     22576<>CALL    22578<>CALL    22580<>CALL    22582<>CALL    22584<>CALL    22586<>CALL    22588<>CALL
     22590<>CALL
VM_HEADER.BLIND$
     17311**DCL     22344<>CALL    22475<>CALL    22478<>CALL    23223>>IF
VM_HEADER.COPY$
     17313**DCL     22342<>CALL    22503<>CALL    22506<>CALL    23223>>IF
VM_HEADER.CREATION_DATE
     17228**DCL     21620<<ASSIGN  22510<>CALL    22529>>IF
VM_HEADER.DELIVERY_DATE
     17230**DCL     22351<<ASSIGN  22352<<ASSIGN  22516>>IF      22517>>ASSIGN  22527<>CALL    22529>>IF
     22536<<ASSIGN
VM_HEADER.FILE_FOLDER$
     17315**DCL     21553<>CALL    22653<>CALL
VM_HEADER.FREE$
     17305**DCL     21448>>ASSIGN
VM_HEADER.FROM$
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:480  
     17317**DCL     21605<>CALL    21606<<ASSIGN  22659<>CALL
VM_HEADER.HEADER_SIZE
     17226**DCL     21438<<ASSIGN  21447>>ASSIGN
VM_HEADER.NEXT$
     17307**DCL     21437<<ASSIGN  21446>>ASSIGN  23837<<ASSIGN
VM_HEADER.NUM_ENCL_RECORDS
     17337**DCL     22270<<ASSIGN  22270>>ASSIGN  23721<<ASSIGN  23721>>ASSIGN  23792<<ASSIGN  23792>>ASSIGN
VM_HEADER.NUM_RECORDS
     17236**DCL     21763>>IF      21990>>IF      22010<>CALL    22013<>CALL    22015<<ASSIGN  22015>>ASSIGN
     22033>>IF      22356>>IF      22358>>CALL    22362<<ASSIGN  23643>>ASSIGN  23651<>CALL    23653<<ASSIGN
     23653>>ASSIGN  23657<>CALL    23659<<ASSIGN  23659>>ASSIGN  23671<>CALL    23673<<ASSIGN  23673>>ASSIGN
     23685<>CALL    23687<<ASSIGN  23687>>ASSIGN  23847>>IF      23849>>CALL    23851<<ASSIGN
VM_HEADER.NUM_TRACE_RECORDS
     17335**DCL     22364>>IF      22366>>CALL    22370<<ASSIGN  22832<>CALL    22835<<ASSIGN  22835>>ASSIGN
VM_HEADER.REFERENCE$
     17319**DCL     22347<>CALL    22717<>CALL    22720<>CALL
VM_HEADER.REFERS_TO_ID$
     17333**DCL     22742<>CALL
VM_HEADER.REPLY_TO$
     17321**DCL     21563<>CALL    21570<>CALL    21575>>CALL    21575>>CALL    22345<>CALL    22660<>CALL
     22756<>CALL    22759<>CALL
VM_HEADER.RETURN_ADDRESS$
     17323**DCL     21547<>CALL
VM_HEADER.SIGNED$
     17325**DCL     21613<>CALL    22348<>CALL    22547>>IF      22549>>ASSIGN  22549>>ASSIGN  22661<>CALL
     22770<>CALL    22777<>CALL    23647>>IF      23654>>ASSIGN  23655>>ASSIGN  23655>>ASSIGN  23656>>ASSIGN
VM_HEADER.STATUS
     17238**DCL     22843<<ASSIGN
VM_HEADER.STATUS.ACK
     17244**DCL     22846<<ASSIGN
VM_HEADER.STATUS.ANSWER
     17242**DCL     22848<<ASSIGN
VM_HEADER.STATUS.BROADCAST
     17276**DCL     22486<<ASSIGN  22488<<ASSIGN
VM_HEADER.STATUS.CRYPT
     17250**DCL     22497<<ASSIGN
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:481  
VM_HEADER.STATUS.DEFER
     17246**DCL     22531<<ASSIGN
VM_HEADER.STATUS.DELIVERY
     17274**DCL     22849<<ASSIGN
VM_HEADER.STATUS.DR
     17272**DCL     21635<<ASSIGN  22599<<ASSIGN  22601<<ASSIGN
VM_HEADER.STATUS.ENCL
     17290**DCL     22277<<ASSIGN  23824<<ASSIGN
VM_HEADER.STATUS.ERR
     17239**DCL     22845<<ASSIGN
VM_HEADER.STATUS.FCOPY
     17262**DCL     21636<<ASSIGN  22349<<ASSIGN  22620<<ASSIGN  22625<<ASSIGN  22627<<ASSIGN  22629<<ASSIGN
VM_HEADER.STATUS.FORWARDED
     17268**DCL     23674<<ASSIGN
VM_HEADER.STATUS.RR
     17248**DCL     21634<<ASSIGN  22350<<ASSIGN  22748<<ASSIGN  22750<<ASSIGN
VM_HEADER.STATUS.RRACK
     17286**DCL     22847<<ASSIGN
VM_HEADER.SUBJECT$
     17327**DCL     21679>>IF      21716>>IF      22346<>CALL    22802<>CALL    22805<>CALL    22806>>IF
     22808<>CALL
VM_HEADER.TO$
     17329**DCL     21679>>IF      21712>>IF      21800>>IF      22341<>CALL    22814<>CALL    22817<>CALL
     23223>>IF      23494>>DOWHILE
VM_HEADER.UNIQUE_ID$
     17331**DCL     22710<>CALL    22711>>ASSIGN  23636<>CALL
VM_HEADER.WORK_AREA
     17341**DCL     21437--ASSIGN
VM_HEADER$
     10360**DCL     17225--IMP-PTR 21436>>ASSIGN  21437>>ASSIGN  21437>>ASSIGN  21438>>ASSIGN  21445>>ASSIGN
     21446>>ASSIGN  21447>>ASSIGN  21448>>ASSIGN  21547>>CALL    21553>>CALL    21563>>CALL    21570>>CALL
     21575>>CALL    21575>>CALL    21605>>CALL    21606>>ASSIGN  21613>>CALL    21620>>ASSIGN  21634>>ASSIGN
     21635>>ASSIGN  21636>>ASSIGN  21679>>IF      21679>>IF      21712>>IF      21716>>IF      21763>>IF
     21800>>IF      21990>>IF      22010>>CALL    22013>>CALL    22015>>ASSIGN  22015>>ASSIGN  22033>>IF
     22270>>ASSIGN  22270>>ASSIGN  22277>>ASSIGN  22341>>CALL    22342>>CALL    22344>>CALL    22345>>CALL
     22346>>CALL    22347>>CALL    22348>>CALL    22349>>ASSIGN  22350>>ASSIGN  22351>>ASSIGN  22352>>ASSIGN
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:482  
     22356>>IF      22358>>CALL    22362>>ASSIGN  22364>>IF      22366>>CALL    22370>>ASSIGN  22475>>CALL
     22478>>CALL    22486>>ASSIGN  22488>>ASSIGN  22497>>ASSIGN  22503>>CALL    22506>>CALL    22510>>CALL
     22516>>IF      22517>>ASSIGN  22527>>CALL    22529>>IF      22529>>IF      22531>>ASSIGN  22536>>ASSIGN
     22547>>IF      22549>>ASSIGN  22549>>ASSIGN  22562>>CALL    22568>>CALL    22570>>CALL    22572>>CALL
     22574>>CALL    22576>>CALL    22578>>CALL    22580>>CALL    22582>>CALL    22584>>CALL    22586>>CALL
     22588>>CALL    22590>>CALL    22599>>ASSIGN  22601>>ASSIGN  22620>>ASSIGN  22625>>ASSIGN  22627>>ASSIGN
     22629>>ASSIGN  22653>>CALL    22659>>CALL    22660>>CALL    22661>>CALL    22710>>CALL    22711>>ASSIGN
     22717>>CALL    22720>>CALL    22742>>CALL    22748>>ASSIGN  22750>>ASSIGN  22756>>CALL    22759>>CALL
     22770>>CALL    22777>>CALL    22802>>CALL    22805>>CALL    22806>>IF      22808>>CALL    22814>>CALL
     22817>>CALL    22832>>CALL    22835>>ASSIGN  22835>>ASSIGN  22843>>ASSIGN  22845>>ASSIGN  22846>>ASSIGN
     22847>>ASSIGN  22848>>ASSIGN  22849>>ASSIGN  23223>>IF      23223>>IF      23223>>IF      23494>>DOWHILE
     23636>>CALL    23643>>ASSIGN  23647>>IF      23651>>CALL    23653>>ASSIGN  23653>>ASSIGN  23654>>ASSIGN
     23655>>ASSIGN  23655>>ASSIGN  23656>>ASSIGN  23657>>CALL    23659>>ASSIGN  23659>>ASSIGN  23671>>CALL
     23673>>ASSIGN  23673>>ASSIGN  23674>>ASSIGN  23685>>CALL    23687>>ASSIGN  23687>>ASSIGN  23721>>ASSIGN
     23721>>ASSIGN  23792>>ASSIGN  23792>>ASSIGN  23824>>ASSIGN  23837>>ASSIGN  23847>>IF      23849>>CALL
     23851>>ASSIGN
VM_HEADER_
     10385**DCL     21243<>CALL    23177<>CALL
VM_INFOKEY IN PROCEDURE DO$SEND
     23566**DCL     23739--ASSIGN
VM_INFOKEY.MESSAGE_NUMBER IN PROCEDURE DO$SEND
     23570**DCL     23738<<ASSIGN
VM_INFOKEY.TYPE IN PROCEDURE DO$SEND
     23568**DCL     23737<<ASSIGN
VM_MAILCG_NAME
     10631**DCL     19820--DCLINIT
VM_MAILCG_SETSTA
     10647**DCL     19820--DCLINIT
VM_MAILCG_SETSTA.MYSTATION#
     10651**DCL     21376<<CALLBLT 21377<<CALLBLT
VM_MAIL_ACCT
     10456**DCL     19824--DCLINIT
VM_PARSEAREA_
     10392**DCL     21246<>CALL    21251>>ASSIGN
VM_PROFILE.EDITOR$
     17203**DCL     21504>>ASSIGN
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:483  
VM_PROFILE.FILE_FOLDER$
     17190**DCL     21551>>IF      21553>>CALL
VM_PROFILE.OPT.AUTO_EDIT
     17151**DCL     21765>>IF
VM_PROFILE.OPT.DELIVERY_RECEIPT
     17157**DCL     21635>>ASSIGN
VM_PROFILE.OPT.FCOPY
     17143**DCL     21636>>ASSIGN
VM_PROFILE.OPT.PREPROCESS
     17161**DCL     21522>>ASSIGN
VM_PROFILE.OPT.RETURN_RECEIPT
     17145**DCL     21634>>ASSIGN
VM_PROFILE.REPLY_TO$
     17205**DCL     21559>>ASSIGN  21562>>ASSIGN  21563>>CALL    21563>>CALL
VM_PROFILE.SIGNED$
     17194**DCL     21610>>IF      21612>>ASSIGN  21613>>CALL    21613>>CALL
VM_PROFILE$
     10362**DCL     17137--IMP-PTR 21504>>ASSIGN  21522>>ASSIGN  21551>>IF      21553>>CALL    21559>>ASSIGN
     21562>>ASSIGN  21563>>CALL    21563>>CALL    21610>>IF      21612>>ASSIGN  21613>>CALL    21613>>CALL
     21634>>ASSIGN  21635>>ASSIGN  21636>>ASSIGN  21765>>IF
VM_PROFILE_
     10387**DCL     21244<>CALL
VM_RADDRESS
     17789**DCL     21547<>CALL    22653<>CALL
VM_RADDRESS.ACCT
     17812**DCL     21532<<ASSIGN  22630<<ASSIGN  22642<<ASSIGN
VM_RADDRESS.FLAGS
     17794**DCL     22636<<ASSIGN
VM_RADDRESS.FOLDER
     17804**DCL     17805--REDEF   21541<<ASSIGN  22631<<ASSIGN  22644<<ASSIGN
VM_RADDRESS.NAME_KEY
     17802**DCL     21538<<CALLBLT
VM_RADDRESS.NEXT$
     17790**DCL     21536<<ASSIGN  22634<<ASSIGN
VM_RADDRESS.NOMAD.DELIM
     17807**DCL     21544<<ASSIGN
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:484  
VM_RADDRESS.NOMAD.FOLDER
     17806**DCL     21543<<ASSIGN
VM_RADDRESS.NOMAD.PSID
     17808**DCL     21545<<ASSIGN
VM_RADDRESS.PASS
     17809**DCL     21533<<ASSIGN  22632<<ASSIGN  22646<<ASSIGN
VM_RADDRESS.PREV$
     17792**DCL     21537<<ASSIGN  22635<<ASSIGN
VM_RADDRESS.SITENAME
     17811**DCL     21534<<ASSIGN  22633<<ASSIGN
VM_RADDRESS.TYPE
     17801**DCL     21535<<ASSIGN  22637<<ASSIGN
VM_SEARCH_INFO
     17355**DCL     21349<>CALL    21455<>CALL    21467<>CALL    21512<>CALL    22952<>CALL
VM_SEARCH_INFO.CURRENT
     17368**DCL     21511<<ASSIGN
VM_SEARCH_INFO.DCB#
     17358**DCL     21323<<ASSIGN
VM_SEARCH_INFO.GLOBAL
     17366**DCL     21322<<ASSIGN  21327<<ASSIGN
VM_SEARCH_INFO.NUM_ENTRIES
     17356**DCL     21321<<ASSIGN  21326<<ASSIGN
VM_SEND_FILE_NAME
     10537**DCL     18320--DCLINIT
VM_SITE
     17762**DCL     22781<<ASSIGN  22793<>CALL
VM_SITE.NUM_SITES
     17768**DCL     22783<<ASSIGN  22784>>IF      22788<<ASSIGN  22790>>DOINDEX
VM_SITE.ORIGIN
     17770**DCL     22782<<ASSIGN
VM_SITE.RECEIVER_SITE
     17772**DCL     22791<<ASSIGN
VM_SITENAME
     10633**DCL     21210<>CALL    23625>>IF      23627>>CALLBLT
VM_TYPE IN PROCEDURE GET$ADDLIST
     22945**DCL     22871--PROC    22966<>CALL
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:485  
VM_WORK_
     10390**DCL     21245<>CALL
VNS$BREAK
     15634**DCL-ENT 18244--DCLINIT
VNS$BREAK_DISABLE
     15635**DCL-ENT 21777--CALL    22334--CALL    22526--CALL    23173--CALL    23316--CALL    23325--CALL
     23371--CALL    23389--CALL    23585--CALL
VNS$BREAK_ENABLE
     15636**DCL-ENT 21784--CALL    22409--CALL    22540--CALL    23197--CALL    23319--CALL    23327--CALL
     23376--CALL    23384--CALL    23391--CALL    23598--CALL    23855--CALL
VNS$POST_EXEC
     15713**DCL-ENT 15478--DCLINIT
VNS$PRE_EXEC
     15712**DCL-ENT 15476--DCLINIT 21780--ASSIGN
VNS$XCON
     15637**DCL-ENT 18231--DCLINIT
VNS_BREAK_TYPE
     15743**DCL     21757<<ASSIGN  23469>>ASSIGN  23470<<ASSIGN  23503<<ASSIGN
VNS_REMEMBER
     15740**DCL     21204<<REMEMBR 21205<<REMEMBR
VN_BLIND_COPY
     15908**DCL     22475<>CALL
VN_BLIND_COPY.L#
     15908**DCL     15908--IMP-SIZ 22475>>CALL
VN_BODY
     15978**DCL     22044<>CALL
VN_BODY.L#
     15978**DCL     15978--IMP-SIZ 22042>>IF      22044>>CALL    22047>>ASSIGN  22047>>ASSIGN
VN_BODY.NAME#
     15978**DCL     22042>>IF      22047--ASSIGN
VN_BODY2
     15985**DCL     22031--IF      22069<>CALL
VN_BODY2.L#
     15985**DCL     15985--IMP-SIZ 22031>>IF      22067>>IF      22069>>CALL    22072>>ASSIGN  22072>>ASSIGN
VN_BODY2.NAME#
     15985**DCL     22067>>IF      22072--ASSIGN
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:486  
VN_BROADCAST.L#
     15943**DCL     15943--IMP-SIZ
VN_COPY
     15901**DCL     22503<>CALL
VN_COPY.L#
     15901**DCL     15901--IMP-SIZ 22503>>CALL
VN_DEFAULT_NODES
     16819**DCL     16850--DCLINIT
VN_DEFER
     15929**DCL     22523<>CALL
VN_DEFER.L#
     15929**DCL     15929--IMP-SIZ 22523>>CALL
VN_DR.L#
     15950**DCL     15950--IMP-SIZ
VN_FCOPY.L#
     15915**DCL     15915--IMP-SIZ
VN_NATL_NODES
     16848**DCL     21258<>CALL
VN_NODEFID
     17090**DCL     21258<>CALL
VN_NODENAMES
     16893**DCL     21258<>CALL
VN_NO_CHAR.L#
     15964**DCL     15964--IMP-SIZ
VN_OPTIONS
     15971**DCL     21290<>CALL    21809<>CALL
VN_OPTIONS.L#
     15971**DCL     15971--IMP-SIZ 21290>>CALL    21779>>ASSIGN  21809>>CALL    21834>>IF      21836>>ASSIGN
VN_OPTIONS.NAME#
     15971**DCL     21779--ASSIGN  21834--IF      21836--ASSIGN
VN_REFERENCE
     15894**DCL     22717<>CALL
VN_REFERENCE.L#
     15894**DCL     15894--IMP-SIZ 22717>>CALL
VN_REPLY_TO
     15880**DCL     22756<>CALL
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:487  
VN_REPLY_TO.L#
     15880**DCL     15880--IMP-SIZ 22756>>CALL
VN_RR.L#
     15922**DCL     15922--IMP-SIZ
VN_SIGNED
     15936**DCL     22770<>CALL
VN_SIGNED.L#
     15936**DCL     15936--IMP-SIZ 22770>>CALL
VN_SUBJECT
     15887**DCL     21733<>CALL    21746<>CALL    22802<>CALL
VN_SUBJECT.L#
     15887**DCL     15887--IMP-SIZ 21733>>CALL    21746>>CALL    22802>>CALL
VN_TO_
     15873**DCL     22814<>CALL    23480<>CALL    23495<>CALL
VN_TO_.L#
     15873**DCL     15873--IMP-SIZ 22814>>CALL    23478>>IF      23480>>CALL    23483>>ASSIGN  23483>>ASSIGN
     23495>>CALL
VN_TO_.NAME#
     15873**DCL     23478>>IF      23483--ASSIGN
VN_YES_CHAR.L#
     15957**DCL     15957--IMP-SIZ
WORK_DATE
     15727**DCL     15733--REDEF   19659--DCLINIT 19660--DCLINIT 19685--DCLINIT 19686--DCLINIT 19736--DCLINIT
     19737--DCLINIT
WORK_DATE.DAY
     15730**DCL     23433<<CALLBLT
WORK_DATE.MONTH
     15728**DCL     23431<<CALLBLT
WORK_DATE.YEAR
     15732**DCL     23437<<CALLBLT
WORK_DATEC
     15733**DCL     22521--ASSIGN  22522>>CALLBLT
WORK_TIME
     15734**DCL     15738--REDEF   19661--DCLINIT 19662--DCLINIT 19687--DCLINIT 19688--DCLINIT 19738--DCLINIT
     19739--DCLINIT
WORK_TIME.HOUR
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:488  
     15735**DCL     23441<<CALLBLT
WORK_TIME.MINUTE
     15737**DCL     23443<<CALLBLT
WORK_TIMEC
     15738**DCL     22521--ASSIGN  22522>>CALLBLT 23422<<ASSIGN
WORK_UTS
     15744**DCL     19689--DCLINIT 19740--DCLINIT 22517<<ASSIGN  23450>>ASSIGN
WRITE_MAILCG
     19884**DCL     21382<>CALL    23588<>CALL
WRITE_MAILCG.STATION_
     19886**DCL     19886--REDEF
WRITE_MAILCG.V
     19887**DCL     19884--DCLINIT
WRITE_MAILCG.V.DVBYTE.VFC#
     19893**DCL     19893--REDEF
X$ALLOCATE
     15710**DCL-ENT 23175--CALL    23179--CALL
X$DEALLOCATE
     15711**DCL-ENT 23250--CALL    23279--CALL
X$STRING
     10355**DCL     22990--CALL
X$STRING.SIZ
     10356**DCL     10357--IMP-SIZ 21562>>ASSIGN  21563>>CALL    21575>>CALL    21612>>ASSIGN  21613>>CALL
     22305>>ASSIGN  22306>>CALLBLT 22549>>ASSIGN  22990>>CALL    23119>>ASSIGN  23186<<ASSIGN  23187>>ASSIGN
     23190<<ASSIGN  23191>>ASSIGN  23313>>IF      23365>>IF      23654>>ASSIGN  23655>>ASSIGN  23656>>ASSIGN
     23807>>ASSIGN
X$STRING.TEXT
     10357**DCL     21563<>CALL    21575<>CALL    21613<>CALL    22306>>CALLBLT 22549--ASSIGN  23119--ASSIGN
     23187<<ASSIGN  23191<<ASSIGN  23313>>IF      23365>>IF      23655>>ASSIGN
X$STRIP_BLANKS
     15413**DCL-ENT 21596--CALL
XTX$ADAPT
     15452**DCL-ENT 15531--DCLINIT
XUR$ALLMSG
     15097**DCL-ENT 22672--CALL
XUR$ECHOIF
PL6.E3A0      #001=VNS$SEND File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:27 Page:489  
     15080**DCL-ENT 21884--CALL
XUR$ERRMSG
     15086**DCL-ENT 21336--CALL    21802--CALL    21826--CALL    21950--CALL    22415--CALL    22678--CALL
XUR$ERRPTR
     15079**DCL-ENT 21335--CALL    21885--CALL
XUR$GETCMD
     15078**DCL-ENT 21333--CALL    21575--CALL    21660--CALL    21746--CALL    21809--CALL    22093--CALL
     22096--CALL    22385--CALL    22703--CALL    23132--CALL    23495--CALL
XUR$HELP
     15095**DCL-ENT 22667--CALL
XUR$INFOMSG
     15087**DCL-ENT 21471--CALL    22319--CALL    22555--CALL    22557--CALL
XUR$INIT
     15083**DCL-ENT 21252--CALL    21526--CALL    21782--CALL    22377--CALL    22407--CALL    22736--CALL
XUR$MOREMSG
     15096**DCL-ENT 22670--CALL
XUR$SETDCBS
     15082**DCL-ENT 21253--CALL
XUR$SETERRMSG
     15088**DCL-ENT 21254--CALL    21527--CALL    21783--CALL    22378--CALL    22408--CALL    22737--CALL
XUR_INIT
     15457**DCL     21252<>CALL    21526<>CALL    21782<>CALL    22377<>CALL    22407<>CALL    22736<>CALL
XUR_INIT.COMMANDS#
     15460**DCL     21781<<ASSIGN  22375<<ASSIGN  22405<<ASSIGN
XUR_INIT.PREPROCESS#
     15459**DCL     21523>>IF      21525<<ASSIGN  22376<<ASSIGN  22406<<ASSIGN  22733>>IF      22735<<ASSIGN
XUR_INIT.PRE_EXEC$$
     15476**DCL     21780<<ASSIGN
XUR_INIT.WORKR_
     15471**DCL     15472--REDEF
XUR_INIT.WORK_
     15472**DCL     21251<<ASSIGN

PL6.E3A0      #002=VNS$XCON File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:30 Page:490  
     3044        1        /*T***********************************************************/
     3045        2        /*T*                                                         */
     3046        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     3047        4        /*T*                                                         */
     3048        5        /*T***********************************************************/
     3049        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     3050        7        /*P*    NAME: VNS$XCON
     3051        8                PURPOSE: CLEANUP ON EXIT FROM SEND
     3052        9                DESCRIPTION: THIS ROUTINE IS ENTERED ON EXIT TO CLOSE FILES.
     3053       10        */
     3054       11        VNS$XCON: PROC ASYNC ALTRET;
     3055       12        %INCLUDE CP_6;
     3056     5571          %INCLUDE CP_6_SUBS;
     3057     6111          %INCLUDE VM_DATA_R;
     3058     6542        /***** Macros *****/
     3059     6543          %F$DCB;
     3060     6600            %FPT_CLOSE( FPTN=CLOSE_SAVE_CONST, DISP=SAVE, STCLASS=CONSTANT );
     3061     6642
     3062     6643          %FPT_CLOSE( FPTN=CLOSE_SAVE,    STCLASS="" );
     3063     6685          %FPT_CLOSE( FPTN=CLOSE_SCRATCH, STCLASS="" );
     3064     6727
     3065     6728        /***** Dcbs *****/
     3066     6729    1   DCL M$EDIT DCB;
     3067     6730
     3068     6731        %VLP_NAME( FPTN=VN_BODY,   LEN=23,L=23, NAME=' ',STCLASS="STATIC SYMDEF");
     3069     6758        %VLP_NAME( FPTN=VN_BODY2,  LEN=23,L=23, NAME=' ',STCLASS="STATIC SYMDEF");
     3070     6785        %VLP_NAME( FPTN=VN_OPTIONS,LEN=23,L=23, NAME=' ',STCLASS="STATIC SYMDEF");
     3071     6812        %VLP_NAME( FPTN=VN_BREAK_PROMPT,LEN=50,L=50,NAME=' ',STCLASS="STATIC SYMDEF");
     3072     6839        %VLP_NAME( FPTN=VN_QUIT_OR_CONT,LEN=4,L=4,NAME=' ',STCLASS="STATIC SYMDEF");
     3073     6866        %EJECT;
PL6.E3A0      #002=VNS$XCON File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:30 Page:491  
     3074     6867    1       call M$XCON; /**  Release exit control  **/
     3075     6868
     3076     6869    1       CLOSE_SAVE      = CLOSE_SAVE_CONST;
     3077     6870    1       CLOSE_SAVE.V_   = vector(CLOSE_SAVE.V);
     3078     6871
     3079     6872    1       CLOSE_SCRATCH   = CLOSE_SAVE_CONST;
     3080     6873    1       CLOSE_SCRATCH.V_ = vector(CLOSE_SCRATCH.V);
     3081     6874    1       CLOSE_SCRATCH.V.DISP# = %SCRATCH#;
     3082     6875    1       IF DCBADDR(M$ME_NUM) -> F$DCB.FCD#
     3083     6876    2       THEN DO;
     3084     6877    2           CLOSE_SAVE.V.DCB# = M$ME_NUM;
     3085     6878    2           CALL M$CLOSE (CLOSE_SAVE) ALTRET(E_CLOSE_M$ME);
     3086     6879    2   E_CLOSE_M$ME:
     3087     6880    2       END;
     3088     6881    1       IF DCBADDR(M$SI_NUM) -> F$DCB.FCD#
     3089     6882    2       THEN DO;
     3090     6883    2           CLOSE_SAVE.V.DCB# = M$SI_NUM;
     3091     6884    2           CALL M$CLOSE (CLOSE_SAVE) ALTRET(E_CLOSE_M$SI);
     3092     6885    2   E_CLOSE_M$SI:
     3093     6886    2       END;
     3094     6887    1       IF DCBADDR(M$WORK_NUM) -> F$DCB.FCD#
     3095     6888    2       THEN DO;
     3096     6889    2           CLOSE_SCRATCH.V.DCB# = M$WORK_NUM;
     3097     6890    2           CALL M$CLOSE (CLOSE_SCRATCH) ALTRET(E_CLOSE_M$WORK);
     3098     6891    2   E_CLOSE_M$WORK:
     3099     6892    2       END;
     3100     6893    1       IF DCBADDR(M$MAIL_FILE_NUM) -> F$DCB.FCD#
     3101     6894    2       THEN DO;
     3102     6895    2           CLOSE_SAVE.V.DCB# = M$MAIL_FILE_NUM;
     3103     6896    2           CALL M$CLOSE (CLOSE_SAVE) ALTRET(E_CLOSE_M$MAIL_FILE);
     3104     6897    2   E_CLOSE_M$MAIL_FILE:
     3105     6898    2       END;
     3106     6899    1       IF DCBADDR(DCBNUM(M$EDIT)) -> F$DCB.FCD#
     3107     6900    2       THEN DO;
     3108     6901    2           CLOSE_SCRATCH.V.DCB# = DCBNUM(M$EDIT);
     3109     6902    2           CALL M$CLOSE (CLOSE_SCRATCH) ALTRET(E_CLOSE_M$EDIT);
     3110     6903    2   E_CLOSE_M$EDIT:
PL6.E3A0      #002=VNS$XCON File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:30 Page:492  
     3111     6904    2       END;
     3112     6905    1       IF DCBADDR(M$NODE_NUM) -> F$DCB.FCD#
     3113     6906    2       THEN DO;
     3114     6907    2           CLOSE_SAVE.V.DCB# = M$NODE_NUM;
     3115     6908    2           CALL M$CLOSE (CLOSE_SAVE) ALTRET(E_CLOSE_SITE);
     3116     6909    2   E_CLOSE_SITE:
     3117     6910    2       END;
     3118     6911    1       IF DCBADDR(M$MAIL_COMGROUP_NUM) -> F$DCB.FCD#
     3119     6912    2       THEN DO;
     3120     6913    2           CLOSE_SAVE.V.DCB# = M$MAIL_COMGROUP_NUM;
     3121     6914    2           CALL M$CLOSE (CLOSE_SAVE) ALTRET(E_CLOSE_MAIL_CG);
     3122     6915    2   E_CLOSE_MAIL_CG:
     3123     6916    2       END;
     3124     6917
     3125     6918    1       ALTRETURN;  /**  continue running down SEND  **/
     3126     6919    1   END VNS$XCON;
     3127     6920        %EOD;

PL6.E3A0      #002=VNS$XCON File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:30 Page:493  
--  Include file information  --

   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure VNS$XCON.

   Procedure VNS$XCON requires 109 words for executable code.
   Procedure VNS$XCON requires 66 words of local(AUTO) storage.

PL6.E3A0      #002=VNS$XCON File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:30 Page:494  

 Object Unit name= VNS$XCON                                   File name= VNS$SEND.:VMB6TOU
 UTS= AUG 20 '97 15:30:25.68 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$MAIL_FILE
    2   DCB   even  none     0      0  M$MAIL_CENTRAL
    3   DCB   even  none     0      0  M$MAIL_GLOBAL
    4   DCB   even  none     0      0  M$WORK
    5   DCB   even  none     0      0  M$MAIL_COMGROUP
    6   DCB   even  none     0      0  M$DO
    7   DCB   even  none     0      0  M$LO
    8   DCB   even  none     0      0  M$ME
    9   DCB   even  none     0      0  M$NODE
   10   DCB   even  none     0      0  M$SI
   11  RoData even  UTS     30     36  VNS$XCON
   12   DCB   even  none     0      0  M$EDIT
   13   Data  even  none    33     41  VNS$XCON
   14   Proc  even  none   109    155  VNS$XCON
   15  RoData even  none     2      2  VNS$XCON

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    14      0   yes    yes     yes     Async       0  VNS$XCON
PL6.E3A0      #002=VNS$XCON File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:30 Page:495  

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
   13      0  VN_BODY                           13      6  VN_BODY2
   13     14  VN_OPTIONS                        13     22  VN_BREAK_PROMPT
   13     37  VN_QUIT_OR_CONT

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AAUTO
                       nStd      0 X66_AAALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                             r    VM_HEADER$                       r    VM_PROFILE$
r    VM_ADDLIST$                      r    VM_ADDREC$                       r    VM_WORK$
r    VM_SELECT$                       r    VM_PARSEAREA$                    r    VM_INPUT$
r    VM_COPY$                              VM_ENCLLIST$                          VM_ENCLREC$
     VM_HEADER_                            VM_HEADER_INIT_                       VM_PROFILE_
     VM_ADDLIST_                           VM_ADDREC_                            VM_WORK_
     VM_SELECT_                            VM_PARSEAREA_                         VM_INPUT_
     VM_COPY_                              VM_ENCLLIST_                          VM_ENCLREC_
     M$MAIL_FILE                           M$MAIL_CENTRAL                        M$MAIL_GLOBAL
     M$WORK                                M$MAIL_COMGROUP                       M$DO
     M$LO                                  M$ME                                  M$NODE
     M$SI                                  M$MAIL_FILE_NUM                       M$MAIL_CENTRAL_NUM
     M$MAIL_GLOBAL_NUM                     M$WORK_NUM                            M$MAIL_COMGROUP_NUM
     M$DO_NUM                              M$ME_NUM                              M$LO_NUM
     M$SI_NUM                              M$NODE_NUM                       r    B$JIT$
r    B$TCB$                                VM_MAIL_ACCT                          VM_NAME_MAP_NAME
     ERRMSG_FID                            VM_SEND_FILE_NAME                     VM_FORWARD_FILE_NAME
     VM_FORWARD_ENCL_NAME                  VM_FORWARD_FILE_PASS                  VM_MAILCG_NAME
PL6.E3A0      #002=VNS$XCON File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:30 Page:496  
     VM_SITENAME                           VM_MAILCG_SETSTA                      M$EDIT

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID                               ROSID
PL6.E3A0      #002=VNS$XCON File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:30 Page:497  


     3044        1        /*T***********************************************************/
     3045        2        /*T*                                                         */
     3046        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     3047        4        /*T*                                                         */
     3048        5        /*T***********************************************************/
     3049        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     3050        7        /*P*    NAME: VNS$XCON
     3051        8                PURPOSE: CLEANUP ON EXIT FROM SEND
     3052        9                DESCRIPTION: THIS ROUTINE IS ENTERED ON EXIT TO CLOSE FILES.
     3053       10        */
     3054       11        VNS$XCON: PROC ASYNC ALTRET;

     11 14 000000   000000 700200 xent  VNS$XCON     TSX0  ! X66_AAUTO
        14 000001   000102 000000                    ZERO    66,0

     3055       12        %INCLUDE CP_6;
     3056     5571          %INCLUDE CP_6_SUBS;
     3057     6111          %INCLUDE VM_DATA_R;
     3058     6542        /***** Macros *****/
     3059     6543          %F$DCB;
     3060     6600            %FPT_CLOSE( FPTN=CLOSE_SAVE_CONST, DISP=SAVE, STCLASS=CONSTANT );
     3061     6642
     3062     6643          %FPT_CLOSE( FPTN=CLOSE_SAVE,    STCLASS="" );
     3063     6685          %FPT_CLOSE( FPTN=CLOSE_SCRATCH, STCLASS="" );
     3064     6727
     3065     6728        /***** Dcbs *****/
     3066     6729    1   DCL M$EDIT DCB;
     3067     6730
     3068     6731        %VLP_NAME( FPTN=VN_BODY,   LEN=23,L=23, NAME=' ',STCLASS="STATIC SYMDEF");
     3069     6758        %VLP_NAME( FPTN=VN_BODY2,  LEN=23,L=23, NAME=' ',STCLASS="STATIC SYMDEF");
     3070     6785        %VLP_NAME( FPTN=VN_OPTIONS,LEN=23,L=23, NAME=' ',STCLASS="STATIC SYMDEF");
     3071     6812        %VLP_NAME( FPTN=VN_BREAK_PROMPT,LEN=50,L=50,NAME=' ',STCLASS="STATIC SYMDEF");
     3072     6839        %VLP_NAME( FPTN=VN_QUIT_OR_CONT,LEN=4,L=4,NAME=' ',STCLASS="STATIC SYMDEF");
     3073     6866        %EJECT;
PL6.E3A0      #002=VNS$XCON File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:30 Page:498  
     3074     6867    1       call M$XCON; /**  Release exit control  **/

   6867 14 000002   010003 713400                    CLIMB   4099
        14 000003   000000 401760                    pmme    nvectors=0

     3075     6868
     3076     6869    1       CLOSE_SAVE      = CLOSE_SAVE_CONST;

   6869 14 000004   000100 100400                    MLR     fill='000'O
        14 000005   000000 000170 11                 ADSC9   CLOSE_SAVE_CONST         cn=0,n=120
        14 000006   200004 000170                    ADSC9   CLOSE_SAVE,,AUTO         cn=0,n=120

     3077     6870    1       CLOSE_SAVE.V_   = vector(CLOSE_SAVE.V);

   6870 14 000007   000000 235000 15                 LDA     0
        14 000010   200100 452500                    STP2    CLOSE_SCRATCH+30,,AUTO
        14 000011   200100 236100                    LDQ     CLOSE_SCRATCH+30,,AUTO
        14 000012   000036 036003                    ADLQ    30,DU
        14 000013   200004 757100                    STAQ    CLOSE_SAVE,,AUTO

     3078     6871
     3079     6872    1       CLOSE_SCRATCH   = CLOSE_SAVE_CONST;

   6872 14 000014   000100 100400                    MLR     fill='000'O
        14 000015   000000 000170 11                 ADSC9   CLOSE_SAVE_CONST         cn=0,n=120
        14 000016   200042 000170                    ADSC9   CLOSE_SCRATCH,,AUTO      cn=0,n=120

     3080     6873    1       CLOSE_SCRATCH.V_ = vector(CLOSE_SCRATCH.V);

   6873 14 000017   000000 235000 15                 LDA     0
        14 000020   200100 452500                    STP2    CLOSE_SCRATCH+30,,AUTO
        14 000021   200100 236100                    LDQ     CLOSE_SCRATCH+30,,AUTO
        14 000022   000074 036003                    ADLQ    60,DU
        14 000023   200042 757100                    STAQ    CLOSE_SCRATCH,,AUTO

     3081     6874    1       CLOSE_SCRATCH.V.DISP# = %SCRATCH#;

PL6.E3A0      #002=VNS$XCON File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:30 Page:499  
   6874 14 000024   000001 236007                    LDQ     1,DL
        14 000025   200074 552104                    STBQ    CLOSE_SCRATCH+26,'04'O,AUTO

     3082     6875    1       IF DCBADDR(M$ME_NUM) -> F$DCB.FCD#

   6875 14 000026   000001 470400 15                 LDP0    1
        14 000027   000000 471500                    LDP1    0,,PR0
        14 000030   000000 720000 xsym               LXL0    M$ME_NUM
        14 000031   100000 473510                    LDP3    0,X0,PR1
        14 000032   300031 236100                    LDQ     25,,PR3
        14 000033   020000 316007                    CANQ    8192,DL
        14 000034   000042 600000 14                 TZE     E_CLOSE_M$ME

     3083     6876    2       THEN DO;

     3084     6877    2           CLOSE_SAVE.V.DCB# = M$ME_NUM;

   6877 14 000035   200036 740100                    STX0    CLOSE_SAVE+26,,AUTO

     3085     6878    2           CALL M$CLOSE (CLOSE_SAVE) ALTRET(E_CLOSE_M$ME);

   6878 14 000036   200004 630500                    EPPR0   CLOSE_SAVE,,AUTO
        14 000037   450001 713400                    CLIMB   alt,close
        14 000040   406000 401760                    pmme    nvectors=13
        14 000041   000042 702000 14                 TSX2    E_CLOSE_M$ME

     3086     6879    2   E_CLOSE_M$ME:
     3087     6880    2       END;

   6880 14 000042                       E_CLOSE_M$ME null
     3088     6881    1       IF DCBADDR(M$SI_NUM) -> F$DCB.FCD#

   6881 14 000042   000001 470400 15                 LDP0    1
        14 000043   000000 471500                    LDP1    0,,PR0
        14 000044   000000 720000 xsym               LXL0    M$SI_NUM
        14 000045   100000 473510                    LDP3    0,X0,PR1
        14 000046   300031 236100                    LDQ     25,,PR3
PL6.E3A0      #002=VNS$XCON File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:30 Page:500  
        14 000047   020000 316007                    CANQ    8192,DL
        14 000050   000056 600000 14                 TZE     E_CLOSE_M$SI

     3089     6882    2       THEN DO;

     3090     6883    2           CLOSE_SAVE.V.DCB# = M$SI_NUM;

   6883 14 000051   200036 740100                    STX0    CLOSE_SAVE+26,,AUTO

     3091     6884    2           CALL M$CLOSE (CLOSE_SAVE) ALTRET(E_CLOSE_M$SI);

   6884 14 000052   200004 630500                    EPPR0   CLOSE_SAVE,,AUTO
        14 000053   450001 713400                    CLIMB   alt,close
        14 000054   406000 401760                    pmme    nvectors=13
        14 000055   000056 702000 14                 TSX2    E_CLOSE_M$SI

     3092     6885    2   E_CLOSE_M$SI:
     3093     6886    2       END;

   6886 14 000056                       E_CLOSE_M$SI null
     3094     6887    1       IF DCBADDR(M$WORK_NUM) -> F$DCB.FCD#

   6887 14 000056   000001 470400 15                 LDP0    1
        14 000057   000000 471500                    LDP1    0,,PR0
        14 000060   000000 720000 xsym               LXL0    M$WORK_NUM
        14 000061   100000 473510                    LDP3    0,X0,PR1
        14 000062   300031 236100                    LDQ     25,,PR3
        14 000063   020000 316007                    CANQ    8192,DL
        14 000064   000072 600000 14                 TZE     E_CLOSE_M$WORK

     3095     6888    2       THEN DO;

     3096     6889    2           CLOSE_SCRATCH.V.DCB# = M$WORK_NUM;

   6889 14 000065   200074 740100                    STX0    CLOSE_SCRATCH+26,,AUTO

     3097     6890    2           CALL M$CLOSE (CLOSE_SCRATCH) ALTRET(E_CLOSE_M$WORK);
PL6.E3A0      #002=VNS$XCON File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:30 Page:501  

   6890 14 000066   200042 630500                    EPPR0   CLOSE_SCRATCH,,AUTO
        14 000067   450001 713400                    CLIMB   alt,close
        14 000070   406000 401760                    pmme    nvectors=13
        14 000071   000072 702000 14                 TSX2    E_CLOSE_M$WORK

     3098     6891    2   E_CLOSE_M$WORK:
     3099     6892    2       END;

   6892 14 000072                       E_CLOSE_M$W* null
     3100     6893    1       IF DCBADDR(M$MAIL_FILE_NUM) -> F$DCB.FCD#

   6893 14 000072   000001 470400 15                 LDP0    1
        14 000073   000000 471500                    LDP1    0,,PR0
        14 000074   000000 720000 xsym               LXL0    M$MAIL_FILE_NUM
        14 000075   100000 473510                    LDP3    0,X0,PR1
        14 000076   300031 236100                    LDQ     25,,PR3
        14 000077   020000 316007                    CANQ    8192,DL
        14 000100   000106 600000 14                 TZE     E_CLOSE_M$MAIL_FILE

     3101     6894    2       THEN DO;

     3102     6895    2           CLOSE_SAVE.V.DCB# = M$MAIL_FILE_NUM;

   6895 14 000101   200036 740100                    STX0    CLOSE_SAVE+26,,AUTO

     3103     6896    2           CALL M$CLOSE (CLOSE_SAVE) ALTRET(E_CLOSE_M$MAIL_FILE);

   6896 14 000102   200004 630500                    EPPR0   CLOSE_SAVE,,AUTO
        14 000103   450001 713400                    CLIMB   alt,close
        14 000104   406000 401760                    pmme    nvectors=13
        14 000105   000106 702000 14                 TSX2    E_CLOSE_M$MAIL_FILE

     3104     6897    2   E_CLOSE_M$MAIL_FILE:
     3105     6898    2       END;

   6898 14 000106                       E_CLOSE_M$M* null
PL6.E3A0      #002=VNS$XCON File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:30 Page:502  
     3106     6899    1       IF DCBADDR(DCBNUM(M$EDIT)) -> F$DCB.FCD#

   6899 14 000106   000000 236007 xsym               LDQ     M$EDIT,DL
        14 000107   000001 470400 15                 LDP0    1
        14 000110   000000 471500                    LDP1    0,,PR0
        14 000111   100000 473506                    LDP3    0,QL,PR1
        14 000112   300031 236100                    LDQ     25,,PR3
        14 000113   020000 316007                    CANQ    8192,DL
        14 000114   000124 600000 14                 TZE     E_CLOSE_M$EDIT

     3107     6900    2       THEN DO;

     3108     6901    2           CLOSE_SCRATCH.V.DCB# = DCBNUM(M$EDIT);

   6901 14 000115   000000 236007 xsym               LDQ     M$EDIT,DL
        14 000116   000000 620006                    EAX0    0,QL
        14 000117   200074 740100                    STX0    CLOSE_SCRATCH+26,,AUTO

     3109     6902    2           CALL M$CLOSE (CLOSE_SCRATCH) ALTRET(E_CLOSE_M$EDIT);

   6902 14 000120   200042 630500                    EPPR0   CLOSE_SCRATCH,,AUTO
        14 000121   450001 713400                    CLIMB   alt,close
        14 000122   406000 401760                    pmme    nvectors=13
        14 000123   000124 702000 14                 TSX2    E_CLOSE_M$EDIT

     3110     6903    2   E_CLOSE_M$EDIT:
     3111     6904    2       END;

   6904 14 000124                       E_CLOSE_M$E* null
     3112     6905    1       IF DCBADDR(M$NODE_NUM) -> F$DCB.FCD#

   6905 14 000124   000001 470400 15                 LDP0    1
        14 000125   000000 471500                    LDP1    0,,PR0
        14 000126   000000 720000 xsym               LXL0    M$NODE_NUM
        14 000127   100000 473510                    LDP3    0,X0,PR1
        14 000130   300031 236100                    LDQ     25,,PR3
        14 000131   020000 316007                    CANQ    8192,DL
PL6.E3A0      #002=VNS$XCON File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:30 Page:503  
        14 000132   000140 600000 14                 TZE     E_CLOSE_SITE

     3113     6906    2       THEN DO;

     3114     6907    2           CLOSE_SAVE.V.DCB# = M$NODE_NUM;

   6907 14 000133   200036 740100                    STX0    CLOSE_SAVE+26,,AUTO

     3115     6908    2           CALL M$CLOSE (CLOSE_SAVE) ALTRET(E_CLOSE_SITE);

   6908 14 000134   200004 630500                    EPPR0   CLOSE_SAVE,,AUTO
        14 000135   450001 713400                    CLIMB   alt,close
        14 000136   406000 401760                    pmme    nvectors=13
        14 000137   000140 702000 14                 TSX2    E_CLOSE_SITE

     3116     6909    2   E_CLOSE_SITE:
     3117     6910    2       END;

   6910 14 000140                       E_CLOSE_SITE null
     3118     6911    1       IF DCBADDR(M$MAIL_COMGROUP_NUM) -> F$DCB.FCD#

   6911 14 000140   000001 470400 15                 LDP0    1
        14 000141   000000 471500                    LDP1    0,,PR0
        14 000142   000000 720000 xsym               LXL0    M$MAIL_COMGROUP_NUM
        14 000143   100000 473510                    LDP3    0,X0,PR1
        14 000144   300031 236100                    LDQ     25,,PR3
        14 000145   020000 316007                    CANQ    8192,DL
        14 000146   000154 600000 14                 TZE     E_CLOSE_MAIL_CG

     3119     6912    2       THEN DO;

     3120     6913    2           CLOSE_SAVE.V.DCB# = M$MAIL_COMGROUP_NUM;

   6913 14 000147   200036 740100                    STX0    CLOSE_SAVE+26,,AUTO

     3121     6914    2           CALL M$CLOSE (CLOSE_SAVE) ALTRET(E_CLOSE_MAIL_CG);

PL6.E3A0      #002=VNS$XCON File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:30 Page:504  
   6914 14 000150   200004 630500                    EPPR0   CLOSE_SAVE,,AUTO
        14 000151   450001 713400                    CLIMB   alt,close
        14 000152   406000 401760                    pmme    nvectors=13
        14 000153   000154 702000 14                 TSX2    E_CLOSE_MAIL_CG

     3122     6915    2   E_CLOSE_MAIL_CG:
     3123     6916    2       END;

   6916 14 000154                       E_CLOSE_MAI* null
     3124     6917
     3125     6918    1       ALTRETURN;  /**  continue running down SEND  **/

   6918 14 000154   000000 702200 xent               TSX2  ! X66_AAALT

CLOSE_SAVE_CONST
 Sect OctLoc
  11     000   000003 777640   000032 006000   000000 177640   000000 006014    ................
  11     004   000000 177640   000000 006014   000000 177640   000000 006014    ................
  11     030*  000000 177640   000000 006014   000000 000002   000000 000040    ...............
  11     034   000220 000000   000000 000000                                    ........

VN_BODY
 Sect OctLoc
  13     000   027040 040040   040040 040040   040040 040040   040040 040040    .
  13     004   040040 040040   040040 040040

VN_BODY2
 Sect OctLoc
  13     006   027040 040040   040040 040040   040040 040040   040040 040040    .
  13     012   040040 040040   040040 040040

VN_OPTIONS
 Sect OctLoc
  13     014   027040 040040   040040 040040   040040 040040   040040 040040    .
  13     020   040040 040040   040040 040040

VN_BREAK_PROMPT
PL6.E3A0      #002=VNS$XCON File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:30 Page:505  
 Sect OctLoc
  13     022   062040 040040   040040 040040   040040 040040   040040 040040    2
  13     026   040040 040040   040040 040040   040040 040040   040040 040040
  13     036*  040040 040***                                                       .

VN_QUIT_OR_CONT
 Sect OctLoc
  13     037   004040 040040   040*** ******                                    .    ...

(unnamed)
 Sect OctLoc
  15     000   000003 777640   000000 006003                                    ........
     3126     6919    1   END VNS$XCON;
     3127     6920        %EOD;

PL6.E3A0      #002=VNS$XCON File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:30 Page:506  
--  Include file information  --

   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure VNS$XCON.
PL6.E3A0      #002=VNS$XCON File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:30 Page:507  

 **** Variables and constants ****

  ****  Section 011 RoData VNS$XCON

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(1080)  r     1 CLOSE_SAVE_CONST

  ****  Section 013  Data  VNS$XCON

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c STRC(216)         1 VN_BODY                    6-0-0/c STRC(216)         1 VN_BODY2
    22-0-0/c STRC(459)         1 VN_BREAK_PROMPT           14-0-0/c STRC(216)         1 VN_OPTIONS
    37-0-0/c STRC(45)          1 VN_QUIT_OR_CONT

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/d STRC(1080)  r     1 CLOSE_SAVE                42-0-0/d STRC(1080)  r     1 CLOSE_SCRATCH

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 B$JIT$                     0-0-0/w PTR               1 B$TCB$
     0-0-0/c ASTR(9)     r     1 ERRMSG_FID                 0-0-0/w UBIN              1 M$DO_NUM
     0-0-0/w UBIN              1 M$LO_NUM                   0-0-0/w UBIN              1 M$MAIL_CENTRAL_NUM
     0-0-0/w UBIN        r     1 M$MAIL_COMGROUP_NUM        0-0-0/w UBIN        r     1 M$MAIL_FILE_NUM
     0-0-0/w UBIN              1 M$MAIL_GLOBAL_NUM          0-0-0/w UBIN        r     1 M$ME_NUM
     0-0-0/w UBIN        r     1 M$NODE_NUM                 0-0-0/w UBIN        r     1 M$SI_NUM
     0-0-0/w UBIN        r     1 M$WORK_NUM                 0-0-0/w PTR               1 VM_ADDLIST$
PL6.E3A0      #002=VNS$XCON File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:30 Page:508  
     0-0-0/d VECT              1 VM_ADDLIST_                0-0-0/w PTR               1 VM_ADDREC$
     0-0-0/d VECT              1 VM_ADDREC_                 0-0-0/w PTR               1 VM_COPY$
     0-0-0/d VECT              1 VM_COPY_                   0-0-0/w PTR               1 VM_ENCLLIST$
     0-0-0/d VECT              1 VM_ENCLLIST_               0-0-0/w PTR               1 VM_ENCLREC$
     0-0-0/d VECT              1 VM_ENCLREC_                0-0-0/c STRC(270)         1 VM_FORWARD_ENCL_NAME
     0-0-0/c STRC(270)         1 VM_FORWARD_FILE_NAME       0-0-0/c STRC(72)          1 VM_FORWARD_FILE_PASS
     0-0-0/w PTR               1 VM_HEADER$                 0-0-0/d VECT              1 VM_HEADER_
     0-0-0/d VECT              1 VM_HEADER_INIT_            0-0-0/w PTR               1 VM_INPUT$
     0-0-0/d VECT              1 VM_INPUT_                  0-0-0/c STRC(72)          1 VM_MAILCG_NAME
     0-0-0/w STRC(432)         1 VM_MAILCG_SETSTA           0-0-0/c STRC(72)          1 VM_MAIL_ACCT
     0-0-0/c STRC(54)          1 VM_NAME_MAP_NAME           0-0-0/w PTR               1 VM_PARSEAREA$
     0-0-0/d VECT              1 VM_PARSEAREA_              0-0-0/w PTR               1 VM_PROFILE$
     0-0-0/d VECT              1 VM_PROFILE_                0-0-0/w PTR               1 VM_SELECT$
     0-0-0/d VECT              1 VM_SELECT_                 0-0-0/c STRC(288)         1 VM_SEND_FILE_NAME
     0-0-0/c CHAR(8)           1 VM_SITENAME                0-0-0/w PTR               1 VM_WORK$
     0-0-0/d VECT              1 VM_WORK_

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d ASTR(3528)  r     1 F$DCB                      0-0-0N  NULL        r     1 M$DO
     0-0-0N  NULL        r     1 M$EDIT                     0-0-0N  NULL        r     1 M$LO
     0-0-0N  NULL        r     1 M$MAIL_CENTRAL             0-0-0N  NULL        r     1 M$MAIL_COMGROUP
     0-0-0N  NULL        r     1 M$MAIL_FILE                0-0-0N  NULL        r     1 M$MAIL_GLOBAL
     0-0-0N  NULL        r     1 M$ME                       0-0-0N  NULL        r     1 M$NODE
     0-0-0N  NULL        r     1 M$SI                       0-0-0N  NULL        r     1 M$UC
     0-0-0N  NULL        r     1 M$WORK                     0-0-0/c ASTR(9)     r     1 X$STRING


   Procedure VNS$XCON requires 109 words for executable code.
   Procedure VNS$XCON requires 66 words of local(AUTO) storage.
PL6.E3A0      #002=VNS$XCON File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:30 Page:509  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=VNS$XCON File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:30 Page:510  
          MINI XREF LISTING

CLOSE_SAVE
      6666**DCL      6869<<ASSIGN   6878<>CALL     6884<>CALL     6896<>CALL     6908<>CALL     6914<>CALL
CLOSE_SAVE.SN_
      6666**DCL      6666--REDEF
CLOSE_SAVE.UTL_
      6667**DCL      6667--REDEF
CLOSE_SAVE.V
      6671**DCL      6870--ASSIGN
CLOSE_SAVE.V.DCB#
      6672**DCL      6877<<ASSIGN   6883<<ASSIGN   6895<<ASSIGN   6907<<ASSIGN   6913<<ASSIGN
CLOSE_SAVE.V.EXPIRE#
      6681**DCL      6681--REDEF
CLOSE_SAVE.V.TYPE#
      6679**DCL      6679--REDEF
CLOSE_SAVE.V.XTNSIZE#
      6676**DCL      6676--REDEF    6678--REDEF
CLOSE_SAVE.V_
      6666**DCL      6870<<ASSIGN
CLOSE_SAVE_CONST
      6623**DCL      6869>>ASSIGN   6872>>ASSIGN
CLOSE_SAVE_CONST.SN_
      6623**DCL      6623--REDEF
CLOSE_SAVE_CONST.UTL_
      6624**DCL      6624--REDEF
CLOSE_SAVE_CONST.V
      6628**DCL      6623--DCLINIT
CLOSE_SAVE_CONST.V.EXPIRE#
      6638**DCL      6638--REDEF
CLOSE_SAVE_CONST.V.TYPE#
      6636**DCL      6636--REDEF
CLOSE_SAVE_CONST.V.XTNSIZE#
      6633**DCL      6633--REDEF    6635--REDEF
PL6.E3A0      #002=VNS$XCON File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:30 Page:511  
CLOSE_SCRATCH
      6708**DCL      6872<<ASSIGN   6890<>CALL     6902<>CALL
CLOSE_SCRATCH.SN_
      6708**DCL      6708--REDEF
CLOSE_SCRATCH.UTL_
      6709**DCL      6709--REDEF
CLOSE_SCRATCH.V
      6713**DCL      6873--ASSIGN
CLOSE_SCRATCH.V.DCB#
      6714**DCL      6889<<ASSIGN   6901<<ASSIGN
CLOSE_SCRATCH.V.DISP#
      6717**DCL      6874<<ASSIGN
CLOSE_SCRATCH.V.EXPIRE#
      6723**DCL      6723--REDEF
CLOSE_SCRATCH.V.TYPE#
      6721**DCL      6721--REDEF
CLOSE_SCRATCH.V.XTNSIZE#
      6718**DCL      6718--REDEF    6720--REDEF
CLOSE_SCRATCH.V_
      6708**DCL      6873<<ASSIGN
ERRMSG_FID.L#
      6387**DCL      6387--IMP-SIZ
E_CLOSE_M$EDIT
      6904**LABEL    6902--CALLALT
E_CLOSE_M$MAIL_FILE
      6898**LABEL    6896--CALLALT
E_CLOSE_M$ME
      6880**LABEL    6878--CALLALT
E_CLOSE_M$SI
      6886**LABEL    6884--CALLALT
E_CLOSE_M$WORK
      6892**LABEL    6890--CALLALT
E_CLOSE_MAIL_CG
      6916**LABEL    6914--CALLALT
E_CLOSE_SITE
      6910**LABEL    6908--CALLALT
PL6.E3A0      #002=VNS$XCON File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:30 Page:512  
F$DCB.ACTPOS
      6576**DCL      6576--REDEF
F$DCB.ARS#
      6550**DCL      6550--REDEF
F$DCB.ATTR
      6569**DCL      6570--REDEF
F$DCB.BORROW
      6584**DCL      6584--REDEF    6584--REDEF    6584--REDEF
F$DCB.DCBNAME.L
      6598**DCL      6598--IMP-SIZ
F$DCB.EOMCHAR#
      6554**DCL      6554--REDEF
F$DCB.FCD#
      6563**DCL      6875>>IF       6881>>IF       6887>>IF       6893>>IF       6899>>IF       6905>>IF
      6911>>IF
F$DCB.FLDID
      6579**DCL      6579--REDEF
F$DCB.FORM$
      6573**DCL      6573--REDEF
F$DCB.FSECT
      6589**DCL      6589--REDEF
F$DCB.FSN#
      6566**DCL      6566--REDEF    6566--REDEF    6567--REDEF
F$DCB.HEADER$
      6572**DCL      6572--REDEF
F$DCB.IXTNSIZE#
      6570**DCL      6570--REDEF
F$DCB.LASTSTA$
      6559**DCL      6559--REDEF
F$DCB.LVL
      6585**DCL      6585--REDEF
F$DCB.NAME#.C
      6560**DCL      6560--REDEF
F$DCB.NOEOF
      6582**DCL      6582--REDEF
F$DCB.NRECS#
PL6.E3A0      #002=VNS$XCON File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:30 Page:513  
      6571**DCL      6571--REDEF
F$DCB.NRECX
      6590**DCL      6590--REDEF
F$DCB.OHDR
      6582**DCL      6582--REDEF
F$DCB.ORG#
      6565**DCL      6565--REDEF
F$DCB.PRECNO
      6588**DCL      6588--REDEF
F$DCB.RCSZ
      6594**DCL      6594--REDEF
F$DCB.RES#
      6561**DCL      6561--REDEF
F$DCB.SETX
      6573**DCL      6573--REDEF
F$DCB.TAB$
      6573**DCL      6573--REDEF
F$DCB.TDA
      6587**DCL      6588--REDEF
F$DCB.WSN#
      6561**DCL      6561--REDEF
M$CLOSE
      5499**DCL-ENT  6878--CALL     6884--CALL     6890--CALL     6896--CALL     6902--CALL     6908--CALL
      6914--CALL
M$EDIT
      6729**DCL      6899--IF       6901>>ASSIGN
M$MAIL_COMGROUP_NUM
      6306**DCL      6911--IF       6913>>ASSIGN
M$MAIL_FILE_NUM
      6298**DCL      6893--IF       6895>>ASSIGN
M$ME_NUM
      6310**DCL      6875--IF       6877>>ASSIGN
M$NODE_NUM
      6315**DCL      6905--IF       6907>>ASSIGN
M$SI_NUM
      6314**DCL      6881--IF       6883>>ASSIGN
PL6.E3A0      #002=VNS$XCON File=VNS$SEND.:VMB6TSI                               WED 08/20/97 15:30 Page:514  
M$WORK_NUM
      6304**DCL      6887--IF       6889>>ASSIGN
M$XCON
      5554**DCL-ENT  6867--CALL
X$STRING.SIZ
      6233**DCL      6234--IMP-SIZ

PL6.E3A0      #003=VNS$BREAK File=VNS$SEND.:VMB6TSI                              WED 08/20/97 15:30 Page:515  
     3128        1        /*T***********************************************************/
     3129        2        /*T*                                                         */
     3130        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     3131        4        /*T*                                                         */
     3132        5        /*T***********************************************************/
     3133        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     3134        7        /*F*
     3135        8            NAME: VNS$BREAK
     3136        9            PURPOSE: To process breaks.
     3137       10            DESCRIPTION:
     3138       11                SEND can't use XUR's break routine, but it needs similar logic
     3139       12                to defer breaks around processes that can only be interrupted
     3140       13                to abort SEND.  This is done via four procedures:
     3141       14
     3142       15                VNS$BREAK - the ASYNC routine for break events.
     3143       16                    Issues the break message if breaks aren't deferred,
     3144       17                    otherwise sets a flag to indicate a pending break.
     3145       18                Does _not_ reset break count, so 4 breaks while inhibited gets
     3146       19                the user a !! prompt, to allow a QUIT response to cancel SEND.
     3147       20                VNS$BREAK_DISABLE - called at start of critical process.
     3148       21                    Increments a counter which, if nonzero, indicates breaks
     3149       22                    are defered.  (A count is used instead of a flag so that
     3150       23                    nested calls can be handled.)
     3151       24                VNS$BREAK_ENABLE - called at end of critical processes.
     3152       25                    Decrements the deferal count, and, if zero, processes a
     3153       26                    pending break, if any.
     3154       27                VNS$BREAK_PROCESS - routine to issue break message.
     3155       28                    Common logic for VNS$BREAK and VNS$BREAK_ENABLE to issue
     3156       29                    a break message and either continue or unwind.
     3157       30        */
     3158       31        VNS$BREAK: PROC ASYNC;
     3159       32
     3160       33    1   DCL VNS_BREAK BIT(1) STATIC SYMDEF INIT('0'B);
     3161       34    1   DCL VNS_BREAK_INHIBIT SBIN STATIC SYMDEF INIT(0);
     3162       35
     3163       36    1   DCL VNS$BREAK_PROCESS ENTRY(1);
     3164       37
PL6.E3A0      #003=VNS$BREAK File=VNS$SEND.:VMB6TSI                              WED 08/20/97 15:30 Page:516  
     3165       38    2       DO INHIBIT;
     3166       39    2           IF VNS_BREAK_INHIBIT > 0 OR VNS_BREAK
     3167       40    2           THEN        /* Breaks inhibited, wait 'til later to process */
     3168       41    2               RETURN;
     3169       42    2           VNS_BREAK = '1'B;
     3170       43    2       END;
     3171       44    1       CALL VNS$BREAK_PROCESS('1'B);
     3172       45    1       RETURN;
     3173       46
     3174       47    1   END VNS$BREAK;
     3175       48        %EOD;

PL6.E3A0      #003=VNS$BREAK File=VNS$SEND.:VMB6TSI                              WED 08/20/97 15:30 Page:517  
      No diagnostics issued in procedure VNS$BREAK.

   Procedure VNS$BREAK requires 14 words for executable code.
   Procedure VNS$BREAK requires 4 words of local(AUTO) storage.

PL6.E3A0      #003=VNS$BREAK File=VNS$SEND.:VMB6TSI                              WED 08/20/97 15:30 Page:518  

 Object Unit name= VNS$BREAK                                  File name= VNS$SEND.:VMB6TOU
 UTS= AUG 20 '97 15:30:43.24 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Data  even  none     2      2  VNS$BREAK
    1   Proc  even  none    14     16  VNS$BREAK
    2  RoData even  none     3      3  VNS$BREAK

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes     Async       0  VNS$BREAK

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
    0      0  VNS_BREAK                          0      1  VNS_BREAK_INHIBIT

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       1 VNS$BREAK_PROCESS
                       nStd      0 X66_AAUTO
                       nStd      0 X66_AARET
PL6.E3A0      #003=VNS$BREAK File=VNS$SEND.:VMB6TSI                              WED 08/20/97 15:30 Page:519  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #003=VNS$BREAK File=VNS$SEND.:VMB6TSI                              WED 08/20/97 15:30 Page:520  


     3128        1        /*T***********************************************************/
     3129        2        /*T*                                                         */
     3130        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     3131        4        /*T*                                                         */
     3132        5        /*T***********************************************************/
     3133        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     3134        7        /*F*
     3135        8            NAME: VNS$BREAK
     3136        9            PURPOSE: To process breaks.
     3137       10            DESCRIPTION:
     3138       11                SEND can't use XUR's break routine, but it needs similar logic
     3139       12                to defer breaks around processes that can only be interrupted
     3140       13                to abort SEND.  This is done via four procedures:
     3141       14
     3142       15                VNS$BREAK - the ASYNC routine for break events.
     3143       16                    Issues the break message if breaks aren't deferred,
     3144       17                    otherwise sets a flag to indicate a pending break.
     3145       18                Does _not_ reset break count, so 4 breaks while inhibited gets
     3146       19                the user a !! prompt, to allow a QUIT response to cancel SEND.
     3147       20                VNS$BREAK_DISABLE - called at start of critical process.
     3148       21                    Increments a counter which, if nonzero, indicates breaks
     3149       22                    are defered.  (A count is used instead of a flag so that
     3150       23                    nested calls can be handled.)
     3151       24                VNS$BREAK_ENABLE - called at end of critical processes.
     3152       25                    Decrements the deferal count, and, if zero, processes a
     3153       26                    pending break, if any.
     3154       27                VNS$BREAK_PROCESS - routine to issue break message.
     3155       28                    Common logic for VNS$BREAK and VNS$BREAK_ENABLE to issue
     3156       29                    a break message and either continue or unwind.
     3157       30        */
     3158       31        VNS$BREAK: PROC ASYNC;

     31  1 000000   000000 700200 xent  VNS$BREAK    TSX0  ! X66_AAUTO
         1 000001   000004 000000                    ZERO    4,0

     3159       32
PL6.E3A0      #003=VNS$BREAK File=VNS$SEND.:VMB6TSI                              WED 08/20/97 15:30 Page:521  
     3160       33    1   DCL VNS_BREAK BIT(1) STATIC SYMDEF INIT('0'B);
     3161       34    1   DCL VNS_BREAK_INHIBIT SBIN STATIC SYMDEF INIT(0);
     3162       35
     3163       36    1   DCL VNS$BREAK_PROCESS ENTRY(1);
     3164       37
     3165       38    2       DO INHIBIT;

     3166       39    2           IF VNS_BREAK_INHIBIT > 0 OR VNS_BREAK

     39  1 000002   000001 235200 0                  LDA   ! VNS_BREAK_INHIBIT
         1 000003   000006 605600 1                  TPNZ  ! s:41
         1 000004   000000 234200 0                  SZN   ! VNS_BREAK
         1 000005   000007 605200 1                  TPL   ! s:42

     3167       40    2           THEN        /* Breaks inhibited, wait 'til later to process */
     3168       41    2               RETURN;

     41  1 000006   000000 702200 xent               TSX2  ! X66_AARET

     3169       42    2           VNS_BREAK = '1'B;

     42  1 000007   400000 236203                    LDQ   ! -131072,DU
         1 000010   000000 756200 0                  STQ   ! VNS_BREAK

     3170       43    2       END;

     3171       44    1       CALL VNS$BREAK_PROCESS('1'B);

     44  1 000011   000002 630400 2                  EPPR0   2
         1 000012   000000 631400 2                  EPPR1   0
         1 000013   000000 701000 xent               TSX1    VNS$BREAK_PROCESS
         1 000014   000000 011000                    NOP     0

     3172       45    1       RETURN;

     45  1 000015   000000 702200 xent               TSX2  ! X66_AARET

PL6.E3A0      #003=VNS$BREAK File=VNS$SEND.:VMB6TSI                              WED 08/20/97 15:30 Page:522  
VNS_BREAK
 Sect OctLoc
   0     000   0***** ******                                                    ....

VNS_BREAK_INHIBIT
 Sect OctLoc
   0     001   000000 000000                                                    ....

(unnamed)
 Sect OctLoc
   2     000   000001 000000   400000 000000   000001 006000                    ............
     3173       46
     3174       47    1   END VNS$BREAK;
     3175       48        %EOD;

PL6.E3A0      #003=VNS$BREAK File=VNS$SEND.:VMB6TSI                              WED 08/20/97 15:30 Page:523  
      No diagnostics issued in procedure VNS$BREAK.
PL6.E3A0      #003=VNS$BREAK File=VNS$SEND.:VMB6TSI                              WED 08/20/97 15:30 Page:524  

 **** Variables and constants ****

  ****  Section 000  Data  VNS$BREAK

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/b BIT         r     1 VNS_BREAK                  1-0-0/w SBIN        r     1 VNS_BREAK_INHIBIT


   Procedure VNS$BREAK requires 14 words for executable code.
   Procedure VNS$BREAK requires 4 words of local(AUTO) storage.
PL6.E3A0      #003=VNS$BREAK File=VNS$SEND.:VMB6TSI                              WED 08/20/97 15:30 Page:525  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=VNS$BREAK File=VNS$SEND.:VMB6TSI                              WED 08/20/97 15:30 Page:526  
          MINI XREF LISTING

VNS$BREAK_PROCESS
        36**DCL-ENT    44--CALL
VNS_BREAK
        33**DCL        39>>IF         42<<ASSIGN
VNS_BREAK_INHIBIT
        34**DCL        39>>IF

PL6.E3A0      #004=VNS$BREAK_DISABLE File=VNS$SEND.:VMB6TSI                      WED 08/20/97 15:30 Page:527  
     3176        1        /*T***********************************************************/
     3177        2        /*T*                                                         */
     3178        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     3179        4        /*T*                                                         */
     3180        5        /*T***********************************************************/
     3181        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     3182        7        /*F*
     3183        8            NAME: VNS$BREAK_DISABLE
     3184        9            PURPOSE: To suspend break processing during critical actions.
     3185       10        */
     3186       11        /*F*
     3187       12            NAME: VNS$BREAK_ENABLE
     3188       13            PURPOSE: To process breaks suspended for critical actions.
     3189       14        */
     3190       15        VNS$BREAK_DISABLE: PROC;
     3191       16
     3192       17    1   DCL VNS_BREAK BIT(1) SYMREF;
     3193       18    1   DCL VNS_BREAK_INHIBIT SBIN SYMREF;
     3194       19
     3195       20    1   DCL VNS$BREAK_PROCESS ENTRY(1);
     3196       21
     3197       22    2       DO INHIBIT;
     3198       23    2           VNS_BREAK_INHIBIT = VNS_BREAK_INHIBIT + 1;
     3199       24    2           RETURN;
     3200       25    2       END;
     3201       26
     3202       27    1   VNS$BREAK_ENABLE: ENTRY;
     3203       28
     3204       29    2       DO INHIBIT;
     3205       30    2           IF VNS_BREAK_INHIBIT > 0
     3206       31    2           THEN
     3207       32    2               VNS_BREAK_INHIBIT = VNS_BREAK_INHIBIT - 1;
     3208       33    2           IF VNS_BREAK_INHIBIT > 0 OR NOT VNS_BREAK
     3209       34    2           THEN
     3210       35    2               RETURN;
     3211       36    2       END;
     3212       37    1       CALL VNS$BREAK_PROCESS('0'B);
PL6.E3A0      #004=VNS$BREAK_DISABLE File=VNS$SEND.:VMB6TSI                      WED 08/20/97 15:30 Page:528  
     3213       38    1       RETURN;
     3214       39
     3215       40    1   END VNS$BREAK_DISABLE;
     3216       41        %EOD;

PL6.E3A0      #004=VNS$BREAK_DISABLE File=VNS$SEND.:VMB6TSI                      WED 08/20/97 15:30 Page:529  
      No diagnostics issued in procedure VNS$BREAK_DISABLE.

   Procedure VNS$BREAK_DISABLE requires 21 words for executable code.
   Procedure VNS$BREAK_DISABLE requires 4 words of local(AUTO) storage.

PL6.E3A0      #004=VNS$BREAK_DISABLE File=VNS$SEND.:VMB6TSI                      WED 08/20/97 15:30 Page:530  

 Object Unit name= VNS$BREAK_DISABLE                          File name= VNS$SEND.:VMB6TOU
 UTS= AUG 20 '97 15:30:44.96 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none    21     25  VNS$BREAK_DISABLE
    1  RoData even  none     3      3  VNS$BREAK_DISABLE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes            yes      Std        0  VNS$BREAK_DISABLE
     0      5                  yes      Std        0  VNS$BREAK_ENABLE

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       1 VNS$BREAK_PROCESS
                       nStd      0 X66_AUTO_0
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     VNS_BREAK                             VNS_BREAK_INHIBIT
PL6.E3A0      #004=VNS$BREAK_DISABLE File=VNS$SEND.:VMB6TSI                      WED 08/20/97 15:30 Page:531  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #004=VNS$BREAK_DISABLE File=VNS$SEND.:VMB6TSI                      WED 08/20/97 15:30 Page:532  


     3176        1        /*T***********************************************************/
     3177        2        /*T*                                                         */
     3178        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     3179        4        /*T*                                                         */
     3180        5        /*T***********************************************************/
     3181        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     3182        7        /*F*
     3183        8            NAME: VNS$BREAK_DISABLE
     3184        9            PURPOSE: To suspend break processing during critical actions.
     3185       10        */
     3186       11        /*F*
     3187       12            NAME: VNS$BREAK_ENABLE
     3188       13            PURPOSE: To process breaks suspended for critical actions.
     3189       14        */
     3190       15        VNS$BREAK_DISABLE: PROC;

     15  0 000000   000000 700200 xent  VNS$BREAK_D* TSX0  ! X66_AUTO_0
         0 000001   000004 000000                    ZERO    4,0

     3191       16
     3192       17    1   DCL VNS_BREAK BIT(1) SYMREF;
     3193       18    1   DCL VNS_BREAK_INHIBIT SBIN SYMREF;
     3194       19
     3195       20    1   DCL VNS$BREAK_PROCESS ENTRY(1);
     3196       21
     3197       22    2       DO INHIBIT;

     3198       23    2           VNS_BREAK_INHIBIT = VNS_BREAK_INHIBIT + 1;

     23  0 000002   000000 054200 xsym               AOS   ! VNS_BREAK_INHIBIT

     3199       24    2           RETURN;

     24  0 000003   000000 702200 xent               TSX2  ! X66_ARET

     3200       25    2       END;
PL6.E3A0      #004=VNS$BREAK_DISABLE File=VNS$SEND.:VMB6TSI                      WED 08/20/97 15:30 Page:533  

     25  0 000004   000007 710000 0                  TRA     s:30

     3201       26
     3202       27    1   VNS$BREAK_ENABLE: ENTRY;

     27  0 000005   000000 700200 xent  VNS$BREAK_E* TSX0  ! X66_AUTO_0
         0 000006   000004 000000                    ZERO    4,0

     3203       28
     3204       29    2       DO INHIBIT;

     3205       30    2           IF VNS_BREAK_INHIBIT > 0

     30  0 000007   000000 235200 xsym               LDA   ! VNS_BREAK_INHIBIT
         0 000010   000013 604600 0                  TMOZ  ! s:33

     3206       31    2           THEN
     3207       32    2               VNS_BREAK_INHIBIT = VNS_BREAK_INHIBIT - 1;

     32  0 000011   000001 336207                    LCQ   ! 1,DL
         0 000012   000000 056200 xsym               ASQ   ! VNS_BREAK_INHIBIT

     3208       33    2           IF VNS_BREAK_INHIBIT > 0 OR NOT VNS_BREAK

     33  0 000013   000000 235200 xsym               LDA   ! VNS_BREAK_INHIBIT
         0 000014   000017 605600 0                  TPNZ  ! s:35
         0 000015   000000 234200 xsym               SZN   ! VNS_BREAK
         0 000016   000020 604200 0                  TMI   ! s:37

     3209       34    2           THEN
     3210       35    2               RETURN;

     35  0 000017   000000 702200 xent               TSX2  ! X66_ARET

     3211       36    2       END;

PL6.E3A0      #004=VNS$BREAK_DISABLE File=VNS$SEND.:VMB6TSI                      WED 08/20/97 15:30 Page:534  
     3212       37    1       CALL VNS$BREAK_PROCESS('0'B);

     37  0 000020   000002 630400 1                  EPPR0   2
         0 000021   000000 631400 1                  EPPR1   0
         0 000022   000000 701000 xent               TSX1    VNS$BREAK_PROCESS
         0 000023   000000 011000                    NOP     0

     3213       38    1       RETURN;

     38  0 000024   000000 702200 xent               TSX2  ! X66_ARET

(unnamed)
 Sect OctLoc
   1     000   000001 000000   000000 000000   000001 006000                    ............
     3214       39
     3215       40    1   END VNS$BREAK_DISABLE;
     3216       41        %EOD;

PL6.E3A0      #004=VNS$BREAK_DISABLE File=VNS$SEND.:VMB6TSI                      WED 08/20/97 15:30 Page:535  
      No diagnostics issued in procedure VNS$BREAK_DISABLE.
PL6.E3A0      #004=VNS$BREAK_DISABLE File=VNS$SEND.:VMB6TSI                      WED 08/20/97 15:30 Page:536  

 **** Variables and constants ****

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/b BIT         r     1 VNS_BREAK                  0-0-0/w SBIN        r     1 VNS_BREAK_INHIBIT


   Procedure VNS$BREAK_DISABLE requires 21 words for executable code.
   Procedure VNS$BREAK_DISABLE requires 4 words of local(AUTO) storage.
PL6.E3A0      #004=VNS$BREAK_DISABLE File=VNS$SEND.:VMB6TSI                      WED 08/20/97 15:30 Page:537  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=VNS$BREAK_DISABLE File=VNS$SEND.:VMB6TSI                      WED 08/20/97 15:30 Page:538  
          MINI XREF LISTING

VNS$BREAK_PROCESS
        20**DCL-ENT    37--CALL
VNS_BREAK
        17**DCL        33>>IF
VNS_BREAK_INHIBIT
        18**DCL        23<<ASSIGN     23>>ASSIGN     30>>IF         32<<ASSIGN     32>>ASSIGN     33>>IF

PL6.E3A0      #005=VNS$BREAK_PROCESS File=VNS$SEND.:VMB6TSI                      WED 08/20/97 15:30 Page:539  
     3217        1        /*T***********************************************************/
     3218        2        /*T*                                                         */
     3219        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     3220        4        /*T*                                                         */
     3221        5        /*T***********************************************************/
     3222        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     3223        7        VNS$BREAK_PROCESS: PROC (CLRSTK);
     3224        8    1   DCL CLRSTK BIT(1);  /* flag for whether or not M$CLRSTK is needed */
     3225        9
     3226       10        %INCLUDE CP_6;
     3227     5569        %INCLUDE CP_6_SUBS;
     3228     6109            %include VM_MACRO_C;
     3229     7377            %include VM_PERR_C;
     3230     7672
     3231     7673        %INIT_STR(DODCL=YES);
     3232     7696        %FPT_PROMPT (FPTN=CHANGE_PROMPT, STCLASS=SYMREF);
     3233     7724
     3234     7725        %FPT_READ (FPTN=READ_UC_CONST, STCLASS=CONSTANT,DCB=M$UC);
     3235     7764
     3236     7765        %FPT_READ (FPTN=READ_UC,       STCLASS="");
     3237     7804
     3238     7805    1   DCL VNS_REMEMBER(0:1) REMEMBER SYMREF;
     3239     7806    1   DCL VNS_BREAK_TYPE SBIN SYMREF;
     3240     7807    1   DCL VNS_BREAK BIT(1) SYMREF;
     3241     7808
     3242     7809    1   dcl VECT         vector;
     3243     7810    1   dcl I            sbin;
     3244     7811    1   dcl 1 UC_BUF,
     3245     7812    1         2 COMMAND char(1),
     3246     7813    1         2 *    char(79);
     3247     7814
     3248     7815        %VLP_NAMEV( FPTN=VN_BREAK_PROMPT, STCLASS=SYMREF );
     3249     7822        %VLP_NAMEV( FPTN=VN_QUIT_OR_CONT, STCLASS=SYMREF );
     3250     7829
     3251     7830        %VLP_ERRCODE( FPTN=E_BREAK_PROMPT, FCG="VN",MID=S, STCLASS=CONSTANT,
     3252     7831                      ERR#=%E$BREAK_PROMPT);
     3253     7876        /*E* ERROR:   VNS-E$BREAK_PROMPT-0
PL6.E3A0      #005=VNS$BREAK_PROCESS File=VNS$SEND.:VMB6TSI                      WED 08/20/97 15:30 Page:540  
     3254     7877             MESSAGE:Enter C to continue, Q to Quit:
     3255     7878        */
     3256     7879              %VLP_ERRCODE( FPTN=E_QUIT_OR_CONT, FCG="VN",MID=S, STCLASS=CONSTANT,
     3257     7880              ERR#=%E$QUIT_OR_CONT);
     3258     7925        /*E* ERROR:   VNS-E$QUIT_OR_CONT-0
     3259     7926             MESSAGE:CcQq
     3260     7927        */
     3261     7928
     3262     7929
     3263     7930              %INIT_STR( STR=VN_BREAK_PROMPT, CODE=E_BREAK_PROMPT, TEST=YES);
     3264     7953            %INIT_STR( STR=VN_QUIT_OR_CONT, CODE=E_QUIT_OR_CONT, TEST=YES);
     3265     7976
     3266     7977    1       READ_UC     = READ_UC_CONST;
     3267     7978    1       READ_UC.V_  = vector(READ_UC.V);
     3268     7979    1       READ_UC.BUF_ = vector(UC_BUF);
     3269     7980    1       VECT = CHANGE_PROMPT.PROMPT_;
     3270     7981    1       CHANGE_PROMPT.PROMPT_ = vector(VN_BREAK_PROMPT.NAME#);
     3271     7982    1       CALL M$PROMPT (CHANGE_PROMPT);
     3272     7983    2       DO WHILE ('1'B);
     3273     7984    2           CALL M$READ (READ_UC);
     3274     7985    3           call index(I,UC_BUF.COMMAND,VN_QUIT_OR_CONT.NAME#) whenreturn do;
     3275     7986    3               CHANGE_PROMPT.PROMPT_ = VECT;
     3276     7987    3               call M$PROMPT (CHANGE_PROMPT);
     3277     7988    4               do inhibit;
     3278     7989    4                   VNS_BREAK = %NO#;
     3279     7990    5                   if I < 2 then do;  /**   'C' or 'c' entered  **/
     3280     7991    5                       return;
     3281     7992    5                   end;
     3282     7993    5                   else do;      /**   'Q' or 'q' entered  **/
     3283     7994    5                       if CLRSTK
     3284     7995    5                       then      /**   called from VNS$BREAK  **/
     3285     7996    5                           call M$CLRSTK;
     3286     7997    5                       unwind to VNS_REMEMBER (VNS_BREAK_TYPE);
     3287     7998    5                   end;
     3288     7999    4               end; /**  Of inhibit  **/
     3289     8000    3           end; /**  Of whenreturn  **/
     3290     8001    2       END;
PL6.E3A0      #005=VNS$BREAK_PROCESS File=VNS$SEND.:VMB6TSI                      WED 08/20/97 15:30 Page:541  
     3291     8002    1   END VNS$BREAK_PROCESS;
     3292     8003        %EOD;

PL6.E3A0      #005=VNS$BREAK_PROCESS File=VNS$SEND.:VMB6TSI                      WED 08/20/97 15:30 Page:542  
--  Include file information  --

   VM_PERR_C.:VMB6TOU  is referenced.
   VM_MACRO_C.:VMB6TOU  is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure VNS$BREAK_PROCESS.

   Procedure VNS$BREAK_PROCESS requires 82 words for executable code.
   Procedure VNS$BREAK_PROCESS requires 44 words of local(AUTO) storage.

PL6.E3A0      #005=VNS$BREAK_PROCESS File=VNS$SEND.:VMB6TSI                      WED 08/20/97 15:30 Page:543  

 Object Unit name= VNS$BREAK_PROCESS                          File name= VNS$SEND.:VMB6TOU
 UTS= AUG 20 '97 15:30:46.76 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  RoData even  UTS     16     20  VNS$BREAK_PROCESS
    2   Proc  even  none    82    122  VNS$BREAK_PROCESS
    3  RoData even  none    10     12  VNS$BREAK_PROCESS

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes            yes      Std        1  VNS$BREAK_PROCESS

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       3 VMD$ERRMSG
                       nStd      0 X66_AUTO_1
                       nStd      0 X66_ARET
                       nStd      0 X66_AUNWIND
PL6.E3A0      #005=VNS$BREAK_PROCESS File=VNS$SEND.:VMB6TSI                      WED 08/20/97 15:30 Page:544  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  CHANGE_PROMPT                         VNS_REMEMBER
     VNS_BREAK_TYPE                        VNS_BREAK                             VN_BREAK_PROMPT
     VN_QUIT_OR_CONT

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #005=VNS$BREAK_PROCESS File=VNS$SEND.:VMB6TSI                      WED 08/20/97 15:30 Page:545  


     3217        1        /*T***********************************************************/
     3218        2        /*T*                                                         */
     3219        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     3220        4        /*T*                                                         */
     3221        5        /*T***********************************************************/
     3222        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     3223        7        VNS$BREAK_PROCESS: PROC (CLRSTK);

      7  2 000000   000000 700200 xent  VNS$BREAK_P* TSX0  ! X66_AUTO_1
         2 000001   000054 000001                    ZERO    44,1

     3224        8    1   DCL CLRSTK BIT(1);  /* flag for whether or not M$CLRSTK is needed */
     3225        9
     3226       10        %INCLUDE CP_6;
     3227     5569        %INCLUDE CP_6_SUBS;
     3228     6109            %include VM_MACRO_C;
     3229     7377            %include VM_PERR_C;
     3230     7672
     3231     7673        %INIT_STR(DODCL=YES);
     3232     7696        %FPT_PROMPT (FPTN=CHANGE_PROMPT, STCLASS=SYMREF);
     3233     7724
     3234     7725        %FPT_READ (FPTN=READ_UC_CONST, STCLASS=CONSTANT,DCB=M$UC);
     3235     7764
     3236     7765        %FPT_READ (FPTN=READ_UC,       STCLASS="");
     3237     7804
     3238     7805    1   DCL VNS_REMEMBER(0:1) REMEMBER SYMREF;
     3239     7806    1   DCL VNS_BREAK_TYPE SBIN SYMREF;
     3240     7807    1   DCL VNS_BREAK BIT(1) SYMREF;
     3241     7808
     3242     7809    1   dcl VECT         vector;
     3243     7810    1   dcl I            sbin;
     3244     7811    1   dcl 1 UC_BUF,
     3245     7812    1         2 COMMAND char(1),
     3246     7813    1         2 *    char(79);
     3247     7814
     3248     7815        %VLP_NAMEV( FPTN=VN_BREAK_PROMPT, STCLASS=SYMREF );
PL6.E3A0      #005=VNS$BREAK_PROCESS File=VNS$SEND.:VMB6TSI                      WED 08/20/97 15:30 Page:546  
     3249     7822        %VLP_NAMEV( FPTN=VN_QUIT_OR_CONT, STCLASS=SYMREF );
     3250     7829
     3251     7830        %VLP_ERRCODE( FPTN=E_BREAK_PROMPT, FCG="VN",MID=S, STCLASS=CONSTANT,
     3252     7831                      ERR#=%E$BREAK_PROMPT);
     3253     7876        /*E* ERROR:   VNS-E$BREAK_PROMPT-0
     3254     7877             MESSAGE:Enter C to continue, Q to Quit:
     3255     7878        */
     3256     7879              %VLP_ERRCODE( FPTN=E_QUIT_OR_CONT, FCG="VN",MID=S, STCLASS=CONSTANT,
     3257     7880              ERR#=%E$QUIT_OR_CONT);
     3258     7925        /*E* ERROR:   VNS-E$QUIT_OR_CONT-0
     3259     7926             MESSAGE:CcQq
     3260     7927        */
     3261     7928
     3262     7929
     3263     7930              %INIT_STR( STR=VN_BREAK_PROMPT, CODE=E_BREAK_PROMPT, TEST=YES);

   7937  2 000002   000000 236000 xsym               LDQ     VN_BREAK_PROMPT
         2 000003   000033 772000                    QRL     27
         2 000004   000000 620006                    EAX0    0,QL
         2 000005   040000 106440                    CMPC    fill='040'O
         2 000006   000000 200010 xsym               ADSC9   VN_BREAK_PROMPT          cn=1,n=*X0
         2 000007   000000 000001 3                  ADSC9   0                        cn=0,n=1
         2 000010   000015 601000 2                  TNZ     s:7960

   7939  2 000011   000002 630400 3                  EPPR0   2
         2 000012   000001 631400 3                  EPPR1   1
         2 000013   000000 701000 xent               TSX1    VMD$ERRMSG
         2 000014   000000 011000                    NOP     0

     3264     7953            %INIT_STR( STR=VN_QUIT_OR_CONT, CODE=E_QUIT_OR_CONT, TEST=YES);

   7960  2 000015   000000 236000 xsym               LDQ     VN_QUIT_OR_CONT
         2 000016   000033 772000                    QRL     27
         2 000017   000000 620006                    EAX0    0,QL
         2 000020   040000 106440                    CMPC    fill='040'O
         2 000021   000000 200010 xsym               ADSC9   VN_QUIT_OR_CONT          cn=1,n=*X0
         2 000022   000000 000001 3                  ADSC9   0                        cn=0,n=1
PL6.E3A0      #005=VNS$BREAK_PROCESS File=VNS$SEND.:VMB6TSI                      WED 08/20/97 15:30 Page:547  
         2 000023   000030 601000 2                  TNZ     s:7977

   7962  2 000024   000004 630400 3                  EPPR0   4
         2 000025   000001 631400 3                  EPPR1   1
         2 000026   000000 701000 xent               TSX1    VMD$ERRMSG
         2 000027   000000 011000                    NOP     0

     3265     7976
     3266     7977    1       READ_UC     = READ_UC_CONST;

   7977  2 000030   000100 100400                    MLR     fill='000'O
         2 000031   000000 000070 1                  ADSC9   READ_UC_CONST            cn=0,n=56
         2 000032   200004 000070                    ADSC9   READ_UC,,AUTO            cn=0,n=56

     3267     7978    1       READ_UC.V_  = vector(READ_UC.V);

   7978  2 000033   000006 235000 3                  LDA     6
         2 000034   200052 452500                    STP2    UC_BUF+21,,AUTO
         2 000035   200052 236100                    LDQ     UC_BUF+21,,AUTO
         2 000036   000014 036003                    ADLQ    12,DU
         2 000037   200004 757100                    STAQ    READ_UC,,AUTO

     3268     7979    1       READ_UC.BUF_ = vector(UC_BUF);

   7979  2 000040   000007 235000 3                  LDA     7
         2 000041   200052 452500                    STP2    UC_BUF+21,,AUTO
         2 000042   200052 236100                    LDQ     UC_BUF+21,,AUTO
         2 000043   000025 036003                    ADLQ    21,DU
         2 000044   200010 757100                    STAQ    READ_UC+4,,AUTO

     3269     7980    1       VECT = CHANGE_PROMPT.PROMPT_;

   7980  2 000045   000004 237000 xsym               LDAQ    CHANGE_PROMPT+4
         2 000046   200022 757100                    STAQ    VECT,,AUTO

     3270     7981    1       CHANGE_PROMPT.PROMPT_ = vector(VN_BREAK_PROMPT.NAME#);

PL6.E3A0      #005=VNS$BREAK_PROCESS File=VNS$SEND.:VMB6TSI                      WED 08/20/97 15:30 Page:548  
   7981  2 000047   000000 236000 xsym               LDQ     VN_BREAK_PROMPT
         2 000050   000033 772000                    QRL     27
         2 000051   000064 737000                    LLS     52
         2 000052   000140 135007                    SBLA    96,DL
         2 000053   000010 236000 3                  LDQ     8
         2 000054   000004 757000 xsym               STAQ    CHANGE_PROMPT+4

     3271     7982    1       CALL M$PROMPT (CHANGE_PROMPT);

   7982  2 000055   000000 630400 xsym               EPPR0   CHANGE_PROMPT
         2 000056   160002 713400                    CLIMB   57346
         2 000057   401000 401760                    pmme    nvectors=3

     3272     7983    2       DO WHILE ('1'B);

     3273     7984    2           CALL M$READ (READ_UC);

   7984  2 000060   200004 630500                    EPPR0   READ_UC,,AUTO
         2 000061   040000 713400                    CLIMB   read
         2 000062   401400 401760                    pmme    nvectors=4

     3274     7985    3           call index(I,UC_BUF.COMMAND,VN_QUIT_OR_CONT.NAME#) whenreturn do;

   7985  2 000063   000000 236000 xsym               LDQ     VN_QUIT_OR_CONT
         2 000064   000033 772000                    QRL     27
         2 000065   000000 620006                    EAX0    0,QL
         2 000066   000100 124440                    SCM     mask='000'O
         2 000067   000000 200010 xsym               ADSC9   VN_QUIT_OR_CONT          cn=1,n=*X0
         2 000070   200025 000001                    ADSC9   UC_BUF,,AUTO             cn=0,n=1
         2 000071   200024 000100                    ARG     I,,AUTO
         2 000072   000121 606400 2                  TTN     s:8001

     3275     7986    3               CHANGE_PROMPT.PROMPT_ = VECT;

   7986  2 000073   200022 237100                    LDAQ    VECT,,AUTO
         2 000074   000004 757000 xsym               STAQ    CHANGE_PROMPT+4

PL6.E3A0      #005=VNS$BREAK_PROCESS File=VNS$SEND.:VMB6TSI                      WED 08/20/97 15:30 Page:549  
     3276     7987    3               call M$PROMPT (CHANGE_PROMPT);

   7987  2 000075   000000 630400 xsym               EPPR0   CHANGE_PROMPT
         2 000076   160002 713400                    CLIMB   57346
         2 000077   401000 401760                    pmme    nvectors=3

     3277     7988    4               do inhibit;

     3278     7989    4                   VNS_BREAK = %NO#;

   7989  2 000100   000000 450200 xsym               STZ   ! VNS_BREAK

     3279     7990    5                   if I < 2 then do;  /**   'C' or 'c' entered  **/

   7990  2 000101   200024 235300                    LDA   ! I,,AUTO
         2 000102   000002 115207                    CMPA  ! 2,DL
         2 000103   000105 605200 2                  TPL   ! s:7994

     3280     7991    5                       return;

   7991  2 000104   000000 702200 xent               TSX2  ! X66_ARET

     3281     7992    5                   end;
     3282     7993    5                   else do;      /**   'Q' or 'q' entered  **/

     3283     7994    5                       if CLRSTK

   7994  2 000105   200003 470700                    LDP0  ! @CLRSTK,,AUTO
         2 000106   000000 066700                    CMPB  ! filb='0'B
         2 000107   000000 000001                    BDSC    0,,PR0                   by=0,bit=0,n=1
         2 000110   000011 000022 3                  BDSC    9                        by=0,bit=0,n=18
         2 000111   000114 600200 2                  TZE   ! s:7997

     3284     7995    5                       then      /**   called from VNS$BREAK  **/
     3285     7996    5                           call M$CLRSTK;

   7996  2 000112   010013 713600                    CLIMB ! 4107
PL6.E3A0      #005=VNS$BREAK_PROCESS File=VNS$SEND.:VMB6TSI                      WED 08/20/97 15:30 Page:550  
         2 000113   000000 401760                    pmme    nvectors=0

     3286     7997    5                       unwind to VNS_REMEMBER (VNS_BREAK_TYPE);

   7997  2 000114   000000 235200 xsym               LDA   ! VNS_BREAK_TYPE
         2 000115   000001 735200                    ALS   ! 1
         2 000116   000000 237205 xsym               LDAQ  ! VNS_REMEMBER,AL
         2 000117   000000 700200 xent               TSX0  ! X66_AUNWIND
         2 000120   000000 000200                    ZERO    0,128

     3287     7998    5                   end;
     3288     7999    4               end; /**  Of inhibit  **/

     3289     8000    3           end; /**  Of whenreturn  **/

     3290     8001    2       END;

   8001  2 000121   000060 710000 2                  TRA     s:7984

READ_UC_CONST
 Sect OctLoc
   1     000   000005 777640   000010 006000   000000 177640   000000 006014    ................
   1     004   000000 177640   000000 006014   000000 177640   000000 006014    ................
   1     010   000000 400000   000000 000000   000000 000000   000000 000000    ................
   1     014   000000 000000   000000 000000                                    ........

E_BREAK_PROMPT
 Sect OctLoc
   1     016   261623 016210                                                    ....

E_QUIT_OR_CONT
 Sect OctLoc
   1     017   261623 024310                                                    ....

(unnamed)
 Sect OctLoc
   3     000   040040 040040   000002 000000   000016 006000   000000 006000        ............
PL6.E3A0      #005=VNS$BREAK_PROCESS File=VNS$SEND.:VMB6TSI                      WED 08/20/97 15:30 Page:551  
   3     004   000017 006000   000000 006000   000005 777640   000023 777640    ................
   3     010   000000 206000   000000 000000                                    ........
     3291     8002    1   END VNS$BREAK_PROCESS;
     3292     8003        %EOD;

PL6.E3A0      #005=VNS$BREAK_PROCESS File=VNS$SEND.:VMB6TSI                      WED 08/20/97 15:30 Page:552  
--  Include file information  --

   VM_PERR_C.:VMB6TOU  is referenced.
   VM_MACRO_C.:VMB6TOU  is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure VNS$BREAK_PROCESS.
PL6.E3A0      #005=VNS$BREAK_PROCESS File=VNS$SEND.:VMB6TSI                      WED 08/20/97 15:30 Page:553  

 **** Variables and constants ****

  ****  Section 001 RoData VNS$BREAK_PROCESS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    16-0-0/w STRC        r     1 E_BREAK_PROMPT            17-0-0/w STRC        r     1 E_QUIT_OR_CONT
     0-0-0/d STRC(504)   r     1 READ_UC_CONST

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @CLRSTK                   *0-0-0/b BIT         r     1 CLRSTK
    24-0-0/w SBIN        r     1 I                          4-0-0/d STRC(504)   r     1 READ_UC
    25-0-0/c STRC(720)   r     1 UC_BUF                    22-0-0/d VECT        r     1 VECT

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(360)   r     1 CHANGE_PROMPT              0-0-0/b BIT         r     1 VNS_BREAK
     0-0-0/w SBIN        r     1 VNS_BREAK_TYPE
     0-0-0/d REMB        r     1 VNS_REMEMBER(0:1)
     0-0-0/c ASTR(9)     r     1 VN_BREAK_PROMPT            0-0-0/c ASTR(9)     r     1 VN_QUIT_OR_CONT

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0N  NULL        r     1 M$UC

PL6.E3A0      #005=VNS$BREAK_PROCESS File=VNS$SEND.:VMB6TSI                      WED 08/20/97 15:30 Page:554  

   Procedure VNS$BREAK_PROCESS requires 82 words for executable code.
   Procedure VNS$BREAK_PROCESS requires 44 words of local(AUTO) storage.
PL6.E3A0      #005=VNS$BREAK_PROCESS File=VNS$SEND.:VMB6TSI                      WED 08/20/97 15:30 Page:555  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #005=VNS$BREAK_PROCESS File=VNS$SEND.:VMB6TSI                      WED 08/20/97 15:30 Page:556  
          MINI XREF LISTING

CHANGE_PROMPT
      7712**DCL      7982<>CALL     7987<>CALL
CHANGE_PROMPT.PROMPT_
      7718**DCL      7980>>ASSIGN   7981<<ASSIGN   7986<<ASSIGN
CLRSTK
         8**DCL         7--PROC     7994>>IF
E_BREAK_PROMPT
      7843**DCL      7939<>CALL
E_QUIT_OR_CONT
      7892**DCL      7962<>CALL
I
      7810**DCL      7985<<CALLBLT  7990>>IF
M$CLRSTK
      5555**DCL-ENT  7996--CALL
M$PROMPT
      5521**DCL-ENT  7982--CALL     7987--CALL
M$READ
      5498**DCL-ENT  7984--CALL
READ_UC
      7782**DCL      7977<<ASSIGN   7984<>CALL
READ_UC.BUF_
      7784**DCL      7979<<ASSIGN
READ_UC.STATION_
      7785**DCL      7786--REDEF
READ_UC.V
      7786**DCL      7978--ASSIGN
READ_UC.V.DVBYTE.REREAD#
      7797**DCL      7797--REDEF
READ_UC.V.INDX#
      7795**DCL      7795--REDEF
READ_UC.V_
      7782**DCL      7978<<ASSIGN
PL6.E3A0      #005=VNS$BREAK_PROCESS File=VNS$SEND.:VMB6TSI                      WED 08/20/97 15:30 Page:557  
READ_UC_CONST
      7742**DCL      7977>>ASSIGN
READ_UC_CONST.STATION_
      7745**DCL      7746--REDEF
READ_UC_CONST.V
      7746**DCL      7742--DCLINIT
READ_UC_CONST.V.DVBYTE.REREAD#
      7757**DCL      7757--REDEF
READ_UC_CONST.V.INDX#
      7755**DCL      7755--REDEF
UC_BUF
      7811**DCL      7979--ASSIGN
UC_BUF.COMMAND
      7812**DCL      7985>>CALLBLT
VECT
      7809**DCL      7980<<ASSIGN   7986>>ASSIGN
VMD$ERRMSG
      7676**DCL-ENT  7939--CALL     7962--CALL
VNS_BREAK
      7807**DCL      7989<<ASSIGN
VNS_BREAK_TYPE
      7806**DCL      7997>>UNWIND
VNS_REMEMBER
      7805**DCL      7997>>UNWIND
VN_BREAK_PROMPT
      7820**DCL      7939<>CALL
VN_BREAK_PROMPT.L#
      7820**DCL      7820--IMP-SIZ  7937>>IF       7939>>CALL     7981>>ASSIGN
VN_BREAK_PROMPT.NAME#
      7820**DCL      7937>>IF       7981--ASSIGN
VN_QUIT_OR_CONT
      7827**DCL      7962<>CALL
VN_QUIT_OR_CONT.L#
      7827**DCL      7827--IMP-SIZ  7960>>IF       7962>>CALL     7985>>CALLBLT
VN_QUIT_OR_CONT.NAME#
      7827**DCL      7960>>IF       7985>>CALLBLT

PL6.E3A0      #006=VNS$PRE_EXEC File=VNS$SEND.:VMB6TSI                           WED 08/20/97 15:30 Page:558  
     3293        1        /*T***********************************************************/
     3294        2        /*T*                                                         */
     3295        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     3296        4        /*T*                                                         */
     3297        5        /*T***********************************************************/
     3298        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     3299        7        /*F*      NAME: VNS$PRE_EXEC
     3300        8                  PURPOSE: Called by XUR$GETCMD, prior to the execution of a DO
     3301        9                   command, for the purpose of creating *BODY.
     3302       10        */
     3303       11        VNS$PRE_EXEC: PROC(XUG_GETCMD,CMD);
     3304       12        %INCLUDE CP_6;
     3305     5571        %INCLUDE CP_6_SUBS;
     3306     6111        %INCLUDE VM_DATA_R;
     3307     6542        %INCLUDE XU_MACRO_C;
     3308     9648        %INCLUDE XU_SUBS_C;
     3309     9740        %INCLUDE XUR_ENTRY;
     3310     9772
     3311     9773        %B$TCB (STCLASS="BASED(B$TCB$)");
     3312     9776        %B$ALT;
     3313     9784        %XUG_GETCMD (NAME=XUG_GETCMD,STCLASS="");
     3314    10122
     3315    10123    1   DCL CMD SBIN;
     3316    10124    1   DCL VNS$BREAK_DISABLE ENTRY;
     3317    10125    1   DCL VNS$BREAK_ENABLE ENTRY;
     3318    10126    1   DCL VMM$EDIT_MESSAGE_IN ENTRY(4)  ALTRET;
     3319    10127    1   DCL VMM$EDIT_MESSAGE_OUT ENTRY(5) ALTRET;
     3320    10128
     3321    10129    1       IF CMD = %XUG_CMD_DO
     3322    10130    2       THEN DO;
     3323    10131    2           CALL VNS$BREAK_DISABLE;
     3324    10132    2           CALL VMM$EDIT_MESSAGE_OUT (0,0,M$WORK_NUM,%NO#) ALTRET(ERR);
     3325    10133    2           CALL VNS$BREAK_ENABLE;
     3326    10134    2       END;
     3327    10135    1       RETURN;
     3328    10136
     3329    10137    1   ERR:
PL6.E3A0      #006=VNS$PRE_EXEC File=VNS$SEND.:VMB6TSI                           WED 08/20/97 15:30 Page:559  
     3330    10138    1       CALL XUR$ERRMSG (B$TCB.ALT$->B$ALT.ERR, B$TCB.ALT$->B$ALT.DCB#);
     3331    10139    1       CALL VNS$BREAK_ENABLE;
     3332    10140    1       RETURN;
     3333    10141        %EJECT;
PL6.E3A0      #006=VNS$PRE_EXEC File=VNS$SEND.:VMB6TSI                           WED 08/20/97 15:30 Page:560  
     3334    10142        /*F*      NAME: VNS$POST_EXEC
     3335    10143                  PURPOSE: Called by XUR$GETCMD, after processing a DO command,
     3336    10144                        for the purpose of reading in *BODY.
     3337    10145        */
     3338    10146    1   VNS$POST_EXEC: ENTRY (XUG_GETCMD,CMD);
     3339    10147
     3340    10148    1       IF CMD = %XUG_CMD_DO
     3341    10149    2       THEN DO;
     3342    10150    2           CALL VNS$BREAK_DISABLE;
     3343    10151    2           CALL VMM$EDIT_MESSAGE_IN (0,0,M$WORK_NUM) ALTRET(ERR);
     3344    10152    2           CALL VNS$BREAK_ENABLE;
     3345    10153    2       END;
     3346    10154    1       RETURN;
     3347    10155    1   END VNS$PRE_EXEC;

PL6.E3A0      #006=VNS$PRE_EXEC File=VNS$SEND.:VMB6TSI                           WED 08/20/97 15:30 Page:561  
--  Include file information  --

   XUR_ENTRY.:LIB_E05  cannot be made into a system file and is referenced.
   XU_SUBS_C.:LIB_E05  is referenced.
   XU_MACRO_C.:LIB_E05  is referenced.
   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure VNS$PRE_EXEC.

   Procedure VNS$PRE_EXEC requires 48 words for executable code.
   Procedure VNS$PRE_EXEC requires 8 words of local(AUTO) storage.

    No errors detected in file VNS$SEND.:VMB6TSI    .

PL6.E3A0      #006=VNS$PRE_EXEC File=VNS$SEND.:VMB6TSI                           WED 08/20/97 15:30 Page:562  

 Object Unit name= VNS$PRE_EXEC                               File name= VNS$SEND.:VMB6TOU
 UTS= AUG 20 '97 15:30:59.72 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$MAIL_FILE
    2   DCB   even  none     0      0  M$MAIL_CENTRAL
    3   DCB   even  none     0      0  M$MAIL_GLOBAL
    4   DCB   even  none     0      0  M$WORK
    5   DCB   even  none     0      0  M$MAIL_COMGROUP
    6   DCB   even  none     0      0  M$DO
    7   DCB   even  none     0      0  M$LO
    8   DCB   even  none     0      0  M$ME
    9   DCB   even  none     0      0  M$NODE
   10   DCB   even  none     0      0  M$SI
   11   Proc  even  none    48     60  VNS$PRE_EXEC
   12  RoData even  none     8     10  VNS$PRE_EXEC

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    11      0   yes            yes      Std        2  VNS$PRE_EXEC
    11     37                  yes      Std        2  VNS$POST_EXEC
PL6.E3A0      #006=VNS$PRE_EXEC File=VNS$SEND.:VMB6TSI                           WED 08/20/97 15:30 Page:563  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       0 VNS$BREAK_DISABLE
 yes     yes           Std       5 VMM$EDIT_MESSAGE_OUT
         yes           Std       0 VNS$BREAK_ENABLE
 yes     yes           Std       4 VMM$EDIT_MESSAGE_IN
 yes     yes           Std       7 XUR$ERRMSG
                       nStd      0 X66_AUTO_2
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                             r    VM_HEADER$                       r    VM_PROFILE$
r    VM_ADDLIST$                      r    VM_ADDREC$                       r    VM_WORK$
r    VM_SELECT$                       r    VM_PARSEAREA$                    r    VM_INPUT$
r    VM_COPY$                              VM_ENCLLIST$                          VM_ENCLREC$
     VM_HEADER_                            VM_HEADER_INIT_                       VM_PROFILE_
     VM_ADDLIST_                           VM_ADDREC_                            VM_WORK_
     VM_SELECT_                            VM_PARSEAREA_                         VM_INPUT_
     VM_COPY_                              VM_ENCLLIST_                          VM_ENCLREC_
     M$MAIL_FILE                           M$MAIL_CENTRAL                        M$MAIL_GLOBAL
     M$WORK                                M$MAIL_COMGROUP                       M$DO
     M$LO                                  M$ME                                  M$NODE
     M$SI                                  M$MAIL_FILE_NUM                       M$MAIL_CENTRAL_NUM
     M$MAIL_GLOBAL_NUM                     M$WORK_NUM                            M$MAIL_COMGROUP_NUM
     M$DO_NUM                              M$ME_NUM                              M$LO_NUM
     M$SI_NUM                              M$NODE_NUM                       r    B$JIT$
r    B$TCB$                                VM_MAIL_ACCT                          VM_NAME_MAP_NAME
     ERRMSG_FID                            VM_SEND_FILE_NAME                     VM_FORWARD_FILE_NAME
     VM_FORWARD_ENCL_NAME                  VM_FORWARD_FILE_PASS                  VM_MAILCG_NAME
     VM_SITENAME                           VM_MAILCG_SETSTA
PL6.E3A0      #006=VNS$PRE_EXEC File=VNS$SEND.:VMB6TSI                           WED 08/20/97 15:30 Page:564  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #006=VNS$PRE_EXEC File=VNS$SEND.:VMB6TSI                           WED 08/20/97 15:30 Page:565  


     3293        1        /*T***********************************************************/
     3294        2        /*T*                                                         */
     3295        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     3296        4        /*T*                                                         */
     3297        5        /*T***********************************************************/
     3298        6        /*X* DMC,PLM=4,IND=4,CTI=2,DTI=0,ENI=0,ECI=0,CSI=0,DCI=4 */
     3299        7        /*F*      NAME: VNS$PRE_EXEC
     3300        8                  PURPOSE: Called by XUR$GETCMD, prior to the execution of a DO
     3301        9                   command, for the purpose of creating *BODY.
     3302       10        */
     3303       11        VNS$PRE_EXEC: PROC(XUG_GETCMD,CMD);

     11 11 000000   000000 700200 xent  VNS$PRE_EXEC TSX0  ! X66_AUTO_2
        11 000001   000010 000002                    ZERO    8,2

     3304       12        %INCLUDE CP_6;
     3305     5571        %INCLUDE CP_6_SUBS;
     3306     6111        %INCLUDE VM_DATA_R;
     3307     6542        %INCLUDE XU_MACRO_C;
     3308     9648        %INCLUDE XU_SUBS_C;
     3309     9740        %INCLUDE XUR_ENTRY;
     3310     9772
     3311     9773        %B$TCB (STCLASS="BASED(B$TCB$)");
     3312     9776        %B$ALT;
     3313     9784        %XUG_GETCMD (NAME=XUG_GETCMD,STCLASS="");
     3314    10122
     3315    10123    1   DCL CMD SBIN;
     3316    10124    1   DCL VNS$BREAK_DISABLE ENTRY;
     3317    10125    1   DCL VNS$BREAK_ENABLE ENTRY;
     3318    10126    1   DCL VMM$EDIT_MESSAGE_IN ENTRY(4)  ALTRET;
     3319    10127    1   DCL VMM$EDIT_MESSAGE_OUT ENTRY(5) ALTRET;
     3320    10128
     3321    10129    1       IF CMD = %XUG_CMD_DO

  10129 11 000002   200004 470500                    LDP0    @CMD,,AUTO
        11 000003   000000 235100                    LDA     0,,PR0
PL6.E3A0      #006=VNS$PRE_EXEC File=VNS$SEND.:VMB6TSI                           WED 08/20/97 15:30 Page:566  
        11 000004   000002 115007                    CMPA    2,DL
        11 000005   000020 601000 11                 TNZ     s:10135

     3322    10130    2       THEN DO;

     3323    10131    2           CALL VNS$BREAK_DISABLE;

  10131 11 000006   000000 631400 12                 EPPR1   0
        11 000007   000000 701000 xent               TSX1    VNS$BREAK_DISABLE
        11 000010   000000 011000                    NOP     0

     3324    10132    2           CALL VMM$EDIT_MESSAGE_OUT (0,0,M$WORK_NUM,%NO#) ALTRET(ERR);

  10132 11 000011   000002 630400 12                 EPPR0   2
        11 000012   000001 631400 12                 EPPR1   1
        11 000013   000000 701000 xent               TSX1    VMM$EDIT_MESSAGE_OUT
        11 000014   000021 702000 11                 TSX2    ERR

     3325    10133    2           CALL VNS$BREAK_ENABLE;

  10133 11 000015   000000 631400 12                 EPPR1   0
        11 000016   000000 701000 xent               TSX1    VNS$BREAK_ENABLE
        11 000017   000000 011000                    NOP     0

     3326    10134    2       END;

     3327    10135    1       RETURN;

  10135 11 000020   000000 702200 xent               TSX2  ! X66_ARET

     3328    10136
     3329    10137    1   ERR:
     3330    10138    1       CALL XUR$ERRMSG (B$TCB.ALT$->B$ALT.ERR, B$TCB.ALT$->B$ALT.DCB#);

  10138 11 000021   000000 470400 xsym  ERR          LDP0    B$TCB$
        11 000022   000000 471500                    LDP1    0,,PR0
        11 000023   100101 633500                    EPPR3   65,,PR1
PL6.E3A0      #006=VNS$PRE_EXEC File=VNS$SEND.:VMB6TSI                           WED 08/20/97 15:30 Page:567  
        11 000024   200007 453500                    STP3    @CMD+3,,AUTO
        11 000025   100102 634500                    EPPR4   66,,PR1
        11 000026   200006 454500                    STP4    @CMD+2,,AUTO
        11 000027   200006 630500                    EPPR0   @CMD+2,,AUTO
        11 000030   000006 631400 12                 EPPR1   6
        11 000031   000000 701000 xent               TSX1    XUR$ERRMSG
        11 000032   000000 011000                    NOP     0

     3331    10139    1       CALL VNS$BREAK_ENABLE;

  10139 11 000033   000000 631400 12                 EPPR1   0
        11 000034   000000 701000 xent               TSX1    VNS$BREAK_ENABLE
        11 000035   000000 011000                    NOP     0

     3332    10140    1       RETURN;

  10140 11 000036   000000 702200 xent               TSX2  ! X66_ARET

     3333    10141        %EJECT;
PL6.E3A0      #006=VNS$PRE_EXEC File=VNS$SEND.:VMB6TSI                           WED 08/20/97 15:30 Page:568  
     3334    10142        /*F*      NAME: VNS$POST_EXEC
     3335    10143                  PURPOSE: Called by XUR$GETCMD, after processing a DO command,
     3336    10144                        for the purpose of reading in *BODY.
     3337    10145        */
     3338    10146    1   VNS$POST_EXEC: ENTRY (XUG_GETCMD,CMD);

  10146 11 000037   000000 700200 xent  VNS$POST_EX* TSX0  ! X66_AUTO_2
        11 000040   000010 000002                    ZERO    8,2

     3339    10147
     3340    10148    1       IF CMD = %XUG_CMD_DO

  10148 11 000041   200004 470500                    LDP0    @CMD,,AUTO
        11 000042   000000 235100                    LDA     0,,PR0
        11 000043   000002 115007                    CMPA    2,DL
        11 000044   000057 601000 11                 TNZ     s:10154

     3341    10149    2       THEN DO;

     3342    10150    2           CALL VNS$BREAK_DISABLE;

  10150 11 000045   000000 631400 12                 EPPR1   0
        11 000046   000000 701000 xent               TSX1    VNS$BREAK_DISABLE
        11 000047   000000 011000                    NOP     0

     3343    10151    2           CALL VMM$EDIT_MESSAGE_IN (0,0,M$WORK_NUM) ALTRET(ERR);

  10151 11 000050   000002 630400 12                 EPPR0   2
        11 000051   000007 631400 12                 EPPR1   7
        11 000052   000000 701000 xent               TSX1    VMM$EDIT_MESSAGE_IN
        11 000053   000021 702000 11                 TSX2    ERR

     3344    10152    2           CALL VNS$BREAK_ENABLE;

  10152 11 000054   000000 631400 12                 EPPR1   0
        11 000055   000000 701000 xent               TSX1    VNS$BREAK_ENABLE
        11 000056   000000 011000                    NOP     0
PL6.E3A0      #006=VNS$PRE_EXEC File=VNS$SEND.:VMB6TSI                           WED 08/20/97 15:30 Page:569  

     3345    10153    2       END;

     3346    10154    1       RETURN;

  10154 11 000057   000000 702200 xent               TSX2  ! X66_ARET

(unnamed)
 Sect OctLoc
  12     000   000000 000000   000004 000000   000000 006000   000000 006000    ................
  12     004   000000 006000   000000 006000   000002 000000   000003 000000    ................
     3347    10155    1   END VNS$PRE_EXEC;

PL6.E3A0      #006=VNS$PRE_EXEC File=VNS$SEND.:VMB6TSI                           WED 08/20/97 15:30 Page:570  
--  Include file information  --

   XUR_ENTRY.:LIB_E05  cannot be made into a system file and is referenced.
   XU_SUBS_C.:LIB_E05  is referenced.
   XU_MACRO_C.:LIB_E05  is referenced.
   B_MACROS_C.:LIB_E05  is referenced.
   VM_DATA_R.:VMB6TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:LIB_E05  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure VNS$PRE_EXEC.
PL6.E3A0      #006=VNS$PRE_EXEC File=VNS$SEND.:VMB6TSI                           WED 08/20/97 15:30 Page:571  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @CMD                       3-0-0/w PTR         r     1 @XUG_GETCMD
    *0-0-0/w SBIN        r     1 CMD                       *0-0-0/d STRC(1512)  r     1 XUG_GETCMD

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR               1 B$JIT$                     0-0-0/w PTR         r     1 B$TCB$
     0-0-0/c ASTR(9)     r     1 ERRMSG_FID                 0-0-0/w UBIN              1 M$DO_NUM
     0-0-0/w UBIN              1 M$LO_NUM                   0-0-0/w UBIN              1 M$MAIL_CENTRAL_NUM
     0-0-0/w UBIN              1 M$MAIL_COMGROUP_NUM        0-0-0/w UBIN              1 M$MAIL_FILE_NUM
     0-0-0/w UBIN              1 M$MAIL_GLOBAL_NUM          0-0-0/w UBIN              1 M$ME_NUM
     0-0-0/w UBIN              1 M$NODE_NUM                 0-0-0/w UBIN              1 M$SI_NUM
     0-0-0/w UBIN        r     1 M$WORK_NUM                 0-0-0/w PTR               1 VM_ADDLIST$
     0-0-0/d VECT              1 VM_ADDLIST_                0-0-0/w PTR               1 VM_ADDREC$
     0-0-0/d VECT              1 VM_ADDREC_                 0-0-0/w PTR               1 VM_COPY$
     0-0-0/d VECT              1 VM_COPY_                   0-0-0/w PTR               1 VM_ENCLLIST$
     0-0-0/d VECT              1 VM_ENCLLIST_               0-0-0/w PTR               1 VM_ENCLREC$
     0-0-0/d VECT              1 VM_ENCLREC_                0-0-0/c STRC(270)         1 VM_FORWARD_ENCL_NAME
     0-0-0/c STRC(270)         1 VM_FORWARD_FILE_NAME       0-0-0/c STRC(72)          1 VM_FORWARD_FILE_PASS
     0-0-0/w PTR               1 VM_HEADER$                 0-0-0/d VECT              1 VM_HEADER_
     0-0-0/d VECT              1 VM_HEADER_INIT_            0-0-0/w PTR               1 VM_INPUT$
     0-0-0/d VECT              1 VM_INPUT_                  0-0-0/c STRC(72)          1 VM_MAILCG_NAME
     0-0-0/w STRC(432)         1 VM_MAILCG_SETSTA           0-0-0/c STRC(72)          1 VM_MAIL_ACCT
     0-0-0/c STRC(54)          1 VM_NAME_MAP_NAME           0-0-0/w PTR               1 VM_PARSEAREA$
     0-0-0/d VECT              1 VM_PARSEAREA_              0-0-0/w PTR               1 VM_PROFILE$
     0-0-0/d VECT              1 VM_PROFILE_                0-0-0/w PTR               1 VM_SELECT$
     0-0-0/d VECT              1 VM_SELECT_                 0-0-0/c STRC(288)         1 VM_SEND_FILE_NAME
     0-0-0/c CHAR(8)           1 VM_SITENAME                0-0-0/w PTR               1 VM_WORK$
PL6.E3A0      #006=VNS$PRE_EXEC File=VNS$SEND.:VMB6TSI                           WED 08/20/97 15:30 Page:572  
     0-0-0/d VECT              1 VM_WORK_

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/w STRC(144)   r     1 B$TCB
     0-0-0N  NULL        r     1 M$DO                       0-0-0N  NULL        r     1 M$LO
     0-0-0N  NULL        r     1 M$MAIL_CENTRAL             0-0-0N  NULL        r     1 M$MAIL_COMGROUP
     0-0-0N  NULL        r     1 M$MAIL_FILE                0-0-0N  NULL        r     1 M$MAIL_GLOBAL
     0-0-0N  NULL        r     1 M$ME                       0-0-0N  NULL        r     1 M$NODE
     0-0-0N  NULL        r     1 M$SI                       0-0-0N  NULL        r     1 M$UC
     0-0-0N  NULL        r     1 M$WORK                     0-0-0/c ASTR(9)     r     1 X$STRING


   Procedure VNS$PRE_EXEC requires 48 words for executable code.
   Procedure VNS$PRE_EXEC requires 8 words of local(AUTO) storage.

    No errors detected in file VNS$SEND.:VMB6TSI    .
PL6.E3A0      #006=VNS$PRE_EXEC File=VNS$SEND.:VMB6TSI                           WED 08/20/97 15:30 Page:573  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #006=VNS$PRE_EXEC File=VNS$SEND.:VMB6TSI                           WED 08/20/97 15:30 Page:574  
          MINI XREF LISTING

B$ALT.CODE
      9778**DCL      9778--REDEF    9779--REDEF    9779--REDEF
B$ALT.DCB#
      9779**DCL     10138<>CALL
B$ALT.ERR
      9779**DCL     10138<>CALL
B$ALT.ERR.ERR#
      9780**DCL      9780--REDEF
B$ALT.EVID
      9779**DCL      9779--REDEF    9779--REDEF
B$TCB.ALT$
      9774**DCL     10138>>CALL    10138>>CALL
B$TCB$
      6319**DCL      9774--IMP-PTR 10138>>CALL    10138>>CALL
CMD
     10123**DCL        11--PROC    10129>>IF      10146--ENTRY   10148>>IF
ERR
     10138**LABEL   10132--CALLALT 10151--CALLALT
ERRMSG_FID.L#
      6387**DCL      6387--IMP-SIZ
M$WORK_NUM
      6304**DCL     10132<>CALL    10151<>CALL
VMM$EDIT_MESSAGE_IN
     10126**DCL-ENT 10151--CALL
VMM$EDIT_MESSAGE_OUT
     10127**DCL-ENT 10132--CALL
VNS$BREAK_DISABLE
     10124**DCL-ENT 10131--CALL    10150--CALL
VNS$BREAK_ENABLE
     10125**DCL-ENT 10133--CALL    10139--CALL    10152--CALL
X$STRING.SIZ
      6233**DCL      6234--IMP-SIZ
PL6.E3A0      #006=VNS$PRE_EXEC File=VNS$SEND.:VMB6TSI                           WED 08/20/97 15:30 Page:575  
XUG_GETCMD
      9797**DCL        11--PROC    10146--ENTRY
XUG_GETCMD.OUT$
      9802**DCL      9808--REDEF
XUR$ERRMSG
      9755**DCL-ENT 10138--CALL
