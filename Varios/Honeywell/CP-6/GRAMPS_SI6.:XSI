/*M* GRAMPS - a program to monitor free granule amounts on a packset */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* DMR,PLM=5,IND=5,CTI=5,SDI=5,MCL=10,CSI=0,ECI=0 */
GRAMPS: PROC MAIN;
 
DCL 1 LIST(0:99),
         2 NAME CHAR(8),
         2 TOT UBIN,
         2 FREE UBIN;
 
DCL LKOUNT UBIN;
 
DCL 1 CHECK(0:99),
         2 NAME CHAR(8),
         2 HALFX BIT(1),
         2 PERCENT BIT(1),
         2 ANALYZE BIT(1),
         2 FREE UBIN;
 
DCL CKOUNT UBIN;
 
DCL INTERVAL UBIN STATIC INIT(1800);    /* M$WAIT INTERVAL TIME IN SECONDS    */
 
DCL INPUT CHAR(256) STATIC;             /* INPUT FOR SI                       */
 
DCL ARCHNAME CHAR(60) STATIC INIT(' ');
DCL KEYIN_BUF CHAR(120) STATIC;
DCL DATE CHAR(10) STATIC;
DCL TIME CHAR(11) STATIC;
DCL DAY CHAR(3) STATIC;
DCL REPS UBIN;
DCL X9 UBIN STATIC;
DCL I SBIN STATIC;
DCL K UBIN STATIC;
DCL NUM UBIN STATIC;
DCL FMDIAG BIT(1) STATIC;
DCL ERR BIT(36) STATIC;
DCL GRANULE UBIN STATIC;
DCL J UBIN STATIC;
DCL NVOL UBIN STATIC;
DCL PSN CHAR(6) STATIC;
DCL MESSAGE CHAR(128) STATIC;
DCL BLK$ PTR STATIC;
DCL XTN$ PTR STATIC;
DCL TOT UBIN STATIC;
DCL TOTF UBIN STATIC;
DCL FREE UBIN STATIC;
DCL FREEVOL(0:18) UBIN STATIC;
DCL SIGNED SBIN STATIC;
DCL XTN50 UBIN STATIC;
DCL XTN90 UBIN STATIC;
DCL XTNDIST(0:18) UBIN STATIC;
DCL MAXGRAN(0:19) UBIN STATIC;
DCL VOLGRAN(0:19) UBIN STATIC;
DCL SETMAX UBIN STATIC;
DCL FGRANS UBIN STATIC;
DCL AGRANS UBIN STATIC;
DCL XTNS UBIN STATIC;
DCL B CHAR(81) STATIC;
DCL 1 BOUT REDEF B,
         2 * CHAR(1),
         2 B CHAR(80);
%INCLUDE FM$MACROS;
%FM$SET(BASED="BASED(F$CFU$)");
%FM$DEV(BASED="BASED(F$CFU$)");
%FM$VOL(BASED="BASED(F$CFU$)");
%FM$CFUX;
%FM$SETU(BASED="BASED(BLK$)");
%FM$VID (BASED=STATIC, FM$VID=VID);
%FM$FIT(FM$FIT=FIT,BASED="REDEF VID,2 *(0:4)UBIN",N=1018);
%FM$GRAN(BASED="REDEF VID",FLINK="FLINK UBIN,2 *(0:1018)");
%FM$GP (FM$GP=VXH,BASED="BASED(XTN$)");
%INCLUDE CP_6;
%F$DCB;
%B$TCB;
%B$ALT;
DCL B$TCB$ PTR SYMREF;
%INCLUDE B_SEGIDS_C;
%INCLUDE B$JIT;
DCL B$JIT$ PTR SYMREF;
%FPT_SAD (FPTN=SAD1, STCLASS=CONSTANT, USERSID=%SPCL5SID, MONSID=%DS1SID);
%FPT_PRIV (AUTH=YES);
%FPT_OPEN (FPTN=OPENDP,
          DCB=M$DP,
          RES='DP',
          SN=OPNSN,
          ASN=DEVICE,
          ACCT=VLP_ACCT,
          FUN=IN);
 
DCL M$LO DCB;
DCL M$MSG DCB;
DCL M$SI DCB;
 
%FPT_WRITE(FPTN=WRITELO,DCB=M$LO,BUF=MESSAGE);
 
%VLP_ACCT;
%VLP_SN (FPTN=OPNSN);
%FPT_READ (FPTN=READDP,
          DCB=M$DP,
          KEY=GRANULE,KEYS=YES,
          BUF=FIT);
 
%FPT_CLOSE (DCB=M$DP,DISP=SCRATCH);
 
%FPT_WAIT(FPTN=WAIT_FPT);
 
%FPT_WRITE(FPTN=WRITEMSG,DCB=M$MSG,BUF=MESSAGE);
%INCLUDE XU_MACRO_C;
DCL X$PARSE ENTRY(1) ALTRET;
DCL COMMAND UBIN SYMREF;
DCL PARSE_WORK               CHAR(1024) STATIC;
%P_PCB(T=INPUT,
         R=COMMAND,
         W=PARSE_WORK,
         WSZ=256,
         N#=256);                       /* PARSE CONTOL BLOCK                 */
%PARSE$SYM(NAME=OUTSYM,
         STCLASS=BASED);                /* FOR SYMBOLS AND DELIM STRINGS      */
%PARSE$OUT(NAME=OUTBLK,
         STCLASS=BASED);                /* FOR OUTPUT BLOCKS                  */
 
%FPT_READ(FPTN=READSI,BUF=INPUT,DCB=M$SI);
%FPT_CLOSE(FPTN=CLOSE,DISP=SAVE,DCB=M$LO);
%FPT_EXIT(FPTN=SPECIAL);
%FPT_READ(FPTN=READMSG,BUF=INPUT,DCB=M$MSG);
%FPT_PFIL(FPTN=BOF,DCB=M$MSG,BOF=YES);
%FPT_PFIL(FPTN=EOF,DCB=M$MSG,BOF=NO);
 
%FPT_KEYIN(FPTN=FPT_KEYIN,
              MESS=KEYIN_BUF,
              REPLY=NIL,
              WSN='LOCAL');
 
%FPT_TIME(FPTN=GET_TIME,DATE=DATE,TIME=TIME,DAY=DAY,DEST=EXT);
DCL FID_ASN CHAR(4) STATIC;
 
DCL FID_RES UBIN(9) STATIC ALIGNED;
 
DCL FID_TEXT CHAR(60) STATIC;
 
%FPT_OPEN(FPTN=OPENCTG,
         STCLASS=STATIC,
         FUN=CREATE,
         EXIST=NEWFILE,
         ACS=SEQUEN,
         CTG=YES,
         ASN=FILE,
         SHARE=ALL,
         NAME=VLP_NAME,
         ACCT=VLP_ACCT,
         PASS=VLP_PASS,
         WSN=VLP_WSN);
%VLP_WSN(FPTN=VLP_WSN);
%VLP_SN(FPTN=VLP_SN);
%VLR_FID(FPTN=VLR_FID);
%VLP_PASS(FPTN=VLP_PASS);
%VLP_NAME(FPTN=VLP_NAME);
%FPT_FID(FPTN=FPT_FID,
         STCLASS=STATIC,
         ACCT=VLP_ACCT,
         ASN=FID_ASN,
         NAME=VLP_NAME,
         PASS=VLP_PASS,
         RES=FID_RES,
         RESULTS=VLR_FID,
         SN=VLP_SN,
         TEXTFID=FID_TEXT,
         WSN=VLP_WSN);
%FPT_OPEN(FPTN=OPENOLD,
         STCLASS=STATIC,
         FUN=CREATE,
         EXIST=OLDFILE,
         ACS=SEQUEN,
         CTG=YES,
         ASN=FILE,
         SHARE=ALL,
         NAME=VLP_NAME,
         ACCT=VLP_ACCT,
         PASS=VLP_PASS,
         WSN=VLP_WSN);
DCL FMTAVAIL CHAR(0) CONSTANT INIT('%A%8-avail');
DCL FMTUSER CHAR(0) CONSTANT INIT('%A%8-%6D');
DCL FMTSH CHAR(0) CONSTANT INIT('%A%8-shared%15-%5D%21-%3D%%%26-%6D%33-%7D%41-%5D%47-%N(%3D%% %)%S');
DCL FMTDISM CHAR(0) CONSTANT INIT('%A%8-dismnt%15-%5D');
DCL FMTERR CHAR(0) CONSTANT INIT('%A%8-shared%15-%5D%21-%J');
DCL FMTMSG CHAR(0) CONSTANT INIT('%A%8-shared%15-%5D%21-%A');
DCL BITX UBIN STATIC;
DCL BITS(0:35)BIT(36)INIT('4'O,'2'O,'1'O,'04'O,'02'O,'01'O,'004'O,'002'O,'001'O,
'0004'O,'0002'O,'0001'O,'00004'O,'00002'O,'00001'O,'000004'O,'000002'O,'000001'O,
'0000004'O,'0000002'O,'0000001'O,'00000004'O,'00000002'O,'00000001'O,
'000000004'O,'000000002'O,'000000001'O,'0000000004'O,'0000000002'O,'0000000001'O,
'00000000004'O,'00000000002'O,'00000000001'O,
'000000000004'O,'000000000002'O,'000000000001'O)CONSTANT;
DCL FM_SRZERO UBIN CONSTANT INIT(67174400);
DCL F$CFU_ UBIN CONSTANT INIT(BITBIN(%SPCL5SID));
DCL F$CFU$ REDEF F$CFU_ PTR;
DCL ERRVEC BIT(72) CONSTANT INIT(VECTOR(ERR));
DCL PSNVEC BIT(72) CONSTANT INIT(VECTOR(PSN));
DCL NUMVEC BIT(72) CONSTANT INIT(VECTOR(NUM));
DCL MESSAGEVEC BIT(72) CONSTANT INIT(VECTOR(MESSAGE));
DCL TOTVEC BIT(72) CONSTANT INIT(VECTOR(TOT));
DCL TOTFVEC BIT(72) CONSTANT INIT(VECTOR(TOTF));
DCL FREEVEC BIT(72) CONSTANT INIT(VECTOR(FREE));
DCL FREEVOLVEC BIT(72) CONSTANT INIT(VECTOR(FREEVOL));
DCL XTNSVEC BIT(72) CONSTANT INIT(VECTOR(XTNS));
DCL NVOLVEC BIT(72) CONSTANT INIT(VECTOR(NVOL));
DCL FMTAVAILVEC BIT(72) CONSTANT INIT(VECTOR(FMTAVAIL));
DCL FMTERRVEC BIT(72) CONSTANT INIT(VECTOR(FMTERR));
DCL FMTMSGVEC BIT(72) CONSTANT INIT(VECTOR(FMTMSG));
DCL FMTUSERVEC BIT(72) CONSTANT INIT(VECTOR(FMTUSER));
DCL FMTSHVEC BIT(72) CONSTANT INIT(VECTOR(FMTSH));
DCL FMTDISMVEC BIT(72) CONSTANT INIT(VECTOR(FMTDISM));
DCL BREAK_F UBIN SYMREF;
DCL WAITINT UBIN SYMREF;
DCL VINIT ENTRY;
DCL VUPDATE ENTRY;
DCL VCLEAR ENTRY;
DCL VWRITE ENTRY(4);
DCL WAIT ENTRY(1);
DCL BREAK ENTRY(1);
%INCLUDE XUF_ENTRY;
DCL M$DP DCB;
%SUB ARCH# = 2;
%SUB PSN# = 3;
%SUB MESG# = 4;
%SUB THRESH# = 5;
%SUB WAIT# = 6;
%SUB END# = 7;
%SUB QUIT# = 8;
%SUB HALF# = 9;
%SUB PERC# = 11;
%SUB ANLZ# = 12;
 
     FPT_PRIV.V.PRIV# = %PR_FMDIAG#|%PR_SPCLMM#;
     CALL M$SPRIV (FPT_PRIV);
     IF NOT B$JIT.PRIV.ACTIVE&(%PR_FMDIAG#|%PR_SPCLMM#)
 
     THEN DO;
 
          MESSAGE = '    insuficient priv to run this tool.';
          CALL M$WRITE(WRITELO);
          CALL M$EXIT;
        END;
 
     CALL M$SAD(SAD1);
 
     CALL SETUP;
 
     DO WHILE('1'B);
 
          IF ARCHNAME~=' ' THEN DO;
 
               FID_TEXT=ARCHNAME;
               CALL M$FID(FPT_FID);
               OPENOLD.V.DCB#=DCBNUM(M$LO);
               CALL M$OPEN(OPENOLD) ALTRET(CRASH);
 
               DO WHILE('0'B);
 
CRASH:              IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE=109 THEN GOTO OVER;
                    CALL M$WRITE(WRITELO); /* ABORT ME */
                    CALL M$WRITE(WRITELO);
                    CALL M$EXIT;
 
                  END;
 
             END;
 
          LKOUNT=0;
          X9=FM$CFUX.SETH;
          DO WHILE(X9~=0);
 
               PSN=FM$SET.PSN(X9);
               IF FM$SET.SYSID(X9)=0 THEN ;
               ELSE CALL DO_SHARED;
               X9=FM$SET.SETL(X9);
 
             END;
 
          CALL CHECKIT;
 
          CALL ANLZIT;
 
          IF ARCHNAME~=' ' THEN CALL M$CLOSE(CLOSE) ALTRET(OVER);
 
OVER:     IF WAIT_FPT.V.UNITS# = 0 THEN CALL M$EXIT(SPECIAL);
          CALL M$WAIT(WAIT_FPT);
 
        END;
 
DO_SHARED: PROC;
 
/*
    The purpose of this procedure is to find the available
    free space on a shared pack. Handles both single and multi
    volume pack sets
*/
 
     GRANULE = 0;
     XTNDIST = '0'B;
     SETMAX=0;
     OPNSN.SN#(0) = PSN;
     CALL M$OPEN(OPENDP) ALTRET(BADOPEN);
     CALL M$READ(READDP) ALTRET(BADREAD);
 
     DO I=0 TO VID.VOLCNT - 1;
 
          MAXGRAN(I) = VID.SNLIST.SIZE(I);
          SETMAX = SETMAX + MAXGRAN(I);
 
        END;
 
     NVOL = VID.VOLCNT;
     FGRANS=0;
     I=0;
     FM$GRAN.BLINK=0;
     GRANULE = 1 + FM_SRZERO;
     FM$GRAN.BLINK = 0;
     VOLGRAN='0'B;
 
     DO WHILE(GRANULE~=0);
 
          CALL M$READ(READDP) ALTRET(BADGP);
          IF I ~= FM$GRAN.BLINK AND I ~= 0 THEN GOTO BADGP;
          XTN$=ADDR(FIT.CODES);
          DO WHILE (FM$GRAN.NAVX>POFFW(XTN$,ADDR(FIT)));
               IF VXH.XTNS<FM$GRAN.NAVX-POFFW(XTN$,ADDR(FIT)) THEN DO;
                    I=MOD(VXH.VOL,SIZEW(VOLGRAN));
                    VOLGRAN(I)=VOLGRAN(I)-FGRANS;
                    DO I=0 TO VXH.XTNS-2;
                         AGRANS=VXH.XTN.EADR(I)-VXH.XTN.ADR(I);
                         IF AGRANS>0 THEN FGRANS=FGRANS+AGRANS;
                         BITX=18;
                         DO WHILE (AGRANS<=BITBIN(BITS(BITX)) AND BITX<36);
                              BITX=BITX+1;
                            END;
                         XTNDIST(BITX-18)=XTNDIST(BITX-18)+1;
                       END;
                    I=MOD(VXH.VOL,SIZEW(VOLGRAN));
                    VOLGRAN(I)=VOLGRAN(I)+FGRANS;
                    XTN$=PINCRW(XTN$,VXH.XTNS+1);
                  END;
               ELSE XTN$=ADDR(FIT.CODES(FM$GRAN.NAVX));
             END;
          I=GRANULE;
          GRANULE=FM$GRAN.FLINK;
        END;
     TOTF = 0;
     DO I = 1 TO NVOL;
          TOTF =TOTF + VOLGRAN(I);
        END;
     FREE = 100 * TOTF / SETMAX;
     DO I = 0 TO NVOL-1;
          FREEVOL(I) = 100 * VOLGRAN(I+1) / MAXGRAN(I);
        END;
     XTNS=0;
     DO I = 0 TO 18;
          XTNS =XTNS + XTNDIST(I);
        END;
     TOT = 0;
     DO I = 0 TO NVOL-1;
          TOT = TOT + MAXGRAN(I);
        END;
     IF NVOL = 1 THEN NVOL = 0;
 
SKIPIT_CLOSE:
     CALL M$CLOSE(FPT_CLOSE) ALTRET(IGNORE);
 
IGNORE:
 
     LIST.NAME(LKOUNT)=PSN;
     LIST.FREE(LKOUNT)=TOTF;
     LIST.TOT(LKOUNT)=TOT;
     LKOUNT=LKOUNT+1;
     RETURN;
BADGP:
     MESSAGE = 'BAD GRANULE POOL';
     GOTO SKIPIT_CLOSE;
BADOPEN:
     ERR = B$TCB$->B$TCB.ALT$->B$ALT.ERR;
     RETURN;
BADREAD:
     ERR = B$TCB$->B$TCB.ALT$->B$ALT.ERR;
     GOTO SKIPIT_CLOSE;
END DO_SHARED;
%EJECT;
 
SETUP: PROC;
 
/*
    The purpose of this routine is to setup the mesg file and to
    initialize the command section
*/
 
DCL BLOCKN UBIN;
 
     CKOUNT=0;
 
     FID_TEXT='*MSG';
     CALL M$FID(FPT_FID);
     OPENCTG.V.DCB#=DCBNUM(M$MSG);
     CALL M$OPEN(OPENCTG);
 
     DO WHILE('1'B);
 
START:    INPUT=' ';
          CALL M$READ(READSI) ALTRET(DONE);
 
          IF INPUT=' ' THEN GOTO START;
          P_PCB.NCHARS=DCBADDR(DCBNUM(M$SI))->F$DCB.ARS#;
          CALL X$PARSE(P_PCB) ALTRET(BARF);
 
          BLOCKN=P_PCB.OUT$->OUTBLK.SUBLK$(0)->OUTBLK.CODE;
 
          DO CASE(BLOCKN);
 
          CASE(ARCH#);
 
             ARCHNAME=P_PCB.OUT$->OUTBLK.SUBLK$(0)->
                  OUTBLK.SUBLK$(0)->OUTSYM.TEXT;
 
          CASE(PSN#);
 
             CHECK.NAME(CKOUNT)=P_PCB.OUT$->OUTBLK.SUBLK$(0)->OUTBLK.SUBLK$(0)->OUTSYM.TEXT;
             CHECK.HALFX(CKOUNT)='0'B;
             CHECK.PERCENT(CKOUNT)='0'B;
             CHECK.ANALYZE(CKOUNT)='0'B;
             CHECK.FREE(CKOUNT)=0;
             CKOUNT=CKOUNT+1;
 
          CASE(MESG#);
 
             IF CHECK.NAME(CKOUNT-1)=' ' THEN ;
             ELSE DO;
 
                  CALL CONCAT(MESSAGE,CHECK.NAME(CKOUNT-1),P_PCB.OUT$->OUTBLK.SUBLK$(0)->
                       OUTBLK.SUBLK$(0)->OUTSYM.TEXT);
                  CALL M$WRITE(WRITEMSG);
 
                END;
 
          CASE(THRESH#);
 
             CALL CHARBIN(CHECK.FREE(CKOUNT-1),P_PCB.OUT$->OUTBLK.SUBLK$(0)->OUTBLK.SUBLK$(0)->OUTSYM.TEXT);
 
          CASE(HALF#);
 
             CHECK.HALFX(CKOUNT-1)='1'B;
 
          CASE(PERC#);
 
             CALL CHARBIN(CHECK.FREE(CKOUNT-1),P_PCB.OUT$->OUTBLK.SUBLK$(0)->OUTBLK.SUBLK$(0)->OUTSYM.TEXT);
             CHECK.PERCENT(CKOUNT-1)='1'B;
 
          CASE(WAIT#);
 
             CALL CHARBIN(INTERVAL,P_PCB.OUT$->OUTBLK.SUBLK$(0)->OUTBLK.SUBLK$(0)->OUTSYM.TEXT);
             WAIT_FPT.V.UNITS# = 60*INTERVAL;
 
          CASE(ANLZ#);
 
             CHECK.ANALYZE(CKOUNT-1)='1'B;
 
          CASE(END#);
 
             GOTO DONE;
 
          CASE(QUIT#);
 
             CALL M$EXIT;
 
          CASE(ELSE);
 
          END;
        END;
 
DONE: RETURN;
 
BARF: MESSAGE='     synatx error, BARF I quit!';
     CALL M$WRITE(WRITELO);
 
END;
 
CHECKIT: PROC;
 
DCL TESTP UBIN;
DCL TESTC UBIN;
 
     DO TESTC = 0 TO CKOUNT-1;
 
          DO TESTP = 0 TO LKOUNT-1;
 
               IF CHECK.PERCENT(TESTC)='0'B THEN DO;
                    IF CHECK.NAME(TESTC)=LIST.NAME(TESTP) AND CHECK.FREE(TESTC)>0 AND
 
                         CHECK.FREE(TESTC)>=LIST.FREE(TESTP) THEN CALL HANDLR(TESTC);
                  END;
               ELSE DO;
 
                    IF CHECK.NAME(TESTC)=LIST.NAME(TESTP) AND CHECK.FREE(TESTC)>
                         (100*LIST.FREE(TESTP))/LIST.TOT(TESTP) THEN CALL HANDLR(TESTC);
 
                  END;
 
             END;
 
        END;
 
END;
 
%EJECT;
 
HANDLR: PROC(POSITION);
 
DCL POSITION UBIN;
DCL TEMP CHAR(26);
DCL TEMP1 CHAR(6);
 
     IF CHECK.FREE(POSITION)=0 THEN RETURN; /* ZERO VALUES IGNORED         */
 
     CALL M$PFIL(BOF);
 
     PSN=CHECK.NAME(POSITION);
 
     SPECIAL.V.STEPCC#=1;
 
     DO WHILE('1'B);
 
          INPUT=' ';
          CALL M$READ(READMSG) ALTRET(DONE);
 
          IF PSN=SUBSTR(INPUT,0,8) THEN DO;
 
               KEYIN_BUF=SUBSTR(INPUT,8,120);
               CALL M$KEYIN(FPT_KEYIN);
 
             END;
 
        END;
 
DONE: IF ARCHNAME~=' ' THEN DO;
 
          CALL M$TIME(GET_TIME);
          CALL CONCAT(TEMP,DAY,' ',DATE,' ',TIME);
          CALL BINCHAR(TEMP1,CHECK.FREE(POSITION));
          IF CHECK.PERCENT(POSITION)='0'B THEN CALL CONCAT(MESSAGE,TEMP,' ',PSN,'granule space < ',TEMP1);
          ELSE CALL CONCAT(MESSAGE,TEMP,' ',PSN,' % free space < ',TEMP1);
          CALL M$WRITE(WRITELO) ALTRET(CHECK);
 
        END;
 
 
     IF CHECK.HALFX(POSITION)='1'B THEN CHECK.FREE(POSITION) =
 
               CHECK.FREE(POSITION)/2;
 
     RETURN;
CHECK: IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE=109 THEN RETURN;
     ELSE CALL M$WRITE(WRITELO);        /* MAKE ME ABORT */
END;
 
%EJECT;
 
ANLZIT: PROC;
 
DCL TEMP1 CHAR(7);
DCL TEMP2 CHAR(7);
DCL TEMP CHAR(38);
DCL TESTC UBIN;
DCL TESTP UBIN;
 
     CALL M$TIME(GET_TIME);
     CALL CONCAT(TEMP,'free ',DAY,' ',DATE,' ',TIME);
 
     DO TESTC = 0 TO CKOUNT-1;
 
          DO TESTP = 0 TO LKOUNT-1;
 
 
               IF CHECK.ANALYZE(TESTC)='1'B AND CHECK.NAME(TESTC)=
                    LIST.NAME(TESTP) THEN DO;
 
                    SUBSTR(TEMP,30,8)=CHECK.NAME(TESTC);
                    SUBSTR(TEMP,28,2)=' ';
                    CALL BINCHAR(TEMP1,LIST.FREE(TESTP));
                    CALL BINCHAR(TEMP2,(100*LIST.FREE(TESTP))/LIST.TOT(TESTP));
                    CALL CONCAT(MESSAGE,TEMP,' total free = ',TEMP1,' *** % free = ',TEMP2);
                    CALL M$WRITE(WRITELO) ALTRET(CHECK);
 
                  END;
             END;
        END;
 
     RETURN;
 
CHECK: IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE=109 THEN RETURN;
     ELSE CALL M$WRITE(WRITELO);        /* MAKE ME ABORT */
END;
END GRAMPS;
