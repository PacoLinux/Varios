VERSION E05

PL6.E3A0      #001=KFS$PACKMSG File=KFS$STATS.:E05TSI                            WED 07/30/97 00:24 Page:1    
        1        1        /*M*     KFS$PACKMSG - pack a msg from 9 to 8 bits*/
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*F*     NAME:     KFS$PACKSMG
        8        8                 PURPOSE:  Pack a msg from 9 bits to 8 bits
        9        9             DESCRIPTION:   This routine moves a bit string from one buffer to
       10       10                            another removing the oth bit from each 9 bit byte and
       11       11                            packing the remaining 8 bits on the end of the
       12       12                            destination string.  This forms a msg that looks the
       13       13                            binary msg that was sent from a fep.
       14       14        */
       15       15        /*D*     NAME:     KFS$PACKMSG
       16       16                 INPUT: P$FRM$ - ptr to from buffer
       17       17                           P$TO$ - ptr tot to buffer
       18       18                           P$COUNT - count of bytes to pack
       19       19                 DESCRIPTION: This routine takes a buffer and
       20       20                           strips the top bit off of each byte
       21       21                           and builds a new buffer with the data
       22       22                           packed together.
       23       23        */
       24       24        /**/
       25       25        KFS$PACKMSG: PROC(P$FRM$,P$TO$,P$COUNT);
       26       26        /**/
       27       27    1   DCL P$FRM$ PTR;
       28       28    1   DCL P$TO$ PTR;
       29       29    1   DCL P$COUNT UBIN WORD;
       30       30        /**/
       31       31    1   DCL Y$FRM$ PTR;
       32       32    1   DCL Y$TO$ PTR;
       33       33    1   DCL Y$IDX UBIN WORD;
       34       34        /**/
       35       35    1   DCL Y$8BITS (0:2000) UBIN(8)  BASED UNAL;
       36       36    1   DCL Y$9BITS (0:2000) UBIN(9) BASED UNAL;
       37       37        /**/
PL6.E3A0      #001=KFS$PACKMSG File=KFS$STATS.:E05TSI                            WED 07/30/97 00:24 Page:2    
       38       38    1           Y$FRM$ = P$FRM$;
       39       39    1           Y$TO$ = P$TO$;
       40       40    2           DO Y$IDX = 0 TO P$COUNT-1;
       41       41    2                Y$TO$->Y$8BITS(Y$IDX) = Y$FRM$->Y$9BITS(Y$IDX);
       42       42    2           END;
       43       43    1           RETURN;
       44       44    1   END KFS$PACKMSG;

PL6.E3A0      #001=KFS$PACKMSG File=KFS$STATS.:E05TSI                            WED 07/30/97 00:24 Page:3    
--  Include file information  --

   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure KFS$PACKMSG.

   Procedure KFS$PACKMSG requires 27 words for executable code.
   Procedure KFS$PACKMSG requires 10 words of local(AUTO) storage.

    No errors detected in file KFS$STATS.:E05TSI    .

PL6.E3A0      #001=KFS$PACKMSG File=KFS$STATS.:E05TSI                            WED 07/30/97 00:24 Page:4    

 Object Unit name= KFS$PACKMSG                                File name= KFS$STATS.:E05TOU
 UTS= JUL 30 '97 00:24:11.56 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none    27     33  KFS$PACKMSG

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes            yes      Std        3  KFS$PACKMSG

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_3
                       nStd      0 X66_ARET
PL6.E3A0      #001=KFS$PACKMSG File=KFS$STATS.:E05TSI                            WED 07/30/97 00:24 Page:5    


        1        1        /*M*     KFS$PACKMSG - pack a msg from 9 to 8 bits*/
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*F*     NAME:     KFS$PACKSMG
        8        8                 PURPOSE:  Pack a msg from 9 bits to 8 bits
        9        9             DESCRIPTION:   This routine moves a bit string from one buffer to
       10       10                            another removing the oth bit from each 9 bit byte and
       11       11                            packing the remaining 8 bits on the end of the
       12       12                            destination string.  This forms a msg that looks the
       13       13                            binary msg that was sent from a fep.
       14       14        */
       15       15        /*D*     NAME:     KFS$PACKMSG
       16       16                 INPUT: P$FRM$ - ptr to from buffer
       17       17                           P$TO$ - ptr tot to buffer
       18       18                           P$COUNT - count of bytes to pack
       19       19                 DESCRIPTION: This routine takes a buffer and
       20       20                           strips the top bit off of each byte
       21       21                           and builds a new buffer with the data
       22       22                           packed together.
       23       23        */
       24       24        /**/
       25       25        KFS$PACKMSG: PROC(P$FRM$,P$TO$,P$COUNT);

     25  0 000000   000000 700200 xent  KFS$PACKMSG  TSX0  ! X66_AUTO_3
         0 000001   000012 000003                    ZERO    10,3

       26       26        /**/
       27       27    1   DCL P$FRM$ PTR;
       28       28    1   DCL P$TO$ PTR;
       29       29    1   DCL P$COUNT UBIN WORD;
       30       30        /**/
       31       31    1   DCL Y$FRM$ PTR;
       32       32    1   DCL Y$TO$ PTR;
PL6.E3A0      #001=KFS$PACKMSG File=KFS$STATS.:E05TSI                            WED 07/30/97 00:24 Page:6    
       33       33    1   DCL Y$IDX UBIN WORD;
       34       34        /**/
       35       35    1   DCL Y$8BITS (0:2000) UBIN(8)  BASED UNAL;
       36       36    1   DCL Y$9BITS (0:2000) UBIN(9) BASED UNAL;
       37       37        /**/
       38       38    1           Y$FRM$ = P$FRM$;

     38  0 000002   200003 470500                    LDP0    @P$FRM$,,AUTO
         0 000003   000000 236100                    LDQ     0,,PR0
         0 000004   200006 756100                    STQ     Y$FRM$,,AUTO

       39       39    1           Y$TO$ = P$TO$;

     39  0 000005   200004 471500                    LDP1    @P$TO$,,AUTO
         0 000006   100000 236100                    LDQ     0,,PR1
         0 000007   200007 756100                    STQ     Y$TO$,,AUTO

       40       40    2           DO Y$IDX = 0 TO P$COUNT-1;

     40  0 000010   200010 450100                    STZ     Y$IDX,,AUTO
         0 000011   000026 710000 0                  TRA     s:42+3

       41       41    2                Y$TO$->Y$8BITS(Y$IDX) = Y$FRM$->Y$9BITS(Y$IDX);

     41  0 000012   200010 236100                    LDQ     Y$IDX,,AUTO
         0 000013   000011 402007                    MPY     9,DL
         0 000014   200010 235100                    LDA     Y$IDX,,AUTO
         0 000015   000003 735000                    ALS     3
         0 000016   200006 470500                    LDP0    Y$FRM$,,AUTO
         0 000017   200007 471500                    LDP1    Y$TO$,,AUTO
         0 000020   003105 061506                    CSR     bolr='003'O
         0 000021   000000 000011                    BDSC    0,Q,PR0                  by=0,bit=0,n=9
         0 000022   100000 000010                    BDSC    0,A,PR1                  by=0,bit=0,n=8

       42       42    2           END;

     42  0 000023   200010 235100                    LDA     Y$IDX,,AUTO
PL6.E3A0      #001=KFS$PACKMSG File=KFS$STATS.:E05TSI                            WED 07/30/97 00:24 Page:7    
         0 000024   000001 035007                    ADLA    1,DL
         0 000025   200010 755100                    STA     Y$IDX,,AUTO
         0 000026   200005 470500                    LDP0    @P$COUNT,,AUTO
         0 000027   200010 236100                    LDQ     Y$IDX,,AUTO
         0 000030   000000 116100                    CMPQ    0,,PR0
         0 000031   000012 602000 0                  TNC     s:41

       43       43    1           RETURN;

     43  0 000032   000000 702200 xent               TSX2  ! X66_ARET
       44       44    1   END KFS$PACKMSG;

PL6.E3A0      #001=KFS$PACKMSG File=KFS$STATS.:E05TSI                            WED 07/30/97 00:24 Page:8    
--  Include file information  --

   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure KFS$PACKMSG.
PL6.E3A0      #001=KFS$PACKMSG File=KFS$STATS.:E05TSI                            WED 07/30/97 00:24 Page:9    

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     5-0-0/w PTR         r     1 @P$COUNT                   3-0-0/w PTR         r     1 @P$FRM$
     4-0-0/w PTR         r     1 @P$TO$                    *0-0-0/w UBIN        r     1 P$COUNT
    *0-0-0/w PTR         r     1 P$FRM$                    *0-0-0/w PTR         r     1 P$TO$
     6-0-0/w PTR         r     1 Y$FRM$                    10-0-0/w UBIN        r     1 Y$IDX
     7-0-0/w PTR         r     1 Y$TO$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/b UBIN(8)     r     1 Y$8BITS(0:2000)            0-0-0/b UBIN(9)     r     1 Y$9BITS(0:2000)


   Procedure KFS$PACKMSG requires 27 words for executable code.
   Procedure KFS$PACKMSG requires 10 words of local(AUTO) storage.

    No errors detected in file KFS$STATS.:E05TSI    .
PL6.E3A0      #001=KFS$PACKMSG File=KFS$STATS.:E05TSI                            WED 07/30/97 00:24 Page:10   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=KFS$PACKMSG File=KFS$STATS.:E05TSI                            WED 07/30/97 00:24 Page:11   
          MINI XREF LISTING

P$COUNT
        29**DCL        25--PROC       40>>DOINDEX
P$FRM$
        27**DCL        25--PROC       38>>ASSIGN
P$TO$
        28**DCL        25--PROC       39>>ASSIGN
Y$8BITS
        35**DCL        41<<ASSIGN
Y$9BITS
        36**DCL        41>>ASSIGN
Y$FRM$
        31**DCL        38<<ASSIGN     41>>ASSIGN
Y$IDX
        33**DCL        40<<DOINDEX    41>>ASSIGN     41>>ASSIGN
Y$TO$
        32**DCL        39<<ASSIGN     41>>ASSIGN
