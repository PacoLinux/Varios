

CC.C03    File=zbe$ud_copy:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=1  
        1         1             /* $Header: ud_copy.c,v 1.4 87/03/10 11:48:10 ceriel Exp $ */
        2         2             /*
        3         3              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        4         4              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        5         5              */
        6         6             /* C O P Y   P R O P A G A T I O N */
        7         7
        8         8             #include "types:h"
        9         9             #include "ud:h"
       10        10             #include "debug:h"
       11        11             #include "global:h"
       12        12             #include "alloc:h"
       13        13             #include "lset:h"
       14        14             #include "cset:h"
       15        15             #include "def:h"
       16        16             #include "aux:h"
       17        17             #include "locals:h"
       18        18             #include "em_mnem:h"
       19        19             #include "em_pseu:h"
       20        20             #include "em_spec:h"
       21        21             #include "ud_defs:h"
       22        22             #include "ud_copy:h"
       23        23             #include "ud_const:h"
       24        24             #include "ud_aux:h"
       25        25
       26        26
       27        27
       28        28             line_p *copies;    /* table of copies; every entry points to the
       29        29                     * store-instruction.
       30        30                     */
       31        31             short *def_to_copynr; /* table that maps a 'definition'-number to a
       32        32                     * 'copy' number.
       33        33                     */
       34        34             short nrcopies;    /* number of copies in the current procedure
       35        35                     * (length of copies-table)
       36        36                     */
CC.C03    File=zbe$ud_copy:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=2  
       37        37
       38        38             #define COPY_NR(c) def_to_copynr[c]
       39        39             #define CHANGED(v,b) (Cis_elem(v,CHGVARS(b)) || Cis_elem(IMPLICIT_DEF(v),GEN(b
                               )))
       40        40
       41        41
       42        42             #define COUNT 0
       43        43             #define MAP 1
       44        44
       45        45             STATIC traverse_defs(p,action)
       46        46              proc_p p;
       47        47              int action;
       48        48             {
       49        49    1         bblock_p b;
       50        50    1         line_p l;
       51        51    1         bool found;
       52        52    1         short defcnt,v,cnt;
       53        53    1
       54        54    1         defcnt = 1;
       55        55    1         if (action == COUNT) {
       56        56    2            nrcopies = 0;
       57        57    2         } else {
       58        58    2            copies = (line_p *) newmap(nrcopies);
       59        59    2            def_to_copynr = newtable(nrdefs);
       60        60    2            cnt = 1;
       61        61    2         }
       62        62    1         if (defcnt > nrdefs) return;
       63        63    1         for (b = p->p_start; b != (bblock_p) 0; b = b->b_next) {
       64        64    2            for (l = b->b_start; l != (line_p) 0; l = l->l_next) {
       65        65    3               if (defs[defcnt] == l) {
       66        66    4                  if (is_copy(l)) {
       67        67    5                     var_nr(PREV(l),&v,&found);
       68        68    5                     if (found) {
       69        69    6                        if (action == COUNT) {
       70        70    7                           nrcopies++;
       71        71    7                        } else {
       72        72    7                           copies[cnt] = l;
CC.C03    File=zbe$ud_copy:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=3  
       73        73    7                           def_to_copynr[defcnt] =
       74        74    7                              cnt++;
       75        75    7                        }
       76        76    6                     }
       77        77    5                  }
       78        78    4                  if (++defcnt > nrdefs) return;
       79        79    4               }
       80        80    3            }
       81        81    2         }
       82        82    1        }
       83        83
       84        84
       85        85
       86        86             STATIC make_copytab(p)
       87        87              proc_p p;
       88        88             {
       89        89    1         /* Make a table of all copies appearing in procedure p.
       90        90    1          * We first count how many there are, because we
       91        91    1          * have to allocate a dynamic array of the correct size.
       92        92    1          */
       93        93    1
       94        94    1         traverse_defs(p,COUNT);
       95        95    1         traverse_defs(p,MAP);
       96        96    1        }
       97        97
       98        98
       99        99
      100       100             STATIC bool is_changed(varl,start,stop)
      101       101              line_p varl, start, stop;
      102       102             {
      103       103    1         /* See if the variable used by instruction varl
      104       104    1          * is changed anywhere between 'start' and 'stop'
      105       105    1          */
      106       106    1
      107       107    1         register line_p l;
      108       108    1         short v;
      109       109    1         bool found;
CC.C03    File=zbe$ud_copy:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=4  
      110       110    1
      111       111    1         var_nr(varl,&v,&found);
      112       112    1         if (!found) {
      113       113    2            return TRUE; /* We don't maintain ud-info for this variable */
      114       114    2         }
      115       115    1         for (l = start; l != (line_p) 0 && l != stop; l = l->l_next) {
      116       116    2            if (does_expl_def(l) && same_var(varl,l)) return TRUE;
      117       117    2            if (does_impl_def(l) && affected(varl,v,l)) return TRUE;
      118       118    2         }
      119       119    1         return FALSE;
      120       120    1        }
      121       121
      122       122
      123       123
      124       124             STATIC gen_kill_copies(p)
      125       125              proc_p p;
      126       126             {
      127       127    1         /* Compute C_GEN and C_KILL for every basic block
      128       128    1          * of p.
      129       129    1          */
      130       130    1
      131       131    1         register line_p l;
      132       132    1         register bblock_p b,n;
      133       133    1         short v;
      134       134    1         bool found;
      135       135    1         short copycnt = 1, defcnt = 1;
      136       136    1
      137       137    1         for (b = p->p_start; b != (bblock_p) 0; b = b->b_next) {
      138       138    2            C_GEN(b) = Cempty_set(nrcopies);
      139       139    2            C_KILL(b) = Cempty_set(nrcopies);
      140       140    2         }
      141       141    1         if (nrcopies == 0) return;
      142       142    1         for (b = p->p_start; b != (bblock_p) 0; b = b->b_next) {
      143       143    2            for (l = b->b_start; l != (line_p) 0; l = l->l_next) {
      144       144    3               if (copies[copycnt] == l) {
      145       145    4                  var_nr(PREV(l),&v,&found);
      146       146    4                  assert(found);
CC.C03    File=zbe$ud_copy:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=5  
      147       147    4                  for (n = p->p_start; n != (bblock_p) 0;
      148       148    4                       n = n->b_next) {
      149       149    5                     if (n != b && CHANGED(v,n) &&
      150       150    5                         Cis_elem(EXPL_TO_DEFNR(defcnt),IN(n))) {
      151       151    6                        Cadd(copycnt,&C_KILL(n));
      152       152    6                     }
      153       153    5                  }
      154       154    4                  if (is_changed(PREV(l),l,(line_p) 0)) {
      155       155    5                     Cadd(copycnt,&C_KILL(b));
      156       156    5                  } else {
      157       157    5                     Cadd(copycnt,&C_GEN(b));
      158       158    5                  }
      159       159    4                  if (++copycnt > nrcopies) return;
      160       160    4               }
      161       161    3               if (defs[defcnt] == l) defcnt++;
      162       162    3            }
      163       163    2         }
      164       164    1        }
      165       165
      166       166
      167       167
      168       168             STATIC intersect_outs(bbset,setp,full_set)
      169       169              lset bbset;
      170       170              cset *setp,full_set;
      171       171             {
      172       172    1         /* Take the intersection of C_OUT(b), for all b in bbset,
      173       173    1          * and put the result in setp.
      174       174    1          */
      175       175    1
      176       176    1         Lindex i;
      177       177    1
      178       178    1         Ccopy_set(full_set,setp);
      179       179    1         for (i = Lfirst(bbset); i != (Lindex) 0; i = Lnext(i,bbset)) {
      180       180    2            Cintersect(C_OUT((bblock_p) Lelem(i)), setp);
      181       181    2         }
      182       182    1        }
      183       183
CC.C03    File=zbe$ud_copy:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=6  
      184       184
      185       185
      186       186             STATIC init_cin(p,full_set)
      187       187              proc_p p;
      188       188              cset full_set;
      189       189             {
      190       190    1         /* Initialize C_IN(b) and C_OUT(b), for every basic block b.
      191       191    1          * C_IN of the root of the CFG (i.e. the procedure entry block)
      192       192    1          * will contain every copy, as it trivially holds that for
      193       193    1          * every copy "s: A := B" there is no assignment to B on any
      194       194    1          * path from s to the beginning of the root (because PRED(root)=empty).
      195       195    1          * C_IN and C_OUT of the root will never be changed.
      196       196    1          * For all remaining blocks b, C_IN(b) is initialized to the set of
      197       197    1          * all copies, and C_OUT is set to all copies but those killed in b.
      198       198    1          */
      199       199    1
      200       200    1         bblock_p b;
      201       201    1         bblock_p root = p->p_start;
      202       202    1
      203       203    1         C_IN(root) = Cempty_set(nrcopies);
      204       204    1         Ccopy_set(full_set,&C_IN(root)); /* full_set is the set of all copies */
      205       205    1         /* C_OUT(root) = {all copies} - C_KILL(root) + C_GEN(root) */
      206       206    1         C_OUT(root) = Cempty_set(nrcopies);
      207       207    1         Ccopy_set(full_set,&C_OUT(root));
      208       208    1         Csubtract(C_KILL(root),&C_OUT(root));
      209       209    1         Cjoin(C_GEN(root),&C_OUT(root));
      210       210    1         for (b = root->b_next; b != (bblock_p) 0; b = b->b_next) {
      211       211    2            C_IN(b) = Cempty_set(nrcopies);
      212       212    2            Ccopy_set(full_set,&C_IN(b));
      213       213    2            C_OUT(b) = Cempty_set(nrcopies);
      214       214    2            Ccopy_set(full_set,&C_OUT(b));
      215       215    2            Csubtract(C_KILL(b),&C_OUT(b));
      216       216    2         }
      217       217    1        }
      218       218
      219       219
      220       220
CC.C03    File=zbe$ud_copy:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=7  
      221       221             STATIC solve_cin(p)
      222       222              proc_p p;
      223       223             {
      224       224    1         /* Solve the data flow equations for reaching
      225       225    1          * definitions of procedure p.
      226       226    1          * These equations are:
      227       227    1          *  (1)  C_OUT(b) = C_IN(b) - C_KILL(b) + C_GEN(b)
      228       228    1          *  (2)  C_IN(b)  = C_OUT(p1) * .. * C_OUT(pn)
      229       229    1          *  (3)  C_IN(root) = {all copies} ;
      230       230    1          *       where PRED(b) = {p1, .. , pn}
      231       231    1          *  and '*' denotes set intersection.
      232       232    1          * We use the iterative algorithm of Aho&Ullman to
      233       233    1          * solve the equations.
      234       234    1          */
      235       235    1
      236       236    1         register bblock_p b;
      237       237    1         bool     change;
      238       238    1         cset     newin,full_set;
      239       239    1         short n;
      240       240    1
      241       241    1         /* initializations */
      242       242    1         full_set = Cempty_set(nrcopies);
      243       243    1         for (n = 1; n <= nrcopies; n++) {
      244       244    2            Cadd(n,&full_set);
      245       245    2         }
      246       246    1         newin = Cempty_set(nrcopies);
      247       247    1         init_cin(p,full_set);
      248       248    1         change = TRUE;
      249       249    1         /* main loop */
      250       250    1         while (change) {
      251       251    2            change = FALSE;
      252       252    2            for (b = p->p_start->b_next; b != (bblock_p) 0; b = b->b_next) {
      253       253    3               intersect_outs(b->b_pred, &newin,full_set);
      254       254    3               /* newin = C_OUT(p1) * .. * C_OUT(pn) */
      255       255    3               if (!Cequal(newin,C_IN(b))) {
      256       256    4                  change = TRUE;
      257       257    4                  Ccopy_set(newin, &C_IN(b));
CC.C03    File=zbe$ud_copy:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=8  
      258       258    4                  Ccopy_set(C_IN(b),   &C_OUT(b));
      259       259    4                  Csubtract(C_KILL(b), &C_OUT(b));
      260       260    4                  Cjoin(C_GEN(b),      &C_OUT(b));
      261       261    4               }
      262       262    3            }
      263       263    2         }
      264       264    1         Cdeleteset(newin);
      265       265    1         Cdeleteset(full_set);
      266       266    1        }
      267       267
      268       268
      269       269
      270       270             copy_analysis(p)
      271       271              proc_p p;
      272       272             {
      273       273    1         /* Determine which copies procedure p has. Compute C_IN(b),
      274       274    1          * for every basic block b.
      275       275    1          */
      276       276    1
      277       277    1         make_copytab(p); /* Make a table of all copies */
      278       278    1         gen_kill_copies(p); /* Compute C_GEN(b) and C_KILL(b), for every b */
      279       279    1         solve_cin(p); /* Solve equations for C_IN(b) */
      280       280    1        }
      281       281
      282       282
      283       283
      284       284             bool is_copy(def)
      285       285              line_p def;
      286       286             {
      287       287    1         /* See if the definition def is also a 'copy', i.e. an
      288       288    1          * statement of the form 'A := B' (or, in EM terminology:
      289       289    1          * a sequence 'Load Variable; Store Variable').
      290       290    1          */
      291       291    1
      292       292    1
      293       293    1         line_p lhs;
      294       294    1         int instr;
CC.C03    File=zbe$ud_copy:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=9  
      295       295    1
      296       296    1         lhs = PREV(def);
      297       297    1         if (lhs == (line_p) 0) return FALSE;
      298       298    1         instr = INSTR(def);
      299       299    1         switch(INSTR(lhs)) {
      300       300    2            case op_lol:
      301       301    2            case op_loe:
      302       302    2               return instr == op_stl || instr == op_ste;
      303       303    2            case op_ldl:
      304       304    2            case op_lde:
      305       305    2               return instr == op_sdl || instr == op_sde;
      306       306    2            default:
      307       307    2               return FALSE;
      308       308    2         }
      309       309    1         /* NOTREACHED */
      310       310    1        }
      311       311
      312       312
      313       313
      314       314             fold_var(old,new,b)
      315       315              line_p old, new;
      316       316              bblock_p b;
      317       317             {
      318       318    1         /* The variable referenced by the EM instruction 'old'
      319       319    1          * must be replaced by the variable referenced by 'new'.
      320       320    1          */
      321       321    1
      322       322    1         line_p l;
      323       323    1
      324       324    1        /* DEBUGGING:
      325       325    1         local_p loc;
      326       326    1         short nr;
      327       327    1         bool ok;
      328       328    1         if (TYPE(old) == OPOBJECT) {
      329       329    1            printf("global var.");
      330       330    1         } else {
      331       331    1            printf("local var. with off. %ld",off_set(old));
CC.C03    File=zbe$ud_copy:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=10 
      332       332    1            find_local(off_set(old),&nr,&ok);
      333       333    1            assert(ok);
      334       334    1            loc = locals[nr];
      335       335    1            printf(",score %ld",loc->lc_score);
      336       336    1         }
      337       337    1         printf(" replaced by ");
      338       338    1         if (TYPE(new) == OPOBJECT) {
      339       339    1            printf("global var.");
      340       340    1         } else {
      341       341    1            printf("local var. with off. %ld",off_set(new));
      342       342    1            find_local(off_set(new),&nr,&ok);
      343       343    1            assert(ok);
      344       344    1            loc = locals[nr];
      345       345    1            printf(",score %ld",loc->lc_score);
      346       346    1         }
      347       347    1         printf("\n");
      348       348    1        END DEBUG */
      349       349    1         l = old;
      350       350    1         if (TYPE(l) != TYPE(new)) {
      351       351    2            l = newline(TYPE(new));
      352       352    2            l->l_instr = INSTR(new);
      353       353    2            repl_line(old,l,b);
      354       354    2         }
      355       355    1         switch(TYPE(new)) {
      356       356    2            case OPOBJECT:
      357       357    2               OBJ(l) = OBJ(new);
      358       358    2               break;
      359       359    2            case OPSHORT:
      360       360    2               SHORT(l) = SHORT(new);
      361       361    2               break;
      362       362    2            case OPOFFSET:
      363       363    2               OFFSET(l) = OFFSET(new);
      364       364    2               break;
      365       365    2            default:
      366       366    2               assert(FALSE);
      367       367    2         }
      368       368    1        }
CC.C03    File=zbe$ud_copy:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=11 
      369       369
      370       370
      371       371
      372       372             bool value_retained(copy,defnr,use,b)
      373       373              line_p copy,use;
      374       374              short  defnr;
      375       375              bblock_p b;
      376       376             {
      377       377    1         /* See if the right hand side variable of the
      378       378    1          * copy still has the same value at 'use'.
      379       379    1          * If the copy and the use are in the same
      380       380    1          * basic block (defnr = 0), search from the
      381       381    1          * copy to the use, to see if the rhs variable
      382       382    1          * is changed. If the copy is in another block,
      383       383    1          * defnr is the definition-number of the copy.
      384       384    1          * Search from the beginning of the block to
      385       385    1          * the use, to see if the rhs is changed; if not,
      386       386    1          * check that the copy is in C_IN(b).
      387       387    1          */
      388       388    1
      389       389    1         line_p rhs, start;
      390       390    1
      391       391    1         rhs = PREV(copy);
      392       392    1         start = (defnr == 0 ? copy : b->b_start);
      393       393    1         return !is_changed(rhs,start,use) &&
      394       394    1                (defnr == 0 || Cis_elem(COPY_NR(defnr), C_IN(b)));
      395       395    1        }
      396       396
---  Include file information  ---

   zbe$types:h.:ZBC3TOU. is referenced
   zbe$ud:h.:ZBC3TOU. is referenced
   zbe$debug:h.:ZBC3TOU. is referenced
   zbe$global:h.:ZBC3TOU. is referenced
   zbe$alloc:h.:ZBC3TOU. is referenced
   zbe$lset:h.:ZBC3TOU. is referenced
   zbe$cset:h.:ZBC3TOU. is referenced
CC.C03    File=zbe$ud_copy:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=12 
   zbe$def:h.:ZBC3TOU. is referenced
   zbe$aux:h.:ZBC3TOU. is referenced
   zbe$locals:h.:ZBC3TOU. is referenced
   em_mnem:h.:ZBC3TOU. is referenced
   em_pseu:h.:ZBC3TOU. is referenced
   em_spec:h.:ZBC3TOU. is referenced
   zbe$ud_defs:h.:ZBC3TOU. is referenced
   zbe$ud_copy:h.:ZBC3TOU. is referenced
   zbe$ud_const:h.:ZBC3TOU. is referenced
   zbe$ud_aux:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbe$ud_copy:c.:ZBC3TSI
