VERSION E05

PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:1    
        1        1        /*M* VXU$PREAD - To read page records of types 1 through 9 from object files and run
                 1         files*/
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMR,PLM=6,IND=4,CSU=2,EXM=0,ECU=2,MOC,DCI=4,CRT=4,CTI=8,CCC */
        8        8        /*F* NAME:        VXU$PREAD
        9        9             PURPOSE:     To read page records of types 1 through 9 from object files
       10       10                          and run files.
       11       11             DESCRIPTION:
       12       12            VXU$PREAD is passed eleven arguments of which the first two are returned
       13       13            variables while the remaining nine are value parameters. NPAGE is a returned
       14       14            variable which contains the number of pages read for the type of record.
       15       15            TSIZE_READ is a variable which returns the number of words read for the
       16       16            type of record.  FILE is a passed variable which indicates which DCB the
       17       17            read(s) are to be done through. FILE_TYPE is a passed variable which
       18       18            indicates which file organization is assumed either an object file or a run
       19       19            file. RTYPE is the record type; RANGE: 0-9. START$ is the locator which
       20       20            points at the initial area in which the records are to be placed. PAGE_SIZE
       21       21            is the size in words of all records for this type except possibly the last.
       22       22            TSIZE is the total size in words of all records for this type(rtype).
       23       23            DS is the internal data segment identifier in which the records are
       24       24            are to be placed. CURR_P$ is a pointer to the node which owns these records.
       25       25            SOURCE_P is a variable which labels the records as to their origin(library,
       26       26            object, shared library, etc.).
       27       27            VXU$PREAD reads paged records for a given type and makes them suitable for
       28       28            further processing. This is accomplished by updating name pointers where
       29       29            appropriate (and doing some verification that indeed the name displacements
       30       30            locate valid name strings).  Definition entrys which are virgin(i.e. Not
       31       31            defined) are bound to their proper section declaration and all linker flags
       32       32            for them are reset. Various integrity and consistency checks are performed
       33       33            to ensure the soundness of the link process.      */
       34       34
       35       35
       36       36
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:2    
       37       37        VXU$PREAD:
       38       38              PROC(
       39       39                      NPAGE,                    /* # of pages read-inc by 1 each read */
       40       40                      TSIZE_READ,               /* Total word size read */
       41       41                      FILE,                     /* Dcb to read thru */
       42       42                      FILE_TYPE,                /*  File type */
       43       43                      RTYPE,                    /* Record type */
       44       44                      START$,                   /* Beginning of area to read into */
       45       45                      PAGE_SIZE,                /* Page size */
       46       46                      TSIZE,                    /* Total size to read */
       47       47                      DS,                       /* Data SEGMENT/INTERNAL# */
       48       48                      AREA_SIZE,                /* Initial area size allocated */
       49       49                      CURR_P$,                  /* Current node */
       50       50                      SOURCE_P);                /* From whence it came */
       51       51        /**/
       52       52        /**/
       53       53        /**/
       54       54        %INCLUDE VX_INC_C;
       55    10770              %VX$NODE;

             10782    1   /*******************************************************************************
             10783    1   *                                                                              *
             10784    1   *                          VX$NODE                                                 *
             10785    1   *                                                                              *
             10786    1   *******************************************************************************/

             10802    1   DCL 1 VX$NODE      ALIGNED    BASED,
             10803    1         2 SON$ PTR /*(ADDR(NIL))*/, /* Son pointer                      */
             10804    1         2 BROTHER$ PTR /*(ADDR(NIL))*/, /* Brother pointer              */
             10805    1         2 FATHER$ PTR /*(ADDR(NIL))*/, /* Father pointer                */
             10806    1         2 PATH$ PTR /*(ADDR(NIL))*/, /* Path   pointer                  */
             10807    1         2 HEAD$       PTR /*(ADDR(NIL))*/, /* Head pointer to
             10808                              to list of file nodes for this node            */
             10809    1         2 TAIL$ PTR /*(ADDR(NIL))*/, /* Tail pointer to list            */
             10810    1         2 SHARED_LIB_HEAD$ PTR /*(ADDR(NIL))*/,
             10810                  /* Head pointer to shared library list */
             10811    1         2 LIB_HEAD$         PTR /*(ADDR(NIL))*/,
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:3    
             10811                  /* Head pointer to list of shared libraries
             10812                                          which have been mapped to included libraries */
             10813    1         2 NUM          UBIN(36)  UNAL,    /* Node number                        */
             10814    1         2 DEPTH          UBIN(36)  UNAL,  /* Depth; ROOT=0*/
             10815    1         2 ADDR_START_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array            */
             10816    1         2 ADDR_START REDEF  ADDR_START_A,
             10817    1           3 RDATA       SBIN WORD,   /* First address for this node in data     */
             10818    1           3 RPROC       SBIN WORD,   /* First address for this node in proc     */
             10819    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
             10820    1         2 ADDR_STOP_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array            */
             10821    1         2 ADDR_STOP  REDEF  ADDR_STOP_A,
             10822    1           3 RDATA       SBIN WORD,        /* Last address for this node in data */
             10823    1           3 RPROC       SBIN WORD,        /* Last address for this node in proc */
             10824    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
             10825    1         2 START_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array           */
             10826    1         2 START_PAGE# REDEF START_PAGE#_A,
             10827    1           3 RDATA       SBIN WORD,   /* First page    for this node in data     */
             10828    1           3 RPROC       SBIN WORD,   /* First page    for this node in proc     */
             10829    1           3 ROS       SBIN WORD,          /* First page   for program in ros    */
             10830    1         2 STOP_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array*/
             10831    1         2 STOP_PAGE#  REDEF STOP_PAGE#_A,
             10832    1           3 RDATA       SBIN WORD,   /* Last  page    for this node in data     */
             10833    1           3 RPROC       SBIN WORD,   /* Last  page    for this node in proc     */
             10834    1           3 ROS       SBIN WORD,          /* Last  page   for program in ros    */
             10835    1         2 START_SC_ALL$ PTR /*(ADDR(NIL))*/,
             10835                  /* Starting pointer for common sections for this node */
             10836    1         2 STOP_SC_ALL$ PTR /*(ADDR(NIL))*/,
             10836                  /* Stopping pointer for common sections for this node */
             10837    1         2 L_START,
             10838    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
             10839    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
             10840    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
             10841    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
             10842    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
             10843    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
             10844    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
             10845    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:4    
             10846    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
             10847    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
             10848    1         2 L_START_A$(0:9)     REDEF L_START PTR,
             10849    1         2 L_STOP,
             10850    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
             10851    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
             10852    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
             10853    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
             10854    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
             10855    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
             10856    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
             10857    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
             10858    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
             10859    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
             10860    1         2 L_STOP_A$(0:9) REDEF   L_STOP    PTR,
             10861    1         2 L_SIZE,
             10862    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
             10863    1           3 DN      UBIN /*(0)*/, /* Def names                          */
             10864    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
             10865    1           3 SC      UBIN /*(0)*/, /* Sections                           */
             10866    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
             10867    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
             10868    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
             10869    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
             10870    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
             10871    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
             10872    1         2 L_SIZE_A(0:9)  REDEF   L_SIZE    UBIN,
             10873    1         2 L_PREV_SIZE,
             10874    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
             10875    1           3 DN      UBIN /*(0)*/, /* Def names                          */
             10876    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
             10877    1           3 SC      UBIN /*(0)*/, /* Sections                           */
             10878    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
             10879    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
             10880    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
             10881    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
             10882    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:5    
             10883    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
             10884    1         2 L_PREV_SIZE_A(0:9)  REDEF   L_PREV_SIZE    UBIN,
             10885    1         2 BIT_MAP                ALIGNED,
             10886    1           3 DATA                  ALIGNED,
             10887    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             10888    1           3 RPROC                 ALIGNED,
             10889    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             10890    1           3 ROS                   ALIGNED,
             10891    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             10892    1         2 L_SC_START,
             10893    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
             10894    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
             10895    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
             10896    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
             10897    1         2 L_SC_START_A$(0:3)  REDEF L_SC_START PTR,
             10898    1         2 L_SC_STOP,
             10899    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
             10900    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
             10901    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
             10902    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
             10903    1         2 L_SC_STOP_A$(0:3)   REDEF L_SC_STOP  PTR,
             10904    1         2 PROMOTE_HEAD,
             10905    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
             10906    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
             10907    1         2 PROMOTE_HEAD_A$(0:1) REDEF PROMOTE_HEAD     PTR,
             10908    1         2 PROMOTE_TAIL,
             10909    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
             10910    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
             10911    1         2 PROMOTE_TAIL_A$(0:1) REDEF PROMOTE_TAIL     PTR,
             10912    1         2 HAVE_ASL          BIT(1)    UNAL /*('0'B)*/,
             10913    1         2 ALL_BLK_COM          BIT(1)    UNAL /*('0'B)*/,
             10914    1         2 USE_NODE          BIT(1)    UNAL /*('0'B)*/,
             10915    1         2 *                 BIT(33)   UNAL /*('0'B)*/,
             10916    1         2 BLANK_COMMON$     PTR       ALIGNED /*(ADDR(NIL))*/;

       56    10920              %VX$SC;

PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:6    
             10933    1   /*******************************************************************************
             10934    1   *                                                                              *
             10935    1   *                          VX$SC                                                 *
             10936    1   *                                                                              *
             10937    1   *******************************************************************************/

             10942    1   DCL 1 VX$SC BASED ALIGNED,
             10943    1         2 SEG UBIN(3) UNAL,
             10944                /*K*  SEG - The segment number of this section */
             10945    1         2 TYPE UBIN(6) UNAL,
             10946                /*K*  TYPE -
             10947                      Type code      Section type
             10948                      ---------      ------------
             10949                          0          Data control section with write access.
             10950                          1          Procedure control section.
             10951                          2          Unlabeled common, name pointer must be zero.
             10952                          3          Labeled common, with mandatory name pointer.
             10953                                     This is for labeled common which must be
             10954                                     in the root.
             10955                          4          Labeled common, with mandatory name pointer.
             10956                                     This is for labeled common which need not
             10957                                     be in the root.
             10958                          5          DCB, word 1 is name pointer.
             10959                          6          Data control section with read only access,
             10960                                     word 1 = 0 or name pointer.      */
             10961    1         2 EMPTY BIT(1) UNAL,
             10962                /*K*  EMPTY is the empty bit.  This bit is set if the control
             10963                      section is of size zero.  */
             10964    1         2 ATTR UNAL,
             10965    1           3 INT  UBIN(2) UNAL,
             10966                  /*K*  INT is the Section initialization.  */
             10967    1           3 SEGMENT BIT(1) UNAL,
             10968                  /*K* SEGMENT is set if the Section is defined in a data
             10969                       segment.  */
             10970    1           3 ALL BIT(1) UNAL,
             10971                  /*K*  ALL is set if the Section is allocated.  */
             10972    1           3 PRE_DCB BIT(1) UNAL,
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:7    
             10973                  /*K*  PRE_DCB is set if a Pre_defined DCB.  */
             10974    1           3 MES_INIT BIT(1) UNAL,
             10975    1           3 ALIGN UBIN(2) UNAL,
             10976                  /*K*  ALIGN is the Section alignment.  */
             10977    1         2 ADDRESS UBIN HALF UNAL,
             10978                /*K*  ADDRESS is the address within the Instruction Segment of
             10979                      the entry point of the external procedure.  */
             10980    1         2 NAME_DISP SBIN HALF UNAL,
             10981                /*K*  NAME_DISP is the Name index.  */
             10982    1         2 SIZE UBIN HALF UNAL,
             10983                /*K*  SIZE is the size, in words, of the section.  */
             10984    1         2 NODE# UBIN HALF UNAL,
             10985                /*K*  NODE# is the Node number of section.  */
             10986    1         2 COM_LINK UBIN HALF UNAL;
             10987                /*K*  COM_LINK is used internally by linker to link common sections */

             10997    1   /*******************************************************************************
             10998    1   *                                                                              *
             10999    1   *                          VX$SECT                                                 *
             11000    1   *                                                                              *
             11001    1   *******************************************************************************/

             11006    1   DCL 1 VX$SECT BASED ALIGNED,
             11007    1         2 TYPE UBIN BYTE UNAL,
             11008                /*K*  TYPE -
             11009                      Type code      Section type
             11010                      ---------      ------------
             11011                          0          Data control section with write access.
             11012                          1          Procedure control section.
             11013                          2          Unlabeled common, name pointer must be zero.
             11014                          3          Labeled common, with mandatory name pointer.
             11015                                     This is for labeled common which must be
             11016                                     in the root.
             11017                          4          Labeled common, with mandatory name pointer.
             11018                                     This is for labeled common which need not
             11019                                     be in the root.
             11020                          5          DCB, word 1 is name pointer.
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:8    
             11021                          6          Data control section with read only access,
             11022                                     word 1 = 0 or name pointer.
             11023                          7          Constant labeled common, with mandatory name pointer.
             11024                                     This is for labeled common which must be
             11025                                     in the root.
             11026                          8          Constant labeled common, with mandatory name pointer.
             11027                                     This is for labeled common which need not
             11028                                     be in the root.                        */
             11029    1         2 * BIT(1),
             11030                /*K*  * is reserved for future use and must be zero. */
             11031    1         2 INITZERO BIT(1),
             11032                /*K*  INITZERO - if 1, initialize with zero.  */
             11033    1         2 INITUTS BIT(1),
             11034                /*K*  INITUTS - if 1, initialize with UTS.  */
             11035    1         2 SEGMENT BIT(1),
             11036                /*K*  SEGMENT - if 1, specifies that this section is
             11037                                to be placed in the segment specified by
             11038                                SEG_NPOINTER.  */
             11039    1         2 * BIT(3),
             11040                /*K*  * is reserved for future use and must be zero. */
             11041    1         2 BOUND UBIN(2) UNAL,
             11042                /*K*  BOUND - bits 6-7 - defines starting location.
             11043                              00 - starts on even word
             11044                              01 - starts on odd word
             11045                              10 - starts on multiple of 8
             11046                              11 - starts on page boundary     */
             11047    1         2 SIZE UBIN HALF UNAL,
             11048                /*K*  SIZE is the size, in words, of the section.  */
             11049    1         2 NPOINTER SBIN HALF UNAL,
             11050                /*K*  NPOINTER is the word displacement into the name record
             11051                      (TYPE 1) locating the name of this section.  If the
             11052                      field is negative, the section has no name.  */
             11053    1         2 MBZ UBIN HALF UNAL,
             11054                /*K*  MBZ is reserved for future expansion and must be zero. */
             11055    1         2 SEG_NPOINTER REDEF MBZ SBIN HALF UNAL,
             11056                /*K*  SEG_NPOINTER locates a name in the Definition Names
             11057                      Section.  The name must be a valid segment name
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:9    
             11058                      recognized by the linker.  */
             11059    1         2 G66 REDEF MBZ,
             11060                /*K*  G66 is not used on CP-6. */
             11061    1           3 * BIT(9),
             11062    1           3 NSAB BIT(9);
       57    11065              %VXD$TMPLT( EDEF=YES );

             11078    1   /*******************************************************************************
             11079    1   *                                                                              *
             11080    1   *                          VXD$TMPLT                                               *
             11081    1   *                                                                              *
             11082    1   *******************************************************************************/

             11086        /*
             11087                  VXD$TMPLT (B$RU_DEF) is used to reference fields common to
             11088                  ENTDEFs, SYMDEFs and SEGDEFs.
             11089        */
             11091    1   DCL 1 VXD$TMPLT BASED ALIGNED,
             11092    1         2 VALUE SBIN UNAL,
             11093                /*K*  VALUE is the value if this entry is a constant.  */
             11094    1         2 AD REDEF VALUE,
             11095                /*K*  AD is the address if this entry is not constant.  */
             11096    1           3 LFLAGS UNAL,
             11097                  /*K*  LFLAGS is the field reserved for loader to flag load
             11098                        time attributes of the definition and must be zero
             11099                        in the object unit. */
             11100    1             4 SOURCE UBIN(3) UNAL,
             11101                    /*K*  SOURCE - Source of this DEF */
             11102    1             4 DEFINED BIT(1) UNAL,
             11103                    /*K*  DEFINED - Set if this DEF defined */
             11104    1             4 MULTIPLE BIT(1) UNAL,
             11105                    /*K*  MULTIPLE - Set if this DEF is multiply defined. */
             11106    1             4 USED BIT(1) UNAL,
             11107                    /*K*  USED - Set if this DEF is used. */
             11108    1           3 LOOKUP_SECTNUM BIT(1) UNAL,
             11109                  /*K*  LOOKUP_SECTNUM is set if the section number is greater
             11110                        than 2048 (RU).  */
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:10   
             11111    1           3 SECTNUM UBIN(11) UNAL,
             11112                  /*K*  SECTNUM contains an entry number into the section
             11113                        table (TYPE 3).  */
             11114    1           3 ISADDR UBIN HALF UNAL,
             11115                  /*K*  ISADDR - Is Address (RU)  */
             11116    1           3 OFFSET REDEF ISADDR UBIN HALF UNAL,
             11117                  /*K*  OFFSET is the word offset from the origin of the section. */
             11118    1         2 NPOINTER SBIN HALF UNAL,
             11119                /*K*  NPOINTER is a word displacement into the name record
             11120                      (TYPE 1) locating the name (of this entry). */
             11121    1         2 CONSTNT BIT(1) UNAL,
             11122                /*K*  CONSTNT is a flag bit to determine the interpretation
             11123                      of word 0.
             11124                      If CONSTNT=0, word 0 is AD which contains LFLAGS,
             11125                                    SECTNUM, and ISADDR or OFFSET.
             11126                      If CONSTNT=1, word 0 is a constant value (VALUE)  */
             11127    1         2 LFLAGS UNAL,
             11128                /*K*  LFLAGS is the field reserved for loader to flag load
             11129                      time attributes and must be zero in the object unit. */
             11130    1           3 MULTIPLE BIT(1) UNAL,
             11131                  /*K*  MULTIPLE - Set if this DEF is multiply defined. */
             11132    1           3 USED BIT(1) UNAL,
             11133                  /*K*  USED - Set if this DEF is used. */
             11134    1           3 SOURCE UBIN(4) UNAL,
             11135                  /*K*  SOURCE - Source of this DEF */
             11136    1           3 IS_DCB BIT(1) UNAL,
             11137                  /*K* IS_DCB - Set if this is a DCB */
             11138    1           3 * BIT(10) UNAL,
             11139                  /*K*  * is reserved for future use and must be zero.  */
             11140    1         2 PROTECTION REDEF LFLAGS,
             11141                /*K*  PROTECTION is used for non-constant SYMDEF OR SEGDEF.  */
             11142    1           3 TYPE UBIN(5) UNAL,
             11143                  /*K*  TYPE is the Protection type.  */
             11144    1           3 * UBIN(12) UNAL;
             11145                  /*K*  * is reserved for future use and must be zero.  */

             11156    1   /*******************************************************************************
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:11   
             11157    1   *                                                                              *
             11158    1   *                          B$EDEF                                                 *
             11159    1   *                                                                              *
             11160    1   *******************************************************************************/

             11165    1   DCL 1 B$EDEF BASED ALIGNED,
             11166    1         2 LFLAGS UNAL,
             11167                /*K*  LFLAGS is the field reserved for loader to flag load
             11168                      time attributes of the definition and must be zero
             11169                      in the object unit. */
             11170    1           3 SOURCE UBIN(3) UNAL,
             11171                  /*K*  SOURCE - Source of this ENTDEF */
             11172    1           3 DEFINED BIT(1)  UNAL,
             11173                  /*K*  DEFINED - Set if this ENTDEF defined */
             11174    1           3 MULTIPLE BIT(1) UNAL,
             11175                  /*K*  MULTIPLE - Set if this ENTDEF is multiply defined. */
             11176    1           3 USED BIT(1) UNAL,
             11177                  /*K*  USED - Set if this ENTDEF is used. */
             11178    1           3 * BIT(2) UNAL,
             11179                  /*K*  * - Unused and must be zero. */
             11180    1           3 FAULTAGS BIT(1) UNAL,
             11181                  /*K*  FAULTAGS - Internal calls fault tags flag. */
             11182    1         2 OU UNAL,
             11183    1           3 SECTNUM UBIN BYTE UNAL,
             11184                  /*K*  SECTNUM contains an entry number into the section
             11185                        table (TYPE 3).  */
             11186    1           3 OFFSET UBIN HALF UNAL,
             11187                  /*K*  OFFSET is the word offset from the origin of the section. */
             11188    1         2 ISADDR REDEF OU UBIN(27) UNAL,
             11189                /*K*  ISADDR - Is Address (RU)  */
             11190    1         2 NPOINTER SBIN HALF UNAL,
             11191                /*K*  NPOINTER is a word displacement into the name record
             11192                      (TYPE 1) locating the name (of this entry). */
             11193    1         2 PRI BIT(1) UNAL,
             11194                /*K*  PRI is a one-bit flag denoting primary entry
             11195                      definition.
             11196                         PRI = 1, primary name (object unit name)
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:12   
             11197                             = 0, not primary name                 */
             11198    1         2 ALT BIT(1) UNAL,
             11199                /*K*  ALT is a one-bit flag denoting permissible alternate
             11200                      return.
             11201                         ALT = 1, alternate return allowed
             11202                             = 0, alternate return not allowed        */
             11203    1         2 CHECK BIT(1) UNAL,
             11204                /*K*  CHECK is a one-bit flag denoting arguments/parameter
             11205                      check and alternate return specification check.
             11206                         CHECK = 0, do not check for matching
             11207                                    arguments/parameters and alternate
             11208                                    return specification check.
             11209                               = 1, check for matching arguments/parameters
             11210                                    and alternate return specification.  */
             11211    1         2 CST UBIN(4) UNAL,
             11212                /*K*  CST is a 4-bit field denoting calling sequence type.
             11213                         CST =  0, Standard CP-6 Callable Procedure
             11214                         CST =  1, Nonstandard Call Type
             11215                         CST =  2, Standard CP-6 Procedure with MAIN attribute
             11216                         CST =  3, Standard CP-6 Procedure with ASYNC attribute
             11217                         CST =  4, Standard CP-6 Function Procedure; a
             11218                                   variable table entry will be present to
             11219                                   define the attributes of the function
             11220                         CST =  5, Same as 0, except USE, AVOID, or
             11221                                   MATERIALIZE attributes specified
             11222                         CST =  7, Same as 2, except USE, AVOID, or
             11223                                   MATERIALIZE attributes specified
             11224                         CST =  8, Same as 3, except USE, AVOID, or
             11225                                   MATERIALIZE attributes specified
             11226                         CST =  9, Same as 4, except USE, AVOID, or
             11227                                   MATERIALIZE attributes specified
             11228                         CST = 13, GCOS domain, save
             11229                         CST = 14, GCOS domain, no save
             11230                         CST = 15, Non-Callable Procedure.          */
             11231    1         2 NPARAM UBIN(11) UNAL;
             11232                /*K*  NPARAM is an 11-bit field denoting number of parameters. */
       58    11244              %TMPLT;
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:13   

             11256    1   /*******************************************************************************
             11257    1   *                                                                              *
             11258    1   *                          TMPLT                                                 *
             11259    1   *                                                                              *
             11260    1   *******************************************************************************/

             11265    1   DCL 1 VX$TMPLT           ALIGNED BASED, /* Template for defs                  */
             11266    1         2 A(0:3)       UBIN(18)  UNAL,    /* Array access                       */
             11267    1         2 A_SBIN(0:3) REDEF A    SBIN HALF UNAL,
             11268    1         2 W       REDEF     A,            /* By name                            */
             11269    1           3 WORD0       UBIN(36)  UNAL,   /* First word                         */
             11270    1           3 WORD1       UBIN(36)  UNAL;   /* Second word                        */
       59    11273        %SET LISTMAC='1'B;
       60    11274        %SET LISTSUB='1'B;
       61    11275        %SET LISTEXP='1'B;
       62    11276              %BANNER( ARG=B$DNAME );
             11277        %LSET LISTDIR='0'B;

             11284    1   /*******************************************************************************
             11285    1   *                                                                              *
             11286    1   *                          B$DNAME                                                 *
             11287    1   *                                                                              *
             11288    1   *******************************************************************************/

       63    11292              %B$DNAME( NAME=B$DNAME, STCLASS=BASED );
             11293            %LSET STR='BASED        ';
             11294            %IF
             11295                '0'B;
             11297            %ELSE;
             11298                %LSET INIT=/*;
             11299            %ENDIF;
             11300    1   DCL 1 B$DNAME BASED ALIGNED,
             11301    1         2 COUNT UBIN HALF UNAL /*(SIZEC(' ')) /**/,
             11302                /*K*  COUNT is the number of characters in the name */
             11303            %IF
             11304                '0'B;
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:14   
             11307            %ELSE;
             11308    1         2 TEXT CHAR(B$DNAME.COUNT) UNAL;
             11309            %ENDIF;
       64    11311              %P;
             11312        %LSET LISTDIR='0'B;

             11319    1   /*******************************************************************************
             11320    1   *                                                                              *
             11321    1   *                          PARAMETERS                                              *
             11322    1   *                                                                              *
             11323    1   *******************************************************************************/

       65    11327    1   DCL NPAGE           UBIN(36)  ALIGNED;
       66    11328    1   DCL TSIZE_READ      UBIN(36)  ALIGNED;
       67    11329    1   DCL FILE            UBIN(36)  ALIGNED;
       68    11330    1   DCL FILE_TYPE       UBIN(36)  ALIGNED;
       69    11331    1   DCL RTYPE           UBIN(36)  ALIGNED;
       70    11332    1   DCL START$          PTR       ALIGNED;
       71    11333    1   DCL PAGE_SIZE       SBIN(36)  ALIGNED;
       72    11334    1   DCL TSIZE           UBIN(36)  ALIGNED;
       73    11335    1   DCL DS              UBIN(36)  ALIGNED;
       74    11336    1   DCL AREA_SIZE       UBIN(36)  ALIGNED;
       75    11337    1   DCL CURR_P$         PTR  ALIGNED;
       76    11338    1   DCL SOURCE_P        SBIN WORD ALIGNED;
       77    11339        %E;
             11340        %LSET LISTDIR='0'B;

             11347    1   /*******************************************************************************
             11348    1   *                                                                              *
             11349    1   *                          ENTRY                                                 *
             11350    1   *                                                                              *
             11351    1   *******************************************************************************/

       78    11355        %ENTRIES;
             11356    1   DCL VXE$ERROR       ENTRY(4);
             11357    1   DCL VXE$ERR         ENTRY(3);
             11358    1   DCL VXE$MERC        ENTRY;
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:15   
             11359    1   DCL VXE$ERRMSG      ENTRY(3);
             11360    1   DCL VXR$READ        ENTRY( 3 );
             11361    1   DCL VXW$WRITE       ENTRY( 3 );
             11362    1   DCL VXW$WRITE_DO    ENTRY( 2 );
             11363    1   DCL VXD$B2C         ENTRY( 5 );
             11364    1   DCL VXD$C2B         ENTRY( 3 );
             11365    1   DCL VXA$GET         ENTRY( 3 );
             11366    1   DCL VXF$FREE        ENTRY( 3 );
             11367    1   DCL VXQ$SORT        ENTRY( 7 );
             11368    1   DCL VXY$YESNO       ENTRY( 1 );
       79    11370    1   DCL VXK$KEY         ENTRY(4);
       80    11371    1   DCL VXI$READ        ENTRY(4)  ALTRET;
       81    11372    1   DCL VXU$NEW_SECTNUM    ENTRY(4);
       82    11373        %PTR;
             11374        %LSET LISTDIR='0'B;

             11381    1   /*******************************************************************************
             11382    1   *                                                                              *
             11383    1   *                          PTR                                                 *
             11384    1   *                                                                              *
             11385    1   *******************************************************************************/

       83    11389        %POINTER;
             11390    1   DCL P$         PTR       ALIGNED AUTO;
             11391    1   DCL Q$         PTR       ALIGNED AUTO;
             11392    1   DCL R$         PTR       ALIGNED AUTO;
       84    11394    1   DCL WHERE$               PTR  ALIGNED   AUTO;
       85    11395    1   DCL CURR$                PTR  ALIGNED   AUTO;
       86    11396    1   DCL NAME$                PTR  ALIGNED   AUTO;
       87    11397    1   DCL SECT$                PTR  ALIGNED   AUTO;
       88    11398        %U;
             11399        %LSET LISTDIR='0'B;

             11406    1   /*******************************************************************************
             11407    1   *                                                                              *
             11408    1   *                          UBIN                                                 *
             11409    1   *                                                                              *
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:16   
             11410    1   *******************************************************************************/

       89    11414        %INDEX;
             11415    1   DCL I          UBIN(36) ALIGNED AUTO;
             11416    1   DCL SI REDEF I SBIN WORD ALIGNED;
             11417    1   DCL J          UBIN(36) ALIGNED AUTO;
             11418    1   DCL SJ REDEF J SBIN WORD ALIGNED;
             11419    1   DCL K          UBIN(36) ALIGNED AUTO;
             11420    1   DCL SK REDEF K SBIN WORD ALIGNED;
             11421    1   DCL L          UBIN(36) ALIGNED AUTO;
             11422    1   DCL SL REDEF L    SBIN WORD ALIGNED;
       90    11424    1   DCL LOOP            UBIN(36)  ALIGNED   AUTO;
       91    11425    1   DCL IN_PROG         UBIN(36)  ALIGNED   AUTO;
       92    11426    1   DCL SIZE            UBIN(36)  ALIGNED   AUTO;
       93    11427    1   DCL SIZE_READ       UBIN(36)  ALIGNED   AUTO;
       94    11428    1   DCL DUMMY           UBIN(36)  ALIGNED   AUTO;
       95    11429    1   DCL ENT_SIZE        UBIN(36)  ALIGNED   AUTO;
       96    11430    1   DCL NAME_X          UBIN(36)  ALIGNED   AUTO;
       97    11431    1   DCL SC##            UBIN(36)  ALIGNED   AUTO;
       98    11432    1   DCL SECTNUM         UBIN(36)  ALIGNED   AUTO;
       99    11433    1   DCL SC_IDX          UBIN(36)  ALIGNED   AUTO;
      100    11434    1   DCL CURR_SC_ENTRIES UBIN(36)  ALIGNED   AUTO;
      101    11435    1   DCL KEY             UBIN(36)  ALIGNED   AUTO;
      102    11436    1   DCL NAME_INX        UBIN(36)  ALIGNED   AUTO;
      103    11437    1   DCL CURR_NAME_SIZE  UBIN(36)  ALIGNED   AUTO;
      104    11438    1   DCL LAST_NAME_SIZE  UBIN(36)  ALIGNED   AUTO;
      105    11439    1   DCL SEGMENT         UBIN(36)  ALIGNED   AUTO;
      106    11440    1   DCL NODE#           UBIN(36)  ALIGNED   AUTO;
      107    11441        %S;
             11442        %LSET LISTDIR='0'B;

             11449    1   /*******************************************************************************
             11450    1   *                                                                              *
             11451    1   *                          SBIN                                                 *
             11452    1   *                                                                              *
             11453    1   *******************************************************************************/

PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:17   
      108    11457    1   DCL A_SIZE          SBIN WORD ALIGNED   AUTO;
      109    11458    1   DCL NAME_DISP       SBIN WORD ALIGNED   AUTO;
      110    11459    1   DCL SOURCE          SBIN WORD ALIGNED   AUTO;
      111    11460    1   DCL ARS             SBIN WORD ALIGNED   AUTO;
      112    11461    1   DCL DIFF            SBIN WORD ALIGNED   AUTO;
      113    11462        %BANNER( ARG=SUBS );
             11463        %LSET LISTDIR='0'B;

             11470    1   /*******************************************************************************
             11471    1   *                                                                              *
             11472    1   *                          SUBS                                                 *
             11473    1   *                                                                              *
             11474    1   *******************************************************************************/

      114    11478        %SUB_CST;
             11479        %EQU STD#=0 ;                           /* Standard CP6 callable procedure */
             11480        %EQU NSTD#=1 ;                          /* Non-standard Call Type  */
             11481        %EQU MAIN#=2 ;                /* Standard CP6 Procedure with MAIN attribute */
             11482        %EQU ASYNC#=3 ;               /* Standard CP6 Procedure with ASYNC attribute */
             11483        %EQU FUNC#=4 ;                /* Standard CP6 Function procedure; a variable */
             11484                                      /* table entry will be present to define the   */
             11485                                      /* attributes of the function.                 */
             11486        %EQU XSTD#=5 ;           /* Same as 0, except AVOID or MATERIALIZE specified */
             11487        %EQU XMAIN#=7 ;          /* Same as 2, except AVOID or MATERIALIZE specified */
             11488        %EQU XASYNC#=8 ;         /* Same as 3, except AVOID or MATERIALIZE specified */
             11489        %EQU XFUNC#=9 ;          /* Same as 4, except AVOID or MATERIALIZE specified */
             11490        %EQU DOMSAV#=13 ;                       /* GCOS domain, save  */
             11491        %EQU DOMNOSAV#=14 ;                     /* GCOS domain, no save  */
             11492        %EQU NOTPROC#=15 ;                      /* Non-callable procedure  */
      115    11494        %B$RECORDSUBS;
             11495        %EQU TYPHEAD=0 ;
             11496        %EQU TYPDNAM=1 ;
             11497        %EQU TYPRNAM=2 ;
             11498        %EQU TYPSECT=3 ;
             11499        %EQU TYPEDEF=4 ;
             11500        %EQU TYPEREF=5 ;
             11501        %EQU TYPSDEF=6 ;
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:18   
             11502        %EQU TYPSREF=7 ;
             11503        %EQU TYPSEGDEF=8 ;
             11504        %EQU TYPSEGREF=9 ;
             11505        %EQU TYPPROG=10 ;
             11506        %EQU SUBTYPPROG=0 ;
             11507        %EQU SUBTYPREL=1 ;
             11508        %EQU TYPLOGBLK=11 ;
             11509        %EQU TYPINTNTRY=12 ;
             11510        %EQU TYPEXST=13 ;
             11511        %EQU TYPVREBL=14 ;
             11512        %EQU TYPDBGNAM=15 ;
             11513        %EQU TYPLV1LB=16 ;
             11514        %EQU TYPLV1=17 ;
             11515        %EQU TYPDATASEG=18 ;
             11516        %EQU TYPRUM=20 ;
             11517        %EQU TYPBIRTH=21 ;
             11518        %EQU TYPPLOVER=22 ;
             11519        %EQU TYPCOMPID=23 ;
             11520        %EQU TYPROS=30 ;
      116    11522        %B$SECTIONSUBS;
             11523        %EQU DATASECTION=0 ;
             11524        %EQU CODESECTION=1 ;
             11525        %EQU UCOMSECTION=2 ;
             11526        %EQU RLCOMSECTION=3 ;
             11527        %EQU LCOMSECTION=4 ;
             11528        %EQU DCBSECTION=5 ;
             11529        %EQU ROSECTION=6 ;
             11530        %EQU RORLCOMSECTION=7 ;
             11531        %EQU ROLCOMSECTION=8 ;
             11532        %EQU EVENBOUNDSECTION=0 ;
             11533        %EQU ODDBOUNDSECTION=1 ;
             11534        %EQU EIGHTBOUNDSECTION=2 ;
             11535        %EQU PAGEBOUNDSECTION=3 ;
      117    11537        %SUB_LINKFLAGS;
             11538        %EQU SOURCE_OBJECT#=0 ;
             11539        %EQU SOURCE_SLIB#=1 ;
             11540        %EQU SOURCE_ALIB#=2 ;
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:19   
             11541        %EQU SOURCE_ULIB#=3 ;
             11542        %EQU SOURCE_RLIB#=4 ;
             11543        %EQU SOURCE_REMOVED#=5 ;
             11544        %EQU SOURCE_LINKER#=6 ;
      118    11546        %PLIST;
      119    11547        %F$DCB;
      120    11604        %EJECT;
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:20   
      121    11605    1         CURR$ = CURR_P$;
      122    11606    1         SOURCE = SOURCE_P;
      123    11607    1         KEY = FILE_TYPE;
      124    11608    1         IN_PROG = TSIZE;
      125    11609    1         NPAGE = 0;
      126    11610    1         TSIZE_READ = 0;
      127    11611    1         LOOP = ( IN_PROG + PAGE_SIZE - 1 ) / PAGE_SIZE - 1;
      128    11612    1         WHERE$ = START$;
      129    11613    1         A_SIZE = AREA_SIZE;
      130    11614    2         DO CASE( SOURCE );
      131    11615    2           CASE( 1, 2, 4 );
      132    11616    2             NODE# = 0;
      133    11617    2           CASE( ELSE );
      134    11618    2             NODE# = CURR$ -> VX$NODE.NUM;
      135    11619    2           END;
      136    11620    1         IF CURR$ -> VX$NODE.L_START_A$(RTYPE) = ADDR(NIL) THEN
      137    11621    1             CURR$ -> VX$NODE.L_START_A$(RTYPE) = WHERE$;
      138    11622    1         CURR$ -> VX$NODE.L_PREV_SIZE_A(RTYPE) = CURR$ -> VX$NODE.L_SIZE_A(RTYPE);
             11622                  /* Set previous size as current */
      139    11623    2         DO I = 0 TO LOOP;
      140    11624    2             CALL VXK$KEY( KEY, RTYPE, NODE#, I );
      141    11625    2             SIZE = PAGE_SIZE;
      142    11626    2             IF IN_PROG < PAGE_SIZE THEN SIZE = IN_PROG;
      143    11627    2   RETRY:
      144    11628    3             IF A_SIZE < SIZE AND ( FILE_TYPE = 1/*@RF*/ OR ( FILE_TYPE = 0/*@OF*/ AND
             11628                      RTYPE = 3 ) ) THEN DO;
      145    11629    3                 J = SIZE - A_SIZE;
      146    11630                      %ALLOCATE( PTR$=R$, TYPE=DS, SIZE=J );
      147    11637    3                 AREA_SIZE = AREA_SIZE + J;
      148    11638    3                 A_SIZE = A_SIZE + J;
      149    11639    3                END;
      150    11640    2             CALL VXI$READ( FILE, WHERE$, SIZE, KEY ) ALTRET( IO_ERROR );
      151    11641    2             IF RTYPE <= 2 AND FILE_TYPE ~= 1/*@RF*/ THEN SIZE_READ = SIZE;
      152    11642    2             ELSE SIZE_READ = VX_IO_SIZEW;
      153    11643    3             IF SIZE_READ ~= SIZE THEN DO; /* Error */
      154    11644    4                 IF FILE ~= 1/*@RF*/ AND RTYPE ~= 3 THEN DO;
      155    11645        /*E*  ERROR: VXU-E$SHORT_REC_VX-0
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:21   
      156    11646              MESSAGE: Object language error. Record size < page size.
      157    11647              DESCRIPTION: Self-explanatory.
      158    11648        */
      159    11649                          %SCREAM( ERR#=E$SHORT_REC_VX, MID="'U'", LEVEL=@E$S_VX );
      160    11652
      161    11653        /*E*  ERROR: VXU-E$SHORT_REC_CONT_VX-0
      162    11654              MESSAGE: Page size(words) = %U1. Actual record size(words) = %U2.
      163    11655              DESCRIPTION: Self-explanatory.
      164    11656        */
      165    11657                          %NUMBER( NUM1=SIZE, NUM2=VX_IO_SIZEW );
      166    11674                          %SCREAM( ERR#=E$SHORT_REC_CONT_VX, MID="'U'", LEVEL=@E$S_VX );
      167    11677    4                     CALL TELL_PAGE_TYPE( I, 3 );
      168    11678    4                    END;
      169    11679    3                END;
      170    11680    2             WHERE$ = PINCRW( WHERE$, SIZE_READ   );
      171    11681    2             A_SIZE = A_SIZE - SIZE_READ;
      172    11682    2             IN_PROG = IN_PROG - SIZE;
      173    11683    2             TSIZE_READ = TSIZE_READ + SIZE_READ;
      174    11684    2             NPAGE = NPAGE + 1;
      175    11685    2            END;                           /* Do i = 0 to loop; */
      176    11686
      177    11687        %EJECT;
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:22   
      178    11688    2         DO WHILE( '0'B );                 /* Read failed */
      179    11689    2   IO_ERROR:                       /* Code executed only by altret from VXI$READ */
      180    11690    3             DO CASE( VX_IO_STATUS );
      181    11691    3               CASE( 0/*@IO_EOF*/ );
      182    11692        /*E*  ERROR: VXU-E$UNEXPECTED_EOF_VX-0
      183    11693              MESSAGE: Object language error. Unexpected end of file condition.
      184    11694              DESCRIPTION: Self-explanatory.
      185    11695        */
      186    11696                      %SCREAM( ERR#=E$UNEXPECTED_EOF_VX, MID="'U'", LEVEL=@E$F_D_VX );
      187    11699    3                 CALL TELL_PAGE_TYPE( NPAGE, 4 );
      188    11700
      189    11701    3               CASE( 1/*@IO_NOKEY*/);
      190    11702    3                 IF FILE = 1/*@RF*/  AND  ( RTYPE >= 1  AND  RTYPE <= 9 )
      191    11703    4                 THEN DO;
      192    11704    4                     IF TSIZE_READ = 0 THEN RETURN;
      193    11705    4                     ELSE ;                /* Read error is ok */
      194    11706    4                    END;
      195    11707    3                 ELSE
      196    11708    3                     IF FILE = 0/*@OF*/ AND RTYPE = 3  AND  NPAGE > 0
      197    11709    3                     THEN ;                /* Read error is ok */
      198    11710    4                     ELSE DO;
      199    11711        /*E*  ERROR: VXU-E$UNEXPECTED_NOKEY_VX-0
      200    11712              MESSAGE: Object language error. Unexpected no such key condition.
      201    11713              DESCRIPTION: Self-explanatory.
      202    11714        */
      203    11715                              %SCREAM( ERR#=E$UNEXPECTED_NOKEY_VX, MID="'U'", LEVEL=
             11715                                  @E$F_D_VX );
      204    11718    4                         CALL TELL_PAGE_TYPE( NPAGE, 4 );
      205    11719    4                        END;
      206    11720
      207    11721    3               CASE( 2/*@IO_LD*/ );
      208    11722    3                 IF FILE = 1/*@RF*/ AND
      209    11723    3                         ( RTYPE = 3 OR RTYPE = 2 OR RTYPE = 5
      210    11724    3                         OR RTYPE = 7 OR RTYPE = 9 )
      211    11725    3                         OR
      212    11726    3                         FILE = 0/*@OF*/ AND RTYPE = 3
      213    11727    4                 THEN DO;
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:23   
      214    11728    4                     SIZE = SIZE + SIZE;
      215    11729    4                     GOTO RETRY;
      216    11730    4                    END;
      217    11731    4                 ELSE DO;                  /* Error */
      218    11732        /*E*  ERROR: VXU-E$UNEXPECTED_LD_VX-0
      219    11733              MESSAGE: Object language error. Unexpected lost data condition.
      220    11734              DESCRIPTION: Self-explanatory.
      221    11735        */
      222    11736                          %SCREAM( ERR#=E$UNEXPECTED_LD_VX, MID="'U'", LEVEL=E$F_D_VX );
      223    11739    4                     CALL TELL_PAGE_TYPE( NPAGE, 4 );
      224    11740    4                    END;
      225    11741    3               END;                        /* Do case( VX_IO_STATUS ); */
      226    11742    2            END;                           /* Do never */
      227    11743        %EJECT;
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:24   
      228    11744    1         ENT_SIZE = VX_REC_SIZE_A(RTYPE);
      229    11745    1         IF RTYPE = 3 AND FILE_TYPE = 0/*@OF*/ THEN ENT_SIZE = 2;
      230    11746    1         CURR$ -> VX$NODE.L_SIZE_A(RTYPE) = CURR$ -> VX$NODE.L_SIZE_A(RTYPE) +
             11746                  TSIZE_READ; /* Accumulate total size read */
      231    11747    1         CURR$ -> VX$NODE.L_STOP_A$(RTYPE) =
      232    11748    1                 PINCRW( START$, TSIZE_READ - ENT_SIZE );
      233    11749    2         IF RTYPE >= 3 AND RTYPE <= 9 THEN DO;
      234    11750    2             NAME_X = VX_MATCH_NAME_A(RTYPE);
      235    11751    2             NAME$  = PINCRW( CURR$ -> VX$NODE.L_START_A$(NAME_X),
      236    11752    2                     CURR$ -> VX$NODE.L_PREV_SIZE_A(NAME_X) );
      237    11753    2             NAME_INX = VX_NAME_DISP_A(RTYPE);
      238    11754    2             CURR_NAME_SIZE = CURR$ -> VX$NODE.L_SIZE_A(NAME_X)
      239    11755    2                     - CURR$ -> VX$NODE.L_PREV_SIZE_A(NAME_X);
      240    11756    2             P$ = START$;
      241    11757    3             IF FILE = 1/*@RF*/ AND FILE_TYPE = 1/*@RF*/ THEN DO;
      242    11758    4                 DO WHILE( P$ < WHERE$ );
      243    11759    4                     NAME_DISP = P$ -> VX$TMPLT.A_SBIN(NAME_INX);
      244    11760    5                     IF NAME_DISP >= 0 THEN DO;
      245    11761    5                         IF NAME_DISP > CURR_NAME_SIZE THEN CALL OUT_OF_RANGE;
      246    11762    5                         ELSE
      247    11763    5                             IF PINCRW(NAME$,NAME_DISP)->B$DNAME.COUNT > 511
      248    11764    6                             THEN DO;
      249    11765    6                                 J = PINCRW( NAME$, NAME_DISP) -> B$DNAME.COUNT;
      250    11766    6                                 CALL BAD_NAME_SIZE( J );
      251    11767    6                                END;
      252    11768    5                        END;               /* If NAME_DISP >= 0 then do; */
      253    11769    4                     ELSE IF RTYPE ~= 3 THEN CALL OUT_OF_RANGE;
      254    11770        /**/
      255    11771    4                     P$ = PINCRW( P$, ENT_SIZE );
      256    11772    4                    END;                   /* Do while( P$ < WHERE$ ); */
      257    11773        /**/
      258    11774    3                END;               /* If file = @RF and FILE_TYPE = @RF then do; */
      259    11775    3             ELSE DO;
      260    11776        /**/
      261    11777        /**/
      262    11778        /**/
      263    11779    3                 LAST_NAME_SIZE = CURR$ -> VX$NODE.L_PREV_SIZE_A(NAME_X);
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:25   
      264    11780    3                 CURR_SC_ENTRIES = ( CURR$ -> VX$NODE.L_SIZE.SC
      265    11781    3                         -  CURR$ -> VX$NODE.L_PREV_SIZE.SC ) / SIZEW( VX$SC ) ;
      266    11782    4                 DO WHILE ( P$ <  WHERE$ );
      267    11783    4                     NAME_DISP = P$ -> VX$TMPLT.A_SBIN(NAME_INX);
      268    11784    5                     IF NAME_DISP >= 0 THEN DO; /* A real name */
      269    11785    5                         IF NAME_DISP > CURR_NAME_SIZE THEN
      270    11786    5                             CALL OUT_OF_RANGE; /* ERROR: Out of bounds */
      271    11787    5                         Q$ = PINCRW( NAME$, NAME_DISP );
      272    11788    5                         J = Q$ -> B$DNAME.COUNT; /* Get size */
      273    11789    6                         IF J > 511 THEN DO; /* ERROR: Not poninting properly */
      274    11790    6                             CALL BAD_NAME_SIZE( J );
      275    11791    6                            END;
      276    11792    5                         NAME_DISP  = NAME_DISP + LAST_NAME_SIZE;
      277    11793    6                         IF NAME_DISP > BITBIN('777777'O) THEN DO;
      278    11794        /*E* ERROR: VXU-E$NAMEDISP_TOO_BIG_VX-C
      279    11795        MESSAGE: Internal link error: Name displacement > 777777(octal) in VXU$PREAD.
      280    11796        */
      281    11797                                  %SCREAM( ERR#=E$NAMEDISP_TOO_BIG_VX,LEVEL=@E$F_VX,MID=
             11797                                      "'U'" );
      282    11800    6                            END;
      283    11801    5                         P$ -> VX$TMPLT.A(NAME_INX) = NAME_DISP;
      284    11802    5                        END;
      285    11803    4                     ELSE IF RTYPE ~= 3 THEN CALL OUT_OF_RANGE;
      286    11804    5                     IF SOURCE >= 0 THEN DO;
      287    11805    6                         DO CASE( RTYPE );
      288    11806    6                           CASE( 3 );
      289    11807    7                             IF P$ -> VX$SECT.SEGMENT THEN DO;
      290    11808    8                                 IF VX_OD.SIN.SLIB THEN DO;
      291    11809        /*E* ERROR: VXU-E$SEGS_ILLEGAL_VX-C
      292    11810             MESSAGE: Initialized data segments are not allowed in shared libraries.
      293    11811        */
      294    11812                                          %SCREAM( ERR#=E$SEGS_ILLEGAL_VX, LEVEL=@E$F_VX,
             11812                                              AUX=@E$OUOF_VX, MID="'U'" );
      295    11815    8                                    END;
      296    11816    7                                 NAME_DISP = P$ -> VX$SECT.SEG_NPOINTER;
      297    11817    8                                 IF NAME_DISP > 0 THEN DO;
      298    11818    8                                     IF NAME_DISP > CURR_NAME_SIZE THEN
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:26   
      299    11819    8                                         CALL OUT_OF_RANGE;
      300    11820    8                                     Q$ = PINCRW( NAME$, NAME_DISP );
      301    11821    8                                     J = Q$ -> B$DNAME.COUNT;
      302    11822    8                                     IF J > 511 THEN CALL BAD_NAME_SIZE(J);
      303    11823    8                                    END;
      304    11824    7                                 J = P$ -> VX$SECT.TYPE;
      305    11825    8                                 DO CASE (J);
      306    11826    8                                   CASE (0,6,3,4,7,8);
      307    11827    8                                   CASE (ELSE);
      308    11828        /*E*  ERROR: VXU-E$ILLEGAL_SEG_SEC_TYPE_VX-0
      309    11829              MESSAGE: Object language error.  Illegal type specified for a section
      310    11830                       which defines a segment.  Type = %U1.
      311    11831         A segment section must be of type READ/WRITE or READ ONLY or LABELLED COMMON (any t
             11831        ype).
      312    11832              DESCRIPTION: Self-explantory.
      313    11833        */
      314    11834                                          %NUMBER( NUM1=J, SIZE1=3, BASE1=10 );
      315    11851                                          %SCREAM(
      316    11852                                          ERR#=E$ILLEGAL_SEG_SEC_TYPE_VX,
      317    11853                                          MID="'U'", LEVEL=@E$F_D_VX );
      318    11856    8                                     K = POFFW( P$, START$ ) / PAGE_SIZE;
      319    11857    8                                     CALL TELL_PAGE_TYPE( K, 4 );
      320    11858    8                                   END;
      321    11859    7                                 IF  NAME_DISP = -1
      322    11860    7                                 THEN P$ -> VX$SECT.SEG_NPOINTER = 0
             11860                                          /*@DEFAULT_DATA_SEGMENT*/;
      323    11861    8                                 ELSE DO;
      324    11862    8                                     SEGMENT = 0;
      325    11863    9                                     DO WHILE( SEGMENT < 6  AND  Q$ -> B$DNAME.TEXT
      326    11864    9                                             ~= VX_SEG_NAME(SEGMENT) );
      327    11865    9                                         SEGMENT = SEGMENT + 1;
      328    11866    9                                        END;
      329    11867    9                                     IF SEGMENT = 6 THEN DO;
      330    11868        /*E*  ERROR: VXU-E$ILLEGAL_SEG_NAME_VX-0
      331    11869              MESSAGE: Unrecognized data segment name specified for segment section.
      332    11870                       Name = %U1.  'DS3SID' will be used.
      333    11871                       Legal names recognized by the linker for segment sections are:
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:27   
      334    11872                       'DS3SID', 'DS4SID', 'DS5SID', 'DS6SID', 'DS7SID' and 'DS8SID'.
      335    11873              DESCRIPTION: Self-explanatory.
      336    11874        */
      337    11875    9                                         VX_EFIELD1.COUNT = Q$ -> B$DNAME.COUNT;
      338    11876    9                                         VX_EFIELD1.CHARS = Q$ -> B$DNAME.TEXT;
      339    11877                                              %SCREAM(
      340    11878                                              ERR#=E$ILLEGAL_SEG_NAME_VX,
      341    11879                                              MID="'U'", LEVEL=@E$S_D_VX );
      342    11882    9                                         K = POFFW( P$, START$ ) / PAGE_SIZE;
      343    11883    9                                         CALL TELL_PAGE_TYPE( K, 3 );
      344    11884    9                                         P$ -> VX$SECT.SEG_NPOINTER = 0/*@DS3SID*/;
      345    11885    9                                        END;
      346    11886    9                                     ELSE DO;
      347    11887    9                                         P$ -> VX$SECT.SEG_NPOINTER = SEGMENT;
      348    11888    9                                        END;
      349    11889    8                                    END;
      350    11890    7                                END;
      351    11891
      352    11892    6                           CASE( 6, 8 );
      353    11893    7                             IF P$ -> VXD$TMPLT.CONSTNT THEN DO;
      354    11894    7                                 P$ -> VXD$TMPLT.LFLAGS.MULTIPLE = '0'B/*@NO_B*/;
      355    11895    7                                 P$ -> VXD$TMPLT.LFLAGS.USED = '0'B/*@NO_B*/;
      356    11896    7                                 IF P$->VXD$TMPLT.LFLAGS.SOURCE ~= 5
      357    11897    7                                 THEN
      358    11898    7                                     P$ -> VXD$TMPLT.LFLAGS.SOURCE = SOURCE;
      359    11899    7                                 P$ -> VXD$TMPLT.LFLAGS.IS_DCB = '0'B/*@FALSE_B*/;
      360    11900    7                                END;
      361    11901    6                             ELSE GOTO CHECK_DEFINED;
      362    11902
      363    11903
      364    11904    6                           CASE( 4 );
      365    11905    6   CHECK_DEFINED:
      366    11906    7                             IF NOT P$ -> VXD$TMPLT.AD.LFLAGS.DEFINED THEN DO;
      367    11907    7                                 SC## = P$ -> VXD$TMPLT.AD.SECTNUM;
             11907                                          /* Get sections index */
      368    11908    8                                 IF SC## > CURR_SC_ENTRIES THEN DO; /* Error */
      369    11909        /*E*  ERROR: VXU-E$BAD_DEF_TO_SC_VX-0
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:28   
      370    11910              MESSAGE: Object language error. Ref/def index to sections is out of bounds.
      371    11911              DESCRIPTION: Self-explanatory.
      372    11912        */
      373    11913                                          %SCREAM(
      374    11914                                          ERR#=E$BAD_DEF_TO_SC_VX,
      375    11915                                          MID="'U'", LEVEL=@E$F_D_VX );
      376    11918    8                                     CALL DISPLAY_RANGE( CURR_SC_ENTRIES, SC## );
      377    11919    8                                    END;
      378    11920    7                                 SECT$ = PINCRW( VX_LAST_SC$, SC## * SIZEW(VX$SC) );
      379    11921    8                                 IF SECT$ -> VX$SC.SIZE <= P$ -> VXD$TMPLT.AD.OFFSET
             11921                                          THEN DO;
      380    11922    8                                     IF RTYPE = 4  AND  P$ -> B$EDEF.CST = 15
      381    11923    8                                     THEN ; /* Let it go */
      382    11924    9                                     ELSE DO;
      383    11925        /*E*  ERROR: VXU-E$BAD_DEF_OFFSET_TO_SC_VX-0
      384    11926              MESSAGE: Offset value (%U1) is beyond section size for
      385    11927                       %U2 DEFINITION: %U3.
      386    11928              DESCRIPTION: Self-explanatory.
      387    11929        */
      388    11930    9                                         K = P$ -> VXD$TMPLT.AD.OFFSET;
      389    11931                                              %CHECK( SEV = 4 );
      390    11934                                              %NUMBER( NUM1=K, SIZE1=6, BASE1=10 );
      391    11951   10                                         DO CASE( RTYPE );
      392    11952   10                                           CASE( 4 );
      393    11953   10                                             VX_EFIELD2.COUNT = 5;
      394    11954   10                                             VX_EFIELD2.CHARS = 'ENTRY';
      395    11955   10                                           CASE( 6 );
      396    11956   10                                             VX_EFIELD2.COUNT = 4;
      397    11957   10                                             VX_EFIELD2.CHARS = 'DATA';
      398    11958   10                                           CASE( 8 );
      399    11959   10                                             VX_EFIELD2.COUNT = 7;
      400    11960   10                                             VX_EFIELD2.CHARS = 'SEGMENT';
      401    11961   10                                           END;
      402    11962    9                                         VX_EFIELD3.COUNT = Q$ -> B$DNAME.COUNT;
      403    11963    9                                         VX_EFIELD3.CHARS = Q$ -> B$DNAME.TEXT;
      404    11964                                              %SCREAM(
      405    11965                                              ERR#=E$BAD_DEF_OFFSET_TO_SC_VX,
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:29   
      406    11966                                              MID="'U'", LEVEL=@E$S_VX );
      407    11969    9                                         K = POFFW( P$, START$ ) / PAGE_SIZE;
      408    11970    9                                         CALL TELL_PAGE_TYPE( K, 3 );
      409    11971    9                                        END;
      410    11972    8                                    END;
             11972                              /* Else do - if rtype=typedef and P$->VXD$TMPLT = %NOTPROC# */
      411    11973    7                                 SC## = SC## + VX_LAST_SC_BASE;
      412    11974    8                                 IF SC## > BITBIN('777777'O) THEN DO;
      413    11975        /*E* ERROR: VXU-E$SECTNUM_TOO_BIG_VX-C
      414    11976             MESSAGE: Internal link error: Section number > 777777 (octal) in VXU$PREAD.
      415    11977        */
      416    11978                                          %SCREAM( ERR#=E$SECTNUM_TOO_BIG_VX,LEVEL=@E$F_VX,
             11978                                              MID="'U'" );
      417    11981    8                                    END;
      418    11982    8                                 IF SC## < 2048 THEN DO;
      419    11983    8                                     P$ -> VXD$TMPLT.AD.LOOKUP_SECTNUM = '0'B;
      420    11984    8                                     P$ -> VXD$TMPLT.AD.SECTNUM = SC## ;
      421    11985    8                                    END;
      422    11986    8                                 ELSE DO;
      423    11987    8                                     CALL VXU$NEW_SECTNUM(P$->VXD$TMPLT,VX_CURR$->
             11987                                              VX$NODE.NUM,SC##);
      424    11988    8                                    END;
      425    11989    7                                 P$ -> VXD$TMPLT.AD.LFLAGS.SOURCE = SOURCE;
      426    11990    7                                END;
             11990                                       /* If ~ P$ -> VXD$TMPLT.AD.LFLAGS.DEFINED then do; */
      427    11991    6                             ELSE
      428    11992    6                                 IF P$->VXD$TMPLT.AD.LFLAGS.SOURCE ~= 5
      429    11993    6                                 THEN
      430    11994    6                                     P$->VXD$TMPLT.AD.LFLAGS.SOURCE = SOURCE;
      431    11995
      432    11996
      433    11997    6                             P$ -> VXD$TMPLT.AD.LFLAGS.USED = '0'B/*@NO_B*/;
      434    11998    6                             P$ -> VXD$TMPLT.AD.LFLAGS.MULTIPLE = '0'B/*@NO_B*/;
      435    11999    6                           END;            /* Do case( rtype ); */
      436    12000    5                        END;               /* If source >= 0 then do; */
      437    12001    4                     P$ = PINCRW( P$, ENT_SIZE );
      438    12002    4                    END;
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:30   
      439    12003
      440    12004
      441    12005    3                END;   /* Else do; - if file  = @RF and FILE_TYPE = @RF then do; */
      442    12006    2            END;
      443    12007        %EJECT;
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:31   
      444    12008    1   BAD_NAME_SIZE: PROC( NAME_SIZE );
      445    12009
      446    12010    2   DCL NAME_SIZE UBIN;
      447    12011
      448    12012        /*E*  ERROR: VXU-E$NAME_COUNT_VX-0
      449    12013              MESSAGE: Object language error. Range error on name size. Value = %U1.
      450    12014              DESCRIPTION: Self-explanatory.
      451    12015        */
      452    12016
      453    12017              %NUMBER( NUM1=NAME_SIZE, SIZE1=12, BASE1=10 );
      454    12034
      455    12035              %SCREAM( ERR#=E$NAME_COUNT_VX, MID="'U'", LEVEL=@E$F_D_VX );
      456    12038
      457    12039    2         K = POFFW( P$, START$ ) / PAGE_SIZE;
      458    12040
      459    12041    2         CALL TELL_PAGE_TYPE( K, 4 );
      460    12042
      461    12043    2   END BAD_NAME_SIZE;
      462    12044
      463    12045        %EJECT;
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:32   
      464    12046    1   OUT_OF_RANGE: PROC;
      465    12047
      466    12048        /*E*  ERROR: VXU-E$NAME_RANGE_VX-0
      467    12049              MESSAGE: Object language error. Name displacement is out of bounds.
      468    12050              DESCRIPTION: Self-explantory.
      469    12051        */
      470    12052
      471    12053              %SCREAM( ERR#=E$NAME_RANGE_VX, MID="'U'", LEVEL=@E$F_D_VX );
      472    12056
      473    12057    2         CALL DISPLAY_RANGE( CURR_NAME_SIZE, NAME_DISP );
      474    12058
      475    12059    2   END OUT_OF_RANGE;
      476    12060
      477    12061        %EJECT;
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:33   
      478    12062    1   DISPLAY_RANGE: PROC( RANGE#, ACCESS );
      479    12063
      480    12064    2   DCL RANGE# UBIN;
      481    12065    2   DCL ACCESS UBIN;
      482    12066
      483    12067        /*E*  ERROR: VXU-E$DISPLAY_NAME_RANGE_VX-0
      484    12068              MESSAGE: Permissible range: 0 - %U1. Attempted access = %U2.
      485    12069              DESCRIPTION: Self-explanatory.
      486    12070        */
      487    12071
      488    12072              %NUMBER(
      489    12073                      NUM1=RANGE#, SIZE1=6, BASE1=10,
      490    12074                      NUM2=ACCESS, SIZE2=6, BASE2=10 );
      491    12091
      492    12092              %SCREAM( ERR#=E$DISPLAY_NAME_RANGE_VX, MID="'U'", LEVEL=@E$F_D_VX );
      493    12095
      494    12096    2         K = POFFW( P$, START$ ) / PAGE_SIZE;
      495    12097
      496    12098    2         CALL TELL_PAGE_TYPE( K, 4 );
      497    12099
      498    12100    2   END DISPLAY_RANGE;
      499    12101
      500    12102        %EJECT;
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:34   
      501    12103    1   TELL_PAGE_TYPE: PROC( PAGE#, SEVERITY );
      502    12104
      503    12105    2   DCL PAGE#    UBIN;
      504    12106    2   DCL SEVERITY UBIN;
      505    12107
      506    12108        /*E*  ERROR: VXU-E$IN_PAGE_OF_REC_TYPE_VX-0
      507    12109              MESSAGE: The error occured in page %U1 of record type %U2.
      508    12110              DESCRIPTION: Self-explanatory.
      509    12111        */
      510    12112
      511    12113              %NUMBER(
      512    12114                      NUM1=PAGE#, SIZE1=3, BASE1=10,
      513    12115                      NUM2=RTYPE, SIZE2=3, BASE2=10 );
      514    12132
      515    12133              %SCREAM( ERR#=E$IN_PAGE_OF_REC_TYPE_VX, MID="'U'", LEVEL=SEVERITY,
      516    12134                       AUX=@E$OUOF_VX );
      517    12137        /*
      518    12138                       Note that if severity = 4 the above call to VXE$ERROR will
      519    12139                       cause VXE$ERROR to call M$ERR.
      520    12140        */
      521    12141    2   END TELL_PAGE_TYPE;
      522    12142
      523    12143
      524    12144    1   END VXU$PREAD;
      525    12145        %EOD;

PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:35   
--  Include file information  --

   F_DCB_D.:E05TOU  is referenced.
   VX_DCB_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_FIXED_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VX_MACRO_C.:E05TOU  is referenced.
   VX_PERR_C.:E05TOU  is referenced.
   VX_SUBS_C.:E05TOU  is referenced.
   VX_SWITCH_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   VX_INC_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VXU$PREAD.

   Procedure VXU$PREAD requires 955 words for executable code.
   Procedure VXU$PREAD requires 64 words of local(AUTO) storage.

PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:36   

 Object Unit name= VXU$PREAD                                  File name= VXU$PREAD.:E05TOU
 UTS= JUL 30 '97 08:45:16.44 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  LblCom even  none    96    140  VX_CONST_DCB
    2  RoData even  UTS      5      5  VXU$PREAD
    3   Proc  even  none   955   1673  VXU$PREAD
    4  RoData even  none    99    143  VXU$PREAD

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     3      0   yes            yes      Std       12  VXU$PREAD

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       4 VXK$KEY
         yes           Std       3 VXA$GET
 yes     yes           Std       4 VXI$READ
         yes           Std       4 VXE$ERROR
         yes           Std       5 VXD$B2C
         yes           Std       4 VXU$NEW_SECTNUM
                       nStd      0 X66_AUTO_N
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:37   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  VX_OU_HEAD                            VX_LAST_SC$
     VX_LAST_SC_BASE                       VX_CURR$                              VX_ERRORS
     VX_ERR_SEV                            VX_M_FREE                             VX_M_ALL
     VX_M_BASE_PTR                         VX_OD                                 VX_EFIELD1
     VX_EFIELD2                            VX_EFIELD3                            VX_IO_STATUS
     VX_IO_SIZEW                           VX_REC_SIZE_A                         VX_MATCH_NAME_A
     VX_NAME_DISP_A                        VX_SEG_NAME                           B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:38   


        1        1       /*M* VXU$PREAD - To read page records of types 1 through 9 from object files and run
                 1         files*/
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMR,PLM=6,IND=4,CSU=2,EXM=0,ECU=2,MOC,DCI=4,CRT=4,CTI=8,CCC */
        8        8        /*F* NAME:        VXU$PREAD
        9        9             PURPOSE:     To read page records of types 1 through 9 from object files
       10       10                          and run files.
       11       11             DESCRIPTION:
       12       12            VXU$PREAD is passed eleven arguments of which the first two are returned
       13       13            variables while the remaining nine are value parameters. NPAGE is a returned
       14       14            variable which contains the number of pages read for the type of record.
       15       15            TSIZE_READ is a variable which returns the number of words read for the
       16       16            type of record.  FILE is a passed variable which indicates which DCB the
       17       17            read(s) are to be done through. FILE_TYPE is a passed variable which
       18       18            indicates which file organization is assumed either an object file or a run
       19       19            file. RTYPE is the record type; RANGE: 0-9. START$ is the locator which
       20       20            points at the initial area in which the records are to be placed. PAGE_SIZE
       21       21            is the size in words of all records for this type except possibly the last.
       22       22            TSIZE is the total size in words of all records for this type(rtype).
       23       23            DS is the internal data segment identifier in which the records are
       24       24            are to be placed. CURR_P$ is a pointer to the node which owns these records.
       25       25            SOURCE_P is a variable which labels the records as to their origin(library,
       26       26            object, shared library, etc.).
       27       27            VXU$PREAD reads paged records for a given type and makes them suitable for
       28       28            further processing. This is accomplished by updating name pointers where
       29       29            appropriate (and doing some verification that indeed the name displacements
       30       30            locate valid name strings).  Definition entrys which are virgin(i.e. Not
       31       31            defined) are bound to their proper section declaration and all linker flags
       32       32            for them are reset. Various integrity and consistency checks are performed
       33       33            to ensure the soundness of the link process.      */
       34       34
       35       35
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:39   
       36       36
       37       37        VXU$PREAD:
       38       38              PROC(

     38  3 000000   000000 700200 xent  VXU$PREAD    TSX0  ! X66_AUTO_N
         3 000001   000100 000014                    ZERO    64,12

       39       39                      NPAGE,                    /* # of pages read-inc by 1 each read */
       40       40                      TSIZE_READ,               /* Total word size read */
       41       41                      FILE,                     /* Dcb to read thru */
       42       42                      FILE_TYPE,                /*  File type */
       43       43                      RTYPE,                    /* Record type */
       44       44                      START$,                   /* Beginning of area to read into */
       45       45                      PAGE_SIZE,                /* Page size */
       46       46                      TSIZE,                    /* Total size to read */
       47       47                      DS,                       /* Data SEGMENT/INTERNAL# */
       48       48                      AREA_SIZE,                /* Initial area size allocated */
       49       49                      CURR_P$,                  /* Current node */
       50       50                      SOURCE_P);                /* From whence it came */
       51       51        /**/
       52       52        /**/
       53       53        /**/
       54       54        %INCLUDE VX_INC_C;
       55    10770              %VX$NODE;

             10782    1   /*******************************************************************************
             10783    1   *                                                                              *
             10784    1   *                          VX$NODE                                                *
             10785    1   *                                                                              *
             10786    1   *******************************************************************************/

             10802    1   DCL 1 VX$NODE      ALIGNED    BASED,
             10803    1         2 SON$ PTR /*(ADDR(NIL))*/, /* Son pointer                      */
             10804    1         2 BROTHER$ PTR /*(ADDR(NIL))*/, /* Brother pointer              */
             10805    1         2 FATHER$ PTR /*(ADDR(NIL))*/, /* Father pointer                */
             10806    1         2 PATH$ PTR /*(ADDR(NIL))*/, /* Path   pointer                  */
             10807    1         2 HEAD$       PTR /*(ADDR(NIL))*/, /* Head pointer to
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:40   
             10808                              to list of file nodes for this node            */
             10809    1         2 TAIL$ PTR /*(ADDR(NIL))*/, /* Tail pointer to list            */
             10810    1         2 SHARED_LIB_HEAD$ PTR /*(ADDR(NIL))*/,
             10810                  /* Head pointer to shared library list */
             10811    1         2 LIB_HEAD$         PTR /*(ADDR(NIL))*/,
             10811                  /* Head pointer to list of shared libraries
             10812                                          which have been mapped to included libraries */
             10813    1         2 NUM          UBIN(36)  UNAL,    /* Node number                        */
             10814    1         2 DEPTH          UBIN(36)  UNAL,  /* Depth; ROOT=0*/
             10815    1         2 ADDR_START_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array            */
             10816    1         2 ADDR_START REDEF  ADDR_START_A,
             10817    1           3 RDATA       SBIN WORD,   /* First address for this node in data     */
             10818    1           3 RPROC       SBIN WORD,   /* First address for this node in proc     */
             10819    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
             10820    1         2 ADDR_STOP_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array            */
             10821    1         2 ADDR_STOP  REDEF  ADDR_STOP_A,
             10822    1           3 RDATA       SBIN WORD,        /* Last address for this node in data */
             10823    1           3 RPROC       SBIN WORD,        /* Last address for this node in proc */
             10824    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
             10825    1         2 START_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array           */
             10826    1         2 START_PAGE# REDEF START_PAGE#_A,
             10827    1           3 RDATA       SBIN WORD,   /* First page    for this node in data     */
             10828    1           3 RPROC       SBIN WORD,   /* First page    for this node in proc     */
             10829    1           3 ROS       SBIN WORD,          /* First page   for program in ros    */
             10830    1         2 STOP_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array*/
             10831    1         2 STOP_PAGE#  REDEF STOP_PAGE#_A,
             10832    1           3 RDATA       SBIN WORD,   /* Last  page    for this node in data     */
             10833    1           3 RPROC       SBIN WORD,   /* Last  page    for this node in proc     */
             10834    1           3 ROS       SBIN WORD,          /* Last  page   for program in ros    */
             10835    1         2 START_SC_ALL$ PTR /*(ADDR(NIL))*/,
             10835                  /* Starting pointer for common sections for this node */
             10836    1         2 STOP_SC_ALL$ PTR /*(ADDR(NIL))*/,
             10836                  /* Stopping pointer for common sections for this node */
             10837    1         2 L_START,
             10838    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
             10839    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
             10840    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:41   
             10841    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
             10842    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
             10843    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
             10844    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
             10845    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
             10846    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
             10847    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
             10848    1         2 L_START_A$(0:9)     REDEF L_START PTR,
             10849    1         2 L_STOP,
             10850    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
             10851    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
             10852    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
             10853    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
             10854    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
             10855    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
             10856    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
             10857    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
             10858    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
             10859    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
             10860    1         2 L_STOP_A$(0:9) REDEF   L_STOP    PTR,
             10861    1         2 L_SIZE,
             10862    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
             10863    1           3 DN      UBIN /*(0)*/, /* Def names                          */
             10864    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
             10865    1           3 SC      UBIN /*(0)*/, /* Sections                           */
             10866    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
             10867    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
             10868    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
             10869    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
             10870    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
             10871    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
             10872    1         2 L_SIZE_A(0:9)  REDEF   L_SIZE    UBIN,
             10873    1         2 L_PREV_SIZE,
             10874    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
             10875    1           3 DN      UBIN /*(0)*/, /* Def names                          */
             10876    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
             10877    1           3 SC      UBIN /*(0)*/, /* Sections                           */
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:42   
             10878    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
             10879    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
             10880    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
             10881    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
             10882    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
             10883    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
             10884    1         2 L_PREV_SIZE_A(0:9)  REDEF   L_PREV_SIZE    UBIN,
             10885    1         2 BIT_MAP                ALIGNED,
             10886    1           3 DATA                  ALIGNED,
             10887    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             10888    1           3 RPROC                 ALIGNED,
             10889    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             10890    1           3 ROS                   ALIGNED,
             10891    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             10892    1         2 L_SC_START,
             10893    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
             10894    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
             10895    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
             10896    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
             10897    1         2 L_SC_START_A$(0:3)  REDEF L_SC_START PTR,
             10898    1         2 L_SC_STOP,
             10899    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
             10900    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
             10901    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
             10902    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
             10903    1         2 L_SC_STOP_A$(0:3)   REDEF L_SC_STOP  PTR,
             10904    1         2 PROMOTE_HEAD,
             10905    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
             10906    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
             10907    1         2 PROMOTE_HEAD_A$(0:1) REDEF PROMOTE_HEAD     PTR,
             10908    1         2 PROMOTE_TAIL,
             10909    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
             10910    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
             10911    1         2 PROMOTE_TAIL_A$(0:1) REDEF PROMOTE_TAIL     PTR,
             10912    1         2 HAVE_ASL          BIT(1)    UNAL /*('0'B)*/,
             10913    1         2 ALL_BLK_COM          BIT(1)    UNAL /*('0'B)*/,
             10914    1         2 USE_NODE          BIT(1)    UNAL /*('0'B)*/,
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:43   
             10915    1         2 *                 BIT(33)   UNAL /*('0'B)*/,
             10916    1         2 BLANK_COMMON$     PTR       ALIGNED /*(ADDR(NIL))*/;

       56    10920              %VX$SC;

             10933    1   /*******************************************************************************
             10934    1   *                                                                              *
             10935    1   *                          VX$SC                                                 *
             10936    1   *                                                                              *
             10937    1   *******************************************************************************/

             10942    1   DCL 1 VX$SC BASED ALIGNED,
             10943    1         2 SEG UBIN(3) UNAL,
             10944                /*K*  SEG - The segment number of this section */
             10945    1         2 TYPE UBIN(6) UNAL,
             10946                /*K*  TYPE -
             10947                      Type code      Section type
             10948                      ---------      ------------
             10949                          0          Data control section with write access.
             10950                          1          Procedure control section.
             10951                          2          Unlabeled common, name pointer must be zero.
             10952                          3          Labeled common, with mandatory name pointer.
             10953                                     This is for labeled common which must be
             10954                                     in the root.
             10955                          4          Labeled common, with mandatory name pointer.
             10956                                     This is for labeled common which need not
             10957                                     be in the root.
             10958                          5          DCB, word 1 is name pointer.
             10959                          6          Data control section with read only access,
             10960                                     word 1 = 0 or name pointer.      */
             10961    1         2 EMPTY BIT(1) UNAL,
             10962                /*K*  EMPTY is the empty bit.  This bit is set if the control
             10963                      section is of size zero.  */
             10964    1         2 ATTR UNAL,
             10965    1           3 INT  UBIN(2) UNAL,
             10966                  /*K*  INT is the Section initialization.  */
             10967    1           3 SEGMENT BIT(1) UNAL,
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:44   
             10968                  /*K* SEGMENT is set if the Section is defined in a data
             10969                       segment.  */
             10970    1           3 ALL BIT(1) UNAL,
             10971                  /*K*  ALL is set if the Section is allocated.  */
             10972    1           3 PRE_DCB BIT(1) UNAL,
             10973                  /*K*  PRE_DCB is set if a Pre_defined DCB.  */
             10974    1           3 MES_INIT BIT(1) UNAL,
             10975    1           3 ALIGN UBIN(2) UNAL,
             10976                  /*K*  ALIGN is the Section alignment.  */
             10977    1         2 ADDRESS UBIN HALF UNAL,
             10978                /*K*  ADDRESS is the address within the Instruction Segment of
             10979                      the entry point of the external procedure.  */
             10980    1         2 NAME_DISP SBIN HALF UNAL,
             10981                /*K*  NAME_DISP is the Name index.  */
             10982    1         2 SIZE UBIN HALF UNAL,
             10983                /*K*  SIZE is the size, in words, of the section.  */
             10984    1         2 NODE# UBIN HALF UNAL,
             10985                /*K*  NODE# is the Node number of section.  */
             10986    1         2 COM_LINK UBIN HALF UNAL;
             10987                /*K*  COM_LINK is used internally by linker to link common sections */

             10997    1   /*******************************************************************************
             10998    1   *                                                                              *
             10999    1   *                          VX$SECT                                                *
             11000    1   *                                                                              *
             11001    1   *******************************************************************************/

             11006    1   DCL 1 VX$SECT BASED ALIGNED,
             11007    1         2 TYPE UBIN BYTE UNAL,
             11008                /*K*  TYPE -
             11009                      Type code      Section type
             11010                      ---------      ------------
             11011                          0          Data control section with write access.
             11012                          1          Procedure control section.
             11013                          2          Unlabeled common, name pointer must be zero.
             11014                          3          Labeled common, with mandatory name pointer.
             11015                                     This is for labeled common which must be
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:45   
             11016                                     in the root.
             11017                          4          Labeled common, with mandatory name pointer.
             11018                                     This is for labeled common which need not
             11019                                     be in the root.
             11020                          5          DCB, word 1 is name pointer.
             11021                          6          Data control section with read only access,
             11022                                     word 1 = 0 or name pointer.
             11023                          7          Constant labeled common, with mandatory name pointer.
             11024                                     This is for labeled common which must be
             11025                                     in the root.
             11026                          8          Constant labeled common, with mandatory name pointer.
             11027                                     This is for labeled common which need not
             11028                                     be in the root.                        */
             11029    1         2 * BIT(1),
             11030                /*K*  * is reserved for future use and must be zero. */
             11031    1         2 INITZERO BIT(1),
             11032                /*K*  INITZERO - if 1, initialize with zero.  */
             11033    1         2 INITUTS BIT(1),
             11034                /*K*  INITUTS - if 1, initialize with UTS.  */
             11035    1         2 SEGMENT BIT(1),
             11036                /*K*  SEGMENT - if 1, specifies that this section is
             11037                                to be placed in the segment specified by
             11038                                SEG_NPOINTER.  */
             11039    1         2 * BIT(3),
             11040                /*K*  * is reserved for future use and must be zero. */
             11041    1         2 BOUND UBIN(2) UNAL,
             11042                /*K*  BOUND - bits 6-7 - defines starting location.
             11043                              00 - starts on even word
             11044                              01 - starts on odd word
             11045                              10 - starts on multiple of 8
             11046                              11 - starts on page boundary     */
             11047    1         2 SIZE UBIN HALF UNAL,
             11048                /*K*  SIZE is the size, in words, of the section.  */
             11049    1         2 NPOINTER SBIN HALF UNAL,
             11050                /*K*  NPOINTER is the word displacement into the name record
             11051                      (TYPE 1) locating the name of this section.  If the
             11052                      field is negative, the section has no name.  */
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:46   
             11053    1         2 MBZ UBIN HALF UNAL,
             11054                /*K*  MBZ is reserved for future expansion and must be zero. */
             11055    1         2 SEG_NPOINTER REDEF MBZ SBIN HALF UNAL,
             11056                /*K*  SEG_NPOINTER locates a name in the Definition Names
             11057                      Section.  The name must be a valid segment name
             11058                      recognized by the linker.  */
             11059    1         2 G66 REDEF MBZ,
             11060                /*K*  G66 is not used on CP-6. */
             11061    1           3 * BIT(9),
             11062    1           3 NSAB BIT(9);
       57    11065              %VXD$TMPLT( EDEF=YES );

             11078    1   /*******************************************************************************
             11079    1   *                                                                              *
             11080    1   *                          VXD$TMPLT                                              *
             11081    1   *                                                                              *
             11082    1   *******************************************************************************/

             11086        /*
             11087                  VXD$TMPLT (B$RU_DEF) is used to reference fields common to
             11088                  ENTDEFs, SYMDEFs and SEGDEFs.
             11089        */
             11091    1   DCL 1 VXD$TMPLT BASED ALIGNED,
             11092    1         2 VALUE SBIN UNAL,
             11093                /*K*  VALUE is the value if this entry is a constant.  */
             11094    1         2 AD REDEF VALUE,
             11095                /*K*  AD is the address if this entry is not constant.  */
             11096    1           3 LFLAGS UNAL,
             11097                  /*K*  LFLAGS is the field reserved for loader to flag load
             11098                        time attributes of the definition and must be zero
             11099                        in the object unit. */
             11100    1             4 SOURCE UBIN(3) UNAL,
             11101                    /*K*  SOURCE - Source of this DEF */
             11102    1             4 DEFINED BIT(1) UNAL,
             11103                    /*K*  DEFINED - Set if this DEF defined */
             11104    1             4 MULTIPLE BIT(1) UNAL,
             11105                    /*K*  MULTIPLE - Set if this DEF is multiply defined. */
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:47   
             11106    1             4 USED BIT(1) UNAL,
             11107                    /*K*  USED - Set if this DEF is used. */
             11108    1           3 LOOKUP_SECTNUM BIT(1) UNAL,
             11109                  /*K*  LOOKUP_SECTNUM is set if the section number is greater
             11110                        than 2048 (RU).  */
             11111    1           3 SECTNUM UBIN(11) UNAL,
             11112                  /*K*  SECTNUM contains an entry number into the section
             11113                        table (TYPE 3).  */
             11114    1           3 ISADDR UBIN HALF UNAL,
             11115                  /*K*  ISADDR - Is Address (RU)  */
             11116    1           3 OFFSET REDEF ISADDR UBIN HALF UNAL,
             11117                  /*K*  OFFSET is the word offset from the origin of the section. */
             11118    1         2 NPOINTER SBIN HALF UNAL,
             11119                /*K*  NPOINTER is a word displacement into the name record
             11120                      (TYPE 1) locating the name (of this entry). */
             11121    1         2 CONSTNT BIT(1) UNAL,
             11122                /*K*  CONSTNT is a flag bit to determine the interpretation
             11123                      of word 0.
             11124                      If CONSTNT=0, word 0 is AD which contains LFLAGS,
             11125                                    SECTNUM, and ISADDR or OFFSET.
             11126                      If CONSTNT=1, word 0 is a constant value (VALUE)  */
             11127    1         2 LFLAGS UNAL,
             11128                /*K*  LFLAGS is the field reserved for loader to flag load
             11129                      time attributes and must be zero in the object unit. */
             11130    1           3 MULTIPLE BIT(1) UNAL,
             11131                  /*K*  MULTIPLE - Set if this DEF is multiply defined. */
             11132    1           3 USED BIT(1) UNAL,
             11133                  /*K*  USED - Set if this DEF is used. */
             11134    1           3 SOURCE UBIN(4) UNAL,
             11135                  /*K*  SOURCE - Source of this DEF */
             11136    1           3 IS_DCB BIT(1) UNAL,
             11137                  /*K* IS_DCB - Set if this is a DCB */
             11138    1           3 * BIT(10) UNAL,
             11139                  /*K*  * is reserved for future use and must be zero.  */
             11140    1         2 PROTECTION REDEF LFLAGS,
             11141                /*K*  PROTECTION is used for non-constant SYMDEF OR SEGDEF.  */
             11142    1           3 TYPE UBIN(5) UNAL,
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:48   
             11143                  /*K*  TYPE is the Protection type.  */
             11144    1           3 * UBIN(12) UNAL;
             11145                  /*K*  * is reserved for future use and must be zero.  */

             11156    1   /*******************************************************************************
             11157    1   *                                                                              *
             11158    1   *                          B$EDEF                                                 *
             11159    1   *                                                                              *
             11160    1   *******************************************************************************/

             11165    1   DCL 1 B$EDEF BASED ALIGNED,
             11166    1         2 LFLAGS UNAL,
             11167                /*K*  LFLAGS is the field reserved for loader to flag load
             11168                      time attributes of the definition and must be zero
             11169                      in the object unit. */
             11170    1           3 SOURCE UBIN(3) UNAL,
             11171                  /*K*  SOURCE - Source of this ENTDEF */
             11172    1           3 DEFINED BIT(1)  UNAL,
             11173                  /*K*  DEFINED - Set if this ENTDEF defined */
             11174    1           3 MULTIPLE BIT(1) UNAL,
             11175                  /*K*  MULTIPLE - Set if this ENTDEF is multiply defined. */
             11176    1           3 USED BIT(1) UNAL,
             11177                  /*K*  USED - Set if this ENTDEF is used. */
             11178    1           3 * BIT(2) UNAL,
             11179                  /*K*  * - Unused and must be zero. */
             11180    1           3 FAULTAGS BIT(1) UNAL,
             11181                  /*K*  FAULTAGS - Internal calls fault tags flag. */
             11182    1         2 OU UNAL,
             11183    1           3 SECTNUM UBIN BYTE UNAL,
             11184                  /*K*  SECTNUM contains an entry number into the section
             11185                        table (TYPE 3).  */
             11186    1           3 OFFSET UBIN HALF UNAL,
             11187                  /*K*  OFFSET is the word offset from the origin of the section. */
             11188    1         2 ISADDR REDEF OU UBIN(27) UNAL,
             11189                /*K*  ISADDR - Is Address (RU)  */
             11190    1         2 NPOINTER SBIN HALF UNAL,
             11191                /*K*  NPOINTER is a word displacement into the name record
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:49   
             11192                      (TYPE 1) locating the name (of this entry). */
             11193    1         2 PRI BIT(1) UNAL,
             11194                /*K*  PRI is a one-bit flag denoting primary entry
             11195                      definition.
             11196                         PRI = 1, primary name (object unit name)
             11197                             = 0, not primary name                 */
             11198    1         2 ALT BIT(1) UNAL,
             11199                /*K*  ALT is a one-bit flag denoting permissible alternate
             11200                      return.
             11201                         ALT = 1, alternate return allowed
             11202                             = 0, alternate return not allowed        */
             11203    1         2 CHECK BIT(1) UNAL,
             11204                /*K*  CHECK is a one-bit flag denoting arguments/parameter
             11205                      check and alternate return specification check.
             11206                         CHECK = 0, do not check for matching
             11207                                    arguments/parameters and alternate
             11208                                    return specification check.
             11209                               = 1, check for matching arguments/parameters
             11210                                    and alternate return specification.  */
             11211    1         2 CST UBIN(4) UNAL,
             11212                /*K*  CST is a 4-bit field denoting calling sequence type.
             11213                         CST =  0, Standard CP-6 Callable Procedure
             11214                         CST =  1, Nonstandard Call Type
             11215                         CST =  2, Standard CP-6 Procedure with MAIN attribute
             11216                         CST =  3, Standard CP-6 Procedure with ASYNC attribute
             11217                         CST =  4, Standard CP-6 Function Procedure; a
             11218                                   variable table entry will be present to
             11219                                   define the attributes of the function
             11220                         CST =  5, Same as 0, except USE, AVOID, or
             11221                                   MATERIALIZE attributes specified
             11222                         CST =  7, Same as 2, except USE, AVOID, or
             11223                                   MATERIALIZE attributes specified
             11224                         CST =  8, Same as 3, except USE, AVOID, or
             11225                                   MATERIALIZE attributes specified
             11226                         CST =  9, Same as 4, except USE, AVOID, or
             11227                                   MATERIALIZE attributes specified
             11228                         CST = 13, GCOS domain, save
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:50   
             11229                         CST = 14, GCOS domain, no save
             11230                         CST = 15, Non-Callable Procedure.          */
             11231    1         2 NPARAM UBIN(11) UNAL;
             11232                /*K*  NPARAM is an 11-bit field denoting number of parameters. */
       58    11244              %TMPLT;

             11256    1   /*******************************************************************************
             11257    1   *                                                                              *
             11258    1   *                          TMPLT                                                 *
             11259    1   *                                                                              *
             11260    1   *******************************************************************************/

             11265    1   DCL 1 VX$TMPLT           ALIGNED BASED, /* Template for defs                  */
             11266    1         2 A(0:3)       UBIN(18)  UNAL,    /* Array access                       */
             11267    1         2 A_SBIN(0:3) REDEF A    SBIN HALF UNAL,
             11268    1         2 W       REDEF     A,            /* By name                            */
             11269    1           3 WORD0       UBIN(36)  UNAL,   /* First word                         */
             11270    1           3 WORD1       UBIN(36)  UNAL;   /* Second word                        */
       59    11273        %SET LISTMAC='1'B;
       60    11274        %SET LISTSUB='1'B;
       61    11275        %SET LISTEXP='1'B;
       62    11276              %BANNER( ARG=B$DNAME );
             11277        %LSET LISTDIR='0'B;

             11284    1   /*******************************************************************************
             11285    1   *                                                                              *
             11286    1   *                          B$DNAME                                                *
             11287    1   *                                                                              *
             11288    1   *******************************************************************************/

       63    11292              %B$DNAME( NAME=B$DNAME, STCLASS=BASED );
             11293            %LSET STR='BASED        ';
             11294            %IF
             11295                '0'B;
             11297            %ELSE;
             11298                %LSET INIT=/*;
             11299            %ENDIF;
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:51   
             11300    1   DCL 1 B$DNAME BASED ALIGNED,
             11301    1         2 COUNT UBIN HALF UNAL /*(SIZEC(' ')) /**/,
             11302                /*K*  COUNT is the number of characters in the name */
             11303            %IF
             11304                '0'B;
             11307            %ELSE;
             11308    1         2 TEXT CHAR(B$DNAME.COUNT) UNAL;
             11309            %ENDIF;
       64    11311              %P;
             11312        %LSET LISTDIR='0'B;

             11319    1   /*******************************************************************************
             11320    1   *                                                                              *
             11321    1   *                          PARAMETERS                                             *
             11322    1   *                                                                              *
             11323    1   *******************************************************************************/

       65    11327    1   DCL NPAGE           UBIN(36)  ALIGNED;
       66    11328    1   DCL TSIZE_READ      UBIN(36)  ALIGNED;
       67    11329    1   DCL FILE            UBIN(36)  ALIGNED;
       68    11330    1   DCL FILE_TYPE       UBIN(36)  ALIGNED;
       69    11331    1   DCL RTYPE           UBIN(36)  ALIGNED;
       70    11332    1   DCL START$          PTR       ALIGNED;
       71    11333    1   DCL PAGE_SIZE       SBIN(36)  ALIGNED;
       72    11334    1   DCL TSIZE           UBIN(36)  ALIGNED;
       73    11335    1   DCL DS              UBIN(36)  ALIGNED;
       74    11336    1   DCL AREA_SIZE       UBIN(36)  ALIGNED;
       75    11337    1   DCL CURR_P$         PTR  ALIGNED;
       76    11338    1   DCL SOURCE_P        SBIN WORD ALIGNED;
       77    11339        %E;
             11340        %LSET LISTDIR='0'B;

             11347    1   /*******************************************************************************
             11348    1   *                                                                              *
             11349    1   *                          ENTRY                                                 *
             11350    1   *                                                                              *
             11351    1   *******************************************************************************/
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:52   

       78    11355        %ENTRIES;
             11356    1   DCL VXE$ERROR       ENTRY(4);
             11357    1   DCL VXE$ERR         ENTRY(3);
             11358    1   DCL VXE$MERC        ENTRY;
             11359    1   DCL VXE$ERRMSG      ENTRY(3);
             11360    1   DCL VXR$READ        ENTRY( 3 );
             11361    1   DCL VXW$WRITE       ENTRY( 3 );
             11362    1   DCL VXW$WRITE_DO    ENTRY( 2 );
             11363    1   DCL VXD$B2C         ENTRY( 5 );
             11364    1   DCL VXD$C2B         ENTRY( 3 );
             11365    1   DCL VXA$GET         ENTRY( 3 );
             11366    1   DCL VXF$FREE        ENTRY( 3 );
             11367    1   DCL VXQ$SORT        ENTRY( 7 );
             11368    1   DCL VXY$YESNO       ENTRY( 1 );
       79    11370    1   DCL VXK$KEY         ENTRY(4);
       80    11371    1   DCL VXI$READ        ENTRY(4)  ALTRET;
       81    11372    1   DCL VXU$NEW_SECTNUM    ENTRY(4);
       82    11373        %PTR;
             11374        %LSET LISTDIR='0'B;

             11381    1   /*******************************************************************************
             11382    1   *                                                                              *
             11383    1   *                          PTR                                                 *
             11384    1   *                                                                              *
             11385    1   *******************************************************************************/

       83    11389        %POINTER;
             11390    1   DCL P$         PTR       ALIGNED AUTO;
             11391    1   DCL Q$         PTR       ALIGNED AUTO;
             11392    1   DCL R$         PTR       ALIGNED AUTO;
       84    11394    1   DCL WHERE$               PTR  ALIGNED   AUTO;
       85    11395    1   DCL CURR$                PTR  ALIGNED   AUTO;
       86    11396    1   DCL NAME$                PTR  ALIGNED   AUTO;
       87    11397    1   DCL SECT$                PTR  ALIGNED   AUTO;
       88    11398        %U;
             11399        %LSET LISTDIR='0'B;
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:53   

             11406    1   /*******************************************************************************
             11407    1   *                                                                              *
             11408    1   *                          UBIN                                                 *
             11409    1   *                                                                              *
             11410    1   *******************************************************************************/

       89    11414        %INDEX;
             11415    1   DCL I          UBIN(36) ALIGNED AUTO;
             11416    1   DCL SI REDEF I SBIN WORD ALIGNED;
             11417    1   DCL J          UBIN(36) ALIGNED AUTO;
             11418    1   DCL SJ REDEF J SBIN WORD ALIGNED;
             11419    1   DCL K          UBIN(36) ALIGNED AUTO;
             11420    1   DCL SK REDEF K SBIN WORD ALIGNED;
             11421    1   DCL L          UBIN(36) ALIGNED AUTO;
             11422    1   DCL SL REDEF L    SBIN WORD ALIGNED;
       90    11424    1   DCL LOOP            UBIN(36)  ALIGNED   AUTO;
       91    11425    1   DCL IN_PROG         UBIN(36)  ALIGNED   AUTO;
       92    11426    1   DCL SIZE            UBIN(36)  ALIGNED   AUTO;
       93    11427    1   DCL SIZE_READ       UBIN(36)  ALIGNED   AUTO;
       94    11428    1   DCL DUMMY           UBIN(36)  ALIGNED   AUTO;
       95    11429    1   DCL ENT_SIZE        UBIN(36)  ALIGNED   AUTO;
       96    11430    1   DCL NAME_X          UBIN(36)  ALIGNED   AUTO;
       97    11431    1   DCL SC##            UBIN(36)  ALIGNED   AUTO;
       98    11432    1   DCL SECTNUM         UBIN(36)  ALIGNED   AUTO;
       99    11433    1   DCL SC_IDX          UBIN(36)  ALIGNED   AUTO;
      100    11434    1   DCL CURR_SC_ENTRIES UBIN(36)  ALIGNED   AUTO;
      101    11435    1   DCL KEY             UBIN(36)  ALIGNED   AUTO;
      102    11436    1   DCL NAME_INX        UBIN(36)  ALIGNED   AUTO;
      103    11437    1   DCL CURR_NAME_SIZE  UBIN(36)  ALIGNED   AUTO;
      104    11438    1   DCL LAST_NAME_SIZE  UBIN(36)  ALIGNED   AUTO;
      105    11439    1   DCL SEGMENT         UBIN(36)  ALIGNED   AUTO;
      106    11440    1   DCL NODE#           UBIN(36)  ALIGNED   AUTO;
      107    11441        %S;
             11442        %LSET LISTDIR='0'B;

             11449    1   /*******************************************************************************
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:54   
             11450    1   *                                                                              *
             11451    1   *                          SBIN                                                 *
             11452    1   *                                                                              *
             11453    1   *******************************************************************************/

      108    11457    1   DCL A_SIZE          SBIN WORD ALIGNED   AUTO;
      109    11458    1   DCL NAME_DISP       SBIN WORD ALIGNED   AUTO;
      110    11459    1   DCL SOURCE          SBIN WORD ALIGNED   AUTO;
      111    11460    1   DCL ARS             SBIN WORD ALIGNED   AUTO;
      112    11461    1   DCL DIFF            SBIN WORD ALIGNED   AUTO;
      113    11462        %BANNER( ARG=SUBS );
             11463        %LSET LISTDIR='0'B;

             11470    1   /*******************************************************************************
             11471    1   *                                                                              *
             11472    1   *                          SUBS                                                 *
             11473    1   *                                                                              *
             11474    1   *******************************************************************************/

      114    11478        %SUB_CST;
             11479        %EQU STD#=0 ;                           /* Standard CP6 callable procedure */
             11480        %EQU NSTD#=1 ;                          /* Non-standard Call Type  */
             11481        %EQU MAIN#=2 ;                /* Standard CP6 Procedure with MAIN attribute */
             11482        %EQU ASYNC#=3 ;               /* Standard CP6 Procedure with ASYNC attribute */
             11483        %EQU FUNC#=4 ;                /* Standard CP6 Function procedure; a variable */
             11484                                      /* table entry will be present to define the   */
             11485                                      /* attributes of the function.                 */
             11486        %EQU XSTD#=5 ;           /* Same as 0, except AVOID or MATERIALIZE specified */
             11487        %EQU XMAIN#=7 ;          /* Same as 2, except AVOID or MATERIALIZE specified */
             11488        %EQU XASYNC#=8 ;         /* Same as 3, except AVOID or MATERIALIZE specified */
             11489        %EQU XFUNC#=9 ;          /* Same as 4, except AVOID or MATERIALIZE specified */
             11490        %EQU DOMSAV#=13 ;                       /* GCOS domain, save  */
             11491        %EQU DOMNOSAV#=14 ;                     /* GCOS domain, no save  */
             11492        %EQU NOTPROC#=15 ;                      /* Non-callable procedure  */
      115    11494        %B$RECORDSUBS;
             11495        %EQU TYPHEAD=0 ;
             11496        %EQU TYPDNAM=1 ;
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:55   
             11497        %EQU TYPRNAM=2 ;
             11498        %EQU TYPSECT=3 ;
             11499        %EQU TYPEDEF=4 ;
             11500        %EQU TYPEREF=5 ;
             11501        %EQU TYPSDEF=6 ;
             11502        %EQU TYPSREF=7 ;
             11503        %EQU TYPSEGDEF=8 ;
             11504        %EQU TYPSEGREF=9 ;
             11505        %EQU TYPPROG=10 ;
             11506        %EQU SUBTYPPROG=0 ;
             11507        %EQU SUBTYPREL=1 ;
             11508        %EQU TYPLOGBLK=11 ;
             11509        %EQU TYPINTNTRY=12 ;
             11510        %EQU TYPEXST=13 ;
             11511        %EQU TYPVREBL=14 ;
             11512        %EQU TYPDBGNAM=15 ;
             11513        %EQU TYPLV1LB=16 ;
             11514        %EQU TYPLV1=17 ;
             11515        %EQU TYPDATASEG=18 ;
             11516        %EQU TYPRUM=20 ;
             11517        %EQU TYPBIRTH=21 ;
             11518        %EQU TYPPLOVER=22 ;
             11519        %EQU TYPCOMPID=23 ;
             11520        %EQU TYPROS=30 ;
      116    11522        %B$SECTIONSUBS;
             11523        %EQU DATASECTION=0 ;
             11524        %EQU CODESECTION=1 ;
             11525        %EQU UCOMSECTION=2 ;
             11526        %EQU RLCOMSECTION=3 ;
             11527        %EQU LCOMSECTION=4 ;
             11528        %EQU DCBSECTION=5 ;
             11529        %EQU ROSECTION=6 ;
             11530        %EQU RORLCOMSECTION=7 ;
             11531        %EQU ROLCOMSECTION=8 ;
             11532        %EQU EVENBOUNDSECTION=0 ;
             11533        %EQU ODDBOUNDSECTION=1 ;
             11534        %EQU EIGHTBOUNDSECTION=2 ;
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:56   
             11535        %EQU PAGEBOUNDSECTION=3 ;
      117    11537        %SUB_LINKFLAGS;
             11538        %EQU SOURCE_OBJECT#=0 ;
             11539        %EQU SOURCE_SLIB#=1 ;
             11540        %EQU SOURCE_ALIB#=2 ;
             11541        %EQU SOURCE_ULIB#=3 ;
             11542        %EQU SOURCE_RLIB#=4 ;
             11543        %EQU SOURCE_REMOVED#=5 ;
             11544        %EQU SOURCE_LINKER#=6 ;
      118    11546        %PLIST;
      119    11547        %F$DCB;
      120    11604        %EJECT;
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:57   
      121    11605    1         CURR$ = CURR_P$;

  11605  3 000002   200015 470500                    LDP0    @CURR_P$,,AUTO
         3 000003   000000 236100                    LDQ     0,,PR0
         3 000004   200023 756100                    STQ     CURR$,,AUTO

      122    11606    1         SOURCE = SOURCE_P;

  11606  3 000005   200016 471500                    LDP1    @SOURCE_P,,AUTO
         3 000006   100000 235100                    LDA     0,,PR1
         3 000007   200055 755100                    STA     SOURCE,,AUTO

      123    11607    1         KEY = FILE_TYPE;

  11607  3 000010   200006 473500                    LDP3    @FILE_TYPE,,AUTO
         3 000011   300000 235100                    LDA     0,,PR3
         3 000012   200045 755100                    STA     KEY,,AUTO

      124    11608    1         IN_PROG = TSIZE;

  11608  3 000013   200012 474500                    LDP4    @TSIZE,,AUTO
         3 000014   400000 235100                    LDA     0,,PR4
         3 000015   200033 755100                    STA     IN_PROG,,AUTO

      125    11609    1         NPAGE = 0;

  11609  3 000016   200003 475500                    LDP5    @NPAGE,,AUTO
         3 000017   500000 450100                    STZ     0,,PR5

      126    11610    1         TSIZE_READ = 0;

  11610  3 000020   200004 476500                    LDP6    @TSIZE_READ,,AUTO
         3 000021   600000 450100                    STZ     0,,PR6

      127    11611    1         LOOP = ( IN_PROG + PAGE_SIZE - 1 ) / PAGE_SIZE - 1;

  11611  3 000022   200011 477500                    LDP7    @PAGE_SIZE,,AUTO
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:58   
         3 000023   200033 236100                    LDQ     IN_PROG,,AUTO
         3 000024   700000 036100                    ADLQ    0,,PR7
         3 000025   000001 136007                    SBLQ    1,DL
         3 000026   700000 506100                    DIV     0,,PR7
         3 000027   000001 136007                    SBLQ    1,DL
         3 000030   200032 756100                    STQ     LOOP,,AUTO

      128    11612    1         WHERE$ = START$;

  11612  3 000031   200010 470500                    LDP0    @START$,,AUTO
         3 000032   000000 236100                    LDQ     0,,PR0
         3 000033   200022 756100                    STQ     WHERE$,,AUTO

      129    11613    1         A_SIZE = AREA_SIZE;

  11613  3 000034   200014 470500                    LDP0    @AREA_SIZE,,AUTO
         3 000035   000000 235100                    LDA     0,,PR0
         3 000036   200053 755100                    STA     A_SIZE,,AUTO

      130    11614    2         DO CASE( SOURCE );

  11614  3 000037   200055 235100                    LDA     SOURCE,,AUTO
         3 000040   000005 115007                    CMPA    5,DL
         3 000041   000043 602005 3                  TNC     s:11614+4,AL
         3 000042   000052 710000 3                  TRA     s:11618
         3 000043   000052 710000 3                  TRA     s:11618
         3 000044   000050 710000 3                  TRA     s:11616
         3 000045   000050 710000 3                  TRA     s:11616
         3 000046   000052 710000 3                  TRA     s:11618
         3 000047   000050 710000 3                  TRA     s:11616

      131    11615    2           CASE( 1, 2, 4 );

      132    11616    2             NODE# = 0;

  11616  3 000050   200052 450100                    STZ     NODE#,,AUTO
         3 000051   000055 710000 3                  TRA     s:11620
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:59   

      133    11617    2           CASE( ELSE );

      134    11618    2             NODE# = CURR$ -> VX$NODE.NUM;

  11618  3 000052   200023 470500                    LDP0    CURR$,,AUTO
         3 000053   000010 235100                    LDA     8,,PR0
         3 000054   200052 755100                    STA     NODE#,,AUTO

      135    11619    2           END;

      136    11620    1         IF CURR$ -> VX$NODE.L_START_A$(RTYPE) = ADDR(NIL) THEN

  11620  3 000055   200007 470500                    LDP0    @RTYPE,,AUTO
         3 000056   000000 720100                    LXL0    0,,PR0
         3 000057   200023 470500                    LDP0    CURR$,,AUTO
         3 000060   000030 236110                    LDQ     24,X0,PR0
         3 000061   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000062   000070 601000 3                  TNZ     s:11622

      137    11621    1             CURR$ -> VX$NODE.L_START_A$(RTYPE) = WHERE$;

  11621  3 000063   200007 470500                    LDP0    @RTYPE,,AUTO
         3 000064   000000 720100                    LXL0    0,,PR0
         3 000065   200022 236100                    LDQ     WHERE$,,AUTO
         3 000066   200023 470500                    LDP0    CURR$,,AUTO
         3 000067   000030 756110                    STQ     24,X0,PR0

      138    11622    1         CURR$ -> VX$NODE.L_PREV_SIZE_A(RTYPE) = CURR$ -> VX$NODE.L_SIZE_A(RTYPE);
             11622                  /* Set previous size as current */

  11622  3 000070   200007 470500                    LDP0    @RTYPE,,AUTO
         3 000071   000000 720100                    LXL0    0,,PR0
         3 000072   200023 470500                    LDP0    CURR$,,AUTO
         3 000073   000054 235110                    LDA     44,X0,PR0
         3 000074   000066 755110                    STA     54,X0,PR0

PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:60   
      139    11623    2         DO I = 0 TO LOOP;

  11623  3 000075   200026 450100                    STZ     I,,AUTO
         3 000076   000333 710000 3                  TRA     s:11685+3

      140    11624    2             CALL VXK$KEY( KEY, RTYPE, NODE#, I );

  11624  3 000077   200026 630500                    EPPR0   I,,AUTO
         3 000100   200075 450500                    STP0    @SEVERITY+5,,AUTO
         3 000101   200052 631500                    EPPR1   NODE#,,AUTO
         3 000102   200074 451500                    STP1    @SEVERITY+4,,AUTO
         3 000103   200007 236100                    LDQ     @RTYPE,,AUTO
         3 000104   200073 756100                    STQ     @SEVERITY+3,,AUTO
         3 000105   200045 633500                    EPPR3   KEY,,AUTO
         3 000106   200072 453500                    STP3    @SEVERITY+2,,AUTO
         3 000107   200072 630500                    EPPR0   @SEVERITY+2,,AUTO
         3 000110   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 000111   000000 701000 xent               TSX1    VXK$KEY
         3 000112   000000 011000                    NOP     0

      141    11625    2             SIZE = PAGE_SIZE;

  11625  3 000113   200011 470500                    LDP0    @PAGE_SIZE,,AUTO
         3 000114   000000 235100                    LDA     0,,PR0
         3 000115   200034 755100                    STA     SIZE,,AUTO

      142    11626    2             IF IN_PROG < PAGE_SIZE THEN SIZE = IN_PROG;

  11626  3 000116   200033 236100                    LDQ     IN_PROG,,AUTO
         3 000117   000123 604000 3                  TMI     RETRY
         3 000120   000000 116100                    CMPQ    0,,PR0
         3 000121   000123 605000 3                  TPL     RETRY

  11626  3 000122   200034 756100                    STQ     SIZE,,AUTO

      143    11627    2   RETRY:
      144    11628    3             IF A_SIZE < SIZE AND ( FILE_TYPE = 1/*@RF*/ OR ( FILE_TYPE = 0/*@OF*/ AND
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:61   
             11628                      RTYPE = 3 ) ) THEN DO;

  11628  3 000123   200053 236100       RETRY        LDQ     A_SIZE,,AUTO
         3 000124   000127 604000 3                  TMI     RETRY+4
         3 000125   200034 116100                    CMPQ    SIZE,,AUTO
         3 000126   000205 603000 3                  TRC     s:11640
         3 000127   200006 470500                    LDP0    @FILE_TYPE,,AUTO
         3 000130   000000 235100                    LDA     0,,PR0
         3 000131   000001 115007                    CMPA    1,DL
         3 000132   000141 600000 3                  TZE     s:11629
         3 000133   000000 115003                    CMPA    0,DU
         3 000134   000205 601000 3                  TNZ     s:11640
         3 000135   200007 471500                    LDP1    @RTYPE,,AUTO
         3 000136   100000 235100                    LDA     0,,PR1
         3 000137   000003 115007                    CMPA    3,DL
         3 000140   000205 601000 3                  TNZ     s:11640

      145    11629    3                 J = SIZE - A_SIZE;

  11629  3 000141   200034 236100                    LDQ     SIZE,,AUTO
         3 000142   200053 136100                    SBLQ    A_SIZE,,AUTO
         3 000143   200027 756100                    STQ     J,,AUTO

      146    11630                      %ALLOCATE( PTR$=R$, TYPE=DS, SIZE=J );

  11631  3 000144   200013 471500                    LDP1    @DS,,AUTO
         3 000145   100000 720100                    LXL0    0,,PR1
         3 000146   000000 236010 xsym               LDQ     VX_M_ALL,X0
         3 000147   000000 136010 xsym               SBLQ    VX_M_FREE,X0
         3 000150   000164 604000 3                  TMI     s:11635
         3 000151   200027 116100                    CMPQ    J,,AUTO
         3 000152   000164 602000 3                  TNC     s:11635

  11632  3 000153   000000 236010 xsym               LDQ     VX_M_FREE,X0
         3 000154   000000 473410 xsym               LDP3    VX_M_BASE_PTR,X0
         3 000155   300000 634506                    EPPR4   0,QL,PR3
         3 000156   200021 454500                    STP4    R$,,AUTO
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:62   

  11633  3 000157   100000 720100                    LXL0    0,,PR1
         3 000160   000000 236010 xsym               LDQ     VX_M_FREE,X0
         3 000161   200027 036100                    ADLQ    J,,AUTO
         3 000162   000000 756010 xsym               STQ     VX_M_FREE,X0

  11634  3 000163   000176 710000 3                  TRA     s:11637

  11635  3 000164   200027 633500                    EPPR3   J,,AUTO
         3 000165   200074 453500                    STP3    @SEVERITY+4,,AUTO
         3 000166   200013 236100                    LDQ     @DS,,AUTO
         3 000167   200073 756100                    STQ     @SEVERITY+3,,AUTO
         3 000170   200021 634500                    EPPR4   R$,,AUTO
         3 000171   200072 454500                    STP4    @SEVERITY+2,,AUTO
         3 000172   200072 630500                    EPPR0   @SEVERITY+2,,AUTO
         3 000173   000021 631400 xsym               EPPR1   B_VECTNIL+17
         3 000174   000000 701000 xent               TSX1    VXA$GET
         3 000175   000000 011000                    NOP     0

      147    11637    3                 AREA_SIZE = AREA_SIZE + J;

  11637  3 000176   200014 470500                    LDP0    @AREA_SIZE,,AUTO
         3 000177   000000 236100                    LDQ     0,,PR0
         3 000200   200027 036100                    ADLQ    J,,AUTO
         3 000201   000000 756100                    STQ     0,,PR0

      148    11638    3                 A_SIZE = A_SIZE + J;

  11638  3 000202   200053 236100                    LDQ     A_SIZE,,AUTO
         3 000203   200027 036100                    ADLQ    J,,AUTO
         3 000204   200053 756100                    STQ     A_SIZE,,AUTO

      149    11639    3                END;

      150    11640    2             CALL VXI$READ( FILE, WHERE$, SIZE, KEY ) ALTRET( IO_ERROR );

  11640  3 000205   200045 630500                    EPPR0   KEY,,AUTO
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:63   
         3 000206   200075 450500                    STP0    @SEVERITY+5,,AUTO
         3 000207   200034 631500                    EPPR1   SIZE,,AUTO
         3 000210   200074 451500                    STP1    @SEVERITY+4,,AUTO
         3 000211   200022 633500                    EPPR3   WHERE$,,AUTO
         3 000212   200073 453500                    STP3    @SEVERITY+3,,AUTO
         3 000213   200005 236100                    LDQ     @FILE,,AUTO
         3 000214   200072 756100                    STQ     @SEVERITY+2,,AUTO
         3 000215   200072 630500                    EPPR0   @SEVERITY+2,,AUTO
         3 000216   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 000217   000000 701000 xent               TSX1    VXI$READ
         3 000220   000337 702000 3                  TSX2    IO_ERROR

      151    11641    2             IF RTYPE <= 2 AND FILE_TYPE ~= 1/*@RF*/ THEN SIZE_READ = SIZE;

  11641  3 000221   200007 470500                    LDP0    @RTYPE,,AUTO
         3 000222   000000 235100                    LDA     0,,PR0
         3 000223   000003 115007                    CMPA    3,DL
         3 000224   000234 603000 3                  TRC     s:11642
         3 000225   200006 471500                    LDP1    @FILE_TYPE,,AUTO
         3 000226   100000 235100                    LDA     0,,PR1
         3 000227   000001 115007                    CMPA    1,DL
         3 000230   000234 600000 3                  TZE     s:11642

  11641  3 000231   200034 236100                    LDQ     SIZE,,AUTO
         3 000232   200035 756100                    STQ     SIZE_READ,,AUTO
         3 000233   000236 710000 3                  TRA     s:11643

      152    11642    2             ELSE SIZE_READ = VX_IO_SIZEW;

  11642  3 000234   000000 235000 xsym               LDA     VX_IO_SIZEW
         3 000235   200035 755100                    STA     SIZE_READ,,AUTO

      153    11643    3             IF SIZE_READ ~= SIZE THEN DO; /* Error */

  11643  3 000236   200035 236100                    LDQ     SIZE_READ,,AUTO
         3 000237   200034 116100                    CMPQ    SIZE,,AUTO
         3 000240   000306 600000 3                  TZE     s:11680
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:64   

      154    11644    4                 IF FILE ~= 1/*@RF*/ AND RTYPE ~= 3 THEN DO;

  11644  3 000241   200005 471500                    LDP1    @FILE,,AUTO
         3 000242   100000 235100                    LDA     0,,PR1
         3 000243   000001 115007                    CMPA    1,DL
         3 000244   000306 600000 3                  TZE     s:11680
         3 000245   000000 235100                    LDA     0,,PR0
         3 000246   000003 115007                    CMPA    3,DL
         3 000247   000306 600000 3                  TZE     s:11680

      155    11645        /*E*  ERROR: VXU-E$SHORT_REC_VX-0
      156    11646              MESSAGE: Object language error. Record size < page size.
      157    11647              DESCRIPTION: Self-explanatory.
      158    11648        */
      159    11649                          %SCREAM( ERR#=E$SHORT_REC_VX, MID="'U'", LEVEL=@E$S_VX );

  11650  3 000250   000002 630400 4                  EPPR0   2
         3 000251   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 000252   000000 701000 xent               TSX1    VXE$ERROR
         3 000253   000000 011000                    NOP     0

      160    11652
      161    11653        /*E*  ERROR: VXU-E$SHORT_REC_CONT_VX-0
      162    11654              MESSAGE: Page size(words) = %U1. Actual record size(words) = %U2.
      163    11655              DESCRIPTION: Self-explanatory.
      164    11656        */
      165    11657                          %NUMBER( NUM1=SIZE, NUM2=VX_IO_SIZEW );

  11663  3 000254   000006 236000 4                  LDQ     6
         3 000255   200076 756100                    STQ     @SEVERITY+6,,AUTO
         3 000256   200034 630500                    EPPR0   SIZE,,AUTO
         3 000257   200075 450500                    STP0    @SEVERITY+5,,AUTO
         3 000260   000007 236000 4                  LDQ     7
         3 000261   200074 756100                    STQ     @SEVERITY+4,,AUTO
         3 000262   000010 237000 4                  LDAQ    8
         3 000263   200072 757100                    STAQ    @SEVERITY+2,,AUTO
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:65   
         3 000264   200072 630500                    EPPR0   @SEVERITY+2,,AUTO
         3 000265   000023 631400 xsym               EPPR1   B_VECTNIL+19
         3 000266   000000 701000 xent               TSX1    VXD$B2C
         3 000267   000000 011000                    NOP     0

  11667  3 000270   000013 630400 4                  EPPR0   11
         3 000271   000023 631400 xsym               EPPR1   B_VECTNIL+19
         3 000272   000000 701000 xent               TSX1    VXD$B2C
         3 000273   000000 011000                    NOP     0

      166    11674                          %SCREAM( ERR#=E$SHORT_REC_CONT_VX, MID="'U'", LEVEL=@E$S_VX );

  11675  3 000274   000021 630400 4                  EPPR0   17
         3 000275   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 000276   000000 701000 xent               TSX1    VXE$ERROR
         3 000277   000000 011000                    NOP     0

      167    11677    4                     CALL TELL_PAGE_TYPE( I, 3 );

  11677  3 000300   000003 236000 4                  LDQ     3
         3 000301   200070 756100                    STQ     @PAGE#+1,,AUTO
         3 000302   200026 630500                    EPPR0   I,,AUTO
         3 000303   200067 450500                    STP0    @ACCESS+3,,AUTO
         3 000304   001630 701000 3                  TSX1    TELL_PAGE_TYPE
         3 000305   000000 011000                    NOP     0

      168    11678    4                    END;

      169    11679    3                END;

      170    11680    2             WHERE$ = PINCRW( WHERE$, SIZE_READ   );

  11680  3 000306   200035 236100                    LDQ     SIZE_READ,,AUTO
         3 000307   000022 736000                    QLS     18
         3 000310   200022 036100                    ADLQ    WHERE$,,AUTO
         3 000311   200022 756100                    STQ     WHERE$,,AUTO

PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:66   
      171    11681    2             A_SIZE = A_SIZE - SIZE_READ;

  11681  3 000312   200053 236100                    LDQ     A_SIZE,,AUTO
         3 000313   200035 136100                    SBLQ    SIZE_READ,,AUTO
         3 000314   200053 756100                    STQ     A_SIZE,,AUTO

      172    11682    2             IN_PROG = IN_PROG - SIZE;

  11682  3 000315   200033 236100                    LDQ     IN_PROG,,AUTO
         3 000316   200034 136100                    SBLQ    SIZE,,AUTO
         3 000317   200033 756100                    STQ     IN_PROG,,AUTO

      173    11683    2             TSIZE_READ = TSIZE_READ + SIZE_READ;

  11683  3 000320   200004 470500                    LDP0    @TSIZE_READ,,AUTO
         3 000321   000000 236100                    LDQ     0,,PR0
         3 000322   200035 036100                    ADLQ    SIZE_READ,,AUTO
         3 000323   000000 756100                    STQ     0,,PR0

      174    11684    2             NPAGE = NPAGE + 1;

  11684  3 000324   200003 471500                    LDP1    @NPAGE,,AUTO
         3 000325   100000 235100                    LDA     0,,PR1
         3 000326   000001 035007                    ADLA    1,DL
         3 000327   100000 755100                    STA     0,,PR1

      175    11685    2            END;                           /* Do i = 0 to loop; */

  11685  3 000330   200026 236100                    LDQ     I,,AUTO
         3 000331   000001 036007                    ADLQ    1,DL
         3 000332   200026 756100                    STQ     I,,AUTO
         3 000333   200032 236100                    LDQ     LOOP,,AUTO
         3 000334   200026 116100                    CMPQ    I,,AUTO
         3 000335   000077 603000 3                  TRC     s:11624

      176    11686
      177    11687        %EJECT;
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:67   
      178    11688    2         DO WHILE( '0'B );                 /* Read failed */

  11688  3 000336   000466 710000 3                  TRA     s:11744

      179    11689    2   IO_ERROR:                       /* Code executed only by altret from VXI$READ */
      180    11690    3             DO CASE( VX_IO_STATUS );

  11690  3 000337   000000 235000 xsym  IO_ERROR     LDA     VX_IO_STATUS
         3 000340   000003 115007                    CMPA    3,DL
         3 000341   000343 602005 3                  TNC     IO_ERROR+4,AL
         3 000342   000466 710000 3                  TRA     s:11744
         3 000343   000346 710000 3                  TRA     s:11697
         3 000344   000361 710000 3                  TRA     s:11702
         3 000345   000422 710000 3                  TRA     s:11722

      181    11691    3               CASE( 0/*@IO_EOF*/ );

      182    11692        /*E*  ERROR: VXU-E$UNEXPECTED_EOF_VX-0
      183    11693              MESSAGE: Object language error. Unexpected end of file condition.
      184    11694              DESCRIPTION: Self-explanatory.
      185    11695        */
      186    11696                      %SCREAM( ERR#=E$UNEXPECTED_EOF_VX, MID="'U'", LEVEL=@E$F_D_VX );

  11697  3 000346   000027 630400 4                  EPPR0   23
         3 000347   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 000350   000000 701000 xent               TSX1    VXE$ERROR
         3 000351   000000 011000                    NOP     0

      187    11699    3                 CALL TELL_PAGE_TYPE( NPAGE, 4 );

  11699  3 000352   000033 236000 4                  LDQ     27
         3 000353   200070 756100                    STQ     @PAGE#+1,,AUTO
         3 000354   200003 236100                    LDQ     @NPAGE,,AUTO
         3 000355   200067 756100                    STQ     @ACCESS+3,,AUTO
         3 000356   001630 701000 3                  TSX1    TELL_PAGE_TYPE
         3 000357   000000 011000                    NOP     0
         3 000360   000466 710000 3                  TRA     s:11744
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:68   

      188    11700
      189    11701    3               CASE( 1/*@IO_NOKEY*/);

      190    11702    3                 IF FILE = 1/*@RF*/  AND  ( RTYPE >= 1  AND  RTYPE <= 9 )

  11702  3 000361   200005 470500                    LDP0    @FILE,,AUTO
         3 000362   000000 235100                    LDA     0,,PR0
         3 000363   000001 115007                    CMPA    1,DL
         3 000364   000376 601000 3                  TNZ     s:11708
         3 000365   200007 471500                    LDP1    @RTYPE,,AUTO
         3 000366   100000 235100                    LDA     0,,PR1
         3 000367   000376 600000 3                  TZE     s:11708
         3 000370   000012 115007                    CMPA    10,DL
         3 000371   000376 603000 3                  TRC     s:11708

      191    11703    4                 THEN DO;

      192    11704    4                     IF TSIZE_READ = 0 THEN RETURN;

  11704  3 000372   200004 473500                    LDP3    @TSIZE_READ,,AUTO
         3 000373   300000 235100                    LDA     0,,PR3
         3 000374   000466 601000 3                  TNZ     s:11744

  11704  3 000375   000000 702200 xent               TSX2  ! X66_ARET

      193    11705    4                     ELSE ;                /* Read error is ok */
      194    11706    4                    END;
      195    11707    3                 ELSE
      196    11708    3                     IF FILE = 0/*@OF*/ AND RTYPE = 3  AND  NPAGE > 0

  11708  3 000376   000000 235100                    LDA     0,,PR0
         3 000377   000407 601000 3                  TNZ     s:11716
         3 000400   200007 471500                    LDP1    @RTYPE,,AUTO
         3 000401   100000 235100                    LDA     0,,PR1
         3 000402   000003 115007                    CMPA    3,DL
         3 000403   000407 601000 3                  TNZ     s:11716
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:69   
         3 000404   200003 473500                    LDP3    @NPAGE,,AUTO
         3 000405   300000 235100                    LDA     0,,PR3
         3 000406   000466 601000 3                  TNZ     s:11744

      197    11709    3                     THEN ;                /* Read error is ok */
      198    11710    4                     ELSE DO;

      199    11711        /*E*  ERROR: VXU-E$UNEXPECTED_NOKEY_VX-0
      200    11712              MESSAGE: Object language error. Unexpected no such key condition.
      201    11713              DESCRIPTION: Self-explanatory.
      202    11714        */
      203    11715                              %SCREAM( ERR#=E$UNEXPECTED_NOKEY_VX, MID="'U'", LEVEL=
             11715                                  @E$F_D_VX );

  11716  3 000407   000035 630400 4                  EPPR0   29
         3 000410   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 000411   000000 701000 xent               TSX1    VXE$ERROR
         3 000412   000000 011000                    NOP     0

      204    11718    4                         CALL TELL_PAGE_TYPE( NPAGE, 4 );

  11718  3 000413   000033 236000 4                  LDQ     27
         3 000414   200070 756100                    STQ     @PAGE#+1,,AUTO
         3 000415   200003 236100                    LDQ     @NPAGE,,AUTO
         3 000416   200067 756100                    STQ     @ACCESS+3,,AUTO
         3 000417   001630 701000 3                  TSX1    TELL_PAGE_TYPE
         3 000420   000000 011000                    NOP     0

      205    11719    4                        END;

  11719  3 000421   000466 710000 3                  TRA     s:11744

      206    11720
      207    11721    3               CASE( 2/*@IO_LD*/ );

      208    11722    3                 IF FILE = 1/*@RF*/ AND

PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:70   
  11722  3 000422   200005 470500                    LDP0    @FILE,,AUTO
         3 000423   000000 235100                    LDA     0,,PR0
         3 000424   000001 115007                    CMPA    1,DL
         3 000425   000442 601000 3                  TNZ     s:11722+16
         3 000426   200007 471500                    LDP1    @RTYPE,,AUTO
         3 000427   100000 235100                    LDA     0,,PR1
         3 000430   000003 115007                    CMPA    3,DL
         3 000431   000450 600000 3                  TZE     s:11728
         3 000432   000002 115007                    CMPA    2,DL
         3 000433   000450 600000 3                  TZE     s:11728
         3 000434   000005 115007                    CMPA    5,DL
         3 000435   000450 600000 3                  TZE     s:11728
         3 000436   000007 115007                    CMPA    7,DL
         3 000437   000450 600000 3                  TZE     s:11728
         3 000440   000011 115007                    CMPA    9,DL
         3 000441   000450 600000 3                  TZE     s:11728
         3 000442   000000 235100                    LDA     0,,PR0
         3 000443   000454 601000 3                  TNZ     s:11737
         3 000444   200007 471500                    LDP1    @RTYPE,,AUTO
         3 000445   100000 235100                    LDA     0,,PR1
         3 000446   000003 115007                    CMPA    3,DL
         3 000447   000454 601000 3                  TNZ     s:11737

      209    11723    3                         ( RTYPE = 3 OR RTYPE = 2 OR RTYPE = 5
      210    11724    3                         OR RTYPE = 7 OR RTYPE = 9 )
      211    11725    3                         OR
      212    11726    3                         FILE = 0/*@OF*/ AND RTYPE = 3
      213    11727    4                 THEN DO;

      214    11728    4                     SIZE = SIZE + SIZE;

  11728  3 000450   200034 236100                    LDQ     SIZE,,AUTO
         3 000451   200034 036100                    ADLQ    SIZE,,AUTO
         3 000452   200034 756100                    STQ     SIZE,,AUTO

      215    11729    4                     GOTO RETRY;

PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:71   
  11729  3 000453   000123 710000 3                  TRA     RETRY

      216    11730    4                    END;
      217    11731    4                 ELSE DO;                  /* Error */

      218    11732        /*E*  ERROR: VXU-E$UNEXPECTED_LD_VX-0
      219    11733              MESSAGE: Object language error. Unexpected lost data condition.
      220    11734              DESCRIPTION: Self-explanatory.
      221    11735        */
      222    11736                          %SCREAM( ERR#=E$UNEXPECTED_LD_VX, MID="'U'", LEVEL=E$F_D_VX );

  11737  3 000454   000042 630400 4                  EPPR0   34
         3 000455   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 000456   000000 701000 xent               TSX1    VXE$ERROR
         3 000457   000000 011000                    NOP     0

      223    11739    4                     CALL TELL_PAGE_TYPE( NPAGE, 4 );

  11739  3 000460   000033 236000 4                  LDQ     27
         3 000461   200070 756100                    STQ     @PAGE#+1,,AUTO
         3 000462   200003 236100                    LDQ     @NPAGE,,AUTO
         3 000463   200067 756100                    STQ     @ACCESS+3,,AUTO
         3 000464   001630 701000 3                  TSX1    TELL_PAGE_TYPE
         3 000465   000000 011000                    NOP     0

      224    11740    4                    END;

      225    11741    3               END;                        /* Do case( VX_IO_STATUS ); */

      226    11742    2            END;                           /* Do never */

      227    11743        %EJECT;
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:72   
      228    11744    1         ENT_SIZE = VX_REC_SIZE_A(RTYPE);

  11744  3 000466   200007 470500                    LDP0    @RTYPE,,AUTO
         3 000467   000000 720100                    LXL0    0,,PR0
         3 000470   000000 235010 xsym               LDA     VX_REC_SIZE_A,X0
         3 000471   200037 755100                    STA     ENT_SIZE,,AUTO

      229    11745    1         IF RTYPE = 3 AND FILE_TYPE = 0/*@OF*/ THEN ENT_SIZE = 2;

  11745  3 000472   000000 235100                    LDA     0,,PR0
         3 000473   000003 115007                    CMPA    3,DL
         3 000474   000502 601000 3                  TNZ     s:11746
         3 000475   200006 471500                    LDP1    @FILE_TYPE,,AUTO
         3 000476   100000 235100                    LDA     0,,PR1
         3 000477   000502 601000 3                  TNZ     s:11746

  11745  3 000500   000002 236007                    LDQ     2,DL
         3 000501   200037 756100                    STQ     ENT_SIZE,,AUTO

      230    11746    1         CURR$ -> VX$NODE.L_SIZE_A(RTYPE) = CURR$ -> VX$NODE.L_SIZE_A(RTYPE) +
             11746                  TSIZE_READ; /* Accumulate total size read */

  11746  3 000502   200004 471500                    LDP1    @TSIZE_READ,,AUTO
         3 000503   200023 473500                    LDP3    CURR$,,AUTO
         3 000504   300054 236110                    LDQ     44,X0,PR3
         3 000505   100000 036100                    ADLQ    0,,PR1
         3 000506   300054 756110                    STQ     44,X0,PR3

      231    11747    1         CURR$ -> VX$NODE.L_STOP_A$(RTYPE) =

  11747  3 000507   000000 720100                    LXL0    0,,PR0
         3 000510   100000 236100                    LDQ     0,,PR1
         3 000511   200037 136100                    SBLQ    ENT_SIZE,,AUTO
         3 000512   200010 474500                    LDP4    @START$,,AUTO
         3 000513   400000 475500                    LDP5    0,,PR4
         3 000514   500000 636506                    EPPR6   0,QL,PR5
         3 000515   300042 456510                    STP6    34,X0,PR3
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:73   

      232    11748    1                 PINCRW( START$, TSIZE_READ - ENT_SIZE );
      233    11749    2         IF RTYPE >= 3 AND RTYPE <= 9 THEN DO;

  11749  3 000516   000000 235100                    LDA     0,,PR0
         3 000517   000003 115007                    CMPA    3,DL
         3 000520   001473 602000 3                  TNC     s:12006
         3 000521   000012 115007                    CMPA    10,DL
         3 000522   001473 603000 3                  TRC     s:12006

      234    11750    2             NAME_X = VX_MATCH_NAME_A(RTYPE);

  11750  3 000523   000000 720100                    LXL0    0,,PR0
         3 000524   000000 235010 xsym               LDA     VX_MATCH_NAME_A,X0
         3 000525   200040 755100                    STA     NAME_X,,AUTO

      235    11751    2             NAME$  = PINCRW( CURR$ -> VX$NODE.L_START_A$(NAME_X),

  11751  3 000526   300066 721105                    LXL1    54,AL,PR3
         3 000527   200040 722100                    LXL2    NAME_X,,AUTO
         3 000530   300030 475512                    LDP5    24,X2,PR3
         3 000531   500000 636511                    EPPR6   0,X1,PR5
         3 000532   200024 456500                    STP6    NAME$,,AUTO

      236    11752    2                     CURR$ -> VX$NODE.L_PREV_SIZE_A(NAME_X) );
      237    11753    2             NAME_INX = VX_NAME_DISP_A(RTYPE);

  11753  3 000533   000000 235010 xsym               LDA     VX_NAME_DISP_A,X0
         3 000534   200046 755100                    STA     NAME_INX,,AUTO

      238    11754    2             CURR_NAME_SIZE = CURR$ -> VX$NODE.L_SIZE_A(NAME_X)

  11754  3 000535   300054 236112                    LDQ     44,X2,PR3
         3 000536   300066 136112                    SBLQ    54,X2,PR3
         3 000537   200047 756100                    STQ     CURR_NAME_SIZE,,AUTO

      239    11755    2                     - CURR$ -> VX$NODE.L_PREV_SIZE_A(NAME_X);
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:74   
      240    11756    2             P$ = START$;

  11756  3 000540   400000 236100                    LDQ     0,,PR4
         3 000541   200017 756100                    STQ     P$,,AUTO

      241    11757    3             IF FILE = 1/*@RF*/ AND FILE_TYPE = 1/*@RF*/ THEN DO;

  11757  3 000542   200005 475500                    LDP5    @FILE,,AUTO
         3 000543   500000 235100                    LDA     0,,PR5
         3 000544   000001 115007                    CMPA    1,DL
         3 000545   000627 601000 3                  TNZ     s:11779
         3 000546   200006 477500                    LDP7    @FILE_TYPE,,AUTO
         3 000547   700000 235100                    LDA     0,,PR7
         3 000550   000001 115007                    CMPA    1,DL
         3 000551   000627 601000 3                  TNZ     s:11779

      242    11758    4                 DO WHILE( P$ < WHERE$ );

  11758  3 000552   200022 116100                    CMPQ    WHERE$,,AUTO
         3 000553   001473 603000 3                  TRC     s:12006

      243    11759    4                     NAME_DISP = P$ -> VX$TMPLT.A_SBIN(NAME_INX);

  11759  3 000554   200046 235100                    LDA     NAME_INX,,AUTO
         3 000555   000001 735000                    ALS     1
         3 000556   200017 470500                    LDP0    P$,,AUTO
         3 000557   000100 100505                    MLR     fill='000'O
         3 000560   000000 000002                    ADSC9   0,A,PR0                  cn=0,n=2
         3 000561   200072 000004                    ADSC9   @SEVERITY+2,,AUTO        cn=0,n=4
         3 000562   200072 236100                    LDQ     @SEVERITY+2,,AUTO
         3 000563   000022 732000                    QRS     18
         3 000564   200054 756100                    STQ     NAME_DISP,,AUTO

      244    11760    5                     IF NAME_DISP >= 0 THEN DO;

  11760  3 000565   000612 604000 3                  TMI     s:11769

PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:75   
      245    11761    5                         IF NAME_DISP > CURR_NAME_SIZE THEN CALL OUT_OF_RANGE;

  11761  3 000566   000575 604000 3                  TMI     s:11763
         3 000567   200047 116100                    CMPQ    CURR_NAME_SIZE,,AUTO
         3 000570   000575 602000 3                  TNC     s:11763
         3 000571   000575 600000 3                  TZE     s:11763

  11761  3 000572   001536 701000 3                  TSX1    OUT_OF_RANGE
         3 000573   000000 011000                    NOP     0
         3 000574   000620 710000 3                  TRA     s:11771

      246    11762    5                         ELSE
      247    11763    5                             IF PINCRW(NAME$,NAME_DISP)->B$DNAME.COUNT > 511

  11763  3 000575   200024 471500                    LDP1    NAME$,,AUTO
         3 000576   100000 220106                    LDX0    0,QL,PR1
         3 000577   001000 100003                    CMPX0   512,DU
         3 000600   000620 602000 3                  TNC     s:11771

      248    11764    6                             THEN DO;

      249    11765    6                                 J = PINCRW( NAME$, NAME_DISP) -> B$DNAME.COUNT;

  11765  3 000601   200054 720100                    LXL0    NAME_DISP,,AUTO
         3 000602   100000 236110                    LDQ     0,X0,PR1
         3 000603   000022 772000                    QRL     18
         3 000604   200027 756100                    STQ     J,,AUTO

      250    11766    6                                 CALL BAD_NAME_SIZE( J );

  11766  3 000605   200027 633500                    EPPR3   J,,AUTO
         3 000606   200061 453500                    STP3    SOURCE+4,,AUTO
         3 000607   001474 701000 3                  TSX1    BAD_NAME_SIZE
         3 000610   000000 011000                    NOP     0

      251    11767    6                                END;

PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:76   
      252    11768    5                        END;               /* If NAME_DISP >= 0 then do; */

  11768  3 000611   000620 710000 3                  TRA     s:11771

      253    11769    4                     ELSE IF RTYPE ~= 3 THEN CALL OUT_OF_RANGE;

  11769  3 000612   200007 471500                    LDP1    @RTYPE,,AUTO
         3 000613   100000 235100                    LDA     0,,PR1
         3 000614   000003 115007                    CMPA    3,DL
         3 000615   000620 600000 3                  TZE     s:11771

  11769  3 000616   001536 701000 3                  TSX1    OUT_OF_RANGE
         3 000617   000000 011000                    NOP     0

      254    11770        /**/
      255    11771    4                     P$ = PINCRW( P$, ENT_SIZE );

  11771  3 000620   200037 236100                    LDQ     ENT_SIZE,,AUTO
         3 000621   000022 736000                    QLS     18
         3 000622   200017 036100                    ADLQ    P$,,AUTO
         3 000623   200017 756100                    STQ     P$,,AUTO

      256    11772    4                    END;                   /* Do while( P$ < WHERE$ ); */

  11772  3 000624   200022 116100                    CMPQ    WHERE$,,AUTO
         3 000625   000554 602000 3                  TNC     s:11759

      257    11773        /**/
      258    11774    3                END;               /* If file = @RF and FILE_TYPE = @RF then do; */

  11774  3 000626   001473 710000 3                  TRA     s:12006

      259    11775    3             ELSE DO;

      260    11776        /**/
      261    11777        /**/
      262    11778        /**/
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:77   
      263    11779    3                 LAST_NAME_SIZE = CURR$ -> VX$NODE.L_PREV_SIZE_A(NAME_X);

  11779  3 000627   300066 235112                    LDA     54,X2,PR3
         3 000630   200050 755100                    STA     LAST_NAME_SIZE,,AUTO

      264    11780    3                 CURR_SC_ENTRIES = ( CURR$ -> VX$NODE.L_SIZE.SC

  11780  3 000631   300057 236100                    LDQ     47,,PR3
         3 000632   300071 136100                    SBLQ    57,,PR3
         3 000633   000003 506007                    DIV     3,DL
         3 000634   200044 756100                    STQ     CURR_SC_ENTRIES,,AUTO

      265    11781    3                         -  CURR$ -> VX$NODE.L_PREV_SIZE.SC ) / SIZEW( VX$SC ) ;
      266    11782    4                 DO WHILE ( P$ <  WHERE$ );

  11782  3 000635   200017 236100                    LDQ     P$,,AUTO
         3 000636   200022 116100                    CMPQ    WHERE$,,AUTO
         3 000637   001473 603000 3                  TRC     s:12006

      267    11783    4                     NAME_DISP = P$ -> VX$TMPLT.A_SBIN(NAME_INX);

  11783  3 000640   200046 235100                    LDA     NAME_INX,,AUTO
         3 000641   000001 735000                    ALS     1
         3 000642   200017 470500                    LDP0    P$,,AUTO
         3 000643   000100 100505                    MLR     fill='000'O
         3 000644   000000 000002                    ADSC9   0,A,PR0                  cn=0,n=2
         3 000645   200072 000004                    ADSC9   @SEVERITY+2,,AUTO        cn=0,n=4
         3 000646   200072 236100                    LDQ     @SEVERITY+2,,AUTO
         3 000647   000022 732000                    QRS     18
         3 000650   200054 756100                    STQ     NAME_DISP,,AUTO

      268    11784    5                     IF NAME_DISP >= 0 THEN DO; /* A real name */

  11784  3 000651   000716 604000 3                  TMI     s:11803

      269    11785    5                         IF NAME_DISP > CURR_NAME_SIZE THEN

PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:78   
  11785  3 000652   000660 604000 3                  TMI     s:11787
         3 000653   200047 116100                    CMPQ    CURR_NAME_SIZE,,AUTO
         3 000654   000660 602000 3                  TNC     s:11787
         3 000655   000660 600000 3                  TZE     s:11787

      270    11786    5                             CALL OUT_OF_RANGE; /* ERROR: Out of bounds */

  11786  3 000656   001536 701000 3                  TSX1    OUT_OF_RANGE
         3 000657   000000 011000                    NOP     0

      271    11787    5                         Q$ = PINCRW( NAME$, NAME_DISP );

  11787  3 000660   200054 236100                    LDQ     NAME_DISP,,AUTO
         3 000661   000022 736000                    QLS     18
         3 000662   200024 036100                    ADLQ    NAME$,,AUTO
         3 000663   200020 756100                    STQ     Q$,,AUTO

      272    11788    5                         J = Q$ -> B$DNAME.COUNT; /* Get size */

  11788  3 000664   200020 470500                    LDP0    Q$,,AUTO
         3 000665   000000 236100                    LDQ     0,,PR0
         3 000666   000022 772000                    QRL     18
         3 000667   200027 756100                    STQ     J,,AUTO

      273    11789    6                         IF J > 511 THEN DO; /* ERROR: Not poninting properly */

  11789  3 000670   001000 116007                    CMPQ    512,DL
         3 000671   000676 602000 3                  TNC     s:11792

      274    11790    6                             CALL BAD_NAME_SIZE( J );

  11790  3 000672   200027 631500                    EPPR1   J,,AUTO
         3 000673   200061 451500                    STP1    SOURCE+4,,AUTO
         3 000674   001474 701000 3                  TSX1    BAD_NAME_SIZE
         3 000675   000000 011000                    NOP     0

      275    11791    6                            END;
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:79   

      276    11792    5                         NAME_DISP  = NAME_DISP + LAST_NAME_SIZE;

  11792  3 000676   200054 236100                    LDQ     NAME_DISP,,AUTO
         3 000677   200050 036100                    ADLQ    LAST_NAME_SIZE,,AUTO
         3 000700   200054 756100                    STQ     NAME_DISP,,AUTO

      277    11793    6                         IF NAME_DISP > BITBIN('777777'O) THEN DO;

  11793  3 000701   777777 116007                    CMPQ    -1,DL
         3 000702   000707 604400 3                  TMOZ    s:11801

      278    11794        /*E* ERROR: VXU-E$NAMEDISP_TOO_BIG_VX-C
      279    11795        MESSAGE: Internal link error: Name displacement > 777777(octal) in VXU$PREAD.
      280    11796        */
      281    11797                                  %SCREAM( ERR#=E$NAMEDISP_TOO_BIG_VX,LEVEL=@E$F_VX,MID=
             11797                                      "'U'" );

  11798  3 000703   000047 630400 4                  EPPR0   39
         3 000704   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 000705   000000 701000 xent               TSX1    VXE$ERROR
         3 000706   000000 011000                    NOP     0

      282    11800    6                            END;

      283    11801    5                         P$ -> VX$TMPLT.A(NAME_INX) = NAME_DISP;

  11801  3 000707   200046 235100                    LDA     NAME_INX,,AUTO
         3 000710   000001 735000                    ALS     1
         3 000711   200017 470500                    LDP0    P$,,AUTO
         3 000712   000105 101500                    MRL     fill='000'O
         3 000713   200054 000004                    ADSC9   NAME_DISP,,AUTO          cn=0,n=4
         3 000714   000000 000002                    ADSC9   0,A,PR0                  cn=0,n=2

      284    11802    5                        END;

  11802  3 000715   000724 710000 3                  TRA     s:11804
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:80   

      285    11803    4                     ELSE IF RTYPE ~= 3 THEN CALL OUT_OF_RANGE;

  11803  3 000716   200007 471500                    LDP1    @RTYPE,,AUTO
         3 000717   100000 235100                    LDA     0,,PR1
         3 000720   000003 115007                    CMPA    3,DL
         3 000721   000724 600000 3                  TZE     s:11804

  11803  3 000722   001536 701000 3                  TSX1    OUT_OF_RANGE
         3 000723   000000 011000                    NOP     0

      286    11804    5                     IF SOURCE >= 0 THEN DO;

  11804  3 000724   200055 235100                    LDA     SOURCE,,AUTO
         3 000725   001465 604000 3                  TMI     s:12001

      287    11805    6                         DO CASE( RTYPE );

  11805  3 000726   200007 470500                    LDP0    @RTYPE,,AUTO
         3 000727   000000 235100                    LDA     0,,PR0
         3 000730   000011 115007                    CMPA    9,DL
         3 000731   000733 602005 3                  TNC     s:11805+5,AL
         3 000732   001465 710000 3                  TRA     s:12001
         3 000733   001465 710000 3                  TRA     s:12001
         3 000734   001465 710000 3                  TRA     s:12001
         3 000735   001465 710000 3                  TRA     s:12001
         3 000736   000744 710000 3                  TRA     s:11807
         3 000737   001213 710000 3                  TRA     CHECK_DEFINED
         3 000740   001465 710000 3                  TRA     s:12001
         3 000741   001167 710000 3                  TRA     s:11893
         3 000742   001465 710000 3                  TRA     s:12001
         3 000743   001167 710000 3                  TRA     s:11893

      288    11806    6                           CASE( 3 );

      289    11807    7                             IF P$ -> VX$SECT.SEGMENT THEN DO;

PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:81   
  11807  3 000744   200017 471500                    LDP1    P$,,AUTO
         3 000745   100000 236100                    LDQ     0,,PR1
         3 000746   000040 316003                    CANQ    32,DU
         3 000747   001465 600000 3                  TZE     s:12001

      290    11808    8                                 IF VX_OD.SIN.SLIB THEN DO;

  11808  3 000750   000000 236000 xsym               LDQ     VX_OD
         3 000751   000020 316003                    CANQ    16,DU
         3 000752   000757 600000 3                  TZE     s:11816

      291    11809        /*E* ERROR: VXU-E$SEGS_ILLEGAL_VX-C
      292    11810             MESSAGE: Initialized data segments are not allowed in shared libraries.
      293    11811        */
      294    11812                                          %SCREAM( ERR#=E$SEGS_ILLEGAL_VX, LEVEL=@E$F_VX,
             11812                                              AUX=@E$OUOF_VX, MID="'U'" );

  11813  3 000753   000054 630400 4                  EPPR0   44
         3 000754   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 000755   000000 701000 xent               TSX1    VXE$ERROR
         3 000756   000000 011000                    NOP     0

      295    11815    8                                    END;

      296    11816    7                                 NAME_DISP = P$ -> VX$SECT.SEG_NPOINTER;

  11816  3 000757   200017 470500                    LDP0    P$,,AUTO
         3 000760   000001 236100                    LDQ     1,,PR0
         3 000761   000022 736000                    QLS     18
         3 000762   000022 732000                    QRS     18
         3 000763   200054 756100                    STQ     NAME_DISP,,AUTO

      297    11817    8                                 IF NAME_DISP > 0 THEN DO;

  11817  3 000764   001011 604400 3                  TMOZ    s:11824

      298    11818    8                                     IF NAME_DISP > CURR_NAME_SIZE THEN
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:82   

  11818  3 000765   000773 604000 3                  TMI     s:11820
         3 000766   200047 116100                    CMPQ    CURR_NAME_SIZE,,AUTO
         3 000767   000773 602000 3                  TNC     s:11820
         3 000770   000773 600000 3                  TZE     s:11820

      299    11819    8                                         CALL OUT_OF_RANGE;

  11819  3 000771   001536 701000 3                  TSX1    OUT_OF_RANGE
         3 000772   000000 011000                    NOP     0

      300    11820    8                                     Q$ = PINCRW( NAME$, NAME_DISP );

  11820  3 000773   200054 236100                    LDQ     NAME_DISP,,AUTO
         3 000774   000022 736000                    QLS     18
         3 000775   200024 036100                    ADLQ    NAME$,,AUTO
         3 000776   200020 756100                    STQ     Q$,,AUTO

      301    11821    8                                     J = Q$ -> B$DNAME.COUNT;

  11821  3 000777   200020 470500                    LDP0    Q$,,AUTO
         3 001000   000000 236100                    LDQ     0,,PR0
         3 001001   000022 772000                    QRL     18
         3 001002   200027 756100                    STQ     J,,AUTO

      302    11822    8                                     IF J > 511 THEN CALL BAD_NAME_SIZE(J);

  11822  3 001003   001000 116007                    CMPQ    512,DL
         3 001004   001011 602000 3                  TNC     s:11824

  11822  3 001005   200027 631500                    EPPR1   J,,AUTO
         3 001006   200061 451500                    STP1    SOURCE+4,,AUTO
         3 001007   001474 701000 3                  TSX1    BAD_NAME_SIZE
         3 001010   000000 011000                    NOP     0

      303    11823    8                                    END;

PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:83   
      304    11824    7                                 J = P$ -> VX$SECT.TYPE;

  11824  3 001011   200017 470500                    LDP0    P$,,AUTO
         3 001012   000000 236100                    LDQ     0,,PR0
         3 001013   000033 772000                    QRL     27
         3 001014   200027 756100                    STQ     J,,AUTO

      305    11825    8                                 DO CASE (J);

  11825  3 001015   000011 116007                    CMPQ    9,DL
         3 001016   001020 602006 3                  TNC     s:11825+3,QL
         3 001017   001031 710000 3                  TRA     s:11840
         3 001020   001071 710000 3                  TRA     s:11859
         3 001021   001031 710000 3                  TRA     s:11840
         3 001022   001031 710000 3                  TRA     s:11840
         3 001023   001071 710000 3                  TRA     s:11859
         3 001024   001071 710000 3                  TRA     s:11859
         3 001025   001031 710000 3                  TRA     s:11840
         3 001026   001071 710000 3                  TRA     s:11859
         3 001027   001071 710000 3                  TRA     s:11859
         3 001030   001071 710000 3                  TRA     s:11859

      306    11826    8                                   CASE (0,6,3,4,7,8);

      307    11827    8                                   CASE (ELSE);

      308    11828        /*E*  ERROR: VXU-E$ILLEGAL_SEG_SEC_TYPE_VX-0
      309    11829              MESSAGE: Object language error.  Illegal type specified for a section
      310    11830                       which defines a segment.  Type = %U1.
      311    11831        A segment section must be of type READ/WRITE or READ ONLY or LABELLED COMMON (any t
             11831        ype).
      312    11832              DESCRIPTION: Self-explantory.
      313    11833        */
      314    11834                                          %NUMBER( NUM1=J, SIZE1=3, BASE1=10 );

  11840  3 001031   000006 236000 4                  LDQ     6
         3 001032   200076 756100                    STQ     @SEVERITY+6,,AUTO
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:84   
         3 001033   200027 631500                    EPPR1   J,,AUTO
         3 001034   200075 451500                    STP1    @SEVERITY+5,,AUTO
         3 001035   000007 236000 4                  LDQ     7
         3 001036   200074 756100                    STQ     @SEVERITY+4,,AUTO
         3 001037   000010 237000 4                  LDAQ    8
         3 001040   200072 757100                    STAQ    @SEVERITY+2,,AUTO
         3 001041   200072 630500                    EPPR0   @SEVERITY+2,,AUTO
         3 001042   000023 631400 xsym               EPPR1   B_VECTNIL+19
         3 001043   000000 701000 xent               TSX1    VXD$B2C
         3 001044   000000 011000                    NOP     0

      315    11851                                          %SCREAM(
      316    11852                                          ERR#=E$ILLEGAL_SEG_SEC_TYPE_VX,
      317    11853                                          MID="'U'", LEVEL=@E$F_D_VX );

  11854  3 001045   000061 630400 4                  EPPR0   49
         3 001046   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 001047   000000 701000 xent               TSX1    VXE$ERROR
         3 001050   000000 011000                    NOP     0

      318    11856    8                                     K = POFFW( P$, START$ ) / PAGE_SIZE;

  11856  3 001051   200010 470500                    LDP0    @START$,,AUTO
         3 001052   000000 236100                    LDQ     0,,PR0
         3 001053   000022 772000                    QRL     18
         3 001054   200072 756100                    STQ     @SEVERITY+2,,AUTO
         3 001055   200017 236100                    LDQ     P$,,AUTO
         3 001056   000022 772000                    QRL     18
         3 001057   200072 136100                    SBLQ    @SEVERITY+2,,AUTO
         3 001060   200011 471500                    LDP1    @PAGE_SIZE,,AUTO
         3 001061   100000 506100                    DIV     0,,PR1
         3 001062   200030 756100                    STQ     K,,AUTO

      319    11857    8                                     CALL TELL_PAGE_TYPE( K, 4 );

  11857  3 001063   000033 236000 4                  LDQ     27
         3 001064   200070 756100                    STQ     @PAGE#+1,,AUTO
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:85   
         3 001065   200030 633500                    EPPR3   K,,AUTO
         3 001066   200067 453500                    STP3    @ACCESS+3,,AUTO
         3 001067   001630 701000 3                  TSX1    TELL_PAGE_TYPE
         3 001070   000000 011000                    NOP     0

      320    11858    8                                   END;

      321    11859    7                                 IF  NAME_DISP = -1

  11859  3 001071   200054 235100                    LDA     NAME_DISP,,AUTO
         3 001072   000027 115000 xsym               CMPA    B_VECTNIL+23
         3 001073   001100 601000 3                  TNZ     s:11862

      322    11860    7                                 THEN P$ -> VX$SECT.SEG_NPOINTER = 0
             11860                                          /*@DEFAULT_DATA_SEGMENT*/;

  11860  3 001074   000000 220003                    LDX0    0,DU
         3 001075   200017 470500                    LDP0    P$,,AUTO
         3 001076   000001 440100                    SXL0    1,,PR0
         3 001077   001465 710000 3                  TRA     s:12001

      323    11861    8                                 ELSE DO;

      324    11862    8                                     SEGMENT = 0;

  11862  3 001100   200051 450100                    STZ     SEGMENT,,AUTO

      325    11863    9                                     DO WHILE( SEGMENT < 6  AND  Q$ -> B$DNAME.TEXT

  11863  3 001101   001105 710000 3                  TRA     s:11866

      326    11864    9                                             ~= VX_SEG_NAME(SEGMENT) );
      327    11865    9                                         SEGMENT = SEGMENT + 1;

  11865  3 001102   200051 235100                    LDA     SEGMENT,,AUTO
         3 001103   000001 035007                    ADLA    1,DL
         3 001104   200051 755100                    STA     SEGMENT,,AUTO
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:86   

      328    11866    9                                        END;

  11866  3 001105   200051 235100                    LDA     SEGMENT,,AUTO
         3 001106   000006 115007                    CMPA    6,DL
         3 001107   001120 603000 3                  TRC     s:11867
         3 001110   200020 470500                    LDP0    Q$,,AUTO
         3 001111   000000 220100                    LDX0    0,,PR0
         3 001112   200051 236100                    LDQ     SEGMENT,,AUTO
         3 001113   000006 402007                    MPY     6,DL
         3 001114   040006 106540                    CMPC    fill='040'O
         3 001115   000000 400010                    ADSC9   0,,PR0                   cn=2,n=*X0
         3 001116   000000 000006 xsym               ADSC9   VX_SEG_NAME,Q            cn=0,n=6
         3 001117   001102 601000 3                  TNZ     s:11865

      329    11867    9                                     IF SEGMENT = 6 THEN DO;

  11867  3 001120   200051 235100                    LDA     SEGMENT,,AUTO
         3 001121   000006 115007                    CMPA    6,DL
         3 001122   001163 601000 3                  TNZ     s:11887

      330    11868        /*E*  ERROR: VXU-E$ILLEGAL_SEG_NAME_VX-0
      331    11869              MESSAGE: Unrecognized data segment name specified for segment section.
      332    11870                       Name = %U1.  'DS3SID' will be used.
      333    11871                       Legal names recognized by the linker for segment sections are:
      334    11872                       'DS3SID', 'DS4SID', 'DS5SID', 'DS6SID', 'DS7SID' and 'DS8SID'.
      335    11873              DESCRIPTION: Self-explanatory.
      336    11874        */
      337    11875    9                                         VX_EFIELD1.COUNT = Q$ -> B$DNAME.COUNT;

  11875  3 001123   200020 470500                    LDP0    Q$,,AUTO
         3 001124   000000 236100                    LDQ     0,,PR0
         3 001125   000011 736000                    QLS     9
         3 001126   000000 552040 xsym               STBQ    VX_EFIELD1,'40'O

      338    11876    9                                         VX_EFIELD1.CHARS = Q$ -> B$DNAME.TEXT;

PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:87   
  11876  3 001127   000000 220100                    LDX0    0,,PR0
         3 001130   040000 100540                    MLR     fill='040'O
         3 001131   000000 400010                    ADSC9   0,,PR0                   cn=2,n=*X0
         3 001132   000000 200117 xsym               ADSC9   VX_EFIELD1               cn=1,n=79

      339    11877                                              %SCREAM(
      340    11878                                              ERR#=E$ILLEGAL_SEG_NAME_VX,
      341    11879                                              MID="'U'", LEVEL=@E$S_D_VX );

  11880  3 001133   000067 630400 4                  EPPR0   55
         3 001134   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 001135   000000 701000 xent               TSX1    VXE$ERROR
         3 001136   000000 011000                    NOP     0

      342    11882    9                                         K = POFFW( P$, START$ ) / PAGE_SIZE;

  11882  3 001137   200010 470500                    LDP0    @START$,,AUTO
         3 001140   000000 236100                    LDQ     0,,PR0
         3 001141   000022 772000                    QRL     18
         3 001142   200072 756100                    STQ     @SEVERITY+2,,AUTO
         3 001143   200017 236100                    LDQ     P$,,AUTO
         3 001144   000022 772000                    QRL     18
         3 001145   200072 136100                    SBLQ    @SEVERITY+2,,AUTO
         3 001146   200011 471500                    LDP1    @PAGE_SIZE,,AUTO
         3 001147   100000 506100                    DIV     0,,PR1
         3 001150   200030 756100                    STQ     K,,AUTO

      343    11883    9                                         CALL TELL_PAGE_TYPE( K, 3 );

  11883  3 001151   000003 236000 4                  LDQ     3
         3 001152   200070 756100                    STQ     @PAGE#+1,,AUTO
         3 001153   200030 633500                    EPPR3   K,,AUTO
         3 001154   200067 453500                    STP3    @ACCESS+3,,AUTO
         3 001155   001630 701000 3                  TSX1    TELL_PAGE_TYPE
         3 001156   000000 011000                    NOP     0

      344    11884    9                                         P$ -> VX$SECT.SEG_NPOINTER = 0/*@DS3SID*/;
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:88   

  11884  3 001157   000000 220003                    LDX0    0,DU
         3 001160   200017 470500                    LDP0    P$,,AUTO
         3 001161   000001 440100                    SXL0    1,,PR0

      345    11885    9                                        END;

  11885  3 001162   001465 710000 3                  TRA     s:12001

      346    11886    9                                     ELSE DO;

      347    11887    9                                         P$ -> VX$SECT.SEG_NPOINTER = SEGMENT;

  11887  3 001163   000000 620005                    EAX0    0,AL
         3 001164   200017 470500                    LDP0    P$,,AUTO
         3 001165   000001 440100                    SXL0    1,,PR0

      348    11888    9                                        END;

      349    11889    8                                    END;

      350    11890    7                                END;

  11890  3 001166   001465 710000 3                  TRA     s:12001

      351    11891
      352    11892    6                           CASE( 6, 8 );

      353    11893    7                             IF P$ -> VXD$TMPLT.CONSTNT THEN DO;

  11893  3 001167   200017 471500                    LDP1    P$,,AUTO
         3 001170   100001 236100                    LDQ     1,,PR1
         3 001171   400000 316007                    CANQ    -131072,DL
         3 001172   001213 600000 3                  TZE     CHECK_DEFINED

      354    11894    7                                 P$ -> VXD$TMPLT.LFLAGS.MULTIPLE = '0'B/*@NO_B*/;

PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:89   
  11894  3 001173   000073 236000 4                  LDQ     59
         3 001174   100001 356100                    ANSQ    1,,PR1

      355    11895    7                                 P$ -> VXD$TMPLT.LFLAGS.USED = '0'B/*@NO_B*/;

  11895  3 001175   000074 236000 4                  LDQ     60
         3 001176   100001 356100                    ANSQ    1,,PR1

      356    11896    7                                 IF P$->VXD$TMPLT.LFLAGS.SOURCE ~= 5

  11896  3 001177   100001 236100                    LDQ     1,,PR1
         3 001200   074000 376007                    ANQ     30720,DL
         3 001201   024000 116007                    CMPQ    10240,DL
         3 001202   001210 600000 3                  TZE     s:11899

      357    11897    7                                 THEN
      358    11898    7                                     P$ -> VXD$TMPLT.LFLAGS.SOURCE = SOURCE;

  11898  3 001203   200055 236100                    LDQ     SOURCE,,AUTO
         3 001204   000013 736000                    QLS     11
         3 001205   100001 676100                    ERQ     1,,PR1
         3 001206   074000 376007                    ANQ     30720,DL
         3 001207   100001 656100                    ERSQ    1,,PR1

      359    11899    7                                 P$ -> VXD$TMPLT.LFLAGS.IS_DCB = '0'B/*@FALSE_B*/;

  11899  3 001210   000075 236000 4                  LDQ     61
         3 001211   100001 356100                    ANSQ    1,,PR1

      360    11900    7                                END;

  11900  3 001212   001465 710000 3                  TRA     s:12001

      361    11901    6                             ELSE GOTO CHECK_DEFINED;
      362    11902
      363    11903
      364    11904    6                           CASE( 4 );
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:90   

      365    11905    6   CHECK_DEFINED:
      366    11906    7                             IF NOT P$ -> VXD$TMPLT.AD.LFLAGS.DEFINED THEN DO;

  11906  3 001213   200017 471500       CHECK_DEFIN* LDP1    P$,,AUTO
         3 001214   100000 236100                    LDQ     0,,PR1
         3 001215   040000 316003                    CANQ    16384,DU
         3 001216   001447 601000 3                  TNZ     s:11992

      367    11907    7                                 SC## = P$ -> VXD$TMPLT.AD.SECTNUM;
             11907                                          /* Get sections index */

  11907  3 001217   100000 236100                    LDQ     0,,PR1
         3 001220   000022 772000                    QRL     18
         3 001221   003777 376007                    ANQ     2047,DL
         3 001222   200041 756100                    STQ     SC##,,AUTO

      368    11908    8                                 IF SC## > CURR_SC_ENTRIES THEN DO; /* Error */

  11908  3 001223   200044 116100                    CMPQ    CURR_SC_ENTRIES,,AUTO
         3 001224   001240 602000 3                  TNC     s:11920
         3 001225   001240 600000 3                  TZE     s:11920

      369    11909        /*E*  ERROR: VXU-E$BAD_DEF_TO_SC_VX-0
      370    11910              MESSAGE: Object language error. Ref/def index to sections is out of bounds.
      371    11911              DESCRIPTION: Self-explanatory.
      372    11912        */
      373    11913                                          %SCREAM(
      374    11914                                          ERR#=E$BAD_DEF_TO_SC_VX,
      375    11915                                          MID="'U'", LEVEL=@E$F_D_VX );

  11916  3 001226   000077 630400 4                  EPPR0   63
         3 001227   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 001230   000000 701000 xent               TSX1    VXE$ERROR
         3 001231   000000 011000                    NOP     0

      376    11918    8                                     CALL DISPLAY_RANGE( CURR_SC_ENTRIES, SC## );
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:91   

  11918  3 001232   200041 630500                    EPPR0   SC##,,AUTO
         3 001233   200064 450500                    STP0    @RANGE#+1,,AUTO
         3 001234   200044 631500                    EPPR1   CURR_SC_ENTRIES,,AUTO
         3 001235   200063 451500                    STP1    @NAME_SIZE+2,,AUTO
         3 001236   001553 701000 3                  TSX1    DISPLAY_RANGE
         3 001237   000000 011000                    NOP     0

      377    11919    8                                    END;

      378    11920    7                                 SECT$ = PINCRW( VX_LAST_SC$, SC## * SIZEW(VX$SC) );

  11920  3 001240   200041 236100                    LDQ     SC##,,AUTO
         3 001241   000003 402003                    MPY     3,DU
         3 001242   000000 036000 xsym               ADLQ    VX_LAST_SC$
         3 001243   200025 756100                    STQ     SECT$,,AUTO

      379    11921    8                                 IF SECT$ -> VX$SC.SIZE <= P$ -> VXD$TMPLT.AD.OFFSET
             11921                                          THEN DO;

  11921  3 001244   200025 470500                    LDP0    SECT$,,AUTO
         3 001245   000001 236100                    LDQ     1,,PR0
         3 001246   777777 376007                    ANQ     -1,DL
         3 001247   200072 756100                    STQ     @SEVERITY+2,,AUTO
         3 001250   200017 471500                    LDP1    P$,,AUTO
         3 001251   100000 236100                    LDQ     0,,PR1
         3 001252   777777 376007                    ANQ     -1,DL
         3 001253   200072 116100                    CMPQ    @SEVERITY+2,,AUTO
         3 001254   001401 604000 3                  TMI     s:11973

      380    11922    8                                     IF RTYPE = 4  AND  P$ -> B$EDEF.CST = 15

  11922  3 001255   200007 473500                    LDP3    @RTYPE,,AUTO
         3 001256   300000 235100                    LDA     0,,PR3
         3 001257   000004 115007                    CMPA    4,DL
         3 001260   001265 601000 3                  TNZ     s:11930
         3 001261   100001 236100                    LDQ     1,,PR1
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:92   
         3 001262   074000 376007                    ANQ     30720,DL
         3 001263   074000 116007                    CMPQ    30720,DL
         3 001264   001401 600000 3                  TZE     s:11973

      381    11923    8                                     THEN ; /* Let it go */
      382    11924    9                                     ELSE DO;

      383    11925        /*E*  ERROR: VXU-E$BAD_DEF_OFFSET_TO_SC_VX-0
      384    11926              MESSAGE: Offset value (%U1) is beyond section size for
      385    11927                       %U2 DEFINITION: %U3.
      386    11928              DESCRIPTION: Self-explanatory.
      387    11929        */
      388    11930    9                                         K = P$ -> VXD$TMPLT.AD.OFFSET;

  11930  3 001265   100000 236100                    LDQ     0,,PR1
         3 001266   777777 376007                    ANQ     -1,DL
         3 001267   200030 756100                    STQ     K,,AUTO

      389    11931                                              %CHECK( SEV = 4 );

  11932  3 001270   000000 235000 xsym               LDA     VX_ERR_SEV
         3 001271   000004 115007                    CMPA    4,DL
         3 001272   001275 603000 3                  TRC     s:11940

  11932  3 001273   000004 235007                    LDA     4,DL
         3 001274   000000 755000 xsym               STA     VX_ERR_SEV

      390    11934                                              %NUMBER( NUM1=K, SIZE1=6, BASE1=10 );

  11940  3 001275   000006 236000 4                  LDQ     6
         3 001276   200076 756100                    STQ     @SEVERITY+6,,AUTO
         3 001277   200030 634500                    EPPR4   K,,AUTO
         3 001300   200075 454500                    STP4    @SEVERITY+5,,AUTO
         3 001301   000007 236000 4                  LDQ     7
         3 001302   200074 756100                    STQ     @SEVERITY+4,,AUTO
         3 001303   000010 237000 4                  LDAQ    8
         3 001304   200072 757100                    STAQ    @SEVERITY+2,,AUTO
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:93   
         3 001305   200072 630500                    EPPR0   @SEVERITY+2,,AUTO
         3 001306   000023 631400 xsym               EPPR1   B_VECTNIL+19
         3 001307   000000 701000 xent               TSX1    VXD$B2C
         3 001310   000000 011000                    NOP     0

      391    11951   10                                         DO CASE( RTYPE );

  11951  3 001311   200007 470500                    LDP0    @RTYPE,,AUTO
         3 001312   000000 235100                    LDA     0,,PR0
         3 001313   000004 135007                    SBLA    4,DL
         3 001314   000005 115007                    CMPA    5,DL
         3 001315   001317 602005 3                  TNC     s:11951+6,AL
         3 001316   001345 710000 3                  TRA     s:11962
         3 001317   001324 710000 3                  TRA     s:11953
         3 001320   001345 710000 3                  TRA     s:11962
         3 001321   001332 710000 3                  TRA     s:11956
         3 001322   001345 710000 3                  TRA     s:11962
         3 001323   001340 710000 3                  TRA     s:11959

      392    11952   10                                           CASE( 4 );

      393    11953   10                                             VX_EFIELD2.COUNT = 5;

  11953  3 001324   005000 236003                    LDQ     2560,DU
         3 001325   000000 552040 xsym               STBQ    VX_EFIELD2,'40'O

      394    11954   10                                             VX_EFIELD2.CHARS = 'ENTRY';

  11954  3 001326   040000 100400                    MLR     fill='040'O
         3 001327   000000 000005 2                  ADSC9   0                        cn=0,n=5
         3 001330   000000 200117 xsym               ADSC9   VX_EFIELD2               cn=1,n=79
         3 001331   001345 710000 3                  TRA     s:11962

      395    11955   10                                           CASE( 6 );

      396    11956   10                                             VX_EFIELD2.COUNT = 4;

PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:94   
  11956  3 001332   004000 236003                    LDQ     2048,DU
         3 001333   000000 552040 xsym               STBQ    VX_EFIELD2,'40'O

      397    11957   10                                             VX_EFIELD2.CHARS = 'DATA';

  11957  3 001334   040000 100400                    MLR     fill='040'O
         3 001335   000002 000004 2                  ADSC9   2                        cn=0,n=4
         3 001336   000000 200117 xsym               ADSC9   VX_EFIELD2               cn=1,n=79
         3 001337   001345 710000 3                  TRA     s:11962

      398    11958   10                                           CASE( 8 );

      399    11959   10                                             VX_EFIELD2.COUNT = 7;

  11959  3 001340   007000 236003                    LDQ     3584,DU
         3 001341   000000 552040 xsym               STBQ    VX_EFIELD2,'40'O

      400    11960   10                                             VX_EFIELD2.CHARS = 'SEGMENT';

  11960  3 001342   040000 100400                    MLR     fill='040'O
         3 001343   000003 000007 2                  ADSC9   3                        cn=0,n=7
         3 001344   000000 200117 xsym               ADSC9   VX_EFIELD2               cn=1,n=79

      401    11961   10                                           END;

      402    11962    9                                         VX_EFIELD3.COUNT = Q$ -> B$DNAME.COUNT;

  11962  3 001345   200020 471500                    LDP1    Q$,,AUTO
         3 001346   100000 236100                    LDQ     0,,PR1
         3 001347   000011 736000                    QLS     9
         3 001350   000000 552040 xsym               STBQ    VX_EFIELD3,'40'O

      403    11963    9                                         VX_EFIELD3.CHARS = Q$ -> B$DNAME.TEXT;

  11963  3 001351   100000 220100                    LDX0    0,,PR1
         3 001352   040000 100540                    MLR     fill='040'O
         3 001353   100000 400010                    ADSC9   0,,PR1                   cn=2,n=*X0
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:95   
         3 001354   000000 200117 xsym               ADSC9   VX_EFIELD3               cn=1,n=79

      404    11964                                              %SCREAM(
      405    11965                                              ERR#=E$BAD_DEF_OFFSET_TO_SC_VX,
      406    11966                                              MID="'U'", LEVEL=@E$S_VX );

  11967  3 001355   000104 630400 4                  EPPR0   68
         3 001356   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 001357   000000 701000 xent               TSX1    VXE$ERROR
         3 001360   000000 011000                    NOP     0

      407    11969    9                                         K = POFFW( P$, START$ ) / PAGE_SIZE;

  11969  3 001361   200010 470500                    LDP0    @START$,,AUTO
         3 001362   000000 236100                    LDQ     0,,PR0
         3 001363   000022 772000                    QRL     18
         3 001364   200072 756100                    STQ     @SEVERITY+2,,AUTO
         3 001365   200017 236100                    LDQ     P$,,AUTO
         3 001366   000022 772000                    QRL     18
         3 001367   200072 136100                    SBLQ    @SEVERITY+2,,AUTO
         3 001370   200011 471500                    LDP1    @PAGE_SIZE,,AUTO
         3 001371   100000 506100                    DIV     0,,PR1
         3 001372   200030 756100                    STQ     K,,AUTO

      408    11970    9                                         CALL TELL_PAGE_TYPE( K, 3 );

  11970  3 001373   000003 236000 4                  LDQ     3
         3 001374   200070 756100                    STQ     @PAGE#+1,,AUTO
         3 001375   200030 633500                    EPPR3   K,,AUTO
         3 001376   200067 453500                    STP3    @ACCESS+3,,AUTO
         3 001377   001630 701000 3                  TSX1    TELL_PAGE_TYPE
         3 001400   000000 011000                    NOP     0

      409    11971    9                                        END;

      410    11972    8                                    END;
             11972                             /* Else do - if rtype=typedef and P$->VXD$TMPLT = %NOTPROC# */
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:96   

      411    11973    7                                 SC## = SC## + VX_LAST_SC_BASE;

  11973  3 001401   200041 236100                    LDQ     SC##,,AUTO
         3 001402   000000 036000 xsym               ADLQ    VX_LAST_SC_BASE
         3 001403   200041 756100                    STQ     SC##,,AUTO

      412    11974    8                                 IF SC## > BITBIN('777777'O) THEN DO;

  11974  3 001404   000001 116003                    CMPQ    1,DU
         3 001405   001412 602000 3                  TNC     s:11982

      413    11975        /*E* ERROR: VXU-E$SECTNUM_TOO_BIG_VX-C
      414    11976             MESSAGE: Internal link error: Section number > 777777 (octal) in VXU$PREAD.
      415    11977        */
      416    11978                                          %SCREAM( ERR#=E$SECTNUM_TOO_BIG_VX,LEVEL=@E$F_VX,
             11978                                              MID="'U'" );

  11979  3 001406   000111 630400 4                  EPPR0   73
         3 001407   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 001410   000000 701000 xent               TSX1    VXE$ERROR
         3 001411   000000 011000                    NOP     0

      417    11981    8                                    END;

      418    11982    8                                 IF SC## < 2048 THEN DO;

  11982  3 001412   200041 235100                    LDA     SC##,,AUTO
         3 001413   004000 115007                    CMPA    2048,DL
         3 001414   001426 603000 3                  TRC     s:11987

      419    11983    8                                     P$ -> VXD$TMPLT.AD.LOOKUP_SECTNUM = '0'B;

  11983  3 001415   200017 470500                    LDP0    P$,,AUTO
         3 001416   000115 236000 4                  LDQ     77
         3 001417   000000 356100                    ANSQ    0,,PR0

PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:97   
      420    11984    8                                     P$ -> VXD$TMPLT.AD.SECTNUM = SC## ;

  11984  3 001420   200041 236100                    LDQ     SC##,,AUTO
         3 001421   000022 736000                    QLS     18
         3 001422   000000 676100                    ERQ     0,,PR0
         3 001423   003777 376003                    ANQ     2047,DU
         3 001424   000000 656100                    ERSQ    0,,PR0

      421    11985    8                                    END;

  11985  3 001425   001440 710000 3                  TRA     s:11989

      422    11986    8                                 ELSE DO;

      423    11987    8                                     CALL VXU$NEW_SECTNUM(P$->VXD$TMPLT,VX_CURR$->
             11987                                              VX$NODE.NUM,SC##);

  11987  3 001426   200041 630500                    EPPR0   SC##,,AUTO
         3 001427   200074 450500                    STP0    @SEVERITY+4,,AUTO
         3 001430   000000 236000 xsym               LDQ     VX_CURR$
         3 001431   000010 036003                    ADLQ    8,DU
         3 001432   200017 235100                    LDA     P$,,AUTO
         3 001433   200072 757100                    STAQ    @SEVERITY+2,,AUTO
         3 001434   200072 630500                    EPPR0   @SEVERITY+2,,AUTO
         3 001435   000021 631400 xsym               EPPR1   B_VECTNIL+17
         3 001436   000000 701000 xent               TSX1    VXU$NEW_SECTNUM
         3 001437   000000 011000                    NOP     0

      424    11988    8                                    END;

      425    11989    7                                 P$ -> VXD$TMPLT.AD.LFLAGS.SOURCE = SOURCE;

  11989  3 001440   200017 470500                    LDP0    P$,,AUTO
         3 001441   200055 236100                    LDQ     SOURCE,,AUTO
         3 001442   000041 736000                    QLS     33
         3 001443   000000 676100                    ERQ     0,,PR0
         3 001444   700000 376003                    ANQ     -32768,DU
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:98   
         3 001445   000000 656100                    ERSQ    0,,PR0

      426    11990    7                                END;
             11990                                      /* If ~ P$ -> VXD$TMPLT.AD.LFLAGS.DEFINED then do; */

  11990  3 001446   001460 710000 3                  TRA     s:11997

      427    11991    6                             ELSE
      428    11992    6                                 IF P$->VXD$TMPLT.AD.LFLAGS.SOURCE ~= 5

  11992  3 001447   100000 236100                    LDQ     0,,PR1
         3 001450   700000 376003                    ANQ     -32768,DU
         3 001451   500000 116003                    CMPQ    -98304,DU
         3 001452   001460 600000 3                  TZE     s:11997

      429    11993    6                                 THEN
      430    11994    6                                     P$->VXD$TMPLT.AD.LFLAGS.SOURCE = SOURCE;

  11994  3 001453   200055 236100                    LDQ     SOURCE,,AUTO
         3 001454   000041 736000                    QLS     33
         3 001455   100000 676100                    ERQ     0,,PR1
         3 001456   700000 376003                    ANQ     -32768,DU
         3 001457   100000 656100                    ERSQ    0,,PR1

      431    11995
      432    11996
      433    11997    6                             P$ -> VXD$TMPLT.AD.LFLAGS.USED = '0'B/*@NO_B*/;

  11997  3 001460   200017 470500                    LDP0    P$,,AUTO
         3 001461   000116 236000 4                  LDQ     78
         3 001462   000000 356100                    ANSQ    0,,PR0

      434    11998    6                             P$ -> VXD$TMPLT.AD.LFLAGS.MULTIPLE = '0'B/*@NO_B*/;

  11998  3 001463   000117 236000 4                  LDQ     79
         3 001464   000000 356100                    ANSQ    0,,PR0

PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:99   
      435    11999    6                           END;            /* Do case( rtype ); */

      436    12000    5                        END;               /* If source >= 0 then do; */

      437    12001    4                     P$ = PINCRW( P$, ENT_SIZE );

  12001  3 001465   200037 236100                    LDQ     ENT_SIZE,,AUTO
         3 001466   000022 736000                    QLS     18
         3 001467   200017 036100                    ADLQ    P$,,AUTO
         3 001470   200017 756100                    STQ     P$,,AUTO

      438    12002    4                    END;

  12002  3 001471   200022 116100                    CMPQ    WHERE$,,AUTO
         3 001472   000640 602000 3                  TNC     s:11783

      439    12003
      440    12004
      441    12005    3                END;   /* Else do; - if file  = @RF and FILE_TYPE = @RF then do; */

      442    12006    2            END;

  12006  3 001473   001672 710000 3                  TRA     s:12144

      443    12007        %EJECT;
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:100  
      444    12008    1   BAD_NAME_SIZE: PROC( NAME_SIZE );

  12008  3 001474   200060 741300       BAD_NAME_SI* STX1  ! SOURCE+3,,AUTO

      445    12009
      446    12010    2   DCL NAME_SIZE UBIN;
      447    12011
      448    12012        /*E*  ERROR: VXU-E$NAME_COUNT_VX-0
      449    12013              MESSAGE: Object language error. Range error on name size. Value = %U1.
      450    12014              DESCRIPTION: Self-explanatory.
      451    12015        */
      452    12016
      453    12017              %NUMBER( NUM1=NAME_SIZE, SIZE1=12, BASE1=10 );

  12023  3 001475   000006 236000 4                  LDQ     6
         3 001476   200076 756100                    STQ     @SEVERITY+6,,AUTO
         3 001477   200061 236100                    LDQ     @NAME_SIZE,,AUTO
         3 001500   000007 235000 4                  LDA     7
         3 001501   200074 757100                    STAQ    @SEVERITY+4,,AUTO
         3 001502   000010 237000 4                  LDAQ    8
         3 001503   200072 757100                    STAQ    @SEVERITY+2,,AUTO
         3 001504   200072 630500                    EPPR0   @SEVERITY+2,,AUTO
         3 001505   000023 631400 xsym               EPPR1   B_VECTNIL+19
         3 001506   000000 701000 xent               TSX1    VXD$B2C
         3 001507   000000 011000                    NOP     0

      454    12034
      455    12035              %SCREAM( ERR#=E$NAME_COUNT_VX, MID="'U'", LEVEL=@E$F_D_VX );

  12036  3 001510   000121 630400 4                  EPPR0   81
         3 001511   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 001512   000000 701000 xent               TSX1    VXE$ERROR
         3 001513   000000 011000                    NOP     0

      456    12038
      457    12039    2         K = POFFW( P$, START$ ) / PAGE_SIZE;

PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:101  
  12039  3 001514   200010 470500                    LDP0    @START$,,AUTO
         3 001515   000000 236100                    LDQ     0,,PR0
         3 001516   000022 772000                    QRL     18
         3 001517   200072 756100                    STQ     @SEVERITY+2,,AUTO
         3 001520   200017 236100                    LDQ     P$,,AUTO
         3 001521   000022 772000                    QRL     18
         3 001522   200072 136100                    SBLQ    @SEVERITY+2,,AUTO
         3 001523   200011 471500                    LDP1    @PAGE_SIZE,,AUTO
         3 001524   100000 506100                    DIV     0,,PR1
         3 001525   200030 756100                    STQ     K,,AUTO

      458    12040
      459    12041    2         CALL TELL_PAGE_TYPE( K, 4 );

  12041  3 001526   000033 236000 4                  LDQ     27
         3 001527   200070 756100                    STQ     @PAGE#+1,,AUTO
         3 001530   200030 633500                    EPPR3   K,,AUTO
         3 001531   200067 453500                    STP3    @ACCESS+3,,AUTO
         3 001532   001630 701000 3                  TSX1    TELL_PAGE_TYPE
         3 001533   000000 011000                    NOP     0

      460    12042
      461    12043    2   END BAD_NAME_SIZE;

  12043  3 001534   200060 221300                    LDX1  ! SOURCE+3,,AUTO
         3 001535   000001 702211                    TSX2  ! 1,X1

      462    12044
      463    12045        %EJECT;
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:102  
      464    12046    1   OUT_OF_RANGE: PROC;

  12046  3 001536   200060 741300       OUT_OF_RANGE STX1  ! SOURCE+3,,AUTO

      465    12047
      466    12048        /*E*  ERROR: VXU-E$NAME_RANGE_VX-0
      467    12049              MESSAGE: Object language error. Name displacement is out of bounds.
      468    12050              DESCRIPTION: Self-explantory.
      469    12051        */
      470    12052
      471    12053              %SCREAM( ERR#=E$NAME_RANGE_VX, MID="'U'", LEVEL=@E$F_D_VX );

  12054  3 001537   000126 630400 4                  EPPR0   86
         3 001540   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 001541   000000 701000 xent               TSX1    VXE$ERROR
         3 001542   000000 011000                    NOP     0

      472    12056
      473    12057    2         CALL DISPLAY_RANGE( CURR_NAME_SIZE, NAME_DISP );

  12057  3 001543   200054 630500                    EPPR0   NAME_DISP,,AUTO
         3 001544   200064 450500                    STP0    @RANGE#+1,,AUTO
         3 001545   200047 631500                    EPPR1   CURR_NAME_SIZE,,AUTO
         3 001546   200063 451500                    STP1    @NAME_SIZE+2,,AUTO
         3 001547   001553 701000 3                  TSX1    DISPLAY_RANGE
         3 001550   000000 011000                    NOP     0

      474    12058
      475    12059    2   END OUT_OF_RANGE;

  12059  3 001551   200060 221300                    LDX1  ! SOURCE+3,,AUTO
         3 001552   000001 702211                    TSX2  ! 1,X1

      476    12060
      477    12061        %EJECT;
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:103  
      478    12062    1   DISPLAY_RANGE: PROC( RANGE#, ACCESS );

  12062  3 001553   200062 741300       DISPLAY_RAN* STX1  ! @NAME_SIZE+1,,AUTO

      479    12063
      480    12064    2   DCL RANGE# UBIN;
      481    12065    2   DCL ACCESS UBIN;
      482    12066
      483    12067        /*E*  ERROR: VXU-E$DISPLAY_NAME_RANGE_VX-0
      484    12068              MESSAGE: Permissible range: 0 - %U1. Attempted access = %U2.
      485    12069              DESCRIPTION: Self-explanatory.
      486    12070        */
      487    12071
      488    12072              %NUMBER(
      489    12073                      NUM1=RANGE#, SIZE1=6, BASE1=10,
      490    12074                      NUM2=ACCESS, SIZE2=6, BASE2=10 );

  12080  3 001554   000006 236000 4                  LDQ     6
         3 001555   200076 756100                    STQ     @SEVERITY+6,,AUTO
         3 001556   200063 236100                    LDQ     @RANGE#,,AUTO
         3 001557   000007 235000 4                  LDA     7
         3 001560   200074 757100                    STAQ    @SEVERITY+4,,AUTO
         3 001561   000010 237000 4                  LDAQ    8
         3 001562   200072 757100                    STAQ    @SEVERITY+2,,AUTO
         3 001563   200072 630500                    EPPR0   @SEVERITY+2,,AUTO
         3 001564   000023 631400 xsym               EPPR1   B_VECTNIL+19
         3 001565   000000 701000 xent               TSX1    VXD$B2C
         3 001566   000000 011000                    NOP     0

  12084  3 001567   000006 236000 4                  LDQ     6
         3 001570   200076 756100                    STQ     @SEVERITY+6,,AUTO
         3 001571   200064 236100                    LDQ     @ACCESS,,AUTO
         3 001572   000015 235000 4                  LDA     13
         3 001573   200074 757100                    STAQ    @SEVERITY+4,,AUTO
         3 001574   000132 237000 4                  LDAQ    90
         3 001575   200072 757100                    STAQ    @SEVERITY+2,,AUTO
         3 001576   200072 630500                    EPPR0   @SEVERITY+2,,AUTO
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:104  
         3 001577   000023 631400 xsym               EPPR1   B_VECTNIL+19
         3 001600   000000 701000 xent               TSX1    VXD$B2C
         3 001601   000000 011000                    NOP     0

      491    12091
      492    12092              %SCREAM( ERR#=E$DISPLAY_NAME_RANGE_VX, MID="'U'", LEVEL=@E$F_D_VX );

  12093  3 001602   000135 630400 4                  EPPR0   93
         3 001603   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 001604   000000 701000 xent               TSX1    VXE$ERROR
         3 001605   000000 011000                    NOP     0

      493    12095
      494    12096    2         K = POFFW( P$, START$ ) / PAGE_SIZE;

  12096  3 001606   200010 470500                    LDP0    @START$,,AUTO
         3 001607   000000 236100                    LDQ     0,,PR0
         3 001610   000022 772000                    QRL     18
         3 001611   200072 756100                    STQ     @SEVERITY+2,,AUTO
         3 001612   200017 236100                    LDQ     P$,,AUTO
         3 001613   000022 772000                    QRL     18
         3 001614   200072 136100                    SBLQ    @SEVERITY+2,,AUTO
         3 001615   200011 471500                    LDP1    @PAGE_SIZE,,AUTO
         3 001616   100000 506100                    DIV     0,,PR1
         3 001617   200030 756100                    STQ     K,,AUTO

      495    12097
      496    12098    2         CALL TELL_PAGE_TYPE( K, 4 );

  12098  3 001620   000033 236000 4                  LDQ     27
         3 001621   200070 756100                    STQ     @PAGE#+1,,AUTO
         3 001622   200030 633500                    EPPR3   K,,AUTO
         3 001623   200067 453500                    STP3    @ACCESS+3,,AUTO
         3 001624   001630 701000 3                  TSX1    TELL_PAGE_TYPE
         3 001625   000000 011000                    NOP     0

      497    12099
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:105  
      498    12100    2   END DISPLAY_RANGE;

  12100  3 001626   200062 221300                    LDX1  ! @NAME_SIZE+1,,AUTO
         3 001627   000001 702211                    TSX2  ! 1,X1

      499    12101
      500    12102        %EJECT;
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:106  
      501    12103    1   TELL_PAGE_TYPE: PROC( PAGE#, SEVERITY );

  12103  3 001630   200066 741300       TELL_PAGE_T* STX1  ! @ACCESS+2,,AUTO

      502    12104
      503    12105    2   DCL PAGE#    UBIN;
      504    12106    2   DCL SEVERITY UBIN;
      505    12107
      506    12108        /*E*  ERROR: VXU-E$IN_PAGE_OF_REC_TYPE_VX-0
      507    12109              MESSAGE: The error occured in page %U1 of record type %U2.
      508    12110              DESCRIPTION: Self-explanatory.
      509    12111        */
      510    12112
      511    12113              %NUMBER(
      512    12114                      NUM1=PAGE#, SIZE1=3, BASE1=10,
      513    12115                      NUM2=RTYPE, SIZE2=3, BASE2=10 );

  12121  3 001631   000006 236000 4                  LDQ     6
         3 001632   200076 756100                    STQ     @SEVERITY+6,,AUTO
         3 001633   200067 236100                    LDQ     @PAGE#,,AUTO
         3 001634   000007 235000 4                  LDA     7
         3 001635   200074 757100                    STAQ    @SEVERITY+4,,AUTO
         3 001636   000010 237000 4                  LDAQ    8
         3 001637   200072 757100                    STAQ    @SEVERITY+2,,AUTO
         3 001640   200072 630500                    EPPR0   @SEVERITY+2,,AUTO
         3 001641   000023 631400 xsym               EPPR1   B_VECTNIL+19
         3 001642   000000 701000 xent               TSX1    VXD$B2C
         3 001643   000000 011000                    NOP     0

  12125  3 001644   000006 236000 4                  LDQ     6
         3 001645   200076 756100                    STQ     @SEVERITY+6,,AUTO
         3 001646   200007 236100                    LDQ     @RTYPE,,AUTO
         3 001647   000015 235000 4                  LDA     13
         3 001650   200074 757100                    STAQ    @SEVERITY+4,,AUTO
         3 001651   000132 237000 4                  LDAQ    90
         3 001652   200072 757100                    STAQ    @SEVERITY+2,,AUTO
         3 001653   200072 630500                    EPPR0   @SEVERITY+2,,AUTO
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:107  
         3 001654   000023 631400 xsym               EPPR1   B_VECTNIL+19
         3 001655   000000 701000 xent               TSX1    VXD$B2C
         3 001656   000000 011000                    NOP     0

      514    12132
      515    12133              %SCREAM( ERR#=E$IN_PAGE_OF_REC_TYPE_VX, MID="'U'", LEVEL=SEVERITY,
      516    12134                       AUX=@E$OUOF_VX );

  12135  3 001657   000056 237000 4                  LDAQ    46
         3 001660   200074 757100                    STAQ    @SEVERITY+4,,AUTO
         3 001661   200070 236100                    LDQ     @SEVERITY,,AUTO
         3 001662   000142 235000 4                  LDA     98
         3 001663   200072 757100                    STAQ    @SEVERITY+2,,AUTO
         3 001664   200072 630500                    EPPR0   @SEVERITY+2,,AUTO
         3 001665   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 001666   000000 701000 xent               TSX1    VXE$ERROR
         3 001667   000000 011000                    NOP     0

      517    12137        /*
      518    12138                       Note that if severity = 4 the above call to VXE$ERROR will
      519    12139                       cause VXE$ERROR to call M$ERR.
      520    12140        */
      521    12141    2   END TELL_PAGE_TYPE;

  12141  3 001670   200066 221300                    LDX1  ! @ACCESS+2,,AUTO
         3 001671   000001 702211                    TSX2  ! 1,X1

      522    12142
      523    12143
      524    12144    1   END VXU$PREAD;

  12144  3 001672   000000 702200 xent               TSX2  ! X66_ARET
      525    12145        %EOD;

PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:108  
--  Include file information  --

   F_DCB_D.:E05TOU  is referenced.
   VX_DCB_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_FIXED_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VX_MACRO_C.:E05TOU  is referenced.
   VX_PERR_C.:E05TOU  is referenced.
   VX_SUBS_C.:E05TOU  is referenced.
   VX_SWITCH_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   VX_INC_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VXU$PREAD.
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:109  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    64-0-0/w PTR         r     1 @ACCESS                   14-0-0/w PTR         r     1 @AREA_SIZE
    15-0-0/w PTR         r     1 @CURR_P$                  13-0-0/w PTR         r     1 @DS
     5-0-0/w PTR         r     1 @FILE                      6-0-0/w PTR         r     1 @FILE_TYPE
    61-0-0/w PTR         r     1 @NAME_SIZE                 3-0-0/w PTR         r     1 @NPAGE
    67-0-0/w PTR         r     1 @PAGE#                    11-0-0/w PTR         r     1 @PAGE_SIZE
    63-0-0/w PTR         r     1 @RANGE#                    7-0-0/w PTR         r     1 @RTYPE
    70-0-0/w PTR         r     1 @SEVERITY                 16-0-0/w PTR         r     1 @SOURCE_P
    10-0-0/w PTR         r     1 @START$                   12-0-0/w PTR         r     1 @TSIZE
     4-0-0/w PTR         r     1 @TSIZE_READ               *0-0-0/w UBIN        r     1 ACCESS
    *0-0-0/w UBIN        r     1 AREA_SIZE                 53-0-0/w SBIN        r     1 A_SIZE
    23-0-0/w PTR         r     1 CURR$                     47-0-0/w UBIN        r     1 CURR_NAME_SIZE
    *0-0-0/w PTR         r     1 CURR_P$                   44-0-0/w UBIN        r     1 CURR_SC_ENTRIES
    *0-0-0/w UBIN        r     1 DS                        37-0-0/w UBIN        r     1 ENT_SIZE
    *0-0-0/w UBIN        r     1 FILE                      *0-0-0/w UBIN        r     1 FILE_TYPE
    26-0-0/w UBIN        r     1 I                         33-0-0/w UBIN        r     1 IN_PROG
    27-0-0/w UBIN        r     1 J                         30-0-0/w UBIN        r     1 K
    45-0-0/w UBIN        r     1 KEY                       50-0-0/w UBIN        r     1 LAST_NAME_SIZE
    32-0-0/w UBIN        r     1 LOOP                      24-0-0/w PTR         r     1 NAME$
    54-0-0/w SBIN        r     1 NAME_DISP                 46-0-0/w UBIN        r     1 NAME_INX
    *0-0-0/w UBIN        r     1 NAME_SIZE                 40-0-0/w UBIN        r     1 NAME_X
    52-0-0/w UBIN        r     1 NODE#                     *0-0-0/w UBIN        r     1 NPAGE
    17-0-0/w PTR         r     1 P$                        *0-0-0/w UBIN        r     1 PAGE#
    *0-0-0/w SBIN        r     1 PAGE_SIZE                 20-0-0/w PTR         r     1 Q$
    21-0-0/w PTR         r     1 R$                        *0-0-0/w UBIN        r     1 RANGE#
    *0-0-0/w UBIN        r     1 RTYPE                     41-0-0/w UBIN        r     1 SC##
    25-0-0/w PTR         r     1 SECT$                     51-0-0/w UBIN        r     1 SEGMENT
    *0-0-0/w UBIN        r     1 SEVERITY                  34-0-0/w UBIN        r     1 SIZE
    35-0-0/w UBIN        r     1 SIZE_READ                 55-0-0/w SBIN        r     1 SOURCE
    *0-0-0/w SBIN        r     1 SOURCE_P                  *0-0-0/w PTR         r     1 START$
    *0-0-0/w UBIN        r     1 TSIZE                     *0-0-0/w UBIN        r     1 TSIZE_READ
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:110  
    22-0-0/w PTR         r     1 WHERE$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 VX_CURR$                   0-0-0/w STRC(720)   r     1 VX_EFIELD1
     0-0-0/w STRC(720)   r     1 VX_EFIELD2                 0-0-0/w STRC(720)   r     1 VX_EFIELD3
     0-0-0/w UBIN        r     1 VX_ERR_SEV                 0-0-0/w SBIN        r     1 VX_IO_SIZEW
     0-0-0/w SBIN        r     1 VX_IO_STATUS               0-0-0/w PTR         r     1 VX_LAST_SC$
     0-0-0/w UBIN        r     1 VX_LAST_SC_BASE
     0-0-0/w UBIN        r     1 VX_MATCH_NAME_A(0:9)
     0-0-0/w SBIN        r     1 VX_M_ALL(0:8)
     0-0-0/w PTR         r     1 VX_M_BASE_PTR(0:8)
     0-0-0/w SBIN        r     1 VX_M_FREE(0:8)
     0-0-0/w UBIN        r     1 VX_NAME_DISP_A(0:9)
     0-0-0/b STRC(116)   r     1 VX_OD
     0-0-0/w SBIN        r     1 VX_REC_SIZE_A(0:15)
     0-0-0/c CHAR(6)     r     1 VX_SEG_NAME(0:5)

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w ASTR(18)    r     1 B$DNAME                    0-0-0/w STRC(72)    r     1 B$EDEF
     0-0-0/d ASTR(3528)  r     1 F$DCB                      0-0-0/w STRC(3672)  r     1 VX$NODE
     0-0-0/w STRC(108)   r     1 VX$SC                      0-0-0/w STRC(72)    r     1 VX$SECT
     0-0-0/w STRC(72)    r     1 VX$TMPLT                   0-0-0/w STRC(72)    r     1 VXD$TMPLT


   Procedure VXU$PREAD requires 955 words for executable code.
   Procedure VXU$PREAD requires 64 words of local(AUTO) storage.
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:111  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:112  
          MINI XREF LISTING

ACCESS IN PROCEDURE DISPLAY_RANGE
     12065**DCL     12062--PROC    12084<>CALL
AREA_SIZE
     11336**DCL        37--PROC    11613>>ASSIGN  11637<<ASSIGN  11637>>ASSIGN
A_SIZE
     11457**DCL     11613<<ASSIGN  11628>>IF      11629>>ASSIGN  11638<<ASSIGN  11638>>ASSIGN  11681<<ASSIGN
     11681>>ASSIGN
B$DNAME.COUNT
     11301**DCL     11308--IMP-SIZ 11763>>IF      11765>>ASSIGN  11788>>ASSIGN  11821>>ASSIGN  11863>>DOWHILE
     11875>>ASSIGN  11876>>ASSIGN  11962>>ASSIGN  11963>>ASSIGN
B$DNAME.TEXT
     11308**DCL     11863>>DOWHILE 11876>>ASSIGN  11963>>ASSIGN
B$EDEF.CST
     11211**DCL     11922>>IF
B$EDEF.OU
     11182**DCL     11188--REDEF
BAD_NAME_SIZE
     12008**PROC    11766--CALL    11790--CALL    11822--CALL
CHECK_DEFINED
     11906**LABEL   11901--GOTO
CURR$
     11395**DCL     11605<<ASSIGN  11618>>ASSIGN  11620>>IF      11621>>ASSIGN  11622>>ASSIGN  11622>>ASSIGN
     11746>>ASSIGN  11746>>ASSIGN  11747>>ASSIGN  11751>>ASSIGN  11751>>ASSIGN  11754>>ASSIGN  11754>>ASSIGN
     11779>>ASSIGN  11780>>ASSIGN  11780>>ASSIGN
CURR_NAME_SIZE
     11437**DCL     11754<<ASSIGN  11761>>IF      11785>>IF      11818>>IF      12057<>CALL
CURR_P$
     11337**DCL        37--PROC    11605>>ASSIGN
CURR_SC_ENTRIES
     11434**DCL     11780<<ASSIGN  11908>>IF      11918<>CALL
DISPLAY_RANGE
     12062**PROC    11918--CALL    12057--CALL
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:113  
DS
     11335**DCL        37--PROC    11631>>IF      11631>>IF      11632>>ASSIGN  11632>>ASSIGN  11633>>ASSIGN
     11633>>ASSIGN  11635<>CALL
ENT_SIZE
     11429**DCL     11744<<ASSIGN  11745<<ASSIGN  11747>>ASSIGN  11771>>ASSIGN  12001>>ASSIGN
F$DCB.ACTPOS
     11580**DCL     11580--REDEF
F$DCB.ARS#
     11554**DCL     11554--REDEF
F$DCB.ATTR
     11573**DCL     11574--REDEF
F$DCB.BORROW
     11588**DCL     11588--REDEF   11588--REDEF   11588--REDEF
F$DCB.DCBNAME.L
     11602**DCL     11602--IMP-SIZ
F$DCB.EOMCHAR#
     11558**DCL     11558--REDEF
F$DCB.FLDID
     11583**DCL     11583--REDEF
F$DCB.FORM$
     11577**DCL     11577--REDEF
F$DCB.FSECT
     11593**DCL     11593--REDEF
F$DCB.FSN#
     11570**DCL     11570--REDEF   11570--REDEF   11571--REDEF
F$DCB.HEADER$
     11576**DCL     11576--REDEF
F$DCB.IXTNSIZE#
     11574**DCL     11574--REDEF
F$DCB.LASTSTA$
     11563**DCL     11563--REDEF
F$DCB.LVL
     11589**DCL     11589--REDEF
F$DCB.NAME#.C
     11564**DCL     11564--REDEF
F$DCB.NOEOF
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:114  
     11586**DCL     11586--REDEF
F$DCB.NRECS#
     11575**DCL     11575--REDEF
F$DCB.NRECX
     11594**DCL     11594--REDEF
F$DCB.OHDR
     11586**DCL     11586--REDEF
F$DCB.ORG#
     11569**DCL     11569--REDEF
F$DCB.PRECNO
     11592**DCL     11592--REDEF
F$DCB.RCSZ
     11598**DCL     11598--REDEF
F$DCB.RES#
     11565**DCL     11565--REDEF
F$DCB.SETX
     11577**DCL     11577--REDEF
F$DCB.TAB$
     11577**DCL     11577--REDEF
F$DCB.TDA
     11591**DCL     11592--REDEF
F$DCB.WSN#
     11565**DCL     11565--REDEF
FILE
     11329**DCL        37--PROC    11640<>CALL    11644>>IF      11702>>IF      11708>>IF      11722>>IF
     11722>>IF      11757>>IF
FILE_TYPE
     11330**DCL        37--PROC    11607>>ASSIGN  11628>>IF      11628>>IF      11641>>IF      11745>>IF
     11757>>IF
I
     11415**DCL     11416--REDEF   11623<<DOINDEX 11624<>CALL    11677<>CALL
IN_PROG
     11425**DCL     11608<<ASSIGN  11611>>ASSIGN  11626>>IF      11626>>ASSIGN  11682<<ASSIGN  11682>>ASSIGN
IO_ERROR
     11690**LABEL   11640--CALLALT
J
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:115  
     11417**DCL     11418--REDEF   11629<<ASSIGN  11631>>IF      11633>>ASSIGN  11635<>CALL    11637>>ASSIGN
     11638>>ASSIGN  11765<<ASSIGN  11766<>CALL    11788<<ASSIGN  11789>>IF      11790<>CALL    11821<<ASSIGN
     11822>>IF      11822<>CALL    11824<<ASSIGN  11825>>DOCASE  11840<>CALL
K
     11419**DCL     11420--REDEF   11856<<ASSIGN  11857<>CALL    11882<<ASSIGN  11883<>CALL    11930<<ASSIGN
     11940<>CALL    11969<<ASSIGN  11970<>CALL    12039<<ASSIGN  12041<>CALL    12096<<ASSIGN  12098<>CALL
KEY
     11435**DCL     11607<<ASSIGN  11624<>CALL    11640<>CALL
L
     11421**DCL     11422--REDEF
LAST_NAME_SIZE
     11438**DCL     11779<<ASSIGN  11792>>ASSIGN
LOOP
     11424**DCL     11611<<ASSIGN  11623>>DOINDEX
NAME$
     11396**DCL     11751<<ASSIGN  11763>>IF      11765>>ASSIGN  11787>>ASSIGN  11820>>ASSIGN
NAME_DISP
     11458**DCL     11759<<ASSIGN  11760>>IF      11761>>IF      11763>>IF      11765>>ASSIGN  11783<<ASSIGN
     11784>>IF      11785>>IF      11787>>ASSIGN  11792<<ASSIGN  11792>>ASSIGN  11793>>IF      11801>>ASSIGN
     11816<<ASSIGN  11817>>IF      11818>>IF      11820>>ASSIGN  11859>>IF      12057<>CALL
NAME_INX
     11436**DCL     11753<<ASSIGN  11759>>ASSIGN  11783>>ASSIGN  11801>>ASSIGN
NAME_SIZE IN PROCEDURE BAD_NAME_SIZE
     12010**DCL     12008--PROC    12023<>CALL
NAME_X
     11430**DCL     11750<<ASSIGN  11751>>ASSIGN  11751>>ASSIGN  11754>>ASSIGN  11754>>ASSIGN  11779>>ASSIGN
NODE#
     11440**DCL     11616<<ASSIGN  11618<<ASSIGN  11624<>CALL
NPAGE
     11327**DCL        37--PROC    11609<<ASSIGN  11684<<ASSIGN  11684>>ASSIGN  11699<>CALL    11708>>IF
     11718<>CALL    11739<>CALL
OUT_OF_RANGE
     12046**PROC    11761--CALL    11769--CALL    11786--CALL    11803--CALL    11819--CALL
P$
     11390**DCL     11756<<ASSIGN  11758>>DOWHILE 11759>>ASSIGN  11771<<ASSIGN  11771>>ASSIGN  11782>>DOWHILE
     11783>>ASSIGN  11801>>ASSIGN  11807>>IF      11816>>ASSIGN  11824>>ASSIGN  11856>>ASSIGN  11860>>ASSIGN
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:116  
     11882>>ASSIGN  11884>>ASSIGN  11887>>ASSIGN  11893>>IF      11894>>ASSIGN  11895>>ASSIGN  11896>>IF
     11898>>ASSIGN  11899>>ASSIGN  11906>>IF      11907>>ASSIGN  11921>>IF      11922>>IF      11930>>ASSIGN
     11969>>ASSIGN  11983>>ASSIGN  11984>>ASSIGN  11987>>CALL    11989>>ASSIGN  11992>>IF      11994>>ASSIGN
     11997>>ASSIGN  11998>>ASSIGN  12001<<ASSIGN  12001>>ASSIGN  12039>>ASSIGN  12096>>ASSIGN
PAGE# IN PROCEDURE TELL_PAGE_TYPE
     12105**DCL     12103--PROC    12121<>CALL
PAGE_SIZE
     11333**DCL        37--PROC    11611>>ASSIGN  11611>>ASSIGN  11625>>ASSIGN  11626>>IF      11856>>ASSIGN
     11882>>ASSIGN  11969>>ASSIGN  12039>>ASSIGN  12096>>ASSIGN
Q$
     11391**DCL     11787<<ASSIGN  11788>>ASSIGN  11820<<ASSIGN  11821>>ASSIGN  11863>>DOWHILE 11863>>DOWHILE
     11875>>ASSIGN  11876>>ASSIGN  11876>>ASSIGN  11962>>ASSIGN  11963>>ASSIGN  11963>>ASSIGN
R$
     11392**DCL     11632<<ASSIGN  11635<>CALL
RANGE# IN PROCEDURE DISPLAY_RANGE
     12064**DCL     12062--PROC    12080<>CALL
RETRY
     11628**LABEL   11729--GOTO
RTYPE
     11331**DCL        37--PROC    11620>>IF      11621>>ASSIGN  11622>>ASSIGN  11622>>ASSIGN  11624<>CALL
     11628>>IF      11641>>IF      11644>>IF      11702>>IF      11702>>IF      11708>>IF      11722>>IF
     11722>>IF      11722>>IF      11722>>IF      11722>>IF      11722>>IF      11744>>ASSIGN  11745>>IF
     11746>>ASSIGN  11746>>ASSIGN  11747>>ASSIGN  11749>>IF      11749>>IF      11750>>ASSIGN  11753>>ASSIGN
     11769>>IF      11803>>IF      11805>>DOCASE  11922>>IF      11951>>DOCASE  12125<>CALL
SC##
     11431**DCL     11907<<ASSIGN  11908>>IF      11918<>CALL    11920>>ASSIGN  11973<<ASSIGN  11973>>ASSIGN
     11974>>IF      11982>>IF      11984>>ASSIGN  11987<>CALL
SECT$
     11397**DCL     11920<<ASSIGN  11921>>IF
SEGMENT
     11439**DCL     11862<<ASSIGN  11863>>DOWHILE 11863>>DOWHILE 11865<<ASSIGN  11865>>ASSIGN  11867>>IF
     11887>>ASSIGN
SEVERITY IN PROCEDURE TELL_PAGE_TYPE
     12106**DCL     12103--PROC    12135<>CALL
SIZE
     11426**DCL     11625<<ASSIGN  11626<<ASSIGN  11628>>IF      11629>>ASSIGN  11640<>CALL    11641>>ASSIGN
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:117  
     11643>>IF      11663<>CALL    11682>>ASSIGN  11728<<ASSIGN  11728>>ASSIGN  11728>>ASSIGN
SIZE_READ
     11427**DCL     11641<<ASSIGN  11642<<ASSIGN  11643>>IF      11680>>ASSIGN  11681>>ASSIGN  11683>>ASSIGN
SOURCE
     11459**DCL     11606<<ASSIGN  11614>>DOCASE  11804>>IF      11898>>ASSIGN  11989>>ASSIGN  11994>>ASSIGN
SOURCE_P
     11338**DCL        37--PROC    11606>>ASSIGN
START$
     11332**DCL        37--PROC    11612>>ASSIGN  11747>>ASSIGN  11756>>ASSIGN  11856>>ASSIGN  11882>>ASSIGN
     11969>>ASSIGN  12039>>ASSIGN  12096>>ASSIGN
TELL_PAGE_TYPE
     12103**PROC    11677--CALL    11699--CALL    11718--CALL    11739--CALL    11857--CALL    11883--CALL
     11970--CALL    12041--CALL    12098--CALL
TSIZE
     11334**DCL        37--PROC    11608>>ASSIGN
TSIZE_READ
     11328**DCL        37--PROC    11610<<ASSIGN  11683<<ASSIGN  11683>>ASSIGN  11704>>IF      11746>>ASSIGN
     11747>>ASSIGN
VX$NODE.ADDR_START_A
     10815**DCL     10816--REDEF
VX$NODE.ADDR_STOP_A
     10820**DCL     10821--REDEF
VX$NODE.L_PREV_SIZE
     10873**DCL     10884--REDEF
VX$NODE.L_PREV_SIZE.SC
     10877**DCL     11780>>ASSIGN
VX$NODE.L_PREV_SIZE_A
     10884**DCL     11622<<ASSIGN  11751>>ASSIGN  11754>>ASSIGN  11779>>ASSIGN
VX$NODE.L_SC_START
     10892**DCL     10897--REDEF
VX$NODE.L_SC_STOP
     10898**DCL     10903--REDEF
VX$NODE.L_SIZE
     10861**DCL     10872--REDEF
VX$NODE.L_SIZE.SC
     10865**DCL     11780>>ASSIGN
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:118  
VX$NODE.L_SIZE_A
     10872**DCL     11622>>ASSIGN  11746<<ASSIGN  11746>>ASSIGN  11754>>ASSIGN
VX$NODE.L_START
     10837**DCL     10848--REDEF
VX$NODE.L_START_A$
     10848**DCL     11620>>IF      11621<<ASSIGN  11751>>ASSIGN
VX$NODE.L_STOP
     10849**DCL     10860--REDEF
VX$NODE.L_STOP_A$
     10860**DCL     11747<<ASSIGN
VX$NODE.NUM
     10813**DCL     11618>>ASSIGN  11987<>CALL
VX$NODE.PROMOTE_HEAD
     10904**DCL     10907--REDEF
VX$NODE.PROMOTE_TAIL
     10908**DCL     10911--REDEF
VX$NODE.START_PAGE#_A
     10825**DCL     10826--REDEF
VX$NODE.STOP_PAGE#_A
     10830**DCL     10831--REDEF
VX$SC
     10942**DCL     11780--ASSIGN  11920--ASSIGN
VX$SC.SIZE
     10982**DCL     11921>>IF
VX$SECT.MBZ
     11053**DCL     11055--REDEF   11059--REDEF
VX$SECT.SEGMENT
     11035**DCL     11807>>IF
VX$SECT.SEG_NPOINTER
     11055**DCL     11816>>ASSIGN  11860<<ASSIGN  11884<<ASSIGN  11887<<ASSIGN
VX$SECT.TYPE
     11007**DCL     11824>>ASSIGN
VX$TMPLT.A
     11266**DCL     11267--REDEF   11268--REDEF   11801<<ASSIGN
VX$TMPLT.A_SBIN
     11267**DCL     11759>>ASSIGN  11783>>ASSIGN
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:119  
VXA$GET
     11365**DCL-ENT 11635--CALL
VXD$B2C
     11363**DCL-ENT 11663--CALL    11667--CALL    11840--CALL    11940--CALL    12023--CALL    12080--CALL
     12084--CALL    12121--CALL    12125--CALL
VXD$TMPLT
     11091**DCL     11987<>CALL
VXD$TMPLT.AD.ISADDR
     11114**DCL     11116--REDEF
VXD$TMPLT.AD.LFLAGS.DEFINED
     11102**DCL     11906>>IF
VXD$TMPLT.AD.LFLAGS.MULTIPLE
     11104**DCL     11998<<ASSIGN
VXD$TMPLT.AD.LFLAGS.SOURCE
     11100**DCL     11989<<ASSIGN  11992>>IF      11994<<ASSIGN
VXD$TMPLT.AD.LFLAGS.USED
     11106**DCL     11997<<ASSIGN
VXD$TMPLT.AD.LOOKUP_SECTNUM
     11108**DCL     11983<<ASSIGN
VXD$TMPLT.AD.OFFSET
     11116**DCL     11921>>IF      11930>>ASSIGN
VXD$TMPLT.AD.SECTNUM
     11111**DCL     11907>>ASSIGN  11984<<ASSIGN
VXD$TMPLT.CONSTNT
     11121**DCL     11893>>IF
VXD$TMPLT.LFLAGS
     11127**DCL     11140--REDEF
VXD$TMPLT.LFLAGS.IS_DCB
     11136**DCL     11899<<ASSIGN
VXD$TMPLT.LFLAGS.MULTIPLE
     11130**DCL     11894<<ASSIGN
VXD$TMPLT.LFLAGS.SOURCE
     11134**DCL     11896>>IF      11898<<ASSIGN
VXD$TMPLT.LFLAGS.USED
     11132**DCL     11895<<ASSIGN
VXD$TMPLT.VALUE
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:120  
     11092**DCL     11094--REDEF
VXE$ERROR
     11356**DCL-ENT 11650--CALL    11675--CALL    11697--CALL    11716--CALL    11737--CALL    11798--CALL
     11813--CALL    11854--CALL    11880--CALL    11916--CALL    11967--CALL    11979--CALL    12036--CALL
     12054--CALL    12093--CALL    12135--CALL
VXI$READ
     11371**DCL-ENT 11640--CALL
VXK$KEY
     11370**DCL-ENT 11624--CALL
VXU$NEW_SECTNUM
     11372**DCL-ENT 11987--CALL
VX_BIAS.A
      9620**DCL      9621--REDEF
VX_CBUF.CHARS_A
      9554**DCL      9555--REDEF
VX_CONST_DCB.ACTPOS
     10736**DCL     10736--REDEF
VX_CONST_DCB.ARS#
     10695**DCL     10695--REDEF
VX_CONST_DCB.ATTR#
     10725**DCL     10725--REDEF   10727--REDEF
VX_CONST_DCB.BORROW
     10747**DCL     10747--REDEF   10747--REDEF   10747--REDEF
VX_CONST_DCB.EOMCHAR#
     10702**DCL     10703--REDEF
VX_CONST_DCB.FLDID
     10739**DCL     10740--REDEF
VX_CONST_DCB.FORM$
     10731**DCL     10731--REDEF
VX_CONST_DCB.FSECT
     10754**DCL     10754--REDEF
VX_CONST_DCB.FSN#
     10721**DCL     10721--REDEF   10721--REDEF   10722--REDEF
VX_CONST_DCB.HEADER$
     10730**DCL     10731--REDEF
VX_CONST_DCB.IXTNSIZE#
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:121  
     10727**DCL     10728--REDEF
VX_CONST_DCB.LASTSTA$
     10711**DCL     10711--REDEF
VX_CONST_DCB.LVL
     10748**DCL     10748--REDEF
VX_CONST_DCB.NAME#.C
     10711**DCL     10712--REDEF
VX_CONST_DCB.NOEOF
     10743**DCL     10743--REDEF
VX_CONST_DCB.NRECS#
     10728**DCL     10728--REDEF
VX_CONST_DCB.NRECX
     10755**DCL     10755--REDEF
VX_CONST_DCB.OHDR
     10744**DCL     10744--REDEF
VX_CONST_DCB.ORG#
     10719**DCL     10720--REDEF
VX_CONST_DCB.PRECNO
     10752**DCL     10752--REDEF
VX_CONST_DCB.RCSZ
     10760**DCL     10760--REDEF
VX_CONST_DCB.RES#
     10713**DCL     10713--REDEF
VX_CONST_DCB.SETX
     10732**DCL     10732--REDEF
VX_CONST_DCB.TAB$
     10731**DCL     10731--REDEF
VX_CONST_DCB.TDA
     10751**DCL     10752--REDEF
VX_CONST_DCB.WSN#
     10713**DCL     10714--REDEF
VX_CURR$
      9589**DCL     11987>>CALL
VX_EBUF.CHARS_A
     10143**DCL     10144--REDEF
VX_EFIELD1.CHARS
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:122  
     10152**DCL     10153--REDEF   11876<<ASSIGN
VX_EFIELD1.CHARS_A
     10153**DCL     11663<>CALL    11840<>CALL    11940<>CALL    12023<>CALL    12080<>CALL    12121<>CALL
VX_EFIELD1.COUNT
     10151**DCL     11875<<ASSIGN
VX_EFIELD2.CHARS
     10156**DCL     10157--REDEF   11954<<ASSIGN  11957<<ASSIGN  11960<<ASSIGN
VX_EFIELD2.CHARS_A
     10157**DCL     11667<>CALL    12084<>CALL    12125<>CALL
VX_EFIELD2.COUNT
     10155**DCL     11953<<ASSIGN  11956<<ASSIGN  11959<<ASSIGN
VX_EFIELD3.CHARS
     10160**DCL     10161--REDEF   11963<<ASSIGN
VX_EFIELD3.COUNT
     10159**DCL     11962<<ASSIGN
VX_EI_KEY_BUF.KEY
     10536**DCL     10537--REDEF
VX_ERRORS
      9597**DCL      9608--REDEF
VX_ERRORS.CONFLICT_A
      9603**DCL      9604--REDEF
VX_ERRORS.UNSAT_A
      9599**DCL      9600--REDEF
VX_ERR_SEV
      9610**DCL     11932>>IF      11932<<ASSIGN
VX_IMAGE_DATA.CPAGE#_A
      8734**DCL      8735--REDEF
VX_IMAGE_DATA.NODE_A$
      8746**DCL      8747--REDEF
VX_IMAGE_DATA.START_A$
      8738**DCL      8739--REDEF
VX_IMAGE_DATA.STOP_A$
      8742**DCL      8743--REDEF
VX_IMAGE_DS3.CPAGE#_A
      8803**DCL      8804--REDEF
VX_IMAGE_DS3.NODE_A$
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:123  
      8815**DCL      8816--REDEF
VX_IMAGE_DS3.START_A$
      8807**DCL      8808--REDEF
VX_IMAGE_DS3.STOP_A$
      8811**DCL      8812--REDEF
VX_IMAGE_DS4.CPAGE#_A
      8826**DCL      8827--REDEF
VX_IMAGE_DS4.NODE_A$
      8838**DCL      8839--REDEF
VX_IMAGE_DS4.START_A$
      8830**DCL      8831--REDEF
VX_IMAGE_DS4.STOP_A$
      8834**DCL      8835--REDEF
VX_IMAGE_DS5.CPAGE#_A
      8849**DCL      8850--REDEF
VX_IMAGE_DS5.NODE_A$
      8861**DCL      8862--REDEF
VX_IMAGE_DS5.START_A$
      8853**DCL      8854--REDEF
VX_IMAGE_DS5.STOP_A$
      8857**DCL      8858--REDEF
VX_IMAGE_DS6.CPAGE#_A
      8872**DCL      8873--REDEF
VX_IMAGE_DS6.NODE_A$
      8884**DCL      8885--REDEF
VX_IMAGE_DS6.START_A$
      8876**DCL      8877--REDEF
VX_IMAGE_DS6.STOP_A$
      8880**DCL      8881--REDEF
VX_IMAGE_DS7.CPAGE#_A
      8895**DCL      8896--REDEF
VX_IMAGE_DS7.NODE_A$
      8907**DCL      8908--REDEF
VX_IMAGE_DS7.START_A$
      8899**DCL      8900--REDEF
VX_IMAGE_DS7.STOP_A$
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:124  
      8903**DCL      8904--REDEF
VX_IMAGE_DS8.CPAGE#_A
      8918**DCL      8919--REDEF
VX_IMAGE_DS8.NODE_A$
      8930**DCL      8931--REDEF
VX_IMAGE_DS8.START_A$
      8922**DCL      8923--REDEF
VX_IMAGE_DS8.STOP_A$
      8926**DCL      8927--REDEF
VX_IMAGE_PROC.CPAGE#_A
      8757**DCL      8758--REDEF
VX_IMAGE_PROC.NODE_A$
      8769**DCL      8770--REDEF
VX_IMAGE_PROC.START_A$
      8761**DCL      8762--REDEF
VX_IMAGE_PROC.STOP_A$
      8765**DCL      8766--REDEF
VX_IMAGE_ROS.CPAGE#_A
      8780**DCL      8781--REDEF
VX_IMAGE_ROS.NODE_A$
      8792**DCL      8793--REDEF
VX_IMAGE_ROS.START_A$
      8784**DCL      8785--REDEF
VX_IMAGE_ROS.STOP_A$
      8788**DCL      8789--REDEF
VX_IO_SIZEW
     10174**DCL     11642>>ASSIGN  11667<>CALL
VX_IO_STATUS
     10173**DCL     11690>>DOCASE
VX_LAST_SC$
      9533**DCL     11920>>ASSIGN
VX_LAST_SC_BASE
      9535**DCL     11973>>ASSIGN
VX_MATCH_NAME_A
     10266**DCL     11750>>ASSIGN
VX_M_ALL
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:125  
      9631**DCL     11631>>IF
VX_M_BASE_PTR
      9633**DCL     11632>>ASSIGN
VX_M_FREE
      9629**DCL     11631>>IF      11632>>ASSIGN  11633<<ASSIGN  11633>>ASSIGN
VX_M_VECTOR.F
      8585**DCL      8589--REDEF
VX_M_VECTOR_DP.F
      8620**DCL      8624--REDEF
VX_NAME_DISP_A
     10267**DCL     11753>>ASSIGN
VX_O.ACCTN_A$
      9749**DCL      9750--REDEF
VX_O.DCB_MATCH_A$
      9758**DCL      9759--REDEF
VX_O.DCB_MATCH_HIT_A
      9764**DCL      9765--REDEF
VX_O.FIDN_A$
      9743**DCL      9744--REDEF
VX_O.FID_A$
      9735**DCL      9736--REDEF
VX_O.INCLUDE_A$
      9755**DCL      9756--REDEF
VX_O.MAP_A
      9729**DCL      9730--REDEF
VX_O.NODCB_A
      9786**DCL      9787--REDEF
VX_O.NUM_A
      9674**DCL      9676--REDEF
VX_O.OPT_A
      9774**DCL      9775--REDEF
VX_O.PRIV_A
      9690**DCL      9692--REDEF
VX_O.SIN_A
      9643**DCL      9644--REDEF
VX_O.TCB_A
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:126  
      9770**DCL      9771--REDEF
VX_OD.ACCTN_A$
      9947**DCL      9948--REDEF
VX_OD.DCB_MATCH_A$
      9956**DCL      9957--REDEF
VX_OD.FIDN_A$
      9941**DCL      9942--REDEF
VX_OD.FID_A$
      9933**DCL      9934--REDEF
VX_OD.INCLUDE_A$
      9953**DCL      9954--REDEF
VX_OD.MAP_A
      9927**DCL      9928--REDEF
VX_OD.NODCB_A
      9971**DCL      9972--REDEF
VX_OD.NUM_A
      9874**DCL      9875--REDEF
VX_OD.PRIV_A
      9889**DCL      9890--REDEF
VX_OD.SIN.SLIB
      9858**DCL     11808>>IF
VX_OD.SIN_A
      9843**DCL      9844--REDEF
VX_OD.VECTOR_A$
      9962**DCL      9963--REDEF
VX_OL.MAX_A
      9818**DCL      9820--REDEF
VX_OL.MIN_A
      9803**DCL      9804--REDEF
VX_ON.ACCTN_A$
     10092**DCL     10094--REDEF
VX_ON.DCB_MATCH_A$
     10103**DCL     10105--REDEF
VX_ON.FIDN_A$
     10085**DCL     10087--REDEF
VX_ON.FID_A$
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:127  
     10076**DCL     10078--REDEF
VX_ON.INCLUDE_A$
     10099**DCL     10101--REDEF
VX_ON.MAP_A
     10069**DCL     10071--REDEF
VX_ON.NODCB_A$
     10119**DCL     10120--REDEF
VX_ON.NUM_A
     10014**DCL     10016--REDEF
VX_ON.PRIV_A
     10030**DCL     10032--REDEF
VX_ON.SIN_A
      9982**DCL      9984--REDEF
VX_ON.VECTOR_A$
     10110**DCL     10111--REDEF
VX_OUHEAD.VERSION
      9429**DCL      9431--REDEF
VX_OU_HEAD
      9372**DCL      9411--REDEF
VX_OU_HEAD.REC_A
      9384**DCL      9387--REDEF
VX_O_KEY_BUF.FORM0
      8633**DCL      8636--REDEF    8643--REDEF
VX_O_KEY_BUF_L.FORM0
      8656**DCL      8659--REDEF    8666--REDEF
VX_PASS2_REF.OU.L_START
     10322**DCL     10327--REDEF
VX_PASS2_REF.OU.L_STOP
     10328**DCL     10333--REDEF
VX_PASS2_REF.OU.MAX
     10316**DCL     10321--REDEF
VX_PASS2_REF.OU.SIZE
     10334**DCL     10339--REDEF
VX_PASS2_REF.SAT.COUNT
     10361**DCL     10367--REDEF
VX_PASS2_REF.SAT.ENT_SIZE
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:128  
     10368**DCL     10374--REDEF
VX_PASS2_REF.SAT.L_START
     10347**DCL     10353--REDEF
VX_PASS2_REF.SAT.L_STOP
     10354**DCL     10360--REDEF
VX_PASS2_REF.SAT.MAX
     10341**DCL     10346--REDEF
VX_PASS2_REF.UNSAT.L_START
     10409**DCL     10414--REDEF
VX_PASS2_REF.UNSAT.L_STOP
     10415**DCL     10420--REDEF
VX_PASS2_REF.UNSAT.L_WHERE
     10421**DCL     10426--REDEF
VX_PASS2_REF.UNSAT.MAX
     10403**DCL     10408--REDEF
VX_PASS2_REF.UNSAT.PAGE#
     10433**DCL     10438--REDEF
VX_PASS2_REF.UNSAT.SIZE
     10427**DCL     10432--REDEF
VX_PHRASE.PHRASE
      9835**DCL      9837--REDEF
VX_PROGRAM_BIAS.A
      9613**DCL      9614--REDEF
VX_REC_SIZE_A
     10260**DCL     11744>>ASSIGN
VX_R_KEY_BUF.FORM0
      8682**DCL      8686--REDEF    8692--REDEF
VX_SD.A
      8310**DCL      8311--REDEF
VX_SEG_NAME
     10443**DCL     11863>>DOWHILE
VX_SPC.B$.MINE
     10504**DCL     10510--REDEF
VX_SPC.B$.NAME
     10483**DCL     10489--REDEF
VX_SPC.B$.SKIP
PL6.E3A0      #001=VXU$PREAD File=VXU$PREAD.:E05TSI                              WED 07/30/97 08:45 Page:129  
     10497**DCL     10503--REDEF
VX_SPC.B$.VALUE
     10490**DCL     10496--REDEF
VX_SPC.SEG.NAME
     10452**DCL     10458--REDEF
VX_SPC.SEG.VALUE
     10459**DCL     10465--REDEF
VX_TSX0_OVERLAY.H
     10227**DCL     10230--REDEF
WHERE$
     11394**DCL     11612<<ASSIGN  11621>>ASSIGN  11640<>CALL    11680<<ASSIGN  11680>>ASSIGN  11758>>DOWHILE
     11782>>DOWHILE

PL6.E3A0      #002=VXU$NEW_SECTNUM File=VXU$PREAD.:E05TSI                        WED 07/30/97 08:46 Page:130  
      526        1        /*T***********************************************************/
      527        2        /*T*                                                         */
      528        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      529        4        /*T*                                                         */
      530        5        /*T***********************************************************/
      531        6        VXU$NEW_SECTNUM: PROC(RU_DEF,NODE#,RU_SECT#,P_SECTNUM$);
      532        7
      533        8        %INCLUDE VX_INC_C;
      534    10724        %VX$SECTNUM;

             10737    1   /*******************************************************************************
             10738    1   *                                                                              *
             10739    1   *                          VX$SECTNUM                                              *
             10740    1   *                                                                              *
             10741    1   *******************************************************************************/

             10746    1   DCL 1 VX$SECTNUM ALIGNED BASED,
             10747    1         2 NEXT$ PTR,
             10748    1         2 SECT#    UBIN HALF HALIGNED,
             10749    1         2 NPOINTER UBIN HALF HALIGNED,
             10750    1         2 NODE#    UBIN HALF HALIGNED,
             10751    1         2 RU_SECT# UBIN HALF HALIGNED;
      535    10754        %B$RU_DEF(NAME=RU_DEF,STCLASS=);
      536    10811    1   DCL NODE#        SBIN;
      537    10812    1   DCL RU_SECT#     SBIN;
      538    10813    1   DCL P_SECTNUM$   PTR;
      539    10814    1   DCL SC_IDX       SBIN STATIC;
      540    10815    1   DCL SECTNUM$     PTR  STATIC;
      541    10816        %ENTRIES;
      542    10831
      543    10832
      544    10833    1         RU_DEF.AD.LOOKUP_SECTNUM='1'B;
      545    10834              %ALLOCATE(PTR$=SECTNUM$,TYPE=@GDP,SIZE="SIZEW(VX$SECTNUM)");
      546    10841    1         IF ADDR(P_SECTNUM$)~=ADDR(NIL) THEN P_SECTNUM$=SECTNUM$;
      547    10842    1         SC_IDX=MOD(RU_DEF.AD.SECTNUM+RU_DEF.NPOINTER+NODE#,1024);
      548    10843    1         SECTNUM$->VX$SECTNUM.NEXT$ =VX_SECTNUM$(SC_IDX);
      549    10844    1         SECTNUM$->VX$SECTNUM.NPOINTER=RU_DEF.NPOINTER;
PL6.E3A0      #002=VXU$NEW_SECTNUM File=VXU$PREAD.:E05TSI                        WED 07/30/97 08:46 Page:131  
      550    10845    1         SECTNUM$->VX$SECTNUM.SECT# =RU_DEF.AD.SECTNUM;
      551    10846    1         SECTNUM$->VX$SECTNUM.NODE# =NODE#;
      552    10847    1         SECTNUM$->VX$SECTNUM.RU_SECT#=RU_SECT#;
      553    10848    1         VX_SECTNUM$(SC_IDX)=SECTNUM$;
      554    10849    1         RETURN;
      555    10850
      556    10851    1   VXU$FIND_SECTNUM: ENTRY(RU_DEF,NODE#,RU_SECT#,P_SECTNUM$);
      557    10852
      558    10853
      559    10854    1         SC_IDX=MOD(RU_DEF.AD.SECTNUM+RU_DEF.NPOINTER+NODE#,1024);
      560    10855    1         SECTNUM$=VX_SECTNUM$(SC_IDX);
      561    10856    2         DO WHILE('1'B);
      562    10857    2             IF SECTNUM$=ADDR(NIL)
      563    10858    3             THEN DO;
      564    10859        /*E* ERROR: VXU-E$CANT_FIND_SECTION_VX-C
      565    10860             MESSAGE: Internal link error: Unable to find section in VXU$FIND_SECTNUM
      566    10861        */
      567    10862                      %SCREAM( ERR#=E$CANT_FIND_SECTION_VX,LEVEL=@E$F_VX,MID="'U'" );
      568    10865    3                END;
      569    10866    2             IF SECTNUM$->VX$SECTNUM.NPOINTER =RU_DEF.NPOINTER
      570    10867    2                     AND SECTNUM$->VX$SECTNUM.SECT#=RU_DEF.AD.SECTNUM
      571    10868    2                     AND SECTNUM$->VX$SECTNUM.NODE#=NODE#
      572    10869    3             THEN DO;
      573    10870    3                 RU_SECT#=SECTNUM$->VX$SECTNUM.RU_SECT#;
      574    10871    3                 IF ADDR(P_SECTNUM$)~=ADDR(NIL) THEN P_SECTNUM$=SECTNUM$;
      575    10872    3                 RETURN;
      576    10873    3                END;
      577    10874    2             SECTNUM$=SECTNUM$->VX$SECTNUM.NEXT$;
      578    10875    2            END;
      579    10876
      580    10877    1   END VXU$NEW_SECTNUM;

PL6.E3A0      #002=VXU$NEW_SECTNUM File=VXU$PREAD.:E05TSI                        WED 07/30/97 08:46 Page:132  
--  Include file information  --

   F_DCB_D.:E05TOU  is referenced.
   VX_DCB_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_FIXED_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VX_MACRO_C.:E05TOU  is referenced.
   VX_PERR_C.:E05TOU  is referenced.
   VX_SUBS_C.:E05TOU  is referenced.
   VX_SWITCH_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   VX_INC_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VXU$NEW_SECTNUM.

   Procedure VXU$NEW_SECTNUM requires 117 words for executable code.
   Procedure VXU$NEW_SECTNUM requires 10 words of local(AUTO) storage.

    No errors detected in file VXU$PREAD.:E05TSI    .

PL6.E3A0      #002=VXU$NEW_SECTNUM File=VXU$PREAD.:E05TSI                        WED 07/30/97 08:46 Page:133  

 Object Unit name= VXU$NEW_SECTNUM                            File name= VXU$PREAD.:E05TOU
 UTS= JUL 30 '97 08:46:32.08 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  LblCom even  none    96    140  VX_CONST_DCB
    2   Data  even  none     2      2  VXU$NEW_SECTNUM
    3   Proc  even  none   117    165  VXU$NEW_SECTNUM
    4  RoData even  none     9     11  VXU$NEW_SECTNUM

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     3      0   yes            yes      Std        4  VXU$NEW_SECTNUM
     3     72                  yes      Std        4  VXU$FIND_SECTNUM

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       3 VXA$GET
         yes           Std       4 VXE$ERROR
                       nStd      0 X66_AUTO_4
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #002=VXU$NEW_SECTNUM File=VXU$PREAD.:E05TSI                        WED 07/30/97 08:46 Page:134  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  VX_OU_HEAD                            VX_ERRORS
     VX_M_FREE                             VX_M_ALL                              VX_M_BASE_PTR
     VX_SECTNUM$                           B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #002=VXU$NEW_SECTNUM File=VXU$PREAD.:E05TSI                        WED 07/30/97 08:46 Page:135  


      526        1        /*T***********************************************************/
      527        2        /*T*                                                         */
      528        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      529        4        /*T*                                                         */
      530        5        /*T***********************************************************/
      531        6        VXU$NEW_SECTNUM: PROC(RU_DEF,NODE#,RU_SECT#,P_SECTNUM$);

      6  3 000000   000000 700200 xent  VXU$NEW_SEC* TSX0  ! X66_AUTO_4
         3 000001   000012 000004                    ZERO    10,4

      532        7
      533        8        %INCLUDE VX_INC_C;
      534    10724        %VX$SECTNUM;

             10737    1   /*******************************************************************************
             10738    1   *                                                                              *
             10739    1   *                          VX$SECTNUM                                             *
             10740    1   *                                                                              *
             10741    1   *******************************************************************************/

             10746    1   DCL 1 VX$SECTNUM ALIGNED BASED,
             10747    1         2 NEXT$ PTR,
             10748    1         2 SECT#    UBIN HALF HALIGNED,
             10749    1         2 NPOINTER UBIN HALF HALIGNED,
             10750    1         2 NODE#    UBIN HALF HALIGNED,
             10751    1         2 RU_SECT# UBIN HALF HALIGNED;
      535    10754        %B$RU_DEF(NAME=RU_DEF,STCLASS=);
      536    10811    1   DCL NODE#        SBIN;
      537    10812    1   DCL RU_SECT#     SBIN;
      538    10813    1   DCL P_SECTNUM$   PTR;
      539    10814    1   DCL SC_IDX       SBIN STATIC;
      540    10815    1   DCL SECTNUM$     PTR  STATIC;
      541    10816        %ENTRIES;
      542    10831
      543    10832
      544    10833    1         RU_DEF.AD.LOOKUP_SECTNUM='1'B;
PL6.E3A0      #002=VXU$NEW_SECTNUM File=VXU$PREAD.:E05TSI                        WED 07/30/97 08:46 Page:136  

  10833  3 000002   200003 470500                    LDP0    @RU_DEF,,AUTO
         3 000003   004000 236003                    LDQ     2048,DU
         3 000004   000000 256100                    ORSQ    0,,PR0

      545    10834              %ALLOCATE(PTR$=SECTNUM$,TYPE=@GDP,SIZE="SIZEW(VX$SECTNUM)");

  10835  3 000005   000010 236000 xsym               LDQ     VX_M_ALL+8
         3 000006   000010 136000 xsym               SBLQ    VX_M_FREE+8
         3 000007   000003 116007                    CMPQ    3,DL
         3 000010   000020 604000 3                  TMI     s:10839

  10836  3 000011   000010 236000 xsym               LDQ     VX_M_FREE+8
         3 000012   000022 736000                    QLS     18
         3 000013   000010 036000 xsym               ADLQ    VX_M_BASE_PTR+8
         3 000014   000001 756000 2                  STQ     SECTNUM$

  10837  3 000015   000003 236007                    LDQ     3,DL
         3 000016   000010 056000 xsym               ASQ     VX_M_FREE+8

  10838  3 000017   000024 710000 3                  TRA     s:10841

  10839  3 000020   000000 630400 4                  EPPR0   0
         3 000021   000021 631400 xsym               EPPR1   B_VECTNIL+17
         3 000022   000000 701000 xent               TSX1    VXA$GET
         3 000023   000000 011000                    NOP     0

      546    10841    1         IF ADDR(P_SECTNUM$)~=ADDR(NIL) THEN P_SECTNUM$=SECTNUM$;

  10841  3 000024   200006 236100                    LDQ     @P_SECTNUM$,,AUTO
         3 000025   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000026   000032 600000 3                  TZE     s:10842

  10841  3 000027   000001 236000 2                  LDQ     SECTNUM$
         3 000030   200006 470500                    LDP0    @P_SECTNUM$,,AUTO
         3 000031   000000 756100                    STQ     0,,PR0

PL6.E3A0      #002=VXU$NEW_SECTNUM File=VXU$PREAD.:E05TSI                        WED 07/30/97 08:46 Page:137  
      547    10842    1         SC_IDX=MOD(RU_DEF.AD.SECTNUM+RU_DEF.NPOINTER+NODE#,1024);

  10842  3 000032   200003 470500                    LDP0    @RU_DEF,,AUTO
         3 000033   000001 236100                    LDQ     1,,PR0
         3 000034   000022 732000                    QRS     18
         3 000035   200010 756100                    STQ     @P_SECTNUM$+2,,AUTO
         3 000036   000000 236100                    LDQ     0,,PR0
         3 000037   000022 772000                    QRL     18
         3 000040   003777 376007                    ANQ     2047,DL
         3 000041   200010 036100                    ADLQ    @P_SECTNUM$+2,,AUTO
         3 000042   200004 471500                    LDP1    @NODE#,,AUTO
         3 000043   100000 036100                    ADLQ    0,,PR1
         3 000044   002000 506007                    DIV     1024,DL
         3 000045   000000 755000 2                  STA     SC_IDX

      548    10843    1         SECTNUM$->VX$SECTNUM.NEXT$ =VX_SECTNUM$(SC_IDX);

  10843  3 000046   000000 236005 xsym               LDQ     VX_SECTNUM$,AL
         3 000047   000001 473400 2                  LDP3    SECTNUM$
         3 000050   300000 756100                    STQ     0,,PR3

      549    10844    1         SECTNUM$->VX$SECTNUM.NPOINTER=RU_DEF.NPOINTER;

  10844  3 000051   000001 220100                    LDX0    1,,PR0
         3 000052   000001 473400 2                  LDP3    SECTNUM$
         3 000053   300001 440100                    SXL0    1,,PR3

      550    10845    1         SECTNUM$->VX$SECTNUM.SECT# =RU_DEF.AD.SECTNUM;

  10845  3 000054   000000 220100                    LDX0    0,,PR0
         3 000055   003777 360003                    ANX0    2047,DU
         3 000056   000001 473400 2                  LDP3    SECTNUM$
         3 000057   300001 740100                    STX0    1,,PR3

      551    10846    1         SECTNUM$->VX$SECTNUM.NODE# =NODE#;

  10846  3 000060   100000 720100                    LXL0    0,,PR1
PL6.E3A0      #002=VXU$NEW_SECTNUM File=VXU$PREAD.:E05TSI                        WED 07/30/97 08:46 Page:138  
         3 000061   000001 473400 2                  LDP3    SECTNUM$
         3 000062   300002 740100                    STX0    2,,PR3

      552    10847    1         SECTNUM$->VX$SECTNUM.RU_SECT#=RU_SECT#;

  10847  3 000063   200005 474500                    LDP4    @RU_SECT#,,AUTO
         3 000064   400000 721100                    LXL1    0,,PR4
         3 000065   300002 441100                    SXL1    2,,PR3

      553    10848    1         VX_SECTNUM$(SC_IDX)=SECTNUM$;

  10848  3 000066   000001 236000 2                  LDQ     SECTNUM$
         3 000067   000000 722000 2                  LXL2    SC_IDX
         3 000070   000000 756012 xsym               STQ     VX_SECTNUM$,X2

      554    10849    1         RETURN;

  10849  3 000071   000000 702200 xent               TSX2  ! X66_ARET

      555    10850
      556    10851    1   VXU$FIND_SECTNUM: ENTRY(RU_DEF,NODE#,RU_SECT#,P_SECTNUM$);

  10851  3 000072   000000 700200 xent  VXU$FIND_SE* TSX0  ! X66_AUTO_4
         3 000073   000012 000004                    ZERO    10,4

      557    10852
      558    10853
      559    10854    1         SC_IDX=MOD(RU_DEF.AD.SECTNUM+RU_DEF.NPOINTER+NODE#,1024);

  10854  3 000074   200003 470500                    LDP0    @RU_DEF,,AUTO
         3 000075   000001 236100                    LDQ     1,,PR0
         3 000076   000022 732000                    QRS     18
         3 000077   200010 756100                    STQ     @P_SECTNUM$+2,,AUTO
         3 000100   000000 236100                    LDQ     0,,PR0
         3 000101   000022 772000                    QRL     18
         3 000102   003777 376007                    ANQ     2047,DL
         3 000103   200010 036100                    ADLQ    @P_SECTNUM$+2,,AUTO
PL6.E3A0      #002=VXU$NEW_SECTNUM File=VXU$PREAD.:E05TSI                        WED 07/30/97 08:46 Page:139  
         3 000104   200004 471500                    LDP1    @NODE#,,AUTO
         3 000105   100000 036100                    ADLQ    0,,PR1
         3 000106   002000 506007                    DIV     1024,DL
         3 000107   000000 755000 2                  STA     SC_IDX

      560    10855    1         SECTNUM$=VX_SECTNUM$(SC_IDX);

  10855  3 000110   000000 236005 xsym               LDQ     VX_SECTNUM$,AL
         3 000111   000001 756000 2                  STQ     SECTNUM$

      561    10856    2         DO WHILE('1'B);

      562    10857    2             IF SECTNUM$=ADDR(NIL)

  10857  3 000112   000001 236000 2                  LDQ     SECTNUM$
         3 000113   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000114   000121 601000 3                  TNZ     s:10866

      563    10858    3             THEN DO;

      564    10859        /*E* ERROR: VXU-E$CANT_FIND_SECTION_VX-C
      565    10860             MESSAGE: Internal link error: Unable to find section in VXU$FIND_SECTNUM
      566    10861        */
      567    10862                      %SCREAM( ERR#=E$CANT_FIND_SECTION_VX,LEVEL=@E$F_VX,MID="'U'" );

  10863  3 000115   000005 630400 4                  EPPR0   5
         3 000116   000022 631400 xsym               EPPR1   B_VECTNIL+18
         3 000117   000000 701000 xent               TSX1    VXE$ERROR
         3 000120   000000 011000                    NOP     0

      568    10865    3                END;

      569    10866    2             IF SECTNUM$->VX$SECTNUM.NPOINTER =RU_DEF.NPOINTER

  10866  3 000121   200003 470500                    LDP0    @RU_DEF,,AUTO
         3 000122   000001 236100                    LDQ     1,,PR0
         3 000123   000022 732000                    QRS     18
PL6.E3A0      #002=VXU$NEW_SECTNUM File=VXU$PREAD.:E05TSI                        WED 07/30/97 08:46 Page:140  
         3 000124   200010 756100                    STQ     @P_SECTNUM$+2,,AUTO
         3 000125   000001 471400 2                  LDP1    SECTNUM$
         3 000126   100001 236100                    LDQ     1,,PR1
         3 000127   777777 376007                    ANQ     -1,DL
         3 000130   200010 116100                    CMPQ    @P_SECTNUM$+2,,AUTO
         3 000131   000162 601000 3                  TNZ     s:10874
         3 000132   000000 236100                    LDQ     0,,PR0
         3 000133   000022 772000                    QRL     18
         3 000134   003777 376007                    ANQ     2047,DL
         3 000135   200011 756100                    STQ     @P_SECTNUM$+3,,AUTO
         3 000136   100001 236100                    LDQ     1,,PR1
         3 000137   000022 772000                    QRL     18
         3 000140   200011 116100                    CMPQ    @P_SECTNUM$+3,,AUTO
         3 000141   000162 601000 3                  TNZ     s:10874
         3 000142   200004 473500                    LDP3    @NODE#,,AUTO
         3 000143   100002 236100                    LDQ     2,,PR1
         3 000144   000022 772000                    QRL     18
         3 000145   300000 116100                    CMPQ    0,,PR3
         3 000146   000162 601000 3                  TNZ     s:10874

      570    10867    2                     AND SECTNUM$->VX$SECTNUM.SECT#=RU_DEF.AD.SECTNUM
      571    10868    2                     AND SECTNUM$->VX$SECTNUM.NODE#=NODE#
      572    10869    3             THEN DO;

      573    10870    3                 RU_SECT#=SECTNUM$->VX$SECTNUM.RU_SECT#;

  10870  3 000147   100002 236100                    LDQ     2,,PR1
         3 000150   777777 376007                    ANQ     -1,DL
         3 000151   200005 474500                    LDP4    @RU_SECT#,,AUTO
         3 000152   400000 756100                    STQ     0,,PR4

      574    10871    3                 IF ADDR(P_SECTNUM$)~=ADDR(NIL) THEN P_SECTNUM$=SECTNUM$;

  10871  3 000153   200006 236100                    LDQ     @P_SECTNUM$,,AUTO
         3 000154   000001 116000 xsym               CMPQ    B_VECTNIL+1
         3 000155   000161 600000 3                  TZE     s:10872

PL6.E3A0      #002=VXU$NEW_SECTNUM File=VXU$PREAD.:E05TSI                        WED 07/30/97 08:46 Page:141  
  10871  3 000156   000001 236000 2                  LDQ     SECTNUM$
         3 000157   200006 471500                    LDP1    @P_SECTNUM$,,AUTO
         3 000160   100000 756100                    STQ     0,,PR1

      575    10872    3                 RETURN;

  10872  3 000161   000000 702200 xent               TSX2  ! X66_ARET

      576    10873    3                END;
      577    10874    2             SECTNUM$=SECTNUM$->VX$SECTNUM.NEXT$;

  10874  3 000162   100000 236100                    LDQ     0,,PR1
         3 000163   000001 756000 2                  STQ     SECTNUM$

      578    10875    2            END;

  10875  3 000164   000112 710000 3                  TRA     s:10857
      579    10876
      580    10877    1   END VXU$NEW_SECTNUM;

PL6.E3A0      #002=VXU$NEW_SECTNUM File=VXU$PREAD.:E05TSI                        WED 07/30/97 08:46 Page:142  
--  Include file information  --

   F_DCB_D.:E05TOU  is referenced.
   VX_DCB_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_FIXED_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VX_MACRO_C.:E05TOU  is referenced.
   VX_PERR_C.:E05TOU  is referenced.
   VX_SUBS_C.:E05TOU  is referenced.
   VX_SWITCH_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   VX_INC_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VXU$NEW_SECTNUM.
PL6.E3A0      #002=VXU$NEW_SECTNUM File=VXU$PREAD.:E05TSI                        WED 07/30/97 08:46 Page:143  

 **** Variables and constants ****

  ****  Section 002  Data  VXU$NEW_SECTNUM

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN        r     1 SC_IDX                     1-0-0/w PTR         r     1 SECTNUM$

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @NODE#                     6-0-0/w PTR         r     1 @P_SECTNUM$
     3-0-0/w PTR         r     1 @RU_DEF                    5-0-0/w PTR         r     1 @RU_SECT#
    *0-0-0/w SBIN        r     1 NODE#                     *0-0-0/w PTR         r     1 P_SECTNUM$
    *0-0-0/w STRC(72)    r     1 RU_DEF                    *0-0-0/w SBIN        r     1 RU_SECT#

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN        r     1 VX_M_ALL(0:8)
     0-0-0/w PTR         r     1 VX_M_BASE_PTR(0:8)
     0-0-0/w SBIN        r     1 VX_M_FREE(0:8)
     0-0-0/w PTR         r     1 VX_SECTNUM$(0:1023)

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(108)   r     1 VX$SECTNUM

PL6.E3A0      #002=VXU$NEW_SECTNUM File=VXU$PREAD.:E05TSI                        WED 07/30/97 08:46 Page:144  

   Procedure VXU$NEW_SECTNUM requires 117 words for executable code.
   Procedure VXU$NEW_SECTNUM requires 10 words of local(AUTO) storage.

    No errors detected in file VXU$PREAD.:E05TSI    .
PL6.E3A0      #002=VXU$NEW_SECTNUM File=VXU$PREAD.:E05TSI                        WED 07/30/97 08:46 Page:145  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=VXU$NEW_SECTNUM File=VXU$PREAD.:E05TSI                        WED 07/30/97 08:46 Page:146  
          MINI XREF LISTING

NODE#
     10811**DCL         6--PROC    10842>>ASSIGN  10846>>ASSIGN  10851--ENTRY   10854>>ASSIGN  10866>>IF
P_SECTNUM$
     10813**DCL         6--PROC    10841--IF      10841<<ASSIGN  10851--ENTRY   10871--IF      10871<<ASSIGN
RU_DEF
     10755**DCL         6--PROC    10851--ENTRY
RU_DEF.AD.ISADDR
     10778**DCL     10780--REDEF
RU_DEF.AD.LOOKUP_SECTNUM
     10772**DCL     10833<<ASSIGN
RU_DEF.AD.SECTNUM
     10775**DCL     10842>>ASSIGN  10845>>ASSIGN  10854>>ASSIGN  10866>>IF
RU_DEF.LFLAGS
     10791**DCL     10804--REDEF
RU_DEF.NPOINTER
     10782**DCL     10842>>ASSIGN  10844>>ASSIGN  10854>>ASSIGN  10866>>IF
RU_DEF.VALUE
     10756**DCL     10758--REDEF
RU_SECT#
     10812**DCL         6--PROC    10847>>ASSIGN  10851--ENTRY   10870<<ASSIGN
SC_IDX
     10814**DCL     10842<<ASSIGN  10843>>ASSIGN  10848>>ASSIGN  10854<<ASSIGN  10855>>ASSIGN
SECTNUM$
     10815**DCL     10836<<ASSIGN  10839<>CALL    10841>>ASSIGN  10843>>ASSIGN  10844>>ASSIGN  10845>>ASSIGN
     10846>>ASSIGN  10847>>ASSIGN  10848>>ASSIGN  10855<<ASSIGN  10857>>IF      10866>>IF      10866>>IF
     10866>>IF      10870>>ASSIGN  10871>>ASSIGN  10874<<ASSIGN  10874>>ASSIGN
VX$SECTNUM
     10746**DCL     10835--IF      10837--ASSIGN  10839--CALL
VX$SECTNUM.NEXT$
     10747**DCL     10843<<ASSIGN  10874>>ASSIGN
VX$SECTNUM.NODE#
     10750**DCL     10846<<ASSIGN  10866>>IF
PL6.E3A0      #002=VXU$NEW_SECTNUM File=VXU$PREAD.:E05TSI                        WED 07/30/97 08:46 Page:147  
VX$SECTNUM.NPOINTER
     10749**DCL     10844<<ASSIGN  10866>>IF
VX$SECTNUM.RU_SECT#
     10751**DCL     10847<<ASSIGN  10870>>ASSIGN
VX$SECTNUM.SECT#
     10748**DCL     10845<<ASSIGN  10866>>IF
VXA$GET
     10826**DCL-ENT 10839--CALL
VXE$ERROR
     10817**DCL-ENT 10863--CALL
VX_BIAS.A
      9574**DCL      9575--REDEF
VX_CBUF.CHARS_A
      9508**DCL      9509--REDEF
VX_CONST_DCB.ACTPOS
     10690**DCL     10690--REDEF
VX_CONST_DCB.ARS#
     10649**DCL     10649--REDEF
VX_CONST_DCB.ATTR#
     10679**DCL     10679--REDEF   10681--REDEF
VX_CONST_DCB.BORROW
     10701**DCL     10701--REDEF   10701--REDEF   10701--REDEF
VX_CONST_DCB.EOMCHAR#
     10656**DCL     10657--REDEF
VX_CONST_DCB.FLDID
     10693**DCL     10694--REDEF
VX_CONST_DCB.FORM$
     10685**DCL     10685--REDEF
VX_CONST_DCB.FSECT
     10708**DCL     10708--REDEF
VX_CONST_DCB.FSN#
     10675**DCL     10675--REDEF   10675--REDEF   10676--REDEF
VX_CONST_DCB.HEADER$
     10684**DCL     10685--REDEF
VX_CONST_DCB.IXTNSIZE#
     10681**DCL     10682--REDEF
PL6.E3A0      #002=VXU$NEW_SECTNUM File=VXU$PREAD.:E05TSI                        WED 07/30/97 08:46 Page:148  
VX_CONST_DCB.LASTSTA$
     10665**DCL     10665--REDEF
VX_CONST_DCB.LVL
     10702**DCL     10702--REDEF
VX_CONST_DCB.NAME#.C
     10665**DCL     10666--REDEF
VX_CONST_DCB.NOEOF
     10697**DCL     10697--REDEF
VX_CONST_DCB.NRECS#
     10682**DCL     10682--REDEF
VX_CONST_DCB.NRECX
     10709**DCL     10709--REDEF
VX_CONST_DCB.OHDR
     10698**DCL     10698--REDEF
VX_CONST_DCB.ORG#
     10673**DCL     10674--REDEF
VX_CONST_DCB.PRECNO
     10706**DCL     10706--REDEF
VX_CONST_DCB.RCSZ
     10714**DCL     10714--REDEF
VX_CONST_DCB.RES#
     10667**DCL     10667--REDEF
VX_CONST_DCB.SETX
     10686**DCL     10686--REDEF
VX_CONST_DCB.TAB$
     10685**DCL     10685--REDEF
VX_CONST_DCB.TDA
     10705**DCL     10706--REDEF
VX_CONST_DCB.WSN#
     10667**DCL     10668--REDEF
VX_EBUF.CHARS_A
     10097**DCL     10098--REDEF
VX_EFIELD1.CHARS
     10106**DCL     10107--REDEF
VX_EFIELD2.CHARS
     10110**DCL     10111--REDEF
PL6.E3A0      #002=VXU$NEW_SECTNUM File=VXU$PREAD.:E05TSI                        WED 07/30/97 08:46 Page:149  
VX_EFIELD3.CHARS
     10114**DCL     10115--REDEF
VX_EI_KEY_BUF.KEY
     10490**DCL     10491--REDEF
VX_ERRORS
      9551**DCL      9562--REDEF
VX_ERRORS.CONFLICT_A
      9557**DCL      9558--REDEF
VX_ERRORS.UNSAT_A
      9553**DCL      9554--REDEF
VX_IMAGE_DATA.CPAGE#_A
      8688**DCL      8689--REDEF
VX_IMAGE_DATA.NODE_A$
      8700**DCL      8701--REDEF
VX_IMAGE_DATA.START_A$
      8692**DCL      8693--REDEF
VX_IMAGE_DATA.STOP_A$
      8696**DCL      8697--REDEF
VX_IMAGE_DS3.CPAGE#_A
      8757**DCL      8758--REDEF
VX_IMAGE_DS3.NODE_A$
      8769**DCL      8770--REDEF
VX_IMAGE_DS3.START_A$
      8761**DCL      8762--REDEF
VX_IMAGE_DS3.STOP_A$
      8765**DCL      8766--REDEF
VX_IMAGE_DS4.CPAGE#_A
      8780**DCL      8781--REDEF
VX_IMAGE_DS4.NODE_A$
      8792**DCL      8793--REDEF
VX_IMAGE_DS4.START_A$
      8784**DCL      8785--REDEF
VX_IMAGE_DS4.STOP_A$
      8788**DCL      8789--REDEF
VX_IMAGE_DS5.CPAGE#_A
      8803**DCL      8804--REDEF
PL6.E3A0      #002=VXU$NEW_SECTNUM File=VXU$PREAD.:E05TSI                        WED 07/30/97 08:46 Page:150  
VX_IMAGE_DS5.NODE_A$
      8815**DCL      8816--REDEF
VX_IMAGE_DS5.START_A$
      8807**DCL      8808--REDEF
VX_IMAGE_DS5.STOP_A$
      8811**DCL      8812--REDEF
VX_IMAGE_DS6.CPAGE#_A
      8826**DCL      8827--REDEF
VX_IMAGE_DS6.NODE_A$
      8838**DCL      8839--REDEF
VX_IMAGE_DS6.START_A$
      8830**DCL      8831--REDEF
VX_IMAGE_DS6.STOP_A$
      8834**DCL      8835--REDEF
VX_IMAGE_DS7.CPAGE#_A
      8849**DCL      8850--REDEF
VX_IMAGE_DS7.NODE_A$
      8861**DCL      8862--REDEF
VX_IMAGE_DS7.START_A$
      8853**DCL      8854--REDEF
VX_IMAGE_DS7.STOP_A$
      8857**DCL      8858--REDEF
VX_IMAGE_DS8.CPAGE#_A
      8872**DCL      8873--REDEF
VX_IMAGE_DS8.NODE_A$
      8884**DCL      8885--REDEF
VX_IMAGE_DS8.START_A$
      8876**DCL      8877--REDEF
VX_IMAGE_DS8.STOP_A$
      8880**DCL      8881--REDEF
VX_IMAGE_PROC.CPAGE#_A
      8711**DCL      8712--REDEF
VX_IMAGE_PROC.NODE_A$
      8723**DCL      8724--REDEF
VX_IMAGE_PROC.START_A$
      8715**DCL      8716--REDEF
PL6.E3A0      #002=VXU$NEW_SECTNUM File=VXU$PREAD.:E05TSI                        WED 07/30/97 08:46 Page:151  
VX_IMAGE_PROC.STOP_A$
      8719**DCL      8720--REDEF
VX_IMAGE_ROS.CPAGE#_A
      8734**DCL      8735--REDEF
VX_IMAGE_ROS.NODE_A$
      8746**DCL      8747--REDEF
VX_IMAGE_ROS.START_A$
      8738**DCL      8739--REDEF
VX_IMAGE_ROS.STOP_A$
      8742**DCL      8743--REDEF
VX_M_ALL
      9585**DCL     10835>>IF
VX_M_BASE_PTR
      9587**DCL     10836>>ASSIGN
VX_M_FREE
      9583**DCL     10835>>IF      10836>>ASSIGN  10837<<ASSIGN  10837>>ASSIGN
VX_M_VECTOR.F
      8539**DCL      8543--REDEF
VX_M_VECTOR_DP.F
      8574**DCL      8578--REDEF
VX_O.ACCTN_A$
      9703**DCL      9704--REDEF
VX_O.DCB_MATCH_A$
      9712**DCL      9713--REDEF
VX_O.DCB_MATCH_HIT_A
      9718**DCL      9719--REDEF
VX_O.FIDN_A$
      9697**DCL      9698--REDEF
VX_O.FID_A$
      9689**DCL      9690--REDEF
VX_O.INCLUDE_A$
      9709**DCL      9710--REDEF
VX_O.MAP_A
      9683**DCL      9684--REDEF
VX_O.NODCB_A
      9740**DCL      9741--REDEF
PL6.E3A0      #002=VXU$NEW_SECTNUM File=VXU$PREAD.:E05TSI                        WED 07/30/97 08:46 Page:152  
VX_O.NUM_A
      9628**DCL      9630--REDEF
VX_O.OPT_A
      9728**DCL      9729--REDEF
VX_O.PRIV_A
      9644**DCL      9646--REDEF
VX_O.SIN_A
      9597**DCL      9598--REDEF
VX_O.TCB_A
      9724**DCL      9725--REDEF
VX_OD.ACCTN_A$
      9901**DCL      9902--REDEF
VX_OD.DCB_MATCH_A$
      9910**DCL      9911--REDEF
VX_OD.FIDN_A$
      9895**DCL      9896--REDEF
VX_OD.FID_A$
      9887**DCL      9888--REDEF
VX_OD.INCLUDE_A$
      9907**DCL      9908--REDEF
VX_OD.MAP_A
      9881**DCL      9882--REDEF
VX_OD.NODCB_A
      9925**DCL      9926--REDEF
VX_OD.NUM_A
      9828**DCL      9829--REDEF
VX_OD.PRIV_A
      9843**DCL      9844--REDEF
VX_OD.SIN_A
      9797**DCL      9798--REDEF
VX_OD.VECTOR_A$
      9916**DCL      9917--REDEF
VX_OL.MAX_A
      9772**DCL      9774--REDEF
VX_OL.MIN_A
      9757**DCL      9758--REDEF
PL6.E3A0      #002=VXU$NEW_SECTNUM File=VXU$PREAD.:E05TSI                        WED 07/30/97 08:46 Page:153  
VX_ON.ACCTN_A$
     10046**DCL     10048--REDEF
VX_ON.DCB_MATCH_A$
     10057**DCL     10059--REDEF
VX_ON.FIDN_A$
     10039**DCL     10041--REDEF
VX_ON.FID_A$
     10030**DCL     10032--REDEF
VX_ON.INCLUDE_A$
     10053**DCL     10055--REDEF
VX_ON.MAP_A
     10023**DCL     10025--REDEF
VX_ON.NODCB_A$
     10073**DCL     10074--REDEF
VX_ON.NUM_A
      9968**DCL      9970--REDEF
VX_ON.PRIV_A
      9984**DCL      9986--REDEF
VX_ON.SIN_A
      9936**DCL      9938--REDEF
VX_ON.VECTOR_A$
     10064**DCL     10065--REDEF
VX_OUHEAD.VERSION
      9383**DCL      9385--REDEF
VX_OU_HEAD
      9326**DCL      9365--REDEF
VX_OU_HEAD.REC_A
      9338**DCL      9341--REDEF
VX_O_KEY_BUF.FORM0
      8587**DCL      8590--REDEF    8597--REDEF
VX_O_KEY_BUF_L.FORM0
      8610**DCL      8613--REDEF    8620--REDEF
VX_PASS2_REF.OU.L_START
     10276**DCL     10281--REDEF
VX_PASS2_REF.OU.L_STOP
     10282**DCL     10287--REDEF
PL6.E3A0      #002=VXU$NEW_SECTNUM File=VXU$PREAD.:E05TSI                        WED 07/30/97 08:46 Page:154  
VX_PASS2_REF.OU.MAX
     10270**DCL     10275--REDEF
VX_PASS2_REF.OU.SIZE
     10288**DCL     10293--REDEF
VX_PASS2_REF.SAT.COUNT
     10315**DCL     10321--REDEF
VX_PASS2_REF.SAT.ENT_SIZE
     10322**DCL     10328--REDEF
VX_PASS2_REF.SAT.L_START
     10301**DCL     10307--REDEF
VX_PASS2_REF.SAT.L_STOP
     10308**DCL     10314--REDEF
VX_PASS2_REF.SAT.MAX
     10295**DCL     10300--REDEF
VX_PASS2_REF.UNSAT.L_START
     10363**DCL     10368--REDEF
VX_PASS2_REF.UNSAT.L_STOP
     10369**DCL     10374--REDEF
VX_PASS2_REF.UNSAT.L_WHERE
     10375**DCL     10380--REDEF
VX_PASS2_REF.UNSAT.MAX
     10357**DCL     10362--REDEF
VX_PASS2_REF.UNSAT.PAGE#
     10387**DCL     10392--REDEF
VX_PASS2_REF.UNSAT.SIZE
     10381**DCL     10386--REDEF
VX_PHRASE.PHRASE
      9789**DCL      9791--REDEF
VX_PROGRAM_BIAS.A
      9567**DCL      9568--REDEF
VX_R_KEY_BUF.FORM0
      8636**DCL      8640--REDEF    8646--REDEF
VX_SD.A
      8264**DCL      8265--REDEF
VX_SECTNUM$
     10228**DCL     10843>>ASSIGN  10848<<ASSIGN  10855>>ASSIGN
PL6.E3A0      #002=VXU$NEW_SECTNUM File=VXU$PREAD.:E05TSI                        WED 07/30/97 08:46 Page:155  
VX_SPC.B$.MINE
     10458**DCL     10464--REDEF
VX_SPC.B$.NAME
     10437**DCL     10443--REDEF
VX_SPC.B$.SKIP
     10451**DCL     10457--REDEF
VX_SPC.B$.VALUE
     10444**DCL     10450--REDEF
VX_SPC.SEG.NAME
     10406**DCL     10412--REDEF
VX_SPC.SEG.VALUE
     10413**DCL     10419--REDEF
VX_TSX0_OVERLAY.H
     10181**DCL     10184--REDEF
