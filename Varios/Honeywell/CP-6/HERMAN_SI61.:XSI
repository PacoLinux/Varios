/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/*   'HERMAN' - This is a munger designed to create a M$HELP file    */
/*   from an EDIT-compatible file.                                   */
 
HERMAN:   PROC MAIN;
 
%INCLUDE CP_6;
%INCLUDE B_ERRORS_C;
%INCLUDE XU_MACRO_C;                    /* X$PARSE MACROs                     */
%INCLUDE CP_6_SUBS;
%INCLUDE B$JIT_C;
 
%B$TCB;
%B$ALT;
%B$EXCFR;
%F$DCB;
%B$JIT0;
%U$JIT1;
%M$JIT2;
%F$JIT3;
%S$JIT4;
%J$JIT5;
   2 * BIT(1);
 
%EJECT;
/* ALLOCATION */
 
/*     DCB declaration */
 
%M$DCB (DCBN=M$SI, RES='SI');
%M$DCB (DCBN=M$UI, RES='NO');
DCL M$ME DCB;
DCL M$OU DCB;
DCL M$LO DCB;
DCL M$DO DCB;
 
/*     FPT creation */
 
/*         M$SI, HERMAN input text and directives */
 
%XUU$ENTRY;
%XUU_PARAM (OPT_UI=YES,BASE=YES,UPDATE=YES,CLOSE_ALL=YES,BLANK_FILL=YES);
%EJECT;
/*         M$ME, commentary */
 
%FPT_OPEN    (FPTN=FPT_OPEN_LOG,
              STCLASS=CONSTANT,
              FUN=CREATE,
              EXIST=NEWFILE,
              DCB=M$ME);
%FPT_WRITE   (FPTN=FPT_WRITE_LOG,
              STCLASS=CONSTANT,
              DCB=M$ME,
              BUF=LOG_BUF);
%FPT_CLOSE   (FPTN=FPT_CLOSE_LOG,
              STCLASS=CONSTANT,
              DISP=SAVE,
              DCB=M$ME);
 
/*         M$DO, errors */
 
%FPT_OPEN    (FPTN=FPT_OPEN_ERR,
              STCLASS=CONSTANT,
              FUN=CREATE,
              EXIST=NEWFILE,
              DCB=M$DO);
%FPT_WRITE   (FPTN=FPT_WRITE_ERR,
              STCLASS=CONSTANT,
              DCB=M$DO,
              BUF=ERR_BUF);
%FPT_CLOSE   (FPTN=FPT_CLOSE_ERR,
              STCLASS=CONSTANT,
              DISP=SAVE,
              DCB=M$DO);
 
/*         M$OU, outputs HELP database */
 
%FPT_OPEN    (FPTN=FPT_OPEN_OU,
              STCLASS=CONSTANT,
              ASN=FILE,
              TYPE='IH',                /* HELP DATABASE                      */
              FUN=CREATE,
              ORG=KEYED,
              ACS=DIRECT,
              DCB=M$OU);
%FPT_WRITE   (FPTN=FPT_WRITE_DATA,
              STCLASS=STATIC,
              DCB=M$OU,
              BP=NO,
              KEY=DATA_KEY,
              NEWKEY=YES,ONEWKEY=NO,    /* Key must not exist already         */
              BUF=IN_BUF);
%FPT_WRITE   (FPTN=FPT_WRITE_DICT,
              STCLASS=CONSTANT,
              DCB=M$OU,
              BP=NO,
              KEY=DICT_KEY,
              NEWKEY=YES,ONEWKEY=NO,    /* Key must not exist already         */
              BUF=CONV_BUF);
%FPT_WRITE   (FPTN=FPT_WRITE_SYN,
              STCLASS=STATIC,
              DCB=M$OU,
              BP=NO,
              NEWKEY=YES,ONEWKEY=NO,    /* Key must not exist already         */
              KEY=SYN_KEY);
%FPT_DELREC  (FPTN=FPT_DELREC,
              STCLASS=STATIC,
              DCB=M$OU);
%FPT_READ    (FPTN=FPT_REREAD,
              STCLASS=CONSTANT,
              DCB=M$OU,
              KEYR=YES,
              KEY=DICT_KEY,
              BUF=IN_BUF);
%FPT_PRECORD (FPTN=FPT_PREC,
              STCLASS=CONSTANT,
              DCB=M$OU,
              KEYS=YES,
              KEY=DICT_KEY);
%FPT_CLOSE   (FPTN=FPT_CLOSE_OU,
              STCLASS=CONSTANT,
              DISP=SAVE,
              DCB=M$OU);
 
/*         M$LO, lists the HERMAN source input */
 
%FPT_OPEN    (FPTN=FPT_OPEN_LIST,
              STCLASS=CONSTANT,
              FUN=CREATE,
              EXIST=NEWFILE,
              DCB=M$LO);
%FPT_WRITE   (FPTN=FPT_WRITE_LIST,
              STCLASS=CONSTANT,
              DCB=M$LO,
              BUF=IN_BUF);
%FPT_CLOSE   (FPTN=FPT_CLOSE_LIST,
              STCLASS=CONSTANT,
              DISP=SAVE,
              DCB=M$LO);
%EJECT;
/*         ASSORTED MONITOR SERVICES */
 
%FPT_TIME    (FPTN=FPT_TIME,
              STCLASS=STATIC,
              DEST=EXT,
              DAY=TIME.DAY_LOC,
              DATE=TIME.DAT_LOC,
              TIME=TIME.TIM_LOC);
%FPT_ERRMSG  (FPTN=FPT_ERRMSG,
              STCLASS=STATIC,
              INCLCODE=YES,
              CODE=ERRCODE,
              SUBMESS=YES,
              BUF=ERR_BUF,
              DCB=M$SI,
              OUTDCB1=M$DO);
 
%EJECT;
/*     BUFFERS */
 
DCL IN_BUF CHAR (140) STATIC;
DCL IN_STRING (0:139) REDEF IN_BUF CHAR (1);
DCL ERR_BUF CHAR (120) STATIC;
DCL LOG_BUF CHAR (80) STATIC;
DCL CONV_BUF CHAR (5) STATIC;
DCL UBIN_BUF UBIN WORD STATIC;
DCL PARSE_AREA(0:511) SBIN WORD STATIC; /* X$PARSE workspace                  */
DCL RECORD_SIZE SBIN WORD STATIC;
%VLP_ERRCODE (FPTN=ERRCODE,STCLASS=STATIC);
 
/*     COUNTERS */
 
DCL KEY1_LEN SBIN WORD STATIC;
DCL KEY2_LEN SBIN WORD STATIC;
DCL TOPIC_COUNT SBIN STATIC INIT (0);
DCL SUB_TOPIC_COUNT SBIN STATIC INIT (0);
DCL SYN_COUNT SBIN STATIC INIT (0);
DCL NULL_KEY2_COUNT SBIN STATIC INIT (0);
DCL RECORD_COUNT SBIN STATIC INIT (0);
DCL WARNING_COUNT SBIN STATIC INIT(0);
DCL ERROR_COUNT SBIN STATIC INIT(0);
DCL REDUNDANT_COUNT SBIN STATIC INIT(0);
DCL PREV_SIZE SBIN;
DCL II SBIN WORD STATIC INIT(0);
DCL JJ SBIN WORD STATIC INIT(0);
DCL HUNK SBIN WORD STATIC;
DCL SPEC SBIN WORD STATIC;
DCL OPT_NO SBIN WORD STATIC;
 
/*     POINTERS */
 
DCL B$TCB$ PTR SYMREF;
DCL M$SI$ PTR STATIC;
DCL B$JIT$ PTR SYMREF;
DCL OPT$ PTR STATIC;
DCL HUNK$ PTR STATIC;
 
/*     FLAGS AND SWITCHES */
 
DCL RECORDS_REMAIN BIT(1) STATIC;
DCL EXTRACT_IN_PROGRESS BIT(1) STATIC;
DCL 1 OPT STATIC,
      2 * BIT(1) ALIGNED INIT('0'B),    /* (EXTRA)                            */
      2 LS BIT(1) ALIGNED INIT('1'B),   /* LIST SOURCE                        */
      2 UI BIT(1) ALIGNED INIT('0'B),   /* USE UPDATES                        */
      2 OU BIT(1) ALIGNED INIT('1'B),   /* GENERATE OBJECT OUTPUT             */
      2 WA BIT(1) ALIGNED INIT('1'B),   /* WARN                               */
      2 CH BIT(1) ALIGNED INIT('1'B),   /* CHATTER                            */
      2 SU BIT(1) ALIGNED INIT('1'B),   /* SUMMARY                            */
      2 ER BIT(1) ALIGNED INIT('1'B),    /* ELIMINATE REDUNDANT SYNONYMS      */
      2 * BIT(1) ALIGNED INIT('0'B);    /* (EXTRA)                            */
DCL OPTION(0:8) REDEF OPT BIT(1) ALIGNED;
 
/*     EXTERNAL ROUTINES */
 
DCL X$PARSE ENTRY(1) ALTRET;
%EJECT;
/*     DATA STRUCTURES */
 
DCL 1 TIME STATIC,
      2 * CHAR (3) INIT ('...') UNAL,
      2 DAY_LOC CHAR (3) UNAL,
      2 * CHAR (2) INIT (', ') UNAL,
      2 DAT_LOC CHAR (10) UNAL,
      2 * CHAR (2) INIT (', ') UNAL,
      2 TIM_LOC CHAR (11) UNAL;
DCL TIME_STAMP  REDEF TIME CHAR (31);
DCL 1 DATA_KEY STATIC,
      2 LEN UBIN(9) UNAL,
      2 TEXT CHAR(34) UNAL;
DCL 1 DICT_KEY STATIC,
      2 LEN UBIN(9) UNAL,
      2 TEXT CHAR(63) UNAL;
DCL 1 PREV_KEY STATIC,
 2 LEN UBIN(9) UNAL INIT(1),
 2 TEXT CHAR(63) INIT(' ');
DCL 1 SYN_KEY STATIC,
      2 LEN UBIN(9) UNAL,
      2 TEXT CHAR(31) UNAL;
DCL 1 LKEY,
      2 COUNT UBIN(9) UNAL,
      2 TEXT CHAR(31);
%PARSE$OUT(STCLASS = BASED);
%PARSE$SYM(STCLASS = BASED);
DCL TOP_HERMAN_CMD BIT(1) SYMREF;       /* Parse tree for HERMAN options      */
DCL HERMAN_INVOCATION_CMD BIT(1) SYMREF;  /* Parse tree for invocation        */
%P_PCB(NAME = PCB_HERMAN,
       T = IN_BUF,
       WSZ = "SIZEW(PARSE_AREA)",
       W = PARSE_AREA,
       C_LD = '  ',                     /* No comments allowed                */
       C_TL = '  ',                     /* No comments allowed                */
       CNTU = NO,
       STCLASS = STATIC);
DCL 1 TEXT$C BASED,
      2 C UBIN(9) UNAL,
      2 TEXT CHAR(TEXT$C.C) UNAL;
%EJECT;
/* PROCEDURE */
 
/*     INITIALIZATION */
 
BEGIN:     ;
/**/
/*  FIRST WE PARSE THE INPUT LINE LOOKING FOR OPTION FLAGS AND                */
/*  GOODIES.                                                                  */
/**/
           PCB_HERMAN.ROOT$ = ADDR(HERMAN_INVOCATION_CMD);
           PCB_HERMAN.NCHARS = B$JIT$ -> B$JIT.CCARS;
           IN_BUF = B$JIT$ -> B$JIT.CCBUF;
           CALL X$PARSE(PCB_HERMAN) ALTRET(BAD_INVOCATION);
           DO WHILE (%NO#);
BAD_INVOCATION: ;
              LOG_BUF = 'I can''t understand that invocation.';
              CALL M$WRITE(FPT_WRITE_LOG);
              CALL M$ERR;
              END;
/**/
/*  NOW WE INITIALIZE OPTION FLAGS AND NIFTIES BASED ON THE PARSE RESULTS     */
/**/
           DO SPEC = 0 TO PCB_HERMAN.OUT$ -> OUT$BLK.NSUBLKS -1;
              OPT$ = PCB_HERMAN.OUT$ -> OUT$BLK.SUBLK$(SPEC);
              DO CASE(OPT$ -> OUT$BLK.CODE);
                 CASE(1);               /* SI SPEC                            */
                                        /* Let IBEX set up the DCB            */
                 CASE(2);               /* UI SPEC                            */
                                        /* Let IBEX set up the DCB            */
                 CASE(3);               /* PREP SPEC                          */
                                        /* Let IBEX set up the DCB            */
                 CASE(4);               /* DEST SPEC                          */
                                        /* Let IBEX set up the DCB            */
                 CASE(5);               /* OPT SPEC                           */
                   DO OPT_NO = 0 TO OPT$ -> OUT$BLK.NSUBLKS -1;
                      OPTION(OPT$ -> OUT$BLK.SUBLK$(OPT_NO) -> OUT$BLK.CODE)
                        = ~ BINBIT(OPT$ -> OUT$BLK.SUBLK$(OPT_NO) -> OUT$BLK.NSUBLKS,1);
                      END;
                 CASE(6);               /* LS SPEC                            */
                 END;                   /* END CASE                           */
              END;
%EJECT;
/**/
/*  INITIALIZE PROCESSING WITH PROCESSED OPTIONS                              */
/**/
           CALL M$OPEN (FPT_OPEN_LOG);
           IF OPT.CH
            THEN
              DO;
                 LOG_BUF='HERMAN here';
                 CALL M$WRITE (FPT_WRITE_LOG);
                 CALL M$TIME (FPT_TIME);
                 LOG_BUF=TIME_STAMP;
                 CALL M$WRITE (FPT_WRITE_LOG);
                 END;
           IF OPT.OU
            THEN
              CALL M$OPEN (FPT_OPEN_OU);
           IF OPT.LS
            THEN
              CALL M$OPEN (FPT_OPEN_LIST);
           CALL M$OPEN (FPT_OPEN_ERR);
           IF OPT.CH
            THEN
              DO;
                 LOG_BUF='...OUTput files open';
                 CALL M$WRITE (FPT_WRITE_LOG);
                 END;
           CALL XUU$OPEN (XUU_PARAM);
           IF OPT.CH
            THEN
              DO;
                 LOG_BUF='...INput file(s) open';
                 CALL M$WRITE (FPT_WRITE_LOG);
                 END;
 
           M$SI$ = DCBADDR(DCBNUM(M$SI));
           EXTRACT_IN_PROGRESS = '0'B;
           DICT_KEY.TEXT = ' ';
           KEY1_LEN = 0;
           PCB_HERMAN.ROOT$ = ADDR(TOP_HERMAN_CMD);
%EJECT;
/*     MAIN ROUTINE */
 
           RECORDS_REMAIN = '1'B;
           CALL GET_INPUT ALTRET(ABORT); /* Get first input record            */
           IF NOT RECORDS_REMAIN
            THEN                        /* Empty input file!                  */
              DO;
                CALL XUU$CLOSE (XUU_PARAM);
                LOG_BUF = '*** INPUT FILE CONTAINS NO DATA RECORDS!';
                CALL M$WRITE (FPT_WRITE_LOG);
                GOTO QUIT;
                END;
LOOP_R:    DO WHILE (RECORDS_REMAIN);
                   IF SUBSTR(IN_BUF,0,2) = '.*'
                    OR SUBSTR(IN_BUF,0,2) = '~*'
                      THEN              /* This line is a TEXT comment        */
                        CALL TEXT_COMMENT ALTRET(HERMAN_END);
                      ELSE              /* This line is not a TEXT comment    */
                        CALL DATA_RECORD ALTRET(HERMAN_END);
                   CALL GET_INPUT ALTRET(ABORT); /* Get next input record     */
NEXT_R:            END LOOP_R;
%EJECT;
HERMAN_END:  ;
           FPT_DELREC.LKEY_ = VECTOR(NIL);
           FPT_DELREC.KEY_ = VECTOR(PREV_KEY);
           IF NOT OPT.ER OR NOT OPT.OU
            THEN
              GOTO ER_DONE;
           CALL M$REW (FPT_DELREC);
           DO WHILE '1'B;
              DICT_KEY.TEXT = ' ';
              IN_BUF = ' ';
              CALL M$READ (FPT_REREAD) ALTRET (ER_DONE);
              RECORD_SIZE = DCBADDR(DCBNUM(M$OU))->F$DCB.ARS#;
              IF DICT_KEY.LEN > 3 AND SUBSTR(DICT_KEY.TEXT,DICT_KEY.LEN-3,1) < ' '
               THEN
                 KEY1_LEN = DICT_KEY.LEN-3;
               ELSE
                 KEY1_LEN = 0;
              IF SUBSTR(DICT_KEY.TEXT,0,PREV_KEY.LEN) =
               SUBSTR(PREV_KEY.TEXT,0,PREV_KEY.LEN) AND
               (RECORD_SIZE = PREV_SIZE AND IN_BUF = LOG_BUF AND KEY1_LEN = 0
               OR KEY1_LEN > 0 AND LOG_BUF = SUBSTR(DICT_KEY.TEXT,0,KEY1_LEN))
               THEN
                 DO;
                    CALL M$DELREC (FPT_DELREC);
                    CALL M$READ (FPT_REREAD);
                    REDUNDANT_COUNT = REDUNDANT_COUNT+1;
                    END;
              IF KEY1_LEN > 0
               THEN
                 DO;
                    PREV_KEY = '006'O;
                    SUBSTR(DICT_KEY.TEXT,KEY1_LEN,1) = ' ';
                    DICT_KEY.LEN = KEY1_LEN+1;
                    CALL M$PRECORD (FPT_PREC) WHENALTRETURN DO; END;
                    END;
               ELSE
                 DO;
                    PREV_KEY = DICT_KEY;
                    LOG_BUF = IN_BUF;
                    PREV_SIZE = RECORD_SIZE;
                    END;
              END;
ER_DONE: ;
           IF OPT.CH
            THEN
              DO;
                LOG_BUF='...output construction halts';
                CALL M$WRITE (FPT_WRITE_LOG);
                END;
           IF OPT.OU
            THEN
              CALL M$CLOSE (FPT_CLOSE_OU);
           IF OPT.LS
            THEN
              CALL M$CLOSE (FPT_CLOSE_LIST);
           CALL M$CLOSE (FPT_CLOSE_ERR);
           IF OPT.CH
            THEN
              DO;
                LOG_BUF='...OUTput files closed';
                CALL M$WRITE (FPT_WRITE_LOG);
                END;
           CALL XUU$CLOSE (XUU_PARAM);
           IF OPT.CH
            THEN
              DO;
                LOG_BUF='...INput file closed';
                CALL M$WRITE (FPT_WRITE_LOG);
                END;
%EJECT;
/**/
/*  PRINT THE SUMMARY                                                         */
/**/
           IF OPT.SU
            THEN
              DO;
                 CALL BINCHAR (CONV_BUF,TOPIC_COUNT);
                 CALL CONCAT (LOG_BUF,'...',CONV_BUF,
                              ' TOPICs encountered.');
                 CALL M$WRITE (FPT_WRITE_LOG);
                 CALL BINCHAR (CONV_BUF,SUB_TOPIC_COUNT);
                 CALL CONCAT (LOG_BUF,'...',CONV_BUF,
                              ' SUBTOPICs encountered.');
                 CALL M$WRITE (FPT_WRITE_LOG);
                 CALL BINCHAR (CONV_BUF,NULL_KEY2_COUNT);
                 CALL CONCAT (LOG_BUF,'...',CONV_BUF,
                              ' NULL SUBTOPICs encountered.');
                 CALL M$WRITE (FPT_WRITE_LOG);
                 CALL BINCHAR (CONV_BUF,SYN_COUNT);
                 CALL CONCAT (LOG_BUF,'...',CONV_BUF,
                              ' SYNONYMs encountered.');
                 CALL M$WRITE (FPT_WRITE_LOG);
                 CALL BINCHAR (CONV_BUF,REDUNDANT_COUNT);
                 CALL CONCAT (LOG_BUF,'...',CONV_BUF,
                              ' Redundant SYNONYMs eliminated.');
                 IF OPT.ER AND OPT.OU
                  THEN
                    CALL M$WRITE (FPT_WRITE_LOG);
                 CALL BINCHAR (CONV_BUF,RECORD_COUNT);
                 CALL CONCAT (LOG_BUF,'...',CONV_BUF,
                              ' data RECORDS processed.');
                 CALL M$WRITE (FPT_WRITE_LOG);
                 END;
           IF WARNING_COUNT = 0
            THEN
              LOG_BUF = '...NO warnings encountered.';
            ELSE
              DO;
                CALL BINCHAR (CONV_BUF,WARNING_COUNT);
                CALL CONCAT (LOG_BUF,'!!!',CONV_BUF,' warnings encountered.');
                END;
           CALL M$WRITE (FPT_WRITE_LOG);
           IF ERROR_COUNT = 0
            THEN
              LOG_BUF = '...NO errors encountered.';
            ELSE
              DO;
                CALL BINCHAR (CONV_BUF,ERROR_COUNT);
                CALL CONCAT (LOG_BUF,'!!!',CONV_BUF,' errors encountered.');
                END;
           CALL M$WRITE (FPT_WRITE_LOG);
           IF OPT.CH
            THEN
              DO;
                LOG_BUF='HERMAN done';
                CALL M$WRITE (FPT_WRITE_LOG);
                END;
           CALL M$CLOSE (FPT_CLOSE_LOG);
QUIT:  RETURN;
 
ABORT:     CALL M$ERRMSG (FPT_ERRMSG);
           GOTO QUIT;
%EJECT;
DATA_RECORD: PROC ALTRET;
/**/
/*  This routine is called in the event of a purely data record.  If          */
/*  it is a part of the HELP output, it is written to the output file.        */
/**/
           IF NOT EXTRACT_IN_PROGRESS
            THEN                        /* Don't process the data record      */
              RETURN;
           CALL INSERT(DATA_KEY.TEXT,KEY1_LEN,,BINASC(0),
            BINASC(II),BINASC(JJ));     /* Make key                           */
           DATA_KEY.LEN = KEY1_LEN +3;  /* Count ' IIJJ'                      */
           FPT_WRITE_DATA.BUF_.BOUND = RECORD_SIZE -1;
           IF OPT.OU
            THEN
              CALL M$WRITE (FPT_WRITE_DATA) ALTRET(DATA_ALT);
           JJ = JJ +1;
           IF JJ >= 512
            THEN                        /* ERROR! UBIN (9) rolls over         */
              DO;
                ERR_BUF = ' Too many records in one message chunk.  HERMAN aborting';
                CALL M$WRITE(FPT_WRITE_ERR);
                CALL CONCAT(ERR_BUF,'at:  ',IN_BUF);
                CALL M$WRITE(FPT_WRITE_ERR);
                ERROR_COUNT = ERROR_COUNT +1;
                ALTRETURN;
                END;
           RECORD_COUNT = RECORD_COUNT +1;
           IF OPT.LS
            THEN
              CALL M$WRITE (FPT_WRITE_LIST);
           RETURN;
%EJECT;
DATA_ALT:  ;
           ERRCODE = B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR;
           IF ERRCODE.ERR# = %E$OLDREC
            THEN                        /* Attempt to over-write an old rec   */
              DO;
                IF SUBSTR(DATA_KEY.TEXT,0,1)=BINASC(1) THEN /* *T* OR *M* */
                   CALL CONCAT(ERR_BUF,' Record already exists.  ',
                      'Flushing to next HERMAN command.  ',
                      'TOPIC = *T* or *M*');
                ELSE
                   CALL CONCAT(ERR_BUF,' Record already exists.  ',
                      'Flushing to next HERMAN command.  ',
                      'TOPIC = ',SUBSTR(DATA_KEY.TEXT,0,KEY1_LEN));
                CALL M$WRITE(FPT_WRITE_ERR);
                ERROR_COUNT = ERROR_COUNT +1;
                EXTRACT_IN_PROGRESS = '0'B; /* Flush until next HERMAN cmd    */
                RETURN;
                END;
           END DATA_RECORD;
%EJECT;
SUB_TOPIC: PROC ALTRET;
/**/
/*  THIS ROUTINE IS CALLED WHEN A NEW SUB-TOPIC IS DEFINED                    */
/**/
           CALL CHECK_HUNK;
           KEY2_LEN = HUNK$ -> TEXT$C.C;
           CALL INSERT(DICT_KEY.TEXT,KEY1_LEN+1,,HUNK$ -> TEXT$C.TEXT);
           DICT_KEY.LEN = KEY1_LEN + KEY2_LEN +1;
           SUB_TOPIC_COUNT = SUB_TOPIC_COUNT +1;
           CALL BINCHAR(CONV_BUF,II);
           IF OPT.OU
            THEN
              CALL M$WRITE(FPT_WRITE_DICT) ALTRET(DICT_ALT);
              DO WHILE ('0'B);
DICT_ALT:        ;
                 ERRCODE = B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR;
                 IF ERRCODE.ERR# = %E$OLDREC
                  THEN                  /* Attempt to over-write old rec      */
                   DO;
                     CALL CONCAT(ERR_BUF,' SUB-TOPIC "',HUNK$ -> TEXT$C.TEXT,
                       '" already exists under TOPIC "',
                       SUBSTR(DATA_KEY.TEXT,0,KEY1_LEN),'" (ignored).');
                     ERROR_COUNT = ERROR_COUNT +1;
                     CALL M$WRITE(FPT_WRITE_ERR);
                     END;
                  ELSE                  /* Unknown error                      */
                     CALL M$MERC;
                 END;
           RETURN;
           END SUB_TOPIC;
%EJECT;
GET_INPUT: PROC ALTRET;
/**/
/* This routine gets an input record.  On normal return it always has         */
/* a record (even if it had to write a warning message). If a higher          */
/* severity error occured, this routine ALTRETURNS.                           */
/* NOTE:  EOF on input is not considered an error.  It just resets RECORDS_   */
/* REMAIN.                                                                    */
/**/
           IN_BUF=' ';
           CALL XUU$READ (XUU_PARAM, VECTOR(IN_BUF)) ALTRET(BAD_READ);
           RECORD_SIZE = XUU_PARAM.ARS;
           IF RECORD_SIZE = 0
            THEN
                RECORD_SIZE = 1;        /* We already blank-filled            */
           IF RECORD_SIZE > 79
            THEN                        /* ERROR: record too long             */
OVERSIZE_REC: DO;
                RECORD_SIZE = 79;       /* Truncate                         */
                CALL CONCAT(ERR_BUF,' Input record too long:  ',IN_BUF);
                IF OPT.WA
                 THEN
                   CALL M$WRITE(FPT_WRITE_ERR);
                WARNING_COUNT = WARNING_COUNT +1;
                END;
           RETURN;
BAD_READ:  ;
           ERRCODE = XUU_PARAM.ERRCODE;
           IF ERRCODE.ERR# = %E$LD
            THEN
              GOTO OVERSIZE_REC;
           IF ERRCODE.ERR# = %E$EOF
               THEN DO;
                    RECORDS_REMAIN='0'B;
                    RETURN;
                    END;
           CALL XUU$CLOSE (XUU_PARAM);
           ALTRETURN;
           END GET_INPUT;
%EJECT;
TOPIC:     PROC ALTRET;
/**/
/*  THIS ROUTINE IS CALLED WHEN A NEW TOPIC IS DEFINED                        */
/**/
           CALL CHECK_HUNK;
           II = 0;
           JJ = 0;
           KEY1_LEN = HUNK$ -> TEXT$C.C;
           DATA_KEY.TEXT = HUNK$ -> TEXT$C.TEXT;
           DICT_KEY.TEXT = DATA_KEY.TEXT;
           DATA_KEY.LEN = KEY1_LEN;
           FPT_DELREC.KEY_ = VECTOR(DATA_KEY);
           LKEY.COUNT = KEY1_LEN+2; /* BINASC(0), BINASC(511) */
           CALL CONCAT (LKEY.TEXT, SUBSTR(DATA_KEY.TEXT,0,KEY1_LEN), BINASC(0), BINASC(511));
           FPT_DELREC.LKEY_ = VECTOR(LKEY);
           CALL M$DELREC (FPT_DELREC);
           TOPIC_COUNT = TOPIC_COUNT +1;
           RETURN;
           END TOPIC;
%EJECT;
SYN:       PROC ALTRET;
/**/
/*  This routine is called to build a synonym record.                         */
/**/
           CALL CHECK_HUNK;
           SYN_KEY.LEN = HUNK$ -> TEXT$C.C;
           SYN_KEY.TEXT = HUNK$ -> TEXT$C.TEXT;
           IF KEY1_LEN = 0
            THEN                        /* Use VECTOR(NIL) to write LEN=0     */
              FPT_WRITE_SYN.BUF_ = VECTOR(NIL);
            ELSE                        /* Piece together BUF vector          */
              DO;
                FPT_WRITE_SYN.BUF_.BOUND = KEY1_LEN -1;
                FPT_WRITE_SYN.BUF_.BUF$ = PINCRC(ADDR(DATA_KEY),1);
                END;
           IF OPT.OU
            THEN
              CALL M$WRITE(FPT_WRITE_SYN) ALTRET(SYN_ALT);
              DO WHILE ('0'B);
SYN_ALT:         ;
                 ERRCODE = B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR;
                 IF ERRCODE.ERR# = %E$OLDREC
                  THEN                  /* Attempt to over-write old record   */
                   DO;
                     CALL CONCAT(ERR_BUF,' SYNONYM "',HUNK$ -> TEXT$C.TEXT,
                      '" already exists for TOPIC "',
                      SUBSTR(DATA_KEY.TEXT,0,KEY1_LEN),'" (ignored).');
                     ERROR_COUNT = ERROR_COUNT +1;
                     CALL M$WRITE(FPT_WRITE_ERR);
                     END;
                  ELSE                  /* Unknown error                      */
                     CALL M$MERC;
                 END;
           SYN_COUNT = SYN_COUNT +1;
           RETURN;
           END SYN;
%EJECT;
CHECK_HUNK: PROC;
/**/
/* This routine checks the current keyword for illegal words                  */
/**/
           IF HUNK$ -> TEXT$C.TEXT = 'TOPICS'
            THEN                        /* Illegal keyword                    */
             DO;
               CALL CONCAT(ERR_BUF,' Illegal keyword:  ',IN_BUF);
               IF OPT.WA
                THEN
                  CALL M$WRITE(FPT_WRITE_ERR);
               WARNING_COUNT = WARNING_COUNT +1;
               END;
           IF HUNK$ -> TEXT$C.C > 31
            THEN                        /* Keyword too long                   */
             DO;
               CALL CONCAT(ERR_BUF,' Keyword too long:  ',IN_BUF);
               IF OPT.WA
                THEN
                  CALL M$WRITE(FPT_WRITE_ERR);
               WARNING_COUNT = WARNING_COUNT +1;
               END;
           RETURN;
           END CHECK_HUNK;
%EJECT;
TEXT_COMMENT: PROC ALTRET;
/**/
/*  This routine is called in the event of a TEXT comment.  We parse          */
/*  it and take any required action.                                          */
/**/
           PCB_HERMAN.NCHARS = RECORD_SIZE;
           CALL X$PARSE(PCB_HERMAN) ALTRET(BAD_DIRECTIVE);
           OPT$ = PCB_HERMAN.OUT$->OUT$BLK.SUBLK$(1)->OUT$BLK.SUBLK$(0);
           DO CASE(OPT$ ->OUT$BLK.CODE);
            CASE(1);                    /* ABSTRACT                           */
              II = 0;                   /* ABSTRACT is TOPIC 0 of default msg */
              JJ = 0;                   /* Clear record counter               */
              KEY1_LEN = 0;             /* Default text (with null KEY1)      */
              DO HUNK = 0 TO OPT$ -> OUT$BLK.NSUBLKS -1;
                 HUNK$ = OPT$ -> OUT$BLK.SUBLK$(HUNK) -> OUT$SYM.TEXTC$;
                 IF HUNK$ -> TEXT$C.C ~= 0
                  THEN                  /* ABSTRACT has SYNONYMS              */
                    CALL SYN ALTRET(TEXCOM_ALT);
                    END;
            CASE(2);                    /* BREAK                              */
              IF JJ ~= 0
               THEN                     /* Text elapsed after previous STOPIC */
                DO;
                   II = II +1;          /* Bump to next SUBTOPIC level        */
                   IF II >= 512
                    THEN                        /* ERROR! UBIN (9) rolls over */
                     DO;
                       ERR_BUF = ' Too many SUBTOPICS in one TOPIC.  HERMAN aborting';
                       CALL M$WRITE(FPT_WRITE_ERR);
                       CALL CONCAT(ERR_BUF,'at:  ',IN_BUF);
                       CALL M$WRITE(FPT_WRITE_ERR);
                       ERROR_COUNT = ERROR_COUNT +1;
                       ALTRETURN;
                       END;
                   JJ = 0;              /* Clear record counter               */
                   IF OPT$ -> OUT$BLK.NSUBLKS = 0
                    THEN
                      NULL_KEY2_COUNT = NULL_KEY2_COUNT+1;
                    ELSE
                      IF KEY1_LEN = 0   /* Abstract can't have subnames       */
                       THEN
                         DO;
                            CALL CONCAT(ERR_BUF,
                             ' Abstract subtopic ignored:   ',IN_BUF);
                            IF OPT.WA
                             THEN
                               CALL M$WRITE(FPT_WRITE_ERR);
                            WARNING_COUNT = WARNING_COUNT+1;
                            OPT$ -> OUT$BLK.NSUBLKS = 0;
                            END;
                   DO HUNK = 0 TO OPT$ -> OUT$BLK.NSUBLKS -1;
                      HUNK$ = OPT$ -> OUT$BLK.SUBLK$(HUNK) -> OUT$SYM.TEXTC$;
                      CALL SUB_TOPIC;
                      END;
                   END;
            CASE(3);                    /* KEYWORD                            */
              II = 0;                   /* Zero TOPIC count                   */
              JJ = 0;                   /* Zero record counter                */
              DO HUNK = 0 TO OPT$ -> OUT$BLK.NSUBLKS -1;
                 HUNK$ = OPT$ -> OUT$BLK.SUBLK$(HUNK) -> OUT$SYM.TEXTC$;
                 IF HUNK = 0
                  THEN                  /* This is the new TOPIC name         */
                    CALL TOPIC ALTRET(TEXCOM_ALT);
                  ELSE                  /* This is a SYNONYM for a TOPIC      */
                    CALL SYN ALTRET(TEXCOM_ALT);
                 END;
            CASE(4);                    /* MODULE                             */
              II = 0;                   /* TOPIC 0 of low-sorting msg         */
              JJ = 0;                   /* Zero record counter                */
              DATA_KEY.TEXT = BINASC(1); /* Make MODULE sort first            */
              KEY1_LEN = 1;
            CASE(5);                    /* RESUME                             */
              ;
            CASE(6);                    /* COPYRIGHT                          */
              II = 1;                   /* TOPIC 1 of low-sorting msg         */
              JJ = 0;                   /* Zero record counter                */
              DATA_KEY.TEXT = BINASC(1); /* Make COPYRIGHT sort first         */
              KEY1_LEN = 1;
            CASE(7);                    /* OTHER                              */
               ;
            CASE(8);                    /* Bad parse of HERMAN command        */
BAD_DIRECTIVE: CALL CONCAT(ERR_BUF,' Bad HERMAN directive:  ',IN_BUF);
               IF OPT.WA
                THEN
                  CALL M$WRITE(FPT_WRITE_ERR);
               WARNING_COUNT = WARNING_COUNT +1;
            END;                        /* END DO CASE                        */
           IF OPT$ ->OUT$BLK.CODE = 7
            OR OPT$ ->OUT$BLK.CODE = 8
            THEN                        /* Not a HERMAN command               */
              EXTRACT_IN_PROGRESS = '0'B;
            ELSE                        /* Valid HERMAN command               */
              DO;
                 EXTRACT_IN_PROGRESS = '1'B;
                 IF OPT.LS
                  THEN
                    CALL M$WRITE (FPT_WRITE_LIST);
                 END;
           RETURN;
/**/
TEXCOM_ALT: ;
           ALTRETURN;
/**/
           END TEXT_COMMENT;
   END HERMAN;
