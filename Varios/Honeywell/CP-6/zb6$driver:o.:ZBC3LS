

CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=1  
        1         1             /*M*  NAME: zb6$driver:c - the main processor of c.g. code.  */
        2         2             /*P*  Name: zb6$driver:c
        3         3                   Purpose: This is the driver routine for the generation of CP-6
        4         4                   object units. Amoung the functions that are performed
        5         5                   in this routine are the generation of the specific
        6         6                   parts of the object unit that have to do with the initial
        7         7                   and final phases of the object unit generation.
        8         8             */
        9         9             #include <stdio:h>
       10        10             #include <errno:h>
       11        11             #include "codegen:h"
       12        12             #include "zb6$ougen:h"
       13        13             #include "zb6$instructions:h"
       14        14             #include "zb6$tables:h"
       15        15             #include "zb6$equate1:h"
       16        16             #include "zb6$regopt:h"
       17        17
       18        18             #define pl6str(_s_)  ( *(int *) buffer =0,\
       19        18                   strcpy( &buffer[2], _s_ ),\
       20        18                   *(int *)buffer |= strlen( &buffer[2] ) << 18)
       21        21
       22        22             #define  pl6str2(_s_)  ( *(int *) buffer =0,\
       23        22                   strcpy( &buffer[1], _s_ ),\
       24        22                   *(int *)buffer |= strlen( &buffer[1] ) << 27)
       25        25
       26        26              extern char buffer[];
       27        27
       28        28             extern int curr_eol_flag ;
       29        29
       30        30             extern int reloc_addr ;
       31        31
       32        32             extern struct reloc_struct reloc[8] ;
       33        33
       34        34             extern int reloc_directive ;
       35        35             extern int reloc_type ;
       36        36             extern int reloc_section ;
       37        37             extern int instruct_type ;
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=2  
       38        38
       39        39             union  {
       40        40    1              struct inst_std_ptr ss1;
       41        41    1              struct inst_std ss2;
       42        42    1              struct inst_eis_char ss3;
       43        43    1              struct inst_eis_three ss4;
       44        44    1                } instruction ;
       45        45
       46        46             extern struct eis_oper  m1_operand , m1_set ;
       47        47             extern struct eis_oper  m2_operand , m2_set ;
       48        48             struct eis_oper  m3_operand , m3_set ={0,0,0,0,0,0,0,0};
       49        49             extern struct inst_std instr_set ;
       50        50             extern struct eis_desc set_eis_desc ;
       51        51             extern struct eis_desc_ptr set_eis_desc_ptr ;
       52        52
       53        53             extern struct sec_table s_s_table[20] ;
       54        54             extern int xbo_seg_ref_id;
       55        55             extern int procsec ;
       56        56             extern int datasec ;
       57        57             extern int conssec ;
       58        58             extern int opt;
       59        59             extern int register_opt_flag ;
       60        60             extern int first_func_flag;
       61        61             static int skip_count ;
       62        62             static int assoc_reg ;
       63        63             static int curr_index;
       64        64             static int curr_ptr;
       65        65             int last_opt;
       66        66             static int last_assoc_reg;
       67        67             extern struct reg_list cr_list[30], cr_list_init;
       68        68             extern int instr_drop_count ;
       69        69             extern int eol_flag ;
       70        70             extern int eof_flag;
       71        71             extern int debug_flag ; /* temp setting- need real ref to global set
       72        72                                    in the root by options scanner. */
       73        73             extern int debug_print_flag ; /* debug print flag for ou generator.. */
       74        74             extern int debug_drop_flag ; /* debug print for dropped instructions in
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=3  
       75        75                                       register optimization mode. */
       76        76             extern int log_blk_num ;  /* logical blk number for debug stuff.. */
       77        77             extern int var_num ;  /* curr debug tbl ariable entry number.  */
       78        78
       79        79             extern int set_control ();
       80        80             extern int set_pointer();
       81        81             extern int set_addr_pointer();
       82        82             extern int set_ptr_to_function();
       83        83             extern void zb6_close_debug_blks();
       84        84
       85        85             extern struct instr curr_instr, curr_i_set ;
       86        86             extern struct instr prev_instr;
       87        87             extern struct instr next_instr;
       88        88             extern int first_blk_flag ;
       89        89             extern int int_constant_flag;
       90        90             extern int first_prog_line;
       91        91             extern int instr_flag ;
       92        92             extern int symdef_flag ;
       93        93             extern int static_terminate_flag;
       94        94             extern int static_data_flag;
       95        95             extern char static_con_name[130];
       96        96             extern char static_data_name[130];
       97        97             extern int static_con_ref_num;
       98        98             extern int static_data_ref_num;
       99        99             extern int static_con_size ;
      100       100             extern int static_data_size ;
      101       101             extern int static_first_use_flag ;
      102       102             extern int *dfloat_ptr ;
      103       103             extern int *int_ptr ;
      104       104             extern int *string_ptr ;
      105       105             extern labels_p first_lbl_tbl_ptr;
      106       106             extern labels_p lbl_tbl_ptr ;
      107       107             extern sym_tbl_p first_sym_tbl_ptr ;
      108       108             extern sym_tbl_p sym_tbl_ptr;
      109       109             extern line_tbl_p line_tbl_ptr;
      110       110             extern int curr_con_section; /* the current active control section. */
      111       111
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=4  
      112       112             extern char progname[65];  /* hold prog/file name being compiler.*/
      113       113             extern FILE *infile ;
      114       114             extern FILE *oufile ;
      115       115             extern int oudcbnum ;
      116       116             extern int *oudcbptr ;
      117       117             extern char ououtput[130];
      118       118             extern char cginput[] ;
      119       119             extern int error_severity;
      120       120             extern int forward_ref_flag ;
      121       121             extern int forward_ref_count;
      122       122             extern int ref_name_flag ;  /* have a sym ent ref name on tsx instruction, */
      123       123             extern int integer_only_flag;
      124       124             extern char *cur_func;
      125       125             extern char *cur_file ;
      126       126             extern int line_num ;
      127       127             extern char *OUGEN_PHASE ;
      128       128             #define BRK_FMT   "%s File=%s  Line=%d   Function=%s,\n"
      129       129
      130       130             extern int conv_i_to_f();
      131       131             extern int conv_f_to_i();
      132       132             extern int set_constant();
      133       133             extern int set_file_name();
      134       134             extern int set_static_storage();
      135       135             extern void get_symbol_ids();
      136       136             extern void set_entry_def();
      137       137             extern void set_debug_stmt_info();
      138       138             extern void set_label_info();
      139       139             extern void set_var_info();
      140       140             extern void set_debug_blk_info();
      141       141             extern void set_debug_fun_info();
      142       142             extern void set_line();
      143       143             extern void incr_line();
      144       144             extern void get_eol();
      145       145             extern void set_data_ref_num();
      146       146             extern void set_con_ref_num();
      147       147             extern void walk_lbls();
      148       148             extern void walk_vars();
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=5  
      149       149             extern void check_for_static_terminate();
      150       150             extern void check_if_first_call();
      151       151             extern void chk_entref_names();
      152       152             extern short *myalloc();
      153       153
      154       154
      155       155             extern char blnk_buff[] ;
      156       156
      157       157             extern int c ;
      158       158
      159       159
      160       160             extern int lo_flag ; /* dummy for the moment - should be an
      161       161                                   external reference to flag set in root. */
      162       162             extern int debuflag  ;
      163       163             extern int pm_flag  ;
      164       164             extern int dm_flag  ;
      165       165             extern int mdm_flag  ;
      166       166             extern int two_arg ;
      167       167             extern int zero_arg ;
      168       168             extern int one_arg ;
      169       169             extern int three_arg ;
      170       170             extern int minus_one_arg ;
      171       171             extern int compiler_id ;
      172       172             extern char B_VERSION [];
      173       173             extern int codesect ;
      174       174             extern int datasect ;
      175       175             extern int zeroinit ;
      176       176             extern int evenbound ;
      177       177             extern int noinit ;
      178       178             extern int eightbound ;
      179       179             extern int conssect  ;
      180       180             extern int static_func_count;
      181       181             extern int noname ;
      182       182
      183       183             extern int trustme ;
      184       184             extern int static_function_flag;
      185       185
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=6  
      186       186             int float_cons;
      187       187             int last_float_cons;
      188       188             double curr_cons_value;
      189       189             int opt_float_cons;
      190       190             double last_cons_value;
      191       191             int eis_oper_three;
      192       192
      193       193             int last_reloc_addr;
      194       194             int last_addr_offset;
      195       195             int last_index;
      196       196             int actual_stmt_count;
      197       197
      198       198             int four_val = 4;
      199       199             int eight_val = 8;
      200       200             int fourteen_val = 14;
      201       201             int seventeen_val = 17;
      202       202
      203       203             int blt_tbl[4] = {ZTMI, ZTPNZ, ZTNC, ZTRCANE};
      204       204             int ble_tbl[4] = {ZTMOZ, ZTPL, ZTNCOEQ, ZTRC};
      205       205             int beq_tbl[4] = {ZTZE, ZTZE, ZTZE, ZTZE };
      206       206             int bne_tbl[4] = {ZTNE, ZTNE, ZTNE, ZTNE };
      207       207             int bge_tbl[4] = {ZTPL, ZTMOZ, ZTRC, ZTNCOEQ };
      208       208             int bgt_tbl[4] = {ZTPNZ, ZTMI, ZTRCANE, ZTNC };
      209       209
      210       210
      211       211             /*    The following routine contains the initial call to the
      212       212                   xuo object unit generator routines. This routine also
      213       213                   sets up three constrol sections for the procedure, data
      214       214                   and constant areas to be associated with the users
      215       215                   program.
      216       216             */
      217       217             ouinit () {
      218       218    1        int name_offset;
      219       219    1        int schema ;
      220       220    1        struct v_num {
      221       221    2              unsigned lett :9;
      222       222    2              unsigned release :9;
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=7  
      223       223    2              unsigned fill1 :18;
      224       224    2              }  version;
      225       225    1
      226       226    1        void errhandler();
      227       227    1        void *entptr;
      228       228    1
      229       229    1
      230       230    1              if (static_data_flag != 0 ) return;
      231       231    1              static_con_ref_num = 0;
      232       232    1              static_data_ref_num = 0;
      233       233    1              static_function_flag = 0;
      234       234    1
      235       235    1              XUO$BUFINIT (N,N,N,N,N,N,
      236       236    1                    N,N,N,N,N,
      237       237    1                    &eight_val,N,N,N,N, &three_arg);
      238       238    1        /*    buffer initialization has taken place in the above statement. */
      239       239    1
      240       240    1              if (debug_flag != 0)
      241       241    1                schema = -1 ;
      242       242    1              else
      243       243    1                schema = 0 ;
      244       244    1
      245       245    1              pl6str2 (":SHARED_C");
      246       246    1              entptr = (void (*)()) errhandler ;
      247       247    1              version.lett = B_VERSION[1];
      248       248    1              version.release = 0 ;
      249       249    1              version.fill1 = 2 ;
      250       250    1              XUO$OUINIT (&oudcbnum, &zero_arg, &schema, &compiler_id,
      251       251    1                   &version, buffer , N, &entptr ,
      252       252    1                   N, &trustme);
      253       253    1
      254       254    1        /*    build the sections for the code, data and constant areas. */
      255       255    1
      256       256    1              pl6str (progname);
      257       257    1
      258       258    1              XUO$DNAME (buffer, &name_offset);
      259       259    1              XUO$SECTBUILD (&codesect, &name_offset, &procsec, &zeroinit,
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=8  
      260       260    1                       &eightbound);
      261       261    1
      262       262    1              XUO$SECTBUILD (&datasect, &noname, &datasec, &zeroinit,
      263       263    1                      &evenbound);
      264       264    1
      265       265    1              XUO$SECTBUILD (&conssect, &noname, &conssec, &noinit,
      266       266    1                      &evenbound);
      267       267    1              if (static_con_size !=0) {
      268       268    2                 pl6str (static_con_name);
      269       269    2                 XUO$RNAME(buffer, &name_offset);
      270       270    2                 XUO$SREF(&name_offset, &zero_val, &static_con_ref_num,
      271       271    2                     &zeroinit);
      272       272    2                  }
      273       273    1              if (static_data_size !=0) {
      274       274    2                 pl6str (static_data_name);
      275       275    2                 XUO$RNAME(buffer, &name_offset);
      276       276    2                 XUO$SREF(&name_offset, &zero_val, &static_data_ref_num,
      277       277    2                     &zero_val);
      278       278    2                  }
      279       279    1              if (static_data_size !=0 || static_con_size != 0) {
      280       280    2                pl6str (static_total_name);
      281       281    2                XUO$RNAME(buffer, &name_offset);
      282       282    2                XUO$EREF(&name_offset, &zero_val, &minus_one_arg,&zero_val,
      283       283    2                    &std_call, &zero_val, &schema );
      284       284    2                set_con_ref_num();
      285       285    2                set_data_ref_num();
      286       286    2                }
      287       287    1
      288       288    1              pl6str ("ISSID");
      289       289    1              XUO$RNAME( buffer, &name_offset);
      290       290    1              XUO$SEGREF ( &name_offset, &xbo_seg_ref_id);
      291       291    1
      292       292    1
      293       293    1              s_s_table[procsec].size = 0;
      294       294    1              s_s_table[datasec].size = 0;
      295       295    1              s_s_table[conssec].size = 0;
      296       296    1
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=9  
      297       297    1              s_s_table[procsec].curr_offset = 0;
      298       298    1              s_s_table[datasec].curr_offset = 0;
      299       299    1              s_s_table[conssec].curr_offset = 0;
      300       300    1
      301       301    1              first_blk_flag = 1;
      302       302    1              first_prog_line = 1;
      303       303    1              forward_ref_count = 0;
      304       304    1              forward_ref_flag  = 0;
      305       305    1              ref_name_flag = 0;
      306       306    1              curr_con_section = 0;
      307       307    1              first_func_flag = 0;
      308       308    1              blk_count = 0;
      309       309    1              stmt_count = 0;
      310       310    1              actual_stmt_count = 0;
      311       311    1              int_ptr = NULL;
      312       312    1              dfloat_ptr = NULL;
      313       313    1              ro_reset_register_status();
      314       314    1
      315       315    1              return;
      316       316    1              }
      317       317
      318       318
      319       319             /*    The following function is used to setup the input from the
      320       320                   code generator into instructions or other forms of o.u.
      321       321                   information.
      322       322             */
      323       323             program_gen ( ) {
      324       324    1        int temp_offset;
      325       325    1        int oper_value;
      326       326    1        int reloc_temp_type;
      327       327    1        int i;
      328       328    1        int temp_fwd_flag;
      329       329    1
      330       330    1
      331       331    1
      332       332    1            opt = 0;
      333       333    1            for (; opt != ZEQU ;) {
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=10 
      334       334    2              init_instr(); /* initialize the insruction structure. */
      335       335    2              opt = get_stmt_type();
      336       336    2              if (opt == 0 || eof_flag != 0 )
      337       337    2                return;
      338       338    2              if( opt >= ZLDG && opt <= ZCDU ) {
      339       339    3                instr_flag = 1 ;
      340       340    3                 }
      341       341    2
      342       342    2        jump_again:
      343       343    2              switch (opt) {
      344       344    3               case ZLDG:
      345       345    3               case ZLXL:
      346       346    3                get_assoc_reg();
      347       347    3                get_addr();
      348       348    3                get_index();
      349       349    3                get_ptr_reg();
      350       350    3                ro_chk_set_register_status(assoc_reg);
      351       351    3                break;
      352       352    3
      353       353    3               case ZSTQ:
      354       354    3                get_addr();
      355       355    3                get_index();
      356       356    3                get_ptr_reg();
      357       357    3                ro_reg_status_change (ZQ);
      358       358    3                ro_set_register_status (ZQ);
      359       359    3                break;
      360       360    3               case ZSTG:
      361       361    3               case ZSXL:
      362       362    3                get_assoc_reg();
      363       363    3                get_addr();
      364       364    3                get_index();
      365       365    3                get_ptr_reg();
      366       366    3                ro_reg_status_change (assoc_reg);
      367       367    3                ro_set_register_status (assoc_reg);
      368       368    3                break;
      369       369    3               case ZSTI:
      370       370    3                get_addr();
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=11 
      371       371    3                get_index();
      372       372    3                get_ptr_reg();
      373       373    3                break;
      374       374    3
      375       375    3               case ZEPPR:
      376       376    3                get_assoc_reg();
      377       377    3                get_addr();
      378       378    3                get_index();
      379       379    3                get_ptr_reg();
      380       380    3                ro_set_register_status (assoc_reg);
      381       381    3                break;
      382       382    3               case ZANG:
      383       383    3                get_assoc_reg();
      384       384    3                get_addr();
      385       385    3                get_index();
      386       386    3                get_ptr_reg();
      387       387    3                if (register_opt_flag != 0 && last_opt == opt && last_assoc_reg == ass
                               oc_reg &&
      388       388    3                   last_reloc_addr == 0 && last_addr_offset == 511 &&
      389       389    3                   reloc_addr == 0 && curr_instr.index == last_index && skip_count ==
                               0) {
      390       390    4                   temp_offset = s_s_table[procsec].curr_offset -1;
      391       391    4                   oper_value = curr_instr.addr_offset;
      392       392    4                   reloc_temp_type = CONS_TYPE;
      393       393    4                   XUO$RELOC(&procsec,&temp_offset, &reloc_temp_type,
      394       394    4                       &oper_value, &fourteen_val, &zero_val, &seventeen_val);
      395       395    4                   instr_flag = 0;
      396       396    4                   drop_instr();
      397       397    4                   break;
      398       398    4                }
      399       399    3                ro_modify_register_status (assoc_reg);
      400       400    3                break;
      401       401    3
      402       402    3               case ZLCG:
      403       403    3                get_assoc_reg();
      404       404    3                get_addr();
      405       405    3                get_index();
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=12 
      406       406    3                get_ptr_reg();
      407       407    3                ro_modify_register_status (assoc_reg);
      408       408    3                break;
      409       409    3
      410       410    3               case ZGLS:
      411       411    3               case ZADX:
      412       412    3               case ZEAX:
      413       413    3               case ZEAG:
      414       414    3               case ZNEG:
      415       415    3               case ZERG:
      416       416    3               case ZORG:
      417       417    3               case ZGLR:
      418       418    3               case ZGRS:
      419       419    3               case ZGRL:
      420       420    3                get_assoc_reg();
      421       421    3                get_addr();
      422       422    3                get_index();
      423       423    3                get_ptr_reg();
      424       424    3                if (register_opt_flag != 0 && (opt == ZGLS || opt == ZGRS || opt == ZG
                               LR || opt == ZGRL)
      425       425    3                   && curr_instr.addr_offset == 0
      426       426    3                   && curr_instr.have_index == 0
      427       427    3                   && curr_instr.have_ptr_reg == 0 && reloc_addr == 0 && skip_count ==
                                0) {
      428       428    4                   instr_flag = 0;
      429       429    4                   drop_instr();
      430       430    4                   break; }
      431       431    3                ro_modify_register_status (assoc_reg);
      432       432    3                break;
      433       433    3               case ZADLG:
      434       434    3               case ZSBLG:
      435       435    3               case ZADG:
      436       436    3               case ZSBG:
      437       437    3                get_assoc_reg();
      438       438    3                get_addr();
      439       439    3                get_index();
      440       440    3                get_ptr_reg();
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=13 
      441       441    3                if (register_opt_flag != 0 && last_opt == ZLDG && last_assoc_reg
      442       442    3                   == assoc_reg && last_index == ZDL ) {
      443       443    4                   if (cons_arith_chk(opt) != 0) {
      444       444    5                      break; }
      445       445    4                }
      446       446    3                if (register_opt_flag != 0 && opt == ZADLG && last_opt == ZEPPR
      447       447    3                    && curr_instr.addr_offset == 0
      448       448    3                    && curr_instr.index == ZDL
      449       449    3                    && curr_instr.have_ptr_reg == 0 && reloc_addr == 0 &&
      450       450    3                    skip_count == 0) {
      451       451    4                   instr_flag = 0;
      452       452    4                   drop_instr();
      453       453    4                   break; }
      454       454    3
      455       455    3                ro_modify_register_status (assoc_reg);
      456       456    3                break;
      457       457    3
      458       458    3               case ZASG:
      459       459    3               case ZASX:
      460       460    3               case ZERSG:
      461       461    3                get_assoc_reg();
      462       462    3                get_addr();
      463       463    3                get_index();
      464       464    3                get_ptr_reg();
      465       465    3                ro_reg_status_change (assoc_reg);
      466       466    3                break;
      467       467    3
      468       468    3               case ZSTP7:
      469       469    3                get_addr();
      470       470    3                get_index();
      471       471    3                get_ptr_reg();
      472       472    3                ro_reg_status_change (ZP7);
      473       473    3                ro_set_register_status (ZP7);
      474       474    3                break;
      475       475    3               case ZSTP0:
      476       476    3                get_addr();
      477       477    3                get_index();
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=14 
      478       478    3                get_ptr_reg();
      479       479    3                ro_reg_status_change (ZP0);
      480       480    3                ro_set_register_status (ZP0);
      481       481    3                break;
      482       482    3
      483       483    3               case ZLDX7:
      484       484    3                get_addr();
      485       485    3                get_index();
      486       486    3                get_ptr_reg();
      487       487    3                ro_chk_set_register_status (ZX7);
      488       488    3                break;
      489       489    3               case ZLDQ:
      490       490    3                get_addr();
      491       491    3                get_index();
      492       492    3                get_ptr_reg();
      493       493    3                ro_chk_set_register_status (ZQ);
      494       494    3                break;
      495       495    3
      496       496    3               case ZLDA:
      497       497    3                get_addr();
      498       498    3                get_index();
      499       499    3                get_ptr_reg();
      500       500    3                ro_chk_set_register_status (ZA);
      501       501    3                break;
      502       502    3               case ZSBLQ:
      503       503    3               case ZADLQ:
      504       504    3               case ZANQ:
      505       505    3               case ZSBQ:
      506       506    3                get_addr();
      507       507    3                get_index();
      508       508    3                get_ptr_reg();
      509       509    3                ro_modify_register_status (ZQ);
      510       510    3                break;
      511       511    3               case ZSBLA:
      512       512    3                get_addr();
      513       513    3                get_index();
      514       514    3                get_ptr_reg();
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=15 
      515       515    3                ro_modify_register_status (ZA);
      516       516    3                break;
      517       517    3
      518       518    3               case ZLDAQ:
      519       519    3               case ZSTAQ:
      520       520    3                get_addr();
      521       521    3                get_index();
      522       522    3                get_ptr_reg();
      523       523    3                ro_modify_register_status (ZA);
      524       524    3                ro_modify_register_status (ZQ);
      525       525    3                break;
      526       526    3
      527       527    3               case ZLDX0:
      528       528    3                get_addr();
      529       529    3                get_index();
      530       530    3                get_ptr_reg();
      531       531    3                ro_chk_set_register_status (ZX0);
      532       532    3                break;
      533       533    3
      534       534    3               case ZEPPR7:
      535       535    3                get_addr();
      536       536    3                get_index();
      537       537    3                get_ptr_reg();
      538       538    3                ro_set_register_status (ZP7);
      539       539    3                break;
      540       540    3               case ZEPPR1:
      541       541    3                get_addr();
      542       542    3                get_index();
      543       543    3                get_ptr_reg();
      544       544    3                ro_set_register_status (ZP1);
      545       545    3                break;
      546       546    3
      547       547    3               case ZEPPR0:
      548       548    3                get_addr();
      549       549    3                get_index();
      550       550    3                get_ptr_reg();
      551       551    3                ro_set_register_status (ZP0);
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=16 
      552       552    3                break;
      553       553    3
      554       554    3               case ZLDP0:
      555       555    3                get_addr();
      556       556    3                get_index();
      557       557    3                get_ptr_reg();
      558       558    3                ro_chk_set_register_status (ZP0);
      559       559    3                break;
      560       560    3
      561       561    3               case ZMPY:
      562       562    3               case ZDIV:
      563       563    3                get_addr();
      564       564    3                get_index();
      565       565    3                get_ptr_reg();
      566       566    3                if (register_opt_flag != 0 && (last_opt == ZLDQ || (last_opt
      567       567    3                   == ZLDG && last_assoc_reg == ZQ)) && last_index == ZDL) {
      568       568    4                   if (cons_arith_chk(opt) != 0) {
      569       569    5                      break; }
      570       570    4                }
      571       571    3                ro_modify_register_status(ZA);
      572       572    3                ro_modify_register_status(ZQ);
      573       573    3                break;
      574       574    3
      575       575    3               case ZQLS:
      576       576    3               case ZQRS:
      577       577    3               case ZARL:
      578       578    3               case ZLLS:
      579       579    3               case ZLRS:
      580       580    3               case ZLRL:
      581       581    3               case ZDVF:
      582       582    3                get_addr();
      583       583    3                get_index();
      584       584    3                get_ptr_reg();
      585       585    3                ro_modify_register_status (ZA);
      586       586    3                ro_modify_register_status (ZQ);
      587       587    3                ;
      588       588    3                break;
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=17 
      589       589    3               case ZA9BD:
      590       590    3                get_addr();
      591       591    3                get_index();
      592       592    3                get_ptr_reg();
      593       593    3                ro_modify_register_status(curr_instr.ptr_reg);
      594       594    3                break;
      595       595    3               case ZA9BDX7:
      596       596    3                get_ptr_reg();
      597       597    3                curr_instr.have_index = 1;
      598       598    3                curr_instr.index = ZX7;
      599       599    3                ro_modify_register_status(curr_instr.ptr_reg);
      600       600    3                break;
      601       601    3
      602       602    3               case ZA9BDX7P7:
      603       603    3                curr_instr.have_index = 1;
      604       604    3                curr_instr.index = ZX7;
      605       605    3                curr_instr.have_ptr_reg = 1;
      606       606    3                curr_instr.ptr_reg = ZP7;
      607       607    3                get_eol();
      608       608    3                ro_modify_register_status(ZP7);
      609       609    3                break;
      610       610    3
      611       611    3               case ZBLT:
      612       612    3                i = get_value();
      613       613    3                opt = blt_tbl[i-1];
      614       614    3                c = getc(infile);
      615       615    3                get_single_op_code(opt);
      616       616    3                goto jump_again;
      617       617    3               case ZBLE:
      618       618    3                i = get_value();
      619       619    3                opt = ble_tbl[i-1];
      620       620    3                c = getc(infile);
      621       621    3                get_single_op_code(opt);
      622       622    3                goto jump_again;
      623       623    3               case ZBEQ:
      624       624    3                i = get_value();
      625       625    3                opt = beq_tbl[i-1];
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=18 
      626       626    3                c = getc(infile);
      627       627    3                get_single_op_code(opt);
      628       628    3                goto jump_again;
      629       629    3               case ZBNE:
      630       630    3                i = get_value();
      631       631    3                opt = bne_tbl[i-1];
      632       632    3                c = getc(infile);
      633       633    3                get_single_op_code(opt);
      634       634    3                goto jump_again;
      635       635    3               case ZBGE:
      636       636    3                i = get_value();
      637       637    3                opt = bge_tbl[i-1];
      638       638    3                c = getc(infile);
      639       639    3                get_single_op_code(opt);
      640       640    3                goto jump_again;
      641       641    3               case ZBGT:
      642       642    3                i = get_value();
      643       643    3                opt = bgt_tbl[i-1];
      644       644    3                c = getc(infile);
      645       645    3                get_single_op_code(opt);
      646       646    3                goto jump_again;
      647       647    3
      648       648    3               case ZTMI:
      649       649    3               case ZTMOZ:
      650       650    3               case ZTEQ:
      651       651    3               case ZTZE:
      652       652    3               case ZTNC:
      653       653    3               case ZTRC:
      654       654    3               case ZTNE:
      655       655    3               case ZTTN:
      656       656    3               case ZTTF:
      657       657    3               case ZTPL:
      658       658    3               case ZTPNZ:
      659       659    3               case ZTRA:
      660       660    3                get_addr();
      661       661    3                get_index();
      662       662    3                get_ptr_reg();
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=19 
      663       663    3                ro_chk_ic_jump ();
      664       664    3                break;
      665       665    3
      666       666    3               case ZTNCOEQ:
      667       667    3                get_addr();
      668       668    3                get_index();
      669       669    3                get_ptr_reg();
      670       670    3                if (curr_instr.index == ZIC ) {
      671       671    4                  curr_instr.addr_offset++; }
      672       672    3                temp_fwd_flag = forward_ref_flag;
      673       673    3                build_instruction();
      674       674    3                forward_ref_flag = temp_fwd_flag;
      675       675    3                curr_instr.op_code = CTZE >> 8;
      676       676    3                if (curr_instr.index == ZIC ) {
      677       677    4                  curr_instr.addr_offset--; }
      678       678    3                ro_chk_ic_jump();
      679       679    3                break;
      680       680    3
      681       681    3               case ZTRCANE:
      682       682    3                curr_instr.index = ZIC;
      683       683    3                curr_instr.have_index = 1;
      684       684    3                curr_instr.addr_offset = 2;
      685       685    3                build_instruction();
      686       686    3                init_instr();
      687       687    3                instr_flag = 1;
      688       688    3                instruct_type = INST_STD;
      689       689    3                curr_instr.op_code = CTNZ >> 8;
      690       690    3                get_addr();
      691       691    3                get_index();
      692       692    3                get_ptr_reg();
      693       693    3                ro_chk_ic_jump();
      694       694    3                break;
      695       695    3
      696       696    3               case ZFST:
      697       697    3               case ZDFST:
      698       698    3                get_addr();
      699       699    3                get_index();
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=20 
      700       700    3                get_ptr_reg();
      701       701    3                ro_set_register_status(ZEREG);
      702       702    3                break;
      703       703    3
      704       704    3               case ZLDE:
      705       705    3               case ZFDI:
      706       706    3               case ZUFA:
      707       707    3               case ZDFDI:
      708       708    3                get_addr();
      709       709    3                get_index();
      710       710    3                get_ptr_reg();
      711       711    3                ro_modify_register_status (ZEREG);
      712       712    3
      713       713    3               case ZFAD:
      714       714    3               case ZFSB:
      715       715    3               case ZFMP:
      716       716    3               case ZFDV:
      717       717    3               case ZDFAD:
      718       718    3               case ZDFSB:
      719       719    3               case ZDFMP:
      720       720    3               case ZDFDV:
      721       721    3                get_addr();
      722       722    3                get_index();
      723       723    3                get_ptr_reg();
      724       724    3                if (register_opt_flag != 0 && (last_opt == ZFLD ||
      725       725    3                  last_opt == ZDFLD) && last_float_cons != 0 && float_cons != 0) {
      726       726    4                    if (float_cons_arith_chk (opt) != 0) {
      727       727    5                      break; } }
      728       728    3                ro_modify_register_status (ZEREG);
      729       729    3
      730       730    3                break;
      731       731    3
      732       732    3               case ZFLD:
      733       733    3               case ZDFLD:
      734       734    3                get_addr();
      735       735    3                get_index();
      736       736    3                get_ptr_reg();
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=21 
      737       737    3                last_float_cons = float_cons;
      738       738    3                last_cons_value = curr_cons_value;
      739       739    3                ro_chk_set_register_status (ZEREG);
      740       740    3                break;
      741       741    3
      742       742    3               case ZSTX:
      743       743    3                get_assoc_reg();
      744       744    3                get_addr();
      745       745    3                get_index();
      746       746    3                get_ptr_reg();
      747       747    3                ro_reg_status_change (assoc_reg);
      748       748    3                ro_set_register_status (assoc_reg);
      749       749    3                break;
      750       750    3
      751       751    3               case ZSTP:
      752       752    3                get_assoc_reg();
      753       753    3                get_addr();
      754       754    3                get_index();
      755       755    3                get_ptr_reg();
      756       756    3                ro_reg_status_change (assoc_reg);
      757       757    3                ro_set_register_status (assoc_reg);
      758       758    3                break;
      759       759    3
      760       760    3               case ZLDX:
      761       761    3               case ZLDP:
      762       762    3                get_assoc_reg();
      763       763    3                get_addr();
      764       764    3                get_index();
      765       765    3                get_ptr_reg();
      766       766    3                ro_chk_set_register_status (assoc_reg);
      767       767    3                break;
      768       768    3               case ZSTZ:
      769       769    3               case ZAOS:
      770       770    3                get_addr();
      771       771    3                get_index();
      772       772    3                get_ptr_reg();
      773       773    3                ro_chk_loc_mod ();
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=22 
      774       774    3                break;
      775       775    3
      776       776    3               case ZCMPG:
      777       777    3                get_assoc_reg();
      778       778    3                get_addr();
      779       779    3                get_index();
      780       780    3                get_ptr_reg();
      781       781    3                if (register_opt_flag !=0 && curr_index == ZDL && curr_instr.addr_offs
                               et == 0 && skip_count == 0) {
      782       782    4                  if(last_opt == ZLDG && assoc_reg == last_assoc_reg) {instr_flag=0;dr
                               op_instr();break;}
      783       783    4                  if((assoc_reg == ZQ && last_opt == ZLDQ) || (assoc_reg == ZA
      784       784    4                    && last_opt == ZLDA)) { instr_flag = 0;drop_instr();  break;}
      785       785    4                  if(assoc_reg ==last_assoc_reg && (last_opt == ZANG ||
      786       786    4                     last_opt == ZADG || last_opt == ZSBG)) {
      787       787    5                     instr_flag = 0; drop_instr(); break; }
      788       788    4                  if(assoc_reg == ZA && (last_opt == ZFNEG || last_opt == ZNEG)) {
      789       789    5                     instr_flag = 0; drop_instr(); break; }
      790       790    4                }
      791       791    3
      792       792    3                break;
      793       793    3
      794       794    3
      795       795    3               case ZCMPQ:
      796       796    3                get_addr();
      797       797    3                get_index();
      798       798    3                get_ptr_reg();
      799       799    3                if (register_opt_flag != 0 && curr_index == ZDL && curr_instr.addr_off
                               set == 0 && skip_count == 0) {
      800       800    4                  if ((last_opt == ZLDQ) || (last_opt == ZLDG &&
      801       801    4                    last_assoc_reg == ZQ)) {instr_flag=0; drop_instr();break;}
      802       802    4                  if (last_opt == ZMPY || last_opt == ZDIV || (last_opt == ZADG &&
      803       803    4                    last_assoc_reg == ZADG) || (last_opt == ZSBG && last_assoc_reg ==
                               ZQ)) {
      804       804    5                      instr_flag = 0;
      805       805    5                      drop_instr();
      806       806    5                      break; }
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=23 
      807       807    4                  if (last_opt == ZNEG) {
      808       808    5                     instr_flag = 0; drop_instr(); break; }
      809       809    4                }
      810       810    3
      811       811    3                break;
      812       812    3
      813       813    3               case ZCMPA:
      814       814    3                get_addr();
      815       815    3                get_index();
      816       816    3                get_ptr_reg();
      817       817    3                if (register_opt_flag != 0 && curr_index == ZDL && curr_instr.addr_off
                               set == 0 && skip_count == 0) {
      818       818    4                  if ((last_opt == ZLDA) || (last_opt == ZLDG &&
      819       819    4                    last_assoc_reg == ZA)) {instr_flag=0;drop_instr(); break;}
      820       820    4                  if (last_opt == ZMPY || last_opt == ZDIV || (last_opt == ZADG &&
      821       821    4                    last_assoc_reg == ZADG) || (last_opt == ZSBG && last_assoc_reg ==
                               ZA))  {
      822       822    5                      instr_flag = 0;
      823       823    5                      drop_instr();
      824       824    5                      break; }
      825       825    4                  if (last_opt == ZNEG || last_opt == ZFNEG) {
      826       826    5                     instr_flag = 0; drop_instr(); break; }
      827       827    4                }
      828       828    3
      829       829    3                break;
      830       830    3
      831       831    3               case ZCIF:
      832       832    3               case ZCUF:
      833       833    3                instr_flag = 1;
      834       834    3                instruct_type = INST_STD;
      835       835    3                conv_i_to_f(FLOAT_LIT);
      836       836    3                reloc_addr = reloc_type;
      837       837    3                ro_set_register_status(ZEREG);
      838       838    3                break;
      839       839    3
      840       840    3               case ZCID:
      841       841    3               case ZCUD:
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=24 
      842       842    3                instr_flag = 1;
      843       843    3                instruct_type = INST_STD;
      844       844    3                conv_i_to_f(DFLOAT_LIT);
      845       845    3                reloc_addr = reloc_type;
      846       846    3                ro_set_register_status(ZEREG);
      847       847    3                break;
      848       848    3
      849       849    3               case ZCFI:
      850       850    3               case ZCDI:
      851       851    3               case ZCFU:
      852       852    3               case ZCDU:
      853       853    3                instr_flag = 1;
      854       854    3                instruct_type = INST_STD;
      855       855    3                conv_f_to_i(INT_LIT);
      856       856    3                if (opt == ZCDU ||  opt == ZCFU) {
      857       857    4                   curr_instr.op_code = CLDQ >> 8; }
      858       858    3                reloc_addr = reloc_type;
      859       859    3                break;
      860       860    3
      861       861    3               case ZFCMP:
      862       862    3               case ZDFCMP:
      863       863    3                get_addr();
      864       864    3                get_index();
      865       865    3                get_ptr_reg();
      866       866    3                if (register_opt_flag != 0 && curr_index == ZDL && curr_instr.addr_off
                               set == 0 && skip_count == 0) {
      867       867    4                  if (last_opt == ZFLD || last_opt == ZDFLD ||
      868       868    4                      last_opt == ZFAD || last_opt == ZDFAD ||
      869       869    4                      last_opt == ZFSB || last_opt == ZDFSB ||
      870       870    4                      last_opt == ZFMP || last_opt == ZDFMP ||
      871       871    4                      last_opt == ZFDV || last_opt == ZDFDV ||
      872       872    4                      last_opt == ZFDI || last_opt == ZDFDI ) {
      873       873    5                        instr_flag = 0;
      874       874    5                        drop_instr();
      875       875    5                        break;  }
      876       876    4                }
      877       877    3
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=25 
      878       878    3                break;
      879       879    3
      880       880    3
      881       881    3               case ZTSX0:
      882       882    3               case ZTSX1:
      883       883    3               case ZTSX2:
      884       884    3                ref_name_flag = -1;
      885       885    3                get_addr();
      886       886    3                ref_name_flag = 0;
      887       887    3                get_index();
      888       888    3                get_ptr_reg();
      889       889    3                ro_reset_register_status ();
      890       890    3                break;
      891       891    3
      892       892    3               case ZSZN:
      893       893    3               case ZFSZN:
      894       894    3                get_addr();
      895       895    3                get_index();
      896       896    3                get_ptr_reg();
      897       897    3                break;
      898       898    3
      899       899    3               case ZNOP:
      900       900    3                get_eol() ;
      901       901    3
      902       902    3                break;
      903       903    3
      904       904    3        /*     case ZNEGL:     for the present time, we dont use this. */
      905       905    3               case ZFNEG:
      906       906    3                get_eol();
      907       907    3                ro_modify_register_status (ZEREG);
      908       908    3
      909       909    3                break;
      910       910    3
      911       911    3               case ZMLR:
      912       912    3               case ZMLRX:
      913       913    3               case ZMLR4:
      914       914    3               case ZMLR8:
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=26 
      915       915    3               case ZMLR1:
      916       916    3               case ZMRL:
      917       917    3               case ZMRLX:
      918       918    3               case ZCMPC:
      919       919    3               case ZCMPCX:
      920       920    3               case ZSCM:
      921       921    3               case ZSCMX:
      922       922    3               case ZSCMR:
      923       923    3               case ZSCMRX:
      924       924    3                mlr_process();
      925       925    3                ro_mlr_modify_regs();
      926       926    3                break;
      927       927    3
      928       928    3               case ZUSE:
      929       929    3                check_if_first_call();
      930       930    3                set_use();
      931       931    3
      932       932    3                break;
      933       933    3
      934       934    3               case ZFIL:
      935       935    3                set_file_name();
      936       936    3
      937       937    3                break;
      938       938    3
      939       939    3               case ZLIN:
      940       940    3                set_line();
      941       941    3
      942       942    3                break;
      943       943    3
      944       944    3               case ZLNI:
      945       945    3                incr_line();
      946       946    3
      947       947    3                break;
      948       948    3
      949       949    3               case ZHALF: /* build zero m,n pseudo op. */
      950       950    3                zero_pseudo();
      951       951    3
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=27 
      952       952    3                break;
      953       953    3
      954       954    3               case ZOCT:
      955       955    3                set_constant(OCT_LIT);
      956       956    3
      957       957    3                break;
      958       958    3               case ZDEC:
      959       959    3                set_constant(DEC_LIT);
      960       960    3
      961       961    3                break;
      962       962    3
      963       963    3        /*     case ZHEX:      NOT USED CURRENTLY<<<<<<<<<<<<<<<<<<<<<<
      964       964    3                set_constant(HEX_LIT);
      965       965    3
      966       966    3                break;       >>>>>>>>>>>>>>>>>> */
      967       967    3
      968       968    3               case ZFLOAT:
      969       969    3                set_constant(FLOAT_LIT);
      970       970    3
      971       971    3                break;
      972       972    3
      973       973    3               case ZDFLOAT:
      974       974    3                set_constant(DFLOAT_LIT);
      975       975    3
      976       976    3                break;
      977       977    3
      978       978    3               case ZPTR:
      979       979    3               if ( c != ' ') {
      980       980    4                 ungetc(c,infile); }
      981       981    3                set_ptr_to_id();
      982       982    3
      983       983    3                break;
      984       984    3
      985       985    3               case ZEPTR:
      986       986    3                set_ptr_to_function();
      987       987    3                break;
      988       988    3
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=28 
      989       989    3
      990       990    3               case ZNULL:
      991       991    3                set_stmt_lbl(DEFED);
      992       992    3                if ((last_opt >= ZLDG && last_opt <= ZMRLX ) || last_opt == ZLIN || la
                               st_opt == ZLNI) {
      993       993    4                  ro_reset_register_status() ; }
      994       994    3                break;
      995       995    3
      996       996    3               case ZEQU:
      997       997    3                set_equ_pseudo();
      998       998    3
      999       999    3                break;
     1000      1000    3
     1001      1001    3               case ZBSS:
     1002      1002    3                set_static_storage();
     1003      1003    3
     1004      1004    3                break;
     1005      1005    3
     1006      1006    3               case ZDEF:
     1007      1007    3                set_entry_def();
     1008      1008    3
     1009      1009    3                break;
     1010      1010    3
     1011      1011    3               case ZDUMMY:
     1012      1012    3                get_eol();
     1013      1013    3
     1014      1014    3                break;
     1015      1015    3
     1016      1016    3               case ZERROR:
     1017      1017    3                get_eol();
     1018      1018    3
     1019      1019    3                break;
     1020      1020    3
     1021      1021    3               case PS_STMT_OP:
     1022      1022    3                set_debug_stmt_info();
     1023      1023    3
     1024      1024    3                break;
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=29 
     1025      1025    3
     1026      1026    3               case PS_LBL_OP:
     1027      1027    3                set_label_info();
     1028      1028    3
     1029      1029    3                break;
     1030      1030    3
     1031      1031    3               case PS_VAR_OP:
     1032      1032    3                check_if_first_call();
     1033      1033    3                set_var_info();
     1034      1034    3
     1035      1035    3                break;
     1036      1036    3
     1037      1037    3               case PS_BLK_OP:
     1038      1038    3                set_debug_blk_info();
     1039      1039    3                if (first_blk_flag != 0) {
     1040      1040    4                  first_blk_flag = 0;
     1041      1041    4                  ro_reset_register_status();
     1042      1042    4                   }
     1043      1043    3                break;
     1044      1044    3
     1045      1045    3               case PS_FUN_OP:
     1046      1046    3                check_for_static_terminate();
     1047      1047    3                if (static_terminate_flag !=0) {
     1048      1048    4                  static_terminate_flag = 0; }
     1049      1049    3                set_debug_fun_info();
     1050      1050    3
     1051      1051    3                break;
     1052      1052    3
     1053      1053    3               case PS_CTLN_OP:
     1054      1054    3                set_static_name();
     1055      1055    3
     1056      1056    3                break;
     1057      1057    3
     1058      1058    3               case PS_SFUN_OP:
     1059      1059    3                note_static_functions();
     1060      1060    3
     1061      1061    3                break;
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=30 
     1062      1062    3
     1063      1063    3               case PS_RFUN_OP:
     1064      1064    3                check_if_first_call();
     1065      1065    3                set_ref_function();
     1066      1066    3                break;
     1067      1067    3
     1068      1068    3               default:
     1069      1069    3                printf (" unknown opt value = %d, \n", opt);
     1070      1070    3                break;
     1071      1071    3
     1072      1072    3
     1073      1073    3              }     /* end of the switch statement on operator type.   */
     1074      1074    2
     1075      1075    2              if (last_opt == ZTSX1) { last_opt = 0; }
     1076      1076    2              else {
     1077      1077    3                if (opt_float_cons == 0 && int_constant_flag == 0) {
     1078      1078    4                   last_opt = opt; }
     1079      1079    3              }
     1080      1080    2              last_assoc_reg = assoc_reg ;
     1081      1081    2              last_reloc_addr = reloc_addr;
     1082      1082    2              last_addr_offset = curr_instr.addr_offset;
     1083      1083    2              last_index = curr_instr.index;
     1084      1084    2              last_float_cons = float_cons;
     1085      1085    2
     1086      1086    2              if (skip_count > 0 && (opt >= ZLDG && opt <= ZSCMRX) ) { /* checking for
                                n,ic local jump.. */
     1087      1087    3                 if (opt >= ZMLR4 && opt <= ZSCMRX) {
     1088      1088    4                  skip_count -= 3; }
     1089      1089    3                else {
     1090      1090    4                  skip_count--; }
     1091      1091    3                if (skip_count < 0) skip_count = 0 ;
     1092      1092    3                if (skip_count == 0) {
     1093      1093    4                   ro_reset_register_status(); }
     1094      1094    3
     1095      1095    3               }
     1096      1096    2              if (instr_flag != 0) {
     1097      1097    3                build_instruction();
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=31 
     1098      1098    3               }
     1099      1099    2
     1100      1100    2              }   /*  end of the endless for loop that is driving the
     1101      1101    1                      o.u. generation.
     1102      1102    1                  */
     1103      1103    1         }    /*   end of the function 'program_gen'   */
     1104      1104
     1105      1105             /*    The following are the error handling routines used for errors
     1106      1106                   in o.u. generation or in generating LO listings.
     1107      1107             */
     1108      1108             void errhandler (code)
     1109      1109                   int code ;  {
"zb6$driver:c.:ZBC3TSI", line 1109: (warning) identifier "code" is not used
     1110      1110    1              XBI_SET_ERRNO();
     1111      1111    1              exit(errno);
     1112      1112    1              }
     1113      1113
     1114      1114             void loerrhandler (code)
     1115      1115                   int code; {
"zb6$driver:c.:ZBC3TSI", line 1115: (warning) identifier "code" is not used
     1116      1116    1              XBI_SET_ERRNO();
     1117      1117    1              perror("An error occured generating the LO listing");
     1118      1118    1              exit(8);
     1119      1119    1              }
     1120      1120
     1121      1121             /*    This is the routine to get and return to UNGMAP the source
     1122      1122                   for the next source line as well as the line number that
     1123      1123                   is being output. There are no inputs, and there are two
     1124      1124                   outputs: the line number (integer), the source line (character
     1125      1125                   string). These values are returned as the first two arguments
     1126      1126                   that are passed to this routines from UNGMAP.
     1127      1127                   (currently this is just a stub.... need to know where to get
     1128      1128                   the source for the line numbers of the C functions that are
     1129      1129                   being compiled....)
     1130      1130             */
     1131      1131
     1132      1132             void lostmthandler2 (line_no, stmt_text)
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=32 
     1133      1133                   int *line_no ;
     1134      1134                   char *stmt_text ;  {   /* start of the function. */
     1135      1135    1              *line_no = 0;  /* the dummy code we may really want here is
     1136      1136    1                                to increment the line number by one on each
     1137      1137    1                                entry to this routine.  */
     1138      1138    1              strcpy (stmt_text, blnk_buff);
     1139      1139    1              return;
     1140      1140    1              }
     1141      1141             /*
     1142      1142                   The following is the routine to generate the object unit
     1143      1143                   records for the instructions that are generated for the
     1144      1144                   C program that is being compiled.
     1145      1145                   The instructions have been setup into the appropriate instruction
     1146      1146                   structures when we get to this function. It should be a straight
     1147      1147                   forward building of the instruction and a relocatable o.u.
     1148      1148                   record if necessary.
     1149      1149             */
     1150      1150
     1151      1151             build_instruction() {
     1152      1152    1
     1153      1153    1        int reloc_temp_type;
     1154      1154    1        int curr_offset, temp_reloc_type, temp_start_bit, temp_end_bit ;
     1155      1155    1        int frd_ref ;
     1156      1156    1
     1157      1157    1              int_constant_flag = 0;
     1158      1158    1
     1159      1159    1              setup_instruction();  /* make sure insturction is ready to
     1160      1160    1                                       output to xuo routine... */
     1161      1161    1              switch (instruct_type) {  /* do case on type of the insruction. */
     1162      1162    2                 case INST_STD :  /* normal one word instruction.   */
     1163      1163    2                 case INST_PTR :  /* normal one wrd instruct with ptr reg mod */
     1164      1164    2              /*  The instruction (absolute portion of the instruction)
     1165      1165    2                  is output then we check to see if a relocation is needed
     1166      1166    2                  for the address field of the instruction.
     1167      1167    2              */
     1168      1168    2                    curr_offset = s_s_table[procsec].curr_offset ;
     1169      1169    2                    s_s_table[procsec].curr_offset++;
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=33 
     1170      1170    2
     1171      1171    2                    if (debug_print_flag != 0) {
     1172      1172    3                       printf (" opt = %d, section= %d, offset= %d, instruct= %12o,\n"
                               ,
     1173      1173    3                         opt, procsec, curr_offset, instruction);
     1174      1174    3                      printf ("reloc_addr= %d, operand_type= %d, operand= %d, \n",
     1175      1175    3                          reloc_addr, reloc_type, reloc_section);
     1176      1176    3                    }
     1177      1177    2
     1178      1178    2                    XUO$PRGM (&procsec, &curr_offset, &instruction);
     1179      1179    2
     1180      1180    2                    if (reloc_addr != 0) {
     1181      1181    3                       temp_reloc_type = reloc[reloc_type].type;
     1182      1182    3                       temp_start_bit = reloc[reloc_directive].start_bit;
     1183      1183    3                       temp_end_bit = reloc[reloc_directive].end_bit;
     1184      1184    3
     1185      1185    3                       if (forward_ref_flag == 0) {
     1186      1186    4                       XUO$RELOC (&procsec, &curr_offset, &reloc_type,
     1187      1187    4                           &reloc_section, &temp_reloc_type, &temp_start_bit,
     1188      1188    4                           &temp_end_bit );
     1189      1189    4                       } else {  /* relocation forward ref generation. */
     1190      1190    4                         if (reloc_type == FREF_LBL ) {
     1191      1191    5                           reloc_temp_type = SECTION_TYPE;
     1192      1192    5                           temp_reloc_type = reloc[reloc_temp_type].type;
     1193      1193    5                           XUO$RELOC(&procsec, &curr_offset, &reloc_temp_type,
     1194      1194    5                               &procsec, &temp_reloc_type, &temp_start_bit,
     1195      1195    5                               &temp_end_bit);
     1196      1196    5                            }
     1197      1197    4                         forward_ref_flag = 0;
     1198      1198    4                         frd_ref = FREF_TYPE;
     1199      1199    4                         XUO$RELOC (&procsec, &curr_offset, &frd_ref,
     1200      1200    4                           &reloc_section, &reloc_type, &temp_start_bit,
     1201      1201    4                           &temp_end_bit);  }
     1202      1202    3                       }  /* if end */
     1203      1203    2                    break;
     1204      1204    2                 case INST_EIS :  /* EIS instructions are processed here. */
     1205      1205    2                    /*  two operands are associated with the eis instruction. */
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=34 
     1206      1206    2                    curr_offset = s_s_table[procsec].curr_offset;
     1207      1207    2                    s_s_table[procsec].curr_offset++;
     1208      1208    2
     1209      1209    2                    XUO$PRGM (&procsec, &curr_offset, &instruction);
     1210      1210    2              /*  eis instruction will always be an absolute instruction. */
     1211      1211    2
     1212      1212    2              /*  at this point we generate the two operand words associated
     1213      1213    2                  with the eis instrcution.
     1214      1214    2              */
     1215      1215    2                    eis_oper_three = 0;
     1216      1216    2                    curr_offset = s_s_table[procsec].curr_offset;
     1217      1217    2                    s_s_table[procsec].curr_offset++;
     1218      1218    2                    eis_operand(m1_operand, curr_offset);
     1219      1219    2
     1220      1220    2                    curr_offset = s_s_table[procsec].curr_offset;
     1221      1221    2                    s_s_table[procsec].curr_offset++;
     1222      1222    2                    eis_operand(m2_operand, curr_offset);
     1223      1223    2                    switch (opt) {
     1224      1224    3                     case ZSCM:
     1225      1225    3                     case ZSCMX:
     1226      1226    3                     case ZSCMR:
     1227      1227    3                     case ZSCMRX:
     1228      1228    3                      eis_oper_three = 1;
     1229      1229    3                      eis_operand (m3_operand, s_s_table[procsec].curr_offset++);
     1230      1230    3                      eis_oper_three = 0;
     1231      1231    3                    }
     1232      1232    2
     1233      1233    2                    break;
     1234      1234    2                    }  /*  end of switch statement. */
     1235      1235    1                 return ;
     1236      1236    1                }   /* end of the build subroutine.  */
     1237      1237
     1238      1238             /*i*
     1239      1239                   name: eis_operand
     1240      1240                   purpose: This routine builds the operands for eis instructions.
     1241      1241                   That is, it makes the calls to the xuo routines to put the
     1242      1242                   operands for the eis instructions into the o.u.
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=35 
     1243      1243             */
     1244      1244             eis_operand (operand, curr_offset)
     1245      1245                   int curr_offset ;
     1246      1246                   struct eis_oper operand;  {
     1247      1247    1              struct eis_desc eis_code ;
     1248      1248    1              struct eis_desc_ptr eis_code_ptr ;
     1249      1249    1              int reloc_oper, temp_start_bit, temp_end_bit ;
     1250      1250    1
     1251      1251    1              eis_code = set_eis_desc;
     1252      1252    1              eis_code_ptr = set_eis_desc_ptr;
     1253      1253    1
     1254      1254    1              if (operand.have_ptr == 0) {
     1255      1255    2                 eis_code.word_offset = operand.word_offset;
     1256      1256    2                 eis_code.byte_offset = operand.byte_offset;
     1257      1257    2                 eis_code.len = operand.len;
     1258      1258    2
     1259      1259    2                 XUO$PRGM (&procsec, &curr_offset, &eis_code);
     1260      1260    2                 }
     1261      1261    1              else {
     1262      1262    2                 eis_code_ptr.ptr = operand.ptr_reg;
     1263      1263    2                 eis_code_ptr.word_offset = operand.word_offset;
     1264      1264    2                 eis_code_ptr.byte_offset = operand.byte_offset;
     1265      1265    2                 eis_code_ptr.len = operand.len;
     1266      1266    2                 if (eis_oper_three != 0) {
     1267      1267    3                    eis_code_ptr.len =  0100; }
     1268      1268    2
     1269      1269    2                 XUO$PRGM (&procsec, &curr_offset, &eis_code_ptr);
     1270      1270    2                 }
     1271      1271    1
     1272      1272    1              if (operand.have_reloc_addr != 0) {
     1273      1273    2              /* Have relocation address to generate. Will always be an
     1274      1274    2                 18 bit field to be added to the address field of the
     1275      1275    2                 eis operand.
     1276      1276    2              */
     1277      1277    2                 reloc_oper = reloc[operand.reloc_type].type;
     1278      1278    2                 temp_start_bit = 0;
     1279      1279    2                 temp_end_bit = 17;
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=36 
     1280      1280    2
     1281      1281    2                 XUO$RELOC (&procsec, &curr_offset, &operand.reloc_type, &operand.relo
                               c_section,
     1282      1282    2                         &reloc_oper, &temp_start_bit, &temp_end_bit );
     1283      1283    2
     1284      1284    2                 }
     1285      1285    1
     1286      1286    1              return;
     1287      1287    1              }    /* end of eis_operand function.  */
     1288      1288
     1289      1289             /*i*
     1290      1290                   name: setup_instruction
     1291      1291                   purpose: This routine consolidates the parts of the instruction
     1292      1292                   into a sigle word. That is, the output is a 36 bit instruction
     1293      1293                   for the level 66 type of hardware.
     1294      1294             */
     1295      1295             setup_instruction() {
     1296      1296    1
     1297      1297    1              switch (opt ) {
     1298      1298    2                 case ZMLR:
     1299      1299    2                 case ZMLR1:
     1300      1300    2                 case ZMLR4:
     1301      1301    2                 case ZMLR8:
     1302      1302    2                 case ZMLRX:
     1303      1303    2                 case ZSCM:
     1304      1304    2                 case ZSCMX:
     1305      1305    2                 case ZSCMR:
     1306      1306    2                 case ZSCMRX:
     1307      1307    2                 case ZMRL:
     1308      1308    2                 case ZMRLX:
     1309      1309    2                 case ZCMPC:
     1310      1310    2                 case ZCMPCX:
     1311      1311    2
     1312      1312    2                    break ;
     1313      1313    2                 default:    /* all the other instructions..   */
     1314      1314    2                    instruction.ss2 = instr_set ;
     1315      1315    2
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=37 
     1316      1316    2                    instruction.ss2.op_code = curr_instr.op_code ;
     1317      1317    2                    if (curr_instr.have_ptr_reg != 0) {
     1318      1318    3                       instruction.ss1.pr_reg = curr_instr.ptr_reg ;
     1319      1319    3                       instruction.ss1.y_field = curr_instr.addr_offset;
     1320      1320    3                       instruction.ss1.pr = 1 ;
     1321      1321    3                       }
     1322      1322    2                    else {
     1323      1323    3                       instruction.ss2.y_field = curr_instr.addr_offset ;
     1324      1324    3                       }
     1325      1325    2                    if (curr_instr.have_index) {
     1326      1326    3                       instruction.ss2.tag_td = curr_instr.index ;
     1327      1327    3                       }
     1328      1328    2                    break ;
     1329      1329    2                 }  /* end of switch on op_codes    */
     1330      1330    1
     1331      1331    1                 return;
     1332      1332    1              }  /* end of the setup_instruction function...   */
     1333      1333
     1334      1334
     1335      1335             /*i*
     1336      1336                   name: init_instr
     1337      1337                   purpose: This routine initializes the structures and flags used
     1338      1338                   in the generation of instructions to be built into the o.u.s.
     1339      1339             */
     1340      1340             init_instr () {
     1341      1341    1
     1342      1342    1
     1343      1343    1
     1344      1344    1              float_cons = 0;
     1345      1345    1              curr_cons_value = 0.0;
     1346      1346    1              opt_float_cons = 0;
     1347      1347    1              int_constant_flag = 0;
     1348      1348    1              opt = 0;
     1349      1349    1              curr_index = 0;
     1350      1350    1              curr_ptr = 0;
     1351      1351    1              assoc_reg = 0;
     1352      1352    1              eol_flag = 0;
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=38 
     1353      1353    1              eof_flag = 0;
     1354      1354    1              reloc_addr = 0;
     1355      1355    1              reloc_type = 0;
     1356      1356    1              reloc_section =0;
     1357      1357    1              instruct_type = 0;
     1358      1358    1              instruction.ss2 = instr_set;
     1359      1359    1              curr_instr = curr_i_set;
     1360      1360    1              m1_operand = m1_set;
     1361      1361    1              m2_operand = m2_set;
     1362      1362    1              m3_operand = m3_set;
     1363      1363    1              instr_flag = 0;
     1364      1364    1              forward_ref_flag = 0; /* set forward ref flag to zero. */
     1365      1365    1              return ;
     1366      1366    1              }  /* end of the init_instr funxtion..  */
     1367      1367
     1368      1368
     1369      1369             /*I*
     1370      1370                   NAME: get_stmt_type
     1371      1371                   PURPOSE: This routine gets the address for the instruction
     1372      1372                   that is currently being processed. The are three different
     1373      1373                   cases: simple inter offset value; a liternal integer constant
     1374      1374                   (=n form); and a symbolic name (external id) that may or maynot
     1375      1375                   be appended with an integer expression.
     1376      1376
     1377      1377             */
     1378      1378             get_stmt_type() {
     1379      1379    1
     1380      1380    1        int op_code ;
     1381      1381    1
     1382      1382    1              op_code = get_value();
     1383      1383    1              if ((op_code >= ZLDG && op_code < ZMLR) || (op_code >= ZBLT && op_code <
                               = ZBGT)) {
     1384      1384    2                instr_flag = 1;
     1385      1385    2                instruct_type = INST_STD; }
     1386      1386    1              else {
     1387      1387    2                if (op_code >= ZMLR4 && op_code <= ZSCMRX ) {
     1388      1388    3                   instr_flag = 1;
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=39 
     1389      1389    3                   instruct_type = INST_EIS ;
     1390      1390    3                  }
     1391      1391    2                }  /* end of else on the if stmt. */
     1392      1392    1              get_single_op_code(op_code);
     1393      1393    1              /* get the actual instruction op codes for all
     1394      1394    1                 instructions that do not have mutiple instructions
     1395      1395    1                 associated with them - that is, registers to be loaded
     1396      1396    1                 into or stored from; like LDA and LDQ , etc.
     1397      1397    1              */
     1398      1398    1              return (op_code);
     1399      1399    1              }
     1400      1400
     1401      1401             /*i*
     1402      1402                   name: get_value
     1403      1403                   purpose: This routine gets the characters off the input
     1404      1404                   stream and builds an integer value from it. The value is
     1405      1405                   assumed to be unsigned.
     1406      1406             */
     1407      1407             get_value() {
     1408      1408    1        int val ;
     1409      1409    1        int neg_flag ;
     1410      1410    1              neg_flag = 0;
     1411      1411    1
     1412      1412    1              while ((c=getc(infile)) == ' ' || c == '+' ) {
     1413      1413    2                  }
     1414      1414    1
     1415      1415    1              if (c == '-') {
     1416      1416    2                c = getc(infile);
     1417      1417    2
     1418      1418    2                neg_flag = -1; }
     1419      1419    1              if (c == EOF || c == '\n') {
     1420      1420    2                if (c == EOF) {
     1421      1421    3                  eof_flag = -1;
     1422      1422    3                 }
     1423      1423    2                eol_flag = -1 ;
     1424      1424    2                return(0) ;
     1425      1425    2                }
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=40 
     1426      1426    1              if (c == ',') return(0);
     1427      1427    1
     1428      1428    1              val = c - '0'  ;
     1429      1429    1              while ((c=getc(infile)) != ' ' && c != ',' && c != '\n' ) {
     1430      1430    2
     1431      1431    2                val *= 10 ;
     1432      1432    2                val += (c - '0' ); }
     1433      1433    1
     1434      1434    1
     1435      1435    1              if ( c == '\n' ) {
     1436      1436    2                eol_flag = -1;
     1437      1437    2               }
     1438      1438    1
     1439      1439    1              if (neg_flag != 0) {
     1440      1440    2                val = -val; }
     1441      1441    1              return (val);
     1442      1442    1              }
     1443      1443
     1444      1444             /*i*
     1445      1445                   name: get_assoc_reg
     1446      1446                   purpose: This routine associates the instruction register
     1447      1447                   with the instruction.
     1448      1448             */
     1449      1449             get_assoc_reg() {
     1450      1450    1        int val;
     1451      1451    1
     1452      1452    1              if (eol_flag != 0) return;
     1453      1453    1
     1454      1454    1              val = get_value();
     1455      1455    1              assoc_reg = val;
     1456      1456    1              if (val == 0) return;
     1457      1457    1
     1458      1458    1              if (c == ',') {
     1459      1459    2                 c = getc(infile); /* skip over the comma separator. */
     1460      1460    2
     1461      1461    2               }
     1462      1462    1
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=41 
     1463      1463    1
     1464      1464    1              switch (opt) {
     1465      1465    2                case ZLDG:
     1466      1466    2                case ZLDX:
     1467      1467    2                case ZLDP:
     1468      1468    2                  curr_instr.op_code = load_ops[val] >> 8;
     1469      1469    2                  break;
     1470      1470    2                case ZSTG:
     1471      1471    2                case ZSTX:
     1472      1472    2                case ZSTP:
     1473      1473    2                  curr_instr.op_code = store_ops[val] >> 8;
     1474      1474    2                  break;
     1475      1475    2                case ZLCG:
     1476      1476    2                  curr_instr.op_code = load_comp_ops[val] >> 8;
     1477      1477    2                  break;
     1478      1478    2                case ZEPPR:
     1479      1479    2                  curr_instr.op_code = eppr_ops[val] >> 8;
     1480      1480    2                  break;
     1481      1481    2               case ZLXL:
     1482      1482    2                 curr_instr.op_code = ld_xr_ops[val] >> 8;
     1483      1483    2                 break;
     1484      1484    2               case ZSXL:
     1485      1485    2                 curr_instr.op_code = st_xr_ops[val] >> 8;
     1486      1486    2                 break;
     1487      1487    2               case ZEAX:
     1488      1488    2               case ZEAG:
     1489      1489    2                  curr_instr.op_code = ea_ops[val] >> 8;
     1490      1490    2                 break;
     1491      1491    2                case ZADLG:
     1492      1492    2                  curr_instr.op_code = addlog_ops[val] >> 8;
     1493      1493    2                  break;
     1494      1494    2                case ZSBLG:
     1495      1495    2                  curr_instr.op_code = sublog_ops[val] >> 8;
     1496      1496    2                  break;
     1497      1497    2               case ZADX:
     1498      1498    2                case ZADG:
     1499      1499    2                  curr_instr.op_code = add_ops[val] >> 8;
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=42 
     1500      1500    2                  break;
     1501      1501    2                case ZSBG:
     1502      1502    2                  curr_instr.op_code = sub_ops[val] >> 8;
     1503      1503    2                  break;
     1504      1504    2                case ZCMPG:
     1505      1505    2                  curr_instr.op_code = comp_ops[val] >> 8;
     1506      1506    2                  break;
     1507      1507    2                case ZASG:
     1508      1508    2                case ZASX:
     1509      1509    2                  curr_instr.op_code = add_storage_ops[val] >> 8;
     1510      1510    2                  break;
     1511      1511    2                case ZANG:
     1512      1512    2                  curr_instr.op_code = and_ops[val] >> 8;
     1513      1513    2                  break;
     1514      1514    2                case ZORG:
     1515      1515    2                  curr_instr.op_code = or_ops[val] >> 8;
     1516      1516    2                  break;
     1517      1517    2                case ZERG:
     1518      1518    2                  curr_instr.op_code = eor_ops[val] >> 8;
     1519      1519    2                  break;
     1520      1520    2                case ZERSG:
     1521      1521    2                  curr_instr.op_code = eor_store_ops[val] >> 8;
     1522      1522    2                  break;
     1523      1523    2                case ZGLS:
     1524      1524    2                  curr_instr.op_code = left_shift_ops[val] >> 8;
     1525      1525    2                  break;
     1526      1526    2                case ZGLR:
     1527      1527    2                  curr_instr.op_code = left_rotate_ops[val] >> 8;
     1528      1528    2                  break;
     1529      1529    2                case ZGRS:
     1530      1530    2                  curr_instr.op_code = right_shift_ops[val] >> 8;
     1531      1531    2                  break;
     1532      1532    2                case ZGRL:
     1533      1533    2                  curr_instr.op_code = right_logical_ops[val] >> 8;
     1534      1534    2                  break;
     1535      1535    2              }    /*  end of the switch on op_code.   */
     1536      1536    1
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=43 
     1537      1537    1              return ;
     1538      1538    1              }  /* end of the get assoc_reg function. */
     1539      1539
     1540      1540             /*i*
     1541      1541                   name: get_single_op_code
     1542      1542                   purpose: This routines gets the actual instruction for op
     1543      1543                   codes taht do not use registers as part of the instruction
     1544      1544                   per se.
     1545      1545             */
     1546      1546             get_single_op_code(op_code) int op_code; {
     1547      1547    1
     1548      1548    1        int temp_code ;
     1549      1549    1
     1550      1550    1              temp_code = 0;
     1551      1551    1              switch (op_code) {   /* case on the pasted in op_code. */
     1552      1552    2                case ZAOS:
     1553      1553    2                  temp_code = CAOS;
     1554      1554    2                  break;
     1555      1555    2                case ZNEG:
     1556      1556    2                  temp_code = CNEG;
     1557      1557    2                  break;
     1558      1558    2                case ZLDQ:
     1559      1559    2                  temp_code = CLDQ;
     1560      1560    2                  break;
     1561      1561    2                case ZLDA:
     1562      1562    2                  temp_code = CLDA;
     1563      1563    2                  break;
     1564      1564    2                case ZSTZ:
     1565      1565    2                  temp_code = CSTZ;
     1566      1566    2                  break;
     1567      1567    2                case ZLDX0:
     1568      1568    2                  temp_code = load_ops[8];
     1569      1569    2                  break;
     1570      1570    2                case ZLDX7:
     1571      1571    2                  temp_code = CLDX7;
     1572      1572    2                  break;
     1573      1573    2                case ZEPPR0:
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=44 
     1574      1574    2                  temp_code = CEPPR0;
     1575      1575    2                  break;
     1576      1576    2                case ZEPPR1:
     1577      1577    2                  temp_code = CEPPR1;
     1578      1578    2                  break;
     1579      1579    2                case ZEPPR7:
     1580      1580    2                  temp_code = CEPPR7;
     1581      1581    2                  break;
     1582      1582    2                case ZLDP0:
     1583      1583    2                  temp_code = CLDP0;
     1584      1584    2                  break;
     1585      1585    2                case ZSTP0:
     1586      1586    2                  temp_code = CSTP0;
     1587      1587    2                  break;
     1588      1588    2                case ZSTP7:
     1589      1589    2                  temp_code = CSTP7;
     1590      1590    2                  break;
     1591      1591    2                case ZMPY:
     1592      1592    2                  temp_code = CMPY;
     1593      1593    2                  break;
     1594      1594    2                case ZDIV:
     1595      1595    2                  temp_code = CDIV;
     1596      1596    2                  break;
     1597      1597    2                case ZARL:
     1598      1598    2                  temp_code = CARL;
     1599      1599    2                  break;
     1600      1600    2                case ZLLS:
     1601      1601    2                  temp_code = CLLS;
     1602      1602    2                  break;
     1603      1603    2                case ZSTI:
     1604      1604    2                  temp_code = CSTI;
     1605      1605    2                  break;
     1606      1606    2                case ZLRS:
     1607      1607    2                  temp_code = CLRS;
     1608      1608    2                  break;
     1609      1609    2                case ZSTQ:
     1610      1610    2                  temp_code = CSTQ;
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=45 
     1611      1611    2                  break;
     1612      1612    2                case ZQLS:
     1613      1613    2                  temp_code = CQLS;
     1614      1614    2                  break;
     1615      1615    2                case ZQRS:
     1616      1616    2                  temp_code = CQRS;
     1617      1617    2                  break;
     1618      1618    2                case ZANQ:
     1619      1619    2                  temp_code = CANQ;
     1620      1620    2                  break;
     1621      1621    2                case ZSBLQ:
     1622      1622    2                  temp_code = CSBLQ;
     1623      1623    2                  break;
     1624      1624    2                case ZSBLA:
     1625      1625    2                  temp_code = CSBLA;
     1626      1626    2                  break;
     1627      1627    2                case ZADLQ:
     1628      1628    2                  temp_code = CADLQ;
     1629      1629    2                  break;
     1630      1630    2                case ZFLD:
     1631      1631    2                  temp_code = CFLD;
     1632      1632    2                  break;
     1633      1633    2                case ZFST:
     1634      1634    2                  temp_code = CFST;
     1635      1635    2                  break;
     1636      1636    2                case ZFAD:
     1637      1637    2                  temp_code = CFAD;
     1638      1638    2                  break;
     1639      1639    2                case ZFMP:
     1640      1640    2                  temp_code = CFMP;
     1641      1641    2                  break;
     1642      1642    2                case ZFDV:
     1643      1643    2                  temp_code = CFDV;
     1644      1644    2                  break;
     1645      1645    2                case ZFDI:
     1646      1646    2                  temp_code = CFDI;
     1647      1647    2                  break;
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=46 
     1648      1648    2                case ZLDE:
     1649      1649    2                  temp_code = CLDE;
     1650      1650    2                  break;
     1651      1651    2                case ZLRL:
     1652      1652    2                  temp_code = CLRL;
     1653      1653    2                  break;
     1654      1654    2                case ZCMPA:
     1655      1655    2                  temp_code = CCMPA;
     1656      1656    2                  break;
     1657      1657    2                case ZCMPQ:
     1658      1658    2                  temp_code = CCMPQ;
     1659      1659    2                  break;
     1660      1660    2                case ZDVF:
     1661      1661    2                  temp_code = CDVF;
     1662      1662    2                  break;
     1663      1663    2                case ZFSZN:
     1664      1664    2                  temp_code = CFSZN;
     1665      1665    2                  break;
     1666      1666    2                case ZSZN:
     1667      1667    2                  temp_code = CSZN;
     1668      1668    2                  break;
     1669      1669    2                case ZFCMP:
     1670      1670    2                  temp_code = CFCMP;
     1671      1671    2                  break;
     1672      1672    2                case ZDFCMP:
     1673      1673    2                  temp_code = CDFCMP;
     1674      1674    2                  break;
     1675      1675    2                case ZUFA:
     1676      1676    2                  temp_code = CUFA;
     1677      1677    2                  break;
     1678      1678    2                case ZLDAQ:
     1679      1679    2                  temp_code = CLDAQ;
     1680      1680    2                  break;
     1681      1681    2                case ZSTAQ:
     1682      1682    2                  temp_code = CSTAQ;
     1683      1683    2                  break;
     1684      1684    2                case ZFSB:
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=47 
     1685      1685    2                  temp_code = CFSB;
     1686      1686    2                  break;
     1687      1687    2                case ZDFLD:
     1688      1688    2                  temp_code = CDFLD;
     1689      1689    2                  break;
     1690      1690    2                case ZDFST:
     1691      1691    2                  temp_code = CDFST;
     1692      1692    2                  break;
     1693      1693    2                case ZDFAD:
     1694      1694    2                  temp_code = CDFAD;
     1695      1695    2                  break;
     1696      1696    2                case ZDFSB:
     1697      1697    2                  temp_code = CDFSB;
     1698      1698    2                  break;
     1699      1699    2                case ZDFMP:
     1700      1700    2                  temp_code = CDFMP;
     1701      1701    2                  break;
     1702      1702    2                case ZDFDV:
     1703      1703    2                  temp_code = CDFDV;
     1704      1704    2                  break;
     1705      1705    2                case ZDFDI:
     1706      1706    2                  temp_code = CDFDI;
     1707      1707    2                  break;
     1708      1708    2        /*      case ZNEGL: >>>>>>>>>>>>>> not used currently <<<<<<<<<<
     1709      1709    2                  temp_code = CNEGL;
     1710      1710    2                  break;  >>>>>>>>>>> not used currently <<<<<<<<<<<<<< */
     1711      1711    2                case ZFNEG:
     1712      1712    2                  temp_code = CFNEG;
     1713      1713    2                  break;
     1714      1714    2                case ZA9BD:
     1715      1715    2                case ZA9BDX7:
     1716      1716    2                case ZA9BDX7P7:
     1717      1717    2                  temp_code = CA9BD;
     1718      1718    2                  break;
     1719      1719    2                case ZNOP:
     1720      1720    2                  temp_code = CNOP;
     1721      1721    2                  break;
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=48 
     1722      1722    2                case ZTSX0:
     1723      1723    2                  temp_code = CTSX0;
     1724      1724    2                  break;
     1725      1725    2                case ZTSX1:
     1726      1726    2                  temp_code = CTSX1;
     1727      1727    2                  break;
     1728      1728    2                case ZTSX2:
     1729      1729    2                  temp_code = CTSX2;
     1730      1730    2                  break;
     1731      1731    2                case ZTMI:
     1732      1732    2                  temp_code = CTMI;
     1733      1733    2                  break;
     1734      1734    2                case ZTMOZ:
     1735      1735    2                  temp_code = CTMOZ;
     1736      1736    2                  break;
     1737      1737    2                case ZTEQ:
     1738      1738    2                case ZTZE:
     1739      1739    2                  temp_code = CTZE;
     1740      1740    2                  break;
     1741      1741    2                case ZTNE:
     1742      1742    2                  temp_code = CTNZ;
     1743      1743    2                  break;
     1744      1744    2                case ZTNC:
     1745      1745    2                  temp_code = CTNC;
     1746      1746    2                  break;
     1747      1747    2                case ZTRC:
     1748      1748    2                  temp_code = CTRC;
     1749      1749    2                  break;
     1750      1750    2                case ZTPL:
     1751      1751    2                  temp_code = CTPL;
     1752      1752    2                  break;
     1753      1753    2                case ZTPNZ:
     1754      1754    2                  temp_code = CTPNZ;
     1755      1755    2                  break;
     1756      1756    2                case ZTTN:
     1757      1757    2                  temp_code = CTTN;
     1758      1758    2                  break;
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=49 
     1759      1759    2                case ZTTF:
     1760      1760    2                  temp_code = CTTF;
     1761      1761    2                  break;
     1762      1762    2                case ZTRA:
     1763      1763    2                  temp_code = CTRA;
     1764      1764    2                  break;
     1765      1765    2                case ZTNCOEQ:
     1766      1766    2                  temp_code = CTNC;
     1767      1767    2                  break;
     1768      1768    2                case ZTRCANE:
     1769      1769    2                  temp_code = CTNC;
     1770      1770    2                  break;
     1771      1771    2               }   /* end of the do case on the opt codes... */
     1772      1772    1              if (temp_code == 0) return;
     1773      1773    1              curr_instr.op_code = temp_code >> 8;
     1774      1774    1              return ;
     1775      1775    1              }   /*  end of the routine to set the instruction op code form
     1776      1776                           pseude op code passed in from the code generator.. */
     1777      1777
     1778      1778             /*i*
     1779      1779                   name: get_addr
     1780      1780                   purpose: This routine get the address field for the instruction.
     1781      1781                   Relocation and literal field addressing is also handled (at
     1782      1782                   a high level ) in this routine, also constant values for the
     1783      1783                   address field have to be handled. The cnstant case will always
     1784      1784                   be integer values.
     1785      1785
     1786      1786             */
     1787      1787             get_addr()  {
     1788      1788    1
     1789      1789    1        int neg_flag;
     1790      1790    1        unsigned val;
     1791      1791    1
     1792      1792    1              if (eol_flag != 0)  return;
     1793      1793    1
     1794      1794    1              if (c == ' ') {
     1795      1795    2                while ((c=getc(infile)) == ' ') { };
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=50 
     1796      1796    2
     1797      1797    2               }
     1798      1798    1
     1799      1799    1              if (c  == '=' ) {     /* this is the literal
     1800      1800    2                   addressing case. The value must e added to the constant
     1801      1801    2                   pool and the offset in the constant section is returned
     1802      1802    2                   from the called conatant table handling routine along
     1803      1803    2                   with the section number  and type of relocatable item.
     1804      1804    2                   */
     1805      1805    2
     1806      1806    2                c = getc(infile);
     1807      1807    2                if (c == '@') {  /* have literal pointer to label. */
     1808      1808    3                  ungetc(c,infile);
     1809      1809    3                  curr_instr.addr_offset = set_pointer();
     1810      1810    3                  reloc_addr = reloc_type;
     1811      1811    3                  return; }
     1812      1812    2                /* check for pointer to function as address for this operand. */
     1813      1813    2                if (c == '&')  {
     1814      1814    3                  curr_instr.addr_offset = set_ptr_to_function();
     1815      1815    3                  reloc_addr = reloc_type ;
     1816      1816    3                  return; }
     1817      1817    2
     1818      1818    2                if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || c == '_' ) {
     1819      1819    3                    /* have reference to gbl id - get pointer to the liter
     1820      1820    3                       id. */
     1821      1821    3                  ungetc(c,infile);
     1822      1822    3                  curr_instr.addr_offset = set_addr_pointer();
     1823      1823    3                  reloc_addr = reloc_type;
     1824      1824    3                  return; }
     1825      1825    2
     1826      1826    2                curr_instr.addr_offset = set_constant(INT_LIT);
     1827      1827    2
     1828      1828    2                   /* add_to_cons_tbl builds entry in the cons pool table
     1829      1829    2                      and also build o.u. item int the constant section.
     1830      1830    2                      sets:  reloc_type; reloc_section.
     1831      1831    2                   */
     1832      1832    2                reloc_addr = reloc_type ;
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=51 
     1833      1833    2                return ;
     1834      1834    2                  }  /* end of if '=' check. */
     1835      1835    1
     1836      1836    1              if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z' ) || c == '_') {
     1837      1837    2                 /*  we have a symbolic symtbl table entry at this point. */
     1838      1838    2                 /*  That is, it is either a symref or ent ref name.
     1839      1839    2                     The symbols should have been setup on prior processing
     1840      1840    2                     of PS_VAR and PS_FUN pseudo ops.
     1841      1841    2                         reloc_type and reloc_section, will be set for
     1842      1842    2                     relocatable address processing.
     1843      1843    2                 */
     1844      1844    2
     1845      1845    2                 ungetc (c,infile); /* put first char back in stream. */
     1846      1846    2                 curr_instr.addr_offset = get_symbol_adr();
     1847      1847    2                 reloc_addr = reloc_type ;
     1848      1848    2                 check_for_more(); /* check for cons offset addend.. */
     1849      1849    2
     1850      1850    2                 return ;
     1851      1851    2                 }    /*  end of if test for symbolic ids..  */
     1852      1852    1
     1853      1853    1              if (c == '@') {
     1854      1854    2                 /*  have compiler generated label entity at this point.
     1855      1855    2                     (could have been user label entity that has been converted
     1856      1856    2                      to compiler generated entity.  */
     1857      1857    2                 /* label should have been generated previously, and already
     1858      1858    2                    be entered into the label table with the appropreate
     1859      1859    2                    information.
     1860      1860    2                 */
     1861      1861    2
     1862      1862    2                 ungetc (c,infile); /* put first char back in stream. */
     1863      1863    2                 curr_instr.addr_offset = set_stmt_lbl(REFED);
     1864      1864    2                 if (c == '+' ) {
     1865      1865    3                    check_for_more(); }
     1866      1866    2                 reloc_addr = reloc_type ;
     1867      1867    2                 return;
     1868      1868    2                 }  /* end of if for symbol addr check.. */
     1869      1869    1
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=52 
     1870      1870    1              neg_flag = 0;
     1871      1871    1              if (c == ','  || c == '\n')  return ;
     1872      1872    1
     1873      1873    1              if (c == '-') {
     1874      1874    2                neg_flag = -1;
     1875      1875    2                c=getc(infile);  }
     1876      1876    1
     1877      1877    1              if (c < '0' || c > '9' )  {
     1878      1878    2                 printf ( " bad address field character %c, \n",c);
     1879      1879    2                 }
     1880      1880    1
     1881      1881    1              val = c - '0'  ;
     1882      1882    1              while ((c=getc(infile)) != ' ' && c != ',' && c != '\n') {
     1883      1883    2
     1884      1884    2                val *= 10;
     1885      1885    2                val += (c - '0' );
     1886      1886    2                }    /* get the value for the character string. */
     1887      1887    1
     1888      1888    1
     1889      1889    1              if (neg_flag != 0) {
     1890      1890    2                 val = -val; }
     1891      1891    1
     1892      1892    1              curr_instr.addr_offset = val ;
     1893      1893    1              if (c == '\n') eol_flag = -1;
     1894      1894    1
     1895      1895    1              return ;
     1896      1896    1               }  /* end of the get addr routine..    */
     1897      1897
     1898      1898             /*i*
     1899      1899                   name: get_index
     1900      1900                   purpose: This routine gets the index value for the the current
     1901      1901                   instruction that is being processed. The pseudo index value is
     1902      1902                   the same as the actual index value for instruction generation.
     1903      1903             */
     1904      1904             get_index()  {
     1905      1905    1        int index1 ;
     1906      1906    1
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=53 
     1907      1907    1              if (eol_flag != 0) return ;
     1908      1908    1
     1909      1909    1              index1 = 0;
     1910      1910    1              index1 = get_value();
     1911      1911    1
     1912      1912    1              curr_index = index1;
     1913      1913    1              if (index1 == 0) return;
     1914      1914    1              curr_instr.have_index = 1;
     1915      1915    1              curr_instr.index = index1;
     1916      1916    1
     1917      1917    1              return ;
     1918      1918    1              }
     1919      1919
     1920      1920             /*i*
     1921      1921                   name: get_ptr_reg
     1922      1922                   purpose: This routine checks for pointer register usage in
     1923      1923                   the current instruction that is being processed.
     1924      1924             */
     1925      1925             get_ptr_reg()  {
     1926      1926    1        int ptr_reg ;
     1927      1927    1
     1928      1928    1              if (eol_flag !=0) return;
     1929      1929    1              ptr_reg = 0;
     1930      1930    1              ptr_reg = get_value();
     1931      1931    1
     1932      1932    1              curr_ptr = ptr_reg;
     1933      1933    1              if (ptr_reg == 0) return;
     1934      1934    1              curr_instr.have_ptr_reg = 1;
     1935      1935    1              curr_instr.ptr_reg = ptr_reg ;
     1936      1936    1              if (instruct_type != INST_EIS) {
     1937      1937    2                instruct_type = INST_PTR ; }
     1938      1938    1
     1939      1939    1              return;
     1940      1940    1              }  /* end of the get_ptr_reg function.   */
     1941      1941
     1942      1942             /*I*
     1943      1943                   NAME: mlr_process
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=54 
     1944      1944                   PURPOSE: This routine does the setting up of the mlr
     1945      1945                   instructions for o.u. generation. Its primary purpose
     1946      1946                   is to process the operand data and build the abs value
     1947      1947                   for the mlr instruction and to then generate information
     1948      1948                   for the operands (descriptor words) that are associated
     1949      1949                   with the mlr instruction.
     1950      1950             */
     1951      1951             mlr_process()  {
     1952      1952    1        int ii;
     1953      1953    1        int move_inst;
     1954      1954    1        int fill_byte;
     1955      1955    1
     1956      1956    1              instruct_type = INST_EIS ;
     1957      1957    1              move_inst = 0;
     1958      1958    1
     1959      1959    1              switch (opt) {  /* set the correct opt code. */
     1960      1960    2               case ZMLR:
     1961      1961    2               case ZMLRX:
     1962      1962    2               case ZMLR1:
     1963      1963    2               case ZMLR4:
     1964      1964    2               case ZMLR8:
     1965      1965    2                instruction.ss3.op_code = CMLR >> 8;
     1966      1966    2                move_inst = 1;
     1967      1967    2                break;
     1968      1968    2               case ZMRL:
     1969      1969    2               case ZMRLX:
     1970      1970    2                instruction.ss3.op_code = CMRL >> 8;
     1971      1971    2                move_inst = 1;
     1972      1972    2                break;
     1973      1973    2               case ZCMPC:
     1974      1974    2               case ZCMPCX:
     1975      1975    2                instruction.ss3.op_code = CCMPC >> 8;
     1976      1976    2                break;
     1977      1977    2               case ZSCM:
     1978      1978    2               case ZSCMX:
     1979      1979    2                instruction.ss3.op_code = CSCM >> 8;
     1980      1980    2                break;
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=55 
     1981      1981    2               case ZSCMR:
     1982      1982    2               case ZSCMRX:
     1983      1983    2                instruction.ss3.op_code = CSCMR >> 8;
     1984      1984    2                break;
     1985      1985    2              }  /* this is the end of setting the op code for the eis instrc. */
     1986      1986    1              instruction.ss3.fill = 0 ;
     1987      1987    1              switch (opt) {  /* case on type of mlr instruct. */
     1988      1988    2               case ZMLR:   /* general mlr case */
     1989      1989    2               case ZMLRX:  /* gneral mlr case with index regs. */
     1990      1990    2               case ZMRL:
     1991      1991    2               case ZMRLX:
     1992      1992    2               case ZCMPC:
     1993      1993    2               case ZCMPCX:
     1994      1994    2               case ZSCM:
     1995      1995    2               case ZSCMX:
     1996      1996    2               case ZSCMR:
     1997      1997    2               case ZSCMRX:
     1998      1998    2                get_eis_addr(&m1_operand);
     1999      1999    2                get_eis_byte(&m1_operand);
     2000      2000    2                get_index() ;
     2001      2001    2                instruction.ss3.ref1_reg = curr_instr.index ;
     2002      2002    2                get_eis_ptr_reg(&m1_operand);
     2003      2003    2                if (m1_operand.have_ptr != 0) {
     2004      2004    3                   instruction.ss3.ref1_pr = 1; }
     2005      2005    2                if (opt == ZMLRX || opt == ZMRLX || opt == ZCMPCX || opt == ZSCMX ||
     2006      2006    2                     opt == ZSCMRX ) {
     2007      2007    3                  instruction.ss3.ref1_rl = 1; }
     2008      2008    2                get_eis_len(&m1_operand);
     2009      2009    2                if (m1_operand.len == 0) { instruction.ss3.ref1_rl = 0; }
     2010      2010    2                c = getc(infile); /* skip over the comma that is the current
     2011      2011    2                                 character at this point. */
     2012      2012    2          /*   process the second operand at this point for the mlr instruction. */
     2013      2013    2                get_eis_addr(&m2_operand);
     2014      2014    2                get_eis_byte(&m2_operand);
     2015      2015    2                curr_instr.index = 0;
     2016      2016    2                curr_instr.have_index = 0;
     2017      2017    2                get_index() ;
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=56 
     2018      2018    2                instruction.ss3.ref2_reg = curr_instr.index ;
     2019      2019    2                curr_instr.have_ptr_reg = 0;  /* make sure inited to zero */
     2020      2020    2                get_eis_ptr_reg(&m2_operand);
     2021      2021    2                if (m2_operand.have_ptr != 0) {
     2022      2022    3                   instruction.ss3.ref2_pr = 1; }
     2023      2023    2                if (opt == ZMLRX || opt == ZMRLX || opt == ZCMPCX || opt == ZSCMX || o
                               pt == ZSCMRX) {
     2024      2024    3                  instruction.ss3.ref2_rl = 1; }
     2025      2025    2                get_eis_len(&m2_operand);
     2026      2026    2                if (m2_operand.len == 0) { instruction.ss3.ref2_rl = 0; }
     2027      2027    2                switch (opt) {
     2028      2028    3                 case ZSCM:
     2029      2029    3                 case ZSCMX:
     2030      2030    3                 case ZSCMR:
     2031      2031    3                 case ZSCMRX:
     2032      2032    3                  c = getc(infile); /* skip over the comma at this point. */
     2033      2033    3                  get_eis_addr(&m3_operand);
     2034      2034    3                  get_index();
     2035      2035    3                  curr_instr.have_ptr_reg = 0; /* make sure init to zero */
     2036      2036    3                  get_eis_ptr_reg(&m3_operand);
     2037      2037    3                  break;
     2038      2038    3                }
     2039      2039    2                break;
     2040      2040    2               case ZMLR4:
     2041      2041    2               case ZMLR8: /* these are special case moves of word values. */
     2042      2042    2                get_eis_addr(&m1_operand);
     2043      2043    2                get_index() ;
     2044      2044    2                instruction.ss3.ref1_reg = curr_instr.index ;
     2045      2045    2                get_eis_ptr_reg(&m1_operand);
     2046      2046    2                if (m1_operand.have_ptr != 0) {
     2047      2047    3                   instruction.ss3.ref1_pr = 1; }
     2048      2048    2                if (opt == ZMLR4 ) {
     2049      2049    3                  m1_operand.len = 4;
     2050      2050    3                  m2_operand.len = 4;
     2051      2051    3                } else {
     2052      2052    3                  m1_operand.len = 8;
     2053      2053    3                  m2_operand.len = 8;
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=57 
     2054      2054    3                 }
     2055      2055    2          /*   process the second operand at this point for the mlr instruction. */
     2056      2056    2                c = getc(infile);
     2057      2057    2                get_eis_addr(&m2_operand);
     2058      2058    2                curr_instr.index = 0;
     2059      2059    2                get_index() ;
     2060      2060    2                instruction.ss3.ref2_reg = curr_instr.index ;
     2061      2061    2                curr_instr.have_ptr_reg = 0;  /* make sure inited to zero */
     2062      2062    2                get_eis_ptr_reg(&m2_operand);
     2063      2063    2                if (m2_operand.have_ptr != 0) {
     2064      2064    3                   instruction.ss3.ref2_pr = 1; }
     2065      2065    2                break;
     2066      2066    2               case ZMLR1:   /* special case for the handling of single
     2067      2067    2                                characters to character storage. */
     2068      2068    2
     2069      2069    2                get_eis_addr(&m1_operand);
     2070      2070    2                get_eis_byte(&m1_operand);
     2071      2071    2                get_index() ;
     2072      2072    2                instruction.ss3.ref1_reg = curr_instr.index ;
     2073      2073    2                get_eis_ptr_reg(&m1_operand);
     2074      2074    2                if (m1_operand.have_ptr != 0) {
     2075      2075    3                   instruction.ss3.ref1_pr = 1; }
     2076      2076    2                ii = get_value();
     2077      2077    2                m1_operand.len = ii;
     2078      2078    2                if (m1_operand.len == 0) { instruction.ss3.ref1_rl = 0; }
     2079      2079    2          /*   process the second operand at this point for the mlr instruction. */
     2080      2080    2                c = getc(infile); /* skip over the ',' */
     2081      2081    2                get_eis_addr(&m2_operand);
     2082      2082    2                m2_operand.byte_offset = 3;
     2083      2083    2                curr_instr.index = 0;
     2084      2084    2                get_index() ;
     2085      2085    2                instruction.ss3.ref2_reg = curr_instr.index ;
     2086      2086    2                curr_instr.have_ptr_reg = 0;  /* make sure inited to zero */
     2087      2087    2                get_eis_ptr_reg(&m2_operand);
     2088      2088    2                if (m2_operand.have_ptr != 0) {
     2089      2089    3                   instruction.ss3.ref2_pr = 1; }
     2090      2090    2                m2_operand.len = 1;
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=58 
     2091      2091    2                break;
     2092      2092    2
     2093      2093    2               }  /* end of the switch statement processing on mlr */
     2094      2094    1              if (move_inst != 0 && c == ',' ) { /* have fill byte on the inst.*/
     2095      2095    2                fill_byte = get_value();
     2096      2096    2                instruction.ss3.fill = fill_byte;
     2097      2097    2              }
     2098      2098    1
     2099      2099    1              return;
     2100      2100    1              }  /* end of the mlr_process function. */
     2101      2101
     2102      2102             /*i*
     2103      2103                   name: get_eis_addr
     2104      2104                   purpose: Routine gets the address value for the eis operand
     2105      2105                   that is being processed.
     2106      2106                   Uses get_addr to do the real processing.
     2107      2107             */
     2108      2108             get_eis_addr(operand)
     2109      2109                   struct eis_oper *operand; {
     2110      2110    1
     2111      2111    1              if ( c == ',') return;
     2112      2112    1              get_addr();
     2113      2113    1              operand->word_offset = curr_instr.addr_offset ;
     2114      2114    1              if (reloc_type != 0) {
     2115      2115    2                operand->have_reloc_addr = 1;
     2116      2116    2                operand->reloc_section = reloc_section;
     2117      2117    2                operand->reloc_type = reloc_type;
     2118      2118    2                }
     2119      2119    1              reloc_type = 0;
     2120      2120    1              reloc_section = 0;
     2121      2121    1              return;
     2122      2122    1              }  /* end of get_eis_addr */
     2123      2123
     2124      2124             /*i*
     2125      2125                   name: get_eis_byte
     2126      2126                   purpose: This routine gets the byte alue that is associated
     2127      2127                   with the mlr instruction operands.
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=59 
     2128      2128             */
     2129      2129             get_eis_byte(operand)
     2130      2130                   struct eis_oper *operand; {
     2131      2131    1
     2132      2132    1              operand->byte_offset = 0;
     2133      2133    1
     2134      2134    1              while ((c=getc(infile)) != ' ' && c != ',' && c != '\n') {
     2135      2135    2                operand->byte_offset *= 10;
     2136      2136    2                operand->byte_offset += (c - '0' );
     2137      2137    2               }
     2138      2138    1              if (c == '\n') eol_flag = -1;
     2139      2139    1
     2140      2140    1              return;
     2141      2141    1              }  /* end of the get_eis_byte funxtion. */
     2142      2142
     2143      2143             /*i*
     2144      2144                   name= get_eis_ptr_reg
     2145      2145                   purpose: rouitne gets the pointer reg that is associated with
     2146      2146                   the mlr operand (if any). It uses the generic get_ptr_reg
     2147      2147                   routine for the general processing and fetching of the pointer
     2148      2148                   register.
     2149      2149             */
     2150      2150             get_eis_ptr_reg(operand)
     2151      2151                   struct eis_oper *operand; {
     2152      2152    1
     2153      2153    1              get_ptr_reg();
     2154      2154    1              if(curr_instr.have_ptr_reg != 0) {
     2155      2155    2                operand->have_ptr = 1;
     2156      2156    2                operand->ptr_reg = curr_instr.ptr_reg ;
     2157      2157    2               }
     2158      2158    1
     2159      2159    1              return;
     2160      2160    1              }   /* end of get_eis_ptr_reg functions. */
     2161      2161
     2162      2162             /*i*
     2163      2163                   name: get_eis_len
     2164      2164                   purpose: The purpose of this routine is to get the lenght
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=60 
     2165      2165                   for the operands that are associated with the mlr instructions.
     2166      2166             */
     2167      2167             get_eis_len(operand)
     2168      2168                   struct eis_oper *operand; {
     2169      2169    1
     2170      2170    1              operand->len = 0;
     2171      2171    1
     2172      2172    1              operand->len = get_value();  /* at this point it appears that
     2173      2173    1                                            the generic get_value should work. */
     2174      2174    1              return;
     2175      2175    1              }
     2176      2176
     2177      2177             /*i*
     2178      2178                   name: check_for_more
     2179      2179                   purpose: This routine checks for address fields of the
     2180      2180                   form:  aaa+cons or aaa-cons and adds the cons value to
     2181      2181                   the address offset field value.
     2182      2182             */
     2183      2183             check_for_more() {
     2184      2184    1        int neg;
     2185      2185    1        int val;
     2186      2186    1
     2187      2187    1              if (c == ',' || c == '\n') return;
     2188      2188    1              neg = 0;
     2189      2189    1              if (c == '-') neg = -1;
     2190      2190    1
     2191      2191    1              val = get_value(); /* get the integer value.   */
     2192      2192    1
     2193      2193    1              if (neg != 0) {
     2194      2194    2                curr_instr.addr_offset -= val; }
     2195      2195    1              else {
     2196      2196    2                curr_instr.addr_offset += val; }
     2197      2197    1
     2198      2198    1              return;
     2199      2199    1              }  /* end of check_for_more function. */
     2200      2200
     2201      2201             /*i*
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=61 
     2202      2202                   name: outerm
     2203      2203                   purpose: This is the routine to finsih the building of the
     2204      2204                   object unit. It sets the sizes for the control section
     2205      2205                   as well as making sure the forward references are satisfied.
     2206      2206
     2207      2207             */
     2208      2208             outerm ()   {
     2209      2209    1        void forward_ref_process();
     2210      2210    1        int sect_size;
     2211      2211    1        int *dcbptr ;
     2212      2212    1        void *ent_ptr;
     2213      2213    1        int name_offset;
     2214      2214    1        char tmp1[200];
     2215      2215    1
     2216      2216    1              if (static_data_flag != 0 ) {
     2217      2217    2                check_for_static_terminate ();
     2218      2218    2                return; }
     2219      2219    1
     2220      2220    1              /* make sure that we have a complete function that we are
     2221      2221    1                 processing. If not, print error and return to calling
     2222      2222    1                 routine.  */
     2223      2223    1              if (opt != ZEQU && last_opt != ZEQU ) {
     2224      2224    2                printf ("Extraneous intermediate language token found. \n");
     2225      2225    2                printf ("Last token processed was %d,\n", (opt>0)? opt: last_opt);
     2226      2226    2                return; }
     2227      2227    1
     2228      2228    1
     2229      2229    1              if (s_s_table[procsec].curr_offset != 0) {
     2230      2230    2                sect_size = s_s_table[procsec].curr_offset + 1;
     2231      2231    2                XUO$SECTSIZE (&procsec, &sect_size );
     2232      2232    2                }
     2233      2233    1              if (s_s_table[conssec].curr_offset != 0) {
     2234      2234    2                sect_size = s_s_table[conssec].curr_offset + 1;
     2235      2235    2                XUO$SECTSIZE (&conssec, &sect_size );
     2236      2236    2                }
     2237      2237    1              if (s_s_table[datasec].curr_offset != 0) {
     2238      2238    2                sect_size = s_s_table[datasec].curr_offset + 1;
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=62 
     2239      2239    2                XUO$SECTSIZE (&datasec, &sect_size );
     2240      2240    2                }
     2241      2241    1
     2242      2242    1        /*    if (static_func_count != 0) {
     2243      2243    1                chk_entref_names(); }   */ /* skip this code for time being. */
     2244      2244    1
     2245      2245    1              if (forward_ref_count != 0) {  /* have forward refs in the prog. */
     2246      2246    2                dcbptr = oudcbptr;
     2247      2247    2                ent_ptr = (void (*)()) forward_ref_process ;
     2248      2248    2                XUO$FRWD_REF (&procsec, &ent_ptr ,
     2249      2249    2                       &dcbptr );
     2250      2250    2                if (s_s_table[conssec].curr_offset != 0) {
     2251      2251    3                  XUO$FRWD_REF (&conssec, &ent_ptr ,
     2252      2252    3                       &dcbptr );  }
     2253      2253    2                if (s_s_table[datasec].curr_offset != 0) {
     2254      2254    3                  XUO$FRWD_REF (&datasec, &ent_ptr ,
     2255      2255    3                       &dcbptr );  }
     2256      2256    2                /*  do the forward ref processing.   */
     2257      2257    2              }  /* enof of the forward ref processing. */
     2258      2258    1
     2259      2259    1              if (debug_flag != 0) {
     2260      2260    2                XUO$LOGBLKTERM ();
     2261      2261    2               }
     2262      2262    1              if (strcmp(progname, "main") == 0) {
     2263      2263    2                pl6str ("main#main");
     2264      2264    2                XUO$DNAME( buffer, &name_offset);
     2265      2265    2                XUO$EDEF(&procsec, &four_val, &name_offset, &zero_val,
     2266      2266    2                  &minus_one_arg, &zero_val, &std_call, &zero_val);
     2267      2267    2                XUO$HEADSTART(&one_arg, &procsec, &four_val);
     2268      2268    2              }
     2269      2269    1              if (static_function_flag == 0) {  /* have global function. */
     2270      2270    2                pl6str (progname);  }
     2271      2271    1              else {
     2272      2272    2                strcpy(tmp1, progname);
     2273      2273    2                strcat(tmp1, "#");
     2274      2274    2                strcat(tmp1, static_name);
     2275      2275    2                pl6str(tmp1);    }
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=63 
     2276      2276    1
     2277      2277    1              zb6_close_debug_blks();  /* finish off the debug block stuff. */
     2278      2278    1              if (buffer[1] > 31) {  /********** temp **********/
     2279      2279    2                buffer[1] = 31;
     2280      2280    2                buffer[32] = '#'; }
     2281      2281    1
     2282      2282    1              XUO$HEADNAME ( buffer );
     2283      2283    1
     2284      2284    1              XUO$HEAD_SEVERITY (&error_severity);
     2285      2285    1
     2286      2286    1              XUO$OUTERM () ;  /* finsih the o.u building .   */
     2287      2287    1
     2288      2288    1
     2289      2289    1              return;   }  /* end of the outerm function. */
     2290      2290
     2291      2291             /*i*
     2292      2292                   name: forward_ref_process
     2293      2293                   purpose: This routine is the one to set up the lbls, etc
     2294      2294                   the have forward references in them and need to have them
     2295      2295                   statisfied. See XUO$FRWD_REF for the details on who this
     2296      2296                   works. This routine is called by XUO$FRWD_REF.
     2297      2297
     2298      2298             */
     2299      2299             void forward_ref_process (old_oper,oper_type,new_oper,reloc_oper,
     2300      2300                                  start_bit, end_bit)
     2301      2301             int *old_oper;
"zb6$driver:c.:ZBC3TSI", line 2301: (warning) identifier "start_bit" is not used
"zb6$driver:c.:ZBC3TSI", line 2301: (warning) identifier "end_bit" is not used
     2302      2302             int *oper_type;
     2303      2303             int *new_oper;
     2304      2304             int *reloc_oper;
     2305      2305             int *start_bit;
     2306      2306             int *end_bit;
     2307      2307
     2308      2308                      {    /*   start of the program...   */
     2309      2309    1        #define OPERCONSTANT 4
     2310      2310    1        #define RELOCOPADD 1
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=64 
     2311      2311    1        struct sym_tbl *ss;
     2312      2312    1        struct labels   *pp;
     2313      2313    1
     2314      2314    1              switch (*reloc_oper)  {
     2315      2315    2                case FREF_LBL:
     2316      2316    2                  pp = (struct labels *) fwd_p->fwd_tbl[*old_oper];
     2317      2317    2                  *new_oper = pp->offset;
     2318      2318    2                  *oper_type = OPERCONSTANT;
     2319      2319    2                  break;
     2320      2320    2                case FREF_AUTO:
     2321      2321    2                  ss = (struct sym_tbl *) fwd_p->fwd_tbl[*old_oper];
     2322      2322    2                  *new_oper = ss->offset;
     2323      2323    2                  *oper_type = OPERCONSTANT;
     2324      2324    2                  break;
     2325      2325    2                case FREF_DBL:
     2326      2326    2                  *oper_type = OPERCONSTANT;
     2327      2327    2                  break;
     2328      2328    2                case FREF_SLBL:
     2329      2329    2                  pp = (struct labels *) fwd_p->fwd_tbl[*old_oper];
     2330      2330    2                  *new_oper = pp->reloc_section;
     2331      2331    2                  *oper_type = SECTION_TYPE;
     2332      2332    2                  break;
     2333      2333    2                case FREF_SNAM:
     2334      2334    2                  ss = (struct sym_tbl *) fwd_p->fwd_tbl[*old_oper];
     2335      2335    2                  *new_oper = ss->reloc_section;
     2336      2336    2                  *oper_type = SECTION_TYPE;
     2337      2337    2                  break;
     2338      2338    2              }   /* end of the switch on reloc_oper. */
     2339      2339    1              *reloc_oper = RELOCOPADD;
     2340      2340    1              return;  /* back to o.u. generator.  */
     2341      2341    1              }  /* this is the end of forward_ref_process function. */
     2342      2342
     2343      2343             /*    name:ro_reset_register_status
     2344      2344                   purpose: This routine resets the curent register status
     2345      2345                   table. It is called whenever the current register histroy is
     2346      2346                   killed. This can occur at label difs and external calls.
     2347      2347
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=65 
     2348      2348             */
     2349      2349             ro_reset_register_status () {
     2350      2350    1
     2351      2351    1        int i;
     2352      2352    1
     2353      2353    1              if (register_opt_flag == 0) return;
     2354      2354    1              for(i=0; i < REG_COUNT; i++) {
     2355      2355    2                cr_list[i] = cr_list_init;
     2356      2356    2               }
     2357      2357    1              return;
     2358      2358    1        }
     2359      2359
     2360      2360             /*i*
     2361      2361                   name:ro_set_register_status
     2362      2362                   purpose: This routine is used to set the current operand in
     2363      2363                   the current register into the cr_list current history file.
     2364      2364
     2365      2365             */
     2366      2366             ro_set_register_status (reg) int reg; {
     2367      2367    1
     2368      2368    1              if (register_opt_flag == 0 || last_opt == ZTSX1) return;
     2369      2369    1              if (curr_index > ZDL || (curr_ptr !=0 && curr_ptr != ZP2)) {
     2370      2370    2                cr_list[reg] = cr_list_init;
     2371      2371    2                return; }
     2372      2372    1              cr_list[reg] = cr_list_init;
     2373      2373    1              cr_list[reg].reg_op = SET_REG_STATUS;
     2374      2374    1              cr_list[reg].reg_addr = curr_instr.addr_offset;
     2375      2375    1              cr_list[reg].reg_index = curr_index ;
     2376      2376    1              cr_list[reg].reg_ptr = curr_ptr ;
     2377      2377    1              cr_list[reg].op_type = reloc_type ;
     2378      2378    1              cr_list[reg].op_section = reloc_section ;
     2379      2379    1              if (reg == ZA || reg == ZQ) {
     2380      2380    2                cr_list[ZEREG].reg_op = MODIFY_REG_STATUS; }
     2381      2381    1              if (reg == ZEREG) {
     2382      2382    2                cr_list[ZA].reg_op = MODIFY_REG_STATUS ;
     2383      2383    2                cr_list[ZQ].reg_op = MODIFY_REG_STATUS ;
     2384      2384    2               }
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=66 
     2385      2385    1
     2386      2386    1              return;
     2387      2387    1        }  /* end of the ro_set_register_status routine. */
     2388      2388
     2389      2389
     2390      2390             /*i*
     2391      2391                   name: ro_chk_set_register_status(reg) int reg; {
     2392      2392                   purpose: This routine checks if the current operand is already
     2393      2393                   loaded into the passed register(reg). If so, skip the current
     2394      2394                   load instruction. Otherwise, set the appropriate register with
     2395      2395                   the new operand.
     2396      2396
     2397      2397             */
     2398      2398             ro_chk_set_register_status (reg) int reg; {
     2399      2399    1
     2400      2400    1              if (register_opt_flag == 0) return;
     2401      2401    1              if (skip_count == 0)  {   /* try for match in register. */
     2402      2402    2                if (cr_list[reg].reg_op == SET_REG_STATUS &&
     2403      2403    2                    cr_list[reg].reg_addr == curr_instr.addr_offset &&
     2404      2404    2                    cr_list[reg].reg_index == curr_index &&
     2405      2405    2                    cr_list[reg].reg_ptr == curr_ptr &&
     2406      2406    2                    cr_list[reg].op_type == reloc_type &&
     2407      2407    2                    cr_list[reg].op_section == reloc_section ) {
     2408      2408    3                  /* skip  the current load return.. */
     2409      2409    3                  instr_flag = 0;
     2410      2410    3                  drop_instr();
     2411      2411    3                  return;  }
     2412      2412    2              }  /* end of if test on skip_count. */
     2413      2413    1
     2414      2414    1              ro_set_register_status(reg);
     2415      2415    1              return;
     2416      2416    1        }
     2417      2417
     2418      2418
     2419      2419
     2420      2420             /*i*
     2421      2421                   name: ro_modify_register_status
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=67 
     2422      2422                   purpose: This routine is used to modify the current status
     2423      2423                   of the passsed register. Essentially, after a call to this
     2424      2424                   routine, the status of the specified register is destroyed.
     2425      2425                   This should keep us from ever getting any matches on regs
     2426      2426                   that are manipulated.
     2427      2427             */
     2428      2428             ro_modify_register_status (reg) int reg; {
     2429      2429    1
     2430      2430    1              if (register_opt_flag == 0) return;
     2431      2431    1              cr_list[reg].reg_op = MODIFY_REG_STATUS ;
     2432      2432    1              if (reg == ZEREG) {
     2433      2433    2                cr_list[ZA].reg_op = MODIFY_REG_STATUS ;
     2434      2434    2                cr_list[ZQ].reg_op = MODIFY_REG_STATUS ;
     2435      2435    2               }
     2436      2436    1              if (reg == ZA || reg == ZQ) {
     2437      2437    2                cr_list[ZEREG].reg_op = MODIFY_REG_STATUS; }
     2438      2438    1              return;
     2439      2439    1          } /*  end of the function ro_modify_register_status. */
     2440      2440
     2441      2441             /*i*
     2442      2442                   name: ro_chk_loc_mod
     2443      2443                   purpose: This routine checks for mods to memory loc that will
     2444      2444                   effect current register status. That is, will in validate using
     2445      2445                   the current register because the address that it is associated
     2446      2446                   with is not longer the same becasue it has just been modified.
     2447      2447
     2448      2448             */
     2449      2449             ro_chk_loc_mod () {
     2450      2450    1        int i;
     2451      2451    1
     2452      2452    1              if (register_opt_flag == 0) return;
     2453      2453    1              if (curr_ptr == 0 || curr_ptr ==ZP2) {
     2454      2454    2                for (i = ZEREG; i <= ZP7 ; i++) {
     2455      2455    3                  if (cr_list[i].reg_op == SET_REG_STATUS) {
     2456      2456    4                    /* look for simple match... */
     2457      2457    4                    if (cr_list[i].reg_index == curr_index &&
     2458      2458    4                        cr_list[i].reg_ptr == curr_ptr &&
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=68 
     2459      2459    4                        cr_list[i].reg_addr == curr_instr.addr_offset &&
     2460      2460    4                        cr_list[i].op_type == reloc_type &&
     2461      2461    4                        cr_list[i].op_section == reloc_section ) {
     2462      2462    5                          cr_list[i] = cr_list_init ; }
     2463      2463    4                  }
     2464      2464    3                }
     2465      2465    2              }  /* end of the test on cur_ptr. */
     2466      2466    1
     2467      2467    1              return;
     2468      2468    1        }   /*  end of the function ro_chk_loc_mod.  */
     2469      2469
     2470      2470             /*i*
     2471      2471                   name: ro_chk_ic_jump
     2472      2472                   purpose: This routine chks if the local jump is an n,ic
     2473      2473                   form of jump. If so, the counter skip_count is set to the
     2474      2474                   number of instructions to not do any reg ops on. the number
     2475      2475                   of instructions to skip reg op is n+1 (the plus one is for
     2476      2476                   the current instruction.
     2477      2477             */
     2478      2478             ro_chk_ic_jump()  {
     2479      2479    1
     2480      2480    1              if (register_opt_flag == 0) return;
     2481      2481    1              if (curr_index != ZIC )  return;
     2482      2482    1
     2483      2483    1              if (curr_instr.addr_offset > 0) {
     2484      2484    2                skip_count = curr_instr.addr_offset +1;
     2485      2485    2                return;  }
     2486      2486    1
     2487      2487    1              return;
     2488      2488    1        }   /* end of the ro_chk_ic_jump routine. */
     2489      2489
     2490      2490             /*i*
     2491      2491                   name: ro_reg_status_change
     2492      2492                   purpose: This routine checks the type of the store. If it
     2493      2493                   is unknown (ptr !=0 and ptr != ZP2) kill all register refs
     2494      2494                   to pntr reg modified stuff.
     2495      2495                   If op_type != 0, look for explicit reg to the external name
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=69 
     2496      2496                   and kill any register references to it.
     2497      2497             */
     2498      2498             ro_reg_status_change (reg) int reg; {
"zb6$driver:c.:ZBC3TSI", line 2498: (warning) identifier "reg" is not used
     2499      2499    1        int i;
     2500      2500    1
     2501      2501    1
     2502      2502    1              if (register_opt_flag == 0) return;
     2503      2503    1              if (curr_ptr != 0 && curr_ptr != ZP2 ) {
     2504      2504    2                for (i=ZEREG; i <= ZP7 ; i++) {
     2505      2505    3                  if (cr_list[i].reg_op == SET_REG_STATUS &&
     2506      2506    3                     cr_list[i].reg_ptr != 0 &&
     2507      2507    3                     cr_list[i].reg_ptr != ZP2 ) {
     2508      2508    4                     cr_list[i] = cr_list_init ; }
     2509      2509    3                }  /* end of the for loop. */
     2510      2510    2                return;
     2511      2511    2              }  /* end of the test on the curr_ptr. */
     2512      2512    1
     2513      2513    1              if (reloc_type != 0 && curr_index ==0) { /* look for specific
     2514      2514    2                                                external mod. */
     2515      2515    2                for(i=ZEREG; i <= ZP7; i++) {
     2516      2516    3                  if (cr_list[i].reg_op == SET_REG_STATUS) {
     2517      2517    4                    if (cr_list[i].op_type == reloc_type &&
     2518      2518    4                        cr_list[i].op_section == reloc_section &&
     2519      2519    4                        cr_list[i].reg_addr == curr_instr.addr_offset )  {
     2520      2520    5                        cr_list[i] = cr_list_init ; }
     2521      2521    4                  }
     2522      2522    3                }   /* end of the for loop. */
     2523      2523    2              } /* end of the if test on type .  */
     2524      2524    1              else {
     2525      2525    2                for (i = ZEREG; i <= ZP7 ; i++) {
     2526      2526    3                  if (cr_list[i].reg_op == SET_REG_STATUS) {
     2527      2527    4                    /* look for simple match... */
     2528      2528    4                    if (cr_list[i].reg_index == curr_index &&
     2529      2529    4                        cr_list[i].reg_ptr == curr_ptr &&
     2530      2530    4                        cr_list[i].reg_addr == curr_instr.addr_offset &&
     2531      2531    4                        cr_list[i].op_type == reloc_type &&
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=70 
     2532      2532    4                        cr_list[i].op_section == reloc_section ) {
     2533      2533    5                          cr_list[i] = cr_list_init ; }
     2534      2534    4                  }
     2535      2535    3                }
     2536      2536    2              } /* end of the else portion of the if on external name. */
     2537      2537    1              return ;
     2538      2538    1         }  /* end of the function chk_reg_status_change. */
     2539      2539
     2540      2540             /*i*
     2541      2541                   name: drop_instr
     2542      2542                   purpose: This routine increments the count of the instructions
     2543      2543                   that have been dropped from the program. It will also
     2544      2544                   optionally print out the instruction and the current location
     2545      2545                   in the procedure area when the dropped instruction was to
     2546      2546                   have occured.
     2547      2547             */
     2548      2548             drop_instr()  {
     2549      2549    1
     2550      2550    1              instr_drop_count++;
     2551      2551    1              if (debug_drop_flag == 0) return;
     2552      2552    1
     2553      2553    1              printf("instruction %d, dropped at oct. loc. %o, \n",
     2554      2554    1                  opt, s_s_table[procsec].curr_offset );
     2555      2555    1              return;
     2556      2556    1        }     /* end of the drop_instr function. */
     2557      2557
     2558      2558             /*i*
     2559      2559                   name:ro_mlr_modify_regs
     2560      2560                   purpose: This routine checks to see if the mlr instruction
     2561      2561                   target mdifies the contents of any of the current registers.
     2562      2562                   If so, it spoils the register result value....
     2563      2563             */
     2564      2564             ro_mlr_modify_regs() {
     2565      2565    1        int i;
     2566      2566    1
     2567      2567    1              if (register_opt_flag == 0) return;
     2568      2568    1              for (i=ZEREG; i <= ZP7; i++)  {
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=71 
     2569      2569    2                if (cr_list[i].reg_op == SET_REG_STATUS &&
     2570      2570    2                    cr_list[i].reg_ptr == m2_operand.ptr_reg &&
     2571      2571    2                    cr_list[i].reg_index == curr_instr.index &&
     2572      2572    2                    cr_list[i].reg_addr == m2_operand.word_offset &&
     2573      2573    2                    cr_list[i].op_type == m2_operand.reloc_type &&
     2574      2574    2                    cr_list[i].op_section == m2_operand.reloc_section ) {
     2575      2575    3                    cr_list[i] = cr_list_init; }
     2576      2576    2              }
     2577      2577    1        }   /* end of the function ro_mlr_modify_regs. */
     2578      2578
     2579      2579             /*i*
     2580      2580                   name: cons_arith_chk
     2581      2581                   purpose: this routine is to do constant arithmetic on the
     2582      2582                   last two integer entities if direct constant values. The
     2583      2583                   new constant value is stored into to the previous address
     2584      2584                   via the relocation directive.
     2585      2585             */
     2586      2586             cons_arith_chk(opt) int opt; {
     2587      2587    1        int temp_offset, reloc_temp_type;
     2588      2588    1        int result, mod_result;
     2589      2589    1
     2590      2590    1              if(curr_instr.index != ZDL || skip_count != 0) return(0);
     2591      2591    1              if(reloc_addr != 0) return(0);
     2592      2592    1
     2593      2593    1              switch (opt) {
     2594      2594    2                case ZMPY:
     2595      2595    2                  result = last_addr_offset * curr_instr.addr_offset;
     2596      2596    2                  break;
     2597      2597    2                case ZDIV:
     2598      2598    2                  result = last_addr_offset / curr_instr.addr_offset;
     2599      2599    2                  mod_result = last_addr_offset % curr_instr.addr_offset;
     2600      2600    2                  break;
     2601      2601    2                case ZADLG:
     2602      2602    2                case ZADG:
     2603      2603    2                  result = last_addr_offset + curr_instr.addr_offset;
     2604      2604    2                  break;
     2605      2605    2                case ZSBLG:
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=72 
     2606      2606    2                case ZSBG:
     2607      2607    2                case ZSBQ:
     2608      2608    2                  result = last_addr_offset - curr_instr.addr_offset;
     2609      2609    2                  break;
     2610      2610    2              }
     2611      2611    1
     2612      2612    1              if (result < 0 ) return(0);
     2613      2613    1              if (result > 0377777 ) return (0);
     2614      2614    1
     2615      2615    1              temp_offset = s_s_table[procsec].curr_offset -1;
     2616      2616    1              reloc_temp_type = CONS_TYPE;
     2617      2617    1
     2618      2618    1              XUO$RELOC (&procsec, &temp_offset, &reloc_temp_type, &result,
     2619      2619    1                 &fourteen_val, &zero_val, &seventeen_val);
     2620      2620    1              instr_flag = 0;
     2621      2621    1              drop_instr();
     2622      2622    1              int_constant_flag = 1;
     2623      2623    1              curr_instr.addr_offset = result;
     2624      2624    1              if (opt == ZDIV) {  /* if div, could be mod function so load a reg */
     2625      2625    2                 instr_flag = 1;
     2626      2626    2                 curr_instr.addr_offset = mod_result;
     2627      2627    2                 curr_instr.op_code = CLDA >> 8 ;
     2628      2628    2                 int_constant_flag = 0;
     2629      2629    2              }
     2630      2630    1
     2631      2631    1              return (1);
     2632      2632    1        }
     2633      2633
     2634      2634             /*i*
     2635      2635                   name: float_cons_arith_chk
     2636      2636                   purpose: This routine does the double precision stuff for
     2637      2637                   floating point arith. on constants. It does the constant
     2638      2638                   folding for floating point values.
     2639      2639             */
     2640      2640             float_cons_arith_chk(opt) int opt; {
     2641      2641    1        double result;
     2642      2642    1        int temp_offset, reloc_temp_type, reloc_temp_section;
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=73 
     2643      2643    1        struct constants *p, *pp, *last_p;
     2644      2644    1        union {
     2645      2645    2            int  d[2];
     2646      2646    2            double df; } temp_data;
     2647      2647    1
     2648      2648    1              switch (opt) {
     2649      2649    2                case ZFMP:
     2650      2650    2                case ZDFMP:
     2651      2651    2                  result = last_cons_value * curr_cons_value;
     2652      2652    2                  break;
     2653      2653    2                case ZFAD:
     2654      2654    2                case ZDFAD:
     2655      2655    2                  result = last_cons_value + curr_cons_value;
     2656      2656    2                  break;
     2657      2657    2                case ZFSB:
     2658      2658    2                case ZDFSB:
     2659      2659    2                  result = last_cons_value - curr_cons_value;
     2660      2660    2                  break;
     2661      2661    2                case ZFDV:
     2662      2662    2                case ZDFDV:
     2663      2663    2                  if (curr_cons_value == 0.0)  return (0);
     2664      2664    2                  result = last_cons_value / curr_cons_value;
     2665      2665    2                  break;
     2666      2666    2              }  /* end of the switch on instruction op. */
     2667      2667    1              temp_data.df = result;
     2668      2668    1
     2669      2669    1              p = (struct constants *) myalloc(sizeof(struct constants));
     2670      2670    1              p->uval.double_val = result ;
     2671      2671    1              p->next = NULL ;
     2672      2672    1              p->mode = DFLOAT_LIT ;
     2673      2673    1              p->reloc_type  = SECTION_TYPE ;
     2674      2674    1              p->reloc_section = datasec ;
     2675      2675    1              p->reloc_directive = UHALF_WORD ;
     2676      2676    1              if (dfloat_ptr == NULL) {
     2677      2677    2                dfloat_ptr = (int *) p; }
     2678      2678    1              else {
     2679      2679    2                for (pp = (struct constants *) dfloat_ptr; pp != NULL; pp = pp->next)
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=74 
                               {
     2680      2680    3                  last_p = pp; }
     2681      2681    2                last_p->next = p; }
     2682      2682    1              if ( (s_s_table[datasec].curr_offset %2) != 0) {
     2683      2683    2                s_s_table[datasec].curr_offset++; }
     2684      2684    1              p->addr_offset = s_s_table[datasec].curr_offset;
     2685      2685    1              XUO$PRGM (&datasec, &s_s_table[datasec].curr_offset,
     2686      2686    1                        &temp_data.d[0]);
     2687      2687    1
     2688      2688    1              s_s_table[datasec].curr_offset++;
     2689      2689    1
     2690      2690    1              XUO$PRGM (&datasec, &s_s_table[datasec].curr_offset,
     2691      2691    1                      &temp_data.d[1]);
     2692      2692    1              s_s_table[datasec].curr_offset++;
     2693      2693    1
     2694      2694    1              temp_offset = s_s_table[procsec].curr_offset - 1;
     2695      2695    1              reloc_temp_type = CONS_TYPE;
     2696      2696    1              reloc_temp_section = p->addr_offset;
     2697      2697    1              XUO$RELOC(&procsec, &temp_offset, &reloc_temp_type,
     2698      2698    1                &reloc_temp_section, &fourteen_val, &zero_val, &seventeen_val);
     2699      2699    1
     2700      2700    1              reloc_temp_type = SECTION_TYPE;
     2701      2701    1              reloc_temp_section = datasec;
     2702      2702    1
     2703      2703    1              XUO$RELOC(&procsec, &temp_offset, &reloc_temp_type,
     2704      2704    1                &reloc_temp_section, &one_arg, &zero_val, &seventeen_val);
     2705      2705    1              instr_flag = 0;
     2706      2706    1              drop_instr();
     2707      2707    1              last_cons_value = result;
     2708      2708    1
     2709      2709    1              opt_float_cons = 1;
     2710      2710    1
     2711      2711    1              return (1);
     2712      2712    1        }
---  Include file information  ---

   stdio:h.:LIBRARY. is referenced
CC.C03    File=zb6$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=75 
   errno:h.:LIBRARY. is referenced
   codegen:h.:ZBC3TOU. is referenced
   zb6$ougen:h.:ZBC3TOU. is referenced
   zb6$instructions:h.:ZBC3TOU. is referenced
   zb6$tables:h.:ZBC3TOU. is referenced
   zb6$equate1:h.:ZBC3TOU. is referenced
   zb6$regopt:h.:ZBC3TOU. is referenced

5 warnings were detected in the file zb6$driver:c.:ZBC3TSI
