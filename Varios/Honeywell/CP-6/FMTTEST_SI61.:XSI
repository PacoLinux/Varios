/*M* FMTTST_SI61 - PL6 driver routine for formatter test jig */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
FMTTST: PROC MAIN;
DCL M$SI DCB;
DCL M$LO DCB;
%INCLUDE XUR_ENTRY;
DCL X$FORMAT ENTRY(1);
DCL FMTTST_NODES SBIN SYMREF;
DCL OUT$ PTR;
DCL PROMPT CHAR(0) CONSTANT INIT('-');
DCL 1 VECTORS(0:9) STATIC,
      2 BOUND UBIN(20) UNAL,
      2 * BIT(16) INIT('77720'O*0),
      2 PTR$ PTR;
DCL DATA(0:100) SBIN;
DCL DATAX SBIN;
DCL I SBIN;
DCL J SBIN;
DCL K SBIN;
DCL L SBIN;
%INCLUDE XU_FORMAT_C;
%F_FDS (NAME=FDS,
        BUF=BUFFER,
        VECTR=VECTORS,
        DCB=M$LO);
%INCLUDE XU_MACRO_C;
%PARSE$OUT (NAME=OUT,STCLASS="BASED(OUT$)");
%PARSE$SYM (NAME=SYM,STCLASS=BASED);
%P_PCB (NAME=P_PCB,STCLASS="STATIC SYMDEF");
%XUR_INIT (NAME=XUR_INIT,PCB=P_PCB);
DCL ENDFLG BIT(1) ALIGNED;
DCL BUFFER CHAR(256) STATIC;
%EJECT;
        CALL XUR$INIT(XUR_INIT);
        ENDFLG='1'B;
        DO WHILE(ENDFLG);
           CALL XUR$GETCMD(FMTTST_NODES,OUT$,VECTOR(PROMPT)) ALTRET(ERR);
           DO CASE(OUT.CODE);
            CASE(1);                    /* END                                */
              ENDFLG='0'B;
            CASE(2);                    /* NULL                               */
            CASE(3);                    /* FORMAT                             */
              FDS.NVECS#=0;
              DATAX=0;
              FDS.FMT_=VECTOR(NIL);
              DO I=0 TO OUT.NSUBLKS-1;
                 DO CASE(OUT.SUBLK$(I)->OUT.CODE);
                  CASE(1);              /* FMT                                */
                    FDS.FMT_=VECTOR(OUT.SUBLK$(I)->OUT.SUBLK$(0)->SYM.TEXT);
                  CASE(2);              /* VAL                                */
                    DO J=0 TO OUT.SUBLK$(I)->OUT.NSUBLKS-1;
                       DO CASE(OUT.SUBLK$(I)->OUT.SUBLK$(J)->OUT.CODE);
                        CASE(1);        /* DEC                                */
                          CALL CHARBIN(K,OUT.SUBLK$(I)->OUT.SUBLK$(J)->SYM.TEXT);
                        CASE(2);        /* MINUS                              */
                          CALL CHARBIN(K,OUT.SUBLK$(I)->OUT.SUBLK$(J)->SYM.TEXT);
                          K=-K;
                        CASE(3);        /* OCTAL                              */
                          CALL CVTOCT(K,OUT.SUBLK$(I)->OUT.SUBLK$(J)->SYM);
                        END;
                       DATA(DATAX+J)=K;
                       END;
                    VECTORS.PTR$(FDS.NVECS#)=ADDR(DATA(DATAX));
                    VECTORS.BOUND(FDS.NVECS#)=OUT.SUBLK$(I)->OUT.NSUBLKS*4-1;
                    DATAX=DATAX+OUT.SUBLK$(I)->OUT.NSUBLKS;
                    FDS.NVECS#=FDS.NVECS#+1;
                  CASE(3); /* TEXT */;
                    VECTORS(FDS.NVECS#)=VECTOR(OUT.SUBLK$(I)->OUT.SUBLK$(0)->SYM.TEXT);
                    FDS.NVECS#=FDS.NVECS#+1;
                  CASE(4);              /* TEXTC                              */
                    VECTORS.PTR$(FDS.NVECS#)=ADDR(OUT.SUBLK$(I)->OUT.SUBLK$(0)->SYM.COUNT);
                    VECTORS.BOUND(FDS.NVECS#)=OUT.SUBLK$(I)->OUT.SUBLK$(0)->SYM.COUNT;
                    FDS.NVECS#=FDS.NVECS#+1;
                  END;
                 END;
              IF FDS.FMT_~=VECTOR(NIL) THEN CALL X$FORMAT(FDS);
            CASE(4);                    /* TRUNC                              */
              FDS.TRUNC#=~FDS.TRUNC#;
            CASE(5);                    /* BUFSIZE                            */
              CALL CHARBIN(K,OUT.SUBLK$(0)->SYM.TEXT);
              IF K<=SIZEV(BUFFER) THEN FDS.BUF_.BOUND=K;
              ELSE FDS.BUF_.BOUND=SIZEV(BUFFER);
            CASE(ELSE);                 /* ERR                                */
ERR:          CALL XUR$ERRPTR(,DCBNUM(M$LO));
              CALL XUR$ERRMSG(OUT$,DCBNUM(M$SI),DCBNUM(M$LO));
            END;
           END;
        CALL XUR$CLOSE_DCBS;
        RETURN;
CVTOCT: PROC(V,BLK);
%PARSE$SYM (NAME=BLK,STCLASS="");
DCL V UBIN;
DCL X SBIN;
        V=0;
        DO X=0 TO BLK.COUNT-1;
           V=V*8+ASCBIN(SUBSTR(BLK.TEXT,X,1))-48;
           END;
        RETURN;
END CVTOCT;
END FMTTST;
