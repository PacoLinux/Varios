/*M*    make_files  --    Routines to manage files                  */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
 
#include   "MAKE_Cc13"
#include   "MAKE_Cc14"
#include   <stdlib.h>
#include   <stdio.h>
#include   <fileinfo.h>
#include   <string.h>
 
static char tbuf[80];
 
/*D*    NAME:       fid_acct(fid)
        PURPOSE:    To return the account portion of the input fid.
*/
char *
fid_acct(fid)
  char  *fid;
{
  static char    acct[8];
  int            i = 0;
  int            w = 0;
 
  memcpy(acct,"        ",8);
  while (*fid && *fid != '.')   fid++;
  if (!*fid) return acct;
  while (*++fid && *fid != '.' && *fid != ' ') {
     if (i > 8) w++;
     else acct[i++] = *fid;
     }
  return acct;
}
 
 
/*D*    NAME:       fid_filename(fid)
        PURPOSE:    To return the filename portion of the input fid.
*/
 
char *
fid_filename(fid)
  char  *fid;
{
  static char    filename[32];
  int            i = 0;
 
  while (*fid && *fid != '.')
     if (i <= 31)
        filename[i++] = *fid++;
     else break;
  filename[i] = 0;
  return filename;
}
 
 
 
/*D*    NAME:       build_acct_list(buf,blen)
        PURPOSE:    To build an account list structure from an
                    input string.
*/
 
struct acct_list *
build_acct_list(buf, blen)
  char        *buf;
  int          blen;
{
  struct acct_list  *ap       = 0;
  unsigned          apsize    = sizeof(struct acct_list) - 8;
  int               Naccts    = 0;
  int               Raccts    = 0;
  int               i         = 0, j = 0, w = 0;
  int               more      = 40;   /* 5 more accts */
  char              *b        = buf;
  char              *Iaccts   = 0;
  char              *AcctList = 0;
  int                c;
 
  while (i < blen)  {
     while (buf[i] == ' ' && i < blen) i++;
 
     if (i < blen)  {
        Naccts++;
        if (Naccts > Raccts) {  /*  Need to alloc more space  */
           if (Raccts == 0)
              ap = (struct acct_list *)malloc(apsize += more);
           else ap = (struct acct_list *)realloc(ap, apsize += more);
           if (!ap) crash("Out of Memory: files");
           b = (char *) ap;
           Raccts += (more >> 3);
           AcctList = b+(sizeof(struct acct_list)-sizeof(struct vlp_acct));
           Iaccts   = AcctList + ((Naccts - 1)<<3);
           }
        else Iaccts += 8;
 
        if (buf[i]=='.') ++i;
        j = 0;
        while (i < blen && (c = buf[i]) != ' ' && c != '.') {
           if (j < 8) Iaccts[j++] = (c == 128)? '$' : c;
           else w++, j++;
           i++;
           }
 
        while (j < 8) Iaccts[j++] = ' ';
        if (buf[i] == '.') i++;
        }  /* Of: if (i < blen)...    */
     }     /* Of: while (i < blen)... */
 
  if (Naccts < Raccts)
     ap = (struct acct_list *)realloc(ap, apsize=(apsize-(Raccts-Naccts)<<3));
  if (ap) {
     ap->naccts = Naccts;
     mem_acctlist[0] += apsize;
     mem_acctlist[1]++;
     }
  return ap;
}
 
 
 
 
 
 
/*D*    NAME:          setup_srch_lists()
        PURPOSE:       To setup the search accounts for SI, UI,
                    OU and GN accounts.  This is VERY CP-6ish.
        DESCRIPTION:
           The following variables are setup:  srch_lists[0..3]
           which is an array of pointers to struct acct_list, and
           srch_roots[0..3] which is an array of pointers to
           struct vlp_acct.
*/
 
void
setup_srch_lists()  {
  int   i;
  struct sym_macro  *sm = sym_macro_specials[MI_SPATHS];
  int                sl = sm->mc_deflen;
  char              *st = sm->mc_def;
 
  for (i = MI_SIPATH ; i<MI_LOPATH ; i++)  {
     struct sym_macro *mc = sym_macro_specials[i];
     struct acct_list *al = build_acct_list(mc->mc_def,mc->mc_deflen);
     srch_roots[i-MI_SIPATH] = (al && al->naccts>1) ? al->accts : 0;
     srch_lists[i-MI_SIPATH] = al;
     }
 
  if (SIPATH != 0 && UIPATH != 0 && memcmp(SIROOT1,UIROOT1,8) != 0)
     TryUIp++;
 
  Allow_h_h = (SIPATH && OUPATH && memcmp(SIROOT1,OUROOT1,8) != 0);
 
  i = 0;
  while (i < sl && srch_num < 10)  {
     char  vbuf[80];
     int   j = 0;
     struct sym_macro *mc;
     while (i<sl && st[i] == ' ') i++;
     while (i<sl && st[i] != ' ')
        if (j < 80) vbuf[j++] = st[i++];
           else i++;
 
     vbuf[j] = 0;
     mc = lookup_sym_macro(vbuf, j, 0);
     if (mc)  {
        struct acct_list  *al = build_acct_list(mc->mc_def,mc->mc_deflen);
        srch_roots[srch_num] = (al && al->naccts>1)? al->accts : 0;
        srch_lists[srch_num] = al;
        if (al) srch_num++;
        }
     }
}
 
 
 
/*D*    NAME:          fid_ins_acct(acct,fid)
        PURPOSE:       To modify the input file name to specify
                    the account specified in the first argument.
        DESCRIPTION:
           This function uses a temporary buffer (of size 80) to
           update the CP-6 fid in place.
*/
 
void
fid_ins_acct(acct,fid)
  char     *acct;
  char     *fid;
{
  char      tbuf[80];
  char     *c = fid+1;
  char     *t = tbuf + 1;
  int       i = 0;
 
  memcpy(tbuf, fid, fid[0]+2);
 
  while( *t && *t != '.' && *t != ' ') *c++ = *t++;
  *c++ = '.';
  if (*t == '.') t++;
  while (*t && *t != '.' && *t != ' ') t++;
 
  while (acct[i] != ' ' && i < 8) *c++ = acct[i++];
  if (*t == '.') *c++ = *t++;
 
  while (*t && *t != '.' && *t != ' ') *c++ = *t++;
  *c = 0;
  fid[0] = (c-fid) - 1;
}
 
 
/*D*    NAME:          pat_2_name(pat,plen,st,stlen)
        PURPOSE:    To provide string substitution capabilities
                    which are used to map a target name from the
                    make file into a CP-6 file identifier.
        DESCRIPTION:
           The inputs are typically a makefile target name (minus
           the suffix known here as "st" and a pattern to be used
           to map "st" into a file identifier.  The pattern may
           contain two special characters:
 
           "*"   which is followed by a single character which must
                 be another "*" (producing a single "*" in the
                 output), or a hexadecimal digit which selects that
                 many characters from the base string.
 
           "?"   which inserts all of the remaining characters from
                 the base string not used up by "*" controls.
                 If "?" is not found in the string, then the pattern
                 is treated as if it began with a "?".
*/
char *
pat_2_name(pat,plen,st,stlen)
  char        *pat;
  int          plen;
  char        *st;
  int          stlen;
{
  static char  buf[80];   /* Maximum output size  */
  int         i;
  int         q = 0;      /* Question mark found  */
  int         l = 0;      /* # of chars to copied from pat to fid  */
  int         k = 0;      /* # "*" chars used before the "?"       */
  int         m = 0;      /* # "*" chars used after the "?"        */
  int         t = 0;      /* a temporary                           */
  int         bad = 0;    /* An illegal pattern or result          */
  int         kk = 0;     /* 2nd pass of chars copied before "?"   */
  int         ins = 1;    /* Insertion point in output             */
 
  for ( i=0 ; i<plen ; i++ )  {
 
     if (pat[i] == '*')   {
        if ((t = pat[++i]) != '*') {
           t = (t>='0' && t<='9')? t-'0' : ((t>='A'&&t<='Z')? t-'A'+10
              : ((t>='a'&&t<='z')? t-'a'+10 : -1) );
           if ( t>=0 ) {
              if (q) m+=t;
              else k += t;
              }
           else bad++;
           }
        else l++;
        }
     else if (pat[i] == '?') q++;
     else l++;
     }
 
  if (70 < l+stlen)   {
     if (options['v'])
     warning("## Produced file name too long: pat=\"%s\", name=\"%s\""
             ,pat,st);
     bad = -999;
     }
 
  if (stlen < k + m)   {
     if (options['v'])
     warning("## BaseName too short: pat=\"%s\", name=\"%s\"\n",
             pat,st);
     bad = -999;
     }
 
  if (!q) memcpy(buf+ins, st, stlen-k), m=k, k=0, q++, ins +=stlen-m;
     else q=0;
 
  if (!bad)
  for ( i=0 ; i<plen ; i++)  {
     int   c = pat[i];
     if (c == '*')   {
        if ((t = pat[++i]) != '*') {
           t = (t>='0' && t<='9')? t-'0' : ((t>='A'&&t<='Z')? t-'A'+10
              : ((t>='a'&&t<='z')? t-'a'+10 : -1) );
           if ( t>=0 ) {
              if (q) memcpy(&buf[ins],st+stlen-m,t), m-=t, ins+=t;
              else memcpy(&buf[ins],st+1+kk,t), kk+=t, ins+=t;
              }
 
           }
        else buf[ins++] = '*';
        }
     else if (c == '?') memcpy(&buf[ins], st+k,(t=stlen-k-m)), ins+=t, q++;
     else buf[ins++] = (c == 128) ? '$' : c;
     }
  if (bad) buf[ins++] = '!';
  buf[0] = ins-1, buf[ins] = 0;
  return buf;
}
 
 
 
 
/*D*    NAME:          gen_spec_name(specnum, target)
        PURPOSE:       To provide the name of a "special" fid.
*/
 
char *
gen_spec_name(specnum, tg)
  int               specnum;
  struct sym_target *tg;
{
  char             *rs  = tbuf;
  struct sym_macro *mcp = sym_macro_specials[MI_LOPATH + specnum];
  char             *st  = 0;
  int               stl = 0;
 
  if (!mcp || mcp->mc_deflen == 0) {
     if (!specnum)   {  /** DO output **/
        st = ":do";
        stl = 3;
        }
     else  {           /** LO output **/
        st = "NO";
        stl = 2;
        }
     }
  else {
     st = mcp->mc_def;
     stl = mcp->mc_deflen;
     }
 
  if (stl==2 && (strcmp(st,"LP")==0 ||
      strcmp(st,"NO")==0 || strcmp(st,"ME")==0)) {
     memcpy(tbuf+1, st, 3);
     tbuf[0] = 2;
     }
  else  {
     int i = tg->tg_len;
     char  *dot;
     char fullname[80];
     if (options['k']) i = i - tg->tg_suffix_len;
     memcpy(fullname, tg->tg_text, i);
     while (dot = memchr(fullname, '.', i))
        *dot = ':';
     rs = pat_2_name(st, stl, fullname, i);
     }
  return rs;
}
 
 
/*D*    NAME:          file_name(struct target *tg, int sif, int ouf)
        PURPOSE:       To produce a file name given a target name.
        DESCRIPTION:
           The special flag sif is used to indicate that this name
           should be "forced" to be the si account.  The special
           flag ouf is used to indicate that this name should be
           "forced" to be the ou account.
 
           The name of the file is produced by looking up a macro
           whose name is the same as the target suffix (file type).
           This macro is used as a pattern (as in pat_2_name) which
           is used in conjunction with the base file name (the name
           without the suffix or file type) to produce the fid
           which is to be opened.
*/
 
char *
file_name(tg, sif)
  struct sym_target *tg;
  int                sif;
{
  static char        buf[80];      /* Place to generate the filename*/
  struct sym_macro  *mc;
  int                base_len = tg->tg_len - tg->tg_suffix_len;
 
  if (tg->tg_suffix_len)
     mc = lookup_sym_macro(tg->tg_text+base_len, tg->tg_suffix_len,4);
  else mc = lookup_sym_macro(".r", 2, 4);
 
  if (!mc) {
     memcpy(buf+1, tg->tg_text, tg->tg_len+1);
     buf[0] = tg->tg_len;
     }
  else {
     char *pb;
     pb = pat_2_name(mc->mc_def, mc->mc_deflen,tg->tg_text, base_len);
     memcpy(buf, pb, pb[0]+2);
     }
 
  if (sif && SIPATH)
     fid_ins_acct(SIROOT1, buf);
 
  return buf;
}
 
 
/*D*    NAME:       srch_file(char *fid, struct acct_list *srch)
        PURPOSE:    To open a file given its name and an account
                    list.
        DESCRIPTION:
           This function attempts to open the specified fid and
           returns the FILE pointer if it exists.  If it does not
           exist and a srch list exists, then the account list is
           scanned starting at the second name in the list (because
           the first name is assumed to be the name already in the
           fid when this function was entered.
*/
 
unsigned
srch_file(fid, srch, acct_access, acct)
  char              *fid;
  struct acct_list  *srch;
  char              *acct;
  int               acct_access;
{
  unsigned           rs = FID_MODTIME( fid+1, acct_access, acct);
 
  if (!rs && srch)   {
     int i = 1;
 
     while ( i<srch->naccts && !rs )   {
        fid_ins_acct( &srch->accts[i++], fid);
        rs = FID_MODTIME( fid+1, acct_access, acct);
        }
     }
  return rs;
}
 
 
/*D*    NAME:       find_file(tg, fi, sif, ouf)
        PURPOSE:    To setup a "struct file_info" for a proposed
                    target name.
        DESCRIPTION:
           This function returns:
 
           0  if a file corresponding to the specified target does
              not exist.
 
           1  if a file corresponding to the specified target exists.
 
           2  if a file corresponding to the specified target exists
              and the filename has already been generated.
 
           If the file exists, the following file_info fields are
           setup:
 
           fi_mod   file modification time.
           fi_umod  update file modification time.
           fi_name  filename
           fi_uname update file name
 
           If the file exists and it was found in the root SI account,
           then the update account is checked for an update packet.
*/
 
int
find_file( tg, fi, sif, ouf)
  struct sym_target       *tg;
  struct file_info        *fi;
  int                      sif;
  int                      ouf;
{
  char                    *fn;
  char                    *acct;
  int                      i, rs=0;
  timetype                 mt;
  struct acct_list        *srch_list;
  char                     oacct[9];
 
  fi->fi_target = tg, memcpy(fi->fi_uname,"\000\000",2),fi->fi_umod=0;
  fi->fi_srch   = 0;
  if (tg->tg_fid && (!sif || memcmp(fid_acct(tg->tg_fid),SIROOT1,8)==0))  {
     memcpy(fi->fi_name, tg->tg_fid, tg->tg_fid[0]+2);
     if (tg->tg_ufid)
        memcpy(fi->fi_uname, tg->tg_ufid, tg->tg_ufid[0]+2);
     else memcpy(fi->fi_uname, "\000\000", 2);
     fi->fi_mod  = tg->tg_modtime;
     fi->fi_umod = tg->tg_umodtime;
     fi->fi_srch = tg->tg_srch;
     return 2;
     }
 
  fn = file_name(tg, sif);        /* produce our file name */
  acct = fid_acct(fn);
 
  srch_list = 0;       /* See if we have a search list  */
  for ( i=0 ; i<srch_num ; i++ )
     if (srch_roots[i] && memcmp(srch_roots[i],acct,8) == 0)
        if (i != 3)
           srch_list = srch_lists[i];
 
  if (ouf && OUPATH && SIPATH)  {
     if ( srch_list == SIPATH || memcmp(acct,SIROOT1,8) == 0) {
        fid_ins_acct(OUROOT1, fn);
        srch_list = (OUROOT) ? OUPATH : (struct acct_list *)0;
        acct = OUROOT1;
        }
     }
  memcpy(fi->fi_name, fn, fn[0]+2);
  mt = srch_file( fi->fi_name, srch_list, 0, oacct );
 
  if (mt)   {                           /* the file exists!    */
     fi->fi_mod = mt, rs++;
     fi->fi_srch = srch_list;
     if (memcmp("        ", fid_acct(fi->fi_name), 8)==0) {
        fid_ins_acct( oacct, fi->fi_name);
        }
     if (TryUIp && memcmp(acct, SIROOT1, 8)== 0)     {
        memcpy(fi->fi_uname, fi->fi_name, fi->fi_name[0]+2);
        fid_ins_acct( UIROOT1, fi->fi_uname);
        mt = srch_file(fi->fi_uname, (UIROOT ? UIPATH : (struct acct_list *)0), UpdateRst );
        if (mt)    /**  Updates exist!  **/
           fi->fi_umod = mt;
        else memcpy( fi->fi_uname, "\000\000", 2);
        }
     }
  else {
     fi->fi_mod = 0;
     if (srch_list)
        fid_ins_acct(srch_list->accts[0].text, fi->fi_name);
     }
  return rs;
}
 
 
 
 
 
/*D*    NAME:          delete_target_files(struct sym_target *tg)
        PURPOSE:       To delete all of the target files associated
                       with a primary target.
*/
 
delete_target_files(tg)
  struct sym_target *tg;
{
  struct target_action *a = tg->tg_action;
 
  while (a) {
     struct sym_target *t = a->ta_target;
     if (!t->tg_precious && !t->tg_phony)
        remove(t->tg_fid+1);
     a = a->next;
     }
  return;
}
 
 
 
 
/*D*    NAME:       check_target_status(struct sym_target *tg)
        PURPOSE:    To check the expected output of a job to determine
                    if the files that should be build are present.
*/
 
int
check_target_status(tg)
  struct   sym_target  *tg;
{
  char  *code = 0;
  char  *arg  = "";
  int    rs   = 1;
  FILE  *tf   = 0;
  struct target_action *ta = tg->tg_action;
  struct sym_target *t = 0;
 
  arg = 1+gen_spec_name(1, tg);
  tf  = fopen(arg, "r");
  if (tf)  {  /*  If DO file exists... FAILURE     */
     fclose(tf);
     code = "See diagnostics file: ";
     }
  else {
     while (ta)  {
        t = ta->ta_target;
        if (!t->tg_phony) {
           arg = t->tg_fid+1;
           tf  = fopen(arg, "r");
           if (!tf) {
              code = "Missing target file: ";
              break;
              }
           fclose(tf);
           }
        ta = ta->next;
        }
     }
  if (code)   {     /*  If failure!  */
     fprintf(stderr," ** %s failed! %s%s\n",tg->tg_text, code, arg);
     if (!tg->tg_phony && !tg->tg_precious)
        remove(tg->tg_fid+1);
     if (options['e'] > 1)   {
        FILE *send_email();
        if (!t || !t->tg_owner) t = tg;
        if (t->tg_owner)
           send_email( (FILE *)0, t, 0, code, arg);
        else fprintf(stderr," ** no email address for mail!\n");
        }
     rs = 0;
     }
  return rs;
}
 
 
 
 
/*D*    NAME:       check_system_jobs()
        PURPOSE:    To issue an IBEX check command for each job
                    that is currently expected to be running.
        DESCRIPTION:
           This command is used to cause IBEX to update the notify
           file with the current status of all running jobs.
           This file can then be read to determine whether any jobs
           have completed.
*/
 
int
check_system_jobs()
{
 
  if (options['s'] < 2)
     system("check");
  IBEX_output_switch = 0;
  return 0;
}
 
 
 
 
/*D*    NAME:       mark_sysid_running(int sysid)
        PURPOSE:    To set the sysid running flag on for the action
                    associated with the sysid argument.
*/
 
int
mark_sysid_running(sysid)
  int         sysid;
{
  struct sym_target *tg = target_states[ STATUS_RUNNING ];
  int                found = 0;
 
  while (tg)  {
     if (tg->tg_action->ta_sysid == sysid)  {
        found++;
        tg->tg_action->ta_flags |= 1;
        break;
        }
     tg = tg->tg_stchain;
     }
  return found;
}
 
 
 
 
/*D*    NAME:       locate_running_jobs(fid)
        PURPOSE:    To cause all currently running jobs to mark
                    the associated target_action structure.
*/
 
int
locate_running_jobs()
{
  int                rs = 0;
  int                sysid;
  struct sym_target *tg = target_states[ STATUS_RUNNING ];
 
  if (IBEX_output_switch)
     check_system_jobs();
 
  while (tg)  {
     sysid = tg->tg_action->ta_sysid;
     if (CHECK_JOB_COMPLETION(&sysid))
        tg->tg_action->ta_flags |= 1, rs++;
     tg = tg->tg_stchain;
     }
 
  return rs;
}
 
 
 
/*D*    NAME:       send_email
        PURPOSE:    To notify file owners when their compilation has
                    failed.
        DESCRIPTION:
           This function is called in one of three ways.  First, if
           the "-ee" option is provided, then as each file fails a
           mailgram is sent to the file's owner.  This function
           creates that mailgram and sends it when (class==0).
 
           Secondly, when the build is terminating with errors, then
           for every owner of failing files, he receives a single
           complete list of all failures.  There is also a copy sent
           to the project leader (?) if the MAIL_COPY variable is
           defined.  This is done by calling this function with
           (class==1) for each failed file belonging to a particular
           owner.  When all failures for that owner have been sent
           then this function is called with (class == -1) to actually
           send the summary.
*/
 
FILE *
send_email(f, tg, class, arg0, arg1)
  FILE *f;
  struct sym_target *tg;
  int   class;
  char  *arg0;
  char  *arg1;
{
  struct sym_macro *mc, *msubj = sym_macro_specials[MI_MAIL_SUBJECT];
  FILE *dof = 0;
  int   lines = 0;
  char  buf[256];
 
  if (class < 0 && f)  {
     fclose(f);
     system("SEND *BODY (GATEWAY)");
     return 0;
     }
  if (!tg->tg_owner || !msubj || !msubj->mc_deflen)
     return 0;
 
  if (class == 0)   {
     /* sending mailgram as soon as failure occurs */
     f = fopen("*BODY", "w");
     if (!f) return 0;
     fprintf(f, "To: %s\n", tg->tg_owner->ow_text);
     fprintf(f, "Subject: %s\n", msubj->mc_def);
     fprintf(f, "Signed: ...MAKE.\n");
     mc = sym_macro_specials[MI_MAIL_BODY];
     fprintf(f, "%s%s%s%s\n", tg->tg_fid+1, mc->mc_def, arg0, arg1);
     if (arg1 && (dof = fopen(arg1, "r"))) {
        fprintf(f, "\nDiagnostic file contents:\n\n");
        while (lines < 14 && fgets(buf, 256, dof))
           fputs(buf, f), lines++;
        if (lines == 14 && fgets(buf, 256, dof))
           fprintf(f, "  .\n  .\n  .\n");
        fclose(dof);
        }
     fclose(f);
     system("SEND *BODY (GATEWAY)");
     return 0;
     }
 
  if (!f)  {
     f = fopen("*BODY", "w");
     if (!f) return 0;
     fprintf(f, "To: %s\n", tg->tg_owner->ow_text);
     fprintf(f, "Subject: %s\n", msubj->mc_def);
     fprintf(f, "Signed: ...MAKE.\n");
     mc = sym_macro_specials[ MI_MAIL_COPY ];
     if (mc && mc->mc_deflen)
        fprintf(f,"c: %s\n", mc->mc_def);
     mc = sym_macro_specials[MI_MAIL_SUMMARY];
     fprintf(f,"%s\n",mc->mc_def);
     }
  fprintf(f," %s\n", tg->tg_fid+1);
  return f;
}
 
 
 
/*F*    NAME:       OpenInclude( char *fid )
        PURPOSE:    To open an include file.
        DESCRIPTION:
           If the passed file name contains an account specification,
           that file is opened and the stream pointer returned.
 
           Otherwise,  the search list is used to locate the file.
           The first item in the search list is always the current
           account.
 
           The remaining accounts are specified by the -i option
           in one of the following syntax forms:
 
           1. -iACCOUNT         -- the file name has ".ACCOUNT"
                                   appended.
           2. -iname.account    -- the file name is inserted before
                                   the '.' in the search string.
           3. -ina?me.account   -- the file name is inserted over the
                                   '?' character in the search string.
 
           The search strings begin with the number of the above case
           to use to create the file name.
*/
 
FILE *
OpenInclude( char *fid )
{
  FILE *rs;
  char  buf[80];    /*  To build our file names */
  char *srch;
  int   ln, i, j, k, s;
 
  if (strchr(fid, '.'))
     return fopen(fid, "r");
 
  ln = strlen(fid);
  for (i=0 ; i < SrchNum ; ) {
     srch = SrchList[i++];
     s    = *srch++;
 
     switch (s)  {
        case 1:           /*  Append '.' and account */
           strcat( strcat( strcpy( buf, fid ), "." ), srch);
           break;
        case 2:           /*  Replace '?' with filename */
        case 3:           /*  Insert filename before '.'*/
           k = strchr( srch, ((j = s==2)? '?' : '.') ) - srch;
           memcpy(buf,      srch,     k);
           memcpy(buf+k,    fid,      ln);
           memcpy(buf+k+ln, srch+k+j, 1+strlen(srch+k+j));
           break;
        }
     rs = fopen(buf, "r");
     if (rs) return rs;
     }
  return (FILE *)0;
}
