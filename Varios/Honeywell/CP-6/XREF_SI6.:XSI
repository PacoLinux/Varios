/*M* XREF FOR CP6 OBJECT */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X*MCL=0,MOC,MEC,CLM=12,EXM=12,CRT=6,DMR,PLM=3,IND=3,ENU=0,DCI=3,
CSU=3,ECU=3,THI=0,DTI=0,CRM=86 */
XREF:PROC MAIN;
%INCLUDE CP_6;
%INCLUDE B$OBJECT_C;
%INCLUDE B$TABLES_C;
%B$XL_UPPER;
%INCLUDE B_ERRORS_C;
%INCLUDE XU_MACRO_C;
%INCLUDE U$JIT_C;
            /**/
%F$DCB(BASED="BASED(DCB$)");
            /**/
%FPT_OPEN(DCB=M$SI,FPTN=OPNEI,FUN=IN);
%FPT_READ(DCB=M$SI,FPTN=RD0,KEYS=YES,KEY=KBUF0);
%FPT_READ(DCB=M$SI,FPTN=READH,BUF=HBUF,KEYR=YES,KEY=HKEY);
%FPT_READ(DCB=M$SI,FPTN=RDN,KEYR=YES,KEY=KBUF);
%XUU_PARAM(FPTN=XUUP,BASE=YES,OPT_UI=YES,FAST_BASE=YES,FAST_UPDATE=YES,
           CLOSE_ALL=YES,ALLOCATE=GETMEM,RELEASE=RELMEM);
%FPT_OPEN(FPTN=SETUI,DCB=M$UI,SETDCB=YES);
DCL GETMEM ENTRY(2) ALTRET;
DCL RELMEM ENTRY(1) ALTRET;
DCL XUU$OPEN ENTRY(1) ALTRET;
DCL XUU$CLOSE ENTRY(1) ALTRET;
DCL XUU$READ ENTRY(2) ALTRET;
%FPT_GDS(FPTN=INGDS,RESULTS=IN_,SEGSIZE=1024,COMMON=YES,STCLASS=STATIC SYMDEF);
%FPT_GDS(FPTN=OUTGDS,RESULTS=NEXT_,SEGSIZE=1024);
%FPT_PRECORD(DCB=M$SI,FPTN=PRECH,KEYS=YES,KEY=HKEY,N=1);
%FPT_WRITE(FPTN=WRITE,DCB=M$EO);
%FPT_CLOSE(FPTN=CLOS1,DISP=SAVE);
%FPT_READ(FPTN=READSTD,DCB=M$EI,BUF=OBUF);
%FPT_OPEN(FPTN=OPNSTD,SETDCB=YES,DCB=M$EI,SN=STDSN);
%VLP_SN(FPTN=STDSN);
%FPT_ERRMSG(FPTN=EFPT,CODE=FLAG,BUF=OBUF,INCLCODE=NO,DCB=M$SI,
      OUTDCB1=M$LO,FLAGLEV=4);
%FPT_FID(FPTN=FIDER,TEXTFID=OBUF,ASN=OPNEI.V.ASN#,ACCT=IBUF,
    PASS=KBUF,NAME=HKEY,RES=OPNEI.V.RES#,SN=HBUF,RESULTS=FIDR);
%VLR_FID(FPTN=FIDR);
            /**/
%P_PCB(T=OBUF,WSZ=1024,R=XROPTS);
%PARSE$OUT(NAME=POUT,STCLASS="BASED(P_PCB.OUT$)");
%PARSE$SYM(NAME=PSYM,STCLASS="BASED(P$)");
%FPT_READ(FPTN=RSEL,DCB=M$ME,BUF=OBUF);
%FPT_PROMPT(FPTN=PRFPT,PROMPT=PROPTS);
%FPT_CORRES(FPTN=CORRFPT,DCB1=M$EI,DCB2=M$LO,STCLASS=STATIC);
DCL X$PARSE ENTRY(1)ALTRET;
DCL PREF CHAR(0)INIT('PREFII?')CONSTANT;
DCL PROPTS CHAR(0)INIT('OPTIONS:')CONSTANT;
DCL M$UI DCB;
DCL M$ME DCB;
DCL XROPTS UBIN SYMREF;
DCL XRFID UBIN SYMREF;
DCL SELS CHAR(200)STATIC;
DCL SEL$ PTR STATIC INIT(ADDR(SELS));
DCL SELCMDS UBIN SYMREF;
DCL 1 SELC BASED(P$),
      2 L UBIN(9)UNAL,
      2 C CHAR(SELC.L);
%B$DNAME(NAME=SYM);
%B$SECTION(NAME="SECT(0:0)",STCLASS="BASED(REC$)");
%B$EDEF(NAME="DEFN(0:0)",STCLASS="BASED(REC$)");
%B$EREF(NAME="REFN(0:0)",STCLASS="BASED(REC$)");
%B$LBNTRY1(NAME=LB,STCLASS=BASED);
%SUB LB="PINCRW(IN_.P$,SIZEW(LB))->LB";
%B$VREBL(NAME="DVAR(0:0)",STCLASS="BASED(REC$)");
%SUB NPTR=NPOINTER;
%B$RELOC1(NAME="SREL(0:0)",STCLASS="BASED(IN_.P$)");
%B$RELOC2(NAME=LREL);
%B$TCB(STCLASS="BASED(B$TCB$)");
%B$ALT;
DCL B$TCB$ PTR SYMREF;
DCL B$JIT$ PTR SYMREF;
            /**/
DCL XREFSRT ENTRY;
DCL EOPASS SYMREF CHAR(8);
DCL M$EI DCB;
DCL M$SI DCB;
DCL M$LO DCB;
DCL M$EO DCB;
DCL DCB$ PTR;
DCL M$EI$ PTR;
DCL REC$ PTR;
DCL P$ PTR;
DCL P#(0:6)UBIN;
DCL 1 FLAG STATIC,
      2 ERR BIT(33),
      2 SEV UBIN(3)INIT(0)UNAL;
DCL ARS SBIN;
DCL PGSIZ UBIN;
DCL 1 NEXT_ STATIC DALIGNED,
      2 CHARS UBIN(20),
      2 P$ PTR INIT(ADDR(NIL));
DCL 1 IN_ STATIC SYMDEF DALIGNED,
      2 CHARS UBIN(20),
      2 P$ PTR;
%B$OUHEAD(STCLASS=BASED);
DCL HBUF CHAR(140) STATIC;
DCL HCHAR REDEF HBUF CHAR(140);
%SUB HBUF="ADDR(HCHAR)->B$OUHEAD";
DCL 1 HKEY STATIC,
      2 L UBIN(9)UNAL,
      2 C CHAR(35);
%B$OUKEY(NAME=KBUF0);
%B$PRGRELKEY(NAME=KBUF);
            /**/
DCL I UBIN;
DCL J UBIN;
DCL JU(0:11)REDEF J UBIN(3)UNAL;
DCL OFL(0:7)BIT(36)INIT('1'B*0)STATIC;
%EQU SELM=6;
%EQU SELN=7;
DCL CURTYP UBIN;
            /**/
%FPT_WRITE(FPTN=WRLO,DCB=M$LO,BUF=OBUF);
%FPT_WRITE(FPTN=WRAST,DCB=M$LO,BUF=ASTS);
%FPT_WRITE(FPTN=WINCL,BUF=IBUF,DCB=M$EO);
%FPT_READ(FPTN=RDXR,BUF=IBUF);
%FPT_PRECORD(FPTN=PREC);
%FPT_PRECORD(FPTN=PRECK,KEYS=YES);
%FPT_DEVICE(FPTN=LOHDR,PAGE=YES,DCB=M$LO,HDR=HDR0,STCLASS=CONSTANT);
%VLP_HDR(FPTN=HDR0,HEADERHEIGHT=2,LEN=108);
DCL HDR1(0:5)CHAR(20)CONSTANT INIT(
      'SYMBOL______________',
      'BASED_LEVEL-1_NAME__',
      '___SIZE_NAME________',
      '_SEV_FILENAME_______',
      'INCLUDE_FILE________',
      'MACRO_OR_VARIABLE___');
DCL HDR2(0:5) CONSTANT CHAR(6) INIT(
      'DEF_OU','______','TYPE__','______'*2,'DEF_CU');
DCL HDR3(0:5) CONSTANT CHAR(7) INIT(
      'REF_OUS','OUNAMES'*3,'INCLERS','REF_CUS');
DCL HDRX(0:5) UBIN;
DCL NAMX(0:5) UBIN CONSTANT INIT(0,1,8,7,4,0);
            /**/
DCL WIDTH UBIN STATIC SYMDEF INIT(80);
DCL RECSZ UBIN STATIC SYMDEF;
DCL 1 SZ STATIC,
      2 NAM UBIN INIT(19),
      2 MID UBIN INIT(11);
DCL SZS(0:1) REDEF SZ UBIN;
DCL MIDX UBIN;
DCL NEXT@ UBIN;
DCL CH_NAMSZ BASED CHAR(SZ.NAM);
DCL CH_TYPE BASED CALIGNED UBIN BYTE;
DCL 1 CH_FL BASED CALIGNED,
      2 * BIT(7),
      2 SREF BIT(1),
      2 USED BIT(1);
%SUB NAME_NAME="PINCRC(NEXT_.P$,NEXT@)->CH_NAMSZ";
%SUB NAME_TYPE="PINCRC(NEXT_.P$,NEXT@+SZ.NAM)->CH_TYPE";
%SUB NAME_USED="PINCRC(NEXT_.P$,J*RECSZ+RECSZ-1)->CH_FL.USED";
%SUB NAME_SREF="PINCRC(NEXT_.P$,J*RECSZ+RECSZ-1)->CH_FL.SREF";
DCL SUNDX UBIN;
DCL ITYP UBIN;
DCL STYP UBIN;
DCL IBUF STATIC CHAR(108)INIT(' ');
DCL SNAM CHAR(64);
DCL OBUF CHAR(120)STATIC;
            /**/
DCL TOO_MANY_CHARS CHAR(0) CONSTANT INIT(
    'The selection list is too big (too many chars), starting at ');
            /**/
DCL STYPS(0:6)CHAR(9)CONSTANT INIT(
 'STATIC','PROCEDURE','COMMON','LBLCOMMON','EXTROOT','DCB','CONSTANT');
DCL DTYPS(0:4)CHAR(5)CONSTANT INIT(
 '(SEC)'*2,'(ENT)','(SYM)','(SEG)');
DCL ASTS(0:32)CHAR(4)INIT('****'*0)CONSTANT;
DCL UNDERS CHAR(108) CONSTANT INIT('__________________________________________
__________________________________________________________________');
DCL USLEN(0:3)UBIN CONSTANT INIT(3,0,4,3);
DCL USTXT(0:3)CHAR(4)CONSTANT INIT(
  '(U)',' ','(SU)','(S)');
DCL FIRSTC CHAR(1)STATIC INIT(' ');
%EJECT;
   DCB$=DCBADDR(DCBNUM(M$SI));
   M$EI$=DCBADDR(DCBNUM(M$EI));
   EOPASS=DCBADDR(DCBNUM(M$EO))->F$DCB.PASS#;
   CALL M$GDS(INGDS);
   P_PCB.WORK$=IN_.P$;
   P_PCB.NCHARS=B$JIT.CCARS-B$JIT.CCDISP;
   IF P_PCB.NCHARS~=0 THEN DO;
      P_PCB.TEXT$=ADDR(SUBSTR(B$JIT.CCBUF,B$JIT.CCDISP));
      CALL M$PROMPT(PRFPT);
PARS: CALL X$PARSE(P_PCB) WHENALTRETURN DO;
         FLAG=P_PCB.ERROR;
         CALL M$ERRMSG(EFPT)WHENALTRETURN DO; END;
         CALL M$ERR;
         END;
      DO I=0 TO POUT.NSUBLKS-1;
         P$=POUT.SUBLK$(I);
         DO CASE(PSYM.CODE);
         CASE(0);
            IF POFFC(SEL$,ADDR(SELS))+SIZEC(PSYM.TEXT)+1 <= SIZEC(SELS) THEN DO;
               SEL$->SELC.L=SIZEC(PSYM.TEXT);
               SEL$->SELC.C=PSYM.TEXT;
               SEL$=PINCRC(SEL$,SIZEC(SEL$->SELC));
               END;
            ELSE DO;
               CALL CONCAT(OBUF,TOO_MANY_CHARS,PSYM.TEXT);
               WRLO.BUF_.BOUND=SIZEC(TOO_MANY_CHARS)+SIZEC(PSYM.TEXT)-1;
               CALL M$WRITE(WRLO);
               CALL M$ERR;
               END;
         CASE(ELSE);
            IF PSYM.CODE<=SIZEW(OFL) THEN OFL(PSYM.CODE-1)='0'B;
            ELSE IF PSYM.CODE<SIZEW(OFL)+3 THEN DO;
                  J=PSYM.CODE;
                  I=I+1;
                  P$=POUT.SUBLK$(I);
                  CALL CHARBIN(SZS(J-SIZEW(OFL)-1),PSYM.TEXT);
                  END;
               ELSE DO;
CONT:             CALL M$READ(RSEL)WHENRETURN DO;
                     P_PCB.TEXT$=ADDR(OBUF);
                     P_PCB.NCHARS=DCBADDR(RSEL.V.DCB#)->F$DCB.ARS#;
                     GOTO PARS;
                     END;
                  END;
         END;
         END;
      END;
   IF B$JIT.PRFLAGS.UI
   THEN IF OFL(%SELM) /* No selects, set up for update files */
      THEN SETUI.NAME_=VECTOR(F$DCB.NAME#);
      ELSE IF RSEL.V.DCB#=DCBNUM(M$ME) THEN DO;
            RSEL.V.DCB#=DCBNUM(M$UI);
            P_PCB.ROOT$=ADDR(SELCMDS);
            PRFPT.PROMPT_=VECTOR(PREF);
            CALL M$PROMPT(PRFPT);
            GOTO CONT;
            END;
   IF SZ.NAM<11 THEN SZ.NAM=11;
   IF SZ.NAM>63 THEN SZ.NAM=63;
   IF SZ.MID<11 THEN SZ.MID=11;
   IF SZ.MID>31 THEN SZ.MID=31;
   RECSZ=SZ.NAM+SZ.MID+2;
   MIDX=SZ.NAM+1;
   WRITE.BUF_.BOUND=RECSZ-1;
   WINCL.BUF_.BOUND=RECSZ-1;
   PRFPT.PROMPT_=VECTOR(NIL);
   CALL M$PROMPT(PRFPT);
   IF NOT OFL(%SELN) THEN OFL(%SELM)='1'B;
   CALL M$GDS(OUTGDS);
   P_PCB.TEXT$=ADDR(OBUF);
   P_PCB.NCHARS=SIZEC(OBUF);
   P_PCB.ROOT$=ADDR(XRFID);
   P#(4)=128;
   IF F$DCB.NAME#.C=' ' AND F$DCB.ASN#=1 THEN DO;
      OPNEI.V.OPER.NXTF#='1'B;
      END;
   ELSE DO;
      OPNSTD.V.ASN#=F$DCB.ASN#;
      OPNSTD.V.RES#=F$DCB.RES#;
      OPNSTD.NAME_=VECTOR(F$DCB.NAME#);
      OPNSTD.ACCT_=VECTOR(F$DCB.ACCT#);
      OPNSTD.PASS_=VECTOR(F$DCB.PASS#);
      OPNSTD.WSN_=VECTOR(F$DCB.WSN#);
      STDSN.SN#(0)=F$DCB.PSN#;
      CALL M$OPEN(OPNSTD);
NXTF0: OBUF=' ';
      CALL M$READ(READSTD)ALTRET(DONE35);
SI_LD:;
      I=M$EI$->F$DCB.ARS#;
      IF M$EI$->F$DCB.TYPE#='XR' THEN DO;
         CALL CLOSE(DCBNUM(M$EI));
         RECSZ=I;
         SZ.NAM=I-2;
         DO WHILE(SUBSTR(OBUF,SZ.NAM,1)=' ');
            SZ.NAM=SZ.NAM-1;
            END;
         DO WHILE(SUBSTR(OBUF,SZ.NAM,1)~=' ');
            SZ.NAM=SZ.NAM-1;
            END;
         MIDX=SZ.NAM+1;
         SZ.MID=RECSZ-MIDX-1;
         CALL XREFO(DCBNUM(M$SI))ALTRET(DONE25);
         CALL CLOSE(DCBNUM(M$LO));
         RETURN;
         END;
      IF I=0 THEN GOTO DONE3;
      CALL M$CORRES(CORRFPT)ALTRET(NOECO);
      WRLO.BUF_.BOUND=I-1;
      CALL M$WRITE(WRLO);
NOECO:;
      CALL X$PARSE(P_PCB);
      CALL INSERT(OBUF,P_PCB.HI_CHAR,,' ');
      CALL M$FID(FIDER)ALTRET(DONE25);
      IF FIDR.ACCT THEN OPNEI.ACCT_=FIDER.ACCT_;
      ELSE OPNEI.ACCT_=VECTOR(ERASE);
      IF FIDR.PASS THEN OPNEI.PASS_=FIDER.PASS_;
      ELSE OPNEI.PASS_=VECTOR(ERASE);
      IF FIDR.NAME THEN OPNEI.NAME_=FIDER.NAME_;
      ELSE OPNEI.NAME_=VECTOR(ERASE);
      IF FIDR.SN THEN OPNEI.SN_=FIDER.SN_;
      ELSE OPNEI.SN_=VECTOR(ERASE);
      END;
NXTF:;
   CALL M$OPEN(OPNEI)ALTRET(DONE2);
   IF NOT OFL(5) OR NOT OFL(%SELM-1) THEN GOTO DOINCL;
   GOTO NXTH1;
NXTH:CALL M$PRECORD(PRECH);
NXTH1: HKEY.C=' ';
   CALL M$READ(READH)ALTRET(NXTH2);
NXTH2: IF SUBSTR(HKEY.C,0,1)~='"' THEN GOTO DONE1;
   NEXT@=0;
   CALL NEXTENT ALTRET(DONE2);
   NAME_TYPE=ASCBIN(' ');
   J=HBUF.SEVLEV;
   CALL CONCAT(NAME_NAME,'   ',BINASC(JU(8)+48),
     BINASC(JU(9)+48),BINASC(JU(10)+48),
     BINASC(JU(11)+48),F$DCB.NAME#.C);
   NEXT@=NEXT@+RECSZ;
   KBUF0.UTS=HBUF.UTS;
   I=HBUF.PROGPSIZ;
   IF I<HBUF.DNAMSIZ+HBUF.EDEFSIZ THEN I=HBUF.DNAMSIZ+HBUF.EDEFSIZ;
   IF I<HBUF.DNAMSIZ+HBUF.SDEFSIZ THEN I=HBUF.DNAMSIZ+HBUF.SDEFSIZ;
   IF I<HBUF.RNAMSIZ+HBUF.EREFSIZ THEN I=HBUF.RNAMSIZ+HBUF.EREFSIZ;
   IF I<HBUF.RNAMSIZ+HBUF.SREFSIZ THEN I=HBUF.RNAMSIZ+HBUF.SREFSIZ;
   IF I<HBUF.RNAMSIZ+HBUF.SEGREFSIZ THEN I=HBUF.RNAMSIZ+HBUF.SEGREFSIZ;
   LB='0'B;
   PGSIZ=0;
   CALL READ0(11);
   HBUF.SEVLEV=LB.NAMPSIZ;
   IF I<LB.NAMESIZ+LB.VREBLSIZ THEN I=LB.NAMESIZ+LB.VREBLSIZ;
   DO WHILE(I-1>IN_.CHARS/4);
      CALL M$GDS(INGDS)ALTRET(DONE2);
      END;
   RDN.BUF_=IN_;
   PGSIZ=HBUF.DNAMPSIZ;
   CALL READ0(1);
   CALL READ(3);
   DO I=0 TO ARS;
      CALL NEXTENT ALTRET(DONE15);
      NAME_TYPE=SECT.TYPE(I)+48;
      J=SECT.SIZE(I);
      CALL INSERT(NAME_NAME,0,7,'  ',BINASC(JU(6)+48),
        BINASC(JU(7)+48),BINASC(JU(8)+48),BINASC(JU(9)+48),
        BINASC(JU(10)+48));
      CALL INSERT(NAME_NAME,7,,BINASC(JU(11)+48));
      IF SECT.NPTR(I)>=0 THEN
         CALL INSERT(NAME_NAME,8,,PINCRW(IN_.P$,SECT.NPTR(I))->SYM.TEXT);
      NEXT@=NEXT@+RECSZ;
      END;
   DO J=4 TO 6 BY 2;
      CALL READ(J);
      DO I=0 TO ARS;
         CALL NEXTENT ALTRET(DONE15);
         NAME_NAME=PINCRW(IN_.P$,DEFN.NPTR(I))->SYM.TEXT;
         NEXT@=NEXT@+RECSZ;
         END;
      END;
   PGSIZ=HBUF.RNAMPSIZ;
   CALL READ0(2);
   DO J=5 TO 9 BY 2;
      CALL READ(J);
      DO I=0 TO ARS;
         CALL NEXTENT ALTRET(DONE15);
         NAME_NAME=PINCRW(IN_.P$,REFN.NPTR(I))->SYM.TEXT;
         NAME_SREF=REFN.SREF(I);
         NEXT@=NEXT@+RECSZ;
         END;
      END;
   CALL M$READ(RDN)ALTRET(DONE0);
   DO WHILE(KBUF.TYPE=10);
      ARS=F$DCB.ARS#/4-1;
      IF KBUF.SUBTYPE=1 THEN DO I=0 TO ARS;
         IF ADDR(SREL(I))->LREL.MBZ=0 THEN DO;
            J=P#(ADDR(SREL(I))->LREL.OPNDTYP)+ADDR(SREL(I))->LREL.OPERAND;
            IF ADDR(SREL(I))->LREL.EVALOP~=0 THEN I=I+2;
            ELSE I=I+1;
            END;
         ELSE J=P#(SREL.OPNDTYP(I))+SREL.OPERAND(I);
         IF J<P#(4) THEN NAME_USED='1'B;
         END;
      CALL M$READ(RDN)ALTRET(DONE0);
      END;
DONE0: CALL WRITEOUT;
   PGSIZ=HBUF.SEVLEV;
   CALL READ0(15)ALTRET(NXTH);
   CALL READ(14)ALTRET(NXTH);
   DO I=0 TO ARS;
      IF DVAR.ADDRTYP(I)=3 AND DVAR.LEVEL(I)=1 THEN DO;
         CALL NEXTENT ALTRET(DONE15);
         CALL CONCAT(NAME_NAME,' ',PINCRW(IN_.P$,DVAR.NPTR(I))->SYM.TEXT);
         NEXT@=NEXT@+RECSZ;
         END;
      END;
   CALL WRITEOUT;
   GOTO NXTH;
%EJECT;
DOINCL: HKEY.L=3;
   HCHAR=' ';
   CALL M$READ(READH)ALTRET(DONE1);
   IF HKEY.L~=3 AND HKEY.L~=0 THEN GOTO DONE1;
   CALL XUU$CLOSE(XUUP);
   CALL CLOSE(DCBNUM(M$SI));
   CALL M$OPEN(SETUI);
   XUUP.FLAGS.BASE#='1'B;
   IF VBOUND(BITVECT(SETUI.NAME_))~=0 THEN XUUP.FLAGS.UP_DATE#='1'B;
   CALL XUU$OPEN(XUUP)ALTRET(DONE1);
   CALL XUU$READ(XUUP,READH.BUF_)ALTRET(DONE1);
   IBUF=' ';
   CALL INSERT(IBUF,MIDX,SZ.MID,F$DCB.NAME#.C);
   CALL INSERT(IBUF,RECSZ-1,1,'0');
   ARS=48;
   DO WHILE('1'B);
      J=8;
      DO WHILE(SUBSTR(HCHAR,J-8,1)=' ');
         J=J+1;
         END;
      CALL XLATE(SUBSTR(HCHAR,J-8,8),B$XL_UPPER,SUBSTR(HCHAR,J-8,8));
      IF SUBSTR(HCHAR,J-8,8)='%INCLUDE' THEN DO;
         CALL INDEX1(I,';',HCHAR,8);
         DO WHILE(SUBSTR(HCHAR,J,1)=' ');
            J=J+1;
            END;
         CALL INSERT(IBUF,4,SZ.NAM-4,SUBSTR(HCHAR,J,I-J));
         CALL M$WRITE(WINCL);
         END;
      ELSE IF SUBSTR(HCHAR,J-8,8)='#INCLUDE' THEN DO;
            DO WHILE SUBSTR(HCHAR,J,1)=' ';
               J=J+1;
               END;
            IF SUBSTR(HCHAR,J,1)='<' THEN SUBSTR(HCHAR,J,1)='>';
            CALL INDEX1(I,SUBSTR(HCHAR,J,1),HCHAR,J+1);
            DO UNTIL SUBSTR(HCHAR,J,1)~=' ';
               J=J+1;
               END;
            IF J>=I THEN EXIT;
            CALL INSERT(IBUF,4,SZ.NAM-4,SUBSTR(HCHAR,J,I-J));
            CALL M$WRITE(WINCL);
            END;
         ELSE IF SUBSTR(HCHAR,J-8,4)='%EOD' THEN DO;
               ARS=ARS+1;
               CALL INSERT(IBUF,RECSZ-1,1,BINASC(ARS));
               END;
      HCHAR=' ';
      CALL XUU$READ(XUUP,READH.BUF_)ALTRET(DONE1);
      END;
%EJECT;
DONE1:/*END OF THIS FILE*/;
   CALL CLOSEI;
   IF RDXR.V.DCB#~=DCBNUM(NIL) THEN CALL M$ERR;
   IF OPNEI.V.OPER.NXTF# THEN GOTO NXTF;
   IF NOT M$EI$->F$DCB.FCD# THEN CALL M$ERR;
   GOTO NXTF0;
            /**/
DONE15: CALL WRITEOUT;
DONE2:;     /* ALTRET ON OPNEI                    */
   IF B$TCB.ALT$->B$ALT.ERR.CODE~=%E$FDEOF THEN DO;
      WRLO.BUF_.BOUND=F$DCB.NAME#.L+1;
      OBUF=F$DCB.NAME#.C;
      CALL M$WRITE(WRLO);
DONE25: FLAG.ERR=B$TCB.ALT$->B$ALT.ERR;
      EFPT.V.DCB#=B$TCB.ALT$->B$ALT.DCB#;
      CALL M$ERRMSG(EFPT)ALTRET(DONE1);
      GOTO DONE1;
      END;
   OPNEI.V.OPER.NXTF#='0'B;
DONE3: CALL CLOSE(DCBNUM(M$EO));
   CALL CLOSEI;
   CALL XREFSRT;
   CALL XREFO(DCBNUM(M$EO));
   CALL CLOSE(DCBNUM(M$LO));
   RETURN;
DONE35: IF B$TCB.ALT$->B$ALT.ERR.CODE=%E$EOF
     OR B$TCB.ALT$->B$ALT.ERR.CODE=%E$EOD THEN GOTO DONE3;
   IF B$TCB.ALT$->B$ALT.ERR.CODE=%E$LD THEN GOTO SI_LD;
   GOTO DONE25;
%EJECT;
WRITELO:PROC ALTRET;
   IF I~=0 AND FLAG THEN DO;
      IF FIRSTC~=SUBSTR(SNAM,0,1) THEN DO;
         CALL M$WRITE(WRAST);
         FIRSTC=SUBSTR(SNAM,0,1);
         END;
      REC$=IN_.P$;
      DO WHILE(POFFC(REC$,IN_.P$)<NEXT@);
         WRLO.BUF_.BUF$=ADDR(REC$->SELC.C);
         WRLO.BUF_.BOUND=REC$->SELC.L-1;
         CALL M$WRITE(WRLO);
         REC$=PINCRC(REC$,SIZEC(REC$->SELC));
         END;
      WRLO.BUF_.BUF$=ADDR(OBUF);
      WRLO.BUF_.BOUND=I-1;
      CALL M$WRITE(WRLO);
      END;
   NEXT@=0;
   IF OFL(%SELM) AND OFL(%SELN) AND SEL$~=ADDR(SELS) THEN FLAG='0'B;
   OBUF=' ';
   I=HDRX(CURTYP);;
   RETURN;
%EJECT;
LOPUSH: ENTRY ALTRET;
   IF NEXT@+I>IN_.CHARS THEN DO;
      CALL M$GDS(INGDS)ALTRET(RETALT);
      END;
   PINCRC(IN_.P$,NEXT@)->SELC.L=I;
   PINCRC(IN_.P$,NEXT@)->SELC.C=OBUF;
   NEXT@=NEXT@+I+1;
   OBUF=' ';
   I=HDRX(CURTYP);
   RETURN;
RETALT: ALTRETURN;
END WRITELO;
%EJECT;
READ0: PROC(TYPE)ALTRET;
DCL TYPE UBIN;
DCL S#(0:14)UBIN CONSTANT INIT(0*3,1,0,2,0,3,0,6,0*0);
DCL T#(0:14)UBIN CONSTANT INIT(1*3,8,8,4,8,4,8,4,1*4,20);
   REC$=IN_.P$;
READ: ENTRY(TYPE)ALTRET;
   ARS=0;
   KBUF0.TYPE=TYPE;
   KBUF0.PAGE=0;
   P$=REC$;
   DO WHILE('1'B);
      RD0.BUF_.BUF$=P$;
      RD0.BUF_.BOUND=IN_.CHARS-POFFC(P$,IN_.P$);
      IF RD0.BUF_.BOUND=1048575 THEN GOTO NOMORE;
      CALL M$READ(RD0)ALTRET(NOMORE);
      ARS=(F$DCB.ARS#+3)/4;
      IF PGSIZ~=0 THEN P$=PINCRW(P$,PGSIZ);
      ELSE P$=PINCRC(P$,F$DCB.ARS#);
      KBUF0.PAGE=KBUF0.PAGE+1;
      END;
NOMORE:;
   IF REC$=IN_.P$ AND ARS>0 THEN IF PGSIZ=0 THEN REC$=P$;
      ELSE REC$=PINCRW(P$,ARS-PGSIZ);
   ELSE DO;
      P#(S#(TYPE))=NEXT@/RECSZ;
      ARS=POFFC(P$,REC$)/T#(TYPE)-1;
      END;
   PGSIZ=0;
   RETURN;
%EJECT;
NEXTENT: ENTRY ALTRET;
   IF NEXT@+RECSZ>NEXT_.CHARS THEN DO;
      CALL M$GDS(OUTGDS)ALTRET(ALTALT);
      P#(4)=NEXT_.CHARS/RECSZ;
      END;
   CALL INSERT(NAME_NAME,SZ.NAM,SZ.MID+2,BINASC(KBUF0.TYPE+48),
     SUBSTR(HKEY.C,1,SZ.MID),'0');
   RETURN;
ALTALT: ALTRETURN;
%EJECT;
WRITEOUT: ENTRY ALTRET;
   DO WHILE(NEXT@>0);
      NEXT@=NEXT@-RECSZ;
      WRITE.BUF_.BUF$=ADDR(NAME_NAME);
      CALL M$WRITE(WRITE);
      END;
   RETURN;
            /**/
CLOSEI: ENTRY ALTRET;
   CLOS1.V.DCB#=OPNEI.V.DCB#;
   GOTO CLOSE1;
CLOSE: ENTRY(TYPE) ALTRET;
   CLOS1.V.DCB#=TYPE;
CLOSE1:CALL M$CLOSE(CLOS1)ALTRET(CLOSE2);
CLOSE2:RETURN;
%EJECT;
XREFO:ENTRY(TYPE)ALTRET;
   OPNEI.V.DCB#=TYPE;
   OPNEI.V.OPER.NXTF#='0'B;
   OPNEI.ACCT_=VECTOR(NIL);
   OPNEI.NAME_=VECTOR(NIL);
   OPNEI.PASS_=VECTOR(NIL);
   OPNEI.SN_=VECTOR(NIL);
   CALL M$OPEN(OPNEI)ALTRET(ALTALT);
   IF DCBADDR(TYPE)->F$DCB.TYPE#~='XR' THEN RETURN;
   RDXR.V.DCB#=TYPE;
   PREC.V.DCB#=TYPE;
   DCB$=DCBADDR(TYPE);
   IF F$DCB.ORG#=5 THEN DO;
      PREC.V_=PRECK.V_;
      PRECK.V.DCB#=TYPE;
      PREC.KEY_=VECTOR(I);
      END;
   HDRX(0)=SZ.NAM+SZ.MID+2;
   HDRX(1)=SZ.NAM;
   HDRX(2)=SZ.NAM+SIZEC(STYPS(0))+2;
   HDRX(3)=SZ.NAM-1;
   HDRX(4)=SZ.NAM-3;
   HDRX(5)=SZ.NAM+SZ.MID+2;
   CURTYP=%SELM-1;
   CALL M$WEOF(WRLO)ALTRET(XREFO0);
XREFO0:WIDTH=DCBADDR(DCBNUM(M$LO))->F$DCB.WIDTH#;
   IF WIDTH=0 OR WIDTH>108 THEN WIDTH=108;
   WRAST.BUF_.BOUND=WIDTH-1;
   HDR0.TITL.L#=WIDTH;
   HDR0.CTL.COUNT#=WIDTH-4;
   NEXT@=0;
   DO WHILE('1'B);
      CALL M$READ(RDXR)ALTRET(RETALT);
      FLAG='1'B;
      IF SUBSTR(IBUF,0,3)>=' ' THEN GOTO XREFO2;
      OBUF=IBUF;
      I=RECSZ;
      CALL WRITELO;
      END;
   DO WHILE('1'B);
XREF0R: CALL M$READ(RDXR)ALTRET(RETALT);
      DO WHILE(SUBSTR(IBUF,0,CURTYP)~=' ');
         CALL WRITELO;
         CURTYP=CURTYP-1;
         HDR0.TITL.TITLE#=UNDERS;
         CALL INSERT(HDR0.TITL.TITLE#,SZ.NAM+1,SIZEC(HDR2(0)),HDR2(CURTYP));
         CALL INSERT(HDR0.TITL.TITLE#,0,
           MINIMUM(HDRX(CURTYP)-1,SZ.NAM,SIZEC(HDR1(0))),HDR1(CURTYP));
         CALL INSERT(HDR0.TITL.TITLE#,HDRX(CURTYP),SIZEC(HDR3(0)),HDR3(CURTYP));
         IF SUBSTR(IBUF,0,CURTYP)=' ' THEN DO;
            IF OFL(CURTYP) THEN CALL M$DEVICE(LOHDR)ALTRET(XREFO2);
            IF OFL(CURTYP) AND NAMX(CURTYP)~=CURTYP THEN GOTO XREFO2;
            SNAM=' ';
NXTSEL:     ;
            CALL INSERT(SNAM,0,2,%CONCAT(BINASC(1),BINASC(511)));
            P$=ADDR(SNAM);
            REC$=ADDR(SELS);
            DO WHILE(REC$<SEL$);
               IF REC$->SELC.C<SELC.C AND REC$->SELC.C>SUBSTR(SNAM,2)
               THEN P$=REC$;
               REC$=PINCRC(REC$,SIZEC(REC$->SELC));
               END;
            IF P$=ADDR(SNAM) AND NOT OFL(%SELN) THEN OFL(CURTYP)='0'B;
            IF NOT OFL(%SELN) OR NOT OFL(CURTYP) THEN DO;
               PREC.V.N#=(F$DCB.CRECNO-F$DCB.NRECS#)/50/(MOD(CURTYP,4)+1);
               DO WHILE((SELC.C>SUBSTR(IBUF,NAMX(CURTYP),SELC.L) AND NOT OFL(7)
                 OR NOT OFL(CURTYP)) AND SUBSTR(IBUF,0,CURTYP)=' ');
                  IF PREC.V.N#<0 THEN PREC.V.N#=-PREC.V.N#;
                  I=F$DCB.CRECNO+PREC.V.N#;
                  IF PREC.V.N#~=0 THEN CALL M$PRECORD(PREC)ALTRET(PRECR);
NXTPREC:          CALL M$READ(RDXR)ALTRET(PRECR);
                  I=I+1;
                  END;
PRECR:         ;
               PREC.V.N#=MINIMUM(-PREC.V.N#,0);
               I=F$DCB.CRECNO+PREC.V.N#;
               CALL M$PRECORD(PREC)ALTRET(IDGAS);
IDGAS:         IF PREC.V.N#~=0 THEN DO;
                  PREC.V.N#=-PREC.V.N#/10;
                  IF PREC.V.N#<3 THEN PREC.V.N#=0;
                  GOTO NXTPREC;
                  END;
               END;
            END;
XREFO2:  I=0;
         END;
      IF OFL(CURTYP) THEN DO;
         IF NOT OFL(%SELM) OR NOT OFL(%SELN) AND NAMX(CURTYP)~=CURTYP THEN DO;
            P$=ADDR(SELS);
            DO WHILE(P$<SEL$ AND
              (NOT OFL(%SELM) AND SUBSTR(IBUF,MIDX,SELC.L)~=SELC.C OR
              NOT OFL(%SELN) AND SUBSTR(IBUF,NAMX(CURTYP),SELC.L)~=SELC.C));
               P$=PINCRC(P$,SIZEC(SELC));
               END;
            IF P$>=SEL$ THEN GOTO XREF0R;
            END;
         IF NOT OFL(%SELN) AND SELC.C~=SUBSTR(IBUF,NAMX(CURTYP),SELC.L) THEN DO;
            CALL WRITELO;
            CALL INSERT(SNAM,2,,SELC.C);
            GOTO NXTSEL;
            END;
         ITYP=ASCBIN(SUBSTR(IBUF,SZ.NAM,1))-48;
         SUNDX=ASCBIN(SUBSTR(IBUF,RECSZ-1,1))-48;
         IF SUNDX>100 THEN SUNDX=SUNDX+16;
         DO CASE(CURTYP);
         CASE(2); /*SECT*/
            IF SNAM~=SUBSTR(IBUF,0,SZ.NAM+1) THEN DO;
               CALL WRITELO;
               CALL CONCAT(OBUF,SUBSTR(IBUF,1,7),' ',SUBSTR(IBUF,8,SZ.NAM-8));
               SNAM=SUBSTR(IBUF,0,SZ.NAM+1);
               CALL EDITSTR(OBUF,1,5,'105'O,SUBSTR(OBUF,1,6));
               CALL INSERT(OBUF,SZ.NAM+1,SIZEC(STYPS(0)),STYPS(ITYP));
               END;
            CALL ADDMID ALTRET(ALTALT);
         CASE(1,4); /*BASED,INCLS*/
            CALL INSERT(IBUF,0,SZ.NAM,SUBSTR(IBUF,CURTYP,SZ.NAM-CURTYP));
            IF SUBSTR(IBUF,0,SZ.NAM)~=SNAM THEN DO;
               CALL WRITELO;
               SNAM=SUBSTR(IBUF,0,SZ.NAM);
               CALL INSERT(OBUF,0,SZ.NAM,SNAM);
               END;
            CALL ADDMID ALTRET(ALTALT);
         CASE(3); /* OUNAMES                            */
            IF SNAM~=SUBSTR(IBUF,0,SZ.NAM) THEN DO;
               CALL WRITELO;
               SNAM=SUBSTR(IBUF,0,SZ.NAM);
               CALL INSERT(OBUF,0,SZ.NAM,SUBSTR(IBUF,3,4),' ',SUBSTR(IBUF,7,SZ.NAM));
               CALL EDITSTR(OBUF,0,3,'103'O,SUBSTR(OBUF,0,4));
               END;
            CALL ADDMID ALTRET(ALTALT);
         CASE(0); /* DEFS AND REFS                      */
            IF SNAM~=SUBSTR(IBUF,0,SZ.NAM) OR STYP~=ITYP/2 THEN DO;
               CALL WRITELO;
               SNAM=SUBSTR(IBUF,0,SZ.NAM);
               STYP=ITYP/2;
               OBUF=SUBSTR(IBUF,0,SZ.NAM);
               IF MOD(ITYP,2)=0 THEN CALL INSERT(OBUF,MIDX,SZ.MID,SUBSTR(IBUF,MIDX));
               ELSE CALL INSERT(OBUF,MIDX,SZ.MID,'***UNDEF***');
               CALL INSERT(OBUF,I,5,DTYPS(STYP));
               I=I+5;
               END;
            ELSE IF MOD(ITYP,2)=0 THEN DO; /*DDEF*/
                  CALL INSERT(OBUF,I,12,'***MPLDEF***');
                  I=I+12;
                  CALL LOPUSH ALTRET(ALTALT);
                  CALL INSERT(OBUF,MIDX,SZ.MID,SUBSTR(IBUF,MIDX,SZ.MID));
                  END;
            IF MOD(ITYP,2)~=0 THEN CALL ADDMID ALTRET(ALTALT);
         END;
         IF OFL(%SELM) AND OFL(%SELN) THEN DO;
            P$=ADDR(SELS);
            DO WHILE(NOT FLAG AND P$<SEL$);
               FLAG=(SUBSTR(IBUF,MIDX,MINIMUM(SZ.MID,SELC.L))=SELC.C);
               P$=PINCRC(P$,SIZEC(SELC));
               END;
            END;
         END;
      END;
RETALT: CALL WRITELO;
   HDR0.TITL.TITLE#=' ';
   CALL M$DEVICE(LOHDR)ALTRET(XREFO3);
XREFO3:;
   RETURN;
ADDMID:PROC ALTRET;
   J=SZ.MID-1;
   DO WHILE(SUBSTR(IBUF,J+MIDX,1)=' ');
      J=J-1;
      END;
   J=J+3;
   DO CASE(CURTYP);
   CASE(1,3);
   CASE(4);
      IF SUNDX~=0 THEN J=J+3;
   CASE(ELSE);
      J=J+USLEN(SUNDX);
   END;
   IF I+J>WIDTH THEN CALL LOPUSH ALTRET(ALTALT);
   IF I=HDRX(CURTYP) THEN DO;
      CALL INSERT(OBUF,I,SZ.MID,SUBSTR(IBUF,MIDX,SZ.MID));
      J=J-2;
      END;
   ELSE CALL INSERT(OBUF,I,J,', ',SUBSTR(IBUF,MIDX,SZ.MID));
      DO CASE(CURTYP);
      CASE(1,3);
         I=I+J;
      CASE(4);
         IF SUNDX=0 THEN I=I+J;
         ELSE DO;
            I=I+J-3;
            CALL INSERT(OBUF,I,1,'.');
            J=SUNDX+1;
            IF J<10 THEN DO;
               CALL BINCHAR(SUBSTR(OBUF,I+1,1),J);
               I=I+2;
               END;
            ELSE DO;
               CALL BINCHAR(SUBSTR(OBUF,I+1,2),J);
               I=I+3;
               END;
            END;
      CASE(ELSE);
         I=I+J-USLEN(SUNDX);
         IF SUNDX~=1 THEN DO;
            CALL INSERT(OBUF,I,4,USTXT(SUNDX));
            I=I+USLEN(SUNDX);
            END;
      END;
   RETURN;
ALTALT: ALTRETURN;
END ADDMID;
END READ0;
END XREF;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
GETMEM: PROC (RVEC, TYPE) ALTRET;
 
%INCLUDE CP_6;
DCL RVEC VECTOR;
DCL TYPE UBIN;
 
%FPT_GDS (FPTN=INGDS, STCLASS=SYMREF);
DCL IN_ VECTOR SYMREF;
DCL NXT$ PTR STATIC INIT(ADDR(NIL));
DCL NXTSZ SBIN STATIC INIT(0);
 
DCL I SBIN;
 
   IF NXT$=ADDR(NIL) THEN DO;
      NXT$=VBASE(IN_);
      NXTSZ=(VBOUND(IN_)+1)/4096;
      END;
   IF TYPE=0 THEN I=1; ELSE I=3;
   DO WHILE I>NXTSZ;
      CALL M$GDS(INGDS) ALTRET(RETALT);
      NXTSZ=NXTSZ+1;
      END;
   RVEC=IN_;
   VBASE(RVEC)=NXT$;
   VBOUND(RVEC)=I*4096-1;
   NXT$=PINCRW(NXT$,I*1024);
   NXTSZ=NXTSZ-I;
   RETURN;
RETALT: ALTRETURN;
 
RELMEM: ENTRY(RVEC) ALTRET;
 
   NXT$=VBASE(RVEC);
   NXTSZ=NXTSZ+(VBOUND(RVEC)+1)/4096;
END GETMEM;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
XREFSRT:PROC;
            /**/
%INCLUDE ZL_MACRO_C;
%INCLUDE CP_6;
            /**/
%F$DCB(BASED="BASED(DCB$)");
            /**/
%FPT_OPEN(FPTN=OPNF,FUN=IN,ASN=FILE,TYPE='XR');
%FPT_LINK(FPTN=LNKFPT,NAME=SRTNAM,ACCT=SYSACT,STCLASS=CONSTANT,CMD=SRTNAM);
%VLP_NAME(FPTN=SRTNAM,NAME='SORT',STCLASS=CONSTANT);
%VLP_ACCT(FPTN=SYSACT,ACCT=':SYS',STCLASS=CONSTANT);
%SORT_TABLE(FPTN=STBL);
            /**/
DCL I UBIN;
DCL DCB$ PTR;
DCL M$EO DCB;
DCL RECSZ UBIN SYMREF;
DCL EOPASS STATIC SYMDEF CHAR(8);
DCL P CONSTANT BIT(36) INIT('000000006005'O);
DCL P$ REDEF P PTR;
DCL 1 VEC_ BASED ALIGNED,
      2 L UBIN,
      2 P$ PTR;
DCL 1 SRT BASED(P$)DALIGNED,
      2 STBL,3 * CHAR(200),
      2 NAME,3 * CHAR(32),
      2 PASS CHAR(8),
      2 ACCT CHAR(8),
      2 SN,3 N UBIN,3 SN CHAR(8),
      2 OPENI DALIGNED,3 * CHAR(400),
      2 OPENO DALIGNED,3 * CHAR(400),
      2 OPENC DALIGNED,3 * CHAR(400),
      2 KTBL,3 C CHAR(24),
      2 OPTR PTR;
DCL 1 KTBL CONSTANT,
      2 * UBIN INIT(1),
      2 * CHAR(4)INIT('  AN'),
      2 *(0:15)UBIN(9)UNAL INIT(0*3,1,0*3,32,0,32*3,0*3,1);
            /**/
   STBL.PRIMARY.KEYS$=ADDR(SRT.KTBL);
   STBL.INPUT$=PINCRW(STBL.PRIMARY.KEYS$,5);
   STBL.COLLATE$=PINCRW(STBL.PRIMARY.KEYS$,7);
   STBL.COLLATE$->VEC_.L=1;
   STBL.COLLATE$->VEC_.P$=ADDR(SRT.OPENC);
   STBL.OUTPUT$=ADDR(SRT.OPENO);
   STBL.PRIMARY.INSIZ#=RECSZ;
   STBL.PRIMARY.OUTSIZ#=RECSZ;
   SRT.STBL=STBL;
            /**/
   DCB$=DCBADDR(DCBNUM(M$EO));
   SRT.NAME=F$DCB.NAME#;
   SRT.ACCT=F$DCB.ACCT#;
   SRT.PASS=EOPASS;
   SRT.SN.SN=F$DCB.PSN#;
   SRT.SN.N=1;
   ADDR(OPNF.V_)->VEC_.P$=PINCRW(ADDR(SRT.OPENI),
     POFFW(ADDR(OPNF.V),ADDR(OPNF)));
   OPNF.NAME_=VECTOR(SRT.NAME);
   OPNF.ACCT_=VECTOR(SRT.ACCT);
   OPNF.PASS_=VECTOR(SRT.PASS);
   OPNF.SN_=VECTOR(SRT.SN);
   OPNF.V.FUN#=2;
   SRT.OPENI=OPNF;
   OPNF.V.FUN#=3;
   ADDR(OPNF.V_)->VEC_.P$=PINCRW(ADDR(SRT.OPENO),
     POFFW(ADDR(OPNF.V),ADDR(OPNF)));
   OPNF.V.NRECS#=F$DCB.NRECS#;
   OPNF.V.RECL#=RECSZ;
   OPNF.V.ORG#=5; /* RELATIVE */
   SRT.OPENO=OPNF;
   ADDR(OPNF.V_)->VEC_.P$=PINCRW(ADDR(SRT.OPENC),
     POFFW(ADDR(OPNF.V),ADDR(OPNF)));
   OPNF.V.DISP#=1;
   OPNF.V.ORG#=3;
   OPNF.V.IXTNSIZE#=F$DCB.NRECS#*RECSZ/3500;
   IF OPNF.V.IXTNSIZE#<50 THEN OPNF.V.IXTNSIZE#=50;
   OPNF.NAME_=VECTOR(NIL);
   SRT.OPENC=OPNF;
            /**/
   SRT.KTBL=KTBL;
   CALL INSERT(SRT.KTBL.C,15,1,BINASC(RECSZ));
   SRT.OPTR=ADDR(SRT.OPENI);
            /**/
   CALL M$LINK(LNKFPT);
   RETURN;
END XREFSRT;
