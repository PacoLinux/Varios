VERSION A01

PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:1    
        1        1        /*M*    XSS$DATA        Memory initialization and management.           */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DDA */
        8        8        /*F*    NAME:   XSS$GETCTX
        9        9                PURPOSE:
       10       10                    This routine is called to obtain a new Session context block,
       11       11                    and optionally, a read buffer for it.
       12       12                DESCRIPTION:
       13       13                    Space for a new context block and optionally a read buffer is
       14       14                    allocated.
       15       15                    The ALTRETURN is taken if space is not available.
       16       16                INPUT:  none.
       17       17                OUTPUT: CTX$ gets the address of the new context block.  If BUF$
       18       18                        is present, it gets the address of a new read buffer.
       19       19        */
       20       20        XSS$GETCTX: PROC( CTX$, BUF$) ALTRET;
       21       21        %INCLUDE UM_CP6;
       22      873        %INCLUDE K_ADDRESS_M;
       23     1376        %INCLUDE XSS_SESSION_E;
       24     1941        %INCLUDE XSS_INTERNAL_E;
       25     2239        %INCLUDE XSS_INTERNAL_M;
       26     2828            %XSS$SCTX( NAME=SCTX, STCLASS="BASED( CTX$)");
       27     3262            %XSS$SCTX( NAME=XSS_SCTX, STCLASS="CONSTANT SYMDEF");
       28     3696            %XSS$MEMBLK( NAME=B$BLOCK);
       29     3734        %INCLUDE XSC_COMMON_M;
       30     4387            %XSC$ADDRESS;
       31     4670            %XSC$ADDRESS( NAME=XSC_ADDRESS, STCLASS="CONSTANT SYMDEF");
       32     4953            %XSC$CCB;
       33     5250
       34     5251    1       DCL XSS$BLKPTR ENTRY(2) ALTRET;
       35     5252    1       DCL XSS$BUFPTR ENTRY(2) ALTRET;
       36     5253    1       DCL XSS$CLOCK ENTRY(2);
       37     5254    1       DCL XSS$GETMEM ENTRY(3) ALTRET;
PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:2    
       38     5255    1       DCL XSS$RELMEM ENTRY(1) ALTRET;
       39     5256    1       DCL XSS$SQZMEM ENTRY ALTRET;
       40     5257    1       DCL XSS$EVLOG ENTRY(2);
       41     5258
       42     5259    1       DCL XSS_CCB$$ PTR INIT( ADDR( NIL)) STATIC SYMDEF;
       43     5260    1       DCL XSS_MAPSCID$ PTR INIT( ADDR( NIL)) STATIC SYMDEF;
       44     5261    1       DCL XSS_MAX_LCID SBIN INIT( 8) STATIC SYMDEF;
       45     5262    1       DCL XSS_GENERIC$ PTR STATIC SYMDEF;  /* unused here, but necessary */
       46     5263
       47     5264    1       DCL BLKX UBIN HALF HALIGNED;
       48     5265    1       DCL B$ PTR;
       49     5266    1       DCL BUF$ PTR;
       50     5267    1       DCL BUFREQ BIT(1);
       51     5268    1       DCL B$UBIN9 UBIN(9) BASED CALIGNED;
       52     5269    1       DCL CCB$(0:0) PTR BASED( XSS_CCB$$) ALIGNED;
       53     5270    1       DCL CTXINITED BIT(1) STATIC INIT( %FALSE);  /* set iff CTX array init'd */
       54     5271    1       DCL CTX$ PTR;
       55     5272    1       DCL IBYTE UBIN BYTE CALIGNED;
       56     5273    1       DCL I SBIN;
       57     5274    1       DCL LEN REDEF I SBIN;
       58     5275    1       DCL LENBYTES CHAR( LEN) BASED CALIGNED;
       59     5276    1       DCL LASTGET SBIN STATIC;
       60     5277    1       DCL MAPSCID(0:0) UBIN HALF BASED( XSS_MAPSCID$) HALIGNED;
       61     5278    1       DCL TMP$ PTR;
       62     5279    1       DCL SRCX UBIN HALF CALIGNED;
       63     5280    1       DCL DSTX UBIN HALF CALIGNED;
       64     5281    1       DCL COMX UBIN HALF CALIGNED;
       65     5282    1       DCL UADR$ PTR;
       66     5283
       67     5284    1       BUFREQ = %FALSE;
       68     5285    1       IF ADDR( BUF$) ~= ADDR( NIL) THEN
       69     5286    1           BUFREQ = %TRUE;
       70     5287    1       SRCX = %NULL;
       71     5288    1       DSTX = %NULL;
       72     5289    1       COMX = %NULL;
       73     5290    2       IF NOT CTXINITED THEN DO;
       74     5291                /* figure out how many bytes to allocate for MAPSCID array */
PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:3    
       75     5292    2           I = 2 * ( 1 + XSS_MAX_LCID);
       76     5293                /* allocate the space and set it up */
       77     5294    2           CALL XSS$GETMEM( BLKX, XSS_MAPSCID$, I);
       78     5295    3           DO I = 1 TO XSS_MAX_LCID;
       79     5296    3               MAPSCID( I) = %NULL;
       80     5297    3               END;
       81     5298    2           MAPSCID( 0) = 0;  /* unused */
       82     5299    2           LASTGET = XSS_MAX_LCID;
       83     5300                /* allocate space for internal CCBs and CCB pointer array */
       84     5301    2           I = 1 + XSS_MAX_LCID + ( XSS_MAX_LCID * SIZEC( XSC$CCB));
       85     5302    2           CALL XSS$GETMEM( BLKX, XSS_CCB$$, I);
       86     5303    2           B$ = PINCRW( XSS_CCB$$, XSS_MAX_LCID + 1);
       87     5304    3           DO I = 1 TO XSS_MAX_LCID;
       88     5305    3               CCB$(I) = B$;
       89     5306    3               B$ = PINCRW( B$, SIZEW( XSC$CCB));
       90     5307    3               END;
       91     5308    2           CCB$(0) = ADDR( NIL);
       92     5309    2           CTXINITED = %TRUE;
       93     5310    2           END;
       94     5311        %EJECT;
PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:4    
       95     5312            /* possibly allocate space for the read buffer */
       96     5313    1       IF BUFREQ THEN
       97     5314    1           CALL XSS$GETMEM( BLKX, BUF$, %BUFSIZE)
       98     5315    2           WHENRETURN DO;
       99     5316    2               CALL XSS$BLKPTR( BLKX, BUF$);  /* point at memory block itself */
      100     5317    2               END;
      101     5318    2           WHENALTRETURN DO;
      102     5319    2               ALTRETURN;
      103     5320    2               END;
      104     5321    1       CALL XSS$GETMEM( SRCX, UADR$, SIZEC( XSC_ADDRESS)) ALTRET( OOPS);
      105     5322    1       UADR$->XSC$ADDRESS = XSC_ADDRESS;
      106     5323    1       CALL XSS$GETMEM( DSTX, UADR$, SIZEC( XSC_ADDRESS)) ALTRET( OOPS);
      107     5324    1       UADR$->XSC$ADDRESS = XSC_ADDRESS;
      108     5325    1       LEN = 65;
      109     5326    1       CALL XSS$GETMEM( COMX, TMP$, LEN) ALTRET( OOPS);
      110     5327    1       TMP$->LENBYTES = ' ';
      111     5328    1       TMP$->B$UBIN9 = 0;
      112     5329            /* allocate space for the context block */
      113     5330    1       CALL XSS$GETMEM( BLKX, CTX$, SIZEC( SCTX))
      114     5331    2       WHENRETURN DO;
      115     5332    2           CALL XSS$BLKPTR( BLKX, CTX$);  /* point at memory block itself */
      116     5333    2           END;
      117     5334    2       WHENALTRETURN DO;
      118     5335    2   OOPS:
      119     5336    2           CTX$ = ADDR( NIL);
      120     5337    3           IF BUFREQ THEN DO;
      121     5338    3               CALL XSS$RELMEM( BUF$->B$BLOCK.BLKX);
      122     5339    3               BUF$ = ADDR( NIL);
      123     5340    3               END;
      124     5341    2           IF SRCX ~= %NULL THEN
      125     5342    2               CALL XSS$RELMEM( SRCX);
      126     5343    2           IF DSTX ~= %NULL THEN
      127     5344    2               CALL XSS$RELMEM( DSTX);
      128     5345    2           IF COMX ~= %NULL THEN
      129     5346    2               CALL XSS$RELMEM( COMX);
      130     5347    2           ALTRETURN;
      131     5348    2           END;
PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:5    
      132     5349        %EJECT;
PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:6    
      133     5350            /* find a free slot with aid of roving pointer */
      134     5351    1       I = LASTGET;
      135     5352    1   LOOP:
      136     5353    2       DO WHILE( %TRUE);
      137     5354    2           I = I + 1;
      138     5355    2           IF I > XSS_MAX_LCID THEN
      139     5356    2               I = 1;
      140     5357    3           IF I = LASTGET THEN DO;
      141     5358                    /* We cycled through all the slots and none were free */
      142     5359    3               CALL XSS$RELMEM( CTX$->B$BLOCK.BLKX);
      143     5360    3               GOTO OOPS;
      144     5361    3               END;
      145     5362    2           IF MAPSCID( I) = %NULL THEN
      146     5363    2               EXIT LOOP;
      147     5364    2           END;
      148     5365            /* found a free slot */
      149     5366    1       MAPSCID( I) = BLKX;
      150     5367    1       CALL XSS$BUFPTR( BLKX, CTX$);  /* now point at buffer within mem block */
      151     5368    1       SCTX = XSS_SCTX;
      152     5369    1       SCTX.SCID = I;
      153     5370    1       SCTX.STATE = %XSS_SST_01;  /* Idle, no Transport connection */
      154     5371    1       SCTX.PO = 1;
      155     5372    1       SCTX.VN = 1;
      156     5373    1       SCTX.TSDUMS.INI = 2000;
      157     5374    1       SCTX.TSDUMS.RSP = 2000;
      158     5375    1       SCTX.SRCX = SRCX;
      159     5376    1       SCTX.DSTX = DSTX;
      160     5377    1       SCTX.COMX = COMX;
      161     5378    2       IF BUFREQ THEN DO;
      162     5379    2           SCTX.BUFX = BUF$->B$BLOCK.BLKX;
      163     5380    2           SCTX.LATCH.MSG$ = ADDR( BUF$->B$BLOCK.DATA);
      164     5381    2           SCTX.EVENT# = I + 512 * %XSS_EVID;
      165     5382    2           END;
      166     5383            /* update roving pointer for next time */
      167     5384    1       LASTGET = I;
      168     5385    1       CALL XSS$EVLOG( 'GC', I);
      169     5386    1       RETURN;
PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:7    
      170     5387        %EJECT;
PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:8    
      171     5388        /*F*    NAME:   XSS$RELCTX
      172     5389                PURPOSE:
      173     5390                    This routine is called to release a Session context block.
      174     5391                DESCRIPTION:
      175     5392                    The memory block for the read buffer is released, and then the
      176     5393                    memory block for the context itself is released.
      177     5394                    The ALTRETURN is taken if the passed pointer doesn't point at
      178     5395                    a Session context.
      179     5396                INPUT:  CTX$ is the address of the context block to release.
      180     5397                OUTPUT: none.
      181     5398        */
      182     5399    1   XSS$RELCTX: ENTRY( CTX$) ALTRET;
      183     5400
      184     5401    1       I = SCTX.SCID;
      185     5402    1       CALL XSS$EVLOG( 'RC', I);
      186     5403            /* consistency checks */
      187     5404    1       BLKX = MAPSCID( I);
      188     5405    1       IF BLKX = %NULL THEN
      189     5406    1           ALTRETURN;
      190     5407    1       TMP$ = PINCRW( CTX$, -2);  /*N*  note hardwired B$BLOCK size here */
      191     5408    1       IF BLKX ~= TMP$->B$BLOCK.BLKX THEN
      192     5409    1           ALTRETURN;
      193     5410            /* looks good.. release read buffer */
      194     5411    2       IF SCTX.BUFX ~= %NULL THEN DO;
      195     5412    2           CALL XSS$RELMEM( SCTX.BUFX) ALTRET( GETOUT);
      196     5413    2           SCTX.BUFX = %NULL;
      197     5414    2           END;
      198     5415            /* if connection startup failed, release SCONRQS UserData */
      199     5416    2       IF SCTX.HEADX ~= %NULL THEN DO;
      200     5417    2           CALL XSS$RELMEM( SCTX.HEADX) ALTRET( GETOUT);
      201     5418    2           SCTX.HEADX = %NULL;
      202     5419    2           END;
      203     5420            /* release the two address blocks as well */
      204     5421    2       IF SCTX.SRCX ~= %NULL THEN DO;
      205     5422    2           CALL XSS$RELMEM( SCTX.SRCX) ALTRET( GETOUT);
      206     5423    2           SCTX.SRCX = %NULL;
      207     5424    2           END;
PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:9    
      208     5425    2       IF SCTX.DSTX ~= %NULL THEN DO;
      209     5426    2           CALL XSS$RELMEM( SCTX.DSTX) ALTRET( GETOUT);
      210     5427    2           SCTX.DSTX = %NULL;
      211     5428    2           END;
      212     5429            /* release the common reference buffer too */
      213     5430    2       IF SCTX.COMX ~= %NULL THEN DO;
      214     5431    2           CALL XSS$RELMEM( SCTX.COMX) ALTRET( GETOUT);
      215     5432    2           SCTX.COMX = %NULL;
      216     5433    2           END;
      217     5434            /* cancel alarm if necessary */
      218     5435    2       IF SCTX.ALARM THEN DO;
      219     5436    2           IBYTE = I;
      220     5437    2           CALL XSS$CLOCK( %CANCLK, IBYTE);
      221     5438    2           END;
      222     5439            /* then release context block */
      223     5440    1       BLKX = MAPSCID( I);
      224     5441    1       CALL XSS$RELMEM( BLKX) ALTRET( GETOUT);
      225     5442    1       MAPSCID( I) = %NULL;
      226     5443            /* try to garbage collect */
      227     5444    1       CALL XSS$SQZMEM;
      228     5445    1       RETURN;
      229     5446    1   GETOUT:
      230     5447    1       ALTRETURN;
      231     5448
      232     5449    1       END XSS$GETCTX;
      233     5450        %EOD;

PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:10   
--  Include file information  --

   XSC_COMMON_M.:XSA1TOU  is referenced.
   XSS_INTERNAL_M.:XSA1TOU  is referenced.
   XSS_INTERNAL_E.:XSA1TOU  is referenced.
   XSS_SESSION_E.:XSA1TOU  is referenced.
   K_ADDRESS_M.:LIB_E05  is referenced.
   UM_CP6.:E05OU  is referenced.
      No diagnostics issued in procedure XSS$GETCTX.

   Procedure XSS$GETCTX requires 469 words for executable code.
   Procedure XSS$GETCTX requires 20 words of local(AUTO) storage.

PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:11   

 Object Unit name= XSS$GETCTX                                 File name= XSS$DATA.:XSA1TOU
 UTS= OCT 01 '97 12:13:08.24 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  RoData even  UTS    113    161  XSS$GETCTX
    1   Data  even  none     6      6  XSS$GETCTX
    2   Proc  even  none   469    725  XSS$GETCTX
    3  RoData even  none    22     26  XSS$GETCTX

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes    yes     yes      Std        2  XSS$GETCTX
     2    503          yes     yes      Std        1  XSS$RELCTX

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
    0      0  XSS_SCTX                           0     43  XSC_ADDRESS
    1      0  XSS_CCB$$                          1      1  XSS_MAPSCID$
    1      2  XSS_MAX_LCID                       1      3  XSS_GENERIC$
PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:12   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       3 XSS$GETMEM
 yes     yes           Std       2 XSS$BLKPTR
 yes     yes           Std       1 XSS$RELMEM
 yes     yes           Std       2 XSS$BUFPTR
         yes           Std       2 XSS$EVLOG
         yes           Std       2 XSS$CLOCK
 yes     yes           Std       0 XSS$SQZMEM
                       nStd      0 X66_AUTO_2
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:13   


        1        1        /*M*    XSS$DATA        Memory initialization and management.           */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DDA */
        8        8        /*F*    NAME:   XSS$GETCTX
        9        9                PURPOSE:
       10       10                    This routine is called to obtain a new Session context block,
       11       11                    and optionally, a read buffer for it.
       12       12                DESCRIPTION:
       13       13                    Space for a new context block and optionally a read buffer is
       14       14                    allocated.
       15       15                    The ALTRETURN is taken if space is not available.
       16       16                INPUT:  none.
       17       17                OUTPUT: CTX$ gets the address of the new context block.  If BUF$
       18       18                        is present, it gets the address of a new read buffer.
       19       19        */
       20       20        XSS$GETCTX: PROC( CTX$, BUF$) ALTRET;

     20  2 000000   000000 700200 xent  XSS$GETCTX   TSX0  ! X66_AUTO_2
         2 000001   000024 000002                    ZERO    20,2

       21       21        %INCLUDE UM_CP6;
       22      873        %INCLUDE K_ADDRESS_M;
       23     1376        %INCLUDE XSS_SESSION_E;
       24     1941        %INCLUDE XSS_INTERNAL_E;
       25     2239        %INCLUDE XSS_INTERNAL_M;
       26     2828            %XSS$SCTX( NAME=SCTX, STCLASS="BASED( CTX$)");
       27     3262            %XSS$SCTX( NAME=XSS_SCTX, STCLASS="CONSTANT SYMDEF");
       28     3696            %XSS$MEMBLK( NAME=B$BLOCK);
       29     3734        %INCLUDE XSC_COMMON_M;
       30     4387            %XSC$ADDRESS;
       31     4670            %XSC$ADDRESS( NAME=XSC_ADDRESS, STCLASS="CONSTANT SYMDEF");
       32     4953            %XSC$CCB;
PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:14   
       33     5250
       34     5251    1       DCL XSS$BLKPTR ENTRY(2) ALTRET;
       35     5252    1       DCL XSS$BUFPTR ENTRY(2) ALTRET;
       36     5253    1       DCL XSS$CLOCK ENTRY(2);
       37     5254    1       DCL XSS$GETMEM ENTRY(3) ALTRET;
       38     5255    1       DCL XSS$RELMEM ENTRY(1) ALTRET;
       39     5256    1       DCL XSS$SQZMEM ENTRY ALTRET;
       40     5257    1       DCL XSS$EVLOG ENTRY(2);
       41     5258
       42     5259    1       DCL XSS_CCB$$ PTR INIT( ADDR( NIL)) STATIC SYMDEF;
       43     5260    1       DCL XSS_MAPSCID$ PTR INIT( ADDR( NIL)) STATIC SYMDEF;
       44     5261    1       DCL XSS_MAX_LCID SBIN INIT( 8) STATIC SYMDEF;
       45     5262    1       DCL XSS_GENERIC$ PTR STATIC SYMDEF;  /* unused here, but necessary */
       46     5263
       47     5264    1       DCL BLKX UBIN HALF HALIGNED;
       48     5265    1       DCL B$ PTR;
       49     5266    1       DCL BUF$ PTR;
       50     5267    1       DCL BUFREQ BIT(1);
       51     5268    1       DCL B$UBIN9 UBIN(9) BASED CALIGNED;
       52     5269    1       DCL CCB$(0:0) PTR BASED( XSS_CCB$$) ALIGNED;
       53     5270    1       DCL CTXINITED BIT(1) STATIC INIT( %FALSE);  /* set iff CTX array init'd */
       54     5271    1       DCL CTX$ PTR;
       55     5272    1       DCL IBYTE UBIN BYTE CALIGNED;
       56     5273    1       DCL I SBIN;
       57     5274    1       DCL LEN REDEF I SBIN;
       58     5275    1       DCL LENBYTES CHAR( LEN) BASED CALIGNED;
       59     5276    1       DCL LASTGET SBIN STATIC;
       60     5277    1       DCL MAPSCID(0:0) UBIN HALF BASED( XSS_MAPSCID$) HALIGNED;
       61     5278    1       DCL TMP$ PTR;
       62     5279    1       DCL SRCX UBIN HALF CALIGNED;
       63     5280    1       DCL DSTX UBIN HALF CALIGNED;
       64     5281    1       DCL COMX UBIN HALF CALIGNED;
       65     5282    1       DCL UADR$ PTR;
       66     5283
       67     5284    1       BUFREQ = %FALSE;

   5284  2 000002   200007 450100                    STZ     BUFREQ,,AUTO
PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:15   

       68     5285    1       IF ADDR( BUF$) ~= ADDR( NIL) THEN

   5285  2 000003   200004 236100                    LDQ     @BUF$,,AUTO
         2 000004   000000 116000 3                  CMPQ    0
         2 000005   000010 600000 2                  TZE     s:5287

       69     5286    1           BUFREQ = %TRUE;

   5286  2 000006   400000 236003                    LDQ     -131072,DU
         2 000007   200007 756100                    STQ     BUFREQ,,AUTO

       70     5287    1       SRCX = %NULL;

   5287  2 000010   777777 220003                    LDX0    -1,DU
         2 000011   200013 740100                    STX0    SRCX,,AUTO

       71     5288    1       DSTX = %NULL;

   5288  2 000012   200014 740100                    STX0    DSTX,,AUTO

       72     5289    1       COMX = %NULL;

   5289  2 000013   200015 740100                    STX0    COMX,,AUTO

       73     5290    2       IF NOT CTXINITED THEN DO;

   5290  2 000014   000004 234000 1                  SZN     CTXINITED
         2 000015   000125 604000 2                  TMI     s:5313

       74     5291                /* figure out how many bytes to allocate for MAPSCID array */
       75     5292    2           I = 2 * ( 1 + XSS_MAX_LCID);

   5292  2 000016   000002 235000 1                  LDA     XSS_MAX_LCID
         2 000017   000001 735000                    ALS     1
         2 000020   000002 035007                    ADLA    2,DL
         2 000021   200011 755100                    STA     I,,AUTO
PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:16   

       76     5293                /* allocate the space and set it up */
       77     5294    2           CALL XSS$GETMEM( BLKX, XSS_MAPSCID$, I);

   5294  2 000022   200011 630500                    EPPR0   I,,AUTO
         2 000023   200022 450500                    STP0    UADR$+4,,AUTO
         2 000024   000002 236000 3                  LDQ     2
         2 000025   200021 756100                    STQ     UADR$+3,,AUTO
         2 000026   200005 631500                    EPPR1   BLKX,,AUTO
         2 000027   200020 451500                    STP1    UADR$+2,,AUTO
         2 000030   200020 630500                    EPPR0   UADR$+2,,AUTO
         2 000031   000001 631400 3                  EPPR1   1
         2 000032   000000 701000 xent               TSX1    XSS$GETMEM
         2 000033   000000 011000                    NOP     0

       78     5295    3           DO I = 1 TO XSS_MAX_LCID;

   5295  2 000034   000001 235007                    LDA     1,DL
         2 000035   200011 755100                    STA     I,,AUTO
         2 000036   000046 710000 2                  TRA     s:5297+1

       79     5296    3               MAPSCID( I) = %NULL;

   5296  2 000037   200011 235100                    LDA     I,,AUTO
         2 000040   000001 735000                    ALS     1
         2 000041   000001 470400 1                  LDP0    XSS_MAPSCID$
         2 000042   000105 101400                    MRL     fill='000'O
         2 000043   000003 000004 3                  ADSC9   3                        cn=0,n=4
         2 000044   000000 000002                    ADSC9   0,A,PR0                  cn=0,n=2

       80     5297    3               END;

   5297  2 000045   200011 054100                    AOS     I,,AUTO
         2 000046   200011 236100                    LDQ     I,,AUTO
         2 000047   000002 116000 1                  CMPQ    XSS_MAX_LCID
         2 000050   000037 604400 2                  TMOZ    s:5296

PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:17   
       81     5298    2           MAPSCID( 0) = 0;  /* unused */

   5298  2 000051   000001 470400 1                  LDP0    XSS_MAPSCID$
         2 000052   000100 101400                    MRL     fill='000'O
         2 000053   000004 000004 3                  ADSC9   4                        cn=0,n=4
         2 000054   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2

       82     5299    2           LASTGET = XSS_MAX_LCID;

   5299  2 000055   000002 235000 1                  LDA     XSS_MAX_LCID
         2 000056   000005 755000 1                  STA     LASTGET

       83     5300                /* allocate space for internal CCBs and CCB pointer array */
       84     5301    2           I = 1 + XSS_MAX_LCID + ( XSS_MAX_LCID * SIZEC( XSC$CCB));

   5301  2 000057   000002 236000 1                  LDQ     XSS_MAX_LCID
         2 000060   000070 402007                    MPY     56,DL
         2 000061   000002 036000 1                  ADLQ    XSS_MAX_LCID
         2 000062   000001 036007                    ADLQ    1,DL
         2 000063   200011 756100                    STQ     I,,AUTO

       85     5302    2           CALL XSS$GETMEM( BLKX, XSS_CCB$$, I);

   5302  2 000064   200011 630500                    EPPR0   I,,AUTO
         2 000065   200022 450500                    STP0    UADR$+4,,AUTO
         2 000066   000005 236000 3                  LDQ     5
         2 000067   200021 756100                    STQ     UADR$+3,,AUTO
         2 000070   200005 631500                    EPPR1   BLKX,,AUTO
         2 000071   200020 451500                    STP1    UADR$+2,,AUTO
         2 000072   200020 630500                    EPPR0   UADR$+2,,AUTO
         2 000073   000001 631400 3                  EPPR1   1
         2 000074   000000 701000 xent               TSX1    XSS$GETMEM
         2 000075   000000 011000                    NOP     0

       86     5303    2           B$ = PINCRW( XSS_CCB$$, XSS_MAX_LCID + 1);

   5303  2 000076   000002 236000 1                  LDQ     XSS_MAX_LCID
PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:18   
         2 000077   000022 736000                    QLS     18
         2 000100   000001 036003                    ADLQ    1,DU
         2 000101   000000 036000 1                  ADLQ    XSS_CCB$$
         2 000102   200006 756100                    STQ     B$,,AUTO

       87     5304    3           DO I = 1 TO XSS_MAX_LCID;

   5304  2 000103   000001 235007                    LDA     1,DL
         2 000104   200011 755100                    STA     I,,AUTO
         2 000105   000115 710000 2                  TRA     s:5307+1

       88     5305    3               CCB$(I) = B$;

   5305  2 000106   200006 236100                    LDQ     B$,,AUTO
         2 000107   000000 470400 1                  LDP0    XSS_CCB$$
         2 000110   200011 720100                    LXL0    I,,AUTO
         2 000111   000000 756110                    STQ     0,X0,PR0

       89     5306    3               B$ = PINCRW( B$, SIZEW( XSC$CCB));

   5306  2 000112   000016 036003                    ADLQ    14,DU
         2 000113   200006 756100                    STQ     B$,,AUTO

       90     5307    3               END;

   5307  2 000114   200011 054100                    AOS     I,,AUTO
         2 000115   200011 236100                    LDQ     I,,AUTO
         2 000116   000002 116000 1                  CMPQ    XSS_MAX_LCID
         2 000117   000106 604400 2                  TMOZ    s:5305

       91     5308    2           CCB$(0) = ADDR( NIL);

   5308  2 000120   000000 236000 3                  LDQ     0
         2 000121   000000 470400 1                  LDP0    XSS_CCB$$
         2 000122   000000 756100                    STQ     0,,PR0

       92     5309    2           CTXINITED = %TRUE;
PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:19   

   5309  2 000123   400000 236003                    LDQ     -131072,DU
         2 000124   000004 756000 1                  STQ     CTXINITED

       93     5310    2           END;

       94     5311        %EJECT;
PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:20   
       95     5312            /* possibly allocate space for the read buffer */
       96     5313    1       IF BUFREQ THEN

   5313  2 000125   200007 234100                    SZN     BUFREQ,,AUTO
         2 000126   000153 605000 2                  TPL     s:5321

       97     5314    1           CALL XSS$GETMEM( BLKX, BUF$, %BUFSIZE)

   5314  2 000127   000007 236000 3                  LDQ     7
         2 000130   200022 756100                    STQ     UADR$+4,,AUTO
         2 000131   200004 236100                    LDQ     @BUF$,,AUTO
         2 000132   200021 756100                    STQ     UADR$+3,,AUTO
         2 000133   200005 630500                    EPPR0   BLKX,,AUTO
         2 000134   200020 450500                    STP0    UADR$+2,,AUTO
         2 000135   200020 630500                    EPPR0   UADR$+2,,AUTO
         2 000136   000001 631400 3                  EPPR1   1
         2 000137   000000 701000 xent               TSX1    XSS$GETMEM
         2 000140   000152 702000 2                  TSX2    s:5319

       98     5315    2           WHENRETURN DO;

       99     5316    2               CALL XSS$BLKPTR( BLKX, BUF$);  /* point at memory block itself */

   5316  2 000141   200004 236100                    LDQ     @BUF$,,AUTO
         2 000142   200021 756100                    STQ     UADR$+3,,AUTO
         2 000143   200005 630500                    EPPR0   BLKX,,AUTO
         2 000144   200020 450500                    STP0    UADR$+2,,AUTO
         2 000145   200020 630500                    EPPR0   UADR$+2,,AUTO
         2 000146   000010 631400 3                  EPPR1   8
         2 000147   000000 701000 xent               TSX1    XSS$BLKPTR
         2 000150   000000 011000                    NOP     0

      100     5317    2               END;

   5317  2 000151   000153 710000 2                  TRA     s:5321

      101     5318    2           WHENALTRETURN DO;
PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:21   

      102     5319    2               ALTRETURN;

   5319  2 000152   000000 702200 xent               TSX2  ! X66_AALT

      103     5320    2               END;
      104     5321    1       CALL XSS$GETMEM( SRCX, UADR$, SIZEC( XSC_ADDRESS)) ALTRET( OOPS);

   5321  2 000153   000012 236000 3                  LDQ     10
         2 000154   200022 756100                    STQ     UADR$+4,,AUTO
         2 000155   200016 630500                    EPPR0   UADR$,,AUTO
         2 000156   200021 450500                    STP0    UADR$+3,,AUTO
         2 000157   200013 631500                    EPPR1   SRCX,,AUTO
         2 000160   200020 451500                    STP1    UADR$+2,,AUTO
         2 000161   200020 630500                    EPPR0   UADR$+2,,AUTO
         2 000162   000001 631400 3                  EPPR1   1
         2 000163   000000 701000 xent               TSX1    XSS$GETMEM
         2 000164   000257 702000 2                  TSX2    OOPS

      105     5322    1       UADR$->XSC$ADDRESS = XSC_ADDRESS;

   5322  2 000165   200016 470500                    LDP0    UADR$,,AUTO
         2 000166   000100 100400                    MLR     fill='000'O
         2 000167   000043 000456 0                  ADSC9   XSC_ADDRESS              cn=0,n=302
         2 000170   000000 000456                    ADSC9   0,,PR0                   cn=0,n=302

      106     5323    1       CALL XSS$GETMEM( DSTX, UADR$, SIZEC( XSC_ADDRESS)) ALTRET( OOPS);

   5323  2 000171   000012 236000 3                  LDQ     10
         2 000172   200022 756100                    STQ     UADR$+4,,AUTO
         2 000173   200016 630500                    EPPR0   UADR$,,AUTO
         2 000174   200021 450500                    STP0    UADR$+3,,AUTO
         2 000175   200014 631500                    EPPR1   DSTX,,AUTO
         2 000176   200020 451500                    STP1    UADR$+2,,AUTO
         2 000177   200020 630500                    EPPR0   UADR$+2,,AUTO
         2 000200   000001 631400 3                  EPPR1   1
         2 000201   000000 701000 xent               TSX1    XSS$GETMEM
PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:22   
         2 000202   000257 702000 2                  TSX2    OOPS

      107     5324    1       UADR$->XSC$ADDRESS = XSC_ADDRESS;

   5324  2 000203   200016 470500                    LDP0    UADR$,,AUTO
         2 000204   000100 100400                    MLR     fill='000'O
         2 000205   000043 000456 0                  ADSC9   XSC_ADDRESS              cn=0,n=302
         2 000206   000000 000456                    ADSC9   0,,PR0                   cn=0,n=302

      108     5325    1       LEN = 65;

   5325  2 000207   000101 235007                    LDA     65,DL
         2 000210   200011 755100                    STA     I,,AUTO

      109     5326    1       CALL XSS$GETMEM( COMX, TMP$, LEN) ALTRET( OOPS);

   5326  2 000211   200011 630500                    EPPR0   I,,AUTO
         2 000212   200022 450500                    STP0    UADR$+4,,AUTO
         2 000213   200012 631500                    EPPR1   TMP$,,AUTO
         2 000214   200021 451500                    STP1    UADR$+3,,AUTO
         2 000215   200015 633500                    EPPR3   COMX,,AUTO
         2 000216   200020 453500                    STP3    UADR$+2,,AUTO
         2 000217   200020 630500                    EPPR0   UADR$+2,,AUTO
         2 000220   000001 631400 3                  EPPR1   1
         2 000221   000000 701000 xent               TSX1    XSS$GETMEM
         2 000222   000257 702000 2                  TSX2    OOPS

      110     5327    1       TMP$->LENBYTES = ' ';

   5327  2 000223   200012 470500                    LDP0    TMP$,,AUTO
         2 000224   200011 720100                    LXL0    I,,AUTO
         2 000225   040140 100400                    MLR     fill='040'O
         2 000226   000013 000001 3                  ADSC9   11                       cn=0,n=1
         2 000227   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0

      111     5328    1       TMP$->B$UBIN9 = 0;

PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:23   
   5328  2 000230   200012 470500                    LDP0    TMP$,,AUTO
         2 000231   000100 101400                    MRL     fill='000'O
         2 000232   000004 000004 3                  ADSC9   4                        cn=0,n=4
         2 000233   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1

      112     5329            /* allocate space for the context block */
      113     5330    1       CALL XSS$GETMEM( BLKX, CTX$, SIZEC( SCTX))

   5330  2 000234   000015 236000 3                  LDQ     13
         2 000235   200022 756100                    STQ     UADR$+4,,AUTO
         2 000236   200003 236100                    LDQ     @CTX$,,AUTO
         2 000237   200021 756100                    STQ     UADR$+3,,AUTO
         2 000240   200005 630500                    EPPR0   BLKX,,AUTO
         2 000241   200020 450500                    STP0    UADR$+2,,AUTO
         2 000242   200020 630500                    EPPR0   UADR$+2,,AUTO
         2 000243   000001 631400 3                  EPPR1   1
         2 000244   000000 701000 xent               TSX1    XSS$GETMEM
         2 000245   000257 702000 2                  TSX2    OOPS

      114     5331    2       WHENRETURN DO;

      115     5332    2           CALL XSS$BLKPTR( BLKX, CTX$);  /* point at memory block itself */

   5332  2 000246   200003 236100                    LDQ     @CTX$,,AUTO
         2 000247   200021 756100                    STQ     UADR$+3,,AUTO
         2 000250   200005 630500                    EPPR0   BLKX,,AUTO
         2 000251   200020 450500                    STP0    UADR$+2,,AUTO
         2 000252   200020 630500                    EPPR0   UADR$+2,,AUTO
         2 000253   000010 631400 3                  EPPR1   8
         2 000254   000000 701000 xent               TSX1    XSS$BLKPTR
         2 000255   000000 011000                    NOP     0

      116     5333    2           END;

   5333  2 000256   000335 710000 2                  TRA     s:5351

      117     5334    2       WHENALTRETURN DO;
PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:24   

      118     5335    2   OOPS:
      119     5336    2           CTX$ = ADDR( NIL);

   5336  2 000257   000000 236000 3     OOPS         LDQ     0
         2 000260   200003 470500                    LDP0    @CTX$,,AUTO
         2 000261   000000 756100                    STQ     0,,PR0

      120     5337    3           IF BUFREQ THEN DO;

   5337  2 000262   200007 234100                    SZN     BUFREQ,,AUTO
         2 000263   000301 605000 2                  TPL     s:5341

      121     5338    3               CALL XSS$RELMEM( BUF$->B$BLOCK.BLKX);

   5338  2 000264   200004 471500                    LDP1    @BUF$,,AUTO
         2 000265   100000 473500                    LDP3    0,,PR1
         2 000266   200021 453500                    STP3    UADR$+3,,AUTO
         2 000267   200021 236100                    LDQ     UADR$+3,,AUTO
         2 000270   400000 036007                    ADLQ    -131072,DL
         2 000271   200020 756100                    STQ     UADR$+2,,AUTO
         2 000272   200020 630500                    EPPR0   UADR$+2,,AUTO
         2 000273   000016 631400 3                  EPPR1   14
         2 000274   000000 701000 xent               TSX1    XSS$RELMEM
         2 000275   000000 011000                    NOP     0

      122     5339    3               BUF$ = ADDR( NIL);

   5339  2 000276   000000 236000 3                  LDQ     0
         2 000277   200004 470500                    LDP0    @BUF$,,AUTO
         2 000300   000000 756100                    STQ     0,,PR0

      123     5340    3               END;

      124     5341    2           IF SRCX ~= %NULL THEN

   5341  2 000301   200013 220100                    LDX0    SRCX,,AUTO
PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:25   
         2 000302   777777 100003                    CMPX0   -1,DU
         2 000303   000312 600000 2                  TZE     s:5343

      125     5342    2               CALL XSS$RELMEM( SRCX);

   5342  2 000304   200013 630500                    EPPR0   SRCX,,AUTO
         2 000305   200020 450500                    STP0    UADR$+2,,AUTO
         2 000306   200020 630500                    EPPR0   UADR$+2,,AUTO
         2 000307   000016 631400 3                  EPPR1   14
         2 000310   000000 701000 xent               TSX1    XSS$RELMEM
         2 000311   000000 011000                    NOP     0

      126     5343    2           IF DSTX ~= %NULL THEN

   5343  2 000312   200014 220100                    LDX0    DSTX,,AUTO
         2 000313   777777 100003                    CMPX0   -1,DU
         2 000314   000323 600000 2                  TZE     s:5345

      127     5344    2               CALL XSS$RELMEM( DSTX);

   5344  2 000315   200014 630500                    EPPR0   DSTX,,AUTO
         2 000316   200020 450500                    STP0    UADR$+2,,AUTO
         2 000317   200020 630500                    EPPR0   UADR$+2,,AUTO
         2 000320   000016 631400 3                  EPPR1   14
         2 000321   000000 701000 xent               TSX1    XSS$RELMEM
         2 000322   000000 011000                    NOP     0

      128     5345    2           IF COMX ~= %NULL THEN

   5345  2 000323   200015 220100                    LDX0    COMX,,AUTO
         2 000324   777777 100003                    CMPX0   -1,DU
         2 000325   000334 600000 2                  TZE     s:5347

      129     5346    2               CALL XSS$RELMEM( COMX);

   5346  2 000326   200015 630500                    EPPR0   COMX,,AUTO
         2 000327   200020 450500                    STP0    UADR$+2,,AUTO
PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:26   
         2 000330   200020 630500                    EPPR0   UADR$+2,,AUTO
         2 000331   000016 631400 3                  EPPR1   14
         2 000332   000000 701000 xent               TSX1    XSS$RELMEM
         2 000333   000000 011000                    NOP     0

      130     5347    2           ALTRETURN;

   5347  2 000334   000000 702200 xent               TSX2  ! X66_AALT

      131     5348    2           END;
      132     5349        %EJECT;
PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:27   
      133     5350            /* find a free slot with aid of roving pointer */
      134     5351    1       I = LASTGET;

   5351  2 000335   000005 235000 1                  LDA     LASTGET
         2 000336   200011 755100                    STA     I,,AUTO

      135     5352    1   LOOP:
      136     5353    2       DO WHILE( %TRUE);

   5353  2 000337                       LOOP         null
      137     5354    2           I = I + 1;

   5354  2 000337   200011 054100                    AOS     I,,AUTO

      138     5355    2           IF I > XSS_MAX_LCID THEN

   5355  2 000340   200011 236100                    LDQ     I,,AUTO
         2 000341   000002 116000 1                  CMPQ    XSS_MAX_LCID
         2 000342   000345 604400 2                  TMOZ    s:5357

      139     5356    2               I = 1;

   5356  2 000343   000001 235007                    LDA     1,DL
         2 000344   200011 755100                    STA     I,,AUTO

      140     5357    3           IF I = LASTGET THEN DO;

   5357  2 000345   200011 236100                    LDQ     I,,AUTO
         2 000346   000005 116000 1                  CMPQ    LASTGET
         2 000347   000363 601000 2                  TNZ     s:5362

      141     5358                    /* We cycled through all the slots and none were free */
      142     5359    3               CALL XSS$RELMEM( CTX$->B$BLOCK.BLKX);

   5359  2 000350   200003 470500                    LDP0    @CTX$,,AUTO
         2 000351   000000 471500                    LDP1    0,,PR0
         2 000352   200021 451500                    STP1    UADR$+3,,AUTO
PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:28   
         2 000353   200021 236100                    LDQ     UADR$+3,,AUTO
         2 000354   400000 036007                    ADLQ    -131072,DL
         2 000355   200020 756100                    STQ     UADR$+2,,AUTO
         2 000356   200020 630500                    EPPR0   UADR$+2,,AUTO
         2 000357   000016 631400 3                  EPPR1   14
         2 000360   000000 701000 xent               TSX1    XSS$RELMEM
         2 000361   000000 011000                    NOP     0

      143     5360    3               GOTO OOPS;

   5360  2 000362   000257 710000 2                  TRA     OOPS

      144     5361    3               END;
      145     5362    2           IF MAPSCID( I) = %NULL THEN

   5362  2 000363   200011 235100                    LDA     I,,AUTO
         2 000364   000001 735000                    ALS     1
         2 000365   000001 470400 1                  LDP0    XSS_MAPSCID$
         2 000366   000100 101505                    MRL     fill='000'O
         2 000367   000000 000002                    ADSC9   0,A,PR0                  cn=0,n=2
         2 000370   200020 000004                    ADSC9   UADR$+2,,AUTO            cn=0,n=4
         2 000371   200020 236100                    LDQ     UADR$+2,,AUTO
         2 000372   777777 116007                    CMPQ    -1,DL
         2 000373   000375 600000 2                  TZE     s:5366

      146     5363    2               EXIT LOOP;
      147     5364    2           END;

   5364  2 000374   000337 710000 2                  TRA     LOOP

      148     5365            /* found a free slot */
      149     5366    1       MAPSCID( I) = BLKX;

   5366  2 000375   000105 100500                    MLR     fill='000'O
         2 000376   200005 000002                    ADSC9   BLKX,,AUTO               cn=0,n=2
         2 000377   000000 000002                    ADSC9   0,A,PR0                  cn=0,n=2

PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:29   
      150     5367    1       CALL XSS$BUFPTR( BLKX, CTX$);  /* now point at buffer within mem block */

   5367  2 000400   200003 236100                    LDQ     @CTX$,,AUTO
         2 000401   200021 756100                    STQ     UADR$+3,,AUTO
         2 000402   200005 630500                    EPPR0   BLKX,,AUTO
         2 000403   200020 450500                    STP0    UADR$+2,,AUTO
         2 000404   200020 630500                    EPPR0   UADR$+2,,AUTO
         2 000405   000010 631400 3                  EPPR1   8
         2 000406   000000 701000 xent               TSX1    XSS$BUFPTR
         2 000407   000000 011000                    NOP     0

      151     5368    1       SCTX = XSS_SCTX;

   5368  2 000410   200003 470500                    LDP0    @CTX$,,AUTO
         2 000411   000000 471500                    LDP1    0,,PR0
         2 000412   000100 100400                    MLR     fill='000'O
         2 000413   000000 000214 0                  ADSC9   XSS_SCTX                 cn=0,n=140
         2 000414   100000 000214                    ADSC9   0,,PR1                   cn=0,n=140

      152     5369    1       SCTX.SCID = I;

   5369  2 000415   000000 471500                    LDP1    0,,PR0
         2 000416   200011 236100                    LDQ     I,,AUTO
         2 000417   000022 736000                    QLS     18
         2 000420   100015 552120                    STBQ    13,'20'O,PR1

      153     5370    1       SCTX.STATE = %XSS_SST_01;  /* Idle, no Transport connection */

   5370  2 000421   000000 471500                    LDP1    0,,PR0
         2 000422   001000 236003                    LDQ     512,DU
         2 000423   100000 552140                    STBQ    0,'40'O,PR1

      154     5371    1       SCTX.PO = 1;

   5371  2 000424   000000 471500                    LDP1    0,,PR0
         2 000425   100013 552140                    STBQ    11,'40'O,PR1

PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:30   
      155     5372    1       SCTX.VN = 1;

   5372  2 000426   000000 471500                    LDP1    0,,PR0
         2 000427   100013 236100                    LDQ     11,,PR1
         2 000430   000017 376000 3                  ANQ     15
         2 000431   000020 276003                    ORQ     16,DU
         2 000432   100013 756100                    STQ     11,,PR1

      156     5373    1       SCTX.TSDUMS.INI = 2000;

   5373  2 000433   000000 471500                    LDP1    0,,PR0
         2 000434   003720 220003                    LDX0    2000,DU
         2 000435   100014 740100                    STX0    12,,PR1

      157     5374    1       SCTX.TSDUMS.RSP = 2000;

   5374  2 000436   000000 471500                    LDP1    0,,PR0
         2 000437   100014 440100                    SXL0    12,,PR1

      158     5375    1       SCTX.SRCX = SRCX;

   5375  2 000440   000000 471500                    LDP1    0,,PR0
         2 000441   200013 221100                    LDX1    SRCX,,AUTO
         2 000442   100003 741100                    STX1    3,,PR1

      159     5376    1       SCTX.DSTX = DSTX;

   5376  2 000443   000000 471500                    LDP1    0,,PR0
         2 000444   200014 221100                    LDX1    DSTX,,AUTO
         2 000445   100003 441100                    SXL1    3,,PR1

      160     5377    1       SCTX.COMX = COMX;

   5377  2 000446   000000 471500                    LDP1    0,,PR0
         2 000447   200015 221100                    LDX1    COMX,,AUTO
         2 000450   100004 741100                    STX1    4,,PR1

PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:31   
      161     5378    2       IF BUFREQ THEN DO;

   5378  2 000451   200007 234100                    SZN     BUFREQ,,AUTO
         2 000452   000470 605000 2                  TPL     s:5384

      162     5379    2           SCTX.BUFX = BUF$->B$BLOCK.BLKX;

   5379  2 000453   000000 471500                    LDP1    0,,PR0
         2 000454   200004 473500                    LDP3    @BUF$,,AUTO
         2 000455   300000 474500                    LDP4    0,,PR3
         2 000456   400000 721100                    LXL1    0,,PR4
         2 000457   100033 741100                    STX1    27,,PR1

      163     5380    2           SCTX.LATCH.MSG$ = ADDR( BUF$->B$BLOCK.DATA);

   5380  2 000460   000000 471500                    LDP1    0,,PR0
         2 000461   300000 474500                    LDP4    0,,PR3
         2 000462   400002 635500                    EPPR5   2,,PR4
         2 000463   100036 455500                    STP5    30,,PR1

      164     5381    2           SCTX.EVENT# = I + 512 * %XSS_EVID;

   5381  2 000464   000000 471500                    LDP1    0,,PR0
         2 000465   200011 235100                    LDA     I,,AUTO
         2 000466   000020 035000 3                  ADLA    16
         2 000467   100034 755100                    STA     28,,PR1

      165     5382    2           END;

      166     5383            /* update roving pointer for next time */
      167     5384    1       LASTGET = I;

   5384  2 000470   200011 235100                    LDA     I,,AUTO
         2 000471   000005 755000 1                  STA     LASTGET

      168     5385    1       CALL XSS$EVLOG( 'GC', I);

PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:32   
   5385  2 000472   200011 631500                    EPPR1   I,,AUTO
         2 000473   200021 451500                    STP1    UADR$+3,,AUTO
         2 000474   000021 236000 3                  LDQ     17
         2 000475   200020 756100                    STQ     UADR$+2,,AUTO
         2 000476   200020 630500                    EPPR0   UADR$+2,,AUTO
         2 000477   000010 631400 3                  EPPR1   8
         2 000500   000000 701000 xent               TSX1    XSS$EVLOG
         2 000501   000000 011000                    NOP     0

      169     5386    1       RETURN;

   5386  2 000502   000000 702200 xent               TSX2  ! X66_ARET

      170     5387        %EJECT;
PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:33   
      171     5388        /*F*    NAME:   XSS$RELCTX
      172     5389                PURPOSE:
      173     5390                    This routine is called to release a Session context block.
      174     5391                DESCRIPTION:
      175     5392                    The memory block for the read buffer is released, and then the
      176     5393                    memory block for the context itself is released.
      177     5394                    The ALTRETURN is taken if the passed pointer doesn't point at
      178     5395                    a Session context.
      179     5396                INPUT:  CTX$ is the address of the context block to release.
      180     5397                OUTPUT: none.
      181     5398        */
      182     5399    1   XSS$RELCTX: ENTRY( CTX$) ALTRET;

   5399  2 000503   000000 700200 xent  XSS$RELCTX   TSX0  ! X66_AUTO_2
         2 000504   000024 000002                    ZERO    20,2

      183     5400
      184     5401    1       I = SCTX.SCID;

   5401  2 000505   200003 470500                    LDP0    @CTX$,,AUTO
         2 000506   000000 471500                    LDP1    0,,PR0
         2 000507   100015 236100                    LDQ     13,,PR1
         2 000510   000022 772000                    QRL     18
         2 000511   000777 376007                    ANQ     511,DL
         2 000512   200011 756100                    STQ     I,,AUTO

      185     5402    1       CALL XSS$EVLOG( 'RC', I);

   5402  2 000513   200011 631500                    EPPR1   I,,AUTO
         2 000514   200021 451500                    STP1    UADR$+3,,AUTO
         2 000515   000022 236000 3                  LDQ     18
         2 000516   200020 756100                    STQ     UADR$+2,,AUTO
         2 000517   200020 630500                    EPPR0   UADR$+2,,AUTO
         2 000520   000010 631400 3                  EPPR1   8
         2 000521   000000 701000 xent               TSX1    XSS$EVLOG
         2 000522   000000 011000                    NOP     0

PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:34   
      186     5403            /* consistency checks */
      187     5404    1       BLKX = MAPSCID( I);

   5404  2 000523   200011 235100                    LDA     I,,AUTO
         2 000524   000001 735000                    ALS     1
         2 000525   000001 470400 1                  LDP0    XSS_MAPSCID$
         2 000526   000100 100505                    MLR     fill='000'O
         2 000527   000000 000002                    ADSC9   0,A,PR0                  cn=0,n=2
         2 000530   200005 000002                    ADSC9   BLKX,,AUTO               cn=0,n=2

      188     5405    1       IF BLKX = %NULL THEN

   5405  2 000531   200005 220100                    LDX0    BLKX,,AUTO
         2 000532   777777 100003                    CMPX0   -1,DU
         2 000533   000535 601000 2                  TNZ     s:5407

      189     5406    1           ALTRETURN;

   5406  2 000534   000000 702200 xent               TSX2  ! X66_AALT

      190     5407    1       TMP$ = PINCRW( CTX$, -2);  /*N*  note hardwired B$BLOCK size here */

   5407  2 000535   200003 471500                    LDP1    @CTX$,,AUTO
         2 000536   100000 236100                    LDQ     0,,PR1
         2 000537   777776 036003                    ADLQ    -2,DU
         2 000540   200012 756100                    STQ     TMP$,,AUTO

      191     5408    1       IF BLKX ~= TMP$->B$BLOCK.BLKX THEN

   5408  2 000541   200012 473500                    LDP3    TMP$,,AUTO
         2 000542   300000 721100                    LXL1    0,,PR3
         2 000543   200005 101100                    CMPX1   BLKX,,AUTO
         2 000544   000546 600000 2                  TZE     s:5411

      192     5409    1           ALTRETURN;

   5409  2 000545   000000 702200 xent               TSX2  ! X66_AALT
PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:35   

      193     5410            /* looks good.. release read buffer */
      194     5411    2       IF SCTX.BUFX ~= %NULL THEN DO;

   5411  2 000546   100000 474500                    LDP4    0,,PR1
         2 000547   400033 222100                    LDX2    27,,PR4
         2 000550   777777 102003                    CMPX2   -1,DU
         2 000551   000564 600000 2                  TZE     s:5416

      195     5412    2           CALL XSS$RELMEM( SCTX.BUFX) ALTRET( GETOUT);

   5412  2 000552   400033 635500                    EPPR5   27,,PR4
         2 000553   200020 455500                    STP5    UADR$+2,,AUTO
         2 000554   200020 630500                    EPPR0   UADR$+2,,AUTO
         2 000555   000016 631400 3                  EPPR1   14
         2 000556   000000 701000 xent               TSX1    XSS$RELMEM
         2 000557   000724 702000 2                  TSX2    GETOUT

      196     5413    2           SCTX.BUFX = %NULL;

   5413  2 000560   200003 470500                    LDP0    @CTX$,,AUTO
         2 000561   000000 471500                    LDP1    0,,PR0
         2 000562   777777 220003                    LDX0    -1,DU
         2 000563   100033 740100                    STX0    27,,PR1

      197     5414    2           END;

      198     5415            /* if connection startup failed, release SCONRQS UserData */
      199     5416    2       IF SCTX.HEADX ~= %NULL THEN DO;

   5416  2 000564   200003 470500                    LDP0    @CTX$,,AUTO
         2 000565   000000 471500                    LDP1    0,,PR0
         2 000566   100031 220100                    LDX0    25,,PR1
         2 000567   777777 100003                    CMPX0   -1,DU
         2 000570   000603 600000 2                  TZE     s:5421

      200     5417    2           CALL XSS$RELMEM( SCTX.HEADX) ALTRET( GETOUT);
PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:36   

   5417  2 000571   100031 633500                    EPPR3   25,,PR1
         2 000572   200020 453500                    STP3    UADR$+2,,AUTO
         2 000573   200020 630500                    EPPR0   UADR$+2,,AUTO
         2 000574   000016 631400 3                  EPPR1   14
         2 000575   000000 701000 xent               TSX1    XSS$RELMEM
         2 000576   000724 702000 2                  TSX2    GETOUT

      201     5418    2           SCTX.HEADX = %NULL;

   5418  2 000577   200003 470500                    LDP0    @CTX$,,AUTO
         2 000600   000000 471500                    LDP1    0,,PR0
         2 000601   777777 220003                    LDX0    -1,DU
         2 000602   100031 740100                    STX0    25,,PR1

      202     5419    2           END;

      203     5420            /* release the two address blocks as well */
      204     5421    2       IF SCTX.SRCX ~= %NULL THEN DO;

   5421  2 000603   000000 471500                    LDP1    0,,PR0
         2 000604   100003 220100                    LDX0    3,,PR1
         2 000605   777777 100003                    CMPX0   -1,DU
         2 000606   000621 600000 2                  TZE     s:5425

      205     5422    2           CALL XSS$RELMEM( SCTX.SRCX) ALTRET( GETOUT);

   5422  2 000607   100003 633500                    EPPR3   3,,PR1
         2 000610   200020 453500                    STP3    UADR$+2,,AUTO
         2 000611   200020 630500                    EPPR0   UADR$+2,,AUTO
         2 000612   000016 631400 3                  EPPR1   14
         2 000613   000000 701000 xent               TSX1    XSS$RELMEM
         2 000614   000724 702000 2                  TSX2    GETOUT

      206     5423    2           SCTX.SRCX = %NULL;

   5423  2 000615   200003 470500                    LDP0    @CTX$,,AUTO
PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:37   
         2 000616   000000 471500                    LDP1    0,,PR0
         2 000617   777777 220003                    LDX0    -1,DU
         2 000620   100003 740100                    STX0    3,,PR1

      207     5424    2           END;

      208     5425    2       IF SCTX.DSTX ~= %NULL THEN DO;

   5425  2 000621   000000 471500                    LDP1    0,,PR0
         2 000622   100003 720100                    LXL0    3,,PR1
         2 000623   777777 100003                    CMPX0   -1,DU
         2 000624   000641 600000 2                  TZE     s:5430

      209     5426    2           CALL XSS$RELMEM( SCTX.DSTX) ALTRET( GETOUT);

   5426  2 000625   200021 451500                    STP1    UADR$+3,,AUTO
         2 000626   200021 236100                    LDQ     UADR$+3,,AUTO
         2 000627   000023 036000 3                  ADLQ    19
         2 000630   200020 756100                    STQ     UADR$+2,,AUTO
         2 000631   200020 630500                    EPPR0   UADR$+2,,AUTO
         2 000632   000016 631400 3                  EPPR1   14
         2 000633   000000 701000 xent               TSX1    XSS$RELMEM
         2 000634   000724 702000 2                  TSX2    GETOUT

      210     5427    2           SCTX.DSTX = %NULL;

   5427  2 000635   200003 470500                    LDP0    @CTX$,,AUTO
         2 000636   000000 471500                    LDP1    0,,PR0
         2 000637   777777 220003                    LDX0    -1,DU
         2 000640   100003 440100                    SXL0    3,,PR1

      211     5428    2           END;

      212     5429            /* release the common reference buffer too */
      213     5430    2       IF SCTX.COMX ~= %NULL THEN DO;

   5430  2 000641   000000 471500                    LDP1    0,,PR0
PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:38   
         2 000642   100004 220100                    LDX0    4,,PR1
         2 000643   777777 100003                    CMPX0   -1,DU
         2 000644   000657 600000 2                  TZE     s:5435

      214     5431    2           CALL XSS$RELMEM( SCTX.COMX) ALTRET( GETOUT);

   5431  2 000645   100004 633500                    EPPR3   4,,PR1
         2 000646   200020 453500                    STP3    UADR$+2,,AUTO
         2 000647   200020 630500                    EPPR0   UADR$+2,,AUTO
         2 000650   000016 631400 3                  EPPR1   14
         2 000651   000000 701000 xent               TSX1    XSS$RELMEM
         2 000652   000724 702000 2                  TSX2    GETOUT

      215     5432    2           SCTX.COMX = %NULL;

   5432  2 000653   200003 470500                    LDP0    @CTX$,,AUTO
         2 000654   000000 471500                    LDP1    0,,PR0
         2 000655   777777 220003                    LDX0    -1,DU
         2 000656   100004 740100                    STX0    4,,PR1

      216     5433    2           END;

      217     5434            /* cancel alarm if necessary */
      218     5435    2       IF SCTX.ALARM THEN DO;

   5435  2 000657   000000 471500                    LDP1    0,,PR0
         2 000660   100013 236100                    LDQ     11,,PR1
         2 000661   010000 316007                    CANQ    4096,DL
         2 000662   000676 600000 2                  TZE     s:5440

      219     5436    2           IBYTE = I;

   5436  2 000663   200011 235100                    LDA     I,,AUTO
         2 000664   000033 735000                    ALS     27
         2 000665   200010 755100                    STA     IBYTE,,AUTO

      220     5437    2           CALL XSS$CLOCK( %CANCLK, IBYTE);
PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:39   

   5437  2 000666   200010 631500                    EPPR1   IBYTE,,AUTO
         2 000667   200021 451500                    STP1    UADR$+3,,AUTO
         2 000670   000025 236000 3                  LDQ     21
         2 000671   200020 756100                    STQ     UADR$+2,,AUTO
         2 000672   200020 630500                    EPPR0   UADR$+2,,AUTO
         2 000673   000010 631400 3                  EPPR1   8
         2 000674   000000 701000 xent               TSX1    XSS$CLOCK
         2 000675   000000 011000                    NOP     0

      221     5438    2           END;

      222     5439            /* then release context block */
      223     5440    1       BLKX = MAPSCID( I);

   5440  2 000676   200011 235100                    LDA     I,,AUTO
         2 000677   000001 735000                    ALS     1
         2 000700   000001 470400 1                  LDP0    XSS_MAPSCID$
         2 000701   000100 100505                    MLR     fill='000'O
         2 000702   000000 000002                    ADSC9   0,A,PR0                  cn=0,n=2
         2 000703   200005 000002                    ADSC9   BLKX,,AUTO               cn=0,n=2

      224     5441    1       CALL XSS$RELMEM( BLKX) ALTRET( GETOUT);

   5441  2 000704   200005 631500                    EPPR1   BLKX,,AUTO
         2 000705   200020 451500                    STP1    UADR$+2,,AUTO
         2 000706   200020 630500                    EPPR0   UADR$+2,,AUTO
         2 000707   000016 631400 3                  EPPR1   14
         2 000710   000000 701000 xent               TSX1    XSS$RELMEM
         2 000711   000724 702000 2                  TSX2    GETOUT

      225     5442    1       MAPSCID( I) = %NULL;

   5442  2 000712   200011 235100                    LDA     I,,AUTO
         2 000713   000001 735000                    ALS     1
         2 000714   000001 470400 1                  LDP0    XSS_MAPSCID$
         2 000715   000105 101400                    MRL     fill='000'O
PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:40   
         2 000716   000003 000004 3                  ADSC9   3                        cn=0,n=4
         2 000717   000000 000002                    ADSC9   0,A,PR0                  cn=0,n=2

      226     5443            /* try to garbage collect */
      227     5444    1       CALL XSS$SQZMEM;

   5444  2 000720   000004 631400 3                  EPPR1   4
         2 000721   000000 701000 xent               TSX1    XSS$SQZMEM
         2 000722   000000 011000                    NOP     0

      228     5445    1       RETURN;

   5445  2 000723   000000 702200 xent               TSX2  ! X66_ARET

      229     5446    1   GETOUT:
      230     5447    1       ALTRETURN;

   5447  2 000724   000000 702200 xent  GETOUT       TSX2  ! X66_AALT

XSS_SCTX
 Sect OctLoc
   0     000   000000 000000   000000 000000   000000 000000   777777 777777    ................
   0     004   777777 000000   000000 000000   000000 000000   000000 000000    ................
   0     010   000000 000000   000000 000000   000000 000000   000000 000000    ................
   0     024*  000000 000000   010010 010010   010010 010010   040040 040040    ............
   0     030   040040 040040   777777 777777   000000 000000   777777 000000        ............
   0     034   000000 000000   000000 777777   000000 006014   000000 000000    ................
   0     040   000000 000000   040040 040040   040040 040040                    ....

XSC_ADDRESS
 Sect OctLoc
   0     043   000040 040040   040040 040040   040040 040040   040040 040040    .
   0     047   040040 040040   040040 040040   040040 040040   040040 040040
   0     133*  040000 040040   040040 040040   040040 040040   040040 040040     .
   0     137   040040 ******   000000 040040   040040 040040   040040 040040      ....
   0     143   040040 040040   040040 040040   040040 040040   040040 040040
   0     147   040040 040040   040040 ******   000067 000000   000000 000000          ...7......
PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:41   
   0     153   000000 000000   000000 000000   000000 000000   000000 ******    ................

(unnamed)
 Sect OctLoc
   0     157   107103 040040   122103 040040                                    GC  RC

XSS_CCB$$
 Sect OctLoc
   1     000   000000 006014                                                    ....

XSS_MAPSCID$
 Sect OctLoc
   1     001   000000 006014                                                    ....

XSS_MAX_LCID
 Sect OctLoc
   1     002   000000 000010                                                    ....

CTXINITED
 Sect OctLoc
   1     004   0***** ******                                                    ....

(unnamed)
 Sect OctLoc
   3     000   000000 006014   000003 000000   000001 006000   000000 777777    ................
   3     004   000000 000000   000000 006000   000000 003770   000006 006000    ................
   3     010   000002 000000   000000 000460   000011 006000   040040 040040    ............
   3     014   000000 000214   000014 006000   000001 000000   777417 777777    ................
   3     020   130123 123000   000157 006000   000160 006000   000003 400000    XSS..o...p......
   3     024   000000 000002   000024 006000                                    ........
      231     5448
      232     5449    1       END XSS$GETCTX;
      233     5450        %EOD;

PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:42   
--  Include file information  --

   XSC_COMMON_M.:XSA1TOU  is referenced.
   XSS_INTERNAL_M.:XSA1TOU  is referenced.
   XSS_INTERNAL_E.:XSA1TOU  is referenced.
   XSS_SESSION_E.:XSA1TOU  is referenced.
   K_ADDRESS_M.:LIB_E05  is referenced.
   UM_CP6.:E05OU  is referenced.
      No diagnostics issued in procedure XSS$GETCTX.
PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:43   

 **** Variables and constants ****

  ****  Section 000 RoData XSS$GETCTX

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    43-0-0/w STRC(2718)  r     1 XSC_ADDRESS                0-0-0/w STRC(1260)  r     1 XSS_SCTX

  ****  Section 001  Data  XSS$GETCTX

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/b BIT         r     1 CTXINITED                  5-0-0/w SBIN        r     1 LASTGET
     0-0-0/w PTR         r     1 XSS_CCB$$                  1-0-0/w PTR         r     1 XSS_MAPSCID$
     2-0-0/w SBIN        r     1 XSS_MAX_LCID

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @BUF$                      3-0-0/w PTR         r     1 @CTX$
     6-0-0/w PTR         r     1 B$                         5-0-0/h UBIN(18)    r     1 BLKX
    *0-0-0/w PTR         r     1 BUF$                       7-0-0/b BIT         r     1 BUFREQ
    15-0-0/c UBIN(18)    r     1 COMX                      *0-0-0/w PTR         r     1 CTX$
    14-0-0/c UBIN(18)    r     1 DSTX                      11-0-0/w SBIN        r     1 I
    10-0-0/c UBIN(9)     r     1 IBYTE                     11-0-0/w SBIN        r     1 LEN
    13-0-0/c UBIN(18)    r     1 SRCX                      12-0-0/w PTR         r     1 TMP$
    16-0-0/w PTR         r     1 UADR$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:44   
     0-0-0/w STRC(108)   r     1 B$BLOCK                    0-0-0/c UBIN(9)     r     1 B$UBIN9
     0-0-0/w PTR         r     1 CCB$(0:0)                  0-0-0/c ACHR        r     1 LENBYTES
     0-0-0/h UBIN(18)    r     1 MAPSCID(0:0)
     0-0-0/w STRC(1260)  r     1 SCTX                       0-0-0/w STRC(2718)  r     1 XSC$ADDRESS
     0-0-0/w STRC(504)   r     1 XSC$CCB


   Procedure XSS$GETCTX requires 469 words for executable code.
   Procedure XSS$GETCTX requires 20 words of local(AUTO) storage.
PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:45   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:46   
          MINI XREF LISTING

B$
      5265**DCL      5303<<ASSIGN   5305>>ASSIGN   5306<<ASSIGN   5306>>ASSIGN
B$BLOCK.BLKX
      3728**DCL      5338<>CALL     5359<>CALL     5379>>ASSIGN   5408>>IF
B$BLOCK.BLNKX
      3730**DCL      3731--REDEF
B$BLOCK.DATA
      3732**DCL      5380--ASSIGN
B$UBIN9
      5268**DCL      5328<<ASSIGN
BLKX
      5264**DCL      5294<>CALL     5302<>CALL     5314<>CALL     5316<>CALL     5330<>CALL     5332<>CALL
      5366>>ASSIGN   5367<>CALL     5404<<ASSIGN   5405>>IF       5408>>IF       5440<<ASSIGN   5441<>CALL
BUF$
      5266**DCL        20--PROC     5285--IF       5314<>CALL     5316<>CALL     5338>>CALL     5339<<ASSIGN
      5379>>ASSIGN   5380>>ASSIGN
BUFREQ
      5267**DCL      5284<<ASSIGN   5286<<ASSIGN   5313>>IF       5337>>IF       5378>>IF
CCB$
      5269**DCL      5305<<ASSIGN   5308<<ASSIGN
COMX
      5281**DCL      5289<<ASSIGN   5326<>CALL     5345>>IF       5346<>CALL     5377>>ASSIGN
CTX$
      5271**DCL        20--PROC     2846--IMP-PTR  5330<>CALL     5332<>CALL     5336<<ASSIGN   5359>>CALL
      5367<>CALL     5368>>ASSIGN   5369>>ASSIGN   5370>>ASSIGN   5371>>ASSIGN   5372>>ASSIGN   5373>>ASSIGN
      5374>>ASSIGN   5375>>ASSIGN   5376>>ASSIGN   5377>>ASSIGN   5379>>ASSIGN   5380>>ASSIGN   5381>>ASSIGN
      5399--ENTRY    5401>>ASSIGN   5407>>ASSIGN   5411>>IF       5412>>CALL     5413>>ASSIGN   5416>>IF
      5417>>CALL     5418>>ASSIGN   5421>>IF       5422>>CALL     5423>>ASSIGN   5425>>IF       5426>>CALL
      5427>>ASSIGN   5430>>IF       5431>>CALL     5432>>ASSIGN   5435>>IF
CTXINITED
      5270**DCL      5290>>IF       5309<<ASSIGN
DSTX
PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:47   
      5280**DCL      5288<<ASSIGN   5323<>CALL     5343>>IF       5344<>CALL     5376>>ASSIGN
GETOUT
      5447**LABEL    5412--CALLALT  5417--CALLALT  5422--CALLALT  5426--CALLALT  5431--CALLALT  5441--CALLALT
I
      5273**DCL      5274--REDEF    5292<<ASSIGN   5294<>CALL     5295<<DOINDEX  5296>>ASSIGN   5301<<ASSIGN
      5302<>CALL     5304<<DOINDEX  5305>>ASSIGN   5351<<ASSIGN   5354<<ASSIGN   5354>>ASSIGN   5355>>IF
      5356<<ASSIGN   5357>>IF       5362>>IF       5366>>ASSIGN   5369>>ASSIGN   5381>>ASSIGN   5384>>ASSIGN
      5385<>CALL     5401<<ASSIGN   5402<>CALL     5404>>ASSIGN   5436>>ASSIGN   5440>>ASSIGN   5442>>ASSIGN
IBYTE
      5272**DCL      5436<<ASSIGN   5437<>CALL
LASTGET
      5276**DCL      5299<<ASSIGN   5351>>ASSIGN   5357>>IF       5384<<ASSIGN
LEN
      5274**DCL      5275--IMP-SIZ  5325<<ASSIGN   5326<>CALL     5327>>ASSIGN
LENBYTES
      5275**DCL      5327<<ASSIGN
LOOP
      5353**LABEL    5363--EXIT
MAPSCID
      5277**DCL      5296<<ASSIGN   5298<<ASSIGN   5362>>IF       5366<<ASSIGN   5404>>ASSIGN   5440>>ASSIGN
      5442<<ASSIGN
OOPS
      5336**LABEL    5321--CALLALT  5323--CALLALT  5326--CALLALT  5360--GOTO
SCTX
      2846**DCL      5330--CALL     5368<<ASSIGN
SCTX.ALARM
      3138**DCL      5435>>IF
SCTX.BUFX
      3174**DCL      5379<<ASSIGN   5411>>IF       5412<>CALL     5413<<ASSIGN
SCTX.COMX
      2867**DCL      5377<<ASSIGN   5430>>IF       5431<>CALL     5432<<ASSIGN
SCTX.DSTX
      2866**DCL      5376<<ASSIGN   5425>>IF       5426<>CALL     5427<<ASSIGN
SCTX.EVENT#
      3176**DCL      5381<<ASSIGN
SCTX.HEADX
PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:48   
      3171**DCL      5416>>IF       5417<>CALL     5418<<ASSIGN
SCTX.HISTZ
      3160**DCL      3161--REDEF
SCTX.LATCH.MSG$
      3212**DCL      5380<<ASSIGN
SCTX.PO
      3126**DCL      5371<<ASSIGN
SCTX.SCID
      3147**DCL      5369<<ASSIGN   5401>>ASSIGN
SCTX.SRCX
      2865**DCL      5375<<ASSIGN   5421>>IF       5422<>CALL     5423<<ASSIGN
SCTX.STATE
      2860**DCL      5370<<ASSIGN
SCTX.TSDUMS.INI
      3144**DCL      5373<<ASSIGN
SCTX.TSDUMS.RSP
      3145**DCL      5374<<ASSIGN
SCTX.VN
      3130**DCL      5372<<ASSIGN
SRCX
      5279**DCL      5287<<ASSIGN   5321<>CALL     5341>>IF       5342<>CALL     5375>>ASSIGN
TMP$
      5278**DCL      5326<>CALL     5327>>ASSIGN   5328>>ASSIGN   5407<<ASSIGN   5408>>IF
UADR$
      5282**DCL      5321<>CALL     5322>>ASSIGN   5323<>CALL     5324>>ASSIGN
XSC$ADDRESS
      4404**DCL      5322<<ASSIGN   5324<<ASSIGN
XSC$ADDRESS.NSAP.ADDRESS_N
      4665**DCL      4666--REDEF
XSC$CCB
      4970**DCL      5301--ASSIGN   5306--ASSIGN
XSC$CCB.ERRDEF
      5077**DCL      5097--REDEF
XSC_ADDRESS
      4687**DCL      5321--CALL     5322>>ASSIGN   5323--CALL     5324>>ASSIGN
XSC_ADDRESS.NSAP.ADDRESS_N
PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:49   
      4948**DCL      4949--REDEF
XSS$BLKPTR
      5251**DCL-ENT  5316--CALL     5332--CALL
XSS$BUFPTR
      5252**DCL-ENT  5367--CALL
XSS$CLOCK
      5253**DCL-ENT  5437--CALL
XSS$EVLOG
      5257**DCL-ENT  5385--CALL     5402--CALL
XSS$GETMEM
      5254**DCL-ENT  5294--CALL     5302--CALL     5314--CALL     5321--CALL     5323--CALL     5326--CALL
      5330--CALL
XSS$RELMEM
      5255**DCL-ENT  5338--CALL     5342--CALL     5344--CALL     5346--CALL     5359--CALL     5412--CALL
      5417--CALL     5422--CALL     5426--CALL     5431--CALL     5441--CALL
XSS$SQZMEM
      5256**DCL-ENT  5444--CALL
XSS_CCB$$
      5259**DCL      5269--IMP-PTR  5302<>CALL     5303>>ASSIGN   5305>>ASSIGN   5308>>ASSIGN
XSS_MAPSCID$
      5260**DCL      5277--IMP-PTR  5294<>CALL     5296>>ASSIGN   5298>>ASSIGN   5362>>IF       5366>>ASSIGN
      5404>>ASSIGN   5440>>ASSIGN   5442>>ASSIGN
XSS_MAX_LCID
      5261**DCL      5292>>ASSIGN   5295>>DOINDEX  5299>>ASSIGN   5301>>ASSIGN   5301>>ASSIGN   5303>>ASSIGN
      5304>>DOINDEX  5355>>IF
XSS_SCTX
      3280**DCL      5368>>ASSIGN
XSS_SCTX.HISTZ
      3594**DCL      3595--REDEF
PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:50   
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #001=XSS$GETCTX File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:51   
              MINI UREF LISTING

XSS$GETCTX      20**PROC
XSS$RELCTX    5399**ENTRY
XSS_GENERIC$    5262**DCL

PL6.E3A0      #002=XSS$CTXPTR File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:52   
      234        1        /*T***********************************************************/
      235        2        /*T*                                                         */
      236        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      237        4        /*T*                                                         */
      238        5        /*T***********************************************************/
      239        6        /*F*    NAME:   XSS$CTXPTR
      240        7                DESCRIPTION:
      241        8                    Given a SCID, this routine returns the address of the context
      242        9                    block for the associated connection.
      243       10                INPUT:  SCID is the Session connection identifier of interest.
      244       11                OUTPUT: CTX$ gets the address of that connection's context block.
      245       12        */
      246       13        XSS$CTXPTR: PROC( SCID, CTX$) ALTRET MATERIALIZE( $PR2 IN AUTO$);
      247       14        %INCLUDE UM_CP6;
      248      866        %MACRO FATALDEF( NAME=XSS_FATAL, STCLASS="CONSTANT SYMDEF", LVL=1, LAST=";",
      249      867                         ERR#=0, SEV=7);
      250      868            %VLP_ERRCODE( FPTN=NAME, STCLASS=STCLASS, FCG='XS', MID='S',
      251      869                          MON='0'B, ERR#=ERR#, SEV=SEV);
      252      870        %MEND;
      253      871        %INCLUDE XSC_PERR_C;
      254      948            %FATALDEF( NAME=XSS_F$CTXPTR, ERR#=%F$CTXPTR);
      255      996            /*E*  ERROR:  XSS-F$CTXPTR-7
      256      997                MESSAGE:  XSS$CTXPTR ALTRETURN would be ignored.
      257      998            */
      258      999
      259     1000    1       DCL B_POINTER ENTRY CONV(5);
      260     1001    1       DCL XSS$BUFPTR ENTRY(2) ALTRET;
      261     1002    1       DCL XSS$SCREECH ENTRY(1);
      262     1003    1       DCL XSS$EVLOG ENTRY(2);
      263     1004
      264     1005    1       DCL B$IS$ PTR SYMREF;
      265     1006    1       DCL XSS_MAPSCID$ PTR SYMREF;
      266     1007    1       DCL XSS_MAX_LCID SBIN SYMREF;
      267     1008
      268     1009            /* AUTO$ declared below must be the first AUTO variable */
      269     1010            /* so that the PLUGH code later on will work correctly */
      270     1011    1       DCL AUTO$ PTR;
PL6.E3A0      #002=XSS$CTXPTR File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:53   
      271     1012    1       DCL 1 PLUGH BASED ALIGNED,
      272     1013    1            2 ADR UBIN(18),
      273     1014    1            2 * BIT(18);
      274     1015    1       DCL B$HALF UBIN HALF BASED HALIGNED;
      275     1016    1       DCL B$UBIN UBIN BASED;
      276     1017    1       DCL XSS_NOPZERO UBIN SYMREF;
      277     1018    1       DCL XSS_NOPIZERO UBIN SYMREF;
      278     1019    1       DCL BLKX UBIN HALF HALIGNED;
      279     1020    1       DCL CTX$ PTR;
      280     1021    1       DCL LS0$ PTR;
      281     1022    1       DCL MAPSCID(0:0) UBIN HALF BASED( XSS_MAPSCID$) HALIGNED;
      282     1023    1       DCL SCID SBIN;
      283     1024
      284     1025            /* have to INHIBIT because called from event handler */
      285     1026    2       DO INHIBIT;
      286     1027    2           CALL XSS$EVLOG( '@C', PINCRW(ADDR(AUTO$),-5)->PLUGH.ADR);
      287     1028    3           IF SCID <= 0 OR SCID > XSS_MAX_LCID THEN DO;
      288     1029    3   OOPS:
      289     1030    3               LS0$ = PINCRW( B$IS$, AUTO$->B$HALF);
      290     1031    3               IF LS0$->B$UBIN = XSS_NOPZERO OR LS0$->B$UBIN = XSS_NOPIZERO THEN
      291     1032    3                   CALL XSS$SCREECH( XSS_F$CTXPTR);
      292     1033    3               ALTRETURN;
      293     1034    3               END;
      294     1035    2           BLKX = MAPSCID( SCID);
      295     1036    2           CALL XSS$BUFPTR( BLKX, CTX$) ALTRET( OOPS);
      296     1037    2           RETURN;
      297     1038    2           END;
      298     1039
      299     1040    1       END XSS$CTXPTR;
      300     1041        %EOD;

PL6.E3A0      #002=XSS$CTXPTR File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:54   
--  Include file information  --

   XSC_PERR_C.:XSA1TOU  is referenced.
   UM_CP6.:E05OU  is referenced.
      No diagnostics issued in procedure XSS$CTXPTR.

   Procedure XSS$CTXPTR requires 50 words for executable code.
   Procedure XSS$CTXPTR requires 10 words of local(AUTO) storage.

PL6.E3A0      #002=XSS$CTXPTR File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:55   

 Object Unit name= XSS$CTXPTR                                 File name= XSS$DATA.:XSA1TOU
 UTS= OCT 01 '97 12:13:44.36 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  RoData even  UTS      2      2  XSS$CTXPTR
    1   Proc  even  none    50     62  XSS$CTXPTR
    2  RoData even  none     4      4  XSS$CTXPTR

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        2  XSS$CTXPTR

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
    0      0  XSS_F$CTXPTR

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes          ~proc      0 B_POINTER
         yes           Std       1 XSS$SCREECH
         yes           Std       2 XSS$EVLOG
 yes     yes           Std       2 XSS$BUFPTR
                       nStd      0 X66_AUTO_2
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET
PL6.E3A0      #002=XSS$CTXPTR File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:56   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     B$IS$                                 XSS_MAPSCID$                          XSS_MAX_LCID
     XSS_NOPZERO                           XSS_NOPIZERO

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #002=XSS$CTXPTR File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:57   


      234        1        /*T***********************************************************/
      235        2        /*T*                                                         */
      236        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      237        4        /*T*                                                         */
      238        5        /*T***********************************************************/
      239        6        /*F*    NAME:   XSS$CTXPTR
      240        7                DESCRIPTION:
      241        8                    Given a SCID, this routine returns the address of the context
      242        9                    block for the associated connection.
      243       10                INPUT:  SCID is the Session connection identifier of interest.
      244       11                OUTPUT: CTX$ gets the address of that connection's context block.
      245       12        */
      246       13        XSS$CTXPTR: PROC( SCID, CTX$) ALTRET MATERIALIZE( $PR2 IN AUTO$);

     13  1 000000   000000 700200 xent  XSS$CTXPTR   TSX0  ! X66_AUTO_2
         1 000001   000012 000002                    ZERO    10,2
         1 000002   200005 452700                    STP2  ! AUTO$,,AUTO

      247       14        %INCLUDE UM_CP6;
      248      866        %MACRO FATALDEF( NAME=XSS_FATAL, STCLASS="CONSTANT SYMDEF", LVL=1, LAST=";",
      249      867                         ERR#=0, SEV=7);
      250      868            %VLP_ERRCODE( FPTN=NAME, STCLASS=STCLASS, FCG='XS', MID='S',
      251      869                          MON='0'B, ERR#=ERR#, SEV=SEV);
      252      870        %MEND;
      253      871        %INCLUDE XSC_PERR_C;
      254      948            %FATALDEF( NAME=XSS_F$CTXPTR, ERR#=%F$CTXPTR);
      255      996            /*E*  ERROR:  XSS-F$CTXPTR-7
      256      997                MESSAGE:  XSS$CTXPTR ALTRETURN would be ignored.
      257      998            */
      258      999
      259     1000    1       DCL B_POINTER ENTRY CONV(5);
      260     1001    1       DCL XSS$BUFPTR ENTRY(2) ALTRET;
      261     1002    1       DCL XSS$SCREECH ENTRY(1);
      262     1003    1       DCL XSS$EVLOG ENTRY(2);
      263     1004
      264     1005    1       DCL B$IS$ PTR SYMREF;
PL6.E3A0      #002=XSS$CTXPTR File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:58   
      265     1006    1       DCL XSS_MAPSCID$ PTR SYMREF;
      266     1007    1       DCL XSS_MAX_LCID SBIN SYMREF;
      267     1008
      268     1009            /* AUTO$ declared below must be the first AUTO variable */
      269     1010            /* so that the PLUGH code later on will work correctly */
      270     1011    1       DCL AUTO$ PTR;
      271     1012    1       DCL 1 PLUGH BASED ALIGNED,
      272     1013    1            2 ADR UBIN(18),
      273     1014    1            2 * BIT(18);
      274     1015    1       DCL B$HALF UBIN HALF BASED HALIGNED;
      275     1016    1       DCL B$UBIN UBIN BASED;
      276     1017    1       DCL XSS_NOPZERO UBIN SYMREF;
      277     1018    1       DCL XSS_NOPIZERO UBIN SYMREF;
      278     1019    1       DCL BLKX UBIN HALF HALIGNED;
      279     1020    1       DCL CTX$ PTR;
      280     1021    1       DCL LS0$ PTR;
      281     1022    1       DCL MAPSCID(0:0) UBIN HALF BASED( XSS_MAPSCID$) HALIGNED;
      282     1023    1       DCL SCID SBIN;
      283     1024
      284     1025            /* have to INHIBIT because called from event handler */
      285     1026    2       DO INHIBIT;

      286     1027    2           CALL XSS$EVLOG( '@C', PINCRW(ADDR(AUTO$),-5)->PLUGH.ADR);

   1027  1 000003   200011 452700                    STP2  ! LS0$+2,,AUTO
         1 000004   000001 236200 2                  LDQ   ! 1
         1 000005   200010 756300                    STQ   ! LS0$+1,,AUTO
         1 000006   200010 630700                    EPPR0 ! LS0$+1,,AUTO
         1 000007   000000 631600 2                  EPPR1 ! 0
         1 000010   000000 701200 xent               TSX1  ! XSS$EVLOG
         1 000011   000000 011200                    NOP   ! 0

      287     1028    3           IF SCID <= 0 OR SCID > XSS_MAX_LCID THEN DO;

   1028  1 000012   200003 470700                    LDP0  ! @SCID,,AUTO
         1 000013   000000 235300                    LDA   ! 0,,PR0
         1 000014   000020 604600 1                  TMOZ  ! OOPS
PL6.E3A0      #002=XSS$CTXPTR File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:59   
         1 000015   000000 236300                    LDQ   ! 0,,PR0
         1 000016   000000 116200 xsym               CMPQ  ! XSS_MAX_LCID
         1 000017   000043 604600 1                  TMOZ  ! s:1035

      288     1029    3   OOPS:
      289     1030    3               LS0$ = PINCRW( B$IS$, AUTO$->B$HALF);

   1030  1 000020   200005 470700       OOPS         LDP0  ! AUTO$,,AUTO
         1 000021   000100 100700                    MLR   ! fill='000'O
         1 000022   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
         1 000023   200010 000004                    ADSC9   LS0$+1,,AUTO             cn=0,n=4
         1 000024   200010 220300                    LDX0  ! LS0$+1,,AUTO
         1 000025   000000 636210                    EAQ   ! 0,X0
         1 000026   000000 036200 xsym               ADLQ  ! B$IS$
         1 000027   200007 756300                    STQ   ! LS0$,,AUTO

      290     1031    3               IF LS0$->B$UBIN = XSS_NOPZERO OR LS0$->B$UBIN = XSS_NOPIZERO THEN

   1031  1 000030   200007 471700                    LDP1  ! LS0$,,AUTO
         1 000031   100000 236300                    LDQ   ! 0,,PR1
         1 000032   000000 116200 xsym               CMPQ  ! XSS_NOPZERO
         1 000033   000036 600200 1                  TZE   ! s:1032
         1 000034   000000 116200 xsym               CMPQ  ! XSS_NOPIZERO
         1 000035   000042 601200 1                  TNZ   ! s:1033

      291     1032    3                   CALL XSS$SCREECH( XSS_F$CTXPTR);

   1032  1 000036   000003 630600 2                  EPPR0 ! 3
         1 000037   000002 631600 2                  EPPR1 ! 2
         1 000040   000000 701200 xent               TSX1  ! XSS$SCREECH
         1 000041   000000 011200                    NOP   ! 0

      292     1033    3               ALTRETURN;

   1033  1 000042   000000 702200 xent               TSX2  ! X66_AALT

      293     1034    3               END;
PL6.E3A0      #002=XSS$CTXPTR File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:60   
      294     1035    2           BLKX = MAPSCID( SCID);

   1035  1 000043   000001 736200                    QLS   ! 1
         1 000044   000000 471600 xsym               LDP1  ! XSS_MAPSCID$
         1 000045   000100 100706                    MLR   ! fill='000'O
         1 000046   100000 000002                    ADSC9   0,Q,PR1                  cn=0,n=2
         1 000047   200006 000002                    ADSC9   BLKX,,AUTO               cn=0,n=2

      295     1036    2           CALL XSS$BUFPTR( BLKX, CTX$) ALTRET( OOPS);

   1036  1 000050   200004 236300                    LDQ   ! @CTX$,,AUTO
         1 000051   200011 756300                    STQ   ! LS0$+2,,AUTO
         1 000052   200006 633700                    EPPR3 ! BLKX,,AUTO
         1 000053   200010 453700                    STP3  ! LS0$+1,,AUTO
         1 000054   200010 630700                    EPPR0 ! LS0$+1,,AUTO
         1 000055   000000 631600 2                  EPPR1 ! 0
         1 000056   000000 701200 xent               TSX1  ! XSS$BUFPTR
         1 000057   000020 702200 1                  TSX2  ! OOPS

      296     1037    2           RETURN;

   1037  1 000060   000000 702200 xent               TSX2  ! X66_ARET

      297     1038    2           END;

      298     1039
      299     1040    1       END XSS$CTXPTR;

   1040  1 000061   000000 702200 xent               TSX2  ! X66_ARET

XSS_F$CTXPTR
 Sect OctLoc
   0     000   302323 001277                                                    ....

(unnamed)
 Sect OctLoc
   0     001   100103 040040                                                    @C
PL6.E3A0      #002=XSS$CTXPTR File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:61   

(unnamed)
 Sect OctLoc
   2     000   000002 000000   000001 006000   000001 000000   000000 006000    ................
      300     1041        %EOD;

PL6.E3A0      #002=XSS$CTXPTR File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:62   
--  Include file information  --

   XSC_PERR_C.:XSA1TOU  is referenced.
   UM_CP6.:E05OU  is referenced.
      No diagnostics issued in procedure XSS$CTXPTR.
PL6.E3A0      #002=XSS$CTXPTR File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:63   

 **** Variables and constants ****

  ****  Section 000 RoData XSS$CTXPTR

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC        r     1 XSS_F$CTXPTR

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @CTX$                      3-0-0/w PTR         r     1 @SCID
     5-0-0/w PTR         r     1 AUTO$                      6-0-0/h UBIN(18)    r     1 BLKX
    *0-0-0/w PTR         r     1 CTX$                       7-0-0/w PTR         r     1 LS0$
    *0-0-0/w SBIN        r     1 SCID

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$IS$                      0-0-0/w PTR         r     1 XSS_MAPSCID$
     0-0-0/w SBIN        r     1 XSS_MAX_LCID               0-0-0/w UBIN        r     1 XSS_NOPIZERO
     0-0-0/w UBIN        r     1 XSS_NOPZERO

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/h UBIN(18)    r     1 B$HALF                     0-0-0/w UBIN        r     1 B$UBIN
     0-0-0/h UBIN(18)    r     1 MAPSCID(0:0)
     0-0-0/w STRC(54)    r     1 PLUGH

PL6.E3A0      #002=XSS$CTXPTR File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:64   

   Procedure XSS$CTXPTR requires 50 words for executable code.
   Procedure XSS$CTXPTR requires 10 words of local(AUTO) storage.
PL6.E3A0      #002=XSS$CTXPTR File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:65   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=XSS$CTXPTR File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:66   
          MINI XREF LISTING

AUTO$
      1011**DCL        13--MATRLIZ  1027--CALL     1030>>ASSIGN
B$HALF
      1015**DCL      1030>>ASSIGN
B$IS$
      1005**DCL      1030>>ASSIGN
B$UBIN
      1016**DCL      1031>>IF       1031>>IF
BLKX
      1019**DCL      1035<<ASSIGN   1036<>CALL
CTX$
      1020**DCL        13--PROC     1036<>CALL
LS0$
      1021**DCL      1030<<ASSIGN   1031>>IF       1031>>IF
MAPSCID
      1022**DCL      1035>>ASSIGN
OOPS
      1030**LABEL    1036--CALLALT
PLUGH.ADR
      1013**DCL      1027<>CALL
SCID
      1023**DCL        13--PROC     1028>>IF       1028>>IF       1035>>ASSIGN
XSS$BUFPTR
      1001**DCL-ENT  1036--CALL
XSS$EVLOG
      1003**DCL-ENT  1027--CALL
XSS$SCREECH
      1002**DCL-ENT  1032--CALL
XSS_F$CTXPTR
       962**DCL      1032<>CALL
XSS_MAPSCID$
      1006**DCL      1022--IMP-PTR  1035>>ASSIGN
PL6.E3A0      #002=XSS$CTXPTR File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:67   
XSS_MAX_LCID
      1007**DCL      1028>>IF
XSS_NOPIZERO
      1018**DCL      1031>>IF
XSS_NOPZERO
      1017**DCL      1031>>IF
PL6.E3A0      #002=XSS$CTXPTR File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:68   
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #002=XSS$CTXPTR File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:69   
              MINI UREF LISTING

B_POINTER    1000**DCL-ENT
XSS$CTXPTR      13**PROC

PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:70   
      301        1        /*T***********************************************************/
      302        2        /*T*                                                         */
      303        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      304        4        /*T*                                                         */
      305        5        /*T***********************************************************/
      306        6        /*F*    NAME:   XSS$GETMEM
      307        7                DESCRIPTION:
      308        8                    This is a general-purpose memory allocator for the use of the
      309        9                    Session layer and any other higher layers in the library.  Space
      310       10                    is allocated out of a data segment obtained on the first memory
      311       11                    allocation request.  The ALTRETURN is taken if the space cannot
      312       12                    be allocated, for any of several reasons.
      313       13                INPUT:  BYTSZ is the number of bytes of space required.
      314       14                OUTPUT: UBLKX is the internal 'block index' identifying the block.
      315       15                        UPTR$ if specified, gets a pointer to user data field
      316       16                        within the allocated block.
      317       17        */
      318       18        XSS$GETMEM: PROC( UBLKX, UPTR$, BYTSZ) ALTRET MATERIALIZE( $PR2 IN AUTO$);
      319       19        %INCLUDE CP_6;
      320     5578            %FPT_GDS( FPTN=FPT_GDS, RESULTS=XSS_DS_, SEGSIZE=0, FREE=YES);
      321     5594            %VLP_VECTOR( FPTN=XSS_DS_, STCLASS=STATIC SYMDEF);
      322     5609        %INCLUDE XSS_INTERNAL_E;
      323     5907        %INCLUDE XSS_INTERNAL_M;
      324     6496            %XSS$MEMBLK( NAME=B$BLOCK, STCLASS="BASED( B$)");
      325     6534        %MACRO FATALDEF( NAME=XSS_FATAL, STCLASS="CONSTANT SYMDEF", LVL=1, LAST=";",
      326     6535                         ERR#=0, SEV=7);
      327     6536            %VLP_ERRCODE( FPTN=NAME, STCLASS=STCLASS, FCG='XS', MID='S',
      328     6537                          MON='0'B, ERR#=ERR#, SEV=SEV);
      329     6538        %MEND;
      330     6539        %INCLUDE XSC_PERR_C;
      331     6616            %FATALDEF( NAME=XSS_F$ADJMEM, ERR#=%F$ADJMEM);
      332     6664            /*E*  ERROR:  XSS-F$ADJMEM-7
      333     6665                MESSAGE:  XSS$ADJMEM ALTRETURN would be ignored.
      334     6666            */
      335     6667            %FATALDEF( NAME=XSS_F$BLKPTR, ERR#=%F$BLKPTR);
      336     6715            /*E*  ERROR:  XSS-F$BLKPTR-7
      337     6716                MESSAGE:  XSS$BLKPTR ALTRETURN would be ignored.
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:71   
      338     6717            */
      339     6718            %FATALDEF( NAME=XSS_F$BUFPTR, ERR#=%F$BUFPTR);
      340     6766            /*E*  ERROR:  XSS-F$BUFPTR-7
      341     6767                MESSAGE:  XSS$BUFPTR ALTRETURN would be ignored.
      342     6768            */
      343     6769            %FATALDEF( NAME=XSS_F$GETMEM, ERR#=%F$GETMEM);
      344     6817            /*E*  ERROR:  XSS-F$GETMEM-7
      345     6818                MESSAGE:  XSS$GETMEM ALTRETURN would be ignored.
      346     6819            */
      347     6820            %FATALDEF( NAME=XSS_F$RELMEM, ERR#=%F$RELMEM);
      348     6868            /*E*  ERROR:  XSS-F$RELMEM-7
      349     6869                MESSAGE:  XSS$RELMEM ALTRETURN would be ignored.
      350     6870            */
      351     6871            %FATALDEF( NAME=XSS_F$SQZMEM, ERR#=%F$SQZMEM);
      352     6919            /*E*  ERROR:  XSS-F$SQZMEM-7
      353     6920                MESSAGE:  XSS$SQZMEM ALTRETURN would be ignored.
      354     6921            */
      355     6922        %EQU GETMEM=0;
      356     6923        %EQU ADJMEM=1;
      357     6924        %EQU BLKPTR=2;
      358     6925        %EQU BUFPTR=3;
      359     6926        %EQU RELMEM=4;
      360     6927        %EQU SQZMEM=5;
      361     6928
      362     6929    1       DCL B_POINTER ENTRY CONV(5);
      363     6930    1       DCL XSS$SCREECH ENTRY(1);
      364     6931    1       DCL XSS$EVLOG ENTRY(2);
      365     6932
      366     6933    1       DCL B$IS$ PTR SYMREF;
      367     6934
      368     6935            /* AUTO$ declared below must be the first AUTO variable */
      369     6936            /* so that the PLUGH code later on will work correctly */
      370     6937    1       DCL AUTO$ PTR;
      371     6938    1       DCL 1 PLUGH BASED ALIGNED,
      372     6939    1            2 ADR UBIN(18),
      373     6940    1            2 * BIT(18);
      374     6941    1       DCL B$HALF UBIN HALF BASED HALIGNED;
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:72   
      375     6942    1       DCL B$UBIN UBIN BASED;
      376     6943    1       DCL LS0$ PTR;
      377     6944    1       DCL XSS_NOPZERO UBIN STATIC SYMDEF INIT( BITBIN( '000000011000'O));
      378     6945    1       DCL XSS_NOPIZERO UBIN STATIC SYMDEF INIT( BITBIN( '000000011200'O));
      379     6946    1       DCL B$ PTR;
      380     6947    1       DCL 1 BLK(0:%MAXBLKX) STATIC,  /* the block array */
      381     6948    1            2 BASE UBIN HALF HALIGNED,
      382     6949    1            2 LINK UBIN HALF HALIGNED;
      383     6950    1       DCL BLKX SBIN;  /* index into block array */
      384     6951    1       DCL BLK@ SBIN STATIC;  /* index of first free entry in block array */
      385     6952    1       DCL BYTSZ SBIN;
      386     6953    1       DCL ENTFLAG SBIN;
      387     6954    1       DCL LST(0:%MAXSZ2X) UBIN HALF STATIC HALIGNED; /*free list heads by size*/
      388     6955    1       DCL LSTX SBIN;  /* index into free list */
      389     6956    1       DCL MEMINITED BIT(1) STATIC INIT( %FALSE);  /* set iff mm initialized */
      390     6957    1       DCL NUMBLK SBIN STATIC;
      391     6958    1       DCL SEGSZ SBIN STATIC INIT( 0);
      392     6959    1       DCL SZ2X(0:%MAXSZ2X) SBIN CONSTANT INIT(
      393     6960    1               4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048,
      394     6961    1               4096, 8192, 16384, 32768, 65536, 131072, 262144);
      395     6962    1       DCL UBLKX UBIN HALF HALIGNED;
      396     6963    1       DCL UPTR$ PTR;
      397     6964    1       DCL WDSZ SBIN;  /* number of words in the block */
      398     6965    1       DCL X SBIN;
      399     6966        %EJECT;
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:73   
      400     6967    1       ENTFLAG = %GETMEM;
      401     6968    1       IF NOT MEMINITED THEN
      402     6969    1           CALL MEMINIT;
      403     6970    1       WDSZ = ( BYTSZ + 11) / 4;  /* cvt bytes to wds, plus 2 for mm overhead */
      404     6971    1       IF WDSZ > SZ2X( %MAXSZ2X) THEN
      405     6972    1           GOTO GETOUT;  /* request is too big */
      406     6973    1       IF BLK@ = %NULL THEN
      407     6974    1           GOTO GETOUT;  /* too many blocks are already allocated */
      408     6975    1       LSTX = 0;
      409     6976    1       IF WDSZ < 4 THEN
      410     6977    1           WDSZ = 4;  /* minimum size allocatable is four words */
      411     6978    1       ELSE
      412     6979                /* find head of free list containing a block big enough to satisfy */
      413     6980    2           DO WHILE( SZ2X( LSTX) < WDSZ);
      414     6981    2               LSTX = LSTX + 1;
      415     6982    2               END;
      416     6983        %EJECT;
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:74   
      417     6984            /* Is there a free block on this list? */
      418     6985    1   SPLITTER:
      419     6986    2       IF LST( LSTX) = %NULL THEN DO;
      420     6987                /* Nope, split a bigger block and repeat */
      421     6988    3           DO X = LSTX + 1 TO %MAXSZ2X;
      422     6989    4               IF LST( X) ~= %NULL THEN DO;
      423     6990                        /* here's a block we can split */
      424     6991    4                   IF BLK@ = %NULL THEN
      425     6992    4                       GOTO GETOUT;  /* no more space in block table */
      426     6993                        /* move free block to next smaller list */
      427     6994    4                   LST( X - 1) = LST( X);
      428     6995    4                   LST( X) = BLK.LINK( LST( X));
      429     6996                        /* split it */
      430     6997    4                   BLK.LINK( LST( X - 1)) = BLK@;
      431     6998    4                   BLK.BASE( BLK@) = BLK.BASE( LST( X - 1)) + SZ2X( X - 1);
      432     6999    4                   X = BLK.LINK( BLK@);
      433     7000    4                   BLK.LINK( BLK@) = %NULL;
      434     7001    4                   BLK@ = X;
      435     7002    4                   IF BLK@ > NUMBLK THEN
      436     7003    4                       NUMBLK = BLK@;
      437     7004    4                   GOTO SPLITTER;
      438     7005    4                   END;
      439     7006    3               END;
      440     7007    2           GOTO GETOUT;  /* no block available to split */
      441     7008    2           END;
      442     7009        %EJECT;
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:75   
      443     7010            /* o.k. get the first block on this list and de-link it */
      444     7011    1       BLKX = LST( LSTX);
      445     7012    1       LST( LSTX) = BLK.LINK( BLKX);
      446     7013            /* extend data segment to include needed part if necessary */
      447     7014    1       X = BLK.BASE( BLKX) + WDSZ - SEGSZ;
      448     7015    2       IF X > 0 THEN DO;
      449     7016                /* yes, must extend segment */
      450     7017    2           FPT_GDS.V.SEGSIZE# = X;
      451     7018    2           CALL M$GDS( FPT_GDS)
      452     7019    3           WHENALTRETURN DO;
      453     7020                    /* couldn't extend.. re-link onto the list */
      454     7021    3               LST( LSTX) = BLKX;
      455     7022    4               DO INHIBIT;  /* might get here from event handler.. sigh.. */
      456     7023    4   GETOUT:
      457     7024    4                   LS0$ = PINCRW( B$IS$, AUTO$->B$HALF);
      458     7025    4                   IF LS0$->B$UBIN = XSS_NOPZERO OR LS0$->B$UBIN = XSS_NOPIZERO THEN
      459     7026    5                       DO CASE( ENTFLAG);
      460     7027    5                           CASE( %GETMEM);
      461     7028    5                               CALL XSS$SCREECH( XSS_F$GETMEM);
      462     7029    5                           CASE( %ADJMEM);
      463     7030    5                               CALL XSS$SCREECH( XSS_F$ADJMEM);
      464     7031    5                           CASE( %BLKPTR);
      465     7032    5                               CALL XSS$SCREECH( XSS_F$BLKPTR);
      466     7033    5                           CASE( %BUFPTR);
      467     7034    5                               CALL XSS$SCREECH( XSS_F$BUFPTR);
      468     7035    5                           CASE( %RELMEM);
      469     7036    5                               CALL XSS$SCREECH( XSS_F$RELMEM);
      470     7037    5                           CASE( %SQZMEM);
      471     7038    5                               CALL XSS$SCREECH( XSS_F$SQZMEM);
      472     7039    5                           END;
      473     7040    4                   ALTRETURN;
      474     7041    4                   END;
      475     7042    3               END;
      476     7043    2           SEGSZ = SEGSZ + X;
      477     7044    2           END;
      478     7045    1       BLK.LINK( BLKX) = %NULL;
      479     7046            /* initialize block */
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:76   
      480     7047    1       B$ = PINCRW( XSS_DS_.PTR$, BLK.BASE( BLKX));
      481     7048    1       B$BLOCK.BLKX = BLKX;
      482     7049    1       B$BLOCK.LSTX = LSTX;
      483     7050            /* return block index to user */
      484     7051    1       UBLKX = BLKX;
      485     7052    1       IF ADDR( UPTR$) ~= ADDR( NIL) THEN
      486     7053                /* optionally return address of data buffer within mem block */
      487     7054    1           UPTR$ = ADDR( B$BLOCK.DATA);
      488     7055    1       CALL XSS$EVLOG( 'GM', BLKX);
      489     7056    1       RETURN;
      490     7057        %EJECT;
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:77   
      491     7058        /*F*    NAME:   XSS$ADJMEM
      492     7059                DESCRIPTION:
      493     7060                    This routine adjusts the size of an allocated memory block.  If
      494     7061                    the new size is smaller than the current size, the difference is
      495     7062                    returned to the free list if possible.  If the new size is larger
      496     7063                    than the current size, a new block of the appropriate size is
      497     7064                    allocated, and the contents of the current block are copied to
      498     7065                    the new block, and the current block is released.
      499     7066                INPUT:  UBLKX identifies the block of interest.
      500     7067                        BYTSZ is the new size desired for the given memblk.
      501     7068                OUTPUT: UBLKX identifies the new memory block.
      502     7069                        UPTR$ if specified, gets a pointer to user data field
      503     7070                        within the new memory block.
      504     7071        */
      505     7072    1   XSS$ADJMEM: ENTRY( UBLKX, UPTR$, BYTSZ) ALTRET;
      506     7073
      507     7074    1       ENTFLAG = %ADJMEM;
      508     7075            /*N* implement this someday */
      509     7076    1       GOTO GETOUT;
      510     7077        %EJECT;
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:78   
      511     7078        /*F*    NAME:   XSS$BLKPTR
      512     7079                DESCRIPTION:
      513     7080                    This routine returns a pointer to an allocated memory block given
      514     7081                    its block number.  This routine is provided because the library
      515     7082                    deals with block indices rather than addresses, and blocks move.
      516     7083                INPUT:  UBLKX identifies the block of interest.
      517     7084                        UPTR$ gets a pointer to the block of interest.
      518     7085        */
      519     7086    1   XSS$BLKPTR: ENTRY( UBLKX, UPTR$) ALTRET;
      520     7087
      521     7088    1       ENTFLAG = %BLKPTR;
      522     7089    1       GOTO COMMON;
      523     7090        /*F*    NAME:   XSS$BUFPTR
      524     7091                DESCRIPTION:
      525     7092                    This routine returns a pointer to the data buffer within an
      526     7093                    allocated memory block given its block number.  This routine is
      527     7094                    provided because the library deals with block indices rather than
      528     7095                    addresses, and blocks move.
      529     7096                INPUT:  UBLKX identifies the block of interest.
      530     7097                        UPTR$ gets a pointer to the data buffer within the block.
      531     7098        */
      532     7099    1   XSS$BUFPTR: ENTRY( UBLKX, UPTR$) ALTRET;
      533     7100
      534     7101            /* have to INHIBIT because called from event handler */
      535     7102    2       DO INHIBIT;
      536     7103    2           ENTFLAG = %BUFPTR;
      537     7104    2           GOTO COMMON;
      538     7105    2           END;
      539     7106        %EJECT;
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:79   
      540     7107        /*F*    NAME:   XSS$RELMEM
      541     7108                DESCRIPTION:
      542     7109                    This is the routine called to release a previously allocated
      543     7110                    block to the memory pool.  The ALTRETURN is taken if an invalid
      544     7111                    'block index' is passed to this routine.
      545     7112                INPUT:  UBLKX identifies the block to release.
      546     7113        */
      547     7114    1   XSS$RELMEM: ENTRY( UBLKX) ALTRET;
      548     7115
      549     7116    1       ENTFLAG = %RELMEM;
      550     7117    1   COMMON:
      551     7118            /* have to INHIBIT because called from event handler */
      552     7119    2       DO INHIBIT;
      553     7120    2           BLKX = UBLKX;
      554     7121    3           DO CASE( ENTFLAG);
      555     7122    3               CASE( %BLKPTR, %BUFPTR);
      556     7123    3                   CALL XSS$EVLOG( '@M', PINCRW(ADDR(AUTO$),-6)->PLUGH.ADR);
      557     7124    3               CASE( %RELMEM);
      558     7125    3                   CALL XSS$EVLOG( 'RM', BLKX);
      559     7126    3               END;
      560     7127    2           IF BLKX > NUMBLK THEN
      561     7128    2               GOTO GETOUT;  /* invalid index into block array */
      562     7129    2           X = BLK.BASE( BLKX);
      563     7130    2           IF X > SEGSZ OR 0 ~= BITBIN( '3'O & BINBIT( X, 2)) THEN
      564     7131    2               GOTO GETOUT;  /* invalid offset into segment */
      565     7132    2           B$ = PINCRW( XSS_DS_.PTR$, X);
      566     7133    2           IF B$BLOCK.BLKX ~= BLKX THEN
      567     7134    2               GOTO GETOUT;  /* memory space is corrupted */
      568     7135    2           IF B$BLOCK.LSTX > %MAXSZ2X THEN
      569     7136    2               GOTO GETOUT;  /* memory space is corrupted */
      570     7137    3           DO CASE( ENTFLAG);
      571     7138    3               CASE( %RELMEM);
      572     7139    3                   LSTX = B$BLOCK.LSTX;
      573     7140                        /* link onto head of appropriate free list */
      574     7141    3                   BLK.LINK( BLKX) = LST( LSTX);
      575     7142    3                   LST( LSTX) = BLKX;
      576     7143    3               CASE( %BLKPTR);
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:80   
      577     7144    3                   UPTR$ = B$;
      578     7145    3               CASE( %BUFPTR);
      579     7146    3                   UPTR$ = ADDR( B$BLOCK.DATA);
      580     7147    3               END;
      581     7148    2           RETURN;
      582     7149    2           END;
      583     7150        %EJECT;
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:81   
      584     7151        /*F*    NAME:   XSS$SQZMEM
      585     7152                DESCRIPTION:
      586     7153                    This routine is called every once in a while (e.g., when a
      587     7154                    connection context block has been released) to determine if one
      588     7155                    or more Dynamic Memory pages could be released if the Session
      589     7156                    buffers were to be rearranged.  If the answer is yes, the
      590     7157                    necessary shuffling is done.  Note that memory blocks containing
      591     7158                    read buffers cannot be moved, which complicates things a bit.
      592     7159        */
      593     7160    1   XSS$SQZMEM: ENTRY ALTRET;
      594     7161
      595     7162    1       ENTFLAG = %SQZMEM;
      596     7163            /*N* Implement this someday */
      597     7164    1       RETURN;
      598     7165        %EJECT;
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:82   
      599     7166        /*I*    NAME:   MEMINIT
      600     7167                DESCRIPTION:
      601     7168                    Initializes tables for the memory allocator.
      602     7169        */
      603     7170    1   MEMINIT: PROC;
      604     7171
      605     7172            /* initialize free list heads */
      606     7173    3       DO X = 0 TO %MAXSZ2X - 1;
      607     7174    3           LST( X) = %NULL;
      608     7175    3           END;
      609     7176            /* record the all-inclusive initial block */
      610     7177    2       LST( %MAXSZ2X) = 0;
      611     7178    2       BLK.LINK(0) = %NULL;
      612     7179    2       BLK.BASE(0) = 0;
      613     7180    2       NUMBLK = 1;
      614     7181            /* initialize the block table */
      615     7182    3       DO X = 1 TO %MAXBLKX;
      616     7183    3           BLK.LINK( X) = X + 1;
      617     7184    3           BLK.BASE( X) = 0;
      618     7185    3           END;
      619     7186    2       BLK.LINK( %MAXBLKX) = %NULL;
      620     7187            /* init free block head */
      621     7188    2       BLK@ = 1;
      622     7189    2       MEMINITED = %TRUE;
      623     7190    2       RETURN;
      624     7191
      625     7192    2       END MEMINIT;
      626     7193
      627     7194    1       END XSS$GETMEM;
      628     7195        %EOD;

PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:83   
--  Include file information  --

   XSC_PERR_C.:XSA1TOU  is referenced.
   XSS_INTERNAL_M.:XSA1TOU  is referenced.
   XSS_INTERNAL_E.:XSA1TOU  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure XSS$GETMEM.

   Procedure XSS$GETMEM requires 373 words for executable code.
   Procedure XSS$GETMEM requires 18 words of local(AUTO) storage.

PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:84   

 Object Unit name= XSS$GETMEM                                 File name= XSS$DATA.:XSA1TOU
 UTS= OCT 01 '97 12:13:54.16 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none   151    227  XSS$GETMEM
    2  RoData even  UTS     26     32  XSS$GETMEM
    3   Proc  even  none   373    565  XSS$GETMEM
    4  RoData even  none    13     15  XSS$GETMEM

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     3      0   yes    yes     yes      Std        3  XSS$GETMEM
     3    331          yes     yes      Std        3  XSS$ADJMEM
     3    337          yes     yes      Std        2  XSS$BLKPTR
     3    345          yes     yes      Std        2  XSS$BUFPTR
     3    354          yes     yes      Std        1  XSS$RELMEM
     3    511          yes     yes      Std        0  XSS$SQZMEM
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:85   

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
    1      6  XSS_DS_                            2      0  XSS_F$ADJMEM
    2      1  XSS_F$BLKPTR                       2      2  XSS_F$BUFPTR
    2      3  XSS_F$GETMEM                       2      4  XSS_F$RELMEM
    2      5  XSS_F$SQZMEM                       1     10  XSS_NOPZERO
    1     11  XSS_NOPIZERO

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes          ~proc      0 B_POINTER
         yes           Std       1 XSS$SCREECH
         yes           Std       2 XSS$EVLOG
                       nStd      0 X66_AUTO_3
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B$IS$

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:86   


      301        1        /*T***********************************************************/
      302        2        /*T*                                                         */
      303        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      304        4        /*T*                                                         */
      305        5        /*T***********************************************************/
      306        6        /*F*    NAME:   XSS$GETMEM
      307        7                DESCRIPTION:
      308        8                    This is a general-purpose memory allocator for the use of the
      309        9                    Session layer and any other higher layers in the library.  Space
      310       10                    is allocated out of a data segment obtained on the first memory
      311       11                    allocation request.  The ALTRETURN is taken if the space cannot
      312       12                    be allocated, for any of several reasons.
      313       13                INPUT:  BYTSZ is the number of bytes of space required.
      314       14                OUTPUT: UBLKX is the internal 'block index' identifying the block.
      315       15                        UPTR$ if specified, gets a pointer to user data field
      316       16                        within the allocated block.
      317       17        */
      318       18        XSS$GETMEM: PROC( UBLKX, UPTR$, BYTSZ) ALTRET MATERIALIZE( $PR2 IN AUTO$);

     18  3 000000   000000 700200 xent  XSS$GETMEM   TSX0  ! X66_AUTO_3
         3 000001   000022 000003                    ZERO    18,3
         3 000002   200006 452700                    STP2  ! AUTO$,,AUTO

      319       19        %INCLUDE CP_6;
      320     5578            %FPT_GDS( FPTN=FPT_GDS, RESULTS=XSS_DS_, SEGSIZE=0, FREE=YES);
      321     5594            %VLP_VECTOR( FPTN=XSS_DS_, STCLASS=STATIC SYMDEF);
      322     5609        %INCLUDE XSS_INTERNAL_E;
      323     5907        %INCLUDE XSS_INTERNAL_M;
      324     6496            %XSS$MEMBLK( NAME=B$BLOCK, STCLASS="BASED( B$)");
      325     6534        %MACRO FATALDEF( NAME=XSS_FATAL, STCLASS="CONSTANT SYMDEF", LVL=1, LAST=";",
      326     6535                         ERR#=0, SEV=7);
      327     6536            %VLP_ERRCODE( FPTN=NAME, STCLASS=STCLASS, FCG='XS', MID='S',
      328     6537                          MON='0'B, ERR#=ERR#, SEV=SEV);
      329     6538        %MEND;
      330     6539        %INCLUDE XSC_PERR_C;
      331     6616            %FATALDEF( NAME=XSS_F$ADJMEM, ERR#=%F$ADJMEM);
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:87   
      332     6664            /*E*  ERROR:  XSS-F$ADJMEM-7
      333     6665                MESSAGE:  XSS$ADJMEM ALTRETURN would be ignored.
      334     6666            */
      335     6667            %FATALDEF( NAME=XSS_F$BLKPTR, ERR#=%F$BLKPTR);
      336     6715            /*E*  ERROR:  XSS-F$BLKPTR-7
      337     6716                MESSAGE:  XSS$BLKPTR ALTRETURN would be ignored.
      338     6717            */
      339     6718            %FATALDEF( NAME=XSS_F$BUFPTR, ERR#=%F$BUFPTR);
      340     6766            /*E*  ERROR:  XSS-F$BUFPTR-7
      341     6767                MESSAGE:  XSS$BUFPTR ALTRETURN would be ignored.
      342     6768            */
      343     6769            %FATALDEF( NAME=XSS_F$GETMEM, ERR#=%F$GETMEM);
      344     6817            /*E*  ERROR:  XSS-F$GETMEM-7
      345     6818                MESSAGE:  XSS$GETMEM ALTRETURN would be ignored.
      346     6819            */
      347     6820            %FATALDEF( NAME=XSS_F$RELMEM, ERR#=%F$RELMEM);
      348     6868            /*E*  ERROR:  XSS-F$RELMEM-7
      349     6869                MESSAGE:  XSS$RELMEM ALTRETURN would be ignored.
      350     6870            */
      351     6871            %FATALDEF( NAME=XSS_F$SQZMEM, ERR#=%F$SQZMEM);
      352     6919            /*E*  ERROR:  XSS-F$SQZMEM-7
      353     6920                MESSAGE:  XSS$SQZMEM ALTRETURN would be ignored.
      354     6921            */
      355     6922        %EQU GETMEM=0;
      356     6923        %EQU ADJMEM=1;
      357     6924        %EQU BLKPTR=2;
      358     6925        %EQU BUFPTR=3;
      359     6926        %EQU RELMEM=4;
      360     6927        %EQU SQZMEM=5;
      361     6928
      362     6929    1       DCL B_POINTER ENTRY CONV(5);
      363     6930    1       DCL XSS$SCREECH ENTRY(1);
      364     6931    1       DCL XSS$EVLOG ENTRY(2);
      365     6932
      366     6933    1       DCL B$IS$ PTR SYMREF;
      367     6934
      368     6935            /* AUTO$ declared below must be the first AUTO variable */
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:88   
      369     6936            /* so that the PLUGH code later on will work correctly */
      370     6937    1       DCL AUTO$ PTR;
      371     6938    1       DCL 1 PLUGH BASED ALIGNED,
      372     6939    1            2 ADR UBIN(18),
      373     6940    1            2 * BIT(18);
      374     6941    1       DCL B$HALF UBIN HALF BASED HALIGNED;
      375     6942    1       DCL B$UBIN UBIN BASED;
      376     6943    1       DCL LS0$ PTR;
      377     6944    1       DCL XSS_NOPZERO UBIN STATIC SYMDEF INIT( BITBIN( '000000011000'O));
      378     6945    1       DCL XSS_NOPIZERO UBIN STATIC SYMDEF INIT( BITBIN( '000000011200'O));
      379     6946    1       DCL B$ PTR;
      380     6947    1       DCL 1 BLK(0:%MAXBLKX) STATIC,  /* the block array */
      381     6948    1            2 BASE UBIN HALF HALIGNED,
      382     6949    1            2 LINK UBIN HALF HALIGNED;
      383     6950    1       DCL BLKX SBIN;  /* index into block array */
      384     6951    1       DCL BLK@ SBIN STATIC;  /* index of first free entry in block array */
      385     6952    1       DCL BYTSZ SBIN;
      386     6953    1       DCL ENTFLAG SBIN;
      387     6954    1       DCL LST(0:%MAXSZ2X) UBIN HALF STATIC HALIGNED; /*free list heads by size*/
      388     6955    1       DCL LSTX SBIN;  /* index into free list */
      389     6956    1       DCL MEMINITED BIT(1) STATIC INIT( %FALSE);  /* set iff mm initialized */
      390     6957    1       DCL NUMBLK SBIN STATIC;
      391     6958    1       DCL SEGSZ SBIN STATIC INIT( 0);
      392     6959    1       DCL SZ2X(0:%MAXSZ2X) SBIN CONSTANT INIT(
      393     6960    1               4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048,
      394     6961    1               4096, 8192, 16384, 32768, 65536, 131072, 262144);
      395     6962    1       DCL UBLKX UBIN HALF HALIGNED;
      396     6963    1       DCL UPTR$ PTR;
      397     6964    1       DCL WDSZ SBIN;  /* number of words in the block */
      398     6965    1       DCL X SBIN;
      399     6966        %EJECT;
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:89   
      400     6967    1       ENTFLAG = %GETMEM;

   6967  3 000003   200012 450100                    STZ     ENTFLAG,,AUTO

      401     6968    1       IF NOT MEMINITED THEN

   6968  3 000004   000224 234000 1                  SZN     MEMINITED
         3 000005   000010 604000 3                  TMI     s:6970

      402     6969    1           CALL MEMINIT;

   6969  3 000006   000517 701000 3                  TSX1    MEMINIT
         3 000007   000000 011000                    NOP     0

      403     6970    1       WDSZ = ( BYTSZ + 11) / 4;  /* cvt bytes to wds, plus 2 for mm overhead */

   6970  3 000010   200005 470500                    LDP0    @BYTSZ,,AUTO
         3 000011   000000 236100                    LDQ     0,,PR0
         3 000012   000013 036007                    ADLQ    11,DL
         3 000013   000004 506007                    DIV     4,DL
         3 000014   200014 756100                    STQ     WDSZ,,AUTO

      404     6971    1       IF WDSZ > SZ2X( %MAXSZ2X) THEN

   6971  3 000015   000026 116000 2                  CMPQ    SZ2X+16
         3 000016   000201 605400 3                  TPNZ    GETOUT

      405     6972    1           GOTO GETOUT;  /* request is too big */
      406     6973    1       IF BLK@ = %NULL THEN

   6973  3 000017   000212 235000 1                  LDA     BLK@
         3 000020   777777 115007                    CMPA    -1,DL
         3 000021   000201 600000 3                  TZE     GETOUT

      407     6974    1           GOTO GETOUT;  /* too many blocks are already allocated */
      408     6975    1       LSTX = 0;

PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:90   
   6975  3 000022   200013 450100                    STZ     LSTX,,AUTO

      409     6976    1       IF WDSZ < 4 THEN

   6976  3 000023   000004 116007                    CMPQ    4,DL
         3 000024   000030 605000 3                  TPL     s:6980

      410     6977    1           WDSZ = 4;  /* minimum size allocatable is four words */

   6977  3 000025   000004 235007                    LDA     4,DL
         3 000026   200014 755100                    STA     WDSZ,,AUTO
         3 000027   000040 710000 3                  TRA     SPLITTER

      411     6978    1       ELSE
      412     6979                /* find head of free list containing a block big enough to satisfy */
      413     6980    2           DO WHILE( SZ2X( LSTX) < WDSZ);

   6980  3 000030   200013 720100                    LXL0    LSTX,,AUTO
         3 000031   000006 116010 2                  CMPQ    SZ2X,X0
         3 000032   000040 604400 3                  TMOZ    SPLITTER

      414     6981    2               LSTX = LSTX + 1;

   6981  3 000033   200013 054100                    AOS     LSTX,,AUTO

      415     6982    2               END;

   6982  3 000034   200013 720100                    LXL0    LSTX,,AUTO
         3 000035   000006 236010 2                  LDQ     SZ2X,X0
         3 000036   200014 116100                    CMPQ    WDSZ,,AUTO
         3 000037   000033 604000 3                  TMI     s:6981

      416     6983        %EJECT;
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:91   
      417     6984            /* Is there a free block on this list? */
      418     6985    1   SPLITTER:
      419     6986    2       IF LST( LSTX) = %NULL THEN DO;

   6986  3 000040   200013 235100       SPLITTER     LDA     LSTX,,AUTO
         3 000041   000001 735000                    ALS     1
         3 000042   000100 101405                    MRL     fill='000'O
         3 000043   000213 000002 1                  ADSC9   LST,A                    cn=0,n=2
         3 000044   200020 000004                    ADSC9   X+3,,AUTO                cn=0,n=4
         3 000045   200020 236100                    LDQ     X+3,,AUTO
         3 000046   777777 116007                    CMPQ    -1,DL
         3 000047   000144 601000 3                  TNZ     s:7011

      420     6987                /* Nope, split a bigger block and repeat */
      421     6988    3           DO X = LSTX + 1 TO %MAXSZ2X;

   6988  3 000050   200013 236100                    LDQ     LSTX,,AUTO
         3 000051   000001 036007                    ADLQ    1,DL
         3 000052   200015 756100                    STQ     X,,AUTO
         3 000053   000140 710000 3                  TRA     s:7006+1

      422     6989    4               IF LST( X) ~= %NULL THEN DO;

   6989  3 000054   200015 235100                    LDA     X,,AUTO
         3 000055   000001 735000                    ALS     1
         3 000056   000100 101405                    MRL     fill='000'O
         3 000057   000213 000002 1                  ADSC9   LST,A                    cn=0,n=2
         3 000060   200020 000004                    ADSC9   X+3,,AUTO                cn=0,n=4
         3 000061   200020 236100                    LDQ     X+3,,AUTO
         3 000062   777777 116007                    CMPQ    -1,DL
         3 000063   000137 600000 3                  TZE     s:7006

      423     6990                        /* here's a block we can split */
      424     6991    4                   IF BLK@ = %NULL THEN

   6991  3 000064   000212 236000 1                  LDQ     BLK@
         3 000065   777777 116007                    CMPQ    -1,DL
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:92   
         3 000066   000201 600000 3                  TZE     GETOUT

      425     6992    4                       GOTO GETOUT;  /* no more space in block table */
      426     6993                        /* move free block to next smaller list */
      427     6994    4                   LST( X - 1) = LST( X);

   6994  3 000067   000005 100405                    MLR     fill='000'O
         3 000070   000213 000002 1                  ADSC9   LST,A                    cn=0,n=2
         3 000071   000212 400002 1                  ADSC9   BLK@,A                   cn=2,n=2

      428     6995    4                   LST( X) = BLK.LINK( LST( X));

   6995  3 000072   000100 100405                    MLR     fill='000'O
         3 000073   000213 000002 1                  ADSC9   LST,A                    cn=0,n=2
         3 000074   200020 000004                    ADSC9   X+3,,AUTO                cn=0,n=4
         3 000075   200020 220100                    LDX0    X+3,,AUTO
         3 000076   000000 635010                    EAA     0,X0
         3 000077   000020 771000                    ARL     16
         3 000100   200015 236100                    LDQ     X,,AUTO
         3 000101   000001 736000                    QLS     1
         3 000102   000006 100405                    MLR     fill='000'O
         3 000103   000012 400002 1                  ADSC9   BLK,A                    cn=2,n=2
         3 000104   000213 000002 1                  ADSC9   LST,Q                    cn=0,n=2

      429     6996                        /* split it */
      430     6997    4                   BLK.LINK( LST( X - 1)) = BLK@;

   6997  3 000105   000100 100406                    MLR     fill='000'O
         3 000106   000212 400002 1                  ADSC9   BLK@,Q                   cn=2,n=2
         3 000107   200020 000004                    ADSC9   X+3,,AUTO                cn=0,n=4
         3 000110   200020 220100                    LDX0    X+3,,AUTO
         3 000111   000212 721000 1                  LXL1    BLK@
         3 000112   000012 441010 1                  SXL1    BLK,X0

      431     6998    4                   BLK.BASE( BLK@) = BLK.BASE( LST( X - 1)) + SZ2X( X - 1);

   6998  3 000113   000100 100406                    MLR     fill='000'O
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:93   
         3 000114   000212 400002 1                  ADSC9   BLK@,Q                   cn=2,n=2
         3 000115   200020 000004                    ADSC9   X+3,,AUTO                cn=0,n=4
         3 000116   200020 220100                    LDX0    X+3,,AUTO
         3 000117   200015 722100                    LXL2    X,,AUTO
         3 000120   000012 236010 1                  LDQ     BLK,X0
         3 000121   000022 772000                    QRL     18
         3 000122   000005 036012 2                  ADLQ    XSS_F$SQZMEM,X2
         3 000123   000000 623006                    EAX3    0,QL
         3 000124   000012 743011 1                  STX3    BLK,X1

      432     6999    4                   X = BLK.LINK( BLK@);

   6999  3 000125   000012 236011 1                  LDQ     BLK,X1
         3 000126   777777 376007                    ANQ     -1,DL
         3 000127   200015 756100                    STQ     X,,AUTO

      433     7000    4                   BLK.LINK( BLK@) = %NULL;

   7000  3 000130   777777 220003                    LDX0    -1,DU
         3 000131   000012 440011 1                  SXL0    BLK,X1

      434     7001    4                   BLK@ = X;

   7001  3 000132   000212 756000 1                  STQ     BLK@

      435     7002    4                   IF BLK@ > NUMBLK THEN

   7002  3 000133   000225 116000 1                  CMPQ    NUMBLK
         3 000134   000136 604400 3                  TMOZ    s:7004

      436     7003    4                       NUMBLK = BLK@;

   7003  3 000135   000225 756000 1                  STQ     NUMBLK

      437     7004    4                   GOTO SPLITTER;

   7004  3 000136   000040 710000 3                  TRA     SPLITTER
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:94   

      438     7005    4                   END;
      439     7006    3               END;

   7006  3 000137   200015 054100                    AOS     X,,AUTO
         3 000140   200015 235100                    LDA     X,,AUTO
         3 000141   000020 115007                    CMPA    16,DL
         3 000142   000054 604400 3                  TMOZ    s:6989

      440     7007    2           GOTO GETOUT;  /* no block available to split */

   7007  3 000143   000201 710000 3                  TRA     GETOUT

      441     7008    2           END;
      442     7009        %EJECT;
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:95   
      443     7010            /* o.k. get the first block on this list and de-link it */
      444     7011    1       BLKX = LST( LSTX);

   7011  3 000144   000100 101405                    MRL     fill='000'O
         3 000145   000213 000002 1                  ADSC9   LST,A                    cn=0,n=2
         3 000146   200011 000004                    ADSC9   BLKX,,AUTO               cn=0,n=4

      445     7012    1       LST( LSTX) = BLK.LINK( BLKX);

   7012  3 000147   200011 235100                    LDA     BLKX,,AUTO
         3 000150   000002 735000                    ALS     2
         3 000151   200013 236100                    LDQ     LSTX,,AUTO
         3 000152   000001 736000                    QLS     1
         3 000153   000006 100405                    MLR     fill='000'O
         3 000154   000012 400002 1                  ADSC9   BLK,A                    cn=2,n=2
         3 000155   000213 000002 1                  ADSC9   LST,Q                    cn=0,n=2

      446     7013            /* extend data segment to include needed part if necessary */
      447     7014    1       X = BLK.BASE( BLKX) + WDSZ - SEGSZ;

   7014  3 000156   200011 720100                    LXL0    BLKX,,AUTO
         3 000157   000012 236010 1                  LDQ     BLK,X0
         3 000160   000022 772000                    QRL     18
         3 000161   200014 036100                    ADLQ    WDSZ,,AUTO
         3 000162   000226 136000 1                  SBLQ    SEGSZ
         3 000163   200015 756100                    STQ     X,,AUTO

      448     7015    2       IF X > 0 THEN DO;

   7015  3 000164   000272 604400 3                  TMOZ    s:7045

      449     7016                /* yes, must extend segment */
      450     7017    2           FPT_GDS.V.SEGSIZE# = X;

   7017  3 000165   000000 621006                    EAX1    0,QL
         3 000166   000004 441000 1                  SXL1    FPT_GDS+4

PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:96   
      451     7018    2           CALL M$GDS( FPT_GDS)

   7018  3 000167   000000 630400 1                  EPPR0   FPT_GDS
         3 000170   430001 713400                    CLIMB   alt,gds
         3 000171   400400 401760                    pmme    nvectors=2
         3 000172   000174 702000 3                  TSX2    s:7021
         3 000173   000267 710000 3                  TRA     s:7043

      452     7019    3           WHENALTRETURN DO;

      453     7020                    /* couldn't extend.. re-link onto the list */
      454     7021    3               LST( LSTX) = BLKX;

   7021  3 000174   200013 235100                    LDA     LSTX,,AUTO
         3 000175   000001 735000                    ALS     1
         3 000176   000005 101500                    MRL     fill='000'O
         3 000177   200011 000004                    ADSC9   BLKX,,AUTO               cn=0,n=4
         3 000200   000213 000002 1                  ADSC9   LST,A                    cn=0,n=2

      455     7022    4               DO INHIBIT;  /* might get here from event handler.. sigh.. */

      456     7023    4   GETOUT:
      457     7024    4                   LS0$ = PINCRW( B$IS$, AUTO$->B$HALF);

   7024  3 000201   200006 470700       GETOUT       LDP0  ! AUTO$,,AUTO
         3 000202   000100 100700                    MLR   ! fill='000'O
         3 000203   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
         3 000204   200020 000004                    ADSC9   X+3,,AUTO                cn=0,n=4
         3 000205   200020 220300                    LDX0  ! X+3,,AUTO
         3 000206   000000 636210                    EAQ   ! 0,X0
         3 000207   000000 036200 xsym               ADLQ  ! B$IS$
         3 000210   200007 756300                    STQ   ! LS0$,,AUTO

      458     7025    4                   IF LS0$->B$UBIN = XSS_NOPZERO OR LS0$->B$UBIN = XSS_NOPIZERO THEN

   7025  3 000211   200007 471700                    LDP1  ! LS0$,,AUTO
         3 000212   100000 236300                    LDQ   ! 0,,PR1
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:97   
         3 000213   000010 116200 1                  CMPQ  ! XSS_NOPZERO
         3 000214   000217 600200 3                  TZE   ! s:7026
         3 000215   000011 116200 1                  CMPQ  ! XSS_NOPIZERO
         3 000216   000266 601200 3                  TNZ   ! s:7040

      459     7026    5                       DO CASE( ENTFLAG);

   7026  3 000217   200012 235300                    LDA   ! ENTFLAG,,AUTO
         3 000220   000006 115207                    CMPA  ! 6,DL
         3 000221   000223 602205 3                  TNC   ! s:7026+4,AL
         3 000222   000266 710200 3                  TRA   ! s:7040
         3 000223   000231 710200 3                  TRA   ! s:7028
         3 000224   000236 710200 3                  TRA   ! s:7030
         3 000225   000243 710200 3                  TRA   ! s:7032
         3 000226   000250 710200 3                  TRA   ! s:7034
         3 000227   000255 710200 3                  TRA   ! s:7036
         3 000230   000262 710200 3                  TRA   ! s:7038

      460     7027    5                           CASE( %GETMEM);

      461     7028    5                               CALL XSS$SCREECH( XSS_F$GETMEM);

   7028  3 000231   000001 630600 4                  EPPR0 ! 1
         3 000232   000000 631600 4                  EPPR1 ! 0
         3 000233   000000 701200 xent               TSX1  ! XSS$SCREECH
         3 000234   000000 011200                    NOP   ! 0
         3 000235   000266 710200 3                  TRA   ! s:7040

      462     7029    5                           CASE( %ADJMEM);

      463     7030    5                               CALL XSS$SCREECH( XSS_F$ADJMEM);

   7030  3 000236   000002 630600 4                  EPPR0 ! 2
         3 000237   000000 631600 4                  EPPR1 ! 0
         3 000240   000000 701200 xent               TSX1  ! XSS$SCREECH
         3 000241   000000 011200                    NOP   ! 0
         3 000242   000266 710200 3                  TRA   ! s:7040
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:98   

      464     7031    5                           CASE( %BLKPTR);

      465     7032    5                               CALL XSS$SCREECH( XSS_F$BLKPTR);

   7032  3 000243   000003 630600 4                  EPPR0 ! 3
         3 000244   000000 631600 4                  EPPR1 ! 0
         3 000245   000000 701200 xent               TSX1  ! XSS$SCREECH
         3 000246   000000 011200                    NOP   ! 0
         3 000247   000266 710200 3                  TRA   ! s:7040

      466     7033    5                           CASE( %BUFPTR);

      467     7034    5                               CALL XSS$SCREECH( XSS_F$BUFPTR);

   7034  3 000250   000004 630600 4                  EPPR0 ! 4
         3 000251   000000 631600 4                  EPPR1 ! 0
         3 000252   000000 701200 xent               TSX1  ! XSS$SCREECH
         3 000253   000000 011200                    NOP   ! 0
         3 000254   000266 710200 3                  TRA   ! s:7040

      468     7035    5                           CASE( %RELMEM);

      469     7036    5                               CALL XSS$SCREECH( XSS_F$RELMEM);

   7036  3 000255   000005 630600 4                  EPPR0 ! 5
         3 000256   000000 631600 4                  EPPR1 ! 0
         3 000257   000000 701200 xent               TSX1  ! XSS$SCREECH
         3 000260   000000 011200                    NOP   ! 0
         3 000261   000266 710200 3                  TRA   ! s:7040

      470     7037    5                           CASE( %SQZMEM);

      471     7038    5                               CALL XSS$SCREECH( XSS_F$SQZMEM);

   7038  3 000262   000006 630600 4                  EPPR0 ! 6
         3 000263   000000 631600 4                  EPPR1 ! 0
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:99   
         3 000264   000000 701200 xent               TSX1  ! XSS$SCREECH
         3 000265   000000 011200                    NOP   ! 0

      472     7039    5                           END;

      473     7040    4                   ALTRETURN;

   7040  3 000266   000000 702200 xent               TSX2  ! X66_AALT

      474     7041    4                   END;

      475     7042    3               END;

      476     7043    2           SEGSZ = SEGSZ + X;

   7043  3 000267   000226 236000 1                  LDQ     SEGSZ
         3 000270   200015 036100                    ADLQ    X,,AUTO
         3 000271   000226 756000 1                  STQ     SEGSZ

      477     7044    2           END;

      478     7045    1       BLK.LINK( BLKX) = %NULL;

   7045  3 000272   777777 220003                    LDX0    -1,DU
         3 000273   200011 721100                    LXL1    BLKX,,AUTO
         3 000274   000012 440011 1                  SXL0    BLK,X1

      479     7046            /* initialize block */
      480     7047    1       B$ = PINCRW( XSS_DS_.PTR$, BLK.BASE( BLKX));

   7047  3 000275   000012 222011 1                  LDX2    BLK,X1
         3 000276   000000 636012                    EAQ     0,X2
         3 000277   000007 036000 1                  ADLQ    XSS_DS_+1
         3 000300   200010 756100                    STQ     B$,,AUTO

      481     7048    1       B$BLOCK.BLKX = BLKX;

PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:100  
   7048  3 000301   200010 470500                    LDP0    B$,,AUTO
         3 000302   000000 441100                    SXL1    0,,PR0

      482     7049    1       B$BLOCK.LSTX = LSTX;

   7049  3 000303   200013 722100                    LXL2    LSTX,,AUTO
         3 000304   000000 742100                    STX2    0,,PR0

      483     7050            /* return block index to user */
      484     7051    1       UBLKX = BLKX;

   7051  3 000305   200003 471500                    LDP1    @UBLKX,,AUTO
         3 000306   000100 101500                    MRL     fill='000'O
         3 000307   200011 000004                    ADSC9   BLKX,,AUTO               cn=0,n=4
         3 000310   100000 000002                    ADSC9   0,,PR1                   cn=0,n=2

      485     7052    1       IF ADDR( UPTR$) ~= ADDR( NIL) THEN

   7052  3 000311   200004 236100                    LDQ     @UPTR$,,AUTO
         3 000312   000007 116000 4                  CMPQ    7
         3 000313   000320 600000 3                  TZE     s:7055

      486     7053                /* optionally return address of data buffer within mem block */
      487     7054    1           UPTR$ = ADDR( B$BLOCK.DATA);

   7054  3 000314   200010 236100                    LDQ     B$,,AUTO
         3 000315   000002 036003                    ADLQ    2,DU
         3 000316   200004 473500                    LDP3    @UPTR$,,AUTO
         3 000317   300000 756100                    STQ     0,,PR3

      488     7055    1       CALL XSS$EVLOG( 'GM', BLKX);

   7055  3 000320   200011 633500                    EPPR3   BLKX,,AUTO
         3 000321   200021 453500                    STP3    X+4,,AUTO
         3 000322   000011 236000 4                  LDQ     9
         3 000323   200020 756100                    STQ     X+3,,AUTO
         3 000324   200020 630500                    EPPR0   X+3,,AUTO
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:101  
         3 000325   000010 631400 4                  EPPR1   8
         3 000326   000000 701000 xent               TSX1    XSS$EVLOG
         3 000327   000000 011000                    NOP     0

      489     7056    1       RETURN;

   7056  3 000330   000000 702200 xent               TSX2  ! X66_ARET

      490     7057        %EJECT;
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:102  
      491     7058        /*F*    NAME:   XSS$ADJMEM
      492     7059                DESCRIPTION:
      493     7060                    This routine adjusts the size of an allocated memory block.  If
      494     7061                    the new size is smaller than the current size, the difference is
      495     7062                    returned to the free list if possible.  If the new size is larger
      496     7063                    than the current size, a new block of the appropriate size is
      497     7064                    allocated, and the contents of the current block are copied to
      498     7065                    the new block, and the current block is released.
      499     7066                INPUT:  UBLKX identifies the block of interest.
      500     7067                        BYTSZ is the new size desired for the given memblk.
      501     7068                OUTPUT: UBLKX identifies the new memory block.
      502     7069                        UPTR$ if specified, gets a pointer to user data field
      503     7070                        within the new memory block.
      504     7071        */
      505     7072    1   XSS$ADJMEM: ENTRY( UBLKX, UPTR$, BYTSZ) ALTRET;

   7072  3 000331   000000 700200 xent  XSS$ADJMEM   TSX0  ! X66_AUTO_3
         3 000332   000022 000003                    ZERO    18,3
         3 000333   200006 452700                    STP2  ! AUTO$,,AUTO

      506     7073
      507     7074    1       ENTFLAG = %ADJMEM;

   7074  3 000334   000001 235007                    LDA     1,DL
         3 000335   200012 755100                    STA     ENTFLAG,,AUTO

      508     7075            /*N* implement this someday */
      509     7076    1       GOTO GETOUT;

   7076  3 000336   000201 710000 3                  TRA     GETOUT

      510     7077        %EJECT;
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:103  
      511     7078        /*F*    NAME:   XSS$BLKPTR
      512     7079                DESCRIPTION:
      513     7080                    This routine returns a pointer to an allocated memory block given
      514     7081                    its block number.  This routine is provided because the library
      515     7082                    deals with block indices rather than addresses, and blocks move.
      516     7083                INPUT:  UBLKX identifies the block of interest.
      517     7084                        UPTR$ gets a pointer to the block of interest.
      518     7085        */
      519     7086    1   XSS$BLKPTR: ENTRY( UBLKX, UPTR$) ALTRET;

   7086  3 000337   000000 700200 xent  XSS$BLKPTR   TSX0  ! X66_AUTO_3
         3 000340   000022 000003                    ZERO    18,3
         3 000341   200006 452700                    STP2  ! AUTO$,,AUTO

      520     7087
      521     7088    1       ENTFLAG = %BLKPTR;

   7088  3 000342   000002 235007                    LDA     2,DL
         3 000343   200012 755100                    STA     ENTFLAG,,AUTO

      522     7089    1       GOTO COMMON;

   7089  3 000344   000361 710000 3                  TRA     COMMON

      523     7090        /*F*    NAME:   XSS$BUFPTR
      524     7091                DESCRIPTION:
      525     7092                    This routine returns a pointer to the data buffer within an
      526     7093                    allocated memory block given its block number.  This routine is
      527     7094                    provided because the library deals with block indices rather than
      528     7095                    addresses, and blocks move.
      529     7096                INPUT:  UBLKX identifies the block of interest.
      530     7097                        UPTR$ gets a pointer to the data buffer within the block.
      531     7098        */
      532     7099    1   XSS$BUFPTR: ENTRY( UBLKX, UPTR$) ALTRET;

   7099  3 000345   000000 700200 xent  XSS$BUFPTR   TSX0  ! X66_AUTO_3
         3 000346   000022 000003                    ZERO    18,3
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:104  
         3 000347   200006 452700                    STP2  ! AUTO$,,AUTO

      533     7100
      534     7101            /* have to INHIBIT because called from event handler */
      535     7102    2       DO INHIBIT;

      536     7103    2           ENTFLAG = %BUFPTR;

   7103  3 000350   000003 235207                    LDA   ! 3,DL
         3 000351   200012 755300                    STA   ! ENTFLAG,,AUTO

      537     7104    2           GOTO COMMON;

   7104  3 000352   000361 710200 3                  TRA   ! COMMON

      538     7105    2           END;

   7105  3 000353   000357 710000 3                  TRA     s:7116

      539     7106        %EJECT;
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:105  
      540     7107        /*F*    NAME:   XSS$RELMEM
      541     7108                DESCRIPTION:
      542     7109                    This is the routine called to release a previously allocated
      543     7110                    block to the memory pool.  The ALTRETURN is taken if an invalid
      544     7111                    'block index' is passed to this routine.
      545     7112                INPUT:  UBLKX identifies the block to release.
      546     7113        */
      547     7114    1   XSS$RELMEM: ENTRY( UBLKX) ALTRET;

   7114  3 000354   000000 700200 xent  XSS$RELMEM   TSX0  ! X66_AUTO_3
         3 000355   000022 000003                    ZERO    18,3
         3 000356   200006 452700                    STP2  ! AUTO$,,AUTO

      548     7115
      549     7116    1       ENTFLAG = %RELMEM;

   7116  3 000357   000004 235007                    LDA     4,DL
         3 000360   200012 755100                    STA     ENTFLAG,,AUTO

      550     7117    1   COMMON:
      551     7118            /* have to INHIBIT because called from event handler */
      552     7119    2       DO INHIBIT;

   7119  3 000361                       COMMON       null
      553     7120    2           BLKX = UBLKX;

   7120  3 000361   200003 470700                    LDP0  ! @UBLKX,,AUTO
         3 000362   000100 101700                    MRL   ! fill='000'O
         3 000363   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
         3 000364   200011 000004                    ADSC9   BLKX,,AUTO               cn=0,n=4

      554     7121    3           DO CASE( ENTFLAG);

   7121  3 000365   000005 115207                    CMPA  ! 5,DL
         3 000366   000370 602205 3                  TNC   ! s:7121+3,AL
         3 000367   000415 710200 3                  TRA   ! s:7127
         3 000370   000415 710200 3                  TRA   ! s:7127
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:106  
         3 000371   000415 710200 3                  TRA   ! s:7127
         3 000372   000375 710200 3                  TRA   ! s:7123
         3 000373   000375 710200 3                  TRA   ! s:7123
         3 000374   000405 710200 3                  TRA   ! s:7125

      555     7122    3               CASE( %BLKPTR, %BUFPTR);

      556     7123    3                   CALL XSS$EVLOG( '@M', PINCRW(ADDR(AUTO$),-6)->PLUGH.ADR);

   7123  3 000375   200021 452700                    STP2  ! X+4,,AUTO
         3 000376   000012 236200 4                  LDQ   ! 10
         3 000377   200020 756300                    STQ   ! X+3,,AUTO
         3 000400   200020 630700                    EPPR0 ! X+3,,AUTO
         3 000401   000010 631600 4                  EPPR1 ! 8
         3 000402   000000 701200 xent               TSX1  ! XSS$EVLOG
         3 000403   000000 011200                    NOP   ! 0
         3 000404   000415 710200 3                  TRA   ! s:7127

      557     7124    3               CASE( %RELMEM);

      558     7125    3                   CALL XSS$EVLOG( 'RM', BLKX);

   7125  3 000405   200011 631700                    EPPR1 ! BLKX,,AUTO
         3 000406   200021 451700                    STP1  ! X+4,,AUTO
         3 000407   000013 236200 4                  LDQ   ! 11
         3 000410   200020 756300                    STQ   ! X+3,,AUTO
         3 000411   200020 630700                    EPPR0 ! X+3,,AUTO
         3 000412   000010 631600 4                  EPPR1 ! 8
         3 000413   000000 701200 xent               TSX1  ! XSS$EVLOG
         3 000414   000000 011200                    NOP   ! 0

      559     7126    3               END;

      560     7127    2           IF BLKX > NUMBLK THEN

   7127  3 000415   200011 236300                    LDQ   ! BLKX,,AUTO
         3 000416   000225 116200 1                  CMPQ  ! NUMBLK
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:107  
         3 000417   000201 605600 3                  TPNZ  ! GETOUT

      561     7128    2               GOTO GETOUT;  /* invalid index into block array */
      562     7129    2           X = BLK.BASE( BLKX);

   7129  3 000420   000012 236206 1                  LDQ   ! BLK,QL
         3 000421   000022 772200                    QRL   ! 18
         3 000422   200015 756300                    STQ   ! X,,AUTO

      563     7130    2           IF X > SEGSZ OR 0 ~= BITBIN( '3'O & BINBIT( X, 2)) THEN

   7130  3 000423   000226 116200 1                  CMPQ  ! SEGSZ
         3 000424   000201 605600 3                  TPNZ  ! GETOUT
         3 000425   000042 736200                    QLS   ! 34
         3 000426   000022 772200                    QRL   ! 18
         3 000427   000000 620206                    EAX0  ! 0,QL
         3 000430   300000 360203                    ANX0  ! 98304,DU
         3 000431   000000 636210                    EAQ   ! 0,X0
         3 000432   000041 772200                    QRL   ! 33
         3 000433   000201 601200 3                  TNZ   ! GETOUT

      564     7131    2               GOTO GETOUT;  /* invalid offset into segment */
      565     7132    2           B$ = PINCRW( XSS_DS_.PTR$, X);

   7132  3 000434   200015 236300                    LDQ   ! X,,AUTO
         3 000435   000022 736200                    QLS   ! 18
         3 000436   000007 036200 1                  ADLQ  ! XSS_DS_+1
         3 000437   200010 756300                    STQ   ! B$,,AUTO

      566     7133    2           IF B$BLOCK.BLKX ~= BLKX THEN

   7133  3 000440   200010 470700                    LDP0  ! B$,,AUTO
         3 000441   000000 236300                    LDQ   ! 0,,PR0
         3 000442   777777 376207                    ANQ   ! -1,DL
         3 000443   200011 116300                    CMPQ  ! BLKX,,AUTO
         3 000444   000201 601200 3                  TNZ   ! GETOUT

PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:108  
      567     7134    2               GOTO GETOUT;  /* memory space is corrupted */
      568     7135    2           IF B$BLOCK.LSTX > %MAXSZ2X THEN

   7135  3 000445   000000 220300                    LDX0  ! 0,,PR0
         3 000446   000021 100203                    CMPX0 ! 17,DU
         3 000447   000201 603200 3                  TRC   ! GETOUT

      569     7136    2               GOTO GETOUT;  /* memory space is corrupted */
      570     7137    3           DO CASE( ENTFLAG);

   7137  3 000450   200012 235300                    LDA   ! ENTFLAG,,AUTO
         3 000451   000005 115207                    CMPA  ! 5,DL
         3 000452   000454 602205 3                  TNC   ! s:7137+4,AL
         3 000453   000507 710200 3                  TRA   ! s:7148
         3 000454   000507 710200 3                  TRA   ! s:7148
         3 000455   000507 710200 3                  TRA   ! s:7148
         3 000456   000477 710200 3                  TRA   ! s:7144
         3 000457   000503 710200 3                  TRA   ! s:7146
         3 000460   000461 710200 3                  TRA   ! s:7139

      571     7138    3               CASE( %RELMEM);

      572     7139    3                   LSTX = B$BLOCK.LSTX;

   7139  3 000461   000000 236300                    LDQ   ! 0,,PR0
         3 000462   000022 772200                    QRL   ! 18
         3 000463   200013 756300                    STQ   ! LSTX,,AUTO

      573     7140                        /* link onto head of appropriate free list */
      574     7141    3                   BLK.LINK( BLKX) = LST( LSTX);

   7141  3 000464   200013 235300                    LDA   ! LSTX,,AUTO
         3 000465   000001 735200                    ALS   ! 1
         3 000466   200011 236300                    LDQ   ! BLKX,,AUTO
         3 000467   000002 736200                    QLS   ! 2
         3 000470   000006 100605                    MLR   ! fill='000'O
         3 000471   000213 000002 1                  ADSC9   LST,A                    cn=0,n=2
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:109  
         3 000472   000012 400002 1                  ADSC9   BLK,Q                    cn=2,n=2

      575     7142    3                   LST( LSTX) = BLKX;

   7142  3 000473   000005 101700                    MRL   ! fill='000'O
         3 000474   200011 000004                    ADSC9   BLKX,,AUTO               cn=0,n=4
         3 000475   000213 000002 1                  ADSC9   LST,A                    cn=0,n=2
         3 000476   000507 710200 3                  TRA   ! s:7148

      576     7143    3               CASE( %BLKPTR);

      577     7144    3                   UPTR$ = B$;

   7144  3 000477   200010 236300                    LDQ   ! B$,,AUTO
         3 000500   200004 471700                    LDP1  ! @UPTR$,,AUTO
         3 000501   100000 756300                    STQ   ! 0,,PR1
         3 000502   000507 710200 3                  TRA   ! s:7148

      578     7145    3               CASE( %BUFPTR);

      579     7146    3                   UPTR$ = ADDR( B$BLOCK.DATA);

   7146  3 000503   200010 236300                    LDQ   ! B$,,AUTO
         3 000504   000002 036203                    ADLQ  ! 2,DU
         3 000505   200004 471700                    LDP1  ! @UPTR$,,AUTO
         3 000506   100000 756300                    STQ   ! 0,,PR1

      580     7147    3               END;

      581     7148    2           RETURN;

   7148  3 000507   000000 702200 xent               TSX2  ! X66_ARET

      582     7149    2           END;

   7149  3 000510   000514 710000 3                  TRA     s:7162

PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:110  
      583     7150        %EJECT;
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:111  
      584     7151        /*F*    NAME:   XSS$SQZMEM
      585     7152                DESCRIPTION:
      586     7153                    This routine is called every once in a while (e.g., when a
      587     7154                    connection context block has been released) to determine if one
      588     7155                    or more Dynamic Memory pages could be released if the Session
      589     7156                    buffers were to be rearranged.  If the answer is yes, the
      590     7157                    necessary shuffling is done.  Note that memory blocks containing
      591     7158                    read buffers cannot be moved, which complicates things a bit.
      592     7159        */
      593     7160    1   XSS$SQZMEM: ENTRY ALTRET;

   7160  3 000511   000000 700200 xent  XSS$SQZMEM   TSX0  ! X66_AUTO_3
         3 000512   000022 000003                    ZERO    18,3
         3 000513   200006 452700                    STP2  ! AUTO$,,AUTO

      594     7161
      595     7162    1       ENTFLAG = %SQZMEM;

   7162  3 000514   000005 235007                    LDA     5,DL
         3 000515   200012 755100                    STA     ENTFLAG,,AUTO

      596     7163            /*N* Implement this someday */
      597     7164    1       RETURN;

   7164  3 000516   000000 702200 xent               TSX2  ! X66_ARET

      598     7165        %EJECT;
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:112  
      599     7166        /*I*    NAME:   MEMINIT
      600     7167                DESCRIPTION:
      601     7168                    Initializes tables for the memory allocator.
      602     7169        */
      603     7170    1   MEMINIT: PROC;

   7170  3 000517   200016 741300       MEMINIT      STX1  ! X+1,,AUTO

      604     7171
      605     7172            /* initialize free list heads */
      606     7173    3       DO X = 0 TO %MAXSZ2X - 1;

   7173  3 000520   200015 450100                    STZ     X,,AUTO
         3 000521   000530 710000 3                  TRA     s:7175+1

      607     7174    3           LST( X) = %NULL;

   7174  3 000522   200015 235100                    LDA     X,,AUTO
         3 000523   000001 735000                    ALS     1
         3 000524   000005 101400                    MRL     fill='000'O
         3 000525   000014 000004 4                  ADSC9   12                       cn=0,n=4
         3 000526   000213 000002 1                  ADSC9   LST,A                    cn=0,n=2

      608     7175    3           END;

   7175  3 000527   200015 054100                    AOS     X,,AUTO
         3 000530   200015 235100                    LDA     X,,AUTO
         3 000531   000017 115007                    CMPA    15,DL
         3 000532   000522 604400 3                  TMOZ    s:7174

      609     7176            /* record the all-inclusive initial block */
      610     7177    2       LST( %MAXSZ2X) = 0;

   7177  3 000533   000000 220003                    LDX0    0,DU
         3 000534   000223 740000 1                  STX0    LST+8

      611     7178    2       BLK.LINK(0) = %NULL;
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:113  

   7178  3 000535   777777 221003                    LDX1    -1,DU
         3 000536   000012 441000 1                  SXL1    BLK

      612     7179    2       BLK.BASE(0) = 0;

   7179  3 000537   000012 740000 1                  STX0    BLK

      613     7180    2       NUMBLK = 1;

   7180  3 000540   000001 236007                    LDQ     1,DL
         3 000541   000225 756000 1                  STQ     NUMBLK

      614     7181            /* initialize the block table */
      615     7182    3       DO X = 1 TO %MAXBLKX;

   7182  3 000542   200015 756100                    STQ     X,,AUTO

      616     7183    3           BLK.LINK( X) = X + 1;

   7183  3 000543   200015 720100                    LXL0    X,,AUTO
         3 000544   000001 621010                    EAX1    1,X0
         3 000545   200015 722100                    LXL2    X,,AUTO
         3 000546   000012 441012 1                  SXL1    BLK,X2

      617     7184    3           BLK.BASE( X) = 0;

   7184  3 000547   000000 223003                    LDX3    0,DU
         3 000550   000012 743012 1                  STX3    BLK,X2

      618     7185    3           END;

   7185  3 000551   200015 054100                    AOS     X,,AUTO
         3 000552   200015 235100                    LDA     X,,AUTO
         3 000553   000177 115007                    CMPA    127,DL
         3 000554   000543 604400 3                  TMOZ    s:7183

PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:114  
      619     7186    2       BLK.LINK( %MAXBLKX) = %NULL;

   7186  3 000555   777777 220003                    LDX0    -1,DU
         3 000556   000211 440000 1                  SXL0    BLK+127

      620     7187            /* init free block head */
      621     7188    2       BLK@ = 1;

   7188  3 000557   000001 236007                    LDQ     1,DL
         3 000560   000212 756000 1                  STQ     BLK@

      622     7189    2       MEMINITED = %TRUE;

   7189  3 000561   400000 236003                    LDQ     -131072,DU
         3 000562   000224 756000 1                  STQ     MEMINITED

      623     7190    2       RETURN;

   7190  3 000563   200016 221300                    LDX1  ! X+1,,AUTO
         3 000564   000001 702211                    TSX2  ! 1,X1

FPT_GDS
 Sect OctLoc
   1     000   000001 777640   000004 006000   000001 777640   000006 006000    ................
   1     004   100600 000000   ****** ******                                    @.......

XSS_DS_
 Sect OctLoc
   1     006   000000 177640   000000 006014                                    ........

XSS_NOPZERO
 Sect OctLoc
   1     010   000000 011000                                                    ....

XSS_NOPIZERO
 Sect OctLoc
   1     011   000000 011200                                                    ....
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:115  

BLK
 Sect OctLoc
   1     012   ****** ******   ****** ******   ****** ******   ****** ******    ................

LST
 Sect OctLoc
   1     213   ****** ******   ****** ******   ****** ******   ****** ******    ................

MEMINITED
 Sect OctLoc
   1     224   0***** ******                                                    ....

SEGSZ
 Sect OctLoc
   1     226   000000 000000                                                    ....

XSS_F$ADJMEM
 Sect OctLoc
   2     000   302323 001207                                                    ....

XSS_F$BLKPTR
 Sect OctLoc
   2     001   302323 001217                                                    ....

XSS_F$BUFPTR
 Sect OctLoc
   2     002   302323 001227                                                    ....

XSS_F$GETMEM
 Sect OctLoc
   2     003   302323 001357                                                    ....

XSS_F$RELMEM
 Sect OctLoc
   2     004   302323 001457                                                    ....

PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:116  
XSS_F$SQZMEM
 Sect OctLoc
   2     005   302323 001467                                                    ....

SZ2X
 Sect OctLoc
   2     006   000000 000004   000000 000010   000000 000020   000000 000040    ...............
   2     012   000000 000100   000000 000200   000000 000400   000000 001000    ...@............
   2     016   000000 002000   000000 004000   000000 010000   000000 020000    ................
   2     022   000000 040000   000000 100000   000000 200000   000000 400000    .. ...@.........
   2     026   000001 000000                                                    ....

(unnamed)
 Sect OctLoc
   2     027   107115 040040   100115 040040   122115 040040                    GM  @M  RM

(unnamed)
 Sect OctLoc
   4     000   000001 000000   000003 006000   000000 006000   000001 006000    ................
   4     004   000002 006000   000004 006000   000005 006000   000000 006014    ................
   4     010   000002 000000   000027 006000   000030 006000   000031 006000    ................
   4     014   000000 777777                                                    ....
      624     7191
      625     7192    2       END MEMINIT;
      626     7193
      627     7194    1       END XSS$GETMEM;
      628     7195        %EOD;

PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:117  
--  Include file information  --

   XSC_PERR_C.:XSA1TOU  is referenced.
   XSS_INTERNAL_M.:XSA1TOU  is referenced.
   XSS_INTERNAL_E.:XSA1TOU  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure XSS$GETMEM.
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:118  

 **** Variables and constants ****

  ****  Section 001  Data  XSS$GETMEM

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    12-0-0/h STRC        r     1 BLK(0:127)               212-0-0/w SBIN        r     1 BLK@
     0-0-0/d STRC(216)   r     1 FPT_GDS                  213-0-0/h UBIN(18)    r     1 LST(0:16)
   224-0-0/b BIT         r     1 MEMINITED                225-0-0/w SBIN        r     1 NUMBLK
   226-0-0/w SBIN        r     1 SEGSZ                      6-0-0/d STRC(72)    r     1 XSS_DS_
    11-0-0/w UBIN        r     1 XSS_NOPIZERO              10-0-0/w UBIN        r     1 XSS_NOPZERO

  ****  Section 002 RoData XSS$GETMEM

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     6-0-0/w SBIN        r     1 SZ2X(0:16)                 0-0-0/w STRC        r     1 XSS_F$ADJMEM
     1-0-0/w STRC        r     1 XSS_F$BLKPTR               2-0-0/w STRC        r     1 XSS_F$BUFPTR
     3-0-0/w STRC        r     1 XSS_F$GETMEM               4-0-0/w STRC        r     1 XSS_F$RELMEM
     5-0-0/w STRC        r     1 XSS_F$SQZMEM

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     5-0-0/w PTR         r     1 @BYTSZ                     3-0-0/w PTR         r     1 @UBLKX
     4-0-0/w PTR         r     1 @UPTR$                     6-0-0/w PTR         r     1 AUTO$
    10-0-0/w PTR         r     1 B$                        11-0-0/w SBIN        r     1 BLKX
    *0-0-0/w SBIN        r     1 BYTSZ                     12-0-0/w SBIN        r     1 ENTFLAG
     7-0-0/w PTR         r     1 LS0$                      13-0-0/w SBIN        r     1 LSTX
    *0-0-0/h UBIN(18)    r     1 UBLKX                     *0-0-0/w PTR         r     1 UPTR$
    14-0-0/w SBIN        r     1 WDSZ                      15-0-0/w SBIN        r     1 X

  ****  SYMREF variables  ****
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:119  

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$IS$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(108)   r     1 B$BLOCK                    0-0-0/h UBIN(18)    r     1 B$HALF
     0-0-0/w UBIN        r     1 B$UBIN                     0-0-0/w STRC(54)    r     1 PLUGH


   Procedure XSS$GETMEM requires 373 words for executable code.
   Procedure XSS$GETMEM requires 18 words of local(AUTO) storage.
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:120  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:121  
          MINI XREF LISTING

AUTO$
      6937**DCL        18--MATRLIZ  7024>>ASSIGN   7123--CALL
B$
      6946**DCL      6513--IMP-PTR  7047<<ASSIGN   7048>>ASSIGN   7049>>ASSIGN   7054>>ASSIGN   7132<<ASSIGN
      7133>>IF       7135>>IF       7139>>ASSIGN   7144>>ASSIGN   7146>>ASSIGN
B$BLOCK.BLKX
      6528**DCL      7048<<ASSIGN   7133>>IF
B$BLOCK.BLNKX
      6530**DCL      6531--REDEF
B$BLOCK.DATA
      6532**DCL      7054--ASSIGN   7146--ASSIGN
B$BLOCK.LSTX
      6527**DCL      7049<<ASSIGN   7135>>IF       7139>>ASSIGN
B$HALF
      6941**DCL      7024>>ASSIGN
B$IS$
      6933**DCL      7024>>ASSIGN
B$UBIN
      6942**DCL      7025>>IF       7025>>IF
BLK.BASE
      6948**DCL      6998<<ASSIGN   6998>>ASSIGN   7014>>ASSIGN   7047>>ASSIGN   7129>>ASSIGN   7179<<ASSIGN
      7184<<ASSIGN
BLK.LINK
      6949**DCL      6995>>ASSIGN   6997<<ASSIGN   6999>>ASSIGN   7000<<ASSIGN   7012>>ASSIGN   7045<<ASSIGN
      7141<<ASSIGN   7178<<ASSIGN   7183<<ASSIGN   7186<<ASSIGN
BLK@
      6951**DCL      6973>>IF       6991>>IF       6997>>ASSIGN   6998>>ASSIGN   6999>>ASSIGN   7000>>ASSIGN
      7001<<ASSIGN   7002>>IF       7003>>ASSIGN   7188<<ASSIGN
BLKX
      6950**DCL      7011<<ASSIGN   7012>>ASSIGN   7014>>ASSIGN   7021>>ASSIGN   7045>>ASSIGN   7047>>ASSIGN
      7048>>ASSIGN   7051>>ASSIGN   7055<>CALL     7120<<ASSIGN   7125<>CALL     7127>>IF       7129>>ASSIGN
      7133>>IF       7141>>ASSIGN   7142>>ASSIGN
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:122  
BYTSZ
      6952**DCL        18--PROC     6970>>ASSIGN   7072--ENTRY
COMMON
      7119**LABEL    7089--GOTO     7104--GOTO
ENTFLAG
      6953**DCL      6967<<ASSIGN   7026>>DOCASE   7074<<ASSIGN   7088<<ASSIGN   7103<<ASSIGN   7116<<ASSIGN
      7121>>DOCASE   7137>>DOCASE   7162<<ASSIGN
FPT_GDS
      5589**DCL      7018<>CALL
FPT_GDS.V
      5589**DCL      5589--DCLINIT
FPT_GDS.V.SEGSIZE#
      5592**DCL      7017<<ASSIGN
GETOUT
      7024**LABEL    6972--GOTO     6974--GOTO     6992--GOTO     7007--GOTO     7076--GOTO     7128--GOTO
      7131--GOTO     7134--GOTO     7136--GOTO
LS0$
      6943**DCL      7024<<ASSIGN   7025>>IF       7025>>IF
LST
      6954**DCL      6986>>IF       6989>>IF       6994<<ASSIGN   6994>>ASSIGN   6995<<ASSIGN   6995>>ASSIGN
      6997>>ASSIGN   6998>>ASSIGN   7011>>ASSIGN   7012<<ASSIGN   7021<<ASSIGN   7141>>ASSIGN   7142<<ASSIGN
      7174<<ASSIGN   7177<<ASSIGN
LSTX
      6955**DCL      6975<<ASSIGN   6980>>DOWHILE  6981<<ASSIGN   6981>>ASSIGN   6986>>IF       6988>>DOINDEX
      7011>>ASSIGN   7012>>ASSIGN   7021>>ASSIGN   7049>>ASSIGN   7139<<ASSIGN   7141>>ASSIGN   7142>>ASSIGN
M$GDS
      5541**DCL-ENT  7018--CALL
MEMINIT
      7170**PROC     6969--CALL
MEMINITED
      6956**DCL      6968>>IF       7189<<ASSIGN
NUMBLK
      6957**DCL      7002>>IF       7003<<ASSIGN   7127>>IF       7180<<ASSIGN
PLUGH.ADR
      6939**DCL      7123<>CALL
SEGSZ
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:123  
      6958**DCL      7014>>ASSIGN   7043<<ASSIGN   7043>>ASSIGN   7130>>IF
SPLITTER
      6986**LABEL    7004--GOTO
SZ2X
      6959**DCL      6971>>IF       6980>>DOWHILE  6998>>ASSIGN
UBLKX
      6962**DCL        18--PROC     7051<<ASSIGN   7072--ENTRY    7086--ENTRY    7099--ENTRY    7114--ENTRY
      7120>>ASSIGN
UPTR$
      6963**DCL        18--PROC     7052--IF       7054<<ASSIGN   7072--ENTRY    7086--ENTRY    7099--ENTRY
      7144<<ASSIGN   7146<<ASSIGN
WDSZ
      6964**DCL      6970<<ASSIGN   6971>>IF       6976>>IF       6977<<ASSIGN   6980>>DOWHILE  7014>>ASSIGN
X
      6965**DCL      6988<<DOINDEX  6989>>IF       6994>>ASSIGN   6994>>ASSIGN   6995>>ASSIGN   6995>>ASSIGN
      6997>>ASSIGN   6998>>ASSIGN   6998>>ASSIGN   6999<<ASSIGN   7001>>ASSIGN   7014<<ASSIGN   7015>>IF
      7017>>ASSIGN   7043>>ASSIGN   7129<<ASSIGN   7130>>IF       7130>>IF       7132>>ASSIGN   7173<<DOINDEX
      7174>>ASSIGN   7182<<DOINDEX  7183>>ASSIGN   7183>>ASSIGN   7184>>ASSIGN
XSS$EVLOG
      6931**DCL-ENT  7055--CALL     7123--CALL     7125--CALL
XSS$SCREECH
      6930**DCL-ENT  7028--CALL     7030--CALL     7032--CALL     7034--CALL     7036--CALL     7038--CALL
XSS_DS_
      5605**DCL      5589--DCLINIT
XSS_DS_.PTR$
      5607**DCL      7047>>ASSIGN   7132>>ASSIGN
XSS_DS_.W2
      5606**DCL      5607--REDEF
XSS_F$ADJMEM
      6630**DCL      7030<>CALL
XSS_F$BLKPTR
      6681**DCL      7032<>CALL
XSS_F$BUFPTR
      6732**DCL      7034<>CALL
XSS_F$GETMEM
      6783**DCL      7028<>CALL
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:124  
XSS_F$RELMEM
      6834**DCL      7036<>CALL
XSS_F$SQZMEM
      6885**DCL      7038<>CALL
XSS_NOPIZERO
      6945**DCL      7025>>IF
XSS_NOPZERO
      6944**DCL      7025>>IF
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:125  
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:126  
              MINI UREF LISTING

B_POINTER    6929**DCL-ENT
M$ACCT    5523**DCL-ENT
M$ACTIVATE    5526**DCL-ENT
M$ALIB    5519**DCL-ENT
M$ASUSER    5521**DCL-ENT
M$ATTACH    5528**DCL-ENT
M$BADPP    5546**DCL-ENT
M$CGCTL    5527**DCL-ENT
M$CGINFO    5527**DCL-ENT
M$CHECK    5508**DCL-ENT
M$CHGUNIT    5566**DCL-ENT
M$CLOSE    5506**DCL-ENT
M$CLRSTK    5564**DCL-ENT
M$CMDVAR    5575**DCL-ENT
M$CONFIG    5536**DCL-ENT
M$CORRES    5511**DCL-ENT
M$CPEXIT    5520**DCL-ENT
M$CVM    5544**DCL-ENT
M$CVOL    5509**DCL-ENT
M$DCLFLD    5536**DCL-ENT
M$DEACTIVATE    5526**DCL-ENT
M$DELREC    5508**DCL-ENT
M$DEQ    5573**DCL-ENT
M$DETACH    5528**DCL-ENT
M$DEVICE    5510**DCL-ENT
M$DISPLAY    5573**DCL-ENT
M$DISPRES    5513**DCL-ENT
M$DLIB    5519**DCL-ENT
M$DRIBBLE    5536**DCL-ENT
M$DRTN    5564**DCL-ENT
M$DSUSER    5521**DCL-ENT
M$ENQ    5572**DCL-ENT
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:127  
M$EOM    5531**DCL-ENT
M$ERASE    5537**DCL-ENT
M$ERR    5518**DCL-ENT
M$ERRMSG    5569**DCL-ENT
M$EVENT    5561**DCL-ENT
M$EXHUME    5570**DCL-ENT
M$EXIT    5518**DCL-ENT
M$EXTEND    5510**DCL-ENT
M$FDP    5542**DCL-ENT
M$FDS    5541**DCL-ENT
M$FEBOOT    5534**DCL-ENT
M$FECTL    5535**DCL-ENT
M$FEDUMP    5534**DCL-ENT
M$FID    5569**DCL-ENT
M$FINDPROC    5523**DCL-ENT
M$FSUSER    5521**DCL-ENT
M$FVP    5543**DCL-ENT
M$FWCG    5527**DCL-ENT
M$GBPL    5547**DCL-ENT
M$GDDL    5543**DCL-ENT
M$GDP    5542**DCL-ENT
M$GETDCB    5512**DCL-ENT
M$GETMOUSE    5552**DCL-ENT
M$GETPM    5553**DCL-ENT
M$GJOB    5571**DCL-ENT
M$GLINEATTR    5531**DCL-ENT
M$GOODPP    5546**DCL-ENT
M$GPLATEN    5539**DCL-ENT
M$GPROMPT    5538**DCL-ENT
M$GTRMATTR    5532**DCL-ENT
M$GTRMCTL    5530**DCL-ENT
M$GTRMTAB    5533**DCL-ENT
M$GVP    5542**DCL-ENT
M$HELP    5569**DCL-ENT
M$INT    5561**DCL-ENT
M$INTRTN    5522**DCL-ENT
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:128  
M$IOQ    5557**DCL-ENT
M$JOBSTATS    5571**DCL-ENT
M$KEYIN    5511**DCL-ENT
M$LDEV    5506**DCL-ENT
M$LDTRC    5519**DCL-ENT
M$LIMIT    5512**DCL-ENT
M$LINES    5511**DCL-ENT
M$LINK    5518**DCL-ENT
M$MADMUCK    5514**DCL-ENT
M$MAKUSER    5545**DCL-ENT
M$MBS    5513**DCL-ENT
M$MDFFLD    5537**DCL-ENT
M$MERC    5562**DCL-ENT
M$MERCS    5563**DCL-ENT
M$MIRROR    5557**DCL-ENT
M$MONINFO    5574**DCL-ENT
M$MPL    5547**DCL-ENT
M$NODEINFO    5538**DCL-ENT
M$NXTUSR    5572**DCL-ENT
M$OCMSG    5570**DCL-ENT
M$OLAY    5518**DCL-ENT
M$OPEN    5506**DCL-ENT
M$PAS    5547**DCL-ENT
M$PATHCON    5570**DCL-ENT
M$PDS    5541**DCL-ENT
M$PFIL    5508**DCL-ENT
M$PLATEN    5532**DCL-ENT
M$PRECORD    5510**DCL-ENT
M$PROCNAME    5523**DCL-ENT
M$PROFILE    5534**DCL-ENT
M$PROMPT    5530**DCL-ENT
M$RACST    5514**DCL-ENT
M$RDSYSLOG    5555**DCL-ENT
M$READ    5507**DCL-ENT
M$RELDCB    5512**DCL-ENT
M$RELRES    5513**DCL-ENT
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:129  
M$RELSTARF    5515**DCL-ENT
M$REM    5515**DCL-ENT
M$RENV    5562**DCL-ENT
M$REQUIRE    5514**DCL-ENT
M$RETRY    5563**DCL-ENT
M$RETRYS    5563**DCL-ENT
M$REW    5509**DCL-ENT
M$RLSFLD    5537**DCL-ENT
M$RPRIV    5565**DCL-ENT
M$RSPP    5544**DCL-ENT
M$RSWITCH    5566**DCL-ENT
M$RUE    5572**DCL-ENT
M$SAD    5545**DCL-ENT
M$SAVE    5521**DCL-ENT
M$SCON    5522**DCL-ENT
M$SCREECH    5520**DCL-ENT
M$SENV    5562**DCL-ENT
M$SETFMA    5506**DCL-ENT
M$SETFP    5535**DCL-ENT
M$SINPUT    5533**DCL-ENT
M$SLCFLD    5538**DCL-ENT
M$SMOUSE    5552**DCL-ENT
M$SMPRT    5544**DCL-ENT
M$SPRIV    5565**DCL-ENT
M$SSC    5545**DCL-ENT
M$SSWITCH    5565**DCL-ENT
M$STATE    5574**DCL-ENT
M$STD    5546**DCL-ENT
M$STIMER    5560**DCL-ENT
M$STLPP    5543**DCL-ENT
M$STRAP    5560**DCL-ENT
M$STRMATTR    5532**DCL-ENT
M$STRMCTL    5530**DCL-ENT
M$STRMTAB    5533**DCL-ENT
M$SYMBIO    5571**DCL-ENT
M$SYSCON    5557**DCL-ENT
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:130  
M$SYSID    5575**DCL-ENT
M$TDCLOSE    5556**DCL-ENT
M$TDIO    5556**DCL-ENT
M$TDOPEN    5555**DCL-ENT
M$TDREQCPU    5556**DCL-ENT
M$TEMPWROC    5550**DCL-ENT
M$TIME    5573**DCL-ENT
M$TRAP    5560**DCL-ENT
M$TRMISC    5535**DCL-ENT
M$TRMPRG    5531**DCL-ENT
M$TRTN    5564**DCL-ENT
M$TRUNC    5507**DCL-ENT
M$TTIMER    5560**DCL-ENT
M$UC    5530**DCL
M$UMPL    5547**DCL-ENT
M$UNFID    5569**DCL-ENT
M$UNLATCH    5526**DCL-ENT
M$UNSHARE    5523**DCL-ENT
M$USRFIELD    5566**DCL-ENT
M$VIRTUAL    5541**DCL-ENT
M$WAIT    5564**DCL-ENT
M$WEOF    5509**DCL-ENT
M$WRITE    5507**DCL-ENT
M$WRSYSLOG    5555**DCL-ENT
M$XCON    5561**DCL-ENT
M$XCONRTN    5522**DCL-ENT
M$XEQTIME    5574**DCL-ENT
M$XFLUSH    5515**DCL-ENT
M$XMOUSE    5552**DCL-ENT
M$XXX    5518**DCL-ENT
M$YC    5520**DCL-ENT
XSS$ADJMEM    7072**ENTRY
XSS$BLKPTR    7086**ENTRY
XSS$BUFPTR    7099**ENTRY
XSS$GETMEM      18**PROC
XSS$RELMEM    7114**ENTRY
PL6.E3A0      #003=XSS$GETMEM File=XSS$DATA.:XSA1TSI                             WED 10/01/97 12:13 Page:131  
XSS$SQZMEM    7160**ENTRY

PL6.E3A0      #004=XSS$EVLOG File=XSS$DATA.:XSA1TSI                              WED 10/01/97 12:14 Page:132  
      629        1        /*T***********************************************************/
      630        2        /*T*                                                         */
      631        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      632        4        /*T*                                                         */
      633        5        /*T***********************************************************/
      634        6        /*
      635        7            Session Layer Event Log
      636        8
      637        9            This log is a circular buffer of XSS_EVENTMAX+1 entries.  Each
      638       10            entry is one word long, except for ER entries which occupy one
      639       11            or two words.  In all entries the first two bytes are the ASCII
      640       12            chars identifying the entry.  The remainder of the entry contains
      641       13            information about which scid or buffer the event involves.
      642       14            Here are the event types.....
      643       15                AU  - B$CGAURD event received                   .EVENT, .INFO
      644       16                CL  - M$CLOSE                                   SCID
      645       17                DP  - decode SPDU                               SI
      646       18                EP  - encode SPDU                               SI
      647       19                ER  - monitor service error, code follows       SCID or BLKX
      648       20                EV  - B$NWIO event received                     SCID
      649       21                GC  - get context block                         SCID
      650       22                GM  - get memory block                          BLKX
      651       23                GT  - M$GETDCB                                  SCID
      652       24                KI  - call XSS$COMMINIT                         SCID
      653       25                KP  - call XSS$COMMPEND                         SCID
      654       26                KS  - call XSS$SESSION                          SCID, SFNC
      655       27                KT  - call XSS$COMMTERM                         SCID
      656       28                KU  - call SS-user handler                      SCID, SFNC
      657       29                KW  - call XSS$COMMWAIT                         SECONDS
      658       30                KX  - call XSS$COMMWAITX                        SCID
      659       31                KZ  - call XSS$COMMWAITZ                        SCID
      660       32                NW  - M$READ WAIT=NO                            SCID
      661       33                OP  - M$OPEN                                    SCID
      662       34                QE  - queued event now being processed          SCID, TFNC
      663       35                RC  - release context block                     SCID
      664       36                RM  - release memory block                      BLKX
      665       37                SS  - enter Session state machine               SCID, EVENT
PL6.E3A0      #004=XSS$EVLOG File=XSS$DATA.:XSA1TSI                              WED 10/01/97 12:14 Page:133  
      666       38                WR  - M$WRITE                                   SCID, TFNC
      667       39                WT  - M$WAIT                                    SECONDS
      668       40                @C  - get context block pointer                 PLUGH
      669       41                @M  - get memory block pointer                  PLUGH
      670       42
      671       43            Here are the types of 'remainder' info.....
      672       44                BLKX    - offset into DS of this memory block
      673       45                EVENT   - event code from %XSS_SEV_?
      674       46                PLUGH   - IC of caller
      675       47                SCID    - Session connection ID
      676       48                SECONDS - number of seconds
      677       49                SFNC    - Session function code from %XSS_FNC_?
      678       50                SI      - Session PDU Identifier from %XSS_SI_?
      679       51                TFNC    - Transport function code from %K_?
      680       52                .EVENT  - B$CGAURD.EVENT code from %CG_?
      681       53                .INFO   - B$CGAURD.INFO code from %CG_WARN_?
      682       54
      683       55            The event log starts at the address held in XSS_EVENTLOG$.
      684       56            The index of the next available entry is in XSS_EVENTIDX.
      685       57        */
      686       58        XSS$EVLOG: PROC( CODE, DATA);
      687       59
      688       60    1       DCL XSS_EVENTIDX SBIN STATIC SYMDEF INIT( 0);
      689       61        %EQU EVENTMAX = 63;
      690       62    1       DCL XSS_EVENTMAX SBIN STATIC SYMDEF INIT( %EVENTMAX);
      691       63    1       DCL XSS_EVENTLOG$ PTR STATIC SYMDEF INIT( ADDR( EVLOG));
      692       64            /*N* eventually put the event log in the data segment */
      693       65    1       DCL EVLOG(0:%EVENTMAX) UBIN STATIC;
      694       66
      695       67    1       DCL CODE UBIN;
      696       68    1       DCL CODECHARS REDEF CODE CHAR(4);
      697       69    1       DCL DATA UBIN;
      698       70    1       DCL XCODE UBIN;
      699       71    1       DCL XDATA UBIN;
      700       72        %EQU BLANKS = BITBIN( '040040'O);
      701       73
      702       74    2       DO INHIBIT;
PL6.E3A0      #004=XSS$EVLOG File=XSS$DATA.:XSA1TSI                              WED 10/01/97 12:14 Page:134  
      703       75    2           IF XSS_EVENTLOG$ = ADDR( NIL) THEN RETURN;
      704       76    2           XCODE = 0;
      705       77    2           XDATA = DATA;
      706       78    3           IF ADDR( CODE) ~= ADDR( NIL) THEN DO;
      707       79    3               XCODE = CODE - %BLANKS;
      708       80    3               IF SUBSTR( CODECHARS, 0, 1) = '@' THEN
      709       81    3                   XDATA = DATA / 262144;
      710       82    3               END;
      711       83    2           EVLOG( XSS_EVENTIDX) = XCODE + XDATA;
      712       84    2           XSS_EVENTIDX = XSS_EVENTIDX + 1;
      713       85    2           IF XSS_EVENTIDX > XSS_EVENTMAX THEN
      714       86    2               XSS_EVENTIDX = 0;
      715       87    2           RETURN;
      716       88    2           END;
      717       89
      718       90    1       END XSS$EVLOG;
      719       91        %EOD;

PL6.E3A0      #004=XSS$EVLOG File=XSS$DATA.:XSA1TSI                              WED 10/01/97 12:14 Page:135  
      No diagnostics issued in procedure XSS$EVLOG.

   Procedure XSS$EVLOG requires 35 words for executable code.
   Procedure XSS$EVLOG requires 8 words of local(AUTO) storage.

PL6.E3A0      #004=XSS$EVLOG File=XSS$DATA.:XSA1TSI                              WED 10/01/97 12:14 Page:136  

 Object Unit name= XSS$EVLOG                                  File name= XSS$DATA.:XSA1TOU
 UTS= OCT 01 '97 12:14:35.12 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Data  even  none    67    103  XSS$EVLOG
    1   Proc  even  none    35     43  XSS$EVLOG
    2  RoData even  none     1      1  XSS$EVLOG

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Std        2  XSS$EVLOG

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
    0      0  XSS_EVENTIDX                       0      1  XSS_EVENTMAX
    0      2  XSS_EVENTLOG$

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_2
                       nStd      0 X66_ARET
PL6.E3A0      #004=XSS$EVLOG File=XSS$DATA.:XSA1TSI                              WED 10/01/97 12:14 Page:137  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #004=XSS$EVLOG File=XSS$DATA.:XSA1TSI                              WED 10/01/97 12:14 Page:138  


      629        1        /*T***********************************************************/
      630        2        /*T*                                                         */
      631        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      632        4        /*T*                                                         */
      633        5        /*T***********************************************************/
      634        6        /*
      635        7            Session Layer Event Log
      636        8
      637        9            This log is a circular buffer of XSS_EVENTMAX+1 entries.  Each
      638       10            entry is one word long, except for ER entries which occupy one
      639       11            or two words.  In all entries the first two bytes are the ASCII
      640       12            chars identifying the entry.  The remainder of the entry contains
      641       13            information about which scid or buffer the event involves.
      642       14            Here are the event types.....
      643       15                AU  - B$CGAURD event received                   .EVENT, .INFO
      644       16                CL  - M$CLOSE                                   SCID
      645       17                DP  - decode SPDU                               SI
      646       18                EP  - encode SPDU                               SI
      647       19                ER  - monitor service error, code follows       SCID or BLKX
      648       20                EV  - B$NWIO event received                     SCID
      649       21                GC  - get context block                         SCID
      650       22                GM  - get memory block                          BLKX
      651       23                GT  - M$GETDCB                                  SCID
      652       24                KI  - call XSS$COMMINIT                         SCID
      653       25                KP  - call XSS$COMMPEND                         SCID
      654       26                KS  - call XSS$SESSION                          SCID, SFNC
      655       27                KT  - call XSS$COMMTERM                         SCID
      656       28                KU  - call SS-user handler                      SCID, SFNC
      657       29                KW  - call XSS$COMMWAIT                         SECONDS
      658       30                KX  - call XSS$COMMWAITX                        SCID
      659       31                KZ  - call XSS$COMMWAITZ                        SCID
      660       32                NW  - M$READ WAIT=NO                            SCID
      661       33                OP  - M$OPEN                                    SCID
      662       34                QE  - queued event now being processed          SCID, TFNC
      663       35                RC  - release context block                     SCID
      664       36                RM  - release memory block                      BLKX
PL6.E3A0      #004=XSS$EVLOG File=XSS$DATA.:XSA1TSI                              WED 10/01/97 12:14 Page:139  
      665       37                SS  - enter Session state machine               SCID, EVENT
      666       38                WR  - M$WRITE                                   SCID, TFNC
      667       39                WT  - M$WAIT                                    SECONDS
      668       40                @C  - get context block pointer                 PLUGH
      669       41                @M  - get memory block pointer                  PLUGH
      670       42
      671       43            Here are the types of 'remainder' info.....
      672       44                BLKX    - offset into DS of this memory block
      673       45                EVENT   - event code from %XSS_SEV_?
      674       46                PLUGH   - IC of caller
      675       47                SCID    - Session connection ID
      676       48                SECONDS - number of seconds
      677       49                SFNC    - Session function code from %XSS_FNC_?
      678       50                SI      - Session PDU Identifier from %XSS_SI_?
      679       51                TFNC    - Transport function code from %K_?
      680       52                .EVENT  - B$CGAURD.EVENT code from %CG_?
      681       53                .INFO   - B$CGAURD.INFO code from %CG_WARN_?
      682       54
      683       55            The event log starts at the address held in XSS_EVENTLOG$.
      684       56            The index of the next available entry is in XSS_EVENTIDX.
      685       57        */
      686       58        XSS$EVLOG: PROC( CODE, DATA);

     58  1 000000   000000 700200 xent  XSS$EVLOG    TSX0  ! X66_AUTO_2
         1 000001   000010 000002                    ZERO    8,2

      687       59
      688       60    1       DCL XSS_EVENTIDX SBIN STATIC SYMDEF INIT( 0);
      689       61        %EQU EVENTMAX = 63;
      690       62    1       DCL XSS_EVENTMAX SBIN STATIC SYMDEF INIT( %EVENTMAX);
      691       63    1       DCL XSS_EVENTLOG$ PTR STATIC SYMDEF INIT( ADDR( EVLOG));
      692       64            /*N* eventually put the event log in the data segment */
      693       65    1       DCL EVLOG(0:%EVENTMAX) UBIN STATIC;
      694       66
      695       67    1       DCL CODE UBIN;
      696       68    1       DCL CODECHARS REDEF CODE CHAR(4);
      697       69    1       DCL DATA UBIN;
PL6.E3A0      #004=XSS$EVLOG File=XSS$DATA.:XSA1TSI                              WED 10/01/97 12:14 Page:140  
      698       70    1       DCL XCODE UBIN;
      699       71    1       DCL XDATA UBIN;
      700       72        %EQU BLANKS = BITBIN( '040040'O);
      701       73
      702       74    2       DO INHIBIT;

      703       75    2           IF XSS_EVENTLOG$ = ADDR( NIL) THEN RETURN;

     75  1 000002   000002 236200 0                  LDQ   ! XSS_EVENTLOG$
         1 000003   000000 116200 2                  CMPQ  ! 0
         1 000004   000006 601200 1                  TNZ   ! s:76

     75  1 000005   000000 702200 xent               TSX2  ! X66_ARET

      704       76    2           XCODE = 0;

     76  1 000006   200005 450300                    STZ   ! XCODE,,AUTO

      705       77    2           XDATA = DATA;

     77  1 000007   200004 470700                    LDP0  ! @DATA,,AUTO
         1 000010   000000 235300                    LDA   ! 0,,PR0
         1 000011   200006 755300                    STA   ! XDATA,,AUTO

      706       78    3           IF ADDR( CODE) ~= ADDR( NIL) THEN DO;

     78  1 000012   200003 236300                    LDQ   ! @CODE,,AUTO
         1 000013   000000 116200 2                  CMPQ  ! 0
         1 000014   000030 600200 1                  TZE   ! s:83

      707       79    3               XCODE = CODE - %BLANKS;

     79  1 000015   200003 471700                    LDP1  ! @CODE,,AUTO
         1 000016   100000 235300                    LDA   ! 0,,PR1
         1 000017   040040 135207                    SBLA  ! 16416,DL
         1 000020   200005 755300                    STA   ! XCODE,,AUTO

PL6.E3A0      #004=XSS$EVLOG File=XSS$DATA.:XSA1TSI                              WED 10/01/97 12:14 Page:141  
      708       80    3               IF SUBSTR( CODECHARS, 0, 1) = '@' THEN

     80  1 000021   100000 236300                    LDQ   ! 0,,PR1
         1 000022   777000 376203                    ANQ   ! -512,DU
         1 000023   100000 116203                    CMPQ  ! 32768,DU
         1 000024   000030 601200 1                  TNZ   ! s:83

      709       81    3                   XDATA = DATA / 262144;

     81  1 000025   000000 236300                    LDQ   ! 0,,PR0
         1 000026   000022 772200                    QRL   ! 18
         1 000027   200006 756300                    STQ   ! XDATA,,AUTO

      710       82    3               END;

      711       83    2           EVLOG( XSS_EVENTIDX) = XCODE + XDATA;

     83  1 000030   200005 236300                    LDQ   ! XCODE,,AUTO
         1 000031   200006 036300                    ADLQ  ! XDATA,,AUTO
         1 000032   000000 720200 0                  LXL0  ! XSS_EVENTIDX
         1 000033   000003 756210 0                  STQ   ! EVLOG,X0

      712       84    2           XSS_EVENTIDX = XSS_EVENTIDX + 1;

     84  1 000034   000000 054200 0                  AOS   ! XSS_EVENTIDX

      713       85    2           IF XSS_EVENTIDX > XSS_EVENTMAX THEN

     85  1 000035   000000 236200 0                  LDQ   ! XSS_EVENTIDX
         1 000036   000001 116200 0                  CMPQ  ! XSS_EVENTMAX
         1 000037   000041 604600 1                  TMOZ  ! s:87

      714       86    2               XSS_EVENTIDX = 0;

     86  1 000040   000000 450200 0                  STZ   ! XSS_EVENTIDX

      715       87    2           RETURN;
PL6.E3A0      #004=XSS$EVLOG File=XSS$DATA.:XSA1TSI                              WED 10/01/97 12:14 Page:142  

     87  1 000041   000000 702200 xent               TSX2  ! X66_ARET

      716       88    2           END;

      717       89
      718       90    1       END XSS$EVLOG;

     90  1 000042   000000 702200 xent               TSX2  ! X66_ARET

XSS_EVENTIDX
 Sect OctLoc
   0     000   000000 000000                                                    ....

XSS_EVENTMAX
 Sect OctLoc
   0     001   000000 000077                                                    ...?

XSS_EVENTLOG$
 Sect OctLoc
   0     002   000003 006000                                                    ....

EVLOG
 Sect OctLoc
   0     003   ****** ******   ****** ******   ****** ******   ****** ******    ................

(unnamed)
 Sect OctLoc
   2     000   000000 006014                                                    ....
      719       91        %EOD;

PL6.E3A0      #004=XSS$EVLOG File=XSS$DATA.:XSA1TSI                              WED 10/01/97 12:14 Page:143  
      No diagnostics issued in procedure XSS$EVLOG.
PL6.E3A0      #004=XSS$EVLOG File=XSS$DATA.:XSA1TSI                              WED 10/01/97 12:14 Page:144  

 **** Variables and constants ****

  ****  Section 000  Data  XSS$EVLOG

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w UBIN        r     1 EVLOG(0:63)                0-0-0/w SBIN        r     1 XSS_EVENTIDX
     2-0-0/w PTR         r     1 XSS_EVENTLOG$              1-0-0/w SBIN        r     1 XSS_EVENTMAX

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @CODE                      4-0-0/w PTR         r     1 @DATA
    *0-0-0/w UBIN        r     1 CODE                      *0-0-0/w CHAR(4)     r     1 CODECHARS
    *0-0-0/w UBIN        r     1 DATA                       5-0-0/w UBIN        r     1 XCODE
     6-0-0/w UBIN        r     1 XDATA


   Procedure XSS$EVLOG requires 35 words for executable code.
   Procedure XSS$EVLOG requires 8 words of local(AUTO) storage.
PL6.E3A0      #004=XSS$EVLOG File=XSS$DATA.:XSA1TSI                              WED 10/01/97 12:14 Page:145  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=XSS$EVLOG File=XSS$DATA.:XSA1TSI                              WED 10/01/97 12:14 Page:146  
          MINI XREF LISTING

CODE
        67**DCL        58--PROC       68--REDEF      78--IF         79>>ASSIGN
CODECHARS
        68**DCL        80>>IF
DATA
        69**DCL        58--PROC       77>>ASSIGN     81>>ASSIGN
EVLOG
        65**DCL        63--DCLINIT    83<<ASSIGN
XCODE
        70**DCL        76<<ASSIGN     79<<ASSIGN     83>>ASSIGN
XDATA
        71**DCL        77<<ASSIGN     81<<ASSIGN     83>>ASSIGN
XSS_EVENTIDX
        60**DCL        83>>ASSIGN     84<<ASSIGN     84>>ASSIGN     85>>IF         86<<ASSIGN
XSS_EVENTLOG$
        63**DCL        75>>IF
XSS_EVENTMAX
        62**DCL        85>>IF
PL6.E3A0      #004=XSS$EVLOG File=XSS$DATA.:XSA1TSI                              WED 10/01/97 12:14 Page:147  
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #004=XSS$EVLOG File=XSS$DATA.:XSA1TSI                              WED 10/01/97 12:14 Page:148  
              MINI UREF LISTING

XSS$EVLOG      58**PROC

PL6.E3A0      #005=XSS$DUMPBYTES File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:14 Page:149  
      720        1        /*T***********************************************************/
      721        2        /*T*                                                         */
      722        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      723        4        /*T*                                                         */
      724        5        /*T***********************************************************/
      725        6        /*F*    NAME:   XSS$DUMPBYTES
      726        7                DESCRIPTION:
      727        8                    This routine dumps a bytestring in low-8-of-9 Hex format.
      728        9                    The three parameters are an integer indicating whether this
      729       10                    is an input or output message and VECTORs framing the data
      730       11                    and the title to print in front of the dump.  (The title
      731       12                    param is optional.)
      732       13        */
      733       14        XSS$DUMPBYTES: PROC( FLAG, DATA_, TITLE_);
      734       15        %INCLUDE CP_6;
      735     5574            %B$CGAURD( STCLASS="BASED( GLUE$)");
      736     5593            %EQU_CG;
      737     5641            %FPT_WRITE( FPTN=FPT_DUMPFPT, BUF=XSS_SCRITCH);
      738     5672        %INCLUDE K_INTERFACE_M;
      739     6081        %INCLUDE XSS_INTERNAL_M;
      740     6670            %XSS$GLUE( NAME=GLUE, STCLASS="BASED( GLUE$)");
      741     6700        %INCLUDE XSS_SESSION_E;
      742     7265        %INCLUDE XSS_SESSION_M;
      743     9908            %XSS$GENERIC( STCLASS="BASED( SFPT$)");
      744    10054        %INCLUDE XUF_ENTRY;
      745    10062        %INCLUDE XU_FORMAT_C;
      746    10224            %F_FDS( NAME=FDSCGEVT, BUF=XSS_SCRITCH,
      747    10225                    FMT=CGFMT, NVECS=2, VECTR=CGVECT_);
      748    10338            %F_FDS( NAME=FDSDUMP, BUF=XSS_SCRITCH, OUTPUT=XSS$BLANKIT,
      749    10339                    FMT=DBFMT, NVECS=5, VECTR=DBVECT_);
      750    10452            %F_FDS( NAME=FDSTITLE, BUF=XSS_SCRITCH,
      751    10453                    FMT=TIFMT, NVECS=5, VECTR=TIVECT_);
      752    10566            %F_FDS( NAME=FDSTRFNC, BUF=XSS_SCRITCH,
      753    10567                    FMT=TRFMT, NVECS=2, VECTR=TRVECT_);
      754    10680        %EQU TRUE = '1'B;
      755    10681
      756    10682    1       DCL XSS$BLANKIT ENTRY;
PL6.E3A0      #005=XSS$DUMPBYTES File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:14 Page:150  
      757    10683
      758    10684    1       DCL FLAG SBIN;
      759    10685    1       DCL DATA_ VECTOR;
      760    10686    1       DCL TITLE_ VECTOR;
      761    10687    1       DCL XSS_ITRACE SBIN SYMREF;
      762    10688    1       DCL XSS_OTRACE SBIN SYMREF;
      763    10689    1       DCL XSS_LOGDCBN SBIN STATIC SYMDEF INIT( DCBNUM( M$DO));
      764    10690    1       DCL XSS_TRACE SBIN SYMREF;
      765    10691    1       DCL CGFMT CHAR(0) CONSTANT INIT( ' %2ZD %8A');
      766    10692    1       DCL CG_DOPN CHAR(8) CONSTANT INIT( 'CGDcbOpn');
      767    10693    1       DCL CG_DCLS CHAR(8) CONSTANT INIT( 'CGDcbCls');
      768    10694    1       DCL CG_TCON CHAR(8) CONSTANT INIT( 'CGTrmCon');
      769    10695    1       DCL CG_TDRQ CHAR(8) CONSTANT INIT( 'CGTrmDRq');
      770    10696    1       DCL CG_TDSC CHAR(8) CONSTANT INIT( 'CGTrmDis');
      771    10697    1       DCL CG_WARN CHAR(8) CONSTANT INIT( 'CGWrnBUG');
      772    10698    1       DCL CGW_MEM CHAR(8) CONSTANT INIT( 'CGWrnMem');
      773    10699    1       DCL CGW_DSK CHAR(8) CONSTANT INIT( 'CGWrnDsk');
      774    10700    1       DCL DBFMT CHAR(0) CONSTANT INIT( ' %6H: %8ZY %8ZY %8ZY %8ZY');
      775    10701    1       DCL TIFMT CHAR(0) CONSTANT INIT( ' %0T%S %D=o%O=x%H bytes at %0.2F');
      776    10702    1       DCL TRFMT CHAR(0) CONSTANT INIT( ' %2ZD %7A');
      777    10703    1       DCL CGVECT_(0:1) VECTOR STATIC INIT(
      778    10704    1               VECTOR( SCID), VECTOR( NIL));
      779    10705    1       DCL DBVECT_(0:4) VECTOR STATIC INIT(
      780    10706    1               VECTOR( XSS_BASE), VECTOR( NIL)*4);
      781    10707    1       DCL TIVECT_(0:4) VECTOR CONSTANT INIT(
      782    10708    1               VECTOR( TITLE), VECTOR( I)*3, VECTOR( XSS_DAT$));
      783    10709    1       DCL TRVECT_(0:1) VECTOR STATIC INIT(
      784    10710    1               VECTOR( SCID), VECTOR( NIL));
      785    10711    1       DCL M$DO DCB;
      786    10712    1       DCL 1 TITLE STATIC,
      787    10713    1            2 C UBIN(9) UNAL,
      788    10714    1            2 T CHAR(80) UNAL;
      789    10715    1       DCL TBYTES CHAR( TITLE.C) BASED UNAL;
      790    10716    1       DCL XSS_SCRITCH CHAR(80) STATIC SYMDEF;
      791    10717    1       DCL XSS_BASE SBIN STATIC SYMDEF;
      792    10718    1       DCL GLUE$ PTR;
      793    10719    1       DCL I SBIN STATIC;
PL6.E3A0      #005=XSS$DUMPBYTES File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:14 Page:151  
      794    10720    1       DCL SCID SBIN STATIC;
      795    10721    1       DCL SKID CHAR(2);
      796    10722    1       DCL SFPT$ PTR;
      797    10723    1       DCL VAL UBIN(36) BASED( XSS_VAL$) CALIGNED;
      798    10724    1       DCL XSS_VAL$ PTR STATIC SYMDEF;
      799    10725    1       DCL XSS_TOP$ PTR STATIC SYMDEF;
      800    10726    1       DCL XSS_DAT$ PTR STATIC SYMDEF;
      801    10727    1       DCL ZED UBIN CONSTANT INIT( 0);
      802    10728    1       DCL INFNC(0:7) CHAR(7) CONSTANT INIT(
      803    10729    1           'TConInd', 'TConCnf', 'TDatInd', 'TExpInd',
      804    10730    1           'TDisInd', 'TCredit', 'TFlStop', 'TFlStrt');
      805    10731    1       DCL OUTFNC(0:7) CHAR(7) CONSTANT INIT(
      806    10732    1           'TConReq', 'TConRsp', 'TDatReq', 'TExpReq',
      807    10733    1           'TDisReq', 'TCredit', 'BUG    ', 'BUG    ');
      808    10734    1       DCL OTHER CHAR(7) CONSTANT INIT( '(other)');
      809    10735    1       DCL FNCGRP CHAR(66) CONSTANT INIT(
      810    10736    1           'BUGAcDAcEAcIAcRAcSCaDConCtGDatExpRelRsxSMaSMiTkGTkPTyDUAbUErPAbPEr');
      811    10737    1       DCL FNCTYP CHAR(15) CONSTANT INIT( 'BUGReqIndRspCnf');
      812    10738    1       DCL FNCMAP(0:58) UBIN BYTE CONSTANT INIT(
      813    10739    1           0,
      814    10740    1           65, 129, 193, 257,
      815    10741    1           66, 130, 194, 258,
      816    10742    1           67, 131, 195, 259,
      817    10743    1           68, 132,
      818    10744    1           69, 133,
      819    10745    1           70, 134, 198, 262,
      820    10746    1           71, 135, 199, 263,
      821    10747    1           72, 136,
      822    10748    1           73, 137,
      823    10749    1           74, 138,
      824    10750    1           75, 139, 203, 267,
      825    10751    1           76, 140, 204, 268,
      826    10752    1           77, 141, 205, 269,
      827    10753    1           78, 142, 206, 270,
      828    10754    1           79, 143,
      829    10755    1           80, 144,
      830    10756    1           81, 145,
PL6.E3A0      #005=XSS$DUMPBYTES File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:14 Page:152  
      831    10757    1           82, 146,
      832    10758    1           83, 147,
      833    10759    1               148,
      834    10760    1               149) CALIGNED;
      835    10761
      836    10762    1       IF XSS_TRACE = 0 THEN
      837    10763                /* don't trace */
      838    10764    1           RETURN;
      839    10765    2       IF XSS_TRACE >= 1 THEN DO;
      840    10766                /* show SCID and Transport function code */
      841    10767    2           GLUE$ = VBASE( DATA_);
      842    10768    2           TRVECT_(1) = VECTOR( NIL);
      843    10769    3           IF FLAG = 0 THEN DO;
      844    10770                    /* this is an output message */
      845    10771    3               SCID = GLUE.MYSCID;
      846    10772    3               IF GLUE.TRNFNC >= %K_TCONNECT_REQ THEN
      847    10773    3                   TRVECT_(1) = VECTOR( OUTFNC( GLUE.TRNFNC - %K_TCONNECT_REQ));
      848    10774    3               END;
      849    10775    3           ELSE DO;
      850    10776                    /* this is an input message */
      851    10777    3               SCID = GLUE.YRSCID;
      852    10778    3               IF GLUE.TRNFNC >= %K_TCONNECT_REQ THEN
      853    10779    3                   TRVECT_(1) = VECTOR( INFNC( GLUE.TRNFNC - %K_TCONNECT_REQ));
      854    10780    3               END;
      855    10781    3           IF TRVECT_(1) = VECTOR( NIL) THEN DO;
      856    10782    4               DO CASE( B$CGAURD.EVENT);
      857    10783    4                   CASE( %CG_DOPN#);
      858    10784    4                       CGVECT_(1) = VECTOR( CG_DOPN);
      859    10785    4                   CASE( %CG_DCLS#);
      860    10786    4                       CGVECT_(1) = VECTOR( CG_DCLS);
      861    10787    4                   CASE( %CG_TCON#);
      862    10788    4                       CGVECT_(1) = VECTOR( CG_TCON);
      863    10789    4                   CASE( %CG_TDRQ#);
      864    10790    4                       CGVECT_(1) = VECTOR( CG_TDRQ);
      865    10791    4                   CASE( %CG_TDSC#);
      866    10792    4                       CGVECT_(1) = VECTOR( CG_TDSC);
      867    10793    4                   CASE( %CG_WARN#);
PL6.E3A0      #005=XSS$DUMPBYTES File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:14 Page:153  
      868    10794    5                       DO CASE( B$CGAURD.INFO);
      869    10795    5                           CASE( %CG_WARN_MEM#);
      870    10796    5                               CGVECT_(1) = VECTOR( CGW_MEM);
      871    10797    5                           CASE( %CG_WARN_DISK#);
      872    10798    5                               CGVECT_(1) = VECTOR( CGW_DSK);
      873    10799    5                           CASE( ELSE);
      874    10800    5                               CGVECT_(1) = VECTOR( CG_WARN);
      875    10801    5                           END;
      876    10802    4                   CASE( ELSE);
      877    10803    4                       CGVECT_(1) = VECTOR( OTHER);
      878    10804    4                   END;
      879    10805    3               FDSCGEVT.DCB# = XSS_LOGDCBN;
      880    10806    3               CALL X$FORMAT( FDSCGEVT);
      881    10807    3               END;
      882    10808    3           ELSE DO;
      883    10809    3               FDSTRFNC.DCB# = XSS_LOGDCBN;
      884    10810    3               CALL X$FORMAT( FDSTRFNC);
      885    10811    3               END;
      886    10812    2           END;
      887    10813    1       IF XSS_TRACE < 2 THEN
      888    10814                /* that's it for the trace */
      889    10815    1           RETURN;
      890    10816    1       IF ADDR( TITLE_) = ADDR( NIL) THEN
      891    10817    1           TITLE.C = 0;
      892    10818    2       ELSE DO;
      893    10819    2           TITLE.C = 1 + VBOUND( TITLE_);
      894    10820    2           CALL INSERT( TITLE.T, 0, TITLE.C, VBASE( TITLE_)->TBYTES);
      895    10821    2           END;
      896    10822    1       XSS_BASE = 0;
      897    10823    1       XSS_VAL$ = VBASE( DATA_);
      898    10824    1       XSS_DAT$ = XSS_VAL$;
      899    10825    1       XSS_TOP$ = PINCRC( XSS_VAL$, 1 + VBOUND( DATA_));
      900    10826    1       I = POFFC( XSS_TOP$, XSS_DAT$);
      901    10827    1       FDSTITLE.DCB# = XSS_LOGDCBN;
      902    10828    1       FDSDUMP.DCB# = XSS_LOGDCBN;
      903    10829    1       CALL X$FORMAT( FDSTITLE);
      904    10830    1   LOOP:
PL6.E3A0      #005=XSS$DUMPBYTES File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:14 Page:154  
      905    10831    2       DO WHILE( %TRUE);
      906    10832    3           DO I = 1 TO 4;
      907    10833    3               IF POFFC( XSS_TOP$, XSS_VAL$) > 0 THEN
      908    10834    3                   DBVECT_( I) = VECTOR( VAL);
      909    10835    3               ELSE
      910    10836    3                   DBVECT_( I) = VECTOR( ZED);
      911    10837    3               XSS_VAL$ = PINCRW( XSS_VAL$, 1);
      912    10838    3               END;
      913    10839    2           CALL X$FORMAT( FDSDUMP);
      914    10840    2           IF XSS_VAL$ >= XSS_TOP$ THEN
      915    10841    2               EXIT LOOP;
      916    10842    2           XSS_BASE = XSS_BASE + 16;
      917    10843    2           END;
      918    10844    1       RETURN;
      919    10845        %EJECT;
PL6.E3A0      #005=XSS$DUMPBYTES File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:14 Page:155  
      920    10846        /*F*    NAME:   XSS$DUMPFPT
      921    10847
      922    10848        */
      923    10849    1   XSS$DUMPFPT: ENTRY( FLAG);
      924    10850
      925    10851    1       SFPT$ = ADDR( FLAG);
      926    10852    1       CALL BINCHAR( SKID, XSS$GENERIC.SCID);
      927    10853    1       I = FNCMAP( XSS$GENERIC.FNC);
      928    10854    1       CALL INSERT( XSS_SCRITCH, , , '    ', SKID, ' S',
      929    10855    1               SUBSTR( FNCGRP, 3 * MOD( I, 64), 3),
      930    10856    1               SUBSTR( FNCTYP, 3 * ( I / 64), 3));
      931    10857    1       FPT_DUMPFPT.BUF_.BOUND = 13;
      932    10858    1       FPT_DUMPFPT.V.DCB# = XSS_LOGDCBN;
      933    10859    1       CALL M$WRITE( FPT_DUMPFPT);
      934    10860    1       RETURN;
      935    10861
      936    10862    1       END XSS$DUMPBYTES;
      937    10863        %EOD;

PL6.E3A0      #005=XSS$DUMPBYTES File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:14 Page:156  
--  Include file information  --

   XU_FORMAT_C.:LIB_E05  is referenced.
   XUF_ENTRY.:LIB_E05  cannot be made into a system file and is referenced.
   XSS_SESSION_M.:XSA1TOU  is referenced.
   XSS_SESSION_E.:XSA1TOU  is referenced.
   XSS_INTERNAL_M.:XSA1TOU  is referenced.
   K_INTERFACE_M.:E05OU  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure XSS$DUMPBYTES.

   Procedure XSS$DUMPBYTES requires 262 words for executable code.
   Procedure XSS$DUMPBYTES requires 12 words of local(AUTO) storage.

PL6.E3A0      #005=XSS$DUMPBYTES File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:14 Page:157  

 Object Unit name= XSS$DUMPBYTES                              File name= XSS$DATA.:XSA1TOU
 UTS= OCT 01 '97 12:14:40.52 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none   199    307  XSS$DUMPBYTES
    2  RoData even  UTS    117    165  XSS$DUMPBYTES
    3   DCB   even  none     0      0  M$DO
    4   Proc  even  none   262    406  XSS$DUMPBYTES
    5  RoData even  none    32     40  XSS$DUMPBYTES

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     4      0   yes            yes      Std        3  XSS$DUMPBYTES
     4    324                  yes      Std        1  XSS$DUMPFPT

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
    1    204  XSS_LOGDCBN                        1    255  XSS_SCRITCH
    1    301  XSS_BASE                           1    304  XSS_VAL$
    1    305  XSS_TOP$                           1    306  XSS_DAT$
PL6.E3A0      #005=XSS$DUMPBYTES File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:14 Page:158  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       0 XSS$BLANKIT
         yes           Std       1 X$FORMAT
                       nStd      0 X66_AUTO_3
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  XSS_TRACE                             M$DO

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #005=XSS$DUMPBYTES File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:14 Page:159  


      720        1        /*T***********************************************************/
      721        2        /*T*                                                         */
      722        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      723        4        /*T*                                                         */
      724        5        /*T***********************************************************/
      725        6        /*F*    NAME:   XSS$DUMPBYTES
      726        7                DESCRIPTION:
      727        8                    This routine dumps a bytestring in low-8-of-9 Hex format.
      728        9                    The three parameters are an integer indicating whether this
      729       10                    is an input or output message and VECTORs framing the data
      730       11                    and the title to print in front of the dump.  (The title
      731       12                    param is optional.)
      732       13        */
      733       14        XSS$DUMPBYTES: PROC( FLAG, DATA_, TITLE_);

     14  4 000000   000000 700200 xent  XSS$DUMPBYT* TSX0  ! X66_AUTO_3
         4 000001   000014 000003                    ZERO    12,3

      734       15        %INCLUDE CP_6;
      735     5574            %B$CGAURD( STCLASS="BASED( GLUE$)");
      736     5593            %EQU_CG;
      737     5641            %FPT_WRITE( FPTN=FPT_DUMPFPT, BUF=XSS_SCRITCH);
      738     5672        %INCLUDE K_INTERFACE_M;
      739     6081        %INCLUDE XSS_INTERNAL_M;
      740     6670            %XSS$GLUE( NAME=GLUE, STCLASS="BASED( GLUE$)");
      741     6700        %INCLUDE XSS_SESSION_E;
      742     7265        %INCLUDE XSS_SESSION_M;
      743     9908            %XSS$GENERIC( STCLASS="BASED( SFPT$)");
      744    10054        %INCLUDE XUF_ENTRY;
      745    10062        %INCLUDE XU_FORMAT_C;
      746    10224            %F_FDS( NAME=FDSCGEVT, BUF=XSS_SCRITCH,
      747    10225                    FMT=CGFMT, NVECS=2, VECTR=CGVECT_);
      748    10338            %F_FDS( NAME=FDSDUMP, BUF=XSS_SCRITCH, OUTPUT=XSS$BLANKIT,
      749    10339                    FMT=DBFMT, NVECS=5, VECTR=DBVECT_);
      750    10452            %F_FDS( NAME=FDSTITLE, BUF=XSS_SCRITCH,
      751    10453                    FMT=TIFMT, NVECS=5, VECTR=TIVECT_);
PL6.E3A0      #005=XSS$DUMPBYTES File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:14 Page:160  
      752    10566            %F_FDS( NAME=FDSTRFNC, BUF=XSS_SCRITCH,
      753    10567                    FMT=TRFMT, NVECS=2, VECTR=TRVECT_);
      754    10680        %EQU TRUE = '1'B;
      755    10681
      756    10682    1       DCL XSS$BLANKIT ENTRY;
      757    10683
      758    10684    1       DCL FLAG SBIN;
      759    10685    1       DCL DATA_ VECTOR;
      760    10686    1       DCL TITLE_ VECTOR;
      761    10687    1       DCL XSS_ITRACE SBIN SYMREF;
      762    10688    1       DCL XSS_OTRACE SBIN SYMREF;
      763    10689    1       DCL XSS_LOGDCBN SBIN STATIC SYMDEF INIT( DCBNUM( M$DO));
      764    10690    1       DCL XSS_TRACE SBIN SYMREF;
      765    10691    1       DCL CGFMT CHAR(0) CONSTANT INIT( ' %2ZD %8A');
      766    10692    1       DCL CG_DOPN CHAR(8) CONSTANT INIT( 'CGDcbOpn');
      767    10693    1       DCL CG_DCLS CHAR(8) CONSTANT INIT( 'CGDcbCls');
      768    10694    1       DCL CG_TCON CHAR(8) CONSTANT INIT( 'CGTrmCon');
      769    10695    1       DCL CG_TDRQ CHAR(8) CONSTANT INIT( 'CGTrmDRq');
      770    10696    1       DCL CG_TDSC CHAR(8) CONSTANT INIT( 'CGTrmDis');
      771    10697    1       DCL CG_WARN CHAR(8) CONSTANT INIT( 'CGWrnBUG');
      772    10698    1       DCL CGW_MEM CHAR(8) CONSTANT INIT( 'CGWrnMem');
      773    10699    1       DCL CGW_DSK CHAR(8) CONSTANT INIT( 'CGWrnDsk');
      774    10700    1       DCL DBFMT CHAR(0) CONSTANT INIT( ' %6H: %8ZY %8ZY %8ZY %8ZY');
      775    10701    1       DCL TIFMT CHAR(0) CONSTANT INIT( ' %0T%S %D=o%O=x%H bytes at %0.2F');
      776    10702    1       DCL TRFMT CHAR(0) CONSTANT INIT( ' %2ZD %7A');
      777    10703    1       DCL CGVECT_(0:1) VECTOR STATIC INIT(
      778    10704    1               VECTOR( SCID), VECTOR( NIL));
      779    10705    1       DCL DBVECT_(0:4) VECTOR STATIC INIT(
      780    10706    1               VECTOR( XSS_BASE), VECTOR( NIL)*4);
      781    10707    1       DCL TIVECT_(0:4) VECTOR CONSTANT INIT(
      782    10708    1               VECTOR( TITLE), VECTOR( I)*3, VECTOR( XSS_DAT$));
      783    10709    1       DCL TRVECT_(0:1) VECTOR STATIC INIT(
      784    10710    1               VECTOR( SCID), VECTOR( NIL));
      785    10711    1       DCL M$DO DCB;
      786    10712    1       DCL 1 TITLE STATIC,
      787    10713    1            2 C UBIN(9) UNAL,
      788    10714    1            2 T CHAR(80) UNAL;
PL6.E3A0      #005=XSS$DUMPBYTES File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:14 Page:161  
      789    10715    1       DCL TBYTES CHAR( TITLE.C) BASED UNAL;
      790    10716    1       DCL XSS_SCRITCH CHAR(80) STATIC SYMDEF;
      791    10717    1       DCL XSS_BASE SBIN STATIC SYMDEF;
      792    10718    1       DCL GLUE$ PTR;
      793    10719    1       DCL I SBIN STATIC;
      794    10720    1       DCL SCID SBIN STATIC;
      795    10721    1       DCL SKID CHAR(2);
      796    10722    1       DCL SFPT$ PTR;
      797    10723    1       DCL VAL UBIN(36) BASED( XSS_VAL$) CALIGNED;
      798    10724    1       DCL XSS_VAL$ PTR STATIC SYMDEF;
      799    10725    1       DCL XSS_TOP$ PTR STATIC SYMDEF;
      800    10726    1       DCL XSS_DAT$ PTR STATIC SYMDEF;
      801    10727    1       DCL ZED UBIN CONSTANT INIT( 0);
      802    10728    1       DCL INFNC(0:7) CHAR(7) CONSTANT INIT(
      803    10729    1           'TConInd', 'TConCnf', 'TDatInd', 'TExpInd',
      804    10730    1           'TDisInd', 'TCredit', 'TFlStop', 'TFlStrt');
      805    10731    1       DCL OUTFNC(0:7) CHAR(7) CONSTANT INIT(
      806    10732    1           'TConReq', 'TConRsp', 'TDatReq', 'TExpReq',
      807    10733    1           'TDisReq', 'TCredit', 'BUG    ', 'BUG    ');
      808    10734    1       DCL OTHER CHAR(7) CONSTANT INIT( '(other)');
      809    10735    1       DCL FNCGRP CHAR(66) CONSTANT INIT(
      810    10736    1           'BUGAcDAcEAcIAcRAcSCaDConCtGDatExpRelRsxSMaSMiTkGTkPTyDUAbUErPAbPEr');
      811    10737    1       DCL FNCTYP CHAR(15) CONSTANT INIT( 'BUGReqIndRspCnf');
      812    10738    1       DCL FNCMAP(0:58) UBIN BYTE CONSTANT INIT(
      813    10739    1           0,
      814    10740    1           65, 129, 193, 257,
      815    10741    1           66, 130, 194, 258,
      816    10742    1           67, 131, 195, 259,
      817    10743    1           68, 132,
      818    10744    1           69, 133,
      819    10745    1           70, 134, 198, 262,
      820    10746    1           71, 135, 199, 263,
      821    10747    1           72, 136,
      822    10748    1           73, 137,
      823    10749    1           74, 138,
      824    10750    1           75, 139, 203, 267,
      825    10751    1           76, 140, 204, 268,
PL6.E3A0      #005=XSS$DUMPBYTES File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:14 Page:162  
      826    10752    1           77, 141, 205, 269,
      827    10753    1           78, 142, 206, 270,
      828    10754    1           79, 143,
      829    10755    1           80, 144,
      830    10756    1           81, 145,
      831    10757    1           82, 146,
      832    10758    1           83, 147,
      833    10759    1               148,
      834    10760    1               149) CALIGNED;
      835    10761
      836    10762    1       IF XSS_TRACE = 0 THEN

  10762  4 000002   000000 235000 xsym               LDA     XSS_TRACE
         4 000003   000005 601000 4                  TNZ     s:10765

      837    10763                /* don't trace */
      838    10764    1           RETURN;

  10764  4 000004   000000 702200 xent               TSX2  ! X66_ARET

      839    10765    2       IF XSS_TRACE >= 1 THEN DO;

  10765  4 000005   000174 604400 4                  TMOZ    s:10813

      840    10766                /* show SCID and Transport function code */
      841    10767    2           GLUE$ = VBASE( DATA_);

  10767  4 000006   200004 470500                    LDP0    @DATA_,,AUTO
         4 000007   000001 236100                    LDQ     1,,PR0
         4 000010   200006 756100                    STQ     GLUE$,,AUTO

      842    10768    2           TRVECT_(1) = VECTOR( NIL);

  10768  4 000011   000000 237000 5                  LDAQ    0
         4 000012   000226 757000 1                  STAQ    TRVECT_+2

      843    10769    3           IF FLAG = 0 THEN DO;
PL6.E3A0      #005=XSS$DUMPBYTES File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:14 Page:163  

  10769  4 000013   200003 471500                    LDP1    @FLAG,,AUTO
         4 000014   100000 235100                    LDA     0,,PR1
         4 000015   000037 601000 4                  TNZ     s:10777

      844    10770                    /* this is an output message */
      845    10771    3               SCID = GLUE.MYSCID;

  10771  4 000016   200006 473500                    LDP3    GLUE$,,AUTO
         4 000017   300000 236100                    LDQ     0,,PR3
         4 000020   000033 772000                    QRL     27
         4 000021   000303 756000 1                  STQ     SCID

      846    10772    3               IF GLUE.TRNFNC >= %K_TCONNECT_REQ THEN

  10772  4 000022   300000 236100                    LDQ     0,,PR3
         4 000023   000777 376003                    ANQ     511,DU
         4 000024   000025 116003                    CMPQ    21,DU
         4 000025   000060 602000 4                  TNC     s:10781

      847    10773    3                   TRVECT_(1) = VECTOR( OUTFNC( GLUE.TRNFNC - %K_TCONNECT_REQ));

  10773  4 000026   300000 236100                    LDQ     0,,PR3
         4 000027   000022 772000                    QRL     18
         4 000030   000777 376007                    ANQ     511,DL
         4 000031   000007 402007                    MPY     7,DL
         4 000032   000002 235000 5                  LDA     2
         4 000033   000020 736000                    QLS     16
         4 000034   000003 036000 5                  ADLQ    3
         4 000035   000226 757000 1                  STAQ    TRVECT_+2

      848    10774    3               END;

  10774  4 000036   000060 710000 4                  TRA     s:10781

      849    10775    3           ELSE DO;

PL6.E3A0      #005=XSS$DUMPBYTES File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:14 Page:164  
      850    10776                    /* this is an input message */
      851    10777    3               SCID = GLUE.YRSCID;

  10777  4 000037   200006 473500                    LDP3    GLUE$,,AUTO
         4 000040   300000 236100                    LDQ     0,,PR3
         4 000041   000011 772000                    QRL     9
         4 000042   000777 376007                    ANQ     511,DL
         4 000043   000303 756000 1                  STQ     SCID

      852    10778    3               IF GLUE.TRNFNC >= %K_TCONNECT_REQ THEN

  10778  4 000044   300000 236100                    LDQ     0,,PR3
         4 000045   000777 376003                    ANQ     511,DU
         4 000046   000025 116003                    CMPQ    21,DU
         4 000047   000060 602000 4                  TNC     s:10781

      853    10779    3                   TRVECT_(1) = VECTOR( INFNC( GLUE.TRNFNC - %K_TCONNECT_REQ));

  10779  4 000050   300000 236100                    LDQ     0,,PR3
         4 000051   000022 772000                    QRL     18
         4 000052   000777 376007                    ANQ     511,DL
         4 000053   000007 402007                    MPY     7,DL
         4 000054   000002 235000 5                  LDA     2
         4 000055   000020 736000                    QLS     16
         4 000056   000004 036000 5                  ADLQ    4
         4 000057   000226 757000 1                  STAQ    TRVECT_+2

      854    10780    3               END;

      855    10781    3           IF TRVECT_(1) = VECTOR( NIL) THEN DO;

  10781  4 000060   000226 237000 1                  LDAQ    TRVECT_+2
         4 000061   000000 117000 5                  CMPAQ   0
         4 000062   000166 601000 4                  TNZ     s:10809

      856    10782    4               DO CASE( B$CGAURD.EVENT);

PL6.E3A0      #005=XSS$DUMPBYTES File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:14 Page:165  
  10782  4 000063   300000 235100                    LDA     0,,PR3
         4 000064   000027 115007                    CMPA    23,DL
         4 000065   000067 602005 4                  TNC     s:10782+4,AL
         4 000066   000155 710000 4                  TRA     s:10803
         4 000067   000116 710000 4                  TRA     s:10784
         4 000070   000121 710000 4                  TRA     s:10786
         4 000071   000124 710000 4                  TRA     s:10788
         4 000072   000132 710000 4                  TRA     s:10792
         4 000073   000155 710000 4                  TRA     s:10803
         4 000074   000155 710000 4                  TRA     s:10803
         4 000075   000155 710000 4                  TRA     s:10803
         4 000076   000155 710000 4                  TRA     s:10803
         4 000077   000155 710000 4                  TRA     s:10803
         4 000100   000135 710000 4                  TRA     s:10794
         4 000101   000155 710000 4                  TRA     s:10803
         4 000102   000155 710000 4                  TRA     s:10803
         4 000103   000155 710000 4                  TRA     s:10803
         4 000104   000155 710000 4                  TRA     s:10803
         4 000105   000155 710000 4                  TRA     s:10803
         4 000106   000155 710000 4                  TRA     s:10803
         4 000107   000155 710000 4                  TRA     s:10803
         4 000110   000155 710000 4                  TRA     s:10803
         4 000111   000155 710000 4                  TRA     s:10803
         4 000112   000155 710000 4                  TRA     s:10803
         4 000113   000155 710000 4                  TRA     s:10803
         4 000114   000155 710000 4                  TRA     s:10803
         4 000115   000127 710000 4                  TRA     s:10790

      857    10783    4                   CASE( %CG_DOPN#);

      858    10784    4                       CGVECT_(1) = VECTOR( CG_DOPN);

  10784  4 000116   000006 237000 5                  LDAQ    6
         4 000117   000210 757000 1                  STAQ    CGVECT_+2
         4 000120   000157 710000 4                  TRA     s:10805

      859    10785    4                   CASE( %CG_DCLS#);
PL6.E3A0      #005=XSS$DUMPBYTES File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:14 Page:166  

      860    10786    4                       CGVECT_(1) = VECTOR( CG_DCLS);

  10786  4 000121   000010 237000 5                  LDAQ    8
         4 000122   000210 757000 1                  STAQ    CGVECT_+2
         4 000123   000157 710000 4                  TRA     s:10805

      861    10787    4                   CASE( %CG_TCON#);

      862    10788    4                       CGVECT_(1) = VECTOR( CG_TCON);

  10788  4 000124   000012 237000 5                  LDAQ    10
         4 000125   000210 757000 1                  STAQ    CGVECT_+2
         4 000126   000157 710000 4                  TRA     s:10805

      863    10789    4                   CASE( %CG_TDRQ#);

      864    10790    4                       CGVECT_(1) = VECTOR( CG_TDRQ);

  10790  4 000127   000014 237000 5                  LDAQ    12
         4 000130   000210 757000 1                  STAQ    CGVECT_+2
         4 000131   000157 710000 4                  TRA     s:10805

      865    10791    4                   CASE( %CG_TDSC#);

      866    10792    4                       CGVECT_(1) = VECTOR( CG_TDSC);

  10792  4 000132   000016 237000 5                  LDAQ    14
         4 000133   000210 757000 1                  STAQ    CGVECT_+2
         4 000134   000157 710000 4                  TRA     s:10805

      867    10793    4                   CASE( %CG_WARN#);

      868    10794    5                       DO CASE( B$CGAURD.INFO);

  10794  4 000135   300003 235100                    LDA     3,,PR3
         4 000136   000003 115007                    CMPA    3,DL
PL6.E3A0      #005=XSS$DUMPBYTES File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:14 Page:167  
         4 000137   000141 602005 4                  TNC     s:10794+4,AL
         4 000140   000152 710000 4                  TRA     s:10800
         4 000141   000152 710000 4                  TRA     s:10800
         4 000142   000144 710000 4                  TRA     s:10796
         4 000143   000147 710000 4                  TRA     s:10798

      869    10795    5                           CASE( %CG_WARN_MEM#);

      870    10796    5                               CGVECT_(1) = VECTOR( CGW_MEM);

  10796  4 000144   000020 237000 5                  LDAQ    16
         4 000145   000210 757000 1                  STAQ    CGVECT_+2
         4 000146   000157 710000 4                  TRA     s:10805

      871    10797    5                           CASE( %CG_WARN_DISK#);

      872    10798    5                               CGVECT_(1) = VECTOR( CGW_DSK);

  10798  4 000147   000022 237000 5                  LDAQ    18
         4 000150   000210 757000 1                  STAQ    CGVECT_+2
         4 000151   000157 710000 4                  TRA     s:10805

      873    10799    5                           CASE( ELSE);

      874    10800    5                               CGVECT_(1) = VECTOR( CG_WARN);

  10800  4 000152   000024 237000 5                  LDAQ    20
         4 000153   000210 757000 1                  STAQ    CGVECT_+2

      875    10801    5                           END;

  10801  4 000154   000157 710000 4                  TRA     s:10805

      876    10802    4                   CASE( ELSE);

      877    10803    4                       CGVECT_(1) = VECTOR( OTHER);

PL6.E3A0      #005=XSS$DUMPBYTES File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:14 Page:168  
  10803  4 000155   000026 237000 5                  LDAQ    22
         4 000156   000210 757000 1                  STAQ    CGVECT_+2

      878    10804    4                   END;

      879    10805    3               FDSCGEVT.DCB# = XSS_LOGDCBN;

  10805  4 000157   000204 720000 1                  LXL0    XSS_LOGDCBN
         4 000160   000027 740000 1                  STX0    FDSCGEVT+11

      880    10806    3               CALL X$FORMAT( FDSCGEVT);

  10806  4 000161   000031 630400 5                  EPPR0   25
         4 000162   000030 631400 5                  EPPR1   24
         4 000163   000000 701000 xent               TSX1    X$FORMAT
         4 000164   000000 011000                    NOP     0

      881    10807    3               END;

  10807  4 000165   000174 710000 4                  TRA     s:10813

      882    10808    3           ELSE DO;

      883    10809    3               FDSTRFNC.DCB# = XSS_LOGDCBN;

  10809  4 000166   000204 720000 1                  LXL0    XSS_LOGDCBN
         4 000167   000161 740000 1                  STX0    FDSTRFNC+11

      884    10810    3               CALL X$FORMAT( FDSTRFNC);

  10810  4 000170   000032 630400 5                  EPPR0   26
         4 000171   000030 631400 5                  EPPR1   24
         4 000172   000000 701000 xent               TSX1    X$FORMAT
         4 000173   000000 011000                    NOP     0

      885    10811    3               END;

PL6.E3A0      #005=XSS$DUMPBYTES File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:14 Page:169  
      886    10812    2           END;

      887    10813    1       IF XSS_TRACE < 2 THEN

  10813  4 000174   000000 235000 xsym               LDA     XSS_TRACE
         4 000175   000002 115007                    CMPA    2,DL
         4 000176   000200 605000 4                  TPL     s:10816

      888    10814                /* that's it for the trace */
      889    10815    1           RETURN;

  10815  4 000177   000000 702200 xent               TSX2  ! X66_ARET

      890    10816    1       IF ADDR( TITLE_) = ADDR( NIL) THEN

  10816  4 000200   200005 236100                    LDQ     @TITLE_,,AUTO
         4 000201   000001 116000 5                  CMPQ    1
         4 000202   000206 601000 4                  TNZ     s:10819

      891    10817    1           TITLE.C = 0;

  10817  4 000203   000000 236003                    LDQ     0,DU
         4 000204   000230 552040 1                  STBQ    TITLE,'40'O
         4 000205   000224 710000 4                  TRA     s:10822

      892    10818    2       ELSE DO;

      893    10819    2           TITLE.C = 1 + VBOUND( TITLE_);

  10819  4 000206   200005 470500                    LDP0    @TITLE_,,AUTO
         4 000207   000000 236100                    LDQ     0,,PR0
         4 000210   000020 772000                    QRL     16
         4 000211   000001 036007                    ADLQ    1,DL
         4 000212   000033 736000                    QLS     27
         4 000213   000230 552040 1                  STBQ    TITLE,'40'O

      894    10820    2           CALL INSERT( TITLE.T, 0, TITLE.C, VBASE( TITLE_)->TBYTES);
PL6.E3A0      #005=XSS$DUMPBYTES File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:14 Page:170  

  10820  4 000214   000001 471500                    LDP1    1,,PR0
         4 000215   000230 236000 1                  LDQ     TITLE
         4 000216   000033 772000                    QRL     27
         4 000217   000000 620006                    EAX0    0,QL
         4 000220   000000 621006                    EAX1    0,QL
         4 000221   040040 100540                    MLR     fill='040'O
         4 000222   100000 000010                    ADSC9   0,,PR1                   cn=0,n=*X0
         4 000223   000230 200011 1                  ADSC9   TITLE                    cn=1,n=*X1

      895    10821    2           END;

      896    10822    1       XSS_BASE = 0;

  10822  4 000224   000301 450000 1                  STZ     XSS_BASE

      897    10823    1       XSS_VAL$ = VBASE( DATA_);

  10823  4 000225   200004 470500                    LDP0    @DATA_,,AUTO
         4 000226   000001 236100                    LDQ     1,,PR0
         4 000227   000304 756000 1                  STQ     XSS_VAL$

      898    10824    1       XSS_DAT$ = XSS_VAL$;

  10824  4 000230   000306 756000 1                  STQ     XSS_DAT$

      899    10825    1       XSS_TOP$ = PINCRC( XSS_VAL$, 1 + VBOUND( DATA_));

  10825  4 000231   000000 236100                    LDQ     0,,PR0
         4 000232   000020 772000                    QRL     16
         4 000233   000020 736000                    QLS     16
         4 000234   200000 036007                    ADLQ    65536,DL
         4 000235   000304 036000 1                  ADLQ    XSS_VAL$
         4 000236   000305 756000 1                  STQ     XSS_TOP$

      900    10826    1       I = POFFC( XSS_TOP$, XSS_DAT$);

PL6.E3A0      #005=XSS$DUMPBYTES File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:14 Page:171  
  10826  4 000237   000306 236000 1                  LDQ     XSS_DAT$
         4 000240   000020 772000                    QRL     16
         4 000241   200012 756100                    STQ     SFPT$+2,,AUTO
         4 000242   000305 236000 1                  LDQ     XSS_TOP$
         4 000243   000020 772000                    QRL     16
         4 000244   200012 136100                    SBLQ    SFPT$+2,,AUTO
         4 000245   000302 756000 1                  STQ     I

      901    10827    1       FDSTITLE.DCB# = XSS_LOGDCBN;

  10827  4 000246   000204 720000 1                  LXL0    XSS_LOGDCBN
         4 000247   000123 740000 1                  STX0    FDSTITLE+11

      902    10828    1       FDSDUMP.DCB# = XSS_LOGDCBN;

  10828  4 000250   000065 740000 1                  STX0    FDSDUMP+11

      903    10829    1       CALL X$FORMAT( FDSTITLE);

  10829  4 000251   000033 630400 5                  EPPR0   27
         4 000252   000030 631400 5                  EPPR1   24
         4 000253   000000 701000 xent               TSX1    X$FORMAT
         4 000254   000000 011000                    NOP     0

      904    10830    1   LOOP:
      905    10831    2       DO WHILE( %TRUE);

  10831  4 000255                       LOOP         null
      906    10832    3           DO I = 1 TO 4;

  10832  4 000255   000001 235007                    LDA     1,DL
         4 000256   000302 755000 1                  STA     I

      907    10833    3               IF POFFC( XSS_TOP$, XSS_VAL$) > 0 THEN

  10833  4 000257   000304 236000 1                  LDQ     XSS_VAL$
         4 000260   000020 772000                    QRL     16
PL6.E3A0      #005=XSS$DUMPBYTES File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:14 Page:172  
         4 000261   200012 756100                    STQ     SFPT$+2,,AUTO
         4 000262   000305 236000 1                  LDQ     XSS_TOP$
         4 000263   000020 772000                    QRL     16
         4 000264   200012 136100                    SBLQ    SFPT$+2,,AUTO
         4 000265   000275 604400 4                  TMOZ    s:10836

      908    10834    3                   DBVECT_( I) = VECTOR( VAL);

  10834  4 000266   000302 235000 1                  LDA     I
         4 000267   000001 735000                    ALS     1
         4 000270   000000 620005                    EAX0    0,AL
         4 000271   777640 235007                    LDA     -96,DL
         4 000272   000304 236000 1                  LDQ     XSS_VAL$
         4 000273   000212 757010 1                  STAQ    DBVECT_,X0
         4 000274   000302 710000 4                  TRA     s:10837

      909    10835    3               ELSE
      910    10836    3                   DBVECT_( I) = VECTOR( ZED);

  10836  4 000275   000302 235000 1                  LDA     I
         4 000276   000001 735000                    ALS     1
         4 000277   000000 620005                    EAX0    0,AL
         4 000300   000034 237000 5                  LDAQ    28
         4 000301   000212 757010 1                  STAQ    DBVECT_,X0

      911    10837    3               XSS_VAL$ = PINCRW( XSS_VAL$, 1);

  10837  4 000302   000304 236000 1                  LDQ     XSS_VAL$
         4 000303   000001 036003                    ADLQ    1,DU
         4 000304   000304 756000 1                  STQ     XSS_VAL$

      912    10838    3               END;

  10838  4 000305   000302 054000 1                  AOS     I
         4 000306   000302 235000 1                  LDA     I
         4 000307   000004 115007                    CMPA    4,DL
         4 000310   000257 604400 4                  TMOZ    s:10833
PL6.E3A0      #005=XSS$DUMPBYTES File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:14 Page:173  

      913    10839    2           CALL X$FORMAT( FDSDUMP);

  10839  4 000311   000036 630400 5                  EPPR0   30
         4 000312   000030 631400 5                  EPPR1   24
         4 000313   000000 701000 xent               TSX1    X$FORMAT
         4 000314   000000 011000                    NOP     0

      914    10840    2           IF XSS_VAL$ >= XSS_TOP$ THEN

  10840  4 000315   000304 236000 1                  LDQ     XSS_VAL$
         4 000316   000305 116000 1                  CMPQ    XSS_TOP$
         4 000317   000323 603000 4                  TRC     s:10844

      915    10841    2               EXIT LOOP;
      916    10842    2           XSS_BASE = XSS_BASE + 16;

  10842  4 000320   000020 236007                    LDQ     16,DL
         4 000321   000301 056000 1                  ASQ     XSS_BASE

      917    10843    2           END;

  10843  4 000322   000255 710000 4                  TRA     LOOP

      918    10844    1       RETURN;

  10844  4 000323   000000 702200 xent               TSX2  ! X66_ARET

      919    10845        %EJECT;
PL6.E3A0      #005=XSS$DUMPBYTES File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:14 Page:174  
      920    10846        /*F*    NAME:   XSS$DUMPFPT
      921    10847
      922    10848        */
      923    10849    1   XSS$DUMPFPT: ENTRY( FLAG);

  10849  4 000324   000000 700200 xent  XSS$DUMPFPT  TSX0  ! X66_AUTO_3
         4 000325   000014 000003                    ZERO    12,3

      924    10850
      925    10851    1       SFPT$ = ADDR( FLAG);

  10851  4 000326   200003 236100                    LDQ     @FLAG,,AUTO
         4 000327   200010 756100                    STQ     SFPT$,,AUTO

      926    10852    1       CALL BINCHAR( SKID, XSS$GENERIC.SCID);

  10852  4 000330   200010 470500                    LDP0    SFPT$,,AUTO
         4 000331   000000 236100                    LDQ     0,,PR0
         4 000332   000022 772000                    QRL     18
         4 000333   000777 376007                    ANQ     511,DL
         4 000334   000000 235003                    LDA     0,DU
         4 000335   200012 757100                    STAQ    SFPT$+2,,AUTO
         4 000336   000100 301500                    BTD
         4 000337   200012 000010                    NDSC9   SFPT$+2,,AUTO            cn=0,s=lsgnf,sf=0,n=8
         4 000340   200007 030002                    NDSC9   SKID,,AUTO               cn=0,s=nosgn,sf=0,n=2

      927    10853    1       I = FNCMAP( XSS$GENERIC.FNC);

  10853  4 000341   000000 236100                    LDQ     0,,PR0
         4 000342   000033 772000                    QRL     27
         4 000343   000000 101406                    MRL     fill='000'O
         4 000344   000144 000001 2                  ADSC9   FNCMAP,Q                 cn=0,n=1
         4 000345   000302 000004 1                  ADSC9   I                        cn=0,n=4

      928    10854    1       CALL INSERT( XSS_SCRITCH, , , '    ', SKID, ' S',

  10854  4 000346   000302 236000 1                  LDQ     I
PL6.E3A0      #005=XSS$DUMPBYTES File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:14 Page:175  
         4 000347   000100 506007                    DIV     64,DL
         4 000350   000302 236000 1                  LDQ     I
         4 000351   200012 755100                    STA     SFPT$+2,,AUTO
         4 000352   000100 506007                    DIV     64,DL
         4 000353   200013 756100                    STQ     SFPT$+3,,AUTO
         4 000354   000163 236000 2                  LDQ     FNCMAP+15
         4 000355   000255 756000 1                  STQ     XSS_SCRITCH
         4 000356   200007 220100                    LDX0    SKID,,AUTO
         4 000357   000256 740000 1                  STX0    XSS_SCRITCH+1
         4 000360   000164 221000 2                  LDX1    FNCMAP+16
         4 000361   000256 441000 1                  SXL1    XSS_SCRITCH+1
         4 000362   200012 236100                    LDQ     SFPT$+2,,AUTO
         4 000363   000003 402007                    MPY     3,DL
         4 000364   040000 100406                    MLR     fill='040'O
         4 000365   000117 000003 2                  ADSC9   FNCGRP,Q                 cn=0,n=3
         4 000366   000257 000003 1                  ADSC9   XSS_SCRITCH+2            cn=0,n=3
         4 000367   200013 236100                    LDQ     SFPT$+3,,AUTO
         4 000370   000003 402007                    MPY     3,DL
         4 000371   040000 100406                    MLR     fill='040'O
         4 000372   000140 000003 2                  ADSC9   FNCTYP,Q                 cn=0,n=3
         4 000373   000257 600105 1                  ADSC9   XSS_SCRITCH+2            cn=3,n=69

      929    10855    1               SUBSTR( FNCGRP, 3 * MOD( I, 64), 3),
      930    10856    1               SUBSTR( FNCTYP, 3 * ( I / 64), 3));
      931    10857    1       FPT_DUMPFPT.BUF_.BOUND = 13;

  10857  4 000374   000004 236000 1                  LDQ     FPT_DUMPFPT+4
         4 000375   177777 376007                    ANQ     65535,DL
         4 000376   000037 276000 5                  ORQ     31
         4 000377   000004 756000 1                  STQ     FPT_DUMPFPT+4

      932    10858    1       FPT_DUMPFPT.V.DCB# = XSS_LOGDCBN;

  10858  4 000400   000204 720000 1                  LXL0    XSS_LOGDCBN
         4 000401   000010 740000 1                  STX0    FPT_DUMPFPT+8

      933    10859    1       CALL M$WRITE( FPT_DUMPFPT);
PL6.E3A0      #005=XSS$DUMPBYTES File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:14 Page:176  

  10859  4 000402   000000 630400 1                  EPPR0   FPT_DUMPFPT
         4 000403   040001 713400                    CLIMB   write
         4 000404   401400 401760                    pmme    nvectors=4

      934    10860    1       RETURN;

  10860  4 000405   000000 702200 xent               TSX2  ! X66_ARET

FPT_DUMPFPT
 Sect OctLoc
   1     000   000003 777640   000010 006000   000000 177640   000000 006014    ................
   1     004   000023 777640   000255 006000   000000 177640   000000 006014    ................
   1     010   000000 400400   000000 000000   000000 000000   000000 000000    ................

FDSCGEVT
 Sect OctLoc
   1     014   000002 177640   000000 006000   000000 000000   000000 000000    ................
   1     020   000000 000000   000023 777640   000255 006000   000000 000001    ................
   1     024   000000 000000   000000 000002   000206 006000   000000 101500    ..............A.
   1     030   000000 000000   000000 000000   000000 000001   000000 000012    ................
   1     034   000000 000000   ****** ******   ****** ******   000000 000000    ................
   1     040   000000 000000   000000 000000   000000 000000   000000 006014    ................
   1     044   000000 006014   000000 006014   000000 006014   000000 000000    ................
   1     050   000000 000000   000000 000000                                    ........

FDSDUMP
 Sect OctLoc
   1     052   000006 177640   000023 006000   000000 000000   000000 000000    ................
   1     056   000000 000000   000023 777640   000255 006000   000000 000001    ................
   1     062   000000 000000   000000 000005   000212 006000   000000 101500    ..............A.
   1     066   000000 000000   000000 000000   000000 000001   000000 000012    ................
   1     072   000000 000000   ****** ******   ****** ******   000000 000000    ................
   1     076   000000 000000   000000 000000   000000 000000   000000 006014    ................
   1     102   000000 006014   000000 006014   000000 006014   000000 000000    ................
   1     106   000000 000000   000000 000000                                    ........

PL6.E3A0      #005=XSS$DUMPBYTES File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:14 Page:177  
FDSTITLE
 Sect OctLoc
   1     110   000007 777640   000032 006000   000000 000000   000000 000000    ................
   1     114   000000 000000   000023 777640   000255 006000   000000 000001    ................
   1     120   000000 000000   000000 000005   000046 006000   000000 101500    .........&....A.
   1     124   000000 000000   000000 000000   000000 000001   000000 000012    ................
   1     130   000000 000000   ****** ******   ****** ******   000000 000000    ................
   1     134   000000 000000   000000 000000   000000 000000   000000 006014    ................
   1     140   000000 006014   000000 006014   000000 006014   000000 000000    ................
   1     144   000000 000000   000000 000000                                    ........

FDSTRFNC
 Sect OctLoc
   1     146   000002 177640   000042 006000   000000 000000   000000 000000    ....."..........
   1     152   000000 000000   000023 777640   000255 006000   000000 000001    ................
   1     156   000000 000000   000000 000002   000224 006000   000000 101500    ..............A.
   1     162   000000 000000   000000 000000   000000 000001   000000 000012    ................
   1     166   000000 000000   ****** ******   ****** ******   000000 000000    ................
   1     172   000000 000000   000000 000000   000000 000000   000000 006014    ................
   1     176   000000 006014   000000 006014   000000 006014   000000 000000    ................
   1     202   000000 000000   000000 000000                                    ........

XSS_LOGDCBN
 Sect OctLoc
   1     204   000000 000000                                                    ....

CGVECT_
 Sect OctLoc
   1     206   000000 777640   000303 006000   000000 177640   000000 006014    ................

DBVECT_
 Sect OctLoc
   1     212   000000 777640   000301 006000   000000 177640   000000 006014    ................
   1     216   000000 177640   000000 006014   000000 177640   000000 006014    ................
   1     222   000000 177640   000000 006014                                    ........

TRVECT_
PL6.E3A0      #005=XSS$DUMPBYTES File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:14 Page:178  
 Sect OctLoc
   1     224   000000 777640   000303 006000   000000 177640   000000 006014    ................

TITLE
 Sect OctLoc
   1     230   ****** ******   ****** ******   ****** ******   ****** ******    ................

XSS_SCRITCH
 Sect OctLoc
   1     255   ****** ******   ****** ******   ****** ******   ****** ******    ................

CGFMT
 Sect OctLoc
   2     000   040045 062132   104040 045070   101*** ******                     %2ZD %8A...

CG_DOPN
 Sect OctLoc
   2     003   103107 104143   142117 160156                                    CGDcbOpn

CG_DCLS
 Sect OctLoc
   2     005   103107 104143   142103 154163                                    CGDcbCls

CG_TCON
 Sect OctLoc
   2     007   103107 124162   155103 157156                                    CGTrmCon

CG_TDRQ
 Sect OctLoc
   2     011   103107 124162   155104 122161                                    CGTrmDRq

CG_TDSC
 Sect OctLoc
   2     013   103107 124162   155104 151163                                    CGTrmDis

CG_WARN
 Sect OctLoc
PL6.E3A0      #005=XSS$DUMPBYTES File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:14 Page:179  
   2     015   103107 127162   156102 125107                                    CGWrnBUG

CGW_MEM
 Sect OctLoc
   2     017   103107 127162   156115 145155                                    CGWrnMem

CGW_DSK
 Sect OctLoc
   2     021   103107 127162   156104 163153                                    CGWrnDsk

DBFMT
 Sect OctLoc
   2     023   040045 066110   072040 045070   132131 040045   070132 131040     %6H: %8ZY %8ZY
   2     027   045070 132131   040045 070132   131*** ******                    %8ZY %8ZY...

TIFMT
 Sect OctLoc
   2     032   040045 060124   045123 040045   104075 157045   117075 170045     %0T%S %D=o%O=x%
   2     036   110040 142171   164145 163040   141164 040045   060056 062106    H bytes at %0.2F

TRFMT
 Sect OctLoc
   2     042   040045 062132   104040 045067   101*** ******                     %2ZD %7A...

TIVECT_
 Sect OctLoc
   2     046   000024 177640   000230 006000   000000 777640   000302 006000    ................
   2     052   000000 777640   000302 006000   000000 777640   000302 006000    ................
   2     056   000000 777640   000306 006000                                    ........

ZED
 Sect OctLoc
   2     060   000000 000000                                                    ....

INFNC
 Sect OctLoc
   2     061   124103 157156   111156 144124   103157 156103   156146 124104    TConIndTConCnfTD
PL6.E3A0      #005=XSS$DUMPBYTES File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:14 Page:180  
   2     065   141164 111156   144124 105170   160111 156144   124104 151163    atIndTExpIndTDis
   2     071   111156 144124   103162 145144   151164 124106   154123 164157    IndTCreditTFlSto
   2     075   160124 106154   123164 162164                                    pTFlStrt

OUTFNC
 Sect OctLoc
   2     077   124103 157156   122145 161124   103157 156122   163160 124104    TConReqTConRspTD
   2     103   141164 122145   161124 105170   160122 145161   124104 151163    atReqTExpReqTDis
   2     107   122145 161124   103162 145144   151164 102125   107040 040040    ReqTCreditBUG
   2     113   040102 125107   040040 040040                                     BUG

OTHER
 Sect OctLoc
   2     115   050157 164150   145162 051***                                    (other).

FNCGRP
 Sect OctLoc
   2     117   102125 107101   143104 101143   105101 143111   101143 122101    BUGAcDAcEAcIAcRA
   2     123   143123 103141   104103 157156   103164 107104   141164 105170    cSCaDConCtGDatEx
   2     127   160122 145154   122163 170123   115141 123115   151124 153107    pRelRsxSMaSMiTkG
   2     133   124153 120124   171104 125101   142125 105162   120101 142120    TkPTyDUAbUErPAbP
   2     137   105162 ******                                                    Er..

FNCTYP
 Sect OctLoc
   2     140   102125 107122   145161 111156   144122 163160   103156 146***    BUGReqIndRspCnf.

FNCMAP
 Sect OctLoc
   2     144   000101 201301   401102 202302   402103 203303   403104 204105    .A...B...C...D.E
   2     150   205106 206306   406107 207307   407110 210111   211112 212113    .F...G...H.I.J.K
   2     154   213313 413114   214314 414115   215315 415116   216316 416117    ...L...M...N...O
   2     160   217120 220121   221122 222123   223224 225***                    .P.Q.R.S....

(unnamed)
 Sect OctLoc
   2     163   040040 040040   040123 040040                                         S
PL6.E3A0      #005=XSS$DUMPBYTES File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:14 Page:181  

(unnamed)
 Sect OctLoc
   5     000   000000 177640   000000 006014   000001 577640   000032 206000    ................
   5     004   000014 206000   000000 000000   000001 777640   000003 006000    ................
   5     010   000001 777640   000005 006000   000001 777640   000007 006000    ................
   5     014   000001 777640   000011 006000   000001 777640   000013 006000    ................
   5     020   000001 777640   000017 006000   000001 777640   000021 006000    ................
   5     024   000001 777640   000015 006000   000001 577640   000115 006000    .............M..
   5     030   000001 000000   000014 006000   000146 006000   000110 006000    .........f...H..
   5     034   000000 777640   000060 006000   000052 006000   000003 200000    .....0...*......
      935    10861
      936    10862    1       END XSS$DUMPBYTES;
      937    10863        %EOD;

PL6.E3A0      #005=XSS$DUMPBYTES File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:14 Page:182  
--  Include file information  --

   XU_FORMAT_C.:LIB_E05  is referenced.
   XUF_ENTRY.:LIB_E05  cannot be made into a system file and is referenced.
   XSS_SESSION_M.:XSA1TOU  is referenced.
   XSS_SESSION_E.:XSA1TOU  is referenced.
   XSS_INTERNAL_M.:XSA1TOU  is referenced.
   K_INTERFACE_M.:E05OU  is referenced.
   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure XSS$DUMPBYTES.
PL6.E3A0      #005=XSS$DUMPBYTES File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:14 Page:183  

 **** Variables and constants ****

  ****  Section 001  Data  XSS$DUMPBYTES

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   206-0-0/d VECT        r     1 CGVECT_(0:1)
   212-0-0/d VECT        r     1 DBVECT_(0:4)
    14-0-0/w STRC(1080)  r     1 FDSCGEVT                  52-0-0/w STRC(1080)  r     1 FDSDUMP
   110-0-0/w STRC(1080)  r     1 FDSTITLE                 146-0-0/w STRC(1080)  r     1 FDSTRFNC
     0-0-0/d STRC(432)   r     1 FPT_DUMPFPT              302-0-0/w SBIN        r     1 I
   303-0-0/w SBIN        r     1 SCID                     230-0-0/c STRC(729)   r     1 TITLE
   224-0-0/d VECT        r     1 TRVECT_(0:1)
   301-0-0/w SBIN        r     1 XSS_BASE                 306-0-0/w PTR         r     1 XSS_DAT$
   204-0-0/w SBIN        r     1 XSS_LOGDCBN              255-0-0/c CHAR(80)    r     1 XSS_SCRITCH
   305-0-0/w PTR         r     1 XSS_TOP$                 304-0-0/w PTR         r     1 XSS_VAL$

  ****  Section 002 RoData XSS$DUMPBYTES

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c CHAR(9)     r     1 CGFMT                     21-0-0/c CHAR(8)     r     1 CGW_DSK
    17-0-0/c CHAR(8)     r     1 CGW_MEM                    5-0-0/c CHAR(8)     r     1 CG_DCLS
     3-0-0/c CHAR(8)     r     1 CG_DOPN                    7-0-0/c CHAR(8)     r     1 CG_TCON
    11-0-0/c CHAR(8)     r     1 CG_TDRQ                   13-0-0/c CHAR(8)     r     1 CG_TDSC
    15-0-0/c CHAR(8)     r     1 CG_WARN                   23-0-0/c CHAR(25)    r     1 DBFMT
   117-0-0/c CHAR(66)    r     1 FNCGRP                   144-0-0/c UBIN(9)     r     1 FNCMAP(0:58)
   140-0-0/c CHAR(15)    r     1 FNCTYP                    61-0-0/c CHAR(7)     r     1 INFNC(0:7)
   115-0-0/c CHAR(7)     r     1 OTHER                     77-0-0/c CHAR(7)     r     1 OUTFNC(0:7)
    32-0-0/c CHAR(32)    r     1 TIFMT
    46-0-0/d VECT        r     1 TIVECT_(0:4)
    42-0-0/c CHAR(9)     r     1 TRFMT                     60-0-0/w UBIN        r     1 ZED

  ****  Auto variables  ****

PL6.E3A0      #005=XSS$DUMPBYTES File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:14 Page:184  
  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @DATA_                     3-0-0/w PTR         r     1 @FLAG
     5-0-0/w PTR         r     1 @TITLE_                   *0-0-0/d VECT        r     1 DATA_
    *0-0-0/w SBIN        r     1 FLAG                       6-0-0/w PTR         r     1 GLUE$
    10-0-0/w PTR         r     1 SFPT$                      7-0-0/c CHAR(2)     r     1 SKID
    *0-0-0/d VECT        r     1 TITLE_

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN        r     1 XSS_TRACE

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(144)   r     1 B$CGAURD                   0-0-0/w STRC(72)    r     1 GLUE
     0-0-0N  NULL        r     1 M$DO                       0-0-0/c ACHR        r     1 TBYTES
     0-0-0/c UBIN        r     1 VAL                        0-0-0/d STRC(504)   r     1 XSS$GENERIC


   Procedure XSS$DUMPBYTES requires 262 words for executable code.
   Procedure XSS$DUMPBYTES requires 12 words of local(AUTO) storage.
PL6.E3A0      #005=XSS$DUMPBYTES File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:14 Page:185  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #005=XSS$DUMPBYTES File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:14 Page:186  
          MINI XREF LISTING

B$CGAURD.EVENT
      5590**DCL     10782>>DOCASE
B$CGAURD.INFO
      5591**DCL     10794>>DOCASE
B$CGAURD.STATION
      5590**DCL      5590--REDEF
CGFMT
     10691**DCL     10244--DCLINIT 10246--DCLINIT
CGVECT_
     10703**DCL     10269--DCLINIT 10784<<ASSIGN  10786<<ASSIGN  10788<<ASSIGN  10790<<ASSIGN  10792<<ASSIGN
     10796<<ASSIGN  10798<<ASSIGN  10800<<ASSIGN  10803<<ASSIGN
CGW_DSK
     10699**DCL     10798--ASSIGN
CGW_MEM
     10698**DCL     10796--ASSIGN
CG_DCLS
     10693**DCL     10786--ASSIGN
CG_DOPN
     10692**DCL     10784--ASSIGN
CG_TCON
     10694**DCL     10788--ASSIGN
CG_TDRQ
     10695**DCL     10790--ASSIGN
CG_TDSC
     10696**DCL     10792--ASSIGN
CG_WARN
     10697**DCL     10800--ASSIGN
DATA_
     10685**DCL        14--PROC    10767>>ASSIGN  10823>>ASSIGN  10825>>ASSIGN
DBFMT
     10700**DCL     10358--DCLINIT 10360--DCLINIT
DBVECT_
PL6.E3A0      #005=XSS$DUMPBYTES File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:14 Page:187  
     10705**DCL     10383--DCLINIT 10834<<ASSIGN  10836<<ASSIGN
FDSCGEVT
     10239**DCL     10806<>CALL
FDSCGEVT.DCB#
     10272**DCL     10805<<ASSIGN
FDSDUMP
     10353**DCL     10839<>CALL
FDSDUMP.DCB#
     10386**DCL     10828<<ASSIGN
FDSTITLE
     10467**DCL     10829<>CALL
FDSTITLE.DCB#
     10500**DCL     10827<<ASSIGN
FDSTRFNC
     10581**DCL     10810<>CALL
FDSTRFNC.DCB#
     10614**DCL     10809<<ASSIGN
FLAG
     10684**DCL        14--PROC    10769>>IF      10849--ENTRY   10851--ASSIGN
FNCGRP
     10735**DCL     10854>>CALLBLT
FNCMAP
     10738**DCL     10853>>ASSIGN
FNCTYP
     10737**DCL     10854>>CALLBLT
FPT_DUMPFPT
      5658**DCL     10859<>CALL
FPT_DUMPFPT.BUF_.BOUND
      5658**DCL     10857<<ASSIGN
FPT_DUMPFPT.STATION_
      5660**DCL      5660--REDEF
FPT_DUMPFPT.V
      5661**DCL      5658--DCLINIT
FPT_DUMPFPT.V.DCB#
      5661**DCL     10858<<ASSIGN
FPT_DUMPFPT.V.DVBYTE.VFC#
PL6.E3A0      #005=XSS$DUMPBYTES File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:14 Page:188  
      5667**DCL      5667--REDEF
GLUE.MYSCID
      6694**DCL     10771>>ASSIGN
GLUE.TRNFNC
      6695**DCL     10772>>IF      10773>>ASSIGN  10778>>IF      10779>>ASSIGN
GLUE.YRSCID
      6696**DCL     10777>>ASSIGN
GLUE$
     10718**DCL      5586--IMP-PTR  6687--IMP-PTR 10767<<ASSIGN  10771>>ASSIGN  10772>>IF      10773>>ASSIGN
     10777>>ASSIGN  10778>>IF      10779>>ASSIGN  10782>>DOCASE  10794>>DOCASE
I
     10719**DCL     10708--DCLINIT 10826<<ASSIGN  10832<<DOINDEX 10834>>ASSIGN  10836>>ASSIGN  10853<<ASSIGN
     10854>>CALLBLT 10854>>CALLBLT
INFNC
     10728**DCL     10779--ASSIGN
LOOP
     10831**LABEL   10841--EXIT
M$WRITE
      5503**DCL-ENT 10859--CALL
OTHER
     10734**DCL     10803--ASSIGN
OUTFNC
     10731**DCL     10773--ASSIGN
SCID
     10720**DCL     10704--DCLINIT 10710--DCLINIT 10771<<ASSIGN  10777<<ASSIGN
SFPT$
     10722**DCL      9925--IMP-PTR 10851<<ASSIGN  10852>>CALLBLT 10853>>ASSIGN
SKID
     10721**DCL     10852<<CALLBLT 10854>>CALLBLT
TBYTES
     10715**DCL     10820>>CALLBLT
TIFMT
     10701**DCL     10472--DCLINIT 10474--DCLINIT
TITLE
     10712**DCL     10708--DCLINIT
TITLE.C
PL6.E3A0      #005=XSS$DUMPBYTES File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:14 Page:189  
     10713**DCL     10715--IMP-SIZ 10817<<ASSIGN  10819<<ASSIGN  10820>>CALLBLT 10820>>CALLBLT
TITLE.T
     10714**DCL     10820<<CALLBLT
TITLE_
     10686**DCL        14--PROC    10816--IF      10819>>ASSIGN  10820>>CALLBLT
TIVECT_
     10707**DCL     10497--DCLINIT
TRFMT
     10702**DCL     10586--DCLINIT 10588--DCLINIT
TRVECT_
     10709**DCL     10611--DCLINIT 10768<<ASSIGN  10773<<ASSIGN  10779<<ASSIGN  10781>>IF
VAL
     10723**DCL     10834--ASSIGN
X$FORMAT
     10061**DCL-ENT 10806--CALL    10810--CALL    10829--CALL    10839--CALL
XSS$BLANKIT
     10682**DCL-ENT 10407--DCLINIT
XSS$GENERIC.ERRDEF
      9979**DCL      9999--REDEF
XSS$GENERIC.FNC
      9939**DCL     10853>>ASSIGN
XSS$GENERIC.SCID
      9940**DCL     10852>>CALLBLT
XSS_BASE
     10717**DCL     10706--DCLINIT 10822<<ASSIGN  10842<<ASSIGN  10842>>ASSIGN
XSS_DAT$
     10726**DCL     10708--DCLINIT 10824<<ASSIGN  10826>>ASSIGN
XSS_LOGDCBN
     10689**DCL     10805>>ASSIGN  10809>>ASSIGN  10827>>ASSIGN  10828>>ASSIGN  10858>>ASSIGN
XSS_SCRITCH
     10716**DCL      5659--DCLINIT  5660--DCLINIT 10257--DCLINIT 10259--DCLINIT 10371--DCLINIT 10373--DCLINIT
     10485--DCLINIT 10487--DCLINIT 10599--DCLINIT 10601--DCLINIT 10854<<CALLBLT
XSS_TOP$
     10725**DCL     10825<<ASSIGN  10826>>ASSIGN  10833>>IF      10840>>IF
XSS_TRACE
     10690**DCL     10762>>IF      10765>>IF      10813>>IF
PL6.E3A0      #005=XSS$DUMPBYTES File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:14 Page:190  
XSS_VAL$
     10724**DCL     10723--IMP-PTR 10823<<ASSIGN  10824>>ASSIGN  10825>>ASSIGN  10833>>IF      10834>>ASSIGN
     10837<<ASSIGN  10837>>ASSIGN  10840>>IF
ZED
     10727**DCL     10836--ASSIGN
PL6.E3A0      #005=XSS$DUMPBYTES File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:14 Page:191  
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #005=XSS$DUMPBYTES File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:14 Page:192  
              MINI UREF LISTING

M$ACCT    5519**DCL-ENT
M$ACTIVATE    5522**DCL-ENT
M$ALIB    5515**DCL-ENT
M$ASUSER    5517**DCL-ENT
M$ATTACH    5524**DCL-ENT
M$BADPP    5542**DCL-ENT
M$CGCTL    5523**DCL-ENT
M$CGINFO    5523**DCL-ENT
M$CHECK    5504**DCL-ENT
M$CHGUNIT    5562**DCL-ENT
M$CLOSE    5502**DCL-ENT
M$CLRSTK    5560**DCL-ENT
M$CMDVAR    5571**DCL-ENT
M$CONFIG    5532**DCL-ENT
M$CORRES    5507**DCL-ENT
M$CPEXIT    5516**DCL-ENT
M$CVM    5540**DCL-ENT
M$CVOL    5505**DCL-ENT
M$DCLFLD    5532**DCL-ENT
M$DEACTIVATE    5522**DCL-ENT
M$DELREC    5504**DCL-ENT
M$DEQ    5569**DCL-ENT
M$DETACH    5524**DCL-ENT
M$DEVICE    5506**DCL-ENT
M$DISPLAY    5569**DCL-ENT
M$DISPRES    5509**DCL-ENT
M$DLIB    5515**DCL-ENT
M$DO   10711**DCL
M$DRIBBLE    5532**DCL-ENT
M$DRTN    5560**DCL-ENT
M$DSUSER    5517**DCL-ENT
M$ENQ    5568**DCL-ENT
PL6.E3A0      #005=XSS$DUMPBYTES File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:14 Page:193  
M$EOM    5527**DCL-ENT
M$ERASE    5533**DCL-ENT
M$ERR    5514**DCL-ENT
M$ERRMSG    5565**DCL-ENT
M$EVENT    5557**DCL-ENT
M$EXHUME    5566**DCL-ENT
M$EXIT    5514**DCL-ENT
M$EXTEND    5506**DCL-ENT
M$FDP    5538**DCL-ENT
M$FDS    5537**DCL-ENT
M$FEBOOT    5530**DCL-ENT
M$FECTL    5531**DCL-ENT
M$FEDUMP    5530**DCL-ENT
M$FID    5565**DCL-ENT
M$FINDPROC    5519**DCL-ENT
M$FSUSER    5517**DCL-ENT
M$FVP    5539**DCL-ENT
M$FWCG    5523**DCL-ENT
M$GBPL    5543**DCL-ENT
M$GDDL    5539**DCL-ENT
M$GDP    5538**DCL-ENT
M$GDS    5537**DCL-ENT
M$GETDCB    5508**DCL-ENT
M$GETMOUSE    5548**DCL-ENT
M$GETPM    5549**DCL-ENT
M$GJOB    5567**DCL-ENT
M$GLINEATTR    5527**DCL-ENT
M$GOODPP    5542**DCL-ENT
M$GPLATEN    5535**DCL-ENT
M$GPROMPT    5534**DCL-ENT
M$GTRMATTR    5528**DCL-ENT
M$GTRMCTL    5526**DCL-ENT
M$GTRMTAB    5529**DCL-ENT
M$GVP    5538**DCL-ENT
M$HELP    5565**DCL-ENT
M$INT    5557**DCL-ENT
PL6.E3A0      #005=XSS$DUMPBYTES File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:14 Page:194  
M$INTRTN    5518**DCL-ENT
M$IOQ    5553**DCL-ENT
M$JOBSTATS    5567**DCL-ENT
M$KEYIN    5507**DCL-ENT
M$LDEV    5502**DCL-ENT
M$LDTRC    5515**DCL-ENT
M$LIMIT    5508**DCL-ENT
M$LINES    5507**DCL-ENT
M$LINK    5514**DCL-ENT
M$MADMUCK    5510**DCL-ENT
M$MAKUSER    5541**DCL-ENT
M$MBS    5509**DCL-ENT
M$MDFFLD    5533**DCL-ENT
M$MERC    5558**DCL-ENT
M$MERCS    5559**DCL-ENT
M$MIRROR    5553**DCL-ENT
M$MONINFO    5570**DCL-ENT
M$MPL    5543**DCL-ENT
M$NODEINFO    5534**DCL-ENT
M$NXTUSR    5568**DCL-ENT
M$OCMSG    5566**DCL-ENT
M$OLAY    5514**DCL-ENT
M$OPEN    5502**DCL-ENT
M$PAS    5543**DCL-ENT
M$PATHCON    5566**DCL-ENT
M$PDS    5537**DCL-ENT
M$PFIL    5504**DCL-ENT
M$PLATEN    5528**DCL-ENT
M$PRECORD    5506**DCL-ENT
M$PROCNAME    5519**DCL-ENT
M$PROFILE    5530**DCL-ENT
M$PROMPT    5526**DCL-ENT
M$RACST    5510**DCL-ENT
M$RDSYSLOG    5551**DCL-ENT
M$READ    5503**DCL-ENT
M$RELDCB    5508**DCL-ENT
PL6.E3A0      #005=XSS$DUMPBYTES File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:14 Page:195  
M$RELRES    5509**DCL-ENT
M$RELSTARF    5511**DCL-ENT
M$REM    5511**DCL-ENT
M$RENV    5558**DCL-ENT
M$REQUIRE    5510**DCL-ENT
M$RETRY    5559**DCL-ENT
M$RETRYS    5559**DCL-ENT
M$REW    5505**DCL-ENT
M$RLSFLD    5533**DCL-ENT
M$RPRIV    5561**DCL-ENT
M$RSPP    5540**DCL-ENT
M$RSWITCH    5562**DCL-ENT
M$RUE    5568**DCL-ENT
M$SAD    5541**DCL-ENT
M$SAVE    5517**DCL-ENT
M$SCON    5518**DCL-ENT
M$SCREECH    5516**DCL-ENT
M$SENV    5558**DCL-ENT
M$SETFMA    5502**DCL-ENT
M$SETFP    5531**DCL-ENT
M$SINPUT    5529**DCL-ENT
M$SLCFLD    5534**DCL-ENT
M$SMOUSE    5548**DCL-ENT
M$SMPRT    5540**DCL-ENT
M$SPRIV    5561**DCL-ENT
M$SSC    5541**DCL-ENT
M$SSWITCH    5561**DCL-ENT
M$STATE    5570**DCL-ENT
M$STD    5542**DCL-ENT
M$STIMER    5556**DCL-ENT
M$STLPP    5539**DCL-ENT
M$STRAP    5556**DCL-ENT
M$STRMATTR    5528**DCL-ENT
M$STRMCTL    5526**DCL-ENT
M$STRMTAB    5529**DCL-ENT
M$SYMBIO    5567**DCL-ENT
PL6.E3A0      #005=XSS$DUMPBYTES File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:14 Page:196  
M$SYSCON    5553**DCL-ENT
M$SYSID    5571**DCL-ENT
M$TDCLOSE    5552**DCL-ENT
M$TDIO    5552**DCL-ENT
M$TDOPEN    5551**DCL-ENT
M$TDREQCPU    5552**DCL-ENT
M$TEMPWROC    5546**DCL-ENT
M$TIME    5569**DCL-ENT
M$TRAP    5556**DCL-ENT
M$TRMISC    5531**DCL-ENT
M$TRMPRG    5527**DCL-ENT
M$TRTN    5560**DCL-ENT
M$TRUNC    5503**DCL-ENT
M$TTIMER    5556**DCL-ENT
M$UC    5526**DCL
M$UMPL    5543**DCL-ENT
M$UNFID    5565**DCL-ENT
M$UNLATCH    5522**DCL-ENT
M$UNSHARE    5519**DCL-ENT
M$USRFIELD    5562**DCL-ENT
M$VIRTUAL    5537**DCL-ENT
M$WAIT    5560**DCL-ENT
M$WEOF    5505**DCL-ENT
M$WRSYSLOG    5551**DCL-ENT
M$XCON    5557**DCL-ENT
M$XCONRTN    5518**DCL-ENT
M$XEQTIME    5570**DCL-ENT
M$XFLUSH    5511**DCL-ENT
M$XMOUSE    5548**DCL-ENT
M$XXX    5514**DCL-ENT
M$YC    5516**DCL-ENT
X$WRITE   10060**DCL-ENT
XSS$DUMPBYTES      14**PROC
XSS$DUMPFPT   10849**ENTRY
XSS_ITRACE   10687**DCL
XSS_OTRACE   10688**DCL

PL6.E3A0      #006=XSS$BLANKIT File=XSS$DATA.:XSA1TSI                            WED 10/01/97 12:15 Page:197  
      938        1        /*T***********************************************************/
      939        2        /*T*                                                         */
      940        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      941        4        /*T*                                                         */
      942        5        /*T***********************************************************/
      943        6        /*F*    NAME:   XSS$BLANKIT
      944        7                DESCRIPTION:
      945        8                    This is an internal routine for XSS$DUMPBYTES.  It
      946        9                    cleans up after the formatter.
      947       10        */
      948       11        XSS$BLANKIT: PROC;
      949       12
      950       13    1       DCL XSS_SCRITCH CHAR(80) SYMREF;
      951       14    1       DCL XSS_BASE SBIN SYMREF;
      952       15    1       DCL XSS_VAL$ PTR SYMREF;
      953       16    1       DCL XSS_TOP$ PTR SYMREF;
      954       17    1       DCL XSS_DAT$ PTR SYMREF;
      955       18
      956       19    1       DCL DIFF SBIN;
      957       20
      958       21    1       IF XSS_VAL$ <= XSS_TOP$ THEN
      959       22    1           RETURN;
      960       23    1       DIFF = POFFC( XSS_TOP$, PINCRC( XSS_DAT$, XSS_BASE));
      961       24    1       DIFF = ( ( DIFF - 1) / 4) + 10 + 2 * DIFF;
      962       25    1       CALL INSERT( XSS_SCRITCH, DIFF, LENGTHC( XSS_SCRITCH) - DIFF, ' ');
      963       26    1       RETURN;
      964       27
      965       28    1       END XSS$BLANKIT;
      966       29        %EOD;

PL6.E3A0      #006=XSS$BLANKIT File=XSS$DATA.:XSA1TSI                            WED 10/01/97 12:15 Page:198  
      No diagnostics issued in procedure XSS$BLANKIT.

   Procedure XSS$BLANKIT requires 29 words for executable code.
   Procedure XSS$BLANKIT requires 6 words of local(AUTO) storage.

PL6.E3A0      #006=XSS$BLANKIT File=XSS$DATA.:XSA1TSI                            WED 10/01/97 12:15 Page:199  

 Object Unit name= XSS$BLANKIT                                File name= XSS$DATA.:XSA1TOU
 UTS= OCT 01 '97 12:15:28.40 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none    29     35  XSS$BLANKIT
    1  RoData even  none     1      1  XSS$BLANKIT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes            yes      Std        0  XSS$BLANKIT

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_0
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     XSS_SCRITCH                           XSS_BASE                              XSS_VAL$
     XSS_TOP$                              XSS_DAT$
PL6.E3A0      #006=XSS$BLANKIT File=XSS$DATA.:XSA1TSI                            WED 10/01/97 12:15 Page:200  


      938        1        /*T***********************************************************/
      939        2        /*T*                                                         */
      940        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      941        4        /*T*                                                         */
      942        5        /*T***********************************************************/
      943        6        /*F*    NAME:   XSS$BLANKIT
      944        7                DESCRIPTION:
      945        8                    This is an internal routine for XSS$DUMPBYTES.  It
      946        9                    cleans up after the formatter.
      947       10        */
      948       11        XSS$BLANKIT: PROC;

     11  0 000000   000000 700200 xent  XSS$BLANKIT  TSX0  ! X66_AUTO_0
         0 000001   000006 000000                    ZERO    6,0

      949       12
      950       13    1       DCL XSS_SCRITCH CHAR(80) SYMREF;
      951       14    1       DCL XSS_BASE SBIN SYMREF;
      952       15    1       DCL XSS_VAL$ PTR SYMREF;
      953       16    1       DCL XSS_TOP$ PTR SYMREF;
      954       17    1       DCL XSS_DAT$ PTR SYMREF;
      955       18
      956       19    1       DCL DIFF SBIN;
      957       20
      958       21    1       IF XSS_VAL$ <= XSS_TOP$ THEN

     21  0 000002   000000 236000 xsym               LDQ     XSS_TOP$
         0 000003   000000 116000 xsym               CMPQ    XSS_VAL$
         0 000004   000006 602000 0                  TNC     s:23

      959       22    1           RETURN;

     22  0 000005   000000 702200 xent               TSX2  ! X66_ARET

      960       23    1       DIFF = POFFC( XSS_TOP$, PINCRC( XSS_DAT$, XSS_BASE));

PL6.E3A0      #006=XSS$BLANKIT File=XSS$DATA.:XSA1TSI                            WED 10/01/97 12:15 Page:201  
     23  0 000006   000000 236000 xsym               LDQ     XSS_BASE
         0 000007   000020 736000                    QLS     16
         0 000010   000000 036000 xsym               ADLQ    XSS_DAT$
         0 000011   000020 772000                    QRL     16
         0 000012   200004 756100                    STQ     DIFF+1,,AUTO
         0 000013   000000 236000 xsym               LDQ     XSS_TOP$
         0 000014   000020 772000                    QRL     16
         0 000015   200004 136100                    SBLQ    DIFF+1,,AUTO
         0 000016   200003 756100                    STQ     DIFF,,AUTO

      961       24    1       DIFF = ( ( DIFF - 1) / 4) + 10 + 2 * DIFF;

     24  0 000017   000001 136007                    SBLQ    1,DL
         0 000020   000004 506007                    DIV     4,DL
         0 000021   200004 756100                    STQ     DIFF+1,,AUTO
         0 000022   200003 236100                    LDQ     DIFF,,AUTO
         0 000023   000001 736000                    QLS     1
         0 000024   200004 036100                    ADLQ    DIFF+1,,AUTO
         0 000025   000012 036007                    ADLQ    10,DL
         0 000026   200003 756100                    STQ     DIFF,,AUTO

      962       25    1       CALL INSERT( XSS_SCRITCH, DIFF, LENGTHC( XSS_SCRITCH) - DIFF, ' ');

     25  0 000027   777657 620006                    EAX0    -81,QL
         0 000030   777777 660003                    ERX0    -1,DU
         0 000031   040046 100400                    MLR     fill='040'O
         0 000032   000000 000001 1                  ADSC9   0                        cn=0,n=1
         0 000033   000000 000010 xsym               ADSC9   XSS_SCRITCH,Q            cn=0,n=*X0

      963       26    1       RETURN;

     26  0 000034   000000 702200 xent               TSX2  ! X66_ARET

(unnamed)
 Sect OctLoc
   1     000   040040 040040
      964       27
PL6.E3A0      #006=XSS$BLANKIT File=XSS$DATA.:XSA1TSI                            WED 10/01/97 12:15 Page:202  
      965       28    1       END XSS$BLANKIT;
      966       29        %EOD;

PL6.E3A0      #006=XSS$BLANKIT File=XSS$DATA.:XSA1TSI                            WED 10/01/97 12:15 Page:203  
      No diagnostics issued in procedure XSS$BLANKIT.
PL6.E3A0      #006=XSS$BLANKIT File=XSS$DATA.:XSA1TSI                            WED 10/01/97 12:15 Page:204  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w SBIN        r     1 DIFF

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN        r     1 XSS_BASE                   0-0-0/w PTR         r     1 XSS_DAT$
     0-0-0/c CHAR(80)    r     1 XSS_SCRITCH                0-0-0/w PTR         r     1 XSS_TOP$
     0-0-0/w PTR         r     1 XSS_VAL$


   Procedure XSS$BLANKIT requires 29 words for executable code.
   Procedure XSS$BLANKIT requires 6 words of local(AUTO) storage.
PL6.E3A0      #006=XSS$BLANKIT File=XSS$DATA.:XSA1TSI                            WED 10/01/97 12:15 Page:205  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #006=XSS$BLANKIT File=XSS$DATA.:XSA1TSI                            WED 10/01/97 12:15 Page:206  
          MINI XREF LISTING

DIFF
        19**DCL        23<<ASSIGN     24<<ASSIGN     24>>ASSIGN     24>>ASSIGN     25>>CALLBLT    25>>CALLBLT
XSS_BASE
        14**DCL        23>>ASSIGN
XSS_DAT$
        17**DCL        23>>ASSIGN
XSS_SCRITCH
        13**DCL        25<<CALLBLT    25--CALLBLT
XSS_TOP$
        16**DCL        21>>IF         23>>ASSIGN
XSS_VAL$
        15**DCL        21>>IF
PL6.E3A0      #006=XSS$BLANKIT File=XSS$DATA.:XSA1TSI                            WED 10/01/97 12:15 Page:207  
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #006=XSS$BLANKIT File=XSS$DATA.:XSA1TSI                            WED 10/01/97 12:15 Page:208  
              MINI UREF LISTING

XSS$BLANKIT      11**PROC

PL6.E3A0      #007=XSS$SCREECH File=XSS$DATA.:XSA1TSI                            WED 10/01/97 12:15 Page:209  
      967        1        /*T***********************************************************/
      968        2        /*T*                                                         */
      969        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      970        4        /*T*                                                         */
      971        5        /*T***********************************************************/
      972        6        /*F*
      973        7                NAME:   XSS$SCREECH
      974        8                PURPOSE:
      975        9                    This module is called from various places in the ISO layers
      976       10                    when an irrecoverable error is discovered.
      977       11                DESCRIPTION:
      978       12                    The message associated with the indicated error code is displayed,
      979       13                    and then if the error severity is nonzero an M$ERR is issued.
      980       14        */
      981       15        XSS$SCREECH: PROC( PARM1);
      982       16        %INCLUDE CP_6;
      983     5575            %FPT_ERRMSG( CODE=ERRCODE, BUF=XSS_SCRATCH, OUTDCB1=M$DO);
      984     5602            %VLP_ERRCODE( FPTN=ERRCODE, STCLASS=STATIC);
      985     5647            %VLP_ERRCODE( FPTN=PARM1, STCLASS="");
      986     5692
      987     5693    1       DCL M$DO DCB;
      988     5694
      989     5695    1       DCL XSS_LOGDCBN SBIN SYMREF;
      990     5696    1       DCL XSS_SCRATCH CHAR(120) STATIC SYMDEF;
      991     5697
      992     5698    1       ERRCODE = PARM1;
      993     5699    1       FPT_ERRMSG.V.OUTDCB2# = XSS_LOGDCBN;
      994     5700    1       CALL M$ERRMSG( FPT_ERRMSG);
      995     5701    1       IF ERRCODE.SEV > 0 THEN
      996     5702    1           CALL M$ERR;
      997     5703    1       CALL M$EXIT;
      998     5704
      999     5705    1       END XSS$SCREECH;
     1000     5706        %EOD;

PL6.E3A0      #007=XSS$SCREECH File=XSS$DATA.:XSA1TSI                            WED 10/01/97 12:15 Page:210  
--  Include file information  --

   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure XSS$SCREECH.

   Procedure XSS$SCREECH requires 18 words for executable code.
   Procedure XSS$SCREECH requires 4 words of local(AUTO) storage.

PL6.E3A0      #007=XSS$SCREECH File=XSS$DATA.:XSA1TSI                            WED 10/01/97 12:15 Page:211  

 Object Unit name= XSS$SCREECH                                File name= XSS$DATA.:XSA1TOU
 UTS= OCT 01 '97 12:15:31.88 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none    57     71  XSS$SCREECH
    2   DCB   even  none     0      0  M$DO
    3   Proc  even  none    18     22  XSS$SCREECH

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     3      0   yes            yes      Std        1  XSS$SCREECH

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
    1     33  XSS_SCRATCH

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_1
                       nStd      0 X66_ARET
PL6.E3A0      #007=XSS$SCREECH File=XSS$DATA.:XSA1TSI                            WED 10/01/97 12:15 Page:212  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  M$DO                                  XSS_LOGDCBN

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #007=XSS$SCREECH File=XSS$DATA.:XSA1TSI                            WED 10/01/97 12:15 Page:213  


      967        1        /*T***********************************************************/
      968        2        /*T*                                                         */
      969        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      970        4        /*T*                                                         */
      971        5        /*T***********************************************************/
      972        6        /*F*
      973        7                NAME:   XSS$SCREECH
      974        8                PURPOSE:
      975        9                    This module is called from various places in the ISO layers
      976       10                    when an irrecoverable error is discovered.
      977       11                DESCRIPTION:
      978       12                    The message associated with the indicated error code is displayed,
      979       13                    and then if the error severity is nonzero an M$ERR is issued.
      980       14        */
      981       15        XSS$SCREECH: PROC( PARM1);

     15  3 000000   000000 700200 xent  XSS$SCREECH  TSX0  ! X66_AUTO_1
         3 000001   000004 000001                    ZERO    4,1

      982       16        %INCLUDE CP_6;
      983     5575            %FPT_ERRMSG( CODE=ERRCODE, BUF=XSS_SCRATCH, OUTDCB1=M$DO);
      984     5602            %VLP_ERRCODE( FPTN=ERRCODE, STCLASS=STATIC);
      985     5647            %VLP_ERRCODE( FPTN=PARM1, STCLASS="");
      986     5692
      987     5693    1       DCL M$DO DCB;
      988     5694
      989     5695    1       DCL XSS_LOGDCBN SBIN SYMREF;
      990     5696    1       DCL XSS_SCRATCH CHAR(120) STATIC SYMDEF;
      991     5697
      992     5698    1       ERRCODE = PARM1;

   5698  3 000002   200003 470500                    LDP0    @PARM1,,AUTO
         3 000003   000000 236100                    LDQ     0,,PR0
         3 000004   000032 756000 1                  STQ     ERRCODE

      993     5699    1       FPT_ERRMSG.V.OUTDCB2# = XSS_LOGDCBN;
PL6.E3A0      #007=XSS$SCREECH File=XSS$DATA.:XSA1TSI                            WED 10/01/97 12:15 Page:214  

   5699  3 000005   000000 720000 xsym               LXL0    XSS_LOGDCBN
         3 000006   000027 740000 1                  STX0    FPT_ERRMSG+23

      994     5700    1       CALL M$ERRMSG( FPT_ERRMSG);

   5700  3 000007   000000 630400 1                  EPPR0   FPT_ERRMSG
         3 000010   020000 713400                    CLIMB   8192
         3 000011   405000 401760                    pmme    nvectors=11

      995     5701    1       IF ERRCODE.SEV > 0 THEN

   5701  3 000012   000032 236000 1                  LDQ     ERRCODE
         3 000013   000007 316007                    CANQ    7,DL
         3 000014   000017 600000 3                  TZE     s:5703

      996     5702    1           CALL M$ERR;

   5702  3 000015   000002 713400                    CLIMB   err
         3 000016   000000 401760                    pmme    nvectors=0

      997     5703    1       CALL M$EXIT;

   5703  3 000017   000001 713400                    CLIMB   exit
         3 000020   000000 401760                    pmme    nvectors=0

      998     5704
      999     5705    1       END XSS$SCREECH;

   5705  3 000021   000000 702200 xent               TSX2  ! X66_ARET

FPT_ERRMSG
 Sect OctLoc
   1     000   000003 777640   000026 006000   000000 777640   000032 006000    ................
   1     004   000035 777640   000033 006000   000000 177640   000000 006014    ................
   1     010   000000 177640   000000 006014   000000 177640   000000 006014    ................
   1     024*  000000 177640   000000 006014   000000 000000   000000 000000    ................
PL6.E3A0      #007=XSS$SCREECH File=XSS$DATA.:XSA1TSI                            WED 10/01/97 12:15 Page:215  
   1     030   375000 030001   040000 000000                                    .... ...

ERRCODE
 Sect OctLoc
   1     032   000000 000000                                                    ....

XSS_SCRATCH
 Sect OctLoc
   1     033   ****** ******   ****** ******   ****** ******   ****** ******    ................
     1000     5706        %EOD;

PL6.E3A0      #007=XSS$SCREECH File=XSS$DATA.:XSA1TSI                            WED 10/01/97 12:15 Page:216  
--  Include file information  --

   CP_6_C.:LIB_E05  is referenced.
   CP_6.:LIB_E05  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure XSS$SCREECH.
PL6.E3A0      #007=XSS$SCREECH File=XSS$DATA.:XSA1TSI                            WED 10/01/97 12:15 Page:217  

 **** Variables and constants ****

  ****  Section 001  Data  XSS$SCREECH

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    32-0-0/w STRC        r     1 ERRCODE                    0-0-0/d STRC(936)   r     1 FPT_ERRMSG
    33-0-0/c CHAR(120)   r     1 XSS_SCRATCH

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @PARM1                    *0-0-0/w STRC        r     1 PARM1

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN        r     1 XSS_LOGDCBN

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0N  NULL        r     1 M$DO


   Procedure XSS$SCREECH requires 18 words for executable code.
   Procedure XSS$SCREECH requires 4 words of local(AUTO) storage.
PL6.E3A0      #007=XSS$SCREECH File=XSS$DATA.:XSA1TSI                            WED 10/01/97 12:15 Page:218  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #007=XSS$SCREECH File=XSS$DATA.:XSA1TSI                            WED 10/01/97 12:15 Page:219  
          MINI XREF LISTING

ERRCODE
      5614**DCL      5586--DCLINIT  5698<<ASSIGN
ERRCODE.SEV
      5644**DCL      5701>>IF
FPT_ERRMSG
      5586**DCL      5700<>CALL
FPT_ERRMSG.V
      5590**DCL      5586--DCLINIT
FPT_ERRMSG.V.OUTDCB2#
      5591**DCL      5699<<ASSIGN
M$ERR
      5515**DCL-ENT  5702--CALL
M$ERRMSG
      5566**DCL-ENT  5700--CALL
M$EXIT
      5515**DCL-ENT  5703--CALL
PARM1
      5659**DCL        15--PROC     5698>>ASSIGN
XSS_LOGDCBN
      5695**DCL      5699>>ASSIGN
XSS_SCRATCH
      5696**DCL      5587--DCLINIT
PL6.E3A0      #007=XSS$SCREECH File=XSS$DATA.:XSA1TSI                            WED 10/01/97 12:15 Page:220  
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #007=XSS$SCREECH File=XSS$DATA.:XSA1TSI                            WED 10/01/97 12:15 Page:221  
              MINI UREF LISTING

M$ACCT    5520**DCL-ENT
M$ACTIVATE    5523**DCL-ENT
M$ALIB    5516**DCL-ENT
M$ASUSER    5518**DCL-ENT
M$ATTACH    5525**DCL-ENT
M$BADPP    5543**DCL-ENT
M$CGCTL    5524**DCL-ENT
M$CGINFO    5524**DCL-ENT
M$CHECK    5505**DCL-ENT
M$CHGUNIT    5563**DCL-ENT
M$CLOSE    5503**DCL-ENT
M$CLRSTK    5561**DCL-ENT
M$CMDVAR    5572**DCL-ENT
M$CONFIG    5533**DCL-ENT
M$CORRES    5508**DCL-ENT
M$CPEXIT    5517**DCL-ENT
M$CVM    5541**DCL-ENT
M$CVOL    5506**DCL-ENT
M$DCLFLD    5533**DCL-ENT
M$DEACTIVATE    5523**DCL-ENT
M$DELREC    5505**DCL-ENT
M$DEQ    5570**DCL-ENT
M$DETACH    5525**DCL-ENT
M$DEVICE    5507**DCL-ENT
M$DISPLAY    5570**DCL-ENT
M$DISPRES    5510**DCL-ENT
M$DLIB    5516**DCL-ENT
M$DO    5693**DCL
M$DRIBBLE    5533**DCL-ENT
M$DRTN    5561**DCL-ENT
M$DSUSER    5518**DCL-ENT
M$ENQ    5569**DCL-ENT
PL6.E3A0      #007=XSS$SCREECH File=XSS$DATA.:XSA1TSI                            WED 10/01/97 12:15 Page:222  
M$EOM    5528**DCL-ENT
M$ERASE    5534**DCL-ENT
M$EVENT    5558**DCL-ENT
M$EXHUME    5567**DCL-ENT
M$EXTEND    5507**DCL-ENT
M$FDP    5539**DCL-ENT
M$FDS    5538**DCL-ENT
M$FEBOOT    5531**DCL-ENT
M$FECTL    5532**DCL-ENT
M$FEDUMP    5531**DCL-ENT
M$FID    5566**DCL-ENT
M$FINDPROC    5520**DCL-ENT
M$FSUSER    5518**DCL-ENT
M$FVP    5540**DCL-ENT
M$FWCG    5524**DCL-ENT
M$GBPL    5544**DCL-ENT
M$GDDL    5540**DCL-ENT
M$GDP    5539**DCL-ENT
M$GDS    5538**DCL-ENT
M$GETDCB    5509**DCL-ENT
M$GETMOUSE    5549**DCL-ENT
M$GETPM    5550**DCL-ENT
M$GJOB    5568**DCL-ENT
M$GLINEATTR    5528**DCL-ENT
M$GOODPP    5543**DCL-ENT
M$GPLATEN    5536**DCL-ENT
M$GPROMPT    5535**DCL-ENT
M$GTRMATTR    5529**DCL-ENT
M$GTRMCTL    5527**DCL-ENT
M$GTRMTAB    5530**DCL-ENT
M$GVP    5539**DCL-ENT
M$HELP    5566**DCL-ENT
M$INT    5558**DCL-ENT
M$INTRTN    5519**DCL-ENT
M$IOQ    5554**DCL-ENT
M$JOBSTATS    5568**DCL-ENT
PL6.E3A0      #007=XSS$SCREECH File=XSS$DATA.:XSA1TSI                            WED 10/01/97 12:15 Page:223  
M$KEYIN    5508**DCL-ENT
M$LDEV    5503**DCL-ENT
M$LDTRC    5516**DCL-ENT
M$LIMIT    5509**DCL-ENT
M$LINES    5508**DCL-ENT
M$LINK    5515**DCL-ENT
M$MADMUCK    5511**DCL-ENT
M$MAKUSER    5542**DCL-ENT
M$MBS    5510**DCL-ENT
M$MDFFLD    5534**DCL-ENT
M$MERC    5559**DCL-ENT
M$MERCS    5560**DCL-ENT
M$MIRROR    5554**DCL-ENT
M$MONINFO    5571**DCL-ENT
M$MPL    5544**DCL-ENT
M$NODEINFO    5535**DCL-ENT
M$NXTUSR    5569**DCL-ENT
M$OCMSG    5567**DCL-ENT
M$OLAY    5515**DCL-ENT
M$OPEN    5503**DCL-ENT
M$PAS    5544**DCL-ENT
M$PATHCON    5567**DCL-ENT
M$PDS    5538**DCL-ENT
M$PFIL    5505**DCL-ENT
M$PLATEN    5529**DCL-ENT
M$PRECORD    5507**DCL-ENT
M$PROCNAME    5520**DCL-ENT
M$PROFILE    5531**DCL-ENT
M$PROMPT    5527**DCL-ENT
M$RACST    5511**DCL-ENT
M$RDSYSLOG    5552**DCL-ENT
M$READ    5504**DCL-ENT
M$RELDCB    5509**DCL-ENT
M$RELRES    5510**DCL-ENT
M$RELSTARF    5512**DCL-ENT
M$REM    5512**DCL-ENT
PL6.E3A0      #007=XSS$SCREECH File=XSS$DATA.:XSA1TSI                            WED 10/01/97 12:15 Page:224  
M$RENV    5559**DCL-ENT
M$REQUIRE    5511**DCL-ENT
M$RETRY    5560**DCL-ENT
M$RETRYS    5560**DCL-ENT
M$REW    5506**DCL-ENT
M$RLSFLD    5534**DCL-ENT
M$RPRIV    5562**DCL-ENT
M$RSPP    5541**DCL-ENT
M$RSWITCH    5563**DCL-ENT
M$RUE    5569**DCL-ENT
M$SAD    5542**DCL-ENT
M$SAVE    5518**DCL-ENT
M$SCON    5519**DCL-ENT
M$SCREECH    5517**DCL-ENT
M$SENV    5559**DCL-ENT
M$SETFMA    5503**DCL-ENT
M$SETFP    5532**DCL-ENT
M$SINPUT    5530**DCL-ENT
M$SLCFLD    5535**DCL-ENT
M$SMOUSE    5549**DCL-ENT
M$SMPRT    5541**DCL-ENT
M$SPRIV    5562**DCL-ENT
M$SSC    5542**DCL-ENT
M$SSWITCH    5562**DCL-ENT
M$STATE    5571**DCL-ENT
M$STD    5543**DCL-ENT
M$STIMER    5557**DCL-ENT
M$STLPP    5540**DCL-ENT
M$STRAP    5557**DCL-ENT
M$STRMATTR    5529**DCL-ENT
M$STRMCTL    5527**DCL-ENT
M$STRMTAB    5530**DCL-ENT
M$SYMBIO    5568**DCL-ENT
M$SYSCON    5554**DCL-ENT
M$SYSID    5572**DCL-ENT
M$TDCLOSE    5553**DCL-ENT
PL6.E3A0      #007=XSS$SCREECH File=XSS$DATA.:XSA1TSI                            WED 10/01/97 12:15 Page:225  
M$TDIO    5553**DCL-ENT
M$TDOPEN    5552**DCL-ENT
M$TDREQCPU    5553**DCL-ENT
M$TEMPWROC    5547**DCL-ENT
M$TIME    5570**DCL-ENT
M$TRAP    5557**DCL-ENT
M$TRMISC    5532**DCL-ENT
M$TRMPRG    5528**DCL-ENT
M$TRTN    5561**DCL-ENT
M$TRUNC    5504**DCL-ENT
M$TTIMER    5557**DCL-ENT
M$UC    5527**DCL
M$UMPL    5544**DCL-ENT
M$UNFID    5566**DCL-ENT
M$UNLATCH    5523**DCL-ENT
M$UNSHARE    5520**DCL-ENT
M$USRFIELD    5563**DCL-ENT
M$VIRTUAL    5538**DCL-ENT
M$WAIT    5561**DCL-ENT
M$WEOF    5506**DCL-ENT
M$WRITE    5504**DCL-ENT
M$WRSYSLOG    5552**DCL-ENT
M$XCON    5558**DCL-ENT
M$XCONRTN    5519**DCL-ENT
M$XEQTIME    5571**DCL-ENT
M$XFLUSH    5512**DCL-ENT
M$XMOUSE    5549**DCL-ENT
M$XXX    5515**DCL-ENT
M$YC    5517**DCL-ENT
XSS$SCREECH      15**PROC

PL6.E3A0      #008=XSS$TXTC2NSAP File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:15 Page:226  
     1001        1        /*T***********************************************************/
     1002        2        /*T*                                                         */
     1003        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1004        4        /*T*                                                         */
     1005        5        /*T***********************************************************/
     1006        6        /*X* DDA */
     1007        7        /*F*
     1008        8                NAME:   XSS$TXTC2NSAP
     1009        9                NAME:   XSS$NSAP2TXTC
     1010       10                PURPOSE:
     1011       11                    These routines convert between a TEXTC hex digit character
     1012       12                    representation of a Network address, and a K$NSAP structure,
     1013       13                    and vice-versa.
     1014       14                DESCRIPTION:
     1015       15                    Self-evident.
     1016       16        */
     1017       17        XSS$TXTC2NSAP: PROC( PARM1, PARM2) ALTRET;
     1018       18        %INCLUDE K_ADDRESS_M;
     1019      521            %K$NSAP( FPTN=NSAP, STCLASS="BASED( NSAP$)");
     1020      573
     1021      574    1       DCL PARM1 UBIN;
     1022      575    1       DCL PARM2 UBIN;
     1023      576    1       DCL NSAP$ PTR CALIGNED;
     1024      577    1       DCL TXTC$ PTR CALIGNED;
     1025      578    1       DCL 1 TXTC BASED( TXTC$),
     1026      579    1            2 LEN UBIN BYTE CALIGNED,
     1027      580    1            2 TXT CHAR( TXTC.LEN) CALIGNED;
     1028      581    1       DCL BIN SBIN;
     1029      582    1       DCL CHR CHAR(1) CALIGNED;
     1030      583    1       DCL I SBIN;
     1031      584    1       DCL J SBIN;
     1032      585    1       DCL LEN SBIN;
     1033      586    1       DCL LHEX CHAR(16) CONSTANT INIT( '0123456789abcdef');
     1034      587    1       DCL UHEX CHAR(16) CONSTANT INIT( '0123456789ABCDEF');
     1035      588    1       DCL X SBIN;
     1036      589
     1037      590    1       TXTC$ = ADDR( PARM1);
PL6.E3A0      #008=XSS$TXTC2NSAP File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:15 Page:227  
     1038      591    1       NSAP$ = ADDR( PARM2);
     1039      592    1       J = 0;
     1040      593    1       NSAP = '0'B;
     1041      594    1       LEN = TXTC.LEN;
     1042      595    1       NSAP.LEN = ( LEN + 1) / 2;
     1043      596    1       NSAP.AFI = %K_AFI_BIN_X121;  /*N* assumed... */
     1044      597    2       DO I = 0 TO LEN - 1;
     1045      598    2           CHR = SUBSTR( TXTC.TXT, I, 1);
     1046      599    2           CALL INDEX1( X, CHR, LHEX)
     1047      600    3           WHENALTRETURN DO;
     1048      601    3               CALL INDEX1( X, CHR, UHEX)
     1049      602    4               WHENALTRETURN DO;
     1050      603    4                   ALTRETURN;
     1051      604    4                   END;
     1052      605    3               END;
     1053      606    2           IF NOT BINBIT( I, 1) THEN
     1054      607    2               X = X * 16;
     1055      608    2           NSAP.ADDRESS_N( J) = NSAP.ADDRESS_N( J) + X;
     1056      609    2           J = J + BITBIN( BINBIT( I, 1));
     1057      610    2           END;
     1058      611    1       RETURN;
     1059      612
     1060      613    1   XSS$NSAP2TXTC: ENTRY( PARM1, PARM2) ALTRET;
     1061      614
     1062      615    1       NSAP$ = ADDR( PARM1);
     1063      616    1       TXTC$ = ADDR( PARM2);
     1064      617    1       J = 0;
     1065      618    1       TXTC = '0'B;
     1066      619    1       LEN = NSAP.LEN;
     1067      620    1       TXTC.LEN = LEN + LEN;
     1068      621    2       DO I = 0 TO LEN - 1;
     1069      622    2           BIN = NSAP.ADDRESS_N( I);
     1070      623    2           SUBSTR( TXTC.TXT, J + 0, 1) = SUBSTR( UHEX, BIN / 16, 1);
     1071      624    2           SUBSTR( TXTC.TXT, J + 1, 1) = SUBSTR( UHEX, MOD( BIN, 16), 1);
     1072      625    2           J = J + 2;
     1073      626    2           END;
     1074      627    1       RETURN;
PL6.E3A0      #008=XSS$TXTC2NSAP File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:15 Page:228  
     1075      628
     1076      629    1       END XSS$TXTC2NSAP;

PL6.E3A0      #008=XSS$TXTC2NSAP File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:15 Page:229  
--  Include file information  --

   K_ADDRESS_M.:LIB_E05  is referenced.
      No diagnostics issued in procedure XSS$TXTC2NSAP.

   Procedure XSS$TXTC2NSAP requires 137 words for executable code.
   Procedure XSS$TXTC2NSAP requires 16 words of local(AUTO) storage.

    No errors detected in file XSS$DATA.:XSA1TSI    .

PL6.E3A0      #008=XSS$TXTC2NSAP File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:15 Page:230  

 Object Unit name= XSS$TXTC2NSAP                              File name= XSS$DATA.:XSA1TOU
 UTS= OCT 01 '97 12:15:55.16 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  RoData even  UTS      8     10  XSS$TXTC2NSAP
    1   Proc  even  none   137    211  XSS$TXTC2NSAP
    2  RoData even  none     2      2  XSS$TXTC2NSAP

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        2  XSS$TXTC2NSAP
     1    114          yes     yes      Std        2  XSS$NSAP2TXTC

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_2
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET
PL6.E3A0      #008=XSS$TXTC2NSAP File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:15 Page:231  


     1001        1        /*T***********************************************************/
     1002        2        /*T*                                                         */
     1003        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1004        4        /*T*                                                         */
     1005        5        /*T***********************************************************/
     1006        6        /*X* DDA */
     1007        7        /*F*
     1008        8                NAME:   XSS$TXTC2NSAP
     1009        9                NAME:   XSS$NSAP2TXTC
     1010       10                PURPOSE:
     1011       11                    These routines convert between a TEXTC hex digit character
     1012       12                    representation of a Network address, and a K$NSAP structure,
     1013       13                    and vice-versa.
     1014       14                DESCRIPTION:
     1015       15                    Self-evident.
     1016       16        */
     1017       17        XSS$TXTC2NSAP: PROC( PARM1, PARM2) ALTRET;

     17  1 000000   000000 700200 xent  XSS$TXTC2NS* TSX0  ! X66_AUTO_2
         1 000001   000020 000002                    ZERO    16,2

     1018       18        %INCLUDE K_ADDRESS_M;
     1019      521            %K$NSAP( FPTN=NSAP, STCLASS="BASED( NSAP$)");
     1020      573
     1021      574    1       DCL PARM1 UBIN;
     1022      575    1       DCL PARM2 UBIN;
     1023      576    1       DCL NSAP$ PTR CALIGNED;
     1024      577    1       DCL TXTC$ PTR CALIGNED;
     1025      578    1       DCL 1 TXTC BASED( TXTC$),
     1026      579    1            2 LEN UBIN BYTE CALIGNED,
     1027      580    1            2 TXT CHAR( TXTC.LEN) CALIGNED;
     1028      581    1       DCL BIN SBIN;
     1029      582    1       DCL CHR CHAR(1) CALIGNED;
     1030      583    1       DCL I SBIN;
     1031      584    1       DCL J SBIN;
     1032      585    1       DCL LEN SBIN;
PL6.E3A0      #008=XSS$TXTC2NSAP File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:15 Page:232  
     1033      586    1       DCL LHEX CHAR(16) CONSTANT INIT( '0123456789abcdef');
     1034      587    1       DCL UHEX CHAR(16) CONSTANT INIT( '0123456789ABCDEF');
     1035      588    1       DCL X SBIN;
     1036      589
     1037      590    1       TXTC$ = ADDR( PARM1);

    590  1 000002   200003 236100                    LDQ     @PARM1,,AUTO
         1 000003   200006 756100                    STQ     TXTC$,,AUTO

     1038      591    1       NSAP$ = ADDR( PARM2);

    591  1 000004   200004 236100                    LDQ     @PARM2,,AUTO
         1 000005   200005 756100                    STQ     NSAP$,,AUTO

     1039      592    1       J = 0;

    592  1 000006   200012 450100                    STZ     J,,AUTO

     1040      593    1       NSAP = '0'B;

    593  1 000007   200005 470500                    LDP0    NSAP$,,AUTO
         1 000010   000100 100400                    MLR     fill='000'O
         1 000011   000000 000001 2                  ADSC9   0                        cn=0,n=1
         1 000012   000000 000026                    ADSC9   0,,PR0                   cn=0,n=22

     1041      594    1       LEN = TXTC.LEN;

    594  1 000013   200006 471500                    LDP1    TXTC$,,AUTO
         1 000014   000100 101500                    MRL     fill='000'O
         1 000015   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         1 000016   200013 000004                    ADSC9   LEN,,AUTO                cn=0,n=4

     1042      595    1       NSAP.LEN = ( LEN + 1) / 2;

    595  1 000017   200013 236100                    LDQ     LEN,,AUTO
         1 000020   000001 036007                    ADLQ    1,DL
         1 000021   000002 506007                    DIV     2,DL
PL6.E3A0      #008=XSS$TXTC2NSAP File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:15 Page:233  
         1 000022   200016 756100                    STQ     X+2,,AUTO
         1 000023   000100 101500                    MRL     fill='000'O
         1 000024   200016 000004                    ADSC9   X+2,,AUTO                cn=0,n=4
         1 000025   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1

     1043      596    1       NSAP.AFI = %K_AFI_BIN_X121;  /*N* assumed... */

    596  1 000026   000100 101400                    MRL     fill='000'O
         1 000027   000001 000004 2                  ADSC9   1                        cn=0,n=4
         1 000030   000000 200001                    ADSC9   0,,PR0                   cn=1,n=1

     1044      597    2       DO I = 0 TO LEN - 1;

    597  1 000031   200011 450100                    STZ     I,,AUTO
         1 000032   000110 710000 1                  TRA     s:610+1

     1045      598    2           CHR = SUBSTR( TXTC.TXT, I, 1);

    598  1 000033   200006 470500                    LDP0    TXTC$,,AUTO
         1 000034   000100 101500                    MRL     fill='000'O
         1 000035   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
         1 000036   200016 000002                    ADSC9   X+2,,AUTO                cn=0,n=2
         1 000037   200016 220100                    LDX0    X+2,,AUTO
         1 000040   200011 235100                    LDA     I,,AUTO
         1 000041   040100 100505                    MLR     fill='040'O
         1 000042   000000 200001                    ADSC9   0,A,PR0                  cn=1,n=1
         1 000043   200010 000001                    ADSC9   CHR,,AUTO                cn=0,n=1

     1046      599    2           CALL INDEX1( X, CHR, LHEX)

    599  1 000044   000100 124400                    SCM     mask='000'O
         1 000045   000000 000020 0                  ADSC9   LHEX                     cn=0,n=16
         1 000046   200010 000001                    ADSC9   CHR,,AUTO                cn=0,n=1
         1 000047   200014 000100                    ARG     X,,AUTO
         1 000050   000052 606400 1                  TTN     s:601
         1 000051   000061 710000 1                  TRA     s:606

PL6.E3A0      #008=XSS$TXTC2NSAP File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:15 Page:234  
     1047      600    3           WHENALTRETURN DO;

     1048      601    3               CALL INDEX1( X, CHR, UHEX)

    601  1 000052   000100 124400                    SCM     mask='000'O
         1 000053   000004 000020 0                  ADSC9   UHEX                     cn=0,n=16
         1 000054   200010 000001                    ADSC9   CHR,,AUTO                cn=0,n=1
         1 000055   200014 000100                    ARG     X,,AUTO
         1 000056   000060 606400 1                  TTN     s:603
         1 000057   000061 710000 1                  TRA     s:606

     1049      602    4               WHENALTRETURN DO;

     1050      603    4                   ALTRETURN;

    603  1 000060   000000 702200 xent               TSX2  ! X66_AALT

     1051      604    4                   END;
     1052      605    3               END;

     1053      606    2           IF NOT BINBIT( I, 1) THEN

    606  1 000061   200011 236100                    LDQ     I,,AUTO
         1 000062   000043 736000                    QLS     35
         1 000063   000067 601000 1                  TNZ     s:608

     1054      607    2               X = X * 16;

    607  1 000064   200014 235100                    LDA     X,,AUTO
         1 000065   000004 735000                    ALS     4
         1 000066   200014 755100                    STA     X,,AUTO

     1055      608    2           NSAP.ADDRESS_N( J) = NSAP.ADDRESS_N( J) + X;

    608  1 000067   200005 470500                    LDP0    NSAP$,,AUTO
         1 000070   200012 235100                    LDA     J,,AUTO
         1 000071   000100 101505                    MRL     fill='000'O
PL6.E3A0      #008=XSS$TXTC2NSAP File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:15 Page:235  
         1 000072   000000 400001                    ADSC9   0,A,PR0                  cn=2,n=1
         1 000073   200016 000004                    ADSC9   X+2,,AUTO                cn=0,n=4
         1 000074   200016 236100                    LDQ     X+2,,AUTO
         1 000075   200014 036100                    ADLQ    X,,AUTO
         1 000076   200017 756100                    STQ     X+3,,AUTO
         1 000077   000105 101500                    MRL     fill='000'O
         1 000100   200017 000004                    ADSC9   X+3,,AUTO                cn=0,n=4
         1 000101   000000 400001                    ADSC9   0,A,PR0                  cn=2,n=1

     1056      609    2           J = J + BITBIN( BINBIT( I, 1));

    609  1 000102   200011 236100                    LDQ     I,,AUTO
         1 000103   000043 736000                    QLS     35
         1 000104   000043 772000                    QRL     35
         1 000105   200012 036100                    ADLQ    J,,AUTO
         1 000106   200012 756100                    STQ     J,,AUTO

     1057      610    2           END;

    610  1 000107   200011 054100                    AOS     I,,AUTO
         1 000110   200011 236100                    LDQ     I,,AUTO
         1 000111   200013 116100                    CMPQ    LEN,,AUTO
         1 000112   000033 604000 1                  TMI     s:598

     1058      611    1       RETURN;

    611  1 000113   000000 702200 xent               TSX2  ! X66_ARET

     1059      612
     1060      613    1   XSS$NSAP2TXTC: ENTRY( PARM1, PARM2) ALTRET;

    613  1 000114   000000 700200 xent  XSS$NSAP2TX* TSX0  ! X66_AUTO_2
         1 000115   000020 000002                    ZERO    16,2

     1061      614
     1062      615    1       NSAP$ = ADDR( PARM1);

PL6.E3A0      #008=XSS$TXTC2NSAP File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:15 Page:236  
    615  1 000116   200003 236100                    LDQ     @PARM1,,AUTO
         1 000117   200005 756100                    STQ     NSAP$,,AUTO

     1063      616    1       TXTC$ = ADDR( PARM2);

    616  1 000120   200004 236100                    LDQ     @PARM2,,AUTO
         1 000121   200006 756100                    STQ     TXTC$,,AUTO

     1064      617    1       J = 0;

    617  1 000122   200012 450100                    STZ     J,,AUTO

     1065      618    1       TXTC = '0'B;

    618  1 000123   200006 470500                    LDP0    TXTC$,,AUTO
         1 000124   000100 101500                    MRL     fill='000'O
         1 000125   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
         1 000126   200016 000002                    ADSC9   X+2,,AUTO                cn=0,n=2
         1 000127   200016 220100                    LDX0    X+2,,AUTO
         1 000130   000001 621010                    EAX1    1,X0
         1 000131   000140 100400                    MLR     fill='000'O
         1 000132   000000 000001 2                  ADSC9   0                        cn=0,n=1
         1 000133   000000 000011                    ADSC9   0,,PR0                   cn=0,n=*X1

     1066      619    1       LEN = NSAP.LEN;

    619  1 000134   200005 471500                    LDP1    NSAP$,,AUTO
         1 000135   000100 101500                    MRL     fill='000'O
         1 000136   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         1 000137   200013 000004                    ADSC9   LEN,,AUTO                cn=0,n=4

     1067      620    1       TXTC.LEN = LEN + LEN;

    620  1 000140   200013 236100                    LDQ     LEN,,AUTO
         1 000141   200013 036100                    ADLQ    LEN,,AUTO
         1 000142   200016 756100                    STQ     X+2,,AUTO
         1 000143   000100 101500                    MRL     fill='000'O
PL6.E3A0      #008=XSS$TXTC2NSAP File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:15 Page:237  
         1 000144   200016 000004                    ADSC9   X+2,,AUTO                cn=0,n=4
         1 000145   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1

     1068      621    2       DO I = 0 TO LEN - 1;

    621  1 000146   200011 450100                    STZ     I,,AUTO
         1 000147   000205 710000 1                  TRA     s:626+1

     1069      622    2           BIN = NSAP.ADDRESS_N( I);

    622  1 000150   200005 470500                    LDP0    NSAP$,,AUTO
         1 000151   200011 235100                    LDA     I,,AUTO
         1 000152   000100 101505                    MRL     fill='000'O
         1 000153   000000 400001                    ADSC9   0,A,PR0                  cn=2,n=1
         1 000154   200007 000004                    ADSC9   BIN,,AUTO                cn=0,n=4

     1070      623    2           SUBSTR( TXTC.TXT, J + 0, 1) = SUBSTR( UHEX, BIN / 16, 1);

    623  1 000155   200006 471500                    LDP1    TXTC$,,AUTO
         1 000156   000100 101500                    MRL     fill='000'O
         1 000157   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         1 000160   200016 000002                    ADSC9   X+2,,AUTO                cn=0,n=2
         1 000161   200016 220100                    LDX0    X+2,,AUTO
         1 000162   200007 236100                    LDQ     BIN,,AUTO
         1 000163   000020 506007                    DIV     16,DL
         1 000164   200012 235100                    LDA     J,,AUTO
         1 000165   040105 100406                    MLR     fill='040'O
         1 000166   000004 000001 0                  ADSC9   UHEX,Q                   cn=0,n=1
         1 000167   100000 200001                    ADSC9   0,A,PR1                  cn=1,n=1

     1071      624    2           SUBSTR( TXTC.TXT, J + 1, 1) = SUBSTR( UHEX, MOD( BIN, 16), 1);

    624  1 000170   000100 101500                    MRL     fill='000'O
         1 000171   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         1 000172   200016 000002                    ADSC9   X+2,,AUTO                cn=0,n=2
         1 000173   200016 220100                    LDX0    X+2,,AUTO
         1 000174   200007 236100                    LDQ     BIN,,AUTO
PL6.E3A0      #008=XSS$TXTC2NSAP File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:15 Page:238  
         1 000175   000020 506007                    DIV     16,DL
         1 000176   200012 236100                    LDQ     J,,AUTO
         1 000177   040106 100405                    MLR     fill='040'O
         1 000200   000004 000001 0                  ADSC9   UHEX,A                   cn=0,n=1
         1 000201   100000 400001                    ADSC9   0,Q,PR1                  cn=2,n=1

     1072      625    2           J = J + 2;

    625  1 000202   000002 236007                    LDQ     2,DL
         1 000203   200012 056100                    ASQ     J,,AUTO

     1073      626    2           END;

    626  1 000204   200011 054100                    AOS     I,,AUTO
         1 000205   200011 236100                    LDQ     I,,AUTO
         1 000206   200013 116100                    CMPQ    LEN,,AUTO
         1 000207   000150 604000 1                  TMI     s:622

     1074      627    1       RETURN;

    627  1 000210   000000 702200 xent               TSX2  ! X66_ARET

LHEX
 Sect OctLoc
   0     000   060061 062063   064065 066067   070071 141142   143144 145146    0123456789abcdef

UHEX
 Sect OctLoc
   0     004   060061 062063   064065 066067   070071 101102   103104 105106    0123456789ABCDEF

(unnamed)
 Sect OctLoc
   2     000   000000 000000   000000 000067                                    .......7
     1075      628
     1076      629    1       END XSS$TXTC2NSAP;

PL6.E3A0      #008=XSS$TXTC2NSAP File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:15 Page:239  
--  Include file information  --

   K_ADDRESS_M.:LIB_E05  is referenced.
      No diagnostics issued in procedure XSS$TXTC2NSAP.
PL6.E3A0      #008=XSS$TXTC2NSAP File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:15 Page:240  

 **** Variables and constants ****

  ****  Section 000 RoData XSS$TXTC2NSAP

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c CHAR(16)    r     1 LHEX                       4-0-0/c CHAR(16)    r     1 UHEX

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @PARM1                     4-0-0/w PTR         r     1 @PARM2
     7-0-0/w SBIN        r     1 BIN                       10-0-0/c CHAR        r     1 CHR
    11-0-0/w SBIN        r     1 I                         12-0-0/w SBIN        r     1 J
    13-0-0/w SBIN        r     1 LEN                        5-0-0/c PTR         r     1 NSAP$
    *0-0-0/w UBIN        r     1 PARM1                     *0-0-0/w UBIN        r     1 PARM2
     6-0-0/c PTR         r     1 TXTC$                     14-0-0/w SBIN        r     1 X

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c STRC(198)   r     1 NSAP                       0-0-0/c ASTR(9)     r     1 TXTC


   Procedure XSS$TXTC2NSAP requires 137 words for executable code.
   Procedure XSS$TXTC2NSAP requires 16 words of local(AUTO) storage.

    No errors detected in file XSS$DATA.:XSA1TSI    .
PL6.E3A0      #008=XSS$TXTC2NSAP File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:15 Page:241  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #008=XSS$TXTC2NSAP File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:15 Page:242  
          MINI XREF LISTING

BIN
       581**DCL       622<<ASSIGN    623>>ASSIGN    624>>ASSIGN
CHR
       582**DCL       598<<ASSIGN    599>>CALLBLT   601>>CALLBLT
I
       583**DCL       597<<DOINDEX   598>>ASSIGN    606>>IF        609>>ASSIGN    621<<DOINDEX   622>>ASSIGN
J
       584**DCL       592<<ASSIGN    608>>ASSIGN    608>>ASSIGN    609<<ASSIGN    609>>ASSIGN    617<<ASSIGN
       623>>ASSIGN    624>>ASSIGN    625<<ASSIGN    625>>ASSIGN
LEN
       585**DCL       594<<ASSIGN    595>>ASSIGN    597>>DOINDEX   619<<ASSIGN    620>>ASSIGN    620>>ASSIGN
       621>>DOINDEX
LHEX
       586**DCL       599>>CALLBLT
NSAP
       537**DCL       593<<ASSIGN
NSAP.ADDRESS_N
       569**DCL       570--REDEF     608<<ASSIGN    608>>ASSIGN    622>>ASSIGN
NSAP.AFI
       546**DCL       596<<ASSIGN
NSAP.LEN
       541**DCL       595<<ASSIGN    619>>ASSIGN
NSAP$
       576**DCL       537--IMP-PTR   591<<ASSIGN    593>>ASSIGN    595>>ASSIGN    596>>ASSIGN    608>>ASSIGN
       608>>ASSIGN    615<<ASSIGN    619>>ASSIGN    622>>ASSIGN
PARM1
       574**DCL        17--PROC      590--ASSIGN    613--ENTRY     615--ASSIGN
PARM2
       575**DCL        17--PROC      591--ASSIGN    613--ENTRY     616--ASSIGN
TXTC
       578**DCL       618<<ASSIGN
TXTC.LEN
PL6.E3A0      #008=XSS$TXTC2NSAP File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:15 Page:243  
       579**DCL       580--IMP-SIZ   594>>ASSIGN    598>>ASSIGN    618>>ASSIGN    620<<ASSIGN    623>>ASSIGN
       624>>ASSIGN
TXTC.TXT
       580**DCL       598>>ASSIGN    623<<ASSIGN    624<<ASSIGN
TXTC$
       577**DCL       578--IMP-PTR   590<<ASSIGN    594>>ASSIGN    598>>ASSIGN    598>>ASSIGN    616<<ASSIGN
       618>>ASSIGN    618>>ASSIGN    620>>ASSIGN    623>>ASSIGN    623>>ASSIGN    624>>ASSIGN    624>>ASSIGN
UHEX
       587**DCL       601>>CALLBLT   623>>ASSIGN    624>>ASSIGN
X
       588**DCL       599<<CALLBLT   601<<CALLBLT   607<<ASSIGN    607>>ASSIGN    608>>ASSIGN
PL6.E3A0      #008=XSS$TXTC2NSAP File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:15 Page:244  
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #008=XSS$TXTC2NSAP File=XSS$DATA.:XSA1TSI                          WED 10/01/97 12:15 Page:245  
              MINI UREF LISTING

XSS$NSAP2TXTC     613**ENTRY
XSS$TXTC2NSAP      17**PROC
