VERSION E05

PL6.E3A0      #001=JCP$CITE File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:17 Page:1    
        1        1        /*M* JCP$PROCESS   Non event-level processing of SLUG events */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        JCP$CITE: PROC;
        8        8        /*D* NAME:        JCP$CITE
        9        9             PURPOSE:     To handle any JC_CITE messages sent to SLUG
       10       10             CALL:        CALL JCP$CITE;
       11       11             DESCRIPTION: JCP$CITE is called whenever a JC_CITE message is
       12       12                          recieved by SLUG. The event is handled and JCP$CITE
       13       13                          RETURNs.
       14       14
       15       15                          Several citations may be recieved by SLUG requiring
       16       16                          different handling. These are:
       17       17                             1) JCEV_PCMP# - Phase complete message from a
       18       18                                system ghost. This event is handled by resetting
       19       19                                JC_WAITING for the writing user number. If
       20       20                                JC_WAITING empty of ghosts for SLUG to wait the
       21       21                                current phase on, JCP$CITE will post a phase
       22       22                                complete event to SLUG's event queue.
       23       23                             2) JCEV_OFF# - Ghost off message. This event is
       24       24                                handled in the same way as JCEV_PCMP#.
       25       25                             3) JCEV_SUSR# - Start users message. This event
       26       26                                causes SLUG to set JC_SUSR allowing him to start
       27       27                                users. It also causes SLUG to send a message to
       28       28                                MBS and GOOSE telling them to start users and
       29       29                                to PRESCAN telling him to PRESCAN job files.
       30       30                                SLUG also either STARTs the FEPs if this is
       31       31                                a disk boot or recovery, or HALTs the FEPs
       32       32                                causing them to re-BOOT if this is a tape boot.
       33       33        */
       34       34        %INCLUDE CP_6;
       35      115        %INCLUDE IA_MACRO_C;
       36      171        %INCLUDE JC_MACRO_C;
       37      285        %INCLUDE JC_DATA_R;
PL6.E3A0      #001=JCP$CITE File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:17 Page:2    
       38      323        %INCLUDE JC_SUBS_C;
       39      336        %INCLUDE JG_EVID_C;
       40      561        %INCLUDE JG_GHOSTS_C;
       41      651        %INCLUDE JM$STRUCT;
       42     1396        %INCLUDE JP_MACRO_C;
       43     1551        %INCLUDE KI_SUBS_C;
       44     1687        %INCLUDE KL_SUBS_C;
       45     1741        %INCLUDE KL_DATA_R;
       46     2205        %INCLUDE OC_SUBS_C;
       47     2936        %JG_GHOSTS (ARRAY=NO,STCLASS=CONSTANT);
       48     2974    1   DCL JC_CSMBF CHAR(300) SYMREF;
       49     2975    1   DCL 1 KBCHS REDEF  JC_CSMBF,
       50     2976    1         2 KIN# UBIN HALF UNAL,
       51     2977    1         2 CADDR UBIN HALF UNAL,
       52     2978    1         2 * CHAR(12) UNAL,
       53     2979    1         2 TXT UNAL,
       54     2980    1           3 CNT UBIN BYTE UNAL,
       55     2981    1           3 MSG CHAR(283) UNAL;
       56     2982    1   DCL JC_TBOOT UBIN WORD SYMREF;
       57     2983        %IA_CITE (FPTN=IA_CITE,STCLASS=CONSTANT,COD=IAEV_SUSR#);
       58     3009        %JC_CITE (FPTN=JC$CITE_PCMP,TYP=PCMP,STCLASS=BASED);
       59     3059        %JC_CITE (FPTN=JC$CITE_OFF,TYP=OFF,STCLASS=BASED);
       60     3109        %JM_CITE (FPTN=JM_CITE,STCLASS=CONSTANT,COD=JMEV_SUSR#);
       61     3159        %JP_CITE (FPTN=JP_CITE,STCLASS=CONSTANT,COD=JPEV_SUSR#);
       62     3191    1   DCL FEX UBIN;
       63     3192    1   DCL M$CSCG DCB;
       64     3193        %FPT_FECTL (FPTN=FPT_FECTL,STCLASS=STATIC);
       65     3208        %FPT_WRITE (FPTN=WR_CSCG,STCLASS=STATIC,DCB=M$CSCG,STATION=CSCG_STA);
       66     3239        %VLP_STATION (FPTN=CSCG_STA,STCLASS=STATIC);
       67     3266        %VLR_HEADER  (FPTN=HEADER_BUF,STCLASS= SYMREF);
       68     3280    1   DCL KLI$KBOOT ENTRY;
       69     3281    1   DCL JCE$EVENT ENTRY(1);
       70     3282    1   DCL JGG$UGJOB ENTRY;
       71     3283
       72     3284
       73     3285    2           DO CASE(ADDR(JC_CSMBF)->JC$CITE_PCMP.CODE);
       74     3286    2            CASE(JCEV_PCMP#);
PL6.E3A0      #001=JCP$CITE File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:17 Page:3    
       75     3287    2              JC_WAITING(ADDR(JC_CSMBF)->JC$CITE_PCMP.USER) = '0'B;
       76     3288    2              IF JC_WAITING='0'B
       77     3289    2              THEN CALL JCE$EVENT(JCQEV_PCMP#);
       78     3290    2            CASE(JCEV_OFF#);
       79     3291    2              JC_WAITING(ADDR(JC_CSMBF)->JC$CITE_OFF.USER) = '0'B;
       80     3292    2              IF JC_WAITING='0'B
       81     3293    2              THEN CALL JCE$EVENT(JCQEV_PCMP#);
       82     3294    2            CASE(JCEV_SUSR#);
       83     3295    2              IF JC_SUSROK
       84     3296    3              THEN DO;
       85     3297    3                 JC_SUSROK = '0'B;
       86     3298    3                 JC_SUSR = '1'B;
       87     3299    3                 WR_CSCG.BUF_ = VECTOR(JM_CITE);
       88     3300    3                 CSCG_STA.STATION# = J_MBS;
       89     3301    3                 CALL M$WRITE (WR_CSCG) ALTRET(IGN1);
       90     3302    3   IGN1:         WR_CSCG.BUF_ = VECTOR(IA_CITE);
       91     3303    3                 CSCG_STA.STATION# = J_GOOSE;
       92     3304    3                 CALL M$WRITE (WR_CSCG) ALTRET(IGN2);
       93     3305    3   IGN2:         WR_CSCG.BUF_ = VECTOR(JP_CITE);
       94     3306    3                 CSCG_STA.STATION# = J_PRESCAN;
       95     3307    3                 CALL M$WRITE (WR_CSCG) ALTRET(IGN3);
       96     3308        /**/
       97     3309        /* Halt the FEPs (causing them to re-boot) if this is a tape boot.           */
       98     3310        /* If this is not a tape boot, just start the FEPs.                          */
       99     3311        /**/
      100     3312    3   IGN3: ;
      101     3313    4              DO FEX=1 TO KI_FEMAX#;
      102     3314    4              IF HEADER_BUF.CNT > 1 THEN
      103     3315    5                 DO;
      104     3316    5                 KBCHS.TXT.MSG = HEADER_BUF.HEADER#;
      105     3317    5                 KBCHS.TXT.CNT = HEADER_BUF.CNT;
      106     3318    5                 KBCHS.KIN# = %KEY_HEAD#;
      107     3319    5                 CALL KLI$KBOOT;
      108     3320    5                 END;
      109     3321    4                 IF NOT KL_FETBL.DEBUG(FEX)
      110     3322    5                 THEN DO;
      111     3323    5                 IF JC_TBOOT~=0
PL6.E3A0      #001=JCP$CITE File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:17 Page:4    
      112     3324    5                AND KL_FETBL.BOSS(FEX)
      113     3325    6                 THEN DO;
      114     3326    6                      KL_FETBL.KTYP(FEX) = %KLKT_BOOT#;
      115     3327    6                      FPT_FECTL.V.HALT# = '1'B;
      116     3328    6                      FPT_FECTL.V.START# = '0'B;
      117     3329    6                      END;
      118     3330    6                 ELSE DO;
      119     3331    6                      FPT_FECTL.V.HALT# = '0'B;
      120     3332    6                      FPT_FECTL.V.START# = '1'B;
      121     3333    6                      END;
      122     3334    5                 FPT_FECTL.V.FEP# = FEX;
      123     3335    5                 CALL M$FECTL (FPT_FECTL)
      124     3336    6                 WHENALTRETURN DO;
      125     3337    6                     KL_FETBL.KTYP(FEX) = %KLKT_NONE#;
      126     3338    6                   END;
      127     3339    5                END;
      128     3340    4                 END;
      129     3341    3                 END;
      130     3342    2            CASE (JCEV_UGJOB#);
      131     3343    2              CALL JGG$UGJOB;
      132     3344    2            END;
      133     3345    1           RETURN;
      134     3346    1   END JCP$CITE;
      135     3347        %EOD;

PL6.E3A0      #001=JCP$CITE File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:17 Page:5    
--  Include file information  --

   OC_SUBS_C.:E05TOU  is referenced.
   KL_NETWORK_M.:E05TOU  is referenced.
   OC$MESSHD_C.:E05TOU  is referenced.
   KL_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   KL_SUBS_C.:E05TOU  is referenced.
   KI_SUBS_C.:E05TOU  is referenced.
   JP_MACRO_C.:E05TOU  is referenced.
   JM$STRUCT.:E05TOU  is referenced.
   JG_GHOSTS_C.:E05TOU  is referenced.
   JG_EVID_C.:E05TOU  is referenced.
   JC_SUBS_C.:E05TOU  is referenced.
   JC_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   JC_MACRO_C.:E05TOU  is referenced.
   IA_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure JCP$CITE.

   Procedure JCP$CITE requires 120 words for executable code.
   Procedure JCP$CITE requires 4 words of local(AUTO) storage.

PL6.E3A0      #001=JCP$CITE File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:17 Page:6    

 Object Unit name= JCP$CITE                                   File name= JCP$PROCESS.:E05TOU
 UTS= JUL 29 '97 23:17:57.88 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$HLP
    2  RoData even  UTS     43     53  JCP$CITE
    3   DCB   even  none     0      0  M$CSCG
    4   Data  even  none    30     36  JCP$CITE
    5   Proc  even  none   120    170  JCP$CITE
    6  RoData even  none    10     12  JCP$CITE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     5      0   yes            yes      Std        0  JCP$CITE

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       1 JCE$EVENT
         yes           Std       0 JGG$UGJOB
         yes           Std       0 KLI$KBOOT
                       nStd      0 X66_AUTO_0
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #001=JCP$CITE File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:17 Page:7    

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  JC_WAITING                            JC_SUSROK
     JC_SUSR                               M$HLP                                 KL_FETBL
     JC_CSMBF                              JC_TBOOT                              M$CSCG
     HEADER_BUF                            B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #001=JCP$CITE File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:17 Page:8    


        1        1        /*M* JCP$PROCESS   Non event-level processing of SLUG events */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        JCP$CITE: PROC;

      7  5 000000   000000 700200 xent  JCP$CITE     TSX0  ! X66_AUTO_0
         5 000001   000004 000000                    ZERO    4,0

        8        8        /*D* NAME:        JCP$CITE
        9        9             PURPOSE:     To handle any JC_CITE messages sent to SLUG
       10       10             CALL:        CALL JCP$CITE;
       11       11             DESCRIPTION: JCP$CITE is called whenever a JC_CITE message is
       12       12                          recieved by SLUG. The event is handled and JCP$CITE
       13       13                          RETURNs.
       14       14
       15       15                          Several citations may be recieved by SLUG requiring
       16       16                          different handling. These are:
       17       17                             1) JCEV_PCMP# - Phase complete message from a
       18       18                                system ghost. This event is handled by resetting
       19       19                                JC_WAITING for the writing user number. If
       20       20                                JC_WAITING empty of ghosts for SLUG to wait the
       21       21                                current phase on, JCP$CITE will post a phase
       22       22                                complete event to SLUG's event queue.
       23       23                             2) JCEV_OFF# - Ghost off message. This event is
       24       24                                handled in the same way as JCEV_PCMP#.
       25       25                             3) JCEV_SUSR# - Start users message. This event
       26       26                                causes SLUG to set JC_SUSR allowing him to start
       27       27                                users. It also causes SLUG to send a message to
       28       28                                MBS and GOOSE telling them to start users and
       29       29                                to PRESCAN telling him to PRESCAN job files.
       30       30                                SLUG also either STARTs the FEPs if this is
       31       31                                a disk boot or recovery, or HALTs the FEPs
       32       32                                causing them to re-BOOT if this is a tape boot.
PL6.E3A0      #001=JCP$CITE File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:17 Page:9    
       33       33        */
       34       34        %INCLUDE CP_6;
       35      115        %INCLUDE IA_MACRO_C;
       36      171        %INCLUDE JC_MACRO_C;
       37      285        %INCLUDE JC_DATA_R;
       38      323        %INCLUDE JC_SUBS_C;
       39      336        %INCLUDE JG_EVID_C;
       40      561        %INCLUDE JG_GHOSTS_C;
       41      651        %INCLUDE JM$STRUCT;
       42     1396        %INCLUDE JP_MACRO_C;
       43     1551        %INCLUDE KI_SUBS_C;
       44     1687        %INCLUDE KL_SUBS_C;
       45     1741        %INCLUDE KL_DATA_R;
       46     2205        %INCLUDE OC_SUBS_C;
       47     2936        %JG_GHOSTS (ARRAY=NO,STCLASS=CONSTANT);
       48     2974    1   DCL JC_CSMBF CHAR(300) SYMREF;
       49     2975    1   DCL 1 KBCHS REDEF  JC_CSMBF,
       50     2976    1         2 KIN# UBIN HALF UNAL,
       51     2977    1         2 CADDR UBIN HALF UNAL,
       52     2978    1         2 * CHAR(12) UNAL,
       53     2979    1         2 TXT UNAL,
       54     2980    1           3 CNT UBIN BYTE UNAL,
       55     2981    1           3 MSG CHAR(283) UNAL;
       56     2982    1   DCL JC_TBOOT UBIN WORD SYMREF;
       57     2983        %IA_CITE (FPTN=IA_CITE,STCLASS=CONSTANT,COD=IAEV_SUSR#);
       58     3009        %JC_CITE (FPTN=JC$CITE_PCMP,TYP=PCMP,STCLASS=BASED);
       59     3059        %JC_CITE (FPTN=JC$CITE_OFF,TYP=OFF,STCLASS=BASED);
       60     3109        %JM_CITE (FPTN=JM_CITE,STCLASS=CONSTANT,COD=JMEV_SUSR#);
       61     3159        %JP_CITE (FPTN=JP_CITE,STCLASS=CONSTANT,COD=JPEV_SUSR#);
       62     3191    1   DCL FEX UBIN;
       63     3192    1   DCL M$CSCG DCB;
       64     3193        %FPT_FECTL (FPTN=FPT_FECTL,STCLASS=STATIC);
       65     3208        %FPT_WRITE (FPTN=WR_CSCG,STCLASS=STATIC,DCB=M$CSCG,STATION=CSCG_STA);
       66     3239        %VLP_STATION (FPTN=CSCG_STA,STCLASS=STATIC);
       67     3266        %VLR_HEADER  (FPTN=HEADER_BUF,STCLASS= SYMREF);
       68     3280    1   DCL KLI$KBOOT ENTRY;
       69     3281    1   DCL JCE$EVENT ENTRY(1);
PL6.E3A0      #001=JCP$CITE File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:17 Page:10   
       70     3282    1   DCL JGG$UGJOB ENTRY;
       71     3283
       72     3284
       73     3285    2           DO CASE(ADDR(JC_CSMBF)->JC$CITE_PCMP.CODE);

   3285  5 000002   000000 720000 xsym               LXL0    JC_CSMBF
         5 000003   000005 100003                    CMPX0   5,DU
         5 000004   000006 602010 5                  TNC     s:3285+4,X0
         5 000005   000167 710000 5                  TRA     s:3345
         5 000006   000167 710000 5                  TRA     s:3345
         5 000007   000013 710000 5                  TRA     s:3287
         5 000010   000027 710000 5                  TRA     s:3291
         5 000011   000043 710000 5                  TRA     s:3295
         5 000012   000164 710000 5                  TRA     s:3343

       74     3286    2            CASE(JCEV_PCMP#);

       75     3287    2              JC_WAITING(ADDR(JC_CSMBF)->JC$CITE_PCMP.USER) = '0'B;

   3287  5 000013   000001 235000 xsym               LDA     JC_CSMBF+1
         5 000014   000022 771000                    ARL     18
         5 000015   003005 060400                    CSL     bolr='003'O
         5 000016   000002 000001 xsym               BDSC    B_VECTNIL+2              by=0,bit=0,n=1
         5 000017   000000 000001 xsym               BDSC    JC_WAITING,A             by=0,bit=0,n=1

       76     3288    2              IF JC_WAITING='0'B

   3288  5 000020   000000 236000 xsym               LDQ     JC_WAITING
         5 000021   000167 601000 5                  TNZ     s:3345

       77     3289    2              THEN CALL JCE$EVENT(JCQEV_PCMP#);

   3289  5 000022   000000 630400 6                  EPPR0   0
         5 000023   000017 631400 xsym               EPPR1   B_VECTNIL+15
         5 000024   000000 701000 xent               TSX1    JCE$EVENT
         5 000025   000000 011000                    NOP     0
         5 000026   000167 710000 5                  TRA     s:3345
PL6.E3A0      #001=JCP$CITE File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:17 Page:11   

       78     3290    2            CASE(JCEV_OFF#);

       79     3291    2              JC_WAITING(ADDR(JC_CSMBF)->JC$CITE_OFF.USER) = '0'B;

   3291  5 000027   000001 235000 xsym               LDA     JC_CSMBF+1
         5 000030   000022 771000                    ARL     18
         5 000031   003005 060400                    CSL     bolr='003'O
         5 000032   000002 000001 xsym               BDSC    B_VECTNIL+2              by=0,bit=0,n=1
         5 000033   000000 000001 xsym               BDSC    JC_WAITING,A             by=0,bit=0,n=1

       80     3292    2              IF JC_WAITING='0'B

   3292  5 000034   000000 236000 xsym               LDQ     JC_WAITING
         5 000035   000167 601000 5                  TNZ     s:3345

       81     3293    2              THEN CALL JCE$EVENT(JCQEV_PCMP#);

   3293  5 000036   000000 630400 6                  EPPR0   0
         5 000037   000017 631400 xsym               EPPR1   B_VECTNIL+15
         5 000040   000000 701000 xent               TSX1    JCE$EVENT
         5 000041   000000 011000                    NOP     0
         5 000042   000167 710000 5                  TRA     s:3345

       82     3294    2            CASE(JCEV_SUSR#);

       83     3295    2              IF JC_SUSROK

   3295  5 000043   000000 234000 xsym               SZN     JC_SUSROK
         5 000044   000167 605000 5                  TPL     s:3345

       84     3296    3              THEN DO;

       85     3297    3                 JC_SUSROK = '0'B;

   3297  5 000045   000000 450000 xsym               STZ     JC_SUSROK

PL6.E3A0      #001=JCP$CITE File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:17 Page:12   
       86     3298    3                 JC_SUSR = '1'B;

   3298  5 000046   400000 236003                    LDQ     -131072,DU
         5 000047   000000 756000 xsym               STQ     JC_SUSR

       87     3299    3                 WR_CSCG.BUF_ = VECTOR(JM_CITE);

   3299  5 000050   000002 237000 6                  LDAQ    2
         5 000051   000016 757000 4                  STAQ    WR_CSCG+4

       88     3300    3                 CSCG_STA.STATION# = J_MBS;

   3300  5 000052   000004 237000 2                  LDAQ    J_MBS
         5 000053   000026 757000 4                  STAQ    CSCG_STA

       89     3301    3                 CALL M$WRITE (WR_CSCG) ALTRET(IGN1);

   3301  5 000054   000012 630400 4                  EPPR0   WR_CSCG
         5 000055   440001 713400                    CLIMB   alt,write
         5 000056   401400 401760                    pmme    nvectors=4
         5 000057   000060 702000 5                  TSX2    IGN1

       90     3302    3   IGN1:         WR_CSCG.BUF_ = VECTOR(IA_CITE);

   3302  5 000060   000004 237000 6     IGN1         LDAQ    4
         5 000061   000016 757000 4                  STAQ    WR_CSCG+4

       91     3303    3                 CSCG_STA.STATION# = J_GOOSE;

   3303  5 000062   000026 237000 2                  LDAQ    J_GOOSE
         5 000063   000026 757000 4                  STAQ    CSCG_STA

       92     3304    3                 CALL M$WRITE (WR_CSCG) ALTRET(IGN2);

   3304  5 000064   000012 630400 4                  EPPR0   WR_CSCG
         5 000065   440001 713400                    CLIMB   alt,write
         5 000066   401400 401760                    pmme    nvectors=4
PL6.E3A0      #001=JCP$CITE File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:17 Page:13   
         5 000067   000070 702000 5                  TSX2    IGN2

       93     3305    3   IGN2:         WR_CSCG.BUF_ = VECTOR(JP_CITE);

   3305  5 000070   000006 237000 6     IGN2         LDAQ    6
         5 000071   000016 757000 4                  STAQ    WR_CSCG+4

       94     3306    3                 CSCG_STA.STATION# = J_PRESCAN;

   3306  5 000072   000012 237000 2                  LDAQ    J_PRESCAN
         5 000073   000026 757000 4                  STAQ    CSCG_STA

       95     3307    3                 CALL M$WRITE (WR_CSCG) ALTRET(IGN3);

   3307  5 000074   000012 630400 4                  EPPR0   WR_CSCG
         5 000075   440001 713400                    CLIMB   alt,write
         5 000076   401400 401760                    pmme    nvectors=4
         5 000077   000100 702000 5                  TSX2    IGN3

   3306  5 000100                       IGN3         null
       96     3308        /**/
       97     3309        /* Halt the FEPs (causing them to re-boot) if this is a tape boot.           */
       98     3310        /* If this is not a tape boot, just start the FEPs.                          */
       99     3311        /**/
      100     3312    3   IGN3: ;
      101     3313    4              DO FEX=1 TO KI_FEMAX#;

   3313  5 000100   000001 235007                    LDA     1,DL
         5 000101   200003 755100                    STA     FEX,,AUTO

      102     3314    4              IF HEADER_BUF.CNT > 1 THEN

   3314  5 000102   000000 236000 xsym               LDQ     HEADER_BUF
         5 000103   777000 376003                    ANQ     -512,DU
         5 000104   002000 116003                    CMPQ    1024,DU
         5 000105   000120 602000 5                  TNC     s:3321

PL6.E3A0      #001=JCP$CITE File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:17 Page:14   
      103     3315    5                 DO;

      104     3316    5                 KBCHS.TXT.MSG = HEADER_BUF.HEADER#;

   3316  5 000106   040000 100400                    MLR     fill='040'O
         5 000107   000000 200170 xsym               ADSC9   HEADER_BUF               cn=1,n=120
         5 000110   000004 200433 xsym               ADSC9   JC_CSMBF+4               cn=1,n=283

      105     3317    5                 KBCHS.TXT.CNT = HEADER_BUF.CNT;

   3317  5 000111   000000 236000 xsym               LDQ     HEADER_BUF
         5 000112   000004 552040 xsym               STBQ    JC_CSMBF+4,'40'O

      106     3318    5                 KBCHS.KIN# = %KEY_HEAD#;

   3318  5 000113   000013 220003                    LDX0    11,DU
         5 000114   000000 740000 xsym               STX0    JC_CSMBF

      107     3319    5                 CALL KLI$KBOOT;

   3319  5 000115   000002 631400 xsym               EPPR1   B_VECTNIL+2
         5 000116   000000 701000 xent               TSX1    KLI$KBOOT
         5 000117   000000 011000                    NOP     0

      108     3320    5                 END;

      109     3321    4                 IF NOT KL_FETBL.DEBUG(FEX)

   3321  5 000120   200003 720100                    LXL0    FEX,,AUTO
         5 000121   000000 236010 xsym               LDQ     KL_FETBL,X0
         5 000122   020000 316003                    CANQ    8192,DU
         5 000123   000156 601000 5                  TNZ     s:3340

      110     3322    5                 THEN DO;

      111     3323    5                 IF JC_TBOOT~=0

PL6.E3A0      #001=JCP$CITE File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:17 Page:15   
   3323  5 000124   000000 235000 xsym               LDA     JC_TBOOT
         5 000125   000140 600000 5                  TZE     s:3331
         5 000126   040000 316003                    CANQ    16384,DU
         5 000127   000140 600000 5                  TZE     s:3331

      112     3324    5                AND KL_FETBL.BOSS(FEX)
      113     3325    6                 THEN DO;

      114     3326    6                      KL_FETBL.KTYP(FEX) = %KLKT_BOOT#;

   3326  5 000130   000010 376000 6                  ANQ     8
         5 000131   001000 276003                    ORQ     512,DU
         5 000132   000000 756010 xsym               STQ     KL_FETBL,X0

      115     3327    6                      FPT_FECTL.V.HALT# = '1'B;

   3327  5 000133   400000 236003                    LDQ     -131072,DU
         5 000134   000010 256000 4                  ORSQ    FPT_FECTL+8

      116     3328    6                      FPT_FECTL.V.START# = '0'B;

   3328  5 000135   000011 236000 6                  LDQ     9
         5 000136   000010 356000 4                  ANSQ    FPT_FECTL+8

      117     3329    6                      END;

   3329  5 000137   000144 710000 5                  TRA     s:3334

      118     3330    6                 ELSE DO;

      119     3331    6                      FPT_FECTL.V.HALT# = '0'B;

   3331  5 000140   000031 236000 xsym               LDQ     B_VECTNIL+25
         5 000141   000010 356000 4                  ANSQ    FPT_FECTL+8

      120     3332    6                      FPT_FECTL.V.START# = '1'B;

PL6.E3A0      #001=JCP$CITE File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:17 Page:16   
   3332  5 000142   040000 236003                    LDQ     16384,DU
         5 000143   000010 256000 4                  ORSQ    FPT_FECTL+8

      121     3333    6                      END;

      122     3334    5                 FPT_FECTL.V.FEP# = FEX;

   3334  5 000144   200003 236100                    LDQ     FEX,,AUTO
         5 000145   000007 756000 4                  STQ     FPT_FECTL+7

      123     3335    5                 CALL M$FECTL (FPT_FECTL)

   3335  5 000146   000000 630400 4                  EPPR0   FPT_FECTL
         5 000147   560017 713400                    CLIMB   alt,+57359
         5 000150   401000 401760                    pmme    nvectors=3
         5 000151   000153 702000 5                  TSX2    s:3337
         5 000152   000156 710000 5                  TRA     s:3340

      124     3336    6                 WHENALTRETURN DO;

      125     3337    6                     KL_FETBL.KTYP(FEX) = %KLKT_NONE#;

   3337  5 000153   200003 720100                    LXL0    FEX,,AUTO
         5 000154   000010 236000 6                  LDQ     8
         5 000155   000000 356010 xsym               ANSQ    KL_FETBL,X0

      126     3338    6                   END;

      127     3339    5                END;

      128     3340    4                 END;

   3340  5 000156   200003 235100                    LDA     FEX,,AUTO
         5 000157   000001 035007                    ADLA    1,DL
         5 000160   200003 755100                    STA     FEX,,AUTO
         5 000161   000144 115007                    CMPA    100,DL
         5 000162   000102 602000 5                  TNC     s:3314
PL6.E3A0      #001=JCP$CITE File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:17 Page:17   

      129     3341    3                 END;

   3341  5 000163   000167 710000 5                  TRA     s:3345

      130     3342    2            CASE (JCEV_UGJOB#);

      131     3343    2              CALL JGG$UGJOB;

   3343  5 000164   000002 631400 xsym               EPPR1   B_VECTNIL+2
         5 000165   000000 701000 xent               TSX1    JGG$UGJOB
         5 000166   000000 011000                    NOP     0

      132     3344    2            END;

      133     3345    1           RETURN;

   3345  5 000167   000000 702200 xent               TSX2  ! X66_ARET
      134     3346    1   END JCP$CITE;
      135     3347        %EOD;

PL6.E3A0      #001=JCP$CITE File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:17 Page:18   
--  Include file information  --

   OC_SUBS_C.:E05TOU  is referenced.
   KL_NETWORK_M.:E05TOU  is referenced.
   OC$MESSHD_C.:E05TOU  is referenced.
   KL_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   KL_SUBS_C.:E05TOU  is referenced.
   KI_SUBS_C.:E05TOU  is referenced.
   JP_MACRO_C.:E05TOU  is referenced.
   JM$STRUCT.:E05TOU  is referenced.
   JG_GHOSTS_C.:E05TOU  is referenced.
   JG_EVID_C.:E05TOU  is referenced.
   JC_SUBS_C.:E05TOU  is referenced.
   JC_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   JC_MACRO_C.:E05TOU  is referenced.
   IA_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure JCP$CITE.
PL6.E3A0      #001=JCP$CITE File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:17 Page:19   

 **** Variables and constants ****

  ****  Section 002 RoData JCP$CITE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    42-0-0/w STRC(27)    r     1 IA_CITE                   43-0-0/w STRC(180)   r     1 JM_CITE
    50-0-0/w STRC(108)   r     1 JP_CITE                   26-0-0/d CHAR(8)     r     1 J_GOOSE
     4-0-0/d CHAR(8)     r     1 J_MBS                     12-0-0/d CHAR(8)     r     1 J_PRESCAN

  ****  Section 004  Data  JCP$CITE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    26-0-0/w STRC(288)   r     1 CSCG_STA                   0-0-0/d STRC(360)   r     1 FPT_FECTL
    12-0-0/d STRC(432)   r     1 WR_CSCG

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w UBIN        r     1 FEX

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(1089)  r     1 HEADER_BUF                 0-0-0/c CHAR(300)   r     1 JC_CSMBF
     0-0-0/w BIT         r     1 JC_SUSR                    0-0-0/w BIT         r     1 JC_SUSROK
     0-0-0/w UBIN        r     1 JC_TBOOT
     0-0-0/b BIT         r     1 JC_WAITING(0:35)
     0-0-0/c STRC(2700)  r     1 KBCHS
     0-0-0/w STRC        r     1 KL_FETBL(0:0)
PL6.E3A0      #001=JCP$CITE File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:17 Page:20   

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(54)    r     1 JC$CITE_OFF                0-0-0/w STRC(54)    r     1 JC$CITE_PCMP
     0-0-0N  NULL        r     1 M$CSCG


   Procedure JCP$CITE requires 120 words for executable code.
   Procedure JCP$CITE requires 4 words of local(AUTO) storage.
PL6.E3A0      #001=JCP$CITE File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:17 Page:21   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=JCP$CITE File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:17 Page:22   
          MINI XREF LISTING

CSCG_STA
      3251**DCL      3227--DCLINIT
CSCG_STA.MSGIDXT
      3261**DCL      3264--REDEF
CSCG_STA.STATION#
      3255**DCL      3300<<ASSIGN   3303<<ASSIGN   3306<<ASSIGN
FEX
      3191**DCL      3313<<DOINDEX  3321>>IF       3323>>IF       3326>>ASSIGN   3334>>ASSIGN   3337>>ASSIGN
FPT_FECTL
      3202**DCL      3335<>CALL
FPT_FECTL.V
      3203**DCL      3202--DCLINIT
FPT_FECTL.V.DMPSTART#
      3203**DCL      3204--REDEF
FPT_FECTL.V.FEP#
      3204**DCL      3334<<ASSIGN
FPT_FECTL.V.HALT#
      3204**DCL      3327<<ASSIGN   3331<<ASSIGN
FPT_FECTL.V.START#
      3205**DCL      3328<<ASSIGN   3332<<ASSIGN
HEADER_BUF.CNT
      3277**DCL      3314>>IF       3317>>ASSIGN
HEADER_BUF.HEADER#
      3277**DCL      3316>>ASSIGN
IA_CITE
      2997**DCL      3302--ASSIGN
IGN1
      3302**LABEL    3301--CALLALT
IGN2
      3305**LABEL    3304--CALLALT
IGN3
      3306**LABEL    3307--CALLALT
PL6.E3A0      #001=JCP$CITE File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:17 Page:23   
JC$CITE_OFF.USER
      3085**DCL      3291>>ASSIGN
JC$CITE_PCMP.CODE
      3026**DCL      3285>>DOCASE
JC$CITE_PCMP.USER
      3032**DCL      3287>>ASSIGN
JCE$EVENT
      3281**DCL-ENT  3289--CALL     3293--CALL
JC_CSMBF
      2974**DCL      2975--REDEF    3285--DOCASE   3287--ASSIGN   3291--ASSIGN
JC_SUSR
       293**DCL      3298<<ASSIGN
JC_SUSROK
       293**DCL      3295>>IF       3297<<ASSIGN
JC_TBOOT
      2982**DCL      3323>>IF
JC_WAITING
       293**DCL      3287<<ASSIGN   3288>>IF       3291<<ASSIGN   3292>>IF
JGG$UGJOB
      3282**DCL-ENT  3343--CALL
JM_CITE
      3124**DCL      3299--ASSIGN
JM_CITE.ACCT
      3141**DCL      3144--REDEF
JP_CITE
      3174**DCL      3305--ASSIGN
JP_CITE.SYSID
      3183**DCL      3185--REDEF
J_GOOSE
      2966**DCL      3303>>ASSIGN
J_MBS
      2957**DCL      3300>>ASSIGN
J_PRESCAN
      2960**DCL      3306>>ASSIGN
KBCHS.KIN#
      2976**DCL      3318<<ASSIGN
PL6.E3A0      #001=JCP$CITE File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:17 Page:24   
KBCHS.TXT.CNT
      2980**DCL      3317<<ASSIGN
KBCHS.TXT.MSG
      2981**DCL      3316<<ASSIGN
KLI$KBOOT
      3280**DCL-ENT  3319--CALL
KL_AUTOFAIL.FLAGS
      2045**DCL      2046--REDEF
KL_AUTOFAIL.MSGID
      2041**DCL      2042--REDEF
KL_AUTOFAIL.WSN
      2048**DCL      2049--REDEF
KL_FEMSG.FLAGS
      1995**DCL      1996--REDEF
KL_FEMSG.MSGID
      1991**DCL      1992--REDEF
KL_FEMSG.WSN
      1998**DCL      1999--REDEF
KL_FETBL.BOSS
      1938**DCL      3323>>IF
KL_FETBL.DEBUG
      1939**DCL      3321>>IF
KL_FETBL.KTYP
      1941**DCL      3326<<ASSIGN   3337<<ASSIGN
KL_NETWORK_BUF.TERMINAL_ID.TERM
      2185**DCL      2194--REDEF
KL_NETWORK_KEY.KEY.TERMID.TERM
      2111**DCL      2120--REDEF
KL_RDBF.FEL#
      1954**DCL      1955--REDEF
KL_TMSG.FLAGS
      2017**DCL      2018--REDEF
KL_TMSG.MSGID
      2013**DCL      2014--REDEF
KL_TMSG.WSN
      2020**DCL      2021--REDEF
PL6.E3A0      #001=JCP$CITE File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:17 Page:25   
M$FECTL
        72**DCL-ENT  3335--CALL
M$WRITE
        44**DCL-ENT  3301--CALL     3304--CALL     3307--CALL
WR_CSCG
      3225**DCL      3301<>CALL     3304<>CALL     3307<>CALL
WR_CSCG.BUF_
      3225**DCL      3299<<ASSIGN   3302<<ASSIGN   3305<<ASSIGN
WR_CSCG.STATION_
      3227**DCL      3227--REDEF
WR_CSCG.V
      3228**DCL      3225--DCLINIT
WR_CSCG.V.DVBYTE.VFC#
      3234**DCL      3234--REDEF

PL6.E3A0      #002=JCP$CSRD File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:18 Page:26   
      136        1        /*T***********************************************************/
      137        2        /*T*                                                         */
      138        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      139        4        /*T*                                                         */
      140        5        /*T***********************************************************/
      141        6        JCP$CSRD: PROC;
      142        7        /*D* NAME:        JCP$CSRD
      143        8             PURPOSE:     To handle a read complete on station SLUG on CG/CSCG
      144        9             CALL:        CALL JCP$CSRD;
      145       10             DESCRIPTION: JCP$CSRD is called whenever a read complete event for
      146       11                          SLUG on CG/CSCG reaches the top of SLUG's event queue.
      147       12                          At this time, JCP$CSRD handles the read results and
      148       13                          returns. The read results may consist of several kinds:
      149       14                             1) Console ghost request from KEYIN
      150       15                             2) FEP control KEYINs
      151       16                             3) ACCTLG KEYIN
      152       17                             4) SLUG ZAP processing
      153       18                             5) M$GJOB request to start a ghost
      154       19                             6) An event citation to SLUG
      155       20                          The read data is processed and JCP$CSRD RETURNs.
      156       21        */
      157       22    1   DCL CADR BIT(36) ALIGNED;
      158       23        %INCLUDE CP_6;
      159      104        %INCLUDE JC_MACRO_C;
      160      218        %INCLUDE JC_DATA_R;
      161      256        %INCLUDE JG_EVID_C;
      162      481        %INCLUDE JG_DATA_R;
      163      551        %INCLUDE OC_MESSHD_C;
      164      604        %INCLUDE OC_SUBS_C;
      165     1335    1   DCL M$CSCG DCB;
      166     1336    1   DCL I SBIN;
      167     1337        %VLP_STATION (FPTN=JC_RPLYSTA,STCLASS=SYMREF);
      168     1364        %FPT_WRITE (FPTN=WR_KEYIN,STCLASS=STATIC,DCB=M$CSCG);
      169     1395        %OC_MESSHD_W (NAME=KEY_RSP,STCLASS=STATIC,NPARMS=3);
      170     1408    1         2 *(0:2) UBIN BYTE UNAL INIT(1,1,1),
      171     1409    1         2 PHASE UBIN BYTE UNAL,
      172     1410    1         2 WAITING UBIN BYTE UNAL,
PL6.E3A0      #002=JCP$CSRD File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:18 Page:27   
      173     1411    1         2 NOUSERS UBIN BYTE UNAL;
      174     1412    1   DCL JC_CSRD UBIN WORD SYMREF;
      175     1413    1   DCL JC_CSMBF CHAR(300) SYMREF;
      176     1414    1   DCL 1 KINHDR REDEF JC_CSMBF,
      177     1415    1         2 KIN# UBIN(18) UNAL,
      178     1416    1         2 CADDR BIT(18) UNAL,
      179     1417    1         2 REST CHAR(296) UNAL;
      180     1418    1   DCL JGG$KGHOST ENTRY;
      181     1419    1   DCL JCP$CITE ENTRY;
      182     1420    1   DCL JCP$ZAP ENTRY;
      183     1421    1   DCL JCP$ZIP ENTRY;
      184     1422    1   DCL JCS$CLACLG ENTRY;
      185     1423    1   DCL KLI$KBOOT ENTRY;
      186     1424    2           DO CASE(KINHDR.KIN#);
      187     1425    2            CASE(KEY_GHOST#);
      188     1426    2              CALL JGG$KGHOST;             /* From KEYIN...console ghost logon   */
      189     1427    2            CASE(KEY_BOOTFEP#,KEY_DUMPFEP#,KEY_STOPFEP#,KEY_STARTFEP#,KEY_FEPW#,
              1427                     KEY_BROAD#,KEY_HEAD#,KEY_SALL#,
      190     1428    2                KEY_SENDFEP#,KEY_ENABLE#,KEY_DISABLE#,KEY_KILL#,KEY_CRASHFEP#,
      191     1429    2                KEY_FEPS#,KEY_NODES#,KEY_HOSTS#,KEY_DISCT#,KEY_DISCC#,
      192     1430    2                KEY_EFEP#,KEY_XFEP#);
      193     1431    2               IF JC_SUSR
      194     1432    2                 THEN CALL KLI$KBOOT;
      195     1433    2                 ELSE CALL SNDRSP(NOFEPS_MSG#) ALTRET(OUT);
      196     1434    2            CASE(KEY_QUIET#,KEY_ERROR#,KEY_RETRY#,KEY_PROCEED#,KEY_FIRMLOAD#,KEY_DEVS#,
              1434                     KEY_FROG2NA);
      197     1435    2              CALL KLI$KBOOT;
      198     1436    2            CASE(KEY_ACCTLG#);
      199     1437    2              CALL JCS$CLACLG;
      200     1438    2            CASE(KEY_SLUGZAP#);
      201     1439    2              CALL JCP$ZIP;
      202     1440    2            CASE(KEY_ZAP#);
      203     1441    2              CALL JCP$ZAP;
      204     1442    2              RETURN;
      205     1443    2            CASE(KEY_OKTOZAP#);            /* ZAP request from KEYIN             */
      206     1444    2              IF JC_PHASE=5
      207     1445    2              THEN KEY_RSP.FCN = OC_ZOK;
PL6.E3A0      #002=JCP$CSRD File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:18 Page:28   
      208     1446    3              ELSE DO;
      209     1447    3                 KEY_RSP.FCN = OC_WR;
      210     1448    3                 KEY_RSP.MSG# = NOZAP_MSG#;
      211     1449    3                 KEY_RSP.CADDR = KINHDR.CADDR;
      212     1450    3                 END;
      213     1451    2              WR_KEYIN.BUF_ = VECTOR(KEY_RSP);
      214     1452    2              CALL M$WRITE (WR_KEYIN) ALTRET(IGNORE);
      215     1453    2   IGNORE:    ;
      216     1454    2            CASE(KEY_STARTUP#);            /* !!STARTUP KEYIN                    */
      217     1455    2              KEY_RSP.CADDR = KINHDR.CADDR;
      218     1456    2              CALL JCP$STRTUPMSGC;
      219     1457    2            CASE(ELSE);
      220     1458    2               CALL SNDRSP(UNIMP_MSG#) ALTRET(OUT);
      221     1459    2            CASE(0);
      222     1460    2              CALL JCP$CITE;
      223     1461    2            END;
      224     1462    1   OUT:    ;
      225     1463    1           JC_CSRD=1;
      226     1464    1           RETURN;
      227     1465        %EJECT;
PL6.E3A0      #002=JCP$CSRD File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:18 Page:29   
      228     1466    1   JCP$STRTUPMSG: ENTRY;
      229     1467        /*D* NAME:        JCP$STRTUPMSG
      230     1468             PURPOSE:     To put out a message describing the startup phasing
      231     1469             CALL:        CALL JCP$STRTUPMSG;
      232     1470             DESCRIPTION: JCP$STRTUPMSG writes a message to the system console
      233     1471                          describing the current state of STARTUP.
      234     1472
      235     1473                          Entry point JCP$STRTUPMSGC does the same thing to the
      236     1474                          specific console already in KEY_RSP.CADDR.
      237     1475        */
      238     1476    1           KEY_RSP.CADDR = M_SYS;
      239     1477        /**/
      240     1478    1   JCP$STRTUPMSGC: ENTRY;
      241     1479        /**/
      242     1480    1           KEY_RSP.MSG# = STRTUP_MSG#;
      243     1481    1           KEY_RSP.FCN = OC_WR;
      244     1482    1           KEY_RSP.PHASE = JC_PHASE;
      245     1483    1         I = 35;
      246     1484    2         DO WHILE(I>0 AND JC_WAITING(I)='0'B);
      247     1485    2           I = I-1;
      248     1486    2           END;
      249     1487    1         IF I>0
      250     1488    1           THEN KEY_RSP.WAITING = I;
      251     1489    1           ELSE KEY_RSP.WAITING = 0;
      252     1490    1           IF JC_SUSR
      253     1491    1           THEN KEY_RSP.NOUSERS = 0;
      254     1492    1           ELSE KEY_RSP.NOUSERS = 1;
      255     1493
      256     1494    1           WR_KEYIN.BUF_ = VECTOR(KEY_RSP);
      257     1495    1           CALL M$WRITE(WR_KEYIN) ALTRET(IGNOR1);
      258     1496    1   IGNOR1: RETURN;
      259     1497        %EJECT;
PL6.E3A0      #002=JCP$CSRD File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:18 Page:30   
      260     1498    1   SNDRSP:  PROC(MSG#) ALTRET;
      261     1499        /*I* NAME:        SNDRSP
      262     1500             PURPOSE:     To send a response to the originating console
      263     1501             CALL:        CALL SNDRSP(MSG#) ALTRET(LBL);
      264     1502                             where MSG# is the keyin number
      265     1503             DESCRIPTION: A message of keyin number MSG# is written to
      266     1504                          KEYIN with no keyin sub fields. If the M$WRITE
      267     1505                          altrets, so does this procedure.
      268     1506        */
      269     1507    2   DCL MSG# UBIN;
      270     1508    2         JG_KRSP.CADDR = KINHDR.CADDR;
      271     1509    2         JG_KRSP.MSG# = MSG#;
      272     1510    2         WR_KEYIN.BUF_ = VECTOR(JG_KRSP);
      273     1511    2         CALL M$WRITE(WR_KEYIN) ALTRET(JUSTALT);
      274     1512    2         RETURN;
      275     1513    2   JUSTALT:  ALTRETURN;
      276     1514    2   END SNDRSP;
      277     1515    1   END JCP$CSRD;
      278     1516        %EOD;

PL6.E3A0      #002=JCP$CSRD File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:18 Page:31   
--  Include file information  --

   OC_SUBS_C.:E05TOU  is referenced.
   OC_MESSHD_C.:E05TOU  is referenced.
   OC$MESSHD_C.:E05TOU  is referenced.
   JG_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   JG_EVID_C.:E05TOU  is referenced.
   JC_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   JC_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure JCP$CSRD.

   Procedure JCP$CSRD requires 193 words for executable code.
   Procedure JCP$CSRD requires 8 words of local(AUTO) storage.

PL6.E3A0      #002=JCP$CSRD File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:18 Page:32   

 Object Unit name= JCP$CSRD                                   File name= JCP$PROCESS.:E05TOU
 UTS= JUL 29 '97 23:18:42.92 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$CSCG
    2   Data  even  none    19     23  JCP$CSRD
    3   Proc  even  none   193    301  JCP$CSRD
    4  RoData even  none     8     10  JCP$CSRD

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     3      0   yes            yes      Std        0  JCP$CSRD
     3    201                  yes      Std        0  JCP$STRTUPMSG
     3    206                  yes      Std        0  JCP$STRTUPMSGC

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       0 JGG$KGHOST
         yes           Std       0 JCP$CITE
         yes           Std       0 KLI$KBOOT
         yes           Std       0 JCS$CLACLG
         yes           Std       0 JCP$ZIP
         yes           Std       0 JCP$ZAP
                       nStd      0 X66_AUTO_0
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #002=JCP$CSRD File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:18 Page:33   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  JC_PHASE                              JC_WAITING
     JC_SUSR                               JG_KRSP                               M$CSCG
     JC_CSRD                               JC_CSMBF                              B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #002=JCP$CSRD File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:18 Page:34   


      136        1        /*T***********************************************************/
      137        2        /*T*                                                         */
      138        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      139        4        /*T*                                                         */
      140        5        /*T***********************************************************/
      141        6        JCP$CSRD: PROC;

      6  3 000000   000000 700200 xent  JCP$CSRD     TSX0  ! X66_AUTO_0
         3 000001   000010 000000                    ZERO    8,0

      142        7        /*D* NAME:        JCP$CSRD
      143        8             PURPOSE:     To handle a read complete on station SLUG on CG/CSCG
      144        9             CALL:        CALL JCP$CSRD;
      145       10             DESCRIPTION: JCP$CSRD is called whenever a read complete event for
      146       11                          SLUG on CG/CSCG reaches the top of SLUG's event queue.
      147       12                          At this time, JCP$CSRD handles the read results and
      148       13                          returns. The read results may consist of several kinds:
      149       14                             1) Console ghost request from KEYIN
      150       15                             2) FEP control KEYINs
      151       16                             3) ACCTLG KEYIN
      152       17                             4) SLUG ZAP processing
      153       18                             5) M$GJOB request to start a ghost
      154       19                             6) An event citation to SLUG
      155       20                          The read data is processed and JCP$CSRD RETURNs.
      156       21        */
      157       22    1   DCL CADR BIT(36) ALIGNED;
      158       23        %INCLUDE CP_6;
      159      104        %INCLUDE JC_MACRO_C;
      160      218        %INCLUDE JC_DATA_R;
      161      256        %INCLUDE JG_EVID_C;
      162      481        %INCLUDE JG_DATA_R;
      163      551        %INCLUDE OC_MESSHD_C;
      164      604        %INCLUDE OC_SUBS_C;
      165     1335    1   DCL M$CSCG DCB;
      166     1336    1   DCL I SBIN;
      167     1337        %VLP_STATION (FPTN=JC_RPLYSTA,STCLASS=SYMREF);
PL6.E3A0      #002=JCP$CSRD File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:18 Page:35   
      168     1364        %FPT_WRITE (FPTN=WR_KEYIN,STCLASS=STATIC,DCB=M$CSCG);
      169     1395        %OC_MESSHD_W (NAME=KEY_RSP,STCLASS=STATIC,NPARMS=3);
      170     1408    1         2 *(0:2) UBIN BYTE UNAL INIT(1,1,1),
      171     1409    1         2 PHASE UBIN BYTE UNAL,
      172     1410    1         2 WAITING UBIN BYTE UNAL,
      173     1411    1         2 NOUSERS UBIN BYTE UNAL;
      174     1412    1   DCL JC_CSRD UBIN WORD SYMREF;
      175     1413    1   DCL JC_CSMBF CHAR(300) SYMREF;
      176     1414    1   DCL 1 KINHDR REDEF JC_CSMBF,
      177     1415    1         2 KIN# UBIN(18) UNAL,
      178     1416    1         2 CADDR BIT(18) UNAL,
      179     1417    1         2 REST CHAR(296) UNAL;
      180     1418    1   DCL JGG$KGHOST ENTRY;
      181     1419    1   DCL JCP$CITE ENTRY;
      182     1420    1   DCL JCP$ZAP ENTRY;
      183     1421    1   DCL JCP$ZIP ENTRY;
      184     1422    1   DCL JCS$CLACLG ENTRY;
      185     1423    1   DCL KLI$KBOOT ENTRY;
      186     1424    2           DO CASE(KINHDR.KIN#);

   1424  3 000002   000000 220000 xsym               LDX0    JC_CSMBF
         3 000003   000070 100003                    CMPX0   56,DU
         3 000004   000006 602010 3                  TNC     s:1424+4,X0
         3 000005   000166 710000 3                  TRA     s:1458
         3 000006   000173 710000 3                  TRA     s:1460
         3 000007   000166 710000 3                  TRA     s:1458
         3 000010   000076 710000 3                  TRA     s:1426
         3 000011   000121 710000 3                  TRA     s:1437
         3 000012   000166 710000 3                  TRA     s:1458
         3 000013   000102 710000 3                  TRA     s:1431
         3 000014   000102 710000 3                  TRA     s:1431
         3 000015   000102 710000 3                  TRA     s:1431
         3 000016   000102 710000 3                  TRA     s:1431
         3 000017   000102 710000 3                  TRA     s:1431
         3 000020   000102 710000 3                  TRA     s:1431
         3 000021   000102 710000 3                  TRA     s:1431
         3 000022   000102 710000 3                  TRA     s:1431
PL6.E3A0      #002=JCP$CSRD File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:18 Page:36   
         3 000023   000125 710000 3                  TRA     s:1439
         3 000024   000102 710000 3                  TRA     s:1431
         3 000025   000160 710000 3                  TRA     s:1455
         3 000026   000135 710000 3                  TRA     s:1444
         3 000027   000166 710000 3                  TRA     s:1458
         3 000030   000115 710000 3                  TRA     s:1435
         3 000031   000115 710000 3                  TRA     s:1435
         3 000032   000115 710000 3                  TRA     s:1435
         3 000033   000115 710000 3                  TRA     s:1435
         3 000034   000115 710000 3                  TRA     s:1435
         3 000035   000115 710000 3                  TRA     s:1435
         3 000036   000102 710000 3                  TRA     s:1431
         3 000037   000102 710000 3                  TRA     s:1431
         3 000040   000102 710000 3                  TRA     s:1431
         3 000041   000102 710000 3                  TRA     s:1431
         3 000042   000102 710000 3                  TRA     s:1431
         3 000043   000102 710000 3                  TRA     s:1431
         3 000044   000102 710000 3                  TRA     s:1431
         3 000045   000115 710000 3                  TRA     s:1435
         3 000046   000102 710000 3                  TRA     s:1431
         3 000047   000102 710000 3                  TRA     s:1431
         3 000050   000102 710000 3                  TRA     s:1431
         3 000051   000102 710000 3                  TRA     s:1431
         3 000052   000166 710000 3                  TRA     s:1458
         3 000053   000166 710000 3                  TRA     s:1458
         3 000054   000166 710000 3                  TRA     s:1458
         3 000055   000166 710000 3                  TRA     s:1458
         3 000056   000166 710000 3                  TRA     s:1458
         3 000057   000166 710000 3                  TRA     s:1458
         3 000060   000166 710000 3                  TRA     s:1458
         3 000061   000166 710000 3                  TRA     s:1458
         3 000062   000166 710000 3                  TRA     s:1458
         3 000063   000166 710000 3                  TRA     s:1458
         3 000064   000166 710000 3                  TRA     s:1458
         3 000065   000166 710000 3                  TRA     s:1458
         3 000066   000166 710000 3                  TRA     s:1458
         3 000067   000166 710000 3                  TRA     s:1458
PL6.E3A0      #002=JCP$CSRD File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:18 Page:37   
         3 000070   000166 710000 3                  TRA     s:1458
         3 000071   000166 710000 3                  TRA     s:1458
         3 000072   000166 710000 3                  TRA     s:1458
         3 000073   000166 710000 3                  TRA     s:1458
         3 000074   000166 710000 3                  TRA     s:1458
         3 000075   000131 710000 3                  TRA     s:1441

      187     1425    2            CASE(KEY_GHOST#);

      188     1426    2              CALL JGG$KGHOST;             /* From KEYIN...console ghost logon   */

   1426  3 000076   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 000077   000000 701000 xent               TSX1    JGG$KGHOST
         3 000100   000000 011000                    NOP     0
         3 000101   000176 710000 3                  TRA     OUT

      189     1427    2            CASE(KEY_BOOTFEP#,KEY_DUMPFEP#,KEY_STOPFEP#,KEY_STARTFEP#,KEY_FEPW#,
              1427                     KEY_BROAD#,KEY_HEAD#,KEY_SALL#,

      190     1428    2                KEY_SENDFEP#,KEY_ENABLE#,KEY_DISABLE#,KEY_KILL#,KEY_CRASHFEP#,
      191     1429    2                KEY_FEPS#,KEY_NODES#,KEY_HOSTS#,KEY_DISCT#,KEY_DISCC#,
      192     1430    2                KEY_EFEP#,KEY_XFEP#);
      193     1431    2               IF JC_SUSR

   1431  3 000102   000000 234000 xsym               SZN     JC_SUSR
         3 000103   000110 605000 3                  TPL     s:1433

      194     1432    2                 THEN CALL KLI$KBOOT;

   1432  3 000104   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 000105   000000 701000 xent               TSX1    KLI$KBOOT
         3 000106   000000 011000                    NOP     0
         3 000107   000176 710000 3                  TRA     OUT

      195     1433    2                 ELSE CALL SNDRSP(NOFEPS_MSG#) ALTRET(OUT);

   1433  3 000110   000000 236000 4                  LDQ     0
PL6.E3A0      #002=JCP$CSRD File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:18 Page:38   
         3 000111   200007 756100                    STQ     I+3,,AUTO
         3 000112   000261 701000 3                  TSX1    SNDRSP
         3 000113   000176 702000 3                  TSX2    OUT
         3 000114   000176 710000 3                  TRA     OUT

      196     1434    2           CASE(KEY_QUIET#,KEY_ERROR#,KEY_RETRY#,KEY_PROCEED#,KEY_FIRMLOAD#,KEY_DEVS#,
              1434                     KEY_FROG2NA);

      197     1435    2              CALL KLI$KBOOT;

   1435  3 000115   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 000116   000000 701000 xent               TSX1    KLI$KBOOT
         3 000117   000000 011000                    NOP     0
         3 000120   000176 710000 3                  TRA     OUT

      198     1436    2            CASE(KEY_ACCTLG#);

      199     1437    2              CALL JCS$CLACLG;

   1437  3 000121   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 000122   000000 701000 xent               TSX1    JCS$CLACLG
         3 000123   000000 011000                    NOP     0
         3 000124   000176 710000 3                  TRA     OUT

      200     1438    2            CASE(KEY_SLUGZAP#);

      201     1439    2              CALL JCP$ZIP;

   1439  3 000125   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 000126   000000 701000 xent               TSX1    JCP$ZIP
         3 000127   000000 011000                    NOP     0
         3 000130   000176 710000 3                  TRA     OUT

      202     1440    2            CASE(KEY_ZAP#);

      203     1441    2              CALL JCP$ZAP;

PL6.E3A0      #002=JCP$CSRD File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:18 Page:39   
   1441  3 000131   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 000132   000000 701000 xent               TSX1    JCP$ZAP
         3 000133   000000 011000                    NOP     0

      204     1442    2              RETURN;

   1442  3 000134   000000 702200 xent               TSX2  ! X66_ARET

      205     1443    2            CASE(KEY_OKTOZAP#);            /* ZAP request from KEYIN             */

      206     1444    2              IF JC_PHASE=5

   1444  3 000135   000000 235000 xsym               LDA     JC_PHASE
         3 000136   000005 115007                    CMPA    5,DL
         3 000137   000143 601000 3                  TNZ     s:1447

      207     1445    2              THEN KEY_RSP.FCN = OC_ZOK;

   1445  3 000140   000013 236007                    LDQ     11,DL
         3 000141   000015 552004 2                  STBQ    KEY_RSP+1,'04'O
         3 000142   000151 710000 3                  TRA     s:1451

      208     1446    3              ELSE DO;

      209     1447    3                 KEY_RSP.FCN = OC_WR;

   1447  3 000143   000003 236007                    LDQ     3,DL
         3 000144   000015 552004 2                  STBQ    KEY_RSP+1,'04'O

      210     1448    3                 KEY_RSP.MSG# = NOZAP_MSG#;

   1448  3 000145   000142 221003                    LDX1    98,DU
         3 000146   000014 441000 2                  SXL1    KEY_RSP

      211     1449    3                 KEY_RSP.CADDR = KINHDR.CADDR;

   1449  3 000147   000000 722000 xsym               LXL2    JC_CSMBF
PL6.E3A0      #002=JCP$CSRD File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:18 Page:40   
         3 000150   000014 742000 2                  STX2    KEY_RSP

      212     1450    3                 END;

      213     1451    2              WR_KEYIN.BUF_ = VECTOR(KEY_RSP);

   1451  3 000151   000002 237000 4                  LDAQ    2
         3 000152   000004 757000 2                  STAQ    WR_KEYIN+4

      214     1452    2              CALL M$WRITE (WR_KEYIN) ALTRET(IGNORE);

   1452  3 000153   000000 630400 2                  EPPR0   WR_KEYIN
         3 000154   440001 713400                    CLIMB   alt,write
         3 000155   401400 401760                    pmme    nvectors=4
         3 000156   000157 702000 3                  TSX2    IGNORE

   1451  3 000157   000176 710000 3     IGNORE       TRA     OUT

      215     1453    2   IGNORE:    ;
      216     1454    2            CASE(KEY_STARTUP#);            /* !!STARTUP KEYIN                    */

      217     1455    2              KEY_RSP.CADDR = KINHDR.CADDR;

   1455  3 000160   000000 721000 xsym               LXL1    JC_CSMBF
         3 000161   000014 741000 2                  STX1    KEY_RSP

      218     1456    2              CALL JCP$STRTUPMSGC;

   1456  3 000162   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 000163   000206 701000 3                  TSX1    s:1478
         3 000164   000000 011000                    NOP     0
         3 000165   000176 710000 3                  TRA     OUT

      219     1457    2            CASE(ELSE);

      220     1458    2               CALL SNDRSP(UNIMP_MSG#) ALTRET(OUT);

PL6.E3A0      #002=JCP$CSRD File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:18 Page:41   
   1458  3 000166   000004 236000 4                  LDQ     4
         3 000167   200007 756100                    STQ     I+3,,AUTO
         3 000170   000261 701000 3                  TSX1    SNDRSP
         3 000171   000176 702000 3                  TSX2    OUT
         3 000172   000176 710000 3                  TRA     OUT

      221     1459    2            CASE(0);

      222     1460    2              CALL JCP$CITE;

   1460  3 000173   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 000174   000000 701000 xent               TSX1    JCP$CITE
         3 000175   000000 011000                    NOP     0

      223     1461    2            END;

   1458  3 000176                       OUT          null
      224     1462    1   OUT:    ;
      225     1463    1           JC_CSRD=1;

   1463  3 000176   000001 235007                    LDA     1,DL
         3 000177   000000 755000 xsym               STA     JC_CSRD

      226     1464    1           RETURN;

   1464  3 000200   000000 702200 xent               TSX2  ! X66_ARET

      227     1465        %EJECT;
PL6.E3A0      #002=JCP$CSRD File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:18 Page:42   
      228     1466    1   JCP$STRTUPMSG: ENTRY;

   1466  3 000201   000000 700200 xent  JCP$STRTUPM* TSX0  ! X66_AUTO_0
         3 000202   000010 000000                    ZERO    8,0

      229     1467        /*D* NAME:        JCP$STRTUPMSG
      230     1468             PURPOSE:     To put out a message describing the startup phasing
      231     1469             CALL:        CALL JCP$STRTUPMSG;
      232     1470             DESCRIPTION: JCP$STRTUPMSG writes a message to the system console
      233     1471                          describing the current state of STARTUP.
      234     1472
      235     1473                          Entry point JCP$STRTUPMSGC does the same thing to the
      236     1474                          specific console already in KEY_RSP.CADDR.
      237     1475        */
      238     1476    1           KEY_RSP.CADDR = M_SYS;

   1476  3 000203   200000 220003                    LDX0    65536,DU
         3 000204   000014 740000 2                  STX0    KEY_RSP
         3 000205   000210 710000 3                  TRA     s:1480

      239     1477        /**/
      240     1478    1   JCP$STRTUPMSGC: ENTRY;

   1478  3 000206   000000 700200 xent  JCP$STRTUPM* TSX0  ! X66_AUTO_0
         3 000207   000010 000000                    ZERO    8,0

      241     1479        /**/
      242     1480    1           KEY_RSP.MSG# = STRTUP_MSG#;

   1480  3 000210   000141 220003                    LDX0    97,DU
         3 000211   000014 440000 2                  SXL0    KEY_RSP

      243     1481    1           KEY_RSP.FCN = OC_WR;

   1481  3 000212   000003 236007                    LDQ     3,DL
         3 000213   000015 552004 2                  STBQ    KEY_RSP+1,'04'O

PL6.E3A0      #002=JCP$CSRD File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:18 Page:43   
      244     1482    1           KEY_RSP.PHASE = JC_PHASE;

   1482  3 000214   000000 236000 xsym               LDQ     JC_PHASE
         3 000215   000021 552004 2                  STBQ    KEY_RSP+5,'04'O

      245     1483    1         I = 35;

   1483  3 000216   000043 235007                    LDA     35,DL
         3 000217   200004 755100                    STA     I,,AUTO

      246     1484    2         DO WHILE(I>0 AND JC_WAITING(I)='0'B);

   1484  3 000220   000223 710000 3                  TRA     s:1486

      247     1485    2           I = I-1;

   1485  3 000221   000001 336007                    LCQ     1,DL
         3 000222   200004 056100                    ASQ     I,,AUTO

      248     1486    2           END;

   1486  3 000223   200004 235100                    LDA     I,,AUTO
         3 000224   000233 604400 3                  TMOZ    s:1487
         3 000225   000227 605000 3                  TPL     s:1486+4
         3 000226   000044 035003                    ADLA    36,DU
         3 000227   000000 066405                    CMPB    filb='0'B
         3 000230   000000 000001 xsym               BDSC    JC_WAITING,A             by=0,bit=0,n=1
         3 000231   000002 000022 xsym               BDSC    B_VECTNIL+2              by=0,bit=0,n=18
         3 000232   000221 600000 3                  TZE     s:1485

      249     1487    1         IF I>0

   1487  3 000233   200004 235100                    LDA     I,,AUTO
         3 000234   000241 604400 3                  TMOZ    s:1489

      250     1488    1           THEN KEY_RSP.WAITING = I;

PL6.E3A0      #002=JCP$CSRD File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:18 Page:44   
   1488  3 000235   200004 236100                    LDQ     I,,AUTO
         3 000236   000033 736000                    QLS     27
         3 000237   000022 552040 2                  STBQ    KEY_RSP+6,'40'O
         3 000240   000243 710000 3                  TRA     s:1490

      251     1489    1           ELSE KEY_RSP.WAITING = 0;

   1489  3 000241   000000 236003                    LDQ     0,DU
         3 000242   000022 552040 2                  STBQ    KEY_RSP+6,'40'O

      252     1490    1           IF JC_SUSR

   1490  3 000243   000000 234000 xsym               SZN     JC_SUSR
         3 000244   000250 605000 3                  TPL     s:1492

      253     1491    1           THEN KEY_RSP.NOUSERS = 0;

   1491  3 000245   000000 236003                    LDQ     0,DU
         3 000246   000022 552020 2                  STBQ    KEY_RSP+6,'20'O
         3 000247   000252 710000 3                  TRA     s:1494

      254     1492    1           ELSE KEY_RSP.NOUSERS = 1;

   1492  3 000250   000001 236003                    LDQ     1,DU
         3 000251   000022 552020 2                  STBQ    KEY_RSP+6,'20'O

      255     1493
      256     1494    1           WR_KEYIN.BUF_ = VECTOR(KEY_RSP);

   1494  3 000252   000002 237000 4                  LDAQ    2
         3 000253   000004 757000 2                  STAQ    WR_KEYIN+4

      257     1495    1           CALL M$WRITE(WR_KEYIN) ALTRET(IGNOR1);

   1495  3 000254   000000 630400 2                  EPPR0   WR_KEYIN
         3 000255   440001 713400                    CLIMB   alt,write
         3 000256   401400 401760                    pmme    nvectors=4
PL6.E3A0      #002=JCP$CSRD File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:18 Page:45   
         3 000257   000260 702000 3                  TSX2    IGNOR1

      258     1496    1   IGNOR1: RETURN;

   1496  3 000260   000000 702200 xent  IGNOR1       TSX2  ! X66_ARET

      259     1497        %EJECT;
PL6.E3A0      #002=JCP$CSRD File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:18 Page:46   
      260     1498    1   SNDRSP:  PROC(MSG#) ALTRET;

   1498  3 000261   200006 741300       SNDRSP       STX1  ! I+2,,AUTO

      261     1499        /*I* NAME:        SNDRSP
      262     1500             PURPOSE:     To send a response to the originating console
      263     1501             CALL:        CALL SNDRSP(MSG#) ALTRET(LBL);
      264     1502                             where MSG# is the keyin number
      265     1503             DESCRIPTION: A message of keyin number MSG# is written to
      266     1504                          KEYIN with no keyin sub fields. If the M$WRITE
      267     1505                          altrets, so does this procedure.
      268     1506        */
      269     1507    2   DCL MSG# UBIN;
      270     1508    2         JG_KRSP.CADDR = KINHDR.CADDR;

   1508  3 000262   000000 720000 xsym               LXL0    JC_CSMBF
         3 000263   000000 740000 xsym               STX0    JG_KRSP

      271     1509    2         JG_KRSP.MSG# = MSG#;

   1509  3 000264   200007 470500                    LDP0    @MSG#,,AUTO
         3 000265   000000 722100                    LXL2    0,,PR0
         3 000266   000000 442000 xsym               SXL2    JG_KRSP

      272     1510    2         WR_KEYIN.BUF_ = VECTOR(JG_KRSP);

   1510  3 000267   000006 237000 4                  LDAQ    6
         3 000270   000004 757000 2                  STAQ    WR_KEYIN+4

      273     1511    2         CALL M$WRITE(WR_KEYIN) ALTRET(JUSTALT);

   1511  3 000271   000000 630400 2                  EPPR0   WR_KEYIN
         3 000272   440001 713400                    CLIMB   alt,write
         3 000273   401400 401760                    pmme    nvectors=4
         3 000274   000277 702000 3                  TSX2    JUSTALT

      274     1512    2         RETURN;
PL6.E3A0      #002=JCP$CSRD File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:18 Page:47   

   1512  3 000275   200006 221300                    LDX1  ! I+2,,AUTO
         3 000276   000001 702211                    TSX2  ! 1,X1

      275     1513    2   JUSTALT:  ALTRETURN;

   1513  3 000277   200006 221300       JUSTALT      LDX1  ! I+2,,AUTO
         3 000300   000000 702211                    TSX2  ! 0,X1
      276     1514    2   END SNDRSP;
      277     1515    1   END JCP$CSRD;
      278     1516        %EOD;

PL6.E3A0      #002=JCP$CSRD File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:18 Page:48   
--  Include file information  --

   OC_SUBS_C.:E05TOU  is referenced.
   OC_MESSHD_C.:E05TOU  is referenced.
   OC$MESSHD_C.:E05TOU  is referenced.
   JG_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   JG_EVID_C.:E05TOU  is referenced.
   JC_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   JC_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure JCP$CSRD.
PL6.E3A0      #002=JCP$CSRD File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:18 Page:49   

 **** Variables and constants ****

  ****  Section 002  Data  JCP$CSRD

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    14-0-0/c STRC(234)   r     1 KEY_RSP                    0-0-0/d STRC(432)   r     1 WR_KEYIN

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     7-0-0/w PTR         r     1 @MSG#                      4-0-0/w SBIN        r     1 I
    *0-0-0/w UBIN        r     1 MSG#

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c CHAR(300)   r     1 JC_CSMBF                   0-0-0/w UBIN        r     1 JC_CSRD
     0-0-0/w UBIN        r     1 JC_PHASE                   0-0-0/w BIT         r     1 JC_SUSR
     0-0-0/b BIT         r     1 JC_WAITING(0:35)
     0-0-0/w STRC(432)   r     1 JG_KRSP                    0-0-0/c STRC(2700)  r     1 KINHDR

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0N  NULL        r     1 M$CSCG


   Procedure JCP$CSRD requires 193 words for executable code.
PL6.E3A0      #002=JCP$CSRD File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:18 Page:50   
   Procedure JCP$CSRD requires 8 words of local(AUTO) storage.
PL6.E3A0      #002=JCP$CSRD File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:18 Page:51   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=JCP$CSRD File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:18 Page:52   
          MINI XREF LISTING

I
      1336**DCL      1483<<ASSIGN   1484>>DOWHILE  1484>>DOWHILE  1485<<ASSIGN   1485>>ASSIGN   1487>>IF
      1488>>ASSIGN
IGNOR1
      1496**LABEL    1495--CALLALT
IGNORE
      1451**LABEL    1452--CALLALT
JCP$CITE
      1419**DCL-ENT  1460--CALL
JCP$STRTUPMSGC
      1478**ENTRY    1456--CALL
JCP$ZAP
      1420**DCL-ENT  1441--CALL
JCP$ZIP
      1421**DCL-ENT  1439--CALL
JCS$CLACLG
      1422**DCL-ENT  1437--CALL
JC_CSMBF
      1413**DCL      1414--REDEF
JC_CSRD
      1412**DCL      1463<<ASSIGN
JC_PHASE
       226**DCL      1444>>IF       1482>>ASSIGN
JC_RPLYSTA.MSGIDXT
      1359**DCL      1362--REDEF
JC_SUSR
       226**DCL      1431>>IF       1490>>IF
JC_WAITING
       226**DCL      1484>>DOWHILE
JGG$KGHOST
      1418**DCL-ENT  1426--CALL
JG_KRSP
PL6.E3A0      #002=JCP$CSRD File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:18 Page:53   
       528**DCL      1510--ASSIGN
JG_KRSP.CADDR
       529**DCL      1508<<ASSIGN
JG_KRSP.FLAGS
       535**DCL       536--REDEF
JG_KRSP.MSG#
       530**DCL      1509<<ASSIGN
JG_KRSP.MSGID
       531**DCL       532--REDEF
JG_KRSP.WSN
       538**DCL       539--REDEF
JUSTALT IN PROCEDURE SNDRSP
      1513**LABEL    1511--CALLALT
KEY_RSP
      1396**DCL      1451--ASSIGN   1494--ASSIGN
KEY_RSP.CADDR
      1397**DCL      1449<<ASSIGN   1455<<ASSIGN   1476<<ASSIGN
KEY_RSP.FCN
      1402**DCL      1445<<ASSIGN   1447<<ASSIGN   1481<<ASSIGN
KEY_RSP.FLAGS
      1403**DCL      1404--REDEF
KEY_RSP.MSG#
      1398**DCL      1448<<ASSIGN   1480<<ASSIGN
KEY_RSP.MSGID
      1399**DCL      1400--REDEF
KEY_RSP.NOUSERS
      1411**DCL      1491<<ASSIGN   1492<<ASSIGN
KEY_RSP.PHASE
      1409**DCL      1482<<ASSIGN
KEY_RSP.WAITING
      1410**DCL      1488<<ASSIGN   1489<<ASSIGN
KINHDR.CADDR
      1416**DCL      1449>>ASSIGN   1455>>ASSIGN   1508>>ASSIGN
KINHDR.KIN#
      1415**DCL      1424>>DOCASE
KLI$KBOOT
PL6.E3A0      #002=JCP$CSRD File=JCP$PROCESS.:E05TSI                             TUE 07/29/97 23:18 Page:54   
      1423**DCL-ENT  1432--CALL     1435--CALL
M$WRITE
        33**DCL-ENT  1452--CALL     1495--CALL     1511--CALL
MSG# IN PROCEDURE SNDRSP
      1507**DCL      1498--PROC     1509>>ASSIGN
OUT
      1458**LABEL    1433--CALLALT  1458--CALLALT
SNDRSP
      1498**PROC     1433--CALL     1458--CALL
WR_KEYIN
      1381**DCL      1452<>CALL     1495<>CALL     1511<>CALL
WR_KEYIN.BUF_
      1381**DCL      1451<<ASSIGN   1494<<ASSIGN   1510<<ASSIGN
WR_KEYIN.STATION_
      1383**DCL      1383--REDEF
WR_KEYIN.V
      1384**DCL      1381--DCLINIT
WR_KEYIN.V.DVBYTE.VFC#
      1390**DCL      1390--REDEF

PL6.E3A0      #003=JCP$HLPRD File=JCP$PROCESS.:E05TSI                            TUE 07/29/97 23:19 Page:55   
      279        1        /*T***********************************************************/
      280        2        /*T*                                                         */
      281        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      282        4        /*T*                                                         */
      283        5        /*T***********************************************************/
      284        6        JCP$HLPRD: PROC;
      285        7        /*D* NAME:        JCP$HLPRD
      286        8             PURPOSE:     To handle read completes on HLPADMIN station on CG/HLPCG
      287        9             CALL:        CALL JCP$HLPRD;
      288       10             DESCRIPTION: JCP$HLPRD is called whenever a read complete event for
      289       11                          station HLPADMIN on CG/HLPCG comes to the top of SLUG's
      290       12                          event queue. At this point, JCP$HLPRD calls the
      291       13                          appropriate procedure to handle the read data, sets
      292       14                          JC_FERD =1 to cause SLUG to re-post the read, and
      293       15                          RETURNs.
      294       16        */
      295       17        %INCLUDE CP_6;
      296       98        %INCLUDE KL_AFCN_C;
      297      199        %INCLUDE KL_DATA_R;
      298      663    1   DCL M$HLPF DCB;
      299      664    1   DCL M$NETCON DCB;
      300      665    1   DCL M$NETWORK DCB;
      301      666    1   DCL M$PROF DCB;
      302      667    1   DCL M$WSNF DCB;
      303      668        %FPT_TRUNC;
      304      682    1   DCL JC_FERD UBIN SYMREF;
      305      683    1   DCL KL_MSGTYP CHAR(8) SYMREF;
      306      684    1   DCL KLC$CONFIG ENTRY;
      307      685    1   DCL KLH$HLP ENTRY;
      308      686    1   DCL KLI$AMSG ENTRY;
      309      687    1   DCL KLI$FEEV ENTRY;
      310      688    1   DCL KLI$FEPCHANGE ENTRY;
      311      689
      312      690
      313      691
      314      692    1           IF KL_MSGTYP='*AUEV'
      315      693    1           THEN CALL KLI$FEEV;
PL6.E3A0      #003=JCP$HLPRD File=JCP$PROCESS.:E05TSI                            TUE 07/29/97 23:19 Page:56   
      316      694    2           ELSE DO CASE(KL_RDBF.CODE);
      317      695    2             CASE(IGA_SGN,IGA_SGNRSP,IGA_HSGN,IGA_RQSPRO);
      318      696    2               CALL KLH$HLP;
      319      697    2             CASE(IGA_FEPST);
      320      698    2               CALL KLI$FEPCHANGE;
      321      699    2             CASE(IGA_CONFIGRQS,IGA_CONFIGRSP);
      322      700    2               CALL KLC$CONFIG;
      323      701    2             CASE(ELSE);
      324      702    2               CALL KLI$AMSG;
      325      703    2             END;
      326      704    1        KL_RDBF.CODE = 0;
      327      705    1        FPT_TRUNC.V.DCB# = DCBNUM(M$HLPF);
      328      706    1        CALL M$TRUNC (FPT_TRUNC)
      329      707    2        WHENALTRETURN DO;
      330      708    2             END;
      331      709    1        FPT_TRUNC.V.DCB# = DCBNUM(M$PROF);
      332      710    1        CALL M$TRUNC (FPT_TRUNC)
      333      711    2        WHENALTRETURN DO;
      334      712    2             END;
      335      713    1        FPT_TRUNC.V.DCB# = DCBNUM(M$NETWORK);
      336      714    1        CALL M$TRUNC (FPT_TRUNC)
      337      715    2        WHENALTRETURN DO;
      338      716    2             END;
      339      717    1        FPT_TRUNC.V.DCB# = DCBNUM(M$NETCON);
      340      718    1        CALL M$TRUNC (FPT_TRUNC)
      341      719    2        WHENALTRETURN DO;
      342      720    2             END;
      343      721    1        FPT_TRUNC.V.DCB# = DCBNUM(M$WSNF);
      344      722    1        CALL M$TRUNC (FPT_TRUNC)
      345      723    2        WHENALTRETURN DO;
      346      724    2             END;
      347      725    1           JC_FERD = 1;
      348      726    1           RETURN;
      349      727    1   END JCP$HLPRD;
      350      728        %EOD;

PL6.E3A0      #003=JCP$HLPRD File=JCP$PROCESS.:E05TSI                            TUE 07/29/97 23:19 Page:57   
--  Include file information  --

   KL_NETWORK_M.:E05TOU  is referenced.
   OC$MESSHD_C.:E05TOU  is referenced.
   KL_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   KL_AFCN_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure JCP$HLPRD.

   Procedure JCP$HLPRD requires 146 words for executable code.
   Procedure JCP$HLPRD requires 4 words of local(AUTO) storage.

PL6.E3A0      #003=JCP$HLPRD File=JCP$PROCESS.:E05TSI                            TUE 07/29/97 23:19 Page:58   

 Object Unit name= JCP$HLPRD                                  File name= JCP$PROCESS.:E05TOU
 UTS= JUL 29 '97 23:19:16.60 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$HLP
    2   DCB   even  none     0      0  M$HLPF
    3   DCB   even  none     0      0  M$NETCON
    4   DCB   even  none     0      0  M$NETWORK
    5   DCB   even  none     0      0  M$PROF
    6   DCB   even  none     0      0  M$WSNF
    7   Data  even  none     4      4  JCP$HLPRD
    8  RoData even  UTS      2      2  JCP$HLPRD
    9   Proc  even  none   146    222  JCP$HLPRD

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     9      0   yes            yes      Std        0  JCP$HLPRD
PL6.E3A0      #003=JCP$HLPRD File=JCP$PROCESS.:E05TSI                            TUE 07/29/97 23:19 Page:59   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       0 KLI$FEEV
         yes           Std       0 KLH$HLP
         yes           Std       0 KLI$FEPCHANGE
         yes           Std       0 KLC$CONFIG
         yes           Std       0 KLI$AMSG
                       nStd      0 X66_AUTO_0
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  M$HLP                                 KL_RDBF
     M$HLPF                                M$NETCON                              M$NETWORK
     M$PROF                                M$WSNF                                JC_FERD
     KL_MSGTYP                             B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #003=JCP$HLPRD File=JCP$PROCESS.:E05TSI                            TUE 07/29/97 23:19 Page:60   


      279        1        /*T***********************************************************/
      280        2        /*T*                                                         */
      281        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      282        4        /*T*                                                         */
      283        5        /*T***********************************************************/
      284        6        JCP$HLPRD: PROC;

      6  9 000000   000000 700200 xent  JCP$HLPRD    TSX0  ! X66_AUTO_0
         9 000001   000004 000000                    ZERO    4,0

      285        7        /*D* NAME:        JCP$HLPRD
      286        8             PURPOSE:     To handle read completes on HLPADMIN station on CG/HLPCG
      287        9             CALL:        CALL JCP$HLPRD;
      288       10             DESCRIPTION: JCP$HLPRD is called whenever a read complete event for
      289       11                          station HLPADMIN on CG/HLPCG comes to the top of SLUG's
      290       12                          event queue. At this point, JCP$HLPRD calls the
      291       13                          appropriate procedure to handle the read data, sets
      292       14                          JC_FERD =1 to cause SLUG to re-post the read, and
      293       15                          RETURNs.
      294       16        */
      295       17        %INCLUDE CP_6;
      296       98        %INCLUDE KL_AFCN_C;
      297      199        %INCLUDE KL_DATA_R;
      298      663    1   DCL M$HLPF DCB;
      299      664    1   DCL M$NETCON DCB;
      300      665    1   DCL M$NETWORK DCB;
      301      666    1   DCL M$PROF DCB;
      302      667    1   DCL M$WSNF DCB;
      303      668        %FPT_TRUNC;
      304      682    1   DCL JC_FERD UBIN SYMREF;
      305      683    1   DCL KL_MSGTYP CHAR(8) SYMREF;
      306      684    1   DCL KLC$CONFIG ENTRY;
      307      685    1   DCL KLH$HLP ENTRY;
      308      686    1   DCL KLI$AMSG ENTRY;
      309      687    1   DCL KLI$FEEV ENTRY;
      310      688    1   DCL KLI$FEPCHANGE ENTRY;
PL6.E3A0      #003=JCP$HLPRD File=JCP$PROCESS.:E05TSI                            TUE 07/29/97 23:19 Page:61   
      311      689
      312      690
      313      691
      314      692    1           IF KL_MSGTYP='*AUEV'

    692  9 000002   040000 106400                    CMPC    fill='040'O
         9 000003   000000 000010 xsym               ADSC9   KL_MSGTYP                cn=0,n=8
         9 000004   000000 000005 8                  ADSC9   0                        cn=0,n=5
         9 000005   000012 601000 9                  TNZ     s:694

      315      693    1           THEN CALL KLI$FEEV;

    693  9 000006   000002 631400 xsym               EPPR1   B_VECTNIL+2
         9 000007   000000 701000 xent               TSX1    KLI$FEEV
         9 000010   000000 011000                    NOP     0
         9 000011   000145 710000 9                  TRA     s:704

      316      694    2           ELSE DO CASE(KL_RDBF.CODE);

    694  9 000012   000000 236000 xsym               LDQ     KL_RDBF
         9 000013   000033 772000                    QRL     27
         9 000014   000107 116007                    CMPQ    71,DL
         9 000015   000017 602006 9                  TNC     s:694+5,QL
         9 000016   000142 710000 9                  TRA     s:702
         9 000017   000142 710000 9                  TRA     s:702
         9 000020   000142 710000 9                  TRA     s:702
         9 000021   000126 710000 9                  TRA     s:696
         9 000022   000142 710000 9                  TRA     s:702
         9 000023   000142 710000 9                  TRA     s:702
         9 000024   000142 710000 9                  TRA     s:702
         9 000025   000142 710000 9                  TRA     s:702
         9 000026   000142 710000 9                  TRA     s:702
         9 000027   000142 710000 9                  TRA     s:702
         9 000030   000142 710000 9                  TRA     s:702
         9 000031   000142 710000 9                  TRA     s:702
         9 000032   000142 710000 9                  TRA     s:702
         9 000033   000142 710000 9                  TRA     s:702
PL6.E3A0      #003=JCP$HLPRD File=JCP$PROCESS.:E05TSI                            TUE 07/29/97 23:19 Page:62   
         9 000034   000142 710000 9                  TRA     s:702
         9 000035   000142 710000 9                  TRA     s:702
         9 000036   000142 710000 9                  TRA     s:702
         9 000037   000142 710000 9                  TRA     s:702
         9 000040   000142 710000 9                  TRA     s:702
         9 000041   000142 710000 9                  TRA     s:702
         9 000042   000142 710000 9                  TRA     s:702
         9 000043   000142 710000 9                  TRA     s:702
         9 000044   000142 710000 9                  TRA     s:702
         9 000045   000142 710000 9                  TRA     s:702
         9 000046   000126 710000 9                  TRA     s:696
         9 000047   000142 710000 9                  TRA     s:702
         9 000050   000142 710000 9                  TRA     s:702
         9 000051   000142 710000 9                  TRA     s:702
         9 000052   000142 710000 9                  TRA     s:702
         9 000053   000142 710000 9                  TRA     s:702
         9 000054   000142 710000 9                  TRA     s:702
         9 000055   000142 710000 9                  TRA     s:702
         9 000056   000142 710000 9                  TRA     s:702
         9 000057   000132 710000 9                  TRA     s:698
         9 000060   000142 710000 9                  TRA     s:702
         9 000061   000142 710000 9                  TRA     s:702
         9 000062   000142 710000 9                  TRA     s:702
         9 000063   000142 710000 9                  TRA     s:702
         9 000064   000142 710000 9                  TRA     s:702
         9 000065   000142 710000 9                  TRA     s:702
         9 000066   000142 710000 9                  TRA     s:702
         9 000067   000142 710000 9                  TRA     s:702
         9 000070   000142 710000 9                  TRA     s:702
         9 000071   000142 710000 9                  TRA     s:702
         9 000072   000142 710000 9                  TRA     s:702
         9 000073   000142 710000 9                  TRA     s:702
         9 000074   000142 710000 9                  TRA     s:702
         9 000075   000142 710000 9                  TRA     s:702
         9 000076   000142 710000 9                  TRA     s:702
         9 000077   000142 710000 9                  TRA     s:702
         9 000100   000142 710000 9                  TRA     s:702
PL6.E3A0      #003=JCP$HLPRD File=JCP$PROCESS.:E05TSI                            TUE 07/29/97 23:19 Page:63   
         9 000101   000142 710000 9                  TRA     s:702
         9 000102   000142 710000 9                  TRA     s:702
         9 000103   000142 710000 9                  TRA     s:702
         9 000104   000142 710000 9                  TRA     s:702
         9 000105   000142 710000 9                  TRA     s:702
         9 000106   000142 710000 9                  TRA     s:702
         9 000107   000142 710000 9                  TRA     s:702
         9 000110   000142 710000 9                  TRA     s:702
         9 000111   000142 710000 9                  TRA     s:702
         9 000112   000142 710000 9                  TRA     s:702
         9 000113   000142 710000 9                  TRA     s:702
         9 000114   000142 710000 9                  TRA     s:702
         9 000115   000142 710000 9                  TRA     s:702
         9 000116   000142 710000 9                  TRA     s:702
         9 000117   000126 710000 9                  TRA     s:696
         9 000120   000142 710000 9                  TRA     s:702
         9 000121   000142 710000 9                  TRA     s:702
         9 000122   000136 710000 9                  TRA     s:700
         9 000123   000136 710000 9                  TRA     s:700
         9 000124   000142 710000 9                  TRA     s:702
         9 000125   000126 710000 9                  TRA     s:696

      317      695    2             CASE(IGA_SGN,IGA_SGNRSP,IGA_HSGN,IGA_RQSPRO);

      318      696    2               CALL KLH$HLP;

    696  9 000126   000002 631400 xsym               EPPR1   B_VECTNIL+2
         9 000127   000000 701000 xent               TSX1    KLH$HLP
         9 000130   000000 011000                    NOP     0
         9 000131   000145 710000 9                  TRA     s:704

      319      697    2             CASE(IGA_FEPST);

      320      698    2               CALL KLI$FEPCHANGE;

    698  9 000132   000002 631400 xsym               EPPR1   B_VECTNIL+2
         9 000133   000000 701000 xent               TSX1    KLI$FEPCHANGE
PL6.E3A0      #003=JCP$HLPRD File=JCP$PROCESS.:E05TSI                            TUE 07/29/97 23:19 Page:64   
         9 000134   000000 011000                    NOP     0
         9 000135   000145 710000 9                  TRA     s:704

      321      699    2             CASE(IGA_CONFIGRQS,IGA_CONFIGRSP);

      322      700    2               CALL KLC$CONFIG;

    700  9 000136   000002 631400 xsym               EPPR1   B_VECTNIL+2
         9 000137   000000 701000 xent               TSX1    KLC$CONFIG
         9 000140   000000 011000                    NOP     0
         9 000141   000145 710000 9                  TRA     s:704

      323      701    2             CASE(ELSE);

      324      702    2               CALL KLI$AMSG;

    702  9 000142   000002 631400 xsym               EPPR1   B_VECTNIL+2
         9 000143   000000 701000 xent               TSX1    KLI$AMSG
         9 000144   000000 011000                    NOP     0

      325      703    2             END;

      326      704    1        KL_RDBF.CODE = 0;

    704  9 000145   000000 236003                    LDQ     0,DU
         9 000146   000000 552040 xsym               STBQ    KL_RDBF,'40'O

      327      705    1        FPT_TRUNC.V.DCB# = DCBNUM(M$HLPF);

    705  9 000147   000000 236007 xsym               LDQ     M$HLPF,DL
         9 000150   000000 620006                    EAX0    0,QL
         9 000151   000002 740000 7                  STX0    FPT_TRUNC+2

      328      706    1        CALL M$TRUNC (FPT_TRUNC)

    706  9 000152   000000 630400 7                  EPPR0   FPT_TRUNC
         9 000153   450003 713400                    CLIMB   alt,+20483
PL6.E3A0      #003=JCP$HLPRD File=JCP$PROCESS.:E05TSI                            TUE 07/29/97 23:19 Page:65   
         9 000154   400000 401760                    pmme    nvectors=1
         9 000155   000157 702000 9                  TSX2    s:709
         9 000156   000157 710000 9                  TRA     s:709

      329      707    2        WHENALTRETURN DO;

      330      708    2             END;

      331      709    1        FPT_TRUNC.V.DCB# = DCBNUM(M$PROF);

    709  9 000157   000000 236007 xsym               LDQ     M$PROF,DL
         9 000160   000000 620006                    EAX0    0,QL
         9 000161   000002 740000 7                  STX0    FPT_TRUNC+2

      332      710    1        CALL M$TRUNC (FPT_TRUNC)

    710  9 000162   000000 630400 7                  EPPR0   FPT_TRUNC
         9 000163   450003 713400                    CLIMB   alt,+20483
         9 000164   400000 401760                    pmme    nvectors=1
         9 000165   000167 702000 9                  TSX2    s:713
         9 000166   000167 710000 9                  TRA     s:713

      333      711    2        WHENALTRETURN DO;

      334      712    2             END;

      335      713    1        FPT_TRUNC.V.DCB# = DCBNUM(M$NETWORK);

    713  9 000167   000000 236007 xsym               LDQ     M$NETWORK,DL
         9 000170   000000 620006                    EAX0    0,QL
         9 000171   000002 740000 7                  STX0    FPT_TRUNC+2

      336      714    1        CALL M$TRUNC (FPT_TRUNC)

    714  9 000172   000000 630400 7                  EPPR0   FPT_TRUNC
         9 000173   450003 713400                    CLIMB   alt,+20483
         9 000174   400000 401760                    pmme    nvectors=1
PL6.E3A0      #003=JCP$HLPRD File=JCP$PROCESS.:E05TSI                            TUE 07/29/97 23:19 Page:66   
         9 000175   000177 702000 9                  TSX2    s:717
         9 000176   000177 710000 9                  TRA     s:717

      337      715    2        WHENALTRETURN DO;

      338      716    2             END;

      339      717    1        FPT_TRUNC.V.DCB# = DCBNUM(M$NETCON);

    717  9 000177   000000 236007 xsym               LDQ     M$NETCON,DL
         9 000200   000000 620006                    EAX0    0,QL
         9 000201   000002 740000 7                  STX0    FPT_TRUNC+2

      340      718    1        CALL M$TRUNC (FPT_TRUNC)

    718  9 000202   000000 630400 7                  EPPR0   FPT_TRUNC
         9 000203   450003 713400                    CLIMB   alt,+20483
         9 000204   400000 401760                    pmme    nvectors=1
         9 000205   000207 702000 9                  TSX2    s:721
         9 000206   000207 710000 9                  TRA     s:721

      341      719    2        WHENALTRETURN DO;

      342      720    2             END;

      343      721    1        FPT_TRUNC.V.DCB# = DCBNUM(M$WSNF);

    721  9 000207   000000 236007 xsym               LDQ     M$WSNF,DL
         9 000210   000000 620006                    EAX0    0,QL
         9 000211   000002 740000 7                  STX0    FPT_TRUNC+2

      344      722    1        CALL M$TRUNC (FPT_TRUNC)

    722  9 000212   000000 630400 7                  EPPR0   FPT_TRUNC
         9 000213   450003 713400                    CLIMB   alt,+20483
         9 000214   400000 401760                    pmme    nvectors=1
         9 000215   000217 702000 9                  TSX2    s:725
PL6.E3A0      #003=JCP$HLPRD File=JCP$PROCESS.:E05TSI                            TUE 07/29/97 23:19 Page:67   
         9 000216   000217 710000 9                  TRA     s:725

      345      723    2        WHENALTRETURN DO;

      346      724    2             END;

      347      725    1           JC_FERD = 1;

    725  9 000217   000001 235007                    LDA     1,DL
         9 000220   000000 755000 xsym               STA     JC_FERD

      348      726    1           RETURN;

    726  9 000221   000000 702200 xent               TSX2  ! X66_ARET
      349      727    1   END JCP$HLPRD;
      350      728        %EOD;

PL6.E3A0      #003=JCP$HLPRD File=JCP$PROCESS.:E05TSI                            TUE 07/29/97 23:19 Page:68   
--  Include file information  --

   KL_NETWORK_M.:E05TOU  is referenced.
   OC$MESSHD_C.:E05TOU  is referenced.
   KL_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   KL_AFCN_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure JCP$HLPRD.
PL6.E3A0      #003=JCP$HLPRD File=JCP$PROCESS.:E05TSI                            TUE 07/29/97 23:19 Page:69   

 **** Variables and constants ****

  ****  Section 007  Data  JCP$HLPRD

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(144)   r     1 FPT_TRUNC

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN        r     1 JC_FERD                    0-0-0/c CHAR(8)     r     1 KL_MSGTYP
     0-0-0/w STRC(1260)  r     1 KL_RDBF

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0N  NULL        r     1 M$HLPF                     0-0-0N  NULL        r     1 M$NETCON
     0-0-0N  NULL        r     1 M$NETWORK                  0-0-0N  NULL        r     1 M$PROF
     0-0-0N  NULL        r     1 M$WSNF


   Procedure JCP$HLPRD requires 146 words for executable code.
   Procedure JCP$HLPRD requires 4 words of local(AUTO) storage.
PL6.E3A0      #003=JCP$HLPRD File=JCP$PROCESS.:E05TSI                            TUE 07/29/97 23:19 Page:70   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=JCP$HLPRD File=JCP$PROCESS.:E05TSI                            TUE 07/29/97 23:19 Page:71   
          MINI XREF LISTING

FPT_TRUNC
       679**DCL       706<>CALL      710<>CALL      714<>CALL      718<>CALL      722<>CALL
FPT_TRUNC.V
       679**DCL       679--DCLINIT
FPT_TRUNC.V.DCB#
       679**DCL       705<<ASSIGN    709<<ASSIGN    713<<ASSIGN    717<<ASSIGN    721<<ASSIGN
JC_FERD
       682**DCL       725<<ASSIGN
KLC$CONFIG
       684**DCL-ENT   700--CALL
KLH$HLP
       685**DCL-ENT   696--CALL
KLI$AMSG
       686**DCL-ENT   702--CALL
KLI$FEEV
       687**DCL-ENT   693--CALL
KLI$FEPCHANGE
       688**DCL-ENT   698--CALL
KL_AUTOFAIL.FLAGS
       503**DCL       504--REDEF
KL_AUTOFAIL.MSGID
       499**DCL       500--REDEF
KL_AUTOFAIL.WSN
       506**DCL       507--REDEF
KL_FEMSG.FLAGS
       453**DCL       454--REDEF
KL_FEMSG.MSGID
       449**DCL       450--REDEF
KL_FEMSG.WSN
       456**DCL       457--REDEF
KL_MSGTYP
       683**DCL       692>>IF
PL6.E3A0      #003=JCP$HLPRD File=JCP$PROCESS.:E05TSI                            TUE 07/29/97 23:19 Page:72   
KL_NETWORK_BUF.TERMINAL_ID.TERM
       643**DCL       652--REDEF
KL_NETWORK_KEY.KEY.TERMID.TERM
       569**DCL       578--REDEF
KL_RDBF.CODE
       410**DCL       694>>DOCASE    704<<ASSIGN
KL_RDBF.FEL#
       412**DCL       413--REDEF
KL_TMSG.FLAGS
       475**DCL       476--REDEF
KL_TMSG.MSGID
       471**DCL       472--REDEF
KL_TMSG.WSN
       478**DCL       479--REDEF
M$HLPF
       663**DCL       705>>ASSIGN
M$NETCON
       664**DCL       717>>ASSIGN
M$NETWORK
       665**DCL       713>>ASSIGN
M$PROF
       666**DCL       709>>ASSIGN
M$TRUNC
        27**DCL-ENT   706--CALL      710--CALL      714--CALL      718--CALL      722--CALL
M$WSNF
       667**DCL       721>>ASSIGN

PL6.E3A0      #004=JCP$PHASE File=JCP$PROCESS.:E05TSI                            TUE 07/29/97 23:19 Page:73   
      351        1        /*T***********************************************************/
      352        2        /*T*                                                         */
      353        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      354        4        /*T*                                                         */
      355        5        /*T***********************************************************/
      356        6        JCP$PHASE: PROC;
      357        7        /*D* NAME:        JCP$PHASE
      358        8              PURPOSE:     To handle any phase complete event for SLUG
      359        9             CALL:        CALL JCP$PHASE;
      360       10             INPUT:       JC_PHASE - The current phase
      361       11             OUTPUT:      JC_PHASE - The new current phase - one more than entry
      362       12             DESCRIPTION: JCP$PHASE is called every time a phase becomes complete.
      363       13                          SLUG brings the system ghosts up using a phasing system.
      364       14                          Whenever the current phase becomes complete, an event
      365       15                          denoting phase complete is posted and this procedure
      366       16                          is called to start on the next phase. The phasing is as
      367       17                          follows:
      368       18                             Phase 1: SUPER ghost to build any of his files needed.
      369       19                             Phase 2: KEYIN, PIG and DINGO are started.
      370       20                                      This phase is completed when DINGO finishes
      371       21                                      and both KEYIN and PIG are finished initializing.
      372       22                                      This is detected in JSD$DEL after DINGO
      373       23                                      exits and KEYIN and PIG are in state
      374       24                                      SW or SIOWC.
      375       25                             Phase 3: ELF, OUTSYM, INSYM, PRESCAN, FROG and MBS are
      376       26                                      started. This phase is complete when all of
      377       27                                      these ghosts have reported back to SLUG that
      378       28                                      they have completed their initialization.
      379       29                             Phase 4: i) A message is sent to all the ghosts
      380       30                                         started in phase 3 stating that it is
      381       31                                         now OK to do anything but start users.
      382       32                                     ii) The rest of the MING ghosts are started.
      383       33                                    iii) RCVR2 is started.
      384       34                                     iv) A message is sent to MONKEY telling him
      385       35                                         that the NOUSERS keyin is no longer legal
      386       36                                      v) If the NOUSERS bit is reset, a message
      387       37                                         is sent to SLUG stating that it is
PL6.E3A0      #004=JCP$PHASE File=JCP$PROCESS.:E05TSI                            TUE 07/29/97 23:19 Page:74   
      388       38                                         now OK to start users. SLUG will, as
      389       39                                         a result, send messages to MBS, GOOSE
      390       40                                         and PRESCAN telling them that it is
      391       41                                         now OK to start users or PRESCAN jobfiles.
      392       42                             Phase 5: This phase is the normal running state of
      393       43                                      SLUG. All initialization has been completed;
      394       44                                      the system is 'OPEN FOR BUSINESS'.
      395       45        */
      396       46
      397       47
      398       48        %INCLUDE CP_6;
      399      129        %INCLUDE FI_MAC_C;
      400      499        %INCLUDE FOO_MAC_C;
      401     1247        %INCLUDE JC_MACRO_C;
      402     1361        %INCLUDE JC_DATA_R;
      403     1399        %INCLUDE JG_EVID_C;
      404     1624        %INCLUDE JG_GHOSTS_C;
      405     1714        %INCLUDE JM$STRUCT;
      406     2459        %INCLUDE JP_MACRO_C;
      407     2614        %INCLUDE KF$MSG_C;
      408     2681        %INCLUDE KF$MSG_SUBS;
      409     2727        %INCLUDE OC_SUBS_C;
      410     3458        %FI_CITE (FPTN=FI_CITE,STCLASS=CONSTANT,COD=FIEV_OPFB#);
      411     3502        %FO_CITE (FPTN=FO_CITE,STCLASS=CONSTANT,COD=FOEV_OPFB#);
      412     3561        %JC_CITE (FPTN=JC_CITE,STCLASS=CONSTANT,COD=JCEV_SUSR#);
      413     3611        %JM_CITE (FPTN=JM_CITE,STCLASS=CONSTANT,COD=JMEV_OPFB#);
      414     3661        %JP_CITE (FPTN=JP_CITE,STCLASS=CONSTANT,COD=JPEV_OPFB#);
      415     3693        %JC_CITE (FPTN=JC_PCMP,STCLASS=CONSTANT,COD=JCEV_PCMP#);
      416     3743        %JG_GHOSTS (ARRAY=NO,STCLASS=CONSTANT);
      417     3781    1   DCL 1 NOUSERS_MSG STATIC,
      418     3782    1         2 OCAX UBIN BYTE UNAL INIT(MKV_OCA$KMISC#),
      419     3783    1         2 KEY# UBIN BYTE UNAL INIT(KEY_BATCH#),
      420     3784    1         2 CADDR BIT(18) UNAL INIT('0'B),
      421     3785    1         2 FLAG UBIN WORD INIT(4);
      422     3786        %KF$MSG (FPTN=KF_CITE,STCLASS=AUTO);
      423     3791        %FPT_MONINFO (FPTN=FPT_MONINFO,STCLASS=CONSTANT,
      424     3792                      MONINFO=VLR_MONINFO,HEADER=HEADER_BUF);
PL6.E3A0      #004=JCP$PHASE File=JCP$PROCESS.:E05TSI                            TUE 07/29/97 23:19 Page:75   
      425     3807        %VLR_MONINFO (FPTN=VLR_MONINFO,STCLASS=STATIC);
      426     3825        %VLR_HEADER  (FPTN=HEADER_BUF,STCLASS="STATIC SYMDEF");
      427     3839        %FPT_WRITE (FPTN=WR_CSCG,STCLASS=STATIC,DCB=M$CSCG,STATION= CSCG_STA);
      428     3870        %VLP_STATION (FPTN=CSCG_STA,STCLASS=STATIC);
      429     3897    1   DCL M$CSCG DCB;
      430     3898    1   DCL JC_SUPER UBIN WORD SYMREF;
      431     3899    1   DCL JC_TBOOT UBIN WORD SYMREF;
      432     3900    1   DCL JCS$OPACLG ENTRY;
      433     3901    1   DCL JGI$SGHST ENTRY;
      434     3902    1   DCL JMM$INIT ENTRY;
      435     3903    1   DCL JCP$STRTUPMSG ENTRY;
      436     3904    1   DCL KLH$OPFILS ENTRY ALTRET;
      437     3905    1   DCL KLI$FESET ENTRY;
      438     3906        %EJECT;
PL6.E3A0      #004=JCP$PHASE File=JCP$PROCESS.:E05TSI                            TUE 07/29/97 23:19 Page:76   
      439     3907    1           IF JC_PHASE=5 THEN RETURN;      /* To ignore 'extra' phase completes  */
      440     3908    1           JC_PHASE = JC_PHASE+1;
      441     3909    2           DO CASE(JC_PHASE);
      442     3910    2            CASE(1);
      443     3911    2              CALL M$MONINFO (FPT_MONINFO) ALTRET(NOUSERS);
      444     3912    2              IF VLR_MONINFO.NOUSERS#
      445     3913    2                  AND JC_SUPER=0 /* Because if JC_SUPER~=0, we've already told */
      446     3914                                      /* MONKEY to simulate a NOUSERS keyin */
      447     3915    3              THEN DO;                     /* Tell MONKEY NOUSERS is set so      */
      448     3916                                                /* that he may tell the operator      */
      449     3917    3   NOUSERS:      NOUSERS_MSG.FLAG = 4;
      450     3918    3                 WR_CSCG.BUF_ = VECTOR(NOUSERS_MSG);
      451     3919    3                 CSCG_STA.STATION# = 'MONKEY';
      452     3920    3                 CALL M$WRITE (WR_CSCG) ALTRET(IGN9);
      453     3921    3   IGN9:         END;
      454     3922    2              IF JC_TBOOT=3                /* New files                          */
      455     3923    2                OR JC_SUPER~=0             /* Bad SUPER files                    */
      456     3924    2              THEN CALL JGI$SGHST;         /* To start SUPER                     */
      457     3925    3              ELSE DO;                     /* Nothing to do                      */
      458     3926    3                 WR_CSCG.BUF_ = VECTOR(JC_PCMP);
      459     3927    3                 CSCG_STA.STATION# = J_SLUG;
      460     3928    3                 CALL M$WRITE (WR_CSCG) ALTRET(IGN7);
      461     3929    3   IGN7:         END;
      462     3930    2            CASE(2);
      463     3931    2              CALL JGI$SGHST;              /* To start the phase 2 ghosts        */
      464     3932    2            CASE(3);
      465     3933    2             CALL JCS$OPACLG;
      466     3934    2              CALL KLH$OPFILS;
      467     3935    2             CALL KLI$FESET;
      468     3936    2              JC_WAITING(JG_MBS#) = '1'B;
      469     3937    2              CALL JGI$SGHST;              /* To start the phase 3 ghosts        */
      470     3938        /**/
      471     3939        /* MBS phase 3 initialization */
      472     3940        /**/
      473     3941    2              CALL JMM$INIT;
      474     3942    2            CASE(4);
      475     3943        /**/
PL6.E3A0      #004=JCP$PHASE File=JCP$PROCESS.:E05TSI                            TUE 07/29/97 23:19 Page:77   
      476     3944        /* Send an OPEN FOR BUSINESS message to INSYM, OUTSYM, FROG, MBS and PRESCAN */
      477     3945        /**/
      478     3946    2   INSYM:     WR_CSCG.BUF_ = VECTOR(FI_CITE);
      479     3947    2              CSCG_STA.STATION# = J_INSYM;
      480     3948    2              CALL M$WRITE (WR_CSCG) ALTRET(OUTSYM);
      481     3949    2   OUTSYM:    WR_CSCG.BUF_ = VECTOR(FO_CITE);
      482     3950    2              CSCG_STA.STATION# = J_OUTSYM;
      483     3951    2              CALL M$WRITE (WR_CSCG) ALTRET(FROG);
      484     3952    2   FROG:      WR_CSCG.BUF_ = VECTOR(KF_CITE);
      485     3953    2           KF_CITE.MSG_ID = %KF_MSGC_SLUG_SAYS_GO#;
      486     3954    2              CSCG_STA.STATION# = J_FROG;
      487     3955    2              CALL M$WRITE (WR_CSCG) ALTRET(MBS);
      488     3956    2   MBS:       WR_CSCG.BUF_ = VECTOR(JM_CITE);
      489     3957    2              CSCG_STA.STATION# = J_MBS;
      490     3958    2              CALL M$WRITE (WR_CSCG) ALTRET(PRESCAN);
      491     3959    2   PRESCAN:   WR_CSCG.BUF_ = VECTOR(JP_CITE);
      492     3960    2              CSCG_STA.STATION# = J_PRESCAN;
      493     3961    2              CALL M$WRITE (WR_CSCG) ALTRET(SGHST);
      494     3962        /**/
      495     3963        /* Start the phase 4 MING ghosts and RCVR2, CONTROL and ELAN */
      496     3964        /**/
      497     3965    2   SGHST:     CALL JGI$SGHST;
      498     3966        /**/
      499     3967        /* Send NOUSERS_MSG message to MONKEY saying NOUSERS ILLEGAL */
      500     3968        /**/
      501     3969    2              NOUSERS_MSG.FLAG = 6;
      502     3970    2              WR_CSCG.BUF_ = VECTOR(NOUSERS_MSG);
      503     3971    2              CSCG_STA.STATION# = 'MONKEY';
      504     3972    2              CALL M$WRITE (WR_CSCG) ALTRET(MONINFO);
      505     3973        /**/
      506     3974        /* Tell ghosts to start users if NOUSERS is reset */
      507     3975        /**/
      508     3976    2   MONINFO:   CALL M$MONINFO (FPT_MONINFO) ALTRET(SUSR);
      509     3977    2   SUSR:      JC_SUSROK = '1'B;
      510     3978    2              IF ~VLR_MONINFO.NOUSERS#
      511     3979    3              THEN DO;
      512     3980    3                 WR_CSCG.BUF_ = VECTOR(JC_CITE);
PL6.E3A0      #004=JCP$PHASE File=JCP$PROCESS.:E05TSI                            TUE 07/29/97 23:19 Page:78   
      513     3981    3                 CSCG_STA.STATION# = J_SLUG;
      514     3982    3                 CALL M$WRITE (WR_CSCG) ALTRET(IGN);
      515     3983    3   IGN:          END;
      516     3984        /**/
      517     3985        /* Post an event to SLUG saying that the current phase is complete. */
      518     3986        /**/
      519     3987    2              WR_CSCG.BUF_ = VECTOR(JC_PCMP);
      520     3988    2              CSCG_STA.STATION# = J_SLUG;
      521     3989    2              CALL M$WRITE (WR_CSCG) ALTRET(IGN5);
      522     3990    2   IGN5:      ;
      523     3991    2            CASE(5);
      524     3992    2              CALL JCP$STRTUPMSG;          /* Say that we're OPEN FOR BUSINESS   */
      525     3993    2            END;
      526     3994    1           RETURN;
      527     3995    1   END JCP$PHASE;
      528     3996        %EOD;

PL6.E3A0      #004=JCP$PHASE File=JCP$PROCESS.:E05TSI                            TUE 07/29/97 23:19 Page:79   
--  Include file information  --

   OC_SUBS_C.:E05TOU  is referenced.
   KF$MSG_SUBS.:E05TOU  is referenced.
   KF$MSG_C.:E05TOU  is referenced.
   JP_MACRO_C.:E05TOU  is referenced.
   JM$STRUCT.:E05TOU  is referenced.
   JG_GHOSTS_C.:E05TOU  is referenced.
   JG_EVID_C.:E05TOU  is referenced.
   JC_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   JC_MACRO_C.:E05TOU  is referenced.
   FOO_MAC_C.:E05TOU  is referenced.
   FI_MAC_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure JCP$PHASE.

   Procedure JCP$PHASE requires 166 words for executable code.
   Procedure JCP$PHASE requires 6 words of local(AUTO) storage.

PL6.E3A0      #004=JCP$PHASE File=JCP$PROCESS.:E05TSI                            TUE 07/29/97 23:19 Page:80   

 Object Unit name= JCP$PHASE                                  File name= JCP$PROCESS.:E05TOU
 UTS= JUL 29 '97 23:19:41.24 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  RoData even  UTS     66    102  JCP$PHASE
    2   Data  even  none    70    106  JCP$PHASE
    3   DCB   even  none     0      0  M$CSCG
    4   Proc  even  none   166    246  JCP$PHASE
    5  RoData even  none    14     16  JCP$PHASE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     4      0   yes            yes      Std        0  JCP$PHASE

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
    2     22  HEADER_BUF
PL6.E3A0      #004=JCP$PHASE File=JCP$PROCESS.:E05TSI                            TUE 07/29/97 23:19 Page:81   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       0 JGI$SGHST
 yes     yes           Std       0 KLH$OPFILS
         yes           Std       0 JCS$OPACLG
         yes           Std       0 KLI$FESET
         yes           Std       0 JMM$INIT
         yes           Std       0 JCP$STRTUPMSG
                       nStd      0 X66_AUTO_0
                       nStd      0 X66_ARET
                       Std       0 B_CONSPOOL_D

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  JC_PHASE                              JC_WAITING
     JC_SUSROK                             M$CSCG                                JC_SUPER
     JC_TBOOT                              B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #004=JCP$PHASE File=JCP$PROCESS.:E05TSI                            TUE 07/29/97 23:19 Page:82   


      351        1        /*T***********************************************************/
      352        2        /*T*                                                         */
      353        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      354        4        /*T*                                                         */
      355        5        /*T***********************************************************/
      356        6        JCP$PHASE: PROC;

      6  4 000000   000000 700200 xent  JCP$PHASE    TSX0  ! X66_AUTO_0
         4 000001   000006 000000                    ZERO    6,0

      357        7        /*D* NAME:        JCP$PHASE
      358        8              PURPOSE:     To handle any phase complete event for SLUG
      359        9             CALL:        CALL JCP$PHASE;
      360       10             INPUT:       JC_PHASE - The current phase
      361       11             OUTPUT:      JC_PHASE - The new current phase - one more than entry
      362       12             DESCRIPTION: JCP$PHASE is called every time a phase becomes complete.
      363       13                          SLUG brings the system ghosts up using a phasing system.
      364       14                          Whenever the current phase becomes complete, an event
      365       15                          denoting phase complete is posted and this procedure
      366       16                          is called to start on the next phase. The phasing is as
      367       17                          follows:
      368       18                             Phase 1: SUPER ghost to build any of his files needed.
      369       19                             Phase 2: KEYIN, PIG and DINGO are started.
      370       20                                      This phase is completed when DINGO finishes
      371       21                                      and both KEYIN and PIG are finished initializing.
      372       22                                      This is detected in JSD$DEL after DINGO
      373       23                                      exits and KEYIN and PIG are in state
      374       24                                      SW or SIOWC.
      375       25                             Phase 3: ELF, OUTSYM, INSYM, PRESCAN, FROG and MBS are
      376       26                                      started. This phase is complete when all of
      377       27                                      these ghosts have reported back to SLUG that
      378       28                                      they have completed their initialization.
      379       29                             Phase 4: i) A message is sent to all the ghosts
      380       30                                         started in phase 3 stating that it is
      381       31                                         now OK to do anything but start users.
      382       32                                     ii) The rest of the MING ghosts are started.
PL6.E3A0      #004=JCP$PHASE File=JCP$PROCESS.:E05TSI                            TUE 07/29/97 23:19 Page:83   
      383       33                                    iii) RCVR2 is started.
      384       34                                     iv) A message is sent to MONKEY telling him
      385       35                                         that the NOUSERS keyin is no longer legal
      386       36                                      v) If the NOUSERS bit is reset, a message
      387       37                                         is sent to SLUG stating that it is
      388       38                                         now OK to start users. SLUG will, as
      389       39                                         a result, send messages to MBS, GOOSE
      390       40                                         and PRESCAN telling them that it is
      391       41                                         now OK to start users or PRESCAN jobfiles.
      392       42                             Phase 5: This phase is the normal running state of
      393       43                                      SLUG. All initialization has been completed;
      394       44                                      the system is 'OPEN FOR BUSINESS'.
      395       45        */
      396       46
      397       47
      398       48        %INCLUDE CP_6;
      399      129        %INCLUDE FI_MAC_C;
      400      499        %INCLUDE FOO_MAC_C;
      401     1247        %INCLUDE JC_MACRO_C;
      402     1361        %INCLUDE JC_DATA_R;
      403     1399        %INCLUDE JG_EVID_C;
      404     1624        %INCLUDE JG_GHOSTS_C;
      405     1714        %INCLUDE JM$STRUCT;
      406     2459        %INCLUDE JP_MACRO_C;
      407     2614        %INCLUDE KF$MSG_C;
      408     2681        %INCLUDE KF$MSG_SUBS;
      409     2727        %INCLUDE OC_SUBS_C;
      410     3458        %FI_CITE (FPTN=FI_CITE,STCLASS=CONSTANT,COD=FIEV_OPFB#);
      411     3502        %FO_CITE (FPTN=FO_CITE,STCLASS=CONSTANT,COD=FOEV_OPFB#);
      412     3561        %JC_CITE (FPTN=JC_CITE,STCLASS=CONSTANT,COD=JCEV_SUSR#);
      413     3611        %JM_CITE (FPTN=JM_CITE,STCLASS=CONSTANT,COD=JMEV_OPFB#);
      414     3661        %JP_CITE (FPTN=JP_CITE,STCLASS=CONSTANT,COD=JPEV_OPFB#);
      415     3693        %JC_CITE (FPTN=JC_PCMP,STCLASS=CONSTANT,COD=JCEV_PCMP#);
      416     3743        %JG_GHOSTS (ARRAY=NO,STCLASS=CONSTANT);
      417     3781    1   DCL 1 NOUSERS_MSG STATIC,
      418     3782    1         2 OCAX UBIN BYTE UNAL INIT(MKV_OCA$KMISC#),
      419     3783    1         2 KEY# UBIN BYTE UNAL INIT(KEY_BATCH#),
PL6.E3A0      #004=JCP$PHASE File=JCP$PROCESS.:E05TSI                            TUE 07/29/97 23:19 Page:84   
      420     3784    1         2 CADDR BIT(18) UNAL INIT('0'B),
      421     3785    1         2 FLAG UBIN WORD INIT(4);
      422     3786        %KF$MSG (FPTN=KF_CITE,STCLASS=AUTO);
      423     3791        %FPT_MONINFO (FPTN=FPT_MONINFO,STCLASS=CONSTANT,
      424     3792                      MONINFO=VLR_MONINFO,HEADER=HEADER_BUF);
      425     3807        %VLR_MONINFO (FPTN=VLR_MONINFO,STCLASS=STATIC);
      426     3825        %VLR_HEADER  (FPTN=HEADER_BUF,STCLASS="STATIC SYMDEF");
      427     3839        %FPT_WRITE (FPTN=WR_CSCG,STCLASS=STATIC,DCB=M$CSCG,STATION= CSCG_STA);
      428     3870        %VLP_STATION (FPTN=CSCG_STA,STCLASS=STATIC);
      429     3897    1   DCL M$CSCG DCB;
      430     3898    1   DCL JC_SUPER UBIN WORD SYMREF;
      431     3899    1   DCL JC_TBOOT UBIN WORD SYMREF;
      432     3900    1   DCL JCS$OPACLG ENTRY;
      433     3901    1   DCL JGI$SGHST ENTRY;
      434     3902    1   DCL JMM$INIT ENTRY;
      435     3903    1   DCL JCP$STRTUPMSG ENTRY;
      436     3904    1   DCL KLH$OPFILS ENTRY ALTRET;
      437     3905    1   DCL KLI$FESET ENTRY;
      438     3906        %EJECT;
PL6.E3A0      #004=JCP$PHASE File=JCP$PROCESS.:E05TSI                            TUE 07/29/97 23:19 Page:85   
      439     3907    1           IF JC_PHASE=5 THEN RETURN;      /* To ignore 'extra' phase completes  */

   3907  4 000002   000000 235000 xsym               LDA     JC_PHASE
         4 000003   000005 115007                    CMPA    5,DL
         4 000004   000006 601000 4                  TNZ     s:3908

   3907  4 000005   000000 702200 xent               TSX2  ! X66_ARET

      440     3908    1           JC_PHASE = JC_PHASE+1;

   3908  4 000006   000001 035007                    ADLA    1,DL
         4 000007   000000 755000 xsym               STA     JC_PHASE

      441     3909    2           DO CASE(JC_PHASE);

   3909  4 000010   000006 115007                    CMPA    6,DL
         4 000011   000013 602005 4                  TNC     s:3909+3,AL
         4 000012   000245 710000 4                  TRA     s:3994
         4 000013   000245 710000 4                  TRA     s:3994
         4 000014   000021 710000 4                  TRA     s:3911
         4 000015   000066 710000 4                  TRA     s:3931
         4 000016   000072 710000 4                  TRA     s:3933
         4 000017   000114 710000 4                  TRA     INSYM
         4 000020   000242 710000 4                  TRA     s:3992

      442     3910    2            CASE(1);

      443     3911    2              CALL M$MONINFO (FPT_MONINFO) ALTRET(NOUSERS);

   3911  4 000021   000064 630400 1                  EPPR0   FPT_MONINFO
         4 000022   420023 713400                    CLIMB   alt,+8211
         4 000023   402400 401760                    pmme    nvectors=6
         4 000024   000031 702000 4                  TSX2    NOUSERS

      444     3912    2              IF VLR_MONINFO.NOUSERS#

   3912  4 000025   000012 234000 2                  SZN     VLR_MONINFO+8
PL6.E3A0      #004=JCP$PHASE File=JCP$PROCESS.:E05TSI                            TUE 07/29/97 23:19 Page:86   
         4 000026   000044 605000 4                  TPL     IGN9
         4 000027   000000 235000 xsym               LDA     JC_SUPER
         4 000030   000044 601000 4                  TNZ     IGN9

      445     3913    2                  AND JC_SUPER=0 /* Because if JC_SUPER~=0, we've already told */
      446     3914                                      /* MONKEY to simulate a NOUSERS keyin */
      447     3915    3              THEN DO;                     /* Tell MONKEY NOUSERS is set so      */

      448     3916                                                /* that he may tell the operator      */
      449     3917    3   NOUSERS:      NOUSERS_MSG.FLAG = 4;

   3917  4 000031   000004 235007       NOUSERS      LDA     4,DL
         4 000032   000001 755000 2                  STA     NOUSERS_MSG+1

      450     3918    3                 WR_CSCG.BUF_ = VECTOR(NOUSERS_MSG);

   3918  4 000033   000000 237000 5                  LDAQ    0
         4 000034   000066 757000 2                  STAQ    WR_CSCG+4

      451     3919    3                 CSCG_STA.STATION# = 'MONKEY';

   3919  4 000035   040000 100400                    MLR     fill='040'O
         4 000036   000100 000006 1                  ADSC9   FPT_MONINFO+12           cn=0,n=6
         4 000037   000076 000010 2                  ADSC9   CSCG_STA                 cn=0,n=8

      452     3920    3                 CALL M$WRITE (WR_CSCG) ALTRET(IGN9);

   3920  4 000040   000062 630400 2                  EPPR0   WR_CSCG
         4 000041   440001 713400                    CLIMB   alt,write
         4 000042   401400 401760                    pmme    nvectors=4
         4 000043   000044 702000 4                  TSX2    IGN9

      453     3921    3   IGN9:         END;

   3921  4 000044                       IGN9         null
      454     3922    2              IF JC_TBOOT=3                /* New files                          */

PL6.E3A0      #004=JCP$PHASE File=JCP$PROCESS.:E05TSI                            TUE 07/29/97 23:19 Page:87   
   3922  4 000044   000000 235000 xsym               LDA     JC_TBOOT
         4 000045   000003 115007                    CMPA    3,DL
         4 000046   000051 600000 4                  TZE     s:3924
         4 000047   000000 236000 xsym               LDQ     JC_SUPER
         4 000050   000055 600000 4                  TZE     s:3926

      455     3923    2                OR JC_SUPER~=0             /* Bad SUPER files                    */
      456     3924    2              THEN CALL JGI$SGHST;         /* To start SUPER                     */

   3924  4 000051   000002 631400 xsym               EPPR1   B_VECTNIL+2
         4 000052   000000 701000 xent               TSX1    JGI$SGHST
         4 000053   000000 011000                    NOP     0
         4 000054   000245 710000 4                  TRA     s:3994

      457     3925    3              ELSE DO;                     /* Nothing to do                      */

      458     3926    3                 WR_CSCG.BUF_ = VECTOR(JC_PCMP);

   3926  4 000055   000002 237000 5                  LDAQ    2
         4 000056   000066 757000 2                  STAQ    WR_CSCG+4

      459     3927    3                 CSCG_STA.STATION# = J_SLUG;

   3927  4 000057   000024 237000 1                  LDAQ    J_SLUG
         4 000060   000076 757000 2                  STAQ    CSCG_STA

      460     3928    3                 CALL M$WRITE (WR_CSCG) ALTRET(IGN7);

   3928  4 000061   000062 630400 2                  EPPR0   WR_CSCG
         4 000062   440001 713400                    CLIMB   alt,write
         4 000063   401400 401760                    pmme    nvectors=4
         4 000064   000065 702000 4                  TSX2    IGN7

      461     3929    3   IGN7:         END;

   3929  4 000065   000245 710000 4     IGN7         TRA     s:3994

PL6.E3A0      #004=JCP$PHASE File=JCP$PROCESS.:E05TSI                            TUE 07/29/97 23:19 Page:88   
      462     3930    2            CASE(2);

      463     3931    2              CALL JGI$SGHST;              /* To start the phase 2 ghosts        */

   3931  4 000066   000002 631400 xsym               EPPR1   B_VECTNIL+2
         4 000067   000000 701000 xent               TSX1    JGI$SGHST
         4 000070   000000 011000                    NOP     0
         4 000071   000245 710000 4                  TRA     s:3994

      464     3932    2            CASE(3);

      465     3933    2             CALL JCS$OPACLG;

   3933  4 000072   000002 631400 xsym               EPPR1   B_VECTNIL+2
         4 000073   000000 701000 xent               TSX1    JCS$OPACLG
         4 000074   000000 011000                    NOP     0

      466     3934    2              CALL KLH$OPFILS;

   3934  4 000075   000002 631400 xsym               EPPR1   B_VECTNIL+2
         4 000076   000000 701000 xent               TSX1    KLH$OPFILS
         4 000077   000000 011000                    NOP     0

      467     3935    2             CALL KLI$FESET;

   3935  4 000100   000002 631400 xsym               EPPR1   B_VECTNIL+2
         4 000101   000000 701000 xent               TSX1    KLI$FESET
         4 000102   000000 011000                    NOP     0

      468     3936    2              JC_WAITING(JG_MBS#) = '1'B;

   3936  4 000103   200000 236003                    LDQ     65536,DU
         4 000104   000000 256000 xsym               ORSQ    JC_WAITING

      469     3937    2              CALL JGI$SGHST;              /* To start the phase 3 ghosts        */

   3937  4 000105   000002 631400 xsym               EPPR1   B_VECTNIL+2
PL6.E3A0      #004=JCP$PHASE File=JCP$PROCESS.:E05TSI                            TUE 07/29/97 23:19 Page:89   
         4 000106   000000 701000 xent               TSX1    JGI$SGHST
         4 000107   000000 011000                    NOP     0

      470     3938        /**/
      471     3939        /* MBS phase 3 initialization */
      472     3940        /**/
      473     3941    2              CALL JMM$INIT;

   3941  4 000110   000002 631400 xsym               EPPR1   B_VECTNIL+2
         4 000111   000000 701000 xent               TSX1    JMM$INIT
         4 000112   000000 011000                    NOP     0
         4 000113   000245 710000 4                  TRA     s:3994

      474     3942    2            CASE(4);

      475     3943        /**/
      476     3944        /* Send an OPEN FOR BUSINESS message to INSYM, OUTSYM, FROG, MBS and PRESCAN */
      477     3945        /**/
      478     3946    2   INSYM:     WR_CSCG.BUF_ = VECTOR(FI_CITE);

   3946  4 000114   000004 237000 5     INSYM        LDAQ    4
         4 000115   000066 757000 2                  STAQ    WR_CSCG+4

      479     3947    2              CSCG_STA.STATION# = J_INSYM;

   3947  4 000116   000036 237000 1                  LDAQ    J_INSYM
         4 000117   000076 757000 2                  STAQ    CSCG_STA

      480     3948    2              CALL M$WRITE (WR_CSCG) ALTRET(OUTSYM);

   3948  4 000120   000062 630400 2                  EPPR0   WR_CSCG
         4 000121   440001 713400                    CLIMB   alt,write
         4 000122   401400 401760                    pmme    nvectors=4
         4 000123   000124 702000 4                  TSX2    OUTSYM

      481     3949    2   OUTSYM:    WR_CSCG.BUF_ = VECTOR(FO_CITE);

PL6.E3A0      #004=JCP$PHASE File=JCP$PROCESS.:E05TSI                            TUE 07/29/97 23:19 Page:90   
   3949  4 000124   000006 237000 5     OUTSYM       LDAQ    6
         4 000125   000066 757000 2                  STAQ    WR_CSCG+4

      482     3950    2              CSCG_STA.STATION# = J_OUTSYM;

   3950  4 000126   000032 237000 1                  LDAQ    J_OUTSYM
         4 000127   000076 757000 2                  STAQ    CSCG_STA

      483     3951    2              CALL M$WRITE (WR_CSCG) ALTRET(FROG);

   3951  4 000130   000062 630400 2                  EPPR0   WR_CSCG
         4 000131   440001 713400                    CLIMB   alt,write
         4 000132   401400 401760                    pmme    nvectors=4
         4 000133   000134 702000 4                  TSX2    FROG

      484     3952    2   FROG:      WR_CSCG.BUF_ = VECTOR(KF_CITE);

   3952  4 000134   777640 235007       FROG         LDA     -96,DL
         4 000135   200004 452500                    STP2    KF_CITE+1,,AUTO
         4 000136   200004 236100                    LDQ     KF_CITE+1,,AUTO
         4 000137   000003 036003                    ADLQ    3,DU
         4 000140   000066 757000 2                  STAQ    WR_CSCG+4

      485     3953    2           KF_CITE.MSG_ID = %KF_MSGC_SLUG_SAYS_GO#;

   3953  4 000141   013000 236003                    LDQ     5632,DU
         4 000142   200003 552140                    STBQ    KF_CITE,'40'O,AUTO

      486     3954    2              CSCG_STA.STATION# = J_FROG;

   3954  4 000143   000044 237000 1                  LDAQ    J_FROG
         4 000144   000076 757000 2                  STAQ    CSCG_STA

      487     3955    2              CALL M$WRITE (WR_CSCG) ALTRET(MBS);

   3955  4 000145   000062 630400 2                  EPPR0   WR_CSCG
         4 000146   440001 713400                    CLIMB   alt,write
PL6.E3A0      #004=JCP$PHASE File=JCP$PROCESS.:E05TSI                            TUE 07/29/97 23:19 Page:91   
         4 000147   401400 401760                    pmme    nvectors=4
         4 000150   000151 702000 4                  TSX2    MBS

      488     3956    2   MBS:       WR_CSCG.BUF_ = VECTOR(JM_CITE);

   3956  4 000151   000010 237000 5     MBS          LDAQ    8
         4 000152   000066 757000 2                  STAQ    WR_CSCG+4

      489     3957    2              CSCG_STA.STATION# = J_MBS;

   3957  4 000153   000026 237000 1                  LDAQ    J_MBS
         4 000154   000076 757000 2                  STAQ    CSCG_STA

      490     3958    2              CALL M$WRITE (WR_CSCG) ALTRET(PRESCAN);

   3958  4 000155   000062 630400 2                  EPPR0   WR_CSCG
         4 000156   440001 713400                    CLIMB   alt,write
         4 000157   401400 401760                    pmme    nvectors=4
         4 000160   000161 702000 4                  TSX2    PRESCAN

      491     3959    2   PRESCAN:   WR_CSCG.BUF_ = VECTOR(JP_CITE);

   3959  4 000161   000012 237000 5     PRESCAN      LDAQ    10
         4 000162   000066 757000 2                  STAQ    WR_CSCG+4

      492     3960    2              CSCG_STA.STATION# = J_PRESCAN;

   3960  4 000163   000034 237000 1                  LDAQ    J_PRESCAN
         4 000164   000076 757000 2                  STAQ    CSCG_STA

      493     3961    2              CALL M$WRITE (WR_CSCG) ALTRET(SGHST);

   3961  4 000165   000062 630400 2                  EPPR0   WR_CSCG
         4 000166   440001 713400                    CLIMB   alt,write
         4 000167   401400 401760                    pmme    nvectors=4
         4 000170   000171 702000 4                  TSX2    SGHST

PL6.E3A0      #004=JCP$PHASE File=JCP$PROCESS.:E05TSI                            TUE 07/29/97 23:19 Page:92   
      494     3962        /**/
      495     3963        /* Start the phase 4 MING ghosts and RCVR2, CONTROL and ELAN */
      496     3964        /**/
      497     3965    2   SGHST:     CALL JGI$SGHST;

   3965  4 000171   000002 631400 xsym  SGHST        EPPR1   B_VECTNIL+2
         4 000172   000000 701000 xent               TSX1    JGI$SGHST
         4 000173   000000 011000                    NOP     0

      498     3966        /**/
      499     3967        /* Send NOUSERS_MSG message to MONKEY saying NOUSERS ILLEGAL */
      500     3968        /**/
      501     3969    2              NOUSERS_MSG.FLAG = 6;

   3969  4 000174   000006 235007                    LDA     6,DL
         4 000175   000001 755000 2                  STA     NOUSERS_MSG+1

      502     3970    2              WR_CSCG.BUF_ = VECTOR(NOUSERS_MSG);

   3970  4 000176   000000 237000 5                  LDAQ    0
         4 000177   000066 757000 2                  STAQ    WR_CSCG+4

      503     3971    2              CSCG_STA.STATION# = 'MONKEY';

   3971  4 000200   040000 100400                    MLR     fill='040'O
         4 000201   000100 000006 1                  ADSC9   FPT_MONINFO+12           cn=0,n=6
         4 000202   000076 000010 2                  ADSC9   CSCG_STA                 cn=0,n=8

      504     3972    2              CALL M$WRITE (WR_CSCG) ALTRET(MONINFO);

   3972  4 000203   000062 630400 2                  EPPR0   WR_CSCG
         4 000204   440001 713400                    CLIMB   alt,write
         4 000205   401400 401760                    pmme    nvectors=4
         4 000206   000207 702000 4                  TSX2    MONINFO

      505     3973        /**/
      506     3974        /* Tell ghosts to start users if NOUSERS is reset */
PL6.E3A0      #004=JCP$PHASE File=JCP$PROCESS.:E05TSI                            TUE 07/29/97 23:19 Page:93   
      507     3975        /**/
      508     3976    2   MONINFO:   CALL M$MONINFO (FPT_MONINFO) ALTRET(SUSR);

   3976  4 000207   000064 630400 1     MONINFO      EPPR0   FPT_MONINFO
         4 000210   420023 713400                    CLIMB   alt,+8211
         4 000211   402400 401760                    pmme    nvectors=6
         4 000212   000213 702000 4                  TSX2    SUSR

      509     3977    2   SUSR:      JC_SUSROK = '1'B;

   3977  4 000213   400000 236003       SUSR         LDQ     -131072,DU
         4 000214   000000 756000 xsym               STQ     JC_SUSROK

      510     3978    2              IF ~VLR_MONINFO.NOUSERS#

   3978  4 000215   000012 236000 2                  LDQ     VLR_MONINFO+8
         4 000216   400000 376003                    ANQ     -131072,DU
         4 000217   400000 676003                    ERQ     -131072,DU
         4 000220   000231 600000 4                  TZE     IGN

      511     3979    3              THEN DO;

      512     3980    3                 WR_CSCG.BUF_ = VECTOR(JC_CITE);

   3980  4 000221   000014 237000 5                  LDAQ    12
         4 000222   000066 757000 2                  STAQ    WR_CSCG+4

      513     3981    3                 CSCG_STA.STATION# = J_SLUG;

   3981  4 000223   000024 237000 1                  LDAQ    J_SLUG
         4 000224   000076 757000 2                  STAQ    CSCG_STA

      514     3982    3                 CALL M$WRITE (WR_CSCG) ALTRET(IGN);

   3982  4 000225   000062 630400 2                  EPPR0   WR_CSCG
         4 000226   440001 713400                    CLIMB   alt,write
         4 000227   401400 401760                    pmme    nvectors=4
PL6.E3A0      #004=JCP$PHASE File=JCP$PROCESS.:E05TSI                            TUE 07/29/97 23:19 Page:94   
         4 000230   000231 702000 4                  TSX2    IGN

      515     3983    3   IGN:          END;

   3983  4 000231                       IGN          null
      516     3984        /**/
      517     3985        /* Post an event to SLUG saying that the current phase is complete. */
      518     3986        /**/
      519     3987    2              WR_CSCG.BUF_ = VECTOR(JC_PCMP);

   3987  4 000231   000002 237000 5                  LDAQ    2
         4 000232   000066 757000 2                  STAQ    WR_CSCG+4

      520     3988    2              CSCG_STA.STATION# = J_SLUG;

   3988  4 000233   000024 237000 1                  LDAQ    J_SLUG
         4 000234   000076 757000 2                  STAQ    CSCG_STA

      521     3989    2              CALL M$WRITE (WR_CSCG) ALTRET(IGN5);

   3989  4 000235   000062 630400 2                  EPPR0   WR_CSCG
         4 000236   440001 713400                    CLIMB   alt,write
         4 000237   401400 401760                    pmme    nvectors=4
         4 000240   000241 702000 4                  TSX2    IGN5

   3988  4 000241   000245 710000 4     IGN5         TRA     s:3994

      522     3990    2   IGN5:      ;
      523     3991    2            CASE(5);

      524     3992    2              CALL JCP$STRTUPMSG;          /* Say that we're OPEN FOR BUSINESS   */

   3992  4 000242   000002 631400 xsym               EPPR1   B_VECTNIL+2
         4 000243   000000 701000 xent               TSX1    JCP$STRTUPMSG
         4 000244   000000 011000                    NOP     0

      525     3993    2            END;
PL6.E3A0      #004=JCP$PHASE File=JCP$PROCESS.:E05TSI                            TUE 07/29/97 23:19 Page:95   

      526     3994    1           RETURN;

   3994  4 000245   000000 702200 xent               TSX2  ! X66_ARET
      527     3995    1   END JCP$PHASE;
      528     3996        %EOD;

PL6.E3A0      #004=JCP$PHASE File=JCP$PROCESS.:E05TSI                            TUE 07/29/97 23:19 Page:96   
--  Include file information  --

   OC_SUBS_C.:E05TOU  is referenced.
   KF$MSG_SUBS.:E05TOU  is referenced.
   KF$MSG_C.:E05TOU  is referenced.
   JP_MACRO_C.:E05TOU  is referenced.
   JM$STRUCT.:E05TOU  is referenced.
   JG_GHOSTS_C.:E05TOU  is referenced.
   JG_EVID_C.:E05TOU  is referenced.
   JC_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   JC_MACRO_C.:E05TOU  is referenced.
   FOO_MAC_C.:E05TOU  is referenced.
   FI_MAC_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure JCP$PHASE.
PL6.E3A0      #004=JCP$PHASE File=JCP$PROCESS.:E05TSI                            TUE 07/29/97 23:19 Page:97   

 **** Variables and constants ****

  ****  Section 001 RoData JCP$PHASE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(90)    r     1 FI_CITE                    3-0-0/w STRC(90)    r     1 FO_CITE
    64-0-0/d STRC(432)   r     1 FPT_MONINFO                6-0-0/w STRC(45)    r     1 JC_CITE
    20-0-0/w STRC(45)    r     1 JC_PCMP                   10-0-0/w STRC(180)   r     1 JM_CITE
    15-0-0/w STRC(108)   r     1 JP_CITE                   44-0-0/d CHAR(8)     r     1 J_FROG
    36-0-0/d CHAR(8)     r     1 J_INSYM                   26-0-0/d CHAR(8)     r     1 J_MBS
    32-0-0/d CHAR(8)     r     1 J_OUTSYM                  34-0-0/d CHAR(8)     r     1 J_PRESCAN
    24-0-0/d CHAR(8)     r     1 J_SLUG

  ****  Section 002  Data  JCP$PHASE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    76-0-0/w STRC(288)   r     1 CSCG_STA                  22-0-0/d STRC(1089)  r     1 HEADER_BUF
     0-0-0/w STRC(72)    r     1 NOUSERS_MSG                2-0-0/d STRC(540)   r     1 VLR_MONINFO
    62-0-0/d STRC(432)   r     1 WR_CSCG

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w STRC(18)    r     1 KF_CITE

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN        r     1 JC_PHASE                   0-0-0/w UBIN        r     1 JC_SUPER
PL6.E3A0      #004=JCP$PHASE File=JCP$PROCESS.:E05TSI                            TUE 07/29/97 23:19 Page:98   
     0-0-0/w BIT         r     1 JC_SUSROK                  0-0-0/w UBIN        r     1 JC_TBOOT
     0-0-0/b BIT         r     1 JC_WAITING(0:35)

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0N  NULL        r     1 M$CSCG


   Procedure JCP$PHASE requires 166 words for executable code.
   Procedure JCP$PHASE requires 6 words of local(AUTO) storage.
PL6.E3A0      #004=JCP$PHASE File=JCP$PROCESS.:E05TSI                            TUE 07/29/97 23:19 Page:99   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=JCP$PHASE File=JCP$PROCESS.:E05TSI                            TUE 07/29/97 23:19 Page:100  
          MINI XREF LISTING

CSCG_STA
      3882**DCL      3858--DCLINIT
CSCG_STA.MSGIDXT
      3892**DCL      3895--REDEF
CSCG_STA.STATION#
      3886**DCL      3919<<ASSIGN   3927<<ASSIGN   3947<<ASSIGN   3950<<ASSIGN   3954<<ASSIGN   3957<<ASSIGN
      3960<<ASSIGN   3971<<ASSIGN   3981<<ASSIGN   3988<<ASSIGN
FI_CITE
      3473**DCL      3946--ASSIGN
FO_CITE
      3516**DCL      3949--ASSIGN
FO_CITE.BATCH
      3526**DCL      3529--REDEF    3533--REDEF
FO_CITE.NUM
      3535**DCL      3538--REDEF
FPT_MONINFO
      3803**DCL      3911<>CALL     3976<>CALL
FROG
      3952**LABEL    3951--CALLALT
HEADER_BUF
      3836**DCL      3805--DCLINIT
IGN
      3983**LABEL    3982--CALLALT
IGN5
      3988**LABEL    3989--CALLALT
IGN7
      3929**LABEL    3928--CALLALT
IGN9
      3921**LABEL    3920--CALLALT
JCP$STRTUPMSG
      3903**DCL-ENT  3992--CALL
JCS$OPACLG
PL6.E3A0      #004=JCP$PHASE File=JCP$PROCESS.:E05TSI                            TUE 07/29/97 23:19 Page:101  
      3900**DCL-ENT  3933--CALL
JC_CITE
      3574**DCL      3980--ASSIGN
JC_PCMP
      3706**DCL      3926--ASSIGN   3987--ASSIGN
JC_PHASE
      1369**DCL      3907>>IF       3908<<ASSIGN   3908>>ASSIGN   3909>>DOCASE
JC_SUPER
      3898**DCL      3912>>IF       3922>>IF
JC_SUSROK
      1369**DCL      3977<<ASSIGN
JC_TBOOT
      3899**DCL      3922>>IF
JC_WAITING
      1369**DCL      3936<<ASSIGN
JGI$SGHST
      3901**DCL-ENT  3924--CALL     3931--CALL     3937--CALL     3965--CALL
JMM$INIT
      3902**DCL-ENT  3941--CALL
JM_CITE
      3626**DCL      3956--ASSIGN
JM_CITE.ACCT
      3643**DCL      3646--REDEF
JP_CITE
      3676**DCL      3959--ASSIGN
JP_CITE.SYSID
      3685**DCL      3687--REDEF
J_FROG
      3771**DCL      3954>>ASSIGN
J_INSYM
      3768**DCL      3947>>ASSIGN
J_MBS
      3764**DCL      3957>>ASSIGN
J_OUTSYM
      3766**DCL      3950>>ASSIGN
J_PRESCAN
PL6.E3A0      #004=JCP$PHASE File=JCP$PROCESS.:E05TSI                            TUE 07/29/97 23:19 Page:102  
      3767**DCL      3960>>ASSIGN
J_SLUG
      3763**DCL      3927>>ASSIGN   3981>>ASSIGN   3988>>ASSIGN
KF_CITE
      3787**DCL      3952--ASSIGN
KF_CITE.MSG_ID
      3788**DCL      3953<<ASSIGN
KLH$OPFILS
      3904**DCL-ENT  3934--CALL
KLI$FESET
      3905**DCL-ENT  3935--CALL
M$MONINFO
       125**DCL-ENT  3911--CALL     3976--CALL
M$WRITE
        58**DCL-ENT  3920--CALL     3928--CALL     3948--CALL     3951--CALL     3955--CALL     3958--CALL
      3961--CALL     3972--CALL     3982--CALL     3989--CALL
MBS
      3956**LABEL    3955--CALLALT
MONINFO
      3976**LABEL    3972--CALLALT
NOUSERS
      3917**LABEL    3911--CALLALT
NOUSERS_MSG
      3781**DCL      3918--ASSIGN   3970--ASSIGN
NOUSERS_MSG.FLAG
      3785**DCL      3917<<ASSIGN   3969<<ASSIGN
OUTSYM
      3949**LABEL    3948--CALLALT
PRESCAN
      3959**LABEL    3958--CALLALT
SGHST
      3965**LABEL    3961--CALLALT
SUSR
      3977**LABEL    3976--CALLALT
VLR_MONINFO
      3818**DCL      3803--DCLINIT
PL6.E3A0      #004=JCP$PHASE File=JCP$PROCESS.:E05TSI                            TUE 07/29/97 23:19 Page:103  
VLR_MONINFO.NOUSERS#
      3820**DCL      3912>>IF       3978>>IF
WR_CSCG
      3856**DCL      3920<>CALL     3928<>CALL     3948<>CALL     3951<>CALL     3955<>CALL     3958<>CALL
      3961<>CALL     3972<>CALL     3982<>CALL     3989<>CALL
WR_CSCG.BUF_
      3856**DCL      3918<<ASSIGN   3926<<ASSIGN   3946<<ASSIGN   3949<<ASSIGN   3952<<ASSIGN   3956<<ASSIGN
      3959<<ASSIGN   3970<<ASSIGN   3980<<ASSIGN   3987<<ASSIGN
WR_CSCG.STATION_
      3858**DCL      3858--REDEF
WR_CSCG.V
      3859**DCL      3856--DCLINIT
WR_CSCG.V.DVBYTE.VFC#
      3865**DCL      3865--REDEF

PL6.E3A0      #005=JCP$PROCESS File=JCP$PROCESS.:E05TSI                          TUE 07/29/97 23:20 Page:104  
      529        1        /*T***********************************************************/
      530        2        /*T*                                                         */
      531        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      532        4        /*T*                                                         */
      533        5        /*T***********************************************************/
      534        6        JCP$PROCESS: PROC;
      535        7        /*D* NAME:        JCP$PROCESS
      536        8             PURPOSE:     To handle queued up events for SLUG
      537        9             CALL:        CALL JCP$PROCESS;
      538       10             DESCRIPTION: JCP$PROCESS de-queues the first entry on SLUG's
      539       11                          event queue and calls the appropriate routine to
      540       12                          process that event. The event slot is added back
      541       13                          onto the free queue chain. All currently pending
      542       14                          events are handled in this way, then JCP$PROCESS RETURNs */
      543       15        /**/
      544       16        /* INCLUDES */
      545       17        /**/
      546       18        %INCLUDE JC_MACRO_C;
      547      132        %INCLUDE JC_DATA_R;
      548      170        %INCLUDE JC_SUBS_C;
      549      183        /**/
      550      184        /* AUTO */
      551      185        /**/
      552      186    1   DCL EV$ PTR;
      553      187        /**/
      554      188        /* BASED */
      555      189        /**/
      556      190        %JC_QEV (FPTN=JC$QEV,STCLASS=BASED);
      557      217        /**/
      558      218        /* ENTREFS */
      559      219        /**/
      560      220    1   DCL JCP$CSRD ENTRY;
      561      221    1   DCL JCP$HLPRD ENTRY;
      562      222    1   DCL JCP$PHASE ENTRY;
      563      223        %EJECT;
PL6.E3A0      #005=JCP$PROCESS File=JCP$PROCESS.:E05TSI                          TUE 07/29/97 23:20 Page:105  
      564      224    2           DO WHILE(JC_EVQCNT~=0);
      565      225        /**/
      566      226        /* De-link the next event from the event queue and point to it with EV$      */
      567      227        /**/
      568      228    3              DO INHIBIT;
      569      229    3                 EV$ = JC_EVQHD$;
      570      230    3                 JC_EVQHD$ = EV$->JC$QEV.LNK$;
      571      231    3                 JC_EVQCNT = JC_EVQCNT-1;
      572      232    3                 END;
      573      233        /**/
      574      234        /* Handle the event */
      575      235        /**/
      576      236    3              DO CASE(EV$->JC$QEV.EVNT);
      577      237    3               CASE(JCQEV_CSRD#);
      578      238    3                 CALL JCP$CSRD;
      579      239    3               CASE(JCQEV_HLPRD#);
      580      240    3                 CALL JCP$HLPRD;
      581      241    3               CASE(JCQEV_PCMP#);
      582      242    3                 CALL JCP$PHASE;
      583      243    3               END;
      584      244        /**/
      585      245        /* Link the used event frame onto the free chain */
      586      246        /**/
      587      247    3              DO INHIBIT;
      588      248    3                 EV$->JC$QEV.LNK$ = JC_FQHD$;
      589      249    3                 JC_FQHD$ = EV$;
      590      250    3                 END;
      591      251    2              END;
      592      252    1           RETURN;
      593      253    1   END JCP$PROCESS;
      594      254        %EOD;

PL6.E3A0      #005=JCP$PROCESS File=JCP$PROCESS.:E05TSI                          TUE 07/29/97 23:20 Page:106  
--  Include file information  --

   JC_SUBS_C.:E05TOU  is referenced.
   JC_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   JC_MACRO_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure JCP$PROCESS.

   Procedure JCP$PROCESS requires 39 words for executable code.
   Procedure JCP$PROCESS requires 4 words of local(AUTO) storage.

PL6.E3A0      #005=JCP$PROCESS File=JCP$PROCESS.:E05TSI                          TUE 07/29/97 23:20 Page:107  

 Object Unit name= JCP$PROCESS                                File name= JCP$PROCESS.:E05TOU
 UTS= JUL 29 '97 23:20:28.52 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none    39     47  JCP$PROCESS

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes            yes      Std        0  JCP$PROCESS

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       0 JCP$CSRD
         yes           Std       0 JCP$HLPRD
         yes           Std       0 JCP$PHASE
                       nStd      0 X66_AUTO_0
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     JC_EVQCNT                             JC_EVQHD$                             JC_FQHD$
     B_VECTNIL
PL6.E3A0      #005=JCP$PROCESS File=JCP$PROCESS.:E05TSI                          TUE 07/29/97 23:20 Page:108  


      529        1        /*T***********************************************************/
      530        2        /*T*                                                         */
      531        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      532        4        /*T*                                                         */
      533        5        /*T***********************************************************/
      534        6        JCP$PROCESS: PROC;

      6  0 000000   000000 700200 xent  JCP$PROCESS  TSX0  ! X66_AUTO_0
         0 000001   000004 000000                    ZERO    4,0

      535        7        /*D* NAME:        JCP$PROCESS
      536        8             PURPOSE:     To handle queued up events for SLUG
      537        9             CALL:        CALL JCP$PROCESS;
      538       10             DESCRIPTION: JCP$PROCESS de-queues the first entry on SLUG's
      539       11                          event queue and calls the appropriate routine to
      540       12                          process that event. The event slot is added back
      541       13                          onto the free queue chain. All currently pending
      542       14                          events are handled in this way, then JCP$PROCESS RETURNs */
      543       15        /**/
      544       16        /* INCLUDES */
      545       17        /**/
      546       18        %INCLUDE JC_MACRO_C;
      547      132        %INCLUDE JC_DATA_R;
      548      170        %INCLUDE JC_SUBS_C;
      549      183        /**/
      550      184        /* AUTO */
      551      185        /**/
      552      186    1   DCL EV$ PTR;
      553      187        /**/
      554      188        /* BASED */
      555      189        /**/
      556      190        %JC_QEV (FPTN=JC$QEV,STCLASS=BASED);
      557      217        /**/
      558      218        /* ENTREFS */
      559      219        /**/
      560      220    1   DCL JCP$CSRD ENTRY;
PL6.E3A0      #005=JCP$PROCESS File=JCP$PROCESS.:E05TSI                          TUE 07/29/97 23:20 Page:109  
      561      221    1   DCL JCP$HLPRD ENTRY;
      562      222    1   DCL JCP$PHASE ENTRY;
      563      223        %EJECT;
PL6.E3A0      #005=JCP$PROCESS File=JCP$PROCESS.:E05TSI                          TUE 07/29/97 23:20 Page:110  
      564      224    2           DO WHILE(JC_EVQCNT~=0);

    224  0 000002   000000 235000 xsym               LDA     JC_EVQCNT
         0 000003   000046 600000 0                  TZE     s:252

      565      225        /**/
      566      226        /* De-link the next event from the event queue and point to it with EV$      */
      567      227        /**/
      568      228    3              DO INHIBIT;

      569      229    3                 EV$ = JC_EVQHD$;

    229  0 000004   000000 236200 xsym               LDQ   ! JC_EVQHD$
         0 000005   200003 756300                    STQ   ! EV$,,AUTO

      570      230    3                 JC_EVQHD$ = EV$->JC$QEV.LNK$;

    230  0 000006   200003 470700                    LDP0  ! EV$,,AUTO
         0 000007   000001 236300                    LDQ   ! 1,,PR0
         0 000010   000000 756200 xsym               STQ   ! JC_EVQHD$

      571      231    3                 JC_EVQCNT = JC_EVQCNT-1;

    231  0 000011   000000 235200 xsym               LDA   ! JC_EVQCNT
         0 000012   000001 135207                    SBLA  ! 1,DL
         0 000013   000000 755200 xsym               STA   ! JC_EVQCNT

      572      232    3                 END;

      573      233        /**/
      574      234        /* Handle the event */
      575      235        /**/
      576      236    3              DO CASE(EV$->JC$QEV.EVNT);

    236  0 000014   000000 235100                    LDA     0,,PR0
         0 000015   000004 115007                    CMPA    4,DL
         0 000016   000020 602005 0                  TNC     s:236+4,AL
PL6.E3A0      #005=JCP$PROCESS File=JCP$PROCESS.:E05TSI                          TUE 07/29/97 23:20 Page:111  
         0 000017   000037 710000 0                  TRA     s:248
         0 000020   000037 710000 0                  TRA     s:248
         0 000021   000024 710000 0                  TRA     s:238
         0 000022   000030 710000 0                  TRA     s:240
         0 000023   000034 710000 0                  TRA     s:242

      577      237    3               CASE(JCQEV_CSRD#);

      578      238    3                 CALL JCP$CSRD;

    238  0 000024   000002 631400 xsym               EPPR1   B_VECTNIL+2
         0 000025   000000 701000 xent               TSX1    JCP$CSRD
         0 000026   000000 011000                    NOP     0
         0 000027   000037 710000 0                  TRA     s:248

      579      239    3               CASE(JCQEV_HLPRD#);

      580      240    3                 CALL JCP$HLPRD;

    240  0 000030   000002 631400 xsym               EPPR1   B_VECTNIL+2
         0 000031   000000 701000 xent               TSX1    JCP$HLPRD
         0 000032   000000 011000                    NOP     0
         0 000033   000037 710000 0                  TRA     s:248

      581      241    3               CASE(JCQEV_PCMP#);

      582      242    3                 CALL JCP$PHASE;

    242  0 000034   000002 631400 xsym               EPPR1   B_VECTNIL+2
         0 000035   000000 701000 xent               TSX1    JCP$PHASE
         0 000036   000000 011000                    NOP     0

      583      243    3               END;

      584      244        /**/
      585      245        /* Link the used event frame onto the free chain */
      586      246        /**/
PL6.E3A0      #005=JCP$PROCESS File=JCP$PROCESS.:E05TSI                          TUE 07/29/97 23:20 Page:112  
      587      247    3              DO INHIBIT;

      588      248    3                 EV$->JC$QEV.LNK$ = JC_FQHD$;

    248  0 000037   000000 236200 xsym               LDQ   ! JC_FQHD$
         0 000040   200003 470700                    LDP0  ! EV$,,AUTO
         0 000041   000001 756300                    STQ   ! 1,,PR0

      589      249    3                 JC_FQHD$ = EV$;

    249  0 000042   200003 236300                    LDQ   ! EV$,,AUTO
         0 000043   000000 756200 xsym               STQ   ! JC_FQHD$

      590      250    3                 END;

      591      251    2              END;

    251  0 000044   000000 235000 xsym               LDA     JC_EVQCNT
         0 000045   000004 601000 0                  TNZ     s:229

      592      252    1           RETURN;

    252  0 000046   000000 702200 xent               TSX2  ! X66_ARET
      593      253    1   END JCP$PROCESS;
      594      254        %EOD;

PL6.E3A0      #005=JCP$PROCESS File=JCP$PROCESS.:E05TSI                          TUE 07/29/97 23:20 Page:113  
--  Include file information  --

   JC_SUBS_C.:E05TOU  is referenced.
   JC_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   JC_MACRO_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure JCP$PROCESS.
PL6.E3A0      #005=JCP$PROCESS File=JCP$PROCESS.:E05TSI                          TUE 07/29/97 23:20 Page:114  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 EV$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN        r     1 JC_EVQCNT                  0-0-0/w PTR         r     1 JC_EVQHD$
     0-0-0/w PTR         r     1 JC_FQHD$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(360)   r     1 JC$QEV


   Procedure JCP$PROCESS requires 39 words for executable code.
   Procedure JCP$PROCESS requires 4 words of local(AUTO) storage.
PL6.E3A0      #005=JCP$PROCESS File=JCP$PROCESS.:E05TSI                          TUE 07/29/97 23:20 Page:115  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #005=JCP$PROCESS File=JCP$PROCESS.:E05TSI                          TUE 07/29/97 23:20 Page:116  
          MINI XREF LISTING

EV$
       186**DCL       229<<ASSIGN    230>>ASSIGN    236>>DOCASE    248>>ASSIGN    249>>ASSIGN
JC$QEV.EVNT
       208**DCL       236>>DOCASE
JC$QEV.LNK$
       211**DCL       230>>ASSIGN    248<<ASSIGN
JCP$CSRD
       220**DCL-ENT   238--CALL
JCP$HLPRD
       221**DCL-ENT   240--CALL
JCP$PHASE
       222**DCL-ENT   242--CALL
JC_EVQCNT
       140**DCL       224>>DOWHILE   231<<ASSIGN    231>>ASSIGN
JC_EVQHD$
       169**DCL       229>>ASSIGN    230<<ASSIGN
JC_FQHD$
       169**DCL       248>>ASSIGN    249<<ASSIGN

PL6.E3A0      #006=JCP$ZIP File=JCP$PROCESS.:E05TSI                              TUE 07/29/97 23:20 Page:117  
      595        1        /*T***********************************************************/
      596        2        /*T*                                                         */
      597        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      598        4        /*T*                                                         */
      599        5        /*T***********************************************************/
      600        6        JCP$ZIP: PROC;
      601        7        %INCLUDE CP_6;
      602       88        %INCLUDE OC_MESSHD_C;
      603      141        %INCLUDE JM$STRUCT;
      604      886        %INCLUDE JG_EVID_C;
      605     1111        %INCLUDE KL_DATA_R;
      606     1575        %INCLUDE KL_SUBS_C;
      607     1629        %INCLUDE JM_SUBS_C;
      608     1735        %INCLUDE OC_SUBS_C;
      609     2466    1   DCL M$CSCG DCB;
      610     2467    1   DCL M$ACCTLG DCB;
      611     2468    1   DCL M$HLPF DCB;
      612     2469    1   DCL M$PROF DCB;
      613     2470    1   DCL FEX UBIN WORD;
      614     2471    1   DCL STOP_COUNT UBIN STATIC INIT(0);
      615     2472    1   DCL JC_CSMBF CHAR(140) SYMREF;
      616     2473    1   DCL 1 KMSG REDEF JC_CSMBF,
      617     2474    1         2 KIN# UBIN(18) UNAL,
      618     2475    1         2 CADDR UBIN(18) UNAL,
      619     2476    1         2 FEX UBIN WORD,
      620     2477    1         2 NAME CHAR(8) UNAL,
      621     2478    1         2 FID UNAL,
      622     2479    1           3 CNT UBIN BYTE UNAL,
      623     2480    1           3 TXT CHAR(60) UNAL,
      624     2481    1         2 * CHAR(63) UNAL;
      625     2482    1   DCL JC_MBSZAP UBIN WORD STATIC SYMDEF INIT(0);
      626     2483    1   DCL JC_ZIP SBIN WORD STATIC SYMDEF INIT(0);
      627     2484    1   DCL KLI$KBOOT ENTRY;
      628     2485    1   DCL JMM$ZAP ENTRY;
      629     2486        %OC_MESSHD_W (NAME=KZP,STCLASS=STATIC,MSG=PREZAP_MSG#,DELIM=";");
      630     2499        %FPT_WRITE (FPTN=TKYN,STCLASS=CONSTANT,BUF=KZP,DCB=M$CSCG);
      631     2530        %FPT_CLOSE (FPTN=CLACC,STCLASS=CONSTANT,DCB=M$ACCTLG,DISP=SAVE);
PL6.E3A0      #006=JCP$ZIP File=JCP$PROCESS.:E05TSI                              TUE 07/29/97 23:20 Page:118  
      632     2572        %FPT_CLOSE (FPTN=CLHLP,STCLASS=CONSTANT,DCB=M$HLPF,DISP=SAVE);
      633     2614        %FPT_CLOSE (FPTN=CLPRO,STCLASS=CONSTANT,DCB=M$PROF,DISP=SAVE);
      634     2656        %EJECT;
PL6.E3A0      #006=JCP$ZIP File=JCP$PROCESS.:E05TSI                              TUE 07/29/97 23:20 Page:119  
      635     2657    1           JC_ZIP=1;
      636     2658    1           CALL JMM$ZAP;
      637     2659    1   JCP$ZIPCK:  ENTRY;
      638     2660    1        STOP_COUNT = STOP_COUNT + 1;
      639     2661    1        IF STOP_COUNT > 1
      640     2662    2        THEN DO;
      641     2663    2             KMSG.FID.CNT = 0;   /* Just mask the FEP */
      642     2664    2             KMSG.KIN#=KEY_HARDSTP#;
      643     2665    2             END;
      644     2666    1        ELSE
      645     2667    1           KMSG.KIN#=KEY_STOPFEP#;
      646     2668    1           CALL KLI$KBOOT;
      647     2669    1           IF JC_MBSZAP=0 THEN RETURN;
      648     2670    1           IF STOP_COUNT = 1
      649     2671    1           THEN
      650     2672    2           DO FEX=1 TO KL_MXFE;
      651     2673    2              IF KL_FETBL.KTYP(FEX)~=%KLKT_NONE# THEN RETURN;
      652     2674    2              END;
      653     2675    1           JC_ZIP=-1;
      654     2676    1           CALL M$WRITE (TKYN) ALTRET (RTN);
      655     2677    1   RTN:    ;
      656     2678    1           RETURN;
      657     2679    1   JCP$ZAP: ENTRY;
      658     2680    1           CALL M$CLOSE (CLHLP) ALTRET (CPRO);
      659     2681    1   CPRO:   ;
      660     2682    1           CALL M$CLOSE (CLPRO) ALTRET (CACC);
      661     2683    1   CACC:   ;
      662     2684    1           CALL M$CLOSE (CLACC) ALTRET (TLKY);
      663     2685    1   TLKY:   ;
      664     2686    1           KZP.MSG#=0;
      665     2687    1           KZP.FCN=OC_ZAP;
      666     2688    1           CALL M$WRITE (TKYN) ALTRET (RTN);
      667     2689    1           RETURN;
      668     2690    1   END JCP$ZIP;

PL6.E3A0      #006=JCP$ZIP File=JCP$PROCESS.:E05TSI                              TUE 07/29/97 23:20 Page:120  
--  Include file information  --

   OC_SUBS_C.:E05TOU  is referenced.
   JM_SUBS_C.:E05TOU  is referenced.
   KL_SUBS_C.:E05TOU  is referenced.
   KL_NETWORK_M.:E05TOU  is referenced.
   OC$MESSHD_C.:E05TOU  is referenced.
   KL_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   JG_EVID_C.:E05TOU  is referenced.
   JM$STRUCT.:E05TOU  is referenced.
   OC_MESSHD_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure JCP$ZIP.

   Procedure JCP$ZIP requires 75 words for executable code.
   Procedure JCP$ZIP requires 4 words of local(AUTO) storage.

    No errors detected in file JCP$PROCESS.:E05TSI    .

PL6.E3A0      #006=JCP$ZIP File=JCP$PROCESS.:E05TSI                              TUE 07/29/97 23:20 Page:121  

 Object Unit name= JCP$ZIP                                    File name= JCP$PROCESS.:E05TOU
 UTS= JUL 29 '97 23:20:37.68 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$HLP
    2   DCB   even  none     0      0  M$CSCG
    3   DCB   even  none     0      0  M$ACCTLG
    4   DCB   even  none     0      0  M$HLPF
    5   DCB   even  none     0      0  M$PROF
    6   Data  even  none     8     10  JCP$ZIP
    7  RoData even  UTS    102    146  JCP$ZIP
    8   Proc  even  none    75    113  JCP$ZIP

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     8      0   yes            yes      Std        0  JCP$ZIP
     8     10                  yes      Std        0  JCP$ZIPCK
     8     64                  yes      Std        0  JCP$ZAP

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
    6      1  JC_MBSZAP                          6      2  JC_ZIP
PL6.E3A0      #006=JCP$ZIP File=JCP$PROCESS.:E05TSI                              TUE 07/29/97 23:20 Page:122  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       0 JMM$ZAP
         yes           Std       0 KLI$KBOOT
                       nStd      0 X66_AUTO_0
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  M$HLP                                 KL_MXFE
     KL_FETBL                              M$CSCG                                M$ACCTLG
     M$HLPF                                M$PROF                                JC_CSMBF
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #006=JCP$ZIP File=JCP$PROCESS.:E05TSI                              TUE 07/29/97 23:20 Page:123  


      595        1        /*T***********************************************************/
      596        2        /*T*                                                         */
      597        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      598        4        /*T*                                                         */
      599        5        /*T***********************************************************/
      600        6        JCP$ZIP: PROC;

      6  8 000000   000000 700200 xent  JCP$ZIP      TSX0  ! X66_AUTO_0
         8 000001   000004 000000                    ZERO    4,0

      601        7        %INCLUDE CP_6;
      602       88        %INCLUDE OC_MESSHD_C;
      603      141        %INCLUDE JM$STRUCT;
      604      886        %INCLUDE JG_EVID_C;
      605     1111        %INCLUDE KL_DATA_R;
      606     1575        %INCLUDE KL_SUBS_C;
      607     1629        %INCLUDE JM_SUBS_C;
      608     1735        %INCLUDE OC_SUBS_C;
      609     2466    1   DCL M$CSCG DCB;
      610     2467    1   DCL M$ACCTLG DCB;
      611     2468    1   DCL M$HLPF DCB;
      612     2469    1   DCL M$PROF DCB;
      613     2470    1   DCL FEX UBIN WORD;
      614     2471    1   DCL STOP_COUNT UBIN STATIC INIT(0);
      615     2472    1   DCL JC_CSMBF CHAR(140) SYMREF;
      616     2473    1   DCL 1 KMSG REDEF JC_CSMBF,
      617     2474    1         2 KIN# UBIN(18) UNAL,
      618     2475    1         2 CADDR UBIN(18) UNAL,
      619     2476    1         2 FEX UBIN WORD,
      620     2477    1         2 NAME CHAR(8) UNAL,
      621     2478    1         2 FID UNAL,
      622     2479    1           3 CNT UBIN BYTE UNAL,
      623     2480    1           3 TXT CHAR(60) UNAL,
      624     2481    1         2 * CHAR(63) UNAL;
      625     2482    1   DCL JC_MBSZAP UBIN WORD STATIC SYMDEF INIT(0);
      626     2483    1   DCL JC_ZIP SBIN WORD STATIC SYMDEF INIT(0);
PL6.E3A0      #006=JCP$ZIP File=JCP$PROCESS.:E05TSI                              TUE 07/29/97 23:20 Page:124  
      627     2484    1   DCL KLI$KBOOT ENTRY;
      628     2485    1   DCL JMM$ZAP ENTRY;
      629     2486        %OC_MESSHD_W (NAME=KZP,STCLASS=STATIC,MSG=PREZAP_MSG#,DELIM=";");
      630     2499        %FPT_WRITE (FPTN=TKYN,STCLASS=CONSTANT,BUF=KZP,DCB=M$CSCG);
      631     2530        %FPT_CLOSE (FPTN=CLACC,STCLASS=CONSTANT,DCB=M$ACCTLG,DISP=SAVE);
      632     2572        %FPT_CLOSE (FPTN=CLHLP,STCLASS=CONSTANT,DCB=M$HLPF,DISP=SAVE);
      633     2614        %FPT_CLOSE (FPTN=CLPRO,STCLASS=CONSTANT,DCB=M$PROF,DISP=SAVE);
      634     2656        %EJECT;
PL6.E3A0      #006=JCP$ZIP File=JCP$PROCESS.:E05TSI                              TUE 07/29/97 23:20 Page:125  
      635     2657    1           JC_ZIP=1;

   2657  8 000002   000001 235007                    LDA     1,DL
         8 000003   000002 755000 6                  STA     JC_ZIP

      636     2658    1           CALL JMM$ZAP;

   2658  8 000004   000002 631400 xsym               EPPR1   B_VECTNIL+2
         8 000005   000000 701000 xent               TSX1    JMM$ZAP
         8 000006   000000 011000                    NOP     0
         8 000007   000012 710000 8                  TRA     s:2660

      637     2659    1   JCP$ZIPCK:  ENTRY;

   2659  8 000010   000000 700200 xent  JCP$ZIPCK    TSX0  ! X66_AUTO_0
         8 000011   000004 000000                    ZERO    4,0

      638     2660    1        STOP_COUNT = STOP_COUNT + 1;

   2660  8 000012   000000 235000 6                  LDA     STOP_COUNT
         8 000013   000001 035007                    ADLA    1,DL
         8 000014   000000 755000 6                  STA     STOP_COUNT

      639     2661    1        IF STOP_COUNT > 1

   2661  8 000015   000002 115007                    CMPA    2,DL
         8 000016   000024 602000 8                  TNC     s:2667

      640     2662    2        THEN DO;

      641     2663    2             KMSG.FID.CNT = 0;   /* Just mask the FEP */

   2663  8 000017   000000 236003                    LDQ     0,DU
         8 000020   000004 552040 xsym               STBQ    JC_CSMBF+4,'40'O

      642     2664    2             KMSG.KIN#=KEY_HARDSTP#;

PL6.E3A0      #006=JCP$ZIP File=JCP$PROCESS.:E05TSI                              TUE 07/29/97 23:20 Page:126  
   2664  8 000021   000021 220003                    LDX0    17,DU
         8 000022   000000 740000 xsym               STX0    JC_CSMBF

      643     2665    2             END;

   2665  8 000023   000026 710000 8                  TRA     s:2668

      644     2666    1        ELSE
      645     2667    1           KMSG.KIN#=KEY_STOPFEP#;

   2667  8 000024   000007 220003                    LDX0    7,DU
         8 000025   000000 740000 xsym               STX0    JC_CSMBF

      646     2668    1           CALL KLI$KBOOT;

   2668  8 000026   000002 631400 xsym               EPPR1   B_VECTNIL+2
         8 000027   000000 701000 xent               TSX1    KLI$KBOOT
         8 000030   000000 011000                    NOP     0

      647     2669    1           IF JC_MBSZAP=0 THEN RETURN;

   2669  8 000031   000001 235000 6                  LDA     JC_MBSZAP
         8 000032   000034 601000 8                  TNZ     s:2670

   2669  8 000033   000000 702200 xent               TSX2  ! X66_ARET

      648     2670    1           IF STOP_COUNT = 1

   2670  8 000034   000000 236000 6                  LDQ     STOP_COUNT
         8 000035   000001 116007                    CMPQ    1,DL
         8 000036   000055 601000 8                  TNZ     s:2675

      649     2671    1           THEN
      650     2672    2           DO FEX=1 TO KL_MXFE;

   2672  8 000037   000001 235007                    LDA     1,DL
         8 000040   200003 755100                    STA     FEX,,AUTO
PL6.E3A0      #006=JCP$ZIP File=JCP$PROCESS.:E05TSI                              TUE 07/29/97 23:20 Page:127  
         8 000041   000052 710000 8                  TRA     s:2674+3

      651     2673    2              IF KL_FETBL.KTYP(FEX)~=%KLKT_NONE# THEN RETURN;

   2673  8 000042   200003 720100                    LXL0    FEX,,AUTO
         8 000043   000000 236010 xsym               LDQ     KL_FETBL,X0
         8 000044   007000 316003                    CANQ    3584,DU
         8 000045   000047 600000 8                  TZE     s:2674

   2673  8 000046   000000 702200 xent               TSX2  ! X66_ARET

      652     2674    2              END;

   2674  8 000047   200003 235100                    LDA     FEX,,AUTO
         8 000050   000001 035007                    ADLA    1,DL
         8 000051   200003 755100                    STA     FEX,,AUTO
         8 000052   000000 236000 xsym               LDQ     KL_MXFE
         8 000053   200003 116100                    CMPQ    FEX,,AUTO
         8 000054   000042 603000 8                  TRC     s:2673

      653     2675    1           JC_ZIP=-1;

   2675  8 000055   000001 335007                    LCA     1,DL
         8 000056   000002 755000 6                  STA     JC_ZIP

      654     2676    1           CALL M$WRITE (TKYN) ALTRET (RTN);

   2676  8 000057   000000 630400 7                  EPPR0   TKYN
         8 000060   440001 713400                    CLIMB   alt,write
         8 000061   401400 401760                    pmme    nvectors=4
         8 000062   000063 702000 8                  TSX2    RTN

   2675  8 000063                       RTN          null
      655     2677    1   RTN:    ;
      656     2678    1           RETURN;

   2678  8 000063   000000 702200 xent               TSX2  ! X66_ARET
PL6.E3A0      #006=JCP$ZIP File=JCP$PROCESS.:E05TSI                              TUE 07/29/97 23:20 Page:128  

      657     2679    1   JCP$ZAP: ENTRY;

   2679  8 000064   000000 700200 xent  JCP$ZAP      TSX0  ! X66_AUTO_0
         8 000065   000004 000000                    ZERO    4,0

      658     2680    1           CALL M$CLOSE (CLHLP) ALTRET (CPRO);

   2680  8 000066   000052 630400 7                  EPPR0   CLHLP
         8 000067   450001 713400                    CLIMB   alt,close
         8 000070   406000 401760                    pmme    nvectors=13
         8 000071   000072 702000 8                  TSX2    CPRO

   2675  8 000072                       CPRO         null
      659     2681    1   CPRO:   ;
      660     2682    1           CALL M$CLOSE (CLPRO) ALTRET (CACC);

   2682  8 000072   000110 630400 7                  EPPR0   CLPRO
         8 000073   450001 713400                    CLIMB   alt,close
         8 000074   406000 401760                    pmme    nvectors=13
         8 000075   000076 702000 8                  TSX2    CACC

   2675  8 000076                       CACC         null
      661     2683    1   CACC:   ;
      662     2684    1           CALL M$CLOSE (CLACC) ALTRET (TLKY);

   2684  8 000076   000014 630400 7                  EPPR0   CLACC
         8 000077   450001 713400                    CLIMB   alt,close
         8 000100   406000 401760                    pmme    nvectors=13
         8 000101   000102 702000 8                  TSX2    TLKY

   2684  8 000102                       TLKY         null
      663     2685    1   TLKY:   ;
      664     2686    1           KZP.MSG#=0;

   2686  8 000102   000000 220003                    LDX0    0,DU
         8 000103   000003 440000 6                  SXL0    KZP
PL6.E3A0      #006=JCP$ZIP File=JCP$PROCESS.:E05TSI                              TUE 07/29/97 23:20 Page:129  

      665     2687    1           KZP.FCN=OC_ZAP;

   2687  8 000104   000007 236007                    LDQ     7,DL
         8 000105   000004 552004 6                  STBQ    KZP+1,'04'O

      666     2688    1           CALL M$WRITE (TKYN) ALTRET (RTN);

   2688  8 000106   000000 630400 7                  EPPR0   TKYN
         8 000107   440001 713400                    CLIMB   alt,write
         8 000110   401400 401760                    pmme    nvectors=4
         8 000111   000063 702000 8                  TSX2    RTN

      667     2689    1           RETURN;

   2689  8 000112   000000 702200 xent               TSX2  ! X66_ARET
      668     2690    1   END JCP$ZIP;

PL6.E3A0      #006=JCP$ZIP File=JCP$PROCESS.:E05TSI                              TUE 07/29/97 23:20 Page:130  
--  Include file information  --

   OC_SUBS_C.:E05TOU  is referenced.
   JM_SUBS_C.:E05TOU  is referenced.
   KL_SUBS_C.:E05TOU  is referenced.
   KL_NETWORK_M.:E05TOU  is referenced.
   OC$MESSHD_C.:E05TOU  is referenced.
   KL_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   JG_EVID_C.:E05TOU  is referenced.
   JM$STRUCT.:E05TOU  is referenced.
   OC_MESSHD_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure JCP$ZIP.
PL6.E3A0      #006=JCP$ZIP File=JCP$PROCESS.:E05TSI                              TUE 07/29/97 23:20 Page:131  

 **** Variables and constants ****

  ****  Section 006  Data  JCP$ZIP

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     1-0-0/w UBIN        r     1 JC_MBSZAP                  2-0-0/w SBIN        r     1 JC_ZIP
     3-0-0/c STRC(180)   r     1 KZP                        0-0-0/w UBIN        r     1 STOP_COUNT

  ****  Section 007 RoData JCP$ZIP

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    14-0-0/d STRC(1080)  r     1 CLACC                     52-0-0/d STRC(1080)  r     1 CLHLP
   110-0-0/d STRC(1080)  r     1 CLPRO                      0-0-0/d STRC(432)   r     1 TKYN

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w UBIN        r     1 FEX

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w CHAR(140)   r     1 JC_CSMBF
     0-0-0/w STRC        r     1 KL_FETBL(0:0)
     0-0-0/w UBIN        r     1 KL_MXFE                    0-0-0/w STRC(1260)  r     1 KMSG

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
PL6.E3A0      #006=JCP$ZIP File=JCP$PROCESS.:E05TSI                              TUE 07/29/97 23:20 Page:132  
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0N  NULL        r     1 M$ACCTLG                   0-0-0N  NULL        r     1 M$CSCG
     0-0-0N  NULL        r     1 M$HLPF                     0-0-0N  NULL        r     1 M$PROF


   Procedure JCP$ZIP requires 75 words for executable code.
   Procedure JCP$ZIP requires 4 words of local(AUTO) storage.

    No errors detected in file JCP$PROCESS.:E05TSI    .
PL6.E3A0      #006=JCP$ZIP File=JCP$PROCESS.:E05TSI                              TUE 07/29/97 23:20 Page:133  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #006=JCP$ZIP File=JCP$PROCESS.:E05TSI                              TUE 07/29/97 23:20 Page:134  
          MINI XREF LISTING

CACC
      2675**LABEL    2682--CALLALT
CLACC
      2553**DCL      2684<>CALL
CLACC.SN_
      2553**DCL      2553--REDEF
CLACC.UTL_
      2554**DCL      2554--REDEF
CLACC.V
      2558**DCL      2553--DCLINIT
CLACC.V.EXPIRE#
      2568**DCL      2568--REDEF
CLACC.V.TYPE#
      2566**DCL      2566--REDEF
CLACC.V.XTNSIZE#
      2563**DCL      2563--REDEF    2565--REDEF
CLHLP
      2595**DCL      2680<>CALL
CLHLP.SN_
      2595**DCL      2595--REDEF
CLHLP.UTL_
      2596**DCL      2596--REDEF
CLHLP.V
      2600**DCL      2595--DCLINIT
CLHLP.V.EXPIRE#
      2610**DCL      2610--REDEF
CLHLP.V.TYPE#
      2608**DCL      2608--REDEF
CLHLP.V.XTNSIZE#
      2605**DCL      2605--REDEF    2607--REDEF
CLPRO
      2637**DCL      2682<>CALL
PL6.E3A0      #006=JCP$ZIP File=JCP$PROCESS.:E05TSI                              TUE 07/29/97 23:20 Page:135  
CLPRO.SN_
      2637**DCL      2637--REDEF
CLPRO.UTL_
      2638**DCL      2638--REDEF
CLPRO.V
      2642**DCL      2637--DCLINIT
CLPRO.V.EXPIRE#
      2652**DCL      2652--REDEF
CLPRO.V.TYPE#
      2650**DCL      2650--REDEF
CLPRO.V.XTNSIZE#
      2647**DCL      2647--REDEF    2649--REDEF
CPRO
      2675**LABEL    2680--CALLALT
FEX
      2470**DCL      2672<<DOINDEX  2673>>IF
JC_CSMBF
      2472**DCL      2473--REDEF
JC_MBSZAP
      2482**DCL      2669>>IF
JC_ZIP
      2483**DCL      2657<<ASSIGN   2675<<ASSIGN
JMM$ZAP
      2485**DCL-ENT  2658--CALL
KLI$KBOOT
      2484**DCL-ENT  2668--CALL
KL_AUTOFAIL.FLAGS
      1415**DCL      1416--REDEF
KL_AUTOFAIL.MSGID
      1411**DCL      1412--REDEF
KL_AUTOFAIL.WSN
      1418**DCL      1419--REDEF
KL_FEMSG.FLAGS
      1365**DCL      1366--REDEF
KL_FEMSG.MSGID
      1361**DCL      1362--REDEF
PL6.E3A0      #006=JCP$ZIP File=JCP$PROCESS.:E05TSI                              TUE 07/29/97 23:20 Page:136  
KL_FEMSG.WSN
      1368**DCL      1369--REDEF
KL_FETBL.KTYP
      1311**DCL      2673>>IF
KL_MXFE
      1303**DCL      2672>>DOINDEX
KL_NETWORK_BUF.TERMINAL_ID.TERM
      1555**DCL      1564--REDEF
KL_NETWORK_KEY.KEY.TERMID.TERM
      1481**DCL      1490--REDEF
KL_RDBF.FEL#
      1324**DCL      1325--REDEF
KL_TMSG.FLAGS
      1387**DCL      1388--REDEF
KL_TMSG.MSGID
      1383**DCL      1384--REDEF
KL_TMSG.WSN
      1390**DCL      1391--REDEF
KMSG.FID.CNT
      2479**DCL      2663<<ASSIGN
KMSG.KIN#
      2474**DCL      2664<<ASSIGN   2667<<ASSIGN
KZP
      2487**DCL      2517--DCLINIT  2518--DCLINIT
KZP.FCN
      2493**DCL      2687<<ASSIGN
KZP.FLAGS
      2494**DCL      2495--REDEF
KZP.MSG#
      2489**DCL      2686<<ASSIGN
KZP.MSGID
      2490**DCL      2491--REDEF
M$CLOSE
        16**DCL-ENT  2680--CALL     2682--CALL     2684--CALL
M$WRITE
        17**DCL-ENT  2676--CALL     2688--CALL
PL6.E3A0      #006=JCP$ZIP File=JCP$PROCESS.:E05TSI                              TUE 07/29/97 23:20 Page:137  
RTN
      2675**LABEL    2676--CALLALT  2688--CALLALT
STOP_COUNT
      2471**DCL      2660<<ASSIGN   2660>>ASSIGN   2661>>IF       2670>>IF
TKYN
      2516**DCL      2676<>CALL     2688<>CALL
TKYN.STATION_
      2518**DCL      2518--REDEF
TKYN.V
      2519**DCL      2516--DCLINIT
TKYN.V.DVBYTE.VFC#
      2525**DCL      2525--REDEF
TLKY
      2684**LABEL    2684--CALLALT
