

CC.C03    File=zbe$lset:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=1  
        1         1             /* $Header: lset.c,v 1.3 87/03/10 11:35:40 ceriel Exp $ */
        2         2             /*
        3         3              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        4         4              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        5         5              */
        6         6             /*  L O N G   S E T S
        7         7              *
        8         8              *  L S E T . C
        9         9              */
       10        10
       11        11
       12        12             #include "types:h"
       13        13             #include "lset:h"
       14        14             #include "alloc:h"
       15        15             #include "debug:h"
       16        16
       17        17
       18        18             /* A 'long' set is represented as a linear list of 'elemholder'
       19        19              * records. Every such record contains a pointer to an element
       20        20              * of the set and to the next elemholder. An empty set is
       21        21              * represented as a null pointer.
       22        22              * An element of a long set must be of some pointer type or,
       23        23              * in any case, must have the size of a pointer. Note that
       24        24              * the strict typing rules are not obeyed here.
       25        25              * This package implements the usual operations on sets.
       26        26              * The name of every operation is preceeded by a 'L' to
       27        27              * distinguish it from the operation on 'compact' (bitvector)
       28        28              * sets with a similar name.
       29        29              */
       30        30
       31        31
       32        32             lset Lempty_set()
       33        33             {
       34        34    1         return ((lset) 0);
       35        35    1        }
       36        36
CC.C03    File=zbe$lset:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=2  
       37        37
       38        38             bool Lis_elem(x,s)
       39        39              register Lelem_t x;
       40        40              register lset    s;
       41        41             {
       42        42    1
       43        43    1         /* Search the list to see if x is an element of s */
       44        44    1         while (s != (elem_p) 0) {
       45        45    2            if (s->e_elem == x) {
       46        46    3               return TRUE;
       47        47    3            }
       48        48    2            s = s->e_next;
       49        49    2         }
       50        50    1         return FALSE;
       51        51    1        }
       52        52
       53        53
       54        54             Ladd(x,s_p)
       55        55              Lelem_t x;
       56        56              lset    *s_p;
       57        57             {
       58        58    1         /* add x to a set. Note that the set is given as in-out
       59        59    1          * parameter, because it may be changed.
       60        60    1          */
       61        61    1
       62        62    1         elem_p t;
       63        63    1
       64        64    1         if (!Lis_elem(x,*s_p)) {
       65        65    2            t = newelem();  /* allocate a new elemholder */
       66        66    2            t->e_elem = x;
       67        67    2            t->e_next = *s_p;  /* insert it at the head of the list */
       68        68    2            *s_p = t;
       69        69    2         }
       70        70    1        }
       71        71
       72        72
       73        73             Lremove(x,s_p)
CC.C03    File=zbe$lset:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=3  
       74        74              Lelem_t x;
       75        75              lset    *s_p;
       76        76             {
       77        77    1         /* Remove x from a set. If x was not an element of
       78        78    1          * the set, nothing happens.
       79        79    1          */
       80        80    1
       81        81    1         register elem_p *epp, ep;
       82        82    1         lset s;
       83        83    1
       84        84    1         s = *s_p;
       85        85    1         epp = &s;
       86        86    1         while ((ep = *epp) != (elem_p) 0) {
       87        87    2            if (ep->e_elem == x) {
       88        88    3               *epp = ep->e_next;
       89        89    3               oldelem(ep);
       90        90    3               break;
       91        91    3            } else {
       92        92    3               epp = &ep->e_next;
       93        93    3            }
       94        94    2         }
       95        95    1         *s_p = s;
       96        96    1        }
       97        97
       98        98
       99        99             /* The operations first, next and elem can be used to iterate
      100       100              * over a set. For example:
      101       101              *  for (i = Lfirst(s); i != (Lindex) 0; i = Lnext(i,s) {
      102       102              *     x = Lelem(i);
      103       103              *     use x
      104       104              *  }
      105       105              * which is like:
      106       106              *      'for all elements x of s do'
      107       107              *     use x
      108       108              */
      109       109
      110       110
CC.C03    File=zbe$lset:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=4  
      111       111             Lindex Lfirst(s)
      112       112              lset s;
      113       113             {
      114       114    1         return ((Lindex) s);
      115       115    1         /* Note that an index for long sets is just
      116       116    1          * a pointer to an elemholder.
      117       117    1          */
      118       118    1        }
      119       119
      120       120
      121       121             Lindex Lnext(i,s)
      122       122              Lindex i;
"zbe$lset:c.:ZBC3TSI", line 122: (warning) identifier "s" is not used
      123       123              lset   s;
      124       124             {
      125       125    1         assert(i != (Lindex) 0);
      126       126    1         return (i->e_next);
      127       127    1        }
      128       128
      129       129
      130       130             Lelem_t Lelem(i)
      131       131              Lindex i;
      132       132             {
      133       133    1         return (i->e_elem);
      134       134    1        }
      135       135
      136       136
      137       137
      138       138             Ljoin(s1,s2_p)
      139       139              lset s1,*s2_p;
      140       140             {
      141       141    1         /* Join two sets, assign the result to the second set
      142       142    1          * and delete the first set (i.e. the value of the
      143       143    1          * first set becomes undefined).
      144       144    1          */
      145       145    1
      146       146    1          register elem_p *epp, ep;
CC.C03    File=zbe$lset:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=5  
      147       147    1          lset s2;
      148       148    1
      149       149    1          /* First all elements of s1 that are also an element of s2
      150       150    1           * are removed from the s1 list. The two resulting lists
      151       151    1           * (for s1 and s2) are linked (s1 first).
      152       152    1           * Note the usage of epp, which points to a pointer that
      153       153    1           * points to the next elemholder record of the list.
      154       154    1           */
      155       155    1
      156       156    1         s2 = *s2_p;
      157       157    1         epp = &s1;
      158       158    1         while ((ep = *epp) != (elem_p) 0) {
      159       159    2            if (Lis_elem(ep->e_elem,s2)) {
      160       160    3               /* remove an element */
      161       161    3               *epp = ep->e_next;
      162       162    3               oldelem(ep);
      163       163    3            } else {
      164       164    3               epp = &ep->e_next;
      165       165    3            }
      166       166    2         }
      167       167    1         *epp = s2; /* last record of s1 (or s1 itself) now points
      168       168    1                * to first record of s2.
      169       169    1                */
      170       170    1         *s2_p = s1;
      171       171    1        }
      172       172
      173       173
      174       174             Ldeleteset(s)
      175       175              lset s;
      176       176             {
      177       177    1         register elem_p ep, next;
      178       178    1
      179       179    1         for (ep = s; ep != (elem_p) 0; ep = next) {
      180       180    2            next = ep->e_next;
      181       181    2            oldelem(ep);
      182       182    2         }
      183       183    1        }
CC.C03    File=zbe$lset:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=6  
      184       184
      185       185
      186       186             bool Lis_subset(s1,s2)
      187       187              lset s1,s2;
      188       188             {
      189       189    1         /* See if s1 is a subset of s2 */
      190       190    1
      191       191    1         register Lindex i;
      192       192    1
      193       193    1         for (i = Lfirst(s1); i != (Lindex) 0; i = Lnext(i,s1)) {
      194       194    2            if (!Lis_elem(Lelem(i),s2)) return FALSE;
      195       195    2         }
      196       196    1         return TRUE;
      197       197    1        }
      198       198
      199       199
      200       200             short Lnrelems(s)
      201       201              lset s;
      202       202             {
      203       203    1         /* Compute the number of elements of a set */
      204       204    1
      205       205    1         register elem_p ep;
      206       206    1         register short  cnt;
      207       207    1
      208       208    1         cnt = 0;
      209       209    1         for (ep = s; ep != (elem_p) 0; ep = ep->e_next) {
      210       210    2            cnt++;
      211       211    2         }
      212       212    1         return cnt;
      213       213    1        }
      214       214
---  Include file information  ---

   zbe$types:h.:ZBC3TOU. is referenced
   zbe$lset:h.:ZBC3TOU. is referenced
   zbe$alloc:h.:ZBC3TOU. is referenced
   zbe$debug:h.:ZBC3TOU. is referenced
CC.C03    File=zbe$lset:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=7  

1 warning was detected in the file zbe$lset:c.:ZBC3TSI
