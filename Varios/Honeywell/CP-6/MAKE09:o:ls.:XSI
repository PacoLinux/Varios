

rCC.C03    File=MAKE_SIc09.:XSI                                                      Thu Nov 20 1997  Page=1  
A        1         1             /*M*    make_read:c --    Routines to read and parse the Makefile */
A        2         2             /*T***********************************************************/
A        3         3             /*T*                                                         */
A        4         4             /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
A        5         5             /*T*                                                         */
A        6         6             /*T***********************************************************/
A        7         7             #include <stdio.h>
A        8         8             #include <stdlib.h>
A        9         9             #include <string.h>
A       10        10             #include <b$jit_c.h>
A       11        11             extern struct b_jit *B$JIT$;   /* Should be in <b$jit_c.h>! */
A       12        12             #include "MAKE_Cc13"
A       13        13             #include "MAKE_Cc14"
A       14        14
A       15        15             extern void crash();
A       16        16             extern void MakeCommand();
A       17        17             extern char *ExpandMacros();
A       18        18             extern FILE *Makefile;
A       19        19             char *plural();
A       20        20
A       21        21             char *CONST English[] = { "No", "One", "Two", "Three", "Four",
A       22        22    1                   "Five", "Six", "Seven", "Eight", "Nine", "Ten"};
A       23        23
A       24        24             CONST char LS_fmt[]          = "%6d: %s\n";
A       25        25             CONST char LS_fmt_1st[]      = "%6d: %1.*s\n";
A       26        26             CONST char LS_fmt_cnt[]      = "     +: %1.*s\n";
A       27        27
A       28        28             static int RecLSroom = 0, RecLen = 0;
A       29        29             static char *BigRecBuf = 0;
A       30        30             static int   BigRecSize = 0;
A       31        31                    int   MakeRecs   = 0;
A       32        32
A       33        33             extern char    *TargetBuf;
A       34        34             extern unsigned TargetBufSize;
A       35        35
A       36        36             CONST int  BreakTable[] = {
A       37        37    1        /* 1 2 3 4 5 6 7 8 9 * 1 2 3 4 5 6 7 8 9 * 1 2 3 4 5 6 7 8 9 * 1 2 */
rCC.C03    File=MAKE_SIc09.:XSI                                                      Thu Nov 20 1997  Page=2  
A       38        38    1           1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
A       39        39    1           1,1,1,0,0,1,0,1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,
A       40        40    1           1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,
A       41        41    1           1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,
A       42        42    1
A       43        43    1           2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
A       44        44    1           1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
A       45        45    1           1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
A       46        46    1           1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1};
A       47        47
A       48        48
A       49        49             /*F*    NAME:          ReadMake(int LS_flag, int LS_width, int VB_flag)
A       50        50                     PURPOSE:       To read a makefile.
A       51        51                     DESCRIPTION:
A       52        52                        The Makefile variable is a file pointer to the stream
A       53        53                        that is open to the makefile to process.  Each record
A       54        54                        in the makefile is read, any macros are expanded by the
A       55        55                        "ExpandMacros" function and the command is processed by
A       56        56                        the "MakeCommand" function.
A       57        57
A       58        58                        When the end of the makefile is read, the temporary buffers
A       59        59                        allocated for macro processing and record input are
A       60        60                        released, and the number of errors encountered in the
A       61        61                        makefile is printed (if verbose is specified) and also
A       62        62                        returned to the calling program.
A       63        63
A       64        64             */
A       65        65
A       66        66             int
A       67        67             ReadMake(LS_flag,LS_width,VB_flag)  {
A       68        68    1
A       69        69    1        char buf[512];   /*  Sufficient to hold input records */
A       70        70    1        char *b;
A       71        71    1        char *MakeFileRecord();
A       72        72    1
A       73        73    1          RecLSroom = LS_width - 8;
A       74        74    1          RecLSroom = (RecLSroom > 20)? RecLSroom : 20;
rCC.C03    File=MAKE_SIc09.:XSI                                                      Thu Nov 20 1997  Page=3  
A       75        75    1          MakeRecs = 0;
A       76        76    1
A       77        77    1          while ( InputRec = MakeFileRecord(buf, sizeof(buf), LS_flag))  {
A       78        78    2             b = ExpandMacros(InputRec, (InputRecLen = RecLen)  );
A       79        79    2             if (b)
A       80        80    2                MakeCommand( b, MacRecLen, VB_flag );
A       81        81    2             };
A       82        82    1
A       83        83    1          if (LS_flag || VB_flag)
A       84        84    1             printf("\n %s Error%s and %s Warning%s in Makefile\n",
A       85        85    1                   plural(Errors,0),plural(Errors,1),
A       86        86    1                   plural(Warnings,0),plural(Warnings,1));
A       87        87    1          if (BigRecSize) free(BigRecBuf), BigRecBuf = 0, BigRecSize = 0;
A       88        88    1          if (TargetBufSize) free(TargetBuf), TargetBufSize = 0;
A       89        89    1          MakeRecs = 0;
A       90        90    1          return Errors;
A       91        91    1        }
A       92        92
A       93        93
A       94        94             /*D*    NAME:    plural
A       95        95                     PURPOSE: To return an "s" if the word should be plural or
A       96        96                              return "NO" or a formatted number given an integer.
A       97        97             */
A       98        98
A       99        99             char *plural(v,flg)   int v; int flg;
A      100       100             {
A      101       101    1          static last = 0;
A      102       102    1          static char buf[5][15];
A      103       103    1          char *rs = (v < 11) ? English[v] : "";
A      104       104    1
A      105       105    1          if (flg) {
A      106       106    2             if (v == 1) rs = "";
A      107       107    2                else rs = "s";
A      108       108    2             }
A      109       109    1          else if (v > 10)  {
A      110       110    2             rs = buf[last++];
A      111       111    2             sprintf(rs,"%d",v);
rCC.C03    File=MAKE_SIc09.:XSI                                                      Thu Nov 20 1997  Page=4  
A      112       112    2             if (last > 5)  last = 0;
A      113       113    2             }
A      114       114    1          return rs;
A      115       115    1        }
A      116       116
A      117       117
A      118       118             /*D*    NAME:    PrintSegment
A      119       119                     PURPOSE: To print a record, possibly breaking it in a "nice"
A      120       120                              place if it is too long for one output line.
A      121       121                     DESCRIPTION:
A      122       122                        The arguments are:
A      123       123
A      124       124                        room  -- maximum number of chars to print from buf
A      125       125                        buf   -- pointer to the text to print and/or break
A      126       126                        wp    -- index from args (0) to position to insert the
A      127       127                                 trunction position (precision of %s format).
A      128       128                        fmt   -- printf output format
A      129       129                        args  -- arguments to printf
A      130       130
A      131       131                        The result of this function is the actual number of
A      132       132                        characters that were printed.
A      133       133             */
A      134       134             int PrintSegment(room,buf,wp,fmt,args,a,b,c,d,e,f,g)
A      135       135               char *buf;
A      136       136               char *fmt;
A      137       137             {
A      138       138    1          int len = 0, got = 0, spec = 0, ct;
A      139       139    1          char  altb[512];
A      140       140    1          int *arglist = &args;
A      141       141    1          char **cplist = (char **) arglist;
A      142       142    1
A      143       143    1          while(len < room && buf[len]) {
A      144       144    2             ct = BreakTable[ buf[len++] ];
A      145       145    2             if ( ct == 1) got = len;
A      146       146    2             else if (ct == 2) spec++;
A      147       147    2             }
A      148       148    1
rCC.C03    File=MAKE_SIc09.:XSI                                                      Thu Nov 20 1997  Page=5  
A      149       149    1          if (len <= room) got = room = len;
A      150       150    1          if (!got) got = room;
A      151       151    1          arglist[wp] = got;
A      152       152    1          if (spec)   {
A      153       153    2             char *cp;
A      154       154    2             memcpy(altb, buf, got);
A      155       155    2             altb[got] = 0;
A      156       156    2             cplist[wp+1] = altb;
A      157       157    2             while ( cp = strchr(altb, 128) )
A      158       158    2                *cp = '$';
A      159       159    2             }
A      160       160    1          printf(fmt,args,a,b,c,d,e,f,g);
A      161       161    1          return got;
A      162       162    1        }
A      163       163
A      164       164             /*D*    NAME:    PrintRecord
A      165       165                     PURPOSE: To print an input record.
A      166       166                     DESCRIPTION:
A      167       167                        The parameters to this function are:
A      168       168
A      169       169                        buf      -- the record to print (terminating "\n" removed)
A      170       170                        bsize    -- length of the record read
A      171       171                        RecNo    -- the record number
A      172       172             */
A      173       173             int PrintRecord(buf, bsize, RecNo)
A      174       174               char *buf;
A      175       175               int bsize;
A      176       176               int RecNo;
A      177       177             {
A      178       178    1
A      179       179    1          if (bsize > RecLSroom)  {
A      180       180    2             char *b = buf;
A      181       181    2             int  rem = bsize, ps = 0;
A      182       182    2
A      183       183    2             ps = PrintSegment(RecLSroom,buf,1,LS_fmt_1st,RecNo,1,b);
A      184       184    2             b += ps;
A      185       185    2             rem -= ps;
rCC.C03    File=MAKE_SIc09.:XSI                                                      Thu Nov 20 1997  Page=6  
A      186       186    2             while (rem > RecLSroom) {
A      187       187    3                ps = PrintSegment(RecLSroom,b,0,LS_fmt_cnt,0,b);
A      188       188    3                b += ps, rem -= ps;
A      189       189    3                }
A      190       190    2             printf(LS_fmt_cnt,RecLSroom,b);
A      191       191    2             }
A      192       192    1             else printf(LS_fmt,RecNo,buf);
A      193       193    1          return 1;
A      194       194    1        }
A      195       195
A      196       196
A      197       197             /*D*    NAME:    MakeFileRecord
A      198       198                     PURPOSE: To return a pointer to a complete makefile record.
A      199       199             */
A      200       200
A      201       201             char *
A      202       202             MakeFileRecord(buf, bsize, LS_flag)
A      203       203               char *buf;
A      204       204               int   bsize;
A      205       205               int   LS_flag;
A      206       206             {
A      207       207    1          int   RecStart = -1;
A      208       208    1          int   l;
A      209       209    1          int cont  = 1;
A      210       210    1          char *rs;
A      211       211    1
A      212       212    1          RecLen = 0;
A      213       213    1          if (BigRecBuf) BigRecBuf[0] = 0;
A      214       214    1          while (cont)   {
A      215       215    2             if (!fgets(buf, bsize, Makefile))   {
A      216       216    3                if (!InputNo) return NULL;  /* EOF on main file */
A      217       217    3                fclose(Makefile);
A      218       218    3                if (file_table[InputNo].ifdepth!=file_table[InputNo-1].ifdepth)
A      219       219    3                   warning("\"%s\" line %d: endif statement missing before EOF\n",
A      220       220    3                      file_table[InputNo].fid,  file_table[InputNo].recno);
A      221       221    3                Makefile = file_table[--InputNo].strm;
A      222       222    3                continue;
rCC.C03    File=MAKE_SIc09.:XSI                                                      Thu Nov 20 1997  Page=7  
A      223       223    3                }
A      224       224    2             l = strlen(buf);
A      225       225    2
A      226       226    2             if ('\n' != buf[l-1])   {
A      227       227    3                if (RecStart < 0) RecStart = RecLen;
A      228       228    3                AddRecordSegment(buf,l);
A      229       229    3                }
A      230       230    2             else  {     /**  end-of-record located    **/
A      231       231    3                buf[--l] = 0;  /* remove newline */
A      232       232    3                MakeRecs++;
A      233       233    3                file_table[InputNo].recno++;
A      234       234    3                if (RecLen)    AddRecordSegment(buf, l);
A      235       235    3
A      236       236    3                if (LS_flag)
A      237       237    3                   if (RecStart < 0)
A      238       238    3                      PrintRecord(buf, l, MakeRecs);
A      239       239    3                   else PrintRecord(BigRecBuf+RecStart, RecLen-RecStart, MakeRecs);
A      240       240    3                rs = (RecLen) ? BigRecBuf+RecLen-1 : buf+l-1;
A      241       241    3                if (*rs == '\\')   {  /* Continued Record */
A      242       242    4                   *rs = 0, l--;
A      243       243    4                   if (!RecLen)
A      244       244    4                      AddRecordSegment(buf, l);
A      245       245    4                   else RecLen--;
A      246       246    4                   RecStart = RecLen;
A      247       247    4                   }
A      248       248    3                else cont = 0;
A      249       249    3                }
A      250       250    2             }  /* of while (cont)   */
A      251       251    1
A      252       252    1          if (!RecLen)   {
A      253       253    2             RecLen = l;
A      254       254    2             rs = buf;
A      255       255    2             }
A      256       256    1          else rs = BigRecBuf;
A      257       257    1          if  (B$JIT$->active.jit)  {
A      258       258    2             char cb[120];
A      259       259    2             static int cci = 1;
rCC.C03    File=MAKE_SIc09.:XSI                                                      Thu Nov 20 1997  Page=8  
A      260       260    2             if (cci) {
A      261       261    3                memset(B$JIT$->ccbuf, ' ', sizeof(B$JIT$->ccbuf));
A      262       262    3                cci = 0;
A      263       263    3                }
A      264       264    2             sprintf(cb,"make Record=%d %s", MakeRecs, file_table[InputNo].fid);
A      265       265    2             memcpy(B$JIT$->ccbuf, cb, strlen(cb));
A      266       266    2             }
A      267       267    1          return rs;
A      268       268    1        }
A      269       269
A      270       270
A      271       271             AddRecordSegment(buf, bsize)
A      272       272               char *buf;
A      273       273               int  bsize;
A      274       274             {
A      275       275    1          if (!BigRecBuf || BigRecSize < (RecLen + bsize))  {
A      276       276    2             if (!(BigRecBuf = (char*)realloc(BigRecBuf,(BigRecSize+=1024))))
A      277       277    2                crash("Out of Memory: AddRecordSegment");
A      278       278    2             BigRecBuf[RecLen] = 0;
A      279       279    2             }
A      280       280    1          strcat(BigRecBuf,buf);
A      281       281    1          RecLen += bsize;
A      282       282    1        }
A      283       283
A      284       284
A      285       285             warning(fmt,args,a,b,c,d,e,f)
A      286       286               char *fmt;
A      287       287             {
A      288       288    1          printf(fmt,args,a,b,c,d,e,f);
A      289       289    1          Warnings++;
A      290       290    1        }
A      291       291
A      292       292             void
A      293       293             error(fmt, args,a,b,c,d,e,f)
A      294       294               char  *fmt;
A      295       295             {
A      296       296    1          printf(fmt,args,a,b,c,d,e,f);
rCC.C03    File=MAKE_SIc09.:XSI                                                      Thu Nov 20 1997  Page=9  
A      297       297    1          Errors++;
A      298       298    1        }
A      299       299
A      300       300             void
A      301       301             crash(fmt, args,a,b,c,d,e,f)
A      302       302               char  *fmt;
A      303       303             {
A      304       304    1          printf("\n\n***  ABORT: ");
A      305       305    1          printf(fmt,args,a,b,c,d,e,f);
A      306       306    1          printf("\n");
A      307       307    1          exit(8);
A      308       308    1        }
A      309       309
A---  Include file information  ---
A
A   stdio:h.:LIBRARY. is referenced
A   stdlib:h.:LIBRARY. is referenced
A   string:h.:LIBRARY. is referenced
A   b$jit_c:h.:LIBRARY. is referenced
A   xu_cp6_c:h.:LIBRARY. is referenced
A   MAKE_Cc13.:XSI. is referenced
A   MAKE_Cc14.:XSI. is referenced
C
ANo diagnostics were issued in the file MAKE_SIc09.:XSI
