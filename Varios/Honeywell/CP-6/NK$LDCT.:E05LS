

15:06 JUL 28 '97 NK$LDCT.:E05SI                                            1    
    1      /*M* NK$LDCT Structure for LDCT entries*/
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /*X*DMC,PLM=6,IND=2,ENU=2,DCI=4,CSU=2,ECU=2,THI=2,DTI=0*/
    8      /*P* NAME: NK$LDCT
    9
   10      The file NK$LDCT is an INCLUDE file which contains the
   11      following macros:
   12           NK$LDCT         Defines the Host LDCT structure.
   13           NK_RESCOD_TXT   Generates TEXT for NK$LDCT.RESCOD
   14           NK_DFLG_TEXT    Generates TEXT for NK$LDCT.DFLG bits
   15           NK_LKFLG_TEXT   Generates TEXT for NK$LDCT.LKFLG bits
   16           NK_QFL_TEXT     Generates TEXT for NK$LDCT.QFL bits
   17      */
   18
   19      /*F* NAME: NK$LDCT
   20
   21      The NK$LDCT macro defines the structure for the Logical
   22      Device Control Table in the Host.
   23
   24      FOM$PMME makes special use of LDCT blocks (SYMB blocks), but restores the
   25      LDCTX when releasing them.  (This requires special consideration when
   26      developing diag patches to trace the use of LDCTs.)
   27      */
   28
   29
   30      %MACRO NK$LDCT (STCLASS=BASED,NAME=NK$LDCT);
   31
   32       %LSET LISTDIR='0'B;
   33       %LSET LISTEXP='1'B;
   34       %LSET LISTCOM='0'B;
   35       %LSET LISTSUB='1'B;
   36       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
   37       %IF (SUBSTR(STR,0,6)='STATIC') OR
15:06 JUL 28 '97 NK$LDCT.:E05SI                                            2    
   38       (SUBSTR(STR,0,8)='CONSTANT') OR
   39       (SUBSTR(STR,0,3)='EXT');
   40       %LSET INIT=CHARTEXT('INIT');
   41      %LSET EINIT=CHARTEXT(' ');
   42       %ELSE;
   43       %LSET INIT=CHARTEXT('/*');
   44      %LSET EINIT=CHARTEXT('*/');
   45       %ENDIF;
   46
   47      DCL 1 NAME STCLASS ALIGNED,
   48            2 SYMB$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
   49            2 MSGID REDEF SYMB$ UBIN WORD,
   50            2 MSGIDB REDEF SYMB$ BIT(36),
   51            2 ERR REDEF SYMB$,
   52              3 FCG BIT(12) UNAL,
   53              3 MID BIT(6) UNAL,
   54              3 MON BIT(1) UNAL,
   55              3 CODE UBIN(14) UNAL,
   56              3 SEV UBIN(3) UNAL,
   57            2 IOQ$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
   58            2 MARKER REDEF IOQ$ BIT(36),
   59            2 DEVNM CHAR(8) %INIT(' ')%CHARTEXT('/**/'),
   60            2 DDT$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
   61            2 LNK$ REDEF DDT$ PTR,
   62                             /* Used for free chain (NK_FHD$), nocg list (KC_NOCG$,
   63                                Q-full list (KI$FEI.QFLHD$), etc. */
   64            2 RAT$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
   65            2 LDCTX UBIN(18) UNAL %INIT(0)%CHARTEXT('/**/'),
   66            2 LDTB REDEF LDCTX,
   67              3 LDT UBIN(10) UNAL,
   68              3 LDB UBIN(8) UNAL,
   69            2 DFLG UNAL,                      /* WORD 6, BITS 18-35: DEVICE FLAGS   */
   70              3 INPUT BIT(1) %INIT('1'B)%CHARTEXT('/**/'),
   71              3 OUTPUT BIT(1) %INIT('1'B)%CHARTEXT('/**/'),
   72              3 CM BIT(1) %INIT('1'B)%CHARTEXT('/**/'),
   73              3 CONSOLE BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
   74              3 SYMBIONT BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
15:06 JUL 28 '97 NK$LDCT.:E05SI                                            3    
   75              3 OLDSC BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
   76              3 NOSND BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),  /* No send messages */
   77              3 LOCAL BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
   78              3 RRR BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
   79              3 RLSE BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
   80              3 PRLS BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
   81              3 IQD BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
   82              3 PPND BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
   83              3 FEDN BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
   84            2 RESCOD UBIN(4) UNAL %INIT(0)%CHARTEXT('/**/'),
   85            2 RDSOUT UBIN(6) UNAL %INIT(0)%CHARTEXT('/**/'),
   86            2 NOCGREJ BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
   87            2 NOCGINF BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
   88            2 ACCTNG BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
   89            2 USER UBIN(9) UNAL %INIT(0)%CHARTEXT('/**/'),
   90            2 TCTX# UBIN(18) UNAL %INIT(0)%CHARTEXT('/**/'),
   91            2 NOWAIT UNAL,
   92              3 KEYTYP UBIN(6) UNAL %INIT(0)%EINIT,
   93              3 DMN UBIN(3) UNAL %INIT(0)%EINIT,
   94              3 STREAM UBIN BYTE UNAL %INIT(0)%EINIT,
   95              3 DCB# UBIN BYTE UNAL %INIT(0)%EINIT,
   96            2 QFL,
   97              3 WRT BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
   98              3 RD BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
   99              3 INCMP BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
  100              3 RLS BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
  101              3 RDGO BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
  102              3 RLT BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
  103              3 CLDQ BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
  104            2 CLDQ UBIN(2) UNAL %INIT(0)%CHARTEXT('/**/'),
  105            2 LKFLG,
  106              3 MRKPND BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'), /* Marker pending */
  107      /* MRKPND is used to delay returning the marker that accompanies a break
  108      or control-Y, so that a line waiting to get out (SCOB) doesn't get
  109      displayed.  The marker is returned the next time KIA$UCIO is entered.
  110      Also used to decide whether the read needs canceled if SSR$REG altreturns
  111      for STI or SCW.  It does unless the altreturn was because of break or
15:06 JUL 28 '97 NK$LDCT.:E05SI                                            4    
  112      control-Y, which set MRKPND. */
  113              3 OBLK BIT(1) UNAL %INIT('1'B)%CHARTEXT('/**/'), /* Output blocked */
  114              3 ABORTED BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  115                              /* Set if this FPRG is at jobstep but aborted        */
  116              3 REGGED REDEF ABORTED BIT(1),
  117                              /* Set if path establishment has user REGged         */
  118              3 QNFL BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'), /* Cirqular queue not full reported */
  119              3 WTMRK BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  120              3 WAITINGEXIT BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  121              3 ISOPATH BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  122              3 QDPPATH BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  123              3 * BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  124              3 QUEUED BIT(1) %INIT('0'B)%CHARTEXT('/**/'), /* Queue for credits or cq */
  125              3 MAPD BIT(1) %INIT('0'B)%CHARTEXT('/**/'),   /* VGETTED BUFFER */
  126              3 QFL BIT(1) %INIT('0'B)%CHARTEXT('/**/'),    /* CHAINED FOR OCQ FULL */
  127              3 ACTIVE BIT(1) %INIT('0'B)%CHARTEXT('/**/'), /* ACTIVE ON CG */
  128              3 INTOGGLE BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
  129                             /* Toggle INPUT for CG term station and call KCF$FERDS */
  130              3 FPSTEP BIT(1) %INIT('0'B)%CHARTEXT('/**/'), /* FPRG at JOBSTEP -   */
  131                                                            /* M$SETFP may be sent */
  132              3 FPPM BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
  133                              /* M$SETFP or LDTRC in progress                      */
  134              3 RLTRM BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
  135              3 NOWAIT BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'), /* No wait IO pending */
  136            2 SYSID UBIN(18) UNAL %INIT(0)%CHARTEXT('/**/'),
  137                           /* SYSID of the other endpoint user - 0 if no user      */
  138                           /* This field is already expanded for crossing coupler  */
  139            2 STA$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  140            2 CLLNK$ REDEF STA$ PTR,
  141                           /* Used to chain together all LDCTs with the same RAT$,
  142                              presumably pointing to a shared CL-type RAT. */
  143            2 IP$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'), /* POINTER TO CURRENT MESSAGE */
  144            2 BKPND UBIN(9) UNAL %INIT(0)%CHARTEXT('/**/'),
  145            2 * BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  146            2 GENERATION UBIN(8) UNAL %INIT(0)%CHARTEXT('/**/'), /* Generation for this LDCT */
  147            2 IPFEI# UBIN(9) UNAL %INIT(0)%CHARTEXT('/**/'),
  148            2 DCBNO SBIN(9) UNAL %INIT(0)%CHARTEXT('/**/'),  /* Assoc. DCB number  */
15:06 JUL 28 '97 NK$LDCT.:E05SI                                            5    
  149            2 RLCID,      /* Remote logical connection identifier */
  150              3 NODE UBIN BYTE UNAL %INIT(0)%CHARTEXT('/**/'), /* Node number */
  151              3 GENERATION UBIN BYTE UNAL %INIT(0)%CHARTEXT('/**/'), /* Generation */
  152              3 LDCTX UBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'), /* Ldctx for remote */
  153              3 LDCTXB REDEF LDCTX BIT(18),
  154            2 UDCBNO UBIN(9) UNAL %INIT(0)%CHARTEXT('/**/'),
  155                           /* Any valid user DCB if this is an LDCT for a media DCB */
  156            2 TH UNAL,
  157              3 STR UBIN BYTE UNAL %INIT(0)%CHARTEXT('/**/'),
  158              3 MAXNMBRCR SBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  159              3 MAXRCRBYTSIZ SBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  160              3 MAXNMBBYT SBIN HALF UNAL %INIT(0)%CHARTEXT('/**/'),
  161            2 LOCK BIT(72) DALIGNED %INIT('1'B)%CHARTEXT('/**/'),
  162            2 TERMID,
  163              3 LEV UBIN BYTE UNAL %INIT(0)%CHARTEXT('/**/'),
  164              3 TTYP UBIN BYTE UNAL %INIT(0)%CHARTEXT('/**/'),
  165              3 CHAN BIT(18) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  166              3 SUB BIT(18) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  167              3 SUBSUB BIT(18) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  168            2 LOGON_ACCT CHAR(8) %INIT(' ')%EINIT,
  169            2 * UBIN HALF UNAL %INIT(0)%EINIT,
  170            2 TCTLCNT UBIN BYTE UNAL %INIT(0)%EINIT, /* # TCTLs since FEP rsp wait */
  171            2 JLNKCNT UBIN BYTE UNAL %INIT(0)%EINIT, /* B$JIT.LNKCNT when GETDCT */
  172            2 CG$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/');
  173
  174      %MEND;
  175
  176
  177      /*F* NAME: NK_RESCOD_TXT
  178
  179      The NK_RESCOD_TXT macro generates the text for the
  180      values contained in KN$LDCT.RESCOD.
  181      The SUBs for these values are in the NK_SUBS file.
  182      */
  183
  184      %MACRO NK_RESCOD_TXT (NAME=NK_RESCOD_TXT, STCLASS=CONSTANT);
  185
15:06 JUL 28 '97 NK$LDCT.:E05SI                                            6    
  186      %LSET LISTDIR='0'B;
  187      %LSET LISTEXP='1'B;
  188      %LSET LISTCOM='0'B;
  189      %LSET LISTSUB='1'B;
  190      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  191      %IF (SUBSTR(STR,0,6)='STATIC')OR(SUBSTR(STR,0,8)='CONSTANT')OR(SUBSTR(STR,0,3)='EXT');
  192      %LSET INIT=CHARTEXT('INIT');
  193      %LSET EINIT=CHARTEXT('');
  194      %ELSE;
  195      %LSET INIT=CHARTEXT('/*');
  196      %LSET EINIT=CHARTEXT('*/');
  197      %ENDIF;
  198
  199      DCL NAME(0:14) CHAR(9) STCLASS %INIT(
  200         ' 0       ',
  201         ' 1-TSTRM ',
  202         ' 2-CGTRM ',
  203         ' 3-QTRM  ',
  204         ' 4-CGDCB ',
  205         ' 5-TRMPTH',
  206         ' 6-NOCG  ',
  207         ' 7-PART  ',
  208         ' 8-TSFPRG',
  209         ' 9-CGFPRG',
  210         '10-LOGON ',
  211         '11-RES   ',
  212         '12-OSIDCB',
  213         '13-OSISTA',
  214         '14-OPCTL ') %EINIT;
  215      %MEND;
  216
  217      %EQU NK_RESCOD_HI# = 14;
  218
  219
  220      /*F* NAME: NK_DFLG_TEXT
  221
  222      The NK_DFLG_TEXT macro generates the text for the
15:06 JUL 28 '97 NK$LDCT.:E05SI                                            7    
  223      bit settings in KN$LDCT.DFLG.
  224      */
  225
  226      %MACRO NK_DFLG_TEXT (NAME=NK_DFLG_TEXT, STCLASS=CONSTANT);
  227
  228      %LSET LISTDIR='0'B;
  229      %LSET LISTEXP='1'B;
  230      %LSET LISTCOM='0'B;
  231      %LSET LISTSUB='1'B;
  232
  233      DCL 1 NAME STCLASS,
  234            2 * CHAR(0) INIT('DFLG  '),
  235            2 SREST CHAR(0) UNAL INIT('set:      '),
  236            2 * CHAR(0) INIT('%1N(Input   %)'),
  237            2 * CHAR(0) INIT('%1N(Output  %)'),
  238            2 * CHAR(0) INIT('%1N(Cm      %)'),
  239            2 * CHAR(0) INIT('%1N(Console %)'),
  240            2 * CHAR(0) INIT('%1N(Symbont %)'),
  241            2 * CHAR(0) INIT('%1N(Oldsc   %)'),
  242            2 * CHAR(0) INIT('%1N(Nosnd   %)'),
  243            2 * CHAR(0) INIT('%1N(Local   %)'),
  244            2 * CHAR(0) INIT('%1N(RRR     %)'),
  245            2 * CHAR(0) INIT('%1N(Rlse    %)'),
  246            2 * CHAR(0) INIT('%1N(Prls    %)'),
  247            2 * CHAR(0) INIT('%1N(Iqd     %)'),
  248            2 * CHAR(0) INIT('%1N(Ppnd    %)'),
  249            2 * CHAR(0) INIT('%1N(Fedn    %)'),
  250            2 * CHAR(0) INIT('%S');
  251      %MEND;
  252
  253      /*F* NAME: NK_LKFLG_TEXT
  254
  255      The NK_LKFLG_TEXT macro generates the text for the
  256      bit settings in KN$LDCT.LKFLG.
  257      */
  258
  259      %MACRO NK_LKFLG_TEXT (NAME=NK_LKFLG_TEXT, STCLASS=CONSTANT);
15:06 JUL 28 '97 NK$LDCT.:E05SI                                            8    
  260
  261      %LSET LISTDIR='0'B;
  262      %LSET LISTEXP='1'B;
  263      %LSET LISTCOM='0'B;
  264      %LSET LISTSUB='1'B;
  265
  266      DCL 1 NAME STCLASS,
  267            2 * CHAR(0) INIT('LKFLG '),
  268            2 SREST CHAR(0) UNAL INIT('set:      '),
  269            2 * CHAR(0) INIT('%1N(Mrkpnd  %)'),
  270            2 * CHAR(0) INIT('%1N(Oblk    %)'),
  271            2 * CHAR(0) INIT('%1N(Abrtd-Regged    %)'),
  272            2 * CHAR(0) INIT('%1N(Qnfl    %)'),
  273            2 * CHAR(0) INIT('%1N(Wtmrk   %)'),
  274            2 * CHAR(0) INIT('%1N(Waitingexit     %)'),
  275            2 * CHAR(0) INIT('%1N(Isopath %)'),
  276            2 * CHAR(0) INIT('%1N(Qdppath %)'),
  277            2 * CHAR(0) INIT('%1N(%)'),
  278            2 * CHAR(0) INIT('%1N(Queued  %)'),
  279            2 * CHAR(0) INIT('%1N(Mapd    %)'),
  280            2 * CHAR(0) INIT('%1N(Qfl     %)'),
  281            2 * CHAR(0) INIT('%1N(Active  %)'),
  282            2 * CHAR(0) INIT('%1N(Intogle %)'),
  283            2 * CHAR(0) INIT('%1N(Fpstep  %)'),
  284            2 * CHAR(0) INIT('%1N(Fppm    %)'),
  285            2 * CHAR(0) INIT('%1N(Rltrm   %)'),
  286            2 * CHAR(0) INIT('%1N(Nowait  %)'),
  287            2 * CHAR(0) INIT('%S');
  288      %MEND;
  289
  290      /*F* NAME: NK_QFL_TEXT
  291
  292      The NK_QFL_TEXT macro generates the text for the
  293      bit settings in KN$LDCT.QFL.
  294      */
  295
  296      %MACRO NK_QFL_TEXT (NAME=NK_QFL_TEXT, STCLASS=CONSTANT);
15:06 JUL 28 '97 NK$LDCT.:E05SI                                            9    
  297
  298      %LSET LISTDIR='0'B;
  299      %LSET LISTEXP='1'B;
  300      %LSET LISTCOM='0'B;
  301      %LSET LISTSUB='1'B;
  302
  303      DCL 1 NAME STCLASS,
  304            2 * CHAR(0) INIT('QFL  '),
  305            2 SREST CHAR(0) UNAL INIT('set:      '),
  306            2 * CHAR(0) INIT('%1N(Wrt     %)'),
  307            2 * CHAR(0) INIT('%1N(Rd      %)'),
  308            2 * CHAR(0) INIT('%1N(Incmp   %)'),
  309            2 * CHAR(0) INIT('%1N(Rls     %)'),
  310            2 * CHAR(0) INIT('%1N(Rdgo    %)'),
  311            2 * CHAR(0) INIT('%1N(Rlt     %)'),
  312            2 * CHAR(0) INIT('%1N(Cldq    %)'),
  313            2 * CHAR(0) INIT('%S');
  314      %MEND;

