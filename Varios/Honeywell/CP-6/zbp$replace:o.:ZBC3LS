

CC.C03    File=zbp$replace:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=1  
        1         1             /* $Header: replace.c,v 1.6 87/03/17 22:31:43 ceriel Exp $ */
        2         2             /*
        3         3              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        4         4              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        5         5              */
        6         6             /* PREPROCESSOR: MACRO-TEXT REPLACEMENT ROUTINES */
        7         7
        8         8             #include "debug:h" /* UF */
        9         9             #include "pathlength:h"  /* UF */
       10        10             #include "textsize:h" /* UF */
       11        11
       12        12             #include <alloc:h>
       13        13             #include <em_arith:h>
       14        14             #include "ASSERT:h"
       15        15             #include "idf:h"
       16        16             #include "input:h"
       17        17             #include "macro:h"
       18        18             #include "LLlex:h"
       19        19             #include "class:h"
       20        20             #include "interface:h"
       21        21             #include "bits:h"
       22        22             #include "idfsize:h"
       23        23
       24        24             char *strcpy(), *strcat();
       25        25             extern   int idfsize;
       26        26             char *maxpos;
       27        27             char *DefinedParams[1];
       28        28             char *DefinedPtr =0;
       29        29             char DefinedBuf[IDFSIZE+1];
       30        30             char *long2str();
       31        31             char *strindex();
       32        32
       33        33             PRIVATE struct mlist *ReplaceList = 0;  /* list _of currently active macros */

       34        34
       35        35             EXPORT int
CC.C03    File=zbp$replace:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=2  
       36        36             replace(idef)
       37        37              register struct idf *idef;
       38        38             {
       39        39    1         /* replace() is called by the lexical analyzer to perform
       40        40    1            macro replacement.  "idef" is the description of the
       41        41    1            identifier which leads to the replacement.  If the
       42        42    1            optional actual parameters of the macro are OK, the text
       43        43    1            of the macro is prepared to serve as an input buffer,
       44        44    1            which is pushed onto the input stack.
       45        45    1            replace() returns 1 if the replacement succeeded and 0 if
       46        46    1            some error has occurred.
       47        47    1         */
       48        48    1         register struct macro *mac = idef->id_macro;
       49        49    1         register char c;
       50        50    1         char **actpars, **getactuals();
       51        51    1         char *reptext, *macro2buffer();
       52        52    1         register struct mlist *repl;
       53        53    1         int size;
       54        54    1        extern char options[];
       55        55    1
       56        56    1         if (mac->mc_flag & NOREPLACE) {
       57        57    2            warning("macro %s is recursive", idef->id_text);
       58        58    2            return 0;
       59        59    2         }
       60        60    1         if (mac->mc_nps != -1) {   /* with parameter list  */
       61        61    2            if (mac->mc_flag & FUNC) {
       62        62    3                     /* must be "defined".
       63        63    3                        Unfortunately, the next assertion
       64        64    3                        will not compile ...
       65        65    3               assert( ! strcmp("defined", idef->id_text));
       66        66    3                     */
       67        67    3               if (! AccDefined)
       68        68    3                  return 0;
       69        69    3            }
       70        70    2            if (++mac->mc_count > 100) {
       71        71    3               /* 100 must be some number in Parameters */
       72        72    3               warning("macro %s is assumed recursive",
CC.C03    File=zbp$replace:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=3  
       73        73    3                      idef->id_text);
       74        74    3               return 0;
       75        75    3            }
       76        76    2        again:
       77        77    2            LoadChar(c);
       78        78    2            c = skipspaces(c);
       79        79    2          /* new line character is allowed between macro name and
       80        80    2             open parenthesis
       81        81    2          */
       82        82    2          if (class(c) == STNL) {
       83        83    3             ++LineNumber;
       84        84    3             goto again;
       85        85    3          }
       86        86    2          /* Special marker EOR is used to suspend expanding
       87        87    2             a macro which is the last token of a replacement
       88        88    2             list and rest of the source begins with parentheses
       89        89    2             and parameters.
       90        90    2          */
       91        91    2          if (c == EOR) { /* end of replacement list */
       92        92    3            if (same_name(idef->id_text))
       93        93    3             return 0;
       94        94    3            else
       95        95    3             goto again;
       96        96    3          }
       97        97    2          else
       98        98    2          if (c == FORMAL_OPEN) {
       99        99    3           if (same_name(idef->id_text))
      100       100    3            return 0;
      101       101    3           else
      102       102    3            goto again;
      103       103    3          }
      104       104    2          if (c != '(') {
      105       105    3              if (AccDefined && mac->mc_flag & FUNC) { /* #if defined Name */
      106       106    4                 if (class(c) != STIDF) {
      107       107    5                    error("identifier required after \"defined\"");
      108       108    5                    PushBack();
      109       109    5                    return 0;
CC.C03    File=zbp$replace:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=4  
      110       110    5                 }
      111       111    4                 else {    /* catch the identifier name */
      112       112    5                    maxpos = &DefinedBuf[idfsize];
      113       113    5                    DefinedParams[0] = DefinedPtr = &DefinedBuf[0];
      114       114    5
      115       115    5                    for (;;) {
      116       116    6                       if (DefinedPtr < maxpos) *DefinedPtr++ = c;
      117       117    6                       LoadChar(c);
      118       118    6                       if (!in_idf(c)) goto endif;
      119       119    6                    }
      120       120    5        endif:
      121       121    5                    PushBack();
      122       122    5                    *DefinedPtr = '\0';
      123       123    5                    actpars = DefinedParams;
      124       124    5                 }
      125       125    4              }
      126       126    3              else { /* no replacement if no () */
      127       127    4                 if (!options['A']) {
      128       128    5                    warning("macro %s needs arguments", idef->id_text);
      129       129    5                    PushBack();
      130       130    5                    return 0;
      131       131    5                 }
      132       132    4                 else { /* It's ANSI, no warnings */
      133       133    5                    PushBack();
      134       134    5                    return 0;
      135       135    5                 }
      136       136    4              }
      137       137    3          }
      138       138    2          else { /* get actual parameters */
      139       139    3              actpars = getactuals(idef);
      140       140    3          }
      141       141    2
      142       142    2            if (mac->mc_flag & FUNC) {
      143       143    3               struct idf *param = findidf(*actpars);
      144       144    3
      145       145    3           if (class(**actpars) != STIDF)
      146       146    3              error("identifier required afer \"defined\"");
CC.C03    File=zbp$replace:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=5  
      147       147    3               repl = new_mlist();
      148       148    3               repl->next = 0, repl->m_mac = 0, repl->m_repl = 0;
      149       149    3               if (param && param->id_macro)
      150       150    3                  reptext = "1";
      151       151    3               else
      152       152    3                  reptext = "0";
      153       153    3               InsertText(reptext, 1);
      154       154    3
      155       155    3               repl->next = ReplaceList;
      156       156    3               ReplaceList = repl;
      157       157    3               repl->m_mac = mac;
      158       158    3               return 1;
      159       159    3            }
      160       160    2         }
      161       161    1
      162       162    1         repl = new_mlist();
      163       163    1         repl->next = 0, repl->m_mac = 0, repl->m_repl = 0;
      164       164    1         repl->m_mac = mac;
      165       165    1         if (mac->mc_flag & FUNC) /* this macro leads to special action */
      166       166    1            macro_func(idef);
      167       167    1         if (mac->mc_nps <= 0) {
      168       168    2            reptext = mac->mc_text;
      169       169    2            size = mac->mc_length;
      170       170    2            mac->mc_flag |= NOREPLACE; /* a file called __FILE__ ??? */
      171       171    2         }
      172       172    1         else {
      173       173    2            reptext = macro2buffer(idef, actpars, &size); /* create input buffer */
      174       174    2            repl->m_repl = reptext;
      175       175    2         }
      176       176    1         if (Unstacked) EnableMacros();
      177       177    1         InsertText(reptext, size);
      178       178    1         repl->next = ReplaceList;
      179       179    1         ReplaceList = repl;
      180       180    1         return 1;
      181       181    1        }
      182       182
      183       183             char FilNamBuf[PATHLENGTH];
CC.C03    File=zbp$replace:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=6  
      184       184
      185       185             PRIVATE
      186       186             macro_func(idef)
      187       187              register struct idf *idef;
      188       188             {
      189       189    1         /* macro_func() performs the special actions needed with some
      190       190    1            macros.  These macros are __FILE__ and __LINE__ which
      191       191    1            replacement texts must be evaluated at the time they are
      192       192    1            used.
      193       193    1         */
      194       194    1         register struct macro *mac = idef->id_macro;
      195       195    1        #define DATE_LENGTH  14
      196       196    1        #define TIME_LENGTH  11
      197       197    1         char date_time [30],
"zbp$replace:c.:ZBC3TSI", line 197: (warning) identifier "date_time" is not used
      198       198    1              date[DATE_LENGTH],
"zbp$replace:c.:ZBC3TSI", line 198: (warning) identifier "date" is not used
      199       199    1              time[TIME_LENGTH];
"zbp$replace:c.:ZBC3TSI", line 199: (warning) identifier "time" is not used
      200       200    1         char *ctime();
      201       201    1         long clock, sys_time();
"zbp$replace:c.:ZBC3TSI", line 201: (warning) identifier "clock" is not used
      202       202    1         int  i;
"zbp$replace:c.:ZBC3TSI", line 202: (warning) identifier "i" is not used
      203       203    1
      204       204    1         switch (idef->id_text[2]) { /* This switch is very blunt... */
      205       205    2         case 'F' :        /* __FILE__ */
      206       206    2            mac->mc_length = strlen(FileName) + 2;
      207       207    2            mac->mc_text = FilNamBuf;
      208       208    2            mac->mc_text[0] = '"';
      209       209    2            strcpy(&(mac->mc_text[1]), FileName);
      210       210    2            strcat(mac->mc_text, "\"");
      211       211    2            break;
      212       212    2         case 'L' :        /* __LINE__ */
      213       213    2         {
      214       214    3            mac->mc_text = long2str((long) LineNumber, 10);
      215       215    3            mac->mc_length = strlen(mac->mc_text);
CC.C03    File=zbp$replace:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=7  
      216       216    3            break;
      217       217    3         }
      218       218    2        #if 0
      219       219   *S*        case 'D' :   /* __DATE__ */
      220       220   *S*        {
      221       221   *S*         for (i=0; i<DATE_LENGTH; i++) date[i] = ' ';
      222       222   *S*         clock = sys_time();
      223       223   *S*         strcpy (&date_time[1], ctime(&clock));
      224       224   *S*         strncpy(&date[1], &date_time[5], 8);
      225       225   *S*         strncpy(&date[8], &date_time[21], 4);
      226       226   *S*         date[0] = date[12] = '"';
      227       227   *S*         date[13] = '\0';
      228       228   *S*         strcpy (&(mac->mc_text[0]), date);
      229       229   *S*         mac->mc_length = strlen (mac->mc_text);
      230       230   *S*         break;
      231       231   *S*        }
      232       232   *S*        case 'T' :   /* __TIME__ */
      233       233   *S*        {
      234       234   *S*         for (i=0; i<TIME_LENGTH; i++) time[i] = ' ';
      235       235   *S*         clock = sys_time();
      236       236   *S*         strcpy (&date_time[1], ctime(&clock));
      237       237   *S*         strncpy(&time[1], &date_time[12], 8);
      238       238   *S*         time[0] = time[9] = '"';
      239       239   *S*         time[10] = '\0';
      240       240   *S*         strcpy (&(mac->mc_text[0]), time);
      241       241   *S*         mac->mc_length = strlen (mac->mc_text);
      242       242   *S*         break;
      243       243   *S*        }
      244       244   *S*       #endif
      245       245    2         default :
      246       246    2            crash("(macro_func)");
      247       247    2         }
      248       248    1        }
      249       249
      250       250             PRIVATE char *
      251       251             macro2buffer(idef, actpars, siztext)
      252       252              struct idf *idef;
CC.C03    File=zbp$replace:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=8  
      253       253              char **actpars;
      254       254              int *siztext;
      255       255             {
      256       256    1         /* Macro2buffer() turns the macro replacement text, as it is
      257       257    1            stored, into an input buffer, while each occurrence of the
      258       258    1            non-ascii formal parameter mark is replaced by its
      259       259    1            corresponding actual parameter specified in the actual
      260       260    1            parameter list actpars.  A pointer to the beginning of the
      261       261    1            constructed text is returned, while *siztext is filled
      262       262    1            with its length.
      263       263    1            If there are no parameters, this function behaves
      264       264    1            the same as strcpy().
      265       265    1         */
      266       266    1        #define push(ch) text[pos++]=ch;if(pos==size)text=Srealloc(text,size<<=1);
      267       267    1         register unsigned int size = idef->id_macro->mc_length + ITEXTSIZE;
      268       268    1         register char *text = Malloc(size);
      269       269    1         register int pos = 0;
      270       270    1         register char *ptr = idef->id_macro->mc_text;
      271       271    1         register int stringization = 0;
      272       272    1         register int char_constant = 0;
      273       273    1         register int string_literal = 0;
      274       274    1         register int beginning_of_param = 0;
      275       275    1         register int single_pound_position = 0;
      276       276    1         register int need_formals = 0;
      277       277    1
      278       278    1         while (*ptr) {
      279       279    2         if (*ptr >= EOR) {
      280       280    3          if (need_formals) { /* just processed a '#' operator */
      281       281    4           warning("formal parameter expected after # operator");
      282       282    4           text[single_pound_position] = 040;
      283       283    4           need_formals = 0;
      284       284    4           stringization = 0;
      285       285    4          }
      286       286    3          switch (*ptr) {
      287       287    4           case DBL_POUND :
      288       288    4               ptr++;
      289       289    4               push(DBL_POUND); /* in preprocess:c simply throw it away */
CC.C03    File=zbp$replace:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=9  
      290       290    4            break;
      291       291    4           case SGL_POUND :
      292       292    4            ptr++;
      293       293    4            single_pound_position = pos;
      294       294    4            push(SGL_POUND);
      295       295    4            need_formals = 1;
      296       296    4            stringization = 1;
      297       297    4            break;
      298       298    4           case RECURSION: case EXPAND_PARAM :
      299       299    4            push(*ptr++);
      300       300    4            break;
      301       301    4           case EOR : case FORMAL_OPEN :
      302       302    4            push(*ptr++);
      303       303    4            break;
      304       304    4           default :
      305       305    4            /* impossible case */
      306       306    4            crash("(macro2buffer)");
      307       307    4          }
      308       308    3         }
      309       309    2         else
      310       310    2            if (*ptr & FORMALP) {   /* non-asc formal param. mark */
      311       311    3               register int n = *ptr++ & 0177;
      312       312    3               register char *p;
      313       313    3
      314       314    3               assert(n != 0);
      315       315    3               /* copy the text of the actual parameter
      316       316    3                  into the replacement text
      317       317    3               */
      318       318    3           beginning_of_param = 1;
      319       319    3           /* procedure getactuals() in scan:c will copy whatever appears
      320       320    3              in parameter list, including leading blanks. For example,
      321       321    3              glue (HIGH, LOW) will have a blank precede "LOW" as the
      322       322    3              second parameter.
      323       323    3              In stringization, unnecessary blanks must be deleted.
      324       324    3           */
      325       325    3           p = actpars[n-1];
      326       326    3           if (stringization) {
CC.C03    File=zbp$replace:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=10 
      327       327    4              char *lastchar = p;
      328       328    4              lastchar += strlen(p) - 1;
      329       329    4              while (lastchar && (class(*lastchar) == STSKIP || *lastchar == '\n')) *l
                               astchar-- = '\0';
      330       330    4           }
      331       331    3           while (*p)  {
      332       332    4            int cc;
      333       333    4            while(beginning_of_param && (class(*p) == STSKIP ||*p == '\n'))
      334       334    4              p++;
      335       335    4            beginning_of_param = 0;
      336       336    4            if (*p == '\'')
      337       337    4              char_constant = !char_constant, beginning_of_param = 0;
      338       338    4            else
      339       339    4            if (*p == '\"')
      340       340    4             string_literal = !string_literal, beginning_of_param = 0;
      341       341    4            if (class(*p) == STIDF) {
      342       342    5
      343       343    5                  extern int idfsize;     /* ??? */
      344       344    5                  char buf[IDFSIZE + 1];
      345       345    5                  register char *tg = &buf[0];
      346       346    5                  register char *maxpos = &buf[idfsize];
      347       347    5                  register struct idf *idef;
      348       348    5            register int c = *p++;
      349       349    5
      350       350    5        #define cpy  *tg++ = c
      351       351    5        #define load    c = *p++; if (!in_idf(c)) goto endidf
      352       352    5
      353       353    5
      354       354    5                     for(;;) {
      355       355    6                        if (tg < maxpos) {
      356       356    7                           cpy;
      357       357    7                        }
      358       358    6                        load;
      359       359    6                     }
      360       360    5                  endidf:
      361       361    5              p--;
      362       362    5                     *tg = '\0'; /* mark the end of the identifier */
CC.C03    File=zbp$replace:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=11 
      363       363    5                     idef = findidf(buf);
      364       364    5                     if (idef && idef->id_macro ) {
      365       365    6                        push(EXPAND_PARAM);
      366       366    6                     }
      367       367    5                     *tg = 0;
      368       368    5                     tg = buf;
      369       369    5                     while (*tg) {
      370       370    6                        push(*tg++);
      371       371    6                     }
      372       372    5             beginning_of_param = 0;
      373       373    5            }
      374       374    4            else
      375       375    4            text[pos++] = (class((cc = *p++))) ? cc : ' ';
      376       376    4            if (pos == size)
      377       377    4               text = Srealloc(text, size <<= 1);
      378       378    4            beginning_of_param = 0;
      379       379    4               }
      380       380    3           if (need_formals) need_formals = 0;
      381       381    3           if (stringization) {
      382       382    4            stringization = 0;
      383       383    4            push(0371);
      384       384    4           }
      385       385    3            }
      386       386    2            else {
      387       387    3           if (need_formals) {
      388       388    4            if (class(*ptr) != STSKIP && *ptr != '\n') {
      389       389    5               warning("formal parameter expected after # operator");
      390       390    5               text[single_pound_position] = 040;
      391       391    5               stringization = 0;
      392       392    5               need_formals = 0;
      393       393    5            }
      394       394    4           }
      395       395    3               text[pos++] = *ptr++;
      396       396    3               if (pos == size)
      397       397    3                  text = Srealloc(text, size <<= 1);
      398       398    3            }
      399       399    2         }
CC.C03    File=zbp$replace:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=12 
      400       400    1         text[pos] = '\0';
      401       401    1         *siztext = pos;
      402       402    1         return text;
      403       403    1        }
      404       404
      405       405             EXPORT
      406       406             DoUnstack()
      407       407             {
      408       408    1         Unstacked++;
      409       409    1        }
      410       410
      411       411             EXPORT
      412       412             EnableMacros()
      413       413             {
      414       414    1         register struct mlist *p = ReplaceList;
      415       415    1
      416       416    1         assert(Unstacked > 0);
      417       417    1         while (Unstacked > 0) {
      418       418    2            struct mlist *nxt = p->next;
      419       419    2
      420       420    2            assert(p != 0);
      421       421    2            p->m_mac->mc_flag &= ~NOREPLACE;
      422       422    2            if (p->m_mac->mc_count) p->m_mac->mc_count--;
      423       423    2            if (p->m_repl) vfree(p->m_repl);
      424       424    2            free_mlist(p);
      425       425    2            p = nxt;
      426       426    2            Unstacked--;
      427       427    2         }
      428       428    1         ReplaceList = p;
      429       429    1        }
      430       430
      431       431             void Fake_ReplaceList()
      432       432             {
      433       433    1         register struct mlist *repl;
      434       434    1
      435       435    1         repl = new_mlist();
      436       436    1         repl->m_mac = new_macro();
CC.C03    File=zbp$replace:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=13 
      437       437    1         repl->m_mac->mc_flag = 0;
      438       438    1         repl->m_mac->mc_count = 0;
      439       439    1         repl->m_repl = 0;
      440       440    1         repl->next = ReplaceList;
      441       441    1         ReplaceList = repl;
      442       442    1
      443       443    1        }
      444       444
      445       445
      446       446             int
      447       447             same_name(id_name)
      448       448              char * id_name;
      449       449             {
      450       450    1         register struct mlist * p = ReplaceList;
      451       451    1
      452       452    1         while(p) {
      453       453    2          struct mlist *nxt = p->next;
      454       454    2
      455       455    2          if (!strcmp(p->m_mac->mc_name, id_name))
      456       456    2           return 1;
      457       457    2          p = nxt;
      458       458    2         }
      459       459    1         return 0;
      460       460    1        }
      461       461
---  Include file information  ---

   zbp$debug:h.:ZBC3TOU. is referenced
   zbp$pathlength:h.:ZBC3TOU. is referenced
   zbp$textsize:h.:ZBC3TOU. is referenced
   alloc:h.:ZBC3TOU. is referenced
   em_arith:h.:ZBC3TOU. is referenced
   ASSERT:h.:ZBC3TOU. is referenced
   zbp$idf:h.:ZBC3TOU. is referenced
   idf_pkg:spec.:ZBC3TOU. is referenced
   zbp$input:h.:ZBC3TOU. is referenced
   zbp$inputtype:h.:ZBC3TOU. is referenced
CC.C03    File=zbp$replace:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=14 
   inp_pkg:spec.:ZBC3TOU. is referenced
   zbp$macro:h.:ZBC3TOU. is referenced
   zbp$LLlex:h.:ZBC3TOU. is referenced
   zbp$file_info:h.:ZBC3TOU. is referenced
   zbp$class:h.:ZBC3TOU. is referenced
   charoffset:h.:ZBC3TOU. is referenced
   zbp$interface:h.:ZBC3TOU. is referenced
   zbp$bits:h.:ZBC3TOU. is referenced
   zbp$dobits:h.:ZBC3TOU. is referenced
   zbp$idfsize:h.:ZBC3TOU. is referenced

5 warnings were detected in the file zbp$replace:c.:ZBC3TSI
