
rPL6.E3A0      #001=CHECK_JOB_COMPLETION File=MAKE_SI615.:XSI                     THU 11/20/97 22:46 Page:1    
A        1        1        /*M* MAKE_SI615 -- Miscellaneous system dependent functions      */
A        2        2        /*T***********************************************************/
A        3        3        /*T*                                                         */
A        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
A        5        5        /*T*                                                         */
A        6        6        /*T***********************************************************/
A        7        7        /*F*    NAME:       CHECK_JOB_COMPLETION(sysid)
A        8        8                PURPOSE:    To return an indication if the specified job
A        9        9                            is still running or waiting to run.
A       10       10                DESCRIPTION:
A       11       11                   Once a job has completed execution this function returns
A       12       12                   0.  Otherwise, this function returns 1 for awaiting
A       13       13                   prescan, awaiting execution, or running.
A       14       14        */
A       15       15
A       16       16        CHECK_JOB_COMPLETION: proc(SYSID) altret;
A       17       17
A       18       18    1   dcl  SYSID       sbin;
A       19       19
A       20       20        %include   CP_6;
A       21      101        %include CP_6_SUBS;
A       22      641
A       23      642        %FPT_JOBSTATS(      FPTN        =  JOB_STATS_CONST,
A       24      643                            STCLASS     =  CONSTANT,
A       25      644                            ORDER       =  CHECK,
A       26      645                            SYSID       =  0           );
A       27      665
A       28      666        %FPT_JOBSTATS(      FPTN        =  JOB_STATS,
A       29      667                            STCLASS     =  ""          );
A       30      687
A       31      688        %VLR_JOBSTATS_CHECK(FPTN        =  NEW_STATUS,
A       32      689                            STCLASS     =  ""          );
A       33      708
A       34      709
A       35      710    1   dcl  XB_RETURN_ORDINAL_RESULT   entry(1);
A       36      711
A       37      712        /*****************************************************************/
rPL6.E3A0      #001=CHECK_JOB_COMPLETION File=MAKE_SI615.:XSI                     THU 11/20/97 22:46 Page:2    
A       38      713        /*                        P R O C E D U R E                      */
A       39      714        /*****************************************************************/
A       40      715
A       41      716    1        JOB_STATS          = JOB_STATS_CONST;
A       42      717    1        JOB_STATS.V_       = vector(JOB_STATS.V);
A       43      718    1        JOB_STATS.RESULTS_ = vector(NEW_STATUS);
A       44      719    1        JOB_STATS.V.SYSID# = SYSID;
A       45      720    2        call M$JOBSTATS(JOB_STATS) whenaltreturn do;
A       46      721    2           altreturn;
A       47      722    2           end;
A       48      723
A       49      724    2        do case( NEW_STATUS.CODE );
A       50      725
A       51      726    2        case( %JS_RUN#, %JS_WAIT#, %JS_AP# );
A       52      727    2           call XB_RETURN_ORDINAL_RESULT(1);
A       53      728    2        case( else );
A       54      729    2           call XB_RETURN_ORDINAL_RESULT(0);
A       55      730    2        end;
A       56      731
A       57      732    1   end CHECK_JOB_COMPLETION;
A       58      733        %EOD;
P
rPL6.E3A0      #001=CHECK_JOB_COMPLETION File=MAKE_SI615.:XSI                     THU 11/20/97 22:46 Page:3    
A--  Include file information  --
A
A   CP_6_SUBS.:LIBRARY  is referenced.
A   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
A   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
A   CP_6_C.:E05TOU  was found in the system file and is referenced.
a      No diagnostics issued in procedure CHECK_JOB_COMPLETION.
b
A   Procedure CHECK_JOB_COMPLETION requires 46 words for executable code.
A   Procedure CHECK_JOB_COMPLETION requires 54 words of local(AUTO) storage.
a

rPL6.E3A0      #002=FID_MODTIME File=MAKE_SI615.:XSI                              THU 11/20/97 22:46 Page:4    
A       59        1        /*M*    fid_modtime -- returns file modification time            */
A       60        2        /*T***********************************************************/
A       61        3        /*T*                                                         */
A       62        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
A       63        5        /*T*                                                         */
A       64        6        /*T***********************************************************/
A       65        7
A       66        8        /*F*    NAME:       FID_MODTIME
A       67        9                PURPOSE:    To return the modification time for a file.
A       68       10                DESCRIPTION:
A       69       11                   If the file does not exist, this function returns 0.
A       70       12        */
A       71       13
A       72       14        FID_MODTIME:  proc(FID, ACCTLIST, ACCT);
A       73       15
A       74       16    1   dcl  fid            char(biggy);
A       75       17    1   dcl  ACCTLIST       sbin;
A       76       18    1   dcl  ACCT           char(8);
A       77       19    1   dcl  ACCT_OPT       sbin;
A       78       20    1   dcl  ACCT_OPTP      redef ACCT_OPT ptr;
A       79       21
A       80       22    1   dcl  biggy          sbin constant init(262142);
A       81       23
A       82       24        %include   CP_6;
A       83      105        %include   FM$FIT;
A       84      326        %include   CP_6_SUBS;
A       85      866 S      %include   B$JIT_C;
A       86      867
A       87      868    1   dcl  B$JIT$      ptr symref readonly;
A       88      869
A       89      870        %B$JIT0 ;
A       90      959        %U$JIT1 ;
A       91     1033        %M$JIT2X;
A       92     1036        %F$JIT3X;
A       93     1039        %S$JIT4X;
A       94     1042        %J$JIT5X;
A       95     1045        %A$JIT6X;
rPL6.E3A0      #002=FID_MODTIME File=MAKE_SI615.:XSI                              THU 11/20/97 22:46 Page:5    
A       96     1048
A       97     1049
A       98     1050        %FPT_FID(  FPTN        =  FPT_FID_CONST,    STCLASS=CONSTANT);
A       99     1073        %FPT_FID(  FPTN        =  FPT_FID,          STCLASS="");
A      100     1096
A      101     1097        %FPT_GETDCB(  FPTN     =  FPT_GETDCB_CONST, STCLASS=CONSTANT);
A      102     1112        %FPT_GETDCB(  FPTN     =  FPT_GETDCB,       STCLASS="");
A      103     1127
A      104     1128        %FPT_OPEN(    FPTN     =  FPT_OPEN_CONST,   STCLASS=CONSTANT,
A      105     1129                      FUN      =  IN,
A      106     1130                      TEST     =  YES,
A      107     1131                      SCRUB    =  YES);
A      108     1240        %FPT_OPEN(    FPTN     =  FPT_OPEN,         STCLASS="");
A      109     1349
A      110     1350
A      111     1351    1   dcl  XB_RETURN_ORDINAL_RESULT         entry(1);
A      112     1352
A      113     1353    1   dcl  LEN                              sbin;
A      114     1354
A      115     1355        %VLP_ACCT(    FPTN     =  FACCT,            STCLASS="");
A      116     1368        %VLP_NAME(    FPTN     =  FNAME,            STCLASS="",
A      117     1369                      LEN      =  31);
A      118     1396        %VLP_ACCT(    FPTN     =  FPASS,            STCLASS="");
A      119     1409        %VLP_SN  (    FPTN     =  FSN,              STCLASS="");
A      120     1422        %VLP_WSN (    FPTN     =  FWSN,             STCLASS="");
A      121     1435
A      122     1436    1   dcl  FPARAM(0:1023)                   sbin;
A      123     1437
A      124     1438        %F$DCB(STCLASS="BASED(DCB$)");
A      125     1495    1   dcl  DCB$     ptr;
A      126     1496    1   dcl  DCB#     sbin static init(0);   /* Allocate DCB once!   */
A      127     1497
A      128     1498    1   dcl  FIT$     ptr;
A      129     1499    1   dcl  FFIT$    ptr;
A      130     1500        %CODE04(BASED="BASED(FIT$)");
A      131     1508        %CODE09(BASED="BASED(FIT$)");
A      132     1512        %FM$FIT(BASED="BASED(FFIT$)");
rPL6.E3A0      #002=FID_MODTIME File=MAKE_SI615.:XSI                              THU 11/20/97 22:46 Page:6    
A      133     1515    1   dcl XSF$LOCCODP     entry(2) altret;
A      134     1516    1   dcl XSF$LOCCODE     entry(2) altret;
A      135     1517    1   dcl  MT             sbin;
A      136     1518
A      137     1519        /********************************************************************/
A      138     1520        /*                      P R O C E D U R E                           */
A      139     1521        /********************************************************************/
A      140     1522
A      141     1523    1     if addr(ACCT) ~= addr(NIL)
A      142     1524    1        then ACCT = ' ';
A      143     1525    1     ACCT_OPTP  = addr(ACCTLIST);
A      144     1526    1     if (ACCT_OPT = bitbin('6014'O)) then ACCT_OPT = 0;
A      145     1527    1     FPT_FID    = FPT_FID_CONST;
A      146     1528    1     FPT_OPEN   = FPT_OPEN_CONST;
A      147     1529
A      148     1530    1     FPT_FID.V_    = vector(FPT_FID.V);
A      149     1531    1     FPT_OPEN.V_   = vector(FPT_OPEN.V);
A      150     1532
A      151     1533    1     call index(LEN,%BINASC(0),fid);
A      152     1534    1     FPT_FID.TEXTFID_ = vector( substr(fid,,LEN) );
A      153     1535    1     FPT_FID.WSN_     = vector( FWSN );
A      154     1536    1     FPT_FID.SN_      = vector( FSN  );
A      155     1537    1     FPT_FID.ACCT_    = vector( FACCT );
A      156     1538    1     FPT_FID.NAME_    = vector( FNAME );
A      157     1539    1     FPT_FID.PASS_    = vector( FPASS );
A      158     1540    1     FPT_FID.RES_     = vector( FPT_OPEN.V.RES# );
A      159     1541    1     FPT_FID.ASN_     = vector( FPT_OPEN.V.ASN# );
A      160     1542    1     call M$FID( FPT_FID )   altret(IOERR);
A      161     1543
A      162     1544    2     if DCB# = 0 then do;
A      163     1545    2        FPT_GETDCB         = FPT_GETDCB_CONST;
A      164     1546    2        FPT_GETDCB.V_      = vector(FPT_GETDCB.V);
A      165     1547    2        FPT_GETDCB.DCBNUM_ = vector( FPT_OPEN.V.DCB# );
A      166     1548    2        call M$GETDCB( FPT_GETDCB ) altret(IOERR);
A      167     1549    2        DCB# = FPT_OPEN.V.DCB#;
A      168     1550    2        end;
A      169     1551    1     else FPT_OPEN.V.DCB# = DCB#;
rPL6.E3A0      #002=FID_MODTIME File=MAKE_SI615.:XSI                              THU 11/20/97 22:46 Page:7    
A      170     1552
A      171     1553    1     DCB$ = dcbaddr( FPT_OPEN.V.DCB# );
A      172     1554    1     FPT_OPEN.NAME_    = vector( FNAME );
A      173     1555    1     FPT_OPEN.ACCT_    = vector( FACCT );
A      174     1556    1     FPT_OPEN.WSN_     = vector( FWSN  );
A      175     1557    1     FPT_OPEN.SN_      = vector( FSN   );
A      176     1558    1     FPT_OPEN.PASS_    = vector( FPASS );
A      177     1559    1     FPT_OPEN.FPARAM_  = vector( FPARAM );
A      178     1560    1     call M$OPEN( FPT_OPEN )    altret(IOERR); /*  GET A DCB FIRST! */
A      179     1561
A      180     1562    1     if addr(ACCT)~=addr(nil)
A      181     1563    1        then ACCT = F$DCB.ACCT#;
A      182     1564
A      183     1565    1     MT = 9;
A      184     1566    1     FIT$ = addr(FPARAM);
A      185     1567    1     FFIT$ = addr(FPARAM);
A      186     1568    1     if ACCT_OPT ~= 0 then
A      187     1569    2     call XSF$LOCCODE(FIT$, MT) whenreturn do;
A      188     1570    2        MT = FM$FIT.CODES.NDW(MT);
A      189     1571    3        do while (MT >= sizew( CODE09 ) );
A      190     1572    3           if CODE09.ACCT='DONE' or CODE09.ACCT='?MSC'
A      191     1573    3              then goto got_me;
A      192     1574    3           if ACCT_OPT > 1 and CODE09.ACCT=B$JIT.ACCN
A      193     1575    3              then goto got_me;
A      194     1576    3           MT = MT - sizec( CODE09 );
A      195     1577    3           FIT$ = pincrc(FIT$, sizec( CODE09 ) );
A      196     1578    3           end;
A      197     1579    2        call XB_RETURN_ORDINAL_RESULT(0);
A      198     1580    2        end;
A      199     1581    1   got_me:
A      200     1582    1     MT = -1;
A      201     1583    1     if ( substr(FNAME.NAME#,0,1) ~= '*' ) then MT = 1;
A      202     1584    1     FIT$ = addr(FPARAM);
A      203     1585    2     call XSF$LOCCODP(FIT$, 4) whenreturn do;
A      204     1586    2           MT = CODE04.MODIFY.TIME;
A      205     1587    2        end;
A      206     1588    1     call XB_RETURN_ORDINAL_RESULT( MT );
rPL6.E3A0      #002=FID_MODTIME File=MAKE_SI615.:XSI                              THU 11/20/97 22:46 Page:8    
A      207     1589
A      208     1590    1   IOERR:
A      209     1591    1     call XB_RETURN_ORDINAL_RESULT(0);
A      210     1592
A      211     1593    1   end FID_MODTIME;
A      212     1594        %EOD;
P
rPL6.E3A0      #002=FID_MODTIME File=MAKE_SI615.:XSI                              THU 11/20/97 22:46 Page:9    
A--  Include file information  --
A
A   CP_6_SUBS.:LIBRARY  is referenced.
A   FM$FIT.:LIBRARY  is referenced.
A   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
A   B$JIT_C.:E05TOU  was found in the system file and is referenced.
A   CP_6_C.:E05TOU  was found in the system file and is referenced.
a      No diagnostics issued in procedure FID_MODTIME.
b
A   Procedure FID_MODTIME requires 237 words for executable code.
A   Procedure FID_MODTIME requires 1148 words of local(AUTO) storage.
a

rPL6.E3A0      #003=GENRU File=MAKE_SI615.:XSI                                    THU 11/20/97 22:46 Page:10   
A      213        1        /*M*    GENRU          -- Generate a run-unit from running program */
A      214        2        /*T***********************************************************/
A      215        3        /*T*                                                         */
A      216        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
A      217        5        /*T*                                                         */
A      218        6        /*T***********************************************************/
A      219        7
A      220        8        /*F*    NAME:          GENRU(char *, void *)
A      221        9                PURPOSE:       To generate a run unit from the currently
A      222       10                               running process.
A      223       11                DESCRIPTION:
A      224       12                      YOU DON'T REALLY WANT TO KNOW!
A      225       13        */
A      226       14
A      227       15        GENRU : proc(FILENAME,HEAPREF) altret;
A      228       16
A      229       17        /* *    NAME:          RUGEN
A      230       18                PURPOSE:       To write out records into M$INIT that can
A      231       19                               be used to initialize all of the data in
A      232       20                               the current run-unit to their "current"
A      233       21                               values.
A      234       22
A      235       23                DESCRIPTION:   This subroutine reads the section-type records
A      236       24                               of the current run-unit from the M$LM dcb and
A      237       25                               locates the last word of static data in the
A      238       26                               run-unit and writes all of the values of the
A      239       27                               current static data into the file with the
A      240       28                               current values.
A      241       29        */
A      242       30
A      243       31    1   dcl  FILENAME       char(60);
A      244       32    1   dcl  HEAPREF        char(12);
A      245       33    1   dcl  HEAP$          ptr;
A      246       34    1   dcl  1  HEAP        redef HEAP$ aligned,
A      247       35    1           2 OFFSET    bit(24),
A      248       36    1           2 SEGID     bit(12);
A      249       37
rPL6.E3A0      #003=GENRU File=MAKE_SI615.:XSI                                    THU 11/20/97 22:46 Page:11   
A      250       38        %include CP_6;
A      251      119        %include B$OBJECT_C;
A      252     3549        %include B_SEGIDS_C;
A      253     4088        %include B_ERRORS_C;
A      254     5215        %include CP_6_SUBS;
A      255     5755
A      256     5756    1   dcl M$INIT dcb;
A      257     5757    1   dcl M$LM   dcb;
A      258     5758    1   dcl B$TCB$ ptr symref readonly;
A      259     5759    1   dcl BSD$   ptr based;
A      260     5760
A      261     5761        %FPT_WRITE( FPTN       = FPT_WRITE_C,
A      262     5762                    STCLASS    = CONSTANT,
A      263     5763                    DCB        = M$INIT,
A      264     5764                    NEWKEY     = NO,
A      265     5765                    KEY        = PROKEY);
A      266     5796
A      267     5797        %FPT_WRITE( FPTN       = FPT_WRITE,
A      268     5798                    STCLASS    = "");
A      269     5829
A      270     5830        %FPT_CLOSE( FPTN       = FPT_CLOSE,
A      271     5831                    STCLASS    = CONSTANT,
A      272     5832                    DISP       = SAVE,
A      273     5833                    DCB        = M$INIT);
A      274     5875
A      275     5876        %FPT_READ(  FPTN       = FPT_READ,
A      276     5877                    STCLASS    = "");
A      277     5916
A      278     5917        %FPT_READ(  FPTN       = FPT_READ_C,
A      279     5918                    DCB        = M$LM,
A      280     5919                    KEYS       = YES,
A      281     5920                    STCLASS    = CONSTANT);
A      282     5959
A      283     5960        %FPT_REW(   FPTN       = FPT_REWIND,
A      284     5961                    DCB        = M$LM,
A      285     5962                    STCLASS    = CONSTANT);
A      286     5977
rPL6.E3A0      #003=GENRU File=MAKE_SI615.:XSI                                    THU 11/20/97 22:46 Page:12   
A      287     5978        %FPT_GDS(   FPTN       = FPT_GDS_C,
A      288     5979                    STCLASS     = CONSTANT,
A      289     5980                    FREE       = NO,
A      290     5981                    SEGSIZE    = 32768);
A      291     5997
A      292     5998        %FPT_GDS(   FPTN       = FPT_GDS,
A      293     5999                    STCLASS    = "");
A      294     6015
A      295     6016        %VLP_VECTOR(FPTN       = SECT_VECTOR,
A      296     6017                    STCLASS    = "");
A      297     6032
A      298     6033        %FPT_OPEN(  FPTN       = OPEN_IMAGE_C,
A      299     6034                    STCLASS    = CONSTANT,
A      300     6035                    ORG        = KEYED,
A      301     6036                    FUN        = CREATE,
A      302     6037                    EXIST      = NEWFILE,
A      303     6038                    ACS        = DIRECT,
A      304     6039                    ASN        = FILE,
A      305     6040                    DCB        = M$INIT,
A      306     6041                    DISP       = NAMED,
A      307     6042                    IXTNSIZE   = 101,
A      308     6043                    TYPE       = 'RM',
A      309     6044                    REASSIGN   = NO,
A      310     6045                    SCRUB      = YES);
A      311     6154
A      312     6155        %FPT_OPEN(  FPTN       = OPEN_IMAGE,
A      313     6156                    STCLASS    = "");
A      314     6265
A      315     6266        %FPT_FID(   FPTN       = FPT_FID_C,
A      316     6267                    STCLASS    = CONSTANT);
A      317     6290
A      318     6291        %FPT_FID(   FPTN       = FPT_FID,
A      319     6292                    STCLASS    = "");
A      320     6315
A      321     6316        %VLP_NAME(  STCLASS    = "",    LEN=31);
A      322     6343        %VLP_ACCT(  STCLASS    = ""  );
A      323     6356        %VLP_PASS(  STCLASS    = ""  );
rPL6.E3A0      #003=GENRU File=MAKE_SI615.:XSI                                    THU 11/20/97 22:46 Page:13   
A      324     6369        %VLP_SN(    STCLASS    = ""  );
A      325     6382        %VLR_FID(   STCLASS    = ""  );
A      326     6401
A      327     6402        %F$DCB(     STCLASS    = "BASED(DCB$)");
A      328     6459        %B$TCB;
A      329     6462        %B$ALT;
A      330     6470        %B$EXCFR;
A      331     6488        %B$FLT;
A      332     6540
A      333     6541        %B$SECTIONSUBS;
A      334     6556        %B$RECORDSUBS;
A      335     6584
A      336     6585
A      337     6586        %B$RUSECT;
A      338     6634        %B$RUBIRTH(   STCLASS  = STATIC);
A      339     6643        %B$RUKEY(     NAME     = SECTKEY_C,
A      340     6644                      TYPEINIT = "(%TYPSECT)",
A      341     6645                      STCLASS  = CONSTANT);
A      342     6685
A      343     6686        %B$RUKEY(     NAME     = PROKEY,
A      344     6687                      STCLASS  = CONSTANT);
A      345     6727
A      346     6728        %B$RUKEY(     NAME     = SECTKEY,
A      347     6729                      STCLASS  = "");
A      348     6769
A      349     6770        %B$RUHEADKEY( NAME     = HEADKEY_C,
A      350     6771                      STCLASS  = CONSTANT);
A      351     6778
A      352     6779        %B$HEAD(      NAME     = B$HEAD,
A      353     6780                      STCLASS  = "");
A      354     6980
A      355     6981        %VLP_NAME(    FPTN     = BIRTHKEY,
A      356     6982                      STCLASS  = CONSTANT,
A      357     6983                      NAME     = 'BIRTH');
A      358     7010
A      359     7011    1   dcl  DataSects(0:7)    sbin constant init( 1,0, 1, 1, 1,0*0);
A      360     7012        /***  Indicates section types that are data ****/
rPL6.E3A0      #003=GENRU File=MAKE_SI615.:XSI                                    THU 11/20/97 22:46 Page:14   
A      361     7013
A      362     7014    1   dcl FILE$              ptr;
A      363     7015
A      364     7016    1   dcl RESIDUE            sbin;    /* Number of words on last page */
A      365     7017    1   dcl PAGECOUNT          sbin;    /* Number of full pages to init  */
A      366     7018    1   dcl I                  sbin;
A      367     7019    1   dcl J                  sbin;
A      368     7020    1   dcl ADR                sbin;
A      369     7021    1   dcl OFS                sbin;
A      370     7022    1   dcl PAGE               char(4096) based(PAGE$);
A      371     7023    1   dcl PAGE$              ptr;
A      372     7024    1   dcl PD$                ptr;
A      373     7025    1   dcl PE$                ptr;
A      374     7026    1   dcl CREATE_UTS         sbin;
A      375     7027    1   dcl 1 STATIC#          constant,
A      376     7028    1         2   *            ubin(18) haligned init(0),
A      377     7029    1         2   *            bit(6)   unal     init('0'B),
A      378     7030    1         2   *            bit(12)  unal     init(%ISSID);
A      379     7031    1   dcl STATIC$            redef STATIC#     ptr;
A      380     7032    1   dcl SBIN_BASED         sbin based aligned;
A      381     7033    1   dcl WORD#(0:0)         sbin based aligned;
A      382     7034    1   dcl PTR_BASED          ptr based;
A      383     7035    1   dcl DCB$               ptr;
A      384     7036
A      385     7037        %EQU RU_WRITTEN_INIT   = 314159265;
A      386     7038        %EQU RU_WRITTEN_DONE   = 2718285;
A      387     7039    1   dcl RU_WRITTEN         sbin  static symdef init(%RU_WRITTEN_INIT);
A      388     7040    1   dcl MAKE_ONLINE_MAGIC  sbin  static symdef init(%RU_WRITTEN_INIT);
A      389     7041    1   dcl 1  MAKE_HEAPDEFN   static symdef,
A      390     7042    1           2  NWORDS      sbin  init(0),
A      391     7043    1           2  PTR$        ptr   init( addr(nil) );
A      392     7044
A      393     7045
A      394     7046    1   dcl  1  RURANGE        aligned static,
A      395     7047    1        2  MIND           sbin  init(262144),
A      396     7048    1        2  MAXD           sbin  init(0);
A      397     7049
rPL6.E3A0      #003=GENRU File=MAKE_SI615.:XSI                                    THU 11/20/97 22:46 Page:15   
A      398     7050    1   dcl  XBI$STRLEN        entry(2);
A      399     7051    1   dcl  SEGSIZE           entry(2);
A      400     7052    1   dcl  C_RESTART         entry(0);
A      401     7053
A      402     7054    1   dcl  RESTART_EPTR      EPTR CONSTANT SYMDEF INIT( ENTADDR(C_RESTART) );
A      403     7055    1   dcl  1  RESTART        redef RESTART_EPTR,
A      404     7056    1           2  ISADDR      ubin(18) haligned,
A      405     7057    1           2  *           ubin(18) haligned;
A      406     7058
A      407     7059        /********************************************************************/
A      408     7060        /****                    P R O C E D U R E                       ****/
A      409     7061        /********************************************************************/
A      410     7062
A      411     7063    1      HEAP$ = addr(HEAPREF);
A      412     7064    1      call SETUP_FPTS;
A      413     7065    1      call M$OPEN(OPEN_IMAGE);
A      414     7066    1      if RU_WRITTEN = %RU_WRITTEN_INIT
A      415     7067    1        then call COPY_M$LM;
A      416     7068
A      417     7069    2      if (RURANGE.MAXD = 0) then do;
A      418     7070    2         FPT_GDS.RESULTS_  = vector(SECT_VECTOR);
A      419     7071    3         call M$GDS(FPT_GDS) whenaltreturn do; ; end;
A      420     7072    2         PAGE$             = SECT_VECTOR.PTR$;
A      421     7073    2         PD$               = PAGE$;
A      422     7074    2         SECTKEY           = SECTKEY_C;
A      423     7075    2         SECTKEY.NODE      = 0;
A      424     7076    2         SECTKEY.PAGE      = 0;
A      425     7077    2         FPT_READ.BUF_     = SECT_VECTOR;
A      426     7078
A      427     7079    2         call M$READ(FPT_READ);
A      428     7080
A      429     7081    2         PD$ = PAGE$;
A      430     7082    2         PE$ = addr(nil);
A      431     7083
A      432     7084        /**
A      433     7085         **  Locate last data word to write...
A      434     7086         **/
rPL6.E3A0      #003=GENRU File=MAKE_SI615.:XSI                                    THU 11/20/97 22:46 Page:16   
A      435     7087    3         do while DataSects( PAGE$->B$RUSECT.TYPE ) > 0;
A      436     7088    3           PE$ = PAGE$;
A      437     7089    3           PAGE$ = pincrw( PAGE$,sizew(B$RUSECT) );
A      438     7090    3         end;
A      439     7091
A      440     7092    2         RURANGE.MIND = PD$->B$RUSECT.ADDRESS / 1024 * 1024;
A      441     7093    2         RURANGE.MAXD = PE$->B$RUSECT.ADDRESS + PE$->B$RUSECT.SIZE;
A      442     7094
A      443     7095    2      end;
A      444     7096
A      445     7097        /**
A      446     7098         **  Write Heap first (so our static hea info is saved)
A      447     7099         **/
A      448     7100
A      449     7101    2      if (HEAP$ ~= addr(nil)) then do;
A      450     7102    2         SECTKEY               = PROKEY;
A      451     7103    2         HEAP.OFFSET           = '0'b;
A      452     7104    2         SECTKEY.NODE          = 0;
A      453     7105    2         SECTKEY.DATASEG.SEGID = HEAP.SEGID;
A      454     7106    2         SECTKEY.ISADDR        = 0;
A      455     7107    2         PAGE$                 = HEAP$;
A      456     7108    2         call SEGSIZE(HEAPREF, PAGECOUNT);
A      457     7109    2         MAKE_HEAPDEFN.NWORDS = PAGECOUNT / 4;
A      458     7110    2         MAKE_HEAPDEFN.PTR$   = PAGE$;
A      459     7111    2         PAGECOUNT = PAGECOUNT / 4096;
A      460     7112
A      461     7113    3         do I = 0 to PAGECOUNT-1;
A      462     7114    3            FPT_WRITE.BUF_ = vector(PAGE);
A      463     7115    3            call M$WRITE(FPT_WRITE);
A      464     7116    3            PAGE$ = pincrw(PAGE$,1024);
A      465     7117    3            SECTKEY.ISADDR = SECTKEY.ISADDR + 1024;
A      466     7118    3         end;
A      467     7119    2      end;
A      468     7120
A      469     7121    1      PAGECOUNT     = (RURANGE.MAXD + 1023)/1024 - 1;
A      470     7122    1      SECTKEY       = PROKEY;
A      471     7123    1      SECTKEY.NODE  = 0;
rPL6.E3A0      #003=GENRU File=MAKE_SI615.:XSI                                    THU 11/20/97 22:46 Page:17   
A      472     7124    1      SECTKEY.ISADDR= 0;
A      473     7125    1      PAGE$         = STATIC$;
A      474     7126
A      475     7127    2      do I = 0 to PAGECOUNT - 1;
A      476     7128    2         FPT_WRITE.BUF_ = VECTOR(PAGE);
A      477     7129    2         call M$WRITE(FPT_WRITE);
A      478     7130    2         PAGE$          = PINCRW(PAGE$,1024);
A      479     7131    2         SECTKEY.ISADDR = SECTKEY.ISADDR + 1024;
A      480     7132    2         end;
A      481     7133
A      482     7134    1      RESIDUE        = mod(RURANGE.MAXD, 1024);
A      483     7135    2      if RESIDUE ~= 0 then do;
A      484     7136    2         I = RESIDUE * 4;
A      485     7137    2         FPT_WRITE.BUF_ = VECTOR( substr(PAGE,,I) );
A      486     7138    2         call M$WRITE( FPT_WRITE );
A      487     7139    2         end;
A      488     7140
A      489     7141    1         call M$CLOSE(FPT_CLOSE);
A      490     7142    1         call M$EXIT;
A      491     7143          /*N* NOTE: This will only work if there is no (important)
A      492     7144               initialized data in the run-unit already (we overwrite
A      493     7145               the old initialization records                         */
A      494     7146
A      495     7147
A      496     7148
A      497     7149    1   GENRU_HEAP:   entry;
A      498     7150
A      499     7151    1      if MAKE_HEAPDEFN.NWORDS = 0
A      500     7152    1         then return;
A      501     7153    1      call SETUP_FPTS;
A      502     7154    1      SECT_VECTOR       = vector(nil);
A      503     7155    1      SECT_VECTOR.PTR$      = MAKE_HEAPDEFN.PTR$;
A      504     7156    1      FPT_GDS.V.SEGSIZE#    = MAKE_HEAPDEFN.NWORDS;
A      505     7157    2      call M$GDS(FPT_GDS) whenaltreturn do; ; end;
A      506     7158
A      507     7159    1      SECTKEY               = PROKEY;
A      508     7160    1      HEAP$                 = MAKE_HEAPDEFN.PTR$;
rPL6.E3A0      #003=GENRU File=MAKE_SI615.:XSI                                    THU 11/20/97 22:46 Page:18   
A      509     7161    1      SECTKEY.NODE          = 0;
A      510     7162    1      SECTKEY.DATASEG.SEGID = HEAP.SEGID;
A      511     7163    1      SECTKEY.ISADDR        = 0;
A      512     7164    1      PAGE$                 = MAKE_HEAPDEFN.PTR$;
A      513     7165    1      FPT_READ.KEY_         = vector( SECTKEY );
A      514     7166    1      PAGECOUNT             = MAKE_HEAPDEFN.NWORDS / 1024;
A      515     7167
A      516     7168    2      do I = 0 to PAGECOUNT-1;
A      517     7169    2        FPT_READ.BUF_       = vector( PAGE );
A      518     7170    2        call M$READ(FPT_READ);
A      519     7171    2        PAGE$               = pincrw(PAGE$, 1024);
A      520     7172    2        SECTKEY.ISADDR       = SECTKEY.ISADDR + 1024;
A      521     7173    2      end;
A      522     7174
A      523     7175    1      return;
A      524     7176
A      525     7177    1   COPY_M$LM: proc altret;
A      526     7178
A      527     7179    2   dcl BUFFER    char(4096);
A      528     7180    2   dcl RTYPE     sbin;
A      529     7181
A      530     7182
A      531     7183    2      call M$REW(FPT_REWIND);
A      532     7184    2      DCB$  = dcbaddr( dcbnum(M$LM) );
A      533     7185    2      FPT_READ.BUF_ = vector(BUFFER);
A      534     7186    2      FPT_READ.V.KEYS# = '0'b;
A      535     7187    2      FPT_READ.V.KEYR# = '1'b;
A      536     7188    2      FPT_READ.KEY_    = vector(SECTKEY);
A      537     7189    2      FPT_WRITE.V.ONEWKEY# = '1'b;
A      538     7190    2      FPT_WRITE.KEY_   = vector(SECTKEY);
A      539     7191    2   RU_LOOP:
A      540     7192    3      do while('1'b);
A      541     7193    4         call M$READ(FPT_READ) whenreturn do;
A      542     7194    4            FPT_WRITE.V.DVBYTE.CONT# = '0'b;
A      543     7195    4            FPT_READ.V.DVBYTE.CONT#  = '0'b;
A      544     7196    4            end;
A      545     7197    4         whenaltreturn do;
rPL6.E3A0      #003=GENRU File=MAKE_SI615.:XSI                                    THU 11/20/97 22:46 Page:19   
A      546     7198    5            if B$TCB$->BSD$->B$ALT.ERR.CODE = %E$LD then do;
A      547     7199    5               FPT_WRITE.V.DVBYTE.CONT# = '1'b;
A      548     7200    5               FPT_READ.V.DVBYTE.CONT#  = '1'b;
A      549     7201    5               end;
A      550     7202    4            else exit RU_LOOP;
A      551     7203    4            end;
A      552     7204    3         RTYPE = SECTKEY.TYPE;
A      553     7205    4         if RTYPE < 10 then do;
A      554     7206    4            FPT_WRITE.V.DVBYTE.CONT# = '0'b;
A      555     7207    4            FPT_READ.V.DVBYTE.CONT#  = '0'b;
A      556     7208    4            goto RU_LOOP;
A      557     7209    4            end;
A      558     7210    3         else if RTYPE > 72 then exit RU_LOOP;
A      559     7211    3         FPT_WRITE.BUF_ = vector( substr(buffer,,F$DCB.ARS#) );
A      560     7212    4         call M$WRITE(FPT_WRITE) whenaltreturn do;
A      561     7213    4            exit RU_LOOP;
A      562     7214    4            end;
A      563     7215    3         end RU_LOOP;
A      564     7216        /**RU_WRITTEN = 271828;      *****/
A      565     7217    2      FPT_READ.V.KEYS# = '1'B;
A      566     7218    2      FPT_READ.V.KEYR# = '0'B;
A      567     7219    2      FPT_READ.KEY_    = vector(HEADKEY_C);
A      568     7220    2      FPT_WRITE.KEY_   = vector(HEADKEY_C);
A      569     7221    2      FPT_READ.BUF_    = vector(B$HEAD);
A      570     7222    2      FPT_WRITE.BUF_   = vector(B$HEAD);
A      571     7223    2      call M$READ(FPT_READ);
A      572     7224    2      B$HEAD.START     = RESTART.ISADDR;
A      573     7225    2      call M$WRITE(FPT_WRITE);
A      574     7226    2      FPT_WRITE.KEY_   = vector(SECTKEY);
A      575     7227    2      FPT_READ.KEY_    = vector(SECTKEY);
A      576     7228
A      577     7229    2   end COPY_M$LM;
A      578     7230
A      579     7231
A      580     7232
A      581     7233    1   SETUP_FPTS: proc;
A      582     7234
rPL6.E3A0      #003=GENRU File=MAKE_SI615.:XSI                                    THU 11/20/97 22:46 Page:20   
A      583     7235    2      OPEN_IMAGE        = OPEN_IMAGE_C;
A      584     7236    2      OPEN_IMAGE.V_     = vector(OPEN_IMAGE.V);
A      585     7237    2      FPT_FID           = FPT_FID_C;
A      586     7238    2      FPT_FID.V_        = vector(FPT_FID.V);
A      587     7239    2      FPT_FID.RESULTS_  = vector(VLR_FID);
A      588     7240    2      FPT_FID.NAME_     = vector(VLP_NAME);
A      589     7241    2      FPT_FID.ACCT_     = vector(VLP_ACCT);
A      590     7242    2      FPT_FID.PASS_     = vector(VLP_PASS);
A      591     7243    2      FPT_FID.SN_       = vector(VLP_SN);
A      592     7244    2      FPT_FID.ASN_      = vector(OPEN_IMAGE.V.ASN#);
A      593     7245    3      if addr(FILENAME) ~= addr(nil) then do;
A      594     7246    3         call XBI$STRLEN(FILENAME, I);
A      595     7247    3         FPT_FID.TEXTFID_  = vector(substr(FILENAME,,I));
A      596     7248    3         call M$FID(FPT_FID);
A      597     7249    3         end;
A      598     7250    2      else I = 0;
A      599     7251    2      OPEN_IMAGE.NAME_  = vector(VLP_NAME);
A      600     7252    2      OPEN_IMAGE.ACCT_  = vector(VLP_ACCT);
A      601     7253    2      OPEN_IMAGE.PASS_  = vector(VLP_PASS);
A      602     7254    2      OPEN_IMAGE.SN_    = vector(VLP_SN);
A      603     7255    2      FPT_READ          = FPT_READ_C;
A      604     7256    2      FPT_READ.V_       = vector(FPT_READ.V);
A      605     7257    2      FPT_READ.KEY_     = vector(SECTKEY);
A      606     7258    2      FPT_WRITE         = FPT_WRITE_C;
A      607     7259    2      FPT_WRITE.V_      = vector(FPT_WRITE.V);
A      608     7260    2      FPT_WRITE.KEY_    = vector(SECTKEY);
A      609     7261    2      SECT_VECTOR       = '0'b;
A      610     7262    2      SECTKEY           = SECTKEY_C;
A      611     7263    2      FPT_GDS           = FPT_GDS_C;
A      612     7264    2      FPT_GDS.V_        = vector(FPT_GDS.V);
A      613     7265    2      FPT_GDS.RESULTS_  = vector( SECT_VECTOR );
A      614     7266    2      SECT_VECTOR       = '0'b;
A      615     7267
A      616     7268    2   end SETUP_FPTS;
A      617     7269    1   end GENRU;
P
rPL6.E3A0      #003=GENRU File=MAKE_SI615.:XSI                                    THU 11/20/97 22:46 Page:21   
A--  Include file information  --
A
A   CP_6_SUBS.:LIBRARY  is referenced.
A   B_ERRORS_C.:LIBRARY  is referenced.
A   B_SEGIDS_C.:LIBRARY  is referenced.
A   B$OBJECT_C.:LIBRARY  is referenced.
A   CP_6.:LIBRARY  cannot be made into a system file and is referenced.
A   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
A   CP_6_C.:E05TOU  was found in the system file and is referenced.
a      No diagnostics issued in procedure GENRU.
b
A   Procedure GENRU requires 486 words for executable code.
A   Procedure GENRU requires 1230 words of local(AUTO) storage.
b
A    No errors detected in file MAKE_SI615.:XSI    .
a
