/*M* LARK_SI601 LARK_COMMAND  Command processor for LARK */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*T*/
/*X* DDA */
/*P*
   NAME:          LARK_COMMAND
   PURPOSE:       This module is the main module of LARK.  It evaluates all
                  requests and oversees their execution.
   DESCRIPTION:   LARK (Laurie's Adminstrative Routines for "K"omgroups)
                  allows the user to manipulate comgroups in various ways
                  interactively without requiring the user to develop code
                  each time he needs to use a comgroup.
                  LARK is intended to be used both in every day use of  comgroups
                  and for testing and debugging of the comgroup code.
*/
/*D*
   NAME:          LARK_COMMAND
   INTERFACE:     LARK_CREATE_CMD
                  LARK_DELETE_CMD
                  LARK_DISPLAY_CMD
                  LARK_MODIFY_CMD
                  LARK_SELECT_CMD
                  LARK_DEFINESTA_CMD
                  LARK_STATUSOFSTA_CMD
                  LARK_GENERICSTA_CMD
                  LARK_GENERICSTA_NOPARSE_CMD
                  LARK_CLOSE_CMD
                  LARK_OPEN_CMD
                  LARK_ACTIVATE_CMD
                  LARK_DEACTIVATE_CMD
                  LARK_SETPROFILE_CMD
                  LARK_STARTFPRG_CMD
                  LARK_FREECMD_POST_PROCESSOR
                  LARK_FREECMD_PRE_PROCESSOR
                  LARK_GET_DATA_SEGMENT
                  LARK_INTERNAL_ERROR
                  LARK_RELEASE_DATA_SEGMENT
                  LARK_REPORT_PMME_ERROR
                  LARK_PAUSE_CMD
   DESCRIPTION:   LARK is intended to perform the following functions:
                     1)  CREATE a comgroup
                     2)  DELETE a comgroup
                     3)  DISPLAY all options selected for a comgroup
                     4)  MODIFY options for a comgroup (AU capability required)
                     5)  SELECT a comgroup to display or modify and the station
                         name to use when connecting
                     6)  CLOSE a comgroup station
                     7)  OPEN a comgroup station
                     8)  ACTIVATE comgroup station(s)
                     9)  DEACTIVATE comgroup station(s)
                    10)  SETPROFILE comgroup terminal station
                    11)  STATION commands for various functions through usage
                         of LARKETTE
                    12)  STARTFPRG starts fprg terminal stations
                    13)  WAIT makes LARK wait for some specified number of
                         seconds
                  It makes use of the XUG services for command parsing
                  (through access to X$PARSE) and error reporting.
*/
 
%EJECT ;
LARK_COMMAND : PROC MAIN ;
 
/*
   Includes
*/
 
%INCLUDE CP_6 ;
%INCLUDE CP_6_SUBS ;
%INCLUDE B_ERRORS_C ;
 
%INCLUDE LARK_C61 ;
%INCLUDE LARK_C62 ;
%INCLUDE LARK_C63 ;
 
%INCLUDE LARKETTE_C61 ;
%INCLUDE LARKETTE_C62 ;
 
%INCLUDE XU_MACRO_C ;     /* XUG MACROS */
%INCLUDE XU_FORMAT_C ;
%INCLUDE XUF_ENTRY ;      /* XUF ENTRY DCLS */
%INCLUDE XUG_ENTRY ;      /* XUG ENTRY DCLS */
%INCLUDE XU_PERR_C ;      /* XUG ERROR SUBS */
 
/*
   Entries
*/
 
%LARK_ACTIVATE_CMD ;
%LARK_BREAK_HANDLER ;
%LARK_CHECK_NWIO ;
%LARK_CONTROL_NWIO ;
%LARK_CLOSE_CMD ;
%LARK_CREATE_CMD ;
%LARK_DEACTIVATE_CMD ;
%LARK_DEFINESTA_CMD ;
%LARK_DELETE_CMD ;
%LARK_DISPLAY_CMD ;
%LARK_FREECMD_POST_PROCESSOR ;
%LARK_FREECMD_PRE_PROCESSOR ;
%LARK_GENERICSTA_CMD ;
%LARK_GENERICSTA_NOPARSE_CMD ;
%LARK_GET_DATA_SEGMENT ;
%LARK_INTERNAL_ERROR ;
%LARK_MODIFY_CMD ;
%LARK_OPEN_CMD ;
%LARK_RELEASE_DATA_SEGMENT ;
%LARK_REPORT_PMME_ERROR ;
%LARK_SELECT_CMD ;
%LARK_SETPROFILE_CMD ;
%LARK_STARTFPRG_CMD ;
%LARK_STATUSOFSTA_CMD ;
%LARK_STOPFPRG_CMD ;
%LARK_WRITE_MESSAGE ;
%LARK_PAUSE_CMD ;
 
/*
   Structures
*/
 
%B$ALT ;
 
%B$TCB ;
 
%F$DCB ;
 
%F_FDS
          ( NAME           = FDS,
            BUF            = LOBUF,
            DCB            = M$LO ) ;
 
%FPT_EVENT
          ( FPTN           = FPT_EVENT_CONTROL,
            STCLASS        = CONSTANT,
            UENTRY         = LARK_CONTROL_NWIO ) ;
 
%FPT_EVENT
          ( FPTN           = FPTEVENT_CONTROL,
            STCLASS        = AUTO ) ;
 
%FPT_INT
          ( FPTN           = FPT_BREAK_HANDLER,
            UENTRY         = LARK_BREAK_HANDLER ) ;
%FPT_OPEN
          ( FPTN           = FPT_OPEN_OUTPUT,
            STCLASS        = CONSTANT,
            CTG            = YES,
            DISP           = NAMED,
            REASSIGN       = YES,
            SCRUB          = YES ) ;
 
%FPT_OPEN
          ( FPTN           = FPTOPEN_OUTPUT,
            STCLASS        = AUTO ) ;
 
%FPT_WAIT
          ( FPTN           = FPT_WAIT,
            STCLASS        = CONSTANT,
            UNITS          = 1 ) ;
 
%FPT_WAIT
          ( FPTN           = FPTWAIT,
            STCLASS        = AUTO ) ;
 
%PARSE$OUT
          ( NAME           = OUT$BLK,
            STCLASS        = BASED ) ;
 
%VLP_VECTOR
          ( FPTN           = VLP$VECTOR_PERM_DATASEG,
            STCLASS        = STATIC ) ;
 
%XUG_INIT
          ( NAME           = XUG$INIT_,
            STCLASS        = STATIC,
            ALWAYS_SET_PROMPT = YES,
            COMMANDS       = YES,
            GOODCMD        = YES,
            POST_EXEC      = LARK_FREECMD_POST_PROCESSOR,
            PRE_EXEC       = LARK_FREECMD_PRE_PROCESSOR,
            SYNTAX         = YES ) ;
 
%XUG_INIT
          ( NAME           = XUG$INIT_SUB,
            STCLASS        = STATIC,
            ALWAYS_SET_PROMPT = YES,
            COMMANDS       = YES,
            GOODCMD        = YES,
            POST_EXEC      = LARK_FREECMD_POST_PROCESSOR,
            PRE_EXEC       = LARK_FREECMD_PRE_PROCESSOR,
            SYNTAX         = YES ) ;
 
%LARK_FPRGLIST ;
%LARKETTE_FUNCTION ;
%LARK_NAMELIST ;
%LARKETTE_STATUS ;
 
/*
   Global variables
*/
 
%LARK_GLOBALS ( STOCLASS = STATIC SYMDEF ) ;
 
DCL         LARK_QUIT      BIT ( 1 ) STATIC SYMDEF ;
 
/*
   Formats
*/
 
DCL         FMT00          CONSTANT CHAR ( 0 ) INIT ( '%0A' ) ;
DCL         TXT_STARTUP    CONSTANT CHAR ( 0 )
                           INIT ( 'LARK C00 here (08/10/88)' ) ;
 
/*
   Local variables
*/
 
DCL         B$TCB$         PTR SYMREF ;
DCL         INITIAL_DATASEG_SIZE SBIN CONSTANT INIT ( 1024 ) ;
DCL         J              SBIN ;
DCL         LOBUF          STATIC CHAR ( 80 ) INIT ( ' ' ) ;
DCL         M$LM           DCB ;
DCL         M$LM$          PTR ;
DCL         STA_IDX        SBIN ;
 
%EJECT ;
/*
  Set up break control
*/
 
CALL M$INT ( FPT_BREAK_HANDLER ) ;
/*
   Open M$LO and M$DO.  Ignore ALTRET's - will occur running under DELTA.
*/
 
FPTOPEN_OUTPUT = FPT_OPEN_OUTPUT ;
FPTOPEN_OUTPUT.V_ = VECTOR ( FPTOPEN_OUTPUT.V ) ;
FPTOPEN_OUTPUT.V.DCB# = DCBNUM ( M$LO ) ;
CALL M$OPEN ( FPTOPEN_OUTPUT )
      WHENALTRETURN DO ;
      END ;
 
FPTOPEN_OUTPUT.V.DCB# = DCBNUM ( M$DO ) ;
CALL M$OPEN ( FPTOPEN_OUTPUT )
      WHENALTRETURN DO ;
      END ;
 
/*
   Initialize the XUG structures for parsing.
*/
 
CALL XUG$INIT ( XUG$GETCMD_,
                XUG$INIT_ ) ;
 
CALL XUG$INIT ( XUG$GETCMD_SUB,
                XUG$INIT_SUB ) ;
 
/*
   Initialize error message file to run-unit file.
   ( Error messages are extracted and merged into the run-unit.)
*/
 
M$LM$ = DCBADDR(DCBNUM(M$LM)) ;
CALL CONCAT ( VLP$NAME_RU.NAME#,
              SUBSTR ( M$LM$->F$DCB.NAME#.C,
                       0,
                       M$LM$->F$DCB.NAME#.L ),
              '.',
              M$LM$->F$DCB.ACCT# ) ;
CALL INDEX ( J,
             ' ',
             VLP$NAME_RU.NAME# ) ;
VLP$NAME_RU.L# = J ;
 
/*
   Initialize comgroup dcb variables, etc.
*/
 
M$CG_DCBNUM = DCBNUM ( M$CG ) ;
M$CG$ = DCBADDR ( M$CG_DCBNUM ) ;
M$CTRLCG_DCBNUM = DCBNUM ( M$CTRLCG ) ;
M$CTRLCG$ = DCBADDR ( M$CTRLCG_DCBNUM ) ;
 
RPT_AU_EVNT = '0'B;
AU_FORCE = %NO# ;
CONTROL_NWIO.COMPLETE = %NO# ;
CONTROL_STATIONX = 0 ;
DEBUG = %NO# ;
NAMELIST_CT = 0 ;
 
FPRGLIST_CT = 0 ;
 
/*
   LARK startup.
*/
 
CALL X$WRITE ( FDS,
               VECTOR ( FMT00 ),
               VECTOR ( TXT_STARTUP ) ) ;
 
LARK_QUIT = %FALSE ;
 
/*
   Set up the CGINFO data segment.
*/
 
CALL LARK_GET_DATA_SEGMENT ( VLP$VECTOR_CGINFO_DATASEG,
                             INITIAL_DATASEG_SIZE )
      WHENALTRETURN DO ;
         CALL LARK_INTERNAL_ERROR ;
      END ;
 
/*
   Set up the permanent data segment.
*/
 
CALL LARK_GET_DATA_SEGMENT ( VLP$VECTOR_PERM_DATASEG,
                             %INITIAL_LIST_DATASEG_SIZE )
      WHENRETURN DO ;
         FUNCTION$ = VLP$VECTOR_PERM_DATASEG.PTR$ ;
         STATUS$ = PINCRW ( FUNCTION$,
                            SIZEW ( FUNCTION ) ) ;
         FPRGLIST$ = PINCRW ( STATUS$,
                              SIZEW ( STATUS ) ) ;
         NAMELIST$ = PINCRW ( FPRGLIST$,
                              SIZEW ( FPRGLIST ) ) ;
      END ;
      WHENALTRETURN DO ;
         CALL LARK_INTERNAL_ERROR ;
      END ;
 
/*
   Initialize fprglist to empty
*/
 
DO J = 0 TO %MAX_FPRGS - 1 ;
   FPRGLIST.ACTIVE# ( J ) = %FALSE ;
   FPRGLIST.IN_USE# ( J ) = %FALSE ;
END ;
 
 
/*
   Establish the entry for the no-wait IO event processing routine LARK_CONTROL_NWIO.
*/
 
FPTEVENT_CONTROL = FPT_EVENT_CONTROL ;
FPTEVENT_CONTROL.V_ = VECTOR ( FPTEVENT_CONTROL.V ) ;
CALL M$EVENT ( FPTEVENT_CONTROL )
      WHENALTRETURN DO ;
         CALL LARK_REPORT_PMME_ERROR ( B$TCB$->B$TCB.ALT$->B$ALT.ERR,
                                       M$CTRLCG_DCBNUM ) ;
         CALL LARK_INTERNAL_ERROR ;
      END ;
 
/*
   Initialize the wait fpt.
*/
 
FPTWAIT = FPT_WAIT ;
FPTWAIT.V_ = VECTOR ( FPTWAIT.V ) ;
 
/*
   Command processing.
*/
 
DO WHILE NOT ( LARK_QUIT ) ;
 
   CALL XUG$GETCMD ( XUG$GETCMD_ )
         WHENRETURN DO ;
            CALL XUG$ECHOIF ( XUG$GETCMD_ ) ;
            DO WHILE CONTROL_NWIO.COMPLETE AND NOT LARK_QUIT ;
               CALL LARK_CHECK_NWIO ;
               CALL M$WAIT ( FPTWAIT )
                     WHENALTRETURN DO ;
                        CALL LARK_REPORT_PMME_ERROR ( B$TCB$->B$TCB.ALT$->B$ALT.ERR,
                                                      M$CG_DCBNUM ) ;
                        CALL LARK_INTERNAL_ERROR ;
                     END ;
            END ;
            IF NOT LARK_QUIT THEN DO ;
               DO CASE ( XUG$GETCMD_.OUT$->OUT$BLK.CODE ) ;
                  CASE ( %ABORTSTA_CMD ) ;
                     CALL LARK_GENERICSTA_CMD ( XUG$GETCMD_.OUT$->OUT$BLK,
                                                %ABORT_LARKETTE ) ;
                  CASE ( %ACTIVATE_CMD ) ;
                     CALL LARK_ACTIVATE_CMD ( XUG$GETCMD_.OUT$->OUT$BLK ) ;
                  CASE ( %CLOSE_CMD ) ;
                     CALL LARK_CLOSE_CMD ( XUG$GETCMD_.OUT$->OUT$BLK ) ;
                  CASE ( %CONNECTSTA_CMD ) ;
                     CALL LARK_GENERICSTA_CMD ( XUG$GETCMD_.OUT$->OUT$BLK,
                                                %CONNECT_STATION ) ;
                  CASE ( %CREATE_CMD ) ;
                     CALL LARK_CREATE_CMD ( XUG$GETCMD_.OUT$->OUT$BLK ) ;
                  CASE ( %DEACTIVATE_CMD ) ;
                     CALL LARK_DEACTIVATE_CMD ( XUG$GETCMD_.OUT$->OUT$BLK ) ;
                  CASE ( %DEFINESTA_CMD ) ;
                     CALL LARK_DEFINESTA_CMD ( XUG$GETCMD_.OUT$->OUT$BLK ) ;
                  CASE ( %DELETE_CMD ) ;
                     CALL LARK_DELETE_CMD ( XUG$GETCMD_.OUT$->OUT$BLK ) ;
                  CASE ( %DISCONNECTSTA_CMD ) ;
                     CALL LARK_GENERICSTA_CMD ( XUG$GETCMD_.OUT$->OUT$BLK,
                                                %DISCONNECT_STATION ) ;
                  CASE ( %DISPLAY_CMD ) ;
                     CALL LARK_DISPLAY_CMD ( XUG$GETCMD_.OUT$->OUT$BLK ) ;
                  CASE ( %MODIFY_CMD ) ;
                     CALL LARK_MODIFY_CMD ( XUG$GETCMD_.OUT$->OUT$BLK ) ;
                  CASE ( %NULL_CMD ) ;
                     /*
                        Provide a loop to catch completed no-wait I/O's.
                     */
                  CASE ( %OPEN_CMD ) ;
                     CALL LARK_OPEN_CMD ( XUG$GETCMD_.OUT$->OUT$BLK ) ;
                  CASE ( %RESUMESTA_CMD ) ;
                     CALL LARK_GENERICSTA_CMD ( XUG$GETCMD_.OUT$->OUT$BLK,
                                                %RESUME_STATION ) ;
                  CASE ( %SELECT_CMD ) ;
                     CALL LARK_SELECT_CMD ( XUG$GETCMD_.OUT$->OUT$BLK ) ;
                  CASE ( %SETPROFILE_CMD ) ;
                     CALL LARK_SETPROFILE_CMD ( XUG$GETCMD_.OUT$->OUT$BLK ) ;
                  CASE ( %STARTFPRG_CMD ) ;
                     CALL LARK_STARTFPRG_CMD ( XUG$GETCMD_.OUT$->OUT$BLK ) ;
                  CASE ( %STATUSOFSTA_CMD ) ;
                     CALL LARK_STATUSOFSTA_CMD ( XUG$GETCMD_.OUT$->OUT$BLK ) ;
                  CASE ( %STOPFPRG_CMD ) ;
                     CALL LARK_STOPFPRG_CMD ( XUG$GETCMD_.OUT$->OUT$BLK ) ;
                  CASE ( %SUSPENDSTA_CMD ) ;
                     CALL LARK_GENERICSTA_CMD ( XUG$GETCMD_.OUT$->OUT$BLK,
                                                %SUSPEND_STATION ) ;
                  CASE ( %PAUSE_CMD ) ;
                     CALL LARK_PAUSE_CMD ( XUG$GETCMD_.OUT$->OUT$BLK ) ;
                  CASE ( ELSE ) ;
                     LARK_QUIT = %TRUE ;
               END ;
            END ;
         END ;
 
         WHENALTRETURN DO ;
            /*
               Error handling for errors returned by X$PARSE that GOODCMD
               doesn't catch.
            */
            CALL XUG$ECHOIF ( XUG$GETCMD_ ) ;
            LARK_QUIT = %TRUE ;
            CALL XUG$ERRPTR ( XUG$GETCMD_ ) ;
            XUG$GETCMD_.ERRDCB# = DCBNUM ( NIL ) ;
            XUG$GETCMD_.ERR_CODE = XUG$GETCMD_.ERR# ;
            CALL XUG$ERRMSG ( XUG$GETCMD_ ) ;
         END ;
 
   IF NOT LARK_QUIT AND M$CTRLCG$->F$DCB.FCD# THEN DO ;
      CALL LARK_CHECK_NWIO
            WHENALTRETURN DO ;
               CALL LARK_INTERNAL_ERROR ;
            END ;
   END ;
 
END ;
 
DO STA_IDX = 0 TO ( NAMELIST_CT - 1 ) ;
   IF ( NAMELIST.CONTROL_STA# ( STA_IDX ) ~= ' ' ) THEN DO ;
      CALL LARK_GENERICSTA_NOPARSE_CMD ( ,
                                         %ABORT_LARKETTE,
                                         STA_IDX ) ;
   END ;
END ;
/* XUG$GETCMD_.DISP# = %SAVE# ; */
XUG$GETCMD_.DCB_PARAM# = DCBNUM ( NIL ) ;
CALL XUG$CLOSE_DCBS ( XUG$GETCMD_ ) ;
CALL LARK_RELEASE_DATA_SEGMENT ( VLP$VECTOR_CGINFO_DATASEG ) ;
CALL LARK_RELEASE_DATA_SEGMENT ( VLP$VECTOR_PERM_DATASEG ) ;
CALL M$EXIT ;
 
END LARK_COMMAND ;
