VERSION E05

PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:1    
        1        1        /*M* JLL$LDLNK - The Load-and-Link and Load-and-Transfer-Control routines      */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* PLM=3,IND=5,ENU=0,ECU=0    */
        8        8
        9        9        JLL$LINK: PROC(NAME1$,ACCT1$,PASS1$,PSID1$,CMD1$,CLEANUP$) ALTRET;
       10       10
       11       11                                                /* INCLUDE Files                      */
       12       12        %INCLUDE B$JIT;
       13      615        %INCLUDE B$SS;
       14      794        %INCLUDE B$USER;
       15     1010        %INCLUDE B_MAGIC_C;
       16     1128        %INCLUDE B_MLSMAC_C;
       17     2070        %INCLUDE B_STRINGS_C;
       18     2199        %INCLUDE B_ULSMAC_C;
       19     3308        %INCLUDE CP_6_SUBS;
       20     3848        %INCLUDE F_CP6;
       21     4873        %INCLUDE F_ERRORS_C;
       22     5113        %INCLUDE M_ERRORS_C;
       23     5177        %INCLUDE M_INFO_C;
       24     5317        %INCLUDE SS_SCHED_C;
       25     5550        %INCLUDE UD_SEV_C;
       26     5564        %INCLUDE UE_CP6;
       27     6255        %INCLUDE UM_CP6;
       28     7107
       29     7108                                                /* Input parameters                   */
       30     7109    1   DCL NAME1$ PTR;
       31     7110    1   DCL ACCT1$ PTR;
       32     7111    1   DCL PASS1$ PTR;
       33     7112    1   DCL PSID1$ PTR;
       34     7113    1   DCL CMD1$ PTR;
       35     7114    1   DCL CLEANUP$ EPTR;
       36     7115
       37     7116
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:2    
       38     7117                                                /* AUTO Storage                       */
       39     7118    1   DCL ERR UBIN(36);
       40     7119    1   DCL RTNERR BIT(36);
       41     7120    1   DCL ACCESS SBIN;
       42     7121    1   DCL ECC SBIN;
       43     7122    1   DCL 1 ECP,
       44     7123    1         2 ECCS UBIN(36) UNAL,
       45     7124    1         2 EVID UBIN(36) ALIGNED,
       46     7125    1         2 JERR BIT(36),
       47     7126    1         2 P# UBIN(36);
       48     7127    1   DCL SSIC UBIN(36);
       49     7128    1   DCL IDN UBIN(36);
       50     7129    1   DCL 1 ID REDEF IDN,
       51     7130    1         2 N UBIN(18) UNAL,
       52     7131    1         2 SYSID UBIN(18) UNAL;
       53     7132    1   DCL ACCT_TYP UBIN BYTE;
       54     7133    1   DCL TEMP SBIN;
       55     7134    1   DCL TEMP2 UBIN;
       56     7135    1   DCL MAXCORE UBIN HALF;
       57     7136    1   DCL CLEANUP$$ EPTR;
       58     7137    1   DCL TEXTC_CMD$ PTR;
       59     7138    1   DCL XCONF BIT(9) ALIGNED;
       60     7139    1   DCL RNST BIT(9) ALIGNED;
       61     7140    1   DCL PTR$ PTR;
       62     7141    1   DCL DR$ PTR;
       63     7142    1   DCL I UBIN;
       64     7143    1   DCL J UBIN;
       65     7144
       66     7145                                                /* BASED Structures                   */
       67     7146    1   DCL B$PTR PTR BASED;
       68     7147
       69     7148    1   DCL 1 B$DRS(0:7) BASED ALIGNED,
       70     7149    1         2 WORD1 UNAL,
       71     7150    1           3 * BIT(32) UNAL,
       72     7151    1           3 TYP UBIN(4) UNAL,
       73     7152    1         2 * BIT(36) UNAL;
       74     7153
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:3    
       75     7154    1   DCL 1 B$PTRS(0:7) BASED ALIGNED,
       76     7155    1         2 OFFSET UBIN(24) UNAL,
       77     7156    1         2 SEGID BIT(12) UNAL,
       78     7157    1         2 S REDEF SEGID,
       79     7158    1           3 SEG_TYPE BIT(2) UNAL,
       80     7159    1           3 DESCR# UBIN(10) UNAL;
       81     7160
       82     7161
       83     7162        %B$WSR_DESC (FPTN=B$DESCR);
       84     7184
       85     7185    1   DCL 1 B$CCBUF BASED CHAR(TEMP);
       86     7186    1   DCL 1 TEXTC BASED,
       87     7187    1         2 SIZ UBIN(9) UNAL,
       88     7188    1         2 TEXT CHAR(TEXTC.SIZ);
       89     7189
       90     7190        %B_MLS (FPTN=B$MLS,STCLASS=BASED);
       91     8005
       92     8006                                                /* External Data                      */
       93     8007    1   DCL M$LM DCB;
       94     8008
       95     8009    1   DCL B$M$DO$ PTR SYMREF READONLY;
       96     8010    1   DCL B$JIT$ PTR SYMREF READONLY;
       97     8011    1   DCL B$LS$ PTR SYMREF READONLY;
       98     8012    1   DCL B$MISC2$ PTR SYMREF READONLY;
       99     8013    1   DCL B$USRT$ PTR SYMREF;
      100     8014    1   DCL S$CU$ PTR SYMREF;
      101     8015    1   DCL S_CUN UBIN SYMREF;
      102     8016        %B_MPT (FPTN=B_MPT,STCLASS=SYMREF);
      103     8109
      104     8110
      105     8111                                                /* External Procedures                */
      106     8112    1   DCL FMM$MRGAMR ENTRY;
      107     8113    1   DCL FMF$TRUNCM ENTRY(1);
      108     8114    1   DCL JLS$GET_IMAGE ENTRY(3) ALTRET;
      109     8115    1   DCL JLS$SAVE_IMAGE ENTRY(3) ALTRET;
      110     8116    1   DCL JLS$SEARCH_IMAGE ENTRY(3) ALTRET;
      111     8117    1   DCL JLU$DELSET ENTRY(1);                /* Deletes a record set from *N       */
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:4    
      112     8118    1   DCL JLU$FPRG_GET ENTRY;                 /* Re-establishes FPRG connections    */
      113     8119    1   DCL JLU$OPNSTARN ENTRY(1) ALTRET;       /* Opens the *N file                  */
      114     8120    1   DCL JLU$SAVE_AMR ENTRY(1) ALTRET;
      115     8121    1   DCL JLU$TRUNCDCBS ENTRY;                /* Truncs all open dcbs               */
      116     8122    1   DCL JLU$VALID ENTRY(1) ALTRET;          /* Insures link/ldtrc is ok           */
      117     8123    1   DCL JSA$CPQUIT ENTRY;
      118     8124    1   DCL JSD$ZAPUSR  ENTRY;                  /* Kicks off a badly damaged user     */
      119     8125    1   DCL JSE$ABORTM ENTRY;                   /* Routine to abort the user          */
      120     8126    1   DCL JSE$ABORTX ENTRY;
      121     8127    1   DCL JSE$ACP ENTRY;
      122     8128    1   DCL JSF$CLSLM ENTRY;                    /* Closes M$LM                        */
      123     8129    1   DCL JSF$CLSDCBS ENTRY;
      124     8130    1   DCL JSF$OPENLM ENTRY(1) ALTRET;         /* Default open on M$LM dcb           */
      125     8131    1   DCL JSR$RUNDOWN ENTRY ALTRET;           /* Rundown a user                     */
      126     8132    1   DCL JSS$RUNDSPC ENTRY;
      127     8133    1   DCL JST$GETPROG ENTRY(5);
      128     8134    1   DCL JSU$DECRUC ENTRY;
      129     8135    1   DCL JSU$WSTAR ENTRY(1);
      130     8136    1   DCL M$MCLOSE ENTRY(1) ALTRET;
      131     8137    1   DCL MME$WFVP ENTRY(4) ALTRET;           /* Used to release spcl bufs          */
      132     8138    1   DCL MME$WGVP ENTRY(4) ALTRET;           /* Used to get spcl buffers           */
      133     8139    1   DCL MMV$CLOSE ENTRY ALTRET;
      134     8140    1   DCL MMV$OPEN ENTRY ALTRET;
      135     8141    1   DCL SSR$REG ENTRY(3) ALTRET;            /* Report event & give up             */
      136     8142    1   DCL SST$SSFTCB ENTRY(6) ALTRET;
      137     8143    1   DCL SSU$DELTAGO ENTRY(3);
      138     8144    1   DCL UDB$AUTO ENTRY;                /* Dont alter ic and return to the user    */
      139     8145    1   DCL UDB$PMMEXIT2 ENTRY;
      140     8146    1   DCL UDN$MAGIC ENTRY;
      141     8147    1   DCL UMD$CHKOPN ENTRY ALTRET;
      142     8148    1   DCL UMD$CLSDRIB ENTRY ALTRET;
      143     8149
      144     8150    1   DCL SC_IOERRNF ENTRY CONV(2,0);
      145     8151    1   DCL SC_VARRAY ENTRY CONV(2,0);
      146     8152
      147     8153
      148     8154                                                /* Internal Data                      */
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:5    
      149     8155        %FPT_CLOSE (FPTN=J_FPT_CL_SAVE, STCLASS=SYMREF);
      150     8197
      151     8198
      152     8199        %VLP_ERRCODE (FPTN=J_ERR,STCLASS=CONSTANT,FCG=JL,MID=L,SEV=SEV_ERROR#,MON='1'B);
      153     8244
      154     8245
      155     8246                                                /* SUBs and EQUs                      */
      156     8247        %SUB B$JIT = B$JIT$->B$JIT;
      157     8248        %SUB B$U = S$CU$->B$U;
      158     8249        %SUB B$SS=B_MPT.SS$->B$SS;
      159     8250
      160     8251        %SUB_EXC;
      161     8298        %SUB_ECCDELTA;
      162     8335        %EJECT;
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:6    
      163     8336        /*************************************************************
      164     8337         *                                                           *
      165     8338         *                        JLL$LINK                           *
      166     8339         *                                                           *
      167     8340         *************************************************************/
      168     8341
      169     8342
      170     8343        /*F*   NAME:   JLL$LINK
      171     8344
      172     8345               PURPOSE: To perform the part of the load-and-link process
      173     8346                       which saves an image of the currently running pro-
      174     8347                       gram or processor for later resumption when the
      175     8348                       called program exits.
      176     8349
      177     8350               ENTRY:  Called from JSP$PMME if user user request.
      178     8351
      179     8352                       Called from JLU$MLINK if LINK from monitor.
      180     8353
      181     8354                       Called from JZA$ASAVE if to write to *N file
      182     8355                       for user with disconnected line.
      183     8356        */
      184     8357
      185     8358
      186     8359
      187     8360    1      ERR = 0;
      188     8361    1      B$JIT.SVLDTF = %SVL_LINK#;
      189     8362
      190     8363        /* Next, test for the validity of a load-and-link OPERATION:
      191     8364        */
      192     8365    1      CALL JLU$VALID(ERR) ALTRET(SET_JERR);
      193     8366
      194     8367        /* Set load-and-link in progress flag so that the world will know
      195     8368        */
      196     8369    1      B$JIT.JUNK = (B$JIT.JUNK | %JJ_MLINKIP#);
      197     8370
      198     8371    1      CALL JLU$TRUNCDCBS;                  /* Truncate any open dcbs             */
      199     8372
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:7    
      200     8373        /* Due to compiler restrictions, we must set DCB# in FPT_CLOSE here.
      201     8374        */
      202     8375    1      J_FPT_CL_SAVE.V.DCB# = %M$STAR#;
      203     8376
      204     8377        /* Remember the users max core value and set max core high enough
      205     8378           to prevent the inability of being able to M$LINK when user has
      206     8379           allocated all of memory available to him.
      207     8380        */
      208     8381    1      MAXCORE = B$JIT.MAXCORE;
      209     8382    1      B$JIT.MAXCORE = 1024;
      210     8383
      211     8384        /* Make sure Dribble is through with M$* before using it.
      212     8385        */
      213     8386    1      IF B$JIT.CPFLAGS1 & %CP_DRIBBLE#
      214     8387    1      THEN CALL UMD$CHKOPN;
      215     8388
      216     8389        /* Get sbuf1 for use in writing the star-n file.
      217     8390        */
      218     8391    1      ACCESS = BITBIN(%PGINMEM | %PGWRITE | %PGIOM);
      219     8392    1      CALL MME$WGVP(%USERWSQ,%SBUF1PG,ACCESS,ERR) ALTRET(LINK_ERR2);
      220     8393
      221     8394        /* Get SBUF2 and read the assign/merge information into it.
      222     8395           If the command processor is to parse the command then the
      223     8396           assign/merge records for #1, #2, #3 and #4 should be deleted.
      224     8397        */
      225     8398    1      IF ADDR(NAME1$) = ADDR(NIL)
      226     8399    1      THEN TEMP = 0/*JZA$ASAVE entry - save*/;
      227     8400    1      ELSE IF NAME1$ = ADDR(NIL)
      228     8401    1           THEN TEMP = 1/*CP CMD - delete*/;
      229     8402    1           ELSE TEMP = 0/*User CMD - save*/;
      230     8403
      231     8404    1      CALL JLU$SAVE_AMR(TEMP)
      232     8405    2      WHENALTRETURN DO;
      233     8406    2           ERR = B$JIT.ERR.CODE;
      234     8407    2           GOTO LINK_ERR1;                 /* can't get SBUF2                    */
      235     8408    2           END;
      236     8409
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:8    
      237     8410        /* Next, close M$LM and open star-n
      238     8411        */
      239     8412    1      CALL JSF$CLSLM;
      240     8413    1      CALL JLU$OPNSTARN(ERR) ALTRET(LINK_ERR1);
      241     8414
      242     8415        /* Build the next 'IDn' identifier
      243     8416        */
      244     8417    1      ID.N = B$JIT.LNKCNT + 1;
      245     8418    1      ID.SYSID = B$JIT.SYSID;
      246     8419
      247     8420        /* Go write the ldlnk *N file
      248     8421        */
      249     8422    1      CALL JLS$SAVE_IMAGE(IDN,ERR,CLEANUP$) ALTRET(LINK_ERR);
      250     8423
      251     8424        /* Close M$* And wrap up the image-writing process
      252     8425        */
      253     8426    1      CALL M$MCLOSE(J_FPT_CL_SAVE) ALTRET(CLS_ERR1);
      254     8427    1   CLS_ERR1: ;
      255     8428
      256     8429        /* Free the special buffer page we've been using.
      257     8430        */
      258     8431    1      CALL MME$WFVP(%USERWSQ,%SBUF1PG,ERR,ERR) ALTRET(WFVP_ERR1);
      259     8432    1   WFVP_ERR1: ;
      260     8433
      261     8434        /* Set max core back to the user defined value
      262     8435        */
      263     8436    1      B$JIT.MAXCORE = MAXCORE;
      264     8437    1      B$JIT.LNKCNT = B$JIT.LNKCNT +1;
      265     8438    1      B$JIT.JUNK = (B$JIT.JUNK | %JJ_RTNXIT#);
      266     8439
      267     8440
      268     8441        /* Close down any virtual arrays that were open
      269     8442        */
      270     8443    1      CALL CLSV (0);
      271     8444    1      CALL CLSV (1);
      272     8445    1      CALL CLSV (2);
      273     8446
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:9    
      274     8447        /* Close M$DRIBBLE.
      275     8448        */
      276     8449    1      CALL UMD$CLSDRIB;
      277     8450
      278     8451        /* Set JIT.PRIOCORE so the LINKed to ATILA will know how much
      279     8452           memory is required to return control to the user program.
      280     8453        */
      281     8454    1      B$JIT.PRIOCORE = B$JIT.CURRCORE;
      282     8455
      283     8456        /* If this call to JLL$LINK was to save the image of a time-sharing
      284     8457           user whose line has failed, return to JZA$ASAVE now.
      285     8458           If the call was to save the image for the command processor,
      286     8459           return to JSP$PMME.
      287     8460        */
      288     8461    1      IF (B$JIT.JUNK2 & (%JJ2_ASAVE_LNK# | %JJ2_CP_LINK#) )
      289     8462    1      THEN RETURN;
      290     8463        %EJECT;
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:10   
      291     8464        /*************************************************************
      292     8465         *                                                           *
      293     8466         *                        GO_TO_NEW                          *
      294     8467         *                                                           *
      295     8468         *************************************************************/
      296     8469
      297     8470
      298     8471        /* Here is where the M$LDTRC logic joins up with M$LINK.
      299     8472           The existing program is rundown, potentially dangerous linkage
      300     8473           segment descriptors are reset to be harmless, and control
      301     8474           passes to the JST$GETPROG routine to actually go to the new run
      302     8475           unit the user requested.
      303     8476        */
      304     8477
      305     8478    1   GO_TO_NEW:;
      306     8479    1      B$JIT.RUNFLAGS = %RUN_MON#;
      307     8480    1      IF (B$JIT.JUNK & %JJ_UDELTA#) THEN B$U.FLG.DIC='1'B;
      308     8481
      309     8482        /* If the user didn't give us a command, then the TEXT portion of the
      310     8483           name is to go into CCBUF.  Also, if this is a monitor M$LINK, the
      311     8484           command is not framed by a descriptor, but is in TEXTC format and
      312     8485           addressed by CMD1$.
      313     8486        */
      314     8487    1      IF NOT(B$JIT.JUNK & %JJ_MONLINK#)
      315     8488    1      THEN TEXTC_CMD$ = NAME1$;            /* in case user didn't supply CMD1$   */
      316     8489    2      ELSE DO;
      317     8490    2           TEXTC_CMD$ = CMD1$;
      318     8491    2           GOTO TEXTC_CCBUF;
      319     8492    2           END;
      320     8493
      321     8494        /* If the user called M$LINK/M$LDTRC with any CMD, copy the command
      322     8495           to CCBUF.
      323     8496        */
      324     8497    1      IF CMD1$ ~= ADDR(NIL)
      325     8498    2      THEN DO;
      326     8499    2           TEMP = CMD1$->B$DESCR.BOUND +1;
      327     8500    2           B$JIT.CCARS = CMD1$->B$DESCR.BOUND +1;
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:11   
      328     8501    3           DO INHIBIT;
      329     8502    3                B$LS$->B$MLS.MISC2 = CMD1$->B$DESCR;
      330     8503    3                B$JIT.CCBUF = B$MISC2$->B$CCBUF;
      331     8504    3                END/* do inhibit */;
      332     8505    2           END;
      333     8506
      334     8507        /* If CMD wasn't supplied, copy the name of the requested run unit
      335     8508           into CCBUF.  If this is the monitor calling M$LINK, copy the
      336     8509           command addressed by CMD1$.
      337     8510        */
      338     8511    2      ELSE DO;
      339     8512    2   TEXTC_CCBUF: ;
      340     8513    2           B$JIT.CCBUF = TEXTC_CMD$->TEXTC.TEXT;
      341     8514    2           B$JIT.CCARS = TEXTC_CMD$->TEXTC.SIZ;
      342     8515    2           END;
      343     8516
      344     8517        /* This is a LINK/LDTRC command to be parsed by the command processor
      345     8518           if there is no run unit name. Set the flags and enter the CP.
      346     8519        */
      347     8520    1      IF NAME1$ = ADDR(NIL)
      348     8521    2      THEN DO;
      349     8522    2           B$JIT.CCDISP = 0;
      350     8523    2           CALL JSR$RUNDOWN ALTRET(ZAP_USER);
      351     8524    2           B$JIT.PRFLAGS = (B$JIT.PRFLAGS & ~%PRF_LINK#);
      352     8525    2           B$JIT.CPFLAGS1 = (B$JIT.CPFLAGS1 | (%CP_BUFFULL# | %CP_LNKPMME#));
      353     8526
      354     8527    2           CALL JSE$ACP;
      355     8528    2           END;
      356     8529
      357     8530        /* When the command is not parsed by the CP, B$JIT.CCDISP is set
      358     8531           to the index of the first left parenthesis in CCBUF or to
      359     8532           B$JIT.CCARS if there is no left parenthesis.
      360     8533
      361     8534           BUFFULL is reset in JIT.CPFLAGS1 - any command the terminal user
      362     8535           gave IBEX at the YC level has now been overlaid in CCBUF.
      363     8536
      364     8537           NSCAN and NSSYNTAX are set in B$JIT.  CONTINUED is reset.
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:12   
      365     8538        */
      366     8539    2      ELSE DO;
      367     8540    2           CALL INDEX(TEMP,'(',SUBSTR(B$JIT.CCBUF,0,B$JIT.CCARS));
      368     8541    2           B$JIT.CCDISP=TEMP;
      369     8542
      370     8543    2           B$JIT.CPFLAGS1 = (B$JIT.CPFLAGS1 &~ %CP_BUFFULL#);
      371     8544    2           B$JIT.PRFLAGS.NSSYNTAX='1'B;
      372     8545    2           B$JIT.PRFLAGS.CONTINUED='0'B;
      373     8546    2           B$JIT.PRFLAGS.NOSCAN = '1'B;
      374     8547
      375     8548        /* Lastly, call JST$GETPROG to fire off the new ru, processor,etc.
      376     8549           We will never return from this call.  All errors go to ABORTM.
      377     8550        */
      378     8551    2           CALL JSR$RUNDOWN ALTRET(ZAP_USER);
      379     8552    2           CALL JST$GETPROG(NAME1$,ACCT1$,PASS1$,PSID1$,ADDR(NIL));
      380     8553
      381     8554    2           END/*do if not CP_CMD*/;
      382     8555
      383     8556
      384     8557        %EJECT;
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:13   
      385     8558        /*************************************************************
      386     8559         *                                                           *
      387     8560         *                        JLL$LDTRC                          *
      388     8561         *                                                           *
      389     8562         *************************************************************/
      390     8563
      391     8564
      392     8565        /*F*   NAME:   JLL$LDTRC
      393     8566
      394     8567               PURPOSE: To perform that part of the load-and-transfer-
      395     8568                       control process which prepares for the initiation
      396     8569                       of a new run unit.
      397     8570
      398     8571               ENTRY:  Called from JSP$PMME if user request and no
      399     8572                       exit control, no ASL, and no Debugger.
      400     8573
      401     8574                       Called from UEP$SAVLDT after all exit control
      402     8575                       processing is complete.
      403     8576        */
      404     8577
      405     8578    1   JLL$LDTRC: ENTRY(NAME1$,ACCT1$,PASS1$,PSID1$,CMD1$) ALTRET;
      406     8579    1      B$JIT.SVLDTF = %SVL_LDTRC#;
      407     8580
      408     8581        /* Test for the validity of an M$LDTRC operation.
      409     8582        */
      410     8583    1      CALL JLU$VALID(ERR) ALTRET(SET_JERR);
      411     8584
      412     8585        /* Close user dcb's & M$LM, as we won't be coming back
      413     8586        */
      414     8587    1      CALL JSF$CLSDCBS;
      415     8588    1      CALL JSF$CLSLM;
      416     8589
      417     8590        /* Now, decrement rep count for all procs associated, as we wont
      418     8591           Be coming back to them again.
      419     8592        */
      420     8593    1      CALL JSU$DECRUC;
      421     8594    1      B$JIT.JUNK = (B$JIT.JUNK | %JJ_MLINKIP#);
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:14   
      422     8595    1      GOTO GO_TO_NEW;                      /* Go start up the new run unit       */
      423     8596
      424     8597        %EJECT;
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:15   
      425     8598        /*************************************************************
      426     8599         *                                                           *
      427     8600         *                        LINK_ERR                           *
      428     8601         *                                                           *
      429     8602         *************************************************************/
      430     8603
      431     8604    1   LINK_ERR: ;
      432     8605    1      IF B$JIT.ERR.CODE ~= 0 THEN ERR = B$JIT.ERR.CODE;
      433     8606
      434     8607    1      IF (ERR >= %E$FREC) AND (ERR <= %E$GPIO)
      435     8608    1      THEN CALL SC_IOERRNF;
      436     8609
      437     8610        /*S*    SCREECH_CODE: JLL-S$IOERRNF
      438     8611                TYPE: SNAP
      439     8612               MESSAGE: Irrecoverable I/O error on *N or *S file.
      440     8613        */
      441     8614
      442     8615        /* Delete this set of records that contain the error.
      443     8616        */
      444     8617    1      CALL JLU$DELSET(IDN);
      445     8618
      446     8619        /* Close M$*.
      447     8620        */
      448     8621    1      CALL M$MCLOSE(J_FPT_CL_SAVE) ALTRET(CLS_ERR2);
      449     8622    1   CLS_ERR2: ;
      450     8623
      451     8624        /* Free the special buffer page.
      452     8625        */
      453     8626    1   LINK_ERR1: ;
      454     8627    1      CALL MME$WFVP(%USERWSQ,%SBUF1PG,ACCESS,ACCESS) ALTRET(WFVP_ERR2);
      455     8628    1   WFVP_ERR2: ;
      456     8629
      457     8630        /* Restore the real max core value and reset MLINKIP.
      458     8631        */
      459     8632    1   LINK_ERR2: ;
      460     8633    1      B$JIT.MAXCORE = MAXCORE;
      461     8634    1      B$JIT.JUNK = (B$JIT.JUNK &~ %JJ_MLINKIP#);
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:16   
      462     8635    1   SET_JERR: ;
      463     8636    1      B$JIT.ERR = J_ERR|BINBIT(ERR,33);
      464     8637    1      ALTRETURN;
      465     8638
      466     8639
      467     8640        /* Delete a user whose context is too damaged to be rundown.
      468     8641        */
      469     8642    1   ZAP_USER:;
      470     8643    1      CALL JSD$ZAPUSR;                     /* Will never return                  */
      471     8644
      472     8645        %EJECT;
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:17   
      473     8646        /*************************************************************
      474     8647         *                                                           *
      475     8648         *                        JLL$RTN                            *
      476     8649         *                                                           *
      477     8650         *************************************************************/
      478     8651
      479     8652
      480     8653        /*F*   NAME:   JLL$RTN
      481     8654               PURPOSE: To perform the implicit return to calling run unit
      482     8655                       when the called program exits.
      483     8656               ENTRY:  Called from JSE$EXITS.
      484     8657        */
      485     8658
      486     8659        /*F*   NAME:    JLL$ASAVE_RTN
      487     8660               PURPOSE:  To restore the saved image of a suspended user.
      488     8661               ENTRY:  Called from JZA$ASAVE.
      489     8662        */
      490     8663
      491     8664
      492     8665    1   JLL$RTN: ENTRY ALTRET;
      493     8666
      494     8667        /*  The error code returned to the LINKer is set to reflect    */
      495     8668        /*  the success or failure of the LINKed to process:           */
      496     8669        /*                                                             */
      497     8670        /*  If CP_EXIT is set in CP_FLAGS then we obviously got to the */
      498     8671        /*  LINKee and back OK.  Further, the LINKee has specified an  */
      499     8672        /*  error code and severity(!) to be returned to the LINKer.   */
      500     8673        /*  So...we just pass this code and severity as is, assuming   */
      501     8674        /*  that this form of communication has been agreed upon by    */
      502     8675        /*  the two programs.                                          */
      503     8676
      504     8677
      505     8678        /*  However, when CP_EXIT is not set, either:                     */
      506     8679        /*                                                            */
      507     8680        /*       1) We didn't even get to the LINKee (STIP set) and   */
      508     8681        /*          we will ALTRET to the M$LINK with the error code  */
      509     8682        /*          and severity as specified by STEP.                */
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:18   
      510     8683        /*                                                            */
      511     8684        /*       2) The LINKee has aborted (or issued an M$ERR or     */
      512     8685        /*          M$XXX without specifing an error code) and we     */
      513     8686        /*          pass this code to the LINKer with a severity of   */
      514     8687        /*          zero.  Severity zero indicates to the LINKer that */
      515     8688        /*          the error was the LINKee's and not a failure to   */
      516     8689        /*          Fetch the run unit.                               */
      517     8690
      518     8691    1      IF NOT(B$JIT.CPFLAGS1.EXIT#)
      519     8692    2      THEN DO;
      520     8693    2           IF NOT(B$U.FLG & %U_STIP)
      521     8694    2           THEN B$JIT.USRERR.SEV = 0;
      522     8695    2           END;
      523     8696
      524     8697    1      RTNERR = B$JIT.USRERR;
      525     8698
      526     8699        /* Test for the validity of an M$LINK return operation.
      527     8700        */
      528     8701    1      CALL JLU$VALID(ERR) ALTRET(SET_JERR2);
      529     8702
      530     8703        /* Close M$LM and the Dribble DCB, then run down the program
      531     8704           that is returning.
      532     8705        */
      533     8706    1      B$JIT.JUNK = (B$JIT.JUNK | %JJ_LNKRETIP#)/* set here for RUNDOWN */;
      534     8707    1      CALL JSF$CLSLM;
      535     8708    1      XCONF = B$JIT.XCONF;
      536     8709    1      CALL JSR$RUNDOWN ALTRET(ZAP_USER);
      537     8710
      538     8711        /* Remember the users max core value and set max core high enough
      539     8712           to prevent the inability of restoring the saved image because
      540     8713           of acquired common data pages.
      541     8714        */
      542     8715    1   JLL$ASAVE_RTN: ENTRY ALTRET;
      543     8716    1      MAXCORE=B$JIT.MAXCORE;
      544     8717    1      B$JIT.MAXCORE=1024;
      545     8718
      546     8719    1      B$JIT.USRRNST='000'O;
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:19   
      547     8720    1      B$JIT.USRERR='0'B;
      548     8721
      549     8722        /* Set "Link-return-in-progress" in the JIT.JUNK flags.
      550     8723        */
      551     8724    1      B$JIT.JUNK = (B$JIT.JUNK | %JJ_LNKRETIP#)/* set here for ASAVE_RTN */;
      552     8725
      553     8726        /* Construct the 'IDN' identifier which should belong to the last
      554     8727           Record set in star-n.
      555     8728        */
      556     8729    1      ID.N = B$JIT.LNKCNT;
      557     8730    1      ID.SYSID = B$JIT.SYSID;
      558     8731
      559     8732        /* Due to compiler restrictions, we must set DCB# in FPT_CLOSE here.
      560     8733        */
      561     8734    1      J_FPT_CL_SAVE.V.DCB# = %M$STAR#;
      562     8735
      563     8736        /* Open star-n and restore the last saved image from *N.
      564     8737        */
      565     8738    1      CALL JLU$OPNSTARN(ERR) ALTRET(RTN_ERR2);
      566     8739
      567     8740    1      CLEANUP$$ = ENTADDR(NIL);
      568     8741    1      CALL JLS$GET_IMAGE(IDN,ERR,CLEANUP$$) ALTRET(RTN_ERR);
      569     8742
      570     8743        /* Open up any virtual arrays that were open.
      571     8744        */
      572     8745    1      CALL OPNV (0);
      573     8746    1      CALL OPNV (1);
      574     8747    1      CALL OPNV (2);
      575     8748
      576     8749        /* Open M$LM back up to the original run unit, unless this is GHOST1.
      577     8750        */
      578     8751    1      RNST = '000'O;
      579     8752    1      IF S_CUN ~= 1
      580     8753    2      THEN DO;
      581     8754    2           CALL JSF$OPENLM(ERR)
      582     8755    3           WHENALTRETURN DO;
      583     8756    3   BAD_M$LM:    ;
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:20   
      584     8757    3                RTNERR = J_ERR|BINBIT(ERR,33);
      585     8758    3                RNST =  %RS_ABRT#;
      586     8759    3                END;
      587     8760    2           CALL FMF$TRUNCM (0);
      588     8761    2           END/*do if not SLUG*/;
      589     8762
      590     8763        /*E*   ERROR: JLL-E$NOFILE-E
      591     8764               MESSAGE: Can't continue from M$LINK.  Your linking load module disappeared.
      592     8765        */
      593     8766
      594     8767        /* Restore the M$DO assignment.
      595     8768        */
      596     8769    1      B$JIT.DCB$ = B$M$DO$;
      597     8770    1      CALL FMM$MRGAMR;
      598     8771
      599     8772        /* Re-establish suspended FPRG connections if possible.
      600     8773        */
      601     8774    1      CALL JLU$FPRG_GET;
      602     8775
      603     8776        /* Decrement the current link count and restore the original JIT.ERR
      604     8777           and the real max core value.
      605     8778        */
      606     8779    1      B$JIT.LNKCNT = B$JIT.LNKCNT -1;
      607     8780    1      B$JIT.ERR = RTNERR;
      608     8781    1      B$JIT.MAXCORE = MAXCORE;
      609     8782
      610     8783        /* Finally, reg to associate any processors we might need
      611     8784           Note that data & roseg init flags are not set.
      612     8785        */
      613     8786    1      IF B$U.DB ~= 0
      614     8787    2      THEN DO;
      615     8788    2           B$U.FLG.DELA = '1'B;
      616     8789    2           END;
      617     8790    1      CALL SSR$REG(%SS_AP);
      618     8791
      619     8792    1      B$JIT.JUNK = B$JIT.JUNK &~( %JJ_LNKRETIP# | %JJ_MLINKIP#);
      620     8793    1      B$U.FLG.STIP='0'B;
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:21   
      621     8794    1      B$JIT.SVLDTF=(B$JIT.SVLDTF &~ %SVL_LINK#);
      622     8795    1      B$JIT.DCBNO=0;
      623     8796
      624     8797        /* If this call to JLL$LINK was to restore the image of a time-sharing
      625     8798           user whose line has failed, return to JZA$ASAVE now.
      626     8799        */
      627     8800    1      IF (B$JIT.JUNK2 & %JJ2_ASAVE_LNK#)
      628     8801    2      THEN DO;
      629     8802    2           B$JIT.JUNK2 = (B$JIT.JUNK2 &~ %JJ2_ASAVE_LNK#);
      630     8803    2           CALL REFRESH_DESCR;
      631     8804    2           RETURN;
      632     8805    2           END;
      633     8806
      634     8807        /* If the program was saved via the command processor, flush
      635     8808           the command processor off the Safe Store Stack now.
      636     8809        */
      637     8810    1      IF (B$JIT.JUNK2 & %JJ2_CP_LINK#)
      638     8811    2      THEN DO;
      639     8812    2           B$JIT.JUNK2 = (B$JIT.JUNK2 &~ %JJ2_CP_LINK#);
      640     8813    2           CALL UDN$MAGIC;
      641     8814    2           CALL JSS$RUNDSPC;
      642     8815    2           END;
      643     8816
      644     8817    1      CALL REFRESH_DESCR;
      645     8818        /* If a program with PROCACC has just been restored write a PSTART record to *S.
      646     8819        */
      647     8820    1      IF (B$JIT.CPFLAGS1 & %CP_PROCACCT#)
      648     8821    2      THEN DO;
      649     8822    2           ACCT_TYP = %PSTART#;
      650     8823    2           CALL JSU$WSTAR(ACCT_TYP);
      651     8824    2           END;
      652     8825
      653     8826    1      B$JIT.RNST = ( (B$JIT.FRS & %RS_XCON#) | RNST);
      654     8827    1      IF (XCONF & %XC_QUIT#) THEN CALL JSA$CPQUIT;
      655     8828
      656     8829        /*  Remember the JJ_ASYNCLINK flag so we will know how to return to
      657     8830            the user, then reset the flag.
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:22   
      658     8831        */
      659     8832    1      IF (B$JIT.JUNK & %JJ_ASYNCLINK#)
      660     8833    2      THEN DO;
      661     8834    2           TEMP = 1;
      662     8835    2           B$JIT.JUNK = (B$JIT.JUNK &~ %JJ_ASYNCLINK#);
      663     8836    2           END;
      664     8837    1      ELSE TEMP = 0;
      665     8838
      666     8839
      667     8840        /* If restoring a program that was parked for a monitor M$LINK,
      668     8841           call the clean-up routine now.
      669     8842        */
      670     8843
      671     8844    1      IF (B$JIT.JUNK & %JJ_MONLINK#)
      672     8845    2      THEN DO;
      673     8846    2           TEMP2 = 1;
      674     8847    2           B$JIT.JUNK = (B$JIT.JUNK &~ %JJ_MONLINK#);
      675     8848
      676     8849    2           IF CLEANUP$$ ~= ENTADDR(NIL)
      677     8850    2           THEN CALL CLEANUP$$
      678     8851    3                WHENALTRETURN DO;
      679     8852    3                     CALL JSE$ABORTX;
      680     8853    3                     END;
      681     8854    2           END;
      682     8855    1      ELSE TEMP2 = 0;
      683     8856
      684     8857        /* Check against the real max core value and abort the user if common
      685     8858           data pages have caused him to exceed his limit.
      686     8859        */
      687     8860    1      IF (B$JIT.CURRCORE > B$JIT.MAXCORE AND (NOT B$JIT.PRIV.ACTIVE&%PR_MAXMEM#)) OR (
              8860               B$JIT.JUNK2 & %JJ2_MEM_ERR#)
      688     8861    2      THEN DO;
      689     8862    2           B$JIT.JUNK2 = (B$JIT.JUNK2 &~ %JJ2_MEM_ERR#);
      690     8863    2           B$JIT.RNST = (B$JIT.RNST | %RS_LIMX#);
      691     8864    2           B$JIT.XLIMFLG = (B$JIT.XLIMFLG | %XL_MEM#);
      692     8865    2           B$JIT.ERR = J_ERR|BINBIT(%E$MEMLIMIT,33);
      693     8866    2           END;
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:23   
      694     8867        /*E*   ERROR: JLL-E$MEMLIMIT-E
      695     8868           MESSAGE: User or installation memory limit exceeded while restoring M$LINK image.
      696     8869               DESCRIPTION:  This error results in a class 2 exit control condition.
      697     8870                             %RS_LIMX# will be set in B$JIT.RNST and
      698     8871                             %XL_MEM# will be set in B$JIT.XLIMFLG.
      699     8872        */
      700     8873
      701     8874
      702     8875        /* If we have a Class 2 or 3 exit condition in progress its now time
      703     8876           to give XCON to the linking program.
      704     8877        */
      705     8878    1      IF (B$JIT.RNST & %RS_PMME#)
      706     8879    2      THEN DO;
      707     8880    2           CALL FIX_IC;
      708     8881    2           B$JIT.CPFLAGS1.EXIT# = '0'B;
      709     8882    2           CALL JSE$ABORTX;
      710     8883    2           END;
      711     8884
      712     8885        /* If restoring a program that was parked for a monitor M$LINK,
      713     8886           RET to the user if linked from quantum end; return to the user via
      714     8887           PMMEXIT if linked for monitor service processing.
      715     8888        */
      716     8889    1      CALL UDN$MAGIC;
      717     8890    1      IF TEMP ~= 0
      718     8891    1      THEN CALL UDB$AUTO;
      719     8892
      720     8893    1      IF TEMP2 ~= 0
      721     8894    1      THEN CALL UDB$PMMEXIT2;
      722     8895
      723     8896        /* If we're returning to someone with delta associated, then
      724     8897           enter delta rather than resume his program.
      725     8898        */
      726     8899    1      IF NOT(B$JIT.JUNK & %JJ_UDELTA#)
      727     8900    1      THEN CALL UDB$PMMEXIT2;
      728     8901
      729     8902    2      ELSE DO;
      730     8903    2           CALL FIX_IC
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:24   
      731     8904    3           WHENALTRETURN DO;
      732     8905    3                CALL UDB$PMMEXIT2;         /*to enter delta with ECC_PMME#*/
      733     8906    3                END;
      734     8907    2           ECC = %ECC_LRTN#;
      735     8908    2           ECP.ECCS = 0;
      736     8909    2           CALL SSU$DELTAGO (ECC,ECP);
      737     8910    2           END;
      738     8911
      739     8912        %EJECT;
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:25   
      740     8913        /*************************************************************
      741     8914         *                                                           *
      742     8915         *                        RTN_ERR                            *
      743     8916         *                                                           *
      744     8917         *************************************************************/
      745     8918
      746     8919        /* Delete any records in the current set, and rundown the
      747     8920           user properly before aborting him.
      748     8921        */
      749     8922
      750     8923    1   RTN_ERR: ;
      751     8924    1      IF B$JIT.ERR.CODE ~= 0 THEN ERR = B$JIT.ERR.CODE;
      752     8925    1      IF (ERR >= %E$FREC) AND (ERR <= %E$GPIO)
      753     8926    1      THEN CALL SC_IOERRNF;
      754     8927
      755     8928    1      CALL JLU$DELSET(IDN);
      756     8929    1      CALL M$MCLOSE(J_FPT_CL_SAVE) ALTRET(RRET3);
      757     8930    1   RRET3: ;
      758     8931
      759     8932        /* Restore the real max core value and reset JIT.JUNK.
      760     8933        */
      761     8934    1   RTN_ERR2: ;
      762     8935    1      B$JIT.MAXCORE=MAXCORE;
      763     8936    1      B$JIT.JUNK = B$JIT.JUNK &~( %JJ_LNKRETIP# | %JJ_RTNXIT# | %JJ_MLINKIP#);
      764     8937    1      IF B$JIT.LNKCNT ~= 0
      765     8938    1      THEN B$JIT.LNKCNT = B$JIT.LNKCNT-1;
      766     8939    1      CALL JSR$RUNDOWN ALTRET(ZAP_USER);
      767     8940    1   SET_JERR2: ;
      768     8941    1      B$JIT.ERR = J_ERR|BINBIT(ERR,33);
      769     8942    1      CALL JSE$ABORTM;
      770     8943        %EJECT;
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:26   
      771     8944        /*************************************************************
      772     8945         *                                                           *
      773     8946         *                        JLL$LOCATE                         *
      774     8947         *                                                           *
      775     8948         *************************************************************/
      776     8949
      777     8950
      778     8951        /*F*   NAME:   JLL$LOCATE
      779     8952               PURPOSE: To find if a particular processor is in the call path
      780     8953               ENTRY:  Called from JSP$PMME.
      781     8954        */
      782     8955
      783     8956    1   JLL$LOCATE: ENTRY ALTRET;
      784     8957
      785     8958    1      IF B$JIT.LNKCNT = 0 THEN ALTRETURN;
      786     8959    1      J_FPT_CL_SAVE.V.DCB# = %M$STAR#;
      787     8960
      788     8961    1      CALL JLU$OPNSTARN(ERR) ALTRET(LOC_ALT);
      789     8962
      790     8963    1      CALL JLS$SEARCH_IMAGE ALTRET(LOC_ALT);
      791     8964
      792     8965    1      RETURN;                              /* we found it                        */
      793     8966    1   LOC_ALT: ALTRETURN;                     /* can't find it                      */
      794     8967        %EJECT;
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:27   
      795     8968        /*************************************************************
      796     8969         *                                                           *
      797     8970         *                    OPNV - CLSV                            *
      798     8971         *                                                           *
      799     8972         *************************************************************/
      800     8973
      801     8974        /* Subroutines to open and close down the user's virtual arrays.
      802     8975        */
      803     8976
      804     8977    1   OPNV: PROC (VNO);
      805     8978    2   DCL VNO UBIN;
      806     8979
      807     8980    2      B$JIT.DCBNO = B$JIT.VIRTUAL.DCB# (VNO);
      808     8981    2      IF B$JIT.DCBNO ~= 0
      809     8982    3      THEN DO;
      810     8983    3           B$JIT.DCB$ = DCBADDR (B$JIT.DCBNO);
      811     8984    3           B$JIT.VIRTUAL.DCB# (VNO) = 0;
      812     8985    3           CALL MMV$OPEN ALTRET (ALT);
      813     8986    3           END;
      814     8987    2      RETURN;
      815     8988
      816     8989    2   CLSV: ENTRY (VNO);
      817     8990
      818     8991    2      B$JIT.DCBNO = B$JIT.VIRTUAL.DCB# (VNO);
      819     8992    2      IF B$JIT.DCBNO ~= 0
      820     8993    3      THEN DO;
      821     8994    3           B$JIT.DCB$ = DCBADDR (B$JIT.DCBNO);
      822     8995    3           CALL MMV$CLOSE
      823     8996    4           WHENALTRETURN DO;
      824     8997        /*S*          SCREECH_CODE:JLS-S$VARRAY
      825     8998                      TYPE: SNAP
      826     8999                      MESSAGE: Can't open/close a virtual segment
      827     9000        */
      828     9001    4   ALT:         ;
      829     9002    4                CALL SC_VARRAY;
      830     9003    4                RETURN;
      831     9004    4                END;
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:28   
      832     9005    3           CALL FMF$TRUNCM (0);
      833     9006    3           END;
      834     9007    2      RETURN;
      835     9008    2   END OPNV;
      836     9009        %EJECT;
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:29   
      837     9010        /*************************************************************
      838     9011         *                                                           *
      839     9012         *                        FIX_IC                             *
      840     9013         *                                                           *
      841     9014         *************************************************************/
      842     9015
      843     9016        /* Subroutine to fix the IC in safe store when entering ABORTM
      844     9017           or going to DELTA while returning to the linking program.
      845     9018        */
      846     9019
      847     9020    1   FIX_IC: PROC ALTRET;
      848     9021    2      ECP.EVID = 0;
      849     9022    2      ECP.JERR = B$JIT.ERR;
      850     9023    2      ECP.P# = 0;
      851     9024
      852     9025    2      IF B$JIT.ERR.CODE=0
      853     9026    2      THEN IF B$SS.FPT.ALT
      854     9027    2           THEN B$SS.IC=B$SS.IC+1;
      855     9028    2           ELSE ;
      856     9029    3      ELSE DO;
      857     9030    3           IF B$SS.FPT.ALT
      858     9031    4           THEN DO;
      859     9032    4                SSIC=B$SS.IC;
      860     9033    4                ECP.ECCS=BITBIN(B$SS.FPT & '371777'O);
      861     9034    4                ECC=%ECC_ALT#;
      862     9035    4                B$SS.IC=B$SS.IC-2;
      863     9036    4                CALL SST$SSFTCB (SSIC,ECC,ECP,B_MPT.SS$,B_MPT.TCB$);
      864     9037    4                END;
      865     9038    3           ELSE IF B$JIT.ERR.SEV ~= 0
      866     9039    3                THEN ALTRETURN;
      867     9040    3           END;
      868     9041    2   END FIX_IC;
      869     9042    1   REFRESH_DESCR: PROC;
      870     9043        /* Refreash the descriptor registers in the safe store frame from
      871     9044           the current Linkage Segment descriptors.
      872     9045           Only move the first word if it is a super descriptor.
      873     9046        */
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:30   
      874     9047    2      CALL UDN$MAGIC;
      875     9048    2      PTR$ = ADDR(B$SS.PR0);
      876     9049    2      DR$ = ADDR(B$SS.DR0);
      877     9050    3      DO I=0 TO 7/*index to SSF prs and drs*/;
      878     9051    3           IF (PTR$->B$PTRS.S.SEG_TYPE(I) & '01'B) = '01'B
      879     9052    4           THEN DO;
      880     9053    4                J = PTR$->B$PTRS.S.DESCR#(I);/*index to linkage seg dscr*/
      881     9054    4                IF DR$->B$DRS.WORD1.TYP(I) = 4 OR DR$->B$DRS.WORD1.TYP(I) = 6
      882     9055    4                THEN DR$->B$DRS.WORD1(I) = B_MPT.LS$->B$DRS(J);
      883     9056    4                ELSE DR$->B$DRS(I) = B_MPT.LS$->B$DRS(J);
      884     9057    4                END;
      885     9058    3           END/*do I=0 to 7*/;
      886     9059    2   END REFRESH_DESCR;
      887     9060    1   END JLL$LINK;

PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:31   
--  Include file information  --

   UM_CP6.:E05TOU  is referenced.
   UE_CP6.:E05TOU  is referenced.
   UD_SEV_C.:E05TOU  is referenced.
   SS_SCHED_C.:E05TOU  is referenced.
   M_INFO_C.:E05TOU  is referenced.
   M_ERRORS_C.:E05TOU  is referenced.
   F_ERRORS_C.:E05TOU  is referenced.
   F_CP6.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   B_ULSMAC_C.:E05TOU  is referenced.
   B_STRINGS_C.:E05TOU  is referenced.
   B_MLSMAC_C.:E05TOU  is referenced.
   B_MAGIC_C.:E05TOU  is referenced.
   B$USER.:E05TOU  cannot be made into a system file and is referenced.
   B$SS.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure JLL$LINK.

   Procedure JLL$LINK requires 867 words for executable code.
   Procedure JLL$LINK requires 40 words of local(AUTO) storage.

    No errors detected in file JLL$LDLNK.:E05TSI    .

PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:32   

 Object Unit name= JLL$LINK                                   File name= JLL$LDLNK.:E05TOU
 UTS= JUL 29 '97 23:24:51.64 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$LM
    1  RoData even  UTS      7      7  JLL$LINK
    2   Proc  even  none   867   1543  JLL$LINK
    3  RoData even  none    17     21  JLL$LINK

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes    yes     yes      Std        6  JLL$LINK
     2    376          yes     yes      Std        5  JLL$LDTRC
     2    512          yes     yes      Std        0  JLL$RTN
     2    555          yes     yes      Std        0  JLL$ASAVE_RTN
     2   1261          yes     yes      Std        0  JLL$LOCATE
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:33   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       1 JLU$VALID
 yes     yes           Std       4 MME$WFVP
         yes           Std       5 JST$GETPROG
         yes           Std       0 JSD$ZAPUSR
 yes     yes           Std       3 SSR$REG
 yes     yes           Std       0 JSR$RUNDOWN
         yes           Std       0 JLU$TRUNCDCBS
         yes           Std       0 UDB$PMMEXIT2
         yes           Std       3 SSU$DELTAGO
         yes           Std       1 JLU$DELSET
         yes           Std       0 UDB$AUTO
         yes           Std       0 JSE$ABORTM
         yes           Std       0 JSS$RUNDSPC
 yes     yes           Std       3 JLS$SEARCH_IMAGE
 yes     yes           Std       0 UMD$CHKOPN
 yes     yes           Std       4 MME$WGVP
 yes     yes           Std       1 JLU$SAVE_AMR
 yes     yes           Std       3 JLS$SAVE_IMAGE
 yes     yes           Std       0 UMD$CLSDRIB
         yes           Std       1 FMF$TRUNCM
         yes           Std       0 JSE$ABORTX
 yes     yes           Std       3 JLS$GET_IMAGE
         yes           Std       1 JSU$WSTAR
 yes     yes           Std       1 JSF$OPENLM
         yes           Std       0 JSA$CPQUIT
         yes           Std       0 JSU$DECRUC
 yes     yes           Std       1 JLU$OPNSTARN
         yes           Std       0 JSF$CLSLM
 yes     yes           Std       1 M$MCLOSE
         yes           Std       0 JSE$ACP
         yes           Std       0 FMM$MRGAMR
         yes           Std       0 UDN$MAGIC
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:34   
         yes           Std       0 JSF$CLSDCBS
         yes           Std       0 JLU$FPRG_GET
 yes     yes           Std       0 MMV$OPEN
 yes     yes           Std       0 MMV$CLOSE
 yes     yes           Std       6 SST$SSFTCB
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AUTO_N
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     SC_IOERRNF                            SC_VARRAY                             M$LM
r    B$M$DO$                          r    B$JIT$                           r    B$LS$
r    B$MISC2$                              S$CU$                                 S_CUN
     B_MPT                                 J_FPT_CL_SAVE                         B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ASLENTSID                             ROSID                                 ISSID
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:35   


        1        1        /*M* JLL$LDLNK - The Load-and-Link and Load-and-Transfer-Control routines      */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* PLM=3,IND=5,ENU=0,ECU=0    */
        8        8
        9        9        JLL$LINK: PROC(NAME1$,ACCT1$,PASS1$,PSID1$,CMD1$,CLEANUP$) ALTRET;

      9  2 000000   000000 700200 xent  JLL$LINK     TSX0  ! X66_AUTO_N
         2 000001   000050 000006                    ZERO    40,6

       10       10
       11       11                                                /* INCLUDE Files                      */
       12       12        %INCLUDE B$JIT;
       13      615        %INCLUDE B$SS;
       14      794        %INCLUDE B$USER;
       15     1010        %INCLUDE B_MAGIC_C;
       16     1128        %INCLUDE B_MLSMAC_C;
       17     2070        %INCLUDE B_STRINGS_C;
       18     2199        %INCLUDE B_ULSMAC_C;
       19     3308        %INCLUDE CP_6_SUBS;
       20     3848        %INCLUDE F_CP6;
       21     4873        %INCLUDE F_ERRORS_C;
       22     5113        %INCLUDE M_ERRORS_C;
       23     5177        %INCLUDE M_INFO_C;
       24     5317        %INCLUDE SS_SCHED_C;
       25     5550        %INCLUDE UD_SEV_C;
       26     5564        %INCLUDE UE_CP6;
       27     6255        %INCLUDE UM_CP6;
       28     7107
       29     7108                                                /* Input parameters                   */
       30     7109    1   DCL NAME1$ PTR;
       31     7110    1   DCL ACCT1$ PTR;
       32     7111    1   DCL PASS1$ PTR;
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:36   
       33     7112    1   DCL PSID1$ PTR;
       34     7113    1   DCL CMD1$ PTR;
       35     7114    1   DCL CLEANUP$ EPTR;
       36     7115
       37     7116
       38     7117                                                /* AUTO Storage                       */
       39     7118    1   DCL ERR UBIN(36);
       40     7119    1   DCL RTNERR BIT(36);
       41     7120    1   DCL ACCESS SBIN;
       42     7121    1   DCL ECC SBIN;
       43     7122    1   DCL 1 ECP,
       44     7123    1         2 ECCS UBIN(36) UNAL,
       45     7124    1         2 EVID UBIN(36) ALIGNED,
       46     7125    1         2 JERR BIT(36),
       47     7126    1         2 P# UBIN(36);
       48     7127    1   DCL SSIC UBIN(36);
       49     7128    1   DCL IDN UBIN(36);
       50     7129    1   DCL 1 ID REDEF IDN,
       51     7130    1         2 N UBIN(18) UNAL,
       52     7131    1         2 SYSID UBIN(18) UNAL;
       53     7132    1   DCL ACCT_TYP UBIN BYTE;
       54     7133    1   DCL TEMP SBIN;
       55     7134    1   DCL TEMP2 UBIN;
       56     7135    1   DCL MAXCORE UBIN HALF;
       57     7136    1   DCL CLEANUP$$ EPTR;
       58     7137    1   DCL TEXTC_CMD$ PTR;
       59     7138    1   DCL XCONF BIT(9) ALIGNED;
       60     7139    1   DCL RNST BIT(9) ALIGNED;
       61     7140    1   DCL PTR$ PTR;
       62     7141    1   DCL DR$ PTR;
       63     7142    1   DCL I UBIN;
       64     7143    1   DCL J UBIN;
       65     7144
       66     7145                                                /* BASED Structures                   */
       67     7146    1   DCL B$PTR PTR BASED;
       68     7147
       69     7148    1   DCL 1 B$DRS(0:7) BASED ALIGNED,
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:37   
       70     7149    1         2 WORD1 UNAL,
       71     7150    1           3 * BIT(32) UNAL,
       72     7151    1           3 TYP UBIN(4) UNAL,
       73     7152    1         2 * BIT(36) UNAL;
       74     7153
       75     7154    1   DCL 1 B$PTRS(0:7) BASED ALIGNED,
       76     7155    1         2 OFFSET UBIN(24) UNAL,
       77     7156    1         2 SEGID BIT(12) UNAL,
       78     7157    1         2 S REDEF SEGID,
       79     7158    1           3 SEG_TYPE BIT(2) UNAL,
       80     7159    1           3 DESCR# UBIN(10) UNAL;
       81     7160
       82     7161
       83     7162        %B$WSR_DESC (FPTN=B$DESCR);
       84     7184
       85     7185    1   DCL 1 B$CCBUF BASED CHAR(TEMP);
       86     7186    1   DCL 1 TEXTC BASED,
       87     7187    1         2 SIZ UBIN(9) UNAL,
       88     7188    1         2 TEXT CHAR(TEXTC.SIZ);
       89     7189
       90     7190        %B_MLS (FPTN=B$MLS,STCLASS=BASED);
       91     8005
       92     8006                                                /* External Data                      */
       93     8007    1   DCL M$LM DCB;
       94     8008
       95     8009    1   DCL B$M$DO$ PTR SYMREF READONLY;
       96     8010    1   DCL B$JIT$ PTR SYMREF READONLY;
       97     8011    1   DCL B$LS$ PTR SYMREF READONLY;
       98     8012    1   DCL B$MISC2$ PTR SYMREF READONLY;
       99     8013    1   DCL B$USRT$ PTR SYMREF;
      100     8014    1   DCL S$CU$ PTR SYMREF;
      101     8015    1   DCL S_CUN UBIN SYMREF;
      102     8016        %B_MPT (FPTN=B_MPT,STCLASS=SYMREF);
      103     8109
      104     8110
      105     8111                                                /* External Procedures                */
      106     8112    1   DCL FMM$MRGAMR ENTRY;
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:38   
      107     8113    1   DCL FMF$TRUNCM ENTRY(1);
      108     8114    1   DCL JLS$GET_IMAGE ENTRY(3) ALTRET;
      109     8115    1   DCL JLS$SAVE_IMAGE ENTRY(3) ALTRET;
      110     8116    1   DCL JLS$SEARCH_IMAGE ENTRY(3) ALTRET;
      111     8117    1   DCL JLU$DELSET ENTRY(1);                /* Deletes a record set from *N       */
      112     8118    1   DCL JLU$FPRG_GET ENTRY;                 /* Re-establishes FPRG connections    */
      113     8119    1   DCL JLU$OPNSTARN ENTRY(1) ALTRET;       /* Opens the *N file                  */
      114     8120    1   DCL JLU$SAVE_AMR ENTRY(1) ALTRET;
      115     8121    1   DCL JLU$TRUNCDCBS ENTRY;                /* Truncs all open dcbs               */
      116     8122    1   DCL JLU$VALID ENTRY(1) ALTRET;          /* Insures link/ldtrc is ok           */
      117     8123    1   DCL JSA$CPQUIT ENTRY;
      118     8124    1   DCL JSD$ZAPUSR  ENTRY;                  /* Kicks off a badly damaged user     */
      119     8125    1   DCL JSE$ABORTM ENTRY;                   /* Routine to abort the user          */
      120     8126    1   DCL JSE$ABORTX ENTRY;
      121     8127    1   DCL JSE$ACP ENTRY;
      122     8128    1   DCL JSF$CLSLM ENTRY;                    /* Closes M$LM                        */
      123     8129    1   DCL JSF$CLSDCBS ENTRY;
      124     8130    1   DCL JSF$OPENLM ENTRY(1) ALTRET;         /* Default open on M$LM dcb           */
      125     8131    1   DCL JSR$RUNDOWN ENTRY ALTRET;           /* Rundown a user                     */
      126     8132    1   DCL JSS$RUNDSPC ENTRY;
      127     8133    1   DCL JST$GETPROG ENTRY(5);
      128     8134    1   DCL JSU$DECRUC ENTRY;
      129     8135    1   DCL JSU$WSTAR ENTRY(1);
      130     8136    1   DCL M$MCLOSE ENTRY(1) ALTRET;
      131     8137    1   DCL MME$WFVP ENTRY(4) ALTRET;           /* Used to release spcl bufs          */
      132     8138    1   DCL MME$WGVP ENTRY(4) ALTRET;           /* Used to get spcl buffers           */
      133     8139    1   DCL MMV$CLOSE ENTRY ALTRET;
      134     8140    1   DCL MMV$OPEN ENTRY ALTRET;
      135     8141    1   DCL SSR$REG ENTRY(3) ALTRET;            /* Report event & give up             */
      136     8142    1   DCL SST$SSFTCB ENTRY(6) ALTRET;
      137     8143    1   DCL SSU$DELTAGO ENTRY(3);
      138     8144    1   DCL UDB$AUTO ENTRY;                /* Dont alter ic and return to the user    */
      139     8145    1   DCL UDB$PMMEXIT2 ENTRY;
      140     8146    1   DCL UDN$MAGIC ENTRY;
      141     8147    1   DCL UMD$CHKOPN ENTRY ALTRET;
      142     8148    1   DCL UMD$CLSDRIB ENTRY ALTRET;
      143     8149
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:39   
      144     8150    1   DCL SC_IOERRNF ENTRY CONV(2,0);
      145     8151    1   DCL SC_VARRAY ENTRY CONV(2,0);
      146     8152
      147     8153
      148     8154                                                /* Internal Data                      */
      149     8155        %FPT_CLOSE (FPTN=J_FPT_CL_SAVE, STCLASS=SYMREF);
      150     8197
      151     8198
      152     8199        %VLP_ERRCODE (FPTN=J_ERR,STCLASS=CONSTANT,FCG=JL,MID=L,SEV=SEV_ERROR#,MON='1'B);
      153     8244
      154     8245
      155     8246                                                /* SUBs and EQUs                      */
      156     8247        %SUB B$JIT = B$JIT$->B$JIT;
      157     8248        %SUB B$U = S$CU$->B$U;
      158     8249        %SUB B$SS=B_MPT.SS$->B$SS;
      159     8250
      160     8251        %SUB_EXC;
      161     8298        %SUB_ECCDELTA;
      162     8335        %EJECT;
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:40   
      163     8336        /*************************************************************
      164     8337         *                                                           *
      165     8338         *                        JLL$LINK                           *
      166     8339         *                                                           *
      167     8340         *************************************************************/
      168     8341
      169     8342
      170     8343        /*F*   NAME:   JLL$LINK
      171     8344
      172     8345               PURPOSE: To perform the part of the load-and-link process
      173     8346                       which saves an image of the currently running pro-
      174     8347                       gram or processor for later resumption when the
      175     8348                       called program exits.
      176     8349
      177     8350               ENTRY:  Called from JSP$PMME if user user request.
      178     8351
      179     8352                       Called from JLU$MLINK if LINK from monitor.
      180     8353
      181     8354                       Called from JZA$ASAVE if to write to *N file
      182     8355                       for user with disconnected line.
      183     8356        */
      184     8357
      185     8358
      186     8359
      187     8360    1      ERR = 0;

   8360  2 000002   200011 450100                    STZ     ERR,,AUTO

      188     8361    1      B$JIT.SVLDTF = %SVL_LINK#;

   8361  2 000003   000000 470400 xsym               LDP0    B$JIT$
         2 000004   000020 236007                    LDQ     16,DL
         2 000005   000316 552104                    STBQ    206,'04'O,PR0

      189     8362
      190     8363        /* Next, test for the validity of a load-and-link OPERATION:
      191     8364        */
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:41   
      192     8365    1      CALL JLU$VALID(ERR) ALTRET(SET_JERR);

   8365  2 000006   200011 631500                    EPPR1   ERR,,AUTO
         2 000007   200042 451500                    STP1    @VNO+1,,AUTO
         2 000010   200042 630500                    EPPR0   @VNO+1,,AUTO
         2 000011   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000012   000000 701000 xent               TSX1    JLU$VALID
         2 000013   000500 702000 2                  TSX2    SET_JERR

      193     8366
      194     8367        /* Set load-and-link in progress flag so that the world will know
      195     8368        */
      196     8369    1      B$JIT.JUNK = (B$JIT.JUNK | %JJ_MLINKIP#);

   8369  2 000014   000000 470400 xsym               LDP0    B$JIT$
         2 000015   000315 220100                    LDX0    205,,PR0
         2 000016   000001 260003                    ORX0    1,DU
         2 000017   000315 740100                    STX0    205,,PR0

      197     8370
      198     8371    1      CALL JLU$TRUNCDCBS;                  /* Truncate any open dcbs             */

   8371  2 000020   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000021   000000 701000 xent               TSX1    JLU$TRUNCDCBS
         2 000022   000000 011000                    NOP     0

      199     8372
      200     8373        /* Due to compiler restrictions, we must set DCB# in FPT_CLOSE here.
      201     8374        */
      202     8375    1      J_FPT_CL_SAVE.V.DCB# = %M$STAR#;

   8375  2 000023   000001 220003                    LDX0    1,DU
         2 000024   000032 740000 xsym               STX0    J_FPT_CL_SAVE+26

      203     8376
      204     8377        /* Remember the users max core value and set max core high enough
      205     8378           to prevent the inability of being able to M$LINK when user has
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:42   
      206     8379           allocated all of memory available to him.
      207     8380        */
      208     8381    1      MAXCORE = B$JIT.MAXCORE;

   8381  2 000025   000000 470400 xsym               LDP0    B$JIT$
         2 000026   000210 221100                    LDX1    136,,PR0
         2 000027   200026 741100                    STX1    MAXCORE,,AUTO

      209     8382    1      B$JIT.MAXCORE = 1024;

   8382  2 000030   002000 222003                    LDX2    1024,DU
         2 000031   000210 742100                    STX2    136,,PR0

      210     8383
      211     8384        /* Make sure Dribble is through with M$* before using it.
      212     8385        */
      213     8386    1      IF B$JIT.CPFLAGS1 & %CP_DRIBBLE#

   8386  2 000032   000143 236100                    LDQ     99,,PR0
         2 000033   000001 376000 1                  ANQ     J_ERR+1
         2 000034   000040 600000 2                  TZE     s:8391

      214     8387    1      THEN CALL UMD$CHKOPN;

   8387  2 000035   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000036   000000 701000 xent               TSX1    UMD$CHKOPN
         2 000037   000000 011000                    NOP     0

      215     8388
      216     8389        /* Get sbuf1 for use in writing the star-n file.
      217     8390        */
      218     8391    1      ACCESS = BITBIN(%PGINMEM | %PGWRITE | %PGIOM);

   8391  2 000040   000064 235007                    LDA     52,DL
         2 000041   200013 755100                    STA     ACCESS,,AUTO

      219     8392    1      CALL MME$WGVP(%USERWSQ,%SBUF1PG,ACCESS,ERR) ALTRET(LINK_ERR2);
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:43   

   8392  2 000042   200011 630500                    EPPR0   ERR,,AUTO
         2 000043   200045 450500                    STP0    @VNO+4,,AUTO
         2 000044   200013 631500                    EPPR1   ACCESS,,AUTO
         2 000045   200044 451500                    STP1    @VNO+3,,AUTO
         2 000046   000002 237000 3                  LDAQ    2
         2 000047   200042 757100                    STAQ    @VNO+1,,AUTO
         2 000050   200042 630500                    EPPR0   @VNO+1,,AUTO
         2 000051   000022 631400 xsym               EPPR1   B_VECTNIL+18
         2 000052   000000 701000 xent               TSX1    MME$WGVP
         2 000053   000472 702000 2                  TSX2    WFVP_ERR2

      220     8393
      221     8394        /* Get SBUF2 and read the assign/merge information into it.
      222     8395           If the command processor is to parse the command then the
      223     8396           assign/merge records for #1, #2, #3 and #4 should be deleted.
      224     8397        */
      225     8398    1      IF ADDR(NAME1$) = ADDR(NIL)

   8398  2 000054   200003 236100                    LDQ     @NAME1$,,AUTO
         2 000055   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000056   000061 601000 2                  TNZ     s:8400

      226     8399    1      THEN TEMP = 0/*JZA$ASAVE entry - save*/;

   8399  2 000057   200024 450100                    STZ     TEMP,,AUTO
         2 000060   000071 710000 2                  TRA     s:8404

      227     8400    1      ELSE IF NAME1$ = ADDR(NIL)

   8400  2 000061   200003 470500                    LDP0    @NAME1$,,AUTO
         2 000062   000000 236100                    LDQ     0,,PR0
         2 000063   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000064   000070 601000 2                  TNZ     s:8402

      228     8401    1           THEN TEMP = 1/*CP CMD - delete*/;

PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:44   
   8401  2 000065   000001 235007                    LDA     1,DL
         2 000066   200024 755100                    STA     TEMP,,AUTO
         2 000067   000071 710000 2                  TRA     s:8404

      229     8402    1           ELSE TEMP = 0/*User CMD - save*/;

   8402  2 000070   200024 450100                    STZ     TEMP,,AUTO

      230     8403
      231     8404    1      CALL JLU$SAVE_AMR(TEMP)

   8404  2 000071   200024 630500                    EPPR0   TEMP,,AUTO
         2 000072   200042 450500                    STP0    @VNO+1,,AUTO
         2 000073   200042 630500                    EPPR0   @VNO+1,,AUTO
         2 000074   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000075   000000 701000 xent               TSX1    JLU$SAVE_AMR
         2 000076   000100 702000 2                  TSX2    s:8406
         2 000077   000106 710000 2                  TRA     s:8412

      232     8405    2      WHENALTRETURN DO;

      233     8406    2           ERR = B$JIT.ERR.CODE;

   8406  2 000100   000000 470400 xsym               LDP0    B$JIT$
         2 000101   000012 236100                    LDQ     10,,PR0
         2 000102   000003 772000                    QRL     3
         2 000103   037777 376007                    ANQ     16383,DL
         2 000104   200011 756100                    STQ     ERR,,AUTO

      234     8407    2           GOTO LINK_ERR1;                 /* can't get SBUF2                    */

   8407  2 000105   000460 710000 2                  TRA     CLS_ERR2

      235     8408    2           END;
      236     8409
      237     8410        /* Next, close M$LM and open star-n
      238     8411        */
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:45   
      239     8412    1      CALL JSF$CLSLM;

   8412  2 000106   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000107   000000 701000 xent               TSX1    JSF$CLSLM
         2 000110   000000 011000                    NOP     0

      240     8413    1      CALL JLU$OPNSTARN(ERR) ALTRET(LINK_ERR1);

   8413  2 000111   200011 630500                    EPPR0   ERR,,AUTO
         2 000112   200042 450500                    STP0    @VNO+1,,AUTO
         2 000113   200042 630500                    EPPR0   @VNO+1,,AUTO
         2 000114   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000115   000000 701000 xent               TSX1    JLU$OPNSTARN
         2 000116   000460 702000 2                  TSX2    CLS_ERR2

      241     8414
      242     8415        /* Build the next 'IDn' identifier
      243     8416        */
      244     8417    1      ID.N = B$JIT.LNKCNT + 1;

   8417  2 000117   000000 470400 xsym               LDP0    B$JIT$
         2 000120   000314 720100                    LXL0    204,,PR0
         2 000121   000777 360003                    ANX0    511,DU
         2 000122   000001 621010                    EAX1    1,X0
         2 000123   200022 741100                    STX1    IDN,,AUTO

      245     8418    1      ID.SYSID = B$JIT.SYSID;

   8418  2 000124   000000 720100                    LXL0    0,,PR0
         2 000125   200022 440100                    SXL0    IDN,,AUTO

      246     8419
      247     8420        /* Go write the ldlnk *N file
      248     8421        */
      249     8422    1      CALL JLS$SAVE_IMAGE(IDN,ERR,CLEANUP$) ALTRET(LINK_ERR);

   8422  2 000126   200010 236100                    LDQ     @CLEANUP$,,AUTO
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:46   
         2 000127   200044 756100                    STQ     @VNO+3,,AUTO
         2 000130   200011 631500                    EPPR1   ERR,,AUTO
         2 000131   200043 451500                    STP1    @VNO+2,,AUTO
         2 000132   200022 633500                    EPPR3   IDN,,AUTO
         2 000133   200042 453500                    STP3    @VNO+1,,AUTO
         2 000134   200042 630500                    EPPR0   @VNO+1,,AUTO
         2 000135   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 000136   000000 701000 xent               TSX1    JLS$SAVE_IMAGE
         2 000137   000427 702000 2                  TSX2    LINK_ERR

      250     8423
      251     8424        /* Close M$* And wrap up the image-writing process
      252     8425        */
      253     8426    1      CALL M$MCLOSE(J_FPT_CL_SAVE) ALTRET(CLS_ERR1);

   8426  2 000140   000001 630400 3                  EPPR0   1
         2 000141   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000142   000000 701000 xent               TSX1    M$MCLOSE
         2 000143   000144 702000 2                  TSX2    CLS_ERR1

   8418  2 000144                       CLS_ERR1     null
      254     8427    1   CLS_ERR1: ;
      255     8428
      256     8429        /* Free the special buffer page we've been using.
      257     8430        */
      258     8431    1      CALL MME$WFVP(%USERWSQ,%SBUF1PG,ERR,ERR) ALTRET(WFVP_ERR1);

   8431  2 000144   200011 630500                    EPPR0   ERR,,AUTO
         2 000145   200045 450500                    STP0    @VNO+4,,AUTO
         2 000146   200011 631500                    EPPR1   ERR,,AUTO
         2 000147   200044 451500                    STP1    @VNO+3,,AUTO
         2 000150   000002 237000 3                  LDAQ    2
         2 000151   200042 757100                    STAQ    @VNO+1,,AUTO
         2 000152   200042 630500                    EPPR0   @VNO+1,,AUTO
         2 000153   000022 631400 xsym               EPPR1   B_VECTNIL+18
         2 000154   000000 701000 xent               TSX1    MME$WFVP
         2 000155   000156 702000 2                  TSX2    WFVP_ERR1
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:47   

      259     8432    1   WFVP_ERR1: ;

   8432  2 000156                       WFVP_ERR1    null
      260     8433
      261     8434        /* Set max core back to the user defined value
      262     8435        */
      263     8436    1      B$JIT.MAXCORE = MAXCORE;

   8436  2 000156   200026 220100                    LDX0    MAXCORE,,AUTO
         2 000157   000000 470400 xsym               LDP0    B$JIT$
         2 000160   000210 740100                    STX0    136,,PR0

      264     8437    1      B$JIT.LNKCNT = B$JIT.LNKCNT +1;

   8437  2 000161   000314 236100                    LDQ     204,,PR0
         2 000162   000001 036007                    ADLQ    1,DL
         2 000163   000314 552104                    STBQ    204,'04'O,PR0

      265     8438    1      B$JIT.JUNK = (B$JIT.JUNK | %JJ_RTNXIT#);

   8438  2 000164   000315 221100                    LDX1    205,,PR0
         2 000165   000100 261003                    ORX1    64,DU
         2 000166   000315 741100                    STX1    205,,PR0

      266     8439
      267     8440
      268     8441        /* Close down any virtual arrays that were open
      269     8442        */
      270     8443    1      CALL CLSV (0);

   8443  2 000167   000004 236000 3                  LDQ     4
         2 000170   200041 756100                    STQ     J+3,,AUTO
         2 000171   001336 701000 2                  TSX1    CLSV
         2 000172   000000 011000                    NOP     0

      271     8444    1      CALL CLSV (1);
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:48   

   8444  2 000173   000005 236000 3                  LDQ     5
         2 000174   200041 756100                    STQ     J+3,,AUTO
         2 000175   001336 701000 2                  TSX1    CLSV
         2 000176   000000 011000                    NOP     0

      272     8445    1      CALL CLSV (2);

   8445  2 000177   000006 236000 3                  LDQ     6
         2 000200   200041 756100                    STQ     J+3,,AUTO
         2 000201   001336 701000 2                  TSX1    CLSV
         2 000202   000000 011000                    NOP     0

      273     8446
      274     8447        /* Close M$DRIBBLE.
      275     8448        */
      276     8449    1      CALL UMD$CLSDRIB;

   8449  2 000203   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000204   000000 701000 xent               TSX1    UMD$CLSDRIB
         2 000205   000000 011000                    NOP     0

      277     8450
      278     8451        /* Set JIT.PRIOCORE so the LINKed to ATILA will know how much
      279     8452           memory is required to return control to the user program.
      280     8453        */
      281     8454    1      B$JIT.PRIOCORE = B$JIT.CURRCORE;

   8454  2 000206   000000 470400 xsym               LDP0    B$JIT$
         2 000207   000210 720100                    LXL0    136,,PR0
         2 000210   000207 740100                    STX0    135,,PR0

      282     8455
      283     8456        /* If this call to JLL$LINK was to save the image of a time-sharing
      284     8457           user whose line has failed, return to JZA$ASAVE now.
      285     8458           If the call was to save the image for the command processor,
      286     8459           return to JSP$PMME.
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:49   
      287     8460        */
      288     8461    1      IF (B$JIT.JUNK2 & (%JJ2_ASAVE_LNK# | %JJ2_CP_LINK#) )

   8461  2 000211   000321 221100                    LDX1    209,,PR0
         2 000212   000030 361003                    ANX1    24,DU
         2 000213   000215 600000 2                  TZE     GO_TO_NEW

      289     8462    1      THEN RETURN;

   8462  2 000214   000000 702200 xent               TSX2  ! X66_ARET

   8461  2 000215                       GO_TO_NEW    null
      290     8463        %EJECT;
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:50   
      291     8464        /*************************************************************
      292     8465         *                                                           *
      293     8466         *                        GO_TO_NEW                          *
      294     8467         *                                                           *
      295     8468         *************************************************************/
      296     8469
      297     8470
      298     8471        /* Here is where the M$LDTRC logic joins up with M$LINK.
      299     8472           The existing program is rundown, potentially dangerous linkage
      300     8473           segment descriptors are reset to be harmless, and control
      301     8474           passes to the JST$GETPROG routine to actually go to the new run
      302     8475           unit the user requested.
      303     8476        */
      304     8477
      305     8478    1   GO_TO_NEW:;
      306     8479    1      B$JIT.RUNFLAGS = %RUN_MON#;

   8479  2 000215   000000 470400 xsym               LDP0    B$JIT$
         2 000216   001000 236007                    LDQ     512,DL
         2 000217   000314 552110                    STBQ    204,'10'O,PR0

      307     8480    1      IF (B$JIT.JUNK & %JJ_UDELTA#) THEN B$U.FLG.DIC='1'B;

   8480  2 000220   000315 220100                    LDX0    205,,PR0
         2 000221   200000 360003                    ANX0    65536,DU
         2 000222   000226 600000 2                  TZE     s:8487

   8480  2 000223   000000 471400 xsym               LDP1    S$CU$
         2 000224   100000 236003                    LDQ     32768,DU
         2 000225   100000 256100                    ORSQ    0,,PR1

      308     8481
      309     8482        /* If the user didn't give us a command, then the TEXT portion of the
      310     8483           name is to go into CCBUF.  Also, if this is a monitor M$LINK, the
      311     8484           command is not framed by a descriptor, but is in TEXTC format and
      312     8485           addressed by CMD1$.
      313     8486        */
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:51   
      314     8487    1      IF NOT(B$JIT.JUNK & %JJ_MONLINK#)

   8487  2 000226   000315 220100                    LDX0    205,,PR0
         2 000227   000020 360003                    ANX0    16,DU
         2 000230   000235 601000 2                  TNZ     s:8490

      315     8488    1      THEN TEXTC_CMD$ = NAME1$;            /* in case user didn't supply CMD1$   */

   8488  2 000231   200003 471500                    LDP1    @NAME1$,,AUTO
         2 000232   100000 236100                    LDQ     0,,PR1
         2 000233   200030 756100                    STQ     TEXTC_CMD$,,AUTO
         2 000234   000241 710000 2                  TRA     s:8497

      316     8489    2      ELSE DO;

      317     8490    2           TEXTC_CMD$ = CMD1$;

   8490  2 000235   200007 471500                    LDP1    @CMD1$,,AUTO
         2 000236   100000 236100                    LDQ     0,,PR1
         2 000237   200030 756100                    STQ     TEXTC_CMD$,,AUTO

      318     8491    2           GOTO TEXTC_CCBUF;

   8491  2 000240   000272 710000 2                  TRA     TEXTC_CCBUF

      319     8492    2           END;
      320     8493
      321     8494        /* If the user called M$LINK/M$LDTRC with any CMD, copy the command
      322     8495           to CCBUF.
      323     8496        */
      324     8497    1      IF CMD1$ ~= ADDR(NIL)

   8497  2 000241   200007 473500                    LDP3    @CMD1$,,AUTO
         2 000242   300000 236100                    LDQ     0,,PR3
         2 000243   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000244   000272 600000 2                  TZE     TEXTC_CCBUF

PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:52   
      325     8498    2      THEN DO;

      326     8499    2           TEMP = CMD1$->B$DESCR.BOUND +1;

   8499  2 000245   300000 474500                    LDP4    0,,PR3
         2 000246   400000 236100                    LDQ     0,,PR4
         2 000247   000020 772000                    QRL     16
         2 000250   000001 036007                    ADLQ    1,DL
         2 000251   200024 756100                    STQ     TEMP,,AUTO

      327     8500    2           B$JIT.CCARS = CMD1$->B$DESCR.BOUND +1;

   8500  2 000252   300000 474500                    LDP4    0,,PR3
         2 000253   400000 236100                    LDQ     0,,PR4
         2 000254   000020 772000                    QRL     16
         2 000255   000001 620006                    EAX0    1,QL
         2 000256   000032 740100                    STX0    26,,PR0

      328     8501    3           DO INHIBIT;

      329     8502    3                B$LS$->B$MLS.MISC2 = CMD1$->B$DESCR;

   8502  2 000257   300000 474700                    LDP4  ! 0,,PR3
         2 000260   000000 475600 xsym               LDP5  ! B$LS$
         2 000261   000100 100700                    MLR   ! fill='000'O
         2 000262   400000 000010                    ADSC9   0,,PR4                   cn=0,n=8
         2 000263   500260 000010                    ADSC9   176,,PR5                 cn=0,n=8

      330     8503    3                B$JIT.CCBUF = B$MISC2$->B$CCBUF;

   8503  2 000264   000000 474600 xsym               LDP4  ! B$MISC2$
         2 000265   200024 720300                    LXL0  ! TEMP,,AUTO
         2 000266   040100 100740                    MLR   ! fill='040'O
         2 000267   400000 000010                    ADSC9   0,,PR4                   cn=0,n=*X0
         2 000270   000033 000400                    ADSC9   27,,PR0                  cn=0,n=256

      331     8504    3                END/* do inhibit */;
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:53   

      332     8505    2           END;

   8505  2 000271   000305 710000 2                  TRA     s:8520

      333     8506
      334     8507        /* If CMD wasn't supplied, copy the name of the requested run unit
      335     8508           into CCBUF.  If this is the monitor calling M$LINK, copy the
      336     8509           command addressed by CMD1$.
      337     8510        */
      338     8511    2      ELSE DO;

   8504  2 000272                       TEXTC_CCBUF  null
      339     8512    2   TEXTC_CCBUF: ;
      340     8513    2           B$JIT.CCBUF = TEXTC_CMD$->TEXTC.TEXT;

   8513  2 000272   200030 471500                    LDP1    TEXTC_CMD$,,AUTO
         2 000273   000100 101500                    MRL     fill='000'O
         2 000274   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         2 000275   200042 000002                    ADSC9   @VNO+1,,AUTO             cn=0,n=2
         2 000276   200042 220100                    LDX0    @VNO+1,,AUTO
         2 000277   040100 100540                    MLR     fill='040'O
         2 000300   100000 200010                    ADSC9   0,,PR1                   cn=1,n=*X0
         2 000301   000033 000400                    ADSC9   27,,PR0                  cn=0,n=256

      341     8514    2           B$JIT.CCARS = TEXTC_CMD$->TEXTC.SIZ;

   8514  2 000302   000100 101500                    MRL     fill='000'O
         2 000303   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         2 000304   000032 000002                    ADSC9   26,,PR0                  cn=0,n=2

      342     8515    2           END;

      343     8516
      344     8517        /* This is a LINK/LDTRC command to be parsed by the command processor
      345     8518           if there is no run unit name. Set the flags and enter the CP.
      346     8519        */
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:54   
      347     8520    1      IF NAME1$ = ADDR(NIL)

   8520  2 000305   200003 471500                    LDP1    @NAME1$,,AUTO
         2 000306   100000 236100                    LDQ     0,,PR1
         2 000307   000001 116000 xsym               CMPQ    B_VECTNIL+1
         2 000310   000333 601000 2                  TNZ     s:8540

      348     8521    2      THEN DO;

      349     8522    2           B$JIT.CCDISP = 0;

   8522  2 000311   000000 220003                    LDX0    0,DU
         2 000312   000032 440100                    SXL0    26,,PR0

      350     8523    2           CALL JSR$RUNDOWN ALTRET(ZAP_USER);

   8523  2 000313   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000314   000000 701000 xent               TSX1    JSR$RUNDOWN
         2 000315   000506 702000 2                  TSX2    ZAP_USER

      351     8524    2           B$JIT.PRFLAGS = (B$JIT.PRFLAGS & ~%PRF_LINK#);

   8524  2 000316   000002 236000 1                  LDQ     J_ERR+2
         2 000317   000027 676000 xsym               ERQ     B_VECTNIL+23
         2 000320   000000 470400 xsym               LDP0    B$JIT$
         2 000321   000030 376100                    ANQ     24,,PR0
         2 000322   000030 756100                    STQ     24,,PR0

      352     8525    2           B$JIT.CPFLAGS1 = (B$JIT.CPFLAGS1 | (%CP_BUFFULL# | %CP_LNKPMME#));

   8525  2 000323   000003 236000 1                  LDQ     J_ERR+3
         2 000324   000004 276000 1                  ORQ     J_ERR+4
         2 000325   000143 276100                    ORQ     99,,PR0
         2 000326   000143 756100                    STQ     99,,PR0

      353     8526
      354     8527    2           CALL JSE$ACP;
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:55   

   8527  2 000327   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000330   000000 701000 xent               TSX1    JSE$ACP
         2 000331   000000 011000                    NOP     0

      355     8528    2           END;

   8528  2 000332   000375 710000 2                  TRA     s:8554

      356     8529
      357     8530        /* When the command is not parsed by the CP, B$JIT.CCDISP is set
      358     8531           to the index of the first left parenthesis in CCBUF or to
      359     8532           B$JIT.CCARS if there is no left parenthesis.
      360     8533
      361     8534           BUFFULL is reset in JIT.CPFLAGS1 - any command the terminal user
      362     8535           gave IBEX at the YC level has now been overlaid in CCBUF.
      363     8536
      364     8537           NSCAN and NSSYNTAX are set in B$JIT.  CONTINUED is reset.
      365     8538        */
      366     8539    2      ELSE DO;

      367     8540    2           CALL INDEX(TEMP,'(',SUBSTR(B$JIT.CCBUF,0,B$JIT.CCARS));

   8540  2 000333   000032 220100                    LDX0    26,,PR0
         2 000334   000000 124540                    SCM     mask='000'O
         2 000335   000033 000010                    ADSC9   27,,PR0                  cn=0,n=*X0
         2 000336   000007 000001 3                  ADSC9   7                        cn=0,n=1
         2 000337   200024 000100                    ARG     TEMP,,AUTO

      368     8541    2           B$JIT.CCDISP=TEMP;

   8541  2 000340   200024 720100                    LXL0    TEMP,,AUTO
         2 000341   000032 440100                    SXL0    26,,PR0

      369     8542
      370     8543    2           B$JIT.CPFLAGS1 = (B$JIT.CPFLAGS1 &~ %CP_BUFFULL#);

PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:56   
   8543  2 000342   000003 236000 1                  LDQ     J_ERR+3
         2 000343   000027 676000 xsym               ERQ     B_VECTNIL+23
         2 000344   000143 376100                    ANQ     99,,PR0
         2 000345   000143 756100                    STQ     99,,PR0

      371     8544    2           B$JIT.PRFLAGS.NSSYNTAX='1'B;

   8544  2 000346   002000 236003                    LDQ     1024,DU
         2 000347   000030 256100                    ORSQ    24,,PR0

      372     8545    2           B$JIT.PRFLAGS.CONTINUED='0'B;

   8545  2 000350   000010 236000 3                  LDQ     8
         2 000351   000030 356100                    ANSQ    24,,PR0

      373     8546    2           B$JIT.PRFLAGS.NOSCAN = '1'B;

   8546  2 000352   000400 236003                    LDQ     256,DU
         2 000353   000030 256100                    ORSQ    24,,PR0

      374     8547
      375     8548        /* Lastly, call JST$GETPROG to fire off the new ru, processor,etc.
      376     8549           We will never return from this call.  All errors go to ABORTM.
      377     8550        */
      378     8551    2           CALL JSR$RUNDOWN ALTRET(ZAP_USER);

   8551  2 000354   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000355   000000 701000 xent               TSX1    JSR$RUNDOWN
         2 000356   000506 702000 2                  TSX2    ZAP_USER

      379     8552    2           CALL JST$GETPROG(NAME1$,ACCT1$,PASS1$,PSID1$,ADDR(NIL));

   8552  2 000357   000001 236000 xsym               LDQ     B_VECTNIL+1
         2 000360   200042 756100                    STQ     @VNO+1,,AUTO
         2 000361   200042 630500                    EPPR0   @VNO+1,,AUTO
         2 000362   200047 450500                    STP0    @VNO+6,,AUTO
         2 000363   200006 236100                    LDQ     @PSID1$,,AUTO
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:57   
         2 000364   200046 756100                    STQ     @VNO+5,,AUTO
         2 000365   200004 237100                    LDAQ    @ACCT1$,,AUTO
         2 000366   200044 757100                    STAQ    @VNO+3,,AUTO
         2 000367   200003 236100                    LDQ     @NAME1$,,AUTO
         2 000370   200043 756100                    STQ     @VNO+2,,AUTO
         2 000371   200043 630500                    EPPR0   @VNO+2,,AUTO
         2 000372   000023 631400 xsym               EPPR1   B_VECTNIL+19
         2 000373   000000 701000 xent               TSX1    JST$GETPROG
         2 000374   000000 011000                    NOP     0

      380     8553
      381     8554    2           END/*do if not CP_CMD*/;

   8554  2 000375   000400 710000 2                  TRA     s:8579

      382     8555
      383     8556
      384     8557        %EJECT;
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:58   
      385     8558        /*************************************************************
      386     8559         *                                                           *
      387     8560         *                        JLL$LDTRC                          *
      388     8561         *                                                           *
      389     8562         *************************************************************/
      390     8563
      391     8564
      392     8565        /*F*   NAME:   JLL$LDTRC
      393     8566
      394     8567               PURPOSE: To perform that part of the load-and-transfer-
      395     8568                       control process which prepares for the initiation
      396     8569                       of a new run unit.
      397     8570
      398     8571               ENTRY:  Called from JSP$PMME if user request and no
      399     8572                       exit control, no ASL, and no Debugger.
      400     8573
      401     8574                       Called from UEP$SAVLDT after all exit control
      402     8575                       processing is complete.
      403     8576        */
      404     8577
      405     8578    1   JLL$LDTRC: ENTRY(NAME1$,ACCT1$,PASS1$,PSID1$,CMD1$) ALTRET;

   8578  2 000376   000000 700200 xent  JLL$LDTRC    TSX0  ! X66_AUTO_N
         2 000377   000050 000006                    ZERO    40,6

      406     8579    1      B$JIT.SVLDTF = %SVL_LDTRC#;

   8579  2 000400   000000 470400 xsym               LDP0    B$JIT$
         2 000401   000010 236007                    LDQ     8,DL
         2 000402   000316 552104                    STBQ    206,'04'O,PR0

      407     8580
      408     8581        /* Test for the validity of an M$LDTRC operation.
      409     8582        */
      410     8583    1      CALL JLU$VALID(ERR) ALTRET(SET_JERR);

   8583  2 000403   200011 631500                    EPPR1   ERR,,AUTO
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:59   
         2 000404   200042 451500                    STP1    @VNO+1,,AUTO
         2 000405   200042 630500                    EPPR0   @VNO+1,,AUTO
         2 000406   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000407   000000 701000 xent               TSX1    JLU$VALID
         2 000410   000500 702000 2                  TSX2    SET_JERR

      411     8584
      412     8585        /* Close user dcb's & M$LM, as we won't be coming back
      413     8586        */
      414     8587    1      CALL JSF$CLSDCBS;

   8587  2 000411   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000412   000000 701000 xent               TSX1    JSF$CLSDCBS
         2 000413   000000 011000                    NOP     0

      415     8588    1      CALL JSF$CLSLM;

   8588  2 000414   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000415   000000 701000 xent               TSX1    JSF$CLSLM
         2 000416   000000 011000                    NOP     0

      416     8589
      417     8590        /* Now, decrement rep count for all procs associated, as we wont
      418     8591           Be coming back to them again.
      419     8592        */
      420     8593    1      CALL JSU$DECRUC;

   8593  2 000417   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000420   000000 701000 xent               TSX1    JSU$DECRUC
         2 000421   000000 011000                    NOP     0

      421     8594    1      B$JIT.JUNK = (B$JIT.JUNK | %JJ_MLINKIP#);

   8594  2 000422   000000 470400 xsym               LDP0    B$JIT$
         2 000423   000315 220100                    LDX0    205,,PR0
         2 000424   000001 260003                    ORX0    1,DU
         2 000425   000315 740100                    STX0    205,,PR0
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:60   

      422     8595    1      GOTO GO_TO_NEW;                      /* Go start up the new run unit       */

   8595  2 000426   000215 710000 2                  TRA     GO_TO_NEW

   8594  2 000427                       LINK_ERR     null
      423     8596
      424     8597        %EJECT;
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:61   
      425     8598        /*************************************************************
      426     8599         *                                                           *
      427     8600         *                        LINK_ERR                           *
      428     8601         *                                                           *
      429     8602         *************************************************************/
      430     8603
      431     8604    1   LINK_ERR: ;
      432     8605    1      IF B$JIT.ERR.CODE ~= 0 THEN ERR = B$JIT.ERR.CODE;

   8605  2 000427   000000 470400 xsym               LDP0    B$JIT$
         2 000430   000012 236100                    LDQ     10,,PR0
         2 000431   377770 316007                    CANQ    131064,DL
         2 000432   000437 600000 2                  TZE     s:8607

   8605  2 000433   000012 236100                    LDQ     10,,PR0
         2 000434   000003 772000                    QRL     3
         2 000435   037777 376007                    ANQ     16383,DL
         2 000436   200011 756100                    STQ     ERR,,AUTO

      433     8606
      434     8607    1      IF (ERR >= %E$FREC) AND (ERR <= %E$GPIO)

   8607  2 000437   200011 235100                    LDA     ERR,,AUTO
         2 000440   000046 115007                    CMPA    38,DL
         2 000441   000446 602000 2                  TNC     s:8617
         2 000442   000065 115007                    CMPA    53,DL
         2 000443   000446 603000 2                  TRC     s:8617

      435     8608    1      THEN CALL SC_IOERRNF;

   8608  2 000444   000000 713400 xsym               CLIMB   SC_IOERRNF
         2 000445   000000 600000 xsid               climb   nvectors=         0

      436     8609
      437     8610        /*S*    SCREECH_CODE: JLL-S$IOERRNF
      438     8611                TYPE: SNAP
      439     8612               MESSAGE: Irrecoverable I/O error on *N or *S file.
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:62   
      440     8613        */
      441     8614
      442     8615        /* Delete this set of records that contain the error.
      443     8616        */
      444     8617    1      CALL JLU$DELSET(IDN);

   8617  2 000446   200022 630500                    EPPR0   IDN,,AUTO
         2 000447   200042 450500                    STP0    @VNO+1,,AUTO
         2 000450   200042 630500                    EPPR0   @VNO+1,,AUTO
         2 000451   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000452   000000 701000 xent               TSX1    JLU$DELSET
         2 000453   000000 011000                    NOP     0

      445     8618
      446     8619        /* Close M$*.
      447     8620        */
      448     8621    1      CALL M$MCLOSE(J_FPT_CL_SAVE) ALTRET(CLS_ERR2);

   8621  2 000454   000001 630400 3                  EPPR0   1
         2 000455   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000456   000000 701000 xent               TSX1    M$MCLOSE
         2 000457   000460 702000 2                  TSX2    CLS_ERR2

   8607  2 000460                       CLS_ERR2     null
   8607  2 000460                       LINK_ERR1    null
      449     8622    1   CLS_ERR2: ;
      450     8623
      451     8624        /* Free the special buffer page.
      452     8625        */
      453     8626    1   LINK_ERR1: ;
      454     8627    1      CALL MME$WFVP(%USERWSQ,%SBUF1PG,ACCESS,ACCESS) ALTRET(WFVP_ERR2);

   8627  2 000460   200013 630500                    EPPR0   ACCESS,,AUTO
         2 000461   200045 450500                    STP0    @VNO+4,,AUTO
         2 000462   200013 631500                    EPPR1   ACCESS,,AUTO
         2 000463   200044 451500                    STP1    @VNO+3,,AUTO
         2 000464   000002 237000 3                  LDAQ    2
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:63   
         2 000465   200042 757100                    STAQ    @VNO+1,,AUTO
         2 000466   200042 630500                    EPPR0   @VNO+1,,AUTO
         2 000467   000022 631400 xsym               EPPR1   B_VECTNIL+18
         2 000470   000000 701000 xent               TSX1    MME$WFVP
         2 000471   000472 702000 2                  TSX2    WFVP_ERR2

   8627  2 000472                       WFVP_ERR2    null
   8627  2 000472                       LINK_ERR2    null
      455     8628    1   WFVP_ERR2: ;
      456     8629
      457     8630        /* Restore the real max core value and reset MLINKIP.
      458     8631        */
      459     8632    1   LINK_ERR2: ;
      460     8633    1      B$JIT.MAXCORE = MAXCORE;

   8633  2 000472   200026 220100                    LDX0    MAXCORE,,AUTO
         2 000473   000000 470400 xsym               LDP0    B$JIT$
         2 000474   000210 740100                    STX0    136,,PR0

      461     8634    1      B$JIT.JUNK = (B$JIT.JUNK &~ %JJ_MLINKIP#);

   8634  2 000475   000315 221100                    LDX1    205,,PR0
         2 000476   777776 361003                    ANX1    -2,DU
         2 000477   000315 741100                    STX1    205,,PR0

   8634  2 000500                       SET_JERR     null
      462     8635    1   SET_JERR: ;
      463     8636    1      B$JIT.ERR = J_ERR|BINBIT(ERR,33);

   8636  2 000500   200011 236100                    LDQ     ERR,,AUTO
         2 000501   000003 736000                    QLS     3
         2 000502   000000 276000 1                  ORQ     J_ERR
         2 000503   000000 470400 xsym               LDP0    B$JIT$
         2 000504   000012 756100                    STQ     10,,PR0

      464     8637    1      ALTRETURN;

PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:64   
   8637  2 000505   000000 702200 xent               TSX2  ! X66_AALT

   8636  2 000506                       ZAP_USER     null
      465     8638
      466     8639
      467     8640        /* Delete a user whose context is too damaged to be rundown.
      468     8641        */
      469     8642    1   ZAP_USER:;
      470     8643    1      CALL JSD$ZAPUSR;                     /* Will never return                  */

   8643  2 000506   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000507   000000 701000 xent               TSX1    JSD$ZAPUSR
         2 000510   000000 011000                    NOP     0
         2 000511   000514 710000 2                  TRA     s:8691

      471     8644
      472     8645        %EJECT;
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:65   
      473     8646        /*************************************************************
      474     8647         *                                                           *
      475     8648         *                        JLL$RTN                            *
      476     8649         *                                                           *
      477     8650         *************************************************************/
      478     8651
      479     8652
      480     8653        /*F*   NAME:   JLL$RTN
      481     8654               PURPOSE: To perform the implicit return to calling run unit
      482     8655                       when the called program exits.
      483     8656               ENTRY:  Called from JSE$EXITS.
      484     8657        */
      485     8658
      486     8659        /*F*   NAME:    JLL$ASAVE_RTN
      487     8660               PURPOSE:  To restore the saved image of a suspended user.
      488     8661               ENTRY:  Called from JZA$ASAVE.
      489     8662        */
      490     8663
      491     8664
      492     8665    1   JLL$RTN: ENTRY ALTRET;

   8665  2 000512   000000 700200 xent  JLL$RTN      TSX0  ! X66_AUTO_N
         2 000513   000050 000006                    ZERO    40,6

      493     8666
      494     8667        /*  The error code returned to the LINKer is set to reflect    */
      495     8668        /*  the success or failure of the LINKed to process:           */
      496     8669        /*                                                             */
      497     8670        /*  If CP_EXIT is set in CP_FLAGS then we obviously got to the */
      498     8671        /*  LINKee and back OK.  Further, the LINKee has specified an  */
      499     8672        /*  error code and severity(!) to be returned to the LINKer.   */
      500     8673        /*  So...we just pass this code and severity as is, assuming   */
      501     8674        /*  that this form of communication has been agreed upon by    */
      502     8675        /*  the two programs.                                          */
      503     8676
      504     8677
      505     8678        /*  However, when CP_EXIT is not set, either:                     */
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:66   
      506     8679        /*                                                            */
      507     8680        /*       1) We didn't even get to the LINKee (STIP set) and   */
      508     8681        /*          we will ALTRET to the M$LINK with the error code  */
      509     8682        /*          and severity as specified by STEP.                */
      510     8683        /*                                                            */
      511     8684        /*       2) The LINKee has aborted (or issued an M$ERR or     */
      512     8685        /*          M$XXX without specifing an error code) and we     */
      513     8686        /*          pass this code to the LINKer with a severity of   */
      514     8687        /*          zero.  Severity zero indicates to the LINKer that */
      515     8688        /*          the error was the LINKee's and not a failure to   */
      516     8689        /*          Fetch the run unit.                               */
      517     8690
      518     8691    1      IF NOT(B$JIT.CPFLAGS1.EXIT#)

   8691  2 000514   000000 470400 xsym               LDP0    B$JIT$
         2 000515   000143 236100                    LDQ     99,,PR0
         2 000516   020000 316007                    CANQ    8192,DL
         2 000517   000526 601000 2                  TNZ     s:8697

      519     8692    2      THEN DO;

      520     8693    2           IF NOT(B$U.FLG & %U_STIP)

   8693  2 000520   000000 471400 xsym               LDP1    S$CU$
         2 000521   100000 236100                    LDQ     0,,PR1
         2 000522   000005 376000 1                  ANQ     J_ERR+5
         2 000523   000526 601000 2                  TNZ     s:8697

      521     8694    2           THEN B$JIT.USRERR.SEV = 0;

   8694  2 000524   000011 236000 3                  LDQ     9
         2 000525   000144 356100                    ANSQ    100,,PR0

      522     8695    2           END;

      523     8696
      524     8697    1      RTNERR = B$JIT.USRERR;
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:67   

   8697  2 000526   000144 236100                    LDQ     100,,PR0
         2 000527   200012 756100                    STQ     RTNERR,,AUTO

      525     8698
      526     8699        /* Test for the validity of an M$LINK return operation.
      527     8700        */
      528     8701    1      CALL JLU$VALID(ERR) ALTRET(SET_JERR2);

   8701  2 000530   200011 631500                    EPPR1   ERR,,AUTO
         2 000531   200042 451500                    STP1    @VNO+1,,AUTO
         2 000532   200042 630500                    EPPR0   @VNO+1,,AUTO
         2 000533   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000534   000000 701000 xent               TSX1    JLU$VALID
         2 000535   001250 702000 2                  TSX2    SET_JERR2

      529     8702
      530     8703        /* Close M$LM and the Dribble DCB, then run down the program
      531     8704           that is returning.
      532     8705        */
      533     8706    1      B$JIT.JUNK = (B$JIT.JUNK | %JJ_LNKRETIP#)/* set here for RUNDOWN */;

   8706  2 000536   000000 470400 xsym               LDP0    B$JIT$
         2 000537   000315 220100                    LDX0    205,,PR0
         2 000540   000002 260003                    ORX0    2,DU
         2 000541   000315 740100                    STX0    205,,PR0

      534     8707    1      CALL JSF$CLSLM;

   8707  2 000542   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000543   000000 701000 xent               TSX1    JSF$CLSLM
         2 000544   000000 011000                    NOP     0

      535     8708    1      XCONF = B$JIT.XCONF;

   8708  2 000545   000000 470400 xsym               LDP0    B$JIT$
         2 000546   000316 236100                    LDQ     206,,PR0
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:68   
         2 000547   777000 376003                    ANQ     -512,DU
         2 000550   200031 756100                    STQ     XCONF,,AUTO

      536     8709    1      CALL JSR$RUNDOWN ALTRET(ZAP_USER);

   8709  2 000551   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000552   000000 701000 xent               TSX1    JSR$RUNDOWN
         2 000553   000506 702000 2                  TSX2    ZAP_USER
         2 000554   000557 710000 2                  TRA     s:8716

      537     8710
      538     8711        /* Remember the users max core value and set max core high enough
      539     8712           to prevent the inability of restoring the saved image because
      540     8713           of acquired common data pages.
      541     8714        */
      542     8715    1   JLL$ASAVE_RTN: ENTRY ALTRET;

   8715  2 000555   000000 700200 xent  JLL$ASAVE_R* TSX0  ! X66_AUTO_N
         2 000556   000050 000006                    ZERO    40,6

      543     8716    1      MAXCORE=B$JIT.MAXCORE;

   8716  2 000557   000000 470400 xsym               LDP0    B$JIT$
         2 000560   000210 220100                    LDX0    136,,PR0
         2 000561   200026 740100                    STX0    MAXCORE,,AUTO

      544     8717    1      B$JIT.MAXCORE=1024;

   8717  2 000562   002000 221003                    LDX1    1024,DU
         2 000563   000210 741100                    STX1    136,,PR0

      545     8718
      546     8719    1      B$JIT.USRRNST='000'O;

   8719  2 000564   000000 236003                    LDQ     0,DU
         2 000565   000145 552110                    STBQ    101,'10'O,PR0

PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:69   
      547     8720    1      B$JIT.USRERR='0'B;

   8720  2 000566   000144 450100                    STZ     100,,PR0

      548     8721
      549     8722        /* Set "Link-return-in-progress" in the JIT.JUNK flags.
      550     8723        */
      551     8724    1      B$JIT.JUNK = (B$JIT.JUNK | %JJ_LNKRETIP#)/* set here for ASAVE_RTN */;

   8724  2 000567   000315 222100                    LDX2    205,,PR0
         2 000570   000002 262003                    ORX2    2,DU
         2 000571   000315 742100                    STX2    205,,PR0

      552     8725
      553     8726        /* Construct the 'IDN' identifier which should belong to the last
      554     8727           Record set in star-n.
      555     8728        */
      556     8729    1      ID.N = B$JIT.LNKCNT;

   8729  2 000572   000314 723100                    LXL3    204,,PR0
         2 000573   000777 363003                    ANX3    511,DU
         2 000574   200022 743100                    STX3    IDN,,AUTO

      557     8730    1      ID.SYSID = B$JIT.SYSID;

   8730  2 000575   000000 724100                    LXL4    0,,PR0
         2 000576   200022 444100                    SXL4    IDN,,AUTO

      558     8731
      559     8732        /* Due to compiler restrictions, we must set DCB# in FPT_CLOSE here.
      560     8733        */
      561     8734    1      J_FPT_CL_SAVE.V.DCB# = %M$STAR#;

   8734  2 000577   000001 225003                    LDX5    1,DU
         2 000600   000032 745000 xsym               STX5    J_FPT_CL_SAVE+26

      562     8735
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:70   
      563     8736        /* Open star-n and restore the last saved image from *N.
      564     8737        */
      565     8738    1      CALL JLU$OPNSTARN(ERR) ALTRET(RTN_ERR2);

   8738  2 000601   200011 631500                    EPPR1   ERR,,AUTO
         2 000602   200042 451500                    STP1    @VNO+1,,AUTO
         2 000603   200042 630500                    EPPR0   @VNO+1,,AUTO
         2 000604   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000605   000000 701000 xent               TSX1    JLU$OPNSTARN
         2 000606   001232 702000 2                  TSX2    RRET3

      566     8739
      567     8740    1      CLEANUP$$ = ENTADDR(NIL);

   8740  2 000607   000002 236000 xsym               LDQ     B_VECTNIL+2
         2 000610   200027 756100                    STQ     CLEANUP$$,,AUTO

      568     8741    1      CALL JLS$GET_IMAGE(IDN,ERR,CLEANUP$$) ALTRET(RTN_ERR);

   8741  2 000611   200027 630500                    EPPR0   CLEANUP$$,,AUTO
         2 000612   200044 450500                    STP0    @VNO+3,,AUTO
         2 000613   200011 631500                    EPPR1   ERR,,AUTO
         2 000614   200043 451500                    STP1    @VNO+2,,AUTO
         2 000615   200022 633500                    EPPR3   IDN,,AUTO
         2 000616   200042 453500                    STP3    @VNO+1,,AUTO
         2 000617   200042 630500                    EPPR0   @VNO+1,,AUTO
         2 000620   000021 631400 xsym               EPPR1   B_VECTNIL+17
         2 000621   000000 701000 xent               TSX1    JLS$GET_IMAGE
         2 000622   001201 702000 2                  TSX2    RTN_ERR

      569     8742
      570     8743        /* Open up any virtual arrays that were open.
      571     8744        */
      572     8745    1      CALL OPNV (0);

   8745  2 000623   000004 236000 3                  LDQ     4
         2 000624   200041 756100                    STQ     J+3,,AUTO
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:71   
         2 000625   001305 701000 2                  TSX1    OPNV
         2 000626   000000 011000                    NOP     0

      573     8746    1      CALL OPNV (1);

   8746  2 000627   000005 236000 3                  LDQ     5
         2 000630   200041 756100                    STQ     J+3,,AUTO
         2 000631   001305 701000 2                  TSX1    OPNV
         2 000632   000000 011000                    NOP     0

      574     8747    1      CALL OPNV (2);

   8747  2 000633   000006 236000 3                  LDQ     6
         2 000634   200041 756100                    STQ     J+3,,AUTO
         2 000635   001305 701000 2                  TSX1    OPNV
         2 000636   000000 011000                    NOP     0

      575     8748
      576     8749        /* Open M$LM back up to the original run unit, unless this is GHOST1.
      577     8750        */
      578     8751    1      RNST = '000'O;

   8751  2 000637   200032 450100                    STZ     RNST,,AUTO

      579     8752    1      IF S_CUN ~= 1

   8752  2 000640   000000 235000 xsym               LDA     S_CUN
         2 000641   000001 115007                    CMPA    1,DL
         2 000642   000664 600000 2                  TZE     s:8769

      580     8753    2      THEN DO;

      581     8754    2           CALL JSF$OPENLM(ERR)

   8754  2 000643   200011 630500                    EPPR0   ERR,,AUTO
         2 000644   200042 450500                    STP0    @VNO+1,,AUTO
         2 000645   200042 630500                    EPPR0   @VNO+1,,AUTO
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:72   
         2 000646   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000647   000000 701000 xent               TSX1    JSF$OPENLM
         2 000650   000652 702000 2                  TSX2    BAD_M$LM
         2 000651   000660 710000 2                  TRA     s:8760

      582     8755    3           WHENALTRETURN DO;

   8741  2 000652                       BAD_M$LM     null
      583     8756    3   BAD_M$LM:    ;
      584     8757    3                RTNERR = J_ERR|BINBIT(ERR,33);

   8757  2 000652   200011 236100                    LDQ     ERR,,AUTO
         2 000653   000003 736000                    QLS     3
         2 000654   000000 276000 1                  ORQ     J_ERR
         2 000655   200012 756100                    STQ     RTNERR,,AUTO

      585     8758    3                RNST =  %RS_ABRT#;

   8758  2 000656   010000 236003                    LDQ     4096,DU
         2 000657   200032 756100                    STQ     RNST,,AUTO

      586     8759    3                END;

      587     8760    2           CALL FMF$TRUNCM (0);

   8760  2 000660   000004 630400 3                  EPPR0   4
         2 000661   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000662   000000 701000 xent               TSX1    FMF$TRUNCM
         2 000663   000000 011000                    NOP     0

      588     8761    2           END/*do if not SLUG*/;

      589     8762
      590     8763        /*E*   ERROR: JLL-E$NOFILE-E
      591     8764               MESSAGE: Can't continue from M$LINK.  Your linking load module disappeared.
      592     8765        */
      593     8766
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:73   
      594     8767        /* Restore the M$DO assignment.
      595     8768        */
      596     8769    1      B$JIT.DCB$ = B$M$DO$;

   8769  2 000664   000000 236000 xsym               LDQ     B$M$DO$
         2 000665   000000 470400 xsym               LDP0    B$JIT$
         2 000666   000232 756100                    STQ     154,,PR0

      597     8770    1      CALL FMM$MRGAMR;

   8770  2 000667   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000670   000000 701000 xent               TSX1    FMM$MRGAMR
         2 000671   000000 011000                    NOP     0

      598     8771
      599     8772        /* Re-establish suspended FPRG connections if possible.
      600     8773        */
      601     8774    1      CALL JLU$FPRG_GET;

   8774  2 000672   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000673   000000 701000 xent               TSX1    JLU$FPRG_GET
         2 000674   000000 011000                    NOP     0

      602     8775
      603     8776        /* Decrement the current link count and restore the original JIT.ERR
      604     8777           and the real max core value.
      605     8778        */
      606     8779    1      B$JIT.LNKCNT = B$JIT.LNKCNT -1;

   8779  2 000675   000000 470400 xsym               LDP0    B$JIT$
         2 000676   000314 236100                    LDQ     204,,PR0
         2 000677   000777 036007                    ADLQ    511,DL
         2 000700   000314 552104                    STBQ    204,'04'O,PR0

      607     8780    1      B$JIT.ERR = RTNERR;

   8780  2 000701   200012 236100                    LDQ     RTNERR,,AUTO
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:74   
         2 000702   000012 756100                    STQ     10,,PR0

      608     8781    1      B$JIT.MAXCORE = MAXCORE;

   8781  2 000703   200026 220100                    LDX0    MAXCORE,,AUTO
         2 000704   000210 740100                    STX0    136,,PR0

      609     8782
      610     8783        /* Finally, reg to associate any processors we might need
      611     8784           Note that data & roseg init flags are not set.
      612     8785        */
      613     8786    1      IF B$U.DB ~= 0

   8786  2 000705   000000 471400 xsym               LDP1    S$CU$
         2 000706   100006 236100                    LDQ     6,,PR1
         2 000707   777000 316007                    CANQ    -512,DL
         2 000710   000713 600000 2                  TZE     s:8790

      614     8787    2      THEN DO;

      615     8788    2           B$U.FLG.DELA = '1'B;

   8788  2 000711   040000 236003                    LDQ     16384,DU
         2 000712   100000 256100                    ORSQ    0,,PR1

      616     8789    2           END;

      617     8790    1      CALL SSR$REG(%SS_AP);

   8790  2 000713   000013 630400 3                  EPPR0   11
         2 000714   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000715   000000 701000 xent               TSX1    SSR$REG
         2 000716   000000 011000                    NOP     0

      618     8791
      619     8792    1      B$JIT.JUNK = B$JIT.JUNK &~( %JJ_LNKRETIP# | %JJ_MLINKIP#);

PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:75   
   8792  2 000717   000000 470400 xsym               LDP0    B$JIT$
         2 000720   000315 220100                    LDX0    205,,PR0
         2 000721   777774 360003                    ANX0    -4,DU
         2 000722   000315 740100                    STX0    205,,PR0

      620     8793    1      B$U.FLG.STIP='0'B;

   8793  2 000723   000000 471400 xsym               LDP1    S$CU$
         2 000724   000014 236000 3                  LDQ     12
         2 000725   100000 356100                    ANSQ    0,,PR1

      621     8794    1      B$JIT.SVLDTF=(B$JIT.SVLDTF &~ %SVL_LINK#);

   8794  2 000726   000316 236100                    LDQ     206,,PR0
         2 000727   000033 736000                    QLS     27
         2 000730   757000 376003                    ANQ     -8704,DU
         2 000731   000033 772000                    QRL     27
         2 000732   000316 552104                    STBQ    206,'04'O,PR0

      622     8795    1      B$JIT.DCBNO=0;

   8795  2 000733   000000 236003                    LDQ     0,DU
         2 000734   000022 552104                    STBQ    18,'04'O,PR0

      623     8796
      624     8797        /* If this call to JLL$LINK was to restore the image of a time-sharing
      625     8798           user whose line has failed, return to JZA$ASAVE now.
      626     8799        */
      627     8800    1      IF (B$JIT.JUNK2 & %JJ2_ASAVE_LNK#)

   8800  2 000735   000321 220100                    LDX0    209,,PR0
         2 000736   000020 360003                    ANX0    16,DU
         2 000737   000746 600000 2                  TZE     s:8810

      628     8801    2      THEN DO;

      629     8802    2           B$JIT.JUNK2 = (B$JIT.JUNK2 &~ %JJ2_ASAVE_LNK#);
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:76   

   8802  2 000740   000321 220100                    LDX0    209,,PR0
         2 000741   777757 360003                    ANX0    -17,DU
         2 000742   000321 740100                    STX0    209,,PR0

      630     8803    2           CALL REFRESH_DESCR;

   8803  2 000743   001460 701000 2                  TSX1    REFRESH_DESCR
         2 000744   000000 011000                    NOP     0

      631     8804    2           RETURN;

   8804  2 000745   000000 702200 xent               TSX2  ! X66_ARET

      632     8805    2           END;
      633     8806
      634     8807        /* If the program was saved via the command processor, flush
      635     8808           the command processor off the Safe Store Stack now.
      636     8809        */
      637     8810    1      IF (B$JIT.JUNK2 & %JJ2_CP_LINK#)

   8810  2 000746   000321 220100                    LDX0    209,,PR0
         2 000747   000010 360003                    ANX0    8,DU
         2 000750   000762 600000 2                  TZE     s:8817

      638     8811    2      THEN DO;

      639     8812    2           B$JIT.JUNK2 = (B$JIT.JUNK2 &~ %JJ2_CP_LINK#);

   8812  2 000751   000321 220100                    LDX0    209,,PR0
         2 000752   777767 360003                    ANX0    -9,DU
         2 000753   000321 740100                    STX0    209,,PR0

      640     8813    2           CALL UDN$MAGIC;

   8813  2 000754   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000755   000000 701000 xent               TSX1    UDN$MAGIC
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:77   
         2 000756   000000 011000                    NOP     0

      641     8814    2           CALL JSS$RUNDSPC;

   8814  2 000757   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 000760   000000 701000 xent               TSX1    JSS$RUNDSPC
         2 000761   000000 011000                    NOP     0

      642     8815    2           END;

      643     8816
      644     8817    1      CALL REFRESH_DESCR;

   8817  2 000762   001460 701000 2                  TSX1    REFRESH_DESCR
         2 000763   000000 011000                    NOP     0

      645     8818        /* If a program with PROCACC has just been restored write a PSTART record to *S.
      646     8819        */
      647     8820    1      IF (B$JIT.CPFLAGS1 & %CP_PROCACCT#)

   8820  2 000764   000000 470400 xsym               LDP0    B$JIT$
         2 000765   000143 236100                    LDQ     99,,PR0
         2 000766   000006 376000 1                  ANQ     J_ERR+6
         2 000767   001000 600000 2                  TZE     s:8826

      648     8821    2      THEN DO;

      649     8822    2           ACCT_TYP = %PSTART#;

   8822  2 000770   001000 236003                    LDQ     512,DU
         2 000771   200023 756100                    STQ     ACCT_TYP,,AUTO

      650     8823    2           CALL JSU$WSTAR(ACCT_TYP);

   8823  2 000772   200023 631500                    EPPR1   ACCT_TYP,,AUTO
         2 000773   200042 451500                    STP1    @VNO+1,,AUTO
         2 000774   200042 630500                    EPPR0   @VNO+1,,AUTO
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:78   
         2 000775   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 000776   000000 701000 xent               TSX1    JSU$WSTAR
         2 000777   000000 011000                    NOP     0

      651     8824    2           END;

      652     8825
      653     8826    1      B$JIT.RNST = ( (B$JIT.FRS & %RS_XCON#) | RNST);

   8826  2 001000   000000 470400 xsym               LDP0    B$JIT$
         2 001001   000314 236100                    LDQ     204,,PR0
         2 001002   000011 736000                    QLS     9
         2 001003   777000 376003                    ANQ     -512,DU
         2 001004   760000 376003                    ANQ     -8192,DU
         2 001005   200042 756100                    STQ     @VNO+1,,AUTO
         2 001006   200032 236100                    LDQ     RNST,,AUTO
         2 001007   777000 376003                    ANQ     -512,DU
         2 001010   200043 756100                    STQ     @VNO+2,,AUTO
         2 001011   200042 236100                    LDQ     @VNO+1,,AUTO
         2 001012   200043 276100                    ORQ     @VNO+2,,AUTO
         2 001013   000314 552140                    STBQ    204,'40'O,PR0

      654     8827    1      IF (XCONF & %XC_QUIT#) THEN CALL JSA$CPQUIT;

   8827  2 001014   200031 236100                    LDQ     XCONF,,AUTO
         2 001015   777000 376003                    ANQ     -512,DU
         2 001016   001000 376003                    ANQ     512,DU
         2 001017   001023 600000 2                  TZE     s:8832

   8827  2 001020   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001021   000000 701000 xent               TSX1    JSA$CPQUIT
         2 001022   000000 011000                    NOP     0

      655     8828
      656     8829        /*  Remember the JJ_ASYNCLINK flag so we will know how to return to
      657     8830            the user, then reset the flag.
      658     8831        */
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:79   
      659     8832    1      IF (B$JIT.JUNK & %JJ_ASYNCLINK#)

   8832  2 001023   000000 470400 xsym               LDP0    B$JIT$
         2 001024   000315 220100                    LDX0    205,,PR0
         2 001025   000004 360003                    ANX0    4,DU
         2 001026   001035 600000 2                  TZE     s:8837

      660     8833    2      THEN DO;

      661     8834    2           TEMP = 1;

   8834  2 001027   000001 235007                    LDA     1,DL
         2 001030   200024 755100                    STA     TEMP,,AUTO

      662     8835    2           B$JIT.JUNK = (B$JIT.JUNK &~ %JJ_ASYNCLINK#);

   8835  2 001031   000315 220100                    LDX0    205,,PR0
         2 001032   777773 360003                    ANX0    -5,DU
         2 001033   000315 740100                    STX0    205,,PR0

      663     8836    2           END;

   8836  2 001034   001036 710000 2                  TRA     s:8844

      664     8837    1      ELSE TEMP = 0;

   8837  2 001035   200024 450100                    STZ     TEMP,,AUTO

      665     8838
      666     8839
      667     8840        /* If restoring a program that was parked for a monitor M$LINK,
      668     8841           call the clean-up routine now.
      669     8842        */
      670     8843
      671     8844    1      IF (B$JIT.JUNK & %JJ_MONLINK#)

   8844  2 001036   000315 220100                    LDX0    205,,PR0
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:80   
         2 001037   000020 360003                    ANX0    16,DU
         2 001040   001062 600000 2                  TZE     s:8855

      672     8845    2      THEN DO;

      673     8846    2           TEMP2 = 1;

   8846  2 001041   000001 235007                    LDA     1,DL
         2 001042   200025 755100                    STA     TEMP2,,AUTO

      674     8847    2           B$JIT.JUNK = (B$JIT.JUNK &~ %JJ_MONLINK#);

   8847  2 001043   000315 220100                    LDX0    205,,PR0
         2 001044   777757 360003                    ANX0    -17,DU
         2 001045   000315 740100                    STX0    205,,PR0

      675     8848
      676     8849    2           IF CLEANUP$$ ~= ENTADDR(NIL)

   8849  2 001046   200027 236100                    LDQ     CLEANUP$$,,AUTO
         2 001047   000002 116000 xsym               CMPQ    B_VECTNIL+2
         2 001050   001063 600000 2                  TZE     s:8860

      677     8850    2           THEN CALL CLEANUP$$

   8850  2 001051   200027 221100                    LDX1    CLEANUP$$,,AUTO
         2 001052   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001053   000000 701011                    TSX1    0,X1
         2 001054   001056 702000 2                  TSX2    s:8852
         2 001055   001061 710000 2                  TRA     s:8854

      678     8851    3                WHENALTRETURN DO;

      679     8852    3                     CALL JSE$ABORTX;

   8852  2 001056   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001057   000000 701000 xent               TSX1    JSE$ABORTX
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:81   
         2 001060   000000 011000                    NOP     0

      680     8853    3                     END;

      681     8854    2           END;

   8854  2 001061   001063 710000 2                  TRA     s:8860

      682     8855    1      ELSE TEMP2 = 0;

   8855  2 001062   200025 450100                    STZ     TEMP2,,AUTO

      683     8856
      684     8857        /* Check against the real max core value and abort the user if common
      685     8858           data pages have caused him to exceed his limit.
      686     8859        */
      687     8860    1      IF (B$JIT.CURRCORE > B$JIT.MAXCORE AND (NOT B$JIT.PRIV.ACTIVE&%PR_MAXMEM#)) OR (
              8860               B$JIT.JUNK2 & %JJ2_MEM_ERR#)

   8860  2 001063   000000 470400 xsym               LDP0    B$JIT$
         2 001064   000210 720100                    LXL0    136,,PR0
         2 001065   000210 100100                    CMPX0   136,,PR0
         2 001066   001073 602000 2                  TNC     s:8860+8
         2 001067   001073 600000 2                  TZE     s:8860+8
         2 001070   000013 236100                    LDQ     11,,PR0
         2 001071   000006 376000 xsym               ANQ     B_VECTNIL+6
         2 001072   001076 600000 2                  TZE     s:8862
         2 001073   000321 221100                    LDX1    209,,PR0
         2 001074   000100 361003                    ANX1    64,DU
         2 001075   001117 600000 2                  TZE     s:8878

      688     8861    2      THEN DO;

      689     8862    2           B$JIT.JUNK2 = (B$JIT.JUNK2 &~ %JJ2_MEM_ERR#);

   8862  2 001076   000321 221100                    LDX1    209,,PR0
         2 001077   777677 361003                    ANX1    -65,DU
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:82   
         2 001100   000321 741100                    STX1    209,,PR0

      690     8863    2           B$JIT.RNST = (B$JIT.RNST | %RS_LIMX#);

   8863  2 001101   000314 236100                    LDQ     204,,PR0
         2 001102   777000 376003                    ANQ     -512,DU
         2 001103   100000 276003                    ORQ     32768,DU
         2 001104   000314 552140                    STBQ    204,'40'O,PR0

      691     8864    2           B$JIT.XLIMFLG = (B$JIT.XLIMFLG | %XL_MEM#);

   8864  2 001105   000316 236100                    LDQ     206,,PR0
         2 001106   000022 736000                    QLS     18
         2 001107   777000 376003                    ANQ     -512,DU
         2 001110   200000 276003                    ORQ     65536,DU
         2 001111   000022 772000                    QRL     18
         2 001112   000316 552110                    STBQ    206,'10'O,PR0

      692     8865    2           B$JIT.ERR = J_ERR|BINBIT(%E$MEMLIMIT,33);

   8865  2 001113   001135 236007                    LDQ     605,DL
         2 001114   000003 736000                    QLS     3
         2 001115   000000 276000 1                  ORQ     J_ERR
         2 001116   000012 756100                    STQ     10,,PR0

      693     8866    2           END;

      694     8867        /*E*   ERROR: JLL-E$MEMLIMIT-E
      695     8868          MESSAGE: User or installation memory limit exceeded while restoring M$LINK image.
      696     8869               DESCRIPTION:  This error results in a class 2 exit control condition.
      697     8870                             %RS_LIMX# will be set in B$JIT.RNST and
      698     8871                             %XL_MEM# will be set in B$JIT.XLIMFLG.
      699     8872        */
      700     8873
      701     8874
      702     8875        /* If we have a Class 2 or 3 exit condition in progress its now time
      703     8876           to give XCON to the linking program.
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:83   
      704     8877        */
      705     8878    1      IF (B$JIT.RNST & %RS_PMME#)

   8878  2 001117   000314 236100                    LDQ     204,,PR0
         2 001120   777000 376003                    ANQ     -512,DU
         2 001121   774000 376003                    ANQ     -2048,DU
         2 001122   001133 600000 2                  TZE     s:8889

      706     8879    2      THEN DO;

      707     8880    2           CALL FIX_IC;

   8880  2 001123   001374 701000 2                  TSX1    FIX_IC
         2 001124   000000 011000                    NOP     0

      708     8881    2           B$JIT.CPFLAGS1.EXIT# = '0'B;

   8881  2 001125   000000 470400 xsym               LDP0    B$JIT$
         2 001126   000015 236000 3                  LDQ     13
         2 001127   000143 356100                    ANSQ    99,,PR0

      709     8882    2           CALL JSE$ABORTX;

   8882  2 001130   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001131   000000 701000 xent               TSX1    JSE$ABORTX
         2 001132   000000 011000                    NOP     0

      710     8883    2           END;

      711     8884
      712     8885        /* If restoring a program that was parked for a monitor M$LINK,
      713     8886           RET to the user if linked from quantum end; return to the user via
      714     8887           PMMEXIT if linked for monitor service processing.
      715     8888        */
      716     8889    1      CALL UDN$MAGIC;

   8889  2 001133   000002 631400 xsym               EPPR1   B_VECTNIL+2
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:84   
         2 001134   000000 701000 xent               TSX1    UDN$MAGIC
         2 001135   000000 011000                    NOP     0

      717     8890    1      IF TEMP ~= 0

   8890  2 001136   200024 235100                    LDA     TEMP,,AUTO
         2 001137   001143 600000 2                  TZE     s:8893

      718     8891    1      THEN CALL UDB$AUTO;

   8891  2 001140   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001141   000000 701000 xent               TSX1    UDB$AUTO
         2 001142   000000 011000                    NOP     0

      719     8892
      720     8893    1      IF TEMP2 ~= 0

   8893  2 001143   200025 235100                    LDA     TEMP2,,AUTO
         2 001144   001150 600000 2                  TZE     s:8899

      721     8894    1      THEN CALL UDB$PMMEXIT2;

   8894  2 001145   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001146   000000 701000 xent               TSX1    UDB$PMMEXIT2
         2 001147   000000 011000                    NOP     0

      722     8895
      723     8896        /* If we're returning to someone with delta associated, then
      724     8897           enter delta rather than resume his program.
      725     8898        */
      726     8899    1      IF NOT(B$JIT.JUNK & %JJ_UDELTA#)

   8899  2 001150   000000 470400 xsym               LDP0    B$JIT$
         2 001151   000315 220100                    LDX0    205,,PR0
         2 001152   200000 360003                    ANX0    65536,DU
         2 001153   001160 601000 2                  TNZ     s:8903

PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:85   
      727     8900    1      THEN CALL UDB$PMMEXIT2;

   8900  2 001154   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001155   000000 701000 xent               TSX1    UDB$PMMEXIT2
         2 001156   000000 011000                    NOP     0
         2 001157   001201 710000 2                  TRA     RTN_ERR

      728     8901
      729     8902    2      ELSE DO;

      730     8903    2           CALL FIX_IC

   8903  2 001160   001374 701000 2                  TSX1    FIX_IC
         2 001161   001163 702000 2                  TSX2    s:8905
         2 001162   001166 710000 2                  TRA     s:8907

      731     8904    3           WHENALTRETURN DO;

      732     8905    3                CALL UDB$PMMEXIT2;         /*to enter delta with ECC_PMME#*/

   8905  2 001163   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001164   000000 701000 xent               TSX1    UDB$PMMEXIT2
         2 001165   000000 011000                    NOP     0

      733     8906    3                END;

      734     8907    2           ECC = %ECC_LRTN#;

   8907  2 001166   000135 235007                    LDA     93,DL
         2 001167   200014 755100                    STA     ECC,,AUTO

      735     8908    2           ECP.ECCS = 0;

   8908  2 001170   200015 450100                    STZ     ECP,,AUTO

      736     8909    2           CALL SSU$DELTAGO (ECC,ECP);

PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:86   
   8909  2 001171   200015 630500                    EPPR0   ECP,,AUTO
         2 001172   200043 450500                    STP0    @VNO+2,,AUTO
         2 001173   200014 631500                    EPPR1   ECC,,AUTO
         2 001174   200042 451500                    STP1    @VNO+1,,AUTO
         2 001175   200042 630500                    EPPR0   @VNO+1,,AUTO
         2 001176   000020 631400 xsym               EPPR1   B_VECTNIL+16
         2 001177   000000 701000 xent               TSX1    SSU$DELTAGO
         2 001200   000000 011000                    NOP     0

      737     8910    2           END;

   8899  2 001201                       RTN_ERR      null
      738     8911
      739     8912        %EJECT;
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:87   
      740     8913        /*************************************************************
      741     8914         *                                                           *
      742     8915         *                        RTN_ERR                            *
      743     8916         *                                                           *
      744     8917         *************************************************************/
      745     8918
      746     8919        /* Delete any records in the current set, and rundown the
      747     8920           user properly before aborting him.
      748     8921        */
      749     8922
      750     8923    1   RTN_ERR: ;
      751     8924    1      IF B$JIT.ERR.CODE ~= 0 THEN ERR = B$JIT.ERR.CODE;

   8924  2 001201   000000 470400 xsym               LDP0    B$JIT$
         2 001202   000012 236100                    LDQ     10,,PR0
         2 001203   377770 316007                    CANQ    131064,DL
         2 001204   001211 600000 2                  TZE     s:8925

   8924  2 001205   000012 236100                    LDQ     10,,PR0
         2 001206   000003 772000                    QRL     3
         2 001207   037777 376007                    ANQ     16383,DL
         2 001210   200011 756100                    STQ     ERR,,AUTO

      752     8925    1      IF (ERR >= %E$FREC) AND (ERR <= %E$GPIO)

   8925  2 001211   200011 235100                    LDA     ERR,,AUTO
         2 001212   000046 115007                    CMPA    38,DL
         2 001213   001220 602000 2                  TNC     s:8928
         2 001214   000065 115007                    CMPA    53,DL
         2 001215   001220 603000 2                  TRC     s:8928

      753     8926    1      THEN CALL SC_IOERRNF;

   8926  2 001216   000000 713400 xsym               CLIMB   SC_IOERRNF
         2 001217   000000 600000 xsid               climb   nvectors=         0

      754     8927
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:88   
      755     8928    1      CALL JLU$DELSET(IDN);

   8928  2 001220   200022 630500                    EPPR0   IDN,,AUTO
         2 001221   200042 450500                    STP0    @VNO+1,,AUTO
         2 001222   200042 630500                    EPPR0   @VNO+1,,AUTO
         2 001223   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 001224   000000 701000 xent               TSX1    JLU$DELSET
         2 001225   000000 011000                    NOP     0

      756     8929    1      CALL M$MCLOSE(J_FPT_CL_SAVE) ALTRET(RRET3);

   8929  2 001226   000001 630400 3                  EPPR0   1
         2 001227   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 001230   000000 701000 xent               TSX1    M$MCLOSE
         2 001231   001232 702000 2                  TSX2    RRET3

   8925  2 001232                       RRET3        null
   8925  2 001232                       RTN_ERR2     null
      757     8930    1   RRET3: ;
      758     8931
      759     8932        /* Restore the real max core value and reset JIT.JUNK.
      760     8933        */
      761     8934    1   RTN_ERR2: ;
      762     8935    1      B$JIT.MAXCORE=MAXCORE;

   8935  2 001232   200026 220100                    LDX0    MAXCORE,,AUTO
         2 001233   000000 470400 xsym               LDP0    B$JIT$
         2 001234   000210 740100                    STX0    136,,PR0

      763     8936    1      B$JIT.JUNK = B$JIT.JUNK &~( %JJ_LNKRETIP# | %JJ_RTNXIT# | %JJ_MLINKIP#);

   8936  2 001235   000315 221100                    LDX1    205,,PR0
         2 001236   777674 361003                    ANX1    -68,DU
         2 001237   000315 741100                    STX1    205,,PR0

      764     8937    1      IF B$JIT.LNKCNT ~= 0

PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:89   
   8937  2 001240   000314 236100                    LDQ     204,,PR0
         2 001241   000777 316007                    CANQ    511,DL
         2 001242   001245 600000 2                  TZE     s:8939

      765     8938    1      THEN B$JIT.LNKCNT = B$JIT.LNKCNT-1;

   8938  2 001243   000777 036007                    ADLQ    511,DL
         2 001244   000314 552104                    STBQ    204,'04'O,PR0

      766     8939    1      CALL JSR$RUNDOWN ALTRET(ZAP_USER);

   8939  2 001245   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001246   000000 701000 xent               TSX1    JSR$RUNDOWN
         2 001247   000506 702000 2                  TSX2    ZAP_USER

   8937  2 001250                       SET_JERR2    null
      767     8940    1   SET_JERR2: ;
      768     8941    1      B$JIT.ERR = J_ERR|BINBIT(ERR,33);

   8941  2 001250   200011 236100                    LDQ     ERR,,AUTO
         2 001251   000003 736000                    QLS     3
         2 001252   000000 276000 1                  ORQ     J_ERR
         2 001253   000000 470400 xsym               LDP0    B$JIT$
         2 001254   000012 756100                    STQ     10,,PR0

      769     8942    1      CALL JSE$ABORTM;

   8942  2 001255   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001256   000000 701000 xent               TSX1    JSE$ABORTM
         2 001257   000000 011000                    NOP     0
         2 001260   001263 710000 2                  TRA     s:8958

      770     8943        %EJECT;
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:90   
      771     8944        /*************************************************************
      772     8945         *                                                           *
      773     8946         *                        JLL$LOCATE                         *
      774     8947         *                                                           *
      775     8948         *************************************************************/
      776     8949
      777     8950
      778     8951        /*F*   NAME:   JLL$LOCATE
      779     8952               PURPOSE: To find if a particular processor is in the call path
      780     8953               ENTRY:  Called from JSP$PMME.
      781     8954        */
      782     8955
      783     8956    1   JLL$LOCATE: ENTRY ALTRET;

   8956  2 001261   000000 700200 xent  JLL$LOCATE   TSX0  ! X66_AUTO_N
         2 001262   000050 000006                    ZERO    40,6

      784     8957
      785     8958    1      IF B$JIT.LNKCNT = 0 THEN ALTRETURN;

   8958  2 001263   000000 470400 xsym               LDP0    B$JIT$
         2 001264   000314 236100                    LDQ     204,,PR0
         2 001265   000777 316007                    CANQ    511,DL
         2 001266   001270 601000 2                  TNZ     s:8959

   8958  2 001267   000000 702200 xent               TSX2  ! X66_AALT

      786     8959    1      J_FPT_CL_SAVE.V.DCB# = %M$STAR#;

   8959  2 001270   000001 220003                    LDX0    1,DU
         2 001271   000032 740000 xsym               STX0    J_FPT_CL_SAVE+26

      787     8960
      788     8961    1      CALL JLU$OPNSTARN(ERR) ALTRET(LOC_ALT);

   8961  2 001272   200011 631500                    EPPR1   ERR,,AUTO
         2 001273   200042 451500                    STP1    @VNO+1,,AUTO
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:91   
         2 001274   200042 630500                    EPPR0   @VNO+1,,AUTO
         2 001275   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 001276   000000 701000 xent               TSX1    JLU$OPNSTARN
         2 001277   001304 702000 2                  TSX2    LOC_ALT

      789     8962
      790     8963    1      CALL JLS$SEARCH_IMAGE ALTRET(LOC_ALT);

   8963  2 001300   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001301   000000 701000 xent               TSX1    JLS$SEARCH_IMAGE
         2 001302   001304 702000 2                  TSX2    LOC_ALT

      791     8964
      792     8965    1      RETURN;                              /* we found it                        */

   8965  2 001303   000000 702200 xent               TSX2  ! X66_ARET

      793     8966    1   LOC_ALT: ALTRETURN;                     /* can't find it                      */

   8966  2 001304   000000 702200 xent  LOC_ALT      TSX2  ! X66_AALT

      794     8967        %EJECT;
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:92   
      795     8968        /*************************************************************
      796     8969         *                                                           *
      797     8970         *                    OPNV - CLSV                            *
      798     8971         *                                                           *
      799     8972         *************************************************************/
      800     8973
      801     8974        /* Subroutines to open and close down the user's virtual arrays.
      802     8975        */
      803     8976
      804     8977    1   OPNV: PROC (VNO);

   8977  2 001305   200040 741300       OPNV         STX1  ! J+2,,AUTO

      805     8978    2   DCL VNO UBIN;
      806     8979
      807     8980    2      B$JIT.DCBNO = B$JIT.VIRTUAL.DCB# (VNO);

   8980  2 001306   200041 470500                    LDP0    @VNO,,AUTO
         2 001307   000000 235100                    LDA     0,,PR0
         2 001310   000000 471400 xsym               LDP1    B$JIT$
         2 001311   000100 100505                    MLR     fill='000'O
         2 001312   100217 000001                    ADSC9   143,A,PR1                cn=0,n=1
         2 001313   100022 600001                    ADSC9   18,,PR1                  cn=3,n=1

      808     8981    2      IF B$JIT.DCBNO ~= 0

   8981  2 001314   100022 236100                    LDQ     18,,PR1
         2 001315   000777 316007                    CANQ    511,DL
         2 001316   001334 600000 2                  TZE     s:8987

      809     8982    3      THEN DO;

      810     8983    3           B$JIT.DCB$ = DCBADDR (B$JIT.DCBNO);

   8983  2 001317   000016 473400 3                  LDP3    14
         2 001320   300000 474500                    LDP4    0,,PR3
         2 001321   100022 720100                    LXL0    18,,PR1
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:93   
         2 001322   000777 360003                    ANX0    511,DU
         2 001323   400000 236110                    LDQ     0,X0,PR4
         2 001324   100232 756100                    STQ     154,,PR1

      811     8984    3           B$JIT.VIRTUAL.DCB# (VNO) = 0;

   8984  2 001325   000000 235100                    LDA     0,,PR0
         2 001326   000105 101400                    MRL     fill='000'O
         2 001327   000002 000004 xsym               ADSC9   B_VECTNIL+2              cn=0,n=4
         2 001330   100217 000001                    ADSC9   143,A,PR1                cn=0,n=1

      812     8985    3           CALL MMV$OPEN ALTRET (ALT);

   8985  2 001331   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001332   000000 701000 xent               TSX1    MMV$OPEN
         2 001333   001362 702000 2                  TSX2    ALT

      813     8986    3           END;

      814     8987    2      RETURN;

   8987  2 001334   200040 221300                    LDX1  ! J+2,,AUTO
         2 001335   000001 702211                    TSX2  ! 1,X1

      815     8988
      816     8989    2   CLSV: ENTRY (VNO);

   8989  2 001336   200040 741300       CLSV         STX1  ! J+2,,AUTO

      817     8990
      818     8991    2      B$JIT.DCBNO = B$JIT.VIRTUAL.DCB# (VNO);

   8991  2 001337   200041 470500                    LDP0    @VNO,,AUTO
         2 001340   000000 235100                    LDA     0,,PR0
         2 001341   000000 471400 xsym               LDP1    B$JIT$
         2 001342   000100 100505                    MLR     fill='000'O
         2 001343   100217 000001                    ADSC9   143,A,PR1                cn=0,n=1
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:94   
         2 001344   100022 600001                    ADSC9   18,,PR1                  cn=3,n=1

      819     8992    2      IF B$JIT.DCBNO ~= 0

   8992  2 001345   100022 236100                    LDQ     18,,PR1
         2 001346   000777 316007                    CANQ    511,DL
         2 001347   001372 600000 2                  TZE     s:9007

      820     8993    3      THEN DO;

      821     8994    3           B$JIT.DCB$ = DCBADDR (B$JIT.DCBNO);

   8994  2 001350   000016 473400 3                  LDP3    14
         2 001351   300000 474500                    LDP4    0,,PR3
         2 001352   100022 720100                    LXL0    18,,PR1
         2 001353   000777 360003                    ANX0    511,DU
         2 001354   400000 236110                    LDQ     0,X0,PR4
         2 001355   100232 756100                    STQ     154,,PR1

      822     8995    3           CALL MMV$CLOSE

   8995  2 001356   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001357   000000 701000 xent               TSX1    MMV$CLOSE
         2 001360   001362 702000 2                  TSX2    ALT
         2 001361   001366 710000 2                  TRA     s:9005

      823     8996    4           WHENALTRETURN DO;

   8991  2 001362                       ALT          null
      824     8997        /*S*          SCREECH_CODE:JLS-S$VARRAY
      825     8998                      TYPE: SNAP
      826     8999                      MESSAGE: Can't open/close a virtual segment
      827     9000        */
      828     9001    4   ALT:         ;
      829     9002    4                CALL SC_VARRAY;

   9002  2 001362   000000 713400 xsym               CLIMB   SC_VARRAY
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:95   
         2 001363   000000 600000 xsid               climb   nvectors=         0

      830     9003    4                RETURN;

   9003  2 001364   200040 221300                    LDX1  ! J+2,,AUTO
         2 001365   000001 702211                    TSX2  ! 1,X1

      831     9004    4                END;
      832     9005    3           CALL FMF$TRUNCM (0);

   9005  2 001366   000004 630400 3                  EPPR0   4
         2 001367   000017 631400 xsym               EPPR1   B_VECTNIL+15
         2 001370   000000 701000 xent               TSX1    FMF$TRUNCM
         2 001371   000000 011000                    NOP     0

      833     9006    3           END;

      834     9007    2      RETURN;

   9007  2 001372   200040 221300                    LDX1  ! J+2,,AUTO
         2 001373   000001 702211                    TSX2  ! 1,X1

      835     9008    2   END OPNV;
      836     9009        %EJECT;
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:96   
      837     9010        /*************************************************************
      838     9011         *                                                           *
      839     9012         *                        FIX_IC                             *
      840     9013         *                                                           *
      841     9014         *************************************************************/
      842     9015
      843     9016        /* Subroutine to fix the IC in safe store when entering ABORTM
      844     9017           or going to DELTA while returning to the linking program.
      845     9018        */
      846     9019
      847     9020    1   FIX_IC: PROC ALTRET;

   9020  2 001374   200040 741300       FIX_IC       STX1  ! J+2,,AUTO

      848     9021    2      ECP.EVID = 0;

   9021  2 001375   200016 450100                    STZ     ECP+1,,AUTO

      849     9022    2      ECP.JERR = B$JIT.ERR;

   9022  2 001376   000000 470400 xsym               LDP0    B$JIT$
         2 001377   000012 236100                    LDQ     10,,PR0
         2 001400   200017 756100                    STQ     ECP+2,,AUTO

      850     9023    2      ECP.P# = 0;

   9023  2 001401   200020 450100                    STZ     ECP+3,,AUTO

      851     9024
      852     9025    2      IF B$JIT.ERR.CODE=0

   9025  2 001402   000012 236100                    LDQ     10,,PR0
         2 001403   377770 316007                    CANQ    131064,DL
         2 001404   001414 601000 2                  TNZ     s:9030

      853     9026    2      THEN IF B$SS.FPT.ALT

PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:97   
   9026  2 001405   000000 471400 xsym               LDP1    B_MPT
         2 001406   100001 234100                    SZN     1,,PR1
         2 001407   001456 605000 2                  TPL     s:9041

      854     9027    2           THEN B$SS.IC=B$SS.IC+1;

   9027  2 001410   100004 220100                    LDX0    4,,PR1
         2 001411   000001 622010                    EAX2    1,X0
         2 001412   100004 742100                    STX2    4,,PR1
         2 001413   001456 710000 2                  TRA     s:9041

      855     9028    2           ELSE ;
      856     9029    3      ELSE DO;

      857     9030    3           IF B$SS.FPT.ALT

   9030  2 001414   000000 471400 xsym               LDP1    B_MPT
         2 001415   100001 234100                    SZN     1,,PR1
         2 001416   001453 605000 2                  TPL     s:9038

      858     9031    4           THEN DO;

      859     9032    4                SSIC=B$SS.IC;

   9032  2 001417   100004 236100                    LDQ     4,,PR1
         2 001420   000022 772000                    QRL     18
         2 001421   200021 756100                    STQ     SSIC,,AUTO

      860     9033    4                ECP.ECCS=BITBIN(B$SS.FPT & '371777'O);

   9033  2 001422   100001 220100                    LDX0    1,,PR1
         2 001423   371777 360003                    ANX0    127999,DU
         2 001424   000000 636010                    EAQ     0,X0
         2 001425   000022 772000                    QRL     18
         2 001426   200015 756100                    STQ     ECP,,AUTO

      861     9034    4                ECC=%ECC_ALT#;
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:98   

   9034  2 001427   000143 235007                    LDA     99,DL
         2 001430   200014 755100                    STA     ECC,,AUTO

      862     9035    4                B$SS.IC=B$SS.IC-2;

   9035  2 001431   100004 220100                    LDX0    4,,PR1
         2 001432   777776 622010                    EAX2    -2,X0
         2 001433   100004 742100                    STX2    4,,PR1

      863     9036    4                CALL SST$SSFTCB (SSIC,ECC,ECP,B_MPT.SS$,B_MPT.TCB$);

   9036  2 001434   000017 236000 3                  LDQ     15
         2 001435   200046 756100                    STQ     @VNO+5,,AUTO
         2 001436   000020 236000 3                  LDQ     16
         2 001437   200045 756100                    STQ     @VNO+4,,AUTO
         2 001440   200015 633500                    EPPR3   ECP,,AUTO
         2 001441   200044 453500                    STP3    @VNO+3,,AUTO
         2 001442   200014 634500                    EPPR4   ECC,,AUTO
         2 001443   200043 454500                    STP4    @VNO+2,,AUTO
         2 001444   200021 635500                    EPPR5   SSIC,,AUTO
         2 001445   200042 455500                    STP5    @VNO+1,,AUTO
         2 001446   200042 630500                    EPPR0   @VNO+1,,AUTO
         2 001447   000023 631400 xsym               EPPR1   B_VECTNIL+19
         2 001450   000000 701000 xent               TSX1    SST$SSFTCB
         2 001451   000000 011000                    NOP     0

      864     9037    4                END;

   9037  2 001452   001456 710000 2                  TRA     s:9041

      865     9038    3           ELSE IF B$JIT.ERR.SEV ~= 0

   9038  2 001453   000007 316007                    CANQ    7,DL
         2 001454   001456 600000 2                  TZE     s:9041

      866     9039    3                THEN ALTRETURN;
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:99   

   9039  2 001455   000000 702211                    TSX2  ! 0,X1

      867     9040    3           END;
      868     9041    2   END FIX_IC;

   9041  2 001456   200040 221300                    LDX1  ! J+2,,AUTO
         2 001457   000001 702211                    TSX2  ! 1,X1

      869     9042    1   REFRESH_DESCR: PROC;

   9042  2 001460   200040 741300       REFRESH_DES* STX1  ! J+2,,AUTO

      870     9043        /* Refreash the descriptor registers in the safe store frame from
      871     9044           the current Linkage Segment descriptors.
      872     9045           Only move the first word if it is a super descriptor.
      873     9046        */
      874     9047    2      CALL UDN$MAGIC;

   9047  2 001461   000002 631400 xsym               EPPR1   B_VECTNIL+2
         2 001462   000000 701000 xent               TSX1    UDN$MAGIC
         2 001463   000000 011000                    NOP     0

      875     9048    2      PTR$ = ADDR(B$SS.PR0);

   9048  2 001464   000000 236000 xsym               LDQ     B_MPT
         2 001465   000020 036003                    ADLQ    16,DU
         2 001466   200033 756100                    STQ     PTR$,,AUTO

      876     9049    2      DR$ = ADDR(B$SS.DR0);

   9049  2 001467   000000 236000 xsym               LDQ     B_MPT
         2 001470   000030 036003                    ADLQ    24,DU
         2 001471   200034 756100                    STQ     DR$,,AUTO

      877     9050    3      DO I=0 TO 7/*index to SSF prs and drs*/;

PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:100  
   9050  2 001472   200035 450100                    STZ     I,,AUTO

      878     9051    3           IF (PTR$->B$PTRS.S.SEG_TYPE(I) & '01'B) = '01'B

   9051  2 001473   200033 470500                    LDP0    PTR$,,AUTO
         2 001474   200035 720100                    LXL0    I,,AUTO
         2 001475   000000 236110                    LDQ     0,X0,PR0
         2 001476   000030 736000                    QLS     24
         2 001477   600000 376003                    ANQ     -65536,DU
         2 001500   200000 376003                    ANQ     65536,DU
         2 001501   200000 116003                    CMPQ    65536,DU
         2 001502   001534 601000 2                  TNZ     s:9058

      879     9052    4           THEN DO;

      880     9053    4                J = PTR$->B$PTRS.S.DESCR#(I);/*index to linkage seg dscr*/

   9053  2 001503   000000 236110                    LDQ     0,X0,PR0
         2 001504   001777 376007                    ANQ     1023,DL
         2 001505   200036 756100                    STQ     J,,AUTO

      881     9054    4                IF DR$->B$DRS.WORD1.TYP(I) = 4 OR DR$->B$DRS.WORD1.TYP(I) = 6

   9054  2 001506   200035 235100                    LDA     I,,AUTO
         2 001507   000001 735000                    ALS     1
         2 001510   200034 471500                    LDP1    DR$,,AUTO
         2 001511   100000 236105                    LDQ     0,AL,PR1
         2 001512   000017 376007                    ANQ     15,DL
         2 001513   000004 116007                    CMPQ    4,DL
         2 001514   001517 600000 2                  TZE     s:9055
         2 001515   000006 116007                    CMPQ    6,DL
         2 001516   001525 601000 2                  TNZ     s:9056

      882     9055    4                THEN DR$->B$DRS.WORD1(I) = B_MPT.LS$->B$DRS(J);

   9055  2 001517   200036 236100                    LDQ     J,,AUTO
         2 001520   000001 736000                    QLS     1
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:101  
         2 001521   000001 473400 xsym               LDP3    B_MPT+1
         2 001522   300000 236106                    LDQ     0,QL,PR3
         2 001523   100000 756105                    STQ     0,AL,PR1
         2 001524   001534 710000 2                  TRA     s:9058

      883     9056    4                ELSE DR$->B$DRS(I) = B_MPT.LS$->B$DRS(J);

   9056  2 001525   200036 236100                    LDQ     J,,AUTO
         2 001526   000003 736000                    QLS     3
         2 001527   000002 735000                    ALS     2
         2 001530   000001 473400 xsym               LDP3    B_MPT+1
         2 001531   000105 100506                    MLR     fill='000'O
         2 001532   300000 000010                    ADSC9   0,Q,PR3                  cn=0,n=8
         2 001533   100000 000010                    ADSC9   0,A,PR1                  cn=0,n=8

      884     9057    4                END;

      885     9058    3           END/*do I=0 to 7*/;

   9058  2 001534   200035 235100                    LDA     I,,AUTO
         2 001535   000001 035007                    ADLA    1,DL
         2 001536   200035 755100                    STA     I,,AUTO
         2 001537   000010 115007                    CMPA    8,DL
         2 001540   001473 602000 2                  TNC     s:9051

      886     9059    2   END REFRESH_DESCR;

   9059  2 001541   200040 221300                    LDX1  ! J+2,,AUTO
         2 001542   000001 702211                    TSX2  ! 1,X1

J_ERR
 Sect OctLoc
   1     000   121414 400004                                                    Q...

(unnamed)
 Sect OctLoc
   1     001   000000 100000   743400 000000   000000 000040   004000 000000    ..@........ ....
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:102  
   1     005   000200 000000   000000 001000                                    ........

(unnamed)
 Sect OctLoc
   3     000   000000 000501   000000 006000   000012 006000   000000 006000    ................
   3     004   000002 006000   000003 006000   000004 006000   050040 040040    ............(
   3     010   776777 777777   777777 777770   000000 000043   000012 006000    ...........#....
   3     014   777577 777777   777777 757777   000000 006003   000004 006000    ................
   3     020   000000 006000                                                    ....
      887     9060    1   END JLL$LINK;

PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:103  
--  Include file information  --

   UM_CP6.:E05TOU  is referenced.
   UE_CP6.:E05TOU  is referenced.
   UD_SEV_C.:E05TOU  is referenced.
   SS_SCHED_C.:E05TOU  is referenced.
   M_INFO_C.:E05TOU  is referenced.
   M_ERRORS_C.:E05TOU  is referenced.
   F_ERRORS_C.:E05TOU  is referenced.
   F_CP6.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   B_ULSMAC_C.:E05TOU  is referenced.
   B_STRINGS_C.:E05TOU  is referenced.
   B_MLSMAC_C.:E05TOU  is referenced.
   B_MAGIC_C.:E05TOU  is referenced.
   B$USER.:E05TOU  cannot be made into a system file and is referenced.
   B$SS.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure JLL$LINK.
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:104  

 **** Variables and constants ****

  ****  Section 001 RoData JLL$LINK

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC        r     1 J_ERR

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @ACCT1$                   10-0-0/w PTR         r     1 @CLEANUP$
     7-0-0/w PTR         r     1 @CMD1$                     3-0-0/w PTR         r     1 @NAME1$
     5-0-0/w PTR         r     1 @PASS1$                    6-0-0/w PTR         r     1 @PSID1$
    41-0-0/w PTR         r     1 @VNO                      13-0-0/w SBIN        r     1 ACCESS
    *0-0-0/w PTR         r     1 ACCT1$                    23-0-0/w UBIN(9)     r     1 ACCT_TYP
    *0-0-0/w EPTR        r     1 CLEANUP$                  27-0-0/w EPTR        r     1 CLEANUP$$
    *0-0-0/w PTR         r     1 CMD1$                     34-0-0/w PTR         r     1 DR$
    14-0-0/w SBIN        r     1 ECC                       15-0-0/w STRC(144)   r     1 ECP
    11-0-0/w UBIN        r     1 ERR                       35-0-0/w UBIN        r     1 I
    22-0-0/w STRC        r     1 ID                        22-0-0/w UBIN        r     1 IDN
    36-0-0/w UBIN        r     1 J                         26-0-0/w UBIN(18)    r     1 MAXCORE
    *0-0-0/w PTR         r     1 NAME1$                    *0-0-0/w PTR         r     1 PASS1$
    *0-0-0/w PTR         r     1 PSID1$                    33-0-0/w PTR         r     1 PTR$
    32-0-0/w BIT (9)     r     1 RNST                      12-0-0/b BIT         r     1 RTNERR
    21-0-0/w UBIN        r     1 SSIC                      24-0-0/w SBIN        r     1 TEMP
    25-0-0/w UBIN        r     1 TEMP2                     30-0-0/w PTR         r     1 TEXTC_CMD$
    *0-0-0/w UBIN        r     1 VNO                       31-0-0/w BIT (9)     r     1 XCONF

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:105  
     0-0-0/w PTR         r     1 B$JIT$                     0-0-0/w PTR         r     1 B$LS$
     0-0-0/w PTR         r     1 B$M$DO$                    0-0-0/w PTR         r     1 B$MISC2$
     0-0-0/d STRC(432)   r     1 B_MPT                      0-0-0/d STRC(1080)  r     1 J_FPT_CL_SAVE
     0-0-0/w PTR         r     1 S$CU$                      0-0-0/w UBIN        r     1 S_CUN

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c ACHR        r     1 B$CCBUF                    0-0-0/w STRC(72)    r     1 B$DESCR
     0-0-0/w STRC(72)    r     1 B$DRS(0:7)                 0-0-0/d STRC(8856)  r     1 B$JIT
     0-0-0/d STRC(10368) r     1 B$MLS                      0-0-0/w STRC        r     1 B$PTRS(0:7)
     0-0-0/d STRC(2304)  r     1 B$SS                       0-0-0/d STRC(576)   r     1 B$U
     0-0-0/c ASTR(9)     r     1 TEXTC


   Procedure JLL$LINK requires 867 words for executable code.
   Procedure JLL$LINK requires 40 words of local(AUTO) storage.

    No errors detected in file JLL$LDLNK.:E05TSI    .
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:106  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:107  
          MINI XREF LISTING

ACCESS
      7120**DCL      8391<<ASSIGN   8392<>CALL     8627<>CALL     8627<>CALL
ACCT1$
      7110**DCL         9--PROC     8552<>CALL     8578--ENTRY
ACCT_TYP
      7132**DCL      8822<<ASSIGN   8823<>CALL
ALT IN PROCEDURE OPNV
      8991**LABEL    8985--CALLALT
B$CCBUF
      7185**DCL      8503>>ASSIGN
B$DESCR
      7176**DCL      8502>>ASSIGN
B$DESCR.BOUND
      7180**DCL      8499>>ASSIGN   8500>>ASSIGN
B$DO.ECCINFO
       945**DCL       946--REDEF
B$DRS
      7148**DCL      9055>>ASSIGN   9056<<ASSIGN   9056>>ASSIGN
B$DRS.WORD1
      7149**DCL      9055<<ASSIGN
B$DRS.WORD1.TYP
      7151**DCL      9054>>IF       9054>>IF
B$JIT.CCARS
       427**DCL      8500<<ASSIGN   8514<<ASSIGN   8540>>CALLBLT
B$JIT.CCBUF
       427**DCL      8503<<ASSIGN   8513<<ASSIGN   8540>>CALLBLT
B$JIT.CCDISP
       427**DCL      8522<<ASSIGN   8541<<ASSIGN
B$JIT.CPFLAGS1
       428**DCL      8386>>IF       8525<<ASSIGN   8525>>ASSIGN   8543<<ASSIGN   8543>>ASSIGN   8820>>IF
B$JIT.CPFLAGS1.EXIT#
       431**DCL      8691>>IF       8881<<ASSIGN
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:108  
B$JIT.CPFLAGS1.SLEAZE
       433**DCL       433--REDEF
B$JIT.CURRCORE
       501**DCL      8454>>ASSIGN   8860>>IF
B$JIT.DCB$
       507**DCL      8769<<ASSIGN   8983<<ASSIGN   8994<<ASSIGN
B$JIT.DCBNO
       420**DCL      8795<<ASSIGN   8980<<ASSIGN   8981>>IF       8983--ASSIGN   8991<<ASSIGN   8992>>IF
      8994--ASSIGN
B$JIT.ERR
       339**DCL      8636<<ASSIGN   8780<<ASSIGN   8865<<ASSIGN   8941<<ASSIGN   9022>>ASSIGN
B$JIT.ERR.CODE
       340**DCL      8406>>ASSIGN   8605>>IF       8605>>ASSIGN   8924>>IF       8924>>ASSIGN   9025>>IF
B$JIT.ERR.MID
       340**DCL       340--REDEF
B$JIT.ERR.SEV
       340**DCL      9038>>IF
B$JIT.FRS
       535**DCL      8826>>ASSIGN
B$JIT.JRESPEAK
       501**DCL       502--REDEF
B$JIT.JUNK
       539**DCL      8369<<ASSIGN   8369>>ASSIGN   8438<<ASSIGN   8438>>ASSIGN   8480>>IF       8487>>IF
      8594<<ASSIGN   8594>>ASSIGN   8634<<ASSIGN   8634>>ASSIGN   8706<<ASSIGN   8706>>ASSIGN   8724<<ASSIGN
      8724>>ASSIGN   8792<<ASSIGN   8792>>ASSIGN   8832>>IF       8835<<ASSIGN   8835>>ASSIGN   8844>>IF
      8847<<ASSIGN   8847>>ASSIGN   8899>>IF       8936<<ASSIGN   8936>>ASSIGN
B$JIT.JUNK2
       593**DCL      8461>>IF       8800>>IF       8802<<ASSIGN   8802>>ASSIGN   8810>>IF       8812<<ASSIGN
      8812>>ASSIGN   8860>>IF       8862<<ASSIGN   8862>>ASSIGN
B$JIT.LNKCNT
       539**DCL      8417>>ASSIGN   8437<<ASSIGN   8437>>ASSIGN   8729>>ASSIGN   8779<<ASSIGN   8779>>ASSIGN
      8937>>IF       8938<<ASSIGN   8938>>ASSIGN   8958>>IF
B$JIT.MAXCORE
       500**DCL      8381>>ASSIGN   8382<<ASSIGN   8436<<ASSIGN   8633<<ASSIGN   8716>>ASSIGN   8717<<ASSIGN
      8781<<ASSIGN   8860>>IF       8935<<ASSIGN
B$JIT.ORIGINATOR_PORT.FROM_CR
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:109  
       610**DCL       610--REDEF     611--REDEF
B$JIT.PNR
       514**DCL       514--REDEF
B$JIT.PRFLAGS
       423**DCL      8524<<ASSIGN   8524>>ASSIGN
B$JIT.PRFLAGS.CONTINUED
       423**DCL      8545<<ASSIGN
B$JIT.PRFLAGS.NOSCAN
       424**DCL      8546<<ASSIGN
B$JIT.PRFLAGS.NSSYNTAX
       423**DCL      8544<<ASSIGN
B$JIT.PRIOCORE
       500**DCL      8454<<ASSIGN
B$JIT.PRIV.ACTIVE
       340**DCL      8860>>IF
B$JIT.RNST
       518**DCL      8826<<ASSIGN   8863<<ASSIGN   8863>>ASSIGN   8878>>IF
B$JIT.RUNFLAGS
       535**DCL      8479<<ASSIGN
B$JIT.SVLDTF
       580**DCL      8361<<ASSIGN   8579<<ASSIGN   8794<<ASSIGN   8794>>ASSIGN
B$JIT.SYSID
       339**DCL      8418>>ASSIGN   8730>>ASSIGN
B$JIT.TSLINE
       608**DCL       609--REDEF
B$JIT.USRERR
       475**DCL      8697>>ASSIGN   8720<<ASSIGN
B$JIT.USRERR.SEV
       475**DCL      8694<<ASSIGN
B$JIT.USRRNST
       475**DCL      8719<<ASSIGN
B$JIT.VIRTUAL.DCB#
       504**DCL      8980>>ASSIGN   8984<<ASSIGN   8991>>ASSIGN
B$JIT.XCONF
       560**DCL      8708>>ASSIGN
B$JIT.XLIMFLG
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:110  
       570**DCL      8864<<ASSIGN   8864>>ASSIGN
B$JIT$
      8010**DCL       334--IMP-PTR  8361>>ASSIGN   8369>>ASSIGN   8369>>ASSIGN   8381>>ASSIGN   8382>>ASSIGN
      8386>>IF       8406>>ASSIGN   8417>>ASSIGN   8418>>ASSIGN   8436>>ASSIGN   8437>>ASSIGN   8437>>ASSIGN
      8438>>ASSIGN   8438>>ASSIGN   8454>>ASSIGN   8454>>ASSIGN   8461>>IF       8479>>ASSIGN   8480>>IF
      8487>>IF       8500>>ASSIGN   8503>>ASSIGN   8513>>ASSIGN   8514>>ASSIGN   8522>>ASSIGN   8524>>ASSIGN
      8524>>ASSIGN   8525>>ASSIGN   8525>>ASSIGN   8540>>CALLBLT  8540>>CALLBLT  8541>>ASSIGN   8543>>ASSIGN
      8543>>ASSIGN   8544>>ASSIGN   8545>>ASSIGN   8546>>ASSIGN   8579>>ASSIGN   8594>>ASSIGN   8594>>ASSIGN
      8605>>IF       8605>>ASSIGN   8633>>ASSIGN   8634>>ASSIGN   8634>>ASSIGN   8636>>ASSIGN   8691>>IF
      8694>>ASSIGN   8697>>ASSIGN   8706>>ASSIGN   8706>>ASSIGN   8708>>ASSIGN   8716>>ASSIGN   8717>>ASSIGN
      8719>>ASSIGN   8720>>ASSIGN   8724>>ASSIGN   8724>>ASSIGN   8729>>ASSIGN   8730>>ASSIGN   8769>>ASSIGN
      8779>>ASSIGN   8779>>ASSIGN   8780>>ASSIGN   8781>>ASSIGN   8792>>ASSIGN   8792>>ASSIGN   8794>>ASSIGN
      8794>>ASSIGN   8795>>ASSIGN   8800>>IF       8802>>ASSIGN   8802>>ASSIGN   8810>>IF       8812>>ASSIGN
      8812>>ASSIGN   8820>>IF       8826>>ASSIGN   8826>>ASSIGN   8832>>IF       8835>>ASSIGN   8835>>ASSIGN
      8844>>IF       8847>>ASSIGN   8847>>ASSIGN   8860>>IF       8860>>IF       8860>>IF       8860>>IF
      8862>>ASSIGN   8862>>ASSIGN   8863>>ASSIGN   8863>>ASSIGN   8864>>ASSIGN   8864>>ASSIGN   8865>>ASSIGN
      8878>>IF       8881>>ASSIGN   8899>>IF       8924>>IF       8924>>ASSIGN   8935>>ASSIGN   8936>>ASSIGN
      8936>>ASSIGN   8937>>IF       8938>>ASSIGN   8938>>ASSIGN   8941>>ASSIGN   8958>>IF       8980>>ASSIGN
      8980>>ASSIGN   8981>>IF       8983>>ASSIGN   8983>>ASSIGN   8984>>ASSIGN   8991>>ASSIGN   8991>>ASSIGN
      8992>>IF       8994>>ASSIGN   8994>>ASSIGN   9022>>ASSIGN   9025>>IF       9038>>IF
B$LS$
      8011**DCL      8502>>ASSIGN
B$M$DO$
      8009**DCL      8769>>ASSIGN
B$MISC2$
      8012**DCL      8503>>ASSIGN
B$MLS.MISC2
      7770**DCL      8502<<ASSIGN
B$PTRS.S.DESCR#
      7159**DCL      9053>>ASSIGN
B$PTRS.S.SEG_TYPE
      7158**DCL      9051>>IF
B$PTRS.SEGID
      7156**DCL      7157--REDEF
B$SS.DR0
       717**DCL      9049--ASSIGN
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:111  
B$SS.FPT
       626**DCL      9033>>ASSIGN
B$SS.FPT.ALT
       627**DCL      9026>>IF       9030>>IF
B$SS.IC
       634**DCL      9027<<ASSIGN   9027>>ASSIGN   9032>>ASSIGN   9035<<ASSIGN   9035>>ASSIGN
B$SS.PR0
       693**DCL      9048--ASSIGN
B$SS.RVA
       667**DCL       668--REDEF
B$U.DB
       902**DCL      8786>>IF
B$U.FLG
       811**DCL      8693>>IF
B$U.FLG.DELA
       816**DCL      8788<<ASSIGN
B$U.FLG.DIC
       814**DCL      8480<<ASSIGN
B$U.FLG.STIP
       825**DCL      8793<<ASSIGN
B$U.MISC
       924**DCL       925--REDEF
B$USER.MISC
      1000**DCL      1001--REDEF
B_MPT.AS
      8052**DCL      8055--REDEF
B_MPT.ASDESC
      8084**DCL      8088--REDEF
B_MPT.ECCB
      8067**DCL      8070--REDEF
B_MPT.ECCBDESC
      8102**DCL      8106--REDEF
B_MPT.LS
      8047**DCL      8050--REDEF
B_MPT.LS$
      8050**DCL      9055>>ASSIGN   9056>>ASSIGN
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:112  
B_MPT.LSDESC
      8078**DCL      8082--REDEF
B_MPT.PS
      8057**DCL      8060--REDEF
B_MPT.PSDESC
      8090**DCL      8094--REDEF
B_MPT.SS
      8042**DCL      8045--REDEF
B_MPT.SS$
      8045**DCL      9026>>IF       9027>>ASSIGN   9027>>ASSIGN   9030>>IF       9032>>ASSIGN   9033>>ASSIGN
      9035>>ASSIGN   9035>>ASSIGN   9036<>CALL     9048>>ASSIGN   9049>>ASSIGN
B_MPT.SSDESC
      8072**DCL      8076--REDEF
B_MPT.TCB
      8062**DCL      8065--REDEF
B_MPT.TCB$
      8065**DCL      9036<>CALL
B_MPT.TCBDESC
      8096**DCL      8100--REDEF
CLEANUP$
      7114**DCL         9--PROC     8422<>CALL
CLEANUP$$
      7136**DCL      8740<<ASSIGN   8741<>CALL     8849>>IF       8850>>CALL
CLSV IN PROCEDURE OPNV
      8989**ENTRY    8443--CALL     8444--CALL     8445--CALL
CLS_ERR1
      8418**LABEL    8426--CALLALT
CLS_ERR2
      8607**LABEL    8621--CALLALT
CMD1$
      7113**DCL         9--PROC     8490>>ASSIGN   8497>>IF       8499>>ASSIGN   8500>>ASSIGN   8502>>ASSIGN
      8578--ENTRY
DR$
      7141**DCL      9049<<ASSIGN   9054>>IF       9054>>IF       9055>>ASSIGN   9056>>ASSIGN
ECC
      7121**DCL      8907<<ASSIGN   8909<>CALL     9034<<ASSIGN   9036<>CALL
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:113  
ECP
      7122**DCL      8909<>CALL     9036<>CALL
ECP.ECCS
      7123**DCL      8908<<ASSIGN   9033<<ASSIGN
ECP.EVID
      7124**DCL      9021<<ASSIGN
ECP.JERR
      7125**DCL      9022<<ASSIGN
ECP.P#
      7126**DCL      9023<<ASSIGN
ERR
      7118**DCL      8360<<ASSIGN   8365<>CALL     8392<>CALL     8406<<ASSIGN   8413<>CALL     8422<>CALL
      8431<>CALL     8431<>CALL     8583<>CALL     8605<<ASSIGN   8607>>IF       8607>>IF       8636>>ASSIGN
      8701<>CALL     8738<>CALL     8741<>CALL     8754<>CALL     8757>>ASSIGN   8924<<ASSIGN   8925>>IF
      8925>>IF       8941>>ASSIGN   8961<>CALL
FIX_IC
      9020**PROC     8880--CALL     8903--CALL
FMF$TRUNCM
      8113**DCL-ENT  8760--CALL     9005--CALL
FMM$MRGAMR
      8112**DCL-ENT  8770--CALL
GO_TO_NEW
      8461**LABEL    8595--GOTO
I
      7142**DCL      9050<<DOINDEX  9051>>IF       9053>>ASSIGN   9054>>IF       9054>>IF       9055>>ASSIGN
      9056>>ASSIGN
ID.N
      7130**DCL      8417<<ASSIGN   8729<<ASSIGN
ID.SYSID
      7131**DCL      8418<<ASSIGN   8730<<ASSIGN
IDN
      7128**DCL      7129--REDEF    8422<>CALL     8617<>CALL     8741<>CALL     8928<>CALL
J
      7143**DCL      9053<<ASSIGN   9055>>ASSIGN   9056>>ASSIGN
JLS$GET_IMAGE
      8114**DCL-ENT  8741--CALL
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:114  
JLS$SAVE_IMAGE
      8115**DCL-ENT  8422--CALL
JLS$SEARCH_IMAGE
      8116**DCL-ENT  8963--CALL
JLU$DELSET
      8117**DCL-ENT  8617--CALL     8928--CALL
JLU$FPRG_GET
      8118**DCL-ENT  8774--CALL
JLU$OPNSTARN
      8119**DCL-ENT  8413--CALL     8738--CALL     8961--CALL
JLU$SAVE_AMR
      8120**DCL-ENT  8404--CALL
JLU$TRUNCDCBS
      8121**DCL-ENT  8371--CALL
JLU$VALID
      8122**DCL-ENT  8365--CALL     8583--CALL     8701--CALL
JSA$CPQUIT
      8123**DCL-ENT  8827--CALL
JSD$ZAPUSR
      8124**DCL-ENT  8643--CALL
JSE$ABORTM
      8125**DCL-ENT  8942--CALL
JSE$ABORTX
      8126**DCL-ENT  8852--CALL     8882--CALL
JSE$ACP
      8127**DCL-ENT  8527--CALL
JSF$CLSDCBS
      8129**DCL-ENT  8587--CALL
JSF$CLSLM
      8128**DCL-ENT  8412--CALL     8588--CALL     8707--CALL
JSF$OPENLM
      8130**DCL-ENT  8754--CALL
JSR$RUNDOWN
      8131**DCL-ENT  8523--CALL     8551--CALL     8709--CALL     8939--CALL
JSS$RUNDSPC
      8132**DCL-ENT  8814--CALL
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:115  
JST$GETPROG
      8133**DCL-ENT  8552--CALL
JSU$DECRUC
      8134**DCL-ENT  8593--CALL
JSU$WSTAR
      8135**DCL-ENT  8823--CALL
J_ERR
      8211**DCL      8636>>ASSIGN   8757>>ASSIGN   8865>>ASSIGN   8941>>ASSIGN
J_FPT_CL_SAVE
      8178**DCL      8426<>CALL     8621<>CALL     8929<>CALL
J_FPT_CL_SAVE.SN_
      8178**DCL      8178--REDEF
J_FPT_CL_SAVE.UTL_
      8179**DCL      8179--REDEF
J_FPT_CL_SAVE.V.DCB#
      8184**DCL      8375<<ASSIGN   8734<<ASSIGN   8959<<ASSIGN
J_FPT_CL_SAVE.V.EXPIRE#
      8193**DCL      8193--REDEF
J_FPT_CL_SAVE.V.TYPE#
      8191**DCL      8191--REDEF
J_FPT_CL_SAVE.V.XTNSIZE#
      8188**DCL      8188--REDEF    8190--REDEF
LINK_ERR
      8594**LABEL    8422--CALLALT
LINK_ERR1
      8607**LABEL    8407--GOTO     8413--CALLALT
LINK_ERR2
      8627**LABEL    8392--CALLALT
LOC_ALT
      8966**LABEL    8961--CALLALT  8963--CALLALT
M$MCLOSE
      8136**DCL-ENT  8426--CALL     8621--CALL     8929--CALL
MAXCORE
      7135**DCL      8381<<ASSIGN   8436>>ASSIGN   8633>>ASSIGN   8716<<ASSIGN   8781>>ASSIGN   8935>>ASSIGN
MME$WFVP
      8137**DCL-ENT  8431--CALL     8627--CALL
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:116  
MME$WGVP
      8138**DCL-ENT  8392--CALL
MMV$CLOSE
      8139**DCL-ENT  8995--CALL
MMV$OPEN
      8140**DCL-ENT  8985--CALL
NAME1$
      7109**DCL         9--PROC     8398--IF       8400>>IF       8488>>ASSIGN   8520>>IF       8552<>CALL
      8578--ENTRY
OPNV
      8977**PROC     8745--CALL     8746--CALL     8747--CALL
PASS1$
      7111**DCL         9--PROC     8552<>CALL     8578--ENTRY
PSID1$
      7112**DCL         9--PROC     8552<>CALL     8578--ENTRY
PTR$
      7140**DCL      9048<<ASSIGN   9051>>IF       9053>>ASSIGN
REFRESH_DESCR
      9042**PROC     8803--CALL     8817--CALL
RNST
      7139**DCL      8751<<ASSIGN   8758<<ASSIGN   8826>>ASSIGN
RRET3
      8925**LABEL    8929--CALLALT
RTNERR
      7119**DCL      8697<<ASSIGN   8757<<ASSIGN   8780>>ASSIGN
RTN_ERR
      8899**LABEL    8741--CALLALT
RTN_ERR2
      8925**LABEL    8738--CALLALT
S$CU$
      8014**DCL      8480>>ASSIGN   8693>>IF       8786>>IF       8788>>ASSIGN   8793>>ASSIGN
SC_IOERRNF
      8150**DCL-ENT  8608--CALL     8926--CALL
SC_VARRAY
      8151**DCL-ENT  9002--CALL
SET_JERR
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:117  
      8634**LABEL    8365--CALLALT  8583--CALLALT
SET_JERR2
      8937**LABEL    8701--CALLALT
SSIC
      7127**DCL      9032<<ASSIGN   9036<>CALL
SSR$REG
      8141**DCL-ENT  8790--CALL
SST$SSFTCB
      8142**DCL-ENT  9036--CALL
SSU$DELTAGO
      8143**DCL-ENT  8909--CALL
S_CUN
      8015**DCL      8752>>IF
TEMP
      7133**DCL      7185--IMP-SIZ  8399<<ASSIGN   8401<<ASSIGN   8402<<ASSIGN   8404<>CALL     8499<<ASSIGN
      8503>>ASSIGN   8540<<CALLBLT  8541>>ASSIGN   8834<<ASSIGN   8837<<ASSIGN   8890>>IF
TEMP2
      7134**DCL      8846<<ASSIGN   8855<<ASSIGN   8893>>IF
TEXTC.SIZ
      7187**DCL      7188--IMP-SIZ  8513>>ASSIGN   8514>>ASSIGN
TEXTC.TEXT
      7188**DCL      8513>>ASSIGN
TEXTC_CCBUF
      8504**LABEL    8491--GOTO
TEXTC_CMD$
      7137**DCL      8488<<ASSIGN   8490<<ASSIGN   8513>>ASSIGN   8513>>ASSIGN   8514>>ASSIGN
UDB$AUTO
      8144**DCL-ENT  8891--CALL
UDB$PMMEXIT2
      8145**DCL-ENT  8894--CALL     8900--CALL     8905--CALL
UDN$MAGIC
      8146**DCL-ENT  8813--CALL     8889--CALL     9047--CALL
UMD$CHKOPN
      8147**DCL-ENT  8387--CALL
UMD$CLSDRIB
      8148**DCL-ENT  8449--CALL
PL6.E3A0      #001=JLL$LINK File=JLL$LDLNK.:E05TSI                               TUE 07/29/97 23:24 Page:118  
VNO IN PROCEDURE OPNV
      8978**DCL      8977--PROC     8980>>ASSIGN   8984>>ASSIGN   8989--ENTRY    8991>>ASSIGN
WFVP_ERR1
      8432**LABEL    8431--CALLALT
WFVP_ERR2
      8627**LABEL    8627--CALLALT
XCONF
      7138**DCL      8708<<ASSIGN   8827>>IF
ZAP_USER
      8636**LABEL    8523--CALLALT  8551--CALLALT  8709--CALLALT  8939--CALLALT
