

09:14 AUG 09 '97 Z8E_BUFFERS.:Z8A6SI/Z8E_BUFFERS.:Z8A6TUI                  1    
    1    * /*M* Z8E_BUFFERS  -- Declaration of I/O buffers */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7
    8      %EQU SOURCE_FILE = 0;  /* File number code for original source file */
    9      %EQU EXPSRC_FILE = 1;  /* File number for expanded source file */
   10
   11
   12      /* Scanner state information */
   13
   14      %EQU SCANNER_STATE_NEW_TOKEN = 0;
   15      %EQU SCANNER_STATE_RESTART_PERIOD = 1;
   16      %EQU SCANNER_STATE_RESTART_EQUAL = 2;
   17
   18      DCL SCANNER_STATE SBIN WORD EXT INIT(%SCANNER_STATE_NEW_TOKEN);
   19
   20
   21      /* Scanner buffer data structures */
   22
   23      %EQU MAX_INPUT_LINE_LENGTH = 256;
   24
   25      %MACRO BUFFER_INFO;
   26           2 COLUMN                SBIN WORD,
   27           2 LEVEL                 SBIN WORD,
   28           2 NEXT$                  PTR,
   29           2 STRIPPED_LINE_LENGTH  SBIN WORD,
   30           2 ISN                   SBIN WORD,
   31           2 ESN                   CHAR(10),
   32           2 CLASS                 SBIN WORD,
   33
   34           2 LINE_TYPE ALIGNED,
   35            3 CONTINUATION         BOOLEAN,
   36            3 COPY_LINE            BOOLEAN,
   37            3 UPDATE_LINE          BOOLEAN,
09:14 AUG 09 '97 Z8E_BUFFERS.:Z8A6SI/Z8E_BUFFERS.:Z8A6TUI                  2    
   38            3 IDS_LINE             BOOLEAN,
   39            3 OLD_REP_LINE         BOOLEAN,
   40            3 DEBUG_LINE           BOOLEAN,
   41            3 NULL_COMMENT_LINE    BOOLEAN,
   42            3 CONTINUATION_COL_8_11_ERROR BOOLEAN,
   43            3 NEW_REP_LINE         BOOLEAN,
   44            3 SQL_OLD_REP_LINE     BOOLEAN,
   45            3 SQL_NEW_REP_LINE     BOOLEAN,
   46            3 SQL_COMMENT_LINE     BOOLEAN,
   47            3 SQL_LINE             BOOLEAN,
   48            3 DB_LINE              BOOLEAN,
   49    *       3 COPY_REPL_LINE       BOOLEAN,
   50    *       3 SPLIT_C_R_LINE       BOOLEAN,
   51    *       3 *                    BIT(11) UNAL,
   52    *       3 SPLIT_COLUMN         UBIN BYTE CALIGNED,
   53           2 FLAGS REDEF LINE_TYPE BIT(36) UNAL,
   54
   55           2 LINE_LENGTH           SBIN WORD,
   56      %MEND;
   57
   58      %EQU MAX_INPUT_BUFFER_LEN = MAX_INPUT_LINE_LENGTH/4 + 11 /* LEN OF BUFFER_INFO */;
   59
   60
   61      DCL CURRENT_BUFFER$   PTR EXT INIT (ADDR(NIL));
   62      DCL LOOKAHEAD_BUFFER$ PTR EXT INIT (ADDR(NIL));
   63
   64      DCL CURRENT_LINE_LEVEL SBIN WORD EXT INIT(0);
   65
   66      DCL LINE_LIST$ PTR EXT INIT(ADDR(NIL));
   67
   68      DCL 1 BUFFER EXT,
   69           2 COLUMN                SBIN WORD,
   70           2 CLASS                 SBIN WORD,
   71           2 ISN                   SBIN WORD,
   72           2 LEVEL                 SBIN WORD,
   73           2 LINE_TYPE UNAL,
   74            3 CONTINUATION         BOOLEAN,
09:14 AUG 09 '97 Z8E_BUFFERS.:Z8A6SI/Z8E_BUFFERS.:Z8A6TUI                  3    
   75            3 DEBUG_LINE           BOOLEAN,
   76            3 LINE_CONTINUED       BOOLEAN,
   77            3 *                    BIT(33),
   78           2 LINE_LENGTH           SBIN WORD,
   79           2 LINE$                 PTR;
   80
   81      DCL BUFFER_LINE              CHAR(BUFFER.LINE_LENGTH) BASED (BUFFER.LINE$);
   82
   83      DCL 1 FILL_BUFFER ALIGNED BASED (LOOKAHEAD_BUFFER$),
   84           %BUFFER_INFO;
   85           2 SOURCE_LINE           CHAR(FILL_BUFFER.LINE_LENGTH);
   86
   87      DCL 1 EXP_SRC_BUFF ALIGNED BASED (LOOKAHEAD_BUFFER$),
   88            2 *(0:3) SBIN,
   89            2 BUFF,
   90              3 *(0:5) SBIN,
   91              3 LINE_LENGTH SBIN,
   92              3 SOURCE_LINE CHAR (EXP_SRC_BUFF.BUFF.LINE_LENGTH);
   93
   94      %EQU FIXED_FORMAT_MAX_LINE_LENGTH = 80 ;
   95      %EQU MAX_FIXED_FORMAT_LINE_READ   = 72 ;   /* Column 73 since line starts on col. 0 */
   96
   97
   98      DCL ORIGINAL_ISN SBIN WORD EXT INIT(0);
   99      DCL EXPANDED_ISN SBIN WORD EXT INIT(0);
  100
  101
  102      /* ISN_FOR_EXP_SRC designates the record number at which to start
  103      reading the expanded source file instead of the original source
  104      input file in order to produce listings for phase 5.  If negative
  105      all records should be read from the source input file.  If zero, all
  106      records should be read from the expanded source file.  Otherwise,
  107      ISN_FOR_EXP_SRC records will be read from the original source input
  108      file, then all remaining records will be read from the expanded source
  109      file.
  110      */
  111      DCL ISN_FOR_EXP_SRC SBIN WORD EXT INIT(-1);
09:14 AUG 09 '97 Z8E_BUFFERS.:Z8A6SI/Z8E_BUFFERS.:Z8A6TUI                  4    
  112      %EJECT;

09:14 AUG 09 '97 Z8E_BUFFERS.:Z8A6SI/Z8E_BUFFERS.:Z8A6TUI                  5    
  113
  114
  115      %MACRO INIT_BUFFER (@POINTER = LOOKAHEAD_BUFFER$,
  116                          @ESN     = ' ',
  117                          @COLUMN  = 0,
  118                          @CLASS   = 0,
  119                          @ISN     = ORIGINAL_ISN,
  120                          @LEVEL   = 0,
  121                          @NEXT$   = "ADDR(NIL)",
  122                          @OLD_REP_LINE = ,
  123                          @NEW_REP_LINE = ,
  124                          @COPY_LINE    = ,
  125                          @UPDATE_LINE  = ,
  126                          @LINE_LENGTH = 0,
  127                          @STRIPPED_LINE_LENGTH = 0,
  128                          @SOURCE_LINE = );
  129        DO;
  130          @POINTER -> FILL_BUFFER.ESN = @ESN;
  131          @POINTER -> FILL_BUFFER.COLUMN = @COLUMN;
  132          @POINTER -> FILL_BUFFER.CLASS = @CLASS ;
  133          @POINTER -> FILL_BUFFER.ISN = @ISN;
  134          @POINTER -> FILL_BUFFER.LEVEL = @LEVEL;
  135          @POINTER -> FILL_BUFFER.NEXT$ = @NEXT$;
  136          @POINTER -> FILL_BUFFER.FLAGS = FALSE;
  137          @POINTER -> FILL_BUFFER.STRIPPED_LINE_LENGTH = @STRIPPED_LINE_LENGTH;
  138          @POINTER -> FILL_BUFFER.LINE_LENGTH = @LINE_LENGTH;
  139
  140          %IF (TEXTCHAR(@OLD_REP_LINE) ~= '');
  141            @POINTER -> FILL_BUFFER.LINE_TYPE.OLD_REP_LINE = @OLD_REP_LINE;
  142          %ENDIF;
  143
  144          %IF (TEXTCHAR(@NEW_REP_LINE) ~= '');
  145            @POINTER -> FILL_BUFFER.LINE_TYPE.NEW_REP_LINE = @NEW_REP_LINE;
  146          %ENDIF;
  147
  148          %IF (TEXTCHAR(@COPY_LINE) ~= '');
  149            @POINTER -> FILL_BUFFER.LINE_TYPE.COPY_LINE = @COPY_LINE;
09:14 AUG 09 '97 Z8E_BUFFERS.:Z8A6SI/Z8E_BUFFERS.:Z8A6TUI                  6    
  150          %ENDIF;
  151
  152          %IF (TEXTCHAR(@UPDATE_LINE) ~= '');
  153            @POINTER -> FILL_BUFFER.LINE_TYPE.UPDATE_LINE = @UPDATE_LINE;
  154          %ENDIF;
  155
  156          %IF (TEXTCHAR(@SOURCE_LINE) ~= '');
  157            @POINTER -> FILL_BUFFER.SOURCE_LINE = @SOURCE_LINE;
  158          %ENDIF;
  159        END;
  160      %MEND;

