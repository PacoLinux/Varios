VERSION A06

PL6.E3A0      #001=Z8PD$PCA_DOCUMENT File=Z8PD.:Z8A6TSI                          SAT 08/09/97 09:39 Page:1    
        1        1         /*M* Z8PD$PCA_DOCUMENT             */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8         Z8PD$PCA_DOCUMENT : PROC NOAUTO;
        9        9    1              RETURN;
       10       10
       11       11         /*P*
       12       12              NAME: Z8PD$PCA_DOCUMENT
       13       13              PURPOSE: Explain purpose, function, use of and modification of the
       14       14                       the PSEUDO CODE ASSEMBLER.
       15       15         */
       16       16
       17       17         /*F*
       18       18
       19       19              NAME: PURPOSE
       20       20              AUTHORS: D. MOORE            (07/21/82)
       21       21
       22       22               The pseudocode assembler is a tool that generates
       23       23         data in a set format from pseudocode.  The data is to be
       24       24         used by the code generator phase of COBOL 8x.  Prior to
       25       25         development of the PCA, the  macro facility of GMAP6 was
       26       26         used to generate the pseudocode data.  The PCA was written
       27       27         because GMAP presented several limitations in additon to
       28       28         the fact that it does not exist on MULTICS.
       29       29
       30       30               The PCA has less restrictions on directive names than
       31       31         GMAP and the PCA will simplify the use of multiple pseudo-
       32       32         code modules.  It allows for changes in triad id numbers
       33       33         without requiring recompilation of the pseudocode modules.
       34       34         Because the PCA was written using LALR1 it provides more
       35       35         useflul error reporting than GMAP.  Additions and deletions
       36       36         of directives is fairly easy if the operation of LALR1 based
       37       37         systems is understood.
PL6.E3A0      #001=Z8PD$PCA_DOCUMENT File=Z8PD.:Z8A6TSI                          SAT 08/09/97 09:39 Page:2    
       38       38                                                             */
       39       39         %EJECT;
PL6.E3A0      #001=Z8PD$PCA_DOCUMENT File=Z8PD.:Z8A6TSI                          SAT 08/09/97 09:39 Page:3    
       40       40
       41       41         /*F*
       42       42
       43       43              NAME: OVERVIEW
       44       44              AUTHORS: D. MOORE          (07/21/82)
       45       45
       46       46               The PCA is a one pass assembler that creates three tables
       47       47         from the PCA input.  The largest table generated can be thought
       48       48         of as the 'machine code' generated by other assemblers.   This
       49       49         'machine code' is interpreted by phase 4 of the COBOL 8x
       50       50         compiler and contains the logic of the code generator. The other
       51       51         tables (the PEPD and DEP) contain entries that point into the
       52       52         main table and are used by the code generator to locate the
       53       53         section of pseudo-code needed to evaluate a given triad.
       54       54               The output is in the form of a PL6 program.  This was
       55       55         done to avoid the problem of creating an object unit and to
       56       56         take advantage of the preprocessor facility of PL6.
       57       57
       58       58               The PCA was written using LALR1, which is a parser
       59       59         generating system.  A grammar was written as input to
       60       60         LALR1.  The grammar contains semantic actions which cause
       61       61         a call to Z8PA$SEMANTICS.  Z8PA$SEMANTICS is a module that contains
       62       62         a case statement indexed by an integer representing the action
       63       63         to be performed.
       64       64
       65       65               As a PCA directive is being processed, information
       66       66         about it is accumulated in a structure called P_CODE. At
       67       67         the end of the directives operand list,  a routine called
       68       68         GEN_P_CODE is called.  It consists of a case statement indexed
       69       69         by the directive to be generated.   The object code for
       70       70         each directive is therefore output before the next
       71       71         directive begins to be processed by Z8PA$SEMANTICS.  Forward references to labels
       72       72         are handled by giving each reference a unique preprocessor
       73       73         variable which will be defined at the end of the PCA program
       74       74         in a  file that is %included in the object file.
       75       75            */
       76       76         %EJECT;
PL6.E3A0      #001=Z8PD$PCA_DOCUMENT File=Z8PD.:Z8A6TSI                          SAT 08/09/97 09:39 Page:4    
       77       77
       78       78         /*F*
       79       79
       80       80              NAME: USE_OF_THE_PCA
       81       81              CHAPTER: INPUT
       82       82              AUTHORS: D.MOORE             (07/21/82)
       83       83
       84       84               Input to the PCA is a list of pseudocode directives
       85       85         and pseudo-pseudocode directives with a BEGIN_PROGRAM line
       86       86         preceeding the list and an END_PROGRAM line following the list.
       87       87         Pseudocode directives are described in the grammar.
       88       88         Pseudo-pseudocode directives are described below and in
       89       89         the grammar.  The PCA is a free format assembler and it
       90       90         is case insensitive.
       91       91
       92       92               The BEGIN_PROGRAM line should appear as follows:
       93       93
       94       94         BEGIN_PROGRAM <proc name> <segment name> <segment number>
       95       95
       96       96         where <proc name> is the name of the procedure that will
       97       97                  be called by phase 4 to initialize the PEPD and DEP tables;
       98       98               <segment name> is the name of the pseudocode segment;
       99       99               <segment number> is the number of the pseudocode segment.
      100      100
      101      101               The END_PROGRAM must appear as the last token in the
      102      102         input file.  Its function is to signal the end of assembly.
      103      103
      104      104         */
      105      105         %EJECT;
PL6.E3A0      #001=Z8PD$PCA_DOCUMENT File=Z8PD.:Z8A6TSI                          SAT 08/09/97 09:39 Page:5    
      106      106         /*F*
      107      107
      108      108              NAME: USE_OF_THE_PCA_CONT
      109      109              CHAPTER: OUTPUT
      110      110              AUTHORS: D. MOORE            (07/21/82)
      111      111
      112      112               The PCA does output to 3 files.  It writes a listing to one
      113      113         file.  The tables are written to another file called the object file.
      114      114         Preprocessor variable definitions are written to a third file.
      115      115         The preprocessor variables are created when labels are
      116      116         referenced to allow for forward references.
      117      117
      118      118               The tables generated are: 1) Assembled pseudo-
      119      119         code in the form of an init attribute to a table that was
      120      120         named in the BEGIN_PROGRAM line. 2) The DEP table declaration along
      121      121         with assignment statements that must be executed to initialize it.
      122      122         3) The PEPD table declaration along with its initializtion that
      123      123         must be executed.
      124      124
      125      125         NOTE: Symbol references in the source program are passed onto
      126      126         the object tables after having a % appended to the front of them to
      127      127         make them into PL6 preprocessor variables.  These symbols must
      128      128         be defined using the ENTER_PCA pseudo-pseudocode directive
      129      129         described below.
      130      130         */
      131      131         %EJECT;
PL6.E3A0      #001=Z8PD$PCA_DOCUMENT File=Z8PD.:Z8A6TSI                          SAT 08/09/97 09:39 Page:6    
      132      132         /*F*
      133      133
      134      134              NAME: USE_OF_THE_PCA_CONT
      135      135              CHAPTER: PSEUDO_PSEUDOCODE_DIRECITVES
      136      136              AUTHORS: D. MOORE                 (07/21/82)
      137      137
      138      138               Following is a list of the pseudo-pseudocode directives
      139      139         along with descriptions of what each does.
      140      140              EQUATE :   <label> EQUATE <label>
      141      141                               or
      142      142                         <label> EQUATE INTEGER
      143      143                     function: same as in GMAP.
      144      144
      145      145              NULL : generates no code.
      146      146
      147      147              PAGE : Causes a page eject in the listing.
      148      148
      149      149              START :     <label> START
      150      150                                   OR
      151      151                          <label> START PEPD
      152      152                                   OR
      153      153                          <label> START DEP
      154      154                    function:  The first two formats generate an entry in the
      155      155                          PEPD table using the label as a preprocessor
      156      156                          variable to determine which element of the PEPD to
      157      157                          initialize.  The third format generates an entry
      158      158                          in the DEP table using the label in the same way
      159      159                          as in the PEPD case.
      160      160
      161      161              ENTER_PL6 :
      162      162                        function: Causes the code starting on the following
      163      163                              line to be echoed to the object file.  Echo is
      164      164                              terminated when an ENTER_PCA is encountered.
      165      165                              Anything else on the ENTER_PCA line is ignored.
      166      166                              Assembly is resumed on the following line.
      167      167                              This directive can be used to insert %INCLUDE
      168      168                              information into the object table.  If this
PL6.E3A0      #001=Z8PD$PCA_DOCUMENT File=Z8PD.:Z8A6TSI                          SAT 08/09/97 09:39 Page:7    
      169      169                              directive occurs before any generative
      170      170                              directives then echoed lines will appear
      171      171                              before the major table declaration.
      172      172
      173      173         */
      174      174         %EJECT;
PL6.E3A0      #001=Z8PD$PCA_DOCUMENT File=Z8PD.:Z8A6TSI                          SAT 08/09/97 09:39 Page:8    
      175      175         /*F*
      176      176
      177      177              NAME: USE_OF_THE_PCA_CONT
      178      178              CHAPTER: ABOUT_THE_GENI_DIRECTIVE
      179      179              AUTHORS: D. MOORE                 (02/08/83)
      180      180
      181      181              The GENI directive allows as one of its operand most
      182      182         of the syntax allowed by GMAP for an assembly language
      183      183         instruction.  This includes all types of address modification
      184      184         and the instructions that have unusual syntax.  However
      185      185         if something does not quite work in the GENI directive
      186      186         the information can be put into the instruction word
      187      187         using the MOVE directive and the variable PCOM.GABS.
      188      188         This variable is ORed onto the instruction word in all cases.
      189      189
      190      190              The VFD GMAP pseudo-instruction does not work
      191      191         exactly the same way in the PCA as it does in GMAP.
      192      192         The PCA handles only octal and decimal field specifiers.
      193      193         The PCA does not handle arithmetic and boolean expressions
      194      194         in the VFD.  When entering a base specifier, a blank
      195      195         space must follow the letter used as the specifier.
      196      196              For example:
      197      197                  GENI (VFD O3/4,D8/15) {Won't work}
      198      198                  GENI (VFD O 3/4,D 8/15) {Will work}
      199      199
      200      200         */
      201      201         %EJECT;
PL6.E3A0      #001=Z8PD$PCA_DOCUMENT File=Z8PD.:Z8A6TSI                          SAT 08/09/97 09:39 Page:9    
      202      202         /*F*
      203      203
      204      204              NAME: USE_OF_THE_PCA_CONT
      205      205              CHAPTER: USEFULL_STUFF_TO_KNOW
      206      206              AUTHOR: D. MOORE              (07/21/82)
      207      207
      208      208         COMMENT FORMAT
      209      209         --------------
      210      210
      211      211               Comments begin with '{' and  end with '}'.  They may
      212      212         appear anywhere in the source program and can span more than
      213      213         one line.
      214      214
      215      215         LOCAL LABELS
      216      216         ------------
      217      217
      218      218               Local labels can exist between the definition of two
      219      219         major labels.  The name of the local label must begin with a
      220      220         '$'.  When a major label definition occurs(ie. a labeled
      221      221         directive occurs) the local label table is returned to free
      222      222         space.  Local labels do not appear in the cross reference.
      223      223
      224      224         CURRENT PCA LIMITATIONS
      225      225         -----------------------
      226      226
      227      227               Symbols can be a maximum of 30 characters long.
      228      228               Labels can be a maximum of 30 characters long.
      229      229
      230      230         INVOKING THE PCA
      231      231         ----------------
      232      232
      233      233         EXAMPLE OF USE
      234      234         !SET M$SO *LABEL_DEFS
      235      235         !PCA.DWMC80 PCA_PROGRAM OVER PCA_OU,PCA_LS(LS,OU)
      236      236
      237      237               The file *LABEL_DEFS is where the created preprocessor
      238      238         variables will be defined.  This file is automatically
PL6.E3A0      #001=Z8PD$PCA_DOCUMENT File=Z8PD.:Z8A6TSI                          SAT 08/09/97 09:39 Page:10   
      239      239         included in the object file.  PCA_OU must then be compiled
      240      240         using PL6 to create an object unit which can then be link into
      241      241         the COBOL8x compiler.
      242      242
      243      243         ASSEMBLY OPTIONS
      244      244         ----------------
      245      245
      246      246              LS - Generate a listing in M$LO.
      247      247              OU - Generate object files in the form of
      248      248                   a PL6 program in M$OU.
      249      249              XR - Generate a cross reference in M$LO.  Will
      250      250                   be appended to the end of the listing if
      251      251                   LS has been specified.
      252      252
      253      253              NOTE: An N preceeding any of the above causes
      254      254              that option to be off.
      255      255
      256      256              DEFAULTS are: OU, LS, XR
      257      257
      258      258         BREAK PROCESSING
      259      259         ----------------
      260      260
      261      261               When using the PCA online, entering the break key will cause
      262      262         an indication of what the PCA is doing to be output to the terminal.
      263      263
      264      264         DIAGNOSTIC OUTPUT
      265      265         -----------------
      266      266
      267      267               By setting M$DO to a file other than the listing file, the
      268      268         diagnostic output can be directed to to the file pointed to by M$DO
      269      269         in addition to being directed to the listing file.
      270      270
      271      271         */
      272      272         %EJECT;
PL6.E3A0      #001=Z8PD$PCA_DOCUMENT File=Z8PD.:Z8A6TSI                          SAT 08/09/97 09:39 Page:11   
      273      273         /*F*
      274      274
      275      275             NAME: ADDING_DIRECTIVES
      276      276             AUTHORS: D. MOORE          (07/26/82)
      277      277
      278      278
      279      279               This chapter will attempt to explain how to add a directive
      280      280         to the PCA functionality.   The following will assume a basic knowledge
      281      281         of LALR1.
      282      282
      283      283               A general format for the grammar of a directive is as
      284      284         follows:
      285      285
      286      286               <directive_type> ::= DIRECTIVE_NAME {PUT_SIMPLE_DIR} <operand_list>
      287      287
      288      288         The semantic action PUT_SIMPLE_DIR is important because it
      289      289         causes the name and symbol number of the directive to
      290      290         be stored in the P_CODE structure (see OVERVIEW chapter above).
      291      291         When the pseudocode data is generated the symbol number is
      292      292         used to index into a case statement which performs directive
      293      293         specific actions needed in code generation.   Also
      294      294         remember to store each operand that is necessary for
      295      295         pseudocode data generation in the P_CODE structure.
      296      296         Most of the semantic actions needed for operand storage
      297      297         probably exist in other directives' grammar and can be
      298      298         used in any added grammar segments.
      299      299
      300      300               When a directive is added to the grammar, the name
      301      301         of the directive must be appended to the end of the order
      302      302         list at the beginning of the grammar.  Do not change the
      303      303         existing order list, only add to the end.  An entry must then
      304      304         be made to the file Z8P_ORDER_DEF.  The entry must define a
      305      305         PL6 preprocessor variable whose name is identical to the
      306      306         name of the new directive and whose value is equal to the
      307      307         directives position in the order list in the grammar.  The
      308      308         preprocessor variable is used in the case entries in the
      309      309         GEN_P_CODE procedure in the Z8PA$SEMANTICS module. More on the
PL6.E3A0      #001=Z8PD$PCA_DOCUMENT File=Z8PD.:Z8A6TSI                          SAT 08/09/97 09:39 Page:12   
      310      310         GEN_P_CODE procedure later.
      311      311
      312      312               An understanding of other directives will be helpfull
      313      313         in finding  semantic actions that have already been defined and
      314      314         which perform  needed actions in the new directive.  If the
      315      315         syntax for the directives to be added is the same as that
      316      316         of an existing directive, then no new productions need be
      317      317         added.  All that is necessary in this case is to add the
      318      318         new directive name as an alternative in the grammar for
      319      319         the existing identical directive.  In all cases though,
      320      320         remember to add to the order list and to the ORDER_DEF file.
      321      321
      322      322               If new productions are necessary, then you will have
      323      323         to define a new 'type' and this type will have to be
      324      324         refered to as an alternative in either the production
      325      325         <one_word_dir> or <two_word_dir> depending on whether
      326      326         the pseudocode generated by the directive will be one
      327      327         or two words long.
      328      328
      329      329               In the semantics module, when GEN_P_CODE is called, it is
      330      330         assumed that all the information needed to generate the pseudocode
      331      331         data is contained in the P_CODE structure.   GEN_P_CODE consist of
      332      332         a case statement followed by code needed to output the pseudocode
      333      333         data to the object file.  In the case of the two word directive,
      334      334         the first three operands in the OPERAND array in the P_CODE structure
      335      335         are output to the object table unchanged.  In the case of the one
      336      336         word directive, only the first operand is output.   The purpose of the
      337      337         case statement at the beginning of the GEN_P_CODE procedure is
      338      338         to  provide a place where specific directives can, if needed,
      339      339         modify the P_CODE structure to get the operands in a form that
      340      340         is correct for output directly to the object table.  If no
      341      341         modification of the P_CODE structure is necessary then a null
      342      342         entry is needed in the case statement.   If there is no
      343      343         entry for the directive in the case statement an error will be
      344      344         output.
      345      345
      346      346         */
PL6.E3A0      #001=Z8PD$PCA_DOCUMENT File=Z8PD.:Z8A6TSI                          SAT 08/09/97 09:39 Page:13   
      347      347    1    END Z8PD$PCA_DOCUMENT;

PL6.E3A0      #001=Z8PD$PCA_DOCUMENT File=Z8PD.:Z8A6TSI                          SAT 08/09/97 09:39 Page:14   
      No diagnostics issued in procedure Z8PD$PCA_DOCUMENT.

   Procedure Z8PD$PCA_DOCUMENT requires 3 words for executable code.
   Procedure Z8PD$PCA_DOCUMENT is declared NOAUTO and requires 2 words of local(STATIC) storage.

    No errors detected in file Z8PD.:Z8A6TSI    .

PL6.E3A0      #001=Z8PD$PCA_DOCUMENT File=Z8PD.:Z8A6TSI                          SAT 08/09/97 09:39 Page:15   

 Object Unit name= Z8PD$PCA_DOCUMENT                          File name= Z8PD.:Z8A6TOU
 UTS= AUG 09 '97 09:39:22.72 SAT                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Data  even  none     2      2  Z8PD$PCA_DOCUMENT
    1   Proc  even  none     3      3  Z8PD$PCA_DOCUMENT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Std        0  Z8PD$PCA_DOCUMENT
PL6.E3A0      #001=Z8PD$PCA_DOCUMENT File=Z8PD.:Z8A6TSI                          SAT 08/09/97 09:39 Page:16   


        1        1         /*M* Z8PD$PCA_DOCUMENT             */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8         Z8PD$PCA_DOCUMENT : PROC NOAUTO;

      8  1 000000   000000 741200 0     Z8PD$PCA_DO* STX1  ! 0

        9        9    1              RETURN;

      9  1 000001   000000 221200 0                  LDX1  ! 0
         1 000002   000001 702211                    TSX2  ! 1,X1
       10       10
       11       11         /*P*
       12       12              NAME: Z8PD$PCA_DOCUMENT
       13       13              PURPOSE: Explain purpose, function, use of and modification of the
       14       14                       the PSEUDO CODE ASSEMBLER.
       15       15         */
       16       16
       17       17         /*F*
       18       18
       19       19              NAME: PURPOSE
       20       20              AUTHORS: D. MOORE            (07/21/82)
       21       21
       22       22               The pseudocode assembler is a tool that generates
       23       23         data in a set format from pseudocode.  The data is to be
       24       24         used by the code generator phase of COBOL 8x.  Prior to
       25       25         development of the PCA, the  macro facility of GMAP6 was
       26       26         used to generate the pseudocode data.  The PCA was written
       27       27         because GMAP presented several limitations in additon to
       28       28         the fact that it does not exist on MULTICS.
       29       29
       30       30               The PCA has less restrictions on directive names than
PL6.E3A0      #001=Z8PD$PCA_DOCUMENT File=Z8PD.:Z8A6TSI                          SAT 08/09/97 09:39 Page:17   
       31       31         GMAP and the PCA will simplify the use of multiple pseudo-
       32       32         code modules.  It allows for changes in triad id numbers
       33       33         without requiring recompilation of the pseudocode modules.
       34       34         Because the PCA was written using LALR1 it provides more
       35       35         useflul error reporting than GMAP.  Additions and deletions
       36       36         of directives is fairly easy if the operation of LALR1 based
       37       37         systems is understood.
       38       38                                                             */
       39       39         %EJECT;
PL6.E3A0      #001=Z8PD$PCA_DOCUMENT File=Z8PD.:Z8A6TSI                          SAT 08/09/97 09:39 Page:18   
       40       40
       41       41         /*F*
       42       42
       43       43              NAME: OVERVIEW
       44       44              AUTHORS: D. MOORE          (07/21/82)
       45       45
       46       46               The PCA is a one pass assembler that creates three tables
       47       47         from the PCA input.  The largest table generated can be thought
       48       48         of as the 'machine code' generated by other assemblers.   This
       49       49         'machine code' is interpreted by phase 4 of the COBOL 8x
       50       50         compiler and contains the logic of the code generator. The other
       51       51         tables (the PEPD and DEP) contain entries that point into the
       52       52         main table and are used by the code generator to locate the
       53       53         section of pseudo-code needed to evaluate a given triad.
       54       54               The output is in the form of a PL6 program.  This was
       55       55         done to avoid the problem of creating an object unit and to
       56       56         take advantage of the preprocessor facility of PL6.
       57       57
       58       58               The PCA was written using LALR1, which is a parser
       59       59         generating system.  A grammar was written as input to
       60       60         LALR1.  The grammar contains semantic actions which cause
       61       61         a call to Z8PA$SEMANTICS.  Z8PA$SEMANTICS is a module that contains
       62       62         a case statement indexed by an integer representing the action
       63       63         to be performed.
       64       64
       65       65               As a PCA directive is being processed, information
       66       66         about it is accumulated in a structure called P_CODE. At
       67       67         the end of the directives operand list,  a routine called
       68       68         GEN_P_CODE is called.  It consists of a case statement indexed
       69       69         by the directive to be generated.   The object code for
       70       70         each directive is therefore output before the next
       71       71         directive begins to be processed by Z8PA$SEMANTICS.  Forward references to labels
       72       72         are handled by giving each reference a unique preprocessor
       73       73         variable which will be defined at the end of the PCA program
       74       74         in a  file that is %included in the object file.
       75       75            */
       76       76         %EJECT;
PL6.E3A0      #001=Z8PD$PCA_DOCUMENT File=Z8PD.:Z8A6TSI                          SAT 08/09/97 09:39 Page:19   
       77       77
       78       78         /*F*
       79       79
       80       80              NAME: USE_OF_THE_PCA
       81       81              CHAPTER: INPUT
       82       82              AUTHORS: D.MOORE             (07/21/82)
       83       83
       84       84               Input to the PCA is a list of pseudocode directives
       85       85         and pseudo-pseudocode directives with a BEGIN_PROGRAM line
       86       86         preceeding the list and an END_PROGRAM line following the list.
       87       87         Pseudocode directives are described in the grammar.
       88       88         Pseudo-pseudocode directives are described below and in
       89       89         the grammar.  The PCA is a free format assembler and it
       90       90         is case insensitive.
       91       91
       92       92               The BEGIN_PROGRAM line should appear as follows:
       93       93
       94       94         BEGIN_PROGRAM <proc name> <segment name> <segment number>
       95       95
       96       96         where <proc name> is the name of the procedure that will
       97       97                  be called by phase 4 to initialize the PEPD and DEP tables;
       98       98               <segment name> is the name of the pseudocode segment;
       99       99               <segment number> is the number of the pseudocode segment.
      100      100
      101      101               The END_PROGRAM must appear as the last token in the
      102      102         input file.  Its function is to signal the end of assembly.
      103      103
      104      104         */
      105      105         %EJECT;
PL6.E3A0      #001=Z8PD$PCA_DOCUMENT File=Z8PD.:Z8A6TSI                          SAT 08/09/97 09:39 Page:20   
      106      106         /*F*
      107      107
      108      108              NAME: USE_OF_THE_PCA_CONT
      109      109              CHAPTER: OUTPUT
      110      110              AUTHORS: D. MOORE            (07/21/82)
      111      111
      112      112               The PCA does output to 3 files.  It writes a listing to one
      113      113         file.  The tables are written to another file called the object file.
      114      114         Preprocessor variable definitions are written to a third file.
      115      115         The preprocessor variables are created when labels are
      116      116         referenced to allow for forward references.
      117      117
      118      118               The tables generated are: 1) Assembled pseudo-
      119      119         code in the form of an init attribute to a table that was
      120      120         named in the BEGIN_PROGRAM line. 2) The DEP table declaration along
      121      121         with assignment statements that must be executed to initialize it.
      122      122         3) The PEPD table declaration along with its initializtion that
      123      123         must be executed.
      124      124
      125      125         NOTE: Symbol references in the source program are passed onto
      126      126         the object tables after having a % appended to the front of them to
      127      127         make them into PL6 preprocessor variables.  These symbols must
      128      128         be defined using the ENTER_PCA pseudo-pseudocode directive
      129      129         described below.
      130      130         */
      131      131         %EJECT;
PL6.E3A0      #001=Z8PD$PCA_DOCUMENT File=Z8PD.:Z8A6TSI                          SAT 08/09/97 09:39 Page:21   
      132      132         /*F*
      133      133
      134      134              NAME: USE_OF_THE_PCA_CONT
      135      135              CHAPTER: PSEUDO_PSEUDOCODE_DIRECITVES
      136      136              AUTHORS: D. MOORE                 (07/21/82)
      137      137
      138      138               Following is a list of the pseudo-pseudocode directives
      139      139         along with descriptions of what each does.
      140      140              EQUATE :   <label> EQUATE <label>
      141      141                               or
      142      142                         <label> EQUATE INTEGER
      143      143                     function: same as in GMAP.
      144      144
      145      145              NULL : generates no code.
      146      146
      147      147              PAGE : Causes a page eject in the listing.
      148      148
      149      149              START :     <label> START
      150      150                                   OR
      151      151                          <label> START PEPD
      152      152                                   OR
      153      153                          <label> START DEP
      154      154                    function:  The first two formats generate an entry in the
      155      155                          PEPD table using the label as a preprocessor
      156      156                          variable to determine which element of the PEPD to
      157      157                          initialize.  The third format generates an entry
      158      158                          in the DEP table using the label in the same way
      159      159                          as in the PEPD case.
      160      160
      161      161              ENTER_PL6 :
      162      162                        function: Causes the code starting on the following
      163      163                              line to be echoed to the object file.  Echo is
      164      164                              terminated when an ENTER_PCA is encountered.
      165      165                              Anything else on the ENTER_PCA line is ignored.
      166      166                              Assembly is resumed on the following line.
      167      167                              This directive can be used to insert %INCLUDE
      168      168                              information into the object table.  If this
PL6.E3A0      #001=Z8PD$PCA_DOCUMENT File=Z8PD.:Z8A6TSI                          SAT 08/09/97 09:39 Page:22   
      169      169                              directive occurs before any generative
      170      170                              directives then echoed lines will appear
      171      171                              before the major table declaration.
      172      172
      173      173         */
      174      174         %EJECT;
PL6.E3A0      #001=Z8PD$PCA_DOCUMENT File=Z8PD.:Z8A6TSI                          SAT 08/09/97 09:39 Page:23   
      175      175         /*F*
      176      176
      177      177              NAME: USE_OF_THE_PCA_CONT
      178      178              CHAPTER: ABOUT_THE_GENI_DIRECTIVE
      179      179              AUTHORS: D. MOORE                 (02/08/83)
      180      180
      181      181              The GENI directive allows as one of its operand most
      182      182         of the syntax allowed by GMAP for an assembly language
      183      183         instruction.  This includes all types of address modification
      184      184         and the instructions that have unusual syntax.  However
      185      185         if something does not quite work in the GENI directive
      186      186         the information can be put into the instruction word
      187      187         using the MOVE directive and the variable PCOM.GABS.
      188      188         This variable is ORed onto the instruction word in all cases.
      189      189
      190      190              The VFD GMAP pseudo-instruction does not work
      191      191         exactly the same way in the PCA as it does in GMAP.
      192      192         The PCA handles only octal and decimal field specifiers.
      193      193         The PCA does not handle arithmetic and boolean expressions
      194      194         in the VFD.  When entering a base specifier, a blank
      195      195         space must follow the letter used as the specifier.
      196      196              For example:
      197      197                  GENI (VFD O3/4,D8/15) {Won't work}
      198      198                  GENI (VFD O 3/4,D 8/15) {Will work}
      199      199
      200      200         */
      201      201         %EJECT;
PL6.E3A0      #001=Z8PD$PCA_DOCUMENT File=Z8PD.:Z8A6TSI                          SAT 08/09/97 09:39 Page:24   
      202      202         /*F*
      203      203
      204      204              NAME: USE_OF_THE_PCA_CONT
      205      205              CHAPTER: USEFULL_STUFF_TO_KNOW
      206      206              AUTHOR: D. MOORE              (07/21/82)
      207      207
      208      208         COMMENT FORMAT
      209      209         --------------
      210      210
      211      211               Comments begin with '{' and  end with '}'.  They may
      212      212         appear anywhere in the source program and can span more than
      213      213         one line.
      214      214
      215      215         LOCAL LABELS
      216      216         ------------
      217      217
      218      218               Local labels can exist between the definition of two
      219      219         major labels.  The name of the local label must begin with a
      220      220         '$'.  When a major label definition occurs(ie. a labeled
      221      221         directive occurs) the local label table is returned to free
      222      222         space.  Local labels do not appear in the cross reference.
      223      223
      224      224         CURRENT PCA LIMITATIONS
      225      225         -----------------------
      226      226
      227      227               Symbols can be a maximum of 30 characters long.
      228      228               Labels can be a maximum of 30 characters long.
      229      229
      230      230         INVOKING THE PCA
      231      231         ----------------
      232      232
      233      233         EXAMPLE OF USE
      234      234         !SET M$SO *LABEL_DEFS
      235      235         !PCA.DWMC80 PCA_PROGRAM OVER PCA_OU,PCA_LS(LS,OU)
      236      236
      237      237               The file *LABEL_DEFS is where the created preprocessor
      238      238         variables will be defined.  This file is automatically
PL6.E3A0      #001=Z8PD$PCA_DOCUMENT File=Z8PD.:Z8A6TSI                          SAT 08/09/97 09:39 Page:25   
      239      239         included in the object file.  PCA_OU must then be compiled
      240      240         using PL6 to create an object unit which can then be link into
      241      241         the COBOL8x compiler.
      242      242
      243      243         ASSEMBLY OPTIONS
      244      244         ----------------
      245      245
      246      246              LS - Generate a listing in M$LO.
      247      247              OU - Generate object files in the form of
      248      248                   a PL6 program in M$OU.
      249      249              XR - Generate a cross reference in M$LO.  Will
      250      250                   be appended to the end of the listing if
      251      251                   LS has been specified.
      252      252
      253      253              NOTE: An N preceeding any of the above causes
      254      254              that option to be off.
      255      255
      256      256              DEFAULTS are: OU, LS, XR
      257      257
      258      258         BREAK PROCESSING
      259      259         ----------------
      260      260
      261      261               When using the PCA online, entering the break key will cause
      262      262         an indication of what the PCA is doing to be output to the terminal.
      263      263
      264      264         DIAGNOSTIC OUTPUT
      265      265         -----------------
      266      266
      267      267               By setting M$DO to a file other than the listing file, the
      268      268         diagnostic output can be directed to to the file pointed to by M$DO
      269      269         in addition to being directed to the listing file.
      270      270
      271      271         */
      272      272         %EJECT;
PL6.E3A0      #001=Z8PD$PCA_DOCUMENT File=Z8PD.:Z8A6TSI                          SAT 08/09/97 09:39 Page:26   
      273      273         /*F*
      274      274
      275      275             NAME: ADDING_DIRECTIVES
      276      276             AUTHORS: D. MOORE          (07/26/82)
      277      277
      278      278
      279      279               This chapter will attempt to explain how to add a directive
      280      280         to the PCA functionality.   The following will assume a basic knowledge
      281      281         of LALR1.
      282      282
      283      283               A general format for the grammar of a directive is as
      284      284         follows:
      285      285
      286      286               <directive_type> ::= DIRECTIVE_NAME {PUT_SIMPLE_DIR} <operand_list>
      287      287
      288      288         The semantic action PUT_SIMPLE_DIR is important because it
      289      289         causes the name and symbol number of the directive to
      290      290         be stored in the P_CODE structure (see OVERVIEW chapter above).
      291      291         When the pseudocode data is generated the symbol number is
      292      292         used to index into a case statement which performs directive
      293      293         specific actions needed in code generation.   Also
      294      294         remember to store each operand that is necessary for
      295      295         pseudocode data generation in the P_CODE structure.
      296      296         Most of the semantic actions needed for operand storage
      297      297         probably exist in other directives' grammar and can be
      298      298         used in any added grammar segments.
      299      299
      300      300               When a directive is added to the grammar, the name
      301      301         of the directive must be appended to the end of the order
      302      302         list at the beginning of the grammar.  Do not change the
      303      303         existing order list, only add to the end.  An entry must then
      304      304         be made to the file Z8P_ORDER_DEF.  The entry must define a
      305      305         PL6 preprocessor variable whose name is identical to the
      306      306         name of the new directive and whose value is equal to the
      307      307         directives position in the order list in the grammar.  The
      308      308         preprocessor variable is used in the case entries in the
      309      309         GEN_P_CODE procedure in the Z8PA$SEMANTICS module. More on the
PL6.E3A0      #001=Z8PD$PCA_DOCUMENT File=Z8PD.:Z8A6TSI                          SAT 08/09/97 09:39 Page:27   
      310      310         GEN_P_CODE procedure later.
      311      311
      312      312               An understanding of other directives will be helpfull
      313      313         in finding  semantic actions that have already been defined and
      314      314         which perform  needed actions in the new directive.  If the
      315      315         syntax for the directives to be added is the same as that
      316      316         of an existing directive, then no new productions need be
      317      317         added.  All that is necessary in this case is to add the
      318      318         new directive name as an alternative in the grammar for
      319      319         the existing identical directive.  In all cases though,
      320      320         remember to add to the order list and to the ORDER_DEF file.
      321      321
      322      322               If new productions are necessary, then you will have
      323      323         to define a new 'type' and this type will have to be
      324      324         refered to as an alternative in either the production
      325      325         <one_word_dir> or <two_word_dir> depending on whether
      326      326         the pseudocode generated by the directive will be one
      327      327         or two words long.
      328      328
      329      329               In the semantics module, when GEN_P_CODE is called, it is
      330      330         assumed that all the information needed to generate the pseudocode
      331      331         data is contained in the P_CODE structure.   GEN_P_CODE consist of
      332      332         a case statement followed by code needed to output the pseudocode
      333      333         data to the object file.  In the case of the two word directive,
      334      334         the first three operands in the OPERAND array in the P_CODE structure
      335      335         are output to the object table unchanged.  In the case of the one
      336      336         word directive, only the first operand is output.   The purpose of the
      337      337         case statement at the beginning of the GEN_P_CODE procedure is
      338      338         to  provide a place where specific directives can, if needed,
      339      339         modify the P_CODE structure to get the operands in a form that
      340      340         is correct for output directly to the object table.  If no
      341      341         modification of the P_CODE structure is necessary then a null
      342      342         entry is needed in the case statement.   If there is no
      343      343         entry for the directive in the case statement an error will be
      344      344         output.
      345      345
      346      346         */
PL6.E3A0      #001=Z8PD$PCA_DOCUMENT File=Z8PD.:Z8A6TSI                          SAT 08/09/97 09:39 Page:28   
      347      347    1    END Z8PD$PCA_DOCUMENT;

PL6.E3A0      #001=Z8PD$PCA_DOCUMENT File=Z8PD.:Z8A6TSI                          SAT 08/09/97 09:39 Page:29   
      No diagnostics issued in procedure Z8PD$PCA_DOCUMENT.
PL6.E3A0      #001=Z8PD$PCA_DOCUMENT File=Z8PD.:Z8A6TSI                          SAT 08/09/97 09:39 Page:30   

 **** Variables and constants ****


   Procedure Z8PD$PCA_DOCUMENT requires 3 words for executable code.
   Procedure Z8PD$PCA_DOCUMENT is declared NOAUTO and requires 2 words of local(STATIC) storage.

    No errors detected in file Z8PD.:Z8A6TSI    .
