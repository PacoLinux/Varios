

CC.C03    File=zbc$type:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=1  
        1         1             /*
        2         2              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        3         3              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        4         4              */
        5         5             /* $Header: type.c,v 3.8 87/03/10 17:51:10 ceriel Exp $ */
        6         6             /*  T Y P E   D E F I N I T I O N   M E C H A N I S M   */
        7         7
        8         8             #include "nofloat:h"
        9         9             #include "nobitfield:h"
       10        10             #include "botch_free:h"
       11        11             #include <alloc:h>
       12        12             #include "Lpars:h"
       13        13             #include "arith:h"
       14        14             #include "type:h"
       15        15             #include "idf:h"
       16        16             #include "def:h"
       17        17             #include "sizes:h"
       18        18             #include "align:h"
       19        19             #include "declar:h"
       20        20
       21        21             struct type *function_of(), *array_of();
       22        22             #ifndef NOBITFIELD
       23        23             struct type *field_of();
       24        24             #endif NOBITFIELD
       25        25
       26        26             /*  To be created dynamically in main() from defaults or from command
       27        27              line parameters.
       28        28             */
       29        29             struct type
       30        30              *char_type = 0, *schar_type = 0, *uchar_type = 0,
       31        31              *short_type = 0, *ushort_type = 0,
       32        32              *word_type = 0, *uword_type = 0,
       33        33              *int_type = 0, *sint_type = 0, *uint_type = 0,
       34        34              *long_type = 0, *ulong_type = 0,
       35        35             #ifndef NOFLOAT
       36        36              *float_type = 0, *double_type = 0,
CC.C03    File=zbc$type:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=2  
       37        37              *ldouble_type = 0,
       38        38             #endif NOFLOAT
       39        39              *void_type = 0, *voidptr_type = 0, *label_type = 0,
       40        40              *string_type = 0, *funint_type = 0, *error_type = 0;
       41        41
       42        42             struct type *pa_type = 0;   /* Pointer-Arithmetic type */
       43        43             static struct type init_type_val = {0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0
                               };
       44        44
       45        45             struct type *
       46        46             create_type(fund)
       47        47              int fund;
       48        48             {
       49        49    1         /* A brand new struct type is created, and its tp_fund set
       50        50    1            to fund.
       51        51    1         */
       52        52    1         register struct type *ntp = new_type();
       53        53    1
       54        54    1         *ntp = init_type_val;
       55        55    1         ntp->tp_fund = fund;
       56        56    1         ntp->tp_size = (arith)-1;
       57        57    1         ntp->tp_formal = (struct formallist *)0;
       58        58    1
       59        59    1         return ntp;
       60        60    1        }
       61        61
       62        62             struct type *
       63        63             construct_type(fund, tp, count, fm)
       64        64              register struct type *tp;
       65        65              arith count; /* for fund == ARRAY && fund == POINTER only */
       66        66              register struct formal *fm; /* for fund == FUNCTION only */
       67        67             {
       68        68    1         /* fund must be a type constructor: FIELD, FUNCTION, POINTER or
       69        69    1            ARRAY. The pointer to the constructed type is returned.
       70        70    1         */
       71        71    1         register struct type *dtp;
       72        72    1
CC.C03    File=zbc$type:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=3  
       73        73    1         switch (fund)  {
       74        74    2        #ifndef NOBITFIELD
       75        75    2         case FIELD:
       76        76    2            dtp = field_of(tp);
       77        77    2            break;
       78        78    2        #endif NOBITFIELD
       79        79    2
       80        80    2         case FUNCTION:
       81        81    2            if (tp->tp_fund == FUNCTION)  {
       82        82    3               error("function cannot yield function");
       83        83    3               return error_type;
       84        84    3            }
       85        85    2            if (tp->tp_fund == ARRAY)  {
       86        86    3               error("function cannot yield array");
       87        87    3               return error_type;
       88        88    3            }
       89        89    2
       90        90    2            dtp = function_of(tp, fm);
       91        91    2            break;
       92        92    2         case POINTER:
       93        93    2            dtp = pointer_to(tp,count);
       94        94    2            break;
       95        95    2         case ARRAY:
       96        96    2            if (count >= 0 && tp->tp_size < 0)  {
       97        97    3               error("cannot construct array of unknown type");
       98        98    3               count = (arith)-1;
       99        99    3            }
      100       100    2            else if (tp->tp_size == 0) /* CJ */
      101       101    2               warning("array elements have size 0");
      102       102    2            if (count >= (arith)0)
      103       103    2               count *= tp->tp_size;
      104       104    2            dtp = array_of(tp, count);
      105       105    2            break;
      106       106    2         }
      107       107    1         return dtp;
      108       108    1        }
      109       109
CC.C03    File=zbc$type:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=4  
      110       110             struct type *
      111       111             function_of(tp, fm)
      112       112              register struct type *tp;
      113       113              register struct formal *fm;
      114       114             {
      115       115    1         register struct type *dtp = tp->tp_function;
      116       116    1         struct formallist *fl = 0;
      117       117    1         int flsz = 0;
      118       118    1
      119       119    1         if (fm && fm->fm_type)   {  /* Function prototype included */
      120       120    2            struct formal *fx = fm;
      121       121    2            int i = fm->fm_num;
      122       122    2            flsz = sizeof(struct formallist) + sizeof(struct type*) * i;
      123       123    2            fl = (struct formallist *) Malloc(flsz);
      124       124    2            fl->fl_num = i+1;
      125       125    2            fl->fl_elips = 0;
      126       126    2            while (fx)   {  /* Copy prototype to struct formallist */
      127       127    3               fl->fl_elips |= fx->fm_elips;
      128       128    3               fl->fl_type[i--] = fx->fm_type;
      129       129    3               fx = fx->next;
      130       130    3               }
      131       131    2            }
      132       132    1         else fm = 0;
      133       133    1
      134       134    1         if (fm)   {
      135       135    2            while (dtp &&(!dtp->tp_formal || memcmp(dtp->tp_formal, fl, flsz)))
      136       136    2               dtp = dtp->next;
      137       137    2            }
      138       138    1         else {
      139       139    2            while (dtp && dtp->tp_formal)
      140       140    2               dtp = dtp->next;
      141       141    2            }
      142       142    1
      143       143    1         if (!dtp)   {
      144       144    2            dtp = create_type(FUNCTION);
      145       145    2            dtp->tp_up = tp;
      146       146    2            dtp->tp_size = pointer_size;
CC.C03    File=zbc$type:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=5  
      147       147    2            dtp->tp_align = pointer_align;
      148       148    2            dtp->next   = tp->tp_function;
      149       149    2            dtp->tp_formal = fl;
      150       150    2            tp->tp_function = dtp;
      151       151    2         }
      152       152    1         else if (fl) Free(fl);
      153       153    1         return dtp;
      154       154    1        }
      155       155
      156       156             struct type *
      157       157             pointer_to(tp, count)
      158       158              register struct type *tp;
      159       159              int count;
      160       160             {
      161       161    1         register int t_const = (count >> 1) & 1;
      162       162    1         register int t_volatile = (count >> 0) & 1;
      163       163    1         register struct type *dtp = tp->tp_pointer;
      164       164    1
      165       165    1         while (dtp && (dtp->tp_const != t_const || dtp->tp_volatile != t_volatile))
      166       166    1            dtp = dtp->next;
      167       167    1
      168       168    1         if (!dtp)   {
      169       169    2            dtp = create_type(POINTER);
      170       170    2            dtp->tp_unsigned = UNSIGNED;
      171       171    2            dtp->tp_up = tp;
      172       172    2            dtp->tp_size = pointer_size;
      173       173    2            dtp->tp_align = pointer_align;
      174       174    2            dtp->tp_const = t_const;
      175       175    2            dtp->tp_volatile = t_volatile;
      176       176    2            if (tp->tp_pointer)   {
      177       177    3               struct type *xtp = tp->tp_pointer;
      178       178    3               dtp->tp_nqualified = xtp;
      179       179    3               dtp->next = xtp->next;
      180       180    3               xtp->next = dtp;
      181       181    3            }
      182       182    2            else tp->tp_pointer = dtp;
      183       183    2         }
CC.C03    File=zbc$type:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=6  
      184       184    1         return dtp;
      185       185    1        }
      186       186
      187       187             struct type *
      188       188             array_of(tp, count)
      189       189              register struct type *tp;
      190       190              arith count;
      191       191             {
      192       192    1         register struct type *dtp = tp->tp_array;
      193       193    1
      194       194    1         /* look for a type with the right size */
      195       195    1         while (dtp && dtp->tp_size != count)
      196       196    1            dtp = dtp->next;
      197       197    1
      198       198    1         if (!dtp)   {
      199       199    2            dtp = create_type(ARRAY);
      200       200    2            dtp->tp_up = tp;
      201       201    2            dtp->tp_size = count;
      202       202    2            dtp->tp_align = tp->tp_align;
      203       203    2            dtp->next = tp->tp_array;
      204       204    2            tp->tp_array = dtp;
      205       205    2         }
      206       206    1         return dtp;
      207       207    1        }
      208       208
      209       209             #ifndef NOBITFIELD
      210       210             struct type *
      211       211             field_of(tp)
      212       212              register struct type *tp;
      213       213             {
      214       214    1         register struct type *dtp = create_type(FIELD);
      215       215    1
      216       216    1         dtp->tp_up = tp;
      217       217    1         dtp->tp_align = tp->tp_align;
      218       218    1         dtp->tp_size = tp->tp_size;
      219       219    1         return dtp;
      220       220    1        }
CC.C03    File=zbc$type:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=7  
      221       221             #endif NOBITFIELD
      222       222
      223       223             arith
      224       224             size_of_type(tp, nm)
      225       225              struct type *tp;
      226       226              char nm[];
      227       227             {
      228       228    1         arith sz = tp->tp_size;
      229       229    1
      230       230    1         if (sz < 0) {
      231       231    2            error("size of %s unknown", nm);
      232       232    2            return (arith)1;
      233       233    2         }
      234       234    1         if (tp->tp_fund == FUNCTION) {
      235       235    2            error("sizeof %s illegal", symbol2str(tp->tp_fund));
      236       236    2            return 1;
      237       237    2            }
      238       238    1         return sz;
      239       239    1        }
      240       240
      241       241             arith
      242       242             align_of_type(tp, nm)
      243       243              struct type *tp;
      244       244              char nm[];
      245       245             {
      246       246    1         arith sz = tp->tp_align;
      247       247    1
      248       248    1         if (sz < 0) {
      249       249    2            error("__alignof %s unknown", nm);
      250       250    2            return (arith)1;
      251       251    2         }
      252       252    1         if (tp->tp_fund == FUNCTION) {
      253       253    2            error("__alignof %s illegal", symbol2str(tp->tp_fund));
      254       254    2            return 1;
      255       255    2            }
      256       256    1         return sz;
      257       257    1        }
CC.C03    File=zbc$type:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=8  
      258       258
      259       259             idf2type(idf, tpp)
      260       260              struct idf *idf;
      261       261              struct type **tpp;
      262       262             {
      263       263    1         /* Decoding  a typedef-ed identifier: if the size is yet
      264       264    1            unknown we have to make copy of the type descriptor to
      265       265    1            prevent garbage at the initialisation of arrays with
      266       266    1            unknown size.
      267       267    1         */
      268       268    1         register struct type *tp = idf->id_def->df_type;
      269       269    1
      270       270    1         if (  tp->tp_size < (arith)0 && tp->tp_fund == ARRAY) {
      271       271    2            *tpp = new_type();
      272       272    2            **tpp = *tp;
      273       273    2               /* this is really a structure assignment, AAGH!!! */
      274       274    2         }
      275       275    1         else  {
      276       276    2            *tpp = tp;
      277       277    2         }
      278       278    1        }
      279       279
      280       280             arith
      281       281             align(pos, al)
      282       282              arith pos;
      283       283              int al;
      284       284             {
      285       285    1         return ((pos + al - 1) / al) * al;
      286       286    1        }
      287       287
      288       288             struct type *
      289       289             standard_type(fund, sign, align, size)
      290       290              int align; arith size;
      291       291             {
      292       292    1         register struct type *tp = create_type(fund);
      293       293    1
      294       294    1         tp->tp_unsigned = sign;
CC.C03    File=zbc$type:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=9  
      295       295    1         tp->tp_align = align;
      296       296    1         tp->tp_size = size;
      297       297    1
      298       298    1         return tp;
      299       299    1        }
      300       300
      301       301             struct type *
      302       302             build_qualified_type(tp, t_con, t_vol)
      303       303               struct type *tp;
      304       304               int t_con, t_vol;
      305       305             {
      306       306    1          struct type *tpy = (tp->tp_nqualified)? tp->tp_nqualified : tp;
      307       307    1          struct type *tpx = tpy->next;
      308       308    1
      309       309    1          if (tpy->tp_fund == ARRAY)    {  /* only happens w/struct refs  */
      310       310    2             struct type *tpz = build_qualified_type(tp->tp_up,t_con,t_vol);
      311       311    2             tpx = array_of(tpz, tp->tp_size);
      312       312    2             return tpx;
      313       313    2          }
      314       314    1
      315       315    1          while (tpx && (t_con != tpx->tp_const || t_vol != tpx->tp_volatile))
      316       316    1             tpx = tpx->next;
      317       317    1
      318       318    1          if (!tpx)   {
      319       319    2             tpx = create_type(tp->tp_fund);
      320       320    2             *tpx = *tp;
      321       321    2             tpx->tp_const = t_con;
      322       322    2             tpx->tp_volatile = t_vol;
      323       323    2             tp->next = tpx;
      324       324    2             tpx->tp_nqualified = tpy;
      325       325    2             tpx->tp_array    = (struct type *)0;
      326       326    2             tpx->tp_pointer  = (struct type *)0;
      327       327    2             tpx->tp_function = (struct type *)0;
      328       328    2          }
      329       329    1          return tpx;
      330       330    1        }
      331       331
CC.C03    File=zbc$type:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=10 
      332       332
      333       333             struct type *compose_function_up();
      334       334
      335       335             struct type *
      336       336             compose_types(tpa, tpb)
      337       337               struct type *tpa;
      338       338               struct type *tpb;
      339       339             {
      340       340    1          int   fund = tpa->tp_fund;
      341       341    1          int   mx, i, j;
      342       342    1
      343       343    1          if (tpa == tpb) return tpa;
      344       344    1
      345       345    1          if (tpb->tp_fund != fund) {  /* Drastically different types? */
      346       346    2             error("Inconsistant redeclaration with differing types");
      347       347    2             return (struct type *)0;
      348       348    2             }
      349       349    1
      350       350    1          if (fund == ARRAY && is_type_compatible(tpa->tp_up, tpb->tp_up))  {
      351       351    2             if (tpa->tp_size < 0)   /* redeclaration with array size */
      352       352    2                return tpb;
      353       353    2             else if (tpb->tp_size < 0)
      354       354    2                return tpa;
      355       355    2             else if (tpa->tp_size != tpb->tp_size) /* sizes must be equal */
      356       356    2                error("Inconsistant size in redeclaration of formal array");
      357       357    2             return tpa;
      358       358    2             }
      359       359    1          else if (fund == FUNCTION && tpa->tp_up->tp_fund == tpb->tp_up->tp_fund) {
      360       360    2             struct formallist *fla = tpa->tp_formal;
      361       361    2             struct formallist *flb = tpb->tp_formal;
      362       362    2             struct type *tppa = tpa->tp_up;
      363       363    2             struct type *tppb = tpb->tp_up;
      364       364    2             int dif = 0;
      365       365    2             struct formal *fm = 0;
      366       366    2
      367       367    2             if (fla && !flb)  {    /*redeclaration without prototype*/
      368       368    3                if (fla->fl_elips)
CC.C03    File=zbc$type:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=11 
      369       369    3                   warning("function redeclaration without elipsis");
      370       370    3                return compose_function_up(tpa, tpb);
      371       371    3                }
      372       372    2             if (flb && !fla)  {    /*redeclaration with    prototype*/
      373       373    3                if (flb->fl_elips)
      374       374    3                   warning("previous function declaration had elipsis");
      375       375    3                return compose_function_up(tpb, tpa);
      376       376    3                }
      377       377    2             if (!fla && !flb) {
      378       378    3                if (is_type_compatible( tppa, tppb )) return tpa;
      379       379    3                error("Inconsistant redeclaration with differing types");
      380       380    3                return (struct type *) 0;
      381       381    3                }
      382       382    2             else if (tpa->tp_up != tpb->tp_up && tpa->tp_up->tp_fund != FUNCTION) {
      383       383    3                error("Inconsistant redeclaration with differing types");
      384       384    3                return (struct type *)0;
      385       385    3                }
      386       386    2             mx = fla->fl_num; /* verify same args in both prototypes */
      387       387    2             if (flb->fl_num != mx)  {
      388       388    3                error("function redeclaration with different number of args");
      389       389    3                return (struct type *)0;
      390       390    3                }
      391       391    2             if (fla->fl_elips != flb->fl_elips) {
      392       392    3                error("function redeclaration with and without elipsis");
      393       393    3                return (struct type *)0;
      394       394    3                }
      395       395    2
      396       396    2             for ( i=0 ; i<mx ; i++ )   {
      397       397    3                struct type *tpx = fla->fl_type[i];
      398       398    3                struct type *tpy = flb->fl_type[i];
      399       399    3                struct type *tpz;
      400       400    3                if (tpx != tpy)   {
      401       401    4                   tpz = compose_types(tpx, tpy);
      402       402    4                   if (!tpz) {
      403       403    5                      if (fm) free_formals(fm);
      404       404    5                      return tpz;
      405       405    5                      }
CC.C03    File=zbc$type:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=12 
      406       406    4                   }
      407       407    3                else tpz = tpa;
      408       408    3                if (dif || tpz != tpa) {
      409       409    4                   struct formal *new = new_formal();
      410       410    4                   if (!dif)   {
      411       411    5                      for ( j=0 ; j<i ; j++)  {
      412       412    6                         struct formal *newfm = new_formal();
      413       413    6                         newfm->fm_idf = 0;
      414       414    6                         newfm->fm_type = fla->fl_type[j];
      415       415    6                         newfm->fm_elips = 0;
      416       416    6                         newfm->next     = fm;
      417       417    6                         newfm->fm_num   = j;
      418       418    6                         fm            = newfm;
      419       419    6                         }  /* End of for */
      420       420    5                      }     /* End of if first dif */
      421       421    4                   dif++;
      422       422    4                   new->fm_idf = 0;
      423       423    4                   new->fm_type = tpz;
      424       424    4                   new->fm_elips = fla->fl_elips;
      425       425    4                   new->next     = fm;
      426       426    4                   new->fm_num   = i;
      427       427    4                   fm            = new;
      428       428    4                   }     /*  End of if types differ or already a dif */
      429       429    3                }        /*  End of for  */
      430       430    2             if (tpa->tp_up != tpb->tp_up)
      431       431    2                tpa = compose_function_up(tpa, tpb);
      432       432    2             if (dif) {  /*  if the formals were different!   */
      433       433    3                struct type *tp;
      434       434    3                tp = construct_type(FUNCTION, tpa->tp_up, (arith)0, fm);
      435       435    3                return tp;
      436       436    3                }
      437       437    2             return tpa; /*  Formals same as tpa              */
      438       438    2             }  /* End of else if fund==FUNCTION...           */
      439       439    1          else if (fund == POINTER)  {
      440       440    2             struct type *tp;
      441       441    2             tp = compose_types(tpa->tp_up, tpb->tp_up);
      442       442    2             if (!tp) return (struct type *)0;
CC.C03    File=zbc$type:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=13 
      443       443    2             if (tp == tpa->tp_up)
      444       444    2                tp = tpa;
      445       445    2             else if (tp == tpb->tp_up)
      446       446    2                tp = tpb;
      447       447    2             else tp = construct_type(POINTER, tp, (arith)0);
      448       448    2
      449       449    2             if (tpa->tp_const + tpa->tp_volatile +
      450       450    2                 tpb->tp_const + tpb->tp_volatile   )
      451       451    2                tp = build_qualified_type(tp, (tpa->tp_const | tpb->tp_const),
      452       452    2                      (tpa->tp_volatile | tpb->tp_volatile) );
      453       453    2             return tp;
      454       454    2             }
      455       455    1
      456       456    1          if (is_type_compatible(tpa, tpb))
      457       457    1             return tpa;
      458       458    1          error("Inconsistant redeclaration with differing types");
      459       459    1          return (struct type *)0;
      460       460    1        }
      461       461
      462       462
      463       463
      464       464
      465       465             /*
      466       466               Since a function may return a pointer to a function with/without
      467       467               a prototype, and that prototype must be properly composed, then
      468       468               this routine is used to obtain the correct tp_up type for the
      469       469               function result.
      470       470             */
      471       471              struct type *
      472       472             compose_function_up(tpx, tpy)
      473       473               struct type *tpx;
      474       474               struct type *tpy;
      475       475             {
      476       476    1          struct type *tpz; /* Our result type */
      477       477    1
      478       478    1        /* first return "tpx" if the upper types are the same   */
      479       479    1          if (tpx->tp_up == tpy->tp_up)
CC.C03    File=zbc$type:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=14 
      480       480    1             return tpx;
      481       481    1
      482       482    1          tpz = compose_types(tpx->tp_up, tpy->tp_up);
      483       483    1
      484       484    1          if (tpz)
      485       485    1             if (tpz && tpz != tpx->tp_up)
      486       486    1                tpz = construct_type(FUNCTION, tpz, (arith)0, tpx->tp_formal);
      487       487    1             else tpz = tpx;
      488       488    1
      489       489    1          return tpz;
      490       490    1        }
      491       491
      492       492             /*   Since "signed int" and "int" are equal types:      */
      493       493             int
      494       494             is_type_compatible(tpa, tpb)
      495       495               struct type *tpa;
      496       496               struct type *tpb;
      497       497             {
      498       498    1          int   fund;
      499       499    1          if (tpa == tpb) return 1;
      500       500    1          fund = tpa->tp_fund;
      501       501    1          if (fund == tpb->tp_fund)
      502       502    1             switch (fund)  {
      503       503    2             case INT:
      504       504    2             case SHORT:
      505       505    2             case LONG:
      506       506    2                return (tpa->tp_unsigned != UNSIGNED) && (tpb->tp_unsigned != UNSIGNED
                               );
      507       507    2             }
      508       508    1          return 0;
      509       509    1        }
      510       510
      511       511
      512       512
      513       513             /*   totally unqualify types for certain operations:       */
      514       514
      515       515             struct  type *
CC.C03    File=zbc$type:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=15 
      516       516             unqualified_type_of(tp)
      517       517               struct type *tp;
      518       518             {
      519       519    1          struct type *ntp;
      520       520    1
      521       521    1          switch   (tp->tp_fund)  {
      522       522    2             case  POINTER:
      523       523    2                ntp = unqualified_type_of( tp->tp_up );
      524       524    2                return pointer_to( ntp, (arith) 0);
      525       525    2                break;
      526       526    2             case  ARRAY:
      527       527    2                ntp = unqualified_type_of( tp->tp_up );
      528       528    2                return array_of(ntp, tp->tp_size);
      529       529    2                break;
      530       530    2             case  FUNCTION:
      531       531    2                return tp;
      532       532    2                break;
      533       533    2             }
      534       534    1          ntp = (tp->tp_nqualified) ? tp->tp_nqualified : tp;
      535       535    1          return ntp;
      536       536    1        }
      537       537
      538       538
---  Include file information  ---

   zbc$nofloat:h.:ZBC3TOU. is referenced
   zbc$nobitfield:h.:ZBC3TOU. is referenced
   zbc$botch_free:h.:ZBC3TOU. is referenced
   alloc:h.:ZBC3TOU. is referenced
   zbc$Lpars:h.:ZBC3TOU. is referenced
   zbc$arith:h.:ZBC3TOU. is referenced
   zbc$spec_arith:h.:ZBC3TOU. is referenced
   em_arith:h.:ZBC3TOU. is referenced
   zbc$type:h.:ZBC3TOU. is referenced
   zbc$idf:h.:ZBC3TOU. is referenced
   zbc$nopp:h.:ZBC3TOU. is referenced
   zbc$def:h.:ZBC3TOU. is referenced
CC.C03    File=zbc$type:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=16 
   zbc$sizes:h.:ZBC3TOU. is referenced
   zbc$nocross:h.:ZBC3TOU. is referenced
   zbc$target_sizes:h.:ZBC3TOU. is referenced
   zbc$align:h.:ZBC3TOU. is referenced
   zbc$declar:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbc$type:c.:ZBC3TSI
