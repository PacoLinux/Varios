

CC.C03    File=zbc$zb_debug:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=1  
        1         1             /*M* zb_debug:c  -- Routines to help build debug messages  */
        2         2
        3         3             /*D*    NAME:       debugvar
        4         4                     PURPOSE:    To generate debug schema for a variable
        5         5                                 declaration.
        6         6             */
        7         7             /*F*    NAME:       debugvar
        8         8                     PURPOSE:    To produce an "em" message for a variable
        9         9                                 declaration.
       10        10                     INPUT:      idf   -- identifier structure pointer
       11        11                                 def   -- variable definition pointer
       12        12                                 baseaddr    -- address of first word of variable
       13        13                                 baselevel   -- recursive depth of debugvar calls
       14        14                     OUTPUT:     none.
       15        15                     INTERFACE:  C_ms_var
       16        16                                 debugtype
       17        17                                 map_cp6_sc
       18        18                                 debugbased
       19        19
       20        20                     DESCRIPTION:
       21        21                                 This function analyzes the variable definition
       22        22                                 and produces a call to C_ms_var to produce an
       23        23                                 "em" message for the current variable.
       24        24
       25        25                                 The format of the variable definition is defined
       26        26                                 in em_mes$C_ms_debug:c.
       27        27
       28        28                                 The information in this message is gleaned by
       29        29                                 examining the variable type structure and the
       30        30                                 identifier structure.
       31        31
       32        32                                 The variable name is obtained from the idf
       33        33                                 structure.  If the idf structure pointer is
       34        34                                 null then this routine immediately returns.
       35        35
       36        36                                 The address of the variable, the addressing
       37        37                                 method and the type of the variable are obtained
CC.C03    File=zbc$zb_debug:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=2  
       38        38                                 in one of two ways.  If this is not part of a
       39        39                                 structure (baselevel == 0) then the address is
       40        40                                 obtained from the "def" structure, the address
       41        41                                 type is returned by the "map_cp6_sc" function
       42        42                                 using the def structure "def_sc" field and the
       43        43                                 type of the variable is obtained from the "def"
       44        44                                 structure.  Otherwise, these values are obtained
       45        45                                 from an "sdef" structure (the def parameter was
       46        46                                 really an sdef pointer).  The address type in this
       47        47                                 case is always 5 (a field).
       48        48
       49        49                                 The "debugtype" function is used to obtain the
       50        50                                 name of the structure, datatype, size and element
       51        51                                 size, starting bit number and pointer depth and
       52        52                                 array size information.
       53        53
       54        54                                 If the "debugtype" function returns a non-null
       55        55                                 pointer, then it is a pointer to the "sdef"
       56        56                                 structure that defines the structure indicated by
       57        57                                 this variable.  Note, this pointer is null for
       58        58                                 non-structures or pointers to structures.
       59        59
       60        60                                 If a structure is returned by "debugtype" then the
       61        61                                 indicated structure has its variable information
       62        62                                 generated by a recursive call to this function.
       63        63
       64        64                                 Finally, if the current structure was a pointer
       65        65                                 to a structure or contained a pointer to a
       66        66                                 structure, then the generate schema flag
       67        67                                 is incremented for the structure (if it is not
       68        68                                 a forward reference) or for the type if this is
       69        69                                 a forward reference to the structure.  The
       70        70                                 unstack_level routine will generate schema when
       71        71                                 the structure is about to end its life.
       72        72
       73        73             */
       74        74
CC.C03    File=zbc$zb_debug:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=3  
       75        75
       76        76             #include "debug.h"
       77        77             #include "nofloat.h"
       78        78             #include "nopp.h"
       79        79             #include "nobitfield.h"
       80        80             #include "arith.h"
       81        81             #include "stack.h"
       82        82             #include "idf.h"
       83        83             #include "def.h"
       84        84             #include "type.h"
       85        85             #include "struct.h"
       86        86             #include "field.h"
       87        87             #include "Lpars.h"
       88        88             #include "LLlex:h"
       89        89             #include "label.h"
       90        90             #include "expr.h"
       91        91             #include "static.h"
       92        92             #include "zb_target:h"
       93        93             #include "zb_cp6_object:h"
       94        94
       95        95             /*                        0  1  2   3  4   5   6   7  8    */
       96        96             static align_to_CP6[] = {-1, 3, 2, -1, 1, -1, -1, -1, 0};
       97        97
       98        98             static int  dims[252];  /* array to hold rank, depth, indices */
       99        99
      100       100             /*B*    NAME:       sdef_chain
      101       101                     PURPOSE:    To hold pointers to based structures for which
      102       102                                 debug schema must be generated.
      103       103                     DESCRIPTION:
      104       104                                 This variable points to a chain of types that
      105       105                                 represent structures that must have debug schema
      106       106                                 generated for them.
      107       107
      108       108                                 Structures are added to this chain by the function
      109       109                                 "debugtype" and are removed by the function
      110       110                                 "debugbased".
      111       111             */
CC.C03    File=zbc$zb_debug:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=4  
      112       112             static struct sdef *sdef_chain = 0;
      113       113
      114       114
      115       115             void debugvar(idf,def,baseaddr, baselevel)
      116       116               register struct idf *idf;
      117       117               register struct def *def;
      118       118               int baseaddr, baselevel;
      119       119             {
      120       120    1          char *nm, *stct;
      121       121    1          int  at, dt, sz, esz, eso=0, addr, ali;
      122       122    1          struct sdef *sdef = 0, *debugtype();
      123       123    1          struct type *tp   = 0;
      124       124    1
      125       125    1          nm = stct = "";
      126       126    1          at = def->df_type->tp_fund;
      127       127    1          dt = def->df_sc;
      128       128    1          if (!idf || dt==TYPEDEF || dt==LABEL || dt==ENUM || at==FUNCTION)
      129       129    1             return;
      130       130    1
      131       131    1          if ( baselevel > 0 || (idf->id_def && idf->id_def->df_level)) {
      132       132    2             nm = idf->id_text;            /**  1.  symbol name    **/
      133       133    2
      134       134    2             if (baselevel == 0) {
      135       135    3                sdef_chain = (struct sdef *)0;
      136       136    3                addr = def->df_address;
      137       137    3                at   = map_cp6_sc(def->df_sc);
      138       138    3                tp   = def->df_type;
      139       139    3                def->df_schema = 1;
      140       140    3             }
      141       141    2             else {
      142       142    3                sdef = (struct sdef *) def;
      143       143    3                addr = sdef->sd_offset + baseaddr;
      144       144    3                at   = 5;
      145       145    3                tp   = sdef->sd_type;
      146       146    3             }
      147       147    2
      148       148    2             sdef = debugtype(tp,&stct,&dt,&sz,&esz,&eso,&ali);
CC.C03    File=zbc$zb_debug:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=5  
      149       149    2             if (dt < 0) return;
      150       150    2
      151       151    2
      152       152    2             C_ms_var(nm,stct,dot.tok_line,0,baselevel,at,dt,sz,esz,addr,eso,ali,dims)
                               ;
      153       153    2
      154       154    2             if (baselevel == 0  && at == 1 && addr != 0)
      155       155    2                addr = 0;
      156       156    2             baselevel++;
      157       157    2             while (sdef != (struct sdef *)0 )   {
      158       158    3                debugvar(sdef->sd_idf,sdef,addr,baselevel);
      159       159    3                sdef = sdef->sd_sdef;
      160       160    3             }
      161       161    2
      162       162    2             if (baselevel == 1 && sdef_chain)   {
      163       163    3                struct sdef *sdeflist = sdef_chain;
      164       164    3                struct sdef *sdef;
      165       165    3                while (sdef = sdeflist) {
      166       166    4                   sdeflist = sdef->sd_debsdef;
      167       167    4                   if (sdef->sd_stype->tp_debmes == 1 && idf->id_def &&
      168       168    4                       idf->id_def->df_level == sdef->sd_level           )
      169       169    4                      debugbased(sdef);
      170       170    4                   }
      171       171    3                }
      172       172    2          }
      173       173    1        }
      174       174
      175       175             /*I*    NAME:             debugtype
      176       176                     PURPOSE:          To return information about a type
      177       177                                       structure.
      178       178                     INPUT:            tp          --    pointer to a type
      179       179
      180       180                     OUTPUT:           stctp       --    pointer to struct name
      181       181                                       dt          --    datatype
      182       182                                       sz          --    size of type
      183       183                                       esz         --    element size
      184       184                                       eso         --    starting big offset
CC.C03    File=zbc$zb_debug:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=6  
      185       185                                       ali         --    alignment
      186       186
      187       187                     INTERFACE:        debug_type_chain
      188       188
      189       189                     DESCRIPTION:
      190       190
      191       191                           The type structure for an item is a chain of type
      192       192                           structures pointing toward the most simple datatype
      193       193                           through the tp_up field.  The end of the chain is
      194       194                           always one of the elementary datatypes such as:
      195       195                           int, long, short, float, double, void, field,
      196       196                           struct, union, function or void.  Before the end of
      197       197                           the chain there may be types of pointer, array or
      198       198                           typedef which must be handled.
      199       199
      200       200                           The array/pointer information is returned in the
      201       201                           variable dims[] which is organized as follows:
      202       202                           dims[0]     the number of entries used in dims.
      203       203                           dims[1]     the number of pointer indirections
      204       204                                       before the first (if any) array info.
      205       205                           dims[2]     number of array dimensions.
      206       206                           dims[3...]  array dimensions
      207       207                           dims[n]     after the last array dimension there may
      208       208                                       be more pointer indirections.
      209       209                           dims[n+1]   followed by an array rank (if an array)
      210       210                           .
      211       211                           .
      212       212                           .
      213       213
      214       214                           For integer datatypes, the sizes are in bits.  For
      215       215                           all other datatypes, the sizes are in bytes.
      216       216             */
      217       217             struct sdef *
      218       218             debugtype(tp, stctp, dt, sz, esz, eso, ali)
      219       219               register struct type *tp;
      220       220               char     **stctp;
      221       221               int   *dt, *sz, *esz, *eso, *ali;
CC.C03    File=zbc$zb_debug:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=7  
      222       222             {
      223       223    1          int dirrank = 1, dirpos = 1;
      224       224    1          int ops = 1, ptr = 0, sb = 0, bf = 0;
      225       225    1          struct sdef *result = 0;
      226       226    1          dims[0] = 0;
      227       227    1          if (!tp) {
      228       228    2             dims[0] = dims[1] = *dt = *sz = *esz = *ali = 0;
      229       229    2             return result;
      230       230    2          }
      231       231    1          *sz = tp->tp_size;
      232       232    1          *esz = *sz;
      233       233    1          *ali = align_to_CP6[tp->tp_align];
      234       234    1          dims[0] = dims[1] = 0;
      235       235    1
      236       236    1          while (ops) {
      237       237    2             *esz = tp->tp_size;
      238       238    2             switch   (tp->tp_fund)  {
      239       239    3             case POINTER:
      240       240    3                {
      241       241    4                   register struct type *tpn = tp->tp_up;
      242       242    4                   ptr++;
      243       243    4                   dims[dirpos]++;
      244       244    4                   dirrank = dirpos;
      245       245    4                   *sz = tpn->tp_size;
      246       246    4                   *ali = align_to_CP6[tpn->tp_align];
      247       247    4                }
      248       248    3                break;
      249       249    3             case ARRAY:
      250       250    3                if (dirrank == dirpos)  {
      251       251    4                   dirpos = 1 + (dirrank = dirpos + 1);
      252       252    4                   dims[dirrank] = 0;
      253       253    4                   *sz = tp->tp_size;
      254       254    4                }
      255       255    3                dims[dirrank]++;
      256       256    3                dims[dirpos++] = tp->tp_size;
      257       257    3                dims[dirpos  ] = 0;
      258       258    3                break;
CC.C03    File=zbc$zb_debug:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=8  
      259       259    3             case FUNCTION:
      260       260    3                if (!ptr)
      261       261    3                   *dt = -1;
      262       262    3                else *dt = EPTR_DATATYPE;
      263       263    3                ops = 0;
      264       264    3                break;
      265       265    3             case UNION:
      266       266    3             case STRUCT:
      267       267    3                *dt = STRUCTURE_DATATYPE;
      268       268    3                *stctp = tp->tp_idf->id_text;
      269       269    3                result = tp->tp_sdef;
      270       270    3                if (ptr)   {  /*  based structure */
      271       271    4                   if (result && tp->tp_debmes == 0)  {
      272       272    5                      result->sd_debsdef = sdef_chain;
      273       273    5                      sdef_chain = result;
      274       274    5                      tp->tp_debmes = 1;
      275       275    5                      }
      276       276    4                   result = 0;
      277       277    4                   }
      278       278    3                ops = 0;
      279       279    3                break;
      280       280    3             case TYPEDEF:
      281       281    3                break;
      282       282    3             case CHAR:
      283       283    3                *dt = CHAR_DATATYPE;
      284       284    3                ops = 0;
      285       285    3                break;
      286       286    3             case ERRONEOUS:
      287       287    3             case ENUM:
      288       288    3             case LONG:
      289       289    3             case SHORT:
      290       290    3             case INT:
      291       291    3                *dt = (tp->tp_unsigned) ? UBIN_DATATYPE : SBIN_DATATYPE;
      292       292    3                sb = *esz = tp->tp_size * 9;
      293       293    3                if (!bf) *sz = sb;
      294       294    3                ops = 0;
      295       295    3                break;
CC.C03    File=zbc$zb_debug:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=9  
      296       296    3             case FLOAT:
      297       297    3                *dt = SFLT_DATATYPE;
      298       298    3                ops = 0;
      299       299    3                break;
      300       300    3             case DOUBLE:
      301       301    3                *dt = DFLT_DATATYPE;
      302       302    3                ops = 0;
      303       303    3                break;
      304       304    3             case VOID:
      305       305    3                *dt = NO_DATATYPE;
      306       306    3                ops = 0;
      307       307    3                break;
      308       308    3             case FIELD:
      309       309    3                *dt = UBIN_DATATYPE;
      310       310    3                if (tp->tp_field) {
      311       311    4                   struct field *fd = tp->tp_field;
      312       312    4
      313       313    4                   *sz = sb = fd->fd_width;
      314       314    4                   *eso = 36 - sb - fd->fd_shift; /* Starting bit of field */
      315       315    4                   bf++;
      316       316    4                }
      317       317    3                break;
      318       318    3             default:
      319       319    3                crash("%s %d","*** Type not handled by debug2type:",tp->tp_fund);
      320       320    3                break;
      321       321    3             }
      322       322    2             tp = tp->tp_up;
      323       323    2          }
      324       324    1          if (*sz < 0) *sz = *esz;
      325       325    1          dims[0] = dirpos;
      326       326    1          return result;
      327       327    1        }
      328       328
      329       329
      330       330             /*I* NAME:          map_cp6_sc
      331       331                  PURPOSE:       To return a storage class code for the variable.
      332       332                  DESCRIPTION:
CC.C03    File=zbc$zb_debug:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=10 
      333       333                                 The current codes and their meanings are:
      334       334                                 1  -  static
      335       335                                 2  -  parameter/local (auto)
      336       336                                 3  -  extern (symref)
      337       337                                 4  -  global (symdef)
      338       338                                 5  -  field  (of struct)
      339       339                                 6  -  based
      340       340             */
      341       341             int map_cp6_sc(sc) int sc;   {
      342       342    1          switch(sc)  {
      343       343    2          case GLOBAL:
      344       344    2             return(4);
      345       345    2          case STATIC:
      346       346    2             return(1);
      347       347    2          case REGISTER:
      348       348    2          case AUTO:
      349       349    2          case FORMAL:
      350       350    2          case ERRONEOUS:
      351       351    2             return(2);
      352       352    2          case EXTERN:
      353       353    2          case IMPLICIT:
      354       354    2             return(3);
      355       355    2          default:
      356       356    2             fatal("Storage class not understood by map_CP6_sc: %d",sc);
      357       357    2          }
      358       358    1        }
      359       359
      360       360             /*I*    NAME:       debugbased
      361       361                     PURPOSE:    To define a structure as based.
      362       362                     DESCRIPTION:
      363       363                                 Debug schema is generated for a structure
      364       364                                 indicating that the structure is based.
      365       365             */
      366       366             debugbased(sdef)  struct sdef *sdef;   {
      367       367    1          int def_level  = sdef->sd_level;
      368       368    1          sdef_chain = sdef;
      369       369    1          sdef_chain->sd_debsdef = 0;
CC.C03    File=zbc$zb_debug:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=11 
      370       370    1
      371       371    1          while (sdef = sdef_chain)  {
      372       372    2             struct type *tp = sdef->sd_stype;
      373       373    2             char *nm, *stct;
      374       374    2             char buff[100];
      375       375    2             int  dt = STRUCTURE_DATATYPE;
      376       376    2             int  sz = tp->tp_size;
      377       377    2             int  al = align_to_CP6[tp->tp_align];
      378       378    2
      379       379    2             sdef_chain = sdef->sd_debsdef;
      380       380    2             if (sdef->sd_level == def_level)   {
      381       381    3                sdef->sd_stype->tp_debmes = 2;
      382       382    3                stct = nm = tp->tp_idf->id_text;
      383       383    3                dims[0] = 1; dims[1] = 0;
      384       384    3                if ( *nm != '#' ) {
      385       385    4                   sprint(buff,"s_%s#",nm);
      386       386    4                   nm = buff;
      387       387    4                   }
      388       388    3                C_ms_var(nm,stct,dot.tok_line,0,0,6,dt,sz,sz,0,0,al,dims);
      389       389    3                while (sdef)   {
      390       390    4                   debugvar(sdef->sd_idf,sdef,0,1);
      391       391    4                   sdef = sdef->sd_sdef;
      392       392    4                   }
      393       393    3                }
      394       394    2             }
      395       395    1        }
      396       396
---  Include file information  ---

   zbc$debug:h.:ZBC3TOU. is referenced
   zbc$nofloat:h.:ZBC3TOU. is referenced
   zbc$nopp:h.:ZBC3TOU. is referenced
   zbc$nobitfield:h.:ZBC3TOU. is referenced
   zbc$arith:h.:ZBC3TOU. is referenced
   zbc$spec_arith:h.:ZBC3TOU. is referenced
   em_arith:h.:ZBC3TOU. is referenced
   zbc$stack:h.:ZBC3TOU. is referenced
CC.C03    File=zbc$zb_debug:c.:ZBC3TSI                                              Fri Aug 22 1997  Page=12 
   zbc$idf:h.:ZBC3TOU. is referenced
   zbc$def:h.:ZBC3TOU. is referenced
   zbc$type:h.:ZBC3TOU. is referenced
   zbc$struct:h.:ZBC3TOU. is referenced
   zbc$field:h.:ZBC3TOU. is referenced
   zbc$Lpars:h.:ZBC3TOU. is referenced
   zbc$LLlex:h.:ZBC3TOU. is referenced
   zbc$file_info:h.:ZBC3TOU. is referenced
   zbc$label:h.:ZBC3TOU. is referenced
   em_label:h.:ZBC3TOU. is referenced
   zbc$expr:h.:ZBC3TOU. is referenced
   zbc$static:h.:ZBC3TOU. is referenced
   zbc$zb_target:h.:ZBC3TOU. is referenced
   zb_cp6_object:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbc$zb_debug:c.:ZBC3TSI
