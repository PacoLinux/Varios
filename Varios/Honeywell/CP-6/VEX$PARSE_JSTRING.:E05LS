VERSION E05

PL6.E3A0      #001=VEX$PARSE_JSTRING File=VEX$PARSE_JSTRING.:E05TSI              WED 07/30/97 07:14 Page:1    
        1        1        /*M*    VEX$PARSE_JSTRING - TURN PARSE INPUT INTO EDIT J/STRING/ SPECIFIER */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X*/
        8        8        VEX$PARSE_JSTRING: PROC(P$,STR$,J0FLAG) ALTRET;
        9        9        /**/
       10       10        /*F*     NAME:     VEX$PARSE_JSTRING
       11       11                 PURPOSE:  TO TAKE THE PARSE BLOCKS DESCRIBING A STRING OPTIONALLY
       12       12                           PRECEDED BY AN OCCURANCE NUMBER (J) AND RETURN AN
       13       13                           SSE_PARAM DESCRIBING THE STRING         */
       14       14        /**/
       15       15        /*D*     NAME:     VEX$PARSE_JSTRING
       16       16                 PARAMETERS: P$ - POINTER TO FIRST PARSE BLOCK DESCRIBING THE
       17       17                                JSTRING
       18       18                           STR$ - POINTER TO THE SSE_PARAM TO BE FILLED IN
       19       19                           J0FLAG - A FLAG TO INDICATE WHWTHER ZERO IS A LEGAL
       20       20                                VALUE FOR J.
       21       21                                J0OK = 1 = ZERO IS A LEGAL VALUE
       22       22                                J0NOTOK = 2 = ZERO IS ILLEGAL
       23       23                 DESCRIPTION: IF AN OCCURANCE NUMBER (J) WAS GIVEN THEN IT IS
       24       24                           CHECKED TO MAKE SURE THAT IT IS LESS THAN MAX_CLMN
       25       25                           AND IF ZERO THAT ZERO IS A LEGAL VALUE. IF THESE CONDITIONS
       26       26                           ARE NOT MET THEN AN ALTRETURN IS MADE, ELSE THE
       27       27                           J FIELD OF SSE_PARAM IS SET TO THE VALUE. THEN
       28       28                           VEX$PARSE_STRING IS CALLED TO FILL IN THE REST
       29       29                           OF SSE_PARAM AND VEX$PARSE_JSTRING RETURNS HOWEVER
       30       30                           VEX$PARSE_STRING RETURNS TO IT.         */
       31       31        /**/
       32       32        /**********************************************************************/
       33       33        /*   PARAMETERS   PARAMETERS   PARAMETERS   PARAMETERS   PARAMETERS   */
       34       34        /**********************************************************************/
       35       35    1   DCL P$ PTR;                             /* POINTER TO PARSEBLOCK              */
       36       36    1   DCL STR$ PTR;                           /* POINTER TO SSE$PARAM               */
       37       37    1   DCL J0FLAG UBIN(36);                    /* IS J=0 OK ??                       */
PL6.E3A0      #001=VEX$PARSE_JSTRING File=VEX$PARSE_JSTRING.:E05TSI              WED 07/30/97 07:14 Page:2    
       38       38        /**/
       39       39        /*****************************************************************/
       40       40        /*   AUTO DATA   AUTO DATA   AUTO DATA   AUTO DATA   AUTO DATA   */
       41       41        /*****************************************************************/
       42       42    1   DCL I UBIN(36);
       43       43    1   DCL REP_NUM UBIN(36);
       44       44        /**********************************************************************/
       45       45        /*   BASED DATA   BASED DATA   BASED DATA   BASED DATA   BASED DATA   */
       46       46        /**********************************************************************/
       47       47        %PLIST;
       48       48        %INCLUDE XU_MACRO_C;
       49     3154        %INCLUDE VE_SUBS_C;
       50     3348        %INCLUDE VE_PERR_C;
       51     3565        %PARSE$OUT (STCLASS = BASED);
       52     3610    1   DCL 1 SSE$PARAM BASED ALIGNED,          /*SSE TABLE ENTRY                     */
       53     3611    1         2 FLAGS,
       54     3612    1           3 CLMNFLAG BIT(1) UNAL,                      /* IF TRUE NEXT WORD IS CLMN#
       55     3613                                                                   ELSE PTR$ */
       56     3614    1           3 NOTFLAG BIT(1) UNAL,          /* LOG. OP. IS NOT                    */
       57     3615    1           3 ANDFLAG BIT(1) UNAL,          /* LOG. OP. IS AND                    */
       58     3616    1           3 ORFLAG BIT(1) UNAL,           /* LOG. OP. IS OR                     */
       59     3617    1           3 EORFLAG BIT(1) UNAL,          /* LOG. OP. IS EOR*/
       60     3618    1           3 * BIT(13) UNAL,
       61     3619    1         2 J SBIN HALF UNAL,               /* OCCURANCE NUMBER                   */
       62     3620    1         2 PTR$ PTR UNAL;                  /* POINTER TO STRING                  */
       63     3621    1   DCL 1 STR$BUF BASED ALIGNED,
       64     3622    1         2 COUNT UBIN(9) UNAL,
       65     3623    1         2 TEXT CHAR(255) UNAL;
       66     3624        /*****************************************************************/
       67     3625        /*   SYMREFS   SYMREFS   SYMREFS   SYMREFS   SYMREFS   SYMREFS   */
       68     3626        /*****************************************************************/
       69     3627    1   DCL VEX$PARSE_STRING ENTRY(2) ALTRET;
       70     3628    1   DCL VEX$ERROR ENTRY(2) ALTRET;
       71     3629        /**/
       72     3630    1   DCL MAX_CLMN UBIN(36) SYMREF;
       73     3631    1   DCL 1 STR_BUF SYMREF,
       74     3632    1         2 COUNT UBIN(9) UNAL,
PL6.E3A0      #001=VEX$PARSE_JSTRING File=VEX$PARSE_JSTRING.:E05TSI              WED 07/30/97 07:14 Page:3    
       75     3633    1         2 TEXT CHAR(255) UNAL;
       76     3634        /**/
       77     3635        /*****************************************************************************/
       78     3636        /*   PROCEDURE   PROCEDURE   PROCEDURE   PROCEDURE   PROCEDURE   PROCEDURE   */
       79     3637        /*****************************************************************************/
       80     3638        /**/
       81     3639    1           I = 0;
       82     3640    2           IF (P$ -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE = PC_REPNUM) THEN DO;
       83     3641    2              STR_BUF = P$ -> OUT$BLK.SUBLK$(0) -> OUT$BLK.SUBLK$(0) -> STR$BUF;
       84     3642    2              CALL CHARBIN (REP_NUM,SUBSTR(STR_BUF.TEXT,0,STR_BUF.COUNT));
       85     3643    3              IF ((REP_NUM = 0)AND(J0FLAG = J0NOTOK)) THEN DO;
       86     3644    3                 CALL VEX$ERROR(E$E_J0NOTOK,2);
       87     3645    3                 ALTRETURN;
       88     3646    3                 END;
       89     3647        /**/
       90     3648        /*E*     ERROR:    VEE-E$E_J0NOTOK-0
       91     3649                 MESSAGE:  Occurence number (j) must be non-zero
       92     3650                 MESSAGE1: It is not legal to specifiy all occurences of the
       93     3651                           given string for this command. J must be non-zero.
       94     3652                 DESCRIPTION: The user tried to operate on all occurences and
       95     3653                           it is illegal for this command.
       96     3654        */
       97     3655    2              IF (REP_NUM > MAX_CLMN) THEN ALTRETURN;
       98     3656    2              STR$ -> SSE$PARAM.J = REP_NUM;
       99     3657    2              I = 1;
      100     3658    2              END;
      101     3659        /**/
      102     3660    1           ELSE STR$ -> SSE$PARAM.J = 1;
      103     3661        /**/
      104     3662    1           CALL VEX$PARSE_STRING(P$ -> OUT$BLK.SUBLK$(I),STR$) ALTRET(PARSE_J_ALT);
      105     3663    1           RETURN;
      106     3664        /**/
      107     3665    1   PARSE_J_ALT:
      108     3666    1           ALTRETURN;
      109     3667    1   END;

PL6.E3A0      #001=VEX$PARSE_JSTRING File=VEX$PARSE_JSTRING.:E05TSI              WED 07/30/97 07:14 Page:4    
--  Include file information  --

   VE_PERR_C.:E05TOU  is referenced.
   VE_SUBS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
      No diagnostics issued in procedure VEX$PARSE_JSTRING.

   Procedure VEX$PARSE_JSTRING requires 58 words for executable code.
   Procedure VEX$PARSE_JSTRING requires 10 words of local(AUTO) storage.

    No errors detected in file VEX$PARSE_JSTRING.:E05TSI    .

PL6.E3A0      #001=VEX$PARSE_JSTRING File=VEX$PARSE_JSTRING.:E05TSI              WED 07/30/97 07:14 Page:5    

 Object Unit name= VEX$PARSE_JSTRING                          File name= VEX$PARSE_JSTRING.:E05TOU
 UTS= JUL 30 '97 07:14:32.88 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none    58     72  VEX$PARSE_JSTRING
    1  RoData even  none     3      3  VEX$PARSE_JSTRING

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        3  VEX$PARSE_JSTRING

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       2 VEX$ERROR
 yes     yes           Std       2 VEX$PARSE_STRING
                       nStd      0 X66_AUTO_3
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     MAX_CLMN                              STR_BUF                               B_VECTNIL
PL6.E3A0      #001=VEX$PARSE_JSTRING File=VEX$PARSE_JSTRING.:E05TSI              WED 07/30/97 07:14 Page:6    

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #001=VEX$PARSE_JSTRING File=VEX$PARSE_JSTRING.:E05TSI              WED 07/30/97 07:14 Page:7    


        1        1        /*M*    VEX$PARSE_JSTRING - TURN PARSE INPUT INTO EDIT J/STRING/ SPECIFIER */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X*/
        8        8        VEX$PARSE_JSTRING: PROC(P$,STR$,J0FLAG) ALTRET;

      8  0 000000   000000 700200 xent  VEX$PARSE_J* TSX0  ! X66_AUTO_3
         0 000001   000012 000003                    ZERO    10,3

        9        9        /**/
       10       10        /*F*     NAME:     VEX$PARSE_JSTRING
       11       11                 PURPOSE:  TO TAKE THE PARSE BLOCKS DESCRIBING A STRING OPTIONALLY
       12       12                           PRECEDED BY AN OCCURANCE NUMBER (J) AND RETURN AN
       13       13                           SSE_PARAM DESCRIBING THE STRING         */
       14       14        /**/
       15       15        /*D*     NAME:     VEX$PARSE_JSTRING
       16       16                 PARAMETERS: P$ - POINTER TO FIRST PARSE BLOCK DESCRIBING THE
       17       17                                JSTRING
       18       18                           STR$ - POINTER TO THE SSE_PARAM TO BE FILLED IN
       19       19                           J0FLAG - A FLAG TO INDICATE WHWTHER ZERO IS A LEGAL
       20       20                                VALUE FOR J.
       21       21                                J0OK = 1 = ZERO IS A LEGAL VALUE
       22       22                                J0NOTOK = 2 = ZERO IS ILLEGAL
       23       23                 DESCRIPTION: IF AN OCCURANCE NUMBER (J) WAS GIVEN THEN IT IS
       24       24                           CHECKED TO MAKE SURE THAT IT IS LESS THAN MAX_CLMN
       25       25                           AND IF ZERO THAT ZERO IS A LEGAL VALUE. IF THESE CONDITIONS
       26       26                           ARE NOT MET THEN AN ALTRETURN IS MADE, ELSE THE
       27       27                           J FIELD OF SSE_PARAM IS SET TO THE VALUE. THEN
       28       28                           VEX$PARSE_STRING IS CALLED TO FILL IN THE REST
       29       29                           OF SSE_PARAM AND VEX$PARSE_JSTRING RETURNS HOWEVER
       30       30                           VEX$PARSE_STRING RETURNS TO IT.         */
       31       31        /**/
       32       32        /**********************************************************************/
PL6.E3A0      #001=VEX$PARSE_JSTRING File=VEX$PARSE_JSTRING.:E05TSI              WED 07/30/97 07:14 Page:8    
       33       33        /*   PARAMETERS   PARAMETERS   PARAMETERS   PARAMETERS   PARAMETERS   */
       34       34        /**********************************************************************/
       35       35    1   DCL P$ PTR;                             /* POINTER TO PARSEBLOCK              */
       36       36    1   DCL STR$ PTR;                           /* POINTER TO SSE$PARAM               */
       37       37    1   DCL J0FLAG UBIN(36);                    /* IS J=0 OK ??                       */
       38       38        /**/
       39       39        /*****************************************************************/
       40       40        /*   AUTO DATA   AUTO DATA   AUTO DATA   AUTO DATA   AUTO DATA   */
       41       41        /*****************************************************************/
       42       42    1   DCL I UBIN(36);
       43       43    1   DCL REP_NUM UBIN(36);
       44       44        /**********************************************************************/
       45       45        /*   BASED DATA   BASED DATA   BASED DATA   BASED DATA   BASED DATA   */
       46       46        /**********************************************************************/
       47       47        %PLIST;
       48       48        %INCLUDE XU_MACRO_C;
       49     3154        %INCLUDE VE_SUBS_C;
       50     3348        %INCLUDE VE_PERR_C;
       51     3565        %PARSE$OUT (STCLASS = BASED);
       52     3610    1   DCL 1 SSE$PARAM BASED ALIGNED,          /*SSE TABLE ENTRY                     */
       53     3611    1         2 FLAGS,
       54     3612    1           3 CLMNFLAG BIT(1) UNAL,                      /* IF TRUE NEXT WORD IS CLMN#
       55     3613                                                                   ELSE PTR$ */
       56     3614    1           3 NOTFLAG BIT(1) UNAL,          /* LOG. OP. IS NOT                    */
       57     3615    1           3 ANDFLAG BIT(1) UNAL,          /* LOG. OP. IS AND                    */
       58     3616    1           3 ORFLAG BIT(1) UNAL,           /* LOG. OP. IS OR                     */
       59     3617    1           3 EORFLAG BIT(1) UNAL,          /* LOG. OP. IS EOR*/
       60     3618    1           3 * BIT(13) UNAL,
       61     3619    1         2 J SBIN HALF UNAL,               /* OCCURANCE NUMBER                   */
       62     3620    1         2 PTR$ PTR UNAL;                  /* POINTER TO STRING                  */
       63     3621    1   DCL 1 STR$BUF BASED ALIGNED,
       64     3622    1         2 COUNT UBIN(9) UNAL,
       65     3623    1         2 TEXT CHAR(255) UNAL;
       66     3624        /*****************************************************************/
       67     3625        /*   SYMREFS   SYMREFS   SYMREFS   SYMREFS   SYMREFS   SYMREFS   */
       68     3626        /*****************************************************************/
       69     3627    1   DCL VEX$PARSE_STRING ENTRY(2) ALTRET;
PL6.E3A0      #001=VEX$PARSE_JSTRING File=VEX$PARSE_JSTRING.:E05TSI              WED 07/30/97 07:14 Page:9    
       70     3628    1   DCL VEX$ERROR ENTRY(2) ALTRET;
       71     3629        /**/
       72     3630    1   DCL MAX_CLMN UBIN(36) SYMREF;
       73     3631    1   DCL 1 STR_BUF SYMREF,
       74     3632    1         2 COUNT UBIN(9) UNAL,
       75     3633    1         2 TEXT CHAR(255) UNAL;
       76     3634        /**/
       77     3635        /*****************************************************************************/
       78     3636        /*   PROCEDURE   PROCEDURE   PROCEDURE   PROCEDURE   PROCEDURE   PROCEDURE   */
       79     3637        /*****************************************************************************/
       80     3638        /**/
       81     3639    1           I = 0;

   3639  0 000002   200006 450100                    STZ     I,,AUTO

       82     3640    2           IF (P$ -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE = PC_REPNUM) THEN DO;

   3640  0 000003   200003 470500                    LDP0    @P$,,AUTO
         0 000004   000000 471500                    LDP1    0,,PR0
         0 000005   100003 473500                    LDP3    3,,PR1
         0 000006   300000 720100                    LXL0    0,,PR3
         0 000007   000156 100003                    CMPX0   110,DU
         0 000010   000052 601000 0                  TNZ     s:3660

       83     3641    2              STR_BUF = P$ -> OUT$BLK.SUBLK$(0) -> OUT$BLK.SUBLK$(0) -> STR$BUF;

   3641  0 000011   300003 474500                    LDP4    3,,PR3
         0 000012   000000 100500                    MLR     fill='000'O
         0 000013   400000 000400                    ADSC9   0,,PR4                   cn=0,n=256
         0 000014   000000 000400 xsym               ADSC9   STR_BUF                  cn=0,n=256

       84     3642    2              CALL CHARBIN (REP_NUM,SUBSTR(STR_BUF.TEXT,0,STR_BUF.COUNT));

   3642  0 000015   000000 236000 xsym               LDQ     STR_BUF
         0 000016   000033 772000                    QRL     27
         0 000017   000000 620006                    EAX0    0,QL
         0 000020   000100 305440                    DTB
PL6.E3A0      #001=VEX$PARSE_JSTRING File=VEX$PARSE_JSTRING.:E05TSI              WED 07/30/97 07:14 Page:10   
         0 000021   000000 230010 xsym               NDSC9   STR_BUF                  cn=1,s=nosgn,sf=0,n=*X0
         0 000022   200010 000010                    NDSC9   REP_NUM+1,,AUTO          cn=0,s=lsgnf,sf=0,n=8
         0 000023   200011 235100                    LDA     REP_NUM+2,,AUTO
         0 000024   200007 755100                    STA     REP_NUM,,AUTO

       85     3643    3              IF ((REP_NUM = 0)AND(J0FLAG = J0NOTOK)) THEN DO;

   3643  0 000025   000037 601000 0                  TNZ     s:3655
         0 000026   200005 471500                    LDP1    @J0FLAG,,AUTO
         0 000027   100000 235100                    LDA     0,,PR1
         0 000030   000002 115007                    CMPA    2,DL
         0 000031   000037 601000 0                  TNZ     s:3655

       86     3644    3                 CALL VEX$ERROR(E$E_J0NOTOK,2);

   3644  0 000032   000001 630400 1                  EPPR0   1
         0 000033   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000034   000000 701000 xent               TSX1    VEX$ERROR
         0 000035   000000 011000                    NOP     0

       87     3645    3                 ALTRETURN;

   3645  0 000036   000000 702200 xent               TSX2  ! X66_AALT

       88     3646    3                 END;
       89     3647        /**/
       90     3648        /*E*     ERROR:    VEE-E$E_J0NOTOK-0
       91     3649                 MESSAGE:  Occurence number (j) must be non-zero
       92     3650                 MESSAGE1: It is not legal to specifiy all occurences of the
       93     3651                           given string for this command. J must be non-zero.
       94     3652                 DESCRIPTION: The user tried to operate on all occurences and
       95     3653                           it is illegal for this command.
       96     3654        */
       97     3655    2              IF (REP_NUM > MAX_CLMN) THEN ALTRETURN;

   3655  0 000037   000000 236000 xsym               LDQ     MAX_CLMN
         0 000040   200007 116100                    CMPQ    REP_NUM,,AUTO
PL6.E3A0      #001=VEX$PARSE_JSTRING File=VEX$PARSE_JSTRING.:E05TSI              WED 07/30/97 07:14 Page:11   
         0 000041   000043 603000 0                  TRC     s:3656

   3655  0 000042   000000 702200 xent               TSX2  ! X66_AALT

       98     3656    2              STR$ -> SSE$PARAM.J = REP_NUM;

   3656  0 000043   200004 471500                    LDP1    @STR$,,AUTO
         0 000044   100000 473500                    LDP3    0,,PR1
         0 000045   200007 720100                    LXL0    REP_NUM,,AUTO
         0 000046   300000 440100                    SXL0    0,,PR3

       99     3657    2              I = 1;

   3657  0 000047   000001 235007                    LDA     1,DL
         0 000050   200006 755100                    STA     I,,AUTO

      100     3658    2              END;

   3658  0 000051   000056 710000 0                  TRA     s:3662

      101     3659        /**/
      102     3660    1           ELSE STR$ -> SSE$PARAM.J = 1;

   3660  0 000052   200004 474500                    LDP4    @STR$,,AUTO
         0 000053   400000 475500                    LDP5    0,,PR4
         0 000054   000001 221003                    LDX1    1,DU
         0 000055   500000 441100                    SXL1    0,,PR5

      103     3661        /**/
      104     3662    1           CALL VEX$PARSE_STRING(P$ -> OUT$BLK.SUBLK$(I),STR$) ALTRET(PARSE_J_ALT);

   3662  0 000056   000000 471500                    LDP1    0,,PR0
         0 000057   200004 236100                    LDQ     @STR$,,AUTO
         0 000060   200011 756100                    STQ     REP_NUM+2,,AUTO
         0 000061   200006 720100                    LXL0    I,,AUTO
         0 000062   100003 633510                    EPPR3   3,X0,PR1
         0 000063   200010 453500                    STP3    REP_NUM+1,,AUTO
PL6.E3A0      #001=VEX$PARSE_JSTRING File=VEX$PARSE_JSTRING.:E05TSI              WED 07/30/97 07:14 Page:12   
         0 000064   200010 630500                    EPPR0   REP_NUM+1,,AUTO
         0 000065   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000066   000000 701000 xent               TSX1    VEX$PARSE_STRING
         0 000067   000071 702000 0                  TSX2    PARSE_J_ALT

      105     3663    1           RETURN;

   3663  0 000070   000000 702200 xent               TSX2  ! X66_ARET

      106     3664        /**/
      107     3665    1   PARSE_J_ALT:
      108     3666    1           ALTRETURN;

   3666  0 000071   000000 702200 xent  PARSE_J_ALT  TSX2  ! X66_AALT
      109     3667    1   END;

PL6.E3A0      #001=VEX$PARSE_JSTRING File=VEX$PARSE_JSTRING.:E05TSI              WED 07/30/97 07:14 Page:13   
--  Include file information  --

   VE_PERR_C.:E05TOU  is referenced.
   VE_SUBS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
      No diagnostics issued in procedure VEX$PARSE_JSTRING.
PL6.E3A0      #001=VEX$PARSE_JSTRING File=VEX$PARSE_JSTRING.:E05TSI              WED 07/30/97 07:14 Page:14   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     5-0-0/w PTR         r     1 @J0FLAG                    3-0-0/w PTR         r     1 @P$
     4-0-0/w PTR         r     1 @STR$                      6-0-0/w UBIN        r     1 I
    *0-0-0/w UBIN        r     1 J0FLAG                    *0-0-0/w PTR         r     1 P$
     7-0-0/w UBIN        r     1 REP_NUM                   *0-0-0/w PTR         r     1 STR$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN        r     1 MAX_CLMN                   0-0-0/c STRC(2304)  r     1 STR_BUF

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(144)   r     1 OUT$BLK                    0-0-0/w STRC(72)    r     1 SSE$PARAM
     0-0-0/w STRC(2304)  r     1 STR$BUF


   Procedure VEX$PARSE_JSTRING requires 58 words for executable code.
   Procedure VEX$PARSE_JSTRING requires 10 words of local(AUTO) storage.

    No errors detected in file VEX$PARSE_JSTRING.:E05TSI    .
PL6.E3A0      #001=VEX$PARSE_JSTRING File=VEX$PARSE_JSTRING.:E05TSI              WED 07/30/97 07:14 Page:15   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=VEX$PARSE_JSTRING File=VEX$PARSE_JSTRING.:E05TSI              WED 07/30/97 07:14 Page:16   
          MINI XREF LISTING

I
        42**DCL      3639<<ASSIGN   3657<<ASSIGN   3662>>CALL
J0FLAG
        37**DCL         8--PROC     3643>>IF
MAX_CLMN
      3630**DCL      3655>>IF
OUT$BLK.CODE
      3579**DCL      3640>>IF
OUT$BLK.SUBLK$
      3604**DCL      3640>>IF       3641>>ASSIGN   3641>>ASSIGN   3662<>CALL
P$
        35**DCL         8--PROC     3640>>IF       3641>>ASSIGN   3662>>CALL
PARSE_J_ALT
      3666**LABEL    3662--CALLALT
REP_NUM
        43**DCL      3642<<CALLBLT  3643>>IF       3655>>IF       3656>>ASSIGN
SSE$PARAM.J
      3619**DCL      3656<<ASSIGN   3660<<ASSIGN
STR$
        36**DCL         8--PROC     3656>>ASSIGN   3660>>ASSIGN   3662<>CALL
STR$BUF
      3621**DCL      3641>>ASSIGN
STR_BUF
      3631**DCL      3641<<ASSIGN
STR_BUF.COUNT
      3632**DCL      3642>>CALLBLT
STR_BUF.TEXT
      3633**DCL      3642>>CALLBLT
VEX$ERROR
      3628**DCL-ENT  3644--CALL
VEX$PARSE_STRING
      3627**DCL-ENT  3662--CALL
