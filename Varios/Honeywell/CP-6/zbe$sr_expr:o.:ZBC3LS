

CC.C03    File=zbe$sr_expr:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=1  
        1         1             /* $Header: sr_expr.c,v 1.3 87/03/10 11:42:41 ceriel Exp $ */
        2         2             /*
        3         3              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        4         4              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        5         5              */
        6         6             /* S T R E N G T H   R E D U C T I O N
        7         7              *
        8         8              * S R _ E X P R . C
        9         9              *
       10        10              */
       11        11
       12        12
       13        13             #include <stdio:h>
       14        14             #include "types:h"
       15        15             #include "sr:h"
       16        16             #include "debug:h"
       17        17             #include "global:h"
       18        18             #include "aux:h"
       19        19             #include "sr_aux:h"
       20        20             #include "lset:h"
       21        21             #include "sr_iv:h"
       22        22             #include "em_mnem:h"
       23        23
       24        24
       25        25
       26        26             #define ME_NONE    0
       27        27             #define ME_UNAIR   1
       28        28             #define ME_BINAIR  2
       29        29             #define ME_LOOPCONST  3
       30        30             #define ME_IV      4
       31        31
       32        32
       33        33
       34        34             STATIC iv_p last_iv;
       35        35             STATIC int  iv_sign;
       36        36             STATIC lset ivars, loopvars;
CC.C03    File=zbe$sr_expr:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=2  
       37        37
       38        38             STATIC bool is_loadiv(lnp)
       39        39              line_p lnp;
       40        40             {
       41        41    1         /* See if lnp is a LOL iv instruction, where iv is an
       42        42    1          * induction variable of the set ivars. If so, set the
       43        43    1          * the global variable last_iv to its descriptor.
       44        44    1          */
       45        45    1
       46        46    1         Lindex i;
       47        47    1         iv_p iv;
       48        48    1         offset off;
       49        49    1
       50        50    1         if (INSTR(lnp) == op_lol) {
       51        51    2            off = off_set(lnp);
       52        52    2            for (i = Lfirst(ivars); i != (Lindex) 0; i = Lnext(i,ivars)) {
       53        53    3               iv = (iv_p) Lelem(i);
       54        54    3               if (iv->iv_off == off) {
       55        55    4                  last_iv = iv;
       56        56    4                  return TRUE;
       57        57    4               }
       58        58    3            }
       59        59    2         }
       60        60    1         return FALSE;
       61        61    1        }
       62        62
       63        63
       64        64
       65        65
       66        66             #define size_ok(l) (TYPE(l) == OPSHORT && SHORT(l) == ws)
       67        67
       68        68
       69        69             STATIC int me_kind(l,sign_in,sign_out)
       70        70              line_p l;
       71        71              int    sign_in, *sign_out;
       72        72             {
       73        73    1         if (l != (line_p) 0) {
CC.C03    File=zbe$sr_expr:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=3  
       74        74    2            switch(INSTR(l)) {
       75        75    3               case op_adi:
       76        76    3               case op_adu:
       77        77    3                  if (size_ok(l)) {
       78        78    4                     *sign_out = sign_in;
       79        79    4                     return ME_BINAIR;
       80        80    4                  }
       81        81    3                  break;
       82        82    3               case op_sbi:
       83        83    3               case op_sbu:
       84        84    3                  if (size_ok(l)) {
       85        85    4                     *sign_out = - sign_in;
       86        86    4                     return ME_BINAIR;
       87        87    4                  }
       88        88    3                  break;
       89        89    3               case op_ngi:
       90        90    3                  if (size_ok(l)) {
       91        91    4                     *sign_out = - sign_in;
       92        92    4                     return ME_UNAIR;
       93        93    4                  }
       94        94    3                  break;
       95        95    3               case op_inc:
       96        96    3               case op_dec:
       97        97    3                  *sign_out = sign_in;
       98        98    3                  return ME_UNAIR;
       99        99    3               case op_loc:
      100       100    3                  return ME_LOOPCONST;
      101       101    3               case op_lol:
      102       102    3                  if (is_loadiv(l)) {
      103       103    4                     iv_sign = sign_in;
      104       104    4                     return ME_IV;
      105       105    4                  }
      106       106    3                  if (is_loopconst(l,loopvars)) return ME_LOOPCONST;
      107       107    3            }
      108       108    2         }
      109       109    1         return ME_NONE;
      110       110    1        }
CC.C03    File=zbe$sr_expr:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=4  
      111       111
      112       112
      113       113
      114       114             STATIC bool match_expr(l,iv_allowed,lbegin,iv_seen,sign)
      115       115              line_p l,*lbegin;
      116       116              bool   iv_allowed, *iv_seen;
      117       117              int    sign;
      118       118             {
      119       119    1         /* This routine is a top down parser for simple
      120       120    1          * EM expressions. It recognizes expressions that
      121       121    1          * have as operators + and - (unary - is also allowed)
      122       122    1          * and that have as operands a number of loop constants
      123       123    1          * (either a constant or a variable that is not
      124       124    1          * changed within the loop) and at most one induction
      125       125    1          * variable.
      126       126    1          * The parameter iv_allowed is propagated downwards
      127       127    1          * in the expression tree, indicating whether the
      128       128    1          * subexpression may use an induction variable as
      129       129    1          * operand. The parameter iv_seen is propagated
      130       130    1          * upwards, indicating if the subexpression has used
      131       131    1          * an induction variable. The parameter sign is
      132       132    1          * propagated downwards; it indicates the sign of
      133       133    1          * the subexpression. lbegin will point to the
      134       134    1          * beginning of the recognized subexpression
      135       135    1          * (it is an out parameter). Note that we scan the
      136       136    1          * EM text from right to left (i.e. top down).
      137       137    1          */
      138       138    1
      139       139    1         line_p l1;
      140       140    1         bool   iv_insubexpr;
      141       141    1         int    sign2;
      142       142    1
      143       143    1         switch(me_kind(l,sign,&sign2)) {
      144       144    2            case ME_UNAIR:
      145       145    2            /* unairy operator, match one subexpression */
      146       146    2            if (match_expr(PREV(l),iv_allowed,&l1,&iv_insubexpr,sign2)) {
      147       147    3               *lbegin = l1;
CC.C03    File=zbe$sr_expr:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=5  
      148       148    3               *iv_seen = iv_insubexpr;
      149       149    3               return TRUE;
      150       150    3            }
      151       151    2            return FALSE;
      152       152    2            case ME_BINAIR:
      153       153    2            /* binairy operator, match two subexpressions */
      154       154    2            if (match_expr(PREV(l), iv_allowed, &l1, &iv_insubexpr,sign2)) {
      155       155    3               l = PREV(l1);
      156       156    3               iv_allowed = iv_allowed && !iv_insubexpr;
      157       157    3               if (match_expr(l,iv_allowed,&l1,
      158       158    3                  &iv_insubexpr,sign)) {
      159       159    4                  *lbegin = l1;
      160       160    4                  *iv_seen = !iv_allowed || iv_insubexpr;
      161       161    4                  return TRUE;
      162       162    4               }
      163       163    3            }
      164       164    2            return FALSE; /* subexpression not recognized */
      165       165    2            case ME_LOOPCONST:
      166       166    2            *lbegin = l;  /* expression is a loop constant */
      167       167    2            *iv_seen = FALSE;
      168       168    2            return TRUE;
      169       169    2            case ME_IV:
      170       170    2            if (iv_allowed) {
      171       171    3               *iv_seen = TRUE;
      172       172    3               *lbegin = l;
      173       173    3               return TRUE;
      174       174    3            }
      175       175    2            /* fall through ... */
      176       176    2            default:
      177       177    2            return FALSE;
      178       178    2         }
      179       179    1        }
      180       180
      181       181
      182       182             bool is_ivexpr(l,ivs,vars,lbegin_out,iv_out,sign_out)
      183       183              line_p l, *lbegin_out;
      184       184              lset   ivs,vars;
CC.C03    File=zbe$sr_expr:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=6  
      185       185              iv_p   *iv_out;
      186       186              int    *sign_out;
      187       187             {
      188       188    1         line_p l2;
      189       189    1         bool iv_seen;
      190       190    1
      191       191    1
      192       192    1         loopvars = vars;
      193       193    1         ivars = ivs;
      194       194    1         if (match_expr(l,TRUE,&l2,&iv_seen,1)) {
      195       195    2            if (iv_seen) {
      196       196    3               /* recognized a correct expression */
      197       197    3               *lbegin_out = l2;
      198       198    3               *iv_out     = last_iv;
      199       199    3               *sign_out   = iv_sign;
      200       200    3               return TRUE;
      201       201    3            }
      202       202    2         }
      203       203    1         return FALSE;
      204       204    1        }
      205       205
---  Include file information  ---

   stdio:h.:LIBRARY. is referenced
   zbe$types:h.:ZBC3TOU. is referenced
   zbe$sr:h.:ZBC3TOU. is referenced
   zbe$debug:h.:ZBC3TOU. is referenced
   zbe$global:h.:ZBC3TOU. is referenced
   zbe$aux:h.:ZBC3TOU. is referenced
   zbe$sr_aux:h.:ZBC3TOU. is referenced
   zbe$lset:h.:ZBC3TOU. is referenced
   zbe$sr_iv:h.:ZBC3TOU. is referenced
   em_mnem:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbe$sr_expr:c.:ZBC3TSI
