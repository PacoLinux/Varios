

CC.C03    File=zbe$il2_aux:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=1  
        1         1             /* $Header: il2_aux.c,v 1.4 87/03/10 11:14:53 ceriel Exp $ */
        2         2             /*
        3         3              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        4         4              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        5         5              */
        6         6             /*  I N L I N E   S U B S T I T U T I O N
        7         7              *
        8         8              *  I L 2 _ A U X . C
        9         9              */
       10        10
       11        11             #include <stdio:h>
       12        12             #include "types:h"
       13        13             #include "il:h"
       14        14             #include "debug:h"
       15        15             #include "alloc:h"
       16        16             #include "global:h"
       17        17             #include "lset:h"
       18        18             #include "em_spec:h"
       19        19             #include "em_mnem:h"
       20        20             #include "il_aux:h"
       21        21             #include "il2_aux:h"
       22        22             #include "get:h"
       23        23             #include "aux:h"
       24        24
       25        25             #define CHANGE_INDIR(p)  (p->p_change->c_flags & CF_INDIR)
       26        26             #define USE_INDIR(p)  (p->p_use->u_flags & UF_INDIR)
       27        27
       28        28             #define OFTEN_USED(f) ((f->f_flags&FF_OFTENUSED) == FF_OFTENUSED)
       29        29             #define CHANGE_EXT(p) (Cnrelems(p->p_change->c_ext) > 0)
       30        30             #define NOT_INLINE(a) (a->ac_inl = FALSE)
       31        31             #define  INLINE(a) (a->ac_inl = TRUE)
       32        32
       33        33
       34        34             #define CHANGED(p) p->p_flags2 |= PF_CHANGED
       35        35             #define IS_CHANGED(p) (p->p_flags2 & PF_CHANGED)
       36        36
CC.C03    File=zbe$il2_aux:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=2  
       37        37
       38        38
       39        39             STATIC bool match_pars(fm,act)
       40        40              formal_p fm;
       41        41              actual_p act;
       42        42             {
       43        43    1         /* Check if every actual parameter has the same
       44        44    1          * size as its corresponding formal. If not, the
       45        45    1          * actual parameters should not be expanded in line.
       46        46    1          */
       47        47    1
       48        48    1         while (act != (actual_p) 0) {
       49        49    2            if (fm == (formal_p) 0 || tsize(fm->f_type) != act->ac_size) {
       50        50    3               return FALSE;
       51        51    3            }
       52        52    2            act = act->ac_next;
       53        53    2            fm = fm->f_next;
       54        54    2         }
       55        55    1         return (fm == (formal_p) 0 ? TRUE : FALSE);
       56        56    1        }
       57        57
       58        58
       59        59             STATIC bool change_act(p,act)
       60        60              proc_p p;
       61        61              actual_p act;
       62        62             {
       63        63    1         /* See if a call to p migth change any of the
       64        64    1          * operands of the actual parameter expression.
       65        65    1          * If the parameter is to be expanded in line,
       66        66    1          * we must be sure its value does not depend
       67        67    1          * on the point in the program where it is
       68        68    1          * evaluated.
       69        69    1          */
       70        70    1
       71        71    1         line_p l;
       72        72    1
       73        73    1         for (l = act->ac_exp; l != (line_p) 0; l = l->l_next) {
CC.C03    File=zbe$il2_aux:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=3  
       74        74    2            switch(INSTR(l)) {
       75        75    3               case op_lil:
       76        76    3               case op_lof:
       77        77    3               case op_loi:
       78        78    3               case op_los:
       79        79    3               case op_ldf:
       80        80    3                  return TRUE;
       81        81    3                  /* assume worst case */
       82        82    3               case op_lol:
       83        83    3               case op_ldl:
       84        84    3                  if (CHANGE_INDIR(p)) {
       85        85    4                     return TRUE;
       86        86    4                  }
       87        87    3                  break;
       88        88    3               case op_loe:
       89        89    3               case op_lde:
       90        90    3                  if (CHANGE_INDIR(p) || CHANGE_EXT(p)) {
       91        91    4                     return TRUE;
       92        92    4                  }
       93        93    3                  break;
       94        94    3            }
       95        95    2         }
       96        96    1         return FALSE;
       97        97    1        }
       98        98
       99        99
      100       100
      101       101             STATIC bool is_simple(expr)
      102       102              line_p expr;
      103       103             {
      104       104    1         /* See if expr is something simple, i.e. a constant or
      105       105    1          * a variable. So the expression must consist of
      106       106    1          * only one instruction.
      107       107    1          */
      108       108    1
      109       109    1
      110       110    1         if (expr->l_next == (line_p) 0) {
CC.C03    File=zbe$il2_aux:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=4  
      111       111    2            switch(INSTR(expr)) {
      112       112    3               case op_loc:
      113       113    3               case op_ldc:
      114       114    3               case op_lol:
      115       115    3               case op_ldl:
      116       116    3               case op_loe:
      117       117    3               case op_lde:
      118       118    3                  return TRUE;
      119       119    3            }
      120       120    2         }
      121       121    1         return FALSE;
      122       122    1        }
      123       123
      124       124
      125       125
      126       126             STATIC bool too_expensive(fm,act)
      127       127              formal_p fm;
      128       128              actual_p act;
      129       129             {
      130       130    1         /* If the formal parameter is used often and the
      131       131    1          * actual parameter is not something simple
      132       132    1          * (i.e. an expression, not a constant or variable)
      133       133    1          * it may be too expensive too expand the parameter
      134       134    1          * in line.
      135       135    1          */
      136       136    1
      137       137    1         return (OFTEN_USED(fm) && !is_simple(act->ac_exp));
      138       138    1        }
      139       139             bool anal_params(c)
      140       140              call_p c;
      141       141             {
      142       142    1         /* Determine which of the actual parameters of a
      143       143    1          * call may be expanded in line.
      144       144    1          */
      145       145    1
      146       146    1         proc_p p;
      147       147    1         actual_p act;
CC.C03    File=zbe$il2_aux:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=5  
      148       148    1         formal_p form;
      149       149    1         int inlpars = 0;
      150       150    1
      151       151    1         p = c->cl_proc; /* the called procedure */
      152       152    1         if (!match_pars(p->P_FORMALS, c->cl_actuals)) return FALSE;
      153       153    1         if (!INLINE_PARS(p)) {
      154       154    2            for (act = c->cl_actuals; act != (actual_p) 0;
      155       155    2                 act = act->ac_next) {
      156       156    3               NOT_INLINE(act);
      157       157    3            }
      158       158    2            return TRUE; /* "# of inline pars." field in cl_flags remains 0 */
      159       159    2         }
      160       160    1         for (act = c->cl_actuals, form = p->P_FORMALS; act != (actual_p) 0;
      161       161    1              act = act->ac_next, form = form->f_next) {
      162       162    2            if (form->f_flags & FF_BAD ||
      163       163    2                change_act(p,act) || too_expensive(form,act)) {
      164       164    3               NOT_INLINE(act);
      165       165    3            } else {
      166       166    3               INLINE(act);
      167       167    3               inlpars++;
      168       168    3            }
      169       169    2         }
      170       170    1         if (inlpars > 15) inlpars = 15; /* We've only got 4 bits! */
      171       171    1         c->cl_flags |= inlpars; /* number of inline parameters */
      172       172    1         return TRUE;
      173       173    1        }
      174       174
      175       175
      176       176             STATIC short space_saved(c)
      177       177              call_p c;
      178       178             {
      179       179    1         /* When a call gets expanded in line, the total size of the
      180       180    1          * code usually gets incremented, because we have to
      181       181    1          * duplicate the text of the called routine. However, we save
      182       182    1          * ourselves a CAL instruction and possibly anASP instruction
      183       183    1          * (if the called procedure has parameters). Moreover, if we
      184       184    1          * can put some parameters in line, we don't have to push
CC.C03    File=zbe$il2_aux:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=6  
      185       185    1          * their results on the stack before doing the call, so we
      186       186    1          * save some code here too. The routine estimates the amount of
      187       187    1          * code saved, expressed in number of EM instructions.
      188       188    1          */
      189       189    1
      190       190    1         return (1 + (c->cl_flags & CLF_INLPARS) + (c->cl_proc->p_nrformals>ZEROPARAMS
                               ));
      191       191    1        }
      192       192
      193       193             STATIC short param_score(c)
      194       194              call_p c;
      195       195             {
      196       196    1         /* If a call has an inline parameter that is a constant,
      197       197    1          * chances are high that other optimization techniques
      198       198    1          * can do further optimizations, especially if the constant
      199       199    1          * happens to be "0". So the call gets extra points for this.
      200       200    1          */
      201       201    1
      202       202    1         register actual_p act;
      203       203    1         line_p l;
      204       204    1         short score = 0;
      205       205    1
      206       206    1         for (act = c->cl_actuals; act != (actual_p) 0; act = act->ac_next) {
      207       207    2            if (act->ac_inl) {
      208       208    3               l = act->ac_exp;
      209       209    3               if (l->l_next == (line_p) 0 &&
      210       210    3                   (INSTR(l) == op_loc || INSTR(l) == op_ldc)) {
      211       211    4                  score += (off_set(l) == (offset) 0 ? 2 : 1);
      212       212    4                  /* 0's count for two! */
      213       213    4               }
      214       214    3            }
      215       215    2         }
      216       216    1         return score;
      217       217    1        }
      218       218
      219       219
      220       220
CC.C03    File=zbe$il2_aux:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=7  
      221       221
      222       222
      223       223             assign_ratio(c)
      224       224              call_p c;
      225       225             {
      226       226    1         /* This routine is one of the most important ones
      227       227    1          * of the inline substitution phase. It assigns a number
      228       228    1          * (a 'ratio') to a call, indicating how desirable
      229       229    1          * it is to expand the call in line.
      230       230    1          * Currently, a very simplified straightforward heuristic
      231       231    1          * is used.
      232       232    1          */
      233       233    1
      234       234    1         short ll, loopfact, ratio;
      235       235    1
      236       236    1         ll = c->cl_proc->P_SIZE - space_saved(c);
      237       237    1         if (ll <= 0) ll = 1;
      238       238    1         ratio = 1000 / ll;
      239       239    1         if (ratio == 0) ratio = 1;
      240       240    1         /* Add points if the called procedure falls through
      241       241    1          * it's end (no BRA needed) or has formal parameters
      242       242    1          * (ASP can be deleted).
      243       243    1          */
      244       244    1         if (c->cl_proc->p_flags2 & PF_FALLTHROUGH) {
      245       245    2            ratio += 10;
      246       246    2         }
      247       247    1         if (c->cl_proc->p_nrformals > ZEROPARAMS) {
      248       248    2            ratio += 10;
      249       249    2         }
      250       250    1         if (c->cl_caller->p_localbytes == 0) {
      251       251    2            ratio -= 10;
      252       252    2         }
      253       253    1         ratio += (10 *param_score(c));
      254       254    1         /* Extra points for constants as parameters */
      255       255    1         if (ratio <= 0) ratio = 1;
      256       256    1         ll = c->cl_looplevel+1;
      257       257    1        /*  if (ll == 1 && !IS_CALLED_IN_LOOP(c->cl_caller)) ll = 0;   */
CC.C03    File=zbe$il2_aux:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=8  
      258       258    1        /*    Dont do in loop checking for function refs at this time.
      259       259    1              Space is not a concern.... */
      260       260    1         /* If the call is not in a loop and the called proc. is never called
      261       261    1          * in a loop, ll is set to 0.
      262       262    1         */
      263       263    1         loopfact = (ll > 3 ? 10 : ll*ll);
      264       264    1         ratio *= loopfact;
      265       265    1         if (c->cl_flags & CLF_FIRM) {
      266       266    2            ratio = 2*ratio;
      267       267    2         }
      268       268    1         c->cl_ratio = ratio;
      269       269    1        }
      270       270
      271       271
      272       272             call_p abstract(c)
      273       273              call_p c;
      274       274             {
      275       275    1         /* Abstract information from the call that is essential
      276       276    1          * for choosing the calls that will be expanded.
      277       277    1          * Put the information is an 'abstracted call'.
      278       278    1          */
      279       279    1
      280       280    1         call_p a;
      281       281    1
      282       282    1         a = newcall();
      283       283    1         a->cl_caller = c->cl_caller;
      284       284    1         a->cl_id = c->cl_id;
      285       285    1         a->cl_proc = c->cl_proc;
      286       286    1         a->cl_looplevel = c->cl_looplevel;
      287       287    1         a->cl_ratio = c->cl_ratio;
      288       288    1         a->cl_flags = c->cl_flags;
      289       289    1         a->cl_cdr = c->cl_cdr;
      290       290    1         a->cl_car = c->cl_car;
      291       291    1         a->cl_actuals = c->cl_actuals;
      292       292    1         return a;
      293       293    1        }
      294       294
CC.C03    File=zbe$il2_aux:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=9  
      295       295
      296       296
      297       297             STATIC adjust_counts(callee,ccf)
      298       298              proc_p callee;
      299       299              FILE   *ccf;
      300       300             {
      301       301    1         /* A call to callee is expanded in line;
      302       302    1          * the text of callee is not removed, so
      303       303    1          * every proc called by callee gets its
      304       304    1          * P_NRCALLED field incremented.
      305       305    1          */
      306       306    1
      307       307    1         calcnt_p cc, head;
      308       308    1
      309       309    1         head = getcc(ccf,callee); /* get calcnt info of called proc */
      310       310    1         for (cc = head; cc != (calcnt_p) 0; cc = cc->cc_next) {
      311       311    2            cc->cc_proc->P_NRCALLED += cc->cc_count;
      312       312    2         }
      313       313    1         remcc(head); /* remove calcnt info */
      314       314    1        }
      315       315
      316       316
      317       317
      318       318             STATIC bool is_dispensable(callee,ccf)
      319       319              proc_p callee;
      320       320              FILE   *ccf;
      321       321             {
      322       322    1         /* A call to callee is expanded in line.
      323       323    1          * Decrement its P_NRCALLED field and see if
      324       324    1          * it can now be removed because it is no
      325       325    1          * longer called. Procedures that ever have
      326       326    1          * their address taken (via LPI) will never
      327       327    1          * be removed, as they might be called indirectly.
      328       328    1          */
      329       329    1
      330       330    1         if ((--callee->P_NRCALLED) == 0 &&
      331       331    1             (callee->p_flags1 & PF_LPI) == 0) {
CC.C03    File=zbe$il2_aux:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=10 
      332       332    2            DISPENSABLE(callee);
      333       333    2            OUTTRACE("procedure %d can be removed",callee->p_id);
      334       334    2        #ifdef VERBOSE
      335       335   *S*           Spremoved++;
      336       336   *S*       #endif
      337       337    2            return TRUE;
      338       338    2         } else {
      339       339    2            adjust_counts(callee,ccf);
      340       340    2            return FALSE;
      341       341    2         }
      342       342    1        }
      343       343
      344       344
      345       345
      346       346
      347       347             STATIC call_p nested_calls(a)
      348       348              call_p a;
      349       349             {
      350       350    1         /* Get a list of all calls that will appear in the
      351       351    1          * EM text if the call 'a' is expanded in line.
      352       352    1          * These are the calls in the P_CALS list of the
      353       353    1          * called procedure.
      354       354    1          */
      355       355    1
      356       356    1         call_p c, cp, head, *cpp;
      357       357    1
      358       358    1         head = (call_p) 0;
      359       359    1         cpp = &head;
      360       360    1         for (c = a->cl_proc->P_CALS; c != (call_p) 0; c = c->cl_cdr) {
      361       361    2            cp = abstract(c);
      362       362    2            cp->cl_looplevel += a->cl_looplevel;
      363       363    2            cp->cl_flags = (byte) 0;
      364       364    2            if (a->cl_flags & CLF_FIRM) {
      365       365    3               cp->cl_flags |= CLF_FIRM;
      366       366    3            }
      367       367    2            assign_ratio(cp);
      368       368    2            *cpp = cp;
CC.C03    File=zbe$il2_aux:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=11 
      369       369    2            cpp = &cp->cl_cdr;
      370       370    2         }
      371       371    1         return head;
      372       372    1        }
      373       373
      374       374
      375       375
      376       376
      377       377             STATIC call_p find_origin(c)
      378       378              call_p c;
      379       379             {
      380       380    1         /* c is a nested call. Find the original call.
      381       381    1          * This origional must be in the P_CALS list
      382       382    1          * of the calling procedure.
      383       383    1          */
      384       384    1
      385       385    1         register call_p x;
      386       386    1
      387       387    1         for (x = c->cl_caller->P_CALS; x != (call_p) 0; x = x->cl_cdr) {
      388       388    2            if (x->cl_id == c->cl_id) return x;
      389       389    2         }
      390       390    1         assert(FALSE);
      391       391    1         /* NOTREACHED */
      392       392    1        }
      393       393
      394       394
      395       395
      396       396             STATIC selected(a)
      397       397              call_p a;
      398       398             {
      399       399    1         /* The call a is selected for in line expansion.
      400       400    1          * Mark the call as being selected and get the
      401       401    1          * calls nested in it; these will be candidates
      402       402    1          * too now.
      403       403    1          */
      404       404    1
      405       405    1         SELECTED(a);
CC.C03    File=zbe$il2_aux:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=12 
      406       406    1         EVER_EXPANDED(find_origin(a));
      407       407    1         a->cl_car = nested_calls(a);
      408       408    1        }
      409       409
      410       410
      411       411
      412       412
      413       413             STATIC compare(x,best,space)
      414       414              call_p x, *best;
      415       415              short  space;
      416       416             {
      417       417    1         /* See if x is better than the current best choice */
      418       418    1
      419       419    1         if (x != (call_p) 0 && !IS_CHANGED(x->cl_proc) &&
      420       420    1             x->cl_proc->P_SIZE - space_saved(x) <= space) {
      421       421    2            if ((*best == (call_p) 0 && x->cl_ratio != 0) ||
      422       422    2                (*best != (call_p) 0 && x->cl_ratio > (*best)->cl_ratio )) {
      423       423    3               *best = x;
      424       424    3            }
      425       425    2         }
      426       426    1        }
      427       427
      428       428
      429       429
      430       430
      431       431             STATIC call_p best_one(list,space)
      432       432              call_p list;
      433       433              short  space;
      434       434             {
      435       435    1         /* Find the best candidate of the list
      436       436    1          * that has not already been selected. The
      437       437    1          * candidate must fit in the given space.
      438       438    1          * We look in the cdr as well as in the car
      439       439    1          * direction.
      440       440    1          */
      441       441    1
      442       442    1         call_p best = (call_p) 0;
CC.C03    File=zbe$il2_aux:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=13 
      443       443    1         call_p x,c;
"zbe$il2_aux:c.:ZBC3TSI", line 443: (warning) identifier "x" is not used
      444       444    1
      445       445    1         for (c = list; c != (call_p) 0; c = c->cl_cdr) {
      446       446    2            if (IS_SELECTED(c)) {
      447       447    3               compare(best_one(c->cl_car,space),&best,space);
      448       448    3            } else {
      449       449    3               compare(c,&best,space);
      450       450    3            }
      451       451    2         }
      452       452    1         return best;
      453       453    1        }
      454       454
      455       455
      456       456
      457       457             STATIC singles(cals)
      458       458              call_p cals;
      459       459             {
      460       460    1         /* If a procedure is only called once, this call
      461       461    1          * will be expanded in line, because it costs
      462       462    1          * no extra space.
      463       463    1          */
      464       464    1
      465       465    1         call_p c;
      466       466    1
      467       467    1         for (c = cals; c != (call_p) 0; c = c->cl_cdr) {
      468       468    2            if (IS_SELECTED(c)) {
      469       469    3               singles(c->cl_car);
      470       470    3            } else {
      471       471    3               if (c->cl_proc->P_NRCALLED == 1 &&
      472       472    3                   !IS_CHANGED(c->cl_proc) &&
      473       473    3                   (c->cl_proc->p_flags1 & PF_LPI) == 0) {
      474       474    4                  c->cl_proc->P_NRCALLED = 0;
      475       475    4                  SELECTED(c);
      476       476    4                  EVER_EXPANDED(find_origin(c));
      477       477    4                  DISPENSABLE(c->cl_proc);
      478       478    4                  CHANGED(c->cl_caller);
CC.C03    File=zbe$il2_aux:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=14 
      479       479    4                  OUTTRACE("procedure %d can be removed",
      480       479    4                    c->cl_proc->p_id);
      481       480    4        #ifdef VERBOSE
      482       481   *S*                   Spremoved++;
      483       482   *S*       #endif
      484       483    4               }
      485       484    3            }
      486       485    2         }
      487       486    1        }
      488       487
      489       488
      490       489
      491       490             STATIC single_calls(proclist)
      492       491              proc_p proclist;
      493       492             {
      494       493    1         proc_p p;
      495       494    1
      496       495    1         for (p = proclist; p != (proc_p) 0; p = p->p_next) {
      497       496    2        /*    We want to inline functions that were eliminated because
      498       497    2              they may be called from outside sources                       */
      499       498    2
      500       499    2            if (!BIG_CALLER(p)) {
      501       500    3        /******   if (!BIG_CALLER(p) && !IS_DISPENSABLE(p)) {  ******/
      502       501    3               /* Calls appearing in a large procedure or in
      503       502    3                * a procedure that was already eliminated
      504       503    3                * are not considered.
      505       504    3                */
      506       505    3               singles(p->P_CALS);
      507       506    3            }
      508       507    2         }
      509       508    1        }
      510       509
      511       510
      512       511
      513       512
      514       513             select_calls(proclist,ccf,space)
      515       514              proc_p proclist;
CC.C03    File=zbe$il2_aux:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=15 
      516       515              FILE   *ccf;
      517       516              short space ;
      518       517             {
      519       518    1         /* Select all calls that are to be expanded in line. */
      520       519    1
      521       520    1         proc_p p,chp;
      522       521    1         call_p best, x;
      523       522    1
      524       523    1         for (;;) {
      525       524    2            best = (call_p) 0;
      526       525    2            chp = (proc_p) 0; /* the changed procedure */
      527       526    2            for (p = proclist; p != (proc_p) 0; p = p->p_next) {
      528       527    3        /*    We want to inline functions that were eliminated because
      529       528    3              they may be called from outside sources                       */
      530       529    3
      531       530    3               if (!BIG_CALLER(p)) {
      532       531    4        /******       if (!BIG_CALLER(p) && !IS_DISPENSABLE(p)) { ********/
      533       532    4                  /* Calls appearing in a large procedure or in
      534       533    4                   * a procedure that was already eliminated
      535       534    4                   * are not considered.
      536       535    4                   */
      537       536    4                  x = best_one(p->P_CALS,space);
      538       537    4                  compare(x,&best,space);
      539       538    4                  if (x == best) chp = p;
      540       539    4               }
      541       540    3            }
      542       541    2            if (best == (call_p) 0) break;
      543       542    2            if (!is_dispensable(best->cl_proc,ccf)) {
      544       543    3               space -= (best->cl_proc->P_SIZE - space_saved(best));
      545       544    3            }
      546       545    2            selected(best);
      547       546    2            CHANGED(chp);
      548       547    2         }
      549       548    1         single_calls(proclist);
      550       549    1        #ifdef VERBOSE
      551       550   *S*        Sstat(proclist,space);
      552       551   *S*       #endif
CC.C03    File=zbe$il2_aux:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=16 
      553       552    1        }
      554       553
      555       554
      556       555
      557       556
      558       557             STATIC nonnested_calls(cfile)
      559       558              FILE *cfile;
      560       559             {
      561       560    1         register call_p c,a;
      562       561    1
      563       562    1         while((c = getcall(cfile)) != (call_p) 0) {
      564       563    2            /* find the call in the call list of the caller */
      565       564    2            for (a = c->cl_caller->P_CALS;
      566       565    2                 a != (call_p) 0 && c->cl_id != a->cl_id; a = a->cl_cdr);
      567       566    2            assert(a != (call_p) 0 && a->cl_proc == c->cl_proc);
      568       567    2            if (IS_EVER_EXPANDED(a)) {
      569       568    3               a->cl_actuals = c->cl_actuals;
      570       569    3               c->cl_actuals = (actual_p) 0;
      571       570    3            }
      572       571    2            rem_call(c);
      573       572    2         }
      574       573    1        }
      575       574
      576       575
      577       576
      578       577             STATIC copy_pars(src,dest)
      579       578              call_p src, dest;
      580       579             {
      581       580    1         /* Copy the actual parameters of src to dest. */
      582       581    1
      583       582    1         actual_p as,ad, *app;
      584       583    1
      585       584    1         app = &dest->cl_actuals;
      586       585    1         for (as = src->cl_actuals; as != (actual_p) 0; as = as->ac_next) {
      587       586    2            ad = newactual();
      588       587    2            ad->ac_exp = copy_expr(as->ac_exp);
      589       588    2            ad->ac_size = as->ac_size;
CC.C03    File=zbe$il2_aux:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=17 
      590       589    2            ad->ac_inl = as->ac_inl;
      591       590    2            *app = ad;
      592       591    2            app = &ad->ac_next;
      593       592    2          ad->ac_next = (actual_p) 0;
      594       593    2         }
      595       594    1        }
      596       595
      597       596
      598       597
      599       598             STATIC nest_pars(cals)
      600       599              call_p cals;
      601       600             {
      602       601    1         /* Recursive auxiliary procedure of add_actuals. */
      603       602    1
      604       603    1         call_p c,org;
      605       604    1
      606       605    1         for (c = cals; c != (call_p) 0; c = c->cl_cdr) {
      607       606    2            if (IS_SELECTED(c)) {
      608       607    3               org = find_origin(c);
      609       608    3               copy_pars(org,c);
      610       609    3               nest_pars(c->cl_car);
      611       610    3            }
      612       611    2         }
      613       612    1        }
      614       613
      615       614
      616       615
      617       616             add_actuals(proclist,cfile)
      618       617              proc_p proclist;
      619       618              FILE   *cfile;
      620       619             {
      621       620    1         /* Fetch the actual parameters of all selected calls.
      622       621    1          * For all non-nested calls (i.e. those calls that
      623       622    1          * appeared originally in the EM text), we get the
      624       623    1          * parameters from the cal-file.
      625       624    1          * For nested calls (i.e. calls
      626       625    1          * that are a result of in line substitution) we
CC.C03    File=zbe$il2_aux:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=18 
      627       626    1          * get the parameters from the original call.
      628       627    1          */
      629       628    1
      630       629    1         proc_p p;
      631       630    1         call_p a;
      632       631    1
      633       632    1         nonnested_calls(cfile);
      634       633    1         for (p = proclist; p != (proc_p) 0; p = p->p_next) {
      635       634    2            for (a = p->P_CALS; a != (call_p) 0; a = a->cl_cdr) {
      636       635    3               nest_pars(a->cl_car);
      637       636    3            }
      638       637    2         }
      639       638    1        }
      640       639
      641       640
      642       641
      643       642             STATIC clean(cals)
      644       643              call_p *cals;
      645       644             {
      646       645    1         call_p c,next,*cpp;
      647       646    1
      648       647    1         /* Recursive auxiliary routine of cleancals */
      649       648    1
      650       649    1         cpp = cals;
      651       650    1         for (c = *cpp; c != (call_p) 0; c = next) {
      652       651    2            next = c->cl_cdr;
      653       652    2            if (IS_SELECTED(c)) {
      654       653    3               clean(&c->cl_car);
      655       654    3               cpp = &c->cl_cdr;
      656       655    3            } else {
      657       656    3               assert(c->cl_car == (call_p) 0);
      658       657    3               oldcall(c);
      659       658    3               *cpp = next;
      660       659    3            }
      661       660    2         }
      662       661    1        }
      663       662
CC.C03    File=zbe$il2_aux:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=19 
      664       663
      665       664             cleancals(proclist)
      666       665              proc_p proclist;
      667       666             {
      668       667    1         /* Remove all calls in the P_CALS list of p
      669       668    1          * that were not selected for in line expansion.
      670       669    1          */
      671       670    1
      672       671    1         register proc_p p;
      673       672    1
      674       673    1         for (p = proclist; p != (proc_p) 0; p = p->p_next) {
      675       674    2            clean(&p->P_CALS);
      676       675    2         }
      677       676    1        }
      678       677
      679       678
      680       679
      681       680
      682       681             append_abstract(a,p)
      683       682              call_p a;
      684       683              proc_p p;
      685       684             {
      686       685    1         /* Append an abstract of a call-descriptor to
      687       686    1          * the call-list of procedure p.
      688       687    1          */
      689       688    1
      690       689    1         call_p c;
      691       690    1
      692       691    1         if (p->P_CALS  == (call_p) 0) {
      693       692    2            p->P_CALS = a;
      694       693    2         } else {
      695       694    2            for (c = p->P_CALS; c->cl_cdr != (call_p) 0; c = c->cl_cdr);
      696       695    2            c->cl_cdr = a;
      697       696    2         }
      698       697    1        }
      699       698
      700       699
CC.C03    File=zbe$il2_aux:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=20 
      701       700             #ifdef VERBOSE
      702       701   *S*
      703       702   *S*       /* At the end, we traverse the entire call-list, to see why the
      704       703   *S*        * remaining calls were not expanded inline.
      705       704   *S*        */
      706       705   *S*
      707       706   *S*
      708       707   *S*       Sstatist(list,space)
      709       708   *S*        call_p list;
      710       709   *S*        short space;
      711       710   *S*       {
      712       711   *S*        call_p c;
      713       712   *S*
      714       713   *S*        for (c = list; c != (call_p) 0; c = c->cl_cdr) {
      715       714   *S*           if (IS_SELECTED(c)) {
      716       715   *S*              Sstatist(c->cl_car,space);
      717       716   *S*           } else {
      718       717   *S*              if (IS_CHANGED(c->cl_proc)) Schangedcallee++;
      719       718   *S*              else if (BIG_PROC(c->cl_proc)) Sbigcallee++;
      720       719   *S*              else if (c->cl_proc->P_SIZE > space) Sspace++;
      721       720   *S*              else if (c->cl_ratio == 0) Szeroratio++;
      722       721   *S*              else assert(FALSE);
      723       722   *S*           }
      724       723   *S*        }
      725       724   *S*       }
      726       725   *S*
      727       726   *S*       Sstat(proclist,space)
      728       727   *S*        proc_p proclist;
      729       728   *S*        short space;
      730       729   *S*       {
      731       730   *S*        proc_p p;
      732       731   *S*
      733       732   *S*        for (p = proclist; p != (proc_p) 0; p = p->p_next) {
      734       733   *S*           if (BIG_CALLER(p)) Sbig_caller++;
      735       734   *S*           else if (IS_DISPENSABLE(p)) Sdispensable++;
      736       735   *S*           else Sstatist(p->P_CALS,space);
      737       736   *S*        }
CC.C03    File=zbe$il2_aux:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=21 
      738       737   *S*       }
      739       738   *S*       #endif
      740       739
---  Include file information  ---

   stdio:h.:LIBRARY. is referenced
   zbe$types:h.:ZBC3TOU. is referenced
   zbe$il:h.:ZBC3TOU. is referenced
   zbe$debug:h.:ZBC3TOU. is referenced
   zbe$alloc:h.:ZBC3TOU. is referenced
   zbe$global:h.:ZBC3TOU. is referenced
   zbe$lset:h.:ZBC3TOU. is referenced
   em_spec:h.:ZBC3TOU. is referenced
   em_mnem:h.:ZBC3TOU. is referenced
   zbe$il_aux:h.:ZBC3TOU. is referenced
   zbe$il2_aux:h.:ZBC3TOU. is referenced
   zbe$get:h.:ZBC3TOU. is referenced
   zbe$aux:h.:ZBC3TOU. is referenced

1 warning was detected in the file zbe$il2_aux:c.:ZBC3TSI
