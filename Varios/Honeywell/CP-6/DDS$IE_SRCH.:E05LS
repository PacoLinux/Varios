VERSION E05

PL6.E3A0      #001=DDS$IE_SRCH File=DDS$IE_SRCH.:E05TSI                          TUE 07/29/97 14:16 Page:1    
        1        1        /*M* DDS$IE_SRCH Internal entry search routine for Delta. */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMR,PLM=5,IND=5,CSU=3,EXM=0,ECU=3,MOC,DCI=5,CRT=5 */
        8        8        /*F* NAME: DDS$IE_SRCH
        9        9             PURPOSE: To resolve an internal entry reference.
       10       10             DESCRIPTION: Searches the internal entry table in parallel with the
       11       11             logical block table for the desired internal entry. */
       12       12        /*D* NAME: DDS$IE_SRCH
       13       13             CALL: CALL DDS$IE_SRCH( SYM$, ENTRY$ ) ALTRET( found );
       14       14             INTERFACE: "STATIC DATA" schema access variables.
       15       15             ENVIRONMENT:
       16       16             INPUT: SYM$ - pointer to internal entry (textc).
       17       17             OUTPUT: ENTRY$ - pointer to entry in internal entrys table.
       18       18             SCRATCH: Local auto only.
       19       19             DESCRIPTION: Searches through the logical block table for an entry
       20       20             with a lexical level one (1) greater then the lexical level of the
       21       21             current logical block such that an entry in the internal entrys table
       22       22             that belongs to this logical block also has the desired symbolic
       23       23             name. ALTRETURNs if the desired internal entry was found, else RETURNs. */
       24       24                                                /**/
       25       25        DDS$IE_SRCH: PROC( SYM$, ENTRY$ ) ALTRET;
       26       26                                                /**/
       27       27    1   DCL SYM$ PTR;                           /* Pointer to label */
       28       28    1   DCL ENTRY$ PTR;                         /* Pointer to found entry */
       29       29    1   DCL CLB# SBIN;                          /* Current logical block number */
       30       30    1   DCL INTRY$ PTR;                         /* Pointer to current entry */
       31       31    1   DCL CLB$ PTR;                      /* Pointer to current logical block table */
       32       32    1   DCL TSYM$ PTR;                          /* Temp name pointer */
       33       33    1   DCL LEVEL SBIN;                         /* Desired lexical level */
       34       34    1   DCL LEXLVL  SBIN;                       /* Temp for desired level */
       35       35    1   DCL INTRYEND SBIN;                      /* Table pointer end */
       36       36    1   DCL IX SBIN;                            /* Do while counter */
       37       37    1   DCL NP# SBIN;                           /* Name pointer */
PL6.E3A0      #001=DDS$IE_SRCH File=DDS$IE_SRCH.:E05TSI                          TUE 07/29/97 14:16 Page:2    
       38       38        /*D* INTRYEND, IX, & NP# must be SBIN */
       39       39                                                /**/
       40       40        %INCLUDE B$OBJECT_C;                    /* Object language structures */
       41     3470        %B$DNAME (STCLASS="BASED(TSYM$)");
       42     3489        %B$INTNTRY (STCLASS="BASED(INTRY$)");
       43     3547        %B$LOGBLK (STCLASS="BASED(CLB$)");
       44     3578        %B$LBNTRY1;
       45     3605        %INCLUDE DD$BASED;
       46     4908        %TEXT$C (STCLASS="BASED(SYM$)");
       47     4913        %INCLUDE XUH_MACRO_C;
       48     4997        %INCLUDE DD_SD_M;                       /* "STATIC DATA " */
       49     6333        %S_D;
       50     7651    1   DCL DDF$IE_# ENTRY(2) ALTRET;
       51     7652    1   DCL DDF$DBG_# ENTRY(2) ALTRET;
       52     7653    1   DCL DDF$N_IE ENTRY(1) ALTRET;
       53     7654                                                /**/
       54     7655        /* Make sure we can access the schema */
       55     7656    1        IF ( NOT S_D.SCHEMA ) OR ( NOT S_D.QSCH.OK ) OR ( S_D.DBG$ = ADDR( NIL ) ) OR (
              7656                 S_D.IE$ = ADDR( NIL ) )
       56     7657    1        THEN GOTO RETN;
       57     7658    1        CLB$ = PINCRW( S_D.LB$, S_D.QSCH.LB# * SIZEW( B$LOGBLK ) );
       58     7659    1        LEVEL = B$LOGBLK.LEXLVL + 1;
       59     7660    1        CLB# = S_D.QSCH.LB#;
       60     7661        /* Starting at current entry in logical block table, search for an entry
       61     7662           with lexical level equal to current lexical level +1, with the constraint
       62     7663           that the lexical level is never less than or equal to the current
       63     7664           lexical level. */
       64     7665    2        DO WHILE ( CLB$ < S_D.LB_EYOND$ );
       65     7666    2             CLB# = CLB# + 1;
       66     7667    2             CLB$ = PINCRW( CLB$, SIZEW( B$LOGBLK ) ); /* Start at | get next */
       67     7668    2             LEXLVL = B$LOGBLK.LEXLVL;
       68     7669    2             IF LEXLVL = LEVEL
       69     7670    2             THEN GOTO GOTLB;
       70     7671    2             ELSE IF LEXLVL < LEVEL
       71     7672    2                  THEN GOTO RETN;
       72     7673    2           END;
       73     7674        /* Search internal entry table for the first internal entry belonging to
PL6.E3A0      #001=DDS$IE_SRCH File=DDS$IE_SRCH.:E05TSI                          TUE 07/29/97 14:16 Page:3    
       74     7675           the logical block entry just found. */
       75     7676    1   GOTLB: ;
       76     7677    1        IX = 0;                            /* Start at the beginning */
       77     7678    1        CALL DDF$IE_#( IX, INTRY$ ) ALTRET( RETN );
       78     7679    1        INTRYEND = ( S_D.LB1$ -> B$LBNTRY1.INTRYSIZ / SIZEW( B$INTNTRY ) ) - 1;
       79     7680    2        DO WHILE ( IX <= INTRYEND );
       80     7681    2             IF B$INTNTRY.LBE = CLB#
       81     7682    2             THEN GOTO GOTIE;
       82     7683    2             IX = IX + 1;
       83     7684    2             CALL DDF$N_IE( INTRY$ ) ALTRET( RETN ); /* Try next entry */
       84     7685    2           END;
       85     7686        /* Starting at the internal entry just found, search internal entry table
       86     7687           for an entry at the desired lexical level with the desired name, such
       87     7688           that the lexical level is never less than the desired one. */
       88     7689    1   GOTIE: ;
       89     7690    2        DO WHILE ( IX <= INTRYEND );
       90     7691    2             LEXLVL = PINCRW( S_D.LB$, SIZEW( B$LOGBLK ) * B$INTNTRY.LBE ) -> B$LOGBLK.
              7691                      LEXLVL;
       91     7692    2             IF LEXLVL = LEVEL
       92     7693    3             THEN DO;
       93     7694    3                  NP# = B$INTNTRY.NPOINTER;
       94     7695    3                  CALL DDF$DBG_#( NP#, TSYM$ ) ALTRET( RETN ); /* Label ptr */
       95     7696    3                  IF TEXT$C.TXT = B$DNAME.TEXT
       96     7697    4                  THEN DO;                 /* Got it */
       97     7698    4                       ENTRY$ = INTRY$;
       98     7699    4                       ALTRETURN;          /* Split */
       99     7700    4                     END;
      100     7701    3                END;
      101     7702    2             ELSE IF LEXLVL < LEVEL
      102     7703    2                  THEN GOTO RETN;          /* Ran out of entrys */
      103     7704    2             IX = IX + 1;
      104     7705    2             CALL DDF$N_IE( INTRY$ ) ALTRET( RETN ); /* Try next entry */
      105     7706    2           END;
      106     7707                                                /**/
      107     7708    1   RETN: RETURN;                           /* Couldn't find specified label */
      108     7709                                                /**/
      109     7710    1   END DDS$IE_SRCH;
PL6.E3A0      #001=DDS$IE_SRCH File=DDS$IE_SRCH.:E05TSI                          TUE 07/29/97 14:16 Page:4    

PL6.E3A0      #001=DDS$IE_SRCH File=DDS$IE_SRCH.:E05TSI                          TUE 07/29/97 14:16 Page:5    
--  Include file information  --

   DD_SD_M.:E05TOU  is referenced.
   XUH_MACRO_C.:E05TOU  is referenced.
   DD$BASED.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure DDS$IE_SRCH.

   Procedure DDS$IE_SRCH requires 128 words for executable code.
   Procedure DDS$IE_SRCH requires 16 words of local(AUTO) storage.

    No errors detected in file DDS$IE_SRCH.:E05TSI    .

PL6.E3A0      #001=DDS$IE_SRCH File=DDS$IE_SRCH.:E05TSI                          TUE 07/29/97 14:16 Page:6    

 Object Unit name= DDS$IE_SRCH                                File name= DDS$IE_SRCH.:E05TOU
 UTS= JUL 29 '97 14:16:41.92 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none   128    200  DDS$IE_SRCH

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        2  DDS$IE_SRCH

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       2 DDF$IE_#
 yes     yes           Std       1 DDF$N_IE
 yes     yes           Std       2 DDF$DBG_#
                       nStd      0 X66_AUTO_2
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
r    S_D$                                  B_VECTNIL
PL6.E3A0      #001=DDS$IE_SRCH File=DDS$IE_SRCH.:E05TSI                          TUE 07/29/97 14:16 Page:7    


        1        1        /*M* DDS$IE_SRCH Internal entry search routine for Delta. */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMR,PLM=5,IND=5,CSU=3,EXM=0,ECU=3,MOC,DCI=5,CRT=5 */
        8        8        /*F* NAME: DDS$IE_SRCH
        9        9             PURPOSE: To resolve an internal entry reference.
       10       10             DESCRIPTION: Searches the internal entry table in parallel with the
       11       11             logical block table for the desired internal entry. */
       12       12        /*D* NAME: DDS$IE_SRCH
       13       13             CALL: CALL DDS$IE_SRCH( SYM$, ENTRY$ ) ALTRET( found );
       14       14             INTERFACE: "STATIC DATA" schema access variables.
       15       15             ENVIRONMENT:
       16       16             INPUT: SYM$ - pointer to internal entry (textc).
       17       17             OUTPUT: ENTRY$ - pointer to entry in internal entrys table.
       18       18             SCRATCH: Local auto only.
       19       19             DESCRIPTION: Searches through the logical block table for an entry
       20       20             with a lexical level one (1) greater then the lexical level of the
       21       21             current logical block such that an entry in the internal entrys table
       22       22             that belongs to this logical block also has the desired symbolic
       23       23             name. ALTRETURNs if the desired internal entry was found, else RETURNs. */
       24       24                                                /**/
       25       25        DDS$IE_SRCH: PROC( SYM$, ENTRY$ ) ALTRET;

     25  0 000000   000000 700200 xent  DDS$IE_SRCH  TSX0  ! X66_AUTO_2
         0 000001   000020 000002                    ZERO    16,2

       26       26                                                /**/
       27       27    1   DCL SYM$ PTR;                           /* Pointer to label */
       28       28    1   DCL ENTRY$ PTR;                         /* Pointer to found entry */
       29       29    1   DCL CLB# SBIN;                          /* Current logical block number */
       30       30    1   DCL INTRY$ PTR;                         /* Pointer to current entry */
       31       31    1   DCL CLB$ PTR;                      /* Pointer to current logical block table */
       32       32    1   DCL TSYM$ PTR;                          /* Temp name pointer */
PL6.E3A0      #001=DDS$IE_SRCH File=DDS$IE_SRCH.:E05TSI                          TUE 07/29/97 14:16 Page:8    
       33       33    1   DCL LEVEL SBIN;                         /* Desired lexical level */
       34       34    1   DCL LEXLVL  SBIN;                       /* Temp for desired level */
       35       35    1   DCL INTRYEND SBIN;                      /* Table pointer end */
       36       36    1   DCL IX SBIN;                            /* Do while counter */
       37       37    1   DCL NP# SBIN;                           /* Name pointer */
       38       38        /*D* INTRYEND, IX, & NP# must be SBIN */
       39       39                                                /**/
       40       40        %INCLUDE B$OBJECT_C;                    /* Object language structures */
       41     3470        %B$DNAME (STCLASS="BASED(TSYM$)");
       42     3489        %B$INTNTRY (STCLASS="BASED(INTRY$)");
       43     3547        %B$LOGBLK (STCLASS="BASED(CLB$)");
       44     3578        %B$LBNTRY1;
       45     3605        %INCLUDE DD$BASED;
       46     4908        %TEXT$C (STCLASS="BASED(SYM$)");
       47     4913        %INCLUDE XUH_MACRO_C;
       48     4997        %INCLUDE DD_SD_M;                       /* "STATIC DATA " */
       49     6333        %S_D;
       50     7651    1   DCL DDF$IE_# ENTRY(2) ALTRET;
       51     7652    1   DCL DDF$DBG_# ENTRY(2) ALTRET;
       52     7653    1   DCL DDF$N_IE ENTRY(1) ALTRET;
       53     7654                                                /**/
       54     7655        /* Make sure we can access the schema */
       55     7656    1       IF ( NOT S_D.SCHEMA ) OR ( NOT S_D.QSCH.OK ) OR ( S_D.DBG$ = ADDR( NIL ) ) OR (
              7656                 S_D.IE$ = ADDR( NIL ) )

   7656  0 000002   000000 470400 xsym               LDP0    S_D$
         0 000003   000052 234100                    SZN     42,,PR0
         0 000004   000177 605000 0                  TPL     RETN
         0 000005   000733 234100                    SZN     475,,PR0
         0 000006   000177 605000 0                  TPL     RETN
         0 000007   001005 236100                    LDQ     517,,PR0
         0 000010   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000011   000177 600000 0                  TZE     RETN
         0 000012   001013 236100                    LDQ     523,,PR0
         0 000013   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000014   000177 600000 0                  TZE     RETN

PL6.E3A0      #001=DDS$IE_SRCH File=DDS$IE_SRCH.:E05TSI                          TUE 07/29/97 14:16 Page:9    
       56     7657    1        THEN GOTO RETN;
       57     7658    1        CLB$ = PINCRW( S_D.LB$, S_D.QSCH.LB# * SIZEW( B$LOGBLK ) );

   7658  0 000015   000740 720100                    LXL0    480,,PR0
         0 000016   001037 471500                    LDP1    543,,PR0
         0 000017   000000 635010                    EAA     0,X0
         0 000020   000020 771000                    ARL     16
         0 000021   100000 633505                    EPPR3   0,AL,PR1
         0 000022   200007 453500                    STP3    CLB$,,AUTO

       58     7659    1        LEVEL = B$LOGBLK.LEXLVL + 1;

   7659  0 000023   300001 236100                    LDQ     1,,PR3
         0 000024   000777 376007                    ANQ     511,DL
         0 000025   000001 036007                    ADLQ    1,DL
         0 000026   200011 756100                    STQ     LEVEL,,AUTO

       59     7660    1        CLB# = S_D.QSCH.LB#;

   7660  0 000027   000740 235100                    LDA     480,,PR0
         0 000030   200005 755100                    STA     CLB#,,AUTO

       60     7661        /* Starting at current entry in logical block table, search for an entry
       61     7662           with lexical level equal to current lexical level +1, with the constraint
       62     7663           that the lexical level is never less than or equal to the current
       63     7664           lexical level. */
       64     7665    2        DO WHILE ( CLB$ < S_D.LB_EYOND$ );

   7665  0 000031   200007 236100                    LDQ     CLB$,,AUTO
         0 000032   001040 116100                    CMPQ    544,,PR0
         0 000033   000053 603000 0                  TRC     GOTLB

       65     7666    2             CLB# = CLB# + 1;

   7666  0 000034   200005 054100                    AOS     CLB#,,AUTO

       66     7667    2             CLB$ = PINCRW( CLB$, SIZEW( B$LOGBLK ) ); /* Start at | get next */
PL6.E3A0      #001=DDS$IE_SRCH File=DDS$IE_SRCH.:E05TSI                          TUE 07/29/97 14:16 Page:10   

   7667  0 000035   200007 236100                    LDQ     CLB$,,AUTO
         0 000036   000004 036003                    ADLQ    4,DU
         0 000037   200007 756100                    STQ     CLB$,,AUTO

       67     7668    2             LEXLVL = B$LOGBLK.LEXLVL;

   7668  0 000040   200007 470500                    LDP0    CLB$,,AUTO
         0 000041   000001 236100                    LDQ     1,,PR0
         0 000042   000777 376007                    ANQ     511,DL
         0 000043   200012 756100                    STQ     LEXLVL,,AUTO

       68     7669    2             IF LEXLVL = LEVEL

   7669  0 000044   200011 116100                    CMPQ    LEVEL,,AUTO
         0 000045   000053 600000 0                  TZE     GOTLB

       69     7670    2             THEN GOTO GOTLB;
       70     7671    2             ELSE IF LEXLVL < LEVEL

   7671  0 000046   000177 604000 0                  TMI     RETN

       71     7672    2                  THEN GOTO RETN;
       72     7673    2           END;

   7673  0 000047   000000 471400 xsym               LDP1    S_D$
         0 000050   200007 236100                    LDQ     CLB$,,AUTO
         0 000051   101040 116100                    CMPQ    544,,PR1
         0 000052   000034 602000 0                  TNC     s:7666

   7666  0 000053                       GOTLB        null
       73     7674        /* Search internal entry table for the first internal entry belonging to
       74     7675           the logical block entry just found. */
       75     7676    1   GOTLB: ;
       76     7677    1        IX = 0;                            /* Start at the beginning */

   7677  0 000053   200014 450100                    STZ     IX,,AUTO
PL6.E3A0      #001=DDS$IE_SRCH File=DDS$IE_SRCH.:E05TSI                          TUE 07/29/97 14:16 Page:11   

       77     7678    1        CALL DDF$IE_#( IX, INTRY$ ) ALTRET( RETN );

   7678  0 000054   200006 630500                    EPPR0   INTRY$,,AUTO
         0 000055   200017 450500                    STP0    NP#+2,,AUTO
         0 000056   200014 631500                    EPPR1   IX,,AUTO
         0 000057   200016 451500                    STP1    NP#+1,,AUTO
         0 000060   200016 630500                    EPPR0   NP#+1,,AUTO
         0 000061   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000062   000000 701000 xent               TSX1    DDF$IE_#
         0 000063   000177 702000 0                  TSX2    RETN

       78     7679    1        INTRYEND = ( S_D.LB1$ -> B$LBNTRY1.INTRYSIZ / SIZEW( B$INTNTRY ) ) - 1;

   7679  0 000064   000000 470400 xsym               LDP0    S_D$
         0 000065   001036 471500                    LDP1    542,,PR0
         0 000066   100003 236100                    LDQ     3,,PR1
         0 000067   000022 772000                    QRL     18
         0 000070   000001 772000                    QRL     1
         0 000071   000001 136007                    SBLQ    1,DL
         0 000072   200013 756100                    STQ     INTRYEND,,AUTO

       79     7680    2        DO WHILE ( IX <= INTRYEND );

   7680  0 000073   200014 116100                    CMPQ    IX,,AUTO
         0 000074   000114 604000 0                  TMI     GOTIE

       80     7681    2             IF B$INTNTRY.LBE = CLB#

   7681  0 000075   200006 470500                    LDP0    INTRY$,,AUTO
         0 000076   000000 236100                    LDQ     0,,PR0
         0 000077   000033 772000                    QRL     27
         0 000100   200005 116100                    CMPQ    CLB#,,AUTO
         0 000101   000114 600000 0                  TZE     GOTIE

       81     7682    2             THEN GOTO GOTIE;
       82     7683    2             IX = IX + 1;
PL6.E3A0      #001=DDS$IE_SRCH File=DDS$IE_SRCH.:E05TSI                          TUE 07/29/97 14:16 Page:12   

   7683  0 000102   200014 054100                    AOS     IX,,AUTO

       83     7684    2             CALL DDF$N_IE( INTRY$ ) ALTRET( RETN ); /* Try next entry */

   7684  0 000103   200006 631500                    EPPR1   INTRY$,,AUTO
         0 000104   200016 451500                    STP1    NP#+1,,AUTO
         0 000105   200016 630500                    EPPR0   NP#+1,,AUTO
         0 000106   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000107   000000 701000 xent               TSX1    DDF$N_IE
         0 000110   000177 702000 0                  TSX2    RETN

       84     7685    2           END;

   7685  0 000111   200014 236100                    LDQ     IX,,AUTO
         0 000112   200013 116100                    CMPQ    INTRYEND,,AUTO
         0 000113   000075 604400 0                  TMOZ    s:7681

   7680  0 000114                       GOTIE        null
       85     7686        /* Starting at the internal entry just found, search internal entry table
       86     7687           for an entry at the desired lexical level with the desired name, such
       87     7688           that the lexical level is never less than the desired one. */
       88     7689    1   GOTIE: ;
       89     7690    2        DO WHILE ( IX <= INTRYEND );

   7690  0 000114   200014 236100                    LDQ     IX,,AUTO
         0 000115   200013 116100                    CMPQ    INTRYEND,,AUTO
         0 000116   000177 605400 0                  TPNZ    RETN

       90     7691    2            LEXLVL = PINCRW( S_D.LB$, SIZEW( B$LOGBLK ) * B$INTNTRY.LBE ) -> B$LOGBLK.
              7691                      LEXLVL;

   7691  0 000117   200006 470500                    LDP0    INTRY$,,AUTO
         0 000120   000000 236100                    LDQ     0,,PR0
         0 000121   000033 772000                    QRL     27
         0 000122   000000 471400 xsym               LDP1    S_D$
         0 000123   101037 473500                    LDP3    543,,PR1
PL6.E3A0      #001=DDS$IE_SRCH File=DDS$IE_SRCH.:E05TSI                          TUE 07/29/97 14:16 Page:13   
         0 000124   000002 736000                    QLS     2
         0 000125   300001 236106                    LDQ     1,QL,PR3
         0 000126   000777 376007                    ANQ     511,DL
         0 000127   200012 756100                    STQ     LEXLVL,,AUTO

       91     7692    2             IF LEXLVL = LEVEL

   7692  0 000130   200011 116100                    CMPQ    LEVEL,,AUTO
         0 000131   000164 601000 0                  TNZ     s:7702

       92     7693    3             THEN DO;

       93     7694    3                  NP# = B$INTNTRY.NPOINTER;

   7694  0 000132   000001 236100                    LDQ     1,,PR0
         0 000133   000022 732000                    QRS     18
         0 000134   200015 756100                    STQ     NP#,,AUTO

       94     7695    3                  CALL DDF$DBG_#( NP#, TSYM$ ) ALTRET( RETN ); /* Label ptr */

   7695  0 000135   200010 634500                    EPPR4   TSYM$,,AUTO
         0 000136   200017 454500                    STP4    NP#+2,,AUTO
         0 000137   200015 635500                    EPPR5   NP#,,AUTO
         0 000140   200016 455500                    STP5    NP#+1,,AUTO
         0 000141   200016 630500                    EPPR0   NP#+1,,AUTO
         0 000142   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000143   000000 701000 xent               TSX1    DDF$DBG_#
         0 000144   000177 702000 0                  TSX2    RETN

       95     7696    3                  IF TEXT$C.TXT = B$DNAME.TEXT

   7696  0 000145   200003 470500                    LDP0    @SYM$,,AUTO
         0 000146   000000 471500                    LDP1    0,,PR0
         0 000147   100000 236100                    LDQ     0,,PR1
         0 000150   000033 772000                    QRL     27
         0 000151   200010 473500                    LDP3    TSYM$,,AUTO
         0 000152   300000 220100                    LDX0    0,,PR3
PL6.E3A0      #001=DDS$IE_SRCH File=DDS$IE_SRCH.:E05TSI                          TUE 07/29/97 14:16 Page:14   
         0 000153   000000 621006                    EAX1    0,QL
         0 000154   040140 106540                    CMPC    fill='040'O
         0 000155   100000 200011                    ADSC9   0,,PR1                   cn=1,n=*X1
         0 000156   300000 400010                    ADSC9   0,,PR3                   cn=2,n=*X0
         0 000157   000165 601000 0                  TNZ     s:7704

       96     7697    4                  THEN DO;                 /* Got it */

       97     7698    4                       ENTRY$ = INTRY$;

   7698  0 000160   200006 236100                    LDQ     INTRY$,,AUTO
         0 000161   200004 474500                    LDP4    @ENTRY$,,AUTO
         0 000162   400000 756100                    STQ     0,,PR4

       98     7699    4                       ALTRETURN;          /* Split */

   7699  0 000163   000000 702200 xent               TSX2  ! X66_AALT

       99     7700    4                     END;
      100     7701    3                END;
      101     7702    2             ELSE IF LEXLVL < LEVEL

   7702  0 000164   000177 604000 0                  TMI     RETN

      102     7703    2                  THEN GOTO RETN;          /* Ran out of entrys */
      103     7704    2             IX = IX + 1;

   7704  0 000165   200014 054100                    AOS     IX,,AUTO

      104     7705    2             CALL DDF$N_IE( INTRY$ ) ALTRET( RETN ); /* Try next entry */

   7705  0 000166   200006 630500                    EPPR0   INTRY$,,AUTO
         0 000167   200016 450500                    STP0    NP#+1,,AUTO
         0 000170   200016 630500                    EPPR0   NP#+1,,AUTO
         0 000171   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000172   000000 701000 xent               TSX1    DDF$N_IE
         0 000173   000177 702000 0                  TSX2    RETN
PL6.E3A0      #001=DDS$IE_SRCH File=DDS$IE_SRCH.:E05TSI                          TUE 07/29/97 14:16 Page:15   

      105     7706    2           END;

   7706  0 000174   200014 236100                    LDQ     IX,,AUTO
         0 000175   200013 116100                    CMPQ    INTRYEND,,AUTO
         0 000176   000117 604400 0                  TMOZ    s:7691

      106     7707                                                /**/
      107     7708    1   RETN: RETURN;                           /* Couldn't find specified label */

   7708  0 000177   000000 702200 xent  RETN         TSX2  ! X66_ARET
      108     7709                                                /**/
      109     7710    1   END DDS$IE_SRCH;

PL6.E3A0      #001=DDS$IE_SRCH File=DDS$IE_SRCH.:E05TSI                          TUE 07/29/97 14:16 Page:16   
--  Include file information  --

   DD_SD_M.:E05TOU  is referenced.
   XUH_MACRO_C.:E05TOU  is referenced.
   DD$BASED.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure DDS$IE_SRCH.

   Procedure DDS$IE_SRCH requires 128 words for executable code.
   Procedure DDS$IE_SRCH requires 16 words of local(AUTO) storage.

    No errors detected in file DDS$IE_SRCH.:E05TSI    .
PL6.E3A0      #001=DDS$IE_SRCH File=DDS$IE_SRCH.:E05TSI                          TUE 07/29/97 14:16 Page:17   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=DDS$IE_SRCH File=DDS$IE_SRCH.:E05TSI                          TUE 07/29/97 14:16 Page:18   
          MINI XREF LISTING

B$DNAME.COUNT
      3479**DCL      3486--IMP-SIZ  7696>>IF
B$DNAME.TEXT
      3486**DCL      7696>>IF
B$INTNTRY
      3490**DCL      7679--ASSIGN
B$INTNTRY.LBE
      3491**DCL      7681>>IF       7691>>ASSIGN
B$INTNTRY.NPOINTER
      3504**DCL      7694>>ASSIGN
B$INTNTRY.OU
      3494**DCL      3501--REDEF
B$LBNTRY1.INTRYSIZ
      3598**DCL      7679>>ASSIGN
B$LOGBLK
      3548**DCL      7658--ASSIGN   7667--ASSIGN   7691--ASSIGN
B$LOGBLK.LEXLVL
      3559**DCL      7659>>ASSIGN   7668>>ASSIGN   7691>>ASSIGN
CLB#
        29**DCL      7660<<ASSIGN   7666<<ASSIGN   7666>>ASSIGN   7681>>IF
CLB$
        31**DCL      3548--IMP-PTR  7658<<ASSIGN   7659>>ASSIGN   7665>>DOWHILE  7667<<ASSIGN   7667>>ASSIGN
      7668>>ASSIGN
DDF$DBG_#
      7652**DCL-ENT  7695--CALL
DDF$IE_#
      7651**DCL-ENT  7678--CALL
DDF$N_IE
      7653**DCL-ENT  7684--CALL     7705--CALL
ENTRY$
        28**DCL        25--PROC     7698<<ASSIGN
GOTIE
PL6.E3A0      #001=DDS$IE_SRCH File=DDS$IE_SRCH.:E05TSI                          TUE 07/29/97 14:16 Page:19   
      7680**LABEL    7682--GOTO
GOTLB
      7666**LABEL    7670--GOTO
INTRY$
        30**DCL      3490--IMP-PTR  7678<>CALL     7681>>IF       7684<>CALL     7691>>ASSIGN   7694>>ASSIGN
      7698>>ASSIGN   7705<>CALL
INTRYEND
        35**DCL      7679<<ASSIGN   7680>>DOWHILE  7690>>DOWHILE
IX
        36**DCL      7677<<ASSIGN   7678<>CALL     7680>>DOWHILE  7683<<ASSIGN   7683>>ASSIGN   7690>>DOWHILE
      7704<<ASSIGN   7704>>ASSIGN
LEVEL
        33**DCL      7659<<ASSIGN   7669>>IF       7671>>IF       7692>>IF       7702>>IF
LEXLVL
        34**DCL      7668<<ASSIGN   7669>>IF       7671>>IF       7691<<ASSIGN   7692>>IF       7702>>IF
NP#
        37**DCL      7694<<ASSIGN   7695<>CALL
RETN
      7708**LABEL    7657--GOTO     7672--GOTO     7678--CALLALT  7684--CALLALT  7695--CALLALT  7703--GOTO
      7705--CALLALT
SYM$
        27**DCL        25--PROC     4909--IMP-PTR  7696>>IF       7696>>IF
S_D.CURRENT_CHANNEL
      7285**DCL      7287--REDEF
S_D.DBG$
      6735**DCL      7656>>IF
S_D.DEBUGA
      6437**DCL      6439--REDEF
S_D.EIS
      7395**DCL      7424--REDEF
S_D.HOST_MESSAGE_BUF_REMOTE
      7328**DCL      7329--REDEF    7343--REDEF
S_D.IE$
      6747**DCL      7656>>IF
S_D.JDE
      6942**DCL      6943--REDEF
PL6.E3A0      #001=DDS$IE_SRCH File=DDS$IE_SRCH.:E05TSI                          TUE 07/29/97 14:16 Page:20   
S_D.L$.VALUE
      6495**DCL      6501--REDEF    6509--REDEF    6512--REDEF    6515--REDEF    6518--REDEF
S_D.L$.VALUE.L
      6496**DCL      6497--REDEF    6498--REDEF
S_D.L6_MESSAGE_BUF
      7349**DCL      7351--REDEF
S_D.LB$
      6775**DCL      7658>>ASSIGN   7691>>ASSIGN
S_D.LB1$
      6773**DCL      7679>>ASSIGN
S_D.LB_EYOND$
      6777**DCL      7665>>DOWHILE
S_D.OUTPUT
      7315**DCL      7317--REDEF
S_D.QSCH.LB#
      6651**DCL      7658>>ASSIGN   7660>>ASSIGN
S_D.QSCH.OK
      6641**DCL      7656>>IF
S_D.REMOTE_MSG.FNCC
      7334**DCL      7335--REDEF
S_D.REMOTE_MSG.STXC
      7330**DCL      7331--REDEF
S_D.REMOTE_MSG.SUBFNCC
      7338**DCL      7339--REDEF
S_D.SCHEMA
      6435**DCL      7656>>IF
S_D.SV
      6394**DCL      6415--REDEF
S_D$
      7646**DCL      6342--IMP-PTR  7656>>IF       7656>>IF       7656>>IF       7656>>IF       7658>>ASSIGN
      7658>>ASSIGN   7660>>ASSIGN   7665>>DOWHILE  7679>>ASSIGN   7691>>ASSIGN
TEXT$C.SIZE
      4910**DCL      4911--IMP-SIZ  7696>>IF
TEXT$C.TXT
      4911**DCL      7696>>IF
TSYM$
PL6.E3A0      #001=DDS$IE_SRCH File=DDS$IE_SRCH.:E05TSI                          TUE 07/29/97 14:16 Page:21   
        32**DCL      3478--IMP-PTR  7695<>CALL     7696>>IF       7696>>IF
PL6.E3A0      #001=DDS$IE_SRCH File=DDS$IE_SRCH.:E05TSI                          TUE 07/29/97 14:16 Page:22   
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #001=DDS$IE_SRCH File=DDS$IE_SRCH.:E05TSI                          TUE 07/29/97 14:16 Page:23   
              MINI UREF LISTING

DDS$IE_SRCH      25**PROC
