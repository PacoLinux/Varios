/*M* DIPRO.X - A PROGRAM TO DISPLAY PROFILE NAMES CONVENIENTLY */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
DIPRO: PROC MAIN;
 
%INCLUDE B$JIT;
%INCLUDE B_ERRORS_C;
%INCLUDE CP_6;
  %B$ALT;
  %B$TCB;
  %F$DCB;
%INCLUDE CP_6_SUBS;
/* CLUDE DIPRO_C61; */
%INCLUDE KL_SUPER_C;
  %KL_PHDR   (NAME                     = PRO_HDR,
              STCLASS="BASED(PHDR$)"
             );
%INCLUDE XU_FORMAT_C;
%INCLUDE XU_MACRO_C;
%INCLUDE XU_PERR_C;
%INCLUDE XUF_ENTRY;
%INCLUDE XUR_ENTRY;
%INCLUDE XUW_MACRO_C;
%EJECT;
%LIST;
%INCLUDE DIPRO_C61;
%PLIST;
%EJECT;
/**/
/* SUBs used to access the PCB */
/**/
 
%SUB BLK1_NSUBLKS = "BLK1$ -> P_OUT.NSUBLKS";
%SUB BLK1_SUBLK$  = "BLK1$ -> P_OUT.SUBLK$";
 
%SUB BLK2_NSUBLKS = "BLK2$ -> P_OUT.NSUBLKS";
%SUB BLK2_SUBLK$  = "BLK2$ -> P_OUT.SUBLK$";
%SUB BLK2_CODE    = "BLK2$ -> P_SYM.CODE";
%SUB BLK2_COUNT   = "BLK2$ -> P_SYM.COUNT";
%SUB BLK2_TEXT    = "SUBSTR(BLK2$->P_SYM.TEXT,0,BLK2$->P_SYM.COUNT)";
 
%SUB BLK3_NSUBLKS = "BLK3$ -> P_OUT.NSUBLKS";
%SUB BLK3_SUBLK$  = "BLK3$ -> P_OUT.SUBLK$";
%SUB BLK3_CODE    = "BLK3$ -> P_SYM.CODE";
%SUB BLK3_COUNT   = "BLK3$ -> P_SYM.COUNT";
%SUB BLK3_TEXT    = "SUBSTR(BLK3$->P_SYM.TEXT,0,BLK3$->P_SYM.COUNT)";
 
%SUB BLK4_NSUBLKS = "BLK4$ -> P_OUT.NSUBLKS";
%SUB BLK4_SUBLK$  = "BLK4$ -> P_OUT.SUBLK$";
%SUB BLK4_CODE    = "BLK4$ -> P_SYM.CODE";
%SUB BLK4_COUNT   = "BLK4$ -> P_SYM.COUNT";
%SUB BLK4_TEXT    = "SUBSTR(BLK4$->P_SYM.TEXT,0,BLK4$->P_SYM.COUNT)";
%EJECT;
%M$DCB       (DCBN                     = M$UI,
              ACCT=':SYS    ',
              ASN=FILE,
              FUN=IN,
              NAME=':PRO',
              SHARE=ALL
             );
 
%FPT_OPEN    (FPTN                     = OPEN_PRO,
              DCB=M$UI
             );
 
%FPT_READ    (FPTN                     = READ_PRO,
              BUF=PRO_REC,
              DCB=M$UI,
              KEY=PRO_KEY,
              KEYR=YES
             );
 
%FPT_CLOSE   (FPTN                     = FPT_CLOSE,
              DCB=M$UI,
              DISP=SAVE
             );
 
%FPT_EXIT    (FPTN                     = FPT_EXIT );
 
%FPT_ERRMSG  (FPTN                     = ERRMSG,
              BUF=TMP_BUF,
              DCB=M$UI,
              CODE=ERRCODE,
              OUTDCB1=M$LO
             );
%VLP_ERRCODE (FPTN                     = ERRCODE );
 
%FPT_PRECORD (FPTN                     = FPT_PRECORD,
              DCB=M$UI,
              KEY=FIRST_NAME,
              KEYS=YES
             );
 
%FPT_PFIL    (FPTN                     = PFIL_BOF,
              DCB=M$UI,
              BOF=YES
             );
 
%FPT_INT     (FPTN                     = BREAK_CNTRL,
              UENTRY=HANDLE_BREAK );
%EJECT;
/**************************************************/
/*                                                */
/* XUR$GETCMD, X$PARSE and XUF$FORMAT macro stuff */
/*                                                */
/**************************************************/
 
%P$PCB       (NAME                     = P$PCB,
              STCLASS="BASED(PCB$)"
             );
%PARSE$OUT   (NAME                     = P_OUT,
              STCLASS="BASED(BLK1$)"
             );
%PARSE$SYM   (NAME                     = P_SYM,
              STCLASS="BASED(BLK1$)"
             );
 
%XUR_INIT;
 
%F_FDS       (NAME                     = F_FDS,
              BUF=LO_BUF,
              DCB=M$LO,
              STCLASS=STATIC
             );
 
%XUW_WILDCARD(FPTN                     = XUW_WILDCARD );
%EJECT;
DCL LO_BUF                   CHAR(132) STATIC;
DCL N                        CHAR(0)   STATIC INIT('N');
DCL PREV_NAME                CHAR(12);
DCL TMP_BUF                  CHAR(360) STATIC;
DCL TYPE_NAME(0:%KLTY_LINEDEV#) CHAR(5) STATIC INIT(
    'PROG ','RBTD ','ASYNC','RBT  ','LINK ','FEP  ','URP  ','3270D',
    'VIRCR','CONT ','LINDV' );
DCL Y                        CHAR(0)   STATIC INIT('Y');
 
DCL M$LO                     DCB;
DCL M$SI                     DCB;
 
DCL HANDLE_BREAK             ENTRY     ASYNC;
DCL X$WILDCMP                ENTRY(1)  ALTRET;
 
DCL B$JIT$                   PTR       SYMREF;
DCL B$TCB$                   PTR       SYMREF;
DCL BLK1$                    PTR;
DCL  PERRCODE REDEF BLK1$    BIT(36);
DCL BLK2$                    PTR;
DCL BLK3$                    PTR;
DCL BLK4$                    PTR;
DCL M$SI$                    PTR;
DCL M$UI$                    PTR;
DCL PCB$                     PTR;
DCL PHDR$                    PTR;
 
DCL ATTR                     UBIN;
DCL BREAK_CNT                UBIN      STATIC SYMDEF INIT(0);
DCL DIPRO_OPTIONS            UBIN      SYMREF;
DCL I                        UBIN;
DCL L                        UBIN;
DCL LINE#                    UBIN;
DCL LONGEST                  UBIN;
DCL LONGEST_TYPE             UBIN;
DCL NUM_LISTED               UBIN;
DCL NUM_PROS                 UBIN;
DCL NUM_TYPES                UBIN;
DCL PAGE_LENGTH              UBIN;
DCL PAGE_WIDTH               UBIN;
DCL TMP_INDX                 UBIN;
DCL TYPE(0:%KLTY_LINEDEV#)   UBIN;
DCL X                        UBIN;
 
DCL 1 PRO_KEY  STATIC,
      2 LEN                  UBIN(9)   CALIGNED,
      2 NAME                 CHAR(11)  CALIGNED,
      2 *                    CHAR(53)  CALIGNED;
 
DCL 1 PRO_REC  STATIC,
      2 TYPE                 UBIN(9)   CALIGNED,
      2 REC                  CHAR(4095)CALIGNED;
 
DCL 1 FIRST_NAME  STATIC,
      2 LEN                  UBIN(9)   CALIGNED,
      2 NAME                 CHAR(11)  CALIGNED;
 
DCL 1 LAST_NAME  STATIC,
      2 LEN                  UBIN(9)   CALIGNED,
      2 NAME                 CHAR(11)  CALIGNED;
 
DCL 1 TARGET,
      2 LEN                  UBIN(9)   CALIGNED,
      2 NAME                 CHAR(12)  CALIGNED;
%EJECT;
DCL FMT0                     CHAR(0)   STATIC INIT('%>A');
DCL FMT1                     CHAR(0)   STATIC INIT(
'                                     TRUE A B LOWR     NUM');
DCL FMT2                     CHAR(0)   STATIC INIT(
'              GRAFX TRAN  NO  U      OVER P I CASE     IMP  L C I G');
DCL FMT3                     CHAR(0)   STATIC INIT(
'TYPE  WID LIN LEGAL LEGL XLAT C NATL PRNT L N PRNT I/O RECS P P C R PROFILE NAME');
DCL FMT4                     CHAR(0)   STATIC INIT(
'----- --- --- ----- ---- ---- - ---- ---- - - ---- --- ---- - - - - ------------');
DCL FMT5                     CHAR(0)   STATIC INIT(
'%5A %3D %3D   %A     %A    %A  %A   %A    %A  %A %A   %A  %A %A %4D %A %A %A %A %>A' );
DCL FMT6                     CHAR(0)   STATIC INIT(
'.. No %>A profiles listed.');
DCL FMT7                     CHAR(0)   STATIC INIT(
'.. %D profiles listed.');
DCL FMT8                     CHAR(0)   STATIC INIT(
'.. %D %>A profile(s) listed.');
DCL FMT9                     CHAR(0)   STATIC INIT(
'DIPRO version A00, last updated 03/16/87' );
 
DCL VEC1_                    BIT(72);
DCL VEC2_                    BIT(72);
DCL VEC3_                    BIT(72);
DCL VEC4_                    BIT(72);
DCL VEC5_                    BIT(72);
DCL VEC6_                    BIT(72);
DCL VEC7_                    BIT(72);
DCL VEC8_                    BIT(72);
DCL VEC9_                    BIT(72);
DCL VEC10_                   BIT(72);
DCL VEC11_                   BIT(72);
DCL VEC12_                   BIT(72);
DCL VEC13_                   BIT(72);
DCL VEC14_                   BIT(72);
DCL VEC15_                   BIT(72);
DCL VEC16_                   BIT(72);
DCL VEC17_                   BIT(72);
DCL VEC18_                   BIT(72);
DCL VEC19_                   BIT(72);
DCL VEC20_                   BIT(72);
%EJECT;
 
    CALL INITIALIZE          ALTRET( OOPS );  /* Housekeep, open :PRO.:SYS    */
 
    CALL PARSE_OPTIONS       ALTRET( OOPS );  /* Parse command line options   */
 
    CALL FIND_LONGEST_NAME   ALTRET( OOPS );  /* Determine column widths      */
 
    IF NUM_LISTED > 0 THEN                    /* Did we find any matches?     */
       CALL LIST_NAMES;                       /* Yep.  Go list them!          */
 
    CALL PUT_SUMMARY;
 
CLOSEM:
 
    DO WHILE('0'B);
OOPS:
       FPT_EXIT.V.STEPCC#= 4;
       END;
 
    CALL M$CLOSE( FPT_CLOSE );
    FPT_CLOSE.V.DCB#= DCBNUM(M$LO);
    CALL M$CLOSE( FPT_CLOSE );
 
BYE:
    CALL M$EXIT( FPT_EXIT );
%EJECT;
DISPLAY_DATA: PROC  ALTRET;
 
    LINE#= LINE# + 1;
    IF LINE# > PAGE_LENGTH THEN DO;           /* Time to start a new page?    */
       CALL X$WRITE( F_FDS,VECTOR(FMT1) );    /* Yep.                         */
       CALL X$WRITE( F_FDS,VECTOR(FMT2) );
       CALL X$WRITE( F_FDS,VECTOR(FMT3) );
       CALL X$WRITE( F_FDS,VECTOR(FMT4) );
       LINE#= 5;
       END;
 
    VEC1_= VECTOR(TYPE_NAME(PRO_REC.TYPE));
    VEC2_= VECTOR(PRO_HDR.WIDTH);
    VEC3_= VECTOR(PRO_HDR.LINES);
    IF PRO_HDR.ATTR.GRLGL THEN
       VEC4_= VECTOR(Y);
    ELSE
       VEC4_= VECTOR(N);
    IF PRO_HDR.ATTR.TRANSLGL THEN
       VEC5_= VECTOR(Y);
    ELSE
       VEC5_= VECTOR(N);
    IF PRO_HDR.ATTR.NOXLATE THEN
       VEC6_= VECTOR(Y);
    ELSE
       VEC6_= VECTOR(N);
    IF PRO_HDR.ATTR.UPPERCASE THEN
       VEC7_= VECTOR(Y);
    ELSE
       VEC7_= VECTOR(N);
    IF PRO_HDR.ATTR.NATL THEN
       VEC8_= VECTOR(Y);
    ELSE
       VEC8_= VECTOR(N);
    IF PRO_HDR.ATTR.TRUOVRPRT THEN
       VEC9_= VECTOR(Y);
    ELSE
       VEC9_= VECTOR(N);
    IF PRO_HDR.ATTR.APL THEN
       VEC10_= VECTOR(Y);
    ELSE
       VEC10_= VECTOR(N);
    IF PRO_HDR.ATTR.BIN THEN
       VEC11_= VECTOR(Y);
    ELSE
       VEC11_= VECTOR(N);
    IF PRO_HDR.ATTR.LCASE THEN
       VEC12_= VECTOR(Y);
    ELSE
       VEC12_= VECTOR(N);
    IF PRO_HDR.IO.INPUT THEN
       VEC13_= VECTOR(Y);
    ELSE
       VEC13_= VECTOR(N);
    IF PRO_HDR.IO.OUTPUT THEN
       VEC14_= VECTOR(Y);
    ELSE
       VEC14_= VECTOR(N);
    X= PRO_HDR.IMP#;
    VEC15_= VECTOR(X);
    IF PRO_HDR.DDEV.LP THEN
       VEC16_= VECTOR(Y);
    ELSE
       VEC16_= VECTOR(N);
    IF PRO_HDR.DDEV.CP THEN
       VEC17_= VECTOR(Y);
    ELSE
       VEC17_= VECTOR(N);
    IF PRO_HDR.DDEV.IC THEN
       VEC18_= VECTOR(Y);
    ELSE
       VEC18_= VECTOR(N);
    IF PRO_HDR.DDEV.GRAPHICS_OK THEN
       VEC19_= VECTOR(Y);
    ELSE
       VEC19_= VECTOR(N);
    VEC20_= VECTOR(PRO_KEY.NAME);
 
    CALL X$WRITE( F_FDS,VECTOR(FMT5),VEC1_,
                                     VEC2_,
                                     VEC3_,
                                     VEC4_,
                                     VEC5_,
                                     VEC6_,
                                     VEC7_,
                                     VEC8_,
                                     VEC9_,
                                     VEC10_,
                                     VEC11_,
                                     VEC12_,
                                     VEC13_,
                                     VEC14_,
                                     VEC15_,
                                     VEC16_,
                                     VEC17_,
                                     VEC18_,
                                     VEC19_,
                                     VEC20_
                );
 
RE_TURN:
    RETURN;
 
END DISPLAY_DATA;
%EJECT;
DO_WE_WANT_IT: PROC  ALTRET;
 
    CALL INDEX( L,' ',PRO_KEY.NAME );
    XUW_WILDCARD.INPUT_= VECTOR(SUBSTR(PRO_KEY.NAME,0,L));
    XUW_WILDCARD.PATTERN_= VECTOR(SUBSTR(TARGET.NAME,0,TARGET.LEN));
    CALL X$WILDCMP( XUW_WILDCARD )  ALTRET( ALT_RETURN );
    IF PRO_KEY.NAME <= LAST_NAME.NAME THEN    /* Time to quit?                */
RE_TURN:
       RETURN;
 
ALT_RETURN:
    ALTRETURN;
 
END DO_WE_WANT_IT;
%EJECT;
FIND_LONGEST_NAME: PROC  ALTRET;
 
    NUM_LISTED= 0;
    PRO_KEY.NAME= FIRST_NAME.NAME;
    IF FIRST_NAME.NAME = %BINASC(0) THEN      /* Was a FIRST name specified?  */
       CALL M$PFIL( PFIL_BOF );               /* Nope, start at BOF.          */
    ELSE
       CALL M$PRECORD( FPT_PRECORD )   WHENALTRETURN DO;  /* Start at FIRST   */
          ERRCODE= B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR;
          IF ERRCODE.ERR# ~= %E$NOKEY  AND  ERRCODE.ERR# ~= %E$EOF  THEN
             GOTO ALT_RETURN;
          END;
 
    LONGEST= 0;
    DO UNTIL( PRO_KEY.NAME > LAST_NAME.NAME );
       CALL M$READ( READ_PRO )  ALTRET( WAS_EOF_HIT );
       IF PRO_KEY.LEN < LENGTHC(PRO_KEY.NAME) THEN
          SUBSTR(PRO_KEY.NAME,PRO_KEY.LEN)= ' ';  /* Blank any residue        */
 
       DO I = 0 TO NUM_TYPES - 1;
          IF PRO_REC.TYPE = TYPE(I) THEN      /* Do they want this TYPE?      */
             GOTO KEEP_IT;                    /* Yep!                         */
          END; /* DO I */
 
       DO WHILE('0'B);
KEEP_IT:
          CALL DO_WE_WANT_IT  ALTRET( NEXT_NAME );
          NUM_LISTED= NUM_LISTED + 1;
          CALL INDEX1( X,' ',PRO_KEY.NAME );
          IF PRO_KEY.NAME < LAST_NAME.NAME  AND  X > LONGEST  THEN
             LONGEST= X;
          END; /* DO WHILE('0'B); */
 
NEXT_NAME:
       END; /* UNTIL( PRO_KEY.NAME < LAST_NAME.NAME ); */
 
    DO WHILE('0'B);
WAS_EOF_HIT:
       ERRCODE= B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR;
       IF ERRCODE.ERR# ~= %E$EOF  AND  ERRCODE.ERR# ~= %E$NOKEY  THEN
ALT_RETURN:
          ALTRETURN;
       END;
 
RE_TURN:
    RETURN;
 
END FIND_LONGEST_NAME;
%EJECT;
INITIALIZE: PROC  ALTRET;
 
    M$SI$= DCBADDR(DCBNUM(M$SI));
    M$UI$= DCBADDR(DCBNUM(M$UI));
    IF M$UI$ -> F$DCB.AMR# THEN DO;
       IF M$UI$ -> F$DCB.ACCT# ~= '        ' THEN
          OPEN_PRO.ACCT_= VECTOR(NIL);
       IF M$UI$ -> F$DCB.NAME#.L > 0 THEN
          OPEN_PRO.NAME_= VECTOR(NIL);
       END;
 
    CALL M$OPEN( OPEN_PRO )            ALTRET( ALT_RETURN );
 
    CALL M$INT( BREAK_CNTRL )          ALTRET( ALT_RETURN );
 
    LINE#= 999;
    LONGEST= 0;
    NUM_PROS= 0;
    PAGE_LENGTH= 24;
    PAGE_WIDTH= 80;
    PHDR$= ADDR(PRO_REC);
 
RE_TURN:
    RETURN;
 
ALT_RETURN:
    ALTRETURN;
 
END INITIALIZE;
%EJECT;
LIST_NAMES: PROC;
 
    NUM_LISTED= 0;
    PRO_KEY.NAME= FIRST_NAME.NAME;
    IF FIRST_NAME.NAME = %BINASC(0) THEN      /* Was a FIRST name specified?  */
       CALL M$PFIL( PFIL_BOF );               /* Nope, start at BOF.          */
    ELSE
       CALL M$PRECORD( FPT_PRECORD )   WHENALTRETURN DO;
          ERRCODE= B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR;
          IF ERRCODE.ERR# ~= %E$NOKEY  AND  ERRCODE.ERR# ~= %E$EOF  THEN
             GOTO RE_TURN;
          END;
 
    PREV_NAME= ' ';
    TMP_BUF= ' ';
    TMP_INDX= 0;
    DO WHILE( PRO_KEY.NAME < LAST_NAME.NAME  AND  BREAK_CNT = 0 );
       CALL M$READ( READ_PRO )  ALTRET( PRINT_PARTIAL );
       IF PRO_KEY.LEN < LENGTHC(PRO_KEY.NAME) THEN
          SUBSTR(PRO_KEY.NAME,PRO_KEY.LEN)= ' ';
       IF PRO_KEY.NAME = PREV_NAME THEN
          GOTO NEXT_NAME;
       DO I = 0 TO NUM_TYPES - 1;
          IF PRO_REC.TYPE = TYPE(I) THEN
             GOTO KEEP_IT;
          END;
 
       DO WHILE('0'B);
KEEP_IT:
          CALL DO_WE_WANT_IT  ALTRET( NEXT_NAME );
          NUM_LISTED= NUM_LISTED + 1;
          CALL INDEX( L,' ',PRO_KEY.NAME );
          DO CASE( ATTR );
             CASE( 0 );
JUST_NAMES:
                IF TMP_INDX > 0 THEN
                   IF TMP_INDX + L > PAGE_WIDTH THEN DO;
                      CALL X$WRITE( F_FDS,VECTOR(FMT0),
                                       VECTOR(SUBSTR(TMP_BUF,0,TMP_INDX)) );
                      TMP_BUF= ' ';
                      TMP_INDX= 0;
                      END;
                SUBSTR(TMP_BUF,TMP_INDX)= PRO_KEY.NAME;
                TMP_INDX= TMP_INDX + LONGEST + LENGTHC('  ');
 
             CASE( %ATTRIBUTES## );
                IF NUM_TYPES = 1 THEN
                   GOTO JUST_NAMES;
                CALL INDEX( X,' ',TYPE_NAME(PRO_REC.TYPE) );
                IF TMP_INDX > 0 THEN
                   IF TMP_INDX + L + X + LENGTHC('()   ') > PAGE_WIDTH THEN DO;
                      CALL X$WRITE( F_FDS,VECTOR(FMT0),
                                       VECTOR(SUBSTR(TMP_BUF,0,TMP_INDX)) );
                      TMP_BUF= ' ';
                      TMP_INDX= 0;
                      END;
                CALL INSERT( TMP_BUF,TMP_INDX,,
                                       SUBSTR(PRO_KEY.NAME,0,PRO_KEY.LEN),
                                       ' (',SUBSTR(TYPE_NAME(PRO_REC.TYPE),0,X),
                                       ')  ' );
                TMP_INDX= TMP_INDX + LONGEST + LONGEST_TYPE + LENGTHC('   ');
             CASE( %EXT_ATTR## );
                CALL DISPLAY_DATA;
 
             END; /* CASE */
          END; /* DO WHILE('0'B); */
 
NEXT_NAME:
       PREV_NAME= PRO_KEY.NAME;
       END; /* DO WHILE( PRO_KEY.NAME < LAST_NAME.NAME ); */
 
PRINT_PARTIAL:
    IF TMP_INDX > 0 THEN
       CALL X$WRITE( F_FDS,VECTOR(FMT0),VECTOR(SUBSTR(TMP_BUF,0,TMP_INDX)) );
 
RE_TURN:
    RETURN;
 
END LIST_NAMES;
%EJECT;
PARSE_OPTIONS: PROC  ALTRET;
 
    ATTR= 0;
    FIRST_NAME.LEN=  LENGTHC(%BINASC(0));
    FIRST_NAME.NAME=         %BINASC(0);
    LAST_NAME.LEN=   LENGTHC('~');
    LAST_NAME.NAME=          '~';
    LONGEST_TYPE= 0;
    NUM_TYPES= 0;
 
    X= B$JIT.CCARS - B$JIT.CCDISP;            /* Get length of options        */
    IF X = 0 THEN                             /* Any options?                 */
       GOTO SET_DEFAULTS;                     /* Nope.                        */
 
    CALL XUR$INIT( XUR_INIT,PCB$ );
 
    TMP_BUF= SUBSTR(B$JIT.CCBUF,B$JIT.CCDISP);/* Get the options              */
 
    CALL XUR$GETCMD( DIPRO_OPTIONS,BLK1$,,TMP_BUF,X )  ALTRET( PARSE_ERR );
 
    X= 0;
 
    DO I = 0 TO BLK1_NSUBLKS - 1;
       BLK2$= BLK1_SUBLK$(I);
       IF BLK2_NSUBLKS > 0 THEN
          BLK3$= BLK2_SUBLK$(0);
 
       DO CASE( BLK2_CODE );
 
          CASE( %A3270## );                   /* 3/270                        */
             TYPE(NUM_TYPES)= %KLTY_3270#;
             NUM_TYPES= NUM_TYPES + 1;
             IF LONGEST_TYPE < LENGTHC('(3270)') THEN
                LONGEST_TYPE= LENGTHC('(3270)');
 
          CASE( %ALL## );                     /* AL/L                         */
             TYPE(%KLTY_PROG#)=    %KLTY_PROG#;
             TYPE(%KLTY_SDEV#)=    %KLTY_SDEV#;
             TYPE(%KLTY_TTY#)=     %KLTY_TTY#;
             TYPE(%KLTY_STRM#)=    %KLTY_STRM#;
             TYPE(%KLTY_LINK#)=    %KLTY_LINK#;
             TYPE(%KLTY_FEP#)=     %KLTY_FEP#;
             TYPE(%KLTY_URP#)=     %KLTY_URP#;
             TYPE(%KLTY_3270#)=    %KLTY_3270#;
             TYPE(%KLTY_VIRCIR#)=  %KLTY_VIRCIR#;
             TYPE(%KLTY_CONT#)=    %KLTY_CONT#;
             TYPE(%KLTY_LINEDEV#)= %KLTY_LINEDEV#;
             NUM_TYPES= %KLTY_LINEDEV# + 1;
             LONGEST_TYPE= LENGTHC('(ASYNC)');
 
          CASE( %ASYNC## );                   /* AS/YNC | TT/Y                */
             TYPE(NUM_TYPES)= %KLTY_TTY#;
             NUM_TYPES= NUM_TYPES + 1;
             IF LONGEST_TYPE < LENGTHC('(ASYNC)') THEN
                LONGEST_TYPE=  LENGTHC('(ASYNC)');
 
          CASE( %ATTRIBUTES## );              /* A/TTRIBUTE                   */
             ATTR= %ATTRIBUTES##;
 
          CASE( %EXT_ATTR## );                /* E/XTENDED A/TTRIBUTE         */
             ATTR= %EXT_ATTR##;
 
          CASE( %FIRST## );                   /* { FI/RST | FR/OM } = .an11   */
             FIRST_NAME.LEN= BLK3_COUNT;
             FIRST_NAME.NAME= BLK3_TEXT;
 
          CASE( %LAST## );                    /* LA/ST = .an11                */
             LAST_NAME.LEN= BLK3_COUNT;
             LAST_NAME.NAME= BLK3_TEXT;
             IF LAST_NAME.LEN < LENGTHC(LAST_NAME.NAME) THEN DO;
                SUBSTR(LAST_NAME.NAME,LAST_NAME.LEN,1)= '~';
                LAST_NAME.LEN= LAST_NAME.LEN + 1;
                END;
 
          CASE( %LINK## );                    /* LI/NK                        */
             TYPE(NUM_TYPES)= %KLTY_LINK#;
             NUM_TYPES= NUM_TYPES + 1;
             IF LONGEST_TYPE < LENGTHC('(LINK)') THEN
                LONGEST_TYPE=  LENGTHC('(LINK)');
 
          CASE( %RBT## );                     /* RBT                          */
             TYPE(NUM_TYPES)= %KLTY_STRM#;
             NUM_TYPES= NUM_TYPES + 1;
             IF LONGEST_TYPE < LENGTHC('(RBT)') THEN
                LONGEST_TYPE=  LENGTHC('(RBT)');
 
          CASE( %RBTD## );                    /* RBTD                         */
             TYPE(NUM_TYPES)= %KLTY_SDEV#;
             NUM_TYPES= NUM_TYPES + 1;
             IF LONGEST_TYPE < LENGTHC('(RBTD)') THEN
                LONGEST_TYPE=  LENGTHC('(RBTD)');
 
          CASE( %TYPE## );                    /* TY/PE = .dec3                */
             CALL CHARBIN( TYPE(NUM_TYPES),BLK3_TEXT );
             NUM_TYPES= NUM_TYPES + 1;
             IF LONGEST_TYPE < LENGTHC('(000)') THEN
                LONGEST_TYPE=  LENGTHC('(000)');
 
          CASE( %URP## );                     /* URP                          */
             TYPE(NUM_TYPES)= %KLTY_URP#;
             NUM_TYPES= NUM_TYPES + 1;
             IF LONGEST_TYPE < LENGTHC('(URP)') THEN
                LONGEST_TYPE=  LENGTHC('(URP)');
 
          CASE( %VERSION## );                 /* VE/RSION                     */
             CALL X$WRITE( F_FDS,VECTOR(FMT9) );
             GOTO ALT_RETURN;
 
          CASE( %VIRCIR## );                  /* V/IRTUAL C/IRCUIT            */
             TYPE(NUM_TYPES)= %KLTY_VIRCIR#;
             NUM_TYPES= NUM_TYPES + 1;
             IF LONGEST_TYPE < LENGTHC('(VIRCIR)') THEN
                LONGEST_TYPE=  LENGTHC('(VIRCIR)');
 
          CASE( ELSE );
 
          END;
       END; /* DO I */
 
SET_DEFAULTS:
    IF NUM_TYPES = 0 THEN DO;                /* If they didn't specify a TYPE */
       TYPE(0)= %KLTY_TTY#;                  /* Default to TTY/ASYNC profiles */
       NUM_TYPES= 1;
       LONGEST_TYPE= LENGTHC('(ASYNC)');
       END;
 
    TARGET= M$SI$->F$DCB.NAME#;
    IF TARGET.LEN = 0 THEN DO;                /* Any pattern specified?       */
       TARGET.LEN=  LENGTHC('?');
       TARGET.NAME= '?';
       END;
    ELSE DO;
       CALL INDEX( X,'?',SUBSTR(TARGET.NAME,0,TARGET.LEN) );
       IF SUBSTR(FIRST_NAME.NAME,0,1) = %BINASC(0)  AND
          X > 0  THEN DO;
          FIRST_NAME.LEN=  X;
          FIRST_NAME.NAME= SUBSTR(TARGET.NAME,0,X);
          IF SUBSTR(LAST_NAME.NAME,0,1) = '~' THEN DO;
             LAST_NAME.LEN=  FIRST_NAME.LEN + LENGTHC('~');
             CALL CONCAT( LAST_NAME.NAME,SUBSTR(TARGET.NAME,0,X),'~' );
             END;
          END;
       END;
 
RE_TURN:
    RETURN;
 
PARSE_ERR: ;
    ERRCODE= PERRCODE;
    CALL XUR$ECHOIF(  DCBNUM(M$LO) );
    CALL XUR$ERRPTR( ,DCBNUM(M$LO) );
    CALL XUR$ERRMSG( ERRCODE );
ALT_RETURN:
    ALTRETURN;
 
END PARSE_OPTIONS;
%EJECT;
PUT_SUMMARY: PROC;
 
    TMP_BUF= ' ';
    TMP_INDX= 0;
    IF NUM_TYPES = 1 THEN DO;
       TMP_BUF= TYPE_NAME(TYPE(0));
       CALL INDEX( TMP_INDX,' ',TMP_BUF );
       END;
    ELSE
       IF NUM_TYPES ~= 11 THEN DO;
          DO I=0 TO NUM_TYPES-1;
             SUBSTR(TMP_BUF,TMP_INDX)= TYPE_NAME(TYPE(I));
             CALL INDEX( L,' ',TYPE_NAME(TYPE(I)) );
             TMP_INDX= TMP_INDX + L;
             IF I < NUM_TYPES-2 THEN DO;
                SUBSTR(TMP_BUF,TMP_INDX)= ', ';
                TMP_INDX= TMP_INDX + LENGTHC(', ');
                END;
             ELSE
                IF I = NUM_TYPES-2 THEN DO;
                   SUBSTR(TMP_BUF,TMP_INDX)= ' and/or ';
                   TMP_INDX= TMP_INDX + LENGTHC(' and/or ');
                   END;
             END;
          END;
 
 
    IF NUM_LISTED = 0 THEN                    /* Did we find any that matched?*/
       CALL X$WRITE( F_FDS,VECTOR(FMT6),VECTOR(TMP_BUF) ); /* Nope, tell them.*/
    ELSE
       IF NUM_TYPES = %KLTY_LINEDEV# + 1 THEN
          CALL X$WRITE( F_FDS,VECTOR(FMT7),VECTOR(NUM_LISTED) );
       ELSE
          CALL X$WRITE( F_FDS,VECTOR(FMT8),VECTOR(NUM_LISTED),VECTOR(TMP_BUF) );
 
RE_TURN:
    RETURN;
 
END PUT_SUMMARY;
 
END DIPRO;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
HANDLE_BREAK: PROC ASYNC;
 
%INCLUDE CP_6;
 
DCL BREAK_CNT                UBIN SYMREF;
 
    BREAK_CNT= BREAK_CNT + 1;
    RETURN;
 
END HANDLE_BREAK;
