

14:01 NOV 16 '97 xsl_netdb:h.:TCA2SI                                       1    
    1      /*M*    xsl_netdb:h     CP-6 version of the netdb.h header file         */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /*X* DDA */
    8      #ifndef __xsl_netdb
    9      #define __xsl_netdb
   10
   11      /*
   12       * Structures returned by network
   13       * data base library.  All addresses
   14       * are supplied in host order, and
   15       * returned in network order (suitable
   16       * for use in system calls).
   17       */
   18      /*F* NAME: hostent Structure
   19          The hostent structure is a template for the
   20          information returned by the Socket Library functions that deal
   21          with the etc:hosts.:SYS file.
   22          ..::IX "etc:hosts file, related structure"
   23      */
   24      struct hostent {
   25      /*K* h_name - (char *)
   26          .xeq XSL_SOCKET_M XSL$HOSTENT H_NAME$
   27      */
   28          char *h_name;       /* official name of host */
   29      /*K* h_aliases - (char **)
   30          .xeq XSL_SOCKET_M XSL$HOSTENT H_ALIASES$
   31      */
   32          char **h_aliases;   /* alias list */
   33      /*K* h_addrtype - (int)
   34          .xeq XSL_SOCKET_M XSL$HOSTENT H_ADDRTYPE
   35          It is always AF_INET.
   36      */
   37          int h_addrtype;     /* host address type */
14:01 NOV 16 '97 xsl_netdb:h.:TCA2SI                                       2    
   38      /*K* h_length - (int)
   39          .xeq XSL_SOCKET_M XSL$HOSTENT H_LENGTH
   40      */
   41          int h_length;       /* length of address */
   42      /*K* h_addr_list - (char **)
   43          .xeq XSL_SOCKET_M XSL$HOSTENT H_ADDR_LIST$
   44      */
   45          char **h_addr_list;       /* Internet addresses */
   46      #define h_addr h_addr_list[0]  /* single address, for compatability */
   47          };
   48      /*F* NAME: D_hostent
   49          .* Put structure DRAW into manual
   50          .IBL D:hostent
   51      */
   52
   53      /*
   54       * Assumption here is that a network number
   55       * fits in a single word -- probably a poor one.
   56       */
   57      /*F* NAME: netent Structure
   58          The netent structures is a template for the
   59          information returned by the Socket Library functions that deal
   60          with the etc:networks.:SYS file.
   61          ..::IX "etc:networks file, related structure"
   62      */
   63      struct netent {
   64      /*K* n_name - (char *)
   65          .xeq XSL_SOCKET_M XSL$NETENT N_NAME$
   66      */
   67          char *n_name;       /* official name of net */
   68      /*K* n_aliases - (char **)
   69          .xeq XSL_SOCKET_M XSL$NETENT N_ALIASES$
   70      */
   71          char **n_aliases;   /* alias list */
   72      /*K* n_addrtype - (int)
   73          .xeq XSL_SOCKET_M XSL$NETENT N_ADDRTYPE
   74          It is always AF_INET.
14:01 NOV 16 '97 xsl_netdb:h.:TCA2SI                                       3    
   75      */
   76          int n_addrtype;     /* net address type */
   77      /*K* n_net - (unsigned long)
   78          .xeq XSL_SOCKET_M XSL$NETENT N_NET
   79      */
   80          unsigned long n_net;/* network # */
   81          };
   82      /*F* NAME: D_netent
   83          .* Put structure DRAW into manual
   84          .IBL D:netent
   85      */
   86
   87      /*F* NAME: servent Structure
   88          The servent structure is a template for the
   89          information returned by the Socket Library functions that deal
   90          with the etc:services.:SYS file.
   91          ..::IX "etc:services file, related structure"
   92      */
   93      struct servent {
   94      /*K* s_name - (char *)
   95          .xeq XSL_SOCKET_M XSL$SERVENT S_NAME$
   96      */
   97          char *s_name;       /* official service name */
   98      /*K* s_aliases - (char **)
   99          .xeq XSL_SOCKET_M XSL$SERVENT S_ALIASES$
  100      */
  101          char **s_aliases;   /* alias list */
  102      /*K* s_port - (int)
  103          .xeq XSL_SOCKET_M XSL$SERVENT S_PORT
  104      */
  105          int s_port;         /* port # */
  106      /*K* s_proto - (char *)
  107          .xeq XSL_SOCKET_M XSL$SERVENT S_PROTO$
  108      */
  109          char *s_proto;      /* protocol to use */
  110          };
  111      /*F* NAME: D_servent
14:01 NOV 16 '97 xsl_netdb:h.:TCA2SI                                       4    
  112          .* Put structure DRAW into manual
  113          .IBL D:servent
  114      */
  115
  116      /*F* NAME: protoent Structure
  117          The protoent structure is a template for the
  118          information returned by the Socket Library functions that deal
  119          with the etc:protocols.:SYS file.
  120          ..::IX "etc:protocols file, related structure"
  121      */
  122      struct protoent {
  123      /*K* p_name - (char *)
  124          .xeq XSL_SOCKET_M XSL$PROTOENT P_NAME$
  125      */
  126          char *p_name;       /* official protocol name */
  127      /*K* p_aliases - (char **)
  128          .xeq XSL_SOCKET_M XSL$PROTOENT P_ALIASES$
  129      */
  130          char **p_aliases;   /* alias list */
  131      /*K* p_proto - (int)
  132          .xeq XSL_SOCKET_M XSL$PROTOENT P_PROTO
  133      */
  134          int p_proto;        /* protocol # */
  135          };
  136      /*F* NAME: D_protoent
  137          .* Put structure DRAW into manual
  138          .IBL D:protoent
  139      */
  140
  141      extern struct hostent *gethostbyaddr( char *cp, int len, int type);
  142      extern struct hostent *gethostbyname( char *name);
  143      extern struct hostent *gethostent( void);
  144      extern void *sethostent( int stayopen);
  145      extern void *endhostent( void);
  146      extern struct netent *getnetbyaddr( int net, int type);
  147      extern struct netent *getnetbyname( char *name);
  148      extern struct netent *getnetent( void);
14:01 NOV 16 '97 xsl_netdb:h.:TCA2SI                                       5    
  149      extern void *setnetent( int stayopen);
  150      extern void *endnetent( void);
  151      extern struct protoent *getprotobyname( char *name);
  152      extern struct protoent *getprotobynumber( int proto);
  153      extern struct protoent *getprotoent( void);
  154      extern void *setprotoent( int stayopen);
  155      extern void *endprotoent( void);
  156      extern struct servent *getservbyname( char *name, char *proto);
  157      extern struct servent *getservbyport( int port, char *proto);
  158      extern struct servent *getservent( void);
  159      extern void *setservent( int stayopen);
  160      extern void *endservent( void);
  161
  162      /*
  163       * Error return codes from gethostbyname() and gethostbyaddr()
  164       * (left in extern int h_errno).
  165       */
  166      #define HOST_NOT_FOUND 1        /* Authoritative Answer Host not found */
  167      #define TRY_AGAIN 2     /* Non-Authoritive Host not found, or SERVERFAIL */
  168      #define NO_RECOVERY 3   /* Non recoverable errors, FORMERR, REFUSED, NOTIMP */
  169      #define NO_DATA 4       /* Valid name, no data record of requested type */
  170      #define NO_ADDRESS NO_DATA      /* no address, look for MX record */
  171
  172      #endif

