

14:00 NOV 16 '97 XSL_SOCKET_M.:TCA2SI/XSL_SOCKET_M.:TCA2TUI                1    
    1      /*M*    XSL_SOCKET_M            Common macros for socket library        */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /*X* DDA */
    8
    9      /*F* NAME: Structures
   10
   11          The structures provided for use with the host Socket Library
   12          are described in this subsection, with one exception.  XSL_CHAM
   13          is described with its routine XSL$CHAM.  The structures are:
   14
   15          .bbk
   16          .fif
   17          C Structures                  PL-6 Structures
   18          ------------                  ---------------
   19          hostent                       XSL$HOSTENT
   20          iovec                         XSL$IOVEC
   21          msghdr                        XSL$MSGHDR
   22          netent                        XSL$NETENT
   23          protoent                      XSL$PROTOENT
   24          servent                       XSL$SERVENT
   25          sockaddr                      XSL$SOCKADDR
   26          sockaddr_in                   XSL$SOCKADDR_IN
   27          .inl +30
   28          XSL_CHAM
   29          .inl -30
   30          xsl_sockinit                  XSL_SOCKINIT
   31          .fin
   32          .bek
   33      */
   34      /*F* NAME: XSL$SOCKADDR Structure
   35          The XSL$SOCKADDR structure is a generic address
   36          template for Socket Library applications.  The two parts of
   37          the generic address are the family and data.  The specific
14:00 NOV 16 '97 XSL_SOCKET_M.:TCA2SI/XSL_SOCKET_M.:TCA2TUI                2    
   38          value in the family part determines how to interpret the
   39          data part.  One family in particular (AF_INET) is used so
   40          widely that a separate structure is defined for
   41          it:  XSL$SOCKADDR_IN.
   42      */
   43      %MACRO XSL$SOCKADDR( FPTN=XSL$SOCKADDR, LVL=1, STCLASS=BASED, LAST=";");
   44      %LSET LISTDIR = '0'B;
   45      %LSET LISTEXP = '1'B;
   46      %LSET LISTCOM = '0'B;
   47      %LSET LISTSUB = '1'B;
   48      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
   49      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
   50          %LSET INIT = CHARTEXT( ' INIT');
   51          %LSET ENIT = CHARTEXT( '');
   52      %ELSE;
   53          %LSET INIT = CHARTEXT( '/*');
   54          %LSET ENIT = CHARTEXT( '*/');
   55      %ENDIF;
   56      %IF LENGTHC( 'FPTN') = 0;
   57          %LSET LVL = LVL - 1;
   58      %ELSE;
   59          %IF LVL = 1;
   60              DCL 1 FPTN STCLASS ALIGNED,
   61          %ELSE;
   62              %LVL FPTN ALIGNED,
   63          %ENDIF;
   64      %ENDIF;
   65      %LSET LVL1 = LVL + 1;
   66
   67      /*K* SA_FAMILY - INTEGER
   68          .SPF
   69          Specifies the address family that this address belongs to.  The
   70          value determines how the 'data' item is to be interpreted.
   71          .xeq
   72          Equates for the possible values can be found in XSL_SOCKET_E
   73      for the PL6 source and <xsl_socket.h> for the C source.
   74      */
14:00 NOV 16 '97 XSL_SOCKET_M.:TCA2SI/XSL_SOCKET_M.:TCA2TUI                3    
   75          %LVL1 SA_FAMILY UBIN %INIT( 0)%ENIT,
   76      /*K* SA_DATA - BYTE ARRAY
   77          .SPF
   78          Specifies the individual bytes of an address.
   79          The meaning of the bytes is determined by the 'family' item of
   80          the structure.  Up to 16 bytes can be specified.
   81      */
   82          %LVL1 SA_DATA(0:15) UBIN BYTE %INIT( 0*0)%ENIT CALIGNED LAST
   83      %MEND;
   84      /*F* NAME: D_XSL$SOCKADDR
   85      .* Put structure DRAW into manual
   86      .IBL D:XSL$SOCKADDR
   87      */
   88
   89      /*F* NAME: XSL$INSOCKADDR Structure
   90
   91          The XSL$SOCKADDR_IN structure is an instance of
   92          the XSL$SOCKADDR structure useful for addresses in
   93          the AF_INET (Internet) family.  This family of addresses is
   94          used so frequently that it deserves its own address structure.
   95      */
   96      %MACRO XSL$SOCKADDR_IN( FPTN=XSL$SOCKADDR_IN, LVL=1, STCLASS=BASED, LAST=";");
   97      %LSET LISTDIR = '0'B;
   98      %LSET LISTEXP = '1'B;
   99      %LSET LISTCOM = '0'B;
  100      %LSET LISTSUB = '1'B;
  101      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
  102      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
  103          %LSET INIT = CHARTEXT( ' INIT');
  104          %LSET ENIT = CHARTEXT( '');
  105      %ELSE;
  106          %LSET INIT = CHARTEXT( '/*');
  107          %LSET ENIT = CHARTEXT( '*/');
  108      %ENDIF;
  109      %IF LENGTHC( 'FPTN') = 0;
  110          %LSET LVL = LVL - 1;
  111      %ELSE;
14:00 NOV 16 '97 XSL_SOCKET_M.:TCA2SI/XSL_SOCKET_M.:TCA2TUI                4    
  112          %IF LVL = 1;
  113              DCL 1 FPTN STCLASS ALIGNED,
  114          %ELSE;
  115              %LVL FPTN ALIGNED,
  116          %ENDIF;
  117      %ENDIF;
  118      %LSET LVL1 = LVL + 1;
  119
  120      /*K* SA_FAMILY - INTEGER
  121          .SPF
  122          Specifies the address family that this address belongs to.
  123          Addresses in the Internet family specify the value
  124          AF_INET or %XSL_AF_INET in C or PL6 source, respectively.
  125          .xeq
  126          Equates for the possible values can be found in XSL_SOCKET_E.
  127          <xsl_socket.h> or XSL_SOCKET_E for C or PL6 source respectively.
  128      */
  129          %LVL1 SA_FAMILY UBIN %INIT( 0)%ENIT,
  130      /*K* S_PORT - INTEGER
  131          .SPF
  132          Specifies the port within a specific host through
  133          which some application can be accessed.  Equates for the so-called
  134          'well-known' ports can be found in etc:services.:SYS.  User
  135          applications can make use of any non-conflicting port number;
  136          port numbers below 1024 are reserved for system applications.
  137      */
  138          %LVL1 S_PORT UBIN %INIT( 0)%ENIT,
  139      /*K* S_ADDR - INTEGER
  140          .SPF
  141          Specifies the Internet address.  It is a 32-bit integer unpacked
  142          into the lower eight bits of four successive bytes.  For
  143          more information about Internet addresses, please refer to
  144          ..::HL "the heading Internet Address Representation at the end of this"
  145          ..::HL "section."
  146          ..::HL "\the topic INTERNET_ADDRESS."
  147    *
  148    *     .CBA
14:00 NOV 16 '97 XSL_SOCKET_M.:TCA2SI/XSL_SOCKET_M.:TCA2TUI                5    
  149    *     The in_addr structure is used to store the IP address in
  150    *     network byte order.
  151    *     .FIF
  152    *
  153    *          struct in_addr {
  154    *          unsigned long s_addr;
  155    *          };
  156    *     .FIN
  157    *
  158    *     .CBF
  159    *     ..::IX "in_addr"
  160      */
  161          %LVL1 S_ADDR UBIN %INIT( 0)%ENIT,
  162          %LVL1 *(0:5) UBIN BYTE %INIT( 0*0)%ENIT CALIGNED LAST
  163      %MEND;
  164      /*F* NAME: D_XSL$SOCKADDR_IN
  165      .* Put structure DRAW into manual
  166      .IBL D:XSL$SOCKADDR_IN
  167      */
  168
  169      /*F* NAME: XSL$HOSTENT Structure
  170
  171          The XSL$HOSTENT structure is a template for the
  172          information returned by the Socket Library functions that deal
  173          with the etc:hosts.:SYS file.
  174      */
  175      %MACRO XSL$HOSTENT( FPTN=XSL$HOSTENT, LVL=1, STCLASS=BASED, LAST=";");
  176      %LSET LISTDIR = '0'B;
  177      %LSET LISTEXP = '1'B;
  178      %LSET LISTCOM = '0'B;
  179      %LSET LISTSUB = '1'B;
  180      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
  181      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
  182          %LSET INIT = CHARTEXT( ' INIT');
  183          %LSET ENIT = CHARTEXT( '');
  184      %ELSE;
  185          %LSET INIT = CHARTEXT( '/*');
14:00 NOV 16 '97 XSL_SOCKET_M.:TCA2SI/XSL_SOCKET_M.:TCA2TUI                6    
  186          %LSET ENIT = CHARTEXT( '*/');
  187      %ENDIF;
  188      %IF LENGTHC( 'FPTN') = 0;
  189          %LSET LVL = LVL - 1;
  190      %ELSE;
  191          %IF LVL = 1;
  192              DCL 1 FPTN STCLASS ALIGNED,
  193          %ELSE;
  194              %LVL FPTN ALIGNED,
  195          %ENDIF;
  196      %ENDIF;
  197      %LSET LVL1 = LVL + 1;
  198
  199      /*K* H_NAME$ - PTR
  200          .SPF
  201          Points at a character string containing the
  202          host name.  The string is terminated by a NUL byte.
  203      */
  204          %LVL1 H_NAME$ PTR %INIT( ADDR( NIL))%ENIT,
  205      /*K* H_ALIASES$ - PTR
  206          .SPF
  207          Points at an array of pointers to character
  208          strings.  Each character string contains an alias of the host
  209          name, and is terminated by a NUL byte.  The array of pointers
  210          is terminated by a NULL pointer.
  211      */
  212          %LVL1 H_ALIASES$ PTR %INIT( ADDR( NIL))%ENIT,
  213      /*K* H_ADDRTYPE - INTEGER
  214          .SPF
  215          Specifies the address family of the address
  216          pointed at by the address pointer.
  217          .xeq
  218          It is always %XSL_AF_INET.
  219      */
  220          %LVL1 H_ADDRTYPE SBIN %INIT( 0)%ENIT,
  221      /*K* H_LENGTH - INTEGER
  222          .SPF
14:00 NOV 16 '97 XSL_SOCKET_M.:TCA2SI/XSL_SOCKET_M.:TCA2TUI                7    
  223          Specifies the length of the address pointed
  224          at by the address pointer.  It is always 4.
  225      */
  226          %LVL1 H_LENGTH SBIN %INIT( 0)%ENIT,
  227      /*K* H_ADDR_LIST$ - PTR
  228          .SPF
  229          Points at a buffer within the Socket Library
  230          containing the Internet address(es) of the host.  Each address
  231          is a 32-bit integer unpacked into the lower eight bits of four
  232          successive bytes.  The buffer is terminated by a NULL pointer.
  233      */
  234          %LVL1 H_ADDR_LIST$ PTR %INIT( ADDR( NIL))%ENIT LAST
  235      %MEND;
  236      /*F* NAME: D_XSL$HOSTENT
  237      .* Put structure DRAW into manual
  238      .IBL D:XSL$HOSTENT
  239      */
  240
  241      /*F* NAME: XSL$NETENT Structure
  242
  243          The XSL$NETENT structures is a template for the
  244          information returned by the Socket Library functions that deal
  245          with the etc:networks.:SYS file.
  246      */
  247      %MACRO XSL$NETENT( FPTN=XSL$NETENT, LVL=1, STCLASS=BASED, LAST=";");
  248      %LSET LISTDIR = '0'B;
  249      %LSET LISTEXP = '1'B;
  250      %LSET LISTCOM = '0'B;
  251      %LSET LISTSUB = '1'B;
  252      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
  253      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
  254          %LSET INIT = CHARTEXT( ' INIT');
  255          %LSET ENIT = CHARTEXT( '');
  256      %ELSE;
  257          %LSET INIT = CHARTEXT( '/*');
  258          %LSET ENIT = CHARTEXT( '*/');
  259      %ENDIF;
14:00 NOV 16 '97 XSL_SOCKET_M.:TCA2SI/XSL_SOCKET_M.:TCA2TUI                8    
  260      %IF LENGTHC( 'FPTN') = 0;
  261          %LSET LVL = LVL - 1;
  262      %ELSE;
  263          %IF LVL = 1;
  264              DCL 1 FPTN STCLASS ALIGNED,
  265          %ELSE;
  266              %LVL FPTN ALIGNED,
  267          %ENDIF;
  268      %ENDIF;
  269      %LSET LVL1 = LVL + 1;
  270
  271      /*K* N_NAME$ - PTR
  272          .SPF
  273          Points at a character string containing the
  274          network name.  The string is terminated by a NUL byte.
  275      */
  276          %LVL1 N_NAME$ PTR %INIT( ADDR( NIL))%ENIT,
  277      /*K* N_ALIASES$ - PTR
  278          .SPF
  279          Points at an array of pointers to character
  280          strings.  Each character string contains an alias of the network
  281          name, and is terminated by a NUL byte.  The array of pointers
  282          is terminated by a NULL pointer.
  283      */
  284          %LVL1 N_ALIASES$ PTR %INIT( ADDR( NIL))%ENIT,
  285      /*K* N_ADDRTYPE - INTEGER
  286          .SPF
  287          Specifies the address family of the addresses
  288          used on this network.
  289          .xeq
  290          It is always %XSL_AF_INET.
  291      */
  292          %LVL1 N_ADDRTYPE SBIN %INIT( 0)%ENIT,
  293      /*K* N_NET - INTEGER
  294          .SPF
  295          Specifies the network number for this network.
  296      */
14:00 NOV 16 '97 XSL_SOCKET_M.:TCA2SI/XSL_SOCKET_M.:TCA2TUI                9    
  297          %LVL1 N_NET SBIN %INIT( 0)%ENIT LAST
  298      %MEND;
  299      /*F* NAME: D_XSL$NETENT
  300      .* Put structure DRAW into manual
  301      .IBL D:XSL$NETENT
  302      */
  303
  304      /*F* NAME: XSL$PROTOENT Structure
  305
  306          The XSL$PROTOENT structure is a template for the
  307          information returned by the Socket Library functions that deal
  308          with the etc:protocols.:SYS file.
  309      */
  310      %MACRO XSL$PROTOENT( FPTN=XSL$PROTOENT, LVL=1, STCLASS=BASED, LAST=";");
  311      %LSET LISTDIR = '0'B;
  312      %LSET LISTEXP = '1'B;
  313      %LSET LISTCOM = '0'B;
  314      %LSET LISTSUB = '1'B;
  315      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
  316      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
  317          %LSET INIT = CHARTEXT( ' INIT');
  318          %LSET ENIT = CHARTEXT( '');
  319      %ELSE;
  320          %LSET INIT = CHARTEXT( '/*');
  321          %LSET ENIT = CHARTEXT( '*/');
  322      %ENDIF;
  323      %IF LENGTHC( 'FPTN') = 0;
  324          %LSET LVL = LVL - 1;
  325      %ELSE;
  326          %IF LVL = 1;
  327              DCL 1 FPTN STCLASS ALIGNED,
  328          %ELSE;
  329              %LVL FPTN ALIGNED,
  330          %ENDIF;
  331      %ENDIF;
  332      %LSET LVL1 = LVL + 1;
  333
14:00 NOV 16 '97 XSL_SOCKET_M.:TCA2SI/XSL_SOCKET_M.:TCA2TUI                10   
  334      /*K* P_NAME$ - PTR
  335          .SPF
  336          Points at a character string containing the
  337          protocol name.  The string is terminated by a NUL byte.
  338      */
  339          %LVL1 P_NAME$ PTR %INIT( ADDR( NIL))%ENIT,
  340      /*K* P_ALIASES$ - PTR
  341          .SPF
  342          Points at an array of pointers to character
  343          strings.  Each character string contains an alias of the protocol
  344          name, and is terminated by a NUL byte.  The array of pointers
  345          is terminated by a NULL pointer.
  346      */
  347          %LVL1 P_ALIASES$ PTR %INIT( ADDR( NIL))%ENIT,
  348      /*K* P_PROTO - INTEGER
  349          .SPF
  350          Specifies the protocol number for this protocol.
  351      */
  352          %LVL1 P_PROTO SBIN %INIT( 0)%ENIT LAST
  353      %MEND;
  354      /*F* NAME: D_XSL$PROTOENT
  355      .* Put structure DRAW into manual
  356      .IBL D:XSL$PROTOENT
  357      */
  358
  359      /*F* NAME: XSL$SERVENT Structure
  360
  361          The XSL$SERVENT structure is a template for the
  362          information returned by the Socket Library functions that deal
  363          with the etc:services.:SYS file.
  364      */
  365      %MACRO XSL$SERVENT( FPTN=XSL$SERVENT, LVL=1, STCLASS=BASED, LAST=";");
  366      %LSET LISTDIR = '0'B;
  367      %LSET LISTEXP = '1'B;
  368      %LSET LISTCOM = '0'B;
  369      %LSET LISTSUB = '1'B;
  370      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
14:00 NOV 16 '97 XSL_SOCKET_M.:TCA2SI/XSL_SOCKET_M.:TCA2TUI                11   
  371      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
  372          %LSET INIT = CHARTEXT( ' INIT');
  373          %LSET ENIT = CHARTEXT( '');
  374      %ELSE;
  375          %LSET INIT = CHARTEXT( '/*');
  376          %LSET ENIT = CHARTEXT( '*/');
  377      %ENDIF;
  378      %IF LENGTHC( 'FPTN') = 0;
  379          %LSET LVL = LVL - 1;
  380      %ELSE;
  381          %IF LVL = 1;
  382              DCL 1 FPTN STCLASS ALIGNED,
  383          %ELSE;
  384              %LVL FPTN ALIGNED,
  385          %ENDIF;
  386      %ENDIF;
  387      %LSET LVL1 = LVL + 1;
  388
  389      /*K* S_NAME$ - PTR
  390          .SPF
  391          Points at a character string containing the
  392          service name.  The string is terminated by a NUL byte.
  393      */
  394          %LVL1 S_NAME$ PTR %INIT( ADDR( NIL))%ENIT,
  395      /*K* S_ALIASES$ - PTR
  396          .SPF
  397          Points at an array of pointers to character
  398          strings.  Each character string contains an alias of the service
  399          name, and is terminated by a NUL byte.  The array of pointers
  400          is terminated by a NULL pointer.
  401      */
  402          %LVL1 S_ALIASES$ PTR %INIT( ADDR( NIL))%ENIT,
  403      /*K* S_PORT - INTEGER
  404          .SPF
  405          Specifies the port at which this service
  406          is accessed.
  407      */
14:00 NOV 16 '97 XSL_SOCKET_M.:TCA2SI/XSL_SOCKET_M.:TCA2TUI                12   
  408          %LVL1 S_PORT SBIN %INIT( 0)%ENIT,
  409      /*K* S_PROTO$ - PTR
  410          .SPF
  411          Points at a character string containing the
  412          name of the protocol used to access this service.  The character
  413          string is terminated by a NUL byte.
  414      */
  415          %LVL1 S_PROTO$ PTR %INIT( ADDR( NIL))%ENIT LAST
  416      %MEND;
  417      /*F* NAME: D_XSL$SERVENT
  418      .* Put structure DRAW into manual
  419      .IBL D:XSL$SERVENT
  420      */
  421
  422      /*F* NAME: XSL$IOVEC Structure
  423          The XSL$IOVEC structure frames an area of memory to be used as an
  424          I/O buffer in the XSL$READV, XSL$WRITEV, XSL$RECVMSG, and
  425          XSL$SENDMSG procedures.
  426      */
  427      %MACRO XSL$IOVEC( FPTN=XSL$IOVEC, LVL=1, STCLASS=BASED, LAST=";");
  428      %LSET LISTDIR = '0'B;
  429      %LSET LISTEXP = '1'B;
  430      %LSET LISTCOM = '0'B;
  431      %LSET LISTSUB = '1'B;
  432      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
  433      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
  434          %LSET INIT = CHARTEXT( ' INIT');
  435          %LSET ENIT = CHARTEXT( '');
  436          %LSET DIMEN = CHARTEXT( '');
  437      %ELSE;
  438          %LSET INIT = CHARTEXT( '/*');
  439          %LSET ENIT = CHARTEXT( '*/');
  440          %LSET DIMEN = CHARTEXT( '(0:0)');
  441      %ENDIF;
  442      %IF LENGTHC( 'FPTN') = 0;
  443          %LSET LVL = LVL - 1;
  444      %ELSE;
14:00 NOV 16 '97 XSL_SOCKET_M.:TCA2SI/XSL_SOCKET_M.:TCA2TUI                13   
  445          %IF LVL = 1;
  446              DCL 1 FPTN%DIMEN STCLASS ALIGNED,
  447          %ELSE;
  448              %LVL FPTN%DIMEN ALIGNED,
  449          %ENDIF;
  450      %ENDIF;
  451      %LSET LVL1 = LVL + 1;
  452
  453      /*K* IOV_BASE$ - PTR
  454          .SPF
  455          Points at a buffer in application memory to be used for I/O.
  456      */
  457          %LVL1 IOV_BASE$ PTR %INIT( ADDR( NIL))%ENIT,
  458      /*K* IOV_LEN - SBIN
  459          .SPF
  460          Specifies how large the I/O buffer is, in bytes.
  461      */
  462          %LVL1 IOV_LEN SBIN %INIT( 0)%ENIT ALIGNED LAST
  463
  464      %MEND;
  465      /*F* NAME: D_XSL$IOVEC
  466      .* Put structure DRAW into manual
  467      .IBL D:XSL$IOVEC
  468      */
  469
  470      /*F* NAME: XSL$MSGHDR Structure
  471          The XSL$MSGHDR structure collects together various parameters
  472          needed by the XSL$SENDMSG and XSL$RECVMSG procedures.
  473      */
  474      %MACRO XSL$MSGHDR( FPTN=XSL$MSGHDR, LVL=1, STCLASS=BASED, LAST=";");
  475      %LSET LISTDIR = '0'B;
  476      %LSET LISTEXP = '1'B;
  477      %LSET LISTCOM = '0'B;
  478      %LSET LISTSUB = '1'B;
  479      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
  480      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
  481          %LSET INIT = CHARTEXT( ' INIT');
14:00 NOV 16 '97 XSL_SOCKET_M.:TCA2SI/XSL_SOCKET_M.:TCA2TUI                14   
  482          %LSET ENIT = CHARTEXT( '');
  483      %ELSE;
  484          %LSET INIT = CHARTEXT( '/*');
  485          %LSET ENIT = CHARTEXT( '*/');
  486      %ENDIF;
  487      %IF LENGTHC( 'FPTN') = 0;
  488          %LSET LVL = LVL - 1;
  489      %ELSE;
  490          %IF LVL = 1;
  491              DCL 1 FPTN STCLASS ALIGNED,
  492          %ELSE;
  493              %LVL FPTN ALIGNED,
  494          %ENDIF;
  495      %ENDIF;
  496      %LSET LVL1 = LVL + 1;
  497
  498      /*K* MSG_NAME$ - PTR
  499          .SPF
  500          Points at a buffer containing a network address.  For XSL$SENDMSG,
  501          the buffer contains the address of the host to which the message is to be
  502          sent.  For XSL$RECVMSG, the buffer contains the address of the host
  503          from which the message was received.
  504      */
  505          %LVL1 MSG_NAME$ PTR %INIT( ADDR( NIL))%ENIT,
  506      /*K* MSG_NAMELEN - SBIN
  507          .SPF
  508          Specifies how large the MSG_NAME$ buffer is, in bytes.  It must
  509          be specified for both XSL$SENDMSG and XSL$RECVMSG.  For the latter,
  510          it will be modified to contain the length of the address of the
  511          host from which the message was received.
  512      */
  513          %LVL1 MSG_NAMELEN SBIN %INIT( 0)%ENIT ALIGNED,
  514      /*K* MSG_IOV$ - PTR
  515          .SPF
  516          Points at an array of XSL$IOVEC structures framing one or more areas
  517          of application memory to use for I/O buffers.
  518      */
14:00 NOV 16 '97 XSL_SOCKET_M.:TCA2SI/XSL_SOCKET_M.:TCA2TUI                15   
  519          %LVL1 MSG_IOV$ PTR %INIT( ADDR( NIL))%ENIT,
  520      /*K* MSG_IOVLEN - SBIN
  521          .SPF
  522          Specifies how many XSL$IOVEC structures are valid at the memory
  523          address specified by MSG_IOV$.
  524      */
  525          %LVL1 MSG_IOVLEN SBIN %INIT( 0)%ENIT ALIGNED,
  526      /*K* MSG_ACCRIGHTS$ - PTR
  527          .SPF
  528          This item is not currently supported and must be coded as ADDR( NIL).
  529      */
  530          %LVL1 MSG_ACCRIGHTS$ PTR %INIT( ADDR( NIL))%ENIT,
  531      /*K* MSG_ACCRIGHTSLEN - SBIN
  532          .SPF
  533          This item is not currently supported and must be coded as 0.
  534      */
  535          %LVL1 MSG_ACCRIGHTSLEN SBIN %INIT( 0)%ENIT ALIGNED LAST
  536
  537      %MEND;
  538      /*F* NAME: D_XSL$MSGHDR
  539      .* Put structure DRAW into manual
  540      .IBL D:XSL$MSGHDR
  541      */
  542
  543      /*F* NAME: XSL_SOCKINIT Structure
  544
  545          The XSL_SOCKINIT structure collects together various parameters
  546          that are used to initialize the Socket Library.  If no special
  547          action is taken by the application, defaults are used
  548          for initialization at the first use of socket() or XSL$SOCKET.
  549          To override the defaults, the application calls XSL$SOCKINIT,
  550          passing an XSL_SOCKINIT structure with new parameters.  To have
  551          any effect, the call to XSL$SOCKINIT must precede any call to
  552          socket() or XSL$SOCKET.
  553      */
  554      %MACRO XSL_SOCKINIT( FPTN=XSL_SOCKINIT, LVL=1, STCLASS=STATIC, LAST=";",
  555                           MAXSOCK=2, BUFSIZE=512, NWSOCKS=-1, MEM=NIL,
14:00 NOV 16 '97 XSL_SOCKET_M.:TCA2SI/XSL_SOCKET_M.:TCA2TUI                16   
  556                           MAXRDS=2, MAXBUF=0, EVNT=NIL);
  557      %LSET LISTDIR = '0'B;
  558      %LSET LISTEXP = '1'B;
  559      %LSET LISTCOM = '0'B;
  560      %LSET LISTSUB = '1'B;
  561      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
  562      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
  563          %LSET INIT = CHARTEXT( ' INIT');
  564          %LSET ENIT = CHARTEXT( '');
  565      %ELSE;
  566          %LSET INIT = CHARTEXT( '/*');
  567          %LSET ENIT = CHARTEXT( '*/');
  568      %ENDIF;
  569      %IF LENGTHC( 'FPTN') = 0;
  570          %LSET LVL = LVL - 1;
  571      %ELSE;
  572          %IF LVL = 1;
  573              DCL 1 FPTN STCLASS ALIGNED,
  574          %ELSE;
  575              %LVL FPTN ALIGNED,
  576          %ENDIF;
  577      %ENDIF;
  578      %LSET LVL1 = LVL + 1;
  579
  580      /*K* MAXSOCK - UBIN
  581          .SPF
  582          Specifies the maximum number of sockets that will be in use at any
  583          one time.  Valid values are 1 to 36.  The CP-6 LINK option DCBSLOTS
  584          may need to be used to reserve space for DCBs associated with
  585          the sockets.  One DCB is required for each socket in use.
  586      */
  587          %LVL1 %CHARTEXT( 'MAXSOCK') UBIN ALIGNED %INIT( MAXSOCK)%ENIT,
  588      /*K* NWSOCKS - SBIN
  589          .SPF
  590          Specifies the maximum number of sockets capable of NoWait I/O.
  591          Valid values are -1 to MAXSOCK.  -1 specifies that all sockets
  592          are capable of NoWait I/O.  0 specifies that none are capable.
14:00 NOV 16 '97 XSL_SOCKET_M.:TCA2SI/XSL_SOCKET_M.:TCA2TUI                17   
  593          The CP-6 LINK option TCB may need to be used to reserve space for
  594          events arriving as the result of NoWait I/O.  One TCB frame is
  595          required for each NoWait event on arrival, so the worst case
  596          requirement is NWSOCKS*MAXRDS.
  597      */
  598          %LVL1 %CHARTEXT( 'NWSOCKS') SBIN ALIGNED %INIT( NWSOCKS)%ENIT,
  599      /*K* BUFSIZE - UBIN
  600          .SPF
  601          Specifies the number of bytes of memory to reserve for each NoWait
  602          I/O buffer.  Valid values are 1 to 4096.  The larger the buffer
  603          size, the better.  Larger than 4096 is pointless because that is
  604          the limiting size for data transfers between FEP and host.  I/O
  605          buffers are allocated at Socket Library initialization and are
  606          shared among all NoWait sockets, subject to each socket's current
  607          MAXRDS and MAXBUF values.
  608      */
  609          %LVL1 %CHARTEXT( 'BUFSIZE') UBIN %INIT( BUFSIZE)%ENIT,
  610      /*K* MEM$ - PTR
  611          .SPF
  612          Points at an area of application-managed memory that the Socket
  613          Library will use for its socket context.  If not specified, the
  614          library will allocate space out of the next available data segment.
  615          The number of words of memory space required can be computed as shown
  616          below in pseudo-code.
  617          .FIF
  618      .SPB
  619          TOTAL = 68;  // for segment head and event log
  620          TOTAL = TOTAL + 21*MAXSOCK;  // add pointer array and sockets
  621          TOTAL = TOTAL + 1+B$ROSEG.NUMDCBS;  // add DCBNUM-to-socket map
  622          IF NWSOCKS ~= 0 THEN DO;
  623              // add NoWait I/O buffers as requested
  624              IF NWSOCKS = -1 THEN
  625                  TMP = MAXSOCK;
  626              ELSE
  627                  TMP = NWSOCKS;
  628              TOTAL = TOTAL + (10+(BUFSIZE+3)/4) * (1+TMP*(MAXRDS+MAXBUF));
  629              END;
14:00 NOV 16 '97 XSL_SOCKET_M.:TCA2SI/XSL_SOCKET_M.:TCA2TUI                18   
  630          .FIN
  631      */
  632          %LVL1 MEM$ PTR ALIGNED %INIT( ADDR( MEM))%ENIT,
  633      /*K* EVNT$ - EPTR
  634          .SPF
  635          Specifies the address of a PL6 PROC to handle non-Socket Library
  636          events received by the Socket Library.  The named procedure should
  637          be coded as a normal PROC (not PROC ASYNC) that receives one
  638          parameter, a B$EXCFR structure.
  639      */
  640          %LVL1 EVNT$ EPTR %INIT( ENTADDR( EVNT))%ENIT,
  641      /*K* MAXRDS - UBIN HALF
  642          .SPF
  643          Specifies the maximum number of NoWait reads allowed on each socket.
  644          Valid values are 0 to 3.  0 specifies that NoWait I/O is not to be
  645          used.  If nonzero, the value specifies how many I/O buffers to
  646          reserve for pending NoWait reads, as well as how many simultaneous
  647          NoWait reads to issue when the application requests data from the
  648          network.  This parameter is inherited by each socket on creation.
  649          A socket's copy of MAXRDS can be modified by using XSL$SETSOCKOPT
  650          specifying option XSL_SO_NWREADS.  (C programmers can use
  651          setsockopt() with option SO_NWREADS.)
  652          .SPF
  653          Converting a socket from NoWait-capable to non-NoWait-capable is
  654          possible by setting the socket's MAXRDS value to zero.  The inverse
  655          operation is not possible because the value of MAXRDS is used when
  656          the socket DCB is opened to determine whether B$COMIO events should
  657          be delivered to the library for that socket.  However, it is always
  658          possible to adjust a socket's MAXRDS value from one nonzero value
  659          to another nonzero value.
  660      */
  661          %LVL1 %CHARTEXT( 'MAXRDS') UBIN HALF %INIT( MAXRDS)%ENIT HALIGNED,
  662      /*K* MAXBUF - UBIN HALF
  663          .SPF
  664          Specifies the number of additional buffers to allocate to each
  665          NoWait socket.  Valid values are 0 to 262143.  If nonzero, the
  666          value specifies how many I/O buffers, above those in use by
14:00 NOV 16 '97 XSL_SOCKET_M.:TCA2SI/XSL_SOCKET_M.:TCA2TUI                19   
  667          pending NoWait reads, should be reserved for each socket.  This
  668          parameter is inherited by each socket on creation.  A socket's
  669          copy of MAXBUF can be modified by using XSL$SETSOCKOPT, specifying
  670          option XSL_SO_NWBUFFS.  (C programmers can use setsockopt() with
  671          option SO_NWBUFFS.)
  672          .SPF
  673          MAXBUF buffers may be useful in situations where the application
  674          needs to be responsive to the network but cannot process incoming
  675          data as it arrives.  It provides more buffering than possible with
  676          MAXRDS alone.
  677      */
  678          %LVL1 %CHARTEXT( 'MAXBUF') UBIN HALF %INIT( MAXBUF)%ENIT HALIGNED LAST
  679      %MEND;
  680      /*F* NAME: D_XSL_SOCKINIT
  681      .* Put structure DRAW into manual
  682      .IBL D:XSL_SOCKINIT
  683      */
  684
  685      /*F* NAME: IOCTL_E
  686      */
  687      /*K* XSL_FIOCLEX
  688      FIOCLEX          XSL_FIOCLEX            Set exclusive fd use. */
  689      /*K* XSL_FIONCLEX
  690      FIONCLEX         XSL_FIONCLEX           Remove exclusive fd use. */
  691      /*K* XSL_FIONREAD
  692      FIONREAD         XSL_FIONREAD           Number of bytes available. */
  693      /*K* XSL_FIONBIO
  694      FIONBIO          XSL_FIONBIO            Set/Clear nonblocking I/O. */
  695      /*K* XSL_FIOASYNC
  696      FIOASYNC         XSL_FIOASYNC           Set/Clear async I/O. */
  697      /*K* XSL_FIOSETOWN
  698      FIOSETOWN        XSL_FIOSETOWN          Set owner. */
  699      /*K* XSL_FIOGETOWN
  700      FIOGETOWN        XSL_FIOGETOWN          Get owner. */
  701      /*K* XSL_SIOCSHIWAT
  702      SIOCSHIWAT       XSL_SIOCSHIWAT         Set high water mark. */
  703      /*K* XSL_SIOCGHIWAT
14:00 NOV 16 '97 XSL_SOCKET_M.:TCA2SI/XSL_SOCKET_M.:TCA2TUI                20   
  704      SIOCGHIWAT       XSL_SIOCGHIWAT         Get high water mark. */
  705      /*K* XSL_SIOCSLOWAT
  706      SIOCSLOWAT       XSL_SIOCSLOWAT         Set low water mark. */
  707      /*K* XSL_SIOCGLOWAT
  708      SIOCGLOWAT       XSL_SIOCGLOWAT         Get low water mark. */
  709      /*K* XSL_SIOCATMARK
  710      SIOCATMARK       XSL_SIOCATMARK         At out-of-band mark? */
  711      /*K* XSL_SIOCSPGRP
  712      SIOCSPGRP        XSL_SIOCSPGRP          Set process group. */
  713      /*K* XSL_SIOCGPGRP
  714      SIOCGPGRP        XSL_SIOCGPGRP          Get process group. */
  715      %MACRO XSL_IOCTLS;
  716      %LSET IO    = BITBIN( '040000000000'O);
  717      %LSET IOR   = BITBIN( '100000000000'O);
  718      %LSET IOW   = BITBIN( '200000000000'O);
  719      %LSET IOWR  = IOW + IOR;
  720
  721      %LSET FILECLASS = 512*ASCBIN('f');
  722      %LSET SOCKCLASS = 512*ASCBIN('s');
  723      %LSET ROUTECLASS = 512*ASCBIN('R');
  724      %LSET IFCLASS = 512*ASCBIN('i');
  725
  726      %LSET RTENTRYSIZE = 0;      /*N* should be sizeof( struct rtentry) */
  727      %LSET IFREQSIZE = 0;        /*N* should be sizeof( struct ifreq) */
  728      %LSET IFCONFSIZE = 0;       /*N* should be sizeof( struct ifconf) */
  729      %LSET ARPREQSIZE = 0;       /*N* should be sizeof( struct arpreq) */
  730      %LSET INTTYPE = 262144*4;   /*N* should be sizeof( int) */
  731      %LSET RTENTRYTYPE = 262144*RTENTRYSIZE;
  732      %LSET IFREQTYPE = 262144*IFREQSIZE;
  733      %LSET IFCONFTYPE = 262144*IFCONFSIZE;
  734      %LSET ARPREQTYPE = 262144*ARPREQSIZE;
  735
  736      /* TTY ioctls not implemented */
  737
  738      /* File ioctls */
  739      %EQU XSL_FIOCLEX    = IO + FILECLASS + 1;
  740      %EQU XSL_FIONCLEX   = IO + FILECLASS + 2;
14:00 NOV 16 '97 XSL_SOCKET_M.:TCA2SI/XSL_SOCKET_M.:TCA2TUI                21   
  741      %EQU XSL_FIONREAD   = IOR + FILECLASS + 127 + INTTYPE;
  742      %EQU XSL_FIONBIO    = IOW + FILECLASS + 126 + INTTYPE;
  743      %EQU XSL_FIOASYNC   = IOW + FILECLASS + 125 + INTTYPE;
  744      %EQU XSL_FIOSETOWN  = IOW + FILECLASS + 124 + INTTYPE;
  745      %EQU XSL_FIOGETOWN  = IOR + FILECLASS + 123 + INTTYPE;
  746
  747      /* Socket ioctls */
  748      %EQU XSL_SIOCSHIWAT = IOW + SOCKCLASS + 0 + INTTYPE;
  749      %EQU XSL_SIOCGHIWAT = IOR + SOCKCLASS + 1 + INTTYPE;
  750      %EQU XSL_SIOCSLOWAT = IOW + SOCKCLASS + 2 + INTTYPE;
  751      %EQU XSL_SIOCGLOWAT = IOR + SOCKCLASS + 3 + INTTYPE;
  752      %EQU XSL_SIOCATMARK = IOR + SOCKCLASS + 7 + INTTYPE;
  753      %EQU XSL_SIOCSPGRP  = IOW + SOCKCLASS + 8 + INTTYPE;
  754      %EQU XSL_SIOCGPGRP  = IOR + SOCKCLASS + 9 + INTTYPE;
  755
  756      /* Routing ioctls not implemented */
  757
  758      /* Interface ioctls not implemented */
  759
  760      %MEND;

