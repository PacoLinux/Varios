

CC.C03    File=zbm$break$break:c.:ZBC3TSI                                           Fri Aug 22 1997  Page=1  
        1         1             #include    <stdio:h>
        2         2             #include    <signal:h>
        3         3             #include    <string:h>
        4         4             #include    "break$break:h"
        5         5
        6         6             /*T*/
        7         7             /*F*     NAME:       set_break_vars
        8         8                      PURPOSE:    Set-up the variables needed for the break handler
        9         9                      DESCRIPTION:This routine sets up the input variables needed
       10        10                                  for the break handling of the C compiler.
       11        11             */
       12        12             /*D*     NAME:       set_break_vars
       13        13                      CALL:       set_break_vars (fmt_str, cur_phase, cur_file,
       14        14                                  source_key, debug_num, cur_func, num_diag,
       15        15                                  max_sev)
       16        16                      INPUT:
       17        17
       18        18                                  char  *fmt_str    - Format for output
       19        19                                  char  **cur_phase - Current compiler phase
       20        20                                  char  **cur_file  - Current file being compiled
       21        21                                  char  **source_key- Current source key of file
       22        22                                  int   *debug_num  - Pointer to debug line number
       23        23                                  char  **cur_func  - Pointer to current function
       24        24                                  int   *num_diag   - Total number of errors
       25        25                                  int   *max_sev    - Max severity of errors
       26        26                      OUTPUT:     NONE
       27        27                      DESCRIPTION:This function is called whenever a variable
       28        28                                  needs to be set for the break handler routine.
       29        29                                  All variables can be NULL pointers except for
       30        30                                  cur_phase.  If no format string is specified then
       31        31                                  it is created in a default manner.
       32        32             */
       33        33
       34        34             void set_break_vars (fmt_str, cur_phase, cur_file, source_key,
       35        35                                  debug_num, cur_func, num_diag, max_sev)
       36        36
       37        37                char  *fmt_str;
CC.C03    File=zbm$break$break:c.:ZBC3TSI                                           Fri Aug 22 1997  Page=2  
       38        38                char  **cur_phase;
       39        39                char  **cur_file;
       40        40                char  **source_key;
       41        41                int   *debug_num;
       42        42                char  **cur_func;
       43        43                int   *num_diag;
       44        44                int   *max_sev;
       45        45             {
       46        46    1           int   pos = 0;
       47        47    1
       48        48    1           if (fmt_str) {
       49        49    2              break_fmt_str = fmt_str;
       50        50    2           }
       51        51    1           else {
       52        52    2              strcpy (break_def_fmt,"%s");
       53        53    2              if (cur_file)
       54        54    2                 strcat (break_def_fmt,"  File=%s");
       55        55    2              if (source_key)
       56        56    2                 strcat (break_def_fmt,"  Key=%s");
       57        57    2              if (debug_num)
       58        58    2                 strcat (break_def_fmt,"  Line=%d");
       59        59    2              if (cur_func)
       60        60    2                 strcat (break_def_fmt,"Function=%s");
       61        61    2              if (num_diag)
       62        62    2                 strcat (break_def_fmt,"  Errors=%d");
       63        63    2              if (max_sev)
       64        64    2                 strcat (break_def_fmt,"  Max Sev=%d");
       65        65    2              strcat (break_def_fmt, "\n");
       66        66    2              break_fmt_str = break_def_fmt;
       67        67    2           }
       68        68    1           CHECK_CHAR (cur_phase, break_phase_pos);
       69        69    1           CHECK_CHAR (cur_file, break_file_pos);
       70        70    1           CHECK_CHAR (source_key, break_key_pos);
       71        71    1           CHECK_VAL (debug_num, break_debug_pos);
       72        72    1           CHECK_CHAR (cur_func, break_func_pos);
       73        73    1           CHECK_VAL (num_diag, break_diag_pos);
       74        74    1           CHECK_VAL (max_sev, break_sev_pos);
CC.C03    File=zbm$break$break:c.:ZBC3TSI                                           Fri Aug 22 1997  Page=3  
       75        75    1           break_arg_list[pos].pval = (char *) 0;
       76        76    1           breakfp = freopen ("UC","a", breakfp);
       77        77    1           setvbuf (breakfp, (char *) 0, _IOLBF, 0);
       78        78    1           signal (SIGINT,&sig_handle);
"zbm$break$break:c.:ZBC3TSI", line 78: (warning) & before function: ignored
"zbm$break$break:c.:ZBC3TSI", line 78: (warning) incompatible pointers in parcomma
       79        79    1        }
       80        80
       81        81
       82        82             /*F*     NAME:       sig_handle
       83        83                      PURPOSE:    This routine is called whenever the break key is
       84        84                                  hit
       85        85                      DESCRIPTION:This routine is called whenever the break key is
       86        86                                  hit by the user.  It takes the variables set up
       87        87                                  by the set_break_vars and outputs them through
       88        88                                  M$UC.
       89        89             */
       90        90
       91        91             /*D*     NAME:       sig_handle
       92        92                      CALL:       ASYNC CALL
       93        93                      INPUT:      NONE
       94        94                      OUTPUT:     NONE
       95        95                      DESCRIPTION:This routine is called whenever the break key is
       96        96                                  hit by the user.  It takes the variables set up
       97        97                                  by the set_break_vars and outputs them through
       98        98                                  M$UC.
       99        99             */
      100       100
      101       101             void sig_handle ()
      102       102             {
      103       103    1           PUT_CHAR (break_phase_pos);
      104       104    1           PUT_CHAR (break_file_pos);
      105       105    1           PUT_CHAR (break_key_pos);
      106       106    1           PUT_VAL (break_debug_pos);
      107       107    1           PUT_CHAR (break_func_pos);
      108       108    1           PUT_VAL (break_diag_pos);
      109       109    1           PUT_VAL (break_sev_pos);
CC.C03    File=zbm$break$break:c.:ZBC3TSI                                           Fri Aug 22 1997  Page=4  
      110       110    1           vfprintf (breakfp, break_fmt_str, break_arg_list);
"zbm$break$break:c.:ZBC3TSI", line 110: (warning) incompatible pointers in parcomma
      111       111    1           signal (SIGINT,&sig_handle);
"zbm$break$break:c.:ZBC3TSI", line 111: (warning) & before function: ignored
"zbm$break$break:c.:ZBC3TSI", line 111: (warning) incompatible pointers in parcomma
      112       112    1           return;
      113       113    1        }
---  Include file information  ---

   stdio:h.:LIB_E05. is referenced
   signal:h.:LIB_E05. is referenced
   string:h.:LIB_E05. is referenced
   zbm$break$break:h.:ZBC3TOU. is referenced

5 warnings were detected in the file zbm$break$break:c.:ZBC3TSI
