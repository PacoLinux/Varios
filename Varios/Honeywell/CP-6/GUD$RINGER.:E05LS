VERSION E05

CALF.D00   GUD$RINGER - Begin executing in Ring 0                               TUE JUL 29 '97 22:14 Page:2
                                     1  *M* GUD$RINGER - L6ASM routines for trap handler.
                                     2  *T***********************************************************
                                     3  *T*                                                         *
                                     4  *T* Copyright (c) Bull HN Information Systems Inc., 1997    *
                                     5  *T*                                                         *
                                     6  *T***********************************************************
                                     8  *
                                     9         OUNAME  GUD$RINGER
                                    10         ENTDEF  GUD$RINGER
                                    11         ENTDEF  GUD$RING1,GUD$RING0
                                    12         ENTDEF  GUD$ASD
                                    13  *
                                    14         SYMREF  G$LOW_MEM$
                                    15         SYMREF  G$SEG$
                                    16         SYMREF  GHT_L6_9X
                                    17  *
                                    18         INCLUDE GHT_TRAP_E      See GHT$TRAP for a listing.
                                    19  *
         000000(0)                  20  GUD$RINGER ALIGN
                                    21  *
                                    22  *F*  NAME:   GUD$RINGn
                                    23  *F*  PURPOSE:  To set the Ring value in the Status to Ring n.
                                    24  *F*  CALL:   CALL GUD$RINGn ALTRET(label)    where n = 0 or 1.
                                    25  *
         000000(0)                  26  GUD$RING0 ALIGN
 00000   B870 00C0                  27         LDR,R3  'C0'X,IMO
 00002   0F88                       28         B       GUD$RINGN,SPREL
                                    29  *
         000003(0)                  30  GUD$RING1 ALIGN
 00003   8980 000000(2)s            31         CMZ     GHT_L6_9X       Don't use RING1 on 9X machines.
 00006   0981 004B                  32         BNE     RETURN,PREL
 00008   B870 0080                  33         LDR,R3  '80'X,IMO       Ring 1 in a Z-register.
         00000A(0)                  34  GUD$RINGN ALIGN
                                    35  *
                                    36  *                              Build "canned" TSA
                                    37  *
CALF.D00   GUD$RINGER - Begin executing in Ring 0                               TUE JUL 29 '97 22:14 Page:3
                                    38  *                              Reset NATSAP in low mem for the RTT
 0000A   C2F8 0002                  39         LLH,R4  2,$IV           Fetch ISM2
 0000C   4044                       40         SOR,R4  4               Align NATSAP Select
 0000D   C570 0007                  41         AND,R4  7,IMO           Get rid of MMU bit
 0000F   1C08                       42         LDV,R1  8               Change NATSAP Select into
 00010   9254                       43         SUB,R1  R4               index to NATSAP$ in low memory
 00011   9C80 000000(0)s            44         LDB,B1  G$LOW_MEM$      Reference low memory mapped
                                    45  *
                                    46  *                              Pull the NATSAP from its chain
                                    47  *                               and link it in front of the ISA one.
                                    48  *
 00014   BC91                       49         LDB,B3  ,B1,R1          Get current value from low memory
 00015   DCF8 FFFE                  50         LDB,B5  -2,$IV          Get ISA.TSAP$
 00017   DE83                       51         SWB,B5  ,B3             Swap TSAL$ in the "canned" one
 00018   DF91                       52         STB,B5  ,B1,R1          Replace NATSAP$ with addr from TSA_nex
                                      ::t.TSAL$
 00019   BFF8 FFFE                  53         STB,B3  -2,$IV          Make TSA_next the real one in ISA.TSAP
                                      ::$
 0001B   DBC6 0001                  54         LAB,B5  1,B6            SET P$ IN TSA_NEXT
 0001D   DFC3 0008                  55         STB,B5  8,B3
                                    56  *
 0001F   BF43 0005                  57         STR,R3  5,B3            DONT FORGET RING NUMBER IN THE Z WORD
                                    58  *                    I'M ASSUMING REG, BI AND IS DON'T MATTER ON RTT
                                    59  *                    ALSO, TRAP#, INDICATOR REG, INST, AND A
                                    60  *
 00021   0003                       61         RTT
                                    62  *
                                    63  *
                                    64  *
                                    65  *F*  NAME: GUD$ASD.
                                    66  *F*  PURPOSE: To set the ASV in the current ISA to a specified ASDT
                                    67  *F*           and then Activate Segment Descriptors in that ASDT.
                                    68  *F*  CALL:  CALL GUD$ASD(ASDT$) ALTRET(label);
                                    69  *
         000022(0)                  70  GUD$ASD ALIGN
 00022   8C53                       71         STS     R3              Remember level to exit at.
CALF.D00   GUD$RINGER - Begin executing in Ring 0                               TUE JUL 29 '97 22:14 Page:4
 00023   6C3F                       72         LDV,R6  63
 00024   E553                       73         AND,R6  R3
 00025   6D04                       74         CMV,R6  G_IL_INHIBIT#   Don't bother if already there.
 00026   0903                       75         BE      NO_INHIBIT,SPREL
 00027   8E70 8084                  76         LEV     G_IL_INHIBIT#+'8080'X,IMO
         000029(0)                  77  NO_INHIBIT ALIGN
 00029   9C83                       78         LDB,B1  ,B3             New ASDT
 0002A   BBF8 0000                  79         LAB,B3  0,$IV
 0002C   9FC3 FFFB                  80         STB,B1  -5,B3
 0002E   BF43 0005                  81         STR,R3  G_ISA_S#,B3     Keep same ring.
 00030   8CC3 0001                  82         LDI     G_ISA_ISM1#,B3  Don't bother loading registers.
 00032   8D55                       83         SDI     R5              Save old ISMs.
 00033   6C00                       84         LDV,R6  0
 00034   F570 F000                  85         AND,R7  'F000'X,IMO     Only load MMU and NATSAP.
 00036   8D43 0001                  86         SDI     G_ISA_ISM1#,B3
 00038   DB80 000000(1)             87         LAB,B5  STORE_ISA       Junk ISA to enable from.
 0003B   DF80 003088                88         STB,B5  G_LM_IV#+G_IL_INHIBIT#*2
 0003E   BF80 00308A                89         STB,B3  G_LM_IV#+G_IL_INHIBIT1#*2
 00041   DBC0 0005                  90         LAB,B5  GUD$ASD2,PREL
 00043   DFC3 0003                  91         STB,B5  G_ISA_P$#,B3
 00045   8E70 8005                  92         LEV     '8000'X+G_IL_INHIBIT1#,IMO
         000047(0)                  93  GUD$ASD2 ALIGN
 00047   8CD5                       94         LDI     R5
 00048   8D43 0001                  95         SDI     G_ISA_ISM1#,B3
 0004A   B570 003F                  96         AND,R3  '3F'X,IMO
 0004C   B470 8000                  97         OR,R3   '8000'X,IMO
 0004E   BF80 003088                98         STB,B3  G_LM_IV#+G_IL_INHIBIT#*2
 00051   8E53                       99         LEV     R3
         000052(0)                 100  RETURN ALIGN
                                   101  *
 00052   83C6 0001                 102         JMP     1,B6
         000000(1)                 103         SECT    DATA
 00000   0000 0000 0000 0000       104  STORE_ISA DATA 0,0,0,0,0,0     DEV, ISMs(2), P$(2), S.
 00004   0000 0000
                                   105         END
      No Errors in this assembly.
