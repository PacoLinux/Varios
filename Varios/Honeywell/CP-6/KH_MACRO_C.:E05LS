

14:47 JUL 28 '97 KH_MACRO_C.:E05SI                                         1    
    1      /*M* KH_MACRO_C - Macros for Node Admin/Handler interface routines */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /*F* NAME: Miscellaneous_Handler Services
    8
    9      Services described in this section facilitate coding
   10      of user handlers.  The routines
   11      are referred to collectively as Handler Common.
   12      These services include:
   13
   14      .fif
   15      o  Administrative Services
   16      o  IO services
   17      o  Interrupt Services
   18      o  Clock services
   19      o  Memory Pool services
   20      .fin
   21
   22      An overview of these service may be found in the CP-6 FEP Programming
   23      Concepts Manual (HA11), Section 2.
   24      */
   25
   26      /*F* NAME: Miscellaneous_INCLUDE Files.
   27
   28      .FIF
   29      GH_IOFNC_E      IO Function Codes
   30      KH$CHN          Macro for a channel table entry
   31      KH$CLK          Structures used with the clock services routines
   32      KH$IO           FPTs for calling high-level IO routines
   33      KH$STT          Macros for statistic reporting
   34      KH$TRC          Handler tracing macros
   35      KHA_FNC_E       Administrative function codes
   36      KHC_MAC_C       Macros and global data needed by Clock Services.
   37      KH_CHN          Channel table static item definitions
14:47 JUL 28 '97 KH_MACRO_C.:E05SI                                         2    
   38      KH_CLKFNC_E     Clock Service related equates.
   39      KH_MACRO_C      Macros for Node Admin/Handler interface routines
   40      KH_SCREECH_M    Handler screech macros
   41      KH_TRC          Handler tracing static data
   42      KH_TRC_M        Handler trace macros
   43      KL_CONTROL_C    EQUs for the LCP-6 Handler Boot/Run-time Parameters
   44      KL_MACRO_C      Macros for control parameter and statistic requests
   45      KL_SUPER_C      Macros for device context structures
   46      KNH_MACRO_C     Macro definitions for the Handler Monitor Interface
   47      KV$BPC          Free buffer pool control block
   48      KV_GLB          Global static data
   49      .FIN
   50      */
   51
   52      /*F* NAME: Handler Structure
   53           A handler is a program that performs functions for a particular
   54      type of physical devices.  There are several CP-6 handlers
   55      that handle physical devices.  They are:
   56
   57      .FIF
   58      .INL +4
   59                ASYNC - Handles asynchronous adapters for MLC-8's and MLC-16's.
   60                BISYNC - Handles synchronous adapters for MLC-8's and MLC-16's.
   61                COUPLER - Handles the L66-L6 FEP coupler
   62                HDLCX25 - Handles HDLC adapters for MLC-8's and MLC-16's.
   63                PIGLET - Handles diskette drives on the FEP.
   64                UNITREC - Handles unit record peripherals connect to these FEP.
   65      .INL -4
   66
   67      .FIN
   68      The handlers has several interfaces to the system and devices.  Here
   69      is a picture of a handler:
   70
   71      .BRN 20
   72      .FIF
   73      }
   74      }                    Physical Device
14:47 JUL 28 '97 KH_MACRO_C.:E05SI                                         3    
   75      }                           |
   76      }                           |
   77      }          __________________________________________
   78      }          |                                  |     |
   79      }          |       I/O library services       | H   |
   80      }          |----------------------------------| a / |
   81      }          |                                  | n C |
   82      }          |     Specific Handler code        | d o |
   83      }          |                                  | l m |
   84      }          |----------------------------------| e m |
   85      }          |                                  | r o |
   86      }          |     Virtual Device Handler       |   n |
   87      }          |                                  |     |
   88      }          |----------------------------------|-----|
   89      }          |                                  |
   90      }          |       Network Services           |
   91      }          |__________________________________|
   92      }
   93
   94      .FIN
   95      */
   96
   97      /*F* NAME: Administrative_Services
   98
   99      The library administrative services are those that provide
  100      for communication with the Node Administrator.  These services include:
  101
  102      .fif
  103      o  Control parameter initialization and changing
  104      o  Channel allocation and administration
  105      o  Error Logging services
  106      o  Statistic reporting
  107      .fin
  108
  109      The handler interface to the library administrative routines and VDH
  110      must be established by calls to the various initialization routines,
  111      which are explained below.
14:47 JUL 28 '97 KH_MACRO_C.:E05SI                                         4    
  112
  113      The library administrative services require a path to and communication
  114      with the Node Administrator.  A part of this requirement is the ability
  115      to issue no-wait reads on this path.  This implies that the handler
  116      has event control, which is established via the M$EVENT monitor service.
  117      If the handler has no event control needs of its own, the library
  118      initialization services will establish event control.
  119
  120      The handler on initialization establishes its own entry point
  121      for various administrative functions.
  122      Later, whenever the library administrative service routines have
  123      some function for the handler to perform, this entry point will
  124      be called with a single parameter that contains all the information
  125      the handler will require to perform the function.  This parameter,
  126      KH$ADMIN_FPT, is described below.
  127
  128      To initialize the interface to handler administration and VDH, the
  129      handler should call the routines listed below.  It is important that
  130      the calls be made to the initialization routines in the order listed
  131      as each call assumes that the previous calls have been made.
  132
  133      .fif
  134      }   KHA$INIT           Establish a connection to the Node Administrator
  135      }   KHA$INIT_CONTROL   Initialize the control parameters
  136      }   KVV$VDHINT         Initialize VDH and its buffer pool
  137      }   KHA$INIT_CHANTBL   Initialize the Channel Table
  138      }   KHA$INIT_DONE      Signal that handler initialization is complete
  139      }   KVM$RCV            Process the receive Circular Queue
  140      .fin
  141
  142      */
  143
  144      /*F* NAME: Administrative_Structures
  145
  146      This section describes the structures, SYMDEFed data, macros and
  147      related EQU files used by the library administrative services.
  148
14:47 JUL 28 '97 KH_MACRO_C.:E05SI                                         5    
  149      .fif
  150      }  KH_ENTDEFS              KL_HASP
  151      }  KV$VDH_VDHINT           KL_TRMD
  152      }  KH$ADMIN_FPT            KL_HASPDEV
  153      }  KHA_FCN_E               KL_LN3270
  154      }  KH$CHN                  KL_CONTROLLER
  155      }  KH_CHNDAT               KL_LINEDEV
  156      }  KH_LINSPD               KL_KEYMES
  157      }  KL_BLKHDR               B$TERMINAL_ID
  158      }  KL_LNK                  KL_CONTROL
  159      }  KL_LINK                 KH$CTLTBL
  160      }  KL_LINKDEV              KH_HNDLRPARAM_equs
  161      }  KL_LNKVC                KL_REQSTATS
  162      }  KL_VIRCIR               KH$STT
  163      }                          KNH$MESS
  164      .FIN
  165      */
  166
  167                          /*F* NAME: KH$CTLTBL - Control Parameters Table
  168
  169                          The KH$CTLTBL macro in file KH_MACRO_C generates
  170                          the table that contains
  171                          the information required by NODEADMIN to initialize
  172                          and update the handler parameters that may be
  173                          specified at boot time and/or displayed at run-time.
  174
  175                          The table is to be defined by the handler and must
  176                          be initialized prior to calling KHA$INIT_CONTROL.
  177                          The storage class for the table must be specified
  178                          by using the STCLASS=storage_class option.  The
  179                          default is BASED.
  180
  181                          The table consists of a one word header that
  182                          contains the size of the parameter array that
  183                          follows.  This size word may be initialized
  184                          by using the HIPARM=value option.
  185
14:47 JUL 28 '97 KH_MACRO_C.:E05SI                                         6    
  186                          Please see the description of KL_HNDLRPARM_equs
  187                          below for the EQUated names and meanings of the
  188                          various control parameters in this parameter array.
  189
  190                          Each entry in the parameter array
  191                          contains the address in handler memory where
  192                          the library administrative routines are to store
  193                          the parameter values received from NETCON, flags
  194                          that indicate if the parameter may be modified
  195                          after initialization, etc.
  196
  197                          The INIT_ONLY and DISP_ONLY attribute flags and PTR$
  198                          pointer may be initialized at compile time by specifying
  199                          options of the form:
  200
  201                          paramname = VARIABLE
  202
  203                          paramname_INTO = {YES|NO}
  204
  205                          paramname_DSPO = {YES|NO}
  206
  207                          where "paramname" is taken from the following list.
  208                          Also shown are the handlers for which these
  209                          parameters are implemented.
  210
  211                          ATTR,
  212                          BLOCK,
  213                          ERRSND,
  214                          HOPCOST,
  215                          IMPTBLMAX,
  216                          INTLVL,
  217                          IOBUF,
  218                          IOMEM,
  219                          LGNRTRYNUM,
  220                          LINERRDSCLMT,
  221                          LINERRLOGBFRLMT,
  222                          LINERRLOGLMT,
14:47 JUL 28 '97 KH_MACRO_C.:E05SI                                         7    
  223                          MAXICQTIME,
  224                          MEM,
  225                          MMRINTCHC,
  226                          OCQDBLKSIZ,
  227                          OTPBFRBYTSIZBIG,
  228                          OTPBFRBYTSIZSML,
  229                          RCVCQBYTSIZ,
  230                          RES,
  231                          SNDCQBYTSIZ,
  232                          SSNMAX,
  233                          TRC,
  234                          TRCBFR,
  235                          TYPAHD,
  236                          UNBLOCK,
  237                          VDHTRC,
  238                          X29MLTMR.
  239
  240                          The fields in this structure are:
  241                          */
  242
  243      %MACRO KH$CTLTBL (FPTN=KH$CTLTBL,
  244                        STCLASS=BASED,
  245                        INTLVL=NIL,
  246                        MEM=NIL,
  247                        IOMEM=NIL,
  248                        RES=NIL,
  249                        ATTR=NIL,
  250                        TYPAHD=NIL,
  251                        LINERRLOGLMT=NIL,
  252                        LINERRDSCLMT=NIL,
  253                        TRC=NIL,
  254                        VDHTRC=NIL,
  255                        ERRSND=NIL,
  256                        TRCBFR=NIL,
  257                        RCVCQBYTSIZ=NIL,
  258                        SNDCQBYTSIZ=NIL,
  259                        MMRINTCHC=NIL,
14:47 JUL 28 '97 KH_MACRO_C.:E05SI                                         8    
  260                        IOBUF=NIL,
  261                        LINERRLOGBFRLMT=NIL,
  262                        X29MLTMR=NIL,
  263                        MAXICQTIME=NIL,
  264                        OCQDBLKSIZ=NIL,
  265                        LGNRTRYNUM=NIL,
  266                        HOPCOST=NIL,
  267                        OTPBFRBYTSIZSML=NIL,
  268                        OTPBFRBYTSIZBIG=NIL,
  269                        SSNMAX=NIL,
  270                          IMPTBLMAX=NIL,
  271                        BLOCK=NIL,
  272                        UNBLOCK=NIL,
  273                        INTLVL_INTO(YES='1'B, NO='0'B)='1'B,
  274                        MEM_INTO(YES='1'B, NO='0'B)='1'B,
  275                        IOMEM_INTO(YES='1'B, NO='0'B)='1'B,
  276                        RES_INTO(YES='1'B, NO='0'B)='1'B,
  277                        ATTR_INTO(YES='1'B, NO='0'B)='1'B,
  278                        TYPAHD_INTO(YES='1'B, NO='0'B)='0'B,
  279                        LINERRLOGLMT_INTO(YES='1'B, NO='0'B)='0'B,
  280                        LINERRDSCLMT_INTO(YES='1'B, NO='0'B)='0'B,
  281                        TRC_INTO(YES='1'B, NO='0'B)='0'B,
  282                        VDHTRC_INTO(YES='1'B, NO='0'B)='0'B,
  283                        ERRSND_INTO(YES='1'B, NO='0'B)='0'B,
  284                        TRCBFR_INTO(YES='1'B, NO='0'B)='0'B,
  285                        RCVCQBYTSIZ_INTO(YES='1'B, NO='0'B)='1'B,
  286                        SNDCQBYTSIZ_INTO(YES='1'B, NO='0'B)='1'B,
  287                        MMRINTCHC_INTO(YES='1'B, NO='0'B)='0'B,
  288                        IOBUF_INTO(YES='1'B, NO='0'B)='0'B,
  289                        LINERRLOGBFRLMT_INTO(YES='1'B, NO='0'B)='0'B,
  290                        X29MLTMR_INTO(YES='1'B, NO='0'B)='0'B,
  291                        MAXICQTIME_INTO(YES='1'B, NO='0'B)='0'B,
  292                        OCQDBLKSIZ_INTO(YES='1'B, NO='0'B)='0'B,
  293                        LGNRTRYNUM_INTO(YES='1'B, NO='0'B)='0'B,
  294                        HOPCOST_INTO(YES='1'B, NO='0'B)='0'B,
  295                        OTPBFRBYTSIZSML_INTO(YES='1'B, NO='0'B)='0'B,
  296                        OTPBFRBYTSIZBIG_INTO(YES='1'B, NO='0'B)='0'B,
14:47 JUL 28 '97 KH_MACRO_C.:E05SI                                         9    
  297                        SSNMAX_INTO(YES='1'B, NO='0'B)='0'B,
  298                          IMPTBL_INTO(YES='1'B,NO='0'B)='0'B,
  299                        BLOCK_INTO(YES='1'B, NO='0'B)='0'B,
  300                        UNBLOCK_INTO(YES='1'B, NO='0'B)='0'B,
  301                        INTLVL_DSPO(YES='1'B, NO='0'B)='0'B,
  302                        MEM_DSPO(YES='1'B, NO='0'B)='0'B,
  303                        IOMEM_DSPO(YES='1'B, NO='0'B)='0'B,
  304                        RES_DSPO(YES='1'B, NO='0'B)='0'B,
  305                        ATTR_DSPO(YES='1'B, NO='0'B)='0'B,
  306                        TYPAHD_DSPO(YES='1'B, NO='0'B)='0'B,
  307                        LINERRLOGLMT_DSPO(YES='1'B, NO='0'B)='0'B,
  308                        LINERRDSCLMT_DSPO(YES='1'B, NO='0'B)='0'B,
  309                        TRC_DSPO(YES='1'B, NO='0'B)='0'B,
  310                        VDHTRC_DSPO(YES='1'B, NO='0'B)='0'B,
  311                        ERRSND_DSPO(YES='1'B, NO='0'B)='0'B,
  312                        TRCBFR_DSPO(YES='1'B, NO='0'B)='0'B,
  313                        RCVCQBYTSIZ_DSPO(YES='1'B, NO='0'B)='0'B,
  314                        SNDCQBYTSIZ_DSPO(YES='1'B, NO='0'B)='0'B,
  315                        MMRINTCHC_DSPO(YES='1'B, NO='0'B)='0'B,
  316                        IOBUF_DSPO(YES='1'B, NO='0'B)='0'B,
  317                        LINERRLOGBFRLMT_DSPO(YES='1'B, NO='0'B)='0'B,
  318                        X29MLTMR_DSPO(YES='1'B, NO='0'B)='0'B,
  319                        MAXICQTIME_DSPO(YES='1'B, NO='0'B)='0'B,
  320                        OCQDBLKSIZ_DSPO(YES='1'B, NO='0'B)='0'B,
  321                        LGNRTRYNUM_DSPO(YES='1'B, NO='0'B)='0'B,
  322                        HOPCOST_DSPO(YES='1'B, NO='0'B)='0'B,
  323                        OTPBFRBYTSIZSML_DSPO(YES='1'B, NO='0'B)='0'B,
  324                        OTPBFRBYTSIZBIG_DSPO(YES='1'B, NO='0'B)='0'B,
  325                        SSNMAX_DSPO(YES='1'B, NO='0'B)='0'B,
  326                          IMPTBL_DSPO(YES='1'B,NO='0'B)='0'B,
  327                        BLOCK_DSPO(YES='1'B, NO='0'B)='0'B,
  328                        UNBLOCK_DSPO(YES='1'B, NO='0'B)='0'B,
  329                        HIPARM=0);
  330
  331       %LSET LISTDIR='0'B;
  332       %LSET LISTEXP='1'B;
  333       %LSET LISTCOM='0'B;
14:47 JUL 28 '97 KH_MACRO_C.:E05SI                                         10   
  334       %LSET LISTSUB='1'B;
  335       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  336       %IF (SUBSTR(STR,0,6)='STATIC') OR
  337       (SUBSTR(STR,0,8)='CONSTANT') OR
  338       (SUBSTR(STR,0,3)='EXT');
  339      %LSET STR='1'B;
  340       %LSET INIT=CHARTEXT('INIT');
  341       %LSET EINIT=CHARTEXT('');
  342       %ELSE;
  343      %LSET STR='0'B;
  344       %LSET INIT=CHARTEXT('/*');
  345       %LSET EINIT=CHARTEXT('*/');
  346       %ENDIF;
  347
  348      DCL 1 FPTN STCLASS ALIGNED,
  349            2 HIPARAM SBIN WORD %INIT(%HIPARM)%EINIT,
  350                          /*K* HIPARAM - SBIN WORD.
  351                          contains the index into the PARAM array for
  352                          the highest numbered parameter known to the
  353                          handler.
  354
  355                          This value may be supplied at compile time by
  356                          using the HIPARM=value option.  The value specified
  357                          should be from the EQUated values for handler
  358                          parameters that are in the file KL_CONTROL_C.
  359                          Please see the description of KL_HNDLRPARM_equs
  360                          below for the names and meanings of the equated
  361                          values.  The default value for HIPARM is zero.
  362                          */
  363            2 PARM(0:%HIPARM),
  364                          /*K* PARM - ARRAY(0:HIGHPARAM)
  365                          contains the required information for each
  366                          possible parameter, as follows:
  367                          */
  368              3 FLAGS,
  369      %LSET INTO = TEXTCHAR
  370      (INTLVL_INTO,
14:47 JUL 28 '97 KH_MACRO_C.:E05SI                                         11   
  371      MEM_INTO,
  372      IOMEM_INTO,
  373      RES_INTO,
  374      ATTR_INTO,
  375      TYPAHD_INTO,
  376      LINERRLOGLMT_INTO,
  377      LINERRDSCLMT_INTO,
  378      TRC_INTO,
  379      VDHTRC_INTO,
  380      ERRSND_INTO,
  381      TRCBFR_INTO,
  382      RCVCQBYTSIZ_INTO,
  383      SNDCQBYTSIZ_INTO,
  384      MMRINTCHC_INTO,
  385      IOBUF_INTO,
  386      LINERRLOGBFRLMT_INTO,
  387      X29MLTMR_INTO,
  388      MAXICQTIME_INTO,
  389      OCQDBLKSIZ_INTO,
  390      LGNRTRYNUM_INTO,
  391      HOPCOST_INTO,
  392      OTPBFRBYTSIZSML_INTO,
  393      OTPBFRBYTSIZBIG_INTO,
  394      SSNMAX_INTO,
  395      IMPTBL_INTO,
  396      BLOCK_INTO,
  397      UNBLOCK_INTO,'0'B*0);
  398      %LSET INTO = CHARTEXT (SUBSTR (INTO,0,MIN(HIPARM*5+4,LENGTHC(INTO))));
  399                4 INIT_ONLY BIT(1) UNAL %INIT(%INTO)%EINIT,
  400                          /*K* PARM.FLAGS.INIT_ONLY - BIT(1).
  401                          set if the parameter may be initialized at boot
  402                          time, but is not to be modified at run time.
  403
  404                          This value may be supplied at compile time by
  405                          using the paramname_INTO={YES|NO} option.
  406                          See the description of the names in the discussion
  407                          of KL_HNDLRPARM_equs below for the acceptable
14:47 JUL 28 '97 KH_MACRO_C.:E05SI                                         12   
  408                          specification of "paramname".
  409                          */
  410      %LSET DSPO=TEXTCHAR
  411      (INTLVL_DSPO,
  412      MEM_DSPO,
  413      IOMEM_DSPO,
  414      RES_DSPO,
  415      ATTR_DSPO,
  416      TYPAHD_DSPO,
  417      LINERRLOGLMT_DSPO,
  418      LINERRDSCLMT_DSPO,
  419      TRC_DSPO,
  420      VDHTRC_DSPO,
  421      ERRSND_DSPO,
  422      TRCBFR_DSPO,
  423      RCVCQBYTSIZ_DSPO,
  424      SNDCQBYTSIZ_DSPO,
  425      MMRINTCHC_DSPO,
  426      IOBUF_DSPO,
  427      LINERRLOGBFRLMT_DSPO,
  428      X29MLTMR_DSPO,
  429      MAXICQTIME_DSPO,
  430      OCQDBLKSIZ_DSPO,
  431      LGNRTRYNUM_DSPO,
  432      HOPCOST_DSPO,
  433      OTPBFRBYTSIZSML_DSPO,
  434      OTPBFRBYTSIZBIG_DSPO,
  435      SSNMAX_DSPO,
  436      IMPTBL_DSPO,
  437      BLOCK_DSPO,
  438      UNBLOCK_DSPO,'0'B*0);
  439      %LSET DSPO = CHARTEXT (SUBSTR (DSPO,0,MIN (HIPARM*5+4,LENGTHC(DSPO)) ) );
  440                4 DISP_ONLY BIT(1) UNAL %INIT(%DSPO)%EINIT,
  441                          /*K* PARM.FLAGS.DISP_ONLY - BIT(1).
  442                          set if the parameter may only be displayed; i.e.
  443                          may not be initialized at boot time and may not
  444                          be modified at run time.
14:47 JUL 28 '97 KH_MACRO_C.:E05SI                                         13   
  445
  446                          This value may be supplied at compile time by
  447                          using the paramname_DSPO={YES|NO} option.
  448                          See the description of the names in the discussion
  449                          of KL_HNDLRPARM_equs below for the acceptable
  450                          specification of "paramname".
  451                          */
  452      %IF STR;
  453      %IF HIPARM<KL_ASYNC_BLOCK;
  454      %LSET ARY=CHARTEXT(TEXTCHAR('0'B*0));
  455      %LSET ARYSZ=CHARTEXT('0*0');
  456      %ELSEIF HIPARM<=KL_ASYNC_UNBLOCK;
  457      %LSET ARY=CHARTEXT(CONCAT('''0''B*',BINCHAR(KL_ASYNC_BLOCK),',''1''B*0'));
  458      %LSET ARYSZ=CHARTEXT(CONCAT('0*',BINCHAR(KL_ASYNC_BLOCK),',16*0'));
  459      %ELSE;
  460      %LSET ARY=CHARTEXT(CONCAT('''0''B*',BINCHAR(KL_ASYNC_BLOCK),',''1''B*2,''0''B*0'));
  461      %LSET ARYSZ=CHARTEXT(CONCAT('0*',BINCHAR(KL_ASYNC_BLOCK),',16*2,0*0'));
  462      %ENDIF;
  463      %ELSE;
  464      %LSET ARY=CHARTEXT(TEXTCHAR('0'B*0));
  465      %LSET ARYSZ=CHARTEXT('0*0');
  466      %ENDIF;
  467                4 ARRAYED BIT(1) UNAL %INIT(%ARY)%EINIT,
  468                          /*K* PARM.FLAGS.ARRAYED - BIT(1).
  469                          set if the parameter is an array of values.
  470                          */
  471                4 * BIT(5) UNAL %INIT('0'B*0)%EINIT,
  472              3 ARRAY_SZ UBIN(8) UNAL %INIT(%ARYSZ)%EINIT,
  473                          /*K* PARM.ARRAY_SZ - UBIN(8).
  474                          contains the number of entries in the parameter
  475                          that is arrayed.
  476                          */
  477              3 PTR$ PTR %INIT(
  478      %IF STR;
  479      ADDR(INTLVL)
  480      ,ADDR(MEM)
  481      ,ADDR(IOMEM)
14:47 JUL 28 '97 KH_MACRO_C.:E05SI                                         14   
  482      ,ADDR(RES)
  483      ,ADDR(ATTR)
  484      ,ADDR(TYPAHD)
  485      ,ADDR(LINERRLOGLMT)
  486      ,ADDR(LINERRDSCLMT)
  487      ,ADDR(TRC)
  488      ,ADDR(VDHTRC)
  489      ,ADDR(ERRSND)
  490      ,ADDR(TRCBFR)
  491      ,ADDR(RCVCQBYTSIZ)
  492      ,ADDR(SNDCQBYTSIZ)
  493      ,ADDR(MMRINTCHC)
  494      %CHARTEXT(SUBSTR('/*',2*BITBIN(HIPARM~=14)))
  495      ,ADDR(IOBUF)
  496      %CHARTEXT(SUBSTR('/*',2*BITBIN(HIPARM~=15)))
  497      ,ADDR(LINERRLOGBFRLMT)
  498      %CHARTEXT(SUBSTR('/*',2*BITBIN(HIPARM~=16)))
  499      ,ADDR(X29MLTMR)
  500      %CHARTEXT(SUBSTR('/*',2*BITBIN(HIPARM~=17)))
  501      ,ADDR(MAXICQTIME)
  502      %CHARTEXT(SUBSTR('/*',2*BITBIN(HIPARM~=18)))
  503      ,ADDR(OCQDBLKSIZ)
  504      %CHARTEXT(SUBSTR('/*',2*BITBIN(HIPARM~=19)))
  505      ,ADDR(LGNRTRYNUM)
  506      %CHARTEXT(SUBSTR('/*',2*BITBIN(HIPARM~=20)))
  507      ,ADDR(HOPCOST)
  508      %CHARTEXT(SUBSTR('/*',2*BITBIN(HIPARM~=21)))
  509      ,ADDR(OTPBFRBYTSIZSML)
  510      %CHARTEXT(SUBSTR('/*',2*BITBIN(HIPARM~=22)))
  511      ,ADDR(OTPBFRBYTSIZBIG)
  512      %CHARTEXT(SUBSTR('/*',2*BITBIN(HIPARM~=23)))
  513      ,ADDR(SSNMAX)
  514      %CHARTEXT(SUBSTR('/*',2*BITBIN(HIPARM~=24)))
  515      ,ADDR(IMPTBLMAX)
  516      %CHARTEXT(SUBSTR('/*',2*BITBIN(HIPARM~=25)))
  517      ,ADDR(NIL)
  518      %CHARTEXT(SUBSTR('/*',2*BITBIN(HIPARM~=26)))
14:47 JUL 28 '97 KH_MACRO_C.:E05SI                                         15   
  519      ,ADDR(NIL)
  520      %CHARTEXT(SUBSTR('/*',2*BITBIN(HIPARM~=27)))
  521      ,ADDR(NIL)
  522      %CHARTEXT(SUBSTR('/*',2*BITBIN(HIPARM~=28)))
  523      ,ADDR(BLOCK)
  524      %CHARTEXT(SUBSTR('/*',2*BITBIN(HIPARM~=29)))
  525      ,ADDR(UNBLOCK)
  526      %CHARTEXT(SUBSTR('/*',2*BITBIN(HIPARM~=30)))
  527      ,ADDR(NIL)*0
  528      %CHARTEXT(SUBSTR('*/',2*BITBIN(HIPARM>30)))
  529      %ENDIF;
  530              )%EINIT;
  531                          /*K* PARM.PTR$ - PTR.
  532                          contains the address of the parameter in the
  533                          handler's memory.
  534
  535                          This value may be supplied at compile time by
  536                          using the paramname=VARIABLE option.
  537                          See the description of the names in the discussion
  538                          of KL_HNDLRPARM_equs below for the acceptable
  539                          specification of "paramname".
  540
  541                          If PARAM.ARRAY_SZ is zero, this pointer should
  542                          locate a UBIN WORD.  If non-zero, this pointer
  543                          should locate an array of the size specified in
  544                          PARAM.ARRAY_SZ, where each item in the array
  545                          is UBIN WORD.
  546                          */
  547      %MEND;
  548
  549
  550
  551      /*F* NAME: KH_ENTDEFS - Administration Services Entry DCLs
  552
  553      The KH_ENTDEFS macro will generate the ENTRY declarations
  554      for some of the Handler Administrative routines.
  555
14:47 JUL 28 '97 KH_MACRO_C.:E05SI                                         16   
  556      These are:
  557      .fif
  558      DCL KHA$ADMIN ENTRY;
  559      DCL KHA$INIT ENTRY(3) ALTRET;
  560      DCL KHA$INIT_CONTROL ENTRY(3) ALTRET;
  561      DCL KHA$INIT_CHANTBL ENTRY(3) ALTRET;
  562      DCL KHA$INIT_DONE ENTRY(3) ALTRET;
  563      .fin
  564
  565      The KH_ENTDEFS macro is in file KH_MACRO_C.
  566      */
  567
  568      %MACRO KH_ENTDEFS;
  569      DCL KHA$ADMIN ENTRY;
  570      DCL KHA$INIT ENTRY(3) ALTRET;
  571      DCL KHA$INIT_CONTROL ENTRY(3) ALTRET;
  572      DCL KHA$INIT_CHANTBL ENTRY(3) ALTRET;
  573      DCL KHA$INIT_DONE ENTRY(3) ALTRET;
  574      %MEND;
  575
  576
  577      /*F* NAME: KH$ADMIN_FPT - Parameters for Administrative Routines
  578
  579      The KH$ADMIN_FPT macro in file KH_MACRO_C generates the structure
  580      passed by the library administrative routines to the handler
  581      routine that was specified on the call to KHA$INIT.
  582
  583      The handler may determine the reason for the call to
  584      his administrative routine by inspecting the contents
  585      of KH$ADMIN_FPT.FNC, as explained below.
  586
  587      Note that the use of the KH$ADMIN_FPT macro will require
  588      macros from the LCP_6 include file.
  589
  590      The KH$ADMIN_FPT structure contains the following:
  591
  592      */
14:47 JUL 28 '97 KH_MACRO_C.:E05SI                                         17   
  593      %MACRO KH$ADMIN_FPT (FPTN=KH$ADMIN_FPT,
  594                           STCLASS=BASED);
  595
  596       %LSET LISTDIR='0'B;
  597       %LSET LISTEXP='1'B;
  598       %LSET LISTCOM='0'B;
  599       %LSET LISTSUB='1'B;
  600       %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  601       %IF (SUBSTR(STR,0,6)='STATIC') OR
  602       (SUBSTR(STR,0,8)='CONSTANT') OR
  603       (SUBSTR(STR,0,3)='EXT');
  604       %LSET INIT=CHARTEXT('INIT');
  605       %LSET EINIT=CHARTEXT('');
  606       %ELSE;
  607       %LSET INIT=CHARTEXT('/*');
  608       %LSET EINIT=CHARTEXT('*/');
  609       %ENDIF;
  610
  611      DCL 1 FPTN STCLASS ALIGNED,
  612            2 FNC UBIN WORD %INIT(0)%EINIT,
  613      /*K* FNC - UBIN WORD.
  614      Contains a value to indicate what function is requested.
  615      Please refer to KHA_FNC_E for the possible values and their meanings.
  616      */
  617            %B$TERMINAL_ID(FPTN=TERMID,STCLASS=STCLASS,LVL=2,LAST=",");
  618      /*K* TERMID - Identifies the terminal for which the function is
  619      requested.  TERMID is in the B$TERMINAL_ID format.
  620      */
  621      /*K* TERMID.TTYP - UBIN BYTE.
  622      .XEQ KI_CP6_C B$TERMINAL_ID TTYP
  623      */
  624      /*K* TERMID.LEV - UBIN BYTE.
  625      .XEQ KI_CP6_C B$TERMINAL_ID LEV
  626      */
  627      /*K* TERMID.TERM.CHANNEL - UBIN.
  628      .XEQ KI_CP6_C B$TERMINAL_ID TERM.CHANNEL
  629      */
14:47 JUL 28 '97 KH_MACRO_C.:E05SI                                         18   
  630      /*K* TERMID.TERM.SUBDEVICE - UBIN.
  631      .XEQ KI_CP6_C B$TERMINAL_ID TERM.SUBDEVICE
  632      */
  633      /*K* TERMID.TERM.SUBSUBDEVICE - UBIN.
  634      .XEQ KI_CP6_C B$TERMINAL_ID TERM.SUBSUBDEVICE
  635      */
  636      /*K* TERMID.TERM.TERM_NAME - CHAR(8).
  637      .XEQ KI_CP6_C B$TERMINAL_ID TERM.TERM_NAME
  638      */
  639            2 CTX$ PTR %INIT(ADDR(NIL))%EINIT,
  640      /*K* CTX$ - PTR.
  641      Contains pointer to block of context.  The structure of the
  642      block and how that block is to be used is dependent on the
  643      value of FNC.
  644
  645      When FNC indicates CNTRLCHG, CTX$ will contain the address of
  646      the KL_CONTROL message that has been received.
  647      The macro to generate the structure for KL_CONTROL is in file KL_MACRO_C.
  648
  649      When FNC indicates REQSTATS, CTX$ will contain the address of
  650      the KL_REQSTATS message that has been received.
  651      The macro to generate the structure for KL_REQSTATS is in file KL_MACRO_C.
  652
  653      When FNC indicates BLDCTX, CTX$
  654      contains a pointer to a block of context for the handler to use
  655      in building his own context for this device.  This action is
  656      in response to a handler's KHA_FNC_RQSLINPRO request to KHA$DVCADM.
  657      The handler is called with BLDCTX once for the channel, once for every
  658      controller and once for every device defined in SUPER.  (See the LINK,
  659      LINE, TERMINAL, DEVICE, and CONTROLLER commands in the SUPER,
  660      Communications Management section of CP-6 System Support Reference, HA21.)
  661      The data pointed to by CTX$ is dependent on the connection type KLTY_
  662      defined in KL_SUPER_C.
  663      .fif
  664
  665      }termid.lev  Connection Type  Concatenated Structures pointed to by CTX$
  666      }----------  ---------------  ------------------------------------------
14:47 JUL 28 '97 KH_MACRO_C.:E05SI                                         19   
  667      } 1            KLTY_LINK#        KL_LNK*
  668      }                                KL_LINK
  669      }
  670      } 2            KLTY_VIRCIR#      KL_LNKVC*
  671      }                                KL_VIRCIR
  672      }
  673      } 2            KLTY_LINKDEV#     KL_LINKDEV
  674      }
  675      } 1            KLTY_STRM#        KL_HASP*
  676      }                                KL_TRMD
  677      }
  678      } 2            KLTY_SDEV#        KL_HASPDEV
  679      }
  680      } 1            KLTY_3270#        KL_LN3270*
  681      }                                KL_TRMD
  682      }
  683      } 2            KLTY_CONT#        KL_CONTROLLER
  684      }
  685      } 3            KLTY_LINEDEV#     KL_LINEDEV
  686      }
  687      } 1            KLTY_HIP_DEV#     KL_LN3270*
  688      }                                KL_TRMD
  689      }
  690      } 2            KLTY_HIP_CONT#    KL_CONTROLLER
  691      }
  692      } 3            KLTY_HIP_LINE#    KL_LINEDEV
  693      }
  694      }* KL_BLKHDR is the first structure.  The second structure is to be
  695      }  located by KL_BLKHDR.PROOFFSET.  All macros are defined in
  696      }  KL_SUPER_C.
  697      .fin
  698
  699      When FCN indicates DVCERRRSP, CTX$ will contain the address of
  700      a UBIN WORD, which will in turn contain a value from the following
  701      list:
  702
  703      }          Decimal    Meaning
14:47 JUL 28 '97 KH_MACRO_C.:E05SI                                         20   
  704      }          Value
  705      }          --------   --------
  706      }          18         Retry
  707      }          19         Error
  708      }          20         Proceed
  709
  710      Note that DVCERRRSP will be a FCN if and only if (a) there is a
  711      symbiont device connected to a channel on this handler and (b) the
  712      handler has issued a device error message requiring an operator
  713      response.
  714
  715      Also note that the handler is expected to, in turn, perform the
  716      appropriate "error", "retry", or "proceed" function, as appropriate.
  717      */
  718             2 CHN$ PTR %INIT(ADDR(NIL))%EINIT,
  719               /*K* CHN$ - pointer to context being maintained for this termid
  720                    by handler common.  This context is described by KH$CHN.
  721      */
  722             2 LIN$ PTR %INIT(ADDR(NIL))%EINIT,
  723               /*K* LIN$ - pointer to the line level context block associated
  724                    with this termid.  This is used to save some effort when
  725                    passing events for subdevices, so the handler can easily
  726                    get what it needs out of the line context.        */
  727             %VLP_ERRCODE(FPTN=RESULTS,STCLASS=STCLASS,ALGN=CALIGNED,LVL=2,LAST=",");
  728      /*K* RESULTS - one word error code to be supplied by the handler
  729      when the handler is ALTRETURNing to the library
  730      indicating that the requested operation could not be performed.
  731      */
  732           2 CONTROL# UBIN WORD %INIT(0)%EINIT;
  733      /*K* CONTROL# - UBIN WORD.
  734      This field has meaning only when FNC contains KHA_FNC_CNTRLCHG.
  735
  736      It contains a value to indicate which of the handler's control
  737      parameters is to be changed; i.e. this value is to be used as
  738      an index into the handler's Control Parameter table, KH$CTLTBL.
  739      Please refer to the description of KL_HNDLRPARM_equ for the
  740      possible values and associated meanings.
14:47 JUL 28 '97 KH_MACRO_C.:E05SI                                         21   
  741      */
  742      %MEND;

