/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/*********************
*  LETARRAY          *
**********************/
LETARRAY: PROC (TOARRAY, FROMARRAY, SIZE) NOAUTO;
/*  LETARRAY is used to move one array into another.  For arrays
    with more than 10 elements, LETARRAY is faster than a loop
    generated inline.  7.5 times faster for 1000 element arrays. */
DCL TOARRAY           CHAR(I);
DCL FROMARRAY         CHAR(I);
DCL SIZE              SBIN WORD;
DCL I                 SBIN WORD;
 
      I = SIZE*4;
      TOARRAY = FROMARRAY;
END LETARRAY;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/***********************
*  WRIT                *
************************/
WRIT: PROC (FPT, KEY, BUFFER, LEN);
      DCL FPT              SBIN;
      DCL KEY               SBIN;
      DCL BUFFER            CHAR (LEN);
      DCL LEN               SBIN;
      DCL 1 BUFOUT ALIGNED,
            2  KEY          SBIN WORD,
            2  BUFFER       CHAR (140);
      DCL WRITFSFA          ENTRY (3);
 
      BUFOUT.KEY = KEY;
      CALL INSERT (BUFOUT.BUFFER, 0, LEN, SUBSTR (BUFFER, 0, LEN));
      CALL WRITFSFA (FPT, BUFOUT, LEN + 4);
END WRIT;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/********************
*  READ             *
*********************/
READ: PROC (FPT, KEY, BUFFER, LEN, ERROR);
      DCL FPT              SBIN;
      DCL KEY               SBIN;
      DCL BUFFER            CHAR (LEN);
      DCL LEN               SBIN;
      DCL ERROR             SBIN;
      DCL 1 BUFOUT ALIGNED,
            2  KEY          SBIN WORD,
            2  BUFFER       CHAR (140);
      DCL READFSFA          ENTRY (5);
 
      CALL READFSFA (FPT, BUFOUT, LEN, 140, ERROR);
      IF ERROR ~= 0 THEN RETURN;
      KEY = BUFOUT.KEY;
      LEN = LEN - 4;
      CALL INSERT (BUFFER, 0, LEN, SUBSTR (BUFOUT.BUFFER, 0, LEN));
END READ;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
 
/****************************
*  WRITEDIT               *
*****************************/
WRITEDIT: PROC (UNIT, BUFFER, BUFLEN, EDITKEY);
%INCLUDE CP_6;
%F$DCB;
DCL UNIT                 SBIN WORD;
DCL BUFFER                    CHAR(BUFLEN);
DCL BUFLEN                    SBIN WORD;
DCL EDITKEY                   BIT (36);
DCL LOCAL_EDIT_KEY      BIT (36) ALIGNED;
DCL GET_DCB             ENTRY (2);
DCL LAST_DCB            SBIN WORD;
DCL ALTRET_ABORT        ENTRY;
%FPT_WRITE (FPTN=FPT_WRITE_CONSTANT, STCLASS=CONSTANT,
      ONEWKEY=NO, NEWKEY=YES);
%FPT_WRITE (STCLASS=AUTO);
 
   /* Initialize the WRITE FPT */
 
   FPT_WRITE = FPT_WRITE_CONSTANT;
   FPT_WRITE.V_ = VECTOR (FPT_WRITE.V);
 
   CALL GET_DCB (UNIT, LAST_DCB);
   FPT_WRITE.V.DCB# = LAST_DCB;
   LOCAL_EDIT_KEY = '003000000000'O | EDITKEY;
   FPT_WRITE.KEY_ = VECTOR (LOCAL_EDIT_KEY);
   IF BUFLEN = 0 THEN DO;
      FPT_WRITE.BUF_.BUF$ = ADDR (NIL);
      FPT_WRITE.BUF_.BOUND = 0;
      END;
   ELSE
      FPT_WRITE.BUF_ = VECTOR(BUFFER);
   CALL M$WRITE (FPT_WRITE) ALTRET (NOGO);
   RETURN;
 
NOGO:
   CALL ALTRET_ABORT;
 
END WRITEDIT;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
 
/************************
*  GETDCB               *
*************************/
GET_DCB: PROC (UNIT, PDCBNUM);
 
/*F*  NAME:    GET_DCB
      PURPOSE: Gets the DCB number for a unit between 1 and 999.
               DCB numbers are stored in an array to eliminate the
               need to call M$GETDCB more than once.
      CALL:    CALL GET_DCB (UNIT, PDCBNUM)
      INPUT:   UNIT     -unit number.  Usually this refers to a
                         FORTRAN unit number, but BUILDDCB may
                         be called to associate another DCB with
                         a unit number.  Must be between 1 and 999.
      OUTPUT:  PDCBNUM  -DCB number of DCB associated with UNIT.
*/
 
   %INCLUDE CP_6;
   %INCLUDE TIDY_C61;
   DCL UNIT SBIN WORD ALIGNED;
   DCL 1 UNIT_NAME,
       2 I SBIN BYTE UNAL,
       2 NAME CHAR(7) UNAL;
   DCL CHAR_DCB CHAR(3);
   DCL I SBIN;
   DCL PDCBNUM       SBIN;
   DCL LDCBNUM       SBIN;
   DCL DCBNUMBER (0:999) SBIN BYTE STATIC SYMDEF UNAL INIT (-1 * 1000);
   DCL MESSAGE       CHAR (0) CONSTANT INIT (
      'Bad unit number.  Number must be between 1 and 999.');
   DCL M$DO          DCB;
 
   %FPT_GETDCB (FPTN=FPT_GETDCB_CONSTANT, STCLASS=CONSTANT, MERGE=YES);
   %FPT_GETDCB (STCLASS=AUTO);
   %FPT_WRITE (STCLASS=CONSTANT, DCB=M$DO, BUF=MESSAGE);
 
      IF UNIT < 1 OR UNIT > 999 THEN
         DO;
         CALL M$WRITE (FPT_WRITE);
         CALL M$XXX;
         END;
      LDCBNUM = DCBNUMBER (UNIT);
      IF LDCBNUM = -1 THEN
         DO;
 
         /* Initialize GETDCB FPT */
 
         FPT_GETDCB = FPT_GETDCB_CONSTANT;
         FPT_GETDCB.V_ = VECTOR (FPT_GETDCB.V);
         FPT_GETDCB.DCBNAME_ = VECTOR (UNIT_NAME);
         FPT_GETDCB.DCBNUM_ = VECTOR (LDCBNUM);
 
         CALL BINCHAR(CHAR_DCB,UNIT);
         I = 1;
         IF SUBSTR (CHAR_DCB, 1, 1) ~= '0' THEN I = 2;
         IF SUBSTR (CHAR_DCB, 0, 1) ~= '0' THEN I = 3;
         CALL INSERT(UNIT_NAME.NAME,0,2 + I,'F$',SUBSTR(CHAR_DCB, 3-I, I));
         UNIT_NAME.I = 2 + I;
         CALL M$GETDCB (FPT_GETDCB) ALTRET (BUM_DCB);
         DCBNUMBER (UNIT) = LDCBNUM;
         LAST_DCB = LDCBNUM;
         END;
      IF ADDR (PDCBNUM) ~= ADDR (NIL) THEN PDCBNUM = LDCBNUM;
      RETURN;
 
BUM_DCB:
   CALL ALTRET_ABORT;
END GET_DCB;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/******************************
*  HANDLER_ABORT               *
*******************************/
HANDLER_ABORT: PROC;
 
/*F*  NAME:       HANDLER_ABORT
      PURPOSE:    Called by library routines in case of an unexpected
                  altreturn from a monitor service call.  If the
                  user has specified a error handler (via a call to
                  IOERRHAN) that routine will be given control.
                  Otherwise, M$ERRMSG is called to print the system
                  error message and M$XXX is called to abort the
                  program.
      CALL:       CALL HANDLER_ABORT;
 
      ENTRY:      ALTRET_ABORT
      PURPOSE:    User callable to report unexpected altreturn from
                  a monitor service call.  Calls M$ERRMSG and then
                  M$XXX.
 
      ENTRY:      IO$ABORT
      PURPOSE:    Same purpose as ALTRET_ABORT except that it may
                  be called from a FORTRAN program.
*/
%INCLUDE CP_6;
%B$TCB;
%B$EXCFR;
%B$ALT;
DCL   BUFFER                           CHAR (120);
DCL   B$TCB$                           PTR SYMREF;
DCL   M$DO                             DCB;
%FPT_ERRMSG (FPTN=FPT_ERRMSG_CONSTANT, STCLASS=CONSTANT, OUTDCB1 = M$DO, TYC=YES);
%FPT_ERRMSG (STCLASS=AUTO);
DCL   LAST_DCB                         SBIN WORD EXTROOT;
DCL   ABORT_ROUTINE                    EPTR EXTROOT INIT (ENTADDR (NIL));
 
   IF ABORT_ROUTINE ~= ENTADDR (NIL) THEN CALL ABORT_ROUTINE;
 
/*************************
*  ALTRET_ABORT          *
**************************/
ALTRET_ABORT: ENTRY;
/*************************
*  IO$ABORT              *
**************************/
IO$ABORT: ENTRY;
 
   /* Initialize the ERRMSG FPT */
 
   FPT_ERRMSG = FPT_ERRMSG_CONSTANT;
   FPT_ERRMSG.V_ = VECTOR (FPT_ERRMSG.V);
 
   FPT_ERRMSG.BUF_ = VECTOR (BUFFER);
   FPT_ERRMSG.CODE_ = VECTOR (B$TCB$ -> B$TCB.ALT$ -> B$EXCFR.ERR);
   FPT_ERRMSG.V.DCB# = B$TCB$ -> B$TCB.ALT$ -> B$ALT.DCB#;
   CALL M$ERRMSG (FPT_ERRMSG);
   CALL M$XXX;
END HANDLER_ABORT;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/*********************
*  ALTRET_ERROR      *
**********************/
ALTRET_ERROR: PROC (ERR_CODE);
 
/*F*  NAME:       ALTRET_ERROR
      PURPOSE:    Returns error code of last altreturn from a monitor
                  service call.  This info comes from altret frame
                  of the TCB.
      CALL:       CALL ALTRET_ERROR (ERR_CODE);
      OUTPUT:     ERR_CODE SBIN WORD;  -error code of last altret
*/
 
%INCLUDE CP_6;
%LIST;
%B$TCB;
%B$EXCFR;
DCL ERR_CODE            SBIN WORD;
DCL B$TCB$              PTR SYMREF;
 
    ERR_CODE = B$TCB$ -> B$TCB.ALT$ -> B$EXCFR.ERR.ERR#;
END ALTRET_ERROR;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
 
/*****************
*  OPENFSFA      *
******************/
OPENFSFA: PROC (UNIT, FPT, BBUF, BBUFSIZE);
 
/*F*  NAME:       OPENFSFA
      PURPOSE:    Opens a unit in FSFA mode to write a scratch file.
      INPUT:      UNIT SBIN WORD;   -unit to open; must be in range
                                     1 to 999.
                  FPT (0:20) SBIN WORD DALIGNED; -FPT for use by
                           FSFA routines.  This is just a piece of
                           memory that the user must not store into
                           and which must be passed to all the FSFA
                           routines.
                  BBUF (0:?) SBIN WORD; -buffer space for FSFA.
                  BBUFSIZE SBIN WORD;   -size of buffer space BBUF.
                                    Must be a multiple of 1024 words.
 
*/
 
   %INCLUDE CP_6;
   %INCLUDE XS_MACRO_C;
   %INCLUDE TIDY_C61;
 
   DCL UNIT                   SBIN WORD;
   DCL BBUF (0:1)             SBIN WORD;
   DCL BBUFSIZE               SBIN WORD;
   DCL GET_DCB                ENTRY (2);
   DCL XSA$OPEN               ENTRY (2) ALTRET;
 
   %FPT_OPEN (ACS=SEQUEN, ASN=FILE, DISP=SCRATCH, FUN=CREATE,
      ORG=CONSEC, COMP=NO, SHARE=NONE, IXTNSIZE=16, XTNSIZE=8,
      FPTN=FPT_OPEN_CONSTANT, STCLASS=CONSTANT);
   %FPT_OPEN (STCLASS=" ");
   %XSA_PARAM (FPTN=FPT, STCLASS=" ");
   %XSA_PARAM (FPTN=FPT_CONSTANT, STCLASS=CONSTANT);
 
   /* Initialize the OPEN FPT */
   FPT_OPEN = FPT_OPEN_CONSTANT;
   FPT_OPEN.V_ = VECTOR (FPT_OPEN.V);
 
   /* Initialize the FPT */
 
   FPT = FPT_CONSTANT;
 
   /* Initialize DCB number in FPT_OPEN */
 
   CALL GET_DCB (UNIT, LAST_DCB);
   FPT_OPEN.V.DCB# = LAST_DCB;
 
   /* Initialize buffer vectors */
 
   FPT.BBUF_.BUF$ = ADDR (BBUF);
   FPT.BBUF_.BOUND = (BBUFSIZE * 4) - 1;
   FPT.KBUF_ = VECTOR (NIL);
 
   CALL XSA$OPEN (FPT_OPEN, FPT) ALTRET (NOGO);
   RETURN;
 
NOGO:
   CALL HANDLER_ABORT;
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
 
/***********************
*  CLOSFSFA            *
************************/
CLOSFSFA: PROC (FPT);
 
/*F*  NAME:       CLOSFSFA
      PURPOSE:    Closes unit that is currently open in FSFA mode.
      CALL:       CALL CLOSFSFA (FPT);
      INPUT:      FPT (0:20) SBIN WORD DALIGNED;   -FPT
*/
 
   %INCLUDE CP_6;
   %INCLUDE XS_MACRO_C;
   %INCLUDE TIDY_C61;
 
   DCL XSA$CLOSE              ENTRY (2) ALTRET;
 
   %FPT_CLOSE (FPTN=FPT_CLOSE_CONSTANT, STCLASS=" ");
   %FPT_CLOSE;
   %XSA_PARAM (FPTN=FPT, STCLASS=" ");
 
   /* Initialize the CLOSE FPT */
   FPT_CLOSE = FPT_CLOSE_CONSTANT;
   FPT_CLOSE.V_ = VECTOR (FPT_CLOSE.V);
 
   /* Initialize DCB number in FPT_CLOSE */
 
   FPT_CLOSE.V.DCB# = FPT.DCB#;
 
   CALL XSA$CLOSE (FPT_CLOSE, FPT) ALTRET (NOGO);
   RETURN;
 
NOGO:
   CALL HANDLER_ABORT;
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
 
/********************
*  READFSFA         *
*********************/
READFSFA: PROC (FPT, BUFFER, BUFLEN, BUF$SIZE, IOERROR);
 
/*F*  NAME:       READFSFA
      PURPOSE:    Reads a record from a unit open in FSFA mode.
      CALL:       CALL READFSFA (FPT, BUFFER, BUFLEN, BUF$SIZE, IOERROR);
      INPUT:      FPT (0:20) SBIN WORD;  -FPT for the unit to read from
                  BUF$SIZE SBIN WORD;    -size of buffer to read into
      OUTPUT:     BUFFER CHAR(BUF$SIZE); -buffer to read into
                  BUFLEN SBIN WORD;      -length of record read (bytes)
                  IOERROR SBIN WORD;     -error code, 0 if no error.
                                          only error code that will
                                          be returned is end of file.
*/
 
   %INCLUDE CP_6;
   %INCLUDE XS_MACRO_C;
   %INCLUDE B_ERRORS_C;
   %INCLUDE TIDY_C61;
 
   DCL BUFFER                 CHAR (BUF$SIZE);
   DCL BUFLEN                 SBIN WORD;
   DCL BUF$SIZE               SBIN WORD;
   DCL IOERROR                SBIN WORD;
   DCL XSA$READ               ENTRY (2) ALTRET;
 
   %FPT_READ;
   %XSA_PARAM (FPTN=FPT, STCLASS=" ");
 
   FPT_READ.V.DCB# = FPT.DCB#;
   FPT_READ.BUF_ = VECTOR (BUFFER);
   CALL XSA$READ (FPT_READ, FPT) ALTRET (NOGO);
   BUFLEN = FPT.ARS#;
   IOERROR = 0;
   RETURN;
 
NOGO:
   IOERROR = FPT.ERR.CODE;
   IF IOERROR = %(E$EOF) THEN RETURN;
   CALL HANDLER_ABORT;
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
 
/****************
*  WRITFSFA     *
*****************/
WRITFSFA: PROC (FPT, BUFFER, BUFLEN);
 
/*F*  NAME:       WRITFSFA
      PURPOSE:    Write a record to a unit open in FSFA mode.
      CALL:       CALL WRITFSFA (FPT, BUFFER, BUFLEN);
      INPUT:      FPT (0:20) SBIN WORD DALIGNED; -FPT of unit
                  BUFFER CHAR(BUFLEN);    -record to write
                  BUFLEN SBIN WORD;       -length of record (bytes)
*/
 
   %INCLUDE CP_6;
   %INCLUDE XS_MACRO_C;
   %INCLUDE B_ERRORS_C;
   %INCLUDE TIDY_C61;
 
   DCL BUFFER                 CHAR (BUFLEN);
   DCL BUFLEN                 SBIN WORD;
   DCL XSA$WRITE              ENTRY (2) ALTRET;
 
   %FPT_WRITE;
   %XSA_PARAM (FPTN=FPT, STCLASS=" ");
 
   FPT_WRITE.V.DCB# = FPT.DCB#;
   IF BUFLEN = 0 THEN DO;
      FPT_WRITE.BUF_.BUF$ = ADDR (NIL);
      FPT_WRITE.BUF_.BOUND = 0;
      END;
   ELSE
      FPT_WRITE.BUF_ = VECTOR (BUFFER);
   CALL XSA$WRITE (FPT_WRITE, FPT) ALTRET (NOGO);
   RETURN;
 
NOGO:
   CALL HANDLER_ABORT;
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
 
/*****************
*  REWFSFA       *
******************/
REWFSFA: PROC (FPT);
 
/*F*  NAME:       REWFSFA
      PURPOSE:    Rewind a unit that is open in FSFA mode.
      CALL:       CALL REWFSFA (FPT);
      INPUT:      FPT (0:20) SBIN WORD DALIGNED; -FPT of unit
*/
 
   %INCLUDE CP_6;
   %INCLUDE XS_MACRO_C;
   %INCLUDE TIDY_C61;
 
   DCL XSA$PFIL               ENTRY (2) ALTRET;
 
   %FPT_PFIL (FPTN=FPT_PFIL_CONSTANT,STCLASS=CONSTANT,BOF=YES);
   %FPT_PFIL (STCLASS=" ");
   %XSA_PARAM (FPTN=FPT, STCLASS=" ");
 
   /* Initialize the PFIL FPT */
   FPT_PFIL = FPT_PFIL_CONSTANT;
   FPT_PFIL.V_ = VECTOR (FPT_PFIL.V);
   FPT_PFIL.V.DCB# = FPT.DCB#;
 
   CALL XSA$PFIL (FPT_PFIL, FPT) ALTRET (NOGO);
   RETURN;
 
NOGO:
   CALL HANDLER_ABORT;
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
 
/*****************
*  OP2FSFA      *
******************/
OP2FSFA: PROC (FPT, BBUF, BBUFSIZE);
 
/*F*  NAME:       OP2FSFA
      PURPOSE:    Open M$SI in FSFA mode.
      CALL:       CALL OP2FSFA (FPT, BBUF, BBUFSIZE);
      INPUT:      FPT (0:20) SBIN WORD DALIGNED; -FPT for unit
                  BBUF (0:?) SBIN WORD;   -buffer space
                  BBUFSIZE   SBIN WORD;   -size of buffer, must be
                        a multiple of 1024 words.
*/
 
   %INCLUDE CP_6;
   %INCLUDE XS_MACRO_C;
   %INCLUDE TIDY_C61;
 
   DCL BBUF (0:1)             SBIN WORD;
   DCL BBUFSIZE               SBIN WORD;
   DCL KBUF (0:1023)          SBIN WORD STATIC;
   DCL M$SI                   DCB;
   DCL XSA$OPEN               ENTRY (2) ALTRET;
 
   %FPT_OPEN (FPTN=FPT_OPEN_CONSTANT ,STCLASS=CONSTANT, ACS=SEQUEN,
      COMP=NO, SHARE=NONE, FUN=IN, DCB=M$SI);
   %FPT_OPEN (STCLASS=" ");
   %XSA_PARAM (FPTN=FPT, STCLASS=" ");
   %XSA_PARAM (FPTN=FPT_CONSTANT, STCLASS=CONSTANT);
 
   /* Initialize the OPEN FPT */
 
   FPT_OPEN = FPT_OPEN_CONSTANT;
   FPT_OPEN.V_ = VECTOR (FPT_OPEN.V);
 
   /* Initialize the FPT */
 
   FPT = FPT_CONSTANT;
 
   /* Initialize buffer vectors */
 
   FPT.BBUF_.BUF$ = ADDR (BBUF);
   FPT.BBUF_.BOUND = (BBUFSIZE * 4) - 1;
   FPT.KBUF_ = VECTOR (KBUF);
 
   CALL XSA$OPEN (FPT_OPEN, FPT) ALTRET (NOGO);
   RETURN;
 
NOGO:
   CALL HANDLER_ABORT;
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
 
/********************
*  EDITFSFA         *
*********************/
EDITFSFA: PROC (FPT, BUFFER, BUFLEN, BUF$SIZE, RECORD, IOERROR);
 
/*F*  NAME:       EDITFSFA
      PURPOSE:    Reads a record from an EDIT file open in FSFA mode.
      CALL:       CALL EDITFSFA (FPT, BUFFER, BUFLEN, BUF$SIZE,
                        RECORD, IOERROR);
      INPUT:      FPT (0:20) SBIN WORD;  -FPT for the unit to read from
                  BUF$SIZE SBIN WORD;    -size of buffer to read into
      OUTPUT:     BUFFER CHAR(BUF$SIZE); -buffer to read into
                  BUFLEN SBIN WORD;      -length of record read (bytes)
                  RECORD SBIN WORD;      -edit key if the record read
                                          had a 3 byte key, 0 otherwise.
                  IOERROR SBIN WORD;     -error code, 0 if no error.
                                          only error code that will
                                          be returned is end of file.
*/
 
   %INCLUDE CP_6;
   %INCLUDE XS_MACRO_C;
   %INCLUDE B_ERRORS_C;
   %INCLUDE TIDY_C61;
 
   DCL BUFFER                 CHAR (BUF$SIZE);
   DCL BUFLEN                 SBIN WORD;
   DCL BUF$SIZE               SBIN WORD;
   DCL IOERROR                SBIN WORD;
   DCL RECORD                 SBIN WORD;
   DCL 1 KEYBUF               UNAL,
         2 SIZE               UBIN BYTE UNAL,
         2 KEY                CHAR (255) UNAL;
   DCL 1 EDITKEY REDEF KEYBUF UNAL,
         2 SIZE               CHAR (1) UNAL,
         2 KEY                UBIN (27) UNAL,
         2 *                  CHAR (252) UNAL;
   DCL XSA$READ               ENTRY (2) ALTRET;
 
   %FPT_READ (KEYR=YES);
   %XSA_PARAM (FPTN=FPT, STCLASS=" ");
 
   FPT_READ.V.DCB# = FPT.DCB#;
   FPT_READ.BUF_ = VECTOR (BUFFER);
   FPT_READ.KEY_ = VECTOR (KEYBUF);
   CALL XSA$READ (FPT_READ, FPT) ALTRET (NOGO);
   BUFLEN = FPT.ARS#;
   IF KEYBUF.SIZE = 3 THEN
      RECORD = EDITKEY.KEY;
   ELSE
      RECORD = 0;
   IOERROR = 0;
   RETURN;
 
NOGO:
   IOERROR = FPT.ERR.CODE;
   IF IOERROR = %(E$EOF) THEN RETURN;
   CALL HANDLER_ABORT;
END;
     %EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/*********************
 *                   *
 *      ERRCLOSE     *
 *                   *
 *********************/
 
ERRCLOSE: PROC;
 
     %INCLUDE CP_6;
 
     DCL  M$SI      DCB;
     DCL  F$2       DCB;
 
 
     %FPT_CLOSE  (FPTN=CLOSE_SI,DCB=M$SI,DISP=SAVE);
 
     %FPT_CLOSE  (FPTN=CLOSE_2,DCB=F$2,DISP=RELEASE);
 
     CALL M$CLOSE(CLOSE_2);
     CALL M$CLOSE(CLOSE_SI);
 
     CALL M$XXX;
 
     END ERRCLOSE;
 
     %EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
GETTIME : PROC(YR);
 
     DCL  YR        CHAR(4);
     DCL  YR1       CHAR(2);
     DCL  YR2       CHAR(2);
     DCL  BUFF      CHAR(10)  STATIC;
 
     %INCLUDE CP_6;
 
     %FPT_TIME  (FPTN=MY_TIME,DATE=BUFF,STCLASS="STATIC");
 
     CALL M$TIME(MY_TIME);
 
     YR2 = SUBSTR(BUFF,8,2);
     IF (YR2 < '78') THEN
         YR1 = '20';
     ELSE
         YR1 = '19';
     CALL CONCAT(YR,YR1,YR2);
     RETURN;
     END  GETTIME;
