/*M*  utility:c  -- has all conversion type functions, etc. */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
 
/*F*    NAME: MODEST_SIc07    (utility:c)
        PURPOSE: central location for all utility type functions
 
        ORIGINAL AUTHOR:  Arthur Tai, SDO, Phoenix (BULL HN)
        ENHANCEMENTS:  Jordan Boucher, LADC
        DATE:  August 7, 1989
      UPDATES:  JTB 9/1/89
*/
 
/*
**********************************************************************
*/
 
 
 
 
/* Convert ASCII number to hex number */
 
int ascii_to_dig(byte1,byte2)
char byte1, byte2;
{
  int count, hex_num, dig;
  char nibble1;
 
  nibble1 = byte1;
  for (count = 2; count > 0 ; count--)  {
    switch (nibble1)   {
      case '0':
        hex_num = 0;
        break;
      case '1':
        hex_num = 1;
        break;
      case '2':
        hex_num = 2;
        break;
      case '3':
        hex_num = 3;
        break;
      case '4':
        hex_num = 4;
        break;
      case '5':
        hex_num = 5;
        break;
      case '6':
        hex_num = 6;
        break;
      case '7':
        hex_num = 7;
        break;
      case '8':
        hex_num = 8;
        break;
      case '9':
        hex_num = 9;
        break;
      case 'a':
      case 'A':
        hex_num = 10;
        break;
      case 'b':
      case 'B':
        hex_num = 11;
        break;
      case 'c':
      case 'C':
        hex_num = 12;
        break;
      case 'd':
      case 'D':
        hex_num = 13;
        break;
      case 'e':
      case 'E':
        hex_num = 14;
        break;
      case 'f':
      case 'F':
        hex_num = 15;
        break;
    }  /*end switch*/
    if (count == 2)   {
      dig = ((hex_num << 4) & 0x00f0);
      nibble1 = byte2;
    }
  }  /*end for loop*/
return (dig = (hex_num + dig));
}   /*end ascii_to_dig()*/
 
/*
----------------------------------------------------------------------
*/
 
/* Convert ASCII number to decimal number */
 
int ascii_to_decimal(byte1,byte2)
char byte1, byte2;
{
 
  int decimal_num, upper, lower;
 
  decimal_num = ascii_to_dig(byte1,byte2);
  upper = decimal_num & 0x00f0;
  lower = decimal_num & 0x000f;
  if ((decimal_num <= 0x85) && ((byte1 <= '9') && (byte2 <= '9')))  {
    for (decimal_num=0;upper > 0;upper = upper - 0x10)
      decimal_num = decimal_num + 10;
    return (decimal_num = (decimal_num + lower));
  }  /*end for*/
 
  else if (((byte1 == 'F') || (byte1 == 'f')) && (byte1 == byte2))
    return (87);
  else
    return (86);
}   /*end ascii_to_decimal()*/
 
/*
----------------------------------------------------------------------
*/
 
dec_addr(nibble1,nibble2,nibble3,nibble4)
char nibble1,nibble2,nibble3,nibble4;
{
  int up, lo;
 
  up = ascii_to_dig(nibble1,nibble2);
  lo = ascii_to_dig(nibble3,nibble4);
  up = (up << 8) + (lo & 0x00ff);
  printf ("  %d",up);
}
 
/*
----------------------------------------------------------------------
*/
 
 
/* The parameter length could be larger than 9 bytes.  */
/* The length = 10 bytes and followed by one or two    */
/* 80h or 00h data.                                    */
 
int check_skip_octet(status,index,position)
char status[];
int index, position;
{
  char nibble1, nibble2, nibble3, nibble4, nibble5, nibble6;
 
  nibble1 = status [position+10];
  nibble2 = status [position+11];
  nibble3 = status [position+12];
  nibble4 = status [position+13];
  nibble5 = status [position+14];
  nibble6 = status [position+15];
 
  if ( position + 12 >= index )
    return (0);
  else if ( position + 12 < index ) {
    if (((nibble1 == '8') && (nibble2 == '0')) ||
        ((nibble1 == '0') && (nibble2 == '0')  && (nibble3 == '0') && (nibble4 == '9')))
      return (0);
    else
      return (-1);
  }
}   /*end check_skip_octet ()*/
 
/*
----------------------------------------------------------------------
*/
 
check_end_80 (index,position,count,ext_status)
int index, position, count;
char ext_status[];
{
  char nibble1, nibble2;
 
  if ( ( position + 2 <= index ) && ( count != 80 ))  {
    nibble1 = ext_status[position++];
    nibble2 = ext_status[position++];
    if (( nibble1 == '8') && ( nibble2 == '0'))  {
      if (position + 2 <= index)  {
        nibble1 = ext_status[position++];
        nibble2 = ext_status[position++];
 
        if (( nibble1 != '8') || ( nibble2 != '0'))
          position = position - 2;
      }
    }
  }
  else position = position - 2;
return (position);
}  /*end check_end_80 ()*/
