VERSION E05

CALF.D00   GHH$HARDWARE - Issue special hardware instructions                   TUE JUL 29 '97 21:34 Page:2
                                     1  *M* GHH$HARDWARE - Issue strange and wonderful hardware instructions.
                                     2  *T***********************************************************
                                     3  *T*                                                         *
                                     4  *T* Copyright (c) Bull HN Information Systems Inc., 1997    *
                                     5  *T*                                                         *
                                     6  *T***********************************************************
                                     7  *P*     NAME:  GHH$HARDWARE
                                     8  *,*     PURPOSE:  GHH$HARDWARE contains assembly language routines
                                     9  *,*               to issue hardware instructions such as IO, IOLD and
                                    10  *,*               LEV, that cannot be generated by PL-6.
                                    11  *
                                    13         OUNAME  GHH$HARDWARE
                                    14  *
                                    15         ENTDEF  GHH$IO
                                    16         ENTDEF  GHH$IO_IN
                                    17         ENTDEF  GHH$IOLD
                                    18         ENTDEF  GHH$RTT
                                    19         ENTDEF  GHH$LEV
                                    20         ENTDEF  GHH$ASD
                                    21         ENTDEF  GHH$VLD
                                    22         ENTDEF  GHH$UNLOCK
                                    23         ENTDEF  GHH$LOCK
                                    24         ENTDEF  GHH$WDTN
                                    25         ENTDEF  GHH$WDTF
                                    26         ENTDEF  GHH$RTCN
                                    27         ENTDEF  GHH$RTCF
                                    28         ENTDEF  GHH$DISABLE
                                    29         ENTDEF  GHH$ENABLE
                                    30         ENTDEF  GHH$SETASDT_ASD
                                    31        ENTREF   (SCREECH,OPTIONAL)
                                    32  *
                                    33         SYMREF  (G$TSTACKM$,OPTIONAL)
                                    34         SYMREF  (GHH_SCODE,OPTIONAL)
                                    35         SYMREF  (GH_LEV_SUS,OPTIONAL)
                                    36         SYMREF  (GH_LEV_INHIBIT,OPTIONAL)
                                    37         SYMREF  (G_DIS,OPTIONAL)
CALF.D00   GHH$HARDWARE - Issue special hardware instructions                   TUE JUL 29 '97 21:34 Page:3
                                    38  *
         000000(0)                  39  GHH$HARDWARE SECT PROC
                                    40  *

CALF.D00   GHH$IO - Issue IO instruction                                        TUE JUL 29 '97 21:34 Page:4
                                    42  *
                                    43  *F*    NAME:  GHH$IO
                                    44  *,*    PURPOSE:  Issue IO instructions.
                                    45  *,*    CALL:   CALL GHH$IO(GH_IO) ALTRET(io-nak);
                                    46  *,*    DESCRIPTION:
                                    47  *,*         GHH$IO is called from PL-6 to issue IO instructions.  The
                                    48  *,*    parameter to GHH$IO is generated by the GH_IO macro.  The
                                    49  *,*    channel/function and LCTADR/LCTDAT are loaded into R4 and R5
                                    50  *,*    respectivly and the IO instruction is issued using those
                                    51  *,*    registers.  The alternate return is taken if the IO
                                    52  *,*    instruction is NAKed.
                                    53  *
         00000000                   54  CHN    EQU     0
         00000001                   55  LCT    EQU     1
                                    56  *
 00000   9C83                       57  GHH$IO LDB,B1  ,B3
 00001   C841 0000                  58         LDR,R4  CHN,B1
 00003   D841 0001                  59         LDR,R5  LCT,B1
 00005   8055 0054                  60         IO      (R5),(R4)
 00007   0783                       61         BIOF    ALTRET,SPREL
 00008   83C6 0001                  62         JMP     1,B6
                                    63  *
 0000A   B806                       64  ALTRET LDR,R3  ,B6
 0000B   83B6                       65         JMP     ,B6,R3
                                    66  *

CALF.D00   GHH$IO_IN - Issue IO to input LCT byte                               TUE JUL 29 '97 21:34 Page:5
                                    68  *
                                    69  *F*    NAME:  GHH$IO_IN
                                    70  *,*    PURPOSE:  Issue IO instruction to input LCT byte.
                                    71  *,*    CALL:   CALL GHH$IO_IN(GH_IO) ALTRET(io-nak);
                                    72  *,*    DESCRIPTION:
                                    73  *,*         GHH$IO_IN is the same as GHH$IO except the value in R5
                                    74  *,*    after the IO instruction is returned in param if the IO is
                                    75  *,*    ACKed.
                                    76  *
 0000C   9C83                       77  GHH$IO_IN LDB,B1  ,B3
 0000D   C841 0000                  78         LDR,R4  CHN,B1
 0000F   D841 0001                  79         LDR,R5  LCT,B1
 00011   8055 0054                  80         IO      (R5),(R4)
 00013   07F7                       81         BIOF    ALTRET,SPREL
 00014   DF41 0001                  82         STR,R5  LCT,B1
 00016   83C6 0001                  83         JMP     1,B6
                                    84  *

CALF.D00   GHH$IOLD - Issue IOLD instruction                                    TUE JUL 29 '97 21:34 Page:6
                                    86  *
                                    87  *F*    NAME:  GHH$IOLD
                                    88  *,*    PURPOSE:  Issue IOLD instructions.
                                    89  *,*    CALL:  CALL GHH$IOLD(GH_IOLD) ALTRET(io-nak);
                                    90  *,*    DESCRIPTION:
                                    91  *,*         The paramter is generated with the GH_IOLD macro and
                                    92  *,*    contains the values necessary to issue the IOLD instruction.
                                    93  *,*    The buffer address and byte offset are loaded into B2 and
                                    94  *,*    R2 respectivly.  The channel address and function are loaded
                                    95  *,*    into R4 and the range is loaded into R5.  The altreturn is
                                    96  *,*    taken if the IOLD instruction is NAKed.
                                    97  *
         00000001                   98  BUF$   EQU     1
         00000003                   99  BYTX   EQU     3
         00000004                  100  RANGE  EQU     4
                                   101  *
 00018   9C83                      102  GHH$IOLD LDB,B1  ,B3
 00019   C841 0000                 103         LDR,R4  CHN,B1
 0001B   ACC1 0001                 104         LDB,B2  BUF$,B1
 0001D   B841 0003                 105         LDR,R3  BYTX,B1
 0001F   D841 0004                 106         LDR,R5  RANGE,B1
 00021   81B2 0054 0055            107         IOLD    (,B2,R3),(R4),(R5)
 00024   07E6                      108         BIOF    ALTRET,SPREL
 00025   83C6 0001                 109         JMP     1,B6
                                   110  *

CALF.D00   GHH$RTT - Execute RTT instruction                                    TUE JUL 29 '97 21:34 Page:7
                                   112  *
                                   113  *F*    NAME:  GHH$RTT
                                   114  *,*    PURPOSE:  Execute RTT instruction.
                                   115  *,*    CALL:  CALL GHH$RTT;
                                   116  *,*    DESCRIPTION:
                                   117  *,*         Executes RTT instruction which will cause execution to
                                   118  *,*    resume at the address pointed to by the current TSA.  Does
                                   119  *,*    not return.
                                   120  *
 00027   0003                      121  GHH$RTT RTT
                                   122  *
                                   123  *      You can't go back, no you can't go back
                                   124  *      That's rule number one.
                                   125  *

CALF.D00   GHH$LEV - Issue LEV instruction                                      TUE JUL 29 '97 21:34 Page:8
                                   127  *
                                   128  *F*    NAME:  GHH$LEV
                                   129  *,*    PURPOSE:  Issue LEV instruction.
                                   130  *,*    CALL:   CALL GHH$LEV(GH_LEV);
                                   131  *,*    DESCRIPTION:
                                   132  *,*         GHH$LEV will issue a LEV instruction of the form
                                   133  *,*    specified by the GH_LEV parameter.  GHH$LEV will return
                                   134  *,*    eventually.
                                   135  *
 00028   9CC3 0000                 136  GHH$LEV LDB,B1 0,B3
 0002A   9841 0000                 137         LDR,R1  0,B1
 0002C   0F7F                      138         NOP
 0002D   8E51                      139         LEV     R1
 0002E   83C6 0001                 140         JMP     1,B6
                                   141  *

CALF.D00   GHH$ASD - Issue ASD instruction                                      TUE JUL 29 '97 21:34 Page:9
                                   143  *
                                   144  *P*    NAME:  GHH$ASD
                                   145  *,*    PURPOSE:  Issue ASD instruction.
                                   146  *,*    CALL:  CALL GHH$ASD(seg$,segment-descriptor);
                                   147  *,*    DESCRIPTION:
                                   148  *,*         The seg$ parameter points to the beginning location of
                                   149  *,*    the segment to be activated (i.e. to activate segment 01.00
                                   150  *,*    seg$ should point to location X'10000'.)  The segment
                                   151  *,*    descriptor should be the appropriate entry in the updated
                                   152  *,*    MMU image.
                                   153  *
 00030   DC83                      154  GHH$ASD LDB,B5 ,B3             /* B5 <- ADDR(SEG$) */
 00031   DC85                      155         LDB,B5  ,B5             /* B5 <- SEG$ */
 00032   9CC3 0002                 156         LDB,B1  2,B3
 00034   8C81                      157         LDI     ,B1             /* R6,7 <- DESCRIPTOR */
 00035   000A                      158         ASD
 00036   83C6 0001                 159         JMP     1,B6
                                   160  *
                                   161  *
                                   162  *P*     NAME: GHH$SETASDT_ASD
                                   163  *,*     PURPOSE: Set up an ASDT and issue ASD instruction.
                                   164  *,*     CALL: CALL GHH$SETASDT_ASD(SEG$,PAGE,SIZE);
                                   165  *,*     DESCRIPTION:
                                   166  *,*        The SEG$ parameter is the same as on the call for GHH$ASD.
                                   167  *,*     PAGE is the physical page number of the segment.  SIZE is the
                                   168  *,*     size of the segment in pages minus one.
                                   169  *
 00038   DC83                      170  GHH$SETASDT_ASD LDB,B5 ,B3      /* B5 = ADDR(SEG$) */
 00039   9CC3 0002                 171               LDB,B1 2,B3        /* B1 = ADDR(PAGE) */
 0003B   9801                      172               LDR,R1 ,B1         /* R1 = PAGE */
 0003C   9CC3 0004                 173               LDB,B1 4,B3        /* B1 = ADDR(SIZE) */
 0003E   A801                      174               LDR,R2 ,B1         /* R2 = SIZE */
 0003F   8C85                      175               LDI ,B5            /* R6,R7 = SEG$ */
 00040   DC85                      176               LDB,B5 ,B5         /* B5 = SEG$ */
 00041   E970 0000                 177               CMR,R6 0,IMO       /* IF = 0, THEN SMALL SEG */
 00043   0984                      178               BNE BIGSEG,SPREL
CALF.D00   GHH$ASD - Issue ASD instruction                                      TUE JUL 29 '97 21:34 Page:10
 00044   704C                      179               SOR,R7 12          /* GET ASDT INDEX INTO R3 */
 00045   FF53                      180               STR,R7 R3
 00046   0F83                      181               B L1,SPREL
 00047   6E0F                      182  BIGSEG       ADV,R6 15          /* GET ASDT INDEX INTO R3 */
 00048   EF53                      183               STR,R6 R3
 00049   ACF8 FFFB                 184  L1           LDB,B2 -5,$IV      /* B2 = ISA.ASV$ */
 0004B   8CB2                      185               LDI ,B2,R3         /* R6,R7 = DESCRIPTOR */
 0004C   9AD6 7FFF                 186               SRM,R1,'7FFF'X R6  /* DESC.BASE = PAGE */
 0004E   F852                      187               LDR,R7 R2          /* DESC.SIZE = SIZE */
 0004F   F470 AC00                 188               OR,R7  'AC00'X,IMO /* ACCESS CONTROL */
 00051   8956 8000                 189               LBT,'8000'X R6     /* DESC.V = '1'B */
 00053   8D32                      190               SDI ,B2,R3         /* STUFF UPDATED DESC BACK INTO MAP *
                                      ::/
 00054   000A                      191               ASD                /* TURN IT ON */
 00055   83C6 0001                 192               JMP 1,B6           /* AND SPLIT */
                                   193  *

CALF.D00   GHH$HLT - Issue HLT instruction                                      TUE JUL 29 '97 21:34 Page:11
                                   195  *
                                   196  *P*    NAME:  GHH$HALT
                                   197  *,*    PURPOSE:  Issue HLT instruction.
                                   198  *,*    CALL:  CALL GHH$HLT
                                   199  *,*    DESCRIPTION:
                                   200  *,*         This routine allows us to halt the CPU when things are
                                   201  *,*    really wrong.  Never returns except by manual intervention.
                                   202  *
                                   203         ENTDEF  GHH$HLT
                                   204  *
 00057   0000                      205  GHH$HLT HLT
 00058   83C6 0001                 206         JMP     1,B6            /* Make us go here from the panel */
                                   207  *
                                   208  *P*    NAME: GHH$LOCK
                                   209  *,*    PURPOSE:  To lock a gate and LEV up to the inhibit level.
                                   210  *,*
                                   211  *,*    CALL:  CALL GHH$LOCK (gate);
                                   212  *,*    DESCRIPTION:
                                   213  *,*         This routine will wait if the gate is locked and then
                                   214  *,*    lock the gate and LEV to the inhibit level.
                                   215  *,*
         00005A(0)                 216  GHH$LOCK ALIGN
 0005A   9C83                      217         LDB,B1  ,B3
 0005B   8C51                      218         STS     R1              CPU and Level
 0005C   8E00 000000(3)s           219  A1     LEV     GH_LEV_INHIBIT
 0005F   8801 8000                 220         LBF,'8000'X ,B1        Check the gate
 00061   0507                      221         BBT     A2,SPREL        It's yours
 00062   8E00 000000(2)s           222         LEV     GH_LEV_SUS      enable
 00065   8380 00005C(0)            223         JMP     A1              and try again
                                   224  *
 00068   EF81                      225  A2     STB,B6  ,B1             note address of locker
 00069   9F41 0002                 226         STR,R1  2,B1            CPU and level to gate
 0006B   8A80 000000(4)s           227         INC     G_DIS           count up inhibits
 0006E   83C6 0001                 228         JMP     1,B6
                                   229
                                   230  *
CALF.D00   GHH$HLT - Issue HLT instruction                                      TUE JUL 29 '97 21:34 Page:12
                                   231  *P*    NAME: GHH$UNLOCK
                                   232  *,*    PURPOSE:  To unlock a gate and do a suspend LEV.
                                   233  *,*
                                   234  *,*    CALL:  CALL GHH$UNLOCK (gate);
                                   235  *,*    DESCRIPTION:
                                   236  *,*         This routine will unlock the gate and then
                                   237  *,*    do a SUSPEND type LEV to leave the inhibit level.
                                   238  *,*
         000070(0)                 239  GHH$UNLOCK ALIGN
 00070   9C83                      240         LDB,B1  ,B3             gate
 00071   8281 8000                 241         LB,'8000'X ,B1           Check if locked
 00073   050D                      242         BBT     UNLSCR,SPREL
 00074   EF81                      243         STB,B6  ,B1             unlock it.
 00075   8901 8000                 244         LBT,'8000'X ,B1
 00077   8880 000000(4)s           245         DEC     G_DIS           decrement the inhibit counter
 0007A   0584                      246         BBF     A3,SPREL        don't un-inhibit
 0007B   8E00 000000(2)s           247         LEV     GH_LEV_SUS
 0007E   83C6 0001                 248  A3     JMP     1,B6
         000080(0)                 249  UNLSCR ALIGN
 00080   BB80 000000(1)s           250         LAB,B3   GHH_SCODE
 00083   DB86                      251         LAB,B5   ,B6
 00084   E380 000000(0)e           252         LNJ,B6   SCREECH
 00087   0001                      253         DATA     1
 00088   EB85                      254         LAB,B6   ,B5
 00089   0F80 000070(0)            255         B        GHH$UNLOCK
                                   256  *

CALF.D00   GHH$VLD - Issue VLD instruction                                      TUE JUL 29 '97 21:34 Page:13
                                   258  *
                                   259  *P*    NAME:      GHH$VLD
                                   260  *,*    PURPOSE:   To issue VLD instructions
                                   261  *,*    CALL:      CALL GHH$VLD(GH_VLD) ALTRET(invalid addr)
                                   262  *,*    DESCRIPTION:  The parameter is generated with the GH_VLD
                                   263  *,*                  macro.  The normal routine is only taken if the
                                   264  *,*                  user has both read and write access to the memor
                                      ::y.
                                   265  *
         00000000                  266  ADR$   EQU     0
         00000002                  267  RANG   EQU     2
         00000003                  268  RING   EQU     3
         00000004                  269  STATUS EQU     4
                                   270  *
 0008C   9C83                      271  GHH$VLD LDB,B1  ,B3
 0008D   DCC1 0000                 272         LDB,B5  ADR$,B1
 0008F   B841 0002                 273         LDR,R3  RANG,B1
 00091   D841 0003                 274         LDR,R5  RING,B1
 00093   500D                      275         SOL,R5  13
 00094   000B                      276         VLD
 00095   BF41 0004                 277         STR,R3  STATUS,B1
 00097   3D02                      278         CMV,R3  2
 00098   0980 00000A(0)            279         BNE     ALTRET
 0009B   83C6 0001                 280         JMP     1,B6
                                   281  *
                                   282  *P*   NAME:        GHH$WDTN
                                   283  *,*   PURPOSE:     To issue WDTN instructions.
                                   284  *,*   DESCRIPTION: Turns on the WDT.
                                   285  *
         00009D(0)                 286  GHH$WDTN ALIGN
 0009D   0006                      287         WDTN
 0009E   83C6 0001                 288         JMP     1,B6
                                   289  *P*   NAME:        GHH$WDTF
                                   290  *,*   PURPOSE:     To issue WDTF instructions.
                                   291  *,*   DESCRIPTION: Turns off the WDT.
                                   292  *
CALF.D00   GHH$VLD - Issue VLD instruction                                      TUE JUL 29 '97 21:34 Page:14
         0000A0(0)                 293  GHH$WDTF ALIGN
 000A0   0007                      294         WDTF
 000A1   83C6 0001                 295         JMP     1,B6
                                   296  *
                                   297  *
                                   298  *P*   NAME:        GHH$RTCN
                                   299  *,*   PURPOSE:     To issue RTCN instructions.
                                   300  *,*   DESCRIPTION: Turns on the RTC.
                                   301  *
         0000A3(0)                 302  GHH$RTCN ALIGN
 000A3   0004                      303         RTCN
 000A4   83C6 0001                 304         JMP     1,B6
                                   305  *P*   NAME:        GHH$RTCF
                                   306  *,*   PURPOSE:     To issue RTCF instructions.
                                   307  *,*   DESCRIPTION: Turns off the RTC.
                                   308  *
         0000A6(0)                 309  GHH$RTCF ALIGN
 000A6   0005                      310         RTCF
 000A7   83C6 0001                 311         JMP     1,B6
                                   312  *P*   NAME:        GHH$ENABLE
                                   313  *,*   PURPOSE:     To issue an enable-type LEV instruction.
                                   314  *,*   DESCRIPTION: Does a LEV '803F'X,IMO.
                                   315  *
         0000A9(0)                 316  GHH$ENABLE ALIGN
 000A9   8E70 803F                 317         LEV     '803F'X,IMO
 000AB   83C6 0001                 318         JMP     1,B6
                                   319  *P*   NAME:        GHH$DISABLE
                                   320  *,*   PURPOSE:     Disables to the (UBIN) parameter level and saves
                                   321  *,*                the previous execution level in its place.
                                   322  *,*   DESCRIPTION: The parameter word should be a plain level number.
                                   323  *,*                It will be unchanged if the current level is at or
                                   324  *,*                below it.
                                   325  *
         0000AD(0)                 326  GHH$DISABLE ALIGN
 000AD   BC83                      327         LDB,B3  ,B3
 000AE   9803                      328         LDR,R1  ,B3
CALF.D00   GHH$VLD - Issue VLD instruction                                      TUE JUL 29 '97 21:34 Page:15
 000AF   8C52                      329         STS     R2
 000B0   A570 003F                 330         AND,R2  '3F'X,IMO
 000B2   9952                      331         CMR,R1  R2
 000B3   0287                      332         BGE     DISABLE1,SPREL
 000B4   AF03                      333         STR,R2  ,B3
 000B5   9470 0080                 334         OR,R1   '80'X,IMO
 000B7   8E51                      335         LEV     R1
 000B8   83C6 0001                 336         JMP     1,B6            Patch this to save B6 for debugging.
         0000BA(0)                 337  DISABLE1 ALIGN
 000BA   83C6 0001                 338         JMP     1,B6
                                   339  *

CALF.D00   GHH$LVL - Determine current interrupt level                          TUE JUL 29 '97 21:34 Page:16
                                   341  *
                                   342  *F*    NAME:  GHH$LVL
                                   343  *,*    PURPOSE:  To determine the interrupt level at which the progra
                                      ::m
                                   344  *,*            is running.
                                   345  *,*    CALL:   CALL GHH$LVL (optional-parameter) ALTRETURN(label);
                                   346  *,*    DESCRIPTION:
                                   347  *,*         GHH$LVL determines the current interrupt level number fro
                                      ::m
                                   348  *,*    the S register.  If the caller specified a parameter it is set
                                   349  *,*    to that value.  If the value is not '3F'X the ALTRETURN is
                                   350  *,*    taken.
                                   351  *,*
                                   352  *
                                   353        ENTDEF   GHH$LVL
 000BC   8C52                      354  GHH$LVL STS     R2
 000BD   A570 003F                 355         AND,R2  '3F'X,IMO
 000BF   B284                      356         LLH,R3  ,B4
 000C0   3903                      357         BEZ,R3  NOARG,SPREL
 000C1   BC83                      358         LDB,B3  ,B3
 000C2   AF03                      359         STR,R2  ,B3
 000C3   2D3C                      360  NOARG  CMV,R2  '3C'X
 000C4   0376                      361         BG      DISABLE1,SPREL
 000C5   B806                      362         LDR,R3  ,B6
 000C6   83B6                      363         JMP     ,B6,R3
                                   364         END
      No Errors in this assembly.
