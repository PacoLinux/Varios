/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
CONSOLE_FPRG: PROC MAIN;
 
      DCL LM_BUFFER                    CHAR(255) STATIC SYMDEF;
 
      DCL WAIT_UNITS                   UBIN(16)  CONSTANT INIT(60);
 
      DCL M$LM                         DCB;
 
      DCL CONSOLE_FPRG_EVENT           ENTRY     ASYNC;
 
      %INCLUDE LCP_6;
      %INCLUDE CONSOLE_C61;
 
      %FPT_READ (FPTN=LM_READ,
                 BUF=LM_BUFFER,
                 WAIT=NO,
                 EVENT=%EVID_LM#,
                 STCLASS="STATIC SYMDEF",
                 DCB=M$LM);
 
      %FPT_EVENT (EVENT$=CONSOLE_FPRG_EVENT);
 
      %FPT_WAIT (UNITS=WAIT_UNITS);
 
      CALL M$EVENT (FPT_EVENT);
 
      LM_BUFFER = ' ';
      CALL M$READ (LM_READ);
 
      DO WHILE ('1'B);
         CALL M$WAIT (FPT_WAIT);
         END;
 
END CONSOLE_FPRG;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
CONSOLE_FPRG_EVENT: PROC ASYNC;
 
      DCL LOGON_BUFFER                 CHAR(255) STATIC;
      DCL LOGON                        CHAR(18)  STATIC;
      DCL TALKING                      BIT(1)    STATIC ALIGNED INIT('0'B);
      DCL ONE_SHOT                     BIT(1)    STATIC ALIGNED INIT('0'B);
 
      DCL 1 ERROR_BUFFER               STATIC,
            2 *                        CHAR(4)   INIT('ERR:'),
            2 BUF                      CHAR(251);
 
      DCL LM_BUFFER                    CHAR(255) SYMREF;
      DCL G$TCB$                       PTR       SYMREF;
 
      DCL M$LOGON                      DCB;
      DCL M$LM                         DCB;
 
%EJECT;
      %INCLUDE LCP_6;
      %INCLUDE CONSOLE_C61;
 
      %G$TCB;
      %G$NWIO;
 
      %VLP_ERRCODE;
 
      %FPT_OPEN (FPTN=LOGON_OPEN,
                 ORG=CONSEC,
                 RES='LG',
                 LOGON=LOGON,
                 DCB=M$LOGON);
 
      %FPT_READ (FPTN=LOGON_READ,
                 BUF=LOGON_BUFFER,
                 WAIT=NO,
                 EVENT=%EVID_LOGON#,
                 STCLASS="STATIC SYMDEF",
                 DCB=M$LOGON);
 
      %FPT_WRITE (FPTN=LOGON_WRITE,
                  DCB=M$LOGON);
 
      %FPT_READ (FPTN=LM_READ,
                 STCLASS=SYMREF);
 
      %FPT_WRITE (FPTN=LM_WRITE,
                  DCB=M$LM);
 
      %FPT_ERRMSG (CODE=VLP_ERRCODE,
                   INCLCODE=NO,
                   BUF="ERROR_BUFFER.BUF");
 
%EJECT;
      IF G$TCB$->G$TCB.STK$->G$NWIO.TRLR.ERR.ERR# ~= 0 THEN GOTO ERR_TRAP;
 
      IF G$TCB$->G$TCB.STK$->G$NWIO.TRLR.EVID = %EVID_LOGON# THEN
         DO;
            LM_WRITE.BUF_ = VECTOR(SUBSTR(LOGON_BUFFER,0,
                                          G$TCB$->G$TCB.STK$->G$NWIO.ARS));
            CALL M$WRITE (LM_WRITE) ALTRET (ERR_ALT);
            LOGON_BUFFER = ' ';
            CALL M$READ (LOGON_READ) ALTRET (ERR_ALT);
            END;
      ELSE
      IF G$TCB$->G$TCB.STK$->G$NWIO.TRLR.EVID = %EVID_LM# THEN
         IF NOT TALKING THEN
            DO;
               IF SUBSTR(LM_BUFFER,0,1) = '1' THEN /* ONE SHOT */
                  DO;
                     ONE_SHOT = '1'B;
                     LOGON_BUFFER = SUBSTR(LM_BUFFER,1);
                     END;
               ELSE
               IF SUBSTR(LM_BUFFER,0,1) = '3' THEN /* LOGON */
                  DO;
                     LOGON = SUBSTR(LM_BUFFER,1);
                     CALL M$OPEN (LOGON_OPEN) ALTRET (ERR_ALT);
                     IF ONE_SHOT THEN
                        DO;
                           LOGON_WRITE.BUF_ = VECTOR(LOGON_BUFFER);
                           CALL M$WRITE (LOGON_WRITE);
                           LM_WRITE.BUF_ = VECTOR(LM_BUFFER);
                           CALL M$WRITE (LM_WRITE) ALTRET (ERR_ALT);
                           CALL M$EXIT ALTRET (ERR_ALT);
                           END;
                     ELSE
                        CALL M$READ (LOGON_READ) ALTRET (ERR_ALT);
                     TALKING = '1'B;
                     END;
               ELSE
                  DO;
                     ERROR_BUFFER.BUF = 'Protocol Error';
                     GOTO GOT_ERRBUF;
                     END;
               LM_BUFFER = ' ';
               CALL M$READ (LM_READ) ALTRET (ERR_ALT);
               END;
         ELSE
            DO;
               LOGON_WRITE.BUF_ = VECTOR(SUBSTR(LM_BUFFER,0,G$TCB$->G$TCB.STK$->G$NWIO.ARS));
               CALL M$WRITE (LOGON_WRITE);
               LM_BUFFER = ' ';
               CALL M$READ (LM_READ) ALTRET (ERR_ALT);
               END;
      ELSE
         DO;
            ERROR_BUFFER.BUF = 'FPRG Event id error';
            GOTO GOT_ERRBUF;
            END;
 
      RETURN;
 
ERR_ALT:
      FPT_ERRMSG.V.SOURCE = %G_SOURCE_ALTRET#;
      CALL M$ERRMSG (FPT_ERRMSG);
      GOTO GOT_ERRBUF;
ERR_TRAP:
      FPT_ERRMSG.V.SOURCE = %G_SOURCE_TRAP#;
      CALL M$ERRMSG (FPT_ERRMSG);
GOT_ERRBUF:
      LM_WRITE.BUF_ = VECTOR(ERROR_BUFFER);
      CALL M$WRITE (LM_WRITE);
      CALL M$EXIT;
 
END CONSOLE_FPRG_EVENT;
