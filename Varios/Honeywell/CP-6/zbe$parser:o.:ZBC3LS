

CC.C03    File=zbe$parser:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=1  
        1         1             /* $Header: parser.c,v 1.4 87/03/10 11:37:38 ceriel Exp $ */
        2         2             /*
        3         3              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        4         4              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        5         5              */
        6         6
        7         7             #include <stdio:h>
        8         8             #include "types:h"
        9         9             #include "debug:h"
       10        10             #include "alloc:h"
       11        11             #include "global:h"
       12        12             #include "lset:h"
       13        13             #include "aux:h"
       14        14             #include "em_spec:h"
       15        15             #include "em_mnem:h"
       16        16             #include "em_pseu:h"
       17        17
       18        18             struct class {
       19        19    1         byte  src_class;
       20        20    1         byte  res_class;
       21        21    1        };
       22        22
       23        23             typedef struct class *class_p;
       24        24
       25        25
       26        26             #define NOCLASS 0
       27        27             #define CLASS1  1
       28        28             #define CLASS2  2
       29        29             #define CLASS3  3
       30        30             #define CLASS4  4
       31        31             #define CLASS5  5
       32        32             #define CLASS6  6
       33        33             #define CLASS7  7
       34        34             #define CLASS8  8
       35        35             #define CLASS9  9
       36        36             #define CLASS10 10
CC.C03    File=zbe$parser:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=2  
       37        37             #define CLASS11 11
       38        38             #define CLASS12 12
       39        39
       40        40             #include "classdefs:h"
       41        41             /* The file classdefs.h contains the table classtab. It is
       42        42              * generated automatically from the file classdefs.src.
       43        43              */
       44        44
       45        45             STATIC bool classes(instr,src_out,res_out)
       46        46              int instr;
       47        47              int *src_out, *res_out;
       48        48             {
       49        49    1         /* Determine the classes of the given instruction */
       50        50    1
       51        51    1         class_p c;
       52        52    1
       53        53    1         if (instr < sp_fmnem || instr > sp_lmnem) return FALSE;
       54        54    1         c = &classtab[instr];
       55        55    1         if (c->src_class == NOCLASS) return FALSE;
       56        56    1         *src_out = c->src_class;
       57        57    1         *res_out = c->res_class;
       58        58    1         return TRUE;
       59        59    1        }
       60        60
       61        61
       62        62
       63        63             STATIC bool uses_arg(class)
       64        64              int class;
       65        65             {
       66        66    1         /* See if a member of the given class uses
       67        67    1          * an argument.
       68        68    1          */
       69        69    1
       70        70    1         switch(class) {
       71        71    2            case CLASS1:
       72        72    2            case CLASS2:
       73        73    2            case CLASS3:
CC.C03    File=zbe$parser:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=3  
       74        74    2            case CLASS4:
       75        75    2            case CLASS11:
       76        76    2            case CLASS12:
       77        77    2               return TRUE;
       78        78    2            default:
       79        79    2               return FALSE;
       80        80    2         }
       81        81    1         /* NOTREACHED */
       82        82    1        }
       83        83
       84        84
       85        85
       86        86             STATIC bool uses_2args(class)
       87        87              int class;
       88        88             {
       89        89    1         /* See if a member of the given class uses
       90        90    1          * 2 arguments.
       91        91    1          */
       92        92    1
       93        93    1         return class == CLASS10;
       94        94    1        }
       95        95
       96        96
       97        97             STATIC bool parse_locs(l,c1_out,c2_out)
       98        98              line_p l;
       99        99              offset *c1_out, *c2_out;
      100       100             {
      101       101    1         if (INSTR(l) == op_loc && INSTR(PREV(l)) == op_loc) {
      102       102    2            *c1_out = off_set(l);
      103       103    2            *c2_out = off_set(PREV(l));
      104       104    2            return TRUE;
      105       105    2         }
      106       106    1         return FALSE;
      107       107    1        }
      108       108
      109       109
      110       110
CC.C03    File=zbe$parser:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=4  
      111       111             STATIC bool check_args(l,src_class,res_class,arg1_out,arg2_out)
      112       112              line_p l;
      113       113              int    src_class,res_class;
      114       114              offset *arg1_out, *arg2_out;
      115       115             {
      116       116    1         /* Several EM instructions have an argument
      117       117    1          * giving the size of the operand(s) of
      118       118    1          * the instruction. E.g. a 'adi 4' is a 4-byte
      119       119    1          * addition. The size may also be put on the
      120       120    1          * stack. In this case we give up our
      121       121    1          * efforts to recognize the parameter expression.
      122       122    1          * Some instructions (e.g. CIU) use 2 arguments
      123       123    1          * that are both on the stack. In this case we
      124       124    1          * check if both arguments are LOCs (the usual case),
      125       125    1          * else we give up.
      126       126    1          */
      127       127    1
      128       128    1         if (uses_2args(src_class) || uses_2args(res_class)) {
      129       129    2            return parse_locs(PREV(l),arg1_out,arg2_out);
      130       130    2         }
      131       131    1         if (uses_arg(src_class) || uses_arg(res_class)) {
      132       132    2            if (TYPE(l) == OPSHORT) {
      133       133    3               *arg1_out = (offset) SHORT(l);
      134       134    3               return TRUE;
      135       135    3            } else {
      136       136    3               if (TYPE(l) == OPOFFSET) {
      137       137    4                  *arg1_out = OFFSET(l);
      138       138    4               } else {
      139       139    4                  return FALSE;
      140       140    4               }
      141       141    3            }
      142       142    2         }
      143       143    1         return TRUE; /* no argument needed */
      144       144    1        }
      145       145
      146       146
      147       147
CC.C03    File=zbe$parser:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=5  
      148       148             STATIC offset nrbytes(class,arg1,arg2)
      149       149              int class;
      150       150              offset arg1,arg2;
      151       151             {
      152       152    1         /* Determine the number of bytes of the given
      153       153    1          * arguments and class.
      154       154    1          */
      155       155    1
      156       156    1         offset n;
      157       157    1
      158       158    1         switch(class) {
      159       159    2            case CLASS1:
      160       160    2               n = arg1;
      161       161    2               break;
      162       162    2            case CLASS2:
      163       163    2               n = 2 * arg1;
      164       164    2               break;
      165       165    2            case CLASS3:
      166       166    2               n = arg1 + ws;
      167       167    2               break;
      168       168    2            case CLASS4:
      169       169    2               n = arg1 + ps;
      170       170    2               break;
      171       171    2            case CLASS5:
      172       172    2               n = ws;
      173       173    2               break;
      174       174    2            case CLASS6:
      175       175    2               n = 2 * ws;
      176       176    2               break;
      177       177    2            case CLASS7:
      178       178    2               n = ps;
      179       179    2               break;
      180       180    2            case CLASS8:
      181       181    2               n = 2 * ps;
      182       182    2               break;
      183       183    2            case CLASS9:
      184       184    2               n = 0;
CC.C03    File=zbe$parser:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=6  
      185       185    2               break;
      186       186    2            case CLASS10:
      187       187    2               n = arg2 + 2*ws;
      188       188    2               break;
      189       189    2            case CLASS11:
      190       190    2               n = arg1 + 2*ps;
      191       191    2               break;
      192       192    2            case CLASS12:
      193       193    2               n = (arg1 < ws ? ws : arg1);
      194       194    2               break;
      195       195    2            default:
      196       196    2               assert(FALSE);
      197       197    2         }
      198       198    1         return n;
      199       199    1        }
      200       200
      201       201
      202       202
      203       203             STATIC attrib(l,expect_out,srcb_out,resb_out)
      204       204              line_p l;
      205       205              offset    *expect_out, *srcb_out, *resb_out;
      206       206             {
      207       207    1         /* Determine a number of attributes of an EM
      208       208    1          * instruction appearing in an expression.
      209       209    1          * If it is something we don't
      210       210    1          * expect in such expression (e.g. a store)
      211       211    1          * expect_out is set to FALSE. Else we
      212       212    1          * determine the number of bytes popped from
      213       213    1          * the stack by the instruction and the
      214       214    1          * number of bytes pushed on the stack as
      215       215    1          * result.
      216       216    1          */
      217       217    1
      218       218    1         int src_class,res_class;
      219       219    1         offset arg1, arg2;
      220       220    1
      221       221    1         if (l == (line_p) 0 || !classes(INSTR(l),&src_class,&res_class) ||
CC.C03    File=zbe$parser:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=7  
      222       222    1             !check_args(l,src_class,res_class,&arg1,&arg2)) {
      223       223    2            *expect_out = FALSE;
      224       224    2         } else {
      225       225    2            *expect_out = TRUE;
      226       226    2            *srcb_out = nrbytes(src_class,arg1,arg2);
      227       227    2            *resb_out = nrbytes(res_class,arg1,arg2);
      228       228    2         }
      229       229    1        }
      230       230
      231       231
      232       232
      233       233             bool parse(l,nbytes,l_out,level,action0)
      234       234              line_p l, *l_out;
      235       235              offset nbytes;
      236       236              int    level;
      237       237              int    (*action0) ();
      238       238             {
      239       239    1         /* This is a recursive descent parser for
      240       240    1          * EM expressions.
      241       241    1          * It tries to recognize EM code that loads exactly
      242       242    1          * 'nbytes' bytes on the stack.
      243       243    1          * 'l' is the last instruction of this code.
      244       244    1          * As EM is essentially postfix, this instruction
      245       245    1          * can be regarded as the root node of an expression
      246       246    1          * tree. The EM code is traversed from right to left,
      247       247    1          * i.e. top down. On success, TRUE is returned and
      248       248    1          * 'l_out' will point to the first instruction
      249       249    1          * of the recognized code. On toplevel, when an
      250       250    1          * expression has been recognized, the procedure-parameter
      251       251    1          * 'action0' is called, with parameters: the first and
      252       252    1          * last instruction of the expression and the number of
      253       253    1          * bytes recognized.
      254       254    1          */
      255       255    1
      256       256    1         offset more, expected, sourcebytes,resultbytes;
      257       257    1         line_p lnp;
      258       258    1
CC.C03    File=zbe$parser:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=8  
      259       259    1         more = nbytes; /* #bytes to be recognized */
      260       260    1         while (more > 0) {
      261       261    2            attrib(l,&expected,&sourcebytes,&resultbytes);
      262       262    2            /* Get the attributes of EM instruction 'l'.
      263       263    2             * 'expected' denotes if it is something we can use;
      264       264    2             * 'sourcebytes' and 'resultbytes' are the number of
      265       265    2             * bytes popped resp. pushed by the instruction
      266       266    2             * (e.g. 'adi 2' pops 4 bytes and pushes 2 bytes).
      267       267    2             */
      268       268    2            if (!expected || (more -= resultbytes) < 0) return FALSE;
      269       269    2            if (sourcebytes == 0) {
      270       270    3               /* a leaf of the expression tree */
      271       271    3               lnp = l;
      272       272    3            } else {
      273       273    3               if (!parse(PREV(l),sourcebytes,&lnp,level+1,action0)) {
      274       274    4                  return FALSE;
      275       275    4               }
      276       276    3            }
      277       277    2            if (level == 0) {
      278       278    3               /* at toplevel */
      279       279    3               (*action0) (lnp,l,resultbytes);
      280       280    3            }
      281       281    2            l = PREV(lnp);
      282       282    2         }
      283       283    1         /* Now we've recognized a number of expressions that
      284       284    1          * together push nbytes on the stack.
      285       285    1          */
      286       286    1         *l_out = lnp;
      287       287    1         return TRUE;
      288       288    1        }
      289       289
      290       290             /*i*
      291       291                   name: parse2
      292       292                   purpose: This routine parses the paramter expression in a
      293       293                   right-to-left order. The paramters are setup for a cp-6
      294       294                   calling sequence. Therefore, we are looking at the paramter
      295       295                   expressions that are between the stl and sdl instructions.
CC.C03    File=zbe$parser:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=9  
      296       296                   If the expressions are valid, we assume that the paramters
      297       297                   can be used for inlining.
      298       298                   See 'parse' for more detailed information.
      299       299             */
      300       300             bool parse2 (l,nbytes, l_out, level,action, first_l)
      301       301              line_p l,*l_out,first_l;
"zbe$parser:c.:ZBC3TSI", line 301: (warning) identifier "level" is not used
      302       302              offset nbytes;
      303       303              int level;
      304       304              int (*action) ();
      305       305             {
      306       306    1         line_p lll,ll,llll;
      307       307    1         int more,expected, sbytes, rbytes, bytes, abytes;
      308       308    1         int next_off, temp1;
      309       309    1         bool scan_first_param();
      310       310    1
      311       311    1              lll = (line_p) 0;
      312       312    1              more = nbytes;
      313       313    1              if (more <= 0 ) { *l_out = lll; return TRUE; }
      314       314    1              for (lll = l; lll != (line_p) 0; lll = PREV(lll)) {
      315       315    2                switch (INSTR(lll)) {
      316       316    3                  case op_stl:
      317       317    3                  case op_sdl:
      318       318    3                    if (SHORT(lll) == SHORT(first_l)) {
      319       319    4                      goto first_param; }
      320       320    3                    break;
      321       321    3                  case op_zrl:
      322       322    3                  case op_sti:
      323       323    3                    return FALSE;
      324       324    3                }
      325       325    2              }  /* end of the for loop. */
      326       326    1              if (lll == (line_p) 0) return FALSE;
      327       327    1        first_param: ;
      328       328    1              switch (INSTR(lll)) {
      329       329    2               case (op_stl):
      330       330    2                abytes = 4;
      331       331    2                more -= 4;
CC.C03    File=zbe$parser:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=10 
      332       332    2                break;
      333       333    2               case (op_sdl):
      334       334    2                abytes = 8;
      335       335    2                more -= 8;
      336       336    2                break;
      337       337    2              }
      338       338    1              llll = ll = lll;
      339       339    1              if(!scan_first_param(PREV(lll), &llll,&bytes)) return FALSE;
      340       340    1              (*action) (llll, PREV(lll), abytes);
      341       341    1              next_off = SHORT(lll) + abytes;
      342       342    1
      343       343    1              while (more > 0) {
      344       344    2        try_next: ;
"zbe$parser:c.:ZBC3TSI", line 344: (warning) label try_next is not used
      345       345    2               if (lll->l_next == (line_p) 0) return FALSE;
      346       346    2               for (l=lll->l_next; INSTR(l) != op_stl && INSTR(l) != op_sdl; l = l->l_
                               next) {
      347       347    3                if (l->l_next == (line_p) 0) {return FALSE;} }
      348       348    2               if (INSTR(l) == op_sdl) { temp1 = next_off%8; more += temp1;
      349       349    3                                   next_off -= temp1; }
      350       350    2
      351       351    2               if (SHORT(l) != next_off) return FALSE;
      352       352    2               switch (INSTR(l)) {
      353       353    3                case (op_stl):
      354       354    3                 abytes = 4;
      355       355    3                 more -= 4;
      356       356    3                 break;
      357       357    3                case (op_sdl):
      358       358    3                 abytes = 8;
      359       359    3                 more -= 8;
      360       360    3                 break;
      361       361    3               }
      362       362    2               next_off = SHORT(l) + abytes;
      363       363    2               while (INSTR(PREV(l)) == ps_mes) {
      364       364    3                 l = PREV(l); }
      365       365    2
      366       366    2               for (lll= PREV(l); INSTR(lll) != op_stl && INSTR(lll) != op_sdl; lll =
CC.C03    File=zbe$parser:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=11 
                               PREV(lll)) {
      367       367    3                 attrib (lll, &expected, &sbytes, &rbytes);
      368       368    3                 if (!expected) return FALSE;
      369       369    3                 while (INSTR(PREV(lll)) == ps_mes) {
      370       370    4                   lll = PREV(lll); }
      371       371    3               } /* end of the for loop. */
      372       372    2               if (PREV(l) == lll || SHORT(l) == SHORT(lll) || SHORT(lll) >= 0) return
                                FALSE;
      373       373    2               (*action) (lll->l_next, PREV(l), abytes);
      374       374    2               lll = l;
      375       375    2               if (l->l_next == first_l) goto exit_loop;
      376       376    2
      377       377    2              }
      378       378    1        exit_loop:
      379       379    1              if (more != 0) return FALSE;
      380       380    1              *l_out = lll;
      381       381    1              return TRUE;
      382       382    1        }
      383       383
      384       384             /*I*
      385       385                   NAME: scan_first_param
      386       386                   PURPOSE: This routine scans right-to-left for the instructions
      387       387                   that makeup the first parameter expression.
      388       388             */
      389       389             bool scan_first_param(l,lll, bytes) line_p l,*lll;int bytes; {
      390       390    1              int expected, sbytes, rbytes;
      391       391    1              line_p l1;
      392       392    1
      393       393    1              /* returned pointer will point to the very first instruction
      394       394    1                 in the paramter expression. */
      395       395    1              for ( l1 = l; l1 != (line_p) 0; l1 = PREV(l1)) {
      396       396    2                while (INSTR(l1) == ps_mes ) {
      397       397    3                  l1 = PREV(l1);
      398       398    3                  if (l1 == (line_p) 0) return FALSE; }
      399       399    2                if (INSTR(l1) == op_cif || INSTR(l1) == op_cuf ||
      400       400    2                    INSTR(l1) == op_cfi || INSTR(l1) == op_cui ||
      401       401    2                    INSTR(l1) == op_cfu || INSTR(l1) == op_cff ) {
CC.C03    File=zbe$parser:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=12 
      402       402    3                   l1 = PREV(l1); l1 = PREV(l1); l1 = PREV(l1); }
      403       403    2                attrib (l1, &expected, &sbytes, &rbytes) ;
      404       404    2                if (!expected) {
      405       405    3                  if (l1 == l) return FALSE;
      406       406    3                  *lll = l1->l_next;
      407       407    3                  if (INSTR(l1->l_next) == ps_mes) return FALSE;
      408       408    3                  bytes = rbytes;
      409       409    3                  return TRUE; }
      410       410    2                if (INSTR(l1) == op_loc || INSTR(l1) == op_lol || INSTR(l1) == op_loe
                               ) {
      411       411    3                   *lll = l1;
      412       412    3                   return TRUE; }
      413       413    2              }
      414       414    1              return FALSE;
      415       415    1        }  /* end of the function scan_first_param. */
---  Include file information  ---

   stdio:h.:LIBRARY. is referenced
   zbe$types:h.:ZBC3TOU. is referenced
   zbe$debug:h.:ZBC3TOU. is referenced
   zbe$alloc:h.:ZBC3TOU. is referenced
   zbe$global:h.:ZBC3TOU. is referenced
   zbe$lset:h.:ZBC3TOU. is referenced
   zbe$aux:h.:ZBC3TOU. is referenced
   em_spec:h.:ZBC3TOU. is referenced
   em_mnem:h.:ZBC3TOU. is referenced
   em_pseu:h.:ZBC3TOU. is referenced
   zbe$classdefs:h.:ZBC3TOU. is referenced

2 warnings were detected in the file zbe$parser:c.:ZBC3TSI
