

14:56 JUL 28 '97 KV_GLBCNS_E.:E05SI                                        1    
    1      /*M* KV_GLBCNS_E Virtual device handler constants */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7
    8      /* VDH constants. */
    9
   10
   11      /*F* NAME:  KV_PHSPSTMOD_E
   12      Physical positioning mode. */
   13
   14      %MACRO KV_PHSPSTMOD_E;
   15      %EQU KV_PHSPSTMOD_SKP = 1;              /* SKIP                               */
   16      /*K* KV_PHSPSTMOD_SKP
   17      KV_PHSPSTMOD_SKP         Skip.
   18      */
   19      %EQU KV_PHSPSTMOD_BLN = 2;              /* BLANK                              */
   20      /*K* KV_PHSPSTMOD_BLN
   21      KV_PHSPSTMOD_BLN         Blank.
   22      */
   23      %EQU KV_PHSPSTMOD_ANY = 3;              /* ANY                                */
   24      /*K* KV_PHSPSTMOD_ANY
   25      KV_PHSPSTMOD_ANY         Any.
   26      */
   27      %EQU KV_PHSPSTMOD_VRTSCR = 4;        /* VRTSCR                                */
   28      /*K* KV_PHSPSTMOD_VRTSCR
   29      KV_PHSPSTMOD_VRTSCR      Vertical scroll.
   30      */
   31      %EQU KV_PHSPSTMOD_HRZSCR = 5;        /* HRZSCR                                */
   32      /*K* KV_PHSPSTMOD_HRZSCR
   33      KV_PHSPSTMOD_HRZSCR      Horizontal scroll.
   34      */
   35      %MEND;
   36
   37      /* Positioning origin.  Specifies what origin positioning */
14:56 JUL 28 '97 KV_GLBCNS_E.:E05SI                                        2    
   38      /* values are relative to. */
   39
   40      %MACRO KV_PSTORG_E;
   41
   42      %EQU KV_PSTORG_ABS = 1;                 /* Absolute                           */
   43      %EQU KV_PSTORG_CRTPST = 2;              /* Relative to current position       */
   44      %EQU KV_PSTORG_SRD = 3;                 /* Relative to SRD margins            */
   45
   46      %MEND;
   47
   48      /* Input unit.  Specifies whether the VDI unit of input */
   49      /* is a character, record, block, etc. */
   50
   51      /*F* NAME:  KV_INPUNT_E    */
   52      %MACRO KV_INPUNT_E;
   53
   54      /*K* KV_INPUNT_CHR
   55      KV_INPUNT_CHR                 Character                          */
   56      %EQU KV_INPUNT_CHR = 1;                 /* Character                          */
   57      /*K* KV_INPUNT_RCR
   58      KV_INPUNT_RCR                 Record       */
   59      %EQU KV_INPUNT_RCR = 2;                 /* Record                             */
   60      /*K* KV_INPUNT_BLK
   61      KV_INPUNT_BLK                 Block       */
   62      %EQU KV_INPUNT_BLK = 3;                 /* Block                              */
   63
   64      %MEND;
   65      /*F* NAME:  KV#DATMOD_E
   66      EQUs for data modes (.DATMOD)
   67      */
   68      %MACRO KV#DATMOD_E;
   69      %EQU KV#DATMOD_NRM = 0;                 /* Normal (not transparent or binary) */
   70      /* The *K* comments show KV]DATMOD_..; .TRF makes it # in manual.*/
   71      /*K* KV#DATMOD_NRM
   72      .TRF ]#
   73      KV]DATMOD_NRM            Normal (not transparent or binary).
   74      .TRF ]]
14:56 JUL 28 '97 KV_GLBCNS_E.:E05SI                                        3    
   75      */
   76      %EQU KV#DATMOD_TRN = 1;                 /* Transparent                        */
   77      /*K* KV#DATMOD_TRN
   78      .TRF ]#
   79      KV]DATMOD_TRN            Transparent.
   80      .TRF ]]
   81      */
   82      %EQU KV#DATMOD_BNR = 2;                 /* Binary                             */
   83      /*K* KV#DATMOD_BNR
   84      .TRF ]#
   85      KV]DATMOD_BNR            Binary.
   86      .TRF ]]
   87      */
   88      %EQU KV#DATMOD_ANY = 3;                 /* Any (for requests only)            */
   89      /*K* KV#DATMOD_ANY
   90      .TRF ]#
   91      KV]DATMOD_ANY            Any (for requests only).
   92      .TRF ]]
   93      */
   94      %MEND;
   95
   96      /*F* NAME:  KV_MRKTYP_E
   97      Marker type.  Specifies whether an output marker is for
   98      a marker message, data with RRR, etc. */
   99      %MACRO KV_MRKTYP_E;
  100      /*K* KV_MRKTYP_LOW
  101      KV_MRKTYP_LOW                 Low value.                         */
  102      %EQU KV_MRKTYP_LOW = 1;                 /* Low value                          */
  103
  104      /*K* KV_MRKTYP_SAVLSTRCRID
  105      KV_MRKTYP_SAVLSTRCRID         Save last record ID.               */
  106      %EQU KV_MRKTYP_SAVLSTRCRID = 1;         /* Save last record id                */
  107      /*K* KV_MRKTYP_MRK
  108      KV_MRKTYP_MRK                 Marker message.                    */
  109      %EQU KV_MRKTYP_MRK = 2;                 /* Marker message                     */
  110      /*K* KV_MRKTYP_ACK
  111      KV_MRKTYP_ACK                 Acknowledge (data with RRR).       */
14:56 JUL 28 '97 KV_GLBCNS_E.:E05SI                                        4    
  112      %EQU KV_MRKTYP_ACK = 3;                 /* Acknowledge (data with RRR)        */
  113      /*K* KV_MRKTYP_SNDLSTRCRID
  114      KV_MRKTYP_SNDLSTRCRID         Send last record ID.               */
  115      %EQU KV_MRKTYP_SNDLSTRCRID = 4;         /* Send last record id                */
  116      /*K* KV_MRKTYP_REDTIMOUT
  117      KV_MRKTYP_REDTIMOUT           Start read timeout interval.        */
  118      %EQU KV_MRKTYP_REDTIMOUT = 5;           /* Start read timout interval.        */
  119
  120      %MEND;
  121
  122      /* Buffer release dispositions. */
  123
  124      /*F* NAME: KV_BFRRLSDSP_E     */
  125      %MACRO KV_BFRRLSDSP_E;
  126      %EQU KV_BFRRLSDSP_NON = 0;              /* Non-releasable                     */
  127      /*K* KV_BFRRLSDSP_NON
  128      KV_BFRRLSDSP_NON              Non-releasable                     */
  129      %EQU KV_BFRRLSDSP_MSG = 1;              /* Release as a message buffer        */
  130      /*K* KV_BFRRLSDSP_MSG
  131      KV_BFRRLSDSP_MSG              Release as a message buffer        */
  132      %EQU KV_BFRRLSDSP_FRM = 2;              /* Form; part of KV$FLD structure     */
  133      /*K* KV_BFRRLSDSP_FRM
  134      KV_BFRRLSDSP_FRM              Form; part of KV$FLD structure     */
  135      %EQU KV_BFRRLSDSP_DSC = 3;              /* Disconnect; release at disconnect  */
  136      /*K* KV_BFRRLSDSP_DSC
  137      KV_BFRRLSDSP_DSC              Disconnect; release at disconnect  */
  138      %MEND;
  139
  140      /* Parity types. */
  141      /* For use with KV$PRM_TRMATTR.PRTTYP. */
  142
  143      %MACRO KV_PRTTYP_E;
  144      %EQU KV_PRTTYP_NONE = 0;                /* NONE (PARITY BIT NOT SIGNIFICANT)  */
  145      %EQU KV_PRTTYP_ODD = 1;                 /* ODD PARITY                         */
  146      %EQU KV_PRTTYP_EVEN = 2;                /* EVEN PARITY                        */
  147      %EQU KV_PRTTYP_ONE = 3;                 /* ONE (PARITY BIT ALWAYS SET)        */
  148      %EQU KV_PRTTYP_ZERO = 4;                /* ZERO (PARITY BIT NEVER SET)        */
14:56 JUL 28 '97 KV_GLBCNS_E.:E05SI                                        5    
  149
  150      %MEND;
  151
  152      /* Device control algorithms. */
  153
  154      %MACRO KV_DVCCTR_E;
  155
  156      /* Horizontal position absolute algorithms. */
  157      /* For use with KV$PRM_CTRCHR.HPA_ALG. */
  158
  159      %EQU KV_HPA_ALG_ANS = 1;                /* ANS X3.64                          */
  160      %EQU KV_HPA_ALG_DBL = 2;                /* DIABLO 1620 COMPATIBLE             */
  161      %EQU KV_HPA_ALG_NEC = 3;                /* NEC COMPATIBLE                     */
  162      %EQU KV_HPA_ALG_CHA = 4;                /* ANS X3.64 CHA ALGORITHM            */
  163
  164      /* Cursor position */
  165
  166      %EQU KV_CUP_ALG_ANS = 1;                /* ANS X3.64                          */
  167      %EQU KV_CUP_ALG_TBL = 2;                /* TABLE DRIVEN                       */
  168
  169      /* Declare field algorithms */
  170
  171      %EQU KV_DCLFLD_ALG_NON = 0;
  172      %EQU KV_DCLFLD_ALG_ANS = 1;
  173      %EQU KV_DCLFLD_ALG_2 = 2;
  174
  175      /* Set graphic rendition algorithms */
  176
  177      %EQU KV_SGR_ALG_NON = 0;
  178      %EQU KV_SGR_ALG_ANS = 1;
  179      %EQU KV_SGR_ALG_2 = 2;
  180      %EQU KV_SGR_ALG_3 = 3;
  181      %MEND;
  182
  183      /* Abstract graphic renditions. */
  184
  185      /*F* NAME: KV_ABSGRPRND_E    */
14:56 JUL 28 '97 KV_GLBCNS_E.:E05SI                                        6    
  186      %MACRO KV_ABSGRPRND_E;
  187
  188      /*K* NULL
  189      KV_ABSGRPRND_NULL             Null        */
  190      %EQU KV_ABSGRPRND_NULL = 1;
  191      /*K* HIDDEN
  192      KV_ABSGRPRND_HIDDEN           Hidden    */
  193      %EQU KV_ABSGRPRND_HIDDEN = 2;
  194      /*K* EMPHASIS
  195      KV_ABSGRPRND_EMPHASIS         Emphasis   */
  196      %EQU KV_ABSGRPRND_EMPHASIS = 3;
  197      /*K* INPUT
  198      KV_ABSGRPRND_INPUT            Input     */
  199      %EQU KV_ABSGRPRND_INPUT = 4;
  200      /*K* OUTPUT
  201      KV_ABSGRPRND_OUTPUT           Output    */
  202      %EQU KV_ABSGRPRND_OUTPUT = 5;
  203      /*K* ERROR
  204      KV_ABSGRPRND_ERROR            Error   */
  205      %EQU KV_ABSGRPRND_ERROR = 6;
  206      /*K* WARNING
  207      KV_ABSGRPRND_WARNING          Warning  */
  208      %EQU KV_ABSGRPRND_WARNING = 7;
  209
  210      %MEND;
  211
  212      /*F* NAME:  KV_LINLST_SLCFLDSTT_E  */
  213      %MACRO KV_LINLST_SLCFLDSTT_E;
  214
  215      /* Selected field status:  None. */
  216
  217      /*K* NON
  218      KV_LINLST_SLCFLDSTT_NON       None */
  219      %EQU KV_LINLST_SLCFLDSTT_NON = 0;
  220
  221      /* Selected field status:  One.  KV$LINLST.ONEFLDLST$ and */
  222      /* KV$LINLST.ONEFLDWRDX locate the */
14:56 JUL 28 '97 KV_GLBCNS_E.:E05SI                                        7    
  223      /* KV$FLD structure. */
  224
  225      /*K* ONE
  226      KV_LINLST_SLCFLDSTT_ONE       One */
  227      %EQU KV_LINLST_SLCFLDSTT_ONE = 1;
  228
  229      /* Selected field status:  Unknown. */
  230
  231      /*K* UN_KNW
  232      KV_LINLST_SLCFLDSTT_UN_KNW    Unknown  */
  233      %EQU KV_LINLST_SLCFLDSTT_UN_KNW = 2;
  234
  235      /* Selected field status:  All. */
  236
  237      /*K* ALL
  238      KV_LINLST_SLCFLDSTT_ALL       All  */
  239      %EQU KV_LINLST_SLCFLDSTT_ALL = 3;
  240
  241      %MEND;
  242      /*F* NAME: KV$OTPFNC VDH OUTPUT FUNCTION DESCRIPTIONS*/
  243
  244      /* OUTPUT FUNCTION NUMBER DEFINITIONS;*/
  245      /* THE NUMBER IS THAT USED ON THE CASE STATEMENTS IN KVO$OTPLCL.*/
  246
  247      %MACRO KV_OTPFNC_E;
  248      /*F* NAME:  KV_OTPFNC_E
  249      */
  250      %EQU KV_OTPFNC_SP = 5;                  /* SP (SPACE)                         */
  251      /*K* KV_OTPFNC_SP
  252      KV_OTPFNC_SP                  Space    */
  253
  254      %EQU KV_OTPFNC_BS = 1;                  /* BS (BACKSPACE)                     */
  255      /*K* KV_OTPFNC_BS
  256      KV_OTPFNC_BS                  Backspace  */
  257      %EQU KV_OTPFNC_HT = 2;                  /* HT (HORIZONTAL TAB)                */
  258      /*K* KV_OTPFNC_HT
  259      KV_OTPFNC_HT                  Horizontal tab  */
14:56 JUL 28 '97 KV_GLBCNS_E.:E05SI                                        8    
  260      %EQU KV_OTPFNC_LF = 3;                  /* LF (LINE FEED)                     */
  261      /*K* KV_OTPFNC_LF
  262      KV_OTPFNC_LF                  Line feed    */
  263      %EQU KV_OTPFNC_CR = 4;                  /* CR (CARRIAGE RETURN)               */
  264      /*K* KV_OTPFNC_CR
  265      KV_OTPFNC_CR                  Carriage return   */
  266      %EQU KV_OTPFNC_NXTTBL = 7;         /* NXTTBL (Still don't know what it is)    */
  267      /*K* KV_OTPFNC_NXTTBL
  268      KV_OTPFNC_NXTTBL              Next table        */
  269
  270
  271      %MEND;
  272      %EJECT;

14:56 JUL 28 '97 KV_GLBCNS_E.:E05SI                                        9    
  273
  274      /* Current field status definitions (for KV$PTR.STT). */
  275
  276      %MACRO KV_PTR_STT_E;
  277      /*F* NAME:  KV_PTR_STT_E
  278      */
  279      %EQU KV_PTR_STT_LOW = 0;
  280
  281      /*K* IN_FLDCLM1
  282      In a field, at column 1 of this field. */
  283
  284      %EQU KV_PTR_STT_IN_FLDCLM1 = 0;
  285
  286      /*K* IN_FLDCLMN
  287      In a field, at column n (i.e., not column 1)
  288      of this field. */
  289
  290      %EQU KV_PTR_STT_IN_FLDCLMN = 1;
  291
  292      /*K* BFRFRSFLD
  293      Before first field (on this line). */
  294
  295      %EQU KV_PTR_STT_BFRFRSFLD = 2;
  296
  297      /*K* BTWFLD
  298      Between fields. */
  299
  300      %EQU KV_PTR_STT_BTWFLD = 3;
  301
  302      /*K* AFTLSTFLD
  303      After last field (on this line). */
  304
  305      %EQU KV_PTR_STT_AFTLSTFLD = 4;
  306
  307      /*K* NO_FLD
  308      No fields declared on this line. */
  309
14:56 JUL 28 '97 KV_GLBCNS_E.:E05SI                                        10   
  310      %EQU KV_PTR_STT_NO_FLD = 5;
  311
  312      /*K* ILGCLM
  313      Illegal column (to right of right margin). */
  314
  315      %EQU KV_PTR_STT_ILGCLM = 6;
  316
  317      /*K* ILGLIN
  318      Illegal line (lower than bottom margin
  319      of virtual device). */
  320
  321      %EQU KV_PTR_STT_ILGLIN = 7;
  322
  323      /*K* ILGVD_ORG
  324      Illegal virtual device organization
  325      (not forms VD). */
  326
  327      %EQU KV_PTR_STT_ILGVD_ORG = 8;
  328
  329      /*K* BGNOF_FRM
  330      Beginning of form. */
  331
  332      %EQU KV_PTR_STT_BGNOF_FRM = 9;
  333
  334      /*K* ENDOF_FRM
  335      End of form. */
  336
  337      %EQU KV_PTR_STT_ENDOF_FRM = 10;
  338
  339      %EQU KV_PTR_STT_HI = 10;
  340
  341      %MEND;
  342
  343      /* VFC definitions */
  344
  345      %MACRO KV_VFC_E;
  346
14:56 JUL 28 '97 KV_GLBCNS_E.:E05SI                                        11   
  347      /* Legal VFC code range */
  348
  349      %EQU KV#VFCCODTXTLOW =  30;             /* LOW VALUE                          */
  350      %EQU KV#VFCCODTXTHI = 127;              /* HI VALUE                           */
  351      %EQU KV#VFCCODPAG =  26;                /* GO TO PAGE LIMBO                   */
  352
  353      /* VFC FUNCTION CODES                                               */
  354
  355      %EQU KV#VFCFNCLOW = 1;                  /* LOW VFC FUNCTION CODE              */
  356
  357      %EQU KV#VFCFNCSPC = 1;                  /* SPECIAL                            */
  358      %EQU KV#VFCFNCSKPCHNBFRPRT = 3;         /* SKIP TO CHANNEL BEFORE PRINTING*/
  359      %EQU KV#VFCFNCSPCN_AFTPRT = 4;          /* SPACE N LINES AFTER PRINTING       */
  360      %EQU KV#VFCFNCSKPCHNAFTPRT = 5;         /* SKIP TO CHANNEL AFTER PRINTING     */
  361      %EQU KV#VFCFNCSPCN_BFRPRT = 6;          /* SPACE N LINES BEFORE PRINTING      */
  362      %EQU KV#VFCFNCSPCPST = 7;               /* SPECIAL POSITIONING:               */
  363                                         /* IF WRTRQS, TOP FORM, PRINT, SPACE N.    */
  364                                         /* IF PROMPT, CR/LF IF CARRIAGE NOT IN     */
  365                                              /* COLUMN 1, SPACE N, PRINT.          */
  366
  367      %EQU KV#VFCFNCHI = 7;                   /* HI VFC FUNCTION CODE               */
  368
  369      /* PARAMETER CODES FOR KV#VFCFNCSPC (SPECIAL VFC FUNCTION)          */
  370
  371      %EQU KV#SPCVFCLOW = 10;                 /* LOW SPECIAL VFC CODE               */
  372
  373      %EQU KV#SPCVFCPAG = 10;                 /* GO TO LIMBO                        */
  374      %EQU KV#SPCVFCCLRWND = 13;              /* CLEAR THE VIRTUAL DEVICE           */
  375      %EQU KV#SPCVFCSKPCLRLINBFRPRT = 14;     /* SKIP TO CLEAR LINE, PRINT          */
  376      %EQU KV#SPCVFCSKPCLRLINBFRPRTNL = 15;   /* SKIP TO CLEAR LINE, PRINT, NEW-LIN */
  377
  378      %EQU KV#SPCVFCHI = 15;                  /* HI SPECIAL VFC CODE                */
  379
  380      %MEND;
  381
  382      /* VDI function codes for VDH to VDH-user functions. */
  383      /* These identify the KV$USR_function structures. */
14:56 JUL 28 '97 KV_GLBCNS_E.:E05SI                                        12   
  384
  385      %MACRO KV_USR_FNC_E;
  386
  387      %EQU KV_USR_FNC_DAT = 1;
  388      /* 2 is available */
  389      %EQU KV_USR_FNC_ERS = 3;
  390      %EQU KV_USR_FNC_EVT = 4;
  391      %EQU KV_USR_FNC_EXTINPTRN = 5;
  392      %EQU KV_USR_FNC_EXTOTPTRN = 6;
  393      %EQU KV_USR_FNC_GETOTPBFR = 7;
  394      %EQU KV_USR_FNC_GETPRM = 8;
  395      %EQU KV_USR_FNC_INPPRC = 9;
  396      %EQU KV_USR_FNC_OTPMRK = 10;
  397      %EQU KV_USR_FNC_OTPRPTCHR = 11;
  398      %EQU KV_USR_FNC_PST = 12;
  399      %EQU KV_USR_FNC_RQSDAT = 13;
  400      %EQU KV_USR_FNC_SETATR = 14;
  401      %EQU KV_USR_FNC_SETPRM = 15;
  402
  403      %MEND;
  404
  405      %EQU KV_USR_FNC_HI = 15;
  406
  407      /* VDI function codes for VDH-user to VDH functions. */
  408      /* These identify the KV$VDH_function structures. */
  409
  410      %MACRO KV_VDH_FNC_E;
  411
  412      %EQU KV_VDH_FNC_CNC = 1;
  413      %EQU KV_VDH_FNC_DAT = 2;
  414      %EQU KV_VDH_FNC_DCLLCLPST = 3;
  415      %EQU KV_VDH_FNC_DSC = 4;
  416      /* 5 is available */
  417      %EQU KV_VDH_FNC_EVT = 6;
  418      %EQU KV_VDH_FNC_FNDINPTAB = 7;
  419      %EQU KV_VDH_FNC_GETBFR = 8;
  420      %EQU KV_VDH_FNC_GETPRM = 9;
14:56 JUL 28 '97 KV_GLBCNS_E.:E05SI                                        13   
  421      %EQU KV_VDH_FNC_INT = 10;
  422      %EQU KV_VDH_FNC_INTINPOPR = 11;
  423      %EQU KV_VDH_FNC_OTPLCL = 12;
  424      %EQU KV_VDH_FNC_OTPMRK = 13;
  425      %EQU KV_VDH_FNC_PST = 14;
  426      %EQU KV_VDH_FNC_RLSBFR = 15;
  427      %EQU KV_VDH_FNC_RQSDAT = 16;
  428      %EQU KV_VDH_FNC_SETCLK = 17;
  429      %EQU KV_VDH_FNC_SETPRM = 18;
  430      %EQU KV_VDH_FNC_SRCINPFNCID = 19;
  431
  432      %MEND;
  433
  434      %EQU KV_VDH_FNC_HI = 19;
  435      /*F* NAME:  KV_USR_EVT - VDH-to-VDH-user events
  436
  437      Following is a list of events that VDH may pass on a KV$USR_EVT
  438      (user event) call.
  439      */
  440
  441      /* User event IDs.  Events in VDH reported to the VDH-user. */
  442
  443      %MACRO KV_USR_EVT_ID_E;
  444
  445      %EQU KV_USR_EVT_ID_BGNSETPRM = 1;
  446      /*K*  KV_USR_EVT_ID_BGNSETPRM
  447      Begin set parameter.
  448      VDH is beginning a set-parameter operation or series of
  449      operations (KV$USR_SETPRM).
  450      */
  451      %EQU KV_USR_EVT_ID_CLS = 2;
  452      /*K*  KV_USR_EVT_ID_CLS
  453      Close.
  454      The session connection has been closed.
  455      */
  456      %EQU KV_USR_EVT_ID_DLTOTP = 3;
  457      /*K*  KV_USR_EVT_ID_DLTOTP
14:56 JUL 28 '97 KV_GLBCNS_E.:E05SI                                        14   
  458      Delete output.
  459      Output queued for the device should be deleted.  If any output
  460      is actually deleted, the VDH-user should set KV$USR_EVT.ACT or RETURN.
  461      Otherwise, it should ALTRETURN.
  462      */
  463      %EQU KV_USR_EVT_ID_DSC = 4;
  464      /*K*  KV_USR_EVT_ID_DSC
  465      Disconnect.
  466      This signifies that a disconnect is being reported for this
  467      session (i.e., the one reflected in the current context) for the first
  468      time.
  469      .spf 0
  470      Note:  Only this session is being disconnected.  No other sessions
  471      are affected.
  472      */
  473      %EQU KV_USR_EVT_ID_ENDSETPRM = 5;
  474      /*K*  KV_USR_EVT_ID_ENDSETPRM
  475      End set parameter.
  476      VDH is ending set-parameter operations (KV$USR_SETPRM).
  477      */
  478      %EQU KV_USR_EVT_ID_GETSTR = 6;
  479      /*K*  KV_USR_EVT_ID_GETSTR
  480      Get structure.
  481      VDH is getting a structure, and the VDH-user indicated
  482      that the allocation of this type of structure should be
  483      reported to the VDH-user.  This is indicated by
  484      KV$USRPRM.STREVTENB(KV_STRTYP_...) being set, and
  485      KV$VDI.USREVTENB(KV_USR_EVT_ID_GETSTR) being set.
  486      The structure type (KV_STRTYP_...) is in KV$USR_EVT.PRM.
  487      See KV$VDH_GETBFR for the list of STRTYPs.
  488      */
  489      %EQU KV_USR_EVT_ID_HLTOTP = 7;
  490      /*K*  KV_USR_EVT_ID_HLTOTP
  491      Halt output.
  492      Output should be halted by the VDH-user at this point in the data
  493      stream, as a boundary such as a CRT screen page has been hit.
  494      Any message such as '(CR TO GO)' has already been output by VDH.
14:56 JUL 28 '97 KV_GLBCNS_E.:E05SI                                        15   
  495      The VDH-user is responsible for soliciting a go-ahead response from
  496      the device operator, and resuming queued output to the real device.
  497      The VDH-user typically implements the halt function by truncating
  498      and marking the current output buffer.  After the marked buffer has
  499      been queued onto the hardware for output, the VDH-user stops queuing
  500      buffers until the go-ahead response is received.
  501      */
  502      %EQU KV_USR_EVT_ID_LGNACP = 8;
  503      /*K*  KV_USR_EVT_ID_LGNACP
  504      Logon accept.
  505      The logon has been accepted.
  506      */
  507      %EQU KV_USR_EVT_ID_LGNRJC = 9;
  508      /*K*  KV_USR_EVT_ID_LGNRJC
  509      Logon reject.
  510      The logon has been rejected.
  511      KV$USR_EVT.PRM will contain the logon reject reason.  The EQUate
  512      identifiers for the logon reject reasons are as follows:
  513
  514      .FIF
  515      } K_REASON_BADGEN    Generation does not match
  516      } K_REASON_NOLDCT    No LDCT available
  517      } K_REASON_NORMAL    Normal connection or termination
  518      } K_REASON_NORTE     No Route available
  519      } K_REASON_PROTOCOL  Protocol error
  520      } K_REASON_USRREJ    User rejected the connect
  521      .FIN
  522      */
  523      %EQU KV_USR_EVT_ID_OPN = 10;
  524      /*K*  KV_USR_EVT_ID_OPN
  525      Open.
  526      The session connection has been opened.
  527      */
  528      %EQU KV_USR_EVT_ID_RLSSTR = 11;
  529      /*K*  KV_USR_EVT_ID_RLSSTR
  530      Release structure.
  531      VDH is releasing a structure, and the VDH-user indicated
14:56 JUL 28 '97 KV_GLBCNS_E.:E05SI                                        16   
  532      that the releasing of this type of structure should be
  533      reported to the VDH-user.  This was indicated by
  534      KV$USRPRM.STREVTENB(KV_STRTYP_...) being set, and
  535      KV$VDI.USREVTENB(KV_USR_EVT_ID_RLSSTR) being set.
  536      The structure type (KV_STRTYP_...) is in KV$USR_EVT.PRM.
  537      */
  538      %EQU KV_USR_EVT_ID_SCH = 12;
  539      /*K*  KV_USR_EVT_ID_SCH
  540      Schedule.
  541      VDH is calling the VDH-user because the user earlier executed
  542      the KV$USRENT macro when VDH was running on behalf of
  543      that instance of VDH (e.g., a device interrupt interrupted VDH processing for the same device).
  544      KV$USR_EVT.PRM will contain the KV_SCHRSN_DFRn value
  545      the user specified on the KV$USRENT macro.  If multiple
  546      schedule events are pending when VDH calls the user,
  547      the calls will be made in ascending KV_SCHRSN_DFRn order.
  548      VDH will reset the KV_SCHRSN_DFRn flag in VDI.DFR.USR before calling the
  549      user for that flag.
  550      */
  551      %EQU KV_USR_EVT_ID_TRMUSRRQSDAT = 13;
  552      /*K*  TRMUSRRQSDAT
  553      Terminate user request data.
  554      VDH is calling the VDH-user because the request-data function
  555      earlier indicated to the VDH-user
  556      is being terminated.  VDH could have encountered a termination
  557      (activation) character, for example.
  558      */
  559      %EQU KV_USR_EVT_ID_VDHEXT = 14;
  560      /*K*  KV_USR_EVT_ID_VDHEXT
  561      VDH exit.
  562      VDH is exiting (going idle or processing some other session).  The VDH-user
  563      should do whatever cleanup is necessary, such as
  564      truncating output buffers.
  565      */
  566      %EQU KV_USR_EVT_ID_RLSVDI = 15;
  567      /*K*  KV_USR_EVT_ID_RLSVDI
  568      Release VDI.
14:56 JUL 28 '97 KV_GLBCNS_E.:E05SI                                        17   
  569      This signifies that the only remaining distant end for this instance
  570      of VDI has disconnected, and VDH
  571      wants to know if the VDH-user is ready to disconnect.  If not,
  572      the VDH-user should ALTRETURN and issue the RLSVDI event when it is ready (see
  573      KV_VDH_EVT_ID_RLSVDI).  If the VDH-user is ready, the VDH-user can release
  574      its context now, or can do it later, up until VDH calls with
  575      KV_USR_EVT_ID_RLSSTR and KV$USR_EVT.PRM = KV_STRTYP_VDI.
  576      */
  577      %EQU KV_USR_EVT_ID_CLKEXP = 16;
  578      /*K*  KV_USR_EVT_ID_CLKEXP
  579      Clock expiration.
  580      The clock the VDH-user set via KV$VDH_SETCLK has expired.
  581      */
  582      %EQU KV_USR_EVT_ID_INHDLTOTP = 17;
  583      /*K*  KV_USR_EVT_ID_INHDLTOTP
  584      Inhibit delete output.
  585      Deletions of output (for the next KV$USR_EVT.PRM characters)
  586      should be inhibited.  This is only relevant for VDH-users that
  587      can delete the remaining output stream at the character level.
  588      VDH-users that do not delete or only delete at the block level
  589      can ignore this event (i.e., not ask for it).
  590      */
  591      %EQU KV_USR_EVT_ID_OTP1_CHR = 18;
  592      /*K*  KV_USR_EVT_ID_OTP1_CHR
  593      Output one character.
  594      The VDH-user is to output the character passed in KV$USR_EVT.PRM.
  595      Only VDH-users that have large quantities of single output-character
  596      operations (as during echoplex at human typing speeds) should
  597      ask for this event.
  598      If the VDH-user outputs the character, it should set KV$USR_EVT.ACT or RETURN.
  599      If not, it must ALTRETURN, and VDH will output the character normally.
  600      The character passed has already been translated (if necessary), and
  601      any context changes resulting from display of the character will be
  602      done by VDH.
  603      */
  604      %MEND;
  605
14:56 JUL 28 '97 KV_GLBCNS_E.:E05SI                                        18   
  606      %EQU KV_USR_EVT_ID_HI = 18;
  607      /*F* NAME:  KV__VDH_EVT - VDH-user-to-VDH events
  608
  609      Following is a list of events that the VDH-user may pass on a
  610      KV$VDH_EVT (VDH event) call.
  611      */
  612
  613      /* VDH event IDs.  Events in the VDH-user reported to VDH. */
  614
  615      %MACRO KV_VDH_EVT_ID_E;
  616
  617      %EQU KV_VDH_EVT_ID_CMPOTP = 1;
  618
  619      /*K*  KV_VDH_EVT_ID_CMPOTP
  620      Complete output.
  621      The VDH-user wants to complete output.  Any pending output
  622      operation (such as positioning) should be completed by VDH.  This event is
  623      typically reported after some output operation has occurred,
  624      and the VDH-user wants to complete activity for a device because there is no
  625      more data for the device.
  626      */
  627      %EQU KV_VDH_EVT_ID_RQSOTP = 2;
  628
  629      /*K*  KV_VDH_EVT_ID_RQSOTP
  630      Request output.
  631      The VDH-user wants more output, via the KV$VDI.OTPBFR_ mechanism.
  632      This event is usually reported by invoking the KV$RQSOTP macro.
  633      */
  634      %EQU KV_VDH_EVT_ID_RLSVDI = 3;
  635
  636      /*K*  KV_VDH_EVT_ID_RLSVDI
  637      Release VDI.
  638      The VDH-user responded to KV_USR_EVT_ID_RLSVDI with an ALTRETURN,
  639      and is now ready to process KV_USR_EVT_ID_RLSVDI.  VDH will
  640      later call the VDH-user back with KV_USR_EVT_ID_RLSVDI.
  641      */
  642      %EQU KV_VDH_EVT_ID_ATN = 4;
14:56 JUL 28 '97 KV_GLBCNS_E.:E05SI                                        19   
  643
  644      /*K*  KV_VDH_EVT_ID_ATN
  645      Attention.
  646      The VDH-user is reporting an attention event - either
  647      monitor attention (e.g., control-Y) (KV$VDH_EVT.PRM = 0)
  648      or "break" (KV$VDH_EVT.PRM = break count = 1 to 4).
  649      */
  650      %MEND;
  651
  652      %EQU KV_VDH_EVT_ID_HI = 4;
  653
  654      /*F* NAME:  KV_STRTYP_E
  655      Structure types.  Identifies what structure within VDH this is. */
  656
  657      %MACRO KV_STRTYP_E;
  658      %EQU KV_STRTYP_ACTCHR = 1;
  659      /*K* KV_STRTYP_ACTCHR
  660      KV_STRTYP_ACTCHR         Activation characters.  Bit array (shared).
  661      */
  662      %EQU KV_STRTYP_DCB = 2;
  663      /*K* KV_STRTYP_DCB
  664      KV_STRTYP_DCB *          Data Control Block.
  665      */
  666      %EQU KV_STRTYP_DCBHDN = 3;
  667      /*K* KV_STRTYP_DCBHDN
  668      KV_STRTYP_DCBHDN         Data Control Block Heading.  KV$TITLE (shared).
  669      */
  670      %EQU KV_STRTYP_ERR = 4;
  671      /*K* KV_STRTYP_ERR
  672      KV_STRTYP_ERR *          Error.  KV$ERR.
  673      */
  674      %EQU KV_STRTYP_FLD = 5;
  675      /*K* KV_STRTYP_FLD
  676      KV_STRTYP_FLD *          Field.  KV$FLD.
  677      */
  678      %EQU KV_STRTYP_FLDLST = 6;
  679      /*K* KV_STRTYP_FLDLST
14:56 JUL 28 '97 KV_GLBCNS_E.:E05SI                                        20   
  680      KV_STRTYP_FLDLST         Field list.  KV$FLDLST.
  681      */
  682      %EQU KV_STRTYP_INPTAB = 7;
  683      /*K* KV_STRTYP_INPTAB
  684      KV_STRTYP_INPTAB         Input tabs.  Byte array (shared).
  685      */
  686      %EQU KV_STRTYP_LIN = 8;
  687      /*K* KV_STRTYP_LIN
  688      KV_STRTYP_LIN *          Line.  KV$LIN.
  689      */
  690      %EQU KV_STRTYP_LINLST = 9;
  691      /*K* KV_STRTYP_LINLST
  692      KV_STRTYP_LINLST         Line list.  KV$LINLST.
  693      */
  694      %EQU KV_STRTYP_MRD = 10;
  695      /*K* KV_STRTYP_MRD
  696      KV_STRTYP_MRD            Master Real Device Context.  KV$MRD.
  697      */
  698      %EQU KV_STRTYP_MSG = 11;
  699      /*K* KV_STRTYP_MSG
  700      KV_STRTYP_MSG            Message.  Used to buffer "send" data.
  701      */
  702      %EQU KV_STRTYP_MVD = 12;
  703      /*K* KV_STRTYP_MVD
  704      KV_STRTYP_MVD            Master Virtual Device Context.  KV$MVD.
  705      */
  706      %EQU KV_STRTYP_OTPTAB = 13;
  707      /*K* KV_STRTYP_OTPTAB
  708      KV_STRTYP_OTPTAB         Output tabs.  Byte array (shared).
  709      */
  710      %EQU KV_STRTYP_PAG = 14;
  711      /*K* KV_STRTYP_PAG
  712      KV_STRTYP_PAG *          Not used.
  713      */
  714      %EQU KV_STRTYP_PRM = 15;
  715      /*K* KV_STRTYP_PRM
  716      KV_STRTYP_PRM            Prompt.  KV$SHRBFR_PRM.
14:56 JUL 28 '97 KV_GLBCNS_E.:E05SI                                        21   
  717      */
  718      %EQU KV_STRTYP_PTR = 16;
  719      /*K* KV_STRTYP_PTR
  720      KV_STRTYP_PTR            Pointers.  KV$PTR.
  721      */
  722      %EQU KV_STRTYP_REDBFR = 17;
  723      /*K* KV_STRTYP_REDBFR
  724      KV_STRTYP_REDBFR         Read buffer used to buffer "input" data.
  725      */
  726      %EQU KV_STRTYP_SRD = 18;
  727      /*K* KV_STRTYP_SRD
  728      KV_STRTYP_SRD            VDH Subordinate Real Device Context.  KV$SRD.
  729      */
  730      %EQU KV_STRTYP_SSN = 19;
  731      /*K* KV_STRTYP_SSN
  732      KV_STRTYP_SSN            VDH Session Context.  KV$SSN.
  733      */
  734      %EQU KV_STRTYP_SSNHDN = 20;
  735      /*K* KV_STRTYP_SSNHDN
  736      KV_STRTYP_SSNHDN         Session Heading.  KV$TITLE (shared).
  737      */
  738      %EQU KV_STRTYP_SSTINPFNCTBL = 21;
  739      /*K* KV_STRTYP_SSTINPFNCTBL
  740      KV_STRTYP_SSTINPFNCTBL   System Input Func.Table.  KV$INPFNCTBL(shared).
  741      */
  742      %EQU KV_STRTYP_STR = 22;
  743      /*K* KV_STRTYP_STR
  744      KV_STRTYP_STR            VDH Stream Context.  KV$STR.
  745      */
  746      %EQU KV_STRTYP_TRMTAB = 23;
  747      /*K* KV_STRTYP_TRMTAB
  748      KV_STRTYP_TRMTAB         Terminal tabs.  Byte array (shared).
  749      */
  750      %EQU KV_STRTYP_TRNTBL = 24;
  751      /*K* KV_STRTYP_TRNTBL
  752      KV_STRTYP_TRNTBL         Translation table.  KV$TRNTBL.
  753      */
14:56 JUL 28 '97 KV_GLBCNS_E.:E05SI                                        22   
  754      %EQU KV_STRTYP_TYPAHDBFR = 25;
  755      /*K* KV_STRTYP_TYPAHDBFR
  756      KV_STRTYP_TYPAHDBFR      Type-ahead buffer.  KV$TYPAHDBFR.
  757      */
  758      %EQU KV_STRTYP_USRINPFNCTBL = 26;
  759      /*K* KV_STRTYP_USRINPFNCTBL
  760      KV_STRTYP_USRINPFNCTBL   User Input Func. Table.  KV$INPFNCTBL(shared).
  761      */
  762      %EQU KV_STRTYP_USRBFR = 27;
  763      /*K* KV_STRTYP_USRBFR
  764      KV_STRTYP_USRBFR **      User Buffer.  Owned by RDH.
  765      */
  766      %EQU KV_STRTYP_USRSHRBFR = 28;
  767      /*K* KV_STRTYP_USRSHRBFR
  768      KV_STRTYP_USRSHRBFR **   User Shared Buffer.  Defined by RDH.
  769      */
  770      %EQU KV_STRTYP_VDI = 29;
  771      /*K* KV_STRTYP_VDI
  772      KV_STRTYP_VDI            Virtual Device Interface.  KV$VDI.
  773      */
  774      %EQU KV_STRTYP_VFU = 30;
  775      /*K* KV_STRTYP_VFU
  776      KV_STRTYP_VFU            KV$VFU (shared).
  777      */
  778      %EQU KV_STRTYP_ERD = 31;
  779      /*K* KV_STRTYP_ERD
  780      KV_STRTYP_ERD            Profile-dependent Context.  KV$ERD (shared).
  781      */
  782      %EQU KV_STRTYP_ENTSRD = 32;
  783      /*K* KV_STRTYP_ENTSRD
  784      KV_STRTYP_ENTSRD         Enter SRD string.
  785      */
  786      %EQU KV_STRTYP_TRCBFR = 33;
  787      /*K* KV_STRTYP_TRCBFR
  788      KV_STRTYP_TRCBFR         Trace Buffer.
  789      */
  790      %EQU KV_STRTYP_X364 = 34;
14:56 JUL 28 '97 KV_GLBCNS_E.:E05SI                                        23   
  791      /*K* KV_STRTYP_X364
  792      KV_STRTYP_X364           X364 context.  KV$X364.
  793      */
  794      %EQU KV_STRTYP_RCR = 35;
  795      /*K* KV_STRTYP_RCR
  796      KV_STRTYP_RCR            Record.  KV$RCR.
  797      */
  798      %EQU KV_STRTYP_RCRLST = 36;
  799      /*K* KV_STRTYP_RCRLST
  800      KV_STRTYP_RCRLST         RCR list.  KV$RCRLST.
  801      */
  802      %MEND;
  803
  804      %EQU KV_STRTYP_HI = 36;
  805
  806      /* Trace code definitions */
  807
  808      %MACRO KV#TRC_COD_E;
  809
  810      %EQU KV#TRC_COD_CALVDH = 1;             /* CALL to KVV$VDI                    */
  811      %EQU KV#TRC_COD_CALUSR = 2;             /* CALL to the VDH-user               */
  812
  813      %MEND;
  814
  815      /* Trace code definitions for VDH trace buffer. */
  816
  817      %MACRO KV#TRCENT_TYP_E;
  818
  819      %EQU KV#TRCENT_TYP_RCVSSN = 1;  /* Receive session (KNH) message */
  820      %EQU KV#TRCENT_TYP_SNDSSN = 2;  /* Send session (KNH) message */
  821      %EQU KV#TRCENT_TYP_USRVDI = 3;  /* VDI function (KV$USR) */
  822      %EQU KV#TRCENT_TYP_VDHVDI = 4;  /* VDI function (KV$VDH) */
  823      %EQU KV#TRCENT_TYP_RCVVDO = 5;  /* Receive presentation message (KV$VDO) */
  824      %EQU KV#TRCENT_TYP_SNDVDO = 6;  /* Send presentation message (KV$VDO) */
  825      %EQU KV#TRCENT_TYP_USRVDIEVT = 7;  /* VDI event (KV$USR) */
  826      %EQU KV#TRCENT_TYP_VDHVDIEVT = 8;  /* VDI event (KV$VDH) */
  827
14:56 JUL 28 '97 KV_GLBCNS_E.:E05SI                                        24   
  828      %MEND;
  829      /* VDH clock ids.  Indexes into KV$SSN.CLKSET. */
  830
  831      %MACRO KV_CLKNMB_E;
  832
  833      %EQU KV_CLKNMB_LGNTIMOUT = 0;           /* Logon timeout.                     */
  834      %EQU KV_CLKNMB_REDTIMOUT = 1;           /* Read timeout.                      */
  835      %EQU KV_CLKNMB_USRREDTIMOUT = 2;        /* User read timeout.                 */
  836      %EQU KV_CLKNMB_USRCLK1 = 4;             /* User clock 1.                      */
  837      %EQU KV_CLKNMB_USRCLK2 = 5;             /* User clock 2.                      */
  838      %EQU KV_CLKNMB_USRCLK3 = 6;             /* User clock 3.                      */
  839      %EQU KV_CLKNMB_USRCLK4 = 7;             /* User clock 4.                      */
  840
  841      %MEND;
  842
  843      /* I/O completion codes, for use with KV$VDH_DAT.CMPCOD. */
  844
  845      %MACRO KV_CMPCOD_E;
  846      /*F* NAME:  KV_CMPCOD_E
  847      */
  848
  849      %EQU KV_CMPCOD_NRM = 0;                 /* NORMAL                             */
  850      /*K* KV_CMPCOD_NRM
  851      KV_CMPCOD_NRM                 Normal completion.
  852      */
  853      %EQU KV_CMPCOD_EOF = 1;                 /* END OF FILE                        */
  854      /*K* KV_CMPCOD_EOF
  855      KV_CMPCOD_EOF                 End of file.
  856      */
  857      %EQU KV_CMPCOD_RATERR = 2;              /* CLA OVER-RUN (RATE ERROR)          */
  858      /*K* KV_CMPCOD_RATERR
  859      KV_CMPCOD_RATERR              CLA over-run (rate error).
  860      */
  861      %EQU KV_CMPCOD_PRTERR = 3;              /* PARITY ERROR                       */
  862      /*K* KV_CMPCOD_PRTERR
  863      KV_CMPCOD_PRTERR              Parity error.
  864      */
14:56 JUL 28 '97 KV_GLBCNS_E.:E05SI                                        25   
  865      %EQU KV_CMPCOD_REDTIMOUT = 4;           /* READ TIMED OUT                     */
  866      /*K* KV_CMPCOD_REDTIMOUT
  867      KV_CMPCOD_REDTIMOUT           Read timed out.
  868      */
  869      %EQU KV_CMPCOD_DSC = 5;                 /* DISCONNECTED                       */
  870      /*K* KV_CMPCOD_DSC
  871      KV_CMPCOD_DSC                 Disconnected.
  872      */
  873      %EQU KV_CMPCOD_BFROVRRUN = 6;           /* INPUT BUFFER OVER-RUN              */
  874      /*K* KV_CMPCOD_BFROVRRUN
  875      KV_CMPCOD_BFROVRRUN           Input buffer overrun.
  876      */
  877      %EQU KV_CMPCOD_BFRLMTEXC = 7;           /* BUFFER ALLOCATION EXCEEDED         */
  878      /*K* KV_CMPCOD_BFRLMTEXC
  879      KV_CMPCOD_BFRLMTEXC           Buffer allocation exceeded.
  880      */
  881      %EQU KV_CMPCOD_NOTINP = 10;             /* NOT INPUT (INPUT IS ILLEGAL)       */
  882      /*K* KV_CMPCOD_NOTINP
  883      KV_CMPCOD_NOTINP              Not input (input is illegal).
  884      */
  885      %EQU KV_CMPCOD_CLS = 11;                /* PURGED BECAUSE OF CLOSE REQUEST    */
  886      /*K* KV_CMPCOD_CLS
  887      KV_CMPCOD_CLS                 Purged because of close request.
  888      */
  889      %EQU KV_CMPCOD_DLT = 12;                /* DELETE OCCURRED                    */
  890      /*K* KV_CMPCOD_DLT
  891      KV_CMPCOD_DLT                 Delete occurred.
  892      */
  893      %EQU KV_CMPCOD_DVCERR = 13;             /* DEVICE ERROR                       */
  894      /*K* KV_CMPCOD_DVCERR
  895      KV_CMPCOD_DVCERR              Device error.
  896      */
  897
  898      %MEND;
  899
  900      /*F* NAME:  KV_DSCRSN_E
  901      Disconnect reason.  Used on KV$VDH_DSC.RSN. */
14:56 JUL 28 '97 KV_GLBCNS_E.:E05SI                                        26   
  902
  903      %MACRO KV_DSCRSN_E;
  904      %EQU KV_DSCRSN_LINDRP = 1;              /* LINE DROP                          */
  905      /*K* KV_DSCRSN_LINDRP
  906      KV_DSCRSN_LINDRP         Line drop.
  907      */
  908      %EQU KV_DSCRSN_PTH = 2;                 /* PATH-REQUESTED DISCONNECT          */
  909      /*K* KV_DSCRSN_PTH
  910      KV_DSCRSN_PTH            Path-requested disconnect.
  911      */
  912      %EQU KV_DSCRSN_FRG = 3;                 /* FROG-REQUESTED DISCONNECT          */
  913      /*K* KV_DSCRSN_FRG
  914      KV_DSCRSN_FRG            FROG-requested disconnect.
  915      */
  916      %EQU KV_DSCRSN_HRDERR = 4;              /* HARDWARE ERROR                     */
  917      /*K* KV_DSCRSN_HRDERR
  918      KV_DSCRSN_HRDERR         Hardware error.
  919      */
  920      %EQU KV_DSCRSN_SFTERR = 5;              /* SOFTWARE ERROR                     */
  921      /*K* KV_DSCRSN_SFTERR
  922      KV_DSCRSN_SFTERR         Software error.
  923      */
  924      %EQU KV_DSCRSN_PRTERR = 6;              /* PROTOCOL ERROR                     */
  925      /*K* KV_DSCRSN_PRTERR
  926      KV_DSCRSN_PRTERR         Protocol error.
  927      */
  928      %EQU KV_DSCRSN_RSRSHR = 7;              /* RESOURCE SHORTAGE                  */
  929      /*K* KV_DSCRSN_RSRSHR
  930      KV_DSCRSN_RSRSHR         Resource shortage.
  931      */
  932      %MEND;
  933
  934      /* Input operator indexes. */
  935
  936      %MACRO KV_INPOPRX_E;
  937
  938      %EQU KV_INPOPRX_INT = 1;                /* INITIALIZATION INPOPR INDEX        */
14:56 JUL 28 '97 KV_GLBCNS_E.:E05SI                                        27   
  939      %EQU KV_INPOPRX_PRGINP = 2;             /* PURGE INPUT INPOPR INDEX           */
  940      %EQU KV_INPOPRX_PRGOTP = 3;             /* PURGE OUTPUT INPOPR INDEX          */
  941      %EQU KV_INPOPRX_PRTERR = 4;             /* PARITY ERROR                       */
  942      %EQU KV_INPOPRX_RE_RED = 5;             /* RE_READ INPOPR INDEX               */
  943      %EQU KV_INPOPRX_RE_TYP = 6;             /* RE-TYPE INPOPR INDEX (FOR          */
  944      %EQU KV_INPOPRX_PRGRED = 7;             /* PURGE READ BUFFER                  */
  945      %EQU KV_INPOPRX_REDDATLST = 8;          /* READ DATA LOST INPOPR INDEX        */
  946      %EQU KV_INPOPRX_RSTINSMOD = 9;          /* RESET INSERT MODE                  */
  947
  948      %EQU KV_INPOPRX_HI = 13;                /* HI VALUE                           */
  949
  950      %MEND;
  951
  952
  953      /* Schedule reasons codes.  See KV_USR_EVT_ID_SCH. */
  954
  955
  956      %MACRO KV_SCHRSN_E;
  957
  958      %EQU KV_SCHRSN_SCH = 4;                 /* User asked for general schedule    */
  959      %EQU KV_SCHRSN_DFR0 = 0;                /* Deferred execution # 0             */
  960      %EQU KV_SCHRSN_DFR1 = 1;                /* Deferred execution # 1             */
  961      %EQU KV_SCHRSN_DFR2 = 2;                /* Deferred execution # 2             */
  962      %EQU KV_SCHRSN_DFR3 = 3;                /* Deferred execution # 3             */
  963
  964      %MEND;
  965
  966      /*F* NAME: KV_CLKUNT_E
  967      Clock unit definitions.
  968      Used on KV$VDH_SETCLK (set clock). */
  969
  970      %MACRO KV_CLKUNT_E;
  971      %EQU KV_CLKUNT_10_MS = 0;               /* 10 Millisecond units               */
  972      /*K* KV_CLKUNT_10_MS
  973      KV_CLKUNT_10_MS               10 Millisecond units               */
  974      %EQU KV_CLKUNT_SCN = 1;                 /* Second units                       */
  975      /*K* KV_CLKUNT_SCN
14:56 JUL 28 '97 KV_GLBCNS_E.:E05SI                                        28   
  976      KV_CLKUNT_SCN                 Second units                       */
  977      %EQU KV_CLKUNT_MNT = 2;                 /* Minute units                       */
  978      /*K* KV_CLKUNT_MNT
  979      KV_CLKUNT_MNT                 Minute units                       */
  980      %MEND;
  981
  982      /* Definitions of KV$MVD.ORGs. */
  983
  984      %MACRO KV#VD_ORG_E;
  985      /*F* NAME: KV#VD_ORG_E
  986      */
  987
  988      %EQU KV#VD_ORG_TERMINAL = 1;            /* SAME AS UR - JUST FOR CONVENIENCE  */
  989      /*K* KV#VD_ORG_TERMINAL
  990      .TRF ]#
  991      KV]VD_ORG_TERMINAL            Unit Record; same as UR
  992      .TRF ]]
  993      */
  994      %EQU KV#VD_ORG_UR = 1;                  /* UR/TERMINAL                        */
  995      /*K* KV#VD_ORG_UR
  996      .TRF ]#
  997      KV]VD_ORG_UR                  Unit Record; same as TERMINAL
  998      .TRF ]]
  999      */
 1000      %EQU KV#VD_ORG_X364 = 2;                /* X364                               */
 1001      /*K* KV#VD_ORG_X364
 1002      .TRF ]#
 1003      KV]VD_ORG_X364                X364
 1004      .TRF ]]
 1005      */
 1006      /* Values less than "FORM" may be shared by a window. */
 1007      /*K* KV#VD_ORG_FORM
 1008      .TRF ]#
 1009      KV]VD_ORG_FORM                FORM
 1010      .TRF ]]
 1011      */
 1012      %EQU KV#VD_ORG_FORM = 4;                /* FORM                               */
14:56 JUL 28 '97 KV_GLBCNS_E.:E05SI                                        29   
 1013      %EQU KV#VD_ORG_SE = 5;                  /* Screen Editor                      */
 1014      /*K* KV#VD_ORG_SE
 1015      .TRF ]#
 1016      KV]VD_ORG_SE                  Screen Editor
 1017      .TRF ]]
 1018      */
 1019      %EQU KV#VD_ORG_HI = 5;                  /* Hi value                           */
 1020
 1021      %MEND;
 1022      /*F* NAME:  KV#CQ_HNDID_E - Define circular queue handler IDs */
 1023      %MACRO KV#CQ_HNDID_E;
 1024      %EQU KV#CQ_HNDID_VDH = 0;               /* VDH                                */
 1025      %EQU KV#CQ_HNDID_SL  = 1;               /*  X.25 rfep connection              */
 1026      %EQU KV#CQ_HNDID_HI = 2;                /* Hi value (1 spare entry)           */
 1027      %MEND;
 1028      /*F* NAME: KV_GLBCNS_ALL_E - MACRO invoking all MACROs in KV_GLBCNS_E.
 1029      */
 1030      %MACRO KV_GLBCNS_ALL_E;
 1031      %KV_PHSPSTMOD_E;
 1032      %KV_PSTORG_E;
 1033      %KV_INPUNT_E;
 1034      %KV#DATMOD_E;
 1035      %KV_MRKTYP_E;
 1036      %KV_BFRRLSDSP_E;
 1037      %KV_PRTTYP_E;
 1038      %KV_DVCCTR_E;
 1039      %KV_ABSGRPRND_E;
 1040      %KV_LINLST_SLCFLDSTT_E;
 1041      %KV_OTPFNC_E;
 1042      %KV_PTR_STT_E;
 1043      %KV_VFC_E;
 1044      %KV_USR_FNC_E;
 1045      %KV_VDH_FNC_E;
 1046      %KV_USR_EVT_ID_E;
 1047      %KV_VDH_EVT_ID_E;
 1048      %KV_STRTYP_E;
 1049      %KV#TRC_COD_E;
14:56 JUL 28 '97 KV_GLBCNS_E.:E05SI                                        30   
 1050      %KV#TRCENT_TYP_E;
 1051      %KV_CLKNMB_E;
 1052      %KV_CMPCOD_E;
 1053      %KV_DSCRSN_E;
 1054      %KV_INPOPRX_E;
 1055      %KV_SCHRSN_E;
 1056      %KV_CLKUNT_E;
 1057      %KV#VD_ORG_E;
 1058      %KV#CQ_HNDID_E;
 1059      %MEND;

