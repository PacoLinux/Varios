

CC.C03    File=zbe$cf_loop:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=1  
        1         1             /* $Header: cf_loop.c,v 1.3 87/03/10 10:46:46 ceriel Exp $ */
        2         2             /*
        3         3              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        4         4              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        5         5              */
        6         6             /*  C O N T R O L   F L O W
        7         7              *
        8         8              *  C F _ L O O P . C
        9         9              */
       10        10
       11        11
       12        12             #include "types:h"
       13        13             #include "debug:h"
       14        14             #include "lset:h"
       15        15             #include "alloc:h"
       16        16             #include "aux:h"
       17        17             #include "cf:h"
       18        18
       19        19             #define MARK_STRONG(b)   b->b_flags |= BF_STRONG
       20        20             #define MARK_FIRM(b)  b->b_flags |= BF_FIRM
       21        21             #define BF_MARK    04
       22        22             #define MARK(b)    b->b_flags |= BF_MARK
       23        23             #define MARKED(b)  (b->b_flags&BF_MARK)
       24        24             #define INSIDE_LOOP(b,lp)  Lis_elem(b,lp->LP_BLOCKS)
       25        25
       26        26
       27        27
       28        28             /* The algorithm to detect loops that is used here is taken
       29        29              * from: Aho & Ullman, Principles of Compiler Design, section 13.1.
       30        30              * The algorithm uses the dominator relation between nodes
       31        31              * of the control flow graph:
       32        32              *  d DOM n => every path from the initial node to n goes through d.
       33        33              * The dominator relation is recorded via the immediate dominator tree
       34        34              * (b_idom field of bblock struct) from which the dominator relation
       35        35              * can be easily computed (see procedure 'dom' below).
       36        36              * The algorithm first finds 'back edges'. A back edge is an edge
CC.C03    File=zbe$cf_loop:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=2  
       37        37              * a->b in the flow graph whose head (b) dominates its tail (a).
       38        38              * The 'natural loop' of back edge n->d consists of those nodes
       39        39              * that can reach n without going through d. These nodes, plus d
       40        40              * form the loop.
       41        41              * The whole process is rather complex, because different back edges
       42        42              * may result in the same loop and because loops may partly overlap
       43        43              * each other (without one being nested inside the other).
       44        44              */
       45        45
       46        46
       47        47
       48        48             STATIC bool same_loop(l1,l2)
       49        49              loop_p l1,l2;
       50        50             {
       51        51    1         /* Two loops are the same if:
       52        52    1          * (1)  they have the same number of basic blocks, and
       53        53    1          * (2)  the head of the back edge of the first loop
       54        54    1          *      also is part of the second loop, and
       55        55    1          * (3)  the tail of the back edge of the first loop
       56        56    1          *      also is part of the second loop.
       57        57    1          */
       58        58    1
       59        59    1         return (l1->LP_COUNT == l2->LP_COUNT &&
       60        60    1            Lis_elem(l1->lp_entry, l2->LP_BLOCKS) &&
       61        61    1            Lis_elem(l1->lp_end,   l2->LP_BLOCKS));
       62        62    1        }
       63        63
       64        64
       65        65
       66        66             STATIC bool inner_loop(l1,l2)
       67        67              loop_p l1,l2;
       68        68             {
       69        69    1         /* Loop l1 is an inner loop of l2 if:
       70        70    1          * (1)  the first loop has fewer basic blocks than
       71        71    1          *      the second one, and
       72        72    1          * (2)  the head of the back edge of the first loop
       73        73    1          *      also is part of the second loop, and
CC.C03    File=zbe$cf_loop:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=3  
       74        74    1          * (3)  the tail of the back edge of the first loop
       75        75    1          *      also is part of the second loop.
       76        76    1          */
       77        77    1
       78        78    1         return (l1->LP_COUNT < l2->LP_COUNT &&
       79        79    1            Lis_elem(l1->lp_entry, l2->LP_BLOCKS) &&
       80        80    1            Lis_elem(l1->lp_end,   l2->LP_BLOCKS));
       81        81    1        }
       82        82
       83        83
       84        84
       85        85             STATIC insrt(b,lpb,s_p)
       86        86              bblock_p b;
       87        87              lset *lpb;
       88        88              lset *s_p;
       89        89             {
       90        90    1         /* Auxiliary routine used by 'natural_loop'.
       91        91    1          * Note that we use a set rather than a stack,
       92        92    1          * as Aho & Ullman do.
       93        93    1          */
       94        94    1
       95        95    1         if (!Lis_elem(b,*lpb)) {
       96        96    2            Ladd(b,lpb);
       97        97    2            Ladd(b,s_p);
       98        98    2         }
       99        99    1        }
      100       100
      101       101
      102       102             STATIC loop_p natural_loop(d,n)
      103       103              bblock_p d,n;
      104       104             {
      105       105    1         /* Find the basic blocks of the natural loop of the
      106       106    1          * back edge 'n->d' (i.e. n->d is an edge in the control
      107       107    1          * flow graph and d dominates n). The natural loop consists
      108       108    1          * of those blocks which can reach n without going through d.
      109       109    1          * We find these blocks by finding all predecessors of n,
      110       110    1          * up to d.
CC.C03    File=zbe$cf_loop:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=4  
      111       111    1          */
      112       112    1
      113       113    1         loop_p lp;
      114       114    1         bblock_p m;
      115       115    1         lset loopblocks;
      116       116    1         Lindex pi;
      117       117    1         lset s;
      118       118    1
      119       119    1         lp = newloop();
      120       120    1         lp->lp_extend = newcflpx();
      121       121    1         lp->LP_BLOCKS = (lset) 0;
      122       122    1         lp->lp_entry = d; /* loop entry block */
      123       123    1         lp->lp_end = n;      /* tail of back edge */
      124       124    1         s = Lempty_set();
      125       125    1         loopblocks = Lempty_set();
      126       126    1         Ladd(d,&loopblocks);
      127       127    1         insrt(n,&loopblocks,&s);
      128       128    1         while ((pi = Lfirst(s)) != (Lindex) 0) {
      129       129    2            m = (bblock_p) Lelem(pi);
      130       130    2            Lremove(m,&s);
      131       131    2            for (pi = Lfirst(m->b_pred); pi != (Lindex) 0;
      132       132    2                     pi = Lnext(pi,m->b_pred)) {
      133       133    3               insrt((bblock_p) Lelem(pi),&loopblocks,&s);
      134       134    3            }
      135       135    2         }
      136       136    1         lp->LP_BLOCKS = loopblocks;
      137       137    1         lp->LP_COUNT = Lnrelems(loopblocks);
      138       138    1         return lp;
      139       139    1        }
      140       140
      141       141
      142       142             STATIC loop_p org_loop(lp,loops)
      143       143              loop_p lp;
      144       144              lset   loops;
      145       145             {
      146       146    1         /* See if the loop lp was already found via another
      147       147    1          * back edge; if so return this loop; else return 0.
CC.C03    File=zbe$cf_loop:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=5  
      148       148    1          */
      149       149    1
      150       150    1         register Lindex li;
      151       151    1
      152       152    1         for (li = Lfirst(loops); li != (Lindex) 0; li = Lnext(li,loops)) {
      153       153    2            if (same_loop((loop_p) Lelem(li), lp)) {
      154       154    3        #ifdef DEBUG
      155       155    3               /* printf("messy loop found\n"); */
      156       156    3        #endif
      157       157    3               return (loop_p) Lelem(li);
      158       158    3            }
      159       159    2         }
      160       160    1         return (loop_p) 0;
      161       161    1        }
      162       162
      163       163
      164       164
      165       165             STATIC collapse_loops(loops_p)
      166       166              lset *loops_p;
      167       167             {
      168       168    1         register Lindex li1, li2;
      169       169    1         register loop_p lp1,lp2;
      170       170    1
      171       171    1         for (li1 = Lfirst(*loops_p); li1 != (Lindex) 0; li1 = Lnext(li1,*loops_p)) {
      172       172    2            lp1 = (loop_p) Lelem(li1);
      173       173    2            lp1->lp_level = (short) 0;
      174       174    2            for (li2 = Lfirst(*loops_p); li2 != (Lindex) 0;
      175       175    2                     li2 = Lnext(li2,*loops_p)) {
      176       176    3               lp2 = (loop_p) Lelem(li2);
      177       177    3               if (lp1 != lp2 && lp1->lp_entry == lp2->lp_entry) {
      178       178    4                   Ljoin(lp2->LP_BLOCKS,&lp1->LP_BLOCKS);
      179       179    4                   oldcflpx(lp2->lp_extend);
      180       180    4                   Lremove(lp2,loops_p);
      181       181    4               }
      182       182    3            }
      183       183    2         }
      184       184    1        }
CC.C03    File=zbe$cf_loop:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=6  
      185       185
      186       186
      187       187             STATIC loop_per_block(lp)
      188       188              loop_p lp;
      189       189             {
      190       190    1         bblock_p b;
      191       191    1
      192       192    1         /* Update the b_loops sets */
      193       193    1
      194       194    1         register Lindex bi;
      195       195    1
      196       196    1         for (bi = Lfirst(lp->LP_BLOCKS); bi != (Lindex) 0;
      197       197    1            bi = Lnext(bi,lp->LP_BLOCKS)) {
      198       198    2               b = (bblock_p) Lelem(bi);
      199       199    2               Ladd(lp,&(b->b_loops));
      200       200    2         }
      201       201    1        }
      202       202
      203       203
      204       204
      205       205             STATIC loop_attrib(loops)
      206       206              lset loops;
      207       207             {
      208       208    1         /* Compute several attributes */
      209       209    1
      210       210    1         register Lindex li;
      211       211    1         register loop_p lp;
      212       212    1         loop_id lastlpid = 0;
      213       213    1
      214       214    1         for (li = Lfirst(loops); li != (Lindex) 0; li = Lnext(li,loops)) {
      215       215    2            lp = (loop_p) Lelem(li);
      216       216    2            lp->lp_id = ++lastlpid;
      217       217    2            loop_per_block(lp);
      218       218    2         }
      219       219    1        }
      220       220
      221       221
CC.C03    File=zbe$cf_loop:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=7  
      222       222
      223       223             STATIC nest_levels(loops)
      224       224              lset loops;
      225       225             {
      226       226    1         /* Compute the nesting levels of all loops of
      227       227    1          * the current procedure. For every loop we just count
      228       228    1          * all loops of which the former is an inner loop.
      229       229    1          * The running time is quadratic in the number of loops
      230       230    1          * of the current procedure. As this number tends to be
      231       231    1          * very small, there is no cause for alarm.
      232       232    1          */
      233       233    1
      234       234    1         register Lindex li1, li2;
      235       235    1         register loop_p lp;
      236       236    1
      237       237    1         for (li1 = Lfirst(loops); li1 != (Lindex) 0; li1 = Lnext(li1,loops)) {
      238       238    2            lp = (loop_p) Lelem(li1);
      239       239    2            lp->lp_level = (short) 0;
      240       240    2            for (li2 = Lfirst(loops); li2 != (Lindex) 0;
      241       241    2                     li2 = Lnext(li2,loops)) {
      242       242    3               if (inner_loop(lp,(loop_p) Lelem(li2))) {
      243       243    4                  lp->lp_level++;
      244       244    4               }
      245       245    3            }
      246       246    2         }
      247       247    1        }
      248       248
      249       249
      250       250             STATIC cleanup(loops)
      251       251              lset loops;
      252       252             {
      253       253    1         /* Throw away the LP_BLOCKS sets */
      254       254    1
      255       255    1         register Lindex i;
      256       256    1
      257       257    1         for (i = Lfirst(loops); i != (Lindex) 0; i = Lnext(i,loops)) {
      258       258    2            Ldeleteset(((loop_p) Lelem(i))->LP_BLOCKS);
CC.C03    File=zbe$cf_loop:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=8  
      259       259    2         }
      260       260    1        }
      261       261
      262       262
      263       263             STATIC bool does_exit(b,lp)
      264       264              bblock_p b;
      265       265              loop_p   lp;
      266       266             {
      267       267    1         /* See if b may exit the loop, i.e. if it
      268       268    1          * has a successor outside the loop
      269       269    1          */
      270       270    1
      271       271    1         Lindex i;
      272       272    1
      273       273    1         for (i = Lfirst(b->b_succ); i != (Lindex) 0; i = Lnext(i,b->b_succ)) {
      274       274    2            if (!INSIDE_LOOP(Lelem(i),lp)) return TRUE;
      275       275    2         }
      276       276    1         return FALSE;
      277       277    1        }
      278       278
      279       279
      280       280             STATIC mark_succ(b,lp)
      281       281              bblock_p b;
      282       282              loop_p   lp;
      283       283             {
      284       284    1         Lindex i;
      285       285    1         bblock_p succ;
      286       286    1
      287       287    1         for (i = Lfirst(b->b_succ); i != (Lindex) 0; i = Lnext(i,b->b_succ)) {
      288       288    2            succ = (bblock_p) Lelem(i);
      289       289    2            if (succ != b && succ != lp->lp_entry && INSIDE_LOOP(succ,lp) &&
      290       290    2               !MARKED(succ)) {
      291       291    3               MARK(succ);
      292       292    3               mark_succ(succ,lp);
      293       293    3            }
      294       294    2         }
      295       295    1        }
CC.C03    File=zbe$cf_loop:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=9  
      296       296
      297       297
      298       298             STATIC mark_blocks(lp)
      299       299              loop_p lp;
      300       300             {
      301       301    1         /* Mark the strong and firm blocks of a loop.
      302       302    1          * The last set of blocks consists of the end-block
      303       303    1          * of the loop (i.e. the head of the back edge
      304       304    1          * of the natural loop) and its dominators
      305       305    1          * (including the loop entry block, i.e. the
      306       306    1          * tail of the back edge).
      307       307    1          */
      308       308    1
      309       309    1         register bblock_p b;
      310       310    1
      311       311    1         /* First mark all blocks that are the successor of a
      312       312    1          * block that may exit the loop (i.e. contains a
      313       313    1          * -possibly conditional- jump to somewhere outside
      314       314    1          * the loop.
      315       315    1          */
      316       316    1
      317       317    1         if (lp->LP_MESSY) return; /* messy loops are hopeless cases */
      318       318    1         for (b = lp->lp_entry; b != (bblock_p) 0; b = b->b_next) {
      319       319    2            if (!MARKED(b) && does_exit(b,lp)) {
      320       320    3               mark_succ(b,lp);
      321       321    3            }
      322       322    2         }
      323       323    1
      324       324    1         /* Now find all firm blocks. A block is strong
      325       325    1          * if it is firm and not marked.
      326       326    1          */
      327       327    1
      328       328    1         for (b = lp->lp_end; ; b = b->b_idom) {
      329       329    2            MARK_FIRM(b);
      330       330    2            if (!MARKED(b)) {
      331       331    3               MARK_STRONG(b);
      332       332    3            }
CC.C03    File=zbe$cf_loop:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=10 
      333       333    2            if (b == lp->lp_entry) break;
      334       334    2         }
      335       335    1        }
      336       336
      337       337
      338       338
      339       339             STATIC mark_loopblocks(loops)
      340       340              lset loops;
      341       341             {
      342       342    1         /* Determine for all loops which basic blocks
      343       343    1          * of the loop are strong (i.e. are executed
      344       344    1          * during every iteration) and which blocks are
      345       345    1          * firm (i.e. executed during every iteration with
      346       346    1          * the only possible exception of the last one).
      347       347    1          */
      348       348    1
      349       349    1         Lindex i;
      350       350    1         loop_p lp;
      351       351    1
      352       352    1         for (i = Lfirst(loops); i != (Lindex) 0; i = Lnext(i,loops)) {
      353       353    2            lp = (loop_p) Lelem(i);
      354       354    2            mark_blocks(lp);
      355       355    2         }
      356       356    1        }
      357       357
      358       358
      359       359
      360       360             loop_detection(p)
      361       361              proc_p p;
      362       362             {
      363       363    1         /* Find all natural loops of procedure p. Every loop is
      364       364    1          * assigned a unique identifying number, a set of basic
      365       365    1          * blocks, a loop entry block and a nesting level number.
      366       366    1          * Every basic block is assigned a nesting level number
      367       367    1          * and a set of loops it is part of.
      368       368    1          */
      369       369    1
CC.C03    File=zbe$cf_loop:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=11 
      370       370    1         lset loops;  /* the set of all loops */
      371       371    1         loop_p lp,org;
      372       372    1         register bblock_p b;
      373       373    1         bblock_p s;
      374       374    1         Lindex si;
      375       375    1
      376       376    1         loops = Lempty_set();
      377       377    1         for (b = p->p_start; b != (bblock_p) 0; b = b->b_next) {
      378       378    2            for (si = Lfirst(b->b_succ); si != (Lindex) 0;
      379       379    2                        si = Lnext(si,b->b_succ)) {
      380       380    3               s = (bblock_p) Lelem(si);
      381       381    3               if (dom(s,b)) {
      382       382    4                  /* 'b->s' is a back edge */
      383       383    4                  lp = natural_loop(s,b);
      384       384    4                  if ((org = org_loop(lp,loops)) == (loop_p) 0) {
      385       385    5                     /* new loop */
      386       386    5                     Ladd(lp,&loops);
      387       387    5                  } else {
      388       388    5                     /* Same loop, generated by several back
      389       389    5                      * edges; such a loop is called a messy
      390       390    5                      * loop.
      391       391    5                      */
      392       392    5                     org->LP_MESSY = TRUE;
      393       393    5                     Ldeleteset(lp->LP_BLOCKS);
      394       394    5                     oldcflpx(lp->lp_extend);
      395       395    5                     oldloop(lp);
      396       396    5                  }
      397       397    4               }
      398       398    3            }
      399       399    2         }
      400       400    1         collapse_loops(&loops);
      401       401    1         loop_attrib(loops);
      402       402    1         nest_levels(loops);
      403       403    1         mark_loopblocks(loops); /* determine firm and strong blocks */
      404       404    1         cleanup(loops);
      405       405    1         p->p_loops = loops;
      406       406    1        }
CC.C03    File=zbe$cf_loop:c.:ZBC3TSI                                               Fri Aug 22 1997  Page=12 
      407       407
---  Include file information  ---

   zbe$types:h.:ZBC3TOU. is referenced
   zbe$debug:h.:ZBC3TOU. is referenced
   zbe$lset:h.:ZBC3TOU. is referenced
   zbe$alloc:h.:ZBC3TOU. is referenced
   zbe$aux:h.:ZBC3TOU. is referenced
   zbe$cf:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbe$cf_loop:c.:ZBC3TSI
