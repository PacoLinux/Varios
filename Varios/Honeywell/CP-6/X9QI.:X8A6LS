
     DIRECTORY AND SEGMENT LIST  (OBJECT UNIT NAME '')

      * SYMDEF *        GLOBAL NAME               SEGMENT  OFFSET      ACCESS ATTRIBUTES
     1  X9QI   'X9QI'                              .X9QI       0          R  W  E  L  U

      * SYMREF *        GLOBAL NAME                                    ACCESS ATTRIBUTES
     2  X9QQ   'X9QQ'                                                     R  W  E  L  U
     3  X8ER   'X8ER$ERROR'                                               R  W  E  L  U

      * SECTION *          SIZE          KIND
     4  .X9QI               160           CODE
     5  .X9QI.               45           DATA


     PROGRAM BREAK         225

                                      1 *M*
                                      2 *T***********************************************************
                                      3 *T*                                                         *
                                      4 *T* COPYRIGHT (C) BULL HN INFORMATION SYSTEMS INC., 1997    *
                                      5 *T*                                                         *
                                      6 *T***********************************************************
                        000000        7        SECT    .X9QI,CODE
                                      8 *P*
                                      9 *P*
                                     10 *P*     NAME       : X9QI
                                     11 *P*     AUTHOR     : JIM B. BEHM
                                     12 *P*     PURPOSE    : COMPUTES EXPONENTIATION OF A DOUBLE FLOAT BASE TO
                                     13 *P*                  INTEGER EXPONENT IN A HIGHLY OPTIMIZED FASHION.
                                     14 *P*
                                     15 *P*
                                     16 *D*
                                     17 *D*
                                     18 *D*     NAME       : X9QI
                                     19 *D*     CALL       :   . . .
                                     20 *D*                  EPPRO    NEWARG
                                     21 *D*                  EPPR4    DBLGUY
                                     22 *D*                  STP4     NEWARG
                                     23 *D*                  EPPR4    INTGUY
                                     24 *D*                  STP4     NEWARG+1
                                     25 *D*                  EPPR4    DBLRES
                                     26 *D*                  STP4     NEWARG+2
                                     27 *D*                  EPPR1    NUMARG
                                     28 *D*                  TSX1     X9QI
                                     29 *D*                    . . .
                                     30 *D*           NEWARG BSS      3
                                     31 *D*           NUMARG VFD      18/3,18/0
                                     32 *D*                    . . .
                                     33 *D*     INTERFACE  : 1.) X9QQ - FOR EXPONENTS >= 1024 EXQQ IS
                                     34 *D*                      CALLED FOR THE LOGARITHM METHOD WHICH IS
                                     35 *D*                      QUICKER FOR LARGE NUMBERS.
                                     36 *D*     INPUT      : 1.) DOUBLE FLOATING BASE
                                     37 *D*                  2.) INTEGER EXPONENT

                                     38 *D*     OUTPUT     : DOUBLE FLOATING RESULT
                                     39 *D*     SCRATCH    : NONE
                                     40 *D*     REFERENCE  : X8LC$DOCUMENT, J. R. WILSON FOR THE ALGORITHM.
                                     41 *D*
                                     42 *D*
                                     43 *V*
                                     44 *V*
                                     45 *V*                    GENERAL_ALGORITHM
                                     46 *V*
                                     47 *V*     THE GENERAL ALGORITHM IS :
                                     48 *V*
                                     49 *V*                1.) TEST FOR SPECIAL CASES.
                                     50 *V*
                                     51 *V*                    A.) EXPONENT OF ZERO
                                     52 *V*                    B.) EXPONENT OF ONE
                                     53 *V*
                                     54 *V*                2.) IF EXPONENT IS >= 1024 THEN CALL X9QQ
                                     55 *V*
                                     56 *V*                3.) COMPUTE PARTIAL SUMS:
                                     57 *V*
                                     58 *V*                    BASE, BASE ** 2, BASE ** 4, BASE ** 8 ETC
                                     59 *V*                    UNTIL THE NEXT EXPONENT OF THE PARTIAL SUM
                                     60 *V*                    GREATER THAN THE INPUT EXPONENT.
                                     61 *V*
                                     62 *V*                    NOTE : EACH PARTIAL SUM IS COMPUTED BY SQUARING
                                     63 *V*                           THE PREVIOUS PARTIAL SUM.
                                     64 *V*
                                     65 *V*                4.) TAKE THE LARGEST PARTIAL SUM AND PUT IT IN
                                     66 *V*                    THE ANSWER, SUBTRACT THE EXPONENT USED IN
                                     67 *V*                    COMPUTING THE PARTIAL SUM FROM THE INPUT
                                     68 *V*                    EXPONENT, REPEAT USING THHE NEXT SMALLEST
                                     69 *V*                    PARTIAL SUM UNTIL THE EXPONENT IS ZERO,
                                     70 *V*                    AFTER EACH ITERATION MULTIPLYING THE PREVIOUS
                                     71 *V*                    ANSWER BY THE NEXT PARTIAL SUM.
                                     72 *V*
                                     73 *V*
                        000000       74        ENTDEF  X9QI

                        000000       75        ENTREF  X9QQ
                        000000       76        ENTREF  (X8ER,X8ER$ERROR)
                                     77 *
                        000000       78 X9QI   NULL
                                     79 *
      000000 000000 7530 00 010NN    80        SREG    REG
      000001 000041 4574 00 010NN    81        STP7    PR7
      000002 000042 4564 00 010NN    82        STP6    PR6
      000003 000043 4554 00 010NN    83        STP5    PR5
      000004 000044 4544 00 010NN    84        STP4    PR4
      000005 000000 2250 03          85        LDX5    =0,DU      CLEAR NEGATIVE EXPONENT FLAG.
      000006 000000 4775 00          86        LDP7    0,,0
      000007 000001 4765 00          87        LDP6    1,,0
      000010 000002 4755 00          88        LDP5    2,,0
      000011 600000 2351 00          89        LDA     0,,6
      000012 000021 6054 00 010NN    90        TPNZ    NXTEST     EXPONENT > 0
      000013 000017 6000 00 010NN    91        TZE     EXZERO     EXPONENT = 0

                                     93 *V*
                                     94 *V*            EXPONENT_IS_NEGATIVE
                                     95 *V*
                                     96 *V*      IT HAS BEEN DETERMINED THAT THE EXPONENT IS NEGATIVE
                                     97 *V*  SO, NEGATE THE EXPONENT AND SET THE NEGATIVE EXPONENT FLAG;
                                     98 *V*  THEN TREAT AS POSITIVE UNTIL EXIT.  AT THE EXIT INVERT THE RESULT.
                                     99 *V*
      000014 000000 5310 00         100        NEG                NEGATE THE NEGATIVE EXPONENT.
      000015 000001 2250 03         101        LDX5    =1,DU      SET NEG EXP FLAG.
      000016 000025 7100 00 010NN   102        TRA     NT1OR0

                                    104 *V*
                                    105 *V*
                                    106 *V*            EXPONENT_IS_ZERO
                                    107 *V*
                                    108 *V*     IF THE POWER IS ZERO THEN THE ANSWER WILL BE ONE AND THE
                                    109 *V*     EXPONENTIATION WILL BE DONE.
                                    110 *V*
                                    111 *V*
                        000017      112 EXZERO NULL
      000017 000146 4330 00 010NN   113        DFLD    =1.0DX0
      000020 000110 7100 00 010NN   114        TRA     EXIT

                        000021      116 NXTEST NULL
                                    117 *
      000021 000001 1150 07         118        CMPA    =1,DL          IS EXPONENT ONE
      000022 000025 6010 00 010NN   119        TNZ     NT1OR0         NO, NOT ONE
                                    120 *V*
                                    121 *V*
                                    122 *V*            EXPONENT_IS_ONE
                                    123 *V*
                                    124 *V*     IF THE POWER IS ONE THEN THE ANSWER IS THE BASE.  THE
                                    125 *V*     EXPONENTIATION IS DONE.
                                    126 *V*
                                    127 *V*
      000023 700000 4331 00         128        DFLD    0,,7
      000024 000110 7100 00 010NN   129        TRA     EXIT

                        000025      131 NT1OR0 NULL
                                    132 *V*
                                    133 *V*
                                    134 *V*            EXPONENT_GREATER_THAN_1K
                                    135 *V*
                                    136 *V*     IF THE POWER IS GREATER THAN 1K THEN IT WOULD BE MORE
                                    137 *V*     EFFICIENT TO CALL X9QQ FOR THESE CASES.  THE CALLING
                                    138 *V*     SEQUENCE NEED NOT BE ADJUSTED, BUT THE EXPONENT MUST BE
                                    139 *V*     CONVERTED TO DOUBLE FLOAT.
                                    140 *V*
                                    141 *V*
      000025 002000 1150 07         142        CMPA    =1024,DL       IS EXPONENT GREATER THAN 1K
      000026 000041 6040 00 010NN   143        TMI     ALLOK
      000027 000000 2360 07         144        LDQ     0,DL
      000030 020000 4110 03         145        LDE     =8192,DU       THIS SEQUENCE OF INSTRUCTIONS CONVERTS
      000031 000003 7370 00         146        LLS     3              AN INTEGER NUMBER TO A REAL NUMBER AND
      000032 000000 5730 00         147        FNO     0              CALLS X9QQ.
      000033 000036 4570 00 010NN   148        DFST    TMPEXP
      000034 000036 6344 00 010NN   149        EPPR4   TMPEXP
      000035 000001 4545 00         150        STP4    1,,0
      000036 000000 7100 00 020NN   151        TRA     X9QQ
      000037 000000 0110 07         152        NOP     0,DL
      000040 000110 7100 00 010NN   153        TRA     EXIT
                                    154 *

                        000041      156 ALLOK  NULL
                                    157 *
                                    158 *V*
                                    159 *V*
                                    160 *V*                    INITIALIZE
                                    161 *V*
                                    162 *V*     THE INDEXES TO THE PARTIAL RESULTS AND TO THE TABLES
                                    163 *V*     FOR THE BOUNDRIES FOR COMPARISONS.  THE INDEXES FOR
                                    164 *V*     THE PARTIAL RESULTS SHOULD BE INCREMENTED BY 2 AFTER
                                    165 *V*     EACH ADDITION TO IT TO HAVE ENOUGH SPACE FOR A POSSIBLE^
                                    166 *V*     2 WORDS IN LENGTH.
                                    167 *V*
                                    168 *V*
      000041 000040 7550 00 010NN   169        STA     EXPONT
      000042 000000 2220 03         170        LDX2    0,DU
      000043 000000 2230 03         171        LDX3    0,DU
      000044 700000 4331 00         172        DFLD    0,,7           GET THE BASE
      000045 000010 4570 13 010NN   173        DFST    PAREXP,3
      000046 000002 0630 03         174        ADX3    2,DU
      000047 000001 0620 03         175        ADX2    1,DU

                                    177 *
                        000050      178 EXPINC NULL
                                    179 *
                                    180 *V*
                                    181 *V*
                                    182 *V*                    COMPUTE_PARTIAL_RESULTS
                                    183 *V*
                                    184 *V*     COMPUTE THE PARTIAL RESULTS FROM THE BASE.  KEEP ON
                                    185 *V*     COMPUTING UNTIL THE EXPONENT IS LESS THAN THE EQUIVALENT
                                    186 *V*     EXPONENT OF THE BOUND TABLE ( EXPBND ), EG.
                                    187 *V*
                                    188 *V*             PARTIAL RESULTS         EXPBND
                                    189 *V*             ---------------         ------
                                    190 *V*
                                    191 *V*   4 ** 7 =   PR(1) = 4                1     = BASE ** EXPBND(1)
                                    192 *V*                      16               2        "         "   2
                                    193 *V*                      256              4        "         "   3
                                    194 *V*                      65536            8         "         "   4
                                    195 *V*
                                    196 *V*     WE WOULD STOP BUILDING THE PR TABLE WHEN THE EXPBND WAS
                                    197 *V*     GREATER THAN THE EXPONENT  =  8  >  7  =.  THE COMPUT-
                                    198 *V*     ATIONS COME LATER TO GET THE ANSWER.
                                    199 *V*
                                    200 *V*
      000050 000006 4330 13 010NN   201        DFLD    PAREXP-2,3     GET THE PREVIOUS ITERATION(MULTIPLE)
      000051 000006 4630 13 010NN   202        DFMP    PAREXP-2,3     SQUARE IT
      000052 000010 4720 13 010NN   203        DFSTR   PAREXP,3       AND STORE IT(THIS ITERATION'S MULTIPLE)
      000053 000002 0630 03         204        ADX3    2,DU
      000054 000001 0620 03         205        ADX2    1,DU
      000055 000012 1020 03         206        CMPX2   =10,DU         IS X2 OUT OF THE RANGE( OUT OF BOUNDS
                                    207 *                             OF EXPBND )
      000056 000062 6000 00 010NN   208        TZE     X2EXIT
      000057 000120 2350 12 010NN   209        LDA     EXPBND,2
      000060 000040 1150 00 010NN   210        CMPA    EXPONT         COMPARE THE EXPONT TO THIS ITERATIONS
                                    211 *                             BOUNDRY - EXPBND <= EXPONT ?
      000061 000050 6044 00 010NN   212        TMOZ    EXPINC
                                    213 *

                                    214 *
                                    215 *                             NOW THE MULTIPLE( PARTIAL RESULTS )
                                    216 *                             TABLE IS BUILT SO JUST DECREMENT X2
                                    217 *                             TEST, AND GO AGAIN.
                                    218 *
                        000062      219 X2EXIT NULL
                                    220 *
                                    221 *V*
                                    222 *V*
                                    223 *V*                    DECREMENT_COUNTERS
                                    224 *V*
                                    225 *V*     THE COUNTERS ARE NOW AT ONE GREATER THAN WE NEED SO WE
                                    226 *V*     SUBTRACT THE NEEDED AMOUNT FOR EACH TABLE.
                                    227 *V*
                                    228 *V*
      000062 000001 1620 03         229        SBX2    1,DU
      000063 000002 1630 03         230        SBX3    2,DU
      000064 000150 4330 00 010NN   231        DFLD    =1.0DX0
      000065 000034 4570 00 010NN   232        DFST    ANSWER

                                    234 *
                        000066      235 COMPUT NULL
                                    236 *
                                    237 *V*
                                    238 *V*
                                    239 *V*                    COMPUTE_ANSWER
                                    240 *V*
                                    241 *V*     THE ANSWER IS COMPUTED BY COMPARING THE EXPONENT TO
                                    242 *V*     THE EXPONENT BOUND CURRENTLY OBTAINED BY THE OFFSET.
                                    243 *V*     IF THE EXPONENT IS LARGER THAN THE EXPONENT BOUND THEN
                                    244 *V*     WE USE THAT CURRENT PARTIAL RESULT AND MULTIPLY IT BY
                                    245 *V*     THE CURRENT ANSWER AND REPLACING IN THE CURRENT ANSWER.
                                    246 *V*     IF THE EXPONENT IS LESS THAN THE EXPONENT BOUND THEN GO
                                    247 *V*     AND SUBTRACT THE INDEXES TO GET ONE LESS ENTRY IN THE
                                    248 *V*     EXPBND TABLE OR THE NEXT LESS.  THEN REPEAT THIS PROCESS
                                    249 *V*     AND SUBTRACT THE EXPBND EXPONENT FROM THE EXPONENT EACH
                                    250 *V*     TIME OR UNTIL THE EXPONENT IS ZERO.
                                    251 *V*
                                    252 *V*
      000066 000040 2350 00 010NN   253        LDA     EXPONT
      000067 000120 1150 12 010NN   254        CMPA    EXPBND,2
      000070 000077 6044 00 010NN   255        TMOZ    SUBX2
      000071 000034 4330 00 010NN   256        DFLD    ANSWER
      000072 000010 4630 13 010NN   257        DFMP    PAREXP,3
      000073 000034 4720 00 010NN   258        DFSTR   ANSWER
      000074 000040 2350 00 010NN   259        LDA     EXPONT
      000075 000132 1750 12 010NN   260        SBA     EXPSUB,2
      000076 000040 7550 00 010NN   261        STA     EXPONT
                                    262 *
                        000077      263 SUBX2  NULL
                                    264 *
      000077 000001 1620 03         265        SBX2    1,DU
      000100 000002 1630 03         266        SBX3    2,DU
      000101 000000 1020 03         267        CMPX2   =0,DU          WHEN X0 IS LESS THAN ZERO WE ARE DONE
      000102 000066 6050 00 010NN   268        TPL     COMPUT
                                    269 *
                                    270 *

      000103 000034 4330 00 010NN   271        DFLD    ANSWER
      000104 000000 1050 03         272        CMPX5   =0,DU          NEGATIVE EXPONENT?
      000105 000110 6000 00 010NN   273        TZE     EXIT
                                    274 *
                                    275 *   WE HAD A NEATIVE EXPONENT SO THE REAL ANSWER IS 1/X.
                                    276 *
      000106 000152 4330 00 010NN   277        DFLD    =1.0DX0
      000107 000034 5670 00 010NN   278        DFDV    ANSWER
                                    279 *
                        000110      280 EXIT   NULL
      000110 500000 4721 00         281        DFSTR   0,,5          STORE THE RESULT.
                                    282 *
      000111 000000 0730 00 010NN   283        LREG    REG
      000112 000041 4774 00 010NN   284        LDP7    PR7
      000113 000042 4764 00 010NN   285        LDP6    PR6
      000114 000043 4754 00 010NN   286        LDP5    PR5
      000115 000044 4744 00 010NN   287        LDP4    PR4
                                    288 *
      000116 000001 7100 11         289        TRA     1,1            NORMAL RETURN
                                    290 *
                                    291 *
                                    292 *              CONSTANTS AND TABLES
                                    293 *
                                    294 *
      000117 000000011007
                        000120      295        EVEN
      000120 000000000000           296 EXPBND DEC     0,1,3,7,15,31,63,127,255,511
      000121 000000000001
      000122 000000000003
      000123 000000000007
      000124 000000000017
      000125 000000000037
      000126 000000000077
      000127 000000000177
      000130 000000000377
      000131 000000000777
      000132 000000000000           297 EXPSUB DEC     0,2,4,8,16,32,64,128,256,512

      000133 000000000002
      000134 000000000004
      000135 000000000010
      000136 000000000020
      000137 000000000040
      000140 000000000100
      000141 000000000200
      000142 000000000400
      000143 000000001000
                        000000      298        SECT    .X9QI.,DATA
                                    299 *
                                    300 *
                                    301 *              TEMPS, ETC...
                                    302 *
                                    303 *
                        000000      304        EIGHT
                        000000      305 REG    BSS     8
                        000010      306        EVEN
                        000010      307 PAREXP BSS     20
                        000034      308 ANSWER BSS     2
                        000036      309 TMPEXP BSS     2
                        000040      310 EXPONT BSS     1
                        000041      311 PR7    BSS     1
                        000042      312 PR6    BSS     1
                        000043      313 PR5    BSS     1
                        000044      314 PR4    BSS     1
                                    315 *
          LITERALS OF SECTION .X9QI
      000146 002040000000
      000147 000000000000
      000150 002040000000
      000151 000000000000
      000152 002040000000
      000153 000000000000
                                    316        END
 GMAP6 VERSION/ASSEMBLY DATES  JNPA NO TTL/2(_00]      JNPB NO TTL/2(_00]      JNPC NO TTL/2(_00]
 THERE WERE    NO  WARNING FLAGS IN THE ABOVE ASSEMBLY

                             OCTAL    SYMBOL   * KIND *      REFERENCES BY ALTER NO. AN
    41   ALLOK    REL   .X9QI    156  143T  156
    34   ANSWER   REL   .X9QI.   308  232W  256R  258W  271R  278R  308
    66   COMPUT   REL   .X9QI    235  235   268T
   110   EXIT     REL   .X9QI    280  114T  129T  153T  273T  280
   120   EXPBND   REL   .X9QI    296  209R  254R  296
    50   EXPINC   REL   .X9QI    178  178   212T
    40   EXPONT   REL   .X9QI.   310  169W  210R  253R  259R  261W  310
   132   EXPSUB   REL   .X9QI    297  260R  297
    17   EXZERO   REL   .X9QI    112   91T  112
  6000   .X9QI    SEC   SECT       7    7
  6001   .X9QI.   SEC   SECT     298  298
    25   NT1OR0   REL   .X9QI    131  102T  119T  131
    21   NXTEST   REL   .X9QI    116   90T  116
    10   PAREXP   REL   .X9QI.   307  173W  201R  202R  203W  257R  307
    44   PR4      REL   .X9QI.   314   84W  287R  314
    43   PR5      REL   .X9QI.   313   83W  286R  313
    42   PR6      REL   .X9QI.   312   82W  285R  312
    41   PR7      REL   .X9QI.   311   81W  284R  311
     0   REG      REL   .X9QI.   305   80W  283R  305
    77   SUBX2    REL   .X9QI    263  255T  263
    36   TMPEXP   REL   .X9QI.   309  148W  149   309
    62   X2EXIT   REL   .X9QI    219  208T  219
NO VAL   X8ER     EXT   SYMREF         76
     0   X9QI     REL   .X9QI     78   74    78
NO VAL   X9QQ     EXT   SYMREF         75   151T
