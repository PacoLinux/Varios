

CC.C02    File=xb_hsearch:c.:XBC3TSI                                                Fri Jan  6 1995  Page=1  
        1         1             /*M*  hsearch hcreate hdestroy   -- Insert/find/create/delete items in a hash
                               table */
        2         2
        3         3             #include <stdio.h>
        4         4             #include <stdlib.h>
        5         5             #include <search.h>
        6         6
        7         7             static   int   M = -1;
        8         8             static   int   N = -1;
        9         9             static   ENTRY *TABLE = 0;
       10        10
       11        11             const    int   prime_vals[40] = {151, 601, 1021, 1483, 2083,
       12        12    1                                         2689, 3559, 4129, 6271, 8221,
       13        13    1                                         10141, 12073, 14389, 16453, 18289,
       14        14    1                                         20509, 22861, 24919, 27109, 29881,
       15        15    1                                         32719, 34849, 36931, 38923, 40849,
       16        16    1                                         44131, 48991, 52183, 56809, 60661,
       17        17    1                                         65701, 70621, 72169, 76423, 83563,
       18        18    1                                         87253, 91129, 94531, 98389, 102301};
       19        19
       20        20             static   int   hash(char *, int *, int);
       21        21
       22        22             /*F*    NAME:    hsearch
       23        23                     PURPOSE:  The hsearch function is a hash-table search table
       24        24                               routine generalized from Knuth (6.4) Algorithm D.
       25        25                     DESCRIPTION:
       26        26                               This function returns a pointer into a hash-table
       27        27                               indicating the location at which the entry can be
       28        28                               found.  The argument item is a structure of type
       29        29                               ENTRY containing 2 pointers: item.key points to
       30        30                               be the comparison key and item.data points to the
       31        31                               data to be associated with the key.  The argument
       32        32                               action is a member of an enumerationtype ACTION
       33        33                               indicating the disposition of the entry if it can
       34        34                               not be found in the table.  ENTER indicates to
       35        35                               insert the item, and FIND indicates that no entry
       36        36                               should be made.
CC.C02    File=xb_hsearch:c.:XBC3TSI                                                Fri Jan  6 1995  Page=2  
       37        37
       38        38                               Upon successful completion the function returns a
       39        39                               pointer into the hash-table where the entry may be
       40        40                               found.  A NULL pointer is returned if the table is
       41        41                               full or if the action was FIND and the item was not
       42        42                               found in the table.
       43        43             */
       44        44
       45        45             ENTRY *
       46        46             hsearch(ENTRY item, ACTION action) {
       47        47    1           int   i;
       48        48    1           int   c;
       49        49    1           int   len;
       50        50    1
       51        51    1           if (!TABLE) {
       52        52    2              return ((ENTRY *) 0);
       53        53    2           }
       54        54    1
       55        55    1           len = strlen(item.key);
       56        56    1           i = hash(item.key, &c, len);
       57        57    1
       58        58    1        /*    Now that we got the first hash it is time to see if the entry
       59        59    1              is there.   If it is check to see if the key is the same if so
       60        60    1              return.  Otherwise use the second hash value and continue till
       61        61    1              you find the specified key or you find an empty location.     */
       62        62    1
       63        63    1           while (TABLE[i].key) {
       64        64    2              if (!strcmp(item.key,TABLE[i].key)) {
       65        65    3                 return (&TABLE[i]);
       66        66    3              }
       67        67    2              i -= c;
       68        68    2              if (i < 0) {
       69        69    3                 i += M;
       70        70    3              }
       71        71    2           }
       72        72    1
       73        73    1        /*    If we got to this point it means we have searched for the
CC.C02    File=xb_hsearch:c.:XBC3TSI                                                Fri Jan  6 1995  Page=3  
       74        74    1              entry and it did not exist.  Now we check to see if we can
       75        75    1              add the entry to the table or return in error.                */
       76        76    1
       77        77    1           if ((action == ENTER) && (N < (M - 1))) {
       78        78    2              TABLE[i] = item;
       79        79    2              N += 1;
       80        80    2              return (&TABLE[i]);
       81        81    2           }
       82        82    1           else {
       83        83    2              return ((ENTRY *) 0);
       84        84    2           }
       85        85    1        }
       86        86
       87        87             /*F*    NAME:    hcreate
       88        88                     PURPOSE:  The hcreate function is a hash-table search table
       89        89                               routine generalized from Knuth (6.4) Algorithm D.
       90        90                     DESCRIPTION:
       91        91                               This function allocates sufficient space for a hash
       92        92                               search table, and must be called before hsearch is
       93        93                               used.  The nel parameter is an estimate of the
       94        94                               maximum number of entries that the table will
       95        95                               contain.  This number may be adjusted upward to
       96        96                               create mathematically favorable circumstances.
       97        97
       98        98                               Upon successful completion the function returns a
       99        99                               non-zero number, otherwise 0 is returned.
      100       100             */
      101       101
      102       102             int
      103       103             hcreate(unsigned nel) {
      104       104    1           int   actual_size = nel;
      105       105    1           int   i;
      106       106    1
      107       107    1        /*    Get the real size to be allocated for the table.  Make it a
      108       108    1              nice prime number.                                            */
      109       109    1
      110       110    1           i = 0;
CC.C02    File=xb_hsearch:c.:XBC3TSI                                                Fri Jan  6 1995  Page=4  
      111       111    1           while ((actual_size > prime_vals[i]) && (i < 40)) {
      112       112    2              i++;
      113       113    2           }
      114       114    1           if (i < 40) {
      115       115    2              actual_size = prime_vals[i];
      116       116    2           }
      117       117    1           else {
      118       118    2              actual_size = prime_vals[40];
      119       119    2           }
      120       120    1
      121       121    1        /*    Actually allocate the table                                   */
      122       122    1
      123       123    1           TABLE = (ENTRY *) malloc((actual_size + 1) * sizeof(ENTRY));
      124       124    1           if (TABLE) {
      125       125    2              M = actual_size;
      126       126    2              N = 0;
      127       127    2
      128       128    2        /*    Time to initialize the table                                  */
      129       129    2
      130       130    2              for (i=0; i<=actual_size; i++) {
      131       131    3                 TABLE[i].key = 0;
      132       132    3                 TABLE[i].data = 0;
      133       133    3              }
      134       134    2              return (actual_size);
      135       135    2           }
      136       136    1
      137       137    1           return 0;
      138       138    1        }
      139       139
      140       140             /*F*    NAME:    hdestroy
      141       141                     PURPOSE:  The hdestroy function is a hash-table search table
      142       142                               routine generalized from Knuth (6.4) Algorithm D.
      143       143                     DESCRIPTION:
      144       144                               This function destroys a hash-table and may be
      145       145                               followed by another call to hcreate.  After this
      146       146                               function is called no successful calls will me
      147       147                               made to hsearch until another hcreate has been
CC.C02    File=xb_hsearch:c.:XBC3TSI                                                Fri Jan  6 1995  Page=5  
      148       148                               called.
      149       149                               This function returns no value.
      150       150             */
      151       151
      152       152             void
      153       153             hdestroy() {
      154       154    1
      155       155    1        /*    Free up the table and reset the global variables              */
      156       156    1
      157       157    1           free(TABLE);
      158       158    1           TABLE = 0;
      159       159    1           M = -1;
      160       160    1           N = -1;
      161       161    1
      162       162    1        }
      163       163
      164       164             /*F*    NAME:    hash
      165       165                     PURPOSE:  The hash function computes the hashes used for
      166       166                               Knuth (6.4) Algorithm D.
      167       167                     DESCRIPTION:
      168       168                               This function creates the two hash values used for
      169       169                               the function hsearch.  These values are computed
      170       170                               as follows:
      171       171                                  1) Sum up all the characters into sum.
      172       172                                  2) hash1 = sum % M;
      173       173                                  3) hash2 = M - 2  - sum % (M - 2);
      174       174                               The argument c gets hash2 value and hash1 is
      175       175                               returned.
      176       176             */
      177       177
      178       178             static int
      179       179             hash(char *key, int *c, int len) {
      180       180    1           int   hash_val;
      181       181    1           int   sum = 0;
      182       182    1           int   ch;
      183       183    1
      184       184    1           if (key) {
CC.C02    File=xb_hsearch:c.:XBC3TSI                                                Fri Jan  6 1995  Page=6  
      185       185    2              while (len) {
      186       186    3                 ch = *key++;
      187       187    3                 sum += ch;
      188       188    3                 len--;
      189       189    3              }
      190       190    2              hash_val = sum % M;
      191       191    2              *c = M - 2 - sum % (M - 2);
      192       192    2              return (hash_val);
      193       193    2           }
      194       194    1           else {      /* no key given  */
      195       195    2              *c = 1;
      196       196    2              return 0;
      197       197    2           }
      198       198    1        }
---  Include file information  ---

   stdio:h.:XBC3TOU. is referenced
   stdlib:h.:XBC3TOU. is referenced
   search:h.:XBC3TOU. is referenced

No diagnostics were issued in the file xb_hsearch:c.:XBC3TSI
