

14:22 JUL 28 '97 EL$TABLES.:E05SI                                          1    
    1      /*M* EL$TABLES - BASED STRUCTURES USED BY ERROR LOGGING */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /*X* */
    8      /* ! C ! */
    9      /*F* NAME: EL$TABLES.
   10
   11           EL$TABLES contains macros for structures used when creating
   12           error log or security log records. Only the EL$HDR macro is
   13           of interest to the user.
   14      */
   15      /*F* NAME:  Log
   16
   17      This appendix defines the Security Log, describes how the
   18      system manager uses CONTROL processor parameters to control its
   19      contents, and describes the macros used to define and read the records in it.
   20      */
   21      /*F* NAME:  Log_Files
   22      The Security Log is a collection of files used to audit
   23      the use of certain sensitive system facilities.  The name of the
   24      Security Log is :SECLOGyyyymmdd, where 'yymmdd' is the ANS format
   25      for date.  These daily files are maintained in the :SYS account.
   26      They are indexed files keyed by primary key only.  The fields included
   27      in the key are referenced in the EL$HDR macro described later in this
   28      section.
   29
   30      The following six types of records can be included in the Security
   31      Log files:
   32
   33      .inl 4
   34      .unl 4
   35      o   System access (i.e., logon) records
   36
   37      .unl 4
14:22 JUL 28 '97 EL$TABLES.:E05SI                                          2    
   38      o   System exit (both logoff and recovery) records
   39
   40      .unl 4
   41      o   Monitor service records
   42
   43      .unl 4
   44      o   Privilege request records
   45
   46      .unl 4
   47      o   File access records
   48
   49      .unl 4
   50      o   ARES file access records
   51      .inl 0
   52
   53      The system manager determines whether the first five types of records are
   54      included and protects the Security Log through CONTROL processor SYSTEM
   55      parameters.  Use of these parameters is described in the CP-6 System
   56      Manager Handbook (CE60).
   57
   58      An ARES file access record is logged by ARES if a user has caused the
   59      normal ARES security checks to be bypassed.  Such a record closely
   60      resembles a file access record.  However, the ARES model name will be
   61      referenced instead of an individual file name.
   62
   63      Currently, there is no system processor which extracts information
   64      from the Security Log.  However, the tool WEASEL.X can be used to
   65      retrieve and display information from Security Log files.
   66      In addition, it is possible to use a Security
   67      Log file as a bulk file for an ARES database or as input to the
   68      ARGENT report writer or a user program.
   69      */
   70      /*F* NAME:  Log_Records
   71      A Security Log record consists of two parts: the header and the
   72      informational portion.  The EL$HDR macro, contained in the
   73      EL$TABLES include file, can be used to describe the header portion.
   74      The ES$SECLOG macro, contained in the ES_TABLES_M include file,
14:22 JUL 28 '97 EL$TABLES.:E05SI                                          3    
   75      can be used to describe the informational portion.  These two macros
   76      are used in conjunction when Security Log file records are written.
   77      They may also be used in a similar fashion to create a PL-6 structure to
   78      extract information from the log by including those files and invoking
   79      the macros such that only one structure is created, as follows:
   80
   81      .inl 4
   82      .fif
   83      }%INCLUDE EL$TABLES;
   84      }%INCLUDE ES_TABLES_M;
   85      }%EL$HDR   (NAME=SECLOGREC,
   86      }           STCLASS=STATIC,
   87      }           HDRONLY=YES,
   88      }           FILE=FILENUM);
   89      }%ES$SECLOG(DCLNAME=NO,
   90      }           STCLASS=STATIC);
   91      .INL 0
   92      .fin
   93      .spb
   94      Since the same structure is used for all categories of security
   95      log records, not all fields will be used for all records. Also,
   96      a few fields have been redefined for use with different
   97      categories. The various uses of each field and references to
   98      include files containing value equates or subs are contained
   99      in the individual field descriptions.  All include files necessary
  100      to read or interpret Security Log records may be found in the system
  101      library account (:LIBRARY).
  102      */
  103      /*F* NAME: D_EL$HDR
  104      .IBL D:EL$HDR
  105      */
  106      /*F* NAME: EL$HDR
  107
  108           The EL$HDR macro defines a structure which describes the header
  109           portion of either an error log or security log record. It may
  110           be invoked so that only the header portion is described or,
  111           alternately, so that the informational portion of the record
14:22 JUL 28 '97 EL$TABLES.:E05SI                                          4    
  112           is also included as an array of words. The former type of
  113           invocation may be used in conjunction with the ES$SECLOG macro
  114           contained in the ES_TABLES_M include file, to describe any
  115           record in the security log.
  116
  117           The use of each field and references to include files containing
  118           value equates or subs may be found in the field descriptions.
  119      */
  120      /**/
  121      /* Header for all error log and security log records.             */
  122      /**/
  123      %MACRO EL$HDR(NAME=EL$HDR,
  124             HDRONLY (YES='1'B,NO='0'B)='0'B, /* No INFO portion                    */
  125                  ENDHDR=",",                 /* How to end the header only portion */
  126                  FILE=FILE,
  127                  STCLASS=BASED);
  128      %LSET LISTDIR='0'B;
  129      %LSET LISTEXP='1'B;
  130      %LSET LISTCOM='0'B;
  131      %LSET LISTSUB='1'B;
  132      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  133      %IF (SUBSTR(STR,0,6)='STATIC') OR
  134          (SUBSTR(STR,0,8)='CONSTANT') OR
  135          (SUBSTR(STR,0,3)='EXT');
  136      %LSET INIT=CHARTEXT('INIT');
  137      %ELSE;
  138      %LSET INIT=CHARTEXT('/*');
  139      %ENDIF;
  140      DCL 1 NAME STCLASS ALIGNED,
  141            2 TYPE          UBIN(9)   UNAL %INIT(0)%CHARTEXT('/**/'),
  142                            /*K* TYPE - UBIN(9). Both the error log and the
  143                            security log have a number of different
  144                            categories of records written to them. TYPE
  145                            specifies the entry type of this particular
  146                            record. Subs for type values may be found in the
  147                            EL_SUBS_C include file. TYPE codes in the
  148                            range 500-599 are for security log purposes. */
14:22 JUL 28 '97 EL$TABLES.:E05SI                                          5    
  149            2 SIZE          UBIN(18)  UNAL %INIT(0)%CHARTEXT('/**/'),
  150                            /*K* SIZE - UBIN(18). Size in words of the
  151                            entire record, both header and information.  */
  152            2 UTS           UBIN(36)  UNAL %INIT(0)%CHARTEXT('/**/'),
  153                            /*K* UTS - UBIN(36). The time in UTS format when
  154                            the record was written. The primary key begins
  155                            with this field.                            */
  156            2 CNTR          UBIN(9)   UNAL %INIT(0)%CHARTEXT('/**/'),
  157                            /*K* CNTR - UBIN(9). CNTR is used in conjunction
  158                            with UTS in case more than one record is written
  159                            with the same UTS. CNTR is incremented for each
  160                            such entry. The primary key ends with this
  161                            field.                                       */
  162            2 SITE_ID       CHAR(6)   UNAL %INIT(' ')%CHARTEXT('/**/'),
  163                            /*K* SITE_ID - CHAR(6). Site identification. */
  164            2 SEQ_NUM       UBIN(18)  UNAL %INIT(0)%CHARTEXT('/**/'),
  165                            /*K* SEQ_NUM - UBIN(18). Sequence number of each
  166                            record. Used only for security log entries.  */
  167            2 LOST          UBIN(18)  UNAL %INIT(0)%CHARTEXT('/**/'),
  168                            /*K* LOST - UBIN(18). The number of lost entries
  169                            since the last successful entry. Meaningful only
  170                            for the error log.                           */
  171            2 FILE          UBIN(18)  UNAL %INIT(0)%CHARTEXT('/**/') ENDHDR
  172                            /*K* FILE - UBIN(18). The special file number of
  173                            this file. The error log file is always 1; the
  174                            security log file is always 3. Subs for special
  175                            file numbers may be found in the EL_SUBS_C
  176                            include file.                                */
  177      %IF NOT HDRONLY;
  178            2 INFO(0:0)     UBIN WORD %INIT(0*0)%CHARTEXT('/**/');
  179                            /*K* INFO - ARRAY(0:0) UBIN WORD. Generic access
  180                            to the non-header portion of the record.     */
  181      %ENDIF;
  182      %MEND;
  183      /* ! ! */
  184      /**/
  185      %MACRO EL$BUF(NAME=EL$BUF,STCLASS=BASED);
14:22 JUL 28 '97 EL$TABLES.:E05SI                                          6    
  186      DCL 1 NAME STCLASS ALIGNED,
  187            2 NXTBUF UBIN,                    /* PAGE NUMBER OF NEXT BUFFER         */
  188            2 COUNT UBIN(9) UNAL,             /* NO. OF ENTRIES IN THIS BUF         */
  189            2 * BIT(9) UNAL,
  190            2 WDSLFT UBIN(18) UNAL,           /* WORDS LEFT IN THIS BUFFER          */
  191            2 INFO(0:1021) UBIN(36);
  192      %MEND;
  193      %MACRO EL$ENTRY(NAME=EL$ENTRY,
  194                    INFOSZ=4,
  195                  STCLASS=BASED);
  196      DCL 1 NAME STCLASS ALIGNED,             /* ERROR LOG ENTRY FORMAT             */
  197            2 TYPE UBIN(9) UNAL,              /* ENTRY TYPE                         */
  198            2 TYPEC REDEF TYPE CHAR(1),
  199            2 SIZE UBIN(18) UNAL,             /* SIZE OF ENTRY IN WORDS
  200                                                 (INCLUDING 5 WORD HEADER) */
  201            2 UTS UBIN(36) UNAL,              /* TIME FROM SSS$SYSTIME              */
  202            2 CNTR UBIN(9) UNAL,              /* NO. OF ENTIRES WITH SAME TIME      */
  203            2 SITE_ID CHAR(6) UNAL,           /* SITE IDENTIFICATION                */
  204            2 SEQ_NUM UBIN(18) UNAL,          /* Sequence number for security log   */
  205            2 LOST UBIN(18) UNAL,        /* NO. OF LOST ERRORS SINCE LAST ENTRY     */
  206            2 FILE UBIN(18) UNAL,        /* FILE TO WHICH RECORDS ARE TO BE WRITTEN */
  207            2 INFO CHAR(INFOSZ);              /* TYPE DEPENDENT INFORMATION         */
  208      %MEND;
  209      /**/
  210      %MACRO EL$FILERR(NAME=EL$FILERR,STCLASS=BASED);
  211      DCL 1 NAME STCLASS ALIGNED,
  212            2 CODE UBIN(9) UNAL,              /* ERROR CODE                         */
  213            2 REASON UBIN(9) UNAL,            /* REASON FOR ERROR                   */
  214            2 ACTION UBIN(9) UNAL,            /* ACTION BEING LOGGED                */
  215            2 USER UBIN(9) UNAL,              /* USER NUMBER                        */
  216            2 NOSEND BIT(1),                  /* SET IF NOT TO SEND TO OC           */
  217            2 ORG UBIN(8) UNAL,               /* DCB.ORG                            */
  218            2 FUN UBIN(3) UNAL,               /* DCB.FUN                            */
  219            2 DISP UBIN(3) UNAL,              /* DCB.DISP                           */
  220            2 SHARE UBIN(3) UNAL,             /* DCB.SHARE                          */
  221            2 ACS UBIN(6) UNAL,               /* DCB.ACS                            */
  222            2 LVL UBIN(3) UNAL,               /* DCB.LVL                            */
14:22 JUL 28 '97 EL$TABLES.:E05SI                                          7    
  223            2 GTYP UBIN(9) UNAL,              /* DCB.GTYP                           */
  224            2 FRDA UBIN,                      /* FILE-REL DISK ADDRESS              */
  225            2 SRDA UBIN,                      /* SET-REL DISK ADDR                  */
  226            2 SECTOR UBIN,                    /* Sector address                     */
  227            2 BFR1 UBIN,                      /* A WORD FROM THE BUFFER             */
  228            2 BFR2 UBIN,                      /* ANOTHER WORD                       */
  229            2 BFR3 UBIN,                      /* ANOTHER WORD                       */
  230            2 MISC UBIN,                      /* MISCELLANEOUS WORD                 */
  231            2 BFR1X UBIN(12) UNAL,            /* Disp of BFR1                       */
  232            2 BFR2X UBIN(12) UNAL,            /* Disp of BFR2                       */
  233            2 BFR3X UBIN(12) UNAL,            /* Disp of BFR3                       */
  234            2 PLUGH(0:2) BIT(18),             /* PLUGH                              */
  235            2 SYSID UBIN(18) UNAL,            /* SYSID of user                      */
  236            2 TYC BIT(36),                    /* TYC from Q packet                  */
  237            2 STATUS BIT(36),                 /* Status from Q packet               */
  238            2 REQID UBIN,                     /* Q packet id                        */
  239            2 DEVNM CHAR(8),                  /* Device name                        */
  240            2 SN CHAR(6),                     /* PACK SET NAME                      */
  241            2 SETX UBIN(18) UNAL,             /* SET INDEX                          */
  242            2 ACCT CHAR(8),                   /* ACCOUNT                            */
  243            2 FNAME,                          /* File name                          */
  244              3 L UBIN(9) UNAL,
  245              3 C CHAR(31);
  246      %MEND;
  247      /**/
  248      /* COMGROUP ERROR */
  249      /**/
  250      %MACRO EL$CGERR(NAME=EL$CGERR,STCLASS=BASED,N=1);
  251      /**/
  252      DCL 1 NAME STCLASS ALIGNED,
  253            2 CODE UBIN(9) UNAL,              /* Error code                         */
  254            2 * BIT(9),
  255            2 SYSID UBIN(18) UNAL,            /* Sysid of user                      */
  256            2 CTX UBIN(18) UNAL,              /* Word displ of CTX block pointer    */
  257            2 PSN CHAR(6),                    /* Packset name                       */
  258            2 ACCT CHAR(8),                   /* Account                            */
  259            2 FNAME,                          /* Name                               */
14:22 JUL 28 '97 EL$TABLES.:E05SI                                          8    
  260              3 L UBIN(9) UNAL,
  261              3 C CHAR(31),
  262            2 SIZ UBIN,                       /* Size of INFO in words              */
  263            2 INFO(0:%(N-1)) UBIN;            /* Other info                         */
  264      %MEND;
  265      /**/
  266      /* MPC FIRMWARE LOAD COMPLETE
  267      */
  268      %MACRO EL$FWLOAD(NAME=EL$FWLOAD,STCLASS=BASED);
  269      DCL 1 NAME STCLASS ALIGNED,
  270            2 DEVNM CHAR(8),                  /* MPC NAME                           */
  271            2 LOADED BIT(1);                  /* FIRMWARE LOADED SUCCESSFULLY       */
  272      %MEND;
  273      /**/
  274      %MACRO EL$IOERR  (NAME=EL$IOERR,STCLASS=BASED);
  275      DCL 1 NAME STCLASS ALIGNED,
  276            2 REQID UBIN,                     /* REQUEST ID                         */
  277            2 STATUS,                         /* INITIAL HARDWARE STATUS            */
  278              3 * BIT(1) UNAL,
  279              3 POWER_OFF BIT(1) UNAL,
  280              3 MAJOR UBIN(4) UNAL,
  281              3 MINOR BIT(6) UNAL,
  282              3 * BIT(24) UNAL,
  283              3 * UBIN WORD UNAL,
  284            2 XSTATUS REDEF STATUS,           /* INIT STATUS W/6 BIT MAJOR STATUS   */
  285              3 MAJOR UBIN(6) UNAL,
  286              3 MINOR BIT(6) UNAL,
  287              3 * BIT(14) UNAL,
  288              3 SYS_CTRL_MINOR UBIN(4) UNAL,
  289              3 SYS_IOM_MINOR UBIN(6) UNAL,
  290              3 * UBIN WORD UNAL,
  291            2 FINAL BIT(72),                  /* FINAL HARDWARE STATUS              */
  292            2 IOCHAN HALIGNED,
  293              3 DVN UBIN(6) UNAL,             /* DEVICE NUMBER                      */
  294              3 IOM UBIN(3) UNAL,             /* IOM NUMBER                         */
  295              3 CHAN UBIN(9) UNAL,            /* CHANNEL NUMBER                     */
  296            2 ERRCT UBIN(9) CALIGNED,         /* RETRY COUNT                        */
14:22 JUL 28 '97 EL$TABLES.:E05SI                                          9    
  297            2 COUNT UBIN(9) CALIGNED,         /* REPEATS OF THIS ERROR              */
  298            2 CONNECTS,                       /* NUMBER OF CONNECTS SINCE LAST      */
  299              3 IOM UBIN HALF UNAL,           /* ERROR ON THRESHOLDED COMPONENT     */
  300              3 CHANNEL UBIN HALF UNAL,
  301              3 MPC UBIN HALF UNAL,
  302              3 DEVICE UBIN HALF UNAL,
  303            2 IDCW BIT(36),                   /* IDCW ON WHICH ERROR OCCURED        */
  304            2 DCW BIT(36),                    /* DCW ON WHICH ERROR OCCURED         */
  305            2 MEMADR SBIN,                    /* LAST MEMORY ADDRESS REFERENCED     */
  306            2 EXTST(0:35) UBIN(8) UNAL,       /* enlarged for MSP3990, was 0:25     */
  307            2 SEEK ALIGNED,                   /* SEEK ADDRESS                       */
  308              3 SCL UBIN(12) UNAL,            /* SECTOR COUNT LIMIT                 */
  309              3 SSZ UBIN(4) UNAL,             /* SECTOR SIZE                        */
  310              3 SECTOR UBIN(20) UNAL,         /* seek address                       */
  311            2 TAPEPOS REDEF SEEK,             /* redef of seek structure            */
  312              3 CURECNT UBIN(18) UNAL,        /* current record count 1st byte      */
  313              3 FILECNT UBIN(18) UNAL,        /* current file                       */
  314            2 DEVNM CHAR(8),                  /* DEVICE NAME                        */
  315            2 SN CHAR(6),                     /* SERIAL NUMBER OF TAPE              */
  316            2 THRESH UNAL,                    /* THRESHOLD INFORMATION              */
  317              3 IOM BIT(1),
  318              3 CHANNEL BIT(1),
  319              3 MPC BIT(1),
  320              3 DEVICE BIT(1),
  321            2 * BIT(14) UNAL,
  322            2 MODEL CHAR(8),                  /* MODEL NUMBER OF COMPONENT          */
  323            2 MPC_MODEL CHAR(8),              /* MODEL NUMBER OF CONTROLLER         */
  324            2 TYC BIT(36),                    /* TYPE COMPLETION CODE               */
  325            2 FLPW BIT(36);                   /* FINAL LIST POINTER WORD            */
  326      %MEND;
  327      /**/
  328      /*  SYMBIONT FILE INCONSISTENCY */
  329      /**/
  330      %MACRO EL$OSFI (NAME=EL$OSFI,STCLASS=BASED);
  331      DCL 1 NAME STCLASS ALIGNED,
  332            2 SUBC UBIN WORD UNAL,            /* SUBCODE. SUBS BELOW                */
  333            2 STAMP UNAL,                     /* ACTUAL STAMP FROM GRANULE          */
14:22 JUL 28 '97 EL$TABLES.:E05SI                                          10   
  334              3 HASH UBIN(27) UNAL,
  335              3 FRDAD UBIN(9) UNAL,
  336            2 EXPSTAMP UNAL,                  /* EXPECTED STAMP IF STAMP ERR        */
  337              3 HASH UBIN(27) UNAL,
  338              3 FRDAD UBIN(9) UNAL,
  339            2 NAVX REDEF EXPSTAMP UBIN UNAL,  /* NAVX IF FMT ERR                    */
  340            2 AVAIL UBIN WORD UNAL,           /* AVAIL IF FMT ERR, GARBO ELSE       */
  341            2 SYSID UBIN(18) UNAL,            /* FILE SYSID                         */
  342                                              /* SYSID=0 MEANS BANNER FILE          */
  343            2 NUM UBIN(18) UNAL,              /* FILE SYSID EXTENSION               */
  344                          /* NOTE THAT FRDAD IS SUPPOSED TO BE THE TRUE FILE-RELATIVE
  345                        DISK ADDRESS.  SO IT SHOULD EQUAL (MOD 512) EXPSTAMP.FRDAD
  346                        (IF STAMP ERR), OR STAMP.FRDAD (IF FMT ERR).  IF IT DOES
  347                        NOT, SOMETHING HAS GONE WRONG WITH OUTSYM.  */
  348            2 FRDAD UBIN WORD;                /* FILE RELATIVE DISK ADDR            */
  349
  350      /* */
  351      %SUB EL_OSFI_STAMP#=1;                  /* BAD GRANULE STAMP                  */
  352      %SUB EL_OSFI_FMT#=2;                    /* BAD FORMAT: NAVX+AVAIL > 1024      */
  353
  354      %MEND;
  355      /**/
  356                                              /*                                    */
  357                                              /*                                    */
  358      %MACRO EL$GABRT (NAME=EL$GABRT,STCLASS=BASED);
  359
  360      DCL 1 NAME STCLASS DALIGNED,
  361            2 ERR,
  362              3 FCG BIT(12) UNAL,             /* FUNCTIONAL CODE GROUP              */
  363              3 MID BIT(6) UNAL,              /* MODULE ID                          */
  364              3 MON BIT(1) UNAL,              /* SET IF ERROR IN MONITOR            */
  365              3 CODE UBIN(14) UNAL,           /* ACTUAL ERROR CODE                  */
  366              3 SEV UBIN(3) UNAL,             /* SEVERITY CODE                      */
  367            2 USRERR,
  368              3 FCG BIT(12) UNAL,             /* FUNCTIONAL CODE GROUP              */
  369              3 MID BIT(6) UNAL,              /* MODULE ID                          */
  370              3 MON BIT(1) UNAL,              /* SET IF ERROR IN MONITOR            */
14:22 JUL 28 '97 EL$TABLES.:E05SI                                          11   
  371              3 CODE UBIN(14) UNAL,           /* ACTUAL ERROR CODE                  */
  372              3 SEV UBIN(3) UNAL,             /* SEVERITY CODE                      */
  373            2 SYSID SBIN HALF UNAL,
  374            2 IC UBIN(18) UNAL,
  375            2 RNST BIT(9) UNAL,
  376            2 FRS BIT(9) UNAL,
  377            2 STEPCC UBIN(9) UNAL,
  378            2 XLIMFLG BIT(9) UNAL,
  379            2 UNAME CHAR(12) UNAL,
  380            2 CCBUF CHAR(256) UNAL;
  381
  382      %MEND;
  383
  384                                              /*                                    */
  385      %MACRO EL$SCREECH (NAME=EL$SCREECH,STCLASS=BASED);
  386
  387      DCL 1 NAME STCLASS DALIGNED,
  388            2 SCODE,
  389              3 ERR,
  390                4 FCG BIT(18),
  391                4 MON BIT(1) UNAL,
  392                4 CODE UBIN(14) UNAL,
  393                4 SEV UBIN(3) UNAL,
  394              3 DBITS BIT(36),
  395            2 SNAPU# UBIN(36) UNAL,
  396            2 MONID CHAR(4) UNAL,
  397            2 SCOUNT UBIN(36),
  398            2 DUMP UBIN(36),
  399                                    /* 0 IF DUMPED --  ~= 0 IF SNAP DUMP SKIPPED    */
  400            2 RTRAP,
  401              3 * BIT(26) UNAL,
  402                     /* Change EL$SCREECH_MASK macro if more trap bits are added*/
  403              3 RCVR2TR BIT(1) UNAL,
  404                                              /* Reserved for RCVR2 TRAPPED         */
  405              3 CGQTRAP BIT(1) UNAL,
  406                                              /* RVF$CGQ TRAPPED                    */
  407              3 CLSFTRAP BIT(1) UNAL,
14:22 JUL 28 '97 EL$TABLES.:E05SI                                          12   
  408                                              /* RVF$CLSF TRAPPED OR ALTRETed       */
  409              3 CFUTRAP BIT(1) UNAL,
  410                                              /* RECOVERY TRAPPED IN RVF$CFUS       */
  411              3 AJITSU BIT(1) UNAL,
  412                               /* SET BY IGR$RECOVER AFTER ACCOUTING LOG IS UPDATED */
  413              3 NIOTRAP BIT(1) UNAL,
  414                                              /* RECOVERY TRAPPED IN ISN$RCVRIO     */
  415              3 MONDTRAP BIT(1) UNAL,
  416                                         /* RECOVERY TRAPPED ACCESSING MONITOR DATA */
  417              3 AJITTR BIT(1) UNAL,
  418                                    /* SET BY IGR$RECOVER IF TRAP IN AZA$LOGOFF     */
  419              3 MONJITBAD BIT(1) UNAL,
  420                          /* PGINMEM NOT SET, OR PP# <4, OR PP# > HIPAGE ON MON JIT */
  421              3 MONPG0BAD BIT(1) UNAL,
  422                          /* CONSISTENCY CHECKS ON PROCESSOR DEPENDENT DATA FAILED  */
  423            2 REASON CHAR(12) ALIGNED,        /* OUR FAULT, PLANNED, STAR #, ETC.   */
  424            2 OPNDAT CHAR(6) CALIGNED,        /* DATE STAR WAS OPENED               */
  425            2 CLSDAT CHAR(6) CALIGNED;        /* DATE STAR WAS CLOSED               */
  426      %MEND;
  427
  428      %MACRO EL$SCREECH_MASK (NAME=EL$SCREECH_MASK,STCLASS=CONSTANT);
  429      DCL 1 NAME BIT(36) STCLASS INIT('000000001777'O);
  430      %MEND;
  431
  432
  433      /**/
  434      /* SPURIOUS INTERRUPT
  435      */
  436      %MACRO EL$SPURINT(NAME=EL$SPURINT,STCLASS=BASED);
  437      DCL 1 NAME STCLASS ALIGNED,
  438            2 IOCHAN,
  439              3 IOM UBIN(3) UNAL,             /* IOM NUMBER                         */
  440              3 CHANNEL UBIN(9) UNAL,         /* CHANNEL NUMBER                     */
  441            2 STATE UBIN(6) UNAL,             /* SCHEDULING STATE                   */
  442            2 INTLVL UBIN(3) UNAL,            /* INTERRUPT LEVEL                    */
  443            2 STATUS,                         /* CHANNEL STATUS                     */
  444              3 DOWN BIT(1),                  /* =1 IF CHANNEL PARTITIONED          */
14:22 JUL 28 '97 EL$TABLES.:E05SI                                          13   
  445              3 TND UBIN(2) UNAL,             /* CURRENT T&D FUNCTION               */
  446            2 * BIT(12) UNAL,
  447            2 STATUSWORDS BIT(72) ALIGNED;    /* STATUS WORDS                       */
  448      %MEND;
  449      /**/
  450      /**/
  451      /*  STRUCTURE FOR MOUNTS AND DISMOUNTS  */
  452      /**/
  453      %MACRO EL$MTDMT (NAME=EL$MTDMT,STCLASS=BASED);
  454      DCL 1 NAME STCLASS ALIGNED,
  455            2 SYSID UBIN WORD,                /* SYSID OF MOUNTER IF APPROPRIATE    */
  456            2 VOLUME CHAR(6),                 /* VOLUME SERIAL NUMBER               */
  457            2 PSN CHAR(6),                    /* PACKSET NAME IF DISK               */
  458            2 DEVNAME CHAR(8),                /* DEVICE NAME                        */
  459            2 REQ_UTS UBIN WORD;              /* REQUEST TIME UTS                   */
  460      %MEND;
  461      /**/
  462      /**/
  463      /*   STRUCTURE FOR FEP REBOOTS  */
  464      /**/
  465      %MACRO EL$FECRASH (NAME=EL$FECRASH,STCLASS=BASED);
  466      DCL 1 NAME STCLASS ALIGNED,
  467            2 FENM,                           /* FROM LDCT.FENM                     */
  468              3 DEVADDR,                      /* DEVICE ADDRESS (FROM KI_FECH)      */
  469                4 IOM UBIN(2) UNAL,           /* IOM - 0 IF REMOTE                  */
  470                4 CHAN UBIN(7) UNAL,          /* CHANNEL - 0 IF REMOTE              */
  471              3 CRASH# UBIN(9) UNAL, /* SEQUENCE NUMBER OF THIS CRASH FOR THIS FEP  */
  472              3 PROBLEM UBIN(9) UNAL,         /* REASON FOR CRASH - SEE KI_SUBS_C   */
  473              3 STATE UBIN(9) UNAL, /* FEP STATE AT TIME OF CRASH - SEE KI_SUBS_C   */
  474              3 FEP# UBIN WORD,               /* FEP NUMBER                         */
  475              3 NODENAME CHAR(8),             /* Fep name                           */
  476              3 LINK_NODE UBIN BYTE UNAL,
  477              3 QOS UBIN BYTE UNAL,
  478              3 ALT_QOS UBIN BYTE UNAL,
  479              3 * UBIN BYTE UNAL;
  480      %MEND;
  481      /**/
14:22 JUL 28 '97 EL$TABLES.:E05SI                                          14   
  482      /* Structure for FEPANLZ-created dump record */
  483      /**/
  484      %MACRO EL$FEPDUMP (NAME=EL$FEPDUMP,STCLASS=BASED);
  485      DCL 1 NAME STCLASS ALIGNED,
  486            2 FEP UBIN WORD ALIGNED,          /* FEP NUMBER                         */
  487            2 FILE,                           /* DUMP FILE NAME                     */
  488              3 CNT UBIN BYTE UNAL,
  489              3 TXT CHAR(60) UNAL,
  490            2 TAD,                            /* TIME AND DATE OF DUMP              */
  491              3 TIME CHAR(11) UNAL,
  492              3 DATE CHAR(8) UNAL,
  493            2 REASON CHAR(24) UNAL,           /* REASON FOR CRASH                   */
  494            2 SCREECH,                        /* SCREECH DESCRIPTION                */
  495              3 CNT UBIN BYTE UNAL,
  496              3 TXT CHAR(60) UNAL;
  497      %MEND;
  498      /**/
  499      /**/
  500      /*  STRUCTURE FOR FEP MEMORY FAULT */
  501      /**/
  502      %MACRO EL$FEPFLT (NAME=EL$FEPFLT,STCLASS=BASED);
  503      DCL 1 NAME STCLASS ALIGNED,
  504            2 DEVADDR,                        /* DEVICE ADDRESS                     */
  505              3 IOM UBIN(2) UNAL,             /* IOM                                */
  506              3 CHAN UBIN(7) UNAL,            /* CHANNEL                            */
  507            2 FEP# UBIN(27) UNAL,             /* FEP NUMBER                         */
  508            2 FAULT UBIN WORD;                /* FAULT WORD                         */
  509      %MEND;
  510      /**/
  511      /**/
  512      /* STRUCTURE FOR OPERATOR MESSAGE TO ERROR FILE */
  513      /**/
  514      %MACRO EL$OPER (NAME=EL$OPER,STCLASS=BASED);
  515      DCL 1 NAME STCLASS ALIGNED,
  516            2 STATION CHAR(8) UNAL,      /* STATION ON OCCG OF REPORTING CONSOLE    */
  517            2 * CHAR(8) UNAL,                 /* FUTURE WSN OF ASSOCIATION          */
  518            2 * CHAR(8) UNAL,                 /* FUTURE TERMNAME FOR SLAVE USE      */
14:22 JUL 28 '97 EL$TABLES.:E05SI                                          15   
  519            2 ATTR BIT(18) UNAL,              /* CONSOLE ATTRIBUTES                 */
  520            2 * BIT(18) UNAL,                 /* FILLER                             */
  521            2 MESSAGE CHAR(140) UNAL;         /* TEXT OF PROBLEM                    */
  522      %MEND;
  523      /**/
  524      /**/
  525      /*  STRUCTURE FOR CPU STARTUP  */
  526      /**/
  527      %MACRO EL$CMPSTRT (NAME=EL$CMPSTRT,STCLASS=BASED);
  528      DCL 1 NAME STCLASS ALIGNED,
  529            2 COMP_ID CHAR(4),                /* COMPONENT; 'CPU '*/
  530            2 COMP# UBIN,                     /* CPU PORT NR.                       */
  531            2 PNO UBIN,                       /* LOGICAL PROCESSOR NUMBER           */
  532            2 LAST_STATE_CHANGE UBIN,         /* UTS AT PREVIOUS STATE CHANGE       */
  533            2 * UBIN,
  534            2 STATE UBIN;                     /* PROCESSOR STATE AFTER STATE CHANGE */
  535                                              /*    STATE = 0 - PROCESSOR STOPPED   */
  536                                              /*    STATE = 1 - PROCESSOR PAUSED    */
  537                                              /*    STATE = 2 - PROCESSOR RUNNING   */
  538                                              /*    STATE > 2 - PROCESSOR HUNG UP   */
  539      %MEND;
  540      /**/
  541      /**/
  542      /*  STRUCTURE FOR PARITY ERRORS, OP NOT COMPLETE ERRORS,   */
  543      /*      AND OTHER HARDWARE ERRORS REPORTED FROM HFB$HDWR   */
  544      /**/
  545      %MACRO EL$PROCERR (NAME=EL$PROCERR,
  546                         STCLASS=BASED,
  547                         HRSIZE4=4,
  548                         SHORT(YES=1,NO=0)=0);
  549      DCL 1 NAME STCLASS ALIGNED,
  550            2 ISR BIT(72),                    /* ISR                                */
  551            2 FLTREG BIT(72),                 /* FAULT REGISTER                     */
  552            2 IC UBIN(18) UNAL,               /* INSTRUCTION COUNTER                */
  553            2 IR BIT(18) UNAL,                /* INDICATOR REGISTER                 */
  554            2 SYSID UBIN(18) UNAL,            /* CURRENT USER SYSID                 */
  555            2 PORT# UBIN(9) UNAL,             /* CPU PORT NUMBER                    */
14:22 JUL 28 '97 EL$TABLES.:E05SI                                          16   
  556            2 PROCTYPE UBIN(4) UNAL,          /* PROCESSOR TYPE CODE (FROM S_PTYPE) */
  557            2 FC UBIN(5) UNAL,                /* 5 BIT FAULT CODE                   */
  558            2 INST UBIN,                      /* FAULTING INSTRUCTION               */
  559            2 RSW2 BIT(36),                   /* RSW 2 DATA FOR THIS CPU            */
  560            2 * UBIN,
  561            2 SSSIZE UBIN HALF UNAL,          /* SAFE STORE SIZE                    */
  562      %IF SHORT=0;
  563            2 HRSIZE UBIN HALF UNAL,          /* HISTORY REGISTER SIZE              */
  564            2 SAFESTORE,                      /* SAFE STORE FRAME                   */
  565              3 * (0:55) UBIN,
  566              3 CSHERR,                       /* DATA LOGGED FOR CACHE PARITY ERROR */
  567                4 CSH_SIZE UBIN HALF UNAL,    /* CACHE SIZE - 8K OR 2K              */
  568                4 CSH_ADDR UBIN HALF UNAL,    /* CACHE ADDRESS FOR FAILING DBLWRD   */
  569                                              /*   FOR 2K CACHE:                    */
  570                                              /*     BITS 25-26 - LEVEL NUMBER      */
  571                                              /*     BITS 27-33 - COLUMN NUMBER     */
  572                                              /*     BIT 34 - DW WITHIN 4 WRD BLOCK */
  573                                              /*   FOR 8K CACHE:                    */
  574                                              /*     BITS 23-24 - LEVEL NUMBER      */
  575                                              /*     BITS 25-33 - COLUMN NUMBER     */
  576                                              /*     BIT 34 - DW WITHIN 4 WRD BLOCK */
  577                4 MEM_ADDR UBIN,              /* 24-BIT REAL MEMORY ADDRESS         */
  578                4 CSH_DATA BIT(72),           /* DOUBLEWORD FROM CACHE              */
  579                4 MEM_DATA BIT(72),           /* DOUBLEWORD FROM MEMORY             */
  580              3 * (0:1) UBIN,
  581            2 HISTREGS CHAR(HRSIZE4);         /* HISTORY REGISTERS                  */
  582      %ELSE;
  583            2 HRSIZE UBIN HALF UNAL;          /* HISTORY REGISTER SIZE              */
  584      %ENDIF;
  585      %MEND;
  586      /**/
  587      /*  STRUCTURE FOR LOGGING EDAC STATUS FROM SCU                        */
  588      /**/
  589      %MACRO EL$EDAC (NAME=EL$EDAC,STCLASS=BASED);
  590      DCL 1 NAME STCLASS ALIGNED,
  591            2 ADDRESS UBIN(36),               /* REAL ADDRESS OF STORE UNIT         */
  592            2 SCU_MODE BIT(72),               /* SCU MODE                           */
14:22 JUL 28 '97 EL$TABLES.:E05SI                                          17   
  593            2 STORE_MODE,                     /* STORE UNIT MODE REGISTER           */
  594              3 * BIT(36) UNAL,
  595              3 A45 UBIN(2) UNAL,             /* BOARD SELECT ADDRESS               */
  596              3 A678 UBIN(3) UNAL,            /* CHIP SELECT ADDRESS                */
  597              3 * BIT(1) UNAL,
  598              3 SYNDROME,
  599                4 NUMB UBIN(7) UNAL,          /* EDAC SYNDROME                      */
  600                4 ODDEVN BIT(1) UNAL,         /* EDAC LEAST SIGNIFICANT BIT         */
  601              3 MOSID BIT(4) UNAL,            /* MEMORY TYPE IDENTIFIER             */
  602              3 * BIT(18) UNAL,
  603      /* CPU Configuration switches for each of the four ports
  604         as read by the RSW 1 instruction on the master CPU.      */
  605            2 CPU_CONFIG(0:3),
  606      /* Port Assignment Switches. If no interlace the starting address
  607         of the memory on this port is the setting of the port assignment
  608         switches times the size of the memory on this port.      */
  609              3 PORT_ASSIGN UBIN(3) UNAL,
  610              3 PORT_ENABLE BIT(1) UNAL,      /* If set, port is enabled            */
  611              3 INITIALIZE BIT(1) UNAL,       /* If set, processor will accept*/
  612                                              /* initialize signal from SCU*/
  613              3 INTERLACE BIT(1) UNAL,        /* If set, Port is interlaced with*/
  614                                              /* the port whose upper two port*/
  615                                              /* assignment switches are set*/
  616                                              /* the same as this port.             */
  617              3 SIZE UBIN(3) UNAL,            /* Total size of memory connected*/
  618                                              /* to this port.  0=512KW, 1=1MW*/
  619                                              /* 3=2MW and 7=4MW.                   */
  620      /* SCU configuration switches for SCU on which EDAC error
  621         occured.                                                           */
  622            2 SCU_CONFIG,
  623              3 MASK_A BIT(9) UNAL,           /* Interrupt Mask A port assignment*/
  624              3 SIZE UBIN(3) UNAL,            /* Lower Store (or Store Pair)*/
  625                                              /* size. 3=256KW, 4=512KW,5=1MW       */
  626                                              /* 6=2MW AND 7=4MW.                   */
  627              3 ON_LINE BIT(4) UNAL,          /* On-Line switches for Store         */
  628                                              /* Units A, A1, B, B1                 */
  629              3 PORT# UBIN(4) UNAL,           /* SCU port to which master CPU is    */
14:22 JUL 28 '97 EL$TABLES.:E05SI                                          18   
  630                                              /* connected.                         */
  631              3 * BIT(1) UNAL,
  632              3 MODE BIT(1) UNAL,             /* Set if configuration mode switch*/
  633                                              /* is in Program position,            */
  634              3 NONEXIST_ADDR UBIN(8) UNAL,   /* Nonexistant address switches*/
  635              3 INTERLACE BIT(1) UNAL,        /* If set, Store Unit A interlaced*/
  636                                              /* with Store Unit B                  */
  637              3 LOWER_STORE BIT(1) UNAL,      /* If reset, Store Unit A (and A1),*/
  638                                              /* is lower store. If set, Store      */
  639                                              /* Unit B (and B1), is lower store*/
  640              3 PORT_MASK_LOWER BIT(4) UNAL,  /* Port Enable Mask, Port 0-3*/
  641              3 MASK_B BIT(9) UNAL,           /* Interrupt Mask B Port assignments*/
  642              3 * BIT(12) UNAL,
  643              3 CYCLIC_PRIORITY BIT(7) UNAL,  /* Port Cyclic Priority switches*/
  644              3 * BIT(4) UNAL,
  645              3 PORT_MASK_UPPER BIT(4) UNAL,  /* Port Enable Masks port 4-7         */
  646            2 * BIT(1) UNAL,
  647      /* CPU Port number (A, B, C, D) on master CPU on which error occured*/
  648            2 PORT# UBIN(2) UNAL,
  649            2 * BIT(1) UNAL,
  650      /* Store Unit (A,A1,B,B1) on SCU on which error occured             */
  651            2 STORE_UNIT UBIN(2) UNAL,
  652            2 * BIT(2) UNAL,
  653      /* Set if chip washed as a result of this error                       */
  654            2 WASHED BIT(1) UNAL,
  655      /* Base SCU port number to which master CPU is connected              */
  656            2 SCU_PORT# UBIN(9) UNAL,
  657      /* Count of errors on this Store Unit with same syndrome Number       */
  658            2 ERR_COUNT UBIN(18) UNAL,
  659      /* If chip washed, Store Unit Mode reg after washing                  */
  660            2 WASHED_STORE_MODE BIT(72) UNAL;
  661      %MEND;
  662      /**/
  663      /* STRUCTURE FOR LOST ERRORS RECORDS */
  664      /**/
  665      %MACRO EL$LOST (NAME=EL$LOST,STCLASS=BASED);
  666      DCL 1 NAME STCLASS ALIGNED,
14:22 JUL 28 '97 EL$TABLES.:E05SI                                          19   
  667            2 COUNT UBIN;                     /* NUMBER OF LOST ENTRIES             */
  668      %MEND;
  669      /**/
  670      /* STRUCTURE FOR DIAG KEYIN ENTRIES */
  671      /**/
  672      %MACRO EL$DIAG (NAME=EL$DIAG,STCLASS=BASED);
  673      DCL 1 NAME STCLASS ALIGNED,
  674            2 ACCN CHAR(8),                   /* USERS ACCOUNT                      */
  675            2 UNAME CHAR(12),                 /* USERS NAME                         */
  676            2 SYSID UBIN HALF,                /* USERS SYSID                        */
  677            2 DEVNM CHAR(8),                  /* DEVICE OPENED                      */
  678            2 TEST SBIN;                      /* POLTS, MDR, ITR OR MTAR            */
  679      %MEND;
  680      /**/
  681      /* STRUCTURE FOR SYSCON ENTRIES */
  682      /**/
  683      %MACRO EL$SYSCON (NAME=EL$SYSCON,STCLASS=BASED);
  684      DCL 1 NAME STCLASS ALIGNED,
  685            2 FUNCTION UBIN BYTE UNAL,        /* 1=PARTITION, 2=RETURN              */
  686            2 COMPONENT UBIN BYTE UNAL,      /* 1=CHANNEL, 2=DEVICE,
  687                                                3=MPC, 4=FEP              */
  688            2 IOM UBIN BYTE UNAL,             /* IOM PORT NUMBER                    */
  689            2 CHAN UBIN BYTE UNAL,            /* CHANNEL NUMBER                     */
  690            2 DEVNM CHAR(8),                  /* DEVICE NAME                        */
  691            2 ACCN CHAR(8),                   /* ACCOUNT OF SYSCON USER             */
  692            2 UNAME CHAR(12),                 /* NAME OF SYSCON USER                */
  693            2 SYSID UBIN HALF UNAL;           /* SYSID OF SYSCON USER               */
  694      %MEND;
  695      /**/
  696      /* STRUCTURE FOR MPC DEVICE STATISTICS */
  697      /**/
  698      %MACRO EL$DEVSTATS (NAME=EL$DEVSTATS,STCLASS=BASED);
  699      DCL 1 NAME STCLASS ALIGNED,
  700            2 DEVNM CHAR(8),
  701            2 MPCNAME CHAR(8),
  702            2 FW_NAME CHAR(4) UNAL,
  703            2 STATISTICS(0:15) UBIN ;
14:22 JUL 28 '97 EL$TABLES.:E05SI                                          20   
  704      %MEND;
  705      /**/
  706      /* STRUCTURE FOR MPC STATISTICS */
  707      /**/
  708      %MACRO EL$MPCSTATS (NAME=EL$MPCSTATS,STCLASS=BASED);
  709      DCL 1 NAME STCLASS ALIGNED,
  710            2 MPCNAME CHAR(8),
  711            2 FWNAME CHAR(4),                 /* FIRMWARE NAME                      */
  712            2 STATS (0:33) UBIN ;             /* MPC STATS COUNTERS                 */
  713      %MEND;
  714      /**/
  715      /* STRUCTURE FOR ANLZ TEXT */
  716      /**/
  717      %MACRO EL$ANLZ (NAME=EL$ANLZ,STCLASS=BASED);
  718      DCL 1 NAME STCLASS ALIGNED,
  719            2 JIT CHAR(24),
  720            2 USE_DOMAIN UBIN(9) UNAL,
  721            2 USE_USER# UBIN(9) UNAL,
  722            2 USE_LS UBIN(9) UNAL,
  723            2 * UBIN(9) UNAL,
  724            2 TXT CHAR(120);
  725      %MEND;
  726      /**/
  727      /* STRUCTURE FOR M$DO NOT AVAILABLE MSG  */
  728      /**/
  729      %MACRO EL$DODCB (NAME=EL$DODCB,STCLASS=BASED);
  730      DCL 1 NAME STCLASS ALIGNED,
  731            2 PROCESSOR CHAR(10),
  732            2 TXT CHAR(20);
  733      %MEND;
  734      /**/
  735      /* Structure for ZAP informational entry */
  736      /**/
  737      %MACRO EL$ZAP (NAME=EL$ZAP,
  738                          STCLASS=BASED);
  739      DCL 1 NAME STCLASS ALIGNED,
  740            2 STATION CHAR(8) UNAL,
14:22 JUL 28 '97 EL$TABLES.:E05SI                                          21   
  741            2 OPER_TEXT CHAR(140) UNAL;
  742      %MEND;
  743      %MACRO EL$FEPERR (NAME=EL$FEPERR,STCLASS=BASED);
  744      DCL 1 NAME STCLASS ALIGNED,
  745            2 STATDATA UNAL,
  746              3 NODE UBIN(16) UNAL,           /* FEP # TAHT SENT THIS RECORD*/
  747              3 * UBIN(20) UNAL,              /*FILL********/
  748              %VLP_ERRCODE (FPTN=ERRCODE,LVL=3,STCLASS=STCLASS,LAST=",");
  749              3 UTS UBIN(32) UNAL,            /* # OF L6 TICKS SINCE WE GOT UTS*/
  750              3 VALUES(0:3) UBIN HALF HALIGNED, /* Handler supplied values          */
  751              %B$TERMINAL_ID (FPTN=TERMID,LVL=3,STCLASS=STCLASS,LAST=",");
  752            2 X ALIGNED,
  753              3 DYMDATA CHAR(100) UNAL;  /*DYNMAIC DATA - MAY OR MAY NOT BE SUPPD.*/
  754      %MEND;
  755                                              /**/
  756      /**/
  757      /* STRUCTURE FOR SYSCON TO TELL ELF ABOUT NEW IO THRESHOLDS */
  758      /**/
  759      %MACRO EL$THRESHSET (NAME=EL$THRESHSET,STCLASS=BASED);
  760      DCL 1 NAME STCLASS ALIGNED,
  761            2 CODE UBIN WORD,                 /* COMPONENT TYPE - SEE TS_SUBS_C     */
  762            2 DEVNAME CHAR(8),           /* CODE = TSS_MPC|TSS_DEV : DEVICE NAME    */
  763            2 IOM REDEF DEVNAME,         /* CODE = TSS_IOM|TSS_CHAN : IOM-CHAN INFO */
  764              3 IOM# UBIN WORD,
  765              3 LOCHAN UBIN HALF UNAL,
  766              3 HICHAN UBIN HALF UNAL,
  767            2 THRESH UBIN WORD;               /* NEW THRESH VALUE                   */
  768      %MEND;
  769
  770      /**/
  771      /* CHANNEL TRANSITION */
  772      /**/
  773      %MACRO EL$CHANTRAN (NAME=EL$CHANTRAN,STCLASS=BASED);
  774      DCL 1 NAME STCLASS ALIGNED,
  775            2 IOP# UBIN BYTE CALIGNED,   /* IOP this special interrupt came from    */
  776            2 * BIT(27) UNAL,
  777            2 STATUS ALIGNED,                 /* Special statuc from channel 6      */
14:22 JUL 28 '97 EL$TABLES.:E05SI                                          22   
  778              3 PRESENT BIT(1) UNAL,          /* Interrupt is present               */
  779              3 CHAN UBIN(8) UNAL,            /* Channel requiring service          */
  780              3 * BIT(1) UNAL,
  781              3 DEVNUM UBIN(8) UNAL,          /* Device number - 0 for MSOS         */
  782              3 * BIT(1) UNAL,
  783              3 CHAN_STAT UBIN(8) UNAL,       /* New status of channel              */
  784              3 * BIT(1) UNAL,
  785              3 MSOS_REQ UBIN(8) UNAL;        /* What MSOS wants us to do           */
  786      %MEND;
  787      /**/
  788      /* MSOSSAYS - MSOS telling CP6 something */
  789      /**/
  790      %MACRO EL$MSOSSAYS (NAME=EL$MSOSSAYS,STCLASS=BASED);
  791      DCL 1 NAME STCLASS ALIGNED,
  792            2 IOP# UBIN BYTE CALIGNED,        /* IOP from which this request came   */
  793            2 * BIT(27) UNAL,
  794            2 MLW ALIGNED,
  795              3 START UBIN(18) HALIGNED,
  796              3 BOUNDARY REDEF START UBIN(18) HALIGNED,
  797              3 FINISH UBIN(18) HALIGNED,
  798              3 SIZE REDEF FINISH UBIN(18) HALIGNED,
  799            2 MLWE ALIGNED,
  800              3 BASE UBIN(18) HALIGNED,
  801              3 BOUND UBIN(18) HALIGNED,
  802            2 IDCWE ALIGNED,
  803              3 RC BIT(6) UNAL,
  804              3 PROG# UBIN(12) UNAL,
  805              3 * UBIN(18) UNAL,
  806            2 IDCW ALIGNED,
  807              3 CODE BIT(6) UNAL,
  808              3 CHAN UBIN(6) UNAL,
  809              3 DEVNUM UBIN(6) UNAL,
  810              3 PROCESSOR UBIN(3) UNAL,
  811              3 IOP# UBIN(3) UNAL,
  812              3 * UBIN(12) UNAL;
  813      %MEND;
  814      /**/
14:22 JUL 28 '97 EL$TABLES.:E05SI                                          23   
  815      /* CP6SAYS - CP6 answering an MSOSSAYS */
  816      /**/
  817      %MACRO EL$CP6SAYS (NAME=EL$CP6SAYS,STCLASS=BASED);
  818      DCL 1 NAME STCLASS ALIGNED,
  819            2 IOP# UBIN BYTE CALIGNED,        /* IOP that we're answering           */
  820            2 REASON UBIN BYTE CALIGNED,      /* Reason for CP6's response          */
  821            2 * BIT(18) UNAL,
  822            2 MLW ALIGNED,
  823              3 START UBIN(18) HALIGNED,
  824              3 BOUNDARY REDEF START UBIN(18) HALIGNED,
  825              3 FINISH UBIN(18) HALIGNED,
  826              3 SIZE REDEF FINISH UBIN(18) HALIGNED,
  827            2 MLWE ALIGNED,
  828              3 BASE UBIN(18) HALIGNED,
  829              3 BOUND UBIN(18) HALIGNED,
  830            2 IDCWE ALIGNED,
  831              3 RC BIT(6) UNAL,
  832              3 PROG# UBIN(12) UNAL,
  833              3 * UBIN(18) UNAL,
  834            2 IDCW ALIGNED,
  835              3 CODE BIT(6) UNAL,
  836              3 CHAN UBIN(6) UNAL,
  837              3 DEVNUM UBIN(6) UNAL,
  838              3 PROCESSOR UBIN(3) UNAL,
  839              3 IOP# UBIN(3) UNAL,
  840              3 * UBIN(12) UNAL;
  841      %MEND;
  842      /**/
  843      /* Structure for CHNGAARD entries */
  844      /**/
  845      %MACRO EL$CHNGAARD ( NAME=EL$CHNGAARD, STCLASS=BASED ) ;
  846      DCL 1 NAME STCLASS ALIGNED,
  847            2 OLD BIT(1) UNAL,                /* Previous (old) data present.       */
  848            2 NEW BIT(1) UNAL,                /* Changed  (new) data present.       */
  849            2 ERR BIT(1) UNAL,                /* Error rewriting AARDVARK to disk.  */
  850            2 *   BIT(6) UNAL,
  851            2 OLDIOM  UBIN(2) UNAL,           /* Old logical IOM number.            */
14:22 JUL 28 '97 EL$TABLES.:E05SI                                          24   
  852            2 OLDCHAN UBIN(7) UNAL,           /* Old logical channel number.        */
  853            2 *       UBIN(9) UNAL,
  854            2 NEWIOM  UBIN(2) UNAL,           /* New logical IOM number.            */
  855            2 NEWCHAN UBIN(7) UNAL,           /* New logical channel number.        */
  856            2 *       UBIN(9) UNAL,
  857            2 ACCN CHAR(8),                   /* Account of SYSCON user             */
  858            2 UNAME CHAR(12),                 /* Name of SYSCON user                */
  859            2 SYSID UBIN HALF UNAL;           /* SYSID of SYSCON user               */
  860      %MEND;
  861      /**/
  862      /* Structure for MIRROR entries */
  863      /**/
  864      %MACRO EL$MIRROR ( NAME=EL$MIRROR, STCLASS=BASED ) ;
  865      DCL 1 NAME STCLASS ALIGNED,
  866            2 DEVNM UNAL,                     /* Device names                       */
  867              3 THIS CHAR(8) UNAL,            /* for this device,                   */
  868              3 OTHER CHAR(8) UNAL,           /* and for other devcie.*/
  869            2 VSN   UBIN(36) UNAL,            /* VSN                                */
  870            2 UTS   UBIN(36) UNAL,            /* UTS                                */
  871            2 STATE,
  872              3 OLD UBIN(6) UNAL,             /* Old (previous) state               */
  873              3 NEW UBIN(6) UNAL,             /* New (current) state                */
  874            2 PRI BIT(1) UNAL,                /* Primary device.                    */
  875            2 * BIT(5) UNAL,                  /* RFU                                */
  876            2 ACCT CHAR(8) UNAL,              /* User account.                      */
  877            2 UNAME CHAR(12) UNAL,            /* User name.                         */
  878            2 SYSID UBIN(18) ;                /* User sysid.                        */
  879      %MEND ;

