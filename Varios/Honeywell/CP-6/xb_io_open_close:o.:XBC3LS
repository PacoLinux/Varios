
PL6.E3A0      #001=FREOPEN File=xb_io_open_close:6.:XBC3TSI                      FRI 01/06/95 11:29 Page:1    
        1        1        /*T***********************************************************/
        2        2        /*T*                                                         */
        3        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
        4        4        /*T*                                                         */
        5        5        /*T***********************************************************/
        6        6        freopen: PROC (filename, mode, passed_file_header);
        7        7           /*D*  NAME: freopen
        8        8                 PROTOTYPE: FILE *freopen (const char *filename,
        9        9                                           const char *mode, FILE *stream);
       10       10                 DESCRIPTION: Reopens the stream to the specified filename with
       11       11                    the specified mode.  If successful, the value of stream is
       12       12                    returned, otherwise NULL is returned.
       13       13           */
       14       14
       15       15           %INCLUDE CP_6;
       16     5575           %INCLUDE CP_6_SUBS;
       17     6115           %INCLUDE xb_stdio_i6;
       18     6358           %INCLUDE xb_errors_i6;
       19     6429           %INCLUDE FM$FIT;
       20     6650           %INCLUDE B$TABLES_C;
       21     6758           %INCLUDE XUD_UTS_M;
       22     6840
       23     6841           %XUD$UTS_ENTRIES;
       24     6873           %XUD_UTS_EQU;
       25     6884
       26     6885    1      DCL filename            CHAR (filename_size);
       27     6886    1      DCL mode                CHAR (mode_size);
       28     6887           %File_Header            (Name=passed_file_header, Stclass=" ");
       29     6999
       30     7000    1      DCL filename_size       SBIN;
       31     7001    1      DCL mode_size           SBIN;
       32     7002    1      DCL mode_pos            SBIN;
       33     7003    1      DCL exist_flag          SBIN;
       34     7004           %File_Header (Name=F, Stclass="BASED (F$)");
       35     7116    1      DCL F$                  PTR;
       36     7117    1      DCL update_mode         BIT(1);
       37     7118    1      DCL command_line_dcb    BIT(1); /* set if user asked to open command line
PL6.E3A0      #001=FREOPEN File=xb_io_open_close:6.:XBC3TSI                      FRI 01/06/95 11:29 Page:2    
       38     7119                                              dcb. */
       39     7120    1      DCL specific_dcb        BIT(1); /* set if user asked to open a specific
       40     7121                                              dcb. */
       41     7122    1      DCL specific_org        BIT(1);
              7122               /* set if user asked to open with a specific org */
       42     7123    1      DCL binary_type         CONSTANT CHAR(0) INIT('cb');
       43     7124    1      DCL text_type           CONSTANT CHAR(0) INIT('ct');
       44     7125    1      DCL open_mode           CHAR (1);
       45     7126    1      DCL dcb#                UBIN;
       46     7127    1      DCL DCB$                PTR;
       47     7128
       48     7129    1      dcl B$FILDES$           ptr static symdef init( addr(nil) );
       49     7130    1      dcl FILDES$(0:0)        ptr  based(B$FILDES$);
       50     7131
       51     7132           %FPT_FID (FPTN=FPT_FID, STCLASS=CONSTANT);
       52     7155           %FPT_FID (FPTN=FPT@FID, STCLASS=AUTO);
       53     7178
       54     7179           %FPT_GETDCB (FPTN=GETDCB_CONST, STCLASS=CONSTANT);
       55     7194           %FPT_GETDCB (FPTN=GETDCB, STCLASS=AUTO);
       56     7209
       57     7210           %FPT_OPEN (FPTN=OPEN_CONST, STCLASS=CONSTANT);
       58     7319           %FPT_OPEN (FPTN=OPEN, STCLASS=AUTO);
       59     7428
       60     7429           %FPT_REW (FPTN=REWIND_CONST, STCLASS=CONSTANT);
       61     7444           %FPT_REW (FPTN=REWIND, STCLASS=AUTO);
       62     7459
       63     7460           %VLP_NAME (FPTN=DCB_NAME, LEN=31, STCLASS=AUTO);
       64     7487           %VLP_NAME (FPTN=VLP@NAME, LEN=31, STCLASS=AUTO);
       65     7514           %VLP_ACCT (FPTN=VLP@ACCT, STCLASS=AUTO);
       66     7527           %VLP_PASS (FPTN=VLP@PASS, STCLASS=AUTO);
       67     7540           %VLP_WSN (FPTN=VLP@WSN, STCLASS=AUTO);
       68     7553           %VLP_SN (FPTN=VLP@SN, STCLASS=AUTO);
       69     7566
       70     7567           %VLR_FID (FPTN=VLR@FID, STCLASS=AUTO);
       71     7586
       72     7587           %F$DCB (STCLASS="BASED (DCB$)");
       73     7644
PL6.E3A0      #001=FREOPEN File=xb_io_open_close:6.:XBC3TSI                      FRI 01/06/95 11:29 Page:3    
       74     7645        %FM$FIT (FM$FIT=FPARAM,BASED="",N=1023);
       75     7648        %CODE04 (BASED="BASED(FIT$)");
       76     7656
       77     7657        %B$SR_NON_BLANK;
       78     7661        %B$SR_NON_ALPHA;
       79     7665        %B$SR_NON_DEC;
       80     7669
       81     7670    1   DCL FIT$ PTR;
       82     7671
       83     7672    1      DCL XBI$CLOSE_FILE               ENTRY (1) ALTRET;
       84     7673    1      DCL XBI$GET_FILE_HEADER          ENTRY (1) ALTRET;
       85     7674    1      DCL XBI_SET_STREAM_ERRNO         ENTRY (2);
       86     7675    1      DCL XBI_SET_ERRNO                ENTRY (1);
       87     7676    1      DCL XBI$EXECUTE_OPEN             ENTRY (2) ALTRET;
       88     7677    1      DCL XB_RETURN_ORDINAL_RESULT     ENTRY (1);
       89     7678    1      DCL XBI$FCLOSE                   ENTRY (1) ALTRET;
       90     7679    1      DCL XBI$INIT_FILE_HEADER         ENTRY (1);
       91     7680    1      DCL XBI$LINK_FILE_HEADER         ENTRY (1);
       92     7681    1      DCL XSF$LOCCODT                  ENTRY (2) ALTRET;
       93     7682    1      DCL XBI$STRLEN                   ENTRY (2);
       94     7683
       95     7684    1      command_line_dcb = '0'B;
       96     7685    1      specific_dcb = '0'B;
       97     7686
       98     7687    1      F$ = ADDR (passed_file_header);
       99     7688
      100     7689           /* If the user passed us a NULL pointer or the stream is closed then
      101     7690              quietly turn this into a call to fopen.
      102     7691           */
      103     7692
      104     7693    1      IF F$ = ADDR(NIL) THEN GOTO treat_as_fopen;
      105     7694
      106     7695    2      IF NOT F.is_open THEN DO;
      107     7696    2         CALL XBI$INIT_FILE_HEADER (F);
      108     7697    2         GOTO treat_as_fopen;
      109     7698    2      END;
      110     7699
PL6.E3A0      #001=FREOPEN File=xb_io_open_close:6.:XBC3TSI                      FRI 01/06/95 11:29 Page:4    
      111     7700        /*    Check to see if they specified 'dcb=' in  the file name.
      112     7701              If they did we must release the DCB and buffers associated with
      113     7702              the file and later on the code used for this type of open
      114     7703              is done (i.e., after the treat_as_fopen label                 */
      115     7704
      116     7705    1      CALL XBI$STRLEN (filename, filename_size);
      117     7706    1      IF (filename_size >4) AND
      118     7707    1         (SUBSTR(filename,0,4) = 'dcb=' OR SUBSTR(filename,0,4) = 'DCB=')
      119     7708    2      THEN DO;
      120     7709    2         IF (B$FILDES$ ~= ADDR(NIL)) THEN
      121     7710    2            FILDES$(F.fpt_read.v.dcb#) = ADDR(NIL);
      122     7711    2         CALL XBI$FCLOSE(F);  /* Ignore errors on close */
      123     7712    2         GOTO treat_as_fopen;
      124     7713    2      END;
      125     7714
      126     7715    1      CALL XBI$CLOSE_FILE (F); /* errors on close are ignored. */
      127     7716
      128     7717           /* scrub the file header, except for the dcb number */
      129     7718
      130     7719    1      dcb# = F.fpt_read.v.dcb#;
      131     7720    1      CALL XBI$INIT_FILE_HEADER (F);
      132     7721    1      F.fpt_read.v.dcb# = dcb#;
      133     7722    1      F.fpt_write.v.dcb# = dcb#;
      134     7723
      135     7724    1      GOTO entry_from_freopen;
      136     7725
      137     7726    1   tmpfile: ENTRY;
      138     7727           /*D*  NAME: tmpfile
      139     7728                 PROTOTYPE: FILE *tmpfile (void)
      140     7729                 DESCRIPTION: Opens a binary stream to a scratch file in "wb+" mode.
      141     7730           */
      142     7731
      143     7732    1      command_line_dcb = '0'B;
      144     7733    1      specific_dcb = '0'B;
      145     7734
      146     7735    1      open_mode = 'w';
      147     7736    1      update_mode = '1'B;
PL6.E3A0      #001=FREOPEN File=xb_io_open_close:6.:XBC3TSI                      FRI 01/06/95 11:29 Page:5    
      148     7737    1      CALL XBI$GET_FILE_HEADER (F$) ALTRET (error_return);
      149     7738    1      GETDCB = GETDCB_CONST;
      150     7739    1      GETDCB.V_ = VECTOR (GETDCB.V);
      151     7740    1      GETDCB.DCBNUM_ = VECTOR (F.fpt_read.v.dcb#);
      152     7741    1      CALL M$GETDCB (GETDCB) ALTRET (monitor_error);
      153     7742    1      F.fpt_write.v.dcb# = F.fpt_read.v.dcb#;
      154     7743    1      F.is_text = '0'B;
      155     7744    1      DCB$ = DCBADDR (F.fpt_read.v.dcb#);
      156     7745    1      OPEN = OPEN_CONST;
      157     7746    1      OPEN.V_ = VECTOR (OPEN.V);
      158     7747    1      OPEN.V.DCB# = F.fpt_read.v.dcb#;
      159     7748    1      OPEN.V.ASN# = %FILE#;
      160     7749    1      OPEN.V.DISP# = %SCRATCH#;
      161     7750    1      exist_flag = %NEWFILE#;
      162     7751    1      GOTO entry_from_tmpfile;
      163     7752
      164     7753    1   fopen: ENTRY (filename, mode);
      165     7754           /*D*  NAME: fopen
      166     7755                 PROTOTYPE: FILE *fopen (const char *filename,
      167     7756                                         const char *mode);
      168     7757                 DESCRIPTION: Opens a stream to the specified filename with
      169     7758                    the specified mode.  If successful, the value of stream is
      170     7759                    returned, otherwise NULL is returned.
      171     7760           */
      172     7761
      173     7762    1      command_line_dcb = '0'B;
      174     7763    1      specific_dcb = '0'B;
      175     7764
      176     7765    1      F$ = ADDR(NIL);
      177     7766
      178     7767    1   treat_as_fopen:
      179     7768    1      CALL XBI$STRLEN (filename, filename_size);
      180     7769
      181     7770    1      IF F$ = ADDR(NIL) THEN
      182     7771    1         CALL XBI$GET_FILE_HEADER (F$) ALTRET (error_return);
      183     7772    1      ELSE
      184     7773    1         CALL XBI$INIT_FILE_HEADER (F);
PL6.E3A0      #001=FREOPEN File=xb_io_open_close:6.:XBC3TSI                      FRI 01/06/95 11:29 Page:6    
      185     7774
      186     7775    1      GETDCB = GETDCB_CONST;
      187     7776    1      GETDCB.V_ = VECTOR (GETDCB.V);
      188     7777    1      GETDCB.DCBNUM_ = VECTOR (F.FPT_READ.V.DCB#);
      189     7778
      190     7779           /* does user want to open a specific dcb? */
      191     7780
      192     7781    1      IF filename_size > 4 AND
      193     7782    1         (SUBSTR(filename,0,4) = 'dcb=' OR SUBSTR(filename,0,4) = 'DCB=')
      194     7783    2      THEN DO;
      195     7784    2         DCB_NAME.L# = filename_size - 4;
      196     7785    2         DCB_NAME.NAME# = SUBSTR (filename, 4);
      197     7786    2         GETDCB.DCBNAME_ = VECTOR (DCB_NAME);
      198     7787    2         GETDCB.V.MERGE# = '1'B;
      199     7788    2         specific_dcb = '1'B;
      200     7789    1      END; ELSE
      201     7790    1         specific_dcb = '0'B;
      202     7791
      203     7792           /* check to see if user wants to open special command line dcb's */
      204     7793
      205     7794    1      IF filename_size = 2 AND
      206     7795    1         (SUBSTR (filename, 0, 2) >= '#1') AND (SUBSTR (filename, 0, 2) <= '#4')
      207     7796    2      THEN DO;
      208     7797    2         DCB_NAME.L# = 2;
      209     7798    2         DCB_NAME.NAME# = filename;
      210     7799    2         GETDCB.DCBNAME_ = VECTOR (DCB_NAME);
      211     7800    2         GETDCB.V.MERGE# = '1'B;
      212     7801    2         command_line_dcb = '1'B;
      213     7802    1      END; ELSE
      214     7803    1         command_line_dcb = '0'B;
      215     7804    1      CALL M$GETDCB (GETDCB) ALTRET (monitor_error);
      216     7805
      217     7806    1      F.FPT_WRITE.V.DCB# = F.FPT_READ.V.DCB#;
      218     7807
      219     7808    1   entry_from_freopen:
      220     7809
      221     7810    1      CALL XBI$STRLEN (mode, mode_size);
PL6.E3A0      #001=FREOPEN File=xb_io_open_close:6.:XBC3TSI                      FRI 01/06/95 11:29 Page:7    
      222     7811
      223     7812    1      update_mode = '0'B;
      224     7813    1      F.is_text = '1'B;
      225     7814    1      DCB$ = DCBADDR (F.fpt_read.v.dcb#);
      226     7815    1      open_mode = SUBSTR (mode, 0, 1);
      227     7816    2      DO SELECT open_mode;
      228     7817    2         SELECT ('r');
      229     7818    2         SELECT ('w');
      230     7819    2           exist_flag = %NEWFILE#;
      231     7820    2         SELECT ('a');
      232     7821    2           exist_flag = %OLDFILE#;
      233     7822    2         SELECT (ELSE);
      234     7823    2            CALL XBI_SET_ERRNO (ERR$BAD_OPEN_MODE);
      235     7824    2            GOTO error_return;
      236     7825    2      END;
      237     7826    2      DO SELECT SUBSTR (mode, 1, 1);
      238     7827    2         SELECT ('b');
      239     7828    2            F.is_text = '0'B;
      240     7829    2            IF SUBSTR (mode, 2, 1) = '+' THEN update_mode = '1'B;
      241     7830    2         SELECT ('+');
      242     7831    2            update_mode = '1'B;
      243     7832    2            IF SUBSTR (mode, 2, 1) = 'b' THEN F.is_text = '0'B;
      244     7833    2      END;
      245     7834
      246     7835           /* r+ and w+ modes can't be properly implemented in a record oriented
      247     7836              file system.  The standard allows us to treat these as rb+ and wb+
      248     7837              instead.
      249     7838           */
      250     7839
      251     7840    1      IF update_mode AND F.is_text AND (open_mode =  'r' OR open_mode = 'w') THEN
      252     7841    1         F.is_text = '0'B;
      253     7842
      254     7843    1      OPEN = OPEN_CONST;
      255     7844    1      OPEN.V_ = VECTOR (OPEN.V);
      256     7845    1      OPEN.V.DCB# = F.FPT_READ.V.DCB#;
      257     7846
      258     7847    1      IF command_line_dcb OR specific_dcb THEN
PL6.E3A0      #001=FREOPEN File=xb_io_open_close:6.:XBC3TSI                      FRI 01/06/95 11:29 Page:8    
      259     7848    1         OPEN.V.ASN# = F$DCB.ASN#;
      260     7849    2      ELSE DO;
      261     7850    2         FPT@FID           = FPT_FID;
      262     7851    2         FPT@FID.V_        = VECTOR(FPT@FID.V);
      263     7852    2         FPT@FID.NAME_     = VECTOR(VLP@NAME);
      264     7853    2         FPT@FID.ACCT_     = VECTOR(VLP@ACCT);
      265     7854    2         FPT@FID.PASS_     = VECTOR(VLP@PASS);
      266     7855    2         FPT@FID.ASN_      = VECTOR(OPEN.V.ASN#);
      267     7856    2         FPT@FID.RES_      = VECTOR(OPEN.V.RES#);
      268     7857    2         FPT@FID.SN_       = VECTOR(VLP@SN);
      269     7858    2         FPT@FID.WSN_      = VECTOR(VLP@WSN);
      270     7859    2         IF filename_size = 0 THEN
      271     7860    2            FPT@FID.TEXTFID_ = VECTOR(NIL);
      272     7861    2         ELSE
      273     7862    2            FPT@FID.TEXTFID_  = VECTOR(filename);
      274     7863    2         FPT@FID.RESULTS_  = VECTOR(VLR@FID);
      275     7864    2         VLR@FID = '0'B;
      276     7865    2         CALL M$FID (FPT@FID) ALTRET (monitor_error);
      277     7866
      278     7867    2         OPEN.ACCT_ = VECTOR(VLP@ACCT);
      279     7868    2         OPEN.NAME_ = VECTOR(VLP@NAME);
      280     7869    2         OPEN.PASS_ = VECTOR(VLP@PASS);
      281     7870    2         OPEN.SN_   = VECTOR(VLP@SN);
      282     7871    2         OPEN.WSN_  = VECTOR(VLP@WSN);
      283     7872    2      END;
      284     7873
      285     7874    1     specific_org = '0'B;
      286     7875    2     call index(mode_pos, ' ', mode) whenreturn do;
      287     7876    2        call scan_options;
      288     7877    2        end;
      289     7878
      290     7879    1   entry_from_tmpfile:
      291     7880
      292     7881    1      if (B$FILDES$ ~= addr(nil)) then
      293     7882    1         FILDES$( F.fpt_read.v.dcb# ) = F$;
      294     7883
      295     7884    2      IF OPEN.V.ASN# = %FILE# THEN DO;
PL6.E3A0      #001=FREOPEN File=xb_io_open_close:6.:XBC3TSI                      FRI 01/06/95 11:29 Page:9    
      296     7885    3         IF F.is_text THEN DO;
      297     7886    3            if (not specific_dcb) and (not specific_org) then
      298     7887    3               OPEN.V.ORG# = %CONSEC#;
      299     7888    3            OPEN.V.ACS# = %SEQUEN#;
      300     7889    3         END; ELSE DO;
      301     7890    3            OPEN.V.ORG# = %KEYED#;
      302     7891    3            OPEN.V.ACS# = %DIRECT#;
      303     7892    3         END;
      304     7893    2      END;
      305     7894
      306     7895    1      OPEN.FPARAM_ = VECTOR (FPARAM);
      307     7896    2      DO SELECT open_mode;
      308     7897    2         SELECT ('r');
      309     7898    2            F.is_eof = '0'B;
      310     7899    2            F.is_reads_ok = '1'B;
      311     7900    2            F.is_write_at_eof = '0'B;
      312     7901    2            F.record_position = 0;
      313     7902    2            F.character_position = 0;
      314     7903    2            F.ars = 0;
      315     7904    3            IF update_mode THEN DO;
      316     7905    3               OPEN.V.FUN# = %UPDATE#;
      317     7906    3               F.is_writes_ok = '1'B;
      318     7907    3               CALL M$OPEN (OPEN) ALTRET (monitor_error);
      319     7908    4               IF (F$DCB.ORG# =%KEYED#) AND (F$DCB.NRECS# > 0) THEN DO;
      320     7909    4                  CALL GET_LAST_KEY ALTRET (monitor_error);
      321     7910    4                  F.FPT_READ.KEY_ = VECTOR (F.KEY);
      322     7911    4                  F.FPT_WRITE.KEY_ = VECTOR (F.KEY);
      323     7912    4               END;
      324     7913    3               ELSE
      325     7914    3                  F.last_record = F$DCB.NRECS#;
      326     7915    3               REWIND = REWIND_CONST;
      327     7916    3               REWIND.V_ = VECTOR (REWIND.V);
      328     7917    3               REWIND.V.DCB# = F.FPT_READ.V.DCB#;
      329     7918    3               CALL M$REW (REWIND) ALTRET (monitor_error);
      330     7919    3               F.state = %F_dont_care_state;
      331     7920    3            END; ELSE DO;
      332     7921    3               OPEN.V.FUN# = %IN#;
PL6.E3A0      #001=FREOPEN File=xb_io_open_close:6.:XBC3TSI                      FRI 01/06/95 11:29 Page:10   
      333     7922    3               CALL XBI$EXECUTE_OPEN (F, OPEN) ALTRET (error_return);
      334     7923    3               F.state = %F_reading_state;
      335     7924    3               F.last_record = F$DCB.NRECS#;
      336     7925    3            END;
      337     7926    2            IF (F.last_record > 1) AND (NOT F.is_text) THEN
      338     7927    2               F.ars =F$DCB.ARS#;
      339     7928    2         SELECT ('w');
      340     7929    2            F.is_eof = '1'B;
      341     7930    2            F.is_writes_ok = '1'B;
      342     7931    2            F.is_write_at_eof = '0'B;
      343     7932    2            F.record_position = 1;
      344     7933    2            F.character_position = 0;
      345     7934    2            F.ars = 0;
      346     7935    2            OPEN.V.FUN# = %CREATE#;
      347     7936
      348     7937                 /* set EXIST# to NEWFILE# unless this is a command line dcb for
      349     7938                    which the user specified TO.
      350     7939                 */
      351     7940    2            IF (command_line_dcb OR specific_dcb) THEN
      352     7941    2               OPEN.V.EXIST# = F$DCB.EXIST#;
      353     7942    2            ELSE
      354     7943    2               OPEN.V.EXIST# = exist_flag;
      355     7944
      356     7945    3            IF F.is_text AND (NOT update_mode) THEN DO;
      357     7946    3               OPEN.V.TYPE# = text_type;
      358     7947    3               CALL XBI$EXECUTE_OPEN (F, OPEN) ALTRET (error_return);
      359     7948    3            END;
      360     7949    3            ELSE DO;
      361     7950    3               OPEN.V.TYPE# = binary_type;
      362     7951    3               CALL M$OPEN (OPEN) ALTRET (monitor_error);
      363     7952    3            END;
      364     7953    3            IF update_mode THEN DO;
      365     7954    3               F.is_reads_ok = '1'B;
      366     7955    3               F.state = %F_dont_care_state;
      367     7956    2            END; ELSE
      368     7957    2               F.state = %F_writing_state;
      369     7958    2            F.last_record = 0;
PL6.E3A0      #001=FREOPEN File=xb_io_open_close:6.:XBC3TSI                      FRI 01/06/95 11:29 Page:11   
      370     7959    2         SELECT ('a');
      371     7960    2            F.is_writes_ok = '1'B;
      372     7961    2            F.is_write_at_eof = '1'B;
      373     7962    2            F.character_position = 0;
      374     7963    2            F.ars = 0;
      375     7964    2            OPEN.V.FUN# = %CREATE#;
      376     7965    2            OPEN.V.EXIST# = exist_flag;
      377     7966    3            IF (update_mode) THEN DO;
      378     7967    3               OPEN.V.TYPE# = binary_type;
      379     7968    3               OPEN.V.ORG# = %KEYED#;
      380     7969    3               OPEN.V.ACS# = %DIRECT#;
      381     7970    3            END;
      382     7971    2            ELSE
      383     7972    2               OPEN.V.TYPE# = text_type;
      384     7973    2            CALL M$OPEN (OPEN) ALTRET (monitor_error);
      385     7974    3            IF update_mode THEN DO;
      386     7975    3            IF (F$DCB.TYPE# = binary_type) THEN
      387     7976    3               F.is_text = '0'B;
      388     7977    3               F.is_reads_ok = '1'B;
      389     7978    3               F.state = %F_dont_care_state;
      390     7979    2            END; ELSE
      391     7980    2               F.state = %F_writing_state;
      392     7981    2            IF (F$DCB.NRECS# > 1) AND (NOT F.is_text) THEN
      393     7982    2               F.ars = F$DCB.ARS#;
      394     7983    2            F.last_record = F$DCB.NRECS#;
      395     7984    2            F.record_position = F.last_record + 1;
      396     7985    2            F.is_eof = '1'B;
      397     7986        /*    Check to see if the file was a keyed file.  If it is to allow
      398     7987              writes to it we must write with keys.  If the flag
      399     7988              F.FPT_WRITE.KEY_ is not NULL and it is a text file when we write
      400     7989              we are writing to a keyed file.                               */
      401     7990
      402     7991    3            IF (F$DCB.ORG# =%KEYED#) AND (F$DCB.NRECS# > 0) THEN DO;
      403     7992    3               CALL GET_LAST_KEY ALTRET (monitor_error);
      404     7993    3               F.record_position = F.last_record + 1;
      405     7994    3               F.FPT_READ.KEY_ = VECTOR (F.KEY);
      406     7995    3               F.FPT_WRITE.KEY_ = VECTOR (F.KEY);
PL6.E3A0      #001=FREOPEN File=xb_io_open_close:6.:XBC3TSI                      FRI 01/06/95 11:29 Page:12   
      407     7996    3            END;
      408     7997    2      END;
      409     7998
      410     7999    1      FIT$ = addr (FPARAM);
      411     8000    1      CALL XSF$LOCCODT (FIT$, 4)
      412     8001    2      WHENRETURN DO;
      413     8002    2              CALL XUD$UTS_DIFF_SEC (F.MOD_TIME,CODE04.MODIFY.TIME,0);
      414     8003    2              F.MOD_TIME = F.MOD_TIME + ((365*8+2)*(60*60*24));
      415     8004    2              CALL XUD$UTS_DIFF_SEC (F.CREATE_TIME,CODE04.CREATION.TIME,0);
      416     8005    2              F.CREATE_TIME = F.CREATE_TIME + ((365*8+2)*(60*60*24));
      417     8006    2      END;
      418     8007
      419     8008           /* Is this a keyed binary file? */
      420     8009
      421     8010    2      IF NOT F.is_text AND F$DCB.ORG# = %KEYED# THEN DO;
      422     8011    2         F.FPT_READ.KEY_ = VECTOR (F.KEY);
      423     8012    2         F.FPT_READ.V.KEYS# = '1'B;
      424     8013    2         F.FPT_WRITE.KEY_ = VECTOR (F.KEY);
      425     8014    2      END;
      426     8015
      427     8016           /* TRANS=YES is used on binary streams open to a device */
      428     8017
      429     8018    2      IF NOT F.is_text AND F$DCB.ASN# = %DEVICE# THEN DO;
      430     8019    2         F.fpt_read.v.dvbyte.trans# = '1'B;
      431     8020    2         F.fpt_write.v.dvbyte.trans# = '1'B;
      432     8021    2      END; ELSE DO;
      433     8022    2         F.fpt_read.v.dvbyte.trans# = '0'B;
      434     8023    2         F.fpt_write.v.dvbyte.trans# = '0'B;
      435     8024    2      END;
      436     8025
      437     8026    1      F.is_partly_open = '1'B;
      438     8027    1      F.is_open = '1'B;
      439     8028    1      CALL XBI$LINK_FILE_HEADER (F);
      440     8029    1      CALL XB_RETURN_ORDINAL_RESULT (F$);
      441     8030    1      RETURN;
      442     8031
      443     8032    1   monitor_error:
PL6.E3A0      #001=FREOPEN File=xb_io_open_close:6.:XBC3TSI                      FRI 01/06/95 11:29 Page:13   
      444     8033    1      CALL XBI_SET_STREAM_ERRNO (F);
      445     8034
      446     8035    1   error_return:
      447     8036    1      IF F$ ~= ADDR(NIL) THEN
      448     8037    1         CALL XBI$FCLOSE (F); /* we don't care if it ALTRETURNs */
      449     8038    1      CALL XB_RETURN_ORDINAL_RESULT (ADDR (NIL));
      450     8039
      451     8040
      452     8041        /*I*    NAME:       SCAN_OPTIONS
      453     8042                PURPOSE:    To scan and setup the required options in
      454     8043                            the open fpt.
      455     8044                DESCRIPTION:
      456     8045                   The mode string may contain a blank which is
      457     8046                   followed by the following keywords (separated by
      458     8047                   blanks):
      459     8048                   oldfile     ...   if file exists use old file
      460     8049                   newfile     ...   if file exists create a new one
      461     8050                   error       ...   if file exists, report an error
      462     8051
      463     8052                   all         ...   shared updates
      464     8053                   sharein     ...   single updater, multiple readers
      465     8054                   none        ...   shared reading only
      466     8055
      467     8056                   scratch     ...   don't save file
      468     8057                   named       ...   save file on close
      469     8058
      470     8059                   ctg         ...   catalogue file on open
      471     8060                   comp        ...   compress records
      472     8061                   load        ...   load alternate keys
      473     8062
      474     8063                   d800        ...   800 bpi
      475     8064                   d1600       ...   1600 bpi
      476     8065                   d6250       ...   6250 bpi
      477     8066                   terminal    ...   File is a terminal
      478     8067                   x364        ...   File is a X3.64 standard terminal
      479     8068                   ur          ...   File is a Unit Record File
      480     8069                   keyed       ...   File is a keyed File
PL6.E3A0      #001=FREOPEN File=xb_io_open_close:6.:XBC3TSI                      FRI 01/06/95 11:29 Page:14   
      481     8070                   consec      ...   File is a consec File
      482     8071        */
      483     8072
      484     8073    1   SCAN_OPTIONS  :  PROC ALTRET;
      485     8074
      486     8075
      487     8076        %equ FEXIST      =  1;
      488     8077        %equ FSHARE      =  2;
      489     8078        %equ FDISP       =  3;
      490     8079        %equ FDENS       =  4;
      491     8080        %equ FCTG        =  5;
      492     8081        %equ FCOMP       =  6;
      493     8082        %equ FLOAD       =  7;
      494     8083        %equ FORG        =  8;
      495     8084
      496     8085        %MACRO  OPENOPT(N=,V=1,D=0);
      497     8086        %set NUMOPTS = NUMOPTS+1;
      498     8087        ,2* char(8) init(%TEXTCHAR(N))
      499     8088        ,2* ubin(18) haligned init(D)
      500     8089        ,2* ubin(18) haligned init(V)
      501     8090        %MEND;
      502     8091
      503     8092        %set NUMOPTS = 0;
      504     8093        %set OPTSIZ  = 12;  /* 12 chars / entry */
      505     8094
      506     8095    2   dcl  1  OPTION_X constant
      507     8096
      508     8097        /**************************************************************/
      509     8098        /*                     Exist=                                 */
      510     8099        /**************************************************************/
      511     8100        %OPENOPT(N=oldfile,       V=%OLDFILE#,         D=%FEXIST);
      512     8106        %OPENOPT(N=newfile,       V=%NEWFILE#,         D=%FEXIST);
      513     8112        %OPENOPT(N=error,         V=%ERROR#,           D=%FEXIST);
      514     8118
      515     8119        /**************************************************************/
      516     8120        /*                     Share=                                 */
      517     8121        /**************************************************************/
PL6.E3A0      #001=FREOPEN File=xb_io_open_close:6.:XBC3TSI                      FRI 01/06/95 11:29 Page:15   
      518     8122        %OPENOPT(N=all,           V=%ALL#,             D=%FSHARE);
      519     8128        %OPENOPT(N=none,          V=%NONE#,            D=%FSHARE);
      520     8134        %OPENOPT(N=sharein,       V=%IN#,              D=%FSHARE);
      521     8140
      522     8141
      523     8142        /**************************************************************/
      524     8143        /*                     Disp=                                  */
      525     8144        /**************************************************************/
      526     8145        %OPENOPT(N=scratch,       V=%SCRATCH#,         D=%FDISP);
      527     8151        %OPENOPT(N=named,         V=%NAMED#,           D=%FDISP);
      528     8157
      529     8158
      530     8159        /**************************************************************/
      531     8160        /*                     Density=                               */
      532     8161        /**************************************************************/
      533     8162        %OPENOPT(N=d800,          V=%D800#,            D=%FDENS);
      534     8168        %OPENOPT(N=d1600,         V=%D1600#,           D=%FDENS);
      535     8174        %OPENOPT(N=d6250,         V=%D6250#,           D=%FDENS);
      536     8180
      537     8181        /**************************************************************/
      538     8182        /*                     Miscellaneous                          */
      539     8183        /**************************************************************/
      540     8184        %OPENOPT(N=ctg,           V=1,                 D=%FCTG);
      541     8190        %OPENOPT(N=comp,          V=1,                 D=%FCOMP);
      542     8196        %OPENOPT(N=load,          V=1,                 D=%FLOAD);
      543     8202        /**************************************************************/
      544     8203        /*                     Org=                                   */
      545     8204        /**************************************************************/
      546     8205        %OPENOPT(N=terminal,      V=%TERMINAL#,        D=%FORG);
      547     8211        %OPENOPT(N=x364,          V=%X364#,            D=%FORG);
      548     8217        %OPENOPT(N=ur,            V=%UR#,              D=%FORG);
      549     8223        %OPENOPT(N=keyed,         V=%KEYED#,           D=%FORG);
      550     8229        %OPENOPT(N=consec,        V=%CONSEC#,          D=%FORG);
      551     8235
      552     8236    2   ;
      553     8237
      554     8238    2   dcl  1  OPTIONS(0:%(NUMOPTS-1)) redef OPTION_X,
PL6.E3A0      #001=FREOPEN File=xb_io_open_close:6.:XBC3TSI                      FRI 01/06/95 11:29 Page:16   
      555     8239    2           2  name  char(8),
      556     8240    2           2  loc   ubin(18) haligned,
      557     8241    2           2  value ubin(18) haligned;
      558     8242
      559     8243    2   dcl  OPTION_S redef OPTION_X char(%(NUMOPTS*OPTSIZ));
      560     8244
      561     8245
      562     8246
      563     8247
      564     8248    2   dcl  LOC         sbin;
      565     8249
      566     8250    2   dcl  FSTRT       sbin;
      567     8251    2   dcl  FEND        sbin;
      568     8252    2   dcl  SZ          sbin;
      569     8253
      570     8254    2   dcl  FVAL        ubin;
      571     8255    2   dcl  OPTNAME     char(8);
      572     8256    2   dcl  OPTI        sbin;
      573     8257
      574     8258    2     call index(LOC, ' ', mode);
      575     8259
      576     8260    3     do while LOC < mode_size;
      577     8261    3        call search(FEND, FVAL, B$SR_NON_BLANK, mode, LOC)
      578     8262    4           whenaltreturn do; exit; end;
      579     8263    3        FSTRT = FEND;
      580     8264    3        LOC   = FEND;
      581     8265    4        do while (binbit(FVAL,9) & %(B$SR#ALPHA | B$SR#DEC));
      582     8266    4           call search(FEND, FVAL, B$SR_NON_ALPHA, mode, LOC);
      583     8267    4           LOC = FEND;
      584     8268    4           call search(FEND, FVAL, B$SR_NON_DEC,   mode, LOC);
      585     8269    4           LOC = FEND;
      586     8270    4           end;
      587     8271    3        SZ = FEND - FSTRT;
      588     8272    3        if SZ <= 0  or SZ > 8
      589     8273    3           then exit;
      590     8274    3        OPTNAME = substr(mode, FSTRT, SZ);
      591     8275    3        call index(OPTI, OPTNAME, OPTION_S)
PL6.E3A0      #001=FREOPEN File=xb_io_open_close:6.:XBC3TSI                      FRI 01/06/95 11:29 Page:17   
      592     8276    4           whenaltreturn do; exit; end;
      593     8277    3        OPTI = OPTI / %OPTSIZ;
      594     8278    4        do case( options.loc(opti) );
      595     8279
      596     8280    4        case(%FEXIST); OPEN.V.EXIST#   = OPTIONS.VALUE(OPTI);
      597     8281    4                       exist_flag      = OPTIONS.VALUE(OPTI);
      598     8282    4        case(%FSHARE); OPEN.V.SHARE#   = OPTIONS.VALUE(OPTI);
      599     8283    4        case(%FDISP);  OPEN.V.DISP#    = OPTIONS.VALUE(OPTI);
      600     8284    4        case(%FDENS);  OPEN.V.DENSITY# = OPTIONS.VALUE(OPTI);
      601     8285    4        case(%FCTG);   OPEN.V.CTG#     = binbit(OPTIONS.VALUE(OPTI),1);
      602     8286    4        case(%FCOMP);  OPEN.V.COMP#    = binbit(OPTIONS.VALUE(OPTI),1);
      603     8287    4        case(%FLOAD);  OPEN.V.LOAD#    = binbit(OPTIONS.VALUE(OPTI),1);
      604     8288    4        case(%FORG);   OPEN.V.ORG#      = OPTIONS.VALUE(OPTI);
      605     8289    4                       specific_org = '1'B;
      606     8290
      607     8291    4        end;
      608     8292    3     end;
      609     8293
      610     8294    2     if (LOC < mode_size)
      611     8295    2        then altreturn;
      612     8296    2     return;
      613     8297
      614     8298    2   end SCAN_OPTIONS;
      615     8299
      616     8300    1   GET_LAST_KEY   :  PROC  ALTRET;
      617     8301        %FPT_PFIL(FPTN=POS_EOF_CONST, STCLASS=CONSTANT);
      618     8316        %FPT_PFIL(FPTN=POS_EOF, STCLASS=AUTO);
      619     8331        %FPT_PRECORD (FPTN=LAST_REC_CONST, STCLASS=CONSTANT);
      620     8352        %FPT_PRECORD (FPTN=LAST_REC, STCLASS=AUTO);
      621     8373
      622     8374        /*    Position the File to EOF                                      */
      623     8375
      624     8376    2      POS_EOF = POS_EOF_CONST;
      625     8377    2      POS_EOF.V_ = vector (POS_EOF.V);
      626     8378    2      POS_EOF.V.DCB# = F.FPT_READ.V.DCB#;
      627     8379    2      CALL M$PFIL (POS_EOF) ALTRET (err_return);
      628     8380    2      LAST_REC = LAST_REC_CONST;
PL6.E3A0      #001=FREOPEN File=xb_io_open_close:6.:XBC3TSI                      FRI 01/06/95 11:29 Page:18   
      629     8381    2      LAST_REC.V_ = vector (LAST_REC.V);
      630     8382    2      LAST_REC.V.DCB# = F.FPT_READ.V.DCB#;
      631     8383    2      LAST_REC.KEY_ = VECTOR (F.KEY);
      632     8384    2      LAST_REC.V.KEYR# = '1'B;
      633     8385    2      LAST_REC.V.N# = -1;
      634     8386    2      CALL M$PRECORD (LAST_REC) ALTRET (err_return);
      635     8387    2      CALL M$PFIL (POS_EOF) ALTRET (err_return);
      636     8388    3      IF (F.key.len = 3) THEN DO;
      637     8389    3         F.last_record = F.key.record;
      638     8390        /*    Make sure the number of recs for the file is equal to the last rec */
      639     8391    4         IF (~F.is_text) AND (F$DCB.NRECS# ~= F.key.record) THEN DO;
      640     8392    4            F.is_writes_ok = '0'B;
      641     8393    4            F.is_write_at_eof = '0'B;
      642     8394    4            F.state = %F_reading_state;
      643     8395    4         END;
      644     8396    3      END;
      645     8397    2      ELSE
      646     8398    2         GOTO err_return;
      647     8399    2      return;
      648     8400
      649     8401    2   err_return:
      650     8402    2      altreturn;
      651     8403    2   END GET_LAST_KEY;
      652     8404    1   END freopen;
      653     8405        %EOD;

PL6.E3A0      #001=FREOPEN File=xb_io_open_close:6.:XBC3TSI                      FRI 01/06/95 11:29 Page:19   
--  Include file information  --

   XUD_UTS_M.:LIB_E04  is referenced.
   B$TABLES_C.:LIB_E04  cannot be made into a system file and is referenced.
   FM$FIT.:LIB_E04  is referenced.
   xb_errors_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   xb_stdio_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:LIB_E04  is referenced.
   CP_6_C.:LIB_E04  is referenced.
   CP_6.:LIB_E04  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure FREOPEN.

   Procedure FREOPEN requires 1108 words for executable code.
   Procedure FREOPEN requires 1196 words of local(AUTO) storage.

PL6.E3A0      #001=FREOPEN File=xb_io_open_close:6.:XBC3TSI                      FRI 01/06/95 11:29 Page:20   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=FREOPEN File=xb_io_open_close:6.:XBC3TSI                      FRI 01/06/95 11:29 Page:21   
          MINI XREF LISTING

B$FILDES$
      7129**DCL      7130--IMP-PTR  7709>>IF       7710>>ASSIGN   7881>>IF       7882>>ASSIGN
B$SR_NON_ALPHA
      7663**DCL      8266>>CALLBLT
B$SR_NON_ALPHA$
      7662**DCL      7663--IMP-PTR  8266>>CALLBLT
B$SR_NON_BLANK
      7659**DCL      8261>>CALLBLT
B$SR_NON_BLANK$
      7658**DCL      7659--IMP-PTR  8261>>CALLBLT
B$SR_NON_DEC
      7667**DCL      8268>>CALLBLT
B$SR_NON_DEC$
      7666**DCL      7667--IMP-PTR  8268>>CALLBLT
BINARY_TYPE
      7123**DCL      7950>>ASSIGN   7967>>ASSIGN   7975>>IF
CODE04.CREATION.TIME
      7653**DCL      8004<>CALL
CODE04.MODIFY.TIME
      7653**DCL      8002<>CALL
COMMAND_LINE_DCB
      7118**DCL      7684<<ASSIGN   7732<<ASSIGN   7762<<ASSIGN   7801<<ASSIGN   7803<<ASSIGN   7847>>IF
      7940>>IF
DCB#
      7126**DCL      7719<<ASSIGN   7721>>ASSIGN   7722>>ASSIGN
DCB$
      7127**DCL      7588--IMP-PTR  7744<<ASSIGN   7814<<ASSIGN   7848>>ASSIGN   7908>>IF       7908>>IF
      7914>>ASSIGN   7924>>ASSIGN   7927>>ASSIGN   7941>>ASSIGN   7975>>IF       7981>>IF       7982>>ASSIGN
      7983>>ASSIGN   7991>>IF       7991>>IF       8010>>IF       8018>>IF       8391>>IF
DCB_NAME
      7485**DCL      7786--ASSIGN   7799--ASSIGN
DCB_NAME.L#
PL6.E3A0      #001=FREOPEN File=xb_io_open_close:6.:XBC3TSI                      FRI 01/06/95 11:29 Page:22   
      7485**DCL      7784<<ASSIGN   7797<<ASSIGN
DCB_NAME.NAME#
      7485**DCL      7785<<ASSIGN   7798<<ASSIGN
ENTRY_FROM_FREOPEN
      7810**LABEL    7724--GOTO
ENTRY_FROM_TMPFILE
      7881**LABEL    7751--GOTO
ERROR_RETURN
      8036**LABEL    7737--CALLALT  7771--CALLALT  7824--GOTO     7922--CALLALT  7947--CALLALT
ERR_RETURN IN PROCEDURE GET_LAST_KEY
      8402**LABEL    8379--CALLALT  8386--CALLALT  8387--CALLALT  8398--GOTO
EXIST_FLAG
      7003**DCL      7750<<ASSIGN   7819<<ASSIGN   7821<<ASSIGN   7943>>ASSIGN   7965>>ASSIGN   8281<<ASSIGN
F
      7005**DCL      7696<>CALL     7711<>CALL     7715<>CALL     7720<>CALL     7773<>CALL     7922<>CALL
      7947<>CALL     8028<>CALL     8033<>CALL     8037<>CALL
F.ARS
      7027**DCL      7903<<ASSIGN   7927<<ASSIGN   7934<<ASSIGN   7963<<ASSIGN   7982<<ASSIGN
F.CHARACTER_POSITION
      7025**DCL      7902<<ASSIGN   7933<<ASSIGN   7962<<ASSIGN
F.CREATE_TIME
      7039**DCL      8004<>CALL     8005<<ASSIGN   8005>>ASSIGN
F.FPT_READ.KEY_
      7046**DCL      7910<<ASSIGN   7994<<ASSIGN   8011<<ASSIGN
F.FPT_READ.V.DCB#
      7050**DCL      7710>>ASSIGN   7719>>ASSIGN   7721<<ASSIGN   7740--ASSIGN   7742>>ASSIGN   7744--ASSIGN
      7747>>ASSIGN   7777--ASSIGN   7806>>ASSIGN   7814--ASSIGN   7845>>ASSIGN   7882>>ASSIGN   7917>>ASSIGN
      8378>>ASSIGN   8382>>ASSIGN
F.FPT_READ.V.DVBYTE.REREAD#
      7067**DCL      7068--REDEF
F.FPT_READ.V.DVBYTE.TRANS#
      7070**DCL      8019<<ASSIGN   8022<<ASSIGN
F.FPT_READ.V.INDX#
      7060**DCL      7061--REDEF
F.FPT_READ.V.KEYS#
      7052**DCL      8012<<ASSIGN
PL6.E3A0      #001=FREOPEN File=xb_io_open_close:6.:XBC3TSI                      FRI 01/06/95 11:29 Page:23   
F.FPT_WRITE.KEY_
      7083**DCL      7911<<ASSIGN   7995<<ASSIGN   8013<<ASSIGN
F.FPT_WRITE.V.DCB#
      7087**DCL      7722<<ASSIGN   7742<<ASSIGN   7806<<ASSIGN
F.FPT_WRITE.V.DVBYTE.TRANS#
      7108**DCL      8020<<ASSIGN   8023<<ASSIGN
F.FPT_WRITE.V.DVBYTE.VFC#
      7105**DCL      7106--REDEF
F.IS_EOF
      7007**DCL      7898<<ASSIGN   7929<<ASSIGN   7985<<ASSIGN
F.IS_OPEN
      7013**DCL      7695>>IF       8027<<ASSIGN
F.IS_PARTLY_OPEN
      7017**DCL      8026<<ASSIGN
F.IS_READS_OK
      7015**DCL      7899<<ASSIGN   7954<<ASSIGN   7977<<ASSIGN
F.IS_TEXT
      7006**DCL      7743<<ASSIGN   7813<<ASSIGN   7828<<ASSIGN   7832<<ASSIGN   7840>>IF       7841<<ASSIGN
      7885>>IF       7926>>IF       7945>>IF       7976<<ASSIGN   7981>>IF       8010>>IF       8018>>IF
      8391>>IF
F.IS_WRITES_OK
      7010**DCL      7906<<ASSIGN   7930<<ASSIGN   7960<<ASSIGN   8392<<ASSIGN
F.IS_WRITE_AT_EOF
      7011**DCL      7900<<ASSIGN   7931<<ASSIGN   7961<<ASSIGN   8393<<ASSIGN
F.KEY
      7034**DCL      7910--ASSIGN   7911--ASSIGN   7994--ASSIGN   7995--ASSIGN   8011--ASSIGN   8013--ASSIGN
      8383--ASSIGN
F.KEY.LEN
      7035**DCL      8388>>IF
F.KEY.RECORD
      7036**DCL      8389>>ASSIGN   8391>>IF
F.LAST_RECORD
      7028**DCL      7914<<ASSIGN   7924<<ASSIGN   7926>>IF       7958<<ASSIGN   7983<<ASSIGN   7984>>ASSIGN
      7993>>ASSIGN   8389<<ASSIGN
F.MOD_TIME
      7038**DCL      8002<>CALL     8003<<ASSIGN   8003>>ASSIGN
PL6.E3A0      #001=FREOPEN File=xb_io_open_close:6.:XBC3TSI                      FRI 01/06/95 11:29 Page:24   
F.RECORD_POSITION
      7024**DCL      7901<<ASSIGN   7932<<ASSIGN   7984<<ASSIGN   7993<<ASSIGN
F.STATE
      7032**DCL      7919<<ASSIGN   7923<<ASSIGN   7955<<ASSIGN   7957<<ASSIGN   7978<<ASSIGN   7980<<ASSIGN
      8394<<ASSIGN
F$
      7116**DCL      7005--IMP-PTR  7687<<ASSIGN   7693>>IF       7695>>IF       7696>>CALL     7710>>ASSIGN
      7711>>CALL     7715>>CALL     7719>>ASSIGN   7720>>CALL     7721>>ASSIGN   7722>>ASSIGN   7737<>CALL
      7740>>ASSIGN   7742>>ASSIGN   7742>>ASSIGN   7743>>ASSIGN   7744>>ASSIGN   7747>>ASSIGN   7765<<ASSIGN
      7770>>IF       7771<>CALL     7773>>CALL     7777>>ASSIGN   7806>>ASSIGN   7806>>ASSIGN   7813>>ASSIGN
      7814>>ASSIGN   7828>>ASSIGN   7832>>ASSIGN   7840>>IF       7841>>ASSIGN   7845>>ASSIGN   7882>>ASSIGN
      7882>>ASSIGN   7885>>IF       7898>>ASSIGN   7899>>ASSIGN   7900>>ASSIGN   7901>>ASSIGN   7902>>ASSIGN
      7903>>ASSIGN   7906>>ASSIGN   7910>>ASSIGN   7910>>ASSIGN   7911>>ASSIGN   7911>>ASSIGN   7914>>ASSIGN
      7917>>ASSIGN   7919>>ASSIGN   7922>>CALL     7923>>ASSIGN   7924>>ASSIGN   7926>>IF       7926>>IF
      7927>>ASSIGN   7929>>ASSIGN   7930>>ASSIGN   7931>>ASSIGN   7932>>ASSIGN   7933>>ASSIGN   7934>>ASSIGN
      7945>>IF       7947>>CALL     7954>>ASSIGN   7955>>ASSIGN   7957>>ASSIGN   7958>>ASSIGN   7960>>ASSIGN
      7961>>ASSIGN   7962>>ASSIGN   7963>>ASSIGN   7976>>ASSIGN   7977>>ASSIGN   7978>>ASSIGN   7980>>ASSIGN
      7981>>IF       7982>>ASSIGN   7983>>ASSIGN   7984>>ASSIGN   7984>>ASSIGN   7985>>ASSIGN   7993>>ASSIGN
      7993>>ASSIGN   7994>>ASSIGN   7994>>ASSIGN   7995>>ASSIGN   7995>>ASSIGN   8002>>CALL     8003>>ASSIGN
      8003>>ASSIGN   8004>>CALL     8005>>ASSIGN   8005>>ASSIGN   8010>>IF       8011>>ASSIGN   8011>>ASSIGN
      8012>>ASSIGN   8013>>ASSIGN   8013>>ASSIGN   8018>>IF       8019>>ASSIGN   8020>>ASSIGN   8022>>ASSIGN
      8023>>ASSIGN   8026>>ASSIGN   8027>>ASSIGN   8028>>CALL     8029<>CALL     8033>>CALL     8036>>IF
      8037>>CALL     8378>>ASSIGN   8382>>ASSIGN   8383>>ASSIGN   8388>>IF       8389>>ASSIGN   8389>>ASSIGN
      8391>>IF       8391>>IF       8392>>ASSIGN   8393>>ASSIGN   8394>>ASSIGN
F$DCB.ACTPOS
      7620**DCL      7620--REDEF
F$DCB.ARS#
      7594**DCL      7594--REDEF    7927>>ASSIGN   7982>>ASSIGN
F$DCB.ASN#
      7609**DCL      7848>>ASSIGN   8018>>IF
F$DCB.ATTR
      7613**DCL      7614--REDEF
F$DCB.BORROW
      7628**DCL      7628--REDEF    7628--REDEF    7628--REDEF
F$DCB.DCBNAME.L
      7642**DCL      7642--IMP-SIZ
PL6.E3A0      #001=FREOPEN File=xb_io_open_close:6.:XBC3TSI                      FRI 01/06/95 11:29 Page:25   
F$DCB.EOMCHAR#
      7598**DCL      7598--REDEF
F$DCB.EXIST#
      7608**DCL      7941>>ASSIGN
F$DCB.FLDID
      7623**DCL      7623--REDEF
F$DCB.FORM$
      7617**DCL      7617--REDEF
F$DCB.FSECT
      7633**DCL      7633--REDEF
F$DCB.FSN#
      7610**DCL      7610--REDEF    7610--REDEF    7611--REDEF
F$DCB.HEADER$
      7616**DCL      7616--REDEF
F$DCB.IXTNSIZE#
      7614**DCL      7614--REDEF
F$DCB.LASTSTA$
      7603**DCL      7603--REDEF
F$DCB.LVL
      7629**DCL      7629--REDEF
F$DCB.NAME#.C
      7604**DCL      7604--REDEF
F$DCB.NOEOF
      7626**DCL      7626--REDEF
F$DCB.NRECS#
      7615**DCL      7615--REDEF    7908>>IF       7914>>ASSIGN   7924>>ASSIGN   7981>>IF       7983>>ASSIGN
      7991>>IF       8391>>IF
F$DCB.NRECX
      7634**DCL      7634--REDEF
F$DCB.OHDR
      7626**DCL      7626--REDEF
F$DCB.ORG#
      7609**DCL      7609--REDEF    7908>>IF       7991>>IF       8010>>IF
F$DCB.PRECNO
      7632**DCL      7632--REDEF
F$DCB.RCSZ
PL6.E3A0      #001=FREOPEN File=xb_io_open_close:6.:XBC3TSI                      FRI 01/06/95 11:29 Page:26   
      7638**DCL      7638--REDEF
F$DCB.RES#
      7605**DCL      7605--REDEF
F$DCB.SETX
      7617**DCL      7617--REDEF
F$DCB.TAB$
      7617**DCL      7617--REDEF
F$DCB.TDA
      7631**DCL      7632--REDEF
F$DCB.TYPE#
      7605**DCL      7975>>IF
F$DCB.WSN#
      7605**DCL      7605--REDEF
FEND IN PROCEDURE SCAN_OPTIONS
      8251**DCL      8261<<CALLBLT  8263>>ASSIGN   8264>>ASSIGN   8266<<CALLBLT  8267>>ASSIGN   8268<<CALLBLT
      8269>>ASSIGN   8271>>ASSIGN
FILDES$
      7130**DCL      7710<<ASSIGN   7882<<ASSIGN
FILENAME
      6885**DCL         6--PROC     7705<>CALL     7706>>IF       7706>>IF       7753--ENTRY    7768<>CALL
      7781>>IF       7781>>IF       7785>>ASSIGN   7794>>IF       7794>>IF       7798>>ASSIGN   7862--ASSIGN
FILENAME_SIZE
      7000**DCL      6885--IMP-SIZ  7705>>CALL     7705<>CALL     7706>>IF       7706>>IF       7706>>IF
      7768>>CALL     7768<>CALL     7781>>IF       7781>>IF       7781>>IF       7784>>ASSIGN   7785>>ASSIGN
      7794>>IF       7794>>IF       7794>>IF       7798>>ASSIGN   7859>>IF       7862>>ASSIGN
FIT$
      7670**DCL      7651--IMP-PTR  7999<<ASSIGN   8000<>CALL     8002>>CALL     8004>>CALL
FPARAM
      7646**DCL      7895--ASSIGN   7999--ASSIGN
FPT@FID
      7166**DCL      7850<<ASSIGN   7865<>CALL
FPT@FID.ACCT_
      7167**DCL      7853<<ASSIGN
FPT@FID.ASN_
      7169**DCL      7855<<ASSIGN
FPT@FID.NAME_
PL6.E3A0      #001=FREOPEN File=xb_io_open_close:6.:XBC3TSI                      FRI 01/06/95 11:29 Page:27   
      7167**DCL      7852<<ASSIGN
FPT@FID.PASS_
      7167**DCL      7854<<ASSIGN
FPT@FID.RESULTS_
      7169**DCL      7863<<ASSIGN
FPT@FID.RES_
      7169**DCL      7856<<ASSIGN
FPT@FID.SN_
      7168**DCL      7857<<ASSIGN
FPT@FID.TEXTFID_
      7166**DCL      7860<<ASSIGN   7862<<ASSIGN
FPT@FID.V
      7170**DCL      7851--ASSIGN
FPT@FID.V_
      7166**DCL      7851<<ASSIGN
FPT@FID.WSN_
      7168**DCL      7858<<ASSIGN
FPT_FID
      7143**DCL      7850>>ASSIGN
FPT_FID.V
      7147**DCL      7143--DCLINIT
FSTRT IN PROCEDURE SCAN_OPTIONS
      8250**DCL      8263<<ASSIGN   8271>>ASSIGN   8274>>ASSIGN
FVAL IN PROCEDURE SCAN_OPTIONS
      8254**DCL      8261<<CALLBLT  8265>>DOWHILE  8266<<CALLBLT  8268<<CALLBLT
GETDCB
      7205**DCL      7738<<ASSIGN   7741<>CALL     7775<<ASSIGN   7804<>CALL
GETDCB.DCBNAME_
      7205**DCL      7786<<ASSIGN   7799<<ASSIGN
GETDCB.DCBNUM_
      7205**DCL      7740<<ASSIGN   7777<<ASSIGN
GETDCB.V
      7206**DCL      7739--ASSIGN   7776--ASSIGN
GETDCB.V.MERGE#
      7206**DCL      7787<<ASSIGN   7800<<ASSIGN
GETDCB.V_
PL6.E3A0      #001=FREOPEN File=xb_io_open_close:6.:XBC3TSI                      FRI 01/06/95 11:29 Page:28   
      7205**DCL      7739<<ASSIGN   7776<<ASSIGN
GETDCB_CONST
      7190**DCL      7738>>ASSIGN   7775>>ASSIGN
GETDCB_CONST.V
      7191**DCL      7190--DCLINIT
GET_LAST_KEY
      8300**PROC     7909--CALL     7992--CALL
LAST_REC IN PROCEDURE GET_LAST_KEY
      8363**DCL      8380<<ASSIGN   8386<>CALL
LAST_REC.KEY_ IN PROCEDURE GET_LAST_KEY
      8363**DCL      8383<<ASSIGN
LAST_REC.V IN PROCEDURE GET_LAST_KEY
      8365**DCL      8381--ASSIGN
LAST_REC.V.DCB# IN PROCEDURE GET_LAST_KEY
      8365**DCL      8382<<ASSIGN
LAST_REC.V.KEYR# IN PROCEDURE GET_LAST_KEY
      8366**DCL      8384<<ASSIGN
LAST_REC.V.N# IN PROCEDURE GET_LAST_KEY
      8369**DCL      8385<<ASSIGN
LAST_REC.V_ IN PROCEDURE GET_LAST_KEY
      8363**DCL      8381<<ASSIGN
LAST_REC_CONST IN PROCEDURE GET_LAST_KEY
      8342**DCL      8380>>ASSIGN
LAST_REC_CONST.V IN PROCEDURE GET_LAST_KEY
      8344**DCL      8342--DCLINIT
LOC IN PROCEDURE SCAN_OPTIONS
      8248**DCL      8258<<CALLBLT  8260>>DOWHILE  8261>>CALLBLT  8264<<ASSIGN   8266>>CALLBLT  8267<<ASSIGN
      8268>>CALLBLT  8269<<ASSIGN   8294>>IF
M$FID
      5566**DCL-ENT  7865--CALL
M$GETDCB
      5509**DCL-ENT  7741--CALL     7804--CALL
M$OPEN
      5503**DCL-ENT  7907--CALL     7951--CALL     7973--CALL
M$PFIL
      5505**DCL-ENT  8379--CALL     8387--CALL
PL6.E3A0      #001=FREOPEN File=xb_io_open_close:6.:XBC3TSI                      FRI 01/06/95 11:29 Page:29   
M$PRECORD
      5507**DCL-ENT  8386--CALL
M$REW
      5506**DCL-ENT  7918--CALL
MODE
      6886**DCL         6--PROC     7753--ENTRY    7810<>CALL     7815>>ASSIGN   7826>>DOSELCT  7829>>IF
      7832>>IF       7875>>CALLBLT  8258>>CALLBLT  8261>>CALLBLT  8266>>CALLBLT  8268>>CALLBLT  8274>>ASSIGN
MODE_POS
      7002**DCL      7875<<CALLBLT
MODE_SIZE
      7001**DCL      6886--IMP-SIZ  7810>>CALL     7810<>CALL     7815>>ASSIGN   7826>>DOSELCT  7829>>IF
      7832>>IF       7875>>CALLBLT  8258>>CALLBLT  8260>>DOWHILE  8261>>CALLBLT  8266>>CALLBLT  8268>>CALLBLT
      8274>>ASSIGN   8294>>IF
MONITOR_ERROR
      8033**LABEL    7741--CALLALT  7804--CALLALT  7865--CALLALT  7907--CALLALT  7909--CALLALT  7918--CALLALT
      7951--CALLALT  7973--CALLALT  7992--CALLALT
OPEN
      7384**DCL      7745<<ASSIGN   7843<<ASSIGN   7907<>CALL     7922<>CALL     7947<>CALL     7951<>CALL
      7973<>CALL
OPEN.ACCT_
      7388**DCL      7867<<ASSIGN
OPEN.ACSVEH_
      7386**DCL      7387--REDEF
OPEN.ALTKEYS_
      7392**DCL      7393--REDEF    7393--REDEF
OPEN.FPARAM_
      7389**DCL      7895<<ASSIGN
OPEN.HDR_
      7391**DCL      7392--REDEF
OPEN.NAME_
      7385**DCL      7868<<ASSIGN
OPEN.PASS_
      7386**DCL      7869<<ASSIGN
OPEN.SN_
      7384**DCL      7870<<ASSIGN
OPEN.TAB_
PL6.E3A0      #001=FREOPEN File=xb_io_open_close:6.:XBC3TSI                      FRI 01/06/95 11:29 Page:30   
      7390**DCL      7391--REDEF
OPEN.UHL_
      7384**DCL      7385--REDEF    7385--REDEF
OPEN.V
      7393**DCL      7746--ASSIGN   7844--ASSIGN
OPEN.V.ACS#
      7404**DCL      7888<<ASSIGN   7891<<ASSIGN   7969<<ASSIGN
OPEN.V.ASN#
      7403**DCL      7748<<ASSIGN   7848<<ASSIGN   7855--ASSIGN   7884>>IF
OPEN.V.COMP#
      7405**DCL      8286<<ASSIGN
OPEN.V.CTG#
      7397**DCL      8285<<ASSIGN
OPEN.V.DCB#
      7393**DCL      7747<<ASSIGN   7845<<ASSIGN
OPEN.V.DENSITY#
      7425**DCL      8284<<ASSIGN
OPEN.V.DISP#
      7409**DCL      7749<<ASSIGN   8283<<ASSIGN
OPEN.V.EXIST#
      7397**DCL      7941<<ASSIGN   7943<<ASSIGN   7965<<ASSIGN   8280<<ASSIGN
OPEN.V.FSN#
      7424**DCL      7424--REDEF    7424--REDEF
OPEN.V.FUN#
      7403**DCL      7905<<ASSIGN   7921<<ASSIGN   7935<<ASSIGN   7964<<ASSIGN
OPEN.V.LOAD#
      7407**DCL      8287<<ASSIGN
OPEN.V.ORG#
      7404**DCL      7887<<ASSIGN   7890<<ASSIGN   7968<<ASSIGN   8288<<ASSIGN
OPEN.V.RES#
      7408**DCL      7856--ASSIGN
OPEN.V.SHARE#
      7398**DCL      8282<<ASSIGN
OPEN.V.TYPE#
      7405**DCL      7946<<ASSIGN   7950<<ASSIGN   7967<<ASSIGN   7972<<ASSIGN
OPEN.V_
PL6.E3A0      #001=FREOPEN File=xb_io_open_close:6.:XBC3TSI                      FRI 01/06/95 11:29 Page:31   
      7384**DCL      7746<<ASSIGN   7844<<ASSIGN
OPEN.WSN_
      7390**DCL      7390--REDEF    7871<<ASSIGN
OPEN_CONST
      7275**DCL      7745>>ASSIGN   7843>>ASSIGN
OPEN_CONST.ACSVEH_
      7277**DCL      7278--REDEF
OPEN_CONST.ALTKEYS_
      7283**DCL      7284--REDEF    7284--REDEF
OPEN_CONST.HDR_
      7282**DCL      7283--REDEF
OPEN_CONST.TAB_
      7281**DCL      7282--REDEF
OPEN_CONST.UHL_
      7275**DCL      7276--REDEF    7276--REDEF
OPEN_CONST.V
      7284**DCL      7275--DCLINIT
OPEN_CONST.V.FSN#
      7315**DCL      7315--REDEF    7315--REDEF
OPEN_CONST.WSN_
      7281**DCL      7281--REDEF
OPEN_MODE
      7125**DCL      7735<<ASSIGN   7815<<ASSIGN   7816>>DOSELCT  7840>>IF       7840>>IF       7896>>DOSELCT
OPTI IN PROCEDURE SCAN_OPTIONS
      8256**DCL      8275<<CALLBLT  8277<<ASSIGN   8277>>ASSIGN   8278>>DOCASE   8280>>ASSIGN   8281>>ASSIGN
      8282>>ASSIGN   8283>>ASSIGN   8284>>ASSIGN   8285>>ASSIGN   8286>>ASSIGN   8287>>ASSIGN   8288>>ASSIGN
OPTIONS.LOC IN PROCEDURE SCAN_OPTIONS
      8240**DCL      8278>>DOCASE
OPTIONS.VALUE IN PROCEDURE SCAN_OPTIONS
      8241**DCL      8280>>ASSIGN   8281>>ASSIGN   8282>>ASSIGN   8283>>ASSIGN   8284>>ASSIGN   8285>>ASSIGN
      8286>>ASSIGN   8287>>ASSIGN   8288>>ASSIGN
OPTION_S IN PROCEDURE SCAN_OPTIONS
      8243**DCL      8275>>CALLBLT
OPTION_X IN PROCEDURE SCAN_OPTIONS
      8095**DCL      8238--REDEF    8243--REDEF
OPTNAME IN PROCEDURE SCAN_OPTIONS
PL6.E3A0      #001=FREOPEN File=xb_io_open_close:6.:XBC3TSI                      FRI 01/06/95 11:29 Page:32   
      8255**DCL      8274<<ASSIGN   8275>>CALLBLT
PASSED_FILE_HEADER
      6888**DCL         6--PROC     7687--ASSIGN
PASSED_FILE_HEADER.FPT_READ.V.DVBYTE.REREAD#
      6950**DCL      6951--REDEF
PASSED_FILE_HEADER.FPT_READ.V.INDX#
      6943**DCL      6944--REDEF
PASSED_FILE_HEADER.FPT_WRITE.V.DVBYTE.VFC#
      6988**DCL      6989--REDEF
POS_EOF IN PROCEDURE GET_LAST_KEY
      8327**DCL      8376<<ASSIGN   8379<>CALL     8387<>CALL
POS_EOF.V IN PROCEDURE GET_LAST_KEY
      8327**DCL      8377--ASSIGN
POS_EOF.V.DCB# IN PROCEDURE GET_LAST_KEY
      8327**DCL      8378<<ASSIGN
POS_EOF.V_ IN PROCEDURE GET_LAST_KEY
      8327**DCL      8377<<ASSIGN
POS_EOF_CONST IN PROCEDURE GET_LAST_KEY
      8312**DCL      8376>>ASSIGN
POS_EOF_CONST.V IN PROCEDURE GET_LAST_KEY
      8312**DCL      8312--DCLINIT
REWIND
      7455**DCL      7915<<ASSIGN   7918<>CALL
REWIND.V
      7455**DCL      7916--ASSIGN
REWIND.V.DCB#
      7455**DCL      7917<<ASSIGN
REWIND.V_
      7455**DCL      7916<<ASSIGN
REWIND_CONST
      7440**DCL      7915>>ASSIGN
REWIND_CONST.V
      7440**DCL      7440--DCLINIT
SCAN_OPTIONS
      8073**PROC     7876--CALL
SPECIFIC_DCB
PL6.E3A0      #001=FREOPEN File=xb_io_open_close:6.:XBC3TSI                      FRI 01/06/95 11:29 Page:33   
      7120**DCL      7685<<ASSIGN   7733<<ASSIGN   7763<<ASSIGN   7788<<ASSIGN   7790<<ASSIGN   7847>>IF
      7886>>IF       7940>>IF
SPECIFIC_ORG
      7122**DCL      7874<<ASSIGN   7886>>IF       8289<<ASSIGN
SZ IN PROCEDURE SCAN_OPTIONS
      8252**DCL      8271<<ASSIGN   8272>>IF       8272>>IF       8274>>ASSIGN
TEXT_TYPE
      7124**DCL      7946>>ASSIGN   7972>>ASSIGN
TREAT_AS_FOPEN
      7768**LABEL    7693--GOTO     7697--GOTO     7712--GOTO
UPDATE_MODE
      7117**DCL      7736<<ASSIGN   7812<<ASSIGN   7829<<ASSIGN   7831<<ASSIGN   7840>>IF       7904>>IF
      7945>>IF       7953>>IF       7966>>IF       7974>>IF
VLP@ACCT
      7525**DCL      7853--ASSIGN   7867--ASSIGN
VLP@NAME
      7512**DCL      7852--ASSIGN   7868--ASSIGN
VLP@PASS
      7538**DCL      7854--ASSIGN   7869--ASSIGN
VLP@SN
      7564**DCL      7857--ASSIGN   7870--ASSIGN
VLP@WSN
      7551**DCL      7858--ASSIGN   7871--ASSIGN
VLR@FID
      7578**DCL      7863--ASSIGN   7864<<ASSIGN
XB$ERR$BAD_OPEN_MODE
      6412**DCL      7823<>CALL
XBI$CLOSE_FILE
      7672**DCL-ENT  7715--CALL
XBI$EXECUTE_OPEN
      7676**DCL-ENT  7922--CALL     7947--CALL
XBI$FCLOSE
      7678**DCL-ENT  7711--CALL     8037--CALL
XBI$GET_FILE_HEADER
      7673**DCL-ENT  7737--CALL     7771--CALL
XBI$INIT_FILE_HEADER
PL6.E3A0      #001=FREOPEN File=xb_io_open_close:6.:XBC3TSI                      FRI 01/06/95 11:29 Page:34   
      7679**DCL-ENT  7696--CALL     7720--CALL     7773--CALL
XBI$LINK_FILE_HEADER
      7680**DCL-ENT  8028--CALL
XBI$STRLEN
      7682**DCL-ENT  7705--CALL     7768--CALL     7810--CALL
XBI_SET_ERRNO
      7675**DCL-ENT  7823--CALL
XBI_SET_STREAM_ERRNO
      7674**DCL-ENT  8033--CALL
XB_RETURN_ORDINAL_RESULT
      7677**DCL-ENT  8029--CALL     8038--CALL
XSF$LOCCODT
      7681**DCL-ENT  8000--CALL
XUD$UTS_DIFF_SEC
      6848**DCL-ENT  8002--CALL     8004--CALL

PL6.E3A0      #002=FCLOSE File=xb_io_open_close:6.:XBC3TSI                       FRI 01/06/95 11:29 Page:35   
      654        1        /*T***********************************************************/
      655        2        /*T*                                                         */
      656        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
      657        4        /*T*                                                         */
      658        5        /*T***********************************************************/
      659        6
      660        7        fclose: PROC (F);
      661        8           /*D*  NAME: fclose
      662        9                 PROTOTYPE: int fclose (FILE *stream);
      663       10                 DESCRIPTION: Closes the specified stream.  If successful, zero is
      664       11                    returned, otherwise a nonzero value is returned.
      665       12           */
      666       13
      667       14           %INCLUDE xb_stdio_i6;
      668      257           %INCLUDE xb_errors_i6;
      669      328
      670      329           %File_Header (Name=F, Stclass=" ");
      671      441
      672      442    1      dcl B$FILDES$                       ptr symref; /* fildes for unix i/o  */
      673      443    1      dcl FILDES$(0:0)                    ptr based(B$FILDES$);
      674      444
      675      445    1      DCL XBI$FCLOSE                      ENTRY (1) ALTRET;
      676      446    1      DCL XB_RETURN_ORDINAL_RESULT        ENTRY (1);
      677      447    1      DCL XB_IO_ERROR            ENTRY;
      678      448    1      DCL XBI_SET_STREAM_ERRNO   ENTRY(2);
      679      449
      680      450    1      IF ADDR(F) = ADDR(NIL) THEN
      681      451    1         CALL XB_RETURN_ORDINAL_RESULT (0);
      682      452
      683      453    2      IF (F.auxio$ ~= ADDR(NIL)) THEN DO;
      684      454    2         CALL XBI_SET_STREAM_ERRNO (F, ERR$AUXIO_FILE_POINTER);
      685      455    2         CALL XB_IO_ERROR;
      686      456    2      END;
      687      457
      688      458    1      if (B$FILDES$ ~= addr(nil)) then
      689      459    1         FILDES$( F.FPT_READ.V.DCB# ) = addr(nil);
      690      460
PL6.E3A0      #002=FCLOSE File=xb_io_open_close:6.:XBC3TSI                       FRI 01/06/95 11:29 Page:36   
      691      461    1      CALL XBI$FCLOSE (F)
      692      462    2         WHENRETURN DO;
      693      463    2            CALL XB_RETURN_ORDINAL_RESULT (0);
      694      464    2         END;
      695      465    2         WHENALTRETURN DO;
      696      466    2            CALL XB_RETURN_ORDINAL_RESULT (1);
      697      467    2         END;
      698      468    1   END fclose;

PL6.E3A0      #002=FCLOSE File=xb_io_open_close:6.:XBC3TSI                       FRI 01/06/95 11:29 Page:37   
--  Include file information  --

   xb_errors_i6.:XBC3TOU  cannot be made into a system file and is referenced.
   xb_stdio_i6.:XBC3TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure FCLOSE.

   Procedure FCLOSE requires 45 words for executable code.
   Procedure FCLOSE requires 6 words of local(AUTO) storage.

    No errors detected in file xb_io_open_close:6.:XBC3TSI    .

PL6.E3A0      #002=FCLOSE File=xb_io_open_close:6.:XBC3TSI                       FRI 01/06/95 11:29 Page:38   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=FCLOSE File=xb_io_open_close:6.:XBC3TSI                       FRI 01/06/95 11:29 Page:39   
          MINI XREF LISTING

B$FILDES$
       442**DCL       443--IMP-PTR   458>>IF        459>>ASSIGN
F
       330**DCL         7--PROC      450--IF        454<>CALL      461<>CALL
F.AUXIO$
       362**DCL       453>>IF
F.FPT_READ.V.DCB#
       375**DCL       459>>ASSIGN
F.FPT_READ.V.DVBYTE.REREAD#
       392**DCL       393--REDEF
F.FPT_READ.V.INDX#
       385**DCL       386--REDEF
F.FPT_WRITE.V.DVBYTE.VFC#
       430**DCL       431--REDEF
FILDES$
       443**DCL       459<<ASSIGN
XB$ERR$AUXIO_FILE_POINTER
       324**DCL       454<>CALL
XBI$FCLOSE
       445**DCL-ENT   461--CALL
XBI_SET_STREAM_ERRNO
       448**DCL-ENT   454--CALL
XB_IO_ERROR
       447**DCL-ENT   455--CALL
XB_RETURN_ORDINAL_RESULT
       446**DCL-ENT   451--CALL      463--CALL      466--CALL
