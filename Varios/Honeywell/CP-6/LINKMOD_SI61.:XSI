/*M* CP6-LINKMOD_SI61 - Source # 1.                               */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* AND  */
/***
***/
/******************************************************************/
/*M*     LINKMOD   Jan. 1,1980         GWJ                        */
/***/
/*P*     NAME: CP6EXT
         PURPOSE: Mainline of LINKMOD. This procedure gets the
                   command, defines the command and intiates the
                   proper routines to produce the users request.
                                                                  */
 
LINKMOD : PROC MAIN;
 
/******************************************************************/
/***               SYMDEFS OF GLOBAL DATA                       ***/
/******************************************************************/
 
%INCLUDE CP_6;
%INCLUDE CP_6_SUBS;
%F$DCB(DCBN=F$DCB);
 
%INCLUDE B$JIT;
DCL B$JIT$ PTR SYMREF;
 
/*******/                               /* I/O UNITS                          */
DCL M$LO           DCB;                 /* OUTPUT OF FILES CHANGED            */
DCL M$DO           DCB;                 /* ERROR REPORTING DCB                */
DCL M$SI           DCB;                 /* SIUNIT - GET THE COMMANDS          */
DCL F$SL           DCB;                 /* OUTPUT FOR SL.X FILE               */
DCL F$LINKSI       DCB;                 /* ACCOUNT WHERE LINK JOBS ARE        */
DCL F$LINKOU       DCB;                 /* ACCOUNT WHERE NEW LINK JOBS GO     */
DCL F$LIST         DCB;                 /* LIST FILE INPUT                    */
 
DCL LOUNIT UBIN CONSTANT SYMDEF INIT(DCBNUM(M$LO));
DCL SIUNIT UBIN CONSTANT SYMDEF INIT(DCBNUM(M$SI));
DCL DOUNIT UBIN CONSTANT SYMDEF INIT(DCBNUM(M$DO));
DCL SLUNIT UBIN CONSTANT SYMDEF INIT(DCBNUM(F$SL));
DCL LIUNIT UBIN CONSTANT SYMDEF INIT(DCBNUM(F$LINKSI));
DCL LUUNIT UBIN CONSTANT SYMDEF INIT(DCBNUM(F$LINKOU));
DCL LSUNIT UBIN CONSTANT SYMDEF INIT(DCBNUM(F$LIST));
 
 
DCL INUNIT UBIN STATIC SYMDEF;
 
/*******/                               /* INPUT RECORD DATA                  */
DCL 1 TOKEN STATIC SYMDEF ALIGNED,      /* TOKEN IS THE CURRENT TOKEN         */
      2 CHR CHAR(35) UNAL,              /* ACTUAL CHARACTER STRING            */
      2 LEN UBIN BYTE UNAL,             /* LENGHT OF STRING                   */
      2 VAL SBIN BYTE UNAL,             /* -1 IF UNDEFINED, n IF IN CMD_TBL   */
      2 ID  UBIN BYTE UNAL;             /* 0 = SPLCHR, 1 = NAME, 2 = DIGIT    */
 
DCL RECORD(0:139) CHAR(1) STATIC SYMDEF;
DCL RECNBR UBIN STATIC SYMDEF;
DCL RECPOS SBIN STATIC SYMDEF;
DCL RECLEN SBIN STATIC SYMDEF;
DCL 1 RECKEY ALIGNED STATIC SYMDEF,
      2 DEC CHAR(5) UNAL,
      2 PT  CHAR(1) INIT('.') UNAL,
      2 FRC CHAR(3) UNAL;
DCL RECCHR CHAR(1) STATIC SYMDEF;
DCL TCHAR CHAR(TOKEN.LEN) BASED UNAL;
 
DCL SPL(0:5) BIT(1) STATIC SYMDEF;     /* 0 = '-'
                                          1 = '_'
                                          2 = ':'
                                          3 = '.'
                                          4 = '#'
                                          5 = '@' */
 
/*******/                               /* FLAGS                              */
DCL TRUE     BIT(1) CONSTANT SYMDEF INIT('1'B);
DCL FALSE    BIT(1) CONSTANT SYMDEF INIT('0'B);
 
DCL BRKFLG   BIT(1) STATIC SYMDEF INIT('0'B);
DCL OLDFIL   BIT(1) STATIC SYMDEF INIT('0'B);
DCL LSTFIL   BIT(1) STATIC SYMDEF INIT('0'B);
DCL EORFLG   BIT(1) STATIC SYMDEF INIT('0'B);
DCL EOFFLG   BIT(1) STATIC SYMDEF INIT('0'B);
DCL SRTFLG   BIT(1) STATIC SYMDEF INIT('0'B);
DCL OK       BIT(1) STATIC SYMDEF INIT('0'B);
 
/*******/                               /* POINTERS AND BASED STRUCTURES      */
DCL C1 CHAR(1) BASED UNAL;
DCL C2 CHAR(2) BASED UNAL;
DCL C3 CHAR(3) BASED UNAL;
DCL C4 CHAR(4) BASED UNAL;
DCL C5 CHAR(5) BASED UNAL;
DCL C7 CHAR(7) BASED UNAL;
 
DCL U1 UBIN BYTE BASED UNAL;
 
DCL W1 UBIN WORD BASED ALIGNED;
 
/*******/                               /* FILE INFO                          */
DCL FNAME CHAR(31) STATIC SYMDEF;
DCL FACCT CHAR(8)  STATIC SYMDEF;
DCL FNLN  UBIN     STATIC SYMDEF;
 
DCL 1 FNAMEC STATIC ALIGNED,
      2 L UBIN BYTE UNAL,
      2 C CHAR(31) UNAL;
 
DCL UACCT CHAR(8) STATIC SYMDEF INIT('        ');
DCL LNAME  CHAR(31) STATIC SYMDEF INIT('zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz');
 
DCL CHAR_LEN UBIN;
DCL CCHAR CHAR(CHAR_LEN) BASED;
DCL PTR1$ PTR;
DCL PTR2$ PTR;
 
DCL BUFFER CHAR(4096) STATIC SYMDEF;
DCL OUT_BUFFER CHAR(140) STATIC SYMDEF;
 
%LIST;
 
%INCLUDE LINKMOD_C2;
 
%PLIST;
 
/*******/                               /* COMMANDS                           */
%EQU GO = 0;                            /* GO - Start execution               */
%EQU IA = 1;                            /* IACCT - set the input account      */
%EQU OA = 2;                            /* OAcct - set the output account     */
%EQU UA = 3;                            /* UAcct - set the default update acct*/
%EQU LI = 4;                            /* LIst - set the list file           */
%EQU SL = 5;                            /* SL - set the SL.X file output      */
%EQU XE = 6;                            /* XEq - go get commands from a file  */
%EQU OV = 10;                           /* OVer                               */
%EQU ON = 11;                           /* ON                                 */
%EQU IN = 12;                           /* INto                               */
%EQU CO = 13;                           /* COpy                               */
 
DCL CMD_MAX UBIN CONSTANT SYMDEF INIT(6);
DCL CMD_TBL(0:13) CHAR(5) CONSTANT SYMDEF INIT('GO   ', /* 0 COMMANDS         */
                                'IACCT',/* 1                                  */
                                'OACCT',/* 2                                  */
                                'UACCT',/* 3                                  */
                                'LIST ',/* 4                                  */
                                'SL   ',/* 5                                  */
                                'XEQ  ',/* 6                                  */
                                'LINK ',/* 7                                  */
                                'PCL  ',/* 8                                  */
                                'LEMUR',/* 9                                  */
                                'OVER ',/* 10                                 */
                                'ON   ',/* 11                                 */
                                'INTO ',/* 12                                 */
                               'COPY ');/* 13                                 */
 
DCL INITIAL ENTRY;
DCL NXTTKN ENTRY;
DCL TELLER ENTRY(1);
DCL MODLINK ENTRY;
DCL GETFID  ENTRY;
 
DCL NUM UBIN STATIC SYMDEF;
DCL I SBIN; DCL J SBIN; DCL K SBIN; DCL L SBIN;
 
%FPT_OPEN(FPTN=OPEN_SET,SETDCB=YES,NAME=FNAMEC,ACCT=FACCT,ASN=FILE);
%FPT_CLOSE(FPTN=CLOSE,DISP=SAVE);
 
/**************** START **************************************/
/* INITIALIZE FLAGS, DCBS, AND DATA */
        CALL INITIAL;
GET_CMD:
        RECPOS = RECLEN + 1;
        INUNIT = SIUNIT;
        BRKFLG = FALSE;
        SPL = '70'O;
        CALL NXTTKN;
        IF EOFFLG OR TOKEN.VAL = %GO
        THEN DO; /* EOF OR 'GO' FOUND *//* STOP                               */
           IF UACCT = ' ' THEN UACCT = B$JIT$->B$JIT.FACCN;
           IF DCBADDR(SLUNIT)->F$DCB.ASN#=%FILE# THEN DO;
              OPEN_SET.V.DCB# = SLUNIT;
              OPEN_SET.ACCT_ = OPEN_SET.SN_;
              OPEN_SET.NAME_ = OPEN_SET.SN_;
              OPEN_SET.V.CTG# = %YES#;
              OPEN_SET.V.FUN# = %CREATE#;
              OPEN_SET.V.ORG# = %INDEXED#;
              OPEN_SET.V.KEYL# = 40;
              OPEN_SET.V.KEYX# = 6;
              CALL M$OPEN (OPEN_SET);
           END;
           CALL MODLINK;
           CALL TELLER(%N_FOUND);
           CALL M$EXIT;
        END;
        IF EORFLG THEN GOTO GET_CMD;
        IF TOKEN.ID ~= 1 THEN TOKEN.VAL = -1;
        LSTFIL = FALSE;
        OK = TRUE;
        DO CASE(TOKEN.VAL);
         CASE(%IA);                     /* IACCT                              */
           CALL GETFID;
           IF NOT OK THEN GOTO GET_CMD;
           CHAR_LEN = FNLN;
           FNAMEC.L = FNLN;
           CALL CONCAT(FNAMEC.C,ADDR(FNAME)->CCHAR);
           CALL CONCAT(LNAME,ADDR(FNAME)->CCHAR,
             'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz');
           OPEN_SET.V.DCB# = LIUNIT;
           CALL M$OPEN(OPEN_SET) ALTRET(NO_OPN);
         CASE(%OA);                     /* OACCT                              */
           CALL GETACCT ALTRET(GET_CMD);
           OPEN_SET.V.DCB# = LUUNIT;
           CALL M$OPEN(OPEN_SET) ALTRET(NO_OPN);
         CASE(%UA);                     /* UACCT                              */
           CALL GETACCT ALTRET(GET_CMD);
           UACCT = FACCT;
         CASE(%LI);                     /* LIST                               */
           CALL GETFID;
           IF NOT OK THEN GOTO GET_CMD;
           FNAMEC.C = FNAME;
           FNAMEC.L = FNLN;
           OPEN_SET.V.DCB# = LSUNIT;
           CALL M$OPEN(OPEN_SET) ALTRET(NO_OPN);
           SRTFLG = FALSE;
         CASE(%SL);                     /* SL                                 */
           CALL GETFID;
           IF NOT OK THEN GOTO GET_CMD;
           FNAMEC.C = FNAME;
           FNAMEC.L = FNLN;
           OPEN_SET.V.DCB# = SLUNIT;
           CALL M$OPEN(OPEN_SET) ALTRET(NO_OPN);
         CASE(%XE);                     /* XEQ                                */
           CALL GETFID;
           IF NOT OK THEN GOTO GET_CMD;
           FNAMEC.C = FNAME;
           FNAMEC.L = FNLN;
           OPEN_SET.V.DCB# = SIUNIT;
           CLOSE.V.DCB# = SIUNIT;
           CALL M$CLOSE(CLOSE);
           CALL M$OPEN(OPEN_SET) ALTRET(NO_OPN);
         CASE(ELSE);
           CALL TELLER(%NOT_CMD);
        END;                            /* END DO CASE(TOKEN.ID)              */
        GOTO GET_CMD;
NO_OPN:
        CALL TELLER(-1);
        GOTO GET_CMD;
%EJECT;
GETACCT: PROC ALTRET;
        CALL NXTTKN;
        IF TOKEN.CHR = '.' THEN DO; CALL NXTTKN; EORFLG = '0'B; END;
        FACCT = TOKEN.CHR;
        IF EORFLG THEN CALL TELLER(%EX_ACT_NAME);
        ELSE IF TOKEN.LEN > 8 THEN CALL TELLER(%ACT_TO_LONG);
           ELSE RETURN;
        ALTRETURN;
END GETACCT;
END LINKMOD;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/******************************************************************/
/*M*     INITIAL   July 31, 1979       GWJ                        */
/***/
/*P*     NAME: INITIAL
         PURPOSE: INITIAL initializes all DCBS and ASYNC routines
                   and sets the I/O prompt to the ME device.
                                                                  */
INITIAL : PROC;
 
%INCLUDE LINKMOD_C1;
 
%FPT_INT ( FPTN=BRK_CONTROL, UENTRY=BRKRTN  );
%FPT_XCON (FPTN=EXIT_CONTROL, UENTRY=EXTRTN );
 
DCL BRKRTN ENTRY ASYNC;
DCL EXTRTN ENTRY ASYNC;
 
DCL TELLER ENTRY(1);
 
%FPT_OPEN( FPTN=OPEN_SET,SETDCB=YES,ACS=DIRECT,SCRUB=YES,FUN=UPDATE,
           ASN=DEVICE,RES='ME');
%FPT_OPEN( FPTN=OPEN_MER,REASSIGN=YES,SETDCB=YES);
%FPT_PROMPT( FPTN=PROMP,PROMPT=PIMP.RPROMP,VFC=YES);
DCL 1 PIMP STATIC ALIGNED,
      2 RPROMP,
        3 C1 CHAR(2) INIT('@*') UNAL,
        3 C2 UBIN BYTE INIT(7) UNAL,
      2 * CHAR(1) INIT(' ') UNAL;
 
DCL M$DO     DCB;
DCL M$SI     DCB;
DCL M$LO     DCB;
DCL F$SL     DCB;
DCL F$LINKSI DCB;
DCL F$LINKOU DCB;
DCL F$LIST   DCB;
 
DCL DCB#(0:6) UBIN CONSTANT INIT(DCBNUM(M$DO),
                                 DCBNUM(M$SI),
                                 DCBNUM(M$LO),
                                 DCBNUM(F$SL),
                                 DCBNUM(F$LINKSI),
                                 DCBNUM(F$LINKOU),
                                 DCBNUM(F$LIST));
 
DCL LNAME CHAR(31) SYMREF;
/*******/
        CALL M$INT( BRK_CONTROL );
        CALL M$XCON(EXIT_CONTROL);
        CALL M$PROMPT(PROMP);
        DO I = 0 TO 6;
           OPEN_SET.V.DCB# = DCB#(I);
           OPEN_MER.V.DCB# = DCB#(I);
           CALL M$OPEN(OPEN_SET) ALTRET(NO_OPN);
           CALL M$OPEN(OPEN_MER) ALTRET(NO_OPN);
DO_NXT:    ;
        END;
        CALL TELLER(%HELLO);
        CHAR_LEN = DCBADDR(LIUNIT)->F$DCB.NAME#.L;
        ADDR(LNAME)->CCHAR = ADDR(DCBADDR(LIUNIT)->F$DCB.NAME#.C)->CCHAR;
        RETURN;
NO_OPN:
        CALL TELLER(-1);
        GOTO DO_NXT;
END INITIAL;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/******************************************************************/
/*M*     BRKRTN    July 31, 1979       GWJ                        */
/***/
/*P*     NAME: BRKRTN
         PURPOSE: Control comes here when the user hits the break
                   key.
                                                                  */
BRKRTN : PROC ASYNC;
 
DCL TELLER ENTRY(1);
 
%INCLUDE LINKMOD_C1;
 
/*******/
 
/***   BRKFLG IS SET TRUE ***/
 
        BRKFLG = '1'B;
        CALL TELLER(%BREAK);
        CALL M$TRTN;
        RETURN;
END BRKRTN;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/******************************************************************/
/*M*     EXTRTN    July 31, 1979       GWJ                        */
/***/
/*P*     NAME: EXTRTN
         PURPOSE: Control comes here when LINKMOD exits.
                                                                  */
EXTRTN : PROC ASYNC;
 
%INCLUDE LINKMOD_C1;
 
DCL TELLER ENTRY(1);
DCL ALL_DONE ENTRY;
 
%B$XCON;
%B$ECCB;
 
/*******/
        IF B$TCB$->B$TCB.STK$->B$XCON.RNST ~= '0'B
        THEN DO;
           CALL TELLER(%AB_NORM_EXIT);
        END;
        CALL ALL_DONE;
        CALL M$MERCS;
        RETURN;
END EXTRTN;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/******************************************************************/
/*M*     MODLINK   Jan. 1, 1980        GWJ                        */
/***/
/*P*     NAME: MODLINK
         PURPOSE: This routine will do the acutal modifications
                 of the JCL's given to LINK MOD
                                                                 */
 
MODLINK : PROC;
 
%INCLUDE LINKMOD_C1;
 
%FPT_OPEN(FPTN=NOPEN,THISF=YES,NXTF=YES,TEST=YES,FUN=IN);
%FPT_OPEN(FPTN=COPEN,FUN=CREATE,CTG=NO,ORG=CONSEC,NAME=NAMEF,ASN=FILE);
 
%FPT_CLOSE(FPTN=CLOSE);
 
%FPT_WRITE(FPTN=WRITE);
 
DCL RECORD(0:139) CHAR(1) SYMREF;
DCL REC REDEF RECORD CHAR(140);
 
DCL LNAME CHAR(31) SYMREF;
DCL FACCT CHAR(8) SYMREF;
DCL FNAME CHAR(31) SYMREF;
DCL FNLN  UBIN     SYMREF;
DCL RECPOS SBIN SYMREF;
DCL RECLEN SBIN SYMREF;
DCL NUM UBIN SYMREF;
DCL CMD_TBL(0:13) CHAR(5) SYMREF;
 
DCL TELLER ENTRY(1);
DCL SCRFIL ENTRY ALTRET;
DCL GETFID ENTRY;
DCL NXTTKN ENTRY;
 
%EQU LI = 7;                            /* LInk                               */
%EQU PC = 8;                            /* PCl                                */
%EQU LE = 9;                            /* LEmur                              */
%EQU OV = 10;                           /* OVer                               */
%EQU ON = 11;                           /* ON                                 */
%EQU IN = 12;                           /* INto                               */
%EQU CO = 13;                           /* COpy                               */
 
DCL CHANGED BIT(1);
DCL KEEP UBIN(9);
DCL INLNK BIT(1);
DCL INMOD BIT(1);
DCL NEW_LINE CHAR(140);
DCL TBUFFER CHAR(140);
DCL TRCPOS SBIN;
 
%VLP_NAME(FPTN=NAMEF,NAME='1234567890123456789012345678901');
 
/*** ** ** ** ***/
 
        NUM = 0;
        PTR1$ = DCBADDR(LIUNIT);
        PTR2$ = DCBADDR(LUUNIT);
        NOPEN.V.DCB# = LIUNIT;
        COPEN.V.DCB# = LUUNIT;
NXTFILE:
        CALL M$OPEN(NOPEN) ALTRET(NO_OPN);
        NOPEN.V.OPER.THISF# = %NO#;
        IF PTR1$->F$DCB.NAME#.C > LNAME THEN GOTO DONE_MOD;
        NAMEF.L# = PTR1$->F$DCB.NAME#.L;
        NAMEF.NAME# = PTR1$->F$DCB.NAME#.C;
        CALL M$OPEN(COPEN);
/* OK NOW LETS READ AND COPY TILL WE FIND THE !LINK CARD */
        KEEP = %SCRATCH#; INLNK = FALSE; INMOD = FALSE;
        INUNIT = LIUNIT;
        RECPOS = RECLEN + 1;
        CALL NXTTKN;
        K = RECLEN - 1;
        NEW_LINE = REC;
L1:
        IF ADDR(TOKEN.CHR)->TCHAR = '!' THEN CALL NXTTKN;
        IF EOFFLG THEN GOTO NXT_FIL;
        IF TOKEN.CHR = CMD_TBL(%LI) OR
          TOKEN.CHR = 'FEPLINK'
        THEN INLNK = TRUE;
        IF TOKEN.CHR = CMD_TBL(%CO) OR
          TOKEN.CHR = 'GLOM'
        THEN INMOD = TRUE;
        IF NOT INMOD AND NOT INLNK THEN GOTO WR_LIN;
L2:
        LSTFIL = TRUE;                  /* Suppress any error messages        */
        CALL GETFID;
        IF NOT OK THEN GOTO WR_LIN;
        IF FNAME = CMD_TBL(%ON) OR
          FNAME = CMD_TBL(%IN) OR
          FNAME = 'TO' OR
          FNAME = CMD_TBL(%OV)
        THEN GOTO END_FIL;
        IF NOT OK THEN GOTO WR_LIN;
        CALL SCRFIL ALTRET(NOT_FOUND);
        CHAR_LEN = FNLN; I = -1;
        CALL INDEX(I,ADDR(FNAME)->CCHAR,NEW_LINE);
        DO WHILE(RECORD(RECPOS-1) = ' ');
           RECPOS = RECPOS - 1;
        END;
        CALL CONCAT(TBUFFER,SUBSTR(NEW_LINE,0,I),
          ADDR(FNAME)->CCHAR,'.',
          FACCT,
          SUBSTR(REC,RECPOS,RECLEN - RECPOS));
        NEW_LINE = TBUFFER;
        KEEP = %SAVE#; CHANGED = TRUE;
        K = I + FNLN + 9 + (RECLEN - RECPOS);
NOT_FOUND:
        TRCPOS = RECPOS;
        CALL NXTTKN;
        DO WHILE(TOKEN.CHR = '(' OR
          TOKEN.CHR = ',' OR
          TOKEN.CHR = ')' );
           TRCPOS = RECPOS;
           CALL NXTTKN;
        END;
        IF TOKEN.CHR = ';' THEN GOTO WR_LIN;
        IF EORFLG THEN GOTO WR_LIN;
        RECPOS = TRCPOS;
        GOTO L2;
END_FIL:
        IF DCBADDR(SLUNIT)->F$DCB.ASN# = %FILE# AND
          KEEP = %SAVE# AND INLNK
        THEN DO;
           CALL GETFID;
           CHAR_LEN = FNLN;
           CALL CONCAT(TBUFFER,'!SL.X ',ADDR(FNAME)->CCHAR,
             '.',FACCT);
           WRITE.V.DCB# = SLUNIT;
           WRITE.BUF_.BUF$ = ADDR(TBUFFER);
           WRITE.BUF_.BOUND = 46;
           CALL M$WRITE(WRITE);
        END;
        INLNK = FALSE; INMOD = FALSE;
WR_LIN:
        WRITE.V.DCB# = LUUNIT;
        WRITE.BUF_.BUF$ = ADDR(NEW_LINE);
        WRITE.BUF_.BOUND = K;
        CALL M$WRITE(WRITE);
        INUNIT = LIUNIT;
        RECPOS = RECLEN + 1;
        CALL NXTTKN;
        IF EOFFLG THEN GOTO NXT_FIL;
        IF TOKEN.CHR = 'END' THEN INMOD = FALSE;
        K = RECLEN - 1;
        NEW_LINE = REC;
        RECPOS = 0; CHANGED = FALSE;
        IF INLNK OR INMOD THEN GOTO L2;
        ELSE GOTO L1;
NXT_FIL:
        CLOSE.V.DCB# = LUUNIT;
        CLOSE.V.DISP# = KEEP;
        CALL M$CLOSE(CLOSE);
        IF KEEP = %SAVE#
        THEN DO;
           FNAME = DCBADDR(LUUNIT)->F$DCB.NAME#.C;
           CHAR_LEN = DCBADDR(LUUNIT)->F$DCB.NAME#.L;
           FACCT = DCBADDR(LUUNIT)->F$DCB.ACCT#;
           CALL CONCAT(TBUFFER,ADDR(FNAME)->CCHAR,'.',FACCT,
             ', " Created & Saved.');
           WRITE.V.DCB# = LOUNIT;
           WRITE.BUF_.BUF$ = ADDR(TBUFFER);
           WRITE.BUF_.BOUND = CHAR_LEN + 8 + 20;
           CALL M$WRITE(WRITE);
           NUM = NUM + 1;
        END;
        CLOSE.V.DCB# = LIUNIT;
        CLOSE.V.DISP# = %SAVE#;
        CALL M$CLOSE(CLOSE);
        GOTO NXTFILE;
DONE_MOD:
        CLOSE.V.DISP# = %SAVE#;
        CLOSE.V.DCB# = SLUNIT;
        CALL M$CLOSE(CLOSE);
        RETURN;
NO_OPN:
        IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE = %E$FDEOF THEN GOTO DONE_MOD;
        CALL TELLER(-1);
        NOPEN.V.OPER.THISF# = %NO#;
        GOTO NXTFILE;
END MODLINK;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/******************************************************************/
/*M*     SCRFIL    Jan. 1, 1980        GWJ                        */
/***/
/*P*     NAME: SCRFIL
         PURPOSE: This routine will do search the file set up on
                   the F$LIST Dcb and look for FNAME. If FNAME is
                   their then the correct account will be set and
                   a normal return will occur. If the file is not
                   found then the altret is taken.
                                                                  */
 
SCRFIL : PROC ALTRET;
 
%INCLUDE LINKMOD_C1;
 
DCL FILE_NAME CHAR(31);
DCL FILE_LEN  SBIN;
 
DCL FNAME CHAR(31) SYMREF;
DCL FNLN  UBIN SYMREF;
DCL FACCT CHAR(8) SYMREF;
DCL UACCT CHAR(8) SYMREF;
DCL RECPOS SBIN SYMREF;
DCL RECLEN SBIN SYMREF;
DCL RECORD(0:139) CHAR(1) SYMREF;
DCL REC REDEF RECORD CHAR(140);
 
DCL TRCPOS UBIN;
DCL TRCLEN UBIN;
DCL TRECORD CHAR(140);
 
DCL GETFID ENTRY;
 
DCL F$LIST DCB;
%FPT_CLOSE(FPTN=CLOSE,DISP=SAVE,DCB=F$LIST);
 
DCL F$STAR DCB;
 
%FPT_OPEN  (FPTN=OPN_STAR,DCB=F$STAR,FUN=CREATE,ORG=KEYED,ACS=DIRECT,
                          ASN=FILE,DISP=SCRATCH);
%FPT_WRITE (FPTN=WR_STAR,DCB=F$STAR,KEY=KEY_BUF,BUF=DATA_BUF);
%FPT_READ  (FPTN=RD_STAR,DCB=F$STAR,KEY=KEY_BUF,BUF=DATA_BUF,KEYS=YES);
%FPT_CLOSE (FPTN=CLS_STAR,DCB=F$STAR,DISP=SCRATCH);
 
DCL 1 KEY_BUF ALIGNED STATIC,
      2 LEN UBIN BYTE INIT(31) UNAL,
      2 C  CHAR(31) UNAL;
 
DCL 1 DATA_BUF ALIGNED STATIC,
      2 FNLN UBIN BYTE UNAL,
      2 FACCT CHAR(8) UNAL;
 
/*** ** ** ** ***/
 
        IF NOT SRTFLG
        THEN DO;
           IF DCBADDR(DCBNUM(F$STAR))->F$DCB.FCD# = %YES#
           THEN CALL M$CLOSE(CLS_STAR);
           CALL M$OPEN(OPN_STAR);
           FILE_NAME = FNAME;
           FILE_LEN = FNLN;
           INUNIT = LSUNIT;
           TRCPOS = RECPOS;
           TRCLEN = RECLEN;
           TRECORD = REC;
           RECPOS = RECLEN + 1;
           LSTFIL = TRUE;
           DO WHILE(LSTFIL);
              CALL GETFID;
              IF OK
              THEN DO;
                 KEY_BUF.C = FNAME;
                 DATA_BUF.FACCT = FACCT;
                 DATA_BUF.FNLN  = FNLN;
                 CALL M$WRITE(WR_STAR);
              END;
              RECPOS = RECLEN + 1;
           END;
           SRTFLG = TRUE;
           FNAME = FILE_NAME;
           FNLN  = FILE_LEN;
           RECPOS = TRCPOS;
           RECLEN = TRCLEN;
           REC = TRECORD;
           INUNIT = LIUNIT;
           CALL M$CLOSE(CLOSE);
        END;
        KEY_BUF.C = FNAME;
        DATA_BUF = '0'B;
        CALL M$READ(RD_STAR) ALTRET(NO_F);
        IF DATA_BUF.FACCT = ' ' THEN FACCT = UACCT;
        ELSE FACCT = DATA_BUF.FACCT;
        RETURN;
NO_F:
        ALTRETURN;
END SCRFIL;
