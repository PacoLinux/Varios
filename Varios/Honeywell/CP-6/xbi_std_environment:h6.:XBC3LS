

11:15 JAN 06 '95 xbi_std_environment_i6.:XBC3TSI                           1    
    1      /*T***********************************************************/
    2      /*T*                                                         */
    3      /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
    4      /*T*                                                         */
    5      /*T***********************************************************/
    6      /* This is the SYMDEF version of the XB$ENV. it should be included only
    7         once!!! */
    8
    9         %STRING_CONSTANT (NAME=Case_Not_Handled,            VALUE="'Case_Not_Handled'");
   10         %STRING_CONSTANT (NAME=Index_Out_Of_Bounds,         VALUE="'Index_Out_Of_Bounds'");
   11         %STRING_CONSTANT (NAME=Set_Element_Out_Of_Bounds,   VALUE="'Set_Element_Out_Of_Bounds'");
   12         %STRING_CONSTANT (NAME=Ordinal_Value_Out_Of_Bounds, VALUE="'Ordinal_Value_Out_Of_Bounds'");
   13         %STRING_CONSTANT (NAME=Integer_Overflow,            VALUE="'Integer_Overflow'");
   14         %STRING_CONSTANT (NAME=Real_Overflow,               VALUE="'Real_Overflow'");
   15         %STRING_CONSTANT (NAME=Undefined_Variable,          VALUE="'Undefined_Variable'");
   16         %STRING_CONSTANT (NAME=Bad_Pointer,                 VALUE="'Bad_Pointer'");
   17         %STRING_CONSTANT (NAME=Division_By_Zero,            VALUE="'Division_By_Zero'");
   18         %STRING_CONSTANT (NAME=Math_Error,                  VALUE="'Math_Error'");
   19         %STRING_CONSTANT (NAME=No_Such_File,                VALUE="'No_Such_File'");
   20         %STRING_CONSTANT (NAME=File_Opening_Error,          VALUE="'File_Opening_Error'");
   21         %STRING_CONSTANT (NAME=No_Such_Record,              VALUE="'No_Such_Record'");
   22         %STRING_CONSTANT (NAME=Not_Allowed_Input_Operation, VALUE="'Not_Allowed_Input_Operation'");
   23         %STRING_CONSTANT (NAME=Not_Allowed_Output_Operation,VALUE="'Not_Allowed_Output_Operation'");
   24         %STRING_CONSTANT (NAME=Input_Output_Error,          VALUE="'Input_Output_Error'");
   25         %STRING_CONSTANT (NAME=File_Not_Open,               VALUE="'File_Not_Open'");
   26         %STRING_CONSTANT (NAME=End_Of_File,                 VALUE="'End_Of_File'");
   27         %STRING_CONSTANT (NAME=No_Memory_For_New,           VALUE="'No_Memory_For_New'");
   28         %STRING_CONSTANT (NAME=No_Memory_For_Calls,         VALUE="'No_Memory_For_Calls'");
   29         %STRING_CONSTANT (NAME=Hardware_Detected_Fault,     VALUE="'Hardware_Detected_Fault'");
   30         %STRING_CONSTANT (NAME=Stop,                        VALUE="'Stop'");
   31         %STRING_CONSTANT (NAME=Error_Return,                VALUE="'Error_Return'");
   32         %STRING_CONSTANT (NAME=Internal_Trap,               VALUE="'Internal_Trap'");
   33         %STRING_CONSTANT (NAME=Conversion_Error,            VALUE="'Conversion_Error'");
   34         %STRING_CONSTANT (NAME=Reserved_Exception_4,        VALUE="'Reserved_Exception_4'");
   35         %STRING_CONSTANT (NAME=Reserved_Exception_5,        VALUE="'Reserved_Exception_5'");
   36         %STRING_CONSTANT (NAME=Reserved_Exception_6,        VALUE="'Reserved_Exception_6'");
   37         %STRING_CONSTANT (NAME=Reserved_Exception_7,        VALUE="'Reserved_Exception_7'");
11:15 JAN 06 '95 xbi_std_environment_i6.:XBC3TSI                           2    
   38         %STRING_CONSTANT (NAME=Reserved_Exception_8,        VALUE="'Reserved_Exception_8'");
   39         %STRING_CONSTANT (NAME=Reserved_Exception_9,        VALUE="'Reserved_Exception_9'");
   40
   41      DCL 1 XB$ENV STATIC SYMDEF ALIGNED,
   42            2 *               SBIN, /* temp used by XBS_GOTO */
   43            2 *               (0:3) BIT(36) UNAL,
   44            2 CASE_NOT_HANDLED                         PTR INIT (ADDR(Case_Not_Handled)),
   45            2 INDEX_OUT_OF_BOUNDS                      PTR INIT (ADDR(Index_Out_Of_Bounds)),
   46            2 SET_ELEMENT_OUT_OF_BOUNDS                PTR INIT (ADDR(Set_Element_Out_Of_Bounds)),
   47            2 ORDINAL_VALUE_OUT_OF_BOUNDS              PTR INIT (ADDR(Ordinal_Value_Out_Of_Bounds)),
   48            2 INTEGER_OVERFLOW                         PTR INIT (ADDR(Integer_Overflow)),
   49            2 REAL_OVERFLOW                            PTR INIT (ADDR(Real_Overflow)),
   50            2 UNDEFINED_VARIABLE                       PTR INIT (ADDR(Undefined_Variable)),
   51            2 BAD_POINTER                              PTR INIT (ADDR(Bad_Pointer)),
   52            2 DIVISION_BY_ZERO                         PTR INIT (ADDR(Division_By_Zero)),
   53            2 MATH_ERROR                               PTR INIT (ADDR(Math_Error)),
   54            2 NO_SUCH_FILE                             PTR INIT (ADDR(No_Such_File)),
   55            2 FILE_OPENING_ERROR                       PTR INIT (ADDR(File_Opening_Error)),
   56            2 NO_SUCH_RECORD                           PTR INIT (ADDR(No_Such_Record)),
   57            2 NOT_ALLOWED_INPUT_OPERATION              PTR INIT (ADDR(Not_Allowed_Input_Operation)),
   58            2 NOT_ALLOWED_OUTPUT_OPERATION             PTR INIT (ADDR(Not_Allowed_Output_Operation)),
   59            2 INPUT_OUTPUT_ERROR                       PTR INIT (ADDR(Input_Output_Error)),
   60            2 FILE_NOT_OPEN                            PTR INIT (ADDR(File_Not_Open)),
   61            2 END_OF_FILE                              PTR INIT (ADDR(End_Of_File)),
   62            2 NO_MEMORY_FOR_NEW                        PTR INIT (ADDR(No_Memory_For_New)),
   63            2 NO_MEMORY_FOR_CALLS                      PTR INIT (ADDR(No_Memory_For_Calls)),
   64            2 HARDWARE_DETECTED_FAULT                  PTR INIT (ADDR(Hardware_Detected_Fault)),
   65            2 STOP                                     PTR INIT (ADDR(Stop)),
   66            2 ERROR_RETURN                             PTR INIT (ADDR(Error_Return)),
   67            2 INTERNAL_TRAP                            PTR INIT (ADDR(Internal_Trap)),
   68            2 CONVERSION_ERROR                         PTR INIT (ADDR(Conversion_Error)),
   69            2 RESERVED_EXCEPTION_4                     PTR INIT (ADDR(Reserved_Exception_4)),
   70            2 RESERVED_EXCEPTION_5                     PTR INIT (ADDR(Reserved_Exception_5)),
   71            2 RESERVED_EXCEPTION_6                     PTR INIT (ADDR(Reserved_Exception_6)),
   72            2 RESERVED_EXCEPTION_7                     PTR INIT (ADDR(Reserved_Exception_7)),
   73            2 RESERVED_EXCEPTION_8                     PTR INIT (ADDR(Reserved_Exception_8)),
   74            2 RESERVED_EXCEPTION_9                     PTR INIT (ADDR(Reserved_Exception_9)),
11:15 JAN 06 '95 xbi_std_environment_i6.:XBC3TSI                           3    
   75            2 CURRENT_EXCEPTION_HANDLER                PTR INIT (ADDR(NIL)),
   76            2 CURRENT_EXCEPTION                        PTR INIT (ADDR(NIL)),
   77            2 EXCEPTION_FRAME_POINTER                  PTR INIT (ADDR(NIL)),
   78            2 EXCEPTION_LOCATION                       UBIN(18) ALIGNED,
   79            2 STD_EXCEPTION_BLOCK               (0:2)  PTR INIT (ADDR(NIL)),
   80            2 HEAP,
   81               3 HEAP_                                 ALIGNED,
   82                  4 VSIZE#                             UBIN (20) UNAL INIT (0),
   83                  4 *                                  BIT (16) UNAL,
   84                  4 BASE$                              PTR INIT (ADDR(NIL)),
   85               3 NEXT$                                 PTR INIT (ADDR(NIL)),
   86            2 FSFA,
   87               3 FSFA_                                 VECTOR INIT (VECTOR(NIL)),
   88               3 NEXT$                                 PTR INIT (ADDR(NIL)),
   89               3 KBUF$                                 PTR INIT (ADDR(NIL)),
   90               3 SIZE                                  SBIN INIT (0),
   91               3 BUF_SIZE                              SBIN INIT (1024),
   92                     /* XB$ENV.FSFA.BUF_SIZE is the size of allocated
   93                        FSFA buffers.                                */
   94            2 EXTERNAL_FILE_CHAIN                      PTR INIT (ADDR(NIL)),
   95            2 ERROR_CODE                               ALIGNED,
   96              3 FCG                                    BIT(12) UNAL,
   97              3 MID                                    BIT(6) UNAL,
   98              3 MON                                    BIT(1) UNAL,
   99              3 ERR#                                   UBIN(14) UNAL,
  100              3 SEV                                    BIT(3) UNAL,
  101            2 DCB_NUMBER                               UBIN WORD ALIGNED INIT (0),
  102            2 EXCEPTION_NAME,
  103              3 SIZE                                   SBIN WORD ALIGNED,
  104              3 STRING                                 CHAR(256),
  105           2 USER_MESSAGE,
  106             3 SIZE                                    SBIN WORD ALIGNED,
  107             3 STRING                                  CHAR(256),
  108           2 FAILING_ORDINAL_VALUE                     SBIN WORD ALIGNED,
  109           2 IS_FSFA_ALLOWED                           BIT (1) UNAL INIT ('1'B);
  110
  111      DCL EXCEPTION                                    PTR BASED ALIGNED;
11:15 JAN 06 '95 xbi_std_environment_i6.:XBC3TSI                           4    
  112
  113
  114      %EQU NUMBER_OF_EXCEPTIONS = 31;
  115
  116         DCL XBC_UNDEFINED             BIT (36) SYMDEF CONSTANT INIT ('400000000000'O);
  117      %SUB FLOATING_UNDEFINED   = "'400000000000400000000000'O";
  118      %EQU USER_MESSAGE         = '000000000001'O;
  119      %EQU FALSE                = 0;
  120      %EQU TRUE                 = 1;
  121
  122      %MACRO RAISE_SYSTEM_EXCEPTION (EXCEPTION=MISSING_EXCEPTION, ERROR=MISSING_EXCEPTION);
  123         CALL XB$RAISE_SYSTEM_EXCEPTION (XB$ENV.EXCEPTION, ERROR);
  124      %MEND;
  125
  126      %MACRO RAISE_PASCAL_EXCEPTION (EXCEPTION=MISSING_EXCEPTION, ERROR=MISSING_EXCEPTION);
  127         CALL XB$RAISE_PASCAL_EXCEPTION (XB$ENV.EXCEPTION, ERROR);
  128      %MEND;
  129
  130      %MACRO RAISE_ENTRIES;
  131         DCL XB$RAISE_SYSTEM_EXCEPTION          ENTRY(2);
  132         DCL XB$RAISE_PASCAL_EXCEPTION          ENTRY(2);
  133      %MEND;

