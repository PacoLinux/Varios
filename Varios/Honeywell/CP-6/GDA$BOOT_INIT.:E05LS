VERSION E05

PL6.E3A0      #001=GDA$BOOT_INIT File=GDA$BOOT_INIT.:E05TSI                      TUE 07/29/97 21:20 Page:1    
        1        1        /*M* GDA$BOOT_INIT - Called by SATYR to initialize SATYR                      */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X*             */
        8        8        /*P* NAME: GDA$BOOT_INIT
        9        9             PURPOSE: This routine is called by BIGFOOT during monitor
       10       10                      initialization to init the standalone async handler
       11       11                      (SATYR).  SATYR is used by the remote debugger to
       12       12                      transfer data to the host by way of an ASYNC link.
       13       13                                                                                      */
       14       14        %EJECT;
PL6.E3A0      #001=GDA$BOOT_INIT File=GDA$BOOT_INIT.:E05TSI                      TUE 07/29/97 21:20 Page:2    
       15       15        /*F* NAME:    GDA$BOOT_INIT
       16       16             PURPOSE: Called by BIGFOOT to init the standalone async handler
       17       17                      (SATYR).
       18       18             CALL:    CALL GDA$BOOT_INIT;
       19       19             DESCRIPTION:  This routine performs all initialization necessary
       20       20                           to get SATYR going.  This includes downloading the
       21       21                           CCP's and LCT's, setting up the channel table and
       22       22                           the transmitt and receive ISA's.  THIS ROUTINE DOES
       23       23                           NOT PERFORM ANY LEVEL CHANGES.  IT ASSUMES IT IS
       24       24                           ALLREADY RUNNING AT A LEVEL HIGH ENOUGH TO CONTINUE
       25       25                           UNINTERRUPTED.
       26       26                                                                                      */
       27       27        GDA$BOOT_INIT: PROC ALTRET;
       28       28                                                /* INCLUDE FILES                      */
       29       29 S      %INCLUDE G_LCP6_E;                      /* Various LCP6 EQUs                  */
       30       30        %INCLUDE G_HJIT_M;
       31      175        %INCLUDE G$BOBCAT_M;                    /* Bobcat related macros              */
       32      195        %INCLUDE GD_STATIC_DATA;
       33      668        %INCLUDE GH_HARDWARE_M;                 /* Macros to do I/O's and LEVs        */
       34      766        %INCLUDE GH_IOFNC_E;                    /* I/O Function codes                 */
       35      835        %INCLUDE GDA$MACS_M;
       36      857 S      %INCLUDE GH_LCP6_M;                     /* Macros for L6 hardware items       */
       37      858        %INCLUDE KH$CHN;
       38      980        %INCLUDE KH$IO;
       39     1227        %INCLUDE KW_ALCT_E;
       40     1417                                                /* SYMREFS                            */
       41     1418        %GD_DATA(FPTN=GD_DATA_C,STCLASS=SYMREF);
       42     1464    1   DCL G$LOW_MEM$ PTR SYMREF;              /* Pointer to base of low memory      */
       43     1465    1   DCL G$MHJIT$ PTR SYMREF;
       44     1466    1   DCL G$WINDOW1$ PTR SYMREF;
       45     1467        %G$BOBCAT(STCLASS="BASED(G$WINDOW1$)");
       46     1480        %G$MHJIT(STCLASS="BASED(G$MHJIT$)");
       47     8354        %G$LOW_MEM(STCLASS="BASED(G$LOW_MEM$)"); /* Low Memory template               */
       48     8403    1   DCL G$SATYR_RCVISA$ PTR SYMREF;
       49     8404    1   DCL G$SATYR_TRNISA$ PTR SYMREF;
       50     8405    1   DCL GD_CHN UBIN(10) SYMREF;
       51     8406    1   DCL GD_LINSPD UBIN SYMREF;
PL6.E3A0      #001=GDA$BOOT_INIT File=GDA$BOOT_INIT.:E05TSI                      TUE 07/29/97 21:20 Page:3    
       52     8407    1   DCL GD_DBG_INIT BIT(1) ALIGNED SYMREF;
       53     8408    1   DCL GD_DBG_MONINIT BIT(1) ALIGNED SYMREF;
       54     8409        %KH$DWNLODCCP(NAME=GD_DWNLODCCP,STCLASS=SYMREF);
       55     8432        %KH$DWNLODLCT(NAME=GD_DWNLODLCT,STCLASS=SYMREF);
       56     8456                                                /* BASED ITEMS                        */
       57     8457        %G$ISA(FPTN=GDA_RCVISA,STCLASS="BASED(G$SATYR_RCVISA$)");
       58     8760        %G$ISA(FPTN=GDA_TRNISA,STCLASS="BASED(G$SATYR_TRNISA$)");
       59     9063                                                /* TEMPS                              */
       60     9064    1   DCL SAVEPTR PTR;
       61     9065    1   DCL WDOG UBIN;
       62     9066        %GH_LEV (FPTN=INHIBIT_TO_60, TYPE=SUSPEND_INHIBIT, LEVEL=60, STCLASS=CONSTANT);
       63     9088        %GH_IO (FPTN=GH$IO, STCLASS=AUTO);
       64     9104        %KH$DWNLODCCP(NAME=GD$DWNLODCCP,STCLASS=AUTO);
       65     9127        %KH$DWNLODLCT(NAME=GD$DWNLODLCT,STCLASS=AUTO);
       66     9151                                                /* ENTRYS                             */
       67     9152    1   DCL KHI$DWNLODCCP ENTRY(1) ALTRET;
       68     9153    1   DCL KHI$DWNLODLCT ENTRY(1) ALTRET;
       69     9154    1   DCL GHH$ASD ENTRY(2);
       70     9155    1   DCL GHH$IO ENTRY(1) ALTRET;             /* Routine that does I/O instructions */
       71     9156    1   DCL GHH$LEV ENTRY(1);                   /* Routine that does LEV instructions */
       72     9157        %EJECT;
PL6.E3A0      #001=GDA$BOOT_INIT File=GDA$BOOT_INIT.:E05TSI                      TUE 07/29/97 21:20 Page:4    
       73     9158        /*
       74     9159          Copy the constant copy of delta's data into the debugger data
       75     9160          segment.  All references to debugger static data will ALLWAYS be
       76     9161          to this structure.
       77     9162
       78     9163          Init the debuggers data segment, making sure not to trash the
       79     9164          stack pointer Peter worked so hard to setup for us.
       80     9165                                                                                      */
       81     9166    1           SAVEPTR=GD_DATA.DELTAINFO.STACK$;
       82     9167    1           GD_DATA=GD_DATA_C;
       83     9168    1           GD_DATA.DELTAINFO.STACK$=SAVEPTR;
       84     9169    1           GD_DATA.GD.DYNSP$ = ADDR(GD_DATA.MYSPACE(0));
       85     9170        /*
       86     9171          We are in XDELTA if we entered here for init
       87     9172                                                                                      */
       88     9173    1           GD_DATA.GD.MODE=%GD#MODE_XDELTA;
       89     9174        /*
       90     9175          Locate the segment descriptor for the window segment that
       91     9176          we will be using.
       92     9177        */
       93     9178    1           GD_DATA.GD.ASDT_WINDOW$ = ADDR(G$MHJIT.ASDT_MON.WINDOW1);
       94     9179    1           GD_DATA.GD.WINDOW$ = G$WINDOW1$;
       95     9180        /*
       96     9181          Setup the LCT's for the transmitt and receive CCP's.  This includes
       97     9182          loading interrupt levels and line speed.  NOTE - THERE ARE SOME
       98     9183          HARDCODED VALUES HERE THAT NEED TO BE CHANGED.
       99     9184                                                                                      */
      100     9185        /*
      101     9186          Place our ISA addresses into the interrupt vector
      102     9187                                                                                      */
      103     9188    1           G$LOW_MEM.IV.IL$(%G_IL_SATYR_RCV#)=ADDR(GDA_RCVISA.DEV.CHN);
      104     9189    1           G$LOW_MEM.IV.IL$(%G_IL_SATYR_TRN#)=ADDR(GDA_TRNISA.DEV.CHN);
      105     9190
      106     9191        /* If channel = 0 then altret */
      107     9192    1           IF GD_CHN = 0
      108     9193    1           THEN
      109     9194    1              ALTRETURN;
PL6.E3A0      #001=GDA$BOOT_INIT File=GDA$BOOT_INIT.:E05TSI                      TUE 07/29/97 21:20 Page:5    
      110     9195
      111     9196        /*
      112     9197          Call routines to download the CCP's and then call a routine to
      113     9198          init the line
      114     9199                                                                                      */
      115     9200    1           GD$DWNLODCCP=GD_DWNLODCCP;
      116     9201    1           GD$DWNLODLCT=GD_DWNLODLCT;
      117     9202    1           GD$DWNLODCCP.CHN$=ADDR(GD_CHN);
      118     9203    1           GD$DWNLODLCT.CHN$=ADDR(GD_CHN);
      119     9204    1           CALL KHI$DWNLODCCP(GD$DWNLODCCP) ALTRET(NOCANDO);
      120     9205    1           CALL KHI$DWNLODLCT(GD$DWNLODLCT) ALTRET(NOCANDO);
      121     9206        /*
      122     9207          Download the line speed
      123     9208                                                                                      */
      124     9209    1           GH$IO.CAS.CHN=GD_CHN;
      125     9210    1           GH$IO.CAS.FNC=%GH#IO_OTPLCTBYT;
      126     9211    1           GH$IO.DAS.LCTDAT=GD_LINSPD;
      127     9212    1           GH$IO.DAS.LCTADR=%KW#PWA8;
      128     9213    1           CALL GHH$IO(GH$IO) ALTRET(NAKANDSPLIT);
      129     9214        /*
      130     9215          Try to start I/O to the channel
      131     9216                                                                                      */
      132     9217    1           GH$IO.CAS.FNC=%GH#IO_OTPCHNCTR;
      133     9218    1           GH$IO.STATUS='4000'X;
      134     9219    1           CALL GHH$IO(GH$IO) ALTRET(NAKANDSPLIT);
      135     9220        /*
      136     9221          If the debugger init flag is set, we will wait here until the
      137     9222          host link comes up
      138     9223                                                                                      */
      139     9224    1           IF GD_DBG_INIT THEN
      140     9225    2           DO;
      141     9226    2              CALL GHH$LEV(INHIBIT_TO_60);
      142     9227    3              DO WHILE (GD_DATA.DELTAINFO.TSA$=ADDR(NIL));
      143     9228    3                 END;
      144     9229    2              END;
      145     9230        /*
      146     9231           At this point we're all done
PL6.E3A0      #001=GDA$BOOT_INIT File=GDA$BOOT_INIT.:E05TSI                      TUE 07/29/97 21:20 Page:6    
      147     9232                                                                                      */
      148     9233    1           RETURN;
      149     9234        /*
      150     9235           Come here when an I/O of some type has completed abnormally
      151     9236                                                                                      */
      152     9237    1   NAKANDSPLIT: GD_DATA.GDA.NAKCNT=GD_DATA.GDA.NAKCNT+1;
      153     9238    1   NOCANDO: ALTRETURN;
      154     9239        %EJECT;
PL6.E3A0      #001=GDA$BOOT_INIT File=GDA$BOOT_INIT.:E05TSI                      TUE 07/29/97 21:20 Page:7    
      155     9240        /*F* NAME: GDA$INIT_DONE
      156     9241             PURPOSE: Called by BIGFOOT before exiting to the scheduler so
      157     9242                      the Debuger can check to see if it needs to be associated.
      158     9243             CALL: CALL GDA$INIT_DONE
      159     9244             DESCRIPTION: This routine check to see if the flag GD_DBG_MONINIT
      160     9245                          is set and then waits for the debugger to be
      161     9246                          associated.
      162     9247          */
      163     9248
      164     9249    1   GDA$INIT_DONE: ENTRY ALTRET;
      165     9250
      166     9251    1           CALL GHH$ASD(G$WINDOW1$,G$MHJIT.ASDT_MON.BOBCAT);
      167     9252    1           GD_DATA.GD.MUIS=G$BOBCAT.MUIS;
      168     9253    1           GD_DATA.GD.HIMEM=G$BOBCAT.MEM_HI;
      169     9254
      170     9255    1           WDOG=G$LOW_MEM.WDT_CURR;
      171     9256    1           IF GD_DBG_MONINIT
      172     9257    2           THEN DO;
      173     9258    2              CALL GHH$LEV (INHIBIT_TO_60);
      174     9259    3              DO WHILE (GD_DATA.DELTAINFO.TSA$=ADDR(NIL));
      175     9260    3                 G$LOW_MEM.WDT_CURR=WDOG;
      176     9261    3                 END;
      177     9262    2              END;
      178     9263
      179     9264    1           RETURN;
      180     9265              %EJECT;
PL6.E3A0      #001=GDA$BOOT_INIT File=GDA$BOOT_INIT.:E05TSI                      TUE 07/29/97 21:20 Page:8    
      181     9266              /*F*  NAME:   GDA$USER_INIT
      182     9267                    PURPOSE: This routine is called to initialize the
      183     9268                             debugger for user debugging.
      184     9269                    CALL:    CALL GDA$USER_INIT;
      185     9270                    DESCRIPTION:  This routine sets up the debugger data
      186     9271                                  segment for user mode debugging
      187     9272                                  and then returns.  It will only
      188     9273                                  be called from GDB$FISRT_USER_TRAP.
      189     9274              */
      190     9275
      191     9276    1   GDA$USER_INIT: ENTRY ALTRET;
      192     9277        /*
      193     9278          Init the debuggers data segment, making sure not to trash the
      194     9279          stack pointer Peter worked so hard to setup for us.
      195     9280                                                                                      */
      196     9281    1           SAVEPTR=GD_DATA.DELTAINFO.STACK$;
      197     9282    1           GD_DATA=GD_DATA_C;
      198     9283    1           GD_DATA.DELTAINFO.STACK$=SAVEPTR;
      199     9284    1           GD_DATA.GD.DYNSP$ = ADDR(GD_DATA.MYSPACE(0));
      200     9285        /*
      201     9286          Setup mode to indicate we are in user mode
      202     9287                                                                                      */
      203     9288    1           GD_DATA.GD.MODE=%GD#MODE_USER_DELTA;
      204     9289        /*
      205     9290          Locate the segment descriptor for the window segment that
      206     9291          we will be using.
      207     9292        */
      208     9293    1           GD_DATA.GD.ASDT_WINDOW$ = ADDR(G$MHJIT.ASDT_MON.WINDOW1);
      209     9294    1           GD_DATA.GD.WINDOW$ = G$WINDOW1$;
      210     9295
      211     9296    1           RETURN;
      212     9297    1   END GDA$BOOT_INIT;

PL6.E3A0      #001=GDA$BOOT_INIT File=GDA$BOOT_INIT.:E05TSI                      TUE 07/29/97 21:20 Page:9    
--  Include file information  --

   KW_ALCT_E.:E05TOU  is referenced.
   KH$IO.:E05TOU  is referenced.
   KH$CHN.:E05TOU  is referenced.
   GDA$MACS_M.:E05TOU  is referenced.
   GH_IOFNC_E.:E05TOU  is referenced.
   GH_HARDWARE_M.:E05TOU  is referenced.
   GD$MSG_M.:E05TOU  is referenced.
   GDA_EQUS_E.:E05TOU  is referenced.
   GD_EQUS_E.:E05TOU  is referenced.
   GD_DATA_M.:E05TOU  is referenced.
   GD_STATIC_DATA.:E05TOU  cannot be made into a system file and is referenced.
   G$BOBCAT_M.:E05TOU  is referenced.
   G_HJIT_M.:E05TOU  is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   KI_CP6.:E05TOU  was found in the system file and is never referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure GDA$BOOT_INIT.

   Procedure GDA$BOOT_INIT requires 340 words for executable code.
   Procedure GDA$BOOT_INIT requires 26 words of local(AUTO) storage.

    No errors detected in file GDA$BOOT_INIT.:E05TSI    .

PL6.E3A0      #001=GDA$BOOT_INIT File=GDA$BOOT_INIT.:E05TSI                      TUE 07/29/97 21:20 Page:10   

 Object Unit name= GDA$BOOT_INIT                              File name= GDA$BOOT_INIT.:E05TOU
 UTS= JUL 29 '97 21:20:33.48 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_LCP6_SYSTEM                               Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size HexSiz  Section name
    0  RoData even  UTS      1      1  GDA$BOOT_INIT
    1   Proc  even  none   340    154  GDA$BOOT_INIT
    2  RoData even  none     2      2  GDA$BOOT_INIT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect HexLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        0  GDA$BOOT_INIT
     1     D3          yes     yes      Std        0  GDA$INIT_DONE
     1    121          yes     yes      Std        0  GDA$USER_INIT

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       1 KHI$DWNLODCCP
         yes           Std       1 GHH$LEV
         yes           Std       2 GHH$ASD
 yes     yes           Std       1 KHI$DWNLODLCT
 yes     yes           Std       1 GHH$IO
                       nStd      0 X6A_AUTO_0
                       nStd      0 X6A_AALT
                       nStd      0 X6A_ARET
PL6.E3A0      #001=GDA$BOOT_INIT File=GDA$BOOT_INIT.:E05TSI                      TUE 07/29/97 21:20 Page:11   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     GD$DELTA_DATA$                        GD_DATA_C                             G$LOW_MEM$
     G$MHJIT$                              G$WINDOW1$                            G$SATYR_RCVISA$
     G$SATYR_TRNISA$                       GD_CHN                                GD_LINSPD
     GD_DBG_INIT                           GD_DBG_MONINIT                        GD_DWNLODCCP
     GD_DWNLODLCT                     r    G$ROS$
PL6.E3A0      #001=GDA$BOOT_INIT File=GDA$BOOT_INIT.:E05TSI                      TUE 07/29/97 21:20 Page:12   


        1        1        /*M* GDA$BOOT_INIT - Called by SATYR to initialize SATYR                      */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X*             */
        8        8        /*P* NAME: GDA$BOOT_INIT
        9        9             PURPOSE: This routine is called by BIGFOOT during monitor
       10       10                      initialization to init the standalone async handler
       11       11                      (SATYR).  SATYR is used by the remote debugger to
       12       12                      transfer data to the host by way of an ASYNC link.
       13       13                                                                                      */
       14       14        %EJECT;
PL6.E3A0      #001=GDA$BOOT_INIT File=GDA$BOOT_INIT.:E05TSI                      TUE 07/29/97 21:20 Page:13   
       15       15        /*F* NAME:    GDA$BOOT_INIT
       16       16             PURPOSE: Called by BIGFOOT to init the standalone async handler
       17       17                      (SATYR).
       18       18             CALL:    CALL GDA$BOOT_INIT;
       19       19             DESCRIPTION:  This routine performs all initialization necessary
       20       20                           to get SATYR going.  This includes downloading the
       21       21                           CCP's and LCT's, setting up the channel table and
       22       22                           the transmitt and receive ISA's.  THIS ROUTINE DOES
       23       23                           NOT PERFORM ANY LEVEL CHANGES.  IT ASSUMES IT IS
       24       24                           ALLREADY RUNNING AT A LEVEL HIGH ENOUGH TO CONTINUE
       25       25                           UNINTERRUPTED.
       26       26                                                                                      */
       27       27        GDA$BOOT_INIT: PROC ALTRET;

     27   1 000000  D380 0000 0000  xent GDA$BOOT_INIT   LNJ,B5   X6A_AUTO_0
          1 000003       001A 0000                       DC       26,0

       28       28                                                /* INCLUDE FILES                      */
       29       29 S      %INCLUDE G_LCP6_E;                      /* Various LCP6 EQUs                  */
       30       30        %INCLUDE G_HJIT_M;
       31      175        %INCLUDE G$BOBCAT_M;                    /* Bobcat related macros              */
       32      195        %INCLUDE GD_STATIC_DATA;
       33      668        %INCLUDE GH_HARDWARE_M;                 /* Macros to do I/O's and LEVs        */
       34      766        %INCLUDE GH_IOFNC_E;                    /* I/O Function codes                 */
       35      835        %INCLUDE GDA$MACS_M;
       36      857 S      %INCLUDE GH_LCP6_M;                     /* Macros for L6 hardware items       */
       37      858        %INCLUDE KH$CHN;
       38      980        %INCLUDE KH$IO;
       39     1227        %INCLUDE KW_ALCT_E;
       40     1417                                                /* SYMREFS                            */
       41     1418        %GD_DATA(FPTN=GD_DATA_C,STCLASS=SYMREF);
       42     1464    1   DCL G$LOW_MEM$ PTR SYMREF;              /* Pointer to base of low memory      */
       43     1465    1   DCL G$MHJIT$ PTR SYMREF;
       44     1466    1   DCL G$WINDOW1$ PTR SYMREF;
       45     1467        %G$BOBCAT(STCLASS="BASED(G$WINDOW1$)");
       46     1480        %G$MHJIT(STCLASS="BASED(G$MHJIT$)");
       47     8354        %G$LOW_MEM(STCLASS="BASED(G$LOW_MEM$)"); /* Low Memory template               */
PL6.E3A0      #001=GDA$BOOT_INIT File=GDA$BOOT_INIT.:E05TSI                      TUE 07/29/97 21:20 Page:14   
       48     8403    1   DCL G$SATYR_RCVISA$ PTR SYMREF;
       49     8404    1   DCL G$SATYR_TRNISA$ PTR SYMREF;
       50     8405    1   DCL GD_CHN UBIN(10) SYMREF;
       51     8406    1   DCL GD_LINSPD UBIN SYMREF;
       52     8407    1   DCL GD_DBG_INIT BIT(1) ALIGNED SYMREF;
       53     8408    1   DCL GD_DBG_MONINIT BIT(1) ALIGNED SYMREF;
       54     8409        %KH$DWNLODCCP(NAME=GD_DWNLODCCP,STCLASS=SYMREF);
       55     8432        %KH$DWNLODLCT(NAME=GD_DWNLODLCT,STCLASS=SYMREF);
       56     8456                                                /* BASED ITEMS                        */
       57     8457        %G$ISA(FPTN=GDA_RCVISA,STCLASS="BASED(G$SATYR_RCVISA$)");
       58     8760        %G$ISA(FPTN=GDA_TRNISA,STCLASS="BASED(G$SATYR_TRNISA$)");
       59     9063                                                /* TEMPS                              */
       60     9064    1   DCL SAVEPTR PTR;
       61     9065    1   DCL WDOG UBIN;
       62     9066        %GH_LEV (FPTN=INHIBIT_TO_60, TYPE=SUSPEND_INHIBIT, LEVEL=60, STCLASS=CONSTANT);
       63     9088        %GH_IO (FPTN=GH$IO, STCLASS=AUTO);
       64     9104        %KH$DWNLODCCP(NAME=GD$DWNLODCCP,STCLASS=AUTO);
       65     9127        %KH$DWNLODLCT(NAME=GD$DWNLODLCT,STCLASS=AUTO);
       66     9151                                                /* ENTRYS                             */
       67     9152    1   DCL KHI$DWNLODCCP ENTRY(1) ALTRET;
       68     9153    1   DCL KHI$DWNLODLCT ENTRY(1) ALTRET;
       69     9154    1   DCL GHH$ASD ENTRY(2);
       70     9155    1   DCL GHH$IO ENTRY(1) ALTRET;             /* Routine that does I/O instructions */
       71     9156    1   DCL GHH$LEV ENTRY(1);                   /* Routine that does LEV instructions */
       72     9157        %EJECT;
PL6.E3A0      #001=GDA$BOOT_INIT File=GDA$BOOT_INIT.:E05TSI                      TUE 07/29/97 21:20 Page:15   
       73     9158        /*
       74     9159          Copy the constant copy of delta's data into the debugger data
       75     9160          segment.  All references to debugger static data will ALLWAYS be
       76     9161          to this structure.
       77     9162
       78     9163          Init the debuggers data segment, making sure not to trash the
       79     9164          stack pointer Peter worked so hard to setup for us.
       80     9165                                                                                      */
       81     9166    1           SAVEPTR=GD_DATA.DELTAINFO.STACK$;

   9166   1 000005  EC80 0000 0000  xsym                 LDB,B6   GD$DELTA_DATA$
          1 000008  DC86                                 LDB,B5   ,B6
          1 000009  DFC7 0004                            STB,B5   SAVEPTR,AUTO

       82     9167    1           GD_DATA=GD_DATA_C;

   9167   1 00000B  AB80 0000 0000  xsym                 LAB,B2   GD_DATA_C
          1 00000E  2C00                                 LDV,R2   0
          1 00000F  E870 0828                            LDR,R6   2088,IMO
          1 000011  BB86                                 LAB,B3   ,B6
          1 000012  3C00                                 LDV,R3   0
          1 000013  0008                                 MMM

       83     9168    1           GD_DATA.DELTAINFO.STACK$=SAVEPTR;

   9168   1 000014  DCC7 0004                            LDB,B5   SAVEPTR,AUTO
          1 000016  CC80 0000 0000  xsym                 LDB,B4   GD$DELTA_DATA$
          1 000019  DF84                                 STB,B5   ,B4

       84     9169    1           GD_DATA.GD.DYNSP$ = ADDR(GD_DATA.MYSPACE(0));

   9169   1 00001A  CC80 0000 0000  xsym                 LDB,B4   GD$DELTA_DATA$
          1 00001D  ABC4 01AE                            LAB,B2   430,B4
          1 00001F  AFC4 0156                            STB,B2   342,B4

       85     9170        /*
       86     9171          We are in XDELTA if we entered here for init
PL6.E3A0      #001=GDA$BOOT_INIT File=GDA$BOOT_INIT.:E05TSI                      TUE 07/29/97 21:20 Page:16   
       87     9172                                                                                      */
       88     9173    1           GD_DATA.GD.MODE=%GD#MODE_XDELTA;

   9173   1 000021  6C02                                 LDV,R6   2
          1 000022  EF44 0130                            STR,R6   304,B4

       89     9174        /*
       90     9175          Locate the segment descriptor for the window segment that
       91     9176          we will be using.
       92     9177        */
       93     9178    1           GD_DATA.GD.ASDT_WINDOW$ = ADDR(G$MHJIT.ASDT_MON.WINDOW1);

   9178   1 000024  9C80 0000 0000  xsym                 LDB,B1   G$MHJIT$
          1 000027  EBC1 0030                            LAB,B6   48,B1
          1 000029  EFC4 017A                            STB,B6   378,B4

       94     9179    1           GD_DATA.GD.WINDOW$ = G$WINDOW1$;

   9179   1 00002B  BC80 0000 0000  xsym                 LDB,B3   G$WINDOW1$
          1 00002E  BFC4 017C                            STB,B3   380,B4

       95     9180        /*
       96     9181          Setup the LCT's for the transmitt and receive CCP's.  This includes
       97     9182          loading interrupt levels and line speed.  NOTE - THERE ARE SOME
       98     9183          HARDCODED VALUES HERE THAT NEED TO BE CHANGED.
       99     9184                                                                                      */
      100     9185        /*
      101     9186          Place our ISA addresses into the interrupt vector
      102     9187                                                                                      */
      103     9188    1           G$LOW_MEM.IV.IL$(%G_IL_SATYR_RCV#)=ADDR(GDA_RCVISA.DEV.CHN);

   9188   1 000030  EC80 0000 0000  xsym                 LDB,B6   G$SATYR_RCVISA$
          1 000033  DBC6 0005                            LAB,B5   5,B6
          1 000035  EC80 0000 0000  xsym                 LDB,B6   G$LOW_MEM$
          1 000038  DFC6 008E                            STB,B5   142,B6

      104     9189    1           G$LOW_MEM.IV.IL$(%G_IL_SATYR_TRN#)=ADDR(GDA_TRNISA.DEV.CHN);
PL6.E3A0      #001=GDA$BOOT_INIT File=GDA$BOOT_INIT.:E05TSI                      TUE 07/29/97 21:20 Page:17   

   9189   1 00003A  AC80 0000 0000  xsym                 LDB,B2   G$SATYR_TRNISA$
          1 00003D  EBC2 0005                            LAB,B6   5,B2
          1 00003F  DC80 0000 0000  xsym                 LDB,B5   G$LOW_MEM$
          1 000042  EFC5 0090                            STB,B6   144,B5

      105     9190
      106     9191        /* If channel = 0 then altret */
      107     9192    1           IF GD_CHN = 0

   9192   1 000044  8280 0000 0000  xsym                 LB,'FFC0'X        GD_CHN
   9192   1 000047       FFC0
          1 000048  0501 0004                            BBT      s:9200,PREL

      108     9193    1           THEN
      109     9194    1              ALTRETURN;

   9194   1 00004A  C380 0000 0000  xent                 LNJ,B4   X6A_AALT

      110     9195
      111     9196        /*
      112     9197          Call routines to download the CCP's and then call a routine to
      113     9198          init the line
      114     9199                                                                                      */
      115     9200    1           GD$DWNLODCCP=GD_DWNLODCCP;

   9200   1 00004D  AB80 0000 0000  xsym                 LAB,B2   GD_DWNLODCCP
          1 000050  2C00                                 LDV,R2   0
          1 000051  6C0A                                 LDV,R6   10
          1 000052  BB87                                 LAB,B3   ,AUTO
          1 000053  3C12                                 LDV,R3   18
          1 000054  0008                                 MMM

      116     9201    1           GD$DWNLODLCT=GD_DWNLODLCT;

   9201   1 000055  AB80 0000 0000  xsym                 LAB,B2   GD_DWNLODLCT
          1 000058  2C00                                 LDV,R2   0
PL6.E3A0      #001=GDA$BOOT_INIT File=GDA$BOOT_INIT.:E05TSI                      TUE 07/29/97 21:20 Page:18   
          1 000059  6C0E                                 LDV,R6   14
          1 00005A  BB87                                 LAB,B3   ,AUTO
          1 00005B  3C1C                                 LDV,R3   28
          1 00005C  0008                                 MMM

      117     9202    1           GD$DWNLODCCP.CHN$=ADDR(GD_CHN);

   9202   1 00005D  EB80 0000 0000  xsym                 LAB,B6   GD_CHN
          1 000060  EFC7 0009                            STB,B6   GD$DWNLODCCP,AUTO

      118     9203    1           GD$DWNLODLCT.CHN$=ADDR(GD_CHN);

   9203   1 000062  DB80 0000 0000  xsym                 LAB,B5   GD_CHN
          1 000065  DFC7 000E                            STB,B5   GD$DWNLODLCT,AUTO

      119     9204    1           CALL KHI$DWNLODCCP(GD$DWNLODCCP) ALTRET(NOCANDO);

   9204   1 000067  CBC7 0009                            LAB,B4   GD$DWNLODCCP,AUTO
          1 000069  CFC7 0016                            STB,B4   GD$DWNLODLCT+8,AUTO
          1 00006B  BBC7 0016                            LAB,B3   GD$DWNLODLCT+8,AUTO
          1 00006D  CBF0 0100                            LAB,B4   256,IMO
          1 00006F  E380 0000 0000  xent                 LNJ,B6   KHI$DWNLODCCP
          1 000072       005E                            DC       s:9238,PREL

      120     9205    1           CALL KHI$DWNLODLCT(GD$DWNLODLCT) ALTRET(NOCANDO);

   9205   1 000073  EBC7 000E                            LAB,B6   GD$DWNLODLCT,AUTO
          1 000075  EFC7 0016                            STB,B6   GD$DWNLODLCT+8,AUTO
          1 000077  BBC7 0016                            LAB,B3   GD$DWNLODLCT+8,AUTO
          1 000079  CBF0 0100                            LAB,B4   256,IMO
          1 00007B  E380 0000 0000  xent                 LNJ,B6   KHI$DWNLODLCT
          1 00007E       0052                            DC       s:9238,PREL

      121     9206        /*
      122     9207          Download the line speed
      123     9208                                                                                      */
      124     9209    1           GH$IO.CAS.CHN=GD_CHN;
PL6.E3A0      #001=GDA$BOOT_INIT File=GDA$BOOT_INIT.:E05TSI                      TUE 07/29/97 21:20 Page:19   

   9209   1 00007F  E800 0000 0000  xsym                 LDR,R6   GD_CHN
          1 000082  EAC7 0007                            SRM,R6,'FFC0'X    GH$IO,AUTO
          1 000084       FFC0

      125     9210    1           GH$IO.CAS.FNC=%GH#IO_OTPLCTBYT;

   9210   1 000085  5C0B                                 LDV,R5   11
          1 000086  DAC7 0007                            SRM,R5,'003F'X    GH$IO,AUTO
          1 000088       003F

      126     9211    1           GH$IO.DAS.LCTDAT=GD_LINSPD;

   9211   1 000089  C800 0000 0000  xsym                 LDR,R4   GD_LINSPD
          1 00008C  C7C7 0008                            STH,R4   GH$IO+1,AUTO

      127     9212    1           GH$IO.DAS.LCTADR=%KW#PWA8;

   9212   1 00008E  3C1E                                 LDV,R3   30
          1 00008F  BAC7 0008                            SRM,R3,'00FF'X    GH$IO+1,AUTO
          1 000091       00FF

      128     9213    1           CALL GHH$IO(GH$IO) ALTRET(NAKANDSPLIT);

   9213   1 000092  EBC7 0007                            LAB,B6   GH$IO,AUTO
          1 000094  EFC7 0016                            STB,B6   GD$DWNLODLCT+8,AUTO
          1 000096  BBC7 0016                            LAB,B3   GD$DWNLODLCT+8,AUTO
          1 000098  CBF0 0100                            LAB,B4   256,IMO
          1 00009A  E380 0000 0000  xent                 LNJ,B6   GHH$IO
          1 00009D       002E                            DC       s:9237,PREL

      129     9214        /*
      130     9215          Try to start I/O to the channel
      131     9216                                                                                      */
      132     9217    1           GH$IO.CAS.FNC=%GH#IO_OTPCHNCTR;

   9217   1 00009E  6C05                                 LDV,R6   5
PL6.E3A0      #001=GDA$BOOT_INIT File=GDA$BOOT_INIT.:E05TSI                      TUE 07/29/97 21:20 Page:20   
          1 00009F  EAC7 0007                            SRM,R6,'003F'X    GH$IO,AUTO
          1 0000A1       003F

      133     9218    1           GH$IO.STATUS='4000'X;

   9218   1 0000A2  D870 4000                            LDR,R5   16384,IMO
          1 0000A4  DF47 0008                            STR,R5   GH$IO+1,AUTO

      134     9219    1           CALL GHH$IO(GH$IO) ALTRET(NAKANDSPLIT);

   9219   1 0000A6  EBC7 0007                            LAB,B6   GH$IO,AUTO
          1 0000A8  EFC7 0016                            STB,B6   GD$DWNLODLCT+8,AUTO
          1 0000AA  BBC7 0016                            LAB,B3   GD$DWNLODLCT+8,AUTO
          1 0000AC  CBF0 0100                            LAB,B4   256,IMO
          1 0000AE  E380 0000 0000  xent                 LNJ,B6   GHH$IO
          1 0000B1       001A                            DC       s:9237,PREL

      135     9220        /*
      136     9221          If the debugger init flag is set, we will wait here until the
      137     9222          host link comes up
      138     9223                                                                                      */
      139     9224    1           IF GD_DBG_INIT THEN

   9224   1 0000B2  8980 0000 0000  xsym                 CMZ      GD_DBG_INIT
          1 0000B5  0881 0012                            BAGE     s:9233,PREL

      140     9225    2           DO;

      141     9226    2              CALL GHH$LEV(INHIBIT_TO_60);

   9226   1 0000B7  BB80 0000 0000  02                   LAB,B3   0
          1 0000BA  CBF0 0100                            LAB,B4   256,IMO
          1 0000BC  E380 0000 0000  xent                 LNJ,B6   GHH$LEV
          1 0000BF       0001                            DC       s:9227,PREL

      142     9227    3              DO WHILE (GD_DATA.DELTAINFO.TSA$=ADDR(NIL));

PL6.E3A0      #001=GDA$BOOT_INIT File=GDA$BOOT_INIT.:E05TSI                      TUE 07/29/97 21:20 Page:21   
   9227   1 0000C0  0F81 0001                            B        s:9228,PREL

      143     9228    3                 END;

   9228   1 0000C2  EC80 0000 0000  xsym                 LDB,B6   GD$DELTA_DATA$
          1 0000C5  8DC6 0006                            CMN      6,B6
          1 0000C7  097B                                 BE       s:9228,SPREL

      144     9229    2              END;

      145     9230        /*
      146     9231           At this point we're all done
      147     9232                                                                                      */
      148     9233    1           RETURN;

   9233   1 0000C8  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      149     9234        /*
      150     9235           Come here when an I/O of some type has completed abnormally
      151     9236                                                                                      */
      152     9237    1   NAKANDSPLIT: GD_DATA.GDA.NAKCNT=GD_DATA.GDA.NAKCNT+1;

   9237   1 0000CB  EC80 0000 0000  xsym NAKANDSPLIT     LDB,B6   GD$DELTA_DATA$
          1 0000CE  8AC6 000C                            INC      12,B6

      153     9238    1   NOCANDO: ALTRETURN;

   9238   1 0000D0  C380 0000 0000  xent NOCANDO         LNJ,B4   X6A_AALT

      154     9239        %EJECT;
PL6.E3A0      #001=GDA$BOOT_INIT File=GDA$BOOT_INIT.:E05TSI                      TUE 07/29/97 21:20 Page:22   
      155     9240        /*F* NAME: GDA$INIT_DONE
      156     9241             PURPOSE: Called by BIGFOOT before exiting to the scheduler so
      157     9242                      the Debuger can check to see if it needs to be associated.
      158     9243             CALL: CALL GDA$INIT_DONE
      159     9244             DESCRIPTION: This routine check to see if the flag GD_DBG_MONINIT
      160     9245                          is set and then waits for the debugger to be
      161     9246                          associated.
      162     9247          */
      163     9248
      164     9249    1   GDA$INIT_DONE: ENTRY ALTRET;

   9249   1 0000D3  D380 0000 0000  xent GDA$INIT_DONE   LNJ,B5   X6A_AUTO_0
          1 0000D6       001A 0000                       DC       26,0

      165     9250
      166     9251    1           CALL GHH$ASD(G$WINDOW1$,G$MHJIT.ASDT_MON.BOBCAT);

   9251   1 0000D8  EC80 0000 0000  xsym                 LDB,B6   G$MHJIT$
          1 0000DB  DBC6 0036                            LAB,B5   54,B6
          1 0000DD  DFC7 0018                            STB,B5   GD$DWNLODLCT+10,AUTO
          1 0000DF  CB80 0000 0000  xsym                 LAB,B4   G$WINDOW1$
          1 0000E2  CFC7 0016                            STB,B4   GD$DWNLODLCT+8,AUTO
          1 0000E4  BBC7 0016                            LAB,B3   GD$DWNLODLCT+8,AUTO
          1 0000E6  CBF0 0200                            LAB,B4   512,IMO
          1 0000E8  E380 0000 0000  xent                 LNJ,B6   GHH$ASD
          1 0000EB       0001                            DC       s:9252,PREL

      167     9252    1           GD_DATA.GD.MUIS=G$BOBCAT.MUIS;

   9252   1 0000EC  EC80 0000 0000  xsym                 LDB,B6   GD$DELTA_DATA$
          1 0000EF  DC80 0000 0000  xsym                 LDB,B5   G$WINDOW1$
          1 0000F2  E845 000A                            LDR,R6   10,B5
          1 0000F4  EF46 016C                            STR,R6   364,B6

      168     9253    1           GD_DATA.GD.HIMEM=G$BOBCAT.MEM_HI;

   9253   1 0000F6  D845 0008                            LDR,R5   8,B5
PL6.E3A0      #001=GDA$BOOT_INIT File=GDA$BOOT_INIT.:E05TSI                      TUE 07/29/97 21:20 Page:23   
          1 0000F8  DF46 016D                            STR,R5   365,B6

      169     9254
      170     9255    1           WDOG=G$LOW_MEM.WDT_CURR;

   9255   1 0000FA  CC80 0000 0000  xsym                 LDB,B4   G$LOW_MEM$
          1 0000FD  C844 0017                            LDR,R4   23,B4
          1 0000FF  CF47 0006                            STR,R4   WDOG,AUTO

      171     9256    1           IF GD_DBG_MONINIT

   9256   1 000101  8980 0000 0000  xsym                 CMZ      GD_DBG_MONINIT
          1 000104  0881 0019                            BAGE     s:9264,PREL

      172     9257    2           THEN DO;

      173     9258    2              CALL GHH$LEV (INHIBIT_TO_60);

   9258   1 000106  BB80 0000 0000  02                   LAB,B3   0
          1 000109  CBF0 0100                            LAB,B4   256,IMO
          1 00010B  E380 0000 0000  xent                 LNJ,B6   GHH$LEV
          1 00010E       0001                            DC       s:9259,PREL

      174     9259    3              DO WHILE (GD_DATA.DELTAINFO.TSA$=ADDR(NIL));

   9259   1 00010F  0F81 0008                            B        s:9261,PREL

      175     9260    3                 G$LOW_MEM.WDT_CURR=WDOG;

   9260   1 000111  EC80 0000 0000  xsym                 LDB,B6   G$LOW_MEM$
          1 000114  E847 0006                            LDR,R6   WDOG,AUTO
          1 000116  EF46 0017                            STR,R6   23,B6

      176     9261    3                 END;

   9261   1 000118  EC80 0000 0000  xsym                 LDB,B6   GD$DELTA_DATA$
          1 00011B  8DC6 0006                            CMN      6,B6
PL6.E3A0      #001=GDA$BOOT_INIT File=GDA$BOOT_INIT.:E05TSI                      TUE 07/29/97 21:20 Page:24   
          1 00011D  0974                                 BE       s:9260,SPREL

      177     9262    2              END;

      178     9263
      179     9264    1           RETURN;

   9264   1 00011E  C380 0000 0000  xent                 LNJ,B4   X6A_ARET

      180     9265              %EJECT;
PL6.E3A0      #001=GDA$BOOT_INIT File=GDA$BOOT_INIT.:E05TSI                      TUE 07/29/97 21:20 Page:25   
      181     9266              /*F*  NAME:   GDA$USER_INIT
      182     9267                    PURPOSE: This routine is called to initialize the
      183     9268                             debugger for user debugging.
      184     9269                    CALL:    CALL GDA$USER_INIT;
      185     9270                    DESCRIPTION:  This routine sets up the debugger data
      186     9271                                  segment for user mode debugging
      187     9272                                  and then returns.  It will only
      188     9273                                  be called from GDB$FISRT_USER_TRAP.
      189     9274              */
      190     9275
      191     9276    1   GDA$USER_INIT: ENTRY ALTRET;

   9276   1 000121  D380 0000 0000  xent GDA$USER_INIT   LNJ,B5   X6A_AUTO_0
          1 000124       001A 0000                       DC       26,0

      192     9277        /*
      193     9278          Init the debuggers data segment, making sure not to trash the
      194     9279          stack pointer Peter worked so hard to setup for us.
      195     9280                                                                                      */
      196     9281    1           SAVEPTR=GD_DATA.DELTAINFO.STACK$;

   9281   1 000126  EC80 0000 0000  xsym                 LDB,B6   GD$DELTA_DATA$
          1 000129  DC86                                 LDB,B5   ,B6
          1 00012A  DFC7 0004                            STB,B5   SAVEPTR,AUTO

      197     9282    1           GD_DATA=GD_DATA_C;

   9282   1 00012C  AB80 0000 0000  xsym                 LAB,B2   GD_DATA_C
          1 00012F  2C00                                 LDV,R2   0
          1 000130  E870 0828                            LDR,R6   2088,IMO
          1 000132  BB86                                 LAB,B3   ,B6
          1 000133  3C00                                 LDV,R3   0
          1 000134  0008                                 MMM

      198     9283    1           GD_DATA.DELTAINFO.STACK$=SAVEPTR;

   9283   1 000135  DCC7 0004                            LDB,B5   SAVEPTR,AUTO
PL6.E3A0      #001=GDA$BOOT_INIT File=GDA$BOOT_INIT.:E05TSI                      TUE 07/29/97 21:20 Page:26   
          1 000137  CC80 0000 0000  xsym                 LDB,B4   GD$DELTA_DATA$
          1 00013A  DF84                                 STB,B5   ,B4

      199     9284    1           GD_DATA.GD.DYNSP$ = ADDR(GD_DATA.MYSPACE(0));

   9284   1 00013B  CC80 0000 0000  xsym                 LDB,B4   GD$DELTA_DATA$
          1 00013E  ABC4 01AE                            LAB,B2   430,B4
          1 000140  AFC4 0156                            STB,B2   342,B4

      200     9285        /*
      201     9286          Setup mode to indicate we are in user mode
      202     9287                                                                                      */
      203     9288    1           GD_DATA.GD.MODE=%GD#MODE_USER_DELTA;

   9288   1 000142  6C01                                 LDV,R6   1
          1 000143  EF44 0130                            STR,R6   304,B4

      204     9289        /*
      205     9290          Locate the segment descriptor for the window segment that
      206     9291          we will be using.
      207     9292        */
      208     9293    1           GD_DATA.GD.ASDT_WINDOW$ = ADDR(G$MHJIT.ASDT_MON.WINDOW1);

   9293   1 000145  9C80 0000 0000  xsym                 LDB,B1   G$MHJIT$
          1 000148  EBC1 0030                            LAB,B6   48,B1
          1 00014A  EFC4 017A                            STB,B6   378,B4

      209     9294    1           GD_DATA.GD.WINDOW$ = G$WINDOW1$;

   9294   1 00014C  BC80 0000 0000  xsym                 LDB,B3   G$WINDOW1$
          1 00014F  BFC4 017C                            STB,B3   380,B4

      210     9295
      211     9296    1           RETURN;

   9296   1 000151  C380 0000 0000  xent                 LNJ,B4   X6A_ARET
      212     9297    1   END GDA$BOOT_INIT;
PL6.E3A0      #001=GDA$BOOT_INIT File=GDA$BOOT_INIT.:E05TSI                      TUE 07/29/97 21:20 Page:27   

PL6.E3A0      #001=GDA$BOOT_INIT File=GDA$BOOT_INIT.:E05TSI                      TUE 07/29/97 21:20 Page:28   
--  Include file information  --

   KW_ALCT_E.:E05TOU  is referenced.
   KH$IO.:E05TOU  is referenced.
   KH$CHN.:E05TOU  is referenced.
   GDA$MACS_M.:E05TOU  is referenced.
   GH_IOFNC_E.:E05TOU  is referenced.
   GH_HARDWARE_M.:E05TOU  is referenced.
   GD$MSG_M.:E05TOU  is referenced.
   GDA_EQUS_E.:E05TOU  is referenced.
   GD_EQUS_E.:E05TOU  is referenced.
   GD_DATA_M.:E05TOU  is referenced.
   GD_STATIC_DATA.:E05TOU  cannot be made into a system file and is referenced.
   G$BOBCAT_M.:E05TOU  is referenced.
   G_HJIT_M.:E05TOU  is referenced.
   G_LCP6_E.:E05TOU  was found in the system file and is referenced.
   GT_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   KI_CP6.:E05TOU  was found in the system file and is never referenced.
   GF_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GM_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GU_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GJ_LCP6_M.:E05TOU  was found in the system file and is never referenced.
   GH_LCP6_M.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure GDA$BOOT_INIT.
PL6.E3A0      #001=GDA$BOOT_INIT File=GDA$BOOT_INIT.:E05TSI                      TUE 07/29/97 21:20 Page:29   

 **** Variables and constants ****

  ****  Section 000 RoData GDA$BOOT_INIT

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(16)    r     1 INHIBIT_TO_60

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     9-0-0/w STRC(80)    r     1 GD$DWNLODCCP               E-0-0/w STRC(112)   r     1 GD$DWNLODLCT
     7-0-0/w STRC(32)    r     1 GH$IO                      4-0-0/w PTR         r     1 SAVEPTR
     6-0-0/w UBIN(16)    r     1 WDOG

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 G$LOW_MEM$                 0-0-0/w PTR         r     1 G$MHJIT$
     0-0-0/w PTR         r     1 G$SATYR_RCVISA$            0-0-0/w PTR         r     1 G$SATYR_TRNISA$
     0-0-0/w PTR         r     1 G$WINDOW1$                 0-0-0/w PTR         r     1 GD$DELTA_DATA$
     0-0-0/w UBIN(10)    r     1 GD_CHN                     0-0-0/w STRC(16704) r     1 GD_DATA_C
     0-0-0/w BIT         r     1 GD_DBG_INIT                0-0-0/w BIT         r     1 GD_DBG_MONINIT
     0-0-0/w STRC(80)    r     1 GD_DWNLODCCP               0-0-0/w STRC(112)   r     1 GD_DWNLODLCT
     0-0-0/w UBIN(16)    r     1 GD_LINSPD

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
HexLoc.c.b A Datatyp(siz) R M Lvl/name                 HexLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(1696)  r     1 G$BOBCAT                   0-0-0/w STRC(4096)  r     1 G$LOW_MEM
PL6.E3A0      #001=GDA$BOOT_INIT File=GDA$BOOT_INIT.:E05TSI                      TUE 07/29/97 21:20 Page:30   
     0-0-0/w STRC(27232) r     1 G$MHJIT                    0-0-0/w STRC(720)   r     1 GDA_RCVISA
     0-0-0/w STRC(720)   r     1 GDA_TRNISA                 0-0-0/w STRC(16704) r     1 GD_DATA


   Procedure GDA$BOOT_INIT requires 340 words for executable code.
   Procedure GDA$BOOT_INIT requires 26 words of local(AUTO) storage.

    No errors detected in file GDA$BOOT_INIT.:E05TSI    .
PL6.E3A0      #001=GDA$BOOT_INIT File=GDA$BOOT_INIT.:E05TSI                      TUE 07/29/97 21:20 Page:31   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=GDA$BOOT_INIT File=GDA$BOOT_INIT.:E05TSI                      TUE 07/29/97 21:20 Page:32   
          MINI XREF LISTING

G$BOBCAT.MEM_HI
      1468**DCL      9253>>ASSIGN
G$BOBCAT.MUIS
      1469**DCL      9252>>ASSIGN
G$LOW_MEM.IV.IL$
      8396**DCL      8396--REDEF    9188<<ASSIGN   9189<<ASSIGN
G$LOW_MEM.IV.INT.I#00$
      8396**DCL      8396--REDEF
G$LOW_MEM.IV.INT.I#01$
      8396**DCL      8396--REDEF
G$LOW_MEM.IV.INT.I#02$
      8397**DCL      8397--REDEF
G$LOW_MEM.IV.INT.I#03$
      8397**DCL      8397--REDEF
G$LOW_MEM.IV.INT.I#04$
      8397**DCL      8398--REDEF
G$LOW_MEM.IV.INT.I#05$
      8398**DCL      8398--REDEF
G$LOW_MEM.IV.INT.I#61$
      8399**DCL      8399--REDEF
G$LOW_MEM.IV.INT.I#62$
      8399**DCL      8399--REDEF
G$LOW_MEM.IV.INT.I#63$
      8399**DCL      8399--REDEF
G$LOW_MEM.TV.T#01$
      8384**DCL      8384--REDEF
G$LOW_MEM.TV.T#02$
      8384**DCL      8384--REDEF
G$LOW_MEM.TV.T#03$
      8383**DCL      8383--REDEF
G$LOW_MEM.TV.T#05$
      8383**DCL      8383--REDEF
PL6.E3A0      #001=GDA$BOOT_INIT File=GDA$BOOT_INIT.:E05TSI                      TUE 07/29/97 21:20 Page:33   
G$LOW_MEM.TV.T#06$
      8382**DCL      8382--REDEF
G$LOW_MEM.TV.T#07$
      8382**DCL      8382--REDEF
G$LOW_MEM.TV.T#08$
      8381**DCL      8382--REDEF
G$LOW_MEM.TV.T#09$
      8381**DCL      8381--REDEF
G$LOW_MEM.TV.T#10$
      8381**DCL      8381--REDEF
G$LOW_MEM.TV.T#12$
      8380**DCL      8380--REDEF
G$LOW_MEM.TV.T#13$
      8380**DCL      8380--REDEF
G$LOW_MEM.TV.T#14$
      8379**DCL      8379--REDEF
G$LOW_MEM.TV.T#15$
      8379**DCL      8379--REDEF
G$LOW_MEM.TV.T#16$
      8378**DCL      8379--REDEF
G$LOW_MEM.TV.T#17$
      8378**DCL      8378--REDEF
G$LOW_MEM.TV.T#19$
      8377**DCL      8378--REDEF
G$LOW_MEM.TV.T#20$
      8377**DCL      8377--REDEF
G$LOW_MEM.TV.T#21$
      8377**DCL      8377--REDEF
G$LOW_MEM.TV.T#22$
      8376**DCL      8376--REDEF
G$LOW_MEM.TV.T#23$
      8376**DCL      8376--REDEF
G$LOW_MEM.TV.T#24$
      8375**DCL      8376--REDEF
G$LOW_MEM.TV.T#25$
      8375**DCL      8375--REDEF
PL6.E3A0      #001=GDA$BOOT_INIT File=GDA$BOOT_INIT.:E05TSI                      TUE 07/29/97 21:20 Page:34   
G$LOW_MEM.TV.T#26$
      8375**DCL      8375--REDEF
G$LOW_MEM.TV.T#27$
      8374**DCL      8374--REDEF
G$LOW_MEM.TV.T#28$
      8374**DCL      8374--REDEF
G$LOW_MEM.TV.T#29$
      8373**DCL      8374--REDEF
G$LOW_MEM.TV.T#30$
      8373**DCL      8373--REDEF
G$LOW_MEM.TV.T#31$
      8373**DCL      8373--REDEF
G$LOW_MEM.TV.T#32$
      8372**DCL      8372--REDEF
G$LOW_MEM.TV.T#33$
      8372**DCL      8372--REDEF
G$LOW_MEM.WDT_CURR
      8360**DCL      9255>>ASSIGN   9260<<ASSIGN
G$LOW_MEM$
      1464**DCL      8359--IMP-PTR  9188>>ASSIGN   9189>>ASSIGN   9255>>ASSIGN   9260>>ASSIGN
G$MHJIT.ASDT_MON.BOBCAT
      2123**DCL      9251<>CALL
G$MHJIT.ASDT_MON.WINDOW1
      2057**DCL      9178--ASSIGN   9293--ASSIGN
G$MHJIT.INTCON.HHJIT
      7959**DCL      7959--REDEF
G$MHJIT.INTCON.P$$
      7932**DCL      7932--REDEF
G$MHJIT.ISA_BIGFOOT.P$$
      4877**DCL      4877--REDEF
G$MHJIT.ISA_DBINH.P$$
      6091**DCL      6091--REDEF
G$MHJIT.ISA_IDLE.P$$
      2972**DCL      2972--REDEF
G$MHJIT.ISA_LVL10.P$$
      6394**DCL      6394--REDEF
PL6.E3A0      #001=GDA$BOOT_INIT File=GDA$BOOT_INIT.:E05TSI                      TUE 07/29/97 21:20 Page:35   
G$MHJIT.ISA_LVL11.P$$
      6697**DCL      6697--REDEF
G$MHJIT.ISA_LVL12.P$$
      7000**DCL      7000--REDEF
G$MHJIT.ISA_LVL5.P$$
      5180**DCL      5180--REDEF
G$MHJIT.ISA_OV.P$$
      4574**DCL      4574--REDEF
G$MHJIT.ISA_PFS.P$$
      4245**DCL      4245--REDEF
G$MHJIT.ISA_RT_CLOCK.P$$
      7607**DCL      7607--REDEF
G$MHJIT.ISA_SATYR_RCV.P$$
      5484**DCL      5484--REDEF
G$MHJIT.ISA_SATYR_TRN.P$$
      5788**DCL      5788--REDEF
G$MHJIT.ISA_SCHD.P$$
      7303**DCL      7303--REDEF
G$MHJIT.ISA_WDOG.P$$
      4353**DCL      4353--REDEF
G$MHJIT.TSA_DB.ISA.P$$
      3575**DCL      3575--REDEF
G$MHJIT.TSA_DB.P$$
      3446**DCL      3446--REDEF    3447--REDEF
G$MHJIT.TSA_HND.ISA.P$$
      8153**DCL      8153--REDEF
G$MHJIT.TSA_HND.P$$
      8024**DCL      8024--REDEF    8025--REDEF
G$MHJIT.TSA_MON.ISA.P$$
      3187**DCL      3187--REDEF
G$MHJIT.TSA_MON.P$$
      3058**DCL      3058--REDEF    3059--REDEF
G$MHJIT.TSA_OV.ISA.P$$
      3963**DCL      3963--REDEF
G$MHJIT.TSA_OV.P$$
      3834**DCL      3834--REDEF    3835--REDEF
PL6.E3A0      #001=GDA$BOOT_INIT File=GDA$BOOT_INIT.:E05TSI                      TUE 07/29/97 21:20 Page:36   
G$MHJIT$
      1465**DCL      1497--IMP-PTR  9178>>ASSIGN   9251>>CALL     9293>>ASSIGN
G$SATYR_RCVISA$
      8403**DCL      8484--IMP-PTR  9188>>ASSIGN
G$SATYR_TRNISA$
      8404**DCL      8787--IMP-PTR  9189>>ASSIGN
G$WINDOW1$
      1466**DCL      1468--IMP-PTR  9179>>ASSIGN   9251<>CALL     9252>>ASSIGN   9253>>ASSIGN   9294>>ASSIGN
GD$DELTA_DATA$
       621**DCL       635--IMP-PTR  9166>>ASSIGN   9167>>ASSIGN   9168>>ASSIGN   9169>>ASSIGN   9169>>ASSIGN
      9173>>ASSIGN   9178>>ASSIGN   9179>>ASSIGN   9227>>DOWHILE  9237>>ASSIGN   9237>>ASSIGN   9252>>ASSIGN
      9253>>ASSIGN   9259>>DOWHILE  9281>>ASSIGN   9282>>ASSIGN   9283>>ASSIGN   9284>>ASSIGN   9284>>ASSIGN
      9288>>ASSIGN   9293>>ASSIGN   9294>>ASSIGN
GD$DWNLODCCP
      9118**DCL      9200<<ASSIGN   9204<>CALL
GD$DWNLODCCP.CHN$
      9124**DCL      9202<<ASSIGN
GD$DWNLODLCT
      9141**DCL      9201<<ASSIGN   9205<>CALL
GD$DWNLODLCT.CHN$
      9147**DCL      9203<<ASSIGN
GDA_RCVISA.DEV.CHN
      8510**DCL      9188--ASSIGN
GDA_RCVISA.P$$
      8561**DCL      8561--REDEF
GDA_TRNISA.DEV.CHN
      8813**DCL      9189--ASSIGN
GDA_TRNISA.P$$
      8864**DCL      8864--REDEF
GD_CHN
      8405**DCL      9192>>IF       9202--ASSIGN   9203--ASSIGN   9209>>ASSIGN
GD_DATA
       635**DCL      9167<<ASSIGN   9282<<ASSIGN
GD_DATA.DELTAINFO.STACK$
       635**DCL      9166>>ASSIGN   9168<<ASSIGN   9281>>ASSIGN   9283<<ASSIGN
GD_DATA.DELTAINFO.TSA$
PL6.E3A0      #001=GDA$BOOT_INIT File=GDA$BOOT_INIT.:E05TSI                      TUE 07/29/97 21:20 Page:37   
       635**DCL      9227>>DOWHILE  9259>>DOWHILE
GD_DATA.GD.ASDT_WINDOW$
       657**DCL      9178<<ASSIGN   9293<<ASSIGN
GD_DATA.GD.DYNSP$
       648**DCL       648--REDEF    9169<<ASSIGN   9284<<ASSIGN
GD_DATA.GD.HIMEM
       655**DCL      9253<<ASSIGN
GD_DATA.GD.MODE
       638**DCL      9173<<ASSIGN   9288<<ASSIGN
GD_DATA.GD.MUIS
       655**DCL      9252<<ASSIGN
GD_DATA.GD.STEP_BRKPNT.ADR$
       649**DCL       650--REDEF
GD_DATA.GD.STEP_BRKPNT.START$
       650**DCL       650--REDEF
GD_DATA.GD.WINDOW$
       657**DCL      9179<<ASSIGN   9294<<ASSIGN
GD_DATA.GDA.NAKCNT
       637**DCL      9237<<ASSIGN   9237>>ASSIGN
GD_DATA.MYSPACE
       666**DCL      9169--ASSIGN   9284--ASSIGN
GD_DATA_C
      1431**DCL      9167>>ASSIGN   9282>>ASSIGN
GD_DATA_C.GD.DYNSP$
      1444**DCL      1444--REDEF
GD_DATA_C.GD.STEP_BRKPNT.ADR$
      1445**DCL      1446--REDEF
GD_DATA_C.GD.STEP_BRKPNT.START$
      1446**DCL      1446--REDEF
GD_DBG_INIT
      8407**DCL      9224>>IF
GD_DBG_MONINIT
      8408**DCL      9256>>IF
GD_DWNLODCCP
      8423**DCL      9200>>ASSIGN
GD_DWNLODLCT
PL6.E3A0      #001=GDA$BOOT_INIT File=GDA$BOOT_INIT.:E05TSI                      TUE 07/29/97 21:20 Page:38   
      8446**DCL      9201>>ASSIGN
GD_LINSPD
      8406**DCL      9211>>ASSIGN
GH$IO
      9099**DCL      9213<>CALL     9219<>CALL
GH$IO.CAS.CHN
      9099**DCL      9099--REDEF    9209<<ASSIGN
GH$IO.CAS.FNC
      9100**DCL      9210<<ASSIGN   9217<<ASSIGN
GH$IO.DAS
      9100**DCL      9101--REDEF    9102--REDEF
GH$IO.DAS.LCTADR
      9101**DCL      9212<<ASSIGN
GH$IO.DAS.LCTDAT
      9100**DCL      9211<<ASSIGN
GH$IO.STATUS
      9102**DCL      9218<<ASSIGN
GHH$ASD
      9154**DCL-ENT  9251--CALL
GHH$IO
      9155**DCL-ENT  9213--CALL     9219--CALL
GHH$LEV
      9156**DCL-ENT  9226--CALL     9258--CALL
INHIBIT_TO_60
      9085**DCL      9226<>CALL     9258<>CALL
KHI$DWNLODCCP
      9152**DCL-ENT  9204--CALL
KHI$DWNLODLCT
      9153**DCL-ENT  9205--CALL
NAKANDSPLIT
      9237**LABEL    9213--CALLALT  9219--CALLALT
NOCANDO
      9238**LABEL    9204--CALLALT  9205--CALLALT
SAVEPTR
      9064**DCL      9166<<ASSIGN   9168>>ASSIGN   9281<<ASSIGN   9283>>ASSIGN
WDOG
PL6.E3A0      #001=GDA$BOOT_INIT File=GDA$BOOT_INIT.:E05TSI                      TUE 07/29/97 21:20 Page:39   
      9065**DCL      9255<<ASSIGN   9260>>ASSIGN
