/*M* BEAMF - version of BEAM that BEAMs to files! */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* DMR,PLM=5,IND=3,CTI=3,SDI=3,MCL=10,CSI=0,ECI=0 */
                                   /*
                                        Author: John Stewart,Carleton
                                        Date: 2/87
                                                                  */
%SET LISTSUB='1'B;
 
 
BEAM_TO_FILE: PROC MAIN NOAUTO;
 
%INCLUDE CP_6;
%INCLUDE CP_6_SUBS;
%INCLUDE FM$FIT;
 
/* ********************************************************************\
*                                                                      *
*   FPTS                                                               *
*                                                                      *
\******************************************************************** */
 
%FPT_OPEN(FPTN=OPEN_INP,
          FPARAM=FPARAMT,
          DCB=F$INP,
          FUN=IN,
          ACS=SEQUEN);
 
%FPT_OPEN(FPTN=OPEN_OUT,
          DCB=F$OUT,
          ORG=CONSEC,
          ACS=SEQUEN);
 
%FPT_OPEN(FPTN=OPEN_DO,
          DCB=M$DO,
          FUN=CREATE);
 
%FPT_OPEN(FPTN=OPEN_LO,
          DCB=M$LO,
          FUN=CREATE);
 
%FPT_WRITE(FPTN=WRITE_OUT,
           DCB=F$OUT,
           BUF=SOBUF);
 
%FPT_WRITE(FPTN=WRITE_LO,
           DCB=M$LO,
           BUF=SOBUF);
 
%FPT_READ(FPTN=READ_INP,
          DCB=F$INP,
          BUF=INBUF);
 
%FPT_READ(FPTN=READ_ME,
          DCB=M$ME,
          BUF=SOBUF);
 
%FPT_CLOSE(FPTN=CLOSE_INP,
           DCB=F$INP,
           DISP=SAVE);
 
%FPT_CLOSE(FPTN=CLOSE_OUT,
           DCB=F$OUT,
           DISP=SAVE);
 
%FPT_CLOSE(FPTN=CLOSE_DO,
           DCB=M$DO,
           DISP=SAVE);
 
%FPT_CLOSE(FPTN=CLOSE_LO,
           DCB=M$LO,
           DISP=SAVE);
 
%FPT_ERRMSG(FPTN=SYS_ERR,
            BUF=SIBUF,
            CODE=ERRCODE,
            OUTDCB1=M$DO,
            SUBFN=YES,
            SUBAC=YES,
            SUBDC=NO,
            SUBSN=NO,
            RESULTS=VLR_ERRMSG,
            SUBMESS=YES);
 
%FPT_ERRMSG(FPTN=PRG_ERR,
            BUF=SIBUF,
            CODE=ERRCODE,
            FILENAME=WHATNAME,
            FILEACCT=WHATACCT,
            OUTDCB1=M$DO,
            INCLCODE=NO,
            SUBFN=NO,
            SUBAC=NO,
            SUBSN=NO,
            SUBDC=NO,
            RESULTS=VLR_ERRMSG,
            SUBMESS=YES);
 
%VLR_ERRMSG;
 
%VLP_NAME(FPTN=WHATNAME,
          LEN=31,
          NAME='                               ');
 
%VLP_ACCT(FPTN=WHATACCT,
          ACCT="':SYS    '");
 
%FPT_CORRES(FPTN=LOEQDO,
            DCB1=M$DO,
            DCB2=M$LO);
 
%F$DCB(DCBN=DUMMY);
 
%B$TCB;
 
%B$EXCFR;
 
/* ********************************************************************\
*                                                                      *
*   DCBs                                                               *
*                                                                      *
\******************************************************************** */
 
DCL F$INP                          DCB;
DCL F$OUT                          DCB;
DCL M$LO                           DCB;
DCL M$DO                           DCB;
DCL M$ME                           DCB;
DCL M$LM                           DCB;
 
/* ********************************************************************\
*                                                                      *
*   Working Storage.                                                   *
*                                                                      *
\******************************************************************** */
 
DCL ALT_OUT                        BIT(72);
DCL B$TCB$ SYMREF                  PTR;
 
DCL FPARAMT STATIC                 CHAR(4096);
DCL SIBUF STATIC                   CHAR(256);
DCL SOBUF STATIC                   CHAR(80);
DCL INPFID STATIC                  CHAR(64);
DCL RANREL STATIC                  CHAR(4);
 
DCL ARS                            SBIN;
DCL I                              SBIN;
DCL J                              SBIN;
DCL OUTPTR                         SBIN;
DCL INPPTR                         SBIN;
DCL INPLIM                         SBIN;
DCL RECCNT                         SBIN;
DCL FILEORG                        SBIN;
DCL BINMODE                        SBIN;
DCL ERRCODE STATIC                 SBIN;
DCL SYSCODE REDEF ERRCODE          BIT(36);
 
DCL DVBYTE                         BIT(9);
DCL CHBYTE REDEF DVBYTE            CHAR(1);
 
    %FM$FIT;
    %CODE03;
 
DCL 1 INBUF STATIC,
       2 *                          CHAR(8192),
       2 *                          CHAR(8192),
       2 *                          CHAR(8192),
       2 *                          CHAR(8192);
 
DCL 1 KEYBUF STATIC,
       2 L UNAL                     UBIN(9),
       2 C UNAL                     CHAR(255);
 
%EJECT;
/* ********************************************************************\
*                                                                      *
*   Fetch and decode command.                                          *
*                                                                      *
\******************************************************************** */
 
     WHATACCT.ACCT#=DCBADDR(DCBNUM(M$LM))->DUMMY.ACCT#;
     IF WHATACCT.ACCT#<='        ' THEN
        WHATACCT.ACCT#=':SYS    ';
     WHATNAME=DCBADDR(DCBNUM(M$LM))->DUMMY.NAME#;
     ERRCODE=0;
     CALL M$OPEN(OPEN_LO);
     IF NOT DCBADDR(DCBNUM(M$DO))->DUMMY.FCD# THEN
        CALL M$OPEN(OPEN_DO);
     CALL M$CORRES(LOEQDO) ALTRET(LOISDO);
     SYS_ERR.V.OUTDCB2#=DCBNUM(M$LO);
     PRG_ERR.V.OUTDCB2#=DCBNUM(M$LO);
 
LOISDO:
     INPFID = DCBADDR (DCBNUM (F$INP)) -> DUMMY.NAME#.C;
 
%EJECT;
/* ********************************************************************\
*                                                                      *
*   Decode FIDs and open files...and away we go!                       *
*                                                                      *
\******************************************************************** */
 
     CALL M$OPEN(OPEN_INP) ALTRET(ERR_INP);
     CALL M$OPEN(OPEN_OUT) ALTRET(ERR_OUT);
     REMEMBER ERR_OUT IN ALT_OUT;
     RECCNT=3;
     DO J=1 TO ADDR(FPARAMT)->FM$FIT.CODES.CODE(0);
        IF ADDR(FPARAMT)->FM$FIT.CODES.CODE(J)=3 THEN
           GOTO GOT_CD3;
        END;
     GOTO ERR_FIT;
 
GOT_CD3:
     FILEORG=PINCRW(ADDR(FPARAMT),ADDR(FPARAMT)->FM$FIT.CODES.ITEMX(J))
        ->CODE03.ORG;
 
%EJECT;
/* ********************************************************************\
*                                                                      *
*   Write boilerplate to output "file", then copy FPARAM table.        *
*                                                                      *
\******************************************************************** */
 
     CALL CONCAT(SOBUF,'!MAEB.X  CR OVER ',INPFID);
     CALL M$WRITE(WRITE_OUT) ALTRET(ERR_OUT);
     SOBUF='F';
     OUTPTR=1;
     INPLIM=ADDR(FPARAMT)->FM$FIT.CODES.NAW(0)*4;
     CALL REFORM(FPARAMT,INPLIM,'@') ALTRET(ERR_INT);
     IF OUTPTR>1 THEN
        CALL STUFF;
     SOBUF='D';
     OUTPTR=1;
 
%EJECT;
/* ********************************************************************\
*                                                                      *
*   The type of processing called for depends on the file's ORG.       *
*   CONSEC, UR, INDEXED, and TERMINAL files need only be copied        *
*   to F$OUT with variable-length records; maximum input record        *
*   size is 32K.  KEYED files are also variable-length records         *
*   of 32K or less, but the key of each record must be fetched and     *
*   transmitted.  A RANDOM file has fixed-length records of 4092       *
*   bytes, but has "keys", too.  Finally, a RELATIVE file has          *
*   fixed-length records of CODE03.RECL bytes and keys.  All           *
*   other file organizations are illegal.                              *
*                                                                      *
\******************************************************************** */
 
     DO CASE(FILEORG);
 
     CASE(%CONSEC#,%UR#,%INDEXED#,%TERMINAL#);
        ;
 
     CASE(%KEYED#);
 
        READ_INP.V.KEYR#='1'B;
        READ_INP.KEY_=VECTOR(KEYBUF);
 
     CASE(%RANDOM#);
 
        READ_INP.V.KEYR#='1'B;
        READ_INP.KEY_=VECTOR(RANREL);
        READ_INP.BUF_.BOUND=4091;
 
     CASE(%RELATIVE#);
 
        READ_INP.V.KEYR#='1'B;
        READ_INP.KEY_=VECTOR(RANREL);
        READ_INP.BUF_.BOUND=PINCRW(ADDR(FPARAMT),ADDR(FPARAMT)->
           FM$FIT.CODES.ITEMX(J))->CODE03.RECL-1;
 
     CASE(%IDS#);
 
        READ_INP.V.KEYR#='1'B;
        READ_INP.KEY_=VECTOR(RANREL);
        READ_INP.BUF_.BOUND=4095;
        READ_INP.V.FULL#='1'B;
 
     CASE(ELSE) /* All other codes are illegal! */;
 
        GOTO ERR_UFT;
 
     END;
 
READ_DATA:
     DO WHILE('1'B);
        CALL M$READ(READ_INP) ALTRET(ERR_INP);
        ARS=DCBADDR(DCBNUM(F$INP))->DUMMY.ARS#;
        DO SELECT FILEORG;
        SELECT (%KEYED#);
           INPLIM=KEYBUF.L;
           CALL REFORM(SUBSTR(KEYBUF.C,0,INPLIM),INPLIM,' ')
              ALTRET(ERR_INT);
        SELECT (%RANDOM#,%RELATIVE#,%IDS#);
           INPLIM=4;
           CALL REFORM(RANREL,INPLIM,' ') ALTRET (ERR_INT);
        SELECT (%UR#);
           DVBYTE=DCBADDR(DCBNUM(F$INP))->DUMMY.DVBYTE;
           CALL REFORM(CHBYTE,1,' ');
        END;
        CALL REFORM(INBUF,ARS,'@') ALTRET(ERR_INT);
        END;
 
EOFSI:
     IF OUTPTR>1 THEN
        CALL STUFF;
     SOBUF='!END';
     CALL M$WRITE(WRITE_OUT) ALTRET(ERR_OUT);
     CALL M$CLOSE (CLOSE_OUT);
     CALL M$CLOSE (CLOSE_INP);
     CALL M$CLOSE(CLOSE_LO);
     CALL M$CLOSE(CLOSE_DO);
     RETURN;
 
%EJECT;
/* ********************************************************************\
*                                                                      *
*   REFORM reformats BFR of length LEN into output format, supplying   *
*   control bytes as required.  CCH is the base control byte, and is   *
*   used to indicate whether the record is data ('@' or greater) or    *
*   a key (less than '@').  Formats are as follows:                    *
*                                                                      *
*   Col Contents                                                       *
*   --- --------                                                       *
*     1 'F' if this is an FPARAM table; otherwise 'D'                  *
*     2 Number of significant data bytes in this record plus '040'O    *
*       (range is 1 to 78).                                            *
*   3-n Data and/or key bytes, each field is preceeded by a control    *
*       sequence of one to three bytes:                                *
*                                                                      *
*   Keys longer than 15 bytes (long keys):                             *
*                                                                      *
*        0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8                           *
*       +-----------------+-----------------+                          *
*       |0 0|0 1|1|0 0|Len|0 0|  Len+'40'O  |                          *
*       +-----------------+-----------------+                          *
*             ^  ^      ^            ^                                 *
*             |  |      |            +-Low order 6 bits of key length  *
*             |  |      +-High order 2 bits of key length              *
*             |  +-Indicates long key                                  *
*             +-Indicates key follows                                  *
*                                                                      *
*   Keys of length 1 to 15 bytes (short keys):                         *
*                                                                      *
*        0 1 2 3 4 5 6 7 8                                             *
*       +-----------------+                                            *
*       |0 0|0 1|0|  Len  |                                            *
*       +-----------------+                                            *
*             ^  ^    ^                                                *
*             |  |    +-Key length                                     *
*             |  +-Indicates short key                                 *
*             +-Indicates key follows                                  *
*                                                                      *
*   Data longer than 512 bytes (long data):                            *
*                                                                      *
*        0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8         *
*       +-----------------+-----------------+-----------------+        *
*       |0 0|1|b|0 0| Len |0 0|  Len+'40'O  |0 0|  Len+'40'O  |        *
*       +-----------------+-----------------+-----------------+        *
*            ^ ^  ^    ^             ^                 ^               *
*            | |  |    |             |                 +-Low order 6   *
*            | |  |    |             |                   bits of data  *
*            | |  |    |             |                   length        *
*            | |  |    |             +-Middle 6 bits of data length    *
*            | |  |    +-High order 3 bits of data length              *
*            | |  +-Indicates long data                                *
*            | +-If set, data are encoded, otherwise clear             *
*            +-Indicates data follows                                  *
*                                                                      *
*   Data of length 16 to 512 bytes (medium data):                      *
*                                                                      *
*        0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8                           *
*       +-----------------+-----------------+                          *
*       |0 0|1|b|0 1| Len |0 0|  Len+'40'O  |                          *
*       +-----------------+-----------------+                          *
*            ^ ^  ^    ^             ^                                 *
*            | |  |    |             +-Low order 6 bits of data length *
*            | |  |    +-High order 3 bits of data length              *
*            | |  +-Indicates medium data                              *
*            | +-If set, data are encoded, otherwise clear             *
*            +-Indicates data follows                                  *
*                                                                      *
*   Data of length 1 to 15 bytes (short data):                         *
*                                                                      *
*        0 1 2 3 4 5 6 7 8                                             *
*       +-----------------+                                            *
*       |0 0|1|b|1|  Len  |                                            *
*       +-----------------+                                            *
*            ^ ^ ^    ^                                                *
*            | | |    +-Data length                                    *
*            | | +-Indicates short data                                *
*            | +-If set, data are encoded, otherwise clear             *
*            +-Indicates data follows                                  *
*                                                                      *
*   Note:  The length fields of all data control words represent       *
*   the length of the data minus one; zero length records are          *
*   indicated by the special code of '137'O (underscore).              *
*                                                                      *
*   Keys are always encoded.  If the "b" bit is set, the data that     *
*   follows are encoded, otherwise, the data are transmitted "as is".  *
*   "as is" data contains only printable 95-character set ASCII        *
*   graphics (range '040'O to '176'O).  The format for encoded data    *
*   is as follows:                                                     *
*                                                                      *
*        0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8 0 1 2 3 4 5 6 7 8         *
*       +-----------------+-----------------+-----------------+        *
*       |0 0| Data+'40'O  |0 0| Data+'40'O  |0 0| Data+'40'O  |        *
*       +-----------------+-----------------+-----------------+        *
*                  ^                 ^                 ^               *
*                  |                 |                 +-Low order 6   *
*                  |                 |                   bits of 2nd   *
*                  |                 |                   byte          *
*                  |                 +-Low order 3 bits of 1st byte    *
*                  |                   shifted left 3 bits plus high   *
*                  |                   order 3 bits of 2nd byte        *
*                  +-High order 6 bits of 1st byte                     *
*                                                                      *
*   If the record has an odd number of bytes, the last byte contains   *
*   zeros.                                                             *
*                                                                      *
\******************************************************************** */
 
REFORM: PROC(BFR,LEN,CCH) ALTRET;
DCL LEN                            SBIN;
DCL BFR                            CHAR(LEN);
DCL CCH                            CHAR(1);
DCL I                              SBIN;
DCL J                              SBIN;
DCL 1 BADCHARS CONSTANT ALIGNED,
       2 *(0:31) BIT(9) UNAL INIT('111'O*32),
       2 *(0:31) BIT(9) UNAL INIT('000'O*32),
       2 *(0:31) BIT(9) UNAL INIT('000'O*32),
       2 *(0:31) BIT(9) UNAL INIT('000'O*31,'111'O),
       2 *(0:31) BIT(9) UNAL INIT('111'O*32),
       2 *(0:31) BIT(9) UNAL INIT('111'O*32),
       2 *(0:31) BIT(9) UNAL INIT('111'O*32),
       2 *(0:31) BIT(9) UNAL INIT('111'O*32),
       2 *(0:31) BIT(9) UNAL INIT('111'O*32),
       2 *(0:31) BIT(9) UNAL INIT('111'O*32),
       2 *(0:31) BIT(9) UNAL INIT('111'O*32),
       2 *(0:31) BIT(9) UNAL INIT('111'O*32),
       2 *(0:31) BIT(9) UNAL INIT('111'O*32),
       2 *(0:31) BIT(9) UNAL INIT('111'O*32),
       2 *(0:31) BIT(9) UNAL INIT('111'O*32),
       2 *(0:31) BIT(9) UNAL INIT('111'O*32);
 
     INPPTR=0;
     IF CCH<'@' THEN DO;
        IF LEN<1 OR LEN>255 THEN
           ALTRETURN;
        IF LEN<16 THEN DO;
           OUTPTR=OUTPTR+1;
           IF OUTPTR>79 THEN
              CALL STUFF;
           CALL INSERT(SOBUF,OUTPTR,1,BINASC(LEN+32));
           END;
        ELSE DO;
           OUTPTR=OUTPTR+1;
           IF OUTPTR>79 THEN
              CALL STUFF;
           CALL INSERT(SOBUF,OUTPTR,1,BINASC(LEN/64+48));
           OUTPTR=OUTPTR+1;
           IF OUTPTR>79 THEN
              CALL STUFF;
           CALL INSERT(SOBUF,OUTPTR,1,BINASC(MOD(LEN,64)+32));
           END;
        BINMODE=32;
        END;
     ELSE DO;
        IF LEN<0 OR LEN>32768 THEN
           ALTRETURN;
        IF LEN=0 THEN DO;
           OUTPTR=OUTPTR+1;
           IF OUTPTR>79 THEN
              CALL STUFF;
           CALL INSERT(SOBUF,OUTPTR,1,'_');
           END;
        ELSE DO;
           CALL SEARCH(I,J,BADCHARS,SUBSTR(BFR,0,LEN));
           IF J>0 THEN
              BINMODE=32;
           ELSE
              BINMODE=0;
           J=LEN-1;
           IF LEN<16 THEN DO;
              OUTPTR=OUTPTR+1;
              IF OUTPTR>79 THEN
                 CALL STUFF;
              CALL INSERT(SOBUF,OUTPTR,1,BINASC(BINMODE+J+80));
              END;
           ELSE IF LEN<513 THEN DO;
                 OUTPTR=OUTPTR+1;
                 IF OUTPTR>79 THEN
                    CALL STUFF;
                 CALL INSERT(SOBUF,OUTPTR,1,BINASC(BINMODE+J/64+72));
                 OUTPTR=OUTPTR+1;
                 IF OUTPTR>79 THEN
                    CALL STUFF;
                 CALL INSERT(SOBUF,OUTPTR,1,BINASC(MOD(J,64)+32));
                 END;
              ELSE DO;
                 OUTPTR=OUTPTR+1;
                 IF OUTPTR>79 THEN
                    CALL STUFF;
                 CALL INSERT(SOBUF,OUTPTR,1,BINASC(BINMODE+J/4096+64));
                 OUTPTR=OUTPTR+1;
                 IF OUTPTR>79 THEN
                    CALL STUFF;
                 CALL INSERT(SOBUF,OUTPTR,1,BINASC(MOD(J,4096)/64+32));
                 OUTPTR=OUTPTR+1;
                 IF OUTPTR>79 THEN
                    CALL STUFF;
                 CALL INSERT(SOBUF,OUTPTR,1,BINASC(MOD(J,64)+32));
                 END;
           END;
        END;
     IF BINMODE>0 THEN DO;
        J=LEN/2;
        DO I=1 TO J;
           OUTPTR=OUTPTR+1;
           IF OUTPTR>79 THEN
              CALL STUFF;
           CALL INSERT(SOBUF,OUTPTR,1,BINASC(ASCBIN(SUBSTR(BFR,INPPTR,1))/8
              +32));
           OUTPTR=OUTPTR+1;
           IF OUTPTR>79 THEN
              CALL STUFF;
           CALL INSERT(SOBUF,OUTPTR,1,BINASC(MOD(ASCBIN(SUBSTR(BFR,INPPTR,1)),
              8)*8+32+ASCBIN(SUBSTR(BFR,INPPTR+1,1))/64));
           INPPTR=INPPTR+1;
           OUTPTR=OUTPTR+1;
           IF OUTPTR>79 THEN
              CALL STUFF;
           CALL INSERT(SOBUF,OUTPTR,1,BINASC(MOD(ASCBIN(SUBSTR(BFR,INPPTR,
              1)),64)+32));
           INPPTR=INPPTR+1;
           END;
        IF 2*J~=LEN THEN DO;
           OUTPTR=OUTPTR+1;
           IF OUTPTR>79 THEN
              CALL STUFF;
           CALL INSERT(SOBUF,OUTPTR,1,BINASC(ASCBIN(SUBSTR(BFR,INPPTR,
              1))/8+32));
           OUTPTR=OUTPTR+1;
           IF OUTPTR>79 THEN
              CALL STUFF;
           CALL INSERT(SOBUF,OUTPTR,1,BINASC(MOD(ASCBIN(SUBSTR(BFR,INPPTR,
              1)),8)*8+32));
           OUTPTR=OUTPTR+1;
           IF OUTPTR>79 THEN
              CALL STUFF;
           CALL INSERT(SOBUF,OUTPTR,1,BINASC(32));
           INPPTR=INPPTR+1;
           END;
        END;
     ELSE DO;
        I=0;
        DO WHILE(I<LEN);
           OUTPTR=OUTPTR+1;
           IF OUTPTR>79 THEN
              CALL STUFF;
           IF LEN-I<=80-OUTPTR THEN DO;
              J=LEN-I;
              CALL INSERT(SOBUF,OUTPTR,J,SUBSTR(BFR,I,J));
              OUTPTR=OUTPTR+J-1;
              I=LEN;
              END;
           ELSE DO;
              J=80-OUTPTR;
              CALL INSERT(SOBUF,OUTPTR,J,SUBSTR(BFR,I,J));
              OUTPTR=79;
              I=I+J;
              END;
           END;
        INPPTR=LEN;
        END;
     RETURN;
END;
 
%EJECT;
/* ********************************************************************\
*                                                                      *
*   STUFF writes out SOBUF, clears it (except column 1) and resets     *
*   OUTPTR to point to column 2, or the next column available for      *
*   data.  If OUTPTR exceeds 79 upon entry, it is set to 79.           *
*   STUFF also computes the record length byte (column 1).  If an      *
*   error occurs on the write we unwind to the output error handler.   *
*                                                                      *
\******************************************************************** */
 
STUFF: PROC;
     IF OUTPTR>79 THEN
        OUTPTR=79;
     CALL INSERT(SOBUF,1,1,BINASC(OUTPTR+31));
     CALL M$WRITE(WRITE_OUT) ALTRET(BAD_OUT);
     CALL INSERT(SOBUF,1,79,' ');
     OUTPTR=2;
     RECCNT=RECCNT+1;
     RETURN;
 
BAD_OUT:
     UNWIND TO ALT_OUT;
END;
 
%EJECT;
/* ********************************************************************\
*                                                                      *
*   Error handlers.                                                    *
*                                                                      *
\******************************************************************** */
 
ERR_INT:
          /*E*   ERROR:    -4-4
               MESSAGE:  This is an internal bug.  You should not see this.
                         Help me! Help me! Help me! Help me!
          */
     ERRCODE=ERRCODE+1;
 
ERR_FIT:
          /*E*   ERROR:    -3-4
               MESSAGE:  Huh? Your FIT does not have a CODE03 entry.
                         I cannot BEAM a file unless I know what kind it is.
          */
     ERRCODE=ERRCODE+1;
 
ERR_UFT:
          /*E*   ERROR:    -2-4
               MESSAGE:  Sorry, can't BEAM that kind of file.
                         I can't do tape-type files.
          */
     ERRCODE=ERRCODE+1;
 
     ERRCODE=ERRCODE+1;
 
     ERRCODE=ERRCODE*8+4;
     CALL M$ERRMSG(PRG_ERR);
 
ABORTIT:
     IF DCBADDR(DCBNUM(F$INP))->DUMMY.FCD# THEN
        CALL M$CLOSE(CLOSE_INP);
     IF DCBADDR(DCBNUM(F$OUT))->DUMMY.FCD# THEN DO;
        CLOSE_OUT.V.DISP#=1;
        CALL M$CLOSE(CLOSE_OUT);
        END;
     CALL M$CLOSE(CLOSE_LO);
     CALL M$CLOSE(CLOSE_DO);
     RETURN;
 
ERR_INP:                                /* Error on input file                */
     IF DCBADDR(DCBNUM(F$INP))->DUMMY.TYC.EOF# OR
        DCBADDR(DCBNUM(F$INP))->DUMMY.TYC.EOD# THEN
        GOTO EOFSI;
     SYS_ERR.V.DCB#=DCBNUM(F$INP);
     SYSCODE=B$TCB$->B$TCB.ALT$->B$EXCFR.ERR;
     IF SYSCODE='061511400112'O OR /* FMI-M00009-2 (Unwritten RAN granule)    */
        SYSCODE='062427400112'O THEN    /* FTW-M00009-2 (Rec never written)   */
        GOTO READ_DATA;
     CALL M$ERRMSG(SYS_ERR);
     GOTO ABORTIT;
 
ERR_OUT:                                /* Error on output file               */
     SYS_ERR.V.DCB#=DCBNUM(F$OUT);
     SYSCODE=B$TCB$->B$TCB.ALT$->B$EXCFR.ERR;
     CALL M$ERRMSG(SYS_ERR);
     GOTO ABORTIT;
 
END;
