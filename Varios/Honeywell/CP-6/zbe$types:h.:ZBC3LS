

12:33 AUG 20 '97 zbe$types:h.:ZBC3TSI                                      1    
    1      /* $Header: types.h,v 1.5 87/03/25 10:53:47 ceriel Exp $ */
    2      /*
    3       * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
    4       * See the copyright notice in the ACK home directory, in the file "Copyright".
    5       */
    6      /* I N T E R N A L   D A T A S T R U C T U R E S   O F   E G O  */
    7
    8
    9      /* This file contains the definitions of the global data types.
   10       */
   11
   12
   13      /* TEMPORARY: */
   14      #define LONGOFF
   15
   16
   17      #define IDL 256 /* maximum identifier length */
   18      #define DYNAMIC 1
   19      #define NARGBYTES 14
   20      #define BMASK 0377
   21
   22      typedef struct argbytes argb_t;
   23      typedef char byte;
   24      typedef   byte  bool;
   25      typedef long offset;
   26      typedef short   obj_id;
   27      typedef short   proc_id;
   28      typedef short   dblock_id;
   29      typedef short   block_id;
   30      typedef short   loop_id;
   31      typedef short   lab_id;
   32
   33
   34      typedef struct dblock   *dblock_p;
   35      typedef struct obj   *obj_p;
   36      typedef struct proc     *proc_p;
   37      typedef struct loop     *loop_p;
12:33 AUG 20 '97 zbe$types:h.:ZBC3TSI                                      2    
   38      typedef struct change   *change_p;
   39      typedef struct use   *use_p;
   40      typedef struct bblock   *bblock_p;
   41      typedef struct line     *line_p;
   42      typedef struct line_table *line_table_p;
   43      typedef struct arg   *arg_p;
   44      typedef struct argbytes    *argb_p;
   45      typedef struct elemholder *elem_p;
   46      typedef struct elemholder *lset;
   47      typedef struct bitvector  *cset;
   48      typedef elem_p Lindex;
   49      typedef short  Cindex;
   50      typedef char   *Lelem_t;
   51      typedef short  Celem_t;
   52
   53      typedef union pext_t *pext_p;
   54      typedef union bext_t *bext_p;
   55      typedef union lpext_t *lpext_p;
   56
   57
   58      typedef struct call   *call_p;
   59      typedef struct formal *formal_p;
   60
   61      /* Used-Definition Analysis */
   62      typedef struct local *local_p;
   63
   64      typedef struct cond_tab *cond_p;
   65
   66      #define TRUE 1
   67      #define FALSE   0
   68
   69      /* DATABLOCKS */
   70
   71      /* A datablock is a block of global data, declared by means of
   72       * a hol, bss, con or rom pseudo. The declaration may be in a file
   73       * that is inaccessible to EGO, in which case the pseudo is unknown.
   74       * Successive rom or con pseudos that are garanteed to be in the
12:33 AUG 20 '97 zbe$types:h.:ZBC3TSI                                      3    
   75       * same fragment (according to the EM definition) share the
   76       * same fragment number.
   77       */
   78
   79      #define DHOL  0
   80      #define DBSS  1
   81      #define DROM  2
   82      #define DCON  3
   83      #define   DUNKNOWN 4
   84
   85      /*    The following table is used to keep tract of the lines
   86            that are associated with each of the procedures, and to
   87            make sure that they are in proper order.
   88      */
   89      struct line_table  {
   90            line_table_p lt_next;
   91            line_table_p lt_priv;
   92            line_p first_line;
   93            proc_p assoc_proc;
   94            } ;
   95
   96
   97      /* The following constants are used by the debugging tools: */
   98      #define D_FIRST DHOL
   99      #define D_LAST  DUNKNOWN
  100
  101
  102      struct dblock {
  103       dblock_id d_id;      /* unique integer       */
  104       byte   d_pseudo;  /* one of DHOL,DBSS,DROM,DCON,DUNKNOWN */
  105       offset    d_size; /* # bytes, -1 if unknown     */
  106       obj_p  d_objlist; /* list of objects of the data block   */
  107       byte   d_flags1;  /* see below            */
  108       byte   d_flags2;  /* free to be used by phases     */
  109       arg_p  d_values;  /* values, in case of ROM     */
  110       short  d_fragmnr; /* fragment number         */
  111       dblock_p d_next;  /* link to next block         */
12:33 AUG 20 '97 zbe$types:h.:ZBC3TSI                                      4    
  112      };
  113
  114
  115      #define DF_EXTERNAL   01 /* Is name visible outside its module? */
  116
  117      /* OBJECTS */
  118
  119      /* An object is a row of successive bytes in one datablock
  120       * that are considered to be a whole. E.g. scalar variables,
  121       * arrays, I/O buffers etc. are objects.
  122       */
  123
  124      struct obj {
  125       offset    o_off;     /* offset within the block    */
  126       offset    o_size; /* size of the object, 0 if not known  */
  127       obj_id    o_id;      /* unique integer       */
  128       dblock_p o_dblock;   /* backlink to data block     */
  129       short  o_globnr;  /* global variable number     */
  130       obj_p  o_next; /* link              */
  131      };
  132
  133
  134      /* PROCEDURES */
  135
  136      struct proc {
  137       proc_id   p_id;      /* unique integer       */
  138       short  p_nrlabels;   /* #instruction labels in the proc  */
  139       offset    p_localbytes; /* #bytes for locals       */
  140       offset    p_nrformals;  /* #bytes for formals         */
  141       byte   p_flags1;  /* see below            */
  142       byte   p_flags2;  /* free to be used by phases     */
  143       bblock_p p_start; /* pointer to first basic block     */
  144       cset   p_calling; /* set of all procs called by this one */
  145       lset   p_loops;   /* information about loops    */
  146       change_p p_change;   /* variables changed by this proc   */
  147       use_p  p_use;     /* variables used by this proc      */
  148       pext_p    p_extend;  /* pointer to any further information  */
12:33 AUG 20 '97 zbe$types:h.:ZBC3TSI                                      5    
  149       proc_p    p_next; /* link              */
  150      line_p p_line; /* first line for null basic blk procedure. */
  151      short p_bblock_count; /* number of basic blks in the procedure. */
  152      short p_instrs_count;  /* number of instructions in the block.  */
  153      short p_loops_count;  /* number of loops in this procedure. */
  154      line_p p_mes16;  /* holds a ptr to the mes16 instr for this procedure. */
  155      };
  156
  157
  158      union pext_t {
  159         struct pext_il {
  160       call_p    p_cals; /* candidate calls for in line expansion */
  161       short  p_size; /* length of proc (EM-instrs or bytes) */
  162       formal_p p_formals;  /* description of formals     */
  163       short  p_nrcalled;   /* # times proc is called (varying) */
  164       long   p_ccaddr;  /* address of calcnt info on disk   */
  165       line_p    p_laddr;   /* address in EM-text file on disk  */
  166       short  p_orglabels;  /* original #labels before substitution */
  167       offset    p_orglocals;  /* original #bytes for locals    */
  168         } px_il;
  169      } ;
  170
  171      #define PF_EXTERNAL   01 /* proc is externally visible */
  172      #define PF_BODYSEEN   02 /* body of proc is available as EM text */
  173      #define PF_CALUNKNOWN 04 /* proc calls an unavailable procedure */
  174      #define PF_ENVIRON 010   /* proc does a lxa or lxl */
  175      #define PF_LPI     020   /* proc may be called indirect */
  176      #define PF_CALINLOOP  040   /* proc ever called in a loop? (transitively) */
  177      #define PF_STATICFUNCTION 0100 /* static function indicator. */
  178
  179      #define CALLED_IN_LOOP(p)   p->p_flags1 |= PF_CALINLOOP
  180      #define IS_CALLED_IN_LOOP(p)   (p->p_flags1 & PF_CALINLOOP)
  181
  182
  183      /* LOOPS */
  184
  185       struct loop {
12:33 AUG 20 '97 zbe$types:h.:ZBC3TSI                                      6    
  186       loop_id   lp_id;     /* unique integer       */
  187       short  lp_level;  /* nesting level, 0=outermost loop,
  188                 * 1=loop within loop etc.    */
  189       bblock_p lp_entry;   /* unique entry block of loop    */
  190       bblock_p lp_end;  /* tail of back edge of natural loop   */
  191       lpext_p   lp_extend; /* pointer to any further information  */
  192      };
  193
  194
  195
  196      union lpext_t {
  197         struct lpext_cf {
  198       lset   lpx_blocks;
  199       short  lpx_count;
  200       bool   lpx_messy;
  201         } lpx_cf;
  202         struct lpext_sr {
  203       lset   lpx_blocks;   /* basic blocks  constituting the loop  */
  204       bblock_p lpx_header; /* header block, 0 if no one allocated yet */
  205       bool   lpx_done;  /* TRUE if we've processed this loop   */
  206       line_p    lpx_instr; /* current last instruction in header block*/
  207         } lpx_sr;
  208         struct lpext_ra {
  209       lset   lpx_blocks;   /* basic blocks  constituting the loop  */
  210       bblock_p lpx_header; /* header block, 0 if no one allocated yet */
  211         } lpx_ra;
  212         struct lpext_ie {
  213       lset  lpx_blocks;  /* basic lbocks constituting the loop. */
  214       bblock_p lpx_header;  /* header block of the loop. */
  215       bool  lpx_done;  /* done processing the loop. */
  216       bool  lpx_cal;   /* loop has external call or killer ptr stuff. */
  217       line_p  lpx_instr;  /* last instr of the header block. */
  218       cset lpx_def;  /* defs gened in the loop. */
  219       cset lpx_ref;  /* refs gened in the loop. */
  220       cset lpx_ddef; /* ddefs set in the loop. */
  221       cset lpx_boe;  /* boe  used  in the loop. */
  222       cset lpx_kill;  /* kill of vars in the loop. */
12:33 AUG 20 '97 zbe$types:h.:ZBC3TSI                                      7    
  223         }  lpx_ie;
  224      } ;
  225
  226      /* CHANGED/USED VARIABLES INFORMATION */
  227
  228
  229      struct change {
  230       cset   c_ext;     /* external variables changed    */
  231       short  c_flags;   /* see below            */
  232      };
  233
  234      struct use {
  235       short  u_flags;   /* see below            */
  236      };
  237
  238
  239      #define CF_INDIR 01
  240      #define UF_INDIR 01
  241
  242
  243      /* SETS */
  244
  245
  246      /* There are 2 set representations:
  247       *   - long    (lset), which is essentially a list
  248       *   - compact (cset), which is essentially a bitvector
  249       */
  250
  251
  252       struct elemholder {
  253       char     *e_elem; /* pointer to the element     */
  254       elem_p     e_next;   /* link              */
  255      };
  256
  257      struct bitvector {
  258       short v_size;     /* # significant bits         */
  259       int   v_bits[DYNAMIC];/* a row of bits       */
12:33 AUG 20 '97 zbe$types:h.:ZBC3TSI                                      8    
  260      };
  261
  262
  263
  264      /* BASIC BLOCKS */
  265
  266
  267      /* Note that the b_succ and b_pred fields constitute the
  268       * Control Flow Graph
  269       */
  270
  271
  272       struct bblock {
  273       block_id b_id;    /* unique integer       */
  274       line_p    b_start;   /* pointer to first instruction     */
  275       lset   b_succ; /* set of successor blocks    */
  276       lset   b_pred; /* set of predecessor blocks     */
  277       bblock_p b_idom;  /* immediate dominator        */
  278       lset   b_loops;   /* set of loops it is in      */
  279       short  b_flags;   /* see below            */
  280       bext_p    b_extend;  /* pointer to any further information  */
  281       bblock_p b_next;  /* link to textually next block     */
  282       short b_instrs_count; /* number of instructions in the block. */
  283      };
  284
  285
  286      union bext_t {
  287         struct bext_cf {
  288       short  bx_semi;   /* dfs number of semi-dominator     */
  289       bblock_p bx_parent;  /* parent in dfs spanning tree      */
  290       lset   bx_bucket; /* set of vertices whose sdom is b  */
  291       bblock_p bx_ancestor;   /* ancestor of b in forest,      */
  292       bblock_p bx_label;   /* used by link/eval       */
  293         } bx_cf;
  294         struct bext_ud {
  295       cset   bx_gen; /* definition generated in b     */
  296       cset   bx_kill;   /* defs. outside b killed by b      */
12:33 AUG 20 '97 zbe$types:h.:ZBC3TSI                                      9    
  297       cset   bx_in;     /* defs. reaching beginning of b */
  298       cset   bx_out; /* defs. reaching end of b    */
  299       cset   bx_cgen;   /* generated copies        */
  300       cset   bx_ckill;  /* killed copies        */
  301       cset   bx_cin; /* copies reaching begin of b    */
  302       cset   bx_cout;   /* copies reaching end of b      */
  303       cset   bx_chgvars;   /* variables changed by b     */
  304         } bx_ud;
  305         struct bext_lv {
  306       cset   bx_use; /* variables used before being defined  */
  307       cset   bx_def; /* variables defined before being used  */
  308       cset   bx_lin; /* variables live at entry of b         */
  309       cset   bx_lout;   /* variables live at exit of b          */
  310         } bx_lv;
  311         struct bext_ra {
  312       short  bx_begin;  /* number of first instruction of block   */
  313       short  bx_end; /* number of last  instruction of block   */
  314         } bx_ra;
  315         struct bext_ie {
  316       cset  bx_def;   /* defs set in the block. */
  317       cset  bx_ref;   /* refs used in the block. */
  318       cset  bx_ddef;   /* ddefs set in the block. */
  319       cset  bx_boe;   /* boe used in the block. */
  320       cset  bx_kill;   /* kills set in the block. */
  321         }  bx_ie;
  322      } ;
  323
  324
  325      #define BF_STRONG  01
  326      #define BF_FIRM    02
  327
  328      #define IS_STRONG(b)  (b->b_flags&BF_STRONG)
  329      #define IS_FIRM(b) (b->b_flags&BF_FIRM)
  330
  331
  332      /* EM INSTRUCTIONS */
  333
12:33 AUG 20 '97 zbe$types:h.:ZBC3TSI                                      10   
  334      /* Kinds of operand types (l_optype field) */
  335
  336      #define OPNO    0
  337      #define OPSHORT    1
  338      #define OPOFFSET   2
  339      #define OPINSTRLAB 3
  340      #define OPOBJECT   4
  341      #define OPPROC     5
  342      #define OPLIST     6
  343
  344
  345      /* The following constants are used by the debugging tools: */
  346      #define OP_FIRST OPNO
  347      #define OP_LAST OPLIST
  348
  349      #define LDATA   0
  350      #define LTEXT   01
  351
  352      struct line {
  353       line_p    l_next; /* link              */
  354       byte   l_instr;   /* instruction          */
  355       byte   l_optype;  /* kind of operand, used as tag     */
  356       line_p    l_prev; /* backlink to previous instruction */
  357       union {
  358          short la_short;   /* short:      LOC 5 */
  359          offset   la_offset;  /* offset:     LDC 20   */
  360          lab_id   la_instrlab;   /* label:      BRA *10  */
  361          obj_p la_obj;     /* object:     LOE X+2  */
  362          proc_p   la_proc; /* proc:    CAL F3   */
  363          arg_p la_arg;     /* arguments:     HOL 10,0,0  */
  364       } l_a;
  365      };
  366
  367
  368      /* ARGUMENTS */
  369
  370
12:33 AUG 20 '97 zbe$types:h.:ZBC3TSI                                      11   
  371      /* String representation of a constant, partitioned into
  372       * pieces of NARGBYTES bytes.
  373       */
  374
  375      #define ARGOFF     0
  376      #define ARGINSTRLAB   1
  377      #define ARGOBJECT  2
  378      #define ARGPROC    3
  379      #define ARGSTRING  4
  380      #define ARGICN     5
  381      #define ARGUCN     6
  382      #define ARGFCN     7
  383      #define ARGCEND    8
  384
  385
  386      struct argbytes {
  387       argb_p    ab_next;
  388       short  ab_index;
  389       char   ab_contents[NARGBYTES];
  390      };
  391
  392
  393      struct arg {
  394       arg_p  a_next; /* link              */
  395       short  a_type; /* kind of argument        */
  396       union {
  397          offset   a_offset;   /* offset         */
  398          lab_id   a_instrlab; /* instruction label    */
  399          proc_p   a_proc;     /* procedure         */
  400          obj_p a_obj;      /* object         */
  401          argb_t   a_string;   /* string         */
  402          struct {    /* int/unsigned/float constant   */
  403             short ac_length;  /* size in bytes  */
  404             argb_t   ac_con;     /* its string repres.   */
  405          } a_con;
  406       } a_a;
  407      };
12:33 AUG 20 '97 zbe$types:h.:ZBC3TSI                                      12   
  408
  409
  410
  411      /* Macros to increase readability: */
  412
  413      #define   INSTR(lnp)  (lnp->l_instr & BMASK)
  414      #define TYPE(lnp)  lnp->l_optype
  415      #define PREV(lnp)  lnp->l_prev
  416      #define   SHORT(lnp)  lnp->l_a.la_short
  417      #define   OFFSET(lnp) lnp->l_a.la_offset
  418      #define   INSTRLAB(lnp)  lnp->l_a.la_instrlab
  419      #define   OBJ(lnp) lnp->l_a.la_obj
  420      #define   PROC(lnp)   lnp->l_a.la_proc
  421      #define   ARG(lnp) lnp->l_a.la_arg
  422
  423
  424      /* Data structures for Use-Definition and Live-Dead Analysis */
  425
  426      struct local {
  427       offset   lc_off;     /* offset of local in stackframe    */
  428       short lc_size; /* size of local in bytes     */
  429       short lc_flags;   /* see below            */
  430       offset   lc_score;   /* score in register message, if regvar */
  431       local_p  lc_next; /* link, only used when building the list */
  432      };
  433
  434      /* values of lc_flags */
  435
  436      #define LCF_BAD    01
  437      /* Set when no ud-info for this local is maintained, e.g. when it is
  438       * overlapped by another local.
  439       */
  440      #define LCF_REG    02 /* register variable */
  441      #define LCF_LIVE   04 /* use by live-dead message generation */
  442
  443
  444      struct cond_tab {
12:33 AUG 20 '97 zbe$types:h.:ZBC3TSI                                      13   
  445       short mc_cond; /* Denotes a condition e.g. FITBYTE */
  446       short mc_tval; /* value for time optimization  */
  447       short mc_sval; /* value for space optimization */
  448       short mc_dummy; /* allignment */
  449      };
  450
  451      /* conditions: */
  452
  453      #define DEFAULT    0
  454      #define FITBYTE    1
  455      #define IN_0_63    2
  456      #define IN_0_8     3
  457
  458

