/*M* MIDGET_SIc1 (main:c) -- Dependency generator for make files */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
 
/*P*    NAME:     MIDGET_SIc1
        PURPOSE:  This file contains  main(), initialization, and the
                  startup functions.
        DESCRIPTION:
            All initial processing occurs with the following functions.
            Global data initialization, Command line processing & options
            parsing, Default setting, and then lower level drivers are
            called from main() to handle the situation.
               1)  main ()
               2)  md1_StartUp ()
               3)  md1_CmdOptionHandler ()
               4)  md1_GetNameFromOpts ()
               5)  md1_GetNumberFromOpts ()
               6)  md1_SetSearchPath ()
               7)  md1_DoHeaderInfo ()
               8)  md1_DoHelpInfo ()
               9)  md1_ByeBye ()
              10)  md1_DoSetInfoDefaults ()
              11)  md1_DoInitInfo ()
*/
/********************************************************************/
 
#include <stdio.h>
#include <ctype.h>
#include <stdlib.h>
#include <string.h>
 
#define  __SG_MACROS__
#include <SEAGULL.h>
 
#define  PUBLIC        /*dcl global data*/
#include "MIDGET1:h"
 
/* GLOBAL  DATA */
#ifdef DEBUG
int                  md_debug = YES;
#else
int                  md_debug = NO;
#endif
 
 
/********************************************************************/
/*F*  NAME:    main (int argc, char **argv)
      PURPOSE: High level driver for MIDGET, very little work is actually
               done in main.  If the initialization and startup functions
               finish OK, main will call one of several lower level drivers.
*/
 
/*
md1_main()   ** for eg. se;if/md1/,1,3;ty  **
*/
main (int argc, char **argv)  {
 
   int   result;
 
#ifdef DEBUG
   char  ME[] = "main";
#else
   char *ME = NULL;
#endif
 
   md1_DoHeaderInfo( argv);
   md3_SetupBreak( );
   if (result = md1_StartUp( argc, argv)  == OK)  {
      switch (md_info.operation_mode)  {
         case MODE_MAKE_STD:
            md2_DoMakeStdMode( );
            md1_ByeBye( );
            break;
         case MODE_STD_FILE:
            md2_DoStdFileMode( );
            md1_ByeBye( );
            break;
         case MODE_WILDCARD:
            md2_DoWildcardMode( );
            md1_ByeBye( );
            break;
         default:
            Error ( ME, "%s \n",
                  "Illegal Operation Mode returned from md1_StartUp()");
            break;
      }  /*end switch*/
   }  /*end if md1_StartUp OK*/
   else  {
      Error ( ME, "%s \n",
            "Failure in Start-up routine... exit stage right!");
      exit( 7);
   }
}  /*end main()*/
 
 
#pragma LIST EJECT
/********************************************************************/
/*F*  NAME:    md1_StartUp (int argc, char **arvg)
      PURPOSE: In this function we want to control the start-up process
               for MIDGET.  It is gathers all the necessary information
               that is needed to run MIDGET.  All this is passed
               back to main (), where the correct driver is called.
      INPUT:   argc  is the number of arguments on the command line
               argv  is the array which contains the arguments
      OUTPUT:  if successful, return OK (0)
               if not, return value from command_option_handler
*/
 
 
int
md1_StartUp( int argc, char **argv)
{
   int opt_result=0;
   char *fid_name;
   char mode_str[20];
   char blank[2] = " \0";
 
#ifdef DEBUG
   char  ME[] = "md1_StartUp";
#else
   char *ME = NULL;
#endif
 
   md1_DoInitInfo( argv);
   if (argc > 1)  {     /* options on the command line */
      opt_result = md1_CmdOptionHandler( argc, argv);
      md1_DoSetInfoDefaults( );
   }
   else  {  /* they think we work interactively, help 'em out */
/*N* Add a pseudo-interactive mode someday.
 *** (eg. prompt> -g fid
 ***      prompt> -o outfid... etc.
 ***/
      Message ( "YO!", "Interactive use is not allowed with this tool!!\n\n");
      md1_DoHelpInfo( );
      exit( 1);
   }  /*end else*/
 
   if (md_info.opt.verbose > 1)  {   /* VERY verbose */
      Verbose ( ME, "%s %s %s %s %s \n",
         argv[0], VERSION, " last created @ ", __TIME__, __DATE__);
   }
   if (md_info.opt.verbose)  {      /* normal verbose */
      if (md_info.opt.make_std)  {
         fid_name = md_info.in_fid.pathname;
         strcpy( mode_str, "MAKE STD file : \0");
      }
      else if (md_info.opt.std_file)   {
         fid_name = md_info.in_fid.pathname;
         strcpy( mode_str, "STD file : \0");
      }
      else if (md_info.opt.wildcard)  {
         fid_name = blank;
         strcpy( mode_str, "Wildcard ... \0");
      }
      Verbose ( ME, "%s %s \n    %s %s %s \n\n",
         "BUILDING ....  ", md_info.out_fid.pathname,
            "FROM ", mode_str, fid_name );
      if ((md_info.opt.wildcard) && (md_info.in_fid.pathname))  {
         Verbose ( ME, "    %s %s \n        %s %s\n",
            "building .. STD file: ", md_info.in_fid.pathname,
               "from wildcard: ", md_info.wildcard_str );
      }
      else if (md_info.opt.wildcard)  {
         Verbose ( ME, "    %s %s \n        %s %s\n",
            "building .. STD file: ", "*std-'time'",
               "from wildcard: ", md_info.wildcard_str );
      }
   }  /*end verbose*/
 
return( opt_result);
}  /*end md1_StartUp ()*/
 
 
/********************************************************************/
/*F*  NAME:    md1_CmdOptionHandler (int argc, char **argv)
      PURPOSE: This function handles all options that are input on the
               command line.  It parses the command line, and puts the given
               information into a global data structure.
      INPUT:   argc & argv from the command line
      OUTPUT:  md_info  the global structure that gets filled in here
               if successful, return OK (0)
               if not, return SYNTAX or ERROR
*/
 
int
md1_CmdOptionHandler( int argc, char **argv)
{
  char *buf;
  char *name_p;
  char *left_paren;
  char *right_paren;
  char *comma;
  int  number;
  int num_opts, num_fids=0;
  int i;
  int status = OK;
 
#ifdef DEBUG
   char  ME[] = "md1_CmdOptionHandler";
#else
   char *ME = NULL;
#endif
 
  num_opts = argc-1;
  for (i=1; i <=num_opts; i++)  {
     buf = argv[i];
     if (buf[0] == '-')  {     /* has to be option(s) */
       while (*++buf)  {
          switch (tolower(*buf))  {
            case '4':      /* Fortran option */
              md_info.opt.fortran = YES;
              break;
            case '6':      /* PL-6 option */
              md_info.opt.pl6 = YES;
              break;
            case 'c':
               if (tolower(*(buf-1)) == 'n')
                  md_info.opt.compressed = NO;
               else  {
                  md_info.opt.compressed = YES;
                  md_info.opt.indentation = 4;
               }
               break;
            case 'd':
               if (isdigit( *(buf+1)))
                  md_debug = *++buf & 0x0f;
               else
                  md_debug = 1;
               break;
            case 'f':
               if (tolower( *(buf-1)) == 'n')
                  md_info.opt.forget_nulls = NO;
               else
                  md_info.opt.forget_nulls = YES;
               break;
            case 'g':      /* MAKE STD file (-g matches MAKE opt)*/
              ++num_fids;
              md_info.opt.make_std = YES;
              md_info.operation_mode = MODE_MAKE_STD;
              if (name_p = md1_GetNameFromOpts(&buf,num_opts,argv,&i)){
                 md_info.in_fid.pathname = name_p;
              }
              else
                 status = ERROR;
              break;
            case 'h':
               if (tolower(*(buf-1)) == 'n')
                  md_info.opt.header = NO;
               else
                  md_info.opt.header = YES;
               break;
            case 'i':      /* Include search opt = account to search*/
              ++md_info.opt.include_path;
              if (name_p = md1_GetNameFromOpts(&buf,num_opts,argv,&i)){
                 md1_SetSearchPath( name_p);
              }
              else
                 status = ERROR;
              break;
            case 'k':      /* Keep old (temporary) output file */
              if (tolower( *(buf-1)) != 'n')
                 md_info.opt.keep = YES;
              else
                 md_info.opt.keep = NO;
              break;
            case 'l':      /* Specify :LIB_sysvers account */
               md_info.opt.library = YES;
              if (name_p = md1_GetNameFromOpts(&buf,num_opts,argv,&i)){
                 strcpy( md_info.lib_acct, name_p);
              }
              else
                 status = ERROR;
               break;
            case 'n':      /* NO opt - ignore this letter, but look */
               break;      /* close at the next one, if needed ???  */
            case 'o':      /* Output fid opt= assign file as out_fid*/
              md_info.opt.out_fid = YES;
              if (*(buf+1) == '+')  {
                 md_info.opt.append_to_outfid = YES;
                 ++buf;
              }
              if (name_p = md1_GetNameFromOpts(&buf,num_opts,argv,&i)){
                 md_info.out_fid.pathname = name_p;
              }
              else
                 status = ERROR;
              break;
            case 's':      /* Std file opt = set file to in_fid */
              ++num_fids;
              if (!md_info.opt.wildcard)  {
                 md_info.operation_mode = MODE_STD_FILE;
                 md_info.opt.std_file = YES;
              }
              if (name_p = md1_GetNameFromOpts(&buf,num_opts,argv,&i)){
                 md_info.in_fid.pathname = name_p;
              }
              else
                 status = ERROR;
              break;
            case 't':      /* Test include files for existence opt */
               if (tolower(*(buf-1)) == 'n')
                  md_info.opt.test_includes = NO;
               else
                  md_info.opt.test_includes = YES;
               break;
            case 'u':      /* Update path opt = account for UI */
              md_info.opt.updates;
              if (name_p = md1_GetNameFromOpts(&buf,num_opts,argv,&i)){
                 strcpy( md_info.update_path, name_p);
              }
              else
                 status = ERROR;
              break;
            case 'v':      /* Verbose opt=tell all we know is hapnin*/
              ++md_info.opt.verbose;
              break;
            case 'w':      /* Wildcard opt = set up to build std*/
              ++num_fids;
              md_info.operation_mode = MODE_WILDCARD;
              md_info.opt.wildcard = YES;
              if (md_info.opt.std_file)  {
                 md_info.opt.std_file = NO;
              }
              if (name_p = md1_GetNameFromOpts(&buf,num_opts,argv,&i)){
                 md_info.wildcard_str = name_p;
              }
              else
                 status = ERROR;
              break;
            case 'x':      /* Don't care opt => NO WARN */
               if (tolower(*(buf-1)) == 'n')
                  md_info.opt.warn = YES;  /* -nx  No don't care = warn*/
               else
                  md_info.opt.warn = NO;   /* -x  Don't care = No warn */
               break;
            case 'y':      /* Indentation opt */
               if (number = md1_GetNumberFromOpts(&buf,num_opts,argv,&i) )  {
                  if (number <= MAX_INDENTATION)
                     md_info.opt.indentation = number;
                  else
                     Warning ( ME, "%s %d \n%s %d\n%s \n",
                           "Indentation MAX is - ", MAX_INDENTATION,
                           "   Exceeded by specifying = ", number,
                           "The default will be taken!");
               }  /*end if*/
               else
                  status = ERROR;
               break;
            case 'z':      /* Colon column control opt */
               if (number = md1_GetNumberFromOpts(&buf,num_opts,argv,&i) )  {
                  if (number <= MAX_COLON_POS)
                     md_info.opt.colon_column = number;
                  else
                     Warning ( ME, "%s %d \n%s %d\n%s \n",
                           "Colon position MAX is - ", MAX_COLON_POS,
                           "   Exceeded by specifying = ", number,
                           "The default will be taken!");
               }  /*end if*/
               else
                  status = ERROR;
               break;
            default:
              Warning ( ME, " \"%c\" %s\n", *buf, " is not a valid option **");
              break;
          }  /*end switch*/
       }  /*end while*/
     }  /*end if DASH*/
     else if (strstr( buf, "SR(")  ||  strstr( buf, "SRCH(")  ||
              strstr( buf, "sr(")  ||  strstr( buf, "srch(")   )  {
         if (left_paren = strchr( buf, '(') )
            buf = left_paren;
         else  {
            Error ( ME, "%s \n", "Something is VERY wrong!");
            exit( 7);
         }
         while (buf)  {
            if (name_p = md1_GetNameFromOpts( &buf,num_opts,argv,&i)) {
               if (comma = strchr( name_p, ',') )  {
                  *comma = '\0';
                  buf = comma;
               }
               else if (right_paren = strrchr( name_p, ')') )  {
                  *right_paren = '\0';
                  buf = NULL;
               }
               ++md_info.opt.include_path;
               md1_SetSearchPath( name_p);
            }
            else  {
               status = ERROR;
               buf = NULL;
            }
         }  /*end while*/
     }  /*end else if SRCH opt*/
     else if (buf[0] == '>') {  /* ">" out_fid given  */
        md_info.opt.out_fid = YES;
        if (name_p = md1_GetNameFromOpts(&buf,num_opts,argv,&i)){
           md_info.out_fid.pathname = name_p;
        }
        else
           status = ERROR;
     }  /*end else if*/
     else  {         /* no DASH or anything => ERROR if here */
/*N* Allow something like:
 *** !MIDGET.X make-g over target_dep (VERBOSE, WARN, etc)
 ***/
        Error ( ME, "\"%s\" %s\n", buf, " : Bogus something given **");
        exit( 3);
     }  /*end else*/
  }  /*end for i*/
  return( status);
}  /*end md1_CmdOptionHandler ()*/
 
 
/*------------------------------------------------------------------*/
/*F*  NAME:    md1_GetNameFromOpts (...)
      PURPOSE: graps the string that goes with an option.  It can be in the
               same argument as the option (-ostring), or in the next
               argument (-o string).
      INPUT:   buffer     is the pointer to the position of the option letter
               num_opts   is the number of options on the command line
               argv       is the arguments from the command line
               i          is a pointer to the Nth argument
      OUTPUT:  the functions returns the pointer to the name found
*/
 
 
char *
md1_GetNameFromOpts( char **buffer, int num_opts,
                    char **argv, int *i)
{
   char *ptr = NULL;
   int tmp;
 
#ifdef DEBUG
   char  ME[] = "md1_GetNameFromOpts";
#else
   char *ME = NULL;
#endif
 
   if (*(*buffer+1))  {   /* see if "name" is in the same arg */
      ptr = *buffer+1;
      **buffer = '\0';
      *buffer = *buffer-1;
   }
   else  {   /* look for "name" in next arg.. it ain't next to opt */
      tmp = *i;
      if (tmp >= num_opts)  {
         Error ( ME, " \"%s\" %s\n", *buffer, " option did not have a string"
               " given (required) **");
      }
      else
         ptr = argv[++(*i)];
   }  /*end else*/
return( ptr);
}  /*end md1_GetNameFromOpts ()*/
 
 
/*------------------------------------------------------------------*/
/*F*  NAME:    md1_GetNumberFromOpts (...)
      PURPOSE: grabs the number that goes with a given option.  It can be
               in the same argument (-o123), or in the next argument (-o 89).
      INPUT:   buffer     is the pointer to the position of the option letter
               num_opts   is the number of options on the command line
               argv       is the arguments from the command line
               i          is a pointer to the Nth argument
      OUTPUT:  the functions returns the value of the number found
*/
 
 
int
md1_GetNumberFromOpts( char **buffer, int num_opts,
                      char **argv, int *i)
{
   char *ptr = NULL;
   int tmp;
   int number = 0;
 
#ifdef DEBUG
   char  ME[] = "md1_GetNumberFromOpts";
#else
   char *ME = NULL;
#endif
 
   if (*(*buffer+1))  {   /* see if "number" is in the same arg */
      ptr = *buffer+1;
      **buffer = '\0';
      *buffer = *buffer-1;
      if (sscanf( ptr, "%d", &number) == 1)
         return( number);
      else  {
         Error ( ME, "%s %s\n",
                "Could not read a number out of the string: ", ptr);
         exit( 3);
      }
   }
   else  {   /* look for "number" in next arg.. it ain't next to opt */
      tmp = *i;
      if (tmp >= num_opts)  {
         Error ( ME, " \"%s\" %s\n", *buffer, " option did not have a number"
               " given (required) **");
      }
      else
         if (sscanf( argv[++(*i)], "%d", &number) == 1)
            return( number);
         else  {
            Error ( ME, "%s %s\n",
                   "Could not read a number out of the string: ", argv[*i]);
            exit( 3);
         }
   }  /*end else*/
return( number);
}  /*end md1_GetNumberFromOpts ()*/
 
 
/*------------------------------------------------------------------*/
/*F*  NAME:    md1_SetSearchPath (char *path)
      PURPOSE: This function is used to parse a given path, and create a
               useable search path.  Take wildcards, etc.
      INPUT:   path  is the given search path, possibly wildcarded
      OUTPUT:  variables in the global structure, md_info, are changed
*/
 
 
void
md1_SetSearchPath( char *path)
{
   char *question_mark;
   char *period;
 
 
   strcpy( md_info.srch_path[++md_info.srch_count], path);
 
   if (question_mark = strchr( path, '?') )  {
      *question_mark = '\0';
      md_info.prefix_str[ ++md_info.prefix_cnt] = path;
      path = question_mark+1;
   }
   if (period = strchr( path, '.') )  {
      *period = '\0';
      md_info.search_account[ md_info.opt.include_path] = period+1;
      if (period != path)
         md_info.prefix_str[ ++md_info.prefix_cnt] = path;
   }
   else
      md_info.search_account[ md_info.opt.include_path] = path;
 
return;
}  /*end md1_SetSearchPath ()*/
 
 
/*------------------------------------------------------------------*/
/*F*  NAME:    md1_DoHeaderInfo (char **argv)
      PURPOSE: put out a header with tool name, version, time & date
*/
 
void
md1_DoHeaderInfo( char **argv)
{
 
 
   strcpy( &(md_info.time[0]), GetTimeAndDate () );
 
   printf( "CP-6 %s %s here at %s \n\n",argv[0],VERSION,md_info.time);
}
 
 
/*------------------------------------------------------------------*/
/*F*  NAME:    md1_DoHelpInfo ()
      PURPOSE: gives help info, to give bone-head users a clue!
*/
 
void
md1_DoHelpInfo( )
{
   FILE  *HELPfp;
   char  in_record[132];
   char  *comment;
   int   done = NO;
 
#ifdef DEBUG
   char  ME[] = "md1_DoHelpInfo";
#else
   char *ME = NULL;
#endif
 
   HELPfp = fopen( "MIDGET_SIH1.:XSI", "r");     /* *N* ??? */
   if (HELPfp == NULL )  {
      printf( "See MIDGET help file for further info on running this tool!\n\n");
      printf( "!Help (MIDGET.X) Options\n");
      system( "!Help (MIDGET.X) Options");
      exit( 0);
   }
   /* we have the help SOURCE file open */
   while (fgets( in_record, 132, HELPfp) && !done)  {
      if (comment = strstr( in_record, ".*SYNTAX*") )  {
         done = TRUE;
         fgets( in_record, 132, HELPfp);  /* grap .*B* etc line */
         fgets( in_record, 132, HELPfp);  /* grap next good line */
         while (!strstr( in_record, ".*B*") )  {
            printf( "%s", in_record);
            fgets( in_record, 132, HELPfp);
         }
      }  /*end if*/
   }  /*end while*/
 
   fclose( HELPfp);
   if (!comment)
      Warning ( ME, "%s \n%s \n",
               "NO embedded comment in help source file (.*SYNTAX*)!",
               "File: mdg_help");  /* *N* ??? */
   exit( 0);
return;
}  /*end md1_DoHelpInfo ()*/
 
 
/*------------------------------------------------------------------*/
/*F*  NAME:    md1_ByeBye ()
      PURPOSE: called before exit(0), to give messages & stuff
*/
 
void
md1_ByeBye( )
{
 
 
   if (md_info.opt.verbose)  {
      printf( "Build of MAKE Dependency Include File \"%s\" is complete!!",
               md_info.out_fid.pathname);
   }
   printf( "\n\"And thank you for your support.\" \n\n");
   exit( 0);
}
 
 
/*------------------------------------------------------------------*/
/*F*  NAME:    md1_DoSetInfoDefaults ()
      PURPOSE: routine to set up things not given on the command line,
               that will be needed to run MIDGET... but not really
               required on the command line to run.
               This one runs AFTER the options are parsed!
      OUTPUT:  md_info   variables in this structure get changed
*/
 
void
md1_DoSetInfoDefaults( )
{
   static char outfid_name[PathNameLen];
 
#ifdef DEBUG
   char  ME[] = "md1_DoSetInfoDefaults";
#else
   char *ME = NULL;
#endif
 
   /* make sure we have input & output files */
   if ( (!md_info.in_fid.pathname) && (!md_info.opt.wildcard) )  {
      Error ( ME, "%s\n", "No input file was given on command line!!");
      exit( 7);
   }
   strcpy( md_info.in_fid.access, "r sharein\0");
   if (!md_info.out_fid.pathname)  {  /* make default output fid */
      strcpy( outfid_name, "*:h-");
      strcpy( &(outfid_name[4]), GetTime () );
      md_info.out_fid.pathname = outfid_name;
   }
   strcpy( md_info.out_fid.access, "a\0");
 
   /* handle the defaults for options, etc. */
   if ( (!md_info.opt.cc) && (!md_info.opt.pl6) && (!md_info.opt.fortran) )
      md_info.opt.cc = YES;
 
   /* md_info.search_account[0] = md_info.user.account;  */
   md_info.prefix_str[0] = '\0';
}  /*md1_DoSetInfoDefaults ()*/
 
 
/*------------------------------------------------------------------*/
/*F*  NAME:    md1_DoInitInfo (char **argv)
      PURPOSE: routine to initialize all global data that may need to be
               It may set a default, but it can be changed in the option
               handler.  This one runs BEFORE the options are done.
      OUTPUT:  md_info  variables in this structure get changed
*/
 
void
md1_DoInitInfo( char **argv)
{
   char *period;
   char *account;
   char tmp_name[PathNameLen];
 
#ifdef DEBUG
   char  ME[] = "md1_InitInfo";
#else
   char *ME = NULL;
#endif
 
   md_info.opt.verbose = 0;
   md_info.opt.warn = YES;
   md_info.opt.include_path = 0;
   md_info.opt.indentation = 20;
   md_info.opt.colon_column = 17;
   md_info.opt.compressed = NO;
   md_info.opt.forget_nulls = NO;
   md_info.opt.keep = NO;
   md_info.opt.test_includes = NO;
   md_info.opt.library = NO;
   md_info.opt.header = YES;
   md_info.opt.append_to_outfid = NO;
   md_info.flag.source = NO;
   md_info.flag.include = NO;
   md_info.flag.source_type = MD_GENERIC_SOURCE;
   md_info.srch_count = 0;
   md_info.break_count = 0;
 
 
 
   strcpy( md_info.tool.version, VERSION);
   strcpy( md_info.tool.time, __TIME__);
   strcpy( tmp_name, argv[0]);
   strcpy( md_info.tool.pathname, tmp_name);
   if (period = strchr( tmp_name, '.') )  {
      account = period+1;
      strcpy( md_info.tool.account, account);
      *period = '\0';
      strcpy( md_info.tool.name, tmp_name);
   }
   else  {   /* syntax wrong on cmd line invocation */
      Error ( ME, "%s %s %s\n",  "Command line syntax : ", tmp_name,
            " is NOT correct!!");
      exit( 7);
   }
}  /*end md1_DoInitInfo ()*/
