

CC.C03    File=zbn$expr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=1  
        1         1             /*
        2         2              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        3         3              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        4         4              */
        5         5             #ifndef NORCSID
        6         6             static char rcsid[]= "$Header: expr.c,v 0.3 87/03/09 18:59:39 ceriel Exp $";
        7         7             #endif
        8         8
        9         9             #include "assert:h"
       10        10             #include "param:h"
       11        11             #include "set:h"
       12        12             #include "reg:h"
       13        13             #include "lookup:h"
       14        14             #include "token:h"
       15        15             #include "property:h"
       16        16             #include "expr:h"
       17        17             #include "regvar:h"
       18        18             #include <cgg_cg:h>
       19        19             #include "extern:h"
       20        20
       21        21             extern set_t l_sets[];
       22        22
       23        23             i_expr(e) expr_t e; {
       24        24    1
       25        25    1         if (e.ex_typ != TYPINT)
       26        26    1            error("Expression should be integer");
       27        27    1         return(e.ex_index);
       28        28    1        }
       29        29
       30        30             b_expr(e) expr_t e; {
       31        31    1         if (e.ex_typ != TYPBOOL)
       32        32    1            error("Expression should be boolean");
       33        33    1         return(e.ex_index);
       34        34    1        }
       35        35
       36        36             expr_t make_expr(type,operator,op1,op2) {
CC.C03    File=zbn$expr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=2  
       37        37    1         expr_t result;
       38        38    1
       39        39    1         result.ex_typ=type;
       40        40    1         result.ex_index=ex_lookup(operator,op1,op2);
       41        41    1         return(result);
       42        42    1        }
       43        43
       44        44             expr_t regno_expr(regno) {
       45        45    1         expr_t result;
       46        46    1         register i;
       47        47    1
       48        48    1         result.ex_typ = TYPREG;
       49        49    1         result.ex_index = ex_lookup(EX_REG,regno,0);
       50        50    1         for (i=0;i<SZOFSET(MAXREGS);i++)
       51        51    1            result.ex_regset[i] = 0;
       52        52    1         BIS(result.ex_regset,regno);
       53        53    1         return(result);
       54        54    1        }
       55        55
       56        56             expr_t ident_expr(name) char *name; {
       57        57    1         register symbol *sy_p;
       58        58    1
       59        59    1         sy_p = lookup(name,symany,mustexist);
       60        60    1         if (sy_p->sy_type==symconst)
       61        61    1            return(make_expr(TYPINT,EX_CON,
       62        62    1                  (int) (sy_p->sy_value.syv_cstval&0xFFFF),
       63        63    1                  (int) (sy_p->sy_value.syv_cstval>>16)));
       64        64    1         else if (sy_p->sy_type==symsconst)
       65        65    1            return(make_expr(TYPADDR,EX_STRING,sy_p->sy_value.syv_stringno,0));
       66        66    1         else if (sy_p->sy_type!=symreg)
       67        67    1            error("Wrong type of identifier %s",name);
       68        68    1         return(regno_expr(sy_p->sy_value.syv_regno));
       69        69    1        }
       70        70
       71        71             expr_t subreg_expr(tokarg,subreg) {
       72        72    1         expr_t result;
       73        73    1
CC.C03    File=zbn$expr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=3  
       74        74    1         result.ex_typ = TYPREG;
       75        75    1         subregset(l_sets[tokpatset[tokarg > 0 ? tokarg-1 : tokarg]].set_val,
       76        76    1              subreg,result.ex_regset);
       77        77    1         result.ex_index = ex_lookup(EX_SUBREG,tokarg,subreg);
       78        78    1         return(result);
       79        79    1        }
       80        80
       81        81             subregset(sp,subreg,regset) register short *sp; register short *regset; {
       82        82    1         register i;
       83        83    1         register struct reginfo *rp;
       84        84    1
       85        85    1         for (i=0;i<SZOFSET(MAXREGS);i++)
       86        86    1            regset[i]=0;
       87        87    1         for (i=1;i<nregs;i++)   if (BIT(sp,i)) {
       88        88    2            if(subreg) {
       89        89    3               rp = &l_regs[i];
       90        90    3               if (rp->ri_memb[subreg-1]==0)
       91        91    3                  error("Register %s in set has no member %d",
       92        92    3                     rp->ri_name,subreg);
       93        93    3               BIS(regset,rp->ri_memb[subreg-1]);
       94        94    3            } else
       95        95    2               BIS(regset,i);
       96        96    2         }
       97        97    1         for(;i<nregs+MAXTOKENS;i++) if(BIT(sp,i))
       98        98    1            error("Set contains %s, which is not a register",
       99        99    1               l_tokens[i-nregs]->tk_name);
      100       100    1        }
      101       101
      102       102             membset(setno,name,regset,appearance,restyp,typp)
      103       103             char *name,*appearance;
      104       104             short *regset;
      105       105             int *typp;
      106       106             {
      107       107    1         register short *sp;
      108       108    1         register token_p tp;
      109       109    1         register i,j,k;
      110       110    1         int thistyp;
CC.C03    File=zbn$expr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=4  
      111       111    1         int typesdiffer=0;
      112       112    1         int res_j= -1;
      113       113    1
      114       114    1         if (setno < 0) return 0;
      115       115    1         sp = l_sets[setno].set_val;
      116       116    1         for (i=1;i<nregs;i++) if (BIT(sp,i)) {
      117       117    2            error("Set in %s contains %s, which is not a token",
      118       118    2               appearance,l_regs[i].ri_name);
      119       119    2            break;
      120       120    2         }
      121       121    1         for (i=0;i<SZOFSET(MAXREGS);i++)
      122       122    1            regset[i] = 0;
      123       123    1         for (i=nregs;i<nregs+MAXTOKENS;i++) if (BIT(sp,i)) {
      124       124    2            tp = l_tokens[i-nregs];
      125       125    2            for(j=0;j<MAXATT &&
      126       126    2                    (tp->tk_att[j].ta_type == -3 ||
      127       127    2                strcmp(tp->tk_att[j].ta_name,name));j++)
      128       128    2               ;
      129       129    2            if (j==MAXATT)
      130       130    2               error("Token %s does not contain %s",tp->tk_name,name);
      131       131    2            else if (j!=res_j && res_j != -1)
      132       132    2               typesdiffer=1;
      133       133    2            else {
      134       134    3               res_j = j;
      135       135    3               thistyp = tp->tk_att[j].ta_type;
      136       136    3               if (thistyp== -2) {
      137       137    4                  if (restyp!=TYPADDR && restyp!=0)
      138       138    4                     typesdiffer=1;
      139       139    4                  else
      140       140    4                     restyp=TYPADDR;
      141       141    4               } else if (thistyp== -1) {
      142       142    4                  if (restyp!=TYPINT && restyp!=0)
      143       143    4                     typesdiffer=1;
      144       144    4                  else
      145       145    4                     restyp=TYPINT;
      146       146    4               } else {
      147       147    4                  if (restyp!=TYPREG && restyp!=0)
CC.C03    File=zbn$expr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=5  
      148       148    4                     typesdiffer=1;
      149       149    4                  else {
      150       150    5                     restyp=TYPREG;
      151       151    5                     for(k=0;k<SZOFSET(MAXREGS);k++)
      152       152    5                        regset[k] |=
      153       153    5                            l_props[tp->tk_att[j].ta_type].pr_regset[k];
      154       154    5                  }
      155       155    4               }
      156       156    3            }
      157       157    2         }
      158       158    1         if (typesdiffer)
      159       159    1            error("%s is not a valid expression; types differ in the set",
      160       160    1               appearance);
      161       161    1         *typp = restyp==0 ? TYPINT : restyp;
      162       162    1         return(res_j == -1 ? 0 : res_j);
      163       163    1        }
      164       164
      165       165             expr_t memb_expr(setno,name,appearance,tokarg) char *name,*appearance; {
      166       166    1         expr_t result;
      167       167    1         int res_j;
      168       168    1
      169       169    1         res_j = membset(setno,name,result.ex_regset,appearance,0,&result.ex_typ);
      170       170    1         result.ex_index = ex_lookup(EX_TOKFIELD,tokarg,res_j+1);
      171       171    1         return(result);
      172       172    1        }
      173       173
      174       174             expr_t tokm_expr(tokarg,name) char *name; {
      175       175    1         char app[100];
      176       176    1         int tokarg1 = tokarg > 0 ? tokarg : 1;
      177       177    1
      178       178    1         sprintf(app,"%%%d.%s",tokarg1,name);
      179       179    1         return(memb_expr(tokpatset[tokarg1-1],name,app,tokarg));
      180       180    1        }
      181       181
      182       182             expr_t perc_ident_expr(name) char *name; {
      183       183    1         char app[100];
      184       184    1
CC.C03    File=zbn$expr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=6  
      185       185    1         sprintf(app,"%%%s",name);
      186       186    1         return(memb_expr(cursetno,name,app,0));
      187       187    1        }
      188       188
      189       189             expr_t all_expr(all_no,subreg) {
      190       190    1         set_t localset;
      191       191    1         register i;
      192       192    1         register short *sp;
      193       193    1         expr_t result;
      194       194    1
      195       195    1         sp = l_props[allreg[all_no]].pr_regset;
      196       196    1         for (i=0;i<SETSIZE;i++)
      197       197    1            localset.set_val[i] = i<SZOFSET(MAXREGS) ? sp[i] : 0;
      198       198    1         subregset(localset.set_val,subreg,result.ex_regset);
      199       199    1         result.ex_typ = TYPREG;
      200       200    1         result.ex_index = ex_lookup(EX_ALLREG,all_no+1,subreg);
      201       201    1         return(result);
      202       202    1        }
      203       203
      204       204             eq2expr(e1,e2) expr_t e1,e2; {
      205       205    1
      206       206    1         if (e1.ex_typ != e2.ex_typ)
      207       207    1            error("Expressions around == should have equal type");
      208       208    1         switch (e1.ex_typ) {
      209       209    2         default: assert(0);
      210       210    2         case TYPBOOL:
      211       211    2            error("== on booleans not implemented");
      212       212    2         case TYPINT:
      213       213    2            return(EX_NCPEQ);
      214       214    2         case TYPADDR:
      215       215    2            return(EX_SCPEQ);
      216       216    2         case TYPREG:
      217       217    2            return(EX_RCPEQ);
      218       218    2         }
      219       219    1        }
      220       220
      221       221             ne2expr(e1,e2) expr_t e1,e2; {
CC.C03    File=zbn$expr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=7  
      222       222    1
      223       223    1         if (e1.ex_typ != e2.ex_typ)
      224       224    1            error("Expressions around != should have equal type");
      225       225    1         switch (e1.ex_typ) {
      226       226    2         default: assert(0);
      227       227    2         case TYPBOOL:
      228       228    2            error("!= on booleans not implemented");
      229       229    2         case TYPINT:
      230       230    2            return(EX_NCPNE);
      231       231    2         case TYPADDR:
      232       232    2            return(EX_SCPNE);
      233       233    2         case TYPREG:
      234       234    2            return(EX_RCPNE);
      235       235    2         }
      236       236    1        }
      237       237
      238       238             expr_t sum_expr(e1,e2) expr_t e1,e2; {
      239       239    1         int operator,op1,op2;
      240       240    1         expr_t result;
      241       241    1
      242       242    1         operator = EX_CAT; op1 = e1.ex_index; op2 = e2.ex_index;
      243       243    1         if (e1.ex_typ==e2.ex_typ) {
      244       244    2            result.ex_typ = e1.ex_typ;
      245       245    2            if (e1.ex_typ == TYPINT)
      246       246    2               operator = EX_PLUS;
      247       247    2            else if (e1.ex_typ != TYPADDR)
      248       248    2               error("+ is not implemented on this type");
      249       249    2         } else {
      250       250    2            result.ex_typ = TYPADDR;
      251       251    2            if (e1.ex_typ != TYPADDR) {
      252       252    3               if (e1.ex_typ!=TYPINT)
      253       253    3                  error("Wrong left operand of +");
      254       254    3               op1 = ex_lookup(EX_TOSTRING,op1,0);
      255       255    3            }
      256       256    2            if (e2.ex_typ != TYPADDR) {
      257       257    3               if (e2.ex_typ!=TYPINT)
      258       258    3                  error("Wrong right operand of +");
CC.C03    File=zbn$expr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=8  
      259       259    3               op2 = ex_lookup(EX_TOSTRING,op2,0);
      260       260    3            }
      261       261    2         }
      262       262    1         result.ex_index=ex_lookup(operator,op1,op2);
      263       263    1         return(result);
      264       264    1        }
      265       265
      266       266             expr_t make_get_name_expr(tp,operator,e) expr_t e; {
      267       267    1          int op;
      268       268    1          expr_t result;
      269       269    1
      270       270    1          op = e.ex_index;
      271       271    1          if (e.ex_typ != TYPADDR)  {
      272       272    2             error("get_name is not implemented on operands of this type");
      273       273    2             op = ex_lookup(EX_TOSTRING,op,0);
      274       274    2          }
      275       275    1          result.ex_typ = tp;
      276       276    1          result.ex_index = ex_lookup(operator,op,0);
      277       277    1          return result;
      278       278    1        }
      279       279
      280       280             expr_t iextoaddr(e) expr_t e; {
      281       281    1         expr_t result;
      282       282    1
      283       283    1         result.ex_typ = TYPADDR;
      284       284    1         result.ex_index = ex_lookup(EX_TOSTRING,e.ex_index,0);
      285       285    1         return(result);
      286       286    1        }
      287       287
      288       288             expr_t regvar_expr(e,regtyp) expr_t e; {
      289       289    1         expr_t result;
      290       290    1         register i;
      291       291    1
      292       292    1         result = make_expr(TYPREG,EX_REGVAR,i_expr(e),0);
      293       293    1         for(i=0;i<SZOFSET(MAXREGS);i++)
      294       294    1            result.ex_regset[i]=0;
      295       295    1         for(i=0;i<nregvar[regtyp];i++)
CC.C03    File=zbn$expr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=9  
      296       296    1            BIS(result.ex_regset,rvnumbers[regtyp][i]);
      297       297    1         return(result);
      298       298    1        }
      299       299
      300       300             /*
      301       301              * Node table lookup part
      302       302              */
      303       303
      304       304             node_t nodes[MAXNODES];
      305       305             int nnodes=0;
      306       306
      307       307             initnodes() {
      308       308    1
      309       309    1         nodes[0].ex_operator = EX_CON;
      310       310    1         nodes[0].ex_lnode = 0;
      311       311    1         nodes[0].ex_rnode = 0;
      312       312    1         nnodes++;
      313       313    1        }
      314       314
      315       315             ex_lookup(operator,lnode,rnode) {
      316       316    1         register node_p p;
      317       317    1
      318       318    1         for(p=nodes+1;p< &nodes[nnodes];p++) {
      319       319    2            if (p->ex_operator != operator)
      320       320    2               continue;
      321       321    2            if (p->ex_lnode != lnode)
      322       322    2               continue;
      323       323    2            if (p->ex_rnode != rnode)
      324       324    2               continue;
      325       325    2            return(p-nodes);
      326       326    2         }
      327       327    1         NEXT(nnodes,MAXNODES,"Node");
      328       328    1         p->ex_operator = operator;
      329       329    1         p->ex_lnode = lnode;
      330       330    1         p->ex_rnode = rnode;
      331       331    1         return(p-nodes);
      332       332    1        }
CC.C03    File=zbn$expr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=10 
      333       333
---  Include file information  ---

   zbn$assert:h.:ZBC3TOU. is referenced
   zbn$param:h.:ZBC3TOU. is referenced
   zbm$local:h.:ZBC3TOU. is referenced
   zbn$set:h.:ZBC3TOU. is referenced
   zbn$reg:h.:ZBC3TOU. is referenced
   zbn$lookup:h.:ZBC3TOU. is referenced
   zbn$token:h.:ZBC3TOU. is referenced
   zbn$cost:h.:ZBC3TOU. is referenced
   zbn$property:h.:ZBC3TOU. is referenced
   zbn$expr:h.:ZBC3TOU. is referenced
   zbn$regvar:h.:ZBC3TOU. is referenced
   cgg_cg:h.:ZBC3TOU. is referenced
   zbn$extern:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbn$expr:c.:ZBC3TSI
