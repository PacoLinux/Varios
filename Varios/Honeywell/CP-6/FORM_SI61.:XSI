/*M* FORM_SI6 - PL6 source for FORM program. */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
FORM: PROC MAIN;
%INCLUDE CP_6;
%INCLUDE B$JIT;
%INCLUDE B_ERRORS_C;
%INCLUDE FS_SUPER_C;
%INCLUDE XU_FORMAT_C;
%INCLUDE XU_MACRO_C;
%INCLUDE XU_PERR_C;
%INCLUDE XUF_ENTRY;
%INCLUDE XG_SUBS_C;
%INCLUDE FORM_C61;
 
%SUB SET = '1'B;
%SUB NOTSET = '0'B;
 
%PARSE$OUT (NAME = OPT$OUT,
            STCLASS = "BASED (BLK$)");
%PARSE$SYM (NAME = OPT$SYM,
            STCLASS = "BASED (BLK$)");
DCL NSUBLKS UBIN;
DCL OPT_NODE UBIN SYMREF;
DCL X$PARSE ENTRY (1) ALTRET;
DCL WORK (0:255) UBIN STATIC;
DCL BLK$ PTR;
DCL 1 BUF STATIC,
    2 L UBIN HALF HALIGNED,
    2 C CHAR (255) CALIGNED;
%P_PCB (NAME = OPT_PCB,
        STCLASS = STATIC,
        T = BUF.C,
        R = OPT_NODE,
        W = WORK,
        WSZ = 256);
 
DCL BUPHER CHAR (130) STATIC;
 
%FPT_READ(FPTN=READIN,
          DCB=M$SI,
          KEY=READ_KEY,
          BUF=READBUF);
DCL READBUF CHAR(4096) CALIGNED STATIC;
DCL M$SI DCB;
DCL 1 READ_KEY WALIGNED STATIC,
    2 SIZE UBIN BYTE CALIGNED,
    2 KEY_VAL CHAR (6) UNAL;
DCL FORM_NAME CHAR (6);
 
%FPT_WRITE(FPTN=WRITEOUT,
           DCB=M$LS,
           BUF=WRITEBUF);
DCL WRITEBUF CHAR(80) CALIGNED STATIC;
DCL M$LS DCB;
 
%FPT_PFIL (FPTN = TOP_OF_FILE,
           BOF = YES,
           DCB = M$SI);
 
 
%FPT_OPEN(FPTN=OPEN_OU,
          ACS=DIRECT,
          DCB=M$LS);
 
%FPT_OPEN( FPTN=OPEN_SI,
           FUN=IN,
           SHARE=ALL,
           ASN=FILE,
           NAME=FORM_FID,
           ACCT=SYSACCT,
           DCB=M$SI);
 
%VLP_NAME( FPTN=FORM_FID,
           NAME=':FORM');
 
%VLP_ACCT( FPTN=SYSACCT,
           ACCT=':SYS');
 
 
%FPT_CLOSE( FPTN=CLOSE_OU,
            DCB=M$LS);
 
%FPT_CLOSE( FPTN=CLOSE_SI,
            DCB=M$SI);
 
%FPT_ERRMSG( FPTN=MERR,
             BUF = BUPHER,
             OUTDCB1 = M$LS);
 
%F_FDS (NAME = SHORT_FDS,
        BUF = WRITEBUF,
        DCB = M$LS);
 
DCL FULL BIT (1);
DCL IMAGE BIT (1);
DCL QUESTION BIT (1);
DCL PSEUDO BIT (1);
DCL SHORT_FMT CHAR (68) STATIC INIT ('First:%D  Length:%D  Limbo:%D  Lines Per Inch:%D  Width:%D  Chain:%A');
DCL PSEUDO_MSG CHAR (53) STATIC INIT ('The form name: %A is a pseudo name for the form: %A');
DCL CHAIN_MSG CHAR (27) STATIC INIT ('The image for chain: %A is:');
DCL DEV_MSG CHAR (35) STATIC INIT ('This form is legal for a %A device.');
DCL GR1_FMT CHAR (0) STATIC INIT (
      'X SIZE:%D   Y SIZE:%D   Z SIZE:%D');
DCL GR2_FMT CHAR (0) STATIC INIT (
      'X OFFSET:%D    Y OFFSET:%D    Z OFFSET:%D');
 
DCL I SBIN;
DCL WIDTH UBIN;
DCL CHAIN CHAR (8);
DCL UBIN18 UBIN (18) UNAL;
DCL BIT18 REDEF UBIN18 BIT (18) UNAL;
DCL 1 HOST,
      2 * BIT (2) UNAL,
      2 UPPER UBIN (8) UNAL,
      2 LOWER UBIN (8) UNAL;
DCL HOST18 REDEF HOST UBIN (18) UNAL;
 
DCL 1 FEP,
      2 * BIT (1) UNAL,
      2 UPPER UBIN (8) UNAL,
      2 * BIT (1) UNAL,
      2 LOWER UBIN (8) UNAL;
DCL FEP18 REDEF FEP UBIN (18) UNAL;
 
DCL DEV_CHAR_FMT CHAR (10);
DCL DEV_ VECTOR;
DCL LENGTH_ VECTOR;
DCL LIMBO_ VECTOR;
DCL FIRST_ VECTOR;
DCL WIDTH_ VECTOR;
DCL LPI_ VECTOR;
DCL SHORT_ VECTOR;
DCL CHAIN_ VECTOR;
DCL M$SI$ PTR ALIGNED ;
DCL FORM$ PTR ALIGNED;
DCL BANNER$ PTR ALIGNED;
DCL SETUP$ PTR ALIGNED;
DCL ACCESS$ PTR ALIGNED;
DCL ACCOUNT$ PTR ALIGNED;
 
%FS$FORMREC (NAME=FORM,
             STCLASS = "BASED (FORM$)");
 
%FS$GFORMREC (NAME=GFORM,
             STCLASS = "BASED (FORM$)");
 
%FS$BAN_INIT (NAME = BANNER,
              STCLASS = "BASED (BANNER$)");
 
%FS$SET_INIT (NAME = SETUP,
              STCLASS = "BASED (SETUP$)");
 
%FS$ACC_INIT (NAME = ACCESS,
              STCLASS = "BASED (ACCESS$)");
 
%FS$ACCT_INIT (NAME = ACCOUNT,
              STCLASS = "BASED (ACCOUNT$)");
 
%F$DCB;
%B$ALT;
%B$TCB;
DCL B$TCB$ PTR SYMREF;
DCL B$JIT$ PTR SYMREF ;
 
CALL M$OPEN (OPEN_OU) ALTRET (ERR);
CALL M$OPEN (OPEN_SI) ALTRET (ERR);
FULL = NOTSET;
IMAGE = NOTSET;
QUESTION = NOTSET;
SHORT_ = VECTOR (SHORT_FMT);
IF B$JIT.CCARS = B$JIT.CCDISP
THEN DO;
   QUESTION = SET;
   END;
 ELSE DO;
    BUF.C = SUBSTR ( B$JIT.CCBUF,B$JIT.CCDISP);
    OPT_PCB.NCHARS = B$JIT.CCARS - B$JIT.CCDISP;
    CALL X$PARSE (OPT_PCB)
    WHENRETURN DO;
      END;
    WHENALTRETURN DO;
      WRITEBUF = 'Unable to parse input.  Please check syntax and try again.';
      CALL M$WRITE (WRITEOUT) ALTRET (ERR);
      GOTO FIN;
      END;
    BLK$ = OPT_PCB.OUT$;
    DO CASE (OPT$OUT.CODE);
        CASE (%$QUESTION);
           QUESTION = SET;
        CASE (%$FORMNAME);
           READ_KEY.SIZE = 6;
           READ_KEY.KEY_VAL = OPT$OUT.SUBLK$(0)->OPT$SYM.TEXT;
           FORM_NAME = READ_KEY.KEY_VAL;
           IF OPT$SYM.NSUBLKS > 1
           THEN DO;
              NSUBLKS = OPT$OUT.SUBLK$(1)->OPT$SYM.NSUBLKS;
              DO I = 0 TO NSUBLKS - 1;
 
                 DO CASE (OPT$OUT.SUBLK$(1)->OPT$OUT.SUBLK$(I)
                  ->OPT$OUT.CODE);
                    CASE (%$FULL);
                      FULL = SET;
                    CASE (%$SHORT);
                    CASE (%$IMAGE);
                      IMAGE = SET;
                    CASE (ELSE);
                      GOTO ERR;
                 END;
              END;
           END;
        CASE (ELSE);
          GOTO ERR;
      END;
   END;
IF QUESTION
 THEN DO;
     CALL LIST_ALL ALTRET (ERR);
 END;
ELSE DO;
     CALL OUTPUT_FORM ALTRET (ERR);
     END;
GOTO FIN;
ERR: ;
           BUPHER = 'AN ERROR HAS BEEN ENCOUNTERED';
           MERR.CODE_ = VECTOR(   B$TCB$->B$TCB.ALT$->B$ALT.ERR) ;
           CALL M$ERRMSG ( MERR) ;
FIN: ;
 
LIST_ALL:PROC ALTRET;
  READIN.V.KEYS# = NOTSET;
  READIN.V.KEYR# = SET;
  WRITEBUF = 'The available forms are:';
  CALL M$WRITE (WRITEOUT) ALTRET (ERR);
  CALL M$PFIL (TOP_OF_FILE) ALTRET (ERR);
  WRITEBUF = ' ';
  I = 1;
  DO WHILE SET;
     CALL M$READ (READIN)
        WHENRETURN DO;
           SUBSTR(WRITEBUF,((I-1)*8),8) = READ_KEY.KEY_VAL;
           I = I + 1;
           IF I = 11
           THEN DO;
              CALL M$WRITE (WRITEOUT) ALTRET (ERR);
              I = 1;
              WRITEBUF = ' ';
              END;
           END;
        WHENALTRETURN DO;
           IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.ERR# = %E$EOF
           THEN DO;
               IF WRITEBUF ~= ' '
               THEN DO;
                  CALL M$WRITE (WRITEOUT) ALTRET (ERR);
                  END;
              RETURN;
              END;
           END;
  END;
 ERR: ;
   BUPHER = '******  Please check your syntax!';
   MERR.CODE_ = VECTOR( B$TCB$->B$TCB.ALT$->B$ALT.ERR) ;
   CALL M$ERRMSG ( MERR) ;
 END LIST_ALL;
 
OUTPUT_FORM: PROC ALTRET;
  PSEUDO = NOTSET;
 
  CALL READ_FORM ALTRET (FIN);
 
  IF FORM.FNAME ~= READ_KEY.KEY_VAL
  THEN DO;
     CALL X$WRITE (SHORT_FDS,VECTOR(PSEUDO_MSG),VECTOR(READ_KEY.KEY_VAL),VECTOR(FORM.FNAME));
     READ_KEY.KEY_VAL = FORM.FNAME;
     PSEUDO = SET;
     END;
 
  IF NOT FORM.GRAPHIC
  THEN DO;
     CALL CONCAT (WRITEBUF,'The definition of form ',FORM_NAME,' is:') ALTRET (ERR);
     CALL M$WRITE (WRITEOUT) ALTRET (ERR);
 
     LENGTH_ = VECTOR (FORM.SOFTFORM.VLPPLATEN.LENGTH);
     LIMBO_ = VECTOR (FORM.SOFTFORM.VLPPLATEN.LIMBO);
     FIRST_ = VECTOR (FORM.SOFTFORM.VLPPLATEN.FIRSTLINE);
     LPI_ = VECTOR (FORM.SOFTFORM.VLPPLATEN.LPI);
     CHAIN = FORM.CHAIN_NAME;
     CHAIN_ = VECTOR (CHAIN);
     WIDTH = FORM.SOFTFORM.VLPPLATEN.WIDTH;
 
     IF FORM.SOFTFORM.VLPPLATEN.EXTWID
     THEN DO;
        WIDTH = WIDTH + 254;
        END;
     WIDTH_ = VECTOR (WIDTH);
 
     CALL X$WRITE (SHORT_FDS,SHORT_,FIRST_,LENGTH_,LIMBO_,LPI_,WIDTH_,CHAIN_);
     END;
  ELSE DO;
      CALL CONCAT (WRITEBUF,'The definition for GRAPHIC form ',FORM_NAME,' is:') ALTRET (ERR);
      CALL M$WRITE (WRITEOUT) ALTRET (ERR);
      LENGTH_ = VECTOR (GFORM.X_SIZE);
      LIMBO_ = VECTOR (GFORM.Y_SIZE);
      FIRST_ = VECTOR (GFORM.Z_SIZE);
      CALL X$WRITE (SHORT_FDS, VECTOR(GR1_FMT), LENGTH_, LIMBO_, FIRST_);
      LENGTH_ = VECTOR (GFORM.X_OFFSET);
      LIMBO_ = VECTOR (GFORM.Y_OFFSET);
      FIRST_ = VECTOR (GFORM.Z_OFFSET);
      CALL X$WRITE (SHORT_FDS, VECTOR(GR2_FMT), LENGTH_, LIMBO_, FIRST_);
      END;
 
  IF PSEUDO
  THEN DO;
     CALL READ_FORM
     WHENALTRETURN DO;
        ALTRETURN;
        END;
     END;
 
  CALL WRITE_SETUP ALTRET (FIN);
 
  IF IMAGE AND (NOT FORM.GRAPHIC)
  THEN DO;
     CALL DO_CHAIN ALTRET (ERR);
     END;
 
  IF IMAGE AND FORM.GRAPHIC
  THEN DO;
     CALL DEVICE_LIMITS ALTRET (ERR);
     END;
 
  IF FULL
  THEN DO;
     CALL FULL_INFO ALTRET (ERR);
     END;
 
  RETURN;
 ERR: ;
   BUPHER = '******  Please check your syntax!';
   MERR.CODE_ = VECTOR( B$TCB$->B$TCB.ALT$->B$ALT.ERR) ;
   CALL M$ERRMSG ( MERR) ;
FIN: ;
END OUTPUT_FORM;
 
WRITE_SETUP: PROC ALTRET;
 
     IF FORM.SETUPDISP = 0
     THEN DO;
        WRITEBUF = ' ';
        CALL M$WRITE (WRITEOUT) ALTRET (ERR);
        WRITEBUF = 'There is no setup information for this form!';
        CALL M$WRITE (WRITEOUT) ALTRET (ERR);
        RETURN;
        END;
 
     WRITEBUF = ' ';
     CALL M$WRITE (WRITEOUT) ALTRET (ERR);
     WRITEBUF = 'The setup information for this form is:';
     CALL M$WRITE (WRITEOUT) ALTRET (ERR);
     DO I = 0 TO SETUP.LINES - 1;
        WRITEBUF = ' ';
        WRITEBUF = SETUP.TXT(I);
        CALL M$WRITE (WRITEOUT) ALTRET (ERR);
        END;
  RETURN;
 ERR: ;
   BUPHER = 'A WRITE error has been encountered!';
   MERR.CODE_ = VECTOR( B$TCB$->B$TCB.ALT$->B$ALT.ERR) ;
   CALL M$ERRMSG ( MERR) ;
END WRITE_SETUP;
 
READ_FORM: PROC ALTRET;
  READIN.V.KEYS# = SET;
  READIN.V.KEYR# = NOTSET;
 
  CALL M$READ (READIN)
  WHENALTRETURN DO;
     WRITEBUF = 'The specified form does not exist. Use (?) option to list forms available.';
     CALL M$WRITE (WRITEOUT) ALTRET (ERR);
     ALTRETURN;
     END;
 
  FORM$ = ADDR (READBUF);
  BANNER$ = PINCRW (FORM$, FORM.BANRDISP);
  SETUP$ = PINCRW (FORM$, FORM.SETUPDISP);
  ACCESS$ = PINCRW (FORM$, FORM.ACCSDISP);
  ACCOUNT$ = PINCRW (FORM$, FORM.ACCTDISP);
 
  RETURN;
 ERR: ;
   BUPHER = 'A WRITE error has been encountered!';
   MERR.CODE_ = VECTOR( B$TCB$->B$TCB.ALT$->B$ALT.ERR) ;
   CALL M$ERRMSG ( MERR) ;
END READ_FORM;
 
DO_CHAIN: PROC ALTRET;
WRITEBUF = ' ';
CALL M$WRITE (WRITEOUT) ALTRET (ERR);
READ_KEY.KEY_VAL = FORM_NAME;
CALL X$WRITE (SHORT_FDS,VECTOR(CHAIN_MSG),VECTOR(CHAIN));
CALL READ_FORM ALTRET (ERR);
DO I = 0 TO 5;
  WRITEBUF = ' ';
  WRITEBUF = FORM.CHAINS (I);
  CALL M$WRITE (WRITEOUT) ALTRET (ERR);
  END;
 
RETURN;
ERR: ;
   BUPHER = 'A WRITE error has been encountered!';
   MERR.CODE_ = VECTOR( B$TCB$->B$TCB.ALT$->B$ALT.ERR) ;
   CALL M$ERRMSG ( MERR) ;
END DO_CHAIN;
 
FULL_INFO: PROC ALTRET;
WRITEBUF = ' ';
CALL M$WRITE (WRITEOUT) ALTRET (ERR);
IF FORM.LGLTYPS.ELSOK
THEN DO;
  IF FORM.LGLTYPS.LPOK
  THEN DO;
     IF FORM.LGLTYPS.TSOK
     THEN DO;
       WRITEBUF = 'This form is legal on all devices.';
       END;
     ELSE DO;
        WRITEBUF = 'This form is legal on all except TS devices.';
        END;
     END;
  ELSE IF FORM.LGLTYPS.TSOK
  THEN DO;
     WRITEBUF = 'This form is legal on all except LP devices.';
     END;
  ELSE DO;
     WRITEBUF = 'This form is legal on all devices except LP and TS';
     END;
  CALL M$WRITE (WRITEOUT) ALTRET (ERR);
  END;
ELSE IF FORM.LGLTYPS.LPOK AND FORM.LGLTYPS.TSOK
THEN DO;
  WRITEBUF = 'This form is legal on TS and LP devices only.';
  CALL M$WRITE (WRITEOUT) ALTRET (ERR);
  END;
ELSE DO;
  IF FORM.LGLTYPS.LPOK
  THEN DO;
    WRITEBUF = 'This form is legal on an LP device.';
    END;
 
  IF FORM.LGLTYPS.TSOK
  THEN DO;
    WRITEBUF = 'This form is legal on a TS device.';
    END;
 
CALL M$WRITE (WRITEOUT) ALTRET (ERR);
END;
 
IF FORM.LGLTYPS.ONEOK
THEN DO;
  CALL X$WRITE (SHORT_FDS,VECTOR(DEV_MSG),VECTOR(FORM.LGLTYPS.LTYP));
  END;
 
IF FORM.ACCTDISP > 0
THEN DO;
  WRITEBUF = 'The accounts authorized for this form are:';
  CALL M$WRITE (WRITEOUT) ALTRET (ERR);
  I = 1;
  WRITEBUF = ' ';
  DO WIDTH = 0 TO ACCOUNT.TACCTS - 1;
      SUBSTR(WRITEBUF,((I-1)*10),10) = ACCOUNT.LIST (WIDTH);
      I = I + 1;
      IF I = 9
      THEN DO;
         CALL M$WRITE (WRITEOUT) ALTRET (ERR);
         I = 1;
         WRITEBUF = ' ';
         END;
      END;
  IF WRITEBUF ~= ' '
  THEN DO;
     CALL M$WRITE (WRITEOUT) ALTRET (ERR);
     END;
  END;
 
IF FORM.ACCSDISP > 0
THEN DO;
  WRITEBUF = 'The device names authorized for this form are:';
  CALL M$WRITE (WRITEOUT) ALTRET (ERR);
  I = 1;
  WRITEBUF = ' ';
  DO WIDTH = 0 TO ACCESS.TNAMES - 1;
      SUBSTR(WRITEBUF,((I-1)*10),10) = ACCESS.LIST (WIDTH);
      I = I + 1;
      IF I = 9
      THEN DO;
         CALL M$WRITE (WRITEOUT) ALTRET (ERR);
         I = 1;
         WRITEBUF = ' ';
         END;
      END;
  IF WRITEBUF ~= ' '
  THEN DO;
     CALL M$WRITE (WRITEOUT) ALTRET (ERR);
     END;
  END;
 
RETURN;
ERR: ;
   BUPHER = 'A WRITE error has been encountered!';
   MERR.CODE_ = VECTOR( B$TCB$->B$TCB.ALT$->B$ALT.ERR) ;
   CALL M$ERRMSG ( MERR) ;
END FULL_INFO;
/**
 ** Set device limit information
 **/
DEVICE_LIMITS: PROC ALTRET;
DCL I UBIN;
DCL CI CHAR (1);
WRITEBUF = ' ';
CALL M$WRITE (WRITEOUT) ALTRET (ERR);
WRITEBUF = 'The set device limit parameters are:';
CALL M$WRITE (WRITEOUT) ALTRET (ERR);
WRITEBUF = ' ';
CALL M$WRITE (WRITEOUT) ALTRET (ERR);
DO I= 0 TO 9;
   DEV_CHAR_FMT = ' ';
   CALL BINCHAR (CI, I);
   CALL CONCAT (DEV_CHAR_FMT, CI ,': %D');
   DEV_ = VECTOR (DEV_CHAR_FMT);
   BIT18 = GFORM.SET_DEV_LIM.UPARAM (I);
   CALL SPLIT9X92_18 (UBIN18);
   LENGTH_ = VECTOR (HOST18);
   CALL X$WRITE (SHORT_FDS,DEV_,LENGTH_);
   END;
RETURN;
ERR: ;
   BUPHER = 'A WRITE error has been encountered!';
   MERR.CODE_ = VECTOR( B$TCB$->B$TCB.ALT$->B$ALT.ERR) ;
   CALL M$ERRMSG ( MERR) ;
END DEVICE_LIMITS;
/*
TURN FEP VALUES INTO HOST VALUES
*/
SPLIT9X92_18: PROC (VALUE);
DCL VALUE UBIN (18) ALIGNED;
 
      FEP18 = VALUE;
      HOST18 = 0;
      HOST.UPPER = FEP.UPPER;
      HOST.LOWER = FEP.LOWER;
 
      RETURN;
END SPLIT9X92_18;
CALL M$CLOSE (CLOSE_OU);
CALL M$CLOSE (CLOSE_SI);
END FORM;
