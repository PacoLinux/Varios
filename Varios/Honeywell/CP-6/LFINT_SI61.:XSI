/*M* LFINT - LINEFEED INSERTION TOOL does newline functions */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* DMR,PLM=5,IND=5,CTI=5,SDI=5,MCL=10,CSI=0,ECI=0 */
                                   /*
                                        Author: J.L.Joseph, LADC
                                        Date: 11/85
                                                                  */
%SET LISTSUB='1'B;
 
LFINT: PROC MAIN;
 
                                   /*
                                        Locally needed %SUBs
                                                                  */
%SUB TRUE#='1'B /*TRUE#*/;
%SUB FALSE#='0'B /*FALSE#*/;
%SUB MAX_LINE#=69 /*MAX_LINE#*/;
%SUB LEN_LARGE#=132/*LEN_LARGE#*/;
%SUB LEN_SMALL#=20/*LEN_SMALL#*/;
%SUB FIF#=5 /*FIF#*/;
%SUB FIN#=25 /*FIN#*/;
%SUB NOCH#=21 /*NOCH#*/;
%SUB WARN#=2 /*WARN#*/;
%SUB PUSH#=3 /*PUSH#*/;
%SUB PULL#=3 /*PULL#*/;
%SUB BBUFSIZ#=8192 /*BBUFSIZ#*/;
%SUB KBUFSIZ#=1024 /*KBUFSIZ#*/;
%SUB TOTALSIZ#=10240 /*TOTALSIZ#*/;
 
                                   /*
                                        INCLUDEs here
                                                                  */
     %INCLUDE CP_6;
     %INCLUDE CP_6_SUBS;
 
     %INCLUDE XU_MACRO_C;
     %INCLUDE XU_SUBS_C;
     %INCLUDE XU_PERR_C;
 
     %INCLUDE B$JIT_C;
     %INCLUDE B_ERRORS_C;
 
     %INCLUDE XS_MACRO_C;
                                   /*
                                        DCBs defined here
                                                                  */
DCL M$SI DCB;
DCL M$OU DCB;
DCL M$DO DCB;
 
                                   /*
                                        EXTERNALs
                                                                  */
DCL B$JIT$ PTR SYMREF;
DCL B$TCB$ PTR SYMREF;
DCL XSA$OPEN ENTRY(2) ALTRET;
DCL XSA$CLOSE ENTRY(2) ALTRET;
DCL XSA$READ ENTRY(2) ALTRET;
DCL XSA$WRITE ENTRY(2) ALTRET;
                                   /*
                                        CONSTANT definitions here
                                                                  */
 
                                   /* XLATE table for lc to uc conversion */
 
DCL XTAB1 (0:127) UBIN BYTE UNAL CONSTANT INIT (
0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,
24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,
   45,46,47,ASCBIN('0'),ASCBIN('1'),ASCBIN('2'),ASCBIN('3'),
ASCBIN('4'),ASCBIN('5'),ASCBIN('6'),ASCBIN('7'),ASCBIN('8'),
ASCBIN('9'),ASCBIN(':'),ASCBIN(';'),ASCBIN('<'),ASCBIN('='),
ASCBIN('>'),ASCBIN('?'),ASCBIN('@'),ASCBIN('A'),ASCBIN('B'),
ASCBIN('C'),ASCBIN('D'),ASCBIN('E'),ASCBIN('F'),ASCBIN('G'),
ASCBIN('H'),ASCBIN('I'),ASCBIN('J'),ASCBIN('K'),ASCBIN('L'),
ASCBIN('M'),ASCBIN('N'),ASCBIN('O'),ASCBIN('P'),ASCBIN('Q'),
ASCBIN('R'),ASCBIN('S'),ASCBIN('T'),ASCBIN('U'),ASCBIN('V'),
ASCBIN('W'),ASCBIN('X'),ASCBIN('Y'),ASCBIN('Z'),ASCBIN('['),
ASCBIN('\'),ASCBIN(']'),ASCBIN('^'),ASCBIN('_'),ASCBIN('`'),
ASCBIN('A'),ASCBIN('B'),ASCBIN('C'),ASCBIN('D'),ASCBIN('E'),
ASCBIN('F'),ASCBIN('G'),ASCBIN('H'),ASCBIN('I'),ASCBIN('J'),
ASCBIN('K'),ASCBIN('L'),ASCBIN('M'),ASCBIN('N'),ASCBIN('O'),
ASCBIN('P'),ASCBIN('Q'),ASCBIN('R'),ASCBIN('S'),ASCBIN('T'),
ASCBIN('U'),ASCBIN('V'),ASCBIN('W'),ASCBIN('X'),ASCBIN('Y'),
ASCBIN('Z'),ASCBIN('{'),ASCBIN('|'),ASCBIN('}'),ASCBIN('~'),
0);
 
 
 
                                   /*
                                        Local STATIC storage
                                                                  */
DCL BUF1 CHAR(1026) STATIC INIT(' ');
DCL BUF1U CHAR(1026) STATIC INIT(' ');
DCL BUF2 CHAR(1026) STATIC INIT(' ');
DCL BUFT CHAR(1026) STATIC INIT(' ');
DCL BUF1ARS UBIN WORD STATIC INIT(0);
DCL BUF2ARS UBIN WORD STATIC INIT(0);
 
DCL CHAR_SAVE CHAR(1) CALIGNED STATIC;
DCL WHEREBS SBIN WORD STATIC INIT(0);
DCL LAST_PL SBIN WORD STATIC INIT(0);
DCL MY_ERROR_BUF CHAR(140) STATIC;
 
                              /*
                                   OPTIONS flags
                                                  */
 
                              /*
                                   internal status flags
                                                                  */
DCL END_OF_FILE BIT(1) ALIGNED STATIC INIT(FALSE#);
 
 
                              /*
                                   mysterious and misused temps
                                                                  */
DCL I SBIN WORD STATIC ALIGNED INIT(0);
DCL J SBIN WORD STATIC ALIGNED INIT(0);
DCL K SBIN WORD STATIC ALIGNED INIT(0);
DCL LOCATED SBIN WORD STATIC;
 
DCL MAX_PER_LINE SBIN WORD STATIC SYMDEF ALIGNED INIT(MAX_LINE#);
 
 
DCL FPARAM_BUF (0:1024) SBIN STATIC ALIGNED;
 
DCL PARSE$ PTR STATIC;
 
DCL 1 FILE_KEY STATIC CALIGNED,
         2 COUNT_ UBIN BYTE CALIGNED INIT(3),
         2 KEY_ UBIN(27) CALIGNED INIT(1000);
 
DCL M$SI$ PTR STATIC;
DCL M$OU$ PTR STATIC;
 
%EJECT;
                                   /*
                                        I/O FPTs here
                                                                  */
     %FPT_OPEN      (FPTN=OPEN_SI_IN,
                         FUN=IN,
                         ACS=SEQUEN,
                         DCB=M$SI);
 
     %FPT_OPEN      (FPTN=OPEN_SI_TEST,
                         TEST=YES,
                         FPARAM=FPARAM_BUF,
                         DCB=M$SI);
 
     %FPT_READ      (FPTN=READ_BUF1,
                         DCB=M$SI,
                         BUF=BUF1,
                         WAIT=YES);
 
     %FPT_READ      (FPTN=READ_BUF2,
                         DCB=M$SI,
                         BUF=BUF2,
                         WAIT=YES);
 
     %FPT_WRITE     (FPTN=WRITE_OU_BUF2,
                         ONEWKEY=YES,
                         KEY=FILE_KEY,
                         DCB=M$OU,
                         BUF=BUF2,
                         WAIT=YES);
 
     %FPT_WRITE     (FPTN=WRITE_OU_BUF1,
                         ONEWKEY=YES,
                         KEY=FILE_KEY,
                         DCB=M$OU,
                         BUF=BUF1,
                         WAIT=YES);
 
     %FPT_CLOSE     (FPTN=CLOSE_SI_REL,
                         DISP=RELEASE,
                         DCB=M$SI);
 
     %FPT_CLOSE     (FPTN=CLOSE_OU_SAVE,
                         DISP=SAVE,
                         DCB=M$OU);
 
     %FPT_OPEN      (FPTN=OPEN_OU_OUT,
                         EXIST=NEWFILE,
                         FUN=CREATE,
                         ACS=DIRECT,
                         ORG=KEYED,
                         IFPARAM=FPARAM_BUF,
                         DCB=M$OU);
 
 
     %FPT_ERRMSG    (FPTN=ERROR_PRINT,
                         BUF=MY_ERROR_BUF,
                         DCB=M$SI,
                         OUTDCB1=M$DO,
                         CODE=NIL);
 
     %XSA_PARAM     (FPTN=SI_PARAM,
                         BBUF=NIL,
                         KBUF=NIL);
 
     %FPT_GDS       (FPTN=GET_DATA,
                         RESULTS=DATA_VECTOR,
                         SEGSIZE=TOTALSIZ#);
 
          %VLP_VECTOR (FPTN=DATA_VECTOR);
 
 
                                   /*
                                        BASED definitions
                                                                  */
     %F$DCB;
 
     %B$JIT0;
     %U$JIT1;
     %A$JIT6X;
 
     %B$TCB;
 
     %B$ALT;
 
%SUB B$ALT=B$TCB$->B$TCB.ALT$->B$ALT;
 
%EJECT;
 
/* ************************************************************
   ***                                                      ***
   ***  Begin   LFINT main program                          ***
   ***                                                      ***
   ************************************************************ */
 
     M$SI$ = DCBADDR(DCBNUM(M$SI));
     M$OU$ = DCBADDR(DCBNUM(M$OU));
 
%EJECT;
/* ************************************************************
   ***                                                      ***
   ***    SETUP XSA$FSF information                         ***
   ***                                                      ***
   ************************************************************ */
 
     CALL M$GDS (GET_DATA) ALTRET (MXXX);
 
     SI_PARAM.BBUF_.BUF$ = DATA_VECTOR.PTR$;
     SI_PARAM.BBUF_.BOUND = BBUFSIZ#*4 - 1;
     SI_PARAM.KBUF_.BUF$ = PINCRW(SI_PARAM.BBUF_.BUF$,BBUFSIZ#);
     SI_PARAM.KBUF_.BOUND = KBUFSIZ#*4-1;
 
%EJECT;
 
/* ************************************************************
   ***                                                      ***
   ***  Process the file                                    ***
   ***                                                      ***
   ************************************************************ */
 
     CALL M$OPEN (OPEN_SI_TEST) ALTRET (MXXX);
 
     CALL XSA$OPEN (OPEN_SI_IN,SI_PARAM) ALTRET (XSERR);
 
     IF M$SI$->F$DCB.ASN# ~= %FILE#
     THEN
     DO;
          CALL PARSE_ERROR (4);
          GOTO GET_GONE;
        END;                            /* DO IF INPUT ~ FILE */
 
 
     BUF1 = ' ';
     CALL XSA$READ (READ_BUF1,SI_PARAM) ALTRET (MUST_BE_EOF);
     BUF1ARS = SI_PARAM.ARS#;
 
     BUF2ARS = 0;
 
     OPEN_OU_OUT.NAME_ = VECTOR(M$SI$->F$DCB.NAME#);
     OPEN_OU_OUT.ACCT_ = VECTOR(M$SI$->F$DCB.ACCT#);
     CALL M$OPEN (OPEN_OU_OUT) ALTRET (MXXX);
 
     DO WHILE (~END_OF_FILE);
 
          IF BUF1ARS = 0
          THEN
               BUF1ARS = 1;
 
          DO WHILE ((SUBSTR(BUF1,BUF1ARS-1,1) = ' ')
               AND
               (BUF1ARS > 1));
               BUF1ARS = BUF1ARS - 1;
             END;                       /* strip trailing blanks */
 
          DO WHILE (TRUE#);
 
               CALL XLATE (BUF1U, XTAB1, BUF1);
 
               CALL INDEX (LOCATED, '\N', BUF1U, 0) ALTRET (NO_NL);
 
               IF LOCATED = 0
               THEN
               DO;
                    BUF2=SUBSTR(BUF1,2,BUF1ARS-2);
                    BUF1=BUF2;
                    BUF1ARS=BUF1ARS-2;
                    IF BUF1ARS<=0
                    THEN
                    DO;
                         BUF1ARS=1;
                         BUF1=' ';
                         GOTO NO_NL;
                       END;
                  END;
 
               IF LOCATED>0
               THEN
               DO;
                    BUF2=SUBSTR(BUF1,0,LOCATED);
                    BUF2ARS=LOCATED;
                    CALL DUMP_BUF2 ALTRET (MXXX);
                    BUF2=SUBSTR(BUF1,LOCATED+2,BUF1ARS-LOCATED-2);
                    BUF1=BUF2;
                    BUF1ARS=BUF1ARS-LOCATED-2;
                    IF BUF1ARS<=0
                    THEN
                    DO;
                         GOTO NO_NL2;
                       END;
                  END;
 
             END;                       /* DO FOREVER */
 
NO_NL:    ;
          CALL DUMP_BUF1 ALTRET (MXXX);
 
NO_NL2:   ;
 
          BUF1 = ' ';
          CALL XSA$READ (READ_BUF1,SI_PARAM) ALTRET (MUST_BE_EOF);
          BUF1ARS = SI_PARAM.ARS#;
 
          DO WHILE (FALSE#);
 
MUST_BE_EOF:   ;
 
               IF SI_PARAM.ERR.CODE ~= %E$EOF
               THEN
                    GOTO XSERR;
 
               IF BUF2ARS > 0
               THEN
               DO;
                    CALL DUMP_BUF2 ALTRET(MXXX);
                  END;                  /* DO IF BUF2 FULL */
 
               CALL M$CLOSE (CLOSE_OU_SAVE) ALTRET (MXXX);
               CALL XSA$CLOSE (CLOSE_SI_REL,SI_PARAM) ALTRET (XSERR);
 
               END_OF_FILE = TRUE#;
 
             END;                       /* DO WHILE IN EOF ROUTINE */
 
        END;                            /* DO WHILE ~END_OF_FILE */
 
     CALL M$EXIT;
 
     DO WHILE (FALSE#);
XSERR:    ;
          ERROR_PRINT.CODE_ = VECTOR(SI_PARAM.ERR);
          GOTO PRINTERR;
 
MXXX:     ;
 
          ERROR_PRINT.CODE_ = VECTOR(B$ALT.ERR);
 
PRINTERR:
          CALL M$ERRMSG (ERROR_PRINT) ALTRET (HMMM);
HMMM:     ;
GET_GONE: ;
          CALL M$XXX;
 
        END;                            /* DO WHILE ALTRETTING */
 
 
%EJECT;
 
 
DUMP_BUF2: PROC ALTRET;
 
     IF BUF2ARS <= 0
     THEN
          RETURN;
 
     DO WHILE (SUBSTR(BUF2,BUF2ARS-1,1) = ' ');
 
          BUF2ARS = BUF2ARS - 1;
 
        END;                            /* DO WHILE STRIPPING BLANKS */
 
     IF BUF2ARS = 0
     THEN
          BUF2ARS = 1;
 
 
     WRITE_OU_BUF2.BUF_.BOUND = BUF2ARS - 1;
     CALL M$WRITE (WRITE_OU_BUF2)
     WHENALTRETURN
     DO;
          ALTRETURN;
        END;
     FILE_KEY.KEY_ = FILE_KEY.KEY_ + 1000;
 
     BUF2 = ' ';
     BUF2ARS = 0;
 
     RETURN;
 
END DUMP_BUF2;
 
%EJECT;
DUMP_BUF1: PROC ALTRET;
 
 
     IF BUF1ARS <= 0
     THEN
          RETURN;
 
     DO WHILE (SUBSTR(BUF1,BUF1ARS-1,1) = ' ');
 
          BUF1ARS = BUF1ARS - 1;
 
        END;                            /* DO WHILE STRIPPING BLANKS */
 
     IF BUF1ARS = 0
     THEN
          BUF1ARS = 1;
 
 
     WRITE_OU_BUF1.BUF_.BOUND = BUF1ARS - 1;
     CALL M$WRITE (WRITE_OU_BUF1)
     WHENALTRETURN
     DO;
          ALTRETURN;
        END;
     FILE_KEY.KEY_ = FILE_KEY.KEY_ + 1000;
 
     BUF1 = ' ';
     BUF1ARS = 0;
 
     RETURN;
 
END DUMP_BUF1;
 
%EJECT;
 
%EJECT;
 
%EJECT;
 
PARSE_ERROR: PROC (INDEX_);
 
DCL INDEX_ SBIN WORD;
 
     %FPT_WRITE     (FPTN=WRITE_PARSE_ERROR,
                         DCB=M$DO,
                         BUF=NIL,
                         WAIT=YES);
 
DCL STD_ERROR CHAR(0) STATIC INIT (' **** Bad option(s)');
DCL ADV_ERROR CHAR(0) STATIC INIT (' **** Conflicting options');
DCL SIZ_ERROR CHAR(0) STATIC INIT(' **** LEN/GTH is out of range');
DCL FIL_ERROR CHAR(0) STATIC INIT(' **** Input must be disk file');
 
     IF INDEX_ = 1
     THEN
          WRITE_PARSE_ERROR.BUF_ = VECTOR (STD_ERROR);
 
     IF INDEX_ = 2
     THEN
          WRITE_PARSE_ERROR.BUF_ = VECTOR (ADV_ERROR);
 
     IF INDEX_ = 3
     THEN
          WRITE_PARSE_ERROR.BUF_ = VECTOR(SIZ_ERROR);
 
     IF INDEX_ = 4
     THEN
          WRITE_PARSE_ERROR.BUF_ = VECTOR (FIL_ERROR);
 
     CALL M$WRITE (WRITE_PARSE_ERROR) ALTRET(BOGUS);
BOGUS: ;
     RETURN;
 
END PARSE_ERROR;
 
%EJECT;
 
END LFINT;
