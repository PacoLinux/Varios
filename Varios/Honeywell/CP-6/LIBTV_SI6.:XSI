/*M*     LIBTV     HANDLES TRANSFER VECTORS FOR SHARED LIBRARIES*/
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
LIBTV:  PROC MAIN;
DCL B$JIT$ PTR SYMREF;
%INCLUDE B$JIT;
%INCLUDE CP_6;
%FPT_READ (FPTN=RDH1,
         STCLASS=CONSTANT,
         DCB=M$SI,
         BUF=HD1,
         KEY=B$RUHEADKEY,
         KEYS=YES);
%FPT_READ (FPTN=RDH2,
         STCLASS=CONSTANT,
         DCB=M$UI,
         BUF=HD2,
         KEY=B$RUHEADKEY,
         KEYS=YES);
%FPT_WRITE (FPTN=WRRU,
         DCB=M$SI,
         KEY=RUKEY);
%FPT_WRITE (FPTN=WRHD,
         STCLASS=CONSTANT,
         DCB=M$SI,
         BUF=HD1,
         KEY=B$RUHEADKEY);
DCL M$SI DCB;
DCL M$UI DCB;
DCL M$LO DCB;
%VLP_VECTOR (FPTN=VEC);
%FPT_GDS (FPTN=GDS,RESULTS=VEC);
%FPT_OPEN (FPTN=OPRU1,
         STCLASS=CONSTANT,
         DCB=M$SI,
         FUN=UPDATE);
%FPT_WRITE (FPTN=WRTVM,
         STCLASS=CONSTANT,
         DCB=M$LO,
         BUF=TVMES);
%FPT_WRITE (FPTN=WRTVM1,
         STCLASS=CONSTANT,
         DCB=M$LO,
         BUF=TVMES1);
DCL 1 TVMES STATIC,
      2 LOC1 CHAR(6),
      2 * CHAR(0) INIT('  '),
      2 NM CHAR(30),
      2 * CHAR(0) INIT('->'),
      2 LOC2 CHAR(6);
DCL 1 TVMES1 STATIC,
      2 * CHAR(0) INIT('NOT IN TV... '),
      2 NM CHAR(30);
%INCLUDE B$OBJECT_C;
%B$RECORDSUBS;
%B$HEAD (STCLASS=STATIC,NAME=HD1,SUBS=NO);
%B$HEAD (STCLASS=STATIC,NAME=HD2,SUBS=NO);
%B$RUHEADKEY (STCLASS=CONSTANT);
%B$RUKEY (NAME=RUKEY);
%B$DNAME (STCLASS="BASED(L1.NMC$)");
%B$EDEF (STCLASS="BASED(L1.ENTC$)");
DCL 1 L2 STATIC,
      2 ENT$ PTR,
      2 ENTC$ PTR,
      2 ENTL$ PTR,
      2 NM$ PTR,
      2 NMC$ PTR,
      2 NML$ PTR,
      2 PROC$ PTR,
      2 INST,
        3 ADDRESS UBIN HALF UNAL,
        3 OP UBIN HALF UNAL,
      2 PAGE UBIN INIT(0),
      2 DCB# UBIN INIT(DCBNUM(M$UI)),
      2 SLOC UBIN,
      2 ELOC UBIN;
DCL 1 L1 STATIC,
      2 ENT$ PTR,
      2 ENTC$ PTR,
      2 ENTL$ PTR,
      2 NM$ PTR,
      2 NMC$ PTR,
      2 NML$ PTR,
      2 PROC$ PTR,
      2 INST,
        3 ADDRESS UBIN HALF UNAL,
        3 OP UBIN HALF UNAL,
      2 PAGE UBIN INIT(0),
      2 DCB# UBIN INIT(DCBNUM(M$SI)),
      2 SLOC UBIN,
      2 ELOC UBIN;
%EJECT;
DCL LIOPT BIT(1) STATIC INIT('1'B);
DCL FOOPT BIT(1) STATIC INIT('1'B);
DCL COOPT BIT(1) STATIC INIT('0'B);
DCL 1 TVSTART CONSTANT,
      2 * UBIN HALF UNAL INIT(SIZEC(TVSTART.C)),
      2 C CHAR(0) INIT('_TV_ST');
DCL 1 TVEND CONSTANT,
      2 * UBIN HALF UNAL INIT(SIZEC(TVEND.C)),
      2 C CHAR(0) INIT('_TV_EN');
DCL P$ PTR;
DCL Q$ PTR;
DCL X UBIN;
DCL X1 UBIN;
DCL X2 UBIN;
DCL X3 SBIN;
%EJECT;
/*INTERPRET OPTIONS*/
        CALL INDEX1(X,'(',B$JIT.CCBUF) ALTRET(NOOPT);
        X=X+1;
        CALL INDEX2(X1,'LI',SUBSTR(B$JIT.CCBUF,X)) ALTRET(NOLI);
        IF SUBSTR(B$JIT.CCBUF,X+X1-1,1)='N'
        THEN
           LIOPT='0'B;
NOLI:   CALL INDEX2(X1,'FO',SUBSTR(B$JIT.CCBUF,X)) ALTRET(NOFO);
        IF SUBSTR(B$JIT.CCBUF,X+X1-1,1)='N'
        THEN
           FOOPT='0'B;
NOFO:   CALL INDEX2(X1,'CO',SUBSTR(B$JIT.CCBUF,X)) ALTRET(NOCO);
        IF NOT SUBSTR(B$JIT.CCBUF,X+X1-1,1)='N'
        THEN
           COOPT='1'B;
NOCO:   ;
NOOPT:  ;
%EJECT;
/*GET HEAD(S) OF RU(S), CHECK IF SHARED LIB(S)*/
        CALL M$OPEN(OPRU1) ALTRET(NOSHR1);
        CALL M$READ(RDH1) ALTRET(NOSHR1);
        IF NOT HD1.LIB
        THEN
NOSHR1:    CALL ERRM(0);
        CALL RDALLOC(L1.NM$,HD1.NRECSIZE,%TYPDNAM,0,L1.DCB#);
        CALL RDALLOC(L1.ENT$,HD1.EPRECSIZE,%TYPEDEF,0,L1.DCB#);
        L1.NML$=PINCRW(L1.NM$,HD1.NRECSIZE);
        L1.ENTL$=PINCRW(L1.ENT$,HD1.EPRECSIZE);
        CALL FINDENT(TVSTART,L1.SLOC,L1) ALTRET(NOSHR2);
        DO WHILE ('0'B);
NOSHR2:    CALL ERRM(1);
           END;
        CALL FINDENT(TVEND,L1.ELOC,L1) ALTRET(NOSHR2);
        IF L1.SLOC<224*1024
        THEN
           CALL ERRM(1);
        IF L1.ELOC<L1.SLOC
        THEN
           CALL ERRM(1);
        IF COOPT
        THEN DO;
           CALL M$READ(RDH2) ALTRET(NOSHR1);
           IF NOT HD2.LIB
           THEN
              GOTO NOSHR1;
           CALL RDALLOC(L2.NM$,HD2.NRECSIZE,%TYPDNAM,0,L2.DCB#);
           CALL RDALLOC(L2.ENT$,HD2.EPRECSIZE,%TYPEDEF,0,L2.DCB#);
           L2.NML$=PINCRW(L2.NM$,HD2.NRECSIZE);
           L2.ENTL$=PINCRW(L2.ENT$,HD2.EPRECSIZE);
           CALL FINDENT(TVSTART,L2.SLOC,L2) ALTRET(NOSHR2);
           CALL FINDENT(TVEND,L2.ELOC,L2) ALTRET(NOSHR2);
           END;
%EJECT;
        IF FOOPT
        THEN DO;
/*CYCLE THROUGH TRANSFER VECTOR FIXING AS WE GO*/
           DO WHILE (L1.SLOC<L1.ELOC);
              CALL GETWD(L1,L1.INST);
              IF NOT L1.INST.OP=BITBIN('710000'O)
              THEN
                 CALL ERRM(2);
              CALL FINDENTLOC(L1.INST.ADDRESS,L1.ENTC$,L1) ALTRET(NODEF);
              IF '0'B
              THEN
NODEF:           CALL PUTWD(L1,0);
              ELSE DO;
/*FOUND ENTRY, NOW REPLICATE ENTRY AND NAME*/
                 L1.NMC$=PINCRW(L1.NM$,B$EDEF.NPOINTER);
                 X=B$DNAME.COUNT+2;
                 X2=(X+4)/4;
                 Q$=L1.NML$;
                 L1.NML$=PINCRW(L1.NML$,X2);
                 Q$->B$DNAME.COUNT=B$DNAME.COUNT;
                 Q$->B$DNAME.TEXT=B$DNAME.TEXT;
                 IF B$DNAME.COUNT<30
                 THEN DO;
                    Q$->B$DNAME.COUNT=Q$->B$DNAME.COUNT+1;
                    CALL INSERT(Q$->B$DNAME.TEXT,B$DNAME.COUNT,1,'_');
                    END;
                 HD1.NRECSIZE=HD1.NRECSIZE+X2;
                 X=POFFW(L1.ENTL$,L1.ENTC$);
                 L1.ENTL$=PINCRW(L1.ENTL$,SIZEW(B$EDEF));
                 P$=L1.ENTL$;
                 X3=0;
                 DO WHILE (X3<X);
                    P$=PINCRW(P$,-SIZEW(B$EDEF));
                    P$->B$EDEF=PINCRW(P$,-SIZEW(B$EDEF))->B$EDEF;
                    X3=X3+SIZEW(B$EDEF);
                    END;
                 HD1.EPRECSIZE=HD1.EPRECSIZE+SIZEW(B$EDEF);
/*NOW FIX ADDRESS IN OLD ENTRY AND NAME PTR IN NEW ENTRY*/
                 B$EDEF.ISADDR=L1.SLOC;
                 B$EDEF.PRI='1'B;
                 P$->B$EDEF.NPOINTER=POFFW(Q$,L1.NM$);
                 END;
              L1.SLOC=L1.SLOC+1;
              END;
           CALL M$WRITE(WRRU);
           CALL M$FDS(GDS);
           RUKEY.TYPE=%TYPDNAM;
           RUKEY.PAGE=0;
           L1.PAGE=0;
           WRRU.BUF_.BUF$=L1.NM$;
           WRRU.BUF_.BOUND=HD1.NRECSIZE*4-1;
           CALL M$WRITE(WRRU);
           END;
%EJECT;
        IF LIOPT OR FOOPT
        THEN DO;
/*REPORT ON WHAT IS DONE*/
           CALL FINDENT(TVSTART,L1.SLOC,L1);
           CALL FINDENT(TVEND,L1.ELOC,L1);
           DO WHILE (L1.SLOC<L1.ELOC);
              CALL GETWD(L1,L1.INST);
              X=L1.SLOC*256*1024;
              CALL CVOCT(TVMES.LOC1,X);
              IF L1.INST
              THEN DO;
                 CALL FINDENTLOC(X,L1.ENTC$,L1);
                 L1.NMC$=PINCRW(L1.NM$,B$EDEF.NPOINTER);
                 TVMES.NM=B$DNAME.TEXT;
                 CALL CVOCT(TVMES.LOC2,L1.INST.ADDRESS);
                 END;
              ELSE DO;
                 TVMES.NM='EMPTY SLOT';
                 TVMES.LOC2='0';
                 END;
              IF LIOPT THEN
              CALL M$WRITE(WRTVM);
              L1.SLOC=L1.SLOC+1;
              END;
           L1.ENTC$=L1.ENT$;
           DO WHILE (L1.ENTC$<L1.ENTL$);
              L1.NMC$=PINCRW(L1.NM$,B$EDEF.NPOINTER);
              P$=PINCRW(L1.ENTC$,SIZEW(B$EDEF));
              Q$=PINCRW(L1.NM$,P$->B$EDEF.NPOINTER);
              IF (P$<L1.ENTL$)
                AND (Q$->B$DNAME.COUNT=B$DNAME.COUNT+1)
                AND (B$DNAME.TEXT=SUBSTR(Q$->B$DNAME.TEXT,0,B$DNAME.COUNT))
                AND (SUBSTR(Q$->B$DNAME.TEXT,B$DNAME.COUNT,1)='_')
              THEN
                 L1.ENTC$=PINCRW(P$,SIZEW(B$EDEF));
              ELSE DO;
                 TVMES1.NM=B$DNAME.TEXT;
                 IF LIOPT THEN
                 CALL M$WRITE(WRTVM1);
                 IF B$DNAME.TEXT=TVSTART.C OR B$DNAME.TEXT=TVEND.C OR B$EDEF.ISADDR<224*1024
                 THEN
                    L1.ENTC$=P$;
                 ELSE DO;
                    Q$=L1.ENTC$;
                    DO WHILE (P$<L1.ENTL$);
                       Q$->B$EDEF=P$->B$EDEF;
                       Q$=P$;
                       P$=PINCRW(P$,SIZEW(B$EDEF));
                       END;
                    L1.ENTL$=Q$;
                    HD1.EPRECSIZE=HD1.EPRECSIZE-SIZEW(B$EDEF);
                    END;
                 END;
              END;
           END;
        IF FOOPT
        THEN DO;
           RUKEY.TYPE=%TYPEDEF;
           RUKEY.PAGE=0;
           WRRU.BUF_.BUF$=L1.ENT$;
           WRRU.BUF_.BOUND=HD1.EPRECSIZE*4-1;
           CALL M$WRITE(WRRU);
           CALL M$WRITE(WRHD);
           END;
%EJECT;
ERRM:   PROC(MES);
DCL MES UBIN;
DCL MESG(0:9) CHAR(30) CONSTANT INIT
('THATS NO SHARED LIBRARY'
,'NO PROPER TRANSFER VECTOR'
,'ENTRY IN TV NOT A TRA'
,'CANT GET MEMORY FOR RECORD'
,'CANT FIND RECORD'
);
DCL 1 M STATIC,
      2 * CHAR(0) INIT('RUN UNIT NOT MODIFIED... '),
      2 ER CHAR(30);
%FPT_WRITE (FPTN=WERR,
         STCLASS=CONSTANT,
         DCB=M$LO,
         BUF=M);
/*
*/
        M.ER=MESG(MES);
        CALL M$WRITE(WERR);
        CALL M$XXX;
END ERRM;
%EJECT;
RDALLOC: PROC(P$,WDS,TYPE,PAGE,DCB#);
DCL P$ PTR;
DCL WDS UBIN HALF UNAL;
DCL TYPE UBIN;
DCL PAGE UBIN;
DCL DCB# UBIN;
DCL ARS UBIN BASED;
%FPT_READ (FPTN=RDRU,
         DCB=M$SI,
         KEY=RUKEY,
         KEYS=YES);
/*
*/
        VEC.PTR$=ADDR(NIL);
        RUKEY.TYPE=TYPE;
        RUKEY.NODE=0;
        RUKEY.PAGE=PAGE;
        GDS.V.SEGSIZE#=WDS*2;
        CALL M$GDS(GDS) ALTRET(NOMEM);
        RDRU.BUF_=VEC;
        WRRU.BUF_=VEC;
        RDRU.V.DCB#=DCB#;
        CALL M$READ(RDRU) ALTRET(NOREC);
        WRRU.BUF_.BOUND=DCBADDR(DCB#)->ARS-1;
        P$=VEC.PTR$;
        RETURN;
NOMEM:  CALL ERRM(3);
NOREC:  CALL ERRM(4);
END RDALLOC;
%EJECT;
FINDENT: PROC(SYMB,LOC,PTRS) ALTRET;
DCL 1 SYMB ALIGNED,
      2 SZ UBIN HALF UNAL,
      2 TX CHAR(SYMB.SZ);
DCL LOC UBIN;
DCL 1 PTRS,
      2 ENT$ PTR,
      2 ENTC$ PTR,
      2 ENTL$ PTR,
      2 NM$ PTR,
      2 NMC$ PTR,
      2 NML$ PTR,
      2 PROC$ PTR,
      2 INST,
        3 ADDRESS UBIN HALF UNAL,
        3 OP UBIN HALF UNAL,
      2 PAGE UBIN,
      2 DCB# UBIN,
      2 SLOC UBIN,
      2 ELOC UBIN;
/*
*/
        PTRS.ENTC$=PTRS.ENT$;
        DO WHILE (PTRS.ENTC$<PTRS.ENTL$);
           PTRS.NMC$=PINCRW(PTRS.NM$,B$EDEF.NPOINTER);
           IF SYMB=B$DNAME
           THEN DO;
              LOC=B$EDEF.ISADDR;
              RETURN;
              END;
           PTRS.ENTC$=PINCRW(PTRS.ENTC$,SIZEW(B$EDEF));
           END;
        ALTRETURN;
END FINDENT;
%EJECT;
FINDENTLOC: PROC(ISADDR,P$,PTRS) ALTRET;
DCL ISADDR UBIN HALF UNAL;
DCL Q$ PTR;
DCL P$ PTR;
DCL 1 PTRS,
      2 ENT$ PTR,
      2 ENTC$ PTR,
      2 ENTL$ PTR,
      2 NM$ PTR,
      2 NMC$ PTR,
      2 NML$ PTR,
      2 PROC$ PTR,
      2 INST,
        3 ADDRESS UBIN HALF UNAL,
        3 OP UBIN HALF UNAL,
      2 PAGE UBIN,
      2 DCB# UBIN,
      2 SLOC UBIN,
      2 ELOC UBIN;
/*
*/
        P$=PTRS.ENT$;
        DO WHILE (P$<PTRS.ENTL$);
           IF ISADDR=P$->B$EDEF.ISADDR
           THEN DO;
              Q$=PINCRW(PTRS.NM$,P$->B$EDEF.NPOINTER);
              IF NOT SUBSTR(Q$->B$DNAME.TEXT,Q$->B$DNAME.COUNT-1,1)='_'
              THEN
                 RETURN;
              END;
           P$=PINCRW(P$,SIZEW(B$EDEF));
           END;
        ALTRETURN;
END FINDENTLOC;
%EJECT;
GETWD:  PROC(PTRS,INST);
DCL 1 PTRS,
      2 ENT$ PTR,
      2 ENTC$ PTR,
      2 ENTL$ PTR,
      2 NM$ PTR,
      2 NMC$ PTR,
      2 NML$ PTR,
      2 PROC$ PTR,
      2 INST,
        3 ADDRESS UBIN HALF UNAL,
        3 OP UBIN HALF UNAL,
      2 PAGE UBIN,
      2 DCB# UBIN,
      2 SLOC UBIN,
      2 ELOC UBIN;
DCL INST UBIN;
DCL PAGE UBIN;
DCL INSTS(0:0) UBIN BASED(PTRS.PROC$);
/*
*/
        PAGE=PTRS.SLOC/HD1.PRECSIZE;
        IF NOT PTRS.PAGE=PAGE
        THEN DO;
           IF NOT PTRS.PAGE=0
           THEN DO;
              CALL M$WRITE(WRRU);
              CALL M$FDS(GDS);
              END;
           CALL RDALLOC(PTRS.PROC$,HD1.PRECSIZE,%TYPPROG,PAGE*HD1.PRECSIZE,PTRS.DCB#);
           END;
        PTRS.PAGE=PAGE;
        INST=INSTS(MOD(PTRS.SLOC,HD1.PRECSIZE));
        RETURN;
/*
*/
PUTWD:  ENTRY(PTRS,INST);
        INSTS(MOD(PTRS.SLOC,HD1.PRECSIZE))=INST;
        RETURN;
END GETWD;
%EJECT;
CVOCT:  PROC(TX,OCT);
DCL TX(0:5) CHAR(1);
DCL OCT(0:5) UBIN(3) UNAL;
DCL I SBIN;
/*
*/
        I=0;
        DO WHILE (I<6);
           TX(I)=BINASC(ASCBIN('0')+OCT(I));
           I=I+1;
           END;
        RETURN;
END CVOCT;
END LIBTV;
