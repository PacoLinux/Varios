/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/* LAP - looks at the PPUT table and makes a nice report */
LAP: PROC MAIN;
 
      %INCLUDE CP_6;
      %INCLUDE B_SEGIDS_C;
      %INCLUDE XU_FORMAT_C;
      %INCLUDE XUF_ENTRY;
      %INCLUDE MM_DATA_R;
 
      DCL I                            SBIN;
 
      DCL LAST                         SBIN;
      DCL LAST2                        UBIN;
 
      DCL 1 CURRENT,
            2 BAD                      BIT(1),
            2 SUSPECT                  BIT(1);
 
      DCL BAD1_FMT                     CHAR(0)   STATIC
            INIT('Page %D is bad');
      DCL BAD_FMT                      CHAR(0)   STATIC
            INIT('Pages %D thru %D are bad');
 
      DCL SUSPECT1_FMT                 CHAR(0)   STATIC
            INIT('Page %D is suspect');
      DCL SUSPECT_FMT                  CHAR(0)   STATIC
            INIT('Pages %D thru %D are suspect');
 
      DCL GOOD1_FMT                    CHAR(0)   STATIC
            INIT('Page %D is good');
      DCL GOOD_FMT                     CHAR(0)   STATIC
            INIT('Pages %D thru %D are good');
 
      DCL 1 B$PPUT$                    CONSTANT,
            2 * BIT(24)                UNAL INIT('00000000'O),
            2 * BIT(12)                UNAL INIT(%PPUTSID);
      DCL PPUT$                        PTR;
 
      DCL LO_BUFFER                    CHAR(80)  STATIC;
      DCL M$LO                         DCB;
 
      DCL DAM$INIT                     ENTRY     ALTRET;
      DCL DAM$MAP                      ENTRY(5)  ALTRET;
 
      %F_FDS (BUF=LO_BUFFER,
              DCB=M$LO);
 
      %VLR_MONINFO;
 
      %FPT_MONINFO (MONINFO=VLR_MONINFO);
 
      CALL DAM$INIT;
      CALL DAM$MAP (B$PPUT$, PPUT$, 0, 0);
 
      CALL M$MONINFO (FPT_MONINFO);
 
      LAST = 0;
      CURRENT.BAD = PPUT$->MM$PPUT.BAD(0);
      CURRENT.SUSPECT = PPUT$->MM$PPUT.SUSPECT(0);
 
      DO I = 1 TO VLR_MONINFO.PCORE#;
         IF CURRENT.BAD ~= PPUT$->MM$PPUT.BAD(I) OR
            CURRENT.SUSPECT ~= PPUT$->MM$PPUT.SUSPECT(I) THEN
DO_LAST:    DO;
               IF I-LAST = 1 THEN
                  DO;
                     LAST2 = LAST;
                     IF CURRENT.BAD THEN
                        CALL X$WRITE (F_FDS, VECTOR(BAD1_FMT), VECTOR(LAST));
                     ELSE
                     IF CURRENT.SUSPECT THEN
                        CALL X$WRITE (F_FDS, VECTOR(SUSPECT1_FMT), VECTOR(LAST));
                     ELSE
                        CALL X$WRITE (F_FDS, VECTOR(GOOD1_FMT), VECTOR(LAST));
                     END;
               ELSE
                  DO;
                     LAST2 = I - 1;
                     IF CURRENT.BAD THEN
                        CALL X$WRITE (F_FDS, VECTOR(BAD_FMT), VECTOR(LAST), VECTOR(LAST2));
                     ELSE
                     IF CURRENT.SUSPECT THEN
                        CALL X$WRITE (F_FDS, VECTOR(SUSPECT_FMT), VECTOR(LAST), VECTOR(LAST2));
                     ELSE
                        CALL X$WRITE (F_FDS, VECTOR(GOOD_FMT), VECTOR(LAST), VECTOR(LAST2));
                     END;
               IF LAST2 = VLR_MONINFO.PCORE# THEN CALL M$EXIT;
               CURRENT.BAD = PPUT$->MM$PPUT.BAD(I);
               CURRENT.SUSPECT = PPUT$->MM$PPUT.SUSPECT(I);
               LAST = I;
               END;
            END;
         GOTO DO_LAST;
 
END LAP;
