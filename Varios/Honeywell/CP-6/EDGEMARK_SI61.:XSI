/*M*  EDGEMARK_SI6   PL-6 source for edge-marking program */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
EDGEMARK: PROC MAIN;
 
%INCLUDE B_ERRORS_C;
%INCLUDE CP_6;
%INCLUDE CP_6_SUBS;
%INCLUDE B$JIT;
%INCLUDE FM$FIT;
%INCLUDE XU_MACRO_C;
%INCLUDE EDGEMARK_C61;
%INCLUDE NK_VFC_C;
 
%B$TCB  (STCLASS="BASED(B$TCB$)");
%B$ALT;
%F$DCB;
 
%P_PCB  (W=PARSE_WORK_AREA,
         WSZ="SIZEW(PARSE_WORK_AREA)",
         R=EDGEMARK_OPTIONS);
 
 
%PARSE$OUT (STCLASS="BASED(P_PCB.OUT$)");
%PARSE$SYM (STCLASS=BASED);
 
%CODE16;
 
%FPT_READ  (FPTN=READ_SI,
            DCB=M$SI,
            BUF=LINE);
 
%FPT_WRITE (FPTN=WRITE_LINE,
            DCB=M$LO,
            BUF=LINE,
            VFC=YES);
 
%FPT_WRITE (FPTN=WRITE_EDGE,
            DCB=M$LO,
            BUF=EDGE_IMAGE,
            VFC=YES);
 
%FPT_WRITE (FPTN=WRITE_ME,
            DCB=M$ME);
 
%FPT_OPEN  (FPTN=OPEN_SI,
            DCB=M$SI,
            FUN=IN);
 
%FPT_OPEN  (FPTN=OPEN_LO,
            DCB=M$LO,
            ORG=UR,
            DISP=NAMED,
            FUN=CREATE);
 
%FPT_CLOSE (FPTN=CLOSE_SI,
            DCB=M$SI);
 
%FPT_CLOSE (FPTN=CLOSE_LO,
            DCB=M$LO,
            DISP=SAVE);
 
%FPT_DEVICE   (FPTN=EJECT_LO,
               DCB=M$LO,
               PAGE=YES);
 
%FPT_ERRMSG (OUTDCB1=M$ME, SOURCE=ALTRET, BUF=LINE);
 
%FPT_LDEV;
 
%VLP_FORM  (FPTN=OUTPUT_FORM,
            STCLASS="STATIC SYMDEF",
            FORM=' ');
 
DCL M$SI DCB;
DCL M$LO DCB;
DCL M$ME DCB;
 
DCL M$SI$ PTR;
DCL M$LO$ PTR;
 
DCL B$JIT$ PTR SYMREF;
DCL B$TCB$ PTR SYMREF;
DCL EDGEMARK_OPTIONS UBIN SYMREF;
 
DCL PARSE_WORK_AREA (0:99) UBIN STATIC;
 
DCL TEXT$ PTR;
 
DCL 1 LINE STATIC,
   2 VFC CHAR (1),
   2 TEXT CHAR (140);
 
DCL MARKING LOGICAL;
DCL STRIPING LOGICAL;
DCL MORE_STRIKES LOGICAL;
DCL FORCE_EJECT LOGICAL STATIC INIT (%YES#);
DCL BREAK_STREAM LOGICAL STATIC INIT (%NO#);
DCL NARROW LOGICAL STATIC INIT (%NO#);
DCL STRIPE LOGICAL STATIC INIT (%YES#);
DCL MORSE_CODE LOGICAL STATIC INIT (%YES#);
DCL COPIES UBIN;
DCL PLACE UBIN;
DCL LINENO SBIN;
DCL PAGENO UBIN;
DCL INITIAL_PAGE UBIN;
DCL PAGES UBIN;
DCL LENGTH UBIN;
DCL TOTAL UBIN;
DCL CYCLE SBIN STATIC INIT (0);
DCL MARK_CHARS CHAR (8) STATIC INIT ('$HZ');
DCL PAGE_WIDTH UBIN STATIC INIT (108);
DCL BREAK_AFTER SBIN STATIC INIT (-1);
 
DCL FPARAM_AREA (0:1023) UBIN;
 
DCL CODE16$ PTR;
 
DCL EDGE_TEXT CHAR (22);
 
DCL LEFT_TEXT CHAR (22);
DCL RIGHT_TEXT CHAR (22);
 
DCL LEFT_LEN UBIN STATIC INIT (0);
DCL RIGHT_LEN UBIN STATIC INIT (0);
 
DCL LEFT_IMAGE CHAR (176);
DCL RIGHT_IMAGE CHAR (176);
 
DCL LEFT_COUNT UBIN STATIC INIT (0);
DCL RIGHT_COUNT UBIN STATIC INIT (0);
 
DCL LEFT_END SBIN STATIC INIT (999);
DCL RIGHT_END SBIN STATIC INIT (-1);
 
DCL EDGE_LINE (0:7) CHAR (140);
 
DCL 1 EDGE_IMAGE STATIC,
      2 VFC CHAR (1),
      2 TEXT CHAR (140);
 
DCL 1 BREAK_MESSAGE STATIC,
      2 * CHAR (0) INIT ('Performing automatic !LDEV of stream '),
      2 STREAMNAME CHAR (4) INIT (' '),
      2 * CHAR (0) INIT (';');
 
DCL I SBIN;
DCL J SBIN;
DCL K SBIN;
DCL L SBIN;
 
DCL XLATION_TABLE CHAR (2) STATIC INIT ('  ');
 
DCL 1 STRIPE_BYTES (0:29) CONSTANT UNAL,
      2 * BIT (36) UNAL INIT ('0'O * 0),
      2 * BIT (18) UNAL INIT ('001001'O * 0);
 
DCL 1 STRIPE_STRING REDEF STRIPE_BYTES CHAR (180);
 
DCL MABLE7 ENTRY (5) ALTRET;
DCL X$PARSE ENTRY (1) ALTRET;
DCL XSF$LOCCODP ENTRY (2) ALTRET;
 
%EJECT;
WAIL: PROC (STRING) ALTRET;
 
DCL STRING CHAR (140);
 
DCL ENDIT UBIN;
 
   CALL INDEX (ENDIT, ';', STRING);
 
   WRITE_ME.BUF_ = VECTOR(SUBSTR(STRING, 0, ENDIT));
 
   CALL M$WRITE (WRITE_ME);
 
   ALTRETURN;
 
END WAIL;
 
%EJECT;
GENERATE_PATTERN: PROC;
 
DCL I SBIN;
DCL J SBIN;
DCL K SBIN;
DCL L SBIN;
DCL N SBIN;
 
DCL 1 MORSE(0:47) CONSTANT,
      2 L UNAL UBIN BYTE INIT
        ( 3, 4, 8, 9, 6, 1, 8, 7, 7, 3,10, 7, 8, 5, 4, 8, 9,10, 6, 5,
          2, 6, 8, 7, 9,10, 9,13,12,11,10, 9,10,11,12,13,14,11,15,14,
         14,14,15,13,15,15,14, 0),
      2 C UNAL CHAR(15) INIT
        ('               ','X XX           ','XX X X X       ',
         'XX X XX X      ','XX X X         ','X              ',
         'X X XX X       ','XX XX X        ','X X X X        ',
         'X X            ','X XX XX XX     ','XX X XX        ',
         'X XX X X       ','XX XX          ','XX X           ',
         'XX XX XX       ','X XX XX X      ','XX XX X XX     ',
         'X XX X         ','X X X          ','XX             ',
         'X X XX         ','X X X XX       ','X XX XX        ',
         'XX X X XX      ','XX X XX XX     ','XX XX X X      ',
         'X XX XX XX XX  ','X X XX XX XX   ','X X X XX XX    ',
         'X X X X XX     ','X X X X X      ','XX X X X X     ',
         'XX XX X X X    ','XX XX XX X X   ','XX XX XX XX X  ',
         'XX XX XX XX XX ','XX X X XX X    ','XX XX X X XX XX',
         'X XX X XX X XX ','XX X XX X XX X ','XX XX XX X X X ',
         'X XX XX XX XX X','XX X X X X XX  ','XX X XX XX X XX',
         'XX X XX XX X XX','X X XX XX X XX ','               ');
 
DCL MX(0:127) CONSTANT UNAL UBIN BYTE INIT
    (47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,
     47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,
      1,47,42,47,47,47,47,42,44,45,47,47,38,43,39,37,
     36,27,28,29,30,31,32,33,34,35,41,40,47,47,47,47,
     47, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,
     16,17,18,19,20,21,22,23,24,25,26,47,47,47,47,46,
     47, 1, 2, 3, 4, 5, 6, 7, 8, 9,10,11,12,13,14,15,
     16,17,18,19,20,21,22,23,24,25,26,47,47,47,47,47);
 
   DO I = 0 TO 6;
 
      IF PAGES > 21
        THEN DO;
 
         CALL GET_LINE (I, LEFT_TEXT, LEFT_LEN, LEFT_IMAGE, LEFT_COUNT);
         CALL GET_LINE (I, RIGHT_TEXT, RIGHT_LEN, RIGHT_IMAGE, RIGHT_COUNT);
 
         IF NARROW
           THEN DO;
 
            CALL COMPRESS (LEFT_IMAGE, LEFT_COUNT);
            CALL COMPRESS (RIGHT_IMAGE, RIGHT_COUNT);
            END;
 
         EDGE_LINE(I) = ' ';
 
         CALL STUFF (EDGE_LINE(I), RIGHT_IMAGE, RIGHT_COUNT, %RIGHT_EDGE);
         CALL STUFF (EDGE_LINE(I), LEFT_IMAGE, LEFT_COUNT, %LEFT_EDGE);
 
         END;
 
        ELSE DO;
 
         EDGE_LINE(I) = ' ';
 
         IF MORSE_CODE
           THEN DO;
 
            K=0;
            DO J=0 TO LEFT_LEN-1;
              N=MX(MOD(ASCBIN(SUBSTR(LEFT_TEXT,J,1)),128));
              L=MINIMUM(MORSE.L(N),PAGE_WIDTH-K);
              IF L>0 THEN
                SUBSTR(EDGE_LINE(I),K,L)=SUBSTR(MORSE.C(N),0,L);
              K=MINIMUM(K+L+3,PAGE_WIDTH);
              END;
            END;
 
          ELSE DO;
 
            SUBSTR (EDGE_LINE(I), PAGES, 1) = 'X';
            SUBSTR (EDGE_LINE(I), PAGE_WIDTH - PAGES - 1, 1) = 'X';
 
            END;
 
         END;
 
      EDGE_LINE(7) = ' ';
 
      DO J = 0 TO LENGTHC(EDGE_LINE(I)) - 1;
 
         IF SUBSTR(EDGE_LINE(I), J, 1) = ' '
           THEN
            CALL INSERT (EDGE_LINE(I), J, 1, BINASC(0));
           ELSE
            CALL INSERT (EDGE_LINE(I), J, 1, BINASC(1));
 
         END /* do J */;
 
      END /* do I */;
 
   IF PAGES > 21
     THEN DO;
 
      LEFT_END = LEFT_COUNT + 2;
      RIGHT_END = PAGE_WIDTH - RIGHT_COUNT - 2;
 
      IF STRIPE
        THEN
         IF COPIES > 1
           THEN
            IF LEFT_END >= RIGHT_END - 6
              THEN DO;
 
               STRIPING = %NO#;
               CALL WAIL ('Insufficient space for stripes;');
 
               END;
 
              ELSE
               STRIPING = %YES#;
 
           ELSE
            STRIPING = %NO#;
 
        ELSE
         STRIPING = %NO#;
 
      END;
 
     ELSE
      STRIPING = %NO#;
 
   RETURN;
 
END GENERATE_PATTERN;
 
%EJECT;
GET_LINE: PROC (LINE#, INPUT, IN_LEN, OUTPUT, OUT_LEN);
 
DCL LINE# UBIN;
DCL INPUT CHAR (22);
DCL IN_LEN UBIN;
DCL OUTPUT CHAR (176);
DCL OUT_LEN UBIN;
 
   OUTPUT = ' ';
 
   IF IN_LEN = 0
     THEN
      OUT_LEN = 0;
     ELSE DO;
 
      IF IN_LEN > 22
        THEN
         IN_LEN = 22;
 
      CALL MABLE7 (LINE#, INPUT, IN_LEN, OUTPUT, OUT_LEN);
 
      END;
 
   RETURN;
 
END GET_LINE;
 
%EJECT;
COMPRESS: PROC (TEXT, COUNT);
 
DCL TEXT CHAR (176);
DCL COUNT SBIN;
 
DCL TEMP CHAR (140);
DCL I SBIN;
DCL J UBIN;
DCL INPOS UBIN;
DCL OUTPOS UBIN;
 
   TEMP = ' ';
 
   DO I = 0 TO (COUNT / 8) - 1;
 
      INPOS = I * 8;
      OUTPOS = I * 6;
 
      CALL INSERT (TEMP, OUTPOS, 2, SUBSTR(TEXT, INPOS, 2));
      CALL INSERT (TEMP, OUTPOS + 2, 1, SUBSTR(TEXT, INPOS + 3, 1));
      CALL INSERT (TEMP, OUTPOS + 3, 3, SUBSTR(TEXT, INPOS + 5, 3));
 
      IF SUBSTR(TEXT, INPOS + 2, 1) ~= ' '
        THEN
         CALL INSERT (TEMP, OUTPOS + 1, 1, SUBSTR(TEXT, INPOS + 2, 1));
 
      IF SUBSTR(TEXT, INPOS + 4, 1) ~= ' '
        THEN
         CALL INSERT (TEMP, OUTPOS + 3, 1, SUBSTR(TEXT, INPOS + 4, 1));
 
      END;
 
   TEXT = TEMP;
   COUNT = COUNT * 3 / 4;
 
   RETURN;
 
END COMPRESS;
 
%EJECT;
STUFF: PROC (TARGET, TEXT, COUNT, WHERE);
 
DCL TARGET CHAR (140);
DCL TEXT CHAR (176);
DCL COUNT UBIN;
DCL WHERE UBIN;
 
DCL START UBIN;
DCL LEN UBIN;
 
   IF COUNT = 0
     THEN
      RETURN;
 
   DO CASE (WHERE);
 
     CASE (%LEFT_EDGE);
 
      START = 0;
 
      IF COUNT > PAGE_WIDTH - 2
        THEN
         LEN = PAGE_WIDTH;
        ELSE
         LEN = COUNT + 2;
 
     CASE (%RIGHT_EDGE);
 
      IF COUNT > PAGE_WIDTH
        THEN
         LEN = PAGE_WIDTH;
        ELSE
         LEN = COUNT;
 
      START = PAGE_WIDTH - LEN;
 
     END;
 
   CALL INSERT (TARGET, START, LEN, TEXT);
 
   RETURN;
 
END STUFF;
 
%EJECT;
   M$SI$ = DCBADDR(DCBNUM(M$SI));
   M$LO$ = DCBADDR(DCBNUM(M$LO));
 
   LEFT_TEXT = M$SI$ -> F$DCB.NAME#.C;
   LEFT_LEN = M$SI$ -> F$DCB.NAME#.L;
 
   IF M$LO$ -> F$DCB.WIDTH# > 0
     THEN
      PAGE_WIDTH = MINIMUM (M$LO$ -> F$DCB.WIDTH# - 1, 140);
 
   EDGE_TEXT = ' ';
   MARKING = %YES#;
 
   IF B$JIT.CCDISP < B$JIT.CCARS
     THEN DO;
 
      P_PCB.TEXT$ = ADDR(SUBSTR(B$JIT.CCBUF, B$JIT.CCDISP));
      P_PCB.NCHARS = B$JIT.CCARS - B$JIT.CCDISP + 1;
 
      CALL X$PARSE (P_PCB) ALTRET (PARSE_ERROR);
 
      DO I = 0 TO OUT$BLK.NSUBLKS - 1;
 
         TEXT$ = OUT$BLK.SUBLK$(I) -> OUT$BLK.SUBLK$(0);
 
         DO CASE (OUT$BLK.SUBLK$(I) -> OUT$BLK.CODE);
 
           CASE (%LEFT_EDGE);
 
            LEFT_TEXT = TEXT$ -> OUT$SYM.TEXT;
            LEFT_LEN = TEXT$ -> OUT$SYM.COUNT;
 
           CASE (%RIGHT_EDGE);
 
            RIGHT_TEXT = TEXT$ -> OUT$SYM.TEXT;
            RIGHT_LEN = TEXT$ -> OUT$SYM.COUNT;
 
           CASE (%FORM_NAME);
 
            OUTPUT_FORM.FORM# = TEXT$ -> OUT$SYM.TEXT;
 
           CASE (%MARK_CHAR);
 
            MARK_CHARS = TEXT$ -> OUT$SYM.TEXT;
 
           CASE (%PAGE_WIDTH);
 
            CALL CHARBIN (PAGE_WIDTH, TEXT$ -> OUT$SYM.TEXT);
 
           CASE (%NARROW);
 
            NARROW = %YES#;
 
           CASE (%BREAK_AFTER);
 
            CALL CHARBIN (BREAK_AFTER, TEXT$ -> OUT$SYM.TEXT);
 
           CASE (%NO_STRIPE);
 
            STRIPE = %NO#;
 
           CASE (%NO_MORSE);
 
            MORSE_CODE = %NO#;
 
           END;
 
         END;
 
      DO NEVER;
 
PARSE_ERROR: ;
 
         CALL WAIL ('Invalid options.;');
 
         END;
 
      END;
 
   OPEN_SI.FPARAM_ = VECTOR(FPARAM_AREA);
 
   IF M$SI$ -> F$DCB.ASN# ~= %FILE#
     AND M$SI$ -> F$DCB.ASN# ~= %TAPE#
   THEN OPEN_SI.V.ASN# = %FILE#;
   CALL M$OPEN (OPEN_SI) WHENALTRETURN DO;
ERRALT: CALL M$ERRMSG (FPT_ERRMSG);
      CALL WAIL ('  I give up!;');
 
      CALL M$ERR;
 
   END;
 
   CODE16$ = ADDR(FPARAM_AREA);
 
   CALL XSF$LOCCODP (CODE16$, 16) ALTRET (NOT_A_UR_FILE);
 
   DO NEVER;
 
NOT_A_UR_FILE:
 
      CALL WAIL ('Input file''s FIT contains no CODE16 block - it''s not a;');
      CALL WAIL ('proper unit-record file.  I give up!;');
 
      CALL M$ERR;
 
      END;
 
 
   PAGES = CODE16$ -> CODE16.PAGENO + 1;
 
   IF MARKING
     THEN
      IF PAGES < 150
        THEN DO;
 
         COPIES = 1;
         LENGTH = PAGES;
         END;
 
        ELSE DO;
 
         COPIES = PAGES / 150;
         LENGTH = PAGES / COPIES;
         END;
 
   TOTAL = LEFT_LEN + RIGHT_LEN;
 
   IF LEFT_LEN > 0 AND RIGHT_LEN > 0
     THEN
      TOTAL = TOTAL + 1;
 
   IF OUTPUT_FORM.FORM# = ' '
     THEN
      IF SUBSTR(CODE16$ -> CODE16.FORM, 0, 5) = 'STDLP'
       THEN
         CALL CONCAT (OUTPUT_FORM.FORM#, 'PERF', SUBSTR(CODE16$ -> CODE16.FORM,
          5));
 
   IF OUTPUT_FORM.FORM# ~= ' '
     THEN
      OPEN_LO.FORM_ = VECTOR(OUTPUT_FORM);
 
   CALL M$OPEN (OPEN_LO) ALTRET (ERRALT);
 
   CODE16$ = M$LO$ -> F$DCB.CODE16$;
 
   IF MARKING
     THEN DO;
 
      IF CODE16$ = ADDR(NIL)
        THEN DO;
 
         MARKING = %NO#;
         CALL WAIL ('M$LO has no FORM - edge marking skipped.;');
         END;
 
        ELSE DO;
 
         IF CODE16$ -> CODE16.FORM = ' '
          OR SUBSTR(CODE16$ -> CODE16.FORM, 0, 3) = 'STD'
           THEN
            CALL WAIL ('Edgemarking to standard form (unlikely to work);');
 
         IF PAGES < 21
           THEN DO;
 
            CALL WAIL ('Very short listing - printout will be striped.;');
            NARROW = %YES#;
            END;
 
         IF NOT NARROW
           THEN DO;
 
            IF PAGES < 150
              THEN DO;
 
               CALL WAIL ('Short listing - switching to NARROW mode.;');
               NARROW = %YES#;
               END;
 
              ELSE DO;
 
               IF TOTAL * 8 > PAGE_WIDTH
                 THEN DO;
 
                  NARROW = %YES#;
 
                  IF TOTAL * 6 <= PAGE_WIDTH
                    THEN
                     CALL WAIL('Text too wide - switching to NARROW mode.;');
 
                  END;
 
               END;
 
            END;
 
         IF TOTAL * 6 > PAGE_WIDTH
           THEN
            CALL WAIL ('Text too wide - will be truncated.;');
 
         CALL GENERATE_PATTERN;
 
         INITIAL_PAGE = CODE16$ -> CODE16.PAGENO;
 
         END;
 
      END;
 
   DO FOREVER;
 
      CALL M$READ (READ_SI) ALTRET (ALTRET_ON_READ);
 
      DO NEVER;
 
ALTRET_ON_READ:
         IF B$TCB.ALT$ -> B$ALT.ERR.CODE ~= %E$LD
           THEN
            GOTO DONE;
 
         END;
 
      WRITE_LINE.BUF_.BOUND = M$SI$ -> F$DCB.ARS# - 1;
 
      IF MARKING
        THEN
         PAGENO = CODE16$ -> CODE16.PAGENO - INITIAL_PAGE;
        ELSE
         PAGENO = 0;
 
      IF LINE.VFC = '0'
       AND CYCLE = 1                    /* we just did a page header          */
        THEN
         LINE.VFC = '`';
 
      IF PAGENO > 0
       AND (LINE.VFC = '0'
       OR (LINE.VFC >= 'p' AND LINE.VFC <= 'z')
       OR (M$SI$ -> F$DCB.DVBYTE & %DVBYTE_TOP#) )
        THEN DO;
 
         FORCE_EJECT = %YES#;
         CYCLE = 2;
 
         PLACE = MOD (PAGENO, LENGTH);
 
         IF LENGTH < 21
           THEN
            LINENO = (PLACE * 7) / LENGTH;
           ELSE
            LINENO = ( (PLACE * 9) / LENGTH ) - 1;
 
         IF (LINENO < 0 OR LINENO > 6) AND STRIPING
           THEN
            LINENO = 7;
 
         IF (LINENO >= 0 AND LINENO <= 6)
          OR STRIPING
           THEN DO;
 
            J = 0;
            MORE_STRIKES = %YES#;
 
            IF STRIPING
              THEN
               CALL INSERT (EDGE_LINE(LINENO), LEFT_END, RIGHT_END - LEFT_END,
                SUBSTR(STRIPE_STRING, MOD(PAGENO / 20, 6)));
 
            DO WHILE (J < LENGTHC(MARK_CHARS) AND MORE_STRIKES);
 
               K = (CODE16$ -> CODE16.LINES - 1) - CODE16$ -> CODE16.LINENO;
 
               IF K >= 16
                 THEN DO;
 
                  EDGE_IMAGE.VFC = 'o';
                  EDGE_IMAGE.TEXT = ' ';
 
                  CALL M$WRITE (WRITE_EDGE);
 
                  END;
 
                 ELSE DO;
 
                  IF SUBSTR(MARK_CHARS, J, 1) = ' '
                   OR K < 0
                    THEN
                     MORE_STRIKES = %NO#;
 
                    ELSE DO;
 
                     EDGE_IMAGE.VFC = BINASC(ASCBIN('`') + K);
 
                     CALL INSERT (XLATION_TABLE, 1, 1, SUBSTR(MARK_CHARS, J));
 
                     CALL XLATE (EDGE_IMAGE.TEXT, XLATION_TABLE,
                      EDGE_LINE(LINENO));
 
                     J = J + 1;
 
                     CALL M$WRITE (WRITE_EDGE);
 
                     END;
 
                  END;
 
               END;
 
            END;
 
         END;
 
      IF MARKING
       AND (LINE.VFC = 'P' /* print & eject */
         OR LINE.VFC = %VFC_PGND /* end current page */)
        THEN DO;
 
         LINE.VFC = '`';
         FORCE_EJECT = %YES#;
         END;
 
        ELSE
         IF FORCE_EJECT
           THEN DO;
 
            CALL M$DEVICE (EJECT_LO);
            FORCE_EJECT = %NO#;
            END;
 
      CALL M$WRITE (WRITE_LINE);
 
      CYCLE = CYCLE - 1;
 
      END;
 
DONE:
 
   CALL M$DEVICE (EJECT_LO);
 
   IF CODE16$ ~= ADDR(NIL)
    AND M$LO$ -> F$DCB.FORM$ = ADDR(NIL)
    AND M$LO$ -> F$DCB.ASN# = %DEVICE#
    AND BREAK_AFTER >= 0
    AND M$LO$ -> F$DCB.CFU$ -> F$DCB.FORM$ -> CODE16.PAGENO > BREAK_AFTER
     THEN DO;
 
      BREAK_STREAM = %YES#;
      FPT_LDEV.V.STREAMNAME# = M$LO$ -> F$DCB.RES#;
 
      IF SUBSTR(FPT_LDEV.V.STREAMNAME#, 2) = '  '
        THEN
         CALL INSERT (FPT_LDEV.V.STREAMNAME#, 2, 2, '01');
 
      END;
 
   CALL M$CLOSE (CLOSE_LO);
   CALL M$CLOSE (CLOSE_SI);
 
   IF BREAK_STREAM
     THEN DO;
 
      BREAK_MESSAGE.STREAMNAME = FPT_LDEV.V.STREAMNAME#;
 
      CALL WAIL (BREAK_MESSAGE);
 
      CALL M$LDEV (FPT_LDEV);
 
      END;
 
   IF B$TCB.ALT$ -> B$ALT.ERR.CODE ~= %E$EOF THEN GOTO ERRALT;
   CALL M$EXIT;
 
END EDGEMARK;
