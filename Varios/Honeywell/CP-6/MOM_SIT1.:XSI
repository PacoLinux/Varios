.VM 1,2,1,1
.PDW 72
.PDL 66
.ALC
.fif
.SPF 26
M O M
 
SFA's Master Operations Monitor for CP6
 
Author:  Frank Mayhar
 
.ur %Date%
.HBB
|%Date%|MOM Program Book|Page: %PageNo%|
.hbe
.brp 1
.fin
.alc
An Overview of MOM
.alb
.spf 1
    MOM, the Master Operations Monitor, is a utility program that is
used to produce a real-time updated display of important system
parameters.  It was made as flexible as possible, to allow
special-purpose displays and to make it as easy as possible to
retailor existing displays or to produce entirely new displays for
different applications.  MOM uses the cursor positioning and special
screen attribute (if any) capabilities of the terminal upon which
she is run to produce well-formatted, easy-to-read displays.
 
    MOM requires the existence of three or four tables for each
screen displayed in order to run.  These tables are constructed with
the use of special PL6 macros (similar in some ways to the
Bull-supplied macros), which are defined in the file IN:MOM.
In addition, one other table (of start-pointers) must be defined,
which must be given the level-one names of each screen's tables.
 
    There are six macros defined in the IN:MOM file.  These are the
ROUTINE macro, which generates an entry in the routine table, the
FIELD macro, which generates an entry in the field table, the SCREEN
macro, which generates the screen table, the SPC_TITLES macro, which
generates the table for screen titles with special screen attributes
and is optional, the STARTS macro, which generates a table of start
pointers to the routine, screen, and special-title tables, and the
LVL1DCL macro, which generates a level-one DCL for the routine,
special-title, and field tables.
 
    The routine, field, and screen tables are the three tables that
are invariably required for MOM to display and update a screen.  The
screen table is separate and discrete from the routine and field
tables, and contains the actual screen, in the form of twenty-four
eighty-byte entries, which will be displayed first.  It contains all
titles and labels, and is essentially a virtual image of the initial
screen, before any actual values are displayed.  After MOM displays
the contents of this table, she completely ignores it (except to
redisplay it after return from the command menu).  The macro used to
generate this table is the SCREEN macro.
 
    The routine and field tables, on the other hand, are very
closely interrelated.  The routine table contains, among other
things, the ENTADDR of the routine that gathers this set of data,
the number of fields to be updated, and the actual address (as a PTR
variable) of each field to be updated.  Each of these addresses
point to an entry in the field table.  There may be as many as two
hundred fields for each routine table entry.  The field table
entries each contain the X and Y screen coordinates of the field,
highlighting information for that field, and the field itself, in
TEXTC format.  The macros used to generate entries in each of these
tables are the ROUTINE and FIELD macros, respectively.
 
    The third table, which is not required except to give special
screen attributes to permanent headings, is the special-title
table.  Each entry in this table contains the X and Y screen
coordinates of the title to have special screen attributes,
highlighting information for that title, and the title itself, in
TEXTC format.  The macro used to generate entries in this table is
the SPC_TITLES macro.
 
    MOM requires internally a table of start-pointers to the
beginning of the screen, routine, and special-title tables.  This
table is used to link the routine and special-title tables, and to
locate all three tables to display the information within them.
This table must be generated by the programmer.  The macro to
generate this table is the STARTS macro.
 
    A sixth macro has been provided to generate level-one DCLs and
names for the routine, field, and special-titles tables, as each
entry in these tables uses a level-two name and sublevels.  This
macro is LVL1DCL, and does nothing but generate "DCL 1 NAME
STATIC,".
.brp
.alc
MOM Macro Descriptions
.alb
.spf 1
    The following is a detailed description of each of the macros in
IN:MOM.
 
    The ROUTINE macro.
 
.fif
%ROUTINE(NAME=ROUTINE, UENTRY=NIL, LRUTS=0, RMULT=1, NFLDS=1,
         FIELD1=NIL, ..., FIELD200=NIL, LAST=",");
.fin
 
NAME = Structure Name.  This is the level-two name of this entry,
and must be unique within this set of entries.  Default is ROUTINE,
and must not be used.
 
UENTRY = ENTRY.  Locates the routine that gets the data to update
the fields specified in this entry.  If this routine does not exist
in the runtime program, MOM will ignore this and print default data
to the screen.  Default is NIL.
 
LRUTS = VALUE-DEC(0-?).  This initializes the field
NAME.ROUTINE.LASTREFR, which contains the UTS these fields were last
updated.  Default is 0.  This parameter need not be specified.
 
RMULT = VALUE-DEC(1-?).  This is the Refresh Multiplier.  Meaning:
these fields will be refreshed (updated) every RMULT sleep times
(see the MOM source).  Default is 1, which means refresh after every
sleep.
 
NFLDS = VALUE-DEC(1-200).  This is the number of fields to be
updated by this routine.  See the FIELD parameter.  Default is 1.
 
FIELDn = VARIABLE.  Where n is 1 to 200.  Locates an entry in the
field table.  There must be NFLD number of these parameters
specified, in sequential order, i.e. from FIELD1 to FIELD200.  The
default is ADDR(NIL), which may NOT be used.
 
LAST = ";".  Specify this parameter in the last ROUTINE macro call
to finish construction of the routine table.  Default is ",".
 
.fif
The structure is as follows:
 
.bbk
                 2 NAME,
                    3 ENT$ EPTR INIT(ENTADDR(UENTRY)),
                    3 * BIT(36),
                    3 LASTREFR UBIN INIT(LRUTS),
                    3 REFRMULT UBIN INIT(RMULT),
                    3 * BIT(36),
                    3 NFIELD UBIN INIT(NFLDS),
                    3 FLD1 PTR INIT(ADDR(FIELD1)),
                           .
                           .
                           .
                    3 FLDn PTR INIT(ADDR(FIELDn)) LAST
.bek
 
Where n corresponds to the NFLDS parameter.
.fin
 
    Only as many FLDn are generated as there are FIELDn specified in
the macro invocation.
.brp
    The FIELD macro.
 
.fif
%FIELD(NAME=FIELD, XCORD=0, YCORD=0, CVAL=' ', CLEN=0, HILATT=0,
       HILITE=NO, LAST=",");
.fin
 
NAME = Structure Name.  This is the level-two name of this entry,
and must be unique within this set of entries.  Default is FIELD,
and must not be used.
 
XCORD = VALUE-DEC(1-80).  This is the X coordinate of the beginning
of this field.  The default is 0, which may not be used.
 
YCORD = VALUE-DEC(1-24).  This is the Y coordinate of the beginning
of this field.  The default is 0, which may not be used.
 
CVAL = VALUE-CHAR(1-?).  This is the default contents of this field,
which will be printed if the data-gathering routine specified in the
routine table is not present.  The default is a one-byte blank
field.
 
CLEN = VALUE-DEC(1-?).  This is the length of the field.  Defaults
to SIZEC(CVAL).
 
HILATT = {NONE | BLINK | RVRVD | UNDLN | RVRBLN} specifies the screen attribute for this
field, where
NONE means no special attribute, BLINK means this field
blinks, RVRVD means this field is reverse-video, UNDLN means this field is
underlined, and RVRBLN means this field is reverse-video blinking.  NONE
is the default.  Note:  On terminals without video attribute
capability, octal zeroes (nulls) are written instead of the
attribute characters.  If such a terminal actually prints nulls,
strange things will happen.  To fix this, change the MOM source code
to disable the printing of nulls.
 
HILITE = {YES|NO}.  Specifies whether or not this field has special
video attributes.  Defaults to NO.  See the description for HIATT.
 
LAST = ";".  See this parameter for the ROUTINE macro.
 
.fif
The structure is as follows:
 
.bbk
                 2 NAME ALIGNED,
                    3 HILTE BIT(1) INIT(HILITE),
                    3 HIATT UBIN(35) UNAL INIT(HILATT),
                    3 XC UBIN(18) HALIGNED INIT(XCORD),
                    3 YC UBIN(18) HALIGNED INIT(YCORD),
                    3 * CHAR(16),
                    3 V,
                       4 L# UBIN(9) UNAL INIT(SIZEC(CVAL)),
                       4 C# CHAR(CLEN) INIT(CVAL) LAST
.bek
.fin
.brp
    The SPC_TITLES macro.
 
%SPC_TITLES(NAME=SPC_TITLES, XCORD=0, YCORD=0, TITLE=' ', TLEN=0,
            HILATT=0, LAST=",");
 
NAME = Structure Name.  See this parameter in the ROUTINE macro
description.  Defaults to SPC_TITLES.
 
XCORD = VALUE-DEC(1-80).  The X coordinate of the beginning of this
title.  The default is 0, which may not be used.
 
YCORD = VALUE-DEC(1-24).  See XCORD.
 
TITLE = VALUE-CHAR(1-?).  This is the title which is to be
highlighted.  If a title is specified here, it does not need to be
specified in the SCREEN macro.  Defaults to a one-byte blank field.
 
TLEN = VALUE-DEC(1-?).  Length of the title.  Default is
SIZEC(TITLE).
 
HILATT = VALUE-DEC(0-4).  See the description for the FIELD macro.
 
LAST = ";".  See the description for the ROUTINE macro.
 
.fif
The structure is as follows:
 
.bbk
                 2 NAME,
                    3 * BIT(36),
                    3 XC UBIN(18) HALIGNED INIT(XCORD),
                    3 YC UBIN(18) HALIGNED INIT(YCORD),
                    3 HIATT UBIN(9) UNAL INIT(HILATT),
                    3 TTL,
                       4 LEN UBIN(9) UNAL INIT(SIZEC(TITLE)),
                       4 VAL CHAR(TLEN) INIT(TITLE) LAST
.bek
.fin
.brp
    The STARTS macro.
 
%STARTS(SCREENS=0, ROUTINE1=NIL, SCREEN1=NIL, SPC1=NIL, ...,
        ROUTINE10=NIL, SCREEN10=NIL, SPC10=NIL);
 
SCREENS = VALUE-DEC(1-10).  Specifies how many screens exist, and
therefore how many entries are in the start-pointer table.  The
default is 0, and may not be used.  There is a maximum of ten
screens.
 
ROUTINEn = VARIABLE.  Locates the routine tables.  These parameters
must be entered in sequential order.  Give each parameter the
level-one name of the routine table desired.  There must be at least
one routine table specified.
 
SCREENn = VARIABLE.  Same as above, with the screen table.
 
SPCn = VARIABLE.  Same as above, with the special-titles table.
 
    This table is used internally to MOM, and therefore needs no
structure description.
.brp
 
    The LVL1DCL macro.
 
%LVL1DCL(NAME=LVL1, STATIC=STATIC);
 
NAME = Level-one structure name.  This is the name given to the
STARTS macro for each of the routine, screen, and special-title
tables.  Default is LVL1.  Don't use it.
 
STATIC = STATIC.  Specifies the storage class for this major
structure.  Defaults to STATIC.  Use the default, or don't blame me
for what happens.
 
    This macro may be used with the ROUTINE, FIELD, or SPC_TITLES
macros to produce an entire major structure.  Use it in this way:
 
.fif
                 %LVL1DCL(NAME=ROUTINE_TABLE_ONE);
                 %ROUTINE(params);
                      .
                      .
                      .
                 %ROUTINE(params,
                          LAST=";");
 
.fin
    This produces a structure that looks similar to this:
 
.fif
                 DCL 1 ROUTINE_TABLE_ONE STATIC,
                        2 NAME,
                            ...etc.
.fin
.spf 5
    Hopefully, this is enough documentation to give at least a
general understanding of how to generate new MOM screens.  For
extensive examples, and for examples of data-gathering routines, see
the MOM sources.
.spf 2
.alc
Caveat Emptor
