

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        1    
    1      /*M* QI_MACROS_M:  MACRO defs / invocs for the FPL interpreter.  */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7
    8      /*P* NAME:         QI_MACROS_M
    9           PURPOSE:      To provide the MACROs necessary to generate
   10                         descriptors for the CIP hardware, the context
   11                         area for the FPL interpreter, and to frame
   12                         various areas of the FPL program itself.
   13           DESCRIPTION:  QI_MACROS_M contains MACROs which define:
   14                         1)  CIP operations (QI@CIP_OPERATION), which
   15                             are blocks of data passed to the QCC$xxxx
   16                             routines to execute a desired CIP instruction
   17                             (ALR, etc.);
   18                         2)  CIP descriptors (QI_CIP_DESCRIPTOR), which
   19                             define the descriptors used to locate and
   20                             describe data manipulated by the CIP;
   21                         3)  the FPL interpreter context (QI_1), which
   22                             is a STATIC area allocated one-per-FPL-user;
   23                         4)  based structures which define the size and
   24                             shape of entities within the user's FPL
   25                             program;
   26                         5)  based structures which define the dynamic
   27                             area allocated to fields when they've been
   28                             M$DCLFLDed;
   29                         6)  CONSTANT FPTs;
   30                         7)  whatever else is in here.
   31      */
   32      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        2    
   33      /*
   34                              %%%%%     %%%%   %%%%%%
   35                             %%   %%     %%    %%   %%
   36                             %%          %%    %%   %%
   37                             %%          %%    %%%%%%
   38                             %%          %%    %%
   39                             %%   %%     %%    %%
   40                              %%%%%     %%%%   %%
   41                                                 %%%
   42                                                 %%%
   43            %%%%%   %% %%%    %%%%%   %% %%%%     %%     %%%%%%
   44           %%   %%  %%%  %%  %%   %%  %%%%       %%     %%
   45           %%   %%  %%%  %%  %%%%%%%  %%%                %%%%%
   46           %%   %%  %%%  %%  %%       %%                     %%
   47            %%%%%   %% %%%    %%%%%   %%                %%%%%%
   48                    %%
   49                    %%
   50                                                                          */
   51      /*D* NAME:         QI@CIP_OPERATION
   52           PURPOSE:      Used to generate a structure passed to
   53                         QCC$xxxx modules.
   54           DESCRIPTION:  This MACRO generates 3 two-word CIP descriptors,
   55                         PTRs to data which they describe, and a myriad
   56                         of other parameters, all to eventually be passed
   57                         to one or more QCC$xxxx routines.  Not all
   58                         descriptors or parameters generated will be used
   59                         by any one QCC$xxxx module, but the MACRO parameter
   60                         TYPE allows the user to specify which xxxx the
   61                         structure is primarily intended for.  For example,
   62                         the user who wishes to perform an ALR operation
   63                         from a source string to a target string would
   64                         invoke the macro with TYPE=ALR, and would then
   65                         be allowed to specify several initialization
   66                         values for other parameters.  When the structure
   67                         is actually passed to QCC$ALR, only the first
   68                         two CIP descriptors, their data pointers, the
   69                         first two LENs, the first two INXs, and FILL_CHAR
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        3    
   70                         will actually be used.
   71                         Also, a pool of commonly-used QI@CIP_OPERATIONs
   72                         is kept with STCLASS = CONSTANT and
   73                         NAME = QI_name:  see GENERAL_PURPOSE_CIPS.
   74      */
   75
   76        %MACRO QI@CIP_OPERATION
   77               ( NAME = QI@CIP_OPERATION,
   78                 CIPS_NAME = CIP,
   79                 FIRST_CIP_NAME = S,
   80                 SECOND_CIP_NAME = T,
   81                 THIRD_CIP_NAME = AUX,
   82                 DATAS_NAME = DATA,
   83                 FIRST_DATA_NAME = S$,
   84                 SECOND_DATA_NAME = T$,
   85                 THIRD_DATA_NAME = AUX$,
   86                 LENS_NAME = LEN,
   87                 FIRST_LEN_NAME = S,
   88                 SECOND_LEN_NAME = T,
   89                 THIRD_LEN_NAME = AUX,
   90                 DECS_NAME = DEC,
   91                 FIRST_DEC_NAME = S,
   92                 SECOND_DEC_NAME = T,
   93                 THIRD_DEC_NAME = AUX,
   94                 SRCH_VRFY_ARGS_NAME = SRCH_VRFY_ARGS,
   95                 SRCH_VRFY_ARGS_LEN_NAME = LEN,
   96                 SRCH_VRFY_ARGS_LIST_LEN_NAME = LIST_LEN,
   97                 SHIFT_COUNTS_NAME = SHIFT_COUNT,
   98                 FIRST_SHIFT_COUNT_NAME = S,
   99                 SECOND_SHIFT_COUNT_NAME = T,
  100                 THIRD_SHIFT_COUNT_NAME = AUX,
  101                 SRCH_VRFY_ELEMS_NAME = SRCH_VRFY_ELEMS,
  102                 SRCH_VRFY_ELEMS_LEN_NAME = LEN,
  103                 SRCH_VRFY_ELEMS_LIST_LEN_NAME = LIST_LEN,
  104                 INXS_NAME = INX,
  105                 FIRST_INX_NAME = S,
  106                 SECOND_INX_NAME = T,
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        4    
  107                 THIRD_INX_NAME = AUX,
  108                 FILL_CHAR_NAME = FILL_CHAR,
  109                 FILL_CHAR_TEXT_NAME = TEXT,
  110                 ROUND_NAME = ROUND,
  111                 SRCH_RESULT_NAME = SRCH_RESULT,
  112                 SRCH_RESULT_ARG_NUMBER_NAME = ARG_NUMBER,
  113                 SRCH_RESULT_DISP_NAME = DISP,
  114                 VRFY_RESULT_NAME = VRFY_RESULT,
  115                 VRFY_RESULT_DISP_NAME = DISP,
  116                 PICTURE_STRING_NAME = PICTURE_STRING,
  117                 PICTURE_STRING_INT_LEN_NAME = INTERMEDIATE_RESULT_LEN,
  118                 PICTURE_STRING_DEC_NAME = DEC,
  119                 COMP_RESULT_NAME = COMP_RESULT,
  120                 SIZE_ERROR_NAME = SIZE_ERROR,
  121                 TARGET_SIZE_NAME = TARGET_SIZE,
  122                 STCLASS = "  ",
  123                 LVL = 1,
  124                 TYPE ( ACM = "ACM",
  125                        ALR = "ALR",
  126                        CBD = "CBD",
  127                        CDB = "CDB",
  128                        DAD = "DAD",
  129                        DCM = "DCM",
  130                        DDV = "DDV",
  131                        DLS = "DLS",
  132                        DMC = "DMC",
  133                        DME = "DME",
  134                        DML = "DML",
  135                        DRS = "DRS",
  136                        DSB = "DSB",
  137                        MAT = "MAT",
  138                        SRCH = "SRCH",
  139                        VRFY = "VRFY",
  140                        ANY ) = "ALR",
  141                 FIRST_CIP_TYPE ( DISPLAY = 0,
  142                                  PACKED = 1,
  143                                  BINARY = 2,
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        5    
  144                                  ALPHANUMERIC = 3,
  145                                  ANY ) = 3,
  146                 FIRST_CIP_OFFSET = 0,
  147                 FIRST_CIP_LEN = 0,
  148                 FIRST_CIP_SIGN ( UNSIGNED = 0,
  149                                  TRAILING = 1,
  150                                  LEADING = 2,
  151                                  OVERPUNCHED = 3,
  152                                  ANY ) = 0,
  153                 FIRST_CIP_AS ( DEFAULT = "BITBIN('B'X)",
  154                                INDEX = "BITBIN('1B'X)",
  155                                ANY ) = "BITBIN('B'X)",
  156                 FIRST_CIP_FILL ( YES = 1,
  157                                  NO = 0,
  158                                  ANY ) = 1,
  159                 SECOND_CIP_TYPE ( DISPLAY = 0,
  160                                   PACKED = 1,
  161                                   BINARY = 2,
  162                                   ALPHANUMERIC = 3,
  163                                   ANY ) = 3,
  164                 SECOND_CIP_OFFSET = 0,
  165                 SECOND_CIP_LEN = 0,
  166                 SECOND_CIP_SIGN ( UNSIGNED = 0,
  167                                   TRAILING = 1,
  168                                   LEADING = 2,
  169                                   OVERPUNCHED = 3,
  170                                   ANY ) = 0,
  171                 SECOND_CIP_AS ( DEFAULT = "BITBIN('B'X)",
  172                                 INDEX = "BITBIN('2B'X)",
  173                                 ANY ) = "BITBIN('B'X)",
  174                 SECOND_CIP_FILL ( YES = 1,
  175                                   NO = 0,
  176                                   ANY ) = 1,
  177                 THIRD_CIP_TYPE ( DISPLAY = 0,
  178                                  PACKED = 1,
  179                                  BINARY = 2,
  180                                  ALPHANUMERIC = 3,
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        6    
  181                                  ANY ) = 3,
  182                 THIRD_CIP_OFFSET = 0,
  183                 THIRD_CIP_LEN = 0,
  184                 THIRD_CIP_SIGN ( UNSIGNED = 0,
  185                                  TRAILING = 1,
  186                                  LEADING = 2,
  187                                  OVERPUNCHED = 3,
  188                                  ANY ) = 0,
  189                 THIRD_CIP_AS ( DEFAULT = "BITBIN('B'X)",
  190                                INDEX = "BITBIN('3B'X)",
  191                                ANY ) = "BITBIN('B'X)",
  192                 THIRD_CIP_FILL ( YES = 1,
  193                                  NO = 0,
  194                                  ANY ) = 1,
  195                 WITH_DATAS ( YES = '1'B,
  196                               NO = '0'B,
  197                               ANY ) = '1'B,
  198                 FIRST_DATA = "ADDR(NIL)",
  199                 SECOND_DATA = "ADDR(NIL)",
  200                 THIRD_DATA = "ADDR(NIL)",
  201                 WITH_PARAMS ( YES = '1'B,
  202                               NO = '0'B,
  203                               ANY ) = '1'B,
  204                 FIRST_LEN = 0,
  205                 SECOND_LEN = 0,
  206                 THIRD_LEN = 0,
  207                 FIRST_DEC = 0,
  208                 SECOND_DEC = 0,
  209                 THIRD_DEC = 0,
  210                 SRCH_VRFY_ARGS_LEN = 0,
  211                 SRCH_VRFY_ARGS_LIST_LEN = 0,
  212                 FIRST_SHIFT_COUNT = 0,
  213                 SECOND_SHIFT_COUNT = 0,
  214                 THIRD_SHIFT_COUNT = 0,
  215                 SRCH_VRFY_ELEMS_LEN = 0,
  216                 SRCH_VRFY_ELEMS_LIST_LEN = 0,
  217                 FIRST_INX = 0,
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        7    
  218                 SECOND_INX = 0,
  219                 THIRD_INX = 0,
  220                 FILL_CHAR = %QI#CIP_BLANK_FILL,
  221                 ROUND = 0,
  222                 SRCH_RESULT_ARG_NUMBER = 0,
  223                 SRCH_RESULT_DISP = 0,
  224                 VRFY_RESULT_DISP = 0,
  225                 PICTURE_STRING_LEN = 0,
  226                 PICTURE_STRING_DEC = 0,
  227                 COMP_RESULT = 0,
  228                 SIZE_ERROR = 0,
  229                 TARGET_SIZE = 0,
  230                 END_STRUCTURE ( YES = ";",
  231                                 NO = ",",
  232                                 ANY ) = ";" );
  233
  234          %BEGIN_MACRO ( STCLASS = STCLASS );
  235
  236          %LSET THE_TYPE = TEXTCHAR (TYPE);
  237          %IF LVL = 1;
  238        DCL 1 NAME STCLASS DALIGNED,
  239          %ELSE;
  240            %(LVL) NAME DALIGNED,
  241          %ENDIF;
  242
  243              %(LVL+1) CIPS_NAME,
  244
  245          %LSET LEVEL = %(LVL+2);
  246          %IF TEXTCHAR(END_STRUCTURE)=';' AND ( NOT WITH_DATAS ) AND ( NOT WITH_PARAMS );
  247            %LSET CIPS_END_STRUCTURE = CHARTEXT(';');
  248          %ELSE;
  249            %LSET CIPS_END_STRUCTURE = CHARTEXT(',');
  250          %ENDIF;
  251          %QI_CIP_DESCRIPTOR ( NAME = FIRST_CIP_NAME,
  252                               STCLASS = STCLASS,
  253                               LVL = %LEVEL,
  254                               TYPE = FIRST_CIP_TYPE,
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        8    
  255                               OFFSET = FIRST_CIP_OFFSET,
  256                               SIGN = FIRST_CIP_SIGN,
  257                               LEN = FIRST_CIP_LEN,
  258                               AS = FIRST_CIP_AS,
  259                               DISP = SOURCE,
  260                               FILL = FIRST_CIP_FILL,
  261                               END_STRUCTURE = NO );
  262          %QI_CIP_DESCRIPTOR ( NAME = SECOND_CIP_NAME,
  263                               STCLASS = STCLASS,
  264                               LVL = %LEVEL,
  265                               TYPE = SECOND_CIP_TYPE,
  266                               OFFSET = SECOND_CIP_OFFSET,
  267                               SIGN = SECOND_CIP_SIGN,
  268                               LEN = SECOND_CIP_LEN,
  269                               AS = SECOND_CIP_AS,
  270                               DISP = TARGET,
  271                               FILL = SECOND_CIP_FILL,
  272                               END_STRUCTURE = NO );
  273          %QI_CIP_DESCRIPTOR ( NAME = THIRD_CIP_NAME,
  274                               STCLASS = STCLASS,
  275                               LVL = %LEVEL,
  276                               TYPE = THIRD_CIP_TYPE,
  277                               OFFSET = THIRD_CIP_OFFSET,
  278                               SIGN = THIRD_CIP_SIGN,
  279                               LEN = THIRD_CIP_LEN,
  280                               AS = THIRD_CIP_AS,
  281                               DISP = AUX,
  282                               FILL = THIRD_CIP_FILL,
  283                               END_STRUCTURE = %CIPS_END_STRUCTURE );
  284
  285              %(LVL+1) %CHARTEXT(CONCAT(TEXTCHAR(CIPS_NAME),'_A')) (0:2) REDEF CIPS_NAME UBIN(32),
  286
  287          %IF WITH_DATAS;
  288            %IF TEXTCHAR(END_STRUCTURE)=';' AND ( NOT WITH_PARAMS );
  289              %LSET DATAS_END_STRUCTURE = CHARTEXT(';');
  290            %ELSE;
  291              %LSET DATAS_END_STRUCTURE = CHARTEXT(',');
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        9    
  292            %ENDIF;
  293              %(LVL+1) DATAS_NAME DALIGNED,
  294                %(LVL+2) FIRST_DATA_NAME PTR %INIT(FIRST_DATA)%CHARTEXT('/**/'),
  295                %(LVL+2) SECOND_DATA_NAME PTR %INIT(SECOND_DATA)%CHARTEXT('/**/'),
  296                %(LVL+2) THIRD_DATA_NAME PTR %INIT(THIRD_DATA)%CHARTEXT('/**/'),
  297              %(LVL+1) %CHARTEXT(CONCAT(TEXTCHAR(DATAS_NAME),'_A$')) (0:2) REDEF DATAS_NAME PTR,
  298          %ENDIF;
  299
  300          %IF WITH_PARAMS;
  301            %IF THE_TYPE = 'SRCH' OR THE_TYPE = 'VRFY';
  302              %(LVL+1) SRCH_VRFY_ARGS_NAME,
  303                %(LVL+2) SRCH_VRFY_ARGS_LEN_NAME UBIN %INIT(SRCH_VRFY_ARGS_LEN)%CHARTEXT('/**/'),
  304                %(LVL+2) SRCH_VRFY_ARGS_LIST_LEN_NAME UBIN %INIT(SRCH_VRFY_ARGS_LIST_LEN)%CHARTEXT('/**/'),
  305                %(LVL+2) * UBIN,
  306              %(LVL+1) %CHARTEXT(CONCAT(TEXTCHAR(SRCH_VRFY_ARGS_NAME),'_A')) (0:2) REDEF SRCH_VRFY_ARGS_NAME UBIN,
  307              %(LVL+1) SHIFT_COUNTS_NAME REDEF SRCH_VRFY_ARGS_NAME,
  308                %(LVL+2) FIRST_SHIFT_COUNT_NAME UBIN,
  309                %(LVL+2) SECOND_SHIFT_COUNT_NAME UBIN,
  310                %(LVL+2) THIRD_SHIFT_COUNT_NAME UBIN,
  311              %(LVL+1) %CHARTEXT(CONCAT(TEXTCHAR(SHIFT_COUNTS_NAME),'_A')) (0:2) REDEF SRCH_VRFY_ARGS_NAME UBIN,
  312              %(LVL+1) LENS_NAME REDEF SRCH_VRFY_ARGS_NAME,
  313                %(LVL+2) FIRST_LEN_NAME UBIN,
  314                %(LVL+2) SECOND_LEN_NAME UBIN,
  315                %(LVL+2) THIRD_LEN_NAME UBIN,
  316              %(LVL+1) %CHARTEXT(CONCAT(TEXTCHAR(LENS_NAME),'_A')) (0:2) REDEF SRCH_VRFY_ARGS_NAME UBIN,
  317            %ELSEIF THE_TYPE = 'DLS' OR THE_TYPE = 'DRS';
  318              %(LVL+1) SHIFT_COUNTS_NAME,
  319                %(LVL+2) FIRST_SHIFT_COUNT_NAME UBIN %INIT(FIRST_SHIFT_COUNT)%CHARTEXT('/**/'),
  320                %(LVL+2) SECOND_SHIFT_COUNT_NAME UBIN %INIT(SECOND_SHIFT_COUNT)%CHARTEXT('/**/'),
  321                %(LVL+2) THIRD_SHIFT_COUNT_NAME UBIN %INIT(THIRD_SHIFT_COUNT)%CHARTEXT('/**/'),
  322              %(LVL+1) %CHARTEXT(CONCAT(TEXTCHAR(SHIFT_COUNTS_NAME),'_A')) (0:2) REDEF SHIFT_COUNTS_NAME UBIN,
  323              %(LVL+1) LENS_NAME REDEF SHIFT_COUNTS_NAME,
  324                %(LVL+2) FIRST_LEN_NAME UBIN,
  325                %(LVL+2) SECOND_LEN_NAME UBIN,
  326                %(LVL+2) THIRD_LEN_NAME UBIN,
  327              %(LVL+1) %CHARTEXT(CONCAT(TEXTCHAR(LENS_NAME),'_A')) (0:2) REDEF SHIFT_COUNTS_NAME UBIN,
  328              %(LVL+1) SRCH_VRFY_ARGS_NAME REDEF SHIFT_COUNTS_NAME,
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        10   
  329                %(LVL+2) SRCH_VRFY_ARGS_LEN_NAME UBIN,
  330                %(LVL+2) SRCH_VRFY_ARGS_LIST_LEN_NAME UBIN,
  331                %(LVL+2) * UBIN,
  332              %(LVL+1) %CHARTEXT(CONCAT(TEXTCHAR(SRCH_VRFY_ARGS_NAME),'_A')) (0:2) REDEF SHIFT_COUNTS_NAME UBIN,
  333            %ELSE;
  334              %(LVL+1) LENS_NAME,
  335                %(LVL+2) FIRST_LEN_NAME UBIN %INIT(FIRST_LEN)%CHARTEXT('/**/'),
  336                %(LVL+2) SECOND_LEN_NAME UBIN %INIT(SECOND_LEN)%CHARTEXT('/**/'),
  337                %(LVL+2) THIRD_LEN_NAME UBIN %INIT(THIRD_LEN)%CHARTEXT('/**/'),
  338              %(LVL+1) %CHARTEXT(CONCAT(TEXTCHAR(LENS_NAME),'_A')) (0:2) REDEF LENS_NAME UBIN,
  339              %(LVL+1) SRCH_VRFY_ARGS_NAME REDEF LENS_NAME,
  340                %(LVL+2) SRCH_VRFY_ARGS_LEN_NAME UBIN,
  341                %(LVL+2) SRCH_VRFY_ARGS_LIST_LEN_NAME UBIN,
  342                %(LVL+2) * UBIN,
  343              %(LVL+1) %CHARTEXT(CONCAT(TEXTCHAR(SRCH_VRFY_ARGS_NAME),'_A')) (0:2) REDEF LENS_NAME UBIN,
  344              %(LVL+1) SHIFT_COUNTS_NAME REDEF LENS_NAME,
  345                %(LVL+2) FIRST_SHIFT_COUNT_NAME UBIN,
  346                %(LVL+2) SECOND_SHIFT_COUNT_NAME UBIN,
  347                %(LVL+2) THIRD_SHIFT_COUNT_NAME UBIN,
  348              %(LVL+1) %CHARTEXT(CONCAT(TEXTCHAR(SHIFT_COUNTS_NAME),'_A')) (0:2) REDEF LENS_NAME UBIN,
  349            %ENDIF;
  350
  351            %IF THE_TYPE = 'ALR' OR THE_TYPE = 'ACM';
  352              %(LVL+1) INXS_NAME,
  353                %(LVL+2) FIRST_INX_NAME UBIN %INIT(FIRST_INX)%CHARTEXT('/**/'),
  354                %(LVL+2) SECOND_INX_NAME UBIN %INIT(SECOND_INX)%CHARTEXT('/**/'),
  355                %(LVL+2) THIRD_INX_NAME UBIN %INIT(THIRD_INX)%CHARTEXT('/**/'),
  356              %(LVL+1) %CHARTEXT(CONCAT(TEXTCHAR(INXS_NAME),'_A')) (0:2) REDEF INXS_NAME UBIN,
  357              %(LVL+1) DECS_NAME REDEF INXS_NAME,
  358                %(LVL+2) FIRST_DEC_NAME SBIN,
  359                %(LVL+2) SECOND_DEC_NAME SBIN,
  360                %(LVL+2) THIRD_DEC_NAME SBIN,
  361              %(LVL+1) %CHARTEXT(CONCAT(TEXTCHAR(DECS_NAME),'_A')) (0:2) REDEF INXS_NAME SBIN,
  362            %ELSE;
  363              %(LVL+1) DECS_NAME,
  364                %(LVL+2) FIRST_DEC_NAME SBIN %INIT(FIRST_DEC)%CHARTEXT('/**/'),
  365                %(LVL+2) SECOND_DEC_NAME SBIN %INIT(SECOND_DEC)%CHARTEXT('/**/'),
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        11   
  366                %(LVL+2) THIRD_DEC_NAME SBIN %INIT(THIRD_DEC)%CHARTEXT('/**/'),
  367              %(LVL+1) %CHARTEXT(CONCAT(TEXTCHAR(DECS_NAME),'_A')) (0:2) REDEF DECS_NAME SBIN,
  368              %(LVL+1) INXS_NAME REDEF DECS_NAME,
  369                %(LVL+2) FIRST_INX_NAME UBIN,
  370                %(LVL+2) SECOND_INX_NAME UBIN,
  371                %(LVL+2) THIRD_INX_NAME UBIN,
  372              %(LVL+1) %CHARTEXT(CONCAT(TEXTCHAR(INXS_NAME),'_A')) (0:2) REDEF DECS_NAME UBIN,
  373            %ENDIF;
  374
  375              %(LVL+1) SRCH_VRFY_ELEMS_NAME,
  376                %(LVL+2) SRCH_VRFY_ELEMS_LEN_NAME UBIN %INIT(SRCH_VRFY_ELEMS_LEN)%CHARTEXT('/**/'),
  377                %(LVL+2) SRCH_VRFY_ELEMS_LIST_LEN_NAME UBIN %INIT(SRCH_VRFY_ELEMS_LIST_LEN)%CHARTEXT('/**/'),
  378              %(LVL+1) %CHARTEXT(CONCAT(TEXTCHAR(SRCH_VRFY_ELEMS_NAME),'_A')) (0:1) REDEF SRCH_VRFY_ELEMS_NAME UBIN,
  379
  380            %IF THE_TYPE = 'SRCH';
  381              %(LVL+1) SRCH_RESULT_NAME,
  382                %(LVL+2) SRCH_RESULT_ARG_NUMBER_NAME UBIN %INIT(SRCH_RESULT_ARG_NUMBER)%CHARTEXT('/**/'),
  383                %(LVL+2) SRCH_RESULT_DISP_NAME UBIN %INIT(SRCH_RESULT_DISP)%CHARTEXT('/**/'),
  384              %(LVL+1) %CHARTEXT(CONCAT(TEXTCHAR(SRCH_RESULT_NAME),'_A')) (0:1) REDEF SRCH_RESULT_NAME UBIN,
  385              %(LVL+1) VRFY_RESULT_NAME REDEF SRCH_RESULT_NAME,
  386                %(LVL+2) VRFY_RESULT_DISP_NAME UBIN,
  387                %(LVL+2) * UBIN,
  388              %(LVL+1) %CHARTEXT(CONCAT(TEXTCHAR(VRFY_RESULT_NAME),'_A')) (0:1) REDEF SRCH_RESULT_NAME UBIN,
  389              %(LVL+1) PICTURE_STRING_NAME REDEF SRCH_RESULT_NAME,
  390                %(LVL+2) PICTURE_STRING_INT_LEN_NAME UBIN,
  391                %(LVL+2) PICTURE_STRING_DEC_NAME UBIN,
  392              %(LVL+1) %CHARTEXT(CONCAT(TEXTCHAR(PICTURE_STRING_NAME),'_A')) (0:1) REDEF SRCH_RESULT_NAME UBIN,
  393            %ELSEIF THE_TYPE = 'VRFY';
  394              %(LVL+1) VRFY_RESULT_NAME,
  395                %(LVL+2) VRFY_RESULT_DISP_NAME UBIN %INIT(VRFY_RESULT_DISP)%CHARTEXT('/**/'),
  396                %(LVL+2) * UBIN,
  397              %(LVL+1) %CHARTEXT(CONCAT(TEXTCHAR(VRFY_RESULT_NAME),'_A')) (0:1) REDEF VRFY_RESULT_NAME UBIN,
  398              %(LVL+1) PICTURE_STRING_NAME REDEF VRFY_RESULT_NAME,
  399                %(LVL+2) PICTURE_STRING_INT_LEN_NAME UBIN,
  400                %(LVL+2) PICTURE_STRING_DEC_NAME UBIN,
  401              %(LVL+1) %CHARTEXT(CONCAT(TEXTCHAR(PICTURE_STRING_NAME),'_A')) (0:1) REDEF VRFY_RESULT_NAME UBIN,
  402              %(LVL+1) SRCH_RESULT_NAME REDEF VRFY_RESULT_NAME,
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        12   
  403                %(LVL+2) SRCH_RESULT_ARG_NUMBER_NAME UBIN,
  404                %(LVL+2) SRCH_RESULT_DISP_NAME UBIN,
  405              %(LVL+1) %CHARTEXT(CONCAT(TEXTCHAR(SRCH_RESULT_NAME),'_A')) (0:1) REDEF VRFY_RESULT_NAME UBIN,
  406            %ELSE;
  407              %(LVL+1) PICTURE_STRING_NAME,
  408                %(LVL+2) PICTURE_STRING_INT_LEN_NAME UBIN %INIT(PICTURE_STRING_LEN)%CHARTEXT('/**/'),
  409                %(LVL+2) PICTURE_STRING_DEC_NAME UBIN %INIT(PICTURE_STRING_DEC)%CHARTEXT('/**/'),
  410              %(LVL+1) %CHARTEXT(CONCAT(TEXTCHAR(PICTURE_STRING_NAME),'_A')) (0:1) REDEF PICTURE_STRING_NAME UBIN,
  411              %(LVL+1) SRCH_RESULT_NAME REDEF PICTURE_STRING_NAME,
  412                %(LVL+2) SRCH_RESULT_ARG_NUMBER_NAME UBIN,
  413                %(LVL+2) SRCH_RESULT_DISP_NAME UBIN,
  414              %(LVL+1) %CHARTEXT(CONCAT(TEXTCHAR(SRCH_RESULT_NAME),'_A')) (0:1) REDEF PICTURE_STRING_NAME UBIN,
  415              %(LVL+1) VRFY_RESULT_NAME REDEF PICTURE_STRING_NAME,
  416                %(LVL+2) VRFY_RESULT_DISP_NAME UBIN,
  417                %(LVL+2) * UBIN,
  418              %(LVL+1) %CHARTEXT(CONCAT(TEXTCHAR(VRFY_RESULT_NAME),'_A')) (0:1) REDEF PICTURE_STRING_NAME UBIN,
  419            %ENDIF;
  420
  421            %IF THE_TYPE = 'ALR' OR THE_TYPE = 'ACM' OR THE_TYPE = 'MAT' OR THE_TYPE = 'SRCH' OR THE_TYPE = 'VRFY';
  422              %(LVL+1) FILL_CHAR_NAME,
  423                %(LVL+2) FILL_CHAR_TEXT_NAME UBIN BYTE UNAL %INIT(FILL_CHAR)%CHARTEXT('/**/'),
  424                %(LVL+2) * UBIN BYTE UNAL %INIT(0)%CHARTEXT('/**/'),
  425              %(LVL+1) SIZE_ERROR_NAME REDEF FILL_CHAR_NAME UBIN,
  426            %ELSE;
  427              %(LVL+1) SIZE_ERROR_NAME UBIN %INIT(SIZE_ERROR)%CHARTEXT('/**/'),
  428              %(LVL+1) FILL_CHAR_NAME REDEF SIZE_ERROR_NAME,
  429                %(LVL+2) FILL_CHAR_TEXT_NAME UBIN BYTE UNAL,
  430                %(LVL+2) * UBIN BYTE UNAL,
  431            %ENDIF;
  432
  433            %IF THE_TYPE = 'ACM' OR THE_TYPE = 'DCM';
  434              %(LVL+1) COMP_RESULT_NAME UBIN %INIT(COMP_RESULT)%CHARTEXT('/**/'),
  435              %(LVL+1) ROUND REDEF COMP_RESULT_NAME UBIN,
  436              %(LVL+1) TARGET_SIZE_NAME REDEF COMP_RESULT_NAME UBIN END_STRUCTURE
  437            %ELSEIF THE_TYPE = 'DAD' OR THE_TYPE = 'DSB' OR THE_TYPE = 'DML';
  438              %(LVL+1) TARGET_SIZE_NAME UBIN %INIT(TARGET_SIZE)%CHARTEXT('/**/'),
  439              %(LVL+1) COMP_RESULT_NAME REDEF TARGET_SIZE_NAME UBIN,
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        13   
  440              %(LVL+1) ROUND_NAME REDEF TARGET_SIZE_NAME UBIN END_STRUCTURE
  441            %ELSE;
  442              %(LVL+1) ROUND_NAME UBIN %INIT(ROUND)%CHARTEXT('/**/'),
  443              %(LVL+1) COMP_RESULT_NAME REDEF ROUND_NAME UBIN,
  444              %(LVL+1) TARGET_SIZE_NAME REDEF ROUND_NAME UBIN END_STRUCTURE
  445            %ENDIF;
  446
  447          %ENDIF;
  448
  449          %END_MACRO;
  450
  451        %MEND;
  452
  453      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        14   
  454      /*
  455                              %%%%%     %%%%   %%%%%%
  456                             %%   %%     %%    %%   %%
  457                             %%          %%    %%   %%
  458                             %%          %%    %%%%%%
  459                             %%          %%    %%
  460                             %%   %%     %%    %%
  461                              %%%%%     %%%%   %%
  462                %%                               %%%
  463                %%                               %%%
  464            %%% %%   %%%%%    %%%%%%   %%%%%%     %%     %%%%%%
  465           %%  %%%  %%   %%  %%       %%         %%     %%
  466           %%  %%%  %%%%%%%   %%%%%   %%                 %%%%%
  467           %%  %%%  %%            %%  %%                     %%
  468            %%% %%   %%%%%   %%%%%%    %%%%%%           %%%%%%
  469                                                                          */
  470
  471      /*D* NAME:         QI_CIP_DESCRIPTOR
  472           PURPOSE:      Used to generate a structure which frames a
  473                         descriptor used by various CIP instructions.
  474           DESCRIPTION:  This MACRO is primarily invoked by the MACRO
  475                         QI@CIP_OPERATION (see its *D*) to generate
  476                         generate a two word remote CIP descriptor.
  477                         Several general-purpose CONSTANT CIP descriptors
  478                         exist...see *D* for GENERAL_PURPOSE_CIPS.
  479      */
  480        %MACRO QI_CIP_DESCRIPTOR
  481               ( NAME = QI_CIP_DESCRIPTOR,
  482                 CA_NAME = CA,
  483                 CB_NAME = CB,
  484                 CD_NAME = CD,
  485                 CP_NAME = CP,
  486                 FILL_NAME = FILL,
  487                 MBZ_NAME = MBZ,
  488                 OFFSET_NAME = OFFSET,
  489                 SIGN_NAME = SIGN,
  490                 LEN_NAME = LEN,
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        15   
  491                 T_NAME = T,
  492                 AS_NAME = AS,
  493                 DISP_NAME = DISP,
  494                 STCLASS = " ",
  495                 LVL = 1,
  496                 TYPE ( DISPLAY = 0,
  497                        PACKED = 1,
  498                        BINARY = 2,
  499                        ALPHANUMERIC = 3,
  500                        ANY ) = 3,
  501                 OFFSET = 0,
  502                 SIGN ( UNSIGNED = 0,
  503                        TRAILING = 1,
  504                        LEADING = 2,
  505                        OVERPUNCHED = 3,
  506                        ANY ) = 0,
  507                 LEN = 0,
  508                 AS ( DEFAULT = "BITBIN('B'X)",
  509                      INDEX = "BITBIN('1B'X)",
  510                      INDEX_SOURCE = "BITBIN('1B'X)",
  511                      INDEX_TARGET = "BITBIN('2B'X)",
  512                      INDEX_AUX = "BITBIN('3B'X)",
  513                      ANY ) = "BITBIN('B'X)",
  514                 DISP ( SOURCE = 6,
  515                        TARGET = 8,
  516                        AUX = 10 ) = 6,
  517                 FILL ( YES = 1,
  518                        NO = 0,
  519                        ANY ) = 1,
  520                 END_STRUCTURE ( YES = ";",
  521                                 NO = ",",
  522                                 ANY ) = ";" );
  523
  524          %BEGIN_MACRO ( STCLASS = STCLASS );
  525
  526          %LSET NOTHING = TEXTCHAR(SIGN);
  527          %LSET NOTHING = TEXTCHAR(FILL);
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        16   
  528          %LSET NOTHING = TEXTCHAR(DATA$);
  529          %LSET NOTHING = TEXTCHAR(PNAME$);
  530          %LSET NOTHING = TEXTCHAR(STCLASS);
  531
  532          %IF (TYPE >= 0) AND (TYPE <= 3);
  533            %IF TEXTCHAR(INIT) = 'INIT';
  534              %LSET STR_LEN=CHARBIN(TEXTCHAR(LEN));
  535              %LSET STR_OFFSET=CHARBIN(TEXTCHAR(OFFSET));
  536              %LSET STR_SIGN=CHARBIN(TEXTCHAR(SIGN));
  537              %IF TYPE=2;
  538                %IF (STR_LEN ~= 0) AND (STR_LEN ~= 2) AND (STR_LEN ~= 4);
  539                  %ERROR (CONCAT('Illegal LEN for ',TEXTCHAR(NAME)),3);
  540                %ENDIF;
  541              %ELSE;
  542                %IF (STR_LEN < 0) OR (STR_LEN > 31);
  543                  %ERROR (CONCAT('Illegal LEN for ',TEXTCHAR(NAME)),3);
  544                %ENDIF;
  545              %ENDIF;
  546              %IF TYPE=1;        /* PACKED */
  547                %IF (STR_OFFSET < 0) OR (STR_OFFSET > 3);
  548                  %ERROR (CONCAT('Illegal OFFSET for ',TEXTCHAR(NAME)),3);
  549                %ENDIF;
  550                %IF (STR_SIGN < 0) OR (STR_SIGN > 1);
  551                  %ERROR (CONCAT('Illegal SIGN for ',TEXTCHAR(NAME)),3);
  552                %ENDIF;
  553              %ELSE;
  554                %IF (STR_OFFSET < 0) OR (STR_OFFSET > 1);
  555                  %ERROR (CONCAT('Illegal OFFSET for ',TEXTCHAR(NAME)),3);
  556                %ENDIF;
  557                %IF (STR_SIGN < 0) OR (STR_SIGN > 3);
  558                  %ERROR (CONCAT('Illegal SIGN for ',TEXTCHAR(NAME)),3);
  559                %ENDIF;
  560              %ENDIF;
  561            %ENDIF;
  562            %IF LVL=1;
  563              DCL 1 NAME STCLASS DALIGNED,        /* CIP descriptor */
  564            %ELSE;
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        17   
  565                  %(LVL) NAME DALIGNED,           /* CIP descriptor */
  566            %ENDIF;
  567            %IF TYPE=3;                         /* ALPHANUMERIC primary descriptor */
  568                    %(LVL+1) CA,                  /* Control bits for ALPHANUMERIC */
  569                      %(LVL+2) OFFSET_NAME UBIN(1) UNAL %INIT(OFFSET)%CHARTEXT('/**/'),
  570                      %(LVL+2) FILL_NAME UBIN(1) UNAL %INIT(FILL)%CHARTEXT('/**/'),
  571                      %(LVL+2) MBZ_NAME UBIN(1) UNAL %INIT(0)%CHARTEXT('/**/'),
  572                    %(LVL+1) CB REDEF CA,         /* Control bits for BINARY */
  573                      %(LVL+2) OFFSET_NAME UBIN(1) UNAL,
  574                      %(LVL+2) MBZ UBIN(2) UNAL,  /* not used:  MBZ */
  575                    %(LVL+1) CD REDEF CA,         /* Control bits for DISPLAY */
  576                      %(LVL+2) OFFSET_NAME UBIN(1) UNAL,
  577                      %(LVL+2) SIGN_NAME UBIN(2) UNAL,
  578                    %(LVL+1) CP REDEF CA,         /* Control bits for PACKED */
  579                      %(LVL+2) OFFSET_NAME UBIN(2) UNAL,
  580                      %(LVL+2) SIGN_NAME UBIN(1) UNAL,
  581            %ELSEIF TYPE=2;                     /* BINARY primary descriptor */
  582                    %(LVL+1) CB,                  /* Control bits for BINARY */
  583                      %(LVL+2) OFFSET_NAME UBIN(1) UNAL %INIT(OFFSET)%CHARTEXT('/**/'),
  584                      %(LVL+2) MBZ_NAME UBIN(2) UNAL %INIT(0)%CHARTEXT('/**/'),
  585                    %(LVL+1) CA REDEF CB,         /* Control bits for ALPHANUMERIC */
  586                      %(LVL+2) OFFSET_NAME UBIN(1) UNAL,
  587                      %(LVL+2) FILL_NAME UBIN(1) UNAL,
  588                      %(LVL+2) MBZ UBIN(1) UNAL,  /* not used:  MBZ */
  589                    %(LVL+1) CD REDEF CB,         /* Control bits for DISPLAY */
  590                      %(LVL+2) OFFSET_NAME UBIN(1) UNAL,
  591                      %(LVL+2) SIGN_NAME UBIN(2) UNAL,
  592                    %(LVL+1) CP REDEF CB,         /* Control bits for PACKED */
  593                      %(LVL+2) OFFSET_NAME UBIN(2) UNAL,
  594                      %(LVL+2) SIGN_NAME UBIN(1) UNAL,
  595            %ELSEIF TYPE=1;                     /* PACKED primary descriptor */
  596                    %(LVL+1) CP,                  /* Control bits for PACKED */
  597                      %(LVL+2) OFFSET_NAME UBIN(2) UNAL %INIT(OFFSET)%CHARTEXT('/**/'),
  598                      %(LVL+2) SIGN_NAME UBIN(1) UNAL %INIT(SIGN)%CHARTEXT('/**/'),
  599                    %(LVL+1) CA REDEF CP,         /* Control bits for ALPHANUMERIC */
  600                      %(LVL+2) OFFSET_NAME UBIN(1) UNAL,
  601                      %(LVL+2) FILL_NAME UBIN(1) UNAL,
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        18   
  602                      %(LVL+2) MBZ UBIN(1) UNAL,  /* not used:  MBZ */
  603                    %(LVL+1) CB REDEF CP,         /* Control bits for BINARY */
  604                      %(LVL+2) OFFSET_NAME UBIN(1) UNAL,
  605                      %(LVL+2) MBZ UBIN(2) UNAL,  /* not used:  MBZ */
  606                    %(LVL+1) CD REDEF CP,         /* Control bits for DISPLAY */
  607                      %(LVL+2) OFFSET_NAME UBIN(1) UNAL,
  608                      %(LVL+2) SIGN_NAME UBIN(2) UNAL,
  609            %ELSE;                              /* DISPLAY primary descriptor */
  610                    %(LVL+1) CD,                  /* Control bits for DISPLAY */
  611                      %(LVL+2) OFFSET_NAME UBIN(1) UNAL %INIT(OFFSET)%CHARTEXT('/**/'),
  612                      %(LVL+2) SIGN_NAME UBIN(2) UNAL %INIT(SIGN)%CHARTEXT('/**/'),
  613                    %(LVL+1) CA REDEF CD,         /* Control bits for ALPHANUMERIC */
  614                      %(LVL+2) OFFSET_NAME UBIN(1) UNAL,
  615                      %(LVL+2) FILL_NAME UBIN(1) UNAL,
  616                      %(LVL+2) MBZ UBIN(1) UNAL,  /* not used:  MBZ */
  617                    %(LVL+1) CB REDEF CD,         /* Control bits for BINARY */
  618                      %(LVL+2) OFFSET_NAME UBIN(1) UNAL,
  619                      %(LVL+2) MBZ UBIN(2) UNAL,  /* not used:  MBZ */
  620                    %(LVL+1) CP REDEF CD,         /* Control bits for PACKED */
  621                      %(LVL+2) OFFSET_NAME UBIN(2) UNAL,
  622                      %(LVL+2) SIGN_NAME UBIN(1) UNAL,
  623            %ENDIF;
  624                    %(LVL+1) LEN_NAME UBIN(5) UNAL %INIT(LEN)%CHARTEXT('/**/'),
  625            %IF TYPE=1;                         /* PACKED primary descriptor */
  626                    %(LVL+1) T_NAME UBIN(1) UNAL %INIT(1)%CHARTEXT('/**/'),
  627            %ELSE;
  628                    %(LVL+1) T_NAME UBIN(1) UNAL %INIT(0)%CHARTEXT('/**/'),
  629            %ENDIF;
  630                    %(LVL+1) AS_NAME UBIN(7) UNAL %INIT(AS)%CHARTEXT('/**/'),
  631            %IF LVL=1;
  632                    %(LVL+1) DISP_NAME UBIN %INIT(DISP)%CHARTEXT('/**/');
  633              DCL 1 %CHARTEXT(CONCAT(TEXTCHAR(NAME),'_A')) (0:1) REDEF NAME UBIN;
  634            %ELSE;
  635                    %(LVL+1) DISP_NAME UBIN %INIT(DISP)%CHARTEXT('/**/'),
  636                  %(LVL) %CHARTEXT(CONCAT(TEXTCHAR(NAME),'_A')) (0:1) REDEF NAME UBIN END_STRUCTURE
  637            %ENDIF;
  638          %ELSE;
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        19   
  639            %ERROR ( CONCAT ( 'Illegal TYPE for ', TEXTCHAR (NAME) ), 3 );
  640          %ENDIF;
  641
  642          %END_MACRO;
  643
  644        %MEND;
  645
  646      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        20   
  647      /*
  648                               %%       %%
  649                     %%%%%   %%%%%%   %%%%%%    %%%%%   %% %%%%
  650                    %%   %%    %%       %%     %%   %%  %%%%
  651                    %%   %%    %%       %%     %%%%%%%  %%%
  652                    %%   %%    %%       %%     %%       %%
  653                     %%%%%      %%%      %%%    %%%%%   %%
  654
  655                     %%%%%%  %% %%%    %%% %%   %%%%%%   %%%%%
  656                    %%       %%%  %%  %%  %%%  %%       %%   %%
  657                     %%%%%   %%%  %%  %%  %%%  %%       %%%%%%%
  658                         %%  %%%  %%  %%  %%%  %%       %%
  659                    %%%%%%   %% %%%    %%% %%   %%%%%%   %%%%%
  660                             %%
  661                             %%
  662                                                                          */
  663
  664      /*D* NAME:         QI@OTTER_SPACE
  665           PURPOSE:      To provide a temporary area in the interpreter's
  666                         AUTO for conversion of data items, etc.
  667           DESCRIPTION:  This MACRO simply generates some temporary space
  668                         in AUTO, referencable as a structure, a character
  669                         array, or an unsigned byte array.  It's used
  670                         heavily by some MOVE op-codes which unpack COMP
  671                         items into a copy of it with STCLASS = otter...
  672      */
  673
  674        %MACRO QI@OTTER_SPACE ( NAME = QI@OTTER_SPACE,
  675                                STCLASS = AUTO,
  676                                BYTE_SIZE = 16 );
  677
  678          %BEGIN_MACRO ( STCLASS = STCLASS );
  679
  680          DCL 1 NAME STCLASS ALIGNED,
  681                2 *(0:%(BYTE_SIZE-1)) UBIN BYTE UNAL %INIT(0*0)%CHARTEXT('/**/');
  682
  683          DCL 1 %CHARTEXT(CONCAT(TEXTCHAR(NAME),'_CA')) (0:%(BYTE_SIZE-1)) REDEF NAME CHAR(1) UNAL;
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        21   
  684
  685          DCL 1 %CHARTEXT(CONCAT(TEXTCHAR(NAME),'_BA')) (0:%(BYTE_SIZE-1)) REDEF NAME UBIN BYTE UNAL;
  686
  687          %END_MACRO;
  688
  689        %MEND;
  690
  691      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        22   
  692      /*
  693                                        %%                         %%
  694            %%%%%%   %%%%%   %% %%%   %%%%%%    %%%%%   %%   %%  %%%%%%
  695           %%       %%   %%  %%%  %%    %%     %%   %%   %% %%     %%
  696           %%       %%   %%  %%   %%    %%     %%%%%%%    %%%      %%
  697           %%       %%   %%  %%   %%    %%     %%        %% %%     %%
  698            %%%%%%   %%%%%   %%   %%     %%%    %%%%%   %%   %%     %%%
  699                                                                          */
  700
  701        %MACRO QI_1 ( STCLASS = "SYMREF",
  702                      NAME = QI_1 );
  703
  704          %BEGIN_MACRO ( STCLASS = STCLASS );
  705
  706        DCL 1 NAME STCLASS DALIGNED,         /* interpreter data */
  707              2 BASE DALIGNED,
  708                3 DATA$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  709                          /* base pointer for user data */
  710                3 PROC$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  711                          /* base pointer for user proc */
  712                3 INTR$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  713                          /* base pointer for intr data */
  714              2 BASE_A$(0:2) REDEF BASE PTR,
  715
  716              2 INSTR$ PTR DALIGNED %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  717                          /* pointer to last/current op-code sequence */
  718              2 CURR_INSTR$ PTR DALIGNED %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  719                          /* current instruction */
  720              2 INITIALIZATION_BLOCK$ PTR DALIGNED %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  721                          /* from arguments to QAT$TALLYHO */
  722              2 ARGUMENTS_AND_OR_FREE_AUTO_A$$ PTR DALIGNED %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  723                          /* from arguments to QAT$TALLYHO */
  724              2 UNWIND$ REMEMBER DALIGNED /*%INIT(QAU$UNWIND)%CHARTEXT('\**\')*/,
  725                          /* contains address of somebody in QAT$TALLYHO
  726                             (somebody using top auto frame) */
  727              2 VERIFY_BUFFER$ PTR DALIGNED %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  728                          /* address of working area for VERIFY */
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        23   
  729              2 VERIFY_BUFFER_SIZE UBIN %INIT(0)%CHARTEXT('/**/'),
  730                          /* size in bytes of working area for VERIFY */
  731              2 HOUSEKEEPING ALIGNED,
  732                3 IS_DBCONTROL_ESTABLISHED BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  733                          /* set if M$DBCONTROL has been called */
  734                3 IS_INT_ESTABLISHED BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  735                          /* set if M$INT has been called */
  736                3 IS_TRAP_ESTABLISHED BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  737                          /* set if M$TRAP has been called */
  738                3 IS_BUFFER_ALLOCATED BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  739                          /* set if the buffer for X$whatever has been allocated */
  740                3 IS_MESSAGE_LINE_CREATED BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  741                          /* set if the MESSAGE LINE has been M$OPENed */
  742                3 IS_DEBUGGER_ASSOCIATING BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  743                          /* set if the debugger has post-associated
  744                             (QCE$ERROR_DBCONTROL was entered) */
  745                3 INITIAL_PAGEHALT_SETTING BIT(2) UNAL %INIT('00'B)%CHARTEXT('/**/'),
  746                          /* value of VLP_TRMCTL.PAGEHALT at invocation */
  747              2 SCREEN_UPDATE_FLAGS ALIGNED,
  748                            /* set by screen-updating routines:
  749                                   APPLY, CLEAR, DEACTIVATE, GET_FIELD, WRITE/DISPLAY
  750                               checked/reset by QCU$UPDATE_SCREEN */
  751                3 WAS_APPLIED BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  752                            /* an APPLY (M$MDFFLD) was done */
  753                3 WAS_CLEARED BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  754                            /* a CLEAR (M$ERASE) was done */
  755                3 WAS_DEACTIVATED BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  756                            /* a DEACTIVATE (M$RLSFLD) was done */
  757                3 WAS_WRITTEN BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  758                            /* a DISPLAY/WRITE (M$WRITE) was done */
  759              2 SOURCE$ PTR DALIGNED %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  760                          /* pointer to DAD for QCS$SETUP */
  761
  762              %QI@CIP_OPERATION ( NAME = OP,
  763                                  STCLASS = STCLASS,
  764                                  LVL = 2,
  765                                  FIRST_CIP_TYPE = DISPLAY,
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        24   
  766                                  SECOND_CIP_TYPE = DISPLAY,
  767                                  THIRD_CIP_TYPE = DISPLAY,
  768                                  END_STRUCTURE = NO );
  769
  770              2 DAD DALIGNED,
  771                          /* pointers to DADs */
  772                3 S$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  773                3 T$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  774                3 AUX$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  775              2 DAD_A$(0:2) REDEF DAD PTR,
  776              2 IS_ALL_LIT,
  777                          /* ALL "literal" indicator */
  778                3 S BIT(1) ALIGNED %INIT('0'B)%CHARTEXT('/**/'),
  779                3 T BIT(1) ALIGNED %INIT('0'B)%CHARTEXT('/**/'),
  780                3 AUX BIT(1) ALIGNED %INIT('0'B)%CHARTEXT('/**/'),
  781              2 IS_ALL_LIT_A(0:2) REDEF IS_ALL_LIT BIT(1) ALIGNED,
  782              2 IS_FORM_VARIABLE,
  783                          /* COBOL vs FIELD variable type indicator */
  784                3 S BIT(1) ALIGNED %INIT('0'B)%CHARTEXT('/**/'),
  785                3 T BIT(1) ALIGNED %INIT('0'B)%CHARTEXT('/**/'),
  786                3 AUX BIT(1) ALIGNED %INIT('0'B)%CHARTEXT('/**/'),
  787              2 IS_FORM_VARIABLE_A(0:2) REDEF IS_FORM_VARIABLE BIT(1) ALIGNED,
  788              2 IS_TEMP,
  789                          /* on if this is a temp (must build descriptor) */
  790                3 S BIT(1) ALIGNED %INIT('0'B)%CHARTEXT('/**/'),
  791                3 T BIT(1) ALIGNED %INIT('0'B)%CHARTEXT('/**/'),
  792                3 AUX BIT(1) ALIGNED %INIT('0'B)%CHARTEXT('/**/'),
  793              2 IS_TEMP_A(0:2) REDEF IS_TEMP BIT(1) ALIGNED,
  794              2 OFFSET,
  795                          /* byte offsets */
  796                3 S UBIN %INIT(0)%CHARTEXT('/**/'),
  797                3 T UBIN %INIT(0)%CHARTEXT('/**/'),
  798                3 AUX UBIN %INIT(0)%CHARTEXT('/**/'),
  799              2 OFFSET_A(0:2) REDEF OFFSET UBIN,
  800              2 OTTER_SPACE DALIGNED,
  801                          /* pointers to OTTER space */
  802                3 S$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        25   
  803                3 T$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  804                3 AUX$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  805              2 OTTER_SPACE_A$(0:2) REDEF OTTER_SPACE PTR,
  806              2 PICTURE_STRING DALIGNED,
  807                          /* pointers to PICture strings */
  808                3 S$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  809                3 T$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  810                3 AUX$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  811              2 PICTURE_STRING_A$(0:2) REDEF PICTURE_STRING PTR,
  812              2 TYPE,
  813                          /* data types of operands */
  814                3 S UBIN %INIT(0)%CHARTEXT('/**/'),
  815                3 T UBIN %INIT(0)%CHARTEXT('/**/'),
  816                3 AUX UBIN %INIT(0)%CHARTEXT('/**/'),
  817              2 TYPE_A(0:2) REDEF TYPE UBIN,
  818
  819              2 OP_CODE UBIN %INIT(0)%CHARTEXT('/**/'),
  820                          /* current op-code */
  821              2 A_REG SBIN %INIT(0)%CHARTEXT('/**/'),
  822                          /* A-register */
  823              2 SIZE_ERR UBIN %INIT(0)%CHARTEXT('/**/'),
  824                          /* If 1, a "SIZE ERROR" condition has occured */
  825              2 AT_END UBIN %INIT(0)%CHARTEXT('/**/'),
  826                          /* "AT END" flag */
  827              2 ACCUM(0:7) UBIN %INIT(0*0)%CHARTEXT('/**/'),
  828                          /* accumulator */
  829              2 DEC_ACC SBIN %INIT(0)%CHARTEXT('/**/'),
  830                          /* decimal position of accumulator */
  831              2 NO_DATA UBIN %INIT(0)%CHARTEXT('/**/'),
  832                          /* no-data indicator */
  833
  834              %QI$DAD ( NAME = MESSAGE_LINE_DAD,
  835                        STCLASS = STCLASS,
  836                        LVL = 2,
  837                        END_STRUCTURE = NO );
  838
  839              2 MESSAGE_LINE_GZ DALIGNED,
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        26   
  840                3 HEADER$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  841                        /* Pointer to the QI$GZ_HEADER area corresponding to
  842                           the default MESSAGE LINE. */
  843                3 START$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  844                        /* Pointer to the QI$GZ_FIELD area corresponding to
  845                           the default MESSAGE LINE. */
  846                3 STOP$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  847                        /* Pointer to the QI$GZ_FIELD area corresponding to
  848                           the default MESSAGE LINE.  (Included for consistency.) */
  849
  850              2 GZ DALIGNED,
  851                3 LAST_HEADER$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  852                          /* Pointer to the most recently allocated QI$GZ_HEADER
  853                             area (and therefore the "highest" in memory). */
  854                3 AVAILABLE$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  855                          /* Pointer to the next available spot at which a
  856                             QI$GZ_HEADER area may reside. */
  857                3 NEXT_AVAILABLE_FLDID UBIN %INIT(0)%CHARTEXT('/**/'),
  858                          /* Running count of FLDIDs:  they are allocated
  859                             in FRame-sized chunks by QBA$ACTIVATE, and
  860                             remain the property of a once-activated FRame,
  861                             even if/when it's DEACTIVATEd. */
  862
  863              2 FILE_HEAD DALIGNED,
  864                3 FORM$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  865                          /* Pointer to head of currently opened
  866                             form FD chain. */
  867                3 TRAN$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  868                          /* Pointer to head of currently opened
  869                             transaction FD chain. */
  870              2 FILE_HEAD_A$(0:%(QI#TYPE_TRANSACTION-QI#TYPE_FORM)) REDEF FILE_HEAD PTR,
  871
  872              2 OPENED_COUNT,
  873                3 FORM UBIN %INIT(0)%CHARTEXT('/**/'),
  874                3 TRAN UBIN %INIT(0)%CHARTEXT('/**/'),
  875              2 OPENED_COUNT_A(0:%(QI#TYPE_TRANSACTION-QI#TYPE_FORM)) REDEF OPENED_COUNT UBIN,
  876
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        27   
  877              2 CURRENT,
  878                3 FILE$ PTR DALIGNED %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  879                          /* pointer to currently working file */
  880                3 FORM$ REDEF FILE$ PTR,
  881                          /* for when we know it's a form file */
  882                3 TRAN$ REDEF FILE$ PTR,
  883                          /* for when we know it's a transaction file */
  884                3 FILE_STATUS$ PTR DALIGNED %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  885                          /* pointer to currently working file status area */
  886                3 FORM_STATUS$ REDEF FILE_STATUS$ PTR,
  887                          /* for when we know it's a form file */
  888                3 TRAN_STATUS$ REDEF FILE_STATUS$ PTR,
  889                          /* for when we know it's a transaction file */
  890                3 FRAME$ PTR DALIGNED %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  891                          /* pointer to currently working FRAME block */
  892                3 FRAME_STATUS$ PTR DALIGNED %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  893                          /* pointer to currently working FRAME scratch area */
  894                3 FRAME_INDEX UBIN %INIT(0)%CHARTEXT('/**/'),
  895                          /* index into QI$FORM_FILE.FRAME_LIST_A@P
  896                             of QI_1.CURRENT.FRAME$ */
  897                3 NODE$ PTR DALIGNED %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  898                          /* pointer to currently working node block */
  899                3 NODE_STATUS$ PTR DALIGNED %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  900                          /* pointer to currently working node scratch area */
  901
  902              2 SPECIAL_NAMES DALIGNED,
  903                3 CURRENT_FORM$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  904                          /* Pointer to data area of CURRENT-FORM variable. */
  905                3 CURRENT_FRAME$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  906                          /* Pointer to data area of CURRENT-FRAME variable. */
  907                3 CURRENT_FIELD$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  908                          /* Pointer to data area of CURRENT-FIELD variable. */
  909                3 RETRY$ PTR DALIGNED %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  910                          /* Pointer to data area of RETRY variable. */
  911              2 SPECIAL_NAMES_A$(0:3) REDEF SPECIAL_NAMES PTR,
  912                          /* For array references. */
  913
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        28   
  914              2 ERROR_STATUS UBIN %INIT(0)%CHARTEXT('/**/'),
  915                          /* binary value of error condition */
  916              2 USE_DEFAULT_IO UBIN %INIT(0)%CHARTEXT('/**/'),
  917                          /* for default USE procedures, this cell contains
  918                             INPUT or OUTPUT */
  919              2 DEFAULT_USE_PROCEDURE_A@P(0:2) UBIN %INIT(0*0)%CHARTEXT('/**/'),
  920                          /* default USE procedure address:  "0" means none */
  921              2 IS_DEFAULT_USE_PROC_ACTIVE_A(0:15) BIT(1) %INIT('0'B*0)%CHARTEXT('/**/'),
  922                          /* activation bits for corr default USE proc */
  923              2 USE_PROCEDURE@P UBIN %INIT(0)%CHARTEXT('/**/'),
  924                          /* displacement value dropped by QCU$USE
  925                             for QCU$USE_CALL to warp to */
  926              2 PREVIOUS_INTERFACE_START$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  927                          /* pointer to previous saved state/internal value s
  928                             for master interface */
  929              2 PREVIOUS_FIELD_START_INDEX UBIN %INIT(0)%CHARTEXT('/**/'),
  930                          /* index for previous interface table range */
  931              2 PREVIOUS_FIELD_STOP_INDEX UBIN %INIT(0)%CHARTEXT('/**/'),
  932                          /* index for previous interface table range */
  933              2 EXPAND(0:9) UBIN;
  934
  935          %END_MACRO;
  936
  937        %MEND;
  938
  939      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        29   
  940
  941        %MACRO QI_SWORK ( STCLASS = "SYMREF",
  942                          NAME = QI_SWORK );
  943
  944          %BEGIN_MACRO ( STCLASS = STCLASS );
  945
  946        DCL 1 NAME(0:7) UBIN STCLASS %INIT(0*0)%CHARTEXT('/**/');
  947
  948          %END_MACRO;
  949
  950        %MEND;
  951
  952        %MACRO QI_SWORK_2 ( STCLASS = "SYMREF",
  953                            NAME = QI_SWORK_2 );
  954
  955          %BEGIN_MACRO ( STCLASS = STCLASS );
  956
  957        DCL 1 NAME(0:7) UBIN STCLASS %INIT(0*0)%CHARTEXT('/**/');
  958
  959          %END_MACRO;
  960
  961        %MEND;
  962
  963      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        30   
  964
  965        %MACRO QI_BLANK ( STCLASS = "SYMREF",
  966                          NAME = QI_BLANK );
  967
  968          %BEGIN_MACRO ( STCLASS = STCLASS );
  969
  970        DCL NAME STCLASS UBIN BYTE ALIGNED %INIT(%QI#BLANK)%CHARTEXT('/**/');
  971
  972          %END_MACRO;
  973
  974        %MEND;
  975
  976      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        31   
  977
  978        %MACRO QI_MAT_MATCH ( STCLASS = "SYMREF",
  979                              NAME = QI_MAT_MATCH );
  980
  981          %BEGIN_MACRO ( STCLASS = STCLASS );
  982
  983        DCL NAME STCLASS UBIN BYTE ALIGNED %INIT(%QI#MAT_MATCH)%CHARTEXT('/**/');
  984
  985          %END_MACRO;
  986
  987        %MEND;
  988
  989        %MACRO QI_MAT_NONMATCH ( STCLASS = "SYMREF",
  990                                 NAME = QI_MAT_NONMATCH );
  991
  992          %BEGIN_MACRO ( STCLASS = STCLASS );
  993
  994        DCL NAME STCLASS UBIN BYTE ALIGNED %INIT(%QI#MAT_NONMATCH)%CHARTEXT('/**/');
  995
  996          %END_MACRO;
  997
  998        %MEND;
  999
 1000      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        32   
 1001
 1002        %MACRO QI_SLASH ( STCLASS = "SYMREF",
 1003                          NAME = QI_SLASH );
 1004
 1005          %BEGIN_MACRO ( STCLASS = STCLASS );
 1006
 1007        DCL NAME STCLASS UBIN BYTE ALIGNED %INIT(%QI#SLASH)%CHARTEXT('/**/');
 1008
 1009          %END_MACRO;
 1010
 1011        %MEND;
 1012
 1013      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        33   
 1014
 1015        %MACRO QI_ZERO ( STCLASS = "SYMREF",
 1016                         NAME = QI_ZERO );
 1017
 1018          %BEGIN_MACRO ( STCLASS = STCLASS );
 1019
 1020        DCL NAME STCLASS UBIN BYTE ALIGNED %INIT(%QI#ZERO)%CHARTEXT('/**/');
 1021
 1022          %END_MACRO;
 1023
 1024        %MEND;
 1025
 1026        %MACRO QI_BINARY_ZERO ( STCLASS = "SYMREF",
 1027                                NAME = QI_BINARY_ZERO );
 1028
 1029          %BEGIN_MACRO ( STCLASS = STCLASS );
 1030
 1031        DCL NAME STCLASS UBIN BYTE ALIGNED %INIT(%QI#BINARY_ZERO)%CHARTEXT('/**/');
 1032
 1033          %END_MACRO;
 1034
 1035        %MEND;
 1036
 1037      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        34   
 1038
 1039        %MACRO QI_CLASS_ALPHA ( STCLASS = "SYMREF",
 1040                                NAME = QI_CLASS_ALPHA );
 1041
 1042          %BEGIN_MACRO ( STCLASS = STCLASS );
 1043
 1044        DCL NAME(0:255) STCLASS UBIN BYTE UNAL %INIT(
 1045            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 1046            1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 1047            0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,
 1048            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 1049            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 1050            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 1051            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 1052            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 1053                                                    )%CHARTEXT('/**/');
 1054
 1055          %END_MACRO;
 1056
 1057        %MEND;
 1058
 1059      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        35   
 1060
 1061        %MACRO QI_CLASS_NUMERIC ( STCLASS = "SYMREF",
 1062                                  NAME = QI_CLASS_NUMERIC );
 1063
 1064          %BEGIN_MACRO ( STCLASS = STCLASS );
 1065
 1066        DCL NAME(0:255) STCLASS UBIN BYTE UNAL %INIT(
 1067            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 1068            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,
 1069            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 1070            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 1071            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 1072            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 1073            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
 1074            0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 1075                                                    )%CHARTEXT('/**/');
 1076
 1077          %END_MACRO;
 1078
 1079        %MEND;
 1080
 1081      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        36   
 1082
 1083        %MACRO QI_OVERPUNCHED_SIGNS ( STCLASS = "SYMREF",
 1084                                      NAME = QI_OVERPUNCHED_SIGNS );
 1085
 1086          %BEGIN_MACRO ( STCLASS = STCLASS );
 1087
 1088        DCL NAME(0:19) STCLASS UBIN BYTE UNAL %INIT(
 1089            %ASCBIN('{'),%ASCBIN('A'),%ASCBIN('B'),%ASCBIN('C'),
 1090            %ASCBIN('D'),%ASCBIN('E'),%ASCBIN('F'),%ASCBIN('G'),
 1091            %ASCBIN('H'),%ASCBIN('I'),%ASCBIN('}'),%ASCBIN('J'),
 1092            %ASCBIN('K'),%ASCBIN('L'),%ASCBIN('M'),%ASCBIN('N'),
 1093            %ASCBIN('O'),%ASCBIN('P'),%ASCBIN('Q'),%ASCBIN('R')
 1094                                                    )%CHARTEXT('/**/');
 1095
 1096          %END_MACRO;
 1097
 1098        %MEND;
 1099
 1100      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        37   
 1101
 1102        %MACRO QI_ZERO_ACCUMULATOR ( STCLASS = "SYMREF",
 1103                                     NAME = QI_ZERO_ACCUMULATOR );
 1104
 1105          %BEGIN_MACRO ( STCLASS = STCLASS );
 1106
 1107        DCL 1 NAME STCLASS,
 1108              2 *(0:6) UBIN %INIT(0*0)%CHARTEXT('/**/'),
 1109              2 * BIT(16) %INIT('00B0'X)%CHARTEXT('/**/');
 1110
 1111          %END_MACRO;
 1112
 1113        %MEND;
 1114
 1115      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        38   
 1116      /*
 1117                             %%%%%%%  %%
 1118                                %%    %%
 1119                                %%    %% %%%    %%%%%
 1120                                %%    %%%  %%  %%   %%
 1121                                %%    %%   %%  %%%%%%%
 1122                                %%    %%   %%  %%
 1123                                %%    %%   %%   %%%%%
 1124
 1125                             %%%%%%%  %%%%%%   %%
 1126                             %%       %%   %%  %%
 1127                             %%       %%   %%  %%
 1128                             %%%%%    %%%%%%   %%
 1129                             %%       %%       %%
 1130                             %%       %%       %%
 1131                             %%       %%       %%%%%%%
 1132
 1133           %% %%%   %% %%%%   %%%%%    %%% %%  %% %%%%   %%% %%  %%% %%
 1134           %%%  %%  %%%%     %%   %%  %%  %%%  %%%%     %%  %%%  %% % %%
 1135           %%%  %%  %%%      %%   %%  %%  %%%  %%%      %%  %%%  %% % %%
 1136           %%%  %%  %%       %%   %%  %%  %%%  %%       %%  %%%  %% % %%
 1137           %% %%%   %%        %%%%%    %%% %%  %%        %%% %%  %% % %%
 1138           %%                              %%
 1139           %%                          %%%%%
 1140                                                                          */
 1141      /*D* NAME:         FPL_PROGRAM_STRUCTURE
 1142           PURPOSE:      To provide the MACROs which frame compiler-
 1143                         generated structures within the user's FPL
 1144                         program.
 1145           DESCRIPTION:  Below are MACROs whose invocation will
 1146                         cause generation of structures which frame
 1147                         the FPL program itself:
 1148                         1)  the opcode-operand sequences for runtime
 1149                             instructions;
 1150                         2)  static data (in user procedure) which
 1151                             define the attributes of FILEs, FRames,
 1152                             WORKING-STORAGE data, etc.;
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        39   
 1153                         3)  static data (in user data) which define
 1154                             the runtime status, or scratch, area,
 1155                             used to keep track of current operations
 1156                             on the item addressed (FILE, FRame, etc.).
 1157      */
 1158
 1159      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        40   
 1160      /*
 1161                                                             %%
 1162                                                             %%
 1163            %%%%%   %% %%%             %%%%%%   %%%%%    %%% %%   %%%%%
 1164           %%   %%  %%%  %%  %%%%%%%  %%       %%   %%  %%  %%%  %%   %%
 1165           %%   %%  %%%  %%           %%       %%   %%  %%  %%%  %%%%%%%
 1166           %%   %%  %%%  %%           %%       %%   %%  %%  %%%  %%
 1167            %%%%%   %% %%%             %%%%%%   %%%%%    %%% %%   %%%%%
 1168                    %%
 1169                    %%
 1170                                                 %%%
 1171                                                 %%%
 1172                     %%%%%%   %%%%%    %%% %%     %%     %%%%%%
 1173                    %%       %%   %%  %%  %%%    %%     %%
 1174                     %%%%%   %%%%%%%  %%  %%%            %%%%%
 1175                         %%  %%       %%  %%%                %%
 1176                    %%%%%%    %%%%%    %%% %%           %%%%%%
 1177                                           %%
 1178                                           %%
 1179                                                                          */
 1180
 1181      /*
 1182               Basic op-code sequence
 1183      */
 1184        %MACRO QI$OP_SEQUENCE ( STCLASS = "BASED",
 1185                         NAME = QI$OP_SEQUENCE );
 1186
 1187          %BEGIN_MACRO ( STCLASS = STCLASS );
 1188
 1189        DCL 1 NAME STCLASS ALIGNED,
 1190              2 CODE UBIN,
 1191                        /* Op-code. */
 1192              2 OPERAND_A@P(0:0) UBIN;
 1193                        /* Operands:  generally a list of DADs. */
 1194
 1195          %END_MACRO;
 1196
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        41   
 1197        %MEND;
 1198
 1199      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        42   
 1200      /*
 1201          Op-code sequence for ABORT [ "literal" | dataname ] verb.
 1202      */
 1203        %MACRO QI$OP_ABORT ( STCLASS = "BASED",
 1204                             NAME = QI$OP_ABORT );
 1205
 1206          %BEGIN_MACRO ( STCLASS = STCLASS );
 1207
 1208        DCL 1 NAME STCLASS ALIGNED,
 1209              2 CODE UBIN,
 1210              2 OPERAND@P UBIN,
 1211              2 NEXT_CODE@P UBIN;
 1212
 1213          %END_MACRO;
 1214
 1215        %MEND;
 1216
 1217      /*
 1218          Op-code sequence for ACCEPT verb.
 1219      */
 1220        %MACRO QI$OP_ACCEPT ( STCLASS = "BASED",
 1221                              NAME = QI$OP_ACCEPT );
 1222
 1223          %BEGIN_MACRO ( STCLASS = STCLASS );
 1224
 1225        DCL 1 NAME STCLASS ALIGNED,
 1226              2 CODE UBIN,
 1227              2 TYPE UBIN(3) UNAL,
 1228              2 FIELD_COUNT UBIN(13) UNAL,
 1229              2 DATANAME@P UBIN,
 1230              2 FIELD_A@P(0:0) REDEF DATANAME@P UBIN,
 1231              2 NEXT_CODE@P UBIN;
 1232
 1233          %END_MACRO;
 1234
 1235        %MEND;
 1236
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        43   
 1237      /*
 1238          Op-code sequence for ACTIVATE verb.
 1239      */
 1240        %MACRO QI$OP_ACTIVATE ( STCLASS = "BASED",
 1241                                NAME = QI$OP_ACTIVATE );
 1242
 1243          %BEGIN_MACRO ( STCLASS = STCLASS );
 1244
 1245        DCL 1 NAME STCLASS ALIGNED,
 1246              2 CODE UBIN,
 1247              2 OPERAND_COUNT UBIN,
 1248              2 OPERAND_A@P(0:0) UBIN;
 1249
 1250          %END_MACRO;
 1251
 1252        %MEND;
 1253
 1254      /*
 1255          Op-code sequence for ADD operation.
 1256      */
 1257        %MACRO QI$OP_ADD ( STCLASS = "BASED",
 1258                           NAME = QI$OP_ADD );
 1259
 1260          %BEGIN_MACRO ( STCLASS = STCLASS );
 1261
 1262        DCL 1 NAME STCLASS ALIGNED,
 1263              2 CODE UBIN,
 1264              2 NUMERIC_SOURCE@P UBIN,
 1265              2 NUMERIC_TARGET@P UBIN,
 1266              2 NEXT_CODE@P UBIN;
 1267
 1268          %END_MACRO;
 1269
 1270        %MEND;
 1271
 1272      /*
 1273          Op-code sequence for ADDing a group of arguments.
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        44   
 1274      */
 1275        %MACRO QI$OP_ADDX ( STCLASS = "BASED",
 1276                            NAME = QI$OP_ADDX );
 1277
 1278          %BEGIN_MACRO ( STCLASS = STCLASS );
 1279
 1280        DCL 1 NAME STCLASS ALIGNED,
 1281              2 CODE UBIN,
 1282              2 ARGUMENT_COUNT UBIN,
 1283              2 ARGUMENT_A@P(0:0) UBIN;
 1284
 1285          %END_MACRO;
 1286
 1287        %MEND;
 1288
 1289      /*
 1290          Op-code sequence for ALL "literal" to 'temp' DISPLAY operation.
 1291      */
 1292        %MACRO QI$OP_ALL_LITERAL ( STCLASS = "BASED",
 1293                                   NAME = QI$OP_ALL_LITERAL );
 1294
 1295          %BEGIN_MACRO ( STCLASS = STCLASS );
 1296
 1297        DCL 1 NAME STCLASS ALIGNED,
 1298              2 CODE UBIN,
 1299              2 ALL_LITERAL_SOURCE@P UBIN,
 1300              2 TEMP_DISPLAY_TARGET@P UBIN,
 1301              2 NEXT_CODE@P UBIN;
 1302
 1303          %END_MACRO;
 1304
 1305        %MEND;
 1306
 1307      /*
 1308          Op-code sequence for APPLY verb.
 1309      */
 1310        %MACRO QI$OP_APPLY ( STCLASS = "BASED",
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        45   
 1311                             NAME = QI$OP_APPLY );
 1312
 1313          %BEGIN_MACRO ( STCLASS = STCLASS );
 1314
 1315        DCL 1 NAME STCLASS ALIGNED,
 1316              2 CODE UBIN,
 1317              2 VISUAL_ATTRIBUTE UBIN,
 1318              2 OPERAND_COUNT UBIN,
 1319              2 OPERAND_A@P(0:0) UBIN;
 1320
 1321          %END_MACRO;
 1322
 1323        %MEND;
 1324
 1325      /*
 1326          Op-code sequence for CALL verb.
 1327      */
 1328        %MACRO QI$OP_CALL ( STCLASS = "BASED",
 1329                            NAME = QI$OP_CALL );
 1330
 1331          %BEGIN_MACRO ( STCLASS = STCLASS );
 1332
 1333        DCL 1 NAME STCLASS ALIGNED,
 1334              2 CODE UBIN,
 1335              2 EPTR$ EPTR,
 1336              2 PTR$ REDEF EPTR$ PTR,
 1337              2 DESCRIPTOR_LIST,
 1338                3 ARGUMENT_COUNT UBIN(8) UNAL,
 1339                3 DESCRIPTOR_COUNT UBIN(8) UNAL,
 1340              2 ARGUMENT_A@P(0:0) UBIN;
 1341
 1342          %END_MACRO;
 1343
 1344        %MEND;
 1345
 1346      /*
 1347          Op-code sequence for CLEAR verb.
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        46   
 1348      */
 1349        %MACRO QI$OP_CLEAR ( STCLASS = "BASED",
 1350                             NAME = QI$OP_CLEAR );
 1351
 1352          %BEGIN_MACRO ( STCLASS = STCLASS );
 1353
 1354        DCL 1 NAME STCLASS ALIGNED,
 1355              2 CODE UBIN,
 1356              2 IS_CLEAR_ALL BIT(1) UNAL,
 1357              2 IO_FLAGS,
 1358                3 IS_OUTPUT BIT(1) UNAL,
 1359                3 IS_INPUT BIT(1) UNAL,
 1360              2 IO_VALUE REDEF IO_FLAGS UBIN(2) UNAL,
 1361              2 OPERAND_COUNT UBIN(13) UNAL,
 1362              2 OPERAND_A@P(0:0) UBIN;
 1363
 1364          %END_MACRO;
 1365
 1366        %MEND;
 1367
 1368      /*
 1369          Op-code sequence for CLOSE verb.
 1370      */
 1371        %MACRO QI$OP_CLOSE ( STCLASS = "BASED",
 1372                             NAME = QI$OP_CLOSE );
 1373
 1374          %BEGIN_MACRO ( STCLASS = STCLASS );
 1375
 1376        DCL 1 NAME STCLASS ALIGNED,
 1377              2 CODE UBIN,
 1378              2 FILE_COUNT UBIN,
 1379              2 OPERAND_A(0:0),
 1380                3 FUNNY_ZERO_WORD UBIN,
 1381                3 FILE@P UBIN;
 1382
 1383          %END_MACRO;
 1384
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        47   
 1385        %MEND;
 1386
 1387      /*
 1388          Op-code sequence for 'temp' BINARY to BINARY conversion.
 1389      */
 1390        %MACRO QI$OP_CNVBBX ( STCLASS = "BASED",
 1391                              NAME = QI$OP_CNVBBX );
 1392
 1393          %BEGIN_MACRO ( STCLASS = STCLASS );
 1394
 1395        DCL 1 NAME STCLASS ALIGNED,
 1396              2 CODE UBIN,
 1397              2 TEMP_BINARY_SOURCE@P UBIN,
 1398              2 BINARY_TARGET@P UBIN,
 1399              2 NEXT_CODE@P UBIN;
 1400
 1401          %END_MACRO;
 1402
 1403        %MEND;
 1404
 1405      /*
 1406          Op-code sequence for BINARY to 'temp' DISPLAY conversion.
 1407      */
 1408        %MACRO QI$OP_CNVBN ( STCLASS = "BASED",
 1409                             NAME = QI$OP_CNVBN );
 1410
 1411          %BEGIN_MACRO ( STCLASS = STCLASS );
 1412
 1413        DCL 1 NAME STCLASS ALIGNED,
 1414              2 CODE UBIN,
 1415              2 BINARY_SOURCE@P UBIN,
 1416              2 TEMP_DISPLAY_TARGET@P UBIN,
 1417              2 NEXT_CODE@P UBIN;
 1418
 1419          %END_MACRO;
 1420
 1421        %MEND;
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        48   
 1422
 1423      /*
 1424          Op-code sequence for 'temp' BINARY to DISPLAY conversion.
 1425      */
 1426        %MACRO QI$OP_CNVBNX ( STCLASS = "BASED",
 1427                              NAME = QI$OP_CNVBNX );
 1428
 1429          %BEGIN_MACRO ( STCLASS = STCLASS );
 1430
 1431        DCL 1 NAME STCLASS ALIGNED,
 1432              2 CODE UBIN,
 1433              2 TEMP_BINARY_SOURCE@P UBIN,
 1434              2 DISPLAY_TARGET@P UBIN,
 1435              2 NEXT_CODE@P UBIN;
 1436
 1437          %END_MACRO;
 1438
 1439        %MEND;
 1440
 1441      /*
 1442          Op-code sequence for 'temp' BINARY to PACKED conversion.
 1443      */
 1444        %MACRO QI$OP_CNVBPX ( STCLASS = "BASED",
 1445                              NAME = QI$OP_CNVBPX );
 1446
 1447          %BEGIN_MACRO ( STCLASS = STCLASS );
 1448
 1449        DCL 1 NAME STCLASS ALIGNED,
 1450              2 CODE UBIN,
 1451              2 TEMP_BINARY_SOURCE@P UBIN,
 1452              2 PACKED_TARGET@P UBIN,
 1453              2 NEXT_CODE@P UBIN;
 1454
 1455          %END_MACRO;
 1456
 1457        %MEND;
 1458
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        49   
 1459      /*
 1460          Op-code sequence for DISPLAY to 'temp' BINARY conversion.
 1461      */
 1462        %MACRO QI$OP_CNVNBT ( STCLASS = "BASED",
 1463                              NAME = QI$OP_CNVNBT );
 1464
 1465          %BEGIN_MACRO ( STCLASS = STCLASS );
 1466
 1467        DCL 1 NAME STCLASS ALIGNED,
 1468              2 CODE UBIN,
 1469              2 DISPLAY_SOURCE@P UBIN,
 1470              2 TEMP_BINARY_TARGET@P UBIN,
 1471              2 NEXT_CODE@P UBIN;
 1472
 1473          %END_MACRO;
 1474
 1475        %MEND;
 1476
 1477      /*
 1478          Op-code sequence for PACKED to 'temp' BINARY conversion.
 1479      */
 1480        %MACRO QI$OP_CNVPBT ( STCLASS = "BASED",
 1481                              NAME = QI$OP_CNVPBT );
 1482
 1483          %BEGIN_MACRO ( STCLASS = STCLASS );
 1484
 1485        DCL 1 NAME STCLASS ALIGNED,
 1486              2 CODE UBIN,
 1487              2 PACKED_SOURCE@P UBIN,
 1488              2 TEMP_BINARY_TARGET@P UBIN,
 1489              2 NEXT_CODE@P UBIN;
 1490
 1491          %END_MACRO;
 1492
 1493        %MEND;
 1494
 1495      /*
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        50   
 1496          Op-code sequence for PACKED to 'temp' DISPLAY conversion.
 1497      */
 1498        %MACRO QI$OP_CNVPN ( STCLASS = "BASED",
 1499                              NAME = QI$OP_CNVPN );
 1500
 1501          %BEGIN_MACRO ( STCLASS = STCLASS );
 1502
 1503        DCL 1 NAME STCLASS ALIGNED,
 1504              2 CODE UBIN,
 1505              2 PACKED_SOURCE@P UBIN,
 1506              2 TEMP_DISPLAY_TARGET@P UBIN,
 1507              2 NEXT_CODE@P UBIN;
 1508
 1509          %END_MACRO;
 1510
 1511        %MEND;
 1512
 1513      /*
 1514          Op-code sequence for DISPLAY verb.
 1515      */
 1516        %MACRO QI$OP_DISPLAY ( STCLASS = "BASED",
 1517                               NAME = QI$OP_DISPLAY );
 1518
 1519          %BEGIN_MACRO ( STCLASS = STCLASS );
 1520
 1521        DCL 1 NAME STCLASS ALIGNED,
 1522              2 CODE UBIN,
 1523              2 TYPE UBIN(3) UNAL,
 1524              2 FIELD_COUNT UBIN(13) UNAL,
 1525              2 FIELD_A@P(0:0) UBIN,
 1526              2 NEXT_CODE@P REDEF FIELD_A@P UBIN;
 1527
 1528          %END_MACRO;
 1529
 1530        %MEND;
 1531
 1532      /*
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        51   
 1533          Op-code sequence for DIVide operation.
 1534      */
 1535        %MACRO QI$OP_DIV ( STCLASS = "BASED",
 1536                           NAME = QI$OP_DIV );
 1537
 1538          %BEGIN_MACRO ( STCLASS = STCLASS );
 1539
 1540        DCL 1 NAME STCLASS ALIGNED,
 1541              2 CODE UBIN,
 1542              2 DIVISOR@P UBIN,
 1543              2 DIVIDEND_AND_QUOTIENT@P UBIN,
 1544              2 NEXT_CODE@P UBIN;
 1545
 1546          %END_MACRO;
 1547
 1548        %MEND;
 1549
 1550      /*
 1551          Op-code sequence for DIViding two arguments and placing the
 1552          result into the accumulator.
 1553      */
 1554        %MACRO QI$OP_DIVX ( STCLASS = "BASED",
 1555                            NAME = QI$OP_DIVX );
 1556
 1557          %BEGIN_MACRO ( STCLASS = STCLASS );
 1558
 1559        DCL 1 NAME STCLASS ALIGNED,
 1560              2 CODE UBIN,
 1561              2 DIVISOR@P UBIN,
 1562              2 DIVIDEND@P UBIN,
 1563              2 NEXT_CODE@P UBIN;
 1564
 1565          %END_MACRO;
 1566
 1567        %MEND;
 1568
 1569      /*
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        52   
 1570         Op-code sequence for ENABLE verb.
 1571      */
 1572        %MACRO QI$OP_ENABLE ( STCLASS = "BASED",
 1573                              NAME = QI$OP_ENABLE );
 1574
 1575          %BEGIN_MACRO ( STCLASS = STCLASS );
 1576
 1577        DCL 1 NAME STCLASS ALIGNED,
 1578              2 CODE UBIN,
 1579              2 * UBIN(1) UNAL,
 1580              2 IO_FLAGS,
 1581                3 IS_OUTPUT BIT(1) UNAL,
 1582                3 IS_INPUT BIT(1) UNAL,
 1583              2 IO_VALUE REDEF IO_FLAGS UBIN(2) UNAL,
 1584              2 OPERAND_COUNT UBIN(13) UNAL,
 1585              2 OPERAND_A@P(0:0) UBIN;
 1586
 1587          %END_MACRO;
 1588
 1589        %MEND;
 1590
 1591      /*
 1592         Op-code sequence for GO TO transfer of control verb.
 1593      */
 1594        %MACRO QI$OP_GOTO ( STCLASS = "BASED",
 1595                            NAME = QI$OP_GOTO );
 1596
 1597          %BEGIN_MACRO ( STCLASS = STCLASS );
 1598
 1599        DCL 1 NAME STCLASS ALIGNED,
 1600              2 CODE UBIN,
 1601              2 GOTO@P UBIN,
 1602              2 NEXT_CODE@P UBIN;
 1603
 1604          %END_MACRO;
 1605
 1606        %MEND;
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        53   
 1607
 1608      /*
 1609          Op-code sequence for GO TO DEPENDING ON transfer of control verb.
 1610      */
 1611        %MACRO QI$OP_GOTODP ( STCLASS = "BASED",
 1612                              NAME = QI$OP_GOTODP );
 1613
 1614          %BEGIN_MACRO ( STCLASS = STCLASS );
 1615
 1616        DCL 1 NAME STCLASS ALIGNED,
 1617              2 CODE UBIN,
 1618              2 GOTO_INDEX@P UBIN,
 1619              2 PROCEDURE_NAME_COUNT UBIN,
 1620              2 PROCEDURE_NAME_A@P(0:0) UBIN;
 1621
 1622          %END_MACRO;
 1623
 1624        %MEND;
 1625
 1626      /*
 1627          Op-code sequence for IF CLASS transfer of control verb.
 1628      */
 1629        %MACRO QI$OP_IFCLS ( STCLASS = "BASED",
 1630                             NAME = QI$OP_IFCLS );
 1631
 1632          %BEGIN_MACRO ( STCLASS = STCLASS );
 1633
 1634        DCL 1 NAME STCLASS ALIGNED,
 1635              2 CODE UBIN,
 1636              2 SOURCE@P UBIN,
 1637              2 ATTRIBUTE,
 1638                3 * UBIN(11) UNAL,
 1639                3 IS_NOT BIT(1) UNAL,
 1640                3 TYPE,
 1641                  4 IS_ALPHA BIT(1) UNAL,
 1642                  4 IS_NUMERIC BIT(1) UNAL,
 1643                  4 IS_DIGITS BIT(1) UNAL,
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        54   
 1644                  4 * UBIN(1) UNAL,
 1645                3 TYPES REDEF TYPE UBIN(4) UNAL,
 1646              2 FALSE_CONDITION@P UBIN,
 1647              2 NEXT_CODE@P UBIN;
 1648
 1649          %END_MACRO;
 1650
 1651        %MEND;
 1652
 1653      /*
 1654          Op-code sequence for IF CONDITIONAL ALPHA tranfer of control verb.
 1655      */
 1656        %MACRO QI$OP_IFCNDA ( STCLASS = "BASED",
 1657                              NAME = QI$OP_IFCNDA );
 1658
 1659          %BEGIN_MACRO ( STCLASS = STCLASS );
 1660
 1661        DCL 1 NAME STCLASS ALIGNED,
 1662              2 CODE UBIN,
 1663              2 ALPHANUMERIC_SOURCE@P UBIN,
 1664              2 CONDITION_CONTROL_BLOCK@P UBIN,
 1665              2 ATTRIBUTE,
 1666                3 * UBIN(11) UNAL,
 1667                3 IS_NOT BIT(1) UNAL,
 1668                3 * UBIN(4) UNAL,
 1669              2 FALSE_CONDITION@P UBIN,
 1670              2 NEXT_CODE@P UBIN;
 1671
 1672          %END_MACRO;
 1673
 1674        %MEND;
 1675
 1676      /*
 1677          Op-code sequence for IF CONDITIONAL NUMERIC transfer of control
 1678          verb.
 1679      */
 1680        %MACRO QI$OP_IFCNDN ( STCLASS = "BASED",
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        55   
 1681                              NAME = QI$OP_IFCNDN );
 1682
 1683          %BEGIN_MACRO ( STCLASS = STCLASS );
 1684
 1685        DCL 1 NAME STCLASS ALIGNED,
 1686              2 CODE UBIN,
 1687              2 NUMERIC_SOURCE@P UBIN,
 1688              2 CONDITION_CONTROL_BLOCK@P UBIN,
 1689              2 ATTRIBUTE,
 1690                3 * UBIN(11) UNAL,
 1691                3 IS_NOT BIT(1) UNAL,
 1692                3 * UBIN(4) UNAL,
 1693              2 FALSE_CONDITION@P UBIN,
 1694              2 NEXT_CODE@P UBIN;
 1695
 1696          %END_MACRO;
 1697
 1698        %MEND;
 1699
 1700      /*
 1701          Op-code sequence for IF frame-or-field-status
 1702          IF framename ACTIVE
 1703          IF fieldname ENABLED FOR { INPUT | OUTPUT | I-O }
 1704          IF fieldname { AVAILABLE | PRESENTED }
 1705      */
 1706        %MACRO QI$OP_IFINDR ( STCLASS = "BASED",
 1707                              NAME = QI$OP_IFINDR );
 1708
 1709          %BEGIN_MACRO ( STCLASS = STCLASS );
 1710
 1711        DCL 1 NAME STCLASS ALIGNED,
 1712              2 CODE UBIN,
 1713              2 FRAME_OR_FIELD@P UBIN,
 1714              2 ATTRIBUTE,
 1715                3 * UBIN(11) UNAL,
 1716                3 IS_NOT BIT(1) UNAL,
 1717                3 STATUS_TYPE UBIN(4) UNAL,
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        56   
 1718              2 FALSE_CONDITION@P UBIN,
 1719              2 NEXT_CODE@P UBIN;
 1720
 1721          %END_MACRO;
 1722
 1723        %MEND;
 1724
 1725      /*
 1726          Op-code sequence for IF RELATIONAL ALPHABETIC transfer of control
 1727          verb.
 1728      */
 1729        %MACRO QI$OP_IFRELA ( STCLASS = "BASED",
 1730                              NAME = QI$OP_IFRELA );
 1731
 1732          %BEGIN_MACRO ( STCLASS = STCLASS );
 1733
 1734        DCL 1 NAME STCLASS ALIGNED,
 1735              2 CODE UBIN,
 1736              2 ALPHANUMERIC_SOURCE@P UBIN,
 1737              2 ALPHANUMERIC_TARGET@P UBIN,
 1738              2 RELATIONAL_ATTRIBUTE UBIN,
 1739              2 FALSE_CONDITION@P UBIN,
 1740              2 NEXT_CODE@P UBIN;
 1741
 1742          %END_MACRO;
 1743
 1744        %MEND;
 1745
 1746      /*
 1747          Op-code sequence for IF RELATIONAL GROUP transfer of control
 1748          verb.
 1749      */
 1750        %MACRO QI$OP_IFRELG ( STCLASS = "BASED",
 1751                              NAME = QI$OP_IFRELG );
 1752
 1753          %BEGIN_MACRO ( STCLASS = STCLASS );
 1754
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        57   
 1755        DCL 1 NAME STCLASS ALIGNED,
 1756              2 CODE UBIN,
 1757              2 IS_SOURCE_GROUP BIT(1) UNAL,
 1758              2 * UBIN(1) UNAL,
 1759              2 ANTI_GROUP_LENGTH UBIN(14) UNAL,
 1760              2 SOURCE@P UBIN,
 1761              2 TARGET@P UBIN,
 1762              2 RELATIONAL_ATTRIBUTE UBIN,
 1763              2 FALSE_CONDITION@P UBIN,
 1764              2 NEXT_CODE@P UBIN;
 1765
 1766          %END_MACRO;
 1767
 1768        %MEND;
 1769
 1770      /*
 1771          Op-code sequence for IF RELATIONAL NUMERIC transfer of control
 1772          verb.
 1773      */
 1774        %MACRO QI$OP_IFRELN ( STCLASS = "BASED",
 1775                              NAME = QI$OP_IFRELN );
 1776
 1777          %BEGIN_MACRO ( STCLASS = STCLASS );
 1778
 1779        DCL 1 NAME STCLASS ALIGNED,
 1780              2 CODE UBIN,
 1781              2 NUMERIC_SOURCE@P UBIN,
 1782              2 NUMERIC_TARGET@P UBIN,
 1783              2 RELATIONAL_ATTRIBUTE UBIN,
 1784              2 FALSE_CONDITION@P UBIN,
 1785              2 NEXT_CODE@P UBIN;
 1786
 1787          %END_MACRO;
 1788
 1789        %MEND;
 1790
 1791
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        58   
 1792      /*
 1793          Op-code sequence for INSPECT verb (TALLYING or REPLACING).
 1794      */
 1795        %MACRO QI$OP_INSPECT ( STCLASS = "BASED",
 1796                               NAME = QI$OP_INSPECT );
 1797
 1798          %BEGIN_MACRO ( STCLASS = STCLASS );
 1799
 1800        DCL 1 NAME STCLASS ALIGNED,
 1801              2 CODE UBIN,
 1802              2 SOURCE@P UBIN,
 1803              2 TALLYING_ITEM@P UBIN,
 1804              2 REPLACING_OLD_ITEM@P REDEF TALLYING_ITEM@P UBIN,
 1805              2 TALLYING_FOR_ITEM@P UBIN,
 1806              2 REPLACING_NEW_ITEM@P REDEF TALLYING_FOR_ITEM@P UBIN,
 1807              2 TALLYING_INITIAL_ITEM@P UBIN,
 1808              2 REPLACING_INITIAL_ITEM@P REDEF TALLYING_INITIAL_ITEM@P UBIN,
 1809              2 ATTRIBUTE,
 1810                3 * UBIN(10) UNAL,
 1811                3 IS_REPLACING BIT(1) UNAL,
 1812                3 BEFORE_AFTER UBIN(2) UNAL,
 1813                3 WHICH_CHARS UBIN(3) UNAL,
 1814              2 NEXT_CODE@P UBIN;
 1815
 1816          %END_MACRO;
 1817
 1818        %MEND;
 1819
 1820      /*
 1821          Op-code sequence for ON SIZE ERROR condition.
 1822      */
 1823        %MACRO QI$OP_JAZ ( STCLASS = "BASED",
 1824                           NAME = QI$OP_JAZ );
 1825
 1826          %BEGIN_MACRO ( STCLASS = STCLASS );
 1827
 1828        DCL 1 NAME STCLASS ALIGNED,
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        59   
 1829              2 CODE UBIN,
 1830              2 EVERYTHINGS_PEACHY@P UBIN,
 1831              2 NEXT_CODE@P UBIN;
 1832
 1833          %END_MACRO;
 1834
 1835        %MEND;
 1836
 1837      /*
 1838          Op-code sequence for NO DATA condition.
 1839      */
 1840        %MACRO QI$OP_JND ( STCLASS = "BASED",
 1841                           NAME = QI$OP_JND );
 1842
 1843          %BEGIN_MACRO ( STCLASS = STCLASS );
 1844
 1845        DCL 1 NAME STCLASS ALIGNED,
 1846              2 CODE UBIN,
 1847              2 EVERYTHINGS_PEACHY@P UBIN,
 1848              2 NEXT_CODE@P UBIN;
 1849
 1850          %END_MACRO;
 1851
 1852        %MEND;
 1853
 1854      /*
 1855          Op-code sequence for LOAD verb.
 1856      */
 1857        %MACRO QI$OP_LOAD ( STCLASS = "BASED",
 1858                            NAME = QI$OP_LOAD );
 1859
 1860          %BEGIN_MACRO ( STCLASS = STCLASS );
 1861
 1862        DCL 1 NAME STCLASS ALIGNED,
 1863              2 CODE UBIN,
 1864              2 IS_ARGUMENT_PASSED BIT(1) UNAL,
 1865              2 * UBIN(1) UNAL,
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        60   
 1866              2 IS_BY_NAME BIT(1) UNAL,
 1867              2 * UBIN(13) UNAL,
 1868              2 NAME_OR_TYPE@P UBIN,
 1869              2 ARGUMENT@P UBIN,
 1870              2 NEXT_CODE@P UBIN;
 1871
 1872          %END_MACRO;
 1873
 1874        %MEND;
 1875
 1876      /*
 1877          Op-code sequence for anything to ALPHANUMERIC MOVEs.
 1878          PIC xxx -> PIC X
 1879      */
 1880        %MACRO QI$OP_MOVA ( STCLASS = "BASED",
 1881                            NAME = QI$OP_MOVA );
 1882
 1883          %BEGIN_MACRO ( STCLASS = STCLASS );
 1884
 1885        DCL 1 NAME STCLASS ALIGNED,
 1886              2 CODE UBIN,
 1887              2 SOURCE@P UBIN,
 1888              2 ALPHANUMERIC_TARGET@P UBIN,
 1889              2 NEXT_CODE@P UBIN;
 1890
 1891          %END_MACRO;
 1892
 1893        %MEND;
 1894
 1895      /*
 1896          Op-code sequence for anything to ALPHANUMERIC EDITED MOVEs.
 1897          PIC xxx -> PIC B0X/
 1898      */
 1899        %MACRO QI$OP_MOVAE ( STCLASS = "BASED",
 1900                             NAME = QI$OP_MOVAE );
 1901
 1902          %BEGIN_MACRO ( STCLASS = STCLASS );
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        61   
 1903
 1904        DCL 1 NAME STCLASS ALIGNED,
 1905              2 CODE UBIN,
 1906              2 SOURCE@P UBIN,
 1907              2 ALPHANUMERIC_EDITED_TARGET@P UBIN,
 1908              2 NEXT_CODE@P UBIN;
 1909
 1910          %END_MACRO;
 1911
 1912        %MEND;
 1913
 1914      /*
 1915          Op-code sequence for anything to ALPHANUMERIC JUSTIFIED RIGHT MOVEs.
 1916          PIC xxx -> PIC XX JUSTIFIED RIGHT
 1917      */
 1918        %MACRO QI$OP_MOVAJ ( STCLASS = "BASED",
 1919                             NAME = QI$OP_MOVAJ );
 1920
 1921          %BEGIN_MACRO ( STCLASS = STCLASS );
 1922
 1923        DCL 1 NAME STCLASS ALIGNED,
 1924              2 CODE UBIN,
 1925              2 SOURCE@P UBIN,
 1926              2 RJ_ALPHANUMERIC_TARGET@P UBIN,
 1927              2 NEXT_CODE@P UBIN;
 1928
 1929          %END_MACRO;
 1930
 1931        %MEND;
 1932
 1933      /*
 1934          Op-code sequence for anything to BINARY MOVEs.
 1935          PIC xxx  ->  [ PIC 9( 2 | 4 ) ]  { COMP-1 | COMP-2 }
 1936      */
 1937        %MACRO QI$OP_MOVB ( STCLASS = "BASED",
 1938                            NAME = QI$OP_MOVB );
 1939
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        62   
 1940          %BEGIN_MACRO ( STCLASS = STCLASS );
 1941
 1942        DCL 1 NAME STCLASS ALIGNED,
 1943              2 CODE UBIN,
 1944              2 SOURCE@P UBIN,
 1945              2 BINARY_TARGET@P UBIN,
 1946              2 NEXT_CODE@P UBIN;
 1947
 1948          %END_MACRO;
 1949
 1950        %MEND;
 1951
 1952      /*
 1953          Op-code sequence for 'accumulator' to BINARY MOVEs.
 1954          QI_1.ACCUM  ->  [ PIC 9( 2 | 4 ) ]  { COMP-1 | COMP-2 }
 1955      */
 1956        %MACRO QI$OP_MOVBA ( STCLASS = "BASED",
 1957                             NAME = QI$OP_MOVBA );
 1958
 1959          %BEGIN_MACRO ( STCLASS = STCLASS );
 1960
 1961        DCL 1 NAME STCLASS ALIGNED,
 1962              2 CODE UBIN,
 1963              2 BINARY_TARGET@P UBIN,
 1964              2 NEXT_CODE@P UBIN;
 1965
 1966          %END_MACRO;
 1967
 1968        %MEND;
 1969
 1970      /*
 1971          Op-code sequence for NUMERIC EDITED to NUMERIC MOVEs.
 1972          PIC $9  ->  PIC 99
 1973      */
 1974        %MACRO QI$OP_MOVDE ( STCLASS = "BASED",
 1975                             NAME = QI$OP_MOVDE );
 1976
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        63   
 1977          %BEGIN_MACRO ( STCLASS = STCLASS );
 1978
 1979        DCL 1 NAME STCLASS ALIGNED,
 1980              2 CODE UBIN,
 1981              2 NUMERIC_EDITED_SOURCE@P UBIN,
 1982              2 NUMERIC_TARGET@P UBIN,
 1983              2 NEXT_CODE@P UBIN;
 1984
 1985          %END_MACRO;
 1986
 1987        %MEND;
 1988
 1989      /*
 1990          Op-code sequence for anything/group to anything/group MOVEs.
 1991          GROUP  ->  PIC xxx    |    PIC xxx  ->  GROUP
 1992      */
 1993        %MACRO QI$OP_MOVG ( STCLASS = "BASED",
 1994                            NAME = QI$OP_MOVG );
 1995
 1996          %BEGIN_MACRO ( STCLASS = STCLASS );
 1997
 1998        DCL 1 NAME STCLASS ALIGNED,
 1999              2 CODE UBIN,
 2000              2 SOURCE@P UBIN,
 2001              2 TARGET@P UBIN,
 2002              2 IS_SOURCE_GROUP BIT(1) UNAL,
 2003              2 * UBIN(1) UNAL,
 2004              2 ANTI_GROUP_LENGTH UBIN(14) UNAL,
 2005              2 NEXT_CODE@P UBIN;
 2006
 2007          %END_MACRO;
 2008
 2009        %MEND;
 2010
 2011      /*
 2012          Op-code sequence for anything to DISPLAY MOVEs.
 2013          PIC xxx  ->  PIC 9
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        64   
 2014      */
 2015        %MACRO QI$OP_MOVN ( STCLASS = "BASED",
 2016                            NAME = QI$OP_MOVN );
 2017
 2018          %BEGIN_MACRO ( STCLASS = STCLASS );
 2019
 2020        DCL 1 NAME STCLASS ALIGNED,
 2021              2 CODE UBIN,
 2022              2 SOURCE@P UBIN,
 2023              2 DISPLAY_TARGET@P UBIN,
 2024              2 NEXT_CODE@P UBIN;
 2025
 2026          %END_MACRO;
 2027
 2028        %MEND;
 2029
 2030      /*
 2031          Op-code sequence for 'accumulator' to DISPLAY MOVEs.
 2032          QI_1.ACCUM  ->  PIC 9
 2033      */
 2034        %MACRO QI$OP_MOVNA ( STCLASS = "BASED",
 2035                             NAME = QI$OP_MOVNA );
 2036
 2037          %BEGIN_MACRO ( STCLASS = STCLASS );
 2038
 2039        DCL 1 NAME STCLASS ALIGNED,
 2040              2 CODE UBIN,
 2041              2 DISPLAY_TARGET@P UBIN,
 2042              2 NEXT_CODE@P UBIN;
 2043
 2044          %END_MACRO;
 2045
 2046        %MEND;
 2047
 2048      /*
 2049          Op-code sequence for anything to NUMERIC EDITED MOVEs.
 2050          PIC xxx  ->  PIC $
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        65   
 2051      */
 2052        %MACRO QI$OP_MOVNE ( STCLASS = "BASED",
 2053                             NAME = QI$OP_MOVNE );
 2054
 2055          %BEGIN_MACRO ( STCLASS = STCLASS );
 2056
 2057        DCL 1 NAME STCLASS ALIGNED,
 2058              2 CODE UBIN,
 2059              2 SOURCE@P UBIN,
 2060              2 NUMERIC_EDITED_TARGET@P UBIN,
 2061              2 NEXT_CODE@P UBIN;
 2062
 2063          %END_MACRO;
 2064
 2065        %MEND;
 2066
 2067      /*
 2068          Op-code sequence for 'accumulator' to NUMERIC EDITED MOVEs.
 2069          QI_1.ACCUM  ->  PIC $
 2070      */
 2071        %MACRO QI$OP_MOVNEA ( STCLASS = "BASED",
 2072                              NAME = QI$OP_MOVNEA );
 2073
 2074          %BEGIN_MACRO ( STCLASS = STCLASS );
 2075
 2076        DCL 1 NAME STCLASS ALIGNED,
 2077              2 CODE UBIN,
 2078              2 NUMERIC_EDITED_TARGET@P UBIN,
 2079              2 NEXT_CODE@P UBIN;
 2080
 2081          %END_MACRO;
 2082
 2083        %MEND;
 2084
 2085      /*
 2086          Op-code sequence for anything to PACKED MOVEs.
 2087          PIC xxx  ->  PIC 9 COMP
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        66   
 2088      */
 2089        %MACRO QI$OP_MOVP ( STCLASS = "BASED",
 2090                            NAME = QI$OP_MOVP );
 2091
 2092          %BEGIN_MACRO ( STCLASS = STCLASS );
 2093
 2094        DCL 1 NAME STCLASS ALIGNED,
 2095              2 CODE UBIN,
 2096              2 SOURCE@P UBIN,
 2097              2 PACKED_TARGET@P UBIN,
 2098              2 NEXT_CODE@P UBIN;
 2099
 2100          %END_MACRO;
 2101
 2102        %MEND;
 2103
 2104      /*
 2105          Op-code sequence for 'accumulator' to PACKED MOVEs.
 2106          QI_1.ACCUM  ->  PIC 9 COMP
 2107      */
 2108        %MACRO QI$OP_MOVPA ( STCLASS = "BASED",
 2109                             NAME = QI$OP_MOVPA );
 2110
 2111          %BEGIN_MACRO ( STCLASS = STCLASS );
 2112
 2113        DCL 1 NAME STCLASS ALIGNED,
 2114              2 CODE UBIN,
 2115              2 PACKED_TARGET@P UBIN,
 2116              2 NEXT_CODE@P UBIN;
 2117
 2118          %END_MACRO;
 2119
 2120        %MEND;
 2121
 2122      /*
 2123          Op-code sequence for MULTiply operation.
 2124      */
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        67   
 2125        %MACRO QI$OP_MULT ( STCLASS = "BASED",
 2126                            NAME = QI$OP_MULT );
 2127
 2128          %BEGIN_MACRO ( STCLASS = STCLASS );
 2129
 2130        DCL 1 NAME STCLASS ALIGNED,
 2131              2 CODE UBIN,
 2132              2 NUMERIC_SOURCE@P UBIN,
 2133              2 TARGET_AND_RESULT@P UBIN,
 2134              2 NEXT_CODE@P UBIN;
 2135
 2136          %END_MACRO;
 2137
 2138        %MEND;
 2139
 2140      /*
 2141          Op-code sequence for MULTiplying two arguments together and
 2142          placing the result into the accumulator.
 2143      */
 2144        %MACRO QI$OP_MULTX ( STCLASS = "BASED",
 2145                             NAME = QI$OP_MULTX );
 2146
 2147          %BEGIN_MACRO ( STCLASS = STCLASS );
 2148
 2149        DCL 1 NAME STCLASS ALIGNED,
 2150              2 CODE UBIN,
 2151              2 NUMERIC_SOURCE@P UBIN,
 2152              2 NUMERIC_TARGET@P UBIN,
 2153              2 NEXT_CODE@P UBIN;
 2154
 2155          %END_MACRO;
 2156
 2157        %MEND;
 2158
 2159      /*
 2160          Op-code sequence for OPEN verb.
 2161      */
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        68   
 2162        %MACRO QI$OP_OPEN ( STCLASS = "BASED",
 2163                            NAME = QI$OP_OPEN );
 2164
 2165          %BEGIN_MACRO ( STCLASS = STCLASS );
 2166
 2167        DCL 1 NAME STCLASS ALIGNED,
 2168              2 CODE UBIN,
 2169              2 * BIT(1) UNAL,
 2170              2 IO_FLAGS,
 2171                3 IS_OUTPUT BIT(1) UNAL,
 2172                3 IS_INPUT BIT(1) UNAL,
 2173              2 IO_VALUE REDEF IO_FLAGS UBIN(2) UNAL,
 2174              2 FILE_COUNT UBIN(13) UNAL,
 2175              2 FILE_A@P(0:0) UBIN;
 2176
 2177          %END_MACRO;
 2178
 2179        %MEND;
 2180
 2181      /*
 2182          Op-code sequence for beginning PERFORM transfer of control verb.
 2183      */
 2184        %MACRO QI$OP_PERFM ( STCLASS = "BASED",
 2185                             NAME = QI$OP_PERFM );
 2186
 2187          %BEGIN_MACRO ( STCLASS = STCLASS );
 2188
 2189        DCL 1 NAME STCLASS ALIGNED,
 2190              2 CODE UBIN,
 2191              2 FROM@P UBIN,
 2192              2 PERFORM_BLOCK@D UBIN,
 2193              2 ATTRIBUTE,
 2194                3 PARAGRAPH_SECTION BIT (1) UNAL,
 2195                3 * BIT (11) UNAL,
 2196                3 ITERATION_FIELD UBIN (4) UNAL,
 2197              2 BINARY_ITERATION_COUNT@P UBIN,
 2198              2 SINGLE_ITERATION_NEXT_CODE@P REDEF BINARY_ITERATION_COUNT@P UBIN,
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        69   
 2199              2 MULTIPLE_ITERATION_NEXT_CODE@P UBIN;
 2200
 2201          %END_MACRO;
 2202
 2203        %MEND;
 2204
 2205      /*
 2206          Op-code sequence for ending PERFORM transfer of control verb.
 2207      */
 2208        %MACRO QI$OP_PERFMT ( STCLASS = "BASED",
 2209                              NAME = QI$OP_PERFMT );
 2210
 2211          %BEGIN_MACRO ( STCLASS = STCLASS );
 2212
 2213        DCL 1 NAME STCLASS ALIGNED,
 2214              2 CODE UBIN,
 2215              2 PERFORM_BLOCK@D UBIN,
 2216              2 NEXT_CODE@P UBIN;
 2217
 2218          %END_MACRO;
 2219
 2220        %MEND;
 2221
 2222      /*
 2223          Op-code sequence for READ form-file verb.
 2224      */
 2225        %MACRO QI$OP_READ_FORM ( STCLASS = "BASED",
 2226                                 NAME = QI$OP_READ_FORM );
 2227
 2228          %BEGIN_MACRO ( STCLASS = STCLASS );
 2229
 2230        DCL 1 NAME STCLASS ALIGNED,
 2231              2 CODE UBIN,
 2232              2 FORM_FILE@P UBIN,
 2233              2 IS_POSITIONING_CURSOR BIT(1) UNAL,
 2234              2 * BIT(15) UNAL,
 2235              2 CURSOR_FIELD@P UBIN,
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        70   
 2236              2 NEXT_CODE@P UBIN;
 2237
 2238          %END_MACRO;
 2239
 2240        %MEND;
 2241
 2242      /*
 2243          Op-code sequence for READ transaction-file verb.
 2244      */
 2245        %MACRO QI$OP_READ_TRAN ( STCLASS = "BASED",
 2246                                 NAME = QI$OP_READ_TRAN );
 2247
 2248          %BEGIN_MACRO ( STCLASS = STCLASS );
 2249
 2250        DCL 1 NAME STCLASS ALIGNED,
 2251              2 CODE UBIN,
 2252              2 TRAN_FILE@P UBIN,
 2253              2 * UBIN(15) UNAL,
 2254              2 NO_DATA BIT(1) UNAL,
 2255              2 NEXT_CODE@P UBIN;
 2256
 2257          %END_MACRO;
 2258
 2259        %MEND;
 2260
 2261      /*
 2262          Op-code sequence for the ROUND verb.
 2263      */
 2264        %MACRO QI$OP_ROUND ( STCLASS = "BASED",
 2265                             NAME = QI$OP_ROUND );
 2266
 2267          %BEGIN_MACRO ( STCLASS = STCLASS );
 2268
 2269        DCL 1 NAME STCLASS ALIGNED,
 2270              2 CODE UBIN,
 2271              2 DECIMAL_PLACES UBIN,
 2272              2 NEXT_CODE@P UBIN;
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        71   
 2273
 2274          %END_MACRO;
 2275
 2276        %MEND;
 2277
 2278      /*
 2279          Op-code sequence for STOP [ PAUSING... | POSTING... ] verb.
 2280      */
 2281        %MACRO QI$OP_STOP_PAUSE ( STCLASS = "BASED",
 2282                                  NAME = QI$OP_STOP_PAUSE );
 2283
 2284          %BEGIN_MACRO ( STCLASS = STCLASS );
 2285
 2286        DCL 1 NAME STCLASS ALIGNED,
 2287              2 CODE UBIN,
 2288              2 * UBIN(13) UNAL,
 2289              2 IS_IMPLICIT_POSTING BIT(1) UNAL,
 2290              2 IS_EXPLICIT_POSTING BIT(1) UNAL,
 2291              2 IS_PAUSING BIT(1) UNAL,
 2292              2 PAUSING_OPERAND@P UBIN,
 2293              2 POSTING_OPERAND@P UBIN,
 2294              2 NEXT_CODE@P UBIN;
 2295
 2296          %END_MACRO;
 2297
 2298        %MEND;
 2299
 2300      /*
 2301          Op-code sequence for STOP { RUN } verb.
 2302      */
 2303        %MACRO QI$OP_STOP_RUN ( STCLASS = "BASED",
 2304                                NAME = QI$OP_STOP_RUN );
 2305
 2306          %BEGIN_MACRO ( STCLASS = STCLASS );
 2307
 2308        DCL 1 NAME STCLASS ALIGNED,
 2309              2 CODE UBIN,
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        72   
 2310              2 NEXT_CODE@P UBIN;
 2311
 2312          %END_MACRO;
 2313
 2314        %MEND;
 2315
 2316      /*
 2317          Op-code sequence for SUBtract operation.
 2318      */
 2319        %MACRO QI$OP_SUB ( STCLASS = "BASED",
 2320                           NAME =  QI$OP_SUB );
 2321
 2322          %BEGIN_MACRO ( STCLASS = STCLASS );
 2323
 2324        DCL 1 NAME STCLASS ALIGNED,
 2325              2 CODE UBIN,
 2326              2 NUMERIC_SOURCE@P UBIN,
 2327              2 NUMERIC_TARGET@P UBIN,
 2328              2 NEXT_CODE@P UBIN;
 2329
 2330          %END_MACRO;
 2331
 2332        %MEND;
 2333
 2334      /*
 2335          Op-code sequence for SUBSCRIPTing operations.
 2336      */
 2337        %MACRO QI$OP_SUBSCR ( STCLASS = "BASED",
 2338                              NAME = QI$OP_SUBSCR );
 2339
 2340          %BEGIN_MACRO ( STCLASS = STCLASS );
 2341
 2342        DCL 1 NAME STCLASS ALIGNED,
 2343              2 CODE UBIN,
 2344              2 ARRAY_SOURCE@P UBIN,
 2345              2 SUBSCRIPT_A@P(0:0) UBIN,
 2346                        /* SUBSCRIPT_A@P is one or two entries long
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        73   
 2347                           depending on the dimension_count of
 2348                           ARRAY_SOURCE@P.  */
 2349              2 DUMMY_RESULT@P UBIN,
 2350              2 NEXT_CODE UBIN;
 2351
 2352          %END_MACRO;
 2353
 2354        %MEND;
 2355
 2356      /*
 2357          Op-code sequence for SUBtracting several arguments from one
 2358          argument and placing the result into the accumulator.
 2359      */
 2360        %MACRO QI$OP_SUBX ( STCLASS = "BASED",
 2361                            NAME = QI$OP_SUBX );
 2362
 2363          %BEGIN_MACRO ( STCLASS = STCLASS );
 2364
 2365        DCL 1 NAME STCLASS ALIGNED,
 2366              2 CODE UBIN,
 2367              2 ARGUMENT_COUNT UBIN,
 2368              2 ARGUMENT_A@P(0:0) UBIN;
 2369
 2370          %END_MACRO;
 2371
 2372        %MEND;
 2373
 2374      /*
 2375          Op-code sequence for the PRESENT verb.
 2376      */
 2377        %MACRO QI$OP_VERI_PRES ( STCLASS = "BASED",
 2378                                 NAME = QI$OP_VERI_PRES );
 2379
 2380          %BEGIN_MACRO ( STCLASS = STCLASS );
 2381
 2382        DCL 1 NAME STCLASS ALIGNED,
 2383              2 CODE UBIN,
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        74   
 2384              2 DAD_PAIR_COUNT UBIN,
 2385              2 DAD_PAIR_A(0:0),
 2386                3 SOURCE@P UBIN,
 2387                3 TARGET@P UBIN;
 2388
 2389          %END_MACRO;
 2390
 2391        %MEND;
 2392
 2393      /*
 2394          Op-code sequence for WRITE frame-section-record verb.
 2395      */
 2396        %MACRO QI$OP_WRITE_FORM ( STCLASS = "BASED",
 2397                                  NAME = QI$OP_WRITE_FORM );
 2398
 2399          %BEGIN_MACRO ( STCLASS = STCLASS );
 2400
 2401        DCL 1 NAME STCLASS ALIGNED,
 2402              2 CODE UBIN,
 2403              2 IS_WRITE_PAGE BIT(1) UNAL,
 2404              2 * BIT(15) UNAL,
 2405              2 FORM_RECORD@P UBIN,
 2406              2 NEXT_CODE@P UBIN;
 2407
 2408          %END_MACRO;
 2409
 2410        %MEND;
 2411
 2412      /*
 2413          Op-code sequence for WRITE transaction-record verb.
 2414      */
 2415        %MACRO QI$OP_WRITE_TRAN ( STCLASS = "BASED",
 2416                                  NAME = QI$OP_WRITE_TRAN );
 2417
 2418          %BEGIN_MACRO ( STCLASS = STCLASS );
 2419
 2420        DCL 1 NAME STCLASS ALIGNED,
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        75   
 2421              2 CODE UBIN,
 2422              2 TRAN_RECORD@P UBIN,
 2423              2 DATA_SIZE UBIN,
 2424              2 NEXT_CODE@P UBIN;
 2425
 2426          %END_MACRO;
 2427
 2428        %MEND;
 2429
 2430      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        76   
 2431      /*
 2432                             %%%%%%%  %%%%%%   %%
 2433                             %%       %%   %%  %%
 2434                             %%       %%   %%  %%
 2435                             %%%%%    %%%%%%   %%
 2436                             %%       %%       %%
 2437                             %%       %%       %%
 2438                             %%       %%       %%%%%%%
 2439
 2440                                                 %%%         %%
 2441                                                 %%%         %%
 2442           %% %%%   %% %%%%   %%%%%    %%%%%%     %%     %%% %%  %% %%%%
 2443           %%%  %%  %%%%     %%   %%  %%         %%     %%  %%%  %%%%
 2444           %%%  %%  %%%      %%   %%  %%                %%  %%%  %%%
 2445           %%%  %%  %%       %%   %%  %%                %%  %%%  %%
 2446           %% %%%   %%        %%%%%    %%%%%%            %%% %%  %%
 2447           %%
 2448           %%
 2449                                                                          */
 2450
 2451        %MACRO QI$INITIALIZATION_BLOCK ( STCLASS = "BASED",
 2452                                         NAME = QI$INITIALIZATION_BLOCK );
 2453
 2454          %BEGIN_MACRO ( STCLASS = STCLASS );
 2455
 2456      /*
 2457         This INITIALIZATION_BLOCK is used by QAT$TALLYHO
 2458         during startup to, well, initialize.
 2459      */
 2460        DCL 1 NAME STCLASS ALIGNED,
 2461              2 DATA_START$ PTR,
 2462              2 PROC_START$ PTR,
 2463              2 EXPECTED_ARGUMENT_COUNT UBIN,
 2464              2 CURRENT_FORM@P UBIN,
 2465              2 CURRENT_FRAME@P UBIN,
 2466              2 CURRENT_FIELD@P UBIN,
 2467              2 RETRY@P UBIN,
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        77   
 2468              2 VERIFY_BUFFER_1@P UBIN,
 2469              2 VERIFY_BUFFER_2@P UBIN,
 2470              2 VERIFY_BUFFER_3@P UBIN,
 2471              2 VERIFY_BUFFER_4@P UBIN,
 2472              2 COMPILER_VERSION CHAR(4),
 2473              2 OUTPUT_OR_IO_USE_PROCEDURE@P UBIN,
 2474              2 INPUT_OR_IO_USE_PROCEDURE@P UBIN,
 2475              2 VERIFICATION_USE_PROCEDURE@P UBIN,
 2476              2 MESSAGE_LINE_DCB# UBIN,
 2477              2 VANILLA_HOST_DCB# UBIN,
 2478              2 IS_THIS_A_SUBROUTINE BIT(1) UNAL,
 2479              2 * UBIN(15) UNAL;
 2480
 2481          %END_MACRO;
 2482
 2483        %MEND;
 2484
 2485      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        78   
 2486
 2487        %MACRO QI$CONDITION_CONTROL_BLOCK ( STCLASS = "BASED",
 2488                                        NAME = QI$CONDITION_CONTROL_BLOCK );
 2489
 2490          %BEGIN_MACRO ( STCLASS = STCLASS );
 2491
 2492      /*
 2493         CONDITION CONTROL BLOCK used to refer to target data on conditional
 2494         IFs (i.e. IFCNDA, and IFCNDN).
 2495      */
 2496        DCL 1 NAME STCLASS ALIGNED,
 2497              2 WORD0_FLAGS,
 2498                3 IS_THROUGH BIT(1) UNAL,
 2499                3 * UBIN(15) UNAL,
 2500              2 LIST_LENGTH REDEF WORD0_FLAGS UBIN,
 2501              2 LIST_A@P(0:0) UBIN,
 2502              2 RANGE_A@P(0:0) REDEF LIST_A@P UBIN;
 2503
 2504          %END_MACRO;
 2505
 2506        %MEND;
 2507
 2508      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        79   
 2509
 2510        %MACRO QI$CONDITION_LEGAL_BLOCK ( STCLASS = "BASED",
 2511                                          NAME = QI$CONDITION_LEGAL_BLOCK );
 2512
 2513          %BEGIN_MACRO ( STCLASS = STCLASS );
 2514
 2515      /*
 2516         CONDITION BLOCK used for holding information about the LEGAL
 2517         list/range/array for a COBOL-like data item.
 2518      */
 2519        DCL 1 NAME STCLASS ALIGNED,
 2520              2 TYPE UBIN(2) UNAL,
 2521              2 LIST_LENGTH UBIN(14) UNAL,
 2522              2 ARRAY@P UBIN,
 2523              2 LIST_A@P(0:0) REDEF ARRAY@P UBIN,
 2524              2 RANGE_A@P(0:0) REDEF ARRAY@P UBIN;
 2525
 2526          %END_MACRO;
 2527
 2528        %MEND;
 2529
 2530      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        80   
 2531
 2532      /*
 2533               Compiler-generated pseudo-CIP descriptor.
 2534      */
 2535        %MACRO QI$PSEUDO_CIP
 2536               ( NAME = QI$PSEUDO_CIP,
 2537                 STCLASS = "BASED",
 2538                 LVL = 1,
 2539                 END_STRUCTURE ( YES = ";",
 2540                                 NO = ",",
 2541                                 ANY ) = ";" );
 2542
 2543          %BEGIN_MACRO ( STCLASS = STCLASS );
 2544
 2545          %IF LVL = 1;
 2546        DCL 1 NAME STCLASS ALIGNED,        /* CIP descriptor */
 2547          %ELSE;
 2548            %(LVL) NAME ALIGNED,           /* CIP descriptor */
 2549          %ENDIF;
 2550
 2551              %(LVL+1) ALPHANUMERIC,
 2552                %(LVL+2) CA,                  /* Control bits for ALPHANUMERIC */
 2553                  %(LVL+3) OFFSET UBIN(1) UNAL,
 2554                %(LVL+2) * UBIN(1) UNAL,
 2555                %(LVL+2) LEN UBIN(14) UNAL,
 2556              %(LVL+1) NUMERIC REDEF ALPHANUMERIC,
 2557                %(LVL+2) CB,                  /* Control bits for BINARY */
 2558                  %(LVL+3) OFFSET UBIN(1) UNAL,
 2559                  %(LVL+3) MBZ UBIN(2) UNAL,
 2560                %(LVL+2) CD REDEF CB,         /* Control bits for DISPLAY */
 2561                  %(LVL+3) OFFSET UBIN(1) UNAL,
 2562                  %(LVL+3) SIGN UBIN(2) UNAL,
 2563                %(LVL+2) CP REDEF CB,         /* Control bits for PACKED */
 2564                  %(LVL+3) OFFSET UBIN(2) UNAL,
 2565                  %(LVL+3) SIGN UBIN(1) UNAL,
 2566                %(LVL+2) LEN UBIN(5) UNAL,
 2567                %(LVL+2) * UBIN(2) UNAL,
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        81   
 2568                %(LVL+2) DEC SBIN(6) UNAL,
 2569          %IF LVL = 1;
 2570              %(LVL+1) DATA@ UBIN;
 2571        DCL 1 %CHARTEXT(CONCAT(TEXTCHAR(NAME),'_A')) (0:1) REDEF NAME UBIN;
 2572          %ELSE;
 2573              %(LVL+1) DATA@ UBIN,
 2574            %(LVL) %CHARTEXT(CONCAT(TEXTCHAR(NAME),'_A')) (0:1) REDEF NAME UBIN END_STRUCTURE
 2575          %ENDIF;
 2576
 2577          %END_MACRO;
 2578
 2579        %MEND;
 2580
 2581      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        82   
 2582
 2583      /*
 2584               Real live CIP descriptor.
 2585      */
 2586        %MACRO QI$CIP ( STCLASS = "BASED",
 2587                        NAME = QI$CIP );
 2588
 2589          %BEGIN_MACRO ( STCLASS = STCLASS );
 2590
 2591          %QI_CIP_DESCRIPTOR ( NAME = NAME,
 2592                               STCLASS = STCLASS );
 2593
 2594          %END_MACRO;
 2595
 2596        %MEND;
 2597
 2598      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        83   
 2599
 2600      /*
 2601               Basic DAD
 2602      */
 2603        %MACRO QI$DAD
 2604               ( NAME = QI$DAD,
 2605                 STCLASS = "BASED",
 2606                 LVL = 1,
 2607                 END_STRUCTURE ( YES = ";",
 2608                                 NO = ",",
 2609                                 ANY ) = ";" );
 2610
 2611          %BEGIN_MACRO ( STCLASS = STCLASS );
 2612
 2613          %IF LVL = 1;
 2614        DCL 1 NAME STCLASS ALIGNED,
 2615          %ELSE;
 2616            %(LVL) NAME ALIGNED,
 2617          %ENDIF;
 2618              %(LVL+1) WORD0 SBIN,
 2619              %(LVL+1) WORD0_FLAGS REDEF WORD0,
 2620                %(LVL+2) INDIRECT BIT(1) UNAL,          /* on for indirect reference */
 2621                %(LVL+2) * UBIN(4) UNAL,
 2622                %(LVL+2) IS_JUSTIFIED_RIGHT BIT(1) UNAL,
 2623                %(LVL+2) * UBIN(2) UNAL,
 2624                %(LVL+2) IS_FORM_VARIABLE BIT(1) UNAL,  /* on for FORM variable */
 2625                %(LVL+2) IS_CONSTANT BIT(1) UNAL,       /* on if CONSTANT */
 2626                %(LVL+2) DIMENSION_COUNT UBIN(2) UNAL,  /* # of dimensions */
 2627                %(LVL+2) TYPE UBIN(4) UNAL,             /* variable TYPE */
 2628
 2629          %LSET NEXT_LEVEL = LVL + 1;
 2630
 2631              %QI$PSEUDO_CIP ( NAME = PSEUDO_CIP,
 2632                               LVL = %NEXT_LEVEL,
 2633                               END_STRUCTURE = END_STRUCTURE );
 2634
 2635          %END_MACRO;
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        84   
 2636
 2637        %MEND;
 2638
 2639      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        85   
 2640
 2641        %MACRO QI$COBOL_DAD ( STCLASS = "BASED",
 2642                              NAME = QI$COBOL_DAD );
 2643
 2644          %BEGIN_MACRO ( STCLASS = STCLASS );
 2645
 2646        DCL 1 NAME STCLASS ALIGNED,
 2647              2 WORD0 SBIN,
 2648              2 WORD0_FLAGS REDEF WORD0,
 2649                3 INDIRECT BIT(1) UNAL,
 2650                3 P,
 2651                  4 PICTURE BIT(1) UNAL,
 2652                  4 VALID BIT(1) UNAL,
 2653                  4 ERROR_MESSAGE BIT(1) UNAL,
 2654                3 IS_LINKAGE_ARGUMENT BIT(1) UNAL,/* on if in LINKAGE SECTION */
 2655                3 IS_JUSTIFIED_RIGHT BIT(1) UNAL,/* on if JUSTIFIED RIGHT */
 2656                3 IS_TEMP BIT(1) UNAL,           /* on if this is a temp */
 2657                3 IS_ALL_LIT BIT(1) UNAL,        /* on if this is an ALL "literal" */
 2658                3 IS_FORM_VARIABLE BIT(1) UNAL,  /* on if a FORM variable */
 2659                3 IS_CONSTANT BIT(1) UNAL,       /* on if CONSTANT */
 2660                3 DIMENSION_COUNT UBIN(2) UNAL,  /* # of dimensions */
 2661                3 TYPE UBIN(4) UNAL,
 2662              2 P_A(0:15) REDEF WORD0 BIT(1) UNAL,
 2663              %QI$PSEUDO_CIP ( NAME = PSEUDO_CIP,
 2664                               LVL = 2,
 2665                               END_STRUCTURE = NO );
 2666              2 VARIABLE_LENGTH_ITEMS,
 2667                3 LEVEL_MULTIPLIERS,
 2668                  4 ONE_DIMENSIONAL,
 2669                    5 ELEMENT_COUNT UBIN,
 2670                    5 ELEMENT_LENGTH UBIN,
 2671                  4 TWO_DIMENSIONAL,
 2672                    5 ELEMENT_COUNT UBIN,
 2673                    5 ELEMENT_LENGTH UBIN,
 2674                  4 THREE_DIMENSIONAL,
 2675                    5 ELEMENT_COUNT UBIN,
 2676                    5 ELEMENT_LENGTH UBIN,
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        86   
 2677                3 LEVEL_MULTIPLIER_A(0:%(QI#MAXIMUM_DIMENSION-1)) REDEF LEVEL_MULTIPLIERS,
 2678                  4 ELEMENT_COUNT UBIN,
 2679                  4 ELEMENT_LENGTH UBIN,
 2680                3 P_ITEM_A(0:%((2*QI#MAXIMUM_DIMENSION)-1)) REDEF LEVEL_MULTIPLIERS UBIN,
 2681                3 *(0:%(QI#P_COBOL_LAST_INDEX-QI#P_COBOL_FIRST_INDEX)) UBIN,
 2682              2 ELEMENTARY_ITEM REDEF VARIABLE_LENGTH_ITEMS,
 2683                3 P_ITEM_A(0:%(QI#P_COBOL_LAST_INDEX-QI#P_COBOL_FIRST_INDEX)) UBIN,
 2684                3 * UBIN,
 2685                3 * UBIN,
 2686                3 * UBIN,
 2687                3 * UBIN,
 2688                3 * UBIN,
 2689                3 * UBIN,
 2690              2 ONE_DIMENSIONAL_ITEM REDEF VARIABLE_LENGTH_ITEMS,
 2691                3 * UBIN,
 2692                3 * UBIN,
 2693                3 P_ITEM_A(0:%(QI#P_COBOL_LAST_INDEX-QI#P_COBOL_FIRST_INDEX)) UBIN,
 2694                3 * UBIN,
 2695                3 * UBIN,
 2696                3 * UBIN,
 2697                3 * UBIN,
 2698              2 TWO_DIMENSIONAL_ITEM REDEF VARIABLE_LENGTH_ITEMS,
 2699                3 * UBIN,
 2700                3 * UBIN,
 2701                3 * UBIN,
 2702                3 * UBIN,
 2703                3 P_ITEM_A(0:%(QI#P_COBOL_LAST_INDEX-QI#P_COBOL_FIRST_INDEX)) UBIN,
 2704                3 * UBIN,
 2705                3 * UBIN;
 2706
 2707          %END_MACRO;
 2708
 2709        %MEND;
 2710
 2711      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        87   
 2712
 2713        %MACRO QI$COBOL_DAD_P_BITS ( STCLASS = "BASED",
 2714                                     NAME = QI$COBOL_DAD_P_BITS );
 2715
 2716          %BEGIN_MACRO ( STCLASS = STCLASS );
 2717
 2718      /*
 2719               Presence bits for COBOL-type DADs.
 2720      */
 2721        DCL 1 NAME STCLASS ALIGNED,
 2722              2 P,
 2723                3 * BIT(1) UNAL,
 2724                3 PICTURE BIT(1) UNAL,
 2725                3 VALID BIT(1) UNAL,
 2726                3 ERROR_MESSAGE BIT(1) UNAL,
 2727                3 USE_PROCEDURE BIT(1) UNAL,
 2728              2 P_A(0:4) REDEF P BIT(1) UNAL;
 2729
 2730          %END_MACRO;
 2731
 2732        %MEND;
 2733
 2734      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        88   
 2735
 2736        %MACRO QI$COBOL_DAD_P_ITEMS ( STCLASS = "BASED",
 2737                                      NAME = QI$COBOL_DAD_P_ITEMS );
 2738
 2739          %BEGIN_MACRO ( STCLASS = STCLASS );
 2740
 2741      /*
 2742               Presence item array for COBOL-type DADs.
 2743      */
 2744        DCL 1 NAME STCLASS ALIGNED,
 2745              2 P_ITEM_A(0:%(QI#P_COBOL_LAST_INDEX-QI#P_COBOL_FIRST_INDEX)) UBIN;
 2746
 2747          %END_MACRO;
 2748
 2749        %MEND;
 2750
 2751      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        89   
 2752
 2753        %MACRO QI$LINKAGE_ARGUMENT_DESCRIPTOR ( STCLASS = "BASED",
 2754                                                NAME = QI$LINKAGE_ARGUMENT_DESCRIPTOR );
 2755
 2756          %BEGIN_MACRO ( STCLASS = STCLASS );
 2757
 2758        DCL 1 NAME STCLASS ALIGNED,
 2759              2 ARGUMENT_NUMBER UBIN,
 2760                        /* argument "number" from
 2761                           PROCEDURE DIVISION USING P1, P2, P3,....
 2762                           E.g., 0 for P1, 1 for P2, 2 for P3,.... */
 2763              2 WORD_OFFSET_FROM_01_ITEM UBIN;
 2764                        /* word offset from the nearest 01-level item
 2765                           above to the current item. */
 2766
 2767          %END_MACRO;
 2768
 2769        %MEND;
 2770
 2771      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        90   
 2772
 2773        %MACRO QI$FIELD_DAD ( STCLASS = "BASED",
 2774                              NAME = QI$FIELD_DAD );
 2775
 2776          %BEGIN_MACRO ( STCLASS = STCLASS );
 2777
 2778        DCL 1 NAME STCLASS ALIGNED,
 2779              2 WORD0 SBIN,
 2780              2 WORD0_FLAGS REDEF WORD0,
 2781                3 INDIRECT BIT(1) UNAL,
 2782                                         /* on if an indirect reference */
 2783                3 IO_FLAGS,
 2784                  4 IS_OUTPUT BIT(1) UNAL,
 2785                                         /* on if this FIELD is OUTPUT or I-O */
 2786                  4 IS_INPUT BIT(1) UNAL,
 2787                                         /* on if this FIELD is INPUT or I-O */
 2788                3 IO_VALUE REDEF IO_FLAGS UBIN(2) UNAL,
 2789                                         /* all 1's if this field is I-O */
 2790                3 IS_ENTRY_REQUIRED BIT(1) UNAL,
 2791                                         /* on if INPUT-REQUIRED */
 2792                3 IS_OUTPUT_CONSTANT BIT(1) UNAL,
 2793                                         /* on if CONSTANT OUTPUT */
 2794                3 IS_JUSTIFIED_RIGHT BIT(1) UNAL,
 2795                                         /* on if right justification is in effect */
 2796                3 IS_AOIM BIT(1) UNAL,
 2797                                         /* on if A-O-I-M */
 2798                3 * BIT(1) UNAL,
 2799                3 IS_FORM_VARIABLE BIT(1) UNAL,
 2800                                         /* on if a FORM var */
 2801                3 IS_CONSTANT BIT(1) UNAL,
 2802                                         /* on if CONSTANT */
 2803                3 DIMENSION_COUNT UBIN(2) UNAL,
 2804                                         /* # of dimensions */
 2805                3 TYPE UBIN(4) UNAL,
 2806                                         /* TYPE of variable */
 2807              %QI$PSEUDO_CIP ( NAME = PSEUDO_CIP,
 2808                               LVL = 2,
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        91   
 2809                               END_STRUCTURE = NO );
 2810              2 PICTURE_STRING@P UBIN,
 2811                                         /* ADDR (PROC) disp to PICTURE string */
 2812              2 BROTHER@P UBIN,
 2813                                         /* ADDR disp to DAD of brother/sister */
 2814              2 FATHER@P UBIN,
 2815                                         /* ADDR disp to DAD of father */
 2816              2 STATUS_AREA@D UBIN,
 2817                                         /* ADDR (DATA) disp to scratch area */
 2818              2 IDENTIFIER@P UBIN,
 2819                                         /* ADDR (PROC) disp to identifier */
 2820              2 POSITION,
 2821                3 LINE UBIN,
 2822                                         /* LINE integer or ADDR disp to
 2823                                            DAD of LINE variable         */
 2824                3 COLUMN UBIN,
 2825                                         /* COLUMN integer or ADDR disp to
 2826                                            DAD of COLUMN variable         */
 2827              2 * UBIN BYTE UNAL,
 2828              2 VISUAL_ATTRIBUTE UBIN BYTE UNAL,
 2829                                         /* VISUAL-ATTRIBUTE code byte */
 2830              2 VARIABLE_LENGTH_ITEMS,
 2831                3 LEVEL_MULTIPLIERS,
 2832                  4 ONE_DIMENSIONAL,
 2833                    5 ELEMENT_COUNT UBIN,
 2834                    5 ELEMENT_LENGTH UBIN,
 2835                  4 TWO_DIMENSIONAL,
 2836                    5 ELEMENT_COUNT UBIN,
 2837                    5 ELEMENT_LENGTH UBIN,
 2838                  4 THREE_DIMENSIONAL,
 2839                    5 ELEMENT_COUNT UBIN,
 2840                    5 ELEMENT_LENGTH UBIN,
 2841                3 LEVEL_MULTIPLIER_A(0:%(QI#MAXIMUM_DIMENSION-1)) REDEF LEVEL_MULTIPLIERS,
 2842                  4 ELEMENT_COUNT UBIN,
 2843                  4 ELEMENT_LENGTH UBIN,
 2844                3 P_ITEM_A(0:%((2*QI#MAXIMUM_DIMENSION)-1)) REDEF LEVEL_MULTIPLIERS UBIN,
 2845                3 *(0:%(QI#P_FIELD_LAST_INDEX-QI#P_FIELD_FIRST_INDEX+1)) UBIN,
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        92   
 2846              2 ELEMENTARY_ITEM REDEF VARIABLE_LENGTH_ITEMS,
 2847                3 P,
 2848                  4 FILL_CHARACTER_MINIMUM_SIZE BIT(1) UNAL,
 2849                  4 CLASS_ALPHABET BIT(1) UNAL,
 2850                  4 DEFAULT BIT(1) UNAL,
 2851                  4 PROMPT BIT(1) UNAL,
 2852                  4 REPEATS BIT(1) UNAL,
 2853                  4 SEPARATED BIT(1) UNAL,
 2854                3 P_A(0:5) REDEF P BIT(1) UNAL,
 2855                3 * UBIN(7) UNAL,
 2856                3 CLASS_TYPE UBIN(3) UNAL,
 2857                3 P_ITEM_A(0:%(QI#P_FIELD_LAST_INDEX-QI#P_FIELD_FIRST_INDEX)) UBIN,
 2858                3 * UBIN,
 2859                3 * UBIN,
 2860                3 * UBIN,
 2861                3 * UBIN,
 2862                3 * UBIN,
 2863                3 * UBIN,
 2864              2 ONE_DIMENSIONAL_ITEM REDEF VARIABLE_LENGTH_ITEMS,
 2865                3 * UBIN,
 2866                3 * UBIN,
 2867                3 P,
 2868                  4 FILL_CHARACTER_MINIMUM_SIZE BIT(1) UNAL,
 2869                  4 CLASS_ALPHABET BIT(1) UNAL,
 2870                  4 DEFAULT BIT(1) UNAL,
 2871                  4 PROMPT BIT(1) UNAL,
 2872                  4 REPEATS BIT(1) UNAL,
 2873                  4 SEPARATED BIT(1) UNAL,
 2874                3 P_A(0:5) REDEF P BIT(1) UNAL,
 2875                3 * UBIN(7) UNAL,
 2876                3 CLASS_TYPE UBIN(3) UNAL,
 2877                3 P_ITEM_A(0:%(QI#P_FIELD_LAST_INDEX-QI#P_FIELD_FIRST_INDEX)) UBIN,
 2878                3 * UBIN,
 2879                3 * UBIN,
 2880                3 * UBIN,
 2881                3 * UBIN,
 2882              2 TWO_DIMENSIONAL_ITEM REDEF VARIABLE_LENGTH_ITEMS,
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        93   
 2883                3 * UBIN,
 2884                3 * UBIN,
 2885                3 * UBIN,
 2886                3 * UBIN,
 2887                3 P,
 2888                  4 FILL_CHARACTER_MINIMUM_SIZE BIT(1) UNAL,
 2889                  4 CLASS_ALPHABET BIT(1) UNAL,
 2890                  4 DEFAULT BIT(1) UNAL,
 2891                  4 PROMPT BIT(1) UNAL,
 2892                  4 REPEATS BIT(1) UNAL,
 2893                  4 SEPARATED BIT(1) UNAL,
 2894                3 P_A(0:5) REDEF P BIT(1) UNAL,
 2895                3 * UBIN(7) UNAL,
 2896                3 CLASS_TYPE UBIN(3) UNAL,
 2897                3 P_ITEM_A(0:%(QI#P_FIELD_LAST_INDEX-QI#P_FIELD_FIRST_INDEX)) UBIN,
 2898                3 * UBIN,
 2899                3 * UBIN;
 2900
 2901          %END_MACRO;
 2902
 2903        %MEND;
 2904
 2905      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        94   
 2906
 2907        %MACRO QI$FIELD_DAD_P ( STCLASS = "BASED",
 2908                                NAME = QI$FIELD_DAD_P );
 2909
 2910          %BEGIN_MACRO ( STCLASS = STCLASS );
 2911
 2912      /*
 2913          Presence bits for FIELD-type DADs.
 2914      */
 2915        DCL 1 NAME STCLASS ALIGNED,
 2916              2 P,
 2917                3 FILL_CHARACTER_MINIMUM_SIZE BIT(1) UNAL,
 2918                3 CLASS_ALPHABET BIT(1) UNAL,
 2919                3 DEFAULT BIT(1) UNAL,
 2920                3 PROMPT BIT(1) UNAL,
 2921                3 REPEATS BIT(1) UNAL,
 2922                3 SEPARATED BIT(1) UNAL,
 2923              2 P_A(0:5) REDEF P BIT(1) UNAL,
 2924              2 * UBIN(7) UNAL,
 2925              2 CLASS_TYPE UBIN(3) UNAL,
 2926              2 P_ITEM_A(0:%(QI#P_FIELD_LAST_INDEX-QI#P_FIELD_FIRST_INDEX)) UBIN;
 2927
 2928          %END_MACRO;
 2929
 2930        %MEND;
 2931
 2932      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        95   
 2933
 2934        %MACRO QI$MAJOR_NODE ( STCLASS = "BASED",
 2935                               NAME = QI$MAJOR_NODE );
 2936
 2937          %BEGIN_MACRO ( STCLASS = STCLASS );
 2938
 2939        DCL 1 NAME STCLASS ALIGNED,
 2940              2 WORD0 SBIN,
 2941              2 WORD0_FLAGS REDEF WORD0,
 2942                3 INDIRECT BIT(1) UNAL,
 2943                3 IS_ANY_DESCENDANT_OUTPUT BIT(1) UNAL,
 2944                3 IS_ANY_DESCENDANT_INPUT BIT(1) UNAL,
 2945                3 * UBIN(5) UNAL,
 2946                3 IS_FORM_VARIABLE BIT(1) UNAL,
 2947                3 IS_CONSTANT BIT(1) UNAL,
 2948                3 * UBIN(2) UNAL,
 2949                3 TYPE UBIN(4) UNAL,
 2950              2 * UBIN,
 2951              2 * UBIN,
 2952              2 SON@P UBIN,
 2953              2 BROTHER@P UBIN,
 2954              2 FATHER@P UBIN,
 2955                        /* chauvanists. */
 2956              2 STATUS_AREA@D UBIN,
 2957              2 IDENTIFIER@P UBIN;
 2958
 2959          %END_MACRO;
 2960
 2961        %MEND;
 2962
 2963      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        96   
 2964
 2965        %MACRO QI$MINOR_NODE ( STCLASS = "BASED",
 2966                               NAME = QI$MINOR_NODE );
 2967
 2968          %BEGIN_MACRO ( STCLASS = STCLASS );
 2969
 2970        DCL 1 NAME STCLASS ALIGNED,
 2971              2 WORD0 SBIN,
 2972              2 WORD0_FLAGS REDEF WORD0,
 2973                3 INDIRECT BIT(1) UNAL,
 2974                3 IS_ANY_DESCENDANT_OUTPUT BIT(1) UNAL,
 2975                3 IS_ANY_DESCENDANT_INPUT BIT(1) UNAL,
 2976                3 * UBIN(5) UNAL,
 2977                3 IS_FORM_VARIABLE BIT(1) UNAL,
 2978                3 IS_CONSTANT BIT(1) UNAL,
 2979                3 * UBIN(2) UNAL,
 2980                3 TYPE UBIN(4) UNAL,
 2981              2 REPEATS UBIN,
 2982              2 SEPARATED UBIN,
 2983              2 SON@P UBIN,
 2984              2 BROTHER@P UBIN,
 2985              2 FATHER@P UBIN,
 2986                        /* chauvanists. */
 2987              2 STATUS_AREA@D UBIN,
 2988              2 IDENTIFIER@P UBIN;
 2989
 2990          %END_MACRO;
 2991
 2992        %MEND;
 2993
 2994      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        97   
 2995
 2996        %MACRO QI$FILE ( STCLASS = "BASED",
 2997                         NAME = QI$FILE );
 2998
 2999          %BEGIN_MACRO ( STCLASS = STCLASS );
 3000
 3001        DCL 1 NAME STCLASS ALIGNED,
 3002              2 WORD0 SBIN,
 3003              2 WORD0_FLAGS REDEF WORD0,
 3004                3 INDIRECT BIT(1) UNAL,
 3005                        /* If indirect, this is a pointer to the real DAD,
 3006                           which lives in user data. */
 3007                3 IS_ERROR_STATUS_VALID BIT(1) UNAL,
 3008                        /* If error_status_valid, there is a DAD pointer
 3009                           to an ERROR STATUS variable below. */
 3010                3 * UBIN(10) UNAL,
 3011                3 TYPE UBIN(4) UNAL,
 3012                        /* Type of file:  transaction or form. */
 3013              2 * UBIN,
 3014              2 * UBIN,
 3015              2 ERROR_STATUS@D UBIN,
 3016                        /* Offset (in data) of the 8-word space reserved
 3017                           for the ERROR STATUS variable. */
 3018              2 * UBIN,
 3019              2 * UBIN,
 3020              2 STATUS_AREA@D UBIN,
 3021                        /* Offset (in data) of the QI$FILE_STATUS
 3022                           status area for this file FD. */
 3023              2 IDENTIFIER@P UBIN,
 3024                        /* Offset (in procedure) of the ATEXTC
 3025                           of the file name. */
 3026              2 DCB# UBIN,
 3027                        /* SYMREFed DCBNUM for this file. */
 3028              2 USE_PROCEDURE@P UBIN,
 3029                        /* Offset (in procedure) of the USE procedure. */
 3030              2 * UBIN;
 3031
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        98   
 3032          %END_MACRO;
 3033
 3034        %MEND;
 3035
 3036      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        99   
 3037
 3038        %MACRO QI$FORM_FILE ( STCLASS = "BASED",
 3039                              NAME = QI$FORM_FILE );
 3040
 3041          %BEGIN_MACRO ( STCLASS = STCLASS );
 3042
 3043        DCL 1 NAME STCLASS ALIGNED,
 3044              2 WORD0 SBIN,
 3045              2 WORD0_FLAGS REDEF WORD0,
 3046                3 INDIRECT BIT(1) UNAL,
 3047                        /* If indirect, this is a pointer to the read DAD,
 3048                           which lives in user data. */
 3049                3 IS_ERROR_STATUS_VALID BIT(1) UNAL,
 3050                        /* If error_status_valid, there is a DAD pointer
 3051                           to an ERROR STATUS variable below. */
 3052                3 IS_MESSAGE_LINE_VALID BIT(1) UNAL,
 3053                        /* if message_line_valid, there is a DAD pointer
 3054                           to a MESSAGE LINE variable below. */
 3055                3 IS_ACTIVATION_STATUS_VALID BIT(1) UNAL,
 3056                        /* if activation_status_valid, there is a DAD pointer
 3057                           to an ACTIVATION STATUS variable below. */
 3058                3 * UBIN(4) UNAL,
 3059                3 IS_FORM_VARIABLE BIT(1) UNAL,
 3060                        /* if form_variable, then this thing was defined
 3061                           within the FRAME SECTION. */
 3062                3 IS_CONSTANT BIT(1) UNAL,
 3063                        /* If constant, this item is located in user
 3064                           procedure. */
 3065                3 * UBIN(2) UNAL,
 3066                3 TYPE UBIN(4) UNAL,
 3067                        /* For form DADs, type is
 3068                           always 11 ('B'X). */
 3069              2 FRAME_COUNT UBIN,
 3070                        /* Number of elements in FRAME_LIST_A below. */
 3071              2 ACTIVATION_STATUS@P UBIN,
 3072                        /* Offset (in procedure) of the user-supplied
 3073                           ACTIVATION STATUS variable. */
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        100  
 3074              2 ERROR_STATUS@D UBIN,
 3075                        /* Offset (in data) of the 8-word space reserved
 3076                           for the ERROR STATUS variable. */
 3077              2 MESSAGE_LINE UBIN,
 3078                        /* Integer value of the ERROR MESSAGE
 3079                           line number. */
 3080              2 RETRY_COUNT UBIN,
 3081                        /* Integer value of the retry count. */
 3082              2 STATUS_AREA@D UBIN,
 3083                        /* Offset (in data) of the QI$FORM_STATUS
 3084                           status area for this form FD. */
 3085              2 IDENTIFIER@P UBIN,
 3086                        /* Offset (in procedure) of the ATEXTC
 3087                           of the file name. */
 3088              2 DCB# UBIN,
 3089                        /* SYMREFed DCBNUM for this FORM_FILE. */
 3090              2 USE_PROCEDURE,
 3091                3 STANDARD,
 3092                  4 WHERE@P UBIN,
 3093                        /* Offset (in procedure) of the USE procedure. */
 3094                3 VERIFY,
 3095                  4 WHERE@P UBIN,
 3096                        /* Offset (in procedure) of the USE procedure. */
 3097              2 USE_PROCEDURE_A@P(0:1) REDEF USE_PROCEDURE UBIN,
 3098              2 FRAME_LIST_A@P(0:0) UBIN;
 3099                        /* List of offsets of FRAMES specified in the
 3100                           FRAMES ARE clause. */
 3101
 3102          %END_MACRO;
 3103
 3104        %MEND;
 3105
 3106      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        101  
 3107
 3108        %MACRO QI$TRAN_FILE ( STCLASS = "BASED",
 3109                              NAME = QI$TRAN_FILE );
 3110
 3111          %BEGIN_MACRO ( STCLASS = STCLASS );
 3112
 3113        DCL 1 NAME STCLASS ALIGNED,
 3114              2 WORD0 SBIN,
 3115              2 WORD0_FLAGS REDEF WORD0,
 3116                3 INDIRECT BIT(1) UNAL,
 3117                        /* If indirect, this is a pointer to the read DAD,
 3118                           which lives in user data. */
 3119                3 IS_ERROR_STATUS_VALID BIT(1) UNAL,
 3120                        /* If error_status_valid, there is a DAD pointer
 3121                           to an ERROR STATUS variable below. */
 3122                3 IS_RELATIVE_KEY_VALID BIT(1) UNAL,
 3123                        /* If relative_key_valid, there is a DAD pointer
 3124                           to a RELATIVE KEY variable below. */
 3125                3 IS_ID_VALID BIT(1) UNAL,
 3126                        /* If id_valid, there is a DAD pointer to an
 3127                           ID variable below. */
 3128                3 * UBIN(3) UNAL,
 3129                3 INPUT_CLASS BIT(1) UNAL,
 3130                        /* Input_class is:  0 for response
 3131                                            1 for report. */
 3132                3 ACCESS UBIN(2) UNAL,
 3133                        /* Access is:  0 for sequential
 3134                                       1 for dynamic
 3135                                       2 for random.
 3136                                       (Not currently used.) */
 3137                3 * UBIN(2) UNAL,
 3138                3 TYPE UBIN(4) UNAL,
 3139                        /* For transaction DADs, file_type is
 3140                           always 12 ('C'X). */
 3141              2 MAX_RECORD_SIZE UBIN,
 3142                        /* Size of the largest record in this FD (bytes). */
 3143              2 BUFFER@D UBIN,
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        102  
 3144                        /* Offset (in data) of the buffer to be written. */
 3145              2 ERROR_STATUS@D UBIN,
 3146                        /* Offset (in data) of the 8-word space reserved
 3147                           for the ERROR STATUS variable. */
 3148              2 RELATIVE_KEY@ UBIN,
 3149                        /* Offset of the DAD describing the
 3150                           RELATIVE KEY variable.  (Unimplemented).  */
 3151              2 ID@P UBIN,
 3152                        /* Offset of the DAD describing the
 3153                           ID variable. */
 3154              2 STATUS_AREA@D UBIN,
 3155                        /* Offset (in data) of the QI$TRAN_STATUS
 3156                           status area for this transaction FD. */
 3157              2 IDENTIFIER@P UBIN,
 3158                        /* Offset (in procedure) of the ATEXTC
 3159                           of the file name. */
 3160              2 DCB# UBIN,
 3161                        /* SYMREFed DCBNUM for this TRAN_FILE. */
 3162              2 USE_PROCEDURE@P UBIN,
 3163                        /* Offset (in procedure) of the USE procedure. */
 3164              2 * UBIN,
 3165              2 TYPE@P UBIN;
 3166                        /* Offset of the DAD describing the
 3167                           TYPE variable. */
 3168
 3169          %END_MACRO;
 3170
 3171        %MEND;
 3172
 3173      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        103  
 3174
 3175        %MACRO QI$FRAME ( STCLASS = "BASED",
 3176                          NAME = QI$FRAME );
 3177
 3178          %BEGIN_MACRO ( STCLASS = STCLASS );
 3179
 3180        DCL 1 NAME STCLASS ALIGNED,
 3181              2 WORD0 SBIN,
 3182              2 WORD0_FLAGS REDEF WORD0,
 3183                3 INDIRECT BIT(1) UNAL,
 3184                3 * UBIN(5) UNAL,
 3185                3 IS_LINE_ORIGIN_VARIABLE BIT(1) UNAL,
 3186                3 IS_COLUMN_ORIGIN_VARIABLE BIT(1) UNAL,
 3187                3 IS_FORM_VARIABLE BIT(1) UNAL,
 3188                3 IS_CONSTANT BIT(1) UNAL,
 3189                3 * UBIN(2) UNAL,
 3190                3 TYPE UBIN(4) UNAL,
 3191              2 LINE_ORIGIN UBIN,
 3192              2 COLUMN_ORIGIN UBIN,
 3193              2 SON@P UBIN,
 3194              2 BROTHER@P UBIN,
 3195              2 FATHER@P UBIN,
 3196                        /* chauvanists. */
 3197              2 STATUS_AREA@D UBIN,
 3198              2 IDENTIFIER@P UBIN;
 3199
 3200          %END_MACRO;
 3201
 3202        %MEND;
 3203
 3204      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        104  
 3205
 3206      /*
 3207               PICture string pointer-to-ers...
 3208      */
 3209
 3210        %MACRO QI$PICTURE_STRING ( STCLASS = "BASED",
 3211                                   NAME = QI$PICTURE_STRING );
 3212
 3213          %BEGIN_MACRO ( STCLASS = STCLASS );
 3214
 3215        DCL 1 NAME STCLASS ALIGNED,
 3216              2 TYPE UBIN(3) UNAL,
 3217              2 * UBIN(13) UNAL,
 3218              2 OTHER_STUFF_A(0:0) UBIN;
 3219
 3220          %END_MACRO;
 3221
 3222        %MEND;
 3223
 3224        %MACRO QI$NUMERIC_PICTURE_STRING ( STCLASS = "BASED",
 3225                         NAME = QI$NUMERIC_PICTURE_STRING );
 3226
 3227          %BEGIN_MACRO ( STCLASS = STCLASS );
 3228
 3229        DCL 1 NAME STCLASS ALIGNED,
 3230              2 TYPE UBIN(3) UNAL,
 3231              2 MAX_DIGIT_COUNT UBIN(5) UNAL,
 3232              2 * UBIN(2) UNAL,
 3233              2 DECIMAL_SCALING UBIN(6) UNAL,
 3234              2 MOP_STRING_COUNT UBIN BYTE UNAL,
 3235              2 MOP_STRING_A(0:0) UBIN BYTE UNAL;
 3236
 3237          %END_MACRO;
 3238
 3239        %MEND;
 3240
 3241        %MACRO QI$ALPHANUMERIC_PICTURE_STRING ( STCLASS = "BASED",
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        105  
 3242                         NAME = QI$ALPHANUMERIC_PICTURE_STRING );
 3243
 3244          %BEGIN_MACRO ( STCLASS = STCLASS );
 3245
 3246        DCL 1 NAME STCLASS ALIGNED,
 3247              2 TYPE UBIN(3) UNAL,
 3248              2 EDIT_STRING_COUNT UBIN(13) UNAL,
 3249              2 EDIT_STRING_A(0:0),
 3250                3 FUNCTION UBIN(2) UNAL,
 3251                3 LENGTH UBIN(14) UNAL;
 3252
 3253          %END_MACRO;
 3254
 3255        %MEND;
 3256
 3257      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        106  
 3258      /*
 3259                             %%%%%%%  %%%%%%   %%
 3260                             %%       %%   %%  %%
 3261                             %%       %%   %%  %%
 3262                             %%%%%    %%%%%%   %%
 3263                             %%       %%       %%
 3264                             %%       %%       %%
 3265                             %%       %%       %%%%%%%
 3266
 3267                         %%
 3268                         %%             %%
 3269                     %%% %%   %%% %%  %%%%%%    %%% %%
 3270                    %%  %%%  %%  %%%    %%     %%  %%%
 3271                    %%  %%%  %%  %%%    %%     %%  %%%
 3272                    %%  %%%  %%  %%%    %%     %%  %%%
 3273                     %%% %%   %%% %%     %%%    %%% %%
 3274                                                                          */
 3275
 3276        %MACRO QI$TERMINAL_ATTRIBUTES ( STCLASS = "BASED",
 3277                                        NAME = QI$TERMINAL_ATTRIBUTES );
 3278
 3279          %BEGIN_MACRO ( STCLASS = STCLASS );
 3280
 3281      /*    Although the compiler never explicitly generates this,
 3282            it's implicitly the largest possible *thing* to say
 3283            ACCEPT *thing* FROM TERMINAL-ATTRIBUTES
 3284            about.  See the FPL manual under the ACCEPT verb.
 3285      */
 3286
 3287        DCL 1 NAME STCLASS CALIGNED,
 3288              2 STATION_NAME CHAR(8) CALIGNED,
 3289              2 CURRENT_DEVICE_PROFILE CHAR(12) CALIGNED,
 3290              2 NUMBER_OF_LINES CHAR(4) CALIGNED,
 3291              2 NUMBER_OF_COLUMNS CHAR(4) CALIGNED,
 3292              2 DEVICE_I_O_CAPABILITY CHAR(1) CALIGNED,
 3293              2 CONNECTION_TYPE CHAR(1) CALIGNED,
 3294              2 CP_6_NODE CHAR(4) CALIGNED,
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        107  
 3295              2 CP_6_PORT CHAR(4) CALIGNED,
 3296              2 PROGRAM_EXECUTION CHAR(1) CALIGNED,
 3297              2 DEVICE_TYPE CHAR(1) CALIGNED,
 3298              2 CP_6_CONTROLLER CHAR(4) CALIGNED,
 3299              2 CP_6_DEVICE CHAR(4) CALIGNED;
 3300
 3301        DCL 1 %CHARTEXT(CONCAT(TEXTCHAR(NAME),'_TEXT')) REDEF NAME CHAR(48);
 3302
 3303          %END_MACRO;
 3304
 3305        %MEND;
 3306
 3307      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        108  
 3308        %MACRO QI$ACTIVATION_STATUS ( STCLASS = "BASED",
 3309                                      NAME = QI$ACTIVATION_STATUS );
 3310
 3311          %BEGIN_MACRO ( STCLASS = STCLASS );
 3312
 3313      /*    Although the compiler never explicitly generates this,
 3314            it's implicitly the largest possible *thing* to say
 3315            ACTIVATION STATUS IS *thing*
 3316            about.  See the FPL manual under the SELECT clause.
 3317      */
 3318
 3319        DCL 1 NAME STCLASS CALIGNED,
 3320              2 ACTIVATION_CHARACTER CHAR(1) CALIGNED,
 3321              2 ACTIVATION_POSITION CHAR(3) CALIGNED,
 3322              2 ACTIVATION_LINE CHAR(3) CALIGNED,
 3323              2 ACTIVATION_COLUMN CHAR(3) CALIGNED,
 3324              2 ACTIVATION_FIELD CHAR(30) CALIGNED;
 3325
 3326        DCL 1 %CHARTEXT(CONCAT(TEXTCHAR(NAME),'_TEXT')) REDEF NAME CHAR(40);
 3327
 3328          %END_MACRO;
 3329
 3330        %MEND;
 3331
 3332      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        109  
 3333
 3334        %MACRO QI$PERFORM_BLOCK ( STCLASS = "BASED",
 3335                                  NAME = QI$PERFORM_BLOCK );
 3336
 3337          %BEGIN_MACRO ( STCLASS = STCLASS );
 3338
 3339      /*
 3340        This structure is used by PERFM and PERFMT routines to refer
 3341        to iteration data.
 3342      */
 3343        DCL 1 NAME STCLASS ALIGNED,
 3344              2 FROM@P UBIN,
 3345              2 RETURN$ PTR,
 3346              2 ITERATION UBIN;
 3347
 3348          %END_MACRO;
 3349
 3350        %MEND;
 3351
 3352      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        110  
 3353
 3354        %MACRO QI$INDICATORS
 3355               ( NAME = QI$INDICATORS,
 3356                 STCLASS = "BASED",
 3357                 LVL = 1,
 3358                 END_STRUCTURE ( YES = ";",
 3359                                 NO = ",",
 3360                                 ANY ) = ";" );
 3361
 3362          %BEGIN_MACRO ( STCLASS = STCLASS );
 3363
 3364          %IF LVL = 1;
 3365        DCL 1 NAME STCLASS ALIGNED,
 3366          %ELSE;
 3367            %(LVL) NAME ALIGNED,
 3368          %ENDIF;
 3369              %(LVL+1) IS_ACTIVE BIT(1) UNAL,
 3370                                         /* Is (or is in) an ACTIVATEd frame */
 3371              %(LVL+1) ENABLED_FLAGS,
 3372                %(LVL+2) IS_OUTPUT BIT(1) UNAL,
 3373                                         /* ENABLEd for OUTPUT */
 3374                %(LVL+2) IS_INPUT BIT(1) UNAL,
 3375                                         /* ENABLEd for INPUT */
 3376              %(LVL+1) ENABLED_VALUE REDEF ENABLED_FLAGS UBIN(2) UNAL,
 3377              %(LVL+1) STATE_FLAGS,
 3378                %(LVL+2) IS_AVAILABLE BIT(1) UNAL,
 3379                                         /* Last operation was a READ or ACCEPT */
 3380                %(LVL+2) IS_PRESENTED BIT(1) UNAL,
 3381                                         /* Last operation was a PRESENT */
 3382              %(LVL+1) STATE_VALUE REDEF STATE_FLAGS UBIN(2) UNAL,
 3383              %(LVL+1) OPEN_FLAGS,
 3384                %(LVL+2) IS_OUTPUT BIT(1) UNAL,
 3385                                         /* Is (or is in) an FD opened
 3386                                            for INPUT or I-O */
 3387                %(LVL+2) IS_INPUT BIT(1) UNAL,
 3388                                         /* Is (or is in) an FD opened
 3389                                            for OUTPUT or I-O */
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        111  
 3390              %(LVL+1) OPEN_VALUE REDEF OPEN_FLAGS UBIN(2) UNAL,
 3391              %(LVL+1) * UBIN(5) UNAL,
 3392
 3393          %IF LVL = 1;
 3394              %(LVL+1) TYPE UBIN(4) UNAL;
 3395                                         /* Type is form, frame, or field */
 3396        DCL 1 %CHARTEXT(CONCAT(TEXTCHAR(NAME),'_A'))(0:0) REDEF NAME UBIN ALIGNED;
 3397          %ELSE;
 3398              %(LVL+1) TYPE UBIN(4) UNAL,
 3399                                         /* Type is form, frame, or field */
 3400            %(LVL) %CHARTEXT(CONCAT(TEXTCHAR(NAME),'_A'))(0:0) REDEF NAME UBIN ALIGNED END_STRUCTURE
 3401          %ENDIF;
 3402
 3403          %END_MACRO;
 3404
 3405        %MEND;
 3406
 3407      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        112  
 3408
 3409        %MACRO QI$FIELD_STATUS ( STCLASS = "BASED",
 3410                                 NAME = QI$FIELD_STATUS );
 3411
 3412          %BEGIN_MACRO ( STCLASS = STCLASS );
 3413
 3414        DCL 1 NAME STCLASS ALIGNED,
 3415              2 GZ,
 3416                3 FIELD_START_INDEX UBIN,
 3417                                         /* starting index into interface table */
 3418                3 FIELD_STOP_INDEX UBIN,
 3419                                         /* ending index into interface table */
 3420              %QI$INDICATORS ( NAME = INDICATORS,
 3421                               STCLASS = STCLASS,
 3422                               LVL = 2 );
 3423
 3424          %END_MACRO;
 3425
 3426        %MEND;
 3427
 3428      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        113  
 3429
 3430        %MACRO QI$MAJOR_STATUS ( STCLASS = "BASED",
 3431                                 NAME = QI$MAJOR_STATUS );
 3432
 3433          %BEGIN_MACRO ( STCLASS = STCLASS );
 3434
 3435        DCL 1 NAME STCLASS ALIGNED,
 3436              2 GZ,
 3437                3 FIELD_START_INDEX UBIN,
 3438                                         /* starting index into interface table */
 3439                3 FIELD_STOP_INDEX UBIN,
 3440                                         /* ending index into interface table */
 3441              %QI$INDICATORS ( NAME = INDICATORS,
 3442                               STCLASS = STCLASS,
 3443                               LVL = 2 );
 3444
 3445          %END_MACRO;
 3446
 3447        %MEND;
 3448
 3449      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        114  
 3450
 3451        %MACRO QI$MINOR_STATUS ( STCLASS = "BASED",
 3452                                 NAME = QI$MINOR_STATUS );
 3453
 3454          %BEGIN_MACRO ( STCLASS = STCLASS );
 3455
 3456        DCL 1 NAME STCLASS ALIGNED,
 3457              2 GZ,
 3458                3 FIELD_START_INDEX UBIN,
 3459                                         /* starting index into interface table */
 3460                3 FIELD_STOP_INDEX UBIN,
 3461                                         /* ending index into interface table */
 3462              %QI$INDICATORS ( NAME = INDICATORS,
 3463                               STCLASS = STCLASS,
 3464                               LVL = 2 );
 3465
 3466          %END_MACRO;
 3467
 3468        %MEND;
 3469
 3470      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        115  
 3471
 3472        %MACRO QI$FILE_STATUS ( STCLASS = "BASED",
 3473                                NAME = QI$FILE_STATUS );
 3474
 3475          %BEGIN_MACRO ( STCLASS = STCLASS );
 3476
 3477        DCL 1 NAME STCLASS ALIGNED,
 3478              2 CURRENT,
 3479                3 * BIT(5) UNAL,
 3480                3 USAGE,
 3481                  4 OPENED BIT(1) UNAL,
 3482                        /* Opened is:  0 for never opened
 3483                                       1 for opened at least once. */
 3484                  4 CLOSED BIT(1) UNAL,
 3485                        /* Closed is:  0 for never closed
 3486                                       1 for closed at least once. */
 3487                3 * UBIN(9) UNAL,
 3488              2 BACK_LINK@P UBIN,
 3489                        /* Back_link to the file FD
 3490                           (in procedure). */
 3491              2 FLINK$ PTR,
 3492                        /* Pointer to next opened FD of this type. */
 3493              2 * UBIN,
 3494              2 * UBIN,
 3495              2 * UBIN,
 3496              2 * UBIN,
 3497              %QI$INDICATORS ( NAME = INDICATORS,
 3498                               STCLASS = STCLASS,
 3499                               LVL = 2 );
 3500
 3501          %END_MACRO;
 3502
 3503        %MEND;
 3504
 3505      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        116  
 3506
 3507        %MACRO QI$FORM_STATUS ( STCLASS = "BASED",
 3508                                NAME = QI$FORM_STATUS );
 3509
 3510          %BEGIN_MACRO ( STCLASS = STCLASS );
 3511
 3512        DCL 1 NAME STCLASS ALIGNED,
 3513              2 CURRENT,
 3514                3 * BIT(3) UNAL,
 3515                3 IS_USE_PROCEDURE_ACTIVE,
 3516                  4 STANDARD BIT(1) UNAL,
 3517                  4 VERIFY BIT(1) UNAL,
 3518                3 USAGE,
 3519                  4 OPENED BIT(1) UNAL,
 3520                        /* Opened is:  0 for never opened
 3521                                       1 for opened at least once. */
 3522                  4 CLOSED BIT(1) UNAL,
 3523                        /* Closed is:  0 for never closed
 3524                                       1 for closed at least once. */
 3525                3 IS_MESSAGE_LINE_NON_BLANK BIT(1) UNAL,
 3526                        /* Set if the screen is currently displaying
 3527                           a non-blank MESSAGE LINE. */
 3528                3 IS_UPDATED BIT(1) UNAL,
 3529                        /* Set if the screen has been updated with
 3530                           a DISPLAY, WRITE or CLEAR and must be
 3531                           M$DEVICEd before a STOP "literal" or
 3532                           a host read. */
 3533                3 * UBIN(7) UNAL,
 3534              2 BACK_LINK@P UBIN,
 3535                        /* Back_link to the form FD
 3536                           (in procedure). */
 3537              2 FLINK$ PTR,
 3538                        /* Pointer to next opened screen FD. */
 3539              2 GZ,
 3540                3 NEXT_AVAILABLE_FLDID UBIN,
 3541                        /* Next VDH FLDID to use for activating frames
 3542                           within this form. */
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        117  
 3543              2 * UBIN,
 3544              2 * UBIN,
 3545              2 * UBIN,
 3546              %QI$INDICATORS ( NAME = INDICATORS,
 3547                               STCLASS = STCLASS,
 3548                               LVL = 2 );
 3549
 3550          %END_MACRO;
 3551
 3552        %MEND;
 3553
 3554      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        118  
 3555
 3556        %MACRO QI$TRAN_STATUS ( STCLASS = "BASED",
 3557                                NAME = QI$TRAN_STATUS );
 3558
 3559          %BEGIN_MACRO ( STCLASS = STCLASS );
 3560
 3561        DCL 1 NAME STCLASS ALIGNED,
 3562              2 CURRENT,
 3563                3 * BIT(3) UNAL,
 3564                3 IS_RRR_ID_VALID BIT(1) UNAL,
 3565                        /* If is_rrr_id_valid, rrr_id is real and we
 3566                           should M$REP_OTP_COMP. */
 3567                3 * BIT(1) UNAL,
 3568                3 USAGE,
 3569                  4 OPENED BIT(1) UNAL,
 3570                        /* Opened is:  0 for never opened
 3571                                       1 for opened at least once. */
 3572                  4 CLOSED BIT(1) UNAL,
 3573                        /* Closed is:  0 for never closed
 3574                                       1 for closed at least once. */
 3575                3 * UBIN(9) UNAL,
 3576              2 BACK_LINK@P UBIN,
 3577                        /* Back_link to the transaction FD
 3578                           (in procedure). */
 3579              2 FLINK$ PTR,
 3580                        /* Pointer to next opened transaction FD. */
 3581              2 LAST_ID UBIN(32),
 3582                        /* Last transaction id produced by a
 3583                           WRITE to this FD. */
 3584              2 RRR_ID UBIN(32),
 3585                        /* RRR id of the last record READ,
 3586                           if it was WRITtEn secure. */
 3587              %QI$INDICATORS ( NAME = INDICATORS,
 3588                               STCLASS = STCLASS,
 3589                               LVL = 2 );
 3590
 3591          %END_MACRO;
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        119  
 3592
 3593        %MEND;
 3594
 3595      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        120  
 3596
 3597        %MACRO QI$FRAME_STATUS ( STCLASS = "BASED",
 3598                                 NAME = QI$FRAME_STATUS );
 3599
 3600          %BEGIN_MACRO ( STCLASS = STCLASS );
 3601
 3602        DCL 1 NAME STCLASS ALIGNED,
 3603              2 GZ,
 3604                3 FIELD_START_INDEX UBIN,
 3605                                         /* Starting index into interface table. */
 3606                3 FIELD_STOP_INDEX UBIN,
 3607                                         /* Ending index into interface table. */
 3608                3 FLDID_START UBIN,
 3609                                         /* First VDH FLDID for this frame. */
 3610                3 FLDID_STOP UBIN,
 3611                                         /* Last VDH FLDID for this frame. */
 3612                3 HEADER$ PTR,
 3613                                         /* Pointer to interface header area */
 3614                3 START$ PTR,
 3615                                         /* Pointer to start of interface array */
 3616                3 STOP$ PTR,
 3617                                         /* Pointer to end of interface array */
 3618              2 CURRENT,
 3619                3 * BIT(5) UNAL,
 3620                3 USAGE,
 3621                  4 ACTIVATED BIT(1) UNAL,
 3622                        /* Activated is:  0 for never activated
 3623                                          1 for activated at least once.  */
 3624                  4 DEACTIVATED BIT(1) UNAL,
 3625                        /* Deactivated is:  0 for never deactivated
 3626                                            1 for deactivated at least once.  */
 3627                3 * UBIN(9) UNAL,
 3628              2 FORM_BACK_LINK@P UBIN,
 3629                                         /* Back_link to the form FD
 3630                                            (in procedure). */
 3631              %QI$INDICATORS ( NAME = INDICATORS,
 3632                               STCLASS = STCLASS,
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        121  
 3633                               LVL = 2 );
 3634
 3635          %END_MACRO;
 3636
 3637        %MEND;
 3638
 3639      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        122  
 3640
 3641      /*
 3642                             %%%%%%%  %%%%%%   %%
 3643                             %%       %%   %%  %%
 3644                             %%       %%   %%  %%
 3645                             %%%%%    %%%%%%   %%
 3646                             %%       %%       %%
 3647                             %%       %%       %%
 3648                             %%       %%       %%%%%%%
 3649                                                                   %%%
 3650                                                                    %%
 3651            %%% %%   %%%%%   %% %%%    %%%%%   %% %%%%   %%% %%     %%
 3652           %%  %%%  %%   %%  %%%  %%  %%   %%  %%%%     %%  %%%     %%
 3653           %%  %%%  %%%%%%%  %%   %%  %%%%%%%  %%%      %%  %%%     %%
 3654           %%  %%%  %%       %%   %%  %%       %%       %%  %%%     %%
 3655            %%% %%   %%%%%   %%   %%   %%%%%   %%        %%% %%   %%%%%%
 3656                %%
 3657            %%%%%
 3658                                                                          */
 3659
 3660        %MACRO QI$GENERAL_BASED ( STCLASS = "BASED" );
 3661
 3662          %BEGIN_MACRO ( STCLASS = STCLASS );
 3663
 3664      /*
 3665          some useful stuff...
 3666      */
 3667        DCL QI$PROC_A@P(0:0) UBIN STCLASS;
 3668        DCL QI$DATA_A@D(0:0) UBIN STCLASS;
 3669        DCL QI$AREA_A@(0:0) UBIN STCLASS;
 3670
 3671        DCL 1 QI$BITS ALIGNED STCLASS,
 3672              2 BIT_A(0:0) BIT(1) UNAL;
 3673        DCL QI$CHAR_A(0:0) CHAR(1) CALIGNED STCLASS;
 3674        DCL QI$UBYTE_A(0:0) UBIN BYTE CALIGNED STCLASS;
 3675        DCL QI$SBYTE_A(0:0) SBIN BYTE CALIGNED STCLASS;
 3676        DCL QI$UWORD_A(0:0) UBIN STCLASS;
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        123  
 3677        DCL QI$SWORD_A(0:0) SBIN STCLASS;
 3678        DCL QI$DWORD_A(0:0) BIT(32) ALIGNED STCLASS;
 3679        DCL QI$PTR_A$(0:0) PTR STCLASS;
 3680
 3681        DCL 1 QI$MESSAGE_TYPE CALIGNED STCLASS,
 3682              2 TEXT CHAR(8) UNAL;
 3683        DCL QI$MESSAGE_TYPE_A(0:7) REDEF QI$MESSAGE_TYPE UBIN BYTE CALIGNED;
 3684
 3685        DCL 1 QI$ERROR_STATUS CALIGNED STCLASS,
 3686              2 TEXT CHAR(8) UNAL;
 3687        DCL QI$ERROR_STATUS_A(0:7) REDEF QI$ERROR_STATUS UBIN BYTE CALIGNED;
 3688
 3689        DCL 1 QI$ERROR_MESSAGE_LINE CALIGNED STCLASS,
 3690              2 TEXT CHAR(%QI#ERROR_MESSAGE_LINE_SIZE) UNAL;
 3691        DCL QI$ERROR_MESSAGE_LINE_A(0:%(QI#ERROR_MESSAGE_LINE_SIZE-1)) REDEF QI$ERROR_MESSAGE_LINE UBIN BYTE CALIGNED;
 3692
 3693        DCL 1 QI$IDENTIFIER CALIGNED STCLASS,
 3694              2 TEXT CHAR(30) UNAL;
 3695        DCL QI$IDENTIFIER_A(0:29) REDEF QI$IDENTIFIER UBIN BYTE CALIGNED;
 3696
 3697        DCL 1 QI$VARIABLE_IDENTIFIER CALIGNED STCLASS,
 3698              2 LENGTH UBIN BYTE UNAL,
 3699              2 TEXT CHAR(QI$VARIABLE_IDENTIFIER.LENGTH) UNAL;
 3700
 3701      /*
 3702          note that the following require the QI_CONTEXT macro to be
 3703          invoked along with the QI$GENERAL one.
 3704      */
 3705        DCL 1 QI$VARIABLE_STRING_SOURCE CALIGNED STCLASS,
 3706              2 TEXT CHAR(QI_1.OP.LEN.S) UNAL;
 3707        DCL 1 QI$VARIABLE_STRING_TARGET CALIGNED STCLASS,
 3708              2 TEXT CHAR(QI_1.OP.LEN.T) UNAL;
 3709        DCL 1 QI$VARIABLE_STRING_AUX CALIGNED STCLASS,
 3710              2 TEXT CHAR(QI_1.OP.LEN.AUX) UNAL;
 3711
 3712          %END_MACRO;
 3713
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        124  
 3714        %MEND;
 3715
 3716      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        125  
 3717
 3718      /*
 3719                         %%       %%
 3720                         %%       %%
 3721            %%% %%   %%% %%   %%% %%  %% %%%%   %%%%%    %%%%%%   %%%%%%
 3722           %%  %%%  %%  %%%  %%  %%%  %%%%     %%   %%  %%       %%
 3723           %%  %%%  %%  %%%  %%  %%%  %%%      %%%%%%%   %%%%%    %%%%%
 3724           %%  %%%  %%  %%%  %%  %%%  %%       %%            %%       %%
 3725            %%% %%   %%% %%   %%% %%  %%        %%%%%   %%%%%%   %%%%%%
 3726
 3727              %%%      %%                  %%
 3728             %%                            %%
 3729             %%       %%%    %% %%%    %%% %%   %%%%%   %% %%%%   %%%%%%
 3730           %%%%%%      %%    %%%  %%  %%  %%%  %%   %%  %%%%     %%
 3731             %%        %%    %%   %%  %%  %%%  %%%%%%%  %%%       %%%%%
 3732             %%        %%    %%   %%  %%  %%%  %%       %%            %%
 3733             %%      %%%%%%  %%   %%   %%% %%   %%%%%   %%       %%%%%%
 3734                                                                          */
 3735
 3736        %MACRO DATA_ADDRESS ( THING@D = WHATS_THIS_NO_THING@D,
 3737                              CHECK_FOR_INDIRECTION ( YES = '1'B,
 3738                                                      NO = '0'B ) = NO,
 3739                              RESULT$ = WHATS_THIS_NO_RESULT$ );
 3740
 3741          %BEGIN_MACRO ( STCLASS = STCLASS );
 3742
 3743            /* This is the same DAD-tracking-down code
 3744               as is used in QCS$SETUP. */
 3745            DO;
 3746              RESULT$ = PINCRW ( QI_1.BASE.DATA$, THING@D );
 3747          %IF CHECK_FOR_INDIRECTION;
 3748              DO WHILE ( RESULT$ -> QI$DAD.WORD0_FLAGS.INDIRECT );
 3749                RESULT$ = PINCRW ( QI_1.BASE_A$ (
 3750                          BITBIN ( RESULT$ -> QI$DAD.WORD0_FLAGS.IS_CONSTANT )
 3751                                                ),
 3752                                   RESULT$ -> QI$DAD.PSEUDO_CIP.DATA@ );
 3753              END;
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        126  
 3754          %ENDIF;
 3755            END;
 3756
 3757          %END_MACRO;
 3758
 3759        %MEND;
 3760
 3761        %MACRO PROC_ADDRESS ( THING@P = WHATS_THIS_NO_THING@P,
 3762                              CHECK_FOR_INDIRECTION ( YES = '1'B,
 3763                                                      NO = '0'B ) = NO,
 3764                              RESULT$ = WHATS_THIS_NO_RESULT$ );
 3765
 3766          %BEGIN_MACRO ( STCLASS = STCLASS );
 3767
 3768            /* This is the same DAD-tracking-down code
 3769               as is used in QCS$SETUP. */
 3770            DO;
 3771              RESULT$ = PINCRW ( QI_1.BASE.PROC$, THING@P );
 3772          %IF CHECK_FOR_INDIRECTION;
 3773              DO WHILE ( RESULT$ -> QI$DAD.WORD0_FLAGS.INDIRECT );
 3774                RESULT$ = PINCRW ( QI_1.BASE_A$ (
 3775                          BITBIN ( RESULT$ -> QI$DAD.WORD0_FLAGS.IS_CONSTANT )
 3776                                                ),
 3777                                   RESULT$ -> QI$DAD.PSEUDO_CIP.DATA@ );
 3778              END;
 3779          %ENDIF;
 3780            END;
 3781
 3782          %END_MACRO;
 3783
 3784        %MEND;
 3785
 3786        %MACRO LINKAGE_ARGUMENT_ADDRESS ( THING$ = WHATS_THIS_NO_THING$,
 3787                                          RESULT$ = WHATS_THIS_NO_RESULT$ );
 3788
 3789          %BEGIN_MACRO ( STCLASS = STCLASS );
 3790
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        127  
 3791            /* This is the same DATA$-tracking-down code
 3792               as is used in QCS$SETUP. */
 3793            DO;
 3794              RESULT$ =
 3795                PINCRW (
 3796                QI_1.ARGUMENTS_AND_OR_FREE_AUTO_A$$ ->
 3797                QI$PTR_A$ ( THING$ ->
 3798                QI$LINKAGE_ARGUMENT_DESCRIPTOR.ARGUMENT_NUMBER ),
 3799                THING$ ->
 3800                QI$LINKAGE_ARGUMENT_DESCRIPTOR.WORD_OFFSET_FROM_01_ITEM
 3801                );
 3802            END;
 3803
 3804          %END_MACRO;
 3805
 3806        %MEND;
 3807
 3808        %MACRO PRESENCE_DISPLACEMENT ( PRESENCE_THING$ = WHATS_THIS_NO_PRESENCE_THING$,
 3809                                       INDEX = WHATS_THIS_NO_INDEX,
 3810                                       START = 0,
 3811                                       STOP = 0,
 3812                                       RESULT = WHATS_THIS_NO_RESULT );
 3813
 3814          %BEGIN_MACRO ( STCLASS = STCLASS );
 3815
 3816            DO;
 3817              RESULT = -1;
 3818              DO INDEX = START TO STOP;
 3819                IF PRESENCE_THING$ -> QI$BITS.BIT_A ( INDEX )
 3820                THEN
 3821                  RESULT = RESULT + 1;
 3822              END;
 3823            END;
 3824
 3825          %END_MACRO;
 3826
 3827        %MEND;
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        128  
 3828
 3829      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        129  
 3830      /*
 3831                             %%%%%%%  %%
 3832                                %%    %%
 3833                                %%    %% %%%    %%%%%
 3834                                %%    %%%  %%  %%   %%
 3835                                %%    %%   %%  %%%%%%%
 3836                                %%    %%   %%  %%
 3837                                %%    %%   %%   %%%%%
 3838
 3839                                                 %%%
 3840                                                  %%
 3841                    %% %%%    %%%%%    %%%%%      %%
 3842                    %%%  %%  %%   %%  %%   %%     %%
 3843                    %%%  %%  %%   %%  %%   %%     %%
 3844                    %%%  %%  %%   %%  %%   %%     %%
 3845                    %% %%%    %%%%%    %%%%%    %%%%%%
 3846                    %%
 3847                    %%
 3848                                                                          */
 3849
 3850      /*D* NAME:         GENERAL_PURPOSE_CIPS
 3851           PURPOSE:      To provide a common pool of CONSTANT CIP
 3852                         descriptors.
 3853           DESCRIPTION:  Whenever a CIP operation block (QI@CIP_OPERATION)
 3854                         or a lone CIP descriptor (QI_CIP_DESCRIPTOR) is
 3855                         generated in CONSTANT storage, it appears here as
 3856                         a macro which is invoked with STCLASS = CONSTANT
 3857                         and NAME = QI_name in QI_DATA_D, with
 3858                         STCLASS = SYMREF and NAME = QI_name in the
 3859                         QI_GENERAL_CIPS invocation-macro, and possibly with
 3860                         STCLASS = AUTO and NAME = QI@name in the refer-
 3861                         encing module(s).  This will hopefully avoid
 3862                         duplication of these structures in diverse modules,
 3863                         i.e., since it's such a pain to generate them, the
 3864                         temptation will be to look here to see if there's
 3865                         already one of the desired initialization.
 3866                         Maybe it's not such a great idea; who asked you
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        130  
 3867                         anyway?
 3868      */
 3869      /*
 3870                     %%%%%   %% %%%    %%%%%   %% %%%%
 3871                    %%   %%  %%%  %%  %%   %%  %%%%
 3872                    %%   %%  %%%  %%  %%%%%%%  %%%
 3873                    %%   %%  %%%  %%  %%       %%        %%%
 3874                     %%%%%   %% %%%    %%%%%   %%        %%%
 3875                             %%
 3876                             %%
 3877             %%%
 3878              %%
 3879              %%     %%% %%   %%% %%   %%%%%    %%%%%   %% %%%
 3880              %%    %%  %%%  %%  %%%  %%   %%  %%   %%  %%%  %%
 3881              %%    %%  %%%  %%  %%%  %%   %%  %%   %%  %%   %%
 3882              %%    %%  %%%  %%  %%%  %%   %%  %%   %%  %%   %%
 3883            %%%%%%   %%% %%   %%% %%   %%%%%    %%%%%   %%   %%
 3884                                  %%
 3885                              %%%%%
 3886                                                                          */
 3887        %MACRO QI@ALR ( STCLASS = "AUTO",
 3888                        NAME = QI@ALR );
 3889
 3890          %BEGIN_MACRO ( STCLASS = STCLASS );
 3891
 3892          %QI@CIP_OPERATION ( NAME = NAME,
 3893                              STCLASS = STCLASS,
 3894                              TYPE = ALR,
 3895                              FIRST_LEN = 1 );
 3896
 3897          %END_MACRO;
 3898
 3899        %MEND;
 3900
 3901        %MACRO QI@TYPE_DISPLAY_SOURCE ( STCLASS = "AUTO",
 3902                                        NAME = QI@TYPE_DISPLAY_SOURCE );
 3903
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        131  
 3904          %BEGIN_MACRO ( STCLASS = STCLASS );
 3905
 3906          %QI@CIP_OPERATION ( NAME = NAME,
 3907                              STCLASS = STCLASS,
 3908                              TYPE = DMC,
 3909                              FIRST_CIP_TYPE = DISPLAY,
 3910                              FIRST_CIP_LEN = 15 /* %QI#MAX_DISPLAY */ );
 3911
 3912          %END_MACRO;
 3913
 3914        %MEND;
 3915
 3916        %MACRO QI@TYPE_DISPLAY_TARGET ( STCLASS = "AUTO",
 3917                                        NAME = QI@TYPE_DISPLAY_TARGET );
 3918
 3919          %BEGIN_MACRO ( STCLASS = STCLASS );
 3920
 3921          %QI@CIP_OPERATION ( NAME = NAME,
 3922                              STCLASS = STCLASS,
 3923                              TYPE = DMC,
 3924                              SECOND_CIP_TYPE = DISPLAY,
 3925                              SECOND_CIP_LEN = 15 /* %QI#MAX_DISPLAY */,
 3926                              SECOND_CIP_FILL = NO );
 3927
 3928          %END_MACRO;
 3929
 3930        %MEND;
 3931
 3932        %MACRO QI@TYPE_BINARY_TARGET ( STCLASS = "AUTO",
 3933                                       NAME = QI@TYPE_BINARY_TARGET );
 3934
 3935          %BEGIN_MACRO ( STCLASS = STCLASS );
 3936
 3937          %QI@CIP_OPERATION ( NAME = NAME,
 3938                              STCLASS = STCLASS,
 3939                              TYPE = CDB,
 3940                              SECOND_CIP_TYPE = BINARY,
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        132  
 3941                              SECOND_CIP_LEN = 2 /* %QI#MIN_BINARY_LENGTH */,
 3942                              SECOND_CIP_FILL = NO );
 3943
 3944          %END_MACRO;
 3945
 3946        %MEND;
 3947
 3948        %MACRO QI@SRCH_VRFY ( STCLASS = "AUTO",
 3949                              NAME = QI@SRCH_VRFY );
 3950
 3951          %BEGIN_MACRO ( STCLASS = STCLASS );
 3952
 3953          %QI@CIP_OPERATION ( NAME = NAME,
 3954                              STCLASS = STCLASS,
 3955                              TYPE = SRCH,
 3956                              FIRST_CIP_FILL = NO,
 3957                              FIRST_CIP_AS = INDEX,
 3958                              SRCH_VRFY_ARGS_LEN = 1,
 3959                              SRCH_VRFY_ARGS_LIST_LEN = 1,
 3960                              SECOND_CIP_LEN = 4,
 3961                              SECOND_CIP_FILL = NO,
 3962                              THIRD_CIP_FILL = NO,
 3963                              THIRD_CIP_AS = INDEX,
 3964                              SRCH_VRFY_ELEMS_LEN = 1,
 3965                              SRCH_VRFY_ELEMS_LIST_LEN = 1 );
 3966
 3967          %END_MACRO;
 3968
 3969        %MEND;
 3970
 3971        %MACRO QI@MAT ( STCLASS = "AUTO",
 3972                        NAME = QI@MAT );
 3973
 3974          %BEGIN_MACRO ( STCLASS = STCLASS );
 3975
 3976          %QI@CIP_OPERATION ( NAME = NAME,
 3977                              STCLASS = STCLASS,
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        133  
 3978                              TYPE = MAT,
 3979                              FIRST_CIP_FILL = NO,
 3980                              FIRST_CIP_AS = INDEX,
 3981                              SECOND_CIP_AS = INDEX,
 3982                              THIRD_CIP_FILL = NO,
 3983                              THIRD_LEN = 256,
 3984                              FILL_CHAR = 01 /* QI_MAT_MATCH */ );
 3985
 3986          %END_MACRO;
 3987
 3988        %MEND;
 3989
 3990      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        134  
 3991
 3992      /*
 3993                         %%
 3994                         %%
 3995                     %%% %%   %%%%%    %%%%%%   %%%%%%
 3996                    %%  %%%  %%   %%  %%       %%
 3997                    %%  %%%  %%%%%%%   %%%%%   %%
 3998                    %%  %%%  %%            %%  %%        %%%
 3999                     %%% %%   %%%%%   %%%%%%    %%%%%%   %%%
 4000
 4001                     %%%%%%  %  %  %   %%% %%  %%% %%   %% %%%
 4002                    %%       % %%% %  %%  %%%  %% % %%  %%%  %%
 4003                     %%%%%   % %%% %  %%  %%%  %% % %%  %%%  %%
 4004                         %%  %%% %%%  %%  %%%  %% % %%  %%%  %%
 4005                    %%%%%%   %%   %%   %%% %%  %% % %%  %% %%%
 4006                                                        %%
 4007                                                        %%
 4008                                                                          */
 4009
 4010        %MACRO QI@4_CHAR_ALPHANUMERIC ( STCLASS = "AUTO",
 4011                                        NAME = QI@4_CHAR_ALPHANUMERIC );
 4012
 4013          %BEGIN_MACRO ( STCLASS = STCLASS );
 4014
 4015          %QI_CIP_DESCRIPTOR ( NAME = NAME,
 4016                               STCLASS = STCLASS,
 4017                               TYPE = ALPHANUMERIC,
 4018                               LEN = 4,
 4019                               DISP = SOURCE );
 4020
 4021          %END_MACRO;
 4022
 4023        %MEND;
 4024
 4025        %MACRO QI@31_DIGIT_SLS_DISPLAY ( STCLASS = "AUTO",
 4026                                         NAME = QI@31_DIGIT_SLS_DISPLAY );
 4027
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        135  
 4028          %BEGIN_MACRO;
 4029
 4030          %QI_CIP_DESCRIPTOR ( NAME = NAME,
 4031                               STCLASS = STCLASS,
 4032                               TYPE = DISPLAY,
 4033                               SIGN = LEADING,
 4034                               LEN = 31,
 4035                               DISP = SOURCE );
 4036
 4037          %END_MACRO;
 4038
 4039        %MEND;
 4040
 4041        %MACRO QI@16_BIT_BINARY ( STCLASS = "AUTO",
 4042                                  NAME = QI@32_BIT_BINARY );
 4043
 4044          %BEGIN_MACRO ( STCLASS = STCLASS );
 4045
 4046          %QI_CIP_DESCRIPTOR ( NAME = NAME,
 4047                               STCLASS = STCLASS,
 4048                               TYPE = BINARY,
 4049                               LEN = 2,
 4050                               DISP = SOURCE );
 4051
 4052          %END_MACRO;
 4053
 4054        %MEND;
 4055
 4056        %MACRO QI@32_BIT_BINARY ( STCLASS = "AUTO",
 4057                                  NAME = QI@32_BIT_BINARY );
 4058
 4059          %BEGIN_MACRO ( STCLASS = STCLASS );
 4060
 4061          %QI_CIP_DESCRIPTOR ( NAME = NAME,
 4062                               STCLASS = STCLASS,
 4063                               TYPE = BINARY,
 4064                               LEN = 4,
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        136  
 4065                               DISP = SOURCE );
 4066
 4067          %END_MACRO;
 4068
 4069        %MEND;
 4070
 4071        %MACRO QI@31_DIGIT_ST_PACKED ( STCLASS = "AUTO",
 4072                                       NAME = QI@31_DIGIT_ST_PACKED );
 4073
 4074          %BEGIN_MACRO ( STCLASS = STCLASS );
 4075
 4076          %QI_CIP_DESCRIPTOR ( NAME = NAME,
 4077                               STCLASS = STCLASS,
 4078                               TYPE = PACKED,
 4079                               LEN = 31,
 4080                               SIGN = TRAILING,
 4081                               DISP = SOURCE );
 4082
 4083          %END_MACRO;
 4084
 4085        %MEND;
 4086
 4087        %MACRO QI@PICTURE_STRING ( STCLASS = "AUTO",
 4088                                   NAME = QI@PICTURE_STRING );
 4089
 4090          %BEGIN_MACRO;
 4091
 4092          %QI_CIP_DESCRIPTOR ( NAME = NAME,
 4093                               STCLASS = STCLASS,
 4094                               TYPE = ALPHANUMERIC,
 4095                               OFFSET = 1,  /* Lookit dat. */
 4096                               LEN = 0,
 4097                               DISP = AUX );
 4098
 4099          %END_MACRO;
 4100
 4101        %MEND;
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        137  
 4102
 4103        %MACRO QI@ACCUMULATOR_DAD ( STCLASS = "AUTO",
 4104                                    NAME = QI@ACCUMULATOR_DAD );
 4105
 4106          %BEGIN_MACRO;
 4107
 4108        DCL 1 NAME STCLASS ALIGNED,
 4109                        /* CONSTANT "DAD" describing QI_1.ACCUM. */
 4110              2 * UBIN(12) UNAL %INIT(0)%CHARTEXT('/**/'),
 4111              2 TYPE UBIN(4) UNAL %INIT(%QI#ACCUMULATOR_TYPE)%CHARTEXT('/**/'),
 4112              %QI_CIP_DESCRIPTOR ( NAME = CIP,
 4113                                   STCLASS = STCLASS,
 4114                                   LVL = 2,
 4115                                   TYPE = PACKED,
 4116                                   SIGN = TRAILING,
 4117                                   LEN = 31,
 4118                                   DISP = SOURCE );
 4119
 4120          %END_MACRO;
 4121
 4122        %MEND;
 4123
 4124      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        138  
 4125
 4126      /*
 4127                %%                                         %%
 4128                %%
 4129            %%% %%  %%   %%  %% %%%    %%% %%  %%% %%     %%%     %%%%%%
 4130           %%  %%%  %%   %%  %%%  %%  %%  %%%  %% % %%     %%    %%
 4131           %%  %%%  %%   %%  %%   %%  %%  %%%  %% % %%     %%    %%
 4132           %%  %%%  %%  %%%  %%   %%  %%  %%%  %% % %%     %%    %%
 4133            %%% %%   %%% %%  %%   %%   %%% %%  %% % %%   %%%%%%   %%%%%%
 4134                         %%
 4135                    %%%%%%
 4136
 4137                                                  %%%      %%%
 4138                               %%                %%       %%
 4139                     %%%%%%  %%%%%%   %%   %%    %%       %%
 4140                    %%         %%     %%   %%  %%%%%%   %%%%%%
 4141                     %%%%%     %%     %%   %%    %%       %%
 4142                         %%    %%     %%  %%%    %%       %%
 4143                    %%%%%%      %%%    %%% %%    %%       %%
 4144                                                                     */
 4145        %MACRO QI$GZ_HEADER ( STCLASS = "BASED",
 4146                              NAME = QI$GZ_HEADER );
 4147
 4148          %BEGIN_MACRO ( STCLASS = STCLASS );
 4149
 4150        DCL 1 NAME STCLASS ALIGNED,
 4151              2 IS_ACTIVE BIT(1) ALIGNED,
 4152                                         /* "Does this QI$GZ_HEADER represent an
 4153                                            ACTIVE something-or-other?" indicator */
 4154              2 BACK_LINK$ PTR,
 4155                                         /* Back_link to last QI$GZ_HEADER */
 4156              2 DCB# UBIN,
 4157                                         /* DCB# for this header */
 4158              2 FIELD_COUNT UBIN,
 4159                                         /* number of fields following this header */
 4160              2 FRAME_DAD$ PTR,
 4161                                         /* ptr to frame DAD for this header */
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        139  
 4162              2 OPERATION,
 4163                3 START_INDEX UBIN,
 4164                                         /* starting index into the field array
 4165                                            following this header */
 4166                3 STOP_INDEX UBIN,
 4167                                         /* stopping index into the field array
 4168                                            following this header */
 4169                3 DONE_INDEX UBIN,
 4170                                         /* index into the field array
 4171                                            following this header of
 4172                                            the last field actually operated on */
 4173              2 STATUS UBIN;
 4174                                         /* returned status */
 4175
 4176          %END_MACRO;
 4177
 4178        %MEND;
 4179
 4180      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        140  
 4181
 4182        %MACRO QI$GZ_FIELD ( STCLASS = "BASED",
 4183                             NAME = QI$GZ_FIELD );
 4184
 4185          %BEGIN_MACRO ( STCLASS = STCLASS );
 4186
 4187        DCL 1 NAME STCLASS ALIGNED,
 4188              2 INDICATORS$ PTR,
 4189              2 DESCRIPTION,
 4190                3 IO_FLAGS,
 4191                  4 IS_OUTPUT BIT(1) UNAL,
 4192                                         /* on if this FIELD is OUTPUT or I-O */
 4193                  4 IS_INPUT BIT(1) UNAL,
 4194                                         /* on if this FIELD is INPUT or I-O */
 4195                3 IO_VALUE REDEF IO_FLAGS UBIN(2) UNAL,
 4196                                         /* all 1's if this field is I-O */
 4197                3 IS_ENTRY_REQUIRED BIT(1) UNAL,
 4198                                         /* on if ENTRY-REQUIRED */
 4199                3 IS_OUTPUT_CONSTANT BIT(1) UNAL,
 4200                                         /* on if OUTPUT CONSTANT */
 4201                3 IS_AOIM BIT(1) UNAL,
 4202                                         /* on if A-O-I-M */
 4203                3 * UBIN(3) UNAL,
 4204                3 LENGTH UBIN BYTE CALIGNED,
 4205                                         /* field length */
 4206                3 POSITION,
 4207                  4 LINE UBIN BYTE CALIGNED,
 4208                                         /* LINE whatever */
 4209                  4 COLUMN UBIN BYTE CALIGNED,
 4210                                         /* COLUMN whatever */
 4211                3 FIELD_DAD$ PTR,
 4212                                         /* ptr back to the original field DAD */
 4213              2 STATUS,
 4214                3 OFFSET UBIN(1) UNAL,
 4215                                         /* byte offset from DATA$ of the real data */
 4216                3 IS_AOIM_MODIFIED BIT(1) UNAL,
 4217                                         /* on if this A-O-I-M field was modified,
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        141  
 4218                                            off if this A-O-I-M field hasn't changed */
 4219                3 IS_VALUE_DEFAULT BIT(1) UNAL,
 4220                                         /* on if data came from a DEFAULT clause,
 4221                                            off if data came from a terminal */
 4222                3 WAS_IO_EVER_DONE BIT(1) UNAL,
 4223                                         /* reset by USE prep code */
 4224                3 LENGTH UBIN BYTE CALIGNED,
 4225                                         /* length of data returned */
 4226                3 VISUAL_ATTRIBUTE UBIN BYTE CALIGNED,
 4227                                         /* ABStractGRPhicRNDition goop */
 4228                3 FLDID UBIN,
 4229                                         /* VDH FLDID for this elementary
 4230                                            field */
 4231                3 DATA$ PTR,
 4232                                         /* ptr to the real data */
 4233              2 OPERATION,
 4234                3 IS_OPERATE BIT(1) UNAL,
 4235                                         /* do something */
 4236                3 IS_VISUAL_ATTRIBUTE_CHANGE BIT(1) UNAL,
 4237                                         /* change the VISUAL-ATTRIBUTE
 4238                                            while yer at it */
 4239                3 IS_DONE BIT(1) UNAL,
 4240                                         /* did something */
 4241              2 FPL_ERROR BIT(1) UNAL,
 4242                                         /* internally detected oops */
 4243              2 USE_STUFF UBIN(4) UNAL;
 4244                                         /* cleared field for
 4245                                            USE prep code */
 4246
 4247          %END_MACRO;
 4248
 4249        %MEND;
 4250
 4251      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        142  
 4252      /*
 4253                     %%%%%%%%% %%%%%%%   %%%%%%%%%
 4254                     %%%%%%%%% %%%%%%%%  %%%%%%%%%
 4255                     %%        %%     %%    %%%
 4256                     %%        %%     %%    %%%
 4257                     %%%%%     %%%%%%%%     %%%     %%%%%%%%
 4258                     %%        %%%%%%%      %%%    %%
 4259                     %%        %%           %%%     %%%%%%%
 4260                     %%        %%           %%%           %%
 4261                     %%        %%           %%%    %%%%%%%%
 4262                                                                          */
 4263
 4264      /*D* NAME:         QI_FPTS
 4265           PURPOSE:      To house STCLASS = CONSTANT copies of monitor
 4266                         service FPTs.
 4267           DESCRIPTION:  FPTs with STCLASS = CONSTANT get generated here
 4268                         with as many options as possible specified at
 4269                         compile time.  The names of these FPTs are
 4270                         generally QI_FPT_whatever.  Routines referencing
 4271                         these FPTs fill in STCLASS = AUTO FPTs with them.
 4272                         The QI_FPTS macro isn't included in QI$ALL
 4273                         so that not all modules need %INCLUDE LCP_6;.
 4274      */
 4275
 4276        %MACRO QI_FPT_CLOSE ( STCLASS = "SYMREF",
 4277                              NAME = QI_FPT_CLOSE );
 4278
 4279          %BEGIN_MACRO ( STCLASS = STCLASS );
 4280
 4281        %FPT_CLOSE ( FPTN = NAME,
 4282                     STCLASS = STCLASS,
 4283                     DCB = NIL,
 4284                     DISP = KEEP );
 4285
 4286          %END_MACRO;
 4287
 4288        %MEND;
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        143  
 4289
 4290        %MACRO QI_FPT_DBCONTROL ( STCLASS = "SYMREF",
 4291                                  NAME = QI_FPT_DBCONTROL );
 4292
 4293          %BEGIN_MACRO ( STCLASS = STCLASS );
 4294
 4295        %FPT_DBCONTROL ( FPTN = NAME,
 4296                         STCLASS = STCLASS );
 4297
 4298          %END_MACRO;
 4299
 4300        %MEND;
 4301
 4302        %MACRO QI_FPT_DCLFLD ( STCLASS = "SYMREF",
 4303                               NAME = QI_FPT_DCLFLD );
 4304
 4305          %BEGIN_MACRO ( STCLASS = STCLASS );
 4306
 4307        %FPT_DCLFLD ( FPTN = NAME,
 4308                      STCLASS = STCLASS,
 4309                      DCB = NIL );
 4310
 4311          %END_MACRO;
 4312
 4313        %MEND;
 4314
 4315        %MACRO QI_VLP_FLDATR ( STCLASS = "SYMREF",
 4316                               NAME = QI_VLP_FLDATR );
 4317
 4318          %BEGIN_MACRO ( STCLASS = STCLASS );
 4319
 4320        %VLP_FLDATR ( FPTN = NAME,
 4321                      STCLASS = STCLASS,
 4322                      ABSGRPRND = WARNING );
 4323
 4324          %END_MACRO;
 4325
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        144  
 4326        %MEND;
 4327
 4328        %MACRO QI_FPT_DEVICE ( STCLASS = "SYMREF",
 4329                               NAME = QI_FPT_DEVICE );
 4330
 4331          %BEGIN_MACRO ( STCLASS = STCLASS );
 4332
 4333        %FPT_DEVICE ( FPTN = NAME,
 4334                      STCLASS = STCLASS,
 4335                      DCB = NIL );
 4336
 4337          %END_MACRO;
 4338
 4339        %MEND;
 4340
 4341        %MACRO QI_FPT_ERASE ( STCLASS = "SYMREF",
 4342                              NAME = QI_FPT_ERASE );
 4343
 4344          %BEGIN_MACRO ( STCLASS = STCLASS );
 4345
 4346        %FPT_ERASE ( FPTN = NAME,
 4347                     STCLASS = STCLASS,
 4348                     DCB = NIL,
 4349                     CNS = YES,
 4350                     PRT = YES );
 4351
 4352          %END_MACRO;
 4353
 4354        %MEND;
 4355
 4356        %MACRO QI_FPT_ERRMSG ( STCLASS = "SYMREF",
 4357                               NAME = QI_FPT_ERRMSG );
 4358
 4359          %BEGIN_MACRO ( STCLASS = STCLASS );
 4360
 4361        %FPT_ERRMSG ( FPTN = NAME,
 4362                      STCLASS = STCLASS,
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        145  
 4363                      INCLCODE = NO );
 4364
 4365          %END_MACRO;
 4366
 4367        %MEND;
 4368
 4369        %MACRO QI_FPT_EXIT ( STCLASS = "SYMREF",
 4370                             NAME = QI_FPT_EXIT );
 4371
 4372          %BEGIN_MACRO ( STCLASS = STCLASS );
 4373
 4374        %FPT_EXIT ( FPTN = NAME,
 4375                    STCLASS = STCLASS,
 4376                    STEPCC = G_SKIP# );
 4377
 4378          %END_MACRO;
 4379
 4380        %MEND;
 4381
 4382
 4383        %MACRO QI_FPT_FDS ( STCLASS = "SYMREF",
 4384                            NAME = QI_FPT_FDS );
 4385
 4386          %BEGIN_MACRO ( STCLASS = STCLASS );
 4387
 4388        %FPT_FDS ( FPTN = NAME,
 4389                   STCLASS = STCLASS,
 4390                   RESULTS = QI_VLP_SEGMENT );
 4391
 4392          %END_MACRO;
 4393
 4394        %MEND;
 4395
 4396        %MACRO QI_FPT_FDS_LOAD ( STCLASS = "SYMREF",
 4397                                 NAME = QI_FPT_FDS_LOAD );
 4398
 4399          %BEGIN_MACRO ( STCLASS = STCLASS );
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        146  
 4400
 4401        %FPT_FDS ( FPTN = NAME,
 4402                   STCLASS = STCLASS,
 4403                   RESULTS = QI_VLP_SEGMENT_LOAD );
 4404
 4405          %END_MACRO;
 4406
 4407        %MEND;
 4408
 4409        %MACRO QI_FPT_GDS ( STCLASS = "SYMREF",
 4410                            NAME = QI_FPT_GDS );
 4411
 4412          %BEGIN_MACRO ( STCLASS = STCLASS );
 4413
 4414        %FPT_GDS ( FPTN = NAME,
 4415                   STCLASS = STCLASS,
 4416                   RESULTS = QI_VLP_SEGMENT,
 4417                   NEXT = BIG,
 4418                   PAGES = 1 );
 4419
 4420          %END_MACRO;
 4421
 4422        %MEND;
 4423
 4424        %MACRO QI_VLP_SEGMENT ( STCLASS = "SYMREF",
 4425                                NAME = QI_VLP_SEGMENT );
 4426
 4427          %BEGIN_MACRO ( STCLASS = STCLASS );
 4428
 4429        %VLP_SEGMENT ( FPTN = NAME,
 4430                       STCLASS = STCLASS );
 4431
 4432          %END_MACRO;
 4433
 4434        %MEND;
 4435
 4436        %MACRO QI_FPT_GDS_BUFFER ( STCLASS = "SYMREF",
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        147  
 4437                                   NAME = QI_FPT_GDS_BUFFER );
 4438
 4439          %BEGIN_MACRO ( STCLASS = STCLASS );
 4440
 4441        %FPT_GDS ( FPTN = NAME,
 4442                   STCLASS = STCLASS,
 4443                   RESULTS = QI_VLP_SEGMENT_BUFFER,
 4444                   NEXT = LITTLE,
 4445                   PAGES = 4 );
 4446
 4447          %END_MACRO;
 4448
 4449        %MEND;
 4450
 4451        %MACRO QI_VLP_SEGMENT_BUFFER ( STCLASS = "SYMREF",
 4452                                       NAME = QI_VLP_SEGMENT_BUFFER );
 4453
 4454          %BEGIN_MACRO ( STCLASS = STCLASS );
 4455
 4456        %VLP_SEGMENT ( FPTN = NAME,
 4457                       STCLASS = STCLASS );
 4458          %END_MACRO;
 4459
 4460        %MEND;
 4461
 4462        %MACRO QI_FPT_GDS_LOAD ( STCLASS = "SYMREF",
 4463                                 NAME = QI_FPT_GDS_LOAD );
 4464
 4465          %BEGIN_MACRO ( STCLASS = STCLASS );
 4466
 4467        %FPT_GDS ( FPTN = NAME,
 4468                   STCLASS = STCLASS,
 4469                   RESULTS = QI_VLP_SEGMENT_LOAD,
 4470                   NEXT = LITTLE,
 4471                   PAGES = 1 );
 4472
 4473          %END_MACRO;
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        148  
 4474
 4475        %MEND;
 4476
 4477        %MACRO QI_VLP_SEGMENT_LOAD ( STCLASS = "SYMREF",
 4478                                     NAME = QI_VLP_SEGMENT_LOAD );
 4479
 4480          %BEGIN_MACRO ( STCLASS = STCLASS );
 4481
 4482        %VLP_SEGMENT ( FPTN = NAME,
 4483                       STCLASS = STCLASS );
 4484
 4485          %END_MACRO;
 4486
 4487        %MEND;
 4488        %MACRO QI_FPT_GLINEATTR ( STCLASS = "SYMREF",
 4489                                  NAME = QI_FPT_GLINEATTR );
 4490
 4491          %BEGIN_MACRO ( STCLASS = STCLASS );
 4492
 4493        %FPT_GLINEATTR ( FPTN = NAME,
 4494                         STCLASS = STCLASS,
 4495                         DCB = NIL );
 4496
 4497          %END_MACRO;
 4498
 4499        %MEND;
 4500
 4501        %MACRO QI_FPT_INT ( STCLASS = "SYMREF",
 4502                            NAME = QI_FPT_INT );
 4503
 4504          %BEGIN_MACRO ( STCLASS = STCLASS );
 4505
 4506        %FPT_INT ( FPTN = NAME,
 4507                   STCLASS = STCLASS );
 4508
 4509          %END_MACRO;
 4510
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        149  
 4511        %MEND;
 4512
 4513        %MACRO QI_FPT_LDTRC ( STCLASS = "SYMREF",
 4514                              NAME = QI_FPT_LDTRC );
 4515
 4516          %BEGIN_MACRO ( STCLASS = STCLASS );
 4517
 4518        %FPT_LDTRC ( FPTN = NAME,
 4519                     STCLASS = STCLASS,
 4520                     DISP = KEEP );
 4521
 4522          %END_MACRO;
 4523
 4524        %MEND;
 4525
 4526        %MACRO QI_FPT_MDFFLD ( STCLASS = "SYMREF",
 4527                               NAME = QI_FPT_MDFFLD );
 4528
 4529          %BEGIN_MACRO ( STCLASS = STCLASS );
 4530
 4531        %FPT_MDFFLD ( FPTN = NAME,
 4532                      STCLASS = STCLASS,
 4533                      DCB = NIL,
 4534                      SETGRPRND = YES );
 4535
 4536          %END_MACRO;
 4537
 4538        %MEND;
 4539
 4540        %MACRO QI_FPT_OPEN ( STCLASS = "SYMREF",
 4541                             NAME = QI_FPT_OPEN );
 4542
 4543          %BEGIN_MACRO ( STCLASS = STCLASS );
 4544
 4545        %FPT_OPEN ( FPTN = NAME,
 4546                    STCLASS = STCLASS,
 4547                    DCB = NIL,
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        150  
 4548                    DISP = KEEP,
 4549                    SCRUB = YES );
 4550
 4551          %END_MACRO;
 4552
 4553        %MEND;
 4554
 4555        %MACRO QI_FPT_PROMPT ( STCLASS = "SYMREF",
 4556                               NAME = QI_FPT_PROMPT );
 4557
 4558          %BEGIN_MACRO ( STCLASS = STCLASS );
 4559
 4560        %FPT_PROMPT ( FPTN = NAME,
 4561                      STCLASS = STCLASS,
 4562                      DCB = NIL,
 4563                      VFC = YES );
 4564
 4565          %END_MACRO;
 4566
 4567        %MEND;
 4568
 4569        %MACRO QI_FPT_READ ( STCLASS = "SYMREF",
 4570                             NAME = QI_FPT_READ );
 4571
 4572          %BEGIN_MACRO ( STCLASS = STCLASS );
 4573
 4574        %FPT_READ ( FPTN = NAME,
 4575                    STCLASS = STCLASS,
 4576                    DCB = NIL );
 4577
 4578          %END_MACRO;
 4579
 4580        %MEND;
 4581
 4582        %MACRO QI_VLP_CG ( STCLASS = "SYMREF",
 4583                           NAME = QI_VLP_CG );
 4584
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        151  
 4585          %BEGIN_MACRO ( STCLASS = STCLASS );
 4586
 4587        %VLP_CG ( FPTN = NAME,
 4588                  STCLASS = STCLASS );
 4589
 4590          %END_MACRO;
 4591
 4592        %MEND;
 4593
 4594        %MACRO QI_FPT_RLSFLD ( STCLASS = "SYMREF",
 4595                               NAME = QI_FPT_RLSFLD );
 4596
 4597          %BEGIN_MACRO ( STCLASS = STCLASS );
 4598
 4599        %FPT_RLSFLD ( FPTN = NAME,
 4600                      STCLASS = STCLASS,
 4601                      DCB = NIL );
 4602
 4603          %END_MACRO;
 4604
 4605        %MEND;
 4606
 4607        %MACRO QI_FPT_SLCFLD ( STCLASS = "SYMREF",
 4608                               NAME = QI_FPT_SLCFLD );
 4609
 4610          %BEGIN_MACRO ( STCLASS = STCLASS );
 4611
 4612        %FPT_SLCFLD ( FPTN = NAME,
 4613                      STCLASS = STCLASS,
 4614                      DCB = NIL );
 4615
 4616          %END_MACRO;
 4617
 4618        %MEND;
 4619
 4620        %MACRO QI_FPT_TIME ( STCLASS = "SYMREF",
 4621                             NAME = QI_FPT_TIME );
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        152  
 4622
 4623          %BEGIN_MACRO ( STCLASS = STCLASS );
 4624
 4625        %FPT_TIME ( FPTN = NAME,
 4626                    STCLASS = STCLASS,
 4627                    SOURCE = CLOCK,
 4628                    DEST = ANS );
 4629
 4630          %END_MACRO;
 4631
 4632        %MEND;
 4633
 4634        %MACRO QI_FPT_TRAP ( STCLASS = "SYMREF",
 4635                             NAME = QI_FPT_TRAP );
 4636
 4637          %BEGIN_MACRO ( STCLASS = STCLASS );
 4638
 4639        %FPT_TRAP ( FPTN = NAME,
 4640                    NTC = QI_VLP_TRAP_CONDITIONS,
 4641                    STCLASS = STCLASS );
 4642
 4643          %END_MACRO;
 4644
 4645        %MEND;
 4646
 4647        %MACRO QI_VLP_TRAP_CONDITIONS ( STCLASS = "SYMREF",
 4648                                        NAME = QI_VLP_TRAP_CONDITIONS );
 4649
 4650          %BEGIN_MACRO ( STCLASS = STCLASS );
 4651
 4652        %VLP_TRAP_CONDITIONS ( FPTN = NAME,
 4653                               NO_SIP = G_ENT_TRAP#,
 4654                               UNIMPL = G_ENT_TRAP#,
 4655                               REMOTE_DESC = G_ENT_TRAP#,
 4656                               PRIV = G_ENT_TRAP#,
 4657                               MEM_PROT = G_ENT_TRAP#,
 4658                               INT_UR = G_ENT_TRAP#,
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        153  
 4659                               PROG_ERR = G_ENT_TRAP#,
 4660                               EXT_UR = G_ENT_TRAP#,
 4661                               C_DBZ = G_ENT_TRAP#,
 4662                               C_SPEC = G_ENT_TRAP#,
 4663                               C_CHAR = G_ENT_TRAP#,
 4664                               STCLASS = STCLASS );
 4665
 4666          %END_MACRO;
 4667
 4668        %MEND;
 4669
 4670        %MACRO QI_FPT_TRMATTR ( STCLASS = "SYMREF",
 4671                                NAME = QI_FPT_TRMATTR );
 4672
 4673          %BEGIN_MACRO ( STCLASS = STCLASS );
 4674
 4675        %FPT_TRMATTR ( FPTN = NAME,
 4676                       STCLASS = STCLASS,
 4677                       DCB = NIL );
 4678
 4679          %END_MACRO;
 4680
 4681        %MEND;
 4682
 4683        %MACRO QI_FPT_TRMCTL ( STCLASS = "SYMREF",
 4684                               NAME = QI_FPT_TRMCTL );
 4685
 4686          %BEGIN_MACRO ( STCLASS = STCLASS );
 4687
 4688        %FPT_TRMCTL ( FPTN = NAME,
 4689                      STCLASS = STCLASS,
 4690                      DCB = NIL );
 4691
 4692          %END_MACRO;
 4693
 4694        %MEND;
 4695
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        154  
 4696        %MACRO QI_VLP_TRMCTL ( STCLASS = "SYMREF",
 4697                               NAME = QI_VLP_TRMCTL );
 4698
 4699          %BEGIN_MACRO ( STCLASS = STCLASS );
 4700
 4701        %VLP_TRMCTL ( FPTN = NAME,
 4702                      STCLASS = STCLASS );
 4703
 4704          %END_MACRO;
 4705
 4706        %MEND;
 4707
 4708        %MACRO QI_FPT_WAIT ( STCLASS = "SYMREF",
 4709                             NAME = QI_FPT_WAIT );
 4710
 4711          %BEGIN_MACRO ( STCLASS = STCLASS );
 4712
 4713        %FPT_WAIT ( FPTN = NAME,
 4714                    STCLASS = STCLASS );
 4715
 4716          %END_MACRO;
 4717
 4718        %MEND;
 4719
 4720        %MACRO QI_FPT_WRITE ( STCLASS = "SYMREF",
 4721                              NAME = QI_FPT_WRITE );
 4722
 4723          %BEGIN_MACRO ( STCLASS = STCLASS );
 4724
 4725        %FPT_WRITE ( FPTN = NAME,
 4726                     STCLASS = STCLASS,
 4727                     DCB = NIL );
 4728
 4729          %END_MACRO;
 4730
 4731        %MEND;
 4732
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        155  
 4733        %MACRO QI_FPT_XBREAK ( STCLASS = "SYMREF",
 4734                               NAME = QI_FPT_XBREAK );
 4735
 4736          %BEGIN_MACRO ( STCLASS = STCLASS );
 4737
 4738        %FPT_XBREAK ( FPTN = NAME,
 4739                      STCLASS = STCLASS,
 4740                      VLP_XBREAK = QI_VLP_XBREAK );
 4741
 4742          %END_MACRO;
 4743
 4744        %MEND;
 4745
 4746        %MACRO QI_VLP_XBREAK ( STCLASS = "SYMREF",
 4747                               NAME = QI_VLP_XBREAK );
 4748
 4749          %BEGIN_MACRO ( STCLASS = STCLASS );
 4750
 4751        %VLP_XBREAK ( FPTN = NAME,
 4752                      STCLASS = STCLASS );
 4753
 4754          %END_MACRO;
 4755
 4756        %MEND;
 4757
 4758      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        156  
 4759
 4760      /*
 4761                    %%% %%    %%% %%   %%%%%%  %% %%%%   %%%%%
 4762                    %% % %%  %%  %%%  %%       %%%%     %%   %%
 4763                    %% % %%  %%  %%%  %%       %%%      %%   %%
 4764                    %% % %%  %%  %%%  %%       %%       %%   %%
 4765                    %% % %%   %%% %%   %%%%%%  %%        %%%%%
 4766
 4767              %%                                          %%%
 4768                                                          %%%
 4769             %%%    %% %%%   %%   %%   %%%%%    %%%%%%     %%     %%%%%%
 4770              %%    %%%  %%  %%   %%  %%   %%  %%         %%     %%
 4771              %%    %%   %%   %% %%   %%   %%  %%                 %%%%%
 4772              %%    %%   %%    %%%    %%   %%  %%                     %%
 4773            %%%%%%  %%   %%     %      %%%%%    %%%%%%           %%%%%%
 4774                                                                          */
 4775
 4776        %MACRO QI$ALL ( STCLASS = "SYMREF" );
 4777
 4778          %BEGIN_MACRO ( STCLASS = STCLASS );
 4779
 4780          %QI$FPL;
 4781          %QI_CONTEXT ( STCLASS = STCLASS );
 4782          %QI$GENERAL;
 4783          %QI_GENERAL_CIPS ( STCLASS = STCLASS );
 4784          %QI$DYNAMIC;
 4785
 4786          %END_MACRO;
 4787
 4788        %MEND;
 4789
 4790        %MACRO QI$FPL;
 4791
 4792          %BEGIN_MACRO ( STCLASS = STCLASS );
 4793
 4794          %QI$OP_SEQUENCE;
 4795          %QI$OP_ABORT;
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        157  
 4796          %QI$OP_ACCEPT;
 4797          %QI$OP_ACTIVATE;
 4798          %QI$OP_ADD;
 4799          %QI$OP_ADDX;
 4800          %QI$OP_ALL_LITERAL;
 4801          %QI$OP_APPLY;
 4802          %QI$OP_CALL;
 4803          %QI$OP_CLEAR;
 4804          %QI$OP_CLOSE;
 4805          %QI$OP_CNVBBX;
 4806          %QI$OP_CNVBN;
 4807          %QI$OP_CNVBNX;
 4808          %QI$OP_CNVBPX;
 4809          %QI$OP_CNVNBT;
 4810          %QI$OP_CNVPBT;
 4811          %QI$OP_CNVPN;
 4812          %QI$OP_DISPLAY;
 4813          %QI$OP_DIV;
 4814          %QI$OP_DIVX;
 4815          %QI$OP_ENABLE;
 4816          %QI$OP_GOTO;
 4817          %QI$OP_GOTODP;
 4818          %QI$OP_IFCLS;
 4819          %QI$OP_IFCNDA;
 4820          %QI$OP_IFCNDN;
 4821          %QI$OP_IFINDR;
 4822          %QI$OP_IFRELA;
 4823          %QI$OP_IFRELG;
 4824          %QI$OP_IFRELN;
 4825          %QI$OP_INSPECT;
 4826          %QI$OP_JAZ;
 4827          %QI$OP_JND;
 4828          %QI$OP_LOAD;
 4829          %QI$OP_MOVA;
 4830          %QI$OP_MOVAE;
 4831          %QI$OP_MOVAJ;
 4832          %QI$OP_MOVB;
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        158  
 4833          %QI$OP_MOVBA;
 4834          %QI$OP_MOVDE;
 4835          %QI$OP_MOVG;
 4836          %QI$OP_MOVN;
 4837          %QI$OP_MOVNA;
 4838          %QI$OP_MOVNE;
 4839          %QI$OP_MOVNEA;
 4840          %QI$OP_MOVP;
 4841          %QI$OP_MOVPA;
 4842          %QI$OP_MULT;
 4843          %QI$OP_MULTX;
 4844          %QI$OP_OPEN;
 4845          %QI$OP_PERFM;
 4846          %QI$OP_PERFMT;
 4847          %QI$OP_READ_FORM;
 4848          %QI$OP_READ_TRAN;
 4849          %QI$OP_ROUND;
 4850          %QI$OP_STOP_PAUSE;
 4851          %QI$OP_STOP_RUN;
 4852          %QI$OP_SUB;
 4853          %QI$OP_SUBSCR;
 4854          %QI$OP_SUBX;
 4855          %QI$OP_VERI_PRES;
 4856          %QI$OP_WRITE_FORM;
 4857          %QI$OP_WRITE_TRAN;
 4858
 4859          %QI$INITIALIZATION_BLOCK;
 4860          %QI$CONDITION_CONTROL_BLOCK;
 4861          %QI$CONDITION_LEGAL_BLOCK;
 4862          %QI$PSEUDO_CIP;
 4863          %QI$CIP;
 4864          %QI$DAD;
 4865          %QI$COBOL_DAD;
 4866          %QI$COBOL_DAD_P_BITS;
 4867          %QI$COBOL_DAD_P_ITEMS;
 4868          %QI$LINKAGE_ARGUMENT_DESCRIPTOR;
 4869          %QI$FIELD_DAD;
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        159  
 4870          %QI$FIELD_DAD_P;
 4871          %QI$MAJOR_NODE;
 4872          %QI$MINOR_NODE;
 4873          %QI$FILE;
 4874          %QI$FORM_FILE;
 4875          %QI$TRAN_FILE;
 4876          %QI$FRAME;
 4877          %QI$PICTURE_STRING;
 4878          %QI$NUMERIC_PICTURE_STRING;
 4879          %QI$ALPHANUMERIC_PICTURE_STRING;
 4880
 4881          %QI$TERMINAL_ATTRIBUTES;
 4882          %QI$ACTIVATION_STATUS;
 4883          %QI$PERFORM_BLOCK;
 4884          %QI$INDICATORS;
 4885          %QI$FIELD_STATUS;
 4886          %QI$MAJOR_STATUS;
 4887          %QI$MINOR_STATUS;
 4888          %QI$FILE_STATUS;
 4889          %QI$FORM_STATUS;
 4890          %QI$TRAN_STATUS;
 4891          %QI$FRAME_STATUS;
 4892
 4893          %END_MACRO;
 4894
 4895        %MEND;
 4896
 4897        %MACRO QI_CONTEXT ( STCLASS = "SYMREF" );
 4898
 4899          %BEGIN_MACRO ( STCLASS = STCLASS );
 4900
 4901          %QI_1 ( STCLASS = STCLASS );
 4902          %QI_SWORK ( STCLASS = STCLASS );
 4903          %QI_SWORK_2 ( STCLASS = STCLASS );
 4904          %QI_BLANK ( STCLASS = STCLASS );
 4905          %QI_MAT_MATCH ( STCLASS = STCLASS );
 4906          %QI_MAT_NONMATCH ( STCLASS = STCLASS );
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        160  
 4907          %QI_SLASH ( STCLASS = STCLASS );
 4908          %QI_ZERO ( STCLASS = STCLASS );
 4909          %QI_BINARY_ZERO ( STCLASS = STCLASS );
 4910          %QI_CLASS_ALPHA ( STCLASS = STCLASS );
 4911          %QI_CLASS_NUMERIC ( STCLASS = STCLASS );
 4912          %QI_OVERPUNCHED_SIGNS ( STCLASS = STCLASS );
 4913          %QI_ZERO_ACCUMULATOR ( STCLASS = STCLASS );
 4914          %QGB_PARAM ( STCLASS = STCLASS );
 4915
 4916          %END_MACRO;
 4917
 4918        %MEND;
 4919
 4920        %MACRO QI$GENERAL;
 4921
 4922          %BEGIN_MACRO ( STCLASS = STCLASS );
 4923
 4924          %QI$GENERAL_BASED;
 4925
 4926          %END_MACRO;
 4927
 4928        %MEND;
 4929
 4930        %MACRO QI_GENERAL_CIPS ( STCLASS = "SYMREF" );
 4931
 4932          %BEGIN_MACRO ( STCLASS = STCLASS );
 4933
 4934          /* QI@CIP_OPERATION stuff.... */
 4935          %QI@ALR ( STCLASS = STCLASS,
 4936                    NAME = QI_ALR );
 4937          %QI@TYPE_DISPLAY_SOURCE ( STCLASS = STCLASS,
 4938                                    NAME = QI_TYPE_DISPLAY_SOURCE );
 4939          %QI@TYPE_DISPLAY_TARGET ( STCLASS = STCLASS,
 4940                                    NAME = QI_TYPE_DISPLAY_TARGET );
 4941          %QI@TYPE_BINARY_TARGET ( STCLASS = STCLASS,
 4942                                   NAME = QI_TYPE_BINARY_TARGET );
 4943          %QI@SRCH_VRFY ( STCLASS = STCLASS,
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        161  
 4944                          NAME = QI_SRCH_VRFY );
 4945          %QI@MAT ( STCLASS = STCLASS,
 4946                    NAME = QI_MAT );
 4947
 4948          /* QI_CIP_DESCRIPTOR stuff.... */
 4949          %QI@4_CHAR_ALPHANUMERIC ( STCLASS = STCLASS,
 4950                                    NAME = QI_4_CHAR_ALPHANUMERIC );
 4951          %QI@31_DIGIT_SLS_DISPLAY ( STCLASS = STCLASS,
 4952                                    NAME = QI_31_DIGIT_SLS_DISPLAY );
 4953          %QI@16_BIT_BINARY ( STCLASS = STCLASS,
 4954                              NAME = QI_16_BIT_BINARY );
 4955          %QI@32_BIT_BINARY ( STCLASS = STCLASS,
 4956                              NAME = QI_32_BIT_BINARY );
 4957          %QI@31_DIGIT_ST_PACKED ( STCLASS = STCLASS,
 4958                                   NAME = QI_31_DIGIT_ST_PACKED );
 4959          %QI@PICTURE_STRING ( STCLASS = STCLASS,
 4960                               NAME = QI_PICTURE_STRING );
 4961          %QI@ACCUMULATOR_DAD ( STCLASS = STCLASS,
 4962                                NAME = QI_ACCUMULATOR_DAD );
 4963
 4964          %END_MACRO;
 4965
 4966        %MEND;
 4967
 4968        %MACRO QI$DYNAMIC ( STCLASS = STCLASS );
 4969
 4970          %BEGIN_MACRO ( STCLASS = STCLASS );
 4971
 4972          %QI$GZ_HEADER;
 4973          %QI$GZ_FIELD;
 4974
 4975          %END_MACRO;
 4976
 4977        %MEND;
 4978
 4979        %MACRO QI_FPTS ( STCLASS = "SYMREF" );
 4980
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        162  
 4981          %BEGIN_MACRO ( STCLASS = STCLASS );
 4982
 4983          %QI_FPT_CLOSE ( STCLASS = STCLASS );
 4984          %QI_FPT_DBCONTROL ( STCLASS = STCLASS );
 4985          %QI_FPT_DCLFLD ( STCLASS = STCLASS );
 4986          %QI_VLP_FLDATR ( STCLASS = STCLASS );
 4987          %QI_FPT_DEVICE ( STCLASS = STCLASS );
 4988          %QI_FPT_ERASE ( STCLASS = STCLASS );
 4989          %QI_FPT_ERRMSG ( STCLASS = STCLASS );
 4990          %QI_FPT_EXIT ( STCLASS = STCLASS );
 4991          %QI_FPT_FDS ( STCLASS = STCLASS );
 4992          %QI_FPT_FDS_LOAD ( STCLASS = STCLASS );
 4993          %QI_FPT_GDS ( STCLASS = STCLASS );
 4994          %QI_VLP_SEGMENT ( STCLASS = STCLASS );
 4995          %QI_FPT_GDS_BUFFER ( STCLASS = STCLASS );
 4996          %QI_VLP_SEGMENT_BUFFER ( STCLASS = STCLASS );
 4997          %QI_FPT_GDS_LOAD ( STCLASS = STCLASS );
 4998          %QI_VLP_SEGMENT_LOAD ( STCLASS = STCLASS );
 4999          %QI_FPT_GLINEATTR ( STCLASS = STCLASS );
 5000          %QI_FPT_INT ( STCLASS = STCLASS );
 5001          %QI_FPT_LDTRC ( STCLASS = STCLASS );
 5002          %QI_FPT_MDFFLD ( STCLASS = STCLASS );
 5003          %QI_FPT_OPEN ( STCLASS = STCLASS );
 5004          %QI_FPT_PROMPT ( STCLASS = STCLASS );
 5005          %QI_FPT_READ ( STCLASS = STCLASS );
 5006          %QI_VLP_CG ( STCLASS = STCLASS );
 5007          %QI_FPT_RLSFLD ( STCLASS = STCLASS );
 5008          %QI_FPT_SLCFLD ( STCLASS = STCLASS );
 5009          %QI_FPT_TIME ( STCLASS = STCLASS );
 5010          %QI_FPT_TRAP ( STCLASS = STCLASS );
 5011          %QI_VLP_TRAP_CONDITIONS ( STCLASS = STCLASS );
 5012          %QI_FPT_TRMATTR ( STCLASS = STCLASS );
 5013          %QI_FPT_TRMCTL ( STCLASS = STCLASS );
 5014          %QI_VLP_TRMCTL ( STCLASS = STCLASS );
 5015          %QI_FPT_WAIT ( STCLASS = STCLASS );
 5016          %QI_FPT_WRITE ( STCLASS = STCLASS );
 5017          %QI_FPT_XBREAK ( STCLASS = STCLASS );
15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        163  
 5018          %QI_VLP_XBREAK ( STCLASS = STCLASS );
 5019
 5020          %END_MACRO;
 5021
 5022        %MEND;
 5023
 5024      %EJECT;

15:13 JUL 28 '97 QI_MACROS_M.:E05SI                                        164  
 5025
 5026        %MACRO BEGIN_MACRO ( STCLASS = "QI#HUH" );
 5027
 5028          %SET LISTDIR = '0'B;
 5029          %SET LISTEXP = '1'B;
 5030          %SET LISTSUB = '1'B;
 5031
 5032
 5033          %LSET QI#STCLASS = CONCAT(TEXTCHAR(STCLASS),'        ');
 5034
 5035          %IF (SUBSTR(QI#STCLASS,0,6) = 'STATIC')
 5036           OR (SUBSTR(QI#STCLASS,0,8) = 'CONSTANT')
 5037           OR (SUBSTR(QI#STCLASS,0,3) = 'EXT');
 5038            %SET INIT = CHARTEXT('INIT');
 5039          %ELSE;
 5040            %SET INIT = CHARTEXT('/* Was INIT''ed to:  ');
 5041          %ENDIF;
 5042
 5043          %SET QI#MACRO_DEPTH = QI#MACRO_DEPTH + 1;
 5044
 5045        %MEND;
 5046
 5047        %MACRO END_MACRO;
 5048
 5049          %SET QI#MACRO_DEPTH = QI#MACRO_DEPTH - 1;
 5050
 5051          %IF QI#MACRO_DEPTH = 0;
 5052            %SET LISTEXP = '0'B;
 5053            %SET LISTSUB = '0'B;
 5054            %SET LISTDIR = '1'B;
 5055          %ENDIF;
 5056
 5057        %MEND;

