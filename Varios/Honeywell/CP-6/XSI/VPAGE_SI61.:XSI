/*M* PAGE - Page control routines for CRT type terminals */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* CCC,DMR,PLM=5,IND=5,CSU=3,EXM=0,ECU=3,MOC,DCI=5,CRT=5 */
 
/*P*
     NAME: VPAGE.X
     PURPOSE:
          The VPAGE routines will save screen images so that when something on
          the screen is updated, they will figure out if it is more economical
          to do cursor positioning or to just redraw the line.
     DESCRIPTION:
          If the cursor has to move more than three positions, it is faster to
          do a cursor position than to rewrite the three positions.
     REFERENCE:
          For additional information refer to Harold Price or Gary Palmer.
*/
/*F*
     NAME: VINIT
     PURPOSE:
          VINIT initializes the screen image in the memory of the VPAGE
          routines.
     DESCRIPTION:
          Given the height and width of the screen, VINIT initializes the
          screen to all blanks.
*/
/*I*
     NAME: VINIT
     PURPOSE:
          Initialize vpage screen.
     CALL:
          CALL VINIT (   WIDTH,HEIGHT);
     PARAMETERS:
          WIDTH-The width of the screen.
          HEIGHT-The height of the screen.
     DATA:
          Along with clearing the screen, VINIT also sets up some default
          values for the origin and maximum displacement from the origin.  The
          defaults are:
 
          ORIGIN (0,0)
          MAXIMUM DISPLACEMENT (79,23)
 
          All coordinates are given in terms of (X,Y).
     DESCRIPTION:
          None.
*/
/*I*
     NAME: VCURSOR
     PURPOSE:
          Positions the cursor anywhere on the page.
     CALL:
          CALL VCURSOR (X,Y);
     PARAMETERS:
          X -The X coordinate of where we want the cursor positioned.
          Y -The Y coordinate of where we want the cursor positioned.
     DESCRIPTION:
          Will set the X and Y coordinates to where specified, unless they
          exceed the maximum displacement (79,23) in which case the value will
          be truncated to the maximum.
          The screen will not be affected, only the virtual location of X and Y.
*/
/*I*
     NAME: VCLEAR
     PURPOSE:
          Clears the virtual window.
     CALL:
          CALL VCLEAR;
     DESCRIPTION:
          Will put blanks in the entire virtual window.  Screen will not be
          affected.
*/
/*I*
     NAME: VCLEARL
     PURPOSE:
          To clear to the end of the virtual line.
     CALL:
          CALL VCLEARL;
     DATA:
          None.
     DESCRIPTION:
          Will put blanks to the end of the virtual line.
*/
/*I*
     NAME: VWINDOW
     PURPOSE:
          To set the window on the virtual page.  The page is the screen, the
          window is the area we keep track of with these routines.
     CALL:
          CALL VWINDOW (ORIGINX,ORIGINY,MAXOFFSETX,MAXOFFSETY);
     PARAMETERS:
          ORIGINX -A relative starting X value, also can be considered the
                     X value of the window origin.
          ORIGINY -A relative starting Y value, also can be considered the
                     Y value of the window origin.
          MAXOFFSETX -The largest X displacement from the origin which will
                        fit into the virtual window.
          MAXOFFSETY -The largest Y displacement from the origin which will
                        fit into the virtual window.
     DESCRIPTION:
          This routine sets the location and size of the virtual window.  The
          defaults are to start at the origin (0,0) and have the upper bounds
          be (79,23).  An example of a call to this routine follows.  It will
          set up a virtual window with the origin at (5,10) and the four points
          which will frame the window will be: (5,10) (17,10) (5,28) (17,28)
 
          CALL VWINDOW (5,10,12,18)
*/
/*I*
     NAME: VWHAT
     PURPOSE:
          To return to the user all the settings of the VPAGE routines.  This
          routine will return the coordinates of the origin, the values of the
          maximum X and Y offsets from the origin (see VWINDOW), and the
          current values of X and Y for the current cursor position.
     CALL:
          CALL VWHAT (ORIGINX,ORIGINY,MAXOFFX,MAXOFFY,CURSORX,CURSORY);
     PARAMETERS:
          ORIGINX -The origins X coordinate value.
          ORIGINY -The origins Y coordinate value.
          MAXOFFX -The maximum X offset from the origin, within the window.
          MAXOFFY -The maximum Y offset from the origin, within the window.
          CURSORX -The X coordinate of the current cursor location.
          CURSORY -The Y coordinate of the current cursor location.
     DATA:
          None.
     DESCRIPTION:
          This routine solely returns the values of the parameter list.
*/
/*I*
     NAME: VWRITE
     PURPOSE:
          Move data into the virtual page, optionally move the cursor first.
     CALL:
          CALL VWRITE (BUFFER,LENGTH [,X,Y])
     PARAMETERS:
          BUFFER -The buffer containing the new data to be written to the
                  virtual window.
          LENGTH -The length of the buffer.
          X      -The optionally specified X value of where in the virtual
                  window the buffer is to be written.
          Y      -The optionally specified Y value of where in the virtual
                  window the buffer is to be written.
     DATA:
          None.
     DESCRIPTION:
          X or Y can be specified to locate the cursor in the virtual window.
          If only Y is to be specified, use a blank for X as a place holder.
          Puts the buffer into the virtual window updating the memory resident
          picture of the screen.  This routine does not change the physical
          screen.  The buffer is placed where the last VCURSOR call set the
          coordinates to, or if the X and Y are specified for this call, that
          is where the buffer is placed.  If X and Y are specified in this
          call, they update the X and Y of where the cursor was.  In other
          words, this X and Y will act as a most recent call to VCURSOR.
*/
/*I*
     NAME: VUPDATE
     PURPOSE:
          To actually update the screen.
     CALL:
          CALL VUPDATE;
     DATA:
          None.
     DESCRIPTION:
          This routine will actually change the physical screen.  VUPDATE will
          update the physical screen to look like the virtual screen.  Only
          Changes made to the virtual screen since the last call to VUPDATE
          will cause changes to the physical screen.  The other VPAGE routines
          will manipulate the virtual screen, when these manipulations are
          done, then the user should call VUPDATE.
*/
/*
Vinit   - initializes window and cursor values to 0, clears real
          and virtual pages.  This routine must be called before using
          any of the other v routines, or bad things will happen.
Vcursor - positions virtual cursor on page.  Call vcursor(x,y)
vwrite  - moves data into the virtual page, optionally moving
          virtual cursor first.
          Call vwrite(buf, len, [x, y])
vclear  - clears virtual window.
Vclearl - clears to end of virtual line
vwindow - set values for x and y that will be added to all other
          occurances of x and y, and defines maximum values for x and y,
          establishing a window on the virtual page.  Sets cursor to
          (0,0) relative to the new window.  Maxx and maxy are relative
          to the x and y established in the vwindow call, ie. (25,5,10,10)
          will set up a 10 by 10 window bound by (25,5) (35,5) (25,15) (35,15).
          The default window is (0,0,79,23).
          Call window(x,y,maxx,maxy)
vwhat   - returns current window x and y, max x and y, and current cursor
          position x and y (relative to window values).
          Call vwhat(windowx, windowy, maxx, maxy, x, y)
vupdate - updates real page with new information in the virtual
          page.  Only values that have changed since the previous
          call to vupdate will be written.
 
*/
VINIT: PROC (W,H);
DCL H UBIN;
DCL W UBIN;
%INCLUDE VPAGE_C61;
DCL CRT ENTRY(1);
DCL COPTON ENTRY;
DCL INITCRT ENTRY(2);
     IF ADDR(W) ~= ADDR(NIL)
     THEN DO;
          CALL INITCRT(W,H);
        END;
     CALL COPTON;
     INIT_CALLED = '1'B;
     OLDPAGE = ' ';
     NEWPAGE = ' ';
     CALL CRT(2);                       /* Clear and home */
     ALL_CLEAR = '1'B;
     WX=0;
     WY=0;
     X=0;
     Y=0;
     MAXX=79;
     MAXY=23;
     RETURN;
END VINIT;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
VCURSOR: PROC(IX, IY);
DCL IX UBIN;
DCL IY UBIN;
%INCLUDE VPAGE_C62;
     IF IX > MAXX THEN X=MAXX;
     ELSE X=IX;
     IF IY > MAXY THEN Y=MAXY;
     ELSE Y=IY;
     RETURN;
END VCURSOR;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
VCLEAR: PROC;
%INCLUDE VPAGE_C62;
DCL I UBIN;
DCL BUF CHAR(LEN) BASED;
DCL LEN UBIN;
DCL PTR$ PTR;
 
     IF WX = 0
       AND WY = 0
       AND MAXX = 79
       AND MAXY = 23
     THEN DO;
          NEWPAGE = ' ';
          ALL_CLEAR = '1'B;
          RETURN;
        END;
 
     DO I = 0 TO MAXY;
          LEN=MAXX;
          PTR$ = PINCRC(ADDR(NEWPAGE), (I+WY)*80 + WX);
          PTR$->BUF = ' ';
        END;
     RETURN;
VCLEARL: ENTRY;
     PTR$ = PINCRC(ADDR(NEWPAGE), (WY+Y)*80 + WX+X);
     LEN = MAXX-X+1;
     PTR$->BUF = ' ';
     RETURN;
END VCLEAR;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
VWINDOW: PROC (IWX, IWY, IMAXX, IMAXY);
DCL IWX UBIN;
DCL IWY UBIN;
DCL IMAXX UBIN;
DCL IMAXY UBIN;
%INCLUDE VPAGE_C62;
     IF IWX > 79 THEN WX=79;
     ELSE WX=IWX;
     IF IWY > 23 THEN WY=23;
     ELSE WY=IWY;
     IF IMAXX > 79 THEN MAXX = 79-WX;
     ELSE MAXX = IMAXX-WX;
     IF IMAXY> 23 THEN MAXY = 23-WY;
     ELSE MAXY = IMAXY-WY;
     X=0;
     Y=0;
     RETURN;
END VWINDOW;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
VWHAT: PROC (IWX, IWY, IMAXX, IMAXY, IX, IY);
DCL IWX UBIN;
DCL IWY UBIN;
DCL IMAXX UBIN;
DCL IMAXY UBIN;
DCL IX UBIN;
DCL IY UBIN;
%INCLUDE VPAGE_C62;
                                        /**/
     IF ADDR(IWX)~=ADDR(NIL) THEN IWX = WX;
     IF ADDR(IWY)~=ADDR(NIL) THEN IWY = WY;
     IF ADDR(IMAXX)~=ADDR(NIL) THEN IMAXX = MAXX;
     IF ADDR(IMAXY)~=ADDR(NIL) THEN IMAXY = MAXY;
     IF ADDR(IX)~=ADDR(NIL) THEN IX = X;
     IF ADDR(IY)~=ADDR(NIL) THEN IY = Y;
     RETURN;
END VWHAT;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
VWRITE: PROC (BUF, ILEN, IX, IY);
DCL BUF CHAR(LEN);
DCL ILEN UBIN;
DCL IX UBIN;
DCL IY UBIN;
DCL LEN UBIN;
DCL PTR$ PTR;
DCL MBUF CHAR(LEN) BASED;
%INCLUDE VPAGE_C62;
     IF ADDR(IX) ~= ADDR(NIL)
     THEN DO;
          IF IX > MAXX THEN X = MAXX;
          ELSE X=IX;
        END;
     IF ADDR(IY) ~= ADDR(NIL)
     THEN DO;
          IF IY > MAXY THEN Y=MAXY;
          ELSE Y=IY;
        END;
     IF ILEN > MAXX - X + 1 THEN LEN = MAXX - X + 1;
     ELSE LEN = ILEN;
     PTR$ = PINCRC(ADDR(NEWPAGE), (Y+WY)*80 + WX + X);
     PTR$->MBUF = BUF;
     X = X+LEN;
     IF X > MAXX THEN X=MAXX;
     ALL_CLEAR = '0'B;
     RETURN;
END VWRITE;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
VUPDATE: PROC;
%INCLUDE VPAGE_C62;
DCL I UBIN STATIC;
DCL N$ PTR STATIC;
DCL J UBIN STATIC;
DCL K UBIN STATIC;
DCL L UBIN STATIC;
DCL LL UBIN STATIC;
DCL O$ PTR STATIC;
DCL LEN UBIN STATIC;
DCL SLEN UBIN STATIC;
DCL HIT UBIN STATIC;
DCL FI UBIN STATIC INIT(0);
DCL FIELDE(0:160) UBIN STATIC UNAL;
DCL FIELDS(0:160) UBIN STATIC UNAL;
DCL FIELDC(0:160) UBIN STATIC UNAL;
DCL OLD(0:79) CHAR(1) BASED(O$);
DCL NEW(0:79) CHAR(1) BASED(N$);
DCL CHAR80 CHAR(80) BASED;
DCL CHAR1 CHAR(1) BASED;
DCL CHARN CHAR(SLEN) BASED;
DCL ODD BIT(18) CONSTANT INIT('033064'O);
DCL NORM BIT(18) CONSTANT INIT('033063'O);
/**/
/**/
/**/
DCL URTBL (0:511) CHAR(1) CONSTANT
     INIT(
          ' '*9,BITASC('011'O),' '*23,
          '!','"','#','$','%','&','''','(',')',
          '*','+',',','-','.','/','0','1','2','3','4','5',
          '6','7','8','9',':',';','<','=','>','?','@','A',
          'B','C','D','E','F','G','H','I','J','K','L','M',
          'N','O','P','Q','R','S','T','U','V','W','X','Y',
          'Z','[','\',']','^','_','`','a','b','c','d','e',
          'f','g','h','i','j','k','l','m','n','o','p','q','r',
          's','t','u','v','w','x','y','z','{','|','}','~',' ',
          ' '*9,BITASC('011'O),' '*23,
          '!','"','#','$','%','&','''','(',')',
          '*','+',',','-','.','/','0','1','2','3','4','5',
          '6','7','8','9',':',';','<','=','>','?','@','A',
          'B','C','D','E','F','G','H','I','J','K','L','M',
          'N','O','P','Q','R','S','T','U','V','W','X','Y',
          'Z','[','\',']','^','_','`','a','b','c','d','e',
          'f','g','h','i','j','k','l','m','n','o','p','q','r',
          's','t','u','v','w','x','y','z','{','|','}','~',' ',
          ' '*9,BITASC('011'O),' '*23,
          '!','"','#','$','%','&','''','(',')',
          '*','+',',','-','.','/','0','1','2','3','4','5',
          '6','7','8','9',':',';','<','=','>','?','@','A',
          'B','C','D','E','F','G','H','I','J','K','L','M',
          'N','O','P','Q','R','S','T','U','V','W','X','Y',
          'Z','[','\',']','^','_','`','a','b','c','d','e',
          'f','g','h','i','j','k','l','m','n','o','p','q','r',
          's','t','u','v','w','x','y','z','{','|','}','~',' ',
          ' '*9,BITASC('011'O),' '*23,
          '!','"','#','$','%','&','''','(',')',
          '*','+',',','-','.','/','0','1','2','3','4','5',
          '6','7','8','9',':',';','<','=','>','?','@','A',
          'B','C','D','E','F','G','H','I','J','K','L','M',
          'N','O','P','Q','R','S','T','U','V','W','X','Y',
          'Z','[','\',']','^','_','`','a','b','c','d','e',
          'f','g','h','i','j','k','l','m','n','o','p','q','r',
          's','t','u','v','w','x','y','z','{','|','}','~',' ');
/**/
/**/
/**/
DCL CURSOR ENTRY(2);
DCL WRITE ENTRY(2);
DCL CRT ENTRY(1);
DCL CRTFLUSH ENTRY;
     CALL XLATE (NEWPAGE, URTBL, NEWPAGE);
     FIELDE = '0'B;
     FIELDC = '0'B;
     FI=0;
     IF ALL_CLEAR
     THEN CALL CRT(2);
     ELSE DO I = 0 TO 23;
          O$ = PINCRC(ADDR(OLDPAGE), I*80);
          N$ = PINCRC(ADDR(NEWPAGE), I*80);
          IF N$->CHAR80 = O$->CHAR80 THEN GOTO NEXT;
          DO J=0 TO 79;
               IF OLD(J) ~= NEW(J)
               THEN DO;
                    HIT=J;
                    LEN=1;
                    DO K=J+1 TO 79;
                         IF OLD(K) = NEW(K)
                         THEN DO;
                              /* Having found one that changed, we now look for
                              one that's the same, or the end of the line.  If
                              we find a match, look 3 ahead, the point at which
                              it becomes faster to position the cursor instead
                              of printing.  If we find a different one within
                              that range, its cheaper to keep on printing, so
                              reset the current scan position (j) and continue
                              scan.  If they're all the same, its cheaper to
                              reposition cursor.  */
                              IF K > 75 THEN LL=79;
                              ELSE LL=K+1+3;
                              DO L=K+1 TO LL;
                                   IF OLD(L) ~= NEW(L) THEN GOTO CONTINUE; /* Cheaper to continue writing */
                                 END;
                              GOTO END_BLOCK; /* Cheaper to move cursor */
CONTINUE:                     K=L;
                              LEN=K-HIT;
                            END;
                         LEN=LEN+1;
                       END;
END_BLOCK:
                    CALL CURSOR(HIT, I);
                    IF HIT < 78
                    THEN DO;            /* Check for all space to end of line */
                         SLEN = 79-HIT+1;
                         IF ADDR(NEW(HIT))->CHARN = ' '
                         THEN DO;
                              CALL CRT(5);
                              CALL CWRITE(HIT, LEN);
                              LEN=SLEN;
                            END;
                         ELSE DO; /* Look for blank from end of string to end of line
                         and contiguous blank on end of string */
                              SLEN=80-(HIT+LEN);
                              IF HIT < 77 AND (SLEN=0 OR ADDR(NEW(HIT+LEN))->CHARN = ' ')
                              THEN DO;
                                   SLEN=0;
                                        /* Do L=HIT+LEN-1 to hit by -1 */
                                   L=HIT+LEN-1;
DOIT:                              IF NEW(L) = ' ' THEN SLEN=SLEN+1;
                                   ELSE GOTO OUT;
                                   L=L-1;
                                   IF L >= HIT THEN GOTO DOIT;
OUT:                               IF SLEN > 2 /* Found enuff to make it
                                        faster to write then clear */
                                   THEN DO;
                                        CALL IWRITE(HIT, L-HIT+1);
                                        CALL CRT(5);
                                        CALL CWRITE(HIT, LEN);
                                        J=79;
                                      END;
                                   ELSE CALL IWRITE(HIT, LEN);
                                 END;
                              ELSE CALL IWRITE(HIT, LEN);
                            END;
                       END;
                    ELSE CALL IWRITE(HIT, LEN);
                    J=J+LEN;
                  END;                  /* Not equal */
             END;                       /* Do line */
NEXT:
        END;                            /* Do page */
     CALL CURSOR(X,Y);
     CALL CRTFLUSH;
     OLDPAGE=NEWPAGE;
     RETURN;
IWRITE: PROC(A,B);
DCL A UBIN;
DCL B UBIN;
DCL M UBIN STATIC;
DCL START UBIN STATIC;
     IF INVERS
     THEN DO;
          M=A;
          DO WHILE (M ~= 0);
               IF OLD(M) = ' ' AND NEW(M) = ' ' THEN GOTO O1;
               M = M - 1;
             END;
O1:       START=M;
          M = A +B;
          DO WHILE (M < 79);
               IF OLD(M) = ' ' AND NEW(M) = ' ' THEN GOTO O2;
               M = M + 1;
             END;
O2:
          FIELDS(FI) = START;
          FIELDE(FI) = M-START+1;
          FIELDC(FI) = I;
          FI=FI+1;
          CALL CURSOR(START, I);
          CALL CRT(V_INVERT);
          CALL WRITE(NEW(START), M-START+1);
          CALL CRT(V_NORMAL);
          J = M;
        END;
     ELSE CALL WRITE(NEW(A), B);
     RETURN;
END IWRITE;
CWRITE: PROC(A,B);
DCL A UBIN;
DCL B UBIN;
DCL M UBIN STATIC;
DCL START UBIN STATIC;
     IF INVERS THEN DO;
          M = A;
          DO WHILE (M ~= 0);
               IF OLD(M) = ' ' AND NEW(M) = ' ' THEN GOTO O1;
               M=M-1;
             END;
O1:
          START = M;
          M = B + A;
          DO WHILE (M > START);
               IF NEW(M) ~= ' ' THEN GOTO O2;
               M=M-1;
             END;
O2:
          CALL CURSOR(START, I);
          CALL WRITE(NEW(START), M-START+1);
          FIELDS(FI) = START;
          FIELDE(FI) = M-START+1;
          FIELDC(FI) = I;
          FI=FI+1;
        END;
     ELSE DO;
          CALL CURSOR(A,I);
          CALL WRITE (NEW(A),B);
        END;
     RETURN;
END CWRITE;
END VUPDATE;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
VINVERT: PROC (FLAG);
%INCLUDE VPAGE_C62;
DCL FLAG UBIN;
     RETURN;
END VINVERT;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
VOUTPUT: PROC( BUF_, F_FDS );
 
%INCLUDE XU_FORMAT_C;
%INCLUDE NK_VFC_C;
 
DCL BUF_ VECTOR;
 
DCL 1 BUF BASED CALIGNED,
      2 VFC BIT(9),
      2 TEXT CHAR(80);
%F_FDS(STCLASS="");
 
%NK$VFC;
 
DCL VWHAT ENTRY(6);
DCL VCURSOR ENTRY(2);
DCL VWRITE ENTRY(4);
 
DCL CURSORY UBIN;
 
     CALL VWHAT(,,,,,CURSORY);
 
     IF F_FDS.BUF_.BUF$->NK$VFC.FCN = %VFCF_SPB THEN DO;
                                        /* Vfc = space before print */
          CALL VCURSOR( 0, F_FDS.BUF_.BUF$->NK$VFC.COUNT + CURSORY);
        END;
 
     CALL VWRITE( F_FDS.BUF_.BUF$->BUF.TEXT, F_FDS.BUFX);
 
     IF F_FDS.BUF_.BUF$->NK$VFC.FCN = %VFCF_SPA THEN DO;
                                        /* Vfc = space after print */
          CALL VCURSOR( 0, F_FDS.BUF_.BUF$->NK$VFC.COUNT + CURSORY);
        END;
END /* Voutput */;
