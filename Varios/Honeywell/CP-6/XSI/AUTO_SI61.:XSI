/*M* AUTO - Mucks with B$JIT.DEFPRI, B$JIT.MAXPRI, B$JIT.MAXCORE */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* */
 
AUTO_MAIN: PROC MAIN;
 
%INCLUDE CP_6;
%INCLUDE B$JIT_C;
 
%B$JIT0;
%U$JIT1;
%M$JIT2;
%F$JIT3X;
%S$JIT4X;
%J$JIT5X;
%A$JIT6X;
 
%INCLUDE XU_MACRO_C;
%INCLUDE AUTO_C1;
 
DCL M$ME DCB;
 
%FPT_TIME (FPTN=FPT_TIME,
           STCLASS=CONSTANT,
           DEST=ANS,
           SOURCE=CLOCK,
           TIME=TIME_NOW);
 
%FPT_TIME (FPTN=HOW_BOUT_DAY,
           STCLASS=CONSTANT,
           DEST=LOCAL,
           SOURCE=CLOCK,
           DAY=DAY_F_WEEK);
 
%FPT_WRITE (FPTN=FPT_WRITE,
            STCLASS=STATIC,
            DCB=M$ME);
 
%P_PCB (NAME=P_PCB,
        STCLASS=STATIC,
        R=AUTO_CMDS,
        W=AUTO_WORK,
        WSZ="SIZEW(AUTO_WORK)",
        N#="LENGTHC(B$JIT.CCBUF)");
 
%PARSE$OUT (NAME=OUT$BLK,
            STCLASS=BASED);
%PARSE$SYM (NAME=OUT$SYM,
            STCLASS=BASED);
 
DCL 1 TEXT$C BASED ALIGNED,
      2 SIZE UBIN BYTE UNAL,
      2 TEXT CHAR(TEXT$C.SIZE);
 
DCL TIME_NOW CHAR(8) STATIC;
DCL IX SBIN WORD STATIC;
DCL DAY_F_WEEK CHAR(3) STATIC;
DCL BUMP BIT(1) STATIC ALIGNED INIT( '0'B );
DCL BUMPMEM BIT(1) STATIC ALIGNED INIT( '0'B );
DCL MAXMEM SBIN STATIC INIT ( -1 );
DCL DEFPRI SBIN STATIC INIT( -1 );
DCL MAXPRI SBIN STATIC INIT( -1 );
DCL AUTO_WORK(0:255) UBIN STATIC;
DCL BLK$ PTR STATIC;
DCL ERR$ PTR STATIC;
 
DCL 1 INTERVALS(0:1) CONSTANT SYMDEF,
      2 START CHAR(8) INIT( '00000000', '17300000' ),
      2 STOP CHAR(8) INIT(  '05300000', '23595999' );
DCL MAXBUMP SBIN WORD CONSTANT SYMDEF INIT ( 8 );
 
                                   /* L_W_D KNOWS WHEN ITS LEGAL_WHOLE_DAY    */
DCL 1 L_W_D(0:1) CHAR(3) UNAL CONSTANT SYMDEF INIT ('SAT','SUN');
 
DCL OK_DAYS_MEM(0:6) CHAR(3) UNAL CONSTANT SYMDEF
     INIT('mon','tue','wed','thu','fri','SAT','SUN');
 
DCL 1 OK_HOURS_MEM(0:1) CONSTANT SYMDEF,
      2 BEGIN_HRS CHAR(8) INIT( '00000000','18000000' ),
      2 END_HRS CHAR(8) INIT( '06000000','23595999' );
 
DCL MAX_CORE SBIN WORD CONSTANT SYMDEF INIT( 511 );
 
DCL B$JIT$ PTR SYMREF;
DCL AUTO_CMDS UBIN SYMREF;
 
DCL X$PARSE ENTRY(1) ALTRET;
 
%MACRO TEXT_C (NAME=NAME,T=' ');
DCL 1 NAME CONSTANT,
      2 * UBIN BYTE UNAL INIT( LENGTHC(T) ),
      2 * CHAR(0) INIT(T);
%MEND;
 
%TEXT_C (NAME=TOOBIGMEM,T='Specified UPMAXMEM greater than 511');
%TEXT_C (NAME=MAXMEM2SML,T='UPMAXMEM can''t be less than current users size');
 
%TEXT_C (NAME=PARSERROR,T='Syntax error');
%TEXT_C (NAME=TOOBIGERROR,T='Specified priority greater than 15');
%TEXT_C (NAME=IPARSERROR,T='Internal X$PARSE error');
%TEXT_C (NAME=BUMPERROR,T='MAXPRI can''t be greater than 8');
%TEXT_C (NAME=TIMEERROR,T='No can do at this time');
%TEXT_C (NAME=MAXERROR,T='DEFPRI can''t be greater than MAXPRI');
 
%EJECT;
 
        CALL M$TIME( FPT_TIME ) ALTRET( MERC );
        DO IX = 0 TO ( SIZEC( INTERVALS ) / ( SIZEC( INTERVALS.START(0) ) + SIZEC( INTERVALS.STOP(0) ) ) ) - 1;
           IF ( TIME_NOW >= INTERVALS.START( IX ) ) AND
             ( TIME_NOW <= INTERVALS.STOP( IX ) )
           THEN BUMP = '1'B;
           END;
 
        IF ~BUMP
        THEN
        DO;
           CALL M$TIME ( HOW_BOUT_DAY ) ALTRET ( MERC );
           DO IX = 0 TO (SIZEC(L_W_D) / SIZEC(L_W_D(0))) - 1;
              IF DAY_F_WEEK = L_W_D(IX)
              THEN
                 BUMP = '1'B;
              END;
           END;
 
 
        P_PCB.TEXT$ = ADDR( B$JIT.CCBUF );
        CALL X$PARSE( P_PCB ) ALTRET( PARSERR );
        DO IX = 0 TO P_PCB.OUT$ -> OUT$BLK.NSUBLKS - 1;
           BLK$ = P_PCB.OUT$ -> OUT$BLK.SUBLK$( IX );
           DO CASE ( BLK$ -> OUT$BLK.CODE );
            CASE ( %DEFPRI@ );
              CALL CHARBIN( DEFPRI, BLK$ -> OUT$BLK.SUBLK$(0) -> OUT$SYM.TEXT );
              IF DEFPRI > 15
              THEN GOTO TOOBIGERR;
            CASE ( %MAXPRI@ );
              CALL CHARBIN( MAXPRI, BLK$ -> OUT$BLK.SUBLK$(0) -> OUT$SYM.TEXT );
              IF DEFPRI > 15
              THEN GOTO TOOBIGERR;
            CASE( %MAXMEM@ );
              DO IX = 0 TO (SIZEC(OK_HOURS_MEM) / (SIZEC(OK_HOURS_MEM.BEGIN_HRS(0)) + SIZEC(OK_HOURS_MEM.END_HRS(0)))) - 1;
                 IF (TIME_NOW >= OK_HOURS_MEM.BEGIN_HRS(IX)) AND
                   (TIME_NOW <= OK_HOURS_MEM.END_HRS(IX))
                 THEN BUMPMEM = '1'B;
                 END;
 
              IF ~BUMPMEM
              THEN DO;
                 DO IX = 0 TO (SIZEC(OK_DAYS_MEM) / SIZEC(OK_DAYS_MEM(0))) - 1;
                    IF DAY_F_WEEK = OK_DAYS_MEM(IX)
                    THEN BUMPMEM = '1'B;
                    END;
                 END;
 
              CALL CHARBIN( MAXMEM, BLK$ -> OUT$BLK.SUBLK$(0) -> OUT$SYM.TEXT );
              IF MAXMEM > MAX_CORE
              THEN GOTO MEM2BIG;
              IF MAXMEM < B$JIT.CURRCORE
              THEN GOTO MEM2SML;
              IF ~BUMPMEM
              THEN GOTO TIMEERR;
 
              B$JIT.MAXCORE = MAXMEM;
 
            CASE( 0 );                  /* X$PARSE always returns FID         */
                                        /* Do Nothing                         */
            CASE ( ELSE );
              GOTO IPARSERR;
            END;
           END;
 
        IF MAXPRI > -1
        THEN DO;
           IF MAXPRI > MAXBUMP
           THEN GOTO BUMPERR;
           IF MAXPRI = MAXBUMP AND NOT BUMP
           THEN GOTO TIMEERR;
           B$JIT.MAXPRI = MAXPRI;
           END;
        IF DEFPRI > -1
        THEN DO;
           IF DEFPRI > B$JIT.MAXPRI
           THEN GOTO MAXERR;
           B$JIT.DEFPRI = DEFPRI;
           END;
 
        CALL M$EXIT;
 
MERC:
        CALL M$MERC;
 
%EJECT;
 
PARSERR: ERR$ = ADDR( PARSERROR ); GOTO REPORT;
TOOBIGERR: ERR$ = ADDR( TOOBIGERROR ); GOTO REPORT;
IPARSERR: ERR$ = ADDR( IPARSERROR ); GOTO REPORT;
BUMPERR: ERR$ = ADDR( BUMPERROR ); GOTO REPORT;
TIMEERR: ERR$ = ADDR( TIMEERROR ); GOTO REPORT;
MAXERR: ERR$ = ADDR( MAXERROR ); GOTO REPORT;
 
MEM2BIG: ERR$ = ADDR( TOOBIGMEM ); GOTO REPORT;
MEM2SML: ERR$ = ADDR( MAXMEM2SML ); GOTO REPORT;
 
REPORT: ;
        FPT_WRITE.BUF_ = VECTOR( ERR$ -> TEXT$C.TEXT );
        CALL M$WRITE ( FPT_WRITE );
        CALL M$EXIT;
 
END AUTO_MAIN;
