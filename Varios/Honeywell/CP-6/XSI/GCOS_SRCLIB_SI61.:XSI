/*M* GCOS_SRCLIB_SI6 - Convert Imported Gcos Srclib */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* NO */
/*P*
NAME:   GCOS_SRCLIB_SI61
PURPOSE:
        This program converts a SRCLIB file imported from a GCOS system
        into separate files for use on CP-6.  SRCLIB files are used on
        GCOS to hold COBOL COPY sections, among other things.
DESCRIPTION:
        GCOS_SRCLIB is invoked using standard syntax.
        M$SI (DCB#1) is the SRCLIB file to be converted.
        M$OU (DCB#3) supplies the account (and packset, if specified)
                where the output files are to be written.
*/
GCOS_SRCLIB: PROC MAIN;
%INCLUDE CP_6;
    %FPT_OPEN(FPTN=OPEN_CATA,ASN=FILE,FUN=IN,DCB=M$SI,SHARE=ALL);
    %FPT_OPEN(FPTN=OPEN_DATA,ASN=FILE,FUN=IN,DCB=M$DATA,SHARE=ALL,
            ACS=DIRECT);
    %FPT_OPEN(FPTN=OPEN_OUT_REC,ASN=FILE,FUN=CREATE,
            ORG=CONSEC,DCB=M$OU,NAME=OU_NAME);
    %FPT_READ(FPTN=READ_CATA,DCB=M$SI,BUF=CATALOG);
    %FPT_READ(FPTN=READ_DATA,DCB=M$DATA,BUF=DATA_BLOCK);
    %FPT_WRITE(FPTN=WRITE_REC,DCB=M$OU);
    %FPT_WRITE(FPTN=WRITE_MSG,DCB=M$DO);
    %FPT_CLOSE(FPTN=CLOSE_OUT,DCB=M$OU,DISP=SAVE,RELG=YES);
    %FPT_PFIL(FPTN=REWIND,DCB=M$DATA,BOF=YES);
    %FPT_PRECORD(FPTN=POSITION,DCB=M$DATA);
    %B$ALT;
    %B$TCB (STCLASS="BASED(B$TCB$)");
    %F$DCB;
%INCLUDE XU_FORMAT_C;
    %F_FDS(NAME=WRITE_DO,BUF=DO_BUF,DCB=M$DO,TRUNC=NO);
%INCLUDE XUF_ENTRY;
DCL M$DO DCB;
DCL M$SI DCB;
DCL M$DATA DCB;
DCL M$OU DCB;
DCL B$TCB$ PTR SYMREF;
DCL XUR$ERRMSG ENTRY (7) ALTRET;
DCL 1 CATALOG STATIC,
    2  SRCLIB                   CHAR (8),
    2  ENTRY_CNT                UBIN HALF HALIGNED,
    2  *                        CHAR (30),
    2  ENTRY_DATA (0:14),
       3  NAME                  CHAR (32),
       3  END_BLOCK             UBIN HALF HALIGNED,
       3  START_BLOCK           UBIN HALF HALIGNED,
       3  NUMBER_OF_BLOCKS      UBIN HALF HALIGNED,
       3  NUMBER_OF_LINE        UBIN HALF HALIGNED,
       3  *                     CHAR (40),
    2  *                        CHAR (40);
DCL 1 DATA_BLOCK STATIC,
    2  BLOCK_NUMBER             UBIN HALF HALIGNED,
    2  BLOCK_SEQ_NUMBER         UBIN HALF HALIGNED,
    2  FIRST_LINE               UBIN HALF HALIGNED,
    2  LAST_LINE                UBIN HALF HALIGNED,
    2  LINE_DATA (0:14)         CHAR (80),
    2  *                        CHAR (72);
DCL INX1                        UBIN;
DCL INX2                        UBIN;
DCL INX3                        UBIN;
DCL 1 OU_NAME STATIC,
    2 CNT_BYTE                  UBIN BYTE CALIGNED INIT (31),
    2 NAME                      CHAR (31);
DCL LEN                         UBIN;
DCL DO_BUF                      CHAR (80) STATIC;
DCL DO_FMT                      CHAR (0) CONSTANT
                                INIT ('%\%&T%-');
DCL DO_LAST                     CHAR (0) CONSTANT
                                INIT ('%\%80R');
DCL NOT_SRCLIB_MSG              CHAR (0) CONSTANT
                                INIT ('Input file is not a GCOS SRCLIB file.');
/*    */
    CALL M$OPEN (OPEN_CATA);
    OPEN_DATA.NAME_ = VECTOR(DCBADDR(DCBNUM(M$SI))->F$DCB.NAME#);
    OPEN_DATA.ACCT_ = VECTOR(DCBADDR(DCBNUM(M$SI))->F$DCB.ACCT#);
    CALL M$OPEN (OPEN_DATA);
    CALL M$READ(READ_CATA);
    IF CATALOG.SRCLIB ~= '*SRCLIB*'
    THEN DO;
        WRITE_MSG.BUF_ = VECTOR (NOT_SRCLIB_MSG);
        CALL M$WRITE (WRITE_MSG);
    END;
    DO WHILE CATALOG.SRCLIB = '*SRCLIB*';
        DO INX1 = 0 TO CATALOG.ENTRY_CNT - 1;
            OU_NAME.NAME = CATALOG.ENTRY_DATA.NAME (INX1);
            CALL INDEX (LEN,' ',OU_NAME.NAME);
            OU_NAME.CNT_BYTE = LEN;
            CALL M$OPEN (OPEN_OUT_REC)
            WHENRETURN DO;
                CALL M$PFIL (REWIND);
                POSITION.V.N# = CATALOG.ENTRY_DATA.START_BLOCK (INX1);
                CALL M$PRECORD (POSITION);
                DO INX2 = 1 TO CATALOG.ENTRY_DATA.NUMBER_OF_BLOCKS (INX1);
                    CALL M$READ (READ_DATA);
                    DO INX3 = 0 TO DATA_BLOCK.LAST_LINE - DATA_BLOCK.FIRST_LINE;
                        WRITE_REC.BUF_ = VECTOR(DATA_BLOCK.LINE_DATA (INX3));
                        CALL M$WRITE (WRITE_REC);
                    END;
                END;
                CALL M$CLOSE (CLOSE_OUT);
                CALL X$WRITE (WRITE_DO,VECTOR(DO_FMT),VECTOR(OU_NAME));
            END;
            WHENALTRETURN DO;
                CALL X$WRITE (WRITE_DO,VECTOR(DO_LAST));
                CALL XUR$ERRMSG (B$TCB.ALT$->B$ALT.ERR,DCBNUM(M$OU));
            END;
        END;
        CALL M$READ (READ_CATA);
    END;
    WRITE_DO.FMT_ = VECTOR(DO_LAST);
    CALL X$WRITE (WRITE_DO,VECTOR(DO_LAST));
END GCOS_SRCLIB;
