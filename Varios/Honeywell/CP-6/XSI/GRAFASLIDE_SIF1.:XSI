      PROGRAM GRAFASLIDE
C*T***********************************************************
C*T*                                                         *
C*T* Copyright (c) Bull HN Information Systems Inc., 1989    *
C*T*                                                         *
C*T***********************************************************
C*X* JR,IND=3,STMT=100,FMT=1000,SINC=10,FINC=10
      COMMON /SURFPARMS/ ANXMAX,I6X4
      INTEGER OPTIONS(15),VIEWSURF/0/
      COMMON/IEXIT/ISTEP
C
      DIMENSION FMTARR(144)
      DATA FMTARR/
     - 1., .7, 0., 1., 0.00, 1.00, 0.00, 0.70, 0.00, 10.00, 0.00, 7.10,
     - 1., .7, 0., 1., 0.05, 0.95, 0.03, 0.67, 0.00, 10.00, 0.00, 7.10,
     - .7, 1.,-1., 0., 0.00, 0.70, 0.00, 1.00, -.01, 7.10,-10.0, 0.00,
     - .7, 1.,-1., 0., 0.03, 0.67, 0.05, 0.95, -.01, 7.10, -10.0, 0.00,
     - 1., .7, 0., 1., 0.00, 1.00, 0.02, 0.68, 0.00, 10.65, 0.00, 7.10,
     - 1., .7, 0., 1., 0.10, 0.90, 0.09, 0.61, 0.00, 10.65, 0.00, 7.10,
     - .7, 1.,-1., 0., 0.02, 0.69, 0.00, 1.00, -.01, 7.1,-10.65,0.00,
     - .7, 1.,-1., 0., 0.05, 0.65, 0.05, 0.95, -.01, 7.1, -10.65, 0.0,
     - 1., .7, 0., 1., 0.00, 1.00, 0.00, 0.70, 2.19, 12.19,-1.5, 5.5,
     - 1., .7, 0., 1., 0.00, 1.00, 0.00, 0.70, 2.19,12.19, -1.5, 5.5,
     - .7, 1.,-1., 0., 0.00, 0.70, 0.00, 1.00, 0.00, 7.0, -12., -2.0,
     - .7, 1.,-1., 0., 0.00, 0.70, 0.00, 1.00, 0.00, 7.0, -12., -2.0/
      ISTEP=0
      CALL CCBUF (OPTIONS)
      IF (OPTIONS(1) .EQ. 9999) THEN
         OUTPUT 'Bad command line option -- aborting'
         CALL EXIT(7)
      ENDIF 
C
C              DID THE GUY SAY 35MM AND TV BOTH?
C
      IF (OPTIONS(3).EQ.1 .AND. OPTIONS(4).EQ.1) THEN
         OUTPUT 'Can''t mix size specs -- aborting '
         CALL EXIT(7)
      ENDIF 
      CALL XG$INITIALIZE_CORE ('BUFFERED','NONE','2D','NONE')
      CALL XG$SET_COORD_SYSTEM_TYPE ('RIGHT')
      ISTYLE = 0
      IF (OPTIONS(3) .EQ. 1)  ISTYLE = 1
      IF (OPTIONS(4) .EQ. 1)  ISTYLE = 2
      IFORMAT = 0
      IF (OPTIONS(1) .EQ. 1) IFORMAT = IFORMAT+1
      IF (OPTIONS(5) .EQ. 1) IFORMAT = IFORMAT+2
C
C         THE COMBINATIONS OF IFORMAT AND ISTYLE ARE USED TO
C         INDEX INTO A TABLE FOR EACH STYLE'S PARAMETERS
C
C         THE PARAMETERS ARE IN THIS ORDER:
C
C         0 - NDC X
C         1 - NDC Y
C         2 - VIEW_UP X
C         3 - VIEW_UP Y
C         4 - VIEWPORT X_LO
C         5 - VIEWPORT X_HI
C         6 - VIEWPORT Y_LO
C         7 - VIEWPORT Y_HI
C         8 - WINDOW X_LO
C         9 - WINDOW X_HI
C        10 - WINDOW Y_LO
C        11 - WINDOW Y_HI
C
      ISTART = ((ISTYLE * 4) + IFORMAT) * 12 + 1
      CALL XG$SET_NDC_SPACE_2 (FMTARR(ISTART+0), FMTARR(ISTART+1))
C
      CALL XG$INITIALIZE_VIEW_SURFACE (VIEWSURF, 'INTENSITY')
      CALL XG$SELECT_VIEW_SURFACE (VIEWSURF)
      CALL XG$SET_IMMEDIATE_VISIBILITY ('OFF')
      CALL XG$ESCAPE (3,1,1)
      CALL XG$SET_WINDOW_CLIPPING ('ON')
C
      CALL XG$SET_VIEW_UP_2 (FMTARR(ISTART+2), FMTARR(ISTART+3))
C
      CALL XG$SET_VIEWPORT_2 (FMTARR(ISTART+4),FMTARR(ISTART+5),FMTARR(
     1ISTART+6), FMTARR(ISTART+7))
C
      CALL XG$SET_WINDOW (FMTARR(ISTART+8),FMTARR(ISTART+9),FMTARR(
     1ISTART+10),FMTARR(ISTART+11))
C
C                   IS 35MM OPTION USED?
C
      IF (OPTIONS(3).EQ.1) THEN
         ANXMAX=10.65
      ELSE 
         ANXMAX = 10.00
      ENDIF 
      IF (OPTIONS(1).EQ.1) THEN
         OUTPUT 'Smaller BORDER set from command line!'
      ENDIF 
C
C              DO "TV" STYLE SETUP?
C
      I6X4 = 0
      IF (OPTIONS(4) .EQ. 1) THEN
         I6X4=1
      ENDIF 
      CALL XG$CREATE_TEMPORARY_SEG
      CALL XG$MOVE_ABS_2  (0.,0.)
      CALL XG$SET_LINEWIDTH(.10)
      CALL XG$SET_CHARPRECISION ('stroke')
      CALL FORMPAGE (OPTIONS(2))
      CALL XG$CLOSE_TEMPORARY_SEG
      CALL XG$SET_IMMEDIATE_VISIBILITY('ON')
      CALL XG$DESELECT_VIEW_SURFACE  (VIEWSURF)
      CALL XG$TERMINATE_VIEW_SURFACE  (VIEWSURF)
      CALL XG$TERMINATE_CORE
      CALL EXIT(ISTEP)
      END 
      SUBROUTINE FORMPAGE(IFRAME)
      SAVE
      CHARACTER*132 LINPUT,SCRATCH,LINPUT_U
      LOGICAL FIRST,AUTOSP,CENTERING,LOCATED
      CHARACTER*1 LAYOUT/'H'/
      COMMON /SURFPARMS/ ANXMAX,I6X4
      COMMON/IEXIT/ISTEP
      REAL YPOS/0./,XPOS/0./,STARTX/0.0/,STARTY/7./
      REAL SIZES(6)/.30,.40,.21,.28,.15,.20/
      INTEGER LASTFONT/13/,NOTEFONT/13/,IBULLETFONT/20/
      CHARACTER LASTSIZE*1/'S'/,IBULLETCHAR*2/'J '/
C
C         initialization here
C
      CALL XG$SET_FONT(LASTFONT)
      CALL XG$SET_CHARSIZE (SIZES(5),SIZES(6))
      CALL SET_INDEX (AMAX1(SIZES(5),SIZES(6)))
      DECR  = SIZES(6)
      CENTERING = .FALSE.
      WRITE (108,1050)
      SPACING = 0.0
C
C         new page starting point
C
C
C         setup page parameters
C
  100 CONTINUE 
      AUTOSP = .TRUE.
      FIRST=.TRUE.
      IF (LAYOUT .EQ. 'H') THEN
         CALL XG$SET_CHARUP_2 (0.,1.)
         STARTX=0.
         STARTY=7.
         XPOS=0.
         YPOS=7.
      ENDIF 
      IF (LAYOUT .EQ. 'V') THEN
         CALL XG$SET_CHARUP_2 (1.,0.)
         STARTX=ANXMAX
         STARTY=7.0
         XPOS=ANXMAX
         YPOS=7.0
      ENDIF 
      IF (I6X4 .EQ. 1) THEN
         IF (LAYOUT .EQ. 'V') THEN
            STARTX = ANXMAX
            STARTY = 4.2
            XPOS = ANXMAX
            YPOS=4.2
         ENDIF 
         IF (LAYOUT .EQ. 'H') THEN
 
            STARTX = 4.0
            STARTY = 4.2
            XPOS = 4.0
            YPOS = 4.2
         ENDIF 
      ENDIF 
      IF (IFRAME .EQ. 1 .AND.  I6X4 .EQ. 0) THEN
         CALL XG$INQ_CURRENT_POSITION_2 (XSAVE,YSAVE)
         CALL XG$MOVE_ABS_2 (0.01,0.01)
         CALL XG$LINE_ABS_2 (ANXMAX-.05,0.01)
         CALL XG$LINE_ABS_2 (ANXMAX-.05,7.05)
         CALL XG$LINE_ABS_2 ( 0.01,7.05)
         CALL XG$LINE_ABS_2 ( 0.01,0.01)
         CALL XG$MOVE_ABS_2 (XSAVE,YSAVE)
         OUTPUT 'Automatic %FRAME done!'
      ENDIF 
      IF (IFRAME .EQ. 1 .AND.  I6X4 .EQ. 1) THEN
         CALL XG$INQ_CURRENT_POSITION_2 (XSAVE,YSAVE)
         CALL XG$MOVE_ABS_2 (4.01,0.01)
         CALL XG$LINE_ABS_2 (ANXMAX-.05,0.01)
         CALL XG$LINE_ABS_2 (ANXMAX-.05,4.19)
         CALL XG$LINE_ABS_2 ( 4.01,4.19)
         CALL XG$LINE_ABS_2 ( 4.01,0.01)
         CALL XG$MOVE_ABS_2 (XSAVE,YSAVE)
         OUTPUT 'Automatic %FRAME done!'
      ENDIF 
C
C         top of processing loop ...
C
C         get the next line of input
C
  110 CONTINUE 
      READ (10,1010,END=380) LINPUT
      WRITE (108,1060) LINPUT
      LINPUT_U = ' '
      IF (LINPUT(1:1) .EQ. '%') THEN
         LINPUT_U = LINPUT
         CALL UPPERCASE (LINPUT_U,132)
      ENDIF 
C
C         **********************************************************
C         a comment?
C         **********************************************************
C
      IF (LINPUT_U(1:2) .EQ. '%*') THEN
         GOTO 110 
      ENDIF 
C
C         **********************************************************
C         new page happening?
C         **********************************************************
C
      IF (LINPUT_U(1:5) .EQ. '%PAGE') THEN
         CALL NEWPAGE
         GOTO 100 
      ENDIF 
C
C         *********************************************************
C         request to draw frame?
C         *********************************************************
C
      IF (LINPUT_U(1:6) .EQ. '%FRAME') THEN
         IF (I6X4 .EQ. 0) THEN
            CALL XG$INQ_CURRENT_POSITION_2 (XSAVE,YSAVE)
            CALL XG$MOVE_ABS_2 (0.01,0.01)
            CALL XG$LINE_ABS_2 (ANXMAX-.05,0.01)
            CALL XG$LINE_ABS_2 (ANXMAX-.05,7.05)
            CALL XG$LINE_ABS_2 ( 0.01,7.05)
            CALL XG$LINE_ABS_2 ( 0.01,0.01)
            CALL XG$MOVE_ABS_2 (XSAVE,YSAVE)
            GOTO 110 
         ENDIF 
         IF (I6X4 .EQ. 1) THEN
            CALL XG$INQ_CURRENT_POSITION_2 (XSAVE,YSAVE)
            CALL XG$MOVE_ABS_2 (4.01,0.01)
            CALL XG$LINE_ABS_2 (ANXMAX-.05,0.01)
            CALL XG$LINE_ABS_2 (ANXMAX-.05,4.19)
            CALL XG$LINE_ABS_2 ( 4.01,4.19)
            CALL XG$LINE_ABS_2 ( 4.01,0.01)
            CALL XG$MOVE_ABS_2 (XSAVE,YSAVE)
            GOTO 110 
         ENDIF 
      ENDIF 
C
C         *********************************************************
C         request to change character sizes?
C         *********************************************************
C
      IF (LINPUT_U(1:10) .EQ. '%CHARSIZES') THEN
         DECODE (70,1020,LINPUT(11:132)) SIZES
         LASTSIZE = ' '
         GOTO 110 
      ENDIF 
C
C         *********************************************************
C         request to change character spacing?
C         *********************************************************
C
      IF (LINPUT_U(1:10) .EQ. '%CHARSPACE') THEN
         DECODE (70,1030,LINPUT(11:132)) SPACING
         CALL XG$SET_CHARSPACE(SPACING)
         GOTO 110 
      ENDIF 
C
C         *********************************************************
C         request change to page orientation?
C         *********************************************************
C
      IF (LINPUT_U(1:7) .EQ. '%LAYOUT') THEN
         IF (LINPUT_U(9:9) .EQ. 'H') THEN
            LAYOUT = 'H'
         ENDIF 
         IF (LINPUT_U(9:9) .EQ. 'V') THEN
            LAYOUT = 'V'
         ENDIF 
         IF (.NOT. FIRST) CALL NEWPAGE
         GOTO 100 
      ENDIF 
C
C         *********************************************************
C         request to disable automatic identation?
C         *********************************************************
C
      IF (LINPUT_U(1:6) .EQ. '%NINDE') THEN
         AUTOSP = .FALSE.
         GOTO 110 
      ENDIF 
C
C         *********************************************************
C         request to restore automatic indentation?
C         *********************************************************
C
      IF (LINPUT_U(1:5) .EQ. '%INDE') THEN
         AUTOSP = .TRUE.
         GOTO 110 
      ENDIF 
C
C         *********************************************************
C         request to disable automatic centering?
C         *********************************************************
C
      IF (LINPUT_U(1:4) .EQ. '%ALL') THEN
         CENTERING = .FALSE.
         GOTO 110 
      ENDIF 
C
C         *********************************************************
C         request to start automatic centering?
C         *********************************************************
C
      IF (LINPUT_U(1:4) .EQ. '%ALC') THEN
         CENTERING = .TRUE.
         GOTO 110 
      ENDIF 
C
C         *********************************************************
C         request to draw CP-6 LOGO?
C         *********************************************************
C
      IF (LINPUT_U(1:5) .EQ. '%LOGO') THEN
         FIRST = .FALSE.
         LOCATED = .FALSE.
         IF (LAYOUT .EQ. 'V') THEN
            IF (LINPUT_U(7:8) .EQ. 'UL') THEN
               LOCATED = .TRUE.
               XLOGO = 0.000
               YLOGO = ANXMAX-0.70
               IF (I6X4 .EQ. 1) THEN
                  YLOGO = 4.2
               ENDIF 
            ENDIF 
            IF (LINPUT_U(7:8) .EQ. 'UR') THEN
               LOCATED = .TRUE.
               XLOGO= 7.0 - 0.55
               YLOGO = ANXMAX-0.70
            ENDIF 
            IF (LINPUT_U(7:8) .EQ. 'LL') THEN
               LOCATED = .TRUE.
               XLOGO = 0.000
               YLOGO = 0.000
               IF (I6X4 .EQ. 1) THEN
                  XLOGO=4.01
                  YLOGO=4.19
               ENDIF 
            ENDIF 
            IF (LINPUT_U(7:8) .EQ. 'LR') THEN
               LOCATED = .TRUE.
               XLOGO = 7.0-0.55
               YLOGO = 0.000
               IF (I6X4 .EQ. 1) THEN
                  XLOGO=4.01
               ENDIF 
            ENDIF 
         ENDIF 
         IF (LAYOUT .EQ. 'H') THEN
            IF (LINPUT_U(7:8) .EQ. 'UL') THEN
               LOCATED = .TRUE.
               XLOGO = 0.
               YLOGO = 6.35
               IF (I6X4 .EQ. 1) THEN
                  XLOGO=4.0
                  YLOGO=3.550
               ENDIF 
            ENDIF 
            IF (LINPUT_U(7:8) .EQ. 'UR') THEN
               LOCATED = .TRUE.
               XLOGO=ANXMAX-.55
               YLOGO =6.35
               IF (I6X4 .EQ. 1) THEN
                  YLOGO=3.550
               ENDIF 
            ENDIF 
            IF (LINPUT_U(7:8) .EQ. 'LL') THEN
               LOCATED = .TRUE.
               XLOGO = 0.
               YLOGO = 0.
               IF (I6X4 .EQ. 1) THEN
                  XLOGO=4.0
               ENDIF 
            ENDIF 
            IF (LINPUT_U(7:8) .EQ. 'LR') THEN
               LOCATED = .TRUE.
               XLOGO = ANXMAX-.55
               YLOGO = 0.
            ENDIF 
         ENDIF 
         IF (LOCATED) THEN
            CALL LOGO (XLOGO,YLOGO,LINPUT(10:51),LAYOUT)
C*D*        OUTPUT XLOGO,YLOGO
         ELSE 
            OUTPUT 'Bad LOGO location!'
            ISTEP=3
         ENDIF 
         GOTO 110 
      ENDIF 
C
C         *********************************************************
C         request to change font?
C         *********************************************************
C
      IF (LINPUT_U(1:5) .EQ. '%FONT') THEN
         DECODE (10,1040,LINPUT(7:16)) NEWFONT
         IF (NEWFONT .NE. LASTFONT) THEN
            LASTFONT = NEWFONT
            CALL XG$SET_FONT(LASTFONT)
            CALL XG$SET_CHARSPACE(0.0)
            SPACING = 0.0
         ENDIF 
         GOTO 110 
      ENDIF 
C
C         *********************************************************
C         request for note placement?
C         *********************************************************
C
      IF (LINPUT_U(1:5) .EQ. '%NOTE') THEN
         CALL XG$SET_CHARJUST ('RIGHT','BOTTOM')
         FIRST = .FALSE.
         IF (LAYOUT .EQ. 'V') THEN
            CALL XG$MOVE_ABS_2 (0.,.60)
            IF (I6X4 .EQ. 1) THEN
               CALL XG$MOVE_ABS_2 (4.0,.8)
            ENDIF 
         ENDIF 
         IF (LAYOUT .EQ. 'H') THEN
            CALL XG$MOVE_ABS_2 (ANXMAX-.60,0.)
         ENDIF 
         IF (LASTFONT .NE. NOTEFONT) THEN
            CALL XG$SET_FONT(NOTEFONT)
         ENDIF 
         IF (LASTSIZE .NE. 'S') THEN
            CALL XG$SET_CHARSIZE (SIZES(5),SIZES(6))
            CALL SET_INDEX (AMAX1(SIZES(5),SIZES(6)))
         ENDIF 
         DO 120 J=46,7,-1
            IPOINT = J
            IF (LINPUT(J:J) .NE. ' ')GOTO 130 
  120    CONTINUE 
C
C              blanks, skip it
C
         GOTO 160 
  130    CONTINUE 
         SCRATCH = ' '
         DO 140 K=40,1,-1
            SCRATCH(K:K) = LINPUT(IPOINT:IPOINT)
            IPOINT = IPOINT - 1
            IF (IPOINT .LE. 6)GOTO 150 
  140    CONTINUE 
  150    CONTINUE 
  160    CONTINUE 
         CALL XG$TEXT_COUNT (SCRATCH, 40)
         CALL XG$SET_FONT(LASTFONT)
         CALL XG$SET_CHARSPACE (0.0)
         IF (LASTSIZE .EQ. 'L') THEN
            CALL XG$SET_CHARSIZE (SIZES(1),SIZES(2))
            CALL SET_INDEX (AMAX1(SIZES(1),SIZES(2)))
            DECR = SIZES(2)
         ENDIF 
         IF (LASTSIZE .EQ. 'M') THEN
            CALL XG$SET_CHARSIZE (SIZES(3),SIZES(4))
            CALL SET_INDEX (AMAX1(SIZES(3),SIZES(4)))
            DECR = SIZES(4)
         ENDIF 
         IF (LASTSIZE .EQ. 'S') THEN
            CALL XG$SET_CHARSIZE(SIZES(5),SIZES(6))
            CALL SET_INDEX (AMAX1(SIZES(5),SIZES(6)))
            DECR = SIZES(6)
         ENDIF 
         IF (CENTERING) THEN
            CALL XG$SET_CHARJUST ('CENTER','BOTTOM')
         ELSE 
            CALL XG$SET_CHARJUST ('OFF','BOTTOM')
         ENDIF 
         IF (SPACING .NE. 0.0) THEN
            CALL XG$SET_CHARSPACE (SPACING)
         ENDIF 
         GOTO 110 
      ENDIF 
C
C         *********************************************************
C         request for lastline placement?
C         *********************************************************
C
      IF (LINPUT_U(1:9) .EQ. '%LASTLINE') THEN
         CALL XG$SET_CHARJUST ('CENTER','BOTTOM')
         FIRST = .FALSE.
         IF (LAYOUT .EQ. 'V') THEN
            CALL XG$MOVE_ABS_2 (0.,4.375)
            IF (I6X4 .EQ. 1) THEN
               CALL XG$MOVE_ABS_2 (4.0,2.1 )
            ENDIF 
         ENDIF 
         IF (LAYOUT .EQ. 'H') THEN
            CALL XG$MOVE_ABS_2 (ANXMAX/2.,0.)
            IF (I6X4 .EQ. 1) THEN
               CALL XG$MOVE_ABS_2 (7.,0.)
            ENDIF 
         ENDIF 
         IF (LASTFONT .NE. NOTEFONT) THEN
            CALL XG$SET_FONT(NOTEFONT)
         ENDIF 
         IF (LASTSIZE .NE. 'S') THEN
            CALL XG$SET_CHARSIZE (SIZES(5),SIZES(6))
            CALL SET_INDEX (AMAX1(SIZES(5),SIZES(6)))
         ENDIF 
         DO 170 J=55,11,-1
            IPOINT = J
            IF (LINPUT(J:J) .NE. ' ')GOTO 180 
  170    CONTINUE 
C
C              blanks, skip it
C
         GOTO 230 
  180    CONTINUE 
         SCRATCH = ' '
         DO 190 K=45,1,-1
            SCRATCH(K:K) = LINPUT(IPOINT:IPOINT)
            IPOINT = IPOINT - 1
            IF (IPOINT .LE. 10)GOTO 200 
  190    CONTINUE 
  200    CONTINUE 
         IPOINT1=1
         IPOINT2=45
         DO 210 K=1,45
            IF (SCRATCH(K:K) .EQ. ' ') THEN
               IPOINT1=IPOINT1+1
               IPOINT2=IPOINT2-1
            ELSE 
               GOTO 220 
            ENDIF 
  210    CONTINUE 
  220    CONTINUE 
         CALL XG$SET_CHARSPACE(0.0)
         CALL XG$TEXT_COUNT (SCRATCH(IPOINT1:IPOINT1),IPOINT2)
  230    CONTINUE 
         CALL XG$SET_FONT(LASTFONT)
         IF (LASTSIZE .EQ. 'L') THEN
            CALL XG$SET_CHARSIZE (SIZES(1),SIZES(2))
            CALL SET_INDEX (AMAX1(SIZES(1),SIZES(2)))
            DECR = SIZES(2)
         ENDIF 
         IF (LASTSIZE .EQ. 'M') THEN
            CALL XG$SET_CHARSIZE (SIZES(3),SIZES(4))
            CALL SET_INDEX (AMAX1(SIZES(3),SIZES(4)))
            DECR = SIZES(4)
         ENDIF 
         IF (LASTSIZE .EQ. 'S') THEN
            CALL XG$SET_CHARSIZE(SIZES(5),SIZES(6))
            CALL SET_INDEX (AMAX1(SIZES(5),SIZES(6)))
            DECR = SIZES(6)
         ENDIF 
         IF (CENTERING) THEN
            CALL XG$SET_CHARJUST ('CENTER','BOTTOM')
         ELSE 
            CALL XG$SET_CHARJUST ('OFF','BOTTOM')
         ENDIF 
         IF (SPACING .NE. 0.0) THEN
            CALL XG$SET_CHARSPACE (SPACING)
         ENDIF 
         GOTO 110 
      ENDIF 
C
C         *********************************************************
C         request to include a picture?
C         *********************************************************
C
      IF (LINPUT_U(1:8) .EQ. '%PICTURE') THEN
         NERR=0
         CALL DOAPIC(LINPUT,LAYOUT,NERR,RETX,RETY)
         IF (NERR .EQ. 0) THEN
            IF (LAYOUT .EQ. 'V') THEN
               IF (XPOS.GT.RETX) THEN
                  XPOS=RETX
               ENDIF 
            ENDIF 
            IF (LAYOUT .EQ. 'H') THEN
               IF (YPOS.GT.RETY) THEN
                  YPOS=RETY
               ENDIF 
            ENDIF 
         ENDIF 
         GOTO 110 
      ENDIF 
C
C         *********************************************************
C         request for character size changes
C         *********************************************************
C
      IF (LINPUT_U(1:5) .EQ. '%SIZE') THEN
         IF (LINPUT_U(7:7) .EQ. 'L') THEN
            IF (LASTSIZE .NE. 'L') THEN
               CALL XG$SET_CHARSIZE (SIZES(1),SIZES(2))
               CALL SET_INDEX (AMAX1(SIZES(1),SIZES(2)))
               DECR = SIZES(2)
               LASTSIZE = 'L'
            ENDIF 
         ENDIF 
         IF (LINPUT_U(7:7) .EQ. 'M') THEN
            IF (LASTSIZE .NE. 'M') THEN
               CALL XG$SET_CHARSIZE (SIZES(3),SIZES(4))
               CALL SET_INDEX (AMAX1(SIZES(3),SIZES(4)))
               DECR = SIZES(4)
               LASTSIZE = 'M'
            ENDIF 
         ENDIF 
         IF (LINPUT_U(7:7) .EQ. 'S') THEN
            IF (LASTSIZE .NE. 'S') THEN
               CALL XG$SET_CHARSIZE(SIZES(5),SIZES(6))
               CALL SET_INDEX (AMAX1(SIZES(5),SIZES(6)))
               DECR = SIZES(6)
               LASTSIZE = 'S'
            ENDIF 
         ENDIF 
         GOTO 110 
      ENDIF 
C
C         *********************************************************
C         backup a line?
C         *********************************************************
C
      IF (LINPUT_U(1:7) .EQ. '%BACKUP') THEN
         DECODE (10,1040,LINPUT(9:18)) NBACK
         IF (NBACK .EQ. 0) NBACK=1
         IF (NBACK .LT. 0) NBACK=0
         AJUMP=NBACK*DECR
         IF (LAYOUT .EQ. 'H') THEN
            YPOS = YPOS + AJUMP
            IF (YPOS .GT. STARTY) YPOS = STARTY
         ENDIF 
         IF (LAYOUT .EQ. 'V') THEN
            XPOS = XPOS + AJUMP
            IF (XPOS .GT. ANXMAX) XPOS = ANXMAX
         ENDIF 
         GOTO 110 
      ENDIF 
C
C         *********************************************************
C         nitty-gritty of text processing starts here
C         *********************************************************
C
      AMARGIN = 0.
      CALL XG$INQ_TEXT_EXTENT_3_COUNT ('    ',1,DX,DY,DZ)
      XMOV=AMAX(ABS(DX),ABS(DY))
      IFIRSTCHAR=1
      IF (LINPUT .NE. ' ') THEN
         DO 240 I=1,132
            IFIRSTCHAR=I
            IF (LINPUT(I:I) .NE. ' ')GOTO 250 
            IF (AUTOSP) THEN
               AMARGIN = AMARGIN + SIZES(1)
            ELSE 
               AMARGIN = AMARGIN + XMOV
            ENDIF 
  240    CONTINUE 
         AMARGIN=0.
         IFIRSTCHAR=1
  250    CONTINUE 
      ENDIF 
      DO 260 J=132,IFIRSTCHAR+2,-1
         ILASTCHAR = J
         IF (LINPUT(J:J) .NE. ' ')GOTO 270 
  260 CONTINUE 
  270 CONTINUE 
      IF (LAYOUT .EQ. 'H') THEN
         YPOS = YPOS - DECR
         IF (YPOS .LT. 0.) THEN
            OUTPUT 'This line won''t fit on the current PAGE:'
            ISTEP=3
            WRITE (108,1060) LINPUT
            GOTO 110 
         ENDIF 
      ENDIF 
      IF (LAYOUT .EQ. 'V') THEN
         XPOS = XPOS - DECR
         IF (XPOS .LT. 0.) THEN
            OUTPUT 'This line won''t fit on the current PAGE:'
            ISTEP=3
            WRITE (108,1060) LINPUT
            GOTO 110 
         ENDIF 
      ENDIF 
C
C         *********************************************************
C         This chunk supports left-aligned text
C         *********************************************************
C
      IF (.NOT.CENTERING) THEN
         IF (LAYOUT .EQ. 'H') THEN
            XPOS = STARTX + AMARGIN
         ENDIF 
         IF (LAYOUT .EQ. 'V') THEN
            YPOS = STARTY - AMARGIN
         ENDIF 
         CALL XG$SET_CHARJUST ('OFF','BOTTOM')
         CALL XG$MOVE_ABS_2 (XPOS,YPOS)
         IF (LINPUT(IFIRSTCHAR:IFIRSTCHAR+1) .EQ. 'o ') THEN
            CALL XG$SET_FONT (IBULLETFONT)
            CALL XG$TEXT_COUNT (IBULLETCHAR,2)
            CALL XG$SET_FONT(LASTFONT)
            LINPUT(IFIRSTCHAR:IFIRSTCHAR+1) = '  '
         ENDIF 
         KOUNT = ILASTCHAR - IFIRSTCHAR + 1
         CALL XG$INQ_TEXT_EXTENT_3_COUNT (LINPUT(IFIRSTCHAR:IFIRSTCHAR),
     1      KOUNT,DX,DY,DZ)
         SIZELINE = AMAX1(DX,DY)+AMARGIN
         COMPX = (ANXMAX - STARTX)
         COMPY = (STARTY)
         IF (LAYOUT .EQ. 'V' .AND. SIZELINE .GT. COMPY) THEN
            OUTPUT 'Line too long!'
            DO 280 LTEST=KOUNT-1,3,-1
               IPOINT = LTEST
               CALL XG$INQ_TEXT_EXTENT_3_COUNT (LINPUT(IFIRSTCHAR:
     1                  IFIRSTCHAR),LTEST,DX,DY,DZ)
               SIZELINE = AMAX(DX,DY)+AMARGIN
               IF (SIZELINE .LE. COMPY)GOTO 290 
  280       CONTINUE 
  290       CONTINUE 
            NLOST = KOUNT - IPOINT
            WRITE (108,1000)LINPUT(IFIRSTCHAR:ILASTCHAR-NLOST),LINPUT(I
     1            LASTCHAR-NLOST+1:ILASTCHAR+1)
            ISTEP=3
            OUTPUT 'Processing continues anyway'
            KOUNT = IPOINT
         ENDIF 
         IF (LAYOUT .EQ. 'H' .AND. SIZELINE .GT. COMPX) THEN
            OUTPUT 'Line too long!'
            DO 300 LTEST = KOUNT,3,-1
               IPOINT=LTEST
               CALL XG$INQ_TEXT_EXTENT_3_COUNT (LINPUT(IFIRSTCHAR:
     1                  IFIRSTCHAR),LTEST,DX,DY,DZ)
               SIZELINE = AMAX(DX,DY)+AMARGIN
               IF (SIZELINE .LE. COMPX)GOTO 310 
  300       CONTINUE 
  310       CONTINUE 
            NLOST = KOUNT - IPOINT
            WRITE (108,1000)(LINPUT(IFIRSTCHAR:(ILASTCHAR-NLOST))),
     1            (LINPUT((ILASTCHAR-NLOST+1):(ILASTCHAR+1)))
            ISTEP=3
            OUTPUT 'Processing continues anyway'
            KOUNT = IPOINT
         ENDIF 
         CALL XG$TEXT_COUNT (LINPUT(IFIRSTCHAR:IFIRSTCHAR),KOUNT)
         FIRST=.FALSE.
         GOTO 110 
      ENDIF 
C
C         *********************************************************
C         This chunk supports centered text
C         *********************************************************
C
      IF (CENTERING) THEN
         AMARGIN = 0.
         COMPX = (ANXMAX - STARTX)
         COMPY = (STARTY)
         DO 320 I=1,ILASTCHAR
            IFIRSTCHAR=I
            IF (LINPUT(I:I) .NE. ' ')GOTO 330 
  320    CONTINUE 
         IFIRSTCHAR = ILASTCHAR-1
  330    CONTINUE 
         IF (LAYOUT .EQ. 'H') THEN
            XPOS = ANXMAX/2.0
            IF (I6X4 .EQ. 1) THEN
               XPOS = 7.0
            ENDIF 
         ENDIF 
         IF (LAYOUT .EQ. 'V') THEN
            YPOS = 3.5
            IF (I6X4 .EQ. 1) THEN
               YPOS = 2.1
            ENDIF 
         ENDIF 
         CALL XG$SET_CHARJUST ('CENTER','BOTTOM')
         CALL XG$MOVE_ABS_2 (XPOS,YPOS)
         KOUNT = ILASTCHAR - IFIRSTCHAR + 1
         CALL XG$INQ_TEXT_EXTENT_3_COUNT (LINPUT(IFIRSTCHAR:IFIRSTCHAR),
     1      KOUNT,DX,DY,DZ)
         SIZELINE = AMAX (ABS(DX),ABS(DY))+AMARGIN
         IF (LAYOUT .EQ. 'V' .AND. SIZELINE .GT. COMPY) THEN
            OUTPUT 'Line too long!'
            DO 340 LTEST=KOUNT-1,3,-1
               IPOINT = LTEST
               CALL XG$INQ_TEXT_EXTENT_3_COUNT (LINPUT(IFIRSTCHAR:
     1                  IFIRSTCHAR),LTEST,DX,DY,DZ)
               SIZELINE = AMAX(ABS(DX),ABS(DY))+AMARGIN
               IF (SIZELINE .LE. COMPY)GOTO 350 
  340       CONTINUE 
  350       CONTINUE 
            NLOST = KOUNT - IPOINT
            WRITE (108,1000)(LINPUT(IFIRSTCHAR:(ILASTCHAR-NLOST))),
     1            (LINPUT((ILASTCHAR-NLOST+1):(ILASTCHAR+1)))
            ISTEP=3
            OUTPUT 'Processing continues anyway'
            KOUNT = IPOINT
         ENDIF 
         IF (LAYOUT .EQ. 'H' .AND. SIZELINE .GT. COMPX) THEN
            OUTPUT 'Line too long!'
            DO 360 LTEST = KOUNT,3,-1
               IPOINT = LTEST
               CALL XG$INQ_TEXT_EXTENT_3_COUNT (LINPUT(IFIRSTCHAR:
     1                  IFIRSTCHAR),LTEST,DX,DY,DZ)
               SIZELINE = AMAX(DX,DY)+AMARGIN
               IF (SIZELINE .LE.COMPX)GOTO 370 
  360       CONTINUE 
  370       CONTINUE 
            NLOST = KOUNT - IPOINT
            WRITE (108,1000)(LINPUT(IFIRSTCHAR:(ILASTCHAR-NLOST))),
     1            (LINPUT((ILASTCHAR-NLOST+1):(ILASTCHAR+1)))
            ISTEP=3
            OUTPUT 'Processing continues anyway'
            KOUNT = IPOINT
         ENDIF 
         CALL XG$TEXT_COUNT (LINPUT(IFIRSTCHAR:IFIRSTCHAR),KOUNT)
         FIRST=.FALSE.
         GOTO 110 
      ENDIF 
C
C         *********************************************************
C         come here on eof
C         *********************************************************
C
  380 CONTINUE 
      RETURN
 1000 FORMAT (1X,A,'<here>',A)
 1010 FORMAT (A132)
 1020 FORMAT (6F)
 1030 FORMAT (F)
 1040 FORMAT (I)
 1050 FORMAT (' Lines being processed:')
 1060 FORMAT (1X,A132)
      END 
      SUBROUTINE UPPERCASE (STRING,ISIZE)
      CHARACTER*132 STRING
      DO 100 I=1,ISIZE
         IX = ICHAR(STRING(I:I))
         IF (IX.LT.97)GOTO 100 
         IF (IX.GT.122)GOTO 100 
         IX=IX-32
         STRING(I:I)=CHAR(IX)
  100 CONTINUE 
      RETURN
      END 
      SUBROUTINE SET_INDEX(WIDTH)
C
C         **********************************************************
C         Subroutine calculates TEXT_WIDTH based on character width
C         **********************************************************
C
      ISIZE=260
      IF (WIDTH.LE.1.0) THEN
         ISIZE=WIDTH*260.
      ENDIF 
      CALL XG$ESCAPE(2,1,ISIZE)
      RETURN
      END 
      SUBROUTINE NEWPAGE
      SAVE
      CALL XG$CLOSE_TEMPORARY_SEG
      CALL XG$NEW_FRAME
      CALL XG$CREATE_TEMPORARY_SEG
      CALL XG$MOVE_ABS_2  (0.,0.)
      CALL XG$SET_CHARPRECISION ('stroke')
      RETURN
      END 
C
C         **********************************************************
C         Subroutine DOAPIC
C         **********************************************************
C
      SUBROUTINE DOAPIC (LINPUT,LAYOUT,NERR,RETX,RETY)
      CHARACTER*260 LINPUT,ISTRING
      CHARACTER*4 STRMSTR
      CHARACTER*1   LAYOUT,IDIR,IPENC
      CHARACTER*60  RET(16)
      COMMON /SURFPARMS/ ANXMAX,I6X4
      CALL PICTURE(LINPUT,RET)
      IF (RET(1).EQ.'*ALTRET*') THEN
         OUTPUT 'Bad syntax on PICTURE command (PARSERR)'
         NERR=1
         RETURN
      ENDIF 
      DECODE (60,1000,RET(2)) XMIN
      DECODE (60,1000,RET(3)) YMIN
      DECODE (60,1000,RET(4)) XMAX
      DECODE (60,1000,RET(5)) YMAX
      IF (XMAX.LE.XMIN .OR. YMAX.LE.YMIN) THEN
         OUTPUT 'Bad PICTURE placement values!'
         NERR=2
         RETURN
      ENDIF 
      IF (LAYOUT .EQ. 'H') THEN
         IF (XMAX.GT.ANXMAX .OR. YMAX .GT. 7.0) THEN
            OUTPUT 'Bad PICTURE placement values!'
            NERR=2
            RETURN
         ENDIF 
      ENDIF 
      IF (LAYOUT .EQ. 'V') THEN
         IF (XMAX.GT.7.0   .OR. YMAX .GT.ANXMAX) THEN
            OUTPUT 'Bad PICTURE placement values!'
            NERR=2
            RETURN
         ENDIF 
      ENDIF 
      IF (XMIN.LT. 0. .OR. YMIN .LT. 0.) THEN
         OUTPUT 'Bad PICTURE placement values!'
         NERR=2
         RETURN
      ENDIF 
      IF (RET(6)(1:1) .NE. 'Y' .AND. RET(6)(1:1) .NE. 'N') THEN
         OUTPUT 'PICTURE FRAME must be Y or N!'
         NERR=3
         RETURN
      ENDIF 
      OPEN (20,NAME=RET(1),STATUS='OLD',ACCESS='SEQUENTIAL',IOSTAT=
     1NOPENSTAT,USAGE='INPUT',RECL=256)
      IF (NOPENSTAT.NE.0) THEN
         OUTPUT 'Couldn''t OPEN PICTURE file!'
         RETURN
      ENDIF 
      CALL XG$MOVE_ABS_2  (0.,0.)
C     This loop determines size of picture automatically
C
      XLO = 9.E10
      XHI = -9.E10
      YLO = 9.E10
      YHI = -9.E10
      ITYPE = 0
      READ (20,1070) STRMSTR,ISTRING
      IF (STRMSTR .NE. '*M* ')GOTO 100 
      ITYPE = 1
      ISTRING = ' '
      READ (20,1010,END=150,ERR=150) ISTRING
      IF (ISTRING(1:2) .NE. 'R ')GOTO 150 
      DECODE (256,1090,ISTRING) XHI,XLO,YHI,YLO
      ISTAR = INDEX(ISTRING,'*')
      ISTRING(ISTAR:ISTAR) = ' '
      GOTO 120 
  100 CONTINUE 
      READ (20,1050,END=110) X,Y,IPEN
      IF (IPEN.EQ.4) THEN
         READ (20,1010,END=110) ISTRING
         READ (20,1010,END=110) ISTRING
         READ (20,1010,END=110) ISTRING
         GOTO 100 
      ENDIF 
      IF (X.LT.XLO) XLO=X
      IF (X.GT.XHI) XHI=X
      IF (Y.LT.YLO) YLO=Y
      IF (Y.GT.YHI) YHI=Y
      GOTO 100 
  110 CONTINUE 
      REWIND 20
      READ (20,1060) ISTRING
  120 CONTINUE 
      PICX = XHI - XLO
      PICY = YHI - YLO
      IF (RET(6)(1:1) .EQ. 'Y') THEN
         XLO=XLO-(PICX*.05)
         YLO=YLO-(PICY*.05)
         YHI=YHI+(PICY*.05)
         XHI=XHI+(PICX*.05)
         PICX = PICX*1.1
         PICY = PICY*1.1
      ENDIF 
      FACTR = PICX/(XMAX-XMIN)
      YFACTR = PICY/(YMAX-YMIN)
      IF (YFACTR.GT.FACTR) FACTR=YFACTR
      XSIZE = PICX/FACTR
      YSIZE = PICY/FACTR
      YORG = (((YMAX-YMIN)/2.) - (YSIZE/2.)) + YMIN
      XORG = (((XMAX-XMIN)/2.) - (XSIZE/2.)) + XMIN
      IF (RET(6)(1:1) .EQ. 'Y') THEN
         IF (LAYOUT.EQ.'H') THEN
            CALL XG$MOVE_ABS_2 (XMIN,YMIN)
            CALL XG$LINE_ABS_2 (XMAX,YMIN)
            CALL XG$LINE_ABS_2 (XMAX,YMAX)
            CALL XG$LINE_ABS_2 (XMIN,YMAX)
            CALL XG$LINE_ABS_2 (XMIN,YMIN)
            CALL XG$MOVE_ABS_2 (0.,0.)
         ELSE 
            CALL XG$MOVE_ABS_2 (YMIN,7.-XMIN)
            CALL XG$LINE_ABS_2 (YMAX,7.-XMIN)
            CALL XG$LINE_ABS_2 (YMAX,7.-XMAX)
            CALL XG$LINE_ABS_2 (YMIN,7.-XMAX)
            CALL XG$LINE_ABS_2 (YMIN,7.-XMIN)
            CALL XG$MOVE_ABS_2(0.,0.)
         ENDIF 
      ENDIF 
  130 CONTINUE 
      IF (ITYPE .EQ. 0) THEN
         READ (20,1050,END=140) X,Y,IPEN
      ELSE 
         IF ( ISTAR .EQ. 0 ) ISTRING = ' '
         IF ( ISTAR .EQ. 0 ) READ (20,1010,END=140,ERR=150) ISTRING
         ISTAR1 = INDEX(ISTRING,'*')
         IF (ISTAR1 .GT. 0) ISTRING(ISTAR1:ISTAR1) = ' '
         DECODE (256,1080,ISTRING) ISTAR,IPENC,X,Y
         ISTAR = ISTAR1
         IPEN = 3
         IF (IPENC .EQ. 'D') IPEN = 2
      ENDIF 
      IF (IPEN.EQ.4) THEN
         READ (20,1020) IDIR
         READ (20,1030) AHITE
         READ (20,1040) ISTRING
C          IF (IDIR.EQ.'R') CALL XG$SET_CHARPATH('RIGHT')
C          IF (IDIR.EQ.'D') CALL XG$SET_CHARPATH('DOWN')
C          XHITE=AHITE/FACTR
C          IF (XHITE .LT. .10) XHITE=.10
C          CALL XG$SET_CHARSIZE(XHITE,XHITE)
C              DO 900 NN=80,2,-1
C               NX=NN
C               IF (ISTRING(NX:NX) .NE. ' ') GOTO 901
C 900          CONTINUE
C 901           CONTINUE
C               CALL XG$TEXT_COUNT(ISTRING,NX)
         GOTO 130 
      ENDIF 
      CALL XG$SET_LINEWIDTH(.01)
      X = (X-XLO)/FACTR
      Y = (Y-YLO)/FACTR
      IF (LAYOUT.EQ.'V') THEN
         YP=Y
         XP=X
         X=YP+YORG
         Y=7.-(XP+XORG)
      ELSE 
         X = X + XORG
         Y = Y + YORG
      ENDIF 
      IF (IPEN.EQ.3) CALL XG$MOVE_ABS_2 (X,Y)
      IF (IPEN.EQ.2) CALL XG$LINE_ABS_2 (X,Y)
      GOTO 130 
  140 CONTINUE 
      CLOSE (20)
      IF (LAYOUT.EQ.'H') THEN
         RETX=XMIN
         RETY=YMIN
         RETURN
      ENDIF 
      RETX=YMIN
      RETY=XMIN
      CALL XG$SET_LINEWIDTH(.10)
      RETURN
  150 OUTPUT 'Error reading PICTURE file!'
      RETURN
 1000 FORMAT (F)
 1010 FORMAT (A256)
 1020 FORMAT (5X,A1)
 1030 FORMAT (5X,F12.5)
 1040 FORMAT (5X,A80)
 1050 FORMAT (2F,I)
 1060 FORMAT (A90)
 1070 FORMAT (A4,A252)
 1080 FORMAT (NX,A1,2F)
 1090 FORMAT (2X,4F)
      END 
      SUBROUTINE LOGO (XABS,YABS,FILENM,LAYOUT)
      CHARACTER *1 LAYOUT
      CHARACTER*42 FILENM,INTFIL
      CHARACTER *260 PHALSEREC
      X2 = XABS+.55
      Y2 = YABS+.65
      INTFIL = FILENM
      IF (INTFIL .EQ. ' ') THEN
         INTFIL = 'GRAFALOGO_ID1.X'
      ENDIF 
      CALL CHARSIZE(INTFIL,42,NN)
      ENCODE (260,1000,PHALSEREC) INTFIL(1:NN),XABS,YABS,X2,Y2
C     OUTPUT PHALSEREC(1:100)
      CALL DOAPIC (PHALSEREC,LAYOUT,N,X,Y)
      RETURN
 1000 FORMAT ('%PICTURE ',A,' LL=',F5.2,',',F5.2,' UR=',F5.2,',',F5.2,
     - ' FRAME=N')
      END 
      SUBROUTINE CHARSIZE(STRING,ICMAX,IRET)
      CHARACTER STRING*(*)
      IF (ICMAX.LE.1) RETURN
      DO 100 I=ICMAX,1,-1
         IRET=I
         IF (STRING(I:I).NE.' ') RETURN
  100 CONTINUE 
      RETURN
      END 
