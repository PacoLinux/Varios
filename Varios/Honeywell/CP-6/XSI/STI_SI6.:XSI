/*M*     STI - Software Technical Identifiers                */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/*X*       DMR,PLM=5,IND=5,CTI=5,SDI=5,CSI=0,ECI=0           */
/*                                                           */
/*   STI can create, modify, verify and display the          */
/*       STI record contained in files with the FILE         */
/*       TYPEs of R?, O?, S6, ST.                            */
/*                                                           */
/*************************************************************/
%EJECT;
STI: PROC MAIN;
%INCLUDE STI_C;
%INCLUDE XU_MACRO_C;
%INCLUDE CP_6;
%INCLUDE B_ERRORS_C;
%INCLUDE CP_6_SUBS;
%INCLUDE B$OBJECT_C;
%INCLUDE STI_C2;
%INCLUDE STI_C3;
%INCLUDE B$JIT;
 
%SUB EOA# = %E$FDEOF;                   /* END OF ACCOUNT DIRECTORY */
%SUB FIB# = %E$FILEBUSY;                /* FILE IS BUSY */
%SUB FDE# = %E$NOFILE;                  /* FILE DOES NOT EXIST */
%SUB NEVER = "WHILE ('0'B)";
%SUB FOREVER = "WHILE ('1'B)";
 
%F$DCB;
%B$ALT;
%B$TCB;
 
%P_PCB (NAME = OPTIONS_PCB,
    T = OPTION_BUF,
    W = PARSE_WORKSPACE,
    WSZ = 100,
    R = STI_OPTIONS);
 
%P_PCB (NAME = WILD_PCB,
    T = SI.NAME#,
    W = PARSE_WORKSPACE,
    WSZ = 100,
    R = WILD_STRUCTURE);
 
%PARSE$SYM;
%PARSE$OUT;
 
%LIST;
%B$OLDSTI_;
%B$STI_;
%B$RUBIRTH;
%B$OUHEAD;
%PLIST;
%EJECT;
%FPT_YC (ECHO = NO);
 
%FPT_LINK (FPTN = KEYIT,
    NAME = PCL,
    ACCT = SYS,
    CMD = KEYIT_CMD);
 
%FPT_LINK (FPTN = UNKEY,
    NAME = PCL,
    ACCT = SYS,
    CMD = UNKEY_CMD);
 
%VLP_ACCT (FPTN = SYS,
    ACCT = ':SYS    ');
 
%VLP_NAME (FPTN = PCL,
    NAME = 'PCL',
    LEN = 3);
 
%FPT_PFIL (BOF=NO,
    DCB = M$NEXTF );
 
%FPT_OPEN(FPTN=NEXTF_OPEN,
         STCLASS=STATIC,
         FUN=IN,
         SHARE = ALL,
         DCB=M$NEXTF,
         EXIST=OLDFILE,
         ACS=SEQUEN,
         ASN=FILE,
         THISF=YES,
         ACCT=VLP_ACCT,
         PASS=VLP_PASS,
         NAME= SI,
         NXTF=YES,
         SN=VLP_SN,
         WSN=VLP_WSN);
 
%FPT_CLOSE (FPTN = NEXTF_CLOSE,
    DCB = M$NEXTF,
    DISP = SAVE);
 
%FPT_OPEN (FPTN = STI_OPEN,
    DCB = M$NEXTF,
    ASN = FILE,
    FUN = IN,
    SHARE = ALL,
    ACCT = VLP_ACCT,
    PASS = VLP_PASS,
    NAME = SI);
 
%FPT_REW (DCB = M$NEXTF);
 
%FPT_PRECORD (N=-1,DCB = M$NEXTF);
 
%FPT_READ (FPTN = STI_READ,
    DCB = M$NEXTF,
    BUF = STI_BUF,
    KEYR = YES,
    KEYS = YES);
 
%FPT_WRITE (FPTN = STI_WRITE,
    DCB = M$NEXTF);
%VLP_NAME (FPTN = STI_KEY);
%VLP_NAME (FPTN = PROD_KEY);
%VLP_NAME (FPTN = TYPE_KEY);
 
 
 
%FPT_OPEN (FPTN = DISP_OPEN,
    DCB = M$LO,
    FUN = CREATE,
    EXIST = NEWFILE,
    ASN = FILE,
    CTG = YES);
 
%FPT_WRITE (FPTN = DISP_WRITE,
    DCB = M$LO);
 
%FPT_CLOSE (FPTN = DISP_CLOSE,
    DCB = M$LO,
    DISP = SAVE);
 
%FPT_OPEN (FPTN = PROD_OPEN,
    DCB = M$UI);
 
%FPT_CLOSE (FPTN = PROD_CLOSE,
    DCB = M$UI,
    DISP = SAVE);
 
%FPT_READ (FPTN = PROD_READ,
    DCB = M$UI,
    BUF = PROD_REC,
    KEY = PROD_KEY,
    KEYR = YES,
    KEYS = YES);
 
%FPT_OPEN (FPTN = OPEN_OU,
    ACS = DIRECT,
    ORG = KEYED,
    DCB = M$OU);
 
%FPT_WRITE (FPTN = WRITE_OU,
    KEY = PROD_KEY,
    BUF = PROD_REC,
    NEWKEY = YES,
    DCB = M$OU);
 
%FPT_READ (FPTN = READ_SI,
    DCB = M$SI,
    BUF = STI_BUF);
 
%FPT_CLOSE (FPTN = SAVE_OU,
    RELG = YES,
    DCB = M$OU,
    DISP = SAVE);
%FPT_READ (FPTN = TFILE_READ,
    DCB = M$LM,
    BUF = TYPE_TEXT,
    KEY = TYPE_KEY,
    KEYR = YES,
    KEYS = YES);
 
%FPT_FID(FPTN=FPT_FID,
         STCLASS=STATIC,
         ACCT=VLP_ACCT,
         ASN=FID_ASN,
         NAME= SI,
         PASS=VLP_PASS,
         RES=FID_RES,
         RESULTS=VLR_FID,
         SN=VLP_SN,
         TEXTFID=FID_TEXT,
         WSN=VLP_WSN);
 
%FPT_UNFID(FPTN=FPT_UNFID,
         STCLASS=STATIC,
         ACCT=VLP_ACCT,
         NAME= SI,
         PASS=VLP_PASS,
         RES=FID_RES,
         ASN=FID_ASN,
         SN=VLP_SN,
         TEXTFID=FID_TEXT,
         WSN=VLP_WSN);
 
%VLR_FID(FPTN=VLR_FID,STCLASS=STATIC);
 
%VLP_PASS(FPTN=VLP_PASS,STCLASS=STATIC);
 
%VLP_WSN(FPTN=VLP_WSN,STCLASS=STATIC);
 
%VLP_SN(FPTN=VLP_SN,STCLASS=STATIC);
 
%VLP_NAME(FPTN= SI,STCLASS=STATIC);
 
%VLP_ACCT(FPTN=VLP_ACCT,STCLASS=STATIC);
 
%FPT_TIME(FPTN=TIMEX,DATE=DATE,
         TIME=TIME,
         DEST=EXT,
         SOURCE=UTS,
         TSTAMP=STAMP);
%EJECT;
DCL DATE CHAR(10) STATIC;
 
DCL TIME CHAR(11) STATIC;
 
DCL STAMP UBIN STATIC;
 
DCL B$TCB$ PTR SYMREF;
 
/* DCLs for Parse of CCBUF
*/
DCL X$PARSE ENTRY (1) ALTRET;
 
DCL STI_OPTIONS UBIN WORD SYMREF;
DCL WILD_STRUCTURE UBIN WORD SYMREF;
DCL BLK$ PTR;
DCL B$JIT$ PTR SYMREF;
DCL PARSE_WORKSPACE (0:99) SBIN STATIC;
 
DCL OPT_LEN UBIN;
DCL N UBIN;
DCL IX UBIN;
 
DCL OPTION_BUF CHAR (256) STATIC;
DCL CCBUF CHAR (OPT_LEN) BASED (CCBUF$);
DCL CCBUF$ PTR;
 
DCL TEXTC$ PTR;
DCL 1 TEXTC BASED (TEXTC$) ALIGNED,
         2 LEN UBIN (9) CALIGNED,
         2 TEXT CHAR (TEXTC.LEN) CALIGNED;
 
DCL CREATE BIT (1) STATIC;
 
DCL 1 SET_ON STATIC ALIGNED,
         2 MODIFY BIT (1) UNAL,
         2 VERSION BIT (1) UNAL,
         2 PRODUCT BIT (1) UNAL,
         2 UTS BIT (1) UNAL,
         2 MARKID BIT (1) UNAL;
 
DCL STI_BUF CHAR (255) STATIC;
 
DCL 1 STI_CON_KEY STATIC,
         2 L# UBIN (9) UNAL,
         2 NAME# UBIN (27) UNAL,
         2 *     char(30);              /* So we don't get keybuf not big'nuf */
 
DCL VERSION CHAR (6) STATIC;
DCL PRODUCT CHAR (24) STATIC;
DCL MARKID CHAR (14) STATIC;
DCL UTS UBIN (36) STATIC;
DCL TYPE CHAR (2) STATIC;
DCL SPACE CHAR (1) STATIC INIT (' ');
 
DCL ERRORCODE UBIN STATIC;
 
DCL ERRMESS (0:11) CHAR (80) STATIC INIT (
/* Error Messages                                      Error Codes */
'   ** ABORTED - Unknown option encountered', /* 0 */
'   ** STI can not process this file type.',
' ',
'   ** STI record does not exist',
'   ** PRODUCT discrepancy',            /* 4 */
'   ** VERSION discrepancy',            /* 5 */
'   ** UTS discrepancy',                /* 6 */
'   ** STI record created',
'   ** Unable to access file',
'   ** Can not write STI record; Key exists or not allowed access.',
'   ** File does not exist',
'   ** Nothing to STI'
    );
 
DCL ERRTABLE  (0:6) UBIN BYTE STATIC;
DCL ERRIX SBIN STATIC INIT (-1);
 
DCL WILD$ PTR STATIC INIT (ADDR (WILD_AREA));
DCL 1 WILD_AREA STATIC ALIGNED,
         2 * UBIN (9) UNAL,
         2 * CHAR (31) UNAL;
 
DCL 1 WILDCARD BASED (WILD$) ALIGNED,
         2 L# UBIN (9) UNAL,
         2 TEXT# CHAR (WILDCARD.L#) UNAL;
DCL WILD_TYPE UBIN (9);
DCL FID_ASN UBIN (9) STATIC ALIGNED;
DCL FID_RES CHAR (4) STATIC;
DCL FID_TEXT CHAR (60) STATIC;
DCL FOUND_NONE BIT (1) STATIC;
 
DCL M$SI DCB;
DCL M$UI DCB;
DCL M$LO DCB;
DCL M$NEXTF DCB;
DCL M$LM DCB;
DCL M$OU DCB;
 
DCL M$SI$ PTR STATIC;
DCL M$LO$ PTR STATIC;
DCL M$NEXTF$ PTR STATIC;
DCL M$UI$ PTR STATIC;
 
DCL SET_ME CHAR (0) STATIC INIT ('SET M$ME NO');
DCL RESET_ME CHAR (0) STATIC INIT ('RESET M$ME');
 
DCL 1 HEAD_INIT STATIC,
         2 * CHAR (5) INIT ('TYPE'),
         2 * CHAR (25) INIT ('PRODUCT'),
         2 * CHAR (8) INIT ('VERSION'),
         2 * CHAR (19) INIT ('TIME STAMP (BIRTH)'),
         2 * CHAR (4) INIT ('NAME');
DCL 1 HEADING REDEF HEAD_INIT CHAR (61);
 
DCL 1 DETAIL STATIC,
         2 TYPE CHAR (2),
         2 * CHAR (3),
         2 PROD CHAR (24),
         2 * CHAR (1),
         2 VERS CHAR (6),
         2 * CHAR (2),
         2 TIME CHAR (5),
         2 * CHAR (2),
         2 DATE CHAR (10),
         2 * CHAR (2),
         2 NAME CHAR (31);
DCL DETAIL_LINE REDEF DETAIL CHAR (88);
DCL 1 EXDETAIL STATIC ALIGNED,
         2 LINE_1,
              3 * CHAR (12) INIT ('File Name = ') UNAL,
              3 NAME CHAR (31) UNAL,
         2 LINE_2,
              3 * CHAR (3) INIT (' ') UNAL,
              3 * CHAR (12) INIT ('File Type = ') UNAL,
              3 TYPE CHAR (40) UNAL,
         2 LINE_3,
              3 * CHAR (3) INIT (' ') UNAL,
              3 * CHAR (10) INIT ('Product = ') UNAL,
              3 PRODUCT CHAR (24) UNAL,
         2 LINE_4,
              3 * CHAR (3) INIT (' ') UNAL,
              3 * CHAR (10) INIT ('Version = ') UNAL,
              3 VERSION CHAR (6) UNAL,
         2 LINE_5,
              3 * CHAR (3) INIT (' ') UNAL,
              3 * CHAR (19) INIT ('Time Stamp at Birth') UNAL,
         2 LINE_6,
              3 * CHAR (6) INIT (' ') UNAL,
              3 * CHAR (7) INIT ('Time ='),
              3 TIME  CHAR (5) UNAL,
         2 LINE_7,
              3 * CHAR (6) INIT (' ') UNAL,
              3 * CHAR (7) INIT ('Date = '),
              3 DATE  CHAR (10) UNAL,
         2 LINE_8,
              3 * CHAR (3) INIT (' ') UNAL,
              3 * CHAR (23) INIT ('Marketing Identifier = ') UNAL,
              3 MARKID CHAR (14) UNAL;
 
DCL 1 PROD_REC STATIC ALIGNED,
         2 CODE CHAR (14) UNAL,
         2 TEXT CHAR (24) UNAL;
 
DCL DISP_BUF CHAR (80) STATIC;
DCL 1 STI_REC ALIGNED BASED (STI$),
         2 * CHAR (1) CALIGNED,
         2 TYPE CHAR (5) CALIGNED,
         2 * CHAR (14) CALIGNED,
         2 VERSION,
              3 ROOT CHAR (3),
              3 SUFFIX CHAR (3);
 
DCL STI$ PTR STATIC INIT (ADDR (B$STI_));
 
DCL DSUM BIT(1) STATIC;
DCL TF_OK BIT (1) STATIC;
DCL PROD_ON BIT (1) STATIC;
DCL FIRST BIT (1) STATIC INIT ('1'B);
DCL CREATE_VERSION CHAR (6);
DCL TYPE_TEXT CHAR (40) STATIC;
 
DCL ORG UBIN (9) STATIC;
DCL 1 KEYIT_CMD STATIC ALIGNED,
         2 LEN UBIN (9) INIT (92) UNAL,
         2 * CHAR (2) INIT ('C ') UNAL,
         2 INFID CHAR (40) UNAL,
         2 * CHAR (6) INIT (' OVER ') UNAL,
         2 OUTFID CHAR (40) UNAL,
         2 * CHAR (4) INIT ('(LN)') UNAL;
 
DCL 1 UNKEY_CMD STATIC ALIGNED,
         2 LEN UBIN (9) INIT (93) UNAL,
         2 * CHAR (2) INIT ('C ') UNAL,
         2 INFID CHAR (40) UNAL,
         2 * CHAR (6) INIT (' OVER ') UNAL,
         2 OUTFID CHAR (40) UNAL,
         2 * CHAR (5) INIT ('(NLN)') UNAL;
 
DCL STIING CHAR (0) STATIC INIT ('..STIing');
DCL WIX UBIN WORD STATIC;
DCL 1 WPIECE (0:15)  ALIGNED,
         2 L# UBIN (9) UNAL,
         2 TEXT# CHAR (16) UNAL;
 
DCL NPIECES UBIN WORD STATIC;
DCL PDEF CHAR (2) BASED (PD$);
DCL PD$ PTR STATIC INIT (ADDR(SI.NAME#));
%EJECT;
     M$SI$ = DCBADDR (DCBNUM (M$SI));
     M$LO$ = DCBADDR (DCBNUM (M$LO));
     M$NEXTF$ = DCBADDR (DCBNUM (M$NEXTF));
     M$UI$ = DCBADDR (DCBNUM (M$UI));
 
     IF B$JIT.PRFLAGS.OU
     THEN
     DO;
          CALL CREATE_PROD_OR_TYPE;
          RETURN;
        END;
 
     IF M$UI$->F$DCB.ASN# = %FILE#
     THEN
     DO;
          CALL M$OPEN (PROD_OPEN);
          PROD_ON = '1'B;
        END;
     ELSE
          PROD_ON = '0'B;
 
     SET_ON = '0'B;
     CREATE = '0'B;
     DSUM = '0'B;
 
     TF_OK = '1'B;
     FPT_YC.CMD_ = VECTOR (SET_ME);
     CALL M$YC (FPT_YC);
%EJECT;
/*       GET OPTIONS FROM CCBUF        */
 
     OPT_LEN = B$JIT.CCARS - B$JIT.CCDISP;
 
     IF OPT_LEN > 0
     THEN
     DO;
          OPTIONS_PCB.NCHARS = OPT_LEN;
          CCBUF$ = PINCRC (ADDR (B$JIT.CCBUF),B$JIT.CCDISP);
          OPTION_BUF = CCBUF;
 
          CALL X$PARSE (OPTIONS_PCB) ALTRET (BAD_OPT);
 
          DO NEVER;
BAD_OPT:       ;
               DISP_WRITE.BUF_ = VECTOR (ERRMESS (0));
               CALL M$WRITE (DISP_WRITE);
               GOTO END_OF_IT;
             END;
 
          DO N = 0 TO OPTIONS_PCB.OUT$ -> OUT$BLK.NSUBLKS - 1;
 
               DO CASE (OPTIONS_PCB.OUT$ -> OUT$BLK.SUBLK$ (N) ->
                    OUT$BLK.CODE);
               CASE (%CREATE);
                  SET_ON.MODIFY = '1'B;
                  CREATE = '1'B;
               CASE (%SUMMARY);
                  DSUM = '1'B;
               CASE (%MODIFY);
                  SET_ON.MODIFY = '1'B;
               CASE (%VERSION);
                  SET_ON.VERSION = '1'B;
                  VERSION = OPTIONS_PCB.OUT$ -> OUT$BLK.SUBLK$ (N) ->
                       OUT$BLK.SUBLK$ (0) -> OUT$SYM.TEXT;
 
               CASE (%MARKID);
                  SET_ON.MARKID = '1'B;
                  MARKID = OPTIONS_PCB.OUT$ -> OUT$BLK.SUBLK$ (N) ->
                       OUT$BLK.SUBLK$ (0) -> OUT$SYM.TEXT;
 
               CASE (%PRODUCT);
                  SET_ON.PRODUCT = '1'B;
                  PRODUCT = OPTIONS_PCB.OUT$ -> OUT$BLK.SUBLK$ (N) ->
                       OUT$BLK.SUBLK$ (0) -> OUT$SYM.TEXT;
 
               CASE (%UTS);
                  SET_ON.UTS = '1'B;
                  CALL M$TIME (TIMEX);
               END;
             END;
        END;
 %EJECT;
/*       CHECK TO SEE IF FID IS WILDCARDED       */
 
     FPT_UNFID.V.DCB# = DCBNUM (M$SI);
     CALL M$UNFID (FPT_UNFID);
     CALL M$FID (FPT_FID);
 
     CALL INDEX1 (WIX,'?',SI.NAME#,0) ALTRET (NOT_WILD);
     WILD_PCB.NCHARS = SI.L#;
     CALL X$PARSE (WILD_PCB) ALTRET (NOT_WILD);
 
 
     WILD_TYPE = WILD_PCB.OUT$ -> OUT$BLK.CODE;
 
     DO CASE (WILD_TYPE);
     CASE (%WILD);
        WILDCARD.TEXT#= SPACE;
        WILDCARD.L# = 1;
        SI.L# = 1;
     CASE (%WALL);
        NPIECES = WILD_PCB.OUT$ -> OUT$BLK.NSUBLKS;
        DO N = 0 TO NPIECES - 1;
             TEXTC$ = WILD_PCB.OUT$ -> OUT$BLK.SUBLK$ (N) ->
                  OUT$SYM.TEXTC$;
             WPIECE (N) = TEXTC;
           END;
     CASE (ELSE);
        TEXTC$ = WILD_PCB.OUT$ -> OUT$BLK.SUBLK$ (0) -> OUT$SYM.TEXTC$;
 
        WILDCARD.L# = TEXTC.LEN;
        WILDCARD.TEXT#= TEXTC.TEXT;
     END;
%EJECT;
     ERRORCODE = 0;
     NEXTF_OPEN.V.INITZ.SCRUB# = '1'B;  /* SCRUB DCB */
     DO CASE (WILD_TYPE);
     CASE (%WILD,%WBOTH,%WLEFT);
        SI.NAME# = '$';
        SI.L# = 1;
     CASE (%WRIGHT);
        SI.NAME# = WILDCARD.TEXT#;
        SI.L# = WILDCARD.L#;
     CASE (%WALL);
        IF SUBSTR (SI.NAME#,SI.L#-1,1) = '?'
        THEN
             WPIECE.TEXT# (NPIECES) = '#';
        IF SUBSTR (SI.NAME#,0,1) = '?'
        THEN
        DO;
             SI.NAME# = '$';
             SI.L# = 1;
           END;
        ELSE
        DO;
             SI.NAME# = WPIECE.TEXT# (0);
             SI.L# = WPIECE.L# (0);
           END;
        WILDCARD.TEXT#= SI.NAME#;
        WILDCARD.L# = SI.L#;
     END;
     FPT_UNFID.V.DCB# = DCBNUM (M$NEXTF);
 
     DISP_WRITE.BUF_ = VECTOR (STIING);
     CALL M$WRITE (DISP_WRITE);
     FOUND_NONE = '1'B;
 
     DO WHILE (ERRORCODE ~= EOA#);      /* DO TILL END OF ACCOUNT */
 
          CALL M$OPEN (NEXTF_OPEN) ALTRET (OPEN_ERR);
          CALL M$UNFID (FPT_UNFID);     /* GET NAME OF FID */
          CALL M$FID (FPT_FID);         /* FILL BUFFERS */
 
          TYPE = M$NEXTF$ -> F$DCB.TYPE#;
 
          CALL M$CLOSE (NEXTF_CLOSE);
          DO NEVER;
 
OPEN_ERR:      ;
               TYPE = SPACE;
               B$STI_.PRODUCT = SPACE;
               B$STI_.VERSION = SPACE;
               TIME = SPACE;
               DATE = SPACE;
               CALL M$UNFID (FPT_UNFID); /* GET NAME OF FID */
               CALL M$FID (FPT_FID);    /* FILL BUFFERS */
               ERRORCODE = B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR.CODE;
               IF ERRORCODE = FIB#
               THEN
               DO;
                    ERRIX = ERRIX +1;
                    ERRTABLE (ERRIX) = 2;
                    CALL CONCAT (ERRMESS (2),'  ** File ',
                         SUBSTR(SI.NAME#,0,SI.L#),' is busy');
                  END;
               ELSE
                    IF ERRORCODE ~= EOA#
                    THEN
                    DO;
                         ERRIX = ERRIX + 1;
                         ERRTABLE (ERRIX) = 8;
                       END;
                    ELSE
                         GOTO END_OF_IT;
             END;
%EJECT;
/*  CHECK TO SEE IF FID MATCHES WILDCARD.TEXT#
*/
          DO CASE (WILD_TYPE);
 
          CASE (%WILD);
          CASE (%WBOTH);
             IX = 0;
             CALL INDEX (IX,WILDCARD.TEXT#,SI.NAME#) ALTRET (NOMATCH);
          CASE (%WLEFT);
             IX = SI.L# - WILDCARD.L#;
             CALL INDEX (IX,WILDCARD.TEXT#,SI.NAME#,IX) ALTRET (NOMATCH);
          CASE (%WRIGHT);
             IF SUBSTR (WILDCARD.TEXT#,0,1) ~= SUBSTR (SI.NAME#,0,1)
             THEN
                  GOTO END_OF_IT;
             IF SUBSTR (SI.NAME#,0,WILDCARD.L#) ~= WILDCARD.TEXT#
             THEN
                  GOTO NOMATCH;
          CASE (%WALL);
             IF WILDCARD.TEXT#~= '$'
             THEN
                  IF SUBSTR (WILDCARD.TEXT#,0,1) < SUBSTR (SI.NAME#,0,1)
                  THEN
                       GOTO END_OF_IT;
             WIX = 0;
             DO N = 0 TO NPIECES - 1;
                  TEXTC$ = ADDR (WPIECE (N));
                  CALL INDEX (WIX,TEXTC.TEXT,SI.NAME#,WIX)
                       ALTRET (NOMATCH);
                  WIX = WIX + TEXTC.LEN +1;
                END;
             IF WPIECE.TEXT# (NPIECES) ~= '#'
             THEN
                  IF SUBSTR (SI.NAME#,SI.L# - TEXTC.LEN,
                       TEXTC.LEN) ~= TEXTC.TEXT
                  THEN
                       GOTO NOMATCH;
          CASE (ELSE);
             GOTO NOT_WILD;
          END;
 
          CALL FOUND_MATCH;
 
 
NOMATCH:  ;
          NEXTF_OPEN.V.INITZ.SCRUB# = '0'B;
          NEXTF_OPEN.V.OPER.THISF# = '0'B;
        END;
     DO NEVER;
 
NOT_WILD: ;
          CALL M$OPEN (STI_OPEN)  ALTRET (NWALT);
          TYPE = M$NEXTF$ -> F$DCB.TYPE#;
 
          DISP_WRITE.BUF_ = VECTOR (STIING);
          CALL M$WRITE (DISP_WRITE);
 
          CALL M$CLOSE (NEXTF_CLOSE);
          CALL FOUND_MATCH;
 
          DO NEVER;
NWALT:         ;
               ERRORCODE = B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR.CODE;
               DO CASE (ERRORCODE);
               CASE (FDE#);
                  CALL CONCAT (ERRMESS (10),'  ** File ',SUBSTR (SI.NAME#,0,SI.L#),
                       '  does not exist.');
                  DISP_WRITE.BUF_ = VECTOR (ERRMESS (10));
               CASE (FIB#);
                  CALL CONCAT (ERRMESS (2),'  ** File ',
                       SUBSTR(SI.NAME#,0,SI.L#),' is busy');
                  DISP_WRITE.BUF_ = VECTOR (ERRMESS (2));
               CASE (ELSE);
                  DISP_WRITE.BUF_ = VECTOR (ERRMESS (8));
               END;
               CALL M$WRITE (DISP_WRITE);
               GOTO END_OF_IT;
             END;
        END;
%EJECT;
END_OF_IT: ;
     IF FOUND_NONE
     THEN
     DO;
          DISP_WRITE.BUF_ = VECTOR (ERRMESS (11));
          CALL M$WRITE (DISP_WRITE);
        END;
 
     FPT_YC.CMD_ = VECTOR (RESET_ME);
     CALL M$YC (FPT_YC);
     CALL M$EXIT;
%EJECT;
FOUND_MATCH: PROC;
 
     FOUND_NONE = '0'B;
     B$STI_ = ASCBIT (SPACE);
     TIME = SPACE;
     DATE = SPACE;
     IF (SUBSTR (TYPE,0,1) ~= 'R'
          AND (SUBSTR (TYPE,0,1) ~= 'O' OR TYPE = 'OJ')
          AND TYPE ~= 'IX'
          AND TYPE ~= 'IH'
          AND TYPE ~= 'Dd'
          AND TYPE ~= 'Sc'
          AND TYPE ~= 'Ju'
          AND TYPE ~= 'LE'
          AND TYPE ~= 'ST'
          AND TYPE ~= 'TM'
          AND TYPE ~= 'WA'
          AND TYPE ~= 'S6')
     THEN
     DO;
          ORG = %INDEXED#;
          GOTO NOT_TYPE;
        END;
 
     STI_OPEN.V.FUN# = %IN#;
     CALL M$OPEN (STI_OPEN) ALTRET (ABORTED);
     STI_OPEN.V.FUN# = %UPDATE#;
 
     ERRIX = -1;
     IF SUBSTR (TYPE,0,1) = 'R'
          OR SUBSTR (TYPE,0,1) = 'O'
          OR TYPE = 'IX'
          OR TYPE = 'IH'
          OR TYPE = 'LE'
          OR TYPE = 'Dd'
     THEN
     DO;
          CALL RO_FETCH ALTRET (RO_CREATE);
          IF SET_ON = '1000'B
          THEN
               GOTO RO_CREATE;
        END;
     ELSE
     DO;
          CALL CONCAT (KEYIT_CMD.INFID,SUBSTR (SI.NAME#,0,SI.L#),
               '.',VLP_ACCT.ACCT#);
          KEYIT_CMD.OUTFID = KEYIT_CMD.INFID;
          UNKEY_CMD.OUTFID = KEYIT_CMD.INFID;
          UNKEY_CMD.INFID = KEYIT_CMD.INFID;
          ORG = M$NEXTF$ -> F$DCB.ORG#;
          if SET_ON.MODIFY = '1'B  and ORG = %CONSEC#
          THEN
          DO;
               CALL M$CLOSE (NEXTF_CLOSE);
               CALL M$LINK (KEYIT);
               CALL M$OPEN (STI_OPEN);
               IF M$NEXTF$->F$DCB.ORG# = %CONSEC#
               THEN
               DO;
                    CALL M$CLOSE (NEXTF_CLOSE);
                    ERRIX = ERRIX + 1;
                    ERRTABLE (ERRIX) = 8;
                    GOTO ABORTED;
                  END;
             END;
          IF TYPE = 'ST'
               OR TYPE = 'S6'
               OR TYPE = 'TM'
               or TYPE = 'WA'
          THEN
          DO;
               CALL T6_FETCH ALTRET (T6_CREATE);
               IF SET_ON = '1000'B
               THEN
                    GOTO T6_CREATE;
             END;
          ELSE
          DO;
NOT_TYPE:      ;
               ERRIX = ERRIX + 1;
               ERRTABLE (ERRIX) = 1;
               GOTO ABORTED;
             END;
        END;
%EJECT;
     DO NEVER;
 
RO_CREATE: ;
          IF SET_ON.MODIFY
          THEN
          DO;
               CALL CREATE;
               STI_KEY.L# = 3;
               STI_KEY.NAME# = 'STI';
             END;
          ELSE
          DO;
               ERRIX = ERRIX + 1;
               ERRTABLE (ERRIX) = 3;
               GOTO ABORTED;
             END;
 
        END;
%EJECT;
     DO NEVER;
T6_CREATE:
          IF SET_ON.MODIFY
          THEN
          DO;
               STI_CON_KEY.L# = 3;
               CALL M$PFIL (FPT_PFIL);
               CALL CREATE;
             END;
          ELSE
          DO;
               ERRIX = ERRIX + 1;
               ERRTABLE (ERRIX) = 3;
               GOTO ABORTED;
             END;
        END;
%EJECT;
     IF SET_ON.MODIFY
     THEN
          CALL MODIFY ALTRET (ABORTED);
 
     CALL VERIFY;
ABORTED: ;
 
     CALL DISPLAY;
 
 
     CALL M$CLOSE (NEXTF_CLOSE);
     IF SET_ON.MODIFY = '1'B  and  ORG = %CONSEC#
     THEN
          CALL M$LINK (UNKEY);
 
     RETURN;
END FOUND_MATCH;
 
%EJECT;
CREATE: PROC;
 
     ERRIX = ERRIX + 1;
     ERRTABLE (ERRIX) = 7;
     CALL STISUB (CREATE_VERSION);
     B$STI_.VERSION = CREATE_VERSION;
     IF  NOT PROD_ON
     THEN
          GOTO WHOCARES;
 
     PROD_KEY.L# = 25;
     PROD_KEY.NAME# = SI.NAME#;
     PROD_REC.TEXT = ' ';
     CALL M$READ (PROD_READ) ALTRET(WHOCARES);
     B$STI_.PRODUCT = PROD_REC.TEXT;
     B$STI_.MARKID = PROD_REC.CODE;
     DO NEVER;
WHOCARES: ;
          B$STI_.PRODUCT = SPACE;
          B$STI_.MARKID = SPACE;
        END;
 
     IF SUBSTR (TYPE,0,1) = 'R'
     THEN
     DO;
          STI_READ.BUF_ = VECTOR (B$RUBIRTH);
          STI_KEY.L# = 5;
          STI_KEY.NAME# = 'BIRTH';
          CALL M$READ (STI_READ);
 
          STAMP = B$RUBIRTH.CREATE_UTS;
          CALL M$TIME (TIMEX);
          B$STI_.TIME = TIME;
          B$STI_.DATE = DATE;
          B$STI_.SCOMMENT = '*RU*';
          B$STI_.ECOMMENT = '*RU*';
 
        END;
     ELSE
          IF SUBSTR (TYPE,0,1) = 'O'
               AND TYPE ~= 'OP'
               AND TYPE ~= 'OJ'
          THEN
          DO;
               CALL M$REW (FPT_REW);
               STI_READ.V.KEYS# = '0'B;
               STI_READ.BUF_ = VECTOR (B$OUHEAD);
               STI_BUF = SPACE;
               CALL M$READ (STI_READ);
               STI_READ.V.KEYS# = '1'B;
               STAMP = B$OUHEAD.UTS;
               CALL M$TIME (TIMEX);
               B$STI_.TIME = TIME;
               B$STI_.DATE = DATE;
               B$STI_.SCOMMENT = '*OU*';
               B$STI_.ECOMMENT = '*OU*';
 
             END;
          ELSE
          DO;
               STAMP = 0;
               TIME = SPACE;
               DATE = SPACE;
               TIMEX.V.SOURCE# = 0;
               CALL M$TIME (TIMEX);
               TIMEX.V.SOURCE# = 4;
               B$STI_.TIME = TIME;
               B$STI_.DATE = DATE;
 
               IF TYPE = 'ST'
                    OR TYPE = 'TM'
                    OR TYPE = 'WA'
               THEN
               DO;
                    B$STI_.SCOMMENT = '.*STI*';
                    B$STI_.ECOMMENT = ' *STI*';
                  END;
               ELSE
                    IF TYPE = 'S6'
                         OR TYPE = 'SP'
                    THEN
                    DO;
                         B$STI_.SCOMMENT = '/*STI*';
                         B$STI_.ECOMMENT = ' */';
                       END;
                    ELSE
                    DO;
                         B$STI_.SCOMMENT = '*STI*';
                         B$STI_.ECOMMENT = '*STI*';
                       END;
             END;
     RETURN;
END CREATE;
%EJECT;
MODIFY: PROC ALTRET;
 
     CALL M$CLOSE (NEXTF_CLOSE) ALTRET (MODALT);
     CALL M$OPEN (STI_OPEN) ALTRET (MODALT);
 
     IF SET_ON.VERSION
     THEN
          IF VERSION = 'REL'
          THEN
          DO;
               STI_REC.VERSION.SUFFIX = SPACE;
               VERSION = STI_REC.VERSION.ROOT;
             END;
          ELSE
               B$STI_.VERSION = VERSION;
     IF SET_ON.PRODUCT
     THEN
          B$STI_.PRODUCT = PRODUCT;
 
     IF SET_ON.MARKID
     THEN
          B$STI_.MARKID = MARKID;
 
     IF SET_ON.UTS
     THEN
     DO;
          STAMP = 0;
          TIME = SPACE;
          DATE = SPACE;
          TIMEX.V.SOURCE# = 0;
          CALL M$TIME (TIMEX);
          TIMEX.V.SOURCE# = 0;
          B$STI_.TIME = TIME;
          B$STI_.DATE = DATE;
        END;
 
     STI_WRITE.BUF_ = VECTOR (B$STI_);
     CALL M$WRITE (STI_WRITE) ALTRET (MODALT);
 
     RETURN;
MODALT: ;
     ERRIX = 0;
     ERRTABLE (ERRIX) = 9;
     B$STI_ = ASCBIT (SPACE);
     ALTRETURN;
END MODIFY;
%EJECT;
DISPLAY: PROC;
 
     STI_WRITE.V.ONEWKEY# = '1'B;
     STI_WRITE.V.NEWKEY# = '0'B;
 
     IF DSUM
     THEN
          CALL DISPSUM;
     ELSE
          CALL DISPFULL;
 
     DO WHILE (ERRIX >= 0);
          DISP_WRITE.BUF_ = VECTOR (ERRMESS (ERRTABLE(ERRIX)));
          CALL M$WRITE (DISP_WRITE);
          ERRIX = ERRIX - 1;
        END;
     ERRIX = -1;
 
     RETURN;
END DISPLAY;
%EJECT;
DISPSUM: PROC;
     DETAIL_LINE = SPACE;
 
     DETAIL.TYPE = TYPE;
     DETAIL.PROD = B$STI_.PRODUCT;
     DETAIL.VERS = B$STI_.VERSION;
     DETAIL.TIME = B$STI_.TIME;
     DETAIL.DATE = B$STI_.DATE;
     DETAIL.NAME = SI.NAME#;
 
     IF FIRST
     THEN
     DO;
          FIRST = '0'B;
          DISP_WRITE.BUF_ = VECTOR (HEADING);
          CALL M$WRITE (DISP_WRITE);
        END;
 
     DISP_WRITE.BUF_ = VECTOR (DETAIL_LINE);
     CALL M$WRITE (DISP_WRITE);
     RETURN;
END DISPSUM;
%EJECT;
DISPFULL: PROC;
 
     IF TF_OK
     THEN
     DO;
          TYPE_KEY.NAME# = TYPE;
          TYPE_KEY.L# = 2;
          TYPE_TEXT = ' ';
          CALL M$READ (TFILE_READ) ALTRET (TF_BAD);
        END;
     ELSE
     DO;
TF_BAD:   ;
          TYPE_TEXT = TYPE;
        END;
 
     EXDETAIL.LINE_1.NAME = SI.NAME#;
     EXDETAIL.LINE_2.TYPE = TYPE_TEXT;
     EXDETAIL.LINE_3.PRODUCT = B$STI_.PRODUCT;
     EXDETAIL.LINE_4.VERSION = B$STI_.VERSION;
     EXDETAIL.LINE_6.TIME = B$STI_.TIME;
     EXDETAIL.LINE_7.DATE = B$STI_.DATE;
     EXDETAIL.LINE_8.MARKID = B$STI_.MARKID;
 
     DISP_WRITE.BUF_ = VECTOR (SPACE);
     CALL M$WRITE (DISP_WRITE);
     DISP_WRITE.BUF_ = VECTOR (EXDETAIL.LINE_1);
     CALL M$WRITE (DISP_WRITE);
     DISP_WRITE.BUF_ = VECTOR (EXDETAIL.LINE_2);
     CALL M$WRITE (DISP_WRITE);
     DISP_WRITE.BUF_ = VECTOR (EXDETAIL.LINE_3);
     CALL M$WRITE (DISP_WRITE);
     DISP_WRITE.BUF_ = VECTOR (EXDETAIL.LINE_4);
     CALL M$WRITE (DISP_WRITE);
     DISP_WRITE.BUF_ = VECTOR (EXDETAIL.LINE_5);
     CALL M$WRITE (DISP_WRITE);
     DISP_WRITE.BUF_ = VECTOR (EXDETAIL.LINE_6);
     CALL M$WRITE (DISP_WRITE);
     DISP_WRITE.BUF_ = VECTOR (EXDETAIL.LINE_7);
     CALL M$WRITE (DISP_WRITE);
     DISP_WRITE.BUF_ = VECTOR (EXDETAIL.LINE_8);
     CALL M$WRITE (DISP_WRITE);
 
     RETURN;
END DISPFULL;
%EJECT;
T6_FETCH: PROC ALTRET;
dcl ERR# ubin;
 
     STI_READ.KEY_ = VECTOR (STI_CON_KEY);
     STI_WRITE.KEY_ = VECTOR (STI_CON_KEY);
 
     CALL M$REW (FPT_REW);
     STI_READ.V.KEYS# = '0'B;
 
T6_TOP: ;
     B$STI_ = ASCBIT (' ');
     STI_READ.BUF_ = VECTOR (B$OLDSTI_);
 
     CALL M$READ (STI_READ) ALTRET (T6_ALT);
     CALL OLD_STI;
T6_RETRY:;
     IF SUBSTR (B$STI_.SCOMMENT,1,5) = '*STI*'
     THEN
     DO;
          STI_WRITE.V.ONEWKEY# = '1'B;
          STI_READ.V.KEYS# = '1'B;
          IF CREATE
          THEN
               ALTRETURN;
 
          RETURN;
        END;
     ELSE
          GOTO T6_TOP;
 
T6_ALT: ;
     ERR# = B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR.CODE;
     if ERR# = %E$LD AND SUBSTR(B$OLDSTI_.SCOMMENT,1,5)='*STI*' THEN DO;
          CALL M$PRECORD (FPT_PRECORD);
          STI_READ.BUF_ = VECTOR (B$STI_);
          CALL M$READ (STI_READ) ALTRET (RO_ALT1);
          GOTO T6_RETRY;
        END;
RO_ALT1:;
     if TYPE = 'WA' then
          if ERR# = %E$LD or ERR# = %E$BADVECT1
          then goto T6_TOP;
     STI_CON_KEY.NAME# = 0;
     if TYPE = 'WA' then STI_CON_KEY.NAME# = 21801033;
     STI_CON_KEY.L# = 3;
     B$STI_ = ASCBIT (' ');
     STI_WRITE.V.ONEWKEY# = '0'B;
     STI_READ.V.KEYS# = '1'B;
     ALTRETURN;
END T6_FETCH;
%EJECT;
RO_FETCH: PROC ALTRET;
dcl ERR# ubin;
 
     STI_READ.KEY_ = VECTOR (STI_KEY);
     STI_WRITE.KEY_ = VECTOR (STI_KEY);
 
     STI_KEY.L# = 3;
     STI_KEY.NAME# = 'STI';
 
     B$STI_ = ASCBIT (' ');
     STI_READ.BUF_ = VECTOR (B$OLDSTI_);
     IF CREATE THEN GOTO RO_ALT1;
 
     CALL M$READ (STI_READ) ALTRET (RO_ALT);
     CALL OLD_STI;
 
     RETURN;
 
RO_ALT: ;
     ERR# = B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR.CODE;
     if ERR# = %E$LD THEN DO;
          STI_READ.BUF_ = VECTOR (B$STI_);
          CALL M$READ (STI_READ) ALTRET (RO_ALT1);
          RETURN;
        END;
RO_ALT1:;
     B$STI_ = ASCBIT (' ');
     ALTRETURN;
END RO_FETCH;
%EJECT;
OLD_STI: PROC;
 
     B$STI_.SCOMMENT = B$OLDSTI_.SCOMMENT;
     B$STI_.PRODUCT = B$OLDSTI_.PRODUCT;
     B$STI_.VERSION = B$OLDSTI_.VERSION;
     B$STI_.TIME = B$OLDSTI_.TIME;
     B$STI_.DATE = B$OLDSTI_.DATE;
     B$STI_.MARKID = B$OLDSTI_.MARKID;
     B$STI_.ECOMMENT = B$OLDSTI_.ECOMMENT;
END OLD_STI;
%EJECT;
VERIFY: PROC;
 
     IF SET_ON.PRODUCT
     THEN
          IF B$STI_.PRODUCT ~= PRODUCT
          THEN
          DO;
               ERRIX = ERRIX + 1;
               ERRTABLE (ERRIX) = 4;
             END;
     IF SET_ON.VERSION
     THEN
          IF B$STI_.VERSION ~= VERSION
          THEN
          DO;
               ERRIX = ERRIX + 1;
               ERRTABLE (ERRIX) = 5;
             END;
END VERIFY;
%EJECT;
STISUB: PROC (RUVERS);
%B$RECORDSUBS;
%VLP_VECTOR (FPTN = DNAMV , SEGID = '0'B);
%VLP_VECTOR (FPTN = SDEFV , SEGID = '0'B);
%VLP_VECTOR (FPTN = CODEV , SEGID = '0'B);
%FPT_GDS (FPTN = GDS);
%FPT_READ (FPTN = READ , KEYS = YES , DCB = M$NEXTF , KEY = HEADKEY , BUF = HEAD);
DCL RUVERS CHAR (6);
DCL I UBIN;
DCL J UBIN;
DCL SI$ PTR;
DCL CODE$ PTR;
DCL SDEF$ PTR;
DCL DNAM$ PTR;
DCL 1 B_VERS CONSTANT,
         2 * UBIN HALF HALIGNED INIT(9),
         2 * CHAR(0) INIT('B_VERSION');
/*
*/
%B$DNAME (NAME = DNAME , STCLASS = "BASED(DNAM$)");
%B$SDEF  (NAME = SDEF , STCLASS = "BASED(SDEF$)");
DCL 1 VERS BASED (CODE$) ALIGNED,
         2 C UBIN BYTE CALIGNED,
         2 T CHAR(VERS.C);
%B$HEAD  (NAME = HEAD , STCLASS = STATIC);
%B$RUHEADKEY (NAME = HEADKEY , STCLASS = CONSTANT);
%B$RUKEY (NAME = RUKEY);
     RUVERS = 'Create';
     READ.BUF_ = VECTOR (HEAD);
     READ.KEY_ = VECTOR (HEADKEY);
     IF M$NEXTF$ -> F$DCB.ORG# ~= %KEYED# THEN RETURN;
     IF NOT (M$NEXTF$ -> F$DCB.TYPE# = 'R '
          OR M$NEXTF$ -> F$DCB.TYPE# = 'Rf')
     THEN
          RETURN;
     CALL M$READ (READ) ALTRET (NORU);
     GDS.V.SEGSIZE# = HEAD.NRECSIZE;
     GDS.RESULTS_ = VECTOR (DNAMV);
     CALL M$GDS (GDS) ALTRET (WRAPUP);
     GDS.V.SEGSIZE# = HEAD.EDRECSIZE;
     GDS.RESULTS_ = VECTOR (SDEFV);
     CALL M$GDS (GDS) ALTRET (WRAPUP);
     GDS.V.SEGSIZE# = HEAD.PRECSIZE;
     GDS.RESULTS_ = VECTOR (CODEV);
     CALL M$GDS (GDS) ALTRET (WRAPUP);
     READ.BUF_ = DNAMV;
     READ.KEY_ = VECTOR (RUKEY);
     RUKEY.TYPE = %TYPDNAM;
     RUKEY.NODE = 0;
     RUKEY.PAGE = 0;
     CALL M$READ (READ) ALTRET (NORU);
     READ.BUF_ = SDEFV;
     RUKEY.TYPE = %TYPSDEF;
     CALL M$READ (READ) ALTRET (NORU);
     J = M$NEXTF$ -> F$DCB.ARS# / 8;
     READ.BUF_ = CODEV;
     RUKEY.TYPE = %TYPPROG;
     SDEF$ = SDEFV.PTR$;
     DO I = 1 TO J;
          DNAM$ = PINCRW (DNAMV.PTR$ , SDEF.NPOINTER);
          IF DNAME = B_VERS
          THEN DO;
               RUKEY.ISADDR = SDEF.AD.ISADDR / HEAD.PRECSIZE;
               RUKEY.ISADDR = RUKEY.ISADDR * HEAD.PRECSIZE;
               CALL M$READ (READ) ALTRET (NORU);
               CODE$ = PINCRW (CODEV.PTR$ ,
                    MOD (SDEF.AD.ISADDR , HEAD.PRECSIZE));
               RUVERS = VERS.T;
               GOTO WRAPUP;
             END;
          SDEF$ = PINCRW (SDEF$ , 2);
        END;
     RUVERS = 'Create';
     GOTO WRAPUP;
NORU: ;
     RUVERS = 'CRAP';
WRAPUP:
     GDS.V.SEGSIZE# = HEAD.NRECSIZE;
     GDS.RESULTS_ = VECTOR (DNAMV);
     CALL M$FDS (GDS) ALTRET (NOMEM);
     GDS.V.SEGSIZE# = HEAD.EDRECSIZE;
     GDS.RESULTS_ = VECTOR (SDEFV);
     CALL M$FDS (GDS) ALTRET (NOMEM);
     GDS.V.SEGSIZE# = HEAD.PRECSIZE;
     GDS.RESULTS_ = VECTOR (CODEV);
     CALL M$FDS (GDS) ALTRET (NOMEM);
NOMEM: RETURN;
END STISUB;
%EJECT;
CREATE_PROD_OR_TYPE: PROC;
 
     PROD_ON = '1'B;
     PROD_KEY.L# = 25;
     DO UNTIL STI_BUF ~= ' ' AND SUBSTR(STI_BUF,0,1) ~= '"';
          STI_BUF = ' ';
          CALL M$READ(READ_SI) ALTRET(DONE);
        END;
     CALL M$OPEN(OPEN_OU) ALTRET(DONE);
     IF SUBSTR(STI_BUF,2,1) = ' '
     THEN
     DO;
          PROD_ON = '0'B;
          WRITE_OU.KEY_ = VECTOR(TYPE_KEY);
          WRITE_OU.BUF_.BUF$ = ADDR(STI_BUF);
          TYPE_KEY.L# = 2;
        END;
 
     DO FOREVER;
          IF SUBSTR(STI_BUF,0,1) = '"'
          THEN
               GOTO NOWRITE;
          IF PROD_ON
          THEN
          DO;
               IF SUBSTR(STI_BUF,0,1) ~= ' '
               THEN
               DO;                      /* Got a new MI, put data in PROD_REC */
                    PROD_REC.CODE = SUBSTR(STI_BUF,0,14);
                    PROD_REC.TEXT = SUBSTR(STI_BUF,14,24);
                    WRITE_OU.BUF_.BOUND = M$SI$->F$DCB.ARS#-1;
                    GOTO NOWRITE;
                  END;
               IF STI_BUF = ' ' THEN GOTO NOWRITE;
               DO UNTIL SUBSTR(STI_BUF,0,1) ~= ' ';
                    STI_BUF = SUBSTR(STI_BUF,1);
                  END;
               PROD_KEY.NAME# = STI_BUF;
             END;
          ELSE
          DO;
               TYPE_KEY.NAME# = SUBSTR(STI_BUF,0,2);
               STI_BUF = SUBSTR(STI_BUF,3);
               WRITE_OU.BUF_.BOUND = M$SI$->F$DCB.ARS#-4;
             END;
          CALL M$WRITE(WRITE_OU) WHENALTRETURN DO;
               WRITE_OU.V.DCB# = DCBNUM(M$LO);
               CALL M$WRITE(WRITE_OU);
               CALL M$MERC;
             END;
NOWRITE:  ;
          STI_BUF = ' ';
          CALL M$READ(READ_SI) ALTRET (DONE);
        END;
DONE: ;
     IF B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR.CODE ~= %E$EOF THEN CALL M$MERC;
     CALL M$CLOSE(SAVE_OU);
END CREATE_PROD_OR_TYPE;
END STI;
