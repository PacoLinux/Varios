

r22:55 NOV 20 '97 MAKE_Cc13.:XSI                                            1    
A    1      /*M*    make:h   -- C structures for the make program   */
A    2      /*T***********************************************************/
A    3      /*T*                                                         */
A    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
A    5      /*T*                                                         */
A    6      /*T***********************************************************/
A    7
A    8      #ifndef MAKE_H_INCLUDED
A    9      #define MAKE_H_INCLUDED
A   10      #define CONST const
A   11
A   12      #ifdef UNSIGNED_TIME
A   13      #define BEGINNING_OF_TIME  0
A   14      #define END_OF_TIME        (68719476735)
A   15      typedef unsigned int       timetype;
A   16      #else
A   17      #define BEGINNING_OF_TIME  (-34359738368) /* Max negative number */
A   18      #define END_OF_TIME         34359738367   /* Max positive number */
A   19      typedef signed int          timetype;
A   20      #endif
A   21
A   22
A   23      /*B*    NAME:    sym_macro
A   24              PURPOSE: To describe a symbol table entry for a makefile
A   25                       macro.
A   26              DESCRIPTION:
A   27                       The structure fields are:
A   28
A   29                       next     -- pointer to the next macro name with the
A   30                                   current hash value.
A   31                       mc_len   -- length of the macro name
A   32                       mc_deflen-- length of the replacement text
A   33                       mc_sym   -- pointer to the macro name text
A   34                       mc_def   -- pointer to the replacement text
A   35      */
A   36      struct sym_macro {
A   37        struct sym_macro     *next;
r22:55 NOV 20 '97 MAKE_Cc13.:XSI                                            2    
A   38        int                  mc_len;
A   39        int                  mc_deflen;
A   40        char                *mc_sym;
A   41        char                *mc_def;
A   42        int                  mc_used; /* non-zero if actually referenced*/
A   43        int                  mc_cmdline; /* non-zero if set on cmdline */
A   44        int                  mc_default; /* non-zero if built-in macro */
A   45        int                  mc_level;   /* zero                       */
A   46        };
A   47
A   48
A   49      /*B*    NAME:    sym_target
A   50              PURPOSE: To describe a symbol table entry for a target name.
A   51              DESCRIPTION:
A   52                       The structure fields are:
A   53
A   54                       next           -- pointer to the next target name
A   55                                         with the same hash value.
A   56                       tg_len         -- length of the target name
A   57                       tg__suffix_len -- length of the file type
A   58                       tg_text        -- pointer to the target name
A   59      */
A   60
A   61      struct sym_target   {  /* hashed by targetname (Targets)   */
A   62        struct sym_target    *next;
A   63        int                  tg_len;
A   64        int                  tg_suffix_len;
A   65        char                 *tg_text;
A   66        struct sym_target    *tg_list;     /* Chain through every target*/
A   67        struct sym_ftype     *tg_ftype;    /* Target file type          */
A   68        struct sym_ftype     *tg_inftype;  /* Rule input file type      */
A   69        struct target_action *tg_action;   /* derive added build actions*/
A   70        struct target_rule   *tg_commands; /* explicit build commands   */
A   71        struct sym_target    *tg_stchain;  /* next target w/same state  */
A   72        int                  tg_status;    /* current target state      */
A   73        struct   dependancy  *tg_depend;   /* target's dependancies     */
A   74        struct   sym_target  *tg_tgrule;   /* Linked implicit rules     */
r22:55 NOV 20 '97 MAKE_Cc13.:XSI                                            3    
A   75        struct   acct_list   *tg_srch;     /* search list               */
A   76        char                 *tg_fid;      /* file name                 */
A   77        char                 *tg_ufid;     /* update file name          */
A   78        timetype             tg_modtime;   /* file modification time    */
A   79        timetype             tg_umodtime;  /* update modification time  */
A   80        struct sym_owner    *tg_owner;     /* Owners mailing address    */
A   81        char                 tg_precious;  /* non-zero if .PRECIOUS     */
A   82        char                 tg_phony;     /* non-zero if .PHONY        */
A   83        char                 tg_online;    /* non-zero if run online    */
A   84        char                 tg_old;       /* Pretend its old (anyway)  */
A   85        char                 tg_new;       /* Pretend its new (anyway)  */
A   86        char                 tg_depbase;   /* dependency has same name  */
A   87        };
A   88
A   89      #define INIT_SYM_TARGET  {0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0}
A   90
A   91      /*  Defines for status fields:        */
A   92
A   93      #define STATUS_UNUSED    -1
A   94      #define STATUS_BUSY       0
A   95      #define STATUS_WAITING    1
A   96      #define STATUS_RUNABLE    2
A   97      #define STATUS_RUNNING    3
A   98      #define STATUS_ERRORED    4
A   99      #define STATUS_COMPLETED  5
A  100
A  101
A  102      /*B*    NAME:    dependancy
A  103              PURPOSE: To register the dependancies of a target.
A  104      */
A  105      struct  dependancy  {
A  106        struct dependancy    *next;         /* Next dependancy on line    */
A  107        struct target_rule   *dp_rule;      /* Backlink to owner rule     */
A  108        struct sym_target    *dp_target;    /* This target                */
A  109        struct dependancy    *dp_tgdepend;  /* Next depenancy for target  */
A  110        unsigned              dp_num;       /* Number of dependants       */
A  111        struct sym_target    *(dp_list[4]); /* Target's dependants        */
r22:55 NOV 20 '97 MAKE_Cc13.:XSI                                            4    
A  112        };
A  113
A  114
A  115      /*B*    NAME:    target_rule
A  116              PURPOSE: To retain information on rule attributes.
A  117              DESCRIPTION:
A  118                 For every line containing a dependancy rule, a new
A  119                 target_rule structure is allocated to hold the
A  120                 dependancies.  This structure points off to each
A  121                 target dependancy on this line through the tr_depend
A  122                 field.   The tr_commands field is filled in if this
A  123                 rule is immediately followed by build commands.
A  124      */
A  125
A  126      struct target_rule  {             /* pointed to via sym_target   */
A  127        struct target_rule      *next;   /* Next rule in this file     */
A  128        struct dependancy       *tr_depend; /* Dependancy list for line   */
A  129        struct command_list     *tr_commands; /* Commands following rule  */
A  130        unsigned                 tr_num;      /* Line number of this rule */
A  131        char                    *tr_fid;      /* File name   of this rule */
A  132        };
A  133
A  134
A  135      struct  target_action  {
A  136        struct target_action *next;      /* Next action for real target  */
A  137        struct sym_target    *ta_target; /* This target                  */
A  138        struct target_rule   *ta_rule;   /* Rule to produce target       */
A  139        struct sym_target    *ta_tginput;/* Input target                 */
A  140        int                   ta_sysid : 18;/* sysid of job producing tg */
A  141        int                   ta_flags : 18;/* misc flags                */
A  142        char                 *ta_predvar;/* predecessors of this action  */
A  143        char                 *ta_chngvar;/* changed files causing action */
A  144        char                 *ta_dpndvar;/* dependent files of target    */
A  145        };
A  146
A  147      struct  file_info      {
A  148        timetype          fi_mod;        /* Last modified time            */
r22:55 NOV 20 '97 MAKE_Cc13.:XSI                                            5    
A  149        timetype          fi_umod;       /* UI file last modified time    */
A  150        struct acct_list  *fi_srch;      /* search list to find file      */
A  151        struct sym_target *fi_target;    /* Files associated target       */
A  152        char              fi_name[64];   /* CP-6 fid                      */
A  153        char              fi_uname[64];  /* UI file's CP-6 fid            */
A  154        char              fi_tgtext[80]; /* "fake" target name            */
A  155        };
A  156
A  157
A  158      /*B*    NAME     command_list
A  159              PURPOSE: To indicate the commands associated with a rule.
A  160              DESCRIPTION:
A  161                       This structure is pointed to via target_rule which
A  162                 provides information on the commands that are associated
A  163                 with a rule.  The fields include a pointer to the first
A  164                 command text (forward linked to the next command text),
A  165                 the number of commands, and flags indicating which
A  166                 "special" variables are in the commands.
A  167      */
A  168
A  169      struct  command_list   {
A  170        struct command_list     *next;      /* *UNUSED* */
A  171        struct command_line     *cm_lines;  /* First command line         */
A  172        unsigned                cm_flags;   /* "special" macro usage      */
A  173        };
A  174
A  175      struct  command_line   {
A  176        struct command_line     *next;      /* Next build command         */
A  177        int                      cmd_len;   /* This command's length      */
A  178        char                     cmd_text[4]; /* this command             */
A  179        };
A  180
A  181      struct  command_lin    {
A  182        struct command_lin      *next;      /* Next build command         */
A  183        int                      cmd_len;   /* This command's length      */
A  184        char                     cmd_text[70]; /* the built-in command    */
A  185        };
r22:55 NOV 20 '97 MAKE_Cc13.:XSI                                            6    
A  186
A  187
A  188      #define MC_EARLIER              04
A  189      #define MC_PREDECESSOR         010
A  190      #define MC_ARCHIVE             020
A  191      #define MC_DOLLAR              040
A  192      #define MC_BASE               0100
A  193      #define MC_SI                 0200
A  194      #define MC_OU                 0400
A  195      #define MC_LS                01000
A  196      #define MC_DO                02000
A  197      #define MC_BASE_FILE         04000
A  198      #define MC_SI_FILE          010000
A  199      #define MC_OU_FILE          020000
A  200      #define MC_LS_FILE          040000
A  201      #define MC_DO_FILE         0100000
A  202      #define MC_BASE_ACCT       0200000
A  203      #define MC_SI_ACCT         0400000
A  204      #define MC_OU_ACCT        01000000
A  205      #define MC_LS_ACCT        02000000
A  206      #define MC_DO_ACCT        04000000
A  207      #define MC_DYN_OU        010000000
A  208      #define MC_DYN_OU_FILE   020000000
A  209      #define MC_DYN_OU_ACCT   040000000
A  210      #define MC_DEPENDENT    0100000000
A  211
A  212      #define MI_EARLIER               2
A  213      #define MI_PREDECESSOR           3
A  214      #define MI_ARCHIVE               4
A  215      #define MI_DOLLAR                5
A  216      #define MI_BASE                  6
A  217      #define MI_SI                    7
A  218      #define MI_OU                    8
A  219      #define MI_LS                    9
A  220      #define MI_DO                   10
A  221      #define MI_BASE_FILE            11
A  222      #define MI_SI_FILE              12
r22:55 NOV 20 '97 MAKE_Cc13.:XSI                                            7    
A  223      #define MI_OU_FILE              13
A  224      #define MI_LS_FILE              14
A  225      #define MI_DO_FILE              15
A  226      #define MI_BASE_ACCT            16
A  227      #define MI_SI_ACCT              17
A  228      #define MI_OU_ACCT              18
A  229      #define MI_LS_ACCT              19
A  230      #define MI_DO_ACCT              20
A  231      #define MI_DYN_OU               21
A  232      #define MI_DYN_OU_FILE          22
A  233      #define MI_DYN_OU_ACCT          23
A  234      #define MI_DEPENDENT            24
A  235
A  236      #define MI_SIPATH               37
A  237      #define MI_OUPATH               38
A  238      #define MI_GNPATH               39
A  239      #define MI_UIPATH               40
A  240      #define MI_LOPATH               41
A  241      #define MI_DOPATH               42
A  242      #define MI_SPATHS               43
A  243
A  244      #define MI_MAIL_SUBJECT         45
A  245      #define MI_MAIL_COPY            46
A  246      #define MI_MAIL_BODY            47
A  247      #define MI_MAIL_SUMMARY         48
A  248
A  249
A  250      /*B*    NAME:    sym_ftype
A  251              PURPOSE: To hold file type information for every file type
A  252                       that appears in the makefile (or derivation file
A  253                       type).
A  254              DESCRIPTION:
A  255                       File types are located in a number of ways.  First
A  256                 whenever a rule for producing file types is located, both
A  257                 types are remembered.  Secondly, whenever a target name
A  258                 is entered, its filetype is looked up and a new filetype
A  259                 entry is allocated if necessary.
r22:55 NOV 20 '97 MAKE_Cc13.:XSI                                            8    
A  260
A  261                 The file type structure is used to assign a unique number
A  262                 to each file type.  Later processing will build upon this
A  263                 information to limit file type searches during file
A  264                 derivation.
A  265      */
A  266
A  267      struct  sym_ftype   {
A  268        struct   sym_ftype   *next;   /* Next file type w/same hash       */
A  269        int                   ft_len; /* Length of file type text         */
A  270        int                   ft_num; /* Number of this file type         */
A  271        char                 *ft_text;/* Text of file type                */
A  272        int                   ft_in;  /* Number of rules w/ this as input */
A  273        int                   ft_out; /* Number of rules producing this   */
A  274        struct   ftype_rules *ft_rules; /* fake target producing rules    */
A  275        };
A  276
A  277
A  278      /*B*    NAME:    struct ftype_rules
A  279              PURPOSE: To hold pointers to rules producing a file type.
A  280              DESCRIPTION:
A  281                 This structure is allocated in complete_rules and used
A  282                 when looking for rules which generate a specific file
A  283                 type.
A  284
A  285                 It is essentially an array of pointers to the fake targets
A  286                 which produce files from input file types.  This structure
A  287                 is pointed to by the struct sym_ftype and this structure
A  288                 contains pointers to the fake targets that produce this
A  289                 type.
A  290      */
A  291      struct  ftype_rules    {
A  292        int         fr_in;   /* Number of rules producing associated ftype*/
A  293        int         fr_out;  /* Number of rules produced by associated ftype*/
A  294        struct sym_target *fr_rule[1];
A  295        };
A  296
r22:55 NOV 20 '97 MAKE_Cc13.:XSI                                            9    
A  297
A  298
A  299      /*B*    NAME:    sym_owner
A  300              PURPOSE: To hold the target owner information for a
A  301                       target.
A  302              DESCRIPTION:
A  303                 This field is filled in when a mail user definition
A  304                 is provided for a target.  Each target may (optionally)
A  305                 point to a sym_owner field.
A  306      */
A  307
A  308      struct sym_owner {     /* A minimum size _sym block     */
A  309        struct sym_owner  *next;
A  310        int                ow_len; /* length of address */
A  311        int                ow_cnt; /* Number of targets owned */
A  312        char              *ow_text;/* address                 */
A  313        };
A  314
A  315      #define INIT_SYM_OWNER  {0, 0, 0, 0}
A  316
A  317
A  318
A  319
A  320      /*B*    NAME:    hash_table
A  321              PURPOSE: To define the structure of a hash_table.
A  322              DESCRIPTION:
A  323                       Since both macros and targets are hashed to obtain
A  324                 their locations, this structure is provided in order to
A  325                 declare a generic hash_table and initialize it.
A  326      */
A  327
A  328      struct sym_   {  /* WARNING: correspondance w/sym_macro, sym_target, sym_owner, sym_ftype */
A  329        struct   sym_     *next;      /*    next name on this hash chain  */
A  330        int                sym_len;   /*    Length of this name           */
A  331        int                sym_xxx;   /*    *used*                        */
A  332        char              *sym_text;  /*    Name                          */
A  333        };
r22:55 NOV 20 '97 MAKE_Cc13.:XSI                                            10   
A  334
A  335      #ifndef HASH_SIZE
A  336      #define HASH_SIZE 191
A  337      #define INIT_HASH_TABLE { HASH_SIZE,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,\
A  338        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\
A  339        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\
A  340        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\
A  341        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\
A  342        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\
A  343        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\
A  344        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\
A  345        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\
A  346        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0   }
A  347      #endif
A  348
A  349      struct  hash_table  {
A  350        int         hash_size;     /*  Number of entries in table   */
A  351        int         hash_hits;     /*  Number of used entries in table */
A  352        int         hash_syms;     /*  Number of symbols inserted      */
A  353        int         hash_cmprs;    /*  Number of comparisons           */
A  354        int         hash_looks;    /*  Number of lookups               */
A  355        struct sym_ *table[HASH_SIZE];
A  356        };
A  357
A  358
A  359
A  360      /*B*    NAME:       struct acct_list
A  361              PURPOSE:    To hold a list of search accounts.
A  362      */
A  363
A  364      struct vlp_acct  {
A  365        char     text[8];
A  366        };
A  367
A  368      struct  acct_list   {
A  369        int               naccts;
A  370        struct   vlp_acct accts[1];
r22:55 NOV 20 '97 MAKE_Cc13.:XSI                                            11   
A  371        };
A  372
A  373
A  374
A  375      #define MAX(a,b) ((a>b)? a : b)
A  376      #define MIN(a,b) ((a<b)? a : b)
A  377      #define RU          /* Undefine if using !save/get   */
A  378
A  379      #ifdef RU
A  380      #define RU_WRITTEN_INIT   314159265
A  381      #define RU_WRITTEN_DONE   2718285
A  382      #endif
A  383
A  384
A  385      /*B*    NAME:       input_info
A  386               PURPOSE:    To hold include file names and record numbers.
A  387      */
A  388
A  389      struct input_info   {
A  390        struct _FILE   *strm;
A  391        char     *fid;
A  392        long      recno;
A  393        int       ifdepth;
A  394        int       flags;
A  395        };
A  396
A  397
A  398
A  399      /*B*    NAME:       struct value
A  400              PURPOSE:    To hold the result of an expression.
A  401              DESCRIPTION:
A  402                 The commands: if, elif, error and print have as their
A  403                 arguments expressions.  This structure is used to hold
A  404                 the result of such an expression.  The following types
A  405                 of values are returned by evaluating an expression:
A  406                 VAL_CONST      ...   an integer
A  407                 VAL_IDF        ...   a variable
r22:55 NOV 20 '97 MAKE_Cc13.:XSI                                            12   
A  408                 VAL_STR        ...   a "string"
A  409                 VAL_ERROR      ...   an illegal expression
A  410      */
A  411
A  412      struct  value {
A  413        int   vtype;   /* type of value: VAL_CONST, VAL_STR, VAL_IDF   */
A  414        union {
A  415           unsigned    ival;             /* VAL_CONST   */
A  416           struct   {                    /* VAL_IDF     */
A  417              struct sym_macro *mc;
A  418              struct parse_sym *name;
A  419              }        macro;
A  420           struct   {                    /* VAL_STR     */
A  421              int      st_len;
A  422              char     *str;
A  423              }        string;
A  424           }           val;     /* end of union  defn   */
A  425        };                      /* end of struct defn   */
A  426
A  427
A  428      #define    VAL_CONST      0
A  429      #define    VAL_IDF        1
A  430      #define    VAL_STR        2
A  431      #define    VAL_ERROR      5
A  432
A  433      /**  Define the maximum number of search accounts: MAX_SRCH   **/
A  434      #define    MAX_SRCH      12
A  435      #define    MAX_IF       100
A  436      #define    MAX_INCL      12
A  437      #endif

