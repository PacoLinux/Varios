/*M* ZW$GLOBALS_M - macros for highly used global data */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* DDA */
 
%MACRO ZWI$RECNO( NAME=ZWI$RECNO, STCLASS=SYMREF );
 
  DCL NAME UBIN WORD ALIGNED STCLASS;
 
%MEND;
 
%MACRO ZWI$INPUT_KEY( NAME=ZWI$INPUT_KEY, STCLASS=SYMREF );
 
  DCL 1 NAME ALIGNED STCLASS,
        2 TCHAR UBIN(8) UNAL,
        2 EDIT_VAL SBIN(28) UNAL;
 
%MEND;
 
%MACRO ZWI$SYSTEM_TEXT( NAME=ZWI$SYSTEM_TEXT, STCLASS=SYMREF );
 
  DCL 1 NAME ALIGNED STCLASS,
        2 LNGTH UBIN WORD ALIGNED,
        2 TEXT CHAR( 8 );
 
%MEND;
%MACRO ZWI$MACHINE_DESCRIPTION;
 
  DCL ZWI$BITS_IN_CHAR UBIN ALIGNED SYMREF;
  DCL ZWI$BITS_IN_HALF UBIN ALIGNED SYMREF;
  DCL ZWI$BITS_IN_WORD UBIN ALIGNED SYMREF;
  DCL ZWI$BITS_IN_PTR UBIN ALIGNED SYMREF;
  DCL ZWI$BITS_IN_EPTR UBIN ALIGNED SYMREF;
  DCL ZWI$BITS_IN_DWORD UBIN ALIGNED SYMREF;
  DCL ZWI$BITS_IN_VECTOR UBIN ALIGNED SYMREF;
  DCL ZWI$BITS_IN_DSCR UBIN ALIGNED SYMREF;
  DCL ZWI$BITS_IN_REMEMBER UBIN ALIGNED SYMREF;
 
  DCL ZWI$MAX_SECTION_SIZE UBIN ALIGNED SYMREF;
 
%MEND;
%MACRO ZWI$PHASE_NUMBER(NAME=ZWI$PHASE_NUMBER,
                        STCLASS=SYMREF);
 
/*   ZWI$PHASE_NUMBER contains a value indicating what phase
     the the compiler is currently in.
*/
 
/*
     The following equates can be used to test the phase number.
*/
 
%EQU $INITIALIZE    =  0;    /* Initializing */
%EQU $PREPROCESS    =  1;    /* Preprocessing source */
%EQU $FRONT_END     =  2;    /* Syntax and semantics processing */
%EQU $CODE_GEN      =  3;    /* Code generation */
%EQU $TRANSLATE     =  4;    /* OU translation */
%EQU $LISTING       =  5;    /* Listing (including UNGMAP) */
 
%LSET STR = CONCAT(TEXTCHAR(STCLASS),'        ');
%IF     (SUBSTR(STR,0,6) = 'STATIC')  OR
        (SUBSTR(STR,0,8) = 'CONSTANT') OR
        (SUBSTR(STR,0,3) = 'EXT')  ;
     %LSET INIT = CHARTEXT( 'INIT' );
     %LSET INIT_END = CHARTEXT( ' ' );
%ELSE;
     %LSET INIT = CHARTEXT( '/*' );
     %LSET INIT_END = CHARTEXT( '*/' );
%ENDIF;
 
DCL NAME UBIN STCLASS %INIT (%$INITIALIZE) %INIT_END;
 
%MEND;
%MACRO ZWI$DEATH_AND_DESTRUCTION (NAME=ZWI$DEATH_AND_DESTRUCTION, STCLASS=SYMREF);
 
/*B* ZWI$DEATH_AND_DESTRUCTION - This macro defines a global macro into which
          each driver routine will REMEMBER a location to UNWIND
          to in case of dire trouble. Be sure to print any messages
          necessary to describe the trouble before UNWINDing to this variable.
*/
  DCL NAME REMEMBER DALIGNED STCLASS;
 
%MEND;
%MACRO ZW5$FRONT_END_FLICK_IT_IN(NAME=ZW5$FRONT_END_FLICK_IT_IN,
                                  STCLASS=SYMREF);
/*B* ZW5$FRONT_END_FLICK_IT_IN - This macro defines a global that
     contains a location to UNWIND to when the front end gets
     hopelessly confused.
*/
  DCL NAME REMEMBER DALIGNED STCLASS;
%MEND;
 
%MACRO ZWD$RECURSION_ERROR_POINT(NAME=ZWD$RECURSION_ERROR_POINT,
                                 STCLASS=SYMREF);
/*B* ZWD$RECURSION_ERROR_POINT - This macro defines a global that
     contains a location to UNWIND to if the recursive routines
     that do auto allocation discover that they cannot continue.
*/
  DCL NAME REMEMBER DALIGNED STCLASS;
%MEND;
%MACRO ZWI$SHARED_LIBRARY_NAME(NAME=ZWI$SHARED_LIBRARY_NAME,
                                STCLASS=SYMREF);
%LSET STR = CONCAT(TEXTCHAR(STCLASS),'        ');
%IF     (SUBSTR(STR,0,6) = 'STATIC')  OR
        (SUBSTR(STR,0,8) = 'CONSTANT') OR
        (SUBSTR(STR,0,3) = 'EXT')  ;
     %LSET INIT = CHARTEXT( 'INIT' );
     %LSET INIT_END = CHARTEXT( ' ' );
%ELSE;
     %LSET INIT = CHARTEXT( '/*' );
     %LSET INIT_END = CHARTEXT( '*/' );
%ENDIF;
 
DCL 1 NAME ALIGNED STCLASS,
        2 LENGTH UBIN BYTE UNAL %INIT(LENGTHC(':SHARED_SYSTEM')) %INIT_END,
        2 TEXT CHAR(32) %INIT(':SHARED_SYSTEM') %INIT_END;
%MEND;
%MACRO ZWI$ALT_SHARED_LIBRARY_NAME(NAME=ZWI$ALT_SHARED_LIBRARY_NAME,
                                STCLASS=SYMREF);
%LSET STR = CONCAT(TEXTCHAR(STCLASS),'        ');
%IF     (SUBSTR(STR,0,6) = 'STATIC')  OR
        (SUBSTR(STR,0,8) = 'CONSTANT') OR
        (SUBSTR(STR,0,3) = 'EXT')  ;
     %LSET INIT = CHARTEXT( 'INIT' );
     %LSET INIT_END = CHARTEXT( ' ' );
%ELSE;
     %LSET INIT = CHARTEXT( '/*' );
     %LSET INIT_END = CHARTEXT( '*/' );
%ENDIF;
 
DCL 1 NAME ALIGNED STCLASS,
        2 LENGTH UBIN BYTE UNAL %INIT(0) %INIT_END,
        2 TEXT CHAR(32) %INIT(' ') %INIT_END;
%MEND;
 
%MACRO TEXTH( NAME=TEXTH, SIZE=0, STCLASS=BASED );
 
%LSET STR=CONCAT(TEXTCHAR(STCLASS),'       ');
%IF SUBSTR(STR,0,5) = 'BASED' OR
    SUBSTR(STR,0,5) = '     ' OR
    SUBSTR(STR,0,5) = 'PARAM';
%LSET SZE=CHARTEXT(CONCAT(TEXTCHAR(NAME),'.SIZE'));
%ELSE;
%LSET SZE=SIZE;
%ENDIF;
 
DCL 1 NAME ALIGNED STCLASS,
      2 %CHARTEXT('SIZE') UBIN HALF HALIGNED,
      2 TEXT CHAR( %SZE ) CALIGNED;
 
%MEND;
