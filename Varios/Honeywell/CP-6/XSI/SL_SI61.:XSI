/*M* SL - Displays RU & OU severity level */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* DMR,PLM=5,IND=5,CSU=3,EXM=0,ECU=3,MOC,DCI=5,CRT=5 */
SL:  PROC MAIN;
/* Include files */
%INCLUDE CP_6;
%INCLUDE B$JIT;
%INCLUDE CP_6_SUBS;
%INCLUDE B_ERRORS_C;
%INCLUDE B$OBJECT_C;
%INCLUDE XU_MACRO_C;
%INCLUDE XU_FORMAT_C;
%INCLUDE XU_PERR_C;
%INCLUDE XUW_MACRO_C;                   /* ADDED CES 8-9-84  STAR#15080 */
%XUW_WILDCARD(INPUT=DCB_FNAME,PATTERN=PREFIX); /*ADDED CES 8-9-84*/
%XUW_ENTRIES;
%P_PCB(R=SL$XP,W=XP_WSP,WSZ=512,N#="LENGTHC(B$JIT.CCBUF)");
%F_FDS (NAME=F_FDS,
        STCLASS=STATIC,
        DCB=M$ME,
        BUF=OUTBUFFER,
        TRUNC=YES);
%PARSE$OUT;
%PARSE$SYM;
/* Fpt macro calls */
%FPT_FID(ACCT=VLP_ACCT,
         ASN=ASNX,
         NAME=VLP_NAME,
         PASS=VLP_PASS,
         RES=RESX,
         RESULTS=VLR_FID,
         SN=VLP_SN,
         TEXTFID=OU_KEY_BUF.GORGO,
         WSN=VLP_WSN);
%VLR_FID;
DCL FP$ PTR STATIC INIT( ADDR(FPARAMX) );
DCL CODE UBIN WORD;
DCL XSF$LOCCODE ENTRY (2) ALTRET;
%INCLUDE FM$FIT;
%CODE04;
DCL CODE04$ PTR;
DCL CODE04_TIME UBIN;
%F$DCB;
%FPT_OPEN(DCB=ODCB,NAME=FIRST_NAME,ACCT=VLP_ACCT,SN=VLP_SN,
          FUN=IN,ASN=FILE,
          FPARAM=FPARAMX,SCRUB=NO,THISF=YES,NXTF=YES);
%FPT_OPEN(FPTN=FPT_OPEN_NXTF,DCB=ODCB,FPARAM=FPARAMX,NXTF=YES);
%FPT_OPEN(FPTN=FPT_OPEN_ME,DCB=M$ME,FUN=CREATE);
DCL FPARAMX (0:1023) UBIN WORD STATIC INIT( 0*1024 );
DCL I UBIN WORD;
%FPT_CLOSE(DCB=ODCB);
%FPT_CLOSE(FPTN=FPT_CLOSE_ME,DCB=M$ME,DISP=SAVE);
%FPT_READ(FPTN=FPT_READ_OU,DCB=ODCB,BIN=YES,BUF=HEAD_BUF,CONT=NO,
          KEY=OU_KEY_BUF,KEYR=YES,KEYS=NO);
%FPT_READ(FPTN=FPT_READ_RU,DCB=ODCB,BIN=YES,BUF=HEAD_BUF,CONT=NO,
          KEY=RU_KEY_BUF,KEYR=NO,KEYS=YES);
%FPT_READ(FPTN=FPT_READ_RU_BIRTH,DCB=ODCB,BIN=YES,BUF=B_RUBIRTH,CONT=NO,
          KEY=RU_BIRTH_KEY,KEYR=NO,KEYS=YES);
%FPT_WRITE(DCB=M$UC,BUF=MSG_BUF);
%FPT_UNFID(DCB=ODCB,TEXTFID=TEXTFID.BUF);
%FPT_ERRMSG(CODE=ALTRET_ERR,BUF=MSG_BUF,OUTDCB1=M$ME,
            RESULTS=VLR_ERRMSG);
%VLR_ERRMSG;
%FPT_TIME(SOURCE=UTS,
          DEST=LOCAL,
          DATE=DATE_TIME.DATEX,
          TIME=DATE_TIME.TIMEX,
          DAY=DATE_TIME.DAYX,
          TSTAMP=TSTAMPX);
%FPT_EXIT (FPTN=FPT_EXIT,
           STCLASS=STATIC,
           STEPCC=0);
/* B$XCOND_C data */
%B$ALT;
%B$TCB;
/* X$PARSE data */
DCL XP_WSP (0:511) UBIN WORD STATIC;
DCL BLK$ PTR;
DCL SL$XP UBIN WORD SYMREF;             /* Parse control file */
DCL X$PARSE ENTRY (1) ALTRET;
%INCLUDE XUF_ENTRY;
/* Pointers */
DCL ODCB$ PTR;
DCL B$JIT$ PTR SYMREF;
DCL B$TCB$ PTR SYMREF;
/* Dcbs */
DCL M$ME DCB;
DCL ODCB DCB;                           /* File open dcb for OU/RU files */
/* Severity level data */
DCL SL_UBIN UBIN WORD;
DCL SL_SW BIT(1);
/* Fid and open data */
DCL FID_SW BIT (1);
%VLP_ACCT;
DCL ASNX UBIN BYTE STATIC;
%VLP_NAME;                              /* Textc format */
%VLP_PASS;
DCL RESX CHAR (4) STATIC;
%VLP_SN;
%VLP_WSN;
/* General head record buffer */
DCL HEAD_BUF (0:63) UBIN WORD ALIGNED STATIC; /* For both RUs and OUs */
DCL HEAD_BUF$ PTR STATIC INIT (ADDR (HEAD_BUF));/* Fudge for easy addressing */
%B$OUHEAD(NAME=OU_HEAD,STCLASS="BASED (HEAD_BUF$)");
%B$HEAD(NAME=RU_HEAD,STCLASS="BASED (HEAD_BUF$)");
%B$RUBIRTH(NAME=B_RUBIRTH,STCLASS=STATIC);
%RU_FLAVORS;                            /* For B$HEAD.FLAVOR EQUs */
/* Errmsg data */
DCL MSG_BUF CHAR (120) STATIC;
DCL 1 TEXTFID REDEF MSG_BUF,
      2 SIZE UBIN BYTE UNAL,
      2 BUF CHAR(119) UNAL;
DCL TEXTFID_INDEX UBIN;
DCL 1 ALTRET_ERR STATIC,                /* Static version of B$ALT.ERR */
      2 FCG BIT (12) UNAL,
      2 MID BIT (6) UNAL,
      2 MON BIT (1) UNAL,
      2 ERR# UBIN (14) UNAL,
      2 CODE REDEF ERR# UBIN (14) UNAL,
      2 SEV UBIN (3) UNAL;
/* Date/time data */
DCL TSTAMPX UBIN WORD STATIC;
DCL 1 DATE_TIME STATIC,
      2 DATEX CHAR (8),
      2 TIMEX CHAR (11),
      2 DAYX CHAR (3);
DCL 1 TIME_DATE REDEF DATE_TIME,
      2 DATEX CHAR (8),
      2 TIMEX CHAR (5),
      2 * CHAR (6),
      2 DAYX CHAR (3);
/* Output buffer */
DCL OUTBUFFER CHAR(80) STATIC;
%EJECT;
/* OU and RU severity lines */
DCL NAME_MSG CHAR(0) STATIC INIT( '%T%S %A %A %A.' );
DCL NAME_MSG_ BIT(72) STATIC DALIGNED INIT( VECTOR( NAME_MSG ) );
DCL OU_SL_MSG CHAR(0) STATIC INIT( ' Sev=%D %A %A %A. %A.%D %T%S' );
DCL OU_SL_MSG_ BIT(72) STATIC DALIGNED INIT( VECTOR( OU_SL_MSG ) );
DCL OU_SL_MSG1 CHAR(0) STATIC INIT( ' Sev=%D %A %A %A. %A.%A%2ZD %T%S' );
DCL OU_SL_MSG1_ BIT(72) STATIC DALIGNED INIT( VECTOR( OU_SL_MSG1 ) );
DCL OU_SL_MSG2 CHAR(0) STATIC INIT( ' Sev=%D %A %A %A. %A.%A%D %T%S' );
DCL OU_SL_MSG2_ BIT(72) STATIC DALIGNED INIT( VECTOR( OU_SL_MSG2 ) );
DCL TEMPMSG_ BIT(72) STATIC DALIGNED;
DCL RU_FEP_SL_MSG CHAR(0) STATIC INIT( ' Sev=%D %A %A %A. $SA=.%H %Dk' );
DCL RU_SL_MSG CHAR(0) STATIC INIT( ' Sev=%D %A %A %A. $SA=.%O %Dk' );
DCL RU_SL_MSG_ BIT(72) STATIC DALIGNED INIT( VECTOR( RU_SL_MSG ) );
/* For interrupt processing */
DCL SL$INT ENTRY ASYNC;
%FPT_INT(UENTRY=SL$INT);
DCL INT_SW BIT (1) STATIC SYMDEF INIT ('0'B);
%EJECT;
/* Misc data DCLs - reorganized later */
/* * */
/* */
DCL 1 OU_KEY_BUF STATIC,
      2 KEY_LEN UBIN BYTE UNAL,
      2 KEY CHAR (31) UNAL,
      2 GORGO CHAR (224) UNAL;          /* Filler for new long keys */
DCL 1 RU_KEY_BUF STATIC,
      2 KEY_LEN UBIN BYTE UNAL INIT (4),
      2 KEY CHAR (4) UNAL INIT ('HEAD');
DCL 1 RU_BIRTH_KEY STATIC,
      2 KEY_LEN UBIN BYTE UNAL INIT (5),
      2 KEY CHAR (5) UNAL INIT ('BIRTH');
/* */
DCL NOT_WILDCARDED_SW BIT(1) STATIC;
DCL OPEN_SW BIT (1);
DCL PREFIX_SW BIT (1);
DCL 1  FIRST_NAME STATIC,
      2  L# UBIN(9) INIT(31) UNAL,
      2  NAME#  CHAR(31)  INIT(' ');
DCL FIRST_NAME_LEN UBIN WORD;
DCL OU_PRINTED_SW BIT (1);
DCL MATCH BIT(1);
DCL ACCT_SW BIT (1);
DCL PREFIX CHAR (31) STATIC INIT(' ');
DCL PREFIX_LEN UBIN BYTE STATIC INIT(0);
DCL DCB_FNAME CHAR (31) STATIC;
DCL OU_SEVLEV UBIN;
DCL OU_VERSION UBIN;
DCL OU_VERSN UBIN;
DCL 1 OU$VERS BASED UNAL,
      2 L CHAR(1) UNAL,
      2 N UBIN BYTE UNAL;
DCL RU_SEV UBIN;
DCL RU_START UBIN;
DCL COMPID__(0:13) BIT(72) STATIC DALIGNED INIT( VECTOR(CGMAP),
                                                VECTOR(CPL6),
                                                VECTOR(CFORTRAN),
                                                VECTOR(CCOBOL),
                                                VECTOR(CPL1),
                                                VECTOR(CRPG),
                                                VECTOR(CPASCAL),
                                                VECTOR(CMOMUS),
                                                VECTOR(CFPL),
                                                VECTOR(CPARTRGE),
                                                VECTOR(CIDL),
                                                VECTOR(CELSIE),
                                                VECTOR(CL6ASM),
                                                VECTOR(CC) );
DCL CGMAP CHAR(0) STATIC INIT( 'GMAP' );
DCL CPL6 CHAR(0) STATIC INIT( 'PL6' );
DCL CFORTRAN CHAR(0) STATIC INIT( 'FORTRAN' );
DCL CCOBOL CHAR(0) STATIC INIT( 'COBOL' );
DCL CPL1 CHAR(0) STATIC INIT( 'PL1' );
DCL CRPG CHAR(0) STATIC INIT( 'RPG' );
DCL CPASCAL CHAR(0) STATIC INIT( 'PASCAL' );
DCL CMOMUS CHAR(0) STATIC INIT( 'MOMUS' );
DCL CFPL CHAR(0) STATIC INIT( 'FPL' );
DCL CPARTRGE CHAR(0) STATIC INIT( 'PARTRGE' );
DCL CIDL CHAR(0) STATIC INIT( 'IDL' );
DCL CL6ASM CHAR(0) STATIC INIT( 'CALF' );
DCL CELSIE CHAR(0) STATIC INIT( 'ELSIE' );
DCL CC CHAR(0) STATIC INIT( 'C' );
DCL RU_SIZE UBIN;
/* */
DCL FIRST_SW BIT (1);                   /* Open first or NXTF */
DCL OU_SW BIT (1);                      /* Processing an OU file */
%EJECT;
/* Housekeeping */
     CALL M$OPEN (FPT_OPEN_ME);
     FIRST_SW = '1'B;
     FID_SW = '0'B;
     SL_SW = '0'B;
     NOT_WILDCARDED_SW = '0'B;
     ODCB$ = DCBADDR (DCBNUM (ODCB));
/* Process FPARAM data */
/* The current implementation passes the entire command line
to the parser. The parse controls define the sl command name itself
as a .FID. At present, parse returns this block even tho we dont
want it, with a OUT$BLK.CODE = 0. So, we just ignore the 0 blocks. */
/* */
     P_PCB.TEXT$ = ADDR( B$JIT.CCBUF );
     CALL X$PARSE (P_PCB) ALTRET (PARSE_ERROR);
/* Check X$PARSE results */
     IF P_PCB.OUT$ -> OUT$BLK.NSUBLKS = 0
     THEN DO;
          MSG_BUF = 'PARSE NSUBLKS = 0.';
          CALL M$WRITE (FPT_WRITE);
          RETURN;
        END;
     DO I = 0 TO P_PCB.OUT$ -> OUT$BLK.NSUBLKS - 1;
          BLK$ = P_PCB.OUT$ -> OUT$BLK.SUBLK$ (I);
          IF OUT$BLK.CODE = 2
          THEN DO;
               OU_KEY_BUF.GORGO = OUT$SYM.TEXT;
               FID_SW = '1'B;
             END;
          ELSE IF OUT$BLK.CODE = 3
               THEN DO;
                    CALL CHARBIN (SL_UBIN, OUT$SYM.TEXT);
                    SL_SW = '1'B;
                  END;
               ELSE IF OUT$BLK.CODE = 0
                    THEN DO;            /* Ignore all codes of 0 */
                       END;
                    ELSE DO;
                         MSG_BUF = 'BAD PARSE.';
                         CALL M$WRITE (FPT_WRITE);
                         RETURN;
                       END;
        END;
/* */
%EJECT;
/* Process the FID string */
     IF FID_SW
     THEN DO;                           /* M$FID requires a non-blank TEXTFID */
          CALL         M$FID (FPT_FID) ALTRET (FID_ERROR);
          ACCT_SW = VLR_FID.ACCT;
          PREFIX_SW = VLR_FID.NAME;
          PREFIX = VLP_NAME.NAME#;
          IF PREFIX_SW
          THEN PREFIX_LEN = VLP_NAME.L#; /* Check same length of both strings */
        END;
     ELSE DO;                           /* No FID supplied */
          VLP_NAME.L# = 31;             /* 31 is max len */
          VLP_NAME.NAME# = ' ';
          VLP_ACCT.ACCT# = ' ';
          VLP_PASS.PASS# = ' ';
          ACCT_SW = '0'B;
          PREFIX_SW = '0'B;
        END;
     CALL INDEX (FIRST_NAME_LEN,'?',PREFIX)
     WHENALTRETURN DO;
          NOT_WILDCARDED_SW = '1'B;
          FIRST_NAME_LEN = PREFIX_LEN;
        END;
     FIRST_NAME.NAME# = SUBSTR (PREFIX,0,FIRST_NAME_LEN);
     FIRST_NAME.L# = FIRST_NAME_LEN;
/* Set sl value if not already specified */
     IF NOT SL_SW
     THEN IF PREFIX_SW
          THEN SL_UBIN = 0;
          ELSE SL_UBIN = 1;
/* */
/* Open processing */
     OPEN_SW = '0'B;
/* Set up int handler, now that we're ready */
     CALL M$INT (FPT_INT);
/* */
OPEN_LOOP: ;
     IF OPEN_SW                         /* From open done in loop */
     THEN DO;
          CALL M$CLOSE (FPT_CLOSE) ALTRET (CLOSE_ERROR);
          OPEN_SW = '0'B;
          IF NOT_WILDCARDED_SW THEN GOTO FINI;
        END;
     IF FIRST_SW
     THEN DO;                           /* THISF and NXTF */
          FIRST_SW = '0'B;              /* NXTF only from now on */
          CALL M$OPEN (FPT_OPEN) ALTRET (OPEN_ERROR);
        END;
     ELSE CALL M$OPEN (FPT_OPEN_NXTF) ALTRET (OPEN_ERROR);
     OPEN_SW = '1'B;               /* So well close it the next time around */
     MSG_BUF = ODCB$ -> F$DCB.NAME#.C;
     IF INT_SW
     THEN DO;
          CALL M$WRITE (FPT_WRITE);
          INT_SW = '0'B;
        END;
/* File analysis */
     CALL PREFIX_TEST ALTRET( FINI );
     IF NOT MATCH
     THEN GOTO OPEN_LOOP;
/* Either we have a prefix match or no prefix was given */
     IF ODCB$->F$DCB.ORG# ~= %KEYED#
     THEN GOTO OPEN_LOOP;               /* Cant be OU or RU */
/* We got a good one so far, anyway */
/* LOCCODE processing */
     CODE04$ = FP$;
     CODE = 4;
     CALL XSF$LOCCODE (CODE04$, CODE) ALTRET (C04ERR);
     CODE04_TIME = CODE04$->CODE04.MODIFY.TIME;
     DO WHILE ( '0'B );
C04ERR:   ;
          CODE04_TIME = 0;
        END;
/* Good LOCCODEs */
/* */
/* Try first for OU */
     OU_SW = '0'B;                 /* Checked when we run out of '"NAME' keys */
     OU_PRINTED_SW = '0'B;              /* Print name line once per OU file */
/* */
READ_OU_HEAD_LOOP: ;
     CALL M$READ (FPT_READ_OU) ALTRET (READ_OU_ERROR);
     IF SUBSTR (OU_KEY_BUF.KEY, 0, 1) ~= '"' /* Not an OU head record */
     THEN IF OU_SW                      /* Did we just run out of head keys? */
          THEN GOTO OPEN_LOOP;
          ELSE IF SUBSTR (OU_KEY_BUF.KEY, 0, 2) ~= '!"'
               THEN GOTO TRY_RU;
               ELSE DO;                 /* May be a LEMUR library */
                    OU_SW = '1'B;
                    GOTO READ_OU_HEAD_LOOP; /* May be LEMUR library */
                  END;
     OU_SW = '1'B;                      /* We have an OU */
     IF OU_HEAD.SEVLEV < SL_UBIN
     THEN GOTO READ_OU_HEAD_LOOP;
/* Ou meets all criteria */
     IF OU_HEAD.SEVLEV > FPT_EXIT.V.STEPCC#
     THEN FPT_EXIT.V.STEPCC# = OU_HEAD.SEVLEV;
     IF NOT OU_PRINTED_SW
     THEN DO;
          CALL PRINT_NAME_MSG;
          OU_PRINTED_SW = '1'B;
        END;
     TSTAMPX = OU_HEAD.UTS;
     OU_SEVLEV = OU_HEAD.SEVLEV;
     OU_VERSION = OU_HEAD.VERSION;
     CALL M$TIME (FPT_TIME) ALTRET (TIME_ERROR);
     OU_VERSN = ADDR(OU_HEAD.VERSION) -> OU$VERS.N;
     IF ASCBIN(ADDR(OU_HEAD.VERSION) -> OU$VERS.L) < ASCBIN('A')
     THEN CALL X$WRITE( F_FDS, OU_SL_MSG_, VECTOR(OU_SEVLEV),
            VECTOR(DATE_TIME.TIMEX),
            VECTOR(DATE_TIME.DATEX),
            VECTOR(DATE_TIME.DAYX),
            COMPID__(OU_HEAD.COMPILER),
            VECTOR(OU_VERSION),
            VECTOR(OU_KEY_BUF) );
     ELSE DO;
          IF OU_VERSN < 100
          THEN TEMPMSG_ = OU_SL_MSG1_;
          ELSE TEMPMSG_ = OU_SL_MSG2_;
          CALL X$WRITE( F_FDS, TEMPMSG_, VECTOR(OU_SEVLEV),
            VECTOR(DATE_TIME.TIMEX),
            VECTOR(DATE_TIME.DATEX),
            VECTOR(DATE_TIME.DAYX),
            COMPID__(OU_HEAD.COMPILER),
            VECTOR(ADDR(OU_HEAD.VERSION) -> OU$VERS.L),
            VECTOR(OU_VERSN),
            VECTOR(OU_KEY_BUF) );
        END;
     GOTO READ_OU_HEAD_LOOP;
%EJECT;
/* Try for RU */
TRY_RU: ;
     CALL M$READ (FPT_READ_RU) ALTRET (READ_RU_ERROR);
     IF ODCB$ -> F$DCB.ARS# ~= LENGTHC(RU_HEAD) /* If it's an RU impostor */
     THEN GOTO OPEN_LOOP;     /* (like a PROOF.X dictionary) then skip it! */
     IF RU_HEAD.SEV < SL_UBIN
     THEN GOTO OPEN_LOOP;               /* Not of interest */
/* Meets all criteria */
     IF RU_HEAD.SEV > FPT_EXIT.V.STEPCC#
     THEN FPT_EXIT.V.STEPCC# = RU_HEAD.SEV;
     CALL PRINT_NAME_MSG;
     B_RUBIRTH = '0'B;
     CALL M$READ (FPT_READ_RU_BIRTH) ALTRET (NOBIRTH);
NOBIRTH: ;
     TSTAMPX = B_RUBIRTH.CREATE_UTS;
     CALL M$TIME (FPT_TIME) ALTRET(TIME_ERROR);
     RU_SEV = RU_HEAD.SEV;
     RU_START = RU_HEAD.START;
     IF RU_HEAD.FLAVOR = %HOST_RU
     THEN DO;
          RU_SL_MSG_ = VECTOR( RU_SL_MSG ); /* Display start address in octal */
          RU_SIZE = RU_HEAD.VPPGS + RU_HEAD.VDPGS + (RU_HEAD.ROSIZE+ 1023)/1024;
        END;
     ELSE DO;
          RU_SL_MSG_ = VECTOR( RU_FEP_SL_MSG ); /* Display start addr in hex */
          RU_SIZE = (RU_HEAD.VPPGS + RU_HEAD.VDPGS + 3) / 4;/* Calc FEP pages */
        END;
     CALL X$WRITE( F_FDS, RU_SL_MSG_, VECTOR(RU_SEV),
       VECTOR(DATE_TIME.TIMEX),
       VECTOR(DATE_TIME.DATEX),
       VECTOR(DATE_TIME.DAYX),
       VECTOR(RU_START),
       VECTOR(RU_SIZE) );
     GOTO OPEN_LOOP;
%EJECT;
FID_ERROR: ;
     CALL ERRMSG;
     GOTO FINI;
/* */
OPEN_ERROR: ;
     ALTRET_ERR = B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR;
/* Test for no more files to open */
     IF ( ALTRET_ERR.CODE = %E$FDEOF ) OR
       ( ALTRET_ERR.CODE = %E$XCLSET )
     THEN GOTO NO_MORE;
     IF ALTRET_ERR.CODE = %E$SETDOWN THEN DO;
          CALL ERRMSG;
          GOTO NO_MORE;
        END;
     IF ALTRET_ERR.CODE = %E$NOACCESS
     THEN DO;
          CALL PREFIX_TEST ALTRET( NO_MORE );
          IF MATCH
          THEN CALL ERRMSG;
        END;
     ELSE CALL ERRMSG;
     GOTO OPEN_LOOP;
/* */
READ_OU_ERROR: ;
     ALTRET_ERR = B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR;
     IF ALTRET_ERR.CODE = %E$LD         /* Cant be OU */
     THEN GOTO TRY_RU;
     IF ALTRET_ERR.CODE = %E$EOF
     THEN GOTO OPEN_LOOP;
     CALL ERRMSG;
     GOTO OPEN_LOOP;
/* */
READ_RU_ERROR: ;
     ALTRET_ERR = B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR;
     IF ( ALTRET_ERR.CODE = %E$NOKEY ) OR
       ( ALTRET_ERR.CODE = %E$LD )
     THEN GOTO OPEN_LOOP;               /* File is neither CP-6 OU nor RU */
     CALL ERRMSG;
     GOTO OPEN_LOOP;
/* */
CLOSE_ERROR: ;
     ALTRET_ERR = B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR;
     CALL ERRMSG;
     GOTO FINI;
/* */
PARSE_ERROR: ;
     ALTRET_ERR = P_PCB.ERROR;          /* Parse supplies its own */
     CALL ERRMSG1;
     GOTO FINI;
/* */
TIME_ERROR: ;
     CALL ERRMSG;
     GOTO FINI;
/* * */
NO_MORE: ;
     IF OPEN_SW
     THEN CALL M$CLOSE (FPT_CLOSE) ALTRET (CLOSE_ERROR);
/* */
FINI: ;
     CALL M$CLOSE (FPT_CLOSE_ME);
     CALL M$EXIT( FPT_EXIT );
 
%EJECT;
 
PREFIX_TEST: PROC ALTRET;
 
     MATCH = '1'B;
     IF PREFIX_SW
     THEN DO;
          DCB_FNAME = ODCB$->F$DCB.NAME#.C;
          XUW_WILDCARD.PATTERN_.BOUND = PREFIX_LEN - 1;
          XUW_WILDCARD.INPUT_.BOUND = ODCB$->F$DCB.NAME#.L - 1;
          CALL X$WILDCMP (XUW_WILDCARD) ALTRET (NOMATCH);
        END;
     ELSE NOT_WILDCARDED_SW = '0'B;
     RETURN;
 
NOMATCH: MATCH = '0'B;
     IF SUBSTR (PREFIX, 0, FIRST_NAME_LEN) < SUBSTR (DCB_FNAME, 0,
       FIRST_NAME_LEN)
     THEN GOTO ARET;
     RETURN;
ARET:
     ALTRETURN;
 
END PREFIX_TEST;
 
%EJECT;
 
PRINT_NAME_MSG: PROC;
 
/* First get modified UTS from CODE04 LOCCODE */
     TSTAMPX = CODE04_TIME;
     CALL M$TIME (FPT_TIME) ALTRET (PNM_TIME_ERROR);
     CALL M$UNFID( FPT_UNFID ) ALTRET( PNM_UNF_ERROR );
     CALL INDEX1( TEXTFID_INDEX, ' ', TEXTFID.BUF );
     TEXTFID.SIZE = TEXTFID_INDEX;
     CALL X$WRITE( F_FDS, NAME_MSG_, VECTOR(TEXTFID),
       VECTOR(TIME_DATE.TIMEX),
       VECTOR(DATE_TIME.DATEX),
       VECTOR(DATE_TIME.DAYX) );
     RETURN;
/* */
PNM_TIME_ERROR: ;
PNM_UNF_ERROR: ;
     CALL ERRMSG;
     RETURN;
END PRINT_NAME_MSG;
%EJECT;
 
ERRMSG: PROC;
 
     ALTRET_ERR = B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR;
     FPT_ERRMSG.V.DCB# = B$TCB$ -> B$TCB.ALT$ -> B$ALT.DCB#;
     GOTO C1;
 
ERRMSG1: ENTRY;
 
     FPT_ERRMSG.V.DCB# = 0;
C1:  ;
     ALTRET_ERR.SEV = 0;
     CALL M$ERRMSG( FPT_ERRMSG );
     RETURN;
 
END ERRMSG;
/* * */
END SL;
