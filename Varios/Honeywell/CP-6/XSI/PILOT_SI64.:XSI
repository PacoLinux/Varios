/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*                   Written By: Ben Faul @LADC                     */
 
/***** PILOT **** PILOT **** PILOT **** PILOT **** PILOT ****
 
    This file contains system commands. Future system features
      should be appended to this file.
 
 ***** PILOT **** PILOT **** PILOT **** PILOT **** PILOT ****/
 
COMPRESS: PROC(CHARN,SIZE);
/*A* COMPRESS: Compress input */
DCL CHARN CHAR(SIZE);
DCL SIZE UBIN;
DCL X UBIN;
        DO X=0 TO SIZE-1;
           IF SUBSTR(CHARN,X,1)='''' THEN CALL QUOTE;
           IF SUBSTR(CHARN,X,1)='{' THEN CALL COMMENT;
           IF SUBSTR(CHARN,X,1)=' ' THEN DO;
              SUBSTR(CHARN,X)=SUBSTR(CHARN,X+1);
           IF SUBSTR(CHARN,X,1)='''' THEN CALL QUOTE;
           IF SUBSTR(CHARN,X,1)='{' THEN CALL COMMENT;
           END;
           END;
        DO X=SIZE-1 DOWNTO 1;
           IF SUBSTR(CHARN,X,1)~=' ' THEN DO;
              SIZE=X+1;
              RETURN;
              END;
           END;
QUOTE:  PROC;
/*A* QUOTE: Dont compress what is inside quote strings */
DCL J UBIN;
        DO J=X+1 TO SIZE;
           IF SUBSTR(CHARN,J,1)='''' THEN DO;
              X=J;
              RETURN;
              END;
           END;
END;
COMMENT: PROC;
/*A* COMMENT: Dont compress comments */
DCL J UBIN;
        DO J=X+1 TO SIZE;
           IF SUBSTR(CHARN,J,1)='}' THEN DO;
              X=J;
              RETURN;
              END;
           END;
END;
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
USER_COMMAND: PROC(MODE,X) ALTRET;
/*A* USER_COMMAND: Execute a user command */
DCL TYPE CHAR(1);
DCL E UBIN;
DCL MODE BIT(1);
DCL X UBIN;
DCL Z UBIN;
DCL SIZE UBIN;
DCL FIND_LENGTH ENTRY(2);
DCL COMPRESS ENTRY(2);
DCL LEX_INPUT ENTRY(5) ALTRET;
%INCLUDE PILOT_C2;
        TYPE=' ';
        E=0;
        SIZE=255;
        CALL COMPRESS(SYMBOL_TABLE.TEXT(X),SIZE);
        CALL LEX_INPUT(MODE,E,SYMBOL_TABLE.TEXT(X),SIZE,TYPE)
          WHENALTRETURN DO;
           ALTRETURN;
           END;
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
INT:    PROC ASYNC;
/*A* INT: Read on break */
 
%INCLUDE CP_6;
%F$DCB;
%FPT_TRMPRG(FPTN=PURGE,DCB=M$UC,RSTBRK=YES);
%FPT_READ(FPTN=READ_SI,BUF=INPUT,DCB=M$SI);
%FPT_WRITE(FPTN=BEEP,BUF=BEEPER,TRANS=YES,DCB=M$UC);
%FPT_CLRSTK(FPTN=CLEAR,FRAMES=256);
DCL BEEPER BIT(9) STATIC INIT('007'O);
DCL SIZE UBIN;
DCL TRUE BIT(1) STATIC INIT('1'B);
DCL ZERO UBIN STATIC INIT(0);
DCL TYPE CHAR(1) STATIC INIT(' ');
%INCLUDE PILOT_C2;
DCL LEX_INPUT ENTRY(5) ALTRET;
DCL FTX_RPTERR ENTRY;
 
        INPUT=' ';
        CALL M$WRITE(BEEP);
        CALL M$READ(READ_SI)
          WHENALTRETURN DO;
           CALL FTX_RPTERR;
           CALL M$EXIT;
           END;
        IF INPUT~=' ' THEN DO;
           SIZE=DCBADDR(DCBNUM(M$SI))->F$DCB.ARS#;
           IF INPUT='!!' THEN DO;       /* clearstack and unwind              */
              CALL M$CLRSTK(CLEAR)
                WHENALTRETURN DO;
                 CALL FTX_RPTERR;
                 RETURN;
                 END;
              UNWIND TO REMVAR;
              END;
ELSE       CALL LEX_INPUT(TRUE,ZERO,INPUT,SIZE,TYPE)
             WHENALTRETURN DO;
              END;
           END;
        CALL M$TRMPRG(PURGE);
 
        RETURN;
 
END;
