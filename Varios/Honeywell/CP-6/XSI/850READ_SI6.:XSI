/*M* READ850 Reads input from 850 terminals and deposits it on disk */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* DMR,PLM=5,IND=5,CTI=5,SDI=5,MCL=10,CSI=0,ECI=0,DTI=2 */
 
READ850: PROC MAIN;
 
                                   /*
                                        %INCLUDES
                                                                  */
%INCLUDE CP_6;
%INCLUDE CP_6_SUBS;
 
                                   /*
                                        EXTERNALS
                                                                  */
DCL M$SI DCB;
DCL M$OU DCB;
DCL M$DO DCB;
 
DCL B$TCB$ PTR SYMREF;
 
                                   /*
                                        FPTS
                                                                  */
     %FPT_READ      (FPTN=READ_SI,
                         DCB=M$SI,
                         BUF=BUFFER_850,
                         WAIT=YES);
 
     %FPT_WRITE     (FPTN=WRITE_OU,
                         DCB=M$OU,
                         BUF=BUFFER_850,
                         KEY=FILE_KEY,
                         WAIT=YES);
 
     %FPT_CLOSE     (FPTN=CLOSE_OU,
                         DCB=M$OU,
                         DISP=SAVE,
                         RELG=YES);
 
     %FPT_WRITE     (FPTN=ONE_SPACE,
                         DCB=M$OU,
                         WAIT=YES,
                         KEY=FILE_KEY,
                         BUF=ONE_BLANK);
 
     %FPT_PROMPT    (FPTN=NIL_PROMPT,
                         TRANS=YES,
                         DCB=M$UC,
                         PROMPT=PROMPT_,
                         VFC=YES);
 
     %FPT_OPEN      (FPTN=OPEN_OU,
                         DCB=M$OU,
                         ASN=FILE,
                         DISP=NAMED,
                         CTG=YES,
                         EXIST=NEWFILE,
                         FUN=CREATE,
                         ACS=DIRECT,
                         ORG=KEYED,
                         SHARE=NONE);
 
     %FPT_ERRMSG    (FPTN=ERROR_WRITE,
                         BUF=ERROR_BUF,
                         DCB=M$OU,
                         OUTDCB1=M$DO,
                         CODE=NIL);
 
 
 
                                   /*
                                        LOCAL BASED
                                                                  */
     %F$DCB;
 
     %B$TCB;
 
     %B$ALT;
 
                         /*
                              SUB for accessing ALTRET frame
                                                                  */
 
     %SUB B$ALT="B$TCB$->B$TCB.ALT$->B$ALT";
 
 
                                   /*
                                        LOCAL STATIC
                                                                  */
DCL M$SI$ PTR STATIC;
 
DCL BUFFER_850 CHAR(255) STATIC SYMDEF;
DCL ERROR_BUF CHAR(120) STATIC CALIGNED;
 
DCL IN_CTR SBIN WORD STATIC SYMDEF INIT(0);
DCL OUT_CTR SBIN WORD STATIC SYMDEF INIT(0);
 
DCL PROMPT_ CHAR(1) STATIC INIT('@');
DCL ONE_BLANK CHAR(1) STATIC INIT(' ');
 
                                   /*
                                        EDIT-style key for writing
                                        the output.               */
DCL 1 FILE_KEY STATIC SYMDEF,
         2 CNT UBIN BYTE CALIGNED INIT(3),
         2 PIF UBIN (27) CALIGNED INIT(0);
 
 
%EJECT;
 
/*
 
     Begin  R E A D 8 5 0  main
 
                                                                  */
 
                                   /*
                                        Open the file for keyed access
                                                                  */
 
     CALL M$OPEN (OPEN_OU) ALTRET (ALT0900);
 
                                        /*
                                             Set null prompt
                                                                  */
     CALL M$PROMPT (NIL_PROMPT);
 
     M$SI$ = DCBADDR(DCBNUM(M$SI));
 
                                   /*
                                        MAIN LOOP:
                                        Read a record from the device,
                                        increment the edit-style key,
                                        then, depending on whether or
                                        not data was obtained from the
                                        device, write the obtained
                                        record, or, if no data was
                                        sent, write a single blank....
                                        just as if it had been typed
                                        into EDIT.                */
 
     DO WHILE ('1'B);
 
                                   /*
                                        ASSUMPTION: The only ALTRET
                                        that occurs is end-of-file
                                                                  */
          CALL M$READ (READ_SI) ALTRET (ALT0300);
 
                                   /*
                                        Increment the Position In File
                                                                  */
          FILE_KEY.PIF = FILE_KEY.PIF + 1000;
 
          IF M$SI$ -> F$DCB.ARS# > 0
          THEN
            DO;
                 WRITE_OU.BUF_.BOUND = M$SI$ -> F$DCB.ARS# - 1;
 
                 CALL M$WRITE (WRITE_OU) ALTRET (ALT0100);
ALT0100:         ;
               END;                     /* DO IF REAL BUFFER PASSED */
 
          ELSE
            DO;
                 CALL M$WRITE (ONE_SPACE) ALTRET (ALT0200);
ALT0200:         ;
               END;                     /* DO IF NIL BUFFER */
 
 
        END;                            /* DO WHILE MORE TO DO */
 
ALT0300: ;                              /* Here if EOF on device */
 
     CALL M$CLOSE (CLOSE_OU);
     CALL M$EXIT;
 
ALT0900: ;                              /* Here if cant open M$OU */
 
     ERROR_WRITE.CODE_ = VECTOR(B$ALT.ERR);
     CALL M$ERRMSG (ERROR_WRITE) ALTRET (ALT1000);
 
ALT1000: ;
     CALL M$XXX;
 
 
END READ850;
