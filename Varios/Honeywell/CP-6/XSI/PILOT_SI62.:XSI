/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*                   Written By: Ben Faul @LADC                     */
/**** PILOT **** PILOT **** PILOT **** PILOT **** PILOT ****DE140.1
 
    The following procedures are the primitives of the
    PILOT language. All functionality of the language
    except system calls are found in this section.
    System functions are found in PILOT_SI63, PILOT_SI64
 
    New functions should be added to this file. System commands
      should be appended to PILOT_SI64
 
***** PILOT **** PILOT **** PILOT **** PILOT **** PILOT ****/
 
PARSE_B: PROC(MODE,CHARN,SIZE,EXTENT) ALTRET;
/*A* PARSE_B: BEEP */
DCL CHARN CHAR(SIZE);                   /* current stack pointer              */
DCL Z UBIN;
DCL SIZE UBIN;
DCL EXTENT UBIN;
DCL MODE BIT(1);                        /* mode, 0=check only, 1=execute      */
%INCLUDE CP_6;
%FPT_WRITE(FPTN=BEEP,BUF=BEEPER,TRANS=YES,DCB=M$UC);
%FPT_WAIT(FPTN=WAIT_1,UNITS=1);
DCL BEEPER BIT(9) STATIC INIT('007'O);
DCL TYPE CHAR(1);
%INCLUDE PILOT_C2;
        IF MODE='0'B THEN RETURN;
        CALL M$WAIT(WAIT_1);            /* wait 1 second                      */
        CALL M$WRITE(BEEP);             /* send a beep to the user            */
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
PARSE_C: PROC(MODE);
/*A* PARSE_C: Clear the screen                 */
DCL WHERE UBIN;                         /* current stack pointer              */
DCL MODE BIT(1) UNAL;                   /* mode, 0=check only, 1=execute      */
DCL GNEWFRM ENTRY;
DCL XG$CLOSE_RETAINED_SEG ENTRY;
DCL XG$DELETE_RETAINED_SEG ENTRY(1);
DCL XG$CREATE_RETAINED_SEG ENTRY(1);
%INCLUDE PILOT_C2;
 
        IF MODE='0'B THEN RETURN;
        DO WHERE=0 TO 9999;
           BITMAP(WHERE)='0'B;
           END;
        IF ~GRAPHICS_MODE THEN RETURN;
        CALL XG$CLOSE_RETAINED_SEG;
        CALL XG$DELETE_RETAINED_SEG(1);
        CALL XG$CREATE_RETAINED_SEG(1);
        CALL GNEWFRM;
        BUFFER_OLD=' '; /* clear status area on screen, cause a new status generate */
 
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
PARSE_D: PROC(MODE);
/*A* PARSE_D: Pen Down */
%INCLUDE PILOT_C2;
DCL MODE BIT(1);                        /* mode, 0=check only, 1=execute      */
        IF MODE THEN PEN='0'B;          /* PEN DOWN                           */
 
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
PARSE_E: PROC(MODE,TEST);
/*A* PARSE_E: Tests for edge of screen */
DCL MODE BIT(1);                        /* mode, 0=check only,1=execute       */
DCL TEST BIT(1);
%INCLUDE PILOT_C2;
        IF ~MODE THEN RETURN;
        IF CURRENT(0)>=MAX_LENGTH OR
          CURRENT(1)>=MAX_LENGTH OR
          CURRENT(0)<=0 OR
          CURRENT(1)<=0 THEN TEST='1'B; /* at edge                            */
        ELSE TEST='0'B;
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
PARSE_F: PROC(MODE);
/*A* PARSE_F: Test False */
DCL MODE BIT(1);                        /* mode, 0=check only, 1=execute      */
DCL X SBIN;
DCL Y SBIN;
DCL GMOVA2 ENTRY(2);
DCL GLINA2 ENTRY(2);
%INCLUDE PILOT_C2;
 
        IF ~MODE THEN RETURN;
 
        X=0;
        Y=0;
        DO CASE(DIRECTION);             /* determine vector direction         */
/*
  Directions:
 
    0=north
    1=north-west
    2=west
    3=south-west
    4=south
    5=south-east
    6=east
    7=north-east
*/
         CASE(0);
           Y=Y+1;
         CASE(1);
           Y=Y+1;
           X=X-1;
         CASE(2);
           X=X-1;
         CASE(3);
           X=X-1;
           Y=Y-1;
         CASE(4);
           Y=Y-1;
         CASE(5);
           X=X+1;
           Y=Y-1;
         CASE(6);
           X=X+1;
         CASE(7);
           X=X+1;
           Y=Y+1;
         END;
        LAST=CURRENT;
%EJECT;
        IF SCREEN_MODE=3 THEN DO;  /* if clip mode, dont allow off window     */
           IF CURRENT(0)=0 AND X=-1 THEN X=0;
           ELSE IF CURRENT(0)=MAX_LENGTH AND X=1 THEN X=0;
           IF CURRENT(1)=0 AND Y=-1 THEN Y=0;
           ELSE IF CURRENT(1)=MAX_LENGTH AND Y=1 THEN Y=0;
           END;
%EJECT;
/*
  If wrap mode is reflected then, keep direction but move back onto
  screen by going into diagonal quadrant from off-screen position.
*/
        IF SCREEN_MODE=1 THEN DO;       /* wrap                               */
           DO CASE(DIRECTION);
            CASE(0);                    /* north                              */
              IF CURRENT(1)=MAX_LENGTH THEN CURRENT(1)=0;
            CASE(1);                    /* north-west                         */
              IF CURRENT(1)=MAX_LENGTH THEN CURRENT(1)=0;
              IF CURRENT(0)=0 THEN CURRENT(0)=MAX_LENGTH;
            CASE(2);                    /* west                               */
              IF CURRENT(0)=0 THEN CURRENT(0)=MAX_LENGTH;
            CASE(3);                    /* south-west                         */
              IF CURRENT(0)=0 THEN CURRENT(0)=MAX_LENGTH;
              IF CURRENT(1)=0 THEN CURRENT(1)=MAX_LENGTH;
            CASE(4);                    /* south                              */
              IF CURRENT(1)=0 THEN CURRENT(1)=MAX_LENGTH;
            CASE(5);                    /* south-east                         */
              IF CURRENT(0)=MAX_LENGTH THEN CURRENT(0)=0;
              IF CURRENT(1)=0 THEN CURRENT(1)=MAX_LENGTH;
            CASE(6);                    /* east                               */
              IF CURRENT(0)=MAX_LENGTH THEN CURRENT(0)=0;
            CASE(7);                    /* north-east                         */
              IF CURRENT(0)=MAX_LENGTH THEN CURRENT(0)=0;
              IF CURRENT(1)=MAX_LENGTH THEN CURRENT(1)=0;
            END;
           CALL GMOVA2(CURRENT(0),CURRENT(1));
           END;
%EJECT;
/*
  If reflect then change direction in such a manner to allow the turtle
  to be reflected back onto the screen at a 90 degree angle.
*/
        IF SCREEN_MODE=2 THEN DO; /* reflect, 90 degrees, except on perpidicular */
           DO CASE(DIRECTION);
            CASE(0);                    /* north                              */
              IF CURRENT(1)=MAX_LENGTH THEN DO;
                 DIRECTION=4;
                 Y=Y*-1;
                 END;
            CASE(1);                    /* north-west                         */
              IF CURRENT(1)=MAX_LENGTH THEN DIRECTION=3;
              IF CURRENT(0)=0 THEN
                 DIRECTION=7;
              IF CURRENT(1)=MAX_LENGTH THEN Y=Y*-1;
              IF CURRENT(0)=0 THEN X=X*-1;
              IF CURRENT(0)=0 AND CURRENT(1)=MAX_LENGTH THEN DIRECTION=5;
            CASE(2);                    /* west                               */
              IF CURRENT(0)=0 THEN DO;
                 DIRECTION=6;
                 X=X*-1;
                 END;
            CASE(3);                    /* south-west                         */
              IF CURRENT(0)=0 OR
                CURRENT(1)=0 THEN DO;
                 IF CURRENT(0)=0 THEN X=X*-1;
                 IF CURRENT(1)=0 THEN Y=Y*-1;
                 IF CURRENT(0)=0 THEN DIRECTION=5;
                 IF CURRENT(1)=0 THEN DIRECTION=1;
                 IF CURRENT(0)=0 AND CURRENT(1)=0 THEN DIRECTION=7;
                 END;
            CASE(4);                    /* south                              */
              IF CURRENT(1)=0 THEN DO;
                 DIRECTION=0;
                 Y=Y*-1;
                 END;
            CASE(5);                    /* south-east                         */
              IF CURRENT(0)=MAX_LENGTH OR
                CURRENT(1)=0 THEN DO;
                 IF CURRENT(0)=MAX_LENGTH THEN X=X*-1;
                 IF CURRENT(1)=0 THEN Y=Y*-1;
                 IF CURRENT(0)=MAX_LENGTH THEN DIRECTION=3;
                 IF CURRENT(1)=0 THEN DIRECTION=7;
                 IF CURRENT(0)=MAX_LENGTH AND CURRENT(1)=0 THEN DIRECTION=1;
                 END;
            CASE(6);                    /* east                               */
              IF CURRENT(0)=MAX_LENGTH THEN DO;
                 DIRECTION=2;
                 X=X*-1;
                 END;
            CASE(7);                    /* north-east                         */
              IF CURRENT(0)=MAX_LENGTH OR
                CURRENT(1)=MAX_LENGTH THEN DO;
                 IF CURRENT(0)=MAX_LENGTH THEN X=X*-1;
                 IF CURRENT(1)=MAX_LENGTH THEN Y=Y*-1;
                 IF CURRENT(0)=MAX_LENGTH THEN DIRECTION=1;
                 IF CURRENT(1)=MAX_LENGTH THEN DIRECTION=5;
                 IF CURRENT(0)=MAX_LENGTH AND CURRENT(1)=MAX_LENGTH THEN DIRECTION=3;
                 END;
            END;
           END;
%EJECT;
        CURRENT(0)=CURRENT(0)+X;
        CURRENT(1)=CURRENT(1)+Y;
        IF CURRENT(0)>MAX_LENGTH THEN CURRENT(0)=MAX_LENGTH; /* OVERFLOW CORRECTION */
        IF CURRENT(1)>MAX_LENGTH THEN CURRENT(1)=MAX_LENGTH; /* OVERFLOW CORRECTION */
        IF ~GRAPHICS_MODE THEN RETURN;
        IF PEN THEN CALL GMOVA2(CURRENT(0),CURRENT(1));
        ELSE CALL GLINA2(CURRENT(0),CURRENT(1));
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
PARSE_H: PROC(MODE);
/*A* PARSE_H: Bring turtle home */
DCL MODE BIT(1);                        /* mode, 0=check only, 1=execute      */
%INCLUDE PILOT_C2;
DCL GMOVA2 ENTRY(2);
 
        IF (MODE&GRAPHICS_MODE)='0'B THEN RETURN;
        CALL GMOVA2(MAX_LENGTH/2,MAX_LENGTH/2); /* home the turtle            */
        CURRENT(0)=MAX_LENGTH/2;
        CURRENT(1)=MAX_LENGTH/2;
 
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
PARSE_S: PROC(MODE);
/*A* PARSE_S:  Color select in front of turtle */
DCL MODE BIT(1);                        /* mode, 0=check only, 1=execute      */
%INCLUDE PILOT_C2;
 
        IF ~(MODE&GRAPHICS_MODE) = '0'B THEN RETURN;
 
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
PARSE_T: PROC(MODE,CHARN,SIZE,I);
/*A* PARSE_T: Test accumulator for >0 */
DCL MODE BIT(1);
DCL MODE1 BIT(1);
DCL TEST BIT(1);
DCL CHARN CHAR(SIZE);
DCL SIZE UBIN;
DCL I UBIN;
DCL LEX_INPUT ENTRY(5) ALTRET;
DCL ERROR ENTRY(4);
%INCLUDE PILOT_C2;
 
        IF ACCUMULATOR=0 THEN TEST='0'B;
        ELSE TEST='1'B;
        IF SUBSTR(CHARN,I,1)='?' OR     /* do binomial random variant         */
          SUBSTR(CHARN,I,1)='E' THEN TEST='1'B; /* do edge                    */
        I=I+1;
        IF TEST AND MODE THEN MODE1='1'B;
        ELSE MODE1='0'B;
        CALL EXECUTE ALTRET(OOPS); /* execute next command, bound or not with MODE */
        IF ~TEST OR ~MODE THEN MODE1='1'B;
        ELSE MODE1='0'B;
        CALL EXECUTE ALTRET(OOPS);
OOPS:   I=I-1;                          /* all errors previously handled      */
%EJECT;
EXECUTE: PROC ALTRET;
/*A* EXECUTE: Execute a true/false statement */
DCL CHARX CHAR(1);
DCL ZERO UBIN;
DCL ONE UBIN;
DCL TYPE CHAR(1);
        TYPE=' ';
        ONE=1;
        ZERO=0;
        CHARX=SUBSTR(CHARN,I,1);
        IF CHARX='(' OR
          CHARX='[' THEN DO;
           I=I+1;
           TYPE=CHARX;
           CALL LEX_INPUT(MODE1,I,CHARN,SIZE,TYPE) ALTRET(SKIP);
           END;
        ELSE CALL LEX_INPUT(MODE1,ZERO,CHARX,ONE,TYPE) ALTRET(SKIP);
        I=I+1;
        RETURN;
SKIP:   I=SIZE;
        ERROR_BIT='0'B;
        CALL ERROR('ERROR ENCOUNTERED IN LOGICAL EXPRESSION',' ',40,1);
        ALTRETURN;
END;
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
PARSE_U: PROC(MODE);
/*A* PARSE_U: Pen up */
DCL MODE BIT(1);                        /* mode, 0=check only, 1=execute      */
%INCLUDE PILOT_C2;
 
        IF MODE THEN PEN='1'B;          /* pen UP                             */
 
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
PARSE_W: PROC(MODE,CHARN,SIZE,EXTENT) ALTRET;
/*A* PARSE_W: Wait 1 second */
%INCLUDE CP_6;
%FPT_WAIT(FPTN=WAIT_1,UNITS=1);         /* wait 1 second                      */
DCL MODE BIT(1);
DCL CHARN CHAR(SIZE);
DCL SIZE UBIN;
DCL Z UBIN;
DCL EXTENT UBIN;
DCL TYPE CHAR(1);
%INCLUDE PILOT_C2;
        IF MODE THEN
        CALL M$WAIT(WAIT_1);
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
DECREMENT_ACCUM: PROC ALTRET;
/*A* DECREMENT_ACCUM: Decrement the acumulator by 1 */
DCL ERROR ENTRY(4);                     /* pilot error                        */
%INCLUDE PILOT_C2;
        IF ACCUMULATOR = 0 THEN DO;     /* accumulator cannot be <0           */
/*         CALL ERROR('WARNING, ACCUMULATOR TRIED TO UNDERFLOW',' ',39,1); */
           ALTRETURN;
           END;
        ACCUMULATOR=ACCUMULATOR-1;
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
INCREMENT_ACCUM: PROC ALTRET;
/*A* INCREMENT_ACCUM: Increment accumulator by 1 */
%INCLUDE PILOT_C2;
DCL ERROR ENTRY(4);                     /* pilot error                        */
 
        IF ACCUMULATOR=9999 THEN DO;    /* accumulator too big                */
/*         CALL ERROR('WARNING, ACCUMULATOR TRIED TO OVERFLOW',' ',39,1); */
           ALTRETURN;
           END;
        ACCUMULATOR=ACCUMULATOR+1;
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
DEFINES: PROC(CHARN,SIZE) ALTRET;
/*A* DEFINES: Define a user command */
DCL CHARN CHAR(SIZE);
DCL SIZE UBIN;
DCL I UBIN;
DCL J UBIN;
DCL ERROR ENTRY(4);
%INCLUDE PILOT_C2;
%INCLUDE PILOT_C1;
        J=1;
        CALL GET_POSITION(I) ALTRET(BOMB);
        SYMBOL_TABLE.TEXT(I)=SUBSTR(CHARN,2);
        RETURN;
BOMB:   CALL ERROR('CANT REDFINE SYMBOL',SUBSTR(CHARN,J,1),19,1);
        ALTRETURN;
GET_POSITION: PROC(X) ALTRET;
DCL X UBIN;
DCL Y UBIN;
DCL ALPHA CHAR(26) STATIC INIT('ABCDEFGHIJKLMNOPQRSTUVWXYZ');
        DO Y=0 TO 25;
           IF SUBSTR(CHARN,J,1)=SUBSTR(ALPHA,Y,1) THEN DO;
              X=Y;
              RETURN;
              END;
           END;
        ALTRETURN;
END;
END;
