/*M* MIDGET_SIc4 (util:c) -- Utilities added for MAKE STD opt (-g) */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
 
/*P*    NAME:     MIDGET_SIc4
        PURPOSE:  This file contains parsing and general utility type
                  functions, used for the implementation of the -g
                  option.
        DESCRIPTION:
            Utility functions to implement the -g option, which uses
            output from MAKE.X (using its -g option).  A standard
            file of information given for a particular target.  This
            data includes: input file, input target, output file,
            output target, and rule to build the target.
               1)  md4_SetupByRule ()
               2)  md4_IsInclude ()
               3)  md4_AllocTarget ()
               4)  md4_BuildTargetTable ()
*/
/********************************************************************/
 
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <time.h>
#include <SEAGULL.h>
 
#include "MIDGET1:h"
 
SGHASHTABLE  md_init_target_ht = SG6_INIT_HASH_TABLE;
 
/* create a macros to call the symbol table funcs */
#define  md4_PUT_TARGET(n,l)  \
   (TARGET *) sg6__LookupSym( &md_target_hash_table, n, l, \
                              /*add*/ 1, md4_AllocTargetSym );
#define  md4_LOOKUP_TARGET(n,l)  \
   (TARGET *) sg6__LookupSym( &md_target_hash_table, n, l, \
                              /*!add*/ 0, md4_AllocTargetSym );
 
#pragma LIST EJECT
/*==================================================================*/
/*F*  NAME:    md4_SetupByRule ()
      PURPOSE: Function to setup flags according to the MAKE build rule.
      DESCRIPTION:
         This function determines the type of source file from the given
         MAKE rule, and sets a flag to indicate what it finds.
      INPUT:
         make_rule   -  eg. ".c.o", ".6.o", ".hsi.h"; the rule that
                        MAKE.X will use to build a given target
      OUTPUT:
         md_info.flag.source_type  -  set to reflect the appropreiate
                                    type of source file (C, PL6, etc)
*/
/*==================================================================*/
 
int
md4_SetupByRule( char *make_rule)
{
   char    *compiler_type;
 
 
   compiler_type = make_rule+1;
   switch (*compiler_type)  {
   case '6':
      md_info.flag.source_type = MD_PL6_SOURCE;
      break;
   case 'a':
      md_info.flag.source_type = MD_BMAP_SOURCE;
      break;
   case 'c':
      if (strstr( make_rule, ".cap"))
         md_info.flag.source_type = MD_CAP_SOURCE;
      else if (strstr( make_rule, ".copy"))
         md_info.flag.source_type = MD_C_SOURCE;            /*N* ??? */
      else
         md_info.flag.source_type = MD_C_SOURCE;
      break;
   case 'd':
      if (strstr( make_rule, ".dvi"))
         md_info.flag.source_type = MD_TEX_DVI_FILE;
      else
         md_info.flag.source_type = MD_ADAPT_DIALOGUE;
      break;
   case 'e':
      md_info.flag.source_type = MD_ERRMSG_FILE;
      break;
   case 'f':
      if (strstr( make_rule, ".fmt"))
         md_info.flag.source_type = MD_C_SOURCE;            /*N* ??? */
      else
         md_info.flag.source_type = MD_FORTRAN_SOURCE;
      break;
   case 'g':
      md_info.flag.source_type = MD_GRAMMER_SOURCE;
      break;
   case 'h':
      if (strstr( make_rule, ".help"))
         md_info.flag.source_type = MD_HELP_FILE;
      else if (strstr( make_rule, ".herman"))
         md_info.flag.source_type = MD_HERMAN_SOURCE;
      else
         md_info.flag.source_type = MD_C_SOURCE;
      break;
   case 'i':
      md_info.flag.source_type = MD_PL6_SOURCE;
      break;
   case 'l':
      if (strstr( make_rule, ".lib"))
         md_info.flag.source_type = MD_LEMUR_LIB;
      else if (strstr( make_rule, ".ls"))
         md_info.flag.source_type = MD_LISTING_FILE;
      else
         md_info.flag.source_type = MD_FLEX_SOURCE;
      break;
   case 'n':
      md_info.flag.source_type = MD_PARTRGE_SOURCE;
      break;
   case 'o':
      md_info.flag.source_type = MD_OBJECT_FILE;
      break;
   case 'p':
      md_info.flag.source_type = MD_PASCAL_SOURCE;
      break;
   case 'r':
      md_info.flag.source_type = MD_RUNUNIT;
      break;
   case 's':
      md_info.flag.source_type = MD_SHARED_LIB;
      break;
   case 't':
      if (strstr( make_rule, ".tex"))
         md_info.flag.source_type = MD_TEX_SOURCE;
      break;
   case 'x':
      md_info.flag.source_type = MD_EXTERNAL_LIB;
      break;
   case 'y':
      md_info.flag.source_type = MD_BISON_SOURCE;
      break;
   default:
      md_info.flag.source_type = MD_NO_DEFAULT_RULE;
      break;
   }  /*switch compiler_type */
 
return( md_info.flag.source_type);
}  /*md4_SetupByRule ()*/
 
 
#pragma LIST EJECT
/*==================================================================*/
/*F*  NAME:    md4_IsInclude ()
      PURPOSE: Function to determine if an include file is given on an
               input record (for all compiler types).
      DESCRIPTION:
         We know the compiler type all ready (hopefully), so we switch
         on that information.  Then we parse for include files, looking
         a particular way for each language.
      INPUT:
         input_rec   -  one record from a source file
      OUTPUT:
         If an include file is found, a pointer to the name will be
         returned.  Otherwise, a NULL pointer is returned.
*/
/*==================================================================*/
 
char *
md4_IsInclude( char *input_rec)
{
   char *pos;
#ifdef DEBUG
   char  ME[] = "md4_IsInclude";
#else
   char *ME = (char *)NULL;
#endif
 
#define NOT_FOUND  (char *)NULL
 
   switch (md_info.flag.source_type)  {
      case MD_GENERIC_SOURCE:
         if (sscanf( input_rec, "%11s %40s",
                     md_directive, md_file_name) != 2)  {
            return( NOT_FOUND);
         }
         if (!strstr( StringToLower( md_directive), "include"))
            return( NOT_FOUND);
 
         switch (*md_directive)  {
            case '#':
               md_info.flag.source_type = MD_C_SOURCE;
               return( md4_IsCInclude( input_rec));
            case '%':
               md_info.flag.source_type = MD_PL6_SOURCE;
               return( md4_IsPL6Include( input_rec));
            case 'i':
               return( md4_IsFortranInclude( input_rec));
            default:
               printf( "Oops! Can't determine type of source file.\n");
               exit( 7);
         }
         break;
      case MD_C_SOURCE:
         return( md4_IsCInclude( input_rec));
 
      case MD_PL6_SOURCE:
      case MD_PARTRGE_SOURCE:
      case MD_PASCAL_SOURCE:
         return( md4_IsPL6Include( input_rec));
 
      case MD_FORTRAN_SOURCE:
         return( md4_IsFortranInclude( input_rec));
 
      case MD_FLEX_SOURCE:
      case MD_BISON_SOURCE:
      case MD_HERMAN_SOURCE:
      case MD_GRAMMER_SOURCE:
      default:
         Warning( ME, "Looking for includes in unsupported source file type\n");
         return( NOT_FOUND);
   }  /*switch make_rule*/
}  /* md4_IsInclude() */
 
 
#pragma LIST EJECT
/*==================================================================*/
/*F*  NAME:    md4_IsCInclude ()
      PURPOSE: Function to determine if an include file is given on an
               input record (for all compiler types).
      DESCRIPTION:
         We know the compiler type all ready (hopefully), so we switch
         on that information.  Then we parse for include files, looking
         a particular way for each language.
      INPUT:
         input_rec   -  one record from a source file
      OUTPUT:
         If an include file is found, a pointer to the name will be
         returned.  Otherwise, a NULL pointer is returned.
*/
/*==================================================================*/
 
char *
md4_IsCInclude( char *input_rec)
{
   char *pos;
   char *quote;
   char *greater_than;
   char *dot;
 
#define NOT_FOUND  (char *)NULL
 
   if (!(pos = strchr( input_rec, '#')))
      return( NOT_FOUND);
   if (sscanf( pos+1, "%11s %40s", md_directive, md_file_name) != 2)  {
      /* maybe do some verbose stuff, or warning */
      return( NOT_FOUND);
   }
   if (!strstr( md_directive, "include"))
      return( NOT_FOUND);
 
   if (quote = strrchr( md_file_name, '\"'))
      *quote = '\0';
   else if (greater_than = strrchr( md_file_name, '>'))
      *greater_than = '\0';
 
   if (dot = strrchr( md_file_name, '.'))
      *dot = ':';
   return( md_file_name+1);   /* skip the " or > with the +1 */
}  /* md4_IsCInclude() */
 
 
#pragma LIST EJECT
/*==================================================================*/
/*F*  NAME:    md4_IsPL6Include ()
      PURPOSE: Function to determine if an include file is given on an
               input record (for all compiler types).
      DESCRIPTION:
         We know the compiler type all ready (hopefully), so we switch
         on that information.  Then we parse for include files, looking
         a particular way for each language.
      INPUT:
         input_rec   -  one record from a source file
      OUTPUT:
         If an include file is found, a pointer to the name will be
         returned.  Otherwise, a NULL pointer is returned.
*/
/*==================================================================*/
 
char *
md4_IsPL6Include( char *input_rec)
{
   char *pos;
   char *semi_colon;
 
#define NOT_FOUND  (char *)NULL
 
   if (!(pos = strchr( input_rec, '%')))
      return( NOT_FOUND);
   if (sscanf( pos+1, "%11s %40s", md_directive, md_file_name) != 2)  {
      /* maybe do some verbose stuff, or warning */
      return( NOT_FOUND);
   }
   if (!strstr( StringToLower( md_directive), "include"))
      return( NOT_FOUND);
 
   if (semi_colon = strchr( md_file_name, ';'))
      *semi_colon = 0;
   return( md_file_name);
}  /* md4_IsPL6Include() */
 
 
#pragma LIST EJECT
/*==================================================================*/
/*F*  NAME:    md4_IsFortranInclude ()
      PURPOSE: Function to determine if an include file is given on an
               input record (for all compiler types).
      DESCRIPTION:
         We know the compiler type all ready (hopefully), so we switch
         on that information.  Then we parse for include files, looking
         a particular way for each language.
      INPUT:
         input_rec   -  one record from a source file
      OUTPUT:
         If an include file is found, a pointer to the name will be
         returned.  Otherwise, a NULL pointer is returned.
*/
/*==================================================================*/
 
char *
md4_IsFortranInclude( char *input_rec)
{
   char *comma;
   char *etc;
 
#define NOT_FOUND  (char *)NULL
 
   if (sscanf( input_rec, "%11s %40s", md_directive, md_file_name) != 2)  {
      return( NOT_FOUND);
   }
   if (!strstr( md_directive, "INCLUDE"))
      return( NOT_FOUND);
 
   if (comma = strrchr( md_file_name, ','))
      *comma = '\0';
   etc ;  /*N* maybe look for extra bull-shit in string ?? */
/* md_info.flag.source_type = MD_FORTRAN_SOURCE;    *N*/
   return( md_file_name);
}  /* md4_IsFortranInclude() */
 
 
#pragma LIST EJECT
/*==================================================================*/
/*F*  NAME:    md4_AllocTargetSym ()
      PURPOSE: Function to allocate storage for a symbol table entry.
      DESCRIPTION:
         A target symbol table entry is allocated by this function.
         This is the user defined allocation routine required by the
         SEAGULL symbol table manager functions.
      INPUT:
         name     -  symbol name to place into the table
         name_len -  predetermined length of the symbol name
         flag     -  tells us to alloc space for text or not
      OUTPUT:
         A pointer to the symbol table entry is returned on success.
         A NULL pointer is returned on a failure.
*/
/*==================================================================*/
 
SGSYMBOL *
md4_AllocTargetSym( char *name, int name_len, int flag)
{
   TARGET  *tsym;
   char    *sg6__AllocText();
   char    *new_text;
   int      i, size;
 
 
   if (!md_target_head)  {   /* need to allocate more targets */
      size = sizeof( TARGET) * SG6_ALLOC_NUM;
      tsym = (TARGET *) malloc( size);
      if (!(md_target_head = tsym))
         return( NULL);
      i = SG6_ALLOC_NUM;
      while (--i)
         tsym->next = tsym+1, tsym++;
      tsym->next = NULL;
   }
   tsym = md_target_head;
   md_target_head = tsym->next;
   *tsym = md_init_target;
   tsym->ta_len = name_len;
 
   if (flag & 1)  {  /* need to alloc block to hold text */
      new_text = tsym->ta_key = sg6__AllocText( name_len+1, name);
      if (!new_text)
         return( NULL);
      new_text[ name_len] = 0;
   }
   else
      tsym->ta_key = name;
 
   return( (SGSYMBOL *)tsym);
 
}  /*md4_AllocTargetSym() */
 
 
#pragma LIST EJECT
/*==================================================================*/
/*F*  NAME:    md4_BuildTargetTable ()
      PURPOSE: Function to build a symbol table of all targets.
      DESCRIPTION:
         The input file (made with the '-g' option of MAKE.X) is read,
         and all targets specified are placed into a symbol table.
         The key is the ouput target name.
      INPUT:
         fp    -  FILE pointer to the input source file (MAKE std fid)
      OUTPUT:
         md_target_head -  changed to reflect the head of the table.
         md_target_hash_table - filled in with all targets
*/
/*==================================================================*/
 
int
md4_BuildTargetTable( FILE *fp)
{
   char    in_fid[ FID_LEN];
   int     in_fid_len;
   char    out_fid[ FID_LEN];
   int     out_fid_len;
   char    in_tar[ TARGET_LEN];
   int     in_tar_len;
   char    out_tar[ TARGET_LEN];
   int     out_tar_len;
   char    rule[ RULE_LEN];
   int     rule_len;
   char    key[ TARGET_LEN];
   int     key_len, i;
   char   *dot;
   char   *str;
   TARGET *tsym;
#ifdef DEBUG
   char    ME[] = "md4_BuildTargetTable";
#else
   char   *ME   = (char *)NULL;
#endif
 
 
/* init the hash table... */
   md_target_hash_table = md_init_target_ht;
 
/*********************************************************************
 * The BIG loop:  (thru standard file)
 */
   while (fscanf( fp, "%s %s %s %s %s",
                  in_fid, in_tar, out_fid, out_tar, rule) == 5)  {
      in_fid_len = strlen( in_fid);
      in_tar_len = strlen( in_tar);
      out_fid_len = strlen( out_fid);
      out_tar_len = strlen( out_tar);
      rule_len = strlen( rule);
 
      memcpy( key, out_tar, out_tar_len+1);
      if (dot = strrchr( key, '.'))
         *dot = 0;
      key_len = strlen( key);
      tsym = md4_PUT_TARGET( key, key_len);
      if (tsym != (TARGET *)NULL)  {
         if (tsym->ta_rule)  {
            /* collision of target names (keys) has occured */
            i = ++tsym->ta_collision_cnt;
            while (i--)
               memcpy( (key+ key_len++), "@\0", 2);
            tsym = md4_PUT_TARGET( key, key_len);
            if (tsym == (TARGET *)NULL)  {
               Error( ME, "Unable to resolve target collision.\n");
               return( ERROR);
            }
            ++tsym->ta_collision_cnt;
         }  /*if collision */
         str = tsym->ta_rule = (char *) malloc( rule_len+1);
         if (str)  memcpy( tsym->ta_rule, rule, rule_len+1);
         str = tsym->ta_in_fid = (char *) malloc( in_fid_len+1);
         if (str)  memcpy( tsym->ta_in_fid, in_fid, in_fid_len+1);
         str = tsym->ta_in_target = (char *) malloc( in_tar_len+1);
         if (str)  memcpy( tsym->ta_in_target, in_tar, in_tar_len+1);
         str = tsym->ta_out_fid = (char *) malloc( out_fid_len+1);
         if (str)  memcpy( tsym->ta_out_fid, out_fid, out_fid_len+1);
         str = tsym->ta_out_target = (char *) malloc( out_tar_len+1);
         if (str)  memcpy( tsym->ta_out_target, out_tar, out_tar_len+1);
      }
      else  {
         /* error */
      }
   }  /*while !EOF std file*/
   rewind( fp);
 
#ifdef DEBUG
   if (md_debug > 1 && md_info.opt.verbose)  {
      sg6__DumpHashTable( &md_target_hash_table, "MIDGET Targets");
   }
#endif
   md_info.flag.table_built = YES;
 
return 0;
}  /* md4_BuildTargetTable ()*/
 
 
#pragma LIST EJECT
/*==================================================================*/
/*F*  NAME:    md4_LookupInclude ()
      PURPOSE: Function to lookup the target name in the symbol table.
      DESCRIPTION:
         An include file name is passed in here, and an attempt is made
         to lookup the name in the symbol table.  Possible collisions
         are resolved properly (eg. test.c & test.h).
      INPUT:
         incl_name   -  include file name, as found in source code.
      OUTPUT:
         A pointer to the symbol table entry is returned on success,
         and a null pointer is returned otherwise.
*/
/*==================================================================*/
 
TARGET *
md4_LookupInclude( char *name, int name_len)
{
 
   char    key[ TARGET_LEN];
   int     key_len;
   char    tmp_target[ TARGET_LEN];
   int     loop_cnt, i;
   char   *dot;
   char   *colon;
   char   *found;
   TARGET *tsym;
#define    NOT_IN_TABLE  (TARGET *)NULL
 
   memcpy( key, name, name_len+1);
   if (dot = strrchr( key, '.'))
      *dot = 0;
   else if (colon = strrchr( key, ':'))
      *colon = 0;
   key_len = strlen( key);
   loop_cnt = 0;
 
   do  {
      tsym = md4_LOOKUP_TARGET( key, key_len);
      if (!tsym)
         return( NOT_IN_TABLE);
      else if (!tsym->ta_collision_cnt)
         return( tsym);
 
      if (!loop_cnt)  {
         loop_cnt = tsym->ta_collision_cnt;
         memcpy( tmp_target, name, name_len+1);
         if (dot = strrchr( tmp_target, '.'))
            *dot = ':';
         tmp_target[ name_len] = '.';
         tmp_target[ name_len+1] = 0;
      }
      found = strstr( tsym->ta_out_fid, tmp_target);
      if (found)
         return( tsym);
      else  {
         i = loop_cnt;
         while (i--)
            memcpy( (key+ key_len++), "@\0", 2);
      }
   }  while (!found && loop_cnt--);
 
   return( (TARGET *)NULL);
 
}  /* md4_LookupInclude() */
 
 
#pragma LIST EJECT
/*==================================================================*/
/*F*  NAME:    md4_IsDependent
      PURPOSE: Function to determine if an include file is a dependency
               or not.
      DESCRIPTION:
         An include file name is passed in here, and we have to decide
         if it is a dependency or not.  We try to find it in the target
         symbol table, and other neat things.
      INPUT:
         incl_name   -  name of file, as found in source code.
      OUTPUT:
         If successful (dependency found) a pointer to the output target
         will be returned; otherwise, a NULL pointer will be returned.
*/
/*==================================================================*/
 
char *
md4_IsDependent( char *include_name)
{
 
   char     name[ TARGET_LEN];
   int      name_len;
   int      path_cnt;
   char    *found_in_lib;
   TARGET  *tsym;
#ifdef DEBUG
   char  ME[] = "md4_IsDependent";
#else
   char *ME = (char *)NULL;
#endif
 
#define  NOT_DEPENDENT  (char *)NULL
#define  REDUNDANT      (char *)NULL
 
   found_in_lib = (char *)NULL;
   path_cnt = md_info.prefix_cnt;
   name_len = strlen( include_name);
   memcpy( name, include_name, name_len+1);
   do  {
      tsym = md4_LookupInclude( name, name_len);
 
      if (!tsym)  {
#ifdef DEBUG
         if (md_debug > 1)  {
            printf( "Lookup of \"%s\" failed! \n", name);
         }
#endif
         if (md_info.opt.warn && !found_in_lib)
            found_in_lib = md3_CheckLibraryInclude( name);
         if (!path_cnt)  {
            if (md_info.opt.warn && !found_in_lib)
               Warning( ME, "Suspicious Include file found: %s\n",
                        include_name);
            return( NOT_DEPENDENT);
         }
         else  {
            strcpy( name, md_info.prefix_str[ path_cnt]);
            strcat( name, include_name);
            name_len = strlen( name);
         }
      }
   }  while (!tsym && path_cnt--);
 
   /* I guess we got a live one...
    */
   if (tsym->ta_dependent == md_source_file_num)  {
#ifdef DEBUG
      if (md_debug > 1)  {
         printf( "Redundant dependency: %s \n", tsym->ta_out_target);
      }
#endif
      return( REDUNDANT);
   }
   else  {
      tsym->ta_dependent = md_source_file_num;
      return( tsym->ta_out_target);
   }
}  /* md4_IsDependent() */
 
 
#pragma LIST EJECT
/*==================================================================*/
/*F*  NAME:    md4_GenerateUTS
      PURPOSE: Function to create time stamp string for this generation.
      DESCRIPTION:
         This function is called as part of initialization.  It fills
         in some global variables with time stamp type strings.  This
         should only be done one time per MIDGET run.
      OUTPUT:
         md_time_stamp   -  formatted string with date & time
         md_English_time - commentary type string with English date
         md_uts          - UTS value used to generate the strings
*/
/*==================================================================*/
 
int
md4_GenerateUTS( char *time_stamp, char *English_time, time_t *uts)
{
   char        ts_fmt[] = "%Y-%m-%d_%H:%M:%S";
   char        Et_fmt[] = "(%b %d '%y)";
   struct tm  *time_p;
 
   if (uts)  {
      time_p = localtime( uts);
   }
   else {
      time( &md_uts);
      time_p = localtime( &md_uts);
   }
 
   if (time_stamp)
      strftime( time_stamp, TIMESTAMP_LEN, ts_fmt, time_p);
   if (English_time)
      strftime( English_time, TIMESTAMP_LEN, Et_fmt, time_p);
   return 0;
}  /* md4_GenerateUTS() */
 
 
#pragma LIST EJECT
/*==================================================================*/
/*F*  NAME:    md4_GetTimeStamps
      PURPOSE: Read old output file, and put time stamps into table.
      DESCRIPTION:
         This function reads through the old output file, and looks
         for embedded comments with UTS values on them.  When found,
         these values are placed into the Target symbol table.
      OUTPUT:
         symbol table entries may be modified to reflect the time
         stamp value found in the old output file, this field is
         called: ta_time_stamp (a ptr to UTS string).
*/
/*==================================================================*/
 
int
md4_GetTimeStamps( FILE *ofp)
{
#define  DEPEND_REC_LEN  132
   char  depend_rec[ DEPEND_REC_LEN+1];
   char  comment[ 9];
   char  target[ TARGET_LEN];
   int   key_len;
   char  time_stamp[ TIMESTAMP_LEN];
   char *dot;
   char *ts_comment;
   TARGET *tsym;
#ifdef DEBUG
   char  ME[] = "md4_GetTimeStamps";
#else
   char *ME = (char *)NULL;
#endif
 
   while (fgets( depend_rec, DEPEND_REC_LEN, ofp))  {
      if (ts_comment = strstr( depend_rec, "#*UTS*"))  {
         if (sscanf( ts_comment, "%s %s %s",
                     comment, target, time_stamp) == 3)  {
            if (dot = strrchr( target, '.'))
               *dot = 0;
            key_len = strlen( target);
            tsym = md4_LOOKUP_TARGET( target, key_len);
            if (tsym)  {
               tsym->ta_time_stamp = (char *)malloc( TIMESTAMP_LEN+1);
               if (tsym->ta_time_stamp)
                  memcpy( tsym->ta_time_stamp, time_stamp, TIMESTAMP_LEN+1);
            }
            else if (md_info.opt.warn)  {
               Warning( ME, "Symbol \"%s\" not found in tables\n",
                        target);
            }
         }  /*if scan*/
         else  {
            Error( ME, "Malformed UTS comment found in output file\n");
            exit( 3);
         }
      }  /*if UTS comment*/
   }  /*while !EOF*/
   rewind( ofp);
   return 0;
}  /* md4_GetTimeStamps() */
 
 
#pragma LIST EJECT
/*==================================================================*/
/*F*  NAME:    md4_IsUpToDate
      PURPOSE: Function to determine if a targets dependecies are up
               to date or not.
      DESCRIPTION:
         This function determines if a given target has up to date
         dependencies or not.  It does this by checking the generation
         time stamp for the dependencies, if it exists.  And, comparing
         that to the last modified times for the source & update files.
      OUTPUT:
         a zero (0) is returned to mean NOT up to date
         a non-zero value is returned to mean positive, up to date
*/
/*==================================================================*/
 
int
md4_IsUpToDate( char *source_fid, char *update_acct, char *target)
{
   char    key[ TARGET_LEN];
   int     key_len;
   char    time_stamp[ TIMESTAMP_LEN];
   char    update_fid[ 41];
   char   *dot;
   FILE   *fp;
   TARGET *tsym;
#ifdef DEBUG
   char  ME[] = "md4_IsUpToDate";
#else
   char *ME = (char *)NULL;
#endif
#define  UP2DATE      1
#define  NOT_UP2DATE  0
#define  md4_CHECK_LASTMOD(fid)  { \
   fp = fopen( fid, "r sharein"); \
   if (fp)  { \
      md4_GenerateUTS( time_stamp, (char *)NULL, &fp->_mod_time); \
      fclose( fp); \
      if (memcmp( time_stamp, tsym->ta_time_stamp, \
                  TIMESTAMP_LEN)  >= 0) \
         return( NOT_UP2DATE); \
   } \
   else  { \
      Warning( ME, "Could not test open -> %s <- to check time\n", fid); \
      return( NOT_UP2DATE); \
   } \
};  /*end macro*/
 
 
   strcpy( key, target);
   if (dot = strrchr( key, '.'))
      *dot = 0;
   key_len = strlen( key);
   tsym = md4_LOOKUP_TARGET( key, key_len);
   if (tsym)  {
      if (!tsym->ta_time_stamp)
         return( NOT_UP2DATE);
   }
   else  {
      Error( ME, "Symbol \"%s\" not found in tables\n", key);
   }
 
   /* we have generated dependencies before, so check SI,UI here...
    */
   md4_CHECK_LASTMOD( source_fid);
 
   if (!update_acct)
      return( UP2DATE);
   strcpy( update_fid, source_fid);
   if (dot = strchr( update_fid, '.'))
      *dot = 0;
   strcat( update_fid, update_acct);
   md4_CHECK_LASTMOD( update_fid);
 
   return( UP2DATE);
}  /* md4_IsUpToDate() */
 
 
#pragma LIST EJECT
/*==================================================================*/
/*F*  NAME:    md4_SaveOldOutput
      PURPOSE: Simply save the old output file to a temporary file.
      DESCRIPTION:
         See purpose.  The data from the output file, if it exists, is
         needed for the time stamp comparison feature.  If a targets
         dependencies are up to date, the data in the old output file
         is copied to the new file.
      OUTPUT:
         md_info.out_save - setup to reflect the temporary file name
*/
/*==================================================================*/
 
int
md4_SaveOldOutput()
{
   char  acct[ 10] = 0;
   char *dot = 0;
#ifdef DEBUG
   char  ME[] = "md4_SaveOldOutput";
#else
   char *ME = (char *)NULL;
#endif
 
   md_info.out_save = md_info.out_fid;
   strcpy( md_tmp_out_fid, md_info.out_fid.pathname);
   if (dot = strchr( md_tmp_out_fid, '.'))  {
      strcpy( acct, dot);
      *dot = 0;
   }
   strcat( md_tmp_out_fid, ":old");
   if (*acct)
      strcat( md_tmp_out_fid, acct);
   md_info.out_save.pathname = md_tmp_out_fid;
   if (rename( md_info.out_fid.pathname, md_info.out_save.pathname)) {
      Error( ME, "Can't rename output file; that's fatal I'm afraid.\n");
      Error( ME, "Tried-> rename( %s, %s) \n",
             md_info.out_fid.pathname, md_info.out_save.pathname);
   }
   memcpy( md_info.out_save.access, "r sharein\0", 10);
   return 0;
}  /* md4_SaveOldOutput() */
 
 
#pragma LIST EJECT
/*==================================================================*/
/*F*  NAME:    md4_CopyOldDepends
      PURPOSE: Function to search for, and copy the dependency list
               from the old output file (because they were up to date).
      DESCRIPTION:
         Open up the old output file, and search for the target name.
         When found; write out the UTS comment, along with the target
         name and its dependency list.
      OUTPUT:
         The old dependency list for the given target is written to
         the new output file.
*/
/*==================================================================*/
 
int
md4_CopyOldDepends( FILE *ofp, char *target, char *out_rec)
{
   FILE  *tfp;  /* Old Output File Ptr */
   char   depend_rec[ DEPEND_REC_LEN];
   char   name[ TARGET_LEN];
#ifdef DEBUG
   char  ME[] = "md4_CopyOldDepends";
#else
   char *ME = (char *)NULL;
#endif
 
   tfp = fopen( md_info.out_save.pathname, md_info.out_save.access);
   if (!tfp)  {
      Error( ME, "Can't open saved output file-> %s \n",
             md_info.out_save.pathname);
      exit( 7);
   }
 
   if (out_rec[ 0] != 0)  {
      /* flush it out before we get started here... */
      if (md_info.flag.include)  {
         if (md_info.opt.compressed)
            fprintf( ofp, "%s\n", out_rec);
         else
            fprintf( ofp, "%s\n\n", out_rec);
      }
      else  {
         md_TARGET_COMMENT( name);
      }
      out_rec[ 0] = 0;
   }
 
   while (fgets( depend_rec, DEPEND_REC_LEN, tfp))  {
      if (strstr( depend_rec, target) && strstr( depend_rec, "#*"))  {
         if (!md_info.opt.warn && strstr( depend_rec, "#*xxx*"))  {
            fclose( tfp);
            return 0;
         }
         /* should be the UTS comment line... */
         fprintf( ofp, "%s", depend_rec);
         /* now get the dependency list... */
         fgets( depend_rec, DEPEND_REC_LEN, tfp);
         fprintf( ofp, "%s", depend_rec);
         while (strchr( depend_rec, '\\'))  {
            fgets( depend_rec, DEPEND_REC_LEN, tfp);
            fprintf( ofp, "%s", depend_rec);
         }
         if (!md_info.opt.compressed)
            fprintf( ofp, "\n");
         fclose( tfp);
         return 0;
      }  /*if target found*/
   }  /*while !EOF*/
   fclose( tfp);
   return 0;
}  /* md4_CopyOldDepends() */
