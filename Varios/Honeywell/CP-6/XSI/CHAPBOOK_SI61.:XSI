/*M*  CHAPBOOK - combines files together into a "book" with marks
between "chapters". */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*P*
    NAME: CHAPBOOK
    PURPOSE:
          To group chapters together into one "book" file.
    DESCRIPTION:
          This program reads all files which match the wildcard pattern
           given, and combines them together into one file. Before the
           first line of each "chapter" file a mark will be placed, so
           that these files may later be separated back into "chapter" files.
*/
CHAPBOOK: PROC MAIN;
%INCLUDE CP_6;
%INCLUDE CP_6_SUBS;
%INCLUDE XUW_MACRO_C;
%INCLUDE XU_MACRO_C;
%INCLUDE XU_SUBS_C;
%INCLUDE XU_PERR_C;
%INCLUDE B$JIT_C;
 
%INCLUDE B_ERRORS_C;
 
%XUW_WILDCARD(INPUT=WC_INPUT,PATTERN=WC_PATTERN);
%XUW_ENTRIES;
 
DCL M$SI DCB;
DCL M$OU DCB;
DCL M$DO DCB;
 
%FPT_OPEN (FPTN=OPEN_FIRST_SI,
           DCB=M$SI,
           NAME=FIRST_NAME,
           THISF=YES,
           NXTF=YES);
%FPT_OPEN (FPTN=OPEN_NEXT_SI,
           DCB=M$SI,
           NXTF=YES);
%FPT_WRITE (FPTN=WRITE_ERROR,
            DCB=M$DO);
%FPT_READ (FPTN=READ_SI,
           DCB=M$SI,
           BUF=INPUT_BUFFER);
%FPT_WRITE (FPTN=WRITE_OU,
            DCB=M$OU,
            BUF=INPUT_BUFFER);
%FPT_CLOSE (FPTN=CLOSE_SI,
            DCB=M$SI);
%FPT_CLOSE (FPTN=CLOSE_OU,
            DCB=M$OU,
            DISP=SAVE);
%FPT_ERRMSG (BUF=ERROR_BUFFER,
             CODE=CHAPBOOK_PCB.ERROR,
             OUTDCB1=M$DO);
 
DCL INPUT_BUFFER CHAR(256) STATIC;
DCL ERROR_BUFFER CHAR(120) STATIC;
 
DCL FIRST_NAME_LEN UBIN WORD;
DCL 1 FIRST_NAME STATIC,
      2 L# UBIN(9) INIT(31) UNAL,
      2 NAME# CHAR(31) INIT(' ');
 
DCL M$SI$ PTR STATIC;
DCL M$OU$ PTR STATIC;
DCL B$JIT$ PTR SYMREF;
DCL B$TCB$ PTR SYMREF;
 
DCL FIRST_SW BIT(1) STATIC;
DCL OPEN_SW BIT(1) STATIC;
DCL MATCH BIT(1);
 
DCL 1 START_MARK BASED(START$),
      2 L UBIN(9),
      2 TEXT CHAR(START_MARK.L);
DCL 1 END_MARK BASED(END$),
      2 L UBIN(9),
      2 TEXT CHAR(END_MARK.L);
DCL START$ PTR STATIC INIT(ADDR(START_CHARS));
DCL END$ PTR STATIC INIT(ADDR(END_CHARS));
DCL START_CHARS CHAR(64) STATIC;
DCL END_CHARS CHAR(64) STATIC;
 
DCL WC_INPUT CHAR(31) INIT(' ') STATIC;
DCL WC_PATTERN CHAR(31) INIT(' ') STATIC;
 
 
%P_PCB (NAME=CHAPBOOK_PCB,
        STCLASS="STATIC SYMDEF",
        R=CHAPBOOK_NODES,
        W=CHAPBOOK_WORKSPACE,
        U$=NIL,
        WSZ=500,
        N#=0);
DCL CHAPBOOK_WORKSPACE(0:500) SBIN WORD STATIC SYMDEF;
DCL CHAPBOOK_NODES SBIN WORD SYMREF;
%PARSE$SYM (NAME=CHAPBOOK$SYM,
            STCLASS="BASED");
%PARSE$OUT (NAME=CHAPBOOK$OUTBLK,
            STCLASS="BASED");
DCL X$PARSE ENTRY(1) ALTRET;
 
DCL TOO_LONG_MSG CHAR(0) STATIC INIT('**** Starting or ending mark is too long ****');
DCL SI_ERROR_MSG CHAR(0) STATIC INIT('**** Invalid or missing SI file ****');
DCL OU_ERROR_MSG CHAR(0) STATIC INIT('**** Invalid or missing OU file ****');
 
%B$JIT0;
%U$JIT1;
%A$JIT6X;
%B$TCB;
%B$ALT;
%F$DCB;
%EJECT;
/*****************************************************/
 
M$SI$ = DCBADDR(DCBNUM(M$SI));
M$OU$ = DCBADDR(DCBNUM(M$OU));
FIRST_SW = '1'B;
OPEN_SW = '0'B;
IF M$SI$->F$DCB.ASN# ~= %FILE#
THEN
DO;
    WRITE_ERROR.BUF_ = VECTOR(SI_ERROR_MSG);
    CALL M$WRITE (WRITE_ERROR) ALTRET (THE_END);
    GOTO THE_END;
END;
IF M$OU$->F$DCB.ASN# ~= %FILE#
THEN
DO;
    WRITE_ERROR.BUF_ = VECTOR(OU_ERROR_MSG);
    CALL M$WRITE (WRITE_ERROR) ALTRET (THE_END);
    GOTO THE_END;
END;
 
CHAPBOOK_PCB.ROOT$ = ADDR(CHAPBOOK_NODES);
IF B$JIT$->B$JIT.CCARS > B$JIT$->B$JIT.CCDISP
THEN
DO;
     CHAPBOOK_PCB.TEXT$ = ADDR(B$JIT.CCBUF);
     CHAPBOOK_PCB.NCHARS = B$JIT.CCARS;
     CALL X$PARSE (CHAPBOOK_PCB) ALTRET (PARSE_ERROR);
 
     START_MARK.L = CHAPBOOK_PCB.OUT$->CHAPBOOK$OUTBLK.SUBLK$(1)->
                        CHAPBOOK$SYM.COUNT;
     START_MARK.TEXT = CHAPBOOK_PCB.OUT$->CHAPBOOK$OUTBLK.SUBLK$(1)->
                           CHAPBOOK$SYM.TEXT;
     END_MARK.L = CHAPBOOK_PCB.OUT$->CHAPBOOK$OUTBLK.SUBLK$(2)->
                        CHAPBOOK$SYM.COUNT;
     END_MARK.TEXT = CHAPBOOK_PCB.OUT$->CHAPBOOK$OUTBLK.SUBLK$(2)->
                           CHAPBOOK$SYM.TEXT;
     IF START_MARK.L = 0 OR END_MARK.L = 0
     THEN
     DO;
          START_MARK.L = 7;
          START_MARK.TEXT = '.***** ';
          END_MARK.L = 6;
          END_MARK.TEXT = ' *****';
      END;
END;
ELSE
DO;
     START_MARK.L = 7;
     START_MARK.TEXT = '.***** ';
     END_MARK.L = 6;
     END_MARK.TEXT = ' *****';
 END;
 
WC_PATTERN = M$SI$->F$DCB.NAME#.C;
XUW_WILDCARD.PATTERN_.BOUND = M$SI$->F$DCB.NAME#.L - 1;
 
CALL INDEX (FIRST_NAME_LEN,'?',WC_PATTERN);
FIRST_NAME.L# = FIRST_NAME_LEN;
FIRST_NAME.NAME# = SUBSTR (WC_PATTERN,0,FIRST_NAME.L#);
 
OPEN_LOOP: ;
    IF OPEN_SW
    THEN DO;
         CALL M$CLOSE (CLOSE_SI) ALTRET (CLOSE_ERROR);
         OPEN_SW = '0'B;
    END;
    IF FIRST_SW
    THEN DO;
         CALL M$OPEN (OPEN_FIRST_SI) ALTRET (OPEN_ERROR);
    END;
    ELSE
        CALL M$OPEN (OPEN_NEXT_SI) ALTRET (OPEN_ERROR);
    OPEN_SW = '1'B;
 
    CALL PREFIX_TEST ALTRET (END_LOOP);
    IF NOT MATCH
    THEN GOTO OPEN_LOOP;
 
    IF FIRST_SW
    THEN DO;
        FIRST_SW = '0'B;
        CALL CONCAT(INPUT_BUFFER,START_MARK.TEXT,SUBSTR(M$OU$->F$DCB.NAME#.C,0,
           M$OU$->F$DCB.NAME#.L),END_MARK.TEXT) ALTRET (TOO_LONG);
        WRITE_OU.BUF_.BOUND = START_MARK.L + M$OU$->F$DCB.NAME#.L + END_MARK.L - 1;
        CALL M$WRITE (WRITE_OU) ALTRET (WRITE_ERROR);
    END;
    CALL CONCAT (INPUT_BUFFER,START_MARK.TEXT,SUBSTR(M$SI$->F$DCB.NAME#.C,0,M$SI$->F$DCB.NAME#.L),END_MARK.TEXT) ALTRET (TOO_LONG);
    WRITE_OU.BUF_.BOUND = START_MARK.L + M$SI$->F$DCB.NAME#.L + END_MARK.L - 1;
    CALL M$WRITE (WRITE_OU) ALTRET (WRITE_ERROR);
READ_LOOP: ;
    CALL M$READ (READ_SI) ALTRET (EOF_OR_ERROR);
     IF M$SI$->F$DCB.ARS# ~= 0
     THEN
    WRITE_OU.BUF_.BOUND = M$SI$->F$DCB.ARS# - 1;
     ELSE
          DO;
          WRITE_OU.BUF_.BOUND = 0;
          INPUT_BUFFER=' ';
          END;
    CALL M$WRITE (WRITE_OU) ALTRET (WRITE_ERROR);
    GOTO READ_LOOP;
 
 
EOF_OR_ERROR: ;
    IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.ERR# = %E$EOF
    THEN
        GOTO OPEN_LOOP;
    ELSE
        CALL M$MERC;
END_LOOP: ;
    CALL M$CLOSE (CLOSE_OU) ALTRET (CLOSE_ERROR);
THE_END: ;
    CALL M$EXIT;
%EJECT;
 
OPEN_ERROR: ;
    IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.ERR# = %E$FDEOF
    THEN
        GOTO END_LOOP;
    ELSE
    DO;
        CALL M$MERC;
        GOTO THE_END;
     END;
 
CLOSE_ERROR: ;
    CALL M$MERC;
    GOTO THE_END;
 
WRITE_ERROR: ;
    CALL M$MERC;
    GOTO THE_END;
 
PARSE_ERROR: ;
    CALL M$ERRMSG(FPT_ERRMSG) ALTRET(THE_END);
    GOTO THE_END;
 
TOO_LONG: ;
    WRITE_ERROR.BUF_ = VECTOR(TOO_LONG_MSG);
    CALL M$WRITE (WRITE_ERROR) ALTRET (THE_END);
    GOTO THE_END;
 
 %EJECT;
 
PREFIX_TEST: PROC ALTRET;
    MATCH = '1'B;
    WC_INPUT = M$SI$->F$DCB.NAME#.C;
    XUW_WILDCARD.INPUT_.BOUND = M$SI$->F$DCB.NAME#.L - 1;
    CALL X$WILDCMP (XUW_WILDCARD) ALTRET (NOMATCH);
    RETURN;
NOMATCH:
    MATCH = '0'B;
    IF SUBSTR (WC_PATTERN,0,FIRST_NAME.L#) < SUBSTR (WC_INPUT,0,FIRST_NAME.L#)
    THEN
        ALTRETURN;
    ELSE
        RETURN;
END PREFIX_TEST;
END CHAPBOOK;
