$COM*M*    STATPACK3:   AN APL STATISTICAL PACKAGE
 
$COM*P*    NAME:        STATPACK3
$COM*,*
$COM*,*    PURPOSE:     An APL statistical package
$COM*,*
$COM*,*    DESCRIPTION: This is version 1.1 of the APL statistical
$COM*,*                 package STATPACK3 by K.W. Smillie.
$COM*,*
$COM*,*                 This is a public domain package made
$COM*,*                 available by the University of Alberta.
$COM*,*
$COM*,*                 The APL functions provided were originally
$COM*,*                 implemented in VSAPL, Version 4, Level 0.
$COM*,*
$COM*,*                 The author of this package is:
$COM*,*
$COM*,* .*
$COM*,* .fif
$COM*,* .*R*
$COM*,*                 K.W. Smillie
$COM*,*                 Department of Computing Science,
$COM*,*                 University of Alberta,
$COM*,*                 Edmonton, Alberta
$COM*,*
$COM*,* .*B*
 
$COM*F*    NAME:        STATPACK3
$COM*,*
$COM*,*    PURPOSE:     An APL workspace containing usefull
$COM*,*                 statistics functions.
$COM*,*
$COM*,*    DESCRIPTION: The functions in the workspace are arranged
$COM*,*                 in the following groups:
$COM*,*
$COM*,* .*
$COM*,* .fif
$COM*,* .*R*
$COM*,*                   0. Service functions
$COM*,*                   1. Probability
$COM*,*                   2. Summarization
$COM*,*                   3. Tabulation
$COM*,*                   4. Regression
$COM*,*                   5. Analysis of variance
$COM*,*                   6. Non-parametric statistics
$COM*,*                   7. Linear programming
$COM*,*
 
$COM*D*    NAME:        GROUP0
$COM*,*
$COM*,*    PURPOSE:     This group of functions contain
$COM*,*                 service functions.
$COM*,*
$COM*,*    DESCRIPTION: The service functions (and their purpose)
$COM*,*                 are:
$COM*,*
$COM*,*                 Name             Purpose
$COM*,*
$COM*,*                 ON            Row catenation
$COM*,*                 BY            Column catenation
$COM*,*                 ROW           Row restructuring
$COM*,*                 COL           Column restructuring
$COM*,*                 SORT          Vector sorting
$COM*,*                 NUB           Distinct items of a vector
$COM*,*                 ONUB          Ordered NUB
$COM*,*                 DIS           Distribution matrix
$COM*,*                 ODIS          Ordered distribution matrix
$COM*,*                 OFR           Ordered frequencies
$COM*,*                 TO            Integers from A to B
$COM*,*                 AP            Arithmetic progression
$COM*,*                 DIFF          Differences of order B
$COM*,*                 NDP           Number of decimal places
$COM*,*                 TT            Truth table
$COM*,*                 DLB           Delete left blanks
$COM*,*                 DRB           Delete right blanks
$COM*,*
 
 
$COM*I*    NAME:        ON
$COM*,*
$COM*,*    PURPOSE:     Row catenation
$COM*,*
$COM*,*    SYNTAX:      Z_L ON R
$COM*,*
$COM*,*    INPUT:       The right argument is a scalar, vector or matrix.
$COM*,*                 The left argument is a scalar, vector or matrix.
$COM*,*
$COM*,*    OUTPUT:      Result is the row catenation of arguments.
$COM*,*
$COM*,*    DESCRIPTION: The result is the row catenation of the
$COM*,*                 arguments.  If one or both of the arguments
$COM*,*                 are characters, then so is the result.
$COM*,*
 
    " R_A ON B
[1]   A_((##/$RA)#-2$TAK1 1,($RA))$RA
[2]   B_((##/$RB)#-2$TAK1 1,($RB))$RB
[3]   $GO((0\0/,A)=0\0/,B)/l
[4]   A_$FMT A $DMD B_$FMT B
[5]  l:R_(((0 1#$RB)$MAX$RA)$TAKA),[$QIO]((0 1#$RA)$MAX$RB)$TAKB
    "
 
$COM*I*    NAME:        BY
$COM*,*
$COM*,*    PURPOSE:     Column catenation
$COM*,*
$COM*,*    SYNTAX:      Z_L BY R
$COM*,*
$COM*,*    INPUT:       The right argument is a scalar, vector or matrix.
$COM*,*                 The left argument is a scalar, vector or matrix.
$COM*,*
$COM*,*    DESCRIPTION: The result is the column catenation of the
$COM*,*                 arguments.  If one or both of the arguments
$COM*,*                 are characters, then so is the result.
$COM*,*
 
    " R_A BY B
[1]   A_((##/$RA)#2$TAK($RA),1 1)$RA
[2]   B_((##/$RB)#2$TAK($RB),1 1)$RB
[3]   $GO((0\0/,A)=0\0/,B)/l
[4]   A_$FMT A $DMD B_$FMT B
[5]  l:R_(((1 0#$RB)$MAX$RA)$TAKA),((1 0#$RA)$MAX$RB)$TAKB
    "
 
$COM*I*    NAME:        ROW
$COM*,*
$COM*,*    PURPOSE:     Row restructuring
$COM*,*
$COM*,*    SYNTAX:      Z_ROW R
$COM*,*
$COM*,*    INPUT:       The right argument is a scalar, vector or matrix.
$COM*,*
$COM*,*    DESCRIPTION: The result is the argument restructured as
$COM*,*                 a matrix of rows.
$COM*,*
 
    " R_ROW B
[1]   R_((##/$RB)#-2$TAK1 1,($RB))$RB
    "
 
$COM*I*    NAME:        COL
$COM*,*
$COM*,*    PURPOSE:     Column restructuring
$COM*,*
$COM*,*    SYNTAX:      Z_COL R
$COM*,*
$COM*,*    INPUT:       The right argument is a scalar, vector or matrix.
$COM*,*
$COM*,*    DESCRIPTION: The result is the argument restructured as
$COM*,*                 a matrix of columns.
$COM*,*
 
    " R_COL B
[1]   R_((##/$RB)#2$TAK($RB),1 1)$RB
    "
 
$COM*I*    NAME:        SORT
$COM*,*
$COM*,*    PURPOSE:     Sorting
$COM*,*
$COM*,*    SYNTAX:      Z_SORT R
$COM*,*
$COM*,*    INPUT:       The right argument is a numeric vector.
$COM*,*
$COM*,*    DESCRIPTION: The result is the vector with the items
$COM*,*                 in non-descending order.
$COM*,*
 
    " R_SORT B
[1]   R_B[$GUB]
    "
 
$COM*I*    NAME:        NUB
$COM*,*
$COM*,*    PURPOSE:     Distinct items of a vector
$COM*,*
$COM*,*    SYNTAX:      Z_NUB R
$COM*,*
$COM*,*    INPUT:       The right argument is a vector.
$COM*,*
$COM*,*    DESCRIPTION: The result is the vector containing each
$COM*,*                 of the distinct items in the argument.
$COM*,*
 
    " R_NUB B
[1]   R_((B$I B)=$I$RB)/B
    "
 
$COM*I*    NAME:        ONUB
$COM*,*
$COM*,*    PURPOSE:     Ordered nub
$COM*,*
$COM*,*    SYNTAX:      Z_ONUB R
$COM*,*
$COM*,*    INPUT:       The right argument is a vector.
$COM*,*
$COM*,*    DESCRIPTION: The result is the vector containing each
$COM*,*                 of the distinct items in the argument in
$COM*,*                 ascending order.
$COM*,*
$COM*,*    INTERFACE:   NUB
$COM*,*                 SORT
$COM*,*
 
    " R_ONUB B
[1]   R_SORT NUB B
    "
 
$COM*I*    NAME:        DIS
$COM*,*
$COM*,*    PURPOSE:     Distribution matrix
$COM*,*
$COM*,*    SYNTAX:      Z_DIS R
$COM*,*
$COM*,*    INPUT:       The right argument is a vector.
$COM*,*
$COM*,*    DESCRIPTION: The result is the matrix with ($R NUB Right)
$COM*,*                 rows and ($R Right) columns such that the
$COM*,*                 item in the Ith row and Jth column is 1 if
$COM*,*                 the Ith item of the NUB occurs as the Jth
$COM*,*                 item of the right argument and 0 otherwise.
$COM*,*
$COM*,*    INTERFACE:   NUB
$COM*,*
 
    " R_DIS B
[1]   R_(NUB B)$SC.=B
    "
 
$COM*I*    NAME:        ODIS
$COM*,*
$COM*,*    PURPOSE:     Ordered distribution matrix
$COM*,*
$COM*,*    SYNTAX:      Z_ODIS R
$COM*,*
$COM*,*    INPUT:       The right argument is a numeric vector.
$COM*,*
$COM*,*    DESCRIPTION: The result is the matrix with ($R ONUB Right)
$COM*,*                 rows and ($R Right) columns such that the
$COM*,*                 item in the Ith row and Jth column is 1 if
$COM*,*                 the Ith item of the ordered nub occurs as the
$COM*,*                 Jth item of the right argument otherwise 0.
$COM*,*
$COM*,*    INTERFACE:   ONUB
$COM*,*
 
    " R_ODIS B
[1]   R_(ONUB B)$SC.=B
    "
 
$COM*I*    NAME:        OFR
$COM*,*
$COM*,*    PURPOSE:     Ordered frequencies
$COM*,*
$COM*,*    SYNTAX:      Z_OFR R
$COM*,*
$COM*,*    INPUT:       The right argument is a numeric vector.
$COM*,*
$COM*,*    DESCRIPTION: The result is a vector whose Ith item is the
$COM*,*                 frequency of occurrence of the Ith item of
$COM*,*                 the ordered nub.
$COM*,*
$COM*,*    INTERFACE:   ODIS
$COM*,*
 
    " R_OFR B
[1]   R_+/ODIS B
    "
 
$COM*I*    NAME:        TO
$COM*,*
$COM*,*    PURPOSE:     Integers
$COM*,*
$COM*,*    SYNTAX:      Z_L TO R
$COM*,*
$COM*,*    INPUT:       The right argument is a scalar.
$COM*,*                 The left  argument is a scalar.
$COM*,*
$COM*,*    DESCRIPTION: The result is a vector of integers from
$COM*,*                 the left argument value to the right
$COM*,*                 argument value inclusive.
$COM*,*
 
    " R_A TO B
[1]   $GO(A>B)/l $DMD R_(A+$I B$-A$-1)$-$QIO $DMD $GO0
[2]  l:R_$REVA TO B
[3]   $COM    Modified to always produce APV in CP-6 APL
    "
 
$COM*I*    NAME:        AP
$COM*,*
$COM*,*    PURPOSE:     Arithmetic progression
$COM*,*
$COM*,*    SYNTAX:      Z_AP R
$COM*,*
$COM*,*    INPUT:       The right argument is 3 element numeric vector.
$COM*,*
$COM*,*
$COM*,*    DESCRIPTION: The result is a numeric vector where
$COM*,*                 right[1] is the first term in the
$COM*,*                 arithmetic progression, right[2] is the
$COM*,*                 common difference and right[3] is the
$COM*,*                 number of terms.
$COM*,*
 
    " R_AP B
[1]   R_B[1]+B[2]#($I B[3])$-$QIO
[2]  $COM  Modified to produce APV in CP-6 APL (if integer)
    "
 
$COM*I*    NAME:        DIFF
$COM*,*
$COM*,*    PURPOSE:     Differences
$COM*,*
$COM*,*    SYNTAX:      Z_L DIFF R
$COM*,*
$COM*,*    INPUT:       The right argument is a numeric vector.
$COM*,*
$COM*,*
$COM*,*    DESCRIPTION: The result is a vector of the Ath order
$COM*,*                 differences of B where A is the left
$COM*,*                 argument and B is the right argument.
$COM*,*
 
    " R_A DIFF B
[1]   $GO(A=0)/l $DMD R_(A$-1) DIFF (1$DRPB)$--1$DRPB $DMD $GO0
[2]  l:R_A
    "
 
$COM*I*    NAME:        NDP
$COM*,*
$COM*,*    PURPOSE:     Number of decimal places
$COM*,*
$COM*,*    SYNTAX:      Z_NDP R
$COM*,*
$COM*,*    INPUT:       The right argument is a numeric scalar or vector.
$COM*,*
$COM*,*
$COM*,*    DESCRIPTION: The result is a vector containing the
$COM*,*                 maximum number of non-zero decimal
$COM*,*                 places in the decimal representation
$COM*,*                 (to 8 places) of the right argument.
$COM*,*
 
    " R_NDP B
[1]   R_+/$OR/0$NE(8$R10)$ECD$MIN0.5+1E8#1|,B
    "
 
 
$COM*I*    NAME:        TT
$COM*,*
$COM*,*    PURPOSE:     Truth table
$COM*,*
$COM*,*    SYNTAX:      Z_TT R
$COM*,*
$COM*,*    INPUT:       The right argument is a non-negative integer.
$COM*,*
$COM*,*
$COM*,*    DESCRIPTION: The result is the truth table of the
$COM*,*                 specified order.
$COM*,*
 
    " R_TT B
[1]   R_(B$R2)$ECD0,$I-1+2*B
    "
 
 
$COM*I*    NAME:        DLB
$COM*,*
$COM*,*    PURPOSE:     Delete left blanks
$COM*,*
$COM*,*    SYNTAX:      R_DLB R
$COM*,*
$COM*,*    INPUT:       The right argument is a character vector.
$COM*,*
$COM*,*
$COM*,*    DESCRIPTION: The result is a character vector with
$COM*,*                 leading blanks deleted.
$COM*,*
 
    " R_DLB B
[1]   R_(-1+(B=' ')$I0)$DRPB
    "
 
 
$COM*I*    NAME:        DRB
$COM*,*
$COM*,*    PURPOSE:     Delete right blanks
$COM*,*
$COM*,*    SYNTAX:      Z_DRB R
$COM*,*
$COM*,*    INPUT:       The right argument is a character vector.
$COM*,*
$COM*,*
$COM*,*    DESCRIPTION: The result is a character vector with
$COM*,*                 trailing blanks deleted.
$COM*,*
 
    " R_DRB B
[1]   R_(1$-(' '=$REV B)$I0)$DRPB
    "
 
 
)GROUP GROUP0 ON BY ROW COL SORT NUB ONUB DIS ODIS OFR TO AP DIFF NDP TT DLB DRB
 
 
$COM*D*    NAME:        GROUP1
$COM*,*
$COM*,*    PURPOSE:     This collection of functions contain
$COM*,*                 probability functions.
$COM*,*
$COM*,*    DESCRIPTION: The probability functions (and their purpose)
$COM*,*                 are:
$COM*,*
$COM*,*                 Name             Purpose
$COM*,*
$COM*,*                 BC            Binomial coefficients
$COM*,*                 BD            Binomial probabilities
$COM*,*                 PD            Poisson probabilities
$COM*,*                 SND           Standard normal probabilities
$COM*,*                 SNDC          Coefficients for SND
$COM*,*
 
 
$COM*I*    NAME:        BC
$COM*,*
$COM*,*    PURPOSE:     This function computes binomial coefficients.
$COM*,*
$COM*,*    SYNTAX:      Z_A BC B
$COM*,*
$COM*,*    INPUT:       The right argument is a numeric array.
$COM*,*                 The left  argument is a numeric array.
$COM*,*
$COM*,*    DESCRIPTION: The result is the number of A things taken
$COM*,*                 B at a time.
$COM*,*
 
    " R_A BC B
[1]   R_B!A
    "
 
$COM*I*    NAME:        BD
$COM*,*
$COM*,*    PURPOSE:     This function computes binomial probabilities.
$COM*,*
$COM*,*    SYNTAX:      Z_L BD R
$COM*,*
$COM*,*    INPUT:       The right argument is a scalar or vector.
$COM*,*                 The left  argument is a 2 item vector.
$COM*,*
$COM*,*    DESCRIPTION: The result is the binomial probabilities for
$COM*,*                 the items of the right argument.  The first
$COM*,*                 item of the left argument is the number of
$COM*,*                 binomial trials and the second item is the
$COM*,*                 probability of success in a single trial.
$COM*,*
$COM*,*    INTERFACE:   PC
$COM*,*
 
    " R_A BD B
[1]   R_(A[1]BC B)#(A[2]*B)#(1$-A[2])*A[1]$-B
    "
 
$COM*I*    NAME:        PD
$COM*,*
$COM*,*    PURPOSE:     This function computes poisson  probabilities.
$COM*,*
$COM*,*    SYNTAX:      Z_L PD R
$COM*,*
$COM*,*    INPUT:       The right argument is a scalar or vector.
$COM*,*                 The left  argument is a scalar.
$COM*,*
$COM*,*    DESCRIPTION: The result is the poisson probabilities for
$COM*,*                 the items of the right argument.  The left
$COM*,*                 argument value gives the parameter in the
$COM*,*                 poisson distribution.
$COM*,*
 
    " R_A PD B
[1]   R_((*$-A)#A*B)%!B
    "
 
$COM*I*    NAME:        SND
$COM*,*
$COM*,*    PURPOSE:     This function computes the standard normal
$COM*,*                 probabilities.
$COM*,*
$COM*,*    SYNTAX:      Z_SND R
$COM*,*
$COM*,*    INPUT:       The right argument is a scalar or vector
$COM*,*                 giving values of standard normal deviates.
$COM*,*
$COM*,*    DESCRIPTION: The result is a scalar or vector giving the
$COM*,*                 standard normal probabilities (from minus
$COM*,*                 infinity)  corresponding to each item of
$COM*,*                 the right argument.
$COM*,*
$COM*,*    INTERFACE:   SNDC
$COM*,*
 
    " R_SND B
[1]   R_|($-B>0)+0.5#(1+((|B)$SC.*$I6)+.#SNDC)*-16
    "
 
$COM*I*    NAME:        SNDC
$COM*,*
$COM*,*    PURPOSE:     This function returns the standard normal
$COM*,*                 coefficient probabilities.
$COM*,*
$COM*,*    SYNTAX:      Z_SNDC
$COM*,*
$COM*,*    INPUT:       none.
$COM*,*
$COM*,*
$COM*,*    DESCRIPTION: The result is the vector of coefficients
$COM*,*                 required by SND.
$COM*,*
 
    " R_SNDC
[1]   R_.000867347 .02114110061 .0032776263 3.80036E-5 4.88906E-5 5.383E-6
    "
 
 
)GROUP GROUP1 BC BD PD SND SNDC
 
 
 
$COM*D*    NAME:        GROUP2
$COM*,*
$COM*,*    PURPOSE:     This collection of functions contain
$COM*,*                 summarization functions.
$COM*,*
$COM*,*    DESCRIPTION: The summarization functions (and their
$COM*,*                 purpose) are:
$COM*,*
$COM*,*                 Name             Purpose
$COM*,*
$COM*,*                 SUMMARY       Summary statistics
$COM*,*                 AM            Arithmetic mean
$COM*,*                 VAR           Variance
$COM*,*                 SD            Standard deviation
$COM*,*                 GM            Geometric mean
$COM*,*                 HM            Harmonic mean
$COM*,*                 MEDIAN        Median
$COM*,*                 MODE          Mode
$COM*,*                 RANGE         Range
$COM*,*                 QTILES        Quantiles
$COM*,*                 LI            Linear interpolation
$COM*,*                 QUARTILES     Quartiles
$COM*,*                 QUARTILES     Quartiles
$COM*,*
 
$COM*I*    NAME:        SUMMARY
$COM*,*
$COM*,*    PURPOSE:     To provide summary statistics
$COM*,*
$COM*,*    SYNTAX:      Z_SUMMARY R
$COM*,*
$COM*,*    INPUT:       The right argument is a numeric vector.
$COM*,*
$COM*,*
$COM*,*
$COM*,*    DESCRIPTION: The following statistics are provided with
$COM*,*                 appropriate identification: sample size,
$COM*,*                 minimum, maximum, range, arithmetic mean,
$COM*,*                 variance, standard deviation, median, mode,
$COM*,*                 lower quartile and upper quartile.  If all
$COM*,*                 of the items of the right argument are
$COM*,*                 different, then the mode is not given.
$COM*,*
$COM*,*    INTERFACE:   AM
$COM*,*                 VAR
$COM*,*                 MEDIAN
$COM*,*                 MODE
$COM*,*                 QUARTILES
$COM*,*                 SORT
$COM*,*                 NDP
$COM*,*
 
    " R_SUMMARY X;D;F;M;N;Q;V
[1]   F_8 0+NDP X
[2]   R_'SAMPLE SIZE',11 0$FMTN_$RD_SORT X
[3]   R_R ON 'MINIMUM',(F+7 0)$FMTD[1]
[4]   R_R ON 'MAXIMUM',(F+7 0)$FMTD[N]
[5]   R_R ON 'RANGE',(F+9 0)$FMT$-/D[N,1]
[6]   R_R ON 'MEAN',(F+13 2)$FMTAM X
[7]   R_R ON 'VARIANCE',(F+12 5)$FMTV_VAR X
[8]   R_R ON 'ST. DEVIATION',(F+7 5)$FMTV*0.5
[9]   R_R ON 'MEDIAN',(F+10 1)$FMTMEDIAN X
[10]  R_R ON 'MODE',(N>$RM)/(F+10 0)$FMTM_MODE X
[11]  R_R ON 'LOWER QUARTILE',F$FMT1$TAKQ_QUARTILES X
[12]  R_R ON 'UPPER QUARTILE',F$FMT-1$TAKQ
    "
 
 
$COM*I*    NAME:        AM
$COM*,*
$COM*,*    PURPOSE:     To provide the arithmetic mean.
$COM*,*
$COM*,*    SYNTAX:      Z_AM R
$COM*,*
$COM*,*    INPUT:       The right argument is a numeric vector.
$COM*,*
$COM*,*
$COM*,*    DESCRIPTION: The arithmetic mean of the right argument
$COM*,*                 is returned by this function.
$COM*,*
 
    " R_AM B
[1]   R_(+/B)%$RB
    "
 
$COM*I*    NAME:        VAR
$COM*,*
$COM*,*    PURPOSE:     To provide the variance.
$COM*,*
$COM*,*    SYNTAX:      Z_VAR R
$COM*,*
$COM*,*    INPUT:       The right argument is a numeric vector.
$COM*,*
$COM*,*
$COM*,*    DESCRIPTION: The result is the variance of the right
$COM*,*                 argument.
$COM*,*
 
    " R_VAR B
[1]   R_(+/(B$-AM B)*2)%-1+$RB
    "
 
$COM*I*    NAME:        SD
$COM*,*
$COM*,*    PURPOSE:     To provide the standard deviation.
$COM*,*
$COM*,*    SYNTAX:      Z_SD R
$COM*,*
$COM*,*    INPUT:       The right argument is a numeric vector.
$COM*,*
$COM*,*
$COM*,*    DESCRIPTION: The result is the standard deviation of
$COM*,*                 the right argument.
$COM*,*
$COM*,*
$COM*,*    INTERFACE:   VAR
$COM*,*
 
    " R_SD B
[1]   R_(VAR B)*0.5
    "
 
$COM*I*    NAME:        GM
$COM*,*
$COM*,*    PURPOSE:     To provide the geometric mean.
$COM*,*
$COM*,*    SYNTAX:      R_GM R
$COM*,*
$COM*,*    INPUT:       The right argument is a numeric vector.
$COM*,*
$COM*,*
$COM*,*    DESCRIPTION: The result is the geometric mean of
$COM*,*                 the right argument.
$COM*,*
$COM*,*
$COM*,*    INTERFACE:   none
$COM*,*
 
    " R_GM B
[1]   R_(#/B)*%$RB
    "
 
$COM*I*    NAME:        HM
$COM*,*
$COM*,*    PURPOSE:     To provide the harmonic mean.
$COM*,*
$COM*,*    SYNTAX:      Z_HM R
$COM*,*
$COM*,*    INPUT:       The right argument is a numeric vector.
$COM*,*
$COM*,*
$COM*,*    DESCRIPTION: The result is the harmonic mean of
$COM*,*                 the right argument.
$COM*,*
$COM*,*
$COM*,*    INTERFACE:   none
$COM*,*
 
    " R_HM B
[1]   R_%AM%B
    "
 
$COM*I*    NAME:        MEDIAN
$COM*,*
$COM*,*    PURPOSE:     To provide the median.
$COM*,*
$COM*,*    SYNTAX:      Z_MEDIAN R
$COM*,*
$COM*,*    INPUT:       The right argument is a numeric vector.
$COM*,*
$COM*,*
$COM*,*    DESCRIPTION: The result is the median of
$COM*,*                 the right argument.
$COM*,*
$COM*,*
$COM*,*    INTERFACE:   none
$COM*,*
 
    " R_MEDIAN B
[1]   R_0.5#+/B[($GUB)[$MAX0 .5+($RB)%2]]
    "
 
$COM*I*    NAME:        MODE
$COM*,*
$COM*,*    PURPOSE:     To provide the modal elements.
$COM*,*
$COM*,*    SYNTAX:      Z_MODE R
$COM*,*
$COM*,*    INPUT:       The right argument is a numeric vector.
$COM*,*
$COM*,*
$COM*,*    DESCRIPTION: The result is a scalar or vector giving
$COM*,*                 the modal elements of the right argument.
$COM*,*
$COM*,*    INTERFACE:   ODIS
$COM*,*                 OFR
$COM*,*                 ONUB
$COM*,*
 
    " R_MODE B
[1]   R_($RV1ODIS OFR B)[1;]/ONUB B
    "
 
$COM*I*    NAME:        RANGE
$COM*,*
$COM*,*    PURPOSE:     To provide the range of a vector
$COM*,*
$COM*,*    SYNTAX:      Z_RANGE R
$COM*,*
$COM*,*    INPUT:       The right argument is a numeric vector.
$COM*,*
$COM*,*
$COM*,*    DESCRIPTION: The result is a scalar giving the
$COM*,*                 range of the right argument.
$COM*,*
 
    " R_RANGE B
[1]   R_($MAX/B)$-$MIN/B
    "
 
$COM*I*    NAME:        QTILES
$COM*,*
$COM*,*    PURPOSE:     To provide the quantiles of a vector
$COM*,*
$COM*,*    SYNTAX:      Z_L QTILES R
$COM*,*
$COM*,*    INPUT:       The right argument is a numeric vector.
$COM*,*                 The left argument is a positive integer.
$COM*,*
$COM*,*    DESCRIPTION: The result is the quantiles of
$COM*,*                 the right argument.  e.g., if the left
$COM*,*                 argument is 2, the result is the median;
$COM*,*                 if the left argument is 4, the result is
$COM*,*                 the quartiles.
$COM*,*
$COM*,*    INTERFACE:   LI
$COM*,*                 SORT
$COM*,*
 
 
    " R_A QTILES B
[1]   R_(0.5+($RB)#($IA$-1)%A)LI SORT B
    "
 
$COM*I*    NAME:        LI
$COM*,*
$COM*,*    PURPOSE:     To perform linear interpolation.
$COM*,*
$COM*,*    SYNTAX:      Z_L LI R
$COM*,*
$COM*,*    INPUT:       The right argument is a numeric vector.
$COM*,*                 The left argument is a non-negative
$COM*,*                 numeric vector.
$COM*,*
$COM*,*    DESCRIPTION: The result is the interpolated values of the
$COM*,*                 right argument as determined by the left
$COM*,*                 argument.
$COM*,*
$COM*,*    INTERFACE:   none
$COM*,*
 
 
    " R_A LI B
[1]   R_B[$MINA]+(B[$MAXA]$-B[$MINA])#1|A
    "
 
$COM*I*    NAME:        QUARTILES
$COM*,*
$COM*,*    PURPOSE:     To return the quartiles of a vector.
$COM*,*
$COM*,*    SYNTAX:      Z_QUARTILES R
$COM*,*
$COM*,*    INPUT:       The right argument is a numeric vector.
$COM*,*
$COM*,*
$COM*,*
$COM*,*    DESCRIPTION: The result is a 3 item vector containing
$COM*,*                 the quartiles of the right argument.
$COM*,*
$COM*,*    INTERFACE:   QTILES
$COM*,*
 
 
    " R_QUARTILES B
[1]   R_4 QTILES B
    "
 
 
)GROUP GROUP2 SUMMARY AM VAR SD GM HM MEDIAN MODE RANGE QTILES LI QUARTILES
 
 
 
$COM*D*    NAME:        GROUP3
$COM*,*
$COM*,*    PURPOSE:     This collection of functions contain
$COM*,*                 tabulation functions.
$COM*,*
$COM*,*    DESCRIPTION: The tabulation functions (and their
$COM*,*                 purpose) are:
$COM*,*
$COM*,*                 Name             Purpose
$COM*,*
$COM*,*                 DIGRAM        Histogram for counted data
$COM*,*                 HISTOGRAM     Histogram for continuous data
$COM*,*                 FV            Frequency vector
$COM*,*                 BARCHART      Bar chart
$COM*,*                 BARS          Bars for bar chart
$COM*,*                 AXIS          Axis for bar chart
$COM*,*                 SFV           Scaled frequency vector
$COM*,*                 SCALE         Scaling
$COM*,*                 TWTAB         Two-way table
$COM*,*
$COM*,*
 
$COM*I*    NAME:        DIGRAM
$COM*,*
$COM*,*    PURPOSE:     To return a histogram for counted data.
$COM*,*
$COM*,*    SYNTAX:      Z_L DIGRAM R
$COM*,*
$COM*,*    INPUT:       The right argument is a vector of non-negative
$COM*,*                 integers. The left argument is a non-negative
$COM*,*                 integer providing the width of the bar chart.
$COM*,*
$COM*,*    DESCRIPTION: The result is a frequency histogram giving
$COM*,*                 a horizontal bar chart of width specified by
$COM*,*                 the left argument of the frequencies of the
$COM*,*                 items of the right argument with the numeric
$COM*,*                 value of the frequences given to the left.
$COM*,*
$COM*,*
$COM*,*
$COM*,*    INTERFACE:   FV
$COM*,*                 BARCHART
$COM*,*
 
    " R_A DIGRAM B
[1]   R_A BARCHART FV B
    "
 
$COM*I*    NAME:        HISTOGRAM
$COM*,*
$COM*,*    PURPOSE:     To return a histogram for continuous data.
$COM*,*
$COM*,*    SYNTAX:      Z_L HISTOGRAM R
$COM*,*
$COM*,*    INPUT:       The right argument is a vector of observations.
$COM*,*                 The left argument is a non-negative four-item
$COM*,*                 vector.
$COM*,*
$COM*,*    DESCRIPTION: The result is a frequency histogram with the
$COM*,*                 midpoints of the class intervals given to the
$COM*,*                 left of the numeric frequencies.  The first
$COM*,*                 item of the left argument is the left hand
$COM*,*                 end of the class interval, the second item
$COM*,*                 of the left argument is the class width, the
$COM*,*                 third item is the number of classes and the
$COM*,*                 fourth item is the width of the bar chart.
$COM*,*
$COM*,*    INTERFACE:   BARCHART
$COM*,*                 SFV
$COM*,*                 AP
$COM*,*                 COL
$COM*,*                 BY
$COM*,*
 
    " R_A HISTOGRAM B
[1]   R_(10 2$FMTCOL AP(1 .5+.#2$TAKA),1$DRPA)BY(-1$TAK4$TAKA)BARCHART A SFV B
    "
 
$COM*I*    NAME:        FV
$COM*,*
$COM*,*    PURPOSE:     To return a frequency vector.
$COM*,*
$COM*,*    SYNTAX:      Z_FV R
$COM*,*
$COM*,*    INPUT:       The right argument is a non-negative vector.
$COM*,*
$COM*,*
$COM*,*    DESCRIPTION: The result is a vector of frequencies of
$COM*,*                 items of the right argument from 0 to the
$COM*,*                 largest item of the right argument inclusive.
$COM*,*
$COM*,*
$COM*,*    INTERFACE:   OFR
$COM*,*                 ONUB
$COM*,*
 
    " R_FV B
[1]   R_((0,$I$MAX/B)$EONUB B)\OFR B
    "
 
 
$COM*I*    NAME:        BARCHART
$COM*,*
$COM*,*    PURPOSE:     To return a bar chart
$COM*,*
$COM*,*    SYNTAX:      Z_L BARCHART R
$COM*,*
$COM*,*    INPUT:       The right argument is a vector of frequencies.
$COM*,*                 The left argument is a non-negative integer.
$COM*,*
$COM*,*
$COM*,*    DESCRIPTION: The result is a horizontal bar chart of width
$COM*,*                 determined by the value of the left argument
$COM*,*                 using the items of the right argument with
$COM*,*                 the numeric value of the frequencies given
$COM*,*                 to the left.
$COM*,*
$COM*,*    INTERFACE:   BARS
$COM*,*                 AXIS
$COM*,*                 BY
$COM*,*
 
    " R_A BARCHART B
[1]   R_(5 0$FMT(($RB),1)$RB)BY (AXIS$RB)BY A BARS B
    "
 
 
$COM*I*    NAME:        BARS
$COM*,*
$COM*,*    PURPOSE:     To generate the bars for a bar chart.
$COM*,*
$COM*,*    SYNTAX:      Z_L BARS R
$COM*,*
$COM*,*    INPUT:       The right argument is a vector of frequencies.
$COM*,*                 The left argument is a non-negative integer
$COM*,*                 indicating the width of the bars.
$COM*,*
$COM*,*    DESCRIPTION: The result is the set of horizontal bars of
$COM*,*                 width A units of the elements of B for a bar
$COM*,*                 chart, where A is the left and B is the right
$COM*,*                 argument.
$COM*,*
$COM*,*
$COM*,*    INTERFACE:   none.
$COM*,*
 
    " R_A BARS B
[1]   $GO(A=0)/l $DMD R_'.$'[$QIO+B$SC.$GE($MAX/B)#($IA)%A] $DMD $GO0
[2]  l:R_($MAX/B) BARS B
[3]  $COM  Modified for CP-6 to use '.$' instead of '.$MDV'
    "
 
 
$COM*I*    NAME:        AXIS
$COM*,*
$COM*,*    PURPOSE:     To generate the axis for a bar chart.
$COM*,*
$COM*,*    SYNTAX:      Z_AXIS R
$COM*,*
$COM*,*    INPUT:       The right argument is a scalar indicating the
$COM*,*                 length of the axis.
$COM*,*
$COM*,*    DESCRIPTION: The result is the vertical axis for a
$COM*,*                 bar chart.
$COM*,*
$COM*,*
$COM*,*    INTERFACE:   BY
$COM*,*
 
    " R_AXIS B
[1]   R_' ' BY ((1+5#$MAXB%5)$R'#::::')BY ' '
[2]  $COM  Modified for CP-6 to use ':' instead of '$SC'
    "
 
 
$COM*I*    NAME:        SFV
$COM*,*
$COM*,*    PURPOSE:     To return a scaled frequency vector.
$COM*,*
$COM*,*    SYNTAX:      Z_L SFV R
$COM*,*
$COM*,*    INPUT:       The right argument is a vector of observations.
$COM*,*                 The left argument is a 2 element vector.
$COM*,*
$COM*,*
$COM*,*    DESCRIPTION: The first item of the left argument is used
$COM*,*                 to indicate the left hand end of the first
$COM*,*                 class and the second item is the class width.
$COM*,*                 The result is a vector of frequencies for
$COM*,*                 scaled data.
$COM*,*
$COM*,*
$COM*,*    INTERFACE:   FV
$COM*,*                 SCALE
$COM*,*
 
    " R_A SFV B
[1]   R_FV A SCALE B
    "
 
 
$COM*I*    NAME:        SCALE
$COM*,*
$COM*,*    PURPOSE:     To provide scaling for bar charts.
$COM*,*
$COM*,*    SYNTAX:      Z_L SCALE R
$COM*,*
$COM*,*    INPUT:       The right argument is a numeric vector.
$COM*,*                 The left argument is a 2 item vector.
$COM*,*
$COM*,*
$COM*,*    DESCRIPTION: The first item of the left argument is
$COM*,*                 the left hand end of the first class and
$COM*,*                 the second item is the class width.
$COM*,*
$COM*,*                 The result is a vector whose Ith item is
$COM*,*                 the class number, i.e., 0, 1, 2,...,
$COM*,*                 corresponding to the Ith element of the
$COM*,*                 right argument.
$COM*,*
$COM*,*
$COM*,*    INTERFACE:   none.
$COM*,*
 
    " R_A SCALE B
[1]   R_$MAX(B$-A[1])%A[2]
    "
 
 
$COM*I*    NAME:        TWTAB
$COM*,*
$COM*,*    PURPOSE:     To create a two-way table.
$COM*,*
$COM*,*    SYNTAX:      Z_TWTAB R
$COM*,*
$COM*,*    INPUT:       The right argument is a numeric matrix.
$COM*,*
$COM*,*
$COM*,*    DESCRIPTION: The right argument is a matrix with two
$COM*,*                 rows where the Kth column gives the row
$COM*,*                 and column indices of the Kth observation.
$COM*,*
$COM*,*                 The result is a matrix where the item in
$COM*,*                 the Ith row and Jth column gives the
$COM*,*                 number of observations in the Ith class
$COM*,*                 of the second category.
$COM*,*
$COM*,*
$COM*,*    INTERFACE:   FV
$COM*,*
 
    " R_TWTAB B
[1]   R_($MAX/B)$R1$DRPFV 1+($MAX/B)$DCDB$-1
    "
 
 
 
)GROUP GROUP3 DIGRAM HISTOGRAM FV BARCHART BARS AXIS SFV SCALE TWTAB
 
$COM*D*    NAME:        GROUP4
$COM*,*
$COM*,*    PURPOSE:     This collection of functions is used for
$COM*,*                 the regression analyisis.
$COM*,*
$COM*,*    DESCRIPTION: The regression functions (and their
$COM*,*                 purpose) are:
$COM*,*
$COM*,*                 Name             Purpose
$COM*,*
$COM*,*                 REG           Multiple linear regression
$COM*,*                 CM            Correlation matrix
$COM*,*                 CMLIST        Simple correlation coefficients
$COM*,*                 CORR          Partial correlation coefficients
$COM*,*                 AVG           Arithmetic means
$COM*,*                 DEVIATES      Deviates from means
$COM*,*                 VC            Variance covariance matrix
$COM*,*                 TRP           Transpose product
$COM*,*                 RCDIAG        Row-column diagonalization
$COM*,*
 
)GROUP GROUP4 REG CM CMLIST CORR AVG DEVIATES VC TRP RCDIAG
 
 
$COM*I*    NAME:        REG
$COM*,*
$COM*,*    PURPOSE:     To perform multiple linear regression
$COM*,*
$COM*,*    SYNTAX:      Z_L REG R
$COM*,*
$COM*,*    INPUT:       The right argument is a matrix where
$COM*,*                 the rows correspond to observations and
$COM*,*                 columns to variates.
$COM*,*
$COM*,*                 The left argument is a vector of indices
$COM*,*                 of variates in regression, and, e.g., the
$COM*,*                 value 3 5 2 specifies a regression with
$COM*,*                 two independent variables given by the 3rd
$COM*,*                 and 5th columns of the right argument and
$COM*,*                 the dependent variable given by the 2nd
$COM*,*                 column of the right argument.
$COM*,*
$COM*,*    DESCRIPTION: The result is the regression coefficients
$COM*,*                 standard errors and t-values, an analysis-
$COM*,*                 of-variance table for variation due to
$COM*,*                 regression, error and total, the standard
$COM*,*                 error of estimate and the square of the
$COM*,*                 multiple correlation coefficient.
$COM*,*
$COM*,*
$COM*,*    INTERFACE:   ON
$COM*,*                 BY
$COM*,*
 
    " R_V REG DATA;B;F;K;MSE;MSR;N;RSQ;SEB;SSE;SSR;SST;T;X;Y;YEST;VC
[1]   X_1,DATA[;-1$DRPV]
[2]   Y_,DATA[;-1$TAKV]
[3]   N_($RX)[1]
[4]   K_($RX)[2]$-1
[5]   B_Y$MDVX
[6]   YEST_X+.#B
[7]   SST_+/(Y$-(+/Y)%N)*2
[8]   SSE_+/(Y$-YEST)*2
[9]   SSR_SST$-SSE
[10]  MSR_SSR%K
[11]  MSE_SSE%N$-K+1
[12]  F_MSR%MSE
[13]  VC_($MDV($TPSX)+.#X)#MSE
[14]  SEB_(1 1$TPSVC)*0.5
[15]  T_B%SEB
[16]  RSQ_SSR%SST
[17]  R_'            REGRESSION COEFFICIENTS'ON ' '
[18]  R_R ON '             COEFF.      S.E.       T'
[19]  R_R ON 8 0 11 5 10 5 10 2 $FMT(0,-1$DRPV) BY B BY SEB BY T
[20]  R_R ON(2 1$R' ')ON '            ANALYSIS OF VARIANCE' ON ' '
[21]  R_R ON '                    D.F.    S.S.        M.S.       F'
[22]  R_R ON 'REGRESSION',12 0 12 5 12 5 8 2$FMTK,SSR,MSR,F
[23]  R_R ON 'ERROR',17 0 12 5 12 5$FMT(N$-K+1),SSE,MSE
[24]  R_R ON 'TOTAL',17 0 12 5$FMT(N$-1),SST
[25]  R_R ON 'S. E. OF ESTIMAGE',17 5$FMTMSE*0.5
[26]  R_R ON 'R-SQUARED',25 5$FMTRSQ
    "
 
 
$COM*I*    NAME:        CM
$COM*,*
$COM*,*    PURPOSE:     To return the correlation matrix.
$COM*,*
$COM*,*    SYNTAX:      Z_CM R
$COM*,*
$COM*,*    INPUT:       The right argument is a matrix where the rows
$COM*,*                 correspond to observations and the columns
$COM*,*                 to variates.
$COM*,*
$COM*,*    DESCRIPTION: The result is a correlation matrix where the
$COM*,*                 item in the Ith row and Jth column gives the
$COM*,*                 simple correlation between the Ith and Jth
$COM*,*                 variates.
$COM*,*
$COM*,*
$COM*,*    INTERFACE:   VC
$COM*,*                 RCDIAG
$COM*,*
 
    " R_CM B
[1]   R_RCDIAG VC B
    "
 
 
$COM*I*    NAME:        CMLIST
$COM*,*
$COM*,*    PURPOSE:     To return the simple correlation coefficients.
$COM*,*
$COM*,*    SYNTAX:      Z_CMLIST R
$COM*,*
$COM*,*    INPUT:       The right argument is a correlation matrix
$COM*,*                 as given by the function CM.
$COM*,*
$COM*,*
$COM*,*    DESCRIPTION: The result is the table of simple correlation
$COM*,*                 coefficients identified by the indices of the
$COM*,*                 variables, e.g., the coefficient R(I,J)
$COM*,*                 between the Ith and Jth variates is given as
$COM*,*                 I J R(I,J).
$COM*,*
$COM*,*
$COM*,*    INTERFACE:   ON
$COM*,*                 BY
$COM*,*
 
    " R_CMLIST X;I;J;N;V
[1]   N_($RX)[1]
[2]   V_,($IN)$SC.<$IN
[3]   I_V/,$TPS(N,N)$R$IN
[4]   J_I+1
[5]   R_'    I    J    R(I,J)'
[6]   R_R ON 5 0 5 0 10 5$FMTI BY J BY V/,X
    "
 
 
$COM*I*    NAME:        CORR
$COM*,*
$COM*,*    PURPOSE:     To return the partial correlation
$COM*,*                 coefficients.
$COM*,*
$COM*,*    SYNTAX:      Z_L CORR R
$COM*,*
$COM*,*    INPUT:       The right argument is a correlation matrix
$COM*,*                 as given by the function CM.
$COM*,*
$COM*,*                 The left argument is a vector specifying
$COM*,*                 coefficient, e.g., 3 6 4 2 specifies the
$COM*,*                 partial correlation coefficient between
$COM*,*                 the 3rd and 6th variates with effects of
$COM*,*                 the 4th and 2nd variates removed, and 3 6
$COM*,*                 specifies the simple correlation
$COM*,*                 coefficient between the 3rd and 6th variates.
$COM*,*
$COM*,*    DESCRIPTION: The result is the partial correlation
$COM*,*                 coefficient.
$COM*,*
 
    " R_A CORR B
[1]   R_$-%/(,1 0$REV2 2$TAK$MDVB[A;A])*1 0.5 0 0.5
    "
 
 
$COM*I*    NAME:        AVG
$COM*,*
$COM*,*    PURPOSE:     To return the arithmetic means
$COM*,*
$COM*,*    SYNTAX:      Z_AVG R
$COM*,*
$COM*,*    INPUT:       The right argument is a matrix where the
$COM*,*                 rows correspond to observations and the
$COM*,*                 columns to variates.
$COM*,*
$COM*,*    DESCRIPTION: The result is a vector of arithmetic means
$COM*,*                 of the variates.
$COM*,*
$COM*,*
$COM*,*    INTERFACE:   COL
$COM*,*
 
    " R_AVG B
[1]   R_(+$RD1COL B)%1$MAX1$TAK$RB
    "
 
 
$COM*I*    NAME:        DEVIATES
$COM*,*
$COM*,*    PURPOSE:     To return the deviates from means
$COM*,*
$COM*,*    SYNTAX:      Z_DEVIATES R
$COM*,*
$COM*,*    INPUT:       The right argument is a matrix where the
$COM*,*                 rows correspond to observations and the
$COM*,*                 columns to variates.
$COM*,*
$COM*,*    DESCRIPTION: The result is a matrix of deviations of
$COM*,*                 each variate from its mean.
$COM*,*
$COM*,*
$COM*,*    INTERFACE:   AVG
$COM*,*
 
    " R_DEVIATES B
[1]   R_B$-($RB)$RAVG B
    "
 
 
$COM*I*    NAME:        VC
$COM*,*
$COM*,*    PURPOSE:     To return the variance-covariance matrix.
$COM*,*
$COM*,*    SYNTAX:      Z_VC R
$COM*,*
$COM*,*    INPUT:       The right argument is a matrix where the
$COM*,*                 rows correspond to observations and the
$COM*,*                 columns to variates.
$COM*,*
$COM*,*    DESCRIPTION: The result is a variance-covariance matrix
$COM*,*                 where the item in the Ith row and Jth
$COM*,*                 column gives the covariance of the Ith and
$COM*,*                 Jth variates.
$COM*,*
$COM*,*    INTERFACE:   DEVIATES
$COM*,*                 TRP
$COM*,*
 
    " R_VC B
[1]   R_(TRP DEVIATES B)%-1+1$TAK$RB
    "
 
 
$COM*I*    NAME:        TRP
$COM*,*
$COM*,*    PURPOSE:     To return the transpose product.
$COM*,*
$COM*,*    SYNTAX:      Z_TRP R
$COM*,*
$COM*,*    INPUT:       The right argument is a numeric matrix.
$COM*,*
$COM*,*
$COM*,*
$COM*,*    DESCRIPTION: The result is the product of the transpose
$COM*,*                 of the matrix and the matrix right argument.
$COM*,*
$COM*,*
$COM*,*
$COM*,*    INTERFACE:   none.
$COM*,*
 
    " R_TRP B
[1]   R_($TPS B)+.#B
    "
 
$COM*I*    NAME:        RCDIAG
$COM*,*
$COM*,*    PURPOSE:     To return the row column diagonalization
$COM*,*
$COM*,*    SYNTAX:      Z_RCDIAG R
$COM*,*
$COM*,*    INPUT:       The right argument is a square numeric matrix.
$COM*,*
$COM*,*    DESCRIPTION: The result is a matrix where the item in the
$COM*,*                 Ith row and Jth column is equal to B[I;J]
$COM*,*                 divided by the square root of the product of
$COM*,*                 the Ith and Jth diagonal items of B, where
$COM*,*                 B is the right argument.
$COM*,*
$COM*,*
 
    " R_RCDIAG B
[1]   R_B%((1 1$TPSB)$SC.#1 1$TPSB)*0.5
    "
 
$COM*D*    NAME:        GROUP5
$COM*,*
$COM*,*    PURPOSE:     This collection of functions is used for
$COM*,*                 the analysis of variance.
$COM*,*
$COM*,*    DESCRIPTION: The analysis of variance functions (and
$COM*,*                 their purpose) are:
$COM*,*
$COM*,*                 Name             Purpose
$COM*,*
$COM*,*                 AOVCROSSED    Analysis of variance
$COM*,*                 AOVPOOLED     Analysis of variance
$COM*,*                 AOVALL        All terms
$COM*,*                 ANOVA         Analysis calculations
$COM*,*                 AOVTABLE      Labeled-analysis table
$COM*,*                 AOVMODEL      Algebraic spec of pooled model
$COM*,*                 SIGMA         Hartley's summing operator
$COM*,*                 DELTA         Hartley's differencing operator
$COM*,*                 DELTA1        Differencing over one dimension
$COM*,*                 MEANSQ        Hartley's mean square operator
$COM*,*                 SS            Sum of squares
$COM*,*                 DFSS          Degrees of freedom & square sum
$COM*,*                 DFSSC         Combined deg of freed & sq sum
 
)GROUP GROUP5 AOVCROSSED AOVPOOLED AOVALL ANOVA ANOVTABLE AOVMODEL SIGMA DELTA DELTA1 MEANSQ SS DFSS DFSSC
$COM*I*    NAME:        AOVCROSSED
$COM*,*
$COM*,*    PURPOSE:     Analysis of variance - completely
$COM*,*                 crossed design
$COM*,*
$COM*,*    SYNTAX:      Z_L AOVCROSSED R
$COM*,*
$COM*,*    INPUT:       The right argument is a rectangular array
$COM*,*
$COM*,*                 The left argument is a specification of the
$COM*,*                 model as a character vector.  For example,
$COM*,*                 if the right argument is a 3-dimensional
$COM*,*                 array, the vector 'A,B,AB,C' specifies a
$COM*,*                 model with main effects for the factors
$COM*,*                 represented by the first two dimensions of
$COM*,*                 the right argument, their interaction and
$COM*,*                 the main effect for the factor represented
$COM*,*                 by the third dimension of the right argument.
$COM*,*
$COM*,*
$COM*,*    DESCRIPTION: The result is an analysis-of-variance table
$COM*,*                 with designation of the source of variation
$COM*,*                 in the first column (A, B, AB, C, ERROR and
$COM*,*                 TOTAL for the example above), degrees of
$COM*,*                 freedom in the second, sum of squares in the
$COM*,*                 third and mean squares in the fourth.  If
$COM*,*                 the degrees of freedom for error is zero,
$COM*,*                 the error row is omitted.
$COM*,*
$COM*,*
$COM*,*    INTERFACE:   AOVTABLE
$COM*,*                 AOVMODEL
$COM*,*
 
    " R_M AOVCROSSED A
[1]   R_M AOVTABLE M ANOVA A
    "
 
 
$COM*I*    NAME:        AOVPOOLED
$COM*,*
$COM*,*    PURPOSE:     Analysis of variance - pooled factors
$COM*,*
$COM*,*    SYNTAX:      Z_L AOVPOOLED R
$COM*,*
$COM*,*    INPUT:       The right argument is a rectangular array.
$COM*,*
$COM*,*                 The left argument is a specification of the
$COM*,*                 model as a character vector.  For example,
$COM*,*                 if the right argument is a 2-dimensional
$COM*,*                 array, the vector 'A:A,ERROR TERM:B+AB'
$COM*,*                 would specify a model with main effect for
$COM*,*                 the factor represented by the first dimension
$COM*,*                 of the right argument and an error term given
$COM*,*                 by the sum of the main effect for the factor
$COM*,*                 represented by the second dimension of the
$COM*,*                 right argument and the interaction of the two
$COM*,*                 factors.
$COM*,*
$COM*,*    DESCRIPTION: The result is an analysis-of-variance table
$COM*,*                 as in AOVCROSSED (A, ERROR TERM and TOTAL
$COM*,*                 for the example).
$COM*,*
$COM*,*
$COM*,*    INTERFACE:   ANOVA
$COM*,*                 AOVTABLE
$COM*,*                 AOVMODEL
$COM*,*                 DRB
$COM*,*
 
    " R_M AOVPOOLED A;T
[1]   T_AOVMODEL M
[2]   R_(DRB T[1;]) AOVTABLE (DRB T[2;]) ANOVA A
    "
 
 
$COM*I*    NAME:        AOVALL
$COM*,*
$COM*,*    PURPOSE:     Analysis of variance - all terms
$COM*,*
$COM*,*    SYNTAX:      Z_AOVALL R
$COM*,*
$COM*,*    INPUT:       The right argument is a rectangular array.
$COM*,*
$COM*,*
$COM*,*
$COM*,*    DESCRIPTION: The result is all terms in an
$COM*,*                 analysis-of-variance table.  For example,
$COM*,*                 if the right argument is a two-dimensional
$COM*,*                 array, then the rows in the table would be
$COM*,*                 labelled A, B, AB and TOTAL.
$COM*,*
$COM*,*    INTERFACE:   DFSS
$COM*,*                 TT
$COM*,*
 
    " R_AOVALL A;I;L;S;T
[1]   T_$RV10 1$DRPTT$R$RA
[2]   T_T[;$GU+$RD1T]
[3]   L_0 10$R' '
[4]   R_0 2$R0
[5]  l:I_T[;1]/$I$R$RA
[6]   L_L,[1]10$TAK'ABCDEFGH'[I]
[7]   R_R,[1]I DFSS A
[8]   $GO(0<-1$TAK$RT_0 1$DRPT)/l
[9]   S_+$RD1R
[10]  R_R,%/$REVR
[11]  R_L,5 0 13 5 13 5$FMTR
[12]  R_R,[1](10$TAK'TOTAL'),31$TAK5 0 13 5$FMTS
    "
 
 
$COM*I*    NAME:        ANOVA
$COM*,*
$COM*,*    PURPOSE:     Analysis of variance - calculations
$COM*,*
$COM*,*    SYNTAX:      Z_L ANOVA R
$COM*,*
$COM*,*    INPUT:       The right argument is a rectangular array.
$COM*,*
$COM*,*                 The left argument is a specification of the
$COM*,*                 terms in the models as a character vector.
$COM*,*                 For example, for the models given in
$COM*,*                 AOVCROSSED and AOVPOOLED, the terms would be
$COM*,*                 'A,B,AB,C' and 'A,B+AB', respectively.
$COM*,*
$COM*,*
$COM*,*
$COM*,*
$COM*,*    DESCRIPTION: The result is a three-column
$COM*,*                 analysis-of-variance table including error
$COM*,*                 and total terms.
$COM*,*
$COM*,*
$COM*,*    INTERFACE:   DFSS
$COM*,*                 DFSSC
$COM*,*
 
    " R_C ANOVA A;E;I;T
[1]   R_0 2$R0
[2]  l:I_C$I','
[3]   R_R,[1]((I$-1)$TAKC)DFSSC A
[4]   $GO(0<$RC_I$DRPC)/l
[5]   T_1 DFSS,A
[6]   E_T$-+$RD1R
[7]   R_(R,%/$REVR),[1](E,%/$REVE+E[1]=0),[0.5]T,0
    "
 
 
$COM*I*    NAME:        AOVTABLE
$COM*,*
$COM*,*    PURPOSE:     To produce a labelled analysis-of-variance
$COM*,*                 table.
$COM*,*
$COM*,*    SYNTAX:      Z_L AOVTABLE R
$COM*,*
$COM*,*    INPUT:       The right argument is the result of ANOVA.
$COM*,*
$COM*,*                 The left argument is the labels for the model
$COM*,*                 as a character vector.  For example, the
$COM*,*                 models given in AOVCROSSED  and AOVPOOLED
$COM*,*                 would have the labels 'A,B,AB,C' and
$COM*,*                 'A,ERROR TERM', respectively.
$COM*,*
$COM*,*
$COM*,*
$COM*,*
$COM*,*    DESCRIPTION: The result is a labelled analysis-of-variance
$COM*,*                 table.
$COM*,*
$COM*,*
$COM*,*    INTERFACE:   ON
$COM*,*
 
    " R_L AOVTABLE T;I
[1]   R_$I0
[2]  l:I_L$I','
[3]   R_R ON (I$-1)$TAKL
[4]   $GO(0<$RL_I$DRPL)/l
[5]   R_R ON 'ERROR' ON 'TOTAL'
[6]   R_(T[;1]$NE0)$RD1R,5 0 13 5 13 5$FMTT
[7]   R[($RR)[1];($RR)[2]$-0,$I12]_' '
    "
 
 
$COM*I*    NAME:        AOVMODEL
$COM*,*
$COM*,*    PURPOSE:     To provide the algebraic specification of
$COM*,*                 the pooled model.
$COM*,*
$COM*,*    SYNTAX:      Z_AOVMODEL R
$COM*,*
$COM*,*    INPUT:       The right argument is a model as required
$COM*,*                 by the left argument of AOVPOOLED.
$COM*,*
$COM*,*    DESCRIPTION: The result is a two-row matrix of labels
$COM*,*                 and factors.  For example, the model
$COM*,*                 'A:A,ERROR TERM:B+AB' would give the
$COM*,*                 character matrix:
$COM*,*
$COM*,*                 A,ERROR TERM
$COM*,*                 A,B+AB
$COM*,*
$COM*,*    INTERFACE:   ON
$COM*,*
 
    " R_AOVMODEL M;F;I;J;L
[1]   F_L_$I0
[2]  l:I_M$I':'
[3]   L_L,',',(I$-1)$TAKM
[4]   M_I$DRPM
[5]   J_M$I','
[6]   F_F,',',(J$-1)$TAKM
[7]   $GO(0<$RM_J$DRPM)/l
[8]   R_0 1$DRPL ON F
    "
 
 
 
$COM*I*    NAME:        SIGMA
$COM*,*
$COM*,*    PURPOSE:     Hartley's summing operator
$COM*,*
$COM*,*    SYNTAX:      Z_L SIGMA R
$COM*,*
$COM*,*    INPUT:       The right argument is a numeric rectangular
$COM*,*                 array of data.
$COM*,*
$COM*,*                 The left argument is a vector of axis numbers
$COM*,*                 sorted in ascending order.
$COM*,*
$COM*,*    DESCRIPTION: The result is an array summed over the
$COM*,*                 specified axes.
$COM*,*
 
    " R_A SIGMA R
[1]   $GO(0=$RA)/0 $DMD R_(-1$DRPA)SIGMA+/[-1$TAKA]R
    "
 
 
 
$COM*I*    NAME:        DELTA
$COM*,*
$COM*,*    PURPOSE:     Hartley's differencing operator
$COM*,*
$COM*,*    SYNTAX:      Z_L DELTA R
$COM*,*
$COM*,*    INPUT:       The right argument is a numeric rectangular
$COM*,*                 array of data.
$COM*,*
$COM*,*                 The left argument is a vector of axis numbers
$COM*,*                 sorted in ascending order.
$COM*,*
$COM*,*    DESCRIPTION: The result is an array differenced over the
$COM*,*                 specified axes.
$COM*,*
 
    " R_A DELTA R
[1]   $GO(0=$RA)/0
[2]   R_(1$DRPA)DELTA($GU(1$TAKA)$NE$I$R$RR)DELTA1 R
    "
 
 
$COM*I*    NAME:        DELTA1
$COM*,*
$COM*,*    PURPOSE:     Differencing over one dimension
$COM*,*
$COM*,*    SYNTAX:      Z_L DELTA1 R
$COM*,*
$COM*,*    INPUT:       The right argument is a numeric rectangular
$COM*,*                 array of data.
$COM*,*
$COM*,*                 The left argument is an axis number.
$COM*,*
$COM*,*
$COM*,*    DESCRIPTION: The result is an array differenced over the
$COM*,*                 specified axis.
$COM*,*
 
    " R_A DELTA1 R
[1]   R_(R#($RR)[A[1]])$-A$TPS($RW)[A]$R+$RD1($GUA)$TPSW
    "
 
 
 
$COM*I*    NAME:        MEANSQ
$COM*,*
$COM*,*    PURPOSE:     Hartley's mean square operator.
$COM*,*
$COM*,*    SYNTAX:      Z_MEANSQ R
$COM*,*
$COM*,*    INPUT:       The right argument is a numeric rectangular
$COM*,*                 array of data.
$COM*,*
$COM*,*    DESCRIPTION: The result is the sum of squares of all items
$COM*,*                 in the right argument array divided by the
$COM*,*                 number of items.
$COM*,*
 
    " R_MEANSQ R
[1]   R_(+/,R*2)%#/$RR
    "
 
 
 
$COM*I*    NAME:        SS
$COM*,*
$COM*,*    PURPOSE:     Sum of squares
$COM*,*
$COM*,*    SYNTAX:      Z_L SS R
$COM*,*
$COM*,*    INPUT:       The right argument is a numeric rectangular
$COM*,*                 array of data.
$COM*,*
$COM*,*                 The left argument is a vector of axis numbers.
$COM*,*
$COM*,*    DESCRIPTION: The result is the sum of squares corresponding
$COM*,*                 to the specified axis.  For example, for a 3
$COM*,*                 dimensional array of data, a left argument of
$COM*,*                 1 2 would give the AB interaction.
$COM*,*
$COM*,*    INTERFACE:   DELTA
$COM*,*                 MEANSQ
$COM*,*                 SIGMA
$COM*,*
 
    " R_A SS B
[1]   R_(MEANSQ ((~($I$R$RB)$EA)/$I$R$RB)SIGMA A DELTA B)%#/$RW
    "
 
 
 
$COM*I*    NAME:        DFSS
$COM*,*
$COM*,*    PURPOSE:     Combined degrees of freedom and sum of squares
$COM*,*
$COM*,*    SYNTAX:      Z_L DFSS R
$COM*,*
$COM*,*    INPUT:       The right argument is a numeric rectangular
$COM*,*                 array of data.
$COM*,*
$COM*,*                 The left argument is a vector of axis numbers
$COM*,*                 sorted in ascending order.  For example, for
$COM*,*                 a 3-dimensional right argument the B main
$COM*,*                 effect would be specified by 2 and the AB
$COM*,*                 interaction by a 1 2.  Alternatively, these
$COM*,*                 two terms could be specified as 'B' and 'AB',
$COM*,*                 respectively.
$COM*,*
$COM*,*    DESCRIPTION: The result is a two-item vector giving the
$COM*,*                 degrees of freedom and sum of squares.
$COM*,*
$COM*,*    INTERFACE:   SS
$COM*,*
 
    " R_A DFSS B
[1]   $GO(' '=0\0/A)/l $DMD R_(#/($RB)[A]$-1),A SS B $DMD $GO0
[2]   R_(('ABCDEFGHIJK'$EA)/$I8)DFSS B
    "
 
 
 
$COM*I*    NAME:        DFSSC
$COM*,*
$COM*,*    PURPOSE:     Combined degrees of freedom and sum of squares
$COM*,*
$COM*,*    SYNTAX:      Z_L DFSSC R
$COM*,*
$COM*,*    INPUT:       The right argument is a numeric rectangular
$COM*,*                 array of data.
$COM*,*
$COM*,*                 The left argument is a character vector of
$COM*,*                 terms to be pooled.  For example, the vector
$COM*,*                 'B+AB' would indicate that the B main effect
$COM*,*                 and AB interaction are to be pooled.
$COM*,*
$COM*,*    DESCRIPTION: The result is a two-item vector giving the
$COM*,*                 pooled degrees of freedom and sum of squares.
$COM*,*
$COM*,*    INTERFACE:   SS
$COM*,*
 
    " R_A DFSSC B
[1]   $GO(0$NE$RA)/l $DMD $GOR_0
[2]   R_((((,A)$I'+')$DRPA)DFSSC B)+((-1+(,A)$I'+')$TAKA)DFSS B
    "
 
 
 
$COM*D*    NAME:        GROUP6
$COM*,*
$COM*,*    PURPOSE:     This collection of functions is used for
$COM*,*                 non-parametric statistics.
$COM*,*
$COM*,*    DESCRIPTION: The non-parametric statistics functions
$COM*,*                 (and their purpose) are:
$COM*,*
$COM*,*                 Name             Purpose
$COM*,*
$COM*,*                 RANKS         Ranks
$COM*,*                 TIES          Ties in ranks
$COM*,*                 CHISQ         Chi-squared
$COM*,*                 GF            Chi-squared
$COM*,*                 CTE           Estimated frequencies 2-way tbl
$COM*,*                 CT            Chi-squared for 2-way table
$COM*,*                 GROUP         Frequency grouping
$COM*,*                 RHO           Rank correlation coefficient
$COM*,*                 RHOR          Rank correlation coefficient
$COM*,*                 NFV           Normal frequencies
$COM*,*
 
)GROUP GROUP6 RANKS TIES CHISQ GF CTE CT GROUP RHO RHOR NFV
 
$COM*I*    NAME:        RANKS
$COM*,*
$COM*,*    PURPOSE:     Ranks
$COM*,*
$COM*,*    SYNTAX:      Z_RANKS R
$COM*,*
$COM*,*    INPUT:       The right argument is a numeric vector.
$COM*,*
$COM*,*    Description: The result is a vector of ranks of the
$COM*,*                 items of the right argument.  The rank
$COM*,*                 of each item in a set of tied items is
$COM*,*                 the average of the "untied ranks" of
$COM*,*                 these items.
$COM*,*
$COM*,*    INTERFACE:   TIES
$COM*,*                 DIS
$COM*,*
 
    " R_RANKS B
[1]   R_(DIS B)TIES$GU$GUB
    "
 
 
 
$COM*I*    NAME:        TIES
$COM*,*
$COM*,*    PURPOSE:     Ties in ranks
$COM*,*
$COM*,*    SYNTAX:      Z_L TIES R
$COM*,*
$COM*,*    INPUT:       The right argument is a numeric vector of
$COM*,*                 "untied" ranks of a given vector.
$COM*,*
$COM*,*                 The left argument is the distribution
$COM*,*                 matrix of the right argument.
$COM*,*
$COM*,*    DESCRIPTION: The result is the ranks of the given
$COM*,*                 vector.
$COM*,*
$COM*,*
$COM*,*    INTERFACE:   none.
$COM*,*
 
    " R_A TIES B
[1]   R_((A+.#B)%+/A)+.#A
    "
 
 
 
$COM*I*    NAME:        CHISQ
$COM*,*
$COM*,*    PURPOSE:     Chi-squared
$COM*,*
$COM*,*    SYNTAX:      Z_L CHISQ R
$COM*,*
$COM*,*    INPUT:       The right argument is a numeric vector of
$COM*,*                 observed frequencies.
$COM*,*
$COM*,*                 The left argument is  a numeric vector of
$COM*,*                 estimated frequencies.
$COM*,*
$COM*,*    DESCRIPTION: The result is the chi-squared.
$COM*,*
$COM*,*    INTERFACE:   none.
$COM*,*
 
    " R_A CHISQ B
[1]   R_+/,((A$-B)*2)%A
    "
 
 
 
$COM*I*    NAME:        GF
$COM*,*
$COM*,*    PURPOSE:     Chi-squared
$COM*,*
$COM*,*    SYNTAX:      Z_GF R
$COM*,*
$COM*,*    INPUT:       The right argument is a two column matrix
$COM*,*                 with observed frequencies in the first
$COM*,*                 column and estimated frequencies in the
$COM*,*                 second column.
$COM*,*
$COM*,*
$COM*,*    DESCRIPTION: The result is the chi-squared.
$COM*,*
$COM*,*
$COM*,*    INTERFACE:   CHISQ
$COM*,*
 
    " R_GF B
[1]   R_B[;1+$QIO] CHISQ B[;$QIO]
    "
 
 
 
$COM*I*    NAME:        CTE
$COM*,*
$COM*,*    PURPOSE:     Estimated frequencies in two-way table.
$COM*,*
$COM*,*    SYNTAX:      Z_CTE R
$COM*,*
$COM*,*    INPUT:       The right argument is a matrix of
$COM*,*                 observed frequencies.
$COM*,*
$COM*,*    DESCRIPTION: The result is a matrix of estimated
$COM*,*                 frequencies.
$COM*,*
$COM*,*
$COM*,*    INTERFACE:   none.
$COM*,*
 
    " R_CTE B
[1]   R_((+/B)$SC.#+$RD1B)%+/,B
    "
 
 
 
$COM*I*    NAME:        CT
$COM*,*
$COM*,*    PURPOSE:     Chi-squared for two-way table.
$COM*,*
$COM*,*    SYNTAX:      Z_CT R
$COM*,*
$COM*,*    INPUT:       The right argument is a matrix of
$COM*,*                 observed frequencies.
$COM*,*
$COM*,*    DESCRIPTION: The result is the chi-squared.
$COM*,*
$COM*,*    INTERFACE:   CHISQ
$COM*,*                 CTE
$COM*,*
 
    " R_CT B
[1]   R_(CTE B)CHISQ B
    "
 
 
 
$COM*I*    NAME:        GROUP
$COM*,*
$COM*,*    PURPOSE:     Frequency grouping
$COM*,*
$COM*,*    SYNTAX:      Z_L GROUP R
$COM*,*
$COM*,*    INPUT:       The right argument is a vector of
$COM*,*                 frequencies or matrix in which each
$COM*,*                 column is a set of frequencies.
$COM*,*
$COM*,*                 The left argument is a vector of
$COM*,*                 grouping parameters.  For example,
$COM*,*                 a value of 0 1 1 2 3 3 3 3 indicates
$COM*,*                 that the frequencies in an 8-item
$COM*,*                 right argument are to be grouped into
$COM*,*                 a 4-item vector by keeping the 1st
$COM*,*                 and 4th items of the right argument
$COM*,*                 and combining the 2nd and 3rd to
$COM*,*                 become the new second item and the
$COM*,*                 5th, 6th, 7th and 8th to become the
$COM*,*                 new fourth item.
$COM*,*
$COM*,*    DESCRIPTION: The result is a vector or matrix of
$COM*,*                 grouped frequencies.
$COM*,*
$COM*,*    INTERFACE:   DIS
$COM*,*
 
    " R_A GROUP B
[1]   R_(DIS A)+.#B
    "
 
 
 
$COM*I*    NAME:        RHO
$COM*,*
$COM*,*    PURPOSE:     Rank correlation coefficient
$COM*,*
$COM*,*    SYNTAX:      Z_L RHO R
$COM*,*
$COM*,*    INPUT:       The right argument is a vector of
$COM*,*                 observations of the first variate.
$COM*,*
$COM*,*                 The left argument is a vector of
$COM*,*                 observations of the second variate.
$COM*,*
$COM*,*
$COM*,*    DESCRIPTION: The result is Spearman's rank
$COM*,*                 correlation coefficient.
$COM*,*
$COM*,*
$COM*,*    INTERFACE:   RHOR
$COM*,*                 RANKS
$COM*,*
 
    " R_A RHO B
[1]   R_(RANKS A)RHOR RANKS B
    "
 
 
 
$COM*I*    NAME:        RHOR
$COM*,*
$COM*,*    PURPOSE:     Rank correlation coefficient
$COM*,*
$COM*,*    SYNTAX:      Z_L RHOR R
$COM*,*
$COM*,*    INPUT:       The right argument is a vector of
$COM*,*                 the ranks of the first variate.
$COM*,*
$COM*,*                 The left argument is a vector of
$COM*,*                 the ranks of the second variate.
$COM*,*
$COM*,*    DESCRIPTION: The result is Spearman's rank
$COM*,*                 correlation coefficient.
$COM*,*
$COM*,*    INTERFACE:   none.
$COM*,*
 
    " R_A RHOR B
[1]   R_1$-(6#+/(A$-B)*2)%#/-1 0 1+$RB
    "
 
 
 
$COM*I*    NAME:        NFV
$COM*,*
$COM*,*    PURPOSE:     Normal frequencies
$COM*,*
$COM*,*    SYNTAX:      Z_L NFV R
$COM*,*
$COM*,*    INPUT:       The right argument is a vector of
$COM*,*                 observations.
$COM*,*
$COM*,*                 The left argument is a 3-item vector
$COM*,*                 where A[1] is the left-hand end of the
$COM*,*                 first class interval, A[2] is the class
$COM*,*                 width and A[3] is the number of classes.
$COM*,*
$COM*,*    DESCRIPTION: The result is a vector with A[3]+2 items
$COM*,*                 of expected normal frequencies for the
$COM*,*                 data grouped accordint to A.  The first
$COM*,*                 and last expected frequencies correspond
$COM*,*                 to the lower and upper tails of the
$COM*,*                 normal distribution.
$COM*,*
 
    " R_A NFV B
[1]   R_($RB)#1 DIFF 0,(SND ((AP A+0 0 1)$-AM B)%SD B),1
    "
 
 
 
$COM*D*    NAME:        GROUP7
$COM*,*
$COM*,*    PURPOSE:     This collection of functions is used for
$COM*,*                 linear programming.
$COM*,*
$COM*,*    DESCRIPTION: The linear programming functions (and
$COM*,*                 their purpose) are:
$COM*,*
$COM*,*                 Name             Purpose
$COM*,*
$COM*,*                 LP            Linear Programming
$COM*,*                 LPS           Linear prog w/sensitivity anal.
$COM*,*                 TRANS         Transportation problem
$COM*,*                 RSIMPLEX      Revised simplex algorithm
$COM*,*                 OPTSOLN       Optimal solution
$COM*,*                 CVARIATION    Cost variation
$COM*,*                 BVARIATION    Requirements variation
$COM*,*                 ABCHECK       Availabilities-requirements chk
$COM*,*                 NWCR          Northwest-corner rule
$COM*,*                 DUAL          Dual (uv) variables
$COM*,*                 NEWSOLN       New basic feasible solution
$COM*,*                 BASICLOOP     Loop involving basic variables
$COM*,*                 OPTSOLNTR     Optimal basic feasible solution
 
)GROUP GROUP7 LP LPS TRANS RSIMPLEX OPTSOLN CVARIATION BVARIATION ABCHECK NWCR DUAL NEWSOLN BASICLOOP OPTSOLNTR
 
 
$COM*I*    NAME:        LP
$COM*,*
$COM*,*    PURPOSE:     Linear Programming
$COM*,*
$COM*,*    SYNTAX:      Z_LP R
$COM*,*
$COM*,*    INPUT:       For a problem with M constraints and N
$COM*,*                 variables, the right argument is a
$COM*,*                 matrix with M+1 rows and N+1 columns
$COM*,*                 where the first row gives the cost
$COM*,*                 coefficients with costs for slack and
$COM*,*                 surplus variables equal to zero and a
$COM*,*                 final zero element, and the remaining
$COM*,*                 rows are the constrants.
$COM*,*
$COM*,*    DESCRIPTION: The result is the maximum value of
$COM*,*                 objective function and basic variables
$COM*,*                 and their values, or an indication of
$COM*,*                 an infeasible or unbounded solution.
$COM*,*
$COM*,*    INTERFACE:   RSIMPLEX
$COM*,*                 OPTSOLN
$COM*,*
 
    " R_LP A
[1]   R_OPTSOLN(($R A)[1],-2)$TAK RSIMPLEX A
    "
 
 
 
$COM*I*    NAME:        LPS
$COM*,*
$COM*,*    PURPOSE:     Linear programming with sensitivity
$COM*,*                 analysis.
$COM*,*
$COM*,*    SYNTAX:      Z_LPS R
$COM*,*
$COM*,*    INPUT:       For a problem with M constraints and N
$COM*,*                 variables, the right argument is a
$COM*,*                 matrix with M+1 rows and N+1 columns
$COM*,*                 where the first row gives the cost
$COM*,*                 coefficients with costs for slack and
$COM*,*                 surplus variables equal to zero and a
$COM*,*                 final zero element, and the remaining
$COM*,*                 rows are the constrants.
$COM*,*
$COM*,*    DESCRIPTION: The result is the maximum value of
$COM*,*                 objective function and basic variables
$COM*,*                 and their values, or an indication of
$COM*,*                 an infeasible or unbounded solution.
$COM*,*
$COM*,*                 If there is a maximum solution, then
$COM*,*                 the following sensitivity analysis is
$COM*,*                 provided: costs and upper and lower
$COM*,*                 bounds such that the variables in the
$COM*,*                 optimal basis remain the same, the
$COM*,*                 dual variables, and requirements and
$COM*,*                 upper and lower bounds such that the
$COM*,*                 variables in the optimal basis remain
$COM*,*                 the same.
$COM*,*
$COM*,*    INTERFACE:   RSIMPLEX
$COM*,*                 OPTSOLN
$COM*,*                 CVARIATION
$COM*,*                 BVARIATION
$COM*,*                 ON
$COM*,*
 
    " R_LPS A;T
[1]   T_RSIMPLEX A
[2]   R_OPTSOLN(($R A)[1],-2)$TAK T
[3]   $GO(T[1;($R T)[2]$-1]$NE 0)/0
[4]   R_R ON CVARIATION T
[4]   R_R ON BVARIATION T
    "
 
 
 
$COM*I*    NAME:        TRANS
$COM*,*
$COM*,*    PURPOSE:     Transportation problem
$COM*,*
$COM*,*    SYNTAX:      Z_TRANS R
$COM*,*
$COM*,*    INPUT:       The right argument is a matrix with
$COM*,*                 M+1 rows and N+1 columns.  The first
$COM*,*                 M rows and N columns give the unit
$COM*,*                 costs, and the element in the Ith
$COM*,*                 row and Jth column gives the unit cost
$COM*,*                 of shipping between the Ith origin and
$COM*,*                 Jth destination.  The first M elements
$COM*,*                 in the last column give the availabilities
$COM*,*                 at the M origins, and the first N elements
$COM*,*                 in the last row give the requirements at
$COM*,*                 the N destinations.  The element in the
$COM*,*                 lower right-hand corner is arbitrary. In
$COM*,*                 order to have an optimal solution the
$COM*,*                 sum of the availabilities must be equal
$COM*,*                 to the sum of the requirements.  For
$COM*,*                 brevity in the documentation of other
$COM*,*                 functions required by TRANS, this matrix
$COM*,*                 matrix is referred to as a "bordered cost
$COM*,*                 matrix", and M and N will always refer to
$COM*,*                 the number of origins and number of
$COM*,*                 destinations respectively.
$COM*,*
$COM*,*    DESCRIPTION: The following information is given for an
$COM*,*                 optimal (minimal) solution:
$COM*,*                 origin-destination pairs, amount shipped,
$COM*,*                 unit costs and costs for each amount
$COM*,*                 shipped for routes in the optimal basic
$COM*,*                 feasible solution; total cost of shipment;
$COM*,*                 optimal dual variables adjusted so that
$COM*,*                 the minimum dual variable for the origins
$COM*,*                 is zero.  If the sum of the availabilities
$COM*,*                 is not equal to the sum of the requirements
$COM*,*                 an indication is given and no solution is
$COM*,*                 found.
$COM*,*
$COM*,*    INTERFACE:   ABCHECK
$COM*,*                 NWCR
$COM*,*                 DUAL
$COM*,*                 NEWSOLN
$COM*,*                 OPTSOLNTR
$COM*,*
 
    " R_TRANS T;D;S
[1]   $GO(S_ABCHECK T)/end
[2]   S_NWCR T
[3]  loop:D_S DUAL T
[4]   $GO(0=1$TAK D)/end
[5]   S_((0,D),S) NEWSOLN T
[6]   $GO loop
[7]  end:R_(S,[1] 1$DRP D)OPTSOLNTR T
    "
 
 
 
$COM*I*    NAME:        RSIMPLEX
$COM*,*
$COM*,*    PURPOSE:     Revised simplex algorithm
$COM*,*
$COM*,*    SYNTAX:      Z_RSIMPLEX R
$COM*,*
$COM*,*    INPUT:       For a problem with M constraints and N
$COM*,*                 variables, the right argument is a
$COM*,*                 matrix with M+1 rows and N+1 columns
$COM*,*                 where the first row gives the cost
$COM*,*                 coefficients with costs for slack and
$COM*,*                 surplus variables equal to zero and a
$COM*,*                 final zero element, and the remaining
$COM*,*                 rows are the constrants.
$COM*,*
$COM*,*    DESCRIPTION: For a problem with M constraints and N
$COM*,*                 variables, the result is a matrix with
$COM*,*                 M+1 rows and N+M+3 columns.  The first
$COM*,*                 N+1 columns give the argument.  Rows
$COM*,*                 2, 3,...,M+1 and columns N+2, N+3,...
$COM*,*                 N+M+1 give the inverse of the optimal
$COM*,*                 basis matrix.  The first element of
$COM*,*                 column N+M+2 is -1 for an infeasible
$COM*,*                 solution, 0 for an optimal solution and
$COM*,*                 1 for an unbounded solution, while the
$COM*,*                 remaining rows give the variables in the
$COM*,*                 optimal basis.  The first element of the
$COM*,*                 last column is the optimal value of the
$COM*,*                 objective function, and the remaining
$COM*,*                 elements give the values of the variables
$COM*,*                 in the optimal solution.
$COM*,*
 
    " R_RSIMPLEX A;B;I;K;L;M;N;P;S;T;V;X;XB;Z;ZERO
[1]   ZERO_1E-6
[2]   M_($R A)[1]$-1
[3]   N_($R A)[2]$-1
[4]   T_((1 0$DRP A),[1]($-A[1;]),[0.5]$-+$RD1 1 0$DRP A),($IM+2)$SC.=$IM+2
[5]   B_N+$I M
[6]   P_M+2
[7]  loop:XB_T[$I M;N+1]
[8]   P_P$-(P=M+2)&T[P;N+1]$GE$-ZERO
[9]   S_P$-M+1
[10]  Z_T[P;N+1+$IM+2]+.#T[;(~($I N)$E B)/$I N]
[11]  $GO(&/Z$GE$-ZERO)/END
[12]  K_((~($I N)$E B)/$I N)[Z$I$MIN/Z]
[13]  X_T[;N+1+$IM+2]+.#T[;K]
[14]  V_((-2$DRP X)>ZERO)/$I M
[15]  $GO(0=$R V)/unbounded
[16]  L_V[(XB[V]%X[V])$I$MIN/XB[V]%X[V]]
[17]  T[L;N+$I M+3]_T[L;N+$I M+3]%X[L]
[18]  I_(L$NE$I M+2)/$I M+2
[19]  T[I;N+$I M+3]_T[I;N+$I M+3]$-X[I]$SC.#T[L;N+$I M+3]
[20]  B[L]_K
[21]  $GO loop
[22] unbounded:S_-1
[23] end:R_(A,0,[1]T[$GUB;N+1+$I M]),(S,T[P;N+1]),[1]B[$GU B],[1.5]XB[$GU B]
     "
 
 
$COM*I*    NAME:        OPTSOLN
$COM*,*
$COM*,*    PURPOSE:     Returns last 2 columns of RSIMPLEX result
$COM*,*
$COM*,*    SYNTAX:      Z_OPTSOLN R
$COM*,*
$COM*,*    DESCRIPTION: This is the optimal solution as given in LP.
$COM*,*
$COM*,*    INTERFACE:   ON
$COM*,*
 
    " R_OPTSOLN S
[1]   $GOnfs solv ubs[S[1;1]+2]
[2]  nfs:R_'No feasible solution' $DMD $GO 0
[3]  ubs:R_'Unbounded solution' $DMD $GO 0
[4]  solv:R_'          Maximum Value',12 5$FMTS[1;2]
[5]   R_R ON ' ' ON '   VAR.     LEVEL'
[6]   R_R ON 5 0 13 5$FMT 1 0 $DRPS
    "
 
 
 
$COM*I*    NAME:        CVARIATION
$COM*,*
$COM*,*    PURPOSE:     Cost Variation
$COM*,*
$COM*,*    SYNTAX:      Z_CVARIATION R
$COM*,*
$COM*,*    INPUT:       The right argument is the result of RSIMPLEX.
$COM*,*
$COM*,*    DESCRIPTION: The resuult is the sensitivity analysis
$COM*,*                 for costs as given in LPS.
$COM*,*
$COM*,*    INTERFACE:   ON
$COM*,*
 
    " R_CVARIATION T;BASIS;BETA;BL;BR;C;IL;IR;J;M;N;X;XB;ZERO;ZMC
[1]   ZERO_1E-6
[2]   M_($RT)[1]$-1
[3]   N_($RT)[2]$-M+3
[4]   BASIS_T[1+$IM;N+M+2]
[5]   XB_T[1+$IM;N+M+3]
[6]   BETA_T[1+$IM;N+1+$IM]
[7]   C_T[1;$IN]
[8]   ZMC_(C[BASIS]+.#BETA+.#T[1+$IM;$IN])$-C
[9]   R_(3 1$R' ') ON '               Variations in Costs' ON '  '
[10]  R_R ON '   VAR.    L.B.         COST         U.B.'
[11]  J_1
[12] loop:$GO(C[J]=0)/end
[13]  $GO(J$E BASIS)/l1
[14]  R_R ON (5 0$FMT J),(13$R' '),13 5$FMT C[J],C[J]+ZMC[J]
[15]  $GO end
[16] l1:X_BETA[BASIS$I J;]+.#T[1+$I M;$I N]
[17]  IL_((~($I N)$E BASIS)&X>ZERO)/$I N
[18]  IR_((~($I N)$E BASIS)&X<$-ZERO)/$I N
[19]  BL_C[J]+$MAX/$-ZMC[IL]%X[IL]
[20]  BL_13$TAK 13 5 $FMT(BL>-0.00001)/BL
[21]  BR_C[J]+$MIN/$-ZMC[IR]%X[IR]
[22]  BR_13$TAK 13 5 $FMT(BR<1000000)/BR
[23]  R_R ON (5 0 $FMT J),BL,(13 5$FMT C[J]),BR
[24] end:$GO(N$GEJ_J+1)/loop
    "
 
 
$COM*I*    NAME:        BVARIATION
$COM*,*
$COM*,*    PURPOSE:     Requirements variation
$COM*,*
$COM*,*    SYNTAX:      Z_BVARIATION R
$COM*,*
$COM*,*    INPUT:       The right argument is the result of
$COM*,*                 RSIMPLEX.
$COM*,*
$COM*,*    DESCRIPTION: This function performs a sensitivity
$COM*,*                 analysis for requirements as given
$COM*,*                 in LPS.
$COM*,*
 
    " R_BVARIATION T;B;BASIS;BETA;BL;BR;I;J;M;MV;N;LB;XB;ZERO
[1]   ZERO_1E-6
[2]   M_($R T)[1]$-1
[3]   N_($R T)[2]$-M+3
[4]   B_T[1+$I M;N+1]
[5]   BASIS_T[1+$I M;N+M+2]
[6]   XB_T[1+$I M;N+M+3]
[7]   BETA_T[1+$I M;N+1+$I M]
[8]   MV_T[1;BASIS]+.#BETA
[9]   R_(3 1$R' ')ON '            Variations in Requirements' ON '  '
[10]  R_R ON '   VAR.     DUAL          L.B.         B           U.B.'
[11]  I_1
[12] loop:J_(BETA[;I]>ZERO)/$I M
[13]  BL_B[I]+$MAX/$-XB[J]%BETA[J;I]
[14]  BL_13$TAK 13 5$FMT(BL>-0.00001)/BL
[15]  J_(BETA[;I]<$-ZERO)/$I M
[16]  BR_B[I]+$MIN/$-XB[J]%BETA[J;I]
[17]  BR_13$TAK 13 5$FMT(BR<1000000)/BR
[18]  R_R ON(5 0$FMT I),(13 5$FMT MV[I]),BL,(13 5$FMT B[I]),BR
[19]  $GO(M$GE I_I+1)/loop
    "
 
 
$COM*I*    NAME:        ABCHECK
$COM*,*
$COM*,*    PURPOSE:     To perform an availabilities-requirements
$COM*,*                 check.
$COM*,*
$COM*,*    SYNTAX:      Z_ABCHECK R
$COM*,*
$COM*,*    INPUT:       The right argument is a bordered cost
$COM*,*                 matrix.
$COM*,*
$COM*,*    DESCRIPTION: The result is 0 if the sum of the
$COM*,*                 availabilities is equal to the sum of
$COM*,*                 the requirements, and 1 if the sums are
$COM*,*                 not equal.
$COM*,*
 
    " R_ABCHECK T;M;N
[1]   M_($R T)[1]$-1
[2]   N_($R T)[2]$-1
[3]   R_(+/T[$I M;N+1])$NE+/T[M+1;$I N]
    "
 
 
$COM*I*    NAME:        NWCR
$COM*,*
$COM*,*    PURPOSE:     To implement the Northwest-corner rule.
$COM*,*
$COM*,*    SYNTAX:      Z_NWCR R
$COM*,*
$COM*,*    INPUT:       The right argument is a bordered cost matrix.
$COM*,*
$COM*,*    DESCRIPTION: The result is a matrix with two rows and
$COM*,*                 M+N-1 columns, where the elements in the
$COM*,*                 first row give the values of the variables
$COM*,*                 in the initial basic feasible solution
$COM*,*                 found according to the northwest-corner rule
$COM*,*                 and those in the second row give the
$COM*,*                 corresponding basic cells numbered in
$COM*,*                 row-major order.  A matrix in this format
$COM*,*                 is referred to as a "solution matrix".
$COM*,*
$COM*,*    INTERFACE:   DIFF
$COM*,*
 
    " R_NWCR T;AC;BC;M;N;X
[1]   M_($R T)[1]$-1
[2]   N_($R T)[2]$-1
[3]   AC_+\0.001+T[$I M;N+1]
[4]   BC_+\T[M+1;$I N$-1],T[M+1;N]+0.001#M
[5]   X_-1$DRP(AC,BC)[$GU AC,BC]
[6]   R_$MIN 0.5+1 DIFF 0,X
[7]   R_R,[0.5]($I M+N$-1)++\(-1$DRP 0,X$E AC)\N$-1
    "
 
 
$COM*I*    NAME:        DUAL
$COM*,*
$COM*,*    PURPOSE:     To provide dual ("uv") variables
$COM*,*
$COM*,*    SYNTAX:      Z_L DUAL R
$COM*,*
$COM*,*    INPUT:       The right argument is a bordered cost matrix.
$COM*,*
$COM*,*                 The left argument is a solution matrix
$COM*,*                 as created by NWCR.
$COM*,*
$COM*,*    DESCRIPTION: If the solution is optimal, the result is
$COM*,*                 a vector with M+N elements, where the
$COM*,*                 first element is zero, giving the values
$COM*,*                 of the dual variables.  If the solution is
$COM*,*                 not optimal, the result is a one element
$COM*,*                 vector giving the number of the variable
$COM*,*                 to be entered into the basic solution.
$COM*,*
 
    " R_S DUAL T;BC;C;I;M;N;X
[1]   M_($R T)[1]$-1
[2]   N_($R T)[2]$-1
[3]   C_,T[$I M;$I N]
[4]   BC_1+(M,N)$ECD S[2;]$-1
[5]   R_0,$MIN 0.5+C[S[2;]]$MDV 0 1$DRP(BC[1;]$SC.=$IM),BC[2;]$SC.=$IN
[6]   X_(,R[$I M]$SC.+R[M+$I N])$-C
[7]   $GO(0=$R I_((X=$MAX/X)&X>0)/$I $R X)/0
[8]   R_1$TAK I
    "
 
 
$COM*I*    NAME:        NEWSOLN
$COM*,*
$COM*,*    PURPOSE:     New basic feasible solution
$COM*,*
$COM*,*    SYNTAX:      Z_L NEWSOLN R
$COM*,*
$COM*,*    INPUT:       The right argument is a bordered cost matrix.
$COM*,*
$COM*,*                 The left argument is a solution matrix with
$COM*,*                 an extra first column with the first element
$COM*,*                 equal to zero and the second element equal
$COM*,*                 to the number of the variable to be entered
$COM*,*                 into the basic solution.
$COM*,*
$COM*,*    DESCRIPTION: The result is a solution matrix for the new
$COM*,*                 basic feasible solution.
$COM*,*
$COM*,*    INTERFACE:   BASICLOOP
$COM*,*
 
    " R_S NEWSOLN T;I;K;P;THETA
[1]   I_S[2;]$I (-1+$R T) BASICLOOP S[2;]
[2]   K_(($R I)$R 0 1)/I
[3]   THETA_$MIN/S[1;K]
[4]   P_K[S[1;K]$I THETA]
[5]   S[1;I]_S[1;I]+THETA#($R I)$R 1 -1
[6]   R_(P$NE$I($R S)[2])/S
    "
 
 
$COM*I*    NAME:        BASICLOOP
$COM*,*
$COM*,*    PURPOSE:     This is a loop involving basic variables.
$COM*,*
$COM*,*    SYNTAX:      Z_L BASICLOOP R
$COM*,*
$COM*,*    INPUT:       The right argument is a vector with M+N
$COM*,*                 elements giving the number of the variable
$COM*,*                 to be entered into the solution followed by
$COM*,*                 the variable numbers in the basic feasible
$COM*,*                 solution.
$COM*,*
$COM*,*                 The left argument is a two element vector
$COM*,*                 containing (M,N).
$COM*,*
$COM*,*    DESCRIPTION: The result is the numbers of elements in
$COM*,*                 basic loop where the first number is that
$COM*,*                 of the variable to be entered into the
$COM*,*                 solution.
$COM*,*
 
    " R_X BASICLOOP V;J;K;P;Q
[1]   R_1+X$ECD,-1+1$TAK V
[2]   P_1+X$ECD-1+1$DRP V
[3]   Q_2 0$R 0
[4]   K_1
[5]  loop:J_P[K;]$I R[K;($R R)[2]]
[6]   $GO(($R P)[2]<J)/back
[7]   R_R,P[;J]
[8]   P_(J$NE$I($R P)[2])/P
[9]   K_2 1[K]
[10]  $GO((K=2)&=/R[2;1,($R R)[2]])/end
[11]  $GO loop
[12] back:Q_Q,R[;($R R)[2]]
[13]  R_0 -1$DRP R
[14]  K_2 1[K]
[15]  $GO loop
[16] end:R_1+X$DCD R$-1
    "
 
 
$COM*I*    NAME:        OPTSOLNTR
$COM*,*
$COM*,*    PURPOSE:     Optimal basic feasible solution
$COM*,*
$COM*,*    SYNTAX:      Z_L OPTSOLNTR R
$COM*,*
$COM*,*    INPUT:       The right argument is a bordered cost matrix.
$COM*,*
$COM*,*                 The left argument is an optimal feasible
$COM*,*                 solution matrix with a third row giving
$COM*,*                 the optimal dual variables except for the
$COM*,*                 first origin dual variable which is zero.
$COM*,*
$COM*,*    DESCRIPTION: The result is the solution as described
$COM*,*                 by the function TRANS.
$COM*,*
$COM*,*    INTERFACE:   ON
$COM*,*
 
    " R_S OPTSOLNTR T;C;C12;C3;C4;C5;D;M;N
[1]   $GO(3=1$TAK $R S)/soln
[2]   R_'Availabilities and requirements have different totals'
[3]   $GO 0
[4]  soln:M_($R T)[1]$-1
[5]   N_($R T)[2]$-1
[6]   C_,T[$I M;$I N]
[7]   D_0,S[3;]
[8]   R_'      ORG.   DEST.     AMT. U. COST  COST' ON '  '
[9]   S_S[;$GU S[2;]]
[10]  C12_$TPS1+M N$ECD S[S;]$-1
[11]  C3_S[1;]
[12]  C4_C[S[2;]]
[13]  C5_C3#C4
[14]  R_R ON 8 0$FMT C12,C3,C4,[1.5]C5
[15]  R_R ON(36$R' '),'----'
[16]  R_R ON(20$R' '),'Minimum cost',8 0$FMT+/C5
[17]  R_R ON 2 1$R' '
[18]  R_R ON 'Optimal dual solution:'
[19]  R_R ON '  Origins       ',3 0$FMT D[$I M]$-$MIN/D[$I M]
[20]  R_R ON '  Destinations  ',3 0$FMT D[M+$I N]+$MIN/D[$I M]
    "
 
 
)WSID STATPACK3
)SAVE
)SET INPUT ME
