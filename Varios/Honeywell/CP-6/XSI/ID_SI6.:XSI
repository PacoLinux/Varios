/*M*     ID - Print blockletters using data file created by ID$CREATE */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X*DMR,THI=0,PLM=5,IND=5,CTI=5,SDI=5,MCL=10,DCI=5,CSU=5,ECU=5,DTI=2*/
/*
                 IIIIII  DDDDDD
                   II    DD   DD
                   II    DD   DD
                   II    DD   DD
                   II    DD   DD
                   II    DD   DD
                 IIIIII  DDDDDD
 */
/*P*     Purpose-
              To print blockletters usings the various fonts of blockletters
         supplied by ID$CREATE             */
/**/
/**/
/*F*     Function -
 
              DCBS used:
                   M$SI      Command input
                   M$DO      Comments and diagnostic output
                   M$LO      Blockletters out
                   M$EI      Blockletter descriptions in(ID_ID)
 
              Files used
                   ID_ID
                                                                */
         %EJECT;
ID:  PROC MAIN;                         /* PRINT BLOCKLETTERS */
         %SET CRT_FID='0'B;
         %INCLUDE ID_C1;
         %SUB ERR_MSG#=9;
         %F$DCB;
         %FPT_OPEN(
              FPTN=REA,
              REASSIGN=YES,
              DCB=M$EI
                   );
         %FPT_OPEN(
              FPTN=REAS,
              REASSIGN=YES,
              DCB=M$LO
                   );
         %FPT_OPEN(
              FPTN=SDCBS,
              DCB=M$LO,
              RES='LO',
              ASN=DEVICE,
              SETDCB=YES
                   );
         %FPT_OPEN(
              FPTN=NO,
              ASN=DEVICE,
              RES='NO',
              SETDCB=YES,
              DCB=M$SI
                   );
         %FPT_CLOSE(
              FPTN=SAVE,
              DCB=M$LO,
              DISP=SAVE
                   );
         %FPT_READ(
              FPTN=FILE_RD,
              WAIT=YES,
              DCB=M$EI,
              BIN=YES,
              KEYS=YES,
              KEY=NKEY
                   );
         %FPT_WRITE(
              FPTN=LET_WT,
              WAIT=YES,
              DCB=M$LO,
              VFC=YES
                   );
DCL M$LM DCB;
DCL M$LO DCB;
DCL M$LM$ PTR;
DCL M$SI$ PTR;
DCL 1 NBREAK STATIC,
         2 COUNT UBIN BYTE UNAL INIT(KEYLEN),
         2 KEYS (0:23) UBIN BYTE UNAL INIT(1*0);
DCL NKEY REDEF NBREAK CHAR(25);
         %EJECT;
         %FPT_GDS(
              FPTN=GBLK,
              COMMON=YES,
              FREE=YES,
              RESULTS=PRT_BLK
                   );
         %FPT_FDS(
              FPTN=FBLK,
              COMMON=YES,
              RESULTS=PRT_BLK
                   );
         %VLP_VECTOR(FPTN=PRT_BLK);
         %EJECT;
         %INCLUDE B$JIT_C;
DCL B$JIT$ PTR SYMREF;
         %B$JIT0;
         %U$JIT1;
         %A$JIT6X;
DCL BA$PRAM BASED SBIN;
DCL I SBIN STATIC ALIGNED;
DCL COL SBIN STATIC ALIGNED;
DCL NN SBIN STATIC ALIGNED;
DCL OUTBUFF CHAR(80) STATIC ALIGNED;
DCL INBUFF(0:139) CHAR(1) STATIC UNAL;
DCL IN_REC REDEF INBUFF CHAR(140);
DCL INJUNK(0:139) REDEF INBUFF UBIN(9) UNAL;
DCL NUM SBIN STATIC ALIGNED;
DCL STR_COL SBIN STATIC ALIGNED;
DCL END_COL SBIN STATIC ALIGNED;
DCL BLANK BASED CHAR(4);
DCL ROW$ PTR STATIC;
DCL ST_PTR$ PTR STATIC;
DCL OUTREC(0:139) BASED CHAR(1) UNAL;
DCL POS SBIN STATIC ALIGNED;
DCL J SBIN STATIC ALIGNED;
DCL L SBIN STATIC ALIGNED;
DCL PRT_POS SBIN STATIC ALIGNED;
DCL LINE(0:139) CHAR(1) STATIC;
DCL LETTER CHAR(1) STATIC;
DCL TEST BIT(1) STATIC;
DCL FIRST BIT(1) STATIC;
DCL ST_COL SBIN STATIC ALIGNED;
DCL INTEXT SBIN STATIC ALIGNED;
DCL PAGE_LINE SBIN STATIC ALIGNED INIT(0);
         %EJECT;
PRINT: PROC (NPKEY,APLINE,TOP);         /* PRINTS LINES USING ID_ID FILE */
DCL TOP_OF_FORM CHAR(1) STATIC INIT('0');
DCL APLINE(0:139) CHAR(1);
DCL BPLINE(0:139) REDEF APLINE UBIN BYTE UNAL;
DCL NPKEY CHAR(25) ;
DCL TOP SBIN;
         /*   THIS STARTS THE CODE */
     IF NPKEY~=NKEY
     THEN
          CALL GETREC;
         %EJECT;
          DO I=0 TO 10;
               IF PRAM_FLG(I)=1
               THEN
                 DO CASE(I);
                 CASE(0);
                      REC_VEC.PTR$->REC.PDEPTH=PRAMS.PDEPTH;
                 CASE(1);
                      REC_VEC.PTR$->REC.PWIDTH=PRAMS.PWIDTH;
                 CASE(2);
                      REC_VEC.PTR$->REC.ICSH=PRAMS.ICSH;
                 CASE(3);
                      REC_VEC.PTR$->REC.ICSV=PRAMS.ICSV;
                 CASE(4,5);
                      OUTBUFF='OOPS...';
                      CALL M$WRITE(USER_WT);
                      CALL FINN;
                 CASE(6);
                      REC_VEC.PTR$->REC.STRIKES=PRAMS.STRIKES;
                 CASE(7);
                      REC_VEC.PTR$->REC.BS=PRAMS.BS;
                 CASE(8);
                      REC_VEC.PTR$->REC.LPI=PRAMS.LPI;
                 CASE(9);
                      REC_VEC.PTR$->REC.USECHAR=PRAMS.USECHAR;
                 CASE(10);
                      REC_VEC.PTR$->REC.CSET=PRAMS.CSET;
                 END;
             END;
     IF TOP=1
     THEN
       DO;
            LET_WT.BUF_=VECTOR(TOP_OF_FORM);
            CALL M$WRITE(LET_WT);
            PAGE_LINE=REC_VEC.PTR$->REC.PDEPTH;
            TOP=0;
          END;
     GBLK.V.SEGSIZE#=((REC_VEC.PTR$->REC.HEIGHT
          *REC_VEC.PTR$->REC.PWIDTH)/4)+1;
     CALL M$GDS(GBLK) ALTRET(NOMEM);
     DO WHILE('0'B);
NOMEM:    CALL WRITE_ERR(8);
          CALL FINN;
        END;
         %EJECT;
     ROW$=ST_PTR$;
     I=0;
     DO WHILE (I<GBLK.V.SEGSIZE#+1);
          ROW$->BLANK='    ';
          ROW$=PINCRW(ROW$,1);
          I=I+1;
        END;
     ROW$=ST_PTR$;
     DO J=0 TO REC_VEC.PTR$->REC.HEIGHT-1;
          PRT_POS=1;
          I=0;
          DO WHILE (PRT_POS<REC_VEC.PTR$->REC.PWIDTH-REC_VEC.PTR$->REC.WIDTH);
               LETTER=APLINE(I);
               INDX=BPLINE(I);
               IF INDX=8
               THEN
                    IF REC_VEC.PTR$->REC.BS=1
                    THEN
                      DO;
                           PRT_POS=PRT_POS-(REC_VEC.PTR$->REC.WIDTH
                                +REC_VEC.PTR$->REC.ICSH);
                           GOTO BACKSPACE;
                         END;
               LET$=PINCRB(REC_VEC.PTR$,INDX*LLEN);
               LET$=PINCRW(LET$,22);
               POS=J*REC_VEC.PTR$->REC.WIDTH;
               DO L=0 TO REC_VEC.PTR$->REC.WIDTH-1;
                    IF LET$->MAT$LET(POS)='1'B
                    THEN
                         ROW$->OUTREC(PRT_POS)=LETTER;
                    POS=POS+1;
                    PRT_POS=PRT_POS+1;
                  END;
               DO L=1 TO REC_VEC.PTR$->REC.ICSH;
                    ROW$->OUTREC(PRT_POS)=' ';
                    PRT_POS=PRT_POS+1;
                  END;
BACKSPACE:     I=I+1;
             END;
          ROW$=PINCRC(ROW$,REC_VEC.PTR$->REC.PWIDTH);
        END;
     CALL WRITEIT;
     RETURN;
         %EJECT;
GETREC: PROC;                           /* GET THE RECORD */
     FBLK.V.SEGSIZE#=GMEM.V.SEGSIZE#+24;
     CALL M$FDS(FBLK);
     GMEM.V.SEGSIZE#=23;
     CALL M$GDS(GMEM) ALTRET(NOMEM);
     DO WHILE('0'B);
NOMEM:    CALL WRITE_ERR(8);
          CALL FINN;
        END;
     NKEY=NPKEY;
     FILE_RD.BUF_=REC_VEC;
     TEST='0'B;
     CALL M$READ(FILE_RD) ALTRET(NOKEY);
     DO WHILE('0'B);
NOKEY:    DO WHILE (TEST);
               OUTBUFF='NO RECORD FOR THAT KEY...';
               CALL M$WRITE(USER_WT);
               CALL FINN;
             END;
        END;
     TEST='1'B;
     LLEN=REC_VEC.PTR$->REC.HEIGHT*REC_VEC.PTR$->REC.WIDTH;
     TLEN=(LLEN*127/9);
     GMEM.V.SEGSIZE#=((TLEN/4)+2);
     CALL M$GDS(GMEM) ALTRET(NOMEM);
     FILE_RD.BUF_.BOUND=(GMEM.V.SEGSIZE#+23)*4;
     CALL M$READ(FILE_RD) ALTRET(NOKEY);
     ST_PTR$=PINCRC(REC_VEC.PTR$,FILE_RD.BUF_.BOUND);
     RETURN;
END GETREC;
         %EJECT;
WRITEIT: PROC;           /* THIS WRITES THE CORE IMAGE TO THE OUTPUT DEVICE */
    %VLR_LINES(FPTN=LN);
    %FPT_LINES(
         FPTN=LNS,
         DCB=M$LO,
         LINES=LN
              );
DCL RLEN SBIN STATIC ALIGNED;
DCL BLANK_LINE CHAR(4) STATIC INIT('A  ');
     IF FIRST='1'B
     THEN
       DO;
            FIRST='0'B;
            CALL M$LINES(LNS);
            IF LN.PAGE#=0
            THEN
                 PAGE_LINE=PRAMS.PDEPTH*PRAM_FLG(0)-(PRAM_FLG(0)-1)*REC_VEC.PTR$->REC.PDEPTH;
            ELSE
                 IF LN.RLINES#<(PRAMS.PDEPTH*PRAM_FLG(0)-(PRAM_FLG(0)-1)*REC_VEC.PTR$->REC.PDEPTH)
                 THEN
                      PAGE_LINE=LN.RLINES#;
                 ELSE
                      PAGE_LINE=PRAMS.PDEPTH*PRAM_FLG(0)-(PRAM_FLG(0)-1)*REC_VEC.PTR$->REC.PDEPTH;
          END;
     IF PAGE_LINE<REC_VEC.PTR$->REC.HEIGHT
     THEN
       DO;
            PAGE_LINE=REC_VEC.PTR$->REC.PDEPTH;
            LET_WT.BUF_=VECTOR(TOP_OF_FORM);
            CALL M$WRITE(LET_WT);
          END;
     ROW$=ST_PTR$;
     RLEN=REC_VEC.PTR$->REC.PWIDTH;
     I=0;
     DO WHILE (I<REC_VEC.PTR$->REC.HEIGHT);
          J=1;
          DO WHILE (J<REC_VEC.PTR$->REC.STRIKES);
               ROW$->OUTREC(0)='`';
               LET_WT.BUF_.BOUND=RLEN;
               LET_WT.BUF_.BUF$=ROW$;
               IF REC_VEC.PTR$->REC.USECHAR=0
               THEN
                    CALL REPLACE;
               CALL M$WRITE(LET_WT);
               J=J+1;
             END;
          ROW$->OUTREC(0)='A';
          LET_WT.BUF_.BOUND=RLEN;
          LET_WT.BUF_.BUF$=ROW$;
          IF REC_VEC.PTR$->REC.USECHAR=0
          THEN
               CALL REPLACE;
          CALL M$WRITE(LET_WT);
          PAGE_LINE=PAGE_LINE-1;
          I=I+1;
          ROW$=PINCRC(ROW$,RLEN);
        END;
         %EJECT;
     FBLK.V.SEGSIZE#=((REC_VEC.PTR$->REC.HEIGHT
          *REC_VEC.PTR$->REC.PWIDTH)/4)+1;
     CALL M$FDS(FBLK);
     LET_WT.BUF_=VECTOR(BLANK_LINE);
     DO I=1 TO REC_VEC.PTR$->REC.ICSV;
          CALL M$WRITE(LET_WT);
          PAGE_LINE=PAGE_LINE-1;
        END;
     RETURN;
         %EJECT;
REPLACE: PROC;                     /* IF USER HAS GIVEN US A CHAR SET USE IT */
     DO COL=1 TO RLEN;
          IF ROW$->OUTREC(COL)~=' '
          THEN
               ROW$->OUTREC(COL)=SUBSTR(REC_VEC.PTR$->
                    REC.CSET,J-1,1);
        END;
     RETURN;
END REPLACE;
END WRITEIT;
END PRINT;
         %EJECT;
WRITE_ERR: PROC(NUMBER);                /* THIS HANDLES THE ERROR MESSAGES */
DCL ERROR SBIN STATIC ALIGNED INIT(0);
DCL NUMBER SBIN;
DCL ERROR_MSG(0:ERR_MSG#) CHAR(80) STATIC INIT(
              'THIS IS JUST TOO MANY ERRORS...',
              'INVALID OPTION...',
              'VALUE EXCEEDES MAX...',
              'VALUE MUST BE NUMERIC...',
              'VALUE MISSING OR ZERO...',
              'PRAM TOO LONG RIGHTMOST CHARACTERS TRUNCATED...',
              'INVALID VALUE FOR FLAG PRAM...',
              'ALL PRAMS NOT PRESENT...',
              'NEEDED MEMORY NOT AVALIBLE...',
              'ERROR IN ASCII/OCAL DEF...');
     OUTBUFF=ERROR_MSG(NUMBER);
     CALL M$WRITE(USER_WT);
     ERROR=ERROR+1;
     IF ERROR>20
     THEN
       DO;
            OUTBUFF=ERROR_MSG(0);
            CALL M$WRITE(USER_WT);
            CALL FINN;
          END;
     RETURN;
END WRITE_ERR;
         %EJECT;
CHK_DEF: PROC;                          /* FIND OUT WHAT KIND OF PRAM THIS IS */
     ST_COL=COL;
     COL=COL+SIZE(I);
     IF PRAM_FLG(I)=1
     THEN
       DO;
            CALL CONCAT(OUTBUFF,COMTAB(I),
                 'IS ALREADY DEFINED, LAST DEF USED...');
            CALL M$WRITE(USER_WT);
          END;
     IF PRAM_MAX(I)<0
     THEN
          CALL STRING;
     ELSE IF PRAM_MAX(I)=0
          THEN
               CALL FLAG;
          ELSE
               CALL NUMS;
     CALL ZERO;
     RETURN;
END CHK_DEF;
         %EJECT;
NUMS: PROC;                             /* THIS IS FOR NUMERIC PRAMS */
DCL VALUE SBIN STATIC ALIGNED;
     VALUE=0;
     DO NN=0 TO 4;
          IF INJUNK(COL)<47
          THEN
            DO;
                 CALL DONE;
                 RETURN;
               END;
          IF INJUNK(COL)<58
          THEN
            DO;
                 CALL CHARBIN(NUM,INBUFF(COL));
                 VALUE=(VALUE*10)+NUM;
                 COL=COL+1;
               END;
          ELSE
            DO;
                 CALL WRITE_ERR(3);
                 RETURN;
               END;
        END;
     CALL WRITE_ERR(2);
     RETURN;
         %EJECT;
DONE: PROC;                        /* CHECK AND SEE IF PRAM VALUE IS VALID */
     IF PRAM_MAX(I)<VALUE
     THEN
       DO;
            CALL WRITE_ERR(2);
            RETURN;
          END;
     PRAM_ADDR$(I)->BA$PRAM=VALUE;
     PRAM_FLG(I)=1;
     RETURN;
END DONE;
END NUMS;
         %EJECT;
STRING: PROC;                           /* THIS IS FOR STRING PRAMS */
DCL STRING$ PTR STATIC ALIGNED;
DCL BA$RING BASED CHAR(LEN);
DCL LEN SBIN STATIC ALIGNED;
     PRAM_MAX(I)=-PRAM_MAX(I);
     DO NN=0 TO PRAM_MAX(I);
          IF INJUNK(COL+NN)=44
          THEN
               GOTO BOT;
          IF INJUNK(COL+NN)=41
          THEN
               GOTO BOT;
          IF INJUNK(COL+NN)<33
          THEN
               GOTO BOT;
        END;
     CALL WRITE_ERR(5);
BOT: LEN=PRAM_MAX(I);
     PRAM_MAX(I)=-PRAM_MAX(I);
     STRING$=ADDR(INBUFF(COL));
     PRAM_ADDR$(I)->BA$RING=' ';
     LEN=NN;
     PRAM_ADDR$(I)->BA$RING=STRING$->BA$RING;
     PRAM_FLG(I)=1;
     RETURN;
END STRING;
         %EJECT;
FLAG: PROC;                             /* THIS IS FOR FLAG PRAMS */
     IF SUBSTR(IN_REC,COL,3)='YES'
     THEN
       DO;
            PRAM_FLG(I)=1;
            PRAM_ADDR$(I)->BA$PRAM=1;
            RETURN;
          END;
     IF SUBSTR(IN_REC,COL,2)='NO'
     THEN
       DO;
            PRAM_FLG(I)=1;
            PRAM_ADDR$(I)->BA$PRAM=0;
            RETURN;
          END;
     CALL WRITE_ERR(6);
     RETURN;
END FLAG;
         %EJECT;
ZERO: PROC;                        /* ZERO THE FIELD OF THE PRAM WE JUST GOT */
     DO COL=ST_COL TO END_COL;
          IF INBUFF(COL)~=')'
          THEN
               IF INBUFF(COL)~=','
               THEN
                    INJUNK(COL)=0;
               ELSE
                    RETURN;
          ELSE
               RETURN;
        END;
     RETURN;
END ZERO;
         %EJECT;
FIXAWT: PROC;                           /* FIX THE OUTPUT LINE AND WRITE IF */
DCL GPOS SBIN STATIC ALIGNED;
DCL BPOS SBIN STATIC ALIGNED;
DCL TOP SBIN STATIC ALIGNED;
     TOP=0;
     GPOS=0;
     INTEXT=-1;
     DO BPOS=STR_COL TO END_COL;
          IF INJUNK(BPOS)~=0
          THEN
               IF INJUNK(BPOS)~=39
               THEN
                    IF INTEXT=1
                    THEN
                      DO;
                           LINE(GPOS)=INBUFF(BPOS);
                           GPOS=GPOS+1;
                         END;
                    ELSE
                         IF INBUFF(BPOS)='~' OR INBUFF(BPOS)='%'
                         THEN
                              CALL CHK_IN;
                         ELSE
                              IF INBUFF(BPOS)='^'
                              THEN
                                   CALL TOF;
                              ELSE
                                   IF INBUFF(BPOS)='/'
                                   THEN
                                        CALL NEXL;
                                   ELSE ;
               ELSE
                    IF INTEXT=1
                    THEN
                         IF INJUNK(BPOS+1)=39
                         THEN
                           DO;
                                LINE(GPOS)=INBUFF(BPOS);
                                GPOS=GPOS+1;
                                BPOS=BPOS+1;
                              END;
                         ELSE
                              INTEXT=-INTEXT;
                    ELSE
                         INTEXT=-INTEXT;
        END;
     DO BPOS=GPOS TO 139;
          LINE(BPOS)=' ';
        END;
     CALL PRINT(KEY,LINE,TOP);
     RETURN;
         %EJECT;
TOF: PROC;                              /* PRINT TOP OF FORM */
     DO COL=GPOS TO 139;
          LINE(COL)=' ';
        END;
     IF GPOS=0
     THEN
       DO;
            TOP=1;
            RETURN;
          END;
     CALL PRINT(KEY,LINE,TOP);
     TOP=1;
     GPOS=0;
     RETURN;
END TOF;
NEXL: PROC;                             /* PRINT A NEW LINE */
     DO COL=GPOS TO 139;
          LINE(COL)=' ';
        END;
     CALL PRINT(KEY,LINE,TOP);
     GPOS=0;
     RETURN;
END NEXL;
         %EJECT;
CHK_IN: PROC;                           /* FILL INTRINSIC FUNCTIONS INTO LINE */
DCL INTAB(0:5) CHAR(8) STATIC INIT(
              'DATE',
              'TIME',
              'ACCN',
              'WOO',
              'UNAME',
              'SYSID'
                   );
DCL INSIZE(0:5) SBIN STATIC ALIGNED INIT(
              4,
              4,
              4,
              3,
              5,
              5
              );
DCL FIELDPTR$ PTR STATIC;
DCL CHARS(0:0) CHAR(1) BASED;
DCL FIELDSIZE(0:5) SBIN STATIC ALIGNED INIT(
              8,
              5,
              8,
              8,
              12,
              5
                   );
         %EJECT;
     BPOS=BPOS+1;
     DO I=0 TO 5;
          IF SUBSTR(IN_REC,BPOS,INSIZE(I))=INTAB(I)
          THEN
               GOTO FOUND;
        END;
     RETURN;
FOUND: IF I<2
     THEN
          CALL DTIME;
     ELSE
          CALL JITINFO;
     RETURN;
         %EJECT;
DTIME: PROC;                            /* GET DATE AND TIME */
DCL DATE CHAR(8) STATIC;
DCL TIME CHAR(5) STATIC;
         %FPT_TIME(
              FPTN=TIM,
              DATE=DATE,
              TIME=TIME,
              DEST=LOCAL
                   );
     CALL M$TIME(TIM);
     IF I=0
     THEN
          FIELDPTR$=ADDR(DATE);
     ELSE
          FIELDPTR$=ADDR(TIME);
     DO NN=0 TO FIELDSIZE(I)-1;
          LINE(GPOS)=FIELDPTR$->CHARS(NN);
          GPOS=GPOS+1;
        END;
     BPOS=BPOS+INSIZE(I)-1;
     RETURN;
END DTIME;
         %EJECT;
JITINFO: PROC;                          /* GET INFOMATION FROM THE JIT */
DCL SYSID CHAR(5) STATIC;
     DO CASE(I);
     CASE(2);
          FIELDPTR$=ADDR(B$JIT$->B$JIT.ACCN);
     CASE(3);
          FIELDPTR$=ADDR(B$JIT$->B$JIT.WOO);
     CASE(4);
          FIELDPTR$=ADDR(B$JIT$->B$JIT.UNAME);
     CASE(5);
          FIELDPTR$=ADDR(SYSID);
          CALL BINCHAR(SYSID,B$JIT$->B$JIT.SYSID);
     END;
     DO NN=0 TO FIELDSIZE(I)-1;
          LINE(GPOS)=FIELDPTR$->CHARS(NN);
          GPOS=GPOS+1;
        END;
     BPOS=BPOS+INSIZE(I)-1;
     RETURN;
END JITINFO;
END CHK_IN;
END FIXAWT;
         %EJECT;
FIND_CMS: PROC;                    /* FIND OUT WHERE THE COMMANDS ARE FROM */
DCL BEG SBIN STATIC INIT(0);
     IF ~FIRST
     THEN
          GOTO OK;
     IF SUBSTR(B$JIT$->B$JIT.CCBUF,B$JIT$->B$JIT.CCDISP,1)='('
     THEN
       DO;
            CALL CCBUFF;
            CALL CHK_PAIRS ALTRET(FIN);
            GOTO OK;
          END;
     DO WHILE ('1'B);
          IN_REC=' ';
          BEG=0;
RD:       CALL M$READ(USER_RD) ALTRET(FIN);
          CALL CHK_PAIRS ALTRET(RD);
          DO WHILE('0'B);
FIN:           CALL FINN;
             END;
OK:       INTEXT=-1;
          DO STR_COL=BEG TO 139;
               IF INBUFF(STR_COL)=''''
               THEN
                    INTEXT=-INTEXT;
               IF INTEXT=-1
               THEN
                 DO;
                      IF INBUFF(STR_COL)='('
                      THEN
                           GOTO LEFT_PARN;
                    END;
             END;
          GOTO AGAIN;
LEFT_PARN: DO END_COL=STR_COL+1 TO 139;
               IF INBUFF(END_COL)=''''
               THEN
                    INTEXT=-INTEXT;
               IF INTEXT=-1
               THEN
                 DO;
                      IF INBUFF(END_COL)=')'
                      THEN
                        DO;
                             BEG=END_COL+1;
                             RETURN;
                           END;
                    END;
             END;
AGAIN:  END;
         %EJECT;
CHK_PAIRS: PROC ALTRET;       /* CHEKC FOR MATCHING PAIRS OF QUOTES AND PARNS */
DCL PQUOTES SBIN ALIGNED;
DCL PPARNS SBIN ALIGNED;
     PQUOTES=1;
     PPARNS=1;
     DO I=0 TO 139;
          IF INBUFF(I)=''''
          THEN
               PQUOTES=-PQUOTES;
          IF INBUFF(I)='('
          THEN
               PPARNS=PPARNS-1;
          IF INBUFF(I)=')'
          THEN
               PPARNS=PPARNS+1;
          IF PPARNS>1
          THEN
               GOTO BADD;
        END;
     IF PQUOTES=1
     THEN
          IF PPARNS=1
          THEN
               RETURN;
BADD: OUTBUFF='MISPAIRED QUOTE OR PAREN...';
     CALL M$WRITE(USER_WT);
     ALTRETURN;
END CHK_PAIRS;
         %EJECT;
CCBUFF: PROC;                           /* SET DCB TO NO AND MOVE CCBUFF */
     CALL M$OPEN(NO);
     IN_REC=B$JIT$->B$JIT.CCBUF;
     RETURN;
END CCBUFF;
END FIND_CMS;
FINN: PROC;                             /* LETS GET OUT OF HERE */
     CALL M$CLOSE(CLOSE);
     CALL M$CLOSE(SCLOSE);
     CALL M$CLOSE(SAVE);
     CALL M$EXIT;
END FINN;
         %EJECT;
/*
         THIS IS THE MAIN DRIVER IT FINDS COMMANDS ECT...
*/
     M$SI$=DCBADDR(DCBNUM(M$SI));
     M$LM$=DCBADDR(DCBNUM(M$LM));
     FACCT.ACCT#=M$LM$->F$DCB.ACCT#;
     FIRST='1'B;
     CALL M$OPEN(SDCB);
     CALL M$OPEN(REA);
     CALL M$OPEN(SDCBS);
     CALL M$OPEN(REAS);
     DO WHILE('1'B);                    /*DO THIS FOREVER */
          CALL FIND_CMS;
          DO I=0 TO COMMAND#;
               INTEXT=-1;
               DO COL=STR_COL TO END_COL;
                    IF SUBSTR(IN_REC,COL,1)=''''
                    THEN
                         INTEXT=-INTEXT;
                    IF INTEXT=-1
                    THEN
                      DO;
                           IF SUBSTR(IN_REC,COL,SIZE(I))=COMTAB(I)
                           THEN
                                CALL CHK_DEF;
                         END;
                  END;
OK:          END;
          CALL FIXAWT;
          DO I=0 TO 13;
               PRAM_FLG(I)=0;
             END;
        END;
END ID;
