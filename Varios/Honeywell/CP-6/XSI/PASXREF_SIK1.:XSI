(*C+,T-,D-,L+,Z+*)
{*T***********************************************************    }
{*T*                                                         *    }
{*T* Copyright (c) Bull HN Information Systems Inc., 1989 }
{*T*                                                         *    }
{*T***********************************************************/   }
PROGRAM XREF
  (INPUT, OUTPUT) ;
CONST
  MAXLINES = 9999 ;
  MAXWORDLEN = 20 ;
  MAXLINELEN = 104 ;
  HEADINGSIZE = 3 ;
  ENTRYGAP = 1 ;
  NUMBERGAP = 1 ;
  RADIX = 10 ;
  BLANK = ' ' ;
  HEADING = '*' ;
TYPE
  COUNTER = 0..MAXLINES ;
  WORDINDEX = 1..MAXWORDLEN ;
  LINEINDEX = 1..MAXLINELEN ;
  WORDTYPE = PACKED ARRAY[WORDINDEX] OF CHAR ;
  QUEUEPOINTER = @QUEUEITEM ;
  QUEUEITEM =
     RECORD
        LINENUMBER : COUNTER ;
        NEXTINQUEUE : QUEUEPOINTER
     END ;
  ENTRYTYPE =
     RECORD
        WORDVALUE : WORDTYPE ;
        FIRSTINQUEUE, LASTINQUEUE : QUEUEPOINTER
     END ;
  TREEPOINTER = @NODE ;
  NODE =
     RECORD
        ENTRY : ENTRYTYPE ;
        LEFT, RIGHT : TREEPOINTER
     END ;
VAR
  WORDTREE : TREEPOINTER ;
  ENDOFLINE : BOOLEAN ;
  ENDOFFILE : BOOLEAN ;        {JLW - alternative to EOF later on}
  ALPHACHAR : SET OF CHAR;
  BEGINCHAR : SET OF CHAR ;    {JLW - choose what can begin a word}
PROCEDURE BUILDTREE (VAR TREE : TREEPOINTER) ;
VAR
  CURRENTWORD : WORDTYPE ;
  CURRENTLINE : COUNTER ;
PROCEDURE GETWORD (VAR WORD : WORDTYPE ;
                   VAR LINE : COUNTER) ;
VAR
  CURRENTCHAR : CHAR ;
  INDEX, BLANKINDEX : 0..MAXWORDLEN ;
PROCEDURE GETCHAR (VAR CH : CHAR ;
                   VAR LIN :COUNTER) ;
BEGIN (* GETCHAR *)
  IF EOF THEN BEGIN                {JLW - start the block}
               CH := BLANK ;
               ENDOFFILE := TRUE   {JLW - remember at end of file}
              END                  {JLW - end the block}
  ELSE IF EOLN
     THEN
        BEGIN
           CH := BLANK ;
           LIN := LIN + 1 ;
           ENDOFLINE := TRUE ;
           READLN
        END
     ELSE
        BEGIN
           READ (CH) ;          {JLW - equate uppercase and lowercase}
           IF CH >= 'a' THEN CH := CHR(ORD(CH) - 32) ;
           ENDOFLINE := FALSE
        END
END ; (* GETCHAR *)
BEGIN (* GETWORD *)
  CURRENTCHAR := BLANK ;
  WHILE NOT (ENDOFFILE OR
        ( CURRENTCHAR IN BEGINCHAR)) DO
     GETCHAR(CURRENTCHAR, LINE) ;
  IF NOT ENDOFFILE
     THEN
        BEGIN
           INDEX := 0 ;
           WHILE CURRENTCHAR IN ALPHACHAR DO
              BEGIN
                IF INDEX < MAXWORDLEN
                    THEN
                       BEGIN
                          INDEX := INDEX + 1 ;
                          WORD[INDEX] := CURRENTCHAR ;
                       END ;
                    IF ENDOFFILE
                       THEN CURRENTCHAR := BLANK
                       ELSE GETCHAR(CURRENTCHAR, LINE)
              END ; (* WHILE *)
           IF INDEX < MAXWORDLEN
              THEN
                 FOR BLANKINDEX := INDEX + 1 TO MAXWORDLEN DO
                    WORD[BLANKINDEX] := BLANK
        END
END ; (* GETWORD *)
PROCEDURE ENTERTREE (VAR SUBTREE : TREEPOINTER ;
                    WORD : WORDTYPE ;
                    LINE : COUNTER) ;
VAR
  NEXTITEM : QUEUEPOINTER ;
BEGIN (* ENTERTREE *)
  IF SUBTREE = NIL
     THEN
        BEGIN (* CREATE A NEW ENTRY *)
           NEW(SUBTREE) ;
           WITH SUBTREE@ DO
              BEGIN
                 LEFT := NIL ;
                 RIGHT := NIL ;
                 WITH ENTRY DO
                    BEGIN
                       WORDVALUE := WORD ;
                       NEW(FIRSTINQUEUE) ;
                       LASTINQUEUE := FIRSTINQUEUE ;
                       WITH FIRSTINQUEUE@ DO
                          BEGIN
                             IF ENDOFLINE
                                THEN LINENUMBER := LINE - 1
                                ELSE LINENUMBER := LINE ;
                             NEXTINQUEUE := NIL
                          END (* WITH FIRSTINQUEUE@ *)
                    END (* WITH ENTRY *)
              END (* WITH SUBTREE@ *)
           END
           ELSE (* APPEND A LIST ITEM *)
           WITH SUBTREE@, ENTRY DO
              IF WORD = WORDVALUE
                 THEN
                    BEGIN
                       IF LASTINQUEUE@.LINENUMBER <> LINE
                          THEN
                             BEGIN
                                NEW(NEXTITEM) ;
                                WITH NEXTITEM@ DO
                                   BEGIN
                                      IF ENDOFLINE
                                         THEN LINENUMBER := LINE - 1
                                         ELSE LINENUMBER := LINE ;
                                      NEXTINQUEUE := NIL
                                   END ; (* WITH NEXTITEM@ *)
                                LASTINQUEUE@.NEXTINQUEUE := NEXTITEM ;
                                LASTINQUEUE := NEXTITEM
                             END
                 END
           ELSE IF WORD < WORDVALUE
              THEN ENTERTREE(LEFT, WORD, LINE)
              ELSE ENTERTREE(RIGHT, WORD, LINE)
END; (* ENTERTREE *)
BEGIN (* BUILDTREE *)
  CURRENTLINE := 1;
  GETWORD(CURRENTWORD, CURRENTLINE) ;  {JLW - do preread to start}
  WHILE NOT ENDOFFILE DO
     BEGIN
       ENTERTREE(TREE, CURRENTWORD, CURRENTLINE) ;
       GETWORD(CURRENTWORD, CURRENTLINE) ; {JLW - read next word}
     END (* WHILE *)
END ; (* BUILDTREE *)
PROCEDURE PRINTTREE (TREE : TREEPOINTER) ;
  VAR
     NUMBERWIDTH, MAXONLINE : LINEINDEX ;
PROCEDURE PRINTENTRY (SUBTREE : TREEPOINTER) ;
  VAR
     INDEX : WORDINDEX ;
     ITEMCOUNT : 0..MAXLINELEN ;
     ITEMPTR : QUEUEPOINTER ;
BEGIN (* PRINTENTRY *)
  IF SUBTREE <> NIL
     THEN
     WITH SUBTREE@ DO
        BEGIN
           PRINTENTRY(LEFT) ;
           WRITELN ;
           WITH ENTRY DO
              BEGIN
                 WRITE(BLANK) ;
                 FOR INDEX := 1 TO MAXWORDLEN DO
                    WRITE(WORDVALUE[INDEX]) ;
                 ITEMCOUNT := 0 ;
                 ITEMPTR := FIRSTINQUEUE ;
                 WHILE ITEMPTR <> NIL DO
                    BEGIN
                       ITEMCOUNT := ITEMCOUNT + 1 ;
                       IF ITEMCOUNT > MAXONLINE
                          THEN
                             BEGIN
                                WRITELN ;
                                WRITE(BLANK : MAXWORDLEN + 1) ;
                                ITEMCOUNT := 1
                             END ;
                       WRITE(ITEMPTR@.LINENUMBER : NUMBERWIDTH) ;
                       ITEMPTR := ITEMPTR@.NEXTINQUEUE
                    END ; (* WHILE *)
              END ; (* WITH ENTRY *)
           PRINTENTRY(RIGHT)
        END (* WITH SUBTREE *)
END ; (* PRINTENTRY *)
BEGIN (* PRINTTREE *)
  NUMBERWIDTH := TRUNC(LN(MAXLINES)/LN(RADIX)) + 1 + NUMBERGAP ;
  MAXONLINE := (MAXLINELEN - MAXWORDLEN) DIV NUMBERWIDTH ;
  PRINTENTRY(TREE)
END ; (* PRINTTREE *)
BEGIN (* XREF *)
  ALPHACHAR :=['0'..'9','A'..'Z','_','-'];
  ENDOFFILE := FALSE ;        {JLW - initialize end of file indicator}
  BEGINCHAR := ['A'..'Z','0'..'9'];  {JLW - choose what starts a word}
  WORDTREE := NIL ;
  BUILDTREE(WORDTREE) ;
  PRINTTREE(WORDTREE)
END.  (* XREF *)
