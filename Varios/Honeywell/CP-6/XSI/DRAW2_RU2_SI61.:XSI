/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
DRAW2: PROC MAIN;
%INCLUDE B$TABLES_C;
  %B$SR_NON_BLANK;
%INCLUDE CP_6;
  %B$ALT;
  %B$TCB;
%INCLUDE B$JIT;
%FPT_OPEN(FPTN=OPEN_LO,
          DCB=M$LO,
          ORG=KEYED,
          ACS=DIRECT,
          FUN=CREATE);
%FPT_OPEN(FPTN=OPEN_SI,
          DCB=M$SI,
          FUN=IN);
%FPT_READ(FPTN=READ_SI,
          BUF=IOBUF,
          DCB=M$SI);
%FPT_WRITE(FPTN=WRITE_SI,
           BUF=IOBUF,
           DCB=M$DO);
%FPT_WRITE(FPTN=WRITE_DO,
           BUF=DOBUF,
           DCB=M$DO);
%FPT_WRITE(FPTN=WRITE_LO,
           DCB=M$LO,
           KEY=LOKEY,
           BUF=LOBUF);
%FPT_CLOSE(FPTN=CLOSE_LO,
           DISP=SAVE,
           RELG=YES,
           DCB=M$LO);
%FPT_ERRMSG(FPTN=ERRMSG,
            BUF=LOBUF,
            CODE=ERRCODE,
            OUTDCB1=M$LO);
%VLP_ERRCODE(FPTN=ERRCODE,STCLASS=STATIC);
%FPT_GDS(FPTN=TXT_GDS,
         FREE=YES,
         SEGSIZE=1024,
         RESULTS=TXT_VLP);
%VLP_VECTOR(FPTN=TXT_VLP,
            SEGID='6006'O);
%FPT_GDS(FPTN=EQT_GDS,
         FREE=YES,
         SEGSIZE=1024,
         RESULTS=EQT_VLP);
%VLP_VECTOR(FPTN=EQT_VLP,
            SEGID='6007'O);
%FPT_GDS(FPTN=KWD_GDS,
         FREE=YES,
         SEGSIZE=1024,
         RESULTS=KWD_VLP);
%VLP_VECTOR(FPTN=KWD_VLP,
            SEGID='6010'O);
%FPT_GDS(FPTN=OPT_GDS,
         FREE=YES,
         SEGSIZE=1024,
         RESULTS=OPT_VLP);
%VLP_VECTOR(FPTN=OPT_VLP,
            SEGID='6011'O);
%FPT_GDS(FPTN=SYM_GDS,
         FREE=YES,
         SEGSIZE=1024,
         RESULTS=SYM_VLP);
%VLP_VECTOR(FPTN=SYM_VLP,
            SEGID='6012'O);
%F$DCB(DCBN=DUMMY);
 
    DCL M$SI                    DCB;
    DCL M$LO                    DCB;
    DCL M$DO                    DCB;
    DCL LOBUF STATIC            CHAR(132);
    DCL IOBUF STATIC            CHAR(256);
    DCL SIBUF BASED(SIPTR)      CHAR(ARS);
    DCL DOBUF                   CHAR(80) STATIC;
    DCL AWORD                   CHAR(256);
 
    DCL SIPTR STATIC            PTR INIT(ADDR(IOBUF));
    DCL TXTPTR                  PTR;
    DCL EQTPTR                  PTR;
    DCL KWDPTR                  PTR;
    DCL OPTPTR                  PTR;
    DCL SYMPTR                  PTR;
    DCL P                       PTR;
    DCL B$JIT$ SYMREF           PTR;
    DCL B$TCB$ SYMREF           PTR;
    DCL ARS                     SBIN;
    DCL WDTYPE                  SBIN;
    DCL WDLEN                   SBIN;
    DCL CURSOR                  SBIN;
    DCL RESWDIDX                SBIN;
    DCL CURLOC                  SBIN;
    DCL OLDLVL                  SBIN;
    DCL DELTA                   SBIN;
    DCL WDSTXT                  SBIN;
    DCL TOTTXT                  SBIN;
    DCL WDSEQT                  SBIN;
    DCL TOTEQT                  SBIN;
    DCL WDSKWD                  SBIN;
    DCL TOTKWD                  SBIN;
    DCL WDSOPT                  SBIN;
    DCL TOTOPT                  SBIN;
    DCL WDSSYM                  SBIN;
    DCL TOTSYM                  SBIN;
    DCL EQTCNT                  SBIN;
    DCL I                       SBIN;
    DCL J                       SBIN;
    DCL K                       SBIN;
    DCL L                       SBIN;
    DCL SLENI                   SBIN;
    DCL START                   UBIN;
    DCL NLINES                  UBIN;
    DCL LINCNT                  UBIN;
    DCL FIGSTRT                 UBIN;
    DCL SILINE                  UBIN;
    DCL STOPCH                  CHAR(2);
    DCL WK1                     CHAR(4);
    DCL WK2                     CHAR(4);
    DCL PRTCHR                  CHAR(40);
    DCL KWDBUF                  CHAR(51);
    DCL VARYING                 BIT(1);
    DCL LAST_FLAG               BIT(1);
    DCL TRFDOT                  BIT(1);
    DCL EOF                     BIT(1);
 
    DCL DCLLVL                  SBIN;
    DCL DCLNML                  SBIN;
    DCL DCLNAM                  CHAR(30);
    DCL DCLLEN                  SBIN;
    DCL DCLALN                  SBIN;
    DCL DCLTYP                  SBIN;
    DCL DCLOCC                  SBIN;
    DCL DCLSTC                  SBIN;
    DCL DCLKWD                  PTR;
    DCL DCLRDF                  CHAR(30);
    DCL DCLINT                  BIT(1);
    DCL DCLMAC                  BIT(1);
 
    DCL LIN_HOST CONSTANT       CHAR(102) INIT
        ('      |         |         |         |         |');
    DCL LIN_FEP CONSTANT        CHAR(102) INIT
        ('      |        |        |');
 
    DCL ZZZ_HOST CONSTANT       CHAR(102) INIT
        ('      Z         Z         Z         Z         Z');
    DCL ZZZ_FEP CONSTANT        CHAR(102) INIT
        ('      Z        Z        Z');
 
%EQU TYP#EPTR=1;
%EQU TYP#PTR=2;
%EQU TYP#CHAR=3;
%EQU TYP#BIT=4;
%EQU TYP#SBIN=5;
%EQU TYP#UBIN=6;
%EQU TYP#VECTOR=7;
%EQU TYP#REMEMBER=8;
%EQU TYP#DSCR=9;    /* HOST ONLY */
%EQU TYP#CPTR=10;   /* FEP ONLY */
    DCL CHR_HOST(0:15) CONSTANT CHAR(40) INIT
        ('421421421 421421421 421421421 421421421',
         'eeeeeeeee eeeeeeeee eeeeeeeee eeeeeeeee',
         'ppppppppp ppppppppp ppppppppp ppppppppp',
         'ccccccccc ccccccccc ccccccccc ccccccccc',
         'bbbbbbbbb bbbbbbbbb bbbbbbbbb bbbbbbbbb',
         'sssssssss sssssssss sssssssss sssssssss',
         'uuuuuuuuu uuuuuuuuu uuuuuuuuu uuuuuuuuu',
         'vvvvvvvvv vvvvvvvvv vvvvvvvvv vvvvvvvvv',
         'rrrrrrrrr rrrrrrrrr rrrrrrrrr rrrrrrrrr',
         'ddddddddd ddddddddd ddddddddd ddddddddd',
         '????????? ????????? ????????? ?????????');
    DCL CHR_FEP(0:15) CONSTANT  CHAR(40) INIT
        ('84218421 84218421',
         'eeeeeeee eeeeeeee',
         'pppppppp pppppppp',
         'cccccccc cccccccc',
         'bbbbbbbb bbbbbbbb',
         'ssssssss ssssssss',
         'uuuuuuuu uuuuuuuu',
         'vvvvvvvv vvvvvvvv',
         'rrrrrrrr rrrrrrrr',
         '???????? ????????',
         'tttttttt tttttttt');
 
    DCL C$                      PTR;
    DCL 1 C BASED(C$),
          2 NB_CHR              UBIN,
          2 NB_WD               UBIN,
          2 NB_DALGN            UBIN,
          2 FEP                 BIT(1),
          2 COL1                UBIN,
          2 LEN1                UBIN,
          2 COL2                UBIN,
          2 LEN2                UBIN,
          2 COLV                UBIN,
          2 BASE                UBIN,
          2 NB_VCTR             UBIN,
          2 NB_SCRMODE          UBIN,
          2 NB_HWD              UBIN,
          2 NB_DWD              UBIN,
          2 NB_ZZZ              UBIN,
          2 NB_XXXX             UBIN,
          2 NB_PTR              UBIN;
    DCL 1 C_HOST CONSTANT,
          2 NB_CHR              UBIN INIT(9),
          2 NB_WD               UBIN INIT(36),
          2 NB_DALGN            UBIN INIT(72),
          2 FEP                 BIT(1) INIT('0'B),
          2 COL1                UBIN INIT(48),
          2 LEN1                UBIN INIT(48),
          2 COL2                UBIN INIT(67),
          2 LEN2                UBIN INIT(29),
          2 COLV                UBIN INIT(70),
          2 BASE                UBIN INIT(8),
          2 NB_VCTR             UBIN INIT(72),
          2 NB_SCRMODE          UBIN INIT(18),
          2 NB_HWD              UBIN INIT(18),
          2 NB_DWD              UBIN INIT(72),
          2 NB_ZZZ              UBIN INIT(180),
          2 NB_XXXX             UBIN INIT(18432),
          2 NB_PTR              UBIN INIT(36);
    DCL 1 C_FEP CONSTANT,
          2 NB_CHR              UBIN INIT(8),
          2 NB_WD               UBIN INIT(16),
          2 NB_DALGN            UBIN INIT(16),
          2 FEP                 BIT(1) INIT('1'B),
          2 COL1                UBIN INIT(26),
          2 LEN1                UBIN INIT(52),
          2 COL2                UBIN INIT(44),
          2 LEN2                UBIN INIT(28),
          2 COLV                UBIN INIT(48),
          2 BASE                UBIN INIT(16),
          2 NB_VCTR             UBIN INIT(48),
          2 NB_SCRMODE          UBIN INIT(16),
          2 NB_HALF             UBIN INIT(8),
          2 NB_DWD              UBIN INIT(32),
          2 NB_ZZZ              UBIN INIT(80),
          2 NB_XXXX             UBIN INIT(1048576),
          2 NB_PTR              UBIN INIT(32);
 
    DCL 1 LOC,
          2 INT                 CHAR(5),
          2 BYT                 CHAR(1),
          2 NIB                 CHAR(1);
 
    DCL 1 S(0:0) BASED(SYMPTR),
          2 LVL UNAL            SBIN BYTE,
          2 NML UNAL            SBIN BYTE,
          2 NAM UNAL            CHAR(30),
          2 LEN UNAL            SBIN(27),
          2 ALN UNAL            SBIN BYTE,
          2 LOC UNAL            SBIN(27),
          2 TYP UNAL            SBIN BYTE,
          2 OCC UNAL            SBIN HALF,
          2 SUP UNAL            SBIN BYTE,
          2 FIL UNAL            SBIN BYTE,
          2 EQT                 PTR,
          2 TXT                 PTR;
 
    DCL 1 DCLTXT BASED(TXTPTR),
          2 L UNAL              UBIN HALF,
          2 C UNAL              CHAR(DCLTXT.L);
 
    DCL 1 DCLEQT BASED(EQTPTR),
          2 NEXT                PTR,
          2 L UNAL              UBIN BYTE,
          2 C UNAL              CHAR(DCLEQT.L);
 
    DCL 1 LOKEY STATIC,
          2 L UNAL              UBIN BYTE INIT(3),
          2 N UNAL              UBIN(27) INIT(1000);
 
    DCL 1 M,
          2 L UNAL              UBIN BYTE,
          2 C UNAL              CHAR(31),
          2 HEAD                PTR;
 
    DCL 1 OPT BASED(OPTPTR),
          2 L UNAL              UBIN BYTE,
          2 C UNAL              CHAR(30),
          2 NVAL UNAL           UBIN BYTE,
          2 NEXT                PTR,
          2 VAL                 CHAR(OPT.NVAL);
 
    DCL 1 KWD BASED(KWDPTR),
          2 L UNAL              UBIN BYTE,
          2 C UNAL              CHAR(30),
          2 NOPTS UNAL          UBIN BYTE,
          2 REF                 SBIN,
          2 NEXT                PTR,
          2 OPTH                PTR,
          2 DLEN UNAL           UBIN BYTE,
          2 DFLT UNAL           CHAR(KWD.DLEN);
 
    DCL LAST                    SBIN;
 
    DCL LVLPTR(0:10)            SBIN;
 
%EQU NULTYP=0;
%EQU SYMBOL=1;
%EQU NUMBER=2;
%EQU PREPROC=3;
%EQU DQSTRG=4;
%EQU SQSTRG=5;
%EQU BTSTRG=6;
%EQU OCSTRG=7;
%EQU HXSTRG=8;
%EQU RESWORD=9;
%EQU SYNTAX=10;
%EQU TOOLONG=11;
%EQU UNXEOF=12;
%EQU EOF=20;
 
%EJECT;
    C$=ADDR(C_HOST);
    IF B$JIT.CCDISP<B$JIT.CCARS THEN
        IF SUBSTR(B$JIT.CCBUF,B$JIT.CCDISP,B$JIT.CCARS-B$JIT.CCDISP)='(FEP'
        OR SUBSTR(B$JIT.CCBUF,B$JIT.CCDISP,B$JIT.CCARS-B$JIT.CCDISP)='(FEP)'
        OR SUBSTR(B$JIT.CCBUF,B$JIT.CCDISP,B$JIT.CCARS-B$JIT.CCDISP)='(fep'
        OR SUBSTR(B$JIT.CCBUF,B$JIT.CCDISP,B$JIT.CCARS-B$JIT.CCDISP)='(fep)' THEN
        C$=ADDR(C_FEP);
 
    CALL M$GDS(TXT_GDS) ALTRET(EOJ);
    TOTTXT=1024;
    CALL M$GDS(EQT_GDS) ALTRET(EOJ);
    TOTEQT=1024;
    CALL M$GDS(SYM_GDS) ALTRET(EOJ);
    TOTSYM=1024;
    SYMPTR=SYM_VLP.PTR$;
    EQTPTR=EQT_VLP.PTR$;
    EQTCNT=0;
    TOTOPT=0;
    TOTKWD=0;
    SILINE=0;
    EOF='0'B;
    CALL M$OPEN(OPEN_LO);
    CALL M$OPEN(OPEN_SI)  WHENALTRETURN DO;
       ERRCODE= B$TCB$->B$TCB.ALT$->B$ALT.ERR;
       ERRMSG.V.DCB#= B$TCB$->B$TCB.ALT$->B$ALT.DCB#;
       CALL M$ERRMSG(ERRMSG);
       CALL M$EXIT;
       END;
    LOBUF='.SRV OLDWIDOW %Widow%';
    CALL L$WRITE;
    LOBUF='.WIT 0';
    CALL L$WRITE;
 
READAGIN:
    DCLMAC='0'B;
    ARS=0;
    CURSOR=0;
    WDSOPT=TOTOPT;
    WDSKWD=TOTKWD;
    WDSEQT=TOTEQT;
    WDSTXT=TOTTXT;
    WDSSYM=TOTSYM;
    CURLOC=0;
    OLDLVL=0;
    DCLLVL=0;
    DCLNML=0;
    LAST=-1;
    M.L=0;
    M.HEAD=ADDR(NIL);
 
    DO WHILE('1'B);
        CALL GETAWORD ALTRET(EOJ);
 
%EJECT;
        IF AWORD='%MACRO' THEN DO;
            DCLMAC='1'B;
            KWDPTR=KWD_VLP.PTR$;
            OPTPTR=OPT_VLP.PTR$;
            CALL GETAWORD ALTRET(BADMAC);
            IF WDTYPE=%NULTYP THEN
                GOTO BADMAC;
            M.L=WDLEN;
            M.C=AWORD;
            M.HEAD=ADDR(NIL);
            IF AWORD='CP6$ENTS' THEN DO;
                DO WHILE(AWORD~='%MEND');
                    CALL GETAWORD ALTRET(BADMAC);
                END;
                GOTO READAGIN;
            END;
            IF STOPCH=';' THEN
                GOTO ENDMAC;
            IF STOPCH~='(' THEN
                GOTO BADMAC;
 
NXTKWD:
            CALL GETAWORD ALTRET(BADMAC);
            IF WDTYPE=%NULTYP THEN
                GOTO BADMAC;
            IF WDSKWD<139 THEN DO;
                CALL M$GDS(KWD_GDS) ALTRET(BADMAC);
                WDSKWD=WDSKWD+1024;
                TOTKWD=TOTKWD+1024;
            END;
            KWD.L=WDLEN;
            KWD.C=AWORD;
            KWD.NOPTS=0;
            KWD.REF=-1;
            KWD.OPTH=ADDR(NIL);
            KWD.NEXT=ADDR(NIL);
            P=M.HEAD;
            IF P=ADDR(NIL) THEN
                M.HEAD=KWDPTR;
            ELSE IF P->KWD.C>=AWORD THEN DO;
                KWD.NEXT=M.HEAD;
                M.HEAD=KWDPTR;
            END;
            ELSE DO;
                DO WHILE(P->KWD.NEXT~=ADDR(NIL) AND
                    P->KWD.NEXT->KWD.C<AWORD);
                    P=P->KWD.NEXT;
                END;
                KWD.NEXT=P->KWD.NEXT;
                P->KWD.NEXT=KWDPTR;
            END;
            IF STOPCH='=' THEN
                GOTO ENDKWD;
            IF STOPCH~='(' THEN
                GOTO BADMAC;
 
NXTOPT:
            CALL GETAWORD ALTRET(BADMAC);
            IF WDTYPE=%NULTYP THEN
                GOTO BADMAC;
            IF WDSOPT<137 THEN DO;
                CALL M$GDS(OPT_GDS) ALTRET(BADMAC);
                WDSOPT=WDSOPT+1024;
                TOTOPT=TOTOPT+1024;
            END;
            OPT.L=WDLEN;
            OPT.C=AWORD;
            OPT.NEXT=ADDR(NIL);
            OPT.NVAL=0;
            P=KWD.OPTH;
            IF P=ADDR(NIL) THEN
                KWD.OPTH=OPTPTR;
            ELSE IF P->OPT.C>=AWORD THEN DO;
                OPT.NEXT=KWD.OPTH;
                KWD.OPTH=OPTPTR;
            END;
            ELSE DO;
                DO WHILE(P->OPT.NEXT~=ADDR(NIL) AND
                    P->OPT.NEXT->OPT.C<AWORD);
                    P=P->OPT.NEXT;
                END;
                OPT.NEXT=P->OPT.NEXT;
                P->OPT.NEXT=OPTPTR;
            END;
            IF AWORD='ANY' AND STOPCH~='=' THEN
                GOTO ENDOPT;
            IF STOPCH~='=' THEN
                GOTO BADMAC;
            CALL GETAWORD ALTRET(BADMAC);
            OPT.NVAL=WDLEN;
            OPT.VAL=AWORD;
            DO WHILE(STOPCH~=',' AND STOPCH~=')');
                I=OPT.NVAL;
                IF SUBSTR(STOPCH,1,1)=' ' THEN
                    OPT.NVAL=OPT.NVAL+1;
                ELSE
                    OPT.NVAL=OPT.NVAL+2;
                CALL INSERT(OPT.VAL,I,OPT.NVAL-I,STOPCH);
                CALL GETAWORD ALTRET(BADMAC);
                I=OPT.NVAL;
                OPT.NVAL=OPT.NVAL+WDLEN;
                CALL INSERT(OPT.VAL,I,OPT.NVAL-I,AWORD);
            END;
 
ENDOPT:
            I=(OPT.NVAL+39)/4;
            OPTPTR=PINCRW(OPTPTR,I);
            WDSOPT=WDSOPT-I;
            IF STOPCH=',' THEN
                GOTO NXTOPT;
            IF STOPCH~=')' THEN
                GOTO BADMAC;
            CALL GETAWORD ALTRET(BADMAC);
            IF WDTYPE~=%NULTYP OR STOPCH~='=' THEN
                GOTO BADMAC;
 
ENDKWD:
            CALL GETAWORD ALTRET(BADMAC);
            KWD.DLEN=WDLEN;
            KWD.DFLT=AWORD;
            DO WHILE(STOPCH~=',' AND STOPCH~=')');
                I=KWD.DLEN;
                IF SUBSTR(STOPCH,1,1)=' ' THEN
                    KWD.DLEN=KWD.DLEN+1;
                ELSE
                    KWD.DLEN=KWD.DLEN+2;
                CALL INSERT(KWD.DFLT,I,KWD.DLEN-I,STOPCH);
                CALL GETAWORD ALTRET(BADMAC);
                I=KWD.DLEN;
                KWD.DLEN=KWD.DLEN+WDLEN;
                CALL INSERT(KWD.DFLT,I,KWD.DLEN-I,AWORD);
            END;
            I=(KWD.DLEN+48)/4;
            KWDPTR=PINCRW(KWDPTR,I);
            WDSKWD=WDSKWD-I;
            IF STOPCH=',' THEN
                GOTO NXTKWD;
            IF STOPCH~=')' THEN
                GOTO BADMAC;
            CALL GETAWORD ALTRET(BADMAC);
            IF WDTYPE~=%NULTYP OR STOPCH~=';' THEN
                GOTO BADMAC;
 
ENDMAC:
            CALL GETAWORD ALTRET(BADMAC);
            IF AWORD='%MEND' THEN
                GOTO READAGIN;
            IF SUBSTR(AWORD,0,1)='%' THEN DO;
                DO WHILE(STOPCH~=';');
                    CALL GETAWORD ALTRET(BADMAC);
                END;
                GOTO ENDMAC;
            END;
        END;
 
%EJECT;
        IF AWORD='DCL' OR (STOPCH=' ' AND WDLEN=1 AND AWORD>='1' AND
            AWORD<='9') THEN DO;
            TXTPTR=TXT_VLP.PTR$;
            CURLOC=0;
            DCLTYP=0;
            DCLLVL=0;
            LVLPTR(0)=999999;
            LVLPTR(1)=-1;
            LVLPTR(2)=-1;
            LVLPTR(3)=-1;
            LVLPTR(4)=-1;
            LVLPTR(5)=-1;
            LVLPTR(6)=-1;
            LVLPTR(7)=-1;
            LVLPTR(8)=-1;
            LVLPTR(9)=-1;
            LVLPTR(10)=-1;
            DO WHILE(DCLLVL>=0);
                CALL GETDCL ALTRET(BADDCL);
                IF DCLLVL>0 THEN DO;
                    DCLTXT.L=DCLTXT.L+1;
                    CALL INSERT(DCLTXT.C,DCLTXT.L-1,1,STOPCH);
                    IF DCLALN<2 AND DCLTYP=%TYP#CHAR THEN
                        DCLALN=C.NB_CHR;
                    IF DCLALN=0 THEN
                        IF DCLTYP=%TYP#BIT THEN
                            DCLALN=1;
                        ELSE IF DCLTYP=%TYP#CHAR THEN
                            DCLALN=C.NB_CHR;
                        ELSE IF DCLTYP=%TYP#VECTOR OR DCLTYP=%TYP#REMEMBER OR DCLTYP=%TYP#DSCR THEN
                            DCLALN=C.NB_DALGN;
                        ELSE IF DCLTYP~=0 THEN
                            DCLALN=C.NB_WD;
                    IF WDSSYM<SIZEW(S)*2 THEN DO;
                        CALL M$GDS(SYM_GDS) ALTRET(BADDCL);
                        WDSSYM=WDSSYM+1024;
                        TOTSYM=TOTSYM+1024;
                    END;
                    WDSSYM=WDSSYM-SIZEW(S);
                    LAST=LAST+1;
                    S.LVL(LAST)=DCLLVL;
                    S.NML(LAST)=DCLNML;
                    S.NAM(LAST)=DCLNAM;
                    S.LEN(LAST)=DCLLEN;
                    S.ALN(LAST)=DCLALN;
                    S.TYP(LAST)=DCLTYP;
                    S.OCC(LAST)=DCLOCC;
                    S.SUP(LAST)=0;
                    S.FIL(LAST)=0;
                    S.TXT(LAST)=TXTPTR;
                    S.EQT(LAST)=ADDR(NIL);
                    I=(DCLTXT.L+5)/4;
                    WDSTXT=WDSTXT-I;
                    TXTPTR=PINCRW(TXTPTR,I);
                END;
                IF OLDLVL<=DCLLVL THEN DO;
                    DO I=1 TO DCLLVL-1;
                        IF LVLPTR(I)>=0 AND S.ALN(LVLPTR(I))<DCLALN THEN DO;
                            S.ALN(LVLPTR(I))=DCLALN;
                            DELTA=S.LOC(LVLPTR(I));
                            IF DCLALN>1 THEN
                                IF MOD(DELTA,DCLALN)>0 THEN DO;
                                DELTA=DCLALN-MOD(DELTA,DCLALN);
                                CURLOC=CURLOC+DELTA;
                                J=LVLPTR(I)-1;
                                S.FIL(J)=S.FIL(J)+DELTA;
                                DO J=J+1 TO LAST-1;
                                    S.LOC(J)=S.LOC(J)+DELTA;
                                END;
                            END;
                        END;
                    END;
                END;
                IF OLDLVL>=DCLLVL THEN DO;
                    I=OLDLVL;
                    DO WHILE(I>0 AND I>=DCLLVL AND LVLPTR(I)>=0);
                        DELTA=S.ALN(LVLPTR(I));
                        IF DELTA>1 THEN
                            IF MOD(CURLOC,DELTA)>0 THEN DO;
                            DELTA=DELTA-MOD(CURLOC,DELTA);
                            CURLOC=CURLOC+DELTA;
                            S.SUP(LVLPTR(I))=S.SUP(LVLPTR(I))+DELTA;
                        END;
                        IF S.OCC(LVLPTR(I))>0 THEN
                            CURLOC=CURLOC+(S.OCC(LVLPTR(I))-1)*
                                (CURLOC-S.LOC(LVLPTR(I)));
                        I=I-1;
                    END;
                END;
                OLDLVL=DCLLVL;
                IF DCLLVL>0 THEN DO;
                    IF DCLRDF~=' ' AND LVLPTR(DCLLVL)>=0 THEN
                        CURLOC=S.LOC(LVLPTR(DCLLVL));
                    IF DCLALN>1 THEN
                        IF MOD(CURLOC,DCLALN)>0 THEN DO;
                        DELTA=DCLALN-MOD(CURLOC,DCLALN);
                        S.FIL(LAST-1)=S.FIL(LAST-1)+DELTA;
                        CURLOC=CURLOC+DELTA;
                    END;
                    S.LOC(LAST)=CURLOC;
                    IF DCLKWD~=ADDR(NIL) THEN
                        DCLKWD->KWD.REF=CURLOC;
                    IF DCLLEN>=0 THEN
                        CURLOC=CURLOC+DCLLEN;
                    ELSE
                        CURLOC=CURLOC-DCLLEN;
                    LVLPTR(DCLLVL)=LAST;
                END;
            END;
            S.LVL(LAST+1)=0;
            S.LOC(LAST+1)=CURLOC;
            IF LAST_FLAG THEN
                SUBSTR(S.TXT(LAST)->DCLTXT.C,S.TXT(LAST)->DCLTXT.L-1,1)=';';
 
%EJECT;
            IF M.L=0 THEN DO;
                M.L=S.NML(0);
                M.C=S.NAM(0);
            END;
 
DOIT:
            LOBUF='.BRN 15';
            CALL L$WRITE;
            START=LOKEY.N;
            LOKEY.N=LOKEY.N+1000;
            LOBUF='.ALC';
            CALL L$WRITE;
            LOBUF=SUBSTR(M.C,0,M.L);
            CALL L$WRITE;
            TRFDOT='0'B;
            IF CURLOC>=C.NB_XXXX
            THEN DO;
                LOBUF='.TRF [.';
                CALL L$WRITE;
                TRFDOT='1'B;
            END;
            LOBUF='.SPB 1';
            CALL L$WRITE;
            LOBUF='.ALL';
            CALL L$WRITE;
            NLINES=2;
            IF WDSKWD~=TOTKWD THEN DO;
                LINCNT=1;
                KWDPTR=M.HEAD;
                DO WHILE(KWDPTR~=ADDR(NIL));
                    KWDBUF=' ';
                    IF KWD.REF<0 THEN
                        CALL INSERT(KWDBUF,1,8,'   .....');
                    ELSE DO;
                        CALL CVT(KWD.REF,LOC);
                        CALL INSERT(KWDBUF,0,9,LOC.INT,'-',LOC.BYT,
                            '-',LOC.NIB);
                    END;
                    CALL INSERT(KWDBUF,10,,SUBSTR(KWD.C,0,KWD.L),'=');
                    J=KWD.L+11;
                    I=0;
                    DO WHILE(KWD.DLEN-I>37-J);
                        CALL INSERT(KWDBUF,J,37-J,SUBSTR(KWD.DFLT,I,
                            37-J));
                        LOBUF=KWDBUF;
                        CALL L$WRITE;
                        LINCNT=LINCNT+1;
                        KWDBUF=' ';
                        I=I+37-J;
                        J=10;
                    END;
                    CALL INSERT(KWDBUF,J,KWD.DLEN-I,SUBSTR(KWD.DFLT,
                        I,KWD.DLEN-I));
                    LOBUF=KWDBUF;
                    CALL L$WRITE;
                    LINCNT=LINCNT+1;
                    OPTPTR=KWD.OPTH;
                    DO WHILE(OPTPTR~=ADDR(NIL));
                        KWDBUF=' ';
                        CALL INSERT(KWDBUF,12,OPT.L,SUBSTR(OPT.C,0,OPT.L));
                        IF OPT.NVAL>0 THEN DO;
                            J=OPT.L+12;
                            CALL INSERT(KWDBUF,J,1,'=');
                            J=J+1;
                            I=0;
                            DO WHILE(OPT.NVAL-I>37-J);
                                K=36-J+I;
                                DO WHILE(K>I AND SUBSTR(OPT.VAL,K,1)~=
                                    ' ' AND SUBSTR(OPT.VAL,K,1)~=',');
                                    K=K-1;
                                END;
                                IF K<=I THEN
                                    K=36-J+I;
                                K=K+1;
                                CALL INSERT(KWDBUF,J,K-I,SUBSTR(OPT.VAL,
                                    I,K-I));
                                LOBUF=KWDBUF;
                                CALL L$WRITE;
                                LINCNT=LINCNT+1;
                                KWDBUF=' ';
                                I=K;
                                J=14;
                            END;
                            CALL INSERT(KWDBUF,J,OPT.NVAL-I,SUBSTR
                                (OPT.VAL,I,OPT.NVAL-I));
                        END;
                        LOBUF=KWDBUF;
                        CALL L$WRITE;
                        LINCNT=LINCNT+1;
                        OPTPTR=OPT.NEXT;
                    END;
                    KWDPTR=KWD.NEXT;
                END;
                LOBUF='.SPF 1';
                CALL L$WRITE;
                LOBUF='.BRN 5';
                CALL L$WRITE;
                NLINES=NLINES+LINCNT;
            END;
 
%EJECT;
            IF EQTCNT>0 THEN DO;
                LOBUF='.SPF 1';
                CALL L$WRITE;
                LOBUF='.ALC';
                CALL L$WRITE;
                LOBUF='%EQUs and %SUBs';
                CALL L$WRITE;
                LOBUF='.ALL';
                CALL L$WRITE;
                LOBUF='.SPF 1';
                CALL L$WRITE;
                LINCNT=1;
                DO I=0 TO LAST;
                    LVLPTR(S.LVL(I))=I;
                    IF S.EQT(I)~=ADDR(NIL) THEN DO;
                            LOBUF='.SPF 1';
                            CALL L$WRITE;
                            LINCNT=LINCNT+1;
                        LOBUF='--> ';
                        K=4;
                        DO J=1 TO S.LVL(I)-1;
                            L=LVLPTR(J);
                            CALL INSERT(LOBUF,K,S.NML(L)+1,SUBSTR(S.NAM(L),
                                0,S.NML(L)),'.');
                            K=K+S.NML(L)+1;
                        END;
                        CALL INSERT(LOBUF,K,S.NML(I)+4,SUBSTR(S.NAM(I),
                            0,S.NML(I)),' <--');
                        CALL L$WRITE;
                        LINCNT=LINCNT+1;
                        EQTPTR=S.EQT(I);
                        DO WHILE(EQTPTR~=ADDR(NIL));
                            LOBUF=DCLEQT.C;
                            CALL L$WRITE;
                            LINCNT=LINCNT+1;
                            EQTPTR=DCLEQT.NEXT;
                        END;
                    END;
                END;
                LOBUF='.SPF 1';
                CALL L$WRITE;
                LOBUF='.BRN 5';
                CALL L$WRITE;
                NLINES=NLINES+LINCNT+3;
            END;
 
%EJECT;
            IF LAST>=0 THEN DO;
                FIGSTRT=LOKEY.N;
                IF C.FEP THEN
                    LOBUF='       01234567 01234567';
                ELSE
                    LOBUF='       012345678 012345678 012345678 012345678';
                CALL L$WRITE;
                IF C.FEP THEN
                    LOBUF='      +--------+--------+ DCL';
                ELSE
                    LOBUF='      +---------+---------+---------+---------+ DCL';
                CALL L$WRITE;
                NLINES=NLINES+2;
                OLDLVL=0;
                VARYING='0'B;
                LVLPTR(0)=999999;
                LVLPTR(1)=-1;
                LVLPTR(2)=-1;
                LVLPTR(3)=-1;
                LVLPTR(4)=-1;
                LVLPTR(5)=-1;
                LVLPTR(6)=-1;
                LVLPTR(7)=-1;
                LVLPTR(8)=-1;
                LVLPTR(9)=-1;
                LVLPTR(10)=-1;
                I=0;
                DO WHILE(I<=LAST);
                    DCLLVL=S.LVL(I);
                    CURLOC=S.LOC(I);
                    IF C.FEP THEN
                        LOBUF=LIN_FEP;
                    ELSE
                        LOBUF=LIN_HOST;
                    CALL CVT(CURLOC,LOC);
                    CALL INSERT(LOBUF,0,5,LOC.INT);
                    TXTPTR=S.TXT(I);
                    J=0;
/*
Layout of the text portion of the output line is:
 
    COL1                        COL2
    |<--------------------------+------- LEN1 ---------------------->|
    |                           |<------ LEN2 ---------------------->|
    V                           V                                    V
    DCL
    1 FPTN STCLASS DALIGNED,
      2 V_                      BIT(72) INIT(VECTOR(FPTN.V)),
      2 NAME_                   BIT(72) INIT(VECTOR(NAME)),
*/
%EQU    M1  =   48;
%EQU    L1  =   48;
%EQU    M2  =   67;
%EQU    L2  =   29;
 
PRTLVL:     /* INSERT TEXT STARTING AT MARGIN 1 (M1) */
                    CALL INDEX1(K,BINASC(7),DCLTXT.C,J);
                    IF K-J>C.LEN1 THEN DO;
                        K=J+C.LEN1-1;
                        DO WHILE(SUBSTR(DCLTXT.C,K,1)~=' ' AND K>J);
                            K=K-1;
                        END;
                        IF K<=J THEN
                            K=J+C.LEN1;
                        ELSE
                            K=K+1;
                        CALL INSERT(LOBUF,C.COL1,K-J,SUBSTR(DCLTXT.C,J,K-J));
                        CALL PREPRNT;
                        CALL INSERT(LOBUF,C.COL1,C.LEN1,' ');
                        J=K;
                        GOTO PRTLVL;
                    END;
                    CALL INSERT(LOBUF,C.COL1,K-J,SUBSTR(DCLTXT.C,J,K-J));
                    J=K+1;
                    IF J>=DCLTXT.L THEN
                        GOTO PRTLEN;
                    IF SUBSTR(LOBUF,C.COL2-1,C.LEN2+1)~=' ' THEN DO;
                        CALL PREPRNT;
                        CALL INSERT(LOBUF,C.COL1,C.LEN1,' ');
                    END;
 
PRTVAL:     /* INSERT TEXT STARTING AT MARGIN 2 (M2) */
                    K=DCLTXT.L;
                    IF K-J>C.LEN2 THEN DO;
                        K=J+C.LEN2-1;
                        DO WHILE(SUBSTR(DCLTXT.C,K,1)~=' ' AND
                            SUBSTR(DCLTXT.C,K,1)~=',' AND K>J);
                            K=K-1;
                        END;
                        IF K<=J THEN
                            K=J+C.LEN2;
                        ELSE
                            K=K+1;
                        CALL INSERT(LOBUF,C.COL2,K-J,SUBSTR(DCLTXT.C,J,K-J));
                        CALL PREPRNT;
                        CALL INSERT(LOBUF,C.COL1,C.LEN1,' ');
                        J=K;
                        GOTO PRTVAL;
                    END;
                    CALL INSERT(LOBUF,C.COL2,K-J,SUBSTR(DCLTXT.C,J,K-J));
 
PRTLEN:     /* DRAW THE FIELD */
                    SLENI=S.LEN(I);
                    IF S.LEN(I)=0 THEN
                        GOTO PRTSTR;
                    IF C.FEP THEN
                        PRTCHR=CHR_FEP(S.TYP(I));
                    ELSE
                        PRTCHR=CHR_HOST(S.TYP(I));
                    IF SLENI<0 THEN DO;
                        SLENI=-SLENI;
                        VARYING='1'B;
                    END;
                    IF MOD(CURLOC,C.NB_CHR)~=0 OR MOD(SLENI,C.NB_CHR)~=0 THEN
                        IF C.FEP THEN
                            PRTCHR=CHR_FEP(0);
                        ELSE
                            PRTCHR=CHR_HOST(0);
                    DCLLEN=0;
                    DO WHILE(DCLLEN<SLENI);
                        J=MOD(CURLOC,C.NB_WD)+MOD(CURLOC,C.NB_WD)/C.NB_CHR;
                        CALL INSERT(LOBUF,J+7,1,SUBSTR(PRTCHR,J,1));
                        DCLLEN=DCLLEN+1;
                        CURLOC=CURLOC+1;
                        IF DCLLEN>=SLENI THEN
                            GOTO PRTSUP;
                        IF MOD(CURLOC,C.NB_WD)=0 THEN DO;
                            CALL PREPRNT;
                            IF SLENI>C.NB_ZZZ AND DCLLEN>C.NB_DWD-1 THEN DO;
                                IF C.FEP THEN
                                    LOBUF=ZZZ_FEP;
                                ELSE
                                    LOBUF=ZZZ_HOST;
                                CALL PREPRNT;
                                DO WHILE(SLENI-DCLLEN>C.NB_DWD);
                                    CURLOC=CURLOC+C.NB_WD;
                                    DCLLEN=DCLLEN+C.NB_WD;
                                END;
                                SLENI=SLENI-DCLLEN;
                                DCLLEN=0;
                            END;
                            IF C.FEP THEN
                                LOBUF=LIN_FEP;
                            ELSE
                                LOBUF=LIN_HOST;
                            CALL CVT(CURLOC,LOC);
                            CALL INSERT(LOBUF,0,5,LOC.INT);
                        END;
                    END;
 
PRTSUP:     /* DRAW ANY SLACK SPACE AFTER THE FIELD */
                    LVLPTR(DCLLVL)=I;
                    OLDLVL=DCLLVL;
                    DCLLVL=S.LVL(I+1);
                    IF DCLLVL>OLDLVL THEN
                        GOTO PRTSTR;
                    DO WHILE(DCLLVL<=OLDLVL AND OLDLVL>0);
                        K=LVLPTR(OLDLVL);
                        IF K>=0 THEN DO;
                            DCLLEN=0;
                            DO WHILE(DCLLEN<S.SUP(K));
                                IF MOD(CURLOC,C.NB_WD)=0 THEN DO;
                                    CALL PREPRNT;
                                    IF C.FEP THEN
                                        LOBUF=LIN_FEP;
                                    ELSE
                                        LOBUF=LIN_HOST;
                                    CALL CVT(CURLOC,LOC);
                                    CALL INSERT(LOBUF,0,5,LOC.INT);
                                END;
                                J=MOD(CURLOC,C.NB_WD)+MOD(CURLOC,C.NB_WD)/C.NB_CHR+7;
                                CALL INSERT(LOBUF,J,1,'.');
                                DCLLEN=DCLLEN+1;
                                CURLOC=CURLOC+1;
                            END;
                            L=CURLOC;
                            IF S.OCC(K)>0 THEN
                                CURLOC=CURLOC+(CURLOC-S.LOC(K))*(S.OCC(K)-1);
                            IF S.OCC(K)<0 THEN
                                VARYING='1'B;
                            IF CURLOC>L+C.NB_WD THEN DO;
                                CALL PREPRNT;
                                IF C.FEP THEN
                                    LOBUF=ZZZ_FEP;
                                ELSE
                                    LOBUF=ZZZ_HOST;
                                CALL PREPRNT;
                                IF C.FEP THEN
                                    LOBUF=LIN_FEP;
                                ELSE
                                    LOBUF=LIN_HOST;
                                CALL CVT(CURLOC,LOC);
                                CALL INSERT(LOBUF,0,5,LOC.INT);
                            END;
                            DCLLEN=0;
                            DO WHILE(DCLLEN<S.FIL(K));
                                IF MOD(CURLOC,C.NB_WD)=0 THEN DO;
                                    CALL PREPRNT;
                                    IF C.FEP THEN
                                        LOBUF=LIN_FEP;
                                    ELSE
                                        LOBUF=LIN_HOST;
                                    CALL CVT(CURLOC,LOC);
                                    CALL INSERT(LOBUF,0,5,LOC.INT);
                                END;
                                J=MOD(CURLOC,C.NB_WD)+MOD(CURLOC,C.NB_WD)/C.NB_CHR+7;
                                CALL INSERT(LOBUF,J,1,'.');
                                DCLLEN=DCLLEN+1;
                                CURLOC=CURLOC+1;
                            END;
                        END;
                        OLDLVL=OLDLVL-1;
                    END;
 
PRTSTR:
                    CALL PREPRNT;
                    LVLPTR(S.LVL(I))=I;
                    I=I+1;
                END;
                IF C.FEP THEN
                    LOBUF='      +--------+--------+';
                ELSE
                    LOBUF='      +---------+---------+---------+---------+';
                CALL L$WRITE;
                IF C.FEP THEN
                    LOBUF='       01234567 01234567           total length';
                ELSE
                    LOBUF='       012345678 012345678 012345678 012345678           total length';
                IF VARYING THEN
                    CALL INSERT(LOBUF,C.COLV,10,'(variable)');
                J=S.LOC(LAST+1);
                CALL CVT(J,LOC);
                CALL INSERT(LOBUF,C.COL1-1,9,LOC.INT,'-',LOC.BYT,'-',LOC.NIB);
                CALL L$WRITE;
                NLINES=NLINES+2;
                L=LOKEY.N;
                IF FIGSTRT>L-5000 THEN DO;
                    LOKEY.N=FIGSTRT-500;
                    LOBUF='.BRN 5';
                END;
/**             ELSE IF FIGSTRT+5000>L-5500 THEN DO;
                    LOKEY.N=START-1000;
                    CALL BINCHAR(WK2,NLINES+6);
                    CALL CONCAT(LOBUF,'.BRN ',WK2);
                END;
**/             ELSE DO;
                    LOKEY.N = L-5500;
                    LOBUF='.BRN 5';
                END;
                CALL L$WRITE;
                CALL CONCAT(LOBUF,'..::FG "',SUBSTR(M.C,0,M.L),'"');
                LOKEY.N=START;
                CALL L$WRITE;
                LOKEY.N=L;
                IF TRFDOT
                THEN DO;
                    LOBUF='.TRF [`';
                    CALL L$WRITE;
                END;
                CALL CONCAT(LOBUF,'..::IX "',SUBSTR(M.C,0,M.L),'"');
                CALL L$WRITE;
                LOBUF='..::FG';
                CALL L$WRITE;
            END;
        END;
        WDSKWD=TOTKWD;
        WDSOPT=TOTOPT;
        M.HEAD=ADDR(NIL);
        EQTCNT=0;
        WDSEQT=TOTEQT;
        EQTPTR=EQT_VLP.PTR$;
        LAST=-1;
        WDSSYM=TOTSYM;
        WDSTXT=TOTTXT;
        OLDLVL=0;
 
%EJECT;
    END;
 
BADDCL:
    IF DCLMAC THEN
        GOTO BADMAC;
    GOTO READAGIN;
 
BADMAC:
    CALL ERROR;
    DO WHILE(AWORD~='%MEND');
        CALL GETAWORD ALTRET(EOJ);
    END;
    GOTO READAGIN;
 
EOJ:
    IF NOT EOF THEN DO;
        CALL ERROR;
        GOTO READAGIN;
    END;
    LOBUF='.UR .WIT %OLDWIDOW%';
    CALL L$WRITE;
    CALL M$CLOSE(CLOSE_LO);
    RETURN;
 
ERROR: PROC;
    WRITE_SI.BUF_.BOUND=MAXIMUM(0,ARS-1);
    CALL M$WRITE(WRITE_SI);
    CALL BINCHAR(WK1,SILINE);
    CALL BINCHAR(WK2,CURSOR);
    CALL CONCAT(DOBUF,'Error at line ',WK1,', position ',WK2);
    CALL M$WRITE(WRITE_DO);
    RETURN;
END ERROR;
%EJECT;
GETAWORD: PROC ALTRET;
 
/* ********************************************************************\
*                                                                      *
*   GETAWORD obtains the next "word" from the input stream and         *
*   returns it in AWORD.  Length is returned in WDLEN, and the         *
*   delimiter is returned in STOPCH, left-justified.  ALTRET is        *
*   taken if an illegal character or delimiter is encountered,         *
*   or if EOF is encountered.  WDTYPE is set to reflect the kind       *
*   of word found; it is also used to communicate error status         *
*   to the caller when ALTRET is taken.                                *
*                                                                      *
\******************************************************************** */
 
    DCL PARCNT                         SBIN;
    DCL INQUOTE                        BIT(1);
    DCL I                              SBIN;
    DCL CH                             CHAR(1);
    DCL RESWDLIM CONSTANT              SBIN INIT(155);
 
    DCL 1 RESWD(0:162) CONSTANT        CHAR(12) INIT(
        /* **********************Alignment********************** */
        'ALIGNED     ','DALIGNED    ','UNAL        ','CALIGNED    ',
        'HALIGNED    ','WALIGNED    ',
        /* ********************Storage Class******************** */
        'AUTO        ','BASED       ','CONSTANT    ','STATIC      ',
        'EXT         ','EXTROOT     ','SYMREF      ','DCB         ',
        'READONLY    ','AREADEF     ','AREAREF     ',
        /* *************************Type************************* */
        'BIT         ','CHAR        ','EPTR        ','REMEMBER    ',
        'PTR         ','SBIN        ','UBIN        ','VECTOR      ',
        'DSCR        ','CPTR        ',
        /* ************************Length************************ */
        'BYTE        ','HALF        ','WORD        ',
        /* ******************Miscellaneous DCL****************** */
        'SYMDEF      ','REDEF       ','INIT        ','CONV        ',
        /* ********************PROC keywords******************** */
        'ALTRET      ','ASYNC       ','AVOID       ','MAIN        ',
        'NOAUTO      ',
        /* ************************Verbs************************ */
        'ALTRETURN   ','CALL        ','CASE        ','DCL         ',
        'DO          ','ELSE        ','END         ','GOTO        ',
        'IF          ','MATERIALIZE ','PROC        ','REMEMBER    ',
        'RETURN      ','THEN        ','UNWIND      ',
        /* **************Miscellaneous connectives************** */
        'AND         ','BY          ','IN          ','INHIBIT     ',
        'NOT         ','OR          ','TO          ','WHILE       ',
        /* **********************Functions********************** */
        'ADDR        ','ASCBIN      ','ASCBIT      ','BINASC      ',
        'BINBIT      ','BINCHAR     ','BINXCHAR    ','BITASC      ',
        'BITBIN      ','CHARBIN     ','CONCAT      ','DCBADDR     ',
        'DCBNUM      ','EDITCHAR    ','EDITSTR     ','EDITXCHAR   ',
        'ENTADDR     ','INDEX       ','INDEX1      ','INDEX1R     ',
        'INDEX2      ','INDEX2R     ','INSERT      ','LENGTHB     ',
        'LENGTHC     ','LENGTHV     ','LENGTHW     ','MOD         ',
        'PINCRB      ','PINCRC      ','PINCRW      ','POFFC       ',
        'POFFW       ','SEARCH      ','SEARCHR     ','SIZEB       ',
        'SIZEC       ','SIZEV       ','SIZEW       ','SUBSTR      ',
        'VECTOR      ','XCHARBIN    ','XLATE       ',
        /* *******************Reserved symbols******************* */
        'ERASE       ','NIL         ','$LS0        ','$LS1        ',
        '$LS2        ','$LS3        ','$LS4        ','$LS5        ',
        '$LS6        ','$LS7        ','$LS8        ','$LS9        ',
        '$LS10       ','$LS11       ','$LS12       ','$LS13       ',
        '$LS14       ','$LS15       ','$LS16       ','$LS17       ',
        '$LS18       ','$LS19       ','$LS20       ','$PR5        ',
        '$PR6        ','$PR7        ','$PS0        ','$PS1        ',
        '$PS2        ','$PS3        ','$PS4        ','$PS5        ',
        '$PS6        ','$PS7        ','$PS8        ','$PS9        ',
        '$PS10       ','$PS11       ','$PS12       ','$PS13       ',
        '$PS14       ','$PS15       ','$PS16       ','$PS17       ',
        '$PS18       ','$PS19       ','$PS20       ','$X5         ',
        '$X6         ','$X7         ');
    WDTYPE=%NULTYP;
    AWORD=' ';
    WDLEN=0;
 
GAW_BGN:
    DO WHILE(CURSOR>=ARS OR SUBSTR(SIBUF,CURSOR,1)<=' ');
        IF CURSOR>=ARS THEN
            CALL READSI ALTRET(GAW_EOF);
        ELSE
            CURSOR=CURSOR+1;
    END;
    CH=SUBSTR(SIBUF,CURSOR,1);
    IF CH='"' THEN DO;
        AWORD='"';
        WDLEN=1;
        WDTYPE=%DQSTRG;
        CURSOR=CURSOR+1;
        DO WHILE(CURSOR>=ARS OR SUBSTR(SIBUF,CURSOR,1)~='"');
            IF CURSOR>=ARS THEN
                CALL READSI ALTRET(GAW_ERR);
            ELSE DO;
                IF WDLEN<256 THEN
                    CALL INSERT(AWORD,WDLEN,1,SUBSTR(SIBUF,CURSOR,1));
                WDLEN=WDLEN+1;
                CURSOR=CURSOR+1;
            END;
        END;
        IF WDLEN<256 THEN
            CALL INSERT(AWORD,WDLEN,1,'"');
        WDLEN=WDLEN+1;
        CURSOR=CURSOR+1;
        IF WDLEN>256 THEN
            WDTYPE=%TOOLONG;
    END;
    ELSE IF CH='''' THEN DO;
        WDTYPE=%SQSTRG;
        DO WHILE(CURSOR<ARS AND SUBSTR(SIBUF,CURSOR,1)='''');
            IF WDLEN<256 THEN
                CALL INSERT(AWORD,WDLEN,1,SUBSTR(SIBUF,CURSOR,1));
            WDLEN=WDLEN+1;
            CURSOR=CURSOR+1;
            DO WHILE(CURSOR>=ARS OR SUBSTR(SIBUF,CURSOR,1)~='''');
                IF CURSOR>=ARS THEN
                    CALL READSI ALTRET(GAW_ERR);
                ELSE DO;
                    IF WDLEN<256 THEN
                        CALL INSERT(AWORD,WDLEN,1,SUBSTR(SIBUF,CURSOR,1));
                    WDLEN=WDLEN+1;
                    CURSOR=CURSOR+1;
                END;
            END;
            IF WDLEN<256 THEN
                CALL INSERT(AWORD,WDLEN,1,'''');
            WDLEN=WDLEN+1;
            CURSOR=CURSOR+1;
        END;
        IF CURSOR<ARS THEN DO;
            IF SUBSTR(SIBUF,CURSOR,1)='B'
                OR SUBSTR(SIBUF,CURSOR,1)='b' THEN DO;
                I=1;
                DO WHILE(I<WDLEN-1 AND (SUBSTR(AWORD,I,1)='0' OR
                    SUBSTR(AWORD,I,1)='1'));
                    I=I+1;
                END;
                IF I>=WDLEN-1 AND WDLEN>2 THEN DO;
                    IF WDLEN<256 THEN
                        CALL INSERT(AWORD,WDLEN,1,'B');
                    WDLEN=WDLEN+1;
                    CURSOR=CURSOR+1;
                    WDTYPE=%BTSTRG;
                END;
            END;
            ELSE IF SUBSTR(SIBUF,CURSOR,1)='O'
                OR SUBSTR(SIBUF,CURSOR,1)='o' THEN DO;
                I=1;
                DO WHILE(I<WDLEN-1 AND SUBSTR(AWORD,I,1)>='0' AND
                    SUBSTR(AWORD,I,1)<='7');
                    I=I+1;
                END;
                IF I>=WDLEN-1 AND WDLEN>2 THEN DO;
                    IF WDLEN<256 THEN
                        CALL INSERT(AWORD,WDLEN,1,'O');
                    WDLEN=WDLEN+1;
                    CURSOR=CURSOR+1;
                    WDTYPE=%OCSTRG;
                END;
            END;
            ELSE IF SUBSTR(SIBUF,CURSOR,1)='X'
                OR SUBSTR(SIBUF,CURSOR,1)='x' THEN DO;
                I=1;
                DO WHILE(I<WDLEN-1 AND
                    ((SUBSTR(AWORD,I,1)>='0' AND SUBSTR(AWORD,I,1)<='9') OR
                    (SUBSTR(AWORD,I,1)>='A' AND SUBSTR(AWORD,I,1)<='F') OR
                    (SUBSTR(AWORD,I,1)>='a' AND SUBSTR(AWORD,I,1)<='f')));
                    I=I+1;
                END;
                IF I>=WDLEN-1 AND WDLEN>2 THEN DO;
                    IF WDLEN<256 THEN
                        CALL INSERT(AWORD,WDLEN,1,'X');
                    WDLEN=WDLEN+1;
                    CURSOR=CURSOR+1;
                    WDTYPE=%HXSTRG;
                END;
            END;
        END;
        IF WDLEN>256 THEN
            WDTYPE=%TOOLONG;
    END;
    ELSE IF CH>='0' AND CH<='9' THEN DO;
        WDTYPE=%NUMBER;
        DO WHILE(CURSOR<ARS AND SUBSTR(SIBUF,CURSOR,1)>='0' AND
            SUBSTR(SIBUF,CURSOR,1)<='9');
            IF WDLEN<256 THEN
                CALL INSERT(AWORD,WDLEN,1,SUBSTR(SIBUF,CURSOR,1));
            WDLEN=WDLEN+1;
            CURSOR=CURSOR+1;
        END;
        IF WDLEN>256 THEN
            WDTYPE=%TOOLONG;
    END;
    ELSE IF (CH>='A' AND CH<='Z') OR (CH>='a' AND CH<='z')
        OR CH='$' OR CH='#' OR CH='%' THEN DO;
        IF CH='%' THEN DO;
            AWORD='%';
            WDLEN=1;
            CURSOR=CURSOR+1;
            WDTYPE=%PREPROC;
            IF CURSOR<ARS THEN
                CH=SUBSTR(SIBUF,CURSOR,1);
        END;
        ELSE
            WDTYPE=%SYMBOL;
        DO WHILE(CURSOR<ARS AND ((CH>='A' AND CH<='Z') OR (CH>='a' AND CH<='z')
            OR ( CH>='0' AND CH<='9') OR CH='$' OR CH='#' OR CH='@' OR CH='_'));
            IF WDLEN<256 THEN
                CALL INSERT(AWORD,WDLEN,1,CH);
            WDLEN=WDLEN+1;
            CURSOR=CURSOR+1;
            IF CURSOR<ARS THEN
                CH=SUBSTR(SIBUF,CURSOR,1);
            ELSE
                CH=' ';
        END;
        IF WDTYPE=%PREPROC AND WDLEN=1 AND CH='(' THEN DO;
            PARCNT=0;
            INQUOTE='0'B;
            DO UNTIL(PARCNT<=0);
                IF WDLEN<256 THEN
                    CALL INSERT(AWORD,WDLEN,1,CH);
                WDLEN=WDLEN+1;
                CURSOR=CURSOR+1;
                IF INQUOTE THEN
                    IF CH='''' THEN
                        INQUOTE='0'B;
                    ELSE
                        ;
                ELSE
                    IF CH='(' THEN
                        PARCNT=PARCNT+1;
                    ELSE IF CH=')' THEN
                        PARCNT=PARCNT-1;
                IF CURSOR<ARS THEN
                    CH=SUBSTR(SIBUF,CURSOR,1);
                ELSE DO;
                    CALL READSI ALTRET(GAW_ERR);
                    CH=SUBSTR(SIBUF,CURSOR,1);
                END;
            END;
        END;
        IF WDLEN>256 THEN
            WDTYPE=%TOOLONG;
        IF WDTYPE=%SYMBOL THEN DO;
            RESWDIDX=0;
            DO WHILE(RESWDIDX<RESWDLIM AND RESWD(RESWDIDX)~=AWORD);
                RESWDIDX=RESWDIDX+1;
            END;
            IF RESWDIDX<RESWDLIM THEN
                WDTYPE=%RESWORD;
        END;
    END;
    ELSE IF CH='/' THEN DO;
        IF CURSOR<ARS-1 AND SUBSTR(SIBUF,CURSOR+1,1)='*' THEN DO;
            CURSOR=CURSOR+2;
            DO WHILE(CURSOR>=ARS OR SUBSTR(SIBUF,CURSOR,2)~='*/');
                IF CURSOR>=ARS THEN
                    CALL READSI ALTRET(GAW_ERR);
                ELSE
                    CURSOR=CURSOR+1;
            END;
            CURSOR=CURSOR+2;
            GOTO GAW_BGN;
        END;
        CURSOR=CURSOR+1;
        STOPCH='/ ';
        RETURN;
    END;
    ELSE
        GOTO GAW_DLM;
 
GAW_GET:
    IF CURSOR<ARS THEN
        STOPCH=SUBSTR(SIBUF,CURSOR,1);
GAW_GET1:
    DO WHILE(CURSOR<ARS AND SUBSTR(SIBUF,CURSOR,1)<=' ');
        CURSOR=CURSOR+1;
    END;
    IF CURSOR<ARS THEN DO;
        CH=SUBSTR(SIBUF,CURSOR,1);
        IF CH='"' OR CH='''' THEN DO;
            STOPCH=CH;
            GOTO GAW_RTN;
        END;
        IF (CH='$' OR CH='%' OR (CH>='0' AND CH<='9') OR
            (CH>='A' AND CH<='Z') OR (CH>='a' AND CH<='z')) AND CH=STOPCH THEN DO;
            WDTYPE=%SYNTAX;
            ALTRETURN;
        END;
        GOTO GAW_DLM;
    END;
 
GAW_BAK:
    DO WHILE(CURSOR>=ARS);
        CALL READSI ALTRET(GAW_ERR);
    END;
    DO WHILE(CURSOR<ARS AND SUBSTR(SIBUF,CURSOR,1)<=' ');
        CURSOR=CURSOR+1;
    END;
    IF CURSOR>=ARS THEN
        GOTO GAW_BAK;
    CH=SUBSTR(SIBUF,CURSOR,1);
    IF CH='"' OR CH='''' OR CH='$' OR CH='%' OR (CH>='0' AND
        CH<='9') OR (CH>='A' AND CH<='Z') OR (CH>='a' AND CH<='z') THEN DO;
        STOPCH='  ';
        GOTO GAW_RTN;
    END;
 
GAW_DLM:
    IF CH='&' OR CH='(' OR CH=')' OR CH='*' OR CH='+' OR
        CH=',' OR CH='.' OR CH=':' OR CH=';' OR CH='=' OR
        CH='|' THEN DO;
        STOPCH=CH;
        CURSOR=CURSOR+1;
        GOTO GAW_RTN;
    END;
    IF CH='-' THEN DO;
        IF CURSOR<ARS-1 AND SUBSTR(SIBUF,CURSOR+1,1)='>' THEN DO;
            STOPCH='->';
            CURSOR=CURSOR+1;
        END;
        ELSE
            STOPCH='-';
        CURSOR=CURSOR+1;
        GOTO GAW_RTN;
    END;
    IF CH='~' OR CH='<' OR CH='>' THEN DO;
        IF CURSOR<ARS-1 AND SUBSTR(SIBUF,CURSOR+1,1)='=' THEN DO;
            STOPCH=SUBSTR(SIBUF,CURSOR,2);
            CURSOR=CURSOR+1;
        END;
        ELSE
            STOPCH=CH;
        CURSOR=CURSOR+1;
        GOTO GAW_RTN;
    END;
    IF CH='/' THEN DO;
        IF CURSOR<ARS-1 AND SUBSTR(SIBUF,CURSOR+1,1)='*' THEN DO;
            CURSOR=CURSOR+2;
            DO WHILE(CURSOR>=ARS OR SUBSTR(SIBUF,CURSOR,2)~='*/');
                IF CURSOR>=ARS THEN
                    CALL READSI ALTRET(GAW_ERR);
                ELSE
                    CURSOR=CURSOR+1;
            END;
            CURSOR=CURSOR+2;
            STOPCH=' ';
            GOTO GAW_GET1;
        END;
        ELSE DO;
            CURSOR=CURSOR+1;
            STOPCH='/ ';
            GOTO GAW_RTN;
        END;
    END;
    IF CH='#' OR CH='@' OR CH='_' OR CH='!' OR CH='?' OR
        CH='[' OR CH='\' OR CH=']' OR CH='^' OR CH='`' OR
        CH='{' OR CH='}' THEN DO;
        WDTYPE=%SYNTAX;
        STOPCH=CH;
        CURSOR=CURSOR+1;
        ALTRETURN;
    END;
 
GAW_RTN:
    IF WDTYPE<%SYNTAX THEN
        RETURN;
    ELSE
        ALTRETURN;
 
GAW_ERR:
    WDTYPE=%UNXEOF;
    ALTRETURN;
 
GAW_EOF:
    WDTYPE=%EOF;
    ALTRETURN;
 
END;
 
%EJECT;
READSI: PROC ALTRET;
 
/* ********************************************************************\
*                                                                      *
*   Read another record from M$SI into SIBUF and adjust ARS and        *
*   CURSOR; ALTRETURN on EOF.  Handle %CHARTEXT macro.                 *
*                                                                      *
\******************************************************************** */
 
    DCL PCNT STATIC                    SBIN INIT(0);
    DCL INCT STATIC                    BIT(1) INIT('0'B);
 
RSI_TRY:
    ARS=256;
    CURSOR=0;
    SILINE=SILINE+1;
    CALL M$READ(READ_SI) ALTRET(RSI_EOF);
    ARS=DCBADDR(DCBNUM(M$SI))->DUMMY.ARS#;
    CALL INSERT(SIBUF,ARS,1,' ');
    ARS=ARS+1;
    DO WHILE(CURSOR<ARS AND SUBSTR(SIBUF,CURSOR,1)=' ');
        CURSOR=CURSOR+1;
    END;
    IF CURSOR>=ARS THEN
        GOTO RSI_TRY;
    IF SUBSTR(SIBUF,CURSOR,1)='%' THEN DO;
        IF SUBSTR(SIBUF,CURSOR,3)='%IF' THEN
            GOTO RSI_TRY;
        IF SUBSTR(SIBUF,CURSOR,5)='%LSET' THEN
            GOTO RSI_TRY;
        IF SUBSTR(SIBUF,CURSOR,5)='%ELSE' THEN
            DO WHILE(SUBSTR(SIBUF,CURSOR,6)~='%ENDIF');
                ARS=256;
                CURSOR=0;
                CALL M$READ(READ_SI) ALTRET(RSI_EOF);
                ARS=DCBADDR(DCBNUM(M$SI))->DUMMY.ARS#;
                CALL INSERT(SIBUF,ARS,1,' ');
                ARS=ARS+1;
                DO WHILE(CURSOR<ARS AND SUBSTR(SIBUF,CURSOR,1)=' ');
                    CURSOR=CURSOR+1;
                END;
            END;
        IF SUBSTR(SIBUF,CURSOR,6)='%ENDIF' THEN
            GOTO RSI_TRY;
    END;
    CURSOR=0;
 
RSI_AGN:
    IF INCT THEN
        GOTO RSI_NCT;
    CALL INDEX(CURSOR,'%CHARTEXT',SIBUF,CURSOR) ALTRET(RSI_RTN);
    INCT='1'B;
    CALL INSERT(SIBUF,CURSOR,9,' ');
 
RSI_NCT:
    IF PCNT>0 THEN
        GOTO RSI_NPN;
    CALL INDEX1(CURSOR,'(',SIBUF,CURSOR) ALTRET(RSI_RTN);
    PCNT=1;
    CALL INSERT(SIBUF,CURSOR,1,' ');
 
RSI_NPN:
    DO WHILE(CURSOR<ARS);
        IF SUBSTR(SIBUF,CURSOR,1)=')' THEN DO;
            PCNT=PCNT-1;
            IF PCNT<=0 THEN DO;
                INCT='0'B;
                CALL INSERT(SIBUF,CURSOR,1,' ');
                GOTO RSI_AGN;
            END;
        END;
        ELSE IF SUBSTR(SIBUF,CURSOR,1)='(' THEN
            PCNT=PCNT+1;
        ELSE IF SUBSTR(SIBUF,CURSOR,1)='''' THEN DO;
            IF PCNT=1 THEN
                CALL INSERT(SIBUF,CURSOR,1,' ');
            CALL INDEX1(CURSOR,'''',SIBUF,CURSOR+1);
            IF CURSOR<ARS AND PCNT=1 THEN
                CALL INSERT(SIBUF,CURSOR,1,' ');
        END;
        CURSOR=CURSOR+1;
    END;
 
RSI_RTN:
    CURSOR=0;
    RETURN;
 
RSI_EOF:
    EOF='1'B;
    ALTRETURN;
 
END;
 
%EJECT;
GETDCL: PROC ALTRET;
 
/* ********************************************************************\
*                                                                      *
*   GETDCL processes one line of a DCL statement, up to the closing    *
*   comma or semicolon.  ALTRET is taken if any syntactical error or   *
*   duplication error occurs.  The caller must have parsed the DCL     *
*   word prior to calling GETDCL.                                      *
*                                                                      *
\******************************************************************** */
 
    DCL I                              SBIN;
    DCL T                              SBIN;
    DCL P                              PTR;
 
    DCLOCC=0;
    DCLLEN=0;
    DCLALN=0;
    DCLSTC=0;
    DCLRDF=' ';
    DCLINT='0'B;
    DCLNAM=' ';
    DCLNML=0;
    DCLKWD=ADDR(NIL);
    IF STOPCH=';' THEN DO;
        DCLLVL=-1;
        RETURN;
    END;
    IF WDSTXT<1024 THEN DO;
        CALL M$GDS(TXT_GDS) ALTRET(GDC_ERR);
        WDSTXT=WDSTXT+1024;
        TOTTXT=TOTTXT+1024;
    END;
    IF STOPCH~=' ' OR WDLEN~=1 OR AWORD<'1' OR AWORD>'9' THEN
        CALL GETAWORD ALTRET(GDC_ERR);
    IF AWORD='%MEND' THEN DO;
        CURSOR=0;
        WDTYPE=%NULTYP;
        STOPCH=';';
        WDLEN=0;
        DCLLVL=-1;
        RETURN;
    END;
    LAST_FLAG='0'B;
    DO WHILE(AWORD='%EQU' OR AWORD='%SUB');
        IF LAST>=0 THEN DO;
            IF S.EQT(LAST)=ADDR(NIL) THEN DO;
                EQTCNT=EQTCNT+1;
                S.EQT(LAST)=EQTPTR;
            END;
            ELSE DO;
                P=S.EQT(LAST);
                DO WHILE(P->DCLEQT.NEXT~=ADDR(NIL));
                    P=P->DCLEQT.NEXT;
                END;
                P->DCLEQT.NEXT=EQTPTR;
            END;
            IF WDSEQT<128 THEN DO;
                CALL M$GDS(EQT_GDS) ALTRET(GDC_ERR);
                WDSEQT=WDSEQT+1024;
                TOTEQT=TOTEQT+1024;
            END;
            DCLEQT.NEXT=ADDR(NIL);
            DCLEQT.L=WDLEN+1;
            CALL INSERT(DCLEQT.C,0,,SUBSTR(AWORD,0,WDLEN),' ');
            DO WHILE(STOPCH~=';');
                CALL GETAWORD ALTRET(GDC_ERR);
                T=DCLEQT.L;
                DCLEQT.L=DCLEQT.L+WDLEN;
                IF SUBSTR(STOPCH,1,1)~=' ' THEN
                    DCLEQT.L=DCLEQT.L+2;
                ELSE
                    DCLEQT.L=DCLEQT.L+1;
                CALL INSERT(DCLEQT.C,T,DCLEQT.L-T,SUBSTR(AWORD,
                    0,WDLEN),STOPCH);
            END;
            T=(DCLEQT.L+8)/4;
            EQTPTR=PINCRW(EQTPTR,T);
            WDSEQT=WDSEQT-T;
            EQTCNT=EQTCNT+1;
        END;
        ELSE DO;
            DO WHILE(STOPCH~=';');
                CALL GETAWORD ALTRET(GDC_ERR);
            END;
        END;
        CALL GETAWORD ALTRET(GDC_ERR);
    END;
    T=0;
    IF AWORD='1' AND STOPCH=' ' THEN DO;
        CALL GETAWORD ALTRET(GDC_ERR);
        IF WDTYPE~=%SYMBOL THEN
            ALTRETURN;
        DCLLVL=1;
        DCLNAM=AWORD;
        DCLNML=WDLEN;
        DCLTYP=0;
        DCLTXT.L=WDLEN+2;
        CALL CONCAT(DCLTXT.C,'1 ',SUBSTR(AWORD,0,WDLEN));
    END;
    ELSE IF WDTYPE=%PREPROC THEN DO;
        DCLLVL=1;
        IF SUBSTR(AWORD,WDLEN-2,1)>='0' AND
            SUBSTR(AWORD,WDLEN-2,1)<='9' THEN
            DCLLVL=ASCBIN(SUBSTR(AWORD,WDLEN-2,1))-
                ASCBIN('0')+1;
        DCLTXT.L=2*DCLLVL+WDLEN-1;
        DCLTXT.C=' ';
        DCLTYP=0;
        T=DCLTXT.L-WDLEN-1;
        CALL INSERT(DCLTXT.C,T,WDLEN,SUBSTR(AWORD,0,WDLEN));
        T=T+WDLEN+1;
        GOTO GET_LVL;
    END;
    ELSE DO;
        IF WDLEN~=1 OR (STOPCH~=' ' AND STOPCH~='*') OR AWORD<'2'
            OR AWORD>'9' THEN
            ALTRETURN;
        IF DCLLVL>=ASCBIN(SUBSTR(AWORD,0,1))-ASCBIN('0') THEN
            IF DCLTYP=0 THEN
                ALTRETURN;
            ELSE
                ;
        ELSE IF DCLLVL+1~=ASCBIN(SUBSTR(AWORD,0,1))-ASCBIN('0')
            AND DCLLVL>0 THEN
            ALTRETURN;
        DCLLVL=ASCBIN(SUBSTR(AWORD,0,1))-ASCBIN('0');
        DCLTXT.L=2*DCLLVL;
        DCLTXT.C=' ';
        DCLTYP=0;
        T=DCLTXT.L-2;
        CALL INSERT(DCLTXT.C,T,2,SUBSTR(AWORD,0,1));
        T=T+2;
GET_LVL:
        IF STOPCH=' ' THEN DO;
            CALL GETAWORD ALTRET(GDC_ERR);
            IF WDTYPE~=%SYMBOL THEN
                ALTRETURN;
            DCLNAM=SUBSTR(AWORD,0,WDLEN);
            DCLNML=WDLEN;
            DCLTXT.L=DCLTXT.L+WDLEN;
            CALL INSERT(DCLTXT.C,T,WDLEN,SUBSTR(AWORD,0,WDLEN));
        END;
        ELSE DO;
            DCLNAM='*';
            DCLNML=1;
            STOPCH=' ';
            DCLTXT.L=DCLTXT.L+1;
            CALL INSERT(DCLTXT.C,T,1,'*');
        END;
    END;
    T=DCLTXT.L;
    IF STOPCH=',' THEN
        RETURN;
    IF STOPCH='(' THEN
        GOTO GET_OCC;
    IF STOPCH~=' ' THEN
        ALTRETURN;
    CALL GETAWORD ALTRET(GDC_ERR);
    IF WDTYPE=%NULTYP AND STOPCH='(' THEN DO;
 
GET_OCC:
        DO I=1 TO DCLLVL-1;
            IF LVLPTR(I)>=0 AND S.OCC(LVLPTR(I))~=0 THEN
                ALTRETURN;
        END;
        CALL GETAWORD ALTRET(GDC_ERR);
        IF WDTYPE=%SYMBOL THEN DO;
            DCLOCC=-1;
            DCLTXT.L=DCLTXT.L+1;
            CALL INSERT(DCLTXT.C,T,1,'(');
            T=DCLTXT.L;
            DO WHILE(STOPCH='.' AND WDTYPE=%SYMBOL);
                DCLTXT.L=DCLTXT.L+WDLEN+1;
                CALL INSERT(DCLTXT.C,T,WDLEN+1,SUBSTR(AWORD,0,WDLEN),
                    '.');
                T=DCLTXT.L;
                CALL GETAWORD ALTRET(GDC_ERR);
            END;
            IF WDTYPE~=%SYMBOL THEN
                ALTRETURN;
            DCLTXT.L=DCLTXT.L+WDLEN+1;
            CALL INSERT(DCLTXT.C,T,WDLEN+1,SUBSTR(AWORD,0,WDLEN),
                ')');
            T=DCLTXT.L;
        END;
        ELSE DO;
            IF AWORD~='0' OR STOPCH~=':' THEN
                ALTRETURN;
            CALL GETAWORD ALTRET(GDC_ERR);
            IF (WDTYPE~=%NUMBER OR WDLEN>5) AND WDTYPE~=%SYMBOL AND
                WDTYPE~=%PREPROC THEN
                ALTRETURN;
            IF WDTYPE=%NUMBER THEN
                CALL CHARBIN(DCLOCC,SUBSTR(AWORD,0,WDLEN));
            ELSE
                DCLOCC=-1;
            IF DCLOCC>=0 THEN
                DCLOCC=DCLOCC+1;
            DCLTXT.L=DCLTXT.L+WDLEN+4;
            CALL INSERT(DCLTXT.C,T,WDLEN+4,'(0:',SUBSTR(AWORD,0,WDLEN),
                ')');
            T=DCLTXT.L;
        END;
        IF STOPCH~=')' THEN
            ALTRETURN;
        CALL GETAWORD ALTRET(GDC_ERR);
    END;
    IF AWORD='REDEF' THEN DO;
        IF STOPCH~=' ' THEN
            ALTRETURN;
        CALL GETAWORD ALTRET(GDC_ERR);
        DCLTXT.L=DCLTXT.L+7;
        CALL INSERT(DCLTXT.C,T,7,' REDEF ');
        T=DCLTXT.L;
        DO WHILE(WDTYPE=%SYMBOL AND STOPCH='.');
            DCLTXT.L=DCLTXT.L+WDLEN+1;
            CALL INSERT(DCLTXT.C,T,WDLEN+1,SUBSTR(AWORD,0,WDLEN),
                '.');
            T=DCLTXT.L;
            CALL GETAWORD ALTRET(GDC_ERR);
        END;
        IF WDTYPE~=%SYMBOL THEN
            ALTRETURN;
        IF DCLLVL~=1 AND S.LVL(LAST)<DCLLVL THEN
            ALTRETURN;
        DCLRDF=AWORD;
        DCLTXT.L=DCLTXT.L+WDLEN;
        CALL INSERT(DCLTXT.C,T,WDLEN,SUBSTR(AWORD,0,WDLEN));
        T=DCLTXT.L;
        IF STOPCH=',' OR STOPCH=';' THEN
            RETURN;
        IF STOPCH~=' ' THEN
            ALTRETURN;
        CALL GETAWORD ALTRET(GDC_ERR);
    END;
    DO WHILE('1'B);
        IF AWORD='STCLASS' THEN DO;
            AWORD='STATIC';
            RESWDIDX=6;
            WDTYPE=%RESWORD;
            WDLEN=0;
        END;
        IF AWORD='ALGN' THEN DO;
            AWORD='ALIGNED';
            RESWDIDX=17;
            WDTYPE=%RESWORD;
            WDLEN=0;
        END;
        IF WDTYPE=%RESWORD AND RESWDIDX>=6 AND RESWDIDX<=16 THEN DO;
            IF DCLLVL~=1 THEN
                ALTRETURN;
            DCLSTC=RESWDIDX-2;
            IF WDLEN=0 THEN DO;
                DCLTXT.L=DCLTXT.L+8;
                CALL INSERT(DCLTXT.C,T,8,' STCLASS');
                T=DCLTXT.L;
            END;
            ELSE DO;
                DCLTXT.L=DCLTXT.L+WDLEN+1;
                CALL INSERT(DCLTXT.C,T,WDLEN+1,' ',SUBSTR(AWORD,0,WDLEN));
                T=DCLTXT.L;
            END;
            IF STOPCH=',' OR STOPCH=';' THEN
                RETURN;
            IF STOPCH='(' AND DCLSTC=2 THEN
                GOTO GET_BAS;
            IF STOPCH~=' ' THEN
                ALTRETURN;
            CALL GETAWORD ALTRET(GDC_ERR);
            IF WDTYPE=%NULTYP AND STOPCH='(' THEN DO;
 
GET_BAS:
                CALL GETAWORD ALTRET(GDC_ERR);
                DCLTXT.L=DCLTXT.L+1;
                CALL INSERT(DCLTXT.C,T,1,'(');
                T=DCLTXT.L;
                DO WHILE(WDTYPE=%SYMBOL AND STOPCH='.');
                    DCLTXT.L=DCLTXT.L+WDLEN+1;
                    CALL INSERT(DCLTXT.C,T,WDLEN+1,SUBSTR(AWORD,0,
                        WDLEN),'.');
                    T=DCLTXT.L;
                    CALL GETAWORD ALTRET(GDC_ERR);
                END;
                IF WDTYPE~=%SYMBOL THEN
                    ALTRETURN;
                IF STOPCH~=')' THEN
                    ALTRETURN;
                DCLTXT.L=DCLTXT.L+WDLEN+1;
                CALL INSERT(DCLTXT.C,T,WDLEN+1,SUBSTR(AWORD,0,WDLEN),
                    ')');
                T=DCLTXT.L;
                CALL GETAWORD ALTRET(GDC_ERR);
            END;
            ELSE IF AWORD='SYMDEF' THEN DO;
                IF DCLSTC~=3 AND DCLSTC~=4 THEN
                    ALTRETURN;
                DCLSTC=DCLSTC+6;
                DCLTXT.L=DCLTXT.L+7;
                CALL INSERT(DCLTXT.C,T,7,' SYMDEF');
                T=DCLTXT.L;
                IF STOPCH=',' OR STOPCH=';' THEN
                    RETURN;
                IF STOPCH~=' ' THEN
                    ALTRETURN;
                CALL GETAWORD ALTRET(GDC_ERR);
            END;
        END;
        ELSE IF AWORD='ENTRY' THEN
            ALTRETURN;
        ELSE IF AWORD='ALIGNED' OR AWORD='DALIGNED' OR AWORD='UNAL' OR
            AWORD='CALIGNED' OR AWORD='HALIGNED' OR AWORD='WALIGNED' THEN DO;
            IF DCLALN~=0 THEN
                ALTRETURN;
            IF AWORD='DALIGNED' THEN
                DCLALN=C.NB_DWD;
            ELSE IF AWORD='ALIGNED' OR AWORD='WALIGNED' THEN
                DCLALN=C.NB_WD;
            ELSE IF AWORD='HALIGNED' THEN
                DCLALN=C.NB_HWD;
            ELSE IF AWORD='CALIGNED' THEN
                DCLALN=C.NB_CHR;
            ELSE
                DCLALN=1;
            IF WDLEN=0 THEN DO;
                DCLTXT.L=DCLTXT.L+5;
                CALL INSERT(DCLTXT.C,T,5,' ALGN');
            END;
            ELSE DO;
                DCLTXT.L=DCLTXT.L+WDLEN+1;
                CALL INSERT(DCLTXT.C,T,WDLEN+1,' ',SUBSTR(AWORD,0,WDLEN));
            END;
            T=DCLTXT.L;
            IF STOPCH=',' OR STOPCH=';' THEN
                RETURN;
            IF STOPCH~=' ' THEN
                ALTRETURN;
            CALL GETAWORD ALTRET(GDC_ERR);
        END;
        ELSE IF AWORD='EPTR' OR AWORD='PTR' OR AWORD='CPTR' THEN DO;
            IF DCLTYP~=0 THEN
                ALTRETURN;
            IF AWORD='EPTR' THEN
                DCLTYP=%TYP#EPTR;
            ELSE IF AWORD='PTR' THEN
                DCLTYP=%TYP#PTR;
            ELSE
                DCLTYP=%TYP#CPTR;
            DCLLEN=C.NB_PTR;
            DCLTXT.L=DCLTXT.L+WDLEN+1;
            CALL INSERT(DCLTXT.C,T,WDLEN+1,BINASC(7),SUBSTR(AWORD,0,
                WDLEN));
            T=DCLTXT.L;
            IF STOPCH=',' OR STOPCH=';' THEN
                RETURN;
            IF STOPCH~=' ' THEN
                ALTRETURN;
            CALL GETAWORD ALTRET(GDC_ERR);
        END;
        ELSE IF AWORD='PFMT' OR AWORD='CHAR' OR AWORD='BIT' THEN DO;
            IF DCLTYP~=0 THEN
                ALTRETURN;
            IF AWORD='CHAR' THEN
                DCLTYP=%TYP#CHAR;
            ELSE
                DCLTYP=%TYP#BIT;
            DCLTXT.L=DCLTXT.L+WDLEN+1;
            CALL INSERT(DCLTXT.C,T,WDLEN+1,BINASC(7),SUBSTR(AWORD,0,
                WDLEN));
            T=DCLTXT.L;
            IF AWORD='PFMT' THEN
                DCLLEN=C.NB_VCTR;
            ELSE DO;
                IF STOPCH~='(' THEN
                    ALTRETURN;
                CALL GETAWORD ALTRET(GDC_ERR);
                DCLTXT.L=DCLTXT.L+1;
                CALL INSERT(DCLTXT.C,T,1,'(');
                T=DCLTXT.L;
                IF WDTYPE=%SYMBOL THEN DO;
                    DCLLEN=-1;
                    DO WHILE(WDTYPE=%SYMBOL AND STOPCH='.');
                        DCLTXT.L=DCLTXT.L+WDLEN+1;
                        CALL INSERT(DCLTXT.C,T,WDLEN+1,SUBSTR(AWORD,
                            0,WDLEN),'.');
                        T=DCLTXT.L;
                        CALL GETAWORD ALTRET(GDC_ERR);
                    END;
                    IF WDTYPE~=%SYMBOL THEN
                        ALTRETURN;
                END;
                ELSE IF WDTYPE=%PREPROC THEN
                    DCLLEN=1;
                ELSE IF WDTYPE=%NUMBER AND WDLEN<6 THEN
                    CALL CHARBIN(DCLLEN,SUBSTR(AWORD,0,WDLEN));
                ELSE
                    ALTRETURN;
                IF DCLLEN=0 THEN
                    DCLLEN=-1;
                IF DCLTYP=%TYP#CHAR THEN
                    DCLLEN=DCLLEN*C.NB_CHR;
                IF STOPCH~=')' THEN
                    ALTRETURN;
                DCLTXT.L=DCLTXT.L+WDLEN+1;
                CALL INSERT(DCLTXT.C,T,WDLEN+1,SUBSTR(AWORD,0,
                    WDLEN),')');
                T=DCLTXT.L;
            END;
            IF STOPCH~=',' AND STOPCH~=';' THEN
                CALL GETAWORD ALTRET(GDC_ERR);
            ELSE
                RETURN;
        END;
        ELSE IF AWORD='SBIN' OR AWORD='UBIN' OR AWORD='SCRMODE' OR
            AWORD='VECTOR' OR AWORD='REMEMBER' OR AWORD='DSCR' THEN DO;
            IF DCLTYP~=0 THEN
                ALTRETURN;
            IF AWORD='SBIN' THEN
                DCLTYP=%TYP#SBIN;
            ELSE
                DCLTYP=%TYP#UBIN;
            IF AWORD='VECTOR' THEN
                DCLTYP=%TYP#VECTOR;
            IF AWORD='REMEMBER' THEN
                DCLTYP=%TYP#REMEMBER;
            IF AWORD='DSCR' THEN
                DCLTYP=%TYP#DSCR;
            DCLTXT.L=DCLTXT.L+WDLEN+1;
            CALL INSERT(DCLTXT.C,T,WDLEN+1,BINASC(7),SUBSTR(AWORD,0,
                WDLEN));
            T=DCLTXT.L;
            IF AWORD='SCRMODE' THEN DO;
                DCLLEN=C.NB_SCRMODE;
                IF STOPCH=',' OR STOPCH=';' THEN
                    RETURN;
                IF STOPCH~=' ' THEN
                    ALTRETURN;
                CALL GETAWORD ALTRET(GDC_ERR);
            END;
            IF AWORD='VECTOR' OR AWORD='REMEMBER' OR AWORD='DSCR' THEN DO;
                DCLLEN=C.NB_VCTR;
                IF STOPCH=',' OR STOPCH=';' THEN
                    RETURN;
                IF STOPCH~=' ' THEN
                    ALTRETURN;
                CALL GETAWORD ALTRET(GDC_ERR);
            END;
            ELSE DO;
                DCLLEN=C.NB_WD;
                IF STOPCH=',' OR STOPCH=';' THEN
                    RETURN;
                IF STOPCH='(' THEN DO;
                    CALL GETAWORD ALTRET(GDC_ERR);
                    DCLTXT.L=DCLTXT.L+1;
                    CALL INSERT(DCLTXT.C,T,1,'(');
                    T=DCLTXT.L;
                    IF WDTYPE=%SYMBOL THEN DO;
                        DCLLEN=-1;
                        DO WHILE(WDTYPE=%SYMBOL AND STOPCH='.');
                            DCLTXT.L=DCLTXT.L+WDLEN+1;
                            CALL INSERT(DCLTXT.C,T,WDLEN+1,SUBSTR
                                (AWORD,0,WDLEN),'.');
                            T=DCLTXT.L+1;
                            CALL GETAWORD ALTRET(GDC_ERR);
                        END;
                        IF WDTYPE~=%SYMBOL THEN
                            ALTRETURN;
                    END;
                    ELSE IF WDTYPE=%PREPROC THEN
                        DCLLEN=-1;
                    ELSE IF WDTYPE=%NUMBER AND WDLEN<6 THEN
                        CALL CHARBIN(DCLLEN,SUBSTR(AWORD,0,WDLEN));
                    ELSE
                        ALTRETURN;
                    IF DCLLEN=0 THEN
                        DCLLEN=-1;
                    IF STOPCH~=')' THEN
                        ALTRETURN;
                    DCLTXT.L=DCLTXT.L+WDLEN+1;
                    CALL INSERT(DCLTXT.C,T,WDLEN+1,SUBSTR(AWORD,0,
                        WDLEN),')');
                    T=DCLTXT.L;
                    CALL GETAWORD ALTRET(GDC_ERR);
                END;
                ELSE DO;
                    CALL GETAWORD ALTRET(GDC_ERR);
                    IF AWORD='HALF' OR AWORD='BYTE' OR AWORD='WORD' THEN DO;
                        IF AWORD='WORD' THEN
                            DCLLEN=C.NB_WD;
                        ELSE IF AWORD='HALF' THEN
                            DCLLEN=C.NB_HWD;
                        ELSE
                            DCLLEN=C.NB_CHR;
                        DCLTXT.L=DCLTXT.L+WDLEN+1;
                        CALL INSERT(DCLTXT.C,T,WDLEN+1,' ',SUBSTR(AWORD,
                            0,WDLEN));
                        T=DCLTXT.L;
                        IF STOPCH=',' OR STOPCH=';' THEN
                            RETURN;
                        IF STOPCH~=' ' THEN
                            ALTRETURN;
                        CALL GETAWORD ALTRET(GDC_ERR);
                    END;
                END;
            END;
        END;
        ELSE IF AWORD='INIT' OR AWORD='%INIT' THEN DO;
            IF DCLINT THEN
                ALTRETURN;
            IF STOPCH~='(' THEN
                ALTRETURN;
            DCLTXT.L=DCLTXT.L+6;
            CALL INSERT(DCLTXT.C,T,6,' INIT(');
            T=DCLTXT.L;
            I=1;
            DO WHILE(I>0);
                CALL GETAWORD ALTRET(GDC_ERR);
                IF WDTYPE~=%NULTYP AND WDTYPE~=%RESWORD
                  AND DCLKWD=ADDR(NIL) THEN DO;
                    KWDPTR=M.HEAD;
                    DO WHILE(KWDPTR~=ADDR(NIL)
                      AND (KWD.C~=AWORD OR KWD.REF>=0));
                        KWDPTR=KWD.NEXT;
                    END;
                    DCLKWD=KWDPTR;
                END;
                IF STOPCH='(' THEN
                    I=I+1;
                ELSE IF STOPCH=')' THEN
                    I=I-1;
                IF SUBSTR(STOPCH,1,1)=' ' THEN
                    DCLTXT.L=DCLTXT.L+WDLEN+1;
                ELSE
                    DCLTXT.L=DCLTXT.L+WDLEN+2;
                CALL INSERT(DCLTXT.C,T,DCLTXT.L-T,SUBSTR(AWORD,0,
                    WDLEN),STOPCH);
                T=DCLTXT.L;
            END;
            DCLINT='1'B;
            CALL GETAWORD ALTRET(GDC_ERR);
        END;
        ELSE IF AWORD='LAST' THEN DO;
            AWORD=' ';
            WDTYPE=%NULTYP;
            WDLEN=0;
            STOPCH=',';
            LAST_FLAG='1'B;
            RETURN;
        END;
        ELSE IF WDTYPE=%NULTYP AND (STOPCH=',' OR STOPCH=';') THEN
            RETURN;
        ELSE
            ALTRETURN;
    END;
 
GDC_ERR:
    ALTRETURN;
 
END;
 
%EJECT;
CVT: PROC(SRC,DST);
 
/* ********************************************************************\
*                                                                      *
*   For HOST -                                                          *
*   Convert SRC (SBIN) into external octal with fractional bits in     *
*   DST, return ******* if SRC<0 or SRC>'7777'O.                       *
*   For FEP -                                                           *
*   Convert SRC (SBIN) into external hex with fractional bits in       *
*   DST, return ******* if SRC<0 or SRC>'FFFF'X.                       *
*                                                                      *
\******************************************************************** */
 
    DCL SRC                            SBIN;
    DCL 1 DST,
          2 INT                        CHAR(5),
          2 BYT                        CHAR(1),
          2 NIB                        CHAR(1);
 
    DCL I                              SBIN;
    DCL J                              SBIN;
 
    DCL DIGITS_INIT CHAR(16) CONSTANT INIT('0123456789ABCDEF');
    DCL DIGITS(0:15) REDEF DIGITS_INIT CHAR(1);
 
    IF SRC<0 THEN DO;
        DST.INT='*****';
        DST.BYT='*';
        DST.NIB='*';
        RETURN;
    END;
    I=MOD(SRC,C.NB_WD);
    CALL BINCHAR(DST.BYT,I/C.NB_CHR);
    CALL BINCHAR(DST.NIB,MOD(I,C.NB_CHR));
    I=SRC/C.NB_WD;
    J=4;
    DST.INT=' ';
    DO WHILE(I>0 OR J=4) AND J>=0;
        CALL INSERT(DST.INT,J,1,DIGITS(MOD(I,C.BASE)));
        J=J-1;
        I=I/C.BASE;
    END;
    IF I>0 THEN DO;
        DST.INT='*****';
        DST.BYT='*';
        DST.NIB='*';
    END;
    ELSE IF J>0 THEN
        CALL INSERT(DST.INT,J,1,'.');
    ELSE IF J=0 THEN
        CALL INSERT(DST.INT,J,1,'[');
    RETURN;
END;
 
%EJECT;
PREPRNT: PROC;
 
/* ********************************************************************\
*                                                                      *
*   Check to see that there's something to print in LOBUF when         *
*   doing the DRAW output.  If so, check to see that it fits on        *
*   this page; if not, page and draw footings and headings.            *
*                                                                      *
\******************************************************************** */
 
    IF (NOT C.FEP
        AND SUBSTR(LOBUF,C.COL1,C.LEN1)=' ' AND SUBSTR(LOBUF,7,9)=' '
        AND SUBSTR(LOBUF,17,9)=' ' AND SUBSTR(LOBUF,27,9)=' '
        AND SUBSTR(LOBUF,37,9)=' ' AND SUBSTR(LOBUF,46,1)='|')
      OR(C.FEP
        AND SUBSTR(LOBUF,26,52)=' ' AND SUBSTR(LOBUF,7,8)=' '
        AND SUBSTR(LOBUF,16,8)=' ' AND SUBSTR(LOBUF,24,1)='|') THEN
        RETURN;
    CALL L$WRITE;
    NLINES=NLINES+1;
    RETURN;
END;
%EJECT;
L$WRITE: PROC;
 
DCL LEN SBIN;
DCL TABLEVAL SBIN;
 
    CALL SEARCHR(LEN,TABLEVAL,B$SR_NON_BLANK,LOBUF)
    WHENRETURN DO;
       WRITE_LO.BUF_= VECTOR(SUBSTR(LOBUF,0,LEN+1));
       END;
    WHENALTRETURN DO;
       WRITE_LO.BUF_= VECTOR(NIL);
       END;
    CALL M$WRITE(WRITE_LO);
    LOKEY.N=LOKEY.N+1000;
    RETURN;
 
END L$WRITE;
 
END DRAW2;
