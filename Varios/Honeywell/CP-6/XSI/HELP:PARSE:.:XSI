                              PARSE
 
    PARSE is a debugging tool for checking parser syntax.
When pointed at a run unit, object unit, or coreimage containing parser
nodes or linked with your parser nodes OU and invoked, PARSE prompts for
input and submits it to the parser for decoding; the results are then
displayed on your LO device in a compact format:
 
    s tttt @ ww ccc (n) "xxxx"
 
    s - is the SUBLK$ subscript at this level in the tree.
    ccc - is the CODE of the node.
    ww - is the CPOS of the node.
    tttt - is the NDTYPE of the node.
    n - is the size of xxxx, if present.
    xxxx - is the first characters of TEXT, if present (up to 132).
 
    If PARSE is supplied with a %SUBs file or the parser SI
for your nodes and your node codes are unique, CODE is printed as
the name of the node rather than the number.  PARSE reads the %SUBs
file or parser SI via the UI DCB.  Example:
 
    Without the parser SI:
 
        !PARSE.X COPYNODES_OU
        --------------------
        *COPY 1                <- input
        0 Concat. @ 0 1
        +-0 Altern. @ 5 101
          +-0 Concat. @ 5 201
            +-0 Decimal @ 5 501 (1) "1"
        --------------------
 
    With the parser SI (or a suitable %SUBs file):
 
        !PARSE.X COPYRU,COPYPGM_SIP
        --------------------
        *COPY 1                <- input
        0 Concat. @ 0 1/COPCMD
        +-0 Altern. @ 5 101/COPELT
          +-0 Concat. @ 5 201/FIELD
            +-0 Decimal @ 5 501/INTPART (1) "1"
        --------------------
 
If no text can be found for a particular code, the numeric value of
the code is printed.  If your node codes are not unique, the first
value encountered is printed.
 
    If your nodes tree contains success, failure, or preparse codes,
PARSE will print a message in the following format when the U$
routine is entered:
 
    reason ccc @ww node-address
 
Where "reason" is "Success!", "Failure!", or "Preparse", and "ccc" and
"ww" are the same as described above.  Again, the alphabetic equivalent
of the code is printed if a suitable UI file exists.  If you have set M$USER
to anywhere (it defaults to NO), PARSE will then read it for alternate
handling instructions of the form:
 
  [{Retry|Reject|Accept}] [charpos]
 
    At the completion of a successful parse, PARSE prints the size of
the work area used, in words.  If the parser returns a successful parse
but all the characters in the input string have not been used, the 10
characters last scanned and the first 10 characters which were not
scanned are printed and a pointer indicates the first unparsed character.
 
    If a syntax error is returned by the parser, the error position is
indicated and a list of correct syntax possibilities for that point is
provided.  If one of the possibilities is !!PREF!!, then there probably
a PREF in your parsenodes.  As a result of this feature, topnode recursion
(actually any reference to the first node defined in the PARTRGE source
from within the same object unit) doesn't work for object units.
 
    If you omit the RUM step, "pickaname" will operate exactly as if you
said "PARSE.X pickaname" and had also omitted PARSEOU from the LINK step.
(There are some parsenodes in PARSEOU for decoding the SUBS file).
 
    PARSE (the run unit) will try to find parser nodes in whatever M$SI is
pointed at. If it does it will attempt to reduce the tree(s) to one by
eliminating DEFs that are referenced by other nodes. If a single tree
cannot be obtained,  three options are available.  If the PARSE invocation
contains an option naming one of the remaining SYMDEFs, that tree will be
selected.  If there is any other option, PARSE will cycle through the
remaining trees, with ESC-F used to go from one to the next.
Otherwise, an alternative node will be built using the disjoint
trees followed by end-of-line as subnodes. If this does not satisfy your
needs, use PARSEOU.  If PARSE does not build an alternative node, the name
of the node being used is displayed with each prompt for input.
 
    To use PARSEOU, issue the following LINK and RUM commands:
 
    !LINK PARSEOU.X,yournodes {ON|OVER} pickaname
    !RUM pickaname
    >M PCB.ROOT$ PTR yourtopnode
    >END
 
    PARSE reads test input through M$TI.  Run units built from PARSEOU
and RUMmed read test input through M$SI unless M$TI is assigned.
 
    Error messages are printed when the parser ALTRETs to PARSE.
 
    Maximum input record size is 4096 characters, 256 characters at
a time.  If PARSE's U$ routine is entered for input, successive input is
appended to the buffer (up to 4096 characters), not overwritten.  If
you exceed 4096 characters, PARSE aborts.  Continuation lines are
prompted for with a "+" prompt.  If either M$TI or M$LO is not a terminal,
the input line(s) is echoed to M$LO.
 
    PARSE is terminated via ESC-F, break, or control-Y Quit, since END may
be a string you are looking for.  If PARSE is looking at an overlaid
run unit, break will skip to the next overlay containing parser nodes,
whereas ESC-F may only skip to the next disjoint tree.
 
PARSE the rununit sets STEPCC non-zero if errors occur as follows:
   STEPCC=2 if any syntax errors occurred.
   STEPCC=4 if any other ALTRETs from X$PARSE occurred.
   STEPCC=6 if both of the above, or nodes were wrong version (B03 vs C00).
 
HELP file for: PARSE
 **************************************************************
 *                                                            *
 *  Copyright (c) Bull HN Information Systems Inc., 1989      *
 *                                                            *
 **************************************************************
9/18/87 - More fixes for bad input. Fixed !!PREF!! (was saying "bad node")
8/17/87 Fixed STARs 21409, 21410, 21411; all were basically: PARSE.X doesn't
diagnose or handle unexpected input too nicely.
6/10/87 RE-reimplemented STEPCCs for 33395.
9/8/86 Reimplemented STEPCCs for star 30637.
8/25/86 Added Hex, Jobname, Account and Rtext to PARSE's list of node types.
2/16/84 Set STEPCC for errors. Handle both flavors of nodes properly.
1/16/84 More new OU format (pages other record types, too.)
1/24/83 Bigger input buffer (4096 chars). New OU format (pages program records)
CHANGES
Pete Rumsey, LADC
PARSE.X
AID=PROGRAMMING
PARSER
TOOL=PARSE
Is a debugging tool for checking parser syntax.
CHANGES
