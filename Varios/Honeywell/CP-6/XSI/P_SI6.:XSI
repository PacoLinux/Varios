/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*****************************************************************/
/*   'P' - This routine is used to store and retreive IBEX        */
/*   commands.                                                   */
/*   To stash away a command, type:                               */
/*      !S. x=cmd                                                */
/*   Where 'x' is the character string to be associated with the */
/*   command 'cmd'.                                              */
/*   To retrieve a command, type                                 */
/*      !S. x                                                    */
/*   and the command associated with the character 'x' will be   */
/*   loaded as saved input in the re-read buffer.  Hit ESC-D     */
/*   and the text will be typed on the terminal.                 */
/*   To delete a previous association, type:                     */
/*      !S. x                                                    */
/*   Note that P builds a file $$P in the LOGON account.          */
/*   DENNIS GRIESSER, 4/29/80                                    */
/*   This version,   10/14/81                                    */
/*****************************************************************/
 
/*X* DMR,PLM=5,IND=5,CTI=5,SDI=5,MCL=10,CSI=0,ECI=0              */
STASH: PROC MAIN;
 
%INCLUDE CP_6;
%INCLUDE B$JIT_C;
%INCLUDE CP_6_SUBS;
 
%EJECT;
/* ALLOCATION */
 
/*     DCB declaration */
 
DCL M$STASH DCB;
 
/*     FPT creation */
 
/*         M$STASH */
 
%FPT_OPEN    (FPTN=FPT_OPEN_STASH,
              STCLASS=STATIC,
              ACS=DIRECT,
              ACCT=STASH_ACCT,
              ASN=FILE,
              CTG=YES,
              DCB=M$STASH,
              EXIST=OLDFILE,
              NAME=STASH_NAME,
              ORG=KEYED,
              FUN=CREATE);
%FPT_READ    (FPTN=FPT_READ_STASH,
          STCLASS=STATIC,
          DCB=M$STASH,
        KEYR=YES,
        KEYS=YES,
        KEY=STASH_KEY,
          BUF=STASH_BUF);
%FPT_DELREC  (FPTN=FPT_DELREC_STASH,
          STCLASS=STATIC,
          DCB=M$STASH,
          KEY=STASH_KEY);
%FPT_WRITE   (FPTN=FPT_WRITE_STASH,
          STCLASS=STATIC,
          DCB=M$STASH,
        KEY=STASH_KEY,
          BUF=STASH_BUF);
        %FPT_CLOSE   (FPTN=FPT_CLOSE_STASH,
          STCLASS=STATIC,
          DCB=M$STASH);
 
/*         M$UC */
 
        %FPT_OPEN    (FPTN=FPT_OPEN_TERM,
          STCLASS=STATIC,
          DCB=M$UC);
        %FPT_WRITE   (FPTN=FPT_WRITE_TERM,
          BUF=TERM_OUT_BUF,
          WAIT=YES,
          DCB=M$UC);
        %FPT_CLOSE   (FPTN=FPT_CLOSE_TERM,
          STCLASS=STATIC,
          DCB=M$UC);
 
/*         ASSORTED MONITOR SERVICES */
 
%FPT_SINPUT (FPTN = FPT_SINPUT,
             STCLASS = STATIC,
             DCB = M$UC,
             BUF = STASH_BUF);
 
/*     VLP creation */
 
%VLP_NAME  (FPTN=STASH_NAME,
  NAME='$$P');
%VLP_ACCT  (FPTN=STASH_ACCT);
%EJECT;
/*     BUFFERS */
 
DCL STASH_BUF CHAR(256) STATIC;
DCL 1 STASH_KEY STATIC,
         2 LEN UBIN(9) UNAL,
         2 TEXT CHAR(10) UNAL;
DCL TERM_OUT_BUF CHAR(40) STATIC;
 
/*     POINTERS AND COUNTERS */
 
DCL M$STASH$ PTR STATIC;
DCL B$JIT$ PTR SYMREF;
DCL CHAR1 UBIN WORD STATIC;
DCL CHAR2 UBIN WORD STATIC;
DCL IDX_EQUAL UBIN WORD STATIC;
DCL INPUT_LEN UBIN WORD STATIC;
 
/*     DATA STRUCTURES */
 
DCL 1 STASH_KEY2 STATIC,
         2 LEN UBIN(9) UNAL,
         2 TEXT CHAR(10) UNAL;
%B$JIT0;                                /* BUILD JIT STRUCTURE                */
%U$JIT1;
         2 * BIT(1);                    /* REST OF JIT IS UNUSED              */
%F$DCB;                                 /* BUILD DCB STRUCTURE                */
%EJECT;
/* PROCEDURE */
 
/*     MAIN ROUTINE */
 
BEGIN: ;
/**/                                    /* SETUP STUFF                        */
     M$STASH$ = DCBADDR(DCBNUM(M$STASH)); /* CREATE POINTER TO STASH DCB   */
     STASH_ACCT.ACCT# = B$JIT$ -> B$JIT.ACCN;
/**/                                    /* EXAMINE INVOCATION LINE            */
     STASH_BUF = B$JIT$ -> B$JIT.CCBUF; /* SAMPLE THE INVOCATION LINE      */
     INPUT_LEN = B$JIT$ -> B$JIT.CCARS;
     CHAR1 = 0;                         /* POINT TO FIRST CHARACTER           */
     DO WHILE (SUBSTR(STASH_BUF,CHAR1,1)=' ');
          CHAR1 = CHAR1 +1;
        END;                            /* POINT TO FIRST NON-BLANK CHARACTER */
     CALL INDEX1(CHAR1,' ',STASH_BUF,CHAR1); /* POINT PAST INVOCATION FID  */
     DO WHILE (SUBSTR(STASH_BUF,CHAR1,1)=' ' AND CHAR1<255);
          CHAR1 = CHAR1 +1;
        END;                            /* POINT TO KEY FOR THE COMMAND       */
     IF CHAR1 > 254
     THEN                               /* BAD INVOCATION                     */
     DO;
          TERM_OUT_BUF = 'NO INPUT FUNCTION NAMED';
          GOTO STASH_ERROR;
        END;
     CHAR2 = CHAR1 +1;
     DO WHILE (SUBSTR(STASH_BUF,CHAR2,1)~=' '
          AND SUBSTR(STASH_BUF,CHAR2,1)~='=' AND CHAR2<255);
          CHAR2 = CHAR2 +1;
        END;                            /* POINT TO END O'KEY FOR THE COMMAND */
%EJECT;
/**/
/*  MAKE A KEY FROM THE FUNCTION NAME ON THE INVOCATION                       */
/**/
     STASH_KEY2.LEN = CHAR2 - CHAR1;
     IF STASH_KEY2.LEN > 10
     THEN                               /* INPUT FUNCTION NAME TOO LONG       */
     DO;
BAD_INF:  TERM_OUT_BUF = 'BAD INPUT FUNCTION';
          GOTO STASH_ERROR;
        END;
     STASH_KEY2.TEXT = SUBSTR(STASH_BUF,CHAR1,STASH_KEY2.LEN);
     STASH_KEY = STASH_KEY2;
     CALL INDEX(IDX_EQUAL,'=',STASH_BUF,CHAR1);
     IF IDX_EQUAL < 256
     THEN                               /* USER DEFINES/DELETES INPUT FUNCTION*/
          IF IDX_EQUAL = INPUT_LEN -1
          THEN                          /* DELETE                             */
               CALL DELETE ALTRET(STASH_ERROR);
          ELSE                          /* DEFINE                             */
               CALL DEFINE ALTRET(STASH_ERROR);
     ELSE                               /* USER INVOKES AN INPUT FUNCTION     */
          CALL INVOKE ALTRET(STASH_ERROR);
 
          DO WHILE ('0'B);
STASH_ERROR:   CALL M$OPEN(FPT_OPEN_TERM);
               CALL M$WRITE(FPT_WRITE_TERM);
               CALL M$CLOSE(FPT_CLOSE_TERM);
             END;
 
FINIS: CALL M$CLOSE(FPT_CLOSE_STASH);
     RETURN;
%EJECT;
DEFINE: PROC ALTRET;
/**/
/*  THE USER WISHES TO DEFINE AN INPUT FUNCTION                               */
/**/
     CALL M$OPEN(FPT_OPEN_STASH);
     STASH_BUF = SUBSTR(STASH_BUF,IDX_EQUAL +1); /* KEEP ONLY RIGHT SIDE*/
     FPT_WRITE_STASH.BUF_.BOUND = INPUT_LEN - IDX_EQUAL -2;
     CALL M$WRITE(FPT_WRITE_STASH);
END DEFINE;
%EJECT;
INVOKE: PROC ALTRET;
/**/
/*  THE USER WISHES TO INVOKE AN INPUT FUNCTION                               */
/**/
     FPT_OPEN_STASH.V.FUN# = %IN#;
     CALL M$OPEN(FPT_OPEN_STASH);
     CALL M$READ(FPT_READ_STASH) ALTRET(NOS_INF);
     IF STASH_KEY ~= STASH_KEY2
     THEN                               /* NO SUCH CHARACTER EXISTS           */
     DO;
NOS_INF:  TERM_OUT_BUF = 'NO SUCH INPUT FUNCTION';
          ALTRETURN;
        END;
     ELSE                               /* GOOD INPUT FUNCTION                */
     DO;
          FPT_SINPUT.BUF_.BOUND = M$STASH$ -> F$DCB.ARS# -1;
          CALL M$SINPUT (FPT_SINPUT);
        END;
END INVOKE;
%EJECT;
DELETE: PROC ALTRET;
/**/
/*  THE USER WISHES TO DELETE AN EXISTING INPUT FUNCTION                      */
/**/
     CALL M$OPEN (FPT_OPEN_STASH);
     CALL M$DELREC (FPT_DELREC_STASH) ALTRET(DEL_ALT);
     DO WHILE ('0'B);
DEL_ALT:  TERM_OUT_BUF = 'UNABLE TO DELETE THAT INPUT FUNCTION';
          IF '1'B THEN ALTRETURN;
        END;
END DELETE;
/**/
END STASH;
