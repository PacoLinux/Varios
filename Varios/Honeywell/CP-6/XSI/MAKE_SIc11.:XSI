/*M*    make_sym:c  --    symbol table management          */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
 
#include   <stdlib.h>
#include   "MAKE_Cc13"
#include   "MAKE_Cc14"
 
 
struct  sym_macro   *sym_macro_head  = 0;
struct  sym_target  *sym_target_head = 0;
struct  sym_ftype   *sym_ftype_head  = 0;
struct  sym_owner   *sym_owner_head  = 0;
 
char                *sym_text_block   = 0;
int                  sym_text_size    = 0;
#define              ALLOC_TEXT 1024
 
/* ALLOC_NUM  --  number of sym entries to malloc at a time   */
#define ALLOC_NUM   50
 
CONST struct  {
  char *CONST text;
  int   spec;
  int   sz;
  char *CONST repl;
  int   rsz;
  }  spec_macros[] = {
 
/*   Special Symbolic Macro Names      */
 
 {  "?", 2,1,    "$?",2}, {  "!", 3,1,    "$!",2},
 {  "%", 4,1,    "$%",2}, {  "$", 5,1,    "\200",1},
 {  "*", 6,1,    "$*",2}, {  "<", 7,1,    "$<",2},
 {  "@", 8,1,    "$@",2}, {  "&", 9,1,    "$&",2},
 {  "+",10,1,    "$+",2}, { "*F",11,2, "$(*F)",5},
 { "<F",12,2, "$(<F)",5}, { "@F",13,2, "$(@F)",5},
 { "&F",14,2, "$(&F)",5}, { "+F",15,2, "$(+F)",5},
 { "*D",16,2, "$(*D)",5}, { "<D",17,2, "$(<D)",5},
 { "@D",18,2, "$(@D)",5}, { "&D",19,2, "$(&D)",5},
 { "+D",20,2, "$(+D)",5}, { "$@",21,2, "$($@)",5},
 {"$@F",22,3,"$($@F)",6}, {"$@D",23,3,"$($@D)",6},
 {  "^",24,1,    "$^",2},
 
/*   Compiler Name Macros    */
 
  {       "CC",1,2,        "CC",2},  {     "PL6",1,3,      "PL6",3},
  {     "BMAP",1,4,      "BMAP",4},
  {     "YACC",1,4,   "BISON.X",7},  {     "LEX",1,3,   "FLEX.X",6},
  {  "FORTRAN",1,7,   "FORTRAN",7},  { "PARTRGE",1,7,  "PARTRGE",7},
  {   "FORMAT",1,6,  "FORMAT.X",8},  {  "HERMAN",1,6, "HERMAN.X",8},
  {      "TEX",1,3,       "TEX",3},  {  "PASCAL",1,6,   "PASCAL",6},
  {     "LINK",1,4,      "LINK",4},  {     "CAP",1,3,      "CAP",3},
  {   "TANGLE",1,6,    "TANGLE",6},  {   "WEAVE",1,5,    "WEAVE",5},
  {   "MIDGET",1,6,  "MIDGET.X",8}, {    "MAKE",1,4,   "MAKE.X",6},
 
/*   Default Compiler Options   */
 
  {   "COPTS",1,5,           "", 0}, { "PL6OPTS",1,7,    "(SCH)",5},
  {"BMAPOPTS",1,8,           "",0 },
  {"YACCOPTS",1,8,    "-d -o $@",8}, { "LEXOPTS",1,7,   "-t >$@",6},
  {"FORTOPTS",1,8,            "",0}, {"PARTOPTS",1,8,         "",0},
  { "FMTOPTS",1,7,      "(NFMT)",6}, {"HERMOPTS",1,8,"(NLS,NWA)",9},
  { "TEXOPTS",1,7,            "",0}, {"PASCOPTS",1,8,"(SC,NWARN)",10},
  {"LINKOPTS",1,8,            "",0}, {"MAKEFLGS",1,8,          "",0 },
  {"MIDGOPTS",1,8,        "-cvx",4}, {"MIDGSRCH",1,8,          "",0},
 
  { "JOBOPTS", 1,7,"Name=$(*F),ReRun",16},
  { "RESOPTS", 1,7,"Mem=128,Time=2",  14},
 
 
/*   Default Compiler non-serious severities */
 
  {    "CSEV",1,4,          "2", 1}, {  "PL6SEV",1,6,        "2",1},
  { "BMAPSEV",1,7,          "2", 1},
  { "YACCSEV",1,7,          "0", 1}, {  "LEXSEV",1,6,        "0",1},
  { "FORTSEV",1,7,          "2", 1}, { "PARTSEV",1,7,        "2",1},
  {  "FMTSEV",1,6,          "2", 1}, { "HERMSEV",1,7,        "2",1},
  {  "TEXSEV",1,6,          "2", 1}, { "PASCSEV",1,7,        "2",10},
  { "LINKSEV",1,7,          "2", 0},
 
/*   Paths for files:           */
 
  {      ".c", 1,2,         ":c",2 }, {      ".6", 1,2,      ":6",2},
  {      ".a", 1,2,         ":a",2 }, {      ".p", 1,2,      ":p",2},
  {      ".y", 1,2,         ":y",2 }, {      ".l", 1,2,      ":l",2},
  {      ".f", 1,2,         ":f",2 }, {      ".n", 1,2,      ":n",2},
  {      ".h", 1,2,         ":h",2 }, {      ".o", 1,2,      ":o",2},
  {      ".r", 1,2,           "",0 }, { ".herman", 1,7,  ":herman",7},
  {   ".help", 1,5,    "HELP:?:",7 }, {    ".tex", 1,4,     ":tex",4},
  {    ".dvi", 1,4,       ":dvi",4 }, {    ".cap", 1,4,     ":cap",4},
  {    ".web", 1,4,       ":web",4 },
  {    ".web", 1,4,       ":web",4 },{".makefile", 1,9,    "Make?",5},
  {".depends", 1,8,   ":depends",8 },
 
/*   Names of compilers:        */
 
  {     "..c", 1,3,         "CC",2 }, {     "..6", 1,3,     "PL6",3},
  {     "..a", 1,3,       "BMAP",4 }, {     "..p", 1,3,  "PASCAL",6},
  {     "..y", 1,3,       "YACC",4 }, {     "..l", 1,3,     "LEX",3},
  {     "..f", 1,3,    "FORTRAN",7 }, {     "..n", 1,3, "PARTRGE",7},
  {     "..h", 1,3,     "HEADER",6 }, {     "..o", 1,3,  "OBJECT",6},
  {     "..r", 1,3,   "RUN-UNIT",8 }, {"..herman", 1,8,  "HERMAN",6},
  {  "..help", 1,6,       "HELP",4 }, {   "..tex", 1,5,     "TEX",3},
  {   "..dvi", 1,5,        "DVI",3 }, {   "..cap", 1,5,     "CAP",3},
  {   "..web", 1,5,        "WEB",3 },
 
  {    "PATH", 1,4,     ".$(@D)",6 },
 
/*   Names of CP-6 accounts (directories) to search for files:   */
 
  {  "SIPATH",37,6,           "",0 }, {  "OUPATH",38,6,        "",0},
  {  "GNPATH",39,6,           "",0 }, {  "UIPATH",40,6,        "",0},
  {  "LOPATH",41,6,         "NO",2 }, {  "DOPATH",42,6,     ":do",3},
  {  "SPATHS",43,6,           "",0 },
 
/*   Electronic MAIL fields:                                     */
 
  {  "MAIL_SUBJECT", 45, 12,      "Integration Failures!", 21},
  {     "MAIL_COPY", 46,  9,                           "",  0},
  {     "MAIL_BODY", 47,  9,              " has failed! ", 12},
  {  "MAIL_SUMMARY", 48 ,12,"The following have failed: ", 27},
 
 
     };
 
 
/*D*    NAME:       lookup_sym
        PURPOSE:    To lookup a name in a symbol table.
        DESCRIPTION:
           This is a special generic symbol table manager that
           is used to manage different symbol tables.  The only
           difference in the handling of the symbol tables is the
           function used to allocate a new symbol table entry.
           The function is passed as an argument to this function
           so that when a name being looked up is not found and the
           enter option is specified then the name will be added
           to the symbol table (or not).
 
           When a name cannot be added to the symbol table or when
           enter is not specified and the name is not in the symbol
           table this function returns a NULL pointer.
*/
struct sym_ *
lookup_sym(ht, name, nm_len, enter, sym_alloc)
  struct hash_table *ht;
  char              *name;
  int               nm_len;
  int               enter;
  struct sym_     *((*sym_alloc)());
{
  int   cmprs = 0;
  int   h = sym_hash(name, nm_len) % ht->hash_size;
  struct sym_ **s = & ht->table[h];
  struct sym_ *rs;
 
  ht->hash_looks++;
  while (rs = *s)  {
     cmprs++;
     if (rs->sym_len == nm_len && memcmp(rs->sym_text,name,nm_len)==0)
        break;
     s = &rs->next;
     }
 
  ht->hash_cmprs += cmprs;
  if (rs) {
     ht->hash_hits++;
     return rs;
     }
 
  if (!enter) return 0;
 
  if(!(rs = sym_alloc(name,nm_len,enter))) return 0;
  ht->hash_syms++;
  rs->next = 0;
  *s = rs;
  return rs;
}
 
int sym_hash(name,len)
  char  *name;
  int   len;
{
  int   rs = 0;
  int   c  = 0;
 
  while(len > 0)
     if ( (c = *name++) == 128 )
        rs = rs + '$', len--, *(name-1) = '$';
     else rs = rs + c, len--;
 
  return rs;
}
 
/*D*    NAME:    alloc_sym_target
        PURPOSE: To allocate a target symbol table entry.
*/
 
struct sym_ *
alloc_sym_target(name, nm_len, flag)
  char     *name;
  int      nm_len;
  int      flag;
{
  char     *alloc_text();
  struct   sym_target *rs;
  char     *s, *c;
  int      i;
 
  if (!sym_target_head)   {
     int   sz = sizeof(struct sym_target) * ALLOC_NUM;
     i = ALLOC_NUM;
     rs = (struct sym_target *)malloc(sz);
     if (!(sym_target_head = rs)) return 0;
     mem_targets[0] += sz;
     while (--i) rs->next = rs+1, rs++;
     rs->next = 0;
     }
  rs = sym_target_head;
  sym_target_head = rs->next;
  *rs = init_sym_target;
  rs->tg_len = nm_len;
  rs->tg_status = STATUS_UNUSED;
  TargetListHead->tg_list = rs;
  TargetListHead = rs;
  mem_targets[1] += sizeof(struct sym_target);
 
  if (flag & 1)  {  /* need to allocate a permanent block of mem */
     c = s = rs->tg_text = alloc_text(nm_len+1,name);
     if (!s) return 0;
     s[nm_len] = 0;
     }
  else c = s = rs->tg_text = name;
 
  i = 0;
  s = s + nm_len-1;
  while (nm_len && *s != '.') s--, i++, nm_len--;
  if (nm_len && *s == '.') rs->tg_suffix_len = i+1;
  if (rs->tg_suffix_len)
     rs->tg_ftype = lookup_sym_ftype(s+1, i, 2);
  else rs->tg_ftype = lookup_sym_ftype("r", 1, 2);
 
  if (*c == '.'  &&  rs->tg_suffix_len < rs->tg_len) { /*input type*/
     s = c+1, i=0;
     while (s[i] != 0 && s[i] != '.') i++;
     if (i)   /*  An input file type is present...   */
        rs->tg_inftype = lookup_sym_ftype(c+1, i, 1);
     else rs->tg_inftype = lookup_sym_ftype("r", 1, 1);
     }
 
  if (*c == '.') {     /*  Build commands   */
     *JclRulesHead = rs;
     JclRulesHead = &rs->tg_tgrule;
     rs->tg_ftype->ft_out++;
     if (rs->tg_inftype && rs->tg_inftype != rs->tg_ftype)
        rs->tg_inftype->ft_in++;
     }
 
  return (struct sym_ *) rs;
}
 
/*D*    NAME:    alloc_sym_macro
        PURPOSE: To allocate a macro symbol table entry.
*/
 
struct sym_ *
alloc_sym_macro(name, nm_len, flag)
  char     *name;
  int      nm_len;
  int      flag;
{
  char     *alloc_text();
  struct   sym_macro *rs;
  char     *s, *v, *defval = 0;
  int      deflen = 0;
  int      i;
 
  if (flag & 4)  {     /*  Setup value from environment */
     char  sname = name[nm_len];
     char  *namev = name;
     char buf[88];
     if (sname) name[nm_len] = 0;
     if (*name == '.') {
        memcpy(buf,"f#",3);
        memcpy(buf+2,name+1,nm_len);
        namev = buf;
        }
     if (v = getenv(namev))   {
        flag |= (flag & 2)? 0 : 1;
        deflen = strlen(v);
        defval = alloc_text(1+deflen, v);
        }
     if (sname) name[nm_len] = sname;
     if (! (flag & 3) ) return 0;
     }
  if (!sym_macro_head)   {
     int sz = sizeof(struct sym_macro) * ALLOC_NUM;
     i = ALLOC_NUM;
     rs = (struct sym_macro *)malloc(sz);
     if (!(sym_macro_head = rs)) return 0;
     mem_macros[0] += sz;
     while (--i) rs->next = rs+1, rs++;
     rs->next = 0;
     }
  rs = sym_macro_head;
  sym_macro_head = rs->next;
  rs->next       = 0;
  rs->mc_len     = nm_len;
  rs->mc_deflen  = deflen;
  rs->mc_def     = defval;
  rs->mc_used    = 0;
  rs->mc_cmdline = 0;
  rs->mc_default = 0;
  rs->mc_level   = 0;
  mem_macros[1] += sizeof(struct sym_macro);
 
  if (flag & 1)  {  /* need to allocate a permanent block of mem */
     s = rs->mc_sym = alloc_text(nm_len+1,name);
     if (!s) return 0;
     s[nm_len] = 0;
     }
  else s = rs->mc_sym = name;
 
  return (struct sym_ *) rs;
}
 
 
/*D*    NAME:          alloc_sym_ftype(name, nm_len, flag)
        PURPOSE:       To allocate a file type symbol table entry.
*/
struct sym_ *
alloc_sym_ftype(name, nm_len, flag)
  char     *name;
  unsigned  nm_len;
  unsigned  flag;
{
  char                 *alloc_text();
  struct   sym_ftype   *rs, **t;
  char                 *s;
  int                   i;
 
  if (!sym_ftype_head) {  /* need to allocate more file types */
     int   sz = sizeof(struct sym_ftype) * ALLOC_NUM + sizeof(int*);
     t = (struct sym_ftype **)malloc(sz);
     if (!t) return 0;
     mem_ftypes[0] += sz;
     mem_ftypes[1] += sizeof(int *);
     *t = (struct sym_ftype *) Filetypes;
     Filetypes = t;
     rs = sym_ftype_head = (struct sym_ftype *) (1+t);
     i = ALLOC_NUM;
     while (--i) rs->next = rs+1, rs++;
     rs->next = 0;
     }
  rs = sym_ftype_head;
  sym_ftype_head = rs->next;
  rs->next = 0;
  rs->ft_rules = 0;
  rs->ft_len = nm_len;
  rs->ft_num = i = Nfiletypes++;
  rs->ft_in    = 0;
  rs->ft_out   = 0;
  mem_ftypes[1] += sizeof(struct sym_ftype);
 
  if (flag & 1)  {  /*  need to alloc block to hold text      */
     s = rs->ft_text = alloc_text(nm_len+1,name);
     if (!s) return 0;
     s[nm_len] = 0;
     }
  else rs->ft_text = name;
 
  return (struct sym_ *) rs;
}
 
 
/*D*    NAME:          alloc_sym_owner(name, nm_len, flag)
        PURPOSE:       To allocate a file owner symbol table entry.
*/
struct sym_ *
alloc_sym_owner(name, nm_len, flag)
  char     *name;
  unsigned  nm_len;
  unsigned  flag;
{
  char                 *alloc_text();
  struct   sym_owner   *rs;
  char                 *s;
  int                   i;
 
  if (!sym_owner_head) {  /* need to allocate more file owners */
     int   sz = sizeof(struct sym_ftype) * ALLOC_NUM;
     rs = (struct sym_owner *)malloc(sz);
     if (!(sym_owner_head = rs)) return 0;
     mem_owners[0] += sz;
     i = ALLOC_NUM;
     while (--i) rs->next = rs+1, rs++;
     rs->next = 0;
     }
  rs = sym_owner_head;
  sym_owner_head = rs->next;
  *rs = init_sym_owner;
  rs->ow_len = nm_len;
  mem_owners[1] += sizeof(struct sym_owner);
 
  if (flag & 1)  {  /*  need to alloc block to hold text      */
     s = rs->ow_text = alloc_text(nm_len+1,name);
     if (!s) return 0;
     s[nm_len] = 0;
     }
  else rs->ow_text = name;
 
  return (struct sym_ *) rs;
}
 
 
/*D*    NAME:       alloc_text(n)
        PURPOSE:    To return a pointer to some text that will never
                    be freed.
*/
char *
alloc_text(n,s)
  int      n;
  char    *s;
{
  char     *rs;
 
  if (sym_text_size < n)  {
     int alloc = (n > 100) ? ALLOC_TEXT+100*((n+100)/n) : ALLOC_TEXT;
     sym_text_block = (char *) malloc(alloc);
     if (!sym_text_block) return 0;
     sym_text_size  = alloc;
     mem_strings[0] += alloc;
     mem_strings[2] += sym_text_size;
     }
  rs = sym_text_block;
  mem_strings[1] += n;
  sym_text_block += n;
  sym_text_size  -= n;
  if (s) memcpy(rs,s,n);
  return rs;
}
 
 
/*D*    NAME:          init_macros
        PURPOSE:       To seed the symbol table with the special
                       macro names.
*/
 
init_macros() {
 
int  i  = sizeof(spec_macros)/20;
int  j;
struct sym_macro *s;
struct sym_ *alloc_sym_macro();
 
  for (j=0; j<i ; j++) {
     s = lookup_sym_macro(spec_macros[j].text, spec_macros[j].sz, 6);
     if (!s) crash("Unable to get memory to initialize");
     sym_macro_specials[spec_macros[j].spec] = s;
     if (!s->mc_cmdline && !s->mc_def)  {
        s->mc_def    = spec_macros[j].repl;
        s->mc_deflen = spec_macros[j].rsz;
        s->mc_default = 1;
        }
     }
 
  return;
}
 
print_hash_stats()  {
  printf("\n *** Hash Table Statistics ***\n");
  print_hashtable_statistics(&macro_hash_table,"Macros");
  print_hashtable_statistics(&target_hash_table,"Target Names");
  print_hashtable_statistics(&ftype_hash_table,"File Types");
  print_hashtable_statistics(&owner_hash_table,"Target Owners");
  printf("\n");
}
 
print_hashtable_statistics(ht,name)
  struct hash_table    *ht;
  char                 *name;
{
  printf("%14s Size=%d, Entries=%d,",name,ht->hash_size,ht->hash_syms);
  printf(" Compares=%d, Lookups=%d,",ht->hash_cmprs, ht->hash_looks);
  printf(" Hits=%d\n",ht->hash_hits);
}
 
 
 
dump_hash_table(ht,name)
  struct hash_table *ht;
  char              *name;
{
  int   i;
  int   i_printed = 0;
  int   n_printed = 0;
  int   w_printed = 0;
 
  printf("\n\n");
  print_hashtable_statistics(ht,name);
  for ( i=0 ; i<ht->hash_size ; i++ ) {
     struct sym_ *s = ht->table[i];
     int fw;
     while (s) {
        if (!i_printed) {
           printf("\n**** Hash Value = %3d ** ",i);
           i_printed++;
           w_printed = 25;
           }
        fw = 5 * ((s->sym_len+5) / 5);
        w_printed += fw;
        if (w_printed > 78) {
           printf("\n");
           w_printed = fw;
           }
        printf("%-*s",fw,s->sym_text), n_printed++;
        s = s->next;
        }
     i_printed = 0;
     }
  printf("\n **** End of Hash Table: \"%s\"\n",name);
  printf(  "      Entries found=%d, Indicated Entries=%d\n",
           n_printed, ht->hash_syms);
}
 
 
