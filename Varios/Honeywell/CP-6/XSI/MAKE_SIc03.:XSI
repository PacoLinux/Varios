/*M*    make_defvar:c     -- Define "automatic" variables  */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
 
#ifndef IN_DERIVE
#include   <stdlib.h>
#include   <stdio.h>
#include   <string.h>
#include   "MAKE_Cc13"
#include   "MAKE_Cc14"
 
struct  derive_list {
  struct   dependancy  *dl_depend;
  int                   dl_index;
  int                   dl_early;
  timetype              dl_modtime;
  };
 
extern struct  derive_list   *dl;
extern int                    dl_size;
extern int                    dl_i;
 
char       *alloc_text();
#define DL_ALLOC 10
#endif
 
timetype   file_modtime();
void       rsstrcat();
 
 
 
 
/*F*    NAME:       build_changed_list( struct sym_target *tg )
        PURPOSE:    To create the value of the $? variable.
        DESCRIPTION:
           This function is called when the actions to build a target
           reference the $? variable and its status is not completed.
 
           The value of this variable is the list of target file names
           representing the targets that are depending upon the
           current step and whose last modification dates are more
           recent than the time of the current target.
 
           There may be many possible paths that would cause this
           target to be generated, however, the value of this variable
           reflects the first such path discovered by MAKE.
*/
 
 
static  int   rs_strsz = 0;
static  int   rs_strps = 0;
static  char *rs_str   = 0;
 
void
build_changed_list(tg)
  struct sym_target *tg;
{
  struct target_action *a;
  struct sym_target    *tgroot  = tg;
  struct dependancy   *d;
  int                   i       = 0, j;
  int                   dl_stop = dl_i;
  timetype              tg_modt = file_modtime(tg->tg_fid);
 
  if (tg_modt == END_OF_TIME) tg_modt = BEGINNING_OF_TIME;
  rs_strsz = rs_strps = 0;
  rs_str   = 0;
start:
  d = tg->tg_depend;
  i = 0;
  while (d)   {
     for (; i < d->dp_num ; i++)   {
        struct sym_target *t = d->dp_list[i];
        if (t->tg_status == STATUS_WAITING || tg_modt < tg->tg_modtime) {
           for ( j=dl_stop; j<dl_i ; j++ )
              if (t == dl[j].dl_depend->dp_target)
                 break;
           if (j < dl_i || tgroot == t) goto resume;
           dl_push(d, i, BEGINNING_OF_TIME, BEGINNING_OF_TIME);
           tg = t;
           goto start;
           }
resume: ;
        }
     d = d->dp_tgdepend, i = 0;
     }
  if (tg->tg_status == STATUS_WAITING || tg_modt<tg->tg_modtime) {
     if (tg->tg_fid && dl_i > dl_stop)
        rsstrcat( tg->tg_fid+1, tg->tg_fid[0] );
     }
  a = tg->tg_action;
  if (a && a->ta_tginput) {
     struct sym_target *t = a->ta_tginput;
     if (t->tg_fid  && (tg_modt < file_modtime(t->tg_fid ) || t->tg_new))
        rsstrcat( t->tg_fid+1,  t->tg_fid[0]);
     if (t->tg_ufid && tg_modt < file_modtime(t->tg_ufid) && !t->tg_new)
        rsstrcat( t->tg_ufid+1, t->tg_ufid[0]);
     }
 
  if (dl_i > dl_stop)  {
     dl_pop(&d, &i, &j, &j);
     tg = d->dp_target;
     goto resume;
     }
 
  if (rs_strps > 0) {
     savemoney(rs_str);
     tgroot->tg_action->ta_chngvar = alloc_text(rs_strps+1, rs_str);
     free(rs_str);
     rs_str = 0;
     rs_strps = rs_strsz = 0;
     }
  else tgroot->tg_action->ta_chngvar = "";
  return;
}
 
dl_push( d, i, es, mt)
  struct   dependancy *d;
  int                  i;
  timetype             es;
  timetype             mt;
{
  if (dl_i >= dl_size) {
     int k = (dl_size += DL_ALLOC) * sizeof(struct derive_list);
     dl = (struct derive_list *) realloc(dl, k);
     if (!dl) crash("Out of Memory: Derive_Target\n");
     }
  dl[dl_i].dl_depend   =  d;
  dl[dl_i].dl_index    =  i;
  dl[dl_i].dl_early    =  es;
  dl[dl_i].dl_modtime  =  mt;
  dl_i++;
}
 
dl_pop(d, i, es, mt)
  struct   dependancy **d;
  int                  *i;
  timetype             *es;
  timetype             *mt;
{
  dl_i--;
  *d  = dl[dl_i].dl_depend;
  *i  = dl[dl_i].dl_index;
  *es = dl[dl_i].dl_early;
  *mt = dl[dl_i].dl_modtime;
}
 
 
timetype
file_modtime( fid )
  char  *fid;
{
  FILE  *f = fopen( fid+1, "r");
  timetype rs = (f)? f->_mod_time : END_OF_TIME;
  if (f) fclose(f);
  return rs;
}
 
void
rsstrcat( st, sz)
  char     *st;
  int       sz;
{
  char     *sub = (sz && rs_str) ? strstr(rs_str, st) : 0;
  if (sz == 0) return;
 
  while (sub) {     /* Don't add name if its already there!   */
     if ((sub[sz]==' ' || sub[sz]=='\000')  &&  sub[-1] == '\177')
        return;
     sub = strstr(sub+1, st);
     }
 
  if (rs_strsz <= (rs_strps + 3 + sz))   {  /* Extend string  */
     rs_strsz = (1025 + rs_strps + sz) / 1024 * 1024;
     rs_str   = (char *) realloc(rs_str, rs_strsz);
     if (!rs_str) crash("Out of memory: Building $?\n");
     }
  if (rs_strps)  rs_str[rs_strps++] = ' ';
  rs_str[rs_strps++] = '\177';
  memcpy(rs_str+rs_strps, st, sz);
  rs_strps += sz;
  rs_str[rs_strps] = 0;
  return;
}
 
 
 
 
/*F*    NAME:       build_predecessor_list( struct sym_target *tg )
        PURPOSE:    To create the value of the $! variable.
        DESCRIPTION:
           This function is called when the actions to build a target
           reference the $! variable and its status is not completed.
 
           The value of this variable is the list of target file names
           representing the targets that are depending upon the
           current step.
 
           There may be many possible paths that would cause this
           target to be generated, however, the value of this variable
           reflects the first such path discovered by MAKE.
*/
 
build_predecessor_list(tg)
  struct sym_target *tg;
{
  struct target_action *a = tg->tg_action;
  char   *c, *p;
  int     n = dl_i;
  int     sz = 0;
 
  while (n > 0)  {
     struct sym_target *t = dl[--n].dl_depend->dp_target;
     if (t->tg_fid)   {
        if (t->tg_ufid)
           sz += t->tg_fid[0] + t->tg_ufid[0] + 3;
        else sz += t->tg_fid[0] + 1;
        }
     else sz += t->tg_len + 1;
     }
 
  if (sz <= 0) {
     a->ta_predvar = "";
     return;
     }
  n = dl_i;
  sz += (n > 0) ? n : 0;
  a->ta_predvar = c = alloc_text(1+sz);
 
  while (n > 0)  {
     struct sym_target *t = dl[--n].dl_depend->dp_target;
     if (t->tg_fid)   {
        if (t->tg_ufid)  {
           *c++ = 0177;
           memcpy(c, t->tg_fid+1, (sz = t->tg_fid[0])), c += sz;
           *c++ = ',';
           p    = t->tg_ufid + 1;
           sz   = t->tg_ufid[0];
           }
        else {
           p    = t->tg_fid + 1;
           sz   = t->tg_fid[0];
           }
        }
     else {
        p = t->tg_text;
        sz = t->tg_len;
        }
     *c++ = 0177;
     memcpy(c, p, sz), c+= sz;
     if (n) *c++ = ' ';
     }
  *c = 0;
  savemoney(a->ta_predvar);
}
 
 
 
 
/*F*    NAME:       build_dependent_list( struct sym_target *tg )
        PURPOSE:    To create the value of the $^ variable.
        DESCRIPTION:
           This function is called when the actions to build a target
           reference the $^ variable and its status is not completed.
 
           The value of this variable is the list of target file names
           representing the targets that are dependents of the
           target file.
 
*/
 
build_dependent_list(tg)
  struct sym_target *tg;
{
  struct target_action *a = tg->tg_action;
  struct dependancy *d = tg->tg_depend;
  char   *c, *p;
  int     i, n=0;
  int     sz = 0;
 
  while (d)  {
     for (i=0 ; i<d->dp_num ; i++) {
        struct sym_target *t = d->dp_list[i];
        if (t->tg_fid)   {
           if (t->tg_ufid)
              sz += t->tg_fid[0] + t->tg_ufid[0] + 3;
           else sz += t->tg_fid[0] + 1;
           }
        else sz += t->tg_len + 1;
        n++;
        }     /* End of for   loop */
     d = d->dp_tgdepend;
     }        /* End of while loop */
 
  if (sz <= 0) {
     a->ta_dpndvar = "";
     return;
     }
  d = tg->tg_depend;
  sz += (n > 0) ? n : 0;
  a->ta_dpndvar = c = alloc_text(1+sz);
 
  while (d)  {
     for (i=0 ; i<d->dp_num ; i++) {
        struct sym_target *t = d->dp_list[i];
        if (t->tg_fid)   {
           if (t->tg_ufid)  {
              *c++ = 0177;
              memcpy(c, t->tg_fid+1, (sz = t->tg_fid[0])), c += sz;
              *c++ = ',';
              p    = t->tg_ufid + 1;
              sz   = t->tg_ufid[0];
              }     /* end of ui   fid */
           else {
              p    = t->tg_fid + 1;
              sz   = t->tg_fid[0];
              }     /* end of else fid */
           }        /* end of      fid */
        else {
           p = t->tg_text;
           sz = t->tg_len;
           }        /* end of no   fid */
        *c++ = 0177;
        memcpy(c, p, sz), c+= sz;
        if (--n) *c++ = ' ';
        }     /* End of for   loop */
     d = d->dp_tgdepend;
     }        /* End of while loop */
  *c = 0;
  savemoney(a->ta_dpndvar);
}
 
 
 
savemoney(st)
  char  *st;
{
  int   i = strlen(st);
  char *c;
 
  while (c = memchr(st, '$', i))
     *c = 128;
}
 
 
 
restoremoney(st)
  char  *st;
{
  int   i = strlen(st);
  char *c;
 
  while (c = memchr(st, 128, i))
     *c = '$';
}
