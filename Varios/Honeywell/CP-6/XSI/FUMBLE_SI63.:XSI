/*M* YFA$PARSE - PARSE ROUTINE FOR FUMBLE */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
YFA$PARSE: PROC ALTRET;
DCL CHAR60 CHAR(60) BASED;
DCL CHAR1 CHAR(1) BASED;
DCL CHAR4 CHAR(4) BASED;
DCL OPT$ PTR STATIC;
DCL CUR$ PTR STATIC;
DCL CODE UBIN;
DCL I UBIN;
DCL J UBIN;
DCL K UBIN;
DCL NUM_SEL UBIN;
                                        /* PARSE STUFF                        */
%INCLUDE XU_MACRO_C;
%INCLUDE XUG_ENTRY;
%XUG_INIT (COMMANDS=NO, GOODCMD=YES);
%XUG_GETCMD (NODES=YF_CMD);
%PARSE$OUT (NAME=OUTBLK, STCLASS=BASED);
%PARSE$SYM (NAME=OUTSYM, STCLASS=BASED);
                                        /* CP6 MACROS*/
%INCLUDE CP_6;
%M$DCB (DCBN=M$SI,ASN=FILE,NAME='*CONTINUATION_COMMANDS');
%FPT_WRITE (FPTN=WRITELO, STCLASS=SYMREF);
                                        /**/
%INCLUDE FUMBLE_C1;                     /*YF_SUBS_C*/
%INCLUDE FUMBLE_DATA_R;
%INCLUDE B$JIT;
DCL B$JIT$ PTR SYMREF;
DCL YF_CMD UBIN SYMREF;
                                        /**/
     IF NOT B$JIT.PRFLAGS.CONTINUED
     THEN XUG_GETCMD.TEXT_ = VECTOR(SUBSTR(B$JIT.CCBUF,0,B$JIT.CCARS));
     CALL XUG$INIT(XUG_GETCMD,XUG_INIT) ALTRET(CALL_ERR);
     CALL XUG$GETCMD(XUG_GETCMD) ALTRET(CALL_ERR);
     YF_LIST_FID = ':LIST';             /* SETUP DEFAULT LISTFILE NAME        */
     IF XUG_GETCMD.OUT$->OUTBLK.NSUBLKS > 0
     THEN DO;                           /* WE'VE GOT OPTIONS (OH JOY)         */
          DO K = 0 TO XUG_GETCMD.OUT$->OUTBLK.NSUBLKS-1;
          OPT$ = XUG_GETCMD.OUT$->OUTBLK.SUBLK$(K);
          DO CASE(OPT$->OUTBLK.CODE);
          CASE(C_FID);
             YF_LIST_FID = OPT$->OUTSYM.TEXT;
          CASE(C_OPTS);
          DO I = 0 TO OPT$->OUTBLK.NSUBLKS-1;
               CUR$ = OPT$->OUTBLK.SUBLK$(I);
               DO CASE (CUR$->OUTBLK.CODE);
               CASE(C_STD);
                  YF_STD_FID = CUR$->OUTBLK.SUBLK$(0)->OUTSYM.TEXT;
                  YF_STD_F = '1'B;
               CASE(C_BUILDLIST);
                  YF_BUILD_F = '1'B;
                  YF_BUILD = CUR$->OUTBLK.SUBLK$(0)->OUTSYM.TEXT;
               CASE(C_SEL);
                  YF_SEL_NUM = CUR$->OUTBLK.NSUBLKS;
                  IF YF_SEL_NUM > 10 THEN GOTO TOO_MANY_SEL;
                  YF_SEL_F = '1'B;
                  DO J = 0 TO YF_SEL_NUM-1;
                     YF_SEL(J) = CUR$->OUTBLK.SUBLK$(J)->OUTSYM.TEXT;
                     END;               /* DO J                               */
               CASE(C_SUB);
                   YF_SUB_F = '1'B;
                  IF CUR$->OUTBLK.SUBLK$(0)->OUTSYM.COUNT > 256
                  THEN GOTO SUB_TOO_LONG;
                  YF_SUB = CUR$->OUTBLK.SUBLK$(0)->OUTSYM.TEXT;
                  YF_SUB_LEN = CUR$->OUTBLK.SUBLK$(0)->OUTSYM.COUNT;
               CASE(C_MAXQ);
                  CALL CHARBIN(YF_MAXQ, CUR$->OUTBLK.SUBLK$(0)->OUTSYM.TEXT);
               CASE(C_SYSID);
                  YF_SYSID_F = '1'B;
                  YF_SYSID = CUR$->OUTBLK.SUBLK$(0)->OUTSYM.TEXT;
               CASE(C_X);
                  YF_X = CUR$->OUTBLK.SUBLK$(0)->OUTSYM.TEXT;
                  YF_X_F = '1'B;
               CASE(C_RESTART);
                  YF_RESTART_F= '1'B;
                  YF_RESTART = CUR$->OUTBLK.SUBLK$(0)->OUTSYM.TEXT;
               CASE(C_JCLACCT);
                  YF_JCLACCT_F = '1'B;
                  CALL CONCAT (YF_JCLACCT, '.', CUR$->OUTBLK.SUBLK$(0)->OUTSYM.TEXT);
                  YF_JCLACCT_LEN = CUR$->OUTBLK.SUBLK$(0)->OUTSYM.COUNT + 1;
               CASE(C_T);
                  YF_T_F = '1'B;
               CASE(C_SILENT);
                  YF_SILENT = '1'B;
               CASE(ELSE);
                  CALL M$ERR;
               END;                     /* CASE CUR$->CODE                    */
          END;                          /* DO I                               */
       END;                             /* CASE OPT$->CODE                    */
      END;                              /* DO K                               */
     END;                               /* IF OPTIONS                         */
     RETURN;
                                        /**/
SUB_TOO_LONG:
     YF_OUTBUF = 'SUB STRING EXCEEDS 132 CHARACTERS';
     CALL M$WRITE(WRITELO);
CALL_ERR:
     ALTRETURN;
TOO_MANY_SEL:
     YF_OUTBUF = 'NO MORE THAN 10 SEL NAMES ARE ALLOWED';
     CALL M$WRITE(WRITELO);
     ALTRETURN;
END YFA$PARSE;
