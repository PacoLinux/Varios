/*M* TIGRCUB_SI61 - MINI-TIGR driver routines  and service routines */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/*X* DMR,PLM=5,IND=5,CTI=5,SDI=5,MCL=10,CSI=0,ECI=0 */
                                   /*
                                        Author: J.L.Joseph, LADC
                                                D.E.Wagner, LADC
                                        Date: 2/86
                                                                  */
%SET LISTSUB='1'B;
 
 
TIGRCUB: PROC MAIN;
 
DCL ITT$TIGR ENTRY;
DCL CUBOPTS ENTRY ALTRET;
DCL ITF$FREEZE ENTRY;
DCL M$DO DCB;
 
%INCLUDE CP_6;
%INCLUDE B_SEGIDS_C;
%INCLUDE IT$CONFIG;
%INCLUDE NI_DATA_R;
 
%SUB NGARB#="80 /*NGARB#*/";
%SUB NTIGR#="255 /* NTIGR# */";
 
     %FPT_GDS (FPTN=GET_A_SEG,
                    RESULTS=SEGMENT,
                    SEGSIZE="%(NTIGR#*1024)");
 
     %VLP_VECTOR (FPTN=SEGMENT,
                    SEGID=%DS3SID);
 
     %FPT_GDS (FPTN=GET_GARBAGE,
                    RESULTS=SEGMENT2,
                    SEGSIZE="%(1024*NGARB#)");
 
     %VLP_VECTOR (FPTN=SEGMENT2,
                    SEGID=%DS4SID);
 
     %FPT_WRITE (FPTN=MEM_MSG,
                    DCB=M$DO,
                    BUF=BAD_MEM);
 
DCL BAD_MEM CHAR(0) STATIC INIT
  ('**** cannot get memory; !ORES MEM=400 (or more)');
 
 
DCL PAGEBASE (0:1023) SBIN WORD BASED;
DCL I SBIN;
DCL J SBIN;
DCL PTR$ PTR STATIC;
     %IT$CONFIG (NAME=IT_CONFIG,STCLASS=SYMREF);
 
DCL B_DS2(0:5119) SBIN WORD STATIC SYMDEF; /* PARSE WORK AREA */
 
DCL B_DS3(0:1023) SBIN WORD STATIC SYMDEF; /* DCT TABLE HOLD AREA */
 
DCL B_DS4(0:2047) SBIN WORD STATIC;     /* READ BUFFER */
 
DCL B_DS5(0:1023) SBIN WORD STATIC;     /* COMMAND TABLE TEMP AREA */
 
DCL B_DS6(0:1023) SBIN WORD STATIC;     /* SPROC TABLE TEMP AREA */
 
/* DCL B_PATCHI SBIN STATIC SYMDEF; */
DCL IT_DBUF SBIN STATIC SYMDEF;
DCL IT_DBUFEND SBIN STATIC SYMDEF;
DCL IT_RBUFF SBIN STATIC SYMDEF;
DCL IT_RBUFFEND  SBIN STATIC SYMDEF;
/*DCL B_PATCHIH  SBIN STATIC SYMDEF; */
DCL S_PORTNR SBIN SYMREF;
DCL MM_PCORE SBIN SYMREF;
DCL HW_TYPE UBIN SYMREF;
 
/**/
DCL IT_TIGRCUB BIT(1) ALIGNED SYMREF;   /* symdefed in wrapup */
/**/
DCL B$DS1$ PTR STATIC SYMDEF ;
DCL B$DS2$ PTR STATIC SYMDEF INIT (ADDR(B_DS2));
DCL B$DS3$ PTR STATIC SYMDEF INIT (ADDR(B_DS3));
DCL B$DS4$ PTR STATIC SYMDEF INIT (ADDR(B_DS4));
DCL B$DS5$ PTR STATIC SYMDEF INIT (ADDR(B_DS5));
DCL B$DS6$ PTR STATIC SYMDEF INIT (ADDR(B_DS6));
DCL B$MPT$ PTR STATIC SYMDEF ;
DCL B$TIGR$ PTR STATIC SYMDEF;
DCL B$REAL$ PTR STATIC SYMDEF ;
DCL B$PPUT$ PTR STATIC SYMDEF ;
DCL B$UPT$ PTR STATIC SYMDEF ;
DCL B$WSQ0PT$ PTR STATIC SYMDEF ;
DCL B$WINDOW$ PTR STATIC SYMDEF ;
DCL B$MONJIT$ PTR STATIC SYMDEF ;
DCL B$MONHJIT$ PTR STATIC SYMDEF ;
DCL B$MONTSTACK$ PTR STATIC SYMDEF ;
DCL B$TSTACK$ PTR STATIC SYMDEF ;
DCL B$ROSEG$ PTR STATIC SYMDEF ;
DCL B$SEGTBL$ PTR STATIC SYMDEF ;
DCL B$IPHYMAP$ PTR STATIC SYMDEF ;
DCL B$LS$ PTR STATIC SYMDEF ;
DCL B$IS$ PTR STATIC SYMDEF ;
DCL B$LOWMEM$ PTR STATIC SYMDEF ;
DCL B_MPT PTR STATIC SYMDEF ;
DCL KI_TCTX$$ PTR  SYMREF;
DCL KIS_APPLINFO$ PTR STATIC SYMDEF;
DCL KIS_SRVRNAME$ PTR STATIC SYMDEF;
 
DCL ANY_ERRORS BIT(1) ALIGNED SYMREF;
 
 
DCL 1 FM_SYSDP SYMREF,                  /* THIS FORM MAKES IT EASY FOR BOOT   */
         2 PORT UBIN(9) UNAL,
         2 CHN UBIN(9) UNAL,
         2 DVN UBIN(9) UNAL,
         2 * UBIN(9) UNAL;
DCL 1 FM_POTAPE SYMREF,                 /* THIS FORM MAKES IT EASY FOR BOOT   */
         2 PORT UBIN(9) UNAL,
         2 CHN UBIN(9) UNAL,
         2 DVN UBIN(9) UNAL,
         2 * UBIN(9) UNAL;
DCL B$IMX$ PTR SYMREF;                  /* IN TIGRCUB_SI62 */
DCL B$DVTTBL$ PTR STATIC SYMDEF;        /* PE02E */
%NI$DVT;                                /* PE02E */
%NI$DVT (NAME=NI_SCDVT,STCLASS="SYMREF");
DCL SEGP$ PTR;
/**/
DCL IT_BOOTFLAG SBIN SYMREF;
%EJECT;
 
/*
 *   BEGIN TIGRCUB MAIN
 */
 
     CALL M$GDS (GET_A_SEG)
     WHENALTRETURN
     DO;
          CALL M$MERC;
        END;
     IF SEGMENT = VECTOR(NIL) OR
          ((SEGMENT.W1.VSIZE#+1)/(4*1024))~=NTIGR#
     THEN
     DO;
          CALL M$WRITE (MEM_MSG);
          CALL M$ERR;
        END;
 
     B$TIGR$ = SEGMENT.PTR$;
 
     CALL M$GDS (GET_GARBAGE)
     WHENALTRETURN
     DO;
          CALL M$MERC;
        END;
     IF SEGMENT2 = VECTOR(NIL) OR
          ((SEGMENT2.W1.VSIZE#+1)/(4*1024))~=NGARB#
     THEN
     DO;
          CALL M$WRITE (MEM_MSG);
          CALL M$ERR;
        END;
 
     PTR$ = SEGMENT2.PTR$;
     DO I = 0 TO NGARB# - 2;
          DO J=0 TO 1023;
               PTR$->PAGEBASE(J) = -1;
             END;                       /* DO J */
          PTR$=PINCRW(PTR$,1024);
        END;                            /* DO I */
     SEGMENT2.PTR$ -> PAGEBASE(34) = 1610604928;
     SEGMENT2.PTR$ -> PAGEBASE(0) = 0;  /* FUNNY PAGES FOR MASTER */
     SEGMENT2.PTR$ -> PAGEBASE(64) = 0; /* CPU CONTEXT ARE 0,13,64 */
     SEGMENT2.PTR$ -> PAGEBASE(13) = 0;
                                        /* B$MLS.REAL.BOUND */
 
     B$DS1$ = SEGMENT2.PTR$;
     B$MPT$ = SEGMENT2.PTR$;
     B$REAL$ = SEGMENT2.PTR$;
     B$UPT$ = SEGMENT2.PTR$;
     B$WSQ0PT$ = SEGMENT2.PTR$;
     B$WINDOW$ = PINCRW(SEGMENT2.PTR$,1024*(NGARB#/2));
     B$MONJIT$ = SEGMENT2.PTR$;
     B$MONHJIT$ = SEGMENT2.PTR$;
     B$MONTSTACK$ = SEGMENT2.PTR$;
     B$TSTACK$ = SEGMENT2.PTR$;
     B$ROSEG$ = SEGMENT2.PTR$;
     B$SEGTBL$ = SEGMENT2.PTR$;
     B$PPUT$ = SEGMENT2.PTR$;
     B$IPHYMAP$ = SEGMENT2.PTR$;
     B$LS$ = SEGMENT2.PTR$;
     B$IS$ = SEGMENT2.PTR$;
     B$LOWMEM$ = SEGMENT2.PTR$;
     B_MPT = SEGMENT2.PTR$;
     B$IMX$ = SEGMENT2.PTR$;
 
     /* SET UP NI$DVT$() POINTERS, ITT$TIGR CAN'T DO IT FOR TIGRCUB */
 
     B$DVTTBL$ = ADDR(NI_SCDVT);
     SEGP$ = B$DVTTBL$;
     I = 0;
     DO WHILE (SEGP$->NI$DVT.MODEL(0) ~= 'MCA');
          NI$DVT$(I) = SEGP$;
          SEGP$ = PINCRW(SEGP$,SIZEW(NI$DVT));
          I = I + 1;
        END;
     NI$DVT$(I) = SEGP$;
     NI_NDVTS = I + 1;
     /* SET UP DEFAULTS FOR AARDVARK GIVEN DATA */
 
     IT_CONFIG.IOM.PORT = 0;
     IT_CONFIG.SC01.CHAN = 30;
     IT_CONFIG.UC01.CHAN = 24;
     IT_CONFIG.UC01.LPNAME = 'LP01';
     IT_CONFIG.UC01.CRPNAME = 'CR01';
     IT_CONFIG.UC01.FWNAME = 'UCMN';
     IT_CONFIG.LP01.CHAN = 24;
     IT_CONFIG.CR01.CHAN = 26;
     IT_CONFIG.TC01.CHAN = 16;
     IT_CONFIG.TC01.FWNAME = 'T610';
     IT_CONFIG.MT01.DVN = 1;
     IT_CONFIG.MT02.DVN = 2;
     IT_CONFIG.DC01.CHAN = 8;
     IT_CONFIG.DC01.FWNAME = 'D600';
     IT_CONFIG.DP01.DVN = 1;
     IT_CONFIG.DP01.DVC_CODE = 0;       /*0 IF 451, 208 IF 501 */
     IT_CONFIG.FEP1.CHAN = 33;
     FM_SYSDP.PORT = 0;
     FM_SYSDP.CHN = 8;
     FM_SYSDP.DVN = 1;
     FM_POTAPE.PORT = 0;
     FM_POTAPE.CHN = 16;
     FM_POTAPE.DVN = 1;
     IT_BOOTFLAG = 2;                   /* Y TO NEW FILES? */
     S_PORTNR = 7;                      /* DEFAULT CPU */
     HW_TYPE = 0;                       /* DEFAULT HARDWARE */
     MM_PCORE = 4096-1;
     ANY_ERRORS = '0'B;
 
     IT_TIGRCUB = '1'B;            /* YES, for ITW$WRAPUP's use to skip stuff */
 
     CALL CUBOPTS
     WHENALTRETURN
     DO;
          CALL ITF$FREEZE;
        END;
 
     IF ANY_ERRORS
     THEN
          CALL ITF$FREEZE;
 
     CALL ITT$TIGR;                     /* go and doit */
     CALL M$ERR;                        /* we best never get back here */
 
END TIGRCUB;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
ITQ$READ: PROC (BUFR$,NCHAR) ALTRET;
 
DCL NCHAR SBIN;
DCL BUFR$ PTR;
DCL STUPID CHAR(79) BASED;
DCL FOOLE_MSG STATIC CHAR(0) INIT(' ***** BAD ! CARD IN TEST DECK');
DCL CUBPARSER ENTRY ALTRET;
DCL ITF$FREEZE ENTRY;
 
DCL TIGRCUB_INBUF CHAR(80) SYMREF;
DCL ANY_ERRORS BIT(1) ALIGNED SYMREF;
DCL ANY_UI BIT(1) ALIGNED STATIC SYMDEF;
 
DCL M$SI DCB;
DCL M$DO DCB;
 
%INCLUDE CP_6;
 
 
 %F$DCB;
 
%FPT_READ (FPTN=READ_SI,DCB=M$SI);
%FPT_WRITE (FPTN=WRITE_FOOLE, DCB=M$DO, BUF=FOOLE_MSG);
 
 
     READ_SI.BUF_.BUF$ = BUFR$;
     READ_SI.BUF_.BOUND = 79;
 
RELOOP: ;
     CALL M$READ (READ_SI)
     WHENALTRETURN
     DO;
          BUFR$->STUPID='!EOD';
          NCHAR=4;
          RETURN;
        END;
 
     IF SUBSTR(BUFR$->STUPID,0,1)='!' THEN DO;
          IF SUBSTR(BUFR$->STUPID,0,5) ~= '!TIGR' AND
               SUBSTR(BUFR$->STUPID,0,4) ~= '!EOD' THEN DO;
               CALL M$WRITE (WRITE_FOOLE);
               CALL M$XXX;
             END;
          GOTO RELOOP;
        END;
 
     NCHAR = DCBADDR(DCBNUM(M$SI))->F$DCB.ARS#;
 
     IF ~ANY_UI                         /* 0 IF NO UI FILE FOUND */
     THEN DO;
          IF SUBSTR(BUFR$->STUPID,0,5) = '"*TC*'
          THEN DO;
               TIGRCUB_INBUF = ' ';
               TIGRCUB_INBUF = SUBSTR(BUFR$->STUPID,6,NCHAR-6);
               CALL CUBPARSER WHENALTRETURN DO; ALTRETURN; END;
               GOTO RELOOP;
             END;
        END;                            /* DO IF NO UI FILE FOUND */
 
     IF ANY_ERRORS                      /* FROM CUBOPTS */
     THEN
          CALL ITF$FREEZE;
 
     RETURN;
 
END ITQ$READ;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
ITQ$WRITE: PROC (BUFR$, NCHAR);
 
DCL NCHAR SBIN;
DCL BUFR$ PTR;
 
     %M$DCB  (DCBN=M$LO,
               ASN=DEVICE,
               CTG=YES,
               DISP=NAMED,
               RES='LO  ');
DCL IT_ECHODEV SBIN SYMREF;
DCL IT_OUTDEV SBIN SYMREF;
DCL STUPID CHAR(3) BASED;
 
%INCLUDE CP_6;
 
%FPT_WRITE (FPTN=WRITE_LO,DCB=M$LO);
 
     IT_ECHODEV = IT_OUTDEV;
     WRITE_LO.BUF_.BUF$ = BUFR$;
 
     IF NCHAR > 0 THEN
          WRITE_LO.BUF_.BOUND = NCHAR*4-1;
     ELSE
          WRITE_LO.BUF_ = VECTOR(NIL);
 
     IF BUFR$->STUPID = 'END'
     THEN
          RETURN;
     CALL M$WRITE (WRITE_LO)
     WHENALTRETURN
     DO;
          CALL M$MERC;
        END;
 
     RETURN;
 
END ITQ$WRITE;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
ITF$FREEZE: PROC;
 
%INCLUDE CP_6;
 
     CALL M$ERR;
 
END ITF$FREEZE;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
ITX$INITS : PROC;
 
DCL CUBDISPLAY ENTRY ALTRET;            /*  needed for SI64 addition     */
DCL ITF$FREEZE ENTRY;                   /*    "         "                */
/* */
DCL SCR1 UBIN;
DCL SCR2 UBIN;
DCL IT_DATASIZE UBIN SYMREF;
DCL LO_BUFFER CHAR(80) STATIC;
DCL M$LO DCB;
 
%INCLUDE CP_6;
%INCLUDE XU_FORMAT_C;
%INCLUDE XUF_ENTRY;
%INCLUDE M_INFO_C;
%F_FDS (BUF=LO_BUFFER,
        DCB=M$LO);
 
DCL GOOD_FMT CHAR(0) CONSTANT INIT
      ('%2/TIGR data is %D (%DK) out of %DK words long.');
 
DCL BAD_FMT CHAR(0) CONSTANT INIT
      ('%2/TIGR data is %D (%DK) out of %DK words long.');
DCL BAD_FMT2 CHAR(0) CONSTANT INIT
      ('%2/Must decrease amount required!');
 
     SCR1 = (IT_DATASIZE+1023)/1024;
     SCR2 = %TIGRHI-%TIGRLO+1;
 
     IF IT_DATASIZE > SCR2*1024 THEN
     DO;
          CALL X$WRITE (F_FDS, VECTOR(BAD_FMT), VECTOR(IT_DATASIZE),
               VECTOR(SCR1),
               VECTOR(SCR2));
          CALL X$WRITE (F_FDS, VECTOR(BAD_FMT2));
        END;
     ELSE
          CALL X$WRITE (F_FDS, VECTOR(GOOD_FMT), VECTOR(IT_DATASIZE),
               VECTOR(SCR1),
               VECTOR(SCR2));
/*  */
/* TIGR is finished here, go DISPLAY what he set up : IN SI64       */
/*  */
     CALL  CUBDISPLAY
     WHENALTRETURN
     DO;
          CALL  ITF$FREEZE;
        END;
/*  */
 
END ITX$INITS;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
NIQ$GET : PROC(P$) ALTRET ;
/*                        this procedure stub used to skip stuff
                      in TDP$SYSCON that is not needed for TC
*/
DCL P$ PTR;
DCL B$DS1$ PTR SYMREF;
 
     P$ = B$DS1$;                  /* set pointer to garbage segment,in case */
     ALTRETURN;
END  NIQ$GET;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
KIQ$PARTFEP : PROC(FEI,PROB);
/*                        this procedure stub used to skip stuff
                      in TDP$SYSCON that is not needed for TC
*/
%INCLUDE KI_MACROS_C;
%INCLUDE KI_DATA_R;
%INCLUDE KI_SUBS_C;
 
%KI$FEI (STCLASS="BASED(FEI$)");
 
DCL FEI$ PTR;
DCL FEI UBIN;
DCL PROB UBIN;
 
     FEI$ = KI$FEI$( FEI );
     KI$FEI.PBST.PROB = KIER_PART;
 
     RETURN;
END KIQ$PARTFEP;
