/*M* COBWEB:  program to INSTALL/DELETE a shared fid via SPIDER */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
COBWEB: PROC MAIN;
 
  /* INCLUDE files */
  %INCLUDE CP_6;
  %INCLUDE B_ERRORS_C;
  %INCLUDE B$JIT_C;
  %INCLUDE XU_MACRO_C;
  %INCLUDE XU_SUBS_C;
  %INCLUDE XU_PERR_C;
  %INCLUDE XUR_ENTRY;
  %INCLUDE COBWEB_C1;
 
  /* CP_6 MACROs */
  %B$TCB;
  %B$ALT;
  %F$DCB;
 
  /* B$JIT_C MACROs */
  %B$JIT0;
  %U$JIT1;
  %A$JIT6X;
 
 
  /* REF'ed stuff */
  DCL CCBUF_ROOT UBIN SYMREF;
  DCL CMND_ROOT UBIN SYMREF;
  DCL UPDATE_ROOT UBIN SYMREF;
  DCL B$JIT$ PTR SYMREF;
  DCL B$TCB$ PTR SYMREF;
 
  /* DCBs */
  DCL M$SI DCB;
  DCL M$ME DCB;
  DCL M$EI DCB;
  DCL M$XEQ_FILE DCB;
  DCL M$LM DCB;
 
  /* Internal data & stuctures & like that... */
  DCL B$ALT$ PTR;
  DCL BLK$ PTR;
  DCL REC$ PTR;
  DCL END_OF_MEM$ PTR;
  DCL INDEX# UBIN;
  DCL INDEX2# UBIN;
  DCL INDEX3# UBIN;
  DCL ENTRY@ UBIN;
  DCL SEED BIT(36) STATIC INIT('340127756001'O);
  DCL 1 USER_REC BASED(REC$),
        2 IXEQ CHAR(132) ALIGNED,
        2 DXEQ CHAR(132) ALIGNED,
        2 ENTRY# UBIN,
        2 ENTRIES(0:0) ALIGNED,
          3 ACCT CHAR(8),
          3 UNAME CHAR(12);
  DCL 1 GHOST_REC BASED(REC$),
        2 ACCT# CHAR(8),
        2 L# UBIN(9) UNAL,
        2 UNAME# CHAR(12),
        2 PASS# CHAR(8);
  DCL 1 FLAGBITS STATIC,
        2 NO_FILE BIT(1) INIT('0'B),
        2 NO_RECS BIT(1) INIT('0'B),
        2 UPDATE_MODE BIT(1) INIT('0'B),
        2 IBEX_CMND BIT(1) INIT('1'B),
        2 CHANGE BIT(1) INIT('0'B);
  DCL 1 UPDATE_MSG STATIC,
        2 * CHAR(0) INIT(%UPDATE_MSG_TEXT1),
        2 TYPE# CHAR(%MAX(LENGTHC(UPDATE_MSG_NEW_TEXT),
                          LENGTHC(UPDATE_MSG_OLD_TEXT))),
        2 * CHAR(0) INIT(%UPDATE_MSG_TEXT2),
        2 ACCT# CHAR(8);
  DCL 1 GHOST_MSG STATIC,
        2 * CHAR(0) INIT(%GHOST_MSG_TEXT),
        2 ID# CHAR(6);
  DCL 1 LIST STATIC,
        2 * CHAR(9) INIT(' '),
        2 ACCT CHAR(8),
        2 * CHAR(5) INIT(' '),
        2 UNAME CHAR(12);
  DCL 1 LIST_HEADER STATIC,
        2 * CHAR(0) INIT(%LIST_HEADER_TEXT1),
        2 NAME# CHAR(%(31+LENGTHC(LIST_HEADER_TEXT2)));
  DCL 1 LIST_GHOST_HEADER STATIC,
        2 * CHAR(0) INIT(%LIST_GHOST_HEADER_TEXT),
        2 NAME# CHAR(30);
  DCL 1 LIST_IXEQ_HEADER STATIC,
        2 * CHAR(0) INIT(%LIST_IXEQ_HEADER_TEXT),
        2 NAME# CHAR(133);
  DCL 1 LIST_DXEQ_HEADER STATIC,
        2 * CHAR(0) INIT(%LIST_DXEQ_HEADER_TEXT),
        2 NAME# CHAR(133);
  DCL 1 XEQ_FILE_CONTENTS_BUF,
        2 CONTAINS_MSG CHAR(%LENGTHC(CONTAINS_MSG_TEXT)),
        2 CONTENTS CHAR(%(256-LENGTHC(CONTAINS_MSG_TEXT)));
  DCL 1 XEQ_AND_UNFID_BUF STATIC,
        2 * CHAR(5) INIT('!XEQ '),
        2 TEXTC,
          3 COUNT# UBIN(9) UNAL INIT(132),
          3 TEXT# CHAR(132) INIT(' '),
        2 NAME# REDEF TEXTC CHAR(133);
 
  /* I-O FPTs & VLPs */
  %FPT_OPEN(FPTN=OPEN_USERS,NAME=VLP_NAME,ACCT=VLP_ACCT,PASS=VLP_PASS,
            ACS=DIRECT,ACSVEH=VLP_ACSVEH,ASN=FILE,DCB=M$EI,
            EXIST=OLDFILE,ORG=KEYED,SHARE=ALL);  /* FUN goes in at run-time */
    %VLP_ATTR(FPTN=VLP_ACSVEH);
      %VLP_ACSVEH(READ=YES,VEHICLE='COBWEB',LAST=";");
  %FPT_CLOSE(FPTN=CLOSE_SAVE,DCB=M$EI,DISP=SAVE);
    %VLP_NAME(NAME=':COBWEB');
    %VLP_ACCT(ACCT=%DEFAULT_COBWEB_ACCT);
    %VLP_PASS(PASS='        ');
  %FPT_READ(FPTN=READ_M$EI,DCB=M$EI,KEY=USERS_KEY,KEYS=YES);
  %FPT_WRITE(FPTN=WRITE_M$EI,DCB=M$EI,KEY=USERS_KEY);
    %VLP_NAME(FPTN=USERS_KEY);
  DCL 1 GHOST_KEY CONSTANT,
      2 L# UBIN(9) UNAL INIT(%LENGTHC(GHOST_KEY_TEXT)),
      2 NAME# CHAR(0) INIT(%GHOST_KEY_TEXT);
  %FPT_OPEN(FPTN=OPEN_XEQ_FILE,NAME=XEQ_NAME,ACCT=XEQ_ACCT,PASS=XEQ_PASS,
            SN=XEQ_SN,WSN=XEQ_WSN,ACS=SEQUEN,ASN=FILE,DCB=M$XEQ_FILE,
            FUN=IN,SHARE=ALL);
  %FPT_CLOSE(FPTN=CLOSE_XEQ_FILE,DCB=M$XEQ_FILE,DISP=SAVE);
    %VLP_NAME(FPTN=XEQ_NAME);
    %VLP_ACCT(FPTN=XEQ_ACCT);
    %VLP_PASS(FPTN=XEQ_PASS);
    DCL XEQ_ASN UBIN(9) STATIC;
    DCL XEQ_RES CHAR(4) STATIC;
    %VLP_SN(FPTN=XEQ_SN);
    %VLP_WSN(FPTN=XEQ_WSN);
  %FPT_READ(FPTN=READ_XEQ_FILE,DCB=M$XEQ_FILE);
  %FPT_WRITE(FPTN=WRITE_GHOST_MSG,BUF=GHOST_MSG,DCB=M$ME);
  %FPT_WRITE(FPTN=WRITE_UPDATE_MSG,BUF=UPDATE_MSG,DCB=M$ME);
  %FPT_WRITE(FPTN=WRITE_LIST_GHOST_HEADER,BUF=LIST_GHOST_HEADER,DCB=M$ME);
  %FPT_WRITE(FPTN=WRITE_LIST_HEADER,BUF=LIST_HEADER,DCB=M$ME);
  %FPT_WRITE(FPTN=WRITE_LIST,BUF=LIST,DCB=M$ME);
  %FPT_WRITE(FPTN=WRITE_LIST_IXEQ_HEADER,BUF=LIST_IXEQ_HEADER,DCB=M$ME);
  %FPT_WRITE(FPTN=WRITE_LIST_DXEQ_HEADER,BUF=LIST_DXEQ_HEADER,DCB=M$ME);
  %FPT_WRITE(FPTN=SPILL_XEQ_CONTENTS,DCB=M$ME);
  %FPT_REW(DCB=M$EI);
  %FPT_PRECORD(DCB=M$EI,KEY=USERS_KEY,KEYR=YES,N=-1);
  %FPT_DELREC(DCB=M$EI,KEY=USERS_KEY);
 
  /* M$GDS FPTs and VLPs */
  %FPT_GDS(RESULTS=GDS_RESULTS);
  DCL SEGSIZE UBIN HALF;
    %VLP_VECTOR(FPTN=GDS_RESULTS,SEGID='0'B);
 
  /* M$FID & UNFID play area */
  %FPT_FID(NAME=XEQ_NAME,ACCT=XEQ_ACCT,PASS=XEQ_PASS,ASN=XEQ_ASN,RES=XEQ_RES,
          SN=XEQ_SN,WSN=XEQ_WSN,RESULTS=FID_RESULTS);
    %VLR_FID(FPTN=FID_RESULTS);
    DCL 1 FID_RESULTS_BITS REDEF FID_RESULTS,
          2 SIGNIFICANT_ONES BIT(7),
          2 *(0:352) BIT(1);
  %FPT_UNFID(DCB=M$LM,TEXTFID=XEQ_AND_UNFID_BUF.TEXTC.TEXT#);
 
  /* M$GJOB FPTs and VLPs */
  %FPT_GJOB(ACCT=GJOB_ACCT,NAME=GJOB_NAME,PASS=GJOB_PASS,
            CCBUF=XEQ_AND_UNFID_BUF,RESULTS=VLR_GJOB);
    %VLP_ACCT(FPTN=GJOB_ACCT);
    %VLP_NAME(FPTN=GJOB_NAME,NAME='XXXXXXXXXXXX');
    %VLP_PASS(FPTN=GJOB_PASS);
    %VLR_GJOB;
 
  /* M$SPRIV and M$RPRIV thingo */
  %FPT_PRIV(PRIV=%PR_FMREAD#);
 
  /* Assorted junk for XUR routines */
  %P_PCB;
  %PARSE$OUT;
  %PARSE$SYM;
  %VLP_NAMEV(FPTN=SYM_TEXTC);
  %XUR_INIT(PCB=P_PCB,COMMANDS=NO);
  %VLP_ERRCODE(FPTN=COBWEB_ERRCODE);
  DCL U1_ BIT(72) STATIC INIT(VECTOR(USERS_KEY));
  %VLP_NAMEV(FPTN=U2);
  %VLP_NAMEV(FPTN=U3);
  %VLP_NAME(FPTN=PROMPT,NAME='>');
  %VLP_NAME(FPTN=UPDATE_PROMPT,NAME='Update>');
%EJECT;
  /* Initialization, housekeeping & all that rot */
    /* Foist, toin off FMREAD
       (and only turn it on again if an XEQ file is displayed)... */
    CALL M$RPRIV(FPT_PRIV) ALTRET(ZO_VUT);
    ZO_VUT:
    CALL XUR$INIT(XUR_INIT,,);
    CALL XUR$GETCMD(CCBUF_ROOT,BLK$,,B$JIT$->B$JIT.CCBUF,256,)
         ALTRET(BAD_CCBUF_PARSE);    /* ALTRET label is way down there */
    CALL M$UNFID(FPT_UNFID);
    CALL XUR$SETERRMSG(XEQ_AND_UNFID_BUF.TEXTC);
    /* The initial memory segment should be at least as big as a
       "vanilla" :COBWEB record (no users).  If some yoker dinked
       with %SEGSIZE, make sure he didn't stuff it with too small
       a number.                                                   */
    SEGSIZE = MAXIMUM(%SEGSIZE,SIZEW(USER_REC.IXEQ)+
                               SIZEW(USER_REC.DXEQ)+
                               SIZEW(USER_REC.ENTRY#));
    FPT_GDS.V.SEGSIZE# = SEGSIZE;
    CALL GET_BUFFER;
    B$ALT$ = B$TCB$->B$TCB.ALT$;
    CALL OPEN_USERS_FILE(%OPEN_INPUT) ALTRET(SO_WHAT);
    SO_WHAT:
      BLK$ = BLK$->OUT$BLK.SUBLK$(1);
%EJECT;
  /* Typical Main-Loop-Thing */
    DO WHILE('1'B);
      DO CASE(BLK$->OUT$BLK.CODE);
        CASE(%INS_DEL);
          CALL INS_DEL_CMND;
        CASE(%UPDATE);
          CALL UPDATE_CMND;
        CASE(%LIST_ALL);
          /*E* ERROR:  -CANT_LIST_ALL-0
               MESSAGE:  You must be in UPDATE mode to LIST all authorized users */
          COBWEB_ERRCODE.ERR# = %CANT_LIST_ALL;
          CALL XUR$ERRMSG(COBWEB_ERRCODE,,,,,,);
        CASE(%LIST_ITEM);
          CALL LIST_ITEM_CMND;
        CASE(%END);
          CALL END_CMND;
        CASE(%CR_LF);
          FLAGBITS.IBEX_CMND = '0'B;
      END;
      IF FLAGBITS.IBEX_CMND THEN
        CALL END_CMND;
      FLAGBITS.IBEX_CMND = '0'B;
      DO WHILE('0'B);
        BAD_PARSE:
          CALL XUR$ERRPTR(,DCBNUM(M$ME));
          CALL XUR$ERRMSG(BLK$,,,,,,);
      END;
      CALL XUR$GETCMD(CMND_ROOT,BLK$,PROMPT,,,) ALTRET(BAD_PARSE);
    END;
  BAD_CCBUF_PARSE:
    CALL XUR$ERRPTR(,DCBNUM(M$ME));
    CALL XUR$ERRMSG(BLK$,,,,,,);
    CALL END_CMND;
%EJECT;
  /* Handles commands like:  "!COBWEB (INSTALL GOOP)"
                        or:  ">DELETE GOOP"           */
  INS_DEL_CMND: PROC;
    IF FLAGBITS.NO_FILE THEN
      CALL OPEN_USERS_FILE(%OPEN_INPUT) ALTRET(CANT_INS_DEL);
    BLK$ = BLK$->OUT$BLK.SUBLK$(0);
    CALL VALIDATE_NAME_ONLY_FID ALTRET(CANT_INS_DEL);
    CALL READ_USERS_FILE ALTRET(NO_SUCH_ITEM);
    CALL CHK_LIST(1,,,ENTRY@) ALTRET(NO_SUCH_ITEM);
    DO CASE(BLK$->OUT$BLK.CODE);
      CASE(%INSTALL);
        XEQ_AND_UNFID_BUF.NAME# = REC$->USER_REC.IXEQ;
      CASE(%DELETE);
        XEQ_AND_UNFID_BUF.NAME# = REC$->USER_REC.DXEQ;
    END;
    USERS_KEY = GHOST_KEY;
    READ_M$EI.V.SEED# = SEED;
    CALL READ_USERS_FILE ALTRET(NO_GHOST);
    GJOB_ACCT.ACCT# = REC$->GHOST_REC.ACCT#;
    GJOB_NAME.L# = REC$->GHOST_REC.L#;
    GJOB_NAME.NAME# = REC$->GHOST_REC.UNAME#;
    GJOB_PASS.PASS# = REC$->GHOST_REC.PASS#;
    CALL M$GJOB(FPT_GJOB) ALTRET(GHOST_WONT_GO);
    CALL BINCHAR(GHOST_MSG.ID#,VLR_GJOB.SYSID);
    CALL M$WRITE(WRITE_GHOST_MSG);
    DO WHILE('0'B);
      GHOST_WONT_GO:
        /*E* ERROR:  -M$GJOB_ALTRET-0
             MESSAGE:  Error on call to M$GJOB ... */
        COBWEB_ERRCODE.ERR# = %M$GJOB_ALTRET;
        CALL XUR$ERRMSG(COBWEB_ERRCODE,,,,,,);
        CALL XUR$ERRMSG(B$ALT$->B$ALT.ERR,,,,,,);
    END;
    DO WHILE('0'B);
      NO_SUCH_ITEM:
        COBWEB_ERRCODE.ERR# = %NOT_AUTHORIZED_USER;
        CALL XUR$ERRMSG(COBWEB_ERRCODE,,,U1_,,,);
    END;
    DO WHILE('0'B);
      NO_GHOST:
        /*E* ERROR:  -NO_GHOST-0
             MESSAGE:  No GHOST is associated with :COBWEB.%AC ...
                       (Can't INSTALL or DELETE) */
        COBWEB_ERRCODE.ERR# = %NO_GHOST;
        CALL XUR$ERRMSG(COBWEB_ERRCODE,DCBNUM(M$EI),,,,,);
    END;
    CANT_INS_DEL:
      READ_M$EI.V.SEED# = '0'B;
      RETURN;
  END INS_DEL_CMND;
%EJECT;
  /* Update mode...
     We'll stay in this loop 'till "E/ND" or "Q/UIT" or "X"
       (or Break or Yc or HOST RECOVERY or ...)             */
  UPDATE_CMND: PROC;
    /* If the command was:  ">UPDATE .ICK"
       then we'll fill in the VLP_ACCT accordingly */
    IF BLK$->OUT$BLK.NSUBLKS = 1 THEN
      VLP_ACCT.ACCT# = BLK$->OUT$BLK.SUBLK$(0)->OUT$SYM.TEXT;
    CALL OPEN_USERS_FILE(%OPEN_CREATE) ALTRET(CANT_UPDATE);
    FLAGBITS.IBEX_CMND = '0'B;
    FLAGBITS.UPDATE_MODE = '1'B;
    DO WHILE('1'B);
      CALL XUR$GETCMD(UPDATE_ROOT,BLK$,UPDATE_PROMPT,,,) ALTRET(BAD_PARSE);
      DO CASE(BLK$->OUT$BLK.CODE);
        CASE(%GHOST);
          CALL GHOST_CMND;
        CASE(%CRE_MOD_DEL);
          CALL CRE_MOD_DEL_CMND;
        CASE(%ADD);
          CALL ADD_CMND;
        CASE(%REMOVE);
          CALL REMOVE_CMND;
        CASE(%LIST_ALL);
          CALL LIST_ALL_CMND;
        CASE(%LIST_ITEM);
          CALL LIST_ITEM_CMND;
        CASE(%END);
          CALL END_CMND;
          RETURN;
        CASE(%CR_LF);
      END;
      DO WHILE('0'B);
        BAD_PARSE:
          CALL XUR$ERRPTR(,DCBNUM(M$ME));
          CALL XUR$ERRMSG(BLK$,,,,,,);
      END;
    END;
    CANT_UPDATE:
      RETURN;
  END UPDATE_CMND;
%EJECT;
  /* It was ">GHOST acct,uname,pass" */
  GHOST_CMND: PROC;
    REC$->GHOST_REC.ACCT# = BLK$->OUT$BLK.SUBLK$(0)->OUT$SYM.TEXT;
    REC$->GHOST_REC.L# = BLK$->OUT$BLK.SUBLK$(1)->OUT$SYM.COUNT;
    REC$->GHOST_REC.UNAME# = BLK$->OUT$BLK.SUBLK$(1)->OUT$SYM.TEXT;
    REC$->GHOST_REC.PASS# = BLK$->OUT$BLK.SUBLK$(2)->OUT$SYM.TEXT;
    USERS_KEY = GHOST_KEY;
    WRITE_M$EI.BUF_.BOUND = SIZEV(REC$->GHOST_REC);
    WRITE_M$EI.V.SEED# = SEED;
    CALL WRITE_USERS_FILE;
    WRITE_M$EI.V.SEED# = '0'B;
    RETURN;
  END GHOST_CMND;
%EJECT;
  /* "C/REATE..." or "M/ODIFY..." or "D/ELETE..." was suggested... */
  CRE_MOD_DEL_CMND: PROC;
    BLK$ = BLK$->OUT$BLK.SUBLK$(0);
    FLAGBITS.CHANGE = '0'B;
    CALL VALIDATE_NAME_ONLY_FID ALTRET(CANT_CRE_MOD_DEL);
    CALL READ_USERS_FILE ALTRET(NO_SUCH_REC);
    DO CASE(BLK$->OUT$BLK.CODE);
      CASE(%CREATE);
        /*E* ERROR:  -CANT_CREATE-0
             MESSAGE:  Can't CREATE %U1:  already exists */
        COBWEB_ERRCODE.ERR# = %CANT_CREATE;
        CALL XUR$ERRMSG(COBWEB_ERRCODE,,,U1_,,,);
        RETURN;
      CASE(%DELREC);
        CALL M$DELREC(FPT_DELREC);
        RETURN;
      END;
    DO WHILE('0'B);
      NO_SUCH_REC:
        DO CASE(BLK$->OUT$BLK.CODE);
          CASE(%CREATE);
            REC$->USER_REC.IXEQ = ' ';
            REC$->USER_REC.DXEQ = ' ';
            REC$->USER_REC.ENTRY# = 0;
            WRITE_M$EI.BUF_.BOUND = SIZEC(REC$->USER_REC.IXEQ)+
                                    SIZEC(REC$->USER_REC.DXEQ)+
                                    SIZEV(REC$->USER_REC.ENTRY#);
            FLAGBITS.CHANGE = '1'B;
          CASE(%MODIFY);
            /*E* ERROR:  -CANT_MODIFY-0
                 MESSAGE:  Can't MODIFY %U1:  doesn't exist */
            COBWEB_ERRCODE.ERR# = %CANT_MODIFY;
            CALL XUR$ERRMSG(COBWEB_ERRCODE,,,U1_,,,);
            RETURN;
          CASE(%DELREC);
            /*E* ERROR:  -CANT_DELETE-0
                 MESSAGE:  Can't DELETE %U1:  doesn't exist */
            COBWEB_ERRCODE.ERR# = %CANT_DELETE;
            CALL XUR$ERRMSG(COBWEB_ERRCODE,,,U1_,,,);
            RETURN;
        END;
    END;
    DO INDEX# = 1 TO BLK$->OUT$BLK.NSUBLKS-1;
      FPT_FID.TEXTFID_ = VECTOR(BLK$->OUT$BLK.SUBLK$(INDEX#)->
                                      OUT$BLK.SUBLK$(0)->OUT$SYM.TEXT);
      CALL M$FID(FPT_FID) ALTRET(NOT_A_FID);
      DO CASE(BLK$->OUT$BLK.SUBLK$(INDEX#)->OUT$BLK.CODE);
        CASE(%INSTALLFID);
          REC$->USER_REC.IXEQ = BLK$->OUT$BLK.SUBLK$(INDEX#)->
                                       OUT$BLK.SUBLK$(0)->OUT$SYM.TEXT;
        CASE(%DELETEFID);
          REC$->USER_REC.DXEQ = BLK$->OUT$BLK.SUBLK$(INDEX#)->
                                       OUT$BLK.SUBLK$(0)->OUT$SYM.TEXT;
      END;
      FLAGBITS.CHANGE = '1'B;
      DO WHILE('0'B);
        NOT_A_FID:
          /*E* ERROR:  -NOT_A_FID-0
               MESSAGE:  This is not a legal FID */
          INDEX3# = BLK$->OUT$BLK.SUBLK$(INDEX#)->
                         OUT$BLK.SUBLK$(0)->OUT$BLK.CPOS;
          CALL XUR$ERRPTR(INDEX3#,DCBNUM(M$ME));
          COBWEB_ERRCODE.ERR# = %NOT_A_FID;
          CALL XUR$ERRMSG(COBWEB_ERRCODE,,,,,,);
      END;
    END;
    IF FLAGBITS.CHANGE THEN
      CALL WRITE_USERS_FILE;
    CANT_CRE_MOD_DEL:
      RETURN;
  END CRE_MOD_DEL_CMND;
%EJECT;
  /* "A/DD proc_name acct,uname,acct,uname..." */
  ADD_CMND: PROC;
    CALL VALIDATE_NAME_ONLY_FID ALTRET(CANT_ADD);
    CALL READ_USERS_FILE ALTRET(NO_SUCH_REC);
  /* We're looking into the future here and seeing if the
     new acct's and uname's will expand the record past the
     current memory bounds.  If so, try to get more memory. */
    DO WHILE(PINCRC(REC$,WRITE_M$EI.BUF_.BOUND+1+(BLK$->OUT$BLK.NSUBLKS-1)/2*SIZEC(USER_REC.ENTRIES)) > END_OF_MEM$);
      CALL GET_BUFFER;
    END;
    FLAGBITS.CHANGE = '0'B;
    DO INDEX# = 1 TO BLK$->OUT$BLK.NSUBLKS-1 BY 2;
      CALL CHK_LIST(0,BLK$->OUT$BLK.SUBLK$(INDEX#)->OUT$SYM,
                    BLK$->OUT$BLK.SUBLK$(INDEX#+1)->OUT$SYM,
                    ENTRY@) ALTRET(NOT_THERE_YET);
      /*E* ERROR:  -ALREADY_THERE-0
           MESSAGE:  User %U2 %U3 is already authorized */
      COBWEB_ERRCODE.ERR# = %ALREADY_THERE;
      CALL XUR$ERRMSG(COBWEB_ERRCODE,,,,
           VECTOR(BLK$->OUT$BLK.SUBLK$(INDEX#)->OUT$SYM.TEXTC$->U2),
           VECTOR(BLK$->OUT$BLK.SUBLK$(INDEX#+1)->OUT$SYM.TEXTC$->U3),);
      DO WHILE('0'B);
        NOT_THERE_YET:
          REC$->USER_REC.ENTRIES.ACCT(REC$->USER_REC.ENTRY#) = BLK$->OUT$BLK.SUBLK$(INDEX#)->OUT$SYM.TEXT;
          REC$->USER_REC.ENTRIES.UNAME(REC$->USER_REC.ENTRY#) = BLK$->OUT$BLK.SUBLK$(INDEX#+1)->OUT$SYM.TEXT;
          REC$->USER_REC.ENTRY# = REC$->USER_REC.ENTRY#+1;
          WRITE_M$EI.BUF_.BOUND = WRITE_M$EI.BUF_.BOUND+SIZEC(USER_REC.ENTRIES);
          FLAGBITS.CHANGE = '1'B;
      END;
    END;
    IF FLAGBITS.CHANGE THEN
      CALL WRITE_USERS_FILE;
    RETURN;
    NO_SUCH_REC:
      /*E* ERROR:  -CANT_ADD-0
           MESSAGE:  Can't ADD to %U1:  not yet CREATEd */
      COBWEB_ERRCODE.ERR# = %CANT_ADD;
      CALL XUR$ERRMSG(COBWEB_ERRCODE,,,U1_,,,);
      CANT_ADD:
        RETURN;
  END ADD_CMND;
%EJECT;
  /* "R/EMOVE proc_name acct,uname,acct,uname..." */
  REMOVE_CMND: PROC;
    CALL VALIDATE_NAME_ONLY_FID ALTRET(CANT_REMOVE);
    CALL READ_USERS_FILE ALTRET(NO_SUCH_REC);
    FLAGBITS.CHANGE = '0'B;
    DO INDEX# = 1 TO BLK$->OUT$BLK.NSUBLKS-1 BY 2;
      CALL CHK_LIST(0,BLK$->OUT$BLK.SUBLK$(INDEX#)->OUT$SYM,
                    BLK$->OUT$BLK.SUBLK$(INDEX#+1)->OUT$SYM,
                    ENTRY@) ALTRET(ALREADY_GONE);
      DO INDEX2# = ENTRY@ TO REC$->USER_REC.ENTRY#-1;
        REC$->USER_REC.ENTRIES(INDEX2#) = REC$->USER_REC.ENTRIES(INDEX2#+1);
      END;
      REC$->USER_REC.ENTRY# = REC$->USER_REC.ENTRY#-1;
      WRITE_M$EI.BUF_.BOUND = WRITE_M$EI.BUF_.BOUND-SIZEC(USER_REC.ENTRIES);
      FLAGBITS.CHANGE = '1'B;
      DO WHILE('0'B);
        ALREADY_GONE:
          /*E* ERROR:  -NO_SUCH_USER-0
               MESSAGE:  No such user as %U2 %U3 */
          COBWEB_ERRCODE.ERR# = %NO_SUCH_USER;
          CALL XUR$ERRMSG(COBWEB_ERRCODE,,,,
               VECTOR(BLK$->OUT$BLK.SUBLK$(INDEX#)->OUT$SYM.TEXTC$->U2),
               VECTOR(BLK$->OUT$BLK.SUBLK$(INDEX#+1)->OUT$SYM.TEXTC$->U3),);
      END;
    END;
    IF FLAGBITS.CHANGE THEN
      CALL WRITE_USERS_FILE;
    IF REC$->USER_REC.ENTRY# = 0 THEN
      DO;
        /*E* ERROR:  -LAST_ENTRY_REMOVED-0
             MESSAGE:  Warning:  the last authorized user has been removed from %U1 */
        COBWEB_ERRCODE.ERR# = %LAST_ENTRY_REMOVED;
        CALL XUR$ERRMSG(COBWEB_ERRCODE,,,U1_,,,);
      END;
    RETURN;
    NO_SUCH_REC:
      /*E* ERROR:  -CANT_REMOVE-0
           MESSAGE:  Can't REMOVE from %U1:  not yet CREATEd */
      COBWEB_ERRCODE.ERR# = %CANT_REMOVE;
      CALL XUR$ERRMSG(COBWEB_ERRCODE,,,U1_,,,);
      CANT_REMOVE:
        RETURN;
  END REMOVE_CMND;
%EJECT;
  /* The command was "L/IST" with no arguments */
  LIST_ALL_CMND: PROC;
    CALL M$REW(FPT_REW);
    READ_M$EI.V.KEYR# = '1'B;
    READ_M$EI.V.KEYS# = '0'B;
    FLAGBITS.NO_RECS = '1'B;
    DO WHILE('1'B);
      CALL READ_USERS_FILE ALTRET(EOF);
      FLAGBITS.NO_RECS = '0'B;
      IF SUBSTR(USERS_KEY.NAME#,0,USERS_KEY.L#) ~= SUBSTR(GHOST_KEY.NAME#,0,GHOST_KEY.L#) THEN
        CALL LIST_IT('0'B);  /* Eh, no lookada XEQ filea */
    END;
    EOF:
      IF FLAGBITS.NO_RECS THEN
        DO;
          COBWEB_ERRCODE.ERR# = %NOTHING_TO_LIST;
          CALL XUR$ERRMSG(COBWEB_ERRCODE,,,,,,);
        END;
      READ_M$EI.V.KEYR# = '0'B;
      READ_M$EI.V.KEYS# = '1'B;
      RETURN;
  END LIST_ALL_CMND;
 
  /* The command was "L/IST proc_name" */
  LIST_ITEM_CMND: PROC;
    IF FLAGBITS.NO_FILE THEN
      CALL OPEN_USERS_FILE(%OPEN_INPUT) ALTRET(CANT_LIST);
    CALL VALIDATE_NAME_ONLY_FID ALTRET(CANT_LIST);
    IF SUBSTR(USERS_KEY.NAME#,0,USERS_KEY.L#) =
      SUBSTR(GHOST_KEY.NAME#,0,GHOST_KEY.L#)
      THEN
      DO;
        IF FLAGBITS.UPDATE_MODE THEN
          DO;
            READ_M$EI.V.SEED# = SEED;
            CALL READ_USERS_FILE ALTRET(NOTHING_TO_LIST);
            READ_M$EI.V.SEED# = '0'B;
            CALL CONCAT(LIST_GHOST_HEADER.NAME#,
                        REC$->GHOST_REC.ACCT#,',',
                        REC$->GHOST_REC.UNAME#,',',
                        REC$->GHOST_REC.PASS#);
            CALL M$WRITE(WRITE_LIST_GHOST_HEADER);
          END;
          ELSE
            DO;
              COBWEB_ERRCODE.ERR# = %NOT_AUTHORIZED_USER;
              CALL XUR$ERRMSG(COBWEB_ERRCODE,,,U1_,,,);
            END;
        RETURN;
      END;
    CALL READ_USERS_FILE ALTRET(NOTHING_TO_LIST);
    IF NOT FLAGBITS.UPDATE_MODE THEN
      DO;
        CALL CHK_LIST(1,,,ENTRY@) ALTRET(NOTHING_TO_LIST);
      END;
    CALL LIST_IT('1'B);  /* Flash the XEQ contents, too... */
    DO WHILE('0'B);
      NOTHING_TO_LIST:
        IF FLAGBITS.UPDATE_MODE THEN
          DO;
            /*E* ERROR:  -NOTHING_TO_LIST-0
                 MESSAGE:  Nothing to list */
            COBWEB_ERRCODE.ERR# = %NOTHING_TO_LIST;
            CALL XUR$ERRMSG(COBWEB_ERRCODE,,,,,,);
          END;
          ELSE
            DO;
            /*E* ERROR:  -NOT_AUTHORIZED_USER-0
                 MESSAGE:  Sorry, you are not an authorized user of %U1 */
            COBWEB_ERRCODE.ERR# = %NOT_AUTHORIZED_USER;
            CALL XUR$ERRMSG(COBWEB_ERRCODE,,,U1_,,,);
            END;
    END;
    CANT_LIST:
      RETURN;
  END LIST_ITEM_CMND;
%EJECT;
  /* This thing is called by LIST_ALL and LIST_ITEM once the
     record is retrieved and the user is validated           */
  LIST_IT: PROC(DISPLAY_XEQ_FILE);
    DCL DISPLAY_XEQ_FILE BIT(1);
      LIST_HEADER.NAME# = SUBSTR(USERS_KEY.NAME#,0,USERS_KEY.L#);
      CALL INSERT(LIST_HEADER.NAME#,USERS_KEY.L#,,%LIST_HEADER_TEXT2);
      CALL M$WRITE(WRITE_LIST_HEADER);
      DO INDEX# = 0 TO REC$->USER_REC.ENTRY#-1;
        LIST.ACCT = REC$->USER_REC.ENTRIES.ACCT(INDEX#);
        LIST.UNAME = REC$->USER_REC.ENTRIES.UNAME(INDEX#);
        CALL M$WRITE(WRITE_LIST);
      END;
      IF REC$->USER_REC.ENTRY# = 0 THEN
        DO;
          LIST.ACCT = %LIST_NONE_TEXT;
          LIST.UNAME = ' ';
          CALL M$WRITE(WRITE_LIST);
        END;
      IF REC$->USER_REC.IXEQ = ' ' THEN
        DO;
          LIST_IXEQ_HEADER.NAME# = %LIST_XEQ_HEADER_NONE_TEXT;
          CALL M$WRITE(WRITE_LIST_IXEQ_HEADER);
        END;
        ELSE
          DO;
            LIST_IXEQ_HEADER.NAME# = REC$->USER_REC.IXEQ;
            CALL M$WRITE(WRITE_LIST_IXEQ_HEADER);
            IF DISPLAY_XEQ_FILE THEN
              CALL DISPLAY_THE_XEQ_FILE(LIST_IXEQ_HEADER.NAME#);
          END;
      IF REC$->USER_REC.DXEQ = ' ' THEN
        DO;
          LIST_DXEQ_HEADER.NAME# = %LIST_XEQ_HEADER_NONE_TEXT;
          CALL M$WRITE(WRITE_LIST_DXEQ_HEADER);
        END;
        ELSE
          DO;
            LIST_DXEQ_HEADER.NAME# = REC$->USER_REC.DXEQ;
            CALL M$WRITE(WRITE_LIST_DXEQ_HEADER);
            IF DISPLAY_XEQ_FILE THEN
              CALL DISPLAY_THE_XEQ_FILE(LIST_DXEQ_HEADER.NAME#);
          END;
      RETURN;
  END LIST_IT;
%EJECT;
  /* Chuck up the contents of the XEQ file in XEQ_FID_BUF */
  DISPLAY_THE_XEQ_FILE: PROC(XEQ_FID_BUF);
    DCL XEQ_FID_BUF CHAR(133);
    DCL EOF BIT(1);
      XEQ_FILE_CONTENTS_BUF.CONTAINS_MSG = %CONTAINS_MSG_TEXT;
      XEQ_FILE_CONTENTS_BUF.CONTENTS = ' ';
      SPILL_XEQ_CONTENTS.BUF_ = VECTOR(XEQ_FILE_CONTENTS_BUF.CONTAINS_MSG);
      CALL M$WRITE(SPILL_XEQ_CONTENTS);
      FPT_FID.TEXTFID_ = VECTOR(XEQ_FID_BUF);
      CALL M$FID(FPT_FID) ALTRET(FID_XEQ_ERR);
      OPEN_XEQ_FILE.V.ASN# = XEQ_ASN;
      OPEN_XEQ_FILE.V.RES# = XEQ_RES;
      /* Now, if no account was specified for an XEQ file when
         this user was CREATEd, check for it in the GHOST's
         account, which is where the GHOST will be looking.
         If no GHOST entry, confuse the user, since he'd have
         to be a bimbo to give us such a hard time...
         Note that we don't have to blank out things like
         XEQ_PASS here because to get here we had to say
         something like >L FARRAH which was M$UNFIDed into
         the XEQ_ stuff, which resulted in already blanking
         it, 'cause all you can specify on a LIST is "filename". */
      IF XEQ_ACCT.ACCT# = ' ' THEN
        DO;
          USERS_KEY = GHOST_KEY;
          READ_M$EI.V.SEED# = SEED;
          CALL READ_USERS_FILE ALTRET(WHAT_A_BIMBO);
          XEQ_ACCT.ACCT# = REC$->GHOST_REC.ACCT#;
          DO WHILE('0'B);
            WHAT_A_BIMBO:
              /*E* ERROR:  -WHAT_A_BIMBO-0
                 MESSAGE:  This XEQ file entry specifies no account,
                           and no GHOST is associated with :COBWEB.%AC ...
                           (i'll look for the XEQ file in the current FM account,
                           but i'll bet i won't find it.) */
              COBWEB_ERRCODE.ERR# = %WHAT_A_BIMBO;
              CALL XUR$ERRMSG(COBWEB_ERRCODE,DCBNUM(M$EI),,,,,);
          END;
        END;
      READ_M$EI.V.SEED# = '0'B;
      CALL M$SPRIV(FPT_PRIV) ALTRET (NO_BIGGIE);
      NO_BIGGIE:
      CALL M$OPEN(OPEN_XEQ_FILE) ALTRET(OPEN_XEQ_ERR);
      READ_XEQ_FILE.BUF_ = VECTOR(XEQ_FILE_CONTENTS_BUF);
      SPILL_XEQ_CONTENTS.BUF_ = VECTOR(XEQ_FILE_CONTENTS_BUF);
      EOF = '0'B;
      DO UNTIL EOF;
        XEQ_FILE_CONTENTS_BUF.CONTAINS_MSG = ' ';
        XEQ_FILE_CONTENTS_BUF.CONTENTS = ' ';
        CALL M$READ(READ_XEQ_FILE) ALTRET(ATSA_NOMORE);
        CALL M$WRITE(SPILL_XEQ_CONTENTS);
        DO WHILE('0'B);
          ATSA_NOMORE:
            EOF = '1'B;
            IF B$ALT$->B$ALT.ERR.CODE ~= %E$EOF THEN
              DO;
                /*E* ERROR:  -UNEXP_XEQ_READ_ERR-0
                   MESSAGE:  Unexpected error reading XEQ file ... */
                COBWEB_ERRCODE.ERR# = %UNEXP_XEQ_READ_ERR;
                CALL XUR$ERRMSG(COBWEB_ERRCODE,,,,,,);
                CALL XUR$ERRMSG(B$ALT$->B$ALT.ERR,,,,,,);
              END;
        END;
      END;
      CALL M$CLOSE(CLOSE_XEQ_FILE);
      DO WHILE('0'B);
        FID_XEQ_ERR:
          /*E* ERROR:  -M$FID_ALTRET-0
             MESSAGE:  Error on call to M$FID ... */
          COBWEB_ERRCODE.ERR# = %M$FID_ALTRET;
          CALL XUR$ERRMSG(COBWEB_ERRCODE,,,,,,);
          RETURN;
        OPEN_XEQ_ERR:
          /*E* ERROR:  -UNEXP_XEQ_OPEN_ERR-0
             MESSAGE:  Unexpected error on open of XEQ file ... */
          COBWEB_ERRCODE.ERR# = %UNEXP_XEQ_OPEN_ERR;
          CALL XUR$ERRMSG(COBWEB_ERRCODE,,,,,,);
          CALL XUR$ERRMSG(B$ALT$->B$ALT.ERR,,,,,,);
      END;
      CALL M$RPRIV(FPT_PRIV) ALTRET(KUDDUNT_HOIT);
      KUDDUNT_HOIT:
      RETURN;
  END DISPLAY_THE_XEQ_FILE;
%EJECT;
  /* They said "E/ND" or "Q/UIT" or "X" */
  END_CMND: PROC;
    IF FLAGBITS.UPDATE_MODE THEN
      DO;
        VLP_ACCT.ACCT# = %DEFAULT_COBWEB_ACCT;
        CALL OPEN_USERS_FILE(%OPEN_INPUT) ALTRET(SO_WHAT);
        SO_WHAT:
          FLAGBITS.UPDATE_MODE = '0'B;
          RETURN;
      END;
    CALL XUR$CLOSE_DCBS;
    CALL M$EXIT;
  END END_CMND;
%EJECT;
  /* Check to see if this clone's acct and uname, or the suggested
     acct and uname in an ADD or DELETE command, are in the record.
     ALTRETURN if specified acct & uname are not found              */
  CHK_LIST: PROC(JIT_CHK,SYM1_CHK,SYM2_CHK,ENTRY@) ALTRET;
    DCL JIT_CHK UBIN;
    %PARSE$SYM(NAME=SYM1_CHK,STCLASS=);
    %PARSE$SYM(NAME=SYM2_CHK,STCLASS=);
    DCL ENTRY@ UBIN;
    DCL INDEX# UBIN;
      IF JIT_CHK ~= 0 THEN
        DO;
          DO INDEX# = 0 TO REC$->USER_REC.ENTRY#-1;
            IF B$JIT$->B$JIT.ACCN = REC$->USER_REC.ENTRIES.ACCT(INDEX#)
              AND
              B$JIT$->B$JIT.UNAME = REC$->USER_REC.ENTRIES.UNAME(INDEX#)
              THEN
              DO;
                ENTRY@ = INDEX#;
                RETURN;
              END;
          END;
          ALTRETURN;
        END;
      DO INDEX# = 0 TO REC$->USER_REC.ENTRY#-1;
        IF SYM1_CHK.TEXT = REC$->USER_REC.ENTRIES.ACCT(INDEX#)
          AND
          SYM2_CHK.TEXT = REC$->USER_REC.ENTRIES.UNAME(INDEX#)
          THEN
          DO;
            ENTRY@ = INDEX#;
            RETURN;
          END;
      END;
      ALTRETURN;
  END CHK_LIST;
%EJECT;
  /* Open the :COBWEB file according to the FUN parameter */
  OPEN_USERS_FILE: PROC(FUN) ALTRET;
    DCL FUN UBIN;
      IF FLAGBITS.NO_FILE THEN
        DO;
          /* First of all, if there's no file and it's an IBEX command,
             like:  "!COBWEB (I ICK", then the shmuck's already been
             warned once, so we'll just go away...                      */
          IF FLAGBITS.IBEX_CMND THEN
            ALTRETURN;
        END;
        ELSE
          /* Udderwise, if da :COBWEB file's already open, close it. */
          CALL M$CLOSE(CLOSE_SAVE) ALTRET(YEAH_ZO_BEEG_DEIL);
      YEAH_ZO_BEEG_DEIL:
      OPEN_USERS.V.FUN# = FUN;
      CALL M$OPEN(OPEN_USERS) ALTRET(SOMEKINDA_ERR);
      FLAGBITS.NO_FILE = '0'B;
      IF FUN = %OPEN_CREATE THEN
        DO;
          IF DCBADDR(DCBNUM(M$EI))->F$DCB.FEXT THEN
            /* This :COBWEB had been CREATEd previously, zo:  */
            UPDATE_MSG.TYPE# = %UPDATE_MSG_OLD_TEXT;
            ELSE
              /* This is a new :COBWEB, zo:  */
              UPDATE_MSG.TYPE# = %UPDATE_MSG_NEW_TEXT;
          UPDATE_MSG.ACCT# = VLP_ACCT.ACCT#;
          CALL M$WRITE(WRITE_UPDATE_MSG);
        END;
      RETURN;
 
      SOMEKINDA_ERR:
        DO CASE(FUN);
          CASE(%OPEN_INPUT);
            IF B$ALT$->B$ALT.ERR.CODE = %E$NOFILE THEN
              DO;
                /*E* ERROR:  -NO_COBWEB_USERS_FILE-0
                     MESSAGE:  :COBWEB.%AC does not exist ...
                               (Can't INSTALL, DELETE or LIST) */
                COBWEB_ERRCODE.ERR# = %NO_COBWEB_USERS_FILE;
                CALL XUR$ERRMSG(COBWEB_ERRCODE,DCBNUM(M$EI),,,,,);
              END;
              ELSE
                DO;
                  /*E* ERROR:  -UNEXP_OPEN_INPUT_ERR-0
                       MESSAGE:  Unexpected error on INPUT open of :COBWEB.%AC ... */
                  COBWEB_ERRCODE.ERR# = %UNEXP_OPEN_INPUT_ERR;
                  CALL XUR$ERRMSG(COBWEB_ERRCODE,DCBNUM(M$EI),,,,,);
                  CALL XUR$ERRMSG(B$ALT$->B$ALT.ERR,,,,,,);
                END;
          CASE(%OPEN_CREATE);
            /*E* ERROR:  -UNEXP_OPEN_UPDATE_ERR-0
                 MESSAGE:  Unexpected error on UPDATE open of :COBWEB.%AC ... */
            COBWEB_ERRCODE.ERR# = %UNEXP_OPEN_UPDATE_ERR;
            CALL XUR$ERRMSG(COBWEB_ERRCODE,DCBNUM(M$EI),,,,,);
            CALL XUR$ERRMSG(B$ALT$->B$ALT.ERR,,,,,,);
        END;
    FLAGBITS.NO_FILE = '1'B;
    ALTRETURN;
END OPEN_USERS_FILE;
%EJECT;
  /* Read from or write to the :COBWEB file */
  READ_USERS_FILE: PROC ALTRET;
    DO WHILE('0'B);
      BAD_READ:
        IF B$ALT$->B$ALT.ERR.CODE = %E$NOKEY OR B$ALT$->B$ALT.ERR.CODE = %E$EOF
          THEN
          ALTRETURN;
          ELSE
            IF B$ALT$->B$ALT.ERR.CODE = %E$LD THEN
              DO;
                IF READ_M$EI.V.KEYS# = '0'B THEN
                  CALL M$PRECORD(FPT_PRECORD);
                CALL GET_BUFFER;
              END;
              ELSE
                /*E* ERROR:  -UNEXP_USERS_READ_ERR-0
                     MESSAGE:  Unexpected error on read of :COBWEB.%AC ... */
                DO;
                  COBWEB_ERRCODE.ERR# = %UNEXP_USERS_READ_ERR;
                  CALL XUR$ERRMSG(COBWEB_ERRCODE,DCBNUM(M$EI),,,,,);
                  CALL XUR$ERRMSG(B$ALT$->B$ALT.ERR,,,,,,);
                  CALL XUR$CLOSE_DCBS;
                  CALL M$XXX;
                END;
    END;
    CALL M$READ(READ_M$EI) ALTRET(BAD_READ);
    WRITE_M$EI.BUF_.BOUND = DCBADDR(DCBNUM(M$EI))->F$DCB.ARS#-1;
    RETURN;
  END READ_USERS_FILE;
 
  WRITE_USERS_FILE: PROC;
    CALL M$WRITE(WRITE_M$EI) ALTRET(BAD_WRITE);
    RETURN;
    BAD_WRITE:
      /*E* ERROR:  -UNEXP_USERS_WRITE_ERR-0
           MESSAGE:  Unexpected error on write to :COBWEB.%AC ... */
      COBWEB_ERRCODE.ERR# = %UNEXP_USERS_WRITE_ERR;
      CALL XUR$ERRMSG(COBWEB_ERRCODE,DCBNUM(M$EI),,,,,);
      CALL XUR$ERRMSG(B$ALT$->B$ALT.ERR,,,,,,);
      CALL XUR$CLOSE_DCBS;
      CALL M$XXX;
  END WRITE_USERS_FILE;
%EJECT;
  /* We ran outa room so try to get more */
  GET_BUFFER: PROC;
    CALL M$GDS(FPT_GDS) ALTRET(NOGOT);
    READ_M$EI.BUF_.BOUND = READ_M$EI.BUF_.BOUND+SEGSIZE*4;
    IF READ_M$EI.BUF_.BUF$ = ADDR(NIL) THEN
      DO;
        READ_M$EI.BUF_.BUF$ = GDS_RESULTS.PTR$;
        WRITE_M$EI.BUF_.BUF$ = GDS_RESULTS.PTR$;
        REC$ = GDS_RESULTS.PTR$;
        END_OF_MEM$ = GDS_RESULTS.PTR$;
        READ_M$EI.BUF_.BOUND = READ_M$EI.BUF_.BOUND-1;
      END;
    END_OF_MEM$ = PINCRW(END_OF_MEM$,SEGSIZE);
    RETURN;
    NOGOT:
      /*E* ERROR:  -M$GDS_ALTRET-0
           MESSAGE:  Error on call to M$GDS ... */
      COBWEB_ERRCODE.ERR# = %M$GDS_ALTRET;
      CALL XUR$ERRMSG(COBWEB_ERRCODE,,,,,,);
      CALL XUR$ERRMSG(B$ALT$->B$ALT.ERR,,,,,,);
      CALL XUR$CLOSE_DCBS;
      CALL M$XXX;
  END GET_BUFFER;
 
%EJECT;
  /* Check the input .FID & see if it's a legal name ONLY (!)
     ...an' fill in USERS_KEY with it if it is. */
  VALIDATE_NAME_ONLY_FID: PROC ALTRET;
    FPT_FID.TEXTFID_ = VECTOR(BLK$->OUT$BLK.SUBLK$(0)->OUT$SYM.TEXT);
    CALL M$FID(FPT_FID) ALTRET(BAD_NAME_ONLY_FID);
    IF (FID_RESULTS_BITS.SIGNIFICANT_ONES & '0111101'B) = '0000000'B THEN
      DO;
        USERS_KEY = BLK$->OUT$BLK.SUBLK$(0)->OUT$SYM.TEXTC$->SYM_TEXTC;
        RETURN;
      END;
    /*E* ERROR:  -TOO_MUCH_FID_INFO-0
         MESSAGE:  This FID is overqualified:  filename ONLY allowed here */
    INDEX3# = BLK$->OUT$BLK.SUBLK$(0)->OUT$BLK.CPOS;
    CALL XUR$ERRPTR(INDEX3#,DCBNUM(M$ME));
    COBWEB_ERRCODE.ERR# = %TOO_MUCH_FID_INFO;
    CALL XUR$ERRMSG(COBWEB_ERRCODE,,,,,,);
    DO WHILE('0'B);
      BAD_NAME_ONLY_FID:
        INDEX3# = BLK$->OUT$BLK.SUBLK$(0)->OUT$BLK.CPOS;
        CALL XUR$ERRPTR(INDEX3#,DCBNUM(M$ME));
        COBWEB_ERRCODE.ERR# = %NOT_A_FID;
        CALL XUR$ERRMSG(COBWEB_ERRCODE,,,,,,);
    END;
    ALTRETURN;
  END VALIDATE_NAME_ONLY_FID;
 
END COBWEB;
