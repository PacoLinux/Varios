/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/*X* DDA */
 
/* Miscellaneous PL6 routines for lpd server */
 
/* LPD$LDEV - Issue an !LDEV command                        */
LPD$LDEV: PROC (LDEV_OPTS, LEN);
 
%INCLUDE CP_6;
 
DCL LDEV_OPTS     CHAR(256);
DCL LEN           SBIN;
 
%FPT_YC;
DCL XB_RETURN_ORDINAL_RESULT ENTRY(1);
DCL RESULT        SBIN;
 
DCL LDEV_STR      CHAR(0) STATIC INIT('!LDEV LP30 ');
DCL LDEV_CMD      CHAR(200) STATIC INIT(' ');
 
CALL CONCAT(LDEV_CMD, LDEV_STR, SUBSTR(LDEV_OPTS,0,LEN - 1));
FPT_YC.CMD_ = VECTOR(LDEV_CMD);
CALL M$YC(FPT_YC)
     WHENRETURN DO;
        RESULT = 1;
     END;
     WHENALTRETURN DO;
        RESULT = -1;
     END;
 
CALL XB_RETURN_ORDINAL_RESULT(RESULT);
END LPD$LDEV;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/*X* DDA */
 
/* LPD$PRIV - Turn on fmsec for the duration of the program */
 
LPD$PRIV: PROC;
 
%INCLUDE CP_6;
%INCLUDE B$JIT;
%INCLUDE KL_SUPER_C;
 
%FPT_PRIV(FPTN=SET_PRIVS);
 
DCL XB_RETURN_ORDINAL_RESULT ENTRY (1);
DCL I SBIN STATIC INIT(0);
DCL B$JIT$ PTR SYMREF;
 
SET_PRIVS.V.PRIV# = (%PR_FMSEC#|%PR_MSYS#|%PR_JIT#);
CALL M$SPRIV (SET_PRIVS);
 
IF (B$JIT$->B$JIT.PRIV.ACTIVE & (%PR_FMSEC#|%PR_MSYS#|%PR_JIT#))
   THEN I = 1;
ELSE
   I = -1;
 
CALL XB_RETURN_ORDINAL_RESULT(I);
 
END LPD$PRIV;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/*X* DDA */
 
/* LPD$EJECT - Eject a page                              */
LPD$EJECT: PROC (Header);
%INCLUDE CP_6;
%INCLUDE CP_6_SUBS;
%INCLUDE xb_stdio_i6;
 
%File_Header (Name = Header, stclass = " ");
 
%FPT_DEVICE (FPTN = DEVICE, PAGE = YES);
 
DCL XB_RETURN_ORDINAL_RESULT ENTRY(1);
 
DCL P$ PTR;
DCL I SBIN;
 
P$ = ADDR(Header);
 
DEVICE.V.DCB# = Header.FPT_WRITE.V.DCB#;
CALL M$DEVICE (DEVICE)
     WHENRETURN DO;
         I = 1;
     END;
     WHENALTRETURN DO;
         I = -1;
     END;
CALL XB_RETURN_ORDINAL_RESULT(I);
END LPD$EJECT;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/*X* DDA */
 
/* LPD$PRINT - Issue a !PRINT command                   */
LPD$PRINT: PROC;
 
%INCLUDE CP_6;
 
%FPT_YC;
 
DCL PRINT_CMD CHAR(0) STATIC INIT('!PRINT LP30');
DCL RESULT SBIN WORD STATIC;
 
DCL XB_RETURN_ORDINAL_RESULT ENTRY(1);
 
FPT_YC.CMD_ = VECTOR(PRINT_CMD);
CALL M$YC(FPT_YC)
     WHENRETURN DO;
        RESULT = 1;
     END;
 
     WHENALTRETURN DO;
        RESULT = -1;
     END;
 
CALL XB_RETURN_ORDINAL_RESULT(RESULT);
END LPD$PRINT;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/*X* DDA */
 
LPD$LOGON: PROC (ACCT, USERNAME, USERNAME_LEN);
/* LPD$LOGON - Change into the user whose name comes from the
               LPD protocol and is translated in the lpd:user_equiv
               file                                                */
 
%INCLUDE CP_6;
%INCLUDE XSL_CHAM_M;
%XSL_CHAM;
 
DCL ACCT CHAR(8);
DCL USERNAME CHAR(12);
DCL USERNAME_LEN SBIN;
DCL USERDATA CHAR(4096);
DCL I SBIN;
 
DCL XB_RETURN_ORDINAL_RESULT ENTRY (1);
DCL XSL$CHAM ENTRY (2) ALTRET;
 
XSL_CHAM.ACCN = ACCT;
XSL_CHAM.USER = USERNAME;
XSL_CHAM.FLAGS.CHECKPW = '0'B;
XSL_CHAM.L = 8 + USERNAME_LEN;
 
CALL XSL$CHAM (XSL_CHAM, USERDATA)
 
     WHENRETURN DO;
         IF XSL_CHAM.RESPONSE = 0 THEN
            I = 1;
         ELSE
            I = -1;
         END;
 
     WHENALTRETURN DO;
         I = -1;
         END;
 
CALL XB_RETURN_ORDINAL_RESULT(I);
END LPD$LOGON;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/*X* DDA */
 
LPD$WRSTATS: PROC (HOST_PARAM, HOST_L_PARAM,
                   USER_PARAM, USER_L_PARAM,
                   QUEUE_PARAM, QUEUE_L_PARAM,
                   JOBNAME_PARAM, JOBNAME_L_PARAM,
                   JOBNUM_PARAM, JOBNUM_L_PARAM);
 
%INCLUDE CP_6;
%INCLUDE CP_6_SUBS;
%INCLUDE B$JIT;
%INCLUDE B$ROSEG;
%INCLUDE LPD_C61;
%INCLUDE LPD_C62;
 
%SUB LPD_LDEV = 'LP30';
%B$TCB;
%B$ALT;
 
DCL HOST_PARAM      CHAR(31);
DCL HOST_L_PARAM    SBIN WORD;
DCL USER_PARAM      CHAR(31);
DCL USER_L_PARAM    SBIN WORD;
DCL QUEUE_PARAM     CHAR(31);
DCL QUEUE_L_PARAM   SBIN WORD;
DCL JOBNAME_PARAM   CHAR(31);
DCL JOBNAME_L_PARAM SBIN WORD;
DCL JOBNUM_PARAM    CHAR(31);
DCL JOBNUM_L_PARAM  SBIN WORD;
 
DCL UBINHALF UBIN HALF HALIGNED BASED;
 
DCL RESULT  SBIN;
DCL I       SBIN;
DCL ERR     UBIN WORD ALIGNED;
DCL LEN     SBIN;
 
DCL DUMMY_BUF CHAR(512) BASED;
 
DCL P$     PTR;
DCL BUF$   PTR;
DCL B$JIT$ PTR SYMREF;
DCL B$ROS$ PTR SYMREF;
DCL B$TCB$ PTR SYMREF;
/* DCL B$ALT$ PTR SYMREF; */
 
DCL XB_RETURN_ORDINAL_RESULT ENTRY(1);
 
/*
   Position to subfile ID in   the ROSEG
*/
 
   GET_SUBFILE:
   DO I = 0 TO 15;
      IF B$ROS$->B$ROSEG.LDEVNAME(I) = %LPD_LDEV THEN DO;
         EXIT GET_SUBFILE;
      END;
   END;
 
/*
   Fill in all of the LPD? variables
*/
   LPDHOST.L = HOST_L_PARAM;
   LPDHOST.C = HOST_PARAM;
 
   LPDQUEUE.L = QUEUE_L_PARAM;
   LPDQUEUE.C = QUEUE_PARAM;
 
   LPDUSER.L = USER_L_PARAM;
   LPDUSER.C = USER_PARAM;
 
   LPDJOBNAME.L = JOBNAME_L_PARAM;
   LPDJOBNAME.C = JOBNAME_PARAM;
 
   LPDJOBNUM.L = JOBNUM_L_PARAM;
   LPDJOBNUM.C = JOBNUM_PARAM;
 
   WRITE_STATS.BUF_.BUF$ = ADDR(LPDSTATS_BUF);
 
   WRITE_STATS.BUF_.BOUND = HOST_L_PARAM + USER_L_PARAM +
                            QUEUE_L_PARAM + JOBNAME_L_PARAM +
                            JOBNUM_L_PARAM + 8;
 
/*
   Put everything into LPDSTATS_BUF
*/
   BUF$ = ADDR(LPDSTATS_BUF);
   BUF$->UBINHALF = B$JIT$->B$JIT.SYSID;
 
   BUF$ = PINCRC(ADDR(LPDSTATS_BUF),2);
 
   BUF$->UBINHALF = B$ROS$->B$ROSEG.STREAMID.IDENT(I);
   BUF$ = PINCRC(ADDR(LPDSTATS_BUF),4);
 
   CALL CONCAT(BUF$->DUMMY_BUF, BINASC(LPDHOST.L));
   BUF$ = PINCRC(ADDR(LPDSTATS_BUF),5);
   CALL CONCAT(BUF$->DUMMY_BUF, LPDHOST.C);
   LEN = 5 + LPDHOST.L;
   BUF$ = PINCRC(ADDR(LPDSTATS_BUF),LEN);
 
   CALL CONCAT(BUF$->DUMMY_BUF, BINASC(LPDUSER.L));
   BUF$ = PINCRC(ADDR(LPDSTATS_BUF),LEN + 1);
   CALL CONCAT(BUF$->DUMMY_BUF, LPDUSER.C);
   LEN = LEN + LPDUSER.L + 1;
   BUF$ = PINCRC(ADDR(LPDSTATS_BUF),LEN);
 
   CALL CONCAT(BUF$->DUMMY_BUF, BINASC(LPDQUEUE.L));
   BUF$ = PINCRC(ADDR(LPDSTATS_BUF), LEN + 1);
   CALL CONCAT(BUF$->DUMMY_BUF, LPDQUEUE.C);
   LEN = LEN + LPDQUEUE.L + 1;
   BUF$ = PINCRC(ADDR(LPDSTATS_BUF),LEN);
 
   CALL CONCAT(BUF$->DUMMY_BUF, BINASC(LPDJOBNAME.L));
   BUF$ = PINCRC(ADDR(LPDSTATS_BUF), LEN + 1);
   CALL CONCAT(BUF$->DUMMY_BUF, LPDJOBNAME.C);
   LEN = LEN + LPDJOBNAME.L + 1;
   BUF$ = PINCRC(ADDR(LPDSTATS_BUF),LEN);
 
   CALL CONCAT(BUF$->DUMMY_BUF, BINASC(LPDJOBNUM.L));
   BUF$ = PINCRC(ADDR(LPDSTATS_BUF), LEN + 1);
   CALL CONCAT(BUF$->DUMMY_BUF, LPDJOBNUM.C);
   LEN = LEN + LPDJOBNAME.L + 1;
   BUF$ = PINCRC(ADDR(LPDSTATS_BUF),LEN);
 
/* Do a test M$OPEN to see if the lpdstats file
       is there. If not, turn on FUN = CREATE       */
 
   OPEN_STATS.V.FUN# = 1;            /* UPDATE */
   OPEN_STATS.V.OPER.TEST# = '1'B;   /* TEST */
 
   CALL M$OPEN (OPEN_STATS)
 
        WHENALTRETURN DO;
           OPEN_STATS.V.EXIST# = %NEWFILE#;
           OPEN_STATS.V.FUN# = %CREATE#;
           OPEN_STATS.V.CTG# = %YES#;
           OPEN_STATS.V.DISP# = %NAMED#;
           OPEN_STATS.V.KEYX# = 0;
           OPEN_STATS.V.KEYL# = 4;
           OPEN_STATS.ACCESS_ = VECTOR(LPD_ACCESS);
           OPEN_STATS.ACSVEH_ = VECTOR(LPD_ACSVEH);
        END;
 
   OPEN_STATS.V.OPER.TEST# = '0'B;   /* RESET TEST BIT */
 
/* Do the real M$OPEN   */
 
   CALL M$OPEN (OPEN_STATS);
 
/* Do the M$WRITE       */
 
   CALL M$WRITE (WRITE_STATS)
 
        WHENRETURN  DO;
            RESULT = 1;
            END;
 
        WHENALTRETURN DO;
            ERR = B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE;
            RESULT = -1;
            END;
 
   CALL M$CLOSE (CLOSE_STATS);
 
   CALL XB_RETURN_ORDINAL_RESULT (RESULT);
 
END LPD$WRSTATS;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/*X* DDA */
 
LPD$UPDSTATS: PROC;
 
%INCLUDE CP_6;
%INCLUDE LPD_C61;
%INCLUDE LPD_C62;
%INCLUDE B_ERRORS_C;
%INCLUDE CP_6_SUBS;
 
%B$TCB;
%B$ALT;
 
DCL DUMMY_BUF CHAR(512) BASED;
 
DCL P$ PTR;
DCL BUF$ PTR;
DCL B$TCB$ PTR SYMREF;
 
DCL HALFWORD UBIN HALF HALIGNED BASED;
DCL WHOLWORD UBIN WORD  ALIGNED BASED;
 
   OPEN_STATS.V.EXIST# = %OLDFILE#;
   OPEN_STATS.V.FUN#   = %UPDATE#;
   CALL M$OPEN (OPEN_STATS);
   CALL M$PRECORD (BOF_STATS);
 
   READ_LOOP: DO WHILE '1'B;
 
      CALL M$READ (READ_STATS)
 
           WHENALTRETURN DO;
              EXIT READ_LOOP;
           END;
 
      BUF$ = ADDR(LPDSTATS_BUF);
      P$ = ADDR(LPD_JOBSTATS.V.SYSID#);
 
      P$->WHOLWORD = BUF$->HALFWORD;
 
      BUF$ = ADDR(LPDSTATS_BUF);
      BUF$ = PINCRC(BUF$,2);
      P$ = ADDR(LPD_JOBSTATS.V.NUM#);
 
      P$->HALFWORD = BUF$->HALFWORD;
 
      CALL M$JOBSTATS (LPD_JOBSTATS);
 
      IF LPD_CHECK_RESULTS.CODE = %JS_NOTF# THEN
         CALL M$DELREC (DEL_STATSREC);
 
   END; /* READ_LOOP */
END LPD$UPDSTATS;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/*X* DDA */
 
LPD$CHKSTATS: PROC (TEXT_PARAM, TEXT_L_PARAM, LPQ_SOCKET,
                    LPRM_AGENT, LPRM_AGENT_L,FIRST_FLAG);
 
%INCLUDE CP_6;
%INCLUDE CP_6_SUBS;
%INCLUDE LPD_C61;
%INCLUDE LPD_C62;
%INCLUDE XU_MACRO_C;
%INCLUDE XU_FORMAT_C;
%INCLUDE XUF_ENTRY;
%INCLUDE XSL_PERR_C;
%INCLUDE XSL_SOCKET_E;
%INCLUDE XSL_SOCKET_M;
%INCLUDE B_ERRORS_C;
 
%F_FDS (NAME=LPQ_FDS,NVECS=5,VECTR=DATA_VECS,DVFC=' ');
%B$ALT;
%B$TCB(STCLASS="BASED(B$TCB$)");
DCL B$TCB$ PTR SYMREF;
DCL LPQ_FMT1 CHAR(0) STATIC
  INIT('%A%10-%A%22-%A%28-%A%65-%D%69-Granules');
DCL LPQ_FMT2 CHAR(0) STATIC
  INIT('%D%10-%A%22-%A%28-%A%65-%D%69-Granules');
DCL LPQ_HEADING CHAR(0) STATIC
INIT('Rank      Owner       Job   Jobname                                Total Size  ');
DCL DATA_VECS(0:4) VECTOR DALIGNED STATIC INIT(VECTOR(NIL));
DCL ACTIVE_STR CHAR(0) STATIC INIT('Prt');
DCL OUTBUF CHAR(80) STATIC INIT(' ');
 
DCL TEXT_PARAM CHAR(31);
DCL TEXT_L_PARAM SBIN WORD;
DCL LPQ_SOCKET SBIN WORD;
DCL LPRM_AGENT CHAR(31);
DCL LPRM_AGENT_L SBIN WORD;
DCL FIRST_FLAG SBIN WORD;
 
DCL DUMMY_BUF CHAR(512) BASED;
DCL DUMMY_UBIN UBIN BYTE CALIGNED BASED;
DCL RESULT SBIN WORD STATIC INIT(0);
 
DCL 1 TEXTC BASED,
    2 L UBIN BYTE CALIGNED,
    2 TEXT CHAR(TEXTC.L) UNAL;
 
 
DCL P$ PTR;
DCL BUF$ PTR;
 
DCL HALFWORD UBIN HALF HALIGNED BASED;
DCL WHOLWORD UBIN WORD  ALIGNED BASED;
DCL LEN UBIN WORD;
DCL ACTIVE_FLAG BIT(1) STATIC INIT('0'B);
DCL JOBNUM_FLAG BIT(1) STATIC INIT('0'B);
DCL CANCEL_FLAG BIT(1) STATIC INIT('0'B);
DCL I SBIN;
 
DCL XSL$WRITE ENTRY (4) ALTRET;
DCL XB_RETURN_ORDINAL_RESULT ENTRY (1);
 
   GOTO OPEN_STATS_FILE;
 
LPD$CANCEL: ENTRY (TEXT_PARAM, TEXT_L_PARAM, LPQ_SOCKET,
                   LPRM_AGENT, LPRM_AGENT_L);
 
   CANCEL_FLAG = '1'B;
 
OPEN_STATS_FILE:;
 
   OPEN_STATS.V.EXIST# = %OLDFILE#;
   OPEN_STATS.V.FUN#   = %IN#;
   CALL M$OPEN (OPEN_STATS);
   CALL M$PRECORD (BOF_STATS);
 
 
/* Loop forever */
 
   READ_LOOP: DO WHILE '1'B;
 
    /*  read a record into some big buffer */
 
        CALL M$READ (READ_STATS)
 
             WHENALTRETURN DO;
                 EXIT READ_LOOP;
             END;
 
     /* Fill in all the variables host, queue,user,jobnumber,
        jobname, sysid, and subfile ID.  */
 
        BUF$ = ADDR(LPDSTATS_BUF);             /* SYSID */
        P$ = ADDR(LPD_JOBSTATS.V.SYSID#);
        P$->WHOLWORD = BUF$->HALFWORD;
 
        BUF$ = PINCRC(ADDR(LPDSTATS_BUF),2);   /* SUBFILE ID */
        P$ = ADDR(LPD_JOBSTATS.V.NUM#);
        P$->HALFWORD = BUF$->HALFWORD;
 
        BUF$ = PINCRC(ADDR(LPDSTATS_BUF),4);   /* HOST NAME LEN */
        LPDHOST.L = BUF$->DUMMY_UBIN;
 
        BUF$ = PINCRC(ADDR(LPDSTATS_BUF),5);   /* HOST NAME */
        LPDHOST.C = SUBSTR(BUF$->DUMMY_BUF,0,LPDHOST.L);
        LEN = 5 + LPDHOST.L;
 
        BUF$ = PINCRC(ADDR(LPDSTATS_BUF),LEN); /* USER NAME LEN */
        LPDUSER.L =BUF$->DUMMY_UBIN;
        LEN = LEN + 1;
 
        BUF$ = PINCRC(ADDR(LPDSTATS_BUF),LEN); /* USER NAME */
        LPDUSER.C = SUBSTR(BUF$->DUMMY_BUF,0,LPDUSER.L);
        LEN = LEN + LPDUSER.L;
 
        BUF$ = PINCRC(ADDR(LPDSTATS_BUF),LEN); /* QUEUE NAME LEN */
        LPDQUEUE.L =BUF$->DUMMY_UBIN;
        LEN = LEN + 1;
 
        BUF$ = PINCRC(ADDR(LPDSTATS_BUF),LEN); /* QUEUE NAME */
        LPDQUEUE.C = SUBSTR(BUF$->DUMMY_BUF,0,LPDQUEUE.L);
        LEN = LEN + LPDQUEUE.L;
 
        BUF$ = PINCRC(ADDR(LPDSTATS_BUF),LEN); /* JOB NAME LEN */
        LPDJOBNAME.L =BUF$->DUMMY_UBIN;
        LEN = LEN + 1;
 
        BUF$ = PINCRC(ADDR(LPDSTATS_BUF),LEN); /* JOB NAME */
        LPDJOBNAME.C = SUBSTR(BUF$->DUMMY_BUF,0,LPDJOBNAME.L);
        LEN = LEN + LPDJOBNAME.L;
 
        BUF$ = PINCRC(ADDR(LPDSTATS_BUF),LEN); /* JOB NUM LEN */
        LPDJOBNUM.L =BUF$->DUMMY_UBIN;
        LEN = LEN + 1;
 
        BUF$ = PINCRC(ADDR(LPDSTATS_BUF),LEN); /* JOB NUM */
        LPDJOBNUM.C = SUBSTR(BUF$->DUMMY_BUF,0,LPDJOBNUM.L);
        LEN = LEN + LPDJOBNUM.L;
 
 
     /* If the parameter is equal to the job name or job number */
 
        IF (((SUBSTR(TEXT_PARAM,0,TEXT_L_PARAM - 1) =
             SUBSTR(LPDJOBNUM.C,0,LPDJOBNUM.L - 1)) AND
             TEXT_L_PARAM = LPDJOBNUM.L)) THEN DO;
           JOBNUM_FLAG = '1'B;
           GOTO CALL_JOBSTATS;
        END;
 
        IF (((SUBSTR(TEXT_PARAM,0,TEXT_L_PARAM - 1) =
             SUBSTR(LPDUSER.C,0,LPDUSER.L - 1)) AND
            TEXT_L_PARAM = LPDUSER.L)) THEN
            GOTO CALL_JOBSTATS;
 
        DO WHILE '0'B; /* NEVER */
 
           CALL_JOBSTATS:
           CALL M$JOBSTATS (LPD_JOBSTATS)
                WHENALTRETURN DO;
                   GOTO READ_LOOP;
                END;
           IF (LPD_CHECK_RESULTS.CODE = %JS_PRT# OR
              LPD_CHECK_RESULTS.CODE = %JS_PWAIT#) THEN DO;
 
              IF LPD_CHECK_RESULTS.CODE = %JS_PRT# THEN DO;
                 ACTIVE_FLAG = '1'B;
                 LPQ_FDS.FMT_.FMT$ = ADDR(LPQ_FMT1);
                 LPQ_FDS.FMT_.BOUND = SIZEV(LPQ_FMT1);
              END;
 
              IF LPD_CHECK_RESULTS.CODE = %JS_PWAIT# THEN DO;
                 ACTIVE_FLAG = '0'B;
                 LPQ_FDS.FMT_.FMT$ = ADDR(LPQ_FMT2);
                 LPQ_FDS.FMT_.BOUND = SIZEV(LPQ_FMT2);
              END;
 
              LPD_JOBSTATS.V.ORDER# = %SRCH#;
              LPD_JOBSTATS.V.OUTPUT# = %YES#;
              LPD_JOBSTATS.RESULTS_ = VECTOR(LPD_SRCH_RESULTS);
              LPD_JOBSTATS.CRITERIA_ = VECTOR(LPD_SRCH_CRITERIA);
              LPD_SRCH_CRITERIA.SYSID# = LPD_JOBSTATS.V.SYSID#;
              LPD_SRCH_CRITERIA.SYSID1# = LPD_JOBSTATS.V.SYSID#;
              CALL M$JOBSTATS (LPD_JOBSTATS)
 
                   WHENALTRETURN DO;
                      GOTO READ_LOOP;
                   END;
 
              DO I = 0 TO LPD_SRCH_RESULTS.FOUND - 1;
 
                 P$ = ADDR(LPD_SRCH_RESULTS.F(I));
                 IF P$->LPD_SRCH_ARRAY.NUM = LPD_JOBSTATS.V.NUM#
                    THEN DO;
 
                    IF CANCEL_FLAG THEN DO;
                       IF ((SUBSTR(LPRM_AGENT,0,LPRM_AGENT_L) =
                          SUBSTR(LPDUSER.C,0,LPDUSER.L)) OR
                          (SUBSTR(LPRM_AGENT,0,4) = 'root')) THEN DO;
                          LPD_JOBSTATS.V.ORDER# = %CANCELF#;
                          LPD_JOBSTATS.V.OUTPUT# = %YES#;
                          CALL M$JOBSTATS (LPD_JOBSTATS);
                          RESULT = 1;
                          GOTO ALL_DONE;
                          END;
                       ELSE
                          GOTO READ_LOOP;
                    END;
 
                    IF FIRST_FLAG = 0 THEN DO;
                       P$ = PINCRC(ADDR(LPQ_HEADING),SIZEC(LPQ_HEADING)-1);
                       P$->DUMMY_UBIN = 10;
                       CALL XSL$WRITE(RESULT,LPQ_SOCKET,LPQ_HEADING,
                            SIZEC(LPQ_HEADING));
                       FIRST_FLAG = FIRST_FLAG + 1;
                       P$ = ADDR(LPD_SRCH_RESULTS.F(I));
                    END;
 
                    IF ACTIVE_FLAG THEN
                       DATA_VECS(0) = VECTOR(ACTIVE_STR);
                    ELSE DO;
                       VBASE(DATA_VECS(0)) = ADDR(P$->LPD_SRCH_ARRAY.AHEAD);
                       VBOUND(DATA_VECS(0)) = SIZEV(P$->LPD_SRCH_ARRAY.AHEAD);
                    END;
 
                    VBASE(DATA_VECS(1)) = ADDR(LPDUSER.C);
                    VBOUND(DATA_VECS(1)) = LPDUSER.L;
 
                    VBASE(DATA_VECS(2)) = ADDR(LPDJOBNUM.C);
                    VBOUND(DATA_VECS(2)) = LPDJOBNUM.L;
 
                    VBASE(DATA_VECS(3)) = ADDR(LPDJOBNAME.C);
                    VBOUND(DATA_VECS(3)) = LPDJOBNAME.L;
 
                    VBASE(DATA_VECS(4)) = ADDR(P$->LPD_SRCH_ARRAY.GRANS);
                    VBOUND(DATA_VECS(4)) = SIZEV(P$->LPD_SRCH_ARRAY.GRANS);
 
                    LPQ_FDS.BUF_.BUF$ = ADDR(OUTBUF);
                    LPQ_FDS.BUF_.BOUND = SIZEV(DUMMY_BUF);
 
                    CALL X$FORMAT (LPQ_FDS);
 
                    /* Put a LF at the end of the string */
                    P$ = PINCRC(ADDR(OUTBUF),LPQ_FDS.BUFX+1);
                    P$->DUMMY_UBIN = 10;
 
                    CALL XSL$WRITE(RESULT,LPQ_SOCKET,
                         OUTBUF,LPQ_FDS.BUFX+2);
 
                    IF JOBNUM_FLAG THEN GOTO ALL_DONE;
 
                 END;
 
              END; /* I = O TO LPD_SRCH_RESULTS.FOUND */
 
           END; /* IF %JS_PRT# OR %JS_PWAIT# */
 
           EXIT; /* DO NEVER */
 
        END; /* DO NEVER */
 
   END; /* READ_LOOP */
 
   ALL_DONE:
 
   CALL XB_RETURN_ORDINAL_RESULT (RESULT);
 
END LPD$CHKSTATS;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/*X* DDA */
 
LPD$CHKUSER: PROC (LPD_HOST,LPD_HOST_LEN,LPD_USER,LPD_USER_LEN,ACCT,
                   ACCT_LEN,UNAME,UNAME_LEN);
 
%INCLUDE CP_6;
%INCLUDE CP_6_SUBS;
%INCLUDE LPD_C61;
%INCLUDE LPD_C62;
%INCLUDE XU_MACRO_C;
%INCLUDE XUG_ENTRY;
%INCLUDE XUW_MACRO_C;
 
%P_PCB     (NAME=P_PCB,R=LPD_USERMAP,STCLASS="STATIC SYMDEF",
            C_LD = ' #');
%PARSE$OUT (NAME=OUT,STCLASS="BASED(OUT$)");
%PARSE$SYM (NAME=SYM,STCLASS="BASED(SYM$)");
%XUG_INIT  (PCB=P_PCB);
%XUG_GETCMD(NAME=XUG_GETCMD,NODES=LPD_USERMAP,TEXT=INPUT_BUF);
%XUW_WILDCARD (WILD_CHAR='*',CONTAINS=YES);
%XUW_ENTRIES;
 
DCL XB_RETURN_ORDINAL_RESULT ENTRY (1);
 
DCL LPD_HOST CHAR(31);
DCL LPD_HOST_LEN SBIN;
DCL LPD_USER CHAR(31);
DCL LPD_USER_LEN SBIN;
DCL ACCT CHAR(8);
DCL ACCT_LEN SBIN;
DCL UNAME CHAR(12);
DCL UNAME_LEN SBIN;
 
DCL OUT$ PTR;
DCL SYM$ PTR;
 
DCL P1$  PTR;      /* PTR to UNIX HOST parse node text */
DCL P2$  PTR;      /* PTR to UNIX USER parse node text */
DCL P3$  PTR;      /* PTR to CP6 ACCOUNT parse node text */
DCL P4$  PTR;      /* PTR to CP6 NAME parse node text */
 
DCL CONST_BUF  CHAR(120) CONSTANT INIT(' ');
DCL OUTPUT_BUF CHAR(120) STATIC INIT(' ');
 
DCL LPD_USERMAP SBIN SYMREF;
 
DCL RESULT SBIN WORD STATIC INIT(%NOUSER);
DCL INDX SBIN;
 
DCL 1 TEXTC BASED,
    2 COUNT UBIN BYTE CALIGNED,
    2 TEXT CHAR (TEXTC.COUNT) UNAL;
 
CALL XUG$INIT (XUG_GETCMD,XUG_INIT);
CALL M$OPEN (OPEN_LPDUSERS);
 
DO WHILE('1'B);
   READ_AGAIN:
   INPUT_BUF = CONST_BUF;
   CALL M$READ (READ_LPDUSERS) ALTRET (READ_ERROR);
   CALL XUG$GETCMD (XUG_GETCMD)
   WHENRETURN DO;
      IF P_PCB.OUT$->OUT.NSUBLKS = 0 THEN GOTO READ_AGAIN;
      P1$ = P_PCB.OUT$->OUT.SUBLK$(0)->OUT.SUBLK$(0)->SYM.TEXTC$;
      P2$ = P_PCB.OUT$->OUT.SUBLK$(0)->OUT.SUBLK$(1)->SYM.TEXTC$;
      P3$ = P_PCB.OUT$->OUT.SUBLK$(1)->OUT.SUBLK$(0)->SYM.TEXTC$;
      P4$ = P_PCB.OUT$->OUT.SUBLK$(1)->OUT.SUBLK$(1)->SYM.TEXTC$;
 
      XUW_WILDCARD.PATTERN_.PATTERN$ = PINCRC(P1$,1);
      XUW_WILDCARD.PATTERN_.BOUND = P1$->TEXTC.COUNT - 1;
      XUW_WILDCARD.INPUT_.INPUT$ = ADDR(LPD_HOST);
      XUW_WILDCARD.INPUT_.BOUND = LPD_HOST_LEN;
 
      CALL X$WILDCMP (XUW_WILDCARD)
           WHENRETURN DO;
 
              XUW_WILDCARD.PATTERN_.PATTERN$ = PINCRC(P2$,1);
              XUW_WILDCARD.PATTERN_.BOUND = P2$->TEXTC.COUNT - 1;
              XUW_WILDCARD.INPUT_.INPUT$ = ADDR(LPD_USER);
              XUW_WILDCARD.INPUT_.BOUND = LPD_USER_LEN;
 
              CALL X$WILDCMP (XUW_WILDCARD)
                   WHENRETURN DO;
                      CALL INDEX(INDX,'*',P2$->TEXTC.TEXT)
                           WHENRETURN DO;
                              RESULT = %WILDUSER;
                           END;
                           WHENALTRETURN DO;
                              RESULT = %FOUNDUSER;
                           END;
                      ACCT = P3$->TEXTC.TEXT;
                      ACCT_LEN = P3$->TEXTC.COUNT;
                      UNAME = P4$->TEXTC.TEXT;
                      UNAME_LEN = P4$->TEXTC.COUNT;
                      GOTO END_CHK;
                   END;
           END;
 
   END;
END;
 
DO WHILE '0'B; /* NEVER */
   READ_ERROR:
   RESULT = %NOUSER;
   EXIT;
END;
 
END_CHK:
CALL M$CLOSE (CLOSE_LPDUSERS);
CALL XB_RETURN_ORDINAL_RESULT (RESULT);
 
END LPD$CHKUSER;
