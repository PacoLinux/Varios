.*M*
.fif
HELP file for: CURSOR
.*T*
 **************************************************************
 *                                                            *
 *  Copyright (c) Bull HN Information Systems Inc., 1989      *
 *                                                            *
 **************************************************************
.fin                                             
.*
FYI, this HELP file has been specially prepared to run through TUNA.X (LEN=72)
prior to running through HERMAN.  This action will guarantee that the lines of
text in it will fill a screen as much as possible, and that more lines will end
up per screen.
.*R*
.*A*
CURSOR - Routines to perform CRT cursor positioning.
.*B*
CURSOR is a collection of utility routines designed to aid in the writing of
programs that want to use the cursor positioning abilities of CRT's.  They are
designed to be as device-independent as possible.  They were designed with the
intention of being called from FORTRAN, but should work for other languages as
well.  The routines and their functions are as follows:
 
.*R*
INITCRT        This routine initializes the information other routines make use
of.  It determines the profile the user has set, reads that profiles record,
and extracts the information nessecary.  For this routine to perform properly,
the use MUST have set his profile correctly for the kind of CRT he is using.
It is not nessesary to call this routine explicity, as it will be called the
first time CURSOR or CRT are called.  If it is called by the user it will
return the width and height of the CRT.  Height will be 0 for non-CRT
terminals.
 
.*R*
CURSOR         This routine moves the cursor to an absolute x,y coordinate on
the screen, with (0,0) being the upper left corner of the screen.  If COPTON
has been called, it will buffer up chunks of information to write to the
terminal, and also keep track of the cursor position.  This will cut down on
the number of PMME's done and substantialy speed up the program using CURSOR.
 
.*B*
.*R*
CRT            Also HAZEL, for compatability with older routines.  This routine
performs various functions, according to the number passed to it.  The numbers
and their corresponding functions are:
.*R*
(1) Home the cursor. (2) Clear the screen. (5) Erase to end of line.
.*R*
On terminals that dont have and erase end of line function, it is simulated by
blanking out the line.
.*R*
There are a variety of commands that work ONLY for the Bull VIP7800 series
terminals:
.*
.fif
.*R*
 (10) Set form mode   (11) Blinking
 (12) Hide            (13) Inverse video
 (14) Low intensity   (15) Underline
 (16) Alpha only      (17) Digits only
 (18) Entry required  (19) Fill required
 (20) Jusify right    (21) Modify transmit unprotected
 (22) Numerics only   (23) Transmit always protected
 (24) Unprotected     (25) Protected
 (26) Restore         (27) Character mode
 (28) Echoplex        (29) Roll mode set
 (30) Text mode       (31) Data space home
 (32) Keybored lock   (33) Keyboard unlock
 (34) TAB set
.*
.fin
.*R*
.*B*
CRTFLUSH       This routine causes any buffered data to be printed, and resets
the saved cursor location to unknown.  This is used when cursor optimization is
on.  It MUST be called before you do any I/O to the terminal not using these
routines, or perform any procedure that will take a large amount of real time.
 
.*R*
CRTFLSHX       This routine is just like CRTFLUSH, except that it assumes that
the cursor will not be moved by the user.  This routine allows more efficient
use, but remember, it is up to you to make sure the cursor is only moved by
calling these routines.
 
.*R*
COPTON and COPTOFF
.*R*
               These routines turn the cursor optimization on or off.  This
optimization is highly recomended.
 
.*R*
.*B*
WRITE          You pass this routine a text string and its length.  It is
advisable to use this for all writes to the terminal to prevent undesirable
interaction with the systems cursor postioning.
 
.*R*
KEYIN          This routine does a read from the terminal.  Specify the
location to read from, and the size to read.  Note that unlike FORTRAN I/O,
when the user types enough to complete the read, KEYIN will return to the
program, not waiting for a carriage return.  Example:
.*R*
If you call KEYIN(I,1), the routine will return as soon as the users types any
character.
 
.*R*
RBIN           Reads a single character in transparent mode.  The character is
not echoed to the users screen.
 
.*R*
.*B*
SCREECH        Flushes the buffer and then does an M$EXIT.
 
.*R*
WAIT           Waits for the required number of seconds.
 
.*R*
PROMPT         Sets the prompt character(s).  First character is VFC.
.*R*
CALL PROMPT('ANYTHING'); also, CALL PROMPTC('STRNG',LENGTH).  The PROMPT entry
only works for FORTRAN programs.
 
.*R*
BREAK          Returns 1 if the user hit break, 0 if not.
 
.*R*
NOWAIT         Reads one character in transparent mode with a ten millisecond
time-out.  Returns 0 if it didn't get a character.
 
.*R*
.*B*
ERROUT         Called with a CP-6 error code, and it is writen out, with the
error message if it can be found.  Very useful for displaying IOSTAT info from
OPEN statments, etc.  If called with a zero argument, it will display the most
recent error in the ALT frame.
 
.*R*
.*B*
The routines COPTOFF, WRITE, KEYIN, RBIN, SCREECH, WAIT, NOWAIT all
automaticaly call CRTFLUSH.  This insures that I/O will occur in the order of
user output.  Note that if you are doing I/O to the CRT other than through
these routines, and cursor optimization is on, it is your responsibility to
call CRTFLUSH before performing I/O.  Also, don't forget to call CRTFLUSH at
the end of the program if you don't call SCREECH, if not, some of your output
will mysteriously disappear.
.*R*
 
These routines are designed to work with a wide range of CRT's.  The ones that
it will not handle are:
.*R*
1) Terminals that are not fully and correctly described by their profile
records.
.*R*
2) Terminals that use a macabre type of direct cursor positioning that is not
compatable with normal table driven cursor positioning, and do not support ANS
x3.64 standard cursor positioning.  Note that the terminal must have either
direct cursor positioning (CUP_ALG=ANS or CUP_ALG=TBL (2) with CUP_CHR, etc.,
described) or it must have the full set of cursor movement commands
(CUU_CHR,CUB_CHR,CUF_CHR,CUD_CHR).  These routines can also handle (to a
limited point) hardcopy terminals like them Diablo 1620 that have reverse
line-feed capabilities.
.*X*
.*K* XINDEX
CURSOR.X
.*R*
AID=PROGRAMMING
.*R*
AID=UTILITY
.*R*
SCREEN_UPDATING
.*R*
TERMINALS
.*R*
.*K* XINDEX_ABSTRACT
TOOL=CURSOR
.*R*
Callable routines to perform CRT cursor positioning.
.*K* CHANGES Changes changes
11/26/90 - Fixed star 40485 - CUP_ALG=ANS doesn't always include erasing.
.*B*
10/9/89 - Fixed keyins activated w/o NL echo to echo CR instead.
.*R*
850829
.*R*
Updated to reflect changes in C01 profile records.
.*R*
841015
.*R*
Updated for C00R compatibility.  Sigh.
.*R*
2/22/84
 
Totally rewrote all code having to do with ANS X3.64 terminals... the old code
for X3.64 didn't work at all well.
.*R*
02/03/84
 
C00 version of CURSOR released to the X account.  This version uses the
C00-format :PROfile file, and will not operate on pre-C00 systems.
 
10/04/82
.*R*
Fixed bug dealing with output record size.
 
07/06/82
.*R*
Increased size of cursor-motion buffer to 4096 bytes, to prevent a trap
condition if CURSOR is used on a high-speed terminal which requires long delays
between positioning operations.
 
Fixed KEYIN to blank-fill the user's buffer only up to the number of characters
specified in the call to KEYIN, rather than to the next multiple of 4
characters >= the user-specified number.
.*B*
.*R*
.*K* OWNER
Peter Rumsey, LADC
