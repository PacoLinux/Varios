/*M* BFILES - a program to list files found bad by CP6 */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
DELFILES: PROC(PACKNAME,HPSN,MODE);
 
DCL ERRORCODE UBIN;
DCL OUTPUT CHAR(75) STATIC;
DCL FID_ASN UBIN(9) STATIC ALIGNED;
DCL FID_RES CHAR(4) STATIC;
DCL PACKNAME CHAR(60);
DCL FID_TEXT CHAR(60) STATIC;
DCL HPSN CHAR(6);
DCL M$LO DCB;
DCL M$IN1 DCB;
DCL M$IN2 DCB;
DCL TEST BIT(1) UNAL;
DCL MODE BIT(1);
 
%SUB EAC# = 108;                        /* END OF ACCOUNT DIRECTORY           */
%SUB NOAC#=66;                          /* DELETED ACCOUNT */
%SUB EOP# = 125;                        /* END OF PACK DIRECTORY              */
 
%INCLUDE CP_6;
%INCLUDE B$JIT_C;
%B$JIT0(STCLASS="BASED(B$JIT$)");
      2 * BIT(1);
DCL B$JIT$ PTR;
 
%FPT_PRIV(FPTN=FPT_FMS,STCLASS=STATIC,AUTH=YES,PRIV=%PR_FMSEC#);
 
%FPT_EXIT(FPTN=SQUASH,STCLASS=STATIC);
%FPT_WRITE(FPTN=WRITE_LO,STCLASS=STATIC,DCB=M$LO,BUF=OUTPUT,VFC=YES);
 
%FPT_FID(FPTN=FPT_FID,
         STCLASS=STATIC,
         ACCT=VLP_ACCT,
         ASN=FID_ASN,
         NAME=VLP_NAME,
         PASS=VLP_PASS,
         RES=FID_RES,
         RESULTS=VLR_FID,
         SN=VLP_SN,
         TEXTFID=FID_TEXT,
         WSN=VLP_WSN);
 
%FPT_OPEN(FPTN=OPEN_SCAN,
         STCLASS=STATIC,
         FUN=IN,
         DCB=M$IN1,
         EXIST=OLDFILE,
         ACS=SEQUEN,
         ASN=FILE,
         THISF=NO,
         TEST=YES,
         SN=VLP_SN,
         ACCT=VLP_ACCT,
         PASS=VLP_PASS,
         NXTF=YES,
         WSN=VLP_WSN);
 
%FPT_OPEN(FPTN=NEXTA,
         STCLASS=STATIC,
         FUN=IN,
         DCB=M$IN1,
         EXIST=OLDFILE,
         ACS=SEQUEN,
         ASN=FILE,
         THISF=NO,
         TEST=YES,
         ACCT=VLP_ACCT,
         PASS=VLP_PASS,
         NAME=VLP_NAME,
         NXTF=YES,
         NXTA=YES,
         SN=VLP_SN,
         WSN=VLP_WSN);
 
%FPT_CLOSE(FPTN=SAVE,STCLASS=STATIC);
 
%FPT_UNFID(FPTN=SCAN$UNFID,
         STCLASS=STATIC,
         ACCT=VLP_ACCT,
         NAME=VLP_NAME,
         PASS=VLP_PASS,
         RES=FID_RES,
         ASN=FID_ASN,
         SN=VLP_SN,
         TEXTFID=FID_TEXT,
         WSN=VLP_WSN);
 
%VLR_FID(FPTN=VLR_FID,STCLASS=STATIC);
 
%VLP_PASS(FPTN=VLP_PASS,STCLASS=STATIC);
 
%VLP_WSN(FPTN=VLP_WSN,STCLASS=STATIC);
 
%VLP_SN(FPTN=VLP_SN,STCLASS=STATIC);
 
%VLP_NAME(FPTN=VLP_NAME,STCLASS=STATIC);
 
%VLP_ACCT(FPTN=VLP_ACCT,STCLASS=STATIC);
 
%FPT_TIME(FPTN=TIMEX,DATE=DATE,
         TIME=TIME,
         DEST=EXT,
         SOURCE=UTS,
         TSTAMP=STAMP);
 
DCL DATE CHAR(10) STATIC;
 
DCL TIME CHAR(11) STATIC;
 
DCL STAMP UBIN STATIC;
 
%F$DCB;
 
%B$ALT;
 
%B$TCB;
 
DCL B$TCB$ PTR SYMREF;
 
        IF PACKNAME = ' ' THEN DO;
           VLP_SN.SN#(0)=HPSN;
           CALL ACCOUNT;
           RETURN;
           END;
 
        ELSE;
 
        FID_TEXT=PACKNAME;
        CALL M$FID(FPT_FID);
 
        CALL FMSEC;           /* USER BETTER HAVE FMSEC OR HE GETS ZAPPED     */
 
        IF VLP_SN.SN#(0)~=' ' THEN CALL PACK; /* SCAN PACK ?                  */
 
        ELSE CALL ACCOUNT;              /* OR SCAN ACCOUNT                    */
 
        RETURN;                         /* ALL DONE                           */
 
ACCOUNT: PROC;
 
                                        /*  SCAN ACCOUNT ONLY                 */
 
        OPEN_SCAN.V.INITZ.SCRUB#='1'B;  /* SCRUB DCB                          */
        IF MODE='1'B THEN OPEN_SCAN.V.SRCHCOND.BAD#='1'B;
        ELSE
           OPEN_SCAN.V.SRCHCOND.DELF#='1'B;
        TEST='0'B;                      /* NO BADS YET                        */
        ERRORCODE=0;
 
        DO WHILE(ERRORCODE~=EAC#);      /* DO UNTIL END OF ACCT               */
 
           CALL M$OPEN(OPEN_SCAN) ALTRET(CODE); /* GET NEXT FILE              */
 
           SCAN$UNFID.V.DCB#=DCBNUM(M$IN1);
           CALL M$UNFID(SCAN$UNFID);    /* GET ITS NAME                       */
           CALL M$FID(FPT_FID);         /* DISTRIBUTE TO BUFS                 */
           IF TEST='0'B THEN CALL BANNER;
           STAMP=DCBADDR(DCBNUM(M$IN1))->F$DCB.EXPIRE#;
           CALL M$TIME(TIMEX);
           IF MODE='0'B THEN CALL CONCAT(OUTPUT,'a ',DATE,' ',TIME,'   ',VLP_NAME.NAME#);
           ELSE CALL CONCAT(OUTPUT,'a     ',VLP_NAME.NAME#);
           CALL M$WRITE(WRITE_LO);
           TEST='1'B;                   /* FOUND AT LEAST 1 BAD               */
 
           DO WHILE('0'B);
CODE:         ERRORCODE=B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE;
              END;
 
           OPEN_SCAN.V.INITZ.SCRUB#='0'B;
           END;
 
 
END;
 
%EJECT;
 
BANNER: PROC;
 
                                        /*  PURPOSE IS TO PRINT BANNER        */
 
        OUTPUT='a ';
        CALL M$WRITE(WRITE_LO);
        OUTPUT='p ********************************************************';
        CALL M$WRITE(WRITE_LO);
        OUTPUT='a ';
        CALL M$WRITE(WRITE_LO);
 
 
        CALL CONCAT(OUTPUT,'A Pack: ',VLP_SN.SN#(0),'   Account: ',VLP_ACCT.ACCT#);
        CALL M$WRITE(WRITE_LO);
        OUTPUT='a ';
        CALL M$WRITE(WRITE_LO);
        IF MODE='0'B THEN OUTPUT='a        Deletion time        File Name(s)';
        ELSE OUTPUT='a Badfiles listing.';
        CALL M$WRITE(WRITE_LO);
        OUTPUT='a ';
        CALL M$WRITE(WRITE_LO);
 
END;
%EJECT;
PACK:   PROC;
 
/* PURPOSE IS TO SCAN A PACK FOR BAD FILES */
 
        ERRORCODE=0;
        VLP_ACCT.ACCT#=' ';
 
        DO WHILE(ERRORCODE~=EOP#);
 
           CALL M$OPEN(NEXTA) ALTRET(CODE);
           VLP_ACCT.ACCT# = DCBADDR(DCBNUM(M$IN1))->F$DCB.ACCT#;
           CALL ACCOUNT;
           NEXTA.ACCT_=VECTOR(NIL);
 
           DO WHILE('0'B);
CODE:         ERRORCODE=B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE;
              IF ERRORCODE = EAC#
              THEN
                 VLP_ACCT.ACCT# = DCBADDR(DCBNUM(M$IN1))->F$DCB.ACCT#;
              ELSE
                 IF ERRORCODE = EOP# OR ERRORCODE = NOAC#
                 THEN
                 DO;
                    END;
                 ELSE
                    CALL M$MERC;
              END;
 
           END;
 
END;
 
%EJECT;
 
FMSEC:  PROC;
 
                                        /* DOES USER HAVE FMS ?               */
 
        CALL M$SPRIV(FPT_FMS) ALTRET(ABORT);
 
        RETURN;
 
ABORT:  OUTPUT='A account authorization inadequate for requested service.';
        CALL M$WRITE(WRITE_LO);
        SQUASH.V.STEPCC#=4;
        CALL M$EXIT(SQUASH);
 
END FMSEC;
END;
