/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/************************************************************************\
*                                                                        *
*     WHAT displays most information the M$MONINFO call returns          *
* (except MONPTRS) in a more or less readable format.  By default,       *
* WHAT displays the SITE_ID which when run on the L66A or L66B at LADC   *
* will say: 'You're on the L66x'.  Otherwise, it says 'Site ID= n'.  You *
* may also specify a specific group(s)(ex: MONINFO) or item(s)           *
* (ex: SALUTATION) or ALL to get everything.  ALL the options appear     *
* below (only the letters before the '/' are required).                  *
*                                                                        *
* AA/LL         = A[lmost] ALL= The information obtained by M$MONINFO    *
*                 call with MONINFO & SITEINFO specified.                *
*                                                                        *
* AC/ORE        = The number of unallocated physical pages of memory     *
*                 that are available to users                            *
* AL/L          = ALL the information obtained by M$MONINFO call with    *
*                 MONINFO, SITEINFO & SYMBINFO specified.                *
* AN/SPROT      = The level of ANS tape protection in the system (UN,    *
*                 SEMI- or FULLY protected)                              *
* B/OOTFLAG     = Type of system boot                                    *
* GRANL/OW      = A table indicating the PRIORITY assigned to each       *
*                 output symbiont file according to their granule size.  *
* GRANS/CHED    = Indicates whether (~=0) OUTSYM assigns output symbiont *
*                 file priorities by granule size or (=0) by submittal   *
*                 priority.                                              *
* HE/ADER       = The administrative message seen in the logon header    *
*                 which gets set via the HEADER or BROADCAST operator    *
*                 keyins.                                                *
* H/OLDEXPIRE   = The time interval, in hours, for which the 'HOLD'      *
*                 attribute for symbiont output will be honored.  After  *
*                 the specified number of hours has elapsed from the     *
*                 time of submittal, the file will be taken out of hold  *
*                 status and made a candidate for output.  HOLDEXPIRE is *
*                 intended for use in situations where the system        *
*                 manager wishes to prevent files from being 'held' for  *
*                 arbitrarily long periods of time.  A value of zero     *
*                 specifies that no expiration is to be performed.       *
* I/NIT_UTS     = The time and date of the last system initialization    *
*                 (full recovery, disk or tape boot)                     *
* MI/NI_ID      = Current mini version                                   *
*                                                                        *
* MONI/NFO      = The information returned by the M$MONINFO call with    *
*                 MONINFO specified                                      *
* MON_/UTS      = The time and date M:MON was created                    *
* M/UAIS        = Number of user slots (Maximum Users Allowed In System) *
* N/ODE#        = This node number.                                      *
* N/ODE N/AME   = The name of this node.                                 *
* NU/M N/ODES   = Maximum number of nodes that can exist in this network *
* PA/TCHWEEK    = The week number of the current patch level.            *
* P/CORE        = The highest physical page number                       *
* SA/UTATION    = The logon salutation                                   *
* SC/OUNT       = The number of screeches since the last tape boot       *
* SITE_I/D      = The unique SITE ID assigned by HONEYWELL to each       *
*                 installation                                           *
* SITE_N/AME    = The site name                                          *
* SITEI/NFO     = The information returned by the M$MONINFO call with    *
*                 SITEINFO specified                                     *
* ST/REAMFILEID = The output symbiont file BOOTID being used currently   *
* SU/A_UTS      = The time and date of the last Single User Abort        *
* SY/MBINFO     = The information returned by the M$MONINFO call with    *
*                 SYMBINFO specified                                     *
* V/ERSION      = The current CP-6 version and the number of boots       *
*                 "under the files" since it was created                 *
* W/ATCH        = Indicates whether or not a message is to be printed on *
*                 the appropriate device console whenever an output      *
*                 symbiont device commences or ceases output of a file.  *
*                 The message names the file and the device, and is for  *
*                 informational purposes only.                           *
*                                                                        *
\************************************************************************/
WHAT: PROC MAIN;
 
%PLIST;
%INCLUDE B$JIT;
%INCLUDE B_ERRORS_C;
%INCLUDE CP_6;
  %B$ALT;
  %B$TCB;
  %F$DCB;
%INCLUDE CP_6_SUBS;
%INCLUDE XU_MACRO_C;
%INCLUDE XU_PERR_C;
%LIST;
%EJECT;
%INCLUDE WHAT_C1;
%PLIST;
%EJECT;
 
%FPT_MONINFO (FPTN=GETINFO,
              HEADER=HEADER,
              MONINFO=MONINFO,          /* VECTOR(NIL) if no SPCLMM or EXMM   */
              SITEINFO=SITEINFO,
              SYMBINFO=SYMBINFO);       /* VECTOR(NIL) if no SPCLMM or EXMM   */
%VLR_HEADER  (FPTN=HEADER);
%VLR_MONINFO (FPTN=MONINFO);
%VLR_SITEINFO(FPTN=SITEINFO);
%VLR_SYMBINFO(FPTN=SYMBINFO);
 
%FPT_PRIV    (FPTN=GET_SPCLMM,
              AUTH=YES,
              PRIV=%PR_SPCLMM#);
%FPT_PRIV    (FPTN=GET_EXMM,
              AUTH=YES,
              PRIV=%PR_EXMM#);
 
%FPT_OPEN  (FPTN=OPEN_LO,
            DCB=M$LO,
            ORG=TERMINAL);              /* So bells will sound when present   */
%FPT_WRITE (FPTN=FPT_WRITE,
            BUF=LO_BUF );
%FPT_CLOSE (FPTN=CLOSE_LO,
            DCB=M$LO,
            DISP=SAVE);
 
%FPT_TIME  (FPTN=CONV_UTS,         /* Converts UTS to HH:MM:SS.SS MM/DD/YY    */
            DATE=THE.DATE,
            DEST=LOCAL,
            SOURCE=UTS,
            TIME=THE.TIME,
            TSTAMP=UTS);
 
%FPT_EXIT  (FPTN=SET_STEPCC,
            STEPCC=OK);
 
%FPT_CORRES(FPTN=MEVSLO,
            DCB1=M$ME,
            DCB2=M$LO);
%FPT_OPEN  (FPTN=OPEN_ME,
            ASN=DEVICE,
            DCB=M$ME,
            RES='ME  ');
%FPT_CLOSE (FPTN=CLOSE_ME,
            DCB=M$ME,
            DISP=SAVE);
 
%P_PCB     (NAME=WHAT_PARSE,
            R=WHAT_NODES,
            W=WORK,
            WSZ="SIZEW(WORK)");
%PARSE$OUT (NAME=OUT$BLK,
            STCLASS="BASED(BLK1$)");
%PARSE$SYM (NAME=OUT$SYM,
            STCLASS="BASED(BLK2$)");
DCL WHAT_NODES               UBIN      SYMREF;
DCL WORK               CHAR(560) STATIC;/* Enuff for all cmds once            */
DCL X$PARSE                  ENTRY(1)  ALTRET;
%EJECT;
DCL M$LO                     DCB;       /* DCB for most output                */
DCL M$ME                     DCB;       /* DCB for warning that M$LO ~= M$ME  */
 
DCL BLK1$                    PTR;
DCL BLK2$                    PTR;
DCL B$JIT$                   PTR       SYMREF;
 
DCL BEG                      UBIN;
DCL CMD_CODE                 UBIN      STATIC;
DCL ERRORS                   UBIN      STATIC INIT(0);
DCL I                        UBIN      STATIC;
DCL J                        UBIN      STATIC;
DCL LEN                      UBIN;
DCL LO_INDX                  UBIN      STATIC;
DCL M$LO#                    UBIN      STATIC INIT(DCBNUM(M$LO));
DCL M$ME#                    UBIN      STATIC INIT(DCBNUM(M$ME));
DCL TABLEVAL                 UBIN      STATIC;
DCL UTS                      UBIN      STATIC;
 
DCL PRIVILEDGED BIT(1) STATIC INIT('1'B);/* SPCLMM or EXMM?                   */
DCL ALL_SPECIFIED            BIT(1)    STATIC INIT('0'B);
 
DCL 1 THE  STATIC,
      2 *                    CHAR(4)          INIT(' at '),
      2 TIME                 CHAR(11)         INIT('HH:MM:SS.SS'),
      2 *                    CHAR(4)          INIT(' on '),
      2 DATE                 CHAR(8)          INIT('MM/DD/YY');
DCL TIME_DATE REDEF THE      CHAR(27);
 
DCL ANS_MODE(0:2)            CHAR(15)  STATIC INIT(
    'Unprotected',
    'Semi-protected',
    'Fully protected');
 
DCL 1 BOOT_VER_TABLE STATIC,
      2 *                    CHAR(26)         INIT(
        'ABCDEFGHIJKLMNOPQRSTUVWXYZ'),
      2 *                    CHAR(26)         INIT(
        'abcdefghijklmnopqrstuvwxyz'),
      2 *                    CHAR(10)         INIT(
        '0123456789');
DCL BOOT_VER REDEF BOOT_VER_TABLE CHAR(62);
DCL BOOT_FLAG(0:14)          CHAR(36)  STATIC INIT(
/* 0 */ 'dummy entry',
/* 1 */ 'for VOLINIT',
/* 2 */ 'to create NEW FILE system',
/* 3 */ 'to create SYS file system',
/* 4 */ 'for BOOT from tape (NO FILES)',
/* 5 */ 'for SYS files RECONSTRUCT',
/* 6 */ 'for BOOT with RECONSTRUCT (NO FILES)',
/* 7 */ 'for DISKBOOT',
/* 8 */ 'for DISKBOOT with RECONSTRUCT',
/* 9 */ 'for RECOVERY',
/*10 */ 'for RECOVERY',
/*11 */ 'for OPERATOR RECOVERY',
    ' '*0);
 
DCL LO_BUF                   CHAR(256) STATIC INIT(' ');
DCL INT5                     CHAR(5)   STATIC;
 
DCL 1 SKIP_ZEROS  STATIC,
      2 *                    CHAR(48)  UNAL   INIT(' '),
      2 ZERO                 BIT(9)    UNAL   INIT('000'O),
      2 *                    CHAR(79)  UNAL   INIT(' ');
DCL 1 SKIP_BLANKS STATIC,
      2 *                    CHAR(32)  UNAL   INIT(' '),
      2 BLANK                BIT(9)    UNAL   INIT('000'O),
      2 *                    CHAR(95)  UNAL   INIT(' ');
%EJECT;
    CALL M$OPEN( OPEN_ME )  ALTRET( TRY_TO_GET_SPCLMM );
    CALL M$CORRES( MEVSLO )  ALTRET( TRY_TO_GET_SPCLMM );  /* M$ME = M$LO?    */
    LO_BUF= 'Warning: WHATs output (M$LO) is externally SET elsewhere';
    CALL W$WRITE( M$ME# );
    CALL M$CLOSE( CLOSE_ME );
TRY_TO_GET_SPCLMM:
    CALL M$OPEN( OPEN_LO );
    CALL M$SPRIV( GET_SPCLMM )  ALTRET( TRY_TO_GET_EXMM );
    DO WHILE('0'B);
TRY_TO_GET_EXMM:
      CALL M$SPRIV( GET_EXMM )  ALTRET( OOPS );
      END;
    CALL M$MONINFO(GETINFO)  ALTRET( OOPS );
    DO WHILE('0'B);
OOPS:
      GETINFO.MONINFO_ = VECTOR( NIL );
      GETINFO.SYMBINFO_= VECTOR( NIL );
      PRIVILEDGED = '0'B;
      CALL M$MONINFO(GETINFO)  ALTRET( FORGET_IT );
      END;
 
    WHAT_PARSE.TEXT$= ADDR(B$JIT.CCBUF);
    WHAT_PARSE.NCHARS= B$JIT.CCARS;
    CALL X$PARSE( WHAT_PARSE )  ALTRET( PARSE_ERROR );
    BLK1$= WHAT_PARSE.OUT$;
    IF NOT PRIVILEDGED THEN DO;
      DO I = 1 TO BLK1$->OUT$BLK.NSUBLKS-1;
        BLK2$= BLK1$->OUT$BLK.SUBLK$(I);
        CMD_CODE= BLK2$->OUT$SYM.CODE;
        DO CASE( CMD_CODE );
          CASE( %ACORE##,               /* Check for any options which        */
                %BOOTFLG##,
                %GRANLOW##,
                %GRANSCHED##,           /* need priviledge we don't           */
                %HOLDEXPIRE##,
                %INIT_UTS##,
                %MONINFO##,
                %MUAIS##,               /* have (namely SPCLMM or EXMM)       */
                %PCORE##,
                %SCOUNT##,
                %STREAMFILEID##,
                %SUA_UTS##,
                %SYMBINFO##,
                %WATCH## );
            BLK2$->OUT$SYM.CODE= 0; /* Zero so we don't try to do it later    */
            LO_INDX= BLK2$->OUT$SYM.CPOS+1;
            CALL INSERT(LO_BUF,LO_INDX,1,'^');
            ERRORS= ERRORS + 1;
          CASE( %AALL##,
                %ALL## );
            BLK2$->OUT$SYM.CODE= %SITEINFO##; /* Change 'ALL' to 'SITEINFO'   */
            LO_INDX= BLK2$->OUT$BLK.CPOS+1;
            CALL INSERT(LO_BUF,LO_INDX,1,'^');
            ERRORS= ERRORS + 1;
            ALL_SPECIFIED= '1'B;
          END;                          /* end DO CASE(CMD_CODE)              */
        END;                  /* end DO I = 1 TO BLK1$->OUT$BLK.NSUBLKS-1     */
      IF ERRORS > 0 THEN DO;
        CALL W$WRITE( M$LO# );
        LO_BUF= 'Unable to perform indicated options due to lack of privileges(SPCLMM or EXMM)';
        CALL W$WRITE( M$LO# );
        IF ALL_SPECIFIED THEN DO;
          LO_BUF= 'The ALL/AALL option was performed as if it was SITEINFO';
          CALL W$WRITE( M$LO# );
          END;
        LO_BUF= ' ';
        CALL W$WRITE( M$LO# );
        END;
      END;
%EJECT;
    DO I = 1 TO BLK1$->OUT$BLK.NSUBLKS-1;
      BLK2$= BLK1$->OUT$BLK.SUBLK$(I);
      CMD_CODE = BLK2$->OUT$SYM.CODE;
      DO CASE( CMD_CODE );
        CASE( %AALL##,
              %ALL## );
          CMD_CODE = %HEADER##;
          CALL DO_CMD;
          LO_BUF= ' ';
          CALL W$WRITE( M$LO# );
 
          LO_BUF= 'SITEINFO:';
          CALL W$WRITE( M$LO# );
          CMD_CODE = %ANSPROT##;
          CALL DO_CMD;
          CMD_CODE = %MON_UTS##;
          CALL DO_CMD;
          CMD_CODE = %SALUTATION##;
          CALL DO_CMD;
          CMD_CODE = %SITE_ID##;
          CALL DO_CMD;
          CMD_CODE = %SITE_NAME##;
          CALL DO_CMD;
          CMD_CODE = %VERSION##;
          CALL DO_CMD;
          CMD_CODE= %MINI_ID##;
          CALL DO_CMD;
          CMD_CODE= %PATCHWEEK##;
          CALL DO_CMD;
 
          LO_BUF= ' ';
          CALL W$WRITE( M$LO# );
          LO_BUF= 'MONINFO:';
          CALL W$WRITE( M$LO# );
          CMD_CODE = %PCORE##;
          CALL DO_CMD;
          CMD_CODE = %ACORE##;
          CALL DO_CMD;
          CMD_CODE = %MUAIS##;
          CALL DO_CMD;
          CMD_CODE = %INIT_UTS##;
          CALL DO_CMD;
          CMD_CODE = %SUA_UTS##;
          CALL DO_CMD;
          CMD_CODE = %SCOUNT##;
          CALL DO_CMD;
          CMD_CODE = %BOOTFLG##;
 
          IF BLK2$->OUT$SYM.CODE = %ALL## THEN DO;
            CALL DO_CMD;
            LO_BUF= ' ';
            CALL W$WRITE( M$LO# );
            LO_BUF= 'SYMBINFO:';
            CALL W$WRITE( M$LO# );
            CMD_CODE= %HOLDEXPIRE##;
            CALL DO_CMD;
            CMD_CODE= %WATCH##;
            CALL DO_CMD;
            CMD_CODE = %STREAMFILEID##;
            CALL DO_CMD;
            CMD_CODE = %GRANSCHED##;
            IF SYMBINFO.GRANSCHED# ~= 0 THEN DO;
               CALL DO_CMD;
               CMD_CODE = %GRANLOW##;
               END;
            END;
 
        CASE( %MONINFO## );
          CMD_CODE = %PCORE##;
          CALL DO_CMD;
          CMD_CODE = %ACORE##;
          CALL DO_CMD;
          CMD_CODE = %MUAIS##;
          CALL DO_CMD;
          CMD_CODE = %INIT_UTS##;
          CALL DO_CMD;
          CMD_CODE = %SUA_UTS##;
          CALL DO_CMD;
          CMD_CODE = %SCOUNT##;
          CALL DO_CMD;
          CMD_CODE = %BOOTFLG##;
 
        CASE( %SITEINFO## );
          CMD_CODE = %ANSPROT##;
          CALL DO_CMD;
          CMD_CODE = %HEADER##;
          CALL DO_CMD;
          CMD_CODE = %MON_UTS##;
          CALL DO_CMD;
          CMD_CODE = %SALUTATION##;
          CALL DO_CMD;
          CMD_CODE = %SITE_ID##;
          CALL DO_CMD;
          CMD_CODE = %SITE_NAME##;
          CALL DO_CMD;
          CMD_CODE = %VERSION##;
          CALL DO_CMD;
          CMD_CODE= %MINI_ID##;
          CALL DO_CMD;
          CMD_CODE= %PATCHWEEK##;
 
        CASE( %SYMBINFO## );
          IF NOT PRIVILEDGED THEN GOTO NEXT_CMD;
          CMD_CODE= %HOLDEXPIRE##;
          CALL DO_CMD;
          CMD_CODE= %WATCH##;
          CALL DO_CMD;
          CMD_CODE = %STREAMFILEID##;
          CALL DO_CMD;
          CMD_CODE = %GRANSCHED##;
          IF SYMBINFO.GRANSCHED# ~= 0 THEN DO;
             CALL DO_CMD;
             CMD_CODE = %GRANLOW##;
             END;
        END;                            /* end DO CASE(CMD_CODE)              */
      CALL DO_CMD;
NEXT_CMD:
      END;                    /* end DO I = 1 TO BLK1$->OUT$BLK.NSUBLKS-1     */
    IF BLK1$->OUT$BLK.NSUBLKS = 1 THEN DO;  /* No options specified           */
      CMD_CODE = %SITE_NAME##;
      CALL DO_CMD;
      IF HEADER.HEADER# ~= ' ' THEN DO;
         CMD_CODE = %HEADER##;
         CALL DO_CMD;
         END;
      END;
    GOTO QUIT;
PARSE_ERROR:
    LO_BUF= ' ';
    IF WHAT_PARSE.ERROR.CODE = 1 THEN
         LO_INDX= WHAT_PARSE.HI_CHAR+1;
    ELSE LO_INDX= B$JIT.CCARS+1;
    CALL INSERT(LO_BUF,LO_INDX,1,'^');
    CALL W$WRITE( M$LO# );
    IF WHAT_PARSE.ERROR.CODE = 1 THEN
         LO_BUF= 'Syntax error about here';
    ELSE IF WHAT_PARSE.ERROR.CODE = 4 THEN
              LO_BUF= 'Sorry!  That was more that I could swallow!';
         ELSE LO_BUF= '* Parse error; program problem *';
    CALL W$WRITE( M$LO# );
FORGET_IT:
    SET_STEPCC.V.STEPCC#= 4;           /* Set STEPCC to 4 indicating error    */
QUIT: ;
    CALL M$CLOSE( CLOSE_LO );
    CALL M$EXIT(SET_STEPCC);
%EJECT;
DO_CMD: PROC;
 
    LO_INDX= 0;
    LO_BUF= ' ';
    DO CASE( CMD_CODE );
      CASE( %ACORE## );
        CALL BINCHAR(INT5,MONINFO.ACORE#);
        IF MONINFO.ACORE# > 0 THEN
             CALL SEARCH(BEG,TABLEVAL,SKIP_ZEROS,INT5);
        ELSE BEG= LENGTHC('0000');
        CALL CONCAT(LO_BUF,SUBSTR(INT5,BEG,LENGTHC(INT5)-BEG),
                           ' pages are unallocated');
      CASE( %ANSPROT## );
        CALL SEARCHR(BEG,TABLEVAL,SKIP_BLANKS,ANS_MODE(SITEINFO.ANSPROT#));
        CALL CONCAT(LO_BUF,'ANS tapes are ',
                           ANS_MODE(SITEINFO.ANSPROT#));
      CASE( %BOOTFLG## );
        CALL CONCAT(LO_BUF, 'Service last interrupted ',
                            BOOT_FLAG(MONINFO.BOOTFLAG#));
 
      CASE( %GRANLOW## );
        IF SYMBINFO.GRANSCHED# = 0 THEN
             LO_BUF= 'Not applicable; priorities assigned by submittal priority';
        ELSE DO;
             LO_BUF= 'Output symbiont files are assigned priorities as follows:';
             CALL W$WRITE( M$LO# );
             LO_BUF= ' ';
             CALL W$WRITE( M$LO# );
             LO_BUF= 'The first entry where the symbiont file';
             CALL W$WRITE( M$LO# );
             LO_BUF= ' ';
             CALL W$WRITE( M$LO# );
             LO_BUF= ' SIZE   THEN';
             CALL W$WRITE( M$LO# );
             LO_BUF= ' IS >  PRIO IS';
             CALL W$WRITE( M$LO# );
             LO_BUF= ' ----  -------';
             CALL W$WRITE( M$LO# );
             LO_BUF= ' ';
             DO J = 1 TO 14;
               CALL BINCHAR(INT5,SYMBINFO.GRANLOW#(J));
               IF SYMBINFO.GRANLOW#(J) > 0 THEN
                    CALL SEARCH(BEG,TABLEVAL,SKIP_ZEROS,INT5);
               ELSE BEG= LENGTHC('0000');
               CALL INSERT(LO_BUF,BEG,LENGTHC(INT5)-BEG,
                                  SUBSTR(INT5,BEG,LENGTHC(INT5)-BEG));
               CALL BINCHAR(INT5,J);
               IF J < 10 THEN
                    CALL INSERT(LO_BUF,10,1,SUBSTR(INT5,4,1));
               ELSE CALL INSERT(LO_BUF,9,2,SUBSTR(INT5,3,2));
               CALL W$WRITE( M$LO# );
               LO_BUF= ' ';
               END;                     /* end DO J = 1 TO 14                 */
             END;
      CASE( %GRANSCHED## );
  IF SYMBINFO.GRANSCHED# = 0 THEN
    LO_BUF = 'Output symbiont priorities assigned by submittal priorities' ;
  ELSE
        LO_BUF= 'Output symbiont files are assigned priorities by granule count';
      CASE( %HEADER## );
        CALL CONCAT( LO_BUF,'Heading=',HEADER.HEADER# );
      CASE( %HOLDEXPIRE## );
        CALL BINCHAR( INT5,SYMBINFO.HOLDEXPIRE# );
        IF SYMBINFO.HOLDEXPIRE# > 0 THEN
             CALL SEARCH( BEG,TABLEVAL,SKIP_ZEROS,INT5 );
        ELSE BEG= LENGTHC('0000');
        CALL CONCAT( LO_BUF,'The ''HOLD'' attribute for symbiont files will be honored for ',
                            SUBSTR(INT5,BEG),
                            ' hours' );
      CASE( %INIT_UTS## );
        IF MONINFO.INIT_UTS# = 0 THEN
             LO_BUF= 'NO recoveries or boots since this system was initially BOOTed';
        ELSE DO;
               UTS = MONINFO.INIT_UTS#;
               CALL M$TIME(CONV_UTS);
               LO_BUF= 'Last full recovery, disk or tape boot occurred';
               CALL INSERT(LO_BUF,46,27,TIME_DATE);
             END;
      CASE( %MINI_ID## );
        CALL CONCAT( LO_BUF,'MINI_ID=',
                            SITEINFO.MINI_ID# );
      CASE( %MON_UTS## );
        UTS = SITEINFO.MON_UTS#;
        CALL M$TIME(CONV_UTS);
        CALL CONCAT(LO_BUF,'M:MON created',
                           TIME_DATE);
      CASE( %MUAIS## );
        CALL BINCHAR(INT5,MONINFO.MUAIS# );
        IF MONINFO.MUAIS# > 0 THEN
             CALL SEARCH(BEG,TABLEVAL,SKIP_ZEROS,INT5);
        ELSE BEG= LENGTHC('0000');
        CALL CONCAT(LO_BUF,SUBSTR(INT5,BEG,LENGTHC(INT5)-BEG),
                           ' user slots (MUAIS)');
      CASE( %NODE## );
        CALL BINCHAR( INT5,MONINFO.NODE# );
        CALL SEARCH( BEG,TABLEVAL,SKIP_ZEROS,SUBSTR(INT5,0,4) );
        CALL CONCAT( LO_BUF,'Node number= ',SUBSTR(INT5,BEG) );
      CASE( %NODE_NAME## );
        CALL CONCAT( LO_BUF,'Node name=',MONINFO.NODE_NAME );
      CASE( %NUM_NODES## );
        CALL BINCHAR( INT5,MONINFO.NUM_NODES );
        CALL SEARCH( BEG,TABLEVAL,SKIP_ZEROS,SUBSTR(INT5,0,4) );
        CALL CONCAT( LO_BUF,'Number of nodes= ',SUBSTR(INT5,BEG) );
      CASE( %PATCHWEEK## );
        CALL CONCAT( LO_BUF,'Current patchweek=',SITEINFO.PATCHWEEK# );
      CASE( %PCORE## );
        CALL BINCHAR(INT5,MONINFO.PCORE#+1);
        CALL SEARCH(BEG,TABLEVAL,SKIP_ZEROS,INT5);
        LO_BUF= SUBSTR(INT5,BEG,LENGTHC(INT5)-BEG);
        CALL INSERT(LO_BUF,LENGTHC(INT5)-BEG,15,' Physical pages');
        IF MOD(MONINFO.PCORE#+1,1024) = 0 THEN DO;
             LO_INDX= LENGTHC(INT5) - BEG + LENGTHC(' Physical pages');
             CALL BINCHAR(INT5,(MONINFO.PCORE#+1)/1024);
             CALL SEARCH(BEG,TABLEVAL,SKIP_ZEROS,INT5);
             CALL INSERT(LO_BUF,LO_INDX,LENGTHC(INT5)-BEG+13,
                             ' (',
                             SUBSTR(INT5,BEG,LENGTHC(INT5)-BEG),
                             ' megawords)');
             END;
      CASE( %SALUTATION## );
        CALL CONCAT(LO_BUF, 'Salutation=',
                            SITEINFO.SALUTATION#.C);
      CASE( %SCOUNT## );
        IF MONINFO.SCOUNT# = 1 THEN
             LO_BUF= 'There has been 1 screech since the last tape boot';
        ELSE DO;
               LO_BUF= 'There have been ';
               CALL BINCHAR(INT5,MONINFO.SCOUNT#);
               IF MONINFO.SCOUNT# > 0 THEN
                    CALL SEARCH(BEG,TABLEVAL,SKIP_ZEROS,INT5);
               ELSE DO;
                      BEG= 3;
                      INT5= '   NO';
                    END;
               CALL CONCAT(LO_BUF,'There have been ',
                                  SUBSTR(INT5,BEG,LENGTHC(INT5)-BEG),
                                  ' screeches since last tape boot');
             END;
      CASE( %SITE_ID## );
        CALL CONCAT(LO_BUF, 'Site_ID=',
                            SITEINFO.SITE_ID#);
      CASE( %SITE_NAME## );
        IF BLK1$->OUT$BLK.NSUBLKS = 1 THEN DO;  /* No options? */
             CALL INDEX(BEG,'LADC',SITEINFO.SITE_NAME#.C)  ALTRET( NOT_LADC );
             CALL INDEX(BEG,'L66',SITEINFO.SITE_NAME#.C)  ALTRET( NOT_LADC );
             CALL CONCAT(LO_BUF,'You''re on the L66',
                                SUBSTR(SITEINFO.SITE_NAME#.C,BEG+3,1),
                                ', ',
                                SUBSTR(SITEINFO.VERSION#,0,LENGTHC('B02')),
                                ' (',
                                SITEINFO.MINI_ID#);
             CALL SEARCHR( LEN,TABLEVAL,SKIP_BLANKS,LO_BUF );
             SUBSTR(LO_BUF,LEN+1,1)= ')';
             DO WHILE( '0'B );
NOT_LADC:
               LO_BUF= SITEINFO.SITE_NAME#.C;
               END;
             END;
        ELSE CALL CONCAT(LO_BUF,'Site name=',
                                SITEINFO.SITE_NAME#.C);
      CASE( %STREAMFILEID## );
        CALL CONCAT(LO_BUF, 'Stream file ID=',
                            SYMBINFO.STREAMFILEID#);
      CASE( %SUA_UTS## );
        UTS= MONINFO.SUA_UTS#;
        IF UTS > 0 THEN DO;
             CALL M$TIME(CONV_UTS);
             CALL CONCAT(LO_BUF,'Last Single User Abort occurred',
                                TIME_DATE);
             END;
        ELSE LO_BUF= 'NO Single User Aborts since last BOOT or RECOVERY';
      CASE( %VERSION## );
        CALL INDEX1(BEG,SUBSTR(SITEINFO.VERSION#,3,1),BOOT_VER);
        CALL BINCHAR(INT5,BEG);
        IF BEG > 0 THEN
             CALL SEARCH(BEG,TABLEVAL,SKIP_ZEROS,INT5);
        ELSE DO;
               BEG= 3;
               INT5= '   NO';
             END;
        CALL CONCAT(LO_BUF, 'There''ve been ',
                            SUBSTR(INT5,BEG,LENGTHC(INT5)-BEG),
                            ' boots "under the files" since this ',
                            SUBSTR(SITEINFO.VERSION#,0,3),
                            ' CP-6 system was created');
      CASE( %WATCH## );
        IF SYMBINFO.WATCH# THEN
             LO_BUF= 'Consoles will print messages when output commences or ceases on output device(s)';
        ELSE LO_BUF= 'Consoles won''t print messages when output commences or ceases on output devices';
      END;
    CALL W$WRITE( M$LO# );
 
END DO_CMD;
%EJECT;
W$WRITE: PROC( DCB# );
DCL DCB#                     UBIN;
 
    CALL SEARCHR( LEN,TABLEVAL,SKIP_BLANKS,LO_BUF );
    IF LEN = LENGTHC(LO_BUF) THEN
         LEN= 0;
    FPT_WRITE.V.DCB#= DCB#;
    FPT_WRITE.BUF_.BOUND= LEN;
    CALL M$WRITE( FPT_WRITE );
    RETURN;
 
END W$WRITE;
 
END WHAT;
