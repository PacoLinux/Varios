/*M* SPYZ - special spy for the LADC external users */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/* SPY      SPY       SPY       SPY      SPY      SPY      SPY */
/*X* */
SPY:    PROC MAIN;
/**/
DCL B$JIT$ PTR SYMREF;
%INCLUDE B$JIT;
DCL M$LO DCB;
DCL M$DO DCB;
DCL M$X DCB;
DCL TEMP SBIN WORD;
DCL HDRFLG BIT(1) ALIGNED;
DCL JIT$ PTR;
DCL I UBIN WORD;
DCL J SBIN;
/**/
%INCLUDE B$USER;
%B$USERREFS;
/**/
DCL DAM$MAP ENTRY(5) ALTRET;
DCL DAM$INIT ENTRY ALTRET;
%INCLUDE XUF_ENTRY;
DCL SPYDOT ENTRY(2);
DCL XUR$GETCMD ENTRY(6) ALTRET;
DCL XUR$INIT ENTRY(3) ALTRET;
DCL XUR$ERRPTR ENTRY(2) ALTRET;
DCL XUR$ERRMSG ENTRY(7) ALTRET;
/**/
%INCLUDE XU_MACRO_C;
%INCLUDE DA_MAP_R;
DCL CMD$ PTR;
%PARSE$OUT (NAME=OUT,STCLASS="BASED(CMD$)");
%PARSE$SYM (NAME=SYM,STCLASS="BASED(CMD$)");
%P$PCB (NAME=P_PCB,STCLASS="STATIC SYMDEF");
%XUR_INIT (SYNTAX=NO,PCB=P_PCB,COMMANDS=NO);
DCL SPY_CMD SBIN SYMREF;
DCL PRMPT CHAR(0) CONSTANT INIT('$');
/**/
DCL HDRFMT CHAR(0) CONSTANT INIT(
' USR#   IDENTIFICATION       SYSID   LINE    CPU  CCBUF');
DCL SPYFMT(0:1) CHAR(0) CONSTANT INIT(
'%A%4O%E %>A,%>A%29-%6D %N(%2D-%4ZH%)%44-%3D:%2ZD %>A%>MA',
'%A%4O%E %>A,%>A%29-%6D %N(%2D*%4ZH%)%44-%3D:%2ZD %>A%>MA');
DCL FMTFLAG UBIN;
DCL MODEFLAGS(0:4) BIT(1) STATIC INIT('0'B*0);
DCL MODECHAR(0:4) CHAR(1) STATIC INIT(' ','B','G','O','T');
%INCLUDE CP_6;
%FPT_PRIV (PRIV=%PR_SPCLMM#,AUTH=YES);
DCL NOPRIV CHAR(0) CONSTANT INIT('You don''t have the proper equipment to be a SPY.');
DCL NONEFND CHAR(0) CONSTANT INIT('  No users found.');
%F$DCB;
%FPT_OPEN (DCB=M$LO,FUN=CREATE,EXIST=OLDFILE,CTG=YES);
%INCLUDE XU_FORMAT_C;
%F_FDS (NAME=FDS,DCB=M$LO,EDIT=SPYDOT);
DCL FMTBUF CHAR(140);
DCL LINEVEC BIT(72);
DCL 1 LINE ALIGNED,
      2 FLAG SBIN,
      2 FEP# SBIN,
      2 LINE# SBIN;
DCL 1 TIME ALIGNED,
      2 MIN SBIN,
      2 SEC SBIN;
DCL JSTEP CHAR(1);
DCL TEMP_CCBUF CHAR(256) STATIC;
DCL TEMP_ACCT CHAR(8) STATIC INIT('USERNNN ');
DCL TEMP_UNAME CHAR(12) STATIC;
DCL TEMP_CTR SBIN STATIC INIT(1);
DCL KOUNT1_ SBIN;
DCL KOUNT2_ SBIN;
DCL NUMBERS_ CHAR(10) CONSTANT INIT('0123456789');
%EJECT;
        CALL M$OPEN(FPT_OPEN);
        FDS.BUF_=VECTOR(FMTBUF);
        IF DCBADDR(DCBNUM(M$LO))->F$DCB.WIDTH#>0 AND
          DCBADDR(DCBNUM(M$LO))->F$DCB.WIDTH#<139 THEN
           FDS.BUF_.BOUND=DCBADDR(DCBNUM(M$LO))->F$DCB.WIDTH#;
        CALL M$SPRIV(FPT_PRIV);
        IF NOT (B$JIT.PRIV.ACTIVE&(%PR_SPCLMM#|%PR_EXMM#)) THEN DO;
           CALL X$WRITE(FDS,VECTOR(NOPRIV));
           RETURN;
           END;
        CALL DAM$INIT;
        CALL XUR$INIT(XUR_INIT);
        HDRFLG='1'B;
        TEMP=B$JIT.CCARS;
        CALL XUR$GETCMD(SPY_CMD,CMD$,VECTOR(PRMPT),B$JIT.CCBUF,TEMP) ALTRET(CMD_ERR);
        IF OUT.NSUBLKS<2 THEN DO;
           MODEFLAGS(%M_INT#)='1'B;
           MODEFLAGS(%M_BATCH#)='1'B;
           GOTO DEFAULT_SPY;
           END;
        ELSE DO;
           CMD$=OUT.SUBLK$(1);
           DO CASE(OUT.CODE);
            CASE(1);                    /* MODES                              */
              DO I=0 TO OUT.NSUBLKS-1;
                 MODEFLAGS(OUT.SUBLK$(I)->OUT.CODE)='1'B;
                 END;
DEFAULT_SPY:  ;
              DO I=1 TO DA_MUAIS;
                 CALL DAM$MAP(B$JIT$,JIT$,-I,0) ALTRET(NXT1);
                 IF MODEFLAGS(JIT$->B$JIT.MODE) THEN CALL DISPLAY;
NXT1:            END;
            CASE(2);                    /* USER#                              */
              DO I=0 TO OUT.NSUBLKS-1;
                 CALL CVTOCT(TEMP,OUT.SUBLK$(I)->OUT);
                 CALL DAM$MAP(B$JIT$,JIT$,-TEMP,0) ALTRET(NXT2);
                 CALL DISPLAY;
NXT2:            END;
            CASE(3);                    /* SYSID                              */
              DO I=0 TO OUT.NSUBLKS-1;
                 CALL CHARBIN(TEMP,OUT.SUBLK$(I)->SYM.TEXT);
                 CALL DAM$MAP(B$JIT$,JIT$,TEMP,0) ALTRET(NXT3);;
                 CALL DISPLAY;
NXT3:            END;
            CASE(4);                    /* ACCOUNT                            */
              DO I=1 TO DA_MUAIS;
                 CALL DAM$MAP(B$JIT$,JIT$,-I,0) ALTRET(NXT4);
                 DO J=0 TO OUT.NSUBLKS-1;
                    CALL WILDCOMP(OUT.SUBLK$(J)->SYM.COUNT,JIT$->B$JIT.ACCN,8) ALTRET(NXTACCN);
                    CALL DISPLAY;
                    GOTO NXT4;
NXTACCN:            END;
NXT4:            END;
            CASE(5);                    /* NAME                               */
              DO I=1 TO DA_MUAIS;
                 CALL DAM$MAP(B$JIT$,JIT$,-I,0) ALTRET(NXT5);
                 DO J=0 TO OUT.NSUBLKS-1;
                    CALL WILDCOMP(OUT.SUBLK$(J)->SYM.COUNT,JIT$->B$JIT.UNAME,12) ALTRET(NXTNAME);
                    CALL DISPLAY;
                    GOTO NXT5;
NXTNAME:            END;
NXT5:            END;
            CASE(6);                    /* CCBUF                              */
              DO I=1 TO DA_MUAIS;
                 CALL DAM$MAP(B$JIT$,JIT$,-I,0) ALTRET(NXT6);
                 DO J=0 TO OUT.NSUBLKS-1;
                    CALL WILDCOMP(OUT.SUBLK$(J)->SYM.COUNT,JIT$->B$JIT.CCBUF,BINBIT(JIT$->B$JIT.CCARS,36)) ALTRET(NXTCCBUF);
                    CALL DISPLAY;
                    GOTO NXT6;
NXTCCBUF:           END;
NXT6:            END;
            CASE(7);                    /* FEP                                */
              DO J=0 TO OUT.NSUBLKS-1;
                 CALL CHARBIN(TEMP,OUT.SUBLK$(J)->SYM.TEXT);
                 OUT.SUBLK$(J)->SYM.SCRITCH=TEMP;
                 END;
              DO I=1 TO DA_MUAIS;
                 CALL DAM$MAP(B$JIT$,JIT$,-I,0) ALTRET(NXT7);
                 DO J=0 TO OUT.NSUBLKS-1;
                    IF JIT$->B$JIT.TSLINE.FEX=OUT.SUBLK$(J)->SYM.SCRITCH THEN DO;
                       CALL DISPLAY;
                       GOTO NXT7;
                       END;
                    END;
NXT7:            END;
            CASE(8);                    /* LINE                               */
              DO J=0 TO OUT.NSUBLKS-1;
                 CALL CHARBIN(TEMP,OUT.SUBLK$(J)->OUT.SUBLK$(0)->SYM.TEXT);
                 OUT.SUBLK$(J)->OUT.SUBLK$(0)->SYM.SCRITCH=TEMP;
                 CALL CVTHEX(TEMP,OUT.SUBLK$(J)->OUT.SUBLK$(1)->SYM);
                 OUT.SUBLK$(J)->OUT.SUBLK$(1)->SYM.SCRITCH=TEMP;
                 END;
              DO I=1 TO DA_MUAIS;
                 CALL DAM$MAP(B$JIT$,JIT$,-I,0) ALTRET(NXT8);
                 DO J=0 TO OUT.NSUBLKS-1;
                    IF JIT$->B$JIT.TSLINE.FEX=OUT.SUBLK$(J)->OUT.SUBLK$(0)->SYM.SCRITCH AND
                      JIT$->B$JIT.TSLINE.PORT=OUT.SUBLK$(J)->OUT.SUBLK$(1)->SYM.SCRITCH THEN DO;
                       CALL DISPLAY;
                       GOTO NXT8;
                       END;
                    END;
NXT8:            END;
            CASE(9);                    /* JOBNAME                            */
              DO I=1 TO DA_MUAIS;
                 CALL DAM$MAP(B$JIT$,JIT$,-I,0) ALTRET(NXT9);
                 DO J=0 TO OUT.NSUBLKS-1;
                    CALL WILDCOMP(OUT.SUBLK$(J)->SYM.COUNT,JIT$->B$JIT.JOBNAME,31) ALTRET(NXTJOB);
                    CALL DISPLAY;
                    GOTO NXT9;
NXTJOB:             END;
NXT9:            END;
            CASE(10);
              DO I=1 TO DA_MUAIS;
                 CALL DAM$MAP(B$JIT$,JIT$,-I,0) ALTRET(NXT10);
                 IF (B$USRT$->B$USER.FLG(I) & %U_SUSP) THEN
                    CALL DISPLAY;
NXT10:           END;
            CASE(11);
              DO I=0 TO 4;
                 MODEFLAGS(I)='1'B;
                 END;
              GOTO DEFAULT_SPY;
            END;
           END;
        IF HDRFLG THEN
           CALL X$WRITE(FDS,VECTOR(NONEFND));
        RETURN;
CMD_ERR:
        I=P_PCB.HI_CHAR;
        IF I>0 THEN CALL XUR$ERRPTR(I,DCBNUM(M$DO));
        CALL XUR$ERRMSG(CMD$,,DCBNUM(M$DO));
        RETURN;
%EJECT;
DISPLAY: PROC;
        IF JIT$->B$JIT.TSLINE.FEX~=0 AND
          (JIT$->B$JIT.MODE = %M_INT# OR
          JIT$->B$JIT.ORIGINATOR_MODE = %M_INT#) THEN DO;
           LINE.FLAG=1;
           LINE.FEP#=JIT$->B$JIT.TSLINE.FEX;
           LINE.LINE#=JIT$->B$JIT.TSLINE.PORT;
           LINEVEC=VECTOR(LINE);
           END;
        ELSE DO;
           LINE.FLAG=0;
           LINEVEC=VECTOR(LINE.FLAG);
           END;
        TEMP=JIT$->B$JIT.TPEXT+
          JIT$->B$JIT.TPSVT+
          JIT$->B$JIT.TUEXT+
          JIT$->B$JIT.TUSVT;
        TIME.MIN=TEMP/6000;
        TIME.SEC=MOD(TEMP,6000)/100;
        IF JIT$->B$JIT.CPFLAGS1 & %CP_JSTEP# THEN
           JSTEP='!';
        ELSE
           JSTEP=' ';
        IF HDRFLG THEN DO;
           CALL X$WRITE(FDS,VECTOR(HDRFMT));
           HDRFLG='0'B;
           END;
        CALL BINCHAR (SUBSTR(TEMP_ACCT,4,3),TEMP_CTR);
        TEMP_CTR = TEMP_CTR + 1;
        DO KOUNT1_ = 0 TO 2;
           DO KOUNT2_ = 0 TO 9;
              IF SUBSTR(JIT$->B$JIT.UNAME,KOUNT1_,1)  =
                SUBSTR(NUMBERS_,KOUNT2_,1)
              THEN
                 GOTO HMMM_;
              END;                      /* DO KOUNT2_                         */
           GOTO GOTCHA_;
HMMM_:     ;
           END;                         /* DO KOUNT1_                         */
GOTCHA_: ;
        TEMP_UNAME = SUBSTR(JIT$->B$JIT.UNAME,KOUNT1_,12-KOUNT1_);
 
        CALL INDEX (KOUNT1_,'.',JIT$->B$JIT.CCBUF)
        WHENALTRETURN
        DO;
           END;
        CALL INDEX (KOUNT2_,' ',JIT$->B$JIT.CCBUF)
        WHENALTRETURN
        DO;
           END;
        IF KOUNT2_ < KOUNT1_
        THEN
           KOUNT1_ = KOUNT2_;
        TEMP_CCBUF = SUBSTR(JIT$->B$JIT.CCBUF,0,KOUNT1_);
        IF (B$USRT$->B$USER.FLG(JIT$->B$JIT.USER) & %U_SUSP) THEN
           FMTFLAG=1;
        ELSE
           FMTFLAG=0;
        CALL X$WRITE(FDS,VECTOR(SPYFMT(FMTFLAG)),
          VECTOR(MODECHAR(JIT$->B$JIT.MODE)),
          VECTOR(JIT$->B$JIT.USER),
          VECTOR(TEMP_ACCT),
          VECTOR(TEMP_UNAME),
          VECTOR(JIT$->B$JIT.SYSID),
          LINEVEC,
          VECTOR(TIME),
          VECTOR(JSTEP),
          VECTOR(TEMP_CCBUF));
        RETURN;
END DISPLAY;
%EJECT;
CVTOCT: PROC(NUM,T);
DCL NUM SBIN;
%PARSE$SYM (NAME=T,STCLASS="");
DCL I SBIN;
        NUM=0;
        DO I=0 TO T.COUNT-1;
           NUM=NUM*8+ASCBIN(SUBSTR(T.TEXT,I,1))-48;
           END;
        RETURN;
END CVTOCT;
%EJECT;
CVTHEX: PROC(NUM,T);
DCL NUM SBIN;
%PARSE$SYM (NAME=T,STCLASS="");
DCL X SBIN;
DCL I SBIN;
DCL HEX CHAR(16) CONSTANT INIT('0123456789ABCDEF');
/**/
        NUM=0;
        DO I=0 TO T.COUNT-1;
           CALL INDEX1(X,SUBSTR(T.TEXT,I,1),HEX);
           NUM=NUM*16+X;
           END;
        RETURN;
END CVTHEX;
%EJECT;
WILDCOMP: PROC(WILDSTR,STR,STRSIZ) ALTRET;
DCL 1 WILDSTR,
      2 L UBIN BYTE UNAL,
      2 C CHAR(WILDSTR.L);
DCL STR CHAR(STRSIZ);
DCL STRSIZ UBIN;
DCL WX UBIN;
DCL WXP UBIN;
DCL CX UBIN;
DCL CXP UBIN;
/**/
/**/
/**/
        WX=0;
        WXP=WILDSTR.L;
        CX=0;
        CXP=0;
        DO WHILE(WX<WILDSTR.L AND SUBSTR(WILDSTR.C,WX)~=' '
          OR CX<STRSIZ AND SUBSTR(STR,CX)~=' ');
           IF WX<WILDSTR.L AND SUBSTR(WILDSTR.C,WX,1)='?' THEN DO;
              WXP=WX;
              END;
           ELSE DO;
              IF WX=WXP+1 THEN CXP=CX;
              IF WX>=WILDSTR.L OR CX>=STRSIZ
                OR SUBSTR(WILDSTR.C,WX,1) ~= SUBSTR(STR,CX,1) THEN DO;
                 IF WXP=WILDSTR.L OR CXP=STRSIZ THEN ALTRETURN;
                 WX=WXP;
                 CX=CXP;
                 END;
              CX=CX+1;
              END;
           IF WX<WILDSTR.L THEN WX=WX+1;
           END;
        RETURN;
END WILDCOMP;
END SPY;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
SPYDOT: PROC(FDS,CNT);
%INCLUDE XU_FORMAT_C;
%F_FDS (NAME=FDS,STCLASS="");
DCL CNT(0:3) SBIN;
DCL BUFFER CHAR(FDS.BUFSIZE) BASED(FDS.BUF_.BUF$);
DCL I SBIN;
/**/
        CALL INDEX1R(I,' ',SUBSTR(BUFFER,FDS.FIELDX,FDS.FWID)) ALTRET(NODOT);
        CALL INSERT(BUFFER,I+FDS.FIELDX,1,'.');
NODOT:  RETURN;
END SPYDOT;
