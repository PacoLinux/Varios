/*M*   DRAW FROM SOURCE*/
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
DRAWS:  PROC ALTRET;
%INCLUDE CP_6;
%F$DCB;
%INCLUDE CP_6_SUBS;
%INCLUDE B_MICROPS_C;
%INCLUDE XU_MACRO_C;
%XUU$ENTRY;
%INCLUDE B_ERRORS_C;
%INCLUDE B$JIT_C;
%B$JIT0;
%U$JIT1;
%A$JIT6X;
DCL B$JIT$ PTR SYMREF;
DCL DRAWSOU ENTRY(4) ALTRET;
DCL KWD(0:39) CHAR(8) CONSTANT INIT
('DALIGNED','ALIGNED','HALIGNED','CALIGNED'
,'UNAL','WALIGNED','UNAL','UNAL'
,'SBIN','UBIN','CHAR','BIT'
,'PTR','EPTR','PTR','PTR'
,'WORD','HALF','BYTE','BYTE'
,'STATIC','AUTO','CONSTANT','SYMDEF'
,'SYMREF','EXT','EXTROOT','STCLASS'
,'BASED','DCB','PFMT','LAST'
,'REDEF','INIT','%INIT','%CHARTEX'
,' ','%MEND','REMEMBER','VECTOR');
DCL KWDC REDEF KWD CHAR(320);
DCL LENGS(0:31) UBIN SYMREF;
/*
*/
DCL TOKENSIZ UBIN STATIC;
DCL TOKEN CHAR(30) STATIC;
DCL 1 TOKENR REDEF TOKEN,
      2 S CHAR(6),
      2 SS REDEF S,
        3 S CHAR(4),
        3 * CHAR(2),
      2 * CHAR(24);
DCL DEL# UBIN STATIC;
DCL CPOS UBIN STATIC;
DCL OLDPOS UBIN;
DCL NUMB UBIN STATIC;
DCL PRNTON BIT(1) STATIC SYMDEF INIT('0'B);
DCL PRNTOP BIT(1) STATIC SYMDEF INIT('1'B);
DCL SELOUOPT UBIN STATIC SYMDEF INIT(0);
DCL SELOUNAM CHAR(32) STATIC SYMDEF;
DCL SELNMOPT UBIN STATIC SYMDEF INIT(0);
DCL SELNMNAM CHAR(128) STATIC SYMDEF;
DCL LBLOPT BIT(1) SYMREF;
DCL NARROWOPT BIT(1) SYMREF;
DCL PL6OPT BIT(1) SYMREF;
DCL EQUOPT UBIN SYMREF;
DCL BITOPT UBIN SYMREF;
DCL MASKOPT UBIN SYMREF;
DCL LINECNT SBIN SYMREF;
DCL MACON BIT(1) STATIC INIT('0'B);
DCL RCDIN BIT(1) STATIC INIT('0'B);
DCL CMTON BIT(1) STATIC INIT('0'B);
DCL QUOTON BIT(1) STATIC INIT('0'B);
DCL NOTOKEN BIT(1) STATIC INIT('0'B);
/*
*/
DCL ALIGN UBIN;
DCL TYPE UBIN;
DCL OLDTYPE UBIN;
DCL DIM UBIN;
DCL LSIZE UBIN;
DCL LVL UBIN;
DCL ATYPE UBIN;
DCL OLDLVL UBIN;
DCL BITNO SBIN;
DCL REDEFO UBIN;
DCL P$ PTR;
DCL Q$ PTR;
/*
*/
DCL LVLP(0:9) PTR;
DCL LVLA(0:9) UBIN;
DCL LVLB(0:9) UBIN;
/*
*/
DCL 1 INAME STATIC,
      2 CT UBIN ,
      2 TX CHAR(30);
DCL 1 MNAME STATIC,
      2 CT UBIN,
      2 TX CHAR(30);
DCL NAME$ PTR CONSTANT INIT(ADDR(INAME));
DCL 1 INAMEB BASED(NAME$),
      2 CT UBIN HALF UNAL,
      2 TX CHAR(INAMEB.CT);
/*
*/
%FPT_GDS (FPTN=GDSV,RESULTS=VARV,STCLASS=CONSTANT,SEGSIZE=1024);
%FPT_GDS (FPTN=GDSN,RESULTS=NAMV,STCLASS=CONSTANT,SEGSIZE=1024);
DCL 1 VARV STATIC DALIGNED,
      2 BD UBIN HALF INIT(0),
      2 P$ PTR;
DCL 1 NAMV STATIC DALIGNED,
      2 BD UBIN HALF INIT(0),
      2 P$ PTR;
DCL VAR$ PTR;
DCL NAM$ PTR;
DCL B$DS4$ PTR SYMREF;
DCL B$DS5$ PTR SYMREF;
/*
*/
%INCLUDE B$OBJECT_C;
%B$DNAME (STCLASS="BASED(NAM$)");
%B$VREBL (STCLASS="BASED(VAR$)");
%SUB DEL_SPACE=0/*SPACE*/;
%SUB DEL_QUOTE=1/*QUOTE*/;
%SUB DEL_LPAREN=2/*LPAREN*/;
%SUB DEL_RPAREN=3/*RPAREN*/;
%SUB DEL_COMMA=4/*COMMA*/;
%SUB DEL_COLON=5/*COLON*/;
%SUB DEL_SEMI=6/*SEMI*/;
%SUB DEL_AST=7/*AST*/;
%SUB DEL_SLASH=8/*SLASH*/;
DCL DELIMS CHAR(0) CONSTANT INIT(' ''(),:;*/');
/*
*/
DCL BFR STATIC SYMDEF CHAR(256);
DCL XBFR STATIC CHAR(256);
%FPT_CLOSE (FPTN = CLSI,
      DCB = M$SI,
      STCLASS = CONSTANT);
%XUU_PARAM (
      BASE = YES);
%FPT_ERRMSG (
      BUF = BFR,
      CODE = ERRCODE,
      DCB = M$SI,
      FLAGLEV = 4,
      OUTDCB1 = M$DO);
%FPT_OPEN (FPTN = SETUI,
      DCB = M$UI,
      SETDCB = YES);
%FPT_WRITE(FPTN=TOF,STCLASS=SYMREF);
%FPT_WRITE (FPTN=WRLN,DCB=M$LO,BUF=PRTLINE.BFR);
DCL M$SI DCB;
DCL M$LO DCB;
DCL M$SI$ PTR STATIC SYMDEF;
DCL M$LO$ PTR;
DCL M$DO DCB;
/**/
DCL M$UI DCB;
DCL M$UI$ PTR STATIC;
DCL PRNTALL BIT(1) STATIC INIT('0'B);
DCL PRNTKEY BIT(1) STATIC INIT('0'B);
DCL UIOPT BIT(1) STATIC INIT('0'B);
DCL ARS# UBIN STATIC;
DCL ERRCODE BIT(36) STATIC;
DCL FIRSTFLAG BIT(1) SYMREF;
DCL 1 PRTLINE STATIC,
      2 ASCII_KEY CHAR(10),
      2 * CHAR(0) INIT(' - '),
      2 BFR CHAR(140);
%EJECT;
        CALL M$CLOSE(CLSI);
        IF UIOPT
        THEN DO;
           XUU_PARAM.FLAGS.UP_DATE#='1'B;
           M$UI$=DCBADDR(DCBNUM(M$UI));
           IF SUBSTR(M$UI$->F$DCB.NAME#.C,0,M$UI$->F$DCB.NAME#.L)=':'
           THEN DO;
              SETUI.NAME_=VECTOR(M$SI$->F$DCB.NAME#);
              CALL M$OPEN(SETUI);
              END;
           END;
        CALL XUU$OPEN(XUU_PARAM) ALTRET(OPNERR);
        FIRSTFLAG='1'B;
        DO WHILE ('1'B);
           CALL GTOKEN ALTRET(RDERR);
           IF TOKENR.S='DCL'
           THEN DO;
              CALL PRNTSET;
              CALL PROCDCL;
              END;
           ELSE IF TOKENR.SS.S='%MAC'
              THEN DO;
                 CALL PRNTSET;
                 MACON='1'B;
                 CALL GTOKEN ALTRET(RDERR);
                 MNAME.CT=TOKENSIZ;
                 MNAME.TX=TOKEN;
                 END;
              ELSE IF TOKENR.S='%MEND'
                 THEN MACON='0'B;
           DO WHILE (DEL#~=DEL_SEMI);
              CALL GTOKEN ALTRET(RDERR);
              END;
           END;
OPNERR: IF XUU_PARAM.FLAGS.BASE#
        THEN DO;
           ERRCODE=XUU_PARAM.SI_ERRCODE;
           CALL M$ERRMSG(FPT_ERRMSG);
           END;
        IF XUU_PARAM.FLAGS.UP_DATE# OR XUU_PARAM.FLAGS.XUU_ERR#
        THEN DO;
           ERRCODE=XUU_PARAM.UI_ERRCODE;
UIERR:     FPT_ERRMSG.V.DCB#=DCBNUM(M$UI);
SIERR:     CALL M$ERRMSG(FPT_ERRMSG);
           END;
        ALTRETURN;
RDERR:  ERRCODE=XUU_PARAM.ERRCODE;
        FPT_ERRMSG.V.FLAGLEV#=3;
        IF XUU_PARAM.ERRCODE.ERR#=%E$EOF /* EOF                               */
        THEN RETURN;
        IF XUU_PARAM.FLAGS.BASE# OR XUU_PARAM.FLAGS.XUU_ERR#
        THEN GOTO SIERR;
        IF XUU_PARAM.FLAGS.UP_DATE#
        THEN GOTO UIERR;
        RETURN;                         /* NORMAL EOF                         */
%EJECT;
PROCDCL: PROC;
/*SET UP INITIAL VALUES AND DEFAULTS*/
        VAR$=B$DS4$;
        VARV.P$=VAR$;
        NAM$=B$DS5$;
        NAMV.P$=NAM$;
        LVL=0;                          /*FOR ORIG LEVEL TEST*/
        OLDLVL=0;
        TYPE=17;
/*
*/
        DO WHILE ('1'B);
/*             PROCESS ALL INDIVIDUAL ITEMS
*/
           ATYPE=2;                     /*AUTO*/
           OLDTYPE=TYPE;
           TYPE=17;                     /*STRUCTURE*/
           ALIGN=7;                     /*DEFAULT*/
           DIM=1;
           LSIZE=1;
           CALL GNUMB ALTRET(NOTLEVEL);
           IF NUMB=0
           THEN GOTO NOTLEVEL;
           LVL=LVL+1;
           IF NUMB>LVL
           THEN CALL SYNERR(0);
/*             BAD LEVEL NUMBER*/
           ELSE LVL=NUMB;
           CALL GTOKEN ALTRET(WRAPUP);
/*             ITEM NAME*/
           IF LVL=1
             AND (TOKENR.S='FPTN' OR TOKENR.S='NAME')
             AND MACON
           THEN DO;
              INAME.CT=MNAME.CT;
              INAME.TX=MNAME.TX;
              END;
           ELSE DO;
              INAME.CT=TOKENSIZ;
              INAME.TX=TOKEN;
              END;
           IF DEL#=DEL_LPAREN
           THEN DO;
/*             GET DIMENSIONS*/
              CALL GNUMB ALTRET(BADDIM);
              IF (NUMB=0) AND (DEL#=DEL_COLON)
              THEN DO;
                 CALL GNUMB ALTRET(SYMDIM);
                 DIM=NUMB+1;
SYMDIM:          IF DEL#~=DEL_RPAREN
                 THEN CALL SYNERR(1);
/*             BAD DIM FORMAT*/
                 END;
              ELSE
BADDIM:          CALL SYNERR(1);
              END;
%EJECT;
           DO WHILE ((DEL#~=DEL_COMMA) AND (DEL#~=DEL_SEMI));
/*
               NOW PROCESS VARIOUS KEYWORDS
*/
              CALL GTOKEN ALTRET(WRAPUP);
              CALL INDEX(NUMB,SUBSTR(TOKEN,0,8),KWDC) ALTRET(NOTKWD);
              NUMB=NUMB/8;
              DO WHILE ('0'B);
NOTKWD:          IF TOKENSIZ>4
                   AND SUBSTR(TOKEN,TOKENSIZ-4,4)='INIT'
                 THEN NUMB=36/*NULL*/;
                 END;
              DO CASE(NUMB);
               CASE(0,1,2,3,4);
/*             ALIGNMENT*/
                 IF (TYPE=21/*CHAR*/) AND (NUMB=4)
                 THEN ALIGN=3;
                 ELSE ALIGN=NUMB;
               CASE(5);
                 ALIGN=1;
               CASE(8,9);
/*             SBIN,UBIN*/
                 IF ALIGN=7
                 THEN ALIGN=1/*ALIGNED*/;
                 TYPE=1;
                 IF DEL#=DEL_LPAREN
                 THEN DO;
                    CALL GNUMB ALTRET(BADSIZ);
                    IF (DEL#=DEL_RPAREN) AND (NUMB<37)
                    THEN LSIZE=NUMB;
                    ELSE DO;
BADSIZ:                LSIZE=36;
                       CALL SYNERR(2);
/*             BAD SIZE*/
                       END;
                    END;
                 ELSE LSIZE=36;
               CASE(10);
/*             CHAR*/
                 IF ALIGN>3
                 THEN ALIGN=3;
                 TYPE=21;
                 IF DEL#=DEL_LPAREN
                 THEN DO;
                    CALL GNUMB ALTRET(ACHAR);
                    IF DEL#=DEL_RPAREN
                    THEN LSIZE=NUMB;
                    ELSE GOTO BADSIZ;
                    END;
ACHAR:           ;
               CASE(11);
/*             BIT*/
                 IF ALIGN=7
                 THEN ALIGN=4;
                 TYPE=19;
                 IF DEL#=DEL_LPAREN
                 THEN DO;
                    CALL GNUMB ALTRET(ABIT);
                    IF (DEL#=DEL_RPAREN) AND (NUMB<73)
                    THEN LSIZE=NUMB;
                    ELSE GOTO BADSIZ;
                    END;
ABIT:            ;
               CASE(12,13);
/*             PTR,EPTR*/
                 IF ALIGN=7
                 THEN ALIGN=1;
                 TYPE=13;
               CASE(16);
/*             WORD*/
                 NUMB=36;
WHB:             IF TYPE=1
                 THEN LSIZE=NUMB;
                 ELSE CALL SYNERR(3);
/*             WHB ONLY ON S/UBIN*/
               CASE(17);
/*             HALF*/
                 NUMB=18;
                 GOTO WHB;
               CASE(18);
/*             BYTE*/
                 NUMB=9;
                 GOTO WHB;
               CASE(20,21,22,23,24,25,26,27,28,29);
/*             STORAGE CLASS*/
                 IF DEL#=DEL_LPAREN
                 THEN DO;
                    CALL GTOKEN;
                    IF DEL#~=DEL_RPAREN
                    THEN CALL SYNERR(4);
/*             BAD IMP PTR*/
                    END;
                 IF LVL>1
                 THEN CALL SYNERR(5);
/*             STCLASS ONLY ON LEVEL 1*/
               CASE(30);
/*             PFMT*/
                 ALIGN=0;
                 TYPE=19;
                 LSIZE=72;
               CASE(32);
/*             REDEF*/
                 CALL GTOKEN;
                 ATYPE=7;
/*             SIGNAL OF REDEF*/
                 P$=VAR$;
                 DO WHILE (P$>VARV.P$);
                    P$=PINCRW(P$,-SIZEW(B$VREBL));
                    IF TOKEN=PINCRW(NAMV.P$,P$->B$VREBL.NPOINTER)->B$DNAME.TEXT
                    THEN GOTO SETREDEF;
                    END;
SETREDEF:        REDEFO=POFFW(P$,VARV.P$);
                 IF P$->B$VREBL.LEVEL~=LVL
                 THEN CALL SYNERR(10);
/*             REDEF MISMATCH*/
               CASE(33,34,35);
/*             INIT*/
PROCINIT:        IF TYPE=17
                 THEN CALL SYNERR(8);
/*             CANT INIT STRUCTURE*/
                 IF DEL#=DEL_LPAREN
                 THEN CALL DRAWINIT ALTRET(BADINIT);
                 ELSE
BADINIT:            CALL SYNERR(6);
/*             UNBALANCED PARENS ON INIT*/
               CASE(31,36);
/*             LAST OR NULL TOKEN*/
               CASE(37);
/*       NO COMMA OR SEMI, TIE IT OFF*/
                 MACON='0'B;
               CASE(38,39);
                 IF ALIGN=7
                 THEN ALIGN=0;
                 TYPE=48;
               CASE(ELSE);
                 CALL SYNERR(7);
/*             UNRECOGNIZED KEYWORD*/
               END;
              END;
%EJECT;
/*             ITEM FINISHED, PACKAGE UP*/
           IF POFFW(VAR$,VARV.P$)+SIZEW(B$VREBL)>VARV.BD
           THEN CALL M$GDS(GDSV);
           IF POFFW(NAM$,NAMV.P$)+7>NAMV.BD
           THEN CALL M$GDS(GDSN);
           B$VREBL='0'B;
           B$VREBL.NPOINTER=POFFW(NAM$,NAMV.P$);
           B$VREBL.ADDRTYP=ATYPE;
           B$VREBL.DATATYP=TYPE;
           B$VREBL.LOGSIZ=LSIZE;
           B$VREBL.LEVEL=LVL;
           B$VREBL.ADR.W=REDEFO;
           IF ALIGN>4
           THEN ALIGN=4;
           B$VREBL.ALIGNTYP=ALIGN;
           IF DIM>1
           THEN B$VREBL.ARRAYTYP=1;
           B$VREBL.DIMS=DIM;
           B$DNAME.COUNT=INAME.CT;
           B$DNAME.TEXT=INAME.TX;
           IF (LVL<=OLDLVL) OR (OLDTYPE=17)
           THEN DO;
              CALL FIXLVLA;
              IF TYPE=17
              THEN DO;
                 LVLA(LVL)=ALIGN;
                 LVLP(LVL)=VAR$;
                 END;
              ELSE IF LVL=1
                 THEN GOTO EXITDCL;
              IF ALIGN<LVLA(LVL-1)
              THEN LVLA(LVL-1)=ALIGN;
              VAR$=PINCRW(VAR$,SIZEW(B$VREBL));
              NAM$=PINCRW(NAM$,(INAME.CT+5)/4);
              END;
           ELSE CALL SYNERR(9);
/*             IMPROPER STRUCTURING*/
%EJECT;
           IF DEL#=DEL_SEMI
           THEN DO;
WRAPUP:       LVL=1;
              CALL FIXLVLA;
              P$=VARV.P$;
              LVL=1;
              BITNO=0;
              DO WHILE (P$<VAR$);
                 OLDLVL=LVL;
                 LVL=P$->B$VREBL.LEVEL;
                 CALL FIXLVLS;
                 IF P$->B$VREBL.ADDRTYP=7
                 THEN DO;
                    Q$=PINCRW(VARV.P$,P$->B$VREBL.ADR.W);
                    BITNO=Q$->B$VREBL.ADR.W*36+Q$->B$VREBL.ADR.C*9+Q$->B$VREBL.ADR.B;
                    END;
                 ALIGN=P$->B$VREBL.ALIGNTYP;
                 CALL ALIGNP;
                 NUMB=BITNO/9;
                 P$->B$VREBL.ADR.B=MOD(BITNO,9);
                 P$->B$VREBL.ADR.C=MOD(NUMB,4);
                 P$->B$VREBL.ADR.W=NUMB/4;
                 TYPE=P$->B$VREBL.DATATYP;
                 IF TYPE=17
                 THEN DO;
                    LVLB(LVL)=BITNO;
                    LVLA(LVL)=ALIGN;
                    LVLP(LVL)=P$;
                    END;
                 ELSE DO;
                    NUMB=BITNO;
                    BITNO=BITNO+P$->B$VREBL.LOGSIZ*LENGS(TYPE);
                    CALL ALIGNP;
                    BITNO=NUMB+(BITNO-NUMB)*P$->B$VREBL.DIMS;
                    P$->B$VREBL.ELMNTSIZ=BITNO-NUMB;
                    END;
                 P$=PINCRW(P$,SIZEW(B$VREBL));
                 END;
              LVL=1;
              CALL FIXLVLS;
              DO WHILE (MACON);
                 CALL GTOKEN ALTRET(GODRAW);
                 IF TOKENR.S='%MEND'
                 THEN MACON='0'B;
                 IF TOKENR.S='DCL'
                 THEN DO;
                    CPOS=OLDPOS;
                    DEL#=DEL_SEMI;
                    MACON='0'B;
                    END;
                 END;
GODRAW:       CALL DRAWSOU(VARV.P$->B$VREBL,POFFW(VAR$,VARV.P$)
                ,NAMV.P$->B$DNAME,POFFW(NAM$,NAMV.P$));
              IF PRNTON OR PRNTALL
              THEN DO;
                 CALL M$WRITE(TOF);
                 END;
EXITDCL:      PRNTON='0'B;
              RETURN;
              END;
%EJECT;
           DO WHILE ('0'B);
NOTLEVEL:     IF LVL=0
              THEN RETURN;
              IF SUBSTR(TOKEN,0,1)='%'
              THEN DO WHILE (DEL#~=DEL_SEMI);
                 CALL GTOKEN ALTRET(WRAPUP);
                 END;
              ELSE CALL SYNERR(0);
              IF NOTOKEN THEN GOTO WRAPUP;
              END;
           END;
END PROCDCL;
%EJECT;
PRNTSET: PROC;
        IF PRNTON OR PRNTALL THEN RETURN;
        PRNTON=PRNTOP;
PRNTIT: ENTRY;
        IF PRNTON OR PRNTALL
        THEN DO;
           PRTLINE.BFR=SUBSTR(BFR,0,ARS#);
           PRTLINE.ASCII_KEY=XUU_PARAM.ASCII_KEY;
           CALL M$WRITE(WRLN);
           END;
END PRNTSET;
%EJECT;
DRAWINIT: ENTRY ALTRET;
        DO WHILE (DEL#~=DEL_RPAREN);
           CALL GTOKEN ALTRET(UNBAL);
           IF DEL#=DEL_LPAREN
           THEN CALL DRAWINIT ALTRET(UNBAL);
           IF DEL#=DEL_SEMI THEN
UNBAL:        ALTRETURN;
           IF DEL#=DEL_QUOTE
           THEN DO WHILE (DEL#~=DEL_QUOTE);
              CALL GTOKEN ALTRET(UNBAL);
              END;
           END;
        DEL#=0;
        RETURN;
%EJECT;
SYNERR: PROC(ERRN);
DCL ERRN UBIN;
DCL ERRTXT(0:11) CONSTANT CHAR(32) INIT(
'BAD LEVEL NUMBER',
'BAD DIMENSION FORMAT',
'BAD ITEM SIZE',
'IMPROPER WORD/HALF/BYTE',
'IMPLIED PTR FORMAT BAD',
'STCLASS ONLY AT LEVEL 1'
,'UNBALANCED PARENS IN INIT',
'UNRECOGNIZED KEYWORD'
,'CANT INIT STRUCTURE'
,'IMPROPER STRUCTURING'
,'REDEF MISMATCH'
,'END COMMENT...NO START'
);
%FPT_WRITE (FPTN=WRER,DCB=M$DO);
        WRER.BUF_=VECTOR(SUBSTR(BFR,0,ARS#));
        CALL M$WRITE(WRER);
        WRER.BUF_=VECTOR(ERRTXT(ERRN));
        CALL M$WRITE(WRER);
        RETURN;
END SYNERR;
%EJECT;
FIXLVLA: PROC;
        DO WHILE (LVL<OLDLVL);
           OLDLVL=OLDLVL-1;
           IF LVLA(OLDLVL)<LVLP(OLDLVL)->B$VREBL.ALIGNTYP
           THEN
              LVLP(OLDLVL)->B$VREBL.ALIGNTYP=LVLA(OLDLVL);
           IF LVLP(OLDLVL)->B$VREBL.ALIGNTYP<LVLA(OLDLVL-1)
           THEN
              LVLA(OLDLVL-1)=LVLP(OLDLVL)->B$VREBL.ALIGNTYP;
           END;
        OLDLVL=LVL;
END FIXLVLA;
%EJECT;
FIXLVLS: PROC;
        DO WHILE (LVL<OLDLVL);
           OLDLVL=OLDLVL-1;
           ALIGN=LVLA(OLDLVL);
           Q$=LVLP(OLDLVL);
           Q$->B$VREBL.LOGSIZ=BITNO-LVLB(OLDLVL);
           CALL ALIGNP;
           BITNO=LVLB(OLDLVL)+(BITNO-LVLB(OLDLVL))*Q$->B$VREBL.DIMS;
           Q$->B$VREBL.ELMNTSIZ=BITNO-LVLB(OLDLVL);
           END;
END FIXLVLS;
%EJECT;
ALIGNP: PROC;
DCL BITS(0:4) SBIN CONSTANT INIT(72,36,18,9,1);
DCL X1 UBIN;
        X1=MOD(BITNO,BITS(ALIGN));
        IF X1>0
        THEN BITNO=BITNO+BITS(ALIGN)-X1;
END ALIGNP;
%EJECT;
GTOKEN: PROC ALTRET;
/*
*/
DCL DELIMXL(0:127) UBIN BYTE UNAL CONSTANT INIT(
20*32,
10,20*6,25*3,20*2,25,20*3,20*10,25*2,20*4,
20*64);
/*B9=DELIM,B8=SP,B7=OTHER,B6=DELIM OR SP, B5=NONBLANK*/
/*
*/
DCL X1 UBIN;
DCL X2 UBIN;
DCL X3 UBIN;
DCL DELIMPOS UBIN;
%EJECT;
        TOKENSIZ=0;
        IF NOTOKEN THEN ALTRETURN;
RD:     DO WHILE (NOT RCDIN OR (ARS#=0));
           CALL XUU$READ(XUU_PARAM,VECTOR(BFR)) ALTRET(NOMORE);
           ARS#=XUU_PARAM.ARS;
           CALL PRNTIT;
           CPOS=0;
           CALL XLATE(SUBSTR(XBFR,0,ARS#),DELIMXL,SUBSTR(BFR,0,ARS#));
           X1=0;
           DO WHILE ('1'B);
              CALL INDEX2(X2,'/*',SUBSTR(BFR,X1,ARS#-X1)) ALTRET(NOSCMT);
              X2=X2+X1;
              CALL INSERT(XBFR,X2,1,BINASC(25));
              X1=X2+2;
              END;
NOSCMT:    X1=0;
           DO WHILE ('1'B);
              CALL INDEX2(X2,'*/',SUBSTR(BFR,X1,ARS#-X1)) ALTRET(SCANRCD);
              X2=X2+X1;
              CALL INSERT(XBFR,X2,1,BINASC(25));
              X1=X2+2;
              END;
           END;
SCANRCD: RCDIN='1'B;
        CALL INDEX1(X1,BINASC(8),SUBSTR(XBFR,CPOS,ARS#-CPOS),,'767'O)
          ALTRET(NODELIM);
        X1=X1+CPOS;
        DELIMPOS=X1;
        CALL INDEX1(X2,BINASC(20),SUBSTR(XBFR,X1,ARS#-X1));
        CALL INDEX1(X3,BINASC(1),SUBSTR(XBFR,X1,X2),,'776'O)
          ALTRET(NONONSP);
        X1=X1+X3;
        CALL INDEX1(X3,BINASC(25),SUBSTR(XBFR,X1+1,X2-X3))
          ALTRET(NONONSP);
        X2=X1-DELIMPOS+X3+1;
NONONSP: CALL INDEX1(DEL#,SUBSTR(BFR,X1,1),DELIMS);
        OLDPOS=CPOS;
        CPOS=X2+DELIMPOS;
        IF CPOS>=ARS# THEN
           RCDIN='0'B;
        IF CMTON
        THEN DO;
           IF DEL#=DEL_AST
           THEN DO;
              CMTON='0'B;
INCPOS:       CPOS=CPOS+1;
              IF CPOS=ARS# THEN
                 RCDIN='0'B;
              END;
           GOTO RD;
           END;
        IF QUOTON
        THEN DO;
           IF DEL#=DEL_QUOTE
           THEN
              QUOTON='0'B;
           GOTO RD;
           END;
        IF DEL#=DEL_AST
        THEN DO;
           CALL SYNERR(11);
           GOTO INCPOS;
           END;
        IF DEL#=DEL_SLASH
        THEN DO;
           IF (OLDPOS<DELIMPOS) AND (TOKENSIZ>0)
           THEN GOTO GIVETOKEN;
           CMTON='1'B;
           TOKENSIZ=DELIMPOS-OLDPOS;
           TOKEN=SUBSTR(BFR,OLDPOS,TOKENSIZ);
           GOTO INCPOS;
           END;
        IF DEL#=DEL_QUOTE
        THEN DO;
           QUOTON='1'B;
           GOTO RD;
           END;
        IF TOKENSIZ>0
        THEN DO;
           IF OLDPOS<DELIMPOS
           THEN DO;
GIVETOKEN:    DEL#=DEL_SPACE;
              CPOS=OLDPOS;
              RCDIN='1'B;
              END;
           END;
        ELSE DO;
           TOKENSIZ=DELIMPOS-OLDPOS;
           TOKEN=SUBSTR(BFR,OLDPOS,TOKENSIZ);
           IF DEL#=DEL_SPACE
           THEN DO;
              IF (TOKENSIZ=0) OR (CPOS=ARS#)
              THEN GOTO RD;
              END;
           END;
        RETURN;
NODELIM: IF CMTON
        THEN DO;
           RCDIN='0'B;
           GOTO RD;
           END;
        IF TOKENSIZ>0
        THEN DO;
           DEL#=0;
           RETURN;
           END;
        RCDIN='0'B;
        TOKENSIZ=ARS#-CPOS;
        TOKEN=SUBSTR(BFR,CPOS,TOKENSIZ);
        GOTO RD;
NOMORE: NOTOKEN = '1'B;
        ALTRETURN;
END GTOKEN;
%EJECT;
GNUMB:  PROC ALTRET;
DCL X1 SBIN;
DCL X2 SBIN;
        CALL GTOKEN ALTRET(NOTNUMB);
        NUMB=0;
        X1=0;
        DO WHILE (X1<TOKENSIZ);
           X2=ASCBIN(SUBSTR(TOKEN,X1,1))-ASCBIN('0');
           IF (X2<0) OR (X2>9) THEN
NOTNUMB:      ALTRETURN;
           NUMB=NUMB*10+X2;
           X1=X1+1;
           END;
        RETURN;
END GNUMB;
%EJECT;
DRAWOPT: ENTRY ALTRET;
        M$LO$=DCBADDR(DCBNUM(M$LO));
        LINECNT=M$LO$->F$DCB.LINES#-4;
        IF LINECNT<30
        THEN LINECNT=35;
        IF M$LO$->F$DCB.ORG# = 1
        THEN LINECNT = 999999;
        CALL INDEX1(NUMB,'(',B$JIT.CCBUF);
        CALL INDEX1(DIM,')',SUBSTR(B$JIT.CCBUF,NUMB));
        BFR=SUBSTR(B$JIT.CCBUF,NUMB,DIM);
BLANKCOMMA: CALL INDEX(LVL,',',BFR,,'007'O) WHENRETURN DO;
           SUBSTR(BFR,LVL,1)=' ';
           GOTO BLANKCOMMA;
           END;
        CALL INDEX(LVL,':',BFR) ALTRET(NOSEL);
        CALL INDEX(SELNMOPT,' ',SUBSTR(BFR,LVL+1,DIM-LVL));
        SELNMNAM=SUBSTR(BFR,LVL+1,SELNMOPT);
        CALL INDEX1R(SELOUOPT,' ',SUBSTR(BFR,0,LVL));
        SELOUOPT=LVL-SELOUOPT-1;
        SELOUNAM=SUBSTR(BFR,LVL-SELOUOPT,SELOUOPT);
        SUBSTR(BFR,LVL-SELOUOPT,SELOUOPT+SELNMOPT+1)=' ';
NOSEL: ;
        CALL TSTOP('LS',PRNTOP);
        CALL TSTOP('LA',PRNTALL);
        CALL TSTOP('LK',PRNTKEY);
        IF PRNTKEY
        THEN DO;
           WRLN.BUF_=VECTOR(PRTLINE);
           END;
LKOFF:  UIOPT=B$JIT.PRFLAGS.UI;
        CALL TSTOP('UI',UIOPT);
        LVL=M$LO$->F$DCB.WIDTH#;
        IF (LVL>0) AND (LVL<110)
        THEN DO;
           NARROWOPT='1'B;
           LBLOPT='0'B;
           END;
        ELSE DO;
           CALL TSTOP('NA',NARROWOPT);
           IF NOT NARROWOPT THEN EXIT;
           LBLOPT='0'B;
           END;
        CALL TSTOP('LB',LBLOPT);
        CALL TSTOP('PL',PL6OPT);
        CALL EQUCK('BI' , BITOPT);
        IF B$JIT.PRFLAGS.OU AND BITOPT = 0
        THEN
           EQUOPT = 2;
        CALL EQUCK('EQ',EQUOPT);
        CALL EQUCK('MA',MASKOPT);
        RETURN;
 
EQUCK:   PROC (TX , OPT);
DCL TX CHAR (2);
DCL OPT UBIN;
DCL OPTB REDEF OPT BIT(36) ALIGNED;
 
        CALL INDEX(LVL, TX ,BFR) ALTRET(EQUOK);
        IF SUBSTR(BFR,LVL-1,1)='N'
        THEN OPT = 0;
        ELSE DO;
           OPT = 2;
           CALL INDEX(LVL,'=',BFR,LVL) ALTRET(EQUOK);
           OPT = ASCBIN(SUBSTR(BFR,LVL+1,1))-ASCBIN('0');
           END;
EQUOK:  RETURN;
 
TSTOP: ENTRY (TX, OPT);
        CALL INDEX(LVL, TX, BFR) ALTRET(EQUOK);
        SUBSTR(BFR,LVL,2) = ' ';
        IF SUBSTR(BFR,LVL-1,1)='N'
        THEN OPT = 0;
        ELSE OPTB = '1'B;
        RETURN;
END EQUCK;
END DRAWS;
