/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
TEST: PROC(NODES$);
DCL NODES$ PTR;
DCL 1 NODE@ REDEF NODES$ ALIGNED,
      2 LOC UBIN(18) UNAL,
      2 SID BIT(18);
%INCLUDE CP_6;
%INCLUDE XU_MACRO_C;
%P_PCB(NAME=PCB,
       T=SIBUF,
       W=WORK,
       U$=USER,
       OUTDCB=M$LO,
       WSZ=2048);
%P$NODE (STCLASS="BASED(NODES$)");
%FPT_EXIT (STCLASS=STATIC SYMDEF);
%FPT_READ(FPTN=READ_SI,
          BUF=SIBUF,
          DCB=M$TI);
%FPT_WRITE(FPTN=WRITE_LO,
           STCLASS=STATIC SYMDEF,
           DCB=M$LO,
           BUF=LOBUF);
%FPT_PROMPT(PROMPT=PC);
%FPT_CLOSE(FPTN=SAVE_LO,
           DCB=M$LO,
           DISP=SAVE);
%F$DCB(DCBN=DUMMY);
 
    DCL M$TI                           DCB;
    DCL M$LO                           DCB;
    DCL BUSH                           ENTRY(4);
    DCL USER                           ENTRY(1);
    DCL CVD                            ENTRY(3);
    DCL X$PARSE                        ENTRY(1) ALTRET;
    DCL SIBUF STATIC SYMDEF            CHAR(4096);
    DCL LOBUF STATIC SYMDEF            CHAR(132);
    DCL WORK STATIC                    CHAR(8192);
    DCL DWORK                          CHAR(8);
    DCL BLK$                           PTR;
    DCL PC STATIC                      CHAR(1);
    DCL I                              SBIN;
    DCL J                              SBIN;
    DCL WID                            SBIN;
    DCL SYM$ PTR SYMREF;
DCL 1 SYM@ REDEF SYM$ ALIGNED,
      2 LOC UBIN(18) UNAL,
      2 SID BIT(18);
    DCL MAXSYM$ PTR SYMREF;
    DCL 1 SYM BASED(BLK$)ALIGNED,
      2 LOC UBIN(18)UNAL,
      2 P BIT(1),
      2 L UBIN(17)UNAL,
      2 TXT CHAR(SYM.L);
    DCL ERMSG(0:7) CONSTANT            CHAR(16) INIT(
        '..Unused input->','<-Syntax error->',
        'Null root       ','Bad node        ',
        'Workarea overflo','Small work area ',
        'Unknown error   ','Null U$ routine ');
 
    PCB.ROOT$=NODES$;
    I=P$NODE.TYPE;
    IF I=0 OR I>63 THEN DO;
       LOBUF='Use the PARSE version that matches these nodes';
       CALL M$WRITE(WRITE_LO);
       FPT_EXIT.V.STEPCC# = 6;
       GOTO EOJ;
       END;
 
READIT:
    BLK$=SYM$;
    IF NODE@.SID=SYM@.SID THEN BLK$=MAXSYM$;
    DO WHILE(BLK$<MAXSYM$ AND SYM.LOC~=NODE@.LOC);
       BLK$=PINCRW(BLK$,SIZEW(SYM));
       END;
    IF BLK$<MAXSYM$ THEN DO;
       CALL CONCAT(LOBUF,'-- ',SYM.TXT,' --');
       CALL M$WRITE(WRITE_LO);
       END;
    PC='*';
    CALL M$PROMPT(FPT_PROMPT);
    WID=DCBADDR(DCBNUM(M$LO))->DUMMY.WIDTH#;
    IF WID=0 OR WID>132 THEN
        WID=132;
    CALL M$READ(READ_SI) ALTRET(EOJ);
    PCB.NCHARS=DCBADDR(DCBNUM(M$TI))->DUMMY.ARS#;
    IF NOT DCBADDR(DCBNUM(M$TI))->DUMMY.DDEV.IC#
      OR NOT DCBADDR(DCBNUM(M$LO))->DUMMY.DDEV.IC# THEN DO;
    I=0;
    DO WHILE(I+WID<PCB.NCHARS);
        LOBUF=SUBSTR(SIBUF,I,WID);
        CALL M$WRITE(WRITE_LO);
        I=I+WID;
    END;
    IF I<PCB.NCHARS THEN DO;
        LOBUF=SUBSTR(SIBUF,I,PCB.NCHARS-I);
        CALL M$WRITE(WRITE_LO);
    END;
    ELSE DO;
        LOBUF='-> Null input <-';
        CALL M$WRITE(WRITE_LO);
    END;
    END;
    CALL X$PARSE(PCB) ALTRET(OOPS);
    BLK$=PCB.OUT$;
    LOBUF=' ';
    CALL BUSH(BLK$,0,0,'1'B);
    I=PCB.WK_USED;
    CALL CVD(I,DWORK,J);
    CALL CONCAT(LOBUF,'Work used=',SUBSTR(DWORK,J,8-J));
    CALL M$WRITE(WRITE_LO);
    IF PCB.HI_CHAR=PCB.NCHARS THEN
        GOTO READIT;
    PCB.ERROR.CODE=0;
 
OOPS:
    IF PCB.ERROR.CODE>1 THEN PCB.NCHARS=0;
    IF PCB.HI_CHAR<10 THEN I=0;
    ELSE I=PCB.HI_CHAR-10;
    J=PCB.HI_CHAR+10;
    IF J>PCB.NCHARS THEN
        J=PCB.NCHARS;
    CALL CONCAT(LOBUF,SUBSTR(SIBUF,I,PCB.HI_CHAR-I),
      ERMSG(PCB.ERROR.CODE),SUBSTR(SIBUF,PCB.HI_CHAR,J-PCB.HI_CHAR));
    CALL M$WRITE(WRITE_LO);
    IF PCB.ERROR.CODE=1 THEN DO;
        PCB.NXT='1'B;
        CALL X$PARSE(PCB);
        PCB.NXT='0'B;
        FPT_EXIT.V.STEPCC# = BITBIN(BINBIT(FPT_EXIT.V.STEPCC#,3)|'2'O);
        END;
        ELSE FPT_EXIT.V.STEPCC# = BITBIN(BINBIT(FPT_EXIT.V.STEPCC#,3)|'4'O);
    GOTO READIT;
 
EOJ:
    CALL M$CLOSE(SAVE_LO);
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
USER: PROC(PARAM_);
%INCLUDE CP_6;
%INCLUDE XU_MACRO_C;
%INCLUDE XU_SUBS_C;
%PARSE$PARAM(NAME=PARAM_);
%P$PCB(NAME=PCB,
       STCLASS=SYMREF);
%FPT_READ(FPTN=READ_SI,
          DCB=M$TI,
          BUF=SIBUF);
%FPT_WRITE(FPTN=WRITE_LO,
           DCB=M$LO,
           BUF=LOBUF);
%FPT_PROMPT(PROMPT=PC);
%FPT_READ(FPTN=READ_USER,
          DCB=M$USER,
          BUF=LOBUF);
%M$DCB(DCBN=M$USER,
       RES='NO');
%F$DCB(DCBN=DUMMY);
 
    DCL M$TI                           DCB;
    DCL M$LO                           DCB;
    DCL TRANSLATE                      ENTRY(3);
    DCL NODEADDR                       ENTRY(2);
    DCL CVD                            ENTRY(3);
    DCL SIBUF SYMREF                   CHAR(4096);
    DCL LOBUF SYMREF                   CHAR(132);
    DCL STRG                           CHAR(40);
    DCL DWORK                          CHAR(8);
    DCL I                              SBIN;
    DCL J                              SBIN;
    DCL WID                            SBIN;
    DCL PC STATIC                      CHAR(1);
    DCL USERRSPS STATIC             CHAR(4) INIT('AaRr');
 
    WID=DCBADDR(DCBNUM(M$LO))->DUMMY.WIDTH#;
    IF WID=0 OR WID>132 THEN
        WID=132;
    IF PARAM_.TYPE=%INPUT# AND PARAM_.CHARPOS+1<SIZEC(SIBUF) THEN DO;
        PC='+';
        CALL M$PROMPT(FPT_PROMPT);
        READ_SI.BUF_.BOUND=SIZEC(SIBUF)-PARAM_.CHARPOS+1-1;
        READ_SI.BUF_.BUF$=PINCRC(ADDR(SIBUF),PARAM_.CHARPOS+1);
        CALL M$READ(READ_SI);
        I=PARAM_.CHARPOS+1;
        PCB.NCHARS=PARAM_.CHARPOS+1+DCBADDR(DCBNUM(M$TI))->DUMMY.ARS#;
        IF NOT DCBADDR(DCBNUM(M$TI))->DUMMY.DDEV.IC#
          OR NOT DCBADDR(DCBNUM(M$LO))->DUMMY.DDEV.IC# THEN DO;
        DO WHILE(I+WID<PCB.NCHARS);
            LOBUF=SUBSTR(SIBUF,I,WID);
            CALL M$WRITE(WRITE_LO);
            I=I+WID;
        END;
        LOBUF=SUBSTR(SIBUF,I,PCB.NCHARS-I);
        CALL M$WRITE(WRITE_LO);
        END;
        RETURN;
    END;
    IF PARAM_.TYPE=%PRE# THEN
        LOBUF='Preparse';
    ELSE IF PARAM_.TYPE=%SUCC# THEN
        LOBUF='Success!';
    ELSE IF PARAM_.TYPE=%FAIL# THEN
        LOBUF='Failure!';
    ELSE
        LOBUF='Buf full';
    I=PARAM_.CODE;
    CALL TRANSLATE(I,STRG,J);
    CALL INSERT(LOBUF,9,J+2,SUBSTR(STRG,0,J),' @');
    I=J+11;
    J=PARAM_.CHARPOS;
    CALL CVD(J,DWORK,J);
    CALL INSERT(LOBUF,I,8-J,SUBSTR(DWORK,J,8-J));
    CALL NODEADDR(PARAM_.NODE$,SUBSTR(LOBUF,I+9-J,4));
    PC='?';
    CALL M$PROMPT(FPT_PROMPT);
    IF NOT PCB.NXT THEN DO;
        CALL M$WRITE(WRITE_LO);
        IF SUBSTR(LOBUF,0,1)='B' THEN RETURN;
        LOBUF=' ';
        CALL M$READ(READ_USER) ALTRET(OOPS);
        CALL INDEX1(J,SUBSTR(LOBUF,0,1),USERRSPS);
        DO CASE(J/2);
        CASE(0);/* ACCEPT */
            PARAM_.ACCEPT='1'B;
        CASE(1);/* REJECT(SUCCESS) OR RETRY(FAILURE) */
            PARAM_.REJECT='1'B;
            PARAM_.RETRY='1'B;
        END;
        CALL INDEX2(J,'  ',LOBUF);
        I=J;
        DO WHILE(J>0 AND SUBSTR(LOBUF,J-1,1)>='0' AND SUBSTR(LOBUF,J-1,1)<='9');
            J=J-1;
        END;
        IF I>J THEN DO;
            CALL CHARBIN(J,SUBSTR(LOBUF,J,I-J));
            PARAM_.CHARPOS=J;
        END;
    END;
 
OOPS:
    RETURN;
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
BUSH: PROC(PNT,LVL,NUM,FLG);
%INCLUDE CP_6;
%INCLUDE XU_MACRO_C;
    DCL PNT                            PTR;
    DCL LVL                            SBIN;
    DCL NUM                            SBIN;
    DCL FLG                            BIT(1);
%PARSE$SYM;
%PARSE$OUT;
%FPT_WRITE(FPTN=WRITE_LO,
           DCB=M$LO,
           BUF=LOBUF);
%F$DCB(DCBN=DUMMY);
 
    DCL M$LO                           DCB;
    DCL BLK$                           PTR;
    DCL CVD                            ENTRY(3);
    DCL TRANSLATE                      ENTRY(3);
    DCL LOBUF SYMREF                   CHAR(132);
    DCL STRG                           CHAR(40);
    DCL DWORK                          CHAR(8);
    DCL I                              SBIN;
    DCL J                              SBIN;
    DCL K                              SBIN;
    DCL WID                            SBIN;
    DCL TITLE(0:28) CONSTANT           CHAR(8) INIT(
        'Temp.   ','Altern. ','Concat. ','List    ',
        'Literal ','Dstring ','EOL     ','Blank   ',
        'Raltern.','Invalid ','Invalid ','Invalid ',
        'Invalid ','Invalid ','Invalid ','Invalid ',
        'Null    ','Octal   ','Decimal ','Alpha.  ',
        'Alnum.  ','Symbol  ','Fid     ','Asymbol ',
        'PL6sym  ','Hex     ','Jobname ','Account ','Rtext   ');
 
    WID=DCBADDR(DCBNUM(M$LO))->DUMMY.WIDTH#;
    IF WID<72 THEN
        WID=132;
    IF WID>132 THEN
        WID=132;
    I=2*LVL;
    CALL INSERT(LOBUF,I,,' ');
    IF LVL>0 THEN
        CALL INSERT(LOBUF,I-2,2,'+-');
    BLK$=PNT;
    J=NUM;
    CALL CVD(J,DWORK,K);
    CALL INSERT(LOBUF,I,8,SUBSTR(DWORK,K,8-K));
    I=I+3;
    J=OUT$BLK.NDTYPE;
    IF J>=SIZEC(TITLE)/SIZEC(TITLE(0)) THEN J=15;
    CALL INSERT(LOBUF,I,8,TITLE(J));
    I=I+8;
    J=OUT$BLK.CPOS;
    CALL CVD(J,DWORK,K);
    CALL INSERT(LOBUF,I,10,'@ ',SUBSTR(DWORK,K,8-K));
    IF K>=6 THEN K=6;
    I=I+11-K;
    J=OUT$BLK.CODE;
    IF OUT$BLK.TEMP THEN DO;
        STRG='temp';
        K=4;
    END;
    ELSE CALL TRANSLATE(J,STRG,K);
    CALL INSERT(LOBUF,I,K,SUBSTR(STRG,0,K));
    I=I+K+1;
    J=OUT$BLK.NDTYPE;
    IF (J=5 OR J>15) AND OUT$BLK.NSUBLKS=1 THEN DO;
        J=OUT$SYM.COUNT;
        CALL CVD(J,DWORK,K);
        CALL INSERT(LOBUF,I,12-K,'(',SUBSTR(DWORK,K,8-K),') "');
        I=I+12-K;
        IF J>WID-1-I THEN
            J=WID-I;
        CALL INSERT(LOBUF,I,J+1,SUBSTR(OUT$SYM.TEXT,0,J),'"');
        CALL M$WRITE(WRITE_LO);
    END;
    ELSE DO;
        CALL M$WRITE(WRITE_LO);
        IF LVL>0 THEN
            IF FLG THEN
                CALL INSERT(LOBUF,2*LVL-2,2,'  ');
            ELSE
                CALL INSERT(LOBUF,2*LVL-2,2,'| ');
        DO I=0 TO OUT$BLK.NSUBLKS-1;
            IF I=OUT$BLK.NSUBLKS-1 THEN
                CALL BUSH(OUT$BLK.SUBLK$(I),LVL+1,I,'1'B);
            ELSE
                CALL BUSH(OUT$BLK.SUBLK$(I),LVL+1,I,'0'B);
        END;
    END;
    RETURN;
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
CVD: PROC(SRC,DST,PNT);
    DCL SRC                            SBIN;
    DCL PNT                            SBIN;
    DCL DST                            CHAR(8);
 
    CALL BINCHAR(DST,SRC);
    PNT=0;
    DO WHILE(PNT<7 AND SUBSTR(DST,PNT,1)='0');
        PNT=PNT+1;
    END;
    RETURN;
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
TRANSLATE: PROC(VAL,NAM,LEN);
    DCL VAL                            SBIN;
    DCL 1 V REDEF VAL ALIGNED,
          2 VAL UBIN(18);
    DCL LEN                            SBIN;
    DCL NAM                            CHAR(40);
%INCLUDE CP_6;
%INCLUDE B$JIT;
%INCLUDE XU_MACRO_C;
%P_PCB(NAME=INTPCB,
       T=UIBUF,
       R=EQUATE,
       W=WORK,
       WSZ=64);
%FPT_OPEN(FPTN=OPEN_UI,
          FUN=IN,
          DCB=M$UI);
%FPT_READ(FPTN=READ_UI,
          DCB=M$UI,
          BUF=UIBUF);
%FPT_CLOSE(FPTN=CLOSE_UI,
           DCB=M$UI,
           DISP=SAVE);
%F$DCB(DCBN=DUMMY);
%PARSE$OUT;
%PARSE$SYM;
 
    DCL M$UI                           DCB;
    DCL STORAGE STATIC                 CHAR(8192);
    DCL WORK STATIC                    CHAR(256);
    DCL UIBUF STATIC                   CHAR(256);
    DCL 1 SYMBOL BASED(P) UNAL,
         2 VALUE UNAL                  UBIN(18),
         2 L UNAL                      UBIN(9),
          2 C UNAL                     CHAR(SYMBOL.L);
    DCL P STATIC                       PTR;
    DCL FN STATIC                      UBIN;
    DCL Q STATIC                       PTR INIT(ADDR(STORAGE));
    DCL BLK$ STATIC                    PTR;
    DCL B REDEF BLK$                   UBIN;
    DCL EQUATE SYMREF                  BIT(36);
    DCL B$JIT$ SYMREF                  PTR;
    DCL I                              UBIN WORD;
    DCL X$PARSE                        ENTRY(1) ALTRET;
    DCL F STATIC                       BIT(1) INIT('1'B);
    DCL DECS(0:5)CONSTANT              UBIN INIT(1,10,100,1000,10000,100000);
    DCL SYM$                           PTR SYMREF;
    DCL MAXSYM$                        PTR SYMREF;
    DCL 1 SYM BASED(BLK$)ALIGNED,
          2 VAL UBIN(18)UNAL,
          2 P BIT(1),
          2 LEN UBIN(17)UNAL,
          2 TXT CHAR(SYM.LEN);
    DCL 1 POFF# SYMREF,
          2 O SBIN(18)UNAL;
 
    IF B$JIT.PRFLAGS.UI AND F THEN DO;
        F='0'B;
        CALL M$OPEN(OPEN_UI) ALTRET(NO_UI);
        P=ADDR(STORAGE);
        Q=P;
        DO WHILE(POFFC(PINCRC(ADDR(STORAGE),8192),Q)>=32);
 
READUI:
            UIBUF=' ';
            CALL M$READ(READ_UI) ALTRET(CLSUI);
            CALL INDEX1R(I,';',UIBUF,255) ALTRET(NOZAP);
            CALL INSERT(UIBUF,I,1,' ');
 
NOZAP:
            INTPCB.NCHARS=DCBADDR(DCBNUM(M$UI))->DUMMY.ARS#;
            CALL X$PARSE(INTPCB) ALTRET(READUI);
            BLK$=INTPCB.OUT$->OUT$BLK.SUBLK$(0);
            SYMBOL.L=OUT$SYM.COUNT;
            SYMBOL.C=SUBSTR(OUT$SYM.TEXT,0,SYMBOL.L);
            BLK$=INTPCB.OUT$->OUT$BLK.SUBLK$(1);
            CALL CHARBIN(I,SUBSTR(OUT$SYM.TEXT,0,OUT$SYM.COUNT));
            SYMBOL.VALUE=I;
            P=PINCRC(P,SYMBOL.L+3);
            Q=P;
        END;
 
CLSUI:
        CALL M$CLOSE(CLOSE_UI);
    END;
 
NO_UI:
    LEN=4;
    IF VAL<1000 THEN
        LEN=3;
    IF VAL<100 THEN
        LEN=2;
    IF VAL<10 THEN
        LEN=1;
    CALL BINCHAR(SUBSTR(NAM,0,LEN),VAL);
    IF B$JIT.PRFLAGS.UI THEN DO;
        P=ADDR(STORAGE);
        DO WHILE(P~=Q);
            IF VAL=SYMBOL.VALUE THEN DO;
                I=LEN;
                LEN=LEN+SYMBOL.L+1;
                CALL INSERT(NAM,I,SYMBOL.L+1,'/',SYMBOL.C);
                RETURN;
            END;
            P=PINCRC(P,SYMBOL.L+3);
        END;
    END;
    RETURN;
NODEADDR: ENTRY(VAL,NAM);
   P=ADDR(NIL);
   BLK$=SYM$;
   I=V.VAL-POFF#.O;
   DO WHILE(BLK$<MAXSYM$ AND SYM.VAL~=V.VAL);
      IF SYM.P AND V.VAL>SYM.VAL AND V.VAL<=SYM.VAL+I THEN DO;
         P=BLK$;
         I=V.VAL-SYM.VAL;
         END;
      BLK$=PINCRW(BLK$,SIZEW(SYM));
      END;
   IF BLK$<MAXSYM$ THEN NAM=SYM.TXT;
   ELSE DO;
      IF P=ADDR(NIL) THEN P=ADDR(DECS);
      CALL CONCAT(NAM,P->SYM.TXT,'+.');
      B=0;
      FN=0;
      DO WHILE(I~=0);
         FN=MOD(I,8)*DECS(B)+FN;
         I=I/8;
         B=B+1;
         END;
      CALL BINCHAR(SUBSTR(NAM,P->SYM.LEN+2,B),FN);
      END;
   RETURN;
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
UNPART: PROC MAIN;
DCL M$SI DCB;
DCL M$TI DCB;
DCL POFF# UBIN STATIC SYMDEF;
DCL POFF$ REDEF POFF# PTR;
DCL 1 POFF@ REDEF POFF#,2 O UBIN(18)UNAL,2 S BIT(18);
DCL MAX$ PTR STATIC SYMDEF;
DCL 1 MAX@ REDEF MAX$,2 * BIT(18),2 S BIT(18);
%INCLUDE CP_6;
%INCLUDE XU_SUBS_C;
%INCLUDE U$JIT_C;
%INCLUDE XU_MACRO_C;
%INCLUDE B_ERRORS_C;
%INCLUDE CP_6_SUBS;
DCL B$JIT$ PTR SYMREF;
DCL M$SI$ PTR;
%F$DCB;
%FPT_READ(FPTN=RDSI,DCB=M$SI,KEYR=YES,KEY=KBUF);
%FPT_OPEN(FPTN=OPNME,DCB=M$TI,SN=OPNMESN,SETDCB=YES);
%VLP_SN(FPTN=OPNMESN);
%FPT_EXIT (STCLASS=SYMREF);
%FPT_GDS(FPTN=SYMGDS,SEGSIZE=2048,RESULTS=P);
%FPT_GDS(FPTN=GDS,SEGSIZE=2048,RESULTS=RDSI.BUF_,COMMON=YES);
DCL 1 P STATIC DALIGNED,
 2 SIZ UBIN(18)INIT(0)UNAL,2 * BIT(18),
 2 P$ PTR INIT(ADDR(NIL));
DCL NDS$ PTR STATIC SYMDEF;
DCL SCT$ PTR STATIC;
DCL SYM$ PTR STATIC SYMDEF;
DCL MAXSYM$ PTR STATIC SYMDEF;
DCL 1 KBUF STATIC,
 2 L UBIN(9)UNAL,
 2 C1 CHAR(1),
 2 UTS UBIN UNAL,
 2 * CHAR(1),
 2 SEQ UBIN(9) UNAL,
 2 * CHAR(1),
 2 SGM UBIN(18) UNAL,
 2 * CHAR(21);
DCL B$TCB$ PTR SYMREF;
%B$TCB(STCLASS="BASED(B$TCB$)");
%B$ALT;
DCL UNWBRK BIT(72)INIT('0'B)STATIC SYMDEF;
%FPT_INT(UENTRY=BREAK);
DCL BREAK ENTRY ASYNC;
DCL BRKLOC BIT(72);
%P$NODE (STCLASS=BASED);
DCL ENNODE(0:1) CONSTANT BIT(36)INIT('6000052'O,'006'O);
DCL KONODE(0:1) CONSTANT BIT(36)INIT('4000004'O,'002002'O);
DCL OUSDEF(0:1)BIT(36)INIT('007777'O,'000000006'O)CONSTANT;
DCL OUPRG(0:1)BIT(36)INIT('013777'O,'000000012'O)CONSTANT;
DCL OUDNAM(0:1)BIT(36)INIT('007777'O,'000000001'O)CONSTANT;
DCL 1 SDEF(0:0)BASED(RDSI.BUF_.BUF$)ALIGNED,
 2 * BIT(18),2 P BIT(36),2 * BIT(18);
DCL 1 NAM ALIGNED BASED,
 2 L UBIN(18)UNAL,2 TXT CHAR(NAM.L);
DCL UTS UBIN;
DCL OVLY UBIN;
DCL 1 KWD STATIC SYMDEF,
 2 L UBIN(9)UNAL INIT(0),
 2 TEXT CHAR(31)INIT(' ');
DCL 1 NDS BASED(NDS$)ALIGNED,
 2 N UBIN,
 2 NC REDEF N,
   3 TYPE UBIN(3)UNAL,
   3 NSBS UBIN(17)UNAL,
   3 * BIT(16),
 2 NB REDEF N,
  3 TYPE UBIN(9)UNAL,
  3 NSBS UBIN(9)UNAL,
  3 * BIT(18),
 2 P(0:0),
  3 O UBIN(18)UNAL,
  3 S,
   4 P BIT(1),
   4 NX UBIN(17)UNAL,
 2 P$(0:0) REDEF P PTR;
DCL EQUATE UBIN SYMREF; /* parse.x nodes */
DCL EQUATE$ PTR CONSTANT INIT(ADDR(EQUATE));
DCL 1 EQUA REDEF EQUATE$,
 2 TE UBIN(18)UNAL, 2 * BIT(18);
DCL I UBIN;
DCL I$ REDEF I PTR;
DCL I$$ BASED(I$)UBIN;
DCL J UBIN;
DCL NENTS UBIN;
DCL 1 SCT BASED(SCT$),
 2 N UBIN,
 2 S(0:0),
  3 ADR UBIN(18)UNAL,
  3 EADR UBIN(18)UNAL,
 2 SN(0:0)REDEF S UBIN;
DCL 1 SYM BASED(I$) ALIGNED,
 2 LOC UBIN(18)UNAL,
 2 S,
  3 P BIT(1),
  3 L UBIN(17)UNAL,
 2 TXT CHAR(SYM.S.L);
DCL 1 H(0:0) BASED(RDSI.BUF_.BUF$)ALIGNED,
 2 W0 UBIN(18)UNAL,
 2 W1 UBIN(18)UNAL,
 2 W2 UBIN(18)UNAL,
 2 W3 UBIN(18)UNAL;
DCL 1 H3(0:0) BASED(RDSI.BUF_.BUF$)ALIGNED,
 2 W0 UBIN(18)UNAL,
 2 W1 UBIN(18)UNAL,
 2 W2 UBIN(18)UNAL,
 2 W3 UBIN(18)UNAL,
 2 * UBIN;
DCL 1 PCB SYMREF,
 2 * UBIN,
 2 ROOT$ PTR;
DCL ADJUST ENTRY(1);
DCL TEST ENTRY(1);
DCL LOBUF  CHAR (132) SYMREF;
%FPT_WRITE (FPTN = WRITE_LO, STCLASS = SYMREF);
   CALL M$INT(FPT_INT);
   REMEMBER QUIT IN BRKLOC;
   IF B$JIT.CCARS-B$JIT.CCDISP~=0 THEN DO;
      KWD.L=B$JIT.CCARS-B$JIT.CCDISP-2;
      KWD.TEXT=SUBSTR(B$JIT.CCBUF,B$JIT.CCDISP+1,KWD.L);
      END;
   M$SI$=DCBADDR(DCBNUM(M$SI));
    IF PCB.ROOT$ ~= ADDR(NIL) OR
       M$SI$ -> F$DCB.ASN# ~= %FILE#
    THEN
        RDSI.V.DCB# = 2;
   CALL M$GDS(GDS);
   KBUF='0'B;
   CALL M$READ(RDSI) WHENALTRETURN
   DO;
     IF B$TCB.ALT$ -> B$ALT.ERR.CODE ~= %E$LD THEN
       CALL M$MERC;
   END;
   RDSI.V.KEYR# = '0'B;
   RDSI.V.KEYS#='1'B;
   POFF$=RDSI.BUF_.BUF$;
   OVLY=0;
   IF KBUF.C1='"' THEN DO;
      KBUF=OUSDEF;
      UTS=POFF$->F$DCB.ARS#;
      CALL READUTS;
      DO WHILE (NENTS>P.SIZ);
         CALL M$GDS(SYMGDS);
         END;
      NDS$=P.P$;
      NDS.N=NENTS;
      DO I=0 TO NDS.N-1;
         NDS.P(I)=SDEF.P(I);
         END;
      NDS.P.S.P(0)='1'B;
      KBUF=OUDNAM;
      CALL READUTS;
      CALL ADDSYMS;
      KBUF=OUPRG;
      CALL READUTS;
      MAX$=PINCRW(POFF$,NENTS*2);
      CALL DOIT;
      END;
   ELSE IF KBUF='005012'O THEN DO;
      CALL READ;
      MAX$=PINCRW(POFF$,NENTS*2);
      CALL TEST(POFF$);
      END;
   ELSE IF KBUF.L>=5 THEN DO WHILE('1'B);
      IF P.SIZ=0 THEN CALL M$GDS(SYMGDS);
      SCT$=P.P$;
      SCT.N=0;
      KBUF='005004'O;
      CALL READ ALTRET(QUIT);
      DO I=0 TO NENTS-1;
         IF H.W3(I)=BITBIN('474000'O) THEN DO;
            SCT.S(SCT.N)='0'B;
            SCT.S.ADR(SCT.N)=H.W1(I);
            SCT.N=SCT.N+1;
            END;
         END;
      IF SCT.N~=0 THEN DO;
         KBUF='005003'O;
         CALL READ;
         NENTS=DCBADDR(RDSI.V.DCB#)->F$DCB.ARS#/12;
         DO I=0 TO NENTS-1;
            DO J=0 TO SCT.N-1;
               IF SCT.S.ADR(J)=H3.W1(I) AND H3.W3(I)~=0
                 AND (SCT.S.ADR(J)~=EQUA.TE OR RDSI.V.DCB#~=2)
               THEN SCT.S.EADR(J)=H3.W1(I)+H3.W3(I);
               END;
            END;
         KBUF='005006'O;
         CALL READ;
         NDS$=ADDR(SCT.S(SCT.N));
         NDS.N=0;
         DO I=0 TO NENTS-1;
            DO J=0 TO SCT.N-1;
               IF H.W1(I)>=SCT.S.ADR(J) AND H.W1(I)<SCT.S.EADR(J) THEN DO;
                  IF ADDR(NDS.P(NDS.N))>PINCRW(P.P$,P.SIZ)
                  THEN CALL M$GDS(SYMGDS);
                  NDS.P(NDS.N)=SDEF.P(I);
                  IF H.W1(I)=SCT.S.ADR(J) THEN NDS.P.S.P(NDS.N)='1'B;
                  NDS.N=NDS.N+1;
                  END;
               END;
            END;
         DO J=1 TO SCT.N-1;
            IF SCT.S.ADR(0)>SCT.S.ADR(J) THEN SCT.S.ADR(0)=SCT.S.ADR(J);
            IF SCT.S.EADR(0)<SCT.S.EADR(J) THEN SCT.S.EADR(0)=SCT.S.EADR(J);
            END;
         SCT.S.ADR(0)=MINIMUM (SCT.S.ADR(0)/1024*1024, SCT.S.EADR(0));
         SCT.N=SCT.S.EADR(0)-SCT.S.ADR(0);
         KBUF='005001'O;
         CALL READ;
         CALL ADDSYMS;
         IF PCB.ROOT$~=ADDR(NIL) AND OVLY=0 THEN DO;
            OPNME.NAME_=VECTOR(M$SI$->F$DCB.NAME#);
            OPNME.V.ASN#=M$SI$->F$DCB.ASN#;
            OPNME.ACCT_=VECTOR(M$SI$->F$DCB.ACCT#);
            OPNME.PASS_=VECTOR(M$SI$->F$DCB.PASS#);
            OPNMESN.SN#(0)=M$SI$->F$DCB.PSN#;
            IF NOT DCBADDR(DCBNUM(M$TI))->F$DCB.AMR# THEN CALL M$OPEN(OPNME);
            CALL TEST(PCB.ROOT$);
            GOTO QUIT;
            END;
         DO WHILE(SCT.N*4<RDSI.BUF_.BOUND);
            CALL M$FDS(GDS);
            END;
         DO WHILE(SCT.N*4>RDSI.BUF_.BOUND+1);
            CALL M$GDS(GDS);
            END;
         MAX$=PINCRC(POFF$,RDSI.BUF_.BOUND+1);
         KBUF='005012'O;
         KBUF.UTS=SCT.S.ADR(0)+OVLY;
         SCT.N=SCT.N+OVLY;
         SCT.S.EADR(0)=6*512;
         POFF#=POFF#-SCT.SN(0);
         RDSI.BUF_.BOUND=4095;
         DO WHILE(SCT.N>KBUF.UTS-SCT.S.ADR(0));
            CALL READ;
            RDSI.BUF_.BUF$=PINCRW(RDSI.BUF_.BUF$,NENTS*2);
            KBUF.UTS=KBUF.UTS+NENTS*2;
            END;
         DO I=0 TO NDS.N-1;
            NDS.P.O(I)=NDS.P.O(I)+POFF@.O;
            END;
         I$=SYM$;
         DO WHILE(I$<MAXSYM$);
            SYM.LOC=SYM.LOC+POFF@.O;
            I$=PINCRW(I$,SIZEW(SYM));
            END;
         REMEMBER NXTOVL IN BRKLOC;
         CALL DOIT;
NXTOVL:  CALL M$FDS(GDS);
         CALL M$GDS(GDS);
         POFF$=RDSI.BUF_.BUF$;
         END;
      OVLY=OVLY+262144;
      END;
QUIT:;
   IF PCB.ROOT$=ADDR(NIL) THEN DO;
      CALL CONCAT(LOBUF,'No Parse nodes found in ',
        SUBSTR(DCBADDR(RDSI.V.DCB#)->F$DCB.NAME#.C,0,
        DCBADDR(RDSI.V.DCB#)->F$DCB.NAME#.L),
        '.',DCBADDR(RDSI.V.DCB#)->F$DCB.ACCT#);
      CALL M$WRITE (WRITE_LO);
      FPT_EXIT.V.STEPCC#=6;
      END;
    IF FPT_EXIT.V.STEPCC#~=0
    THEN CALL M$EXIT (FPT_EXIT);
    ELSE CALL M$EXIT;
%EJECT;
READUTS: PROC ALTRET;
DCL TMP$ PTR;
   KBUF.UTS=UTS;
READ: ENTRY ALTRET;
   IF KBUF.UTS<OVLY THEN KBUF.UTS=KBUF.UTS+OVLY;
REREAD: CALL M$READ(RDSI)ALTRET(SMALL);
   IF KBUF.L>5 THEN DO;
/* OBJECT, READ PAGES */
      RDSI.BUF_.BUF$=PINCRW(RDSI.BUF_.BUF$,DCBADDR(RDSI.V.DCB#)->F$DCB.ARS#/4);
      RDSI.BUF_.BOUND=RDSI.BUF_.BOUND-DCBADDR(RDSI.V.DCB#)->F$DCB.ARS#;
      IF KBUF.L=7 THEN KBUF.SEQ=KBUF.SEQ+1;
      ELSE KBUF.SGM=POFFW(RDSI.BUF_.BUF$,POFF$);
      GOTO REREAD;
      END;
   NENTS=(DCBADDR(RDSI.V.DCB#)->F$DCB.ARS#+7)/8;
   RETURN;
SMALL:;
   IF B$TCB.ALT$->B$ALT.ERR.CODE=66 THEN
   IF KBUF.L>5 AND RDSI.BUF_.BUF$~=POFF$ THEN DO;
      NENTS=POFFW(RDSI.BUF_.BUF$,POFF$)/2;
      RDSI.BUF_.BUF$=POFF$;
      RDSI.BUF_.BOUND=RDSI.BUF_.BOUND+NENTS*8;
      RETURN;
      END;
   ELSE IF OVLY~=0 THEN
   IF SCT.N=0 THEN ALTRETURN;
   ELSE IF KBUF.C1=BINASC(10) AND KBUF.UTS-OVLY-SCT.S.ADR(0)<1024 THEN DO;
      RDSI.BUF_.BUF$=PINCRW(RDSI.BUF_.BUF$,KBUF.UTS-SCT.S.ADR(0));
      CALL M$RETRY;
      END;
   IF B$TCB.ALT$->B$ALT.ERR.CODE~=7 THEN CALL M$MERC;
   TMP$=RDSI.BUF_.BUF$;
   CALL M$GDS(GDS);
   RDSI.BUF_.BOUND=RDSI.BUF_.BOUND-POFFC(TMP$,RDSI.BUF_.BUF$);
   RDSI.BUF_.BUF$=TMP$;
   CALL M$RETRY;
   END;
%EJECT;
DOIT: PROC ALTRET;
   DO J=0 TO NDS.N-1;
      IF NDS.P(J)~='1'B THEN DO;
         NDS.P.S(J)=MAX@.S;
         I=BITBIN(NDS.P(J));
         CALL ADJUST(I$$);
         NDS.P(J)=BINBIT(I,36);
         END;
      END;
   J=0;
   UNWBRK=BRKLOC;
   DO I=0 TO NDS.N-1;
      IF NDS.P(I)~='1'B THEN DO;
         IF I=NDS.P.O(NDS.N) THEN DO;
            CALL TEST(NDS.P(I));
            RETURN;
            END;
         NDS.P(J)=NDS.P(I);
         J=J+1;
         END;
      END;
   IF J=1 THEN CALL TEST(NDS.P(0));
   ELSE IF NDS.N~=0 THEN DO;
      IF NDS.P$(0)->NDS.NC.TYPE=0 THEN DO;
         NDS.NB.TYPE=%ALTERN#;
         NDS.NB.NSBS=J;
         END;
      ELSE DO;
         NDS.NC.TYPE=%TYPE_ALTERN#;
         NDS.NC.NSBS=J;
         END;
AGAIN:DO I=0 TO J-1;
         IF KWD.L~=0 THEN CALL TEST(NDS.P(I));
         ELSE DO;
            NDS.P(J+I*3)=KONODE(LENGTHB(P$NODE.TYPE)/5);
            NDS.P$(J+I*3+2)=ADDR(ENNODE(LENGTHB(P$NODE.TYPE)/5));
            NDS.P(J+I*3+1)=NDS.P(I);
            NDS.P$(I)=ADDR(NDS.P(J+I*3));
            END;
         END;
      IF KWD.L=0 THEN CALL TEST(ADDR(NDS.N));
      ELSE GOTO AGAIN;
      END;
   RETURN;
ADDSYMS: ENTRY ALTRET;
   SYM$=ADDR(NDS.P(NDS.N*4));
   I$=SYM$;
   DO WHILE(POFFW(I$,P.P$)>P.SIZ);
      CALL M$GDS(SYMGDS)ALTRET(RETALT);
      END;
   NDS.P.O(NDS.N)=NDS.N;
   DO J=0 TO NDS.N-1;
      SYM.S=NDS.P.S(J);
      SYM.S.L=PINCRW(RDSI.BUF_.BUF$,SYM.S.L)->NAM.L;
      SYM.LOC=NDS.P.O(J);
      IF POFFW(I$,P.P$)+SIZEW(SYM)>P.SIZ THEN CALL M$GDS(SYMGDS)ALTRET(RETALT);
      SYM.TXT=PINCRW(RDSI.BUF_.BUF$,NDS.P.S.NX(J))->NAM.TXT;
      IF SYM.TXT=KWD.TEXT THEN NDS.P.O(NDS.N)=J;
      I$=PINCRW(I$,SIZEW(SYM));
      END;
   MAXSYM$=I$;
   RETURN;
RETALT: ALTRETURN;
   END DOIT;
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
BREAK: PROC ASYNC;
%INCLUDE CP_6;
%FPT_TRMPRG(STCLASS=CONSTANT,RSTBRK=YES);
DCL UNWBRK BIT(72)SYMREF;
   CALL M$TRMPRG(FPT_TRMPRG);
   IF UNWBRK THEN UNWIND TO UNWBRK;
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
ADJUST: PROC(P$NODE);
%INCLUDE XU_MACRO_C;
%INCLUDE XU_SUBS_C;
DCL 1 P$NODE ALIGNED,
 2 TYPE UBIN(3)UNAL,
 2 * BIT(8)UNAL,
 2 NSUBNDS UBIN(9) UNAL,
 2 * BIT(16),
 2 SUBNDS$(0:0) PTR;
DCL 1 P$BNODE REDEF P$NODE,
 2 TYPE UBIN BYTE CALIGNED,
 2 NSUBNDS UBIN BYTE CALIGNED,
 2 * BIT(18),
 2 * BIT(36);
DCL 1 PREF CONSTANT,
 2 * BIT(36)INIT('5005'O),
 2 * BIT(9)INIT('010'O),
 2 * CHAR(8)INIT('!!PREF!!');
DCL POFF# UBIN SYMREF;
DCL POFF$ REDEF POFF# PTR;
DCL NDS$ PTR SYMREF;
DCL 1 NDS BASED(NDS$) ALIGNED,
 2 N UBIN,
 2 P@(0:0),3 O BIT(18),3 * BIT(18);
DCL P$ PTR STATIC;
DCL I UBIN;
DCL J UBIN;
DCL NSBS UBIN;
DCL 1 MAX$ PTR SYMREF;
DCL 1 MAX@ REDEF MAX$,2 * BIT(18),2 S UBIN(18)UNAL;
DCL NODE# BASED UBIN;
DCL 1 NODE@ BASED ALIGNED,2 O BIT(18),2 S UBIN(18)UNAL;
   DO CASE(P$NODE.TYPE);
   CASE(0);
      DO CASE P$BNODE.TYPE;
      CASE %KONCAT#, %LIST#, %ALTERN#, %RALTERN#;
         NSBS=P$BNODE.NSUBNDS-1;
         GOTO DOIT;
      END;
   CASE(%TYPE_KONCAT#,%TYPE_LIST#,%TYPE_ALTERN#,%TYPE_RALTERN#);
      NSBS=P$NODE.NSUBNDS-1;
DOIT:;
      IF ADDR(P$NODE.SUBNDS$(0))->NODE@.S=MAX@.S THEN RETURN;
      DO I=0 TO NSBS;
         ADDR(P$NODE.SUBNDS$(I))->NODE#=
         ADDR(P$NODE.SUBNDS$(I))->NODE#+POFF#;
         P$=P$NODE.SUBNDS$(I);
         IF ADDR(P$)->NODE@.S=MAX@.S AND P$<=MAX$ AND P$~=POFF$ THEN DO;
            DO J=0 TO NDS.N-1;
               IF NDS.P@.O(J)=ADDR(P$)->NODE@.O THEN DO;
                  NDS.P@(J)='1'B;
                  J=NDS.N;
                  END;
               END;
            CALL ADJUST(P$->NODE#);
            END;
         ELSE P$NODE.SUBNDS$(I)=ADDR(PREF);
         END;
      END;
   RETURN;
END ADJUST;
