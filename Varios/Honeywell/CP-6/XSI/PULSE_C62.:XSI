/*
   EXT DEFs for PULSE
   September 1, 1989.
*/
 
%VLP_ERRCODE( FPTN = ErrCode, STCLASS = EXT );
 
Dcl FmtBuf Char( 255 ) Ext;
 
%F_FDS ( NAME = FDS,
          DCB = M$Window,
          BUF = FmtBuf,
      STCLASS = EXT );
 
%F_FDS ( NAME = FDS2,
          DCB = M$Com,
          BUF = FmtBuf,
      STCLASS = EXT );
 
%P_PCB    ( Name = P_PCB, STCLASS = EXT );
%XUG_GETCMD ( NAME = Xug_Imp, INDCB = M$Imp, STCLASS=EXT );
%XUG_GETCMD ( NAME = Xug_Close, DISP = 0, DCB_PARAM = NIL, STCLASS=EXT );
Dcl Context SBin SymRef;
Dcl AccountNode SBin SymRef;
Dcl FidNode SBin SymRef;
Dcl PrefixNode SBin SymRef;
Dcl AsnJunk UBin(9) Ext;
Dcl ResJunk Char(4) Ext;
 
%FPT_FID  ( FPTN = MakeFid,
         STCLASS = EXT,
         TEXTFID = Fid,
              SN = VLPSISN,
            ACCT = VLPSIAcct,
            NAME = VLPSIName,
            PASS = VLPSIPass,
             WSN = VLPSIWSN,
             RES = ResJunk,
             ASN = AsnJunk,
         RESULTS = VLRFidRes );
 
%FPT_FID  ( FPTN = MakeContextFid,
         STCLASS = EXT,
         TEXTFID = Fid,
              SN = VLPOUSN,
            ACCT = VLPOUAcct,
            NAME = VLPOUName,
            PASS = VLPOUPass,
             WSN = VLPOUWSN,
             RES = ResJunk,
             ASN = AsnJunk,
         RESULTS = VLRFidRes );
 
%FPT_UNFID (FPTN = GetOUFid,
             DCB = M$OU,
         STCLASS = EXT,
         TEXTFID = Fid );
 
%FPT_FID  ( FPTN = MakeFidBack,
         STCLASS = EXT,
         TEXTFID = Fid,
              SN = VLPSISNBack,
            ACCT = VLPSIAcctBack,
            NAME = VLPSINameBack,
            PASS = VLPSIPassBack,
             WSN = VLPSIWSNBack,
             RES = ResJunk,
             ASN = AsnJunk,
         RESULTS = VLRFidRes );
 
%FPT_ERASE( FPTN = EraseEdit,  /* FPT to erase the edit window */
             DCB = M$Edit,
         STCLASS = EXT );
 
%FPT_DEVICE(FPTN = FPTDeviceEdit,  /* FPT to force a screen update */
         STCLASS = EXT,
             DCB = M$Edit );
 
%FPT_OPEN ( FPTN = EditOldFile,  /* the input file being edited */
         STCLASS = EXT,
             DCB = M$SI,
          FPARAM = FileAttr,
             FUN = UPDATE,
             ACS = DIRECT );
 
%FPT_OPEN ( FPTN = EditNewFile,  /* the input file does not exist */
            TYPE = 'SE',
             DCB = M$SI,
             CTG = YES,
             FUN = CREATE,
           EXIST = ERROR,
             ACS = DIRECT,
         STCLASS = EXT,
             ORG = KEYED );
 
%FPT_OPEN ( FPTN = DeleteFid,  /* delete a file (work or regular) */
             DCB = M$OU,
             FUN = UPDATE,
           SCRUB = NO,
              SN = VLPSISN,
            NAME = VLPSIName,
            ACCT = VLPSIAcct,
         STCLASS = EXT,
             ASN = FILE,
          DELETE = YES );
 
Dcl FileAttr (0:1023) UBin Word Ext WAligned;  /*  for FPARAM  */
Dcl 1 BabyFIT Ext,
    2 * Bit(72) Init( '020020010000160010004002'O ), /* trust me */
    2 Password# Char(8);
 
%FPT_OPEN ( FPTN = SetDCB,
         STCLASS = EXT,
             DCB = M$SI,
             FUN = IN,
             ASN = FILE,
          SETDCB = YES,
           SCRUB = YES,
            ACCT = VLPSIAcct,
            NAME = VLPSIName,
              SN = VLPSISN,
            PASS = VLPSIPass );
 
%FPT_OPEN ( FPTN = OpenOU,
             DCB = M$OU,
             FUN = CREATE, ORG = KEYED,
         IFPARAM = FileAttr,
           SCRUB = YES,
              SN = VLPSISN,
            NAME = VLPSIName,
            ACCT = VLPSIAcct,
         STCLASS = EXT,
             ASN = FILE,
             CTG = NO,
           EXIST = NEWFILE,
             ACS = DIRECT );
 
%FPT_OPEN ( FPTN = OpenStarUniqueIn,
             DCB = M$Block,
             FUN = IN,
             ORG = CONSEC,
             ASN = FILE,
             ACS = SEQUEN,
           SCRUB = YES,
            NAME = StarUnique,
         STCLASS = EXT );
 
%FPT_OPEN ( FPTN = OpenContext,
             DCB = M$OU, TYPE = 'Wp',
             FUN = CREATE, ORG = CONSEC,
           SCRUB = YES,
              SN = VLPOUSN,
            NAME = VLPOUName,
            ACCT = VLPOUAcct,
            PASS = VLPOUPass,
         STCLASS = EXT,
             ASN = FILE,
             CTG = YES,
             ACS = SEQUEN );
 
%FPT_CLOSE( FPTN = CloseSI,    /* Close the Edited file */
         STCLASS = EXT,
             DCB = M$SI );
 
%FPT_CLOSE( FPTN = CloseSIDelete,    /* Close the Edited file */
            DISP = RELEASE,
         STCLASS = EXT,
             DCB = M$SI );
 
%FPT_CLOSE( FPTN = CloseOU,    /* Close the rekeyed file */
         STCLASS = EXT,
            DISP = SAVE,
             DCB = M$OU );
 
%FPT_CLOSE( FPTN = CloseUC05,  /* Close the UC05 window */
         STCLASS = EXT,
             DCB = M$Window );
 
%FPT_CLOSE( FPTN = CloseStarUnique,
         STCLASS = EXT,
            DISP = SAVE,
             DCB = M$Block );
 
%FPT_PFIL ( FPTN = PosBOF,
         STCLASS = EXT,
             DCB = M$SI,
             BOF = YES );
 
%FPT_SINPUT(FPTN = SInputUC03,  /* for setting escape D on command bar */
             DCB = M$Com,
             BUF = ComLine,
       REREADPOS = 0,
         STCLASS = EXT );
 
%FPT_READ ( FPTN = ReadSI,     /* Read from the Edit file */
             DCB = M$SI,
             BUF = SILine,
         STCLASS = EXT,
             KEY = SIKey,
            KEYR = YES );
 
%FPT_READ ( FPTN = ReadStarUnique,
             DCB = M$Block,
             BUF = UniqueLine,
         STCLASS = EXT,
            KEYS = NO );
 
%FPT_WRITE( FPTN = WriteOU,     /* Write new records to Edit file */
             DCB = M$OU,
             BUF = SILine,
         STCLASS = EXT,
             KEY = OUKey,
         ONEWKEY = YES );
 
%FPT_READ ( FPTN = ReadUC02,   /* Find out which record changed */
             DCB = M$Edit,
             BUF = UCLine,
         STCLASS = EXT,
            KEYS = NO,
             KEY = UCKey,
            KEYR = YES );
 
%FPT_READ ( FPTN = ReadUC04,  /* Read the command character */
             DCB = M$Com,
           TRANS = NO,
             BUF = ComLine,
         STCLASS = EXT );
 
%FPT_WRITE( FPTN = WriteUC03Pos,
             DCB = M$Com,
              BP = YES,
             BUF = ComLine2,
         STCLASS = EXT );
 
%FPT_WRITE( FPTN = WriteContext,
             DCB = M$OU,
         STCLASS = EXT );
 
%FPT_DELREC(FPTN = DeleteSIRange, /*  FPT for M$DELREC, to delete */
             DCB = M$SI,          /*  a range of records from the */
             KEY = DelKeyStart,   /*  source.                     */
            LKEY = DelKeyEnd,
         STCLASS = EXT );
 
%FPT_TRMCTL(FPTN = FPTGrow,
             DCB = M$Window,
         STCLASS = EXT,
          TRMCTL = VLPGrow,
         VLPTYPE = WINDOW );
 
%FPT_TRMCTL(FPTN = FPTTrmCtl,   /* Set word wrap */
         STCLASS = EXT,
             DCB = M$Edit,
          TRMCTL = VLPTrmCtl,
         VLPTYPE = TRMCTL );
 
%FPT_TRMCTL(FPTN = FPTTrmCtl2,  /* Set HScroll */
         STCLASS = EXT,
             DCB = M$Edit,
          TRMCTL = VLPTrmCtl2,
         VLPTYPE = TRMCTL );
 
%FPT_TRMCTL(FPTN = FPTTrmCtlInsert,  /*  for overstrike and insert  */
         STCLASS = EXT,
             DCB = M$Edit,
          TRMCTL = VLPInsertMode,
         VLPTYPE = TRMCTL );
 
%FPT_TRMCTL(FPTN = OriginalTerminalSettings,
         STCLASS = EXT,
             DCB = M$UC,
          TRMCTL = VLPOriginalTerm,
         VLPTYPE = TRMCTL );
 
%FPT_TRMCTL(FPTN = EditWindowSettings,
         STCLASS = EXT,
             DCB = M$Edit,
          TRMCTL = VLPEditWindowSettings,
         VLPTYPE = TRMCTL );
 
%FPT_TRMCTL(FPTN = EditWindow2,
         STCLASS = EXT,
             DCB = M$Edit,
          TRMCTL = VLPEditWindow2,
         VLPTYPE = EDTCTL );
 
%VLP_WINDOW(FPTN = VLPGrow,STCLASS=EXT);  /*  grow command window  */
 
%VLP_TRMCTL(FPTN = VLPEditWindowSettings,STCLASS = EXT);
 
Dcl VLPEditWindowSettingsRedef Redef VLPEditWindowSettings Char( 16 );
 
%VLP_TRMCTL(FPTN = VLPInsertMode,STCLASS=EXT);
 
%VLP_TRMCTL(FPTN = VLPTrmCtl,STCLASS=EXT);
 
%VLP_TRMCTL(FPTN = VLPTrmCtl2,
         STCLASS = EXT,
         EDITOVR = YES,
        RETYPOVR = YES,
      INSERTMODE = NO,
     SPACEINSERT = YES,
         HSCROLL = YES,  /*  The default for horizontal scrolling  */
        HSMARGIN = 0,
         HSSHIFT = 1 );
 
%VLP_EDTCTL(FPTN = VLPEditWindow2,STCLASS=EXT);
 
Dcl VLPEditWindow2Redef Redef VLPEditWindow2 Char( 16 );
 
%VLP_TRMCTL(FPTN = VLPOriginalTerm,
         STCLASS = EXT );
 
%VLP_WINDOW(FPTN = VLPOriginalWindow,
         STCLASS = EXT );
 
%VLP_NAME ( FPTN = SAndMFid,
         STCLASS = EXT,
             LEN = 31 );
 
%VLP_NAME ( FPTN = StarUnique,
         STCLASS = EXT,
             LEN = 31 );
 
%VLP_SN   (STCLASS=EXT,FPTN=VLPOUSN);
%VLP_NAME (STCLASS=EXT,FPTN=VLPOUName);
%VLP_ACCT (STCLASS=EXT,FPTN=VLPOUAcct);
%VLP_PASS (STCLASS=EXT,FPTN=VLPOUPass);
%VLP_WSN  (STCLASS=EXT,FPTN=VLPOUWSN);
%VLP_SN   (STCLASS=EXT,FPTN=VLPSISN);
%VLP_NAME (STCLASS=EXT,FPTN=VLPSIName);
%VLP_ACCT (STCLASS=EXT,FPTN=VLPSIAcct);
%VLP_PASS (STCLASS=EXT,FPTN=VLPSIPass);
%VLP_WSN  (STCLASS=EXT,FPTN=VLPSIWSN);
%VLP_SN   (STCLASS=EXT,FPTN=VLPSISNBack);
%VLP_NAME (STCLASS=EXT,FPTN=VLPSINameBack);
%VLP_ACCT (STCLASS=EXT,FPTN=VLPSIAcctBack);
%VLP_PASS (STCLASS=EXT,FPTN=VLPSIPassBack);
%VLP_WSN  (STCLASS=EXT,FPTN=VLPSIWSNBack);
%VLR_FID  (STCLASS=EXT,FPTN=VLRFidRes);
 
%VLP_LINEATTR( FPTN = VLPLineAttr, STCLASS = EXT );
 
%VLP_HDR( FPTN = EOF,
         TITLE = %EofMarker,
       STCLASS = EXT );
 
Dcl Version Char(4) Ext CAligned Init( %Version );
 
/*
   Dcbs
*/
Dcl M$ME     Dcb;     /* Me... */
Dcl M$LM     Dcb;     /* load module */
Dcl M$SI     Dcb;     /* Edit file */
Dcl M$Edit   Dcb;     /* Screen edit window */
Dcl M$Com    Dcb;     /* Command window */
Dcl M$Imp    Dcb;     /* IMP file with key defs */
Dcl M$Block  Dcb;     /* Temporary block file  */
Dcl M$Block2 Dcb;     /* Temporary block file  */
Dcl M$OU     Dcb;     /* Output file for rekeying */
Dcl M$Window Dcb;     /* Big command window on bottom */
 
Dcl M$UC# UBin(18) Ext Init(DcbNum( M$UC ));
Dcl M$ME# UBin(18) Ext Init(DcbNum( M$ME ));
Dcl M$LM# UBin(18) Ext Init(DcbNum( M$LM ));
Dcl M$SI# UBin(18) Ext Init(DcbNum( M$SI ));
Dcl M$Edit# UBin(18) Ext Init(DcbNum( M$Edit ));
Dcl M$Com# UBin(18) Ext Init(DcbNum( M$Com ));
Dcl M$Imp# UBin(18) Ext Init(DcbNum( M$Imp ));
Dcl M$Block# UBin(18) Ext Init(DcbNum( M$Block ));
Dcl M$Block2# UBin(18) Ext Init(DcbNum( M$Block2 ));
Dcl M$OU# UBin(18) Ext Init(DcbNum( M$OU ));
Dcl M$Window# UBin(18) Ext Init(DcbNum( M$Window ));
 
Dcl M$UC$     Ptr Ext;
Dcl M$ME$     Ptr Ext;
Dcl M$LM$     Ptr Ext;
Dcl M$SI$     Ptr Ext;
Dcl M$Edit$   Ptr Ext;
Dcl M$Com$    Ptr Ext;
Dcl M$Imp$    Ptr Ext;
Dcl M$Block$  Ptr Ext;
Dcl M$Block2$ Ptr Ext;
Dcl M$OU$     Ptr Ext;
Dcl M$Window$ Ptr Ext;
 
Dcl Mode UBin Byte Ext;
Dcl NumberOfRecs UBin Word Ext;
%Equ _Esc = BinAsc(27);
%Equ _Bracket = '[';
Dcl CSI Char(2) Ext Init( %Concat( _Esc, _Bracket ) );
Dcl 1 SIKey Ext,/* key for edit file */
    2 Len UBin(9)  Unal,
    2 Key UBin(27) Unal;
 
Dcl 1 OUKey Ext,/* key for output file When rekeying */
    2 Len UBin(9)  Unal,
    2 Key UBin(27) Unal;
 
Dcl 1 DelKeyStart Ext,
    2 Len UBin(9) Unal,
    2 Key UBin(27) Unal;
 
Dcl 1 DelKeyEnd Ext,
    2 Len UBin(9) Unal,
    2 Key UBin(27) Unal;
 
/* Active file list */
 
Dcl Buffers$ Ptr Ext;
Dcl 1 Buffers(0:0) Based (Buffers$) WAligned,
    2 PrimaryFid,
      3 Fid,
        4 SetX UBin(18) CAligned,  /* specifies which packset */
        4 Name#,
          5 L Ubin(9) Unal,
          5 C Char(31) CAligned,
        4 Acct# Char(8) CAligned,
      3 PSN# Char(6) CAligned,
    2 SecondaryFid Char(8) CAligned,  /*  if there's a workfile  */
    2 CurrentPos,
      3 Column UBin Word CAligned,
      3 Key,
        4 Len UBin(9) CAligned,
        4 Key UBin(27) CAligned,
    2 Spots Char(88) CAligned, /* 11 spots, 2 word/spot, 4 char/word */
    2 Block,
      3 PosStart UBin Word CAligned,
      3 KeyStart,
        4 Len UBin(9) CAligned,
        4 Key UBin(27) CAligned,
      3 PosEnd UBin Word CAligned,
      3 KeyEnd,
        4 Len UBin(9) CAligned,
        4 Key UBin(27) CAligned,
    2 Status,
      3 InputOnly Bit(1) Unal,
      3 StripBlanks Bit(1) Unal,
      3 Sequen Bit(1) Unal,
      3 DeleteWork Bit(1) Unal,
      3 WorkMissing Bit(1) Unal,
      3 Encrypted Bit(1) Unal,
      3 NewFile Bit(1) Unal,
      3 Changed Bit(1) Unal,
      3 * Bit(28) Unal,      /* reserved */
    2 EdtCtl Char( 16 ) CAligned,
    2 TrmCtl Char( 16 ) CAligned,
    2 Password# Char( 8 ) CAligned,
    2 Tabs,
      3 Margin# UBin(9) CAligned,
      3 Tabs# Char(31) CAligned,
    2 * UBin Word WAligned,  /* reserved */
    2 * UBin Word WAligned,  /* reserved */
    2 * UBin Word WAligned;  /* reserved */
 
Dcl Buffers# UBin Word Ext Unal Init(0);  /* # of buffers in use */
Dcl CurrentBuffer# SBin Word Ext Unal Init(0); /* current buffer # */
Dcl MaxBuffers# UBin Word Ext Unal;
Dcl CurrentPages# UBin Word Ext Unal;
Dcl Seeds(0:1023) Bit(36) Ext Unal;
Dcl SavedSize UBin Word Ext Unal Init(0);  /*  for SAndM Block  */
Dcl 1 SpecialContext Ext WAligned,
    2 SavedSize UBin Word,
    2 Direction Bit(1) Unal,
    2 FindWord,
      3 Len UBin CAligned,
      3 Words Char(71) CAligned,
    2 Replacement,
      3 Len UBin CAligned,
      3 Words Char(71) CAligned,
    2 LastOperation UBin Word,
    2 Options Char(72) CAligned,
    2 Flags,
      3 KeepNewMT Bit(1) Unal,
      3 AlwaysUseWork Bit(1) Unal,
      3 * Bit(34) Unal,      /* reserved */
    2 Type Char(2) CAligned,
    2 * Bit(18) Unal;        /* reserved */
 
/* Shadow cache */
 
Dcl Cache( 0:%MaxCacheIndex ) UBin Word Ext;
Dcl CacheStream Redef Cache Char( %( 4 * CacheSize ) );
Dcl LastCacheEntry SBin Word Ext;
Dcl CacheSize UBin Word Ext Init( %CacheSize );
Dcl MaxCacheIndex UBin Word Ext;
Dcl AllBut4Bytes UBin Word Ext;
Dcl AllBut8Bytes UBin Word Ext;
 
/* Search stuff */
Dcl LastOperation UBin Ext Init(0); /* 0=none, 1=find, 2=replace */
Dcl 1 FindWord Ext,
    2 Len UBin Init(1),
    2 Words Char( 71 ) Init(' ');
 
Dcl 1 Replacement Ext,
    2 Len UBin Init(1),
    2 Words Char( 71 ) Init(' ');
 
Dcl FinOps    Char( 71 ) Ext Init(' ');
Dcl RepOps    Char( 71 ) Ext Init(' ');
Dcl WildChar  Char( 0 ) Ext Init ( %BinAsc( 1 ) );
 
Dcl Fid Char(92) Ext;
Dcl OutLine Char(9) Ext;
Dcl ComChar Char(1) Ext;
Dcl ComLine Char(255) Ext;
Dcl ComLine1 Char(30) Ext;
Dcl ComLine2 Char(255) Ext;
Dcl ComLine3 Char(70) Ext;
Dcl ImpBuf Char(511) Ext;
Dcl StartUpLine Char(511) Ext;
Dcl StartUp# UBin Ext Init(0);
Dcl ExitLine Char(511) Ext;
Dcl Exit# UBin Ext Init(0);
Dcl CmdOpenLine Char(511) Ext;
Dcl CmdOpen# UBin Ext Init(0);
Dcl CmdCloseLine Char(511) Ext;
Dcl CmdClose# UBin Ext Init(0);
Dcl UniqueLine Char( %BufSize ) Ext Init(' ');
Dcl UCLine Char( %BufSize ) Ext Init(' ');
Dcl SILine Char( %BufSize ) Ext Init(' ');
Dcl SILineBits(0:%(BufSize/4-1)) ReDef SILine Bit(36);
Dcl UCKey UBin Word Ext;       /* key of rec in FEP */
Dcl SIARS# UBin Ext Unal;
Dcl FidFieldWidth# UBin Ext;
Dcl Done Bit(1) Ext Unal init( %False );  /* exit program? */
Dcl EOFinFEP Bit(1) Ext Unal Init( %False );
Dcl RestoreOK Bit(1) Ext Unal Init( %False );
Dcl AlwaysUseWorkFlag Bit(1) Ext Unal init( %False );
Dcl StripFlag Bit(1) Ext Unal init ( %True );  /*  strip blanks  */
Dcl KeepNewMT Bit(1) Ext Unal init ( %True );  /* don't delete new empty files */
Dcl MakeItKeyed Bit(1) Ext Unal Init( %False );
Dcl FieldOrientedTerminal Bit(1) Ext Unal Init( %False );
Dcl PutAwayDone Bit(1) Ext Unal Init( %True );  /* used in XCon */
Dcl ForwardSearch Bit(1) Ext Unal init( %True ); /* search direction */
/*
      Break flags for use with Resume and M$SI procedures
*/
Dcl UnsafeFlag Bit(1) EXT Unal Init( %False );
Dcl BrokenFlag Bit(1) EXT Unal Init( %False );
 
/* Remember... */
 
Dcl WhereToGo Remember EXT;
Dcl NewCommand Remember EXT;
