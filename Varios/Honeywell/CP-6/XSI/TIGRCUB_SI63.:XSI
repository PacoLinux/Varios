/*M* TIGRCUB_SI63 - OPTIONAL PARSE HANDLING FOR TIGRCUB.X */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* DMR,PLM=5,IND=5,CTI=5,SDI=5,MCL=10,CSI=0,ECI=0 */
                                   /*
                                        Author: J.L.Joseph, LADC
                                        Date: 2/86
                                                                  */
%SET LISTSUB='1'B;
 
CUBOPTS: PROC ALTRET;
 
 
                                   /*
                                        INCLUDEs here
                                                                  */
     %INCLUDE CP_6;
     %INCLUDE CP_6_SUBS;
 
                                   /*
                                        DCBs defined here
                                                                  */
DCL M$UI DCB;
DCL M$DO DCB;
 
                                   /*
                                        EXTERNALs
                                                                  */
DCL CUBPARSER ENTRY ALTRET;
 
                                   /*
                                        Local STATIC storage
                                                                  */
 
DCL INBUF CHAR(80) STATIC SYMDEF;
DCL WARN_MSG CHAR(80) SYMREF;
DCL TIGRCUB_INBUF CHAR(80) SYMREF;
DCL ANY_ERRORS BIT(1) ALIGNED SYMREF;
DCL ANY_UI BIT(1) ALIGNED SYMREF;
DCL I SBIN WORD STATIC ALIGNED INIT(0);
DCL J SBIN WORD STATIC ALIGNED INIT(0);
DCL K SBIN WORD STATIC ALIGNED INIT(0);
DCL L SBIN WORD STATIC ALIGNED INIT(0);
 
DCL M$UI$ PTR STATIC;
 
%EJECT;
                                   /*
                                        I/O FPTs here
                                                                  */
     %FPT_READ      (FPTN=READ_INBUF,
                         BUF=INBUF,
                         DCB=M$UI);
 
     %FPT_WRITE     (FPTN=WRITE_DO_MSG,
                         BUF=WARN_MSG,
                         DCB=M$DO,
                         WAIT=YES);
 
 
                                   /*
                                        BASED definitions
                                                                  */
     %F$DCB;
 
%EJECT;
 
/* ************************************************************
   ***                                                      ***
   ***  Begin  CUBOPTS  options routine                     ***
   ***                                                      ***
   ************************************************************ */
 
     M$UI$ = DCBADDR(DCBNUM(M$UI));
     ANY_UI = '0'B;
     L = 0;
 
     IF M$UI$->F$DCB.AMR# = '0'B        /* NO ASSIGNMENT FOR M$UI? */
     THEN
     DO;
          WARN_MSG = '....fyi: no system default file encountered';
          CALL M$WRITE (WRITE_DO_MSG);
          RETURN;
        END;
 
TOP_LOOP: ;
     INBUF=' ';
     CALL M$READ (READ_INBUF)
     WHENALTRETURN                      /* STUPIDLY ASSUME EOF HIT */
     DO;
          IF ANY_ERRORS
          THEN
               ALTRETURN;
          ELSE DO;
               IF L>0
               THEN
                    ANY_UI = '1'B;
               RETURN;
             END;
        END;
     TIGRCUB_INBUF = ' ';
     TIGRCUB_INBUF = INBUF;
     CALL CUBPARSER
     WHENRETURN DO;
          L=L+1;
        END;
     WHENALTRETURN DO;
          ANY_ERRORS = '1'B;
          ALTRETURN;
        END;
 
     GOTO TOP_LOOP;
 
END CUBOPTS;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
 
/*M* CUBPARSER - ACTUAL PARSING OF TIGRCUB DEFAULT COMMANDS */
/*X* DMR,PLM=5,IND=5,CTI=5,SDI=5,MCL=10,CSI=0,ECI=0 */
                                   /*
                                        Author: J.L.Joseph, LADC
                                        Date: 2/86
                                                                  */
%SET LISTSUB='1'B;
 
CUBPARSER: PROC ALTRET;
 
 
                                   /*
                                        INCLUDEs here
                                                                  */
     %INCLUDE CP_6;
     %INCLUDE CP_6_SUBS;
 
     %INCLUDE XU_MACRO_C;
     %INCLUDE XU_SUBS_C;
     %INCLUDE XU_PERR_C;
 
     %INCLUDE B$JIT_C;
     %INCLUDE B_ERRORS_C;
     %INCLUDE B_STRINGS_C;              /* HW_TYPE %EQUs */
     %INCLUDE HF_DATA_R;
 
     %INCLUDE IT$CONFIG;
          %IT$CONFIG (NAME=IT_CONFIG,STCLASS=SYMREF);
 
 
DCL 1 FM_SYSDP SYMREF,                  /* THIS FORM MAKES IT EASY FOR BOOT   */
         2 PORT UBIN(9) UNAL,
         2 CHN UBIN(9) UNAL,
         2 DVN UBIN(9) UNAL,
         2 * UBIN(9) UNAL;
DCL 1 FM_POTAPE SYMREF,                 /* THIS FORM MAKES IT EASY FOR BOOT   */
         2 PORT UBIN(9) UNAL,
         2 CHN UBIN(9) UNAL,
         2 DVN UBIN(9) UNAL,
         2 * UBIN(9) UNAL;
DCL S_PORTNR SBIN SYMREF;
DCL MM_PCORE SBIN SYMREF;
                                   /*
                                        DCBs defined here
                                                                  */
DCL M$DO DCB;
 
                                   /*
                                        EXTERNALs
                                                                  */
DCL CUB_NODES SBIN WORD SYMREF;
DCL X$PARSE ENTRY(1) ALTRET;
DCL OUTPUT ENTRY(2);
 
                                   /*
                                        Local STATIC storage
                                                                  */
 
DCL OUTBUF CHAR(94) STATIC SYMDEF;
DCL TIGRCUB_INBUF CHAR(80) STATIC SYMDEF;
DCL WARN_MSG CHAR(80) STATIC SYMDEF;
DCL ANY_ERRORS BIT(1) ALIGNED STATIC SYMDEF;
DCL I SBIN WORD STATIC ALIGNED INIT(0);
DCL J SBIN WORD STATIC ALIGNED INIT(0);
DCL K SBIN WORD STATIC ALIGNED INIT(0);
DCL L SBIN WORD STATIC ALIGNED INIT(0);
 
DCL CUB_WORKSPACE(0:99) SBIN WORD STATIC SYMDEF;
 
DCL DISPLAY_DCT  BIT(1) ALIGNED STATIC SYMDEF INIT('0'B);
DCL DISPLAY_MON  BIT(1) ALIGNED STATIC SYMDEF INIT('0'B);
DCL DISPLAY_DQH  BIT(1) ALIGNED STATIC SYMDEF INIT('0'B);
 
%EJECT;
                                   /*
                                        I/O FPTs here
                                                                  */
     %FPT_WRITE     (FPTN=WRITE_DO_MSG,
                         BUF=WARN_MSG,
                         DCB=M$DO,
                         WAIT=YES);
 
     %P_PCB         (NAME=CUB_PCB,
                         STCLASS="STATIC SYMDEF",
                         R=NIL,
                         W=CUB_WORKSPACE,
                         U$=NIL,
                         WSZ=100,
                         N#=0);
 
 
                                   /*
                                        BASED definitions
                                                                  */
     %F$DCB;
 
     %PARSE$SYM     (NAME=CUB$SYM,
                         STCLASS="BASED");
 
     %PARSE$OUT     (NAME=CUB$OUTBLK,
                         STCLASS="BASED");
 
     %B$TCB;
 
     %B$ALT;
 
%SUB B$ALT=B$TCB$->B$TCB.ALT$->B$ALT;
%SUB YES='1'B;
%SUB NO='0'B;
 
%EJECT;
 
/* ************************************************************
   ***                                                      ***
   ***  Begin  CUBPARSER  options parsing routine           ***
   ***                                                      ***
   ************************************************************ */
 
     CUB_PCB.ROOT$ = ADDR(CUB_NODES);
     CUB_PCB.TEXT$ = ADDR(TIGRCUB_INBUF);
     CUB_PCB.NCHARS = SIZEC(TIGRCUB_INBUF);
     OUTBUF = '..default..  ';
     SUBSTR(OUTBUF,14,80) = TIGRCUB_INBUF;
     CALL OUTPUT (OUTBUF,80);
 
     CALL X$PARSE (CUB_PCB)
     WHENALTRETURN
     DO;
          WARN_MSG = '*** bad syntax on system default command';
          ANY_ERRORS = '1'B;
          CALL M$WRITE (WRITE_DO_MSG);
          ALTRETURN;
        END;
 
 
     DO I = 0 TO CUB_PCB.OUT$ -> CUB$OUTBLK.NSUBLKS - 1;
 
          DO CASE (CUB_PCB.OUT$ -> CUB$OUTBLK.SUBLK$(I) ->
               CUB$OUTBLK.CODE);
 
          CASE (1);                     /* CONSOLE CMD */
             IF  CUB_PCB.OUT$ -> CUB$OUTBLK.SUBLK$(I) ->
                  CUB$OUTBLK.NSUBLKS   = 2
             THEN J = 1;
             ELSE J = 0;
             CALL CHARBIN (L,
                  CUB_PCB.OUT$ -> CUB$OUTBLK.SUBLK$(I) ->
                  CUB$OUTBLK.SUBLK$(J) -> CUB$SYM.TEXT);
             IT_CONFIG.SC01.CHAN = L;
 
          CASE (2);                     /* SYSDP CMD */
             CALL CHARBIN (L,
                  CUB_PCB.OUT$ -> CUB$OUTBLK.SUBLK$(I) ->
                  CUB$OUTBLK.SUBLK$(1) -> CUB$SYM.TEXT);
             FM_SYSDP.CHN = L;
             IT_CONFIG.DC01.CHAN = L;
             CALL CHARBIN (L,
                  CUB_PCB.OUT$ -> CUB$OUTBLK.SUBLK$(I) ->
                  CUB$OUTBLK.SUBLK$(2) -> CUB$SYM.TEXT);
             FM_SYSDP.DVN = L;
             IT_CONFIG.DP01.DVN = L;
 
             IT_CONFIG.DP01.DVC_CODE = 999;
 
             IF CUB_PCB.OUT$ -> CUB$OUTBLK.SUBLK$(I) ->
                  CUB$OUTBLK.SUBLK$(3) -> CUB$SYM.TEXT = '451'
             THEN
                  IT_CONFIG.DP01.DVC_CODE = 0;
 
             IF CUB_PCB.OUT$ -> CUB$OUTBLK.SUBLK$(I) ->
                  CUB$OUTBLK.SUBLK$(3) -> CUB$SYM.TEXT = '501'
             THEN
                  IT_CONFIG.DP01.DVC_CODE = 208;
 
             IF CUB_PCB.OUT$ -> CUB$OUTBLK.SUBLK$(I) ->
                  CUB$OUTBLK.SUBLK$(3) -> CUB$SYM.TEXT = '509'
             THEN
                  IT_CONFIG.DP01.DVC_CODE = 208;
 
             IF CUB_PCB.OUT$ -> CUB$OUTBLK.SUBLK$(I) ->
                  CUB$OUTBLK.SUBLK$(3) -> CUB$SYM.TEXT = '3380' /* MODEL D */
             THEN
                  IT_CONFIG.DP01.DVC_CODE = 48;
 
             IF CUB_PCB.OUT$ -> CUB$OUTBLK.SUBLK$(I) ->
                  CUB$OUTBLK.SUBLK$(3) -> CUB$SYM.TEXT = '3381' /* MODEL E */
             THEN
                  IT_CONFIG.DP01.DVC_CODE = 64;
 
             IF CUB_PCB.OUT$ -> CUB$OUTBLK.SUBLK$(I) ->
                  CUB$OUTBLK.SUBLK$(3) -> CUB$SYM.TEXT = '3390' /* MODEL J */
             THEN
                  IT_CONFIG.DP01.DVC_CODE = 352; /* 22 x 16 */
 
             IF CUB_PCB.OUT$ -> CUB$OUTBLK.SUBLK$(I) ->
                  CUB$OUTBLK.SUBLK$(3) -> CUB$SYM.TEXT = '3391' /* MODEL K */
             THEN
                  IT_CONFIG.DP01.DVC_CODE = 336; /* 21 x 16 */
 
             IF CUB_PCB.OUT$ -> CUB$OUTBLK.SUBLK$(I) ->
                  CUB$OUTBLK.SUBLK$(3) -> CUB$SYM.TEXT = '8082' /* MDS I */
             THEN
                  IT_CONFIG.DP01.DVC_CODE = 80; /* 5 x 16 */
 
             IF CUB_PCB.OUT$ -> CUB$OUTBLK.SUBLK$(I) ->
                  CUB$OUTBLK.SUBLK$(3) -> CUB$SYM.TEXT = '8092' /* MDS II*/
             THEN
                  IT_CONFIG.DP01.DVC_CODE = 112; /* 7 x 16 */
 
 
             IF IT_CONFIG.DP01.DVC_CODE = 999
             THEN
             DO;
                  WARN_MSG = '*** bad disk type specified';
                  ANY_ERRORS = '1'B;
                  CALL M$WRITE (WRITE_DO_MSG);
                END;                    /* DO IF ERROR FND */
 
          CASE (3);                     /* SYSPO CMD */
             CALL CHARBIN (L,
                  CUB_PCB.OUT$ -> CUB$OUTBLK.SUBLK$(I) ->
                  CUB$OUTBLK.SUBLK$(1) -> CUB$SYM.TEXT);
             FM_POTAPE.CHN = L;
             IT_CONFIG.TC01.CHAN = L;
             CALL CHARBIN (L,
                  CUB_PCB.OUT$ -> CUB$OUTBLK.SUBLK$(I) ->
                  CUB$OUTBLK.SUBLK$(2) -> CUB$SYM.TEXT);
             FM_POTAPE.DVN = L;
             IT_CONFIG.MT01.DVN = L;
             IT_CONFIG.MT02.DVN = L+1;
 
          CASE (4);                     /* SYSLP CMD */
             IF  CUB_PCB.OUT$ -> CUB$OUTBLK.SUBLK$(I) ->
                  CUB$OUTBLK.NSUBLKS   = 2
             THEN J = 1;
             ELSE J = 0;
             CALL CHARBIN (L,
                  CUB_PCB.OUT$ -> CUB$OUTBLK.SUBLK$(I) ->
                  CUB$OUTBLK.SUBLK$(J) -> CUB$SYM.TEXT);
             IT_CONFIG.LP01.CHAN = L;
 
          CASE (5);                     /* SYSCR CMD */
             IF  CUB_PCB.OUT$ -> CUB$OUTBLK.SUBLK$(I) ->
                  CUB$OUTBLK.NSUBLKS   = 2
             THEN J = 1;
             ELSE J = 0;
             CALL CHARBIN (L,
                  CUB_PCB.OUT$ -> CUB$OUTBLK.SUBLK$(I) ->
                  CUB$OUTBLK.SUBLK$(J) -> CUB$SYM.TEXT);
             IT_CONFIG.CR01.CHAN = L;
 
          CASE (6);                     /* CPU CMD */
             CALL CHARBIN (L,
                  CUB_PCB.OUT$ -> CUB$OUTBLK.SUBLK$(I) ->
                  CUB$OUTBLK.SUBLK$(0) -> CUB$SYM.TEXT);
             S_PORTNR = L;
 
          CASE (7);                     /* URC CMD */
             CALL CHARBIN (L,
                  CUB_PCB.OUT$ -> CUB$OUTBLK.SUBLK$(I) ->
                  CUB$OUTBLK.SUBLK$(1) -> CUB$SYM.TEXT);
             IT_CONFIG.UC01.CHAN = L;
 
          CASE (8);                     /*FEP CMD*/
             IF  CUB_PCB.OUT$ -> CUB$OUTBLK.SUBLK$(I) ->
                  CUB$OUTBLK.NSUBLKS   = 2
             THEN J = 1;
             ELSE J = 0;
 
             CALL CHARBIN (L,
                  CUB_PCB.OUT$ -> CUB$OUTBLK.SUBLK$(I) ->
                  CUB$OUTBLK.SUBLK$(J) -> CUB$SYM.TEXT);
             IT_CONFIG.FEP1.CHAN = L;
 
          CASE (9);                     /*TAPEFW CMD*/
 
             IT_CONFIG.TC01.FWNAME =
                  CUB_PCB.OUT$ -> CUB$OUTBLK.SUBLK$(I) ->
                  CUB$OUTBLK.SUBLK$(0) -> CUB$SYM.TEXT;
 
          CASE (10);                    /*DISKFW CMD*/
 
             IT_CONFIG.DC01.FWNAME =
                  CUB_PCB.OUT$ -> CUB$OUTBLK.SUBLK$(I) ->
                  CUB$OUTBLK.SUBLK$(0) -> CUB$SYM.TEXT;
 
          CASE (11);                    /*URCFW CMD*/
 
             IT_CONFIG.UC01.FWNAME =
                  CUB_PCB.OUT$ -> CUB$OUTBLK.SUBLK$(I) ->
                  CUB$OUTBLK.SUBLK$(0) -> CUB$SYM.TEXT;
 
          CASE (12);                    /*HW TYPE CMD*/
 
             DO CASE (CUB_PCB.OUT$->CUB$OUTBLK.SUBLK$(I) ->
                  CUB$OUTBLK.SUBLK$(0) -> CUB$OUTBLK.CODE);
             CASE(2); HW_TYPE=0;
             CASE(1); HW_TYPE=%DPS90XA;
             CASE(0); HW_TYPE=%DPS8000;
                         /* NOTE!  THIS CODE STOLEN DIRECTLY FROM ITT$TIGR! */
                         /* IT'S PROBABLY GONNA NEED TO BE RESTOLEN IN THE  */
                         /* NOT-TOO-DISTANT FUTURE!!!                       */
/**/
/*    Set hardware flags based on HW_TYPE from AARDVARK */
/**/
                DO CASE (HW_TYPE);
                CASE (%L66);            /* and all other "old" cpu types */
                   HW_PTB_UNITS = 64;
                   HW_IOPTP_UNITS = 64;
                   HW_WSQ0PT = '0'B;
                   HW_LOAD_FW = '1'B;
                   HW_TIME_LEGAL = '1'B;
                   HW_SECT_PT = '0'B;
                   HW_FRAG_PT = '1'B;
                   HW_IOP = '0'B;
                   HW_EXT_STATUS = '0'B;
                   HW_SMART_CACHE = '0'B;
                   HW_ES = '0'B;
                   HW_EI = '0'B;
                   HW_PROG_SCU = '1'B;
                   HW_EDAC = '1'B;
                   HW_FLTIC_OK = '0'B;
                   HW_NORM_CLOCK = '1'B;
                   HW_CHANS = 64;
                   HW_IMX = '0'B;
                CASE (%DPS90);
                   HW_PTB_UNITS = 64;
                   HW_IOPTP_UNITS = 64;
                   HW_WSQ0PT = '1'B;
                   HW_LOAD_FW = '0'B;
                   HW_TIME_LEGAL = '0'B;
                   HW_SECT_PT = '0'B;
                   HW_FRAG_PT = '1'B;
                   HW_IOP = '1'B;
                   HW_EXT_STATUS = '1'B;
                   HW_SMART_CACHE = '1'B;
                   HW_ES = '1'B;
                   HW_EI = '0'B;
                   HW_PROG_SCU = '0'B;
                   HW_EDAC = '0'B;
                   HW_FLTIC_OK = '1'B;
                   HW_NORM_CLOCK = '0'B;
                   H_S1000_FLG = '1'B;
                   HW_CHANS = 64;
                   HW_IMX = '0'B;
                   H_ENMASK = '777777777760'O;
                   H_DSMASK = '000000000000'O;
                CASE (%DPS90XA);
                   HW_PTB_UNITS = 1024;
                   HW_IOPTP_UNITS = 64;
                   HW_WSQ0PT = '1'B;
                   HW_LOAD_FW = '0'B;
                   HW_TIME_LEGAL = '0'B;
                   HW_SECT_PT = '1'B;
                   HW_FRAG_PT = '1'B;
                   HW_IOP = '1'B;
                   HW_EXT_STATUS = '1'B;
                   HW_SMART_CACHE = '1'B;
                   HW_ES = '1'B;
                   HW_EI = '0'B;
                   HW_PROG_SCU = '0'B;
                   HW_EDAC = '0'B;
                   HW_FLTIC_OK = '1'B;
                   HW_NORM_CLOCK = '0'B;
                   H_S1000_FLG = '1'B;
                   HW_CHANS = 64;
                   HW_IMX = '0'B;
                   H_ENMASK = '777777777760'O;
                   H_DSMASK = '000000000000'O;
                CASE (%DPS8000);
                   HW_PTB_UNITS = 1024;
                   HW_IOPTP_UNITS = 1;
                   HW_WSQ0PT = '0'B;
                   HW_LOAD_FW = '1'B;
                   HW_TIME_LEGAL = '1'B;
                   HW_SECT_PT = '1'B;
                   HW_FRAG_PT = '0'B;
                   HW_IOP = '0'B;
                   HW_EXT_STATUS = '1'B;
                   HW_SMART_CACHE = '1'B;
                   HW_ES = '1'B;
                   HW_EI = '1'B;
                   HW_PROG_SCU = '0'B;
                   HW_EDAC = '1'B;      /*?*/
                   HW_FLTIC_OK = '0'B;
                   HW_NORM_CLOCK = '1'B;
                   H_RPM_FLG = '1'B;
                   HW_CHANS = 128;
                   HW_IMX = '1'B;
                   H_ENMASK='303400000000'O;
                   H_DSMASK='001400000000'O;
                END;
             END;
 
          CASE (13);                    /*BOOT IOM COMMAND */
 
             CALL CHARBIN (L,
                  CUB_PCB.OUT$->CUB$OUTBLK.SUBLK$(I) ->
                  CUB$OUTBLK.SUBLK$(0) -> CUB$SYM.TEXT);
             IT_CONFIG.IOM.PORT = L;
             FM_SYSDP.PORT = L;
             FM_POTAPE.PORT = L;
 
          CASE (14);                    /*PHYSMEM CMD*/
 
             CALL CHARBIN (L,
                  CUB_PCB.OUT$ -> CUB$OUTBLK.SUBLK$(I) ->
                  CUB$OUTBLK.SUBLK$(0) -> CUB$SYM.TEXT);
             MM_PCORE = L-1;
 
          CASE (15);                    /*DISPLAY COMMAND */
 
             DO CASE (CUB_PCB.OUT$->CUB$OUTBLK.SUBLK$(I) ->
                  CUB$OUTBLK.SUBLK$(0) -> CUB$OUTBLK.CODE);
             CASE(0);                   /* -- DISPLAY DCT COMMAND -- */
                DISPLAY_DCT = YES;
 
             CASE(1);                   /* -- DISPLAY MON COMMAND -- */
                DISPLAY_MON = YES;
 
             CASE(2);                   /* -- DISPLAY DQH COMMAND -- */
                DISPLAY_DQH = YES;
 
             END;                       /* DO CASE ON DISPLAY .CODE */
 
          END;                          /* DO CASE ON PARSE.NCODE */
 
        END;                            /* DO I = 0 TO NSUBLKS - 1 */
 
     RETURN;
 
 
 
END CUBPARSER;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
OUTPUT: PROC (STR,LEN);
 
DCL M$LO DCB;
DCL STR CHAR(1);
DCL LEN SBIN;
DCL T SBIN;
 
%INCLUDE CP_6;
 
     %FPT_WRITE (FPTN=DO_IT,
                    DCB=M$LO);
 
     IF LEN=0 THEN
          DO_IT.BUF_ = VECTOR(NIL);
     ELSE
     DO;
          DO_IT.BUF_.BUF$ = ADDR(STR);
          T = LEN;
          DO WHILE (SUBSTR(STR,T-1,1) = ' ' AND T>2);
               T=T-1;
             END;
          DO_IT.BUF_.BOUND = T - 1;
        END;
 
     CALL M$WRITE (DO_IT);
 
     RETURN;
 
END OUTPUT;
