   FOREST is a program that prints out information that is useful in
understanding the call structure of a program.  Such information is useful if
you are trying to familiarize yourself with a program or construct an overlay
structure for it.
 
   FOREST works by looking at the object files that form the program you wish
to look at.
To use FOREST type:
 
!FOREST.X  std_file OVER lemur_commands,output (options)
 
std_file is a file containing object file names (one per line, left justified)
read through F$5.  Once all the filenames have been read, FOREST processes the
object files and generates output on F$6.  The OVERLAY option writes LEMUR
commands to F$3.
                                        (type ? for more)
 
   It is not necessary to input all the object files that form a program.
Object units that are not DEF'ed do not show up in FOREST output; therefore if
an object file is left out the routines that are DEF'ed in it will simply not
appear anywhere in the output.  This is a useful feature as you can "leave out"
an object file that contains routines you are not interested in and get a
reduction in the amount of output from FOREST.
 
   FOREST produces the following output in the following order.
 
1)                  (Optional)
      A list all DEF'ed routines, their sizes and the common blocks
      they REF.  The size of a routine is the sum of the code,
      constants and static data that it has.  This output is
      controlled by the SIZES option.
 
2)    A list of all DEF'ed routines crossreferenced with the
      routines that call them.  Output is controlled by the
      WHO_CALLS_WHO option.
 
3)    A list of all DEF'ed routines crossreferenced with the
      routines that they call.  Output is controlled by the
      WHO_WHO_CALLS option.
 
4)                   (Optional)
         A maximum overlay structure.  This is a structure that
      represents the maximum amount of overlaying that could
      be done on the program.  Obviously it will be a multilevel
      overlay, but by collapsing overlay nodes together a
      smaller overlay can be produced.
         A one level overlay structure.  This is just the maximum
      overlay structure modified by collapsing lower level nodes
      into their corresponding first level nodes.
         A set of LEMUR EXTRACT commands for producing the one
      level overlay structure.  This is output through F$3.
      With these commands overlaying a program becomes trivial.
      Basically you put all your object units into one file and
      than use the EXTRACT commands to create an object file
      for each node in the overlay.  These are then linked together
      to form the overlayed rununit.  One potential problem here
      is that FOREST will not produce an EXTRACT command for a
      FORTRAN BLOCK DATA subroutine (because it is not called) so
      you must add your own EXTRACT commands for such routines.
         This is optional and the OVERLAY option must be used to
      get it.
 
5)    A list of routines that are defined but not referenced
      anywhere.  Usually this will point out routines that are not
      needed.  If a routine contains SYMDEFs or EXT, EXTROOT variables
      that are initialzed then it is still an essential part of the
      program even if it is not called.
 
6)                   (Optional)
         A call tree that shows graphically who calls who.  A few
      special symbols appear in this graph.
            '|'      indicates the end of a path
            '*'      indicates that a routine calls itself recursively
         This is optional and the CALL_TREE option must be used to get
      it.  Use of this option is not recommended for large programs
      because the output is simply too large to be of any use to you.
 
7)                   (Optional)
      A list of routines that are indirectly recursive.  This output
      is controlled by the RECURSIVE option.
HELP file for: FOREST.X
 **************************************************************
 *                                                            *
 *  Copyright (c) Bull HN Information Systems Inc., 1989      *
 *                                                            *
 **************************************************************
851017
Maximum number of entry points increased due to use of dynamic memory.  Options
are accepted from the command line only now (the old kludge method has be
excised).
07/25/83
Installed in LADC X account.
CHANGES
FOREST Limitations
------ -----------
 
Forest has limitations with regard to routines passed as arguments (type !HELP
(FOREST.LIB) LIMITATIONS ARGUMENTS), in detecting direct recursion (type !HELP
(FOREST.LIB) LIMITATIONS RECURSION), and with the PL6 option NOAUTO (type
!HELP(FOREST.LIB) LIMITATIONS NOAUTO).  Or to get all the limitations just type
?? after this.
   FOREST expects to find all the REF/DEF information it needs in the object
files that are supplied to it.  Unfortunately this is not the case when certain
language constructs are used.
   Some languages allow functions or subroutines to be passed as arguments to a
routine.  A routine that is passed another routine effectively REF's that
routine.  Unfortunately, this information will not be found in the object file.
Therefore, FOREST will "miss" the REF definition and produce incomplete/
incorrect output.
   Recursive routines are another problem.  If a routine calls itself the CP6
object generation routines 'optimize' this by generating relocation information
to cause a TSX1 to the beginning of the routine rather than generating an
ENTREF reference like it would for other calls.  As a result FOREST CANNOT
DETECT RECURSION where a routine calls itself.  This type of recursion is
called direct recursion.  Indirect recursion (where A calls B which then calls
A for example) is detected and handled correctly by FOREST, however.
   One good method of optimizing PL6 routines is to use the NOAUTO option on
the procedure heading.  A danger here is that NOAUTO will be put on a routine
that may be called recursively; if this happens the program will loop
endlessly!  The FOREST RECURSIVE option is designed to tell you what routines
are called recursively and hence are not suitable for NOAUTO.  Due to
restrictions noted before, FOREST can only say what routines are called
recursively indirectly.  Fortunately if a PL6 routine that is directly
recursive is declared with NOAUTO the PL6 compiler generates an error message
suggesting that this isn't such a hot idea.  Therefore the FOREST RECURSIVE
option in conjunction with PL6 compiler checking can ensure that the use of
NOAUTO in PL6 routines will not create bugs in your program due to unexpected
recursion.
00001
00001
00002
00001
00001
00002
00002
LIMITATIONS
   The options are
 
   [NO_]SIZES
 
   Controls printing of size information for each object unit.  The total size
(static data, code and constants) of an object unit is printed.  Any EXT or
EXTROOT symbols that are refed by an object unit are also listed.
   Default is NO_SIZES.
 
   [NO_]WHO_CALLS_WHO
 
   Controls printing of 'who calls each routine' table.
   Default is to print the table.
 
   [NO_]WHO_WHO_CALLS
 
   Controls printing of 'who each routine calls' table.
   Default is to print the table.
 
   [NO_]FILE_NAMES
 
   Controls printing of list of object files that are being processed.
   Default is to print the list.
 
   [NO_]OVERLAY
 
   Controls printing of maximum overlay structure.  A main program must be
supplied for this to work.
   Default is NO_OVERLAY.
 
   [NO_]CALL_TREE
 
   Controls printing of call tree.  This option is only useful for very small
programs.  With large programs it can easily generate several hundred pages of
output!
   Default is NO_CALL_TREE.
 
   [NO_]RECURSIVE
 
   Determines what object units are indirectly recursive.  Useful for
determining what PL6 routines can have the NOAUTO attribute put on them.
Object units that are directly recursive cannot be detected (see RESTRICTIONS).
   Default IS NO_RECURSIVE.
 
   SEARCH=(.acct [,.acct]...)
 
   Specifies list of accounts to search for object files.  Accounts are
searched in the order they appear in the list.  The default is to look for
object files in the current file management account.
 
 
   Option examples
 
      (NO_CALL_TREE, SIZES)   -suppresses printing of call tree and
                               causes size information to be printed.
 
 
00006
00009
00004
00005
00007
00008
00001
00002
00003
RESOURCES
FOREST was written by
 
         John Stewart
         Computing Services
         Language and Technical Support Group
         Carleton University
         Ottawa, Canada, K1S 5B6
John Joseph, LADC who will refer all problems, etc, to its originator,
John Stewart, Carleton University
FOREST requires 256K of memory to run.  This will limit most users to using
FOREST in batch.  A 5 minute time limit should be more than adequate for most
programs.
FOREST.X
AID=PROGRAMMING
RUNUNIT_MANIPULATION
OBJECT_UNIT_MANIPULATION
TOOL=FOREST
Prints out information that is helpful in understanding the CALL structure of a
program.  FOREST also makes LEMUR JCL that is useful in constructing overlays.
CHANGES
