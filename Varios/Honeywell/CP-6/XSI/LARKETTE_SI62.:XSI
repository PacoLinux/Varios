/*M* LARKETTE_SI62 LARKETTE_MISC LARKETTE external support routines */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*T*/
/*X* DDA */
/*P*
   NAME:          LARKETTE_MISC
   PURPOSE:       Contains common routines.
*/
 
%EJECT ;
/*T*/
/*F*
   NAME:          LARKETTE_GIVE_UP
   PURPOSE:       To close the open DCB's and exit.
   DESCRIPTION:   Closes the open DCB's and calls M$EXIT.
*/
/*D*
   NAME:          LARKETTE_GIVE_UP
   CALL:          CALL LARKETTE_GIVE_UP ( DATA_SEG_ )
   PARAMETERS:    VLPVECTOR_DATASEG is a vector of the data segment to release
   DESCRIPTION:   Calls XUG$CLOSE_DCBS to close all open DCB's, releases
                  the data segment, and calls M$EXIT.
*/
 
%EJECT ;
LARKETTE_GIVE_UP : PROC ( VLPVECTOR_DATASEG ) ;
 
/*
   Includes
*/
 
%INCLUDE CP_6 ;
%INCLUDE CP_6_SUBS ;
 
%INCLUDE LARKETTE_C61 ;
%INCLUDE LARKETTE_C62 ;
 
%INCLUDE XU_PERR_C ;
%INCLUDE XU_MACRO_C ;
%INCLUDE XUG_ENTRY ;
 
/*
   Parameters
*/
 
%VLP_VECTOR
       ( FPTN                 = VLPVECTOR_DATASEG,
         STCLASS              = "" ) ;
 
/*
   Entries
*/
 
%LARKETTE_RELEASE_DATA_SEGMENT ;
 
/*
   Structures
*/
 
%INCLUDE B$JIT ;
 
%FPT_YC
       ( FPTN           = FPT_YC,
         STCLASS        = CONSTANT,
         NOERR          = YES ) ;
 
%FPT_YC
       ( FPTN           = FPTYC,
         STCLASS        = AUTO ) ;
 
%XUG_GETCMD
       ( NAME           = XUG_GETCMD,
         STCLASS        = CONSTANT ) ;
 
DCL      IBEX_ERASE     CHAR ( 0 ) CONSTANT INIT ('ERASE');
DCL      IBEX_SET       CHAR ( 0 ) CONSTANT INIT ('SET M$LL NO');
 
DCL      B$JIT$         PTR SYMREF ;
 
%EJECT ;
CALL LARKETTE_RELEASE_DATA_SEGMENT ( VLPVECTOR_DATASEG ) ;
 
/*
   If we're running as a GHOST user, SET M$LL NO and ERASE.  If we're running
   on-line, in debug mode, don't mess with M$LL.
*/
IF ( B$JIT$->B$JIT.MODE = %M_GHOST# ) THEN DO ;
   FPTYC = FPT_YC ;
   FPTYC.V_ = VECTOR ( FPTYC.V ) ;
   FPTYC.CMD_ = VECTOR ( IBEX_SET ) ;
   CALL M$YC ( FPTYC )
         WHENALTRETURN DO ;
         END ;
   FPTYC.CMD_ = VECTOR ( IBEX_ERASE ) ;
   CALL M$YC ( FPTYC )
         WHENALTRETURN DO ;
         END ;
   END ;
 
CALL XUG$CLOSE_DCBS ( XUG_GETCMD ) ;
CALL M$EXIT ;
END LARKETTE_GIVE_UP ;
 
%EOD ;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*F*
   NAME:          LARKETTE_GET_DATA_SEGMENT
   PURPOSE:       To get or expand a data segment
   DESCRIPTION:   Allocates or expands a data segment.
*/
/*D*
   NAME:          LARKETTE_GET_DATA_SEGMENT
   CALL:          CALL LARKETTE_GET_DATA_SEGMENT ( VLPVECTOR_DATASEG, SEGSIZE,
                                                   CONTROL_STATION )
   PARAMETERS:    VLPVECTOR_DATASEG vectors the data segment, or is NIL
                  SEGSIZE is the number of words to get or add to the data
                     segment
                  CONTROL_STATION is the name of the control station, if an error
                     needs to be reported
   INPUT:         SEGSIZE
                  VLPVECTOR_DATASEG
                  CONTROL_STATION
   OUTPUT:        VLPVECTOR_DATASEG
   INTERFACE:     LARKETTE_RETURN_PMME_ERROR
   DESCRIPTION:   Uses M$GDS to allocate or expand a data segment.  If
                  the vector supplied is NIL, then new segment is allocated.
*/
 
%EJECT ;
LARKETTE_GET_DATA_SEGMENT : PROC ( VLPVECTOR_DATASEG, SEGSIZE, CONTROL_STATION ) ALTRET ;
 
/*
   Includes
*/
 
%INCLUDE CP_6 ;
%INCLUDE CP_6_SUBS ;
 
%INCLUDE LARKETTE_C61 ;
%INCLUDE LARKETTE_C62 ;
 
 
/*
   Parameters
*/
 
%VLP_VECTOR
       ( FPTN                       = VLPVECTOR_DATASEG,
         STCLASS                    = "" ) ;
 
DCL      SEGSIZE                    SBIN ;
DCL      CONTROL_STATION            CHAR ( 8 ) ;
 
/*
   Entries
*/
 
%LARKETTE_RETURN_PMME_ERROR ;
 
/*
   Structures
*/
 
%B$ALT ;
 
%B$TCB ;
 
%FPT_GDS
       ( FPTN                       = FPT_GDS,
         STCLASS                    = CONSTANT,
         PROTECTION                 = DSWRITE ) ;
 
%FPT_GDS
       ( FPTN                       = FPTGDS,
         STCLASS                    = AUTO ) ;
 
DCL      B$TCB$                     PTR SYMREF ;
 
%EJECT ;
   FPTGDS = FPT_GDS ;
   FPTGDS.V_ = VECTOR ( FPTGDS.V ) ;
   FPTGDS.RESULTS_ = VECTOR ( VLPVECTOR_DATASEG ) ;
   FPTGDS.V.SEGSIZE# = SEGSIZE ;
   CALL M$GDS ( FPTGDS )
         WHENALTRETURN DO ;
            CALL LARKETTE_RETURN_PMME_ERROR ( B$TCB$->B$TCB.ALT$->B$ALT.ERR,
                                              CONTROL_STATION ) ;
            GOTO ALT ;
         END ;
 
RETURN ;
 
ALT:
   ALTRETURN ;
 
END LARKETTE_GET_DATA_SEGMENT ;
 
%EOD ;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*F*
   NAME:          LARKETTE_RELEASE_DATA_SEGMENT
   PURPOSE:       To release the supplied data segment if it has been
                  allocated
   DESCRIPTION:   Releases allocated data segment.
*/
/*D*
   NAME:          LARKETTE_RELEASE_DATA_SEGMENT
   CALL:          CALL LARKETTE_RELEASE_DATA_SEGMENT ( VLPVECTOR_DATASEG )
   PARAMETERS:    VLPVECTOR_DATASEG vectors the data segment, or is NIL
   INPUT:         VLPVECTOR_DATASEG
   OUTPUT:        VLPVECTOR_DATASEG
   INTERFACE:     LARKETTE_RETURN_PMME_ERROR
   DESCRIPTION:   If the vector supplied is not NIL, the data segment
                  is freed;  if it is, nothing is done.
                  Uses M$FDS to determine the size of the data segment
                  and then calls M$FDS to release the segment.
*/
 
%EJECT ;
LARKETTE_RELEASE_DATA_SEGMENT : PROC ( VLPVECTOR_DATASEG ) ALTRET ;
 
/*
   Includes
*/
 
%INCLUDE CP_6 ;
%INCLUDE CP_6_SUBS ;
 
%INCLUDE LARKETTE_C61 ;
%INCLUDE LARKETTE_C62 ;
 
 
/*
   Parameters
*/
 
%VLP_VECTOR
       ( FPTN                       = VLPVECTOR_DATASEG,
         STCLASS                    = "" ) ;
 
/*
   Entries
*/
 
%LARKETTE_RETURN_PMME_ERROR;
 
/*
   Structures
*/
 
%B$ALT ;
 
%B$TCB ;
 
%FPT_FDS
       ( FPTN                       = FPT_FDS,
         STCLASS                    = CONSTANT ) ;
 
%FPT_FDS
       ( FPTN                       = FPTFDS,
         STCLASS                    = AUTO ) ;
 
DCL      B$TCB$                     PTR SYMREF ;
 
%EJECT ;
IF ( VLPVECTOR_DATASEG ~= VECTOR ( NIL ) ) THEN DO ;
   FPTFDS = FPT_FDS ;
   FPTFDS.V_ = VECTOR ( FPTFDS.V ) ;
   FPTFDS.RESULTS_ = VECTOR ( VLPVECTOR_DATASEG ) ;
   CALL M$FDS ( FPTFDS )
         WHENRETURN DO ;
            FPTFDS.V.SEGSIZE# = ( VLPVECTOR_DATASEG.W1.VSIZE# + 1 ) / 4 ;
            CALL M$FDS ( FPTFDS )
                  WHENALTRETURN DO ;
                     GOTO ALT ;
                  END ;
         END ;
         WHENALTRETURN DO ;
            GOTO ALT ;
         END ;
END ;
 
RETURN ;
 
ALT:
   ALTRETURN ;
 
END LARKETTE_RELEASE_DATA_SEGMENT ;
 
%EOD ;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*F*
   NAME:          LARKETTE_RETURN_COMMAND_ERROR
   PURPOSE:       To return the appropriate COMMAND error to LARK.
   DESCRIPTION:   Sends the error to LARK which reports it to the user.
*/
/*D*
   NAME:          LARKETTE_RETURN_COMMAND_ERROR
   CALL:          CALL LARKETTE_RETURN_COMMAND_ERROR ( COMMAND_ERR, CONTROL_STATION )
   PARAMETERS:    COMMAND_ERR is the structure containing a descripion of
                     the command error
                  CONTROL_STATION is the name of the control station for LARKETTE
   INPUT:         COMMAND_ERR
                  CONTROL_STATION
   DESCRIPTION:   Uses the master station to send a error status message
                  to LARK containing the COMMAND error.
*/
 
%EJECT ;
LARKETTE_RETURN_COMMAND_ERROR : PROC ( COMMAND_ERR, CONTROL_STATION ) ;
 
/*
   Includes
*/
 
%INCLUDE CP_6 ;
%INCLUDE CP_6_SUBS ;
 
%INCLUDE LARKETTE_C61 ;
%INCLUDE LARKETTE_C62 ;
 
 
/*
   Parameters
*/
 
DCL      COMMAND_ERR                SBIN ;
DCL      CONTROL_STATION            CHAR ( 8 ) ;
 
/*
   Entries
*/
 
%LARKETTE_WRITE_MESSAGE ;
 
/*
   Global data
*/
 
%FPT_WRITE
       ( FPTN           = FPT$WRITE_CONTROL,
         STCLASS        = SYMREF ) ;
 
%VLP_STATION
       ( FPTN           = VLP$STATION_CONTROL,
         STCLASS        = SYMREF ) ;
 
%LARKETTE_CONTROL_BUFFER ;
 
%EJECT ;
   CONTROL_BUFFER.CODE = %COMMAND_ERROR_RETURN ;
   CONTROL_BUFFER.STATION = CONTROL_STATION ;
   CONTROL_BUFFER.COMMAND.ERR# = COMMAND_ERR ;
   CALL LARKETTE_WRITE_MESSAGE ( VECTOR ( FPT$WRITE_CONTROL.V ),
                                 VECTOR ( VLP$STATION_CONTROL ),
                                 VECTOR ( CONTROL_BUFFER ),
                                 '        ' )
         WHENALTRETURN DO ;
         END ;
 
   RETURN ;
 
END LARKETTE_RETURN_COMMAND_ERROR ;
 
%EOD ;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*F*
   NAME:          LARKETTE_RETURN_NWIO_ERROR
   PURPOSE:       To return the appropriate NWIO error to LARK.
   DESCRIPTION:   Sends the error to LARK which reports it to the user.
*/
/*D*
   NAME:          LARKETTE_RETURN_NWIO_ERROR
   CALL:          CALL LARKETTE_RETURN_NWIO_ERROR ( CONTROL_NWIO, CONTROL_STATION )
   PARAMETERS:    CONTROL_NWIO is the structure containing a descripion of
                     the no-wait IO error
                  CONTROL_STATION is the name of the control station for LARKETTE
   INPUT:         CONTROL_NWIO
                  CONTROL_STATION
   DESCRIPTION:   Uses the master station to send a error status message
                  to LARK containing the NWIO error.
*/
 
%EJECT ;
LARKETTE_RETURN_NWIO_ERROR : PROC ( CONTROL_NWIO, CONTROL_STATION ) ;
 
/*
   Includes
*/
 
%INCLUDE CP_6 ;
%INCLUDE CP_6_SUBS ;
 
%INCLUDE LARKETTE_C61 ;
%INCLUDE LARKETTE_C62 ;
 
 
/*
   Parameters
*/
 
DCL      1  CONTROL_NWIO,
            2  COMPLETE#         BIT ( 1 ) ALIGNED,
            2  EVID#             UBIN WORD,
            2  ERR#              BIT ( 36 ),
            2  TYC#              BIT ( 36 ) ;
DCL         CONTROL_STATION      CHAR ( 8 ) ;
 
/*
   Entries
*/
 
%LARKETTE_WRITE_MESSAGE ;
 
/*
   Global data
*/
 
%FPT_WRITE
       ( FPTN           = FPT$WRITE_CONTROL,
         STCLASS        = SYMREF ) ;
 
%VLP_STATION
       ( FPTN           = VLP$STATION_CONTROL,
         STCLASS        = SYMREF ) ;
 
%LARKETTE_CONTROL_BUFFER ;
 
%EJECT ;
   CONTROL_BUFFER.CODE = %NWIO_ERROR_RETURN ;
   CONTROL_BUFFER.STATION = CONTROL_STATION ;
   CONTROL_BUFFER.NWIO = CONTROL_NWIO ;
   CALL LARKETTE_WRITE_MESSAGE ( VECTOR ( FPT$WRITE_CONTROL.V ),
                                 VECTOR ( VLP$STATION_CONTROL ),
                                 VECTOR ( CONTROL_BUFFER ),
                                 '        ' )
         WHENALTRETURN DO ;
         END ;
 
   RETURN ;
 
END LARKETTE_RETURN_NWIO_ERROR ;
 
%EOD ;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*F*
   NAME:          LARKETTE_RETURN_PMME_ERROR
   PURPOSE:       To return the appropriate PMME error to LARK.
   DESCRIPTION:   Sends the error to LARK which reports it to the user.
*/
/*D*
   NAME:          LARKETTE_RETURN_PMME_ERROR
   CALL:          CALL LARKETTE_RETURN_PMME_ERROR ( PMME_ERR_CODE, CONTROL_STATION )
   PARAMETERS:    PMME_ERR_CODE is the error code in B$ALT.ERR
                  CONTROL_STATION is the name of the control station for LARKETTE
   INPUT:         PMME_ERR_CODE
                  CONTROL_STATION
   DESCRIPTION:   Uses the master station to send a error status message
                  to LARK containing the PMME error.
*/
 
%EJECT ;
LARKETTE_RETURN_PMME_ERROR : PROC ( PMME_ERR_CODE, CONTROL_STATION ) ;
 
/*
   Includes
*/
 
%INCLUDE CP_6 ;
%INCLUDE CP_6_SUBS ;
 
%INCLUDE LARKETTE_C61 ;
%INCLUDE LARKETTE_C62 ;
 
 
/*
   Parameters
*/
 
DCL      PMME_ERR_CODE     BIT ( 36 ) ;
DCL      CONTROL_STATION   CHAR ( 8 ) ;
 
/*
   Entries
*/
 
%LARKETTE_WRITE_MESSAGE ;
 
/*
   Global data
*/
 
%FPT_WRITE
       ( FPTN           = FPT$WRITE_CONTROL,
         STCLASS        = SYMREF ) ;
 
%VLP_STATION
       ( FPTN           = VLP$STATION_CONTROL,
         STCLASS        = SYMREF ) ;
 
%LARKETTE_CONTROL_BUFFER ;
 
%EJECT ;
   CONTROL_BUFFER.CODE = %PMME_ERROR_RETURN ;
   CONTROL_BUFFER.STATION = CONTROL_STATION ;
   CONTROL_BUFFER.PMME.ERR# = PMME_ERR_CODE ;
   CALL LARKETTE_WRITE_MESSAGE ( VECTOR ( FPT$WRITE_CONTROL.V ),
                                 VECTOR ( VLP$STATION_CONTROL ),
                                 VECTOR ( CONTROL_BUFFER ),
                                 '        ' )
         WHENALTRETURN DO ;
         END ;
 
   RETURN ;
 
END LARKETTE_RETURN_PMME_ERROR ;
 
%EOD ;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*T*/
/*F*
   NAME:          LARKETTE_READ_MESSAGE
   PURPOSE:       To read a message through the active comgroup
   DESCRIPTION:   Reads a message using the supplied information.
*/
/*D*
   NAME:          LARKETTE_READ_MESSAGE
   CALL:          CALL LARKETTE_READ_MESSAGE ( READV_, STATION_, BUFFER_,
                                                CONTROL_STATION )
   ENTRY:         CALL LARKETTE_READ_MESSAGE_ERR_RET ( READV_, STATION_, BUFFER_,
                                                       CONTROL_STATION, ERRCODE )
   PARAMETERS:    READV_ is FPT_READ.V_
                  STATION_ is FPT_READ.STATION_
                  BUFFER_ is FPT_READ.BUF_ (will hold data to be read)
                  CONTROL_STATION is the name of the control station, if error
                     is to be returned to LARK
                  ERRCODE is the error which occurred on the PMME
   INPUT:         READV_
                  STATION_
                  BUFFER_
                  CONTROL_STATION
   OUTPUT:        BUFFER of data
                  error message sent to LARK if the control station was specified
                  ERRCODE returned if called thru entry point
                  ALTRETs if error occurs on READ operation
   INTERFACE:     LARKETTE_RETURN_PMME_ERROR
   DESCRIPTION:   Generic routine to read through the comgroup and handle
                  errors that might occur.
*/
 
%EJECT ;
LARKETTE_READ_MESSAGE : PROC ( READV_, STATION_, BUFFER_, CONTROL_STATION, ERRCODE ) ALTRET ;
 
/*
   Includes
*/
 
%INCLUDE CP_6 ;
%INCLUDE CP_6_SUBS ;
 
%INCLUDE LARKETTE_C62 ;
 
/*
   Entries
*/
 
%LARKETTE_RETURN_PMME_ERROR ;
 
/*
   Parameters
*/
 
DCL      READV_            VECTOR ;
DCL      STATION_          VECTOR ;
DCL      BUFFER_           VECTOR ;
DCL      CONTROL_STATION   CHAR ( 8 ) ;
%VLP_ERRCODE
       ( FPTN              = ERRCODE,
         STCLASS           = "" ) ;
 
/*
   Structures
*/
 
%B$ALT ;
 
%B$TCB ;
 
%FPT_READ
       ( FPTN           = FPT_READ,
         STCLASS        = CONSTANT ) ;
 
%FPT_READ
       ( FPTN           = FPTREAD,
         STCLASS        = AUTO ) ;
 
DCL      B$TCB$         PTR SYMREF ;
DCL      ERROR_RETURN   BIT ( 1 ) ;
 
%EJECT ;
ERROR_RETURN = %NO# ;
GOTO READ_MESSAGE ;
%EJECT ;
LARKETTE_READ_MESSAGE_ERR_RET : ENTRY ( READV_, STATION_, BUFFER_, CONTROL_STATION, ERRCODE ) ALTRET ;
 
ERROR_RETURN = %YES# ;
ERRCODE = '0'B ;
 
READ_MESSAGE: ;
 
FPTREAD = FPT_READ ;
FPTREAD.V_ = READV_ ;
FPTREAD.STATION_ = STATION_ ;
FPTREAD.BUF_ = BUFFER_ ;
CALL M$READ ( FPTREAD )
      WHENALTRETURN DO ;
         IF ERROR_RETURN THEN DO ;
            ERRCODE = B$TCB$->B$TCB.ALT$->B$ALT.ERR ;
         END ;
         IF ( CONTROL_STATION ~= ' ' ) THEN DO ;
            CALL LARKETTE_RETURN_PMME_ERROR ( B$TCB$->B$TCB.ALT$->B$ALT.ERR,
                                              CONTROL_STATION ) ;
         END ;
         GOTO ALT ;
      END ;
 
RETURN ;
 
ALT:
   ALTRETURN ;
 
END LARKETTE_READ_MESSAGE ;
 
%EOD ;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*T*/
/*F*
   NAME:          LARKETTE_WRITE_MESSAGE
   PURPOSE:       To write a message through the active comgroup
   DESCRIPTION:   Writes a message using the supplied information.
*/
/*D*
   NAME:          LARKETTE_WRITE_MESSAGE
   CALL:          CALL LARKETTE_WRITE_MESSAGE ( WRITEV_, STATION_, BUFFER_,
                                                CONTROL_STATION )
   ENTRY:         CALL LARKETTE_WRITE_MESSAGE_ERR_RET ( WRITEV_, STATION_, BUFFER_,
                                                        CONTROL_STATION, ERRCODE )
   PARAMETERS:    WRITEV_ is FPT_WRITE.V_
                  STATION_ is FPT_WRITE.STATION_
                  BUFFER_ is FPT_WRITE.BUF_ (data to be written)
                  CONTROL_STATION is the name of the control station, if err
                     is to be returned to LARK
                  ERRCODE is the error which occurred on the PMME
   INPUT:         WRITEV_
                  STATION_
                  BUFFER_
                  CONTROL_STATION
   OUTPUT:        error message sent to LARK if the control station was specified
                  ERRCODE returned if called thru entry point
                  ALTRETs if error occurs on WRITE operation
   INTERFACE:     LARKETTE_RETURN_PMME_ERROR
   DESCRIPTION:   Generic routine to write through the comgroup and handle
                  errors that might occur.
*/
 
%EJECT ;
LARKETTE_WRITE_MESSAGE : PROC ( WRITEV_, STATION_, BUFFER_, CONTROL_STATION, ERRCODE ) ALTRET ;
 
/*
   Includes
*/
 
%INCLUDE CP_6 ;
%INCLUDE CP_6_SUBS ;
 
%INCLUDE LARKETTE_C62 ;
 
/*
   Entries
*/
 
%LARKETTE_RETURN_PMME_ERROR ;
 
/*
   Parameters
*/
 
DCL      WRITEV_           VECTOR ;
DCL      STATION_          VECTOR ;
DCL      BUFFER_           VECTOR ;
DCL      CONTROL_STATION   CHAR ( 8 ) ;
%VLP_ERRCODE
       ( FPTN              = ERRCODE,
         STCLASS           = "" ) ;
 
/*
   Structures
*/
 
%B$ALT ;
 
%B$TCB ;
 
%FPT_WRITE
       ( FPTN           = FPT_WRITE,
         STCLASS        = CONSTANT ) ;
 
%FPT_WRITE
       ( FPTN           = FPTWRITE,
         STCLASS        = AUTO ) ;
 
DCL      B$TCB$         PTR SYMREF ;
DCL      ERROR_RETURN   BIT ( 1 ) ;
 
%EJECT ;
ERROR_RETURN = %NO# ;
GOTO WRITE_MESSAGE ;
 
%EJECT ;
LARKETTE_WRITE_MESSAGE_ERR_RET : ENTRY ( WRITEV_, STATION_, BUFFER_, CONTROL_STATION, ERRCODE ) ALTRET ;
 
ERROR_RETURN = %YES# ;
ERRCODE = '0'B ;
 
WRITE_MESSAGE: ;
 
FPTWRITE = FPT_WRITE ;
FPTWRITE.V_ = WRITEV_ ;
FPTWRITE.STATION_ = STATION_ ;
FPTWRITE.BUF_ = BUFFER_ ;
CALL M$WRITE ( FPTWRITE )
      WHENALTRETURN DO ;
         IF ERROR_RETURN THEN DO ;
            ERRCODE = B$TCB$->B$TCB.ALT$->B$ALT.ERR ;
         END ;
         IF ( CONTROL_STATION ~= ' ' ) THEN DO ;
            CALL LARKETTE_RETURN_PMME_ERROR ( B$TCB$->B$TCB.ALT$->B$ALT.ERR,
                                              CONTROL_STATION ) ;
         END ;
         GOTO ALT ;
      END ;
 
RETURN ;
 
ALT:
   ALTRETURN ;
 
END LARKETTE_WRITE_MESSAGE ;
