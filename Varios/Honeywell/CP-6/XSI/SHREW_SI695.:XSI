/*******************************************************************
*
*      ELF95                 Provide BITNET specific functions for SHREW
*                            [Specially Handled Reports for Errorlog
*                            Watching], using Log File #95.
*/
       ELF95:                          PROC
           (F#,PTR$,EL_RECORD_BUF);
/**************************************************************
 *                                                            *
 * Copyright (c) Pennsylvania State University Libraries 1986 *
 *                                                            *
 **********************************************************/
/**
 *                 PARAMETER DECLARATIONS
 **/
DCL    F#                              UBIN   WORD;
DCL    PTR$                            PTR;
/**/
%INCLUDE EL$TABLES.:LIBRARY;
/**/
%LIST;
%EL$HDR           (NAME=EL_RECORD_BUF,
                   STCLASS=PARAM,
                   HDRONLY=NO);
%PLIST;
/**
 *                 SHREW REQUIREMENTS
 **/
%INCLUDE SHREW_C600;
/**/
%INCLUDE SHREW_C6;
/**/
DCL    ELF00                           ENTRY  (3);
DCL    ELF_FORMAT                      ENTRY  (21);
/**
 *                 BITNET REQUIREMENTS
 **/
%INCLUDE SHREW_C695;
/**/
%LIST;
%BITNET_ELF        (NAME=B$BITNET,STCLASS="BASED(ENTRY$)");
%PLIST;
/**
 *                 GLOBAL SYMREF REQUIREMENTS
 **/
DCL    DATA (0:260)                    SYMREF
                                       CHAR   (100);
DCL  1 VECTORC                         SYMREF    ALIGNED,
       2 COUNT                         UBIN   WORD,
       2 VECTOR_ (0:260)               VECTOR;
DCL    ELF_TIME                        CHAR   (11)         SYMREF;
DCL    TYPE_95                         SBIN                SYMREF;
/**
 *                 SYSTEM SOFTWARE REQUIREMENTS
 **/
/**/
%INCLUDE SYSLIB_C61;
/**
 *                 LOCAL VARIABLE DECALARATIONS
 **/
DCL    TEMP                            CHAR   (50);
DCL    YN (0:1)                        CONSTANT
                                       CHAR(1)
                                       INIT('N','Y');
DCL  1 ELF95_TBL                       CONSTANT  SYMDEF    ALIGNED,
       2 MAX#                          UBIN   WORD         UNAL
                                       INIT(19),
       2 TBL (0:18),
         3 TYPE                        UBIN   BYTE         UNAL
                   INIT(  %ELF$BITNET_File_Open_Failed,
                          %ELF$BITNET_Binary,
                          %ELF$BITNET_Total_Number,
                          %ELF$BITNET_Bad_ASCII,
                          %ELF$BITNET_NoAliasFile,
                          %ELF$BITNET_BadAlias,
                          %ELF$BITNET_Relay_To_Remote,
                          %ELF$BITNET_Notice_Delivered,
                          %ELF$BITNET_Mail_Delivered,
                          %ELF$BITNET_Bad_SMTP,
                          %ELF$BITNET_Good_Send,
                          %ELF$BITNET_Bad_Routing,
                          %ELF$BITNET_Bad_Domain,
                          %ELF$BITNET_Bad_Err,
                          %ELF$BITNET_New_Node,
                          %ELF$BITNET_Bad_Node,
                          %ELF$BITNET_Unknown_User,
                          %ELF$BITNET_Merc),
         3 TEXT                        CHAR   (23)        UNAL
                INIT('Open failure',
                     'Binary recieved',  'ASCII recieved',
                     'Bad ASCII',
                     'Aliases missing', 'Bad Alias', 'Relay to Remote',
                     'Notice Delivered', 'Mail Delivered',
                     'Bad SMTP', 'Sent', 'Bad Routing', 'Bad Domain',
                     'Bad Return Error',
                     'New Node', 'Bad Node', 'Unknown User',
                     'CP-6 M$MERC'),
         3 COUNT                       UBIN   WORD
                INIT(LENGTHC('Open failure'),
                     LENGTHC('Binary recieved'),
                     LENGTHC('ASCII recieved'),
                     LENGTHC('Bad ASCII'),
                     LENGTHC('Aliases missing'),
                     LENGTHC('Bad Alias'), LENGTHC('Relay to Remote'),
                     LENGTHC('Notice Delivered'),
                     LENGTHC('Mail Delivered'), LENGTHC('Bad SMTP'),
                     LENGTHC('Sent'), LENGTHC('Bad Routing'),
                     LENGTHC('Bad Domain'),
                     LENGTHC('Bad Return Error'),
                     LENGTHC('New Node'), LENGTHC('Bad Node'),
                     LENGTHC('Unknown User'),
                     LENGTHC('CP-6 M$MERC'));
DCL    I                               SBIN   WORD;
DCL    J                               SBIN   WORD;
DCL    K                               SBIN   WORD;
DCL    SPACES                          STATIC
                                       CHAR   (1)
                                       INIT(' ');
DCL    INFO_SIZE                       SBIN   WORD;
DCL    ENTRY$                          PTR;
DCL  1 ToWho                           ALIGNED,
       2 Len                           Ubin Byte Caligned,
       2 Buf                           Char(256) Caligned;
DCL  1 From                            ALIGNED,
       2 Len                           Ubin Byte Caligned,
       2 Buf                           Char(256) Caligned;
DCL    RECS                            UBIN  WORD;
DCL    RAWHDR1                         CONSTANT
                                       CHAR   (0)
                                       INIT('ATIME   MESSAGE');
DCL    RAWHDR2                         CONSTANT
                                       CHAR   (0)
       INIT('A-----  ----------------------------------------------');
/**
 *                 FORMATTING SERVICE REQUIREMENTS
 **/
%INCLUDE XU_FORMAT_C;
/**/
%F_FDS             (NAME=FDS,
                    STCLASS=SYMREF);
/**/
DCL    RAW_LOG                         CONSTANT
                                       CHAR   (0)
                       INIT('%VA%5MA Significant Environment Error');
DCL    RAW_ERRMSG                      CONSTANT
                                       CHAR   (0)
                                       INIT('%VA%5MA%2P  Code=%<>A');
DCL    RAW_NEWNODE                     CONSTANT
                                       CHAR   (0)
                                     INIT('%VA%5MA%2P  Node=%<>T%S');
DCL    RAW_NORECS                      CONSTANT
                                       CHAR   (0)
                   INIT('%VA%5MA%2P  To=%35ML<>T%S From=%35ML<>T%S');
DCL    RAW_TOFILE                      CONSTANT
                                       CHAR   (0)
                   INIT('%VA%5MA%2P  To=%35ML<>T%S File=%<>T%S');
DCL    RAW_ALIAS                       CONSTANT
                                       CHAR   (0)
                      INIT('%VA%5MA%2P  Alias=%<>T%S Folder=%<>T%S');
DCL    RAW_RECS                        CONSTANT
                                       CHAR   (0)
          INIT('%VA%5MA%2P  To=%35ML<>T%S From=%35ML<>T%S Recs=%D');
DCL    RAW_RELAY                       CONSTANT
                                       CHAR   (0)
     INIT('%VA%5MA%2P  To=%35ML<>T%S From=%35ML<>T%S%N( Recs=%D%)');
DCL    RAW_PRE_NORECS                  CONSTANT
                                       CHAR   (0)
                                     INIT('%VA%5MA%2P  File=%<>T%S');
DCL    RAW_PRE_RECS                    CONSTANT
                                       CHAR   (0)
                           INIT('%VA%5MA%2P  File=%<>T%S Recs=%D');
DCL    RAW_BAD_ASCII                   CONSTANT
                                       CHAR   (0)
            INIT('%VA%5MA%2P  File=%<>T%S @Rec=%D ASCII=''%30''o');
DCL    DET_ERRMSG                      CONSTANT
                                       CHAR   (0)
                                       INIT('%VA%6MA%2P%8-%<>A');
DCL    DET_RECS                        CONSTANT
                                       CHAR   (0)
                                      INIT('%VA%5MA%2P%8-Records=%D');
DCL    DET_NORECS                      CONSTANT
                                       CHAR   (0)
                                       INIT('%VA%5MA%S');
DCL    HEADER_X                        CONSTANT
                                       CHAR   (0)
                                       INIT('%VA----- %N(-%)');
%EJECT;
/*******************************************************************
*
*      ELF95                           Actual procedure begins here
*/
/**/
                   /************************
                    *    BEGIN PROCEDURE   *
                    ************************/
/**/
/**
 *   F# actions:      0 - Return ADDR(type name table) in PTR$.
 *                    1 - Return ADDR(VECTORC table) in PTR$ with
 *                               VECTORC table loaded for RAW report
 *                               headings.
 *                    2 - Return ADDR(VECTORC table) in PTR$ with
 *                               VECTORC table loaded for RAW report
 *                               data. EL_RECORD_BUF provides data.
 *                    3 - Return ADDR(VECTORC table) in PTR$ with
 *                               VECTORC table loaded for DETAIL report
 *                               data. EL_RECORD_BUF provides data.
 *                    4 - Return ADDR(TYPE_95) in PTR$ with TYPE_95
  *                              being the syntax node which describes
 *                               the TYPE command for log #95.
 *                    5 - Initialize FOR clause selection criteria by
 *                               the blank-delimited string passed
 *                               as PTR$->OUT$BLK.SUBLK$(0)->OUT$SYM.
 *                               When PTR$=ADDR(NIL), reset selection
 *                               criteria to accept anything.
 *                    6 - Return ADDR(NIL) in PTR$ when record passed
 *                               as SL_RECORD_BUF doesn't fit criteria
 *                               selected in last call with F#=5.
 *                               Otherwise return ADDR(SL_RECORD_BUF)
 *                               in PTR$.
 *         ELF95 does not provide services 5 or 6; instead it
 *         nops them through ELF00.
 */
       VECTORC.COUNT = 0;
       IF ADDR(EL_RECORD_BUF)~=ADDR(NIL)
              THEN DO;
              INFO_SIZE = EL_RECORD_BUF.SIZE - 5;
              ENTRY$ = ADDR(EL_RECORD_BUF.INFO(0));
              END;
FUNCTION: DO CASE (F#);
       CASE(0);          PTR$ = ADDR(ELF95_TBL);
                         RETURN;
       CASE(1);          PTR$ = ADDR(VECTORC);
                         VECTORC.COUNT = 2;
                         VECTORC.VECTOR_(0) = VECTOR(RAWHDR1);
                         VECTORC.VECTOR_(1) = VECTOR(RAWHDR2);
                         RETURN;
       CASE(2);          PTR$ = ADDR(VECTORC);
                         RECS = B$BITNET.Recs;
                         ToWho = B$BITNET.ToWho;
                         IF Substr(ToWho.Buf,0,LengthC('TO:'))='TO:'
                             THEN DO;
                             ToWho.Buf =
                                     Substr(ToWho.Buf,LengthC('TO:'));
                             ToWho.Len = ToWho.Len-LengthC('TO:');
                             END;
                          DO WHILE (Substr(ToWho.Buf,0,1)=' ');
                                ToWho.Buf = Substr(ToWho.Buf,1);
                                ToWho.Len = ToWho.Len - 1;
                          END;
                          From  = B$BITNET.From;
                          IF Substr(From.Buf,0,LengthC('FROM:'))
                                                        ='FROM:'
                             THEN DO;
                             From.Buf =
                                    Substr(From.Buf,LengthC('FROM:'));
                             From.Len = From.Len-LengthC('FROM:');
                             END;
                          DO WHILE (Substr(From.Buf,0,1)=' ');
                                From.Buf = Substr(From.Buf,1);
                                From.Len = From.Len - 1;
                          END;
                         /* Load up information */
           RAW_RPT:      DO CASE(EL_RECORD_BUF.TYPE);
           CASE(%ELF$BITNET_New_Node);
                 CALL     ELF_FORMAT  (VECTOR(RAW_NEWNODE),
                                        VECTOR(ELF_TIME),
                                        VECTOR(ToWho));
           CASE(%ELF$BITNET_Merc);
                 CALL     ELF_FORMAT  (VECTOR(RAW_ERRMSG),
                                        VECTOR(ELF_TIME),
                                        VECTOR(SUBSTR
                                           (ToWho.Buf,0,12)));
           CASE(%ELF$BITNET_Bad_Routing, %ELF$BITNET_Bad_Domain,
                 %ELF$BITNET_Bad_Err);
                 CALL     ELF_FORMAT (VECTOR(RAW_TOFILE),
                                      VECTOR(ELF_TIME),
                                      VECTOR(ToWho),
                                      VECTOR(From));
           CASE(%ELF$BITNET_Good_Send,%ELF$BITNET_Mail_Delivered);
                 CALL     ELF_FORMAT (VECTOR(RAW_RECS),
                                      VECTOR(ELF_TIME),
                                      VECTOR(ToWho),
                                      VECTOR(From),
                                      VECTOR(RECS));
           CASE(%ELF$BITNET_Bad_Node,%ELF$BITNET_Unknown_User,
                %ELF$BITNET_Notice_Delivered,%ELF$BITNET_Relay_To_Remote);
                 IF RECS > 0 THEN      I = 1;
                             ELSE      I = 0;
                 CALL     ELF_FORMAT (VECTOR(RAW_RELAY),
                                      VECTOR(ELF_TIME),
                                      VECTOR(ToWho),
                                      VECTOR(From),
                                      VECTOR(I),VECTOR(RECS));
           CASE(%ELF$BITNET_File_Open_Failed,%ELF$BITNET_Binary,
                %ELF$BITNET_Bad_SMTP);
                 CALL     ELF_FORMAT (VECTOR(RAW_PRE_NORECS),
                                      VECTOR(ELF_TIME),
                                      VECTOR(From));
           CASE(%ELF$BITNET_Total_Number);
                 CALL     ELF_FORMAT (VECTOR(RAW_PRE_RECS),
                                      VECTOR(ELF_TIME),
                                      VECTOR(From),
                                      VECTOR(RECS));
           CASE(%ELF$BITNET_Bad_ASCII);
                 CALL     ELF_FORMAT (VECTOR(RAW_BAD_ASCII),
                                      VECTOR(ELF_TIME),
                                      VECTOR(From),
                                      VECTOR(RECS),
                                      VECTOR(ToWho.Len));
           CASE(%ELF$BITNET_BadAlias,%ELF$BITNET_NoAliasFile);
                 CALL     ELF_FORMAT (VECTOR(RAW_ALIAS),
                                      VECTOR(ELF_TIME),
                                      VECTOR(ToWho),
                                      VECTOR(From));
           CASE(ELSE);
                 CALL        ELF00 (F#,PTR$,EL_RECORD_BUF);
                             END RAW_RPT;
                             RETURN;
       CASE(3);              PTR$ = ADDR(VECTORC);
                             /* Load up table of entries, based on
                                EL_RECORD_BUF.TYPE value */
                             DATA(0) = 'ATIME   ';
                             VECTORC.COUNT = 1;
                             VECTORC.VECTOR_(0) = VECTOR(DATA(0));
                             I = 70;
                             CALL      ELF_FORMAT (VECTOR(HEADER_X),
                                                 VECTOR(I));
                             RECS = B$BITNET.Recs;
                             ToWho = B$BITNET.ToWho;
                             IF Substr(ToWho.Buf,0,LengthC('TO:'))
                                                        ='TO:'
                                THEN DO;
                                ToWho.Buf =
                                     Substr(ToWho.Buf,LengthC('TO:'));
                                ToWho.Len = ToWho.Len-LengthC('TO:');
                                END;
                             DO WHILE (Substr(ToWho.Buf,0,1)=' ');
                                ToWho.Buf = Substr(ToWho.Buf,1);
                                ToWho.Len = ToWho.Len - 1;
                             END;
                             From  = B$BITNET.From;
                             IF Substr(From.Buf,0,LengthC('FROM:'))
                                                        ='FROM:'
                                THEN DO;
                                From.Buf =
                                    Substr(From.Buf,LengthC('FROM:'));
                                From.Len = From.Len-LengthC('FROM:');
                                END;
                             DO WHILE (Substr(From.Buf,0,1)=' ');
                                From.Buf = Substr(From.Buf,1);
                                From.Len = From.Len - 1;
                             END;
       DETAIL_RPT: DO CASE(EL_RECORD_BUF.TYPE);
           CASE(%ELF$BITNET_New_Node);
                 CALL     ELF_FORMAT (VECTOR(RAW_NEWNODE),
                                       VECTOR(ELF_TIME),
                                       VECTOR(ToWho));
           CASE(%ELF$BITNET_Bad_Node,%ELF$BITNET_Unknown_User,
                %ELF$BITNET_Good_Send,%ELF$BITNET_Mail_Delivered,
                %ELF$BITNET_Relay_To_Remote,%ELF$BITNET_Notice_Delivered);
                   IF EL_RECORD_BUF.TYPE = %ELF$BITNET_Good_Send
                      | EL_RECORD_BUF.TYPE = %ELF$BITNET_Mail_Delivered
                             THEN
                             CALL      ELF_FORMAT  (VECTOR(DET_RECS),
                                                    VECTOR(ELF_TIME),
                                                    VECTOR(RECS));
                   ELSE
                      IF RECS > 0
                             THEN
                             CALL      ELF_FORMAT  (VECTOR(DET_RECS),
                                                    VECTOR(ELF_TIME),
                                                    VECTOR(RECS));
                             ELSE
                             CALL      ELF_FORMAT  (VECTOR(DET_NORECS),
                                                    VECTOR(ELF_TIME));
                 I = ToWho.Len;
                 J = 0;
                 TEMP = '   To:';
                 DO WHILE (I > 80);
                     IF SUBSTR(ToWho.Buf,J,80)~=' '
                        THEN
                        CALL   ELF_FORMAT (VECTOR(DET_ERRMSG),
                                           VECTOR(TEMP),
                                           VECTOR(SUBSTR(ToWho
                                                        .Buf,J,80)));
                     I = I-80;   J = J+80;
                     TEMP = ' ';
                 END;
                 CALL ELF_FORMAT (VECTOR(DET_ERRMSG),VECTOR(TEMP),
                                       VECTOR(SUBSTR(ToWho.Buf,J,I)));
                 I = From.Len;
                 J = 0;
                 TEMP = ' From:';
                 DO WHILE (I > 80);
                     IF SUBSTR(From.Buf,J,80)~=' '
                        THEN
                        CALL   ELF_FORMAT (VECTOR(DET_ERRMSG),
                                           VECTOR(TEMP),
                                           VECTOR(SUBSTR(From
                                                         .Buf,J,80)));
                      I = I-80;   J = J+80;
                      TEMP = ' ';
                 END;
                 CALL ELF_FORMAT (VECTOR(DET_ERRMSG),VECTOR(TEMP),
                                       VECTOR(SUBSTR(From.Buf,J,I)));
           CASE(%ELF$BITNET_File_Open_Failed,%ELF$BITNET_Binary,
                %ELF$BITNET_Bad_SMTP);
                 CALL     ELF_FORMAT (VECTOR(RAW_PRE_NORECS),
                                      VECTOR(ELF_TIME),
                                      VECTOR(From));
           CASE(%ELF$BITNET_Total_Number);
                 CALL     ELF_FORMAT (VECTOR(RAW_PRE_RECS),
                                      VECTOR(ELF_TIME),
                                      VECTOR(From),
                                      VECTOR(RECS));
           CASE(%ELF$BITNET_Bad_ASCII);
                 CALL     ELF_FORMAT (VECTOR(RAW_BAD_ASCII),
                                      VECTOR(ELF_TIME),
                                      VECTOR(From),
                                      VECTOR(RECS),
                                      VECTOR(ToWho.Len));
           CASE(%ELF$BITNET_Merc);
                             I = ToWho.Len;
                             J = 0;
                             TEMP = SUBSTR(ELF_TIME,0,5);
                             DO WHILE (I > 80);
                               IF SUBSTR(ToWho.Buf,J,80)~=' '
                                 THEN
                                 CALL  ELF_FORMAT (VECTOR(DET_ERRMSG),
                                                   VECTOR(TEMP),
                                                   VECTOR(SUBSTR
                                                   (ToWho.Buf,J,80)));
                               I = I-80;    J = J+80;
                               TEMP = ' ';
                             END;
                             CALL ELF_FORMAT (VECTOR(DET_ERRMSG),
                                       VECTOR(TEMP),
                                       VECTOR(SUBSTR(ToWho.Buf,J,I)));
                             IF  From.Len = 0
                                       THEN           EXIT;
                             I = From.Len;
                             J = 0;
                             TEMP = '  Dcb:';
                             DO WHILE (I > 80);
                               IF SUBSTR(From.Buf,J,80)~=' '
                                 THEN
                                 CALL  ELF_FORMAT (VECTOR(DET_ERRMSG),
                                                   VECTOR(TEMP),
                                                   VECTOR(SUBSTR
                                                    (From.Buf,J,80)));
                               I = I-80;    J = J+80;
                               TEMP = ' ';
                             END;
                             CALL ELF_FORMAT (VECTOR(DET_ERRMSG),
                                       VECTOR(TEMP),
                                       VECTOR(SUBSTR(From.Buf,J,I)));
           CASE(%ELF$BITNET_Bad_Routing, %ELF$BITNET_Bad_Domain,
                 %ELF$BITNET_Bad_Err,
                 %ELF$BITNET_NoAliasFile,
                 %ELF$BITNET_BadAlias);
                 CALL     ELF_FORMAT (VECTOR(DET_NORECS),
                                      VECTOR(ELF_TIME));
                 I = ToWho.Len;
                 J = 0;
                 IF EL_RECORD_BUF.TYPE = %ELF$BITNET_NoAliasFile
                    | EL_RECORD_BUF.TYPE = %ELF$BITNET_BadAlias
                      THEN TEMP = 'Alias:';
                      ELSE TEMP = '   To:';
                 DO WHILE (I > 80);
                     IF SUBSTR(ToWho.Buf,J,80)~=' '
                        THEN
                        CALL   ELF_FORMAT (VECTOR(DET_ERRMSG),
                                         VECTOR(TEMP),
                                         VECTOR(SUBSTR(ToWho
                                                        .Buf,J,80)));
                    I = I-80;     J = J+80;
                    TEMP = ' ';
                 END;
                 CALL ELF_FORMAT (VECTOR(DET_ERRMSG),VECTOR(TEMP),
                                       VECTOR(SUBSTR(ToWho.Buf,J,I)));
                 I = From.Len;
                 J = 0;
                 IF EL_RECORD_BUF.TYPE = %ELF$BITNET_NoAliasFile
                     | EL_RECORD_BUF.TYPE = %ELF$BITNET_BadAlias
                       THEN TEMP = ' Fldr:';
                       ELSE TEMP = ' File:';
                 DO WHILE (I > 80);
                     IF SUBSTR(From.Buf,J,80)~=' '
                        THEN
                        CALL   ELF_FORMAT (VECTOR(DET_ERRMSG),
                                           VECTOR(TEMP),
                                           VECTOR(SUBSTR(From
                                                         .Buf,J,80)));
                     I = I-80;   J = J+80;
                     TEMP = ' ';
                 END;
                 CALL ELF_FORMAT (VECTOR(DET_ERRMSG),VECTOR(TEMP),
                                       VECTOR(SUBSTR(From.Buf,J,I)));
            CASE(ELSE);       CALL      ELF00 (F#,PTR$,EL_RECORD_BUF);
                    END DETAIL_RPT;
                              RETURN;
       CASE(4);               PTR$ = ADDR(TYPE_95);
                              RETURN;
       CASE(ELSE);            CALL      ELF00 (F#,PTR$,EL_RECORD_BUF);
                              RETURN;
           END FUNCTION;
/**/
       END ELF95;
