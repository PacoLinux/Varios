/*M* BANTER_SI6 - PL6 source for BANTER program. */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
BANTER: PROC MAIN;
%INCLUDE CP_6;
%INCLUDE B$JIT;
%INCLUDE B_ERRORS_C;
%INCLUDE FS_SUPER_C;
%INCLUDE FS$FIT;
%INCLUDE XU_FORMAT_C;
%INCLUDE XU_MACRO_C;
%INCLUDE XU_PERR_C;
%INCLUDE XUF_ENTRY;
%INCLUDE XG_SUBS_C;
%INCLUDE BANTER_C61;
 
%SUB TEN024 = 1024;
 
DCL DATE_TIME ENTRY (2);
DCL FSK$BANNER ENTRY (4) ALTRET;
DCL FSK$GBANNER ENTRY (4) ALTRET;
 
%SUB SET = '1'B;
%SUB NOTSET = '0'B;
 
%PARSE$OUT (NAME = OPT$OUT,
            STCLASS = "BASED (BLK$)");
%PARSE$SYM (NAME = OPT$SYM,
            STCLASS = "BASED (BLK$)");
DCL NSUBLKS UBIN;
DCL OPT_NODE UBIN SYMREF;
DCL X$PARSE ENTRY (1) ALTRET;
DCL WORK (0:255) UBIN STATIC;
DCL BLK$ PTR;
DCL 1 BUF STATIC,
    2 L UBIN HALF HALIGNED,
    2 C CHAR (255) CALIGNED;
%P_PCB (NAME = OPT_PCB,
        STCLASS = STATIC,
        T = BUF.C,
        R = OPT_NODE,
        W = WORK,
        WSZ = 256);
 
DCL BUPHER CHAR (130) STATIC;
 
%FPT_READ(FPTN=READIN,
          DCB=M$SI,
          KEY=READ_KEY,
          BUF = READBUF);
DCL READBUF CHAR(4096) CALIGNED STATIC;
DCL M$SI DCB;
DCL 1 READ_KEY WALIGNED STATIC,
    2 SIZE UBIN BYTE CALIGNED,
    2 KEY_VAL CHAR (6) UNAL;
DCL FORM_NAME CHAR (6);
 
%FPT_WRITE(FPTN=WRITEOUT,
           DCB=M$LS,
           BUF=WRITEBUF);
DCL WRITEBUF CHAR(256) CALIGNED STATIC;
DCL M$LS DCB;
 
%FS$DEST (STCLASS = BASED,
            SIZ = FIT);
 
%FPT_PFIL (FPTN = TOP_OF_FILE,
           BOF = YES,
           DCB = M$SI);
 
 
%FPT_OPEN(FPTN=OPEN_OU,
          ACS=DIRECT,
          DISP = NAMED,
          EXIST = NEWFILE,
          CTG = YES,
          FUN = CREATE,
          ORG = UR,
          ASN = FILE,
          DCB=M$LS);
 
%FPT_OPEN( FPTN=OPEN_SI,
           FUN=IN,
           SHARE=ALL,
           ASN=FILE,
           NAME=FORM_FID,
           ACCT=SYSACCT,
           DCB=M$SI);
 
%FPT_GDS (FPTN = GET_PAGE2,
            RESULTS = RESULT2,
            SEGSIZE = %TEN024);
 
%FPT_FDS (FPTN = REL_PAGE2,
            RESULTS = RESULT2,
            SEGSIZE = %TEN024);
 
%VLP_VECTOR (FPTN = RESULT2);
 
%FPT_GDS (FPTN = GET_PAGE1,
            RESULTS = RESULT1,
            SEGSIZE = %TEN024);
 
%FPT_FDS (FPTN = REL_PAGE1,
            RESULTS = RESULT1,
            SEGSIZE = %TEN024);
 
%VLP_VECTOR (FPTN = RESULT1);
 
%VLP_NAME( FPTN=FORM_FID,
           NAME=':FORM');
 
%VLP_ACCT( FPTN=SYSACCT,
           ACCT=':SYS');
 
 
%FPT_CLOSE( FPTN=CLOSE_OU,
            DISP = SAVE,
            DCB=M$LS);
 
%FPT_CLOSE( FPTN=CLOSE_SI,
            DCB=M$SI);
 
%FPT_ERRMSG( FPTN=MERR,
             BUF = BUPHER,
             OUTDCB1 = M$LS);
 
%VLR_SITEINFO (FPTN = SITEINFO);
 
%FPT_MONINFO (FPTN = MONINFO,
               SITEINFO = SITEINFO);
 
DCL QUESTION BIT (1);
 
DCL I SBIN;
 
%FS$FORMREC (NAME=FORM,
             STCLASS = "BASED (BUF$)");
 
%FS$WRSP (NAME=FS$WRSP,
          STCLASS = "BASED (WORK$)");
 
%FS$BAN_INIT (NAME = FS$FINST,
               STCLASS = BASED);
 
%FS$GFORMREC (NAME=GFORM,
             STCLASS = "BASED (BUF$)");
 
%FS$GWRSP (NAME=GWRSP,
           STCLASS = "BASED (WORK$)");
 
%FS$WORKAUTO;
 
 DCL BUFF$ PTR;
DCL BUF$ PTR;
DCL WORK$ PTR;
DCL BWORK$ PTR;
DCL CHARS CHAR (512) BASED;
DCL CHAR1 CHAR (1) BASED;
 
DCL BUFFA CHAR (256) ALIGNED;
DCL 1 FID STATIC ALIGNED,
   2 L UBIN BYTE UNAL,
   2 T CHAR (80) UNAL;
 
%F$DCB;
%B$ALT;
%B$TCB;
DCL B$TCB$ PTR SYMREF;
DCL B$JIT$ PTR SYMREF ;
 
CALL M$MONINFO (MONINFO) ALTRET (ERR);
CALL M$OPEN (OPEN_SI) ALTRET (ERR);
CALL M$GDS (GET_PAGE1) ALTRET (ERR);
BUF$ = RESULT1.PTR$;
CALL M$GDS (GET_PAGE2) ALTRET (ERR);
 
QUESTION = NOTSET;
CALL INDEX (I, ' ', B$JIT.CCBUF) ALTRET (ERR);
IF (I >= B$JIT.CCARS)
THEN DO;
   QUESTION = SET;
   END;
ELSE DO;
   OPT_PCB.NCHARS = B$JIT.CCARS - I;
   BUF.C = SUBSTR ( B$JIT.CCBUF, I, OPT_PCB.NCHARS);
   CALL X$PARSE (OPT_PCB)
   WHENRETURN DO;
     END;
   WHENALTRETURN DO;
     WRITEBUF = 'Unable to parse input.  Please check syntax and try again.';
     CALL M$WRITE (WRITEOUT) ALTRET (ERR);
     GOTO FIN;
     END;
   BLK$ = OPT_PCB.OUT$;
   FID.L = OPT$OUT.SUBLK$ (0)->OPT$SYM.COUNT;
   FID.T = OPT$OUT.SUBLK$ (0)->OPT$SYM.TEXT;
   IF (OPT$OUT.NSUBLKS = 2)
   THEN DO;
      READ_KEY.SIZE = 6;
      READ_KEY.KEY_VAL = OPT$OUT.SUBLK$(1)->OPT$SYM.TEXT;
      FORM_NAME = READ_KEY.KEY_VAL;
      END;
   ELSE QUESTION = SET;
   END;
OPEN_OU.FORM_ = VECTOR (FORM_NAME);
OPEN_OU.NAME_ = VECTOR (FID);
 
CALL M$OPEN (OPEN_OU) ALTRET (ERR);
 
IF QUESTION
 THEN DO;
     CALL LIST_ALL ALTRET (ERR);
 END;
ELSE DO;
     CALL OUTPUT_FORM ALTRET (ERR);
     END;
GOTO FIN;
ERR: ;
           BUPHER = 'AN ERROR HAS BEEN ENCOUNTERED';
           MERR.CODE_ = VECTOR(   B$TCB$->B$TCB.ALT$->B$ALT.ERR) ;
           CALL M$ERRMSG ( MERR) ;
FIN: ;
 
LIST_ALL:PROC ALTRET;
  READIN.V.KEYS# = NOTSET;
  READIN.V.KEYR# = SET;
  WRITEBUF = 'The available forms are:';
  CALL M$WRITE (WRITEOUT) ALTRET (ERR);
  CALL M$PFIL (TOP_OF_FILE) ALTRET (ERR);
  WRITEBUF = ' ';
  I = 1;
  DO WHILE SET;
     CALL M$READ (READIN)
        WHENRETURN DO;
           SUBSTR(WRITEBUF,((I-1)*8),8) = READ_KEY.KEY_VAL;
           I = I + 1;
           IF I = 11
           THEN DO;
              CALL M$WRITE (WRITEOUT) ALTRET (ERR);
              I = 1;
              WRITEBUF = ' ';
              END;
           END;
        WHENALTRETURN DO;
           IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.ERR# = %E$EOF
           THEN DO;
               IF WRITEBUF ~= ' '
               THEN DO;
                  CALL M$WRITE (WRITEOUT) ALTRET (ERR);
                  END;
              RETURN;
              END;
           END;
  END;
 ERR: ;
   BUPHER = '******  Please check your syntax!';
   MERR.CODE_ = VECTOR( B$TCB$->B$TCB.ALT$->B$ALT.ERR) ;
   CALL M$ERRMSG ( MERR) ;
 END LIST_ALL;
 
OUTPUT_FORM: PROC ALTRET;
 
  CALL READ_FORM ALTRET (FIN);
 
  IF FORM.GRAPHIC
  THEN DO;   /* This is the graphic form */
      BUFF$ = PINCRW (RESULT2.PTR$, %TEN024 - SIZEW(CHARS) );
      WORK$ = PINCRW (BUFF$, -SIZEW(GWRSP) );
      BWORK$ = PINCRW (WORK$, -(SIZEW(FS$WORKAUTO) + (%BTEXT_REC_SIZE/4)));
 
      GWRSP = '0'B;
      GWRSP.SUBFILE$ = DCBADDR (DCBNUM (M$LS));
      GWRSP.JIT$ = B$JIT$;
      GWRSP.SITEINFO = ADDR (SITEINFO);
      GWRSP.DATE_TIME = ENTADDR (DATE_TIME);
      GWRSP.ENTDISP = FORM.BANRDISP;
      GWRSP.START = 0;
 
      DO WHILE (GWRSP.START ~= -1);
         CALL FSK$GBANNER ( BUF$->FORM, GWRSP, BUFF$->CHARS,
                            BWORK$->FS$WORKAUTO) ALTRET (ERR);
         IF (GWRSP.START ~= -1)
         THEN DO;
            WRITEOUT.V.DVBYTE.VFC# = '1'B;
            WRITEOUT.BUF_.BOUND = GWRSP.MAXBYTES - 1;
            WRITEBUF = BUFF$->CHARS;
            CALL M$WRITE (WRITEOUT) ALTRET (ERR);
            WRITEOUT.V.DVBYTE.VFC# = '0'B;
            END;
         END;
      END;
 
  ELSE DO;  /* This is a non graphic form */
      BUFF$ = PINCRW (RESULT2.PTR$, %TEN024 - SIZEW(CHARS) );
      WORK$ = PINCRW (BUFF$, -SIZEW(GWRSP) );
      BWORK$ = PINCRW (WORK$, -(SIZEW(FS$WORKAUTO) + (%BTEXT_REC_SIZE/4)));
 
      FS$WRSP = '0'B;
      FS$WRSP.SUBFILE$ = DCBADDR (DCBNUM (M$LS));
      FS$WRSP.JIT$ = B$JIT$;
      FS$WRSP.SITEINFO = ADDR (SITEINFO);
      FS$WRSP.WIDTH = FORM.SOFTFORM.VLPPLATEN.WIDTH;
      FS$WRSP.DATE_TIME = ENTADDR (DATE_TIME);
 
      IF (FORM.BANRDISP = 0)
      THEN DO;
         CALL CONCAT (WRITEBUF, 'There''s no banner defined for form ',
                  FORM.FNAME);
         CALL M$WRITE (WRITEOUT) ALTRET (ERR);
         END;
      ELSE DO;  /* There is a form, lets do the loop */
         DO WHILE (FS$WRSP.START ~= -1);
            CALL FSK$BANNER (PINCRW (BUF$, FORM.BANRDISP)->CHARS,
                             FS$WRSP, BUFF$->CHARS,
                             BWORK$->FS$WORKAUTO) ALTRET (ERR);
            IF (FS$WRSP.START ~= -1)
            THEN DO;
               WRITEOUT.V.DVBYTE.VFC# = '1'B;
               WRITEOUT.BUF_.BOUND = FS$WRSP.MAXBYTES - 1;
               WRITEBUF = BUFF$->CHARS;
               CALL M$WRITE (WRITEOUT) ALTRET (ERR);
               WRITEOUT.V.DVBYTE.VFC# = '0'B;
               END;
            END; /* OF THE DO WHILE */
         END;
      END;  /* Do for a regular form */
 
  RETURN;
 ERR: ;
   BUPHER = '******  Please check your syntax!';
   MERR.CODE_ = VECTOR( B$TCB$->B$TCB.ALT$->B$ALT.ERR) ;
   CALL M$ERRMSG ( MERR) ;
FIN: ;
END OUTPUT_FORM;
 
 
READ_FORM: PROC ALTRET;
  READIN.V.KEYS# = SET;
  READIN.V.KEYR# = NOTSET;
 
   READIN.BUF_.BOUND = ((%TEN024 * 4) - 1) - SIZEC (FS$DEST);
   READIN.BUF_.BUF$ = BUF$;
  CALL M$READ (READIN)
  WHENALTRETURN DO;
     WRITEBUF = 'The specified form does not exist, or can''t be read, use (?) to list the forms.';
     CALL M$WRITE (WRITEOUT) ALTRET (ERR);
     ALTRETURN;
     END;
 
  RETURN;
 ERR: ;
   BUPHER = 'A WRITE error has been encountered!';
   MERR.CODE_ = VECTOR( B$TCB$->B$TCB.ALT$->B$ALT.ERR) ;
   CALL M$ERRMSG ( MERR) ;
END READ_FORM;
 
 
CALL M$FDS (REL_PAGE1);
CALL M$FDS (REL_PAGE2);
CALL M$CLOSE (CLOSE_OU);
CALL M$CLOSE (CLOSE_SI);
END BANTER;
 
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
DATE_TIME: PROC (PDATE, PTIME);
DCL PDATE CHAR (8) UNAL;
DCL PTIME CHAR (5) UNAL;
 
%INCLUDE CP_6;
 
DCL FTIME CHAR (11) ALIGNED STATIC;
DCL FDAY CHAR (3) ALIGNED STATIC;
DCL FDATE CHAR (8) ALIGNED STATIC;
%FPT_TIME (FPTN = GET_TIME,
            DEST = LOCAL,
            DATE = FDATE,
            DAY = FDAY,
            TIME = FTIME,
            SOURCE = CLOCK);
 
CALL M$TIME (GET_TIME) ALTRET (ERR);
 
PTIME = SUBSTR (FTIME, 0, 5);
PDATE = FDATE;
 
RETURN;
 
ERR: ;
   PDATE = 'THE DATE';
   PTIME = 'ATIME';
RETURN;
END DATE_TIME;
 
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
 
FSK$GETBANNERTEXT: PROC (RD$,TEXTWORK,READ_ALREADY, ITEM#) ALTRET;
DCL RD$ PTR;
DCL 1 TEXTWORK,
         2 COUNT UBIN BYTE UNAL,
         2 TEXT CHAR (256);
DCL READ_ALREADY BIT (1);
DCL ITEM# UBIN;
 
%INCLUDE CP_6;
 
%INCLUDE FS_BANNER_C;
%FS$BANNER;
%INCLUDE AS_SUPER_C;
%AS_USERS;
%INCLUDE FS_SUPER_C;
%FS$WORKAUTO;
 
DCL RDBUF CHAR (%BTEXT_REC_SIZE) BASED (RD$);
DCL PTR2RD$ PTR;
DCL PTR2$ PTR;
 
DCL WOFF SBIN;
 
     PTR2RD$ = ADDR (RDBUF);
     IF NOT READ_ALREADY
     THEN DO;
            CALL FSK$READ_STAR_S (PTR2RD$) ALTRET (READ_ERR);
            READ_ALREADY = '1'B;
          END;
 
     WOFF = PTR2RD$->FS$BANNER.TEXT_OFF (ITEM#);
     IF WOFF ~= -1
     THEN DO;
            PTR2$ = PINCRC (PTR2RD$,WOFF);
            TEXTWORK.COUNT = PTR2$->TEXT.LENGTH_ ;
            TEXTWORK.TEXT = PTR2$->TEXT.VAL ;
          END;
     ELSE DO;
            TEXTWORK.COUNT = 0;
            TEXTWORK.TEXT = ' ';
          END;
 
     RETURN;
READ_ERR: ;
     ALTRETURN;
FSK$READ_STAR_S: PROC(BUF$) ALTRET;
DCL BUF$ PTR;
 
%FPT_READ (FPTN = READ_STAR_S,
           DCB = M$SS,
           KEY = BTEXT_KEY,
           KEYS = YES,
           KEYR = NO);
 
%FPT_OPEN (FPTN = OPEN_STAR_S,
            FUN = IN,
            SHARE = ALL,
            ASN = FILE,
            NAME = STAR_S_NAME,
            DCB = M$SS);
 
%FPT_CLOSE (FPTN = CLOSE_STAR_S,
            DCB = M$SS);
 
%VLP_NAME (FPTN = STAR_S_NAME,
            NAME = '*S');
 
DCL M$SS DCB;
DCL 1 BTEXT_KEY CONSTANT,
   2 L UBIN  BYTE UNAL INIT (10),
   2 C CHAR (10) INIT ('BANNERTEXT');
DCL RDBUF CHAR (%BTEXT_REC_SIZE) BASED (BUF$);
 
READ_STAR_S.BUF_.BUF$ = BUF$;
READ_STAR_S.BUF_.BOUND = %BTEXT_REC_SIZE;
 
CALL M$OPEN (OPEN_STAR_S) ALTRET (ERR);
CALL M$READ (READ_STAR_S) ALTRET (ERR);
CALL M$CLOSE (CLOSE_STAR_S) ALTRET (ERR);
 
RETURN;
ERR: ;
 ALTRETURN;
END FSK$READ_STAR_S;
 
END FSK$GETBANNERTEXT;
