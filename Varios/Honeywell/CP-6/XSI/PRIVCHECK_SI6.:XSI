/*M* PRIVCHECK - Program to check user's active privileges */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* DMR,PLM=5,IND=5,CTI=5,SDI=5,MCL=10,CSI=0,ECI=0 */
                                        /**/
                                        /**/
PRIVCHECK: PROC MAIN;
                                        /**/
                                        /**/
                              /*
                                   External references
                                                                  */
DCL B$JIT$ PTR SYMREF;
DCL B$TCB$ PTR SYMREF;
DCL DAM$MAP ENTRY(5) ALTRET;
DCL DAM$INIT ENTRY ALTRET;
                              /*
                                   INCLUDE FILES
                                                                  */
     %INCLUDE B$JIT;
                                        /**/
     %INCLUDE CP_6;
                                        /**/
     %INCLUDE DA_MAP_R;
                                        /**/
     %INCLUDE CP_6_SUBS;
                                        /**/
     %INCLUDE AS_SUPER_C;
                                        /**/
                              /*
                                   DCB declarations
                                                                  */
DCL M$LO DCB;
DCL M$DO DCB;
          %M$DCB    (DCBN=M$USERS,
                         ASN=FILE,
                         FUN=IN,
                         NAME=':USERS',
                         ACCT=':SYS');
 
                              /*
                                   FPT declarations
                                                                  */
     %FPT_OPEN      (FPTN=OPEN_LO,
                         DCB=M$LO,
                         FUN=CREATE,
                         EXIST=OLDFILE,
                         CTG=YES);
 
     %FPT_CLOSE     (FPTN=CLOSE_LO_REL,
                         DCB=M$LO,
                         DISP=RELEASE);
 
     %FPT_CLOSE     (FPTN=CLOSE_LO_SAVE,
                         DCB=M$LO,
                         DISP=SAVE);
 
     %FPT_OPEN      (FPTN=OPEN_USERS,
                         DCB=M$USERS,
                         FUN=IN,
                         SHARE=ALL,
                         STCLASS=CONSTANT);
 
     %FPT_PRIV      (FPTN=GET_SPC_AND_FMS,
                         PRIV="%(%PR_SPCLMM#|%PR_FMSEC#)",
                         AUTH=YES);
 
     %FPT_WRITE     (FPTN=WRITE_LO,
                         DCB=M$LO,
                         BUF=LO_BUFFER,
                         WAIT=YES);
 
     %FPT_GDP       (FPTN=GET_SOME_PAGES,
                         STCLASS=STATIC,
                         PAGES=10,
                         RESULTS=GDS_VECTOR);
 
          %VLP_VECTOR (FPTN=GDS_VECTOR,
                         STCLASS=STATIC);
 
     %FPT_READ      (FPTN=READ_USERS,
                         DCB=M$USERS,
                         BUF=NIL,
                         KEY=USERS_KEY,
                         KEYS=YES,
                         WAIT=YES);
 
                              /*
                                   AUTO data
                                                                  */
DCL TEMP SBIN WORD AUTO;
DCL ANYFLG BIT(1) ALIGNED AUTO;
DCL JIT$ PTR AUTO;
DCL I UBIN WORD AUTO;
DCL J SBIN WORD AUTO;
                              /*
                                   Local CONSTANT data
                                                                  */
                              /*
                                   Local STATIC data
                                                                  */
DCL USERS_CHECKED (0:255) UBIN BYTE STATIC INIT(0*0);
 
DCL 1 USERS_KEY STATIC,
         2 TXTC UBIN BYTE UNAL,
         2 ACCN CHAR(8) UNAL,
         2 UNAME CHAR(12) UNAL;
 
DCL USER_REC$ PTR STATIC;
DCL ACTIVE_PRIVS BIT(36) STATIC ALIGNED;
DCL ACTIVE_PPRIVS BIT(36) STATIC ALIGNED;
DCL USERS_PRIVS BIT(36) STATIC ALIGNED;
DCL USERS_PPRIVS BIT(36) STATIC ALIGNED;
DCL CULPRIT BIT(1) ALIGNED STATIC;
DCL MODE SBIN WORD STATIC;
DCL CCBUFSTART SBIN WORD STATIC;
DCL CCBUFEND SBIN WORD STATIC;
DCL 1 LO_BUFFER STATIC,
         2 CHARS CHAR(400) UNAL;
DCL 1 PRIV_BUFFERC STATIC,
         2 ACCN CHAR(8) UNAL INIT(' '),
         2 * CHAR(1) UNAL INIT (' '),
         2 UNAME CHAR(12) UNAL INIT(' '),
         2 * CHAR(1) UNAL INIT (' '),
         2 * CHAR(9) UNAL INIT (' PRIV ON='),
         2 P_ACTIVE CHAR(12) UNAL INIT (' '),
         2 * CHAR(6) UNAL INIT(' AUTH='),
         2 P_USER CHAR(12) UNAL INIT(' '),
         2 * CHAR(2) UNAL INIT(' !');
DCL 1 PPRIV_BUFFERC STATIC,
         2 ACCN CHAR(8) UNAL INIT(' '),
         2 * CHAR(1) UNAL INIT (' '),
         2 UNAME CHAR(12) UNAL INIT(' '),
         2 * CHAR(1) UNAL INIT (' '),
         2 * CHAR(9) UNAL INIT('PPRIV ON='),
         2 PP_ACTIVE CHAR(12) UNAL INIT(' '),
         2 * CHAR(6) UNAL INIT(' AUTH='),
         2 PP_USER CHAR(12) UNAL INIT(' '),
         2 * CHAR(2) UNAL INIT(' !');
DCL 1 NOUSER_BUFFERC STATIC,
         2 ACCN CHAR(8) UNAL INIT(' '),
         2 * CHAR(1) UNAL INIT (' '),
         2 UNAME CHAR(12) UNAL INIT(' '),
         2 * CHAR(1) UNAL INIT (' '),
         2 * CHAR(10) UNAL INIT('THIS USER '),
         2 * CHAR(10) UNAL INIT('IS NOT AUT'),
         2 * CHAR(10) UNAL INIT('HORIZED AT'),
         2 * CHAR(10) UNAL INIT(' ALL!     '),
         2 * CHAR(1) UNAL INIT('!');
DCL LO_BUFFER$ PTR STATIC INIT(ADDR(LO_BUFFER));
 
DCL USERNO SBIN WORD STATIC;
 
                                        /**/
                                        /**/
                                   /*
                                        BASED data definitions
                                                                  */
 
DCL 1 BUFFER_IMAGE BASED(LO_BUFFER$),
         2 ACCN CHAR(8) UNAL,
         2 * CHAR(1) UNAL,
         2 UNAME CHAR(12) UNAL,
         2 * CHAR(1) UNAL,
         2 * CHAR(9) UNAL,
         2 ACTIVE CHAR(12) UNAL,
         2 * CHAR(6) UNAL,
         2 AUTH CHAR(12) UNAL;
 
     %F$DCB;
 
     %B$TCB;
 
     %B$ALT;
 
     %AS_USERS      (STR_NAME=AS$USERS,
                         STCLASS="BASED(USER_REC$)");
 
 
DCL 1 BASED_VECTOR BASED ALIGNED,
         2 WBOUND UBIN HALF HALIGNED,
         2 * UBIN HALF HALIGNED,
         2 PTR$ PTR ALIGNED;
                              /*
                                   Locally needed %SUBs
                                                                  */
%SUB TRUE#='1'B /* TRUE# */;
%SUB FALSE#='0'B /* FALSE# */;
 
                                        /* SUB FOR ACCESSING ALTRET FRAME */
%SUB B$ALT="B$TCB$->B$TCB.ALT$->B$ALT";
 
%EJECT;
/********************************************************************
 ***                                                              ***
 ***                                                              ***
 ***      Begin   PRIVCHECK   main                                   ***
 ***                                                              ***
 ***                                                              ***
 ********************************************************************/
 
 
 
                                   /*
                                        Setup M$LO DCB usage
                                                                  */
     CALL M$OPEN(OPEN_LO);
     IF DCBADDR(DCBNUM(M$LO)) -> F$DCB.WIDTH# > 0
          AND
          DCBADDR(DCBNUM(M$LO)) -> F$DCB.WIDTH# < 139
     THEN
          WRITE_LO.BUF_.BOUND = DCBADDR(DCBNUM(M$LO))->F$DCB.WIDTH#;
                                   /*
                                        Get some privileges
                                                                  */
     CALL M$SPRIV(GET_SPC_AND_FMS) ALTRET (CRASH_AND_BURN);
 
                                   /*
                                        Set up the :USERS file DCB
                                                                  */
     CALL M$OPEN (OPEN_USERS);
 
                                   /*
                                        Get some memory for users
                                        records buffer
                                                                  */
     CALL M$GDP (GET_SOME_PAGES) ALTRET (CRASH_AND_BURN);
 
     READ_USERS.BUF_ = GDS_VECTOR;
 
     USER_REC$ = ADDR(GDS_VECTOR) -> BASED_VECTOR.PTR$;
 
                                   /*
                                        Get initial mapping info
                                                                  */
     CALL DAM$INIT;
                                   /*
                                        Did we print antyhing?
                                                                  */
     ANYFLG = FALSE#;
 
 
 
     DO USERNO=1 TO DA_MUAIS;
 
          CALL DAM$MAP(B$JIT$,JIT$,-USERNO,0) ALTRET(NEXT_1);
 
                                   /*
                                        Skip system ghosts
                                                                  */
          IF JIT$->B$JIT.USER < 13
          THEN
               GOTO NEXT_1;
 
                                   /*
                                        Got one, set up users read
                                                                  */
          USERS_KEY.ACCN = JIT$ -> B$JIT.ACCN;
          USERS_KEY.UNAME = JIT$ -> B$JIT.UNAME;
 
          I = SIZEC(USERS_KEY.UNAME);
 
          DO WHILE ((SUBSTR(USERS_KEY.UNAME,I-1,1) = ' ')
               AND
               (I > 1));
 
               I = I - 1;
 
             END;                       /* DO WHILE */
 
          USERS_KEY.TXTC = SIZEC(USERS_KEY.ACCN) + I;
 
          CCBUFSTART = 0;
 
          DO WHILE ((SUBSTR(JIT$ -> B$JIT.CCBUF,CCBUFSTART,1) = ' ')
               AND
               (CCBUFSTART < 255));
               CCBUFSTART = CCBUFSTART + 1;
 
             END;                       /* DO WHILE STRIPPING CCBUF */
 
          CCBUFEND = 255;
 
          DO WHILE ((SUBSTR(JIT$ -> B$JIT.CCBUF,CCBUFEND,1) = ' ')
               AND
               (CCBUFEND > CCBUFSTART));
 
               CCBUFEND = CCBUFEND - 1;
 
             END;                       /* DO WHILE SIZING CCBUF */
 
          CCBUFEND = CCBUFEND - CCBUFSTART + 1;
 
 
          CALL M$READ (READ_USERS) ALTRET (NO_USERS_ENTRY);
 
          IF DCBADDR(DCBNUM(M$USERS)) -> F$DCB.ARS# <
               POFFC (ADDR(AS$USERS.PRIV(0)),USER_REC$)
          THEN
               GOTO NO_USERS_ENTRY;
 
          MODE = JIT$ -> B$JIT.MODE - 1;
 
          ACTIVE_PRIVS = (JIT$ -> B$JIT.PRIV.AUTH |
               JIT$ -> B$JIT.PRIV.JOB);
 
          ACTIVE_PPRIVS = (JIT$ -> B$JIT.PPRIV);
 
          USERS_PRIVS = USER_REC$ -> AS$USERS.PRIV(MODE);
 
          USERS_PPRIVS = USER_REC$ -> AS$USERS.PPRIV(MODE);
 
CHECK_USERS: ;
 
          IF USERS_PRIVS \ ACTIVE_PRIVS
          THEN
          DO;
               LO_BUFFER = PRIV_BUFFERC;
               BUFFER_IMAGE.ACCN = USERS_KEY.ACCN;
               BUFFER_IMAGE.UNAME = USERS_KEY.UNAME;
               CALL OCT_CONV (ACTIVE_PRIVS,BUFFER_IMAGE.ACTIVE);
               CALL OCT_CONV (USERS_PRIVS,BUFFER_IMAGE.AUTH);
 
               CALL INSERT (LO_BUFFER.CHARS, 63, ,
                    SUBSTR(JIT$->B$JIT.CCBUF,CCBUFSTART,CCBUFEND));
 
               CALL M$WRITE (WRITE_LO);
 
               ANYFLG = TRUE#;
             END;                       /* DO IF PRIVS ~= */
 
 
          IF USERS_PPRIVS \ ACTIVE_PPRIVS
          THEN
          DO;
               LO_BUFFER = PPRIV_BUFFERC;
               BUFFER_IMAGE.ACCN = USERS_KEY.ACCN;
               BUFFER_IMAGE.UNAME = USERS_KEY.UNAME;
               CALL OCT_CONV (ACTIVE_PPRIVS,BUFFER_IMAGE.ACTIVE);
               CALL OCT_CONV (USERS_PPRIVS,BUFFER_IMAGE.AUTH);
 
               CALL INSERT (LO_BUFFER.CHARS, 63, ,
                    SUBSTR(JIT$->B$JIT.CCBUF,CCBUFSTART,CCBUFEND));
 
               CALL M$WRITE (WRITE_LO);
 
               ANYFLG = TRUE#;
             END;                       /* DO IF PPRIVS ~= */
 
NEXT_1:   ;
        END;                            /* DO USERNO = 1 TO MAXUSERS */
 
 
     IF ~ANYFLG
     THEN
     DO;
          CALL M$CLOSE (CLOSE_LO_REL);
        END;                            /* DO IF NOTHING WRITTEN */
     ELSE
     DO;
          CALL M$CLOSE (CLOSE_LO_SAVE);
        END;                            /* DO IF SOMETHING WRITTEN */
 
     CALL M$EXIT;
 
                                        /**/
 
NO_USERS_ENTRY: ;
 
     IF JIT$ -> B$JIT.MODE = %M_GHOST#
          AND
          USERS_KEY.ACCN = ':SYS    '
          AND
          USERS_KEY.UNAME = 'SCOTTY      '
     THEN
          GOTO NEXT_1;
 
     IF JIT$ -> B$JIT.MODE = %M_GHOST#
          AND
          USERS_KEY.ACCN = ':SYS    '
          AND
          USERS_KEY.UNAME = 'ANLZ        '
     THEN
          GOTO NEXT_1;
 
     IF JIT$ -> B$JIT.MODE = %M_GHOST#
          AND
          USERS_KEY.ACCN = ':SYS    '
          AND
          USERS_KEY.UNAME = 'NETCON      '
     THEN
          GOTO NEXT_1;
 
     IF JIT$ -> B$JIT.MODE = %M_GHOST#
          AND
          USERS_KEY.ACCN = ':SYS    '
          AND
          USERS_KEY.UNAME = 'FEPCON      '
     THEN
          GOTO NEXT_1;
 
     IF JIT$ -> B$JIT.MODE = %M_GHOST#
          AND
          USERS_KEY.ACCN = ':SYS    '
          AND
          USERS_KEY.UNAME = 'RCVR2       '
     THEN
          GOTO NEXT_1;
 
     LO_BUFFER = NOUSER_BUFFERC;
     BUFFER_IMAGE.ACCN = USERS_KEY.ACCN;
     BUFFER_IMAGE.UNAME = USERS_KEY.UNAME;
 
     CALL INSERT (LO_BUFFER.CHARS, 63, ,
          SUBSTR(JIT$->B$JIT.CCBUF,CCBUFSTART,CCBUFEND));
 
 
     CALL M$WRITE (WRITE_LO);
 
     ANYFLG = TRUE#;
 
     USERS_PRIVS = FALSE#;
 
     USERS_PPRIVS = FALSE#;
 
     GOTO CHECK_USERS;
 
 
 
CRASH_AND_BURN: ;
 
     CALL M$XXX;
 
 
%EJECT;
 
OCT_CONV: PROC (NUMBER_IN, STRING_OUT);
 
DCL NUMBER_IN(0:11) UBIN(3) UNAL;
DCL STRING_OUT(0:11) UBIN BYTE UNAL;
 
DCL CTR SBIN;
 
     DO CTR = 0 TO 11;
 
          STRING_OUT(CTR) = NUMBER_IN(CTR) + 48;
 
        END;                            /* DO CTR */
 
     RETURN;
 
END OCT_CONV;
 
 
 
END PRIVCHECK;
