.*M*
Help file for: FLEX.X
.*T*
 **************************************************************
 *                                                            *
 *  Copyright (c) Bull HN Information Systems Inc., 1989      *
 *                                                            *
 **************************************************************
.*A*                                             
FLEX is a rewrite of LEX to create much faster lexical analyzers using smaller
tables.  FLEX creates a C function(yylex) that processes character input
streams.  The process is determined by the regular expressions and the
corresponding code fragments (actions) in the input file.
.*B*
   !FLEX.X [options] INFID
 
options
      Are one or more FLEX options separated by spaces. Options are: -oOUTFID,
-t, -d, -f, -i, -s, -v, -F, -I, -L, -T, -S, -c[efmF] -p -b
 
INFID
      Identifies the input source file for FLEX.
 
.*B*
For a list of options/topics, type:
      HELP (FLEX) TOPICS
.*R*
For HELP on a specific option, type:
      HELP (FLEX) option
.*K* OPTIONS options
HELP is available for the following FLEX options:
 
OUTFID      OUTPUT_STDOUT     DEBUG       FAST_TABLE CASE_INSENSITIVE
PERFORMANCE BACKTRACKING SUPRESS_ECHO   SUMMARY_INFO FAST_SCANNER
INTERACTIVE_SCANNER NOLINE_DIRECTIVES TRACE_FLEX  SKELETON_FILE
TABLE_COMPRESSION
.*K* OUTFID
-oOUTFID[.ACCT]
 
Specifying this option cause the output file to be written to OUTFID[.ACCT]
instead of the file *lex:yy:c.
 
.*K* OUTPUT_STDOUT
-t
 
Specifying this option causes the output of LEX to be written to stdout.
 
.*K* DEBUG
-d
 
Specifying this option makes the generated scanner run in debug mode.  Whenever
a pattern is recognized the scanner will write to stderr a line of the form
--accepting rule #n.  Rules are numbered sequential with the first one being 1.
 
.*K* FAST_TABLE
-f
 
Creates a full table for FLEX.  The actual compilation takes longer but creates
a faster scanner.  (This option is equivalent to -cf see TABLE_COMPRESSION).
 
.*K* CASE_INSENSITIVE
-i
 
Creates a case insensitive scanner.  The case of letters given in the FLEX
input patterns will be ignored, and the rules will matched regardless of case.
The matched text given in yytext will have the preserved case.
 
.*K* SUPRESS_ECHO
-s
 
Causes the default rule (that unmatched scanner input is echoed to stdout) to
be suppressed.  If the scanner encounters input that does not match one of its
rules, it aborts with an error.  This option is useful for finding holes in a
scanner's rule set.
 
.*K* SUMMARY_INFO
-v
 
Prints to stderr a summary of statistics of the generated scanner.  Most of
these statistics are meaningless to the casual FLEX user.
 
.*K* FAST_SCANNER
-F
 
Specifies that the fast scanner table representation should be used.  This
representation is about as fast as the full table representation (-f), and for
some sets of patterns will be considerable smaller (and for others, larger).
This option is equivalent to -cF (see TABLE_COMPRESSION).
 
.*K* INTERACTIVE_SCANNER
-I
 
This instruct FLEX to generate an interactive scanner.  Normally, scanners
generated by FLEX always look ahead one character before deciding that a rule
has been matched.  At the possible cost of some scanning overhead, FLEX will
only generate a scanner which only looks ahead when needed.  Such scanners are
called interactive because you want user's input to be terminated with a
newline, and without requiring the user to type an additional character after
the newline to have the newline recognized.
 
Note that -I can't be used in conjunction with, -f, -F, -cf, -cF
 
.*K* NOLINE_DIRECTIVES
-L
 
Causes FLEX to not generate #line directives.
 
.*K* TRACE_FLEX
-T
 
Makes FLEX run in trace mode.  It generates "A LOT" of output and should only
be used for mantaining FLEX.
 
.*K* TABLE_COMPRESSION
-c[efmF]
 
These options control the degree of table compression. Following is a summary
of what the possible combinations can do:
.*X*
.FIF
.*R*
-ce   -  Directs FLEX to construct equivalence classes i.e., sets of
         characters which have identical lexical properties (e.g.,
         if the only appearance of digits is in the rule [0-9] all
         the digits will be put in the same equivalence class.
 
-cf   -  Directs FLEX to use the full scanner tables and should not
         take advantage of of similar transition functions for
         different states.
 
-cF   -  Directs FLEX to use the fast scanner representation
         (described under FAST_SCANNER).
 
-cm   -  Directs FLEX to construct meta-equivalence classes which are
         sets of equivalence classes that are commonly used together.
 
-c    -  Directs FLEX to use compressed scanner tables but neither
         equivalence or meta-equivalence classes should be used.
 
.*X*
.FIN
.*R*
The default setting is -cem which specifies that FLEX should generate
equivalence and meta-equivalence classes.  This setting provides the highest
degree of table compression.  You can trade off faster executing scanners at
the cost of larger tables with the following being true:
.*X*
.FIF
.*R*
 
slowest           smallest
         -cem
         -ce
         -cm
         -c
         -c{f,F}e
         -c{f,F}
fastest           biggest
 
.*X*
.FIN
.*R*
.*K* SKELETON_FILE
-Sskeleton_file
 
This overrides the default skeleton file from which FLEX constructs its
scanners. This should only be used for maintenance or development.
 
.*K* PERFORMANCE
-p
 
This option generates a performance report to stderr.  The report consists of
comments regarding features of the scanner rules which result in slower
scanners.
 
.*K* BACKTRACKING
-b
 
This option generates backtracking information to lex:backtrack.  This is a
list of scanner states which require backtracking and the characters on which
they do so.  By adding rules one can remove backtracking states.  If all
backtracking states are eliminated, the generated scanner will run faster.
 
.*K*  FLEX_INCOMPATIBILITIES
FLEX is fully compatible with LEX with the following exceptions:
.*X*
.FIF
.*R*
 
      1) There is no runtime library to link with.  This means you
         must supply your own main program to link with.
 
      2) The undocumented lex-scanner internal variable yylineno is
         not supported.
 
      3) The function input() is not redefinable. Input can be
         controlled by redefining the YY_INPUT macro.
 
      4) The function output() is not supported.
 
      5) FLEX only reads from one input file, while LEX's input
         is made up of the concatenation of its input files.
 
.*X*
.FIN
.*R*
.*K* ENHANCEMENTS
FLEX provides the following enhancements over LEX:
.*X*
.FIF
.*R*
 
      1) Exclusive start-conditions can be declared by using %x
         instead of %s.  These start-conditions have the property that
         when they are active, no other rule is active.  This feature
         makes it easy to specify "mini-scanners" which scan
         portions of the input that are syntactically different
         from the rest (e.g., comments).
 
      2) FLEX dynamically resizes its internal tables, so directives
         like "%a 3000" are not needed when specifying large scanners.
 
      3) The scanning routine declared by FLEX is declared using the
         macro YY_DECL.  By redefining this macro you can change the
         routine's name and its calling sequence.
 
      4) FLEX generates #line directives mapping lines of output to
         their origin in the input file.
 
      5) FLEX allows multiple actions on the same line separated by
         semi-colons.
 
      6) Actions can begin with %{ and be terminated by %}.  In this
         case FLEX does not count braces to figure out where the
         action terminates.
 
      7) All the scanner functions (ECHO, yywrap, ...) are written
         as macros (except unput() and input()), so that they can be
         redefined without requiring a library to link to.
 
.*X*
.FIN
.*R*
.*K* FILE_FORMAT
The general format for a FLEX file is:
.*X*
.FIF
.*R*
 
[definitions]
%%
[rules]
[%%
user functions]
.*X*
.FIN
.*R*
.*K* DEFINITIONS
.*X*
.FIF
.*R*
The definition section contains:
 
   1) Definitions in the form of "name space " " translation"
      (e.g., LETTER [a-zA-z] )
 
   2) Included C code in the form of space " " code
 
   3) Included C code in the form (Note that the %{ and %} must
      appear in column 1 of the source file).
 
%{
   code
%}
 
.*X*
.FIN
.*R*
.*K* RULES
.*X*
.FIF
.*R*
A lexical rule has the form:
      reg_expr  action
 
reg_expr is any regular expression
action is any valid c source code
 
.*X*
.FIN
.*R*
.*K* REGULAR_EXPRESSIONS
A regular expression specifies a set of strings to be matched.  It contains
both alphanumeric characters and operator characters.  For example the regular
expression
 
c3po
 
matches the string "c3po" wherever it appears.
 
The operators for regular expressions are:
 
 " \ [ ] ^ - ? . * + | ( ) $ / { } % < >
 
If these operators are to be used as characters they must be enclosed with
double quotes or escaped.  For example
 
 "x+5"    - matches the string x+5
 x\+5     - matches the string x+5
 
.*B*
Classes of characters can be specified using the operators [].  [abc] matches
either "a", or "b" or "c".  Inside the brackets most other operators are
ignored except "-", "\", "^".  The "-"(dash) indicates a range of characters
For example
 
 [A-Z0-9] - matches the character class of all uppercase letters and
            all numbers
 
Ranges can be given in any order but may not cross the boundaries of lower to
uppercase letters or numbers (e.g., [a-9] is illegal).  To match a dash within
the brackets it should be escaped with the "\" (backslash).  So the expression
 
 [\-+.0-9Ee] -  Matches the valid characters in a floating point number
 
The "^"(not) character when placed as the first character in a character class
means to complement/not the character class.
 
 [^A-Za-z]   - The character class of all non-alphabetic characters
               including all control characters
 
.*B*
To match any character except the newline (\n) the "."(dot) is used.
 
The operator "?" is used to indicate an optional part of an expression so the
regular expression
 
 ab?c  - matches either abc or ab
 
The two operators "+"(plus) and "*"(star) are used for repetitions of classes.
A plus means one or more instances while a star matches zero or more instances.
For example
 
 ab*   -  Matches the strings a ab abb abbb ...
 ab+   -  Matches the strings ab abb abbb abbbb ...
 [a-zA-Z_][A-Za-z0-9_]*  - Matches a C identifier
 
the "|"(or) operator indicates alternation so
 
 ab|cd    -  Matches ab or cd
 ab|cd+   -  Matches ab cd cdd cddd ...
 (ab|cd)+ -  Matches ab abcd abababcdabcd ...
             Note that parenthesis are used for grouping
 
.*B*
FLEX recognizes only a small amount of context with the simplest of the
recognition being "$"(dollar) and "^"(not).  If the first character of a
regular expression is a "^" then the entire regular expression must be matched
at the beginning of line.  If the last character of a regular expression is a
"$" then the expression is only matched at the end of a line.
 
The "/" matches a character with trailing context. so the regular expression
 
ab/cd    -  Matches "ab" but only if followed by "cd".
 
.*B*
The {}(braces) are used to indicate definition expansion.  So the FLEX file
 
 LETTER   [a-zA-Z]
 %%
 string   {LETTER}+
 
Matches all strings consisting of just letters
 
.*K* ACTIONS
When an expression is matched, FLEX executes the corresponding action.  This
action can be as simple as a C null statement (;) or as complex as any C code
fragment.  The default action is to copy the input to the output.
 
FLEX uses several variables that the user has direct access to when an
expression is matched.  The text of the string that matched the regular
expression is in the variable yytext[], while the length is in the variable
yyleng.  So an expression that counts the number of words in a file, the total
number of characters in the file and outputs each word looks like
 
[a-zA-Z]+   {words++; numchars +=yyleng; printf("%s ",yytext);}
 
The last part of this action, printf("%s",yytext);, is such a common occuring
action LEX supplies the macro ECHO; that does the same thing.
 
.*K* YYLESS
yyless(n)
 
Sometimes a string that matches an expression may contain to many characters
and should be put back on the input stream.  The routine yyless(n) allows n
characters to be put back on the input stream.  This can be used when
ambiguities arise.  For the C string "=-a" a warning is printed out but it is
treated as =- a.  This would look like
 
=-[a-zA-Z] {
               printf("Warning ambiguous operator (=-)\n");
               yyless(yyleng-1);
               /*action for =-  */
            }
 
.*K* INPUT_FUNCTION
input()
 
This routine returns the next input character.
 
.*K* UNPUT_FUNCTION
unput(c)
 
Pushes back the character "c" to the input stream.
 
.*K* YYWRAP
yywrap()
 
This routine is called whenever an input file reaches end of file.  The routine
just returns a 1 and LEX does it clean-up.  Sometimes though the user may want
to open a second source file or write out some summary information.  If this is
the case, the user should supply his own yywrap().
 
.*K* AMBIGUOUS_RULES
FLEX has two rules it follows when input can be matched to one or more
expressions:
      1) The longest match is used
      2) If the lengths are equal, the rule that is first in the
         input file is used.
 
To see how this works consider
 
 float    keyword action ...
 [a-z]+   identifier action ...
 
 The following input matches
 
 floats   - matches [a-z]+
 float    - matches float
 flo      - matches [a-z]+
 
.*B*
These rules can sometimes cause some problems when using expressions involving
 .* for example
 
'.*'     looks like it matches strings enclosed in single quote but
         with the input:  " 'string1' and 'string2' and"
 
matches the input 'string1' and 'string2'
 
.*B*
FLEX only accepts one rule for each piece of input, but this can be overridden
by the action REJECT.  REJECT means go to the next alternative.  REJECT is
useful whenever the purpose of FLEX is not used to partition the input but to
detect all examples of the input even if they overlap and include each other.
For example:
 
 %%
 [a-z][a-z] {digram[yytext[0]][yytext[1]]++; REJECT;}
 . ;
 \n ;
 
Because it is necessary to pick up letter pairs at every character instead of
every other character REJECT is used.
 
REJECT does not rescan the input instead it remembers the results of the
previous scan.  Therefore the user must not have unput characters before a
REJECT.
 
.*K* BISON_USAGE
Since FLEX names its analyzer yylex() the same name as BISON expects for the
name of its lexical analyzer they fit very well together.  If FLEX is used with
BISON, each FLEX rule should end with
 
return(token); /* Where token is the appropriate value */
 
All that is then necessary is to link their two object units together.
 
.*K* EXAMPLE
The following example computes a histogram of the lengths of words in a text
file:
 
      int   lengs[100];
 %%
 [a-z]+   {lengs[yyleng]++;}
 \n       ;
 .        ;
 
 %%
 yywrap()
 {
    int i;
    printf ("Length # of words\n");
    for (i=0; i<100; i++)
       if (lengs[i])
          printf ("%5d%10d\n",i,lengs[i]);
    return(1);
 }
 
This program just accumulates the histogram without producing any output, and
at the end of input it writes out the histogram.
.*R*
.*K* XINDEX
FLEX.X
.*R*
AID=PROGRAMMING
.*R*
.*K* XINDEX_ABSTRACT
TOOL=FLEX.X
.*R*
Processes input streams based on regular expressions and the corresponding
actions.
.*K* CHANGES changes
900226
.*R*
User-visible:
 
-p flag generates a performance report to stderr.  The report consists of
comments regarding features of the scanner rules which result in slower
scanners.
 
-b flag generates backtracking information to lex.backtrack.
   This is a list of scanner states which require backtracking
   and the characters on which they do so.  By adding rules
   one can remove backtracking states.  If all backtracking states
   are eliminated, the generated scanner will run faster.
 
Variable trailing context now works, i.e., one can have rules like "(foo)*/[
\t]*bletch".  Some trailing context patterns still cannot be properly matched
and generate error messages.  These are patterns where the ending of the first
part of the rule matches the beginning of the second part, such as "zx*/xy*",
where the 'x*' matches the 'x' at the beginning of the trailing context.  Lex
won't get these patterns right either.
 
Faster scanners.
 
End-of-file rules.The special rule "<<EOF>>" indicates actions which are to be
taken when an end-of-file is encountered and yywrap() returns non-zero (i.e.,
indicates no further files to process).  See manual entry for example.
 
The -r (reject used) flag is gone.flex now scans the input for occurrences of
the string "REJECT" to determine if the action is needed.  It tries to be
intelligent about this but can be fooled.  One can force the presence or
absence of REJECT by adding a line in the first section of the form "%used
REJECT" or "%unused REJECT".
 
yymore() has been implemented.  Similarly to REJECT, flex detects the use of
yymore(), which can be overridden using "%used" or "%unused".
 
Patterns like "x{0,3}" now work (i.e., with lower-limit == 0).
 
Removed '\^x' for ctrl-x misfeature.
 
Added '\a' and '\v' escape sequences.
 
\<digits> now works for octal escape sequences; previously \0<digits> was
required.
 
Better error reporting; line numbers are associated with rules.
 
yyleng is a macro; it cannot be accessed outside of the scanner source file.
 
yytext and yyleng should not be modified within a flex action.
 
Generated scanners #define the name FLEX_SCANNER.
 
Rules are internally separated by YY_BREAK in lex.yy.c rather than break, to
allow redefinition.
 
The macro YY_USER_ACTION can be redefined to provide an action which is always
executed prior to the matched rule's action.
 
yyrestart() is a new action which can be used to restart the scanner after it
has seen an end-of-file (a "real" one, that is, one for which yywrap() returned
non-zero).  It takes a FILE* argument indicating a new file to scan and sets
things up so that a subsequent call to yylex() will start scanning that file.
 
Internal scanner names all preceded by "yy_"
 
lex.yy.c is deleted if errors are encountered during processing.
 
Comments may be put in the first section of the input by preceding them with
'#'.
 
 
 
Other changes:
 
   Some portability-related bugs fixed, in particular for machines
   with unsigned characters or sizeof( int* ) != sizeof( int ).
   Also, tweaks for VMS and Microsoft C (MS-DOS), and identifiers all
   trimmed to be 31 or fewer characters.  Shortened file names
   for dinosaur OS's.  Checks for allocating > 64K memory
   on 16 bit'ers.  Amiga tweaks.  Compiles using gcc on a Sun-3.
 
   Compressed and fast scanner skeletons merged.
 
   Skeleton header files done away with.
 
   Generated scanner uses prototypes and "const" for __STDC__.
 
   -DSV flag is now -DSYS_V for System V compilation.
 
   Removed all references to FTL language.
 
   Software now covered by BSD Copyright.
 
   flex will replace lex in subsequent BSD releases.
 
891001
.*R*
Released in the E02 X account
.*K* OWNER
Bill Eme, LADC
