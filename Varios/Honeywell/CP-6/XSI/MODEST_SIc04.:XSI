/*M* resp_pack:c -- decodes the Response Packet information     */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
 
/*F*    NAME: MODEST_SIc04    (resp_pack:c)
        PURPOSE: decoder function for the Response packet from CM
 
        ORIGINAL AUTHOR:  Arthur Tai, SDO, Phoenix (BULL HN)
        ENHANCEMENTS:  Jordan Boucher, LADC
        DATE:  August 7, 1989
      UPDATES:  JTB 9/1/89
*/
 
/*
**********************************************************************
*/
 
 
int response_pack (status,max_byte,pos)
char status[];
int max_byte, pos;
 
{
  char byte1, byte2, flag;
  int count;
 
  pos = pos - 2;
 
  for( count = 0; (pos < max_byte) && (count < 6); count++)   {
    byte1 = status[pos++];
    byte2 = status[pos++];
 
    switch (count)   {
      case '0'-'0':
        if (byte1 == '0')  {
          flag = byte2;
          if (byte2 == '1')
            printf ("Physical Command Reject = 01 \n");
          else if (byte2 == '2')
            printf ("IPI-3 Interrupr Response Type = 02 \n");
          else if (byte2 == '3')   {
            pos = response_03 (status,max_byte,pos);
            return (pos);
          }
          else if (byte2 == '4')
            printf ("IPI-3 Response for XNP Type = 04 \n");
          else if (byte2 == '5')   {
            pos = response_x5 (status,max_byte,pos);
            return (pos);
          }
          else if ((byte2 == 'B') || (byte2 == 'b'))   {
            pos = response_xb (status,max_byte,pos);
            return (pos);
          }
          else
            printf ("Resp. Type = %c%c  -- Unknown\n",byte1,byte2);
        }  /*end if*/
        else if ((byte1 == 'A') || (byte1 =='a'))   {
          if (byte2 == '0')   {
            pos = response_A0 (status,max_byte,pos);
            return (pos);
          }
          else if (byte2 == '1')   {
            pos = response_A1 (status,max_byte,pos);
            return (pos);
          }
          else if (byte2 == '2')   {
            pos = response_A2 (status,max_byte,pos);
            return (pos);
          }
          else   {
            printf ("Resp. Type = %c%c  -- Unknown\n",byte1,byte2);
            pos = max_byte;
          }
        }  /*end else if*/
/*      type_up = byte1;
        type_lo = byte2;  */
        break;
 
      case '1'-'0':
        slave_facility_addr (byte1,byte2);
        break;
 
      case '2'-'0':
        if (flag == '1')             /* Physical Cmd Rej */
          return (pos);
        else
          printf ("Packet Length = %c%c",byte1,byte2);
        break;
 
      case '3'-'0':
        printf ("%c%c\n",byte1,byte2);
        break;
 
      case '4'-'0':
        printf ("IPI3 TX # = %c%c",byte1,byte2);
        break;
 
      case '5'-'0':
        printf ("%c%c\n",byte1,byte2);
        break;
 
    }  /*end switch*/
  }  /*end for loop*/
return (pos);
}
 
/*
----------------------------------------------------------------------
*/
 
int response_03 (status,max_byte,pos)
char status[];
int max_byte, pos;
{
  char byte1, byte2;
 
  printf ("Resp. Type = 03 -- IPI-3 Response - Dummy XNP\n");
 
  if ( pos + 2 <= max_byte)   {
    byte1 = status [pos++];
    byte2 = status [pos++];
    slave_facility_addr (byte1,byte2);
  }
return (pos);
}
 
/*
----------------------------------------------------------------------
*/
 
int response_x5 (status,max_byte,pos)
char status[];
int max_byte, pos;
{
  int oct_count, count, flag;
  char byte1, byte2;
 
  oct_count = flag = 0;
  for (count=3;(pos + 2 <= max_byte) && (count >0); count--)   {
    byte1 = status [pos++];
    byte2 = status [pos++];
    oct_count++;
 
    switch (oct_count)   {
      case '1'-'0':
        if ((byte1 == '0') && (byte2 == '3'))   {
          printf ("Resp. Type = 05 03 -- Response to Slave Request Command\n");
          flag == 1;
        }
        else if (((byte1 == 'F') || (byte1 == 'f')) && (byte1 == byte2))   {
          printf ("Resp. Type = 05 -- IPI-1 Control Response Message\n");
          printf ("Octet 1 = %c%c  -- Microcontroller Initiated Response\n",byte1,byte2);
        }
        else   {
          printf ("Resp. Type = 05 -- IPI-1 Control Response Message\n");
          printf ("Octet 1 = %c%c  -- TX # of Command\n",byte1,byte2);
        }
        break;
 
      case '2'-'0':
        if (flag == 1)   /* Response to Slave Request Command */
          printf ("Octet 2 = %c%c  -- Bus A Cntl Info/Data In/Out\n",byte1,byte2);
        else            /* IPI-1 Control Response Message     */
          printf ("Octet 2 = %c%c  -- Bus A Octet\n",byte1,byte2);
        break;
 
      case '3'-'0':
        if (flag == 1)   /* Response to Slave Request Command */
          printf ("Octet 3 = %c%c  -- Bus B Resp Info/Data In/Out\n",byte1,byte2);
        else            /* IPI-1 Control Response Message     */
          printf ("Octet 3 = %c%c  -- Bus B Octet\n",byte1,byte2);
        break;
    }  /*end switch*/
  }  /*end for loop*/
return (pos);
}
 
/*
----------------------------------------------------------------------
*/
 
int response_xb (status,max_byte,pos)
char status[];
int max_byte, pos;
{
  char byte1, byte2;
 
  printf ("Resp Type = 0B  --  Command FIFO Reject Message\n");
  if (pos + 2 <= max_byte)   {
    byte1 = status [pos++];
    byte2 = status [pos++];
    printf ("Octet 1 = %c%c -- Unrecognized Command Code Return here\n",byte1,byte2);
  }
return (pos);
}
 
/*
----------------------------------------------------------------------
*/
 
int response_A0 (status,max_byte,pos)
char status[];
int max_byte, pos;
{
  char byte1, byte2;
 
  printf ("Resp Type = A0  -- Power on Self Tests Complete\n");
  if (pos + 2 <= max_byte)   {
    byte1 = status [pos++];
    byte2 = status [pos++];
    if (((byte1 == 'F') || (byte1 == 'f')) && (byte2 == '0'))
      printf ("Octet 1 = %c%c -- No test executed\n",byte1,byte2);
    else if (((byte1 == 'C') || (byte1 == 'c')) && (byte2 == '0'))
      printf ("Octet 1 = %c%c -- All tests Passed\n",byte1,byte2);
    else
      printf ("Octet 1 = %c%c -- Sequence # of failed Test\n",byte1,byte2);
  }
return (pos);
}
 
/*
----------------------------------------------------------------------
*/
 
int response_A1 (status,max_byte,pos)
char status[];
int max_byte, pos;
{
  int oct_count, count, flag;
  char byte1, byte2;
 
  oct_count = flag = 0;
  while (pos + 2 <= max_byte)   {
    byte1 = status [pos++];
    byte2 = status [pos++];
    oct_count++;
 
    if (oct_count == 1)   {
      if ((byte1 == 'F') || (byte1 == 'f'))   {
        if (byte2 == '8')   {
          printf ("Resp. Type = A1 F8 -- Micro Controller Register Dump\n");
          flag = 1;
        }
        else if ((byte2 == 'B') || (byte2 == 'b'))
          printf ("Resp. Type = A1 FB -- Scratch RAM Dump\n");
        else
          printf ("Resp. Type Unknown\n");
      }
      else
        printf ("Resp. Type Unknown\n");
    }
    else   {
      if (flag == 1)   {
        if (oct_count <= 17)
          printf ("Micro Reg. R%x = ", (count = (oct_count - 2)));
        else if (oct_count == 18)
          printf ("Carry Bit     = ");
        else if (oct_count == 19)   {
          printf ("Status Reg    = %c%c\n",byte1,byte2);
          return (pos);
        }
      }
      else if ((flag == 0) && (oct_count <= 255))
        printf ("RAM Loc.  %5x   = ", (count = (oct_count - 2)));
      printf (" %c%c\n",byte1,byte2);
    }  /*end else*/
  }  /*end while*/
return (pos);
}
 
/*
----------------------------------------------------------------------
*/
 
int response_A2 (status,max_byte,pos)
char status[];
int max_byte, pos;
{
  char byte1, byte2;
 
  printf ("Resp. Type = A2 -- Long Pause During Data Xfer\n");
  if ( pos + 2 <= max_byte)   {
    byte1 = status [pos++];
    byte2 = status [pos++];
    slave_facility_addr (byte1,byte2);
  }
return (pos);
}
 
/*
----------------------------------------------------------------------
*/
 
slave_facility_addr (byte1,byte2)
char byte1, byte2;
{
  int oct_data, up_bits, lo_bits;
 
  oct_data = ascii_to_dig (byte1,byte2);
  up_bits = oct_data & 0x0070;
  lo_bits = oct_data & 0x000f;
  up_bits >>= 4;
 
  if (oct_data & 0x80)
    printf ("Facility Address = %d      ",lo_bits);
  printf ("Slave Address = %d\n",up_bits);
return;
}
 
 
