/*M* RDHLP and WRHLP                                                         */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/**********************************************************************/
/*F*   NAME:   RDHLP
       PURPOSE: Read the :HLP or :HLP record for the current user
        DESCRIPTION: The users' name and account specified in the JIT
               are used as a key to read the specified record into a
               specified buffer.
*/
/*D*   NAME:   RDHLP
       CALL:   CALL RDHLP(DCB#)
       INTERFACE: WRITEMSGE,ENQUEUE,DEQUEUE
       INPUT:  B$JIT.ACCN - users account
               B$JIT.UNAME - users name
               DCB# - dcb utilized for reading
               BUF_ - vector framing input buffer
       OUTPUT: specified :HLP record in KL_DREC
        DESCRIPTION: The key to read the :HLP record is created from the
               users' name and account in the JIT and is of the form
               count-account-name. The file is opened
               in the mode specified and the record is read into the
               specified input buffer. Enqueueing is performed on the
               record. If a read error occurs, dequeueing is performed.
*/
/**********************************************************************/
RDHLP: PROC(DCB#) ALTRET;
 
DCL DCB# UBIN WORD;
 
           %INCLUDE CP_6;
           %INCLUDE CP_6_SUBS;
           %INCLUDE CP_MACROS_C;
           %INCLUDE B$JIT;
           %INCLUDE B_MACROS_C;
           %INCLUDE CP_SUBS_C;
           %INCLUDE CP_PERR_C;
           %INCLUDE KL_SUPER_C;
           %INCLUDE XU_MACRO_C;
           %F$DCB ;
DCL B$JIT$ PTR SYMREF;
DCL B$TCB$ PTR SYMREF;
DCL UNAME_SIZE UBIN(36) ALIGNED;
DCL 1 USERS_KEY ALIGNED SYMREF,
       2 CNT UBIN(9) UNAL,
       2 TXT CHAR(20);
DCL HLP_SZ UBIN WORD SYMREF;
%VLP_NAME(FPTN=COLONHLP,LEN=4,STCLASS="SYMREF");
%VLP_ACCT(FPTN=COLONSYS,STCLASS="SYMREF");
/***** external routines *****/
DCL WRITEMSGE ENTRY(5);
DCL ENQUEUE ENTRY(2) ALTRET;
DCL DEQUEUE ENTRY(2) ALTRET;
/***** fpts *****/
%FPT_OPEN(FPTN=FPT_OPEN,
        STCLASS=STATIC,
        NAME=COLONHLP,
        ACCT=COLONSYS,
        ASN=FILE,
        FUN=UPDATE,
        SHARE=ALL,
        ACS=DIRECT);
%FPT_CLOSE(FPTN=FPT_CLOSE,
        STCLASS=STATIC,
        DISP=SAVE);
%FPT_READ(FPTN=FPT_READ,
        STCLASS=STATIC,
        BUF=KL_DREC,
        KEY=USERS_KEY,
        KEYS=YES);
%KL_DREC(NAME=KL_DREC,STCLASS=SYMREF,LAST=",");
%KL_FEBLK(NAME=KL$FEBLK,RCNT=31,LVL=2) ;
/***** Based structures *****/
%B$TCB (STCLASS="BASED(B$TCB$)");
%B$ALT;
/***** error codes *****/
%ERR_CODE (NAME=E_FLEBUSY,MID#=CPC$SUBRMID,CODE#=E$FLEBUSY,STCLASS=CONSTANT);
%ERR_CODE (NAME=E_CANTRD,MID#=CPC$SUBRMID,CODE#=E$CANTRD,STCLASS=CONSTANT);
/**/
/*
     ***** Create key for reading record
*/
/*   ***** Determine no. Of chars */
  CALL INDEX(UNAME_SIZE,' ',B$JIT.UNAME); /*Get uname size*/
/*   ***** Store size,accn,uname */
  USERS_KEY.CNT=(SIZEC(B$JIT.ACCN)+UNAME_SIZE);
  CALL INSERT(USERS_KEY.TXT,0,USERS_KEY.CNT,B$JIT.ACCN,B$JIT.UNAME);
/*
     ***** Open file
*/
  FPT_OPEN.V.DCB#=DCB#;
  CALL M$OPEN(FPT_OPEN) ALTRET(E_OPEN);
/*
     ***** Enqueue record -> fun is update
*/
  CALL ENQUEUE(DCB#, USERS_KEY) ALTRET(E_ENQUEUE);
/*
     ***** Read the record
*/
  FPT_READ.V.DCB#=DCB#;
  CALL M$READ(FPT_READ) ALTRET(E_READ);
  HLP_SZ = DCBADDR(DCB#) -> F$DCB.ARS# ;
  RETURN;
E_OPEN:
/*E*    ERROR: CPC-E$FLEBUSY-E
        MESSAGE: %FN file busy, try again later
        DESCRIPTION: IBEX was unable to open the specified file
                        due to file being in use.
                        Execution of the command should be feasable later.
*/
/*E*    ERROR: CPC-E$CANTOPN-E
        MESSAGE: Unable to open %FN file
        DESCRIPTION: IBEX was unable to open the specified file.
*/
  IF B$TCB.ALT$ -> B$ALT.ERR.CODE = E$FLEBUSY
 
     THEN
        CALL WRITEMSGE(E_FLEBUSY,DCB#);
 
     ELSE
           CALL WRITEMSGE (B$TCB.ALT$ -> B$ALT.ERR,DCB#);
  ALTRETURN;
E_READ:
/*E*    ERROR: CPC-E$CANTRD-E
        MESSAGE: Error reading %FN file
        DESCRIPTION: You are unable to read the specified file.
*/
  CALL WRITEMSGE(E_CANTRD,DCB#);
/*
     *****     Dequeue only if queued(when update)
*/
 
  CALL DEQUEUE(DCB#, USERS_KEY) ALTRET(E_ENQUEUE);
E_ENQUEUE:
/*
     ***** Close file before returning
*/
  FPT_CLOSE.V.DCB#=DCB#;
  CALL M$CLOSE (FPT_CLOSE) ALTRET(E_CLOSE);
  ALTRETURN;
/**/
E_CLOSE:
  CALL WRITEMSGE (B$TCB.ALT$->B$ALT.ERR,DCB#);
END RDHLP;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/**********************************************************************/
/*F*   NAME:   WRHLP
       PURPOSE: Write the :HLP record for the current user
       DESCRIPTION: The users' name and account specified in the JIT
               is used as a key to write out the specified record from
               a specified buffer.
*/
/*D*   NAME:   WRHLP
       CALL:   CALL WRHLP(DCB#)
       INTERFACE: WRITEMSGE,DEQUEUE
       INPUT:  B$JIT.ACCN - users account
               B$JIT.UNAME - users name
       DCB# - dcb to utilize for writing
       OUTPUT: updated :HLP record
       DESCRIPTION: The key to write the record is created  from
               the users' name and account in the JIT and is of the form
               count-account-name. The dcb through which the write
               is to occur is expected to be open. The record
               is written from the specified output buffer. It is
               assumed the record is queued and dequeueing
               is performed.
*/
/***********************************************************************/
WRHLP: PROC(DCB#) ALTRET;
 
DCL DCB# UBIN WORD;
 
           %INCLUDE B$JIT;
           %INCLUDE CP_6;
           %INCLUDE XU_MACRO_C;
           %INCLUDE B_MACROS_C;
           %INCLUDE CP_MACROS_C;
           %INCLUDE CP_SUBS_C;
           %INCLUDE CP_PERR_C;
           %INCLUDE CP_6_SUBS;
           %INCLUDE KL_SUPER_C;
DCL B$JIT$ PTR SYMREF;
DCL UNAME_SIZE UBIN(36) ALIGNED;        /*#CHARS in name*/
DCL 1 USERS_KEY ALIGNED SYMREF,         /*Key for reading :USERS*/
       2 CNT UBIN(9) UNAL,
       2 TXT CHAR(20);
DCL HLP_SZ UBIN WORD SYMREF;
%VLP_NAME(FPTN=COLONHLP,LEN=4,STCLASS="SYMREF");
%VLP_ACCT(FPTN=COLONSYS,STCLASS="SYMREF");
/***** external routines *****/
DCL WRITEMSGE ENTRY(5);
DCL DEQUEUE ENTRY(2) ALTRET;           /*Dequeue :USERS*/
/***** fpts *****/
%FPT_CLOSE(FPTN=FPT_CLOSE,
        STCLASS=STATIC,
        DISP=SAVE);
%FPT_WRITE(FPTN=FPT_WRITE,
        STCLASS=STATIC,
        BUF=KL_DREC);
%KL_DREC(NAME=KL_DREC,STCLASS=SYMREF,LAST=",");
%KL_FEBLK(NAME=KL$FEBLK,RCNT=31,LVL=2) ;
/***** error codes *****/
%ERR_CODE (NAME=E_CANTWR,MID#=CPC$SUBRMID,CODE#=E$CANTWR,STCLASS=CONSTANT);
/**/
/*
     ***** Create key for writing record
*/
  CALL INDEX(UNAME_SIZE,' ',B$JIT.UNAME);
/*
     ***** Store size,accn,uname into key
*/
  USERS_KEY.CNT=(SIZEC(B$JIT.ACCN)+UNAME_SIZE);
  CALL INSERT(USERS_KEY.TXT,0,USERS_KEY.CNT,B$JIT.ACCN,B$JIT.UNAME);
/*
     ***** Init. Write fpt
*/
  FPT_WRITE.BUF_.BOUND = HLP_SZ - 1 ;
/*
     ***** Write out record
*/
  FPT_WRITE.V.DCB#=DCB#;
  CALL M$WRITE(FPT_WRITE) ALTRET(E_WRITE);
/*
     ***** Dequeue record
*/
  CALL DEQUEUE(DCB#, USERS_KEY) ALTRET(E_DEQUEUE);
  RETURN;
E_WRITE:
/*E*       ERROR: CPC-E$CANTWR-E
           MESSAGE: Error writing %FN record
           DESCRIPTION: IBEX was unable to create the specified record
                  due to a write error.
*/
  CALL WRITEMSGE(E_CANTWR,DCB#);
E_DEQUEUE:
  FPT_CLOSE.V.DCB#=DCB#;
  CALL M$CLOSE(FPT_CLOSE);
  ALTRETURN;
END WRHLP;
