/*M* LARK_SI604 LARK_DELETE  Comgroup deletion processing*/
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*T*/
/*X* DDA */
/*F*
   NAME:          LARK_DELETE_CMD
   PURPOSE:       Process the DELETE command
   DESCRIPTION:   This module receives the parse tree for the DELETE command
                  and processes it for use with the M$OPEN (DELETE=YES).
*/
/*D*
   NAME:          LARK_DELETE_CMD
   CALL:          CALL LARK_DELETE_CMD ( PARSE$OUT )
   PARAMETERS:    PARSE$OUT is an X$PARSE macro which gives access to the
                     output blocks genterated by X$PARSE
   INTERFACE:     LARK_INTERNAL_ERROR
                  LARK_PROCESS_FID
                  LARK_REPORT_PMME_ERROR
   INPUT:         PARSE$OUT
                  VLP$SETSTA_LARK
   OUTPUT:        LARK$GETCMD_ (information in structure is important for ?)
   SCRATCH:       VLP$ACCT_CG
                  VLP$NAME_CG
                  VLP$PASS_CG
                  VLP$SN_CG
                  VLP$WSN_CG
   DESCRIPTION:   DELETE_CMD syntax =
                     'DEL/ETE' ;
                     CG_FID
*/
 
%EJECT ;
LARK_DELETE_CMD : PROC ( P_OUT$BLK ) ALTRET ;
 
/*
   Includes
*/
 
%INCLUDE CP_6 ;
%INCLUDE CP_6_SUBS ;
 
%INCLUDE LARK_C61 ;
%INCLUDE LARK_C62 ;
%INCLUDE LARK_C63 ;
 
%INCLUDE XU_MACRO_C ;
%INCLUDE XUG_ENTRY ;
 
/*
    Entries
*/
 
%LARK_INTERNAL_ERROR ;
%LARK_PROCESS_FID ;
%LARK_REPORT_PMME_ERROR ;
 
/*
   Parameters
*/
 
%PARSE$OUT
          ( NAME           = P_OUT$BLK,
            STCLASS        = "" ) ;
 
/*
   Structures
*/
 
%LARK_GLOBALS ;
 
%LARK_PARSEBLKS ;
 
%B$ALT ;
 
%B$TCB ;
 
%FPT_OPEN
          ( FPTN           = FPT_OPEN_DELETE_CG,
            STCLASS        = CONSTANT,
            ASN            = COMGROUP,
            AU             = YES,
            DCB            = M$CG,
            DELETE         = YES,
            FUN            = UPDATE,
            JRNLBYPASS     = YES,
            SHARE          = NONE ) ;
 
%FPT_OPEN
          ( FPTN           = FPTOPEN_DELETE_CG,
            STCLASS        = AUTO ) ;
 
/*
   Local data
*/
 
DCL         B$TCB$         PTR SYMREF ;
DCL         BLK$           PTR ;
 
%EJECT ;
IF ( P_OUT$BLK.CODE ~= %DELETE_CMD ) OR
   ( P_OUT$BLK.NSUBLKS ~= 1 ) THEN DO ;
   CALL LARK_INTERNAL_ERROR ;
   GOTO ALT ;
END ;
 
/*
   Processing the CG_FID.
*/
 
BLK$ = P_OUT$BLK.SUBLK$ ( 0 ) ;
 
IF ( BLK$->OUT$SYM.CODE ~= %CG_FID ) THEN DO ;
   CALL LARK_INTERNAL_ERROR ;
   GOTO ALT ;
END ;
 
CALL LARK_PROCESS_FID ( VECTOR ( BLK$->OUT$SYM.TEXT ) )
      ALTRET ( ALT ) ;
 
/*
   Deleting the comgroup.
*/
 
FPTOPEN_DELETE_CG = FPT_OPEN_DELETE_CG ;
FPTOPEN_DELETE_CG.V_ = VECTOR ( FPTOPEN_DELETE_CG.V ) ;
FPTOPEN_DELETE_CG.ACCT_ = VECTOR ( VLP$ACCT_CG ) ;
FPTOPEN_DELETE_CG.NAME_ = VECTOR ( VLP$NAME_CG ) ;
FPTOPEN_DELETE_CG.PASS_ = VECTOR ( VLP$PASS_CG ) ;
FPTOPEN_DELETE_CG.SETSTA_ = VECTOR ( VLP$SETSTA_LARK ) ;
FPTOPEN_DELETE_CG.SN_ = VECTOR ( VLP$SN_CG ) ;
FPTOPEN_DELETE_CG.WSN_ = VECTOR ( VLP$WSN_CG ) ;
 
CALL M$OPEN ( FPTOPEN_DELETE_CG )
      WHENALTRETURN DO ;
         CALL LARK_REPORT_PMME_ERROR ( B$TCB$->B$TCB.ALT$->B$ALT.ERR,
                                      M$CG_DCBNUM ) ;
         GOTO ALT ;
      END ;
 
RETURN ;
 
ALT:
   ALTRETURN ;
 
END LARK_DELETE_CMD ;
