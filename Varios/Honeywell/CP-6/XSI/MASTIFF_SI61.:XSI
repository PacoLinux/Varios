/*M* MASTIFF - Munge Anlz_STar File */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* DMR,PLM=5,IND=5,CTI=5,SDI=5,MCL=10,CSI=0,ECI=0 */
MASTIFF: PROC MAIN;
 
DCL SI_BUFFER                    CHAR(256) STATIC;
DCL M$SI                         DCB;
 
DCL OU_BUFFER                    CHAR(256) STATIC;
DCL M$OU                         DCB;
 
DCL DO_BUFFER                    CHAR(256) STATIC;
DCL M$DO                         DCB;
 
DCL I                            SBIN;
DCL L                            SBIN;
DCL FCG                          CHAR(3);
 
DCL ONE_PAGE                     CHAR(4096) STATIC;
 
DCL 1 OU_KEY                     STATIC,
         2 *                        UBIN(9)   UNAL INIT(3),
         2 K                        UBIN(27)  UNAL;
 
DCL MASTIFF_CMD                  BIT(36)   SYMREF;
 
DCL X$PARSE                      ENTRY(1)  ALTRET;
DCL B$TCB$                       PTR       SYMREF;
 
      %INCLUDE CP_6;
      %INCLUDE B_ERRORS_C;
      %INCLUDE XU_MACRO_C;
 
      %F$DCB;
      %B$TCB;
      %B$ALT;
 
      %FPT_READ (FPTN=SI_READ,
                 BUF=SI_BUFFER,
                 DCB=M$SI);
 
      %FPT_OPEN (FPTN=OU_OPEN,
                 ORG=KEYED,
                 ACS=DIRECT,
                 ASN=FILE,
                 DCB=M$OU);
 
      %FPT_WRITE (FPTN=OU_WRITE,
                  BUF=OU_BUFFER,
                  KEY=OU_KEY,
                  DCB=M$OU);
 
      %FPT_CLOSE (FPTN=OU_CLOSE,
                  DISP=SAVE,
                  DCB=M$OU);
 
      %FPT_WRITE (FPTN=DO_WRITE,
                  BUF=DO_BUFFER,
                  DCB=M$DO);
 
      %P_PCB (R=MASTIFF_CMD,
              W=ONE_PAGE,
              WSZ=1024);
 
      %PARSE$OUT (STCLASS=BASED);
      %PARSE$SYM (STCLASS=BASED);
 
%EJECT;
     P_PCB.TEXT$ = ADDR(SI_BUFFER);
     CALL M$OPEN (OU_OPEN);
     DO WHILE ('1'B);
NEXT:     SI_BUFFER = ' ';
          CALL M$READ (SI_READ) ALTRET (ERR);
          IF SUBSTR(SI_BUFFER,0,2)='/*' THEN GOTO NEXT;
          P_PCB.NCHARS = DCBADDR(DCBNUM(M$SI))->F$DCB.ARS#;
          CALL X$PARSE (P_PCB) ALTRET (PERR);
          I = P_PCB.OUT$->OUT$BLK.SUBLK$(0)->OUT$BLK.CODE;
          DO CASE (I);
          CASE (1);                     /* HOST */
             OU_KEY.K = 0;
          CASE (2);                     /* L6 */
             OU_KEY.K = 1000;
          CASE (3);                     /* FCG */
             L = P_PCB.OUT$->OUT$BLK.SUBLK$(0)->OUT$SYM.COUNT;
             FCG = P_PCB.OUT$->OUT$BLK.SUBLK$(0)->OUT$SYM.TEXT;
             DO CASE (L);
             CASE (1);
                DO_BUFFER = SI_BUFFER;
                CALL M$WRITE (DO_WRITE);
                DO_BUFFER = 'FCGs must be 2 or 3 chars';
                CALL M$WRITE (DO_WRITE);
             CASE (2);
                OU_KEY.K = (ASCBIN(SUBSTR(FCG,0,1))-64)*64000+
                     (ASCBIN(SUBSTR(FCG,1,1))-64)*1000;
             CASE (3);
                OU_KEY.K = (ASCBIN(SUBSTR(FCG,0,1))-64)*64000+
                     (ASCBIN(SUBSTR(FCG,1,1))-64)*1000+(ASCBIN(SUBSTR(FCG,2,1))-64);
             CASE (ELSE);
                CALL M$ERR;
             END;
          END;
          OU_BUFFER = P_PCB.OUT$->OUT$BLK.SUBLK$(1)->OUT$SYM.TEXT;
          CALL M$WRITE (OU_WRITE);
        END;
 
ERR: IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.ERR# ~= %E$EOF
     THEN
          CALL M$MERC;
     CALL M$CLOSE (OU_CLOSE);
     CALL M$EXIT;
PERR: DO_BUFFER = SI_BUFFER;
     CALL M$WRITE (DO_WRITE);
     DO_BUFFER = 'Syntax error in above line';
     CALL M$WRITE (DO_WRITE);
     GOTO NEXT;
 
END MASTIFF;
