/*M* PLEXTER - a program to extract PLOVER commands from patch files */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
 
PLEXTER: PROC MAIN;
 
/*
   Purpose is to build Plover records for Lemur
   libraries from Rum directives to the Shared
   libraries
*/
 
DCL X$PARSE ENTRY(1) ALTRET;
DCL FTX_RPTERR ENTRY;
DCL PLEXTER$STD ENTRY(5) ALTRET;
DCL INPUT CHAR(120) STATIC;
DCL OUTPUT CHAR(80) STATIC;
DCL DATE CHAR(8) STATIC;
DCL TIME CHAR(11) STATIC;
DCL DAY CHAR(3) STATIC;
 
DCL THIS_OBJ CHAR(31);
DCL PREV_OBJ CHAR(31);
 
DCL THIS_STAR CHAR(10);
DCL PREV_STAR CHAR(10);
 
 
DCL THIS_SYM CHAR(31);
DCL LAST_SYM CHAR(31);
 
DCL OBJECT CHAR(31);
DCL 1 LIBFID,
      2 NAME CHAR(31),
      2 TSIZE UBIN;
 
DCL UTSTIME CHAR(4) STATIC;
 
 
DCL FID_ASN UBIN(9) STATIC ALIGNED;
DCL FID_RES CHAR(4) STATIC;
 
DCL FID_TEXT CHAR(60) STATIC;
 
DCL LEMURLIB CHAR(31);
 
DCL TEST BIT(1);
 
DCL 1 OBJ_NAME STATIC,
      2 TSIZE UBIN BYTE UNAL,
      2 NAME CHAR(31);
 
DCL M$SI DCB;
DCL M$LO DCB;
DCL M$DO DCB;
DCL M$BUF DCB;
DCL M$LIB DCB;
DCL M$IN DCB;
DCL M$OUT DCB;
 
%INCLUDE CP_6;
%INCLUDE XU_MACRO_C;
%INCLUDE PLEXTER_C1;
%INCLUDE XS_MACRO_C;
 
%F$DCB;
%B$TCB;
%B$ALT;
DCL B$TCB$ PTR SYMREF;
 
 
%FPT_TIME(FPTN=GETOBJTIME,
              DATE=DATE,
              TIME=TIME,
              DAY=DAY,
              DEST=LOCAL,
              SOURCE=UTS,
              TSTAMP=UTSTIME);
 
%FPT_READ(FPTN=READBUFFER,DCB=M$BUF,BUF=INPUT);
%FPT_READ(FPTN=READPATCH,DCB=M$IN,BUF=INPUT);
%FPT_READ(FPTN=READSI,DCB=M$SI,BUF=INPUT);
 
%FPT_WRITE(FPTN=WRITEBUFFER,DCB=M$BUF,BUF=OUTPUT);
%FPT_WRITE(FPTN=WRITEPATCH,DCB=M$OUT,BUF=OUTPUT);
%FPT_WRITE(FPTN=WRITELO,DCB=M$LO,BUF=OUTPUT);
%FPT_PFIL(FPTN=BOF,BOF=YES);
%FPT_CLOSE(FPTN=CLOSE,DISP=SAVE);
%FPT_CLOSE(FPTN=RELEASE,DCB=M$BUF,DISP=RELEASE);
 
 
%VLP_NAME(FPTN=VLP_NAME,STCLASS=STATIC);
%VLR_FID(FPTN=VLR_FID);
%VLP_ACCT(FPTN=VLP_ACCT,STCLASS=STATIC);
%VLP_PASS(FPTN=VLP_PASS,STCLASS=STATIC);
%VLP_SN(FPTN=VLP_SN,STCLASS=STATIC);
%VLP_WSN(FPTN=VLP_WSN,STCLASS=STATIC);
 
%FPT_OPEN(FPTN=OPENSHARED,
         FUN=IN,
         ACS=SEQUEN,
         ASN=FILE,
         DCB=M$SI,
         NAME=VLP_NAME,
         ACCT=VLP_ACCT,
         PASS=VLP_PASS,
         SHARE=ALL,
         SN=VLP_SN,
         WSN=VLP_WSN);
 
%FPT_OPEN(FPTN=OPENEW,
         FUN=CREATE,
         EXIST=NEWFILE,
         ACS=SEQUEN,
         ORG=CONSEC,
         ASN=FILE,
         DCB=M$OUT,
         CTG=YES,
         NAME=VLP_NAME,
         ACCT=VLP_ACCT,
         PASS=VLP_PASS,
         SN=VLP_SN,
         WSN=VLP_WSN);
 
%FPT_OPEN(FPTN=OPENBUFFER,
         FUN=CREATE,
         EXIST=OLDFILE,
         ACS=SEQUEN,
         ORG=CONSEC,
         ASN=FILE,
         DCB=M$BUF,
         NAME=VLP_NAME,
         ACCT=VLP_ACCT,
         PASS=VLP_PASS,
         SN=VLP_SN,
         WSN=VLP_WSN);
 
%FPT_FID(FPTN=FPT_FID,
         ACCT=VLP_ACCT,
         ASN=FID_ASN,
         NAME=VLP_NAME,
         PASS=VLP_PASS,
         RES=FID_RES,
         RESULTS=VLR_FID,
         SN=VLP_SN,
         TEXTFID=FID_TEXT,
         WSN=VLP_WSN);
 
%FPT_OPEN(FPTN=OPENLIB,
         STCLASS=STATIC,
         DCB=M$LIB,
         FUN=IN,
         SHARE=ALL,
         ORG=KEYED,
         EXIST=OLDFILE,
         NAME=VLP_NAME,
         ACS=DIRECT,
         ASN=FILE,
         WSN=VLP_WSN,
         SN=VLP_SN,
         ACCT=VLP_ACCT,
         PASS=VLP_PASS);
 
%FPT_OPEN(FPTN=OPENMERGE);
%FPT_WRITE(FPTN=WRITEDO,DCB=M$DO,BUF=OUTPUT);
%FPT_READ(FPTN=READLIB,BUF=INPUT,KEYS=YES,KEY=OBJ_NAME,DCB=M$LIB);
%FPT_PRECORD(FPTN=BACKUP,DCB=M$IN,N=-1);
 
DCL COMD UBIN SYMREF;
DCL PARSE_WORK               CHAR(1024) STATIC;
%P_PCB(T=INPUT,
         R=COMD,
         W=PARSE_WORK,
         WSZ=256,
         N#=256);                       /* PARSE CONTOL BLOCK                 */
%PARSE$SYM(NAME=OUTSYM,
         STCLASS=BASED);                /* FOR SYMBOLS AND DELIM STRINGS      */
%PARSE$OUT(NAME=OUTBLK,
         STCLASS=BASED);                /* FOR OUTPUT BLOCKS                  */
 
        OPENMERGE.V.DCB#=DCBNUM(M$IN);  /* READ COMMANDS DCB                  */
        CALL M$OPEN(OPENMERGE) ALTRET(NOSI);
        BOF.V.DCB#=DCBNUM(M$IN);
        CALL M$PFIL(BOF);
        OPENMERGE.V.DCB#=DCBNUM(M$OUT); /* PLOVER OU DCB                      */
        CALL M$OPEN(OPENMERGE) ALTRET(NOOU);
        OPENMERGE.V.DCB#=DCBNUM(M$LO);  /* LO DCB                             */
        CALL M$OPEN(OPENMERGE) ALTRET(NOLO);
START:  PREV_STAR=' ';
        PREV_OBJ=' ';
 
RELIB:  DO WHILE('1'B);                 /* FIND LIB NAME                      */
 
           INPUT=' ';
           CALL M$READ(READPATCH) ALTRET(DONE);
           P_PCB.NCHARS=DCBADDR(DCBNUM(M$IN))->F$DCB.ARS#;
           IF P_PCB.NCHARS>80 THEN CALL FAIL;
           CALL X$PARSE(P_PCB) ALTRET(RELIB);
           IF P_PCB.OUT$->OUTBLK.SUBLK$(0)->OUTBLK.CODE=XRUM# THEN DO;
 
              CALL CONCAT(FID_TEXT,':LIB_',P_PCB.OUT$->OUTBLK.SUBLK$(0)->
                OUTBLK.SUBLK$(0)->OUTSYM.TEXT);
              GOTO OUT;
 
              END;
 
           IF P_PCB.OUT$->OUTBLK.SUBLK$(0)->OUTBLK.CODE=ETC# THEN DO;
 
              CALL CONCAT(FID_TEXT,':ETC_',P_PCB.OUT$->OUTBLK.SUBLK$(0)->
                OUTBLK.SUBLK$(0)->OUTSYM.TEXT);
              GOTO OUT;
              END;
 
 
           END;
 
OUT:    CLOSE.V.DCB#=DCBNUM(M$LIB);
        CALL M$CLOSE(CLOSE) ALTRET(OK);
OK:     LIBFID.NAME=FID_TEXT;
        LIBFID.TSIZE=P_PCB.OUT$->OUTBLK.SUBLK$(0)->OUTBLK.SUBLK$(0)->OUTSYM.COUNT+5;
 
        CALL M$FID(FPT_FID);
        IF VLP_ACCT.ACCT#=' ' THEN VLP_ACCT.ACCT#=':SYS'; /* Assume :sys if no account */
        CALL M$OPEN(OPENLIB) ALTRET(ERROR); /* OPEN LEMURED LIB               */
 
        FID_TEXT='*BUFFER';
        CALL M$FID(FPT_FID);
        CALL M$OPEN(OPENBUFFER);
 
 
LOOP:   DO WHILE('1'B);
 
           CALL M$READ(READPATCH) ALTRET(DONE);
           IF DCBADDR(DCBNUM(M$SI))->F$DCB.ARS#>80 THEN CALL FAIL;
           OUTPUT=INPUT;
           CALL FIND$STAR(TEST,THIS_STAR);
 
           IF TEST='0'B THEN CALL FAIL;
           IF TEST='0'B THEN CALL SPIN('0'B) ALTRET(RELIB);
           CALL PARSEIT(TEST) ALTRET(RELIB);
 
           IF TEST='0'B THEN DO;
 
              CALL M$WRITE(WRITEBUFFER);
              GOTO LOOP;
 
              END;
 
           IF P_PCB.OUT$->OUTBLK.SUBLK$(0)->OUTBLK.CODE=XRUM# THEN GOTO OUT;
           ELSE CALL PLOVERTHIS ALTRET(RELIB);
 
           END;
 
DONE:
        CLOSE.V.DCB#=DCBNUM(M$LO);
        CALL M$CLOSE(CLOSE);
        READPATCH.V.DCB#=DCBNUM(M$OUT);
        BOF.V.DCB#=DCBNUM(M$OUT);
        CALL M$PFIL(BOF);
        CALL M$READ(READPATCH) ALTRET(ABORT);
 
        DO WHILE('0'B);
 
ABORT:     RELEASE.V.DCB#=DCBNUM(M$OUT);
           CALL M$CLOSE(RELEASE);
 
           END;
 
        CLOSE.V.DCB#=DCBNUM(M$OUT);
        CALL M$CLOSE(CLOSE);
        CALL M$EXIT;
 
 
ERROR:  CALL FTX_RPTERR;
 
        DO WHILE('1'B);
 
           INPUT=' ';
           CALL M$READ(READPATCH) ALTRET(DONE);
           IF SUBSTR(INPUT,0,3)='RUM' THEN DO;
              CALL M$PRECORD(BACKUP);
              GOTO START;
              END;
           END;
 
NOSI: ;
NOLO: ;
NOOU: CALL FTX_RPTERR;
      CALL M$ERR;
%EJECT;
 
SPIN:   PROC(ZIP) ALTRET;
 
/*
    Purpose of this procedure is to spin past illegal stuff
*/
 
DCL ZIP BIT(1);
DCL ZSIZE UBIN;
 
        DO WHILE('1'B);
 
           INPUT=' ';
           CALL M$READ(READPATCH) ALTRET(DONE);
 
           IF SUBSTR(INPUT,0,3)='RUM' THEN DO;
 
              CALL M$PRECORD(BACKUP);
              ALTRETURN;
 
              END;
           CALL FIND$STAR(TEST,THIS_STAR);
           IF TEST='0'B THEN GOTO SKIP;
           IF ZIP='0'B AND THIS_STAR=PREV_STAR THEN GOTO SKIP;
           CALL X$PARSE(P_PCB) ALTRET(SKIP);
 
           IF P_PCB.OUT$->OUTBLK.SUBLK$(0)->OUTBLK.CODE=XMODIFY# THEN DO;
 
              THIS_SYM=P_PCB.OUT$->OUTBLK.SUBLK$(0)->OUTBLK.SUBLK$(0)->OUTSYM.TEXT;
              ZSIZE=P_PCB.OUT$->OUTBLK.SUBLK$(0)->OUTBLK.SUBLK$(0)->OUTSYM.COUNT;
              IF SUBSTR(THIS_SYM,ZSIZE-1,1)='_' THEN DO;
 
                 SUBSTR(THIS_SYM,ZSIZE-1,1)=' ';
 
                 END;
              IF THIS_SYM~=LAST_SYM THEN RETURN;
              END;
           OUTPUT=INPUT;
SKIP:      IF ZIP='1'B THEN CALL M$WRITE(WRITEPATCH);
 
           END;
 
 
DONE:
        CLOSE.V.DCB#=DCBNUM(M$OUT);
        CALL M$CLOSE(CLOSE);
        CLOSE.V.DCB#=DCBNUM(M$LO);
        CALL M$CLOSE(CLOSE);
 
        CALL M$EXIT;
 
END;
 
%EJECT;
 
PLOVERTHIS: PROC ALTRET;
 
/*
    Purpose of this procedure is to write the plover commands
*/
DCL NUTS CHAR(21);
DCL TEMP CHAR(80);
 
        CALL CONCAT(NUTS,DATE,' ',TIME,')');
        TEMP=INPUT;
 
        PREV_STAR=THIS_STAR;
        BOF.V.DCB#=DCBNUM(M$BUF);
        CALL M$PFIL(BOF);
        PREV_OBJ=THIS_OBJ;
 
        CALL CONCAT(OUTPUT,'!PLOVER ',SUBSTR(LIBFID.NAME,0,LIBFID.TSIZE),' (OU=',SUBSTR(OBJ_NAME.NAME,1,OBJ_NAME.TSIZE-1),',UTS=',NUTS);
        CALL M$WRITE(WRITEPATCH);
 
        CALL DUMPBUF;
 
STEP1:  OUTPUT=TEMP;
        CALL M$WRITE(WRITEPATCH);
 
 
        DO WHILE('1'B);                 /* Read subsequent patches            */
 
           INPUT=' ';
           CALL M$READ(READPATCH) ALTRET(DONE);
           OUTPUT=INPUT;
           CALL PARSEIT(TEST) ALTRET(RELIB);
           IF TEST='1'B  AND THIS_STAR=PREV_STAR AND
             THIS_OBJ=PREV_OBJ THEN CALL M$WRITE(WRITEPATCH);
           ELSE DO;
              CALL M$PRECORD(BACKUP);
              GOTO DONE;
 
              END;
 
 
           END;
 
DONE:   CALL M$CLOSE(RELEASE);
        FID_TEXT='*BUFFER';
        CALL M$FID(FPT_FID);
        CALL M$OPEN(OPENBUFFER);
 
        RETURN;
 
RELIB:  ALTRETURN;
 
END;
 
%EJECT;
 
PARSEIT: PROC(TEST) ALTRET;
 
/*
    Purpose of this porcedure is to parse rum directives.
 
    If syntax error then spin til next star;
 
    If object cannot be determined TEST='0'b     (BUFFER THIS)
 
    Otherwise an object has been located in the Lemur Lib.
    This is indicated by a '1'b for test;
*/
 
DCL TEST BIT(1);
 
DCL BLOCK UBIN;
 
DCL TEMP CHAR(80);
 
 
        TEST='0'B;
 
        IF SUBSTR(INPUT,0,1)='"' THEN RETURN;
 
        P_PCB.NCHARS=DCBADDR(DCBNUM(M$IN))->F$DCB.ARS#;
        IF P_PCB.NCHARS>80 THEN CALL FAIL;
 
        CALL X$PARSE(P_PCB) ALTRET(CANT);
 
        BLOCK=P_PCB.OUT$->OUTBLK.SUBLK$(0)->OUTBLK.CODE;
 
        DO CASE(BLOCK);
 
         CASE(XMODIFY#);
 
           TEMP=INPUT;
           CALL CONCAT(OBJECT,P_PCB.OUT$->OUTBLK.SUBLK$(0)->OUTBLK.SUBLK$(0)->OUTSYM.TEXT);
           OBJ_NAME.NAME=OBJECT;
           OBJ_NAME.TSIZE=P_PCB.OUT$->OUTBLK.SUBLK$(0)->OUTBLK.SUBLK$(0)->OUTSYM.COUNT;
           IF SUBSTR(OBJ_NAME.NAME,OBJ_NAME.TSIZE-1,1)='_' THEN DO;
 
              SUBSTR(OBJ_NAME.NAME,OBJ_NAME.TSIZE-1,1)=' ';
              OBJ_NAME.TSIZE=OBJ_NAME.TSIZE-1;
 
              CALL SUBSEARCH;
              END;
           INPUT=' ';
           THIS_OBJ=OBJ_NAME.NAME;
 
           IF THIS_OBJ='#' OR THIS_OBJ='@' THEN RETURN;
 
           CALL M$READ(READLIB) ALTRET(TRYAGN);
 
           DO WHILE('0'B);         /* UDFNED SYM, READ STD FILE, LAST CHANCE  */
 
TRYAGN:       CALL PLEXTER$STD(LIBFID.NAME,OBJ_NAME.NAME,DATE,TIME,OBJ_NAME.TSIZE)
                ALTRET(NONAME);
              INPUT=TEMP;
              TEST='1'B;
              RETURN;
 
              END;
           CALL CONCAT(OBJ_NAME.NAME,'"',INPUT);
           OBJ_NAME.TSIZE=DCBADDR(DCBNUM(M$LIB))->F$DCB.ARS#+1;
           CALL M$READ(READLIB);
           UTSTIME=INPUT;
           INPUT=TEMP;
           CALL M$TIME(GETOBJTIME);
 
 
           TEST='1'B;
 
         CASE(XRUM#,ETC#);
 
           ALTRETURN;                   /* NEW LIB                            */
 
 
         CASE(ELSE);
 
 
 
         END;
 
        RETURN;
 
NONAME: CALL CONCAT(OUTPUT,'*** cant find symbol: ',SUBSTR(OBJ_NAME.NAME,0,OBJ_NAME.TSIZE),' in ',LIBFID.NAME);
        CALL M$WRITE(WRITELO);
        LAST_SYM=OBJ_NAME.NAME;
        OUTPUT=TEMP;
        CALL M$WRITE(WRITEPATCH);
        CALL SPIN('1'B) ALTRET(OOPS);
        CALL CONCAT(OUTPUT,'" *** warning, cannot find symbol: ',OBJ_NAME.NAME);
        CALL M$WRITE(WRITEPATCH);
        RETURN;
 
 
 
CANT:   CALL SPIN('0'B) ALTRET(OOPS);
        RETURN;
 
OOPS:   ALTRETURN;
 
SUBSEARCH: PROC;
 
DCL T1 UBIN;
DCL T2 UBIN;
DCL X UBIN;
 
 
        T2=P_PCB.OUT$->OUTBLK.SUBLK$(0)->OUTBLK.SUBLK$(0)->OUTSYM.COUNT;
 
        X=0;
 
        DO WHILE(X<80-T2);
 
           IF SUBSTR(TEMP,X,T2)=P_PCB.OUT$->OUTBLK.SUBLK$(0)->OUTBLK.SUBLK$(0)->
             OUTSYM.TEXT THEN DO;
 
              T1=X+T2;
 
 
              DO WHILE(SUBSTR(TEMP,T1,1)~=' ');
 
                 SUBSTR(TEMP,T1-1,1)=SUBSTR(TEMP,T1,1);
                 SUBSTR(TEMP,T1,1)=SUBSTR(TEMP,T1+1,1);
 
                 T1=T1+1;
 
                 END;
 
              X=T1;
 
              END;
 
           X=X+1;
 
           END;
 
        OUTPUT=TEMP;
 
END;
END;
 
%EJECT;
 
FIND$STAR: PROC(TEST,STAR);
 
/* Find star # */
 
DCL STAR CHAR(10);
DCL X UBIN;
DCL BLANK CHAR(10);
DCL Y UBIN;
DCL Z UBIN;
DCL CHARN CHAR(1) BASED;
DCL TEST BIT(1);
        BLANK=' ';
 
        TEST='0'B;
        X=80;
        DO WHILE(X>2);
 
           IF(PINCRC(ADDR(INPUT),X)->CHARN~=' ') THEN GOTO NEXT;
           X=X-1;
           END;
NEXT:   Y=X;
        X=X+1;
 
        DO WHILE(Y>2);
 
           IF(PINCRC(ADDR(INPUT),Y)->CHARN='#') THEN GOTO NEXT1;
           Y=Y-1;
           END;
 
        RETURN;
 
NEXT1:  Y=Y+1;
        Z=X-Y;
        CALL CONCAT(STAR,SUBSTR(BLANK,0,10-Z),SUBSTR(INPUT,Y,Z));
        IF SUBSTR(INPUT,Y,Z)='LADC' THEN STAR=' ';
 
        IF STAR~=' ' THEN TEST='1'B;
END;
DUMPBUF: PROC;
 
/*
    Purpose is to dump out buffered rum/plover directives
    not associated with object units
*/
 
        DO WHILE('1'B);                 /* Dump out buffer                    */
 
           INPUT=' ';
           CALL M$READ(READBUFFER) ALTRET(STEP1);
           OUTPUT=INPUT;
           CALL M$WRITE(WRITEPATCH);
 
           END;
STEP1:  RETURN;
END;
FAIL:   PROC;
/*
If the input file is not PATCH.Xish then it
cannot be considered for PLEXTERing
*/
        IF DCBADDR(DCBNUM(M$SI))->F$DCB.ARS#<=80 AND (SUBSTR(INPUT,0,1)='!' OR SUBSTR(INPUT,0,3)='RUM') THEN RETURN;
        RELEASE.V.DCB#=DCBNUM(M$OUT);
        CALL M$CLOSE(RELEASE);
 
        IF DCBADDR(DCBNUM(M$IN))->F$DCB.ARS#>80 THEN
           OUTPUT='*** input record > 80 bytes';
        ELSE OUTPUT='*** input record not PATCH.X format';
        CALL M$WRITE( WRITEDO);
        CALL CONCAT(OUTPUT,'*** record is: ',INPUT);
        CALL M$WRITE(WRITEDO);
        CALL M$XXX;
END;
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
FTX_RPTERR: PROC;
 
%INCLUDE CP_6;
%F$DCB;
 
%B$ALT;
 
%B$TCB;
 
DCL B$TCB$ PTR SYMREF;
%FPT_ERRMSG(FPTN=ERRBUFFERMSG,
   OUTDCB1=M$DO,
   BUF=ERRBUFFER,
   CODE=ERRCODE,
   INCLCODE=NO);
 
%VLP_ERRCODE(FPTN=ERRCODE,STCLASS=STATIC SYMDEF);
DCL ERRBUFFER CHAR(120) STATIC;
DCL M$DO DCB;
/*F*     NAME: FTX_RPTERR
         PURPOSE: Report ALTRET frame error.
 ***/
 
/********************/
 
        ERRBUFFERMSG.V.DCB# = B$TCB$->B$TCB.ALT$->B$ALT.DCB#;
        ERRCODE = B$TCB$->B$TCB.ALT$->B$ALT.ERR;
        ERRCODE.SEV = 4;
        CALL M$ERRMSG(ERRBUFFERMSG);
        CALL M$XXX;
 
END FTX_RPTERR;
