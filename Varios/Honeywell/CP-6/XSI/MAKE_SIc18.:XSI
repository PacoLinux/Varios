/*M*    make_evaluate:c      -- evaluates expressions for :if    */
/*T***************************************************************/
/*T*                                                             */
/*T*  Copyright (c) Bull HN Information Systems Inc., 1989       */
/*T*                                                             */
/*T***************************************************************/
 
#include   <stdio.h>
#include   <setjmp.h>
#include   <stdlib.h>
#include   <xu_cp6_c.h>
#include   <xu_macro_c.h>
#include   <xu_subs_c.h>
#ifndef TEST
#include   "MAKE_Cc14"
#endif
 
 
struct value input_integer(char *, int);
struct value evaluate(struct parse_out *);
struct value arith_type(struct value);
struct value idf2int(struct value *);
struct value idf2str(struct value *);
 
 
/**
 **  The preprocessor variable TEST is used to provide a
 **  mechanism to check out the expression analysis.
 **  When TEST is defined, this file produces a run-unit
 **  that accepts simple expressions with constant or
 **  string operands and prints the result.
 **/
 
#ifdef TEST
extern  int   X$PARSE();
 
int  UserParse();
int  ReportParseLexemes();
 
extern struct p_node EXPRESSION;
char *ParseWork = 0;
int   ParseWorkSize = 0;
jmp_buf ExpandParseRetry;
 
struct p_pcb  CommandPCB =
            {0, &EXPRESSION, 0, 0, UserParse, 0, 1, 0, 0, 0, 1,
             0, 0, {0,0,0,0,0}, {0,0,0,0}, 0, 1, 0, 0, 0, 0, 0,
             ReportParseLexemes};
 
 
/*B* NAME:       struct value
     PURPOSE:    To hold a value token.  It may represent the
              following kinds of values:
              VAL_CONST               an integer value
              VAL_IDF                 an identifier
              VAL_STR                 a  "string"
              VAL_ERROR               an illegal expression
*/
 
struct  value {
  int   vtype;   /* type of value: VAL_CONST, VAL_STR, VAL_IDF   */
  union {
     int   ival;                /* VAL_CONST   */
     struct   {                 /* VAL_IDF     */
        struct sym_macro *mc;
        struct parse_sym *name;
        } macro;
     struct   {                 /* VAL_STR     */
        int   st_len;
        char *str;
        }  string;
     } val;
  };
 
#define VAL_CONST   0
#define VAL_IDF     1
#define VAL_STR     2
#define VAL_ERROR   5
 
#endif
 
/*
**   The following definitions track the parse node definitions
**   for the specified functions.  The numbers associated indicate
**   the precedence for the function where a lower number indicates
**   a higher precedence.  Note the precedence is truly a function
**   of the code, the actual precedence is the code divided by 8.
**/
 
 
#define OP_PARENTHESIS  9
 
#define OP_CONSTANT    16
#define OP_QUOTED      17
#define OP_STRING      18
#define OP_IDENTIFIER  19
 
#define OP_NEGATE      24
#define OP_NULL        25
#define OP_NOT         26
#define OP_COMPL       27
 
#define OP_DEFINED     30
#define OP_SIZEOF      31
 
#define OP_MULTIPLY    32
#define OP_DIVIDE      33
#define OP_MODULUS     34
 
#define OP_ADD         40
#define OP_SUBTRACT    41
 
#define OP_LEFT        48
#define OP_RIGHT       49
 
#define OP_LESS        56
#define OP_GREAT       57
#define OP_LESSEQ      58
#define OP_GREATEQ     59
 
#define OP_EQUAL       64
#define OP_NOTEQUAL    65
 
#define OP_AND         72
#define OP_XOR         80
#define OP_OR          88
#define OP_ANDAND      96
#define OP_OROR       104
 
#define OP_CPAREN     120
#define OP_DONE       128
 
 
 
/*F*    NAME:    get_primary
        PURPOSE: To obtain a value token.
        DESCRIPTION:
           This function takes as input a (struct parse_sym *)
           which represents one of the following:
 
           OP_CONSTANT:  an integer constant
           OP_QUOTED:    an integer constant input as 'ascii'
           OP_STRING:    a character string input as "string"
           OP_IDENTIFIER: a variable name
           OP_PARENTHESIS: a parenthesized expression
 
           The output of this function is a (struct value).
*/
 
struct  value
get_primary(struct parse_sym *p)
{
  struct value rs;
 
  switch   (p->code)   {
 
  case OP_CONSTANT:
     rs = input_integer( &(p->text[1]), p->text[0] );
     break;
 
  case OP_QUOTED:
  {
     unsigned rv = 0;
     int i, cnt = p->text[0];
 
     for (i=0; i<cnt ; i++)
        rv = rv<<9 + p->text[i+1];
 
     rs.vtype = VAL_CONST;
     rs.val.ival = rv;
     break;
  }
 
#ifndef TEST
 
  case OP_IDENTIFIER:
  {
     struct   sym_macro   *mc;
     mc = lookup_sym_macro( &(p->text[1]), p->text[0], 4);
     rs.vtype = VAL_IDF;
     rs.val.macro.mc = mc;
     rs.val.macro.name = p;
     break;
  }
 
#endif
 
  case OP_STRING:
     rs.vtype = VAL_STR;
     rs.val.string.st_len  = p->text[0];
     rs.val.string.str     = &p->text[1];
     break;
 
  case OP_PARENTHESIS:
     rs = evaluate( (struct parse_out *) p );
     break;
 
  default:
 
#ifndef TEST
     error("\"%s\" line %d: unknown primary token (%d) in :if expresion\n",
        file_table[InputNo].fid, file_table[InputNo].recno, p->code          );
#else
     printf("** Error: unknown primary token (%d) in parse nodes\n", p->code );
#endif
     rs.vtype = VAL_ERROR;
     break;
     }
  return rs;
}
 
/*F*    NAME:       get_unary
        PURPOSE:    To return a value token from a unary item.
        DESCRIPTION:
           A unary includes all of the value tokens handled by
           get_primary in addition to the following monadic
           functions:
 
           OP_NEGATE:     negation as in -3.
           OP_NULL:       nothing as in +3.
           OP_NOT:        not as in !3
           OP_COMPL:      two's complement.
           OP_DEFINED:    1 if argument is a variable, else 0
           OP_SIZEOF:     integer length of string or variable value
 
*/
 
struct value
get_unary(struct parse_out *po, int *pi)
{
  struct parse_sym *p = (struct parse_sym *) po->sublk[ (*pi)++ ];
  struct value rs;
 
  switch (p->code)  {
 
  case  OP_CONSTANT:
  case  OP_QUOTED:
  case  OP_STRING:
  case  OP_IDENTIFIER:
  case  OP_PARENTHESIS:
     rs = get_primary( p );
     break;
 
  case  OP_NEGATE:
     rs = get_unary( po, pi );
     rs = arith_type( rs );
     if (rs.vtype == VAL_CONST)   rs.val.ival = 0 - rs.val.ival;
     break;
 
  case OP_NULL:
     rs = get_unary( po, pi );
     break;
 
  case OP_NOT:
     rs = get_unary( po, pi );
     rs = arith_type( rs );
     if (rs.vtype == VAL_CONST) rs.val.ival = !rs.val.ival;
     break;
 
  case OP_COMPL:
     rs = get_unary( po, pi );
     rs = arith_type(rs);
     if (rs.vtype == VAL_CONST) rs.val.ival = ~rs.val.ival;
     break;
 
#ifndef TEST
 
  case OP_DEFINED:
     {
     struct parse_sym *q = (struct parse_sym*)((struct parse_out *) p)->sublk[0];
     rs.vtype = VAL_CONST;
     rs.val.ival = (lookup_sym_macro(&(q->text[1]),q->text[0],4)) ?1:0;
     }
     break;
 
  case OP_SIZEOF:
     {
     struct   sym_macro   *mc;
     struct parse_sym *q = (struct parse_sym*)((struct parse_out *) p)->sublk[0];
     rs.vtype = VAL_CONST;
     switch (q->code)  {
        case OP_IDENTIFIER:
           mc = lookup_sym_macro( &(q->text[1]), q->text[0], 4);
           rs.val.ival = (mc) ? mc->mc_deflen : 0;
           break;
        case OP_STRING:
           rs.val.ival = q->text[0];
           break;
        default:
           error("\"%s\" line %d: Illegal operand (%d) to sizeof function\n",
              file_table[InputNo].fid,  file_table[InputNo].recno, q->code   );
           rs.vtype = VAL_ERROR;
           break;
        }  /* End of switch (q->code)... */
     }     /* End of case OP_SIZEOF      */
     break;
 
#endif
 
  default:
 
#ifndef TEST
     error("\"%s\" line %d: unknown unary token (%d) in :if expression\n",
            file_table[InputNo].fid,  file_table[InputNo].recno, p->code   );
#else
     printf("** Error: unknown unary token (%d) in parse nodes\n", p->code );
#endif
 
     rs.vtype = VAL_ERROR;
     break;
  }
  return rs;
}
 
 
/*F*    NAME:          arith_type
        PURPOSE:       To guarantee that the argument value is
                       suitable for arithmetic.
        DESCRIPTION:
           An error token is created if it is not.
*/
 
struct value
arith_type(struct value val)
{
  switch  (val.vtype)  {
 
  case VAL_ERROR:
  case VAL_CONST:
     break;
 
  case  VAL_STR:
 
#ifndef TEST
     error("\"%s\" line %d: string cannot be used with arithmetic function\n",
         file_table[InputNo].fid,  file_table[InputNo].recno                  );
#else
     printf("** Error: string cannot be used with arithmetic function\n");
#endif
     val.vtype = VAL_ERROR;
     break;
 
#ifndef TEST
  case  VAL_IDF:
     val = idf2int( &val );
     break;
#endif
 
  }
  return val;
}
 
/*F*    NAME:          input_integer
        PURPOSE:       To return an integer value from a character
                       string.
        DESCRIPTION:
           Check for the obvious overflow and illegal characters.
*/
 
struct value
input_integer( char *str, int stlen )
{
  struct value rval;
  unsigned rs = 0, oldrs = 0;
  int      i, ovfl = 0, badc = 0;
 
  for (i=0 ; i<stlen ; )  {
     char c = *str++;
     if (c < '0' || c > '9') badc++;
     rs = rs * 10 + c - '0';
     i++;
     if (oldrs && rs <= oldrs) ovfl++;
     oldrs = rs;
     }
 
  if (badc)
#ifndef TEST
     error("\"%s\" line %d: variable contains illegal digits\n",
            file_table[InputNo].fid,  file_table[InputNo].recno  );
#else
     printf("** Error: variable contains illegal digits\n");
#endif
  else if (ovfl)
#ifndef TEST
     error("\"%s\" line %d: integer constant too big\n",
            file_table[InputNo].fid,  file_table[InputNo].recno);
#else
     printf("** Error: integer constant too big\n");
#endif
  rval.vtype = (ovfl + badc) ? VAL_ERROR : VAL_CONST;
  rval.val.ival = rs;
  return rval;
}
 
 
 
#ifndef TEST
 
/*F*    NAME:          idf2str
        PURPOSE:       To return a character string value from the
                       value associated with a variable.
        DESCRIPTION:   An error is reported if the variable is
                 undefined.
*/
 
struct value
idf2str(struct value *v)
{
  struct value rs;
  struct sym_macro *mc = v->val.macro.mc;
  if (mc)  {
     rs.vtype = VAL_STR;
     rs.val.string.st_len = mc->mc_deflen;
     rs.val.string.str    = mc->mc_def;
     }
  else {
     error("\"%s\" line %d: variable \"%s\" is undefined in relational expr\n",
            file_table[InputNo].fid,  file_table[InputNo].recno,
            &v->val.macro.name->text[1]                           );
     rs.vtype = VAL_ERROR;
     }
  return rs;
}
 
 
 
 
/*F*    NAME:          idf2int
        PURPOSE:       To return an integer constant value from the
                       value of a variable.
        DESCRIPTION:
              Report an error if the variable is undefined.
*/
 
struct value
idf2int(struct value *v)
{
  struct value rs;
  struct sym_macro *mc = v->val.macro.mc;
  if (!mc)  {
     error("\"%s\" line %d: variable \"%s\" is undefined in arithmetic expr\n",
            file_table[InputNo].fid,  file_table[InputNo].recno,
            &v->val.macro.name->text[1]                          );
     rs.vtype = VAL_ERROR;
     }
  else rs = input_integer( mc->mc_def, mc->mc_deflen );
  return rs;
}
 
#endif
 
 
 
/*F*    NAME:          same_type
        PURPOSE:       To coerse the two value arguments to be
                       suitable for comparison.
        DESCRIPTION:
           Both arguments must be representable as integers or
           strings.  The actual direction is dependent upon which
           (if either) is a variable.  If neither are variables it's
           easy!
*/
 
void
same_type(struct value *v1, struct value *v2)
{
  int vt1 = v1->vtype, vt2 = v2->vtype;
 
  if (vt1 == vt2)   {
#ifndef TEST
     if (vt1 == VAL_IDF)  {
        *v1 = idf2str(v1);
        *v2 = idf2str(v2);
        }
#endif
     }
  else if (vt1 == VAL_ERROR || vt2 == VAL_ERROR)
     v1->vtype = VAL_ERROR;
#ifndef TEST
  else if (vt1 == VAL_IDF)   {
     if (vt2 == VAL_CONST)
        *v1 = idf2int( v1 );
     else *v1 = idf2str(v1);
     }
  else if (vt2 == VAL_IDF)   {
     if (vt1 == VAL_CONST)
        *v2 = idf2int( v2 );
     else *v2 = idf2str( v2 );
     }
#endif
  else  {
#ifndef TEST
     error("\"%s\" line %d: operands of function must have same type\n",
           file_table[InputNo].fid,  file_table[InputNo].recno          );
#else
     printf("** Error: operands of function must have same type\n");
#endif
     v1->vtype = VAL_ERROR;
     }
  return;
}
 
 
 
 
 
/*F*       NAME:             compare_values
           PURPOSE:          To compare the two argument value tokens.
           DESCRIPTION:
                 The result of this function is -1, 0 or 1 depending
                 upon whether A<B, A==B or A>B.
*/
 
int
compare_values( struct value v1, struct value v2)
{
  int   rs;
/*   Assumes that the types are the same!   */
  if (v1.vtype == VAL_CONST) {
     int   vv1 = v1.val.ival, vv2 = v2.val.ival;
     if (vv1 < vv2)
        rs = -1;
     else if (vv1 == vv2)
        rs = 0;
     else rs = 1;
     }
  else  {     /*    Comparing strings... */
     int   ss1 = v1.val.string.st_len, ss2 = v2.val.string.st_len;
     char  *s1 = v1.val.string.str,    *s2 = v2.val.string.str;
     int   clen = (ss1 > ss2) ? ss2 : ss1;
 
     rs = memcmp(s1, s2, clen);
     if (rs == 0 && ss1 != ss2)
        rs = (ss1 > ss2) ? 1 : -1;
     }
  return rs;
}
 
 
 
 
 
/*F*    NAME:          eval_logl
        PURPOSE:       To return a truth value for a value token.
        DESCRIPTION:
           It all ends here!  The value returned by this function
           is true or false depending upon:
 
           1.    If the value is an integer then the result is 0
              if the value is 0, otherwise 1.
 
           2.    If the value is a string, the result is 1, else 0.
 
           3.    If the value is an identifier, the result is 1 if
              the variable is defined, else 0.
 
           4.    If the value is an error, the result is 0.
*/
 
unsigned
eval_logl(struct value v)
{
  unsigned rs = 0;
  if (v.vtype == VAL_CONST)
     rs = v.val.ival != 0;
  else if (v.vtype == VAL_IDF)
     rs = v.val.macro.mc != 0;
  else if (v.vtype == VAL_STR)
     rs = 1;
  return rs;
}
 
 
 
/*F*    NAME:          eval_fun
        PURPOSE:       To evaluate the argument function using the
                    two value token arguments.
        DESCRIPTION:
              The result is a new value token.
*/
 
struct value
eval_fun( int f, struct value v1, struct value v2)
{
/*   First coerse arguments to correct types      */
  if (f <= OP_RIGHT || f >= OP_AND && f <= OP_OR) {
     v1 = arith_type(v1);
     v2 = arith_type(v2);
     }
  else if (f >= OP_LESS && f <= OP_NOTEQUAL)
     same_type(&v1, &v2);
 
  if (v1.vtype != VAL_ERROR)
  switch (f)  {
 
  case  OP_MULTIPLY:
     v1.val.ival *= v2.val.ival;                     break;
  case  OP_DIVIDE:
     if (v2.val.ival == 0)   {
        v1.vtype = VAL_ERROR;
#ifndef TEST
        error("\"%s\" line %d: division by zero\n",
              file_table[InputNo].fid,  file_table[InputNo].recno   );
#else
        printf("** Error: division by zero\n");
#endif
        }
     else v1.val.ival /= v2.val.ival;
     break;
 
  case  OP_MODULUS:
     if (v2.val.ival == 0)   {
        v1.vtype = VAL_ERROR;
#ifndef TEST
        error("\"%s\" line %d: division by zero\n",
              file_table[InputNo].fid,  file_table[InputNo].recno   );
#else
        printf("** Error: division by zero\n");
#endif
        }
     else v1.val.ival %= v2.val.ival;
     break;
  case  OP_ADD:
     v1.val.ival += v2.val.ival;                        break;
  case  OP_SUBTRACT:
     v1.val.ival -= v2.val.ival;                        break;
  case  OP_LEFT:
     v1.val.ival <<= v2.val.ival;                       break;
  case  OP_RIGHT:
     v1.val.ival >>= v2.val.ival;                       break;
  case  OP_AND:
     v1.val.ival &= v2.val.ival;                        break;
  case  OP_XOR:
     v1.val.ival ^= v2.val.ival;                        break;
  case  OP_OR:
     v1.val.ival |= v2.val.ival;                        break;
  case  OP_LESS:
     v1.val.ival = compare_values(v1, v2) < 0;  v1.vtype = VAL_CONST; break;
  case  OP_GREAT:
     v1.val.ival = compare_values(v1, v2) > 0;  v1.vtype = VAL_CONST; break;
  case  OP_LESSEQ:
     v1.val.ival = compare_values(v1, v2) <= 0; v1.vtype = VAL_CONST; break;
  case  OP_GREATEQ:
     v1.val.ival = compare_values(v1, v2) >= 0; v1.vtype = VAL_CONST; break;
  case  OP_EQUAL:
     v1.val.ival = compare_values(v1, v2) == 0; v1.vtype = VAL_CONST; break;
  case  OP_NOTEQUAL:
     v1.val.ival = compare_values(v1, v2) != 0; v1.vtype = VAL_CONST; break;
  case  OP_ANDAND:
  case  OP_OROR:
     {
        unsigned rv1 = eval_logl(v1);
        unsigned rv2 = eval_logl(v2);
        v1.vtype = VAL_CONST;
        if (f == OP_ANDAND)
           v1.val.ival = rv1 & rv2;
        else v1.val.ival = rv1 | rv2;
     }
     break;
 
  default:
 
#ifndef TEST
     error("\"%s\" line %d: unknown binary function (%d) in :if expression\n",
           file_table[InputNo].fid,  file_table[InputNo].recno, f             );
#else
     printf("** Error: unknown binary function (%d) in parse nodes\n", f      );
#endif
     v1.vtype = VAL_ERROR;
  }
 
  return v1;
}
 
 
 
 
/*F*    NAME:          evaluate
        PURPOSE:       To evaluate an expression.
        DESCRIPTION:
           This function uses:
 
           get_unary      to get the next value token.
           eval_fun       to evaluate a function with two arguments
 
           The execution is performed with two stacks.  The value
           stack holds value tokens and the function stack holds
           the functions which cannot be evaluated because their
           arguments are missing or their precedence is too low.
 
           When the end of the expression is reached the value stack
           contains one item which is the result.
           The stacks need only be large enough to hold a value for
           each unique precedence value since recursion is used to
           evaluate parenthesized expressions.
*/
 
struct value
evaluate( struct parse_out *p )
{
  int pnum = p->nsublks;
  int pi   = 0;
  int vi   = 0,  fi = 0,  f  = 0,  prio = 0;
  struct value vstk[12];
  int          fstk[12];
 
  if (p->code == 0 || p->code == 9)
  while (pi < pnum) {
     vstk[ vi++ ] = get_unary( p, &pi );
 
     if (pi < pnum)
        f = p->sublk[pi++]->code;
     else f = OP_DONE;
 
     prio = f >> 3;
 
     while ( vi > 1 && prio >= (fstk[fi-1] >> 3)  )  {
        vi = vi - 1;
        vstk[vi-1] = eval_fun( fstk[--fi], vstk[vi-1], vstk[vi+0]);
        }
 
     if (pi < pnum) fstk[fi++] = f;
     }
  else vstk[0] = get_primary( (struct parse_sym *) p );
 
  return vstk[0];
}
 
PrintExpr( FILE *f, struct value *v )
{
  char  *cp, buf[84];
  int     i, j;
 
  switch (v->vtype)  {
 
  case VAL_CONST:   fprintf(f,"%d", v->val.ival); break;
  case VAL_ERROR:                                 break;
 
#ifndef TEST
 
  case VAL_IDF:
     if (v->val.macro.mc)
        fprintf(f,"%s", v->val.macro.mc->mc_def);
     break;
 
#endif
 
  case VAL_STR:
     cp = v->val.string.str;
     i  = v->val.string.st_len;
     while (i)   {
        j = (i > 80) ? 80 : i;
        memcpy(buf, cp, j);
        buf[j] = 0;
        fprintf(f,"%s", buf);
        cp += j;
        i  -= j;
        }
     break;
  }
}
 
 
#ifdef TEST
 
 
/*D*    NAME:          UserParse
        PURPOSE:       A generic routine to handle entries from
                 X$PARSE to expand the parser work area.
        DESCRIPTION:
           In order to use this function, the user must be using
           ParseWork and ParseWorkSize.  If the workarea has moved
           during expansion, this routine unwinds (longjumps)
           through ExpandParseRetry which is expected to re-start
           the parse of this command.
*/
 
int
UserParse(p)
  struct parse_param *p;
{
  char *q;
 
  switch (p->type)  {
 
  case CP6_SPACE:
 
     q = ParseWork;
     if (!(ParseWork = (char *) realloc(ParseWork, (ParseWorkSize <<=1))))
        crash("Out of Memory: UserParse");
 
     if (q != ParseWork) longjmp(ExpandParseRetry, 1);
     p->wksz = ParseWorkSize >> 2;
     break;
  }
  return 0;
}
 
 
/*D*    NAME:       ReportParseLexemes(line)
        PURPOSE:    To print the syntax alternatives indicated by
                    X$PARSE.
*/
int
ReportParseLexemes(line)
  char *line;
{
  int i = 79;
  char buf[84];
 
  memcpy(buf, line, 80);
  while (buf[i] == ' ') i--;
  buf[++i] = 0;
  printf("%s\n",buf);
  return 0;
}
 
crash(char *s)   {
  printf("%s\n",s);
  exit(0);
}
 
 
 
main()  {
  char  line[120];
 
  int   len = 0;
 
 
  while ( fgets(line, 120, stdin) )   {
     len = strlen(line);
     CommandPCB.text = line;
     CommandPCB.nchars = len-1;
     setjmp(ExpandParseRetry);
 
     if (!ParseWork)   {
        ParseWork = malloc(512);
        ParseWorkSize = 512;
        }
 
     CommandPCB.work = ParseWork;
     CommandPCB.wksz = ParseWorkSize >> 2;
 
     if (!X$PARSE(&CommandPCB)) {
        ReportParseErr(&CommandPCB);
        }
     else  {
        struct value v;
        v = evaluate(CommandPCB.out);
        PrintExprVal(v);
        }
     }
  exit(0);
}
 
PrintExprVal(struct value v)
{
  switch (v.vtype)  {
 
  case VAL_ERROR:
        printf("****** Error Result ********\n");       break;
  case VAL_IDF:
        printf("****** IDF Result?  ********\n");       break;
  case VAL_STR:
        printf("* String: %s\n", v.val.string.str);     break;
  case  VAL_CONST:
        printf("* Integer: %d\n", v.val.ival);          break;
  default:
        printf("****** Unknown result type: %d\n", v.vtype); break;
  }
}
 
 
 
 
/*D*    NAME:       ReportParseErr(pcb)
        PURPOSE:    To report an error detected by X$PARSE.
*/
 
int
ReportParseErr(struct p_pcb *pcb)
{
  char  preview[40];
  static const char marker[] = " <-*-> ";
  unsigned ep = pcb->hi_char;
  unsigned sc = (ep > 15) ? ep - 15 : 0;
  unsigned lp = pcb->nchars;
  unsigned ec = ((ep+12)>lp) ? lp : ep+12;
  char *ins = preview;
  char *src = pcb->text;
  int   l;
 
  if ((ec - sc)>0)  {
     if ((l = ep - sc) > 0)
        memcpy(ins, src+sc, l), ins += l;
     memcpy(ins, marker, 7), ins += 7;
     if ((l = ec - ep) > 0)
        memcpy(ins, src+ep, l), ins += l;
     *ins = 0;
     printf("Error: \"%s\"\n",preview);
     }
  pcb->nxt = 1;
  X$PARSE(pcb);
  pcb->nxt = 0;
  return;
}
 
#endif
