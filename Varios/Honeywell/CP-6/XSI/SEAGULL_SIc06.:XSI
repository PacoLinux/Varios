/*M* SEAGULL_SIc06 -- Generic symbol table management (MAKE_SIc11) */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
 
/*P*    NAME:     SEAGULL_SIc06
        PURPOSE:  This file contains "stolen" code (shhhhh).  It was
                  borrowed directly from the MAKE_SIc11 source file.
                  The functions within serve as a hash table library.
 
        DESCRIPTION:
            The functions provided here offer a generic symbol table
            management facility.  This consists of a lookup function,
            a hash function, and some statistics functions.  The user
            must provide the definition of the entry, an allocation
            function (to allocate the specific type of entry), and the
            hash table itself.  A pretty simple, yet powerful, scheme.
*/
/********************************************************************/
 
#include   <stdlib.h>
#include   <stdio.h>
 
#include   "SEAGULL06:h"
 
 
#ifdef  __EXAMPLE__
struct  sym_basic   *sym_basic_head  = 0;
#endif
 
/* SG6_ALLOC_TEXT - num of bytes to malloc for text storage each time */
#ifndef SG6_ALLOC_TEXT
#define SG6_ALLOC_TEXT 1024
#endif
 
/* SG6_ALLOC_NUM  --  number of sym entries to malloc at a time   */
#ifndef SG6_ALLOC_NUM
#define SG6_ALLOC_NUM   50
#endif
 
/* Global data */
int   (*sg6_Hash)( char *, int) = sg6__SymbolHash;
char *sg6_sym_text_block   = 0;
int   sg6_sym_text_size    = 0;
 
#pragma LIST EJECT
/********************************************************************/
/*F*    NAME:       sg6__LookupSym
        PURPOSE:    To lookup a name in a symbol table.
        DESCRIPTION:
           This is a special generic symbol table manager that
           is used to manage different symbol tables.  The only
           difference in the handling of the symbol tables is the
           function used to allocate a new symbol table entry.
           The function is passed as an argument to this function
           so that when a name being looked up is not found and the
           enter option is specified then the name will be added
           to the symbol table (or not).
 
           When a name cannot be added to the symbol table or when
           enter is not specified and the name is not in the symbol
           table this function returns a NULL pointer.
*/
/********************************************************************/
 
SGSYMBOL *
sg6__LookupSym( SGHASHTABLE  *ht,
                char         *name,
                int           nm_len,
                int           enter,
                SGSYMBOL     *((*sym_alloc)())
              )
{
  int         cmprs = 0;
  int         h;
  SGSYMBOL   **s;
  SGSYMBOL   *rs;
 
  if (ht->hash_size == 0)  {
      fprintf( stderr, "### Fatal Error: hash size is zero (not "
               "properly initialized) \n"
               "### at sg6__LookupSym, line %d \n", __LINE__);
      exit( 7);
  }
  h = sg6_Hash( name, nm_len) % ht->hash_size;
  s = & ht->table[ h];
  ht->hash_looks++;
  while (rs = *s)  {
     cmprs++;
     if (rs->sym_len == nm_len && memcmp(rs->sym_text,name,nm_len)==0)
        break;
     s = &rs->next;
     }
 
  ht->hash_cmprs += cmprs;
  if (rs) {
     ht->hash_hits++;
     return rs;
     }
 
  if (!enter) return 0;
 
  if(!(rs = sym_alloc(name, nm_len, enter)))
    return 0;
  ht->hash_syms++;
  rs->next = 0;
  *s = rs;
  return rs;
}
 
 
#pragma LIST EJECT
/********************************************************************/
/*F*    NAME:       sg6__SymbolHash
        PURPOSE:    Hash function.
        DESCRIPTION:
            Your basic hash function algorithm.  This will be used by
            default, but may be changed to a user specified function.
            Just set sg6_Hash = *(your_func)();  It should be an
            int function, with the same parameters (char *, int).
*/
/********************************************************************/
 
int
sg6__SymbolHash( char *name, int len)
{
  int   rs = 0;
  int   c  = 0;
 
  while(len > 0)
     if ( (c = *name++) == 128 )
        rs = rs + '$', len--, *(name-1) = '$';
     else rs = rs + c, len--;
 
  return rs;
}
 
 
#pragma LIST EJECT
/********************************************************************/
/*F*    NAME:       sg6__AllocText( n,s)
        PURPOSE:    To return a pointer to some text that will never
                    be freed.
*/
 
char *
sg6__AllocText( int n, char *s)
{
  char     *rs;
 
  if (sg6_sym_text_size < n)  {
     int alloc = (n > 100) ? SG6_ALLOC_TEXT+100*((n+100)/n) : SG6_ALLOC_TEXT;
     sg6_sym_text_block = (char *) malloc(alloc);
     if (!sg6_sym_text_block) return 0;
     sg6_sym_text_size  = alloc;
     }
  rs = sg6_sym_text_block;
  sg6_sym_text_block += n;
  sg6_sym_text_size  -= n;
  if (s) memcpy(rs,s,n);
  return rs;
}
 
 
#pragma LIST EJECT
/********************************************************************/
/*F*    NAME:       sg6__PrintHashtableStats
        PURPOSE:    Printout some useful statistics on your hash table.
        DESCRIPTION:
            Print out statistics information on request (usually in
            debug mode).  This data includes: table name, size, entries,
            compares, lookups, and hits.
*/
/********************************************************************/
 
int
sg6__PrintHashtableStats( SGHASHTABLE  *ht,
                          char         *name
                        )
{
  printf("%14s Size=%d, Entries=%d,",name,ht->hash_size,ht->hash_syms);
  printf(" Compares=%d, Lookups=%d,",ht->hash_cmprs, ht->hash_looks);
  printf(" Hits=%d\n",ht->hash_hits);
}
 
 
#pragma LIST EJECT
/********************************************************************/
/*F*    NAME:       sg6__DumpHashTable
        PURPOSE:    Dump stats, and entries (hash value + text).
        DESCRIPTION:
            Useful for debugging.  The purpose says it all.
*/
/********************************************************************/
 
int
sg6__DumpHashTable( SGHASHTABLE  *ht,
                    char         *name
                  )
{
  int   i;
  int   i_printed = 0;
  int   n_printed = 0;
  int   w_printed = 0;
 
  printf("\n\n");
  sg6__PrintHashtableStats(ht,name);
  for ( i=0 ; i<ht->hash_size ; i++ ) {
     SGSYMBOL *s = ht->table[i];
     int fw;
     while (s) {
        if (!i_printed) {
           printf("\n**** Hash Value = %3d ** ",i);
           i_printed++;
           w_printed = 25;
           }
        fw = 5 * ((s->sym_len+5) / 5);
        w_printed += fw;
        if (w_printed > 78) {
           printf("\n");
           w_printed = fw;
           }
        printf("%-*s",fw,s->sym_text), n_printed++;
        s = s->next;
        }
     i_printed = 0;
     }
  printf("\n **** End of Hash Table: \"%s\"\n",name);
  printf(  "      Entries found=%d, Indicated Entries=%d\n",
           n_printed, ht->hash_syms);
}
 
 
#pragma LIST EJECT
#ifdef __EXAMPLE__
/*F*    NAME:          alloc_sym_basic(name, nm_len, flag)
        PURPOSE:       To allocate a file basic symbol table entry.
*/
SGSYMBOL *
alloc_sym_basic(name, nm_len, flag)
  char     *name;
  unsigned  nm_len;
  unsigned  flag;
{
  char                 *sg6__AllocText();
  struct   sym_basic   *rs;
  char                 *s;
  int                   i;
 
  if (!sym_basic_head) {  /* need to allocate more file owners */
     int   sz = sizeof(struct sym_basic) * SG6_ALLOC_NUM;
     rs = (struct sym_basic *)malloc(sz);
     if (!(sym_basic_head = rs)) return 0;
     i = SG6_ALLOC_NUM;
     while (--i) rs->next = rs+1, rs++;
     rs->next = 0;
     }
  rs = sym_basic_head;
  sym_basic_head = rs->next;
  *rs = init_sym_basic;
  rs->ow_len = nm_len;
 
  if (flag & 1)  {  /*  need to alloc block to hold text      */
     s = rs->ow_text = sg6__AllocText(nm_len+1,name);
     if (!s) return 0;
     s[nm_len] = 0;
     }
  else rs->ow_text = name;
 
  return (SGSYMBOL *) rs;
}
#endif
 
 
#pragma LIST EJECT
/********************************************************************/
/*F*    NAME:       sg6__Push
        PURPOSE:    Push an pointer element onto a given stack.
        DESCRIPTION:
            A stack (table of pointers) is passed in here, along with
            some item (pointer) to be pushed on the stack.
        INPUT:
            stack -  pointer to generic stack structure
            item  -  pointer to some generic item
        OUTPUT:
            A zero (0) is returned on success, and non-zero if failed.
*/
/********************************************************************/
 
int
sg6__Push( SGSTACK  *stack,
           char     *item
         )
{
   if (!stack)
      return( SG6_NO_STACK);
   else if (stack->st_top < stack->st_max)  {
      if (!stack->st_pile)
         return( SG6_NO_PILE);
      else  {
         stack->st_pile[ ++stack->st_top] = item;
         return 0;
      }
   }
   else
      return( SG6_STACK_FULL);
}  /* sg6__Push() */
 
 
#pragma LIST EJECT
/********************************************************************/
/*F*    NAME:       sg6__Pop
        PURPOSE:    Pop an pointer element off a given stack.
        DESCRIPTION:
            A stack (table of pointers) is passed in here, and this
            function will pop off the top item and return the ptr.
        INPUT:
            stack -  pointer to generic stack structure
        OUTPUT:
            A pointer to the item is returned on success, and a null
            pointer is returned on failure.
*/
/********************************************************************/
 
char *
sg6__Pop( SGSTACK  *stack )
{
   char  *item;
 
   if (!stack)
      return( SG6_NO_STACK_PTR);
   else if (stack->st_top)  {
      item = stack->st_pile[ stack->st_top];
      stack->st_pile[ stack->st_top--] = 0;
      return( (char *)item);
   }
   else
      return( SG6_STACK_EMPTY);
}  /* sg6__Pop() */
