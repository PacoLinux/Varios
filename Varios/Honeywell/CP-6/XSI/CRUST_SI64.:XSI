/*M* RUCMPR - CoMPaRe two Run Units and see what has changed. */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* DMR,PLM=5,IND=3,CTI=3,SDI=3,MCL=10,CSI=0,ECI=0 */
                                   /*
                                        Author: D.R Calkins, LADC
                                        Date: 7/89
                                                                  */
PRINT: PROC(SI_TABLE,UI_TABLE,CH_TABLE,BREAK_DOWN);
 
%INCLUDE CP_6;
%INCLUDE CRUST_C61;
 
%TABLE (FPTN=SI_TABLE,STCLASS=PARAM);
%TABLE (FPTN=UI_TABLE,STCLASS=PARAM);
%CHANGES (FPTN=CH_TABLE,STCLASS=PARAM);
DCL BREAK_DOWN BIT(1) PARAM ALIGNED;
 
%DELTA (FPTN = TOTAL,STCLASS=AUTO);
%DELTA (FPTN = NODE,STCLASS=AUTO);
DCL CUR_NODE SBIN;
DCL MARKER SBIN;
DCL NUM_NODES SBIN;
DCL OLD_MARKER SBIN;
DCL CUR_POS SBIN;
DCL NODE_HEADER BIT(1);
DCL DIV_HEADER BIT(1);
 
DCL CHAR20 CHAR(20) BASED;
DCL M$LO DCB;
 
%FPT_WRITE(FPTN=WRITE_LO,
           DCB=M$LO);
 
DCL LO_BUF CHAR(80) STATIC INIT (' ');
 
DCL 1 REP_BUF STATIC ALIGNED,
       2 TYPE CHAR(10) INIT (' ') UNAL,
       2 NAME CHAR(30) INIT (' ') UNAL,
       2 * CHAR(6) INIT(' ') UNAL,
       2 OLD CHAR(10) INIT (' ') UNAL,
       2 NEW CHAR(10) INIT (' ') UNAL,
       2 CHANGE CHAR(10) INIT (' ') UNAL;
DCL REP_BUF_C REDEF REP_BUF CHAR(76);
 
DCL 1 RESULTS STATIC ALIGNED,
       2 * CHAR(0) UNAL INIT ('Number of modules '),
       2 TYPE CHAR(8) UNAL,
       2 COUNT CHAR(10) UNAL,
       2 * CHAR(5) UNAL INIT (' '),
       2 * CHAR(0) UNAL INIT ('Number of words  '),
       2 TYPE2 CHAR(8) UNAL,
       2 SIZE CHAR(10) UNAL;
DCL RESULTS_C REDEF RESULTS CHAR(76);
 
DCL 1 NO_CHANGE STATIC,
       2 TYPE CHAR(0) UNAL INIT ('The NODE      '),
       2 NAME CHAR(20) UNAL,
       2 MESSAGE CHAR(0) UNAL INIT (' Has not been modified in any way ');
DCL NO_CHANGE_C REDEF NO_CHANGE CHAR(68);
 
DCL 1 NODE_HEADER_MSG STATIC ALIGNED,
       2 * CHAR(0) UNAL INIT ('These modules of NODE '),
       2 NAME CHAR(20) UNAL,
       2 * CHAR(0) UNAL INIT (' have been:   ');
DCL NODE_HEADER_MSG_C REDEF NODE_HEADER_MSG CHAR(56);
 
DCL 1 COLUMN CHAR(0) STATIC INIT (
'TYPE           NAME                                OLD       NEW       DIF  ');
 
DCL DASHES CHAR(0) STATIC INIT (
'--------  ------------------------------         -------   -------   -------');
 
/*  GLOBAL INITIALIZATION */;
     MARKER = 0 ;                       /* START AT TOP OF THE LIST */
     OLD_MARKER = 0;
     CALL ZERO_DELTA(TOTAL);            /* AMOUNT ENTIRE PROGRAM HAS GROWN */
     NUM_NODES = MAXIMUM(SI_TABLE.NODE_COUNT,UI_TABLE.NODE_COUNT);
 
     DO CUR_NODE = 0 TO NUM_NODES-1;
        CALL ZERO_DELTA(NODE);          /* AMOUNT EACH NODE HAS GROWN */
        CUR_POS = MARKER;
        NODE_HEADER = '0'B;
        DIV_HEADER = '0'B;
 
/* Run list of deleted modules first( Not found in UI_TABLE); */
        DO WHILE (CH_TABLE.INFO.NODE(CUR_POS) = CUR_NODE);
           IF (CH_TABLE.INFO.UI(CUR_POS) = -1) THEN
              CALL PRINT_DELETED(CH_TABLE.INFO.SI(CUR_POS));
           CUR_POS = CUR_POS + 1;
           END;
 
/* Run list of added Modules next (Not found in SI_TABLE) */
        OLD_MARKER = MARKER;
        MARKER = CUR_POS;
        CUR_POS = OLD_MARKER;
        DIV_HEADER = '0'B;
 
        DO WHILE (CUR_POS < MARKER);
           IF (CH_TABLE.INFO.SI(CUR_POS) = -1) THEN
              CALL PRINT_ADDED(CH_TABLE.INFO.UI(CUR_POS));
           CUR_POS = CUR_POS + 1;
           END;
 
/* Run list of modified Modules last. Found in both UI and SI TABLE */
        CUR_POS = OLD_MARKER;
        DIV_HEADER = '0'B;
 
        DO WHILE (CUR_POS < MARKER);
           IF (CH_TABLE.INFO.SI(CUR_POS) ~= -1) AND
              (CH_TABLE.INFO.UI(CUR_POS) ~= -1) THEN
              CALL PRINT_CHANGED(CH_TABLE.INFO.UI(CUR_POS),
                 CH_TABLE.INFO.SI(CUR_POS));
           CUR_POS = CUR_POS + 1;
           END;
 
        IF NUM_NODES > 1 THEN           /* Print the results for this node */
           CALL PRINT_NODE_RESULTS;
        CALL TOTAL_NODE;           /* Add this node to the program totals */
        CALL ZERO_DELTA(NODE);          /* Zero this node out */
 
        END;                            /* DO CUR_NODE = */
 
/* Print the grand totals for this program */
     NO_CHANGE.TYPE = 'The two Rununi';
     NO_CHANGE.NAME = 'ts are identical.';
     NO_CHANGE.MESSAGE = ' ';
     CALL PRINT_RESULTS(TOTAL);
 
     RETURN;
 
ZERO_DELTA: PROC(DELTA);
 
%DELTA (STCLASS=PARAM);
DCL LOOP SBIN;
 
     DELTA.COUNT_D = 0;
     DELTA.COUNT_C = 0;
     DELTA.COUNT_A = 0;
     DELTA.DELETED = 0;
     DELTA.CHANGED = 0;
     DELTA.ADDED = 0;
     DO LOOP = 0 TO 25;
        DELTA.LETTERS(LOOP) = 0;
        END;
END;
 
PRINT_DELETED: PROC(SI);
 
DCL SI SBIN PARAM;
DCL LET SBIN;
 
     IF NOT NODE_HEADER THEN CALL PRINT_NODE_HEADER;
     IF NOT DIV_HEADER THEN CALL PRINT_DELETED_HEADER;
     REP_BUF.TYPE = SI_TABLE.PROCEDURE.SC_TYPE(SI);
     REP_BUF.NAME = SI_TABLE.PROCEDURE.NAME(SI);
     CALL CONVERT_NUM (REP_BUF.OLD,SI_TABLE.PROCEDURE.SIZE(SI));
     REP_BUF.NEW = '         0';        /* There is no UI */
     REP_BUF.CHANGE = REP_BUF.OLD;
     WRITE_LO.BUF_ = VECTOR(REP_BUF);
     CALL PRINT_LINE;
     LET = ASCBIN(SUBSTR(SI_TABLE.PROCEDURE.NAME(SI),0,1)) - %ASCBIN('A');
     NODE.LETTERS(LET) = NODE.LETTERS(LET)-SI_TABLE.PROCEDURE.SIZE(SI);
     NODE.DELETED = NODE.DELETED + SI_TABLE.PROCEDURE.SIZE(SI);
     NODE.COUNT_D = NODE.COUNT_D + 1;
END ;
 
PRINT_ADDED: PROC(UI);
 
DCL UI SBIN PARAM;
DCL LET SBIN;
 
     IF NOT NODE_HEADER THEN CALL PRINT_NODE_HEADER;
     IF NOT DIV_HEADER THEN CALL PRINT_ADDED_HEADER;
     REP_BUF.TYPE = UI_TABLE.PROCEDURE.SC_TYPE(UI);
     REP_BUF.NAME = UI_TABLE.PROCEDURE.NAME(UI);
     CALL CONVERT_NUM (REP_BUF.NEW,UI_TABLE.PROCEDURE.SIZE(UI));
     REP_BUF.OLD = '         0';        /* There is no SI */
     REP_BUF.CHANGE = REP_BUF.NEW;
     WRITE_LO.BUF_ = VECTOR(REP_BUF);
     CALL PRINT_LINE;
     LET = ASCBIN(SUBSTR(UI_TABLE.PROCEDURE.NAME(UI),0,1)) - %ASCBIN('A');
     NODE.LETTERS(LET) = NODE.LETTERS(LET)+UI_TABLE.PROCEDURE.SIZE(UI);
     NODE.ADDED = NODE.ADDED + UI_TABLE.PROCEDURE.SIZE(UI);
     NODE.COUNT_A = NODE.COUNT_A + 1;
END ;
 
PRINT_CHANGED: PROC(UI,SI);
 
DCL SI SBIN PARAM;
DCL UI SBIN PARAM;
DCL LET SBIN;
DCL CH SBIN;
 
     IF NOT NODE_HEADER THEN CALL PRINT_NODE_HEADER;
     IF NOT DIV_HEADER THEN CALL PRINT_CHANGED_HEADER;
     CH = UI_TABLE.PROCEDURE.SIZE(UI) - SI_TABLE.PROCEDURE.SIZE(SI);
     REP_BUF.TYPE = UI_TABLE.PROCEDURE.SC_TYPE(UI);
     REP_BUF.NAME = UI_TABLE.PROCEDURE.NAME(UI);
     CALL CONVERT_NUM (REP_BUF.NEW,UI_TABLE.PROCEDURE.SIZE(UI));
     CALL CONVERT_NUM (REP_BUF.OLD,SI_TABLE.PROCEDURE.SIZE(SI));
     CALL CONVERT_NUM (REP_BUF.CHANGE,CH);
     WRITE_LO.BUF_ = VECTOR(REP_BUF);
     CALL PRINT_LINE;
     LET = ASCBIN(SUBSTR(UI_TABLE.PROCEDURE.NAME(UI),0,1)) - %ASCBIN('A');
     NODE.LETTERS(LET) = NODE.LETTERS(LET) + CH;
     NODE.CHANGED = NODE.CHANGED + CH;
     NODE.COUNT_C = NODE.COUNT_C + 1;
END ;
 
CONVERT_NUM: PROC(STR,DEC);
 
DCL STR CHAR(10) PARAM;
DCL DEC SBIN PARAM;
 
DCL LOOP SBIN;
 
     IF DEC = 0 THEN
     DO;
        STR = '         0';
        RETURN;
        END;
 
     CALL BINXCHAR(STR,DEC);
     DO LOOP = 1 TO 9;
        IF (SUBSTR(STR,LOOP,1) ~= '0')
        THEN GOTO OUT;
        END;
OUT: ;
     IF (SUBSTR (STR,0,1) = '-') THEN
     DO ;
        LOOP = LOOP - 1;
        CALL INSERT(STR,LOOP,1,'-');
        END;
     CALL INSERT(STR,0,LOOP,'         ');
     RETURN;
END;
 
PRINT_NODE_RESULTS: PROC;
 
     NO_CHANGE.NAME = UI_TABLE.NODE.NAME(CUR_NODE);
     CALL PRINT_RESULTS(NODE);
END;
 
TOTAL_NODE:PROC;
 
DCL LOOP SBIN;
 
     DO LOOP = 0 TO 25;
        TOTAL.LETTERS(LOOP) = TOTAL.LETTERS(LOOP) + NODE.LETTERS(LOOP);
        END;
 
     TOTAL.DELETED = TOTAL.DELETED + NODE.DELETED;
     TOTAL.COUNT_D = TOTAL.COUNT_D + NODE.COUNT_D;
     TOTAL.ADDED = TOTAL.ADDED + NODE.ADDED;
     TOTAL.COUNT_A = TOTAL.COUNT_A + NODE.COUNT_A;
     TOTAL.CHANGED = TOTAL.CHANGED + NODE.CHANGED;
     TOTAL.COUNT_C = TOTAL.COUNT_C + NODE.COUNT_C;
END;
 
PRINT_RESULTS: PROC(DELTA);
 
%DELTA (FPTN=DELTA,STCLASS=PARAM);
 
DCL LOOP SBIN;
DCL COUNT SBIN;
DCL STR CHAR(10);
 
     LO_BUF = ' ';
     WRITE_LO.BUF_ = VECTOR(LO_BUF);
     CALL PRINT_LINE;
     IF (DELTA.COUNT_C = 0) AND
        (DELTA.COUNT_D = 0) AND
        (DELTA.COUNT_A = 0) THEN
     DO;
        WRITE_LO.BUF_ = VECTOR(NO_CHANGE);
        CALL PRINT_LINE;
        RETURN;
        END;
     RESULTS.TYPE = 'DELETED ';
     RESULTS.TYPE2 = 'DELETED ';
     CALL CONVERT_NUM(RESULTS.COUNT,DELTA.COUNT_D);
     CALL CONVERT_NUM(RESULTS.SIZE,DELTA.DELETED);
     WRITE_LO.BUF_ = VECTOR(RESULTS);
     CALL PRINT_LINE;
 
     RESULTS.TYPE = 'ADDED   ';
     RESULTS.TYPE2 = 'ADDED   ';
     CALL CONVERT_NUM(RESULTS.COUNT,DELTA.COUNT_A);
     CALL CONVERT_NUM(RESULTS.SIZE,DELTA.ADDED);
     WRITE_LO.BUF_ = VECTOR(RESULTS);
     CALL PRINT_LINE;
 
     RESULTS.TYPE = 'CHANGED ';
     RESULTS.TYPE2 = 'CHANGED ';
     CALL CONVERT_NUM(RESULTS.COUNT,DELTA.COUNT_C);
     CALL CONVERT_NUM(RESULTS.SIZE,DELTA.CHANGED);
     WRITE_LO.BUF_ = VECTOR(RESULTS);
     CALL PRINT_LINE;
 
     RESULTS.TYPE = 'AFFECTED';
     RESULTS.TYPE2 = 'AFFECTED';
     CALL CONVERT_NUM(RESULTS.COUNT,DELTA.COUNT_C+DELTA.COUNT_D+DELTA.COUNT_A);
     CALL CONVERT_NUM(RESULTS.SIZE,DELTA.CHANGED+DELTA.ADDED-DELTA.DELETED);
     WRITE_LO.BUF_ = VECTOR(RESULTS);
     CALL PRINT_LINE;
 
     IF NOT (BREAK_DOWN) THEN RETURN;   /* Didn't request LETTERs */
 
/* NOW RUN LIST OF LETTERS */
     COUNT = 5;
     LO_BUF = '               ';
     WRITE_LO.BUF_=VECTOR(LO_BUF);
     CALL PRINT_LINE;
     LO_BUF = '     Break down by letter: ';
     DO LOOP = 0 TO 25;
        IF (DELTA.LETTERS(LOOP) ~= 0) THEN
        DO;
           IF COUNT = 5 THEN
           DO;
              WRITE_LO.BUF_=VECTOR(LO_BUF);
              CALL PRINT_LINE;
              COUNT = 0;
              LO_BUF = ' ';
              END;
           CALL CONVERT_NUM(STR,DELTA.LETTERS(LOOP));
           CALL CONCAT (SUBSTR(LO_BUF,14*COUNT,14),
              STR,' - ',
              BINASC(LOOP+%ASCBIN('A')));
           COUNT = COUNT + 1;
           END;
        END;
     WRITE_LO.BUF_=VECTOR(LO_BUF);
     CALL PRINT_LINE;
 
END;
 
PRINT_LINE: PROC;
 
     CALL M$WRITE(WRITE_LO);
END;
 
PRINT_NODE_HEADER: PROC;
 
     NODE_HEADER = '1'B;
     LO_BUF = ' ';
     WRITE_LO.BUF_ = VECTOR(LO_BUF);
     CALL PRINT_LINE;
     CALL PRINT_LINE;
     CALL PRINT_LINE;
     CALL PRINT_LINE;
     NODE_HEADER_MSG.NAME = UI_TABLE.NODE.NAME(CUR_NODE);
     WRITE_LO.BUF_ = VECTOR(NODE_HEADER_MSG);
     CALL PRINT_LINE;
END;
 
PRINT_DELETED_HEADER: PROC;
 
     DIV_HEADER = '1'B;
     LO_BUF = ' ';
     WRITE_LO.BUF_ = VECTOR(LO_BUF);
     CALL PRINT_LINE;
     LO_BUF = '   DELETED: ';
     WRITE_LO.BUF_ = VECTOR(LO_BUF);
     CALL PRINT_LINE;
     WRITE_LO.BUF_ = VECTOR(COLUMN);
     CALL PRINT_LINE;
     WRITE_LO.BUF_ = VECTOR(DASHES);
     CALL PRINT_LINE;
END;
 
PRINT_ADDED_HEADER: PROC;
 
     DIV_HEADER = '1'B;
     LO_BUF = ' ';
     WRITE_LO.BUF_ = VECTOR(LO_BUF);
     CALL PRINT_LINE;
     LO_BUF = '   ADDED: ';
     WRITE_LO.BUF_ = VECTOR(LO_BUF);
     CALL PRINT_LINE;
     WRITE_LO.BUF_ = VECTOR(COLUMN);
     CALL PRINT_LINE;
     WRITE_LO.BUF_ = VECTOR(DASHES);
     CALL PRINT_LINE;
END;
 
PRINT_CHANGED_HEADER: PROC;
 
     DIV_HEADER = '1'B;
     LO_BUF = ' ';
     WRITE_LO.BUF_ = VECTOR(LO_BUF);
     CALL PRINT_LINE;
     LO_BUF = '   CHANGED: ';
     WRITE_LO.BUF_ = VECTOR(LO_BUF);
     CALL PRINT_LINE;
     WRITE_LO.BUF_ = VECTOR(COLUMN);
     CALL PRINT_LINE;
     WRITE_LO.BUF_ = VECTOR(DASHES);
     CALL PRINT_LINE;
END;
 
END ;
