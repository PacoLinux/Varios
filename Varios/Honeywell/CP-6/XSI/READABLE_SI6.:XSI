/*M* READABLE - REPORTS ON READABILITY OF TEXT PASSAGES */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* DMR,PLM=5,IND=5,CTI=5,SDI=5,MCL=10,CSI=0,ECI=0 */
 
READABLE: PROC MAIN;
 
                                   /*
                                        INCLUDEs here
                                                                  */
     %INCLUDE CP_6;
     %INCLUDE CP_6_SUBS;
     %F$DCB;
 
                                   /*
                                        DCBs defined here
                                                                  */
DCL M$SI DCB;
DCL M$LO DCB;
DCL M$DO DCB;
 
                                   /*
                                        CONSTANT definitions here
                                                                  */
 
                         /* XLATE table for masking insignificant characters*/
 
DCL MASKTAB1 (0:127) UBIN BYTE UNAL CONSTANT INIT (
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('#'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN(' '),
ASCBIN('.'),
ASCBIN('%'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('%'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN(' '),
ASCBIN('*'),
ASCBIN('.'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('.'),
ASCBIN('.'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('.'),
ASCBIN('*'),
ASCBIN('@'),
ASCBIN('#'),
ASCBIN('#'),
ASCBIN('#'),
ASCBIN('e'),
ASCBIN('#'),
ASCBIN('#'),
ASCBIN('#'),
ASCBIN('@'),
ASCBIN('#'),
ASCBIN('#'),
ASCBIN('#'),
ASCBIN('#'),
ASCBIN('#'),
ASCBIN('@'),
ASCBIN('#'),
ASCBIN('#'),
ASCBIN('#'),
ASCBIN('#'),
ASCBIN('#'),
ASCBIN('@'),
ASCBIN('#'),
ASCBIN('#'),
ASCBIN('#'),
ASCBIN('@'),
ASCBIN('#'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('#'),
ASCBIN('*'),
ASCBIN('@'),
ASCBIN('#'),
ASCBIN('#'),
ASCBIN('#'),
ASCBIN('e'),
ASCBIN('#'),
ASCBIN('#'),
ASCBIN('#'),
ASCBIN('@'),
ASCBIN('#'),
ASCBIN('#'),
ASCBIN('#'),
ASCBIN('#'),
ASCBIN('#'),
ASCBIN('@'),
ASCBIN('#'),
ASCBIN('#'),
ASCBIN('#'),
ASCBIN('#'),
ASCBIN('#'),
ASCBIN('@'),
ASCBIN('#'),
ASCBIN('#'),
ASCBIN('#'),
ASCBIN('@'),
ASCBIN('#'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('*'),
ASCBIN('*'),
0);                                     /* RUBOUT */
 
                                   /*
                                        Local STATIC storage
                                                                  */
DCL SEARCH_TAB (0:511) UBIN(9) UNAL STATIC
              INIT (0*61,1*1,0*29,1*3,0*29,1*3,0*385);
DCL BUF1 CHAR(255) STATIC;
DCL BUF2 CHAR(255) STATIC;
DCL MESSAGE CHAR(255) STATIC;
DCL FOG_GRADE CHAR(255) STATIC INIT('sub-genius');
DCL M$SI$ PTR STATIC;
DCL RECMAX SBIN STATIC;
DCL FLESCH_INDEX SBIN STATIC;
DCL FLESCH_GRADE SBIN STATIC;
DCL KINCAID_INDEX SBIN STATIC;
DCL FOG_INDEX SBIN STATIC;
DCL I SBIN WORD STATIC;
DCL FOUND_SYNTAX SBIN STATIC INIT(0);
DCL FOUND_SYNTAX2 SBIN STATIC INIT(0);
DCL FOUND_AT SBIN STATIC INIT(0);
DCL FORMATTING_ON SBIN STATIC INIT(1);
DCL POINT_FOUND SBIN WORD STATIC;
DCL SYLABLES SBIN STATIC INIT (0);
DCL SYLABLES_TOTAL SBIN STATIC INIT (0);
DCL WORDS SBIN STATIC INIT (0);
DCL WORD_LENGTH SBIN STATIC INIT (0);
DCL SENTENCE_LENGTH SBIN STATIC INIT (0);
DCL SENTENCES SBIN STATIC INIT (0);
DCL HARDWORD SBIN STATIC INIT (0);
                                   /*
                                        I/O FPTs here
                                                                  */
     %FPT_READ      (FPTN=READ_BUF1,
                         DCB=M$SI,
                         BUF=BUF1,
                         WAIT=YES);
 
 
     %FPT_WRITE     (FPTN=WRITE_BUF2,
                         DCB=M$LO,
                         BUF=BUF2,
                         WAIT=YES);
     %FPT_WRITE     (FPTN=WRITE_ERR,
                         DCB=M$DO,
                         BUF=MESSAGE,
                         WAIT=YES);
 
     %FPT_CLOSE     (FPTN=CLOSE_SI_SAVE,
                         DISP=SAVE,
                         DCB=M$SI);
 
     %FPT_CLOSE     (FPTN=CLOSE_LO_SAVE,
                         DISP=SAVE,
                         DCB=M$LO);
 
     %FPT_CLOSE     (FPTN=CLOSE_DO_SAVE,
                         DISP=SAVE,
                         DCB=M$DO);
 
 
%EJECT;
 
/* ************************************************************
   ***                                                      ***
   ***  Begin  R E A D A B L E    main program              ***
   ***                                                      ***
   ************************************************************ */
 
 
 
 
/*                READ THE RECORD, LOOK FOR {[}]|= AND MASK THEM OUT.
                  DONT ANALYZE THE RECORD IF IT HAS A PERIOD IN
                  COLUMN 1 OR IF IT IS BLANK.         */
 
     M$SI$=DCBADDR(DCBNUM(M$SI));
TOP_OF_LOOP: ;
     DO WHILE ('1'B);
          BUF1=' ';
          BUF2=' ';
          CALL M$READ (READ_BUF1) ALTRET (MUST_BE_EOF);
          CALL SEARCHR (FOUND_SYNTAX,FOUND_AT,SEARCH_TAB,BUF1);
          IF FOUND_SYNTAX~=255 THEN DO;
               CALL SEARCH (FOUND_SYNTAX2,FOUND_AT,SEARCH_TAB,BUF1);
               CALL CONCAT
                    (BUF2,SUBSTR(BUF1,0,FOUND_SYNTAX2),SUBSTR(BUF1,FOUND_SYNTAX+1));
               BUF1=BUF2;
             END;                       /* DO IF WE FIND A SYNTAX AREA */
          IF SUBSTR(BUF1,0,4)='.FIF' OR SUBSTR(BUF1,0,4)='.fif'
               OR SUBSTR(BUF1,0,6)='..:FIG' OR SUBSTR(BUF1,0,6)='..:MAT'
          THEN FORMATTING_ON=0;
          IF SUBSTR(BUF1,0,4)='.FIN' OR SUBSTR(BUF1,0,4)='.fin'
               OR SUBSTR(BUF1,0,4)='..:L' OR SUBSTR(BUF1,0,6)='..:END'
               OR SUBSTR(BUF1,0,6)='..:FND'
          THEN FORMATTING_ON=1;
          IF SUBSTR(BUF1,0,1)='.' OR BUF1=' ' OR FORMATTING_ON=0
          THEN ;
          ELSE
          DO;
/*             BUF2=BUF1;
               CALL M$WRITE (WRITE_BUF2) ALTRET (MXXX);    */
               CALL XLATE (BUF2,MASKTAB1,BUF1);
/*                                Look for .) and ."   */
OUT0:          DO WHILE ('1'B);
                    CALL INDEX2 (POINT_FOUND,'.%',BUF2) ALTRET (OUT1);
                    CALL INSERT (BUF2,POINT_FOUND,2,'#.');
                  END;
/*                                Change all other ) and " to #   */
OUT1:          DO WHILE ('1'B);
                    CALL INDEX1 (POINT_FOUND,'%',BUF2) ALTRET (OUT2);
                    CALL INSERT (BUF2,POINT_FOUND,1,'#');
                  END;
/*                                Special case trailing "e"         */
OUT2:          DO WHILE ('1'B);
                    CALL INDEX2 (POINT_FOUND,'e ',BUF2) ALTRET (OUT3);
                    CALL INSERT (BUF2,POINT_FOUND,2,'#/');
                  END;
OUT3:          DO WHILE ('1'B);
                    CALL INDEX2 (POINT_FOUND,'e.',BUF2) ALTRET (OUT4);
                    CALL INSERT (BUF2,POINT_FOUND,2,'#.');
                  END;
/*                                Convert all other "e"s to @  */
OUT4:          DO WHILE ('1'B);
                    CALL INDEX1 (POINT_FOUND,'e',BUF2) ALTRET (OUT5);
                    CALL INSERT (BUF2,POINT_FOUND,1,'@');
                  END;
/*                                Condense double vowels, separate
                                  triple vowels.                    */
OUT5:          DO WHILE ('1'B);
                    CALL INDEX2 (POINT_FOUND,'@@',BUF2) ALTRET (OUT6);
                    CALL INSERT (BUF2,POINT_FOUND,2,'@#');
                  END;
/*                                Flag end of sentences.        */
OUT6:          DO WHILE ('1'B);
                    CALL INDEX (POINT_FOUND,'#. ',BUF2) ALTRET (OUT7);
                    CALL INSERT (BUF2,POINT_FOUND,3,'#/:');
                  END;
/*                                Flag ends of words            */
OUT7:          DO WHILE ('1'B);
                    CALL INDEX2(POINT_FOUND,'# ',BUF2) ALTRET (OUT8);
                    CALL INSERT (BUF2,POINT_FOUND,2,'#/');
                  END;
/*                                Some words end in vowels too. */
OUT8:          DO WHILE ('1'B);
                    CALL INDEX (POINT_FOUND,'@. ',BUF2) ALTRET (OUT9);
                    CALL INSERT (BUF2,POINT_FOUND,3,'@/:');
                  END;
OUT9:          DO WHILE ('1'B);
                    CALL INDEX2(POINT_FOUND,'@ ',BUF2) ALTRET (OUT10);
                    CALL INSERT (BUF2,POINT_FOUND,2,'@/');
                  END;
OUT10:         ;
/*             CALL M$WRITE (WRITE_BUF2) ALTRET (MXXX);    */
EXAMINE_RECORD: ;
               RECMAX=M$SI$ -> F$DCB.ARS# + 1;
/*                           Search the modified record for flags.  */
               DO I = 0 TO RECMAX;
                    DO SELECT (SUBSTR(BUF2,I,1));
                    SELECT ('@');       /*THIS IS A SYLLABLE*/
                       SYLABLES=SYLABLES+1;
                       SYLABLES_TOTAL=SYLABLES_TOTAL+1;
                    SELECT ('/');       /*THIS IS A WORD*/
                       WORDS=WORDS+1;
                       IF SYLABLES>2 THEN
                            HARDWORD=HARDWORD+1;
                       SYLABLES=0;
                    SELECT (':');       /*THIS IS A SENTENCE*/
                       SENTENCES=SENTENCES+1;
                    END;                /*  DO SELECT SUBSTR   */
                  END;                  /*  DO I 0 TO RECMAX */
             END;                       /*DO IF GOOD BUFFER   */
 
        END;                            /*    DO WHILE ALWAYS TRUE    */
 
%EJECT;
MUST_BE_EOF: ;
 
     CALL M$CLOSE (CLOSE_SI_SAVE) ALTRET (MXXX_NO_FILE);
 
 
     IF WORDS=0 THEN WORDS=1;           /* AVOID DIVIDE BY ZERO */
     IF SENTENCES=0 THEN SENTENCES=1;
     WORD_LENGTH=(SYLABLES_TOTAL*100)/WORDS;
     SENTENCE_LENGTH=WORDS/SENTENCES;
 
     FOG_INDEX = (4*(SENTENCE_LENGTH+((100*HARDWORD)/WORDS))+5)/10;
     IF FOG_INDEX<7 THEN FOG_GRADE='grade school student';
     IF FOG_INDEX>6 AND FOG_INDEX<9 THEN FOG_GRADE='junior high school student';
     IF FOG_INDEX=9 THEN FOG_GRADE='high school freshman';
     IF FOG_INDEX=10 THEN FOG_GRADE='high school sophomore';
     IF FOG_INDEX=11 THEN FOG_GRADE='high school junior';
     IF FOG_INDEX=12 THEN FOG_GRADE='high school senior';
     IF FOG_INDEX=13 THEN FOG_GRADE='college freshman';
     IF FOG_INDEX=14 THEN FOG_GRADE='college sophomore';
     IF FOG_INDEX=15 THEN FOG_GRADE='college junior';
     IF FOG_INDEX=16 THEN FOG_GRADE='college senior';
     IF FOG_INDEX=17 THEN FOG_GRADE='first-year graduate student';
     IF FOG_INDEX=18 THEN FOG_GRADE='masters degree candidate';
     IF FOG_INDEX=19 THEN FOG_GRADE='doctorate candidate';
     IF FOG_INDEX>20 AND FOG_INDEX<26 THEN FOG_GRADE='PhD';
     IF FOG_INDEX>25 AND FOG_INDEX<30 THEN FOG_GRADE='genius';
 
     FLESCH_INDEX=((206835-(846*WORD_LENGTH)-(1015*SENTENCE_LENGTH))+500)/1000;
     IF FLESCH_INDEX<50 THEN
          FLESCH_GRADE=(410-(3*FLESCH_INDEX))/20;
     IF FLESCH_INDEX<60 AND FLESCH_INDEX>49 THEN
          FLESCH_GRADE=(280-(3*FLESCH_INDEX))/10;
     IF FLESCH_INDEX<70 AND FLESCH_INDEX>59 THEN
          FLESCH_GRADE=(110-FLESCH_INDEX)/5;
     IF FLESCH_INDEX>69 THEN
          FLESCH_GRADE=(150-FLESCH_INDEX)/10;
 
     KINCAID_INDEX=(((39*SENTENCE_LENGTH)+((((1180*WORD_LENGTH)/100))-1559))+50)/100;
 
STRIPPER: PROC (BUF1);             /*   STRIPS ZEROS OFF NUMERIC VALUES    */
DCL BUF1 CHAR(255);
     I=1;
     DO WHILE (SUBSTR(BUF1,I,1)='0');
          I=I+1;
        END;
     BUF1=SUBSTR(BUF1,I);
     IF BUF1=' ' THEN BUF1 = '0';
END STRIPPER;
     BUF2=' ';
     BUF1=' ';
 
     CALL BINCHAR(SUBSTR(BUF1,0,12),SENTENCES);
     CALL STRIPPER (BUF1);
     CALL CONCAT(BUF2,'Number of formatted sentences: ',SUBSTR(BUF1,0,6));
     CALL M$WRITE(WRITE_BUF2) ALTRET (MXXX);
 
     CALL BINCHAR(SUBSTR(BUF1,0,12),WORDS);
     CALL STRIPPER (BUF1);
     CALL CONCAT(BUF2,'Number of words in formatted sentences: ',SUBSTR(BUF1,0,6));
     CALL M$WRITE(WRITE_BUF2) ALTRET (MXXX);
 
     CALL BINCHAR(SUBSTR(BUF1,0,12),HARDWORD);
     CALL STRIPPER (BUF1);
     CALL CONCAT(BUF2,'Number of difficult words (3 syllables or more): ',SUBSTR(BUF1,0,6));
     CALL M$WRITE(WRITE_BUF2) ALTRET (MXXX);
 
     CALL BINCHAR(SUBSTR(BUF1,0,12),WORD_LENGTH);
     CALL STRIPPER (BUF1);
     CALL CONCAT(BUF2,'Average syllables per word: ',SUBSTR(BUF1,0,1),'.',SUBSTR(BUF1,1,2));
     IF WORD_LENGTH > 1000 THEN
          CALL CONCAT(BUF2,'Average syllables per word: ',SUBSTR(BUF1,0,2),'.',SUBSTR(BUF1,2,2));
     CALL M$WRITE(WRITE_BUF2) ALTRET (MXXX);
 
     CALL BINCHAR(SUBSTR(BUF1,0,12),SENTENCE_LENGTH);
     CALL STRIPPER (BUF1);
     CALL CONCAT(BUF2,'Average words per sentence: ',SUBSTR(BUF1,0,6));
     CALL M$WRITE(WRITE_BUF2) ALTRET (MXXX);
 
     BUF2=' ';
     CALL M$WRITE(WRITE_BUF2) ALTRET (MXXX);
     CALL BINCHAR(SUBSTR(BUF1,0,6),FLESCH_INDEX);
     CALL STRIPPER (BUF1);
     CALL CONCAT(BUF2,'Flesch Index: ',SUBSTR(BUF1,0,6));
     CALL M$WRITE(WRITE_BUF2) ALTRET (MXXX);
     CALL BINCHAR(SUBSTR(BUF1,0,6),FLESCH_GRADE);
     CALL STRIPPER (BUF1);
     CALL CONCAT(BUF2,'Flesch Grade Level: ',SUBSTR(BUF1,0,6));
     CALL M$WRITE(WRITE_BUF2) ALTRET (MXXX);
     CALL BINCHAR(SUBSTR(BUF1,0,6),KINCAID_INDEX);
     CALL STRIPPER (BUF1);
     CALL CONCAT(BUF2,'Kincaid Grade Level: ',SUBSTR(BUF1,0,6));
     CALL M$WRITE(WRITE_BUF2) ALTRET (MXXX);
     CALL BINCHAR(SUBSTR(BUF1,0,6),FOG_INDEX);
     CALL STRIPPER (BUF1);
     CALL CONCAT(BUF2,'FOG Index Grade Level: ',SUBSTR(BUF1,0,6));
     CALL M$WRITE(WRITE_BUF2) ALTRET (MXXX);
 
     BUF2=' ';
     CALL M$WRITE(WRITE_BUF2) ALTRET (MXXX);
     CALL CONCAT(BUF2,'Assuming knowledge of special words, a typical ',FOG_GRADE);
     CALL M$WRITE(WRITE_BUF2) ALTRET (MXXX);
     BUF2='   might understand the document.';
     IF FOG_GRADE='sub-genius' THEN BUF2='   might understand the document, but only through osmosis.';
     CALL M$WRITE(WRITE_BUF2) ALTRET (MXXX);
 
     CALL M$CLOSE (CLOSE_LO_SAVE) ALTRET (MXXX);
 
     CALL M$EXIT;
MXXX: ;
     MESSAGE='**** READABLE got confused somewhere.  Sorry.';
     CALL M$WRITE(WRITE_ERR);
     CALL M$XXX;
MXXX_NO_FILE: ;
     MESSAGE='**** READABLE cannot find that file.';
     CALL M$WRITE(WRITE_ERR);
     CALL M$XXX;
 
 
END READABLE;
