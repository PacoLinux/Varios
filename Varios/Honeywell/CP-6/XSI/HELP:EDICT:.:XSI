EDICT prompts the user for inputs according to the Crisman documentation
standards(AF_0091E-0).  It formats the input and creates an output file.
This file is structured to contain the *M*, *P*, *F*, *I*, *0*, *D*, *B*, *K*,
*N* document groups.
     For definitions of these groups type :
 
                    HELP (EDICT.X) SECTIONS
 
     For an explanation of how to create groups type :
 
                    HELP (EDICT.X) DEFS
 
    For a list of help topics type :
 
                    HELP (EDICT.X) TOPICS
 
     For an explanation of how to use edict type a ? or :
 
                    HELP (EDICT.X) USAGE
     Edict is invoked by typing:
 
        EDICT.X [ [ON|INTO|OVER] FID] [OPTION [,OPTION]...]
 
     If FID is specified it will be created, written over or into and it
will contain the output.  Output is the created documentation.
If this field is not entered the created file is named *DOC.
 
   The options are:
        S[TART] = VALUE- a fractional number, denoting the start value
                       for the edit keys.
 
        R[IGHTMARGIN] = VALUE- a decimal number, which will delimit the
                             bound of the right margin.
 
        L[EFTMARGIN] = VALUE- a decimal number, which will define the
                            leftmost bound of the documentation file.
        I[NCREMENT] = VALUE- a fractional number, which will delimit the
                           increment factor for the edit keys.
 
        K[EYWORD]L[EFT]= VALUE- a whole decimal number which will
                                denote the column that the leftmost
                                character of the keywords (name,purpose,
                                description, etc...) will be aligned
                                on.
 
        K[EYWORD]R[IGHT]= VALUE- a decimal number which will denote
                                 the column that the rightmost
                                 character of the keywords (NAME,PURPOSE,
                                 DESCRIPTION, ETC...) will be aligned
                                 on.
 
  The defaults are:      (L=10,R=80,S=1.0,I=1.0,KL=5)
 
        Note the rightmargin maximum will default to 132 if it's
           larger than 132.
        The keywords are aligned on their left side in column 5.
        The user cannot specify both keyleft and keyright in the same
        invocation.
 
   The commands available inside Edict are:
 
         +line#[,line#]   -This is the syntax of the command which
                           will build a plus card at the first line
                           number specified.  Documentation will then
                           continue being inserted after that line in
                           the file.  The increment will then default
                           to count the edit key in .01 increments.
 
         .C(comment field) -The 'comment field' will become the plus
                            cards comment field.
 
         .E                -This command puts you into edit of the
                            documentation you are creating.  Be SURE
                            you RESET the key of the next record to
                            be created in the documentation file if
                            you insert new lines at the end of the
                            file while in edit.
 
         .I=line#          -This command lets you change the value of
                            the increment of the edit keys.  The same
                            thing as the I option for invocation.
 
         .S=line#          -This command lets you change the value of
                            the line number of the next edit key.
                            This is the same as the S option in the
                            invocation of EDICT.
 
EDICT - Extractable Documentation In Crismanese Terms
 **************************************************************
 *                                                            *
 *  Copyright (c) Bull HN Information Systems Inc., 1989      *
 *                                                            *
 **************************************************************
Type B            These are the data definitions.  All external
                  data bases must contain a definition for each
                  field.  The *B* comment must follow the field
                  it describes.  It's not clear yet but EXTRACT
                  may supply information available with the data
                  declaration like type or size.
 
                             *B* name - description
 
B
B
6/13/83
Made internal modifications to make EDICT easier to maintain.
8/04/82
Made EDICT's internal HELP work again.
06/29/82
Made EDICT's commands case-insensitive.
06/17/82
The last changes to EDICT are the addition of commands.  These
commands will allow the user to dynamically change the edit key
for the next record to be inserted, and also change the key increment.
Commands were also added to allow the user to have plus cards made
with EDICT taking care of the date account and comment fields.  The
user can however change the character string that is placed in the
comment field.  For a full description of these commands type:
 
HELP (EDICT.X) COMMANDS
 
For a list of all the previous commands just hit a '?' after getting
the 'changes'.
 
   The commands available inside Edict are:
 
         +line#[,line#]   -This is the syntax of the command which
                           will build a plus card at the first line
                           number specified.  Documentation will then
                           continue being inserted after that line in
                           the file.  The increment will then default
                           to count the edit key in .01 increments.
 
         .C(comment field) -The 'comment field' will become the plus
                            cards comment field.
 
         .E                -This command puts you into edit of the
                            documentation you are creating.  Be SURE
                            you RESET the key of the next record to
                            be created in the documentation file if
                            you insert new lines at the end of the
                            file while in edit.
 
         .I=line#          -This command lets you change the value of
                            the increment of the edit keys.  The same
                            thing as the I option for invocation.
 
         .S=line#          -This command lets you change the value of
                            the line number of the next edit key.
                            This is the same as the S option in the
                            invocation of EDICT.
 
CHANGES
Type D            These are the detail reports and are required
                 for at least every entry point with the
                 following exception note.  If a routine
                 contains more than one entry point but the
                 details are almost identical, only one detail
                 report is needed and the keyword ENTRY:  is
                 used to define the multiple entry points.
                 EXTRACT will duplicate the D report with each
                 entry in sorted order.  Descriptive D comments
                 may be interspersed with the code to explain
                 what is happening.  These will be collected by
                 EXTRACT and included with D report.  The *D*
                 comments appear at point of entry (rather than
                 front of module).  They include the information
                 necessary for the user to know how to use the
                 routine and what to expect of it in the way of
                 usage, interfaces, input, output, etc.  See
                 keywords.  At the actual point of entry, repeat
                 the ENTRY: and the keyword and paragraph which
                 makes this ENTRY different from the D comments
                 to be repeated.  Extract can then duplicate the
                 full D comments and substitute the information
                 which makes it different.
 
        *D* creates the following groups:
 
              NAME:
              ENTRY:
              CALL:
              PARAMETERS:
              INTERFACE:
              ENVIRONMENT:
              INPUT:
              OUTPUT:
              SCRATCH:
              DESCRIPTION:
 
     For a description of any of these groups type:
 
              HELP (EDICT.X) D(groupname)
 
     Where (groupname) is any listed above.
 
                 CALL:          Calling sequence for this
                                routine, i.e., how is this
                                routine called.
 
Type D            These are the detail reports and are required
                 for at least every entry point with the
                 following exception note.  If a routine
                 contains more than one entry point but the
                 details are almost identical, only one detail
                 report is needed and the keyword ENTRY:  is
                 used to define the multiple entry points.
                 EXTRACT will duplicate the D report with each
                 entry in sorted order.  Descriptive D comments
                 may be interspersed with the code to explain
                 what is happening.  These will be collected by
                 EXTRACT and included with D report.  The *D*
                 comments appear at point of entry (rather than
                 front of module).  They include the information
                 necessary for the user to know how to use the
                 routine and what to expect of it in the way of
                 usage, interfaces, input, output, etc.  See
                 keywords.  At the actual point of entry, repeat
                 the ENTRY: and the keyword and paragraph which
                 makes this ENTRY different from the D comments
                 to be repeated.  Extract can then duplicate the
                 full D comments and substitute the information
                 which makes it different.
 
Type D            These are the detail reports and are required
                 for at least every entry point with the
                 following exception note.  If a routine
                 contains more than one entry point but the
                 details are almost identical, only one detail
                 report is needed and the keyword ENTRY:  is
                 used to define the multiple entry points.
                 EXTRACT will duplicate the D report with each
                 entry in sorted order.  Descriptive D comments
                 may be interspersed with the code to explain
                 what is happening.  These will be collected by
                 EXTRACT and included with D report.  The *D*
                 comments appear at point of entry (rather than
                 front of module).  They include the information
                 necessary for the user to know how to use the
                 routine and what to expect of it in the way of
                 usage, interfaces, input, output, etc.  See
                 keywords.  At the actual point of entry, repeat
                 the ENTRY: and the keyword and paragraph which
                 makes this ENTRY different from the D comments
                 to be repeated.  Extract can then duplicate the
                  full D comments and substitute the information
                 which makes it different.
 
                 DESCRIPTION:   What does it actually do and
                                how.
 
Type D            These are the detail reports and are required
                 for at least every entry point with the
                 following exception note.  If a routine
                 contains more than one entry point but the
                 details are almost identical, only one detail
                 report is needed and the keyword ENTRY:  is
                 used to define the multiple entry points.
                 EXTRACT will duplicate the D report with each
                 entry in sorted order.  Descriptive D comments
                 may be interspersed with the code to explain
                 what is happening.  These will be collected by
                 EXTRACT and included with D report.  The *D*
                 comments appear at point of entry (rather than
                 front of module).  They include the information
                 necessary for the user to know how to use the
                 routine and what to expect of it in the way of
                 usage, interfaces, input, output, etc.  See
                 keywords.  At the actual point of entry, repeat
                 the ENTRY: and the keyword and paragraph which
                 makes this ENTRY different from the D comments
                 to be repeated.  Extract can then duplicate the
                 full D comments and substitute the information
                 which makes it different.
 
 
     The answer of yes to the 'document a file' request will create
the document groups of *M* and *P*.
     The answer of yes to the 'document a module' request will create
the document groups of *F* and *D*.
     The answer of yes to the 'document an internal module' request
will create the document group *I*.
     The other questions are self explanatory.
 
                 ENTRY:         Used for sorting.  Needed only
                                if multiple entries require the
                                same detail report.
 
Type D            These are the detail reports and are required
                 for at least every entry point with the
                 following exception note.  If a routine
                 contains more than one entry point but the
                 details are almost identical, only one detail
                 report is needed and the keyword ENTRY:  is
                 used to define the multiple entry points.
                 EXTRACT will duplicate the D report with each
                 entry in sorted order.  Descriptive D comments
                 may be interspersed with the code to explain
                 what is happening.  These will be collected by
                 EXTRACT and included with D report.  The *D*
                 comments appear at point of entry (rather than
                 front of module).  They include the information
                 necessary for the user to know how to use the
                 routine and what to expect of it in the way of
                 usage, interfaces, input, output, etc.  See
                 keywords.  At the actual point of entry, repeat
                 the ENTRY: and the keyword and paragraph which
                 makes this ENTRY different from the D comments
                 to be repeated.  Extract can then duplicate the
                 full D comments and substitute the information
                 which makes it different.
 
                 ENVIRONMENT:   Mapped/unmapped, master/slave,
                                fauth required, inhibit or un,
                                etc.
 
Type D            These are the detail reports and are required
                 for at least every entry point with the
                 following exception note.  If a routine
                 contains more than one entry point but the
                 details are almost identical, only one detail
                 report is needed and the keyword ENTRY:  is
                 used to define the multiple entry points.
                 EXTRACT will duplicate the D report with each
                 entry in sorted order.  Descriptive D comments
                 may be interspersed with the code to explain
                 what is happening.  These will be collected by
                 EXTRACT and included with D report.  The *D*
                 comments appear at point of entry (rather than
                 front of module).  They include the information
                 necessary for the user to know how to use the
                 routine and what to expect of it in the way of
                 usage, interfaces, input, output, etc.  See
                 keywords.  At the actual point of entry, repeat
                 the ENTRY: and the keyword and paragraph which
                 makes this ENTRY different from the D comments
                 to be repeated.  Extract can then duplicate the
                  full D comments and substitute the information
                 which makes it different.
 
                 INPUT:         System data accessed to perform
                                function.
 
Type D            These are the detail reports and are required
                 for at least every entry point with the
                 following exception note.  If a routine
                 contains more than one entry point but the
                 details are almost identical, only one detail
                 report is needed and the keyword ENTRY:  is
                 used to define the multiple entry points.
                 EXTRACT will duplicate the D report with each
                 entry in sorted order.  Descriptive D comments
                 may be interspersed with the code to explain
                 what is happening.  These will be collected by
                 EXTRACT and included with D report.  The *D*
                 comments appear at point of entry (rather than
                 front of module).  They include the information
                 necessary for the user to know how to use the
                 routine and what to expect of it in the way of
                 usage, interfaces, input, output, etc.  See
                 keywords.  At the actual point of entry, repeat
                 the ENTRY: and the keyword and paragraph which
                 makes this ENTRY different from the D comments
                 to be repeated.  Extract can then duplicate the
                  full D comments and substitute the information
                 which makes it different.
 
                 INTERFACE:     Which routines does this routine
                                call?
 
Type D            These are the detail reports and are required
                 for at least every entry point with the
                 following exception note.  If a routine
                 contains more than one entry point but the
                 details are almost identical, only one detail
                 report is needed and the keyword ENTRY:  is
                 used to define the multiple entry points.
                 EXTRACT will duplicate the D report with each
                 entry in sorted order.  Descriptive D comments
                 may be interspersed with the code to explain
                 what is happening.  These will be collected by
                 EXTRACT and included with D report.  The *D*
                 comments appear at point of entry (rather than
                 front of module).  They include the information
                 necessary for the user to know how to use the
                 routine and what to expect of it in the way of
                 usage, interfaces, input, output, etc.  See
                 keywords.  At the actual point of entry, repeat
                 the ENTRY: and the keyword and paragraph which
                 makes this ENTRY different from the D comments
                 to be repeated.  Extract can then duplicate the
                  full D comments and substitute the information
                 which makes it different.
 
                 NAME:          Must be the first record of a
                                group of *D* comments.  Used for
                                sorting.  This is the entry
                                point name.
 
Type D            These are the detail reports and are required
                 for at least every entry point with the
                 following exception note.  If a routine
                 contains more than one entry point but the
                 details are almost identical, only one detail
                 report is needed and the keyword ENTRY:  is
                 used to define the multiple entry points.
                 EXTRACT will duplicate the D report with each
                 entry in sorted order.  Descriptive D comments
                 may be interspersed with the code to explain
                 what is happening.  These will be collected by
                 EXTRACT and included with D report.  The *D*
                 comments appear at point of entry (rather than
                 front of module).  They include the information
                 necessary for the user to know how to use the
                 routine and what to expect of it in the way of
                 usage, interfaces, input, output, etc.  See
                 keywords.  At the actual point of entry, repeat
                 the ENTRY: and the keyword and paragraph which
                 makes this ENTRY different from the D comments
                 to be repeated.  Extract can then duplicate the
                 full D comments and substitute the information
                 which makes it different.
 
                 OUTPUT:        Data altered and intended as the
                                result of this
                                operation/routine.
 
Type D            These are the detail reports and are required
                 for at least every entry point with the
                 following exception note.  If a routine
                 contains more than one entry point but the
                 details are almost identical, only one detail
                 report is needed and the keyword ENTRY:  is
                 used to define the multiple entry points.
                 EXTRACT will duplicate the D report with each
                 entry in sorted order.  Descriptive D comments
                 may be interspersed with the code to explain
                 what is happening.  These will be collected by
                 EXTRACT and included with D report.  The *D*
                 comments appear at point of entry (rather than
                 front of module).  They include the information
                 necessary for the user to know how to use the
                 routine and what to expect of it in the way of
                 usage, interfaces, input, output, etc.  See
                 keywords.  At the actual point of entry, repeat
                 the ENTRY: and the keyword and paragraph which
                 makes this ENTRY different from the D comments
                 to be repeated.  Extract can then duplicate the
                 full D comments and substitute the information
                 which makes it different.
 
                 SCRATCH:       Data altered but not intended as
                                results (side effect).
 
Type D            These are the detail reports and are required
                 for at least every entry point with the
                 following exception note.  If a routine
                 contains more than one entry point but the
                 details are almost identical, only one detail
                 report is needed and the keyword ENTRY:  is
                 used to define the multiple entry points.
                 EXTRACT will duplicate the D report with each
                 entry in sorted order.  Descriptive D comments
                 may be interspersed with the code to explain
                 what is happening.  These will be collected by
                 EXTRACT and included with D report.  The *D*
                 comments appear at point of entry (rather than
                 front of module).  They include the information
                 necessary for the user to know how to use the
                 routine and what to expect of it in the way of
                 usage, interfaces, input, output, etc.  See
                 keywords.  At the actual point of entry, repeat
                 the ENTRY: and the keyword and paragraph which
                 makes this ENTRY different from the D comments
                 to be repeated.  Extract can then duplicate the
                 full D comments and substitute the information
                 which makes it different.
 
P
PDESCRIPTION
 
     The answer of yes to the 'document a file' request will create
the document groups of *M* and *P*.
 
     Please answer the question with either a Yes or a No.
 
 
M - One-line module definition and microfiche title.
 
PNAME
PPURPOSE
PREFERENCE
Type I            Some modules contain internal subroutines that
                 have no calls from outside the module.  They
                 may be documented to the P and D level using I
                 to indicate internal use only.
 
        *I* creates the following groups:
 
              NAME:
              PURPOSE:
              CALL:
              PARAMETERS:
              DATA:
              DESCRIPTION:
 
     For a description of any of these groups type:
 
              HELP (EDICT.X) I(groupname)
 
     Where (groupname) is any listed above.
 
                 CALL:          Calling sequence for this routine
                                i.e. how is this routine called?
 
Type I            Some modules contain internal subroutines that
                 have no calls from outside the module.  They
                 may be documented to the P and D level using I
                 to indicate internal use only.
 
                 DATA:          Actual data used, perhaps globals
                                or other items not in parameters.
 
Type I            Some modules contain internal subroutines that
                 have no calls from outside the module.  They
                 may be documented to the P and D level using I
                 to indicate internal use only.
 
                 DESCRIPTION:   What it actually does and how.
 
Type I            Some modules contain internal subroutines that
                 have no calls from outside the module.  They
                 may be documented to the P and D level using I
                 to indicate internal use only.
 
                 NAME:          The first record of a group
                                of *I* comments.  This name will
                                 be used for sorting the report.
 
Type I            Some modules contain internal subroutines that
                 have no calls from outside the module.  They
                 may be documented to the P and D level using I
                 to indicate internal use only.
 
 
     The answer of yes to the 'document an internal module' request
will create the document group *I*.
 
     Please answer the question with either a Yes or a No.
 
 
I - Detail of internal subroutine.
 
                 PARAMETERS:      The parameters which this routine uses
                                  other than those of the calling sequence.
                                  i.e. globals ...
 
Type I            Some modules contain internal subroutines that
                 have no calls from outside the module.  They
                 may be documented to the P and D level using I
                 to indicate internal use only.
 
                 PURPOSE:       Function performed.
 
Type I            Some modules contain internal subroutines that
                 have no calls from outside the module.  They
                 may be documented to the P and D level using I
                 to indicate internal use only.
 
Type K            The *K* may be used for keyword definitions.
                  It is also used for data descriptions to be
                  supplied in user documentation just as *B* is
                  used for data base tech manual.  The Monitor
                  Services Ref Manual, being a user Manual, is
                  created from *K*.
 
                       *K* name - definition
 
K
K
Type M            This is a one-line description of each module.
                 It must be the first comment line with each
                 module.  There should be only one *M* at the
                 beginning, i.e., don't include blank lines
                 beginning with *M*.  Subsequent *M* lines
                 within a file will change the title line on the
                 microfiche.  The format is
 
                            *M* name b/ description
 
M
 
   Enter just the character M, P, F, I, O or D corresponding to the
sections you want to create.
 
 
M - One-line module definition and microfiche title.
 
P - Overview of module or function.
 
F - Overview of routine or ENTRY point.
 
D - Detail of ENTRY point.
 
I - Detail of internal subroutine.
 
O - Operator messages
 
B - Data definitions for technical documentation
 
K - Definition of key word for user documentation
 
N - Need code for deferred feature
 
 
   The answer of yes to the 'create a section' request will allow
users to enter the identifier of the comment block they wish to
create.  Either a *M*, *P*, *F*, *I*, *O* or a *D* .
 
     Please answer the question with either a Yes or a No.
 
M
 
     The answer of yes to the 'document a module' request will create
the document groups of *F* and *D*.
 
     Please answer the question with either a Yes or a No.
 
 
F _ Overview of routine or ENTRY point.
 
D - Detail of ENTRY point.
 
Type N            This is where code is to be added to implement
                  features which are being postponed for future
                  builds of the system.  Because of the staging
                  of the system, known features are postponed but
                  it might be easier to flag where they should be
                  implemented in the module rather than figuring
                  it out later.  It might also be useful in
                  identifying minor features that are not
                  supported in each system build, as well as a
                  reminder to the module owner not to forget it.
                  The format is:
 
                       *N* keyword - description
 
N
N
N
Type O            Operator communication.  This report will track
                  every message that goes to some OC.  Properly
                  formatted, it will provide the appendix to the
                  OPs Manual so keywords are important.  Should
                  appear at point of issuance rather than at TEXT
                  definition.
 
        *O* creates the following groups:
 
                  MESSAGE:
                  ACTION:
                  MEANING:
 
        For a description of any of these groups types:
 
                  HELP (EDICT.X) O(groupname)
 
        Where (groupname) is any listed above.
 
                  ACTION:       What is the operator supposed
                                to do?
 
Type O            Operator communication.  This report will track
                  every message that goes to some OC.  Properly
                  formatted, it will provide the appendix to the
                  OPs Manual so keywords are important.  Should
                  appear at point of issuance rather than at TEXT
                  definition.
 
                  MEANING:      What's the point or meaning of
                                the message?
 
Type O            Operator communication.  This report will track
                  every message that goes to some OC.  Properly
                  formatted, it will provide the appendix to the
                  OPs Manual so keywords are important.  Should
                  appear at point of issuance rather than at TEXT
                  definition.
 
 
                  MESSAGE:      Actual text of the message.
 
Type O            Operator communication.  This report will track
                  every message that goes to some OC.  Properly
                  formatted, it will provide the appendix to the
                  OPs Manual so keywords are important.  Should
                  appear at point of issuance rather than at TEXT
                  definition.
 
   The options are:
        S[TART] = VALUE- a fractional number, denoting the start value
                       for the edit keys.
 
        R[IGHTMARGIN] = VALUE- a decimal number, which will delimit the
                             bound of the right margin.
 
        L[EFTMARGIN] = VALUE- a decimal number, which will define the
                            leftmost bound of the documentation file.
 
        I[NCREMENT] = VALUE- a fractional number, which will delimit the
                           increment factor for the edit keys.
 
        K[EYWORD]L[EFT]= VALUE- a whole decimal number which will
                                denote the column that the leftmost
                                character of the keywords (name,purpose,
                                description, etc...) will be aligned
                                on.
 
        K[EYWORD]R[IGHT]= VALUE- a decimal number which will denote
                                 the column that the rightmost
                                 character of the keywords (NAME,PURPOSE,
                                 DESCRIPTION, ETC...) will be aligned
                                 on.
 
  The defaults are:      (L=10,R=80,S=1.0,I=1.0,KL=5)
 
        Note the rightmargin maximum will default to 132 if it's
           larger than 132.
        The keywords are aligned on their left side in column 5.
        The user cannot specify both keyleft and keyright in the same
        invocation.
 
Gary Palmer, LADC
Types P or F     These are preamble or overview reports.  A *P*
                 indicates preamble to a module or file and *F*
                 indicates preamble to a function or routine.
                 These preambles are word descriptions including
                 purpose, method, references, significant
                 features or limitations of the module/function.
                 The preambles do not include the details to the
                 level of the D.  The D report will include the
                 P/F report.
 
        *P* and *F* create the following groups:
 
              NAME:
              PURPOSE:
              DESCRIPTION:
              REFERENCE:
 
     For a description of any of these groups type:
 
              HELP (EDICT.X) P OR F followed by the groupname
 
     Where groupname is any listed above.
 
                  DESCRIPTION:   black magic, features, limitations,
                                 etc...
 
Types P or F     These are preamble or overview reports.  A *P*
                 indicates preamble to a module or file and *F*
                 indicates preamble to a function or routine.
                 These preambles are word descriptions including
                 purpose, method, references, significant
                 features or limitations of the module/function.
                 The preambles do not include the details to the
                 level of the D.  The D report will include the
                 P/F report.
 
                 NAME:          The first record of any group of
                                *P* or *F* must be the NAME
                                keyword record.  This name will
                                be used for sorting the report.
 
Types P or F     These are preamble or overview reports.  A *P*
                 indicates preamble to a module or file and *F*
                 indicates preamble to a function or routine.
                 These preambles are word descriptions including
                 purpose, method, references, significant
                 features or limitations of the module/function.
                 The preambles do not include the details to the
                 level of the D.  The D report will include the
                 P/F report.
                 PURPOSE:       Function performed.
 
Types P or F     These are preamble or overview reports.  A *P*
                 indicates preamble to a module or file and *F*
                 indicates preamble to a function or routine.
                 These preambles are word descriptions including
                 purpose, method, references, significant
                 features or limitations of the module/function.
                 The preambles do not include the details to the
                 level of the D.  The D report will include the
                 P/F report.
                 REFERENCE:     May include manuals,
                                specifications, or other
                                reports.
 
Types P or F     These are preamble or overview reports.  A *P*
                 indicates preamble to a module or file and *F*
                 indicates preamble to a function or routine.
                 These preambles are word descriptions including
                 purpose, method, references, significant
                 features or limitations of the module/function.
                 The preambles do not include the details to the
                 level of the D.  The D report will include the
                 P/F report.
 
M - One-line module definition and microfiche title.
 
P _ Overview of module or function.
 
F _ Overview of routine or ENTRY point.
 
D - Detail of ENTRY point.
 
I - Detail of internal subroutine.
 
O - Operator messages
 
B - Data definitions for technical documentation
 
K - Definition of key word for user documentation
 
N - Need code for deferred feature
 
 
  For more help on any of these topics type:
 
        HELP (EDICT.X) TOPIC-LETTER
 
   Topic-letters are:
 
        M,P,F,D,O,B,K,N or I
     Edict is invoked by typing:
 
        EDICT.X [ {ON|INTO|OVER} FID] [(OPTION [,OPTION])]
 
     If FID is specified it will be created, written over or into and it
will contain the output.  Output is the created documentation.
If this field is not entered the created file is named *DOC.
 
   The options are:
        S[TART] = VALUE- a fractional number, denoting the start value
                       for the edit keys.
 
        R[IGHTMARGIN] = VALUE- a decimal number, which will delimit the
                             bound of the right margin.
 
        L[EFTMARGIN] = VALUE- a decimal number, which will define the
                            leftmost bound of the documentation file.
 
        I[NCREMENT] = VALUE- a fractional number, which will delimit the
                           increment factor for the edit keys.
 
        K[EYWORD]L[EFT]= VALUE- a whole decimal number which will
                                denote the column that the leftmost
create.  Either a *M*, *P*, *F*, *I*, *O*, *B*, *K*, *N* or a *D*
                                description, etc...) will be aligned
                                on.
 
        K[EYWORD]R[IGHT]= VALUE- a decimal number which will denote
                                 the column that the rightmost
   Enter just the character M, P, F, I, B, K, N, O or D corresponding
to the sections you want to create.
                                 on.
 
  The defaults are:      (L=10,R=80,S=1.0,I=1.0,KL=5)
 
        Note the rightmargin maximum will default to 132 if it's
           larger than 132.
        The keywords are aligned on their left side in column 5.
        The user cannot specify both keyleft and keyright in the same
        invocation.
 
EDICT.X
AID=DOCUMENTATION
AID=PROGRAMMING
TOOL=EDICT
Prompts the user for inputs according to the Crisman documentation
standards.
CHANGES
