/*M* ENTERME - ENTER an ADAPT script as a RunUnit */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/*X* NO */
 
ENTERME: PROC MAIN;
 
DCL M$SI DCB;
DCL M$LO DCB;
DCL M$LM DCB;
 
DCL B$JIT$ PTR SYMREF;
DCL B$TCB$ PTR SYMREF;
 
%INCLUDE B$JIT;
%INCLUDE B_ERRORS_C;
%INCLUDE CP_6;
    %B$TCB( STCLASS="BASED( B$TCB$ )" );
    %B$ALT;
    %FPT_UNFID( STCLASS=CONSTANT, DCB=M$LM,
        TEXTFID=BUF, LEN=XT_PARAM.SCRIPT.LEN );
    %FPT_WRITE( DCB=M$LO );
    %FPT_SCON( STCLASS=CONSTANT, SAVEFLG=NO );
    %FPT_XXX( STCLASS=CONSTANT, STEPCC=4, CODE= XT_PARAM.ERR );
%INCLUDE XT_MACRO_M;
    %XT_PARAM( STCLASS="STATIC SYMDEF",
        BUF=BUF, BUF_LEN="LENGTHC( BUF )",
        SCRIPT=BUF,
        INDCB=M$SI, OUTDCB=M$LO );
    %XT_ENTRY;
%INCLUDE XT_PERR_E ;
%INCLUDE XUR_ENTRY;
 
DCL N SBIN;
DCL LEN SBIN;
DCL BUF STATIC CHAR(256);
 
    CALL M$SCON( FPT_SCON ) ALTRET( DIE );
    CALL M$UNFID (FPT_UNFID) ALTRET( DIE );
 
    LEN = B$JIT.CCARS ;
    DO WHILE SUBSTR( B$JIT.CCBUF , LEN - 1 , 1 ) = ' ';
        LEN = LEN - 1 ;
    END;
    IF SUBSTR( B$JIT.CCBUF , LEN - 1 , 1 ) = ')'
    THEN DO;
        LEN = LEN - 1 ;
    END;
    CALL INDEX( N , ' ', SUBSTR( B$JIT.CCBUF , 0 , LEN ))
    WHENRETURN DO;
        DO WHILE SUBSTR( B$JIT.CCBUF, N , 1 ) = ' ' AND N < LEN ;
            N = N + 1 ;
        END;
        IF SUBSTR( B$JIT.CCBUF , N , 1 ) = '('
        THEN DO;
            N = N + 1 ;
        END;
        IF N < LEN
        THEN DO;
            XT_PARAM.IBUF.LEN = LEN - N ;
            XT_PARAM.IBUF.PT$ = PINCRC( ADDR( B$JIT.CCBUF ), N );
        END;
    END;
 
    CALL XT_ENTER( XT_PARAM );
    DO WHILE XT_PARAM.ADAPTING ;
        CALL XT_READ( XT_PARAM );
        IF XT_PARAM.ERR THEN EXIT ;
        IF XT_PARAM.ARS > 0
        THEN
            FPT_WRITE.BUF_ = VECTOR( SUBSTR( BUF, 0, XT_PARAM.ARS ));
        ELSE
            FPT_WRITE.BUF_ = VECTOR( NIL );
        CALL M$WRITE( FPT_WRITE );
    END/*WHILE*/;
 
    IF XT_PARAM.ERR.ERR# ~= %E$XT#EOD
      AND XT_PARAM.ERR.ERR# ~= %E$EOF
    THEN DO;
        DO WHILE '0'B;
DIE:        XT_PARAM.ERR = B$TCB.ALT$ -> B$ALT.ERR;
        END;
        CALL XUR$ERRMSG( XT_PARAM.ERR );
        XT_PARAM.ERR.SEV = XT_PARAM.ERR.SEV + 1 ;
        CALL M$XXX( FPT_XXX );
    END;
    RETURN;
 
END ENTERME ;
