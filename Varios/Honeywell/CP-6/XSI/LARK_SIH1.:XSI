.*M*
HELP file for: LARK.X
.*T*
 **************************************************************
 *                                                            *
 *  Copyright (c) Bull HN Information Systems Inc., 1989      *
 *                                                            *
 **************************************************************
.*X*                                             
FYI, this HELP file has been specially prepared to run through TUNA.X (LEN=79)
prior to running through HERMAN.  This action guarantees that the lines of text
will fill a screen as much as possible and that more lines will be on each
screen.
.*R*
.*A*
LARK (Laurie's Administrative Routines for "Komgroups") is a tool that allows
interactive usage of comgroups to perform comgroup operations that normally can
be done only through the implementation of specialized code.  LARK allows
creation, modification, and display of comgroups and their parameters and then
permits the operation of comgroup-connected stations with defined functions to
perform or simulate various applications.
 
Full command line syntax:
 
!LARK.X
 
Try
    HELP (LARK.X) COMMANDS for a complete list of LARK commands;
    HELP (LARK.X) command for information about a specific command;
    HELP (LARK.X) command PARM for the command parameters;
    HELP (LARK.X) command DESC for the command description;
    HELP (LARK.X) command OPT for the command option definitions;
    HELP (LARK.X) CONCEPTS for concepts in using LARK;
    HELP (LARK.X) INTERNAL_DESIGN for a description of how LARK works;
    HELP (LARK.X) LIMITATIONS for a description of LARK's limitations;
    HELP (LARK.X) TOPICS for a complete list of HELP topics.
 
.*K* COMMANDS
Current LARK capabilities are as follows:
 
ABO/RT   causes a functional station and its ghost user to terminate
.*R*
ACT/IVATE allows the activation of a comgroup station connected to the
         comgroup
.*R*
CLO/SE   allows closing the LARK control station previously opened via the
         OPEN command
.*R*
CON/NECT causes a defined functional station to connect to the comgroup
.*R*
CRE/ATE  allows the creation of a new comgroup with selected options
.*R*
DEA/CTIVATE allows the deactivation or disconnection of a comgroup station
         connected to the comgroup
.*R*
DEF/INE  allows the definition and creation of a functional station
.*R*
DEL/ETE  allows the deletion of an existing comgroup
.*R*
DISC/ONNECT causes a defined, connected functional station to disconnect from
         the comgroup
.*R*
DI/SPLAY allows the display of various parameters associated with a comgroup
.*R*
MOD/IFY  allows the modification of various parameters associated with a
         comgroup
.*R*
OPE/N    allows opening the LARK control station to a selected comgroup
.*R*
PA/USE   causes LARK to wait for some specified amount of time
.*R*
RES/UME  causes a defined, connected functional station to begin or resume its
         defined function
.*R*
SEL/ECT  allows the selection of a specific comgroup FID for commands not
         providing the optional comgroup FID,  the name of LARK's temporary
         station, and whether or not DISPLAY is done using an AU station
.*R*
SETP/ROFILE allows changing the profile assigned to a terminal station
.*R*
STARTF/PRG starts an FPRG and makes it into a transformed FPRG station
.*R*
STA/TUS  allows the display of the current status of a defined functional
         station and its corresponding control station
.*R*
STOPF/PRG stops a an FPRG and deactivates its station
.*R*
SUS/PEND causes a defined, connected, running functional station to halt its
         activity and wait
.*R*
<CR>     causes LARK to check for the arrival of any new control messages
 
Use E/ND, Q/UIT, or X/IT to exit from LARK.
 
.*K* XINDEX
LARK.X
.*R*
AID=SYSTEM_PROGRAMMING
.*R*
AID=PROGRAMMING
.*R*
COMGROUP
.*R*
DEBUGGING
.*R*
TESTING
.*R*
.*K* XINDEX_ABSTRACT
TOOL=LARK
.*R*
LARK (Laurie's Administrative Routines for "Komgroups") is a tool that allows
interactive usage of comgroups to perform comgroup operations that normally can
be done only through the implementation of specialized code.  LARK allows
creation, modification, and display of comgroups and their parameters and then
permits the operation of comgroup-connected stations with defined functions to
perform or simulate various applications.
 
.*K* CONCEPTS
LARK is intended to allow the user to manipulate comgroups in various ways
without requiring him to perform the tedious job of code implementation.  LARK
performs this function by using general code which makes use of user-supplied
parameters to meet specific needs.
 
Several types of comgroup tasks are performed by LARK.  One group of commands
allows comgroup file manipulation, including creation and deletion of
comgroups, as well as modification and display of the various comgroup control
parameters.  Another set of commands support one-time tasks, such as station
deactivation and modification of station profile.  The last category of
commands provides the ability to connect actual stations to a comgroup which
perform tasks defined by the user.
 
Because LARK is able to perform such a variety of comgroup tasks, several uses
exist for it.  It can be used with existing comgroup applications to display
and modify parameter values and monitor the operation of the application, which
is useful when tuning an application.  Effects of station additions to an
existing application can be observed by using LARK to attach functioning
stations to the actual application.  In some cases, LARK may be used to provide
a temporary solution when use of a comgroup is necessary, but implementing the
actual code to perform the required comgroup function is not desirable.  An
important use for LARK is that of designing, testing, and tuning a comgroup
application prior to developing the actual code for that application.
 
There are three stages in the development of a comgroup application.  The first
stage, that of creating and setting up a comgroup file, can be accomplished by
using the CREATE command followed by the MODIFY command.  DISPLAY can be used
to ensure that the comgroup has been organized properly.  The next stage
involves defining tasks for the various stations that will be connected to the
comgroup.  Before this can be done, OPEN must be used to connect LARK's control
station.  If terminal stations are needed, they should be connected.  Then, the
DEFINE command is used to describe the personality and task of each functional
station.  The final stage includes the actual operation of the application.
The defined stations are connected to the comgroup via the CONNECT command and
started by the RESUME command.  Their performance can be monitored by the use
of the STATUS command.  Any cleanup required may be accomplished simply by
exiting LARK, although various commands do exist for cleanup, including ABORT
and CLOSE.
 
.*K* INTERNAL_DESIGN
Because of the complexity of the tasks LARK performs, an additional program is
required to carry out the full range of capabilities provided.  LARKETTE is a
program invoked as a CP-6 ghost user by LARK.  A LARKETTE ghost must be started
each time a new DCB station is defined.  LARKETTE has two main
responsibilities.  One, of course, is to carry out the function defined for
this DCB station.  Since LARKETTE is a general program that can perform various
tasks for DCB stations, the task to be performed is specified by various
parameters sent from LARK.  Therefore, the second responsibility is to respond
to various types of messages sent from LARK.  In addition to function
definition, messages pertaining to station control and status requests must be
carried out.
 
Various types of stations are required by LARK to implement an application.
Their uses will be noted in the remainder of this section.  Their definitions
are as follows:
     control station (C):  a station used by LARK or LARKETTE
        necessary to perform overhead duties;
        this station may or may not be an AU
 
     temporary station (T):  a station used by LARK to perform
        duties which may require it to be an AU station
 
     functional station (F):  a station defined by the user to
        perform the user defined tasks
 
This following figure illustrates the connection of a comgroup functional
station to a comgroup.  The possible communication paths between the functional
station and other stations are illustrated.
 
                               ------
           _________          |      |           __________
          /_______ /|         |      |   ____   | LARKETTE |
         |        | |= = = = =| * * *|--|_F1_|--|   ghost  |
         |  LARK  | |         | *    |           ----------
         |________|/          | *    |
        /________ /           | *    |   __________
                              | * * *|--| terminal |
                              |      |  |  station |
                              |  CG  |   ----------
                               ------
 
In order to provide the wide range of capabilities, some portion of the total
comgroup usage is necessary for LARK's overhead.  The communication between
LARK and LARKETTE occurs through additional stations connected to the comgroup.
Also, temporary connections of an additional DCB station are required by LARK
to perform the comgroup file manipulations and one-time tasks, primarily done
during the initial setup.  This station is sometimes required to be the
administrative user of the comgroup.  Because of this requirement, this station
is only connected for the amount of time required to execute the given command.
 
The next figure illustrates that portion of comgroup usage required for LARK's
overhead.  The control communication path is shown, as well as a possible path
from the temporary station.  Additional communication may occur between LARK's
temporary station and the functional stations, which is not shown in this
diagram.
 
                               ------
           _________    ___   |      |   ____    __________
          /_______ /|--|_C_|--|* * * |--|_C1_|--| LARKETTE |
         |        | |   ___   |      |          |   ghost  |
         |  LARK  | |--|_T_|--|*     |           ----------
         |________|/          |  *   |
        /_________/           |    * |   __________
                              |      |--| terminal |
                              |      |  |  station |
                              |  CG  |   ----------
                               ------
 
Thus, a LARK comgroup application requires more usage of the comgroup than the
user might suspect.  However, the user need not be concerned with the stations
used for LARK's overhead;  their operation occurs automatically without his
intervention.  And, most of the use of these stations occurs during application
setup, so it shouldn't affect the user's application.  The complete LARK
comgroup application is shown in this last figure.
 
                            ------
        _________    ___   |      |   ____    __________
       /_______ /|--|_C_|--|      |--|_C1_|--| LARKETTE |
      |        | |   ___   |      |--|_F1_|--|   ghost  |
      |  LARK  | |--|_T_|--|      |           ----------
      |________|/          |      |
     /_________/           |      |   __________
                           |      |--| terminal |
                           |      |  |  station |
                           |  CG  |   ----------
                            ------
 
.*K* ABORT
ABORT syntax:
 
ABO/RT [ STA/TION = ] station
 
.*B* PARAMETERS PARM
Parameters:
 
station        specifies the functional station to be aborted
 
.*B* DESCRIPTION
The ABORT station command causes the ghost user associated with the defined
station to terminate.  Thus, both the functional and control stations are
disconnected from the comgroup.
 
.*B* OPTIONS
Options:
 
none
 
.*K* ACTIVATE
ACTIVATE syntax:
 
ACT/IVATE [ [ COMG/ROUP|CG = ] comgroup_fid ] ( activate_options [ ) ]
 
.*B* PARAMETERS PARM
Parameters:
 
comgroup_fid   is a legal comgroup FID
.*R*
activate_options specifies one or more options separated by commas
 
.*B* DESCRIPTION
The ACTIVATE command activates the specified station which is connected to the
selected comgroup.  This command is performed by the LARK temporary station,
which opens to the comgroup, performs the M$ACTIVATE, and disconnects.  Because
of this, the ACTIVATE command cannot be used to convert a terminal station into
a pure or transformed FPRG station.
 
.*B* OPTIONS
Options:
 
ABTE/T = Y/ES|N/O
.*R*
      Specifies whether or not the TYC value specified in ABTREAD is to be
      permanent.
 
ABTR/EAD = tyc
.*R*
      Specifies the octal TYC value with which the target DCB's next or
      pending read will be aborted.
 
ATTR = attribute
.*R*
      Specifies the mask of required attributes for the resource that is to be
      connected to the comgroup.
 
BIN = Y/ES|N/O
.*R*
      Specifies whether or not the data is to read as a string of bits
      instead of characters.
 
CONN/ECTRES = Y/ES|N/O
.*R*
      Specifies whether or not the resource specified by RES and ATTR will be
      connected to the comgroup with the station name specified.
 
FL/USH = Y/ES|N/O
.*R*
      Specifies whether or not to flush the list of messages waiting to go the
      target station.
 
MAXRD = number
.*R*
      Specifies the maximum number of reads that a FEP can have outstanding
      to a terminal station.
 
MINRD = number
.*R*
      Specifies the minumum number of reads that a FEP can have outstanding
      to a terminal station.
 
REREAD = Y/ES|N/O
.*R*
      Specifies whether or not the previous input line is to be echoed and
      set to the current input line.
 
RES = resource
.*R*
      Specifies the four character resource name that is to be connected to
      the comgroup.
 
STA/TION = station
.*R*
      Specifies the name of the station to activate.  This option must be
      supplied or the command will not be executed.
 
TRANS = Y/ES|N/O
.*R*
      Specifies whether or not data is to be read without translation.
 
.*K* CLOSE
CLOSE syntax:
 
CLO/SE [ [ ( ] close_option [ ) ] ]
 
.*B* PARAMETERS PARM
Parameters:
 
close_option   specifies required information to close the station
 
.*B* DESCRIPTION
The CLOSE command closes the LARK control station which was opened using the
OPEN command.
 
.*B* OPTIONS
Options:
 
STA/TION = station_name
.*R*
      Specifies the name of the LARK control station which was
      previously opened using the OPEN command.  If this station name
      is provided, it is verified to be correct before the station is
      closed.
 
.*K* CONNECT
CONNECT syntax:
 
CON/NECT [ STA/TION = ] station
 
.*B* PARAMETERS PARM
Parameters:
 
station        specifies the name of the functional station to be connected to
               the current comgroup
 
.*B* DESCRIPTION
The CONNECT command connects (opens) a previously defined functional station to
the currently selected comgroup.  The function to be performed by the station
is not started at this point;  the station is in suspended mode when first
connected.
 
.*K* CREATE
CREATE syntax:
 
CRE/ATE [ COMG/ROUP|CG = ] comgroup_fid [ ( create_options [ ) ] ]
 
.*B* PARAMETERS PARM
Parameters:
 
comgroup_fid   is a legal comgroup FID
.*R*
create_options specifies one or more options separated by commas
 
.*B* DESCRIPTION
The CREATE command creates a comgroup using the parameters specified in the
command.  It sets all comgroup parameters to their default values.
 
.*B* OPTIONS
Options:
 
A/CCT = account_name [ ( access_options ) ]
.*R*
      Specifies a given account or group of accounts and the
      associated access attributes to the comgroup being created.
      This option can be used multiple times to define different
      accesses for different accounts or groups of accounts.
      Access_options specify one or more access options, separated
      by commas, in the form:
         access_option = { Y/ES | N/O }
      and access_options can be chosen from the following list:
         AU       AURD     DELF     DELR     EXEC     NOLIST
         READ     REATTR   TCTL     UPD      WNEW
      All of the access options default to NO.
 
EXI/ST = { ERR/OR | NEW/FILE }
.*R*
      Specifies the steps to be taken at comgroup creation time if
      a file of the given name already exists.  The ERROR option
      signifies that if the specified file already exists, an error
      will be reported and the new comgroup will not be created.
      The NEWFILE option will allow the new comgroup to be created,
      even if another file by that name exists.  The default is
      ERROR.
 
EXP/IRE = { NEV/ER | number_of_days }
.*R*
      Specifies the number of days to retain the comgroup or that
      the comgroup is never to expire.  The default is NEVER.
 
I/XTNSIZE = size_in_granules
.*R*
      Specifies the size in granules of the initial extent.  The
      default is 30 granules.
 
J/OURNAL = { Y/ES | N/O }
.*R*
      Specifies that the system access ghost should journal this
      comgroup.  The default is NO.
 
Q/ISS = { Y/ES | N/O }
.*R*
      Specifies the queue tree to be the station tree (YES) or the
      message type tree (NO).  The default is NO.
 
.*K* DEACTIVATE
DEACTIVATE syntax:
 
DEA/CTIVATE [ [ COMG/ROUP|CG = ] comgroup_fid ] ( deactivate_options [ ) ]
 
.*B* PARAMETERS PARM
Parameters:
 
comgroup_fid   is a legal comgroup FID
.*R*
deactivate_options specifies one or more options separated by commas
 
.*B* DESCRIPTION
The DEACTIVATE command deactivates the specified station which is connected to
the selected comgroup.  This command is performed by the LARK temporary
station, which opens to the comgroup, performs the M$DEACTIVATE, and
disconnects.
 
.*B* OPTIONS
Options:
 
DISC/ONNECT = Y/ES|N/O
.*R*
      Specifies whether or not the given station is to be disconnected upon
      deactivation.
 
DSCGO = Y/ES|N/O
.*R*
      Specifies whether or not disconnect permission is being given.
 
FL/USH = Y/ES|N/O
.*R*
      Specifies whether or not to flush the list of messages waiting to go to
      the target station.
 
STA/TION = station
.*R*
      Specifies the name of the station to deactivate.  This option must be
      supplied or the command will not be executed.
 
.*K* DEFINE
DEFINE syntax:
 
DEF/INE [ STA/TION = ] station ( define_options [ ) ]
 
.*B* PARAMETERS PARM
Parameters:
 
station        specifies the functional station to be defined
.*R*
define_options specifies one or more options separated by commas
 
.*B* DESCRIPTION
The DEFINE command allows the definition of the functions to be performed by
this functional station.  When this command is performed, a ghost user is
started which automatically connects a control station to the selected
comgroup.  The control station is used to communicate with LARK's control
station in controlling the actions of the functional station.  If a previous
DEFINE command was given which started the ghost user for this functional
station, the existing ghost user is used.
 
The execution of the DEFINE command does not cause the functional station to be
connected to the comgroup.  The CONNECT command must be used for that.
 
.*B* OPTIONS
Options:
 
A/DMINISTRATION
.*R*
      Specifies that various parameters controlling the overall actions of the
      functional station be set.
      At the second command level, ADMIN parameters can be specified in the
      following forms:
 
         admin_parm_y/n = { Y/ES | N/O }
         where admin_parm_y/n can be:
            ABORTONCOMP/LETION | ABORTCOMP/LETION indicates whether or not the
               ghost user should be aborted on completion of the defined
               function (default=YES)
            AU indicates whether or not the functional station should be
               connected to the comgroup as the AU station;  the functional
               station currently does not perform any special AU functions
               (default=NO)
            DISCONCOMP/LETION | DISCCOMP/LETION indicates whether or not the
               functional station should be disconnected from the comgroup
               upon completion of the defined function (default=YES)
            NEWDEFONCOMP/LETION | NEWDEFCOMP/LETION indicates whether or not a
               new DEFINE command must be done when the functional station has
               completed its task;  useful only when ABORTONCOMP=NO
               (default=YES)
 
         admin_end_cmd
            E/ND        EX/IT       Q/UIT       X/IT
 
C/ONTROL
.*R*
      Specifies that various parameters affecting the ghost user and the
      associated control station be set.
      At the second command level, the following CONTROL parameters can be
      specified:
         ACCT | ACCO/UNT = logon_account
            logon_account is a valid CP6 account name which will be the
            account to be used by the ghost user
            (default=current time-sharing account)
         NAME = logon_name
            logon_name is a valid CP6 name which will be the name to be used
            by the ghost user (default=current timesharing account logon)
         PASS/WORD = logon_password
            logon_password is the valid password for the account being used
            (default=current timesharing account logon)
         STA/TION = station
            station is the station name to be used by the control station
            for this ghost user.  If this parameter is not supplied, a station
            name in the form of $CONxxxx is supplied.
 
         control_end_cmd
            E/ND        EX/IT       Q/UIT       X/IT
 
R/EAD
.*R*
      Specifies that various parameters controlling the functional station's
      read functions are to be set.
      At the second command level, READ parameters can be specified in the
      following forms:
         read_parm_y/n = { Y/ES | N/O }
         where read_parm_y/n can be:
            ABORTONERR/OR | ABORTERR/OR indicates whether or not the ghost
               user should be aborted if an error occurs on a read
               (default=NO)
            BIN indicates whether or not the data is presented as a string of
               bits (default=NO)
            CONT indicates whether or not this is a continued read
               (default=NO)
            NEWMESSAGEFILE | NEWMSGFILE indicates whether or not an existing
               file should be replaced by the new message file (default=NO)
            TRANS indicates whether or not the data is to be read without
               translation (transparency) (default=NO)
            WAIT indicates whether or not the read operation is to be
               completed before control is returned to the ghost user
               (default=YES)
 
         read_parm_num = numeric_value
         where read_parm_num can be:
            FREQUENCY indicates the number of seconds to wait between issuing
               reads (default=0)
            LENGTHMAX | LENMAX indicates the length in bytes of the largest
               record to be read (default=1024)
            NUMBEROPS | NUMOPS indicates the number of reads to be performed
               (default=1)
 
         read_parm_fid = fid
         where read_parm_fid can be:
            MESSAGEFILE | MSGFILE indicates the fid of a file to be created
               which will contain all the messages read by this functional
               station; if the file exists and NEWMSGFILE = YES, the existing
               file will be overwritten, otherwise an error will be returned
               by LARKETTE  (default='')
 
         read_end_cmd
            E/ND        EX/IT       Q/UIT       X/IT
 
RS/TATION
.*R*
      Specifies that the parameters associated with the functional station's
      read VLP_STATION be set.
      At the second command level, RSTA parameters can be specified in one of
      the following forms:
 
         rstation_parm_y/n = { Y/ES | N/O }
         where rstation_parm_y/n can be:
            ALLABSENT   ALLDCBS     ALLTRMS     ANYDCB      DIRONLY
            EOFNONE     EOFONE      LATCH       LOCK        WAS
 
         rstation_parm_msg = msgtype
         where rstation_parm_msg can be:
            MSGTYP
 
         rstation_parm_sta = station
         where rstation_parm_sta can be:
            STATION
 
         rstation_parm_sec = number_of_seconds
         where rstation_parm_sec can be;
            EOFTIME
 
         rstation_end_cmd
            E/ND        EX/IT       Q/UIT       X/IT
 
SE/TSTA
.*R*
      Specifies that the VLP_SETSTA parameters associated with the functional
      station be set.
      At the second command level, SETSTA parameters can be specified in
      one of the following forms:
 
         setsta_parm_y/n = { Y/ES | N/O }
         where setsta_parm_y/n can be:
            ALLABSENT   ALLDCBS     ALLTRMS     ANYDCB      DIRONLY
            EOFNONE     EOFONE      ILATCH      ILOCK       OLATCH
            OLOCK       WAS
 
         setsta_parm_msg = msgtype
         where setsta_parm_msg can be:
            IMSGTYP     OMSGTYP
 
         setsta_parm_sta = station
         where setsta_parm_sta can be:
            ISTATION    OSTATION
 
         setsta_parm_sec = number_of_seconds
         where setsta_parm_sec can be;
            EOFTIME
 
         setsta_end_cmd
            E/ND        EX/IT       Q/UIT       X/IT
 
W/RITE
.*R*
      Specifies that various parameters controlling the functional station's
      write functions are to be set.
      At the second command level, WRITE parameters can be specified in the
      following forms:
         write_parm_y/n = { Y/ES | N/O }
         where write_parm_y/n can be:
            ABORTONERR/OR | ABORTERR/OR indicates whether or not the ghost
               user should be aborted if an error occurs on a write
               (default=NO)
            BIN indicates whether or not the data is presented as a string of
               bits (default=NO)
            CONT indicates whether or not this is a continued write
               (default=NO)
            TRANS indicates whether or not the data is to be written without
               translation (transparency) (default=NO)
            WAIT indicates whether or not the write operation is to be
               completed before control is returned to the ghost user
               (default=YES)
 
         write_parm_num = numeric_value
         where write_parm_num can be:
            FREQUENCY indicates the number of seconds to wait between issuing
               writes (default=0)
            LENGTHMAX | LENMAX indicates the length in bytes of the largest
               record to be written (default=1024)
            LENGTHMIN | LENMIN indicates the length in bytes of the smallest
               record to be written (default=1024)
            NUMBEROPS | NUMOPS indicates the number of writes to be performed;
               specifying 0 means read msgfile until EOF (default=1)
 
         write_parm_fid = fid
         where write_parm_fid can be:
            MESSAGEFILE | MSGFILE indicates the fid of a file to be read
               that contains all the messages to be written by this functional
               station;  if a message file is not designated, messages are
               generated by the ghost user containing consecutive numbers
               in the first 8 bytes of the record (default='')
 
         write_end_cmd
            E/ND        EX/IT       Q/UIT       X/IT
 
WS/TATION
.*R*
      Specifies that the parameters associated with the functional station's
      write VLP_STATION be set.
      At the second command level, WSTA parameters can be specified in one of
      the following forms:
 
         wstation_parm_y/n = { Y/ES | N/O }
         where wstation_parm_y/n can be:
            ALLABSENT   ALLDCBS     ALLTRMS     ANYDCB      DIRONLY
            EOFNONE     EOFONE      LATCH       LOCK        WAS
 
         wstation_parm_msg = msgtype
         where wstation_parm_msg can be:
            MSGTYP
 
         wstation_parm_sta = station
         where wstation_parm_sta can be:
            STATION
 
         wstation_parm_sec = number_of_seconds
         where wstation_parm_sec can be;
            EOFTIME
 
         wstation_end_cmd
            E/ND        EX/IT       Q/UIT       X/IT
 
.*K* DELETE
DELETE syntax:
 
DEL/ETE [ COMG/ROUP|CG = ] comgroup_fid
 
.*B* PARAMETERS PARM
Parameters:
 
comgroup_fid is a legal comgroup FID for an existing comgroup
 
.*B* DESCRIPTION
The DELETE command deletes an existing comgroup if it is not currently in use
and the user has the appropriate access privileges.
 
.*K* DISCONNECT
DISCONNECT syntax:
 
DISC/ONNECT [ STA/TION = ] station
 
.*B* PARAMETERS PARM
Parameters:
 
station        specifies the name of the functional station to be disconnected
               from the current comgroup
 
.*B* DESCRIPTION
The DISCONNECT command disconnects (closes) a currently connected functional
station from the currently selected comgroup.  The function of the station
becomes undefined at this time.  However, the ghost user does not terminate and
the associated control station remains connected to the comgroup.
 
.*K* DISPLAY
DISPLAY syntax:
 
DI/SPLAY [ [ COMG/ROUP|CG = ] comgroup_fid ] [ ( display_options [ ) ] ]
 
.*B* PARAMETERS PARM
Parameters:
 
comgroup_fid    is a legal comgroup FID
.*R*
display_options specifies one or more options separated by commas
 
.*B* DESCRIPTION
The DISPLAY command displays various information associated with the selected
comgroup.  If no options are selected, only selected information stored in the
comgroup DCB and FIT and the current SELECTion values are displayed.  The
DISPLAY command will be executed using an AU station if the SELECT AUFORCE
option is set.  LARK's temporary station is used to perform this command.
 
.*B* OPTIONS
Options:
 
A/LL
.*R*
      Specifies that all displayable information associated with the
      selected comgroup be shown.
 
C/CGP
.*R*
      Specifies that the comgroup control parameters associated
      with the selected comgroup be displayed.
 
D/CB
.*R*
      Specifies that significant DCB and FIT parameters associated
      with the selected comgroup be displayed.
 
E/VENTS
.*R*
      Specifies that B$CGAURD.EVENT codes should be displayed along
      with whether or not LARK is currently Logging them.
 
FP/RGS
.*R*
      Specifies that any FPRG stations currently connected to the
      comgroup be displayed.
 
FUNC/TIONSTA|FS/TA
.*R*
      Specifies that FUNCTION stations, along with their
      associated  CONTROL stations be displayed.  The sysid of
      the LARKETTE ghost that is attached to the station is also
      displayed.
 
H/OLDSTA
.*R*
      Specifies that the comgroup HOLDSTA values be displayed if
      a defined HOLDSTA exists for the selected comgroup.
 
JRNLF/ID
.*R*
      Specifies that the comgroup journal FID be displayed if the
      selected comgroup possesses one.
 
JRNLS/TA
.*R*
      Specifies that the comgroup JRNLSTA values be displayed if
      a defined JRNLSTA exists for the selected comgroup.
 
QL/IST
.*R*
      Specifies that the comgroup queue nodes associated with the
      selected comgroup be displayed.
 
SE/TSTA
.*R*
      Specifies that the SETSTA parameters associated with the
      selected comgroup be displayed.
 
STAL/IST
.*R*
      Specifies that the comgroup station nodes which are currently
      known to the selected comgroup be displayed.
 
STAT/S
.*R*
      Specifies that global comgroup statistics associated with the
      selected comgroup be displayed.
 
TYPL/IST
.*R*
      Specifies that the comgroup message type nodes which are
      currently known to the selected comgroup be displayed.
 
.*K* MODIFY
MODIFY syntax:
 
MOD/IFY [ [ COMG/ROUP|CG = ] comgroup_fid ] ( modify_options [ ) ]
 
.*B* PARAMETERS PARM
Parameters:
 
comgroup_fid   is a legal comgroup FID
.*R*
modify_options specifies one or more options separated by commas
 
.*B* DESCRIPTION
The MODIFY command allows the user to modify information, organized by group,
associated with the selected comgroup.  After the groups of items to be
modified are specified in this command, a second level of commands can be
entered for each of the groups.  This command is performed by LARK's temporary
station, which must connect as the AU.
 
.*B* OPTIONS
Options:
 
C/CGP
.*R*
      Specifies that the comgroup control parameters associated with the
      selected comgroup be modified.
      At the second command level, CGCP parameters can be specified in one
      of the following forms:
 
         cgcp_parm_y/n = { Y/ES | N/O }
         where cgcp_parm_y/n can be:
            AUTORCVR    BIGMXT      BIN         BP          CARRYOSTA
            CONMSG      CONT        DCBCONAU    DCBCONLGL   DCBCONNAU
            DCBCONWA    DRML        DSCREQ      INPUT       JOURNAL
            MEMWARNP    OUTPUT      QRML        RAS         REDUNDANT
            REREAD      SECURE      SMD         TERMCONAU   TERMCONLGL
            TERMCONNAU  TRANS       UNLAMSG     VFC         WAS
            XSTALGL     XTYPLGL
 
         cgcp_parm_a/d/d/n = { A/CTIVATE | DE/ACTIVATE | DI/SCONNECT | N/C }
         where cgcp_parm_a/d/d/n can be:
            AUCONDCB    AUCONTERM   AUDCONDCB   AUDCONTERM
 
         cgcp_parm_num = numeric_value
         where cgcp_parm_num can be:
            DATAPGS     DEFERBLKS   DISKWARN    MAXMC        MAXPG
            MAXRD       MEMWARN     MINPG       MINRD        MXACT
            STAPRIO     TRMRDSIZ    TYPPRIO     WRITETIME
 
         cgcp_parm_msg = msgtype
         where cgcp_parm_msg can be:
            DMTYP       TMTYP
 
         cgcp_end_cmd
            E/ND        EX/IT       Q/UIT       X/IT
 
E/VENTS
.*R*
      Specifies that LARK should modify the list of B$CGAURD.EVENT codes
      it is currently monitoring and logging.
      At the second command level, EVENT parameters can be specified in one
      of the following forms:
 
         cgcp_parm_y/n  [ = { Y/ES | N/O } ]
         where cgcp_parm_y/n can be:
            DOPN        DCLS        TCON        TDSC        TDRQ
            TBRK        UNLR        UNLH        UNLD        WARN
            FWCG        JNLD        FPEXIT      FPABORT     FPLDTRC
            ALL
 
         If the  = { YES | NO } is left off YES is assumed
 
 
         cgcp_end_cmd
            E/ND        EX/IT       Q/UIT       X/IT
 
H/OLDSTA
.*R*
      Specifies that the HOLDSTA associated with the selected comgroup be
      modified.
      At the second command level, the HOLDSTA can be added, deleted, or
      changed by issuing a command in one of the following forms:
 
         { A/DD | C/HANGE } [ STA/TION = ] station
         where station is the name of the station to receive messages
         placed in 'hold' status via M$UNLATCH.  An existing station can
         be CHANGED, but a station must be ADDED if one doesn't already
         exist.
 
         DEL/ETE
         can be used to get rid of an existing HOLDSTA.
 
         holdsta_end_cmd
            E/ND        EX/IT       Q/UIT       X/IT
 
JRNLF/ID
.*R*
      Specifies that the JRNLFID associated with the selected comgroup be
      modified.
      At the second command level, the JRNLFID can be added, deleted, or
      changed by issuing a command in one of the following forms:
 
         { A/DD | C/HANGE } [ FID = ] journal_fid
         where journal_fid is the FID to be used as the JRNLFID.  An existing
         FID can be CHANGED, but a FID must be ADDED if one doesn't already
         exist.
 
         DEL/ETE
         can be used to get rid of an existing JRNLFID.
 
         jrnlfid_end_cmd
            E/ND        EX/IT       Q/UIT       X/IT
 
JRNLS/TA
.*R*
      Specifies that the JRNLSTA associated with the selected comgroup be
      modified.
      At the second command level, the JRNLSTA can be added, deleted, or
      changed by issuing a command in one of the following forms:
 
         { A/DD | C/HANGE } [ STA/TION = ] station
         where station is the name of the station to receive messages
         having the JOURNAL attribute and journal delete messages.  An
         existing station can be CHANGED, but a station must be ADDED if
         one doesn't already exist.
 
         DEL/ETE
         can be used to get rid of an existing JRNLSTA.
 
         jrnlsta_end_cmd
            E/ND        EX/IT       Q/UIT       X/IT
 
QL/IST
.*R*
      Specifies that the QLIST associated with the selected comgroup be
      modified.
      At the second command level, the QLIST entries can be changed by
      issuing a command in one of the following forms:
 
         C/HANGE {[STA/TION =] station|[MSG/TYPE =] msgtyp} ( Q_options [ ) ]
         which will modify the anonymous queue parameters associated
         with the supplied station, if ordered by station, or msgtyp, if
         ordered by message type.
 
            options:
               q_option_y/n = { Y/ES | N/O }
               where q_option_y/n can be:
                  AUTORCVR
               q_option_numactive = maximum_allowed_active
               where q_option_numactive can be:
                  MXACT
 
         qlist_end_cmd
            E/ND        EX/IT       Q/UIT       X/IT
 
SE/TSTA
.*R*
      Specifies that the SETSTA parameters associated with the selected
      comgroup be modified.
      At the second command level, SETSTA parameters can be specified in
      one of the following forms:
 
         setsta_parm_y/n = { Y/ES | N/O }
         where setsta_parm_y/n can be:
            ALLABSENT   ALLDCBS     ALLTRMS     ANYDCB      DIRONLY
            EOFNONE     EOFONE      ILATCH      ILOCK       OLATCH
            OLOCK       WAS
 
         setsta_parm_msg = msgtype
         where setsta_parm_msg can be:
            IMSGTYP     OMSGTYP
 
         setsta_parm_sta = station
         where setsta_parm_sta can be:
            ISTATION    MYSTATION   OSTATION
 
         setsta_parm_sec = number_of_seconds
         where setsta_parm_sec can be;
            EOFTIME
 
         setsta_end_cmd
            E/ND        EX/IT       Q/UIT       X/IT
 
SI/ZE
.*R*
      Specifies that the SIZE of the comgroup file be extended.
      At the second command level, the SIZE parameters can be specified
      as indicated:
 
         size_parm_pag = number_of_pages
         where size_parm_pag can be:
            IN/CREASE
 
         size_end_cmd
            E/ND        EX/IT       Q/UIT       X/IT
 
STAL/IST
.*R*
      Specifies that the STALIST associated with the selected comgroup be
      modified.
      At the second command level, STALIST entries can be added, deleted, or
      changed by issuing a command in one of the following forms:
 
         { A/DD | C/HANGE } [ STA/TION = ] station ( sta_options [ ) ]
         where station is the name of the STALIST entry to be added or
         changed.  An existing entry can be changed, but an entry must be
         added if it doesn't already exist.
 
            options:
               sta_option_y/n = { Y/ES | N/O }
               where sta_option_y/n can be:
                  AUP         PERM
               sta_option_numprio = priority
               where sta_option_prio can be:
                  PRIO
 
         DEL/ETE [ STA/TION = ] station
         where station is the name of an existing STALIST entry to be
         deleted.
 
         stalist_end_cmd
            E/ND        EX/IT       Q/UIT       X/IT
 
TYPL/IST
.*R*
      Specifies that the TYPLIST associated with the selected comgroup be
      modified.
      At the second command level, TYPLIST entries can be added, deleted, or
      changed by issuing a command in one of the following forms:
 
         { A/DD | C/HANGE } [ MSG/TYPE = ] msgtyp ( typ_options [ ) ]
         where msgtyp is the name of the TYPLIST entry to be added or
         changed.  An existing entry can be changed, but an entry must be
         added if it doesn't already exist.
 
            options:
               typ_option_y/n = { Y/ES | N/O }
               where typ_option_y/n can be:
                  JOURNAL     ONEREPORT   PERM
               typ_option_numprio = priority
               where typ_option_prio can be:
                  PRIO
 
         DEL/ETE [ MSG/TYPE = ] msgtyp
         where msgtyp is the name of an existing TYPLIST entry to be deleted.
 
         typlist_end_cmd
            E/ND        EX/IT       Q/UIT       X/IT
 
.*K* OPEN
OPEN syntax:
 
OPE/N [ [ COMG/ROUP|CG = ] comgroup_fid ] ( open_options [ ) ]
 
.*B* PARAMETERS PARM
Parameters:
 
comgroup_fid   is a legal comgroup FID
.*R*
open_options   specifies one or more options separated by commas
 
.*B* DESCRIPTION
The OPEN command opens LARK's control station to the selected comgroup.  This
station is permanent in the sense that it stays connected to the comgroup until
it is closed or the user exits from LARK.
 
.*B* OPTIONS
Options:
 
AU = { Y/ES | N/O }
.*R*
      Specifies whether or not this station will be the AU station.
 
J/OURNALBYPASS = { Y/ES | N/O }
.*R*
      Specifies whether or not journaling should be done for this
      station, if this comgroup has the journaling attribute.
 
STA/TION = station_name
.*R*
      Specifies the name of the station that is about to be opened.
      This information is required to open a station; no default
      name is supplied by LARK.
 
.*K* PAUSE PAUS PAU PA
PAUSE syntax:
 
PA/USE pause_time
 
.*B* PARAMETERS PARM
Parameters:
 
pause_time  specifies the length of time, in seconds, that LARK should wait.
 
.*B* DESCRIPTION
The PAUSE command will cause LARK to "wait" by invoking M$WAIT.  Pause may be
terminated by hitting the BREAK key.
 
 
.*K* RESUME
RESUME syntax:
 
RES/UME [ STA/TION = ] station
 
.*B* PARAMETERS PARM
Parameters:
 
station        specifies the name of the functional station to be resumed
 
.*B* DESCRIPTION
The RESUME command resumes the task of a defined, connected functional station.
This command is used to either begin or continue the defined function of the
station.
 
.*K* SELECT
SELECT syntax:
 
SEL/ECT [ ( ] select_options [ ) ]
 
.*B* PARAMETERS PARM
Parameters:
 
select_options specifies one or more options separated by commas
 
.*B* DESCRIPTION
The SELECT command allows the specification of values which affect the manner
in which LARK works.  Values currently definable under this command include the
FID of the current comgroup, the station name of LARK's temporary station, and
whether or not the DISPLAY command will be executed by the AU station.
Specifying DISPLAY (DCB) will display the current values of the SELECT options.
 
.*B* OPTIONS
Options:
 
AU/FORCE = yes/no
      Specifies whether or not the DISPLAY command is executed using
      an AU station to get the comgroup information.  This command
      is useful when normal DCB stations are not allowed to connect
      to the comgroup.  This defaults to NO.
 
CG = comgroup_fid
      Specifies a comgroup FID.  This FID will be used by LARK commands
      that allow optional specification of the comgroup FID when the
      FID hasn't been included.  This function also automatically
      occurs each time a command is given in which a comgroup FID is
      supplied; that is, this value will be changed any time a FID is
      specified in a LARK command.
 
STA/TION = station_name
      Specifies a station name to be used for LARK's temporary station.
      This option is important if the comgroup limits connection to the
      comgroup to a select list of stations.  This name defaults to
      '$l$a$r$k'.
 
.*K* SETPROFILE
SETPROFILE syntax:
 
SETP/ROFILE [ [ COMG/ROUP|CG = ] comgroup_fid ] ( setprofile_options [ ) ]
 
.*B* PARAMETERS PARM
Parameters:
 
comgroup_fid   is a legal comgroup FID
.*R*
setprofile_options specifies one or more options separated by commas
 
.*B* DESCRIPTION
The SETPROFILE command changes the profile of the specified station which must
be a terminal station connected to the selected comgroup.  This command is
performed by the LARK temporary station, which opens to the comgroup, performs
the M$PROFILE, and disconnects.
 
.*B* OPTIONS
Options:
 
PRO/FILE = profile
.*R*
      Specifies the name of the profile to be assigned to the terminal
      station.  This option must be supplied or the command will not be
      executed.
 
STA/TION = station
.*R*
      Specifies the name of the station to deactivate.  This option must be
      supplied or the command will not be executed.
 
.*K* STARTFPRG STARTFPR STARTFP STARTF SFPRG SFPR SFP SF
STARTFPRG syntax:
 
STARTF/PRG|SF/PRG ( startfprg_options [ ) ]
 
.*B* PARAMETERS PARM
Parameters:
 
.*R*
startfprg_options specifies one or more options separated by commas
 
.*B* DESCRIPTION
The STARTFPRG command creates an FPRG TERMINAL station by attaching the
specified FPRG to the associated TERMINAL station.  The actions performed by
this command are dependent upon the DEVPRES option.  If DEVPRES = YES, then
LARK will issue an M$DEACTIVATE to the specified station, issue an M$ACTIVATE
to that station, and the load the FPRG with a call to M$SETFP.  There is also a
temporary DCB station opened that will be closed as soon as LARK receives the
message that the FPRG station has connected.  If DEVPRES = NO, LARK will load
the FPRG with a call to M$OPEN and the try to activate the station.  If the
FPRG does not load in 5 minutes, LARK will issue an error message and abort the
command.  NOTE: in order to execute this command, the user MUST be the AU.
 
.*B* OPTIONS
Options:
 
USEAU/ACCT = Y/ES|N/O
.*R*
      Specifies, if yes, this FPRG is supposed to logon to the
      FEP using the same logon as the user of LARK.  Normally
      an FPRG logons using the STATION_NAME,ACCTOFUSER.
 
      This option is handy when the user has FPRG priveleges but
      the station hasn't been defined with SUPER.
 
      The default is NO - Logon as an FPRG normally does
 
DEBUG = Y/ES|N/O
 
.*R*
      Specifies, if yes, that this FPRG is to be debugged and that
      as such, it is not to be started but is instead to be held
      awaiting commands from a debugger such as:
 
      DEBUG station ON comgroup
 
      This option is honored only when DEVPRES = YES. The default
      is NO.  For more information see the HOST MONITOR SERVICES
      REFERENCE V1, VLP_FPRG DEBUG option.
 
 
DEVICEPR/ESENT|DEVPR/ES = Y/ES|N/O
.*R*
      Specifies whether or not the terminal station is already
      logged on to the system.  The default is NO.
 
 
FEP = 'FExx'
 
.*R*
      Specifies which FEP the FPRG is to be loaded into.  'xx'
      is to be replaced by a 2 digit string representing the
      FEP number.  This option is only valid when DEVPRES = YES.
      The default is for the FPRG to be loaded into the user's FEP.
 
FP/RG = fid
 
.*R*
      fid is any valid CP-6 fid, including account and password.
 
      This is the name of the FPRG run unit to be loaded and is
      required and may not be wild-carded.
 
PUREST/ATION = station
 
.*R*
 
      station is the name to be given to a pure FPRG terminal
              station and may not be wild-carded
 
      This will cause a new pure FPRG terminal station to be
      created obtaining its station name from  station.
 
STA/TION = station
 
.*R*
 
       station is any legal station name and may not be
               wild-carded
 
       This is the name of the TERMINAL station with which
       the FPRG will be associated and must be present.
 
.*K* STATUS
STATUS syntax:
 
STA/TUS [ STA/TION = ] station
 
.*B* PARAMETERS PARM
Parameters:
 
station        specifies the name of the functional station for which the
               current status is being requested
 
.*B* DESCRIPTION
The STATUS command reports the current status of the specified functional
station and its corresponding control station.
 
The status display format is as follows:
.*R*
  Control  Abt Con | Function Con Def Ssp ReadsAtt ReadErrs WriteAtt WritErrs
The first three items displayed pertain to the control station associated with
this functional station, including its name, whether or not it has aborted, and
whether or not it is currently connected to the comgroup.  The rest of the
items describe the functional station, including whether or not it is
connected, defined, and suspended.  The number of reads and writes attempted
are also supplied, along with the number of read and write errors received on
these IOs.
 
.*K* STOPFPRG STOPFPR STOPFP STOPF STFPRG STFPR STFP STF
STOPFPRG syntax:
 
STOPF/PRG|STF/PRG ( startfprg_options [ ) ]
 
.*B* PARAMETERS PARM
Parameters:
 
.*R*
stopfprg_options specifies one or more options separated by commas
 
.*B*
DESCRIPTION
 
The STOPFPRG command is used to deactivate and disconnect FPRG stations started
with LARK.  The user gives the name of the STATION and indicates whether or not
the station is to be disconnected after deactivation.  Note that regardless of
the status of DISCONNECT, execution of the FPRG is halted.
 
.*B* OPTIONS
Options:
 
DISC/ONNECT = Y/ES|N/O
 
.*R*
      Specifies that the station is to be disconnected.  This is
      only meaningful when the station was created with DEVPRES =
      YES
 
STA/TION = station_name
 
.*R*
      Specifies the name of the station to be deactivated.  This
      is required and may not be wild carded.
 
 
.*K* SUSPEND
SUSPEND syntax:
 
SUS/PEND [ STA/TION = ] station
 
.*B* PARAMETERS PARM
Parameters:
 
station        specifies the name of the functional station to be suspended
 
.*B* DESCRIPTION
The SUSPEND command suspends the task of a defined, connected, currently
operating functional station.  The functional station remains defined and
connected, but hangs waiting for further commands.
 
.*K* LIMITATIONS
LARK performs many of its commands by connecting its temporary station to the
specified comgroup.  Users should remember that comgroups which evaluate
stations as they connect will react when LARK attempts to connect.
 
Issuing a free command which requires an M$LINK off to some other processor
while the LARK control station is open (via OPEN) causes LARK's overhead IO
operation to get messed up.  This is due to a problem with CP-6 not properly
COMPing the no-wait read that it had to terminate to do the M$LINK.  However,
free commands that are performed by IBEX, such as !XEQ fid, work correctly.
 
Even though it appears that both read and write operations can be defined for a
functional station, currently both can't be performed simultaneously.  If both
are specified when DEFINEing a station, only the reads will be performed.
 
When DEFINEing a functional station, a few of the suboptions that can be
selected are not implemented in LARKETTE.  An error message is produced when
any of them are selected.  They include WAIT=NO and CONT=YES in the READ and
WRITE options, and LENGTHMIN in the WRITE option.  Also, the ADMIN AU =YES
option is allowed, but LARKETTE isn't set up to do any of the special functions
allowed to the AU.
 
If LARK should abort with the "internal error" message, it is recommended that
the comgroup be deleted and re-created before continuing.  The reason for this
is that control messages may be left in the comgroup that LARK will encounter
when OPENing the control station the next time.  Currently, these messages are
not flushed from the comgroup.
 
LARK is in developmental stages.  Additional features are intended to be added
in the future.
 
.*K* WHATS_A_LARK
 
 
                                   _~~_
                                 /      )
                             ___(  o     )
                              \         )
                               >       <       /\_____.
                              /         \     /      /
                             (            \  /     /
                            (       <       \    /
                            (        \       > /
                             \         \     |'
                               \_  ____/ \   |
                                  V  V     \ |
                                  |  |       `
                                 /   |
                               /T\  /T\
 
 
.*K* CHANGES Changes changes
891212    DRC
.*R*
Added Lark monitoring of AU events.  This will allow LARK to monitor the
comgroup closer when it is running as the AU.
 
.*R*
891204    DRC
.*R*
Changed LARK to DISPLAY new comgroup MSGTYP parameter and WRDSFREE and WRDSUSED
from VLR_CGSTATS.
 
.*R*
890108    DRC
.*R*
Allow MODIFY commands when LARK user is already connected as the AU of the
comgroup.
 
Allow DEACTIVATE and  ACTIVATE commands when LARK user is already connected as
the AU of the comgroup.
 
.*B*
881004
.*R*
Added new comgroup land paramters to LARK.
   To the ACTIVATE command
        MAXRD = num   and  MINRD = num
   To MODIFY (CPCG) command
        MAXRD = num   and  MINRD = num
   To the STARTFPRG command
       USEAUACCT = Y/N
 
880926
.*R*
LARK can now start FPRG terminal stations.  The new command is STARTFPRG.  It
can be used to start user written FPRGs and connect their stations to a
comgroup.  A related command, STOPFPRGS, is used to halt the execution of FPRGs
started by LARK and to deactivate their stations.
 
The DISPLAY command has two new options.  FPRGS will display all FPRGs/FPRG
stations currently connected to the comgroup and FUNCTIONSTA displays the
LARKETTE functional stations connected to the comgroup.
 
A command called PAUSE has been added.  It simply invokes M$WAIT for some
length of time specified by the user.  This command is useful in XEQ and BATCH
files.
 
.*B*
880309
.*R*
Fixed a format statement.
.*R*
880218
.*R*
Changed several PARTRGE definitions to allow all numeric values instead of
requiring at least one alpha character.
.*R*
861016
.*R*
Much wonderful stuff has been added!!
 
The MODIFY command was enhanced to allow defining and changing the STALIST,
TYPLIST, and QLIST.  The journalling capability was added.  The ACTIVATE,
DEACTIVATE, and SETPROFILE commands were added.  Various syntax changes were
made.  DISPLAY (STATS) no longer includes LARK's temporary station in  the
number of DCB stations currently connected to the comgroup.
 
A new group of commands providing the ability to connect stations to a comgroup
which perform user-defined tasks was added.  This capability includes the use
of the previously-released OPEN and CLOSE commands.  The new commands are
DEFINE, CONNECT, DISCONNECT, RESUME, SUSPEND, STATUS, and ABORT.  The station
activity is performed by a new tool invoked by LARK, called LARKETTE.  Please
use HELP (LARK.X) command for more information concerning these new commands.
Also see CONCEPTS, INTERNAL_DESIGN, and LIMITATIONS for additional information.
.*R*
850801
.*R*
Added the OPEN and CLOSE commands to allow having a station permanently open to
a comgroup while using LARK.  Added the SELECT (AUFORCE=YES/NO) option so that
when AUFORCE is set, the DISPLAY command uses an AU station to get the comgroup
information.  Added the MODIFY (SIZE) option to allow extension of a comgroup
file.  The DISPLAY (SETSTA) and MODIFY (SETSTA) commands now include the
EOFTIME parameter.  The following CGCP parameters can now have NC specified as
a possible value: AUCONDCB, AUDCONDCB, AUCONTERM, and AUDCONTERM.  Specifying
an illegal FID in LARK no longer produces a memory fault.  M$DO and M$LO are
explicitly opened (DISP=NAMED,CTG=YES).
.*R*
See the various HELP topics for more information.
.*R*
850218
.*R*
Added the HOLDSTA and JRNLSTA options in the MODIFY command to allow users to
change those two parameters.  Changed the HOLDSTA and JRNLSTA options of the
DISPLAY command to display only the station, since that is the only pertinent
information stored.  Deleted the ALL option from the MODIFY command.  Also
modified internal usage of data segments.
.*R*
See !HELP (LARK.X) DISPLAY and !HELP (LARK.X) MODIFY for more details.
.*R*
841102
.*R*
Added the JRNLFID option in the MODIFY command to allow users to change the
journal FID.
.*R*
841026
.*R*
Installed in LADC X account
 
.*K* OWNER
Laurie Shammel, LADC
 
