/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/*M* FERRET - Main routine for FERRET.X */
/*X* DDA */
FERRET: PROC MAIN;
/* */
       %INCLUDE CP_6;
       %INCLUDE CP_6_SUBS;
       %INCLUDE B_ERRORS_C;
       %INCLUDE FM$FIT;
       %INCLUDE XUD_UTS_M;
         %XUD$UTS_ENTRIES;
         %XUD_UTS_EQU;
       %INCLUDE FERRET_C61;
       %INCLUDE XU_MACRO_C;
       %INCLUDE XU_FORMAT_C;
       %INCLUDE B$JIT;
/* */
       %FPT_OPEN(FPTN=OPENLO, DCB=M$LO);
       %FPT_CLOSE(FPTN=CLOSELO, DCB=M$LO, DISP=SAVE);
       %FPT_OPEN(FPTN=OPEN_LIST, DCB=M$LIST, NAME=LIST_FILE,
          ORG=INDEXED, KEYX=0, KEYL=59, ASN=FILE, FUN=CREATE,
          EXIST=ERROR, ACS=DIRECT, IXTNSIZE=10, XTNSIZE=10);
       %FPT_CLOSE(FPTN=CLOSE_LIST, DCB=M$LIST, DISP=RELEASE);
       %FPT_CLOSE(FPTN=CLOSE_LIST_SAVE, DCB=M$LIST, DISP=SAVE);
       %FPT_OPEN(FPTN=OPEN_LIST_UPDATE, DCB=M$LIST, FUN=UPDATE);
       %FPT_OPEN(FPTN=OPEN_FILE, TEST=YES, NXTF=YES, FPARAM=FPARAM,
          DCB=M$FILE, ASN=FILE, ACS=UBLOCK);
       %FPT_CLOSE(FPTN=CLOSE_FILE, DCB=M$FILE, DISP=SAVE);
       %FPT_OPEN(FPTN=SAVE_OPEN);
       %FPT_READ(FPTN=READ_FILE, DCB=M$FILE, BUF=FILEBUF);
       %FPT_FID(RESULTS=VLR_FID, TEXTFID=TEXTFID, ACCT=VLP_ACCT,
          SN=VLP_SN, ASN=DASN, NAME=DNAME, PASS=DPASS, RES=DRES,
          WSN=DWSN);
       %VLP_ACCT;
       %VLR_FID;
       %FPT_WRITE(FPTN=WRITE_LIST, DCB=M$LIST, BUF=FBUF);
       %FPT_REW(DCB=M$LIST);
       %FPT_READ(FPTN=READ_LIST, DCB=M$LIST, BUF=FBUF);
       %FPT_WRITE(FPTN=FPT_WRITEDO, DCB=M$DO, BUF=DOBUF);
       %FPT_TIME(FPTN=CURR_TIME, SOURCE=CLOCK, DEST=UTS, TSTAMP=CTIME);
       %FPT_TIME(FPTN=CNVRT_TIME, SOURCE=LOCAL, DATE=DATE, DEST=UTS,
          TSTAMP=TIME);
       %FPT_INT(UENTRY=BREAK);
       %VLP_NAME(FPTN=LIST_FILE, NAME='*LIST FILE');
       %VLP_SN;
       %B$TCB;
       %B$ALT;
       %F$DCB(DCBN=F$DCB, BASED="BASED(DCB$)");
       %CODE03(BASED="BASED(FIT$)");
       %CODE04(BASED="BASED(FIT$)");
       %FITALTKEYS(BASED="BASED(FIT$)");
       %CODE19(BASED="BASED(FIT$)");
       %F_FDS(BUF=XBUF, DCB=M$LO);
/* */
       DCL M$LO DCB;
       DCL M$DO DCB;
       DCL M$LIST DCB;
       DCL M$FILE DCB;
/* */
       DCL B$JIT$ PTR SYMREF;
       DCL B$TCB$ PTR SYMREF;
       DCL CMD SBIN SYMREF;
/* */
       DCL XUR$INIT ENTRY(3) ALTRET;
       DCL XUR$GETCMD ENTRY(6) ALTRET;
       DCL XUR$ERRMSG ENTRY(7) ALTRET;
       DCL XSF$LOCCODT ENTRY(2) ALTRET;
       DCL X$WRITE ENTRY(22);
       DCL BREAK ENTRY ASYNC;
/* */
       %XUR_INIT;
       %PARSE$SYM(NAME=OUT$SYM);
       %PARSE$OUT(NAME=OUT, STCLASS=BASED);
       %P$PCB(NAME=P$PCB, STCLASS="BASED(PCB$)");
/* */
/* New UTS variables */
%EQU UTS_25TH_WEEK# = %UTS_25TH_DAY#*7;
%EQU UTS_25TH_MONTH# = %UTS_25TH_DAY#*30;
%EQU UTS_25TH_YEAR# = %UTS_25TH_MONTH#*12;
DCL TEMP_UTS1 UBIN;
/* */
       %EQU SYNERR=0;
       %EQU BADTIME=1;
       %EQU TOOMANYACCTS=2;
       %EQU SALUTATION=3;
       %EQU ONLY_ACCT=4;
       %EQU MUST_ACCT=5;
       %EQU NEEDFMS=6;
       DCL 1 DOMESSAGE(0:6) CONSTANT,
            2 SIZE UBIN INIT(12, 15, 41, 17, 39, 28, 36),
            2 TEXT CHAR(80) INIT(
'Syntax error',
'Bad time format',
'A maximum of 20 accounts may be specified',
'FERRET A00 Here',
'Only account specifications are allowed',
'An account must be specified',
'FMS is needed to use the OPEN option');
       DCL TFMT CHAR(0) CONSTANT INIT(
'  %>A,%A %25-%>A.%A %67-%8.36.1.0U %77-%8.36.1.0U %87-%8.36.1.0U %97-%5D');
       DCL OFMTO CHAR(0) CONSTANT INIT(
'  %>A,%A %25-%>A.%A %67-File appears to be okay');
       DCL OFMTB CHAR(0) CONSTANT INIT(
'  %>A,%A %25-%>A.%A %67-File inconsistancies may exist');
       DCL THFMT1 CHAR(0) CONSTANT INIT(
'%!   Creator                File                                    Created    Access   Modified  Grans');
       DCL THFMT2 CHAR(0) CONSTANT INIT(
'   -------                ----                                    -------    ------   --------  -----');
       DCL OHFMT1 CHAR(0) CONSTANT INIT(
'%!   Creator                File');
       DCL OHFMT2 CHAR(0) CONSTANT INIT(
'   -------                ----');
/* */
       DCL SRCH SBIN STATIC;
       DCL ACC UBIN STATIC INIT(0);
       DCL UPD UBIN STATIC INIT(0);
       DCL SIZE SBIN STATIC;
       DCL PCB$ PTR STATIC;
       DCL BUF CHAR(256) STATIC INIT(' ');
       DCL OUT$ PTR STATIC;
       DCL J SBIN STATIC;
       DCL TIME UBIN STATIC;
       DCL LOBUF CHAR(80) STATIC;
       DCL DOBUF CHAR(80) STATIC;
       DCL XBUF CHAR(120) STATIC;
       DCL I SBIN STATIC;
       DCL CTIME UBIN STATIC;
       DCL BLK$ PTR STATIC;
       DCL FPARAM CHAR(4096) STATIC;
       DCL DCB$ PTR STATIC;
       DCL FIT$ PTR STATIC;
       DCL FMS BIT(1) STATIC;
       DCL NRECS SBIN STATIC INIT(0);
       DCL CHECK SBIN STATIC;
       DCL FILEBUF CHAR(4096) STATIC;
       DCL TEXTFID CHAR(80) STATIC;
       DCL DASN SBIN STATIC;
       DCL DNAME CHAR(32) STATIC;
       DCL DPASS CHAR(8) STATIC;
       DCL DRES CHAR(4) STATIC;
       DCL DWSN CHAR(8) STATIC;
       DCL NUM_INDEXES SBIN;
/* */
       %EQU ETIME=0;
/* */
       DCL 1 DATE STATIC,
            2 MONTH CHAR(2) INIT('00'),
            2 * CHAR(1) INIT('/'),
            2 DAY CHAR(2) INIT('00'),
            2 * CHAR(1) INIT('/'),
            2 YEAR CHAR(2) INIT('00');
       DCL 1 ACCTS STATIC,
            2 N SBIN,
            2 A(0:19),
             3 ACCT CHAR(10) INIT(' '*0),
             3 PACK CHAR(6) INIT(' '*0);
       DCL 1 PACKS STATIC,
            2 N SBIN,
            2 PACK(0:19) CHAR(8) INIT(' '*0);
       DCL 1 FBUF STATIC,
            2 CRACCT CHAR(8),
            2 CRNAME CHAR(12),
            2 ACCT CHAR(8),
            2 NAME CHAR(31),
            2 ACCESS UBIN,
            2 CREATE UBIN,
            2 MODIFY UBIN,
            2 NGRANS UBIN,
            2 OKAY UBIN;
/* */
       IF B$JIT.PRIV.ACTIVE & %PR_FMSEC# THEN
          FMS='1'B;
       ELSE
          FMS='0'B;
       CALL M$INT(FPT_INT);
       DCB$=DCBADDR(DCBNUM(M$FILE));
       CALL M$TIME(CURR_TIME);
 
       CALL M$OPEN(OPENLO) ALTRET(CROAK);
       CALL M$OPEN(OPEN_LIST) ALTRET(CROAK);
       CALL PRINTDO(%SALUTATION);
       SRCH=%DEFAULT;
       ACC=0;
       UPD=0;
       CHECK=%ETIME;
 
       SIZE=B$JIT.CCARS-B$JIT.CCDISP;
       IF SIZE > 0 THEN
          DO;   /* GET OPTIONS */
          CALL XUR$INIT(XUR_INIT, PCB$) ALTRET(CROAK);
 
          SIZE=B$JIT.CCARS-B$JIT.CCDISP;
          CALL INSERT(BUF, 0, 256,
             SUBSTR(B$JIT.CCBUF, B$JIT.CCDISP, SIZE));
 
          CALL XUR$GETCMD(CMD, BLK$,, BUF, SIZE) ALTRET(SYNERR);
 
          DO I=0 TO BLK$->OUT.NSUBLKS-1;
             OUT$=BLK$->OUT.SUBLK$(I);
             DO CASE(OUT$->OUT.CODE);
                CASE(%WHERE);
                   CALL GET_WHERE(OUT$) ALTRET(DONE);
 
                CASE(%ACCESS);
                   CALL GET_TIME(OUT$) ALTRET(DONE);
                   ACC=TIME;
                   CHECK=%ETIME;
 
                CASE(%MODIFY);
                   CALL GET_TIME(OUT$) ALTRET(DONE);
                   UPD=TIME;
                   CHECK=%ETIME;
 
                CASE(%OPEN);
                   CHECK=%OPEN;
 
             END;  /* CASE */
          END;  /* DO I */
          END;  /* GET OPTIONS */
 
       IF CHECK = %OPEN AND (NOT FMS) THEN
          DO;   /* NEED FMS */
          CALL PRINTDO(%NEEDFMS);
          CALL M$EXIT;
          END;  /* NEED FMS */
 
       IF ACC = 0 AND UPD = 0 THEN
          ACC=CTIME-(6*%UTS_25TH_MONTH#);
          CALL XUD$UTS_ADJ_25TH(TEMP_UTS1,0,6*%UTS_25TH_MONTH#);
          CALL XUD$UTS_DIFF(ACC,CTIME,TEMP_UTS1);
 
       DO CASE(SRCH);
          CASE(%DEFAULT);
             CALL SEARCH_DEFAULT;
 
          CASE(%ACCT);
             CALL SEARCH_ACCT;
       END;  /* DO CASE */
 
       CALL PRINT_LIST;
DONE:  CALL M$CLOSE(CLOSELO);
       CALL M$CLOSE(CLOSE_LIST);
       CALL M$EXIT;
SYNERR: ;
       BUF=' ';
       J=PCB$->P$PCB.HI_CHAR+B$JIT.CCDISP+1;
       CALL INSERT(BUF, J, 1, '^');
       CALL WRITEDO(BUF, J+1);
       CALL PRINTDO(%SYNERR);
       CALL M$EXIT;
CROAK: CALL MONERR;
       CALL M$EXIT;
       %EJECT;
CHECK_ACCT: PROC;
/* */
LOOP:  DO WHILE('1'B);
          CALL M$OPEN(OPEN_FILE) ALTRET(CHKDONE);
          DO WHILE('0'B);
CHKDONE:     IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE ~= %E$BADFIT THEN
                EXIT LOOP;
          END;  /* WHILE */
 
          CALL CHECK_FILE;
          OPEN_FILE.V.INITZ.SCRUB#=%NO#;
          OPEN_FILE.NAME_=VECTOR(NIL);
       END;  /* WHILE */
 
       RETURN;
       END CHECK_ACCT;
       %EJECT;
CHECK_FILE: PROC;
/* */
       FIT$=ADDR(FPARAM);
       CALL XSF$LOCCODT(FIT$, 4) ALTRET(FLICK_IT_IN);
 
       IF (CHECK = %ETIME AND (CODE04.ACCESS.TIME < ACC OR
                             CODE04.MODIFY.TIME < UPD)) OR
          (CHECK = %OPEN AND CODE04.SVMODIFY.TIME ~= 0) THEN
          DO;   /* LOG IT */
          FBUF='0'B;
          IF FMS THEN
             DO;   /* GET CREATOR */
             FBUF.CRACCT=CODE04.CREATOR.ACCT;
             FBUF.CRNAME=CODE04.CREATOR.NAME;
             END;  /* GET CREATOR */
          ELSE
             DO;   /* UNKNOWN CREATOR */
             FBUF.CRACCT=' ';
             FBUF.CRNAME=' ';
             END;  /* UNKNOWN CREATOR */
          FBUF.ACCT=F$DCB.ACCT#;
          FBUF.NAME=F$DCB.NAME#.C;
          FBUF.ACCESS=CODE04.ACCESS.TIME;
          FBUF.CREATE=CODE04.CREATION.TIME;
          FBUF.MODIFY=CODE04.MODIFY.TIME;
 
          FIT$=ADDR(FPARAM);
          FBUF.NGRANS=0;
          CALL XSF$LOCCODT(FIT$, 3) ALTRET(IGNORE);
          FBUF.NGRANS=CODE03.UGRANS+CODE03.NGAVAL;
IGNORE:   IF CHECK = %OPEN THEN
             CALL VALIDATE_FILE ALTRET(FLICK_IT_IN);
          CALL M$WRITE(WRITE_LIST) ALTRET(CROAK);
          NRECS=NRECS+1;
          IF NRECS > 2500 THEN
             DO;   /* REBUILD UPPER LEVEL */
             CALL M$CLOSE(CLOSE_LIST_SAVE) ALTRET(CROAK);
             CALL M$OPEN(OPEN_LIST_UPDATE) ALTRET(CROAK);
             NRECS=0;
             END;
          END;  /* LOG IT */
 
FLICK_IT_IN: ;
       RETURN;
CROAK: CALL MONERR;
       CALL M$EXIT;
       END CHECK_FILE;
       %EJECT;
CHECK_RECORDS: PROC;
       DCL I SBIN;
/* */
       NUM_INDEXES=0;
       FIT$=ADDR(FPARAM);
       CALL XSF$LOCCODT(FIT$, 8) ALTRET(NOCODE8);
 
       NUM_INDEXES=FITALTKEYS.NUMENTS;
 
NOCODE8: ;
       FIT$=ADDR(FPARAM);
       CALL XSF$LOCCODT(FIT$, 19) ALTRET(NOCODE19);
 
       NUM_INDEXES=CODE19.NKEYS;
 
NOCODE19: ;
       CALL READ_RECORDS;
 
       IF (F$DCB.ORG# = %INDEXED# OR F$DCB.ORG# = %IREL#) AND
          FBUF.OKAY = 1 THEN
          DO;   /* CHECK ALTERNATE INDEXES */
          I=1;
          DO UNTIL (I >= NUM_INDEXES OR FBUF.OKAY = 0);
             READ_FILE.V.INDX#=I;
             CALL READ_RECORDS;
             I=I+1;
          END;  /* UNTIL */
 
          READ_FILE.V.INDX#=0;
          END;  /* CHECK ALTERNATE INDEXES */
 
       RETURN;
       END CHECK_RECORDS;
       %EJECT;
GET_TIME: PROC(OUT$) ALTRET;
       DCL OUT$ PTR;
       DCL BLK$ PTR;
       DCL DIGBUF CHAR(10) STATIC INIT(' ');
       DCL N UBIN STATIC;
       DCL BLK1$ PTR STATIC;
/* */
       BLK$=OUT$->OUT.SUBLK$(0);
       DO CASE(BLK$->OUT.CODE);
          CASE(%EDATE);
             DATE.MONTH='00';
             N=BLK$->OUT.SUBLK$(0)->OUT$SYM.COUNT;
             CALL INSERT(DATE.MONTH, 2-N, N,
                BLK$->OUT.SUBLK$(0)->OUT$SYM.TEXT);
             DATE.DAY='00';
             N=BLK$->OUT.SUBLK$(1)->OUT$SYM.COUNT;
             CALL INSERT(DATE.DAY, 2-N, N,
                BLK$->OUT.SUBLK$(1)->OUT$SYM.TEXT);
             DATE.YEAR='00';
             N=BLK$->OUT.SUBLK$(2)->OUT$SYM.COUNT;
             CALL INSERT(DATE.YEAR, 2-N, N,
                BLK$->OUT.SUBLK$(2)->OUT$SYM.TEXT);
             CALL M$TIME(CNVRT_TIME) ALTRET(BADTIME);
 
          CASE(%SPAN);
             IF BLK$->OUT.SUBLK$(0)->OUT$SYM.COUNT > 10 THEN
                GOTO BADTIME;
 
             N=BLK$->OUT.SUBLK$(0)->OUT.SUBLK$(0)->OUT$SYM.COUNT;
             DIGBUF='0000000000';
             CALL INSERT(DIGBUF, 10-N, N,
                BLK$->OUT.SUBLK$(0)->OUT.SUBLK$(0)->OUT$SYM.TEXT);
             CALL CHARBIN(N, DIGBUF);
 
             BLK1$=BLK$->OUT.SUBLK$(0);
             DO CASE(BLK1$->OUT.CODE);
                CASE(%DAYS);
                   CALL XUD$UTS_ADJ_25TH(N,0,N*%UTS_25TH_DAY#);
 
                CASE(%WEEKS);
                   CALL XUD$UTS_ADJ_25TH(N,0,N*%UTS_25TH_WEEK#);
 
                CASE(%MONTHS);
                   CALL XUD$UTS_ADJ_25TH(N,0,N*%UTS_25TH_MONTH#);
 
                CASE(%YEARS);
                   CALL XUD$UTS_ADJ_25TH(N,0,N*%UTS_25TH_YEAR#);
 
             END;  /* CASE */
             IF N > CTIME THEN
                GOTO BADTIME;
 
             TIME=CTIME-N;
       END;  /* CASE */
 
       RETURN;
BADTIME: CALL PRINTDO(%BADTIME);
       ALTRETURN;
       END GET_TIME;
       %EJECT;
GET_WHERE: PROC(OUT$) ALTRET;
       DCL OUT$ PTR;
       DCL BLK$ PTR STATIC;
       DCL I SBIN STATIC;
/* */
       BLK$=OUT$->OUT.SUBLK$(0);
       DO CASE(BLK$->OUT.CODE);
          CASE(%ACCT1);
             ACCTS.N=1;
             TEXTFID=BLK$->OUT$SYM.TEXT;
             CALL VERIFY_ACCT ALTRET(ERR);
             ACCTS.A.ACCT(0)=VLP_ACCT.ACCT#;
             ACCTS.A.PACK(0)=VLP_SN.SN#(0);
             SRCH=%ACCT;
 
          CASE(%ACCTL);
             IF BLK$->OUT.NSUBLKS > 20 THEN
                GOTO TOOMANYACCTS;
 
             ACCTS.N=BLK$->OUT.NSUBLKS;
             DO I=0 TO BLK$->OUT.NSUBLKS-1;
                TEXTFID=BLK$->OUT.SUBLK$(I)->OUT$SYM.TEXT;
                CALL VERIFY_ACCT ALTRET(ERR);
                ACCTS.A.ACCT(I)=VLP_ACCT.ACCT#;
                ACCTS.A.PACK(I)=VLP_SN.SN#(0);
             END;  /* DO I */
             SRCH=%ACCT;
 
       END;  /* CASE */
 
       RETURN;
TOOMANYACCTS: ;
       CALL PRINTDO(%TOOMANYACCTS);
       ALTRETURN;
ERR:   ALTRETURN;
       END GET_WHERE;
       %EJECT;
MONERR: PROC;
/* */
       CALL XUR$ERRMSG(B$TCB$->B$TCB.ALT$->B$ALT.ERR,
          B$TCB$->B$TCB.ALT$->B$ALT.DCB#);
       RETURN;
       END MONERR;
       %EJECT;
PRINTDO: PROC(N);
       DCL N SBIN;
/* */
       CALL WRITEDO(DOMESSAGE.TEXT(N), DOMESSAGE.SIZE(N));
       RETURN;
       END PRINTDO;
       %EJECT;
PRINT_LIST: PROC;
       DCL 1 LAST STATIC,
            2 NAME CHAR(12),
            2 ACCT CHAR(8);
/* */
       IF CHECK = %ETIME THEN
          DO;   /* TIME */
          CALL X$WRITE(F_FDS, VECTOR(THFMT1));
          CALL X$WRITE(F_FDS, VECTOR(THFMT2));
          END;  /* TIME */
       ELSE
          DO;   /* OPEN */
          CALL X$WRITE(F_FDS, VECTOR(OHFMT1));
          CALL X$WRITE(F_FDS, VECTOR(OHFMT2));
          END;  /* OPEN */
 
       CALL M$REW(FPT_REW);
       CALL M$READ(READ_LIST) ALTRET(EOF);
       LAST.ACCT=FBUF.CRACCT;
       LAST.NAME=FBUF.CRNAME;
 
       DO WHILE ('1'B);
          IF CHECK = %ETIME THEN
             CALL X$WRITE(F_FDS, VECTOR(TFMT),
                VECTOR(FBUF.CRACCT),
                VECTOR(FBUF.CRNAME),
                VECTOR(FBUF.NAME),
                VECTOR(FBUF.ACCT),
                VECTOR(FBUF.CREATE),
                VECTOR(FBUF.ACCESS),
                VECTOR(FBUF.MODIFY),
                VECTOR(FBUF.NGRANS));
          ELSE
             IF FBUF.OKAY = 1 THEN
                CALL X$WRITE(F_FDS, VECTOR(OFMTO),
                   VECTOR(FBUF.CRACCT),
                   VECTOR(FBUF.CRNAME),
                   VECTOR(FBUF.NAME),
                   VECTOR(FBUF.ACCT));
             ELSE
                CALL X$WRITE(F_FDS, VECTOR(OFMTB),
                   VECTOR(FBUF.CRACCT),
                   VECTOR(FBUF.CRNAME),
                   VECTOR(FBUF.NAME),
                   VECTOR(FBUF.ACCT));
 
          CALL M$READ(READ_LIST) ALTRET(EOF);
          IF FBUF.CRACCT ~= LAST.ACCT OR FBUF.CRNAME ~= LAST.NAME THEN
             DO;   /* NEW CREATOR */
             IF CHECK = %ETIME THEN
                DO;   /* TIME */
                CALL X$WRITE(F_FDS, VECTOR(THFMT1));
                CALL X$WRITE(F_FDS, VECTOR(THFMT2));
                END;  /* TIME */
             ELSE
                DO;   /* OPEN */
                CALL X$WRITE(F_FDS, VECTOR(OHFMT1));
                CALL X$WRITE(F_FDS, VECTOR(OHFMT2));
                END;  /* OPEN */
             LAST.ACCT=FBUF.CRACCT;
             LAST.NAME=FBUF.CRNAME;
             END;  /* NEW CREATOR */
       END;  /* WHILE */
 
EOF:   RETURN;
       END PRINT_LIST;
       %EJECT;
SEARCH_ACCT: PROC;
       DCL IND SBIN;
/* */
       OPEN_FILE.V.INITZ.SCRUB#=%YES#;
       DO I=0 TO ACCTS.N-1;
          IF ACCTS.A.PACK(I) ~= ' ' THEN
             DO;   /* SPECIFIED PACK TOO */
             VLP_SN.SN#(0)=ACCTS.A.PACK(I);
             OPEN_FILE.SN_=VECTOR(VLP_SN);
             END;  /* SPECIFIED PACK TOO */
          ELSE
             OPEN_FILE.SN_=VECTOR(ERASE);
 
          CALL INDEX(IND, '?', ACCTS.A.ACCT(I));
          IF IND >= SIZEC(ACCTS.A.ACCT(0)) THEN
             DO;   /* NO WILDCARD */
             OPEN_FILE.ACCT_=VECTOR(ACCTS.A.ACCT(I));
             CALL CHECK_ACCT;
             END;  /* NO WILD CARD */
          ELSE
             DO;   /* WILD CARD */
             CALL WILD_SEARCH(ACCTS.A.ACCT(I), IND);
             END;  /* WILD CARD */
       END;  /* DO I */
 
       RETURN;
       END SEARCH_ACCT;
       %EJECT;
READ_RECORDS: PROC;
/* */
LOOP:  DO WHILE('1'B);
          CALL M$READ(READ_FILE) ALTRET(CHKDONE);
 
          DO WHILE('0'B);
CHKDONE:     IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE = %E$EOF OR
                B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE = %E$NOALT THEN
                DO;   /* FILE OKAY */
                FBUF.OKAY=1;
                EXIT LOOP;
                END;  /* FILE OKAY */
 
             IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE ~= %E$LD THEN
                DO;   /* NOT OKAY */
                FBUF.OKAY=0;
                EXIT LOOP;
                END;  /* NOT OKAY */
          END;  /* WHILE */
       END;  /* WHILE */
 
       RETURN;
       END READ_RECORDS;
       %EJECT;
SEARCH_DEFAULT: PROC;
/* */
       OPEN_FILE.V.INITZ.SCRUB#=%YES#;
       CALL CHECK_ACCT;
       RETURN;
       END SEARCH_DEFAULT;
       %EJECT;
VALIDATE_FILE: PROC ALTRET;
/* */
       SAVE_OPEN.V=OPEN_FILE.V;
 
       IF F$DCB.ORG# = %CONSEC# OR
          F$DCB.ORG# = %INDEXED# OR
          F$DCB.ORG# = %KEYED# OR
          F$DCB.ORG# = %RANDOM# OR
          F$DCB.ORG# = %RELATIVE# OR
          F$DCB.ORG# = %IDS# OR
          F$DCB.ORG# = %IREL# THEN
          DO;   /* READ THROUGH FILE */
          OPEN_FILE.V.OPER='0'B;
          OPEN_FILE.V.ACS#=%SEQUEN#;
          OPEN_FILE.V.FUN#=%IN#;
          CALL M$OPEN(OPEN_FILE) ALTRET(CHKOPEN);
 
          FIT$=ADDR(FPARAM);
          CALL XSF$LOCCODT(FIT$, 4) ALTRET(ERR);
          IF CODE04.SVMODIFY.TIME ~= 0 THEN
             DO;   /* FILE CLOSED NOW */
ERR:         CALL M$CLOSE(CLOSE_FILE) ALTRET(CHKOPEN);
             OPEN_FILE.V=SAVE_OPEN.V;
             ALTRETURN;
             END;  /* FILE CLOSED NOW */
 
          CALL CHECK_RECORDS;
 
          CALL M$CLOSE(CLOSE_FILE) ALTRET(CHKOPEN);
          END;  /* READ THROUGH FILE */
       ELSE
          ALTRETURN;
 
       DO WHILE ('0'B);
CHKOPEN:  IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE = %E$BADFIT THEN
             FBUF.OKAY=0;
          ELSE
             FBUF.OKAY=1;
 
          IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE = %E$FILEBUSY OR
             B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE = %E$JRNLERR OR
             B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE = %E$NOFILE THEN
             DO;   /* DONT LOG THIS */
             OPEN_FILE.V=SAVE_OPEN.V;
             ALTRETURN;
             END;  /* DONT LOG THIS */
       END;
 
       OPEN_FILE.V=SAVE_OPEN.V;
       RETURN;
       END VALIDATE_FILE;
       %EJECT;
VERIFY_ACCT: PROC ALTRET;
/* */
       CALL M$FID(FPT_FID) ALTRET(ERR);
 
       IF VLR_FID.NAME OR VLR_FID.PASS OR VLR_FID.WSN THEN
          DO;   /* ONLY ACCT ALLOWED */
ERR:      CALL PRINTDO(%ONLY_ACCT);
          ALTRETURN;
          END;  /* ONLY ACCT ALLOWED */
 
       IF (NOT VLR_FID.ACCT) AND (NOT VLR_FID.SN) THEN
          DO;   /* MUST HAVE ACCT */
          CALL PRINTDO(%MUST_ACCT);
          ALTRETURN;
          END;  /* MUST HAVE ACCT */
 
       IF VLP_ACCT.ACCT# = ' ' THEN
          VLP_ACCT.ACCT#='?';
 
       RETURN;
       END VERIFY_ACCT;
       %EJECT;
WILD_SEARCH: PROC(ACCT, WINDX);
       DCL ACCT CHAR(10);
       DCL WINDX SBIN;
       DCL SAVE_ACCT CHAR(8);
       DCL WILD_X UBIN;
       DCL WILD_XC REDEF WILD_X CHAR(4);
       DCL WILD_XP UBIN;
       DCL COMPARE_X UBIN;
       DCL COMPARE_XP UBIN;
       DCL CHRS BASED CHAR(WINDX);
/* */
       CALL INSERT(SAVE_ACCT, 0, 8, SUBSTR(ACCT, 0, WINDX));
       OPEN_FILE.ACCT_=VECTOR(SAVE_ACCT);
       IF SAVE_ACCT = ' ' THEN
          OPEN_FILE.V.OPER.NXTA#=%YES#;
 
LOOP:  DO WHILE('1'B);
          CALL M$OPEN(OPEN_FILE) WHENALTRETURN
             DO;   /* CHECK ERROR */
             IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE = %E$ADEOF THEN
                EXIT LOOP;
             IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE = %E$NOTAUTH OR
                ((B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE = %E$NONEWU OR
                  B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE = %E$SETDOWN) AND
                  OPEN_FILE.SN_ ~= VECTOR(ERASE)) THEN
                DO;   /* ERROR */
                CALL MONERR;
                CALL M$EXIT;
                END;  /* ERROR */
             END;  /* CHECK ERROR */
 
          %WILD_COMPARE(NO_MATCH="GOTO NEXT",
             WILD_CHARS=ACCT,
             COMPARE_CHARS=F$DCB.ACCT#);
 
          OPEN_FILE.V.OPER.NXTA#=%NO#;
          OPEN_FILE.V.INITZ.SCRUB#=%NO#;
          OPEN_FILE.NAME_=VECTOR(ERASE);
          OPEN_FILE.ACCT_=VECTOR(NIL);
          CALL CHECK_ACCT;
 
NEXT:     OPEN_FILE.V.INITZ.SCRUB#=%NO#;
          IF ADDR(SAVE_ACCT)->CHRS < ADDR(F$DCB.ACCT#)->CHRS THEN
             EXIT LOOP;
          OPEN_FILE.V.OPER.NXTA#=%YES#;
          OPEN_FILE.ACCT_=VECTOR(NIL);
       END;  /* FOREVER */
 
       RETURN;
       END WILD_SEARCH;
       %EJECT;
WRITEDO: PROC(BUF, SIZE);
       DCL BUF CHAR(80);
       DCL SIZE UBIN;
/* */
       DOBUF=BUF;
       FPT_WRITEDO.BUF_.BOUND=SIZE-1;
       CALL M$WRITE(FPT_WRITEDO);
       RETURN;
       END WRITEDO;
       END FERRET;
       %EOD;
/*M* BREAK - Asynchronus break routine for FERRET */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
BREAK: PROC ASYNC;
       %INCLUDE CP_6;
       %INCLUDE XU_FORMAT_C;
/* */
       %FPT_UNFID(DCB=M$FILE, TEXTFID=FID);
       %FPT_TRMPRG(RSTBRK=YES);
       %F_FDS(BUF=XBUF, DCB=M$DO);
/* */
       DCL M$DO DCB;
       DCL M$FILE DCB;
/* */
       DCL X$WRITE ENTRY(22);
/* */
       DCL FID CHAR(49) STATIC;
       DCL XBUF CHAR(80) STATIC;
       DCL FMT CHAR(0) CONSTANT INIT(
'Break at:  %A');
/* */
       CALL M$UNFID(FPT_UNFID);
       CALL X$WRITE(F_FDS, VECTOR(FMT), VECTOR(FID));
       CALL M$TRMPRG(FPT_TRMPRG);
       RETURN;
       END BREAK;
