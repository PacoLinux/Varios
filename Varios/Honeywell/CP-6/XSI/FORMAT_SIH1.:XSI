.*M*
HELP file for: FORMAT
.*T*
 **************************************************************
 *                                                            *
 *  Copyright (c) Bull HN Information Systems Inc., 1989      *
 *                                                            *
 **************************************************************
.*A*                                             
  !FORMAT.X [sifid][,uifid] (ON|OVER|TO) [oufid][,lofid][(options)]
 
   sifid - default source fid; may be specified by
           assigning M$SI; always assumed to have been specified
   uifid - default update fid; may be specified by
           assigning M$UI and using UI option; standard plus
           card format;  if no account is specified, that of the
           sifid is used
   oufid - default source output fid; may be specified by
           assigning M$OU and using OU option;  if no account is
           specified, that of the sifid is used
   lofid - listing output fid; may be specified by
           assign M$LO and using LO option
   options - taken from the following list; separated by commas
 
.*B*
Error messages are written through M$DO.
 
 Options:
   UI    - read updates through M$UI (even though uifid not specified
           on command line)
   OU    - write source output through M$OU (even though oufid not
           specified on command line)
   LO    - write listing output through M$LO (even though lofid not
           specified on command line)
 
   OPTUI - update file is to be considered optional--if it doesn't
           exist, FORMAT will so indicate and continue
   OPTUINM - like OPTUI except update file existence is not indicated
   LU    - list update file separately
   LIST/FILE[=fid] - read file names through F$LISTFILE if no fid is
              specified or from fid if it is specified;  standard
              listfile format
   WHR=n - tell user current location in output file every n records
 
 Options affecting output file:
 
   (LN|KSO|KEY/ED) - key source output file(s) starting at 1.000
           in increments of 1.000
   (NLN|CON/SEC) - make source output file(s) consecutive
   RUK   - key source output file(s) using a combination of sifid
           and uifid keys; if either file is not keyed, its keys
           are assumed to be the consecutive record number times
           1.000
   Note: the previous three options are mutually exclusive.
         If none is specified
               If an update file exists
                  CON
               If an update file doesn't exist
                  If sifid is keyed
                     RUK
                  If sifid isn't keyed
                     CON
 
 Options affecting formatting of output file:
   NFMT  - don't format the output file
   NSO[=fid] - If the file also specifies NSO in a *X* comment,
           don't produce source output (OU) if any updates exist.
           If updates actually cause the non-production of a source
           output file, a record is appended to "fid" indicating
           which file is affected, and a command variable, NSO, is
           set to 1.  Otherwise, the value of NSO is 0.  If "fid" is
           not specified, whatever F$NSOHIST is assigned to will be
           used.  If the name portion of "fid" is ALL, only files
           without updates will produce source output; files with
           updates will cause NSO to be set to 1, but no record is
           appended to "fid".
   (FMT|FORM/AT|PL6/FMT)[(fmtoptions)] - format the output (default);
           fmtoptions are suboptions which control formatting.  They
           may also be specified as options, in which case the FORMAT
           option is implied:
      PL1   - source is PL1; an asterisk in column 1 denotes a comment
              if no code has yet been seen
      PAR/TRGE - source is PARTRGE; only comments may be formatted;
              no syntax checking is done
      C/C   - source is C; format accordingly.  Preprocessor directives use
              # instead of %, { is do;, } is end;, switch is do case, etc.
              Data declarations are handled poorly.
      (NOX|ORX) - ignore any *X* comments in source
      IFX   - format source only if it contains a *X* comment
      X     - prompt me for default *X* formatting options
              (Formatting options may also be specified on the command
              line instead of being specified separately.)
      FUF   - output file is to contain a formatted update file only
      CYR=year - year is a digit string indicating the year (A.D.) to be
              included in the *T* copyright notice inserted before the
              first line of code or non-*M* commentary; CON or KSO
              should also be specified--if neither is specified, CON
              is assumed;  if RUK is specified, KEY is assumed.
   Note: files containing an asterisk, double quote, exclamation point,
      or dollar sign as the first nonblank character of the first record
      are assumed to be not formattable.  The *T* comment for such files
      begins in the same column that this first asterisk was found in, and
      up to four preceding characters are duplicated to make it a comment.
.*B*
                  Source File Formatting
 
The contents of source files may be affected by the formatting
options described below.  These options must be contained within
EXTRACT type X commentary or given when prompted for (see FMT(X)
command line options above).  The syntax of options within an
EXTRACT type X command is:
 
   option [,option] ...
 
Each option is one of two types.  The first type specifies a yes/no
choice:
 
   option-name [ = ( YES | NO ) ]
 
Note that the choice is optional.  If only the option-name appears,
the YES choice is assumed.
 
The second type of option specifies a numeric value:
 
   option-name = value
 
The value must be specified.
 
If an unrecognizable option-name is used, FORMAT will give an error
message allowing the programmer to locate and fix it.  The default
option values (indicated in parentheses below) will then be
substituted.
 
.*B*
Options may be divided into those which affect comments and those
which affect code statements.  The options which affect comments
are now described:
 
   MCL = n (1)
      comments starting after column n are to be moved; other comments
      will not be moved
   EMCL = n (1)
      like MCL except explicitly for EXTRACT type commentary
   MOC = YES/NO (NO)
      move open comments (comments continued on successive lines
      without an intervening "*/")
   EMOC = YES/NO (NO)
      like MOC except explicitly for EXTRACT type commentary
   DMC = YES/NO (NO)
      don't move (format) comments
   EDMC = YES/NO (YES)
      like DMC except explicitly for EXTRACT type commentary
   MEC = YES/NO (NO)
      opposite of EDMC
   AIC = YES/NO (NO)
      don't give error messages if a comment beginning "/*" appears
      within the text of a comment
   CLM = n (40)
      comment left margin is n spaces
      if n is omitted, align comments with code
   ( ECLM | EXM ) = n (20)
      like CLM except explicitly for EXTRACT type commentary
   CRM = n (80)
      comment right side maximum is column n
   CRT = n (5)
      comments which do not fit between the CLM/ECLM and CRM limits
      are to be moved left in increments of n until they fit within
      the CRM limit
   MCR = YES/NO (YES)
      move comment ending "*/" to limit specified by CRM
   MER = YES/NO (YES)
      like MCR except explicitly for EXTRACT commentary
   DMR = YES/NO (NO)
      don't MCR and don't MER
   NLB = YES/NO (NO)
      no leading blanks are to be left at the beginning of open
      comments which are continued onto successive lines
   NTB = YES/NO (NO)
      no trailing blanks (minimum 1) are to be left between the
      last non-blank of the textual matter of a comment and the
      comment ending
   CCI = n (0)
      open comment lines for which leading blanks are removed are
      to be indented n spaces from the comment's left margin
   CEI = n (0)
      like CCI except explicitly for EXTRACT type commentary
   CCC = YES/NO (NO)
      convert comment text to lower case except for words containing
      digits or the special characters '%', '$', '@', ':', '*' and
      '#'.  Groups of words surrounded by single or double quotes
      are not converted.  Words containing but not ending with
      a period '.' are not converted.  The first character of the
      comment and all characters following words ending with
      periods are not converted.
   CCE = YES/NO (NO)
      like CCC except explicitly for EXTRACT type commentary
   ( RIP | CRIP ) = YES/NO (NO)
      remove non-EXTRACT comments and ignore all imbedded EXTRACT
      type X comments
   ERIP = YES/NO (NO)
      like RIP except explicitly for EXTRACT type commentary
   ICP
      unsupported by new formatter though specification causes no
      syntax error
 
Options which affect source code may be divided into the statements
that they affect:
 
   All statements:
      DFC = YES/NO (NO)
         don't format code (comments will still be formatted)
      PLM = n (8)
         procedure left margin causes n spaces to be the initial
         indentation margin
      IND = n (3)
         indent each logical level n more spaces
      CTI = n (2)
         indent a statement which continues onto a successive an
         additional n spaces
      DCI = n (3)
         indent statements of DO CASE cases n spaces from DO
      IAD = n (0)
         indent statements following a DO (but not DO CASE) n
         spaces in addition to that specified by IND
      SQB = YES/NO (NO)
         squeeze occurances of successive blanks down to one before
         formatting (note: this does not affect comment text)
      PRB = YES/NO (NO)
         when moving items to the right, move the entire line; don't
         move item by removing successive blanks
      XBO = YES/NO (NO)
         to acheive desired formatting, only expand blanks
         which already exist; don't insert blanks where not
         previously
      FRA = YES/NO (NO)
         force right alignment of items normally moved to the right
         but which must be moved left to be right aligned
 
   DO
      IDT = n (0)
         indent DO statements n spaces in addition to that specified
         by IND
      DTI = n (3)
         indent DO following a THEN/ELSE n spaces from the
         corresponding IF
 
   END
      ENI = n (3)
         indent END n spaces from the corresponding DO
      ENU = n
         indent END n spaces from the statement group it follows
         (overrides ENI)
      ( AND | ANSFORT ) = YES/NO (NO)
         align END statement with corresponding DO statement
      ECI = n (1)
         indent END n spaces from corresponding DO of DO CASE
         statement
      ECU = n
         indent END n spaces from the DO CASE case statement
         group it follows (overrides ECI)
 
 
   CASE
      CSI = n (1)
         indent CASE statement preceeding DO CASE case statement
         group n spaces from corresponding DO statement
      CSU = n
         indent CASE statement preceeding DO CASE case statement
         group n spaces from the statement group it preceeds
 
   THEN/ELSE
      THI = n (0)
         indent THEN or ELSE statment n spaces from the corresponding
         IF statement
 
   PROC
      IPC = YES/NO (NO)
         indent PROC statement (along with its procedure) as if it
         were a DO or BEGIN
 
   DCL
      DIN = n (0)
         indent DCL statements n spaces
      SDI = n (2)
         indent each level of a structure DCL n spaces
 
   Other
      STI = n (0)
         indent statement following THEN or ELSE statement n spaces
         in addition to that specified by IND
      MCI = YES/NO (NO)
         ignore macro invocations...they are not to be formatted
      NSO = YES/NO (NO)
         don't write updates to source output file if NSO is also
         specified on the command line
 
.*B*
A special formatting option exists for unwilling victims:
 
   ( DDA | NO/THING ) = YES/NO (NO)
      don't do anything to my beautiful, already formatted code
      (don't even touch the comments!)
 
       Some general notes about formatting
 
An attempt is made to move multi-line comments as a group.  Thus
the comment:
 
               /* first line of comment
             2101234
              101234
               01234
                1234
                  34 */
 
would be formatted:
 
               - column n as specified by CLM or ECLM
              V
               /* first line of comment
               2101234
               101234
               01234
                1234
                  34 */
 
In effect, the location of the comment beginning "/*" is
dropped down the page.  Pieces of comment which begin to the
left of this line are moved right.  Pieces which begin to the
right of this line are left in their relative positions.
.*X*
.*K* XINDEX
FORMAT.X
.*R*
AID=PROGRAMMING
.*R*
AID=INTEGRATION
.*R*
PL6_PREPROCESSING
.*R*
FORMATTING
.*R*
PRETTY_PRINTER
.*K* XINDEX_ABSTRACT
TOOL=FORMAT
.*R*
Formats PL-6 source files and merges source files and update packets.
.*K* CHANGES Changes changes
3/5/92 - PAR - fixed failure to parse CC option as FMT suboption.
.*R*
9/26/91 - PAR - added support for APL source ($COM comments) and RELG on close.
.*R*
8/27/91 - added NSO=ALL option.
.*R*
7/18/90 - Made n optional for CLM/EXM/ECLM.
.*R*
7/9/90 - Added the C compiler option to recognize C code.
.*B*
4/28/87
.*R*
Changed copyright notice to Honeywell Bull.
.*R*
860106
.*R*
Fixed NSO searcher for non-formattable files (to work).
.*R*
03/16/84
.*R*
Fixed *T* generator to mimic the *M* format, in particular, ending "
and beginning up-to-four non_blanks before the *M*.
Fixed the *M* and *T* finder to skip non-* prefix characters (e.g. ").
.*R*
01/04/84
.*R*
Fixed second CALL indentation.
", !, and * as first non-blank on first line of source now
   all indicate that source is not to be formatted.
A macro invocation beginning in column 1 will not be moved.
.*R*
5/3/83
.*R*
Changed copyright notice to be composed of a number of single line
comments instead of one multi-line comment.
.*R*
10/19/82
.*R*
Addition of NSO options for both command line and *X* comment.
.*R*
Handling of WHENRETURN and WHENALTRETURN.
.*R*
11/8/82
.*R*
Changed NSO history file to ACS=JRNL from ACS=SEQUEN.
Changed NSO file M$WRITE altreturn handling: if error
   is "journal closed by owner", close file, reopen
   (as owner), and attempt write again.  Failure this
   time is fatal.
.*K* OWNER
Peter Rumsey, LADC
