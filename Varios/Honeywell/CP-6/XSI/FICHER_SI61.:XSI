/*M*     FICHER - CP6 MICROFICHE TAPE BUILDER */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/*X* */
FICHER: PROC MAIN;
%INCLUDE CP_6;
%INCLUDE CP_6_SUBS;
%INCLUDE B_ERRORS_C;
%INCLUDE XU_MACRO_C;
%INCLUDE XU_PERR_C;
%INCLUDE F$JIT_C;
%INCLUDE B_MICROPS_C;
%INCLUDE FICHER_C1;
/**/
DCL B$JIT$ PTR SYMREF;
%B$TCB;
%B$EXCFR;
DCL B$TCB$ PTR SYMREF;
%XUU_PARAM;
DCL X$PARSE ENTRY(1) ALTRET;
DCL XUU$OPEN ENTRY(1) ALTRET;
DCL XUU$READ ENTRY(2) ALTRET;
/* */
%F$DCB;
/**/
DCL M$DO DCB;
/*
    F$LIST IS THE DCB ASSIGNED TO THE LIST FILE.
    THE LIST FILE IS EXPECTED TO BE OF THE FORMAT:
 
    MODULE,LANGUAGE,OWNER
 
*/
DCL F$LIST DCB;
DCL F$LIST$ PTR;
%FPT_READ(FPTN=READ_LIST,BUF=LIST_BUF,DCB=F$LIST,WAIT=YES);
%FPT_PRECORD (FPTN=PREC_LIST,DCB=F$LIST);
/*
    F$FILE IS THE DCB USED TO ACESS THE INPUT FILES.
    INPUT MODULE NAMES COME FROM THE LIST FILE.
*/
DCL F$FILE DCB;
DCL F$FILE$ PTR;
%FPT_OPEN (FPTN=OPEN_FILE,DCB=F$FILE,NAME=VLP_NAME,FUN=IN);
%FPT_READ (FPTN=READ_FILE,DCB=F$FILE,BUF=RECORD_BUF,WAIT=YES);
%FPT_CLOSE (FPTN=CLOSE_FILE,DISP=SAVE,DCB=F$FILE);
/*
    F$TAPE IS THE OUTPUT FILE DCB. IT IS ASSUMED TO BE TAPE,
    AND SO HAS BLKL AND RECL SET.
*/
DCL F$TAPE DCB;
DCL F$TAPE$ PTR;
%FPT_OPEN (FPTN=OPEN_TAPE,DCB=F$TAPE,FUN=CREATE,ORG=FREE);
%FPT_OPEN (FPTN=OPEN_TAPE_IN,FUN=IN,DCB=F$TAPE,ORG=FREE);
%FPT_OPEN (DCB=F$TAPE,ASN=DEVICE,RES='NO',FUN=UPDATE,FPTN=OPEN_TAPE_NO);
%FPT_READ (FPTN=READ_TAPE,DCB=F$TAPE,BUF=TAPE_BFR);
%FPT_WRITE (FPTN=WRITE_TAPE,DCB=F$TAPE,BUF=TAPE_BFR,WAIT=YES);
%FPT_PRECORD (FPTN=PREC_TAPE,DCB=F$TAPE);
%FPT_CVOL (FPTN=CVOL_TAPE,DCB=F$TAPE);
%FPT_CLOSE (FPTN=CLOSE_TAPE,DCB=F$TAPE,DISP=SAVE,NOMARKS=YES);
%FPT_REW (FPTN=REW_TAPE,DCB=F$TAPE);
/*
    M$ME IS THE DCB THRU WHICH COMMANDS ARE READ
*/
DCL M$ME DCB;
DCL M$ME$ PTR;
%FPT_READ (FPTN=READ_SI,DCB=M$ME,BUF=BUF_SI,WAIT=YES);
/*
    M$SI and M$UI are used to read PCL type input files
*/
DCL M$SI DCB;
DCL M$UI DCB;
%FPT_CLOSE (FPTN=FPT_CLSSI,DCB=M$SI);
%FPT_CLOSE (FPTN=FPT_CLSUI,DCB=M$UI);
/*
    M$LO IS THE LISTING OUTPUT DCB.
*/
DCL M$LO DCB;
DCL M$LO$ PTR;
%FPT_WRITE (FPTN=WRITE_LO,DCB=M$LO,BUF=BUF_LO,WAIT=YES);
/*
    M$LP is used to print fiiles to the line printer
*/
DCL M$LP DCB;
%FPT_WRITE (FPTN=WRITE_LP,DCB=M$LP,VFC=YES);
/*
    F$RCVR is used to write the recovery file
*/
DCL F$RCVR DCB;
%FPT_OPEN (FPTN=OPEN_RCVRSET,FUN=CREATE,EXIST=OLDFILE,CTG=YES,ASN=FILE,
           NAME=RCVR_NAME,ORG=CONSEC,DCB=F$RCVR,SETDCB=YES);
%FPT_OPEN (FPTN=OPEN_RCVR,REASSIGN=YES,DCB=F$RCVR,FUN=CREATE,EXIST=OLDFILE);
%FPT_WRITE (FPTN=WRITE_RCVR,BUF=BFR_RCVR,DCB=F$RCVR);
%FPT_PRECORD (FPTN=PREC_RCVR,N=0,DCB=F$RCVR);
%FPT_PFIL (FPTN=PFIL_RCVR,DCB=F$RCVR,BOF=YES);
%FPT_READ  (FPTN=READ_RCVR,BUF=BFR_RCVR,DCB=F$RCVR);
%FPT_TRUNC (FPTN=TRUNC_RCVR,DCB=F$RCVR);
%FPT_PFIL (FPTN=PFIL_RCVR_EOF,DCB=F$RCVR);
%FPT_PRECORD (FPTN=PREC_RCVR_BACK,DCB=F$RCVR,N=-1);
/*
    BUFFERS
*/
DCL LIST_BUF CHAR(80) STATIC;
%VLP_NAME;
/* */
DCL RECORD_BUF CHAR(133) STATIC;
DCL 1 RECORD REDEF RECORD_BUF,
      2 RFU UBIN(2) UNAL,
      2 FCN UBIN(3) UNAL,
      2 COUNT UBIN(4) UNAL,
      2 REST CHAR(132) UNAL;
/**/
DCL 1 BFR_RCVR STATIC,
      2 LIST_REC UBIN INIT(0),
      2 VOL UBIN INIT(1),
      2 TAPE_REC UBIN INIT(0),
      2 TOTPGCNT SBIN INIT(0),
      2 NAME CHAR(31) INIT(' ');
/* */
DCL BUF_SI CHAR(80) STATIC;
DCL WORK_BUF (0:255) STATIC UBIN WORD;
DCL TAPE_BFR(0:2047) UBIN STATIC SYMDEF INIT(0*0);
DCL BFR$ PTR STATIC;
DCL BFRCNT UBIN STATIC;
DCL NRECS UBIN STATIC INIT(30);
DCL RECSIZ UBIN STATIC;
DCL BLOCKNUM SBIN STATIC;
DCL BLOCKCHAR CHAR(6) STATIC;
DCL BLOCK# SBIN STATIC;
DCL ERRCNT SBIN STATIC;
/* */
DCL BUF_LO CHAR(80) STATIC;
/**/
DCL 1 PBUF STATIC,
      2 * CHAR(1) INIT(' '),
      2 KEY CHAR(10),
      2 * CHAR(2) INIT(' '),
      2 REC CHAR(511);
DCL PBUFC REDEF PBUF CHAR(524);
DCL 1 LSMSG STATIC,
      2 * CHAR(1) INIT(' '),
      2 PG CHAR(4),
      2 * CHAR(8) INIT(' pages, '),
      2 BLK CHAR(4),
      2 * CHAR(9) INIT(' blocks  ');
DCL LSMSGC REDEF LSMSG CHAR(26);
DCL NOFILEMSG STATIC CHAR(26) INIT(' **** No such file  ****  ');
/**/
%VLP_NAME (FPTN=RCVR_NAME,NAME='$$FICHER_RCVR');
/* */
DCL FICH_CMND UBIN(36) SYMREF;
%PARSE$OUT (STCLASS="BASED");
%PARSE$SYM (STCLASS="BASED");
%P_PCB (NAME=COMMANDS,R=FICH_CMND,W=WORK_BUF,WSZ=256,T=BUF_SI,OUTDCB=M$DO);
/* */
%FPT_OPEN (FPTN=FPT_OPNSET,SETDCB=YES,ASN=FILE,FUN=IN,NAME=VLP_NAME);
%FPT_EXIT (FPTN=EXIT_OK,STEPCC=0);
%FPT_XXX (FPTN=EXIT_XXX);
%FPT_PROMPT (PROMPT=PROMPT_STR,DCB=M$UC,VFC=NO);
%FPT_PROMPT (FPTN=FPT_PROMPTLIST,PROMPT=PROMPT_LIST,DCB=M$UC,VFC=NO);
%FPT_PROMPT (FPTN=FPT_PROMPTNAME,PROMPT=PROMPT_NAME,DCB=M$UC,VFC=NO);
DCL PROMPT_STR CONSTANT CHAR(4) INIT('OPT:');
DCL PROMPT_LIST CHAR(0) CONSTANT INIT('LIST_FILE:');
DCL PROMPT_NAME CONSTANT CHAR(0) INIT('Name:');
%FPT_TIME (SOURCE=CLOCK,DEST=EXT,DATE=START.CDATE,TIME=START.CTIME);
DCL 1 START STATIC,
      2 CDATE CHAR(10) UNAL,
      2 CTIME CHAR(11) UNAL;
/* */
DCL ERR_CODE BIT(36) STATIC;
%FPT_ERRMSG(FPTN=SYS_ERR,CODE=ERR_CODE,BUF=WORK_BUF,OUTDCB1=M$DO,
            OUTDCB2=M$LO,RESULTS=VLR_ERRMSG);
%VLR_ERRMSG;
DCL WIDTH SBIN STATIC INIT(133);
DCL LENGTH SBIN STATIC INIT(63);
DCL FNAMELOC UBIN STATIC INIT(103);
DCL PAGELOC UBIN STATIC INIT(122);
DCL FORMATS CONSTANT CHAR(0) INIT('CPV CP6 PCL ');
DCL BLNK CHAR(1) CONSTANT INIT(' ');
%SUB CP6@=1;
%SUB CPV@=0;
%SUB PCL@=2;
DCL CURRENT_TYPE SBIN;
DCL CURRENT_FORMAT SBIN;
DCL TYPE_COUNT SBIN STATIC INIT(0);
%EQU TYPE_SIZ=19;
DCL 1 TYPE (0:%TYPE_SIZ) STATIC,
      2 TEXT CHAR(28) UNAL INIT(' '*0),
      2 DATE UBIN INIT(0*0),
      2 TIME UBIN INIT(0*0),
      2 PAGE UBIN INIT(0*0),
      2 MOVE_LEN UBIN INIT(0*0),
      2 MOVE_FROM UBIN INIT(0*0),
      2 MOVE_TO UBIN INIT(0*0),
      2 STR_COLUMN UBIN INIT(0*0),
      2 STR_LEN UBIN INIT(0*0),
      2 STR_TXT CHAR(132) UNAL INIT(' '*0);
/* */
DCL PAGES CHAR(9) STATIC INIT('PAGE     ');
DCL 1 PAGE REDEF PAGES,
      2 * CHAR(5) UNAL,
      2 PAGENUM CHAR(4) UNAL;
DCL MICROPS(0:3) CONSTANT BIT(9) INIT(
        %MVC5,%MVZB3,%SES10,%MVC1);
DCL LASTNAME CHAR(0) CONSTANT INIT(' **END**');
/**/
DCL 1 TXTVOL STATIC,
      2 * CHAR(8),
      2 TXT CHAR(6),
      2 VOL CHAR(2);
DCL TXTVOLC REDEF TXTVOL CHAR(16);
DCL VOL SBIN STATIC;
DCL THISVOL SBIN STATIC;
DCL TAPEREC SBIN STATIC;
DCL RESTART CHAR(31) STATIC;
DCL FILECNT SBIN STATIC;
DCL RECCNT SBIN STATIC;
DCL VFC CHAR(1) STATIC;
DCL PREVVFC CHAR(1) STATIC;
DCL PRINTFLAG BIT(1) STATIC;
DCL REPORT BIT(1) STATIC;
DCL CHECK BIT(1) STATIC;
/* */
DCL HEADER CHAR(133) STATIC INIT(' ');
DCL OLDHEADER CHAR(133) STATIC INIT(' ');
DCL LINES SBIN STATIC INIT(0);
DCL PAGENUM SBIN STATIC INIT(0);
DCL I SBIN;
DCL J SBIN;
DCL K SBIN;
DCL PTR$ PTR;
DCL CHAR4 CHAR(4);
DCL CHARS CHAR(WIDTH) BASED;
/* */
        M$ME$ = DCBADDR(DCBNUM(M$ME));
        M$LO$ = DCBADDR(DCBNUM(M$LO));
        F$FILE$ = DCBADDR(DCBNUM(F$FILE));
        F$TAPE$ = DCBADDR(DCBNUM(F$TAPE));
        F$LIST$ = DCBADDR(DCBNUM(F$LIST));
        RESTART=' ';
        PRINTFLAG='0'B;
        REPORT='0'B;
        CHECK='0'B;
        ERRCNT=0;
        CALL M$PROMPT (FPT_PROMPT);
        CALL M$TIME (FPT_TIME);
        DO WHILE('1'B);
           CALL M$READ(READ_SI) ALTRET(READ_SI_ERR);
           COMMANDS.NCHARS=M$ME$->F$DCB.ARS#;
           IF NOT M$ME$->F$DCB.DDEV.IC# THEN DO;
              CALL CONCAT(BUF_LO,PROMPT_STR,SUBSTR(BUF_SI,0,COMMANDS.NCHARS));
              CALL M$WRITE(WRITE_LO);
              END;
           CALL X$PARSE(COMMANDS) ALTRET(BAD_PARSE);
           DO CASE(COMMANDS.OUT$->OUT$BLK.CODE);
            CASE(FNAM_CMND#);
              PTR$=COMMANDS.OUT$->OUT$BLK.SUBLK$(0);
              CALL CHARBIN(FNAMELOC,PTR$->OUT$SYM.TEXT);
            CASE(RESTART_CMND#);
              RESTART=COMMANDS.OUT$->OUT$BLK.SUBLK$(0)->OUT$SYM.TEXT;
            CASE(PLAT_CMND#);
              DO I = 1 TO COMMANDS.OUT$->OUT$BLK.NSUBLKS;
                 PTR$ = COMMANDS.OUT$->OUT$BLK.SUBLK$(I-1);
                 CALL CHARBIN(J,PTR$->OUT$BLK.SUBLK$(0)->
                   OUT$SYM.TEXT);
                 IF PTR$->OUT$BLK.CODE = WID_OPT# THEN
                    WIDTH=J;
                 ELSE
                    LENGTH=J;
                 END;
            CASE(HEAD_CMND#);
              PTR$ = COMMANDS.OUT$->OUT$BLK.SUBLK$(0);
              I=0;
              K = TYPE_COUNT;
              DO WHILE(I<TYPE_COUNT);
                 IF TYPE.TEXT(I) = PTR$->OUT$SYM.TEXT THEN DO;
                    K = I;
                    I = TYPE_COUNT;
                    END;
                 ELSE DO;
                    I=I+1;
                    END;
                 END;
              IF K = TYPE_COUNT THEN
                 TYPE_COUNT = TYPE_COUNT + 1;
              CALL INSERT(TYPE.TEXT(K),0,12,
                PTR$->OUT$SYM.TEXT);
              DO I= 2  TO  COMMANDS.OUT$->OUT$BLK.NSUBLKS;
                 PTR$ = COMMANDS.OUT$->OUT$BLK.SUBLK$(I-1);
                 IF PTR$->OUT$BLK.CODE ~= STRG_OPT# THEN
                    CALL CHARBIN(J,PTR$->OUT$BLK.SUBLK$(0)->OUT$SYM.TEXT);
                 ELSE
                    CALL CHARBIN(J,PTR$->OUT$BLK.SUBLK$(1)->OUT$SYM.TEXT);
                 DO CASE(PTR$->OUT$BLK.CODE);
                  CASE(DATE_OPT#);
                    TYPE.DATE(K) = J;
                  CASE(TIME_OPT#);
                    TYPE.TIME(K) = J;
                  CASE(PAGE_OPT#);
                    TYPE.PAGE(K) = J;
                    PAGELOC = J;
                  CASE(MOVE_OPT#);
                    TYPE.MOVE_LEN(K)=J;
                    CALL CHARBIN(TYPE.MOVE_FROM(K),
                      PTR$->OUT$BLK.SUBLK$(1)->OUT$SYM.TEXT);
                    CALL CHARBIN(TYPE.MOVE_TO(K),
                      PTR$->OUT$BLK.SUBLK$(2)->OUT$SYM.TEXT);
                  CASE(STRG_OPT#);
                    TYPE.STR_COLUMN(K) = J;
                    TYPE.STR_LEN (K) = PTR$->OUT$BLK.SUBLK$(0)->
                      OUT$SYM.COUNT;
                    TYPE.STR_TXT (K) = PTR$->OUT$BLK.SUBLK$(0)->
                      OUT$SYM.TEXT;
                  CASE(ELSE);
                  END;                  /* TYPE DO CASE                       */
                 END;                   /* DO I END                           */
            CASE(GO_CMND#,CHECK_CMND#);
              IF COMMANDS.OUT$->OUT$BLK.CODE=CHECK_CMND# THEN
                 CHECK='1'B;
              DO WHILE('0'B);
READ_SI_ERR:
                 IF B$TCB$->B$TCB.ALT$->B$EXCFR.ERR.CODE ~= %E$EOF THEN DO;
                    ERR_CODE = B$TCB$->B$TCB.ALT$->B$EXCFR.ERR;
                    BUF_LO = ' **** Error reading commands';
                    CALL M$WRITE (WRITE_LO);
                    SYS_ERR.V.DCB#=DCBNUM(M$ME);
                    CALL M$ERRMSG(SYS_ERR);
                    CALL M$XXX (EXIT_XXX);
                    END;
                 END;
              CALL DOIT ALTRET(ABRT);
              CALL M$EXIT (EXIT_OK);
            CASE(LIST_CMND#,PRINT_CMND#);
              IF COMMANDS.OUT$->OUT$BLK.CODE=PRINT_CMND# THEN
                 PRINTFLAG='1'B;
              CALL LIST ALTRET(ABRT);
              CALL M$EXIT (EXIT_OK);
            CASE(REPORT_CMND#);
              REPORT='1'B;
            CASE(NULL_CMND#);
            CASE(ELSE);
BAD_PARSE:
              IF COMMANDS.ERROR.CODE=%E$SYNERR THEN DO;
                 CALL INDEX1(I,'?',SUBSTR(BUF_SI,0,COMMANDS.NCHARS)) ALTRET(NOHELP);
                 COMMANDS.NXT='1'B;
                 CALL X$PARSE(COMMANDS);
                 COMMANDS.NXT='0'B;
                 END;
              ELSE DO;
NOHELP:          ;
                 BUF_LO=' ';
                 CALL INSERT(BUF_LO,COMMANDS.HI_CHAR+SIZEC(PROMPT_STR),1,'^');
                 CALL M$WRITE(WRITE_LO);
                 ERR_CODE=COMMANDS.ERROR;
                 SYS_ERR.V.DCB#=0;
                 CALL M$ERRMSG(SYS_ERR);
                 END;
              IF B$JIT$->B$JIT.MODE ~= %M_INT# OR NOT M$ME$->F$DCB.DDEV.IC# THEN
                 CALL M$XXX (EXIT_XXX);
            END;                        /* END PARSE DO CASE                  */
           END;                         /* END READ SI LOOP                   */
/**/
ABRT:   ;
        BUF_LO=' **** Processing aborted ****';
        CALL M$WRITE(WRITE_LO);
        CALL M$XXX;
%EJECT;
DOIT:   PROC ALTRET;
        CALL M$PROMPT(FPT_PROMPTLIST);
        VOL=-1;
        BFR$=ADDR(TAPE_BFR);
        BFRCNT=0;
        TAPEREC=0;
        FILECNT=0;
        CALL M$OPEN (OPEN_RCVRSET);
        CALL M$OPEN (OPEN_RCVR) ALTRET(RCVR_ERR);
        CALL M$PFIL (PFIL_RCVR) ALTRET(RCVR_ERR);
        IF RESTART~=' ' THEN DO;
           OPEN_TAPE.V.FUN#=%UPDATE#;
           IF RESTART='LAST' THEN DO;   /* Restart with last file             */
              CALL M$PFIL(PFIL_RCVR_EOF) ALTRET(RCVR_ERR);
              CALL M$PRECORD(PREC_RCVR_BACK) ALTRET(RCVR_ERR);
              END;
RDRCVR:    CALL M$READ (READ_RCVR) ALTRET(RCVR_ERR);
           IF RESTART~=BFR_RCVR.NAME AND RESTART~='LAST' THEN
              GOTO RDRCVR;
RCVR_OK5:  ;
           CALL CONCAT(BUF_LO,' Restarting with ',BFR_RCVR.NAME);
           CALL M$WRITE(WRITE_LO);
           CALL M$PRECORD (PREC_RCVR);
           END;
RCVR_OK: OPEN_TAPE.V.VOL#=BFR_RCVR.VOL;
        IF NOT CHECK THEN DO;
           CALL M$OPEN (OPEN_TAPE) ALTRET(TAPE_ERR);
           CALL M$REW(REW_TAPE) ALTRET(TAPE_ERR);
           IF BFR_RCVR.TAPE_REC~=0 THEN DO;
              PREC_TAPE.V.N#=BFR_RCVR.TAPE_REC;
              CALL M$PRECORD (PREC_TAPE) ALTRET(TAPE_ERR);
              END;
           END;
        ELSE
           CALL M$OPEN (OPEN_TAPE_NO);
        PREC_LIST.V.N#=BFR_RCVR.LIST_REC;
        CALL M$PRECORD (PREC_LIST) ALTRET(READ_LIST_ERR);
        DO WHILE('1'B);
NXTFILE:   LIST_BUF = ' ';
           CALL M$READ (READ_LIST) ALTRET(READ_LIST_ERR);
           I = F$LIST$->F$DCB.ARS#;
           CALL INDEX1(J,',',SUBSTR(LIST_BUF,0,I));
           VLP_NAME.NAME# = SUBSTR(LIST_BUF,0,J);
           VLP_NAME.L# = J;
           CALL INDEX1 (K,',',SUBSTR(LIST_BUF,J+1,I-J-1));
           I=0;
           DO WHILE(I<TYPE_COUNT);
              IF TYPE.TEXT(I) = SUBSTR(LIST_BUF,J+1,K) THEN DO;
                 CURRENT_TYPE=I;
                 I = TYPE_COUNT;
                 GOTO GOTTYPE;
                 END;
              ELSE
                 I = I+1;
              END;
           CALL CONCAT(BUF_LO,' Unknown header-type: ',
             SUBSTR(LIST_BUF,J+1,K));
           CALL M$WRITE(WRITE_LO);
           GOTO NXTFILE;
/**/
GOTTYPE:   K = K + J + 2;
           CALL INDEX(J,SUBSTR(LIST_BUF,K,4),FORMATS);
           IF J>=16 THEN DO;
              CALL CONCAT(BUF_LO,' Unknown vfc-type: ',
                SUBSTR(LIST_BUF,K,4));
              CALL M$WRITE(WRITE_LO);
              GOTO NXTFILE;
              END;
           CURRENT_FORMAT = J / 4;
           RECORD_BUF = ' ';
           HEADER=' '; OLDHEADER='11';
           PAGENUM=0; BLOCK#=0;
           LINES=LENGTH;
           I=132;
           CALL CONSTRUCT_HEADER;
           PREVVFC='A';
           IF CURRENT_FORMAT~=PCL@ THEN
              CALL M$OPEN (OPEN_FILE) ALTRET(OPEN_FILE_ERR);
           ELSE DO;
              XUU_PARAM.FLAGS='0'B;
              XUU_PARAM.FLAGS.BASE#='1'B;
              XUU_PARAM.FLAGS.UP_DATE#='1'B;
              FPT_OPNSET.V.DCB#=DCBNUM(M$SI);
              CALL M$OPEN(FPT_OPNSET);
              FPT_OPNSET.V.DCB#=DCBNUM(M$UI);
              CALL M$OPEN(FPT_OPNSET);
              CALL XUU$OPEN(XUU_PARAM) ALTRET(XUUERR);
              END;
OPNOK:     ; IF VLP_NAME.L# > 17 THEN
              VLP_NAME.L# = 17; /* Probably cause the restriction on
                                    ANS names is 17 */
           THISVOL=F$TAPE$->F$DCB.VOL#;
           RECCNT=0;
           IF CHECK THEN
              GOTO RDEOF;
READ_LOOP: DO WHILE('1'B);
              IF CURRENT_FORMAT=PCL@ THEN DO;
XUULOOP:         CALL XUU$READ(XUU_PARAM,VECTOR(PBUF.REC)) ALTRET(XUURDERR);
                 I=XUU_PARAM.ARS;
                 IF I>133 THEN
                    I=133;
                 PBUF.KEY=XUU_PARAM.ASCII_KEY;
                 RECORD_BUF=PBUFC;
                 I=SIZEC(PBUF)-SIZEC(PBUF.REC)+I;
                 CALL WRITER ALTRET(TAPE_ERR);
                 GOTO XUULOOP;
                 END;
              CALL M$READ (READ_FILE) ALTRET(READ_FILE_ERR);
READ_OK:      I = F$FILE$->F$DCB.ARS#;
              IF I > 133 THEN I = 133;
              RECSIZ=I;
              RECCNT=RECCNT+1;
              IF RECCNT=1 THEN
                 IF I>=9 AND SUBSTR(RECORD_BUF,0,9)='AVERSION ' THEN
                    GOTO READ_LOOP;
              VFC=SUBSTR(RECORD_BUF,0,1);
              DO CASE(CURRENT_FORMAT);
               CASE(CP6@);
                 IF NOT F$FILE$->F$DCB.DVBYTE.VFC# THEN DO;
                    CALL WRITERNV ALTRET(TAPE_ERR);
                    END;
                 ELSE
                 DO CASE(RECORD.FCN);
                  CASE(3);
                    IF I<=1 OR SUBSTR(RECORD.REST,0,I)=' ' THEN
                       GOTO END_LOOP;
                    CALL INSERT(RECORD_BUF,0,1,' ');
                    CALL WRITER ALTRET(TAPE_ERR);
                  CASE(6);
                    K=RECORD.COUNT;
                    IF K=0 THEN         /* Overstrike                         */
                       IF PREVVFC>='`' AND PREVVFC<='o' THEN
                          GOTO END_LOOP;
                    IF K>2 THEN
                       K=2;
                    CALL INSERT(RECORD_BUF,0,1,' ');
                    I=0;
                    IF PREVVFC<'!' OR PREVVFC>'o' THEN DO;
                       DO J = 1 TO K;
                          CALL WRITER ALTRET(TAPE_ERR);
                          END;
                       END;
                    I=RECSIZ;
                    CALL WRITER ALTRET(TAPE_ERR);
                  CASE(4,5);
                    IF TYPE.TEXT(CURRENT_TYPE)='PL1' THEN DO;
                       CALL INDEX(J,'CP6-PL/1',SUBSTR(RECORD_BUF,0,I));
                       IF J<I THEN
                          GOTO READ_LOOP;
                       END;
                    K=RECORD.COUNT - 1;
                    IF K>1 THEN
                       K=1;
                    CALL INSERT(RECORD_BUF,0,1,' ');
                    CALL WRITER ALTRET(TAPE_ERR);
                    I=0;
                    DO J = 1 TO K;
                       CALL WRITER ALTRET(TAPE_ERR);
                       END;
                  CASE(7);
                    CALL CONSTRUCT_HEADER;
                  CASE(1);
                    LINES=LENGTH;       /* Force page break                   */
                  END;                  /* DO CASE                            */
               CASE(CPV@);
                 IF '1'=SUBSTR(RECORD_BUF,0,1) THEN
                    CALL CONSTRUCT_HEADER;
                 ELSE DO;
                    CALL INSERT(RECORD_BUF,0,1,' ');
                    CALL WRITER ALTRET(TAPE_ERR);
                    END;
               CASE(ELSE);
                 CALL INSERT(RECORD_BUF,0,1,' ');
                 CALL WRITER ALTRET(TAPE_ERR);
               END;                     /* END DO CASE TYPE                   */
END_LOOP:     PREVVFC=VFC;
              END READ_LOOP;
READ_FILE_ERR:
           IF B$TCB$->B$TCB.ALT$->B$EXCFR.ERR.CODE = %E$LD THEN
              GOTO READ_OK;
           IF B$TCB$->B$TCB.ALT$->B$EXCFR.ERR.CODE = %E$EOF THEN
RDEOF:        ERR_CODE='0'B;
           ELSE DO;
              ERR_CODE = B$TCB$->B$TCB.ALT$->B$EXCFR.ERR;
              SYS_ERR.V.DCB#=DCBNUM(F$FILE);
              CALL CONCAT(BUF_LO,' **** Error reading file: ',
                SUBSTR(VLP_NAME.NAME#,0,VLP_NAME.L#));
              CALL M$WRITE(WRITE_LO);
              CALL M$ERRMSG(SYS_ERR);
              END;
           CALL M$CLOSE(CLOSE_FILE);
           BFR_RCVR.VOL=F$TAPE$->F$DCB.VOL#;
           BFR_RCVR.TAPE_REC=TAPEREC+1;
           BFR_RCVR.NAME=VLP_NAME.NAME#;
           CALL TRUNCTAPE ALTRET(TAPE_ERR);
           BFR_RCVR.LIST_REC=BFR_RCVR.LIST_REC+1;
           CALL M$WRITE (WRITE_RCVR) ALTRET(RCVR_ERR);
           CALL M$TRUNC (TRUNC_RCVR) ALTRET(RCVR_ERR);
           CALL M$CLOSE(FPT_CLSSI);
           CALL M$CLOSE(FPT_CLSUI);
           FILECNT=FILECNT+1;
           IF NOT ERR_CODE THEN DO;
              TXTVOLC=' ';
              IF THISVOL~=VOL THEN DO;
                 TXTVOL.TXT='  VOL=';
                 CALL BINCHAR(TXTVOL.VOL,THISVOL);
                 VOL=THISVOL;
                 END;
              IF REPORT AND NOT CHECK THEN DO;
                 CALL BINCHAR(LSMSG.BLK,BLOCK#);
                 LSMSG.PG=PAGE.PAGENUM;
                 CALL CONCAT(BUF_LO,LSMSGC,
                   SUBSTR(VLP_NAME.NAME#,0,VLP_NAME.L#),TXTVOLC);
                 CALL M$WRITE(WRITE_LO);
                 END;
              ELSE
                 IF TXTVOLC~=' ' THEN DO;
                    BUF_LO=TXTVOLC;
                    CALL M$WRITE(WRITE_LO);
                    END;
              END;
           DO WHILE('0'B);
OPEN_FILE_ERR:
              IF B$TCB$->B$TCB.ALT$->B$EXCFR.ERR.CODE=%E$NOFILE THEN DO;
                 CALL CONCAT(BUF_LO,NOFILEMSG,
                   SUBSTR(VLP_NAME.NAME#,0,VLP_NAME.L#));
                 CALL M$WRITE(WRITE_LO);
                 END;
              ELSE DO;
                 ERR_CODE = B$TCB$->B$TCB.ALT$->B$EXCFR.ERR;
                 CALL CONCAT(BUF_LO,' **** Error opening file: ',SUBSTR(VLP_NAME.NAME#,
                   0,VLP_NAME.L#));
                 CALL M$WRITE (WRITE_LO);
                 SYS_ERR.V.DCB#=DCBNUM(F$FILE);
                 CALL M$ERRMSG(SYS_ERR);
                 END;
              IF F$FILE$->F$DCB.FCD# THEN
                 CALL M$CLOSE(CLOSE_FILE);
              END;
           END;                         /* FILE_LIST LOOP                     */
READ_LIST_ERR:
        IF B$TCB$->B$TCB.ALT$->B$EXCFR.ERR.CODE = %E$EOF THEN DO;
           IF CHECK THEN
              RETURN;
           CALL TRUNCTAPE ALTRET(TAPE_ERR);
           RECORD_BUF=' ';
           I=74;
           OLDHEADER='11';
           VLP_NAME.NAME#=LASTNAME;
           CALL CONSTRUCT_HEADER;
           PAGENUM=0;
           RECORD_BUF=' ';
           CALL WRITER ALTRET(TAPE_ERR);
           CALL TRUNCTAPE ALTRET(TAPE_ERR);
           CALL STATS(BFR_RCVR.TOTPGCNT,FILECNT,ERRCNT);
           IF F$TAPE$->F$DCB.FUN# = %IN#
           THEN
              CLOSE_TAPE.V.NOMARKS# = '1'B;
           ELSE
              CLOSE_TAPE.V.NOMARKS# = '0'B;
           CALL M$CLOSE (CLOSE_TAPE);
           RETURN;
           END;
        ELSE DO;
           ERR_CODE = B$TCB$->B$TCB.ALT$->B$EXCFR.ERR;
           BUF_LO = ' **** Error reading list file:';
           CALL M$WRITE (WRITE_LO);
           SYS_ERR.V.DCB#=DCBNUM(F$LIST);
           CALL M$ERRMSG(SYS_ERR);
           ALTRETURN;
           END;
/**/
RCVR_ERR:
        IF B$TCB$->B$TCB.ALT$->B$EXCFR.ERR.CODE=%E$EOF THEN DO;
           IF BFR_RCVR.NAME=RESTART THEN
              GOTO RCVR_OK;
           IF RESTART='LAST' AND BFR_RCVR.NAME~=' ' THEN
              GOTO RCVR_OK5;            /* Restart with last file             */
           BUF_LO = ' **** Restart file does not contains specified name';
           CALL M$WRITE(WRITE_LO);
           ALTRETURN;
           END;
        BUF_LO = ' **** Error reading recovery file';
        ERR_CODE = B$TCB$->B$TCB.ALT$->B$EXCFR.ERR;
        CALL M$WRITE (WRITE_LO);
        SYS_ERR.V.DCB#=DCBNUM(F$RCVR);
        CALL M$ERRMSG(SYS_ERR);
        ALTRETURN;
/**/
XUUERR: IF XUU_PARAM.UI_ERRCODE.ERR#=%E$NOFILE THEN
           GOTO OPNOK;
XUUERR5: ERR_CODE=XUU_PARAM.ERRCODE;
        IF XUU_PARAM.FLAGS.BASE# THEN
           SYS_ERR.V.DCB#=DCBNUM(M$SI);
        ELSE
           SYS_ERR.V.DCB#=DCBNUM(M$UI);
        CALL M$ERRMSG(SYS_ERR);
        CALL M$CLOSE(FPT_CLSSI);
        CALL M$CLOSE(FPT_CLSUI);
        GOTO NXTFILE;
/**/
XUURDERR: ;
        IF XUU_PARAM.ERRCODE.ERR#=%E$EOF THEN
           GOTO RDEOF;
        GOTO XUUERR5;
%EJECT;
CONSTRUCT_HEADER: PROC;
/**/
DCL N UBIN;
/**/
        N=I-1;
        IF N>74 THEN
           N=74;
        IF SUBSTR(RECORD_BUF,1,N)=SUBSTR(OLDHEADER,1,74) THEN
           GOTO DONE;
        LINES=LENGTH;                   /* Force write of header next time    */
        CALL INSERT(HEADER,0,133,SUBSTR(RECORD_BUF,0,I));
        OLDHEADER=HEADER;
        CALL INSERT(HEADER,0,1,'1');
        IF TYPE.MOVE_LEN(CURRENT_TYPE)~=0 THEN
           CALL INSERT(HEADER,TYPE.MOVE_TO(CURRENT_TYPE),
             TYPE.MOVE_LEN(CURRENT_TYPE),
             SUBSTR(RECORD_BUF,TYPE.MOVE_FROM(CURRENT_TYPE),
             TYPE.MOVE_LEN(CURRENT_TYPE)));
        IF TYPE.STR_COLUMN(CURRENT_TYPE)~=0
        THEN CALL INSERT(HEADER,TYPE.STR_COLUMN(CURRENT_TYPE),
             TYPE.STR_LEN(CURRENT_TYPE),TYPE.STR_TXT(CURRENT_TYPE));
        IF TYPE.DATE(CURRENT_TYPE)~=0
        THEN CALL INSERT(HEADER,TYPE.DATE(CURRENT_TYPE),10,START.CDATE);
        IF TYPE.TIME(CURRENT_TYPE)~=0
        THEN CALL INSERT(HEADER,TYPE.TIME(CURRENT_TYPE),11,START.CTIME);
        CALL INSERT(HEADER,FNAMELOC-6,17+6,
          ' FILE=',VLP_NAME.NAME#);
DONE:   RETURN;
END CONSTRUCT_HEADER;
%EJECT;
WRITER: PROC ALTRET;
/**/
DCL J UBIN;
DCL ENTFLG UBIN;
/**/
        ENTFLG=0;
        GOTO COMM;
/**/
WRITERNV: ENTRY ALTRET;
/**/
        ENTFLG=1;
/**/
COMM:   IF LINES >= LENGTH THEN DO;
           PAGENUM = PAGENUM+1;
           IF TYPE.PAGE(CURRENT_TYPE)~=0 THEN
              J=TYPE.PAGE(CURRENT_TYPE);
           ELSE
              J=PAGELOC;
           CALL BINCHAR(PAGE.PAGENUM,PAGENUM);
           CALL EDITSTR(HEADER,J,9,MICROPS,PAGES);
           CALL MOVE(HEADER,133) ALTRET(WRITE_TAPE_ERR);
           CALL MOVE(BLNK,1) ALTRET(WRITE_TAPE_ERR);
           LINES=2;
           BFR_RCVR.TOTPGCNT=BFR_RCVR.TOTPGCNT+1;
           END;
        LINES=LINES+1;
        IF ENTFLG=0 THEN
           CALL MOVE(RECORD_BUF,I) ALTRET(WRITE_TAPE_ERR);
        ELSE
           CALL MOVENV(RECORD_BUF,I) ALTRET(WRITE_TAPE_ERR);
        RETURN;
WRITE_TAPE_ERR: ALTRETURN;
END WRITER;
/**/
MOVE:   PROC(BFR,LEN) ALTRET;
DCL BFR CHAR(2048);
DCL LEN UBIN;
/**/
/**/
        BFR$->CHARS=SUBSTR(BFR,0,LEN);
        GOTO COMM;
/**/
MOVENV: ENTRY(BFR,LEN) ALTRET;
/**/
        CALL CONCAT(BFR$->CHARS,' ',SUBSTR(BFR,0,LEN));
/**/
COMM:   BFR$=PINCRC(BFR$,WIDTH);
        BFRCNT=BFRCNT+1;
        IF BFRCNT=NRECS THEN DO;
WRTP:      WRITE_TAPE.BUF_.BOUND=(BFRCNT*WIDTH)-1;
           BFRCNT=0;
           BFR$=ADDR(TAPE_BFR);
           TAPEREC=TAPEREC+1;
           BLOCK#=BLOCK#+1;
           CALL M$WRITE(WRITE_TAPE) ALTRET(ERR);
           END;
        RETURN;
ERR:    IF B$TCB$->B$TCB.ALT$->B$EXCFR.ERR.CODE=%E$EOT THEN DO;
           CALL M$CVOL (CVOL_TAPE) ALTRET(ERR5);
           TAPEREC=0;
           RETURN;
           END;
ERR5:   ALTRETURN;
/**/
TRUNCTAPE: ENTRY ALTRET;
/**/
        IF BFRCNT~=0 THEN
           GOTO WRTP;
        RETURN;
/**/
END MOVE;
/**/
TAPE_ERR: ERR_CODE = B$TCB$->B$TCB.ALT$->B$EXCFR.ERR;
        SYS_ERR.V.DCB#=DCBNUM(F$TAPE);
        CALL M$ERRMSG(SYS_ERR);
        CALL M$XXX (EXIT_XXX);
END DOIT;
%EJECT;
LIST:   PROC ALTRET;
/**/
DCL BFRMAX UBIN STATIC;
DCL ARS SBIN STATIC;
DCL LINECNT SBIN STATIC;
DCL TOTPGCNT SBIN STATIC;
DCL PRINTTHIS BIT(1) STATIC;
DCL NAME CHAR(17) STATIC;
/**/
        CALL M$OPEN (OPEN_TAPE_IN) ALTRET(DONE);
        CALL M$REW(REW_TAPE) ALTRET(DONE);
        RESTART=' ';
        PAGENUM=0;
        BLOCKNUM=0;
        TOTPGCNT=0; FILECNT=0;
        ERRCNT=0;
        VOL=-1;
        BFRCNT=0; BFRMAX=0;
        LINECNT=LENGTH;
        PRINTTHIS='0'B;
        IF PRINTFLAG THEN DO;
           CALL M$PROMPT(FPT_PROMPTNAME);
           CALL GETNAME ALTRET(DONE5);
           END;
/**/
NXTREC: CALL GETREC ALTRET(DONE);
/**/
        IF SUBSTR(BFR$->CHARS,0,1)~='1' THEN DO;
           LINECNT=LINECNT+1;
           IF LINECNT>LENGTH THEN DO;
              CALL BINCHAR(BLOCKCHAR,BLOCKNUM);
              CALL CONCAT(BUF_LO,' **** Too many lines on page, block=',
                BLOCKCHAR);
              CALL M$WRITE (WRITE_LO);
              ERRCNT=ERRCNT+1;
              LINECNT=0;
              END;
           GOTO PRNTREC;
           END;
        LINECNT=1;
        IF SUBSTR(BFR$->CHARS,FNAMELOC,17)~=RESTART THEN DO;
           IF RESTART~=' ' THEN
              CALL PRINT;
           RESTART=SUBSTR(BFR$->CHARS,FNAMELOC,17);
           IF RESTART=LASTNAME THEN
              GOTO DONE3;
           IF PRINTFLAG THEN DO;
              IF PRINTTHIS THEN DO;
                 PRINTTHIS='0'B;
                 CALL GETNAME ALTRET(DONE5);
                 END;
              IF RESTART=NAME THEN
                 PRINTTHIS='1'B;
              END;
           BLOCK#=0;
           PAGENUM=0;
           FILECNT=FILECNT+1;
           END;
        TOTPGCNT=TOTPGCNT+1;
        PAGENUM=PAGENUM+1;
        CALL CHARBIN(J,SUBSTR(BFR$->CHARS,PAGELOC+5,4));
        IF J=PAGENUM THEN
           GOTO PRNTREC;
        CALL BINCHAR(BLOCKCHAR,BLOCKNUM);
        IF J>PAGENUM THEN
           CALL CONCAT(BUF_LO,' **** Missing pages, block=',BLOCKCHAR);
        ELSE
           CALL CONCAT(BUF_LO,' **** Duplicate pages, block=',BLOCKCHAR);
        CALL M$WRITE (WRITE_LO);
        ERRCNT=ERRCNT+1;
        PAGENUM=J;
/**/
PRNTREC: ;
        IF PRINTTHIS THEN DO;
           IF SUBSTR(BFR$->CHARS,0,1)='1' THEN
              CALL INSERT(BFR$->CHARS,0,1,'q');
           ELSE
              CALL INSERT(BFR$->CHARS,0,1,'A');
           WRITE_LP.BUF_=VECTOR(BFR$->CHARS);
           CALL M$WRITE(WRITE_LP);
           END;
        GOTO NXTREC;
/**/
DONE:   IF B$TCB$->B$TCB.ALT$->B$EXCFR.ERR.CODE~=%E$VOLOUT AND
          B$TCB$->B$TCB.ALT$->B$EXCFR.ERR.CODE~=%E$CANT THEN DO;
           ERR_CODE=B$TCB$->B$TCB.ALT$->B$EXCFR.ERR;
           SYS_ERR.V.DCB#=DCBNUM(F$TAPE);
           CALL M$ERRMSG (SYS_ERR);
           ALTRETURN;
           END;
        CALL PRINT;
        BUF_LO=' *** Warning - tape not terminated properly';
        CALL M$WRITE(WRITE_LO);
        ERRCNT=ERRCNT+1;
DONE3:  ;
        CALL STATS(TOTPGCNT,FILECNT,ERRCNT);
DONE5:  ;
        CALL M$EXIT (EXIT_OK);
/**/
PRINT:  PROC;
/**/
        IF NOT REPORT THEN
           RETURN;
        CALL BINCHAR(LSMSG.PG,PAGENUM);
        CALL BINCHAR(LSMSG.BLK,BLOCK#);
        CALL CONCAT(BUF_LO,LSMSGC,RESTART);
        CALL M$WRITE (WRITE_LO);
        RETURN;
END PRINT;
/**/
GETNAME: PROC ALTRET;
/**/
        CALL M$READ(READ_SI) ALTRET(SIERR);
        ARS=M$ME$->F$DCB.ARS#;
        IF ARS=0 THEN
           GOTO SIERR;
        NAME=SUBSTR(BUF_SI,0,ARS);
        RETURN;
/**/
SIERR:  ;
        ALTRETURN;
END GETNAME;
/**/
GETREC: PROC ALTRET;
/**/
        IF BFRCNT=BFRMAX THEN DO;
READ_TP:   CALL M$READ (READ_TAPE) ALTRET(READ_ERR);
READ_OK:   BLOCKNUM=BLOCKNUM+1;
           BLOCK#=BLOCK#+1;
           IF VOL~=F$TAPE$->F$DCB.VOL# THEN DO;
              BUF_LO=' ';
              CALL M$WRITE (WRITE_LO);
              VOL=F$TAPE$->F$DCB.VOL#;
              CALL BINCHAR(TXTVOL.VOL,VOL);
              CALL CONCAT(BUF_LO,'  VOL=',TXTVOL.VOL);
              CALL M$WRITE (WRITE_LO);
              END;
           ARS=F$TAPE$->F$DCB.ARS#;
           IF MOD(ARS,WIDTH)~=0 THEN DO;
              CALL BINCHAR(BLOCKCHAR,BLOCKNUM);
              CALL CONCAT(BUF_LO,' **** Tape record wrong size, block=',
                BLOCKCHAR);
              CALL M$WRITE (WRITE_LO);
              ERRCNT=ERRCNT+1;
              END;
           BFRMAX=ARS/WIDTH;
           BFRCNT=1;
           BFR$=ADDR(TAPE_BFR);
           END;
        ELSE DO;
           BFRCNT=BFRCNT+1;
           BFR$=PINCRC(BFR$,WIDTH);
           END;
        RETURN;
READ_ERR:
        K=B$TCB$->B$TCB.ALT$->B$EXCFR.ERR.CODE;
        IF K=%E$EOT THEN
           GOTO READ_OK;
        IF K~=%E$EOF THEN
           GOTO ERR;
        CALL M$CVOL (CVOL_TAPE) ALTRET(ERR);
        BLOCKNUM=0;
        GOTO READ_TP;
ERR:    ALTRETURN;
END GETREC;
END LIST;
/**/
STATS:  PROC(PGCNT,FILECNT,ERRCNT);
/**/
DCL PGCNT UBIN;
DCL FILECNT UBIN;
DCL ERRCNT UBIN;
/**/
        BUF_LO=' ';
        CALL M$WRITE(WRITE_LO);
        CALL BINCHAR(BLOCKCHAR,FILECNT);
        CALL CONCAT(BUF_LO,' ',BLOCKCHAR,' files');
        CALL M$WRITE(WRITE_LO);
/**/
        CALL BINCHAR(BLOCKCHAR,PGCNT);
        CALL CONCAT(BUF_LO,' ',BLOCKCHAR,' fiche frames');
        CALL M$WRITE(WRITE_LO);
/**/
        CALL BINCHAR(BLOCKCHAR,(PGCNT+206)/207);
        CALL CONCAT(BUF_LO,' ',BLOCKCHAR,' fiche cards');
        CALL M$WRITE(WRITE_LO);
/**/
        IF ERRCNT~=0 THEN DO;
           CALL BINCHAR(BLOCKCHAR,ERRCNT);
           CALL CONCAT(BUF_LO,' ',BLOCKCHAR,' errors');
           CALL M$WRITE(WRITE_LO);
           END;
/**/
        BUF_LO='  **DONE**';
        CALL M$WRITE(WRITE_LO);
/**/
        RETURN;
/**/
END STATS;
END FICHER;
