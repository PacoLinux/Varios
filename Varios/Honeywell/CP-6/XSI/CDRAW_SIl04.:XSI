%{
  /*M*    cdraw$lex:l -- lex rules for looking for structs      */
 
#ifdef TS_CP6
#include "CDRAW_Cc07"
#include "CDRAW_Cc06"
#include "CDRAW_Cc08"
#include "CDRAW_Cc09"
#else
#include "cdraw.h"
#include "alloc.h"
#include "struct.h"
#include "sym.h"
#endif
 
#ifdef __STDC__
#include <stdlib.h>
 
#else
  char *realloc();
 
#endif
 
#undef yywrap
 
 
  int   LineNo = 1, TotalLines = 0;
  int   Depth  = 0, SDepth = 0;
  int   Struct = 0;
  int   IdCol = 0, SIdCol = 0;
  int   ForceNL = 0, InComment;
  int   GotName = 0, ItsaPointer = 0, ItsanArray = 0, NextIsTag = 0;
  int   TagNameLen = 0, StructNameLen = 0;
  int   ItsBitf = 0, ItsBitNo = -2, ItsBitPos = 0;
  struct   BF {
     int      ItsBitf; /* Set if its a bit field  */
     int      ItsBitNo;   /* Possible bit number  */
     int      ItsBitPos;  /* start of bit expresion  */
     }  BitField = {0, -2, 0};
 
 
  char  StructName[100], TagName[100];
  char  **StructMembers;  /* Pointers to pointers to names */
  enum  Phase {STRUCT_LOOKING, STRUCT_MAYBE_DEFN, STRUCT_DEFN}
        StructPhase = STRUCT_LOOKING;
  int   UnionFlag  = 0;
 
  struct   lex_stack   {
     struct lex_stack *next;
     int               lx_class;   /* 0=struct, 1=union */
     struct StructSym *lx_struct;
     struct StructTag **lx_tag;
     };
 
  struct   lex_stack  *lex_stack = 0;
  struct   StructSym   *ThisStruct = 0;
  struct   alloc_descriptor alloc_lex_stack =
              INIT_alloc_descriptor(10, struct lex_stack, 1);
 
  struct   alloc_descriptor allocStructSym =
              INIT_alloc_descriptor(25, struct StructSym, 1);
  struct   alloc_descriptor allocStructTag =
              INIT_alloc_descriptor(25, struct StructTag, 1);
 
#define AllocLexStack()   (struct lex_stack *)Allocator(&alloc_lex_stack)
#define AllocStructSym()  (struct StructSym *) Allocator(&allocStructSym)
#define AllocStructTag()  (struct StructTag *) Allocator(&allocStructTag)
#define FreeLexStack(blk) Free(&alloc_lex_stack,blk)
 
  int   NStructs;
 
 
  char  *LineBuf = 0;     /* to hold declaration  */
  char   LineBufSize = 0;
  char   LineBufPos  = 0;
 
  int    ExpandLineBuf ProToType( (int) );
  int    Str2LineBuf ProToType( (char *, int) );
  int    Char2LineBuf ProToType( (int) );
 
  struct HashTable NameHash = HASH_SIZE;
 
  struct StructSym *BuildStructSym ProToType( (char *, int, char *, int) );
  struct StructTag *BuildStructTag ProToType( (char *, int, char *, struct StructSym*,struct BF*,int) );
 
%}
 
%%
\n               LineNo++;
"/*"             {
                    int c = 0;
                    InComment++;
                    do {
                          if (c != '*')
                             while ('*' != MyInput());
                       }  while ('/' != (c = MyInput()));
                    InComment = 0;
                 }
"'"              |
\"               {
                    int ec = yytext[0], pc = 0, c;
 
                    if (ForceNL) DoNewLine();
                    if (Struct) Char2LineBuf(ec);
                    while (ec != (c = MyInput()) || pc == '\\')
                       pc = c;
                 }
^"#"             {
                    int  c, pc;
                    InComment++;
                    while ('\n' != (c = MyInput()) || pc == '\\')
                       pc = c;
                 }
":"           {
                 if (ForceNL) DoNewLine();
                 if (Struct) {
                    BitField.ItsBitf++;
                    BitField.ItsBitNo = -2;
                    Char2LineBuf(':');
                    BitField.ItsBitPos = LineBufPos;
                    GotName++;
                    }
              }
"{"           {  Depth++;
                 if (Struct) SDepth++;
 
                 if (ForceNL) DoNewLine();
                 if (Struct) {
                    Char2LineBuf('{');
                    }
                 if (StructPhase == STRUCT_MAYBE_DEFN)  {
                    if (!StructName[0] && !Struct)  {
                       fprintf(stderr,
                               "Skipping unnamed struct on line %d\n",
                               LineNo);
                       }
                    else if (Depth > 1 && !Struct)  {
                       fprintf(stderr,
                               "Skipping non-global struct %s on line %d\n",
                                StructName, LineNo);
                       }
                    else  {
                       struct lex_stack *stack = AllocLexStack();
                       struct StructSym *ss;
                       stack->next     = lex_stack;
                       stack->lx_class = UnionFlag;
                       stack->lx_tag   = 0;
                       if (lex_stack) lex_stack->lx_tag = StructTagIns;
                       lex_stack       = stack;
                       if (Struct) {
                          ForceNL++;
                          SIdCol = 0;
                          }
                       StructPhase = STRUCT_DEFN;
                       if (!ForceNL)  {
                          Str2LineBuf((UnionFlag? "union  ":"struct "), 7);
                          Str2LineBuf(StructName, strlen(StructName));
                          Str2LineBuf(" {", 2);
                          ForceNL++; SIdCol = 0;
                          }
                       LineBuf[LineBufPos] = 0;
                       lex_stack->lx_struct = BuildStructSym(StructName,
                                                strlen(StructName),
                                                LineBuf, UnionFlag);
                       Struct++, SDepth++;
                       }
                 }
              }
"}"           {  Depth--;
                 if (ForceNL) DoNewLine();
                 if (Struct) {
                    struct lex_stack *p = lex_stack;
                    ThisStruct = lex_stack->lx_struct;
                    lex_stack = p->next;
                    if (lex_stack) StructTagIns = lex_stack->lx_tag;
                    FreeLexStack(p);
                    Char2LineBuf('}');
                    if (!lex_stack) {
                       SDepth = 0;
                       Struct = 0;
                       StructPhase = STRUCT_LOOKING;
                       Str2LineBuf(";\n", 2);
                       DoNewLine();
                    }
                 }
              }
"const"          |
"volatile"       {
                    if (ForceNL) DoNewLine();
                    if (Struct)  Str2LineBuf( yytext, yyleng );
                 }
"union"          |
"struct"         {
                    if (ForceNL) DoNewLine();
                    ThisStruct = 0;
                    if (Struct)
                       Str2LineBuf(yytext, yyleng);
                    StructPhase = STRUCT_MAYBE_DEFN;
                    StructName[0] = 0;
                    UnionFlag = yytext[0] == 'u';
                 }
"*"              |
"["              |
","              |
";"              |
"="              {  int c = yytext[0];
                    if (ForceNL) DoNewLine();
                    if (StructPhase == STRUCT_MAYBE_DEFN)
                       StructPhase = STRUCT_LOOKING;
                    if (Struct) {
                       Char2LineBuf(c);
                       if (c == ';' || c == ',') {
                          ForceNL++;
                          LineBuf[LineBufPos] = 0;
                          if (!BitField.ItsBitf)
                             BitField.ItsBitNo = -1;
                          BuildStructTag(TagName, TagNameLen,
                                   LineBuf,
                                   (ItsaPointer? 0 :ThisStruct),
                                   &BitField,
                                   ItsanArray
                                   );
                          TagName[0] = 0;
                          GotName=ItsaPointer=NextIsTag=SIdCol = 0;
                          ItsanArray = BitField.ItsBitf = 0;
                          if (c == ',')  /* space out */
                             SIdCol = IdCol;
                          else ThisStruct = 0;
                          }     /* end of ',' or ';' */
                       else if ('*' == yytext[0] && !GotName)
                          ItsaPointer++;
                       else if ('[' == yytext[0] && !GotName)
                          GotName++, ItsanArray++;
                       }
                 }
"("              {
                    if (ForceNL) DoNewLine();
                    if (Struct) {
                       NextIsTag++;
                       Char2LineBuf(yytext[0]);
                       }
                 }
" "              |
"\t"             {
                    if (Struct && LineBufPos != 0) {
                       Char2LineBuf(' ');
                       if (yytext[0] == '\t')  {
                          int i = LineBufPos % 3;
                          while (i > 0)
                             Char2LineBuf(' '), i--;
                          }     /* end of if tab  */
                       }        /* end of if outputting */
                 }
[0-9]+           {
                    if (ForceNL)   DoNewLine();
                    if (Struct) {
                       Str2LineBuf(yytext, yyleng);
                     /*if (ItsBitf) ItsBitNo = strtoul(yytext,0,0);*/
                       }
                 }
[a-zA-Z0-9_$]+   {
                    if (StructPhase == STRUCT_MAYBE_DEFN && !StructName[0])  {
                       struct sym_ *sym = lookup_sym(&NameHash, yytext, yyleng, 0);
                       memcpy(StructName, yytext, yyleng+1);
                       StructNameLen = yyleng;
                       if (sym) ThisStruct = sym->sym_user;
                       }
                    if (ForceNL) DoNewLine();
                    if (Struct) {
                       IdCol = LineBufPos;
                       Str2LineBuf(yytext, yyleng);
                       if (!GotName)  {
                          memcpy(TagName, yytext, yyleng+1);
                          TagNameLen = yyleng;
                          if (NextIsTag) GotName++;
                          }
                       }
                 }
.                {
                    if (ForceNL) DoNewLine();
                    if (Struct) Char2LineBuf(yytext[0]);
                 }
%%
 
MyInput()  {
  int c = input();
  if (c == EOF)  {
     fprintf(stderr, "Processing completed (something is wrong)\n");
     exit(4);
     }
  if (Struct && !InComment) {
     if (c != '\n')
        Char2LineBuf(c);
     else DoNewLine();
     }
  if (c == '\n') LineNo++;
  return c;
}
 
 
 
DoNewLine()   {
  Str2LineBuf("\n", 2);
  if (print_all)
     fputs(LineBuf, stdout);
  LineBufPos = 0;
 
  if (SIdCol) {
     while (SIdCol > 0 && !isspace(LineBuf[SIdCol-1])) SIdCol --;
     memset(LineBuf, ' ', SIdCol), LineBufPos = SIdCol;
     }
  ForceNL = 0;
}
 
 
 
/*D* NAME:       yywrap()
     PURPOSE:    To handle switching to other files specified
                 on the command line.
     DESCRIPTION:
        The command line file names are communicated via the
        variables FileNames and FileCount.  When all files have
        been processed, EOF is signaled by returning 1.
*/
 
yywrap()   {
 
  TotalLines += --LineNo;
  fprintf(stderr, "End of file %s on line %d\n",
        CurrentFid, LineNo);
  FileCount--;
  if (FileCount > 0)   {
     int fidlen;
     CurrentFid = *++FileNames;
     fidlen = strlen(CurrentFid);
     maxFid = MAX(maxFid, fidlen);
     if (!freopen(CurrentFid, "r", stdin))
        fatal("Can't open file: %s\n", CurrentFid);
     LineNo     = 1;
     return 0;
     }
  fprintf(stderr, "Total Lines processed = %d\n", TotalLines);
  return 1;
}
 
 
 
Str2LineBuf(text, len)
  char *text;
  int   len;
{
  if ((LineBufPos + len) >= LineBufSize)
     ExpandLineBuf(len);
  memcpy( LineBuf+LineBufPos, text, len);
  LineBufPos += len;
}
 
Char2LineBuf(ch)
  int ch;
{
 
  if ((LineBufPos + 1) >= LineBufSize)
     ExpandLineBuf(1);
  LineBuf[LineBufPos++] = ch;
}
 
ExpandLineBuf(len)
  int   len;
{
  int   i = LineBufSize + 1 + (len > 500) ? len+500 : 500;
  char *b = (char *) (LineBuf) ? realloc(LineBuf, i) : malloc(i);
 
  if (!b)
     fatal("Out of Memory");
 
  LineBufSize = i-1;
  LineBuf     = b;
}
 
 
 
struct StructSym *
BuildStructSym(name, len, dcl, class)
  char *name;
  int   len;
  char *dcl;
  int   class;
{
  int                 dlen = strlen(dcl);
  struct sym_         *sym = lookup_sym(&NameHash, name, len, 2);
  static CONST struct StructSym     constStructSym;
  struct StructSym    *rs = AllocStructSym();
 
  *rs             = constStructSym;
  rs->ss_filename = CurrentFid;
  rs->ss_lineno   = LineNo;
  rs->ss_name     = sym->sym_text;
  rs->ss_nmlen    = len;
  rs->ss_dcl      = AllocString( dlen+1, dcl);
  rs->ss_maxwidth = dlen;
  rs->ss_class    = class;
 
  if (!sym->sym_user)
     sym->sym_user = (struct sym_ *) rs;
  else if (len)
     fprintf(stderr, "*** Multiple definitions of %s %s\n",
                    (class ? "union" : "struct"),       name);
 
  *StructSymIns = rs;
  StructSymIns  = &rs->next;
  StructTagIns  = &rs->ss_tag;
  maxStruct     = MAX(maxStruct, len);
  return rs;
}
 
 
 
struct StructTag *
BuildStructTag(name, len, dcl, tp, bt, arr)
  char             *name;
  int               len;
  char             *dcl;
  struct StructSym *tp;
  struct BF        *bt;
  int               arr;
{
  int              dlen = strlen(dcl);
  struct sym_      *sym = lookup_sym(&NameHash, name, len, 2);
  struct StructTag *rs  = AllocStructTag();
 
  rs->next      = 0;
  rs->sm_struct = lex_stack->lx_struct;
  rs->sm_type   = tp;
  rs->sm_name   = sym->sym_text;
  rs->sm_nmlen  = len;
  rs->sm_bitno  = bt->ItsBitNo;
  rs->sm_bitexp = 0;
  if (bt->ItsBitf)  {  /* save away expression for bit field size */
     int bp = bt->ItsBitPos;
     int chs = dcl[dlen-1];
     dcl[dlen-1] = 0;  /* zap "," or ";" */
     rs->sm_bitexp = AllocString(dlen-bp, dcl+bp);
     dcl[dlen-1] = chs;
     }
  rs->sm_array  = arr;
  rs->sm_dcl    = AllocString( dlen+1, dcl);
  rs->sm_dcllen = dlen;
  rs->sm_lineno = LineNo;
 
  *StructTagIns = rs;
  StructTagIns  = &rs->next;
  maxTag        = MAX(maxTag, len);
  return rs;
}
 
 
 
int
isspace(c)
  int   c;
{
  if (c == ' ' || c == '\t')
     return 1;
  else return 0;
}
