/*M* CP6-LNCOUNT_SI62 - Source # 2.                                 */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* AND  */
/***
***/
/******************************************************************/
/*M*     INITIAL   July 31, 1979       GWJ                        */
/***/
/*P*     NAME: INITIAL
         PURPOSE: INITIAL initializes all DCBS and ASYNC routines
                   and sets the I/O prompt to the ME device.
                                                                  */
INITIAL : PROC;
 
%INCLUDE LNCOUNT_C1;
 
%FPT_INT ( FPTN=BRK_CONTROL, UENTRY=BRKRTN  );
%FPT_XCON (FPTN=EXIT_CONTROL, UENTRY=EXTRTN );
 
DCL BRKRTN ENTRY ASYNC;
DCL EXTRTN ENTRY ASYNC;
 
DCL TELLER ENTRY(1);
 
%FPT_OPEN( FPTN=OPEN_SET,SETDCB=YES,ACS=DIRECT,SCRUB=YES,FUN=UPDATE,
           ASN=DEVICE,RES='ME');
%FPT_OPEN( FPTN=OPEN_MER,REASSIGN=YES,SETDCB=YES);
%FPT_PROMPT( FPTN=PROMP,PROMPT=PIMP.RPROMP,VFC=YES);
DCL 1 PIMP STATIC ALIGNED,
      2 RPROMP,
        3 C1 CHAR(2) INIT('@*') UNAL,
        3 C2 UBIN BYTE INIT(7) UNAL,
      2 * CHAR(1) INIT(' ') UNAL;
 
 
/*******/
        CALL M$INT( BRK_CONTROL );
        CALL M$XCON(EXIT_CONTROL);
        CALL M$PROMPT(PROMP);
        DO I=0 TO 6;
           OPEN_SET.V.DCB# = UNUM#(I);
           OPEN_MER.V.DCB# = UNUM#(I);
           CALL M$OPEN(OPEN_SET);
           CALL M$OPEN(OPEN_MER);
        END;
        CALL TELLER(%HELLO);
        RETURN;
END INITIAL;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/******************************************************************/
/*M*     BRKRTN    July 31, 1979       GWJ                        */
/***/
/*P*     NAME: BRKRTN
         PURPOSE: Control comes here when the user hits the break
                   key.
                                                                  */
BRKRTN : PROC ASYNC;
 
DCL TELLER ENTRY(1);
 
%INCLUDE LNCOUNT_C1;
 
/*******/
 
/***   BRKFLG IS SET TRUE ***/
 
        BRKFLG = '1'B;
        CALL TELLER(%BREAK);
        CALL M$TRTN;
        RETURN;
END BRKRTN;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/******************************************************************/
/*M*     EXTRTN    July 31, 1979       GWJ                        */
/***/
/*P*     NAME: EXTRTN
         PURPOSE: Control comes here when LNCOUNT exits.
                                                                  */
EXTRTN : PROC ASYNC;
 
%INCLUDE LNCOUNT_C1;
 
DCL TELLER ENTRY(1);
DCL ALL_DONE ENTRY;
 
%B$XCON;
%B$ECCB;
 
/*******/
        IF B$TCB$->B$TCB.STK$->B$XCON.RNST ~= '0'B
        THEN DO;
           CALL TELLER(%AB_NORM_EXIT);
        END;
        CALL ALL_DONE;
        CALL M$MERCS;
        RETURN;
END EXTRTN;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*****************************************************************/
/*M*     NXTTKN    July 31, 1979       GWJ                       */
/***/
/*P*     NAME: NXTTKN
         PURPOSE: To get the next token from the input line and
                   evaluate what it is (TOKEN.ID and TOKEN.VAL)
                                                                 */
NXTTKN : PROC;
 
%INCLUDE LNCOUNT_C1;
 
DCL PAR_A(0:1023) UBIN STATIC;
DCL PARSE_PTR$ PTR STATIC;
DCL BLK$ PTR STATIC;
 
DCL COMMANDS UBIN SYMREF;
 
%SET LISTMAC = '1'B;
 
%P_PCB(NAME=PAR_BLK,T=REC_DATA,R=COMMANDS,WSZ=1024,W=PAR_A,CNTU=NO);
 
%SET LISTMAC = '0'B;
 
%PARSE$OUT(NAME=O$BLK);
%PARSE$SYM(NAME=O$SYM);
 
DCL LEVEL_MAX UBIN STATIC;
DCL LEVEL_NUM UBIN STATIC;
 
DCL X$PARSE ENTRY(1) ALTRET;
 
DCL TELLER ENTRY(1);
DCL READ_FILE ENTRY(2) ALTRET;
 
/*******/
        IF RECPOS > RECLEN
        THEN DO;
READ_AGAIN:
           CALL READ_FILE(INUNIT,RECORD) ALTRET(POS_EOF);
           RECNBR = RECNBR + 1;
           RECLEN = DCBADDR(INUNIT)->F$DCB.ARS#;
           IF SCRTYP = BASIC
           THEN DO;
              I = 0; J = -1;
              DO WHILE( J < 0 AND I < RECLEN);
                 IF RECORD(I) ~= ' ' AND (RECORD(I)<'0' OR RECORD(I)>'9')
                 THEN J = I;
                 I = I + 1;
              END;
              K = -1;
              DO I = J TO RECLEN - 1;
                 K = K + 1;
                 RECORD(K) = RECORD(I);
              END;
              RECLEN = K + 1;
           END;
           DO WHILE(RECORD(RECLEN - 1) <= ' ' AND RECLEN > 0);
              RECORD(RECLEN - 1) = ' ';
              RECLEN = RECLEN - 1;
           END;
           IF RECLEN = 0 THEN GOTO READ_AGAIN;
           EORFLG = FALSE;
/* DETERMINE SOURCE TYPE */
           SCRTYP = NONPL6;
           IF RECORD(0) = 'C' OR
             RECORD(0) = '*' OR
             ADDR(RECORD(0))->C4 = '$COM' THEN SCRTYP = NONPL6;
           ELSE IF RECORD(0) = '!' OR
                ADDR(RECORD(0))->C3 = 'REM' THEN SCRTYP = BASIC;
              ELSE DO I = 0 TO RECLEN;
                 IF RECORD(I) = '/' OR RECORD(I) = ';' THEN SCRTYP = PL6;
              END;
           PAR_BLK.NCHARS = RECLEN;
           CALL X$PARSE(PAR_BLK) ALTRET(BAD_COMMAND);
           PARSE_PTR$ = PAR_BLK.OUT$;
           LEVEL_MAX = PARSE_PTR$->O$BLK.NSUBLKS - 1;
           LEVEL_NUM = 0;
           TOKEN.VAL = PARSE_PTR$->O$BLK.CODE;
           TOKEN.ID  = 1;
           TOKEN.CHR = ' ';
           TOKEN.LEN = 0;
           RECPOS    = PARSE_PTR$->O$BLK.CPOS;
           RETURN;
        END;
/***   NOW GET THE NEXT TOKEN FROM THE PARSED LINE ***/
/* IF LEVEL_NUM > LEVEL_MAX THEN SET EORFLG */
        IF LEVEL_NUM > LEVEL_MAX THEN EORFLG = TRUE;
        ELSE DO;
           BLK$ = PARSE_PTR$->O$BLK.SUBLK$(LEVEL_NUM);
           TOKEN.VAL = O$BLK.CODE;
           RECPOS    = O$BLK.CPOS;
           TOKEN.ID  = 1;
           IF TOKEN.VAL >= %ACCT        /* ON MORE LEVEL                      */
           THEN DO;
              BLK$ = O$BLK.SUBLK$(0);   /* ONE MORE LEVEL                     */
              TOKEN.LEN = O$SYM.COUNT;
              TOKEN.CHR = O$SYM.TEXT;
           END;
           ELSE DO;
              TOKEN.LEN = 0;
              TOKEN.CHR = ' ';
           END;
           LEVEL_NUM = LEVEL_NUM + 1;
        END;
        RETURN;
POS_EOF:
        IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE ~= %E$EOF
        THEN CALL TELLER(-1);
        CALL TELLER(-1);
        EOFFLG = TRUE;
        RETURN;
BAD_COMMAND:
/* DETERMINE AND REPORT ERROR */
        TOKEN.CHR = ' ';
        CALL INSERT(TOKEN.CHR,PAR_BLK.HI_CHAR,1,'^');
        TOKEN.LEN = PAR_BLK.HI_CHAR + 1;
        TOKEN.VAL = 0; TOKEN.ID = 0;
        CALL TELLER(%COMMAND_ERROR);
        OK = FALSE;
        RETURN;
END NXTTKN;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/******************************************************************/
/*M*     TELLER    July 31, 1979       GWJ                        */
/***/
/*P*     NAME: TELLER
         PURPOSE: This reports all messages to the terminal using
                   the M$ERRMSG routine or just writing to the
                   LOUNIT (F$103)
                                                                  */
TELLER : PROC (ERROR#);
 
DCL ERROR# SBIN;
 
%INCLUDE LNCOUNT_C1;
DCL TEXT5 CHAR(5);
 
DCL 1 ERRCODE STATIC,
      2 FCG BIT(18) UNAL,
      2 MON BIT(1) UNAL,
      2 ERR# UBIN(14) UNAL,
      2 SEV BIT(3) UNAL INIT('0'B);
 
DCL 1 YOU1 STATIC ALIGNED,
      2 LEN UBIN BYTE UNAL,
      2 DATA CHAR(36) UNAL;
 
DCL 1 YOU2 STATIC ALIGNED,
      2 LEN UBIN BYTE UNAL,
      2 DATA CHAR(27) UNAL;
 
DCL 1 YOU3 STATIC ALIGNED,
      2 LEN UBIN BYTE UNAL,
      2 DATA CHAR(27) UNAL;
 
%FPT_WRITE(FPTN=WR_LO,VFC=YES);
%FPT_ERRMSG(FPTN=WR_ER,BUF=OUT_BUFFER,CODE=ERRCODE,VFC='A',
                   INCLCODE=NO,OUTDCB1=M$DO,SUBMESS=YES,
                   FILENAME=ERR_FILE,FILEACCT=ERR_ACCT,
                   FIELD1=YOU1,FIELD2=YOU2,FIELD3=YOU3);
 
DCL M$DO DCB;
 
%VLP_NAME(FPTN=ERR_FILE,NAME='LNCOUNT_ERM');
%VLP_ACCT(FPTN=ERR_ACCT,ACCT='X       ');
 
DCL CHANG ENTRY(3);
 
DCL B2 BIT(2) BASED UNAL;
/*******/
 
        IF ERROR# < 0
        THEN DO;
           IF ERROR# = -1 THEN ERRCODE = B$TCB$->B$TCB.ALT$->B$ALT.ERR;
           ELSE ERRCODE = XUDATA.ERRCODE;
           WR_ER.V.FLAGLEV# = 4; ERRCODE.SEV = '0'B;
           WR_ER.V.DCB# = INUNIT; WR_ER.V.SUBMESS# = %YES#;
           CALL M$ERRMSG(WR_ER);
        END;
        IF ERROR# > 0
        THEN DO;
           ERRCODE.ERR# = ERROR#; ERRCODE.MON = '0'B;
           ERRCODE.FCG = '141603'O;     /* LNC in Six-bit form                */
           WR_ER.V.DCB# = INUNIT;
           PTR1$ = DCBADDR(DATUNT);
           CHAR_LEN = PTR1$->F$DCB.NAME#.L - 5;
           IF CHAR_LEN > 26 THEN CHAR_LEN = 26;
           YOU1.LEN = CHAR_LEN + 9;
           CALL CONCAT(YOU1.DATA,ADDR(PTR1$->F$DCB.NAME#.C)->CCHAR,
             '.',PTR1$->F$DCB.ACCT#);
           YOU2.LEN = 5;
           CALL CHANG(NUMRECS,YOU2.DATA,5);
           IF TOKEN.LEN = 0 THEN WR_ER.FIELD3_ = VECTOR(NIL);
           ELSE DO;
              YOU3.DATA = TOKEN.CHR;
              YOU3.LEN  = TOKEN.LEN;
              WR_ER.FIELD3_ = VECTOR(YOU3);
           END;
           WR_ER.V.FLAGLEV# = 0; WR_ER.V.SUBMESS# = %NO#;
           CALL M$ERRMSG(WR_ER);
        END;
        RETURN;
END TELLER;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/******************************************************************/
/*M*     READ_FILE July 31, 1979       GWJ                        */
/***/
/*P*     NAME: READ_FILE
         PURPOSE: To read from the UNIT#, place the data into
                   IN_BUF and Altret if EOF.
                                                                  */
READ_FILE : PROC (UNIT#, IN_BUF) ALTRET;
 
DCL UNIT# UBIN;
DCL IN_BUF CHAR(256);
 
%INCLUDE LNCOUNT_C1;
 
%FPT_READ(FPTN=RD_FIL,KEYR=YES,KEY=KEY$);
 
DCL 1 KEY$ ALIGNED STATIC,
      2 LEN UBIN BYTE UNAL,
      2 CHR UBIN(27) UNAL,
      2 * CHAR(252) UNAL;
 
DCL TELLER ENTRY(1);
 
/******/
 
        KEY$ = '0'B; IN_BUF = ' ';
        RD_FIL.V.DCB# = UNIT#;
        RD_FIL.BUF_ = VECTOR(IN_BUF);
        IF UNIT# = SAUNIT
        THEN DO;
           CALL XUU$READ(XUDATA,VECTOR(IN_BUF)) ALTRET(RD_ERR);
           IF XUDATA.FLAGS.KEY_REC#
           THEN DO;
              RECKEY.FRC = PINCRC(ADDR(XUDATA.ASCII_KEY),6)->C3;
              RECKEY.DEC = ADDR(XUDATA.ASCII_KEY)->C5;
           END;
           ELSE DO;
              CALL BINCHAR(RECKEY.DEC,RECNBR + 1);
              CALL BINCHAR(RECKEY.FRC,0);
           END;
           RECLEN = XUDATA.ARS;
           IF XUDATA.FLAGS.UP_DATE# THEN UPDFLG = TRUE;
           ELSE UPDFLG = FALSE;
        END;
        ELSE DO;
           CALL M$READ(RD_FIL) ALTRET(RD_ERR);
           IF KEY$.LEN ~= 3
           THEN DO;
              CALL BINCHAR(RECKEY.DEC,RECNBR + 1);
              CALL BINCHAR(RECKEY.FRC,0);
           END;
           ELSE DO;
              CALL BINCHAR(RECKEY.DEC, KEY$.CHR/1000);
              CALL BINCHAR(RECKEY.FRC, MOD(KEY$.CHR,1000));
           END;
           RECLEN = DCBADDR(UNIT#)->F$DCB.ARS#;
        END;
        EOFFLG = FALSE; OK = TRUE;
        RETURN;
RD_ERR:
        IF UNIT# ~= SAUNIT
        THEN DO;
           IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE = %E$EOF THEN ALTRETURN;
           ELSE DO;
              CALL TELLER(-1);
              EOFFLG = TRUE;
           END;
        END;
        ELSE DO;
           IF XUDATA.ERRCODE.ERR# = %E$EOF THEN ALTRETURN;
           ELSE DO;
              CALL TELLER(-2);
              EOFFLG = TRUE;
           END;
        END;
END READ_FILE;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/******************************************************************/
/*M*     ALL_DONE  July 31, 1979       GWJ                        */
/***/
/*P*     NAME: ALL_DONE
         PURPOSE: Will issue an closeing remarks and make
                   all files have been closed neatly.
                                                                  */
ALL_DONE : PROC;
 
 
DCL TELLER ENTRY(1);
DCL CLSFIL ENTRY(2);
DCL STPDB ENTRY;
 
 
%INCLUDE LNCOUNT_C1;
 
        CALL TELLER(%GOOD_BYE);
        DO I = 0 TO 6;
           IF DCBADDR(UNUM#(I))->F$DCB.FCD# = %YES#
           THEN CALL CLSFIL(UNUM#(I),%SAVE#);
        END;
        RETURN;
END ALL_DONE;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/******************************************************************/
/*M*     CHANG     July 31, 1979       GWJ                        */
/***/
/*P*     NAME: CHANG
         PURPOSE: To change a number into a text string without
                   leading zeros.
                                                                  */
CHANG : PROC (NUMBR, TEXT, LEN#);
 
%INCLUDE LNCOUNT_C1;
 
DCL TEXT(0:0) CHAR(1);
DCL NUMBR UBIN;
DCL LEN# UBIN;
 
DCL TXT CHAR(20);
 
        J = 0;
        DO I = 1 TO LEN#;
           J = (J * 10) + 9;
        END;
        IF NUMBR > J THEN TXT = '********************';
        ELSE CALL BINCHAR(TXT,NUMBR);
        CHAR_LEN = LEN#;
        ADDR(TEXT)->CCHAR = PINCRC(ADDR(TXT),20 - LEN#)->CCHAR;
        J = 1; I = 0;
        DO WHILE ( J = 1 AND I < LEN#);
           IF TEXT(I) = '0' THEN TEXT(I) = ' ';
           ELSE J = 0;
           I = I + 1;
        END;
        IF NUMBR = 0 THEN TEXT(LEN# - 1) = '0';
        RETURN;
END CHANG;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/******************************************************************/
/*M*     OPNFIL    July 31, 1979       GWJ                        */
/***/
/*P*     NAME: OPNFIL
         PURPOSE: This contains two routines. OPeN FILe and CLoSe
                   FILe.
                                                                  */
/*F*     NAME: OPNFIL
         PURPOSE: To open a file under the conditions specified
                   in the parameters pased to the routine.
                                                                  */
OPNFIL : PROC (UNIT#, FUNC, THERE, KIND);
 
%INCLUDE LNCOUNT_C1;
 
DCL UNIT# UBIN WORD;
DCL FUNC UBIN WORD;
DCL THERE UBIN WORD;
DCL KIND UBIN WORD;
 
DCL TELLER ENTRY(1);
 
DCL TUNIT UBIN;
 
/* FPT'S FOR OPNFIL AND CLSFIL */
%FPT_OPEN(FPTN=OPN_FIL,SCRUB=YES,REASSIGN=YES,ACS=DIRECT,TYPE='IL',
               KEYL=35,KEYX=0,IXTNSIZE=4,XTNSIZE=4,NAME=FILE_NAME,
               PASS=FILE_PASS,ACCT=FILE_ACCT,WSN=FILE_WSN,SN=FILE_SN);
 
%FPT_CLOSE(FPTN=CLS_FIL);
 
/*  OK  NOW LETS OPEN THE FILE */;
 
        TUNIT = INUNIT; INUNIT = UNIT#;
        IF FUNC = %IN# THEN OPN_FIL.V.OPER.TEST# = %YES#;
        ELSE OPN_FIL.V.OPER.TEST# = %NO#;
        OPN_FIL.V.RES# = FILE_RES;
        OPN_FIL.V.ASN# = FILE_ASN;
        OPN_FIL.V.ORG# = KIND;
        OPN_FIL.V.EXIST# = THERE;
        OPN_FIL.V.FUN# = FUNC;
        OPN_FIL.V.DCB# = INUNIT;
TRY_AGAIN:
        CALL M$OPEN( OPN_FIL ) ALTRET ( NO_OPN );
        IF (KIND = %INDEXED# AND
          ( OPN_FIL.V.FUN# = %IN# OR DCBADDR(UNIT#)->F$DCB.FEXT = %YES#))
        THEN OLDFIL = TRUE;
BYEB:
        OK = TRUE;
        INUNIT = TUNIT;
        RETURN;
NO_OPN:
        IF ( KIND = %INDEXED#  AND
          ( B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE = %E$NOACCESS ))
        THEN DO;
           WRTFLG = FALSE;
           OPN_FIL.V.FUN# = %IN#;
           GOTO TRY_AGAIN;
        END;
        IF UNIT# ~= UAUNIT THEN CALL TELLER(-1);
        INUNIT = TUNIT;
DEAD:
        OK = FALSE;
        RETURN;
%EJECT;
/*****************************************************/
 
/*F*    NAME: CLSFIL
        PURPOSE: To close a file uder the conditions specified
                 in the parameters passed to this routine
   */
 
CLSFIL : ENTRY (UNIT#, FUNC);
 
        CLS_FIL.V.DCB# = UNIT#;
        CLS_FIL.V.DISP# = FUNC;
        CALL M$CLOSE(CLS_FIL) ALTRET(DEAD);
        OK = TRUE;
        RETURN;
END OPNFIL;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/******************************************************************/
/*M*     GETFID    July 31, 1979       GWJ                        */
/***/
/*P*     NAME: GETFID
         PURPOSE: Will get a file name and an account from
                   the input record.
                                                                  */
GETFID : PROC;
 
%INCLUDE LNCOUNT_C1;
 
%FPT_FID(FPTN=GET_FID,ACCT=FILE_ACCT,ASN=FILE_ASN,NAME=FILE_NAME,
                      PASS=FILE_PASS,WSN=FILE_WSN,SN=FILE_SN,
                      RES=FILE_RES);
 
DCL TELLER ENTRY(1);
DCL NXTTKN ENTRY;
DCL READ_FILE ENTRY(2) ALTRET;
 
/*******/
 
NEXT:
        OK = TRUE;
        IF INUNIT = LSUNIT
        THEN DO;
           CALL READ_FILE(INUNIT,RECORD) ALTRET(EOF_FILE);
           I = 0;
           CALL INDEX1(I,',',REC_DATA) ALTRET(END_OF_LINE);
           TOKEN.LEN = I;
           DO WHILE(FALSE);
END_OF_LINE:
              TOKEN.LEN = RECLEN;
           END;
           TOKEN.CHR = ADDR(REC_DATA)->TCHAR;
           OK = TRUE;
        END;
        ELSE CALL NXTTKN;
        IF OK
        THEN DO;
           GET_FID.TEXTFID_ = VECTOR(TPTR$->TCHAR);
           CALL M$FID(GET_FID) ALTRET(BAD_FID);
           OK = TRUE;
           RETURN;
        END;
BAD_FID:
        CALL TELLER(%BAD_FID);
        IF LSTFIL THEN GOTO NEXT;
        OK = FALSE;
        RETURN;
EOF_FILE:
        LSTFIL = FALSE;
        OK = FALSE;
        RETURN;
END GETFID;
