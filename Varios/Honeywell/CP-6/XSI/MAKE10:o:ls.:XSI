

rCC.C03    File=MAKE_SIc10.:XSI                                                      Thu Nov 20 1997  Page=1  
A        1         1             /*M*    make_rules:c -- Initialize built-in rules        */
A        2         2             /*T***********************************************************/
A        3         3             /*T*                                                         */
A        4         4             /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
A        5         5             /*T*                                                         */
A        6         6             /*T***********************************************************/
A        7         7
A        8         8             #include   "MAKE_Cc14"
A        9         9             #include   <stdlib.h>
A       10        10
A       11        11             #define STATIC
A       12        12
A       13        13             #define LINE(nm,nxt,len,t)   \
A       14        13             STATIC struct command_lin nm = {nxt, len, {t}}
A       15        15
A       16        16             #define COMMANDS(nm,ln,flags) \
A       17        16             STATIC struct command_list nm = {0, (struct command_line *)&ln, flags}
A       18        18
A       19        19             #define DEPENDANCY(nm,rule)  \
A       20        19             STATIC struct dependancy nm = {0, 0, 0,0,0,0}
A       21        21
A       22        22             #define COMPILE(nm,dp,cmd)   \
A       23        22             STATIC struct target_rule nm = {0, &dp, &cmd, 0}
A       24        24
A       25        25
A       26        26             /*F*    NAME:          complete_rules()
A       27        27                     PURPOSE:       Add default rules to the target list.
A       28        28                     DESCRIPTION:
A       29        29                        For each of the default rules, we check to see if it has
A       30        30                        been redefined.  If it has not been defined, then we add
A       31        31                        it to the list of rules that we will be looking at.
A       32        32
A       33        33                        The default rules are the following commands:
A       34        34
A       35        35
A       36        36                        .jcl    :
A       37        37                         -JOB $(JOBOPTS)
rCC.C03    File=MAKE_SIc10.:XSI                                                      Thu Nov 20 1997  Page=2  
A       38        38                         -RES $(RESOPTS)
A       39        39                         -Dir $(PATH)
A       40        40                         -Set M$DO $+
A       41        41                         -Del $@
A       42        42
A       43        43                        .end    :
A       44        44                         -Del $+
A       45        45                         -Set M$LL NO
A       46        46                         -ERASE
A       47        47                         -Q
A       48        48                         -ABORT: OUTPUT '****  ERROR ****'
A       49        49
A       50        50
A       51        51                        .c.o    :
A       52        52                          $(FORMAT) $< over *$(<F),$& $(FMTOPTS)
A       53        53                          $(CC) *$(<F) over $@  $(COPTS)
A       54        54                          If $Fid_Exist('$@') then Let STEPCC = 8
A       55        55
A       56        56                        .6.o    :
A       57        57                          $(PL6) $< over $@,$&  $(PL6OPTS)
A       58        58
A       59        59                        .f.o    :
A       60        60                          $(FORTRAN) $< over $@,$&  $(FORTOPTS)
A       61        61
A       62        62                        .y.c    :
A       63        63                          $(YACC)  $(YOPTS) $<
A       64        64
A       65        65                        .l.c    :
A       66        66                          $(LEX)   $(LEXOPTS) $<
A       67        67
A       68        68                        .n.o    :
A       69        69                          $(PARTRGE) $< over $@,$&  $(PARTOPTS)
A       70        70
A       71        71             */
A       72        72
A       73        73
A       74        74
rCC.C03    File=MAKE_SIc10.:XSI                                                      Thu Nov 20 1997  Page=3  
A       75        75
A       76        76             LINE(JCL_line4,         0,16," -Let STEPCC = 0");
A       77        77             LINE(JCL_line3,&JCL_line4,13," -Set M$DO $+");
A       78        78             LINE(JCL_line2,&JCL_line3,13," -Dir .$(*D)");
A       79        79             LINE(JCL_line1,&JCL_line2,16," -RES $(RESOPTS)");
A       80        80             LINE(JCL_line0,&JCL_line1,16," -JOB $(JOBOPTS)");
A       81        81
A       82        82             LINE(END_line5,         0,33," -ABORT: OUTPUT '**** ERROR ****'");
A       83        83             LINE(END_line4,&END_line5, 6," -quit");
A       84        84             LINE(END_line3,&END_line4, 7," -ERASE");
A       85        85             LINE(END_line2,&END_line3,13," -Set M$LL NO");
A       86        86             LINE(END_line1,&END_line2,33," -if $Fid_Exist('$+') then DEL $+");
A       87        87             LINE(END_line0,&END_line1,13," -Set M$DO NO");
A       88        88
A       89        89             LINE(YACC_lin5,         0,25,"  $(YACC) $(YACCOPTS) %In");
A       90        90             LINE(YACC_lin4,&YACC_lin5, 8," -yokay:");
A       91        91             LINE(YACC_lin3,&YACC_lin4,24," -let In = '$(<F).$(@D)'");
A       92        92             LINE(YACC_lin2,&YACC_lin3,45,"  $(FORMAT) $< over $(<F).$(@D),$& $(FMTOPTS)");
A
A       93        93             LINE(YACC_lin1,&YACC_lin2,45," -if $index(In,',')>=$len(In) then goto yokay");
A
A       94        94             LINE(YACC_line,&YACC_lin1,15," -let In = '$<'");
A       95        95
A       96        96             LINE(LEX_line5,        0,23,"  $(LEX) $(LEXOPTS) %In");
A       97        97             LINE(LEX_line4,&LEX_line5, 8," -lokay:");
A       98        98             LINE(LEX_line3,&LEX_line4,19," -let In = '*$(<F)'");
A       99        99             LINE(LEX_line2,&LEX_line3,40,"  $(FORMAT) $< over *$(<F),$& $(FMTOPTS)");
A      100       100             LINE(LEX_line1,&LEX_line2,45," -if $index(In,',')>=$len(In) then goto lokay");
A
A      101       101             LINE(LEX_line0,&LEX_line1,15," -let In = '$<'");
A      102       102
A      103       103             LINE(CAP_linh,        0,40," if $fid_exist('$@')=0 then let STEPCC=8");
A      104       104             LINE(CAP_ling,&CAP_linh,23," -let delete mast,M0,M1");
A      105       105             LINE(CAP_linf,&CAP_ling,64," $(CAP) (%M0 F;*$(<F);;$(CAPFMT);$(CAPDEV) %M1;DVI
A                               ;$@;RES;N;O;Q)");
A      106       106             LINE(CAP_line,&CAP_linf,35," $(FORMAT) $< over *$(<F),NO (NFMT)");
A      107       107             LINE(CAP_lind,&CAP_line,14," -Let STEPCC=0");
rCC.C03    File=MAKE_SIc10.:XSI                                                      Thu Nov 20 1997  Page=4  
A      108       108             LINE(CAP_linc,&CAP_lind,27," -if dvpp<3 then let M1=';'");
A      109       109             LINE(CAP_linb,&CAP_linc,26," -if mast=1 then let M0=''");
A      110       110             LINE(CAP_lina,&CAP_linb,19," -Let M0='M', M1=''");
A      111       111             LINE(CAP_lin9,&CAP_lina,15," -del *:CAP:xeq");
A      112       112             LINE(CAP_lin8,&CAP_lin9,15," -xeq *:CAP:xeq");
A      113       113             LINE(CAP_lin7,&CAP_lin8, 4," -!q");
A      114       114             LINE(CAP_lin6,&CAP_lin7,21," -!se2;1p/!let dvpp=/");
A      115       115             LINE(CAP_lin5,&CAP_lin6,21," -!se1;1p/!let mast=/");
A      116       116             LINE(CAP_lin4,&CAP_lin5,13," -e *:CAP:xeq");
A      117       117             LINE(CAP_lin3,&CAP_lin4,46," -c :CAP.%$ACCT('E29') into *:CAP:xeq(ln(2,1))");
A      118       118             LINE(CAP_lin2,&CAP_lin3,46," -c :CAP.%$ACCT('E30') into *:CAP:xeq(ln(1,1))");
A      119       119             LINE(CAP_lin1,&CAP_lin2,26," -c NO over *:CAP:xeq (LN)");
A      120       120             LINE(CAP_lin0,&CAP_lin1,22," -let mast = 0, dvpp=3");
A      121       121
A      122       122             LINE(CPH_lino,        0,42," if $fid_exist('$@')=0 then let STEPCC = 4");
A      123       123             LINE(CPH_linn,&CPH_lino,16," -let STEPCC = 0");
A      124       124             LINE(CPH_linm,&CPH_linn,15," -del *:CAP:xeq");
A      125       125             LINE(CPH_linl,&CPH_linm,15," -xeq *:CAP:xeq");
A      126       126             LINE(CPH_link,&CPH_linl, 4," -!q");
A      127       127             LINE(CPH_lini,&CPH_link,31," -!if/HERMAN.X/?/HELP:/?/:./;DE");
A      128       128             LINE(CPH_linh,&CPH_lini,14," -!c *:CAP:xeq");
A      129       129             LINE(CPH_ling,&CPH_linh, 3," -e");
A      130       130             LINE(CPH_linf,&CPH_ling,58," $(CAP) (%M0 F;*$(<F);;HELP;HELP;$@;XXXXXX;S;*:CAP
A                               :xeq;;Q)");
A      131       131             LINE(CPH_line,&CPH_linf,35," $(FORMAT) $< over *$(<F),$& (NFMT)");
A      132       132             LINE(CPH_lind,&CPH_line,16," -let STEPCC = 0");
A      133       133             LINE(CPH_linc,&CPH_lind,27," -if dvpp<3 then let M1=';'");
A      134       134             LINE(CPH_linb,&CPH_linc,26," -if mast=1 then let M0=''");
A      135       135             LINE(CPH_lina,&CPH_linb,19," -let M0='M', M1=''");
A      136       136             LINE(CPH_lin9,&CPH_lina,15," -del *:CAP:xeq");
A      137       137             LINE(CPH_lin8,&CPH_lin9,15," -xeq *:CAP:xeq");
A      138       138             LINE(CPH_lin7,&CPH_lin8, 4," -!q");
A      139       139             LINE(CPH_lin6,&CPH_lin7,21," -!se2;1p/!let dvpp=/");
A      140       140             LINE(CPH_lin5,&CPH_lin6,21," -!se1;1p/!let mast=/");
A      141       141             LINE(CPH_lin4,&CPH_lin5,13," -e *:CAP:xeq");
A      142       142             LINE(CPH_lin3,&CPH_lin4,51," -c  :CAP.%$ACCT ('E29') into *:CAP:xeq ( ln(2,1)
A                               )");
rCC.C03    File=MAKE_SIc10.:XSI                                                      Thu Nov 20 1997  Page=5  
A      143       143             LINE(CPH_lin2,&CPH_lin3,51," -c  :CAP.%$ACCT ('E30') into *:CAP:xeq ( ln(1,1)
A                               )");
A      144       144             LINE(CPH_lin1,&CPH_lin2,28," -c   NO over *:CAP:xeq (LN)");
A      145       145             LINE(CPH_lin0,&CPH_lin1,24," -let mast = 0, dvpp = 3");
A      146       146
A      147       147             LINE(MIDG_line1,          0,50," $(MIDGET) -g *$(@F) -o $@ $(MIDGOPTS) $(MIDGS
A                               RCH)");
A      148       148             LINE(MIDG_line, &MIDG_line1,24," $(MAKE) -f $< -g *$(@F)");
A      149       149
A      150       150
A      151       151             LINE(CC_line0,        0,30,"  $(CC) $< over $@,$& $(COPTS)");
A      152       152             LINE(PL6_line0,0,34,"  $(PL6) $< OVER $@,$&  $(PL6OPTS)");
A      153       153             LINE(FORT_line,0,38,"  $(FORTRAN) $< over $@,$& $(FORTOPTS)");
A      154       154             LINE(PART_line,0,38,"  $(PARTRGE) $< over $@,$& $(PARTOPTS)");
A      155       155             LINE(BMAP_line,0,35,"  $(BMAP) $< over $@,$& $(BMAPOPTS)");
A      156       156             LINE(PASC_line,0,37,"  $(PASCAL) $< over $@,$& $(PASCOPTS)");
A      157       157             LINE(HERM_line,0,37,"  $(HERMAN) $< over $@,$& $(HERMOPTS)");
A      158       158             LINE(LINK_line,0,32,"  $(LINK) $< over $@ $(LINKOPTS)");
A      159       159             LINE(TEX_line,0,33,"  $(TEX) $< over $@,$& $(TEXOPTS)");
A      160       160             LINE(TAN_line,0,22,"  $(TANGLE) $< over $@");
A      161       161             LINE(WEA_line,0,21,"  $(WEAVE) $< over $@");
A      162       162             LINE(FMT_line0,0,37,"  $(FORMAT)  $< OVER $@,$& $(FMTOPTS)");
A      163       163             LINE(COPY_line0,0,29,"  COPY $< OVER $@ $(COPYOPTS)");
A      164       164
A      165       165             LINE(SXEQ_line4,          0, 6," -Echo");
A      166       166             LINE(SXEQ_line3,&SXEQ_line4,14," -let STEPCC=0");
A      167       167             LINE(SXEQ_line2,&SXEQ_line3,13," -Set M$DO $+");
A      168       168             LINE(SXEQ_line1,&SXEQ_line2, 7," -Reset");
A      169       169             LINE(SXEQ_line0,&SXEQ_line1,12," -dir .$(*D)");
A      170       170
A      171       171             #ifdef RU
A      172       172             LINE(EXEQ_line8,          0,22," -$(saved_image_MAKE).");
A      173       173             #else
A      174       174   *S*       LINE(EXEQ_line9,          0, 4," -go");
A      175       175   *S*       LINE(EXEQ_line8,&EXEQ_line9,25," -get $(saved_image_MAKE)");
A      176       176   *S*       #endif
A      177       177             LINE(EXEQ_line7,&EXEQ_line8,20," -resume: dir .$(*D)");
rCC.C03    File=MAKE_SIc10.:XSI                                                      Thu Nov 20 1997  Page=6  
A      178       178             LINE(EXEQ_line6,&EXEQ_line7, 7," -Reset");
A      179       179             LINE(EXEQ_line5,&EXEQ_line6,28," -output 'target $@ failed!'");
A      180       180             LINE(EXEQ_line4,&EXEQ_line5,21," -ABORT: $(DONT_ECHO)");
A      181       181             LINE(EXEQ_line3,&EXEQ_line4,13," -goto resume");
A      182       182             LINE(EXEQ_line2,&EXEQ_line3,33," -if $fid_exist('$+') then del $+");
A      183       183             LINE(EXEQ_line1,&EXEQ_line2, 7," -reset");
A      184       184             LINE(EXEQ_line0,&EXEQ_line1,14," -$(DONT_ECHO)");
A      185       185
A      186       186
A      187       187
A      188       188             COMMANDS(JCL_commands, JCL_line0,   02400);
A      189       189             COMMANDS(END_commands, END_line0,   02000);
A      190       190             COMMANDS(CC_commands,  CC_line0,   011600);
A      191       191             COMMANDS(PL6_commands, PL6_line0,   01600);
A      192       192             COMMANDS(FORT_commands,FORT_line,   01600);
A      193       193             COMMANDS(YACC_commands,YACC_line,    0200);
A      194       194             COMMANDS(LEX_commands, LEX_line0,    0600);
A      195       195             COMMANDS(CAP_commands, CAP_lin0,    01600);
A      196       196             COMMANDS(CPH_commands, CPH_lin0,    01600);
A      197       197             COMMANDS(PART_commands,PART_line,   01600);
A      198       198             COMMANDS(BMAP_commands,BMAP_line,   01600);
A      199       199             COMMANDS(PASC_commands,PASC_line,   01600);
A      200       200             COMMANDS(HERM_commands,HERM_line,   01600);
A      201       201             COMMANDS(LINK_commands,LINK_line,   01600);
A      202       202             COMMANDS(TEX_commands, TEX_line,    01600);
A      203       203             COMMANDS(TAN_commands, TAN_line,    01600);
A      204       204             COMMANDS(WEA_commands, WEA_line,    01600);
A      205       205             COMMANDS(MIDG_commands,MIDG_line,   01600);
A      206       206             COMMANDS(FMT_commands, FMT_line0,   01600);
A      207       207             COMMANDS(COPY_commands,COPY_line0,  01600);
A      208       208             COMMANDS(SXEQ_commands,SXEQ_line0,  01600);
A      209       209             COMMANDS(EXEQ_commands,EXEQ_line0,  01600);
A      210       210
A      211       211
A      212       212             DEPENDANCY(JCL_depend,  JCL_compile);
A      213       213             DEPENDANCY(END_depend,  END_compile);
A      214       214             DEPENDANCY(CC_depend,   CC_compile);
rCC.C03    File=MAKE_SIc10.:XSI                                                      Thu Nov 20 1997  Page=7  
A      215       215             DEPENDANCY(PL6_depend,  PL6_compile);
A      216       216             DEPENDANCY(FORT_depend, FORT_compile);
A      217       217             DEPENDANCY(YACC_depend, YACC_compile);
A      218       218             DEPENDANCY(LEX_depend,  LEX_compile);
A      219       219             DEPENDANCY(CAP_depend,  CAP_compile);
A      220       220             DEPENDANCY(CPH_depend,  CPH_compile);
A      221       221             DEPENDANCY(PART_depend, PART_compile);
A      222       222             DEPENDANCY(BMAP_depend, BMAP_compile);
A      223       223             DEPENDANCY(PASC_depend, PASC_compile);
A      224       224             DEPENDANCY(HERM_depend, HERM_compile);
A      225       225             DEPENDANCY(LINK_depend, LINK_compile);
A      226       226             DEPENDANCY(TEX_depend,  TEX_compile);
A      227       227             DEPENDANCY(TAN_depend,  TAN_compile);
A      228       228             DEPENDANCY(WEA_depend,  WEA_compile);
A      229       229             DEPENDANCY(MIDG_depend, MIDG_compile);
A      230       230             DEPENDANCY(FMT_depend,  FMT_compile);
A      231       231             DEPENDANCY(COPY_depend, COPY_compile);
A      232       232             DEPENDANCY(SXEQ_depend, SXEQ_compile);
A      233       233             DEPENDANCY(EXEQ_depend, EXEQ_compile);
A      234       234
A      235       235             COMPILE(JCL_compile,   JCL_depend,   JCL_commands);
A      236       236             COMPILE(END_compile,   END_depend,   END_commands);
A      237       237             COMPILE(CC_compile,    CC_depend,    CC_commands);
A      238       238             COMPILE(PL6_compile,   PL6_depend,   PL6_commands);
A      239       239             COMPILE(FORT_compile,  FORT_depend,  FORT_commands);
A      240       240             COMPILE(YACC_compile,  YACC_depend,  YACC_commands);
A      241       241             COMPILE(LEX_compile,   LEX_depend,   LEX_commands);
A      242       242             COMPILE(CAP_compile,   CAP_depend,   CAP_commands);
A      243       243             COMPILE(CPH_compile,   CPH_depend,   CPH_commands);
A      244       244             COMPILE(PART_compile,  PART_depend,  PART_commands);
A      245       245             COMPILE(BMAP_compile,  BMAP_depend,  BMAP_commands);
A      246       246             COMPILE(PASC_compile,  PASC_depend,  PASC_commands);
A      247       247             COMPILE(HERM_compile,  HERM_depend,  HERM_commands);
A      248       248             COMPILE(LINK_compile,  LINK_depend,  LINK_commands);
A      249       249             COMPILE(TEX_compile,   TEX_depend,   TEX_commands);
A      250       250             COMPILE(TAN_compile,   TAN_depend,   TAN_commands);
A      251       251             COMPILE(WEA_compile,   WEA_depend,   WEA_commands);
rCC.C03    File=MAKE_SIc10.:XSI                                                      Thu Nov 20 1997  Page=8  
A      252       252             COMPILE(MIDG_compile,  MIDG_depend,  MIDG_commands);
A      253       253             COMPILE(FMT_compile,   FMT_depend,   FMT_commands);
A      254       254             COMPILE(COPY_compile,  COPY_depend,  COPY_commands);
A      255       255             COMPILE(SXEQ_compile,  SXEQ_depend,  SXEQ_commands);
A      256       256             COMPILE(EXEQ_compile,  EXEQ_depend,  EXEQ_commands);
A      257       257
A      258       258             STATIC CONST struct {
A      259       259    1          int                       len;
A      260       260    1          char               *CONST nm;
A      261       261    1          struct target_rule *CONST rule;
A      262       262    1          }  spec_rules[] =          {
A      263       263    1         { 4, {".jcl"}, &JCL_compile},      { 4, {".end"}, &END_compile},
A      264       264    1         { 4, {".c.o"}, &CC_compile},       { 4, {".6.o"}, &PL6_compile},
A      265       265    1         { 4, {".f.o"}, &FORT_compile},     { 4, {".y.c"}, &YACC_compile},
A      266       266    1         { 4, {".l.c"}, &LEX_compile},      { 4, {".n.o"}, &PART_compile},
A      267       267    1         { 4, {".a.o"}, &BMAP_compile},     { 4, {".o.r"}, &LINK_compile},
A      268       268    1         { 8, {".tex.dvi"},&TEX_compile},   { 4, {".p.o"}, &PASC_compile},
A      269       269    1         { 8, {".cap.dvi"},&CAP_compile},   { 6, {".web.p"}, &TAN_compile},
A      270       270    1         { 8, {".web.tex"},&WEA_compile},
A      271       271    1         { 4, {".fmt"}, &FMT_compile},      { 5, {".copy"},&COPY_compile},
A      272       272    1         { 4, {".xeq"}, &SXEQ_compile},     { 7, {".xeqend"},&EXEQ_compile},
A      273       273    1         {11, {".cap.herman"}, &CPH_compile},
A      274       274    1         {12,{".herman.help"}, &HERM_compile},
A      275       275    1         {17,{".makefile.depends"}, &MIDG_compile},
A      276       276    1          };
A      277       277
A      278       278             void
A      279       279             complete_rules(no_built_ins)
A      280       280               int   no_built_ins;
A      281       281             {
A      282       282    1          int   i;
A      283       283    1          struct sym_target *t;
A      284       284    1
A      285       285    1          for ( i=0 ; i < sizeof(spec_rules)/12 ; i++)   {
A      286       286    2             struct sym_target *s;
A      287       287    2             struct dependancy *d;
A      288       288    2             struct target_rule *tr;
rCC.C03    File=MAKE_SIc10.:XSI                                                      Thu Nov 20 1997  Page=9  
A      289       289    2
A      290       290    2             s = lookup_sym_target(spec_rules[i].nm, spec_rules[i].len, 2);
A      291       291    2             if (!s) crash("Out of memory: complete_rules");
A      292       292    2
A      293       293    2             if (!s->tg_commands && (!no_built_ins || s->tg_len == s->tg_suffix_len))
A                               {
A      294       294    3                s->tg_commands = tr = spec_rules[i].rule;
A      295       295    3                d = tr->tr_depend;
A      296       296    3                d->dp_target = s;
A      297       297    3                d->dp_tgdepend = s->tg_depend;
A      298       298    3                s->tg_depend   = d;
A      299       299    3                tr->next = LineList;
A      300       300    3                LineList       = tr;
A      301       301    3                }
A      302       302    2             }  /*  end of:   for( i=0 ;...)     */
A      303       303    1
A      304       304    1          t = JclRules;
A      305       305    1          while (t)   {
A      306       306    2             struct sym_ftype   *fo = t->tg_ftype;
A      307       307    2             struct ftype_rules *fr = fo->ft_rules;
A      308       308    2
A      309       309    2             if (t->tg_commands)  {
A      310       310    3                if (!fr) {
A      311       311    4                   int sz = (fo->ft_out - 1) * sizeof(int *)+sizeof(struct ftype_rules
A                               );
A      312       312    4                   fr = (struct ftype_rules*)malloc(sz);
A      313       313    4                   if (!fr) crash("Out of Memory: complete rules\n");
A      314       314    4                   fo->ft_rules = fr;
A      315       315    4                   fr->fr_in = fr->fr_out = 0;
A      316       316    4                   mem_ruleptrs[0] += sz;
A      317       317    4                   mem_ruleptrs[1]++;
A      318       318    4                   }
A      319       319    3                fr->fr_rule[ fr->fr_out++ ] = t;
A      320       320    3                }
A      321       321    2             t = t->tg_tgrule;
A      322       322    2             }
A      323       323    1
rCC.C03    File=MAKE_SIc10.:XSI                                                      Thu Nov 20 1997  Page=10 
A      324       324    1          t = JclRules;
A      325       325    1          while (t)   {
A      326       326    2             if (t->tg_ftype->ft_rules)
A      327       327    2                t->tg_ftype->ft_out = t->tg_ftype->ft_rules->fr_out;
A      328       328    2             t = t->tg_tgrule;
A      329       329    2             }
A      330       330    1          fmt_cmd  = (lookup_sym_target(".fmt", 4, 0))->tg_commands;
A      331       331    1          copy_cmd = (lookup_sym_target(".copy", 5, 0))->tg_commands;
A      332       332    1          return;
A      333       333    1        }
A      334       334
A      335       335
A      336       336
A      337       337
A      338       338             /*D*    NAME:          get_rule(tg, ft, flavor)
A      339       339                     PURPOSE:       To return the next file type that should be
A      340       340                                 looked at for input.
A      341       341                     DESCRIPTION:
A      342       342                        The input parameters are: a target pointer (or NULL),
A      343       343                        the required output file type, and a flavor that indicates
A      344       344                        the type of transformation that we are looking for.
A      345       345
A      346       346                        There are three flavors, flavor 1 is a complex
A      347       347                        transformation.  The output file type returned is
A      348       348                        guaranteed NOT to be the required output file type.
A      349       349                        But it is guaranteed to produce a file type that MAY
A      350       350                        be input to a file type that produces the required
A      351       351                        output file type.
A      352       352
A      353       353                        Flavor 2 is a simple transformation.  The target returned
A      354       354                        is guaranteed to produce the appropriate output file type.
A      355       355
A      356       356                        Finally, flavor 3 is to be used to produce the required
A      357       357                        output file type AFTER finding a possible complex
A      358       358                        derivation.
A      359       359
A      360       360                        Flavor 1 rules:
rCC.C03    File=MAKE_SIc10.:XSI                                                      Thu Nov 20 1997  Page=11 
A      361       361
A      362       362                           a) Output file type produced by a single rule
A      363       363
A      364       364                        Flavor 2 rules:
A      365       365
A      366       366                           a) output file may be produced by multiple steps where
A      367       367                              each step is guaranteed to be on the path to produce
A      368       368                              the required output file type.
A      369       369                           b) if the required output file type is not produced in
A      370       370                              a single step, then flavor should switch to 3 to
A      371       371                              obtain remaining transformations.
A      372       372
A      373       373                        Flavor 3 rules:
A      374       374
A      375       375                           a) return next file transformation required to produce
A      376       376                              the target in a "complex" derivation.
A      377       377
A      378       378                        Flavor 4 rules:
A      379       379
A      380       380                           a) output file type is ftype
A      381       381                           b) input file type is xtg->tg_inftype
A      382       382
A      383       383                        Flavor 5 rules:
A      384       384                           Simply return the last rule returned in mode 2.
A      385       385
A      386       386             */
A      387       387
A      388       388             struct  sym_target *
A      389       389             get_rule(tg, ft, flavor, xtg)
A      390       390               struct   sym_target  *tg;
A      391       391               struct   sym_ftype   *ft;
A      392       392               int                   flavor;
A      393       393               struct   sym_target  *xtg;
A      394       394             {
A      395       395    1          struct   ftype_rules *rule_list = ft->ft_rules;
A      396       396    1          static   int          base = 0;
A      397       397    1          static   int          last_base = 0;
rCC.C03    File=MAKE_SIc10.:XSI                                                      Thu Nov 20 1997  Page=12 
A      398       398    1          struct   ft_list  {
A      399       399    2             struct ftype_rules *rules;
A      400       400    2             int                 base;
A      401       401    2             };
A      402       402    1          static   struct ft_list stack[20];
A      403       403    1          int                     i;
A      404       404    1          struct   sym_ftype     *ftr;
A      405       405    1
A      406       406    1          if (tg == 0)   {
A      407       407    2             /**   Starting flavor      **/
A      408       408    2             rule_list = ft->ft_rules;  /* Get rules creating this type  */
A      409       409    2             if (!rule_list) return 0;  /* Nothing produces this type    */
A      410       410    2             switch (flavor)   {
A      411       411    3
A      412       412    3             case 1:
A      413       413    3             case 2:
A      414       414    3                stack[0].rules = rule_list;
A      415       415    3                stack[0].base  = base = last_base = 0;
A      416       416    3                break;
A      417       417    3
A      418       418    3             case 4:
A      419       419    3                ftr = xtg->tg_inftype; /* Get required file type  */
A      420       420    3                for ( i=0 ; i<rule_list->fr_out ; i++)  {
A      421       421    4                   struct sym_target *t = rule_list->fr_rule[i];
A      422       422    4                   if (t->tg_inftype == ftr && t->tg_commands)
A      423       423    4                      return t;
A      424       424    4                   }
A      425       425    3                return 0;
A      426       426    3                }        /* end of switch(flavor)   */
A      427       427    2             }           /* end of if (tg==0)       */
A      428       428    1
A      429       429    1          switch (flavor)   {
A      430       430    2
A      431       431    2          case 2:  /* A single production that produces this file */
A      432       432    2             if (stack[0].rules->fr_out <= stack[0].base)
A      433       433    2                return 0;
A      434       434    2             return stack[0].rules->fr_rule[ stack[0].base++ ];
rCC.C03    File=MAKE_SIc10.:XSI                                                      Thu Nov 20 1997  Page=13 
A      435       435    2
A      436       436    2          case 1:  /* Multiple productions to produce this file    */
A      437       437    2             if (last_base) base = last_base;
A      438       438    2             while (1)   {
A      439       439    3                struct ftype_rules *rules = stack[base].rules;
A      440       440    3                if ( !rules || rules->fr_out <= stack[base].base)   {
A      441       441    4                   if (base == 0) return 0;
A      442       442    4                   base--;
A      443       443    4                   return stack[base].rules->fr_rule[stack[base].base-1];
A      444       444    4                   }
A      445       445    3                else  {
A      446       446    4                   int                 fi  = stack[base].base++;
A      447       447    4                   int                  i;
A      448       448    4                   struct sym_target   *t  = rules->fr_rule[fi];
A      449       449    4
A      450       450    4                   base++;
A      451       451    4                   stack[base].rules = rules = t->tg_inftype->ft_rules;
A      452       452    4                   stack[base].base  = 0;
A      453       453    4                   for ( i=base-1 ; i>=0 ; i--)  {  /* don't loop rules */
A      454       454    5                      if ( rules == stack[i].rules )   {
A      455       455    6                         stack[base].base = 262143;
A      456       456    6                         base--;
A      457       457    6                         break;
A      458       458    6                         }
A      459       459    5                      }  /* end of for ( i=base-1... */
A      460       460    4                   }
A      461       461    3                }  /* end of while(1)   */
A      462       462    2
A      463       463    2          case 5:  /* Return current production                    */
A      464       464    2             return tg;
A      465       465    2
A      466       466    2          case 3:  /* Return rest of productions to produce target */
A      467       467    2             if (!last_base) last_base = base;
A      468       468    2             base--;
A      469       469    2             return stack[base].rules->fr_rule[stack[base].base-1];
A      470       470    2
A      471       471    2             }     /* end of switch(flavor)   */
rCC.C03    File=MAKE_SIc10.:XSI                                                      Thu Nov 20 1997  Page=14 
A      472       472    1
A      473       473    1          return 0;
A      474       474    1        }
A---  Include file information  ---
A
A   MAKE_Cc14.:XSI. is referenced
A   MAKE_Cc13.:XSI. is referenced
A   stdlib:h.:LIBRARY. is referenced
C
ANo diagnostics were issued in the file MAKE_SIc10.:XSI
