.*M*
HELP file for: SHREW.X
.*T*
 **************************************************************
 *                                                            *
 *  Copyright (c) Bull HN Information Systems Inc., 1989      *
 *                                                            *
 **************************************************************
.*A*                                                            
SHREW (Specially Handled Reports for ELF log Watching) retrieves and
displays information from ELF log files numbered 04 thru 99.
.*B*
Invocation syntax:
 
!SHREW.X ([L[OG][=]]nn[.acct])
 
 
where the required option specifies the log file to be reported,
values 04 thru 99 inclusive.  The optional account specification
allows selection of a default account which overrides the otherwise
used default of ".:SYS" for the location of :ELFnn? files.
 
Commands are USE, SPAN, TYPE, REPORT, RESET, and END.
 
Type !HELP (SHREW.X) command_name for details.
 
Type a ? for more about SHREW.
.*B*
SHREW is an ELAN-like processor which may be used to examine the
contents of the ELF log files. It may be used either on-line or in
batch.
 
As determined by System Programmers, CP-6 may log information about
certain events and conditions in an ELF log file, :ELFnn (nn=04 thru
99).  These files are maintained in the .:SYS account by the
M$WRSYSLOG monitor service and the ELF system ghost.
 
SHREW assumes the files are of the form :ELFnnyymmdd (an ANS date
appended to the filename, forming DAILY log files).  The average
SHREW user need not concern themselves with the standard log file
which isn't divided into daily segments; however, the system
programmer who is setting up an ELF log file to be used by SHREW
should refer to the topic "FILES" for special information.
 
SHREW is not linked with any privileges, so the user must have the
necessary active privileges to allow read access to ELF log files.
 
When SHREW is invoked, it attempts to open the current selected log
file and, subsequently, reports the first ELFnn log file which
exists in the :SYS account (or the selected account). It then awaits
further commands.
.*B*
Minimally, a REPORT command must be issued to initiate production of
a display or report. If only the REPORT command is given, SHREW will
examine and report all records in the current day's ELF log file in
accordance with the type of report specified.
 
Available reports are RAW, DETAIL, SUM, DUMP and DISTRIBUTION.
 
Execution of the REPORT command may be terminated without exiting
SHREW by means of the BREAK key.  SHREW will print the time and date
of the record most recently read and issue a prompt. If a 'C' for
continue is typed, the report will continue. If anything else is
typed, the current report is terminated.
.*B*
The USE command allows the user to direct SHREW to look for
:ELFnnyymmdd files in an account other than :SYS.
 
The SPAN command allows the user to specify a time range which will
constrain SHREW to read and display only those records which were
logged during the specified time frame.
 
The TYPE command allows the user to specify which types of ELF log
records (these types are specific to the ELF log file selected) are
to be reported.
 
Each of the above commands, except REPORT, remain in effect until
another such command is issued or the command is reset to its
default via the RESET command.
.*K* COMMAND_S
Commands are USE, SPAN, TYPE, REPORT, RESET, and END.
 
Type !HELP (SHREW.X) command_name for details.
.*K* DCBS
The following DCBS are used by SHREW:
 
         M$SI      Command Input
         M$LO      Report
         M$DO      Error messages
         M$SECLOG  Access :ELFnnyymmdd files
.*K* USE
Syntax:
 
USE .acct
 
where:
 
.acct is the account which contains the :ELFnnyymmdd files to be
searched.
 
The USE account remains in effect until another USE command is
issued or it is reset by the RESET command.
 
If USE is not specified and no account was specified when SHREW was
invoked, then :SYS is assumed by default.
.*K* SPAN
Syntax:
 
[SP[AN]] [FROM] start {TO|-} stop              or
.*R*
[SP[AN]] [FROM] start                          or
.*R*
[SP[AN]] {TO|-} stop                           or
.*R*
[SP[AN]] LAST n units                          or
.*R*
[SP[AN]] TODAY
 
where:
 
start is a date (mm/dd/yy), time (hh:mm), or both (mm/dd/yy,hh:mm or
hh:mm,mm/dd/yy) which specifies where to begin searching in the ELF
log.
 
stop is formatted the same way as start and tells SHREW to stop
searching records logged after that time.
 
n is an integer.
 
units is one of MI[NUTES], H[OURS], D[AYS], W[EEKS], MO[NTHS], or
Y[EARS].
 
The time range given in the SPAN command will remain in effect until
another SPAN command is issued or it is reset to the default by the
RESET command.
 
If the SPAN command is not issued or is reset, the time range
defaults to today (today's date,00:00 - today's date,23:59).
.*K* TYPE
Syntax:
 
TYPE {ALL | type_list}
 
where:
 
type_list is a list of one or more ELF log types, separated by
commas.  Types are either a log file specific keyword, or a number
between 1 and 511 optionally suffixed by a text string.  If the
optional text string is specified, it will be used as the MNEMONIC
for that type in subsequent reports, unless the same code is defined
specific for the log file being reported.
 
TYPE specifies which type(s) of ELF log records are to be reported.
These types remain in effect until another TYPE command is issued or
TYPE is reset to the default by the RESET command.
 
If a TYPE command is not issued or is reset, the default is ALL.
.*K* RESET
Syntax:
 
RES[ET] [ {ALL | reset_list} ]
 
where:
 
reset_list is a list of one or more parameters to be reset to their
defaults.  Parameters are: U[SE], S[PAN], and T[YPE].
 
If neither ALL nor a reset_list is specified, ALL is assumed.
.*K* REPORT
Syntax:
 
RE[PORT] {RAW|DET[AIL]|SUM|DUMP|DIST[RIBUTION] (distopts)}
          [FOR selection] [{ON|TO|OVER|INTO} fid] [[WITH] SUM[MARY]]
 
REPORT determines the type of report to be produced, where it is to
be placed, and initiates production of the report. If no report fid
is specified, the default is ON ME.
 
A RAW report presents a one-line display of each record falling
within the current SPAN and TYPE selections.  Normally, a RAW report
is likely to leave out details while providing a general view.
 
A DETAIL report presents multiple-line displays of each record
falling within the current SPAN and TYPE selections.  All data
available in each record is provided.
 
A SUM report presents a summary of counts for each record type
falling within the current SPAN and TYPE selections.  The WITH
SUMMARY option will append a SUM report to the end of any other
report.
 
A DUMP report presents an octal dump of each record falling within
the current SPAN and TYPE selections.
 
A DISTRIBUTION report presents a Time Distribution of all occurances
of records falling within the current SPAN for the selected TYPEs.
Required options for the DISTRIBUTION report are:
 
          ( [SUB][SPAN[S]][=]ss, [UNIT[S]][=]uu )
 
Subspan specifies a number between 1 and 99, and divides the current
SPAN into equal-length timespans for the time distribution.  A value
of 0 will divide the current SPAN into as many subspans as will fit
on the display medium.  Units specifies the number of record
occurances which are to be represented by a single mark in the
distribution.  A value of 0 is treated as 1.
 
The optional FOR selection allows filtering by fields in the error
log records other than their type.  For instance, device name or
user id might be used.  The syntax of the "selection" is specific to
each ELF log; some ELF logs do not provide for the FOR selection,
and ignore its specification.
 
The optional fid selection specifies the report is to be written not
to the default ME device, but to (or over, or into) the specified
file or device.
 
The optional SUMMARY selection specifies that in addition to the
RAW, DETAIL, DUMP or DISTRIBUTION report, a summary is to be
generated as well.  This option is, of course, ignored for SUM
reports.
.*K* END
Syntax:
 
{ E[ND] | X[IT] | Q[UIT] }
 
The END command causes SHREW to exit normally.
.*K* XINDEX_ABSTRACT
TOOL=SHREW
.*R*
SHREW displays the contents of ELF log files.
.*K* XINDEX
.*K* OWNER
J.Lance Wilkinson, Penn State Universty Libraries (formerly of Grand
Valley State)
  SHREW based on WEASEL owned by Georgia Horswell, LADC.
.*K* CHANGES ORIGIN
SHREW updated to add DUMP command and fix several bugs on 5/28/87 at
Penn State University by J.Lance Wilkinson
.*B*
SHREW submitted to LADC X account 7/1/86 from Grand Valley State by
J.Lance Wilkinson
.*B*
SHREW based on WEASEL.X implemented at GRVALLEY 12/10/85.
.*K* CUSTOMIZATION
SHREW may be customized by linking into it one or more subroutines
called "ELFnn" where "nn" is a 2-digit number ranging from 04 thru
99, inclusive.  This subroutine is expected to accept 3 arguments:
A Function Code, a Pointer variable, and an ELF log buffer.  It is
expected to NOT have an ALTRET option on its PROCEDURE statement,
and to never alternate return.  It always returns in the pointer
variable a pointer to its results table, which is initialized by the
routine based upon the value of the Function Code and perhaps the
ELF log buffer.  The procedure ELF00 is provided within the source
code of SHREW to serve as a model, and also handle any situation
where there is no appropriate ELFnn module to call.  Should an ELFnn
module be unable to handle its input, it need simply call ELF00
specifying its original input in the same order and then return,
instead of alternate returning.  This will cause the ELFnn module to
be effectively a NOP for the call, treating the data passed as if
ELFnn hadn't existed and thus SHREW needed to call ELF00.
 
Further customization which adds keywords to the syntax of the TYPE
command may be provided.  While optional, this allows SHREW to
recognize keywords as well as numeric codes in TYPE selection,
making it easier to use.  To supply these keywords, a PARTRGE module
must be written, compiled, and included in the set of object units
which are linked to form the SHREW rununit.  The ELFnn module must
reference the new type command defined in that PARTRGE module to
execute function #4.  This PARTRGE module is discussed later in this
topic.  If this feature is not implemented, then the ELFnn module
must call ELF00 when function #4 is requested, passing its
arguments, or SHREW will not operate properly, and likely abort.
 
Customization of the HELP file is also recommended.
 
Still further customization adds a FOR clause to the report command
which allows for content-specific selection of records to be
displayed.  The ELFnn module must handle functions numbered 5 and 6
to do this.  If this features is not to be implemented, then the
ELFnn module must call ELF00 when functions 5 or 6 are requested,
passing its arguments, and then return.  ELF00 honors functions 5
and 6 by IGNORING function 5 (no selection criteria) and always
returning the ACCEPT indicator for function 6 (include any record in
the report).
 
.*B* ELFNN ELFnn
Function Code  Response by ELFnn procedure
============================================
   0           ELFnn should return, in the Pointer variable, the
               address of a Type Name Table initialized with types/
               names appropriate to the ELF log being serviced.
               This table is defined as follows:
                         DCL 1 TBL ALIGNED,
                              2 MAX# UBIN WORD UNAL,
                              2 TBL (0:%(TYPES-1)),
                               3 TYPE UBIN BYTE UNAL,
                               3 TEXT CHAR (23) UNAL,
                               3 COUNT UBIN WORD;
               Where there are "TYPES" defined types for ELFnn, and
               and the count, values, texts and text lengths for thenm
               are stored in TBL.MAX#, TBL.TBL.TYPE, TBL.TBL.TEXT and
               TBL.TBL.COUNT respectively.
 
   1           ELFnn should return, in the Pointer variable, the
               address of the VECTORC table (SYMREF; defined by the
               SYMDEF in ELF00) w/ VECTORC.COUNT & VECTORC.VECTOR_(0)
               thru VECTORC.VECTOR_(VECTORC.COUNT-1) initialized to
               count and frame, respectively, the lines of a RAW
               report heading appropriate to the ELF file that ELFnn
               services and the type code within the ELF log buffer
               supplied.
 
   2           ELFnn should return, in the Pointer variable, the
               address of the VECTORC table (SYMREF; defined by the
               SYMDEF in ELF00) w/ VECTORC.COUNT & VECTORC.VECTOR_(0)
               thru VECTORC.VECTOR_(VECTORC.COUNT-1) initialized to
               count and frame, respectively, the lines of a RAW
               report entry appropriate for the ELF log that ELFnn
               services and the type code within the ELF log buffer
               supplied.  The entry should be only one line long
               (VECTORC.COUNT = 1)) to be in keeping with the intent
               of the RAW report.
 
   3           ELFnn should return, in the Pointer variable, the
               address of the VECTORC table (SYMREF; defined by the
               SYMDEF in ELF00), w/ VECTORC.COUNT & VECTORC.VECTOR_(0)
               thru VECTORC.VECTOR_(VECTORC.COUNT-1) initialized to
               count and frame, respectively, the lines of a DETAIL
               report entry appropriate to the ELF log that ELFnn
               services and the type code within the ELF log buffer
               supplied.  The entry should contain all information
               available within the ELF log buffer, and be one to n
               lines in length, including heading lines, whatever is
               needed to provide that information.  A maximum of 260
               lines is allowed.
 
   4           ELFnn should return, in the Pointer variable, the
               address of the TYPE_nn syntax node which defines the
               syntax of the TYPE command for this file.  The
               address is assumed to resolve a TYPE command syntax,
               and will be processed as such by SHREW.  Any other
               syntax, which cannot be generalized as
                    'TYPE code [,code,code...]
               will likely cause unpredictable results.
 
   5           ELFnn should accept, in the Pointer variable, a pointer
               to an antisymbol parsed in the FOR clause, and initial-
               ize internal data to allow subsequent selection by the
               specified criteria.  ELFnn may handle this initializa-
               tion in any manner desired, and then return.
 
   6           ELFnn should return, in the Pointer variable, a pointer
               to the ELF log buffer passed if the record is to be
               accepted in the report based upon the criteria given in
               the last call to ELFnn with a value of 5 for F#.  If
               the record is not to be included in the report ELFnn
               should return ADDR(NIL) in the Pointer variable.
 
To simplify formatting for functions 1, 2 and 3, call ELF_FORMAT,
which is supplied as part of SHREW.  Its arguments are the same as
those for the host library service X$WRITE, except no fdsname is to
be specified (supply the format vector followed by up to 20 data
vectors).  ELF_FORMAT formats data into the next VECTORC buffer and
advances its counter appropriately.
 
To simplify handling of any function, simply call ELF00 with the
same input arguments recieved.  The default ELF00 handling will be
effected so that only specifically-needed functions need be custom
built.
.*B* PARTRGE
SHREW TYPE command syntax is customized by providing a PARTRGE
module defining the TYPE command syntax.  It is important that this
module define a TYPE command which is basically the same as the
normal SHREW TYPE command, simply providing specific keywords for
numeric codes, or the SHREW main program will be unable to parse the
command, perhaps resulting in not only invalid syntax but also a
program abort.  During initialization, SHREW determines if a syntax
definition for the TYPE command is customized and REPLACES ITS
DEFAULT SYNTAX with that custom version.  SHREW determines the
custom syntax when it calls ELFnn with function code 4.  The
procedure which utilizes this syntax is not changed, however, so the
syntax must match.
 
The recommended format of the syntax to be defined is as follows:
 
    TYPE_nn(%TYPE_CMD,D) = 'TYPE' .B (TYPE_LIST | ALL)
      ALL(%ALL) = 'ALL'
       TYPE_LIST = < (','|.B), ELFnnSYN >
         NUMERIC_TYPE(600) = .DEC3 [.QUOTE20]
      ELFnnSYN = (keyword1|keyword2|keyword3|keyword4|NUMERIC_TYPE)
        keyword1(ddd)             = 'KEY/WORD' '1'
        keyword2(ddd)             = 'KEY/WORD' '2'
        keyword3(ddd)             = 'KEY/WORD' '3'
        keyword4(ddd)             = 'KEY/WORD' '4'
 
The definitions for %TYPE_CMD and %ALL are available by including
%INCLUDE SHREW_C600.:XSI in the source file.  Notice that the
NUMERIC_TYPE element is recommended to be part of the ELFnnSYN
alternatives, so that the user may resort to numeric codes if they
desire.  If used, NUMERIC_TYPE must be defined EXACTLY as shown.
The ALL keyword must also be defined exactly as shown.  You should
substitute the log file number for "nn" wherever found in the above
example.  When completed, the PARTRGE source should should be
compiled and its object unit included in the LINK command which
creates the SHREW rununit.
.*K* FILES SEQUENCING WARNING
Normally (and unfortunately), the additional Error Logs numbered 04
through 99 are not sequenced into ANS-date dependent files as are
the CP-6 security and error log files.  To overcome this, it is the
INSTALLATION's responsibility to copy the appropriate records from,
for example, :ELF55.:SYS into individual files named :ELF55860101,
:ELF55860102, and so on.
 
The following ghost run at the contributer's site on an hourly basis
has been used to accomplish this requirement.
 
  !IF $FID_EXIST(':ELF99.:SYS') THEN MOD :ELF99.:SYS TO HOLD_ELF99
  !IF $FID_EXIST('HOLD_ELF99.:SYS') ;
   THEN C HOLD_ELF99.:SYS INTO ;
           :ELF99%$DATE.:SYS(ACC(?,NOLIST),TY=EL)
  !IF $FID_EXIST('HOLD_ELF99.:SYS') THEN DELETE HOLD_ELF99.:SYS
  !SET M$LL NO
  !LDEV ALL,ERASE,REM
  !OFF NONE
 
Notice the job generates no listing output, and insures that the
error log file is reset to empty.  Notice also that rather than the
PCL Copy command, the program MOLE.X could be used instead.  MOLE.X
has an advantage over simple copying in that it generates one or
more files and guarantees that the output files will contain only
records with timestamps for the associated date.
 
If this sequencing is not done, SHREW will be unable to locate any
error log files.
