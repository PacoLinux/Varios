/*M* UNDEL - Main routine for UNDEL.X */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
UNDEL: PROC MAIN;
       %INCLUDE CP_6;
       %INCLUDE CP_6_SUBS;
       %INCLUDE FM$GRAN;
       %INCLUDE XU_FORMAT_C;
       %INCLUDE XU_MACRO_C;
       %INCLUDE UNDEL_C61;
       %INCLUDE B$JIT;
       %INCLUDE FM$CFU;
       %INCLUDE B_ERRORS_C;
/* */
       %FPT_OPEN(FPTN=OPENSI, DCB=M$SI, ACS=BLOCK, FUN=UPDATE,
          SHARE=NONE, STCLASS=CONSTANT);
       %FPT_CLOSE(FPTN=CLOSESI, DCB=M$SI, DISP=SAVE,
          STCLASS=CONSTANT);
       %FPT_OPEN(FPTN=OPEN_NORM, DCB=M$SI, ACS=DIRECT, FUN=UPDATE,
          STCLASS=CONSTANT);
       %FPT_READ(FPTN=READ_KEY, BUF=RECORD, KEY=KEY, KEYS=YES,
          DCB=M$SI);
       %FPT_DELREC(KEY=KEY, DCB=M$SI);
       %FPT_OPEN(FPTN=OPEN_INPUT, DCB=M$INPUT, RES='ME',
          STCLASS=CONSTANT);
       %FPT_TRUNC(DCB=M$SI, STCLASS=CONSTANT);
       %FPT_PROMPT(PROMPT=PROMPT_BUF, STCLASS=CONSTANT);
       %FPT_PROMPT(FPTN=UNDEL_PROMPT, PROMPT=UPROMPT,
          STCLASS=CONSTANT);
       %FPT_WRITE(FPTN=WRITE_BLOCK, DCB=M$SI, BUF=BUF, KEY=BLOCK,
          FULL=YES, STCLASS=CONSTANT);
       %FPT_READ(FPTN=READ_BLOCK, DCB=M$SI, BUF=BUF, KEY=BLOCK,
          FULL=YES, KEYS=YES, STCLASS=CONSTANT);
       %FPT_WRITE(FPTN=WRITELO, DCB=M$LO, BUF=OBUF);
       %FPT_PRIV(PRIV=%PR_EXMM#, STCLASS=CONSTANT);
       %F$DCB(DCBN=F$DCB, STCLASS="BASED(DCB$)");
       %FM$GRAN(BASED="BASED(BUF$)");
       %FM$KEYENT(BASED="BASED(KEY$)");
       %FM$KEYTBL(BASED="BASED(KTPTR$)");
       %FM$CFU(BASED="BASED(CFU$)");
/* */
       %XUR_INIT;
       %P$PCB(NAME=P$PCB, STCLASS="BASED(PCB$)");
       %PARSE$OUT(NAME=OUT, STCLASS=BASED);
       %PARSE$SYM(NAME=OUT$SYM, STCLASS="BASED(BLK$)");
       %F_FDS(BUF=FBUF, DCB=M$LO);
       %B$TCB;
       %B$ALT;
/* */
       DCL B$TCB$ PTR SYMREF;
       DCL B$JIT$ PTR SYMREF;
/* */
       DCL M$SI DCB;
       DCL M$LO DCB;
       DCL M$INPUT DCB;
/* */
       DCL XUR$INIT ENTRY(3) ALTRET;
       DCL XUR$GETCMD ENTRY(6) ALTRET;
       DCL XUR$ERRMSG ENTRY(7) ALTRET;
       DCL XUR$SETDCBS ENTRY(4) ALTRET;
       DCL X$WRITE ENTRY(22);
       DCL DAM$MAP ENTRY(5) ALTRET;
       DCL DAM$INIT ENTRY ALTRET;
/* */
       %EQU SALUTATION=0;
       %EQU CANT_UNDEL=1;
       %EQU NOKEY=2;
       %EQU NOWRITE=3;
       %EQU ONEKEY=4;
       %EQU KEY=5;
       %EQU RECORD=6;
       %EQU BLANK=7;
       %EQU EQUAL=0;
       %EQU GREATER=1;
       %EQU LESS=2;
/* */
       DCL ASCII_TABLE(0:511) UBIN(9) CALIGNED CONSTANT INIT(
          1*32, 0*95, 1*0);
       DCL FM_FRZERO UBIN CONSTANT INIT(BITBIN('000001000000'O));
       DCL 1 MESSAGE(0:7) CONSTANT,
            2 SIZE UBIN INIT(15, 45, 18, 25, 17, 6, 9, 1),
            2 TEXT CHAR(80) INIT(
'UNDEL A00 Here',
'UNDEL only works on KEYED and INDEXED files.',
'Key does not exist.',
'Can''t write to this file.',
' 1 key undeleted.',
'Key = ',
'Record = ',
' ');
       DCL PROMPT_BUF CHAR(1) CONSTANT INIT(':');
       DCL UPROMPT CHAR(0) CONSTANT INIT('Keep or Delete?');
       DCL NFMT CHAR(0) CONSTANT INIT(' %D keys undeleted.');
       DCL EKEY_FMT CHAR(0) CONSTANT INIT('Key = %D.%3ZD');
       DCL ASCII_REC CHAR(0) CONSTANT INIT('%N.NA %4P');
       DCL ASCII_KEY CHAR(0) CONSTANT INIT('Key = "%N.NA" %4P');
/* */
       DCL FUNCTION SBIN SYMREF;
       DCL REV SBIN SYMREF;
       DCL PCB$ PTR;
       DCL BLK$ PTR;
       DCL UNDEL_COUNT SBIN;
       DCL DA UBIN;
       DCL SAVEDA UBIN;
       DCL RESULT UBIN;
       DCL KEYCNT SBIN;
       DCL BOUND SBIN;
       DCL KTPTR$ PTR;
       DCL KEY$ PTR;
       DCL BUFUP BIT(1);
       DCL FMOD BIT(1);
       DCL CRECX SBIN;
       DCL BLOCK UBIN STATIC;
       DCL FBUF CHAR(256) STATIC;
       DCL DCB$ PTR;
       DCL CFU$ PTR;
       DCL BUF$ PTR STATIC INIT(ADDR(BUF));
       DCL BUF CHAR(4096) STATIC;
       DCL RECORD CHAR(256) STATIC;
       DCL OBUF(0:255) UBIN(9) CALIGNED STATIC;
       DCL OBUFC REDEF OBUF CHAR(256);
       DCL 1 KEY STATIC,
            2 SIZE UBIN(9) CALIGNED,
            2 TEXT CHAR(255) CALIGNED;
       DCL 1 LKEY,
            2 SIZE UBIN(9) CALIGNED,
            2 TEXT CHAR(255) CALIGNED;
/* */
       CALL PRINTERR(%SALUTATION);
       CALL M$OPEN(OPENSI) ALTRET(CROAK);
       CALL M$TRUNC(FPT_TRUNC);
       DCB$=DCBADDR(DCBNUM(M$SI));
       CALL M$SPRIV(FPT_PRIV) ALTRET(CROAK);
       CALL DAM$INIT ALTRET(CROAK);
       CALL DAM$MAP(F$DCB.CFU$, CFU$);
 
       BUFUP='0'B;
       FMOD='0'B;
 
       IF F$DCB.ORG# ~= %INDEXED# AND F$DCB.ORG# ~= %KEYED# THEN
          DO;   /* CANT UNDEL THIS FILE */
          CALL PRINTERR(%CANT_UNDEL);
          CALL QUIT;
          END;  /* CANT UNDEL THIS FILE */
 
       IF (NOT F$DCB.FFLG.WNEW#) OR (NOT F$DCB.FFLG.UPD#) THEN
          DO;   /* CANT WRITE TO THIS FILE */
          CALL PRINTERR(%NOWRITE);
          CALL QUIT;
          END;  /* CANT WRITE TO THIS FILE */
 
       DA=FM_FRZERO;
       CALL READ ALTRET(ERR);
       CALL XUR$INIT(XUR_INIT, PCB$) ALTRET(CROAK);
       CALL XUR$SETDCBS(DCBNUM(M$INPUT)) ALTRET(CROAK);
       CALL M$PROMPT(FPT_PROMPT) ALTRET(CROAK);
 
       DO WHILE ('1'B);
          CALL XUR$GETCMD(FUNCTION, BLK$) ALTRET(SERR);
          UNDEL_COUNT=0;
 
          DO CASE(BLK$->OUT.CODE);
             CASE(%OKEY);
                CALL OKEY;
 
             CASE(%OKEYR);
                CALL OKEYR;
 
             CASE(%TKEY);
                CALL TKEY;
 
             CASE(%TKEYR);
                CALL TKEYR;
 
             CASE(%EKEY);
                CALL EKEY;
 
             CASE(%EKEYR);
                CALL EKEYR;
 
             CASE(%REVIEW);
                CALL REVIEW;
 
             CASE(%ALL);
                CALL ALL;
 
             CASE(%QUIT);
                CALL QUIT;
 
          END;  /* CASE */
          IF UNDEL_COUNT = 1 THEN
             CALL PRINTERR(%ONEKEY);
          ELSE
             CALL X$WRITE(F_FDS, VECTOR(NFMT), VECTOR(UNDEL_COUNT));
 
          DO WHILE ('0'B);
SERR:        CALL SYNERR(1);
          END;
       END;  /* FOREVER */
 
CROAK: CALL MONERR;
ERR:   CALL QUIT;
       %EJECT;
ALL:   PROC;
/* */
       DA=FM_FRZERO;
       CALL READ ALTRET(ERR);
       CALL NXTKEY ALTRET(EOF);
 
       DO WHILE ('1'B);
          CALL UNDEL_KEY;
          CALL NXTKEY ALTRET(EOF);
       END;
 
ERR: ;
EOF:   RETURN;
       END ALL;
       %EJECT;
BUST_EKEY: PROC(BLK$, KEY);
       DCL BLK$ PTR;
       DCL 1 KEY,
            2 SIZE UBIN(9) CALIGNED,
            2 TEXT CHAR(255) CALIGNED;
       DCL TEMP1 UBIN;
       DCL TEMP2 UBIN;
       DCL KEYNUM UBIN(27) CALIGNED;
       DCL KEYNUMC REDEF KEYNUM CHAR(3);
       DCL I UBIN;
/* */
       KEY.SIZE=3;
       CALL CHARBIN(TEMP1, BLK$->OUT.SUBLK$(0)->OUT$SYM.TEXT);
       IF BLK$->OUT.NSUBLKS > 1 THEN
          DO;   /* FRACTIONAL PART */
          CALL CHARBIN(TEMP2, BLK$->OUT.SUBLK$(1)->OUT$SYM.TEXT);
          DO I=0 TO 2-BLK$->OUT.SUBLK$(1)->OUT$SYM.COUNT;
             TEMP2=TEMP2*10;
          END;  /* DO I */
          END;  /* FRACTIONAL PART */
       ELSE
          TEMP2=0;
       KEYNUM=TEMP1*1000+TEMP2;
       KEY.TEXT=KEYNUMC;
       RETURN;
       END BUST_EKEY;
       %EJECT;
BUST_OKEY: PROC(BLK$, KEY);
       DCL BLK$ PTR;
       DCL N SBIN;
       DCL I SBIN;
       DCL KEY(0:767) UBIN(3) UNAL;
       DCL 1 INDEX_KEY REDEF KEY,
            2 SIZE UBIN(9) CALIGNED,
            2 * CHAR(255) CALIGNED;
       DCL CHAR1 CHAR(1);
       DCL START UBIN;
       DCL ENDLOOP UBIN;
/* */
       N=BLK$->OUT$SYM.COUNT;
       IF F$DCB.ORG# = %KEYED# THEN
          DO;   /* KEYED FILE */
          START=0;
          ENDLOOP=N-1;
          END;  /* KEYED FILE */
       ELSE
          DO;   /* INDEXED FILE */
          START=3;
          ENDLOOP=N+2;
          INDEX_KEY.SIZE=(N+2)/3;
          END;  /* INDEXED FILE */
 
       DO I=0 TO N-1;
          CHAR1=SUBSTR(BLK$->OUT$SYM.TEXT, I, 1);
          KEY(I)=ASCBIN(CHAR1)-48;
       END;
 
       RETURN;
       END BUST_OKEY;
       %EJECT;
BUST_TKEY: PROC(BLK$, KEY);
       DCL BLK$ PTR;
       DCL 1 KEY,
            2 SIZE UBIN(9) CALIGNED,
            2 TEXT CHAR(255) CALIGNED;
/* */
       KEY.SIZE=BLK$->OUT$SYM.COUNT;
       KEY.TEXT=BLK$->OUT$SYM.TEXT;
       RETURN;
       END BUST_TKEY;
       %EJECT;
COMKEY: PROC(KEYIN);
       DCL KEYIN SBIN;
/* */
       DCL LEN1 SBIN;
       DCL LEN2 SBIN;
       DCL LEN SBIN;
       DCL KEYIN$ PTR;
/* */
       KEYIN$=ADDR(KEYIN);
       LEN1=KEYIN$->FM$KEYENT.KLB;
       LEN2=FM$KEYENT.KLB;
 
       IF LEN1 <= LEN2 THEN
          LEN=LEN1;
       ELSE
          LEN=LEN2;
 
       IF KEYIN$->FM$KEYENT.TXT > KEY$->FM$KEYENT.TXT THEN
          DO;   /* GREATER */
          RESULT=%GREATER;
          RETURN;
          END;  /* GREATER */
 
       IF KEYIN$->FM$KEYENT.TXT < KEY$->FM$KEYENT.TXT THEN
          DO;   /* LESS */
          RESULT=%LESS;
          RETURN;
          END;  /* LESS */
 
       IF LEN1 = LEN2 THEN
          DO;   /* EQUAL */
          RESULT=%EQUAL;
          RETURN;
          END;  /* EQUAL */
 
       IF LEN1 > LEN2 THEN
          DO;   /* GREATER */
          RESULT=%GREATER;
          RETURN;
          END;  /* GREATER */
 
       RESULT=%LESS;
       RETURN;
       END COMKEY;
       %EJECT;
DUMP:  PROC(BUF, N);
       DCL BUF(0:255) UBIN(9) CALIGNED;
       DCL N SBIN;
       DCL I SBIN;
       DCL J SBIN;
       DCL K SBIN;
       DCL NCHARS SBIN;
       DCL SAVE_NCHARS SBIN;
       DCL N1 SBIN;
       DCL NLOOPS SBIN STATIC;
       DCL NCHARS_SAVE SBIN STATIC;
       DCL BYT UBIN(9) CALIGNED;
       DCL 1 OBYT REDEF BYT CALIGNED,
            2 D1 UBIN(3) UNAL,
            2 D2 UBIN(3) UNAL,
            2 D3 UBIN(3) UNAL;
/* */
       NLOOPS=(N+15)/16;
       N1=N;
       DO I=0 TO NLOOPS-1;
          NCHARS=N1;
          IF NCHARS > 16 THEN
             NCHARS=16;
          N1=N1-16;
          J=1;
          K=0;
          NCHARS_SAVE=NCHARS;
          OBUFC=' ';
          DO WHILE(NCHARS > 0);
             BYT=BUF(I*16+K);
             OBUF(J)=OBYT.D1+48;
             OBUF(J+1)=OBYT.D2+48;
             OBUF(J+2)=OBYT.D3+48;
 
             J=J+3;
             IF MOD(K+3, 4) = 0 THEN
                DO;   /* PUT A DOT */
                OBUF(J)=ASCBIN('.');
                J=J+1;
                END;  /* PUT A DOT */
 
             IF MOD(K, 4) = 3 THEN
                DO;   /* PUT A BLANK */
                OBUF(J)=ASCBIN(' ');
                J=J+1;
                END;  /* PUT A BLANK */
 
             NCHARS=NCHARS-1;
             K=K+1;
          END;  /* WHILE */
 
          NCHARS=NCHARS_SAVE;
          OBUF(J)=ASCBIN(' ');
          OBUF(J+1)=ASCBIN(' ');
          J=J+2;
 
          DO K=0 TO NCHARS-1;
             IF BUF(I*16+K) >= 32 AND BUF(I*16+K) <= 126 THEN
                OBUF(J)=BUF(I*16+K);
             ELSE
                OBUF(J)=ASCBIN('.');
             J=J+1;
          END;
 
          WRITELO.BUF_.BOUND=J-1;
          CALL M$WRITE(WRITELO) ALTRET(MERR);
       END;  /* DO I */
 
       RETURN;
MERR:  CALL MONERR;
       RETURN;
       END DUMP;
       %EJECT;
EKEY:  PROC;
/* */
       CALL BUST_EKEY(BLK$, KEY);
       CALL FINDKEY(KEY) ALTRET(ERR);
       CALL UNDEL_KEY;
       RETURN;
ERR:   CALL PRINTERR(%NOKEY);
       RETURN;
       END EKEY;
       %EJECT;
EKEYR: PROC;
       DCL BLK1$ PTR;
       DCL BLK2$ PTR;
/* */
       BLK1$=BLK$->OUT.SUBLK$(0);
       BLK2$=BLK$->OUT.SUBLK$(1);
       CALL BUST_EKEY(BLK1$, KEY);
       CALL BUST_EKEY(BLK2$, LKEY);
 
       CALL UNDEL_RANGE;
       RETURN;
       END EKEYR;
       %EJECT;
FINDKEY: PROC(KEY) ALTRET;
       DCL KEY UBIN;
/* */
       DCL HIGH UBIN;
       DCL LOW UBIN;
       DCL TCRECX UBIN;
/* */
       DA=FM_FRZERO;
       CALL READ ALTRET(EOF);
 
       DO UNTIL (RESULT ~= %GREATER);
          IF KEYCNT >= BOUND THEN
             KEY$=PINCRW(BUF$, FM$KEYTBL(KEYCNT)+512);
          ELSE
             KEY$=PINCRW(BUF$, FM$KEYTBL(KEYCNT));
 
          CALL COMKEY(KEY);
          IF RESULT = %GREATER THEN
             CALL FLINK ALTRET(EOF);
       END;
 
       LOW=1;
       HIGH=KEYCNT+1;
       TCRECX=(HIGH+LOW)/2;
 
       DO UNTIL (CRECX = TCRECX);
          CRECX=TCRECX;
          IF CRECX < BOUND THEN
             KEY$=PINCRW(BUF$, FM$KEYTBL(CRECX));
          ELSE
             KEY$=PINCRW(BUF$, FM$KEYTBL(CRECX)+512);
 
          CALL COMKEY(KEY);
 
          DO CASE(RESULT);
             CASE(%EQUAL);
                RETURN;
 
             CASE(%GREATER);
                LOW=CRECX;
 
             CASE(%LESS);
                HIGH=CRECX;
 
          END;  /* CASE */
          TCRECX=(LOW+HIGH)/2;
       END;  /* WHILE */
 
       CRECX=HIGH;
 
EOF:   ALTRETURN;
       END FINDKEY;
       %EJECT;
FLINK: PROC ALTRET;
/* */
       DA=FM$GRAN.FLINK;
       IF DA = 0 THEN
          ALTRETURN;
 
       CALL READ ALTRET(ERR);
       RETURN;
ERR:   ALTRETURN;
       END FLINK;
       %EJECT;
MONERR: PROC;
/* */
       CALL XUR$ERRMSG(B$TCB$->B$TCB.ALT$->B$ALT.ERR,
          B$TCB$->B$TCB.ALT$->B$ALT.DCB#);
       RETURN;
       END MONERR;
       %EJECT;
NXTKEY: PROC ALTRET;
/* */
       IF CRECX >= KEYCNT THEN
          CALL FLINK ALTRET(EOF);
 
       CRECX=CRECX+1;
       IF CRECX >= BOUND THEN
          KEY$=PINCRW(BUF$, FM$KEYTBL(CRECX)+512);
       ELSE
          KEY$=PINCRW(BUF$, FM$KEYTBL(CRECX));
 
       RETURN;
EOF:   ALTRETURN;
       END NXTKEY;
       %EJECT;
OKEY:  PROC;
/* */
       BLK$=BLK$->OUT.SUBLK$(0);
       CALL BUST_OKEY(BLK$, KEY);
       CALL FINDKEY(KEY) ALTRET(ERR);
       CALL UNDEL_KEY;
       RETURN;
ERR:   CALL PRINTERR(%NOKEY);
       RETURN;
       END OKEY;
       %EJECT;
OKEYR: PROC ALTRET;
       DCL BLK1$ PTR;
       DCL BLK2$ PTR;
/* */
       BLK1$=BLK$->OUT.SUBLK$(0)->OUT.SUBLK$(0);
       BLK2$=BLK$->OUT.SUBLK$(1)->OUT.SUBLK$(0);
       CALL BUST_OKEY(BLK1$, KEY);
       CALL BUST_OKEY(BLK2$, LKEY);
 
       CALL UNDEL_RANGE;
       RETURN;
       END OKEYR;
       %EJECT;
PRINT: PROC(TEXT, SIZE);
       DCL SIZE SBIN;
       DCL TEXT CHAR(SIZE);
/* */
       OBUFC=TEXT;
       WRITELO.BUF_.BOUND=SIZE-1;
       CALL M$WRITE(WRITELO) ALTRET(ERR);
       RETURN;
 
ERR:   CALL MONERR;
       RETURN;
       END PRINT;
       %EJECT;
PRINTERR: PROC(MESSNUM);
       DCL MESSNUM UBIN;
       DCL MESSBUF CHAR(80);
       DCL I SBIN;
/* */
       I=MESSAGE.SIZE(MESSNUM);
       OBUFC=MESSAGE.TEXT(MESSNUM);
       CALL PRINT(OBUF, I);
       RETURN;
       END PRINTERR;
       %EJECT;
PRINTKEY: PROC(KEY, N);
       DCL KEY CHAR(256) CALIGNED;
       DCL 1 EDIT_KEY REDEF KEY,
            2 SIZE UBIN(9) CALIGNED,
            2 VALUE UBIN(27) CALIGNED,
            2 * CHAR(252) CALIGNED;
       DCL N UBIN;
       DCL I UBIN;
       DCL DUMMY UBIN;
       DCL D1 UBIN;
       DCL D2 UBIN;
       DCL TEMP CHAR(256);
/* */
       IF F$DCB.ORG# = %INDEXED# THEN
          CALL INSERT(TEMP, 0, N, SUBSTR(KEY, 1, N));
       ELSE
          TEMP=KEY;
 
       IF F$DCB.ORG# = %KEYED# AND
          N = 4 THEN
          DO;   /* TREAT AS EDIT KEY */
          D1=EDIT_KEY.VALUE/1000;
          D2=MOD(EDIT_KEY.VALUE, 1000);
          CALL X$WRITE(F_FDS,
             VECTOR(EKEY_FMT),
             VECTOR(D1),
             VECTOR(D2));
          END;  /* TREAT AS EDIT KEY */
       ELSE
          DO;   /* DUMP KEY OUT */
          CALL SEARCH(I, DUMMY, ASCII_TABLE,
             SUBSTR(TEMP, 0, N)) WHENRETURN
             DO;   /* NOT ASCII */
             CALL PRINTERR(%KEY);
             CALL DUMP(TEMP, N);
             END;  /* NOT ASCII */
          WHENALTRETURN
             DO;   /* ASCII */
             CALL X$WRITE(F_FDS,
                VECTOR(ASCII_KEY),
                VECTOR(N),
                VECTOR(N),
                VECTOR(TEMP));
             END;  /* ASCII */
          CALL PRINTERR(%BLANK);
          END;  /* DUMP KEY OUT */
 
       RETURN;
       END PRINTKEY;
       %EJECT;
PRINTREC: PROC(BUF, N);
       DCL BUF CHAR(256);
       DCL N UBIN;
       DCL I UBIN;
       DCL DUMMY UBIN;
/* */
       CALL PRINTERR(%RECORD);
 
       CALL SEARCH(I, DUMMY, ASCII_TABLE,
          SUBSTR(BUF, 0, N)) WHENRETURN
          DO;   /* NOT ASCII */
          CALL DUMP(BUF, N);
          END;  /* NOT ASCII */
       WHENALTRETURN
          DO;   /* ASCII */
          CALL X$WRITE(F_FDS,
             VECTOR(ASCII_REC),
             VECTOR(N),
             VECTOR(N),
             VECTOR(BUF));
          END;  /* ASCII */
 
       CALL PRINTERR(%BLANK);
 
       RETURN;
       END PRINTREC;
       %EJECT;
QUIT:  PROC;
/* */
       IF BUFUP THEN
          CALL M$WRITE(WRITE_BLOCK);
 
CLOSE: CALL M$CLOSE(CLOSESI);
 
DONE:  CALL M$EXIT;
       END QUIT;
       %EJECT;
READ:  PROC ALTRET;
/* */
       IF BUFUP THEN
          CALL M$WRITE(WRITE_BLOCK) ALTRET(ERR);
 
       BLOCK=DA-FM_FRZERO;
       IF SAVEDA ~= DA THEN
          CALL M$READ(READ_BLOCK) ALTRET(ERR);
       KEYCNT=FM$GRAN.KEYCNT;
       CRECX=0;
       KTPTR$=PINCRW(BUF$, FM$GRAN.FCEX);
       BOUND=FM$KEYTBL(0);
       SAVEDA=DA;
       BUFUP='0'B;
 
       RETURN;
ERR:   CALL MONERR;
       ALTRETURN;
       END READ;
       %EJECT;
REVIEW: PROC;
       DCL N SBIN;
       DCL SAVE_CRECX SBIN;
/* */
       DA=FM_FRZERO;
       CALL READ ALTRET(ERR);
       CALL M$PROMPT(UNDEL_PROMPT) ALTRET(MERR);
       CALL NXTKEY ALTRET(EOF);
 
       DO WHILE('1'B);
          IF FM$KEYENT.D THEN
             DO;   /* ASK USER */
             CALL UNDEL_KEY;
             KEY=FM$KEYENT;
             IF BUFUP THEN
                CALL M$WRITE(WRITE_BLOCK) ALTRET(MERR);
             BUFUP='0'B;
             SAVE_CRECX=CRECX;
 
             CALL M$CLOSE(CLOSESI) ALTRET(CROAK);
             CALL M$OPEN(OPEN_NORM) ALTRET(CROAK);
 
             IF F$DCB.ORG# = %KEYED# THEN
                DO;   /* KEYED */
                READ_KEY.KEY_.BOUND=KEY.SIZE;
                READ_KEY.KEY_.KEY$=ADDR(KEY);
                FPT_DELREC.KEY_=READ_KEY.KEY_;
                END;  /* KEYED */
             ELSE
                DO;   /* INDEXED */
                READ_KEY.KEY_.BOUND=KEY.SIZE-1;
                READ_KEY.KEY_.KEY$=ADDR(KEY.TEXT);
                FPT_DELREC.KEY_=READ_KEY.KEY_;
                END;  /* INDEXED */
 
             CALL M$READ(READ_KEY) ALTRET(LD);
             DO WHILE ('0'B);
LD:             IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE ~= %E$LD THEN
                   GOTO MERR;
             END;
 
             N=READ_KEY.KEY_.BOUND+1;
             CALL PRINTKEY(KEY, N);
             CALL PRINTREC(RECORD, F$DCB.ARS#);
 
             DO WHILE ('0'B);
SERR:           CALL SYNERR(5);
             END;
             CALL XUR$GETCMD(REV, BLK$) ALTRET(SERR);
 
             DO CASE(BLK$->OUT.CODE);
                CASE(%DELETE);
                   CALL M$DELREC(FPT_DELREC) ALTRET(MERR);
                   UNDEL_COUNT=UNDEL_COUNT-1;
 
                CASE(%QUIT);
                   CALL M$DELREC(FPT_DELREC) ALTRET(MERR);
                   UNDEL_COUNT=UNDEL_COUNT-1;
                   CALL M$CLOSE(CLOSESI) ALTRET(MERR);
                   CALL M$OPEN(OPENSI) ALTRET(MERR);
                   CALL M$TRUNC(FPT_TRUNC);
                   SAVEDA=0;
 
                   CALL M$PROMPT(FPT_PROMPT);
                   RETURN;
 
             END;  /* CASE */
             CALL PRINTERR(%BLANK);
 
             CALL M$CLOSE(CLOSESI) ALTRET(CROAK);
             CALL M$OPEN(OPENSI) ALTRET(CROAK);
             CALL M$TRUNC(FPT_TRUNC);
             SAVEDA=0;
             CALL READ ALTRET(ERR);
             CRECX=SAVE_CRECX;
             END;  /* ASK USER */
          CALL NXTKEY ALTRET(EOF);
       END;  /* WHILE */
 
ERR: ;
EOF:   CALL M$CLOSE(CLOSESI) ALTRET(MERR);
       CALL M$OPEN(OPENSI) ALTRET(MERR);
       CALL M$TRUNC(FPT_TRUNC);
       SAVEDA=0;
       CALL M$PROMPT(FPT_PROMPT);
       RETURN;
MERR:  CALL MONERR;
       RETURN;
CROAK: CALL MONERR;
       CALL QUIT;
       END REVIEW;
       %EJECT;
SYNERR: PROC(N);
       DCL N SBIN;
       DCL MESSBUF CHAR(80);
       DCL J SBIN;
/* */
       MESSBUF=' ';
       J=PCB$->P$PCB.HI_CHAR+N;
       CALL INSERT(MESSBUF, J, 1, '^');
       CALL PRINT(MESSBUF, J+1);
       CALL PRINT('Syntax error', 12);
       RETURN;
       END SYNERR;
       %EJECT;
TKEY:  PROC;
/* */
       CALL BUST_TKEY(BLK$, KEY);
       CALL FINDKEY(KEY) ALTRET(ERR);
       CALL UNDEL_KEY;
       RETURN;
ERR:   CALL PRINTERR(%NOKEY);
       RETURN;
       END TKEY;
       %EJECT;
TKEYR: PROC ALTRET;
       DCL BLK1$ PTR;
       DCL BLK2$ PTR;
/* */
       BLK1$=BLK$->OUT.SUBLK$(0);
       BLK2$=BLK$->OUT.SUBLK$(1);
       CALL BUST_TKEY(BLK1$, KEY);
       CALL BUST_TKEY(BLK2$, LKEY);
 
       CALL UNDEL_RANGE;
       RETURN;
       END TKEYR;
       %EJECT;
UNDEL_KEY: PROC;
/* */
       IF FM$KEYENT.D THEN
          DO;   /* UNDELETE KEY */
          FM$KEYENT.D='0'B;
          BUFUP='1'B;
          FMOD='1'B;
          UNDEL_COUNT=UNDEL_COUNT+1;
          FM$CFU.NRECS=FM$CFU.NRECS+1;
          END;  /* UNDELETE KEY */
 
       RETURN;
       END UNDEL_KEY;
       %EJECT;
UNDEL_RANGE: PROC;
/* */
       CALL FINDKEY(KEY);
       CRECX=CRECX-1;
       CALL NXTKEY ALTRET(EOF);
 
       DO UNTIL (RESULT ~= %GREATER);
          CALL COMKEY(LKEY);
          IF RESULT ~= %LESS THEN
             DO;   /* UNDELETE KEY */
             CALL UNDEL_KEY;
             CALL NXTKEY ALTRET(EOF);
             END;  /* UNDELETE KEY */
       END;  /* UNTIL */
 
EOF:   RETURN;
       END UNDEL_RANGE;
       END UNDEL;
