/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
MABLE7: PROC(NUM,SRC,SLEN,DST,DLEN) ALTRET;
/*
    MABLE7 builds 7-character block letters from a user CALL,
    one line at a time.  The user specifies the source string
    of ASCII characters and a destination area.  One blank is
    placed between each expanded letter, making the letters 8
    spaces wide.  The arguments are:
 
    NUM - Is the line number to build, range 0-6; UBIN WORD.
    SRC - Is the source string, a CHAR element.
    SLEN - Is the length of SRC in 9-bit characters, UBIN WORD.
    DST - Is the destination string, a CHAR element.
    DLEN - Is the returned length of DST, UBIN WORD.
 
    The user calls MABLE7 7 times, once per line of block letters.
    The returned string may be printed (by the user) or stowed for
    later printing.  MABLE7 isn't fussy what order the lines are
    called for in, so NUM may run from 0 to 6 or 6 to 0 or in any
    other pattern; changing the contents of the source string
    between MABLE7 calls is not recommended, unless you like scrap
    in the output area.
                                                                 */
    DCL NUM                            UBIN;
    DCL SLEN                           UBIN;
    DCL DLEN                           UBIN;
    DCL SRC                            CHAR(SLEN);
    DCL DST                            CHAR(DLEN);
    DCL NC                             UBIN(9) UNAL BASED;
    DCL AC                             CHAR(1) BASED;
    DCL B                              BIT(1) BASED;
    DCL IP                             PTR;
    DCL OP                             PTR;
    DCL TP                             PTR;
    DCL I                              UBIN;
    DCL J                              UBIN;
    DCL K                              UBIN;
/*
                           Letter Patterns
                                                              */
    DCL 1 VALUES UNAL CONSTANT,
        2 * BIT(63) INIT('000000000000000000000'O), /*                        */
        2 * BIT(63) INIT('040040040040040000040'O), /*!*/
        2 * BIT(63) INIT('210210000000000000000'O), /*"*/
        2 * BIT(63) INIT('210774210210210774210'O), /*#*/
        2 * BIT(63) INIT('370444440370044444370'O), /*$*/
        2 * BIT(63) INIT('304450320040130244430'O), /*%*/
        2 * BIT(63) INIT('140220140224410430344'O), /*&*/
        2 * BIT(63) INIT('020040100000000000000'O), /*'*/
        2 * BIT(63) INIT('020040100100100040020'O), /*(*/
        2 * BIT(63) INIT('100040020020020040100'O), /*)*/
        2 * BIT(63) INIT('000250160774160250000'O), /***/
        2 * BIT(63) INIT('000040040774040040000'O), /*+*/
        2 * BIT(63) INIT('000000000000000040100'O), /*,*/
        2 * BIT(63) INIT('000000000774000000000'O), /*-*/
        2 * BIT(63) INIT('000000000000000000040'O), /*.*/
        2 * BIT(63) INIT('004010020040100200400'O), /*/*/
        2 * BIT(63) INIT('370414424444504604370'O), /*0*/
        2 * BIT(63) INIT('040140040040040040160'O), /*1*/
        2 * BIT(63) INIT('370404004370400400774'O), /*2*/
        2 * BIT(63) INIT('370404004170004404370'O), /*3*/
        2 * BIT(63) INIT('410410410410774010010'O), /*4*/
        2 * BIT(63) INIT('774400400770004404370'O), /*5*/
        2 * BIT(63) INIT('370404400770404404370'O), /*6*/
        2 * BIT(63) INIT('774004010020040040040'O), /*7*/
        2 * BIT(63) INIT('370404404370404404370'O), /*8*/
        2 * BIT(63) INIT('370404404374004404370'O), /*9*/
        2 * BIT(63) INIT('000000000040000000040'O), /*:*/
        2 * BIT(63) INIT('000000000040000040100'O), /*;*/
        2 * BIT(63) INIT('014060300400300060014'O), /*<*/
        2 * BIT(63) INIT('000000774000774000000'O), /*=*/
        2 * BIT(63) INIT('600140030004030140600'O), /*>*/
        2 * BIT(63) INIT('370404030040040000040'O), /*?*/
        2 * BIT(63) INIT('370404004344444444330'O), /*@*/
        2 * BIT(63) INIT('370404404774404404404'O), /*A*/
        2 * BIT(63) INIT('770404404770404404770'O), /*B*/
        2 * BIT(63) INIT('370404400400400404370'O), /*C*/
        2 * BIT(63) INIT('770404404404404404770'O), /*D*/
        2 * BIT(63) INIT('774400400760400400774'O), /*E*/
        2 * BIT(63) INIT('774400400760400400400'O), /*F*/
        2 * BIT(63) INIT('370404400474404404370'O), /*G*/
        2 * BIT(63) INIT('404404404774404404404'O), /*H*/
        2 * BIT(63) INIT('160040040040040040160'O), /*I*/
        2 * BIT(63) INIT('004004004004004404370'O), /*J*/
        2 * BIT(63) INIT('404410420740420410404'O), /*K*/
        2 * BIT(63) INIT('400400400400400400774'O), /*L*/
        2 * BIT(63) INIT('404614524444404404404'O), /*M*/
        2 * BIT(63) INIT('404604504444424414404'O), /*N*/
        2 * BIT(63) INIT('370404404404404404370'O), /*O*/
        2 * BIT(63) INIT('770404404770400400400'O), /*P*/
        2 * BIT(63) INIT('370404404444424414370'O), /*Q*/
        2 * BIT(63) INIT('770404404770404404404'O), /*R*/
        2 * BIT(63) INIT('370404400370004404370'O), /*S*/
        2 * BIT(63) INIT('774040040040040040040'O), /*T*/
        2 * BIT(63) INIT('404404404404404404370'O), /*U*/
        2 * BIT(63) INIT('404404210210120120040'O), /*V*/
        2 * BIT(63) INIT('404404404444444444330'O), /*W*/
        2 * BIT(63) INIT('404210120040120210404'O), /*X*/
        2 * BIT(63) INIT('404210120040040040040'O), /*Y*/
        2 * BIT(63) INIT('774010020040100200774'O), /*Z*/
        2 * BIT(63) INIT('160100100100100100160'O), /*[*/
        2 * BIT(63) INIT('400200100040020010004'O), /*\*/
        2 * BIT(63) INIT('160020020020020020160'O), /*]*/
        2 * BIT(63) INIT('040120210404000000000'O), /*^*/
        2 * BIT(63) INIT('000000000000000000774'O), /*_*/
        2 * BIT(63) INIT('100040020000000000000'O), /*`*/
        2 * BIT(63) INIT('000000364414404414364'O), /*a*/
        2 * BIT(63) INIT('400400570604404604570'O), /*b*/
        2 * BIT(63) INIT('000000370404400404370'O), /*c*/
        2 * BIT(63) INIT('004004364414404414364'O), /*d*/
        2 * BIT(63) INIT('000000370404774400374'O), /*e*/
        2 * BIT(63) INIT('160210200700200200200'O), /*f*/
        2 * BIT(63) INIT('000000364414364004770'O), /*g*/
        2 * BIT(63) INIT('400400570604404404404'O), /*h*/
        2 * BIT(63) INIT('040000140040040040160'O), /*i*/
        2 * BIT(63) INIT('040000140040040440300'O), /*j*/
        2 * BIT(63) INIT('400400414460700460414'O), /*k*/
        2 * BIT(63) INIT('140040040040040040160'O), /*l*/
        2 * BIT(63) INIT('000000530644444444444'O), /*m*/
        2 * BIT(63) INIT('000000570604404404404'O), /*n*/
        2 * BIT(63) INIT('000000370404404404370'O), /*o*/
        2 * BIT(63) INIT('000000570604570400400'O), /*p*/
        2 * BIT(63) INIT('000000364414364004004'O), /*q*/
        2 * BIT(63) INIT('000000570604400400400'O), /*r*/
        2 * BIT(63) INIT('000000374400370004770'O), /*s*/
        2 * BIT(63) INIT('100100340100100110060'O), /*t*/
        2 * BIT(63) INIT('000000404404404414364'O), /*u*/
        2 * BIT(63) INIT('000000404404210120040'O), /*v*/
        2 * BIT(63) INIT('000000404404444444330'O), /*w*/
        2 * BIT(63) INIT('000000614120040120614'O), /*x*/
        2 * BIT(63) INIT('000000404210160040700'O), /*y*/
        2 * BIT(63) INIT('000000774010160200774'O), /*z*/
        2 * BIT(63) INIT('030040040100040040030'O), /*{*/
        2 * BIT(63) INIT('040040040000040040040'O), /*|*/
        2 * BIT(63) INIT('300040040020040040300'O), /*}*/
        2 * BIT(63) INIT('000000300444030000000'O), /*~*/
        2 * BIT(63) INIT('774774774774774774774'O); /*                        */
    DCL TABLE REDEF VALUES             CHAR(672);
    DLEN=8*SLEN;
    DST=' ';
    IF NUM>6 THEN
        ALTRETURN;
    IP=ADDR(SRC);
    OP=ADDR(DST);
    DO I=1 TO SLEN;
        K=MOD(IP->NC,128);
        IF K<32 THEN
            K=32;
        TP=ADDR(SUBSTR(TABLE,7*(K-32)+NUM,1));
        DO J=0 TO 6;
            IF TP->B='1'B THEN
                OP->AC=IP->AC;
            TP=PINCRB(TP,1);
            OP=PINCRC(OP,1);
        END;
        OP=PINCRC(OP,1);
        IP=PINCRC(IP,1);
    END;
    RETURN;
END;
