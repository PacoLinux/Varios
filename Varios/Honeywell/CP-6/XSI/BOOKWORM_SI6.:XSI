/*M* BOOKWORM - SORTS TABLES OF CONTENT AND COLLATES INDEXES  */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
%SET LISTSUB='1'B;
 
BOOKWORM: PROC MAIN;
 
/*************************************************************
     INCLUDES
*************************************************************/
%INCLUDE CP_6;
%INCLUDE CP_6_SUBS;
/************************************************************
     DEFINE DCBS
*************************************************************/
DCL M$SI DCB;
DCL M$LO DCB;
DCL M$OU DCB;
/*************************************************************
       XLATE TABLE FOR LC TO UC CONVERSION
*************************************************************/
DCL  1  XTAB1 CONSTANT,
        2 * (0:127) UBIN BYTE UNAL INIT (
0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,
24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,
45,46,47,  ASCBIN('0'),  ASCBIN('1'),  ASCBIN('2'),  ASCBIN('3'),
ASCBIN('4'), ASCBIN('5'),  ASCBIN('6'), ASCBIN('7'), ASCBIN('8'),
ASCBIN('9'), ASCBIN(':'),  ASCBIN(';'), ASCBIN('<'), ASCBIN('='),
ASCBIN('>'), ASCBIN('?'),  ASCBIN('@'), ASCBIN('A'), ASCBIN('B'),
ASCBIN('C'), ASCBIN('D'),  ASCBIN('E'), ASCBIN('F'), ASCBIN('G'),
ASCBIN('H'), ASCBIN('I'),  ASCBIN('J'), ASCBIN('K'), ASCBIN('L'),
ASCBIN('M'), ASCBIN('N'),  ASCBIN('O'), ASCBIN('P'), ASCBIN('Q'),
ASCBIN('R'), ASCBIN('S'),  ASCBIN('T'), ASCBIN('U'), ASCBIN('V'),
ASCBIN('W'), ASCBIN('X'),  ASCBIN('Y'), ASCBIN('Z'), ASCBIN('['),
ASCBIN('\'), ASCBIN(']'),  ASCBIN('^'), ASCBIN('_'), ASCBIN('`'),
ASCBIN('A'), ASCBIN('B'),  ASCBIN('C'), ASCBIN('D'), ASCBIN('E'),
ASCBIN('F'), ASCBIN('G'),  ASCBIN('H'), ASCBIN('I'), ASCBIN('J'),
ASCBIN('K'), ASCBIN('L'),  ASCBIN('M'), ASCBIN('N'), ASCBIN('O'),
ASCBIN('P'), ASCBIN('Q'),  ASCBIN('R'), ASCBIN('S'), ASCBIN('T'),
ASCBIN('U'), ASCBIN('V'),  ASCBIN('W'), ASCBIN('X'), ASCBIN('Y'),
ASCBIN('Z'), ASCBIN('{'),  ASCBIN('|'), ASCBIN('}'), ASCBIN('~'),
0),
 
        2 * (0:31)  BIT(36) INIT (
 '200201202203'O, '204205206207'O, '210211212213'O, '214215216217'O,
 '220221222223'O, '224225226227'O, '230231232233'O, '234235236237'O,
 '240241242243'O, '244245246247'O, '250251252253'O, '254255256257'O,
 '260261262263'O, '264265266267'O, '270271272273'O, '274275276277'O,
 
 '300301302303'O, '304305306307'O, '310311312313'O, '314315316317'O,
 '320321322323'O, '324325326327'O, '330331332333'O, '334335336337'O,
 '340341342343'O, '344345346347'O, '350351352353'O, '354355356357'O,
 '360361362363'O, '364365366367'O, '370371372373'O, '374375376377'O);
 
/****************************************************************
      LOCAL STATIC STORAGE
****************************************************************/
/******************  KEY STRUCURE FOR *:TOC   ***********************/
DCL 1 KEY4 CALIGNED STATIC,
      2 COUNT UBIN BYTE CALIGNED INIT(4),
      2 REMAINDER CALIGNED CHAR(4);
/*******************  KEY STRUCTURE FOR *:INDEX   ******************/
DCL 1 KEY69 CALIGNED STATIC,
      2 COUNT UBIN BYTE CALIGNED INIT(69),
      2 REMAINDER CALIGNED CHAR(69);
/************            BUFFERS    *********************************/
DCL BUF1 CHAR(255) STATIC INIT(' ');
DCL BUF1U CHAR(255) STATIC INIT(' ');
DCL BUF2 CHAR(255) STATIC INIT(' ');
/**************  ACTUAL RECORD SIZE COUNTERS   **********************/
DCL BUF1ARS UBIN WORD STATIC;
DCL BUF2ARS UBIN WORD STATIC;
DCL M$SI$ PTR STATIC;
DCL M$OU$ PTR STATIC;
/************   POINTER DECLARATION FOR ERROR PROCESSING   **********/
DCL B$TCB$ PTR SYMREF;
/***********   SOME ASSORTED DATA USED FOR INDEX MUNGING   **********/
DCL BUF1R UBIN WORD STATIC;
DCL OLD_TERM CHAR(255) STATIC;
DCL INL5 CHAR(0) STATIC INIT ('.INL 5');
DCL UNL5 CHAR(0) STATIC INIT ('.UNL 5');
DCL BRF  CHAR(0) STATIC INIT ('.BRF  ');
/*********************************************************************
         INPUT OUTPUT FPTS
*********************************************************************/
 
%FPT_OPEN  (FPTN=OPEN_SI_READ_TOC,
              DCB=M$SI,
                   ASN=FILE,
              NAME=TOC_FILE);
    %VLP_NAME(FPTN=TOC_FILE,
              NAME='*:TOC');
 
%FPT_OPEN  (FPTN=OPEN_SI_READ_INDEX,
              DCB=M$SI,
               ASN=FILE,FUN=IN,
              NAME=INDEX_FILE);
    %VLP_NAME(FPTN=INDEX_FILE,
              NAME='*:INDEX');
 
%FPT_OPEN  (FPTN=OPEN_SI_READ_SCRATCH,
              DCB=M$SI,
              ASN=FILE,
              NAME=SCRATCH1);
    %VLP_NAME(FPTN=SCRATCH1,
                NAME='*******$$$$$$$');
 
%FPT_OPEN (FPTN=OPEN_OU_WRITE_KEYED,
              DCB=M$OU,
              ACS=DIRECT,
              ORG=KEYED);
 
%FPT_OPEN (FPTN=OPEN_OU_WRITE_KEYED_NAMED,
              DCB=M$OU,
              ACS=DIRECT,
              SCRUB=YES,
              ORG=KEYED,
              ASN=FILE, EXIST=NEWFILE, FUN=CREATE,
              NAME=SCRATCH);
      %VLP_NAME(FPTN=SCRATCH,
                NAME='*******$$$$$$$');
 
%FPT_OPEN (FPTN=OPEN_OU_WRITE_CONSEC,
              SCRUB=YES,
              DCB=M$OU,
              ORG=CONSEC,
              ASN=FILE,
              FUN=CREATE,
              EXIST=NEWFILE,
              NAME=SCRATCH2);
        %VLP_NAME(FPTN=SCRATCH2,
         NAME='****$$$$');
 
%FPT_CLOSE (FPTN=CLOSE_SI_SAVE,
              DISP=SAVE,
              DCB=M$SI);
 
%FPT_CLOSE (FPTN=CLOSE_SI_RELEASE,
              DISP=RELEASE,
              DCB=M$SI);
 
%FPT_CLOSE (FPTN=CLOSE_OU_SAVE,
              DISP=SAVE,
              DCB=M$OU);
 
%FPT_CLOSE (FPTN=CLOSE_OU_RELEASE,
              DISP=RELEASE,
              DCB=M$OU);
 
%FPT_CLOSE (FPTN=REBUILD_OU_INDEX,
            DCB=M$OU,
            DISP=SAVE,
            REBLD=YES);
 
%FPT_OPEN  (FPTN=REOPEN_OU_UPDATE,
            DCB=M$OU,
            FUN=UPDATE);
 
%FPT_OPEN (FPTN=OPEN_SI_WRITE_TOC,
              EXIST=NEWFILE,
              FUN=CREATE,
              ACS=SEQUEN,
              ORG=CONSEC,
              DCB=M$SI,
              ASN=FILE,
              NAME=TOC_FILE1);
    %VLP_NAME(FPTN=TOC_FILE1,
              NAME='*:TOC');
 
%FPT_OPEN (FPTN=OPEN_SI_WRITE_INDEX,
              EXIST=NEWFILE,
              FUN=CREATE,
              ACS=SEQUEN,
              ORG=CONSEC,
              DCB=M$SI,
              ASN=FILE,
              NAME=INDEX_FILE1);
    %VLP_NAME(FPTN=INDEX_FILE1,
              NAME='*:INDEX');
 
%FPT_OPEN (FPTN=REOPEN_OU,
              FUN=IN,
              DCB=M$OU,
              ASN=FILE);
 
%FPT_OPEN (FPTN=REOPEN_OU_NAMED,
              FUN=IN,
              DCB=M$OU,
              ASN=FILE,
              NAME=SCRATCH3);
     %VLP_NAME(FPTN=SCRATCH3,
              NAME='****$$$$');
 
%FPT_WRITE (FPTN=WRITE_LO,
            DCB=M$LO,
            BUF=BUF2);
 
%FPT_READ (FPTN=READ_BUF1,
              DCB=M$SI,
              BUF=BUF1,
              WAIT=YES);
 
%FPT_READ (FPTN=READ_BUF2,
              DCB=M$SI,
              BUF=BUF2,
              WAIT=YES);
 
%FPT_READ (FPTN=READ_OU_BUF1,
              DCB=M$OU,
              BUF=BUF1);
 
%FPT_WRITE (FPTN=WRITE_OU,
              DCB=M$OU,
              BUF=BUF1,
              WAIT=YES);
 
%FPT_WRITE (FPTN=WRITE_SI_BUF1,
              DCB=M$SI,
              BUF=BUF1);
 
%FPT_WRITE (FPTN=WRITE_OU_KEY,
              DCB=M$OU,
              BUF=BUF2,
              ONEWKEY=YES,
              WAIT=YES);
/*********************************************************************
     BASED DEFINITIONS
*********************************************************************/
%F$DCB;
%EJECT;
/* ************************************************************
   ***                                                      ***
   ***  Begin   B O O K W O R M   main program              ***
   ***                                                      ***
   ************************************************************ */
 
/*******************************************************************
      RESEQUENCE *:TOC
*******************************************************************/
TOC_SORTER: ;
        M$SI$ = DCBADDR(DCBNUM(M$SI));
        M$OU$ = DCBADDR(DCBNUM(M$OU));
/********************   OPEN TO *:TOC  ****************************/
        CALL M$OPEN (OPEN_SI_READ_TOC) ALTRET (INDEX_SORTER);
/*******************  OPEN TO *G WRITE WITH KEYS   ***************/
        CALL M$OPEN (OPEN_OU_WRITE_KEYED_NAMED) ALTRET (INDEX_SORTER);
        DO WHILE ('1'B);
           BUF1=' ';
           BUF2=' ';
           CALL M$READ (READ_BUF1) ALTRET (END_OF_TOC);
           BUF1ARS = M$SI$ -> F$DCB.ARS#;
           IF BUF1ARS < 5 THEN GOTO DONE_WITH_TOC1;
           KEY4.REMAINDER=SUBSTR(BUF1,0,4);
           WRITE_OU_KEY.KEY_ = VECTOR(KEY4);
           WRITE_OU_KEY.BUF_=VECTOR(SUBSTR(BUF1,4,BUF1ARS-4));
           CALL WRITE_OU_RECORD ALTRET (INDEX_SORTER);
           END;
END_OF_TOC: ;
        CALL M$CLOSE (CLOSE_SI_SAVE);
        CALL M$CLOSE (CLOSE_OU_SAVE);
/*******************  REOPEN M$SI AND M$OU   ************************/
        CALL M$OPEN (OPEN_SI_WRITE_TOC) ALTRET (INDEX_SORTER);
        CALL M$OPEN (REOPEN_OU) ALTRET (INDEX_SORTER);
        DO WHILE ('1'B);
           BUF1=' ';
           BUF2=' ';
           CALL M$READ (READ_OU_BUF1) ALTRET (DONE_WITH_TOC);
           BUF1ARS = M$OU$ -> F$DCB.ARS#;
           WRITE_SI_BUF1.BUF_=VECTOR(SUBSTR(BUF1,0,BUF1ARS));
           CALL M$WRITE (WRITE_SI_BUF1) ALTRET (DONE_WITH_TOC);
           END;
DONE_WITH_TOC: ;
        BUF2='File *:TOC Sorted';
        CALL M$WRITE(WRITE_LO);
DONE_WITH_TOC1: ;
        CALL M$CLOSE (CLOSE_SI_SAVE);
        CALL M$CLOSE (CLOSE_OU_RELEASE);
 
/*********************************************************************
         REORDER THE INDEX FOR BOOKWORM PROCESSSING
*********************************************************************/
INDEX_SORTER: ;
        CALL M$OPEN (OPEN_OU_WRITE_KEYED_NAMED) ALTRET (MXXX);
        CALL M$OPEN(OPEN_SI_READ_INDEX) ALTRET (MUST_BE_OU_EOF1);
        M$SI$ = DCBADDR(DCBNUM(M$SI));
        DO WHILE ('1'B);
           BUF1=' ';
           BUF2=' ';
READ_INDX: CALL M$READ (READ_BUF1) ALTRET (END_OF_INDEX);
           BUF1ARS = M$SI$ -> F$DCB.ARS#;
           IF BUF1ARS < 70 THEN GOTO READ_INDX;
           KEY69.REMAINDER=SUBSTR(BUF1,0,69);
           WRITE_OU_KEY.KEY_ = VECTOR(KEY69);
           WRITE_OU_KEY.BUF_=VECTOR(SUBSTR(BUF1,69,BUF1ARS-69));
           CALL WRITE_OU_RECORD ALTRET (MXXX);
           END;
END_OF_INDEX: ;
        CALL M$CLOSE (CLOSE_SI_SAVE);
        CALL M$CLOSE (CLOSE_OU_SAVE);
/****************************************************************
        SECOND PASS AT THE INDEX
****************************************************************/
 
 
 
/***************************************************************
    EXPLICITLY OPEN M$SI TO THE SCRATCH FILE
***************************************************************/
        CALL M$OPEN (OPEN_SI_READ_SCRATCH) ALTRET (MXXX);
        CALL M$OPEN (OPEN_OU_WRITE_CONSEC) ALTRET (MXXX);
 
/* ************************************************************
   ***                                                      ***
   ***  PHASE 1: REMOVE EXCESS LEVEL 4 HEAD MACROS          ***
   ***                                                      ***
   ************************************************************ */
 
 
        BUF1 = ' ';
        CALL M$READ (READ_BUF1) ALTRET (CLOSE_INDEX);
        BUF1ARS = M$SI$ -> F$DCB.ARS#;
 
TOP_OF_LOOP: ;
        BUF2 = ' ';
        CALL M$READ (READ_BUF2) ALTRET (MUST_BE_EOF);
        BUF2ARS = M$SI$-> F$DCB.ARS#;
 
        IF SUBSTR(BUF1,0,6) ~= '..:L4H'
          OR
          SUBSTR(BUF2,0,6) ~= '..:L4H'
        THEN
        DO;
           WRITE_OU.BUF_.BOUND=BUF1ARS-1;
           CALL M$WRITE (WRITE_OU) ALTRET (MXXX);
 
           IF SUBSTR(BUF1,0,6) = '..:L4H'
           THEN
           DO;
              WRITE_OU.BUF_ = VECTOR (INL5);
              CALL M$WRITE (WRITE_OU) ALTRET (MXXX);
              WRITE_OU.BUF_ = VECTOR (BUF1);
              END;                      /* DO IF WE JUST DUMPED A L4H         */
 
           END;                         /* DO IF NOT ..:L4H                   */
 
        BUF1ARS = BUF2ARS;
        BUF1 = BUF2;
 
        GOTO TOP_OF_LOOP;
 
MUST_BE_EOF: ;
 
        IF SUBSTR(BUF1,0,6) ~= '..:L4H'
        THEN
        DO;
           WRITE_OU.BUF_.BOUND = BUF1ARS - 1;
           CALL M$WRITE (WRITE_OU) ALTRET (MXXX);
           END;                         /* DO IF NOT ..:L4H                   */
 
CLOSE_INDEX: ;
        CALL M$CLOSE (CLOSE_SI_RELEASE) ALTRET (MXXX);
        CALL M$CLOSE (CLOSE_OU_SAVE) ALTRET (MXXX);
 
        DO WHILE ('0'B);
 
MXXX:      ;
           CALL M$XXX;
 
           END;                         /* DO WHILE ALTRETTING                */
 
 
%EJECT;
 
/* ********************************************************
   ***                                                  ***
   ***    PHASE 2: PROCESS INDEX TERMS                  ***
   ***                                                  ***
   ******************************************************** */
 
        CALL M$OPEN (OPEN_SI_WRITE_INDEX) ALTRET (MXXX);
 
        CALL M$OPEN (REOPEN_OU_NAMED) ALTRET (MXXX);
 
GET_MORE_OU: ;
        BUF1 = ' ';
        CALL M$READ (READ_OU_BUF1) ALTRET (MUST_BE_OU_EOF);
        BUF1ARS = M$OU$->F$DCB.ARS#;
 
        IF SUBSTR(BUF1,0,2) ~= '  '
        THEN
        DO;
           WRITE_SI_BUF1.BUF_.BOUND = BUF1ARS - 1;
           CALL M$WRITE (WRITE_SI_BUF1) ALTRET (MXXX);
           GOTO GET_MORE_OU;
           END;                         /* DO IF NO BLANKS AT FRONT           */
        ELSE
        DO;
 
           CALL XLATE (BUF1U, XTAB1, BUF1);
 
 
           CALL INDEX (BUF1R, ' -  ', BUF1U) ALTRET (MXXX);
           IF OLD_TERM ~= SUBSTR (BUF1U,0,BUF1R)
           THEN
           DO;
              OLD_TERM = SUBSTR (BUF1U,0,BUF1R);
              WRITE_SI_BUF1.BUF_ = VECTOR (BRF);
              CALL M$WRITE (WRITE_SI_BUF1) ALTRET (MXXX);
              WRITE_SI_BUF1.BUF_ = VECTOR (UNL5);
              CALL M$WRITE (WRITE_SI_BUF1) ALTRET (MXXX);
              WRITE_SI_BUF1.BUF_ = VECTOR (BUF1);
              WRITE_SI_BUF1.BUF_.BOUND = BUF1R+1;
              CALL M$WRITE (WRITE_SI_BUF1) ALTRET (MXXX);
 
              WRITE_SI_BUF1.BUF_ = VECTOR (SUBSTR(BUF1,BUF1R+4,BUF1ARS-BUF1R+4+1));
              CALL M$WRITE (WRITE_SI_BUF1) ALTRET (MXXX);
 
              WRITE_SI_BUF1.BUF_ = VECTOR (BUF1);
 
              END;                      /* DO IF NEW TERM                     */
           ELSE
           DO;
              WRITE_SI_BUF1.BUF_ = VECTOR (SUBSTR(BUF1,BUF1R+4,BUF1ARS-BUF1R+4+1));
              CALL M$WRITE (WRITE_SI_BUF1) ALTRET (MXXX);
 
              WRITE_SI_BUF1.BUF_ = VECTOR (BUF1);
 
              END;                      /* DO IF NOT NEW TERM                 */
 
           END;                         /* DO IF NOT 2 SPACES                 */
 
        GOTO GET_MORE_OU;
 
 
MUST_BE_OU_EOF: ;
        BUF2='File *:INDEX Collated';
        CALL M$WRITE(WRITE_LO);
 
MUST_BE_OU_EOF1: ;
        CALL M$CLOSE (CLOSE_SI_SAVE);
 
        CALL M$CLOSE (CLOSE_OU_RELEASE);
 
        CALL M$EXIT;
 
%EJECT;
WRITE_OU_RECORD: PROC ALTRET;
 
   CALL M$WRITE (WRITE_OU_KEY)
     WHENALTRETURN DO;
      ALTRETURN;
      END;
 
   IF M$OU$ -> F$DCB.RDL0# >= M$OU$ -> F$DCB.LRDL0#
     THEN DO;
 
      CALL M$CLOSE (REBUILD_OU_INDEX)
       WHENALTRETURN DO;
         ALTRETURN;
         END;
 
      CALL M$OPEN (REOPEN_OU_UPDATE)
       WHENALTRETURN DO;
         ALTRETURN;
         END;
 
      END;
 
   RETURN;
 
END WRITE_OU_RECORD;
 
END BOOKWORM;
