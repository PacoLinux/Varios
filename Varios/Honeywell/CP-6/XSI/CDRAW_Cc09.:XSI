/*M*    cdraw$sym.h -- symbol table management routines       */
 
#ifndef __CDRAW_SYM_H
#define __CDRAW_SYM_H
 
 
/*B*    NAME:    HashTable
        PURPOSE: To define the structure of a hash_table.
        DESCRIPTION:
           This structure is provided in order to
           declare a generic hash_table and initialize it.
*/
 
/*B*    NAME:    struct sym_
        PURPOSE: To provide a generic sym_ entry.
        DESCRIPTION:
           This defines the symbol table entry used by the
           generic symbol table manager.  The table provides
           a single field for the user which is a void *.
 
           The members are:
 
           next           pointer to next name with same hash
           sym_len        length of this name
           sym_text       pointer to name text
           sym_user       pointer to user info.
*/
 
struct sym_   {
  struct   sym_     *next;      /*    next name on this hash chain  */
  int                sym_len;   /*    Length of this name           */
  char              *sym_text;  /*    Name                          */
  void              *sym_user;  /*    User-defined field            */
  };
 
#ifndef HASH_SIZE
#define HASH_SIZE 191
#endif
 
struct  HashTable  {
  int         hash_size;     /*  Number of entries in table      */
  int         hash_hits;     /*  Number of used entries in table */
  int         hash_syms;     /*  Number of symbols inserted      */
  int         hash_cmprs;    /*  Number of comparisons           */
  int         hash_looks;    /*  Number of lookups               */
  struct sym_ *hash_table[HASH_SIZE];
  };
 
struct sym_ *lookup_sym  ProToType( (struct HashTable *, char *, int, int) );
 
#endif
