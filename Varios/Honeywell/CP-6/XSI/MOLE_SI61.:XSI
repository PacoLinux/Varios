/*M* MOLE -- Make Ordinal Logs from ELF */
/*T***********************************************************/
/*T*                                                         */
/*T* COPYRIGHT, (C)                                          */
/*T*                                                         */
/*T***********************************************************/
 
 
/*  Contributed by
        Penn State University Libraries  -  J.L.Wilkinson
         Although this program has been tested by its contributor,
         no warranty, express or implied, is made by the
         contributor or Penn State University, as to the
         accuracy and functioning of the program and related
         program materials, nor shall the fact of distribution
         constitute any such warranty, and no responsibility is
         assumed by the contributor or Penn State University.
*/
 
/*X* */
/**
 *     MOLE reads an Error Log file built by ELF and fans out its
 *     records into one or more files, one day's records to each
 *     file, indexed by timestamp and counter.  This emulates the
 *     action of EFT for :ERRLOG?.:SYSTAC for :ELF04 thru :ELF99
 *     which may be generated from various system and application
 *     programs using the M$WRSYSLOG monitor service.  Files output
 *     by MOLE are suitable for use by SHREW.
 **/
       MOLE:                           PROC
                                       MAIN
                                       ALTRET;
/**
 *                 LOCAL VARIABLE DECLARATIONS
 **/
DCL    M$ELFLOG                        DCB;
DCL    M$OU                            DCB;
DCL    M$LO                            DCB;
DCL    M$DO                            DCB;
DCL    M$LM                            DCB;
DCL    BROKEN                          STATIC SYMDEF
                                       BIT    (1)
                                       INIT   ('0'B);
DCL    TXT                             STATIC
                                       CHAR   (22);
DCL  1 TX  REDEF TXT,
       2 TIME                          CHAR   (11),
       2 *                             CHAR   (1),
       2 DATE                          CHAR   (8),
       2 SEMIS                         CHAR   (2);
DCL    SHUTDOWN                        REMEMBER;
/**
 *                 PARALLEL EXTERNAL REQUIREMENTS
 **/
DCL    BREAK_ENTRY                     ENTRY     ASYNC;
/**
 *                 SYSTEM SOFTWARE REQUIREMENTS
 **/
%INCLUDE CP_6;
%INCLUDE CP_6_SUBS;
/**/
%FPT_INT           (FPTN=FPT_INT,
                    UENTRY=BREAK_ENTRY);
/**/
%FPT_READ          (FPTN=FPT_READ,
                    DCB=M$ELFLOG);
/**/
%FPT_PRECORD       (FPTN=FPT_PRECORD,
                    DCB=M$ELFLOG,
                    N=-1);
/**/
%FPT_GDS           (FPTN=FPT_GDS,
                    RESULTS=VLP_VECTOR);
/**/
%VLP_VECTOR        (FPTN=VLP_VECTOR);
/**/
%F$DCB;
/**/
%INCLUDE B_ERRORS_C;
/**/
%B$TCB;
%B$ALT;
DCL    B$TCB$                          PTR       SYMREF;
/**/
DCL  1 B_VERSION                       SYMREF              ALIGNED,
       2 *                             UBIN   BYTE         UNAL,
       2 *                             CHAR   (3)          CALIGNED;
/**/
DCL    XUR$CLOSE_DCBS                  ENTRY  (2);
%SPACE 2;
/*********************************************************************
*
*          P@ERROR           Display error messages
*/
       P@ERROR:                        PROC
           (CODE,ALTCODE,U1,U2,U3,FDCB);
/**
 *                 PARAMETER DECLARATIONS
 **/
DCL    CODE                            SBIN   WORD;
DCL    ALTCODE /* CP6, etc. */         BIT    (36);
DCL    U1                              CHAR  (33);
DCL    U2                              CHAR  (33);
DCL    U3                              CHAR  (33);
DCL    FDCB                            SBIN   WORD;
/**
 *                 LOCAL VARIABLE DECLARATIONS
 **/
DCL    X                               SBIN   WORD;
DCL    Y                               SBIN   WORD;
DCL    BUFFER                          STATIC
                                       CHAR   (120);
DCL  1 TC$UX (0:2)                     ALIGNED,
       2 LEN#                          UBIN   BYTE         UNAL,
       2 TEXT#                         CHAR   (31)         UNAL;
DCL    U$ (0:2)                        PTR;
DCL    U  (0:2)                        CHAR   (33);
DCL    HOLD$                           PTR;
/**
 *                 SYSTEM SOFTWARE REQUIREMENTS
 **/
%FPT_ERRMSG        (FPTN=FPT_ERRMSG,
                    BUF=BUFFER,
                    INCLCODE=NO,
                    OUTDCB1=M$LO,
                    OUTDCB2=M$DO,
                    SUBAC=NO,
                    SUBDC=NO,
                    SUBFILE=NO,
                    SUBSN=NO,
                    VFC='a');
%VLP_ERRCODE       (FPTN=VLP_ERRCODE);
/**/
                   /**********************
                    *  BEGIN  PROCEDURE  *
                    **********************/
/**/
           FPT_ERRMSG.FIELD1_ = VECTOR(NIL);  U$(0)=ADDR(NIL);
           FPT_ERRMSG.FIELD2_ = VECTOR(NIL);  U$(1)=ADDR(NIL);
           FPT_ERRMSG.FIELD3_ = VECTOR(NIL);  U$(2)=ADDR(NIL);
           IF  ADDR(U1)~=ADDR(NIL)     THEN DO;
                                       U(0) = U1;
                                       U$(0) = ADDR(U1);
                                       END;
           IF  ADDR(U2)~=ADDR(NIL)     THEN DO;
                                       U(1) = U2;
                                       U$(1) = ADDR(U2);
                                       END;
           IF  ADDR(U3)~=ADDR(NIL)     THEN DO;
                                       U(2) = U3;
                                       U$(2) = ADDR(U3);
                                       END;
       DO Y = 0 TO 2;
           IF  U$(Y)~=ADDR(NIL)
                   THEN DO;
                   TC$UX.LEN#(Y) = 0;
                   CALL      INDEX (X,';;',U(Y))
                             WHENRETURN DO;
                             TC$UX.LEN#(Y) = X;
                             END;
                             WHENALTRETURN DO;
                             CALL      INDEX (X,BINASC(Y),U(Y))
                                       WHENRETURN DO;
                                       TC$UX.LEN#(Y) = X;
                                       END;
                             END;
                   TC$UX.TEXT#(Y) = U(Y);
                   IF  TC$UX.LEN#(Y) > 0
                             THEN DO CASE(Y);
                   CASE(0);  FPT_ERRMSG.FIELD1_ = VECTOR(TC$UX(Y));
                   CASE(1);  FPT_ERRMSG.FIELD2_ = VECTOR(TC$UX(Y));
                   CASE(2);  FPT_ERRMSG.FIELD3_ = VECTOR(TC$UX(Y));
                             END;
                   END;
       END;
       L0: IF  ADDR(FDCB)~=ADDR(NIL)
                   THEN DO;
                   FPT_ERRMSG.V.DCB# = FDCB;
                   FPT_ERRMSG.V.SUBFN# = '1'B;
                   END;
                   ELSE DO;
                   FPT_ERRMSG.V.DCB# = DCBNUM(NIL);
                   FPT_ERRMSG.V.SUBFN# = '0'B;
                   END;
           VLP_ERRCODE = '0'B;
           VLP_ERRCODE.ERR# = CODE;
           FPT_ERRMSG.CODE_ = VECTOR(VLP_ERRCODE);
           FPT_ERRMSG.FILENAME_ = VECTOR(DCBADDR(DCBNUM(M$LM))
                                          ->F$DCB.NAME#);
           FPT_ERRMSG.FILEACCT_ = VECTOR(DCBADDR(DCBNUM(M$LM))
                                          ->F$DCB.ACCT#);
           CALL    M$ERRMSG (FPT_ERRMSG)
                                       WHENALTRETURN DO;
                                       END;
           IF  ADDR(ALTCODE)=ADDR(NIL) THEN      RETURN;
           IF  ALTCODE='0'B            THEN      RETURN;
           FPT_ERRMSG.FIELD1_ = VECTOR(NIL);
           FPT_ERRMSG.FIELD2_ = VECTOR(NIL);
           FPT_ERRMSG.FIELD3_ = VECTOR(NIL);
           VLP_ERRCODE = ALTCODE;
           FPT_ERRMSG.CODE_ = VECTOR(VLP_ERRCODE);
           FPT_ERRMSG.V.DCB# = DCBNUM(NIL);
           FPT_ERRMSG.FILENAME_ = VECTOR(NIL);
           FPT_ERRMSG.FILEACCT_ = VECTOR(NIL);
           FPT_ERRMSG.V.SUBFN# = '0'B;
           CALL    M$ERRMSG (FPT_ERRMSG)
                                       WHENALTRETURN DO;
                                       END;
           RETURN;
/**
 **/
       P@TC$ERROR:                               ENTRY
           (CODE,ALTCODE,U1,U2,U3,FDCB);
/**/
           IF  ADDR(U1)~=ADDR(NIL)
                             THEN      FPT_ERRMSG.FIELD1_ = VECTOR(U1);
                             ELSE      FPT_ERRMSG.FIELD1_ = VECTOR(NIL);
           IF  ADDR(U2)~=ADDR(NIL)
                             THEN      FPT_ERRMSG.FIELD2_ = VECTOR(U2);
                             ELSE      FPT_ERRMSG.FIELD2_ = VECTOR(NIL);
           IF  ADDR(U3)~=ADDR(NIL)
                             THEN      FPT_ERRMSG.FIELD3_ = VECTOR(U3);
                             ELSE      FPT_ERRMSG.FIELD3_ = VECTOR(NIL);
           GOTO    L0;
/**/
       END P@ERROR;
%EJECT;
/*********************************************************************
*
*          S@FILTER_ELF                Evaluate timestamp and write
*/
       S@FILTER_ELF:                   PROC;
/**
 *                 LOCAL VARIABLE DECLARATIONS
 **/
DCL    DCB#                            SBIN   WORD;
/**
 *                 SYSTEM SOFTWARE REQUIREMENTS
 **/
%FPT_OPEN          (FPTN=FPT_OPEN,
                    ASN=FILE,
                    FUN=CREATE,
                    ACS=DIRECT,
                    NAME=VLP_NAME,
                    ACCT=VLP_ACCT,
                    SHARE=IN,
                    ORG=INDEXED,
                    KEYX=3,
                    KEYL=5,
                    EXIST=OLDFILE,
                    CTG=YES,
                    DISP=NAMED);
/**/
%FPT_WRITE         (FPTN=FPT_WRITE,
                    ONEWKEY=YES,
                    WAIT=YES);
/**/
%VLP_NAME          (FPTN=VLP_NAME,
                    NAME=':ELFnnyymmdd');
/**/
%VLP_ACCT          (FPTN=VLP_ACCT);
/**/
%FPT_TIME          (FPTN=FPT_TIME,
                    SOURCE=UTS,
                    DEST=ANS);
/**/
%FPT_TIME          (FPTN=FPT_BROKEN,
                    SOURCE=UTS,
                    DEST=LOCAL,
                    TIME="TX.TIME",
                    DATE="TX.DATE");
/**/
%INCLUDE EL$TABLES;
/**/
%LIST;
%EL$HDR            (NAME=EL$HDR, STCLASS="BASED(VLP_VECTOR.PTR$)");
%PLIST;
/**/
DCL    XUR$GETDCB                      ENTRY  (2)      ALTRET;
/**/
                   /**********************
                    *  BEGIN  PROCEDURE  *
                    **********************/
/**/
           VLP_ACCT.ACCT# = Dcbaddr(Dcbnum(M$OU))->F$DCB.ACCT#;
           CALL    BINCHAR (Substr(VLP_NAME.NAME#,4,2),EL$HDR.FILE);
           FPT_TIME.DATE_ = Vector(Substr(VLP_NAME.NAME#,6,6));
           FPT_TIME.TSTAMP_ = Vector(EL$HDR.UTS);
           CALL    M$TIME (FPT_TIME);
           CALL    XUR$GETDCB (VLP_NAME, DCB#)
                   WHENALTRETURN DO;
                   IF  B$TCB$->B$TCB.ALT$->B$ALT.ERR.ERR#
                             = %E$NOSLOTS
                             THEN DO;
/*E*       ERROR: -4-0
*          MESSAGE: Too Many Days or Logs in input.  Divide
*                   %FN into smaller files, or relink MOLE
*                   with more DCB slots.
*/
                             CALL      P@ERROR (4,/**/,/*U1*/,/*U2*/,
                                            /*U3*/,Dcbnum(M$ELFLOG));
                             UNWIND    TO       SHUTDOWN;
                             END;
                             TXT = 'Allocating;;';
                             GOTO      ALT@;
                   END;
           IF  ~Dcbaddr(DCB#)->F$DCB.FCD#
                   THEN DO;
                   FPT_OPEN.V.DCB# = DCB#;
                   CALL      M$OPEN (FPT_OPEN)
                             WHENALTRETURN DO;
                             TXT = 'Opening;;';
                   ALT@:     CALL      P@ERROR (3,B$TCB$->B$TCB.ALT$
                                                       ->B$ALT.ERR,
                                                TXT,/*U2*/,/*U3*/,
                                                DCB#);
                             UNWIND    TO       SHUTDOWN;
                             END;
                   END;
           FPT_WRITE.V.DCB# = DCB#;
           FPT_WRITE.BUF_ = VLP_VECTOR;
           FPT_WRITE.BUF_.BOUND = Dcbaddr(Dcbnum(M$ELFLOG))
                                       ->F$DCB.ARS# - 1;
           TXT = 'Writing;;';
           CALL    M$WRITE (FPT_WRITE)          ALTRET (ALT@);
           IF  BROKEN
                   THEN DO;
                   BROKEN = '1'B;
/*E*       ERROR: -5-0
*          MESSAGE: Break at %U1.
*/
                   TXT = ' ';
                   FPT_BROKEN.TSTAMP_ = FPT_TIME.TSTAMP_;
                   CALL      M$TIME (FPT_BROKEN);
                   TX.SEMIS = ';;';
                   CALL      P@ERROR (5,/**/,TXT);
                   END;
/**/
       END S@FILTER_ELF;
%EJECT;
/*********************************************************************
*
*      MOLE                            Main procedure begins here
*/
/**/
                   /**********************
                    *  BEGIN  PROCEDURE  *
                    **********************/
/**/
           REMEMBER          XXX@      IN        SHUTDOWN;
           VLP_VECTOR.PTR$ = Addr(NIL);
           FPT_GDS.V.SEGSIZE# = 1024;
           CALL    M$GDS (FPT_GDS)     WHENALTRETURN DO;
/*E*   ERROR: -1-0
*      MESSAGE:    Insufficient Memory to %U1.
*                  Please !ORES or !RES more memory.
*/
                                       TXT = 'Initialize;;';
                             NO_MEM@:  CALL      P@ERROR (1,/**/,TXT);
                                       ALTRETURN;
                                       END;
/*E*   ERROR: -2-0
*      MESSAGE: MOLE %U1 here.
*/
           CALL    P@TC$ERROR (2,/**/,B_VERSION);
           CALL    M$INT (FPT_INT);
       L0: DO WHILE '1'B;
           FPT_READ.BUF_ = VLP_VECTOR;
           CALL    M$READ (FPT_READ)
                   WHENRETURN DO;
                   CALL      S@FILTER_ELF;
                   END;
                   WHENALTRETURN DO;
                   TXT = 'Reading;;';
                   DO CASE(B$TCB$->B$TCB.ALT$->B$ALT.ERR.ERR#);
               CASE(%E$EOF);           CALL      XUR$CLOSE_DCBS;
                                       RETURN;
               CASE(%E$LD);            CALL      M$GDS (FPT_GDS)
                                                 WHENALTRETURN DO;
                                                 TXT='Read Input;;';
                                                 GOTO   NO_MEM@;
                                                 END;
                                       CALL      M$PRECORD (FPT_PRECORD)
                                                 WHENALTRETURN DO;
                                                 TXT = 'Repositioning;;';
                                                 GOTO   ALT@;
                                                 END;
               CASE(ELSE);
/*E*       ERROR: -3-0
*          MESSAGE: I/O Error encountered while %U1 %DC %(%FN)%
*/
                   ALT@:     CALL      P@ERROR (3,B$TCB$->B$TCB.ALT$
                                                       ->B$ALT.ERR,
                                                TXT,/*U2*/,/*U3*/,
                                                DCBNUM(M$ELFLOG));
                   XXX@:     ALTRETURN;
                   END;
                   END;
           END L0;
/**/
       END MOLE;
%EOD;
/********************************************************************
*
*          BREAK_ENTRY                 Break Control (set flag)
*/
       BREAK_ENTRY:                    PROC
                                       ASYNC;
/**
 *                 GLOBAL DATA REQUIREMENTS
 **/
DCL    BROKEN                          SYMREF
                                       BIT    (1);
/**
 *                 SYSTEM SOFTWARE REQUIREMENTS
 **/
%INCLUDE CP_6;
/**/
%FPT_TRMPRG        (FPTN=FPT_TRMPRG,
                    DCB=M$UC,
                    PURGEINPUT=NO,
                    PURGEOUTPUT=NO,
                    RSTBRK=YES);
/**/
                   /**********************
                    *  BEGIN  PROCEDURE  *
                    **********************/
/**/
           BROKEN = '1'B;
           CALL    M$TRMPRG (FPT_TRMPRG);
/**/
       END BREAK_ENTRY;
