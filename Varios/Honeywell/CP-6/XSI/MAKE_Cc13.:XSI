/*M*    make:h   -- C structures for the make program   */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
 
#ifndef MAKE_H_INCLUDED
#define MAKE_H_INCLUDED
#define CONST const
 
#ifdef UNSIGNED_TIME
#define BEGINNING_OF_TIME  0
#define END_OF_TIME        (68719476735)
typedef unsigned int       timetype;
#else
#define BEGINNING_OF_TIME  (-34359738368) /* Max negative number */
#define END_OF_TIME         34359738367   /* Max positive number */
typedef signed int          timetype;
#endif
 
 
/*B*    NAME:    sym_macro
        PURPOSE: To describe a symbol table entry for a makefile
                 macro.
        DESCRIPTION:
                 The structure fields are:
 
                 next     -- pointer to the next macro name with the
                             current hash value.
                 mc_len   -- length of the macro name
                 mc_deflen-- length of the replacement text
                 mc_sym   -- pointer to the macro name text
                 mc_def   -- pointer to the replacement text
*/
struct sym_macro {
  struct sym_macro     *next;
  int                  mc_len;
  int                  mc_deflen;
  char                *mc_sym;
  char                *mc_def;
  int                  mc_used; /* non-zero if actually referenced*/
  int                  mc_cmdline; /* non-zero if set on cmdline */
  int                  mc_default; /* non-zero if built-in macro */
  int                  mc_level;   /* zero                       */
  };
 
 
/*B*    NAME:    sym_target
        PURPOSE: To describe a symbol table entry for a target name.
        DESCRIPTION:
                 The structure fields are:
 
                 next           -- pointer to the next target name
                                   with the same hash value.
                 tg_len         -- length of the target name
                 tg__suffix_len -- length of the file type
                 tg_text        -- pointer to the target name
*/
 
struct sym_target   {  /* hashed by targetname (Targets)   */
  struct sym_target    *next;
  int                  tg_len;
  int                  tg_suffix_len;
  char                 *tg_text;
  struct sym_target    *tg_list;     /* Chain through every target*/
  struct sym_ftype     *tg_ftype;    /* Target file type          */
  struct sym_ftype     *tg_inftype;  /* Rule input file type      */
  struct target_action *tg_action;   /* derive added build actions*/
  struct target_rule   *tg_commands; /* explicit build commands   */
  struct sym_target    *tg_stchain;  /* next target w/same state  */
  int                  tg_status;    /* current target state      */
  struct   dependancy  *tg_depend;   /* target's dependancies     */
  struct   sym_target  *tg_tgrule;   /* Linked implicit rules     */
  struct   acct_list   *tg_srch;     /* search list               */
  char                 *tg_fid;      /* file name                 */
  char                 *tg_ufid;     /* update file name          */
  timetype             tg_modtime;   /* file modification time    */
  timetype             tg_umodtime;  /* update modification time  */
  struct sym_owner    *tg_owner;     /* Owners mailing address    */
  char                 tg_precious;  /* non-zero if .PRECIOUS     */
  char                 tg_phony;     /* non-zero if .PHONY        */
  char                 tg_online;    /* non-zero if run online    */
  char                 tg_old;       /* Pretend its old (anyway)  */
  char                 tg_new;       /* Pretend its new (anyway)  */
  char                 tg_depbase;   /* dependency has same name  */
  };
 
#define INIT_SYM_TARGET  {0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0, 0,0,0,0,0}
 
/*  Defines for status fields:        */
 
#define STATUS_UNUSED    -1
#define STATUS_BUSY       0
#define STATUS_WAITING    1
#define STATUS_RUNABLE    2
#define STATUS_RUNNING    3
#define STATUS_ERRORED    4
#define STATUS_COMPLETED  5
 
 
/*B*    NAME:    dependancy
        PURPOSE: To register the dependancies of a target.
*/
struct  dependancy  {
  struct dependancy    *next;         /* Next dependancy on line    */
  struct target_rule   *dp_rule;      /* Backlink to owner rule     */
  struct sym_target    *dp_target;    /* This target                */
  struct dependancy    *dp_tgdepend;  /* Next depenancy for target  */
  unsigned              dp_num;       /* Number of dependants       */
  struct sym_target    *(dp_list[4]); /* Target's dependants        */
  };
 
 
/*B*    NAME:    target_rule
        PURPOSE: To retain information on rule attributes.
        DESCRIPTION:
           For every line containing a dependancy rule, a new
           target_rule structure is allocated to hold the
           dependancies.  This structure points off to each
           target dependancy on this line through the tr_depend
           field.   The tr_commands field is filled in if this
           rule is immediately followed by build commands.
*/
 
struct target_rule  {             /* pointed to via sym_target   */
  struct target_rule      *next;   /* Next rule in this file     */
  struct dependancy       *tr_depend; /* Dependancy list for line   */
  struct command_list     *tr_commands; /* Commands following rule  */
  unsigned                 tr_num;      /* Line number of this rule */
  char                    *tr_fid;      /* File name   of this rule */
  };
 
 
struct  target_action  {
  struct target_action *next;      /* Next action for real target  */
  struct sym_target    *ta_target; /* This target                  */
  struct target_rule   *ta_rule;   /* Rule to produce target       */
  struct sym_target    *ta_tginput;/* Input target                 */
  int                   ta_sysid : 18;/* sysid of job producing tg */
  int                   ta_flags : 18;/* misc flags                */
  char                 *ta_predvar;/* predecessors of this action  */
  char                 *ta_chngvar;/* changed files causing action */
  char                 *ta_dpndvar;/* dependent files of target    */
  };
 
struct  file_info      {
  timetype          fi_mod;        /* Last modified time            */
  timetype          fi_umod;       /* UI file last modified time    */
  struct acct_list  *fi_srch;      /* search list to find file      */
  struct sym_target *fi_target;    /* Files associated target       */
  char              fi_name[64];   /* CP-6 fid                      */
  char              fi_uname[64];  /* UI file's CP-6 fid            */
  char              fi_tgtext[80]; /* "fake" target name            */
  };
 
 
/*B*    NAME     command_list
        PURPOSE: To indicate the commands associated with a rule.
        DESCRIPTION:
                 This structure is pointed to via target_rule which
           provides information on the commands that are associated
           with a rule.  The fields include a pointer to the first
           command text (forward linked to the next command text),
           the number of commands, and flags indicating which
           "special" variables are in the commands.
*/
 
struct  command_list   {
  struct command_list     *next;      /* *UNUSED* */
  struct command_line     *cm_lines;  /* First command line         */
  unsigned                cm_flags;   /* "special" macro usage      */
  };
 
struct  command_line   {
  struct command_line     *next;      /* Next build command         */
  int                      cmd_len;   /* This command's length      */
  char                     cmd_text[4]; /* this command             */
  };
 
struct  command_lin    {
  struct command_lin      *next;      /* Next build command         */
  int                      cmd_len;   /* This command's length      */
  char                     cmd_text[70]; /* the built-in command    */
  };
 
 
#define MC_EARLIER              04
#define MC_PREDECESSOR         010
#define MC_ARCHIVE             020
#define MC_DOLLAR              040
#define MC_BASE               0100
#define MC_SI                 0200
#define MC_OU                 0400
#define MC_LS                01000
#define MC_DO                02000
#define MC_BASE_FILE         04000
#define MC_SI_FILE          010000
#define MC_OU_FILE          020000
#define MC_LS_FILE          040000
#define MC_DO_FILE         0100000
#define MC_BASE_ACCT       0200000
#define MC_SI_ACCT         0400000
#define MC_OU_ACCT        01000000
#define MC_LS_ACCT        02000000
#define MC_DO_ACCT        04000000
#define MC_DYN_OU        010000000
#define MC_DYN_OU_FILE   020000000
#define MC_DYN_OU_ACCT   040000000
#define MC_DEPENDENT    0100000000
 
#define MI_EARLIER               2
#define MI_PREDECESSOR           3
#define MI_ARCHIVE               4
#define MI_DOLLAR                5
#define MI_BASE                  6
#define MI_SI                    7
#define MI_OU                    8
#define MI_LS                    9
#define MI_DO                   10
#define MI_BASE_FILE            11
#define MI_SI_FILE              12
#define MI_OU_FILE              13
#define MI_LS_FILE              14
#define MI_DO_FILE              15
#define MI_BASE_ACCT            16
#define MI_SI_ACCT              17
#define MI_OU_ACCT              18
#define MI_LS_ACCT              19
#define MI_DO_ACCT              20
#define MI_DYN_OU               21
#define MI_DYN_OU_FILE          22
#define MI_DYN_OU_ACCT          23
#define MI_DEPENDENT            24
 
#define MI_SIPATH               37
#define MI_OUPATH               38
#define MI_GNPATH               39
#define MI_UIPATH               40
#define MI_LOPATH               41
#define MI_DOPATH               42
#define MI_SPATHS               43
 
#define MI_MAIL_SUBJECT         45
#define MI_MAIL_COPY            46
#define MI_MAIL_BODY            47
#define MI_MAIL_SUMMARY         48
 
 
/*B*    NAME:    sym_ftype
        PURPOSE: To hold file type information for every file type
                 that appears in the makefile (or derivation file
                 type).
        DESCRIPTION:
                 File types are located in a number of ways.  First
           whenever a rule for producing file types is located, both
           types are remembered.  Secondly, whenever a target name
           is entered, its filetype is looked up and a new filetype
           entry is allocated if necessary.
 
           The file type structure is used to assign a unique number
           to each file type.  Later processing will build upon this
           information to limit file type searches during file
           derivation.
*/
 
struct  sym_ftype   {
  struct   sym_ftype   *next;   /* Next file type w/same hash       */
  int                   ft_len; /* Length of file type text         */
  int                   ft_num; /* Number of this file type         */
  char                 *ft_text;/* Text of file type                */
  int                   ft_in;  /* Number of rules w/ this as input */
  int                   ft_out; /* Number of rules producing this   */
  struct   ftype_rules *ft_rules; /* fake target producing rules    */
  };
 
 
/*B*    NAME:    struct ftype_rules
        PURPOSE: To hold pointers to rules producing a file type.
        DESCRIPTION:
           This structure is allocated in complete_rules and used
           when looking for rules which generate a specific file
           type.
 
           It is essentially an array of pointers to the fake targets
           which produce files from input file types.  This structure
           is pointed to by the struct sym_ftype and this structure
           contains pointers to the fake targets that produce this
           type.
*/
struct  ftype_rules    {
  int         fr_in;   /* Number of rules producing associated ftype*/
  int         fr_out;  /* Number of rules produced by associated ftype*/
  struct sym_target *fr_rule[1];
  };
 
 
 
/*B*    NAME:    sym_owner
        PURPOSE: To hold the target owner information for a
                 target.
        DESCRIPTION:
           This field is filled in when a mail user definition
           is provided for a target.  Each target may (optionally)
           point to a sym_owner field.
*/
 
struct sym_owner {     /* A minimum size _sym block     */
  struct sym_owner  *next;
  int                ow_len; /* length of address */
  int                ow_cnt; /* Number of targets owned */
  char              *ow_text;/* address                 */
  };
 
#define INIT_SYM_OWNER  {0, 0, 0, 0}
 
 
 
 
/*B*    NAME:    hash_table
        PURPOSE: To define the structure of a hash_table.
        DESCRIPTION:
                 Since both macros and targets are hashed to obtain
           their locations, this structure is provided in order to
           declare a generic hash_table and initialize it.
*/
 
struct sym_   {  /* WARNING: correspondance w/sym_macro, sym_target, sym_owner, sym_ftype */
  struct   sym_     *next;      /*    next name on this hash chain  */
  int                sym_len;   /*    Length of this name           */
  int                sym_xxx;   /*    *used*                        */
  char              *sym_text;  /*    Name                          */
  };
 
#ifndef HASH_SIZE
#define HASH_SIZE 191
#define INIT_HASH_TABLE { HASH_SIZE,0,0,0,0, 0,0,0,0,0,0,0,0,0,0,0,\
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\
  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0   }
#endif
 
struct  hash_table  {
  int         hash_size;     /*  Number of entries in table   */
  int         hash_hits;     /*  Number of used entries in table */
  int         hash_syms;     /*  Number of symbols inserted      */
  int         hash_cmprs;    /*  Number of comparisons           */
  int         hash_looks;    /*  Number of lookups               */
  struct sym_ *table[HASH_SIZE];
  };
 
 
 
/*B*    NAME:       struct acct_list
        PURPOSE:    To hold a list of search accounts.
*/
 
struct vlp_acct  {
  char     text[8];
  };
 
struct  acct_list   {
  int               naccts;
  struct   vlp_acct accts[1];
  };
 
 
 
#define MAX(a,b) ((a>b)? a : b)
#define MIN(a,b) ((a<b)? a : b)
#define RU          /* Undefine if using !save/get   */
 
#ifdef RU
#define RU_WRITTEN_INIT   314159265
#define RU_WRITTEN_DONE   2718285
#endif
 
 
/*B*    NAME:       input_info
         PURPOSE:    To hold include file names and record numbers.
*/
 
struct input_info   {
  struct _FILE   *strm;
  char     *fid;
  long      recno;
  int       ifdepth;
  int       flags;
  };
 
 
 
/*B*    NAME:       struct value
        PURPOSE:    To hold the result of an expression.
        DESCRIPTION:
           The commands: if, elif, error and print have as their
           arguments expressions.  This structure is used to hold
           the result of such an expression.  The following types
           of values are returned by evaluating an expression:
           VAL_CONST      ...   an integer
           VAL_IDF        ...   a variable
           VAL_STR        ...   a "string"
           VAL_ERROR      ...   an illegal expression
*/
 
struct  value {
  int   vtype;   /* type of value: VAL_CONST, VAL_STR, VAL_IDF   */
  union {
     unsigned    ival;             /* VAL_CONST   */
     struct   {                    /* VAL_IDF     */
        struct sym_macro *mc;
        struct parse_sym *name;
        }        macro;
     struct   {                    /* VAL_STR     */
        int      st_len;
        char     *str;
        }        string;
     }           val;     /* end of union  defn   */
  };                      /* end of struct defn   */
 
 
#define    VAL_CONST      0
#define    VAL_IDF        1
#define    VAL_STR        2
#define    VAL_ERROR      5
 
/**  Define the maximum number of search accounts: MAX_SRCH   **/
#define    MAX_SRCH      12
#define    MAX_IF       100
#define    MAX_INCL      12
#endif
