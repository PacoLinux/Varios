APLANAR.X
 
This workspace contains APL functions which plot on a number of devices which
may be attached to CP6. Included with this package are device handlers for the
Tektronix 4013, Tektronix 4112, VIP7205, CP-6 device independant graphics
(DIGS) and a line printer device.  Functions are available to create pictures,
rotate, translate, scale and provide a viewing transformation for 2 dimensional
graphics. These functions are derived from an article called:  "APLANAR,
Two-Dimensional Geometry in APL" which appeared in "APL Quote Quad", Volume 10,
Number 3, in March 1980 by G.J. Porter.
General Information
 
This graphics package uses four distinct picture forms, which are represented
by distinct array types.
 
An empty picture is represented by an empty vector, "$I 0".
 
A  "point" is a length 2 vector consisting of the X and Y coordinates of the
point in some cartesian system.
 
A  "stroke" is a sequence of connected line segments. It is represented  by an
array of shape (N,2) consisting of the N coordinate pairs of the successive
points defining (N-1) connected line segments.
 
A  "picture" is a union of strokes. It is represented by an array of shape
(N,3). The last two columns are a row catenation of  strokes. A value of 0 in
the first column indicates "pen down" -- a visible line is to be drawn from the
previous position to that point; 1 indicates "pen up" -- no visible connection
to the point.
Functions Available
 
Name       Description
 
o          The "order" of a picture form P is the number of "strokes"
           it represents.
 
u          The "union" combines picture forms to create new pictures
           (similar to catenation).
 
r          The "restructure" of a picture produces a new picture
           containing the number of strokes indicated by the left
           argument taken cyclically from the right argument picture
           (similar to reshape).
 
RECT       generates a picture corresponding to a rectangle with sides
           parallel to the axes.
 
POLYGON    produces the stroke representing the regular N-gon with center
           at 0 0.
 
AT         This performs a translation of the picture.
BY         This performs scaling of the picture.
 
THRU       This provides a rotation of the picture.
 
REL        This provides a reflection of the picture.
 
ABOUT      This can be used to provide an argument to THRU.
 
x          This can be used to privide an argument to AT.
 
V2S        This is the viewing transformation.  The implicit
           arguments are "win" which contains the portions of
           virtual space to display and "vp" which contains
           the device viewport in which the display will be
           made.  V2s does not clip points that are not within
           the current viewport.
 
CLIP       This function is used to clip portions of segments
           which do not appear within the viewport.  This
           function is to be applied to the output of V2S and
           before the DRAW function.
 
DRAW       This is a device driver specific to the current
           graphics device.  Its argument is the picture to
           be displayed in device coordinates (use V2S to
           obtain device coordinates).
 
PUT        This is a device driver specific to the current
           graphics device.  Its left argument is the locations
           at which to display the text in each row of the
           right argument.
 
PLOT       This function will produce a simple graph with
           optional axis, x-label, y-label and title.
 
PIE        This function will produce a pie chart with
           optional labels and title.
 
CLEAR      Clears the screen.
 
BOX        Draws a box around the current viewport.
 
AXIS       Puts tic marks and labels the X locations in
           the right argument immediately below the viewport,
           tics and labels the Y locations in the left
           argument immediately to the left of the viewport.
 
TEK        A package containing the device dependent functions
           required to plot on the Tektronix 4013.
 
TEK4112    A package containing the device dependant functions
           required to plot on the Tektronix 4112.
 
DIGS       A package containing the functions required to plot
           using the CP-6 device independant graphics library.
 
VIP        A package containing the device dependent functions
           required to plot on a VIP7205.
 
LP         A package containing the device dependent functions
           required to plot on a line printer like device.
 
           To get the device dependent functions active, the
           APL expression "$QPDEF TEK" would activate the
           Tektronix 4013 functions.
 
HELP       This function displays the help information
           while in APL.
Example:
 
The following APL expression will display the parabola representing X plotted
against X*2:
     $QPDEF TEK      $COM Obtain Tektronix Device Drivers
     $QIO_0
     X_0.1#-50+$I101
     xloc_-5+$I 11
     yloc_5#$I 6
     )ERASE win
     CLEAR $DMD PLOT X,[.5]X*2
     $COM IN ORDER TO DISPLAY THE PICTURE ON 'LP' DEVICE
     $COM ANOTHER 'CLEAR' FUNCTION MUST BE EXECUTED.
     CLEAR
Information may be obtained on each function name by typing: !HELP (APLANAR.X)
function
 
From within APL, type:
     HELP 'function'
 
A list of the HELP topics may be obtained by typing:
     !HELP TOPICS
or within APL:
     HELP 'TOPICS'
This  graphics package uses $Q1 for graphics I/O (except that the LP device
uses normal APL output). The global variables used in this workspace are:
 
Variable            Description
 
win           The current window in "world" coordinates.
vp            That portion of the device upon which the
              graphics output is to appear.  The values
              are in device coordinates.
charsize      A two element vector whose first element
              is the number of device coordinates wide
              that a character takes.  The second
              element is the number of device coordinates
              high that a character takes.
device        Used to hold all of the default device-dependant
              defaults and limits required.  The items in this
              nested array are: (0) character vector of device
              name, (1) the largest vp permitted with this
              device, (2) the default vp (when vp is undefined),
              (3) the default charsize.
SCREEN        A variable used by the LP device drivers
              which holds the current graphics output.
lpchar        A variable that contains the character used
              the the LP and VIP devices to connect points
              when DRAWing.  Its default value is "*".
title         Used by the PLOT function for the title
              to place underneath the viewport.
xname         Used by the PLOT function for the title
              to place underneath the X-axis.
yname         Used by the PLOT function for the title
              to place to the left of the Y-axis.
xloc          Used by the PLOT function for the x-locations
              at which to place tics.
yloc          Used by the PLOT function for the y-locations
              at which to place tics.
HELP file for: APLANAR.X
 
 **************************************************************
 *                                                            *
 *  Copyright (c) Bull HN Information Systems Inc., 1989      *
 *                                                            *
 **************************************************************
 
R_A ABOUT P
 
This function helps construct a right argument of the correct type for THRU.
The right argument is the angle by which to rotate and the left argument is the
point about which to rotate. The shape of the result is always (N,3).
 
 
R_P AT T
 
"AT"  produces a translation of the picture P. The right argument  to AT may be
empty, a 2 element vector, or an (N,2) element array, with the following
results:
 
     --If "T" is empty, (P AT T) is also empty.
 
     --If  (2=$R  T),  the  result  is  (1$TAK  T)  added to each
     X-coordinate and (1$DRP T) added to each Y-coordinate.
 
     --If  (2=$R$RT),  and   ((o  P)=1$TAK$RT)  then  the  result
     contains  each stroke  of P  translated by the corresponding
     row of T.  Note that if (o P)=1 then the result is ((1$TAK$R
     T)r P)AT T.
 
 
     win_2 -2$TAK LIM P_(POLYGON 8) AT 2#$TPS 4 4 $ECD $I 16
     DRAW V2S P
 
In  this example, an octagon will be translated sixteen different ways,
resulting in a picture that contains 4 octagons across and 4 octagons down
touching each other at the tips.
 
00001
 
A AXIS B
 
This  function puts tics below the current viewport at the X-locations
indicated by A (A is subject to the viewing transformation), and labels those
X-locations. It then puts tics to the left of the current viewport at the
Y-locations indicated by  B (B is subject to the viewing transformation) and
labels those Y-locations.
 
 
     -5 -2.5 0 2.5 5 AXIS 0 5 10 15 20 25
 
 
In this example, the X-coordinates -5, -2.5, 0, 2.5 and 5 will be tic'ed and
labeled across the bottom of the viewport and the Y-coordinates 0, 5, 10, 15,
20 and 25 will be tic'ed and labeled along the left side of the viewport.
 
Alternate text may be supplied for the x and y axis values to be placed upon
the graphic output. If the function "XFMT" exists,  then it will be used to
format the X values, and the function  "YFMT" will be used to format the Y
values if it is defined.  For both of these functions, the right argument is
all of  the values to be formatted, and the result must be a text matrix  with
one row for each axis value. This permits non-numeric text to be substituted
for any axis values.
 
00001
 
BOX
 
This function draws a box about the current viewport.
 
 
R_P BY S
 
The right argument of the scaling function BY may be empty, a scalar, an N
element vector, or an (N,2) array with the following results:
 
     --If S is empty, so is PIC BY S.
 
     --If  S  is  a  scalar,  then  the  result shows all X and Y
     coordinates of P multiplied by S.
 
     --If  S is a  2 element vector,  then the X-coordinates of P
     are  multiplied by (1$TAKS)  and the Y-coordinates  of P are
     multiplied by (1$DRPS).
 
     --If  S is  an (N,2)  array, then  the result  contains each
     stroke of (N r P) scaled by the corresponding row of S.
 
 
     PLOT (POLYGON 6) BY 14#1+$I 15
 
 
In  this example, a hexagon will appear 15 times, each copy being 14 times
larger than the previous.
 
00001
07/15/82
Added a PIE chart maker, Tektronix 4112 device support,
CP-6 Device independant graphics support, and now uses
XG$FONT.:LIBRARY to produce the font file.
 
The PUT function now supports multiple fonts. For more information, type:
     !HELP (APLANAR.X) PUT FONTS
     !HELP (APLANAR.X) PUT LEFT
 
The function TEXTFONT has been added to return either the font index used by
PUT or to return the font name. Type:
 
     !HELP (APLANAR.X) TEXTFONT
 
for more information.
 
CLEAR
 
This  function causes the screen to be cleared for another picture (if this is
the LP device, then the current screen will first be displayed).
 
 
R_CLIP P
 
This  function takes the device coordinates (returned by V2S) and removes all
segment portions that do not appear within the current viewport. If a segment
extends beyond the current viewport, the segment is drawn on the viewport
interpolating to the last position that is actually within the viewport.
However, if  both the segment start and end are not within the viewport then
the segment will be removed even though there is a possibility that it could
cross the viewport at some point (IE. This is not a complete clipping
algorithm).
 
CHANGES
 
Device Independance
 
Device  independance is achieved by having separate DRAW, PUT and CLEAR
functions for each device supported. As supplied, the devices supported are
TEKTRONIX 4013 VIP7205 and a line printer. The  device drivers are packaged so
that in order to obtain the correct  driver the user must use the $QPDEF
function to define the appropriate driver. The package names are:
 
Package Name Device
 
TEK              TEKTRONIX 4013, 4010, 4015, 4662.  TEK4112          Tektronix
4112, 4110 DIGS             CP-6 Device independant graphics library
VIP              VIP7205
LP               LINE PRINTER
 
 
 
This package provides the ability to use the CP-6 device independant graphics
library from within APL in the same manner as the other device drivers in this
workspace.
 
 
To obtain the DIGS device drivers, enter the following APL expression:
 
     $QPDEF DIGS
 
00001
 
DRAW P
 
There  are DRAW functions supplied suitable for a TEKTRONIX 4013, VIP 7205 and
line printer. The right argument is a picture in device coordinates. The
execution of this function causes the picture to appear on the device or to be
stored for later device display.  If the picture is stored (for the line
printer device) then  a clear function call is required to cause a display. In
order to obtain the appropriate DRAW routine, the expression:
     $QPDEF TEK
 
would  be used (in this example to obtain the Tektronix device dependent
functions).
 
The   following APL expression will display the parabola representing X plotted
against X*2:
 
     $QPDEF TEK      $COM Obtain Tektronix Device Drivers
     $QIO_0
     X_0.1#-50+$I101
     )ERASE win
     xloc_-5+$I 11
     yloc_5#$I 6
     CLEAR $DMD PLOT X,[.5]X*2
     $COM IN ORDER TO DISPLAY THE PICTURE ON 'LP' DEVICE
     $COM ANOTHER 'CLEAR' FUNCTION MUST BE EXECUTED.
     CLEAR
 
 
HELP 'HELP'
 
This  function is used to access the help file for this workspace.  It will
access any standard CP6 help file and display the messages. For example:
 
     HELP '(APLANAR.X) HELP'
 
will  report this information. In general this facility is the same as the IBEX
facility. The right argument of this function is the KEYWORD for which help is
required and if no help FID is specified  within parenthesis, then this
function defaults to "APLANAR.X".  In order to report its information, HELP
uses file tie  number 282144. To obtain the help keywords, type: HELP 'TOPICS',
or to obtain information about a particular APLANAR function, type:  HELP
'function'.
 
LP
 
The line printer device produces crude graphics output on any lineprinter or
asyncronous terminal. The graphics device is permitted to have a width of up to
500 characters and a length of up to 500 lines. In order to view any graphics
output generated, the CLEAR function must be invoked (which assumes that the
width is sufficient to display all lines). As with the other devices, the CLEAR
function initializes or corrects the viewport, initializes "lpchar" and will
clear the screen in interactive mode only if you answer YES to the prompt:
"OKAY TO CLEAR PICTURE". Note that in any other CP6 mode (ie. batch) this
prompt is not made. All graphics output appears through standard APL output.
 
Bruce Frost, LADC
DEVICES
 
PIE D
 
This function produces a simple pie chart where the size of each pie slice is a
function of the data values provided.  The PIE program automatically converts
each value into a percentage of the pie.  The right argument must be a vector
containing a number and an optional title in each item.  If the optional title
is not provided, the pie slice is labeled with the value used to compute the
size of the slice.  The left argument to the PIE function is optional and it is
used to indicate which pie slices are to be partially removed.  A value of 0 in
the left argument leaves the associated slice in the pie and a value of 1 in
the left argument causes the pie slice to be slightly removed.
 
 
      PIE (240 'WORK') (12 'HOLIDAYS')(12 'VACATION')(104 'WEEKENDS')
 
In this example, a 4 slice pie will be produced with the slices labelled WORK,
HOLIDAYS, VACATION and WEEKENDS.  The slice representing weekends could be
slightly removed by the expression:
 
     0 0 1 0 PIE(240'WORK')(12'HOLIDAYS')(12'VACATION')(104'WEEKENDS')
In both of the above examples, the slice labels in order of size are: WORK,
WEEKENDS, HOLIDAYS and VACATION.
00001
 
PLOT P
 
This  function will produce a simple graph consisting of the picture being
plotted and boxed. Optionally, this function will compute a window such that
all points in the picture will appear within the graph, put tics at specified
locations, print a label label for the x and y axis and put a title under the
graph.
 
 
These  features are controlled by the presence of specific variables within the
workspace. For example, if the current window  is undefined (or not a legal
window) then PLOT will provide a window that will put all points within the
viewport.
 
If  the variable "xloc" is defined, then the X-axis will have tics made at the
locations in "xloc". If the variable "yloc" is defined, then the Y-axis will
have tics made at the locations in "yloc".
 
If  the variable "xname" is defined, then the text vector "xname" will appear
directly under the current window, two lines under  the x-axis labels (if any).
If the variable "yname" is defined, then the text vector "yname" will appear
directly to the left  of the current viewport, two columns before the y-axis
labels (if any).
 
If  the variable "title" is defined, then the text vector "title" will appear
directly under the current window, two lines under the "xname" (if "xname" is
defined).
 
 
     )ERASE win
     title_'X*2 Parabola'
     xname_'X'
     yname_'X*2'
     xloc_0 2.5 5
     yloc_0 5 10 15 20 25
     PLOT 0 1 2 3 4 5,[$QIO+0.1] 0 1 4 9 16 25
 
 
Because  the variable "win" is undefined, the current window will  be defined
to include all points in the picture. In this example,  the coordinates
starting at (0,0) and passing through (1,1),  (2,4), (3,9), (4,16) and (5,25)
will have a line drawn through  them. These points will have a viewing
transformation applied such that the lower left corner of the viewport will be
(0,0) and the upper right corner of the viewport will be (5,25).
 
The current viewport will have a line drawn around it (BOX) and the x-axis will
have tics made at 0, 2.5 and 5; the y-axis will have  tics made at 0, 5, 10,
15, 20 and 25 (AXIS). The y-axis will have the title "X*2" (if room is
available) to the left of the  viewport and the x-axis will have the title "X"
underneath the  viewport. The title "X*2 Parabola" will appear underneath the
x-axis title (if room permits).
 
This function merely makes use of all of the tools within the workspace to
place all of the information for the graphics user.
 
00002
00001
 
R_POLYGON N
 
Polygon produces the stroke representing the regular N-gon with center  at
(0,0) and one vertex at (1,0). N must be a non-negative integer. When N is
positive, the shape of (POLYGON N)  IS ((N+1),2). For large values of N,
(POLYGON N) is an approximation of a unit circle centered at the origin.
 
 
A PUT B
 
This  function takes the character matrix B and displays each row  at the
location indicated by each corresponding row of A. The   left argument is an
(N,2) array containing device coordinates.
 
 
     0 0 PUT 'PERFORMANCE DATA 03/11/82'
 
 
  In  this example, the label "PERFORMANCE DATA 03/11/82" will appear on the
plot with the lower left corner of the letter "P" at the screen coordinate
(0,0).
 
 
Each  row of the left argument may contain up to 5 elements. The first two
elements are the (X,Y) location for the text to appear.  The third element
selects the font in which to display the text. The fourth element selects the
height of the text in screen  coordinates and the fifth element selects the
angle at which  text is to appear (normal text appears at angle 0). For the
hardware font (font zero) the height, and angle of the text are determined by
the hardware.
 
 
The fonts available are:
  (0)   Hardware characters
  (1)   Simplex Roman Monospaced         (16)  Gothic English
  (2)   Duplex Roman Monospaced          (17)  Gothic German
  (3)   Complex Roman Monospaced         (18)  Gothic Italian
  (4)   Complex Italic Monospaced        (19)  Cartographic Roman
  (5)   Triplex Roman Monospaced         (20)  Simplex Greek
  (6)   Triplex Italic Monospaced        (21)  Complex Greek
  (7)   Cartographic Roman Monospaced    (22)  Complex Cyrilic
  (8)   Simplex Roman                    (23)  ASTRONOMY
  (9)   Simplex Script                   (24)  UPPERMATH
  (10)  Complex Roman                    (25)  LOWERMATH
  (11)  Complex Script                   (26)  METEOROLOGY
  (12)  Complex Italic                   (27)  MUSIC
  (13)  Duplex Roman                     (28)  APL
  (14)  Triplex Roman                    (29)  APL
  (15)  Triplex Italic
 
 
  For example:
 
     100 100 15 35 PUT 'Triplex Italic Example'
 
will cause the text in the right argument to appear at location 100 100 on the
screen, 35 hardware coordinates high.
 
 
00001
00004
00005
00003
 
R_RECT N
 
RECT  generates a picture corresponding to a rectangle with sides parallel to
the axes. The single argument consists of the coordinates of the lower left
corner and of the upper right corner combined into either a 4 element vector or
a (2 2) array. The result always has shape 5 2.  For example,
        RECT 2 2$R 0 0 1 1
        RECT 0 0 1 1
will each produce the same square.
 
 
R_P REL L
 
The right argument of the reflection function REL may be empty, or an (N,4)
array with these results:
 
     --If L is empty, so is (P REL L).
 
     --If  L is  a 4  element vector,  the result  is P reflected
     relative  to  the  line  through  the  points  (2$TAKL)  and
     (2$DRPL).
 
     --If L is an (N,4) array, the result contains each stroke of
     P reflected  relative to the line through  the points in the
     corresponding row of L.
 
 
     win_2 2$R 0 0 1 1
     DRAW V2S  (Z REL 0 1 1 0) u Z_ 1 0 0,[$QIO+.1] 0 0 1
 
In this example, a square is formed by reflecting the segment passing through
(1,0), (0,0) and (0,1) through the points (1,0) and (0,1).
 
00001
 
This  package has very limited support for the Tektronix 4013 device.  The
functions available allow the screen to be cleared, graphics  line segments to
be written and text to be placed horizontally on the screen.  The device
handler expects that the following SET command has been issued:
 
     )SET $Q1 ME,ORG=T,FUN=U
     $QBTRANS 1 1
 
The  writes performed by this handler are transparent and this option is always
set up via the CLEAR function. The CLEAR function  also initializes the
viewport or creates a legal viewport if the currently set viewport is illegal.
 
 
  To  obtain the Tektronix device drivers, enter the APL expression:
 
     $QPDEF TEK
 
00001
TEK
 
This package provides support for the Tektronix 4110 family of terminals and
specifically for the 4112 model.  The functions provide the ability to clear
the screen, draw line segments and place text on the screen.  The device
handler expects that the following SET command has been issued:
 
     )SET $Q1 ME,ORG=T,FUN=U
     $QBTRANS 1 1
 
 
To obtain the Tektronix 4112 device handler, use the following APL expression:
 
     $QPDEF TEK4112
 
00001
See HELP topics: TEK or TEK4112.
 
 
R_TEXTFONT F
 
This  function may be used to provide a mapping between the names of the
various fonts supported and the font index used by the PUT function.  If the
right argument is a font number in the range of fonts supported, then the
result is the full name of the font.  If the right argument is a font name,
then the result is the font index.
 
 
     TEXTFONT 15
TRIPLEX ITALIC
 
     TEXTFONT 'GOTHIC ENGLISH'
16
 
00001
 
R_P THRU A
 
The THRU function rotates the picture P through the number of degrees indicated
by A. The right argument may be empty, a scalar,  a one element vector, an N
element vector, a (1,3) element  array or an (N,3) element array with the
following results:
 
     --If A is empty, so is PIC THRU A.
 
     --If A  is scalar or a  1 element vector, the  result is the
     entire   picture   rotated   about   the  origin  through  A
     counterclockwise angle A.
 
     --If A is an N  element vector then the result contains each
     stroke of  P rotated about the origin  through the number of
     degrees in the corresponding element  of A.  If (o P)=1 then
     P will be reshaped to conform to the length of A.
 
     --If A is a (1,3)  element array, then the entire picture is
     rotated  about the  point (0  1$DRP A)  through the angle (1
     1$TAK A).
 
     --If A is  an (N,3) element array, then each  stroke of P is
     rotated about  the point and angle  in the corresponding row
     of  A  (with  rotation  according  to  (1,3)  shape of A and
     conformance according to the N element vector case).
 
 
     PLOT (POLYGON 8) THRU 5#$I 15
 
 
In  this example, 15 octagons are created and each is rotated through an angle
15 degrees larger than the previous.
 
00001
LP
 
R_V2S P
 
This function applies the viewing transformation to the picture argument.
Implicit arguments are "win" which indicates the window  and "vp" which
indicates the viewport. The viewport is given  in device coordinates and the
window is given in picture coordinates.
 
  For example:
 
     win_2 2$R0 0 1 1
     vp_2 2$R100 300 200 400
 
sets  the window and viewport such that a picture argument will return device
coordinates suitable for displaying when the picture X-coordinates range from 0
to 1 and the picture Y coordinates  range from 0 to 1. The result is a new
picture containing device coordinates of X locations 100 through 200 and Y
locations 300 through 400 for all points that are within the viewport.  Points
that are not within the viewport may be clipped using the function CLIP on the
result of this function. In this case,  (RECT 0 0 1 1) will be displayed on
that portion of the output device with lower left corner at (100,300) and upper
right corner at (200,400).
 
 
Variable            Description
 
win           The current window in "world" coordinates.
vp            That portion of the device upon which the
              graphics output is to appear.  The values
              are in device coordinates.
charsize      A two element vector whose first element
              is the number of device coordinates wide
              that a character takes.  The second
              element is the number of device coordinates
              high that a character takes.
device        Used to hold all of the default device-dependant
              defaults and limits required.  The items in this
              nested array are: (0) character vector of device
              name, (1) the largest vp permitted with this
              device, (2) the default vp (when vp is undefined),
              (3) the default charsize.
SCREEN        A variable used by the LP device drivers
              which holds the current graphics output.
lpchar        A variable that contains the character used
              the the LP and VIP devices to connect points
              when DRAWing.  Its default value is "*".
title         Used by the PLOT function for the title
              to place underneath the viewport.
xname         Used by the PLOT function for the title
              to place underneath the X-axis.
yname         Used by the PLOT function for the title
              to place to the left of the Y-axis.
xloc          Used by the PLOT function for the x-locations
              at which to place tics.
yloc          Used by the PLOT function for the y-locations
              at which to place tics.
 
 
This package uses cursor addressing on the VIP7205 to perform graphics  on this
terminal. The variable "lpchar" contains the character that will be used to
draw each point in a graphics line segment.   The CLEAR function initializes
the viewport "vp" and "lpchar" if they are undefined and will reset the
viewport if it contains  an illegal value.  The largest screen supported is 79
characters  across by 23 characters down. All graphics I/O is performed through
$Q1 under the assumption it is transparent to the  terminal. The following APL
expressions will setup this state:
 
     )SET $Q1 ME,ORG=T,FUN=U
     $QBTRANS 1 1
 
VIP
APLANAR.X
AID=GRAPHICS
APL
TOOL=APLANAR
An APL workspace containing functions which plot on a number of devices which
may be attached to CP-6.
CHANGES
R_o P
 
The  "order" of a picture form P is the number of strokes it represents, which
can be computed as follows:
 
TYPE             o P
------------------------------
EMPTY            0
POINT            1
STROKE           1
PICTURE          +/1=P[;$QIO]
 
R_N r P
 
The  restructure function is conceptually similar to the APL reshape function.
Its left argument must be a non-negative integer.  If (o P) is greater than or
equal to N, then (N r P) consists of the first N strokes of P.  If (o P) is
less than N, then  the strokes of P are cyclically repeated until a picture
with N strokes is created.
 
R_A u B
 
The  union function combines picture forms to create new pictures.  The empty
picture is both a right and a left identity for  u. The result is a new picture
R made up of all of the strokes in B following all of the strokes in A. This
function is in essence picture catenation.
 
 
     win_2 2$R 0 0 1 1
     DRAW V2S  (3 2$R 1 0 0 0 0 1) u (3 2$R 1 0 1 1 0 1)
 
In  this example, a unit square is plotted, consisting of the segment passing
through (1,0), (0,0) and (0,1); followed by the segment passing through (1,0),
(1,1) and (0,1).
00001
 
R_N x T This  function constructs a translation array the number of times
indicated by the left argument.
 
 
     2 x 2 2 $R 10 20 100 200
 
 
In  this example, the left argument of 2 indicates that the result is to be the
same rank (2) but that each row is to appear twice.  This is in fact the
"replicate" function and is usefull when  it is required to construct several
copies of a (perhaps complicated) picture, each translated by a different
amount.
 
00001
