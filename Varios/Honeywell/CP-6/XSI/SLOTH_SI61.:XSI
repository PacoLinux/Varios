/*M* SLOTH - dump SLOT Helper */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* DDA */
SLOTH: PROC MAIN;
 
      DCL GRANULE CHAR(4096) STATIC AREADEF (DS3SID) INIT(' ');
      DCL GRANULE$ PTR CONSTANT INIT(ADDR(GRANULE));
      DCL KEY UBIN STATIC;
 
      DCL LO_BUFFER CHAR(80) STATIC;
 
      DCL SLOTH_NODES BIT(1) ALIGNED SYMREF;
 
      DCL PROMPT CHAR(0) CONSTANT INIT('>');
 
      DCL INIT_FMT CHAR(0) CONSTANT INIT
         ('SLOTH A00 Here');
 
      DCL 1 SAD_FMT CONSTANT,
            2 * CHAR(0) INIT('Dump Area @.%.1P%O for .%.2P%O granules%/'),
            2 * CHAR(0) INIT('Monid  : %.9P%4A%/'),
            2 * CHAR(0) INIT('SCount : %.0P%D%/'),
            2 * CHAR(0) INIT('LDump  : %.3P%D%/'),
            2 * CHAR(0) INIT('Slots  : %.4P.%O%3(, .%O%)%S');
 
      DCL 1 RVBUFF_FMT CONSTANT,
            2 * CHAR(0) INIT('%/Slot%8-: %D%/'),
            2 * CHAR(0) INIT('Busy   : %D%26-Recovery start : %..3U%/'),
            2 * CHAR(0) INIT('Size   : .%O%26-          stop : %..3U%/'),
            2 * CHAR(0) INIT('Dump   : :DF%4A%3ZD%26-   RCVR2 start : %..3U%/'),
            2 * CHAR(0) INIT('Scode  : %J%S%26-          stop : %..3U');
 
      DCL SAD_DA UBIN;
      DCL RVBUFF_DA(0:3) UBIN;
 
      DCL BLK$ PTR;
      DCL 1 BLK_ERR REDEF BLK$,
            2 * BIT(19) UNAL,
            2 ERR# UBIN(14) UNAL,
            2 * BIT(3) UNAL;
 
      DCL B$JIT$ PTR SYMREF;
      DCL B$TCB$ PTR SYMREF;
 
      DCL M$CP6S DCB;
      DCL M$LO DCB;
      DCL M$LM DCB;
 
      %INCLUDE CP_6;
      %INCLUDE B$JIT;
      %INCLUDE XUF_ENTRY;
      %INCLUDE XUR_ENTRY;
      %INCLUDE B_ERRORS_C;
      %INCLUDE XU_MACRO_C;
      %INCLUDE XU_FORMAT_C;
      %INCLUDE SLOTH_C61;
 
      %INCLUDE I$DISK;
      %INCLUDE FM$GRAN;
      %INCLUDE IR_DATA_M;
      %INCLUDE NI$TABLES;
 
/*N*  %XUT_ENTRY;*/
      %PARSE$OUT;
      %PARSE$SYM;
 
      %F_FDS (BUF=LO_BUFFER,
              DCB=M$LO);
 
      %FM$VID;
      %RV_BOOTID;
      %RV_BUFF (STCLASS=BASED);
 
      %F$DCB;
      %B$TCB;
      %B$ALT;
 
      %XUR_INIT (GOODCMD=YES,
                 SYNTAX=YES,
                 ADAPT=NIL,
                 COMMANDS=YES,
                 INHIBIT_END=YES);
 
      %VLP_SN (FPTN=SN_CP6S,
               N=1,
               SN='CP-6''S');
 
      %VLP_RPSN (FPTN=RPSN_CP6S,
                 N=1,
                 PSN='CP-6''S',
                 DISP=REM);
 
      %FPT_OPEN (FPTN=OPEN_CP6S,
                 DCB=M$CP6S,
                 RES='DP',
                 SN=SN_CP6S,
                 ASN=DEVICE);
 
      %FPT_READ (FPTN=READ_CP6S,
                 DCB=M$CP6S,
                 BUF=GRANULE,
                 KEY=KEY,
                 KEYS=YES);
 
      %FPT_WRITE (FPTN=WRITE_CP6S,
                  DCB=M$CP6S,
                  BUF=GRANULE,
                  KEY=KEY);
 
      %FPT_CLOSE (FPTN=CLOSE_CP6S,
                  DCB=M$CP6S,
                  DISP=SAVE);
 
      %FPT_RESCTL (FPTN=RESCTL_CP6S,
                   RPSN=RPSN_CP6S);
 
      %FPT_EXIT (FPTN=EXIT_ERROR,
                 STEPCC=4);
 
%EJECT;
 
      IF NOT B$JIT.PRIV.ACTIVE.FMDIAG THEN DO;
         CALL ERROR (%E#NOPRIV);
         CALL M$EXIT (EXIT_ERROR);
         END;
 
      CALL X$WRITE (F_FDS, VECTOR(INIT_FMT));
 
      CALL XUR$INIT (XUR_INIT);
      CALL PACK_CMD_INIT;
 
      DO FOREVER;
COMMAND_LOOP:
         CALL XUR$GETCMD (SLOTH_NODES,BLK$,VECTOR(PROMPT)) ALTRET (GETCMD_ALT);
         DO CASE (BLK$->OUT$BLK.CODE);
            CASE (%DI#);
               CALL CHECK_OPEN ALTRET (CHECK_OPEN_ALT);
               CALL DI_CMD;
            CASE (%RESET#);
               CALL CHECK_OPEN ALTRET (CHECK_OPEN_ALT);
               CALL RESET_CMD;
            CASE (%TEST#);
               CALL CHECK_OPEN ALTRET (CHECK_OPEN_ALT);
               CALL TEST_CMD;
            CASE (%PACK#);
               CALL PACK_CMD;
            CASE (%END#);
               CALL CLOSE_PACK;
               CALL M$EXIT;
            CASE (ELSE);
               CALL ERROR (%E#INTERNAL);
            END;
         END;
 
CHECK_OPEN_ALT:
      CALL ERROR (%E#NOPACK);
      GOTO COMMAND_LOOP;
 
GETCMD_ALT:
      CALL XUR$ERRMSG (BLK_ERR);
      IF BLK_ERR.ERR# ~= %E$EOF THEN GOTO COMMAND_LOOP;
      CALL CLOSE_PACK;
      CALL M$EXIT (EXIT_ERROR);
 
%EJECT;
PACK_CMD: PROC;
 
      CALL CLOSE_PACK;
 
      SN_CP6S.SN#(0) = BLK$->OUT$BLK.SUBLK$(0)->OUT$SYM.TEXT;
      RPSN_CP6S.NN# = 1;
      RPSN_CP6S.RPLIST.PSN#(0) = SN_CP6S.SN#(0);
 
PACK_CMD_INIT: ENTRY;
 
      CALL M$OPEN (OPEN_CP6S)
         WHENALTRETURN DO;
            CALL ALTRET_ERROR;
            RETURN;
            END;
 
      CALL READ_VID
         WHENALTRETURN DO;
            CALL CLOSE_PACK;
            RETURN;
            END;
 
      CALL READ_SAD
         WHENALTRETURN DO;
            CALL CLOSE_PACK;
            RETURN;
            END;
 
END PACK_CMD;
%EJECT;
DI_CMD: PROC;
 
      DCL I SBIN;
 
      CALL READ_SAD ALTRET (RET);
      CALL DISPLAY_SAD;
 
      IF BLK$->OUT$BLK.NSUBLKS > 0 THEN DO;
         DO I = 0 TO 3;
            IF RVBUFF_DA(I) ~= 0 THEN DO;
               CALL READ_RVBUFF(I) ALTRET (NEXT);
               CALL X$WRITE (F_FDS, VECTOR(RVBUFF_FMT),
                                    VECTOR(I),
                                    VECTOR(GRANULE$->RV_BUFF.BUSY),
                                    VECTOR(GRANULE$->RV_BUFF.UTS1),
                                    VECTOR(GRANULE$->RV_BUFF.SIZE),
                                    VECTOR(GRANULE$->RV_BUFF.UTS2),
                                    VECTOR(GRANULE$->RV_BUFF.DMONID),
                                    VECTOR(GRANULE$->RV_BUFF.SCOUNT),
                                    VECTOR(GRANULE$->RV_BUFF.UTS3),
                                    VECTOR(GRANULE$->RV_BUFF.SCODE),
                                    VECTOR(GRANULE$->RV_BUFF.UTS4));
               END;
NEXT:       END;
         END;
 
RET:  RETURN;
 
END DI_CMD;
%EJECT;
RESET_CMD: PROC;
 
      DCL WRITE# BIT(1) ALIGNED;
 
      DCL SLOTS# BIT(1) ALIGNED;
      DCL SCOUNT# BIT(1) ALIGNED;
 
      DCL I SBIN;
 
      WRITE# = '1'B;
      GOTO RESET_COMMON;
 
TEST_CMD: ENTRY;
      WRITE# = '0'B;
 
RESET_COMMON:
      SLOTS# = '0'B;
      SCOUNT# = '0'B;
 
      IF BLK$->OUT$BLK.NSUBLKS = 0 THEN DO;
         SLOTS# = '1'B;
         SCOUNT# = '1'B;
         END;
      ELSE
      IF BLK$->OUT$BLK.SUBLK$(0)->OUT$BLK.CODE = %ALL# THEN DO;
         SLOTS# = '1'B;
         SCOUNT# = '1'B;
         END;
      ELSE
      IF BLK$->OUT$BLK.SUBLK$(0)->OUT$BLK.CODE = %SLOTS# THEN
         SLOTS# = '1'B;
      ELSE
      IF BLK$->OUT$BLK.SUBLK$(0)->OUT$BLK.CODE = %SCOUNT# THEN
         SCOUNT# = '1'B;
      ELSE DO;
         CALL ERROR (%E#INTERNAL);
         RETURN;
         END;
 
      CALL READ_SAD ALTRET (RET);
 
      IF SCOUNT# THEN
         GRANULE$->I$DISKDIR.DUMP.SCOUNT = 0;
 
      IF SLOTS# THEN DO;
         GRANULE$->I$DISKDIR.DUMP.LDUMP = 0;
         GRANULE$->I$DISKDIR.RCVR2.DA(0) = GRANULE$->I$DISKDIR.DUMP.DA;
         DO I = 1 TO 3;
            GRANULE$->I$DISKDIR.RCVR2.DA(I) = 0;
            END;
         END;
 
      CALL DISPLAY_SAD;
 
      IF WRITE# THEN CALL WRITE_SAD;
 
      IF SLOTS# THEN DO;
         CALL READ_RVBUFF(0) ALTRET (RET);
         GRANULE$->RV_BUFF.BUSY = 0;
         IF WRITE# THEN CALL WRITE_RVBUFF(0);
         END;
 
RET:  RETURN;
 
END RESET_CMD;
%EJECT;
CHECK_OPEN: PROC ALTRET;
 
      IF DCBADDR(DCBNUM(M$CP6S))->F$DCB.FCD# THEN
         RETURN;
      ELSE
         ALTRETURN;
 
END CHECK_OPEN;
/**/
CLOSE_PACK: PROC;
 
      CALL CHECK_OPEN ALTRET (RET);
 
      CALL M$CLOSE (CLOSE_CP6S)
         WHENALTRETURN DO;
            CALL ALTRET_ERROR;
            END;
 
      CALL M$RELRES (RESCTL_CP6S)
         WHENALTRETURN DO;
            IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.ERR# ~= %E$PAD AND
               B$TCB$->B$TCB.ALT$->B$ALT.ERR.ERR# ~= %E$NRLOPN THEN
               CALL ALTRET_ERROR;
            END;
 
RET:  RETURN;
 
END CLOSE_PACK;
/**/
READ_VID: PROC ALTRET;
 
      KEY = 0;
      CALL M$READ (READ_CP6S)
         WHENALTRETURN DO;
            CALL ERROR (%E#READVID);
            ALTRETURN;
            END;
      IF GRANULE$->FM$VID.PSN ~= 'CP-6''S' THEN DO;
         CALL ERROR (%E#NOCP6S);
         ALTRETURN;
         END;
      SAD_DA = GRANULE$->FM$VID.SYSDIRDA;
 
END READ_VID;
/**/
READ_SAD: PROC ALTRET;
 
      DCL I SBIN;
 
      KEY = SAD_DA;
      CALL M$READ (READ_CP6S)
         WHENALTRETURN DO;
            CALL ERROR (%E#READSAD);
            ALTRETURN;
            END;
      DO I = 0 TO 3;
         RVBUFF_DA(I) = GRANULE$->I$DISKDIR.RCVR2.DA(I);
         END;
 
END READ_SAD;
/**/
WRITE_SAD: PROC;
 
      KEY = SAD_DA;
      CALL M$WRITE (WRITE_CP6S)
         WHENALTRETURN DO;
            CALL ALTRET_ERROR;
            CALL ERROR (%E#WRITESAD);
            END;
 
END WRITE_SAD;
/**/
READ_RVBUFF: PROC (SLOT) ALTRET;
 
      DCL SLOT UBIN;
 
      KEY = RVBUFF_DA(SLOT);
      CALL M$READ (READ_CP6S)
         WHENALTRETURN DO;
            CALL ERROR (%E#READRVBUFF);
            ALTRETURN;
            END;
 
END READ_RVBUFF;
/**/
WRITE_RVBUFF: PROC (SLOT);
 
      DCL SLOT UBIN;
 
      KEY = RVBUFF_DA(SLOT);
      CALL M$WRITE (WRITE_CP6S)
         WHENALTRETURN DO;
            CALL ALTRET_ERROR;
            CALL ERROR (%E#WRITERVBUFF);
            END;
 
END WRITE_RVBUFF;
/**/
DISPLAY_SAD: PROC;
 
     DCL TEMPSIZE SBIN;
     DCL TEMP1$ PTR;
     DCL TEMP2$ PTR;
 
 
     TEMP1$ = ADDR(GRANULE$->I$DISKDIR.DUMP);
     TEMP2$ = ADDR(GRANULE$->I$DISKDIR);
 
 
            TEMPSIZE = POFFC(TEMP1$,TEMP2$);
 
      CALL X$WRITE (F_FDS, VECTOR(SAD_FMT),
            VECTOR(SUBSTR(GRANULE,TEMPSIZE,10*4)));
 
END DISPLAY_SAD;
%EJECT;
ALTRET_ERROR: PROC;
 
      DCL DCB# UBIN;
 
      %VLP_ERRCODE;
 
      DCB# = B$TCB$->B$TCB.ALT$->B$ALT.DCB#;
      VLP_ERRCODE = B$TCB$->B$TCB.ALT$->B$ALT.ERR;
      VLP_ERRCODE.SEV = 0;
 
      CALL XUR$SETERRMSG;
      CALL XUR$ERRMSG (VLP_ERRCODE, DCB#);
 
END ALTRET_ERROR;
/**/
ERROR: PROC (ERR#);
 
      DCL ERR# UBIN;
 
      DCL I UBIN;
      DCL M$LM$ PTR;
 
      %VLP_ERRCODE (FCG=XX,
                    MID=X);
 
      %VLP_NAME (FPTN=RU_NAME,
                 LEN=40);
 
      VLP_ERRCODE.ERR# = ERR#;
      VLP_ERRCODE.SEV = 0;
 
      M$LM$ = DCBADDR(DCBNUM(M$LM));
      CALL CONCAT (RU_NAME.NAME#, SUBSTR(M$LM$->F$DCB.NAME#.C,0,M$LM$->F$DCB.NAME#.L),
                                  '.',M$LM$->F$DCB.ACCT#);
      CALL INDEX (I, ' ', RU_NAME.NAME#);
      RU_NAME.L# = I;
      CALL XUR$SETERRMSG (RU_NAME);
 
      CALL XUR$ERRMSG (VLP_ERRCODE);
 
END ERROR;
 
END SLOTH;
