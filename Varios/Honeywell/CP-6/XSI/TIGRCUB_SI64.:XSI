/*M*  CUBDISPLAY  routine for TIGRCUB display of DCT,MON,ETC */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X*/
/*        NAME :    CUBDISPLAY
          PURPOSE : CUBDISPLAY is a routine that is called to display
                    Device Control Tables (DCT's) , Channel Tables
                    (DQH's), and MONitor pointer information that TIGR
                    set up for TIGRCUB.  To see if it works right.
          CALLED :  CUBDISPLAY is called from ITX$INITS in TC_SI61.
          NOTE   :  If the ALTRETurn is taken, M$ERR is called.     */
          /*
                              Author :  J.T.Boucher, LADC
                              Date   :  8/88                        */
 
CUBDISPLAY : PROC ALTRET;
/* */
/* */
DCL CUB$DCT   ENTRY ALTRET;
DCL CUB$DQH   ENTRY ALTRET;
DCL CUB$MON   ENTRY ALTRET;
/**/
%INCLUDE CP_6;
%INCLUDE DA_FORMAT_C;
%INCLUDE B_STRINGS_C;
%INCLUDE B_SEGIDS_C;
%INCLUDE M_INFO_C;
/* */
     %DA_HDR (NAME=DA_HDR,STCLASS="STATIC SYMDEF");
/* */
/**/
%SUB YES='1'B;
%SUB NO='0'B;
%SUB TRUE='1'B;
%SUB FALSE='0'B;
/**/
%FPT_WRITE( FPTN=TO_TERM,
            DCB=M$LO,
            BUF=MESSAGE   );
 
DCL M$LO  DCB;
DCL MESSAGE CHAR(80) STATIC;
/**/
%EJECT;
/**/
/*   BASED DATA     */
/**/
/* these DCL's added to solve unsatisfied reference for MM_ ptrs  */
%EQU VS1OFFPT = 0;
%EQU VS2OFFPT = (%VS2PGTBL-%VS1PGTBL) * 1024;
%EQU VS3OFFPT = (%VS3PGTBL-%VS1PGTBL) * 1024;
/**/
DCL 1 MM_PTPTRS$ (0:%B_CWSQ16) CONSTANT SYMDEF,
      2 WOFFSET UBIN (18) UNAL INIT(0*9,%VS1OFFPT,%VS2OFFPT,%VS3OFFPT,
                             0*0),
      2 OFFSET UBIN(6) UNAL INIT (0*0),
      2 SEGID BIT (12) INIT (
        %MPTSID , %MPTSID , %NULLSID , %NULLSID ,
        %UPTSID , %UPTSID , %UPTSID , %IOENDSID ,
        %UPTSID , %VPTSID , %VPTSID , %VPTSID ,
        %NULLSID , %CPGT1SID , %CPGT2SID , %CPGT3SID ,
        %CPGT4SID , %CPGT5SID , %CPGT6SID , %CPGT7SID ,
        %CPGT8SID , %CPGT9SID , %CPGT10SID , %CPGT11SID ,
        %CPGT12SID , %CPGT13SID , %CPGT14SID ,%CPGT15SID,
        %CPGT16SID );
 
DCL 1 MM_LSPTRS$ (0:%VS3WSQ) CONSTANT SYMDEF,
      2 OFFSET UBIN (24) UNAL INIT (0*0),
      2 SEGID BIT(12) INIT (
        %LSSID , %LSSID , %NULLSID , %NULLSID ,
        %CPLSSID , %DBLSSID , %ASLLSSID , %NULLSID ,
         %USERLSSID , %USERLSSID, %USERLSSID, %USERLSSID);
/**/
/*   SYMREFS        */
/**/
DCL DISPLAY_DCT BIT(1) ALIGNED  SYMREF;
DCL DISPLAY_MON BIT(1) ALIGNED  SYMREF;
DCL DISPLAY_DQH BIT(1) ALIGNED  SYMREF;
DCL DA_FMT_NEWCMD BIT(1) SYMREF;
/**/
%EJECT;
 
/* ********************************************************* */
/* *                                                       * */
/* *         Begin CUBDISPLAY options routine              * */
/* *                                                       * */
/* ********************************************************* */
 
CUB_DI:  ;
/**/
  DA_FMT_NEWCMD = YES;    /* init to save extra blank line output in header */
/**/
          IF ( DISPLAY_DCT  ) THEN
            DO;
               CALL  CUB$DCT
               WHENALTRETURN
                  DO;
                    MESSAGE = ' ';
                    MESSAGE = ' ... Alt Ret from CUB$DCT ... ';
                    CALL M$WRITE( TO_TERM );
                    ALTRETURN;
                  END;
            END;    /* if DCT di */
          IF ( DISPLAY_DQH ) THEN
            DO;
               CALL  CUB$DQH
               WHENALTRETURN
                  DO;
                    MESSAGE = ' ';
                    MESSAGE = ' ... Alt Ret from CUB$DQH ... ';
                    CALL M$WRITE( TO_TERM );
                    ALTRETURN;
                  END;
            END;    /* if DQH di */
          IF ( DISPLAY_MON ) THEN
            DO;
               CALL  CUB$MON
               WHENALTRETURN
                  DO;
                    MESSAGE = ' ... Alt Ret from CUB$MON ... ';
                    CALL M$WRITE( TO_TERM );
                    ALTRETURN;
                  END;
            END;    /* if MON di */
CHOW:    CALL M$EXIT;
 
END CUBDISPLAY;
%EOD;
/*M* CUB$DCT - DCT,DQH                     displays for ANLZ */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X*/
/*        NAME :    CUB$DCT (from ANLZ's DAD$DCT,modified for TIGRCUB)
          PURPOSE : CUB$DCT will be used to display Device Control
                    Tables (DCT's) and Channel Tables (DQH's).  It
                    was taken from .:E00SI, and Hacked down to size
                    to fit TIGRCUB's small needs.              */
                    /*
                              Author :  J.T.Boucher, LADC
                              Date   :  8/88                   */
CUB$DCT: PROC ALTRET;
/**/
DCL DAF$WRITE EPTR SYMREF;
DCL DAF$INIT ENTRY(1) ALTRET;
DCL DAF$NEWPAGE ENTRY;
DCL TDP$SYSCON ENTRY(3) ALTRET;
DCL ITE$ERROR ENTRY(2);
DCL NKP$PART ENTRY(2)  ALTRET;
/**/
%INCLUDE CP_6_SUBS;
%INCLUDE IT_ERROR_C;
%INCLUDE IT_SUBS_C;
%INCLUDE DA_ANLZ_R;
%INCLUDE DA_SYMBOLS_R;
%INCLUDE DA_PERR_C;
%INCLUDE DA_FORMAT_C;
%INCLUDE NI$TABLES;
%INCLUDE NI_DATA_C;
%INCLUDE N$REQ;
%MACRO FT$DDT(BASED=BASED);
%INCLUDE FT$DDT;
%MEND;
%INCLUDE FT_SUBS;
/**/
%INCLUDE B_MLSMAC_C;
%INCLUDE B_SEGIDS_C;
%INCLUDE SS_SCHED_C;
%INCLUDE SS_SCHED_R;
%INCLUDE B$P;
%INCLUDE FM_CACHE_R;
%INCLUDE FM_CACHE_C;
%INCLUDE FR$RAT;
%INCLUDE FR_DATA_R;
%INCLUDE FR_SUBS;
%INCLUDE JG_GHOSTS_C;
%INCLUDE P_PMDAT_R;
%INCLUDE K_INTERFACE_M;
%INCLUDE K_ADDRESS_M;
%INCLUDE K_SESSION_E;
%INCLUDE K_SESSION_M;
%INCLUDE KNN_NETWORK_M;
%INCLUDE KI_MACROS_C;
/**/
%INCLUDE IT$CMDWD;
%INCLUDE IT$MONOPT;
%INCLUDE IT$SPROC;
%INCLUDE IT$SPROCDS;
%INCLUDE IT$RES;
%INCLUDE B$USER;
/**/
%EJECT;
/**/
/*   MACRO'S  */
/**/
%B_MLS (FPTN=B$MLNK,STCLASS=BASED);
%FR$RAT;
%B$USERREFS;
%NI$REQ;
%FMC$CACHE;
%FMC$STATS;
%FMC$TYPTBL;
%KI$TCTX;
%KI$FEI;
%KNN$OSIROUTE(FPTN=KI$OSIROUTE);
/**/
/**/
%EJECT;
/**/
/*  SYMREFS  */
/**/
DCL B$DS5$ PTR SYMREF;
DCL B$DS6$ PTR SYMREF;
DCL S_DL$ PTR SYMREF;
DCL KI_TDCT$ PTR SYMREF;
DCL KI_ROUTE$$ PTR SYMREF;
DCL KI_NODES UBIN SYMREF;
DCL KI_MXFE UBIN SYMREF;
DCL KI_TCTX_MAX# UBIN SYMREF;
DCL KI_TCTX$$ PTR SYMREF;
DCL KI_FEI$$ PTR SYMREF;
DCL KI_OSIROUTE$$ PTR SYMREF;
DCL KI_OSIMAX# UBIN SYMREF;
DCL KIS_MAJOR$ PTR SYMREF;
DCL KIS_MINOR$ PTR SYMREF;
DCL KIT_LAST_TDCT UBIN WORD SYMREF ;
DCL B_MUAIS UBIN(36) SYMREF;
DCL NK_CUR UBIN WORD SYMREF;
DCL IT_MMDSMAX(0:0) UBIN BYTE UNAL SYMREF;
DCL IT_PATCHSP UBIN WORD SYMREF;
DCL IT_DUMPSIZE UBIN WORD SYMREF;
/**/
%VLR_SITEINFO (FPTN=B_SITEINFO,STCLASS=SYMREF);
%VLR_MONINFO (FPTN=B_MONINFO,STCLASS=SYMREF);
/**/
/**/
DCL NK_MXLOCAL SBIN SYMREF;
DCL NK_MXTOTAL SBIN SYMREF;
DCL NI_IOMS    SBIN SYMREF;
DCL NI_NUMIOQ  SBIN SYMREF;
DCL NI_CHANS   SBIN SYMREF;
DCL NI$IOQ$    PTR  SYMREF;
DCL NI$CHT$    PTR  SYMREF;
DCL NI$IOM$(0:3)    PTR  SYMREF;
DCL B$DS3$ PTR SYMREF;
DCL B$PS$(0:0) PTR SYMREF;
/**/
%EJECT;
/**/
/*    LOCAL  STORAGE   */
/**/
DCL DCT$$ PTR;
DCL DCT$ PTR;
DCL DQH$ PTR;
DCL SQH$ PTR;
DCL IOM$ PTR;
DCL SQHS$(0:56) PTR;
DCL CHT$ PTR;
DCL P$ PTR;
DCL NDCT SBIN;
DCL DCTXHI SBIN;
DCL DCTXLO SBIN;
DCL MXLOCAL SBIN;
DCL MXTOTAL SBIN;
DCL IOMS SBIN;
DCL I SBIN;
DCL J SBIN;
DCL K SBIN;
 /* */
DCL DCTX SBIN;
DCL DEVNM CHAR(8);
DCL FL SBIN;
DCL SQ SBIN;
DCL DFLG SBIN;
DCL DCTADR$ PTR;
DCL 1 IOCHAN,
      2 IOM SBIN,
      2 CHAN SBIN,
      2 DVN SBIN;
DCL 1 DQHFL ALIGNED,
      2 IOM SBIN,
      2 CHAN SBIN;
DCL STATE CHAR(5);
DCL TDUSER SBIN;
DCL MSG CHAR(3);
DCL 1 STATUS,
      2 DOWN CHAR(4),
      2 TND CHAR(3);
DCL 1 DQCHAN ALIGNED,
      2 IOM SBIN,
      2 CHAN SBIN;
DCL LOSTINT SBIN;
DCL STOP CHAR(3);
DCL MREC CHAR(3);
DCL RESCOD CHAR(9);
DCL QFL SBIN;
DCL GATE$ PTR;
DCL G$ PTR;
/**/
DCL  PTR_NAME  CHAR(18);
DCL  TEMP$ PTR;
DCL 1 TEMP$PTR REDEF TEMP$,
      2 OFFSET UBIN(18) UNAL,
      2 * BIT(6) UNAL,
      2 SEGID BIT(12) UNAL ;
DCL  ADDR$ PTR;
DCL 1 ADDR$PTR REDEF ADDR$,
      2 OFFSET UBIN(18) UNAL,
      2 * BIT(6) UNAL,
      2 SEGID BIT(12) UNAL ;
/**/
DCL ERR SBIN;
DCL RSLT BIT(72) ALIGNED;
DCL 1 TEXT_C,
        2 L  UBIN(9)  UNAL,
        2 T  CHAR(10) UNAL;
/**/
%EJECT;
/**/
/*   CONSTANT  DATA  */
/**/
DCL 1 BLANKNAME CONSTANT,
      2 * UBIN HALF HALIGNED INIT(2),
      2 * CHAR(2) INIT('  ');
DCL GATFMT CHAR(0) CONSTANT INIT('GATE=(%T%S)');
DCL NOYES(0:1) CHAR(3) CONSTANT INIT('NO','YES');
DCL TDTST(0:5) CHAR(3) CONSTANT INIT(' ','PLT','ITR','MDR','MTR','FEP');
DCL IOSTATE(0:7) CHAR(5) CONSTANT INIT('IDLE','RQSTD','ASSGN','SPWT',
                                       'KIWT','BUSY','SUSP','MPCWT');
 
/**/
%EJECT;
/**/
/*   BASED  DATA   */
/**/
DCL GATE BIT(72) BASED DALIGNED;
DCL 1 B$LOCK BASED ALIGNED,
      2 W1 BIT(36) ALIGNED,
      2 W2 BIT(36) ALIGNED;
DCL SBINWORD SBIN BASED;
DCL UBINHALF UBIN HALF HALIGNED BASED;
DCL UARAY(0:0) UBIN BASED;
DCL PTR$ PTR BASED;
DCL PTRS$(0:0) PTR BASED;
DCL N$DCT$(0:0) PTR BASED(DCT$$);
/* */
%NI$DCT (NAME=DCT,STCLASS="BASED(DCT$)");
%NI$DQH (NAME=DQH,STCLASS="BASED(DQH$)");
%NI$CHT (NAME="CHT(0:0)",STCLASS="BASED(CHT$)");
%NI$SQH (NAME=SQH,STCLASS="BASED(SQH$)");
%NI$IOM (NAME=IOM,STCLASS="BASED(IOM$)");
%NI$PARTITION (NAME=IT_PARTITION,STCLASS=SYMREF);
%N$REQ;
/* */
DCL KI$TCTX$(0:0) PTR BASED(KI_TCTX$$);
DCL KI$OSIROUTE$(0:0) PTR BASED(KI_OSIROUTE$$);
DCL KI$ROUTE$(0:0) PTR BASED(KI_ROUTE$$);
DCL KI$FEI$(0:0) PTR BASED(KI_FEI$$);
/**/
DCL TH$ PTR;
DCL 1 TH BASED(TH$),
      2 L UBIN HALF HALIGNED,
      2 C CHAR(TH.L);
/**/
%EJECT;
/**/
/*   REPORT  STRUCTURES  */
/**/
%REPORT (TITLE='DCT - Device Control Tables',NAME=DCTRPT,
         TABDFLT=5,
         TRUNC=YES,
         HEADER=YES);
%HEADER (LAST=NO,TEXT= ' ');
%HEADER (LAST=NO,TEXT=
'                     TIGRCUB ==>>  DCT - Device Control Tables  ');
%HEADER (LAST=NO,TEXT=
'                  *********************************************** ');
%HEADER (LAST=NO,TEXT= ' ');
%HEADER (LAST=NO,TEXT= ' ');
%HEADER (LAST=NO,TEXT=
'DCTX DEVNAME  FL   SQ     DFLG    I-CCC-DD STATE MSG PART TND TDU DCTADR      ');
%HEADER (TEXT=
'---- -------- ---- ------ ------- -------- ----- --- ---- --- --- ------------');
DCL DCTFMT CHAR(0) CONSTANT INIT(
'%4D %A %4D .%5ZO .%6ZO %1D-%3ZD-%2ZD %A %A %4A %3A %3ZO %12ZO');
/**/
/**/
%REPORT (TITLE='Channel Tables - Host',NAME=DQHRPT,
         TABDFLT=5,
         TRUNC=YES,
         HEADER=YES);
%HEADER (LAST=NO,TEXT= ' ');
%HEADER (LAST=NO,TEXT=
'                     TIGRCUB ==>>  DQH - Channel  Tables    ');
%HEADER (LAST=NO,TEXT=
'                  ***************************************** ');
%HEADER (LAST=NO,TEXT= ' ');
%HEADER (LAST=NO,TEXT= ' ');
%HEADER (LAST=NO,TEXT=
'I-CCC MPC  FL    DQH$         IO$          SQH$         PRT TND STATE TI STP MRC');
%HEADER (TEXT=
'----- ---- ----- ------------ ------------ ------------ --- --- ----- -- --- ---');
DCL DQHFMT CHAR(0) CONSTANT INIT(
'%1D-%3ZD %4A%S %1D-%3ZD %12ZO %12ZO %12ZO %3A %A %A %2D %A %A');
/**/
/**/
%REPORT (TITLE='MON - Monitor Pointer Values',NAME=MONRPT,
         TABDFLT=5,
         TRUNC=YES,
         HEADER=YES);
%HEADER (LAST=NO,TEXT= ' ');
%HEADER (LAST=NO,TEXT=
'                     TIGRCUB ==>>  MON - Monitor Pointer Values ');
%HEADER (LAST=NO,TEXT=
'                  ************************************************');
%HEADER (LAST=NO,TEXT= ' ');
%HEADER (LAST=NO,TEXT= ' ');
%HEADER (LAST=NO,TEXT=
'POINTER                   VALUE              ADDRESS            FRAMED');
%HEADER (LAST=NO,TEXT=
' NAME                     P$ ->                 P$               AREA ');
%HEADER (TEXT=
'------------------        ------------       ------------       ------');
DCL MONFMT CHAR(0) CONSTANT INIT(
'%A        %12ZO       %12ZO       %6ZD');
/**/
%EJECT;
DI_DCTS: ;
   MXLOCAL=NK_MXLOCAL;
   MXTOTAL=NK_MXTOTAL;
   DCT$$ = B$DS3$;            /* base N$DCT$ array @ static TC data */
/**/
      CALL DAF$INIT(DCTRPT);
      DCTXLO=1;
      DCTXHI=MXLOCAL;
      NDCT=4;
        DO I=DCTXLO TO DCTXHI;
             IF N$DCT$(I)~=ADDR(NIL) THEN DO;
                DCT$ = N$DCT$(I);  /* base DCT in correct segment   */
                DQH$ = DCT.DQH$;
                SQH$ = DCT.SQH$;
                  TEMP$ = N$DCT$( I );
                  TEMP$PTR.SEGID = %TIGRSID;
                  DCTADR$ = TEMP$;
                  CALL DIDCT;
NXTDCT:           END;
             END;
 
ALT: RETURN;
%EJECT;
DIDCT: PROC;
   DCTX=DCT.DCTX;
   DEVNM=DCT.DEVNM;
   IF DCT.FL$=ADDR(NIL) THEN DO;
FL0:    FL=0;
        END;
   ELSE DO;
        FL = DCT.FL$ -> DCT.DCTX;
        END;
   SQ= 0;       /* ???? */
   DFLG=BITBIN(DCT.DFLG);
   IOCHAN.DVN=DCT.DVN;
   IF DCT.DQH$=ADDR(NIL) THEN DO;
CHAN0:  IOCHAN.IOM=0;
        IOCHAN.CHAN=0;
        END;
   ELSE DO;
        DQH$ = DCT.DQH$;
        IF DQH$ ~= ADDR(NIL) THEN DO;
           IOCHAN.IOM=DQH.IOCHAN.IOM;
           IOCHAN.CHAN=DQH.IOCHAN.CHANNEL;
           END;
        ELSE DO;
           GOTO CHAN0;
           END;
        END;
   STATE=IOSTATE(DCT.STATE);
   TDUSER=DCT.TDUSER#;
   MSG=NOYES(BITBIN(DCT.MSG#~=0));
   STATUS.DOWN = NOYES( BITBIN( IT_PARTITION.DEVICE( DCTX ) ) );
   STATUS.TND=TDTST(DCT.STATUS.TND);
   CALL DAF$WRITE(VECTOR(DCTFMT),
     VECTOR(DCTX),
     VECTOR(DEVNM),
     VECTOR(FL),
     VECTOR(SQ),
     VECTOR(DFLG),
     VECTOR(IOCHAN),
     VECTOR(STATE),
     VECTOR(MSG),
     VECTOR(STATUS),
     VECTOR(TDUSER),
     VECTOR(DCTADR$));
   RETURN;
END DIDCT;
%EJECT;
/*F*      NAME    :  CUB$DQH
          PURPOSE :  CUB$DQH is used to display the Channel Table
                     information set up by TIGR for TIGRCUB.
          OUTPUT  :  It gives the DQH stuff that ANLZ would give.
*/
CUB$DQH:  ENTRY  ALTRET ;
/**/
   CALL DAF$INIT(DQHRPT);
   IOMS = NI_IOMS - 1;       /* number of IOM's is defined in TIGR */
   CHT$ = NI$CHT$;            /* Channel Table point from TIGR      */
      DO I=0 TO IOMS;
        DO J=8 TO %N_MAXCHANS-1;
             DQH$=CHT.DQH$(I*%N_MAXCHANS+J);
             IF DQH$ ~= ADDR(NIL)  THEN DO;
                  TEMP$ = DQH$;
                  TEMP$PTR.SEGID = %TIGRSID;
                  DCTADR$ = TEMP$;
                  TEMP$ = DQH.IO$;
                  IF TEMP$ ~= ADDR(NIL) THEN  TEMP$PTR.SEGID = %TIGRSID;
                  DQH.IO$ = TEMP$;
                  TEMP$ = DQH.SQH$;
                  IF TEMP$ ~= ADDR(NIL) THEN  TEMP$PTR.SEGID = %TIGRSID;
                  DQH.SQH$ = TEMP$;
                  CALL DIDQH;
                  END;
             END;
        END;
   RETURN;
%EJECT;
DIDQH: PROC;
   DQCHAN.IOM=DQH.IOCHAN.IOM;
   DQCHAN.CHAN=DQH.IOCHAN.CHANNEL;
   STATUS.DOWN = NOYES( BITBIN( DQH.STATUS.DOWN ));
   STATUS.TND=TDTST(DQH.STATUS.TND);
   STATE=IOSTATE(DQH.STATE);
   LOSTINT=DQH.TIMOUT;
   STOP=NOYES(BITBIN(DQH.CHANSTATE.STOP));
   MREC=NOYES(BITBIN(DQH.MREC));
   IF DQH.MPC$ ~= ADDR(NIL) AND DQH.MPC$ ~= B$PS$(0) THEN DO;
        DCT$ = DQH.MPC$;
        DEVNM=DCT.DEVNM;
        END;
   ELSE DO;
        DEVNM=' ';
        END;
   DCT$=DQH.FL$;
   IF DCT$=ADDR(NIL) THEN DO;
        DQHFL='0'B;
        END;
   ELSE DO;
        DQHFL.IOM=DCT$->DQH.IOCHAN.IOM;
        DQHFL.CHAN=DCT$->DQH.IOCHAN.CHANNEL;
        END;
   CALL DAF$WRITE(VECTOR(DQHFMT),
     VECTOR(DQCHAN),
     VECTOR(DEVNM),
     VECTOR(DQHFL),
     VECTOR(DCTADR$),
     VECTOR(DQH.IO$),
     VECTOR(DQH.SQH$),
     VECTOR(STATUS),
     VECTOR(STATE),
     VECTOR(LOSTINT),
     VECTOR(STOP),
     VECTOR(MREC));
   RETURN;
END DIDQH;
%EJECT;
/*F*      NAME    :  CUB$MON
          PURPOSE :  CUB$MON is used to display the MONitor pointer
                     information set up by TIGR for TIGRCUB.
          OUTPUT  :  It gives the pointer name, its location,  the
                     size of the area that it frames, & its value.
*/
CUB$MON:  ENTRY  ALTRET ;
/**/
     CALL DAF$INIT(MONRPT);
/**/
      TEMP$ = B$USRT$;
      IF TEMP$ ~= ADDR(NIL) THEN  TEMP$PTR.SEGID = %TIGRSID;
      ADDR$ = ADDR( B$USRT$ );
      IF ADDR$ ~= ADDR(NIL) THEN  ADDR$PTR.SEGID = %TIGRSID;
          CALL DIMON( 'B$USRT$             ', TEMP$,
                      ADDR$, SIZEW(B$U) * (B_MUAIS+1) );
/**/
      TEMP$ = FMC_CACHE$;
      IF TEMP$ ~= ADDR(NIL) THEN  TEMP$PTR.SEGID = %TIGRSID;
      ADDR$ = ADDR( FMC_CACHE$ );
      IF ADDR$ ~= ADDR(NIL) THEN  ADDR$PTR.SEGID = %TIGRSID;
          CALL DIMON( 'FMC_CACHE$          ', TEMP$,
                      ADDR$, SIZEW(FMC$CACHETBL(0))*(FMC_CACHESIZ+1) );
/**/
      TEMP$ = FMC_STATS$;
      IF TEMP$ ~= ADDR(NIL) THEN  TEMP$PTR.SEGID = %TIGRSID;
      ADDR$ = ADDR( FMC_STATS$ );
      IF ADDR$ ~= ADDR(NIL) THEN  ADDR$PTR.SEGID = %TIGRSID;
          CALL DIMON( 'FMC_STATS$          ', TEMP$,
                      ADDR$, SIZEW( FMC$STATS ) );
/**/
      TEMP$ = FMC_TYPTBL$;
      IF TEMP$ ~= ADDR(NIL) THEN  TEMP$PTR.SEGID = %TIGRSID;
      ADDR$ = ADDR( FMC_TYPTBL$ );
      IF ADDR$ ~= ADDR(NIL) THEN  ADDR$PTR.SEGID = %TIGRSID;
          CALL DIMON( 'FMC_TYPTBL$         ', TEMP$,
                      ADDR$, SIZEW( FMC$TYPTBL ) );
/**/
      TEMP$ = FR$HD$(FR_NPOOL);
      IF TEMP$ ~= ADDR(NIL) THEN  TEMP$PTR.SEGID = %TIGRSID;
      ADDR$ = ADDR( FR$HD$(FR_NPOOL) );
      IF ADDR$ ~= ADDR(NIL) THEN  ADDR$PTR.SEGID = %TIGRSID;
          CALL DIMON( 'FR$HD$(FR_NPOOL)    ', TEMP$,
                      ADDR$, SIZEW( FR$RAT ) );
/**/
      TEMP$ = KI_OSIROUTE$$;
      IF TEMP$ ~= ADDR(NIL) THEN  TEMP$PTR.SEGID = %TIGRSID;
      ADDR$ = ADDR( KI_OSIROUTE$$ );
      IF ADDR$ ~= ADDR(NIL) THEN  ADDR$PTR.SEGID = %TIGRSID;
          CALL DIMON( 'KI_OSIROUTE$$        ', TEMP$,
                      ADDR$, KI_OSIMAX# );
/**/
     DO  I = 0 TO KI_OSIMAX# ;
       IF KI$OSIROUTE$( I ) ~= ADDR(NIL)  THEN
         DO;
         TEMP$ = KI$OSIROUTE$( I );
         TEMP$PTR.SEGID = %TIGRSID;
         ADDR$ = ADDR( KI$OSIROUTE$( I ) );
         IF ADDR$ ~= ADDR(NIL) THEN  ADDR$PTR.SEGID = %TIGRSID;
         PTR_NAME = ' ';
         PTR_NAME = 'KI$OSIROUTE$(   )';
         CALL BINCHAR( SUBSTR(PTR_NAME,13,3), I );
            CALL DIMON( PTR_NAME, TEMP$,
                        ADDR$, 1 );
         END;  /* if */
     END;  /* do */
/**/
/**/
      TEMP$ = KI_ROUTE$$;
      IF TEMP$ ~= ADDR(NIL) THEN  TEMP$PTR.SEGID = %TIGRSID;
      ADDR$ = ADDR( KI_ROUTE$$ );
      IF ADDR$ ~= ADDR(NIL) THEN  ADDR$PTR.SEGID = %TIGRSID;
          CALL DIMON( 'KI_ROUTE$$          ', TEMP$,
                      ADDR$, KI_TCTX_MAX# );
/**/
     DO  I = 0 TO KI_TCTX_MAX# ;
       IF KI$ROUTE$( I ) ~= ADDR(NIL)  THEN
         DO;
         TEMP$ = KI$ROUTE$( I );
         TEMP$PTR.SEGID = %TIGRSID;
         ADDR$ = ADDR( KI$ROUTE$( I ) );
         IF ADDR$ ~= ADDR(NIL) THEN  ADDR$PTR.SEGID = %TIGRSID;
         PTR_NAME = ' ';
         PTR_NAME = 'KI$ROUTE$(   )';
         CALL BINCHAR( SUBSTR(PTR_NAME,10,3), I );
            CALL DIMON( PTR_NAME, TEMP$,
                        ADDR$, 1 );
         END;  /* if */
     END;  /* do */
/**/
      TEMP$ = KI_TCTX$$;
      IF TEMP$ ~= ADDR(NIL) THEN  TEMP$PTR.SEGID = %TIGRSID;
      ADDR$ = ADDR( KI_TCTX$$ );
      IF ADDR$ ~= ADDR(NIL) THEN  ADDR$PTR.SEGID = %TIGRSID;
          CALL DIMON( 'KI_TCTX$$           ', TEMP$,
                      ADDR$, KI_TCTX_MAX# );
/**/
     DO  I = 0 TO KI_TCTX_MAX# ;
       IF KI$TCTX$( I ) ~= ADDR(NIL)  THEN
         DO;
         TEMP$ = KI$TCTX$( I );
         TEMP$PTR.SEGID = %TIGRSID;
         ADDR$ = ADDR( KI$TCTX$( I ) );
         IF ADDR$ ~= ADDR(NIL) THEN  ADDR$PTR.SEGID = %TIGRSID;
         PTR_NAME = ' ';
         PTR_NAME = 'KI$TCTX$(   )';
         CALL BINCHAR( SUBSTR(PTR_NAME,9,3), I );
            CALL DIMON( PTR_NAME, TEMP$,
                        ADDR$, SIZEW( KI$TCTX ) );
         END;  /* if */
     END;  /* do */
/**/
      TEMP$ = KIS_MAJOR$;
      IF TEMP$ ~= ADDR(NIL) THEN  TEMP$PTR.SEGID = %TIGRSID;
      ADDR$ = ADDR( KIS_MAJOR$ );
      IF ADDR$ ~= ADDR(NIL) THEN  ADDR$PTR.SEGID = %TIGRSID;
          CALL DIMON( 'KIS_MAJOR$          ', TEMP$,
                      ADDR$, 1+ %NUMCLNT + (10* %NUMSRVR ) );
/**/
      TEMP$ = KIS_MINOR$;
      IF TEMP$ ~= ADDR(NIL) THEN  TEMP$PTR.SEGID = %TIGRSID;
      ADDR$ = ADDR( KIS_MINOR$ );
      IF ADDR$ ~= ADDR(NIL) THEN  ADDR$PTR.SEGID = %TIGRSID;
          CALL DIMON( 'KIS_MINOR$          ', TEMP$,
                      ADDR$, 1+ %MAXMINOR );
/**/
      TEMP$ = DCT$$;
      IF TEMP$ ~= ADDR(NIL) THEN  TEMP$PTR.SEGID = %TIGRSID;
      ADDR$ = ADDR( DCT$$ );
      IF ADDR$ ~= ADDR(NIL) THEN  ADDR$PTR.SEGID = %TIGRSID;
          CALL DIMON( 'N$DCT$$             ', TEMP$,
                      ADDR$, 1024 );
/**/
      TEMP$ = NI$CHT$;
      IF TEMP$ ~= ADDR(NIL) THEN  TEMP$PTR.SEGID = %TIGRSID;
      ADDR$ = ADDR( NI$CHT$ );
      IF ADDR$ ~= ADDR(NIL) THEN  ADDR$PTR.SEGID = %TIGRSID;
          CALL DIMON( 'NI$CHT$             ', TEMP$,
                      ADDR$, 128 );
/**/
     DO  I = 0 TO 3 ;
         TEMP$ = NI$IOM$( I );
         IF TEMP$ ~= ADDR(NIL ) THEN  TEMP$PTR.SEGID = %TIGRSID;
         ADDR$ = ADDR( NI$IOM$( I ) );
         IF ADDR$ ~= ADDR(NIL) THEN  ADDR$PTR.SEGID = %TIGRSID;
         PTR_NAME = ' ';
         PTR_NAME = 'NI$IOM$(   )';
         CALL BINCHAR( SUBSTR(PTR_NAME,8,3), I );
            CALL DIMON( PTR_NAME, TEMP$,
                        ADDR$, SIZEW( IOM ) );
     END;  /* do */
/**/
      TEMP$ = NI$IOQ$;
      IF TEMP$ ~= ADDR(NIL) THEN  TEMP$PTR.SEGID = %TIGRSID;
      ADDR$ = ADDR( NI$IOQ$ );
      IF ADDR$ ~= ADDR(NIL) THEN  ADDR$PTR.SEGID = %TIGRSID;
          CALL DIMON( 'NI$IOQ$             ', TEMP$,
                      ADDR$, SIZEW(N$REQ) * NI_NUMIOQ );
/**/
      TEMP$ = P_RESOURCE$;
      IF TEMP$ ~= ADDR(NIL) THEN  TEMP$PTR.SEGID = %TIGRSID;
      ADDR$ = ADDR( P_RESOURCE$ );
      IF ADDR$ ~= ADDR(NIL) THEN  ADDR$PTR.SEGID = %TIGRSID;
          CALL DIMON( 'P_RESOURCE$         ', TEMP$,
                      ADDR$, SIZEW( P_RESOURCE ) );
/**/
      TEMP$ = S_DL$;
      IF TEMP$ ~= ADDR(NIL) THEN  TEMP$PTR.SEGID = %TIGRSID;
      ADDR$ = ADDR( S_DL$ );
      IF ADDR$ ~= ADDR(NIL) THEN  ADDR$PTR.SEGID = %TIGRSID;
          CALL DIMON( 'S_DL$               ', TEMP$,
                      ADDR$, SIZEW(B$DO) * P_RESOURCE.RES.DOLISTS.TOTAL );
/**/
/**/
   RETURN;
%EJECT;
DIMON: PROC(NAME,PTR$,ADDRESS,AREA);
/**/
DCL ADDRESS    UBIN  WORD;
DCL AREA       UBIN  WORD;
DCL NAME       CHAR(18);
DCL PTR$       PTR;
/**/
     CALL DAF$WRITE(VECTOR( MONFMT  ),
                    VECTOR( NAME    ),
                    VECTOR( PTR$    ),
                    VECTOR( ADDRESS ),
                    VECTOR( AREA    )  );
     RETURN;
END DIMON;
/**/
END CUB$DCT;
