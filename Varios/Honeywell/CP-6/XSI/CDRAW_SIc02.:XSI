/*M* cdraw$main:c   --    Driver function for drawing C structures  */
 
#ifdef TS_CP6
#include "CDRAW_Cc07"
#include "CDRAW_Cc08"
#else
#include "cdraw.h"
#include "struct.h"
#endif
#include <stdio.h>
 
#ifdef __STDC__
#include <stdlib.h>
 
#else
void *malloc(), *realloc(), *calloc();
 
#endif
 
extern char *optarg;
extern int   optind;
 
char    **FileNames = 0;
int       FileCount = 1;
char    *CurrentFid = 0;
 
int   maxStruct, maxTag, maxFid;
 
char    **IncludeList   = 0;
int       IncludeListN  = 0;
char    **XincludeList  = 0;
int       XincludeListN = 0;
 
char    *qName     = 0;
int      qNamePos  = 0;
int      qNameSize = 0;
 
char     sType[120];
 
char    *fixed = 0;    /* format for "fixed" offset portion   */
char    *fixedb= 0;    /* format for "fixed" offset w/bits    */
int      fixedd = 13;   /* width of stuff gen'ed by fixed fmt  */
 
char fixedw[] =  "%8d-%d   ",
     fixedc[] =  "%10d%.0d   ",
     fixedW[] =  "%8d-%d-%-2d",
     fixedC[] =  "%10d%.0d-%-2d";
 
 
struct StructSym *StructSymHead, **StructSymIns = &StructSymHead;
struct StructTag **StructTagIns;
int                StructCount = 0;
 
 
CONST char getopt_opts[] = {"vtdhowcsI:X:"};
 
/*   options:
 
     -t    trace only
     -v    print everything
     -d    offsets in decimal
     -h    offsets in hexadecimal
     -o    offsets in octal
     -w    offsets in words-char
     -c    offsets in chars
     -s    generate C source for offset information
     -Ifid generate include statement for "fid"
     -Xfid don't generate include statement for named fid
 
*/
 
 
CONST char ERR_duplicate_opt_vt[] =
           {"Conflicting options: only one of -v and -t"};
 
CONST char ERR_duplicate_opt_dho[] =
           {"Conflicting options: only one of -d or -h or -o"};
 
CONST char ERR_duplicate_opt_wc[]  =
           {"Conflicting options: only one of  -w and -c"};
 
CONST char CRASH_optchar_not_handled[]   =
           {"option %c is accepted but not handled"};
 
void crash ProToType( (CONST char *,char *) );
void fatal ProToType( (CONST char *,char *) );
void print_options  ProToType( (void) );
 
int  PrintStruct  ProToType( (int, struct StructSym *) );
int  ProduceSummary  ProToType( (void) );
int  BuildIncludeStmts  ProToType( (int, char **) );
int  GenProg  ProToType( (struct StructSym *) );
int  ProgStruct  ProToType( (int, struct StructSym *, char *) );
int  PrepareBF  ProToType( (struct StructTag *, char *) );
 
 
int  trace_only      = 0;   /*    no trace    */
int  print_all       = 0;
int  cc_source       = 0;
int  offset_in_words = UNSPEC_OFFSET;   /* Default (words) */
int  offset_type     = UNSPEC_OFFSET;
 
main( argn, argv)
  int     argn;
  char  **argv;
{
  int   c;
  struct StructSym *ss;
 
  while (EOF != (c = getopt(argn, argv, getopt_opts)))
     switch (c)  {
     case 't':
        trace_only++;
        if (print_all) fatal(ERR_duplicate_opt_vt, 0);
        break;
 
     case 'v':
        print_all++;
        if (trace_only) fatal(ERR_duplicate_opt_vt, 0);
        break;
 
     case 'w':
        if (offset_in_words != UNSPEC_OFFSET)
           fatal(ERR_duplicate_opt_wc, 0);
        offset_in_words = WORD_OFFSET;
        break;
 
     case 'c':
        if (offset_in_words != UNSPEC_OFFSET)
           fatal(ERR_duplicate_opt_wc, 0);
        offset_in_words = CHAR_OFFSET;
        break;
 
     case 'd':
        if (offset_type != UNSPEC_OFFSET)
           fatal(ERR_duplicate_opt_dho, 0);
        offset_type = DECIMAL_OFFSET;
        break;
 
     case 'h':
        if (offset_type != UNSPEC_OFFSET)
           fatal(ERR_duplicate_opt_dho, 0);
        offset_type = HEX_OFFSET;
        break;
 
     case 'o':
        if (offset_type != UNSPEC_OFFSET)
           fatal(ERR_duplicate_opt_dho, 0);
        offset_type = OCTAL_OFFSET;
        break;
 
     case 's':
        cc_source++;
        break;
 
     case 'I':
        if (!IncludeList) {
           IncludeList = malloc(argn * sizeof(char **));
           IncludeListN = 0;
           }
        IncludeList[IncludeListN++] = optarg;
        break;
 
     case 'X':
        if (!XincludeList)   {
           XincludeList = malloc(argn * sizeof(char **));
           XincludeListN = 0;
           }
        XincludeList[XincludeListN++] = optarg;
        break;
 
     default:
        crash(CRASH_optchar_not_handled, 0);
     }
 
#ifndef NODEBUG
     if (print_all)
#endif
        print_options();
 
  if (offset_in_words == UNSPEC_OFFSET)
     offset_in_words = WORD_OFFSET;
 
  if (offset_type == UNSPEC_OFFSET)
     offset_type = DECIMAL_OFFSET;
 
  qName = calloc(qNameSize = 100, 1);
 
  if (offset_in_words == WORD_OFFSET) {
     fixedb = (char *) fixedW;
     fixed  = (char *) fixedw;
     }
  else {
     fixed  = (char *) fixedc;
     fixedb = (char *) fixedC;
     }
 
  fixed [2 + (offset_in_words != WORD_OFFSET)] = offset_type;
  fixedb[2 + (offset_in_words != WORD_OFFSET)] = offset_type;
 
  if (optind < argn) {
     optarg = argv[optind];
     if (!freopen(optarg, "r", stdin))
        fatal("Can't open file: %s\n", optarg);
     CurrentFid = optarg;
     maxFid     = strlen(CurrentFid);
     FileCount = argn - optind;
     FileNames = &argv[optind];
     yylex();
     FileCount = argn - optind;
     FileNames = &argv[optind];
     if (cc_source)
        BuildIncludeStmts(FileCount, FileNames);
     ProduceSummary();
     for (ss = StructSymHead ; ss ; ss = ss->next)  {
        if (*ss->ss_name)  {    /* Only for named structs */
           if (!cc_source)   {
              PrintStruct(0, ss);
              printf("%*s\n\n", maxTag+5, "};");
              }  /* end of if not C source */
           else GenProg(ss);
           }     /* end of if a named struct or union */
        }        /* end of for (ss = ...              */
     }
  else
     fprintf(stderr,
            "Usage: %s [-vtwcdhhos -Iinclude -Xclude] fid fid ...\n",
            argv[0]
           );
 
}
 
void
print_options  ProToType( (void) )  {
  printf("\n Options: %s %s %s\n",
     /* print or trace */
          ((print_all)? "Print_all," : (trace_only)?"trace," : ""),
     /* word or character offsets  */
          ((UNSPEC_OFFSET == offset_in_words)? "" :
           (WORD_OFFSET == offset_in_words)? "word offsets," :
                                         "character offsets," ),
     /* decimal, hexadecimal, octal   */
          ((UNSPEC_OFFSET == offset_type)? "" :
           (DECIMAL_OFFSET == offset_type)? "decimal offsets" :
           (HEX_OFFSET == offset_type)? "Hexadecimal offsets" :
                                            "Octal offsets"         )
        );
}
 
 
 void
fatal(msg, argstr)
  char       *msg;
  char       *argstr;
{
  fprintf(stderr,msg, argstr);
  exit(4);
}
 
void
crash(msg, argstr)
  char        *msg;
  char        *argstr;
{
  fprintf(stderr, msg, argstr);
  exit(8);
}
 
 
int
PrintStruct(indent, ss)
  int                indent;
  struct StructSym  *ss;
{
  struct   StructTag *sm = ss->ss_tag;
 
  printf("%*.*s%*s%s\n", maxTag, maxTag, ss->ss_name, indent, " ", ss->ss_dcl);
  indent += 3;
 
  while (sm)  {
 
     if (sm->sm_type)  {
        PrintStruct(indent, sm->sm_type);
        printf("%*s%s%s,\n", indent+maxTag+3, " ", "} ", sm->sm_name);
        }
     else printf("%-*.*s%*s%s\n", maxTag, maxTag, sm->sm_name,
                 indent, " ", sm->sm_dcl);
     sm = sm->next;
     }
}
 
 
 
char *BitFieldInfo[] = {
  "\n/* bit field alignment requirement */\n",
  "int  _ooabf = sizeof(struct{char _x0;struct{int _x1:1;}_x2;}) -\n",
  "              sizeof(struct{int _x0:1;});\n\n",
  "/* chars in bit field              */\n",
  "int  _oocbf = sizeof(struct{int _x0:1;});\n\n",
  "/*   bits in bit field?            */\n",
  "int  _oobbf =\n",
  "  sizeof(struct{int _x0:7;int _x1:7;})\n",
  "  > sizeof(struct{int _x0:1;}) ? 8  :\n",
  "  sizeof(struct{int _x0:7, _x1:7, _x2:7;})\n",
  "  > sizeof(struct{int _x0:1;}) ? 16 :\n",
  "  sizeof(struct{int _x0:7,_x1:7,_x2:7,_x3:7,_x4:7;})\n",
  "  > sizeof(struct{int _x0:1;}) ? 32 :\n",
  "  sizeof(struct{int _x0:7,_x1:7,_x2:7,_x3:7,_x4:7,_x5:7;})\n",
  "  > sizeof(struct{int _x0:1;}) ? 36 :\n",
  "  sizeof(struct{int _x0:7,_x1:7,_x2:7,_x3:7,_x4:7,_x5:7,_x6:7;})\n",
  "  > sizeof(struct{int _x0:1;}) ? 48 : 64;\n\n",
  "/*  bits in char             */\n",
  "int  _oobbc =\n",
  "  (\n",
  "     sizeof(struct{int _x0:7;int _x1:7;})\n",
  "     > sizeof(struct{int _x0:1;}) ? 8  :\n",
  "     sizeof(struct{int _x0:7, _x1:7, _x2:7;})\n",
  "     > sizeof(struct{int _x0:1;}) ? 16 :\n",
  "     sizeof(struct{int _x0:7,_x1:7,_x2:7,_x3:7,_x4:7;})\n",
  "     > sizeof(struct{int _x0:1;}) ? 32 :\n",
  "     sizeof(struct{int _x0:7,_x1:7,_x2:7,_x3:7,_x4:7,_x5:7;})\n",
  "     > sizeof(struct{int _x0:1;}) ? 36 :\n",
  "     sizeof(struct{int _x0:7,_x1:7,_x2:7,_x3:7,_x4:7,_x5:7,_x6:7;})\n",
  "     > sizeof(struct{int _x0:1;}) ? 48 : 64\n",
  "  )  / sizeof(struct{int  _x0:1;});\n\n",
  "\n/* struct offset = _oobo, bit field number = _oobn */\n",
  "int _oobo, _oobn;\n\n",
  "#ifndef offsetof\n",
  "#define offsetof(s,t) ((int)(&(((s *)0)->t)))\n",
  "#endif\n",
  "\n\n",
  ""
  };
 
static CONST char Summfmtdh[] = "\nStruct %*sFile %*sLine\n\n";
static CONST char Summfmtd [] = "%-*s %-*s %4d\n";
 
static CONST char Summccsdh[] = " \"\\nStruct %*s File %*sLine\\n\",\n";
static CONST char Summccsd [] = " \"%-*s %-*s %4d\",\n";
 
 
ProduceSummary  ProToType( (void) ) {
 
  struct StructSym *ss;
  int   head = 0;
  int   max = MAX(maxStruct, maxTag);
  CONST char  *CONST fmtdh = (cc_source)? Summccsdh : Summfmtdh;
  CONST char  *CONST fmtd  = (cc_source)? Summccsd  : Summfmtd;
 
  maxStruct = MAX(sizeof("Struct")-1, maxStruct);
  maxTag    = MAX(sizeof("File")-1, maxTag);
  maxFid    = MAX(sizeof("Struct")-1, maxFid);
  max       = MAX(sizeof("Struct")-1, max);
  maxTag    = max;
 
  if (cc_source)
     printf("char *oosum[] = {\n");
  for (ss = StructSymHead ; ss ; ss = ss->next)   {
 
     if (*ss->ss_name) {  /* a named struct */
        StructCount++;
        if (!head)
           printf(fmtdh,
                   max-6, "", maxFid-4, "" ), head++;
 
        printf(fmtd, max, ss->ss_name,
                  maxFid, ss->ss_filename, ss->ss_lineno);
        }
     }
  if (cc_source) {
     char **bi = BitFieldInfo;
     printf(" \"\" };\n\n");
     while (**bi) printf(*bi++);
     printf("main() {\n  char **oocp = oosum;\n\n");
     printf("  while(**oocp)\n     printf(\"%%s\\n\", *oocp++);\n\n");
     printf("  printf(\"\\n\\n\");\n");
     for (ss = StructSymHead ; ss ; ss = ss->next ) {
        if (*ss->ss_name)
           printf("  struct_%s();\n", ss->ss_name);
        }
     printf("}\n\n");
     }
  else printf("\n");
}
 
 
 
int
CheckXclude(fid)
  char  *fid;
{
  int i = XincludeListN;
  while (i--)
     if (!strcmp(XincludeList[i], fid))
        return i+1;
  return 0;
}
 
 
 
int
BuildIncludeStmts(nfids, fidlist)
  int      nfids;
  char   **fidlist;
{
  int i;
/*   First include the -I include statements   */
 
  for ( i=0 ; i<IncludeListN ; )   {
     char *inc =  IncludeList[i++];
     int   cb  = *inc;
     int   ce  =  inc[strlen(inc)];
 
     printf("#include %c%s%c\n",
            ((cb == '<' || cb == '"') ? ' ': '"'),
            inc,
            ((ce == '<' || ce == '"') ? ' ' :
              (cb == '<') ? '>' : '"')         );
     }
 
/*   Include stddef.h if ANSI standard version of C */
 
     if (!CheckXclude("<stddef.h>")) {
        printf("#ifdef   __STDC__\n");
        printf("#include <stddef.h>\n");
        printf("#endif\n");
        }
 
/*   Now include the command line files:    */
 
  while (nfids--)   {
     if (!CheckXclude(*fidlist++))
        printf("#include \"%s\"\n", *(fidlist-1));
     }
 
  printf("\n");
}
 
 
int
GenProg(ss)
  struct StructSym  *ss;
{
 
  printf("int\nstruct_%s()\n{\n", ss->ss_name);
  strcpy(sType, (ss->ss_class ? "union " : "struct "));
  strcat(sType, ss->ss_name);
 
  ProgStruct(0, ss, sType);
  printf("  printf(\"%s %3s};\\n\\n\", sizeof(%s)/%d,sizeof(%s)%%%d);\n",
     fixed, " ",
     sType, offset_in_words, sType, offset_in_words);
 
  printf("\n}\n\n");
  return;
}
 
 
ProgStruct(indent, ss, stype)
  int                indent;
  struct StructSym  *ss;
  char              *stype;
{
  struct   StructTag *sm = ss->ss_tag;
  int                 st = !ss->ss_class;
  char    *arrtst;
 
  printf("  printf(\"%*s %*s%s\\n\");\n",fixedd," ",indent," ",ss->ss_dcl);
 
  indent += 3;
  if (sm->sm_bitexp && !*qName) PrepareBF(0, stype);
 
  while (sm)  {
 
     arrtst = (sm->sm_array) ? "[0]" : "";
     if (sm->sm_type)  {  /* Nested struct */
        int oldlen = qNamePos;
        if (qNameSize <= qNamePos+sm->sm_nmlen+3) {
           int sz = qNameSize + sm->sm_nmlen + 100;
           char *p = (char *)(qName)? realloc(qName, sz) : malloc(sz);
           if (!p) fatal("Out of Memory: ProgStruct\n", 0);
           qNameSize = sz;
           }
        strcat(qName, sm->sm_name), (qNamePos += sm->sm_nmlen);
        if (*arrtst) strcat(qName, arrtst), (qNamePos += 3);
        if (sm->sm_type->ss_tag && sm->sm_type->ss_tag->sm_bitexp)  {
           printf("  _oobo = offsetof(%s,%s);\n", stype, qName);
           printf("  _oobn = 0;\n");
           }
        strcat(qName, "."), qNamePos++;
        ProgStruct(indent, sm->sm_type, stype);
        qName[qNamePos = oldlen] = 0;
        printf("  printf(\"%*s %s%s,\\n\");\n",
               indent+fixedd+3, " ",  "} ",  sm->sm_name);
        if (sm->next && sm->next->sm_bitexp)   PrepareBF(sm, stype);
        }
     else
        if (sm->sm_bitexp)   {
           if (st)  {
              printf("  if (0==%s) (_oobo+=_oocbf),_oobn=0;\n",sm->sm_bitexp);
              printf("  _oobn = ((_oobn+(%s))>_oobbf)?((_oobo+=_oocbf),0):_oobn;\n",
                    sm->sm_bitexp);
              }
           printf("  printf(\"%s %*s%s\\n\",(_oobo+_oobn/_oobbc)/%d,(_oobo+_oobn/_oobbc)%%%d,_oobn%%_oobbc);\n",
                    fixedb, indent, " ", sm->sm_dcl,
                    offset_in_words, offset_in_words);
           if (st)
              printf("  _oobn = ((_oobn+(%s))>=_oobbf)?((_oobo+=_oocbf),0):_oobn+(%s);\n",
                    sm->sm_bitexp, sm->sm_bitexp);
           }
        else  {
        printf("  printf(\"%s %*s%s\\n\",offsetof(%s,%s%s%s)/%d,offsetof(%s,%s%s%s)%%%d);\n",
              fixed, indent, " ", sm->sm_dcl,
              stype, qName, sm->sm_name, arrtst, offset_in_words,
              stype, qName, sm->sm_name, arrtst, offset_in_words    );
           if (sm->next && sm->next->sm_bitexp && st)
              PrepareBF(sm, stype);
           }
 
     sm = sm->next;
     }
}
 
 
int
PrepareBF(sm, stype)
  struct StructTag *sm;
  char             *stype;
{
/* uses variable: _ooabf   .. bit field alignment requirement
*/
 
/* Sets up:
        _oobo    .. current bit offset
        _oobn    .. current bit number
*/
 
  printf("  _oobn = 0;\n");
  if (sm)  {
     printf("  _oobo = offsetof(%s,%s%s%s) + sizeof(((%s*)0)->%s%s);\n",
              stype, qName, sm->sm_name,(sm->sm_array?"[0]":""),
              stype, qName, sm->sm_name
           );
     printf("  _oobo = (_oobo + _ooabf - 1)/_ooabf * _ooabf;\n");
     }
  else printf("  _oobo = 0;\n");
}
