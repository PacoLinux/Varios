/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
WEBSTER: PROC MAIN NOAUTO;
/* ********************************************************************\
*                                                                      *
*   WEBSTER  maintains the PROOF_DIC  file for PROOF.  Available       *
*   commands are:                                                      *
*                                                                      *
*       A[DD] [word[,word]...]                                         *
*       D[EL[ETE]] [word[,word]...]                                    *
*       L[IS[T]] [word[ - word][ ON fid]                               *
*       E[ND]                                                          *
*                                                                      *
*   ADD adds words to the dictionary.  If no words are listed on the   *
*   command line, the user is prompted for words, one-by-one, with     *
*   the prompt "WORD?".                                                *
*                                                                      *
*   DELETE deletes words from the dictionary.  If no words are listed  *
*   on the command line, the user is prompted for words, one-by-one,   *
*   with the prompt "WORD?".                                           *
*                                                                      *
*   LIST prints the dictionary or part of it on the destination        *
*   device, which defaults to ME (user's terminal or line printer      *
*   for batch jobs).  The command "LIST word" will confirm the         *
*   presence of the word in the dictionary; the form "LIST word -      *
*   word" (note the spaces surrounding the hyphen) lists a portion     *
*   of the dictionary bounded by the words.  If no starting or         *
*   stopping words are specified, the entire dictionary is listed.     *
*                                                                      *
*   END exits from WEBSTER  and returns to IBEX.                       *
*                                                                      *
\******************************************************************** */
 
%EJECT;
%INCLUDE CP_6;
%INCLUDE CP_6_SUBS;
%INCLUDE B$JIT;
%INCLUDE XS_MACRO_C;
%INCLUDE XU_MACRO_C;
%INCLUDE XU_FORMAT_C;
%INCLUDE FM$FIT;
%INCLUDE B_ERRORS_C;
%INCLUDE B$TABLES_C;
%INCLUDE WEBSTER_C61;
 
%FPT_OPEN(FPTN=OPEN_DICT,
          DCB=F$DICT,
          FUN=UPDATE,
          ASN=FILE,
          ORG=KEYED,
          EXIST=OLDFILE,
          SHARE=IN);
 
%VLP_NAME(FPTN=DICT_NAME,
          LEN=9,
          NAME="'PROOF_DIC'");
 
%VLP_ACCT(FPTN=DICT_ACCT,
          ACCT="'X       '");
 
%FPT_CLOSE(FPTN=CLOSE_DICT,
           DISP=SAVE,
           DCB=F$DICT);
 
%FPT_OPEN(FPTN=OPEN_JF,
          DCB=M$JF,
          ASN=DEVICE,
          RES='JF  ',
          FUN=CREATE,
          EXIST=NEWFILE);
 
%FPT_WRITE(FPTN=WRITE_JF,
           DCB=M$JF,
           BUF=LOBUF);
 
%FPT_CLOSE(FPTN=CLOSE_JF,
           DCB=M$JF,
           DISP=SAVE);
 
%FPT_CLOSE(FPTN=CLOSE_LO,
           DCB=M$LO,
           DISP=SAVE);
 
%FPT_PROMPT(FPTN=ONE_PROMPT,
            PROMPT=QMRK);
 
%FPT_PROMPT(FPTN=WRD_PROMPT,
            PROMPT=WORDQ);
 
%FPT_READ(FPTN=READ_ME,
          DCB=M$SI,
          BUF=COMMAND_BUFFER);
 
%FPT_WRITE(FPTN=WRITE_LO,
           DCB=M$LO,
           BUF=LOBUF);
 
%FPT_READ(FPTN=READ_DICT,
          DCB=F$DICT,
          KEYR=YES,
          KEY=KEYBUF);
 
%FPT_WRITE(FPTN=WRITE_DICT,
           DCB=F$DICT,
           KEY=KEYBUF,
           ONEWKEY=YES);
 
%FPT_DELREC(FPTN=DELREC_DICT,
            DCB=F$DICT,
            KEY=KEYBUF);
 
%FPT_OPEN(FPTN=OPEN_LF,
          DCB=F$LF,
          NAME=NAME_LF,
          ACCT=ACCT_LF,
          PASS=PASS_LF,
          WSN=WSN_LF,
          FUN=CREATE,
          SN=SN_LF,
          SCRUB=YES,
          DISP=NAMED);
 
%FPT_WRITE(FPTN=WRITE_LF,
           DCB=F$LF,
           BUF=LFBUF);
 
%FPT_CLOSE(FPTN=CLOSE_LF,
           DCB=F$LF,
           DISP=SAVE);
 
%VLP_NAME(FPTN=NAME_LF,
          LEN=31,
          NAME='                               ');
 
%VLP_ACCT(FPTN=ACCT_LF,
          ACCT='        ');
 
%VLP_PASS(FPTN=PASS_LF,
          PASS='        ');
 
%VLP_WSN(FPTN=WSN_LF,
         WSN='        ');
 
%VLP_SN(FPTN=SN_LF,
        N=3);
 
%FPT_DEVICE(DCB=F$LF,
            PAGE=YES,
            HDR=VLP_HDR);
 
%VLP_HDR(HEADERHEIGHT=2,
         RESETPAGE=YES,
         COUNT=60,
         LEN=63,
         TITLE='                        PROOF System DICTIONARY listing');
 
    DCL 1 HDR REDEF VLP_HDR,
          2 * UNAL                     CHAR(5),
          2 DAYX UNAL                  CHAR(4),
          2 DATX UNAL                  CHAR(9),
          2 TIMX UNAL                  CHAR(11),
          2 * UNAL                     CHAR(39);
 
%FPT_PRECORD(DCB=F$DICT,
             KEYS=YES,
             KEY=KEYBUF,
             N=0);
 
%FPT_FID(TEXTFID=WHERE,
         NAME=NAME_LF,
         ACCT=ACCT_LF,
         PASS=PASS_LF,
         SN=SN_LF,
         WSN=WSN_LF,
         ASN=OPEN_LF.V.ASN#,
         RES=OPEN_LF.V.RES#,
         RESULTS=VLR_FID);
 
%VLR_FID;
 
%FPT_WAIT(FPTN=WAIT_FPT,
          UNITS=10);
 
%FPT_TIME(SOURCE=CLOCK,
          DEST=LOCAL,
          DATE=HDR.DATX,
          DAY=HDR.DAYX,
          TIME=HDR.TIMX);
 
%F$DCB(DCBN=DUMMY);
 
%B$TCB;
%FM$FIT;
%CODE02;
%CODE03;
%CODE04;
%XSA_PARAM;
%F$DCB;
%PARSE$OUT;
%PARSE$SYM;
/*
      Data definitions.
*/
      DCL CCOL UBIN STATIC INIT(0);
      DCL XXX UBIN STATIC INIT(0);
      DCL LENGTH UBIN STATIC;
      DCL X$PARSE ENTRY(1) ALTRET;
      DCL COMMAND_BUFFER CHAR(256) STATIC;
      DCL WRKBUF (0:511) UBIN WORD STATIC WALIGNED;
      DCL COMMAND BIT(36) SYMREF;
      DCL W_COMMAND BIT(36) SYMREF;
      DCL BUFFER CHAR(80) STATIC INIT(' ');
      DCL M$SI DCB;
      DCL BLK$ PTR STATIC;
      DCL COM UBIN STATIC;
      DCL COUNT UBIN STATIC;
      DCL OPTIONS UBIN STATIC;
      DCL OPTNUM UBIN STATIC;
 
/*
      Monitor services macro definitions.
*/
%P_PCB (R = COMMAND,
        T = COMMAND_BUFFER,
       N# = 64,
        W = WRKBUF,
      WSZ = 512);
%P_PCB (R = W_COMMAND,
        T = COMMAND_BUFFER,
     NAME = P_PCB2,
       N# = 64,
        W = WRKBUF,
      WSZ = 512);
 
%B$ALT;
 
%FPT_INT(UENTRY=YOUCALLD);
 
    DCL M$ME                           DCB;
    DCL M$LO                           DCB;
    DCL F$DICT                         DCB;
    DCL F$LF                           DCB;
    DCL M$JF                           DCB;
 
    DCL INBUF STATIC                   CHAR(256);
    DCL LOBUF STATIC                   CHAR(132);
    DCL LFBUF STATIC                   CHAR(160);
 
    DCL LFPTR                          PTR;
 
    DCL DUPLICATE                      BIT(1);
 
    DCL FLAGS                          UBIN BYTE STATIC INIT(0);
    DCL 1 KEYBUF STATIC,
          2 L UNAL                     UBIN BYTE,
          2 C UNAL                     CHAR(31);
 
    DCL OVERKEY (0:31) REDEF KEYBUF UBIN BYTE UNAL;
 
    DCL AWORD STATIC                   CHAR(31);
    DCL 1 W REDEF AWORD,
          2 FRST UNAL                  CHAR(1),
          2 REST UNAL                  CHAR(30);
 
    DCL BWORD STATIC                   CHAR(31);
 
    DCL WRDFRST                        CHAR(31);
    DCL WRDLAST                        CHAR(31);
    DCL QMRK CONSTANT                  CHAR(1) INIT('?');
    DCL WORDQ CONSTANT                 CHAR(5) INIT('WORD?');
    DCL LASTPROMPT                     UBIN WORD STATIC INIT(0);
    DCL WHERE STATIC                   CHAR(64);
    DCL PAG(0:299)                     CHAR(32);
    DCL VLS BASED                      CHAR(V);
 
    DCL I                              SBIN;
    DCL J                              SBIN;
    DCL K                              SBIN;
    DCL L                              SBIN;
    DCL M                              SBIN;
    DCL FCN                            SBIN;
    DCL WID                            SBIN;
    DCL DEP                            SBIN;
    DCL LIM                            SBIN;
    DCL HOW                            SBIN;
    DCL V                              SBIN;
    DCL TAPTAP STATIC                  SBIN INIT(1);
 
%B$XL_UPPER (NAME=UPPERS);
%B$XL_LOWER (NAME=LOWERS);
 
    DCL YOUCALLD                       ENTRY ASYNC;
    DCL BROKEN SYMREF                  BIT(1);
    DCL B$JIT$ SYMREF                  PTR;
    DCL B$TCB$ SYMREF                  PTR;
 
%EJECT;
    READ_DICT.BUF_.BUF$=ADDR(NIL);
    READ_DICT.BUF_.BOUND=0;
    WRITE_DICT.BUF_.BUF$=ADDR(NIL);
    WRITE_DICT.BUF_.BOUND=0;
 
TRY_AGAIN:
    IF NOT B$JIT.PRFLAGS.SI THEN DO;
        OPEN_DICT.NAME_=VECTOR(DICT_NAME);
        OPEN_DICT.ACCT_=VECTOR(DICT_ACCT);
    END;
    CALL M$INT(FPT_INT);
    CALL M$OPEN(OPEN_DICT) ALTRET(CANT_OPEN_UPDATE);
    IF ~DCBADDR(DCBNUM(F$DICT))->DUMMY.FFLG.DELR# AND
        ~DCBADDR(DCBNUM(F$DICT))->DUMMY.FFLG.WNEW# AND
        ~DCBADDR(DCBNUM(F$DICT))->DUMMY.FFLG.UPD# THEN DO;
        CALL M$CLOSE(CLOSE_DICT);
        GOTO CANT_OPEN_UPDATE;
    END;
    CALL CONCAT(LOBUF,'Editing ',SUBSTR(DCBADDR(DCBNUM(F$DICT))->
        DUMMY.NAME#.C,0,DCBADDR(DCBNUM(F$DICT))->DUMMY.NAME#.L),'.',
        DCBADDR(DCBNUM(F$DICT))->DUMMY.ACCT#);
    CALL M$WRITE(WRITE_LO);
    IF SUBSTR(DCBADDR(DCBNUM(F$DICT))->DUMMY.NAME#.C,0,DCBADDR
        (DCBNUM(F$DICT))->DUMMY.NAME#.L)='PROOF_DIC' AND
        B$JIT.ACCN='ZBBNSS6' THEN DO;
        IF DCBADDR(DCBNUM(F$DICT))->DUMMY.ACCT#='X' THEN DO;
            LOBUF='!WEBSTER.X PROOF_DIC.:XSI';
            DUPLICATE='1'B;
            CALL M$OPEN(OPEN_JF);
            CALL M$WRITE(WRITE_JF);
        END;
    END;
    GOTO MAINLINE;
 
CANT_OPEN_UPDATE:
    IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.ERR#=109 /* BUSY */ THEN DO;
        DO CASE(TAPTAP);
        CASE(1); LOBUF='File is busy...I''ll wait awhile...';
        CASE(2); LOBUF='File is still busy...I''ll wait some more...';
        CASE(3); LOBUF='STILL busy...STILL waiting...';
        CASE(4); LOBUF='#$%& file is still busy!!! Last chance!!';
        CASE(ELSE); LOBUF='I give up! Go X the turkey that has the file open!';
        END;
        CALL M$WRITE(WRITE_LO);
        TAPTAP=TAPTAP+1;
        IF TAPTAP>=6 THEN
            RETURN;
        CALL M$WAIT(WAIT_FPT);
        GOTO TRY_AGAIN;
    END;
    OPEN_DICT.V.FUN#=%IN#;
    CALL M$OPEN(OPEN_DICT) ALTRET(CANT_OPEN_IN);
    CALL CONCAT(LOBUF,'Examining ',SUBSTR(DCBADDR(DCBNUM(F$DICT))->
        DUMMY.NAME#.C,0,DCBADDR(DCBNUM(F$DICT))->DUMMY.NAME#.L),'.',
        DCBADDR(DCBNUM(F$DICT))->DUMMY.ACCT#);
    CALL M$WRITE(WRITE_LO);
    GOTO MAINLINE;
 
CANT_OPEN_IN:
    OPEN_DICT.V.FUN#=%CREATE#;
    OPEN_DICT.V.EXIST#=%NEWFILE#;
    CALL M$OPEN(OPEN_DICT) ALTRET(GIVE_UP_CHARLIE);
    CALL CONCAT(LOBUF,'Creating ',SUBSTR(DCBADDR(DCBNUM(F$DICT))->
        DUMMY.NAME#.C,0,DCBADDR(DCBNUM(F$DICT))->DUMMY.NAME#.L),'.',
        DCBADDR(DCBNUM(F$DICT))->DUMMY.ACCT#);
    CALL M$WRITE(WRITE_LO);
    CALL M$CLOSE(CLOSE_DICT);
    OPEN_DICT.V.FUN#=%UPDATE#;
    OPEN_DICT.V.EXIST#=%OLDFILE#;
    CALL M$OPEN(OPEN_DICT) ALTRET(GIVE_UP_CHARLIE);
    GOTO MAINLINE;
 
GIVE_UP_CHARLIE:
    CALL M$MERC;
    RETURN;
 
MAINLINE:
      CALL M$PROMPT(ONE_PROMPT);
    DO WHILE('1'B);
      CALL M$READ(READ_ME);
      P_PCB.NCHARS = DCBADDR(DCBNUM(M$SI)) -> F$DCB.ARS#;
      IF SUBSTR(COMMAND_BUFFER, 0, P_PCB.NCHARS) = ' ' THEN
        GOTO MAINLINE;
      CALL X$PARSE(P_PCB) WHENALTRETURN DO;
        DO SELECT(SUBSTR(COMMAND_BUFFER,0,1));
          SELECT('A');
            LOBUF = 'Try ADD word1,word2,... or   ADD';
          SELECT('D');
            LOBUF = 'Try DEL word1,word2,... or DEL';
          SELECT('L');
            LOBUF = 'Try LIST ON LP or LIST word1 [ - word2 ] etc.';
          SELECT(ELSE);
            LOBUF = 'Try ADD or DEL or LIST word1....';
          END;
        CALL M$WRITE(WRITE_LO);
        GOTO MAINLINE;
        END;
      COM = P_PCB.OUT$->OUT$BLK.SUBLK$(0)->OUT$SYM.CODE;
      DO CASE (COM);
        CASE (%END);
          CALL M$CLOSE(CLOSE_DICT);
          CALL M$CLOSE(CLOSE_LO);
          CALL M$EXIT;
        CASE (%LIST);
CCOL = 0;
WHERE = 'ME';
HOW = 1;
WRDFRST = ' ';
WRDLAST = 'zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz';
    LENGTH = P_PCB.OUT$->OUT$BLK.SUBLK$(0)->OUT$SYM.NSUBLKS;
    IF LENGTH = 0 THEN
      XXX = 1;
    ELSE DO;
      IF (P_PCB.OUT$->OUT$BLK.SUBLK$(0)->OUT$BLK.SUBLK$(0)->OUT$SYM.CODE = %COL) THEN
         XXX = 1;
      ELSE XXX = 0;
      END;
DO I = 0 TO LENGTH - 1;
  DO CASE(P_PCB.OUT$->OUT$BLK.SUBLK$(0)->OUT$BLK.SUBLK$(I)->OUT$SYM.CODE);
    CASE(%WORD);
      IF I = 0 THEN DO;
        WRDFRST=P_PCB.OUT$->OUT$BLK.SUBLK$(0)->OUT$BLK.SUBLK$(0)->OUT$BLK.SUBLK$(0)->OUT$SYM.TEXT;
        WRDLAST=WRDFRST;
        END;
      ELSE DO;
        WRDLAST=P_PCB.OUT$->OUT$BLK.SUBLK$(0)->OUT$BLK.SUBLK$(1)->OUT$BLK.SUBLK$(0)->OUT$SYM.TEXT;
        END;
    CASE(%HOW);
      DO CASE(P_PCB.OUT$->OUT$BLK.SUBLK$(0)->OUT$BLK.SUBLK$(I)->OUT$BLK.SUBLK$(0)->OUT$SYM.CODE);
        CASE(%ON);
          HOW = 1;
        CASE(%INTO);
          HOW = 2;
        CASE(%OVER);
          HOW = 3;
        END;
    CASE(%FID);
      WHERE=P_PCB.OUT$->OUT$BLK.SUBLK$(0)->OUT$BLK.SUBLK$(I)->OUT$SYM.TEXT;
    CASE(%COL);
      CCOL = 1;
    END;
  END;
DOLIST:
    CALL M$FID(FPT_FID) ALTRET(BAD_FID);
    OPEN_LF.V.EXIST# = HOW;
    CALL M$OPEN(OPEN_LF) ALTRET(BAD_FID);
    CALL M$TIME(FPT_TIME);
    CALL INSERT(HDR.TIMX,5,6,' ');
    LFPTR = DCBADDR(DCBNUM(F$LF));
    IF LFPTR->DUMMY.DDEV.LP# OR LFPTR->DUMMY.DDEV.IC# THEN DO;
      CALL M$DEVICE(FPT_DEVICE);
      WID = LFPTR->DUMMY.WIDTH#;
      DEP = LFPTR->DUMMY.LINES#-2;
      END;
    ELSE DO;
      WID = 160;
      DEP = 1;
      END;
    IF WID < 32 THEN
      WID = 32;
    IF WID > 160 THEN
      WID = 160;
    IF DEP < 1 THEN
      DEP = 1;
    IF DEP > 60 THEN
      DEP = 60;
    WID = WID/32;
    IF CCOL = 0 THEN
      LIM = DEP*WID;
    ELSE LIM = 1;
    CALL XLATE(WRDFRST,LOWERS,WRDFRST);
    CALL XLATE(WRDLAST,LOWERS,WRDLAST);
    KEYBUF.C =WRDFRST;
    CALL INDEX1(K,' ',KEYBUF.C,1);
    KEYBUF.L = K;
    CALL M$PRECORD(FPT_PRECORD) ALTRET(DONTBITCH);
DONTBITCH:
    BROKEN='0'B;
    AWORD = WRDFRST;
    DO WHILE(AWORD<=WRDLAST);
      V = 9600;
      ADDR(PAG)->VLS = ' ';
      I = 0;
      DO WHILE(I < LIM);
        CALL M$READ(READ_DICT) ALTRET(EOFDICT);
        AWORD = SUBSTR(KEYBUF.C,0,KEYBUF.L-1);
        IF AWORD>WRDLAST OR BROKEN THEN
          GOTO EOFDICT;
        IF OVERKEY(KEYBUF.L) = 1 THEN DO;
          CALL XLATE(W.FRST,UPPERS,W.FRST);
          CALL INSERT(AWORD, KEYBUF.L, 7, ' (PROP)');
          END;
        IF OVERKEY(KEYBUF.L) = 2 THEN DO;
          CALL XLATE(AWORD,UPPERS,AWORD);
          CALL INSERT(AWORD, KEYBUF.L, 7, ' (CAPS)');
          END;
        PAG(I) = AWORD;
        I = I + WID;
        IF I >= LIM THEN DO;
          I = I-LIM+1;
          IF I >= WID THEN
            GOTO EOFDICT;
          END;
        END;
        GOTO DOPRINT;
EOFDICT:
        AWORD = WRDLAST;
DOPRINT:
        V = 32 * WID;
        WRITE_LF.BUF_.BOUND = V - 1;
        DO I=0 TO DEP-1;
          LFBUF = PINCRC(ADDR(PAG),32*I*WID)->VLS;
          IF LFBUF=' ' OR BROKEN THEN
            GOTO DONEPRINT;
          CALL M$WRITE(WRITE_LF);
        END;
     END;
DONEPRINT:
    CALL M$CLOSE(CLOSE_LF);
    GOTO MAINLINE;
BAD_FID:
    LOBUF='Illegal filename.  Try another.';
    CALL M$WRITE(WRITE_LO);
    GOTO MAINLINE;
        CASE (ELSE);
      IF (P_PCB.OUT$->OUT$BLK.SUBLK$(0)->OUT$SYM.NSUBLKS = 0) THEN DO;
        CALL M$PROMPT(WRD_PROMPT);
        DO WHILE('1'B);
          CALL M$READ(READ_ME);
 
          P_PCB2.NCHARS = DCBADDR(DCBNUM(M$SI)) -> F$DCB.ARS#;
          IF SUBSTR(COMMAND_BUFFER, 0, P_PCB2.NCHARS) = ' ' THEN
            GOTO MAINLINE;
          CALL X$PARSE(P_PCB2) WHENALTRETURN DO;
            LOBUF = 'Undefined command. Try ADD, DEL, LIST, or END.';
            CALL M$WRITE(WRITE_LO);
            GOTO MAINLINE;
            END;
 
            KEYBUF.L = P_PCB2.OUT$->OUT$BLK.SUBLK$(0)->OUT$BLK.SUBLK$(0)->OUT$SYM.COUNT + 1;
            KEYBUF.C = P_PCB2.OUT$->OUT$BLK.SUBLK$(0)->OUT$BLK.SUBLK$(0)->OUT$SYM.TEXT;
            OPTIONS = P_PCB2.OUT$->OUT$BLK.SUBLK$(0)->OUT$SYM.NSUBLKS;
            IF OPTIONS = 2 THEN DO;
              OPTNUM = P_PCB2.OUT$->OUT$BLK.SUBLK$(0)->
                       OUT$BLK.SUBLK$(1)->OUT$BLK.SUBLK$(0)->
                       OUT$SYM.CODE;
              IF OPTNUM = %AS_IS THEN DO;
                CALL XLATE(KEYBUF.C,LOWERS,KEYBUF.C);
                OVERKEY(KEYBUF.L) = 2;
                END;
              IF OPTNUM = %PROP THEN DO;
                CALL XLATE(KEYBUF.C,LOWERS,KEYBUF.C);
                OVERKEY(KEYBUF.L) = 1;
                END;
              END;
 
            IF OPTIONS = 1 THEN DO;
              AWORD = KEYBUF.C;
              CALL XLATE(AWORD,UPPERS,AWORD);
              IF AWORD = KEYBUF.C THEN DO;
                CALL XLATE(KEYBUF.C,LOWERS,KEYBUF.C);
                OVERKEY(KEYBUF.L) = 0;
                END;
              ELSE DO;
                CALL XLATE(W.REST,LOWERS,W.REST);
                IF AWORD = KEYBUF.C THEN DO;
                  CALL XLATE(KEYBUF.C,LOWERS,KEYBUF.C);
                  OVERKEY(KEYBUF.L) = 1;
                  END;
                ELSE
                  OVERKEY(KEYBUF.L) = 0;
                END;
              END;
            DO CASE (COM);
              CASE (%ADD);
                CALL M$WRITE(WRITE_DICT);
              CASE (%DEL);
                CALL M$DELREC(DELREC_DICT) ALTRET(MAINLINE);
              END;
            END;
          END;
          COUNT = P_PCB.OUT$->OUT$BLK.SUBLK$(0)->OUT$SYM.NSUBLKS - 1;
          DO I = 0 TO COUNT;
            KEYBUF.L = P_PCB.OUT$->OUT$BLK.SUBLK$(0)->
                OUT$BLK.SUBLK$(I)->OUT$BLK.SUBLK$(0)->OUT$SYM.COUNT+1;
            KEYBUF.C = P_PCB.OUT$->OUT$BLK.SUBLK$(0)->
                 OUT$BLK.SUBLK$(I)->OUT$BLK.SUBLK$(0)->OUT$SYM.TEXT;
            OPTIONS=P_PCB.OUT$->OUT$BLK.SUBLK$(0)->OUT$BLK.SUBLK$(I)->
                      OUT$BLK.NSUBLKS;
            IF OPTIONS = 2 THEN DO;
              OPTNUM = P_PCB.OUT$->OUT$BLK.SUBLK$(0)->
                       OUT$BLK.SUBLK$(I)->OUT$BLK.SUBLK$(1)->
                       OUT$BLK.SUBLK$(0)->OUT$SYM.CODE;
              IF OPTNUM = %AS_IS THEN DO;
                CALL XLATE(KEYBUF.C,LOWERS,KEYBUF.C);
                OVERKEY(KEYBUF.L) = 2;
                END;
              IF OPTNUM = %PROP THEN DO;
                CALL XLATE(KEYBUF.C,LOWERS,KEYBUF.C);
                OVERKEY(KEYBUF.L) = 1;
                END;
              END;
 
            IF OPTIONS = 1 THEN DO;
              AWORD = KEYBUF.C;
              CALL XLATE(AWORD,UPPERS,AWORD);
              IF AWORD = KEYBUF.C THEN DO;
                CALL XLATE(KEYBUF.C,LOWERS,KEYBUF.C);
                OVERKEY(KEYBUF.L) = 0;
                END;
              ELSE DO;
                CALL XLATE(W.REST,LOWERS,W.REST);
                IF AWORD = KEYBUF.C THEN DO;
                  CALL XLATE(KEYBUF.C,LOWERS,KEYBUF.C);
                  OVERKEY(KEYBUF.L) = 1;
                  END;
                ELSE
                  OVERKEY(KEYBUF.L) = 0;
                END;
              END;
            DO CASE (COM);
              CASE (%ADD);
                CALL M$WRITE(WRITE_DICT);
              CASE (%DEL);
                CALL M$DELREC(DELREC_DICT) ALTRET(MAINLINE);
              END;
            END;
          END;
        END;
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
YOUCALLD: PROC ASYNC;
    DCL BROKEN STATIC SYMDEF           BIT(1);
 
    BROKEN='1'B;
    RETURN;
END;
