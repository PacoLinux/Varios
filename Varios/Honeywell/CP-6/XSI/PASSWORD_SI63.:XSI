/*M* DEQUEUE, ENQUEUE, and BREAK                             */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X*  DMC,DFC   */
/**********************************************************************/
/*F*   NAME:   DEQUEUE
       PURPOSE: Dequeues a specified resource
       DESCRIPTION: The specified resource is dequeued via an m$deq pmme.
*/
/*D*   NAME:   DEQUEUE
       CALL:   CALL DEQUEUE(DCB#, RNAME)
       INTERFACE:
       INPUT:  DCB# - DCB opened to resource
               RNAME - resource name
       OUTPUT: If there is an error, then the error will be output.
       DESCRIPTION: A dequeue fpt is initialized with the specified
               parameters and a dequeue pmme executed.
*/
/**********************************************************************/
DEQUEUE: PROC(DCB#, RNAME) ALTRET;
           %INCLUDE B_MACROS_C;
           %INCLUDE B$JIT;
           %INCLUDE CP_6;
           %INCLUDE CP_6_SUBS;
DCL DCB# UBIN WORD;
%TEXTC(NAME = RNAME,STCLASS = " ");
/***** fpts *****/
%FPT_DEQ(FPTN = FPT_DEQ,STCLASS = STATIC);
  /***** Symrefs *****/
DCL B$JIT$ PTR SYMREF;
DCL B$TCB$ PTR SYMREF;
  /***** Based structures *****/
%B$TCB (STCLASS="BASED(B$TCB$)");
%B$ALT;
DCL WRITEMSGE ENTRY(5);
%EJECT;
/*
     ***** Init. Deq fpt
*/
  FPT_DEQ.V.DCB# = DCB#;
  FPT_DEQ.RNAME_ = VECTOR(RNAME);
  CALL M$DEQ(FPT_DEQ) ALTRET(E_DEQUEUE);
  RETURN;
E_DEQUEUE:
  CALL WRITEMSGE(B$TCB.ALT$ -> B$ALT.ERR, DCB#);
  ALTRETURN;
END DEQUEUE;
           %EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/**********************************************************************/
/*F*   NAME:   ENQUEUE
       PURPOSE: Enqueues a specified resource
       DESCRIPTION: The specified resource is enqueued via the m$enq
               pmme.
*/
/*D*   NAME:   ENQUEUE
       CALL:   CALL ENQUEUE(DCB#, RNAME)
       INTERFACE:
       INPUT:  DCB# - DCB opened to resource
               RNAME - resource name
       OUTPUT: If there is an error, then the error will be output.
       DESCRIPTION: An enqueue fpt is initialized with the specified
               parameters and an enqueue pmme executed. The user is
               queued as exclusive. The specified dcb is expected to be
               open to the specified resource prior to calling the routine.
*/
/**********************************************************************/
ENQUEUE: PROC(DCB#, RNAME) ALTRET;
           %INCLUDE B_MACROS_C;
           %INCLUDE B$JIT;
           %INCLUDE CP_6;
           %INCLUDE CP_6_SUBS;
/***** parameters *****/
DCL DCB# UBIN WORD;
%TEXTC(NAME = RNAME,STCLASS = " ");
/***** fpts *****/
%FPT_ENQ(FPTN = FPT_ENQ,STCLASS = STATIC);
  /***** Symrefs *****/
DCL B$JIT$ PTR SYMREF;
DCL B$TCB$ PTR SYMREF;
  /***** Based structures *****/
%B$TCB (STCLASS="BASED(B$TCB$)");
%B$ALT;
DCL WRITEMSGE ENTRY(5);
%EJECT;
/*
     ***** Init. Enq fpt
*/
  FPT_ENQ.V.DCB# = DCB#;
  FPT_ENQ.RNAME_ = VECTOR(RNAME);
  FPT_ENQ.V.SHARE# = %NONE#;
  CALL M$ENQ(FPT_ENQ) ALTRET(E_ENQUEUE);
  RETURN;
E_ENQUEUE:
  CALL WRITEMSGE(B$TCB.ALT$ -> B$ALT.ERR, DCB#);
  ALTRETURN;
END ENQUEUE;
           %EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/**********************************************************************/
/*F*   NAME:   BREAK
       PURPOSE: Routine to handle BREAKs.
       DESCRIPTION: This routine will ask the user if he wants to continue
               the password change.
*/
/*D*   NAME:   BREAK
       CALL:   CALL BREAK  ASYNC
       INTERFACE:
       INPUT:  None
       OUTPUT: None
       DESCRIPTION: The user is asked if he wants to continue making the
               password change.  If the user inputs a 'C' or 'c' then BREAK
               does a normal RETURN.  Anything else causes the process to ABORT.
*/
/**********************************************************************/
BREAK: PROC ASYNC;
 
%INCLUDE CP_6;
%INCLUDE CP_6_SUBS;
%F$DCB;
 
DCL REMEM_PASSWORD_ABORT_ADDR REMEMBER SYMREF;  /* Address to unwind to on abort. */
DCL BREAK_IN_PROGRESS BIT(1) SYMREF;
DCL BRKMSG CHAR(0) CONSTANT INIT ('b  Enter ''C'' to continue');
DCL INBUF CHAR(80) STATIC INIT(' ');
DCL PROMPT CHAR(0) CONSTANT INIT(' -> ');
DCL PROMPT_VEC_ VECTOR SYMREF;
 
%FPT_WRITE (FPTN=FPT_WRITE,
      STCLASS=STATIC,
      DCB=M$UC,
      BUF=BRKMSG,
      VFC=YES);
%FPT_READ (FPTN=FPT_READ,
      STCLASS=STATIC,
      DCB=M$UC,
      BUF=INBUF);
%FPT_PROMPT (FPTN=FPT_PROMPT,
      STCLASS=STATIC,
      DCB=M$UC);
 
  IF BREAK_IN_PROGRESS
    THEN
      RETURN;
  BREAK_IN_PROGRESS='1'B;
  FPT_PROMPT.PROMPT_ = VECTOR(PROMPT);
  CALL M$PROMPT(FPT_PROMPT) WHENALTRETURN DO;
                            END;
  CALL M$WRITE(FPT_WRITE) ALTRET(BREAK_OUT);
  CALL M$READ(FPT_READ) ALTRET(BREAK_OUT);
  IF DCBADDR(%M$UC#)->F$DCB.ARS# = 1 AND (INBUF = 'C' OR INBUF = 'c')
    THEN
      DO;
        FPT_PROMPT.PROMPT_=PROMPT_VEC_;
        CALL M$PROMPT(FPT_PROMPT) WHENALTRETURN DO;
                                  END;
        BREAK_IN_PROGRESS='0'B;
        RETURN;
      END;      /* Then Do */
 
BREAK_OUT:
  CALL M$CLRSTK;
  UNWIND TO REMEM_PASSWORD_ABORT_ADDR;
 
END  BREAK;
