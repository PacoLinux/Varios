/*M* SEAGULL_Cc04 -- XUU interface module (zbm$input$inp_types:h) */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
 
/*P*    NAME:     SEAGULL_Cc04
        PURPOSE:  This file contains "stolen" code (shhhhh).  It was
                  borrowed directly from the B00 C compiler accounts.
                  The routines within serve as an XUU interface.
 
        DESCRIPTION:
          The extractable comments were kept in tact for all the
          functions, so have a look below for any details needed.
          The comments not needed for extraction were changed as
          follows:  *M* -> *zbM*, etc.
*/
/********************************************************************/
 
#ifndef  __SEAGULL_Cc04__
#define  __SEAGULL_Cc04__
 
#pragma LIST EJECT
/*zbM*     zb_input$inp_types:h */
/*zbT*/
/*B*  NAME:    sg4_fileinfo
      PURPOSE: This structure contains the entire interface to
               the ZB_INPUT$? routines (SEAGULL_SI605, SG5_?).
               This structure must match the equivalent PL6 structure:
               ZB_INPUT$TYPES:PL6 (SEAGULL_C605, SG5?).
      DESCRIPTION:
         char *buffer   - Points at a buffer that is to receive
                          a record of data from SG5_INPUT_READ
         int bufsize    - The size of the buffer that BUFFER$
                          points at
         int nbytes     - Number of bytes read by SG5_INPUT_READ
         int filetype   - The type of file to open, read, or close
                           =1 Base file
                           =2 Update file
                           =3 Include file
         char *filename - A pointer to the name of the file to
                          be opened
         int open_flag  - Is the file open
                           =0 No the file is not open
                           =1 Yes the file is open
         int level      - The nested level of the include files
         int optui      - Is the UI file optional
         int list_update-  List updates at beginning of LS file??
         char *key      - Pointer to the text of the key that was read in
         char *si_fid   - Pointer to source file name to be opened with
                          XUU services, usually used when not given on
                          the command line.
         char *ui_fid   - Pointer to update file name, see si_fid.
         char *ou_fid   - Pointer to object file name, see si_fid.
*/
 
#define  SG4_IN_TEXT     0
#define  SG4_IN_BASE     1
#define  SG4_IN_UPDATE   2
#define  SG4_IN_INCLUDE  3
 
#define  SG4_OPTUI       1
#define  SG4_NO_OPTUI    0
#define  SG4_LU          1
#define  SG4_NO_LU       0
 
typedef  struct sg4_fileinfo  {
         char     *buffer;       /* contains the text read */
         int      bufsize;       /* Size of buffer         */
         int      nbytes;        /* Number of bytes read   */
         int      filetype;      /* Type of file read from */
         char     *filename;     /* Name of file           */
         int      open_flag;     /* Is the file open       */
         int      level;         /* Level of include depth */
         int      optui;         /* Is UI file optional    */
         int      list_update;   /* List updates??         */
         char     *key;          /*    contains key text   */
         char     *si_fid;       /* M$SI file name         */
         char     *ui_fid;       /* M$UI file name         */
         char     *ou_fid;       /* M$OU file name         */
         }  SGFILEINFO;
 
#ifdef  USE_ZB_LS
extern   int   zb_LS_flag;
extern   int   zb_LS_include_flag;
#endif
 
#ifndef  __NO_SG4__
/* -- SEAGULL_SIc04 -- XUU interface function prototypes */
int   sg4__xuu_Open( struct sg4_fileinfo *);
int   sg4__xuu_Read( struct sg4_fileinfo *);
int   sg4__xuu_Close( struct sg4_fileinfo *);
int   sg4__MakeFid( char *, char *, char **);
void  SG4__MALLOC( char **, int *);
void  SG4__FREE( char **);
 
#ifdef __SOMEDAY__
int   sg4__InsertFile( char *, char **, char **);
int   sg4__InsertText( char *, int);
#endif
#endif
 
#ifndef xopen
#define xopen(fpt)  sg4__xuu_Open( fpt)
#endif
#ifndef xread
#define xread(fpt)  sg4__xuu_Read( fpt)
#endif
#ifndef xclose
#define xclose(fpt)  sg4__xuu_Close( fpt)
#endif
#ifndef MakeFid
#define MakeFid(d,f,n)  sg4__MakeFid( d, f, n)
#endif
#ifndef MALLOC
#define MALLOC(p,s)  SG4__MALLOC( p, s)
#endif
#ifndef FREE
#define FREE(p)  SG4__FREE( p)
#endif
 
/*ifndef __SEAGULL_Cc04__ */
#endif
