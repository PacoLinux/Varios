/*M*    cdraw$sym.c    -- generic symbol table manager           */
 
#ifdef TS_CP6
#include   "CDRAW_Cc07"
#include   "CDRAW_Cc09"
#include   "CDRAW_Cc06"
#else
#include   "cdraw.h"
#include   "sym.h"
#include   "alloc.h"
#endif
 
 
struct alloc_descriptor AllocSyms_ = INIT_alloc_descriptor(100, struct sym_, 0);
 
int  sym_hash  ProToType( (char *, int) );
 
/*D*    NAME:       lookup_sym(struct HashTable *, char *, int);
        PURPOSE:    To lookup a name in the argument symbol table.
        INTERFACE:  The following memory allocation routines are
                    used:
 
                    Allocator(),
                    AllocString()
 
        DESCRIPTION:
 
           This function provides the user interface to the generic
        symbol table manager.  The manager provides the ability to
        quickly lookup a name and return the symbol table entry
        and to optionally enter the name if it is not present and
        return the symbol table entry.
 
           If the name is not found, a NULL pointer is returned.
        If room for a new symbol table entry cannot be found and
        the enter option was specified, a NULL pointer is returned
        if enter==1 or a fatal error is reported if enter>1.
 
*/
 
struct sym_ *
lookup_sym(ht, name, len, enter)
  struct HashTable  *ht;
  char              *name;
  int                len;
  int                enter;
{
  int           cmprs  = 0;
  int           h      = sym_hash(name, len) % ht->hash_size;
  struct sym_ **s      = &ht->hash_table[h];
  struct sym_  *rs;
 
  ht->hash_looks++;
  while (rs = *s)  {
     cmprs++;
     if (rs->sym_len == len && !memcmp(rs->sym_text, name, len))
        break;
     s = &rs->next;
     }
 
  ht->hash_cmprs += cmprs;
  if (rs) {
     ht->hash_hits++;
     return rs;
     }
 
  if (!enter) return 0;
 
  rs = Allocator(&AllocSyms_);
  if (!rs) {
     if (enter & 2)
        fatal("Out of Memory: allocating symbols", 0);
     return 0;
     }
 
  rs->sym_user = 0;
  rs->sym_len  = len;
  rs->next     = 0;
  *s           = rs;
  rs->sym_text = AllocString(len+1, name);
  return rs;
}
 
int
sym_hash(name, len)
  char  *name;
  int    len;
{
  int   rs = 0;
 
  while (len-- > 0)
     rs += *name++;
 
  return rs;
}
