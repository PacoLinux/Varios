/*M* HEAD - swaps head records back and forth */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* DMR,PLM=5,IND=3,CTI=3,SDI=3,MCL=10,CSI=0,ECI=0 */
 
 
%SET LISTSUB='1'B;
%SET LISTEXP='1'B;
 
 
HEAD: PROC MAIN;
 
     %INCLUDE B$OBJECT_C;
     %INCLUDE B_ERRORS_C;
     %INCLUDE CP_6;
     %INCLUDE CP_6_SUBS;
 
     %INCLUDE B$JIT_C;
          %B$JIT0;
          %U$JIT1;
          %A$JIT6X;
 
     %RU_FLAVORS;
     %B$RECORDSUBS;
 
     %INCLUDE XU_MACRO_C;
     %INCLUDE XU_SUBS_C;
     %INCLUDE XU_PERR_C;
 
     %PARSE$SYM     (NAME=HEAD$SYM,
                         STCLASS="BASED");
 
     %PARSE$OUT     (NAME=HEAD$OUTBLK,
                         STCLASS="BASED");
 
     %P_PCB         (NAME=HEAD_PCB,
                         STCLASS="STATIC SYMDEF",
                         R=NIL,
                         W=HEAD_WORKSPACE,
                         U$=NIL,
                         WSZ=50,
                         N#=0);
 
%B$RUHEADKEY(NAME=HEAD_KEY);
 
%FPT_OPEN(FPTN=OPEN_RU,
        DCB=M$SI,
        ASN=FILE,
        REASSIGN=YES,
        FUN=UPDATE,
        ORG=KEYED,
        ACS=DIRECT);
 
%FPT_READ(FPTN=READ_HEAD,
        DCB=M$SI,
        BUF=HEAD_IN,
        KEYS=YES,
        KEY=HEAD_KEY);
 
%FPT_WRITE(FPTN=WRITE_HEAD,
        DCB=M$SI,
        BUF=HEAD_OUT,
        ONEWKEY=NO,
        KEY=HEAD_KEY);
 
%FPT_CLOSE(FPTN=CLOSE_RU,
        DCB=M$SI,
        DISP=SAVE);
 
%FPT_WRITE(FPTN=WRITE_DO,
        DCB=M$DO);
 
%FPT_ERRMSG(BUF=ERRBUF,
        CODE=ERRCODE,
        INCLCODE=NO,
        OUTDCB1=M$DO,
        DCB=M$SI);
 
%B$HEAD (NAME=HEAD_IN,STCLASS=STATIC,SUBS=NO);
%B$HEAD (NAME=HEAD_OUT,STCLASS=STATIC,SUBS=NO);
 
DCL B$OLD$ PTR STATIC;
DCL B$NEW$ PTR STATIC;
DCL SI$ PTR;
 
DCL HEAD_WORKSPACE (0:49) SBIN WORD STATIC SYMDEF;
DCL ERRBUF CHAR(255) STATIC;
DCL ERRCODE BIT(36) STATIC SYMDEF;
DCL NOTARU_MSG CHAR(80) STATIC INIT(
     'That file is not a run-unit.');
DCL B03RU_MSG CHAR(0) STATIC INIT (
     'B03 Head changing to C00 Head');
DCL C00RU_MSG CHAR(0) STATIC INIT (
     'C00 Head changing to B03 Head');
DCL PARSERR_MSG CHAR(0) STATIC INIT (
      'Bad command line options, pal.');
DCL ALREADY_MSG CHAR(0) STATIC INIT (
     'It''s already that kind of rununit....!');
 
%B$HEAD (NAME=B$NEWHEAD,SUBS=NO,STCLASS="BASED(B$NEW$)");
 
DCL 1 B$OLDHEAD BASED(B$OLD$) ALIGNED,
       2 PRIV BIT(36),
       2 VPPGS UBIN BYTE UNAL,
       2 VDPGS UBIN BYTE UNAL,
       2 S BIT(1) UNAL,
       2 LIB BIT(1) UNAL,
       2 ASL BIT(1) UNAL,
       2 OVRL BIT(1) UNAL,
       2 PROCACC BIT(1) UNAL,
       2 NOCHGPMEM BIT(1) UNAL,
       2 PROCSURCHG BIT(1) UNAL,
       2 RESTPROC BIT(1) UNAL,
       2 STRONG_LOCK BIT(1) UNAL,
       2 SEV UBIN BYTE UNAL,
       2 RDATA UBIN HALF UNAL,
       2 RPROC UBIN HALF UNAL,
       2 BIAS UBIN HALF UNAL,
       2 START UBIN HALF UNAL,
       2 UDCBNUM UBIN HALF UNAL,
       2 DCBRES UBIN HALF UNAL,
       2 TREEDISP UBIN HALF UNAL,
       2 TCBSIZE UBIN HALF UNAL,
       2 PRECSIZE UBIN HALF UNAL,
       2 NRECSIZE UBIN HALF UNAL,
       2 EPRECSIZE UBIN HALF UNAL,
       2 EDRECSIZE UBIN HALF UNAL,
       2 SDRECSIZE UBIN HALF UNAL,
       2 ROSIZE UBIN HALF UNAL,
       2 VERSION# UBIN BYTE UNAL,
       2 MAP_BITS_A(0:2) UNAL,
          3 MULTIPLE BIT(1) UNAL,
          3 CON BIT(1) UNAL,
          3 PRIMARY BIT(1) UNAL,
          3 SECONDARY BIT(1) UNAL,
       2 * BIT(8) UNAL,
       2 NSTDINVOC BIT(1) UNAL,
       2 REMOVE_ENTDEF BIT(1) UNAL,
       2 REMOVE_SYMDEF BIT(1) UNAL,
       2 STATS BIT(1) UNAL,
       2 * BIT(3) UNAL,
       2 DATA_SEG (0:5),
          3 SIZ UBIN HALF UNAL,
          3 * UBIN(9) UNAL,
          3 PROTECTION UBIN(9) UNAL,
       2 LOCK(0:71) BIT(1) UNAL,
       2 FLAVOR UBIN BYTE UNAL,
       2 * UBIN(27) UNAL,
       2 * (0:4) UBIN WORD UNAL,
       2 LIBNAME,
          3 CNT UBIN BYTE UNAL,
          3 TXT CHAR(31) UNAL,
       2 ASLNAME,
          3 CNT UBIN BYTE UNAL,
          3 TXT CHAR(31) UNAL;
 
%F$DCB;
%B$TCB;
%B$ALT;
 
DCL X$PARSE ENTRY(1) ALTRET;
DCL B$TCB$ PTR SYMREF;
DCL B$JIT$ PTR SYMREF;
DCL HEAD_NODES SBIN WORD SYMREF;
 
DCL M$SI DCB;
DCL M$DO DCB;
 
%EJECT;
%FPT_GDS (SEGSIZE=20000,RESULTS=VEC);
DCL 1 VEC STATIC DALIGNED,
       2 * UBIN,
       2 P$ PTR INIT(ADDR(NIL));
%FPT_READ (DCB=M$SI,KEY=KEY,KEYR=YES);
%FPT_WRITE (DCB=M$SI,KEY=KEY);
%FPT_PFIL (DCB=M$SI,BOF=YES,STCLASS=CONSTANT);
%FPT_PRECORD(FPTN=BACKUP1,DCB=M$SI,N=-1);
DCL ARS UBIN BASED;
%B$RUKEY (STCLASS=BASED,KEYSIZINIT="",TYPEINIT="");
%B$DBGKEY (STCLASS=BASED,KEYSIZINIT="",NOTHDINIT="",TYPEINIT="");
%B$RUMKEY (NAME=KEY,KEYSIZINIT="",NOTHDINIT="",TYPEINIT="");
%B$EDEF;
%B$SDEF;
%B$EXST;
%B$INTNTRY;
DCL P$ PTR;
DCL I SBIN;
DCL J SBIN;
DCL B03_FLAG BIT(1) ALIGNED STATIC SYMDEF;
DCL C00_FLAG BIT(1) ALIGNED STATIC SYMDEF;
%EJECT;
 
/*****************************************************************
 ***                                                           ***
 ***       HEAD main                                           ***
 ***                                                           ***
 *****************************************************************/
 
     B03_FLAG = '0'B;
     C00_FLAG = '0'B;
     IF B$JIT$->B$JIT.CCARS > B$JIT$->B$JIT.CCDISP
     THEN
     DO;                                /* MUST BE OPTIONS ON CMD LINE */
 
        HEAD_PCB.ROOT$ = ADDR(HEAD_NODES);
        HEAD_PCB.TEXT$ = PINCRC(ADDR(B$JIT.CCBUF),B$JIT.CCDISP+1);
        HEAD_PCB.NCHARS = B$JIT.CCARS - B$JIT.CCDISP - 1;
 
        CALL X$PARSE (HEAD_PCB)
        WHENALTRETURN
        DO;
           WRITE_DO.BUF_ = VECTOR(PARSERR_MSG);
           CALL M$WRITE(WRITE_DO) ALTRET(ERR_HEAD);
           CALL M$ERR;
           END;                         /* DO WHILE PARSE ERROR */
 
        IF HEAD_PCB.OUT$ -> HEAD$OUTBLK.CODE = 1
        THEN
        DO;
           B03_FLAG='1'B;
           C00_FLAG='0'B;
           END;                         /* DO IF B03 REQUESTED */
        ELSE
        DO;
           C00_FLAG = '1'B;
           B03_FLAG = '0'B;
           END;
        END;                            /* DO IF OPTIONS */
 
 
/* Open M$SI and try to verify its a run-unit.
*/
     CALL M$OPEN(OPEN_RU) ALTRET(ERR_HEAD);
     SI$ = DCBADDR(DCBNUM(M$SI));
     IF SI$->F$DCB.ASN# ~= %FILE#
        OR SI$->F$DCB.ORG# ~= %KEYED#
     THEN DO;
NOT_A_RUNUNIT: ;
        WRITE_DO.BUF_ = VECTOR(NOTARU_MSG);
        CALL M$WRITE(WRITE_DO) ALTRET(ERR_HEAD);
        CALL M$ERR;
        END;
 
/* Read the HEAD record.
*/
     CALL M$READ(READ_HEAD) ALTRET(NOT_A_RUNUNIT);
     IF SI$->F$DCB.ARS# ~= SIZEC(B$OLDHEAD)
     THEN GOTO NOT_A_RUNUNIT;
 
/* Copy the input HEAD to the output buffer.
*/
     HEAD_OUT = HEAD_IN;
 
/*  If B03 convert to C00.
*/
     IF HEAD_IN.FLAVOR = 0
     THEN DO;
        IF B03_FLAG
        THEN
        DO;
           WRITE_DO.BUF_ = VECTOR (ALREADY_MSG);
           CALL M$WRITE (WRITE_DO)
           WHENALTRETURN
           DO;
              END;
           CALL M$EXIT;
           END;           /* DO IF B03 REQUESTED
                                   & ALREADY B03 */
        WRITE_DO.BUF_ = VECTOR(B03RU_MSG);
        CALL M$WRITE (WRITE_DO)
        WHENALTRETURN
        DO;
           END;
        B$OLD$ = ADDR(HEAD_IN);
        B$NEW$ = ADDR(HEAD_OUT);
 
        B$NEWHEAD.FLAVOR = %HOST_RU;
 
        B$NEWHEAD.VPPGS = B$OLDHEAD.VPPGS;
        B$NEWHEAD.VDPGS = B$OLDHEAD.VDPGS;
        B$NEWHEAD.RPROC = B$OLDHEAD.RPROC;
        B$NEWHEAD.RDATA = B$OLDHEAD.RDATA;
        B$NEWHEAD.BIAS = B$OLDHEAD.BIAS;
        B$NEWHEAD.START = B$OLDHEAD.START;
        B$NEWHEAD.S = B$OLDHEAD.S;
        B$NEWHEAD.LIB = B$OLDHEAD.LIB;
        B$NEWHEAD.ASL = B$OLDHEAD.ASL;
        B$NEWHEAD.OVRL = B$OLDHEAD.OVRL;
        B$NEWHEAD.PROCACC = B$OLDHEAD.PROCACC;
        B$NEWHEAD.NOCHGPMEM = B$OLDHEAD.NOCHGPMEM;
        B$NEWHEAD.PROCSURCHG = B$OLDHEAD.PROCSURCHG;
        B$NEWHEAD.RESTPROC = B$OLDHEAD.RESTPROC;
        B$NEWHEAD.STRONG_LOCK = B$OLDHEAD.STRONG_LOCK;
        B$NEWHEAD.NSTDINVOC = B$OLDHEAD.NSTDINVOC;
/*
*/
/* Now run through all of the records fixing up the SECTNUM fields.*/
        CALL M$PFIL (FPT_PFIL);
        FPT_GDS.V.SEGSIZE#=MAXIMUM(B$NEWHEAD.NRECSIZE,
           B$NEWHEAD.PRECSIZE,
           B$NEWHEAD.EDRECSIZE,
           B$NEWHEAD.SDRECSIZE,
           B$NEWHEAD.SECTABLESIZE,
           B$NEWHEAD.ROSIZE);
GET_BUF:
        CALL M$GDS (FPT_GDS) ALTRET( ERR_HEAD );
LOOP:   DO WHILE ('1'B);
           FPT_READ.BUF_ = VEC;
           CALL M$READ (FPT_READ)
           WHENALTRETURN DO;
              IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE = 6
              THEN
                 EXIT LOOP;
              ELSE
                 IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE = %E$LD THEN DO;
                    /* Lost Data on READ;  Backup one record, grow the buffer */
                    /* by 1K, then try reading the same record again.         */
                    CALL M$PRECORD( BACKUP1 ) ALTRET( ERR_HEAD );
                    FPT_GDS.V.SEGSIZE#= 1024;
                    GOTO GET_BUF;
                    END;
                 ELSE
                    GOTO ERR_HEAD;
              END;
           FPT_WRITE.BUF_ = VEC;
           FPT_WRITE.BUF_.BOUND=SI$->ARS-1;
           DO SELECT (ADDR(KEY)->B$RUKEY.TYPE);
           SELECT (%TYPEDEF);
              I = SI$->ARS/SIZEC(B$EDEF);
              P$ = VEC.P$;
              DO J=0 TO I - 1;
                 P$->B$EDEF.OU.SECTNUM=0;
                 P$ = PINCRW(P$,SIZEW(B$EDEF));
                 END;
              CALL M$WRITE (FPT_WRITE);
           SELECT (%TYPSDEF);
              I = SI$->ARS/SIZEC(B$SDEF);
              P$ = VEC.P$;
              DO J=0 TO I - 1;
                 P$->B$SDEF.AD.OU.SECTNUM=0;
                 P$ = PINCRW(P$,SIZEW(B$SDEF));
                 END;
              CALL M$WRITE (FPT_WRITE);
           SELECT(511);
              DO SELECT (ADDR(KEY)->B$DBGKEY.TYPE);
              SELECT (%TYPINTNTRY);
                 I = SI$->ARS/SIZEC(B$INTNTRY);
                 P$ = VEC.P$;
                 DO J=0 TO I - 1;
                    P$->B$INTNTRY.OU.SECTNUM=0;
                    P$ = PINCRW(P$,SIZEW(B$INTNTRY));
                    END;
                 CALL M$WRITE (FPT_WRITE);
              SELECT (%TYPEXST);
                 I = SI$->ARS/SIZEC(B$EXST);
                 P$ = VEC.P$;
                 DO J=0 TO I - 1;
                    P$->B$EXST.OU.SECTNUM=0;
                    P$ = PINCRW(P$,SIZEW(B$EXST));
                    END;
                 CALL M$WRITE (FPT_WRITE);
              END;
           END;
           END;
        END;
 
/* If C00, convert back to B03.
*/
     ELSE IF HEAD_IN.FLAVOR = %HOST_RU
        THEN DO;
           IF C00_FLAG
           THEN
           DO;
              WRITE_DO.BUF_ = VECTOR (ALREADY_MSG);
              CALL M$WRITE (WRITE_DO)
              WHENALTRETURN
              DO;
                 END;
              CALL M$EXIT;
              END;         /* DO IF C00 REQUESTED
                                   & ALREADY C00 */
           WRITE_DO.BUF_ = VECTOR(C00RU_MSG);
           CALL M$WRITE (WRITE_DO)
           WHENALTRETURN
           DO;
              END;
           B$OLD$ = ADDR(HEAD_OUT);
           B$NEW$ = ADDR(HEAD_IN);
 
           B$OLDHEAD.FLAVOR = 0;
 
 
           B$OLDHEAD.VPPGS = B$NEWHEAD.VPPGS;
           B$OLDHEAD.VDPGS = B$NEWHEAD.VDPGS;
           B$OLDHEAD.RPROC = B$NEWHEAD.RPROC;
           B$OLDHEAD.RDATA = B$NEWHEAD.RDATA;
           B$OLDHEAD.BIAS = B$NEWHEAD.BIAS;
           B$OLDHEAD.START = B$NEWHEAD.START;
           B$OLDHEAD.S = B$NEWHEAD.S;
           B$OLDHEAD.LIB = B$NEWHEAD.LIB;
           B$OLDHEAD.ASL = B$NEWHEAD.ASL;
           B$OLDHEAD.OVRL = B$NEWHEAD.OVRL;
           B$OLDHEAD.PROCACC = B$NEWHEAD.PROCACC;
           B$OLDHEAD.NOCHGPMEM = B$NEWHEAD.NOCHGPMEM;
           B$OLDHEAD.PROCSURCHG = B$NEWHEAD.PROCSURCHG;
           B$OLDHEAD.RESTPROC = B$NEWHEAD.RESTPROC;
           B$OLDHEAD.STRONG_LOCK = B$NEWHEAD.STRONG_LOCK;
           B$OLDHEAD.NSTDINVOC = B$NEWHEAD.NSTDINVOC;
           END;
 
/* If not a B03 nor C00 Host run-unit, abort.
*/
        ELSE GOTO NOT_A_RUNUNIT;
 
     CALL M$WRITE(WRITE_HEAD) ALTRET(ERR_HEAD);
     CALL M$CLOSE(CLOSE_RU) ALTRET(ERR_HEAD);
     CALL M$EXIT;
 
ERR_HEAD: ;
     ERRCODE = B$TCB$->B$TCB.ALT$->B$ALT.ERR;
     FPT_ERRMSG.V.DCB# = B$TCB$->B$TCB.ALT$->B$ALT.DCB#;
     CALL M$ERRMSG(FPT_ERRMSG) ALTRET(WHO_CARES);
WHO_CARES: ;
     CALL M$ERR;
END HEAD;
