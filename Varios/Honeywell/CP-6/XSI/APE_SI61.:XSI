/*M* APE - Acquire Program for Execution on my microcomputer */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*****************************************************************/
/*                                                               */
/*   'APE' - This routine uses ZZZBBMAR's protocol to down-line */
/*   load or upline dump a microcomputer.                        */
/*                                                               */
/*   By DENNIS GRIESSER, LADC.                                   */
/*      01/16/81 - Original version                              */
/*      03/07/82 - CCBUF parsing added                           */
/*      05/04/82 - Submitted to 'X' account                      */
/*      05/18/83 - Sequence to commence load changed from        */
/*                 (SOH) to (ESC)(SOH)                           */
/*                                                               */
/*   Notes:                                                      */
/*    o Actual communication with the micro is done with         */
/*      TRANSPARENT I/O, ORG=TERMINAL.  This is done for         */
/*      several reasons:                                         */
/*         1) allow ACK/NAK/SOH/EOT handshaking characters to    */
/*            pass un-translated.                                */
/*         2) prevent FEP from turning each CR into a complete   */
/*            new line sequence.                                 */
/*         3) TRANSPARENT, ORG=UR input seems to return the      */
/*            parity bit anyway.                                 */
/*    o As a result,                                             */
/*         1) Parity is ignored on handshake reception           */
/*         2) Parity is set low on handshake transmission        */
/*         3) Parity is corrected on data received.              */
/*                                                               */
/*****************************************************************/
 
/*X* DMR,PLM=5,IND=5,CTI=5,SDI=5,MCL=10,CSI=0,ECI=0              */
 
APE: PROC MAIN;
/**/
/* INCLUDE FILES */
/**/
%INCLUDE CP_6;
%INCLUDE CP_6_SUBS;
%INCLUDE B$JIT_C;
%INCLUDE XU_MACRO_C;
 
/* EQUATES */
 
%EQU SOH9#='000000001'B;                /* BIT(9) CONSTANT */
%EQU NAK9#='000010101'B;                /* BIT(9) CONSTANT */
%EQU ACK9#='000000110'B;                /* BIT(9) CONSTANT */
%EQU EOT9#='000000100'B;                /* BIT(9) CONSTANT */
%EQU COLON9#='000111010'B;              /* BIT(9) CONSTANT */
%EQU ESC9#='000011011'B;                /* BIT(9) CONSTANT */
%EQU CR9#='000001101'B;                 /* BIT(9) CONSTANT */
%EQU SOH8#='00000001'B;                 /* BIT(8) CONSTANT */
%EQU NAK8#='00010101'B;                 /* BIT(8) CONSTANT */
%EQU ACK8#='00000110'B;                 /* BIT(8) CONSTANT */
%EQU EOT8#='00000100'B;                 /* BIT(8) CONSTANT */
%EQU COLON8#='00111010'B;               /* BIT(8) CONSTANT */
%EQU ESC8#='00011011'B;                 /* BIT(8) CONSTANT */
%EQU CR8#='00001101'B;                  /* BIT(8) CONSTANT */
%EQU SOH7#='0000001'B;                  /* BIT(7) CONSTANT */
%EQU NAK7#='0010101'B;                  /* BIT(7) CONSTANT */
%EQU ACK7#='0000110'B;                  /* BIT(7) CONSTANT */
%EQU EOT7#='0000100'B;                  /* BIT(7) CONSTANT */
%EQU COLON7#='0111010'B;                /* BIT(7) CONSTANT */
%EQU ESC7#='0011011'B;                  /* BIT(7) CONSTANT */
%EQU CR7#='0001101'B;                   /* BIT(7) CONSTANT */
/**/
/* ALLOCATION */
 
/*     FPT creation */
 
/*         MISC PMMES */
 
%FPT_FID (FPTN=FPT_FID_OU,
          STCLASS=CONSTANT,
          NAME=OU_NAME,
          ACCT=OU_ACCT,
          PASS=OU_PASS,
          ASN=FPT_OPEN_OU.V.ASN#,
          TEXTFID=FID_BUF);
 
%P_PCB (NAME = P_PCB,
        T = TERM_BUF,
        R = APE_NODE,
        W = PARSE_WORK,
        N# = "SIZEC(TERM_BUF)",
        WSZ = 512,
        STCLASS = STATIC);
 
/*         M$TERM */
 
%FPT_OPEN    (FPTN=FPT_OPEN_TERM,
              STCLASS=STATIC,
              DCB=M$TERM,
              ORG=TERMINAL,
              FUN=UPDATE);              /* READ and WRITE                     */
%FPT_READ    (FPTN=FPT_READ_TERM,
          STCLASS=STATIC,
          DCB=M$TERM,
          BUF=TERM_BUF);
%FPT_WRITE   (FPTN=FPT_WRITE_TERM,
          STCLASS=STATIC,
          BUF=TERM_BUF,
          DCB=M$TERM);
%FPT_READ    (FPTN=FPT_DREAD_TERM,      /* For reading up-dump records        */
          TRANS = YES,                  /* TRANSPARENT                        */
          STCLASS=STATIC,
          DCB=M$TERM,
          BUF=UC_BUF);
%FPT_WRITE   (FPTN=FPT_DWRITE_TERM,
          STCLASS=STATIC,
          TRANS = YES,                  /* TRANSPARENT                        */
          BUF=UC_BUF,
          DCB=M$TERM);
%FPT_READ    (FPTN=FPT_SREAD,
          STCLASS=STATIC,
          TRANS = YES,                  /* TRANSPARENT                        */
          DCB=M$TERM,
          BUF=UC_BUF);
%FPT_WRITE   (FPTN=FPT_SWRITE,
          STCLASS=STATIC,
          TRANS = YES,                  /* TRANSPARENT                        */
          BUF=UC_BUF,
          DCB=M$TERM);
%FPT_CLOSE   (FPTN=FPT_CLOSE_TERM,
          STCLASS=STATIC,
          DCB=M$TERM);
 
/*         M$UC */
 
%FPT_EOM (FPTN = FPT_EOM_TERM,
          DCB = M$UC,
          EOMTABLE = VLP_EOMTABLE);     /* SET ACTIVATION CHARACTERS          */
%VLP_EOMTABLE (FPTN = VLP_EOMTABLE,
               STCLASS = CONSTANT,
               VALUES = "0,4,0*14");    /* CR WITH LOW OR HIGH PARITY   */
%FPT_PROMPT  (FPTN=FPT_PROMPT_UC,
              PROMPT=NO_PROMPT,
              DCB=M$UC,
              VFC=YES);
%FPT_TRMCTL (FPTN=FPT_STRMCTL_UC,
              STCLASS=STATIC,
              DCB=M$UC,
              TRMCTL=VLP_TRMCTL);
%VLP_TRMCTL (FPTN=VLP_TRMCTL,
             ACTONTRN=YES,              /* USE ACTIVATION CHARS ON TRANS READ */
             DISPINPUT=NO,              /* ECHO OFF                           */
             STCLASS = STATIC);
%FPT_TRMCTL (FPTN=FPT_TRMCTL_UC,        /* TO SAVE/RESTORE ATTRIBUTES         */
              STCLASS=STATIC,
              DCB=M$UC,
              TRMCTL=VLP_SAVE_TRMCTL);
%VLP_TRMCTL (FPTN=VLP_SAVE_TRMCTL,
             STCLASS = STATIC);
 
/*         M$OU */
 
%FPT_OPEN    (FPTN=FPT_OPEN_OU,
          STCLASS=STATIC,
          DCB=M$OU,
          CTG=YES,
          ORG=CONSEC,
          NAME=OU_NAME,
          ACCT=OU_ACCT,
          PASS=OU_PASS);
%FPT_READ    (FPTN=FPT_READ_OU,
          STCLASS=STATIC,
          DCB=M$OU,
          BUF=UC_BUF);
%FPT_WRITE   (FPTN=FPT_WRITE_OU,
          STCLASS=STATIC,
          BUF=UC_BUF,
          DCB=M$OU);
%FPT_CLOSE   (FPTN=FPT_CLOSE_OU,
          STCLASS=STATIC,
          DCB=M$OU);
 
/*     CONSTANT data */
 
DCL NO_PROMPT CHAR(1) CONSTANT INIT('@');
 
/*     STATIC data */
 
%VLP_NAME (FPTN=OU_NAME, LEN=31, STCLASS=STATIC);
%VLP_ACCT (FPTN=OU_ACCT, STCLASS=STATIC);
%VLP_PASS (FPTN=OU_PASS, STCLASS=STATIC);
 
DCL 1 UC_BUF STATIC,
         2 C(0:79) CHAR(1) UNAL,
         2 B(0:79) REDEF C UNAL,
              3 E BIT(1) UNAL,          /* Extra bit for 9-bit byte           */
              3 P BIT(1) UNAL,          /* Parity bit                         */
              3 B BIT(7) UNAL,          /* Actual data                        */
         2 U(0:79) REDEF C UBIN(9) UNAL;
DCL TERM_BUF CHAR(80) STATIC;
DCL FID_BUF CHAR(50) STATIC;
DCL ERROR CHAR(80) STATIC INIT(' ');
DCL PARSE_WORK (0:511) SBIN STATIC;
 
DCL RECORDS_REMAIN BIT(1);
DCL DOWN_APE BIT(1);
 
DCL ACK_COUNT SBIN WORD STATIC INIT(0);
DCL NAK_COUNT SBIN WORD STATIC INIT(0);
 
DCL CHECKSUM UBIN(8) STATIC;
DCL I SBIN WORD STATIC;
DCL MSD SBIN WORD STATIC;
DCL LSD SBIN WORD STATIC;
/**/
/* SYMREFS */
/**/
DCL B$JIT$ PTR SYMREF;
DCL APE_NODE UBIN WORD SYMREF;
/**/
/*     DCB related */
/**/
DCL M$OU DCB;
DCL M$OU$ PTR STATIC;
DCL M$TERM DCB;
DCL M$TERM$ PTR STATIC;
/**/
/*     BASED structures */
/**/
%F$DCB;
%B$JIT0;
%U$JIT1;
         2* BIT(1);                     /* REST OF JIT NOT NEEDED             */
%PARSE$OUT(NAME = OUT$BLK,STCLASS = BASED);
%PARSE$SYM(NAME = OUT$SYM,STCLASS = BASED);
DCL 1 TEXT$C BASED,
         2 C UBIN(9) CALIGNED,
         2 TEXT CHAR(TEXT$C.C) CALIGNED;
/**/
/* ENTRY DCLS */
/**/
DCL X$PARSE ENTRY(1) ALTRET;
%EJECT;
/* PROCEDURE */
 
/*     MAIN ROUTINE */
 
BEGIN: ;
 
     M$OU$ = DCBADDR(DCBNUM(M$OU));
     M$TERM$ = DCBADDR(DCBNUM(M$TERM));
 
     CALL M$OPEN(FPT_OPEN_TERM);
     TERM_BUF = 'APE here.';
     CALL M$WRITE(FPT_WRITE_TERM);
 
     TERM_BUF = B$JIT$ -> B$JIT.CCBUF;
     CALL X$PARSE (P_PCB) ALTRET(PARSE_ALT);
     DO WHILE (%NO#);
PARSE_ALT: ERROR = 'PARSE ERROR';
          GOTO CROAK;
        END;
     IF P_PCB.OUT$ -> OUT$BLK.CODE = 1
     THEN                               /* DOWN-LINE APE                     */
     DO;
          DOWN_APE = %YES#;
          FID_BUF = P_PCB.OUT$ -> OUT$BLK.SUBLK$(0) -> OUT$SYM.TEXTC$ -> TEXT$C.TEXT;
        END;
     ELSE                               /* UP-LINE DUMP                       */
     DO;
          DOWN_APE = %NO#;
          FID_BUF = P_PCB.OUT$ -> OUT$BLK.SUBLK$(1) -> OUT$SYM.TEXTC$ -> TEXT$C.TEXT;
          DO CASE(P_PCB.OUT$ -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE);
          CASE(1);                      /* ON                                 */
             FPT_OPEN_OU.V.EXIST# = %ERROR#;
          CASE(2);                      /* OVER                               */
             FPT_OPEN_OU.V.EXIST# = %NEWFILE#;
          CASE(3);                      /* INTO                               */
             FPT_OPEN_OU.V.EXIST# = %OLDFILE#;
          END;
        END;
     CALL M$FID(FPT_FID_OU);
 
     CALL M$GTRMCTL(FPT_TRMCTL_UC);     /* SAVE CURRENT ATTRIBUTES            */
     CALL M$STRMCTL(FPT_STRMCTL_UC);    /* KILL ECHO, SET ACTORTRN            */
     CALL M$PROMPT(FPT_PROMPT_UC);
     CALL M$EOM (FPT_EOM_TERM);         /* SET EOM                            */
 
     IF DOWN_APE
     THEN
          CALL DOWNLINE_APE ALTRET(APE_ALT);
     ELSE
          CALL UPLINE_DUMP ALTRET(APE_ALT);
          DO WHILE (%NO#);
APE_ALT:       UC_BUF.B(0) = %EOT9#;    /* 'EOT' to terminate loading         */
               CALL WRITE_SHAKE_1;
             END;
     CALL M$STRMCTL(FPT_TRMCTL_UC);     /* RESTORE OLD ATTRIBUTES             */
     CALL M$CLOSE (FPT_CLOSE_OU);       /* Close read or written object unit  */
CROAK: ;
     IF ERROR ~= ' '
     THEN                               /* Error occured                      */
     DO;
          TERM_BUF = ERROR;
          CALL M$WRITE (FPT_WRITE_TERM);
        END;
     RETURN;
%EJECT;
UPLINE_DUMP: PROC ALTRET;
     FPT_OPEN_OU.V.FUN# = %CREATE#;
     CALL M$OPEN (FPT_OPEN_OU);
 
D_WAIT: CALL READ_HANDSHAKE;
     IF UC_BUF.B.B(1) ~= %SOH7#
          OR UC_BUF.B.B(0) ~= %ESC7#
     THEN                               /* Not ready to dump yet              */
          GOTO D_WAIT;
     UC_BUF.B(0) = %ACK9#;              /* ACK THE SOH                        */
     CALL WRITE_SHAKE_1;
 
     RECORDS_REMAIN = %YES#;
     DO WHILE(RECORDS_REMAIN);
          CALL M$READ(FPT_DREAD_TERM);  /* Read the next record               */
 
          IF UC_BUF.B (0) = %EOT9#
          THEN                          /* UPLINE DUMP complete               */
               RECORDS_REMAIN = %NO#;
          ELSE                          /* A dump data record                 */
          DO;
               IF UC_BUF.B (0) ~= %COLON9#
               THEN                     /* ERROR: no colon                    */
                    GOTO BAD_RECORD;
               CHECKSUM = 0;
               UC_BUF.C(0) = ':';       /* FIX PARITY FOR HOST FILE           */
               DO I = 1 TO (M$TERM$ -> F$DCB.ARS# -1) BY 2; /* FOR EACH BYTE   */
                    CALL NIB_TO_NUMBER(UC_BUF.C(I),MSD) ALTRET(BAD_RECORD);
                    CALL NIB_TO_NUMBER(UC_BUF.C(I+1),LSD) ALTRET(BAD_RECORD);
                    CHECKSUM = CHECKSUM + MSD*16 + LSD;
                  END;
               IF CHECKSUM = 0
               THEN                     /* GOOD RECORD                        */
               DO;
                    FPT_WRITE_OU.BUF_.BOUND = M$TERM$ -> F$DCB.ARS# -1;
                    CALL M$WRITE(FPT_WRITE_OU);
                    UC_BUF.B(0) = %ACK9#;
                    ACK_COUNT = ACK_COUNT +1;
                  END;
               ELSE                     /* BAD RECORD                         */
BAD_RECORD:    DO;
                    UC_BUF.B(0) = %NAK9#;
                    NAK_COUNT = NAK_COUNT +1;
                  END;
               CALL WRITE_SHAKE_1;
             END;
        END;
     RETURN;
 
END UPLINE_DUMP;
%EJECT;
DOWNLINE_APE: PROC ALTRET;
     FPT_OPEN_OU.V.FUN# = %IN#;
     CALL M$OPEN(FPT_OPEN_OU);
 
     CALL M$READ(FPT_READ_OU);          /* READ first load record             */
     RECORDS_REMAIN = %YES#;
 
     UC_BUF.B(0) = %ESC9#;              /* 'ESC'...                           */
     UC_BUF.B(1) = %SOH9#;              /* ...'SOH' to start downloading      */
     CALL WRITE_SHAKE_2;
     CALL READ_HANDSHAKE;
     IF UC_BUF.B.B(0) ~= %ACK7#
     THEN                               /* Not an acknowledgement             */
     DO;
          ERROR = 'Load command (SOH) not ACKed.';
          GOTO ABORT_APE;
        END;
 
     DO WHILE(RECORDS_REMAIN);
          FPT_DWRITE_TERM.BUF_.BOUND = M$OU$ -> F$DCB.ARS# -1 +1;
          UC_BUF.B(M$OU$ -> F$DCB.ARS#) = %CR9#; /* ADD ACTIVATION CHAR       */
SEND:     CALL M$WRITE(FPT_DWRITE_TERM);
 
          CALL READ_HANDSHAKE;
 
          IF UC_BUF.B.B(0) = %NAK7#
          THEN                          /* Error, retransmit                  */
               GOTO SEND;
          IF UC_BUF.B.B(0) = %EOT7#
          THEN                          /* Receiver terminates load           */
          DO;
               ERROR = 'Receiver terminated load.';
               RETURN;
             END;
          IF UC_BUF.B.B(0) ~= %ACK7#
          THEN                          /* Garbage reply                      */
          DO;
               ERROR = 'Unknown load handshake.';
               GOTO ABORT_APE;
             END;
 
          CALL M$READ(FPT_READ_OU) ALTRET(DOWN_DONE); /* Get next download   */
          DO WHILE(%NO#);               /* NEVER DO                           */
DOWN_DONE:     RECORDS_REMAIN = %NO#;
             END;
        END;                            /* END DO WHILE                       */
 
     UC_BUF.B(0) = %EOT9#;              /* 'EOT' to terminate download        */
     CALL WRITE_SHAKE_1;
 
     RETURN;
 
ABORT_APE:
     ALTRETURN;
END DOWNLINE_APE;
%EJECT;
READ_HANDSHAKE: PROC;
     UC_BUF = '0'B;                     /* Clear buffer for handshake         */
     CALL M$READ(FPT_SREAD);            /* Get the handshake character        */
     RETURN;                            /* FINIS                              */
END READ_HANDSHAKE;
%EJECT;
WRITE_SHAKE_1: PROC;
     UC_BUF.B(1) = %CR9#;               /* (CR) to terminate handshake line   */
     FPT_SWRITE.BUF_.BOUND = 2 -1;      /* 2-character sequence, including CR */
     CALL M$WRITE(FPT_SWRITE);          /* Send handshake sequence            */
     RETURN;                            /* FINIS                              */
END WRITE_SHAKE_1;
%EJECT;
WRITE_SHAKE_2: PROC;
     UC_BUF.B(2) = %CR9#;               /* (CR) to terminate handshake line   */
     FPT_SWRITE.BUF_.BOUND = 3 -1;      /* 3-character sequence (including CR */
     CALL M$WRITE(FPT_SWRITE);          /* Send handshake sequence            */
     RETURN;                            /* FINIS                              */
END WRITE_SHAKE_2;
%EJECT;
NIB_TO_NUMBER: PROC (NIB,NUMBER) ALTRET;
DCL 1 NIB,
         2 C CHAR(1) UNAL,
         2 B REDEF C UNAL,
              3 E BIT(1) UNAL,          /* Extra bit for 9-bit byte           */
              3 P BIT(1) UNAL,          /* Parity bit                         */
              3 B BIT(7) UNAL;          /* Actual data                        */
DCL NUMBER SBIN WORD;
DCL 1 HEX_TBL (0:15) CONSTANT,
         2 C CHAR(1) UNAL INIT(
        '0','1','2','3','4','5','6','7',
        '8','9','A','B','C','D','E','F'),
         2 B REDEF C UNAL,
              3 E BIT(1) UNAL,          /* Extra bit for 9-bit byte           */
              3 P BIT(1) UNAL,          /* Parity bit                         */
              3 B BIT(7) UNAL;          /* Actual data                        */
DCL POSSIBLE SBIN WORD;
     DO POSSIBLE = 0 TO 15;
          IF NIB.B.B = HEX_TBL.B.B(POSSIBLE) /* Parity-blind check           */
          THEN                          /* NIB MATCHES A HEX DIGIT            */
          DO;
               NUMBER = POSSIBLE;
               NIB.C = HEX_TBL.C(POSSIBLE); /* Correct parity                */
               RETURN;
             END;
        END;
     ERROR = 'Bad HEX digit.';
     ALTRETURN;
END NIB_TO_NUMBER;
END APE;
