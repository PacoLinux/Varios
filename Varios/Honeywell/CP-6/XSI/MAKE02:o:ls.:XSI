

rCC.C03    File=MAKE_SIc02.:XSI                                                      Thu Nov 20 1997  Page=1  
A        1         1             /*M*    make_command:c    -- Parses make commands and builds tree.  */
A        2         2             /*T***********************************************************/
A        3         3             /*T*                                                         */
A        4         4             /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
A        5         5             /*T*                                                         */
A        6         6             /*T***********************************************************/
A        7         7
A        8         8             #include   <setjmp.h>
A        9         9             #include   <stdlib.h>
A       10        10             #include   <stdio.h>
A       11        11             #include   <errno:h>
A       12        12             #include   "MAKE_Cc13"
A       13        13             #include   "MAKE_Cc14"
A       14        14             #include   "xu_cp6_c.h"
A       15        15             #include   "xu_macro_c.h"
A       16        16             #include   "xu_subs_c.h"
A       17        17
A       18        18             extern FILE *Makefile;
A       19        19             extern char *alloc_text(int, char *);
A       20        20             extern struct value evaluate( struct parse_out * );
A       21        21             extern int PrintExpr( FILE *, struct value * );
A       22        22             extern FILE *OpenInclude(char *);
A       23        23             int   WithinIf(void);
A       24        24
A       25        25             extern  struct p_node  MAKECOMMAND;
A       26        26             extern  int            UserParse();
A       27        27             extern  int            ReportParseLexemes();
A       28        28             extern  void           ReportParseErr();
A       29        29             extern  int            DoMacSublk();
A       30        30             extern  int            X_PARSE();
A       31        31
A       32        32             extern  char         *ParseWork;
A       33        33             extern  unsigned      ParseWorkSize;
A       34        34             extern  jmp_buf       ExpandParseRetry;
A       35        35
A       36        36
A       37        37             struct  sym_target  **TargetBuf = 0;
rCC.C03    File=MAKE_SIc02.:XSI                                                      Thu Nov 20 1997  Page=2  
A       38        38             unsigned              TargetBufSize = 0;
A       39        39
A       40        40             static     int       Intarget = 0;
A       41        41             unsigned   int       if_stack[ MAX_IF ];
A       42        42
A       43        43
A       44        44             struct p_pcb        CommandPCB = {0, &MAKECOMMAND, 0, 0, UserParse,
A       45        45    1                      0, 1, 0, 0, 0, 1, 0, 0, {0,0,0,0,0}, {0,0,0,0}, 0,
A       46        46    1                      1, 0, 0, 0, 0, 0, ReportParseLexemes};
A       47        47
A       48        48
A       49        49             void
A       50        50             MakeCommand(buf, bsize, verbose)
A       51        51               char     *buf;
A       52        52               unsigned  bsize;
A       53        53               int       verbose;
A       54        54             {
A       55        55    1          void   SetupTargets();
A       56        56    1          struct parse_out  *p;
A       57        57    1          struct parse_out  *pb;
A       58        58    1          struct parse_sym  *ps;
A       59        59    1          struct sym_macro  *macsym;
A       60        60    1          struct sym_target **td;
A       61        61    1          static struct command_line **cmdpp = 0;
A       62        62    1          struct sym_owner *get_email_address();
A       63        63    1          struct sym_owner *addr;
A       64        64    1          FILE *strm;
A       65        65    1
A       66        66    1          int   i, nt, nd, ntot;
A       67        67    1          char  *c;
A       68        68    1
A       69        69    1          CommandPCB.text   = buf;
A       70        70    1          CommandPCB.nchars = bsize;
A       71        71    1
A       72        72    1          setjmp(ExpandParseRetry);
A       73        73    1
A       74        74    1          CommandPCB.work   = ParseWork;
rCC.C03    File=MAKE_SIc02.:XSI                                                      Thu Nov 20 1997  Page=3  
A       75        75    1          CommandPCB.wksz   = ParseWorkSize >> 2;
A       76        76    1
A       77        77    1          if (!X_PARSE(&CommandPCB)) {
A       78        78    2             UserParseAlt(&CommandPCB);
A       79        79    2             if (!file_table[InputNo].flags)
A       80        80    2                ReportParseErr(&CommandPCB);
A       81        81    2             return;
A       82        82    2             }
A       83        83    1
A       84        84    1          p = CommandPCB.out;
A       85        85    1          i = p->code;
A       86        86    1          if (file_table[InputNo].flags   &&   ( i < 7  ||  i > 10))
A       87        87    1             return;
A       88        88    1          switch (i)  {  /* 1=macro, 2=dependancy, 3=jcl, 4=comment */
A       89        89    2
A       90        90    2          case 1:  /***   Macro Definition    ***/
A       91        91    2             ps = (struct parse_sym*) p->sublk[0];  /* Macro Name */
A       92        92    2             Intarget = 0;
A       93        93    2
A       94        94    2          if (buf == MacRecBuf)   {
A       95        95    3             if (AltRecSize < bsize) {
A       96        96    4                int i = (bsize + 1023)/1024 * 1024;
A       97        97    4                if (!(AltRecBuf = (char *)realloc(AltRecBuf,(AltRecSize=i))))
A       98        98    4                   crash("Out of Memory: MakeCommand");
A       99        99    4                }
A      100       100    3             memcpy(AltRecBuf, buf, bsize);
A      101       101    3             buf = AltRecBuf;
A      102       102    3             }
A      103       103    2
A      104       104    2             MacRecLen = 0;
A      105       105    2             i = 1;
A      106       106    2             do {
A      107       107    3                i = DoMacSublk(p, i, buf, bsize);
A      108       108    3                } while (i > 0);
A      109       109    2             MacRecBuf[ MacRecLen++ ] = 0;
A      110       110    2
A      111       111    2             macsym = lookup_sym_macro(&(ps->text[1]), ps->text[0], 1);
rCC.C03    File=MAKE_SIc02.:XSI                                                      Thu Nov 20 1997  Page=4  
A      112       112    2
A      113       113    2             if (!macsym) crash("Out of Memory: MakeCommand");
A      114       114    2             if (!macsym->mc_cmdline) {
A      115       115    3                if (macsym->mc_deflen && opt_warn && !macsym->mc_default)
A      116       116    3                   warning("\"%s\" line %d: variable \"%s\" redefined\n",
A      117       117    3                      file_table[InputNo].fid, file_table[InputNo].recno,
A      118       118    3                      macsym->mc_sym);
A      119       119    3                macsym->mc_default = 0;
A      120       120    3                macsym->mc_def = c = (char *) malloc(MacRecLen);
A      121       121    3                if (!c) crash("Out of Memory: MakeCommand");
A      122       122    3                memcpy(c, MacRecBuf, MacRecLen);
A      123       123    3                macsym->mc_deflen = MacRecLen-1;
A      124       124    3                mem_macstr += MacRecLen;
A      125       125    3                }
A      126       126    2             else if (verbose)
A      127       127    2                 warning("\"%s\" line %d: Command line variable \"%s\": not redefined!
A                               \n",
A      128       128    2                   file_table[InputNo].fid, file_table[InputNo].recno,
A      129       129    2                    macsym->mc_sym);
A      130       130    2             break;
A      131       131    2
A      132       132    2          case 2:  /***  Dependancy           ***/
A      133       133    2             Intarget = 1;
A      134       134    2             nt = p->sublk[0]->nsublks;
A      135       135    2             nd = (p->nsublks > 1) ? p->sublk[1]->nsublks : 0;
A      136       136    2             ntot = nt + nd;
A      137       137    2             if (TargetBufSize < ntot) {
A      138       138    3                i = 20 * ((ntot + 40) / 20);
A      139       139    3                i = (TargetBufSize == 0)? i+40 : i;
A      140       140    3                TargetBuf = (struct sym_target**)realloc(TargetBuf,i<<2);
A      141       141    3                if (!TargetBuf)
A      142       142    3                   crash("Out of Memory: MakeCommand");
A      143       143    3                TargetBufSize = i;
A      144       144    3                }
A      145       145    2
A      146       146    2             td = TargetBuf + nt;
A      147       147    2             SetupTargets(TargetBuf, p->sublk[0]);
rCC.C03    File=MAKE_SIc02.:XSI                                                      Thu Nov 20 1997  Page=5  
A      148       148    2             if (nd > 0)
A      149       149    2                SetupTargets(td, p->sublk[1]);
A      150       150    2
A      151       151    2             alloc_target_rule();
A      152       152    2             for ( i=0 ; i<nt ; )
A      153       153    2                build_dependancy( TargetBuf[i++], td, nd);
A      154       154    2             break;
A      155       155    2
A      156       156    2          case 3:  /*    some jcl       */
A      157       157    2             if (Intarget)  {
A      158       158    3                struct command_line *cmd;
A      159       159    3                struct dependancy   *d  = LineList->tr_depend;
A      160       160    3                struct command_list *cm = LineList->tr_commands;
A      161       161    3                if (!cm) {
A      162       162    4                   LineList->tr_commands = cm = (struct command_list *)
A      163       163    4                                      malloc(sizeof(struct command_list));
A      164       164    4                   if (!cm) crash("Out of memory: MakeCommand");
A      165       165    4                   cm->cm_lines = 0;
A      166       166    4                   cmdpp = &cm->cm_lines;
A      167       167    4                   cm->cm_flags = 0;
A      168       168    4                   cm->next     = 0;
A      169       169    4                   mem_comrules += sizeof(struct command_list);
A      170       170    4                   while (d)  {
A      171       171    5                      if (d->dp_target->tg_commands)
A      172       172    5                         warning("\"%s\" line %d: warning target \"%s\" had build comm
A                               ands assigned on line %d of file %s\n",
A      173       173    5                            file_table[InputNo].fid,file_table[InputNo].recno,
A      174       174    5                            d->dp_target->tg_text,
A      175       175    5                            d->dp_target->tg_commands->tr_num,
A      176       176    5                            d->dp_target->tg_commands->tr_fid);
A      177       177    5                      else d->dp_target->tg_commands = LineList;
A      178       178    5                      d = d->next;
A      179       179    5                      }
A      180       180    4                   }
A      181       181    3
A      182       182    3                cmd = (struct command_line *)
A      183       183    3                      malloc(sizeof(struct command_line)-4+InputRecLen+1);
rCC.C03    File=MAKE_SIc02.:XSI                                                      Thu Nov 20 1997  Page=6  
A      184       184    3                if (!cmd) crash("Out of Memory: MakeCommand");
A      185       185    3                *cmdpp = cmd;
A      186       186    3                cmdpp  = &cmd->next;
A      187       187    3                cmd->next = 0;
A      188       188    3                cm->cm_flags |= SpecMacroFlags;
A      189       189    3                cmd->cmd_len   = InputRecLen;
A      190       190    3                memcpy(&(cmd->cmd_text[0]), InputRec, InputRecLen);
A      191       191    3                cmd->cmd_text[InputRecLen] = 0;
A      192       192    3                mem_commands += sizeof(struct command_line)-4 + InputRecLen+1;
A      193       193    3                }
A      194       194    2             else warning("\"%s\" line %d: build command is not associated with a targ
A                               et rule\n",
A      195       195    2                file_table[InputNo].fid, file_table[InputNo].recno);
A      196       196    2             break;
A      197       197    2
A      198       198    2          case 5:  /*    An EMAIL address    */
A      199       199    2             Intarget = 0;
A      200       200    2             nd = (p->nsublks > 1) ? p->sublk[1]->nsublks : 0;
A      201       201    2             addr = get_email_address( p->sublk[0]);
A      202       202    2             if (!addr) break;
A      203       203    2             pb = p->sublk[1];
A      204       204    2
A      205       205    2             for (i=0 ; i<nd ; )  {  /* Update owner of each target */
A      206       206    3                ps = (struct parse_sym *) pb->sublk[i++];
A      207       207    3                if (ps->code == 1)   {
A      208       208    4                   struct sym_target *t = lookup_sym_target( ps->text+1, *ps->text, 1)
A                               ;
A      209       209    4                   if (!t) break; /* out of memory? */
A      210       210    4                   if (!t->tg_owner)
A      211       211    4                      t->tg_owner = addr;
A      212       212    4                   else warning("\"%s\" line %d: (warning) email address for %s redefi
A                               ned\n",
A      213       213    4                      file_table[InputNo].fid, file_table[InputNo].recno,
A      214       214    4                      t->tg_text);
A      215       215    4                   }
A      216       216    3                else error("\"%s\" line %d: Illegal target name: \"%s\"\n",
A      217       217    3                   file_table[InputNo].fid, file_table[InputNo].recno,
rCC.C03    File=MAKE_SIc02.:XSI                                                      Thu Nov 20 1997  Page=7  
A      218       218    3                      sym_macro_specials[ ps->code ]->mc_sym);
A      219       219    3                }
A      220       220    2             break;
A      221       221    2
A      222       222    2
A      223       223    2          case 4:  /*    A comment!     */
A      224       224    2             if (!memchr(buf, '#', bsize))
A      225       225    2                Intarget = 0;
A      226       226    2             break;
A      227       227    2
A      228       228    2
A      229       229    2          case 6:  /*    : include <filename>       */
A      230       230    2             ps = (struct parse_sym *)p->sublk[0];
A      231       231    2             if (InputNo >= MAX_INCL-1) {
A      232       232    3                error("\"%s\" line %d: maximum include file nesting is %d\n",
A      233       233    3                      file_table[InputNo].fid,  file_table[InputNo].recno,
A      234       234    3                      MAX_INCL-1 );
A      235       235    3                break;
A      236       236    3                }
A      237       237    2             c = alloc_text( 1 + (i = ps->text[0]), &(ps->text[1]) );
A      238       238    2             c[i] = 0;
A      239       239    2             strm = OpenInclude(c);
A      240       240    2             if (!strm) {
A      241       241    3                error("\"%s\" line %d, Can't open include file: %s\n",
A      242       242    3                      file_table[InputNo].fid,  file_table[InputNo].recno,
A      243       243    3                      strerror(errno)                                    );
A      244       244    3                break;
A      245       245    3                }
A      246       246    2             InputNo++;
A      247       247    2             file_table[InputNo].strm    = strm;
A      248       248    2             file_table[InputNo].fid     = c;
A      249       249    2             file_table[InputNo].recno   = 0;
A      250       250    2             file_table[InputNo].ifdepth = file_table[InputNo-1].ifdepth;
A      251       251    2             file_table[InputNo].flags   = 0;
A      252       252    2             Makefile                    = strm;
A      253       253    2             break;
A      254       254    2
rCC.C03    File=MAKE_SIc02.:XSI                                                      Thu Nov 20 1997  Page=8  
A      255       255    2          case 7:  /*    : if  expression           */
A      256       256    2             if (file_table[InputNo].ifdepth+1 >= MAX_IF) {
A      257       257    3                error("\"%s\" line %d: :if directive nested too deeply\n",
A      258       258    3                       file_table[InputNo].fid,  file_table[InputNo].recno );
A      259       259    3                break;
A      260       260    3                }
A      261       261    2             i = file_table[InputNo].ifdepth++;
A      262       262    2             if_stack[i] = file_table[InputNo].flags;
A      263       263    2             if ( !if_stack[i] )  {  /* Evaluate expression...  */
A      264       264    3                struct value val;
A      265       265    3                val = evaluate( p->sublk[0] );
A      266       266    3                if (!eval_logl(val))
A      267       267    3                   file_table[InputNo].flags |= 1; /* false, skip this */
A      268       268    3                }
A      269       269    2             else file_table[InputNo].flags |= 4;  /* skip nested if   */
A      270       270    2             break;
A      271       271    2
A      272       272    2          case 8:  /*    :elif expression           */
A      273       273    2             if (WithinIf())
A      274       274    2                switch (file_table[InputNo].flags)  {
A      275       275    3                   struct value val;
A      276       276    3                   case 0:  file_table[InputNo].flags |= 2;  break;
A      277       277    3                   case 1:
A      278       278    3                      val = evaluate( p->sublk[0] );
A      279       279    3                      if (eval_logl(val))
A      280       280    3                         file_table[InputNo].flags = 0;
A      281       281    3                      break;
A      282       282    3                   }
A      283       283    2             break;
A      284       284    2
A      285       285    2          case 9:  /*    :else                      */
A      286       286    2             if (WithinIf())
A      287       287    2                switch (file_table[InputNo].flags)  {
A      288       288    3                   case 0:  file_table[InputNo].flags |= 2;  break;
A      289       289    3                   case 1:  file_table[InputNo].flags  = 0;  break;
A      290       290    3                   }
A      291       291    2             break;
rCC.C03    File=MAKE_SIc02.:XSI                                                      Thu Nov 20 1997  Page=9  
A      292       292    2
A      293       293    2          case 10: /*    :endif                     */
A      294       294    2             if (WithinIf())   {
A      295       295    3                i = --file_table[InputNo].ifdepth;
A      296       296    3                file_table[InputNo].flags = if_stack[i];
A      297       297    3                }
A      298       298    2             break;
A      299       299    2
A      300       300    2          case 11: /*    : error   expr,expr,...    */
A      301       301    2          case 12: /*    : print   expr,expr,...    */
A      302       302    2
A      303       303    2             nd = p->code;
A      304       304    2             strm = stdout;
A      305       305    2
A      306       306    2             if (nd == 11)  {
A      307       307    3                error("\"%s\" line %d: ",
A      308       308    3                      file_table[InputNo].fid, file_table[InputNo].recno );
A      309       309    3                }
A      310       310    2             nt = p->nsublks;
A      311       311    2
A      312       312    2             for (nd = 0 ; nd < nt ; )     {
A      313       313    3                struct value val;
A      314       314    3                val = evaluate( p->sublk[nd++]);
A      315       315    3                PrintExpr(strm, &val);
A      316       316    3                }
A      317       317    2             fprintf(strm, "\n");
A      318       318    2             break;
A      319       319    2
A      320       320    2          }
A      321       321    1          return;
A      322       322    1        }
A      323       323
A      324       324
A      325       325             void
A      326       326             SetupTargets(tbuf, pb)
A      327       327               struct   sym_target  **tbuf;
A      328       328               struct   parse_out   *pb;
rCC.C03    File=MAKE_SIc02.:XSI                                                      Thu Nov 20 1997  Page=10 
A      329       329             {
A      330       330    1          struct   parse_sym   *ps;
A      331       331    1          int      i;
A      332       332    1          int      n = pb->nsublks;
A      333       333    1
A      334       334    1          for ( i=0 ; i<n ; )  {
A      335       335    2             if ((ps = (struct parse_sym *) pb->sublk[i])->code == 1)
A      336       336    2                tbuf[i++] = lookup_sym_target(&(ps->text[1]), ps->text[0], 1);
A      337       337    2             else error("\"%s\" line %d: Illegal Target Name: \"%s\"\n",
A      338       338    2                 file_table[InputNo].fid, file_table[InputNo].recno,
A      339       339    2                         sym_macro_specials[ps->code]->mc_sym), i++;
A      340       340    2             }
A      341       341    1          return;
A      342       342    1        }
A      343       343
A      344       344
A      345       345             /*D*    NAME:       get_email_address
A      346       346                     PURPOSE:    To translate a targetnamelist into an email
A      347       347                                 address.
A      348       348                     DESCRIPTION:
A      349       349                        The targetname list pieces are joined together with a
A      350       350                        single blank between components and the name is looked
A      351       351                        up.
A      352       352             */
A      353       353             struct sym_owner *
A      354       354             get_email_address(pb)
A      355       355               struct   parse_out   *pb;
A      356       356             {
A      357       357    1          char                 buf[256];
A      358       358    1          struct   parse_sym   *ps;
A      359       359    1          int      i, j = 0;
A      360       360    1          int      n = pb->nsublks;
A      361       361    1
A      362       362    1          for ( i=0 ; i<n ; i++ )  {
A      363       363    2             ps = (struct parse_sym *) pb->sublk[i];
A      364       364    2             if (ps->code == 1)   {
A      365       365    3                int len = *ps->text;
rCC.C03    File=MAKE_SIc02.:XSI                                                      Thu Nov 20 1997  Page=11 
A      366       366    3                if ( j+len > 254)
A      367       367    3                   error("\"%s\" line %d: Address too long\n",
A      368       368    3                      file_table[InputNo].fid, file_table[InputNo].recno);
A      369       369    3                if (j > 0) buf[j++] = ' ';
A      370       370    3                memcpy( buf+j, ps->text+1, len);
A      371       371    3                j += len;
A      372       372    3                }
A      373       373    2             else error("\"%s\" line %d: Illegal address component: \"%s\"\n",
A      374       374    2                   file_table[InputNo].fid, file_table[InputNo].recno,
A      375       375    2                         sym_macro_specials[ps->code]->mc_sym);
A      376       376    2             }
A      377       377    1          buf[j] = 0;
A      378       378    1          return lookup_sym_owner(buf, j, 1);
A      379       379    1        }
A      380       380
A      381       381
A      382       382
A      383       383             /*F*    NAME:       WithinIf(void)
A      384       384                     PURPOSE:    To indicate if we are processing a :if.
A      385       385                     DESCRIPTION:
A      386       386                        We are processing an :if when
A      387       387
A      388       388                        1. the current ifdepth is greater than 0
A      389       389                ( AND   2. the input stream is the base make file
A      390       390                  OR    3. the current file ifdepth is greater than the
A      391       391                           previous include file's ifdepth.
A      392       392                )
A      393       393             */
A      394       394
A      395       395             int
A      396       396             WithinIf(void)
A      397       397             {
A      398       398    1          int   rs = 0;
A      399       399    1
A      400       400    1          if (  file_table[InputNo].ifdepth   &&
A      401       401    1              (    InputNo == 0
A      402       402    1                || file_table[InputNo].ifdepth > file_table[InputNo-1].ifdepth
rCC.C03    File=MAKE_SIc02.:XSI                                                      Thu Nov 20 1997  Page=12 
A      403       403    1              ))
A      404       404    1             rs++;
A      405       405    1
A      406       406    1          if (!rs)
A      407       407    1             error("\"%s\" line %d: directive must be within an :if\n",
A      408       408    1                   file_table[InputNo].fid,  file_table[InputNo].recno );
A      409       409    1
A      410       410    1          return rs;
A      411       411    1        }
A      412       412
A      413       413
A      414       414
A      415       415             /*D*    NAME:       alloc_target_rule(LineNo)
A      416       416                     PURPOSE:    To allocate a target rule block.
A      417       417                     DESCRIPTION:
A      418       418                        Every time a makefile line contains a dependancy rule,
A      419       419                        a target_rule structure is allocated to hold the
A      420       420                        dependancy information.
A      421       421             */
A      422       422
A      423       423             alloc_target_rule()
A      424       424             {
A      425       425    1          struct target_rule *t;
A      426       426    1
A      427       427    1          t = (struct target_rule *) malloc(sizeof(struct target_rule));
A      428       428    1          if (!t) crash("Out of Memory: MakeCommand");
A      429       429    1
A      430       430    1          t->next        = LineList;
A      431       431    1          LineList       = t;
A      432       432    1          t->tr_depend   = 0;
A      433       433    1          t->tr_commands = 0;
A      434       434    1          t->tr_num      = file_table[InputNo].recno;
A      435       435    1          t->tr_fid      = file_table[InputNo].fid;
A      436       436    1          mem_rulelist += sizeof(struct target_rule);
A      437       437    1          return;
A      438       438    1        }
A      439       439
rCC.C03    File=MAKE_SIc02.:XSI                                                      Thu Nov 20 1997  Page=13 
A      440       440
A      441       441             /*D*    NAME:       build_dependancy
A      442       442                     PURPOSE:    To build a dependancy list for a target.
A      443       443                     DESCRIPTION:
A      444       444                        This function allocates a dependancy block for the
A      445       445                        specified function.  This block is linked to the
A      446       446                        target_rule block in which the dependancy was indicated,
A      447       447                        and to its sym_target block.
A      448       448             */
A      449       449
A      450       450             build_dependancy(target, dlist, nd)
A      451       451               struct   sym_target  *target;
A      452       452               struct   sym_target  **dlist;
A      453       453               unsigned             nd;
A      454       454             {
A      455       455    1          struct dependancy *d;
A      456       456    1          int               i, j;
A      457       457    1          int               tg_blen = target->tg_len - target->tg_suffix_len;
A      458       458    1
A      459       459    1          if ( *(target->tg_text) == '.') {
A      460       460    2             if (target == PseudoPhony) {
A      461       461    3                for ( i=0 ; i<nd ; i++)
A      462       462    3                   (*dlist++)->tg_phony |= 1;
A      463       463    3                return;
A      464       464    3                }
A      465       465    2             else if (target == PseudoPrecious)  {
A      466       466    3                for ( i=0 ; i<nd ; i++)
A      467       467    3                   (*dlist++)->tg_precious |= 1;
A      468       468    3                return;
A      469       469    3                }
A      470       470    2             else if (target == PseudoOnline)    {
A      471       471    3                for ( i=0 ; i<nd ; i++)
A      472       472    3                   (*dlist++)->tg_online |= 1;
A      473       473    3                return;
A      474       474    3                }
A      475       475    2             else if (target == PseudoSuffixes || target == PseudoDefault ||
A      476       476    2                      target == PseudoIgnore   || target == PseudoSilent    ) {
rCC.C03    File=MAKE_SIc02.:XSI                                                      Thu Nov 20 1997  Page=14 
A      477       477    3                warning("\"%s\" line %d: Fake Target %s not supported in CP-6 Make\n",
A
A      478       478    3                   file_table[InputNo].fid, file_table[InputNo].recno,
A      479       479    3                   target->tg_text);
A      480       480    3                return;
A      481       481    3                }
A      482       482    2             }
A      483       483    1          else if (!MakeTarget) MakeTarget = target;
A      484       484    1
A      485       485    1          d = (struct dependancy *) malloc(i=sizeof(struct dependancy)-16+4*nd);
A      486       486    1          if (!d) crash("Out of Memory: MakeCommand");
A      487       487    1          mem_dependlist[0] += i;
A      488       488    1          mem_dependlist[1]++;
A      489       489    1
A      490       490    1          d->next    = LineList->tr_depend;
A      491       491    1          LineList->tr_depend = d;
A      492       492    1
A      493       493    1          d->dp_tgdepend = target->tg_depend;
A      494       494    1          target->tg_depend = d;
A      495       495    1
A      496       496    1          d->dp_rule  = LineList;
A      497       497    1          d->dp_target   = target;
A      498       498    1          d->dp_num      = nd;
A      499       499    1
A      500       500    1          for ( i=j=0 ; i<nd ; i++)  {
A      501       501    2             struct sym_target *t = *dlist++;
A      502       502    2             int                t_blen = t->tg_len - t->tg_suffix_len;
A      503       503    2
A      504       504    2             if ( t_blen )  {
A      505       505    3                d->dp_list[j++] = t;
A      506       506    3                if (tg_blen == t_blen && !memcmp(target->tg_text, t->tg_text, tg_blen)
A                               )
A      507       507    3                   target->tg_depbase++;
A      508       508    3                }
A      509       509    2             else target->tg_inftype = t->tg_ftype;
A      510       510    2             }
A      511       511    1
rCC.C03    File=MAKE_SIc02.:XSI                                                      Thu Nov 20 1997  Page=15 
A      512       512    1          d->dp_num = j;
A      513       513    1          return;
A      514       514    1        }
A      515       515
A      516       516
A      517       517
A      518       518
A      519       519             /*D*    NAME:       setup_pseudo_targets()
A      520       520                     PURPOSE:    To create target entries for the pseudo targets
A      521       521                                 .PHONY, .PRECIOUS, .SUFFIXES, .DEFAULT, .IGNORE
A      522       522                                 and .SILENT.
A      523       523             */
A      524       524
A      525       525             setup_pseudo_targets()
A      526       526             {
A      527       527    1          PseudoPhony     = lookup_sym_target(".PHONY",    6, 2);
A      528       528    1          PseudoPrecious  = lookup_sym_target(".PRECIOUS", 9, 2);
A      529       529    1          PseudoSuffixes  = lookup_sym_target(".SUFFIXES", 9, 2);
A      530       530    1          PseudoDefault   = lookup_sym_target(".DEFAULT",  8, 2);
A      531       531    1          PseudoIgnore    = lookup_sym_target(".IGNORE",   7, 2);
A      532       532    1          PseudoSilent    = lookup_sym_target(".SILENT",   7, 2);
A      533       533    1          PseudoOnline    = lookup_sym_target(".ONLINE",   7, 2);
A      534       534    1          return;
A      535       535    1        }
A      536       536
A      537       537
A      538       538
A      539       539
A      540       540             /*D*    NAME:          dump_dependancies(LS_width)
A      541       541                     PURPOSE:       To nicely format the current dependancy
A      542       542                                    information.
A      543       543                     DESCRIPTION:
A      544       544                        The dependancy information is found by chasing the chain
A      545       545                        created through TargetHead.  As each new sym_target is
A      546       546                        allocated, it is linked into TargetHead to provide this
A      547       547                        chain.
A      548       548             */
rCC.C03    File=MAKE_SIc02.:XSI                                                      Thu Nov 20 1997  Page=16 
A      549       549
A      550       550             dump_dependancies(LS_width)
A      551       551               unsigned    LS_width;
A      552       552             {
A      553       553    1          struct   sym_target  *t = TargetList.tg_list;
A      554       554    1          struct   dependancy  *d;
A      555       555    1          int                  fw;
A      556       556    1          unsigned             w_printed = 0;
A      557       557    1
A      558       558    1          printf("\n\n***   Makefile Dependancies   ***\n");
A      559       559    1          while (t)   {
A      560       560    2             if ( *(t->tg_text) != '.'  || ( t->tg_depend &&
A      561       561    2                  (t->tg_depend->dp_num != 0 || t->tg_depend->dp_tgdepend))) {
A      562       562    3                d = t->tg_depend;
A      563       563    3                fw = (t->tg_len < 14) ? 15 : t->tg_len + 2;
A      564       564    3                printf("\n%-*s   : ", fw, t->tg_text, state_names[1+t->tg_status]);
A      565       565    3                w_printed = LS_width;
A      566       566    3                while (d)   {
A      567       567    4                   int i, nd = d->dp_num;
A      568       568    4                   for ( i=0; i<nd ; )  {
A      569       569    5                      struct sym_target *tg = d->dp_list[i++];
A      570       570    5                      fw = 5 * ((tg->tg_len + 5)/5);
A      571       571    5                      w_printed += fw;
A      572       572    5                      if (w_printed >= LS_width)
A      573       573    5                         printf("\\\n          "), w_printed = fw + 10;
A      574       574    5                      printf("%-*s", fw, tg->tg_text);
A      575       575    5                      }
A      576       576    4                   d = d->dp_tgdepend;
A      577       577    4                   }
A      578       578    3                }
A      579       579    2             t = t->tg_list;
A      580       580    2             }
A      581       581    1          printf("\n");
A      582       582    1        }
A      583       583
A---  Include file information  ---
A
rCC.C03    File=MAKE_SIc02.:XSI                                                      Thu Nov 20 1997  Page=17 
A   setjmp:h.:LIBRARY. is referenced
A   stdlib:h.:LIBRARY. is referenced
A   stdio:h.:LIBRARY. is referenced
A   errno:h.:LIBRARY. is referenced
A   MAKE_Cc13.:XSI. is referenced
A   MAKE_Cc14.:XSI. is referenced
A   xu_cp6_c:h.:LIBRARY. is referenced
A   xu_macro_c:h.:LIBRARY. is referenced
A   xu_subs_c:h.:LIBRARY. is referenced
C
ANo diagnostics were issued in the file MAKE_SIc02.:XSI
