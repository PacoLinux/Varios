/*M* WASP - Program to produce various continuous CRT screen displays */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*D* WASP - Main program.  Process CCBUF options, call display routines,
             handle looping and wait interval. */
WASP: PROC MAIN;
 
%SUB GLOBAL = STATIC SYMDEF;
%INCLUDE WASP_C61;
%INCLUDE WASP_C62;
 
DCL WASP_CMD UBIN SYMREF;
DCL WASP_STATE ENTRY;
DCL WASP_STATE_INIT ENTRY;
DCL WASP_DI ENTRY;
DCL WASP_TYPE ENTRY;
DCL WASP_TYPE_INIT ENTRY;
DCL WASP_CACHE ENTRY;
DCL WASP_CACHE_INIT ENTRY;
DCL WASP_MEM ENTRY;
 
DCL WASP_BREAK ENTRY ASYNC;
 
DCL X$PARSE ENTRY(1) ALTRET;
DCL M$DO DCB;
%FPT_PRIV( PRIV="%(PR_SPCLMM#|PR_PM#)", AUTH=YES);
%FPT_INT(UENTRY=WASP_BREAK);
DCL N SBIN;
DCL TEMP SBIN;
DCL I_PROMPT CHAR(1) CONSTANT INIT('!');
 
START:
   EXITING = '0'B;
   FIRST_PASS = '1'B;
   DISP_SELECT = %STATE#;
   BREAK_COUNT = 0;
   INTS_SINCE_BREAK = 0;
 
   TEMP=B$JIT.CCARS; /* Parse options in CCBUFF */
   CALL XUR$INIT(XUR_INIT);
   CALL XUR$GETCMD(WASP_CMD,CMD$,VECTOR(I_PROMPT),B$JIT.CCBUF,TEMP)
     ALTRET(CMD_ERR);
 
   DO N= 0 TO OUT$BLK.NSUBLKS-1; /* Make sense of options */
      IF OUT$BLK.SUBLK$(N)->OUT$BLK.CODE = %INTERVAL#
      THEN CALL CHARBIN(FPT_WAIT.V.UNITS#,
        OUT$BLK.SUBLK$(N)->OUT$SYM.TEXT);
      ELSE DISP_SELECT = OUT$BLK.SUBLK$(N)->OUT$BLK.CODE;
   END;
 
   CALL M$SPRIV(FPT_PRIV); /* When altreturn, bomb */
 
   CALL VINIT; /* Initialize display routines */
   CALL VCLEAR;
   CALL M$INT(FPT_INT);
 
   DO CASE(DISP_SELECT);
 
   CASE(%STATE#);
      CALL WASP_STATE_INIT;
 
   CASE(%TYPE#);
      CALL WASP_TYPE_INIT;
 
   CASE(%CACHE#);
      CALL WASP_CACHE_INIT;
 
   END /* CASE */;
 
   DO WHILE( NOT EXITING);
      DO CASE(DISP_SELECT);
 
      CASE(%STATE#);
         CALL VWINDOW( 0, 0, 79, 23 );
         CALL WASP_STATE;
         CALL VWINDOW( 60, 0, 79, 23 );
         CALL WASP_DI;
 
      CASE(%TYPE#);
         CALL VWINDOW( 0, 0, 79, 23 );
         CALL WASP_TYPE;
 
      CASE(%DI#);
         CALL VWINDOW( 0, 0, 79, 23 );
         CALL WASP_DI;
         EXITING = BREAK_COUNT > 0;
 
      CASE(%CACHE#);
         CALL VWINDOW( 0, 0, 79, 23 );
         CALL WASP_CACHE;
         CALL VWINDOW( 30, 19, 79, 23 );
         CALL WASP_DI;
 
      CASE(%MEM#);
         CALL VWINDOW( 0, 0, 79, 23 );
         CALL WASP_MEM;
         CALL VWINDOW( 60, 19, 79, 23 );
         CALL WASP_DI;
 
      END /* CASE */;
 
      IF NOT EXITING THEN DO;
         CALL VUPDATE;
         INTS_SINCE_BREAK = INTS_SINCE_BREAK + 1;
         FIRST_PASS = '0'B;
         CALL M$WAIT(FPT_WAIT);
      END;
   END;
 
   CALL CRT(2);
   CALL CRTFLUSH;
 
     RETURN;
 
CMD_ERR:
     IF P_PCB.HI_CHAR > 0
     THEN CALL XUR$ERRPTR(P_PCB.HI_CHAR, DCBNUM(M$DO));
     CALL XUR$ERRMSG(CMD$, , DCBNUM(M$DO));
     P_PCB.NXT = '1'B;
   CALL X$PARSE(P_PCB);
   RETURN;
END WASP;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*D* WASP_DI - show M$DISPLAY info.  Used when the DI option is selected,
                also superimposed on some other displays */
WASP_DI: PROC;
 
%SUB GLOBAL=SYMREF;
%INCLUDE WASP_C61;
 
%FPT_DISPLAY (FPTN=FPT_DISPLAY,
 STCLASS=CONSTANT,
 RESULTS=VLR_DISPLAY);
%VLR_DISPLAY (FPTN=VLR_DISPLAY,
 STCLASS=STATIC);
 
DCL DI_FMT CHAR(0) STATIC INIT(
'%..6.4U%/%D Users, ETMF = %D%/90%% resp < %D ms%/%D Batch, %D Ghost%/%D Online, %D TP%S');
 
   CALL M$DISPLAY(FPT_DISPLAY);
   CALL X$WRITE(F_FDS, VECTOR(DI_FMT), FPT_DISPLAY.RESULTS_);
 
END WASP_DI;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*D* WASP_BREAK - get control on terminal break; count it and return */
WASP_BREAK:PROC ASYNC;
%SUB GLOBAL = SYMREF;
%INCLUDE WASP_C61;
%FPT_TRMPRG(RSTBRK=YES);
 
   CALL M$TRMPRG(FPT_TRMPRG);
   BREAK_COUNT = BREAK_COUNT + 1;
   INTS_SINCE_BREAK = 0;
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*D* GETSTATS - Allocate a data segment and fill it with good stuff */
GETSTATS:PROC;
 
%FPT_GDS(FPTN=GET_STATSEG,
 STCLASS=CONSTANT,
 RESULTS=STATSEG_,
 SEGSIZE=4096);
%FPT_GDS(FPTN=EXPAND_STATSEG,
 STCLASS=CONSTANT,
 RESULTS=STATSEG_,
 SEGSIZE=256);
 
%FPT_GETPM(FPTN=GET_STATS,
 STCLASS=STATIC);
 
%SUB GLOBAL = SYMREF;
%INCLUDE WASP_C61;
 
   IF STATSEG_.PTR$ = ADDR(NIL)
   THEN CALL M$GDS(GET_STATSEG);
 
AGAIN:
   GET_STATS.RESULTS_ = STATSEG_;
   CALL M$GETPM(GET_STATS)
   WHENALTRETURN DO;
      IF B$TCB.ALT$->B$ALT.ERR.ERR# = %E$LD THEN DO;
         CALL M$GDS(EXPAND_STATSEG);
         GOTO AGAIN;
      END;
   END;
 
   RETURN;
END;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*D* GETENT - Select a piece of good stuff to look at. */
GETENT:PROC(ENT, PTR$);
 
DCL ENT UBIN;
DCL PTR$ PTR;
 
%SUB GLOBAL = SYMREF;
%INCLUDE WASP_C61;
 
   PTR$ = STATSEG_.PTR$;
 
   DO WHILE( ENT ~= PTR$->BLOCK.IDENT);
      PTR$ = PINCRW( ADDR(PTR$->BLOCK.DATA),
        PTR$->BLOCK.WORDS * PTR$->BLOCK.ENTRIES);
   END;
 
   PTR$ = ADDR(PTR$->BLOCK.DATA);
   RETURN;
END;
