/*M* WRITEMSGE                                */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X*  DMC,DFC   */
/**********************************************************************/
/*F*   NAME:   WRITEMSGE
       PURPOSE: To output a specified message contained in the error
               message file.
       DESCRIPTION: WRITEMSGE reads the error message file to obtain the
               specified message and outputs it to a user.
*/
/*D*   NAME:   WRITEMSGE
       CALL:   CALL WRITEMSGE(code,dcb#,err_fld1,err_fld2,err_fld3)
       INTERFACE: M$ERRMSG
       INPUT:  CODE - Code containing MID,MON,ERROR#, and SEV of message
               to be output.
               ERR_DCB - dcb# of dcb on which error occured and whose
               information is to be substituted in the message.
               ERR_FLD1 - textc field to be substituted for %U1 in message
               ERR_FLD2 - textc field to be substituted for %U2 in message
               ERR_FLD3 - textc field to be substituted for %U3 in message
       OUTPUT: Specified message to device assigned to M$DO if in
               batch mode. Otherwise, message is output to the the device
               assigned to M$UC.
       DESCRIPTION: The specified message contained in the error message
               file is obtained and output to the user via the M$ERRMSG
               PMME. If a message is not located, only the code is output
               to the user.
*/
/**********************************************************************/
WRITEMSGE: PROC (ERR_CODE,ERR_DCB,ERR_FLD1,ERR_FLD2,ERR_FLD3);
           %INCLUDE CP_6;
           %INCLUDE CP_6_SUBS;
           %INCLUDE B$JIT;
           %INCLUDE NK_VFC_C;
           %INCLUDE CP_SUBS_C;
           %INCLUDE CP_MACROS_C;
           %INCLUDE B_MACROS_C;
           %INCLUDE XU_MACRO_C;
/***** fpts *****/
%FPT_OPEN (FPTN=FPT_OPEN,STCLASS=STATIC);
%FPT_ERRMSG (FPTN=FPT_ERRMSG,STCLASS=STATIC,INCLCODE=NO);
%VLR_ERRMSG(FPTN=ERRMSG_RESULTS,STCLASS=STATIC);
%F$DCB;
/***** parameters *****/
%ERR_CODE(NAME=ERR_CODE,STCLASS=" ");
%ERR_CODE (NAME=ERRCODE,STCLASS=AUTO);
%TEXTC(NAME=ERR_FLD1,STCLASS=" ");
%TEXTC(NAME=ERR_FLD2,STCLASS=" ");
%TEXTC(NAME=ERR_FLD3,STCLASS=" ");
DCL ERR_BUFF CHAR(120);
DCL ERR_DCB UBIN WORD;
DCL M$DO DCB;
DCL B$JIT$ PTR SYMREF;
/***** local variables *****/
DCL DCB# UBIN WORD AUTO;
/*
     ***** Munge ERR_CODE ...
*/
  ERRCODE = ERR_CODE;
  ERRCODE.SEV = 0;
/*
     ***** Setup FPT_ERRMSG ...
*/
  FPT_ERRMSG.V.VFC# = %VFC_TRANSITION1;
  FPT_ERRMSG.CODE_ = VECTOR(ERRCODE);
  FPT_ERRMSG.BUF_=VECTOR(ERR_BUFF);
  FPT_ERRMSG.RESULTS_=VECTOR(ERRMSG_RESULTS);
  IF (ADDR(ERR_FLD1)~=ADDR(NIL))
     THEN
        FPT_ERRMSG.FIELD1_=VECTOR(ERR_FLD1);
  IF (ADDR(ERR_FLD2)~=ADDR(NIL))
     THEN
        FPT_ERRMSG.FIELD2_=VECTOR(ERR_FLD2);
  IF (ADDR(ERR_FLD3)~=ADDR(NIL))
     THEN
        FPT_ERRMSG.FIELD3_=VECTOR(ERR_FLD3);
  IF (ADDR(ERR_DCB)~=ADDR(NIL))
     THEN
        FPT_ERRMSG.V.DCB#=ERR_DCB;
 
  FPT_ERRMSG.V.OUTDCB1# = %M$UC#;
  IF DCBADDR(%M$DO#)->F$DCB.FCD# = %NO#
     THEN   /* Must open M$DO */
        DO;
           FPT_OPEN.V.DCB# = %M$DO#;
           FPT_OPEN.V.INITZ.REASSIGN# = %YES#;
           FPT_OPEN.V.DVFC# = %VFC_TRANSITION1;
           CALL M$OPEN (FPT_OPEN) ALTRET(USE_M$UC);
        END;
  FPT_ERRMSG.V.OUTDCB2# = %M$DO#;
 
  IF %NO#
     THEN
        DO;
USE_M$UC:
           FPT_ERRMSG.V.OUTDCB2# = 0;
        END;
  CALL M$ERRMSG(FPT_ERRMSG) ALTRET(E_ERRMSG);
E_ERRMSG:
  RETURN;
 
END WRITEMSGE;
