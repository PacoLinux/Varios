/*M* MPCDUMP - Dump MPC main memory */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
MPCDUMP: PROC MAIN;
/**/
/*X* DMR */
DCL M$SI DCB;
DCL M$LO DCB;
DCL M$DO DCB;
DCL M$IOQDCB DCB;
/**/
%INCLUDE B_SEGIDS_C;
%INCLUDE B$JIT;
%INCLUDE CP_6;
%INCLUDE N_FC_C;
%INCLUDE NI_DATA_C;
%INCLUDE NI$TABLES;
%INCLUDE XU_FORMAT_C;
%INCLUDE XUF_ENTRY;
%INCLUDE *MPCDUMP_R;
/**/
DCL BRKRTN ENTRY ASYNC;
/**/
DCL B$JIT$ PTR SYMREF;
/**/
DCL TC_PROC ENTRY(3) ALTRET;
DCL UC_PROC ENTRY(3) ALTRET;
DCL DC_PROC ENTRY(3) ALTRET;
DCL DCTX SBIN;
DCL IOQBUF CHAR(32);
DCL IOQBUFB(0:31) REDEF IOQBUF BIT(9);
DCL IOQBUFF CHAR(36);
DCL LEN$ PTR;
DCL IOQBF CHAR(LEN) BASED(LEN$);
DCL LEN UBIN;
/**/
DCL OUTBUF CHAR(80);
DCL TBUF CHAR(80);
DCL TARS SBIN;
DCL TIN SBIN;
DCL 1 WERD,
      2 L UBIN BYTE UNAL,
      2 C CHAR(40);
DCL WERD$ PTR;
DCL 1 WRD BASED(WERD$),
      2 L UBIN BYTE UNAL,
      2 C CHAR(WERD.L);
DCL NM CHAR(20);
DCL FNDFLG BIT(1);
DCL MPC$ PTR;
DCL 1 MPC_NM(0:32) BASED (MPC$) ALIGNED,
      2 CODE UBIN WORD UNAL,
      2 TEXT CHAR(33) UNAL;
DCL N UBIN;
DCL IOQBUFF$ PTR;
DCL 1 IOQ_TEMP BASED(IOQBUFF$),
      2 N UBIN WORD;
DCL DCT$ PTR;
DCL QWIT BIT(72) STATIC SYMDEF ALIGNED;
DCL I SBIN;
DCL J SBIN;
DCL MSG_CNT UBIN;
DCL START UBIN;
DCL STOP UBIN;
DCL MSGBUF CHAR(33);
DCL MPC_IS UBIN;
DCL TTBUF$ PTR;
DCL TTBUF CHAR(2);
DCL 1 TTBF(0:1) BASED(TTBUF$),
      2 * BIT(1),
      2 B BIT(8);
DCL BUFTT$ PTR;
DCL BUFTT(0:1) BIT(8);
DCL BFTT BASED(BUFTT$) UBIN(16);
DCL 1 TC_BUF STATIC,
      2 AD UBIN WORD UNAL,
      2 ENTY UBIN(16) UNAL,
      2 TYPE CHAR(9) UNAL,
      2 T BIT(1) UNAL,
      2 P BIT(1) UNAL,
      2 L BIT(1) UNAL,
      2 DEV# BIT(6) UNAL,
      2 OPCODE CHAR(6) UNAL,
      2 STAT CHAR(41) UNAL;
DCL 1 UC_BUF STATIC,
      2 AD UBIN WORD UNAL,
      2 ENTY UBIN(16) UNAL,
      2 TYPE CHAR(10) UNAL,
      2 L BIT(1) UNAL,
      2 P BIT(1) UNAL,
      2 DEV# BIT(4) UNAL,
      2 CH BIT(3) UNAL,
      2 OP_CD CHAR(5) UNAL,
      2 LOC BIT(8) UNAL,
      2 OPI BIT(4) UNAL,
      2 OPIC BIT(4) UNAL,
      2 STAT CHAR(28) UNAL;
DCL 1 DC_BUF STATIC,
      2 AD UBIN WORD UNAL,
      2 ENTY UBIN(16) UNAL,
      2 TYPE CHAR(8) UNAL,
      2 B BIT(1) UNAL,
      2 DEV# BIT(6) UNAL,
      2 CHAN BIT(5) UNAL,
      2 OP_CD CHAR(5) UNAL,
      2 P BIT(2) UNAL,
      2 STAT CHAR(40) UNAL;
DCL II UBIN BYTE;
DCL N$DCT$$ PTR;
DCL N$DCT$(0:0) PTR BASED(N$DCT$$);
DCL M$LO$ PTR;
/**/
%NI$DCT (NAME=DCT,STCLASS="BASED(DCT$)");
/**/
%FPT_MONINFO (MONPTRS=VLR_MONPTRS);
%VLR_MONPTRS;
%FPT_SAD (MONSID=%TIGRSID,USERSID=%SPCL1SID);
%FPT_FID (ACCT=VLP_ACCT,
          ASN="FPT_OPENLO.V.ASN#",
          NAME=VLP_NAME,
          PASS=VLP_PASS,
          RES="FPT_OPENLO.V.RES#");
%FPT_OPEN (FPTN=FPT_OPENLO,DCB=M$LO,NAME=VLP_NAME,ACCT=VLP_ACCT,
           PASS=VLP_PASS,FUN=CREATE,EXIST=NEWFILE);
%VLP_NAME;
%VLP_ACCT;
%VLP_PASS;
%FPT_CLOSE (FPTN=FPT_CLOSELO,DCB=M$LO,DISP=SAVE);
%FPT_INT (UENTRY=BRKRTN);
%FPT_PROMPT;
%FPT_READ (FPTN=FPT_READSI,DCB=M$SI);
%FPT_IOQ (FC=%N_RDASC,DCB=M$IOQDCB,WAIT=YES,BPMIR=YES) ;
%F$DCB;
%FPT_PRIV (PRIV="%(PR_IOQ#|PR_SPCLMM#)",AUTH=YES);
/**/
%F_FDS (NAME=FDS,DCB=M$DO);
/**/
%VLP_NAME (FPTN=DEVNAME,NAME="'MPC name: '");
%VLP_NAME (FPTN=FID,NAME="'Output on: '");
DCL BAD_NAME_FMT CHAR(0) CONSTANT INIT('%T not found!');
DCL BADFID CHAR(0) CONSTANT INIT('%T does not seem to be a legal fid');
DCL HITBREAK CHAR(0) CONSTANT INIT('Hit BREAK to exit');
DCL DMPFMT CHAR(0) CONSTANT INIT('%4ZH%2P %N( %4.18ZY%)');
DCL WRT_HDR CHAR(0) CONSTANT INIT('%/      %33A %/');
DCL NOTPRIVFMT CHAR(0) CONSTANT INIT('You need TND privilege or IOQ and SPCLMM privileges for this program');
DCL NOTMPCFMT CHAR(0) CONSTANT INIT('%T is not an MPC');
DCL BAD_ENTRY CHAR(0) CONSTANT INIT('Current entry is too small or too large');
DCL TC_HDR CHAR(0) CONSTANT INIT(
'%/TRACE ENTRY INTERPRETATIONS %2/ADDR ENTY    TYPE   T-P-L DEV# OPCODE           STATUS %/');
DCL TC_OUT CHAR(0) CONSTANT INIT(
'%4.36ZH %4.16ZH %9A %1.1D-%1.1D-%1.1D  %2.6D  %6A %41A');
DCL UC_HDR CHAR(0) CONSTANT INIT(
'%/TRACE ENTRY INTERPRETATION %2/ADDR ENTY  TYPE      L-P DEV CH OP_CD LOC  OPI OPIC   MAJ STAT / ISC %/');
DCL DC_HDR CHAR(0) CONSTANT INIT(
'%/TRACE ENTRY INTERPRETATION %2/ADDR ENTY   TYPE   B DEV# CHAN OP_CD P#      STAT / CC / SIT %/');
DCL UC_OUT CHAR(0) CONSTANT INIT(
'%4.36ZH %4.16ZH %10A %1.1D-%1.1D  %2.4D  %1.3D %5A  %2.8H %4.4B %4.4B %28A');
DCL DC_OUT CHAR(0) CONSTANT INIT(
'%4.36ZH %4.16ZH %8A %1.1B   %2.6D   %2.5D %5A %2.2B %40A');
DCL HEADER CHAR(0) CONSTANT INIT('MPC DUMP FOR %20A%/');
%SUB NEVER="WHILE('0'B)";
%SUB FOREVER="WHILE('1'B)";
%EQU TRUE = '1'B;
%EQU FALSE = '0'B;
%EJECT;
        LEN$ = ADDR(IOQBUFF);
        TTBUF$ = ADDR(TTBUF);
        BUFTT$ = ADDR(BUFTT);
        FDS.BUF_=VECTOR(OUTBUF);
        IF (B$JIT.PRIV.ACTIVE & FPT_PRIV.V.PRIV#) = FPT_PRIV.V.PRIV# THEN DO;
           IF (B$JIT.PRIV.AUTH & FPT_PRIV.V.PRIV#) ~= FPT_PRIV.V.PRIV#
             AND NOT (B$JIT.PRIV.AUTH & %PR_TND#) THEN DO;
NOTPRIV:      CALL X$WRITE(FDS,VECTOR(NOTPRIVFMT));
              CALL M$XXX;
              END;
           END;
        ELSE DO;
           CALL M$SPRIV(FPT_PRIV) ALTRET(NOTPRIV);
           END;
        REMEMBER QUIT IN QWIT;
        FNDFLG = %FALSE;
        FPT_READSI.BUF_=VECTOR(TBUF);
        CALL CLRINPUT;
        WERD$=ADDR(WERD);
GETNAME: CALL GETWERD(DEVNAME,' ');
        CALL M$MONINFO(FPT_MONINFO);
        CALL M$SAD(FPT_SAD);
        CALL CVTPTR(VLR_MONPTRS.N$DCT$$,N$DCT$$) ALTRET(ABORT);
        I=1;
        DCTX=0;
        DO WHILE(DCTX=0);
           CALL CVTPTR(N$DCT$(I),DCT$) ALTRET(BAD_NAME);
           IF WRD.C=SUBSTR(DCT.DEVNM,0,4) THEN DCTX=I;
           I=I+1;
           DO NEVER;
BAD_NAME:     CALL X$WRITE(FDS,VECTOR(BAD_NAME_FMT),VECTOR(WRD));
              CALL CLRINPUT;
              GOTO GETNAME;
              END;
           END;
        IF DCT.TYPE~=%DV_MPC THEN DO;
           CALL X$WRITE(FDS,VECTOR(NOTMPCFMT),VECTOR(WRD));
           GOTO GETNAME;
           END;
        DO I = 0 TO 2;
           IF SUBSTR(WRD.C,0,2) = MPC_TYPE.DEV(I)
           THEN DO;
              MSG_CNT = MPC_TYPE.CNT(I);
              MPC$ = MPC_TYPE.SUB$(I);
              FNDFLG = %TRUE;
              MPC_IS = I;
              NM = WERD.C;
              END;
           END;
        IF NOT (FNDFLG)
        THEN GOTO BAD_NAME;
/**/
/**/
GETFID: CALL GETWERD(FID,' ');
        IF WERD.L=0 THEN DO;
           WERD.L=2;
           WERD.C='ME';
           END;
        FPT_FID.TEXTFID_=VECTOR(WRD.C);
        CALL M$FID(FPT_FID) ALTRET(BAD_FID);
        CALL M$OPEN(FPT_OPENLO) ALTRET(BAD_FID);
        DO NEVER;
BAD_FID:   CALL X$WRITE(FDS,VECTOR(BADFID),VECTOR(WRD));
           CALL CLRINPUT;
           GOTO GETFID;
           END;
/**/
        CALL M$INT(FPT_INT);
        CALL X$WRITE(FDS,VECTOR(HITBREAK));
        FDS.DCB#=DCBNUM(M$LO);
        M$LO$ = DCBADDR(DCBNUM(M$LO));
        FDS.BUF_.BOUND = M$LO$ ->F$DCB.WIDTH#;
        IF (FDS.BUF_.BOUND = 0 OR FDS.BUF_.BOUND > 132)
        THEN FDS.BUF_.BOUND = 132;
        CALL X$WRITE (FDS,VECTOR(HEADER),VECTOR(NM));
        FPT_IOQ.BUF_=VECTOR(IOQBUF);
        FPT_IOQ.V.DLA.DCTX#=DCTX;
        IOQBUFF$ = ADDR(IOQBUFF);
        DO I = 0 TO MSG_CNT;
           START = MPC_NM.CODE(I);
           IF I = MSG_CNT
           THEN STOP = 4095;
           ELSE STOP = MPC_NM.CODE(I+1) - 1;
           MSGBUF = MPC_NM.TEXT(I);
           CALL X$WRITE(FDS,VECTOR(WRT_HDR),VECTOR(MSGBUF));
           DO J = START TO STOP BY 16;
              IF J+16 > STOP+1
              THEN N = MOD(STOP-START,16) + 1;
              ELSE N = 16;
 
              FPT_IOQ.V.DLA.DRELADDR#=J;
              IOQBUFB='0'B;
              CALL M$IOQ(FPT_IOQ) ALTRET(QUIT);
              LEN = N * 2 + 4;
              CALL CONCAT(IOQBUFF,'    ',IOQBUF);
              ADDR(IOQBUFF)->IOQ_TEMP.N = N;
              CALL X$WRITE(FDS,VECTOR(DMPFMT),VECTOR(J),VECTOR(IOQBF));
              END;
           END;
        DO CASE (MPC_IS);
         CASE (0);
           J=340;
           CALL X$WRITE(FDS,VECTOR(TC_HDR));
         CASE (1);
           J=175;
           CALL X$WRITE(FDS,VECTOR(UC_HDR));
         CASE (2);
           J=240;
           CALL X$WRITE(FDS,VECTOR(DC_HDR));
         END;                           /* OF CASE STMT     */
        FPT_IOQ.BUF_ = VECTOR(TTBUF);
        FPT_IOQ.V.DLA.DRELADDR# = J;
        TTBF = '0'B;
        CALL M$IOQ(FPT_IOQ) ALTRET(QUIT);
        BUFTT(0) = TTBF.B(0);
        BUFTT(1) = TTBF.B(1);
        J = BFTT;
        IF (J < 3584 OR J > 4095)
        THEN DO;
           CALL X$WRITE(FDS,VECTOR(BAD_ENTRY));
           CALL M$XXX;
           END;
        DO II = 0 TO 1;
           IF II = 0
           THEN DO;
              START = J;
              IF MPC_IS = 1
              THEN STOP = 3840;
              ELSE STOP = 3584;
              END;
           ELSE DO;
              START = 4095;
              STOP = J + 1;
              END;
           DO I = START DOWNTO STOP ;
              FPT_IOQ.V.DLA.DRELADDR# = I;
              TTBF = '0'B;
              CALL M$IOQ(FPT_IOQ) ALTRET(QUIT);
              BUFTT(0) = TTBF.B(0);
              BUFTT(1) = TTBF.B(1);
              DO CASE (MPC_IS);
               CASE (0);
                 TC_BUF.AD = 0;
                 TC_BUF.ENTY = 0;
                 TC_BUF.TYPE = ' ';
                 TC_BUF.T = '0'B;
                 TC_BUF.P = '0'B;
                 TC_BUF.L = '0'B;
                 TC_BUF.DEV# = '0'B;
                 TC_BUF.OPCODE = ' ';
                 TC_BUF.STAT = ' ';
                 CALL TC_PROC(BFTT,I,TC_BUF) ALTRET(NO_OUT);
                 CALL X$WRITE(FDS,VECTOR(TC_OUT),VECTOR(TC_BUF));
               CASE (1);
                 UC_BUF.AD = 0;
                 UC_BUF.ENTY = 0;
                 UC_BUF.TYPE = ' ';
                 UC_BUF.L = '0'B;
                 UC_BUF.P = '0'B;
                 UC_BUF.DEV# = '0'B;
                 UC_BUF.CH = '0'B;
                 UC_BUF.OP_CD = ' ';
                 UC_BUF.LOC = '0'B;
                 UC_BUF.OPI = '0'B;
                 UC_BUF.OPIC = '0'B;
                 UC_BUF.STAT = ' ';
                 CALL UC_PROC(BFTT,I,UC_BUF) ALTRET(NO_OUT);
                 CALL X$WRITE(FDS,VECTOR(UC_OUT),VECTOR(UC_BUF));
               CASE (2);
                 DC_BUF.AD = 0;
                 DC_BUF.ENTY = 0;
                 DC_BUF.TYPE = ' ';
                 DC_BUF.B = '0'B;
                 DC_BUF.DEV# = '0'B;
                 DC_BUF.CHAN = '0'B;
                 DC_BUF.OP_CD = ' ';
                 DC_BUF.P = '0'B;
                 DC_BUF.STAT = ' ';
                 CALL DC_PROC(BFTT,I,DC_BUF) ALTRET(NO_OUT);
                 CALL X$WRITE(FDS,VECTOR(DC_OUT),VECTOR(DC_BUF));
               END;
NO_OUT:
              END;
           END;
QUIT:   CALL M$CLOSE(FPT_CLOSELO);
        RETURN;
ABORT:  CALL M$XXX;
%EJECT;
CLRINPUT: PROC;
        TIN=0;
        TARS=-1;
        RETURN;
END CLRINPUT;
/**/
GETWERD: PROC(PROMPT,DELIM);
DCL 1 PROMPT CALIGNED,
      2 L UBIN BYTE UNAL,
      2 C CHAR(PROMPT.L);
DCL DELIM CHAR(1);
DCL I SBIN;
/**/
        IF TIN>=TARS THEN DO;
           FPT_PROMPT.PROMPT_=VECTOR(PROMPT.C);
           CALL M$PROMPT(FPT_PROMPT);
           CALL M$READ(FPT_READSI) ALTRET(BAD_READ);
           TIN=0;
           TARS=DCBADDR(DCBNUM(M$SI))->F$DCB.ARS#;
           IF TARS=0 THEN GOTO BAD_READ;
           END;
        DO WHILE(SUBSTR(TBUF,TIN,1)=' ');
           TIN=TIN+1;
           IF TIN>=TARS THEN CALL INSERT(TBUF,TIN,1,'~');
           END;
        CALL INDEX(I,DELIM,SUBSTR(TBUF,TIN));
        IF TIN+I>TARS THEN I=TARS-TIN;
        WERD.L=I;
        WERD.C=SUBSTR(TBUF,TIN,I);
        TIN=TIN+I;
        RETURN;
BAD_READ:
        CALL CLRINPUT;
        WERD.L=0;
        WERD.C=' ';
        RETURN;
END GETWERD;
%EJECT;
CVTPTR: PROC(IP$,OP$) ALTRET;
DCL 1 IP$ ALIGNED,
      2 OFFSET UBIN(24) UNAL,
      2 SID BIT(12) UNAL;
DCL 1 OP$ ALIGNED,
      2 OFFSET UBIN(24) UNAL,
      2 SID BIT(12) UNAL;
        IF IP$.SID~=%TIGRSID THEN ALTRETURN;
        OP$=IP$;
        OP$.SID=%SPCL1SID;
        RETURN;
END CVTPTR;
/**/
END MPCDUMP;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
TC_PROC: PROC(ENTY,AD,TC_BUF) ALTRET;
/**/
DCL ENTY UBIN(16);
DCL AD UBIN;
DCL 1 TC_BUF,
      2 AD UBIN UNAL,
      2 ENTY UBIN(16) UNAL,
      2 TYPE CHAR(9) UNAL,
      2 T BIT(1) UNAL,
      2 P BIT(1) UNAL,
      2 L BIT(1) UNAL,
      2 DEV# BIT(6) UNAL,
      2 OPCODE CHAR(6) UNAL,
      2 STAT CHAR(41) UNAL;
/**/
%INCLUDE CP_6;
%INCLUDE *MPCDUMP_R;
/**/
DCL MPC_STAT ENTRY(5);
/**/
DCL CODE UBIN(16) UNAL;
DCL CODE1(0:15) REDEF CODE BIT(1);
DCL CODE2(0:7) REDEF CODE BIT(2);
DCL CODE$ PTR;
DCL CODE4(0:3) BASED(CODE$) UBIN(4);
DCL TEMP6(0:5) UNAL BIT(1);
DCL CODE6 REDEF TEMP6 BIT(6);
DCL TEMP7(0:6) UNAL BIT(1);
DCL CODE7 REDEF TEMP7 BIT(7);
DCL TEMP9(0:8) UNAL BIT(1);
DCL CODE9 REDEF TEMP9 BIT(9);
DCL TEMP3(0:2) UNAL BIT(1);
DCL TEMP3$ PTR;
DCL CODE_N BASED(TEMP3$) UBIN(3);
DCL I UBIN;
DCL J UBIN;
DCL MAJBUF CHAR(20);
DCL SUBBUF CHAR(20);
/**/
%EJECT;
        TEMP3$ = ADDR(TEMP3);
        CODE$ = ADDR(CODE);
        CODE = ENTY;
        IF CODE = 0
        THEN ALTRETURN;
        TC_BUF.AD = AD;
        TC_BUF.ENTY = ENTY;
        TEMP3(0) = CODE1(0);
        TEMP3(1) = CODE1(8);
        TEMP3(2) = CODE1(9);
        DO CASE (CODE_N);
         CASE (0);
           TC_BUF.TYPE = 'IDCW';
           CALL TPL;
           CALL SIX_BIT(10);
           TC_BUF.DEV# = CODE6;
         CASE (1);
           TC_BUF.TYPE = 'COMMANDS';
           CALL SIX_BIT(2);
           DO I = 0 TO 51;
              IF OP_CD.CODE(I) = CODE6
              THEN DO;
                 TC_BUF.OPCODE = OP_CD.MN(I);
                 GOTO OP_CD_FND;
                 END;
              END;
OP_CD_FND:
           CALL SIX_BIT(10);
           TC_BUF.DEV# = CODE6;
         CASE (2);
           TC_BUF.TYPE = 'STATUS';
           CALL TPL;
           CALL SIX_BIT(10);
           CALL MPC_STAT (CODE4(1),CODE6,0,MAJBUF,SUBBUF);
           CALL CONCAT(TC_BUF.STAT,'MAJ: ',SUBSTR(MAJBUF,0,15),
             '  SUB: ',SUBSTR(SUBBUF,0,15));
         CASE (3);
           TC_BUF.TYPE = 'HAND STAT';
           J = 0;
           DO I = 1 TO 7;
              TEMP7(J) = CODE1(I);
              J = J + 1;
              END;
           CALL SIX_BIT(10);
           TC_BUF.DEV# = CODE6;
         CASE (6);
           TC_BUF.TYPE = 'IIW STAT';
           CALL TPL;
           TEMP9(0) = '0'B;
           TEMP9(1) = CODE1(6);
           TEMP9(2) = CODE1(7);
           J = 3;
           DO I = 10 TO 15;
              TEMP9(J) = CODE1(I);
              J = J + 1;
              END;
           IF (TEMP9(1) = '1'B AND TEMP9(2) = '1'B)
           THEN DO;
              TC_BUF.STAT = 'IIW: LOGICAL CHAN IS MASKED';
              GOTO STAT_FND;
              END;
           DO I = 0 TO 10;
              IF CODE9 = IIW.CODE(I)
              THEN DO;
                 TC_BUF.STAT = IIW.TXT(I);
                 GOTO STAT_FND;
                 END;
              END;
 
         CASE (7);
           TC_BUF.TYPE = 'CONT STAT';
           CALL TPL;
         CASE (ELSE);
           ALTRETURN;
         END;                           /*  OF DO CASE STMT   */
STAT_FND:
        RETURN;
%EJECT;
TPL:    PROC;
/**/
        IF CODE1(1)
        THEN TC_BUF.T = '1'B;
        IF CODE1(2)
        THEN TC_BUF.P = '1'B;
        IF CODE1(3)
        THEN TC_BUF.L = '1'B;
        RETURN;
END TPL;
/**/
SIX_BIT: PROC(CNT);
/**/
DCL CNT UBIN;
DCL I UBIN;
/**/
        DO I = 0 TO 5;
           TEMP6(I) = CODE1(CNT+I);
           END;
        RETURN;
END SIX_BIT;
/**/
END TC_PROC;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
UC_PROC: PROC(ENTY,AD,UC_BUF) ALTRET;
/**/
DCL ENTY UBIN(16);
DCL AD UBIN;
DCL 1 UC_BUF,
      2 AD UBIN WORD UNAL,
      2 ENTY UBIN(16) UNAL,
      2 TYPE CHAR(10) UNAL,
      2 L BIT(1) UNAL,
      2 P BIT(1) UNAL,
      2 DEV# BIT(4) UNAL,
      2 CH BIT(3) UNAL,
      2 OP_CD CHAR(5) UNAL,
      2 LOC BIT(8) UNAL,
      2 OPI BIT(4) UNAL,
      2 OPIC BIT(4) UNAL,
      2 STAT CHAR(28) UNAL;
/**/
%INCLUDE CP_6;
%INCLUDE *MPCDUMP_R;
/**/
DCL MPC_STAT ENTRY(5);
/**/
DCL CODE UBIN(16) UNAL;
DCL CODE1(0:15) REDEF CODE BIT(1);
DCL CODE2(0:7) REDEF CODE BIT(2);
DCL CODE4(0:3) REDEF CODE BIT(4);
DCL CODE8(0:1) REDEF CODE BIT(8);
DCL TEMP3(0:2) UNAL BIT(1);
DCL CODE3 REDEF TEMP3 BIT(3);
DCL TEMP6(0:5) UNAL BIT(1);
DCL CODE6 REDEF TEMP6 BIT(6);
DCL I UBIN;
DCL J UBIN;
DCL K UBIN;
DCL MAJBUF CHAR(20);
DCL SUBBUF CHAR(20);
/**/
%EJECT;
        CODE = ENTY;
        IF CODE = 0
        THEN ALTRETURN;
        UC_BUF.AD = AD;
        UC_BUF.ENTY = ENTY;
        K = BITBIN(CODE2(0));
        DO CASE (K);
         CASE(0);
           UC_BUF.TYPE = 'COMMAND';
           UC_BUF.DEV# = CODE4(2);
           J = 0;
           DO I = 2 TO 7;
              TEMP6(J) = CODE1(I);
              J = J + 1;
              END;
           DO I = 0 TO 31;
              IF UC_OP_CD.CODE(I) = CODE6
              THEN DO;
                 UC_BUF.OP_CD = UC_OP_CD.MN(I);
                 GOTO UC_FND;
                 END;
              END;
         CASE(1);
           IF CODE1(15)
           THEN UC_BUF.TYPE = 'MPC ERR';
           ELSE DO;
              UC_BUF.TYPE = 'STATUS';
              TEMP6 = '0'B;
              CALL MPC_STAT(BITBIN(CODE4(1)),CODE6,1,MAJBUF,SUBBUF);
              CALL CONCAT(UC_BUF.STAT,'MAJ STAT: ',SUBSTR(MAJBUF,0,18));
              UC_BUF.DEV# = CODE4(2);
              END;
         CASE(2);
           IF CODE1(15)
           THEN UC_BUF.TYPE = 'SPEC INT';
           ELSE UC_BUF.TYPE = 'INTER Qd';
           UC_BUF.L = CODE1(3);
           UC_BUF.P = CODE1(4);
           UC_BUF.DEV# = CODE4(2);
           TEMP3(0) = CODE1(5);
           TEMP3(1) = CODE1(6);
           TEMP3(2) = CODE1(7);
           UC_BUF.CH = CODE3;
         CASE(3);
           IF CODE1(2)
           THEN IF CODE1(7)
              THEN DO;
                 UC_BUF.TYPE = 'OPI DROP';
                 UC_BUF.LOC = CODE8(1);
                 END;
              ELSE DO;
                 UC_BUF.TYPE = 'DEV POW CH';
                 UC_BUF.OPI = CODE4(2);
                 UC_BUF.OPIC = CODE4(3);
                 END;
           ELSE DO;
              UC_BUF.TYPE = 'INTERRUPT';
              UC_BUF.DEV# = CODE4(2);
              DO I = 0 TO 8;
                 IF CODE4(1) = ISC.CODE(I)
                 THEN DO;
                    UC_BUF.STAT = ISC.TXT(I);
                    GOTO UC_FND;
                    END;
                 END;
              END;
         CASE(ELSE);
           ALTRETURN;
         END;                           /*  OF CASE STMT   */
UC_FND:
        RETURN;
END UC_PROC;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
DC_PROC: PROC(ENTY,AD,DC_BUF) ALTRET;
/**/
DCL ENTY UBIN(16);
DCL AD UBIN;
DCL 1 DC_BUF,
      2 AD UBIN WORD UNAL,
      2 ENTY UBIN(16) UNAL,
      2 TYPE CHAR(8) UNAL,
      2 B BIT(1) UNAL,
      2 DEV# BIT(6) UNAL,
      2 CHAN BIT(5) UNAL,
      2 OP_CD CHAR(5) UNAL,
      2 P BIT(2) UNAL,
      2 STAT CHAR(40) UNAL;
/**/
%INCLUDE CP_6;
%INCLUDE *MPCDUMP_R;
/**/
DCL MPC_STAT ENTRY(5);
/**/
DCL CODE UBIN(16) UNAL;
DCL CODE1(0:15) REDEF CODE BIT(1);
DCL CODE2(0:7) REDEF CODE BIT(2);
DCL TEMP4(0:3) UNAL BIT(1);
DCL CODE4 REDEF TEMP4 BIT(4);
DCL TEMP5(0:4) UNAL BIT(1);
DCL CODE5 REDEF TEMP5 BIT(5);
DCL TEMP6(0:5) UNAL BIT(1);
DCL CODE6 REDEF TEMP6 BIT(6);
DCL TEMP7(0:6) UNAL BIT(1);
DCL CODE7 REDEF TEMP7 BIT(7);
DCL I UBIN;
DCL J UBIN;
DCL MAJBUF CHAR(20);
DCL SUBBUF CHAR(20);
/**/
%EJECT;
        CODE = ENTY;
        IF CODE = 0
        THEN ALTRETURN;
        DC_BUF.AD = AD;
        DC_BUF.ENTY = ENTY;
        IF CODE1(0)
        THEN DO;
           DC_BUF.TYPE = 'STATUS';
           CALL FILL_BITS (1,5);
           DC_BUF.CHAN = CODE5;
           CALL FILL_BITS (6,4);
           CALL FILL_BITS (10,6);
           CALL MPC_STAT (BITBIN(CODE4),CODE6,2,MAJBUF,SUBBUF);
           CALL CONCAT (DC_BUF.STAT,'MAJ: ',SUBSTR(MAJBUF,0,14),' SUB: ',SUBSTR(SUBBUF,0,15));
           GOTO DC_FND;
           END;
        J = BITBIN(CODE2(4));
        DO CASE (J);
         CASE(0);
           DC_BUF.TYPE = 'COMMAND';
           DC_BUF.B = CODE1(1);
           CALL FILL_BITS (10,6);
           DC_BUF.DEV# = CODE6;
           CALL FILL_BITS (2,6);
           DO I = 0 TO 29;
              IF DC_OP_CD.CODE(I) = CODE6
              THEN DO;
                 DC_BUF.OP_CD = DC_OP_CD.MN(I);
                 GOTO DC_FND;
                 END;
              END;
         CASE(1);
           DC_BUF.TYPE = 'POLLING';
           DC_BUF.P = CODE2(7);
         CASE(2);
           DC_BUF.TYPE = 'IDCW';
           CALL FILL_BITS (1,5);
           CALL FILL_BITS (10,6);
           DC_BUF.CHAN = CODE5;
           DC_BUF.DEV# = CODE6;
         CASE(3);
           DC_BUF.TYPE = 'SPECIAL';
           CALL FILL_BITS (1,5);
           CALL FILL_BITS (10,6);
           DC_BUF.CHAN = CODE5;
           DC_BUF.DEV# = CODE6;
           DO I = 0 TO 2;
              IF CODE2(3) = SIT.CODE(I)
              THEN DO;
                 DC_BUF.STAT = SIT.TXT(I);
                 GOTO DC_FND;
                 END;
              END;
         CASE(ELSE);
           ALTRETURN;
         END;                           /* OF CASE STMT    */
DC_FND:
        RETURN;
%EJECT;
FILL_BITS: PROC (LOC,CNT);
/**/
DCL LOC UBIN;
DCL CNT UBIN;
DCL I UBIN;
/**/
        DO CASE (CNT);
         CASE(4);
           DO I = 0 TO 3;
              TEMP4(I) = CODE1(LOC+I);
              END;
         CASE(5);
           DO I = 0 TO 4;
              TEMP5(I) = CODE1(LOC+I);
              END;
         CASE(6);
           DO I = 0 TO 5;
              TEMP6(I) = CODE1(LOC+I);
              END;
         CASE(7);
           DO I = 0 TO 6;
              TEMP7(I) = CODE1(LOC+I);
              END;
         END;
        RETURN;
END FILL_BITS;
END DC_PROC;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
BRKRTN: PROC ASYNC;
DCL QWIT BIT(72) SYMREF;
        UNWIND TO QWIT;
END BRKRTN;
%EOD;
/*M* MPC_STAT - RETURN TEXT TRANSLATION OF MAJOR AND MINOR STATUS CODES */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
MPC_STAT: PROC(MAJ,MIN,TYPE_INDX,MAJBUF,MINBUF);
DCL MAJ UBIN(4);
DCL MIN BIT(6);
DCL TYPE_INDX UBIN WORD;
DCL MAJBUF CHAR(20);
DCL MINBUF CHAR(20);
/**/
/* VARS */
%SUB NUMSTATUS = 10;
DCL TYPE$(0:3) PTR STATIC INIT(ADDR(MT_TBL),ADDR(LP_TBL),ADDR(DP_TBL),ADDR(CRP_TBL));
DCL 1 MAJ_STATUS_TBL(0:NUMSTATUS) CONSTANT ALIGNED,
      2 MAJOR UBIN(4) UNAL INIT(0,1,2,3,4,5,8,10,11,13,15),
      2 TEXT CHAR(20) UNAL INIT('READY',
                                'DEVICE BUSY',
                                'ATTENTION',
                                'DATA ALERT',
                                'E.O.F.',
                                'COMMAND REJECT',
                                'LOST INT.',
                                'MPC ATTENTION',
                                'MPC DATA ALERT',
                                'MPC COM. REJECT',
                                'SYSTEM FAULT');
DCL 1 DP_TBL(0:NUMSTATUS) CONSTANT ALIGNED,
      2 MAJOR UBIN(4) UNAL INIT(0,1,2,3,4,5,8,10,11,13,15),
      2 SUB$ PTR INIT(ADDR(DP_READY),
                      ADDR(DP_DEVICE_BUSY),
                      ADDR(DP_ATTENTION),
                      ADDR(DP_DATA_ALERT),
                      ADDR(DP_END_OF_FILE),
                      ADDR(DP_COMMAND_REJECT),
                      ADDR(NIL),
                      ADDR(DP_MPC_ATTENTION),
                      ADDR(DP_MPC_DATA_ALERT),
                      ADDR(DP_MPC_COMMAND_REJECT),
                      ADDR(NIL));
DCL 1 MT_TBL(0:NUMSTATUS) CONSTANT ALIGNED,
      2 MAJOR UBIN(4) UNAL INIT(0,1,2,3,4,5,8,10,11,13,15),
      2 SUB$ PTR INIT(ADDR(MT_READY),
                      ADDR(MT_DEVICE_BUSY),
                      ADDR(MT_ATTENTION),
                      ADDR(MT_DATA_ALERT),
                      ADDR(MT_END_OF_FILE),
                      ADDR(MT_COMMAND_REJECT),
                      ADDR(NIL),
                      ADDR(MT_MPC_ATTENTION),
                      ADDR(MT_MPC_DATA_ALERT),
                      ADDR(MT_MPC_COMMAND_REJECT),
                      ADDR(NIL));
DCL 1 LP_TBL(0:NUMSTATUS) CONSTANT ALIGNED,
      2 MAJOR UBIN(4) UNAL INIT(0,1,2,3,4,5,8,10,11,13,15),
      2 SUB$ PTR INIT(ADDR(LP_READY),
                      ADDR(NIL),
                      ADDR(LP_ATTENTION),
                      ADDR(LP_DATA_ALERT),
                      ADDR(NIL),
                      ADDR(LP_COMMAND_REJECT),
                      ADDR(NIL),
                      ADDR(LP_MPC_ATTENTION),
                      ADDR(LP_MPC_DATA_ALERT),
                      ADDR(LP_MPC_COMMAND_REJECT),
                      ADDR(NIL));
DCL 1 CRP_TBL(0:NUMSTATUS) CONSTANT ALIGNED,
      2 MAJOR UBIN(4) UNAL INIT(0,1,2,3,4,5,8,10,11,13,15),
      2 SUB$ PTR INIT(ADDR(CRP_READY),
                      ADDR(NIL),
                      ADDR(CRP_ATTENTION),
                      ADDR(CRP_DATA_ALERT),
                      ADDR(NIL),
                      ADDR(CRP_COMMAND_REJECT),
                      ADDR(NIL),
                      ADDR(CRP_MPC_ATTENTION),
                      ADDR(CRP_MPC_DATA_ALERT),
                      ADDR(CRP_MPC_COMMAND_REJECT),
                      ADDR(NIL));
DCL 1 DP_READY(0:15) CONSTANT ALIGNED,
      2 MASK BIT(1) UNAL INIT('0'B*0),
      2 CODE BIT(6) UNAL INIT('00'O,'01'O,'02'O,'03'O,'20'O,'00'O*0),
      2 TEXT CHAR(20) UNAL INIT('READY',
                                '1 RETRY',
                                '2 RETRIES',
                                '3 RETRIES',
                                'EDAC CORRECTION',' '*0);
DCL 1 DP_DEVICE_BUSY (0:15) CONSTANT ALIGNED,
      2 MASK BIT(1) UNAL INIT('0'B*0),
      2 CODE BIT(6) UNAL INIT('00'O,'40'O,'00'O*0),
      2 TEXT CHAR(20) UNAL INIT('DEV POSITIONING',
                                'ALT CHANNEL',' '*0);
DCL 1 DP_ATTENTION (0:15) CONSTANT ALIGNED,
      2 MASK BIT(1) UNAL INIT('0'B*0),
      2 CODE BIT(6) UNAL INIT('10'O,'14'O,'40'O,'15'O,'02'O,'16'O,'01'O,'20'O,'00'O*0),
      2 TEXT CHAR(20) UNAL INIT('DEV INOP',
                                'EN1 ALERT',
                                'DEV OFFLINE',
                                'CA EN1 ALERT',
                                'SEEK INCOMPLETE',
                                'CA ALERT',
                                'WRITE INHIBIT',
                                'DEV IN STANDBY',' '*0);
DCL 1 DP_DATA_ALERT(0:15) CONSTANT ALIGNED,
      2 MASK BIT(1) UNAL INIT('0'B*3,'1'B*3,'0'B*0),
      2 CODE BIT(6) UNAL INIT('02'O,'01'O,'04'O,'10'O,'20'O,'40'O,'00'O*0),
      2 TEXT CHAR(20) UNAL INIT('TRANS PARITY',
                                'TTE',
                                'INVALID SEEK ADDR',
                                'HDR VER ERROR',
                                'CYCLIC CHECK',
                                'COMPARE ALERT',' '*0);
DCL 1 DP_END_OF_FILE (0:15) CONSTANT ALIGNED,
      2 MASK BIT(1) UNAL INIT('1'B*2,'0'B*0),
      2 CODE BIT(6) UNAL INIT('01'O,'02'O,'04'O,'10'O,'20'O,'00'O*0),
      2 TEXT CHAR(20) UNAL INIT('LAST CONSEC BLK',
                                'SECTOR CNT LIMIT',
                                'DEF TRK (ATA)',
                                'DEF TRK (ATNA)',
                                'ALT TRK DETECTED',
                                'GOOD TRK DETECTED',' '*0);
DCL 1 DP_COMMAND_REJECT(0:15) CONSTANT ALIGNED,
      2 MASK BIT(1) UNAL INIT('0'B*0),
      2 CODE BIT(6) UNAL INIT('04'O,'01'O,'02'O,'10'O,'00'O*0),
      2 TEXT CHAR(20) UNAL INIT('IDCW PARITY ALERT',
                                'INVALID OP CODE',
                                'INVALID DEV CODE',
                                'INVALID INST SEQ',' '*0);
DCL 1 DP_MPC_ATTENTION (0:15) CONSTANT ALIGNED,
      2 MASK BIT(1) UNAL INIT('0'B*0),
      2 CODE BIT(6) UNAL INIT('01'O,'03'O,'02'O,'13'O,'00'O*0),
      2 TEXT CHAR(20) UNAL INIT('CONFIG ERROR',
                                'DEVICE# ERROR',
                                'MULTIPLE DEVICES',
                                'CA UNEXPECTED INT',' '*0);
DCL 1 DP_MPC_DATA_ALERT(0:15) CONSTANT ALIGNED,
      2 MASK BIT(1) UNAL INIT('0'B*0),
      2 CODE BIT(6) UNAL INIT('01'O,'16'O,'02'O,'23'O,'03'O,'04'O,'24'O,'11'O,'26'O,'12'O,
                             '27'O,'21'O,'31'O,'22'O,'32'O,'00'O*0),
      2 TEXT CHAR(20) UNAL INIT('TRANS PARITY ERR',
                                'EDAC PARITY',
                                'INCONSISTENT CMD',
                                'SEARCH ALERT',
                                'SUMCHECK ERROR',
                                'BYTE LOCKED OUT',
                                'CYCLIC CODE',
                                'ERR CORR REQ',
                                'SYNC BYTE~=''19''X',
                                'EDAC ERROR UNCORR',
                                'ERROR ON ALT TRK',
                                'SECTOR SIZE ERROR',
                                'EDAC CORR (LAST)',
                                'NONSTD SECTOR SIZ',
                                'EDAC CORR (NLAST)',' ');
DCL 1 DP_MPC_COMMAND_REJECT(0:15) CONSTANT ALIGNED,
      2 MASK BIT(1) UNAL INIT('0'B*0),
      2 CODE BIT(6) UNAL INIT('01'O,'02'O,'03'O,'04'O,'00'O*0),
      2 TEXT CHAR(20) UNAL INIT('ILL PROCEDURE',
                                'ILL LOG CHAN#',
                                'ILL CHAN# TO SUSP',
                                'CONT BIT NOT SET',' '*0);
DCL 1 MT_READY (0:15) CONSTANT ALIGNED,
      2 MASK BIT(1) UNAL INIT('0'B,'1'B*6,'0'B*0),
      2 CODE BIT(6) UNAL INIT('00'O,'01'O,'20'O,'40'O,'50'O,'02'O,'04'O,'14'O,'00'O*0),
      2 TEXT CHAR(20) UNAL INIT('READY',
                                'WRITE PROTECTED',
                                'TWO BIT FULL',
                                'FOUR BIT FULL',
                                'SIX BIT FULL',
                                'POS AT B.O.T.',
                                '9 TRK MTH',
                                'ASCII/EBCDIC CODE',' '*0);
DCL 1 MT_DEVICE_BUSY(0:15) CONSTANT ALIGNED,
      2 MASK BIT(1) UNAL INIT('0'B*0),
      2 CODE BIT(6) UNAL INIT('40'O,'01'O,'02'O,'04'O,'00'O*0),
      2 TEXT CHAR(20) UNAL INIT('DEVICE RESERVED',
                                'REWINDING',
                                'ALT CHANNEL',
                                'LOADING',' '*0);
DCL 1 MT_ATTENTION(0:15) CONSTANT ALIGNED,
      2 MASK BIT(1) UNAL INIT('0'B,'1'B*4,'0'B*0),
      2 CODE BIT(6) UNAL INIT('02'O,'04'O,'10'O,'01'O,'20'O,'00'O*0),
      2 TEXT CHAR(20) UNAL INIT('NO SUCH MTH',
                                'MTH IN STANDBY',
                                'DEVICE FAULT',
                                'WRITE PROTECT',
                                'BLANK TAPE ON WRITE',' '*0);
DCL 1 MT_DATA_ALERT(0:15) CONSTANT ALIGNED,
      2 MASK BIT(1) UNAL INIT('0'B*2,'1'B*5,'0'B*0),
      2 CODE BIT(6) UNAL INIT('02'O,'01'O,'03'O,'04'O,'10'O,'20'O,'40'O,'10'O,'00'O*0),
      2 TEXT CHAR(20) UNAL INIT('BLANK TAPE ON READ',
                                'TTE',
                                'BIT ON ERASE',
                                'TRANS PAR ALERT',
                                'LAT PAR ERR',
                                'LONG PAR ERR',
                                'E.O.T.',
                                'FRAME DROP',
                                'ASCII/EBCDIC CODE',' '*0);
DCL 1 MT_END_OF_FILE (0:15) CONSTANT ALIGNED,
      2 MASK BIT(1) UNAL INIT('0'B*3,'1'B,'0'B*0),
      2 CODE BIT(6) UNAL INIT('17'O,'23'O,'77'O,'00'O*0),
      2 TEXT CHAR(20) UNAL INIT('E.O.F. (7 TRK)',
                                'E.O.F. (9 TRK)',
                                'DATA ALERT',
                                'SINGLE CHAR REC',' '*0);
DCL 1 MT_COMMAND_REJECT(0:15) CONSTANT ALIGNED,
      2 MASK BIT(1) UNAL INIT('1'B*3,'0'B*0),
      2 CODE BIT(6) UNAL INIT('01'O,'02'O,'04'O,'10'O,'20'O,'40'O,'00'O*0),
      2 TEXT CHAR(20) UNAL INIT('INV OP CODE',
                                'INV DEVICE CODE',
                                'IDCW PARITY ALERT',
                                'B.O.T.',
                                'FWD RD AFTER WRT',
                                'NINE TRK MTH',
                                'INVALID DENSITY',' '*0);
DCL 1 MT_MPC_ATTENTION(0:15) CONSTANT ALIGNED,
      2 MASK BIT(1) UNAL INIT('0'B*2,'1'B,'0'B*0),
      2 CODE BIT(6) UNAL INIT('03'O,'02'O,'14'O,'20'O,'10'O,'21'O,'01'O,'00'O*0),
      2 TEXT CHAR(20) UNAL INIT('DEVICE# ERROR',
                                'MULTIPLE DEVICES',
                                'TCA MALFUNCTION',
                                'DEV MALFUNCTION',
                                'INCORRECT MODE',
                                'MULTIPLE B.O.T.',
                                'CONFIG ERROR',' '*0);
DCL 1 MT_MPC_DATA_ALERT (0:15) CONSTANT ALIGNED,
      2 MASK BIT(1) UNAL INIT('0'B*0),
      2 CODE BIT(6) UNAL INIT('10'O,'11'O,'20'O,'21'O,'22'O,'23'O,'24'O,'02'O,'03'O,'04'O,'01'O,'40'O,'00'O*0),
      2 TEXT CHAR(20) UNAL INIT('PE BURST ERROR',
                                'PREAMBLE ERROR',
                                'MULTI-TRK ERROR',
                                'SKEW ERROR',
                                'POSTAMBLE ERROR',
                                'NRZI CCC ERROR',
                                'CODE ALERT',
                                'INCONSISTENT CMD',
                                'SUMCHECK ERROR',
                                'BYTE LOCKED OUT',
                                'TRANS PARITY ERR',
                                'MARGINAL COND',' '*0);
DCL 1 MT_MPC_COMMAND_REJECT (0:15) CONSTANT ALIGNED,
      2 MASK BIT(1) UNAL INIT('0'B*0),
      2 CODE BIT(6) UNAL INIT('01'O,'02'O,'03'O,'04'O,'00'O*0),
      2 TEXT CHAR(20) UNAL INIT('ILL PROCEDURE',
                                'ILL LOG CHAN#',
                                'ILL CHAN# TO SUSP',
                                'CONT BIT NOT SETP',' '*0);
DCL 1 LP_READY(0:15) CONSTANT ALIGNED,
      2 MASK BIT(1) UNAL INIT('0'B*0),
      2 CODE BIT(6) UNAL INIT('00'O,'01'O,'02'O,'03'O,'04'O,'05'O,'06'O,'07'O,'00'O*0),
      2 TEXT CHAR(20) UNAL INIT('READY',
                                'PRINT ONE LINE',
                                'FWD SPACE',
                                'FWD TO T.O.P.',
                                'INVALID LINE',
                                'REV RWD',
                                'BACKSPACE',
                                'BACKSPACE TO TOP',' '*0);
DCL 1 LP_COMMAND_REJECT(0:15) CONSTANT ALIGNED,
      2 MASK BIT(1) UNAL INIT('0'B*0),
      2 CODE BIT(6) UNAL INIT('01'O,'02'O,'04'O,'20'O,'40'O,'00'O*0),
      2 TEXT CHAR(20) UNAL INIT('INV OP CODE',
                                'INV DEVICE CODE',
                                'IDCW PARITY ALERT',
                                'SLEW ERROR',
                                'T.O.P.',' '*0);
DCL 1 LP_MPC_ATTENTION(0:15) CONSTANT ALIGNED,
      2 MASK BIT(1) UNAL INIT('0'B*0),
      2 CODE BIT(6) UNAL INIT('01'O,'02'O,'00'O*0),
      2 TEXT CHAR(20) UNAL INIT('IAI ERROR',
                                'DAI ERROR',' '*0);
DCL 1 LP_MPC_DATA_ALERT(0:15) CONSTANT ALIGNED,
      2 MASK BIT(1) UNAL INIT('0'B*0),
      2 CODE BIT(6) UNAL INIT('01'O,'03'O,'05'O,'06'O,'00'O*0),
      2 TEXT CHAR(20) UNAL INIT('PSI PARITY ERROR',
                                'SUMCHECK ERROR',
                                'DAI ERROR',
                                'PSI OVERFLOW',' '*0);
DCL 1 LP_MPC_COMMAND_REJECT(0:15) CONSTANT ALIGNED,
      2 MASK BIT(1) UNAL INIT('0'B*0),
      2 CODE BIT(6) UNAL INIT('01'O,'02'O,'10'O,'00'O*0),
      2 TEXT CHAR(20) UNAL INIT('ILL PROCEDURE',
                                'ILL LOG CHAN#',
                                'DEVICE RESERVED',' '*0);
DCL 1 LP_ATTENTION(0:15) CONSTANT ALIGNED,
      2 MASK BIT(1) UNAL INIT('0'B*0),
      2 CODE BIT(6) UNAL INIT('00'O,'01'O,'02'O,'04'O,'10'O,'00'O*0),
      2 TEXT CHAR(20) UNAL INIT('POWER FAULT',
                                'OUT OF PAPER',
                                'STOPPED',
                                'VFU/VFC ALERT',
                                'CHECK ALERT',' '*0);
DCL 1 LP_DATA_ALERT(0:15) CONSTANT ALIGNED,
      2 MASK BIT(1) UNAL INIT('0'B*0),
      2 CODE BIT(6) UNAL INIT('00'O,'01'O,'02'O,'04'O,'10'O,'20'O,'40'O,'00'O*0),
      2 TEXT CHAR(20) UNAL INIT('IMAGE BFR ALERT',
                                'TTE',
                                'ALERT BEF PRT',
                                'ALERT AFT PRT',
                                'WARNING',
                                'PAPER MOTION',
                                'T.O.P. ECHO',' '*0);
DCL 1 CRP_READY(0:15) CONSTANT ALIGNED,
      2 MASK BIT(1) UNAL INIT('0'B*0),
      2 CODE BIT(6) UNAL INIT('00'O,'01'O,'02'O,'03'O,'04'O,'05'O,'06'O,'07'O,'00'O*0),
      2 TEXT CHAR(20) UNAL INIT('READY',
                                '51 COLUMN CARDS',
                                'FWD SPACE',
                                'FWD TO T.O.P.',
                                'INVALID LINE',
                                'REV RWD',
                                'BACKSPACE',
                                'BACKSPACE TO TOP',' '*0);
DCL 1 CRP_COMMAND_REJECT(0:15) CONSTANT ALIGNED,
      2 MASK BIT(1) UNAL INIT('0'B*0),
      2 CODE BIT(6) UNAL INIT('01'O,'02'O,'04'O,'20'O,'40'O,'00'O*0),
      2 TEXT CHAR(20) UNAL INIT('INV OP CODE',
                                'INV DEVICE CODE',
                                'IDCW PARITY ALERT',
                                'SLEW ERROR',
                                'T.O.P.',' '*0);
DCL 1 CRP_MPC_ATTENTION(0:15) CONSTANT ALIGNED,
      2 MASK BIT(1) UNAL INIT('0'B*0),
      2 CODE BIT(6) UNAL INIT('01'O,'02'O,'00'O*0),
      2 TEXT CHAR(20) UNAL INIT('IAI ERROR',
                                'DAI ERROR',' '*0);
DCL 1 CRP_MPC_DATA_ALERT(0:15) CONSTANT ALIGNED,
      2 MASK BIT(1) UNAL INIT('0'B*0),
      2 CODE BIT(6) UNAL INIT('01'O,'03'O,'05'O,'06'O,'00'O*0),
      2 TEXT CHAR(20) UNAL INIT('PSI PARITY ERROR',
                                'SUMCHECK ERROR',
                                'DAI ERROR',
                                'PSI OVERFLOW',' '*0);
DCL 1 CRP_MPC_COMMAND_REJECT(0:15) CONSTANT ALIGNED,
      2 MASK BIT(1) UNAL INIT('0'B*0),
      2 CODE BIT(6) UNAL INIT('01'O,'02'O,'10'O,'00'O*0),
      2 TEXT CHAR(20) UNAL INIT('ILL PROCEDURE',
                                'ILL LOG CHAN#',
                                'DEVICE RESERVED',' '*0);
DCL 1 CRP_ATTENTION(0:15) CONSTANT ALIGNED,
      2 MASK BIT(1) UNAL INIT('0'B*0),
      2 CODE BIT(6) UNAL INIT('00'O,'01'O,'04'O,'10'O,'20'O,'40'O,'02'O,'00'O*0),
      2 TEXT CHAR(20) UNAL INIT('OFF-LINE',
                                'HOPPER/STACKER',
                                'CHAD BOX FULL',
                                'FEED ALERT',
                                'JAM',
                                'READ ALERT',
                                'MANUAL HALT',' '*0);
DCL 1 CRP_DATA_ALERT(0:15) CONSTANT ALIGNED,
      2 MASK BIT(1) UNAL INIT('0'B*0),
      2 CODE BIT(6) UNAL INIT('02'O,'04'O,'00'O*0),
      2 TEXT CHAR(20) UNAL INIT('VALIDITY ERROR',
                                'DUAL RD ERROR',' '*0);
DCL 1 TBL(0:NUMSTATUS) BASED ALIGNED,
      2 MAJOR UBIN(4) UNAL,
      2 SUB$ PTR;
DCL 1 SUBTBL(0:15) BASED(SUBTBL$) ALIGNED,
      2 MASK BIT(1) UNAL,
      2 CODE BIT(6) UNAL,
      2 TEXT CHAR(20) UNAL;
DCL SUBTBL$ PTR;
DCL I UBIN WORD;
%EJECT;
        MAJBUF = ' ';
        MINBUF = ' ';
        DO I = 0 TO NUMSTATUS;
           IF MAJ = MAJ_STATUS_TBL.MAJOR(I) THEN DO;
              MAJBUF = MAJ_STATUS_TBL.TEXT(I);
              SUBTBL$ = TYPE$(TYPE_INDX)->TBL.SUB$(I);
              GOTO FOUND_MAJOR;
              END;                      /* IF FOUND */
           END;                         /* DO I */
FOUND_MAJOR:
        IF SUBTBL$ = ADDR(NIL) THEN RETURN;
        DO I = 0 TO 15;
           IF (SUBTBL.MASK(I) AND (SUBTBL.CODE(I) & MIN)) OR
             (~SUBTBL.MASK(I) AND (SUBTBL.CODE(I) = MIN)) THEN DO;
              MINBUF = SUBTBL.TEXT(I);
              GOTO FOUND_MINOR;
              END;                      /* IF */
           END;                         /* DO I*/
FOUND_MINOR:
        RETURN;
END MPC_STAT;
