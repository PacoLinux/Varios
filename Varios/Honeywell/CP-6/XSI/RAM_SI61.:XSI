/*M* RAM - Register's an accounts owner */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
RAM: PROC MAIN;
%INCLUDE CP_6;
%INCLUDE XU_MACRO_C;
%INCLUDE XU_PERR_C;
 
%PARSE$OUT (NAME = OPT$OUT,
            STCLASS = "BASED (BLK$)");
%PARSE$SYM (NAME = OPT$SYM,
            STCLASS = "BASED (BLK$)");
DCL NSUBLKS UBIN;
DCL KEY_OPT UBIN SYMREF;
DCL X$PARSE ENTRY (1) ALTRET;
DCL WORK (0:255) UBIN STATIC;
DCL BLK$ PTR;
DCL 1 BUF STATIC,
    2 L UBIN HALF HALIGNED,
    2 C CHAR (255) CALIGNED;
%P_PCB (NAME = OPT_PCB,
        STCLASS = STATIC,
        T = BUF.C,
        R = KEY_OPT,
        W = WORK,
        WSZ = 256);
 
%FPT_OPEN (FPTN=OPEN_SI,
            FUN = IN,
            CTG = YES,
            SHARE = ALL,
            ASN = FILE,
            NAME = VLP_NAME,
            ACCT = VLP_MAIL,
            DCB = M$SI);
%VLP_NAME (FPTN = VLP_NAME,
            NAME = ':NAME');
%VLP_ACCT (FPTN = VLP_MAIL,
            ACCT = ':MAIL');
 
%FPT_OPEN (FPTN = OPEN_RN,
            EXIST = NEWFILE,
            ACS = DIRECT,
            CTG = YES,
            ORG = CONSEC,
            FUN = CREATE,
            ASN = FILE,
            NAME = VLP_JCL,
            DCB = M$RN);
%VLP_NAME (FPTN = VLP_JCL,
            NAME = '$SUPER_REG_NAME');
 
%FPT_OPEN (FPTN = OPEN_TM,
            DCB = M$TM);
 
%FPT_WRITE (FPTN = WRITE_FILE,
            DCB = M$RN,
            BUF = FILE_BUF);
%FPT_WRITE (FPTN = WRITE_TERM,
            DCB = M$TM,
            BUF = FILE_BUF);
%FPT_READ (FPTN = NEXT_REC,
            KEYS = NO,
            DCB = M$SI,
            KEYR = YES,
            BUF = IN_BUF,
            KEY = KEYBUF);
 
%FPT_CLOSE (FPTN = CLOSE_SI,
            DCB = M$SI);
%FPT_CLOSE (FPTN = CLOSE_TM,
            DCB = M$TM);
%FPT_CLOSE (FPTN = CLOSE_RN,
            DCB = M$RN);
 
%FPT_INT (FPTN = INTFPT,
          UENTRY = BREAK);
DCL BREAK ENTRY ASYNC;
 
%F$DCB;
DCL M$SI$ PTR ALIGNED;
DCL BREAK_MSG CHAR (80) STATIC SYMDEF;
 
DCL M$SI DCB;
DCL M$RN DCB;
DCL M$TM DCB;
DCL I UBIN WORD ALIGNED;
DCL J UBIN WORD ALIGNED;
DCL FILE_BUF CHAR (80) CALIGNED STATIC;
DCL IN_BUF CHAR (80) CALIGNED STATIC;
DCL 1 ACCOUNT CALIGNED STATIC,
   2 COUNT UBIN BYTE INIT (8) UNAL,
   2 TEXT CHAR (8) UNAL;
DCL 1 UNAME CALIGNED STATIC,
   2 COUNT UBIN BYTE INIT (12) UNAL,
   2 TEXT CHAR (12) UNAL;
DCL 1 KEYBUF CALIGNED STATIC,
      2 COUNT UBIN BYTE INIT (20) UNAL,
      2 TEXT CHAR (20) UNAL;
DCL END_OF_FILE BIT (1) ALIGNED;
 
CALL M$INT (INTFPT);
CALL M$OPEN (OPEN_SI);   /* THIS WILL POINT TO :NAME FILE */
CALL M$OPEN (OPEN_RN);   /* THIS WILL POINT TO THE CREATED FILE */
CALL M$OPEN (OPEN_TM);   /* THIS WILL POINT TO ME */
M$SI$ = DCBADDR (DCBNUM (M$SI));
 
FILE_BUF = '!SUPER';
CALL M$WRITE (WRITE_FILE) ALTRET (UNKNOWN);
 
END_OF_FILE = '0'B;
 
DO WHILE (NOT END_OF_FILE);
NEXT_REC: ;
IN_BUF = ' ';
CALL M$READ (NEXT_REC)   /* GET THE FIRST RECORD */
WHENRETURN DO;
   CALL CONCAT (BREAK_MSG, 'Break at: ', SUBSTR (KEYBUF.TEXT, 0, KEYBUF.COUNT), '     ',
      SUBSTR (IN_BUF, 0, 50) );
   BUF.C = SUBSTR (KEYBUF.TEXT, 0, KEYBUF.COUNT);
   OPT_PCB.NCHARS = KEYBUF.COUNT;
   CALL X$PARSE (OPT_PCB)
   WHENRETURN DO;
      UNAME.COUNT = 0;
      BLK$ = OPT_PCB.OUT$;
      DO I = 0 TO OPT$OUT.NSUBLKS - 1;
         IF (OPT$OUT.SUBLK$(I)->OPT$SYM.CODE = 2)
         THEN DO;   /* THIS BLOCK CONTAINS THE ACCOUNT */
            ACCOUNT.TEXT = OPT$OUT.SUBLK$(I)->OPT$SYM.TEXT;
            ACCOUNT.COUNT = OPT$OUT.SUBLK$(I)->OPT$SYM.COUNT;
            END;
         IF (OPT$OUT.SUBLK$(I)->OPT$SYM.CODE = 3)
         THEN DO;   /* THIS BLOCK CONTAINS THE UNAME */
            UNAME.TEXT = OPT$OUT.SUBLK$(I)->OPT$SYM.TEXT;
            UNAME.COUNT = OPT$OUT.SUBLK$(I)->OPT$SYM.COUNT;
            END;
         END; /* DO I */
      END; /* WHENRETURN */
   WHENALTRETURN DO;
      IF (KEYBUF.COUNT > 8)
      THEN DO;
         ACCOUNT.COUNT = 8;
         ACCOUNT.TEXT = SUBSTR (KEYBUF.TEXT, 0, 8);
         UNAME.COUNT = KEYBUF.COUNT - 8;
         UNAME.TEXT = SUBSTR (KEYBUF.TEXT, 8, UNAME.COUNT);
         END;
      ELSE DO;
         CALL CONCAT (FILE_BUF, 'An error occured trying to process record ', SUBSTR (KEYBUF.TEXT, 0, KEYBUF.COUNT));
         CALL M$WRITE (WRITE_TERM) ALTRET (UNKNOWN);
         GOTO NEXT_REC;
         END;
      END;
   IF (UNAME.COUNT > 0)
   THEN DO;
      CALL CONCAT (FILE_BUF, 'M ', SUBSTR (ACCOUNT.TEXT, 0, ACCOUNT.COUNT),
                   ',', SUBSTR (UNAME.TEXT, 0, UNAME.COUNT) );
      END;
   ELSE DO;
      CALL CONCAT (FILE_BUF, 'M ', SUBSTR (ACCOUNT.TEXT, 0, ACCOUNT.COUNT), ',?');
      END;
   CALL M$WRITE (WRITE_FILE) ALTRET (UNKNOWN);
   CALL CONCAT (FILE_BUF, 'ACCOUNT_OWNER = ', SUBSTR (IN_BUF, 0,
                M$SI$->F$DCB.ARS#));
   CALL M$WRITE (WRITE_FILE) ALTRET (UNKNOWN);
   FILE_BUF = ' ';
   CALL M$WRITE (WRITE_FILE) ALTRET (UNKNOWN);
   END; /* WHENRETURN ON THE READ */
WHENALTRETURN DO;
   END_OF_FILE = '1'B;
   END;
END; /* DO WHILE NOT EOF */
 
FILE_BUF = 'END';
CALL M$WRITE (WRITE_FILE) ALTRET (UNKNOWN);
GOTO FIN;
 
UNKNOWN:   ;
   FILE_BUF = 'SOMETHING WENT WRONG WITH AN M$WRITE, GOODBYE!';
   CALL M$WRITE (WRITE_TERM) ALTRET (FIN);
 
FIN: ;
 
CALL M$CLOSE (CLOSE_SI);
CALL M$CLOSE (CLOSE_TM);
CALL M$CLOSE (CLOSE_RN);
 
END RAM;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
BREAK: PROC ASYNC;
%INCLUDE CP_6;
DCL M$OU DCB ;
DCL BREAK_MSG CHAR (80) SYMREF;
%F$DCB;
%FPT_TRMPRG(FPTN = FPT_TRMPRG,
             RSTBRK = YES,
             STCLASS = CONSTANT);
%FPT_WRITE( FPTN=WRITE_CR, BUF=BREAK_MSG, DCB=M$UC );
DO INHIBIT;           /* Keep breaks out while in here. */
   CALL M$TRMPRG(FPT_TRMPRG);   /* Reset break count.   */
   CALL M$WRITE (WRITE_CR);
   RETURN;
   END;
END BREAK;
