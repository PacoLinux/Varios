/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*  MASCOT -- SCReeN CoMPaRe is a tool used to compare two files
    to see if they would display on a CRT screen Identically  */
 
 
MASCOT:  PROC MAIN ;
 
/* INCLUDES */
%INCLUDE MASCOT_C61;   /* MACROS */
%INCLUDE MASCOT_C62;   /* PARSE INFORMATION */
%INCLUDE XU_MACRO_C;
%INCLUDE XU_PERR_C;
%INCLUDE XU_SUBS_C;
 
/* STATIC */
%SCRN(FPTN=FILE1,STCLASS=STATIC);
%SCRN(FPTN=FILE2,STCLASS=STATIC);
DCL NUM_SCRN UBIN STATIC SYMDEF INIT (0);
DCL DIFF_FOUND BIT(1) STATIC SYMDEF INIT ('0'B);
 
/* FPT */
%FPT_READ(DCB=M$SI,
          BUF=FILE1.BUF,
          FPTN=READSI,
          TRANS=YES);
 
%FPT_READ(DCB=M$UI,
          BUF=FILE2.BUF,
          FPTN=READUI,
          TRANS=YES);
 
%FPT_EXIT(STEPCC=0,
          STCLASS=STATIC SYMDEF);
 
%FPT_WRITE(DCB=M$LO,
           BUF=OUTLINE);
 
DCL OUTLINE CHAR(0) STATIC INIT
   ('** ERROR **   Only "DSI" and "DUI" are allowed as Options');
 
%FPT_CLOSE(DCB=M$LO,
           DISP=SAVE);
 
/* DCBS */
DCL M$LO DCB;
DCL M$SI DCB;
DCL M$UI DCB;
 
/* SYMREFS */
DCL OPTS BIT(36) SYMREF;
 
/* PARSE NODE STUFF */
%P_PCB(NAME=SCRN_PCB,
       STCLASS=STATIC,
       R=OPTS,
       W=SCRN_WS,
       U$=NIL,
       WSZ=100,
       N#=0);
 
DCL SCRN_WS(0:99) UBIN WORD STATIC ;
 
%PARSE$OUT     (NAME=SCRN$OUTBLK,
                STCLASS=BASED);
 
/* ENTRY DEFS */
DCL COMPARE ENTRY(2);
DCL FILLSCRN ENTRY(2);
DCL INITFILE ENTRY(1);
DCL DUMPFILE ENTRY(2);
DCL X$PARSE ENTRY(1) ALTRET;
 
    CALL INITFILE(FILE1);
    CALL INITFILE(FILE2);
 
/*   CHECK FOR OPTIONS ON COMMAND LINE */
     SCRN_PCB.ROOT$ = ADDR(OPTS);
 
     IF B$JIT$->B$JIT.CCARS > B$JIT$->B$JIT.CCDISP
     THEN
     DO;                                /* MUST BE OPTIONS ON CMD LINE */
 
        SCRN_PCB.TEXT$ = PINCRC(ADDR(B$JIT.CCBUF),B$JIT.CCDISP+1);
        SCRN_PCB.NCHARS = B$JIT.CCARS - B$JIT.CCDISP - 1;
 
        CALL X$PARSE (SCRN_PCB) ALTRET (XPERR);
 
        DO WHILE ('0'B);
XPERR:     ;
           CALL M$WRITE(FPT_WRITE);
           CALL M$XXX;
           END;                         /* DO WHILE PARSE ERROR */
 
        IF (SCRN_PCB.OUT$->SCRN$OUTBLK.NSUBLKS = 2) THEN  /*DO BOTH*/
           DO ;
             FILE1.DUMP='1'B;
             FILE2.DUMP='1'B;
           END;
        ELSE IF (SCRN_PCB.OUT$->SCRN$OUTBLK.SUBLK$(0)->
                 SCRN$OUTBLK.CODE = %SI) THEN
             FILE1.DUMP='1'B;
        ELSE FILE2.DUMP = '1'B;
 
    END;  /* DO PARSE */
 
/* PROCESS FILES */
    DO UNTIL (FILE1.EOF) OR (FILE2.EOF);
       CALL FILLSCRN(FILE1,READSI);
       CALL FILLSCRN(FILE2,READUI);
       CALL COMPARE(FILE1,FILE2);
    END ;
 
    IF (FILE1.EOF) AND (~FILE2.EOF)
       THEN CALL DUMPFILE(FILE2,READUI);
    ELSE IF (~FILE1.EOF) AND (FILE2.EOF)
       THEN CALL DUMPFILE(FILE1,READSI);
 
    CALL M$CLOSE(FPT_CLOSE);
    CALL M$EXIT(FPT_EXIT);
 
END MASCOT;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
 
INITFILE: PROC (FILE);
/*
    This routine initilizes the fileds of the %SCRN macro
    to either starting values or values that will force
    initialization at a later time
*/
 
 
/* INCLUDES */
%INCLUDE MASCOT_C61;    /* MACROS AND INCLUDES */
 
/* PARAM */
%SCRN(FPTN=FILE,STCLASS=PARAM);
 
    FILE.DUMP = '0'B;  /* DEFAULT--DONT DUMP FILE */
    FILE.BUF=' ';
    FILE.BUFPOS=2000;  /* FORCE FIRST READ */
    FILE.CLRSCR = '1'B;   /* FORCE CLEAR SCREEN */
    FILE.EOF = '0'B;
 
END INITFILE;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
 
 
COMPARE: PROC(FILE1,FILE2);
/*
   This routine verifies that the two SCRNs passed to
   it are the same.  If it finds a line that is not the
   the same on both screens it calls DIFFERENT to tell
   which lines
*/
 
/* INCLUDES */
%INCLUDE MASCOT_C61;  /* INCLUDES AND MACROS */
 
/* PARAMS */
%SCRN(FPTN=FILE1,STCLASS=PARAM);
%SCRN(FPTN=FILE2,STCLASS=PARAM);
 
/* FPT */
%FPT_WRITE(FPTN=WRITECOLUMN,
           DCB = M$LO,
           BUF = COLUMN);
 
%FPT_WRITE(FPTN=WRITELINE,
           DCB = M$LO,
           BUF = OLINE);
 
%FPT_WRITE(FPTN=WRITE,
           DCB = M$LO,
           BUF = LOBUF);
 
%FPT_EXIT(STCLASS=SYMREF);
 
DCL M$LO DCB;
 
/* OUTPUT LINES */
DCL 1 OLINE STATIC,
      2 ROW CHAR(2),
      2 *   CHAR(3) INIT ('  |'),
      2 LINE CHAR(80),
      2 *   CHAR(3) INIT ('|  '),
      2 ROW1 CHAR(2);
 
DCL COLUMN CHAR(0) STATIC INIT
('ROW  ----+----1----+----2----+----3----+----4----+----5----+----6----+----7----+----8   ROW') ;
 
DCL LOBUF CHAR(80) STATIC INIT (' ');
 
/* SYMREF */
DCL DIFF_FOUND BIT(1) SYMREF;
DCL NUM_SCRN SBIN SYMREF;
 
/* AUTO */
DCL ROW SBIN;
DCL COL SBIN;
DCL N SBIN;
DCL TEMP SBIN;
DCL TEMPCHAR CHAR(10);
 
    N = 0 ;
    NUM_SCRN = NUM_SCRN + 1;
    IF (FILE1.DUMP) THEN CALL DUMP_SCRN(FILE1);
    IF (FILE2.DUMP) THEN CALL DUMP_SCRN(FILE2);
    DO ROW = 0 TO 23 ;
       IF (FILE1.LINE(ROW) ~= FILE2.LINE(ROW))
          THEN DO ;
             CALL DIFFERENCE;
             N= N + 1;
          END ;
    END;
    IF (N~=0) THEN DO ;
       CALL M$WRITE(WRITECOLUMN);
       LOBUF=' ';
       FPT_EXIT.V.STEPCC#=4;
       CALL M$WRITE(WRITE);
       CALL M$WRITE(WRITE);
       CALL M$WRITE(WRITE);
    END ;
 
DIFFERENCE: PROC ;
/*
   prints out the lines that are DIFFERENT.
*/
 
    IF (N=0) THEN DO ;
       DIFF_FOUND = '1'B;
       CALL BINCHAR(TEMPCHAR,NUM_SCRN);
       TEMP = 0;
       DO WHILE (SUBSTR(TEMPCHAR,TEMP,1) = '0');
          TEMP = TEMP + 1;
       END ;
       CALL CONCAT(LOBUF,'SCREEN ',SUBSTR(TEMPCHAR,TEMP),
             ' IS DIFFERENT ');
       CALL M$WRITE(WRITE);
       LOBUF = ' ';
       CALL M$WRITE(WRITE);
 
       CALL M$WRITE(WRITECOLUMN);
    END ;
    CALL BINCHAR(OLINE.ROW,ROW+1);
    OLINE.ROW1 = OLINE.ROW;
    OLINE.LINE = FILE1.LINE(ROW);
    CALL M$WRITE(WRITELINE);
    OLINE.LINE = FILE2.LINE(ROW);
    CALL M$WRITE(WRITELINE);
END DIFFERENCE;
 
DUMP_SCRN: PROC(FILE);
 
/* PARAM */
%SCRN(FPTN=FILE,STCLASS=PARAM);
 
    CALL M$WRITE(WRITECOLUMN);
    DO ROW = 0 TO 23 ;
       CALL BINCHAR(OLINE.ROW,ROW+1);
       OLINE.ROW1 = OLINE.ROW;
       OLINE.LINE = FILE.LINE(ROW);
       CALL M$WRITE(WRITELINE);
    END;
    CALL  M$WRITE(WRITECOLUMN);
    LOBUF = ' ';
    CALL M$WRITE(WRITE);
END DUMP_SCRN;
END COMPARE;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
 
DUMPFILE: PROC(FILE,FPT_R);
/*
   When one of the two files being compared runs out of data,
   the remaining lines from the other is dumped out by this
   routine.
*/
 
/* INCLUDES */
%INCLUDE MASCOT_C61;
 
/* PARAMETERS */
%SCRN(FPTN=FILE,STCLASS=PARAM);
%FPT_READ(FPTN=FPT_R,STCLASS=PARAM);
 
/* BASED */
%F$DCB;
 
/* FPT */
%FPT_WRITE(FPTN=WRITE,
           DCB=M$LO,
           BUF=LOBUF);
 
%FPT_EXIT(STCLASS=SYMREF);
 
DCL M$LO DCB;
DCL LOBUF CHAR(80) STATIC ;
DCL M$SI DCB;
DCL M$UI DCB;
 
/* AUTO */
DCL ROW SBIN;
 
/* ENTRY */
DCL FILLSCRN ENTRY(2);
 
   FPT_EXIT.V.STEPCC# = 4;
   IF (FPT_R.V.DCB# = DCBNUM(M$UI)) THEN
      DO;
        CALL CONCAT(LOBUF,'EOF ON FILE ',
                      DCBADDR(DCBNUM(M$SI))->F$DCB.NAME#.C);
        CALL M$WRITE(WRITE);
        CALL CONCAT(LOBUF,'DUMPING THE REMANINDER OF ',
                      DCBADDR(DCBNUM(M$UI))->F$DCB.NAME#.C);
        CALL M$WRITE(WRITE);
      END;
   ELSE DO;
        CALL CONCAT(LOBUF,'EOF ON FILE ',
                      DCBADDR(DCBNUM(M$UI))->F$DCB.NAME#.C);
        CALL M$WRITE(WRITE);
        CALL CONCAT(LOBUF,'DUMPING THE REMANINDER OF ',
                      DCBADDR(DCBNUM(M$SI))->F$DCB.NAME#.C);
        CALL M$WRITE(WRITE);
      END;
 
    DO UNTIL (FILE.EOF);
       LOBUF = '|----------------------------------------------------------------------------|';
       CALL M$WRITE(WRITE);
       CALL FILLSCRN(FILE,FPT_R);
       DO ROW = 0 TO 23;
          LOBUF = FILE.LINE(ROW);
          CALL M$WRITE(WRITE);
       END ;
    END ;
END DUMPFILE;
