/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
MAEB: PROC MAIN ALTRET NOAUTO;
/* ********************************************************************\
*                                                                      *
*   MAEB is the other half of the BEAM processor.  MAEB is run on the  *
*   destination machine to collect the encoded file and turn it back   *
*   into something meaningful.                                         *
*                                                                      *
\******************************************************************** */
%EJECT;
/* ********************************************************************\
*                                                                      *
*   %INCLUDEs                                                          *
*                                                                      *
\******************************************************************** */
 
%INCLUDE CP_6;
%INCLUDE B$JIT;
 
/* ********************************************************************\
*                                                                      *
*   FPTS                                                               *
*                                                                      *
\******************************************************************** */
 
%FPT_FID(FPTN=FID_OUT,
         ACCT=ACCT_OUT,
         ASN=OPEN_OUT.V.ASN#,
         NAME=NAME_OUT,
         PASS=PASS_OUT,
         RES=OPEN_OUT.V.RES#,
         RESULTS=RESULTS_OUT,
         TEXTFID=OUTFID,
         SN=SN_OUT);
 
%VLR_FID(FPTN=RESULTS_OUT);
 
%FPT_OPEN(FPTN=OPEN_INP,
          DCB=F$INP,
          FUN=IN,
          ACS=SEQUEN);
 
%FPT_OPEN(FPTN=OPEN_OUT,
          DCB=F$OUT,
          NAME=NAME_OUT,
          PASS=PASS_OUT,
          SN=SN_OUT,
          IFPARAM=FPARAMT,
          ACCT=ACCT_OUT,
          SCRUB=YES,
          FUN=CREATE,
          ACS=SEQUEN);
 
%FPT_OPEN(FPTN=OPEN_DO,
          DCB=M$DO,
          FUN=CREATE);
 
%FPT_OPEN(FPTN=OPEN_LO,
          DCB=M$LO,
          FUN=CREATE);
 
%FPT_WRITE(FPTN=WRITE_OUT,
           DCB=F$OUT,
           BUF=SOBUF);
 
%FPT_WRITE(FPTN=WRITE_LO,
           DCB=M$LO,
           BUF=SIBUF);
 
%FPT_READ(FPTN=READ_INP,
          DCB=F$INP,
          BUF=SIBUF);
 
%FPT_CLOSE(FPTN=CLOSE_INP,
           DCB=F$INP,
           DISP=SAVE);
 
%FPT_CLOSE(FPTN=CLOSE_OUT,
           DCB=F$OUT,
           RELG=YES,
           DISP=SAVE);
 
%FPT_CLOSE(FPTN=CLOSE_LO,
           DCB=M$LO,
           DISP=SAVE);
 
%FPT_CLOSE(FPTN=CLOSE_DO,
           DCB=M$DO,
           DISP=SAVE);
 
%FPT_ERRMSG(FPTN=SYS_ERR,
            BUF=SOBUF,
            CODE=ERRCODE,
            OUTDCB1=M$DO,
            SUBFN=YES,
            SUBAC=YES,
            SUBDC=NO,
            SUBSN=NO,
            RESULTS=VLR_ERRMSG,
            SUBMESS=YES);
 
%FPT_ERRMSG(FPTN=PRG_ERR,
            BUF=SOBUF,
            CODE=ERRCODE,
            FILENAME=WHATNAME,
            FILEACCT=WHATACCT,
            OUTDCB1=M$DO,
            INCLCODE=NO,
            SUBFN=NO,
            SUBAC=NO,
            SUBSN=NO,
            SUBDC=NO,
            RESULTS=VLR_ERRMSG,
            SUBMESS=YES);
 
%VLR_ERRMSG;
 
%VLP_NAME(FPTN=WHATNAME,
          LEN=31,
          NAME='                               ');
 
%VLP_ACCT(FPTN=WHATACCT,
          ACCT="':SYS    '");
 
%FPT_CORRES(FPTN=LOEQDO,
            DCB1=M$DO,
            DCB2=M$LO);
 
%F$DCB(DCBN=DUMMY);
 
%B$TCB;
 
%B$EXCFR;
 
%FPT_PRIV(AUTH=YES,
          PRIV=%PR_FMSEC#);
 
/* ********************************************************************\
*                                                                      *
*   DCBs                                                               *
*                                                                      *
\******************************************************************** */
 
    DCL F$INP                          DCB;
    DCL F$OUT                          DCB;
    DCL M$LO                           DCB;
    DCL M$DO                           DCB;
    DCL M$LM                           DCB;
 
/* ********************************************************************\
*                                                                      *
*   Working Storage.                                                   *
*                                                                      *
\******************************************************************** */
 
    DCL ALT_INP                        BIT(72);
    DCL B$JIT$ SYMREF                  PTR;
    DCL B$TCB$ SYMREF                  PTR;
 
    DCL FPARAMT STATIC                 CHAR(4096);
    DCL INBUF STATIC                   CHAR(256);
    DCL SIBUF STATIC                   CHAR(80);
    DCL OUTFID STATIC                  CHAR(64);
    DCL SN_OUT STATIC                  CHAR(52);
    DCL NAME_OUT STATIC                CHAR(32);
    DCL PASS_OUT STATIC                CHAR(8);
    DCL ACCT_OUT STATIC                CHAR(8);
    DCL RANREL STATIC                  CHAR(4);
 
    DCL I                              SBIN;
    DCL J                              SBIN;
    DCL MAX                            SBIN;
    DCL ARS                            SBIN;
    DCL OUTPTR                         SBIN;
    DCL INPPTR                         SBIN;
    DCL FILEORG                        SBIN;
    DCL ERRCODE STATIC                 SBIN;
    DCL SYSCODE REDEF ERRCODE          BIT(36);
 
    DCL BINMODE                        BIT(1);
 
    DCL 1 FM$FIT BASED ALIGNED,
          2 CODES(0:31),
            3 CODE                     UBIN(5) UNAL,
            3 *                        BIT(1) UNAL,
            3 NAW                      UBIN(10) UNAL,
            3 NDW                      UBIN(10) UNAL,
            3 ITEMX                    UBIN(10) UNAL;
 
    DCL 1 CODE02 BASED ALIGNED,
          2 LSLIDE                     UBIN(9) UNAL,
          2 LRDL0                      UBIN(9) UNAL,
          2 SPARE                      UBIN(9) UNAL,
          2 SLIDE                      UBIN(9) UNAL,
          2 TDALVL                     UBIN(9) UNAL,
          2 TDA                        UBIN(27) UNAL,
          2 *                          BIT(9) UNAL,
          2 GDA                        UBIN(27) UNAL,
          2 KEYX                       UBIN(18) UNAL,
          2 KEYL                       UBIN(9) UNAL;
 
    DCL 1 CODE03 BASED ALIGNED,
          2 ORG                        UBIN(9) UNAL,
          2 UGRANS                     UBIN(27) UNAL,
          2 DESC,
            3 DELF                     BIT(1),
            3 NOLIST                   BIT(1),
            3 BUF                      BIT(1),
            3 TPB                      BIT(1),
            3 BAD                      BIT(1),
            3 *                        BIT(4),
            3 BUPM                     BIT(1),
            3 NBUF                     BIT(1),
            3 QS                       BIT(1),
            3 *                        BIT(6),
          2 TYPE                       CHAR(2) UNAL,
          2 NRECS                      SBIN,
          2 RCSZ                       UBIN(9) UNAL,
          2 NGAVAL                     UBIN(27) UNAL,
          2 COMP                       BIT(1),
          2 *                          BIT(8) UNAL,
          2 LDA                        UBIN(27) UNAL,
          2 XTNSIZE                    UBIN(18) UNAL,
          2 RECL                       UBIN HALF UNAL,
          2 NSTAMP                     UBIN;
 
    DCL 1 SOBUF STATIC,
          2 SHIT                       CHAR(8192),
          2 *                          CHAR(8192),
          2 *                          CHAR(8192),
          2 *                          CHAR(8192);
 
    DCL 1 KEYBUF STATIC,
          2 L UNAL                     UBIN(9),
          2 C UNAL                     CHAR(255);
 
%EJECT;
/* ********************************************************************\
*                                                                      *
*   Fetch and decode (and verify) command.                             *
*                                                                      *
\******************************************************************** */
 
    WHATACCT.ACCT#=DCBADDR(DCBNUM(M$LM))->DUMMY.ACCT#;
    IF WHATACCT.ACCT#<='        ' THEN
        WHATACCT.ACCT#=':SYS    ';
    WHATNAME=DCBADDR(DCBNUM(M$LM))->DUMMY.NAME#;
    ERRCODE=128;
    CALL M$OPEN(OPEN_LO);
    IF NOT DCBADDR(DCBNUM(M$DO))->DUMMY.FCD# THEN
        CALL M$OPEN(OPEN_DO);
    CALL M$CORRES(LOEQDO) ALTRET(LOISDO);
    SYS_ERR.V.OUTDCB2#=DCBNUM(M$LO);
    PRG_ERR.V.OUTDCB2#=DCBNUM(M$LO);
 
LOISDO:
    ARS=B$JIT$->B$JIT.CCARS;
    INBUF=SUBSTR(B$JIT$->B$JIT.CCBUF,0,ARS);
    CALL INDEX1(I,' ',INBUF,1) ALTRET(ERR_NIF);
    DO WHILE(I<ARS AND SUBSTR(INBUF,I,1)=' ');
        I=I+1;
    END;
    IF I>=ARS THEN
        GOTO ERR_NIF;
    CALL INDEX1(J,' ',INBUF,I) ALTRET(ERR_NIF);
    IF SUBSTR(INBUF,I,J-I)~='CR' THEN
        GOTO ERR_BIF;
    OPEN_OUT.V.EXIST#=1;
    I=J;
    DO WHILE(I<ARS AND SUBSTR(INBUF,I,1)=' ');
        I=I+1;
    END;
    IF I>=ARS THEN
        GOTO ERR_HOW;
    CALL INDEX1(J,' ',INBUF,I) ALTRET(ERR_HOW);
    IF SUBSTR(INBUF,I,J-I)='OVER' THEN
        OPEN_OUT.V.EXIST#=3;
    ELSE IF SUBSTR(INBUF,I,J-I)='INTO' THEN
        OPEN_OUT.V.EXIST#=2;
    ELSE IF SUBSTR(INBUF,I,J-I)~='TO' AND SUBSTR(INBUF,I,J-I)~='ON' THEN
        GOTO ERR_HOW;
    I=J;
    DO WHILE(I<ARS AND SUBSTR(INBUF,I,1)=' ');
        I=I+1;
    END;
    IF I>=ARS THEN
        GOTO ERR_NOF;
    CALL INDEX1(J,' ',INBUF,I);
    OUTFID=SUBSTR(INBUF,I,J-I);
    CALL M$FID(FID_OUT) ALTRET(ERR_BOF);
    CALL M$OPEN(OPEN_INP) ALTRET(ERR_INP);
 
%EJECT;
/* ********************************************************************\
*                                                                      *
*   We have opened the input file (CR).  Now we read the input file    *
*   to collect the FIT, which must be the first logical record.  This  *
*   must be done prior to the output file open.                        *
*                                                                      *
\******************************************************************** */
 
    INPPTR=79;
    MAX=0;
    REMEMBER ERR_INP IN ALT_INP;
    CALL MROFER(FPARAMT,4096) ALTRET(ERR_INT);
    IF SUBSTR(SIBUF,0,1)~='F' THEN
        GOTO ERR_FIT;
    IF RESULTS_OUT.ACCT THEN
        CALL M$SPRIV(FPT_PRIV);
    DO I=1 TO ADDR(FPARAMT)->FM$FIT.CODES.CODE(0);
        IF ADDR(FPARAMT)->FM$FIT.CODES.CODE(I)=3 THEN
            GOTO GOT_CD3;
    END;
    GOTO ERR_FIT;
 
GOT_CD3:
    FILEORG=PINCRW(ADDR(FPARAMT),ADDR(FPARAMT)->FM$FIT.CODES.ITEMX(I))
        ->CODE03.ORG;
    CALL M$OPEN(OPEN_OUT) ALTRET(ERR_OUT);
 
%EJECT;
/* ********************************************************************\
*                                                                      *
*   The type of write done depends on the file's organization.  We     *
*   must modify the write FPT to handle keys/no keys, etc.             *
*                                                                      *
\******************************************************************** */
 
    DO CASE(FILEORG);
 
        CASE(1,4,8) /* CONSEC, UR, TERMINAL */;
        ;
 
        CASE(2) /* KEYED */;
 
        WRITE_OUT.KEY_=VECTOR(KEYBUF);
        WRITE_OUT.V.ONEWKEY#='1'B;
 
        CASE(3) /* RANDOM */;
 
        WRITE_OUT.KEY_=VECTOR(RANREL);
 
        CASE(5) /* RELATIVE */;
 
        WRITE_OUT.KEY_=VECTOR(RANREL);
        WRITE_OUT.V.ONEWKEY#='1'B;
 
        CASE(6) /* INDEXED */;
 
        WRITE_OUT.V.ONEWKEY#='1'B;
        DO J=1 TO ADDR(FPARAMT)->FM$FIT.CODES.CODE(0);
            IF ADDR(FPARAMT)->FM$FIT.CODES.CODE(J)=2 THEN
                GOTO GOT_CD2;
        END;
        GOTO ERR_CD2;
 
GOT_CD2:
        WRITE_OUT.KEY_=VECTOR(SUBSTR(SOBUF.SHIT,PINCRW(ADDR(FPARAMT),
            ADDR(FPARAMT)->FM$FIT.CODES.ITEMX(J))->CODE02.KEYX,
            PINCRW(ADDR(FPARAMT),ADDR(FPARAMT)->FM$FIT.CODES.ITEMX(J))
            ->CODE02.KEYL));
 
        CASE(7) /* IDS */;
 
        WRITE_OUT.KEY_=VECTOR(RANREL);
        WRITE_OUT.V.NOTIME#='1'B;
        WRITE_OUT.V.FULL#='1'B;
 
        CASE(ELSE) /* ALL OTHER CODES ARE ILLEGAL! */;
 
        GOTO ERR_UFT;
 
    END;
 
%EJECT;
/* ********************************************************************\
*                                                                      *
*   Read and write the file until EOF.                                 *
*                                                                      *
\******************************************************************** */
 
    DO WHILE('1'B);
        CALL MROFER(SOBUF,32768) ALTRET(ERR_INT);
        IF SUBSTR(SIBUF,0,1)~='D' THEN
            GOTO ERR_INT;
        IF FILEORG=3 OR FILEORG=5 OR FILEORG=7 THEN
            RANREL=KEYBUF.C;
        IF ARS>0 THEN DO;
            WRITE_OUT.BUF_.BOUND=ARS-1;
            WRITE_OUT.BUF_.BUF$=ADDR(SOBUF);
        END;
        ELSE DO;
            WRITE_OUT.BUF_.BOUND=0;
            WRITE_OUT.BUF_.BUF$=ADDR(NIL);
        END;
        IF FILEORG=4 THEN
            WRITE_OUT.V.DVBYTE=ASCBIT(SUBSTR(KEYBUF.C,0,1));
        CALL M$WRITE(WRITE_OUT) ALTRET(ERR_OUT);
    END;
 
SIEOF:
    CALL M$CLOSE(CLOSE_INP) ALTRET(ERR_INP);
    CALL M$CLOSE(CLOSE_OUT) ALTRET(ERR_OUT);
    CALL INDEX1(ARS,'.',OUTFID,0);
    CALL CONCAT(SIBUF,'File ',SUBSTR(OUTFID,0,ARS));
    CALL INDEX1(ARS,' ',SIBUF,5);
    CALL INSERT(SIBUF,ARS,,' successfully BEAMed.');
    CALL M$WRITE(WRITE_LO);
    CALL M$CLOSE(CLOSE_LO);
    CALL M$CLOSE(CLOSE_DO);
    RETURN;
 
%EJECT;
/* ********************************************************************\
*                                                                      *
*   MROFER reads an input "record" and returns it in SOBUF.  Its key   *
*   (if any) is returned in KEYBUF.  For record formats, see BEAM.     *
*   Any error causes an ALTRET.                                        *
*                                                                      *
\******************************************************************** */
 
MROFER: PROC(BFR,SIZ) ALTRET;
    DCL SIZ                            UBIN;
    DCL BFR                            CHAR(SIZ);
    DCL T1                             SBIN;
    DCL T2                             SBIN;
    DCL CH                             CHAR(1);
 
    OUTPTR=0;
    INPPTR=INPPTR+1;
    IF INPPTR>MAX THEN
        CALL FFUTS(0) ALTRET(BAD_INP);
    CH=SUBSTR(SIBUF,INPPTR,1);
    IF CH<'!' THEN
        ALTRETURN;
    IF CH<'4' THEN DO;
        IF CH<'0' THEN
            KEYBUF.L=ASCBIN(CH)-32;
        ELSE DO;
            KEYBUF.L=64*(ASCBIN(CH)-48);
            INPPTR=INPPTR+1;
            IF INPPTR>MAX THEN
                CALL FFUTS(1) ALTRET(BAD_INP);
            CH=SUBSTR(SIBUF,INPPTR,1);
            KEYBUF.L=KEYBUF.L+ASCBIN(CH)-32;
        END;
        DO WHILE(OUTPTR<KEYBUF.L);
            INPPTR=INPPTR+1;
            IF INPPTR>MAX THEN
                CALL FFUTS(1) ALTRET(BAD_INP);
            CH=SUBSTR(SIBUF,INPPTR,1);
            T1=8*(ASCBIN(CH)-32);
            INPPTR=INPPTR+1;
            IF INPPTR>MAX THEN
                CALL FFUTS(1) ALTRET(BAD_INP);
            CH=SUBSTR(SIBUF,INPPTR,1);
            T1=T1+(ASCBIN(CH)-32)/8;
            T2=MOD(ASCBIN(CH),8)*64;
            INPPTR=INPPTR+1;
            IF INPPTR>MAX THEN
                CALL FFUTS(1) ALTRET(BAD_INP);
            CH=SUBSTR(SIBUF,INPPTR,1);
            T2=T2+ASCBIN(CH)-32;
            CALL INSERT(KEYBUF.C,OUTPTR,1,BINASC(T1));
            OUTPTR=OUTPTR+1;
            IF OUTPTR<KEYBUF.L THEN DO;
                CALL INSERT(KEYBUF.C,OUTPTR,1,BINASC(T2));
                OUTPTR=OUTPTR+1;
            END;
        END;
        OUTPTR=0;
        INPPTR=INPPTR+1;
        IF INPPTR>MAX THEN
            CALL FFUTS(1) ALTRET(BAD_INP);
        CH=SUBSTR(SIBUF,INPPTR,1);
    END;
    IF CH<'@' THEN
        ALTRETURN;
    IF CH>='`' THEN DO;
        BINMODE='1'B;
        CH=BINASC(ASCBIN(CH)-32);
    END;
    ELSE
        BINMODE='0'B;
    IF CH<'H' THEN DO;
        ARS=4096*MOD(ASCBIN(CH),8);
        INPPTR=INPPTR+1;
        IF INPPTR>MAX THEN
            CALL FFUTS(1) ALTRET(BAD_INP);
        CH=SUBSTR(SIBUF,INPPTR,1);
        ARS=ARS+64*(ASCBIN(CH)-32);
        INPPTR=INPPTR+1;
        IF INPPTR>MAX THEN
            CALL FFUTS(1) ALTRET(BAD_INP);
        CH=SUBSTR(SIBUF,INPPTR,1);
        ARS=ARS+ASCBIN(CH)-31;
    END;
    ELSE IF CH<'P' THEN DO;
        ARS=64*MOD(ASCBIN(CH),8);
        INPPTR=INPPTR+1;
        IF INPPTR>MAX THEN
            CALL FFUTS(1) ALTRET(BAD_INP);
        CH=SUBSTR(SIBUF,INPPTR,1);
        ARS=ARS+ASCBIN(CH)-31;
    END;
    ELSE IF CH<'_' THEN
        ARS=MOD(ASCBIN(CH),16)+1;
    ELSE
        ARS=0;
    IF BINMODE THEN DO;
        DO WHILE(OUTPTR<ARS);
            INPPTR=INPPTR+1;
            IF INPPTR>MAX THEN
                CALL FFUTS(1) ALTRET(BAD_INP);
            CH=SUBSTR(SIBUF,INPPTR,1);
            T1=8*(ASCBIN(CH)-32);
            INPPTR=INPPTR+1;
            IF INPPTR>MAX THEN
                CALL FFUTS(1) ALTRET(BAD_INP);
            CH=SUBSTR(SIBUF,INPPTR,1);
            T1=T1+(ASCBIN(CH)-32)/8;
            T2=MOD(ASCBIN(CH),8)*64;
            INPPTR=INPPTR+1;
            IF INPPTR>MAX THEN
                CALL FFUTS(1) ALTRET(BAD_INP);
            CH=SUBSTR(SIBUF,INPPTR,1);
            T2=T2+ASCBIN(CH)-32;
            CALL INSERT(BFR,OUTPTR,1,BINASC(T1));
            OUTPTR=OUTPTR+1;
            IF OUTPTR<ARS THEN DO;
                CALL INSERT(BFR,OUTPTR,1,BINASC(T2));
                OUTPTR=OUTPTR+1;
            END;
        END;
    END;
    ELSE DO;
        DO WHILE(OUTPTR<ARS);
            INPPTR=INPPTR+1;
            IF INPPTR>MAX THEN
                CALL FFUTS(1) ALTRET(BAD_INP);
            IF MAX-INPPTR+1<=ARS-OUTPTR THEN DO;
                T1=MAX-INPPTR+1;
                CALL INSERT(BFR,OUTPTR,T1,SUBSTR(SIBUF,INPPTR,T1));
                INPPTR=MAX;
                OUTPTR=OUTPTR+T1;
            END;
            ELSE DO;
                T1=ARS-OUTPTR;
                CALL INSERT(BFR,OUTPTR,T1,SUBSTR(SIBUF,INPPTR,T1));
                INPPTR=INPPTR+T1-1;
                OUTPTR=ARS;
            END;
        END;
    END;
    RETURN;
 
BAD_INP:
    ALTRETURN;
END;
 
%EJECT;
/* ********************************************************************\
*                                                                      *
*   FFUTS reads the input file, checks for invalid characters and      *
*   bad column one data, and resets INPPTR.  If FFUTS is called with   *
*   a parameter of zero, a read error is legal; otherwise, we ALTRET.  *
*                                                                      *
\******************************************************************** */
 
FFUTS: PROC(OOPS) ALTRET;
    DCL OOPS                           SBIN;
    DCL I                              SBIN;
    DCL J                              SBIN;
    DCL 1 BADCHARS CONSTANT,
          2 *(0:31) BIT(9) UNAL INIT('111'O*32),
          2 *(0:31) BIT(9) UNAL INIT('000'O*32),
          2 *(0:31) BIT(9) UNAL INIT('000'O*32),
          2 *(0:31) BIT(9) UNAL INIT('000'O*31,'111'O),
          2 *(0:31) BIT(9) UNAL INIT('111'O*32),
          2 *(0:31) BIT(9) UNAL INIT('111'O*32),
          2 *(0:31) BIT(9) UNAL INIT('111'O*32),
          2 *(0:31) BIT(9) UNAL INIT('111'O*32),
          2 *(0:31) BIT(9) UNAL INIT('111'O*32),
          2 *(0:31) BIT(9) UNAL INIT('111'O*32),
          2 *(0:31) BIT(9) UNAL INIT('111'O*32),
          2 *(0:31) BIT(9) UNAL INIT('111'O*32),
          2 *(0:31) BIT(9) UNAL INIT('111'O*32),
          2 *(0:31) BIT(9) UNAL INIT('111'O*32),
          2 *(0:31) BIT(9) UNAL INIT('111'O*32),
          2 *(0:31) BIT(9) UNAL INIT('111'O*32);
 
REREAD:
    SIBUF=' ';
    CALL M$READ(READ_INP) ALTRET(DECIDE);
    IF DCBADDR(DCBNUM(F$INP))->DUMMY.ARS#=0 THEN
        GOTO REREAD;
    IF DCBADDR(DCBNUM(F$INP))->DUMMY.ARS#<2 THEN
        ALTRETURN;
    IF SUBSTR(SIBUF,0,1)~='F' AND SUBSTR(SIBUF,0,1)~='D' THEN
        ALTRETURN;
    CALL SEARCH(I,J,BADCHARS,SIBUF);
    IF J>0 THEN
        ALTRETURN;
    MAX=ASCBIN(SUBSTR(SIBUF,1,1))-31;
    IF MAX<2 OR MAX>79 THEN
        ALTRETURN;
    INPPTR=2;
    RETURN;
 
DECIDE:
    IF OOPS=0 THEN
        UNWIND TO ALT_INP;
    ALTRETURN;
END;
 
%EJECT;
/* ********************************************************************\
*                                                                      *
*   Error handlers.                                                    *
*                                                                      *
\******************************************************************** */
 
ERR_CD2:
          /*E*   ERROR:  -137-4
               MESSAGE:  No CODE02 entry for INDEXED file.
                         Possible transmit error.  BEAM fails.
          */
    ERRCODE=ERRCODE+1;
 
ERR_UFT:
          /*E*   ERROR:  -136-4
               MESSAGE:  Unimplemented file type.  BEAM fails.
                         Possible tramission error.  Try again.
          */
    ERRCODE=ERRCODE+1;
 
ERR_NIF:
          /*E*   ERROR:  -135-4
               MESSAGE:  No input device specified!
                         I don't think you should be running MAEB.
          */
    ERRCODE=ERRCODE+1;
 
ERR_NOF:
          /*E*   ERROR:  -134-4
               MESSAGE:  No output file named.
                         I don't think you should be running MAEB.
          */
    ERRCODE=ERRCODE+1;
 
ERR_HOW:
          /*E*   ERROR:  -133-4
               MESSAGE:  "how" adverb missing.
                         I don't think you should be running MAEB.
          */
    ERRCODE=ERRCODE+1;
 
ERR_BIF:
          /*E*   ERROR:  -132-4
               MESSAGE:  Oops!  Can't read the input file.
                         System or transmission error!
          */
    ERRCODE=ERRCODE+1;
 
ERR_BOF:
          /*E*   ERROR:  -131-4
               MESSAGE:  Bad output file name.
                         Something is wrong, or BEAM is broken.
          */
    ERRCODE=ERRCODE+1;
 
ERR_INT:
          /*E*   ERROR:  -130-4
               MESSAGE:  Syntax error in input file.  BEAM fails.
                         Possible transmission error.  Try again.
          */
    ERRCODE=ERRCODE+1;
 
ERR_FIT:
          /*E*   ERROR:  -129-4
               MESSAGE:  FIT is missing or mucked up.
                         Possible transmission error.  Try again.
          */
    ERRCODE=ERRCODE+1;
 
    ERRCODE=ERRCODE*8+4;
    CALL M$ERRMSG(PRG_ERR);
    ALTRETURN;
 
ERR_INP:                                /* Error on input file                */
    IF DCBADDR(DCBNUM(F$INP))->DUMMY.TYC.EOF# OR
        DCBADDR(DCBNUM(F$INP))->DUMMY.TYC.EOD# THEN
        GOTO SIEOF;
    SYS_ERR.V.DCB#=DCBNUM(F$INP);
    SYSCODE=B$TCB$->B$TCB.ALT$->B$EXCFR.ERR;
    CALL M$ERRMSG(SYS_ERR);
    ALTRETURN;
 
ERR_OUT:                                /* Error on output file               */
    SYS_ERR.V.DCB#=DCBNUM(F$OUT);
    SYSCODE=B$TCB$->B$TCB.ALT$->B$EXCFR.ERR;
    CALL M$ERRMSG(SYS_ERR);
    ALTRETURN;
 
END;
