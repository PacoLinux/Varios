.*M*
HELP file for: SEAGULL.X
.*T*
 **************************************************************
 *                                                            *
 *  Copyright (c) Bull HN Information Systems Inc., 1989      *
 *                                                            *
 **************************************************************
.*X*                                             
FYI, this HELP file has been specially prepared to run through TUNA.X (LEN=79)
prior to running through HERMAN.  This action will guarantee that the lines of
text in it will fill a screen as much as possible, and that more lines will end
up per screen.
.*R*
.*A*
SEAGULL (C General Utility Lemur Library)  is a "Tool Box" type library to keep
commonly used, and useful functions for C.
 
.*SYNTAX*
.*B* SYNTAX COMMAND_LINE_SYNTAX
Linking syntax:
     !LINK  ;
        object_units, ;
        and_junk_go_here  ;
        (   "options now"  ;
            UNSAT( SEAGULL.X, ...), ;
            "etc" )
 
C source code syntax:
     #include "SEAGULL:h"          /* Must SRCH(.X, ...) on compile */
 
Still have questions?
     !Help (SEAGULL.X) ReadMe      for more information on this Library
     !Help (SEAGULL.X) Catalog     for more information on Library contents
     !Help (SEAGULL.X) SEAGULL:h   for more information on the Header file
 
.*B*
SEAGULL is meant to make building new X account tools, written in C, a quicker
process.  It is the hope of the originator of this library that all developers
will contribute new functions to SEAGULL.  That is the key to making it a real
success.  We should have an ocean of reusable code someday (some pun intended).
 
 
.*K* README USAGE
This Tool Box was created to save time re-writing, or copying code from old
programs, to do the things we always do.  It also should be a place for some
"neat" functions to be kept for public access, and use.
 
For starters, the Tool Box has several variable argument message facilities.
These are for error messages, warnings, debug statements, verbose info, and
just a plain message.  These may, or may not, be to everyone's liking, but
someone can always add a little bit different function to the library.
 
In addition to messages, there are a few utility functions included.  They
are simple little functions, but may be easy to reuse in some code.
 
When updating the Tool Box, please update the CATALOG topic, along with the
CHANGES topic, of this help file.
 
.*B*
It would be a big help to everyone that will be using this Tool Box if new
functions are well commented.  Not so much in-line, but with EXTRACTable
type comments.  With a minimum of *D*, and if a new file is made *P*.   These
should have the NAME:, PURPOSE:, and DESCRIPTION: portions filled in.
 
.*K* NAMING_CONVENTIONS
These are to be considered Guidelines, not "set in concrete" rules.
 
The function names should begin with "sg", then the number of
the SEAGULL source file, followed by the given function name.  This will
follow the CP-6 naming conventions in some fashion, and offer a good
cross reference tool for the library functions.  A double underscore is
also recommeneded; for more unique names, and for consistencies sake.
      ie.   sg1__Error (...)
            sg9__blotto ()
            SG5_PL6_ROUTINE ()
 
If a "nicier" name is desired, one can be #defined in the header file
to get rid of the "fcg" as follows:
      #ifndef  Error
      #define  Error    sg1__Error
      #endif
 
If someone wishes to use the Tool Box, but they don't want to use sg1__Error,
they can "#undef  Error" in their source.  (If they wish to use the word
"Error"; otherwise, they need not bother.)
 
.*B* SOURCE_FILES
The source files are to contain similar types of functions.  The following
files have been defined thus far:
      SEAGULL_SIc1   ==    message reporting functions
      SEAGULL_SIc2   ==    utility functions (time & date stuff now)
      SEAGULL_SIc3   ==    string manipulation functions
      SEAGULL_SIc4   ==    C interface functions to XUU library services
      SEAGULL_SI65   ==    PL-6 interface routines to XUU library services
      SEAGULL_SIc6   ==    Generic symbol table management functions
      SEAGULL_SIx7   ==    not yet used
 
.*K* SEAGULL:h HEADER_FILE
The header file, SEAGULL:h.X, must be included in all source programs that
use the SEAGULL Tool Box.  This is a seperately maintained "tool" of the
X account, and must be updated when things are added to SEAGULL.X.
 
This file basically munge's together all the header files used for the
SEAGULL library into one include file to reside in the X account.
 
Another important item in the header file is the functional prototypes.
And with these, the #define to rename the function to a pleasant format.
Generally, each function should have a prototype statement, and a #define as
a minimum.
 
.*B* ALTERNATIVES
An alternative to including the SEAGULL:h.X Header file is to place the
necessary prototypes into your own Header file.  You can have your own
#define for renaming that way, or you can choose to use the name as-is.
 
.*K* XINDEX
SEAGULL.X
.*R*
AID=PROGRAMMING
.*R*
AID=UTILITY
.*R*
.*K* XINDEX_ABSTRACT
TOOL=SEAGULL
.*R*
SEAGULL is a C General Utility Lemur Library, for quicker tool building.
.*K* OWNER
Jordan Boucher, LADC
 
.*--------------------------------------------------------------------
.*
.*K* CHANGES Changes changes
900718
.*R*
Added XUU interface functions (some PL-6, some C;  from WGE).
Added generic symbol table management (from BJF).
Added generic stack functions (from JTB).
.*B*
900105
.*R*
Submitted to the E02 X account (by JTB).
 
.*K* CATALOG SI1 SEAGULL_SIc1 MESSAGE
   #define            Actual function definition  (in SEAGULL_SIc1)
   -------            ---------------------------------------------
   Error              sg1__Error (char *function_name, char *format, ...)
   Warning            sg1__Warning (char *function_name, char *format, ...)
   Debug              sg1__Debug (char *function_name, char *format, ...)
   Verbose            sg1__Verbose (char *function_name, char *format, ...)
   Message            sg1__Message (char *heading, char *format, ...)
 
.*B* SI2 SEAGULL_SIc2 MISC UTILITY TIME DATE
   #define            Actual function definition  (in SEAGULL_SIc2)
   -------            ---------------------------------------------
   GetTimeAndDate     sg2__GetTimeDate ()
   GetTime            sg2__GetTime ()
   GetDate            sg2__GetDate ()
 
.*B* SI3 SEAGULL_SIc3 STRING CHARACTER
   #define            Actual function definition  (in SEAGULL_SIc3)
   -------            ---------------------------------------------
   StripNewline       sg3__StripNewline (char *string)
   StringToUpper      sg3__StringToUpper (char *string)
   StringToLower      sg3__StringToLower (char *string)
 
.*B* SI4 SEAGULL_SIc4 XUU_C
   #define            Actual function definition  (in SEAGULL_SIc4)
   -------            ---------------------------------------------
   xopen              sg4__xuu_Open ( struct sg4_fileinfo FILEINFO)
   xread              sg4__xuu_Read ( struct sg4_fileinfo FILEINFO)
   xclose             sg4__xuu_Close( struct sg4_fileinfo FILEINFO)
   MakeFid            sg4__MakeFid ( char *dir, char *file, char **new)
   MALLOC             SG4_MALLOC ( char **ptr, int *size)
   FREE               SG4_FREE ( char **ptr)
 
.*B* SI5 SEAGULL_SI65 XUU_PL6
   #define            Actual function definition  (in SEAGULL_SI65)
   -------            ---------------------------------------------
   (none)             SG5_INPUT_OPEN (FILEINFO)
   (none)             SG5_INPUT_READ (FILEINFO)
   (none)             SG5_INPUT_CLOSE (FILEINFO)
   (none)             SG5_SETUP_DCBS (FILEINFO)
   (none)             SG5_GETFILENAME (FILETYPE, SOURCE, UPDATE)
 
.*B* SI6 SEAGULL_SIc6 HASH_TABLE
   #define            Actual function definition  (in SEAGULL_SIc6)
   -------            ---------------------------------------------
                      sg6__LookupSym (hash_table, name, len, enter,
                                      alloc_func()  )
                      sg6__SymbolHash ( name, len)
                      sg6__PrintHashTableStats (name, len)
                      sg6__DumpHashTable (name, len)
