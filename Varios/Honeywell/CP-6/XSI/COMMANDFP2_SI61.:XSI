/*M* COMMAND_FP - TP Command Forms Program written in PL-6  */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/*X* DMR,PLM=3,IND=3,CTI=3,SDI=5,MCL=10,CSI=0,ECI=0 */
COMMAND_FP: PROC MAIN;
 
/**/
/*
   This is the PL-6 version of COMMAND_FP (originally written in FPL).
   This program will not handle hard-copy forms.  Please use original
   Command Forms Program if your system consists of both hardcopy and
   non-hardcopy forms.  This version of COMMAND_FP allows the use of
   windows (horizontal and vertical).
 
   This program was written using mostly AUTO and CONSTANT (no STATIC)
   due to the fact that most TP stations don't use the command forms
   program for anything other than BEGINning another forms program.
   So why have all that STATIC sitting around anyway?
 
   Author:  Marylou Igercich, L.A.D.C.
 
*/
%INCLUDE LCP_6;
%INCLUDE B_ERRORS_C;
%INCLUDE Q_MACRO_C;
%G$EXCFR;
%G$TCB;
DCL G$TCB$ PTR SYMREF;
 
%EQU YES = '1'B;
%EQU NO  = '0'B;
%EQU FIVE = 5;           /* starting physical LINE number for OUTPUT fields */
 
/**/
/*   FPT's for window width, length, whether device is hardcopy,
     and the device's node, port, controller, and device number.  */
/**/
 
%FPT_TRMCTL (FPTN=FPT_TRMCTL_C, DCB=NIL, STCLASS=CONSTANT);
%FPT_TRMCTL (FPTN=FPT@TRMCTL, STCLASS=AUTO);
%VLP_WINDOW (FPTN=VLP@WINDOW, STCLASS=AUTO);
%VLP_TRMCTL (FPTN=VLP@TRMCTL, STCLASS=AUTO);
%FPT_GLINEATTR (FPTN=FPT_GLINEATTR_C, STCLASS=CONSTANT, DCB=MESS$DCB);
%FPT_GLINEATTR (FPTN=FPT@GLINEATTR, STCLASS=AUTO);
%VLP_LINEATTR (FPTN=VLP@LINEATTR, STCLASS=AUTO);
 
%FPT_WAIT (FPTN=WAIT_A_SEC_C, UTYPE=SEC, UNITS=UNITS_IN_SECONDS, STCLASS=CONSTANT);
 
/**/
/*  Open info for F$SCREEN   --  Form DCB
                    H$MSGG   --  Report transaction DCB (Host)
                 H$XACTION   --  Response transaction DCB (Host)
*/
/**/
 
%FPT_OPEN (FPTN=OPEN_SCREEN_C, DCB=F$SCREEN, KEYTYPE=COORD, ORG=FORM,
                RES='UC02', STCLASS=CONSTANT);
%FPT_OPEN (FPTN=OPEN_TRANSACTION_C, DCB=NIL, KEYTYPE=MSGID, ORG=CONSEC,
                RES='HO', STCLASS=CONSTANT);
%FPT_OPEN (FPTN=OPEN@MSGG, STCLASS=AUTO);
%FPT_OPEN (FPTN=OPEN@XACTION, STCLASS=AUTO);
 
/**/
/*  HOST READ and WRITE CG info  */
/**/
 
%FPT_WRITE (FPTN=HOST_WRITE_C, DCB=H$XACTION, RRR=YES, STCLASS=CONSTANT);
%FPT_WRITE (FPTN=HOST@WRITE, STCLASS=AUTO);
 
%FPT_READ  (FPTN=HOST_READ_MSGG_C, DCB=H$MSGG, STCLASS=CONSTANT);
%FPT_READ  (FPTN=HOST@READ_MSGG, STCLASS=AUTO);
 
%FPT_READ  (FPTN=HOST_READ_XACTION_C, DCB=H$XACTION, KEYS=YES, STCLASS=CONSTANT);
%FPT_READ  (FPTN=HOST@READ_XACTION, STCLASS=AUTO);
 
%VLP_CG    (FPTN = VLP_CG_C, STCLASS=CONSTANT);
%VLP_CG    (FPTN=VLP@CG, STCLASS=AUTO);
 
/**/
/*  MISC screen utilities  */
/**/
 
%FPT_ERASE  (FPTN=FPT_ERASE_C, DCB=F$SCREEN, CNS=YES, PRT=YES, STCLASS=CONSTANT);
%FPT_ERASE  (FPTN=FPT@ERASE, STCLASS=AUTO);
%FPT_DEVICE (FPTN=FPT_DEVICE_C, DCB=F$SCREEN, STCLASS=CONSTANT);
%FPT_SLCFLD (FPTN=SEL_COMMAND_C, DCB=F$SCREEN, KEY=COMMAND_FLDID, STCLASS=CONSTANT);
%FPT_MDFFLD (FPTN=COMMAND_ERROR_C, DCB=F$SCREEN, KEY=COMMAND_FLDID,
             SETGRPRND=YES, FLDATR=FLDATR_ERROR_C, STCLASS=CONSTANT);
%VLP_FLDATR (FPTN=FLDATR_ERROR_C, ABSGRPRND=ERROR, STCLASS=CONSTANT);
 
%FPT_MDFFLD (FPTN=COMMAND_INPUT_C, DCB=F$SCREEN, KEY=COMMAND_FLDID,
             SETGRPRND=YES, FLDATR=FLDATR_INPUT_C, STCLASS=CONSTANT);
%VLP_FLDATR (FPTN=FLDATR_INPUT_C, ABSGRPRND=INPUT, STCLASS=CONSTANT);
 
/**/
/*  Screen WRITE  */
/**/
 
%FPT_WRITE (FPTN=FPT_WRITE_C, DCB=F$SCREEN, STCLASS=CONSTANT);
%FPT_WRITE (FPTN=FPT@WRITE, STCLASS=AUTO);
 
/**/
/*  Screen READ */
/**/
 
%FPT_READ (FPTN=READ_COMMAND_C, DCB=F$SCREEN, STCLASS=CONSTANT);
%FPT_READ (FPTN=FPT@READ, STCLASS=AUTO);
 
/**/
/*  Screen CLOSE */
/**/
 
%FPT_CLOSE (FPTN=CLOSE_SCREEN_C, DCB=F$SCREEN, DISP=KEEP, STCLASS=CONSTANT);
%FPT_CLOSE (FPTN=FPT@CLOSE, STCLASS=AUTO);
 
/**/
/*  Field information :   There are three fields we know about
      TITLES0     --   CP-6 Transaction Processing
      TITLES1     --   ?
      COMMAND     --   some TPA command
 
    The number of message output (MSG_OUTPUT) fields is dependent
    upon the screen length.
*/
/**/
 
%FPT_DCLFLD (FPTN=TITLES0_C, DCB=F$SCREEN, ID=0, LIN=1, CLM=1, WDT=26,
                  FLDATR=FLDATR_OUTCNS_C, STCLASS=CONSTANT);
%FPT_DCLFLD (FPTN=TITLES1_C, DCB=F$SCREEN, ID=1, LIN=3, CLM=1, WDT=1,
                  FLDATR=FLDATR_OUTCNS_C, STCLASS=CONSTANT);
%VLP_FLDATR (FPTN=FLDATR_OUTCNS_C, ABSGRPRND=OUTPUT, CNS=YES, PRT=YES, STCLASS=CONSTANT);
 
%FPT_DCLFLD (FPTN=COMMAND_C, DCB=F$SCREEN, ID=2, LIN=3, CLM=3, FLDATR=FLDATR_INPT_C, STCLASS=CONSTANT);
%VLP_FLDATR (FPTN=FLDATR_INPT_C, ABSGRPRND=INPUT, STCLASS=CONSTANT);
 
%FPT_DCLFLD (FPTN=MSG_OUTPUT_C, DCB=F$SCREEN, CLM=1, FLDATR=FLDATR_OTPT_C, STCLASS=CONSTANT);
%VLP_FLDATR (FPTN=FLDATR_OTPT_C, ABSGRPRND=OUTPUT, STCLASS=CONSTANT);
%FPT_DCLFLD (FPTN=FPT@DCLFLD, STCLASS=AUTO);
 
/**/
/*  Macro invocations from Q_MACRO_C.:LIBRARY */
/**/
 
%Q_MESSAGE (FPTN=WRITE_XACTION, STCLASS=AUTO); /* Write from TPA */
%Q_MESSAGE (FPTN=MSGG_RECORD, STCLASS=AUTO); /* MSGG record read */
%Q_FPABT   (FPTN=Q_FPABT, STCLASS=CONSTANT, MSGCNT=3);
%Q_FPABT   (FPTN=Q@FPABT, STCLASS=AUTO, MSGCNT=3);
 
 
/**/
/*   M$INT macro  -- used if user hits CTRL Y  */
/**/
 
%FPT_INT (FPTN=FPT_INT_C, NINT=NINT, STCLASS=CONSTANT);
DCL NINT EPTR CONSTANT INIT(ENTADDR(ERROR_INT));
 
DCL SAVE_MESSAGE CHAR(256) UNAL;        /* Maximum buffer size = 256 */
DCL SAVE_COMMAND CHAR(256) UNAL;
DCL READ_COMMAND CHAR(256) UNAL;
DCL LINES_DISPLAYED UBIN BYTE;          /* Number of fields we've written */
DCL I               UBIN ALIGNED;
DCL MSGID           UBIN(32);           /* Returned CG MSGID from M$WRITE */
 
/**/
/*  Field information for MSG_OUTPUT frame  */
/**/
 
DCL 1 FIELD,                            /* describes info on OUTPUT fields */
         2 NUMBER_OF_LINES UBIN BYTE CALIGNED, /* OUTPUT fields written */
         2 NUMBER_OF_COLUMNS UBIN BYTE CALIGNED, /* Width of field */
         2 WINDOW_DISPLAY_AREA UBIN BYTE CALIGNED, /* Number-of-lines - TP-titles area */
         2 LINE_NO UBIN BYTE CALIGNED,  /* what Line number we're on */
         2 FLDID,                       /* M$DCLFLD returned field id */
              3 LINE UBIN BYTE CALIGNED,
              3 COLUMN UBIN BYTE CALIGNED;
 
DCL 1 FLAGS,
         2 MORE_MSGS BIT(1) UNAL,
         2 TITLES_UP BIT(1) UNAL,
         2 WE_DONT_HAVE_ENTRY BIT(1) UNAL,
         2 HOST_PATH_OPEN BIT(1) UNAL,
         2 MSGLINE_PATH_OPEN BIT(1) UNAL,
         2 CLR_SCRN BIT(1) UNAL,   /* Set if we should erase the INPUT area */
         2 FIRST_READ BIT(1) UNAL,      /* first read after the write flag */
         2 GOT_HEADER BIT(1) UNAL,      /* Have we received the Header yet ? */
         2 STARTUP BIT(1) UNAL,         /* Are we just starting Command_FP*/
         2 * BIT(7) UNAL;
 
/**/
/*  PROGRAM counter stuff not implemented at this time, but will give
    you a feel for how to report that item.
*/
/**/
 
DCL PROGRAM_COUNTER$ PTR;
DCL PROGRAM_COUNTER_DIGITS(0:7) REDEF PROGRAM_COUNTER$ UBIN(4) UNAL;
 
/**/
/*  Some CONSTANT DCL's  */
/**/
 
DCL TP_TITLES_DISPLAY_AREA UBIN BYTE CONSTANT INIT (%FIVE);
DCL 1 COMMAND_FLDID CONSTANT,
         2 LINE UBIN BYTE CALIGNED INIT(3),
         2 COLUMN UBIN BYTE CALIGNED INIT(3);
DCL UNITS_IN_SECONDS       UBIN WORD CONSTANT INIT(1);
DCL HEX_TABLE              CHAR(16) CONSTANT INIT('0123456789ABCDEF');
DCL TRANSACTION_GREETING   CHAR(26) CONSTANT INIT('CP6 Transaction Processing');
DCL QUESTION_MARK_PROMPT   CHAR(1) CONSTANT INIT('?');
 
/**/
/*  External PROCedures  */
/**/
 
DCL CREATE_THE_MESSAGE_LINE ENTRY ALTRET;
DCL STOP_WRITE              ENTRY(2);
DCL STOP_ERASE              ENTRY;
DCL STOP                    ENTRY(2);
DCL ERROR_INT               ENTRY ASYNC;
 
/**/
/*  DCB information  */
/**/
 
DCL MESS$DCB  DCB;                      /* Message Line DCB           */
DCL H$MSGG    DCB;                      /* Read DCB for MSGG rpt type */
DCL H$XACTION DCB;                      /* Read/Write DCB to HOST     */
DCL F$SCREEN  DCB;                      /* Read/Write DCB to SCREEN   */
DCL MSG_LINE_DCB# UBIN CONSTANT SYMDEF INIT (DCBNUM(MESS$DCB));
 
/**/
/*  COMMAND_XACTION is the buffer used to send TPA commands
    to TPA.  Message type TPA reads for is *TPCMD
*/
/**/
 
DCL 1  COMMAND_XACTION,
         2 TEXT  CHAR(80) UNAL,
         2 FILLER CHAR(03) UNAL;
 
/**/
/*    begin procedure  */
/**/
 
   CALL M$INT (FPT_INT_C);
   FLAGS = %NO;
   FLAGS.FIRST_READ = %YES;             /* This is our FIRST_READ */
   FLAGS.STARTUP = %YES;                /* We are just starting */
   FLAGS.CLR_SCRN = %YES;               /* Set default to YES */
   LINES_DISPLAYED = 0;
   SAVE_MESSAGE = ' ';
   SAVE_COMMAND = ' ';
 
   OPEN@MSGG = OPEN_TRANSACTION_C;
   VBASE(OPEN@MSGG.V_) = ADDR(OPEN@MSGG.V);
   OPEN@MSGG.V.DCB# = DCBNUM(H$MSGG);
 
   CALL M$OPEN (OPEN@MSGG) WHENALTRETURN DO;
      CALL ERROR;
      END;
 
   OPEN@XACTION = OPEN_TRANSACTION_C;
   VBASE(OPEN@XACTION.V_) = ADDR(OPEN@XACTION.V);
   OPEN@XACTION.V.DCB# = DCBNUM(H$XACTION);
 
   CALL M$OPEN (OPEN@XACTION) WHENALTRETURN DO;
      CALL ERROR;
      END;
 
   FLAGS.HOST_PATH_OPEN = %YES;
   CALL CREATE_THE_MESSAGE_LINE WHENALTRETURN DO;
      CALL ERROR;
      END;
   FLAGS.MSGLINE_PATH_OPEN = %YES;
 
   FPT@TRMCTL = FPT_TRMCTL_C;
   VBASE(FPT@TRMCTL.V_) = ADDR(FPT@TRMCTL.V);
   FPT@TRMCTL.V.DCB# = MSG_LINE_DCB#;
   FPT@TRMCTL.TRMCTL_ = VECTOR( VLP@TRMCTL );
   FPT@TRMCTL.V.VLPTYPE = %G_TRMCTL_TRMCTL#;
   CALL M$GTRMCTL (FPT@TRMCTL) WHENALTRETURN DO;
      CALL ERROR;
      END;
 
   IF VLP@TRMCTL.RETYPOVR
   THEN
/*   DEVICE IS NOT HARDCOPY     */;
   ELSE DO;
 
         /*    DEVICE IS HARDCOPY        */
      CALL M$EXIT;
 
      END;
   CALL TITLE_SETUP_800 WHENALTRETURN DO;
      CALL ERROR;
      END;
   VLP@CG = VLP_CG_C;
   HOST@WRITE = HOST_WRITE_C;
   VBASE(HOST@WRITE.V_) = ADDR(HOST@WRITE.V);
   HOST@WRITE.CG_ = VECTOR(VLP@CG);
   VLP@CG.MSGTYP# = '*IAMRDY';
   COMMAND_XACTION.TEXT = ' ';
   /*  get node, port, controller, device num to pass to TPA  */
   FPT@GLINEATTR = FPT_GLINEATTR_C;
   VBASE(FPT@GLINEATTR.V_) = ADDR(FPT@GLINEATTR.V);
   FPT@GLINEATTR.LINEATTR_ = VECTOR(VLP@LINEATTR);
   CALL M$GLINEATTR (FPT@GLINEATTR) WHENALTRETURN DO;
      CALL ERROR;
      END;
   CALL CONCAT (COMMAND_XACTION.TEXT, VLP@LINEATTR.NODE,
      VLP@LINEATTR.PORT,
      VLP@LINEATTR.CONTROLLER,
      VLP@LINEATTR.DEVICE);
   CALL INDEX (I, ' ', COMMAND_XACTION.TEXT);
   HOST@WRITE.BUF_ = VECTOR(COMMAND_XACTION);
   VBOUND (HOST@WRITE.BUF_ ) = I-1;
   CALL M$WRITE (HOST@WRITE);
   MSGID = VLP@CG.MSGID#;
   CALL CLEAR_SCREEN WHENALTRETURN DO;
      CALL ERROR;
      END;
 
READ_TPA:
   DO WHILE (%YES);
 
      WRITE_XACTION.TEXT# = ' ';
      VLP@CG = VLP_CG_C;
      VLP@CG.MSGID# = MSGID;
      VLP@CG.MSGTYP# = '*RESP?';
      HOST@READ_XACTION = HOST_READ_XACTION_C;
      VBASE(HOST@READ_XACTION.V_) = ADDR(HOST@READ_XACTION.V);
      HOST@READ_XACTION.KEY_ = VECTOR(VLP@CG.MSGID#);
      HOST@READ_XACTION.CG_ = VECTOR(VLP@CG);
      HOST@READ_XACTION.BUF_ = VECTOR(WRITE_XACTION);
 
       /* NODAT is %NO the FIRST_READ or on any read at STARTUP,
         :. NODAT = (~FIRST_READ) & (~STARTUP)  */
      IF ( NOT FLAGS.FIRST_READ) AND (NOT FLAGS.STARTUP)
      THEN HOST@READ_XACTION.V.DVBYTE.NODAT = %YES;
      ELSE HOST@READ_XACTION.V.DVBYTE.NODAT = %NO;
 
      CALL M$READ (HOST@READ_XACTION) WHENALTRETURN DO;
         IF G$TCB$ -> G$TCB.ALT$ -> G$EXCFR.TRLR.ERR.ERR# = %E$NODAT /*E$NODAT */
         THEN
            GOTO RD_SCRN;     /* Someone cancelled our input.  get next CMD */
         ELSE
            CALL ERROR;            /* something else happened.  Blow us away */
 
         END;
 
 
       /* we have done at least one read :. it can't be FIRST READ*/
      FLAGS.FIRST_READ = %NO;
 
      DO SELECT (WRITE_XACTION.FUNCTION#);
 
      SELECT ('001');
         IF (FLAGS.STARTUP) AND (FLAGS.GOT_HEADER) THEN
            CALL STOP ('Hit return to continue', 22);
 
         CALL BEGIN_200;
      SELECT ('002');
         IF (FLAGS.STARTUP) THEN
            FLAGS.GOT_HEADER = %YES;
         FLAGS.CLR_SCRN = %NO;
         CALL PRINT_MSG_400 WHENALTRETURN DO;
            CALL ERROR;
            END;
      SELECT ('003');
RD_SCRN: CALL READ_COMMAND_600 WHENALTRETURN DO;
            CALL ERROR;
            END;
      SELECT ('004');
         CALL REPORT_STATIONMAX_700;
      SELECT ('005');
         IF (FLAGS.STARTUP) THEN
            FLAGS.GOT_HEADER = %YES;
         CALL PRINT_MSG_400 WHENALTRETURN DO;
            CALL ERROR;
            END;
 
      END;
 
      END;
BEGIN_200: PROC;
  /*  user typed in BEGIN forms_program_type  */
   FPT@CLOSE = CLOSE_SCREEN_C;
   VBASE(FPT@CLOSE.V_) = ADDR(FPT@CLOSE.V);
   CALL M$CLOSE (FPT@CLOSE) WHENALTRETURN DO;
      CALL ERROR;
      END;
   CALL M$EXIT;
END BEGIN_200;
 
PRINT_MSG_400: PROC ALTRET;
 
   CALL TITLE_SETUP_800 ALTRET(ALT);
   SAVE_MESSAGE = WRITE_XACTION.TEXT#;
   CALL PRINT_LINE_800 ALTRET(ALT);
   RETURN;
 
ALT:
   ALTRETURN;
 
END PRINT_MSG_400;
 
READ_COMMAND_600: PROC ALTRET;
 
   /* We have received permission from TPA to accept commands,
      Therefore STARTUP is over.                               */
   FLAGS.STARTUP = %NO;
 
   CALL TITLE_SETUP_800 ALTRET(ALT);
   FLAGS.MORE_MSGS = %YES;
   DO UNTIL FLAGS.MORE_MSGS = %NO;
 
      CALL GET_PRINT_MSG_800 ALTRET(ALT);
 
      END;
 
/*  Read the message input field, this is a MUST ENTER field if
    there is no data there
*/
   CALL READ_COMMAND_FIELD ALTRET(ALT);
   SAVE_COMMAND = READ_COMMAND;
   CALL CLEAR_SCREEN ALTRET(ALT);
   LINES_DISPLAYED = 0;
 
   VLP@CG = VLP_CG_C;
   VLP@CG.MSGTYP# = '*TPCMD';
   HOST@WRITE = HOST_WRITE_C;
   VBASE(HOST@WRITE.V_) = ADDR(HOST@WRITE.V);
   HOST@WRITE.CG_ = VECTOR(VLP@CG);
   HOST@WRITE.BUF_ = VECTOR(SAVE_COMMAND);
   CALL M$WRITE (HOST@WRITE);
   MSGID = VLP@CG.MSGID#;
 
       /* This is the first READ after the WRITE to HOST */
   FLAGS.FIRST_READ = %YES;
 
   RETURN;
 
ALT:
   ALTRETURN;
END READ_COMMAND_600;
 
REPORT_STATIONMAX_700: PROC;
 
   CALL STOP_WRITE (
      'No more TP users allowed.  Maximum station count exceeded.', 58);
   CALL M$WAIT (WAIT_A_SEC_C);
   CALL M$EXIT;
 
END REPORT_STATIONMAX_700;
 
TITLE_SETUP_800: PROC ALTRET;
 
   IF NOT(FLAGS.TITLES_UP) THEN DO;
 
      CALL M$OPEN(OPEN_SCREEN_C) ALTRET(ALT);
      FPT@TRMCTL = FPT_TRMCTL_C;
      VBASE(FPT@TRMCTL.V_) = ADDR(FPT@TRMCTL.V);
      FPT@TRMCTL.V.DCB# = DCBNUM( F$SCREEN );
      FPT@TRMCTL.TRMCTL_ = VECTOR( VLP@WINDOW );
      FPT@TRMCTL.V.VLPTYPE = %G_TRMCTL_WINDOW#;
      CALL M$GTRMCTL (FPT@TRMCTL) ALTRET(ALT);
 
      FIELD.NUMBER_OF_LINES = VLP@WINDOW.LENGTH;
      FIELD.NUMBER_OF_COLUMNS = VLP@WINDOW.WIDTH;
      FIELD.WINDOW_DISPLAY_AREA = FIELD.NUMBER_OF_LINES - TP_TITLES_DISPLAY_AREA;
 
/*  DCL the fields, note that the number of fields for MSG_OUTPUT_C
    will depend on the screen length.
*/
 
      CALL M$DCLFLD (TITLES0_C) ALTRET(ALT);
 
      CALL M$DCLFLD (TITLES1_C) ALTRET(ALT);
 
      FPT@DCLFLD = COMMAND_C;
      VBASE(FPT@DCLFLD.V_) = ADDR(FPT@DCLFLD.V);
      FPT@DCLFLD.V.WDT = FIELD.NUMBER_OF_COLUMNS - 2;
      CALL M$DCLFLD (FPT@DCLFLD) ALTRET(ALT);
 
      FIELD.FLDID.LINE = %FIVE;         /*  Starting FLDID for M$DCLFLD  */
      DO I=0 TO FIELD.WINDOW_DISPLAY_AREA - 1;
 
         FPT@DCLFLD = MSG_OUTPUT_C;
         VBASE(FPT@DCLFLD.V_) = ADDR(FPT@DCLFLD.V);
         FPT@DCLFLD.V.WDT = FIELD.NUMBER_OF_COLUMNS;
         FPT@DCLFLD.V.ID  = FIELD.FLDID.LINE;
         FPT@DCLFLD.V.LIN = FIELD.FLDID.LINE;
 
         CALL M$DCLFLD (FPT@DCLFLD) ALTRET(ALT);
 
         FIELD.FLDID.LINE = FIELD.FLDID.LINE + 1;
 
         END;
 
      FIELD.FLDID.COLUMN = 1;
      FLAGS.TITLES_UP = %YES;
/*  Write out the two titles  */
 
      FPT@WRITE = FPT_WRITE_C;
      VBASE(FPT@WRITE.V_) = ADDR(FPT@WRITE.V);
      FPT@WRITE.BUF_ = VECTOR(TRANSACTION_GREETING);
      FPT@WRITE.KEY_ = VECTOR(FIELD.FLDID);
      FIELD.FLDID.LINE = 1;
      FIELD.FLDID.COLUMN = 1;
 
      CALL M$WRITE(FPT@WRITE) ALTRET(ALT);
 
      FPT@WRITE.BUF_ = VECTOR(QUESTION_MARK_PROMPT);
      FIELD.FLDID.LINE = 3;
 
      CALL M$WRITE(FPT@WRITE) ALTRET(ALT);
/*
   If you don't do an M$DEVICE here, nothing will show up until
   a READ is done... no good for us
*/
      CALL M$DEVICE (FPT_DEVICE_C);
      RETURN;
ALT:
      ALTRETURN;
 
      END;
END TITLE_SETUP_800;
 
PRINT_LINE_800: PROC ALTRET;
 
   LINES_DISPLAYED = LINES_DISPLAYED + 1;
   IF LINES_DISPLAYED = FIELD.WINDOW_DISPLAY_AREA THEN
   DO;
 
      LINES_DISPLAYED = 0;
      CALL STOP ('Hit return to continue', 22);
      CALL CLEAR_SCREEN ALTRET(ALT);
 
      END;
 
    /*  Write message to field(n), 1 <=n <= window_display_area */
   FPT@WRITE = FPT_WRITE_C;
   VBASE(FPT@WRITE.V_) = ADDR(FPT@WRITE.V);
   FPT@WRITE.BUF_ = VECTOR(SAVE_MESSAGE);
   FPT@WRITE.KEY_ = VECTOR(FIELD.FLDID);
 
   CALL M$WRITE(FPT@WRITE) ALTRET(ALT);
   CALL M$DEVICE(FPT_DEVICE_C);
   FIELD.FLDID.LINE = FIELD.FLDID.LINE + 1;
   RETURN;
 
ALT:
   ALTRETURN;
 
END PRINT_LINE_800;
 
GET_PRINT_MSG_800: PROC ALTRET;
 
   HOST@READ_MSGG = HOST_READ_MSGG_C;
   VBASE(HOST@READ_MSGG.V_) = ADDR(HOST@READ_MSGG.V);
   HOST@READ_MSGG.BUF_ = VECTOR(MSGG_RECORD);
   HOST@READ_MSGG.V.DVBYTE.NODAT = %YES;
 
   VLP@CG = VLP_CG_C;
 
   VLP@CG.MSGTYP# = 'MSGG';
   HOST@READ_MSGG.CG_ = VECTOR(VLP@CG);
   CALL M$READ(HOST@READ_MSGG) WHENRETURN
   DO;
 
      SAVE_MESSAGE = MSGG_RECORD.TEXT#;
      CALL PRINT_LINE_800 ALTRET(ALT);
      RETURN;
 
      END;
   WHENALTRETURN                        /*  if not nodat then big problem  */
   DO;
 
      IF G$TCB$ -> G$TCB.ALT$ -> G$EXCFR.TRLR.ERR.ERR# = %E$NODAT /*E$NODAT */
      THEN
      DO;
         FLAGS.MORE_MSGS = %NO;
         RETURN;
         END;
      ELSE
         GOTO ALT;
 
      END;
 
ALT:
   ALTRETURN;
END GET_PRINT_MSG_800;
 
CLEAR_SCREEN: PROC ALTRET;
 
   FIELD.FLDID.LINE = %FIVE;
   FIELD.FLDID.COLUMN = 1;
   DO I=0 TO FIELD.WINDOW_DISPLAY_AREA - 1;
 
      FPT@ERASE = FPT_ERASE_C;
      VBASE(FPT@ERASE.V_) = ADDR(FPT@ERASE.V);
      FPT@ERASE.KEY_ = VECTOR(FIELD.FLDID);
      CALL M$ERASE (FPT@ERASE) ALTRET(ALT);
      FIELD.FLDID.LINE = FIELD.FLDID.LINE + 1;
 
      END;
   FIELD.FLDID.LINE = %FIVE;
   FIELD.FLDID.COLUMN = 1;
   RETURN;
ALT:
   ALTRETURN;
 
END CLEAR_SCREEN;
 
READ_COMMAND_FIELD: PROC ALTRET;
 
   IF (FLAGS.CLR_SCRN) THEN DO;
      FPT@ERASE = FPT_ERASE_C;
      VBASE(FPT@ERASE.V_) = ADDR(FPT@ERASE.V);
      FPT@ERASE.KEY_ = VECTOR(COMMAND_FLDID);
      CALL M$ERASE (FPT@ERASE) ALTRET(ALT);
      END;
   FLAGS.CLR_SCRN = %YES;               /* Set default to YES */
 
   CALL M$SLCFLD (SEL_COMMAND_C) ALTRET(ALT);
   READ_COMMAND = ' ';
 
   FPT@READ = READ_COMMAND_C;
   VBASE(FPT@READ.V_) = ADDR(FPT@READ.V);
   FPT@READ.BUF_ = VECTOR(READ_COMMAND);
   FPT@READ.KEY_ = VECTOR(FIELD.FLDID);
   FPT@READ.V.KEYR = %YES;
 
   DO WHILE (%YES);
      CALL M$READ (FPT@READ) ALTRET(CHECK_ENTRY_REQUIRED);
      END;
 
CHECK_ENTRY_REQUIRED:
 
   FLAGS.WE_DONT_HAVE_ENTRY = %YES;
   DO WHILE (FLAGS.WE_DONT_HAVE_ENTRY);
 
      IF READ_COMMAND = ' ' THEN DO;
 
         CALL M$DEVICE (FPT_DEVICE_C);
         CALL STOP_WRITE('Entry Required', 14);
         CALL CHANGE_ATTRIBUTES_AND_REREAD ALTRET(ALT);
 
         END;
      ELSE DO;
 
         FLAGS.WE_DONT_HAVE_ENTRY = %NO;
 
         END;
 
      END;
 
   RETURN;
 
ALT:
   ALTRETURN;
 
END READ_COMMAND_FIELD;
 
CHANGE_ATTRIBUTES_AND_REREAD: PROC ALTRET;
 
   CALL M$SLCFLD (SEL_COMMAND_C) ALTRET(ALT);
 
    /*  Modify with the ERROR attribute in ABSGRPRND  */
   CALL M$MDFFLD(COMMAND_ERROR_C);
    /* and read field again */
   READ_COMMAND = ' ';
   FPT@READ = READ_COMMAND_C;
   VBASE(FPT@READ.V_) = ADDR(FPT@READ.V);
   FPT@READ.BUF_ = VECTOR(READ_COMMAND);
   FPT@READ.KEY_ = VECTOR(COMMAND_FLDID);
   FPT@READ.V.KEYS = %YES;
 
   DO WHILE (%YES);
      CALL M$READ(FPT@READ) ALTRET(REMODIFY_FIELD);
      END;
REMODIFY_FIELD:
 
   CALL M$MDFFLD(COMMAND_INPUT_C);
/*  Erase the message line  */
   CALL STOP_ERASE;
   RETURN;
 
ALT:
   ALTRETURN;
 
END CHANGE_ATTRIBUTES_AND_REREAD;
 
ERROR: PROC;
 
   Q@FPABT = Q_FPABT;
   Q@FPABT.MSGCNT# = 3;
   Q@FPABT.MSGS.ERR(2) = G$TCB$ -> G$TCB.ALT$ -> G$EXCFR.TRLR.ERR;
 
   PROGRAM_COUNTER$ = G$TCB$ -> G$TCB.ALT$ -> G$EXCFR.P$;
   DO I=0 TO 7;
      SUBSTR(Q@FPABT.MSGS.U1.NAME#(1), I, 1) =
         SUBSTR(HEX_TABLE, PROGRAM_COUNTER_DIGITS(I), 1);
      END;
 
/* open pathway to HOST for writing error message.  If that doesn't
   work, open path to the message line; else give up.
*/
 
   IF NOT (FLAGS.HOST_PATH_OPEN) THEN
   DO;
 
      OPEN@XACTION = OPEN_TRANSACTION_C;
      VBASE(OPEN@XACTION.V_) = ADDR(OPEN@XACTION.V);
      OPEN@XACTION.V.DCB# = DCBNUM(H$XACTION);
 
      CALL M$OPEN (OPEN@XACTION) WHENALTRETURN DO;
 
         IF NOT (FLAGS.MSGLINE_PATH_OPEN) THEN
         DO;
 
            OPEN@XACTION.V.DCB# = MSG_LINE_DCB#;
            CALL M$OPEN (OPEN@XACTION) WHENALTRETURN DO;
 
               CALL M$XXX;
 
               END;
            END;
         END;
      END;
 
   VLP@CG = VLP_CG_C;
   VLP@CG.MSGTYP# = '*FPABT';           /* Message type TPA will read for */
   HOST@WRITE = HOST_WRITE_C;
   VBASE(HOST@WRITE.V_) = ADDR(HOST@WRITE.V);
   HOST@WRITE.CG_ = VECTOR(VLP@CG);
   HOST@WRITE.BUF_ = VECTOR (Q@FPABT);
   HOST@WRITE.V.DCB# = OPEN@XACTION.V.DCB#;
 
   CALL M$WRITE (HOST@WRITE) WHENALTRETURN DO;
 
      CALL M$XXX;
 
      END;
   CALL M$ERR;
 
END ERROR;
END COMMAND_FP;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
STOP_ERASE: PROC;
%INCLUDE LCP_6;
DCL BLANK CONSTANT UBIN BYTE INIT(ASCBIN(' '));
DCL MSG_LINE_DCB# UBIN SYMREF;
 
%FPT_WRITE(FPTN=FPT_WRITE_C, STCLASS=CONSTANT, DCB=NIL);
%FPT_WRITE(FPTN=FPT@WRITE, STCLASS=AUTO);
 
   FPT@WRITE = FPT_WRITE_C;
   VBASE(FPT@WRITE.V_) = ADDR(FPT@WRITE.V);
   FPT@WRITE.V.DCB# = MSG_LINE_DCB#;
   FPT@WRITE.BUF_ = VECTOR(BLANK);
 
   CALL M$WRITE(FPT@WRITE);
 
END STOP_ERASE;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
STOP: PROC (MESSAGE, LENGTH);
%INCLUDE LCP_6;
 
DCL LENGTH UBIN;
DCL MESSAGE CHAR(LENGTH);
DCL MSG_LINE_DCB# UBIN SYMREF;
 
%FPT_WRITE(FPTN=FPT_WRITE_C, DCB=NIL, STCLASS=CONSTANT);
%FPT_WRITE(FPTN=FPT@WRITE, STCLASS=AUTO);
%FPT_READ (FPTN=FPT_READ_C, DCB=NIL, STCLASS=CONSTANT);
%FPT_READ (FPTN=FPT@READ, STCLASS=AUTO);
 
DCL INPT CHAR(1) UNAL;
 
   FPT@READ = FPT_READ_C;
   VBASE(FPT@READ.V_) = ADDR(FPT@READ.V);
   FPT@READ.V.DCB# = MSG_LINE_DCB#;
   FPT@READ.BUF_ = VECTOR(INPT);
 
   FPT@WRITE = FPT_WRITE_C;
   VBASE(FPT@WRITE.V_) = ADDR(FPT@WRITE.V);
   FPT@WRITE.V.DCB# = MSG_LINE_DCB#;
   FPT@WRITE.BUF_ = VECTOR(MESSAGE);
 
   CALL M$WRITE(FPT@WRITE) ALTRET(ALT);
   CALL M$READ(FPT@READ) ALTRET(ALT);
 
ALT:
END STOP;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
STOP_WRITE: PROC(MESSAGE,LENGTH);
%INCLUDE LCP_6;
DCL LENGTH UBIN;
DCL MESSAGE CHAR(LENGTH);
DCL MSG_LINE_DCB# UBIN SYMREF;
 
%FPT_WRITE(FPTN=FPT_WRITE_C, DCB=NIL, STCLASS=CONSTANT);
%FPT_WRITE(FPTN=FPT@WRITE, STCLASS=AUTO);
 
   FPT@WRITE = FPT_WRITE_C;
   VBASE(FPT@WRITE.V_) = ADDR(FPT@WRITE.V);
   FPT@WRITE.V.DCB# = MSG_LINE_DCB#;
   FPT@WRITE.BUF_ = VECTOR(MESSAGE);
 
   CALL M$WRITE(FPT@WRITE);
 
END STOP_WRITE;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
CREATE_THE_MESSAGE_LINE: PROC ALTRET;
%INCLUDE NK_VFC_C;
 
DCL MSG_LINE_DCB# UBIN SYMREF;
%INCLUDE LCP_6;
%INCLUDE CP_6_SUBS;
 
%FPT_OPEN   (FPTN=FPT_OPEN_C, STCLASS=CONSTANT);
%FPT_OPEN   (FPTN=FPT@OPEN, STCLASS=AUTO);
%FPT_PROMPT (FPTN=FPT_PROMPT_C, DCB=NIL, VFC=YES, STCLASS=CONSTANT);
%FPT_PROMPT (FPTN=FPT@PROMPT, STCLASS=AUTO);
DCL VLP_PROMPT CHAR(1) CONSTANT INIT('@');
%FPT_TRMCTL (FPTN=FPT_TRMCTL_C, DCB=NIL, STCLASS=CONSTANT);
%FPT_TRMCTL (FPTN=FPT@TRMCTL, STCLASS=AUTO);
%VLP_TRMCTL (FPTN=VLP_TRMCTL_C, PAGEHALT=NO, STCLASS=CONSTANT);
%VLP_TRMCTL (FPTN=VLP@TRMCTL, STCLASS=AUTO);
 
   FPT@OPEN = FPT_OPEN_C;
   VBASE(FPT@OPEN.V_) = ADDR(FPT@OPEN.V);
   FPT@OPEN.V.DCB# = MSG_LINE_DCB#;
   FPT@OPEN.V.ORG = %TERMINAL#;
   FPT@OPEN.V.RES = 'UC01';
   FPT@OPEN.V.DVFC = %VFC_TRANSITION0;
 
   CALL M$OPEN ( FPT@OPEN )
   WHENALTRETURN
   DO;
      GOTO ALT;
      END;
 
   FPT@PROMPT = FPT_PROMPT_C;
   VBASE(FPT@PROMPT.V_) = ADDR(FPT@PROMPT.V);
   FPT@PROMPT.V.DCB# = MSG_LINE_DCB#;
   FPT@PROMPT.PROMPT_ = VECTOR ( VLP_PROMPT );
 
   CALL M$PROMPT ( FPT@PROMPT )
   WHENALTRETURN
   DO;
      GOTO ALT;
      END;
 
   FPT@TRMCTL = FPT_TRMCTL_C;
   VBASE(FPT@TRMCTL.V_) = ADDR(FPT@TRMCTL.V);
   VLP@TRMCTL = VLP_TRMCTL_C;
   FPT@TRMCTL.V.DCB# = MSG_LINE_DCB#;
   FPT@TRMCTL.TRMCTL_ = VECTOR(VLP@TRMCTL);
 
   CALL M$STRMCTL ( FPT@TRMCTL )
   WHENALTRETURN
   DO;
      GOTO ALT;
      END;
 
   RETURN;
 
ALT:
   ALTRETURN;
END CREATE_THE_MESSAGE_LINE;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
ERROR_INT: PROC ASYNC;
%INCLUDE LCP_6;
%G$EXCFR;
%G$TCB;
DCL G$TCB$ PTR SYMREF;
%FPT_EXIT (FPTN=FPT_EXIT_C, STEPCC=G_SKIP#, STCLASS=CONSTANT);
 
   IF G$TCB$ -> G$TCB.STK$ -> G$EXCFR.TRLR.SUBC = %G_YCSC# THEN
 
      CALL M$EXIT (FPT_EXIT_C);
 
   RETURN;
 
END ERROR_INT;
