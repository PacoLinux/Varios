/*M* OMLET Our Mail List Expansion Tool MAIN PROCEDURE */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* DMR,PLM=5,IND=5,CTI=5,SDI=5,MCL=10,CSI=0,ECI=0,DTI=2*/
 
DRIVER : PROC MAIN;
 
              /*P*  NAME : LIST EXPANSION TOOL
                    PURPOSE : TO EXPAND ALL SUBSETS OF GLOBAL MAIL LISTS
                    DESCRIPTION : THE USER WILL BE ABLE TO GET A LISTING
                                  OF ALL OF THE SUBSETS OF MAJOR GLOBAL
                                  MAIL LISTS IN HIS DIRECTORY. */
 
              /*D*  NAME : OMLET
                    CALL : NONE - MAIN PROCEDURE
                    INTERFACE :
                  */
      %EJECT;
 
              %INCLUDE CP_6;
              %INCLUDE CP_6_SUBS;
              %INCLUDE B$JIT;
              %INCLUDE B_ERRORS_C;
              %INCLUDE *OMLET_DATA_R;
 
              %B$TCB;              /* generates the based structure for TCB. */
              %B$ALT;        /* generates the based structure of the altret
                                frame of the TCB. */
 
              %VLP_NAME(FPTN=FILE_NAME);
              %VLP_ACCT(FPTN=FILE_ACCT);
              %VLP_PASS(FPTN=FILE_PASS);
              %VLP_SN(FPTN=FILE_SN);
              %VLP_WSN(FPTN=FILE_WSN);
              %FPT_FID (FPTN=FILE_FID,
                        NAME=FILE_NAME,
                        ACCT=FILE_ACCT,
                        PASS=FILE_PASS,
                        WSN=FILE_WSN,
                        SN=FILE_SN,
                        RES=FILE_OPEN.V.RES#,
                        ASN=FILE_OPEN.V.ASN#);
 
              %FPT_OPEN(FPTN=FILE_OPEN,
                        DCB=M$SI,
                        NAME=FILE_NAME,
                        ACCT=FILE_ACCT,
                        PASS=FILE_PASS,
                        WSN=FILE_WSN,
                        SN=FILE_SN);
              %FPT_REW(FPTN=REWIND_INPUT_FILE,
                       DCB=M$SI);
 
 
              %FPT_READ(FPTN=FILE_READ,
                         DCB=M$SI,
                         BUF=IO_BUF,
                         STRPVFC=YES,
                         WAIT=YES);
 
 
              %FPT_CLOSE(FPTN=FILE_CLOSE,
                         DISP=SAVE,
                         DCB=M$SI,
                         NAME=FILE_NAME,
                         ACCT=FILE_ACCT,
                         PASS=FILE_PASS,
                         SN=FILE_SN);
              %FPT_WRITE(FPTN=OUT_MES,
                         DCB=M$OUT,
                         BUF=ERR_BUF,
                         WAIT=YES);
 
 
DCL  EXPAND                   ENTRY(3);
DCL  BLANKS                   CHAR(1);
DCL  B$JIT$                   PTR  SYMREF;
DCL  B$TCB$                   PTR  SYMREF;
DCL  ERR_BUF                  CHAR(55)   STATIC;
DCL  IND                      UBIN STATIC  INIT(0);
DCL  INDENT                   UBIN;
DCL  M$OUT                    DCB;
DCL  M$SI                     DCB;
DCL  G_FREE                   UBIN  STATIC INIT(0);
DCL  L_FREE                   UBIN  STATIC INIT(0);
DCL  LS_FREE                  UBIN  STATIC INIT(0);
 
 
        %EJECT;
 
 
 
/* S U B R O U T I N E    O P E N _ F I L E */
 
/* This subroutine will check the command line to see if the
   OMLET.X processor was invoked with standard syntax i.e.
   OMLET.X fid where fid is the file that the user wants to expand.
   IF the processor was not invoked this way, an error message will
   be output to the terminal.   */
 
Open_Specific_File : PROC;
 
     if B$JIT$ -> B$JIT.PRFLAGS.SI THEN /* file entered through the
                                           M$SI (default) DCB.  */
       DO;
            File_Name = DCBADDR (DCBNUM (M$SI)) -> F$DCB.NAME#;
            if DCBADDR (DCBNUM (M$SI)) -> F$DCB.ACCT# ~= ' ' THEN
                 File_Acct.ACCT# = DCBADDR (DCBNUM (M$SI)) -> F$DCB.ACCT#;
 
            if DCBADDR (DCBNUM (M$SI)) -> F$DCB.PASS# ~= ' ' THEN
                 File_Pass.PASS# = DCBADDR (DCBNUM (M$SI)) -> F$DCB.PASS#;
 
            if DCBADDR (DCBNUM (M$SI)) -> F$DCB.PSN# ~= ' ' THEN
                 File_Sn.SN#(0) = DCBADDR (DCBNUM (M$SI)) -> F$DCB.PSN#;
 
            CALL M$OPEN (FILE_OPEN);
          END;                          /* IF */
 
     ELSE
       DO;
            ERR_BUF = 'That processor must be invoked with standard syntax.';
            CALL M$WRITE(OUT_MES);
            CALL M$ERR;
          END;                          /* ELSE */
END; /* OPEN_FILE */
 
   %EJECT;
 
 
 
 
/* S U B R O U T I N E  A D D _ T O _ S T A C K */
 
/* This subroutine will take the name that is passed to it and, according
   to the parameter "STKTYPE", will put it on the correct stack. There are
   2 different stacks - one for local list definitions, and one for global
   definitions.  IF the segment containing the stack should run out of
   memory, THEN the call to M$GDS will get a new page of memory.
   Although the stack with Local definitions is built, the code to
   write out the local definitions hasn't been added yet because
   my internship ended before I could finish. */
 
Add_To_Stk : PROC (NAME,STKTYPE) ;
DCL  Name     Char(64);
DCL  StkType  CHAR(1);
 
     IF StkType = 'G' THEN DO;
 
            IF G_Free <= (SIZEW (Name) + 1) THEN DO;
                   CALL M$GDS (GET_GLOBAL_STK_SEG) ALTRET (NO_MORE_MEM);
                   G_Free = G_Free + 1024;
                 END;                   /* if G_Free */
 
            G_Stk_Index = G_Stk_Index + 1;
            GStk_Res_Vec.Ptr$ -> Global_Prev_Stk.Name (G_Stk_Index) = Name;
            GStk_Res_Vec.Ptr$ -> Global_Prev_Stk.LIST_LOC (G_Stk_Index) =
                 LS_STK_INDEX;
            G_Free = G_Free - SIZEW (Name) - 1;
          END;                          /* if StkType = 'G' */
 
     ELSE DO;
 
            IF L_Free <= (SIZEW (Name) + 1) THEN DO;
                   CALL M$GDS (Get_Local_Stk_Seg) ALTRET (No_More_Mem);
                   L_Free = L_Free + 1024;
                 END;                   /* IF L_Free */
 
            L_Stk_Index = L_Stk_Index + 1;
            LStk_Res_Vec.Ptr$ -> Local_Prev_Stk.Name (L_Stk_Index) = Name;
            LStk_Res_Vec.Ptr$ -> Local_Prev_Stk.LIST_LOC (L_Stk_Index) =
                 LS_STK_INDEX;
            L_Free = L_Free - SIZEW (Name) - 1;
          END;                          /* Else */
 
     DO WHILE ('0'B);
No_More_Mem :
          ERR_BUF = 'User memory limit reached.';
          CALL M$WRITE (OUT_MES);
          CALL M$ERR;
        END;                            /* No_More_Mem */
 
END;                                    /* Add_To_Stk */
%EJECT;
 
 
 
 
/* S U B R O U T I N E  A D D _ T O _ L I S T */
 
/* This subroutine will create a stack that stores all of the records
   of the input file.  This stack is created becasue it will be faster
   to locate a record in it than to do all of the required I/O to get
   the record out of the input file each time it is needed. */
 
ADD_TO_LIST : PROC;
 
     IF LS_Free <= (SIZEW (IO_BUF) + 2) THEN DO;
            CALL M$GDS (GET_LIST_STK_SEG) ALTRET (NO_MEM);
            LS_FREE = LS_FREE + 1024;
          END;
 
     LS_STK_INDEX = LS_STK_INDEX + 1;
     LIST_RES_VEC.PTR$ -> LIST_PREV_STK.NAME (LS_STK_INDEX) = IO_BUF;
     LIST_RES_VEC.PTR$ -> LIST_PREV_STK.LENGTH(LS_STK_INDEX) =
          DCBADDR (DCBNUM (M$SI)) -> F$DCB.ARS# - 1;
 
     LS_FREE = LS_FREE - SIZEW (IO_BUF) - 2;
 
     DO WHILE ('0'B);
NO_MEM:
          ERR_BUF = 'User memory limit reached.';
          CALL M$WRITE(OUT_MES);
          CALL M$ERR;
        END;
END;                                    /* ADD_TO_LIST */
 
 %EJECT;
 
 
 
 
 
 
/* S U B R O U T I N E   S T A C K _ D E F I N I T I O N S */
 
/* This routine will read through the input file completely and extract
   global list definitions and bulid a FIFO stack using their names. Any
   I/O error other than EOF will cause program termination.  EOF will
   cause control to be passed back to the main procedure. */
 
Stack_Definitions : proc;
DCL  STR1   CHAR(15)  STATIC;
DCL  STRG   CHAR(14)  STATIC;
DCL  IND    UBIN      WALIGNED;
DCL  INDG   UBIN      WALIGNED;
DCL  STKTYPE  CHAR(1);
 
     STR1 = 'Definition for:';    /*This string in a record designates
                                    a definition that can be expanded,
                                    and thus needs to be put on the stack. */
     STRG = '(** Global **)';
 
 
     do until B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR.CODE = %E$EOF;
                                        /* i.e. While Not EOF do */
          CALL M$READ(FILE_READ) ALTRET (EOF);
          IF (DCBADDR (DCBNUM (M$SI)) -> F$DCB.ARS# - 1) <= 1 THEN GOTO NOSTACK;
 
          CALL ADD_TO_LIST;
          CALL INDEX (IND,STR1,IO_BUF) ALTRET (NOSTACK);
                                    /* Search IO_BUF for STR1 and if
                                       found, stack IO_BUF */
          CALL INDEX (INDG,STRG,IO_BUF) ALTRET (NOGLOBAL);
                                    /* This returns the index of where the
                                       string '(** GLOBAL **)' starts so
                                       it can be removed from IO_BUF. */
          IO_BUF = SUBSTR(IO_BUF,16,INDG-17); /* The list's name starts on char. #16
                                               and the fctn. SUBSTRing will extract
                                               it and put it in IO_BUF. */
          STKTYPE = 'G';
 
          DO WHILE ('0'B);
NOGLOBAL :     IO_BUF = SUBSTR(IO_BUF,16,(DCBADDR(DCBNUM(M$SI)) ->
                    F$DCB.ARS#-1)-15);
               STKTYPE = 'L';
                                        /* This handles all def'ns that
                                           don't have the '(** GLOBAL **)'
                                           suffix. */
             END;                       /* NOGLOBAL */
 
          CALL ADD_TO_STK (IO_BUF,STKTYPE);
 
NOSTACK:  IO_BUF = ' ';
        END;                            /* while not EOF */
 
EOF: GSTK_RES_VEC.PTR$->GLOBAL_PREV_STK.LIST_LOC (G_STK_INDEX + 1) = LS_STK_INDEX+1;
END;                                    /* Stack_Definitions */
 
   %EJECT;
 
 
 
/*  B E G I N N I N G  O F  M A I N  P R O G R A M  */
 
     IF ~(B$JIT$->B$JIT.PRFLAGS.OU) THEN DO; /* OPEN FILE TO THE SCREEN*/
            OPEN_DEST.V.ASN# = %DEVICE#;
            OPEN_DEST.V.RES# = 'ME';
            CALL M$OPEN(OPEN_DEST);
          END;
     CALL Open_Specific_file;
 
     G_STK_INDEX = 0;
     L_STK_INDEX = 0;
     LS_STK_INDEX = 0;
     CALL Stack_Definitions;
 
     CALL M$REW (REWIND_INPUT_FILE);
 
     DO UNTIL Ind = G_Stk_Index;
          Ind = Ind + 1;
          INDENT = 0;
          CALL Expand (IND,INDENT,BLANKS);
 
          OUT_FILE_BUF = ' ';
          CALL M$WRITE (FILE_WRITE);
          CALL M$WRITE (FILE_WRITE);
 
        END;                            /* until */
 
     CALL M$CLOSE (FILE_CLOSE);
     CALL M$CLOSE (CLOSE_DEST);
 
     DO UNTIL LSTK_RES_VEC = VECTOR (NIL);
                             /* Free all the memory that was acquired by
                                M$GDS (GET_LOCAL_STK_SEG) */
          CALL M$FDS (FREE_LOCAL_STK_SEG);
        END;
 
     DO UNTIL GSTK_RES_VEC = VECTOR (NIL);
                             /* Free all the memory that was acquired by
                                M$GDS (GET_GLOBAL_STK_SEG) */
          CALL M$FDS (FREE_GLOBAL_STK_SEG);
        END;
 
     DO UNTIL LIST_RES_VEC = VECTOR (NIL);
                             /* Free all the memory that was acquired by
                                M$GDS (GET_LIST_STK_SEG) */
          CALL M$FDS (FREE_LIST_STK_SEG);
        END;
 
 
END DRIVER;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
%EJECT;
 
 
 
 
/* S U B R O U T I N E  S E A R C H _ S T K */
 
/* This subroutine will search either the stack of global or local
   definitions for the entry called "NAME". Since the stacks are in
   alpha. order, the search is stopped once the name on the stack is
   greater than the parameter. IF the name is found on the stack THEN
   the flag "On_Stk" is set. */
 
Search_Stk : PROC (Found,Name,IND);
   %INCLUDE CP_6;
   %INCLUDE CP_6_SUBS;
   %INCLUDE *OMLET_DATA_R;
DCL  FOUND   BIT(1);
DCL  NAME    CHAR(63);
DCL  NAMEU   CHAR(63);
DCL  IND     UBIN;
DCL  INX      UBIN;
 
     FOUND = '0'B; IND = 0;
     CALL INDEX1 (INX,' ',NAME);
     IF INX = 0 THEN
          NAME = SUBSTR(NAME,5);        /* Strip off initial blanks. */
     NAMEU = NAME;                      /* Convert to Upper Case. */
     DO INX = 0 TO LENGTHC(NAME) - 1;
          IF SUBSTR(NAMEU,INX,1) >= 'a' AND SUBSTR(NAMEU,INX,1) <= 'z' THEN
               SUBSTR(NAMEU,INX,1) = BITASC(ASCBIT(SUBSTR(NAMEU,INX,1))&'737'O);
        END;
 
     DO UNTIL (NAMEU <= GStk_Res_Vec.Ptr$ -> Global_Prev_Stk.Name(Ind)
          or (Ind = G_Stk_Index));
 
          Ind = Ind + 1;
        END;
 
     CALL INDEX (Inx,GStk_Res_Vec.Ptr$ -> Global_Prev_Stk.Name(Ind),NAMEU);
     IF Inx ~= LENGTHC (NAMEU) THEN
          Found = '1'B;
 
END;                                    /* Search_Stk */
 %EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
 
 
 
/* S U B R O U T I N E  E X P A N D */
 
/*This subroutine is the "meat" of the program.  It uses recursion to
  expand the mail list. An entry is retrieved from the global or local
  definition stacks.  The stack with the main list is THEN searched for
  that entry and it is printed along with all of it's sub-entries,
  (which are inturn expanded themselves).  */
 
Expand : PROC (LOCATION,LTMARGIN,BLANKS);
   %INCLUDE CP_6;
   %INCLUDE CP_6_SUBS;
   %INCLUDE *OMLET_DATA_R;
DCL  LOCATION          UBIN;
DCL  LtMargin          UBIN;
DCL  BLLEN             UBIN;
DCL  BLANKS            CHAR(BLLEN);
DCL  LTHOLD            UBIN;
DCL  CT                UBIN;
DCL  ON_STK            BIT(1);
DCL  INDEX_WHERE_FOUND UBIN;
DCL  SEARCH_STK        ENTRY(3);
 
     ON_STK = '0'B;
     CT=GStk_Res_Vec.Ptr$ -> Global_Prev_Stk.List_Loc (Location);
                          /* CT is the location of the current entry in
 
                             the main list. */
     IO_BUF = List_Res_Vec.Ptr$ -> List_Prev_Stk.Name (CT);
                              /* IO_BUF contains the name from the main list */
     LTHOLD = LTMARGIN;
     BLLEN = LtMargin;
     Blanks = ' ';
 
 
     CALL CONCAT (OUT_FILE_BUF,BLANKS,IO_BUF);
                          /* add the correct indentation to the record
                             before writing it out. */
 
     FILE_WRITE.BUF_.BOUND = LIST_RES_VEC.PTR$ -> LIST_PREV_STK.LENGTH(CT) + BLLEN;
 
     CALL M$WRITE (FILE_WRITE);
 
 
     CT = CT + 1;
     DO WHILE (CT < GStk_Res_Vec.Ptr$ -> Global_Prev_Stk.List_loc (location+1));
          CALL Search_Stk (On_Stk,List_Res_Vec.Ptr$ -> List_Prev_Stk.Name(Ct),
               Index_Where_Found);
 
          IF On_Stk THEN DO;
                 LTMARGIN = LTHOLD + 3;
                 CALL Expand (Index_Where_Found,LTMARGIN,BLANKS);
               END;                     /* if */
 
          ELSE DO;
                 IO_BUF = List_Res_Vec.Ptr$ -> List_Prev_Stk.Name(Ct);
                 BLLEN = LTHOLD + 3;
                 BLANKS = ' ';
 
                 CALL CONCAT (Out_File_Buf,BLANKS,IO_BUF);
                 FILE_WRITE.BUF_.BOUND = LIST_RES_VEC.PTR$ -> LIST_PREV_STK.LENGTH(CT) + BLLEN - 5;
                 CALL M$WRITE (FILE_WRITE);
               END;                     /* Else */
 
          Ct = Ct + 1;
        END;                            /* while */
 
 
END;                                    /* Expand */
 
   %EJECT;
