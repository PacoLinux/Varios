/*M*  ELM - Error Log Munger                                 */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X*       DMR,PLM=5,IND=5,CTI=5,SDI=5,CSI=0,ECI=0           */
/*                                                           */
/*  ELM munges output from error log listings                */
/*                                                           */
/*************************************************************/
 
ELM: PROC MAIN;
 
%INCLUDE CP_6;
%INCLUDE XU_MACRO_C;
 
%EQU DATE_ = 0;
%EQU TYPE = 1;
%EQU TEXT = 2;
 
%FPT_OPEN (FPTN = SIOPEN,
    DCB = M$SI,
    FUN = IN);
 
%FPT_READ (FPTN = SIREAD,
    DCB = M$SI,
    BUF = SIBUF);
 
%FPT_CLOSE (FPTN = SICLOSE,
    DCB = M$SI,
    DISP = SAVE);
 
%FPT_OPEN (FPTN = LOOPEN,
    DCB = M$LO,
    FUN = CREATE,
    CTG = YES);
 
%FPT_WRITE (FPTN = LOWRITE,
    DCB = M$LO,
    BUF = DETAIL);
 
%FPT_CLOSE (FPTN = LOCLOSE,
    DCB = M$LO,
    DISP = SAVE);
 
%PARSE$SYM (NAME = P$SYM);
%PARSE$OUT (NAME = P$BLK);
 
%P_PCB (NAME = SI_PCB,
    T = SIBUF,
    N# = 200,
    W = PARSER_WORKSPACE,
    WSZ = 512,
    R = ERRLOG);
 
DCL M$SI DCB;
DCL M$LO DCB;
 
DCL PARSER_WORKSPACE (0:511) SBIN STATIC;
DCL BLK$ PTR;
DCL X$PARSE ENTRY (1) ALTRET;
 
DCL ERRLOG UBIN WORD SYMREF;
 
DCL SIBUF CHAR (200) STATIC;
 
DCL 1 DETAIL STATIC ALIGNED,
         2 DATE_ CHAR (16) UNAL,
         2 TYPE CHAR (16) UNAL,
         2 TEXT CHAR (72) UNAL;
 
DCL TEXT CHAR (200) STATIC;
%EJECT;
     CALL M$OPEN (SIOPEN) ALTRET (ELM_ABORT);
     CALL M$OPEN (LOOPEN) ALTRET (ELM_ABORT);
 
     DO WHILE ('1'B);
TOP:      ;
          SIBUF = ' ';
          CALL M$READ (SIREAD) ALTRET (ELM_EOF);
          CALL X$PARSE (SI_PCB) ALTRET (TOP);
          DO CASE (SI_PCB.OUT$->P$BLK.CODE);
          CASE (%DATE_);
             DETAIL.DATE_ = SI_PCB.OUT$->P$BLK.SUBLK$(0)->P$SYM.TEXT;
          CASE (%TYPE);
             DETAIL.TYPE = SI_PCB.OUT$->P$BLK.SUBLK$(0)->P$SYM.TEXT;
          CASE (%TEXT);
             CALL SCRUNCHL (SIBUF,TEXT,200);
             DETAIL.TEXT = TEXT;
             CALL M$WRITE (LOWRITE) ALTRET (ELM_ABORT);
          END;
        END;
 
ELM_EOF: ;
     CALL M$CLOSE (SICLOSE) ALTRET (ELM_ABORT);
     CALL M$CLOSE (LOCLOSE) ALTRET (ELM_ABORT);
     CALL M$EXIT;
ELM_ABORT: ;
     CALL M$ERR;
%EJECT;
SCRUNCHL: PROC (ITEXT,OTEXT,TEXT_LEN);
 
DCL ITEXT CHAR (TEXT_LEN);
DCL TEXTIN (0:1024) REDEF ITEXT CHAR (1);
DCL OTEXT CHAR (TEXT_LEN);
DCL TEXTOUT (0:1024) REDEF OTEXT CHAR (1);
DCL TEXT_LEN SBIN;
 
DCL TIC SBIN;
DCL TOC SBIN;
DCL PSPACE BIT (1);
 
     OTEXT = ' ';
     TIC = 0;
     DO WHILE TEXTIN (TIC) = ' ';
          TIC = TIC + 1;
        END;
 
     PSPACE = '0'B;
     TOC = 0;
 
     DO UNTIL TIC > TEXT_LEN - 1;
          IF TEXTIN (TIC) ~= ' '
          THEN
          DO;
               TEXTOUT (TOC) = TEXTIN (TIC);
               TOC = TOC + 1;
               IF PSPACE
               THEN
                    PSPACE = '0'B;
             END;
          ELSE
               IF NOT PSPACE
               THEN
               DO;
                    PSPACE = '1'B;
                    TEXTOUT (TOC) = TEXTIN (TIC);
                    TOC = TOC + 1;
                  END;
          TIC = TIC + 1;
        END;
     RETURN;
END SCRUNCHL;
 
END ELM;
