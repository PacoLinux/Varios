/*M* CP6-LINKMOD_SI61 - Source # 1.                               */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* AND  */
/***
***/
/******************************************************************/
/*M*     CHANG     July 31, 1979       GWJ                        */
/***/
/*P*     NAME: CHANG
         PURPOSE: To change a number into a text string without
                   leading zeros.
                                                                  */
CHANG : PROC (NUMBR, TEXT, LEN#);
 
%INCLUDE LINKMOD_C1;
 
DCL TEXT(0:0) CHAR(1);
DCL NUMBR UBIN;
DCL LEN# UBIN;
 
DCL TXT CHAR(10);
 
        CALL BINCHAR(TXT,NUMBR);
        CHAR_LEN = LEN#;
        ADDR(TEXT)->CCHAR = PINCRC(ADDR(TXT),10 - LEN#)->CCHAR;
        J = 1; I = 0;
        DO WHILE ( J = 1 AND I < LEN#);
           IF TEXT(I) = '0' THEN TEXT(I) = ' ';
           ELSE J = 0;
           I = I + 1;
        END;
        IF NUMBR = 0 THEN TEXT(LEN# - 1) = '0';
        RETURN;
END CHANG;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/******************************************************************/
/*M*     TELLER    July 31, 1979       GWJ                        */
/***/
/*P*     NAME: TELLER
         PURPOSE: This reports all messages to the terminal using
                   the M$ERRMSG routine or just writing to the
                   LOUNIT (F$103)
                                                                  */
TELLER : PROC (ERROR#);
 
DCL ERROR# SBIN;
 
%INCLUDE B$ROSEG;
DCL B$ROSEG$ PTR SYMREF;
 
%INCLUDE B$JIT;
DCL B$JIT$ PTR SYMREF;
 
%INCLUDE LINKMOD_C1;
 
DCL RECNBR UBIN SYMREF;
DCL RECORD(0:139) CHAR(1) SYMREF;
 
DCL 1 RECKEY SYMREF,
      2 DEC CHAR(5) UNAL,
      2 PT CHAR(1) UNAL,
      2 FRC CHAR(3) UNAL;
 
DCL TEMKEY REDEF RECKEY CHAR(9);
 
DCL 1 ERRCODE STATIC,
      2 FCG BIT(18) UNAL,
      2 MON BIT(1) UNAL,
      2 ERR# UBIN(14) UNAL,
      2 SEV BIT(3) UNAL INIT('0'B);
 
DCL 1 YOU1 STATIC ALIGNED,
      2 LEN UBIN BYTE UNAL,
      2 DATA CHAR(36) UNAL;
 
DCL 1 YOU2 STATIC ALIGNED,
      2 LEN UBIN BYTE UNAL,
      2 DATA CHAR(27) UNAL;
 
DCL 1 YOU3 STATIC ALIGNED,
      2 LEN UBIN BYTE UNAL,
      2 DATA CHAR(27) UNAL;
 
DCL NUM UBIN SYMREF;
DCL TEXT5 CHAR(5) STATIC;
 
DCL CHANG ENTRY(3);
 
DCL M$DO DCB;
DCL M$LO DCB;
DCL M$LM DCB;
 
%FPT_WRITE(FPTN=WR_LO,VFC=YES,DCB=M$LO);
%FPT_ERRMSG(FPTN=WR_ER,BUF=OUT_BUFFER,CODE=ERRCODE,VFC='A',
                   INCLCODE=NO,OUTDCB1=M$DO,SUBMESS=YES,
                   FIELD1=YOU1,FIELD2=YOU2,FIELD3=YOU3);
 
DCL B2 BIT(2) BASED UNAL;
/*******/
 
        IF ERROR# < 0
        THEN DO;
           ERRCODE = B$TCB$->B$TCB.ALT$->B$ALT.ERR;
           WR_ER.V.FLAGLEV# = 4; ERRCODE.SEV = '0'B;
           WR_ER.V.SUBMESS# = %YES#;
           PTR3$ = B$JIT$->B$JIT.DCB$;
           WR_ER.V.DCB# = 0;
           DO I = 1 TO B$ROSEG$->B$ROSEG.NUMDCBS;
              IF PTR3$ = B$ROSEG$->B$ROSEG.DCBPTR$->B$RODCB$(I)
              THEN WR_ER.V.DCB# = I;
           END;
           CALL M$ERRMSG(WR_ER);
        END;
        IF ERROR# > 0
        THEN DO;
           ERRCODE.ERR# = ERROR#; ERRCODE.MON = '0'B;
           ERRCODE.FCG = '141116'O;     /* LIN in Six-bit form                */
           YOU3.DATA = TOKEN.CHR;
           YOU3.LEN = TOKEN.LEN;
           CALL CHANG(NUM,TEXT5,5);
           YOU2.DATA = TEXT5;
           YOU2.LEN  = 5;
           WR_ER.V.FLAGLEV# = 0; WR_ER.V.SUBMESS# = %NO#;
           WR_ER.FILENAME_ = VECTOR(DCBADDR(DCBNUM(M$LM))->F$DCB.NAME#);
           WR_ER.FILEACCT_ = VECTOR(DCBADDR(DCBNUM(M$LM))->F$DCB.ACCT#);
           CALL M$ERRMSG(WR_ER) ALTRET(NO_ERROR);
        END;
        IF ERROR# = 0
        THEN DO;
           WR_LO.BUF_ = VECTOR(OUT_BUFFER);
           CALL M$WRITE(WR_LO);
        END;
        RETURN;
NO_ERROR:
        RETURN;
END TELLER;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/******************************************************************/
/*M*     READ_FILE July 31, 1979       GWJ                        */
/***/
/*P*     NAME: READ_FILE
         PURPOSE: To read from the UNIT#, place the data into
                   IN_BUF and Altret if EOF.
                                                                  */
READ_FILE : PROC (UNIT#, IN_BUF) ALTRET;
 
%INCLUDE LINKMOD_C1;
 
DCL RECNBR UBIN SYMREF;
 
DCL UNIT# UBIN;
DCL IN_BUF CHAR(140);
DCL 1 RECKEY SYMREF,
      2 DEC CHAR(5),
      2 PT CHAR(1),
      2 FRC CHAR(3);
 
 
%FPT_READ(FPTN=RD_FIL,KEYR=YES,KEY=KEY$);
 
DCL 1 KEY$ ALIGNED STATIC,
      2 LEN UBIN BYTE UNAL,
      2 CHR UBIN(27) UNAL,
      2 * CHAR(252) UNAL;
 
 
/******/
 
        KEY$ = '0'B; IN_BUF = ' ';
        RD_FIL.V.DCB# = UNIT#;
        RD_FIL.BUF_ = VECTOR(IN_BUF);
        CALL M$READ(RD_FIL) ALTRET(RD_ERR);
        IF KEY$.LEN ~= 3
        THEN DO;
           CALL BINCHAR(RECKEY.DEC,RECNBR + 1);
           CALL BINCHAR(RECKEY.FRC,0);
        END;
        ELSE DO;
           CALL BINCHAR(RECKEY.DEC, KEY$.CHR/1000);
           CALL BINCHAR(RECKEY.FRC, MOD(KEY$.CHR,1000));
        END;
        EOFFLG = FALSE;
        RETURN;
RD_ERR:
        IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE ~= %E$EOF
        THEN CALL M$MERC;
        ALTRETURN;
END READ_FILE;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/******************************************************************/
/*M*     ALL_DONE  July 31, 1979       GWJ                        */
/***/
/*P*     NAME: ALL_DONE
         PURPOSE: Will issue an closeing remarks and make
                   all files have been closed neatly.
                                                                  */
ALL_DONE : PROC;
 
 
DCL TELLER ENTRY(1);
DCL CLSFIL ENTRY(2);
DCL STPDB ENTRY;
 
 
%INCLUDE LINKMOD_C1;
 
        CALL TELLER(%GOOD_BYE);
        RETURN;
END ALL_DONE;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/******************************************************************/
/*M*     GETFID    July 31, 1979       GWJ                        */
/***/
/*P*     NAME: GETFID
         PURPOSE: Will get a file name and an account from
                   the input record.
                                                                  */
GETFID : PROC;
 
%INCLUDE LINKMOD_C1;
 
DCL TELLER ENTRY(1);
DCL NXTTKN ENTRY;
 
 
DCL SPL(0:4) BIT(1) SYMREF;
DCL RECCHR CHAR(1) SYMREF;
DCL RECPOS SBIN SYMREF;
DCL RECLEN SBIN SYMREF;
DCL FNAME CHAR(31) SYMREF;
DCL FACCT CHAR(8) SYMREF;
DCL FNLN  UBIN SYMREF;
 
 
/*******/
 
        SPL = '70'O;                    /* (- _ :) OK. (. # @) NOT OK         */
NEXT:
        OK = FALSE;
        CALL NXTTKN;
        IF TOKEN.CHR = '=' THEN CALL NXTTKN;
        IF EOFFLG
        THEN DO;
           LSTFIL = FALSE;
           RETURN;
        END;
        IF TOKEN.CHR = '*'
        THEN DO;
           CALL NXTTKN;
           FNAME = TOKEN.CHR; CALL CONCAT(TOKEN.CHR,'*',FNAME);
           TOKEN.LEN = TOKEN.LEN + 1;
        END;
        IF LSTFIL THEN DO;
           IF TOKEN.CHR = ',' OR
             TOKEN.CHR = '(' THEN CALL NXTTKN;
           IF TOKEN.ID = 0
           THEN DO;
              RECPOS = RECLEN + 1;
              RETURN;
           END;
        END;
        ELSE IF TOKEN.ID = 0
           THEN DO;
              RECPOS = RECLEN + 1;
              CALL TELLER(%EX_FIL_NAME);
              RETURN;
           END;
        FNAME = TOKEN.CHR;
        FNLN  = TOKEN.LEN;
        FACCT = '        ';
        OK = TRUE;
        IF RECCHR = '.' THEN CALL NXTTKN;
        ELSE RETURN;
        CALL NXTTKN;
        IF TOKEN.ID = 0
        THEN DO;
           RECPOS = RECPOS - 1;
           RETURN;
        END;
        IF TOKEN.LEN <= 8
        THEN DO;
           FACCT = TOKEN.CHR;
           RETURN;
        END;
        CALL TELLER(%ACT_TO_LONG);
        OK = FALSE;
        RETURN;
END GETFID;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*****************************************************************/
/*M*     NXTCHR    July 31, 1979       GWJ                       */
/***/
/*P*     NAME: NXTCHR
         PURPOSE: To get the next character from the input line.
                   If the input line is exausted the call READ_FILE
                   and get the next one.
                                                                 */
NXTCHR : PROC;
 
%INCLUDE LINKMOD_C1;
 
DCL RECORD(0:139) CHAR(1) SYMREF;
DCL RECPOS SBIN SYMREF;
DCL RECNBR UBIN SYMREF;
DCL RECLEN SBIN SYMREF;
DCL RECCHR CHAR(1) SYMREF;
 
DCL READ_FILE ENTRY(2) ALTRET;
DCL TELLER    ENTRY(1);
 
/*******/
 
        IF RECPOS <= RECLEN
        THEN DO;
           EORFLG = FALSE;
           EOFFLG = FALSE;
           IF RECPOS = RECLEN
           THEN EORFLG = TRUE;
           ELSE DO;
              RECCHR = RECORD(RECPOS);
              RECPOS = RECPOS + 1;
              IF RECCHR = ' '
              THEN DO;
                 DO WHILE(RECORD(RECPOS)=' ' AND RECPOS < RECLEN);
                    RECPOS = RECPOS + 1;
                 END;
              END;
           END;
           RETURN;
        END;
 
READ_AGAIN:
        CALL READ_FILE(INUNIT,RECORD) ALTRET(POS_EOF);
        RECNBR = RECNBR + 1;
        RECLEN = DCBADDR(INUNIT)->F$DCB.ARS#;
        IF RECLEN = 0 THEN GOTO READ_AGAIN;
        DO WHILE(RECORD(RECLEN - 1) <= ' ' AND RECLEN > 0);
           RECORD(RECLEN - 1) = ' ';
           RECLEN = RECLEN - 1;
        END;
        RECCHR = RECORD(0);
        RECPOS = 1;
        EORFLG = FALSE;
        RETURN;
POS_EOF:
        IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE ~= %E$EOF
        THEN DO;
           CALL TELLER(-1);
           CALL M$MERC;
        END;
        EOFFLG = TRUE;
        RETURN;
END NXTCHR;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*****************************************************************/
/*M*     NXTTKN    July 31, 1979       GWJ                       */
/***/
/*P*     NAME: NXTTKN
         PURPOSE: To get the next token from the input line and
                   evaluate what it is (TOKEN.ID and TOKEN.VAL)
                                                                 */
NXTTKN : PROC;
 
%INCLUDE LINKMOD_C1;
DCL 1 TOKEN_INIT CONSTANT,
      2 * CHAR(35) INIT(' '),
      2 * BIT(27) INIT('0'B);
 
DCL NXTCHR ENTRY;
 
DCL RECCHR CHAR(1) SYMREF;
DCL RECLEN SBIN SYMREF;
DCL SPL(0:4) BIT(1) SYMREF;
DCL RECPOS SBIN SYMREF;
DCL CMD_TBL(0:6) CHAR(5) SYMREF;
DCL CMD_MAX UBIN SYMREF;
%EQU QU = 50;
DCL QUOTE BIT(1);
 
/*******/
 
        PTR1$ = ADDR(TOKEN.CHR);
        TOKEN = TOKEN_INIT;
        QUOTE = FALSE;
 
L1:
 
        CALL NXTCHR;
        IF EORFLG OR EOFFLG THEN RETURN;
        IF RECCHR = '"'
        THEN DO;
           CALL NXTCHR;
           DO WHILE(RECCHR ~= '"');
              CALL NXTCHR;
           END;
           CALL NXTCHR;
        END;
        IF RECCHR = ' ' THEN GOTO L1;
        IF RECCHR = ''''
        THEN DO;
           QUOTE = TRUE;
           CALL NXTCHR;
        END;
        IF RECCHR >= '0' AND RECCHR <= '9' THEN GOTO DIGIT;
        IF (RECCHR >= 'A' AND RECCHR <= 'Z') OR
          (RECCHR >= 'a' AND RECCHR <= 'z') OR
          (RECCHR = '$') OR (RECCHR = '?') OR
          (RECCHR = '-' AND SPL(0)) OR
          (RECCHR = '_' AND SPL(1)) OR
          (RECCHR = ':' AND SPL(2)) OR
          (RECCHR = '.' AND SPL(3)) OR
          (RECCHR = '#' AND SPL(4)) OR
          (RECCHR = '@' AND SPL(5)) THEN GOTO ALPHA;
/* MUST BE A SPECIAL CHARACTER */
        TOKEN.CHR  = RECCHR;
        TOKEN.LEN   = 1;
        TOKEN.ID    = 0;
        TOKEN.VAL   = -1;
        RETURN;
 
/** DIGIT */
DIGIT:
        PINCRC(PTR1$,TOKEN.LEN)->C1 = RECCHR;
        TOKEN.LEN = TOKEN.LEN + 1;
        TOKEN.ID = 2;
        CALL NXTCHR;
        IF RECCHR = ' ' OR
          EORFLG       OR
          EOFFLG THEN GOTO DIG_DON;
        IF RECCHR < '0' OR RECCHR > '9' THEN GOTO ALPHA;
        ELSE GOTO DIGIT;
DIG_DON:
        TOKEN.VAL = -1;
        EORFLG = FALSE; EOFFLG = FALSE;
        RETURN;
 
/** ALPHA */
 
ALPHA:
        IF RECCHR = ''''
        THEN DO;
           QUOTE = FALSE;
           CALL NXTCHR;
        END;
        IF (RECCHR >= 'A' AND RECCHR <= 'Z') OR
          (RECCHR >= 'a' AND RECCHR <= 'z') OR
          (RECCHR >= '0' AND RECCHR <= '9') OR
          (RECCHR = '-' AND SPL(0) ) OR
          (RECCHR = '_' AND SPL(1) ) OR
          (RECCHR = ':' AND SPL(2) ) OR
          (RECCHR = '.' AND SPL(3) ) OR
          (RECCHR = '#' AND SPL(4) ) OR
          (RECCHR = '@' AND SPL(5) ) OR
          (RECCHR = '$' ) OR (RECCHR = '?')
        THEN DO;
           PINCRC(PTR1$,TOKEN.LEN)->C1 = RECCHR;
           TOKEN.ID = 1; TOKEN.LEN = TOKEN.LEN + 1;
           TOKEN.VAL = -1;
           CALL NXTCHR;
           IF EORFLG OR EOFFLG THEN GOTO ALP_DON;
           GOTO ALPHA;
        END;
        IF QUOTE
        THEN DO;
           CALL NXTCHR;
           IF EORFLG OR EOFFLG THEN GOTO ALP_DON;
           GOTO ALPHA;
        END;
        IF RECCHR ~= ' ' THEN RECPOS = RECPOS - 1;
ALP_DON:
        EORFLG = FALSE; EOFFLG = FALSE;
        IF TOKEN.ID ~= 1 THEN RETURN;
        DO I = 0 TO CMD_MAX;
           IF ADDR(TOKEN.CHR)->TCHAR = ADDR(CMD_TBL(I))->TCHAR
           THEN TOKEN.VAL = I;
        END;
        RETURN;
END NXTTKN;
