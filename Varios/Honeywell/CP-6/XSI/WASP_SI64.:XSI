/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/*D* WASP_MEM - Display memory utilization */
/*X*     PLM=3,SQB=Y,AND=Y,ENI=0,SDI=3,MCL=10,CSI=0,ECI=0,IND=0,IAD=3,MOC=Y   */
WASP_MEM: PROC;
 
%SUB GLOBAL = SYMREF;
%INCLUDE WASP_C61;
%INCLUDE MM_DATA_R;
DCL B$IS$ PTR SYMREF;
DCL B$SPCL1$ PTR SYMREF;
 
DCL K UBIN;
DCL FMC$OLD_T$ PTR;
DCL P_RESOURCE$ PTR;
 
DCL OLD(0:23) SBIN STATIC INIT(-9999*24);
DCL NEW(0:23) UBIN STATIC;
DCL PCORE SBIN;
DCL RHELD SBIN;
DCL TOTSIZE SBIN;
DCL AVAILPGS SBIN;
DCL IOCUSE SBIN;
DCL CURINUSE SBIN;
DCL FPPC SBIN;
DCL CURAVAIL SBIN;
DCL UNACCOUNTED SBIN;
%INCLUDE P_PMDAT_C;
%INCLUDE PS_SUBS_C;
%P_RESOURCE;
 
DCL FMT CHAR(0) STATIC INIT('%+5D  %+5D  %A');
DCL FMT1 CHAR(0) STATIC INIT('       %+5D  %A');
DCL RPROC CHAR (0) CONSTANT
 INIT ('IBEX,DELTA,LOGON,:SHARED_SYSTEM');
 
DCL I UBIN;
DCL J UBIN;
 
DCL SBIN36 SBIN BASED;
DCL GETSTATS ENTRY;
DCL GETENT ENTRY(2);
DCL MM_GAP SBIN WORD;
%FPT_SAD (MONSID=%ISSID,USERSID=%SPCL1SID);
   CALL VCURSOR(0,0);
   CALL M$SAD(FPT_SAD);
   MM_GAP = PINCRW(B$SPCL1$,POFFW(ADDR(MM_GAPSZ),B$IS$))->SBIN36;
 
   CALL GETSTATS;
   CALL GETENT (P_RESOURCE#, P_RESOURCE$);
 
   PCORE = P_RESOURCE.PAGES.PCORE ;
 
   RHELD = MAXIMUM(P_RESOURCE.PAGES.RSVP - P_RESOURCE.PAGES.SPPC , 0)
     + P_RESOURCE.PAGES.HELD;
 
   TOTSIZE = P_RESOURCE.PAGES.AARDSIZE +
     P_RESOURCE.PAGES.XDELTASIZE +
     P_RESOURCE.PAGES.MONSIZE +
     P_RESOURCE.PAGES.CONTEXT +
     P_RESOURCE.PAGES.MONDSSIZE +
     P_RESOURCE.PAGES.TIGRSIZE +
     P_RESOURCE.PAGES.NCQPGS +
     P_RESOURCE.PAGES.CGQPGS +
     RHELD +
     P_RESOURCE.PAGES.SPPC +
     P_RESOURCE.PAGES.GHOSTSIZE +
     P_RESOURCE.PAGES.RPROCSIZE +
     P_RESOURCE.PAGES.PROCSIZE;
 
   AVAILPGS = PCORE - TOTSIZE;
 
   IOCUSE = P_RESOURCE.PAGES.IOCC - P_RESOURCE.PAGES.IOCM;
 
   CURINUSE = P_RESOURCE.PAGES.USERSIZE +
     P_RESOURCE.PAGES.AUTOINUSE +
     P_RESOURCE.PAGES.SHAREDSUSE +
     IOCUSE;
 
   FPPC = P_RESOURCE.PAGES.FPPC - RHELD;
 
   CURAVAIL = FPPC +
     P_RESOURCE.PAGES.AUTOAVAIL +
     P_RESOURCE.PAGES.SHAREDSAVAIL +
     P_RESOURCE.PAGES.IOCM;
 
   UNACCOUNTED = AVAILPGS -
     (CURINUSE +
     CURAVAIL +
     P_RESOURCE.PAGES.SUSPECTS +
     P_RESOURCE.PAGES.IN_TEST +
     P_RESOURCE.PAGES.BPPC);
 
   I=0;
 
   CALL DISP_MEM('Monitor, Aardvark, Recovery, and XDELTA           ',
     P_RESOURCE.PAGES.AARDSIZE +
     P_RESOURCE.PAGES.XDELTASIZE +
     P_RESOURCE.PAGES.MONSIZE);
   CALL DISP_MEM('Monitor context (JITs, etc.) and data segments.   ',
     P_RESOURCE.PAGES.CONTEXT +
     P_RESOURCE.PAGES.MONDSSIZE);
   CALL DISP_MEM('TIGR-built tables.                                ',
     P_RESOURCE.PAGES.TIGRSIZE);
   CALL DISP_MEM('Communications WSQs.                              ',
     P_RESOURCE.PAGES.NCQPGS);
   CALL DISP_MEM('Comgroup queue                                    ',
     P_RESOURCE.PAGES.CGQPGS);
   CALL DISP_MEM('Pages held back for monitor use.                  ',
     RHELD);
   CALL DISP_MEM('Stolen pages.                                     ',
     P_RESOURCE.PAGES.SPPC);
   CALL DISP_MEM('Resident system ghosts.                           ',
     P_RESOURCE.PAGES.GHOSTSIZE);
   CALL DISP_MEM('Required processors (IBEX, DELTA, LOGON).         ',
     P_RESOURCE.PAGES.RPROCSIZE);
   CALL DISP_MEM('All other special shared (resident) processors.   ',
     P_RESOURCE.PAGES.PROCSIZE);
   CALL DISP_MEM('..Total dedicated system memory.                  ',
     TOTSIZE);
   CALL DISP_MEM('(Pages remaining for users.)                      ',
     AVAILPGS);
   CALL DISP_MEM('Currently allocated to users.                     ',
     P_RESOURCE.PAGES.USERSIZE);
   CALL DISP_MEM('Automatically shared run units in use.            ',
     P_RESOURCE.PAGES.AUTOINUSE);
   CALL DISP_MEM('I/O cache pages in use.                           ',
     IOCUSE);
   CALL DISP_MEM('Shared data segments in use.                      ',
     P_RESOURCE.PAGES.SHAREDSUSE);
   CALL DISP_MEM('..Total pages currently allocated to users.       ',
     CURINUSE);
   CALL DISP_MEM('Free Pages.                                       ',
     FPPC);
   CALL DISP_MEM('Automatically shared run units not in use.        ',
     P_RESOURCE.PAGES.AUTOAVAIL);
   CALL DISP_MEM('I/O cache pages not in use.                       ',
     P_RESOURCE.PAGES.IOCM );
   CALL DISP_MEM('Shared data segments not in use.                  ',
     P_RESOURCE.PAGES.SHAREDSAVAIL);
   CALL DISP_MEM('..Total pages currently available.                ',
     CURAVAIL);
   CALL DISP_MEM('Number of pages not accounted for.                ',
     UNACCOUNTED);
   CALL DISP_MEM('..Total physical pages in system.                 ',
     PCORE);
 
   EXITING = BREAK_COUNT > 0;
   RETURN;
%EJECT;
DISP_MEM: PROC(TI,V);
DCL TI CHAR(50);
DCL V SBIN;
DCL DELTA SBIN STATIC;
   DELTA = V - OLD(I);
   OLD(I) = V;
   IF FIRST_PASS OR DELTA = 0
   THEN CALL X$WRITE (F_FDS, VECTOR(FMT1), VECTOR(V), VECTOR(TI));
   ELSE CALL X$WRITE (F_FDS, VECTOR(FMT), VECTOR(DELTA),
     VECTOR(V), VECTOR(TI));
   I = I + 1;
   RETURN;
END DISP_MEM;
END WASP_MEM;
