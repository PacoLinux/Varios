.*M*
HELP file for: INDENT.X
.*T*
 **************************************************************
 *                                                            *
 *  Copyright (c) Bull HN Information Systems Inc., 1989      *
 *                                                            *
 **************************************************************
.*X*                                             
.fif
.*R*
 **************************************************************
 *                                                            *
 * Copyright (c) Bull HN Information Systems Inc., 1989       *
 *                                                            *
 **************************************************************
.*X*
.fin
.*R*
.*X*
FYI, this HELP file has been specially prepared to run through TUNA.X (LEN=79)
prior to running through HERMAN. This action will guarantee that the lines of
text in it will fill a screen as much as possible, and that more lines will end
up per screen.
.*R*
.*A*
INDENT is the CP-6 version of the UNIX BSD utility that prettyprints (indents)
C programs.
.*B*
Full command line syntax:
 
.*X*
.fif
.*R*
 INDENT.X   input-file  [  output-file  ]   [ -bad | -nbad ]
           [ -bap | -nbap ]    [ -bbb | -nbbb ]   [ -bc | -nbc ]
           [ -bl ]  [ -br ]  [ -cn ]  [ -cbi | -ncbi ]  [ -cdn ]
           [ -cdb | -ncdb ]  [ -ce | -nce ]  [ -cin ]  [ -clin ]
           [ -dn ]  [-din]  [ -fc1 | -nfc1 ]   [ -in ]  [ -ip | -nip ]
           [ -ln ]  [ -lcn ]  [ -lp | -nlp ]  [ -pcs | -npcs ]
           [ -npro ]  [ -psl | -npsl ]  [ -sc | -nsc ]  [ -sob | -nsob ]
           [ -st ] [ -troff ] [ -v | -nv ]
.*X*
.fin
.*R*
If you don't wish to use the myriad of options from the command line as
illustrated above, you can put a default set of options in a file in your
account called "indent_pro"; or, you can do the CP-6 thing and embed them in
the source inside a specially-flagged comment line ("/* *X* [options] */").
 
A sample "indent_pro" file is given in the HELP topic SAMPLE_PROFILE.
.*B*
INDENT is a C program formatter. It reformats the C program in the input-file
according to the specified options. They may appear before or after the file
names.
 
NOTE: If you only specify an input-file, the formatting is done "in-place",
that is, the formatted file is written back into input-file and a backup copy
of input-file is written in the current directory with the string "_BAK"
appended to the input-file name.  That is, if you
 
          INDENT.X phred
 
you'll get a file named phred_BAK in your account.
 
If output-file is specified, INDENT checks to make sure it is different from
input-file.
 
Oh, by the way, in its current incarnation, you MUST enter the options in
LOWER-CASE characters only.  Sigh.
.*B*
The options listed below control the formatting style imposed by INDENT.
 
-bap,-nbap.........................Default: -nbap
 
If -bap is specified, a blank line is forced after every procedure body.
 
-bad,-nbad.........................Default: -nbad
 
If -bad is specified, a blank line is forced after every block of declarations.
 
-bbb,-nbbb.........................Default: -nbbb
 
If -bbb is specified, a blank line is forced before every block comment.
 
-bc,-nbc...........................Default: -bc
 
If -bc is specified, then a newline is forced after each comma in a
declaration.
 
.*B*
-br,-bl............................Default: -br
 
Specifying -bl lines up compound statements like this:
.*X*
.fif
.*R*
                   if (...)
                   {
                       code
                   }
 
.*X*
.fin
.*R*
Specifying -br makes them look like this:
 
.*X*
.fif
.*R*
                   if (...) {
                       code
                   }
 
.*X*
.fin
.*R*
.*B*
-cbi,-ncbi.........................Default: -ncbi
 
"Closing brace indentation" makes closing braces align with the indented code
rather than with the matching control structure.  The default was selected to
match K&R.
 
With -cbi:
.*X*
.fif
.*R*
               if (phred) {
                    x++;
                    }
 
With -ncbi:
 
               if (phred) {
                    x++;
               }
 
.*X*
.fin
.*R*
.*B*
 
-cn................................Default: -c33
 
The column in which comments on code start.
 
-cdn...............................Default: To match -c
 
The column in which comments on declarations start.
 
.*B*
-cdb,-ncdb.........................Default: -cdb
 
Enables (disables) the placement of comment delimiters on blank lines. With
this option enabled, comments look like this:
 
.*X*
.fif
.*R*
                    /*
                     * this is a comment
                     */
.*X*
.fin
.*R*
 
Rather than like this:
 
.*X*
.fif
.*R*
                    /* this is a comment */
.*X*
.fin
.*R*
 
This only affects block comments, not comments to the right of code.
 
-ce,-nce...........................Default: -ce
 
Enables (disables) forcing "else"s to cuddle up to the immediatly preceeding
"}".
 
.*B*
-cin...............................Default: Same as -i
 
Sets the continuation indentation to be n. Continuation lines will be indented
that far from the beginning of the first line of the statement. Parenthesized
expressions have extra indentation added to indicate the nesting, unless -lp is
in effect.
 
-clin...............................Default: -cli0
 
Causes case labels to be indented n tab stops to the right of the containing
switch statement. -cli0.5 causes case labels to be indented half a tab stop.
 
-dn................................Default: -d1
 
Controls the placement of comments which are not to the right of code. -d1
means that such comments are placed one indentation level to the left of code.
Specifying -d0 lines up these comments with the code. See the section on
comment indentation below.
 
.*B*
-din...............................Default: -di16
 
Specifies the indentation, in character positions, from a declaration keyword
to the following identifier.
 
-fc1,-nfc1.........................Default: -fc1
 
Enables (disables) the formatting of comments that start in column 1.  Often,
comments whose leading "/" is in column 1 have been carefully hand formatted by
the programmer. In such cases, -nfc1 should be used.
 
-in................................Default: -i4
 
The number of spaces for one indentation level.
 
-ip,-nip...........................Default: -ip
 
Enables (disables) the indentation of parameter declarations from the left
margin.
 
-ln................................Default: -l75
 
Maximum length of an output line.
 
.*B*
-npro..............................Default: use the profile file
 
Makes INDENT ignore the profile file "indent_pro".
 
-lp,-nlp...........................Default: -lp
 
Lines up code surrounded by parenthesis in continuation lines. If a line has a
left paren which is not closed on that line, then continuation lines will be
lined up to start at the character position just after the left paren. For
example, here is how a piece of continued code looks with -nlp in effect:
.*X*
.fif
.*R*
                 p1 = first_procedure(second_procedure(p2, p3),
                      third_procedure(p4, p5));
.*X*
.fin
.*R*
 
With -lp in effect the code looks somewhat clearer:
 
.*X*
.fif
.*R*
                   p1 = first_procedure(second_procedure(p2, p3),
                                        third_procedure(p4, p5));
.*X*
.fin
.*R*
 
Inserting a couple more newlines we get:
 
.*X*
.fif
.*R*
                   p1 = first_procedure(second_procedure(p2,
                                                         p3),
                                        third_procedure(p4,
                                                        p5));
 
.*X*
.fin
.*R*
 
.*B*
-pcs,-npcs.........................Default: -npcs
 
If true (-pcs) all procedure calls will have a space inserted between the name
and the '('.
 
-psl,-npsl.........................Default: -psl
 
If true (-psl) the names of procedures being defined are placed in column 1;
their types, if any, will be left on the previous lines.
 
-sc,-nsc...........................Default: ????
 
Enables (disables) the placement of asterisks ("*"s) at the left edge of all
comments.
 
-sob,-nsob.........................Default: -nsob
 
If -sob is specified, INDENT will swallow optional blank lines. You can use
this to get rid of blank lines after declarations.
 
.*B*
-st................................Default: NOT USED ON CP-6.
 
Causes INDENT to take its input from stdin, and put its output to stdout.
 
-Ttypename.........................Default: none
 
Adds typename to the list of type keywords. Names accumulate: -T can be
specified more than once. You need to specify all the typenames that appear in
your program that are defined by typedefs (nothing will be harmed if you miss a
few) but the program won't be formatted as nicely as it should. This sounds
like a painful thing to have to do, but it's really a symptom of a problem in
C: typedef causes a syntactic change in the laguage and INDENT can't find all
typedefs.
 
-troff.............................Default: not to make troff stuff
 
Causes INDENT to format the program for processing by troff. It will produce a
fancy listing in much the same spirit as vgrind. If the output file is not
specified, the default is standard output, rather than formatting in place.
Note that this option is pretty much useless on CP-6.
 
.*B*
-v,-nv.............................Default: -nv
 
Forces "verbose" mode, which makes INDENT report when it splits one line of
input into two or more lines of output, and gives some size statistics at
completion.
 
.*B*
The profile file
 
You may set up your own "profile" of defaults to  INDENT  by creating a  file
called  "indent_pro"  in the account you're working in.  That file should have
a single record containing whatever options you want to have in effect by
default.  Options should be separated by spaces.
 
 
*X* comments (embedded INDENT directives)
 
You can embed INDENT.X directives in your C source code inside a
specially-prepared comment that looks like this:
 
/* *X* -xxx -xxx -xxx -xxx */
 
The comment MUST have its first six characters be exactly "/* *X*".  That
sequence triggers the directive dectection code.  The comment must occur in the
first 50 lines of the source file.  Unlike the profile file, it may be
continued across multiple records.
 
 
.*B*
Precedence
 
If INDENT  is run and the source file contains a "*X*" comment, the profile
file is ignored and the "*X*" directives are taken as the defaults.  If there
is no "*X*" comment and a profile file exists, then its contents are used as
INDENT's defaults.   Options  on  the command line,   though,   always override
profile  or "*X*" switches.  However, once you start using "*X*" directives,
the only really useful command-line switch is "-v".
 
.*B*
COMMENTS on COMMENTS
 
"Box" comments:
 
INDENT assumes that any comment with a dash or  star  immediately after  the
start of comment (that is, "/*-" or "/**') is a comment surrounded by a box  of
stars.  Each  line  of such a comment is left unchanged, except that its
indentation may be adjusted to account for the change in indentation of the
first line of the comment.
 
Straight text:
 
All other comments are treated  as  straight text.  INDENT fits as many words
(separated by blanks, tabs, or newlines) on a line as possible.  Blank lines
break paragraphs.
 
.*B*
Comment indentation:
 
If a comment is on a line with code it  is  started  in  the "comment column",
which  is  set  by  the -cn command line parameter.  Otherwise, the comment is
started at n indentation  levels less than where code is currently being
placed, where n is specified by the -dn command line parameter.   If the code
on a line extends past the comment column, the comment starts further to the
right, and the right  margin  may be automatically extended in extreme cases.
 
.*B*
Preprocessor lines
 
In general, INDENT leaves  preprocessor  lines  alone.   The only reformmatting
that  it  will  do  is to straighten up trailing comments.  It leaves embedded
comments alone.  Conditional compilation  (#ifdef...#endif)  is  recognized and
INDENT attempts to correctly compensate  for  the  syntactic peculiarites
introduced.
 
C syntax
 
INDENT understands a substantial amount about the syntax  of C,  but it  has  a
"forgiving" parser.  It attempts to cope with the usual sorts of incomplete and
misformed syntax.  In particular, the use of macros like:
 
        #define forever for(;;)
 
is handled properly.
 
.*B* KNOWN_BUGS BUGS
BUGS
 
INDENT has even more switches than ls.
 
(This comment is from the original INDENT 'man' page.  The original INDENT
didn't handle *X* records, though.  However, it's such a typically UNIX
sentiment that I thought it would be funny to leave it here.)
 
INDENT doesn't handle line lengths right.  It WILL make lines longer than the
line length parameter specifies, and frequently, not just in "extreme" cases.
The one that particularly peeves me is the
 
     printf ("some string that could have been put on another line");
 
case.
.*X*
A common mistake that often causes grief is typing:
    INDENT *.c to the shell in an attempt to INDENT all the C programs in a
directory.  This is probably a bug, not a feature.
.*R*
 
The stupid "options-parsing" code is, of course, written without the benefit of
an underlying software package that would support case-insensitivity.  In other
words, ya gotta put your options in lower case.  Unlike the first "bug" above,
this one is obviously a bug, although a real UNICH wouldn't agree.
 
The output file isn't EDIT-keyed.
.*K* OWNER
Stolen from Berkely UNIX by Sun and thence from the MINIX newsgroup by John
Joseph.  Embedded commentary in the source indicates that the Regents of the
University of California had something to do with the code, but somehow I doubt
they're even computer-literate, much less capable of generating a program like
this.
.*K* OPTIONS
These are the options for INDENT.X:
 
.*B*  bap  nbap
-bap,-nbap.........................Default: -nbap
 
If -bap is specified, a blank line is forced after every procedure body.
 
.*B*  bad  nbad
-bad,-nbad.........................Default: -nbad
 
If -bad is specified, a blank line is forced after every block of declarations.
 
.*B*  bbb  nbbb
-bbb,-nbbb.........................Default: -nbbb
 
If -bbb is specified, a blank line is forced before every block comment.
 
.*B*  bc  nbc
-bc,-nbc...........................Default: -bc
 
If -bc is specified, then a newline is forced after each comma in a
declaration.
 
.*B*  br  bl
-br,-bl............................Default: -br
 
Specifying -bl lines up compound statements like this:
.*X*
.fif
.*R*
                   if (...)
                   {
                       code
                   }
 
.*X*
.fin
.*R*
Specifying -br makes them look like this:
 
.*X*
.fif
.*R*
                   if (...) {
                       code
                   }
 
.*X*
.fin
.*R*
.*B*  cbi  ncbi
-cbi,-ncbi.........................Default: -ncbi
 
"Closing brace indentation" makes closing braces align with the indented code
rather than with the matching control structure.  The default was selected to
match K&R.
 
With -cbi:
.*X*
.fif
.*R*
               if (phred) {
                    x++;
                    }
 
With -ncbi:
 
               if (phred) {
                    x++;
               }
 
.*X*
.fin
.*R*
 
.*B*  cn
-cn................................Default: -c33
 
The column in which comments on code start.
 
.*B*  cdn
-cdn...............................Default: To match -c
 
The column in which comments on declarations start.
 
.*B*  cdb  ncdb
-cdb,-ncdb.........................Default: -cdb
 
Enables (disables) the placement of comment delimiters on blank lines. With
this option enabled, comments look like this:
 
.*X*
.fif
.*R*
                    /*
                     * this is a comment
                     */
.*X*
.fin
.*R*
 
Rather than like this:
 
.*X*
.fif
.*R*
                    /* this is a comment */
.*X*
.fin
.*R*
 
This only affects block comments, not comments to the right of code.
 
.*B*  ce  nce
-ce,-nce...........................Default: -ce
 
Enables (disables) forcing "else"s to cuddle up to the immediatly preceeding
"}".
 
.*B*  cin
-cin...............................Default: Same as -i
 
Sets the continuation indentation to be n. Continuation lines will be indented
that far from the beginning of the first line of the statement. Parenthesized
expressions have extra indentation added to indicate the nesting, unless -lp is
in effect.
 
.*B*  clin
-clin..............................Default: -cli0
 
Causes case labels to be indented n tab stops to the right of the containing
switch statement. -cli0.5 causes case labels to be indented half a tab stop.
 
.*B*  dn
-dn................................Default: -d1
 
Controls the placement of comments which are not to the right of code. -d1
means that such comments are placed one indentation level to the left of code.
Specifying -d0 lines up these comments with the code. See the section on
comment indentation below.
 
.*B*  din
-din...............................Default: -di16
 
Specifies the indentation, in character positions, from a declaration keyword
to the following identifier.
 
.*B*  fc1  nfc1
-fc1,-nfc1.........................Default: -fc1
 
Enables (disables) the formatting of comments that start in column 1.  Often,
comments whose leading "/" is in column 1 have been carefully hand formatted by
the programmer. In such cases, -nfc1 should be used.
 
.*B*  in
-in................................Default: -i4
 
The number of spaces for one indentation level.
 
.*B*  ip  nip
-ip,-nip...........................Default: -ip
 
Enables (disables) the indentation of parameter declarations from the left
margin.
 
.*B*  ln
-ln................................Default: -l75
 
Maximum length of an output line.
 
.*B*  npro
-npro..............................Default: use the profile file
 
Makes INDENT ignore the profile file "indent_pro".
 
.*B*  lp  nlp
-lp,-nlp...........................Default: -lp
 
Lines up code surrounded by parenthesis in continuation lines. If a line has a
left paren which is not closed on that line, then continuation lines will be
lined up to start at the character position just after the left paren. For
example, here is how a piece of continued code looks with -nlp in effect:
.*X*
.fif
.*R*
                 p1 = first_procedure(second_procedure(p2, p3),
                      third_procedure(p4, p5));
.*X*
.fin
.*R*
 
With -lp in effect the code looks somewhat clearer:
 
.*X*
.fif
.*R*
                   p1 = first_procedure(second_procedure(p2, p3),
                                        third_procedure(p4, p5));
.*X*
.fin
.*R*
 
Inserting a couple more newlines we get:
 
.*X*
.fif
.*R*
                   p1 = first_procedure(second_procedure(p2,
                                                         p3),
                                        third_procedure(p4,
                                                        p5));
 
.*X*
.fin
.*R*
 
.*B*  pcs  npcs
-pcs,-npcs.........................Default: -npcs
 
If true (-pcs) all procedure calls will have a space inserted between the name
and the '('.
 
.*B*  psl  npsl
-psl,-npsl.........................Default: -psl
 
If true (-psl) the names of procedures being defined are placed in column 1;
their types, if any, will be left on the previous lines.
 
.*B*  sc  nsc
-sc,-nsc...........................Default: ????
 
Enables (disables) the placement of asterisks ("*"s) at the left edge of all
comments.
 
.*B*  sob  nsob
-sob,-nsob.........................Default: -nsob
 
If -sob is specified, INDENT will swallow optional blank lines. You can use
this to get rid of blank lines after declarations.
 
.*B*  st
-st................................Default: NOT USED ON CP-6.
 
Causes INDENT to take its input from stdin, and put its output to stdout.
 
.*B*  Ttypename
-Ttypename.........................Default: none
 
Adds typename to the list of type keywords. Names accumulate: -T can be
specified more than once. You need to specify all the typenames that appear in
your program that are defined by typedefs (nothing will be harmed if you miss a
few) but the program won't be formatted as nicely as it should. This sounds
like a painful thing to have to do, but it's really a symptom of a problem in
C: typedef causes a syntactic change in the laguage and INDENT can't find all
typedefs.
 
.*B*  troff
-troff.............................Default: not to make troff stuff
 
Causes INDENT to format the program for processing by troff. It will produce a
fancy listing in much the same spirit as vgrind. If the output file is not
specified, the default is standard output, rather than formatting in place.
Note that this option is pretty much useless on CP-6.
 
.*B*  v  nv
-v,-nv.............................Default: -nv
 
Forces "verbose" mode, which makes INDENT report when it splits one line of
input into two or more lines of output, and gives some size statistics at
completion.
.*K* SAMPLE_PROFILE
-bap -bad -bbb -br -c36 -ncdb -ce -ci4 -cli0 -d0 -di10 -nfc1 -i4 -l67 -lp -npcs
-psl -nsc -sob
.*K* XINDEX
INDENT.X
.*R*
AID=PROGRAMMING
.*R*
AID=INTEGRATION
.*R*
C_PREPROCESSING
.*R*
PRETTY_PRINTER
.*R*
FORMATTING
.*K* XINDEX_ABSTRACT
TOOL=INDENT
.*R*
INDENT.X indents and aligns C language source code.
.*K* CHANGES Changes changes
910124  #40645
.*R*
CUMMINS-submitted updates to fix bug in *X* handling applied.
.*B*
891205
.*R*
[JLJ] Added -cbi option.
.*R*
891201
.*R*
Submitted to E02 X account.
