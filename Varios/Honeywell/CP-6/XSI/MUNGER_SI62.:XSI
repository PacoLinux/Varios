/*M*      NAME: LXX$SYMTBL  Symbol Table for Munger         */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
LXX$SYMTBL:   PROC ( CODE, SIZE, ENT$ );
 
    %INCLUDE B_SEGIDS_C;
    %INCLUDE CP_6;
    %INCLUDE MUNGER_C61;
 
    DCL CODE UBIN;
    DCL ENT$ PTR;
    DCL SIZE UBIN;
 
    %VLP_VECTOR    ( FPTN = VECTOR_EQU,
                     STCLASS = STATIC,
                     SEGID = %DS3SID );
 
    %VLP_VECTOR    ( FPTN = VECTOR_NAM,
                     STCLASS = STATIC,
                     SEGID = %DS4SID );
 
    %VLP_VECTOR    ( FPTN = VECTOR_EVT,
                     STCLASS = STATIC,
                     SEGID = %DS5SID );
 
    %VLP_VECTOR    ( FPTN = VECTOR_STT,
                     STCLASS = STATIC,
                     SEGID = %DS6SID );
 
    %VLP_VECTOR    ( FPTN = VECTOR_ACT,
                     STCLASS = STATIC,
                     SEGID = %DS7SID );
 
    DCL EQU_SIZE UBIN WORD STATIC ALIGNED INIT(0);
    DCL EQU_USED UBIN WORD STATIC ALIGNED INIT(0);
    DCL EQU_PTR$ PTR STATIC ALIGNED INIT(ADDR(NIL));
    DCL EQU_NXT$ PTR STATIC ALIGNED INIT(ADDR(NIL));
    DCL NAM_SIZE UBIN WORD STATIC ALIGNED INIT(0);
    DCL NAM_USED UBIN WORD STATIC ALIGNED INIT(0);
    DCL NAM_PTR$ PTR STATIC ALIGNED INIT(ADDR(NIL));
    DCL NAM_NXT$ PTR STATIC ALIGNED INIT(ADDR(NIL));
    DCL EVT_SIZE UBIN WORD STATIC ALIGNED INIT(0);
    DCL EVT_USED UBIN WORD STATIC ALIGNED INIT(0);
    DCL EVT_PTR$ PTR STATIC ALIGNED INIT(ADDR(NIL));
    DCL EVT_NXT$ PTR STATIC ALIGNED INIT(ADDR(NIL));
    DCL STT_SIZE UBIN WORD STATIC ALIGNED INIT(0);
    DCL STT_USED UBIN WORD STATIC ALIGNED INIT(0);
    DCL STT_PTR$ PTR STATIC ALIGNED INIT(ADDR(NIL));
    DCL STT_NXT$ PTR STATIC ALIGNED INIT(ADDR(NIL));
    DCL ACT_SIZE UBIN WORD STATIC ALIGNED INIT(0);
    DCL ACT_USED UBIN WORD STATIC ALIGNED INIT(0);
    DCL ACT_PTR$ PTR STATIC ALIGNED INIT(ADDR(NIL));
    DCL ACT_NXT$ PTR STATIC ALIGNED INIT(ADDR(NIL));
 
    %FPT_GDS       ( FPTN = GET_MEM,
                     STCLASS = STATIC,
                     AUTOSEG = NO,
                     COMMON = NO,
                     SEGSIZE = 1024 );
 
%EJECT;
 
    DO CASE ( CODE );
 
         CASE ( %LX#ACQNAM );
 
              GET_MEM.RESULTS_ = VECTOR(VECTOR_NAM);
              IF NAM_NXT$ = ADDR(NIL) THEN DO;
                   NAM_NXT$ = VECTOR_NAM.PTR$;
                   NAM_PTR$ = VECTOR_NAM.PTR$;
              END;
              DO WHILE ( SIZE + NAM_USED > NAM_SIZE );
                   CALL M$GDS ( GET_MEM );
                   NAM_SIZE = NAM_SIZE + 1024;
              END;
              ENT$ = NAM_NXT$;
              NAM_NXT$ = PINCRW(NAM_NXT$, SIZE);
              NAM_USED = NAM_USED + SIZE;
 
         CASE ( %LX#ACQEQU );
 
              GET_MEM.RESULTS_ = VECTOR(VECTOR_EQU);
              IF EQU_NXT$ = ADDR(NIL) THEN DO;
                   EQU_NXT$ = VECTOR_EQU.PTR$;
                   EQU_PTR$ = VECTOR_EQU.PTR$;
              END;
              DO WHILE ( SIZE + EQU_USED > EQU_SIZE );
                   CALL M$GDS ( GET_MEM );
                   EQU_SIZE = EQU_SIZE + 1024;
              END;
              ENT$ = EQU_NXT$;
              EQU_NXT$ = PINCRW(EQU_NXT$, SIZE);
              EQU_USED = EQU_USED + SIZE;
 
         CASE ( %LX#ACQSTT );
 
              GET_MEM.RESULTS_ = VECTOR(VECTOR_STT);
              IF STT_NXT$ = ADDR(NIL) THEN DO;
                   STT_NXT$ = VECTOR_STT.PTR$;
                   STT_PTR$ = VECTOR_STT.PTR$;
              END;
              DO WHILE ( SIZE + STT_USED > STT_SIZE );
                   CALL M$GDS ( GET_MEM );
                   STT_SIZE = STT_SIZE + 1024;
              END;
              ENT$ = STT_NXT$;
              STT_NXT$ = PINCRW(STT_NXT$, SIZE);
              STT_USED = STT_USED + SIZE;
 
         CASE ( %LX#ACQEVT );
 
              GET_MEM.RESULTS_ = VECTOR(VECTOR_EVT);
              IF EVT_NXT$ = ADDR(NIL) THEN DO;
                   EVT_NXT$ = VECTOR_EVT.PTR$;
                   EVT_PTR$ = VECTOR_EVT.PTR$;
              END;
              DO WHILE ( SIZE + EVT_USED > EVT_SIZE );
                   CALL M$GDS ( GET_MEM );
                   EVT_SIZE = EVT_SIZE + 1024;
              END;
              ENT$ = EVT_NXT$;
              EVT_NXT$ = PINCRW(EVT_NXT$, SIZE);
              EVT_USED = EVT_USED + SIZE;
 
         CASE ( %LX#ACQACT );
 
              GET_MEM.RESULTS_ = VECTOR(VECTOR_ACT);
              IF ACT_NXT$ = ADDR(NIL) THEN DO;
                   ACT_NXT$ = VECTOR_ACT.PTR$;
                   ACT_PTR$ = VECTOR_ACT.PTR$;
              END;
              DO WHILE ( SIZE + ACT_USED > ACT_SIZE );
                   CALL M$GDS ( GET_MEM );
                   ACT_SIZE = ACT_SIZE + 1024;
              END;
              ENT$ = ACT_NXT$;
              ACT_NXT$ = PINCRW(ACT_NXT$, SIZE);
              ACT_USED = ACT_USED + SIZE;
 
         CASE ( %LX#SIZNAM );
 
              SIZE = NAM_USED;
              ENT$ = NAM_PTR$;
 
         CASE ( %LX#SIZEQU );
 
              SIZE = EQU_USED;
              ENT$ = EQU_PTR$;
 
         CASE ( %LX#SIZSTT );
 
              SIZE = STT_USED;
              ENT$ = STT_PTR$;
 
         CASE ( %LX#SIZEVT );
 
              SIZE = EVT_USED;
              ENT$ = EVT_PTR$;
 
         CASE ( %LX#SIZACT );
 
              SIZE = ACT_USED;
              ENT$ = ACT_PTR$;
 
    END;
 
END LXX$SYMTBL;
