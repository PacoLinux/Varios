/*M* FLEA - collects data from ELEPHANT */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* DDA */
 
/**/
/*  FLEA (Formatted Listing of Elephant Activity) reports data collected      */
/*  by ELEPHANT.                                                              */
/**/
 
FLEA: PROC MAIN;
/*X* */
 
%INCLUDE B_ERRORS_C;
%INCLUDE B$JIT_C;
  %B$JIT0 (STCLASS="BASED(JIT$)");
  %U$JIT1;
  %M$JIT2;
  %F$JIT3;
  %S$JIT4;
  %J$JIT5;
  %A$JIT6;
%INCLUDE B$USER;
%INCLUDE CP_6;
  %B$ALT;
  %B$TCB;
  %F$DCB;
%INCLUDE XU_FORMAT_C;
%INCLUDE XU_MACRO_C;
%EJECT;
%F_FDS       (NAME                     = F_FDS,
              BUF=LO_BUF,
              DCB=M$LO,
              STCLASS=STATIC );
%EJECT;
/***************\
*               *
*   M$LO FPTs   *
*               *
\***************/
 
%M$DCB       (DCBN                     = M$LO,
              ASN=DEVICE,
              FUN=CREATE,
              RES='ME  ' );
 
%FPT_OPEN    (FPTN                     = OPEN_LO,
              DCB=M$LO );
%EJECT;
/***************\
*               *
*   F$ML FPTs   *
*               *
\***************/
 
%M$DCB       (DCBN                     = F$ML,
              ASN=FILE,
              FUN=IN,
              NAME='MEMORYLOG' );
 
%FPT_OPEN    (FPTN                     = OPEN_ML,
              DCB=F$ML,
              FUN=IN );
 
%FPT_READ    (FPTN                     = READ_ML,
              BUF=ML_BUF,
              DCB=F$ML,
              KEYR=YES,
              KEY=KEY );
 
%FPT_UNFID   (FPTN                     = UNFID_ML,
              DCB=F$ML,
              TEXTFID=ML_FID );
%EJECT;
/**/
/* MISCELLANEOUS FPTs */
/**/
 
%FPT_TIME    (FPTN                     = UTS_TO_LOCAL,
              DATE=DATE,
              DEST=LOCAL,
              SOURCE=UTS,
              TIME=TIME,
              TSTAMP=KEY.UTS );
 
%FPT_CLOSE   (FPTN                     = FPT_CLOSE,
              DISP=SAVE );
 
%FPT_ERRMSG  (FPTN                     = ERRMSG,
              BUF=LO_BUF,
              CODE=ERRCODE,
              OUTDCB1=M$LO );
%VLP_ERRCODE (FPTN                     = ERRCODE,
              STCLASS=STATIC );
%EJECT;
/**/
/* SYMREFed PTRs, ENTRYs and EPTRs */
/**/
 
DCL B$TCB$                   PTR       SYMREF;
DCL X$WRITE                  ENTRY(22);
%EJECT;
/**/
/* FORMATter formats */
/**/
 
DCL SNAP_TITLE               CHAR(0)   STATIC INIT(
    '%!The %D%A snapshot in %>A taken at %A on %A when the # of free pages was %D.');
DCL USER_HDR1                CHAR(0)   STATIC INIT(
    '%1/ACCT     SYSID  PEAK    RESCO PHYSPROCDATA DYN CON  RO DYN DBG ASL  FPOOL  UNAME        CCBUF');
DCL USER_HDR2                CHAR(0)   STATIC INIT(
    '               JOB STP MAX CUR PGS PGS PGS SEG TXT PGS PGS SEG SEG USE LIM');
DCL USER_LINE                CHAR(0)   STATIC INIT(
    '%A %5D%4D%4D%4D%4D%4D%4D%4D%4D%4D%4D%4D%4D%4D%4D%4D %A %A');
DCL TOTAL_LINE1              CHAR(0)   STATIC INIT(
    '%1/Totals: %D Users, %D User pages, %D Pages per user');
DCL TOTAL_LINE2              CHAR(0)   STATIC INIT(
    '        %D MING pages and %D Pages per Real (non-MING) user.');
%EJECT;
/**/
/* CHARacter items */
/**/
 
DCL INT6                     CHAR(6);
DCL LO_BUF                   CHAR(133) STATIC;
DCL ML_FID                   CHAR(80)  STATIC INIT(' ');
DCL SUFFIX                   CHAR(2);
%EJECT;
/**/
/* PTRs */
/**/
 
DCL B$P$                     PTR;
DCL JIT$                     PTR;
DCL M$LO$                    PTR;
DCL F$ML$                    PTR;
%EJECT;
/**/
/* SBIN items */
/**/
 
DCL FREE_PAGES               SBIN;
DCL ML_CNT                   SBIN;
DCL NUM_USERS                SBIN;
DCL NUM_USER_PAGES           SBIN;
DCL NUM_MING_PAGES           SBIN;
DCL P_LINECNT                SBIN;
DCL PAGE_SIZE                SBIN;
DCL PAGES_PER_USER           SBIN;
DCL PAGES_PER_NON_MING_USER  SBIN;
DCL SNAP_CNT                 SBIN;
DCL TOTAL_MEM                SBIN;
DCL TOTAL_MING_MEM           SBIN;
DCL U_LINECNT                SBIN;
%EJECT;
/**/
/* STRUCTUREs */
/**/
 
DCL 1 KEY  STATIC,
      2 LEN                  UBIN(9)   UNAL,
      2 UTS                  UBIN(36)  UNAL,
      2 TYPE                 CHAR(1)   UNAL,
      2 INDX                 UBIN(18)  UNAL,
      2 USRNO REDEF INDX     UBIN(18)  UNAL;
 
DCL 1 DATE  STATIC,
      2 MMDDYY               CHAR(8);
 
DCL 1 TIME  STATIC,
      2 HHMMSS               CHAR(8)   UNAL,
      2 *                    CHAR(1)   UNAL,
      2 SS                   CHAR(2)   UNAL;
 
DCL 1 ML_BUF  STATIC,
      2 FREE_PAGES           UBIN,
      2 *                    CHAR(4092);
%EJECT;
/**/
/* VECTORs */
/**/
 
DCL ACCN_                    BIT(72)          DALIGNED;
DCL CCBUF_                   BIT(72)          DALIGNED;
DCL CURRCORE_                BIT(72)          DALIGNED;
DCL FBUC_                    BIT(72)          DALIGNED;
DCL FBUL_                    BIT(72)          DALIGNED;
DCL FREE_PAGES_              BIT(72)          DALIGNED;
DCL HHMMSS_                  BIT(72)          DALIGNED;
DCL JPEAK_                   BIT(72)          DALIGNED;
DCL MAXCORE_                 BIT(72)          DALIGNED;
DCL ML_FID_                  BIT(72)          DALIGNED;
DCL MMDDYY_                  BIT(72)          DALIGNED;
DCL NUM_USERS_               BIT(72)          DALIGNED;
DCL PAGES_PER_USER_          BIT(72)          DALIGNED;
DCL PAGES_PER_NON_MING_USER_ BIT(72)          DALIGNED;
DCL PCC_                     BIT(72)          DALIGNED;
DCL PCD_                     BIT(72)          DALIGNED;
DCL PCP_                     BIT(72)          DALIGNED;
DCL PPC_                     BIT(72)          DALIGNED;
DCL PCDS_                    BIT(72)          DALIGNED;
DCL PCROS_                   BIT(72)          DALIGNED;
DCL PCDD_                    BIT(72)          DALIGNED;
DCL PCDDS_                   BIT(72)          DALIGNED;
DCL PCADS_                   BIT(72)          DALIGNED;
DCL SNAP_CNT_                BIT(72)          DALIGNED;
DCL SNAP_TITLE_              BIT(72)          DALIGNED;
DCL SPEAK_                   BIT(72)          DALIGNED;
DCL SUFFIX_                  BIT(72)          DALIGNED;
DCL SYSID_                   BIT(72)          DALIGNED;
DCL TOTAL_LINE1_             BIT(72)          DALIGNED;
DCL TOTAL_LINE2_             BIT(72)          DALIGNED;
DCL TOTAL_MEM_               BIT(72)          DALIGNED;
DCL TOTAL_MING_MEM_          BIT(72)          DALIGNED;
DCL UNAME_                   BIT(72)          DALIGNED;
DCL USER_HDR1_               BIT(72)          DALIGNED;
DCL USER_HDR2_               BIT(72)          DALIGNED;
DCL USER_LINE_               BIT(72)          DALIGNED;
%EJECT;
START_HERE:
 
        CALL INITIALIZE ALTRET( OOPS );
 
        DO WHILE('1'B);
           CALL M$READ( READ_ML ) ALTRET( EOF_HIT );
           ML_CNT= ML_CNT + 1;
           CALL IS_IT_IN_RANGE ALTRET( NEXT_REC );
           DO SELECT( KEY.TYPE );
            SELECT( 'H' );              /* Header record encountered          */
              CALL BUILD_NEW_TITLE ALTRET( EOF_HIT );
            SELECT( 'P' );
              CALL DO_PROCESSOR;
            SELECT( 'U' );              /* User record encountered            */
              CALL DO_USER;
            SELECT( ELSE );
 
            END;
NEXT_REC:
           END;
 
EOF_HIT:
        CALL PUT_TOTALS;
        ERRCODE= B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR;
        CALL CLOSE( DCBNUM(F$ML) );
        CALL CLOSE( DCBNUM(M$LO) );
        IF ERRCODE.ERR# = %E$EOF THEN
           CALL M$EXIT;
 
OOPS:
        ERRCODE= B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR;
        ERRMSG.V.DCB#= B$TCB$ -> B$TCB.ALT$ -> B$ALT.DCB#;
        CALL M$ERRMSG( ERRMSG );
        CALL M$XXX;
%EJECT;
/**/
/*  We just encountered a HEADER record.  Take note of how many Free Pages    */
/*  were available at the time of this snap.  Then convert the UTS of this    */
/*  snap to a printable form (both the Date and the Time) to be included in   */
/*  the heading later.                                                        */
/**/
BUILD_NEW_TITLE: PROC  ALTRET;
 
        FREE_PAGES= ML_BUF.FREE_PAGES;
        SNAP_CNT= SNAP_CNT + 1;
        CALL BINCHAR( INT6,SNAP_CNT );
        IF SUBSTR(INT6,4,2) = '11' OR
          SUBSTR(INT6,4,2) = '12' OR
          SUBSTR(INT6,4,2) = '13' THEN
           SUFFIX= 'th';
        ELSE
           IF SUBSTR(INT6,5,1) = '1' THEN
              SUFFIX= 'st';
           ELSE
              IF SUBSTR(INT6,5,1) = '2' THEN
                 SUFFIX= 'nd';
              ELSE
                 IF SUBSTR(INT6,5,1) = '3' THEN
                    SUFFIX= 'rd';
                 ELSE
                    SUFFIX= 'th';
        CALL M$TIME( UTS_TO_LOCAL ) ALTRET( BAD_TIME );
        CALL PUT_TOTALS;
        U_LINECNT= PAGE_SIZE + 1;
        P_LINECNT= PAGE_SIZE + 1;
RE_TURN:
        RETURN;
 
BAD_TIME:
        ALTRETURN;
 
END BUILD_NEW_TITLE;
/**/
/*  CLOSE a file */
/**/
CLOSE:  PROC( DCB# );
DCL DCB#                     UBIN;
 
        IF DCBADDR(DCB#)->F$DCB.FCD# THEN DO;
           FPT_CLOSE.V.DCB#= DCB#;
           CALL M$CLOSE( FPT_CLOSE ) ALTRET( SO_WHAT );
           END;
SO_WHAT:
        RETURN;
 
END CLOSE;
%EJECT;
DO_PROCESSOR: PROC;
 
RE_TURN:
        RETURN;
 
END DO_PROCESSOR;
%EJECT;
/**/
/*  Process a USERs record.  Put out headings first if need be. */
/**/
 
DO_USER: PROC;
 
        IF P_LINECNT < PAGE_SIZE THEN
           P_LINECNT= PAGE_SIZE + 1;
 
        U_LINECNT= U_LINECNT + 1;
        IF U_LINECNT > PAGE_SIZE THEN   /* Time for a new page                */
           CALL PUT_HEADINGS( U_LINECNT );
 
        NUM_USERS= NUM_USERS + 1;
        TOTAL_MEM= TOTAL_MEM + B$JIT.PPC;
        IF B$JIT.USER <= 13 THEN
           TOTAL_MING_MEM= TOTAL_MING_MEM + B$JIT.PPC;
        CALL X$WRITE( F_FDS,USER_LINE_,ACCN_,SYSID_,JPEAK_,SPEAK_,MAXCORE_,
          CURRCORE_,PPC_,PCP_,PCD_,PCDS_,PCC_,
          PCROS_,PCDD_,PCDDS_,PCADS_,FBUC_,FBUL_,
          UNAME_,CCBUF_ );
RE_TURN:
        RETURN;
 
END DO_USER;
%EJECT;
/**/
/*  If the code was here, it would determine if the UTS in the most recently  */
/*  read record was within the range specified by the user.                   */
/**/
 
IS_IT_IN_RANGE: PROC  ALTRET;
 
RE_TURN:
        RETURN;
 
END IS_IT_IN_RANGE;
%EJECT;
INITIALIZE: PROC  ALTRET;
 
/**/
/*  OPEN input and output files.  Initialize DCB pointers and zero            */
/*  miscellaneous counters.                                                   */
/**/
        CALL M$OPEN( OPEN_LO ) ALTRET( OOPS );
        CALL M$OPEN( OPEN_ML ) ALTRET( OOPS );
        CALL M$UNFID( UNFID_ML ) ALTRET( OOPS );
        LO_BUF= ' ';
        M$LO$= DCBADDR(DCBNUM(M$LO));
        F$ML$= DCBADDR(DCBNUM(F$ML));
        IF M$LO$->F$DCB.LINES# > 5 THEN
           PAGE_SIZE= M$LO$->F$DCB.LINES#;
        ELSE
           PAGE_SIZE= 39;
        ML_CNT= 0;
        SNAP_CNT= 0;
        NUM_USERS= 0;
        TOTAL_MEM= 0;
        TOTAL_MING_MEM= 0;
        P_LINECNT= PAGE_SIZE + 1;
        U_LINECNT= PAGE_SIZE + 1;
        JIT$= PINCRW(ADDR(ML_BUF),SIZEW(B$U));
 
/**/
/*  Initialize VECTORs that frame items in the headings */
/**/
        SNAP_TITLE_= VECTOR(SNAP_TITLE);
        SNAP_CNT_= VECTOR(SNAP_CNT);
        SUFFIX_= VECTOR(SUFFIX);
        ML_FID_= VECTOR(ML_FID);
        HHMMSS_= VECTOR(TIME.HHMMSS);
        MMDDYY_= VECTOR(DATE.MMDDYY);
        FREE_PAGES_= VECTOR(FREE_PAGES);
        USER_LINE_= VECTOR(USER_LINE);
        USER_HDR1_= VECTOR(USER_HDR1);
        USER_HDR2_= VECTOR(USER_HDR2);
%EJECT;
/**/
/*  Initialize VECTORs that frame items in the detail line */
/**/
        SYSID_= VECTOR(B$JIT.SYSID);
        ACCN_= VECTOR(B$JIT.ACCN);
        JPEAK_= VECTOR(B$JIT.JPEAK);
        SPEAK_= VECTOR(B$JIT.SPEAK);
        MAXCORE_= VECTOR(B$JIT.MAXCORE);
        CURRCORE_= VECTOR(B$JIT.CURRCORE);
        PPC_= VECTOR(B$JIT.PPC);
        PCP_= VECTOR(B$JIT.PCP);
        PCD_= VECTOR(B$JIT.PCD);
        PCDS_= VECTOR(B$JIT.PCDS);
        PCC_= VECTOR(B$JIT.PCC);
        PCROS_= VECTOR(B$JIT.PCROS);
        PCDD_= VECTOR(B$JIT.PCDD);
        PCDDS_= VECTOR(B$JIT.PCDDS);
        PCADS_= VECTOR(B$JIT.PCADS);
        FBUC_= VECTOR(B$JIT.FBUC);
        FBUL_= VECTOR(B$JIT.FBUL);
        UNAME_= VECTOR(B$JIT.UNAME);
        IF M$LO$->F$DCB.WIDTH# > 110 THEN
           CCBUF_= VECTOR(SUBSTR(B$JIT.CCBUF,0,M$LO$->F$DCB.WIDTH#-88));
        ELSE
           CCBUF_= VECTOR(SUBSTR(B$JIT.CCBUF,0,22));
 
/**/
/* Initialize VECTORs that frame items in the TOTAL lines */
/**/
        TOTAL_LINE1_= VECTOR(TOTAL_LINE1);
        TOTAL_MEM_= VECTOR(TOTAL_MEM);
        TOTAL_MING_MEM_= VECTOR(TOTAL_MING_MEM);
        NUM_USERS_= VECTOR(NUM_USERS);
        TOTAL_LINE2_= VECTOR(TOTAL_LINE2);
        PAGES_PER_USER_= VECTOR(PAGES_PER_USER);
        PAGES_PER_NON_MING_USER_= VECTOR(PAGES_PER_NON_MING_USER);
 
RE_TURN:
        RETURN;
 
OOPS:
        ALTRETURN;
 
END INITIALIZE;
%EJECT;
PUT_HEADINGS: PROC( LINECNT );
DCL LINECNT                  SBIN;
 
        CALL X$WRITE( F_FDS,SNAP_TITLE_,SNAP_CNT_,SUFFIX_,ML_FID_,HHMMSS_,
          MMDDYY_,FREE_PAGES_ );
        CALL X$WRITE( F_FDS,USER_HDR1_ );
        CALL X$WRITE( F_FDS,USER_HDR2_ );
        LINECNT= 5;
RE_TURN:
        RETURN;
 
END PUT_HEADINGS;
%EJECT;
PUT_TOTALS: PROC;
 
        IF NUM_USERS = 0 THEN
           GOTO ZERO_EVERYTHING;
        U_LINECNT= U_LINECNT + 3;
        IF U_LINECNT > PAGE_SIZE THEN
           CALL PUT_HEADINGS( U_LINECNT );
        PAGES_PER_USER= (NUM_USERS/2+TOTAL_MEM)/NUM_USERS;
        NUM_USERS= NUM_USERS - 13;      /* Subtract # MING users              */
        PAGES_PER_NON_MING_USER= (NUM_USERS/2+TOTAL_MEM-TOTAL_MING_MEM)/NUM_USERS;
        CALL X$WRITE( F_FDS,TOTAL_LINE1_,NUM_USERS_,TOTAL_MEM_,PAGES_PER_USER_ );
        CALL X$WRITE( F_FDS,TOTAL_LINE2_,TOTAL_MING_MEM_,PAGES_PER_NON_MING_USER_ );
ZERO_EVERYTHING:
        NUM_USERS= 0;
        TOTAL_MEM= 0;
        TOTAL_MING_MEM= 0;
RE_TURN:
        RETURN;
 
END PUT_TOTALS;
 
END FLEA;
