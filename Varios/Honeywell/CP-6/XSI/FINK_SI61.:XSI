/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*M* FINK display contents of the Fit in a formatted way  */
/*X* IND=3,DCI=3,SQB,DTI=3,ENI=3,ECI=3,PLM=8,CSI=3,CSU=3    */
/*X* IPC,DIN=3,SDI=3                                        */
FINK:   PROC MAIN;
 
%INCLUDE CP_6;
%INCLUDE CP_6_SUBS;
%INCLUDE FINK_C61;
%INCLUDE FM$FIT;
%INCLUDE FM_FIELD_C;
%INCLUDE FM$GRAN;
%INCLUDE B$OBJECT_C;
%INCLUDE B$JIT;
%INCLUDE XU_MACRO_C;
%INCLUDE XU_SUBS_C;
%INCLUDE XU_PERR_C;
%INCLUDE XU_FORMAT_C;
%INCLUDE XUR_ENTRY;
%B$TCB;
%B$ALT;
%F$DCB;
 
 
/*********************************/
/*    MACROs                     */
/*********************************/
 
%VREBL_DATATYPES;
%FM$GRAN (BASED="BASED (HEADER$)");
%FM$KEYTBL (BASED="BASED (KEYTBL$)");
%FM$KEYENT (BASED="BASED (KEY$)");
%FM$IRENT (BASED="BASED (KEY$)");
%FM$MISEG (BASED="BASED (MISEG$)");
%FM$FIT (BASED="BASED (FIT$)");
%CODE01 (BASED="BASED (CODE$)");
%CODE02 (BASED="BASED (CODE$)");
%CODE03 (BASED="BASED (CODE$)");
%CODE04 (BASED="BASED (CODE$)");
%CODE05 (BASED="BASED (CODE$)");
%CODE06 (BASED="BASED (CODE$)");
%CODE07 (BASED="BASED (CODE$)");
%FITALTKEYS (BASED="BASED (CODE$)",FITALTKEYS=CODE08);
%CODE09 (BASED="BASED (CODE$)");
%CODE10 (BASED="BASED (CODE$)");
%CODE14 (BASED="BASED (CODE$)");
%CODE15 (BASED="BASED (CODE$)");
%CODE16 (BASED="BASED (CODE$)");
%VLP_FPRG (STCLASS="BASED (CODE$)");
%CODE18 (BASED="BASED (CODE$)");
%CODE19 (BASED="BASED (CODE$)");
%CODE20 (BASED="BASED (CODE$)");
%CODE21 (BASED="BASED (CODE$)");
%FMG$IRKEYS(STCLASS="BASED(CODE$)");
%P_PCB (R=FITCMD);
%XUR_INIT (NAME=XUR_INIT,SYNTAX=YES,PCB=P_PCB,BRKMSG=BREAK_RTN);
%PARSE$OUT (STCLASS=BASED);
%PARSE$SYM (STCLASS=BASED);
%F_FDS (NAME=F_FDS,STCLASS=STATIC,DCB=M$LO,BUF=OUT_BUF);
 
/************************************/
/*           EQUs                   */
/************************************/
 
%EQU TEXT_S = 20;
%EQU TRUE = '1'B;
%EQU FALSE = '0'B;
 
/********************************************************************/
/*                      FPTs                                        */
/********************************************************************/
 
%FPT_CLOSE (FPTN=CLOSE_SI,DISP=SAVE,DCB=M$IN);
%FPT_OPEN (FPTN=OPEN_SI,DCB=M$IN,ACS=BLOCK,FUN=IN,ASN=FILE,
 FPARAM=FIT_BUF,NAME=NAME_SI,PASS=PASS_SI,SN=SN_SI,ACCT=ACCT_SI);
%FPT_UNFID (FPTN=UNFID_SI,DCB=M$IN,TEXTFID=FID_BUF);
%FPT_FID (FPTN=FID_SI,ACCT=ACCT_SI,
 NAME=NAME_SI,PASS=PASS_SI,SN=SN_SI,WSN=WSN_SI,ASN=F.ASN_,RES=F.RES_,
 TEXTFID=FID_BUF);
%VLP_ACCT (FPTN=ACCT_SI);
%VLP_NAME (FPTN=NAME_SI);
%VLP_PASS (FPTN=PASS_SI);
%VLP_SN (FPTN=SN_SI);
%VLP_WSN (FPTN=WSN_SI);
   DCL 1 F ALIGNED STATIC,
          2 ASN_ UBIN(9) ALIGNED,
          2 RES_ CHAR(4) ALIGNED;
%FPT_READ (FPTN=READ_GRAN,DCB=M$IN,BUF=GRAN_BUF,FULL=YES,KEY=K,KEYS=YES);
%FPT_WRITE (FPTN=WRITE_LO,DCB=M$LO,BUF=WRITE_LO_BUF);
%FPT_PRIV (FPTN=SFMS_PRIV,PRIV=%PR_FMSEC#,AUTH=YES);
%FPT_INT (FPTN=BREAK,UENTRY=BREAK_RTN);
%FPT_MONINFO (SITEINFO=VLR_SITEINFO);
%VLR_SITEINFO;
 
/***************************************/
/*            ENTRIES                  */
/***************************************/
 
   DCL XSF$LOCCODE ENTRY (2) ALTRET;
   DCL X$WRITE ENTRY (22);
   DCL BREAK_RTN ENTRY;
 
 
/********************************************************************/
/*                   STATIC DATA                                    */
/********************************************************************/
 
   DCL NEXT_CMD REMEMBER STATIC SYMDEF;
   DCL FIT_BUF CHAR (4096) STATIC INIT (' ');
   DCL GRAN_BUF CHAR (4096) STATIC INIT (' ');
   DCL GRAN_BUF_A (0:1023) REDEF GRAN_BUF SBIN;
   DCL GRAN_BUF_C (0:255) REDEF GRAN_BUF CHAR(16);
   DCL CHARS_OUT CHAR(16) STATIC INIT (' ');
   DCL CHARS_OUT_A (0:15) REDEF CHARS_OUT CHAR(1);
   DCL STAR CHAR(1) STATIC INIT (' ');
   DCL PRIO_BUF CHAR (16) STATIC INIT(' ');
   DCL FID_BUF CHAR(80) STATIC INIT(' ');
   DCL WRITE_LO_BUF CHAR(80) STATIC INIT (' ');
   DCL OUT_BUF CHAR(80) STATIC INIT (' ');
   DCL FORMAT CHAR(5) STATIC INIT ('%ZO');
   DCL DOT CHAR(1) STATIC INIT ('.');
   DCL PROMPT CHAR(0) CONSTANT INIT ('FINK>> ');
   DCL B$JIT$ PTR SYMREF;
   DCL B$ROS$ PTR SYMREF;
   DCL B$TCB$ PTR SYMREF;
   DCL FITCMD UBIN SYMREF;
   DCL K SBIN STATIC INIT (0);
   DCL PTR$ PTR STATIC;
   DCL ERR REDEF PTR$ UBIN;
   DCL FILE_CLOSE BIT (1) STATIC INIT(%TRUE);
   DCL FILE_STOWED BIT (1) STATIC INIT(%FALSE);
   DCL OPEN_UBLOCK BIT(1) STATIC INIT (%FALSE);
 
/********************************************************************/
/*                      DCBs                                        */
/********************************************************************/
 
   DCL M$IN DCB;
   DCL M$LO DCB;
 
/********************************************************************/
/*                     AUTO DATA                                    */
/********************************************************************/
 
   DCL FIT$ PTR;
   DCL HEADER$ PTR;
   DCL KEYTBL$ PTR;
   DCL KEY$ PTR;
   DCL MISEG$ PTR;
   DCL CODE$ PTR;
   DCL CODE UBIN;
   DCL CODEN CHAR(2);
   DCL INX_OUT CHAR(20);
   DCL M$IN$ PTR;
   DCL TEMP$ PTR;
   DCL TEXT$ PTR;
   DCL TEXT_B CHAR(20) BASED;
   DCL TXT$ PTR;
   DCL CHAR$ PTR;
   DCL CHR CHAR(1) BASED (CHAR$);
   DCL NODES UBIN;
   DCL LAST UBIN;
   DCL CODES_A (0:20) UBIN;
   DCL CODES UBIN;
   DCL TEMP1 UBIN;
   DCL TEMP2 UBIN;
   DCL TEMP3 UBIN;
   DCL TEMP4 UBIN;
   DCL N UBIN;
   DCL I UBIN;
   DCL J UBIN;
   DCL L UBIN;
   DCL B BIT(1);
   DCL B8 BIT (8);
   DCL B9 BIT(9);
   DCL B18 BIT(18);
   DCL KEY_START UBIN;
   DCL KEY_END UBIN;
 
 
%EJECT;
 
BEGIN:
 
        M$IN$ = DCBADDR(DCBNUM(M$IN));
        CALL M$MONINFO (FPT_MONINFO) ALTRET (MON_ERR);
        CALL CONCAT (WRITE_LO_BUF,'FINK ',SUBSTR(VLR_SITEINFO.VERSION#,0,3),' here');
        CALL M$WRITE (WRITE_LO);
 
/* Here Check if user has FMSec privilege */
 
        CALL M$INT (BREAK) ALTRET (MON_ERR);
        IF NOT (B$JIT$->B$JIT.PRIV.ACTIVE & %PR_FMSEC#) THEN DO;
           CALL M$SPRIV (SFMS_PRIV) WHENALTRETURN DO;
              WRITE_LO_BUF ='** FMSec Privilege request could not be granted';
              CALL M$WRITE (WRITE_LO);
              WRITE_LO_BUF = '   Only portions of the Fit & File will be displayed';
              CALL M$WRITE (WRITE_LO);
              OPEN_SI.V.ACS# = %UBLOCK#;
              OPEN_UBLOCK = %TRUE;
              END;
           END;
        CALL M$UNFID (UNFID_SI) ALTRET (MON_ERR);
        CALL M$FID (FID_SI) ALTRET (MON_ERR);
        IF F.ASN_ = 1 OR F.ASN_ = 2 THEN OPEN_SI.V.ASN# = F.ASN_;
        CALL M$OPEN (OPEN_SI) WHENRETURN DO;
           FILE_CLOSE = %FALSE;
           IF M$IN$->F$DCB.ACS# = %SEQUEN# THEN DO;
              WRITE_LO_BUF = 'Warning:  file is compressed or shared.  Only the FIT will be displayed.';
              CALL M$WRITE(WRITE_LO);
              END;
           END;
        WHENALTRETURN DO;
           IF NAME_SI.L# > 0 THEN GOTO MON_ERR;
           END;
 
/* Initialize */
 
        KEYTBL$ = ADDR(NIL);
        IF OPEN_UBLOCK THEN DO;
           HEADER$ = ADDR(NIL);
           GRAN_BUF = ' ';
           FIT$ = ADDR(FIT_BUF);
           END;
        ELSE DO;
           HEADER$ = ADDR(FIT_BUF);
           GRAN_BUF = FIT_BUF;
           IF FM$GRAN.HDR THEN DO;
              FIT$ = PINCRW(HEADER$,5);
              IF M$IN$->F$DCB.ORG# = %KEYED# OR
                M$IN$->F$DCB.ORG# = %IREL# OR
                M$IN$->F$DCB.ORG# = %INDEXED# THEN
                 KEYTBL$ = PINCRW(HEADER$,FM$GRAN.FCEX);
              END;
           ELSE
              FIT$ = PINCRW (HEADER$,2);
           END;
 
        CALL XUR$INIT (XUR_INIT);
        TEXT$ = PINCRC (ADDR(B$JIT$->B$JIT.CCBUF), B$JIT$->B$JIT.CCDISP);
        WRITE_LO_BUF = TEXT$->TEXT_B;
        I = MAXIMUM(1,B$JIT$->B$JIT.CCARS-B$JIT.CCDISP);
        CALL XUR$GETCMD (FITCMD,PTR$,,WRITE_LO_BUF,I) WHENALTRETURN DO;
           CALL XUR$ERRPTR (,DCBNUM(M$LO));
           CALL XUR$ERRMSG (ERR);
           GOTO GETCMD;
           END;
        GOTO CONT;
 
GETCMD:
 
        DO WHILE %TRUE;
           WRITE_LO_BUF = ' '; CALL M$WRITE(WRITE_LO);
           REMEMBER NXCMD IN NEXT_CMD;
NXCMD:     CALL XUR$GETCMD (FITCMD,PTR$,VECTOR(PROMPT)) WHENALTRETURN DO;
              CALL XUR$ERRPTR (,DCBNUM(M$LO));
              CALL XUR$ERRMSG (ERR);
              GOTO GETCMD;
              END;
 
CONT:
 
           DO NODES = 0 TO PTR$->OUT$BLK.NSUBLKS - 1;
              TEMP$ = PTR$->OUT$BLK.SUBLK$(NODES);
              DO CASE (TEMP$->OUT$BLK.CODE);
               CASE (%C_FILE#);
                 IF ~FILE_CLOSE THEN DO;
                    CALL M$CLOSE (CLOSE_SI) ALTRET (MON_ERR);
                    FILE_CLOSE = %TRUE;
                    END;
                 FIT_BUF = ' ';
                 GRAN_BUF = ' ';
                 FID_BUF = TEMP$->OUT$BLK.SUBLK$(0)->OUT$SYM.TEXT;
                 CALL INDEX (I, '.', FID_BUF) ALTRET (NO_PASS);
                 CALL INDEX (J, '.', FID_BUF, I+1) ALTRET (NO_PASS);
                 PASS_SI.PASS# = SUBSTR (FID_BUF, J+1, 8);
NO_PASS:         OPEN_SI.V.OPER = '00000'B;
                 OPEN_SI.V.SRCHCOND = '000000000000000000'B;
                 CALL M$FID (FID_SI) ALTRET (MON_ERR);
                 IF F.ASN_ = 1 OR F.ASN_ = 2 THEN
                    OPEN_SI.V.ASN# = F.ASN_;
                 CALL M$OPEN (OPEN_SI) WHENALTRETURN DO;
                    IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.ERR# = 130 AND FIT_BUF ~= ' ' THEN
                       FILE_STOWED = %TRUE;
                    ELSE
                       FILE_STOWED = %FALSE;
                    CALL XUR$ERRMSG(B$TCB$->B$TCB.ALT$->B$ALT.ERR,DCBNUM(M$IN));
                    IF FILE_STOWED THEN DO;
                       FIT$ = ADDR (FIT_BUF);
                       WRITE_LO_BUF = ' File is STOWed INACTIVE. Only CODE06 can be displayed.';
                       CALL M$WRITE (WRITE_LO);
                       END;
                    UNWIND TO NEXT_CMD;
                    END;
                 IF M$IN$->F$DCB.ACS# = %SEQUEN# THEN DO;
                    WRITE_LO_BUF = 'Warning:  File is compressed or shared.  Only the FIT will be displayed.';
                    CALL M$WRITE(WRITE_LO);
                    END;
                 KEYTBL$ = ADDR(NIL);
                 IF OPEN_UBLOCK THEN DO;
                    HEADER$ = ADDR(NIL);
                    GRAN_BUF = ' ';
                    FIT$ = ADDR(FIT_BUF);
                    END;
                 ELSE DO;
                    HEADER$ = ADDR (FIT_BUF);
                    GRAN_BUF = FIT_BUF;
                    IF FM$GRAN.HDR THEN DO;
                       FIT$ = PINCRW (HEADER$,5);
                       IF M$IN$->F$DCB.ORG# = %KEYED# OR
                         M$IN$->F$DCB.ORG# = %IREL# OR
                         M$IN$->F$DCB.ORG# = %INDEXED# THEN
                          KEYTBL$ = PINCRW(HEADER$,FM$GRAN.FCEX);
                       END;
                    ELSE
                       FIT$ = PINCRW (HEADER$,2);
                    END;
                 FILE_CLOSE = %FALSE;
                 FILE_STOWED = %FALSE;
                 CALL M$UNFID (UNFID_SI) WHENALTRETURN DO;
                    CALL XUR$ERRMSG(B$TCB$->B$TCB.ALT$->B$ALT.ERR);
                    END;
                 WRITE_LO_BUF = FID_BUF;
                 CALL M$WRITE (WRITE_LO);
 
               CASE (%C_THISF#,%C_NXTF#,%C_NXTA#);
                 IF ~FILE_CLOSE THEN DO;
                    CALL M$CLOSE (CLOSE_SI) ALTRET (MON_ERR);
                    FILE_CLOSE = %TRUE;
                    END;
                 FIT_BUF = ' ';
                 GRAN_BUF = ' ';        /* Flush buffers                      */
                 OPEN_SI.V.OPER = '00000'B;
                 DO CASE (TEMP$->OUT$BLK.CODE);
                  CASE(%C_THISF#);
                    OPEN_SI.V.OPER.THISF# = '1'B;
                  CASE(%C_NXTF#);
                    OPEN_SI.V.OPER.NXTF# = '1'B;
                    OPEN_SI.V.SRCHCOND = '000000000000000000'B;
                    IF TEMP$->OUT$BLK.NSUBLKS > 0 THEN DO;
                       DO I = 0 TO TEMP$->OUT$BLK.NSUBLKS-1;
                          DO CASE (TEMP$->OUT$BLK.SUBLK$(I)->OUT$BLK.CODE);
                           CASE(%NXTF_DELF#);
                             OPEN_SI.V.SRCHCOND.DELF# = '1'B;
                           CASE(%NXTF_NOLIST#);
                             OPEN_SI.V.SRCHCOND.NOLIST# = '1'B;
                           CASE(%NXTF_BUF#);
                             OPEN_SI.V.SRCHCOND.BUF# = '1'B;
                           CASE(%NXTF_BAD#);
                             OPEN_SI.V.SRCHCOND.BAD# = '1'B;
                           CASE(%NXTF_QS#);
                             OPEN_SI.V.SRCHCOND.QS# = '1'B;
                           CASE(%NXTF_ARCHIVE#);
                             OPEN_SI.V.SRCHCOND.ARCHIVE# = '1'B;
                           CASE(%NXTF_ANYF#);
                             OPEN_SI.V.SRCHCOND.ANYF# = '1'B;
                           CASE(%NXTF_REV#);
                             OPEN_SI.V.SRCHCOND.REV# = '1'B;
                           END;
                          END;
                       END;
                  CASE (%C_NXTA#);
                    OPEN_SI.V.INITZ.SCRUB# = %TRUE;
                    OPEN_SI.V.OPER.NXTF# = %TRUE;
                    OPEN_SI.V.OPER.NXTA# = %TRUE;
                    IF TEMP$->OUT$BLK.NSUBLKS > 0 THEN DO;
                       SN_SI.SN#(0) = TEMP$->OUT$BLK.SUBLK$(0)->OUT$SYM.TEXT;
                       END;
                  END;
                 CALL M$OPEN (OPEN_SI) WHENALTRETURN DO;
                    IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.ERR# = 130 THEN DO;
                       CALL M$UNFID (UNFID_SI) ALTRET (MON_ERR);
                       CALL M$FID (FID_SI) ALTRET (MON_ERR);
                       IF FIT_BUF ~= ' ' THEN
                          FILE_STOWED = %TRUE;
                       ELSE
                          FILE_STOWED = %FALSE;
                       END;
                    IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.ERR# = 180 THEN DO;
                       NAME_SI.NAME# = ' ';
                       NAME_SI.L# = 0;
                       PASS_SI.PASS# = ' ';
                       END;
                    CALL XUR$ERRMSG (B$TCB$->B$TCB.ALT$->B$ALT.ERR,DCBNUM(M$IN));
                    IF FILE_STOWED THEN DO;
                       FIT$ = ADDR (FIT_BUF);
                       WRITE_LO_BUF = ' File is STOWed INACTIVE. Only CODE06 can be displayed.';
                       CALL M$WRITE (WRITE_LO);
                       END;
                    UNWIND TO NEXT_CMD;
                    END;
                 IF M$IN$->F$DCB.ACS# = %SEQUEN# THEN DO;
                    WRITE_LO_BUF = 'Warning:  File is compressed or shared.  Only the FIT will be displayed.';
                    CALL M$WRITE(WRITE_LO);
                    END;
                 IF OPEN_UBLOCK THEN DO;
                    HEADER$ = ADDR(NIL);
                    GRAN_BUF = ' ';
                    FIT$ = ADDR(FIT_BUF);
                    END;
                 ELSE DO;
                    HEADER$ = ADDR (FIT_BUF);
                    GRAN_BUF = FIT_BUF;
                    IF FM$GRAN.HDR THEN
                       FIT$ = PINCRW (HEADER$,5);
                    ELSE
                       FIT$ = PINCRW (HEADER$,2);
                    END;
                 FILE_CLOSE = %FALSE;
                 FILE_STOWED = %FALSE;
                 CALL M$UNFID (UNFID_SI) WHENALTRETURN DO;
                    CALL XUR$ERRMSG (B$TCB$->B$TCB.ALT$->B$ALT.ERR);
                    END;
                 CALL M$FID (FID_SI) ALTRET (MON_ERR);
                 WRITE_LO_BUF = FID_BUF;
                 CALL M$WRITE (WRITE_LO);
               CASE (%C_SHARE#);
                 IF (TEMP$->OUT$BLK.NSUBLKS = 0) THEN DO;
                    DO CASE(OPEN_SI.V.SHARE#);
                     CASE(%ALL#);
                       WRITE_LO_BUF = 'Share All';
                     CASE(%IN#);
                       WRITE_LO_BUF = 'Share In';
                     CASE(%NONE#);
                       WRITE_LO_BUF = 'Share None';
                     CASE(ELSE);
                       WRITE_LO_BUF = 'Share default';
                     END;
                    CALL M$WRITE(WRITE_LO);
                    END;
                 ELSE DO;
                    DO CASE (TEMP$->OUT$BLK.SUBLK$(0)->OUT$BLK.CODE);
                     CASE(%SH_ALL#);
                       OPEN_SI.V.SHARE# = %ALL#;
                     CASE(%SH_IN#);
                       OPEN_SI.V.SHARE# = %IN#;
                     CASE(%SH_NONE#);
                       OPEN_SI.V.SHARE# = %NONE#;
                     END;
                    END;
               CASE (%C_REPORT#);
                 IF TEMP$->OUT$BLK.NSUBLKS = 0 THEN DO;
                    DO SELECT (FORMAT);
                     SELECT ('%ZO  ');
                       WRITE_LO_BUF = 'Octal'; CALL M$WRITE(WRITE_LO);
                     SELECT ('%ZD  ');
                       WRITE_LO_BUF = 'Decimal'; CALL M$WRITE(WRITE_LO);
                     SELECT ('%ZH  ');
                       WRITE_LO_BUF = 'Hexadecimal';CALL M$WRITE(WRITE_LO);
                     SELECT ('%ZB''B');
                       WRITE_LO_BUF='Binary';CALL M$WRITE(WRITE_LO);
                     END;
                    END;
                 ELSE DO;
                    DO CASE (TEMP$->OUT$BLK.SUBLK$(0)->OUT$BLK.CODE);
                     CASE (%REP_OCTAL#);
                       FORMAT='%ZO';
                       DOT = '.';
                     CASE (%REP_DECIMAL#);
                       FORMAT='%ZD';
                       DOT=' ';
                     CASE (%REP_HEXA#);
                       FORMAT='%ZH';
                       DOT=' ';
                     CASE (%REP_BIN#);
                       FORMAT='%ZB''B';
                       DOT='''';
                     END;
                    END;
               CASE (%C_FLINK#,%C_BLINK#,%C_DA#);
                 IF FILE_CLOSE THEN GOTO FILECLOSED;
                 IF M$IN$->F$DCB.ACS# = %SEQUEN# THEN DO;
                    WRITE_LO_BUF = 'Can''t FLINK, BLINK, or DA on a compressed or shared file.';
                    CALL M$WRITE(WRITE_LO);
                    GOTO NEXT;
                    END;
                 DO CASE(TEMP$->OUT$BLK.CODE);
                  CASE(%C_FLINK#);
                    IF OPEN_UBLOCK AND HEADER$ = ADDR(NIL) THEN DO;
                       WRITE_LO_BUF = 'Can''t FLINK from FIT without FMSec.';
                       CALL M$WRITE(WRITE_LO);
                       GOTO NEXT;
                       END;
                    IF FM$GRAN.FLINK=0 THEN GOTO READ_ERR;
                    K = FM$GRAN.FLINK-BITBIN('1000000'O);
                  CASE(%C_BLINK#);
                    IF OPEN_UBLOCK AND HEADER$ = ADDR(NIL) THEN DO;
                       WRITE_LO_BUF = 'Can''t BLINK from FIT without FMSec.';
                       CALL M$WRITE(WRITE_LO);
                       GOTO NEXT;
                       END;
                    IF FM$GRAN.BLINK=0 THEN GOTO READ_ERR;
                    K = FM$GRAN.BLINK-BITBIN('1000000'O);
                  CASE (%C_DA#);
                    DO CASE (TEMP$->OUT$BLK.SUBLK$(0)->OUT$BLK.CODE);
                     CASE(%DA_DECIMAL_NUM#);
                       CALL CHARBIN(K,TEMP$->OUT$BLK.SUBLK$(0)->OUT$SYM.TEXT);
                       IF K >= BITBIN('1000000'O) THEN
                          K = K - BITBIN('1000000'O);
                     CASE (%DA_OCTAL_NUM#);
                       TXT$=TEMP$->OUT$BLK.SUBLK$(0)->OUT$BLK.SUBLK$(0);
                       K=0;
                       J=1;
                       DO I = TXT$->OUT$SYM.COUNT DOWNTO 1;
                          CHAR$=PINCRC(TXT$->OUT$SYM.TEXTC$,I);
                          K=K+((ASCBIN(CHR)-BITBIN('060'O))*(J));
                          J=8*J;
                          END;
                       IF K >= BITBIN('1000000'O) THEN
                          K = K - BITBIN('1000000'O);
                     END;
                  END;
                 CALL M$READ (READ_GRAN) WHENALTRETURN DO;
READ_ERR:           WRITE_LO_BUF=' '; CALL M$WRITE(WRITE_LO);
                    WRITE_LO_BUF ='Specified Granule does not exist';
                    CALL M$WRITE (WRITE_LO);
                    GOTO NEXT;
                    END;
                 HEADER$ = ADDR(GRAN_BUF); /* If FIT, clear code 1, part of 4 */
                 IF OPEN_UBLOCK AND K = 0 AND FM$GRAN.FCEX > 5 THEN DO;
                    IF FM$GRAN.HDR THEN
                       TEMP$ = PINCRW(HEADER$,5);
                    ELSE
                       TEMP$ = PINCRW(HEADER$,2);
                    CODE$ = TEMP$;
                    CODE = 1;
                    CALL XSF$LOCCODE(CODE$,CODE) ALTRET(NOCODE01);
                    CODE01 = '000000000000'O;
NOCODE01:           CODE$ = TEMP$;
                    CODE = 4;
                    CALL XSF$LOCCODE(CODE$,CODE) ALTRET(NOCODE04);
                    CODE04.CREATOR.ACCT = ' ';
                    CODE04.CREATOR.NAME = ' ';
                    CODE04.SVMODIFY.TIME = 0;
                    CODE04.GAC.N = 0;
                    CODE04.GAC.TIME = 0;
NOCODE04:           END;
                 IF FM$GRAN.HDR AND
                   (M$IN$->F$DCB.ORG# = %KEYED# OR
                   M$IN$->F$DCB.ORG# = %IREL# OR
                   M$IN$->F$DCB.ORG# = %INDEXED#) THEN
                    KEYTBL$ = PINCRW(HEADER$,FM$GRAN.FCEX);
                 ELSE
                    KEYTBL$ = ADDR(NIL);
 
               CASE (%C_DUMP#);
                 IF FILE_CLOSE AND ~FILE_STOWED THEN GOTO FILECLOSED;
                 IF FILE_STOWED AND HEADER$ = ADDR(NIL) THEN
                    GRAN_BUF = FIT_BUF;
                 WRITE_LO_BUF =' '; CALL M$WRITE (WRITE_LO);
                 IF TEMP$->OUT$BLK.NSUBLKS > 0 THEN
                    CALL CHARBIN (J,TEMP$->OUT$BLK.SUBLK$(0)->OUT$SYM.TEXT);
                 ELSE
                    J = 1023;
                 DO I = 0 TO J BY 4;
                    IF PRIO_BUF = GRAN_BUF_C(I/4) THEN
                       STAR = '*';
                    ELSE DO;
                       CHARS_OUT = GRAN_BUF_C(I/4);
                       DO L = 0 TO 15;
                          TEMP1 = ASCBIN(CHARS_OUT_A(L));
                          IF TEMP1 < 32 OR TEMP1 > 126 THEN
                             CHARS_OUT_A(L) = '.';
                          END;
                       CALL CONCAT(WRITE_LO_BUF,'%5ZO',STAR,'  %12ZO %12ZO %12ZO %12ZO %A');
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I),
                         VECTOR(GRAN_BUF_A(I)),VECTOR(GRAN_BUF_A(I+1)),
                         VECTOR(GRAN_BUF_A(I+2)),VECTOR(GRAN_BUF_A(I+3)),
                         VECTOR(CHARS_OUT));
                       STAR = ' ';
                       PRIO_BUF = GRAN_BUF_C(I/4);
                       END;
                    END;
                 PRIO_BUF = ' ';
                 STAR = ' ';
               CASE (%C_IRKEYS#);
                 IF M$IN$->F$DCB.ORG# ~= %IREL# THEN DO;
                    WRITE_LO_BUF = 'Not an IREL file!!';
                    CALL M$WRITE(WRITE_LO);
                    GOTO NEXT;
                    END;
                 CODE$ = PINCRW(B$ROS$,M$IN$->F$DCB.ALTKEYX);
                 WRITE_LO_BUF= 'DCL 1 IRKEYS BASED ALIGNED,';
                 CALL M$WRITE(WRITE_LO);
                 CALL CONCAT(WRITE_LO_BUF, '    2 NWORDS UBIN(9) CALIGNED,       ',DOT,FORMAT);
                 CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(IRKEYS.NWORDS));
                 CALL CONCAT(WRITE_LO_BUF, '    2 NKEYS UBIN(27) CALIGNED,       ',DOT,FORMAT);
                 CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(IRKEYS.NKEYS));
                 CALL CONCAT(WRITE_LO_BUF, '    2 MINSIZE UBIN,                  ',DOT,FORMAT);
                 CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(IRKEYS.MINSIZE));
                 CALL CONCAT(WRITE_LO_BUF, '    2 ALTBLD BIT(1) UNAL,            ',DOT,FORMAT);
                 B = IRKEYS.ALTBLD; I = BITBIN(B);
                 CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                 CALL CONCAT(WRITE_LO_BUF, '    2 UNIQUEBLD BIT(1) UNAL,         ',DOT,FORMAT);
                 B = IRKEYS.UNIQUEBLD; I = BITBIN(B);
                 CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                 WRITE_LO_BUF= '    2 * BIT(34) UNAL,';
                 CALL M$WRITE(WRITE_LO);
                 WRITE_LO_BUF= '    2 K(0:0),';
                 CALL M$WRITE(WRITE_LO);
                 DO J = 0 TO IRKEYS.NKEYS-1;
                    CALL CONCAT(WRITE_LO_BUF, '      3 TDALVL UBIN(9) CALIGNED,      (%2ZD)  ',DOT,FORMAT);
                    CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(J),VECTOR(IRKEYS.K.TDALVL(J)));
                    CALL CONCAT(WRITE_LO_BUF, '      3 TDA UBIN(27) CALIGNED,        (%2ZD)  ',DOT,FORMAT);
                    CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(J),VECTOR(IRKEYS.K.TDA(J)));
                    CALL CONCAT(WRITE_LO_BUF, '      3 FIRSTFIELD UBIN(18) CALIGNED, (%2ZD)  ',DOT,FORMAT);
                    CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(J),VECTOR(IRKEYS.K.FIRSTFIELD(J)));
                    CALL CONCAT(WRITE_LO_BUF, '      3 NFIELDS UBIN(18) CALIGNED,    (%2ZD)  ',DOT,FORMAT);
                    CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(J),VECTOR(IRKEYS.K.NFIELDS(J)));
                    CALL CONCAT(WRITE_LO_BUF, '      3 KEYL UBIN(18) CALIGNED,       (%2ZD)  ',DOT,FORMAT);
                    CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(J),VECTOR(IRKEYS.K.KEYL(J)));
                    CALL CONCAT(WRITE_LO_BUF, '      3 SEGX UBIN(18) CALIGNED,       (%2ZD)  ',DOT,FORMAT);
                    CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(J),VECTOR(IRKEYS.K.SEGX(J)));
                    CALL CONCAT(WRITE_LO_BUF, '      3 CRECX UBIN(18) CALIGNED,      (%2ZD)  ',DOT,FORMAT);
                    CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(J),VECTOR(IRKEYS.K.CRECX(J)));
                    CALL CONCAT(WRITE_LO_BUF, '      3 UNIQUE BIT(1) UNAL,           (%2ZD)  ',DOT,FORMAT);
                    B = IRKEYS.K.UNIQUE(J); I = BITBIN(B);
                    CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(J),VECTOR(I));
                    CALL CONCAT(WRITE_LO_BUF, '      3 RPOS BIT(1) UNAL,             (%2ZD)  ',DOT,FORMAT);
                    B = IRKEYS.K.RPOS(J); I = BITBIN(B);
                    CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(J),VECTOR(I));
                    CALL CONCAT(WRITE_LO_BUF, '      3 INDXCHNG BIT(1) UNAL,         (%2ZD)  ',DOT,FORMAT);
                    B = IRKEYS.K.INDXCHNG(J); I = BITBIN(B);
                    CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(J),VECTOR(I));
                    WRITE_LO_BUF = '      3 * BIT(15) UNAL,';
                    CALL M$WRITE(WRITE_LO);
                    WRITE_LO_BUF = '      3 * UBIN(9) CALIGNED,';
                    CALL M$WRITE(WRITE_LO);
                    CALL CONCAT(WRITE_LO_BUF, '      3 FDA UBIN(27) CALIGNED,        (%2ZD)  ',DOT,FORMAT);
                    CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(J),VECTOR(IRKEYS.K.FDA(J)));
                    WRITE_LO_BUF = '      3 * UBIN(9) CALIGNED,';
                    CALL M$WRITE(WRITE_LO);
                    CALL CONCAT(WRITE_LO_BUF, '      3 CDA UBIN(27) CALIGNED,        (%2ZD)  ',DOT,FORMAT);
                    CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(J),VECTOR(IRKEYS.K.CDA(J)));
                    WRITE_LO_BUF = '      3 * UBIN(9) CALIGNED,';
                    CALL M$WRITE(WRITE_LO);
                    CALL CONCAT(WRITE_LO_BUF, '      3 LDA UBIN(27) CALIGNED,        (%2ZD)  ',DOT,FORMAT);
                    CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(J),VECTOR(IRKEYS.K.LDA(J)));
                    WRITE_LO_BUF = ' '; CALL M$WRITE(WRITE_LO);
                    END;
               CASE (%C_KEY#);
                 IF FILE_CLOSE AND ~FILE_STOWED THEN GOTO FILECLOSED;
                 IF FILE_STOWED OR HEADER$ = ADDR(NIL) THEN DO;
                    WRITE_LO_BUF = '** No header found.';
                    CALL M$WRITE(WRITE_LO);
                    GOTO NEXT;
                    END;
                 IF KEYTBL$ = ADDR(NIL) OR FM$GRAN.KEYCNT = 0 THEN DO;
                    WRITE_LO_BUF = '** There are no keys in this granule.';
                    CALL M$WRITE(WRITE_LO);
                    GOTO NEXT;
                    END;
                 DO CASE (TEMP$->OUT$BLK.SUBLK$(0)->OUT$BLK.CODE);
                  CASE(%DA_DECIMAL_NUM#);
                    CALL CHARBIN(K,TEMP$->OUT$BLK.SUBLK$(0)->OUT$SYM.TEXT);
                  CASE (%DA_OCTAL_NUM#);
                    TXT$=TEMP$->OUT$BLK.SUBLK$(0)->OUT$BLK.SUBLK$(0);
                    K=0;
                    J=1;
                    DO I = TXT$->OUT$SYM.COUNT DOWNTO 1;
                       CHAR$=PINCRC(TXT$->OUT$SYM.TEXTC$,I);
                       K=K+((ASCBIN(CHR)-BITBIN('060'O))*(J));
                       J=8*J;
                       END;
                  END;
                 IF K > FM$GRAN.KEYCNT THEN DO;
                    WRITE_LO_BUF = '** There are only %D keys in the granule.  You specified key %D.';
                    CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),
                      VECTOR(FM$GRAN.KEYCNT),
                      VECTOR(K));
                    GOTO NEXT;
                    END;
                 IF K >= FM$KEYTBL(0) THEN
                    K = K + 512;
                 KEY_START = K;
                 KEY_END = K;
                 GOTO DOKEY;
               CASE (%C_KEYTBL#);
                 IF FILE_CLOSE AND ~FILE_STOWED THEN GOTO FILECLOSED;
                 IF FILE_STOWED OR HEADER$ = ADDR(NIL) THEN DO;
                    WRITE_LO_BUF = '** No header found.';
                    CALL M$WRITE(WRITE_LO);
                    GOTO NEXT;
                    END;
                 IF KEYTBL$ = ADDR(NIL) OR FM$GRAN.KEYCNT = 0 THEN DO;
                    WRITE_LO_BUF = '** There are no keys in this granule.';
                    CALL M$WRITE(WRITE_LO);
                    GOTO NEXT;
                    END;
                 KEY_START = 1;
                 KEY_END = FM$GRAN.KEYCNT;
DOKEY:           DO K = KEY_START TO KEY_END;
                    IF K < FM$KEYTBL(0) THEN
                       KEY$ = PINCRW(HEADER$,FM$KEYTBL(K));
                    ELSE
                       KEY$ = PINCRW(HEADER$,FM$KEYTBL(K)+512);
                    CALL CONCAT(WRITE_LO_BUF,'FM$KEYTBL(%D)    ',DOT,FORMAT);
                    CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),
                      VECTOR(K),VECTOR(FM$KEYTBL(K)));
                    IF M$IN$->F$DCB.ORG# = %IREL# THEN DO;
                       WRITE_LO_BUF = '   DCL 1 FM$IRENT,';
                       CALL M$WRITE(WRITE_LO);
                       END;
                    ELSE DO;
                       WRITE_LO_BUF = '   DCL 1 FM$KEYENT,';
                       CALL M$WRITE(WRITE_LO);
                       END;
                    B = FM$IRENT.D; I = BITBIN(B);
                    CALL CONCAT(WRITE_LO_BUF,'       2 D BIT(1),                ',DOT,FORMAT);
                    CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                    IF M$IN$->F$DCB.ORG# = %IREL# THEN DO;
                       I = FM$IRENT.KLB;
                       CALL CONCAT(WRITE_LO_BUF,'       2 KLB UBIN(17) UNAL,       ',DOT,FORMAT);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                       WRITE_LO_BUF = '       2 TXT CHAR(FM$IRENT.KLB);  .%>A';
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),
                         VECTOR(FM$IRENT.TXT));
                       END;
                    ELSE DO;
                       I = FM$KEYENT.KLB;
                       CALL CONCAT(WRITE_LO_BUF,'       2 KLB UBIN(17) UNAL,       ',DOT,FORMAT);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                       WRITE_LO_BUF = '       2 TXT CHAR(FM$KEYENT.KLB); .%>A';
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),
                         VECTOR(FM$KEYENT.TXT));
                       END;
                    WRITE_LO_BUF = ' ';
                    CALL M$WRITE(WRITE_LO);
                    END;
               CASE (%C_HEADER#,%C_ALL#);
                 IF FILE_CLOSE AND ~FILE_STOWED THEN GOTO FILECLOSED;
                 IF (FILE_STOWED OR HEADER$ = ADDR(NIL)) AND TEMP$->OUT$BLK.CODE = %C_ALL# THEN
                    GOTO ENDHDR;
                 ELSE
                    IF (FILE_STOWED OR HEADER$ = ADDR(NIL)) AND TEMP$->OUT$BLK.CODE = %C_HEADER# THEN DO;
                       WRITE_LO_BUF = '** No Header found.';
                       CALL M$WRITE (WRITE_LO);
                       GOTO ENDHDR;
                       END;
                 WRITE_LO_BUF = ' '; CALL M$WRITE(WRITE_LO);
                 WRITE_LO_BUF= 'DCL 1 FM$GRAN BASED ALIGNED,';
                 CALL M$WRITE(WRITE_LO);
                 WRITE_LO_BUF= '    2 STAMP,';
                 CALL M$WRITE(WRITE_LO);
                 CALL CONCAT(WRITE_LO_BUF, '      3 HASH UBIN(27) UNAL,     ',DOT,FORMAT);
                 CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(FM$GRAN.STAMP.HASH));
                 CALL CONCAT(WRITE_LO_BUF, '      3 GMOD UBIN(9) UNAL,      ',DOT,FORMAT);
                 CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(FM$GRAN.STAMP.GMOD));
                 CALL CONCAT(WRITE_LO_BUF, '    2 NAVX UBIN(18) UNAL,       ',DOT,FORMAT);
                 CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(FM$GRAN.NAVX));
                 CALL CONCAT(WRITE_LO_BUF, '    2 HDR BIT(1),               ',DOT,FORMAT);
                 B = FM$GRAN.HDR; I = BITBIN(B);
                 CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                 CALL CONCAT(WRITE_LO_BUF, '    2 LVL UBIN(3) UNAL,         ',DOT,FORMAT);
                 I = FM$GRAN.LVL;
                 CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                 CALL CONCAT(WRITE_LO_BUF, '    2 ORG UBIN(4) UNAL,         ',DOT,FORMAT);
                 I = FM$GRAN.ORG;
                 CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                 CALL CONCAT(WRITE_LO_BUF, '    2 AVAIL UBIN(10) UNAL,      ',DOT,FORMAT);
                 I = FM$GRAN.AVAIL;
                 CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                 IF ~FM$GRAN.HDR THEN GOTO ENDHDR;
                 CALL CONCAT(WRITE_LO_BUF, '    2 FCEX UBIN(18) UNAL,       ',DOT,FORMAT);
                 CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(FM$GRAN.FCEX));
                 CALL CONCAT(WRITE_LO_BUF, '    2 ENDLVL BIT(1),            ',DOT,FORMAT);
                 B = FM$GRAN.ENDLVL; I = BITBIN(B);
                 CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                 CALL CONCAT(WRITE_LO_BUF, '    2 X BIT(8),                 ',DOT,FORMAT);
                 I = BITBIN(FM$GRAN.X);
                 CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                 CALL CONCAT(WRITE_LO_BUF, '    2 KEYCNT UBIN(9) UNAL,      ',DOT,FORMAT);
                 CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(FM$GRAN.KEYCNT));
                 CALL CONCAT(WRITE_LO_BUF, '    2 BLINK SBIN,               ',DOT,FORMAT);
                 CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(FM$GRAN.BLINK));
                 CALL CONCAT(WRITE_LO_BUF, '    2 FLINK SBIN,               ',DOT,FORMAT);
                 CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(FM$GRAN.FLINK));
ENDHDR:          IF TEMP$->OUT$BLK.CODE = %C_ALL# THEN GOTO FIT;
               CASE (%C_FIT#);
                 IF FILE_CLOSE AND ~FILE_STOWED THEN GOTO FILECLOSED;
FIT:             WRITE_LO_BUF = ' '; CALL M$WRITE (WRITE_LO);
                 WRITE_LO_BUF='CODE  NAW   NDW   ITEMX'; CALL M$WRITE(WRITE_LO);
                 WRITE_LO_BUF='----  ----  ----  -----'; CALL M$WRITE(WRITE_LO);
                 DO I = 0 TO FM$FIT.CODES.CODE(0);
                    IF I = 0 THEN
                       WRITE_LO_BUF='(%2ZD)  %4ZD  %4ZD   .%2ZO    CODE (00)';
                    ELSE
                       WRITE_LO_BUF=' %2ZD   %4ZD  %4ZD   .%ZO';
                    TEMP1 = FM$FIT.CODES.NAW(I);
                    TEMP2 = FM$FIT.CODES.NDW(I);
                    TEMP3 = FM$FIT.CODES.ITEMX(I);
                    TEMP4 = FM$FIT.CODES.CODE(I);
                    CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(TEMP4),
                      VECTOR(TEMP1),VECTOR(TEMP2),VECTOR(TEMP3));
                    END;
                 IF TEMP$->OUT$BLK.CODE = %C_ALL# THEN GOTO CODES;
               CASE (%C_CODEN#);
                 IF FILE_CLOSE AND ~FILE_STOWED THEN GOTO FILECLOSED;
CODES:           DO CASE (TEMP$->OUT$BLK.CODE);
                  CASE (%C_CODEN#);
                    CALL CHARBIN(N,TEMP$->OUT$BLK.SUBLK$(0)->OUT$SYM.TEXT);
                    CODE = N;
                    LAST = 0;
                    CODES_A(0) = CODE;
                  CASE (%C_ALL#);
                    CODES_A(0) = 0;
                    DO I = 1 TO FM$FIT.CODES.CODE(0);
                       CODES_A(I) = FM$FIT.CODES.CODE(I);
                       END;
                    LAST = FM$FIT.CODES.CODE(0);
                  END;
                 DO CODES = 0 TO LAST;
                    CODE = CODES_A(CODES);
                    N = CODES_A(CODES);
                    CODE$ = FIT$;
                    IF CODE>21 THEN DO;
                       WRITE_LO_BUF = ' '; CALL M$WRITE (WRITE_LO);
                       WRITE_LO_BUF ='** CODE %2ZD does not exist.';
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE));
                       GOTO NEXT;
                       END;
                    WRITE_LO_BUF = ' '; CALL M$WRITE (WRITE_LO);
                    WRITE_LO_BUF='CODE  NAW   NDW   ITEMX'; CALL M$WRITE(WRITE_LO);
                    WRITE_LO_BUF='----  ----  ----  -----'; CALL M$WRITE(WRITE_LO);
                    WRITE_LO_BUF=' %2ZD   %4ZD  %4ZD   .%ZO';
                    IF CODE = 0 THEN DO;
                       WRITE_LO_BUF='(%2ZD)  %4ZD  %4ZD   .%ZO    CODE (00)';
                       TEMP1 = FM$FIT.CODES.NAW(0);
                       TEMP2 = FM$FIT.CODES.NDW(0);
                       TEMP3 = FM$FIT.CODES.ITEMX(0);
                       TEMP4 = FM$FIT.CODES.CODE(0);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(TEMP4),
                         VECTOR(TEMP1),VECTOR(TEMP2),VECTOR(TEMP3));
                       WRITE_LO_BUF = ' '; CALL M$WRITE(WRITE_LO);
                       GOTO NEXT;
                       END;
                    DO I = 1 TO FM$FIT.CODES.CODE(0);
                       IF FM$FIT.CODES.CODE(I) = CODE THEN DO;
                          TEMP1 = FM$FIT.CODES.NAW(I);
                          TEMP2 = FM$FIT.CODES.NDW(I);
                          TEMP3 = FM$FIT.CODES.ITEMX(I);
                          TEMP4 = FM$FIT.CODES.CODE(I);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(TEMP4),
                            VECTOR(TEMP1),VECTOR(TEMP2),VECTOR(TEMP3));
                          WRITE_LO_BUF = ' '; CALL M$WRITE(WRITE_LO);
                          IF TEMP2 = 0 THEN DO;
                             WRITE_LO_BUF='** This CODE contains NO significant data. (NDW = 0)';
                             CALL M$WRITE (WRITE_LO);
                             WRITE_LO_BUF = ' '; CALL M$WRITE(WRITE_LO);
                             END;
                          END;
                       END;
                    DO CASE (N);
                     CASE (1);
                       CALL XSF$LOCCODE (CODE$,CODE) ALTRET (NOCODE);
                       WRITE_LO_BUF = 'DCL 1 CODE01 ALIGNED,';
                       CALL M$WRITE (WRITE_LO); WRITE_LO_BUF=' ';
                       CALL CONCAT(WRITE_LO_BUF, '    2 NXTNTS UBIN (9) UNAL      ',DOT,FORMAT);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE01.NXTNTS));
                       CALL CONCAT(WRITE_LO_BUF, '    2 HASH  UBIN (27) UNAL      ',DOT,FORMAT);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE01.HASH));
                       WRITE_LO_BUF = '    2 XTNT (0:14) ALIGNED,';
                       CALL X$WRITE (F_FDS,VECTOR(WRITE_LO_BUF));
                       WRITE_LO_BUF = '      3 XTNSIZE UBIN (9) UNAL,';
                       CALL X$WRITE (F_FDS,VECTOR(WRITE_LO_BUF));
                       WRITE_LO_BUF = '      3 XTNSDA UBIN (27) UNAL,';
                       CALL X$WRITE (F_FDS,VECTOR(WRITE_LO_BUF));
                       DO I = 0 TO CODE01.NXTNTS-1;
                          CALL CONCAT(WRITE_LO_BUF, '                         (%2ZD) ',DOT,FORMAT,'  ',DOT,FORMAT);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I),VECTOR(CODE01.XTNT.XTNSIZE(I)),
                            VECTOR(CODE01.XTNT.XTNSDA(I)));
                          END;
NOW_REDEF:             WRITE_LO_BUF = '    2 EXTNT REDEF XTNT,';
                       CALL X$WRITE (F_FDS,VECTOR(WRITE_LO_BUF));
                       WRITE_LO_BUF = '      3 * SBIN,';
                       CALL X$WRITE (F_FDS,VECTOR(WRITE_LO_BUF));
                       WRITE_LO_BUF = '      3 XTNSIZE (0:13) SBIN;';
                       CALL X$WRITE (F_FDS,VECTOR(WRITE_LO_BUF));
                       DO I = 0 TO CODE01.NXTNTS-2;
                          CALL CONCAT(WRITE_LO_BUF, '                         (%2ZD) ',DOT,FORMAT);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I),VECTOR(CODE01.EXTNT.XTNSIZE(I)));
                          END;
                     CASE (2);
                       CALL XSF$LOCCODE (CODE$,CODE) ALTRET (NOCODE);
                       WRITE_LO_BUF = 'DCL 1 CODE02 ALIGNED,';
                       CALL X$WRITE (F_FDS,VECTOR(WRITE_LO_BUF));
                       CALL CONCAT(WRITE_LO_BUF, '    2 LSLIDE UBIN(9) UNAL,      ',DOT,FORMAT);
                       CALL X$WRITE (F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE02.LSLIDE));
                       CALL CONCAT(WRITE_LO_BUF, '    2 LRDL0 UBIN(9) UNAL,       ',DOT,FORMAT);
                       CALL X$WRITE (F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE02.LRDL0));
                       CALL CONCAT(WRITE_LO_BUF, '    2 SPARE UBIN(9) UNAL,       ',DOT,FORMAT);
                       CALL X$WRITE (F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE02.SPARE));
                       CALL CONCAT(WRITE_LO_BUF, '    2 SLIDE UBIN(9) UNAL,       ',DOT,FORMAT);
                       CALL X$WRITE (F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE02.SLIDE));
                       CALL CONCAT(WRITE_LO_BUF, '    2 TDALVL UBIN(9) UNAL,      ',DOT,FORMAT);
                       CALL X$WRITE (F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE02.TDALVL));
                       CALL CONCAT(WRITE_LO_BUF, '    2 TDA UBIN(27) UNAL,        ',DOT,FORMAT);
                       CALL X$WRITE (F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE02.TDA));
                       WRITE_LO_BUF = '    2 * BIT(9) UNAL,';
                       CALL X$WRITE (F_FDS,VECTOR(WRITE_LO_BUF));
                       CALL CONCAT(WRITE_LO_BUF, '    2 GDA UBIN(27) UNAL,        ',DOT,FORMAT);
                       CALL X$WRITE (F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE02.GDA));
                       CALL CONCAT(WRITE_LO_BUF, '    2 KEYX UBIN(18) UNAL,       ',DOT,FORMAT);
                       CALL X$WRITE (F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE02.KEYX));
                       CALL CONCAT(WRITE_LO_BUF, '    2 KEYL UBIN(9) UNAL;        ',DOT,FORMAT);
                       CALL X$WRITE (F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE02.KEYL));
                     CASE (3);
                       CALL XSF$LOCCODE (CODE$, CODE) ALTRET (NOCODE);
                       WRITE_LO_BUF = 'DCL 1 CODE03 BASED ALIGNED,';
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF));
                       CALL CONCAT(WRITE_LO_BUF, '    2 ORG UBIN(9) UNAL,         ',DOT,FORMAT);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE03.ORG));
                       CALL CONCAT(WRITE_LO_BUF, '    2 UGRANS UBIN(27) UNAL,     ',DOT,FORMAT);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE03.UGRANS));
                       WRITE_LO_BUF= '    2 DESC,';
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF));
                       CALL CONCAT(WRITE_LO_BUF, '      3 DELF BIT(1),            ',DOT,FORMAT);
                       B = CODE03.DESC.DELF; I = BITBIN(B);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                       CALL CONCAT(WRITE_LO_BUF, '      3 NOLIST BIT(1),          ',DOT,FORMAT);
                       B = CODE03.DESC.NOLIST; I = BITBIN(B);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                       CALL CONCAT(WRITE_LO_BUF, '      3 BUF BIT(1),             ',DOT,FORMAT);
                       B = CODE03.DESC.BUF; I = BITBIN(B);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                       CALL CONCAT(WRITE_LO_BUF, '      3 ODSTOW BIT(1),          ',DOT,FORMAT);
                       B = CODE03.DESC.ODSTOW; I = BITBIN(B);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                       CALL CONCAT(WRITE_LO_BUF, '      3 BAD BIT(1),             ',DOT,FORMAT);
                       B = CODE03.DESC.BAD; I = BITBIN(B);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                       CALL CONCAT(WRITE_LO_BUF, '      3 QS BIT(1),              ',DOT,FORMAT);
                       B = CODE03.DESC.QS; I = BITBIN(B);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                       WRITE_LO_BUF = '      3 * BIT(2),';
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF));
                       CALL CONCAT(WRITE_LO_BUF, '      3 ARCHIVE BIT(1),         ',DOT,FORMAT);
                       B = CODE03.DESC.ARCHIVE; I = BITBIN(B);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                       CALL CONCAT(WRITE_LO_BUF, '      3 BUPM BIT(1),            ',DOT,FORMAT);
                       B = CODE03.DESC.BUPM; I = BITBIN(B);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                       CALL CONCAT(WRITE_LO_BUF, '      3 NBUF BIT(1),            ',DOT,FORMAT);
                       B = CODE03.DESC.NBUF; I = BITBIN(B);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                       CALL CONCAT(WRITE_LO_BUF, '      3 ACTIVE BIT(1),          ',DOT,FORMAT);
                       B = CODE03.DESC.ACTIVE; I = BITBIN(B);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                       CALL CONCAT(WRITE_LO_BUF, '      3 TPB BIT(1),             ',DOT,FORMAT);
                       B = CODE03.DESC.TPB; I = BITBIN(B);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                       CALL CONCAT(WRITE_LO_BUF, '      3 TERMINATE BIT(1),       ',DOT,FORMAT);
                       B = CODE03.DESC.TERMINATE; I = BITBIN(B);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                       CALL CONCAT(WRITE_LO_BUF, '      3 FETCH BIT(1),           ',DOT,FORMAT);
                       B = CODE03.DESC.FETCH; I = BITBIN(B);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                       WRITE_LO_BUF= '      3 * BIT(1),';
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF));
                       WRITE_LO_BUF= '    2 TYPE CHAR(2) UNAL,         %>A';
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE03.TYPE));
                       CALL CONCAT(WRITE_LO_BUF, '    2 NRECS SBIN,               ',DOT,FORMAT);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE03.NRECS));
                       CALL CONCAT(WRITE_LO_BUF, '    2 RCSZ UBIN(9) UNAL,        ',DOT,FORMAT);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE03.RCSZ));
                       CALL CONCAT(WRITE_LO_BUF, '    2 NGAVAL UBIN(27) UNAL,     ',DOT,FORMAT);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE03.NGAVAL));
                       CALL CONCAT(WRITE_LO_BUF, '    2 COMP BIT(1),              ',DOT,FORMAT);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE03.COMP));
                       WRITE_LO_BUF= '    2 * BIT(4),';
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF));
                       CALL CONCAT(WRITE_LO_BUF, '    2 GHSTACS UBIN(4) UNAL,     ',DOT,FORMAT);
                       I = CODE03.GHSTACS;
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                       CALL CONCAT(WRITE_LO_BUF, '    2 LDA UBIN(27) UNAL,        ',DOT,FORMAT);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE03.LDA));
                       CALL CONCAT(WRITE_LO_BUF, '    2 XTNSIZE UBIN(18) UNAL,    ',DOT,FORMAT);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE03.XTNSIZE));
                       CALL CONCAT(WRITE_LO_BUF, '    2 RECL UBIN HALF UNAL,      ',DOT,FORMAT);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE03.RECL));
                       CALL CONCAT(WRITE_LO_BUF, '    2 NSTAMP UBIN,              ',DOT,FORMAT);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE03.NSTAMP));
                       CALL CONCAT(WRITE_LO_BUF, '    2 EXPIRE SBIN HALF UNAL,    ',DOT,FORMAT);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE03.EXPIRE));
                       WRITE_LO_BUF= '    2 * (0:2) BIT(18);';
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF));
                     CASE (4);
                       CALL XSF$LOCCODE (CODE$, CODE) ALTRET (NOCODE);
                       WRITE_LO_BUF = 'DCL 1 CODE04 ALIGNED,';
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF));
                       WRITE_LO_BUF = '    2 ACCESS,';
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF));
                       WRITE_LO_BUF = '      3 TIME UBIN(36) ALIGNED,   %..1U %...8U';
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE04.ACCESS.TIME),VECTOR(CODE04.ACCESS.TIME));
                       WRITE_LO_BUF = '    2 MODIFY,';
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF));
                       WRITE_LO_BUF = '      3 TIME UBIN(36) ALIGNED,   %..1U %...8U';
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE04.MODIFY.TIME),VECTOR(CODE04.MODIFY.TIME));
                       WRITE_LO_BUF = '    2 CREATION,';
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF));
                       WRITE_LO_BUF = '      3 TIME UBIN(36) ALIGNED,   %..1U %...8U';
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE04.CREATION.TIME),VECTOR(CODE04.CREATION.TIME));
                       WRITE_LO_BUF = '    2 CREATOR,';
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF));
                       IF OPEN_UBLOCK THEN DO;
                          WRITE_LO_BUF = '      3 ACCT CHAR(8) UNAL, ';
                          CALL M$WRITE(WRITE_LO);
                          WRITE_LO_BUF = '      3 NAME CHAR(12) UNAL,';
                          CALL M$WRITE(WRITE_LO);
                          WRITE_LO_BUF = '    2 SVMODIFY,';
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF));
                          WRITE_LO_BUF = '      3 TIME UBIN,';
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF));
                          WRITE_LO_BUF = '    2 GAC,';
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF));
                          CALL CONCAT(WRITE_LO_BUF, '      3 N UBIN, ');
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF));
                          WRITE_LO_BUF = '      3 TIME UBIN;';
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF));
                          END;
                       ELSE DO;
                          WRITE_LO_BUF = '      3 ACCT CHAR(8) UNAL,      .%>A';
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE04.CREATOR.ACCT));
                          WRITE_LO_BUF = '      3 NAME CHAR(12) UNAL,      %>A';
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE04.CREATOR.NAME));
                          WRITE_LO_BUF = '    2 SVMODIFY,';
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF));
                          WRITE_LO_BUF = '      3 TIME UBIN,               %..1U %...8U';
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE04.SVMODIFY.TIME),VECTOR(CODE04.SVMODIFY.TIME));
                          WRITE_LO_BUF = '    2 GAC,';
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF));
                          CALL CONCAT(WRITE_LO_BUF, '      3 N UBIN,                 ',DOT,FORMAT);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE04.GAC.N));
                          WRITE_LO_BUF = '      3 TIME UBIN;               %..1U %...8U';
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE04.GAC.TIME),VECTOR(CODE04.GAC.TIME));
                          END;
                     CASE (5);
                       CALL XSF$LOCCODE (CODE$, CODE) ALTRET (NOCODE);
                       WRITE_LO_BUF = 'DCL 1 CODE05 ALIGNED,';
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF));
                       WRITE_LO_BUF = '    2 BACKUP,';
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF));
                       WRITE_LO_BUF = '      3 TIME UBIN(36) ALIGNED,   %..1U %...8U';
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE05.BACKUP.TIME),VECTOR(CODE05.BACKUP.TIME));
                       WRITE_LO_BUF = '      3 REEL CHAR(6) UNAL,       %>A';
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE05.BACKUP.REEL));
                       WRITE_LO_BUF = '      3 EFT,';
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF));
                       CALL CONCAT(WRITE_LO_BUF, '        4 CROSS BIT(1) UNAL,    ',DOT,FORMAT);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE05.BACKUP.EFT.CROSS));
                       WRITE_LO_BUF = '        4 * BIT(3) UNAL,';
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF));
                       CALL CONCAT(WRITE_LO_BUF, '        4 FSN UBIN (14) UNAL;   ',DOT,FORMAT);
                       I = CODE05.BACKUP.EFT.FSN;
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                     CASE (6);
                       CALL XSF$LOCCODE (CODE$,CODE) ALTRET (NOCODE);
                       WRITE_LO_BUF = 'DCL 1 CODE06 ALIGNED,';
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF));
                       WRITE_LO_BUF = '    2 STOW,';
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF));
                       WRITE_LO_BUF = '      3 TIME UBIN(36) ALIGNED,   %..1U %...8U';
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE06.STOW.TIME),VECTOR(CODE06.STOW.TIME));
                       WRITE_LO_BUF = '      3 REEL CHAR(6),            %>A';
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE06.STOW.REEL));
                       IF M$IN$->F$DCB.DESC.ODSTOW# THEN DO;
                          CALL CONCAT(WRITE_LO_BUF,'      3 ODFSN UBIN(18) UNAL;     ',DOT,FORMAT);
                          I = CODE06.STOW.ODFSN;
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                          END;
                       ELSE DO;
                          WRITE_LO_BUF = '      3 EFT,';
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF));
                          CALL CONCAT(WRITE_LO_BUF, '        4 CROSS BIT(1) UNAL,    ',DOT,FORMAT);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE06.STOW.EFT.CROSS));
                          CALL CONCAT(WRITE_LO_BUF, '        4 INACTIVE BIT(1) UNAL, ',DOT,FORMAT);
                          B = CODE06.STOW.EFT.INACTIVE;
                          I = BITBIN(B);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                          WRITE_LO_BUF = '        4 *   BIT(2) UNAL,      ';
                          CALL M$WRITE (WRITE_LO);
                          CALL CONCAT(WRITE_LO_BUF, '        4 FSN UBIN(14) UNAL;    ',DOT,FORMAT);
                          I = CODE06.STOW.EFT.FSN;
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                          END;
                     CASE (7);
                       CALL XSF$LOCCODE (CODE$, CODE) ALTRET (NOCODE);
                       WRITE_LO_BUF = 'DCL 1 CODE07 BASED ALIGNED,';
                       CALL M$WRITE(WRITE_LO);
                       CALL CONCAT(WRITE_LO_BUF, '    2 PASS CHAR(8) UNAL;        %>A');
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE07.PASS));
                     CASE (8);
                       CALL XSF$LOCCODE (CODE$, CODE) ALTRET (NOCODE);
                       WRITE_LO_BUF= 'DCL 1 FITALTKEYS BASED ALIGNED,';
                       CALL M$WRITE(WRITE_LO);
                       CALL CONCAT(WRITE_LO_BUF, '    2 NUMWRDS UBIN(9) UNAL,     ',DOT,FORMAT);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE08.NUMWRDS));
                       CALL CONCAT(WRITE_LO_BUF, '    2 ALTBLD BIT(1),            ',DOT,FORMAT);
                       B = CODE08.ALTBLD; I = BITBIN(B);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                       CALL CONCAT(WRITE_LO_BUF, '    2 NUMENTS UBIN(8) UNAL,     ',DOT,FORMAT);
                       I = CODE08.NUMENTS;
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                       CALL CONCAT(WRITE_LO_BUF, '    2 UNIQUEBLD BIT(1) UNAL,    ',DOT,FORMAT);
                       B = CODE08.UNIQUEBLD; I = BITBIN(B);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                       WRITE_LO_BUF= '    2 * BIT(5) UNAL,';
                       CALL M$WRITE(WRITE_LO);
                       CALL CONCAT(WRITE_LO_BUF, '    2 MINWRSIZ UBIN(12) UNAL,   ',DOT,FORMAT);
                       I = CODE08.MINWRSIZ;
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                       WRITE_LO_BUF= '    2 K(0:20),';
                       CALL M$WRITE(WRITE_LO);
                       DO J = 0 TO CODE08.NUMENTS-1;
                          CALL CONCAT(WRITE_LO_BUF, '      3 KEYL UBIN(9) UNAL,      (%2ZD)   ',DOT,FORMAT);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(J),VECTOR(CODE08.K.KEYL(J)));
                          CALL CONCAT(WRITE_LO_BUF, '      3 FDA UBIN(27) UNAL,      (%2ZD)   ',DOT,FORMAT);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(J),VECTOR(CODE08.K.FDA(J)));
                          CALL CONCAT(WRITE_LO_BUF, '      3 LDA UBIN(27) UNAL,      (%2ZD)   ',DOT,FORMAT);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(J),VECTOR(CODE08.K.LDA(J)));
                          CALL CONCAT(WRITE_LO_BUF, '      3 TDA UBIN(27) UNAL,      (%2ZD)   ',DOT,FORMAT);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(J),VECTOR(CODE08.K.TDA(J)));
                          CALL CONCAT(WRITE_LO_BUF, '      3 KEYX UBIN(18) UNAL,     (%2ZD)   ',DOT,FORMAT);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(J),VECTOR(CODE08.K.KEYX(J)));
                          CALL CONCAT(WRITE_LO_BUF, '      3 TDALVL UBIN(9) UNAL,    (%2ZD)   ',DOT,FORMAT);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(J),VECTOR(CODE08.K.TDALVL(J)));
                          CALL CONCAT(WRITE_LO_BUF, '      3 UNIQUE BIT(1),          (%2ZD)   ',DOT,FORMAT);
                          B = CODE08.K.UNIQUE(J); I = BITBIN(B);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(J),VECTOR(I));
                          CALL CONCAT(WRITE_LO_BUF, '      3 RPOS BIT(1),            (%2ZD)   ',DOT,FORMAT);
                          B = CODE08.K.RPOS(J); I = BITBIN(B);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(J),VECTOR(I));
                          CALL CONCAT(WRITE_LO_BUF, '      3 DUPKEY BIT(1),          (%2ZD)   ',DOT,FORMAT);
                          B = CODE08.K.DUPKEY(J); I = BITBIN(B);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(J),VECTOR(I));
                          CALL CONCAT(WRITE_LO_BUF, '      3 INDXCHNG BIT(1),        (%2ZD)   ',DOT,FORMAT);
                          B = CODE08.K.INDXCHNG(J); I = BITBIN(B);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(J),VECTOR(I));
                          WRITE_LO_BUF= '      3 * BIT(23),';
                          CALL M$WRITE(WRITE_LO);
                          CALL CONCAT(WRITE_LO_BUF, '      3 CRECX UBIN(18) UNAL,    (%2ZD)   ',DOT,FORMAT);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(J),VECTOR(CODE08.K.CRECX(J)));
                          CALL CONCAT(WRITE_LO_BUF, '      3 SEGX UBIN(18) UNAL,     (%2ZD)   ',DOT,FORMAT);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(J),VECTOR(CODE08.K.SEGX(J)));
                          CALL CONCAT(WRITE_LO_BUF, '      3 CDA UBIN;               (%2ZD)   ',DOT,FORMAT);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(J),VECTOR(CODE08.K.CDA(J)));
                          WRITE_LO_BUF = ' '; CALL M$WRITE(WRITE_LO);
                          END;
                     CASE (9);
                       CALL XSF$LOCCODE (CODE$, CODE) ALTRET (NOCODE);
                       WRITE_LO_BUF= 'DCL 1 CODE09 BASED,';
                       CALL M$WRITE(WRITE_LO);
                       DO J = 1 TO FM$FIT.CODES.CODE(0);
                          IF FM$FIT.CODES.CODE(J) = 9 THEN
                             L = (FM$FIT.CODES.NDW(J) + 1)/3;
                          END;
                       IF L = 0 THEN L = 1;
                       DO J = 1 TO L;
                          WRITE_LO_BUF= '    2 FFLG,';
                          CALL M$WRITE(WRITE_LO);
                          CALL CONCAT(WRITE_LO_BUF, '      3 READ BIT(1),            ',DOT,FORMAT);
                          B = CODE09.FFLG.READ; I = BITBIN (B);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                          CALL CONCAT(WRITE_LO_BUF, '      3 DELR BIT(1),            ',DOT,FORMAT);
                          B = CODE09.FFLG.DELR; I = BITBIN (B);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                          CALL CONCAT(WRITE_LO_BUF, '      3 WNEW BIT(1),            ',DOT,FORMAT);
                          B = CODE09.FFLG.WNEW; I = BITBIN(B);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                          CALL CONCAT(WRITE_LO_BUF, '      3 UPD BIT(1),             ',DOT,FORMAT);
                          B = CODE09.FFLG.UPD; I = BITBIN(B);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                          CALL CONCAT(WRITE_LO_BUF, '      3 DELF BIT(1),            ',DOT,FORMAT);
                          B = CODE09.FFLG.DELF; I = BITBIN (B);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                          CALL CONCAT(WRITE_LO_BUF, '      3 NOLIST BIT(1),          ',DOT,FORMAT);
                          B = CODE09.FFLG.NOLIST; I = BITBIN (B);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                          CALL CONCAT(WRITE_LO_BUF, '      3 REATTR BIT(1),          ',DOT,FORMAT);
                          B = CODE09.FFLG.REATTR; I = BITBIN (B);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                          CALL CONCAT(WRITE_LO_BUF, '      3 EXEC BIT(1),            ',DOT,FORMAT);
                          B = CODE09.FFLG.EXEC; I = BITBIN (B);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                          CALL CONCAT(WRITE_LO_BUF, '      3 CREATE BIT(1),          ',DOT,FORMAT);
                          B = CODE09.FFLG.CREATE; I = BITBIN (B);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                          CALL CONCAT(WRITE_LO_BUF, '      3 AU BIT(1),              ',DOT,FORMAT);
                          B = CODE09.FFLG.AU; I = BITBIN (B);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                          CALL CONCAT(WRITE_LO_BUF, '      3 AURD BIT(1),            ',DOT,FORMAT);
                          B = CODE09.FFLG.AURD; I = BITBIN(B);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                          CALL CONCAT(WRITE_LO_BUF, '      3 TCTL BIT(1),            ',DOT,FORMAT);
                          B = CODE09.FFLG.TCTL; I = BITBIN(B);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                          WRITE_LO_BUF= '      3 * BIT (6),';
                          CALL M$WRITE(WRITE_LO);
                          WRITE_LO_BUF = '    2 ACCT CHAR(8);             .%>A';
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE09.ACCT));
                          WRITE_LO_BUF = ' '; CALL M$WRITE(WRITE_LO);
                          CODE$ = PINCRC (CODE$,10);
                          END;
                     CASE (10);
                       CALL XSF$LOCCODE (CODE$, CODE) ALTRET (NOCODE);
                       WRITE_LO_BUF= 'DCL 1 CODE10 BASED,';
                       CALL M$WRITE(WRITE_LO);
                       DO J = 1 TO FM$FIT.CODES.CODE(0);
                          IF FM$FIT.CODES.CODE(J) = 10 THEN
                             L = FM$FIT.CODES.NDW(J);
                          END;
                       TEMP1 = 0;
                       J = 0;
                       DO WHILE TEMP1 = 0;
                          WRITE_LO_BUF= '    2 FFLG,';
                          CALL M$WRITE(WRITE_LO);
                          CALL CONCAT(WRITE_LO_BUF, '      3 READ BIT(1),            ',DOT,FORMAT);
                          B = CODE10.FFLG.READ; I = BITBIN (B);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                          CALL CONCAT(WRITE_LO_BUF, '      3 DELR BIT(1),            ',DOT,FORMAT);
                          B = CODE10.FFLG.DELR; I = BITBIN (B);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                          CALL CONCAT(WRITE_LO_BUF, '      3 WNEW BIT(1),            ',DOT,FORMAT);
                          B = CODE10.FFLG.WNEW; I = BITBIN(B);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                          CALL CONCAT(WRITE_LO_BUF, '      3 UPD BIT(1),             ',DOT,FORMAT);
                          B = CODE10.FFLG.UPD; I = BITBIN(B);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                          CALL CONCAT(WRITE_LO_BUF, '      3 DELF BIT(1),            ',DOT,FORMAT);
                          B = CODE10.FFLG.DELF; I = BITBIN (B);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                          CALL CONCAT(WRITE_LO_BUF, '      3 NOLIST BIT(1),          ',DOT,FORMAT);
                          B = CODE10.FFLG.NOLIST; I = BITBIN (B);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                          CALL CONCAT(WRITE_LO_BUF, '      3 REATTR BIT(1),          ',DOT,FORMAT);
                          B = CODE10.FFLG.REATTR; I = BITBIN (B);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                          CALL CONCAT(WRITE_LO_BUF, '      3 EXEC BIT(1),            ',DOT,FORMAT);
                          B = CODE10.FFLG.EXEC; I = BITBIN (B);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                          WRITE_LO_BUF= '      3 * BIT(1),';
                          CALL M$WRITE(WRITE_LO);
                          CALL CONCAT(WRITE_LO_BUF, '      3 AU BIT(1),              ',DOT,FORMAT);
                          B = CODE10.FFLG.AU; I = BITBIN (B);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                          CALL CONCAT(WRITE_LO_BUF, '      3 AURD BIT(1),            ',DOT,FORMAT);
                          B = CODE10.FFLG.AURD; I = BITBIN(B);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                          CALL CONCAT(WRITE_LO_BUF, '      3 TCTL BIT(1),            ',DOT,FORMAT);
                          B = CODE10.FFLG.TCTL; I = BITBIN(B);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                          WRITE_LO_BUF= '      3 * BIT (6),';
                          CALL M$WRITE(WRITE_LO);
                          WRITE_LO_BUF= '    2 ACSVEH,';
                          CALL M$WRITE (WRITE_LO);
                          CALL CONCAT(WRITE_LO_BUF, '      3 C UBIN BYTE UNAL,         ',DOT,FORMAT);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE10.ACSVEH.C));
                          CALL CONCAT(WRITE_LO_BUF, '      3 T CHAR(CODE10.ACSVEH.C)   %>A');
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE10.ACSVEH.T));
                          WRITE_LO_BUF = ' '; CALL M$WRITE(WRITE_LO);
                          J = J + CODE10.ACSVEH.C + 3;
                          IF L <= (J+3)/4 THEN TEMP1 = 1;
                          CODE$ = PINCRC (CODE$,CODE10.ACSVEH.C+3);
                          END;
                     CASE (11);
                       CALL XSF$LOCCODE (CODE$, CODE) ALTRET (NOCODE);
                     CASE (12);
                       CALL XSF$LOCCODE (CODE$, CODE) ALTRET (NOCODE);
                     CASE (13);
                       CALL XSF$LOCCODE (CODE$, CODE) ALTRET (NOCODE);
                     CASE (14);
/* For users w/out FMSEC the fields from OWNER and up should
   be blanked out as they are not returned */
                       CALL XSF$LOCCODE (CODE$, CODE) ALTRET (NOCODE);
                     CASE (15);
                       CALL XSF$LOCCODE (CODE$, CODE) ALTRET (NOCODE);
                     CASE (16);
                       CALL XSF$LOCCODE (CODE$, CODE) ALTRET (NOCODE);
                       WRITE_LO_BUF = 'DCL 1 CODE16 BASED ALIGNED,';
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF));
                       CALL CONCAT(WRITE_LO_BUF, '    2 FORM CHAR(6),              %>A');
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE16.FORM));
                       CALL CONCAT(WRITE_LO_BUF, '    2 * CHAR (6),');
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF));
                       CALL CONCAT(WRITE_LO_BUF, '    2 DDEV BIT (9),             ',DOT,FORMAT);
                       B9 = CODE16.DDEV; I = BITBIN(B9);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                       CALL CONCAT(WRITE_LO_BUF, '    2 * BIT(9),');
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF));
                       CALL CONCAT(WRITE_LO_BUF, '    2 ATTR BIT(18) UNAL,        ',DOT,FORMAT);
                       B18 = CODE16.ATTR; I = BITBIN(B18);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                       CALL CONCAT(WRITE_LO_BUF, '    2 RECNO UBIN UNAL,          ',DOT,FORMAT);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE16.RECNO));
                       CALL CONCAT(WRITE_LO_BUF, '    2 PAGENO UBIN(18) UNAL,     ',DOT,FORMAT);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE16.PAGENO));
                       CALL CONCAT(WRITE_LO_BUF, '    2 LINENO UBIN(18) UNAL,     ',DOT,FORMAT);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE16.LINENO));
                       CALL CONCAT(WRITE_LO_BUF, '    2 PAGEBASE UBIN(18) UNAL,   ',DOT,FORMAT);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE16.PAGEBASE));
                       CALL CONCAT(WRITE_LO_BUF, '    2 LINES UBIN(18) UNAL,      ',DOT,FORMAT);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE16.LINES));
                       CALL CONCAT(WRITE_LO_BUF, '    2 NOTCOL1  BIT(1),          ',DOT,FORMAT);
                       B = CODE16.NOTCOL1; I = BITBIN(B);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                       CALL CONCAT(WRITE_LO_BUF, '    2 COMODE BIT(1),            ',DOT,FORMAT);
                       B = CODE16.COMODE; I = BITBIN(B);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                       CALL CONCAT(WRITE_LO_BUF, '    2 NSDEV BIT(1),             ',DOT,FORMAT);
                       B = CODE16.NSDEV; I = BITBIN(B);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                       CALL CONCAT(WRITE_LO_BUF, '    2 NSFORM BIT(1),            ',DOT,FORMAT);
                       B = CODE16.NSFORM; I = BITBIN(B);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                       CALL CONCAT(WRITE_LO_BUF, '    2 NSDDF BIT(1),             ',DOT,FORMAT);
                       B = CODE16.NSDDF; I = BITBIN (B);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                       CALL CONCAT(WRITE_LO_BUF, '    2 F01 BIT(1),               ',DOT,FORMAT);
                       B = CODE16.F01; I = BITBIN(B);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                       CALL CONCAT(WRITE_LO_BUF, '    2 F02 BIT(1),               ',DOT,FORMAT);
                       B = CODE16.F02; I = BITBIN(B);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                       CALL CONCAT(WRITE_LO_BUF, '    2 BANNER_CHARGES BIT(1),    ',DOT,FORMAT);
                       B = CODE16.BANNER_CHARGES; I = BITBIN(B);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                       CALL CONCAT(WRITE_LO_BUF, '    2 CONTFORM BIT(1),          ',DOT,FORMAT);
                       B = CODE16.CONTFORM; I = BITBIN(B);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                       CALL CONCAT(WRITE_LO_BUF, '    2 COPIES BIT(9),            ',DOT,FORMAT);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE16.COPIES));
                       CALL CONCAT(WRITE_LO_BUF, '    2 BANNER_REPEATS UBIN(9),   ',DOT,FORMAT);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE16.BANNER_REPEATS));
                       CALL CONCAT(WRITE_LO_BUF, '    2 OLDSEQ,');
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF));
                       CALL CONCAT(WRITE_LO_BUF, '      3 SEQCOL UBIN(9) UNAL,    ',DOT,FORMAT);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE16.OLDSEQ.SEQCOL));
                       CALL CONCAT(WRITE_LO_BUF, '      3 SEQID CHAR(4) UNAL,      %>A');
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE16.OLDSEQ.SEQID));
                       CALL CONCAT(WRITE_LO_BUF, '    2 NBANNER_RECS UBIN(18) UNAL, ',DOT,FORMAT);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE16.NBANNER_RECS));
                       CALL CONCAT(WRITE_LO_BUF, '    2 DEV CHAR(2),              %>A');
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE16.DEV));
                       CALL CONCAT(WRITE_LO_BUF, '    2 WSN CHAR(8),              %>A');
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE16.WSN));
                       CALL CONCAT(WRITE_LO_BUF, '    2 OLDTABS,');
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF));
                       CALL CONCAT(WRITE_LO_BUF, '      3 * (0:31) UBIN(9) UNAL,');
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF));
                       CALL CONCAT(WRITE_LO_BUF, '    2 STEPPAGENO UBIN(18) UNAL, ',DOT,FORMAT);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE16.STEPPAGENO));
                       CALL CONCAT(WRITE_LO_BUF, '    2 STEPRECNO UBIN,           ',DOT,FORMAT);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE16.STEPRECNO));
                       CALL CONCAT(WRITE_LO_BUF, '    2 DVFC CHAR(1) UNAL,         %>A');
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE16.DVFC));
                       CALL CONCAT(WRITE_LO_BUF, '    2 WIDTH UBIN(9) UNAL,       ',DOT,FORMAT);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE16.WIDTH));
                       CALL CONCAT(WRITE_LO_BUF, '    2 GOOD BIT (1),             ',DOT,FORMAT);
                       B = CODE16.GOOD; I = BITBIN (B);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                       CALL CONCAT(WRITE_LO_BUF, '    2 IWL BIT(8),               ''%8ZB''B');
                       B8 = CODE16.IWL; I = BITBIN (B8);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                       CALL CONCAT(WRITE_LO_BUF, '    2 * BIT (9),');
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF));
                       CALL CONCAT(WRITE_LO_BUF, '    2 VFCIM,');
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF));
                       CALL CONCAT(WRITE_LO_BUF, '      3 LINE (0:31) UBIN (9) UNAL,');
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF));
                       WRITE_LO_BUF = ' '; CALL M$WRITE (WRITE_LO);
                       CALL CONCAT (INX_OUT,' (%2ZD) ',DOT,FORMAT,'   ');
                       CALL CONCAT (WRITE_LO_BUF,INX_OUT,INX_OUT,INX_OUT,INX_OUT);
                       DO I = 0 TO 30 BY 4;
                          TEMP1 = I+1;
                          TEMP2 = I+2;
                          TEMP3 = I+3;
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),
                            VECTOR(I),VECTOR (CODE16.VFCIM.LINE(I)),
                            VECTOR(TEMP1),VECTOR (CODE16.VFCIM.LINE(TEMP1)),
                            VECTOR(TEMP2),VECTOR (CODE16.VFCIM.LINE(TEMP2)),
                            VECTOR(TEMP3),VECTOR (CODE16.VFCIM.LINE(TEMP3)));
                          END;
                       CALL CONCAT (WRITE_LO_BUF,' (%2ZD) ',DOT,FORMAT);
                       I = 31;
                       CALL X$WRITE (F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I),
                         VECTOR(CODE16.VFCIM.LINE(I)));
                       WRITE_LO_BUF = ' '; CALL M$WRITE (WRITE_LO);
                       CALL CONCAT(WRITE_LO_BUF, '      3 NEXT (0:31) UBIN (9) UNAL;');
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF));
                       WRITE_LO_BUF = ' '; CALL M$WRITE (WRITE_LO);
                       CALL CONCAT (WRITE_LO_BUF,INX_OUT,INX_OUT,INX_OUT,INX_OUT);
                       DO I = 0 TO 30 BY 4;
                          TEMP1=I+1;
                          TEMP2=I+2;
                          TEMP3=I+3;
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),
                            VECTOR(I),VECTOR (CODE16.VFCIM.NEXT(I)),
                            VECTOR(TEMP1),VECTOR (CODE16.VFCIM.NEXT(TEMP1)),
                            VECTOR(TEMP2),VECTOR (CODE16.VFCIM.NEXT(TEMP2)),
                            VECTOR(TEMP3),VECTOR (CODE16.VFCIM.NEXT(TEMP3)));
                          END;
                       CALL CONCAT (WRITE_LO_BUF,' (%2ZD) ',DOT,FORMAT);
                       I = 31;
                       CALL X$WRITE (F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I),
                         VECTOR(CODE16.VFCIM.NEXT(I)));
                       WRITE_LO_BUF = ' '; CALL M$WRITE (WRITE_LO);
                     CASE (17);
                       CALL XSF$LOCCODE (CODE$, CODE) ALTRET (NOCODE);
                       IF VLP_FPRG.LDBYPRO# = 1 THEN DO;
                          WRITE_LO_BUF = '** This code contains NO significant data. (VLP_FPRG.LDBYPRO# = 1)';
                          CALL M$WRITE (WRITE_LO);
                          WRITE_LO_BUF = ' '; CALL M$WRITE (WRITE_LO);
                          END;
                       WRITE_LO_BUF = 'DCL 1 VLP_FPRG BASED DALIGNED,';
                       CALL M$WRITE (WRITE_LO);
                       CALL CONCAT (WRITE_LO_BUF,'    2 LDBYPRO# UBIN BYTE UNAL,        ',DOT,FORMAT);
                       CALL X$WRITE (F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(VLP_FPRG.LDBYPRO#));
                       WRITE_LO_BUF = '    2 FLGS,';
                       CALL M$WRITE (WRITE_LO);
                       CALL CONCAT (WRITE_LO_BUF,'      3 DEBUG# BIT(1),                ',DOT,FORMAT);
                       CALL X$WRITE (F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(VLP_FPRG.FLGS.DEBUG#));
                       WRITE_LO_BUF = '      3 * BIT (8),';
                       CALL M$WRITE (WRITE_LO);
                       CALL CONCAT (WRITE_LO_BUF,'    2 PSN# CHAR (6),                  %>A');
                       CALL X$WRITE (F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(VLP_FPRG.PSN#));
                       WRITE_LO_BUF = '    2 NAME,';
                       CALL M$WRITE (WRITE_LO);
                       CALL CONCAT (WRITE_LO_BUF,'      3 L# UBIN BYTE UNAL,            ',DOT,FORMAT);
                       CALL X$WRITE (F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(VLP_FPRG.NAME.L#));
                       CALL CONCAT (WRITE_LO_BUF,'      3 C# CHAR (31),                 %>A');
                       CALL X$WRITE (F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(VLP_FPRG.NAME.C#));
                       CALL CONCAT (WRITE_LO_BUF,'    2 ACCT# CHAR (8),                 %>A');
                       CALL X$WRITE (F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(VLP_FPRG.ACCT#));
                       CALL CONCAT (WRITE_LO_BUF,'    2 PASS# CHAR (8),                 %>A');
                       CALL X$WRITE (F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(VLP_FPRG.PASS#));
                       WRITE_LO_BUF = '    2 PROFILE#,';
                       CALL M$WRITE (WRITE_LO);
                       CALL CONCAT (WRITE_LO_BUF,'      3 C# UBIN BYTE UNAL,            ',DOT,FORMAT);
                       CALL X$WRITE (F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(VLP_FPRG.PROFILE#.C#));
                       CALL CONCAT (WRITE_LO_BUF,'      3 T# CHAR (11);                 %>A');
                       CALL X$WRITE (F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(VLP_FPRG.PROFILE#.T#));
                     CASE (18);
                       CALL XSF$LOCCODE (CODE$, CODE) ALTRET (NOCODE);
                       WRITE_LO_BUF = 'DCL 1 CODE18 BASED ALIGNED,';
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF));
                       CALL CONCAT(WRITE_LO_BUF, '    2 VLPID UBIN(9) CALIGNED,     ',DOT,FORMAT);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE18.VLPID));
                       CALL CONCAT(WRITE_LO_BUF, '    2 NFIELDS UBIN(27) CALIGNED,  ',DOT,FORMAT);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE18.NFIELDS));
                       L = CODE18.NFIELDS;
                       CALL CONCAT(WRITE_LO_BUF, '    2 FIELD(0:0),');
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF));
                       DO I = 0 TO L - 1;
                          CALL CONCAT(WRITE_LO_BUF, '       3 TYPE UBIN(6) UNAL,        (%2ZD)  ',DOT,FORMAT);
                          J = CODE18.FIELD.TYPE(I);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I),VECTOR(J));
                          DO CASE(J);
                           CASE(%NO_DATATYPE,%SFLT_DATATYPE,
                            %DFLT_DATATYPE,%CHAR_DATATYPE,
                            %TEXTC_DATATYPE,%TEXTH_DATATYPE,
                            %LIST_DATATYPE,%VLIST_DATATYPE,
                            %SBIN_DATATYPE,%UBIN_DATATYPE,
                            %UTS_DATATYPE);
                             CALL CONCAT(WRITE_LO_BUF, '       3 LEN UBIN(12) UNAL,        (%2ZD)  ',DOT,FORMAT);
                             TEMP2 = CODE18.FIELD.LEN(I);
                             CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I),VECTOR(TEMP2));
                           CASE(ELSE);
                             CALL CONCAT(WRITE_LO_BUF, '       3 LEN UBIN(6) UNAL,         (%2ZD)  ',DOT,FORMAT);
                             TEMP2 = CODE18.DECFIELD.LEN(I);
                             CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I),VECTOR(TEMP2));
                             CALL CONCAT(WRITE_LO_BUF, '       3 SCALE UBIN(6) UNAL,       (%2ZD)  ',DOT,FORMAT);
                             TEMP2 = CODE18.DECFIELD.SCALE(I);
                             CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I),VECTOR(TEMP2));
                           END;
                          WRITE_LO_BUF = ' '; CALL M$WRITE(WRITE_LO);
                          END;
                     CASE (19);
                       CALL XSF$LOCCODE (CODE$, CODE) ALTRET (NOCODE);
                       WRITE_LO_BUF = 'DCL 1 CODE19 BASED ALIGNED,';
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF));
                       CALL CONCAT(WRITE_LO_BUF, '    2 NKEYS UBIN,                 ',DOT,FORMAT);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE19.NKEYS));
                       L = CODE19.NKEYS;
                       CALL CONCAT(WRITE_LO_BUF, '    2 K(0:0),');
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF));
                       DO I = 0 TO L - 1;
                          CALL CONCAT(WRITE_LO_BUF, '       3 KEYEND BIT(1) UNAL,      (%2ZD)  ',DOT,FORMAT);
                          B = CODE19.K.KEYEND(I); J = BITBIN(B);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I),VECTOR(J));
                          CALL CONCAT(WRITE_LO_BUF, '       3 UNIQUE BIT(1) UNAL,      (%2ZD)  ',DOT,FORMAT);
                          B = CODE19.K.UNIQUE(I); J = BITBIN(B);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I),VECTOR(J));
                          CALL CONCAT(WRITE_LO_BUF, '       3 FIELDN UBIN(9) CALIGNED, (%2ZD)  ',DOT,FORMAT);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I),VECTOR(CODE19.K.FIELDN(I)));
                          WRITE_LO_BUF = ' '; CALL M$WRITE(WRITE_LO);
                          END;
                     CASE (20);
                       CALL XSF$LOCCODE (CODE$, CODE) ALTRET (NOCODE);
                       WRITE_LO_BUF = 'DCL 1 CODE20 BASED ALIGNED,';
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF));
                       CALL CONCAT(WRITE_LO_BUF, '    2 NKEYS UBIN,                  ',DOT,FORMAT);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(CODE20.NKEYS));
                       CALL CONCAT(WRITE_LO_BUF, '    2 ALTBLD BIT(1) UNAL,          ',DOT,FORMAT);
                       B = CODE20.ALTBLD; J = BITBIN(B);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(J));
                       CALL CONCAT(WRITE_LO_BUF, '    2 UNIQUEBLD BIT(1) UNAL,       ',DOT,FORMAT);
                       B = CODE20.UNIQUEBLD; J = BITBIN(B);
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(J));
                       L = CODE20.NKEYS;
                       CALL CONCAT(WRITE_LO_BUF, '    2 K(0:0),');
                       CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF));
                       DO I = 0 TO L - 1;
                          CALL CONCAT(WRITE_LO_BUF, '       3 TDALVL UBIN(9) CALIGNED,  (%2ZD)  ',DOT,FORMAT);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I),VECTOR(CODE20.K.TDALVL(I)));
                          CALL CONCAT(WRITE_LO_BUF, '       3 TDA UBIN(27) CALIGNED,    (%2ZD)  ',DOT,FORMAT);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I),VECTOR(CODE20.K.TDA(I)));
                          CALL CONCAT(WRITE_LO_BUF, '       3 FDA UBIN(27) CALIGNED,    (%2ZD)  ',DOT,FORMAT);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I),VECTOR(CODE20.K.FDA(I)));
                          CALL CONCAT(WRITE_LO_BUF, '       3 LDA UBIN(27) CALIGNED,    (%2ZD)  ',DOT,FORMAT);
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I),VECTOR(CODE20.K.LDA(I)));
                          CALL CONCAT(WRITE_LO_BUF, '       3 * UBIN(18) CALIGNED,      (%2ZD)');
                          CALL X$WRITE(F_FDS,VECTOR(WRITE_LO_BUF),VECTOR(I));
                          WRITE_LO_BUF = ' '; CALL M$WRITE(WRITE_LO);
                          END;
                     CASE (21);
                       CALL XSF$LOCCODE (CODE$, CODE) ALTRET (NOCODE);
NEXT:                END;
                    END;
               CASE (%C_END#);
                 GOTO DONE;
               END;                     /* Do case                            */
              DO WHILE %FALSE;
FILECLOSED:
                 WRITE_LO_BUF = '*** No file currently opened';
                 CALL M$WRITE (WRITE_LO);
                 END;
              DO WHILE %FALSE;
NOCODE:
                 WRITE_LO_BUF = '** CODE %2ZD not found.';
                 CALL X$WRITE (F_FDS, VECTOR(WRITE_LO_BUF),VECTOR(N));
                 END;
              END;                      /* Do nodes = 0 to ....*/
           END;                         /* Do while true                      */
 
 
 
 
MON_ERR:
        CALL XUR$ERRMSG (B$TCB$->B$TCB.ALT$->B$ALT.ERR);
 
DONE:
        WRITE_LO_BUF = ' '; CALL M$WRITE (WRITE_LO);
        CALL XUR$CLOSE_DCBS;
 
 
END FINK;
 
 
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
 
 
BREAK_RTN: PROC;
 
%INCLUDE CP_6;
%FPT_TRMPRG (RSTBRK=YES);
   DCL NEXT_CMD REMEMBER SYMREF;
 
        CALL M$TRMPRG (FPT_TRMPRG);
        CALL M$CLRSTK ALTRET (NXT);
NXT:
        UNWIND TO NEXT_CMD;
 
END BREAK_RTN;
