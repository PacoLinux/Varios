/*M*    REV_REC_SI6:  Review a file's records */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
 
REV_REC: PROC MAIN;
 
%INCLUDE CP_6;
%INCLUDE XU_FORMAT_C;
%INCLUDE XUF_ENTRY;
%INCLUDE B_ERRORS_C;
%B$TCB;
%B$ALT;
 
 
%EQU TRUE = '1'B;
%EQU FALSE = '0'B;
 
 
DCL B$TCB$ PTR SYMREF;
DCL M$SI DCB;
 
 
%FPT_OPEN (FPTN=OPEN_REV, DCB=M$SI, FUN=UPDATE);
%FPT_CLOSE (FPTN=CLOSE_REV, DCB=M$SI, DISP=SAVE);
%FPT_READ (FPTN=READ_REV, DCB=M$SI, KEY=KEY_REV,
    KEYR=YES);
%FPT_GDS (RESULTS=REV_BUF_, SEGSIZE=2048);
DCL REV_BUF_ VECTOR STATIC INIT(VECTOR(NIL));
DCL 1 KEY_REV STATIC,
      2 CNT UBIN BYTE UNAL,
      2 TXT CHAR(255) UNAL;
%FPT_PRECORD (FPTN=POSTN_REV, DCB=M$SI, KEY=KEY_REV, KEYS=YES,
        KEYR=YES);
%FPT_DELREC (FPTN=DEL_REV, DCB=M$SI, KEY=KEY_REV);
 
%VLP_ERRCODE (FPTN=ER_CODE);
DCL ER_CODE_WORD REDEF ER_CODE UBIN;
%FPT_ERRMSG (BUF=ERM_BUF, CODE=ER_CODE, OUTDCB1=M$UC);
DCL ERM_BUF CHAR(120) STATIC;
 
%F_FDS (NAME=FDS, STCLASS=STATIC, BUF=IN_BUF, DCB=M$UC, TRUNC=NO,
    WRAPTAB=4);
%FPT_WRITE (FPTN=WRITE_IN, DCB=M$UC, BUF=IN_BUF);
DCL IN_BUF CHAR(256) STATIC;
DCL UPPER_CASE_BUF CHAR(256) STATIC;
%FPT_READ (FPTN=READ_IN, DCB=M$UC, BUF=IN_BUF);
%FPT_PROMPT (FPTN=RESET_PROMPT, DCB=M$UC);
%FPT_WRITE (FPTN=WRT_IN_PROMPT, DCB=M$UC, BUF=IN_PROMPT);
%FPT_PROMPT (FPTN=SET_DEL_PROMPT, DCB=M$UC, PROMPT=DEL_PROMPT);
%FPT_WRITE (FPTN=WRT_DELETED, DCB=M$UC, BUF=DELETED);
%FPT_WRITE (FPTN=WRT_NOT_DELETED, DCB=M$UC, BUF=NOT_DELETED);
%FPT_WRITE (FPTN=WRT_NO_RECORD, DCB=M$UC, BUF=NO_RECORD);
%FPT_WRITE (FPTN=WRT_KEY_TOO_LONG, DCB=M$UC, BUF=KEY_TOO_LONG);
 
 
DCL INTRO_MSG CHAR(0) CONSTANT INIT
    ('Reviewing records in file: %>A.%>A');
DCL IN_PROMPT CHAR(0) CONSTANT
    INIT('Positioning: ''key'', .key, +n, -n, ^, or cr(=+1); DElete; Quit');
DCL INPUT_ERROR CHAR(0) CONSTANT
    INIT('%N-^%/  !!Error!!');
DCL 1 DEL_PROMPT CONSTANT,
      2 * UBIN BYTE CALIGNED INIT(21),
      2 * CHAR(0) CALIGNED INIT('Delete record? (Y/N) ');
DCL DELETED CHAR(0) CONSTANT INIT('  **Deleted**');
DCL NOT_DELETED CHAR(0) CONSTANT INIT('  Not Deleted');
DCL NO_RECORD CHAR(0) CONSTANT INIT('  !!No record to delete!!');
DCL KEY_TOO_LONG CHAR(0) CONSTANT INIT('  !!Key too long (>255)!!');
 
DCL NON_NUMERICS (0:127) UBIN BYTE CALIGNED CONSTANT INIT
    (1*%ASCBIN('0'), 0*%(ASCBIN('9')-ASCBIN('0')), 1*0);
DCL CONS_0 UBIN CONSTANT INIT(0);
 
 
%EQU FN_OK = 0;
%EQU FN_KEY = 1;
%EQU FN_QUIT = 2;
%EQU FN_DEL = 3;
%EQU FN_PLUS = 4;
%EQU FN_MINUS = 5;
 
 
DCL KW_OK CHAR(0) CONSTANT INIT('OK');
DCL KW_QUIT CHAR(0) CONSTANT INIT('QUIT');
DCL KW_END CHAR(0) CONSTANT INIT('END');
DCL KW_DEL CHAR(0) CONSTANT INIT('DELETE');
DCL KW_PLUS CHAR(0) CONSTANT INIT('+');
DCL KW_MINUS CHAR(0) CONSTANT INIT('-');
DCL KW_CARET CHAR(0) CONSTANT INIT('^');
 
 
 
DCL SI_DCB$ PTR;
DCL IN_DCB$ PTR;
DCL OK_TO_READ BIT(1);
DCL AT_EOF BIT(1);
DCL REC_LEN UBIN;
DCL KEY_LEN UBIN;
DCL FUNC UBIN;
DCL CHR CHAR(1);
DCL I UBIN;
DCL REC_INDEX UBIN;
DCL 1 KEY_BUF,
      2 CNT UBIN BYTE CALIGNED,
      2 TXT CHAR(255) CALIGNED;
DCL 1 STR_BUF,
      2 CNT UBIN BYTE CALIGNED,
      2 TXT CHAR(255) CALIGNED;
 
 
%F$DCB (DCBN=SI$DCB, STCLASS="BASED(SI_DCB$)");
%F$DCB (DCBN=IN$DCB, STCLASS="BASED(IN_DCB$)");
 
 
 
        CALL M$OPEN (OPEN_REV);
        SI_DCB$ = DCBADDR (DCBNUM (M$SI));
        IN_DCB$ = DCBADDR (DCBNUM (M$UC));
        CALL M$GDS (FPT_GDS);
        READ_REV.BUF_ = REV_BUF_;
        READ_REV.V.KEYS# = %FALSE;  /* Do sequential read */
        KEY_REV = '0'B;
        OK_TO_READ = %TRUE;
 
        CALL X$WRITE (FDS, VECTOR(INTRO_MSG),
          VECTOR(SUBSTR(SI$DCB.NAME#.C, 0, SI$DCB.NAME#.L)),
          VECTOR(SI$DCB.ACCT#));
 
 
        /*                                  */
        /*  Loop on each record in file     */
        /*                                  */
 
RECORD_LOOP:
        DO WHILE (%TRUE);
           CALL INSERT (IN_BUF, 0, 1, ' ');
           WRITE_IN.BUF_.BOUND = 0;
           CALL M$WRITE (WRITE_IN);
 
           IF OK_TO_READ THEN
READ_REV_RECORD: DO;
              AT_EOF = %FALSE;
              CALL M$READ (READ_REV) ALTRET (READ_REV_FAILED);
              READ_REV.V.KEYS# = %FALSE;    /* Set for seq'l read */
              REC_LEN = SI$DCB.ARS#;
              KEY_LEN = KEY_REV.CNT;
              CALL DISP_DATA (%TRUE, ADDR(KEY_REV.TXT), KEY_LEN);
              CALL DISP_DATA (%FALSE, VBASE(REV_BUF_), REC_LEN);
              END READ_REV_RECORD;
 
           CALL M$WRITE (WRT_IN_PROMPT);
           CALL M$READ (READ_IN);
           REC_LEN = IN$DCB.ARS#;
 
           IF REC_LEN = 0 THEN
              FUNC = %FN_OK;
           ELSE DO;
              DO I=0 TO (REC_LEN - 1);
                 CHR = SUBSTR (IN_BUF, I, 1);
                 IF CHR >= 'a' AND CHR <= 'z' THEN
                    CHR = BITASC (ASCBIT (CHR) & '137'O);
                 CALL INSERT (UPPER_CASE_BUF, I, 1, CHR);
                 END;
 
              FUNC = 999;       /* In case all IF's fail */
 
              IF REC_LEN > 1 AND REC_LEN <= LENGTHC (KW_DEL) AND
                SUBSTR (UPPER_CASE_BUF, 0, REC_LEN) =
                SUBSTR (KW_DEL, 0, REC_LEN) THEN
                 FUNC = %FN_DEL;
              IF REC_LEN <= LENGTHC (KW_QUIT) AND
                SUBSTR (UPPER_CASE_BUF, 0, REC_LEN) =
                SUBSTR (KW_QUIT, 0, REC_LEN) THEN
                 FUNC = %FN_QUIT;
              IF REC_LEN <= LENGTHC (KW_END) AND
                SUBSTR (UPPER_CASE_BUF, 0, REC_LEN) =
                SUBSTR (KW_END, 0, REC_LEN) THEN
                 FUNC = %FN_QUIT;
              IF SUBSTR (UPPER_CASE_BUF, 0, 1) = ''''
                OR (SUBSTR (UPPER_CASE_BUF, 0, 1) >= '0'
                AND SUBSTR (UPPER_CASE_BUF, 0, 1) <= '9')
                OR SUBSTR (UPPER_CASE_BUF, 0, 1) = '.'
                OR SUBSTR (UPPER_CASE_BUF, 0, 1) = ','
                OR SUBSTR (UPPER_CASE_BUF, 0, 1) = ';' THEN
                 FUNC = %FN_KEY;
              IF REC_LEN <= LENGTHC (KW_OK) AND
                SUBSTR (UPPER_CASE_BUF, 0, REC_LEN) =
                SUBSTR (KW_OK, 0, REC_LEN) THEN
                 FUNC = %FN_OK;
              IF SUBSTR(UPPER_CASE_BUF, 0, LENGTHC(KW_PLUS)) =
                KW_PLUS THEN
                 FUNC = %FN_PLUS;
              IF SUBSTR(UPPER_CASE_BUF, 0, LENGTHC(KW_MINUS)) =
                KW_MINUS
                OR SUBSTR(UPPER_CASE_BUF, 0, LENGTHC(KW_CARET)) =
                KW_CARET THEN
                 FUNC = %FN_MINUS;
              END;
 
 
DO_FUNC:
           DO CASE (FUNC);
 
            CASE (%FN_OK);
FUNC_OK:      ;
 
            CASE (%FN_DEL);
FUNC_DEL:
              IF NOT OK_TO_READ THEN DO;
                 CALL M$WRITE (WRT_NO_RECORD);
                 EXIT DO_FUNC;
                 END;
              CALL M$PROMPT (SET_DEL_PROMPT);
              CALL M$READ (READ_IN);
              REC_LEN = IN$DCB.ARS#;
              IF REC_LEN = 1
                AND (SUBSTR(IN_BUF, 0, 1) = 'Y'
                OR SUBSTR(IN_BUF, 0, 1) = 'y') THEN DO;
                 CALL M$DELREC (DEL_REV);
                 CALL M$WRITE (WRT_DELETED);
                 END;
              ELSE
                 CALL M$WRITE (WRT_NOT_DELETED);
              CALL M$PROMPT (RESET_PROMPT);
 
 
            CASE (%FN_QUIT);
FUNC_QUIT:
              GOTO CLOSE_FILES;
 
 
            CASE (%FN_KEY);
FUNC_KEY:
              KEY_REV.CNT = 0;
              KEY_BUF.CNT = 0;
              STR_BUF.CNT = 0;
              REC_INDEX = 0;
              DO WHILE REC_INDEX < REC_LEN;
                 DO SELECT (SUBSTR(IN_BUF, REC_INDEX, 1));
 
                  SELECT ('''');
                    CALL GET_CHAR_STRING (REC_INDEX, STR_BUF)
                      WHENALTRETURN DO;
                       EXIT DO_FUNC;
                       END;
 
                  SELECT ('0', '1', '2', '3', '4', '5', '6', '7',
                         '8', '9');
                    CALL GET_DEC_STRING (REC_INDEX, STR_BUF)
                      WHENALTRETURN DO;
                       EXIT DO_FUNC;
                       END;
 
                  SELECT ('.');
                    CALL GET_OCT_STRING (REC_INDEX, STR_BUF)
                      WHENALTRETURN DO;
                       EXIT DO_FUNC;
                       END;
 
                  SELECT (',', ' ');
                    CALL INSERT_BYTE_STRING (STR_BUF, KEY_BUF)
                      WHENALTRETURN DO;
                       EXIT DO_FUNC;
                       END;
                    REC_INDEX = REC_INDEX + 1;
 
                  SELECT (';');
                    CALL INSERT_WORD_STRING (STR_BUF, KEY_BUF)
                      WHENALTRETURN DO;
                       EXIT DO_FUNC;
                       END;
                    REC_INDEX = REC_INDEX + 1;
 
                  SELECT (ELSE);
                    CALL X$WRITE (FDS, VECTOR(INPUT_ERROR),
                      VECTOR(REC_INDEX));
                    EXIT DO_FUNC;
                  END;
                 END;
 
              CALL INSERT_BYTE_STRING (STR_BUF, KEY_BUF)
                WHENALTRETURN DO;
                 EXIT DO_FUNC;
                 END;
 
 
              KEY_REV = KEY_BUF;
              POSTN_REV.V.N# = 0;
              POSTN_REV.V.KEYS# = %TRUE;
              AT_EOF = %FALSE;
              CALL M$PRECORD (POSTN_REV)
                ALTRET (POSTN_REV_FAILED);
              OK_TO_READ = %TRUE;
              READ_REV.V.KEYS# = %FALSE;
 
 
            CASE (%FN_PLUS, %FN_MINUS);
FUNC_PLUS_MINUS:
              I = 1;
              IF REC_LEN > 1 THEN
                 CALL CHARBIN (I,
                   SUBSTR(UPPER_CASE_BUF, 1, REC_LEN - 1));
              IF FUNC = %FN_PLUS THEN
                 POSTN_REV.V.N# = I;
              ELSE DO;
                 POSTN_REV.V.N# = - (I);
                 /* If we're not at EOF, then back up one further */
                 IF NOT AT_EOF THEN
                    POSTN_REV.V.N# = POSTN_REV.V.N# - 1;
                 END;
              POSTN_REV.V.KEYS# = %FALSE;
              AT_EOF = %FALSE;
              CALL M$PRECORD (POSTN_REV)
                ALTRET (POSTN_REV_FAILED);
              OK_TO_READ = %TRUE;
              READ_REV.V.KEYS# = %FALSE;
 
 
            CASE (ELSE);
              CALL X$WRITE (FDS, VECTOR(INPUT_ERROR),
                VECTOR(CONS_0));
              READ_REV.V.KEYS# = %TRUE;
 
 
            END DO_FUNC;
 
           END RECORD_LOOP;
 
 
 
 
READ_REV_FAILED:
        ER_CODE_WORD = BITBIN (B$TCB$->B$TCB.ALT$->B$ALT.ERR);
        IF ER_CODE.ERR# = %E$LD THEN DO;
           CALL M$GDS (FPT_GDS);
           READ_REV.BUF_ = REV_BUF_;
           READ_REV.V.KEYS# = %TRUE;
           GOTO READ_REV_RECORD;
           END;
        FPT_ERRMSG.V.DCB# = DCBNUM (M$SI);
        CALL M$ERRMSG (FPT_ERRMSG);
        IF ER_CODE.ERR# = %E$NOKEY
          OR ER_CODE.ERR# = %E$BOF
          OR ER_CODE.ERR# = %E$EOF THEN DO;
           POSTN_REV.V.N# = 0;
           POSTN_REV.V.KEYS# = %FALSE;
           CALL M$PRECORD (POSTN_REV) /* Get key for where we are */
             WHENALTRETURN DO;
              ER_CODE_WORD = BITBIN (B$TCB$->B$TCB.ALT$->B$ALT.ERR);
              GOTO POSTN_REV_FAILED_INTERNALLY;
              END;
           IF KEY_REV.CNT = 0 THEN
              OK_TO_READ = %FALSE;
           ELSE
              OK_TO_READ = %TRUE;
           READ_REV.V.KEYS# = %TRUE;
           GOTO RECORD_LOOP;
           END;
        CALL M$ERR;
 
 
POSTN_REV_FAILED:
        ER_CODE_WORD = BITBIN (B$TCB$->B$TCB.ALT$->B$ALT.ERR);
        FPT_ERRMSG.V.DCB# = DCBNUM (M$SI);
        CALL M$ERRMSG (FPT_ERRMSG);
POSTN_REV_FAILED_INTERNALLY:
        IF ER_CODE.ERR# = %E$NOKEY
          OR ER_CODE.ERR# = %E$BOF THEN DO;
           OK_TO_READ = %TRUE;
           READ_REV.V.KEYS# = %FALSE;
           GOTO RECORD_LOOP;
           END;
        IF ER_CODE.ERR# = %E$EOF THEN DO;
           AT_EOF = %TRUE;
           OK_TO_READ = %FALSE;
           READ_REV.V.KEYS# = %TRUE;
           GOTO RECORD_LOOP;
           END;
        CALL M$ERR;
 
 
 
CLOSE_FILES:
        CALL M$CLOSE (CLOSE_REV);
        CALL M$EXIT;
 
%EJECT;
 
/****************************************/
/*                                      */
/*    Display Data in Octal and Char    */
/*                                      */
/****************************************/
 
 
DISP_DATA: PROC (KEY, DATA$, LENGTH);
DCL KEY BIT(1);
DCL DATA$ PTR;
DCL LENGTH UBIN;
 
 
DCL TITLE CHAR(0) CONSTANT INIT
    ('%A - (%D bytes)%N(  (as edit key: %D.%D)%)');
DCL KEY_STR CHAR(0) CONSTANT INIT('Key');
DCL DATA_STR CHAR(0) CONSTANT INIT('Data');
 
 
DCL CHAR_BUF CHAR(6);
DCL EDIT_KEY_CHARS CHAR(3) ALIGNED;
DCL EDIT_KEY REDEF EDIT_KEY_CHARS UBIN(27);
DCL EDIT_KEY_BUF CHAR(8);
DCL EDIT_KEY_INT UBIN;
DCL EDIT_KEY_FRACT UBIN;
DCL EDIT_KEY_INT_ VECTOR;
DCL EDIT_KEY_FRACT_ VECTOR;
DCL TYPE_ VECTOR;
DCL E_KEY_UBIN UBIN;
DCL DATA_INDX UBIN;
DCL SUB_INDX UBIN;
DCL LINE_COUNT UBIN;
DCL FMT_INDX UBIN;
DCL DATA_WORDS$ PTR;
DCL CHR CHAR(1);
 
 
DCL DATA CHAR(LENGTH) BASED(DATA$);
DCL DATA_WORDS CHAR(16) BASED(DATA_WORDS$);
 
 
        E_KEY_UBIN = 0;
        IF KEY THEN
           TYPE_ = VECTOR(KEY_STR);
        ELSE
           TYPE_ = VECTOR(DATA_STR);
        IF KEY AND LENGTH = 3 THEN DO;
           E_KEY_UBIN = 1;
           EDIT_KEY_CHARS = DATA;
           CALL BINCHAR (EDIT_KEY_BUF, EDIT_KEY);
           CALL CHARBIN (EDIT_KEY_INT, SUBSTR(EDIT_KEY_BUF, 0, 5));
           CALL CHARBIN (EDIT_KEY_FRACT, SUBSTR(EDIT_KEY_BUF, 5, 3));
           EDIT_KEY_INT_ = VECTOR(EDIT_KEY_INT);
           EDIT_KEY_FRACT_ = VECTOR(EDIT_KEY_FRACT);
           END;
        ELSE DO;
           EDIT_KEY_INT_ = VECTOR(NIL);
           EDIT_KEY_FRACT_ = VECTOR(NIL);
           END;
 
        CALL X$WRITE (FDS, VECTOR(TITLE),
          TYPE_, VECTOR(LENGTH),
          VECTOR(E_KEY_UBIN), EDIT_KEY_INT_, EDIT_KEY_FRACT_);
 
 
        /*                              */
        /*  Format each line of display */
        /*                              */
 
        DATA_INDX = 0;
        DO WHILE (DATA_INDX < LENGTH);
           CALL BINCHAR (CHAR_BUF, DATA_INDX / 4);
           CALL INSERT (IN_BUF, , , CHAR_BUF, ' ');
           FMT_INDX = 7;
 
           DATA_WORDS$ = PINCRC(DATA$, DATA_INDX);
           LINE_COUNT = MINIMUM (LENGTH - DATA_INDX, 16);
           SUB_INDX = 0;
           DO WHILE (SUB_INDX < LINE_COUNT);
              CALL INSERT (IN_BUF, FMT_INDX, 1, ' ');
              FMT_INDX = FMT_INDX + 1;
              CALL DISP_BYTE (SUBSTR(DATA_WORDS, SUB_INDX, 1));
              SUB_INDX = SUB_INDX + 1;
              IF SUB_INDX < LINE_COUNT THEN
                 CALL DISP_BYTE (SUBSTR (DATA_WORDS, SUB_INDX, 1));
              SUB_INDX = SUB_INDX + 1;
              IF SUB_INDX < LINE_COUNT THEN DO;
                 CALL INSERT (IN_BUF, FMT_INDX, 1, '.');
                 FMT_INDX = FMT_INDX + 1;
                 CALL DISP_BYTE (SUBSTR (DATA_WORDS, SUB_INDX, 1));
                 END;
              SUB_INDX = SUB_INDX + 1;
              IF SUB_INDX < LINE_COUNT THEN
                 CALL DISP_BYTE (SUBSTR (DATA_WORDS, SUB_INDX, 1));
              SUB_INDX = SUB_INDX + 1;
              END;
 
           SUB_INDX = 0;
           FMT_INDX = 64;
           DO WHILE (SUB_INDX < LINE_COUNT);
              CHR = SUBSTR (DATA_WORDS, SUB_INDX, 1);
              IF CHR < ' ' OR CHR > '~' THEN
                 CHR = '.';
              CALL INSERT (IN_BUF, FMT_INDX, 1, CHR);
              FMT_INDX = FMT_INDX + 1;
              SUB_INDX = SUB_INDX + 1;
              END;
 
           WRITE_IN.BUF_.BOUND = 79;
           CALL M$WRITE (WRITE_IN);
 
           DATA_INDX = DATA_INDX + 16;
           END;
 
        RETURN;
 
%EJECT;
 
/****************************************/
/*                                      */
/*            Display a Byte            */
/*                                      */
/****************************************/
 
 
DISP_BYTE: PROC (DATA);
DCL DATA UBIN BYTE UNAL;
 
 
DCL DATA_BYTE UBIN BYTE UNAL;
DCL TRYBL (0:2) REDEF DATA_BYTE UBIN(3) UNAL;
 
 
 
        DATA_BYTE = DATA;
 
        CALL BINCHAR (SUBSTR (IN_BUF, FMT_INDX, 1), TRYBL (0));
        CALL BINCHAR (SUBSTR (IN_BUF, FMT_INDX + 1, 1), TRYBL (1));
        CALL BINCHAR (SUBSTR (IN_BUF, FMT_INDX + 2, 1), TRYBL (2));
        FMT_INDX = FMT_INDX + 3;
        RETURN;
END DISP_BYTE;
 
END DISP_DATA;
%EJECT;
 
/***********************************/
/*                                 */
/*    Parse a character string     */
/*                                 */
/***********************************/
 
 
GET_CHAR_STRING: PROC (REC_INDEX, STR_BUF) ALTRET;
DCL REC_INDEX UBIN;
DCL 1 STR_BUF,
      2 CNT UBIN BYTE CALIGNED,
      2 TXT CHAR(255) CALIGNED;
 
 
        REC_INDEX = REC_INDEX + 1;  /* Skip initial quote */
        DO WHILE REC_INDEX < REC_LEN;
           CHR = SUBSTR (IN_BUF, REC_INDEX, 1);
           IF CHR = '''' THEN DO;
              REC_INDEX = REC_INDEX + 1;
              IF REC_INDEX >= REC_LEN
                OR SUBSTR(IN_BUF, REC_INDEX, 1) ~= '''' THEN
                 RETURN;
              END;
           CALL INSERT (STR_BUF.TXT, STR_BUF.CNT, 1, CHR);
           STR_BUF.CNT = STR_BUF.CNT + 1;
           REC_INDEX = REC_INDEX + 1;
           END;
 
        CALL X$WRITE (FDS, VECTOR(INPUT_ERROR), VECTOR(REC_INDEX));
        ALTRETURN;
 
END GET_CHAR_STRING;
%EJECT;
 
/***********************************/
/*                                 */
/*    Parse a decimal string       */
/*                                 */
/***********************************/
 
 
GET_DEC_STRING: PROC (REC_INDEX, STR_BUF) ALTRET;
DCL REC_INDEX UBIN;
DCL 1 STR_BUF,
      2 CNT UBIN BYTE CALIGNED,
      2 TXT CHAR(255) CALIGNED;
 
 
        RETURN;
 
END GET_DEC_STRING;
%EJECT;
 
/***********************************/
/*                                 */
/*    Parse an octal string        */
/*                                 */
/***********************************/
 
 
GET_OCT_STRING: PROC (REC_INDEX, STR_BUF) ALTRET;
DCL REC_INDEX UBIN;
DCL 1 STR_BUF,
      2 CNT UBIN BYTE CALIGNED,
      2 TXT CHAR(255) CALIGNED;
 
 
DCL END_SRC UBIN;
DCL CURR_SRC UBIN;
DCL CURR_DEST UBIN;
DCL TABLE_VAL UBIN;
DCL NUM_DIGITS UBIN;
DCL SUM UBIN;
DCL DIGIT UBIN;
 
 
 
        REC_INDEX = REC_INDEX + 1;  /* Skip period */
        CALL SEARCH (END_SRC, TABLE_VAL, NON_NUMERICS,
          SUBSTR(IN_BUF, 0, REC_LEN), REC_INDEX);
        NUM_DIGITS = (END_SRC - REC_INDEX + 2) / 3;
        STR_BUF.CNT = STR_BUF.CNT + NUM_DIGITS;
 
        CURR_DEST = STR_BUF.CNT - 1;
        CURR_SRC = END_SRC - 1;
        DO WHILE CURR_SRC >= REC_INDEX;
           SUM = 0;
           DIGIT = ASCBIN(SUBSTR(IN_BUF, CURR_SRC, 1));
           IF DIGIT > ASCBIN('7') THEN
              GOTO DIGIT_ERROR;
           SUM = BITBIN(BINBIT(DIGIT, 3));
           CURR_SRC = CURR_SRC - 1;
           IF CURR_SRC >= REC_INDEX THEN DO;
              DIGIT = ASCBIN(SUBSTR(IN_BUF, CURR_SRC, 1));
              IF DIGIT > ASCBIN('7') THEN
                 GOTO DIGIT_ERROR;
              SUM = SUM + (BITBIN(BINBIT(DIGIT, 3)) * 8);
              CURR_SRC = CURR_SRC - 1;
              IF CURR_SRC >= REC_INDEX THEN DO;
                 DIGIT = ASCBIN(SUBSTR(IN_BUF, CURR_SRC, 1));
                 IF DIGIT > ASCBIN('7') THEN
                    GOTO DIGIT_ERROR;
                 SUM = SUM + (BITBIN(BINBIT(DIGIT, 3)) * 64);
                 CURR_SRC = CURR_SRC - 1;
                 END;
              END;
           CALL INSERT (STR_BUF.TXT, CURR_DEST, 1, BINASC(SUM));
           CURR_DEST = CURR_DEST - 1;
           END;
 
        REC_INDEX = END_SRC;
        RETURN;
 
 
DIGIT_ERROR:
        CALL X$WRITE (FDS, VECTOR(INPUT_ERROR), VECTOR(CURR_SRC));
        ALTRETURN;
 
END GET_OCT_STRING;
%EJECT;
 
/***********************************/
/*                                 */
/*   Insert a string word-aligned  */
/*                                 */
/***********************************/
 
 
INSERT_WORD_STRING: PROC (STR_BUF, KEY_BUF) ALTRET;
DCL 1 STR_BUF,
      2 CNT UBIN BYTE CALIGNED,
      2 TXT CHAR(255) CALIGNED;
DCL 1 KEY_BUF,
      2 CNT UBIN BYTE CALIGNED,
      2 TXT CHAR(255) CALIGNED;
 
 
        RETURN;
 
END INSERT_WORD_STRING;
%EJECT;
 
/***********************************/
/*                                 */
/*   Insert a string byte-aligned  */
/*                                 */
/***********************************/
 
 
INSERT_BYTE_STRING: PROC (STR_BUF, KEY_BUF) ALTRET;
DCL 1 STR_BUF,
      2 CNT UBIN BYTE CALIGNED,
      2 TXT CHAR(255) CALIGNED;
DCL 1 KEY_BUF,
      2 CNT UBIN BYTE CALIGNED,
      2 TXT CHAR(255) CALIGNED;
 
 
        IF STR_BUF.CNT > 0 THEN
           CALL INSERT (KEY_BUF.TXT, KEY_BUF.CNT, ,
             SUBSTR(STR_BUF.TXT, 0, STR_BUF.CNT))
             WHENALTRETURN DO;
           CALL M$WRITE (WRT_KEY_TOO_LONG);
           ALTRETURN;
           END;
        KEY_BUF.CNT = KEY_BUF.CNT + STR_BUF.CNT;
        STR_BUF.CNT = 0;
 
        RETURN;
 
END INSERT_BYTE_STRING;
 
END REV_REC;
