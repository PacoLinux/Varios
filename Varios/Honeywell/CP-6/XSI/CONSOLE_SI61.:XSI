/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
CONSOLE: PROC MAIN;
 
      DCL FPRG_BUFFER                  CHAR(255) STATIC SYMDEF INIT(' ');
      DCL UC_BUFFER                    CHAR(255) STATIC SYMDEF;
      DCL ME_BUFFER                    CHAR(255) STATIC SYMDEF;
 
      DCL WORK                         CHAR(512) STATIC;
      DCL PROMPT                       CHAR(30)  STATIC;
      DCL ONE_SHOT                     BIT(1)    STATIC SYMDEF ALIGNED;
 
      DCL 1 LOGON                      STATIC,
            2 *                        CHAR(1)   INIT('3'),
            2 NAME                     CHAR(8)   INIT('        '),
            2 COMMAS                   CHAR(2)   INIT('  '),
            2 PASS                     CHAR(8)   INIT('        ');
 
      DCL 1 ONE_BUFFER                 STATIC,
            2 *                        CHAR(1)   INIT('1'),
            2 BUF                      CHAR(250);
 
      DCL DEFAULT_NAME                 CHAR(8)   CONSTANT SYMDEF INIT(' ');
      DCL DEFAULT_PASS                 CHAR(8)   CONSTANT SYMDEF INIT(' ');
      DCL DEFAULT_FEP                  SBIN      CONSTANT SYMDEF INIT(-1);
 
      DCL I                            SBIN;
 
      DCL B$JIT$                       PTR       SYMREF;
      DCL CONSOLE_CMD                  BIT(36)   SYMREF;
      DCL CONSOLE_CMD2                 BIT(36)   SYMREF;
 
      DCL M$FPRG                       DCB;
      DCL M$ME                         DCB;
      DCL M$LM                         DCB;
 
      DCL X$PARSE                      ENTRY(1)  ALTRET;
      DCL CONSOLE_EVENT                ENTRY     ASYNC;
      DCL CONSOLE_BREAK                ENTRY     ASYNC;
 
      %INCLUDE CP_6;
      %INCLUDE B$JIT;
      %INCLUDE B_ERRORS_C;
      %INCLUDE XU_MACRO_C;
      %INCLUDE XU_PERR_C;
      %INCLUDE CONSOLE_C61;
 
      %F$DCB;
 
      %VLP_FPRG (NAME='CONSOLE_FPRG');
 
      %FPT_OPEN (FPTN=FPRG_OPEN,
                 ORG=FPRG,
                 RES='FE??',
                 FUN=CREATE,
                 FPRG=VLP_FPRG,
                 DCB=M$FPRG);
 
      %FPT_READ (FPTN=FPRG_READ,
                 BUF=FPRG_BUFFER,
                 WAIT=NO,
                 EVENT=%EVID_FPRG#,
                 STCLASS="STATIC SYMDEF",
                 DCB=M$FPRG);
 
      %FPT_WRITE (FPTN=FPRG_WRITE,
                  DCB=M$FPRG);
 
      %FPT_CLOSE (FPTN=FPRG_CLOSE,
                  DISP=RELEASE,
                  DCB=M$FPRG);
 
      %FPT_READ (FPTN=UC_READ,
                 BUF=UC_BUFFER,
                 WAIT=NO,
                 EVENT=%EVID_UC#,
                 STCLASS="STATIC SYMDEF",
                 DCB=M$UC);
 
      %FPT_READ (FPTN=ME_READ,
                 BUF=ME_BUFFER,
                 DCB=M$ME);
 
      %FPT_WRITE (FPTN=ME_WRITE,
                  BUF=ME_BUFFER,
                  STCLASS="STATIC SYMDEF",
                  DCB=M$ME);
 
      %VLR_NODEINFO;
      %FPT_NODEINFO (NODEINFO=VLR_NODEINFO);
 
      %FPT_EVENT (UENTRY=CONSOLE_EVENT);
      %FPT_EOM (TIMEOUT=30);
 
      %FPT_WAIT (UNITS=5);
      %FPT_PROMPT;
 
      %P_PCB (R=CONSOLE_CMD,
              W=WORK,
              WSZ="SIZEW(WORK)");
 
      %PARSE$OUT (STCLASS="BASED (P_PCB.OUT$)");
      %PARSE$SYM (STCLASS="BASED (P_PCB.OUT$)");
 
%EJECT;
      P_PCB.TEXT$ = ADDR(B$JIT.CCBUF);
      P_PCB.NCHARS = B$JIT.CCARS;
PARSE_IT:
      CALL X$PARSE (P_PCB) ALTRET (BAD_PARSE);
 
      LOGON.NAME = DEFAULT_NAME;
      LOGON.PASS = DEFAULT_PASS;
      IF LOGON.PASS ~= ' ' THEN LOGON.COMMAS = ',,';
      ONE_SHOT = '0'B;
 
      DO I = 0 TO OUT$BLK.NSUBLKS - 1;
         DO CASE (OUT$BLK.SUBLK$(I)->OUT$BLK.CODE);
            CASE (%NAME#);
               LOGON.PASS = ' ';
               LOGON.COMMAS = ' ';
               LOGON.NAME = SUBSTR(OUT$BLK.SUBLK$(I)->OUT$SYM.TEXT,0,
                                   OUT$BLK.SUBLK$(I)->OUT$SYM.COUNT);
            CASE (%PASS#);
               LOGON.COMMAS = ',,';
               LOGON.PASS = SUBSTR(OUT$BLK.SUBLK$(I)->OUT$SYM.TEXT,0,
                                   OUT$BLK.SUBLK$(I)->OUT$SYM.COUNT);
            CASE (%KEYIN#);
               ONE_BUFFER.BUF = SUBSTR(OUT$BLK.SUBLK$(I)->OUT$SYM.TEXT,0,
                                       OUT$BLK.SUBLK$(I)->OUT$SYM.COUNT);
               IF ONE_BUFFER.BUF = ' ' THEN
                  DO;
                     PROMPT = 'Logon?';
                     FPT_PROMPT.PROMPT_ = VECTOR(SUBSTR(PROMPT,0,7));
                     CALL M$PROMPT (FPT_PROMPT);
                     ME_BUFFER = ' ';
                     CALL M$READ (ME_READ);
                     P_PCB.ROOT$ = ADDR(CONSOLE_CMD2);
                     P_PCB.TEXT$ = ADDR(ME_BUFFER);
                     P_PCB.NCHARS = DCBADDR(DCBNUM(M$ME))->F$DCB.ARS#;
                     GOTO PARSE_IT;
                     END;
               ONE_SHOT = '1'B;
            END;
         END;
 
      IF DEFAULT_FEP ~= -1 THEN
         CALL BINCHAR(SUBSTR(FPRG_OPEN.V.RES#,2,2), DEFAULT_FEP);
      ELSE
         IF B$JIT.MODE = %M_INT# THEN
            DO;
               FPT_NODEINFO.V.NODENUM# = B$JIT.TSLINE.FEX;
               CALL M$NODEINFO (FPT_NODEINFO);
               CALL BINCHAR(SUBSTR(FPRG_OPEN.V.RES#,2,2), VLR_NODEINFO.LINKNODENUM#);
               END;
         ELSE
FIND:       DO;
               DO I = 0 TO 511;
                  FPT_NODEINFO.V.NODENUM# = I;
                  CALL M$NODEINFO (FPT_NODEINFO) ALTRET (NEXT);
                  IF ~VLR_NODEINFO.HOST# AND VLR_NODEINFO.ACTIVE# AND VLR_NODEINFO.LINKCONNECTED# THEN
                     DO;
                        CALL BINCHAR(SUBSTR(FPRG_OPEN.V.RES#,2,2), I);
                        EXIT FIND;
                        END;
NEXT:             END;
               ME_BUFFER = 'Can''t find a running fep';
               CALL M$WRITE (ME_WRITE);
               CALL M$EXIT;
               END;
 
%EJECT;
      PROMPT = 'bang!';
      FPT_PROMPT.PROMPT_ = VECTOR(SUBSTR(PROMPT,0,LENGTHC('bang!')));
      CALL M$PROMPT (FPT_PROMPT);
 
      CALL M$EVENT (FPT_EVENT);
 
      VLP_FPRG.ACCT# = DCBADDR(DCBNUM(M$LM))->F$DCB.ACCT#;
      CALL M$OPEN (FPRG_OPEN);
 
      CALL M$READ (FPRG_READ);
 
      IF ONE_SHOT THEN
         DO;
            FPRG_WRITE.BUF_ = VECTOR(ONE_BUFFER);
            CALL M$WRITE (FPRG_WRITE);
            END;
 
      FPRG_WRITE.BUF_ = VECTOR(LOGON);
      CALL M$WRITE (FPRG_WRITE);
 
      IF NOT ONE_SHOT THEN
         DO;
            CALL M$EOM (FPT_EOM);
            CALL M$READ (UC_READ);
            END;
 
      DO WHILE ('1'B);
         CALL M$WAIT (FPT_WAIT);
         END;
 
BAD_PARSE:
      IF P_PCB.ERROR.CODE = %E$SYNERR THEN
         DO;
            ME_BUFFER = 'Syntax: CONSOLE [name[,,pass]] [(keyin)]';
            CALL M$WRITE (ME_WRITE);
            END;
      ELSE
         DO;
            ME_BUFFER = 'Unexpected altret from parse';
            CALL M$WRITE (ME_WRITE);
            END;
 
      CALL M$EXIT;
 
END CONSOLE;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
CONSOLE_EVENT: PROC ASYNC;
 
      DCL FPRG_BUFFER                  CHAR(255) SYMREF;
      DCL UC_BUFFER                    CHAR(255) SYMREF;
      DCL ME_BUFFER                    CHAR(255) SYMREF;
      DCL ONE_SHOT                     BIT(1)    SYMREF ALIGNED;
 
      DCL B$TCB$                       PTR       SYMREF;
 
      DCL M$FPRG                       DCB;
      DCL M$LO                         DCB;
 
      %INCLUDE CP_6;
      %INCLUDE B_ERRORS_C;
      %INCLUDE CONSOLE_C61;
 
      %B$TCB;
      %B$NWIO;
 
      %FPT_READ (FPTN=FPRG_READ,
                 STCLASS=SYMREF);
 
      %FPT_READ (FPTN=UC_READ,
                 STCLASS=SYMREF);
 
      %FPT_TRMPRG (FPTN=UC_ABORT,
                   ABORTREAD=YES,
                   DCB=M$UC);
 
      %FPT_WRITE (FPTN=FPRG_WRITE,
                  DCB=M$FPRG);
 
      %FPT_WRITE (FPTN=LO_WRITE,
                  BUF=FPRG_BUFFER,
                  DCB=M$LO);
 
      %FPT_WRITE (FPTN=ME_WRITE,
                  STCLASS=SYMREF);
 
      %FPT_EVENT (UENTRY=NIL);
      %FPT_CLRSTK (FRAMES=99);
 
      IF B$TCB$->B$TCB.STK$->B$NWIO.EVID = %EVID_FPRG# THEN
         DO;
            IF SUBSTR(FPRG_BUFFER,0,4) = 'ERR:' THEN
               DO;
/*                CALL M$EVENT (FPT_EVENT);*/
                  LO_WRITE.BUF_ = VECTOR(SUBSTR(FPRG_BUFFER,4));
                  CALL M$WRITE (LO_WRITE);
                  CALL M$TRMPRG (UC_ABORT);
END_IT:           CALL M$EXIT;
                  END;
 
            IF ONE_SHOT THEN CALL M$EXIT;
 
            CALL M$WRITE (LO_WRITE);
            FPRG_BUFFER = ' ';
            CALL M$READ (FPRG_READ);
            END;
      ELSE
      IF B$TCB$->B$TCB.STK$->B$NWIO.EVID = %EVID_UC# THEN
         DO;
            IF B$TCB$->B$TCB.STK$->B$NWIO.ERR.ERR# = %E$TIMO THEN GOTO READ;
            IF B$TCB$->B$TCB.STK$->B$NWIO.ERR.ERR# = %E$EOF THEN CALL M$EXIT;
            IF B$TCB$->B$TCB.STK$->B$NWIO.ERR.ERR# ~= 0 THEN CALL M$MERCS;
            IF B$TCB$->B$TCB.STK$->B$NWIO.ARS = 0 THEN GOTO READ;
            FPRG_WRITE.BUF_ = VECTOR(SUBSTR(UC_BUFFER,0,
                                     B$TCB$->B$TCB.STK$->B$NWIO.ARS));
            CALL M$WRITE (FPRG_WRITE);
READ:       UC_BUFFER = ' ';
            CALL M$READ (UC_READ);
            END;
      ELSE
         DO;
            ME_BUFFER = 'HOST Event id error';
            CALL M$WRITE (ME_WRITE);
            END;
 
END CONSOLE_EVENT;
