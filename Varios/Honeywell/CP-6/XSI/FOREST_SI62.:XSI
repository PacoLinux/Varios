/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
OPTIONS: PROC (NACCOUNT, CACCOUNT, CALL_TREE, SIZES, WHO_CALLS_WHO,
   WHO_WHO_CALLS, NAMES, RECURSIVE, OVERLAY);
 
   %INCLUDE CP_6;
   %INCLUDE FOREST_C62;
 
   %INCLUDE XU_MACRO_C;
   %INCLUDE XU_SUBS_C;
   %INCLUDE B$JIT;
 
   %MACRO STRING_VARIABLE (NAME=WHAT_NAME, MAXIMUM_LENGTH=140, STCLASS=" ");
      DCL 1 NAME UNAL STCLASS,
         2  SIZE           SBIN,
         2  STRING         CHAR (MAXIMUM_LENGTH);
   %MEND;
 
   %MACRO STRING_CONSTANT (NAME=WHAT_NAME,VALUE=WHAT_VALUE);
      DCL 1 NAME UNAL CONSTANT,
         2  SIZE              SBIN INIT (%LENGTHC (VALUE)),
         2  STRING            CHAR (0) INIT (VALUE);
   %MEND;
 
   %STRING_CONSTANT (NAME=SYNTAX_ERROR,VALUE="'Syntax error in option list.'");
   %STRING_CONSTANT (NAME=TOO_MANY,VALUE="'Only 8 search accounts may be specified.'");
   %STRING_CONSTANT (NAME=TRAP_1,VALUE="'Trap #1 in OPTIONS.'");
 
 
   %PARSE$OUT (NAME=MY$OUT, STCLASS=BASED);
   %PARSE$SYM (NAME=MY$SYM, STCLASS=BASED);
   %STRING_VARIABLE (NAME=NUMBER, MAXIMUM_LENGTH=8);
 
   DCL X$PARSE                   ENTRY(1) ALTRET;
 
   DCL B$JIT$           PTR SYMREF;
   DCL OPTION_SYNTAX    BIT (1) SYMREF;
   DCL I                SBIN;
   DCL J                SBIN;
   DCL K                SBIN;
   DCL P$               PTR;
   DCL NACCOUNT         SBIN;
   DCL CACCOUNT (0:7)   CHAR (8);
   DCL CALL_TREE        BIT (1);
   DCL SIZES            BIT (1);
   DCL WHO_CALLS_WHO    BIT (1);
   DCL WHO_WHO_CALLS    BIT (1);
   DCL NAMES            BIT (1);
   DCL RECURSIVE        BIT (1);
   DCL OVERLAY          BIT (1);
 
   %P_PCB (NAME=PCB, W=WORK, R=OPTION_SYNTAX, STCLASS=STATIC);
   DCL WORK             (0:300) UBIN WORD STATIC;
   %STRING_VARIABLE (NAME=LINE,MAXIMUM_LENGTH=300,STCLASS=STATIC);
   DCL TOO_MANY_ACCOUNTS BIT (1) STATIC;
 
   WRITE_TO_M$DO_AND_M$LO: PROC (BUFFER);
 
      DCL 1 BUFFER,
            2  SIZE        SBIN WORD,
            2  STRING      CHAR (BUFFER.SIZE);
      DCL M$LO                         DCB;
      DCL M$DO                         DCB;
      DCL B$JIT$                       PTR SYMREF;
 
      %FPT_CORRES (DCB1=M$LO, DCB2=M$DO, STCLASS=CONSTANT);
      %FPT_WRITE;
 
      %SUB PRINT_ON_M$LO   =  "B$JIT$ -> B$JIT.PRFLAGS.LIST";
      %SUB PRINT_ON_M$DO   =  "B$JIT$ -> B$JIT.PRFLAGS.COMMENT";
 
      FPT_WRITE.BUF_ = VECTOR (BUFFER.STRING);
      IF PRINT_ON_M$LO AND PRINT_ON_M$DO THEN DO;
         CALL M$CORRES (FPT_CORRES) ALTRET (THE_SAME);
         FPT_WRITE.V.DCB# = DCBNUM (M$LO);
         CALL M$WRITE (FPT_WRITE) ALTRET (IOERROR);
         FPT_WRITE.V.DCB# = DCBNUM (M$DO);
         CALL M$WRITE (FPT_WRITE) ALTRET (IOERROR);
         RETURN;
         END;
 
   THE_SAME:
      IF PRINT_ON_M$LO THEN DO;
         FPT_WRITE.V.DCB# = DCBNUM (M$LO);
         CALL M$WRITE (FPT_WRITE) ALTRET (IOERROR);
         END;
      ELSE IF PRINT_ON_M$DO THEN DO;
         FPT_WRITE.V.DCB# = DCBNUM (M$DO);
         CALL M$WRITE (FPT_WRITE) ALTRET (IOERROR);
         END;
      ELSE     /* Don't print the message at all */
        RETURN;
   IOERROR:
   END WRITE_TO_M$DO_AND_M$LO;
 
   DISPLAY_AND_MARK_POSITION: PROC (COLUMN);
      DCL COLUMN                    SBIN;
 
      CALL WRITE_TO_M$DO_AND_M$LO (LINE);
      LINE.STRING = ' ';
      CALL INSERT (LINE.STRING, COLUMN, 1, '^');
      LINE.SIZE = COLUMN + 3;
      CALL WRITE_TO_M$DO_AND_M$LO (LINE);
   END DISPLAY_AND_MARK_POSITION;
 
   NACCOUNT = 0;
   IF B$JIT.CCDISP = B$JIT.CCARS THEN DO; RETURN; END;
   TOO_MANY_ACCOUNTS = '0'B;
   PCB.WKSZ = LENGTHW (WORK);
   LINE.SIZE = LENGTHC (SUBSTR (B$JIT.CCBUF, B$JIT.CCDISP, B$JIT.CCARS - B$JIT.CCDISP));
   LINE.STRING = SUBSTR (B$JIT.CCBUF, B$JIT.CCDISP, LINE.SIZE);
   PCB.TEXT$ = ADDR (LINE.STRING);
   PCB.NCHARS = LINE.SIZE;
   CALL X$PARSE (PCB) ALTRET (Ouch);
   K = PCB.OUT$ -> MY$OUT.NSUBLKS - 1;
   DO J = 0 TO K;
      P$ = PCB.OUT$ -> MY$OUT.SUBLK$ (J);
      DO CASE (P$ -> MY$OUT.CODE);
         CASE (%Search_Option#);
            IF NACCOUNT >= 8 THEN DO;
               TOO_MANY_ACCOUNTS = '1'B;
            END; ELSE DO;
               CACCOUNT (NACCOUNT) = P$ -> MY$SYM.TEXT;
               NACCOUNT = NACCOUNT + 1;
            END;
 
         CASE (%No_Call_Tree#);
            CALL_TREE = '0'B;
 
         CASE (%Call_Tree#);
            CALL_TREE = '1'B;
 
         CASE (%No_Sizes#);
            SIZES = '0'B;
 
         CASE (%Sizes#);
            SIZES = '1'B;
 
         CASE (%No_Who_Calls_Who#);
            WHO_CALLS_WHO = '0'B;
 
         CASE (%Who_Calls_Who#);
            WHO_CALLS_WHO = '1'B;
 
         CASE (%No_Who_Who_Calls#);
            WHO_WHO_CALLS = '0'B;
 
         CASE (%Who_Who_Calls#);
            WHO_WHO_CALLS = '1'B;
 
         CASE (%No_Names#);
            NAMES = '0'B;
 
         CASE (%Names#);
            NAMES = '1'B;
 
         CASE (%No_Recursive#);
            RECURSIVE = '0'B;
 
         CASE (%Recursive#);
            RECURSIVE = '1'B;
 
         CASE (%No_Overlay#);
            OVERLAY = '0'B;
 
         CASE (%Overlay#);
            OVERLAY = '1'B;
 
         CASE (ELSE);
            CALL WRITE_TO_M$DO_AND_M$LO (TRAP_1);
            CALL M$XXX;
      END;
   END;
   IF TOO_MANY_ACCOUNTS THEN DO;
      CALL WRITE_TO_M$DO_AND_M$LO (TOO_MANY);
      CALL M$ERR;
   END;
   RETURN;
 
Ouch:
   I = PCB.HI_CHAR;
   CALL DISPLAY_AND_MARK_POSITION (I);
   CALL WRITE_TO_M$DO_AND_M$LO (SYNTAX_ERROR);
   CALL M$ERR;
END OPTIONS;
