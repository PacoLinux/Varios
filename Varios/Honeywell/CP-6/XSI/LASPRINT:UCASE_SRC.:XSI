UCase:   Proc (Source, Dest1, SLen1, DLen1)
         Materialize ($PR1 in Desc_List$, $PR7 in Pseudo$);
/*
       UCASE is a Fortran function of variable length that translates data
         into upper case from lower case.  Non-alphabetics are left alone,
         except that parity is always stripped.
       UCASE may be called in any of three formats:
 
         1) As a Fortran Function of type Character.  In this case, the calling
            sequence should look like:
 
               CHARACTER UCASE*nn, CHARVAR1*mm, CHARVAR2*ll . . .
               EXTERNAL UCASE
                .
                .
               CHARVAR2 = UCASE(CHARVAR1)
 
            Lowercase alphabetic characters in CHARVAR1 are converted to upper-
            case, and the result is stored in CHARVAR2.
 
         2) As a Subroutine from Fortran or PL6 (with CONV(0) call) programs.
            In this case, the calling sequence should look like:
 
               CHARACTER CHARVAR1*nn, CHARVAR2*mm
                .
                .
               CALL UCASE (CHARVAR1, CHARVAR2)
 
            Lowercase alphabetic characters in CHARVAR1 are converted to upper-
            case, and the result is stored in CHARVAR2.
 
         3) As a Subroutine from any language; the only constraint is that the
            calling routine must provide an argument count passed via PR1 (sort
            of a degenerate Descriptor List).  In this case, the calling seq-
            uence should be:
 
               CALL UCASE (CHARVAR1, CHARVAR2, LEN1 [, LEN2])
 
            Lowercase alphabetic characters in CHARVAR1 are converted to upper-
            case, and the result is stored in CHARVAR2.  LEN1 specifies the
            length of the source string, and LEN2 the length of the destination;
            if LEN2 is omitted, the value of LEN1 is assumed.  (LEN1 and LEN2
            must be UBIN(36) values, e.g. Fortran Integer or COBOL COMP6.)
            (Note: this call provides the fastest interface; if speed is an
            important consideration, use this calling format.)
 
       In all cases, the source string will be truncated or padded with blanks
       to fit the size of the destination string.  All parity bits are stripped
       by this routine; the translation table is such that the first 128 Ascii
       characters are repeated four times to make up a 512 byte table.
 
       Andrew E. Birner, 25 Jul, '84
       Modified 04 Nov, '87 to put in the standard Get_Arg_Len call.
*/
%EJECT;
/*
**       Parameters --
*/
       Dcl Source Param Char (S_Len);
       Dcl Dest1  Param Char (D_Len);
       Dcl SLen1  Param Ubin;
       Dcl DLen1  Param Ubin;
/*
**       Materialized Pointers --
*/
       Dcl Desc_List$ Ptr;
       Dcl Pseudo$ Ptr;
/*
**       Based Destination String and String Lengths
*/
       DCL DEST CHAR(D_LEN) BASED (DEST$);
       DCL DEST$ PTR STATIC;
 
       DCL S_LEN UBIN;
       DCL D_LEN UBIN;
/*
**       Misc. storage --
*/
       DCL UBINWORD UBIN WORD BASED;
/*
**       Monitor stuff --
*/
       %CP6$Ents;
%Eject;
/*
**       Stuff for figuring out argument counts and lengths...
*/
       %Include B$OBJECT_C;
       %B$Desc_List (Gen_Ext=Yes, StClass="Based (Desc_List$)");
       Dcl  Get_Arg_Len  Entry (4)  AltRet;
%Eject;
/*
**       Array of bytes for use in translation --
*/
       DCL LC_TO_UC_XLATE_TABLE (0:511) UBIN BYTE CONSTANT CALIGNED INIT (
/******    High-order bits '00'B:    ******/
         000,001,002,003,004,005,006,007,008,009,010,011,012,013,014,015,
         016,017,018,019,020,021,022,023,024,025,026,027,028,029,030,031,
         032,033,034,035,036,037,038,039,040,041,042,043,044,045,046,047,
         048,049,050,051,052,053,054,055,056,057,058,059,060,061,062,063,
         064,
/*UC*/       065,066,067,068,069,070,071,072,073,074,075,076,077,078,079,
         080,081,082,083,084,085,086,087,088,089,090,
                                                     091,092,093,094,095,
         096,
/*LC*/       065,066,067,068,069,070,071,072,073,074,075,076,077,078,079,
         080,081,082,083,084,085,086,087,088,089,090,
                                                     123,124,125,126,127,
/******    High-order bits '01'B:    ******/
         000,001,002,003,004,005,006,007,008,009,010,011,012,013,014,015,
         016,017,018,019,020,021,022,023,024,025,026,027,028,029,030,031,
         032,033,034,035,036,037,038,039,040,041,042,043,044,045,046,047,
         048,049,050,051,052,053,054,055,056,057,058,059,060,061,062,063,
         064,
/*UC*/       065,066,067,068,069,070,071,072,073,074,075,076,077,078,079,
         080,081,082,083,084,085,086,087,088,089,090,
                                                     091,092,093,094,095,
         096,
/*LC*/       065,066,067,068,069,070,071,072,073,074,075,076,077,078,079,
         080,081,082,083,084,085,086,087,088,089,090,
                                                     123,124,125,126,127,
/******    High-order bits '10'B:    ******/
         000,001,002,003,004,005,006,007,008,009,010,011,012,013,014,015,
         016,017,018,019,020,021,022,023,024,025,026,027,028,029,030,031,
         032,033,034,035,036,037,038,039,040,041,042,043,044,045,046,047,
         048,049,050,051,052,053,054,055,056,057,058,059,060,061,062,063,
         064,
/*UC*/       065,066,067,068,069,070,071,072,073,074,075,076,077,078,079,
         080,081,082,083,084,085,086,087,088,089,090,
                                                     091,092,093,094,095,
         096,
/*LC*/       065,066,067,068,069,070,071,072,073,074,075,076,077,078,079,
         080,081,082,083,084,085,086,087,088,089,090,
                                                     123,124,125,126,127,
/******    High-order bits '11'B:    ******/
         000,001,002,003,004,005,006,007,008,009,010,011,012,013,014,015,
         016,017,018,019,020,021,022,023,024,025,026,027,028,029,030,031,
         032,033,034,035,036,037,038,039,040,041,042,043,044,045,046,047,
         048,049,050,051,052,053,054,055,056,057,058,059,060,061,062,063,
         064,
/*UC*/       065,066,067,068,069,070,071,072,073,074,075,076,077,078,079,
         080,081,082,083,084,085,086,087,088,089,090,
                                                     091,092,093,094,095,
         096,
/*LC*/       065,066,067,068,069,070,071,072,073,074,075,076,077,078,079,
         080,081,082,083,084,085,086,087,088,089,090,
                                                     123,124,125,126,127 );
%Eject;
Start:;
/*
**       Number of arguments determines the calling sequence --
**         (This assumes that we have a valid descriptor list!)
*/
       Do  Case (B$Desc_List.Number_of_Args);
 
         Case (1);   /* Called as a Fortran Function */
           DEST$ = PSEUDO$;
           D_LEN = PINCRW(PSEUDO$, -1)->UBINWORD;
           Call  Get_Arg_Len  (Desc_List$, 1, S_Len)  WhenAltReturn Do;
             Call  M$XXX;
           End;
 
         Case (2);   /* Called as a Subroutine, w/ lengths in Desc. List */
           DEST$ = ADDR(DEST1);
           Call  Get_Arg_Len  (Desc_List$, 1, S_Len)  WhenAltReturn Do;
             Call  M$XXX;
           End;
           Call  Get_Arg_Len  (Desc_List$, 2, D_Len)  WhenAltReturn Do;
             Call  M$XXX;
           End;
 
         Case (3);   /* Called as a Subroutine, with one length argument */
           DEST$ = ADDR(DEST1);
           S_LEN = SLEN1;
           D_LEN = SLEN1;
 
         Case (4);   /* Called as a Subroutine, with two length arguments */
           DEST$ = ADDR(DEST1);
           S_LEN = SLEN1;
           D_LEN = DLEN1;
 
         Case (Else);/* Bad calling sequence; let's abort! */
           Call  M$XXX;
 
       End;
/*
**       Do the actual translation, then return --
*/
       Call  Xlate  (Dest, LC_to_UC_Xlate_Table, Source) WhenAltReturn Do; End;
       Return;
End    UCase;
