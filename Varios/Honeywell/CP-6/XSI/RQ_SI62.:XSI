/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
L$INIT: PROC( GREETING_, PC, CMD_DISP, CMD_LEN )  ALTRET;
DCL GREETING_                BIT(72)   DALIGNED;
DCL PC                       CHAR(1);
DCL CMD_DISP                 UBIN;
DCL CMD_LEN                  SBIN;
 
%INCLUDE B$JIT;
%INCLUDE CP_6;
%INCLUDE CP_6_SUBS;
 
%SUB NO='0'B;
%SUB YES='1'B;
 
%FPT_OPEN   (FPTN=OPEN_ME,     /* Open M$ME */
             ASN=DEVICE,
             DCB=M$ME,
             RES='ME  ');
%FPT_OPEN   (FPTN=OPEN_LO,     /* Open M$LO */
             DCB=M$LO,
             FUN=CREATE);
%FPT_OPEN   (FPTN=OPEN_SI,     /* Open M$SI */
             DCB=M$SI,
             FUN=IN);
%FPT_OPEN   (FPTN=OPEN_DO,     /* Open M$DO */
             DCB=M$DO,
             EXIST=OLDFILE,
             FUN=CREATE);
%EJECT;
%FPT_WRITE  (FPTN=WRITE_ME,
             DCB=M$ME);
%FPT_INT    (FPTN=BREAK_CNTRL,
             UENTRY=L$BREAK);
%FPT_PROMPT (FPTN=SET_PROMPT,
             PROMPT=PROMPT_CHAR);
 
%F$DCB;
%EJECT;
DCL L$BREAK                  ENTRY     ASYNC;
DCL L$CORRES                 ENTRY(3);
DCL L$MONERR                 ENTRY;
 
DCL M$DO                     DCB;
DCL M$LO                     DCB;
DCL M$ME                     DCB;
DCL M$SI                     DCB;
 
DCL B$JIT$                   PTR              SYMREF;
DCL M$DO$                    PTR       STATIC SYMDEF;
DCL M$LO$                    PTR       STATIC SYMDEF;
DCL M$ME$                    PTR       STATIC SYMDEF;
DCL M$SI$                    PTR       STATIC SYMDEF;
 
DCL M$DO#                    UBIN      STATIC SYMDEF;
DCL M$LO#                    UBIN      STATIC SYMDEF;
 
DCL BROKEN                   UBIN      STATIC SYMDEF INIT(0);
DCL LO_WIDTH                 UBIN      STATIC SYMDEF INIT(80);
 
DCL PROMPT_CHAR              CHAR(1)   STATIC SYMDEF INIT('*');
 
DCL LONEME                   BIT(1)    STATIC SYMDEF;
DCL LONESI                   BIT(1)    STATIC SYMDEF;
DCL DONELO                   BIT(1)    STATIC SYMDEF;
DCL DONESI                   BIT(1)    STATIC SYMDEF;
DCL MENESI                   BIT(1)    STATIC SYMDEF;
%EJECT;
    M$DO#= DCBNUM(M$DO);
    M$LO#= DCBNUM(M$LO);
    M$DO$= DCBADDR(M$DO#);
    M$LO$= DCBADDR(M$LO#);
    M$SI$= DCBADDR(DCBNUM(M$SI));
    CALL M$OPEN( OPEN_ME )  ALTRET( OH_SHITIE );
 
    IF ADDR(CMD_DISP) ~= ADDR(NIL) THEN DO;    /* Should we locate options in */
         CALL INDEX1(CMD_DISP,'(',B$JIT.CCBUF);                      /* CCBUF */
         CMD_DISP= CMD_DISP + 1;
         IF CMD_DISP < LENGTHC(B$JIT.CCBUF) THEN DO;
              CMD_LEN= B$JIT.CCARS - CMD_DISP;      /* Don't count '(' */
              IF SUBSTR(B$JIT.CCBUF,B$JIT.CCARS-1,1) = ')' THEN
                   CMD_LEN= CMD_LEN - 1;            /* nor ')'         */
              IF SUBSTR(B$JIT.CCBUF,CMD_DISP,CMD_LEN) = ' ' THEN
                   CMD_LEN= 0;
              END;
         ELSE CMD_LEN= -1;                          /* No '(' in CCBUF */
         END;
 
    IF B$JIT.MODE ~= %M_BATCH# THEN DO;               /* Online, Ghost or TP? */
         WRITE_ME.BUF_= GREETING_;
         IF GREETING_ ~= VECTOR(NIL) THEN
              IF ADDR(CMD_DISP) ~= ADDR(NIL) THEN
                   IF CMD_LEN < 0  THEN
                        CALL M$WRITE( WRITE_ME );
                   ELSE;
              ELSE CALL M$WRITE( WRITE_ME );
         CALL M$INT( BREAK_CNTRL );                   /* Take break control   */
         PROMPT_CHAR= PC;
         CALL M$PROMPT(SET_PROMPT);                   /* Set prompt character */
         END;
 
    IF NOT M$LO$->F$DCB.FCD# THEN
         CALL M$OPEN( OPEN_LO )  ALTRET( OH_SHITIE ); /* Open M$LO            */
    IF NOT M$SI$->F$DCB.FCD# THEN
         CALL M$OPEN( OPEN_SI )  ALTRET( OH_SHITIE ); /* Open M$SI            */
    IF NOT M$DO$->F$DCB.FCD# THEN
         CALL M$OPEN( OPEN_DO )  ALTRET( OH_SHITIE ); /* Open M$DO            */
 
    CALL L$CORRES( M$LO#, DCBNUM(M$ME), LONEME );         /* M$LO = M$ME?     */
    CALL L$CORRES( M$LO#, DCBNUM(M$SI), LONESI );         /* M$LO = M$SI?     */
    CALL L$CORRES( M$DO#, M$LO#, DONELO );                /* M$DO = M$LO?     */
    CALL L$CORRES( M$DO#, DCBNUM(M$SI), DONESI );         /* M$DO = M$SI?     */
    CALL L$CORRES( DCBNUM(M$ME), DCBNUM(M$SI), MENESI );  /* M$ME = M$SI?     */
 
    IF M$LO$->F$DCB.WIDTH# > 0 THEN
         LO_WIDTH= M$LO$->F$DCB.WIDTH#;
    ELSE LO_WIDTH= 132;
 
C_YA:
    RETURN;
 
OH_SHITIE:
    CALL L$MONERR;
 
END L$INIT;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
L$WRITE: PROC( BUF,SIZ,DCB#,DVFC,DCB2#,ECHO );
DCL BUF                      CHAR(SIZ);
DCL SIZ                      UBIN;
DCL DCB#                     UBIN;
DCL DVFC                     CHAR(1);  /* Optional parameter */
DCL DCB2#                    UBIN;     /* Optional parameter */
DCL ECHO                     BIT(1);   /* Optional parameter */
 
%INCLUDE CP_6;
%F$DCB;
%FPT_DEVICE;
%FPT_WRITE;
 
DCL ORIGVFC                  CHAR(1)   STATIC;
 
    FPT_WRITE.BUF_.BUF$= ADDR(BUF);
    FPT_WRITE.BUF_.BOUND= SIZ - 1;
    FPT_WRITE.V.DCB#= DCB#;
    IF ADDR(DVFC) ~= ADDR(NIL) THEN DO;
         ORIGVFC= DCBADDR(DCB#)->F$DCB.DVFC#; /* Save present DVFC */
         FPT_DEVICE.V.DVFC#= DVFC;
         FPT_DEVICE.V.DCB#= DCB#;
         CALL M$DEVICE( FPT_DEVICE );         /* Set specified DVFC */
         CALL M$WRITE( FPT_WRITE );           /* WRITE line with DVFC */
         IF ADDR(DCB2#) ~= ADDR(NIL) THEN
              IF ADDR(ECHO) = ADDR(NIL) OR
                 ECHO  THEN DO;
                   FPT_DEVICE.V.DCB#= DCB2#;
                   CALL M$DEVICE( FPT_DEVICE );
                   FPT_WRITE.V.DCB#= DCB2#;
                   CALL M$WRITE( FPT_WRITE );
                   FPT_DEVICE.V.DVFC#= ORIGVFC;
                   CALL M$DEVICE( FPT_DEVICE );
                   END;
         FPT_DEVICE.V.DCB#= DCB#;
         FPT_DEVICE.V.DVFC#= ORIGVFC;
         CALL M$DEVICE( FPT_DEVICE );         /* Restore previous DVFC */
         END;
    ELSE DO;                                  /* WRITE the line */
         CALL M$WRITE( FPT_WRITE );
         IF ADDR(DCB2#) ~= ADDR(NIL) THEN
              IF ADDR(ECHO) = ADDR(NIL) OR
                   ECHO  THEN DO;
                   FPT_WRITE.V.DCB#= DCB2#;
                   CALL M$WRITE( FPT_WRITE );
                   END;
         END;
    RETURN;
 
END L$WRITE;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
L$CORRES: PROC( DCB1#, DCB2#, SWITCH );
DCL DCB1#                    UBIN;
DCL DCB2#                    UBIN;
DCL SWITCH                   BIT(1);
 
%INCLUDE CP_6;
%FPT_CORRES;
 
    FPT_CORRES.V.DCB1#= DCB1#;
    FPT_CORRES.V.DCB2#= DCB2#;
    SWITCH= '0'B;
    CALL M$CORRES( FPT_CORRES )  ALTRET( BYE );
    SWITCH= '1'B;
BYE:
    RETURN;
 
END L$CORRES;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
L$BREAK: PROC ASYNC;
 
%INCLUDE CP_6;
 
%FPT_TRMPRG (FPTN=RESET_BRK_CNT,
             RSTBRK=YES);
 
DCL BROKEN                   UBIN      SYMREF;
 
    BROKEN= BROKEN + 1;
    CALL M$TRMPRG( RESET_BRK_CNT );
    RETURN;
 
END L$BREAK;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
L$MONERR: PROC;
 
%INCLUDE CP_6;
%B$ALT;
%B$TCB;
 
%FPT_ERRMSG (FPTN=ERRMSG,
             CODE=ERRCODE,
             OUTDCB1=M$DO);
%VLP_ERRCODE(FPTN=ERRCODE);
 
DCL M$DO                     DCB;
DCL M$LO                     DCB;
DCL B$TCB$                   PTR       SYMREF;
DCL DONELO                   BIT(1)    SYMREF;
 
    ERRCODE= B$TCB$->B$TCB.ALT$->B$ALT.ERR;
    ERRMSG.V.DCB#= B$TCB$->B$TCB.ALT$->B$ALT.DCB#;
    IF DONELO THEN
         ERRMSG.V.OUTDCB2#= DCBNUM(M$LO);
    ELSE ERRMSG.V.OUTDCB2#= 0;  /* Just output through M$DO */
    CALL M$ERRMSG( ERRMSG );
    RETURN;
 
END L$MONERR;
