/*M* YFA$FUMBLE - DRIVER MODULE FOR FUMBLE */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* CCC,DMR,PLM=5,IND=5,CSU=3,EXM=0,ECU=3,MOC,DCI=5,CRT=5 */
/*P* NAME: YFA$FUMBLE
     DESCRIPTION:  YFA$FUMBLE CALLS YFA$PARSE TO GET COMMANDS.  BASED
          ON THE COMMANDS RECEIVED, YFA$FUMBLE BUILDS A TEMP KEYED
          LISTFILE, AND READS RECORDS FROM THE STD FILE UNTIL EOF.
          EACH NAME READ FROM THE STD FILE IS PASSED TO YFA$BATCH.
          IF THE NAME PASSES THE SELECTION TESTS, IT WILL BE TURNED
          INTO A !BATCH IMAGE AND PASSED TO IBEX.
 
          FUMBLE IS DESCRIBED IN FUMBLE_HELP.X
                    */
YFA$FUMBLE: PROC MAIN ALTRET;
                                        /**/
%INCLUDE FUMBLE_DATA_R;
DCL FID_TEXT CHAR(60) STATIC;
DCL FID_ASN UBIN(9) STATIC ALIGNED;
DCL FID_RES CHAR(4) STATIC;
DCL SIZE UBIN STATIC;
DCL EOF_FLAG BIT(1) STATIC INIT('0'B);
DCL LIST_KEYED BIT(1) STATIC INIT('0'B);
DCL PASSNAME CHAR(31) STATIC;
DCL CHARN CHAR(SIZE) BASED;
                                        /* Fpts */
%INCLUDE CP_6;
%INCLUDE CP_6_SUBS;
%INCLUDE B_ERRORS_C;
%INCLUDE B$JIT;
%FPT_OPEN (FPTN=OPENSEQUEN,
          STCLASS=STATIC,
          ACS=SEQUEN,
          FUN=IN,
          SCRUB=YES,
          SHARE=ALL,
          NAME=VLP_NAME,
          ACCT=VLP_ACCT,
          PASS=VLP_PASS,
          WSN=VLP_WSN,
          SN=VLP_SN);
%FPT_OPEN (FPTN=OPENSCRATCH,
          STCLASS=STATIC,
          DCB=F$STARLIST,
          ACS=DIRECT,
           ASN=FILE,
          ORG=KEYED,
          DISP=SCRATCH,
          FUN=CREATE,
          NAME=VLP_NAME,
          ACCT=VLP_ACCT,
          PASS=VLP_PASS,
          WSN=VLP_WSN,
          SN=VLP_SN);
%FPT_OPEN (FPTN=OPENSYSID,
           DCB=F$SYSID,
           ACS=DIRECT,
           ORG=KEYED,
           DISP=NAMED,
           CTG=YES,
           FUN=CREATE,
           EXIST=OLDFILE,
           NAME=VLP_NAME,
           ACCT=VLP_ACCT,
           PASS=VLP_PASS,
           WSN=VLP_WSN,
           SN=VLP_SN);
%FPT_PRECORD (FPTN=PRECSYSID,
           DCB=F$SYSID,
           KEY=SYSIDKEY,
           KEYR=YES,
           N=-1);
%FPT_FID (FPTN=FPT_FID,
          STCLASS=CONSTANT,
          ACCT=VLP_ACCT,
          ASN=FID_ASN,
          NAME=VLP_NAME,
          PASS=VLP_PASS,
          RES=FID_RES,
          RESULTS=VLR_FID,
          SN=VLP_SN,
          TEXTFID=FID_TEXT,
          WSN=VLP_WSN,
          SACCT=YES,
          SNAME=YES,
          SPASS=YES,
          SRES=YES,
          SSN=YES,
          SWSN=YES);
%VLP_ACCT (FPTN=VLP_ACCT, STCLASS=STATIC);
%VLP_NAME (FPTN=VLP_NAME, STCLASS=STATIC);
%VLP_PASS (FPTN=VLP_PASS, STCLASS=STATIC);
%VLP_SN (FPTN=VLP_SN, STCLASS=STATIC);
%VLP_WSN (FPTN=VLP_WSN, STCLASS=STATIC);
%VLR_FID (FPTN=VLR_FID,STCLASS=STATIC);
%FPT_CLOSE (FPTN=FPT_CLOSE, DISP=SAVE, STCLASS=STATIC);
%FPT_WRITE (FPTN=WRITELO, STCLASS=SYMREF);
%FPT_READ (FPTN=READSTD, STCLASS=CONSTANT,
          DCB=F$STD,
          BUF=YF_INBUF);
%FPT_READ (FPTN=READLIST, STCLASS=STATIC,
          DCB=F$LIST,
          KEYR=YES,
          KEY=YF_KEY,
          BUF=YF_INBUF);
%FPT_WRITE (FPTN=WRITEKEY, STCLASS=STATIC,
          DCB=F$STARLIST,
          BUF=YF_INBUF,
          KEY=YF_KEY);
%FPT_ERRMSG (FPTN=FPT_ERRMSG,
          STCLASS=STATIC,
           BUF=YF_OUTBUF,
          OUTDCB1=M$LO);
%FPT_PFIL (FPTN=FPT_PFIL, STCLASS=STATIC,
          DCB=F$LIST,
          BOF=YES);
                                        /* Dcbs */
DCL F$LIST DCB;
DCL F$STD DCB;
DCL F$STARLIST DCB;
DCL M$LO DCB;
DCL F$SYSID DCB;
%F$DCB (DCBN=F$DCB);
                                        /* Refs and stuff */
%B$TCB (STCLASS="BASED(B$TCB$)");
%B$ALT;
DCL B$TCB$ PTR SYMREF;
DCL B$JIT$ PTR SYMREF;
DCL YFA$BATCH ENTRY(1);
DCL YFA$PARSE ENTRY ALTRET;
/**/
     YF_LBJID = B$JIT.LBJID;
/**/
     CALL YFA$PARSE ALTRET(ABORTM);     /* Get command from ccbuf */
/* Open list file */
     FID_TEXT = YF_LIST_FID;
     CALL M$FID(FPT_FID) ALTRET(OPEN_ALT);
     OPENSEQUEN.V.ASN# = FID_ASN;
     OPENSEQUEN.V.RES# = FID_RES;
     OPENSEQUEN.V.DCB# = DCBNUM(F$LIST);
     CALL M$OPEN (OPENSEQUEN) ALTRET(OPEN_ALT);
/* Read a record, see if its a keyed list file */
     IF NOT YF_BUILD_F AND FID_ASN = %FILE# /* If its build, then this check is not needed */
       AND DCBADDR(DCBNUM(F$LIST))->F$DCB.ORG# = %KEYED#
     THEN DO;
          CALL M$READ(READLIST) ALTRET(OPEN_ALT);
          IF YF_KEY.L = 31
          THEN DO;                      /* Close, open keyed, not scratch */
               FPT_CLOSE.V.DCB# = DCBNUM(F$LIST);
               CALL M$CLOSE(FPT_CLOSE);
               OPENSCRATCH.V.DISP# = %SAVE#;
               OPENSCRATCH.V.FUN# = %IN#;
               CALL M$OPEN(OPENSCRATCH) ALTRET(OPEN_ALT);
               LIST_KEYED = '1'B;
             END;
          ELSE CALL M$PFIL(FPT_PFIL) ALTRET(OPEN_ALT); /*Set back to the begining */
        END;
/* If x option used, call YFA$BATCH to batch it */
     IF YF_X_F AND NOT YF_BUILD_F       /* If build, ignore this option */
     THEN DO;
          IF LIST_KEYED THEN YF_X_F = '0'B; /* Tell YFA$BATCH not to read sequen */
          CALL YFA$BATCH (YF_X);
          FPT_CLOSE.V.DCB# = DCBNUM(F$LIST);
          CALL M$CLOSE (FPT_CLOSE);
          RETURN;
        END;
/* Build keyed starlist */
     IF LIST_KEYED THEN GOTO LIST_BUILT;
     READLIST.V.KEYR# = '0'B;           /* We don't need that anymore */
     YF_KEY.L = 31;                     /* For writes */
     IF YF_BUILD_F THEN DO;
          OPENSCRATCH.V.DISP# = %SAVE#;
          FID_TEXT = YF_BUILD;
        END;
     ELSE FID_TEXT = '*';
     CALL M$FID(FPT_FID) ALTRET(OPEN_ALT);
     CALL M$OPEN (OPENSCRATCH) ALTRET(OPEN_ALT);
     YF_INBUF = ' ';
     CALL M$READ(READLIST) ALTRET(OPEN_ALT);
     DO WHILE (NOT EOF_FLAG);
          CALL INDEX1(SIZE, ',', YF_INBUF) ALTRET(BAD_LIST_REC);
          YF_KEY.TEXT = ADDR(YF_INBUF)->CHARN;
          CALL M$WRITE (WRITEKEY) ALTRET(ABORTM);
          DO WHILE ('0'B);
BAD_LIST_REC:
               CALL CONCAT(YF_OUTBUF, 'BAD LISTREC:', YF_INBUF);
               CALL M$WRITE(WRITELO);
             END;
          YF_INBUF = ' ';
          CALL M$READ(READLIST) ALTRET(TEST_EOF);
          DO WHILE ('0'B);
TEST_EOF:
               IF B$TCB.ALT$->B$ALT.ERR.CODE = %E$EOF THEN EOF_FLAG = '1'B;
               ELSE GOTO OPEN_ALT;
             END;
        END;
     FPT_CLOSE.V.DCB# = DCBNUM(F$LIST);
     CALL M$CLOSE (FPT_CLOSE);
     IF YF_BUILD_F THEN GOTO CLOSE;     /* Close starlist */
LIST_BUILT:
/**/
/* Open sysid file if wanted. */
/**/
     IF YF_SYSID_F THEN DO;
          FID_TEXT = YF_SYSID;
          CALL M$FID (FPT_FID);
          OPENSYSID.V.ASN#=FID_ASN;
          OPENSYSID.V.RES#=FID_RES;
          CALL M$OPEN (OPENSYSID) ALTRET(OPEN_ALT);
          IF DCBADDR(DCBNUM(F$SYSID))->F$DCB.NRECS#~=0 THEN DO;
               CALL M$PRECORD (PRECSYSID) ALTRET(OPEN_ALT);
               SYSIDKEY.VAL = ((SYSIDKEY.VAL/1000)+1)*1000;
             END;
        END;
/**/
/* Open std file.  If no std file specified, use list file again */
     IF YF_STD_F THEN FID_TEXT = YF_STD_FID;
     ELSE FID_TEXT = YF_LIST_FID;
     CALL M$FID (FPT_FID);
     OPENSEQUEN.V.DCB# = DCBNUM(F$STD);
     OPENSEQUEN.V.ASN# = FID_ASN;
     OPENSEQUEN.V.RES# = FID_RES;
     CALL M$OPEN (OPENSEQUEN) ALTRET(OPEN_ALT);
     EOF_FLAG = '0'B;
/* Read each record from std untill eof.  Pass each name to batch.
     Batch will not return until the job is batched, ie. Batch checks
     for maxq. */
     READLIST.V.DCB# = DCBNUM(F$STD);
     DO WHILE (NOT EOF_FLAG);
          YF_INBUF = ' ';
          CALL M$READ(READSTD) ALTRET(TEST_EOF2);
          CALL INDEX1(SIZE, ',', YF_INBUF);
          IF SIZE > 31 THEN
               CALL INDEX1(SIZE, ' ', YF_INBUF);
          IF SIZE < 1 OR SIZE > 31
          THEN DO;
               CALL CONCAT(YF_OUTBUF, 'BAD STDFILE REC:', YF_INBUF);
               CALL M$WRITE(WRITELO);
               GOTO BYPASS;
             END;
          PASSNAME = ADDR(YF_INBUF)->CHARN;
          IF YF_RESTART_F
          THEN IF PASSNAME = YF_RESTART THEN YF_RESTART_F = '0'B; /* Let the next one go by */
               ELSE ;
          ELSE CALL YFA$BATCH(PASSNAME);
               DO WHILE ('0'B);
TEST_EOF2:
                    IF B$TCB.ALT$->B$ALT.ERR.CODE = %E$EOF THEN EOF_FLAG = '1'B;
                    ELSE GOTO OPEN_ALT;
                  END;
BYPASS:
        END;
     IF YF_RESTART_F
     THEN DO; /* If restart flag is still set, we didn't find the restart point */
          YF_OUTBUF = 'RESTART POINT NOT FOUND';
          CALL M$WRITE(WRITELO);
          ALTRETURN;
        END;
     FPT_CLOSE.V.DCB# = DCBNUM(F$STD);
     CALL M$CLOSE (FPT_CLOSE);
CLOSE:
     FPT_CLOSE.V.DCB# = DCBNUM(F$STARLIST);
     CALL M$CLOSE(FPT_CLOSE);
     RETURN;
OPEN_ALT:
     FPT_ERRMSG.V.DCB# = B$TCB.ALT$->B$ALT.DCB#;
     FPT_ERRMSG.CODE_ = VECTOR(B$TCB.ALT$->B$ALT.ERR);
     CALL M$ERRMSG (FPT_ERRMSG);
ABORTM:
     ALTRETURN;
END YFA$FUMBLE;
