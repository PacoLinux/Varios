.*M*
HELP file for PMERGE
.*T*
 **************************************************************
 *                                                            *
 *  Copyright (c) Bull HN Information Systems Inc., 1989      *
 *                                                            *
 **************************************************************
.*A*                                                                           
PMERGE --- Patch MERGE
 
PMERGE is a service processor that is used to merge PATCH.Xed patch
packets into controlled patch files.
 
Type !HELP (PMERGE.X) OVERVIEW
        for more information.
 
.*K* OVERVIEW
PMERGE has 10 commands:
 
Commands MINI, XDEL, TIGR, and PLOVER are used to set the check criteria
before issuing a CHECK command. These commands tell PMERGE what
version of patches and TIGR files are valid for the check.
 
    Format:   MINI = "<7 character alphanumeric version descriptor>
              XDEL = "<7 character alphanumeric version descriptor>
              TIGR = "<7 character alphanumeric version descriptor>
              PLOVER = "<7 character alpha numeric version descriptor>
 
Type !HELP (PMERGE.X) OVERVIEW subtopic
       where subtopic = CHECK PMERGE STANDARD WARN NWARN INSERT
 
     or simply type ? or ?? now.
.*B* CHECK
CHECK examines patches and patch files to insure PMERGE validity
before actually attempting to use the files in a PMERGE operation.
 
    Format:   CHECK fidlist.
 
    Fidlist can be a list of files and or accounts delimited
    by commas.
 
    Example: CHECK .ACCT1,.ACCT2,PATCHFILE.ACCT3
 
.*B* PMERGE
PMERGE is the command that actually does the merging. Files and/or
entire accounts can be merged into the patchfile.
 
    Format:   PM/ERGE fidlist1 INTO basefile (FORM/ING|,) newfile
 
    Fidlist is the list of files and/or accounts to merge into the
    basefile forming newfile. The basefile is not modified in any
    way by PMERGE.
 
    Before any merge is attempted the basefile is automatically
    checked for validity. If it fails the CHECK, the merge is
    aborted.
 
    After the basefile has passed the check, the files involved
    in the fidlist are checked one at a time. If the file passed
    the check it is sorted into a set of collating files. If the
    file failed the check it is passed over and checking begins
    at the next file.
 
    Once all the files from fidlist are collated, PMERGE merges
    the collated files into the basefile to form the newfile.
 
    Example: PMERGE .ACCT1 INTO BASEFILE.ACCT2 FORM NEWFILE.ACCT3
 
.*B* STANDARD
STANDARD is the command used to tell PMERGE where the uts standard
file exists. The default standard file is :UTS_STD.SUPPORT.
 
     Form: STAND/ARD [FILE] = fid
 
.*B* WARN NWARN
WARN and NWARN commands control the reporting of skipped RUMS and
PLOVERS. If NWARN is issued then skip reporting is suppresed. Issuing a
WARN command will cause the skip reporting to be activated. WARN is the
default mode of operation.
 
    Form: WARN
 
    Form: NWARN
 
.*B* INSERT
INSERT tells PMERGE to insert any processor or plover (with patches)
into the new file if these entites do not already exist in the base
file. Alternately DONT INSERT tells PMERGE to ignore the patches to
plovers and processors not in the base file (this is the default).
 
     Form1: INSERT RUM or INSERT PLO
 
            This turns insertion mode on.
 
     Form2: DONT INSERT
 
            This turns insertion mode off.
 
.*B*
The STANDARD and INSERT commands must precede the PMERGE command if
these features are to be applied to the PMERGE operation.
 
Additional notes....
 
PMERGEd patches follow the following guidelines:
 
    1. All patches are PATCH.Xed first. Don't try to circumvent this
       step. If you edit the PATCH.Xed file you may violate some
       criteria for merging. If the file fails the CHECK it will not
       appear in the new patch file.
 
    2. All RUM patches are identified by a processor and uts value.
 
    3. All PLOVER patches are identified by OU name and a uts value.
 
    4. PMERGE will accept version names for uts values. Real uts
       values are retrieved from a UTS standard file specified by
       by the STANDARD command. If no STANDARD command is specified
       then the file :UTS_STD.SUPPORT is used as the default.
 
       If the version name is not known in the UTS STANDARD file then
       you must use the real UTS value.
 
    5. All patch packets submitted to PMERGE must be order independent.
 
    6. To facilitate fast PMERGE operations the UTS STANDARD file must
       be sorted by name.
 
    7. Patches are merged into the patch file by logical section and
       star numbers. If the merging patch has the same star number as
       an already existing patch in the patch file, the original patch
       is replaced.
 
       This replacement rule is the same for all patches except site
       specific patches. A site specific patch is never replaced by
       PMERGE. Site specific patches are identified by any patch that
       has a non numeric patch number or whose star number = 0.
       Additionally, PMERGE places all site specific paches at the
       end of each logical patch section. This facilitates easy
       location and removal of these patches by hand.
 
    8. Patch packets of the type MINI, XDEL, TIGR, and PLOVER must contain
       a comment field in the first record that contains the version
       of the operating system it applies to.
 
         Example:  !MINI "B00
 
 
         In this example the patch packet conatins a B00 flavor
         MINI patch.
 
**************************************************************************
 
Notes:
 
    1) To get a patch report of your patch deck broken down by processor
       and section do the following.
 
         a) Build a dummy patch file called *1:
 
              !MINI "<version>
              !XDEL "<version>
              !TIGR "<version>
              !RUM
              !PLOVER
              !FIN
 
         b) Then PMERGE your patch file into the dummy with the
            following scenario:
 
              !SET M$LO LP
              !PMERGE.X
              *INSERT RUM
              *INSERT PLO
              *PMERGE <your patch file> INTO *1 FORM *2
              *END
              !RESET M$LO
              !PRINT
              !DEL *1,*2
 
         c) The listing produced by PMERGE on the printer will show
            what patches are applied to your system per section and
            processor or plover. The star numbers are sorted numer-
            ically to facillitate easy reading.
 
.*K* OWNER
Bill Huckeba, LADC
.*K* XINDEX
PMERGE.X
.*R*
AID=SUPPORT
.*R*
PATCHES
.*R*
.*K* XINDEX_ABSTRACT
TOOL=PMERGE
.*R*
Used to merge PATCH.Xed patch packets into controlled patch files.
.*K* CHANGES Changes changes
02/24/83
Installed at LADC.
