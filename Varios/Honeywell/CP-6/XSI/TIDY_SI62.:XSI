/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
PARSE$DR    : PROC (BUFF,COMMENT,DECLARATION_SCAN,PASCAL_TYPE_DEC,
                    RIGHT_JUSTIFY,HOLD_FORMATS,
                    NO_INDENTATION,DEFAULT_LBLS,INDENT_BASE,
                    LABEL_START_VAL,FORMAT_START_VAL,
                    LABEL_INCREMENT,FORMAT_INCREMENT,IGNORE_COMMENTS,
                    CURRENT_YEAR,USE_COMMENTS_ONLY,PROMPT_TERM,
                    COPYRIGHT);
 
/*     This routine feeds one of two buffers to the parser,
     the CCBUF or an user buffer.  The user buffer will have
     a C*X* as its first four characters.  The routine will
     then decode the output from the parser, set the right
     flags and variables, and then return to the calling
     program.
*/
     DCL  BUFF                     CHAR(80);
     DCL  CURRENT_YEAR             CHAR(4);
     DCL  COMMENT                  BIT(1) ALIGNED;
     DCL  DECLARATION_SCAN         BIT(1) ALIGNED;
     DCL  PASCAL_TYPE_DEC          BIT(1) ALIGNED;
     DCL  RIGHT_JUSTIFY            BIT(1) ALIGNED;
     DCL  HOLD_FORMATS             BIT(1) ALIGNED;
     DCL  NO_INDENTATION           BIT(1) ALIGNED;
     DCL  DEFAULT_LBLS             BIT(1) ALIGNED;
     DCL  IGNORE_COMMENTS              BIT(1) ALIGNED;
     DCL  USE_COMMENTS_ONLY            BIT(1) ALIGNED;
     DCL  PROMPT_TERM              BIT(1) ALIGNED;
     DCL  INDENT_BASE              SBIN WORD;
     DCL  LABEL_START_VAL          SBIN WORD;
     DCL  FORMAT_START_VAL         SBIN WORD;
     DCL  LABEL_INCREMENT          SBIN WORD;
     DCL  FORMAT_INCREMENT         SBIN WORD;
     DCL  I                        UBIN WORD;
     DCL  ERR_CODE                 UBIN WORD;
     DCL  COPYRIGHT                BIT(1)  ALIGNED;
 
     DCL  B$JIT$                   PTR  SYMREF;
     DCL  X$PARSE                  ENTRY(1) ALTRET;
     DCL  JIT_NODES                UBIN     SYMREF;
     DCL  MY_WORKSPACE (0:1023)    SBIN STATIC;
     DCL  BUF_NODES                UBIN  SYMREF;
 
     %INCLUDE CP_6;
     %INCLUDE XU_MACRO_C;
     %INCLUDE XU_PERR_C;
     %INCLUDE XU_SUBS_C;
     %INCLUDE B$JIT_C;
 
     %P_PCB    (NAME=BUF_PCB,
                R=BUF_NODES,
                W=MY_WORKSPACE,
                WSZ="SIZEW(MY_WORKSPACE)");
 
     %P_PCB    (NAME=JIT_PCB,
                R=JIT_NODES,
                W=MY_WORKSPACE,
                WSZ="SIZEW(MY_WORKSPACE)");
 
     %PARSE$SYM     (NAME=MY$SYM,
                     STCLASS="BASED");
 
     %PARSE$OUT     (NAME=MY$OUT,
                     STCLASS="BASED");
 
     %B$JIT0;
     %U$JIT1;
     %A$JIT6X;
 
     IF (NOT COMMENT) THEN DO;
        IF (B$JIT$ -> B$JIT.CCARS >
           B$JIT$->B$JIT.CCDISP)
              THEN DO;
                 JIT_PCB.TEXT$ = PINCRC(ADDR(B$JIT.CCBUF),
                                 B$JIT.CCDISP + 1);
                 JIT_PCB.NCHARS = B$JIT.CCARS - B$JIT.CCDISP - 1;
                 ERR_CODE = 1;
                  CALL X$PARSE (JIT_PCB) ALTRET (PARSE_ALT);
                  DO WHILE ('0'B);
PARSE_ALT:
                  CALL WRITE_ERROR (ERR_CODE);
                  CALL M$XXX;
                  END;  /* DO WHILE */
                  DO I = 0 TO JIT_PCB.OUT$->MY$OUT.NSUBLKS - 1;
                     DO CASE (JIT_PCB.OUT$->MY$OUT.SUBLK$(I)->
                               MY$OUT.CODE);
 
                     CASE(1);  DO;
                             DECLARATION_SCAN = '1'B;
                             PASCAL_TYPE_DEC = '1'B;
                      END;  /*  CASE 1 */
 
                     CASE(2);  DO;
                             DECLARATION_SCAN = '1'B;
                             PASCAL_TYPE_DEC = '0'B;
                     END;  /*   CASE 2  */
 
                     CASE(3);
                            CALL CHARBIN(INDENT_BASE,JIT_PCB.OUT$->
                                         MY$OUT.SUBLK$(I)->MY$OUT.SUBLK$(0)->
                                         MY$SYM.TEXT);
 
                     CASE(4);
                             CALL CHARBIN(LABEL_START_VAL,
                                          JIT_PCB.OUT$->MY$OUT.SUBLK$(I)->
                                          MY$OUT.SUBLK$(0)->
                                          MY$SYM.TEXT);
 
                     CASE(5);
                             CALL CHARBIN(FORMAT_START_VAL,
                                          JIT_PCB.OUT$->MY$OUT.SUBLK$(I)->
                                          MY$OUT.SUBLK$(0)->
                                          MY$SYM.TEXT);
 
                     CASE(6);
                             CALL CHARBIN(LABEL_INCREMENT,
                                          JIT_PCB.OUT$->MY$OUT.SUBLK$(I)->
                                          MY$OUT.SUBLK$(0)->
                                          MY$SYM.TEXT);
 
                     CASE(7);
                             CALL CHARBIN(FORMAT_INCREMENT,
                                          JIT_PCB.OUT$->MY$OUT.SUBLK$(I)->
                                          MY$OUT.SUBLK$(0)->
                                          MY$SYM.TEXT);
 
                     CASE(8);
                             HOLD_FORMATS = '1'B;
 
 
                     CASE(9);
                             RIGHT_JUSTIFY = '1'B;
 
                     CASE(11); DO;
                            IF (NOT(JIT_PCB.OUT$ ->
                                MY$OUT.SUBLK$(I) ->
                                MY$OUT.NSUBLKS = 0)) THEN
                              CURRENT_YEAR = JIT_PCB.OUT$ ->
                                             MY$OUT.SUBLK$(I) ->
                                             MY$OUT.SUBLK$(0) ->
                                             MY$SYM.TEXT;
                              COPYRIGHT = '1'B;
                         END;
 
                     CASE(12);
                              IGNORE_COMMENTS = '1'B;
 
                     CASE(13);
                              USE_COMMENTS_ONLY = '1'B;
 
                     CASE(14);
                              PROMPT_TERM = '1'B;
 
                     CASE(15);
 
                     END;  /*   DO CASE  */
 
                  END;  /*  DO I  */
 
                  IF (USE_COMMENTS_ONLY) THEN DO;
                    DECLARATION_SCAN = '0'B;
                    PASCAL_TYPE_DEC  = '0'B;
                    INDENT_BASE      = 0;
                    LABEL_START_VAL  = 1000;
                    FORMAT_START_VAL = 9000;
                    LABEL_INCREMENT  = 10;
                    FORMAT_INCREMENT = 10;
                    HOLD_FORMATS     = '0'B;
                    RIGHT_JUSTIFY    = '0'B;
                    COPYRIGHT      = '0'B;
                    IGNORE_COMMENTS  = '0'B;
                    PROMPT_TERM      = '0'B;
                  END;   /*  IF USE_COMMENTS_ONLY  */
 
               END;     /* IF THEN  */
 
          ELSE;
 
     END;  /*  IF COMMENT  */
 
        ELSE  DO;
               /*   WE HAVE A C*X* COMMENT LINE OF PARSE COMMANDS
                 MUST NOW STRIP OFF THE C*X* CHARACTERS FROM THE
                 BEGINNING OF THE BUFFER AND THE FEED THE BUFFER
                 TO THE PARSER
               */
 
           BUF_PCB.TEXT$ = PINCRC(ADDR(BUFF),4);
           BUF_PCB.NCHARS = LENGTHC(BUFF) - 4;
           ERR_CODE = 2;
           CALL X$PARSE(BUF_PCB) ALTRET (PARSE_ALT);
           DO I = 0 TO BUF_PCB.OUT$->MY$OUT.NSUBLKS - 1;
                     DO CASE (BUF_PCB.OUT$->MY$OUT.SUBLK$(I)->
                               MY$OUT.CODE);
 
                     CASE(1);  DO;
                             DECLARATION_SCAN = '1'B;
                             PASCAL_TYPE_DEC = '1'B;
                      END;  /*  CASE 1 */
 
                     CASE(2);  DO;
                             DECLARATION_SCAN = '1'B;
                             PASCAL_TYPE_DEC = '0'B;
                     END;  /*   CASE 2  */
 
                     CASE(3);
                            CALL CHARBIN(INDENT_BASE,BUF_PCB.OUT$->
                                         MY$OUT.SUBLK$(I)->MY$OUT.SUBLK$(0)->
                                         MY$SYM.TEXT);
 
                     CASE(4);
                             CALL CHARBIN(LABEL_START_VAL,
                                          BUF_PCB.OUT$->MY$OUT.SUBLK$(I)->
                                          MY$OUT.SUBLK$(0)->
                                          MY$SYM.TEXT);
 
                     CASE(5);
                             CALL CHARBIN(FORMAT_START_VAL,
                                          BUF_PCB.OUT$->MY$OUT.SUBLK$(I)->
                                          MY$OUT.SUBLK$(0)->
                                          MY$SYM.TEXT);
 
                     CASE(6);
                             CALL CHARBIN(LABEL_INCREMENT,
                                          BUF_PCB.OUT$->MY$OUT.SUBLK$(I)->
                                          MY$OUT.SUBLK$(0)->
                                          MY$SYM.TEXT);
 
                     CASE(7);
                             CALL CHARBIN(FORMAT_INCREMENT,
                                          BUF_PCB.OUT$->MY$OUT.SUBLK$(I)->
                                          MY$OUT.SUBLK$(0)->
                                          MY$SYM.TEXT);
 
                     CASE(8);
                             HOLD_FORMATS = '1'B;
 
 
                     CASE(9);
                             RIGHT_JUSTIFY = '1'B;
 
                     CASE(10);  DO;
                              COPYRIGHT = '1'B;
                            IF (NOT(BUF_PCB.OUT$ ->
                                MY$OUT.SUBLK$(I) ->
                                MY$OUT.NSUBLKS = 0)) THEN
                              CURRENT_YEAR = BUF_PCB.OUT$ ->
                                             MY$OUT.SUBLK$(I) ->
                                             MY$OUT.SUBLK$(0) ->
                                             MY$SYM.TEXT;
                              END;
 
                     CASE(11);
                     END;  /*   DO CASE  */
 
                  END;  /*  DO I  */
 
               END;     /* ELSE OF IF (NOT COMMENT)  */
 
     IF (INDENT_BASE = 0) THEN NO_INDENTATION = '1'B;
     ELSE NO_INDENTATION = '0'B;
     IF (LABEL_START_VAL = 0) THEN LABEL_START_VAL = 1000;
     IF (LABEL_INCREMENT = 0) THEN LABEL_INCREMENT = 10;
     IF (FORMAT_START_VAL = 0) THEN FORMAT_START_VAL = 9000;
     IF (FORMAT_INCREMENT = 0) THEN FORMAT_INCREMENT = 10;
     IF (LABEL_START_VAL = 1000)
        AND (LABEL_INCREMENT = 10)
        AND (FORMAT_START_VAL = 9000)
        AND (FORMAT_INCREMENT = 10) THEN
           DEFAULT_LBLS = '1'B;
     ELSE
          DEFAULT_LBLS = '0'B;
 
WRITE_ERROR: PROC (FLAG);
 
     DCL  FLAG          UBIN WORD;
 
     DCL  ERR_MSG1  CHAR(12) STATIC
                    INIT ('SYNTAX ERROR');
     DCL  ERR_MSG2  CHAR(18) STATIC
                    INIT('IN INVOKATION LINE');
     DCL  ERR_MSG3  CHAR(12)  STATIC
                    INIT('IN C*X* LINE');
     DCL  ERR_MSG4  CHAR(13)  STATIC
                    INIT('PROGRAM ERROR');
     DCL  M$DO      DCB;
 
     %FPT_WRITE (FPTN=MY_FPT,DCB=M$DO);
 
     DO CASE (FLAG);
 
        CASE(1); DO;
                MY_FPT.BUF_.BUF$ = ADDR(ERR_MSG1);
                MY_FPT.BUF_.BOUND = LENGTHC(ERR_MSG1);
                CALL M$WRITE(MY_FPT);
                MY_FPT.BUF_.BUF$ = ADDR(ERR_MSG2);
                MY_FPT.BUF_.BOUND = LENGTHC(ERR_MSG2);
                CALL M$WRITE (MY_FPT);
            END;
 
        CASE(2);  DO;
                MY_FPT.BUF_.BUF$ = ADDR(ERR_MSG1);
                MY_FPT.BUF_.BOUND = LENGTHC(ERR_MSG1);
                CALL M$WRITE(MY_FPT);
                MY_FPT.BUF_.BUF$ = ADDR(ERR_MSG3);
                MY_FPT.BUF_.BOUND = LENGTHC(ERR_MSG3);
                CALL M$WRITE(MY_FPT);
            END;
 
        CASE(3);    DO;
                MY_FPT.BUF_.BUF$ = ADDR(ERR_MSG4);
                MY_FPT.BUF_.BOUND = LENGTHC(ERR_MSG4);
                CALL M$WRITE(MY_FPT);
            END;
        END;  /*  DO CASE  */
     END WRITE_ERROR;
     END PARSE$DR;
