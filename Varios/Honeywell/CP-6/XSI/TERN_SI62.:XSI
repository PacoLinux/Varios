/*M* TERN_SI62 - Event driven code for the TERN processor.                    */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
TERN_EVENT: PROC ASYNC;
 
/*X* PLM=3,SQB,AND,ENI=0,SDI=3,CSI=0,ECI=0,IND=0,IAD=3,MOC,MEC,CLM=0,MCL=1,EXM=0,NTB */
 
%INCLUDE CP_6;
%INCLUDE CP_6_SUBS;
%INCLUDE NK_VFC_C;
%INCLUDE B_ERRORS_C;
DCL B$TCB$ PTR SYMREF;
%B$TCB(STCLASS="BASED(B$TCB$)");
%B$EXCFR;
%B$NWIO;
%B$ALT;
%B$CGAUCRD;
%EQU_CG;
%NK$VFC;
 
%INCLUDE TERN_C61; /* COMMON STRUCTURE MACROS AND EQU'S */
%INCLUDE TERN_C62; /* ERROR CODE SUBS */
DCL TERN_CONTEXT ENTRY(1);
DCL TERN_LOG ENTRY(2);
 
%INCLUDE XUR_ENTRY;
 
%VLP_ERRCODE (FPTN = ERROR_CODE,
 FCG = "ZZ",
 MID = "Z",
 STCLASS = STATIC);
 
%VLP_NAME(FPTN=ERROR_U1,
 STCLASS=STATIC,
 NAME='        ');
 
%FPT_EOM(FPTN=CG_EOM,
 STCLASS=STATIC,
 DCB=F$CG,
 TIMEOUT=20,
 UTYPE=MIL10);
 
%FPT_TRMCTL(FPTN=CG_TRMCTL,
 STCLASS=STATIC,
 TRMCTL=VLP_TRMCTL,
 DCB=F$CG);
 
%VLP_TRMCTL(STCLASS=CONSTANT,
 ACTONTRN=YES);
 
%GLOBALS;
 
%CONTEXT (STCLASS="BASED(CTX$)");
 
%F$DCB;
 
%FPT_WRITE(FPTN=WRITE_OUT,
 DCB=M$LO,
 TRANS=YES,
 BUF=CG_BUFF);
 
DCL I UBIN WORD ALIGNED STATIC ;
 
   DO CASE(B$TCB.STK$->B$EXCFR.EVID);
   CASE(%EV$CGREAD);
 
      DO INHIBIT;
         READS_OUT = READS_OUT - 1;
      END;
 
      IF B$TCB.STK$->B$NWIO.ERR.ERR# = %E$DACTR
        AND NOT DCBADDR(DCBNUM(F$CG))->F$DCB.FCD#
      THEN RETURN;
 
      IF B$TCB.STK$->B$NWIO.ERR = '0'B
        OR B$TCB.STK$->B$NWIO.ERR.ERR# = %E$TIMO
      THEN
 
      DO SELECT(B$TCB.STK$->B$NWIO.CGPARM.MSGTYP#);
 
      SELECT ('*AUEV   ');
AUEV:
         ERROR_U1.L# = SIZEC(ADDR(CG_BUFF)->B$CGAUCRD.STATION);
         ERROR_U1.NAME# = ADDR(CG_BUFF)->B$CGAUCRD.STATION;
 
         DO CASE(ADDR(CG_BUFF)->B$CGAUCRD.EVENT);
         CASE (%CG_TCON#);
TERM_CONN:
            ERROR_CODE.ERR# = %ERR$TERM_CONN#;
            ERROR_CODE.SEV = 0;
            CALL XUR$ERRMSG (ERROR_CODE,,,VECTOR(ERROR_U1));
/*E*    ERROR:   ZZZ-ERR$TERM_CONN#-0
        MESSAGE: Terminal %U1 connected.
*/
            CALL TERN_CONTEXT(ADDR(CG_BUFF)->B$CGAUCRD.STATION);
            CONTEXT.STATE = %S$IDLE;
 
            CG_EOM.STATION_ = VECTOR(CONTEXT.STA);
            CALL M$EOM(CG_EOM) WHENALTRETURN DO;
               CALL XUR$ERRMSG(B$TCB.ALT$->B$ALT.ERR,
                 B$TCB.ALT$->B$ALT.DCB#);
            END;
 
            CG_TRMCTL.STATION_ = VECTOR(CONTEXT.STA);
/* This code seems to make 6EDIT QUAC tests hang in strange places */
/*
            CALL M$STRMCTL(CG_TRMCTL) WHENALTRETURN DO;
               CALL XUR$ERRMSG(B$TCB.ALT$->B$ALT.ERR,
                 B$TCB.ALT$->B$ALT.DCB#);
                    END;
*/
 
         CASE (%CG_TDSC#);
TERM_DISC:
            ERROR_CODE.ERR# = %ERR$TERM_DISC#;
            ERROR_CODE.SEV = 0;
            CALL XUR$ERRMSG (ERROR_CODE,,,VECTOR(ERROR_U1));
/*E*    ERROR:   ZZZ-ERR$TERM_DISC#-0
        MESSAGE: Terminal %U1 disconnected.
*/
 
         CASE (ELSE);
UNEXP_AUEV:
            ERROR_CODE.ERR# = %ERR$UNEXP_AUEV#;
            ERROR_CODE.SEV = 2;
            ERROR_U1.L# = 2;
            CALL BINCHAR(SUBSTR(ERROR_U1.NAME#,,2),
              ADDR(CG_BUFF)->B$CGAUCRD.EVENT);
            CALL XUR$ERRMSG (ERROR_CODE,,,VECTOR(ERROR_U1));
/*E*    ERROR:   ZZZ-ERR$UNEXP_AUEV#-2
        MESSAGE: An AU event of an unexpected type, '%U1' was received.
*/
         END /* CASE */;
 
      SELECT ('INPUT   ');
 
INPUT:
         CALL TERN_CONTEXT(B$TCB.STK$->B$NWIO.CGPARM.STATION#);
         CONTEXT.STATE = %S$INPUT;
 
         CG_CHRCNT = DCBADDR(DCBNUM(F$CG))->F$DCB.ARS#;
         IF DCBADDR(DCBNUM(F$CG))->F$DCB.EOMCHAR# ~= %EOM_EOR# THEN DO;
            CALL INSERT(CG_BUFF, CG_CHRCNT, 1,
              DCBADDR(DCBNUM(F$CG))->F$DCB.EOMCHAR#);
            CG_CHRCNT = CG_CHRCNT + 1;
            CONTEXT.STATE = %S$EOM;
         END;
 
         IF OUT_FLAG AND CG_CHRCNT > 0 THEN DO;
            WRITE_OUT.BUF_.BOUND = CG_CHRCNT - 1;
            CALL M$WRITE(WRITE_OUT) WHENALTRETURN DO;
               CALL XUR$ERRMSG (B$TCB.ALT$->B$ALT.ERR,
                 B$TCB.ALT$->B$ALT.DCB#);
            END /* ALTRETURN */;
         END /* IF */;
 
         IF PROMPT_FLAG AND CG_CHRCNT > 0 THEN DO ;
            CALL INDEX ( I, SUBSTR ( PROMPT_BUFF, 0, PROMPT_CHRCNT ),
              SUBSTR ( CG_BUFF, 0, CG_CHRCNT ) )
            WHENRETURN DO ;
               PROMPT_FLAG = %NO# ;
            END ;
            WHENALTRETURN DO ;
            END ;
         END ;
         IF LOG_FLAG AND CG_CHRCNT > 0 THEN DO;
            CALL INSERT(CONTEXT.LOG_BUFF, CONTEXT.LOG_CHRCNT, CG_CHRCNT, CG_BUFF);
            CONTEXT.LOG_CHRCNT = CONTEXT.LOG_CHRCNT + CG_CHRCNT;
 
            DO WHILE(CONTEXT.LOG_CHRCNT > %LOG$RLEN);
LOG_PARTIAL:
               CALL TERN_LOG(CONTEXT.LOG_VFC, %(LOG$RLEN + 1));
               CONTEXT.LOG_CHRCNT = CONTEXT.LOG_CHRCNT - %LOG$RLEN;
               CALL INSERT(CONTEXT.LOG_BUFF,,, /* NB. this overlaping move is*/
                 SUBSTR(CONTEXT.LOG_BUFF, %LOG$RLEN));/*illegal, but it works*/
               CONTEXT.LOG_VFC = %VFC_EXT;
            END /* WHILE */;
 
            IF CONTEXT.STATE = %S$EOM THEN DO;
LOG_REMAINING:
               CALL TERN_LOG(CONTEXT.LOG_VFC, CONTEXT.LOG_CHRCNT + 1);
               CONTEXT.LOG_VFC = %VFC_TRANSITION0;
               CONTEXT.LOG_CHRCNT = 0;
            END /* IF */;
         END /* LOG */;
 
      SELECT (ELSE);
UNEXP_MSGTYP:
         ERROR_CODE.ERR# = %ERR$UNEXP_MSGTYP#;
         ERROR_CODE.SEV = 2;
         ERROR_U1.L# = SIZEC(B$TCB.STK$->B$NWIO.CGPARM.MSGTYP#);
         ERROR_U1.NAME# = B$TCB.STK$->B$NWIO.CGPARM.MSGTYP#;
         CALL XUR$ERRMSG (ERROR_CODE,,,VECTOR(ERROR_U1));
/*E*    ERROR:   ZZZ-ERR$UNEXP_MSGTYP#-2
        MESSAGE: A message of an unexpected type, '%U1' was received.
*/
      END /* SELECT */;
 
      ELSE DO;
READ_ERR:
         CALL XUR$ERRMSG(B$TCB.STK$->B$NWIO.ERR,
           B$TCB.STK$->B$NWIO.DCB#);
         RETURN;
      END;
   CASE (ELSE);
UNEXP_EVENT:
      ERROR_CODE.ERR# = %ERR$UNEXP_EVENT#;
      ERROR_CODE.SEV = 2;
      CALL XUR$ERRMSG (ERROR_CODE);
/*E*    ERROR:   ZZZ-ERR$UNEXP_EVENT#-2
        MESSAGE: An unexpected event occured!
       MESSAGE1: The asynchronous event handler was entered, but was
                 unprepared to handle the type of event that had occured.
*/
   END /* CASE */;
END TERN_EVENT;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
TERN_CONTEXT: PROC(STATION);
/*X* PLM=3,SQB,AND,ENI=0,SDI=3,CSI=0,ECI=0,IND=0,IAD=3,MOC,MEC,CLM=0,MCL=1,EXM=0,NTB */
 
DCL STATION CHAR(8);
 
%INCLUDE CP_6;
%INCLUDE CP_6_SUBS;
%INCLUDE TERN_C61; /* COMMON STRUCTURE MACROS AND EQU'S */
 
%GLOBALS;
%CONTEXT (STCLASS="BASED(CTX$)");
 
   CONTEXT.STA.STATION# = STATION;
 
END TERN_CONTEXT;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
TERN_BRKMSG: PROC;
 
%INCLUDE CP_6;
%INCLUDE CP_6_SUBS;
%INCLUDE TERN_C61;
%INCLUDE TERN_C62;
%INCLUDE XUR_ENTRY;
 
%GLOBALS;
 
%VLP_ERRCODE (FPTN = BREAK_ERR,
 FCG = "ZZ",
 MID = "Z",
 ERR#=%ERR$BREAK#,
 SEV=0,
 STCLASS = CONSTANT);
 
%VLP_NAME(FPTN=ERROR_U1,
 STCLASS=STATIC,
 NAME='        ');
 
%VLP_VECTOR (FPTN=ERROR_VECTOR,
 STCLASS=AUTO);
 
%FPT_CORRES(DCB1=M$SI,
 DCB2=M$UI,
 STCLASS=CONSTANT);
 
   ERROR_VECTOR = VECTOR(NIL);
   IF SENDFILE THEN DO;
      CALL M$CORRES(FPT_CORRES) ALTRET(BACK_OUT);
      ERROR_U1.L# = 5;
      CALL BINCHAR(SUBSTR(ERROR_U1.NAME#,,5),
        SENDFILE_RECORD);
      ERROR_VECTOR = VECTOR(ERROR_U1);
   END;
 
   CALL XUR$ERRMSG (BREAK_ERR,,,ERROR_VECTOR);
/*E*    ERROR:   ZZZ-ERR$BREAK#-0
       MESSAGE: Break! %at %U1 %C to continue:
*/
   RETURN;
 
TERN_ABORT: ENTRY;
 
BACK_OUT:
 
   UNWIND TO TERN_BREAK_PLACE;
 
END TERN_BRKMSG;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
TERN_LOG: PROC(BUFF, LEN);
/*X* PLM=3,SQB,AND,ENI=0,SDI=3,CSI=0,ECI=0,IND=0,IAD=3,MOC,MEC,CLM=0,MCL=1,EXM=0,NTB */
 
DCL BUFF CHAR(1);
DCL LEN UBIN;
 
%INCLUDE CP_6;
%INCLUDE CP_6_SUBS;
%INCLUDE TERN_C61; /* COMMON STRUCTURE MACROS AND EQU'S */
%INCLUDE XUR_ENTRY;
DCL B$TCB$ PTR SYMREF;
%B$TCB(STCLASS="BASED(B$TCB$)");
%B$ALT;
 
%GLOBALS;
%CONTEXT (STCLASS="BASED(CTX$)");
 
%FPT_WRITE(FPTN=LOG_WRITE,
 DCB=F$LOG,
 VFC=YES,
 TRANS=YES,
 STCLASS=STATIC);
 
   IF LOG_FLAG AND LEN>1 THEN DO;
      LOG_WRITE.BUF_ = VECTOR(BUFF);
      LOG_WRITE.BUF_.BOUND = LEN-1;
      CALL M$WRITE(LOG_WRITE) WHENALTRETURN DO;
         CALL XUR$ERRMSG (B$TCB.ALT$->B$ALT.ERR,
           B$TCB.ALT$->B$ALT.DCB#);
      END /* ALTRETURN */;
   END /* IF */;
END TERN_LOG;
