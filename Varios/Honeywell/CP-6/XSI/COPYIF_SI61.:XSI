/*M*  COPYIF - program passes commands to PCL if source file is newer than destination file.
*/
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*P*
     NAME: COPYIF
     PURPOSE:
           To pass one or more commands to PCL in the event that the file named
           as the source is newer than the file named as the destination
           or if the file named as the destination does not exist.
     DESCRIPTION:
           This program opens both the source and destination files, making
           sure that they really are files and not devices, and compares
           their CODE04.MODIFY.TIMEs (in the FIT).
           If the CODE04.MODIFY.TIME of the source is newer than the time
           of the destination, the commands specified are passed to PCL
           otherwise they are ignored.
           If the destination file cannot be opened, the program checks
           to see whether or not it exists. If it doesn't exist, the
           specified comannds are passed to PCL. Otherwise an error message
           is printed and the commands are ignored.
*/
/*F*
     NAME: COPYIF
     PURPOSE:
           Opens source and destination files. Compares they modification dates.
*/
/*D*
     NAME: COPYIF
     CALL: This procedure is invoked from IBEX.
           Command format:
 
                COPYIF.X source_fid, destination_fid [(pcl_command[)]]
                               OR
                 COPYIF.X source_fid, destination_fid
                 pcl_command1
                 pcl_command2
                      .
                      .
                      .
                 pcl_commandN
 
           where
               source_fid is the fid of the source file.
               destination_fid is the fid of the destination file
               pcl_command is any valid PCL command.
     DESCRIPTION:
           DCLs all the variables and constants for this procedure.
           OPENs source and destination files.
           Determines whether source file is newer than destination file
           and branches accordingly.
           Also prints error messages for missing fids.
*/
/**************************************************************************************************/
/*  Author: Charles Schutz, LADC
    Date: 8/84 */
 
COPYIF: PROC MAIN;
/*  INCLUDEs here */
%INCLUDE CP_6;
%INCLUDE CP_6_SUBS;
%INCLUDE XU_MACRO_C;
%INCLUDE XU_SUBS_C;
%INCLUDE XU_PERR_C;
%INCLUDE B_ERRORS_C;
%INCLUDE B$JIT_C;
%INCLUDE FM$FIT;
 
/* DCBs defined here */
DCL M$SI DCB;
DCL M$UI DCB;
DCL M$DO DCB;
DCL M$ME DCB;
 
/* EXTERNALs */
DCL B$TCB$ PTR SYMREF;
DCL B$JIT$ PTR SYMREF;
DCL XSF$LOCCODT ENTRY(2) ALTRET;
 
/* STATIC STORAGE */
DCL 1 COMMAND_TEXT STATIC,
      2 L UBIN(9) CALIGNED,
      2 C CHAR(120);
DCL NUM04 UBIN WORD STATIC INIT(4);
DCL FPARAM_BUF_SI (0:1024) SBIN STATIC ALIGNED;
DCL FPARAM_BUF_UI (0:1024) SBIN STATIC ALIGNED;
DCL SI_FIT_BUF$ PTR STATIC;
DCL UI_FIT_BUF$ PTR STATIC;
DCL M$SI$ PTR STATIC;
DCL M$UI$ PTR STATIC;
DCL M$ME$ PTR STATIC;
%FPT_LINK (ACCT=VLP_ACCT,
               CMD=COMMAND_TEXT,
               NAME=VLP_NAME);
%VLP_ACCT (ACCT=':SYS');
%VLP_NAME (NAME='PCL');
DCL SI_ERROR_MSG CHAR(0) STATIC INIT('***INVALID OR MISSING SOURCE FILE');
DCL UI_ERROR_MSG CHAR(0) STATIC INIT('***INVALID OR MISSING DESTINATION FILE');
DCL FIT_ERROR_MSG CHAR(0) STATIC INIT('***FPARAM BUFFER ERROR');
DCL LINK_ERROR_MSG CHAR(0) STATIC INIT('***ERROR ON LINK');
 
/* I/O FPTs here */
%FPT_WRITE (FPTN=WRITE_ERROR,
                DCB=M$DO,
                BUF=NIL,
                WAIT=YES);
%FPT_OPEN (FPTN=OPEN_SI,
               TEST=YES,
               FPARAM=FPARAM_BUF_SI,
               DCB=M$SI);
%FPT_OPEN (FPTN=OPEN_UI,
               TEST=YES,
               FPARAM=FPARAM_BUF_UI,
               DCB=M$UI);
%FPT_OPEN (FPTN=OPEN_ME,
               TEST=YES,
               DCB=M$ME);
%FPT_READ (FPTN=READ_ME,
               DCB=M$ME,
               BUF=COMMAND_TEXT.C);
 
/* BASED definitions */
%B$JIT0;
%U$JIT1;
%A$JIT6X;
%F$DCB;
%CODE04;
%B$TCB;
%B$ALT;
 
%EJECT;
/* *******************************************************************
   ***                  BEGIN COPYIF MAIN PROGRAM                  ***
   ******************************************************************* */
M$SI$ = DCBADDR(DCBNUM(M$SI));
M$UI$ = DCBADDR(DCBNUM(M$UI));
M$ME$ = DCBADDR(DCBNUM(M$ME));
 
CALL M$OPEN (OPEN_SI) ALTRET (SI_OPEN_ERROR);
IF M$SI$->F$DCB.ASN# ~= %FILE#
THEN DO;
    WRITE_ERROR.BUF_ = VECTOR(SI_ERROR_MSG);
    CALL M$WRITE (WRITE_ERROR) ALTRET (READ_TIL_END);
    GOTO READ_TIL_END;
END;
SI_FIT_BUF$ = ADDR(FPARAM_BUF_SI);
CALL XSF$LOCCODT (SI_FIT_BUF$,NUM04) ALTRET(FIT_ERROR);
 
 
CALL M$OPEN (OPEN_UI) ALTRET (UI_OPEN_ERROR);
IF M$UI$->F$DCB.ASN# ~= %FILE#
THEN DO;
    WRITE_ERROR.BUF_ = VECTOR(UI_ERROR_MSG);
    CALL M$WRITE (WRITE_ERROR) ALTRET (READ_TIL_END);
    GOTO READ_TIL_END;
END;
UI_FIT_BUF$ = ADDR(FPARAM_BUF_UI);
CALL XSF$LOCCODT (UI_FIT_BUF$,NUM04) ALTRET(FIT_ERROR);
 
IF UI_FIT_BUF$->CODE04.MODIFY.TIME < SI_FIT_BUF$->CODE04.MODIFY.TIME
THEN DO;
    CALL PASS_COM_TO_PCL;
    GOTO THE_END;
END;
GOTO READ_TIL_END;
%EJECT;
/*F*
     NAME: SI_OPEN_ERROR
     PURPOSE:
           Print appropriate error message and branch to end.
*/
/*D*
     NAME: SI_OPEN_ERROR
     CALL: ALTRET (ME_OPEN_ERROR)
     DESCRIPTION:
           Prints the appropriate error message by linking to M$ERR
           and branches to the ending routine.
*/
 
SI_OPEN_ERROR: CALL M$MERC;
               GOTO READ_TIL_END;
 
/*F*
     NAME: ME_OPEN_ERROR
     PURPOSE:
           Print appropriate error message and branch to end.
*/
/*D*
     NAME: ME_OPEN_ERROR
     CALL: ALTRET (ME_OPEN_ERROR)
     DESCRIPTION:
           Prints the appropriate error message by linking to M$ERR
           and branches to the ending routine.
*/
ME_OPEN_ERROR: CALL M$MERC;
               GOTO READ_TIL_END;
 
/*F*
     NAME: UI_OPEN_ERROR
     PURPOSE:
           Determine whether or not the error file exists and branch accordingly.
*/
/*D*
     NAME: UI_OPEN_ERROR
     CALL: ALTRET (UI_OPEN_ERROR)
     DESCRIPTION:
           If this routine was entered because the file does not exist
           then this routine calls the procedure which will pass the specified
           commands to PCL.
           For all other types of error the appropriate error message is
           printed by calling M$ERR and the ending routine is branched to.
*/
UI_OPEN_ERROR: IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.ERR# ~= %E$NOFILE
               THEN DO;
                   CALL M$MERC;
                   GOTO READ_TIL_END;
               END;
               ELSE DO;
                   CALL PASS_COM_TO_PCL;
                   GOTO THE_END;
               END;
 
FIT_ERROR:     WRITE_ERROR.BUF_ = VECTOR(FIT_ERROR_MSG);
               CALL M$WRITE (WRITE_ERROR) ALTRET (DUMMY_NAME_1);
DUMMY_NAME_1:  GOTO READ_TIL_END;
%EJECT;
/*F*
     NAME: READ_TIL_END
     PURPOSE:
           To read unwanted PCL commands when it is has been determined
           that passing these commands to PCL is unneccessary.
*/
/*D*
     NAME: READ_TIL_END
     CALL: GOTO READ_TIL_END or ALTRET (READ_TIL_END)
     DESCRIPTION:
           Fisrt this routine determines if the M$ME DCB is a device or not.
           If it is a device do not try to read unwanted commands because
           this would cause misleading promts to be put out to the device
           If the DCB is not a device then it must be determined whether
           the this COPYIF command is format 1 or 2.
           If the command is in format 1, no further processing is needed
           because there are no PCL commands on the following lines.
           If the command is in format 2, the PCL commands on the following
           lines are read but not processed. This is done to prevent the
           'n records ignored' message from being displayed when executing
            COPYIF from a BATCH or XEQ file.
*/
READ_TIL_END:  CALL M$OPEN (OPEN_ME) ALTRET (ME_OPEN_ERROR);
               IF M$ME$->F$DCB.DDEV.IC#
               THEN
                   GOTO THE_END;
               IF B$JIT$->B$JIT.CCARS <= B$JIT$->B$JIT.CCDISP
               THEN
               DO WHILE '1'B;
                   CALL M$READ (READ_ME) ALTRET (THE_END);
               END;
THE_END:       CALL M$EXIT;
%EJECT;
/*F*
     NAME: PASS_COM_TO_PCL
     PURPOSE:
           Determine whehter the COPYIF command is in format 1 or 2 and
           link the specified PCL commands to PCL.
*/
/*D*
     NAME: PASS_COM_TO_PCL
     CALL: CALL PASS_COM_TO_PCL
     DESCRIPTION:
           This procedure determines which format the COPYIF statement is in
           by comparing the total number of characters in the CCBUF to the
           position of the options in the CCBUF.
           If there are no options these number will be the same and the format
           will be format 2.
           If this is the case the commands will be read from M$ME and
           linked to PCL.
           If the COPYIF statement is in format 1 then the PCL command will
           be found within the parentheses and will be linked to PCL.
*/
PASS_COM_TO_PCL:  PROC;
               IF B$JIT$->B$JIT.CCARS <= B$JIT$->B$JIT.CCDISP
               THEN
               DO WHILE '1'B;
                   CALL M$READ (READ_ME) ALTRET (GET_OUT);
                   COMMAND_TEXT.L = M$ME$->F$DCB.ARS#;
                   FPT_LINK.CMD_ = VECTOR(COMMAND_TEXT);
                   CALL M$LINK (FPT_LINK) ALTRET (LINK_ERROR);
               END;
               COMMAND_TEXT.C = SUBSTR(B$JIT.CCBUF,B$JIT.CCDISP+1,B$JIT.CCARS-B$JIT.CCDISP-2);
               COMMAND_TEXT.L = B$JIT.CCARS-B$JIT.CCDISP-2;
               FPT_LINK.CMD_ = VECTOR(COMMAND_TEXT);
               CALL M$LINK (FPT_LINK) ALTRET (LINK_ERROR);
      GET_OUT: RETURN;
 
LINK_ERROR:    WRITE_ERROR.BUF_ = VECTOR(LINK_ERROR_MSG);
               CALL M$WRITE (WRITE_ERROR) ALTRET (DUMMY_NAME_2);
               RETURN;
DUMMY_NAME_2:  RETURN;
END PASS_COM_TO_PCL;
 
END COPYIF;
