/*M* ROUTE - Inserts bannertext on batch banners */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* DMR,PLM=5,IND=5,CTI=5,SDI=5,MCL=10,CSI=0,ECI=0 */
                                   /*
                                        Author: J.L.Joseph, LADC
                                        Date: 1/85
                                                                  */
%SET LISTSUB='1'B;
 
ROUTE: PROC MAIN;
 
     %INCLUDE CP_6;
     %INCLUDE FM$FIT;
     %INCLUDE B$JIT;
     %INCLUDE XU_MACRO_C;
     %INCLUDE XU_PERR_C;
     %INCLUDE XU_SUBS_C;
 
                                   /*
                                        DCB
                                                                  */
DCL M$LO DCB;
DCL M$LI DCB;
DCL M$OUT DCB;
DCL M$LM DCB;
                                   /*
                                        EXTERNALs
                                                                  */
DCL B$JIT$ PTR SYMREF;
DCL ERROR_HANDLER ENTRY(1);
DCL X$PARSE ENTRY(1) ALTRET;
DCL ROUTE_NODES UBIN SYMREF;
DCL ROUTE_NODESO UBIN SYMREF;
DCL M$LM$ PTR SYMREF;
                                   /*
                                        LOCAL static
                                                                  */
DCL M$LO$ PTR STATIC SYMDEF;
DCL M$LI$ PTR STATIC SYMDEF;
DCL DCB$ PTR STATIC SYMDEF;
DCL PARSE$ PTR STATIC SYMDEF;
DCL FORREAL BIT(1) STATIC SYMDEF INIT ('1'B);
DCL I SBIN STATIC SYMDEF;
DCL J SBIN STATIC SYMDEF;
DCL K SBIN STATIC SYMDEF;
 
DCL 1 FILENAME_ STATIC SYMDEF CALIGNED,
         2 CNT_ UBIN(9) CALIGNED,
         2 NAM_ CHAR(31) CALIGNED;
DCL 1 BAN_HOLD STATIC SYMDEF CALIGNED,
         2 * UBIN(9) CALIGNED INIT(9),
         2 * CHAR(9) CALIGNED INIT('*ROUTE');
DCL LO_BUFFER CHAR(256) STATIC SYMDEF;
DCL LO_BUFFER2 CHAR(256) STATIC SYMDEF;
DCL YC_BUFFER CHAR(255) STATIC SYMDEF INIT('!LET BANNERTEXT7=''');
DCL FILEACCT_ CHAR(8) STATIC SYMDEF INIT(':SYMO   ');
DCL A_WORKSPACE(0:255) UBIN WORD STATIC SYMDEF;
DCL FORM_ CHAR(6) CALIGNED STATIC SYMDEF INIT('......');
 
                                   /*
                                        FPTs
                                                                  */
     %FPT_OPEN      (FPTN=OPEN_LO,
                         RES='LP01',
                         FUN=CREATE,
                         DCB=M$LO);
 
     %FPT_CLOSE     (FPTN=CLOSE_LO,
                         DISP=SAVE,
                         DCB=M$LO);
 
     %FPT_OPEN      (FPTN=OPEN_LI_READ,
                         DCB=M$LI,
                         ASN=FILE,
                         NAME=FILENAME_,
                         ACCT=FILEACCT_,
                         SHARE=ALL,
                         FUN=IN);
 
     %FPT_OPEN      (FPTN=OPEN_LI_READ2,
                         DCB=M$LI,
                         ASN=FILE,
                         NAME=BAN_HOLD,
                         FUN=IN);
 
     %FPT_PFIL      (FPTN=PFIL_LO_EOF,
                         DCB=M$LI,
                         BOF=NO);
 
     %FPT_PRECORD   (FPTN=POS_MINUS_1,
                         DCB=M$LI,
                         N=-2);
 
     %FPT_READ      (FPTN=READ_LI_REC,
                         DCB=M$LI,
                         BUF=LO_BUFFER);
 
     %FPT_OPEN      (FPTN=OPEN_OUT_WRITE,
                         DCB=M$OUT,
                         ASN=FILE,
                         NAME=BAN_HOLD,
                         CTG=YES,
                         FUN=CREATE,
                         EXIST=NEWFILE);
 
     %FPT_WRITE     (FPTN=WRITE_OUT,
                         DCB=M$OUT,
                         BUF=LO_BUFFER);
 
     %FPT_WRITE     (FPTN=WRITE_LO,
                         DCB=M$LO,
                         BUF=LO_BUFFER);
 
     %FPT_CLOSE     (FPTN=CLOSE_LI,
                         DCB=M$LI,
                         DISP=SAVE);
 
     %FPT_CLOSE     (FPTN=CLOSE_OUT,
                         DCB=M$OUT,
                         DISP=SAVE);
 
     %FPT_YC        (FPTN=DO_SOME_BANNERTEXT,
                         ECHO=NO,
                         CMD=YC_BUFFER);
 
     %FPT_LDEV      (FPTN=KILL_WHAT_I_GOT,
                         CONTINUE=NO,
                         DELETE=YES,
                         STREAMNAME='LP01');
 
     %P_PCB         (NAME=A_PCB,
                         STCLASS="STATIC SYMDEF",
                         R=NIL,
                         W=A_WORKSPACE,
                         U$=NIL,
                         WSZ=50,
                         N#=0);
                                   /*
                                        BASED variables
                                                                  */
     %F$DCB;
     %CODE16;
     %PARSE$SYM     (NAME=A$SYM,
                         STCLASS="BASED");
 
     %PARSE$OUT     (NAME=A$OUTBLK,
                         STCLASS="BASED");
 
 
 
%EJECT;
 
     M$LM$ = DCBADDR(DCBNUM(M$LM));
 
     IF FORREAL
     THEN
     DO;
          IF M$LM$ -> F$DCB.ACCT# ~= ':SYS'
          THEN
          DO;
               CALL ERROR_HANDLER(0);   /* only from :SYS! */
             END;
          IF B$JIT$->B$JIT.MODE ~= %M_BATCH#
          THEN
          DO;
               CALL ERROR_HANDLER(1);   /* only in batch! */
             END;
        END;                            /* DO IF FORREAL */
 
     A_PCB.ROOT$ = ADDR(ROUTE_NODESO);
     A_PCB.TEXT$ = ADDR(B$JIT.CCBUF);
     A_PCB.NCHARS = B$JIT.CCARS;
 
     CALL X$PARSE (A_PCB)
     WHENALTRETURN
     DO;
          A_PCB.ROOT$ = ADDR(ROUTE_NODES);
          CALL X$PARSE (A_PCB)
          WHENALTRETURN
          DO;
               CALL ERROR_HANDLER (2);  /* bad command line */
             END;
        END;
 
     DO I = 0 TO A_PCB.OUT$ -> A$OUTBLK.NSUBLKS - 1;
 
          DO CASE (A_PCB.OUT$ -> A$OUTBLK.SUBLK$(I) ->
               A$OUTBLK.CODE);
 
          CASE (1);
             LO_BUFFER = A_PCB.OUT$ -> A$OUTBLK.SUBLK$(I) ->
                  A$SYM.TEXT;
 
          CASE (2);
             FORM_ = A_PCB.OUT$ -> A$OUTBLK.SUBLK$(I) ->
                  A$SYM.TEXT;
 
          CASE (ELSE);
 
          END;                          /* DO CASE ON PARSE.NCODE */
        END;                            /* DO I = 0 TO NSUBLKS - 1 */
 
     J = SIZEC(LO_BUFFER)-1;
     DO WHILE(SUBSTR(LO_BUFFER,J,1) = ' ');
          J = J - 1;
        END;
 
     IF LO_BUFFER='*RESET*'
     THEN
     DO;
          LO_BUFFER=' ';
          J=1;
          GOTO QUOTES_DOUBLED;
        END;
 
     CALL INDEX(I,'''',LO_BUFFER)
     WHENALTRETURN
     DO;
          GOTO QUOTES_DOUBLED;
        END;
 
GOT_A_QUOTE: ;
 
     LO_BUFFER2 = LO_BUFFER;
     CALL INSERT(LO_BUFFER,I,1,'''');
     CALL INSERT(LO_BUFFER,I+1,J-I+1,SUBSTR(LO_BUFFER2,I,J-I+1));
     K=I+2;
     J=J+1;
     CALL INDEX(I,'''',LO_BUFFER,K)
     WHENALTRETURN
     DO;
          GOTO QUOTES_DOUBLED;
        END;
     GOTO GOT_A_QUOTE;
 
QUOTES_DOUBLED: ;
 
 
     J=J+1;
     CALL INSERT(LO_BUFFER,J,1,'''');
 
     IF J>=80
     THEN
     DO;
          CALL ERROR_HANDLER (3);       /* bannert too big! */
        END;
 
     CALL INDEX (K,'''',YC_BUFFER);
     CALL INSERT(YC_BUFFER,K+1,J+1,LO_BUFFER);
 
     CALL M$YC (DO_SOME_BANNERTEXT)
     WHENALTRETURN
     DO;
          CALL ERROR_HANDLER(4);        /* bad bannertext? */
        END;
 
     M$LO$ = DCBADDR(DCBNUM(M$LO));
     M$LI$ = DCBADDR(DCBNUM(M$LI));
 
     CALL M$OPEN (OPEN_LO)
     WHENALTRETURN
     DO;
          CALL M$EXIT;
        END;
 
     DCB$ = M$LO$->F$DCB.CFU$;
     FILENAME_.CNT_ = DCB$->F$DCB.NAME#.L;
     FILENAME_.NAM_ = DCB$->F$DCB.NAME#.C;
 
     IF FORREAL
     THEN
     DO;
          IF SUBSTR(FILENAME_.NAM_,10,5) ~= '00001'
          THEN
          DO;
               CALL ERROR_HANDLER(5);   /* must be first file! */
             END;                       /* DO IF NOT FIRST PRINTFILE */
        END;                            /* DO IF FORREAL */
 
     IF FORREAL
     THEN
     DO;
          IF DCB$->F$DCB.FORM$->CODE16.PAGENO ~= 1
          THEN
          DO;
               CALL ERROR_HANDLER(6);   /* must have only one page of
                                             output to handle ! */
             END;                       /* DO IF NOT FIRST PRINTED PAGE */
        END;                            /* DO IF FORREAL */
 
     CALL M$CLOSE (CLOSE_LO)
     WHENALTRETURN
     DO;
          CALL M$EXIT;
        END;
 
     CALL M$OPEN (OPEN_LI_READ)
     WHENALTRETURN
     DO;
          CALL M$MERC;
          CALL ERROR_HANDLER (7);       /* Can't get to output file */
        END;
 
     CALL M$PFIL (PFIL_LO_EOF)
     WHENALTRETURN
     DO;
          CALL M$EXIT;
        END;
 
     DO WHILE ('1'B);
 
          CALL M$PRECORD (POS_MINUS_1)
          WHENALTRETURN
          DO;
               CALL ERROR_HANDLER(8);   /* Malformed file */
             END;
 
          CALL M$READ (READ_LI_REC)
          WHENALTRETURN
          DO;
             END;
 
          IF M$LI$->F$DCB.DVBYTE.VFC#
               AND
               SUBSTR(LO_BUFFER,0,1) = 'q'
          THEN
          DO;
               GOTO HEADER_FOUND;
             END;                       /* DO IF CALIBRATED */
 
        END;                            /* DO FOREVER */
 
HEADER_FOUND: ;
 
     CALL M$OPEN (OPEN_OUT_WRITE)
     WHENALTRETURN
     DO;
          CALL M$XXX;
        END;
 
     DO WHILE('1'B);
 
          WRITE_OUT.V.DVBYTE = M$LI$-> F$DCB.DVBYTE;
          WRITE_OUT.BUF_.BOUND = M$LI$-> F$DCB.ARS# - 1;
          CALL M$WRITE (WRITE_OUT)
          WHENALTRETURN
          DO;
               CALL M$XXX;
             END;
 
          CALL M$READ (READ_LI_REC)
          WHENALTRETURN
          DO;
               GOTO EOF_PROBABLY;
             END;
        END;                            /* DO FOREVER */
 
EOF_PROBABLY: ;
 
     CALL M$CLOSE (CLOSE_LI);
     CALL M$CLOSE (CLOSE_OUT);
 
     IF FORM_ ~= '......'
     THEN
     DO;
          KILL_WHAT_I_GOT.FORM_ = VECTOR(FORM_);
        END;
 
     CALL M$LDEV (KILL_WHAT_I_GOT)
     WHENALTRETURN
     DO;
          CALL M$MERC;
        END;
 
     CALL M$OPEN (OPEN_LO)
     WHENALTRETURN
     DO;
          CALL M$XXX;
        END;
 
 
     CALL M$OPEN (OPEN_LI_READ2)
     WHENALTRETURN
     DO;
          CALL M$XXX;
        END;
 
     DO WHILE('1'B);
 
          CALL M$READ(READ_LI_REC)
          WHENALTRETURN
          DO;
               CALL M$CLOSE (CLOSE_LI);
               CALL M$CLOSE (CLOSE_LO);
               CALL M$EXIT;
             END;
 
          WRITE_LO.BUF_.BOUND = M$LI$ -> F$DCB.ARS# - 1;
          WRITE_LO.V.DVBYTE = M$LI$ -> F$DCB.DVBYTE;
 
          CALL M$WRITE (WRITE_LO)
          WHENALTRETURN
          DO;
             END;
 
        END;                            /* DO FOREVER */
 
END ROUTE;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
ERROR_HANDLER: PROC(ERRID);
 
DCL ERRID SBIN;
 
    %INCLUDE CP_6;
    %F$DCB;
     %VLP_ERRCODE   (FPTN=A_ERROR,
                         FCG=AA,MID=A,SEV=0);
DCL ERRMSG_BUFFER CHAR(360) STATIC INIT(' ');
     %FPT_ERRMSG    (FPTN=AN_ERROR,
                         BUF=ERRMSG_BUFFER,
                         FILEACCT=ERRFIL_ACCT,
                         FILENAME=ERRFIL,
                         SOURCE=PASS,
                         CODE=A_ERROR,
                         INCLCODE=NO,
                         OUTDCB1=M$DO,
                         OUTDCB2=M$LO,
                         VFC='A');
     %VLP_NAME      (FPTN=ERRFIL,
                         LEN=31);
     %VLP_ACCT      (FPTN=ERRFIL_ACCT);
 
/*E*    ERROR: AAA-00000-0
      MESSAGE: This program can only be run from .:SYS!
*/
/*E*    ERROR: AAA-00001-0
      MESSAGE: This program only works in BATCH!
*/
/*E*    ERROR: AAA-00002-0
      MESSAGE: Bad syntax on command line!
*/
/*E*    ERROR: AAA-00003-0
      MESSAGE: Resulting BANNERTEXT field would be too big!
*/
/*E*    ERROR: AAA-00004-0
      MESSAGE: IBEX says: bad bannertext!
*/
/*E*    ERROR: AAA-00005-0
      MESSAGE: This program can only be used as the first run unit in a batch job!
*/
/*E*    ERROR: AAA-00006-0
      MESSAGE: There's already more than one page of output been generated, sorry!
*/
/*E*    ERROR: AAA-00007-0
      MESSAGE: Somehow, I lost track of my intermediate file!
*/
/*E*    ERROR: AAA-00008-0
      MESSAGE: It won't work; :SYMO file malformed or not created by batch job.
*/
DCL M$LM DCB;
DCL M$LO DCB;
DCL M$DO DCB;
DCL M$LM$ PTR STATIC SYMDEF;
 
     M$LM$=DCBADDR(DCBNUM(M$LM));
 
     ERRFIL = M$LM$->F$DCB.NAME#;
 
     ERRFIL_ACCT.ACCT# = M$LM$->F$DCB.ACCT#;
 
     A_ERROR.ERR# = ERRID;
 
     CALL M$ERRMSG (AN_ERROR)
     WHENALTRETURN
     DO;
          CALL M$XXX;
        END;
 
     CALL M$EXIT;
 
END ERROR_HANDLER;
