/*M* id_x2_x5:c   -- decodes parameter IDs x2, x3, x4, x5   */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
 
/*F*    NAME: MODEST_SIc05   (id_x2_x5:c)
        PURPOSE: decoder function for the parameter IDs x2 to x5
 
        ORIGINAL AUTHOR:  Arthur Tai, SDO, Phoenix (BULL HN)
        ENHANCEMENTS:  Jordan Boucher, LADC
        DATE:  August 7, 1989
      UPDATES:  JTB 9/1/89
*/
 
/*
**********************************************************************
*/
 
#include "MODEST_Cc09"      /* "defines:h" */
 
 
 
int decode_x2(status,i,position)
int i, position;
char status[];
{
 
  char octet_count, nibble1, nibble2, nibble3, nibble4;
  int octet, length, octet_group;
 
  octet_group = 0;
  octet_count = 0;   /* integer here, although char in other places */
  nibble1 = status[position-4];
  nibble2 = status[position-3];
  length = ascii_to_dig(nibble1,nibble2);
 
  for ( ; (position+2 <= i) && (length > 1) ; )   {
    ++octet_count;
    /* Convert ASCII number to hex number */
    nibble1 = status[position++];
    nibble2 = status[position++];
    length--;
    octet = ascii_to_dig(nibble1,nibble2);
 
    /* decode Octet */
    switch (octet_count)  {
      case OCTET_1 -'0':   /*  make an integer count of octets in this case */
        printf(" Octet %x = %c%c \n",octet_count,nibble1,nibble2);
        if (octet & BIT_0)
          printf("         - Both Defect lists are invalid\n");
        if (octet & BIT_1)
          printf("         - Defects for Cylinder Exceed Table Space\n");
        if (octet & BIT_2)
          printf("         - Cylinder Reallocation Required\n");
        if (octet & BIT_3)
          printf("         - Sector Reallocation Required\n");
        if (octet & BIT_4)
          printf("         - Inhibit Sector Reallocation Active\n");
        if (octet & BIT_5)
          printf("         - Voting on Defect List Failed\n");
        if (octet & BIT_6)
          printf("         - Unable to Determine Track Location\n");
        if (octet & BIT_7)
          printf("         - Conditional Success CE Cyl not Formatted\n");
        break;
 
      case OCTET_2 -'0':   /*  make an integer count of octets in this case */
        printf(" Octet %x = %c%c \n",octet_count,nibble1,nibble2);
        if (octet & BIT_0)
          printf("         - Data Miscompare on Header Written\n");
        if (octet & BIT_1)
          printf("         - Defect to Remove not Found\n");
        if (octet & BIT_2)
          printf("         - Defect to Remove is Permanent\n");
        if (octet & BIT_3)
          printf("         - Temporary Defect List does not Exist\n");
        if (octet & BIT_4)
          printf("         - Certify Defect Found\n");
        if (octet & BIT_5)
          printf("         - Sector Number Invalid\n");
        if (octet & BIT_6)
          printf("         - Failed Reading Replicated Defect Mgt Data \n");
        if (octet & BIT_7)
          printf("         - Failed Writing Replicated Defect Mgt Data \n");
        break;
 
      case OCTET_3 -'0':   /*  make an integer count of octets in this case */
        printf(" Octet %x = %c%c \n",octet_count,nibble1,nibble2);
        if (octet & BIT_0)
          printf("         - Master Terminated Read of Defect List\n");
        if (octet & BIT_1)
          printf("         - Read Header Failure\n");
        if (octet & BIT_2)
          printf("         - Read Delayed Header Failure\n");
        if (octet & BIT_3)
          printf("         - Write Header Failure\n");
        if (octet & BIT_4)
          printf("         - Write Delayed Header Failure\n");
        if (octet & BIT_5)
          printf("         - Defect Entry Out of Sequence\n");
        if (octet & BIT_6)
          printf("         - Cylinder or Sector not Reallocated\n");
        if (octet & BIT_7)
          printf("         - Hight Partial Track includes a Slipped Sector\n");
        break;
 
      case OCTET_4 -'0':   /*  make an integer count of octets in this case */
        printf(" Octet %x = %c%c \n",octet_count,nibble1,nibble2);
        if (octet & BIT_0)
          printf("         - Drive Configuration Record is Undentified\n");
        if (octet & BIT_1)
          printf("         - Invalid Data from Drive\n");
        if (octet & HEX_3F)
          printf("   %x    - No such code\n",(octet&HEX_3F));
        break;
 
      case OCTET_5 -'0':   /*  make an integer count of octets in this case */
        printf("\n The following octets contain the failing physical address");
      case OCTET_6 -'0':   /*  make an integer count of octets in this case */
      default:
        if (( nibble1 == '8' ) && ( nibble2 == '0' ))   {
          length = -1;     /* to get out of for loop */
          break;
        }
        if (octet_count == (5 + octet_group * 4))   {
          printf ("\n Octet %x to %x  =",octet_count,(octet_count+1));
          if ( position + 2 <= i)   {
            nibble3 = nibble1;
            nibble4 = nibble2;
          }
          else   {
            dec_addr('0','0',nibble1,nibble2);
            printf ("    -- Cylinder number\n");
          }
        }  /*end if*/
        else if (octet_count == (6 + octet_group * 4))   {
          dec_addr(nibble3,nibble4,nibble1,nibble2);
          printf ("    -- Cylinder number\n");
        }
        else if (octet_count == (7 + octet_group * 4))   {
          printf (" Octet %x = ",octet_count);
          dec_addr ('0','0',nibble1,nibble2);
          printf ("    -- Header number\n");
        }
        else if (octet_count == (8 + octet_group * 4))   {
          octet_group++;
          printf (" Octet %x = ",octet_count);
          dec_addr ('0','0',nibble1,nibble2);
          printf ("    -- Sector number\n");
        }
        break;
    }  /*end switch*/
  }  /*end for loop*/
  printf("\n----------------------------------------");
  printf("----------------------------------------\n");
return (position);
}  /* end of decode_x2 */
 
#pragma LIST EJECT
/*
======================================================================
*/
 
 
 
 
/* void decode_x3(status,i,position)*/
int decode_x3(status,i,position)
int i, position;
char status[];
{
 
  char octet_count, nibble1, nibble2, nibble3, nibble4, c_count, dr_or_cm_flag;
  int octet, count, length;
 
  dr_or_cm_flag = status[position-2];
  octet_count = '0';
  nibble1 = status[position-4];
  nibble2 = status[position-3];
  length = ascii_to_dig(nibble1,nibble2);
 
  for ( ; (position+2 <= i) && (length > 1) ; )   {
    ++octet_count;
    length--;
    /* Convert ASCII number to hex number */
    nibble1 = status[position++];
    nibble2 = status[position++];
 
    octet = ascii_to_dig(nibble1,nibble2);
 
    if (dr_or_cm_flag == '1')   {
                                /* decode Octet for Controller */
      switch (octet_count)   {
        case OCTET_1:
          printf(" Octet %c = %c%c \n",octet_count,nibble1,nibble2);
          if (octet & BIT_0)
            printf("         - Microcode Data not Accepted\n");
          if (octet & BIT_3)
            printf("         - Message\n");
          if (octet & BIT_4)
            printf("         - Microcode Execution Error\n");
          if (octet & HEX_67)
            printf("   %x    - No Such code - Reserved\n",(octet&HEX_67));
          break;
 
        case OCTET_2:
        case OCTET_3:
        case OCTET_4:
          printf(" Octet %c = %c%c \n",octet_count,nibble1,nibble2);
          if (octet & HEX_FF)
            printf("   %c%c  - No such code - Reserved\n",nibble1,nibble2);
          break;
 
        case OCTET_5:
          printf(" Octet %c = %c%c \n",octet_count,nibble1,nibble2);
          if (octet & BIT_0)
            printf("         - Alternate Port Must be Disabled\n");
          if (octet & BIT_1)
            printf("         - Controller Diagnostic in Progress\n");
          if (octet & BIT_2)
            printf("         - Controller Diagnostic Terminated\n");
          if (octet & BIT_3)
            printf("         - Unable to Disable Issueing Port\n");
          if (octet & BIT_4)
            printf("         - Unable to Disable Alternate Port\n");
          if (octet & HEX_03)
            printf("   %x    - No such code - Reserved\n",(octet&HEX_03));
          break;
 
        case OCTET_6:
          printf(" Octet %c = %c%c \n",octet_count,nibble1,nibble2);
          printf("         - Error Log ID\n");
          break;
 
        case OCTET_7:
          printf(" Octet %c = %c%c \n",octet_count,nibble1,nibble2);
          printf("         - Test Number that Failed\n");
          break;
 
        case OCTET_8:
          printf(" Octet %c = %c%c \n",octet_count,nibble1,nibble2);
          printf("         - Sub-test Number that Failed\n");
          break;
 
        case OCTET_9:
          nibble3 = nibble1;
          nibble4 = nibble2;
          c_count = octet_count;
          octet_count = 'A' - 1;
          break;
 
        case OCTET_A:
          printf(" Octet %c to %c = %c%c%c%c \n",
                 c_count,octet_count,nibble3,nibble4,nibble1,nibble2);
          printf("              - Microcode Detected Error\n");
          break;
 
        case OCTET_B:
          printf(" Octet %c to E = %c%c",c_count,nibble1,nibble2);
          break;
        case OCTET_C:
        case OCTET_D:
          printf(" %c%c",nibble1,nibble2);
          break;
        case OCTET_E:
          printf(" %c%c",nibble1,nibble2);
          printf("\n              - Microcode Address of the Defected Error\n");
          length = -1;     /* to get out of for loop */
          break;
      }  /*end switch*/
 
    }  /*end if*/      /* end of decode controller code, ID=13 */
 
    else if (dr_or_cm_flag == '2')   {
                                     /* decode Octet for drive */
      switch (octet_count)   {
        case OCTET_1:
          printf(" Octet %c = %c%c \n",octet_count,nibble1,nibble2);
          if (octet & BIT_0)
            printf("         - Microcode Data not Accepted\n");
          if (octet & BIT_3)
            printf("         - Message\n");
          if (octet & BIT_4)
            printf("         - Microcode Execution Error\n");
          if (octet & HEX_67)
            printf("  %x     - No Such code - Reserved\n",(octet&HEX_67));
          break;
 
        case OCTET_2:
        case OCTET_3:
        case OCTET_4:
        case OCTET_5:
          printf(" Octet %c = %c%c \n",octet_count,nibble1,nibble2);
          if (octet & HEX_FF)
            printf("   %c%c  - No such code - Reserved\n",nibble1,nibble2);
          break;
 
        case OCTET_6:
          printf(" Octet %c = %c%c \n",octet_count,nibble1,nibble2);
          if (octet & BIT_4)
            printf("         - Read Header Failure\n");
          if (octet & BIT_5)
            printf("         - Data Compare Failure\n");
          if (octet & BIT_6)
            printf("         - Write Buffer to Drive Failure\n");
          if (octet & BIT_7)
            printf("         - Execute Internal Drive Diagnostics Failure\n");
          if (octet & HEX_F0)
            printf("   %x    - No Such code - Reserved\n",(octet&HEX_F0));
          break;
        case OCTET_7:
          printf("\n Octet 7 to Octet 1A are IPI-2 Interface Problem Status\n");
          nibble3 = nibble1;
          nibble4 = nibble2;
          c_count = octet_count;
          break;
        case OCTET_8:
          printf(" Octet %c to %c = %c%c%c%c  ",
                 c_count,octet_count,nibble3,nibble4,nibble1,nibble2);
          printf(" -- Command Ending Status\n");
          cmd_end_status(nibble3,nibble4,nibble1,nibble2);
          break;
        case OCTET_9:
          nibble3 = nibble1;
          nibble4 = nibble2;
          c_count = octet_count;
          octet_count = 'A' - 1;
          break;
        case OCTET_A:
          printf(" Octet %c to %c = %c%c%c%c  ",
                 c_count,octet_count,nibble3,nibble4,nibble1,nibble2);
          printf(" -- Drive Ending Status\n");
          drive_end_status(octet);
          break;
 
        case OCTET_B:
          printf(" Octet %c to 12 are Drive Exception Status\n",octet_count);
          position = position - 2;
/*        printf("          = %c%c",nibble1,nibble2);*/
/*        for (count = 7 ; (count > 0) && (position+2 <= i); count--)*/
          for (count = 0 ; (count < 8) && (position+2 <= i); count++)   {
            nibble1 = status[position++];
            nibble2 = status[position++];
            octet = ascii_to_dig(nibble1,nibble2);
            drive_exception_status (count,octet);
          }
          break;
 
        case OCTET_C:       /* byte 13 to 16 are Residue Count */
          printf ("\n\n  ** Octet 13 to 1A are data address **\n");
          printf("\n Octet 13 to 16 = %c%c",nibble1,nibble2);
          for (count = 3 ; (count > 0) && (position+2 <= i); count--)   {
            nibble1 = status[position++];
            nibble2 = status[position++];
            printf("%c%c",nibble1,nibble2);
          }
          printf("   - Residual Count\n");
          break;
 
        case OCTET_D:
          nibble3 = nibble1;
          nibble4 = nibble2;
          c_count = octet_count;
          break;
        case OCTET_E:               /*octet 17 & 18*/
          printf(" Octet 17 to 18 = ");
          dec_addr (nibble3,nibble4,nibble1,nibble2);
          printf("       - Physical Cyl Address\n");
          break;
 
        case OCTET_F:               /*octet 19*/
          printf(" Octet 19       = ");
          dec_addr ('0','0',nibble1,nibble2);
          printf("         - Physical Head number\n");
          break;
        case OCTET_G:               /*octet 1A*/
          printf(" Octet 1A       = ");
          dec_addr ('0','0',nibble1,nibble2);
          printf("         - Physical Sector number\n");
          break;
        case OCTET_H:               /*octet 1B to 3C */
          printf(" Octet 1B to 3C are Drive Problem Status\n");
          printf("          = %c%c",nibble1,nibble2);
          for (count = 32; (count >= 0) && (position+2 <= i); count--)   {
            nibble1 = status[position++];
            nibble2 = status[position++];
/*          if (( nibble1 == '8' ) && ( nibble2 == '0' )); */
            if (count == 16)
              printf ("\n           ");
            printf(" %c%c",nibble1,nibble2);
          }  /*end for*/
  printf("\n----------------------------------------");
  printf("----------------------------------------\n");
            length = -1;        /* to get out of for loop */
            break;
      }  /*end switch*/
    }  /*end else if*/    /* end of decode drive code, ID=23   */
  }  /*end for loop*/
  printf("\n----------------------------------------");
  printf("----------------------------------------\n");
return (position);
}  /* end of decode_x3 */
 
 
#pragma LIST EJECT
/*
======================================================================
*/
 
 
 
 
 
/*void decode_x4(status,i,position)*/
int decode_x4(status,i,position)
int i, position;
char status[];
{
 
  char octet_count, nibble1, nibble2;
  int octet, length;
 
  octet_count = '0';
  nibble1 = status[position-4];
  nibble2 = status[position-3];
  length = ascii_to_dig(nibble1,nibble2);
 
  for ( ; (position+2 <= i) && (length > 1) ; )   {
    ++octet_count;
    /* Convert ASCII number to hex number */
    nibble1 = status[position++];
    nibble2 = status[position++];
    octet = ascii_to_dig(nibble1,nibble2);
                                  /* decode Octet */
    switch (octet_count)   {
      case OCTET_1:
        printf(" Octet %c = %c%c \n",octet_count,nibble1,nibble2);
        if (octet & BIT_0)
          printf("         - Not Operational\n");
        if (octet & BIT_1)
          printf("         - Not Ready\n");
        if (octet & BIT_2)
          printf("         - Not Operational Transition\n");
        if (octet & BIT_3)
          printf("         - Not Ready Transition\n");
        if (octet & BIT_4)
          printf("         - Physical Link Failure\n");
        if (octet & BIT_5)
          printf("         - Attribute Table may be Corrupted\n");
        if (octet & BIT_6)
          printf("         - Facility Busy\n");
        break;
 
      case OCTET_2:
      case OCTET_3:
      case OCTET_4:
        printf(" Octet %c = %c%c \n",octet_count,nibble1,nibble2);
        if (octet & HEX_FF)
          printf("  %c%c   -- No such data -- Octet reserved\n",nibble1,nibble2);
        break;
 
      case OCTET_5:
        printf(" Octet %c = %c%c \n",octet_count,nibble1,nibble2);
        if (octet & BIT_0)
          printf("         - Drive not Formatted\n");
        if (octet & BIT_1)
          printf("         - Primary Command\n");
        if (octet & BIT_2)
          printf("         - Secondary Command\n");
        if (octet & BIT_3)
          printf("         - Physical block sizes not equal\n");
        if (octet & BIT_4)
          printf("         - Partitions not equal\n");
        if (octet & BIT_5)
          printf("         - No such code - Reserved\n");
        if (octet & BIT_6)
          printf("         - Explicit Reserve Broken\n");
        if (octet & BIT_7)
          printf("         - IML Checksum or Bus Error\n");
        break;
      case OCTET_6:
        printf(" Octet %c = %c%c \n",octet_count,nibble1,nibble2);
        if (octet & BIT_0)
          printf("         - Drive Daignostics Failed\n");
        if (octet & BIT_1)
          printf("         - Can't Read System Cylinder Tables\n");
        if (octet & HEX_30)
          printf("   %x     - No such code - Reserved\n",(octet&HEX_30));
        length = -1;       /* to get out of for loop */
        break;
    }  /*end switch*/
  }  /*end for loop*/
  printf("\n----------------------------------------");
  printf("----------------------------------------\n");
return (position);
}  /*end  decode_x4 */
 
#pragma LIST EJECT
/*
======================================================================
*/
 
 
 
 
 
int decode_x5(status,i,position)
int i, position;
char status[];
{
 
  char octet_count, nibble1, nibble2;
  int octet, length;
 
  octet_count = '0';
  nibble1 = status[position-4];
  nibble2 = status[position-3];
  length = ascii_to_dig(nibble1,nibble2);
 
  for ( ; (position+2 <= i) && (length > 1) ; )   {
    ++octet_count;
    /* Convert ASCII number to hex number */
    nibble1 = status[position++];
    nibble2 = status[position++];
    length--;
    octet = ascii_to_dig(nibble1,nibble2);
                               /* decode Octet */
    switch (octet_count)   {
      case OCTET_1:
        printf(" Octet %c = %c%c \n",octet_count,nibble1,nibble2);
        if (octet & BIT_0)
          printf("         - Priority Reserve Issued\n");
        if (octet & BIT_1)
          printf("         - Attributes Updated\n");
        if (octet & BIT_2)
          printf("         - Initialization Completed\n");
        if (octet & BIT_3)
          printf("         - Format Completed\n");
        if (octet & HEX_0F)
          printf("   %x     - No such code - Reserved\n",(octet&HEX_0F));
        break;
 
      case OCTET_2:
        printf(" Octet %c = %c%c \n",octet_count,nibble1,nibble2);
        if (octet & BIT_0)
          printf("         - Controller Diagnostic in Progress\n");
        if (octet & BIT_1)
          printf("         - Controller Diagnostic Terminated\n");
        if (octet & HEX_3F)
          printf("   %x     - No such code - Reserved\n",(octet&HEX_3F));
        break;
 
      case OCTET_3:
      case OCTET_4:
        printf(" Octet %c = %c%c \n",octet_count,nibble1,nibble2);
        if (octet & HEX_FF)
          printf("  %c%c  -- No such data -- Octet reserved\n",
                 nibble1,nibble2);
        break;
      case OCTET_5:
        printf(" Octet %c = %c%c \n",octet_count,nibble1,nibble2);
        if (octet & BIT_0)
          printf("         - Format Table Corrupted\n");
        if (octet & BIT_6)
          printf("         - Explicit Reserve Broken\n");
        if (octet & HEX_7D)
          printf("   %x     - No such code - Reserved\n",(octet&HEX_7D));
        length = -1;    /* to get out of for loop */
        break;
    }  /*end switch*/
  }  /*end for loop*/
  printf("\n----------------------------------------");
  printf("----------------------------------------\n");
return (position);
}  /*end  decode_x5 */
