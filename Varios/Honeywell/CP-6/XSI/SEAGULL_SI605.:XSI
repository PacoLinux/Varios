/*M* SEAGULL_SI605 -- XUU interface module (zbm$input$functions:6) */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
 
/*P*    NAME:     SEAGULL_SI605
        PURPOSE:  This file contains "stolen" code (shhhhh).  It was
                  borrowed directly from the B00 C compiler accounts.
                  The routines within serve as an XUU interface.
 
        DESCRIPTION:
          The extractable comments were kept in tact for all the
          functions, so have a look below for any details needed.
          The comments not needed for extraction were changed as
          follows:  *M* -> *zbM*, etc.
*/
/********************************************************************/
 
 
%eject;
/*zbM*     ZB_INPUT$FUNCTIONS      */
/*zbT*/
/*zbP*     NAME:       ZB_INPUT$FUNCTIONS
         PURPOSE:    Uses XUU services to read input of source
         DESCRIPTION:This does your basic files services of reading
                     data using the fast sequential I/O of
                     XUU services
*/
 
/*F*     NAME:       SG5_INPUT_OPEN
         PURPOSE:    Opens files using XUU services
         DESCRIPTION:This routine opens a file using XUU services
                     and allows the capability to use XUU's fastio read services
*/
/*D*     NAME:    SG5_INPUT_OPEN
         CALL:    CALL SG5_INPUT_OPEN( FILEINFO)
         INPUT:
                  FILEINFO.FILENAME$   - If the file is to be opened as
                                         an include file, it contains the name of the file.
                  FILEINFO.FILETYPE    - Type of file it should be opened as:
                                           =1    Open as a base file
                                           =2    Open a Base and update file
                                           =3    Open as an include file
         OUTPUT:
                  FILEINFO.OPEN_FLAG   - If the file is opened ok it is
                                         set to a 1 else it is a 0.
                  FILEINFO.LEVEL       - If the file was an include file,
                                         it contains the nesting level of the include file
         DESCRIPTION:
            Check and see what type of file is to be opened. If it is an
            include file create an FPT that points to the filename passed
            Open the file using the fast sequential I/O of XUU. If
            everything up to this point is ok, set the OPEN_FLAG parameter
            and the nesting of the include block (if neccessary).
*/
 
SG5_INPUT_OPEN: proc( FILEINFO);
 
%include SEAGULL05:i;   /* It was: zbm$input$types_c; */
   %SG5$FILEINFO( NAME=FILEINFO, STCLASS="");
 
%include XU_MACRO_C;
%include XU_PERR_C;
   %XUU$ENTRY;
   %XUU$ALLOC_TYPES;
   %XUU_PARAM(   FPTN        =  XUU_PARAM,
                 STCLASS     =  "STATIC SYMDEF",
                 DCB         =  "dcbnum(M$LO)",
                 OPT_UI      =  NO,
                 BLANK_FILL  =  YES,
                 ALLOCATE    =  SG5$ALLOCATE,
                 RELEASE     =  SG5$RELEASE,
                 FAST_BASE   =  YES,
                 FAST_UPDATE =  YES,
                 FAST_INCLUDE=  YES,
                 BASE        =  YES );
 
%include CP_6;
%include CP_6_SUBS;
%include B_ERRORS_C;
   %F$DCB;
   %FPT_CLOSE( FPTN = CLOSE_SI,
               STCLASS = "STATIC SYMDEF",
               DCB     = M$SI);
 
   %FPT_OPEN(  FPTN = OPEN_TEST_UI_CONST,
               STCLASS = "CONSTANT SYMDEF",
               DCB = M$UI,
               TEST = YES);
 
   %FPT_OPEN(  FPTN = OPEN_TEST_UI,
               STCLASS = "");
 
   %FPT_OPEN(  FPTN = OPEN_TEST_OU_CONST,
               STCLASS = "CONSTANT SYMDEF",
               DCB = M$OU,
               TEST = YES);
 
   %FPT_OPEN(  FPTN = OPEN_TEST_OU,
               STCLASS = "");
   %VLP_NAME(  FPTN = VLP_OUNAME,
               LEN = 31);
   %FPT_OPEN(    FPTN        = FPT_XUU_OPEN,
                 STCLASS     = "");
 
   %FPT_OPEN(    FPTN     = FPT_XUU_OPEN_CONST,
                 STCLASS  = CONSTANT,
                 ASN      = FILE,
                 NAME     = FPT_XUU_OPEN_NAME,
                 ACCT     = FPT_XUU_OPEN_ACCT,
                 PASS     = FPT_XUU_OPEN_PASS,
                 WSN      = FPT_XUU_OPEN_WSN,
                 SN       = FPT_XUU_OPEN_SN);
 
   %FPT_FID(     FPTN        = FPT_XUU_FID,
                 STCLASS     = STATIC,
                 NAME        = FPT_XUU_OPEN_NAME,
                 ACCT        = FPT_XUU_OPEN_ACCT,
                 PASS        = FPT_XUU_OPEN_PASS,
                 WSN         = FPT_XUU_OPEN_WSN,
                 SN          = FPT_XUU_OPEN_SN,
                 SNAME       = YES,
                 SACCT       = YES,
                 SPASS       = YES,
                 SWSN        = YES,
                 SSN         = YES);
 
   %VLP_NAME(    FPTN        = FPT_XUU_OPEN_NAME,
                 LEN         = 31);
 
   %VLP_ACCT(    FPTN        = FPT_XUU_OPEN_ACCT);
 
   %VLP_PASS(    FPTN        = FPT_XUU_OPEN_PASS);
 
   %VLP_WSN(     FPTN        = FPT_XUU_OPEN_WSN);
 
   %VLP_SN(      FPTN        = FPT_XUU_OPEN_SN);
 
 
/* DCBs, and Local Data */
dcl   M$DO     dcb;
dcl   M$SI     dcb;
dcl   M$UI     dcb;
dcl   M$OU     dcb;
dcl   M$LO     dcb;
dcl   M$SI$    ptr;
dcl   M$UI$    ptr;
dcl   M$OU$    ptr;
dcl   OUNAME$  ptr;
dcl   POS      sbin;
dcl   FNAME    char(POS)   based;
 
 
/* Entry Points */
dcl   SG5$ALLOCATE               entry(2);
dcl   SG5$RELEASE                entry(1);
dcl   SG5_SETUP_DCBS             entry(1) altret;
dcl   XB_RETURN_ORDINAL_RESULT   entry(1);
 
 
%eject;
/********************************************************************/
/* Begin SG5_INPUT_OPEN here...
 */
   FPT_XUU_OPEN = FPT_XUU_OPEN_CONST;
   FPT_XUU_OPEN.V_ = vector( FPT_XUU_OPEN.V);
   FPT_XUU_FID.ASN_ = vector( FPT_XUU_OPEN.V.ASN#);
   FPT_XUU_FID.RES_ = vector( FPT_XUU_OPEN.V.RES#);
   M$UI$ = dcbaddr( dcbnum( M$UI));
   M$SI$ = dcbaddr( dcbnum( M$SI));
   M$OU$ = dcbaddr( dcbnum( M$OU));
 
/*    See if alternate names were passed in the FPT for source, update,
 *    and object files.  If so, stuff them into the DCBs for M$SI, M$UI,
 *    and M$OU, otherwise assume they were given on command line.
 */
 
   if ( (FILEINFO.SI_FID$ ~= addr( NIL))  or
        (FILEINFO.UI_FID$ ~= addr( NIL))  or
        (FILEINFO.OU_FID$ ~= addr( NIL))  )  then do;
      call SG5_SETUP_DCBS( FILEINFO) altret( CRASH_AND_BURN);
   end;
 
/*    Check to see if an account was specified for the M$OU but no
 *    name.  If so use the M$SI name and change a possibly ending :c
 *    to a :o
 */
 
   if ((M$OU$->F$DCB.ASN# = %FILE#) and (M$OU$->F$DCB.NAME#.L = 2) and
      (substr(M$OU$->F$DCB.NAME#.C,,2) = '*G') and
      (substr(M$OU$->F$DCB.ACCT#,0,1) ~= ' '))
   then do;
      OPEN_TEST_OU = OPEN_TEST_OU_CONST;
      OPEN_TEST_OU.NAME_ = vector( M$SI$->F$DCB.NAME#);
      if ((M$SI$->F$DCB.NAME#.L >=2) and
      (substr(M$SI$->F$DCB.NAME#.C,M$SI$->F$DCB.NAME#.L-2,2) = ':c'))
      then do;
         pos = M$SI$->F$DCB.NAME#.L;
         substr( VLP_OUNAME.NAME#, 0, pos-1) = substr( M$SI$->F$DCB.NAME#.C, 0, pos-1);
         substr( VLP_OUNAME.NAME#, pos-1, 1) = 'o';
         VLP_OUNAME.L# = pos;
         OPEN_TEST_OU.NAME_ = vector( VLP_OUNAME);
      end;
      call M$OPEN( OPEN_TEST_OU) whenaltreturn do; ; end;
   end;
 
   FPT_XUU_OPEN.V.FUN# = %IN#;
 
   if (FILEINFO.FILETYPE = %SG5_IN_BASE) then do;
      XUU_PARAM.FLAGS.BASE# = '1'B;
      XUU_PARAM.FLAGS.UP_DATE# = '0'B;
      XUU_PARAM.FLAGS.INCLUDE# = '0'B;
      XUU_PARAM.FLAGS.OPT_UI# = '0'B;
      call M$CLOSE( CLOSE_SI);   /* in case C lib opened it */
      call XUU$OPEN( XUU_PARAM) altret( CRASH_AND_BURN);
   end; /* if then */
   else if (FILEINFO.FILETYPE = %SG5_IN_UPDATE) then do;
      XUU_PARAM.FLAGS.BASE# = '1'B;
      XUU_PARAM.FLAGS.UP_DATE# = '1'B;
      XUU_PARAM.FLAGS.INCLUDE# = '0'B;
      if (FILEINFO.OPTUI = 1) then
         XUU_PARAM.FLAGS.OPT_UI# = '1'B;
      else
         XUU_PARAM.FLAGS.OPT_UI# = '0'B;
      call M$CLOSE( CLOSE_SI);   /* in case C lib opened it */
      if (FILEINFO.LIST_UPDATE = 1) then
         XUU_PARAM.FLAGS.LU_FIRST# = '1'B;
      else
         XUU_PARAM.FLAGS.LU_FIRST# = '0'B;
      if ((M$UI$->F$DCB.ASN# = %FILE#) and (M$UI$->F$DCB.NAME#.L = 0))
      then do;
         OPEN_TEST_UI = OPEN_TEST_UI_CONST;
         OPEN_TEST_UI.NAME_ = vector( M$SI$->F$DCB.NAME#);
         call M$OPEN( OPEN_TEST_UI) whenaltreturn do; ; end;
      end;
      call XUU$OPEN( XUU_PARAM) altret( CRASH_AND_BURN);
   end; /* opening base and update files */
   else do;
      POS = 128;
      call index( POS,%binasc(0),FILEINFO.FILENAME$->FNAME);
      XUU_PARAM.FLAGS.INCLUDE# = '1'B;
      XUU_PARAM.FLAGS.UP_DATE# = '0'B;
      XUU_PARAM.FLAGS.BASE#    = '0'B;
      XUU_PARAM.FLAGS.OPT_UI#  = '0'B;
      FPT_XUU_FID.TEXTFID_ = vector( substr( FILEINFO.FILENAME$->FNAME,,POS));
      call M$FID( FPT_XUU_FID) altret( CRASH_AND_BURN);
      XUU_PARAM.O.FPT_PTR$ = addr( FPT_XUU_OPEN);
      call XUU$OPEN( XUU_PARAM) altret( CRASH_AND_BURN);
   end; /* opening include file */
 
   FILEINFO.OPEN_FLAG = 1;
   FILEINFO.LEVEL = XUU_PARAM.LEVEL;
   call XB_RETURN_ORDINAL_RESULT( 1);
 
CRASH_AND_BURN:
   FILEINFO.OPEN_FLAG = 0;
   call XB_RETURN_ORDINAL_RESULT( 0);
 
end SG5_INPUT_OPEN;
%eod;
/********************************************************************/
/*F*     NAME:       SG5_SETUP_DCBS
         PURPOSE:    This routine stuffs names & accounts into DCBs.
         DESCRIPTION:  This routine stuffs a source name and account
                       into the M$SI DCB, and ditto for UI and OU.
*/
/*D*     NAME:    SG5_SETUP_DCBS
         CALL:    CALL SG5_SETUP_DCBS( FILEINFO)  ALTRET( LBL)
         INPUT:
                  FILEINFO.SI_FID$  - Ptr to source name, if given
                  FILEINFO.UI_FID$  - Ptr to update name, if given
                  FILEINFO.OU_FID$  - Ptr to object name, if given
         OUTPUT:
                  M$SI.NAME#.L      - Length of source file name
                  M$SI.NAME#.C      - Text of source file name
                  M$SI.ACCT#        - Account source file is in
                  M$UI.NAME#.L      - Length of source file name
                  M$UI.NAME#.C      - Text of source file name
                  M$UI.ACCT#        - Account source file is in
                  M$OU.NAME#.L      - Length of source file name
                  M$OU.NAME#.C      - Text of source file name
                  M$OU.ACCT#        - Account source file is in
         DESCRIPTION:
               If a file name was passed in the FILEINFO structure for
               any of the SI, UI, or OU files, this guy will stuff them
               into the correct DCBs for you.  This is a preparation
               to use the XUU open interface, which grabs the names
               from the DCBs.  It does that because it assumes the names
               are given on the command line, but that is not always
               the case.  So here we are.
*/
 
 
SG5_SETUP_DCBS: proc( FILEINFO) altret;
 
%include SEAGULL05:i;
   %SG5$FILEINFO( NAME=FILEINFO, STCLASS="");
 
%include CP_6;
%include CP_6_SUBS;
   %F$DCB;
   %FPT_FID( FPTN= MAKE_SI_NAME,
             STCLASS= STATIC,
             NAME= TEST_SI_NAME,
             ACCT= TEST_SI_ACCT,
             PASS= TEST_SI_PASS,
             WSN= TEST_SI_WSN,
             SN= TEST_SI_SN       );
 
   %VLP_NAME( FPTN= TEST_SI_NAME,
              LEN= 31               );
   %VLP_ACCT( FPTN= TEST_SI_ACCT);
   %VLP_PASS( FPTN= TEST_SI_PASS);
   %VLP_WSN(  FPTN= TEST_SI_WSN);
   %VLP_SN(   FPTN= TEST_SI_SN);
 
   %FPT_OPEN( FPTN= TEST_SI_CONST,
              STCLASS= CONSTANT,
              ASN= FILE,
              DCB= M$SI,
              NAME= TEST_SI_NAME,
              ACCT= TEST_SI_ACCT,
              PASS= TEST_SI_PASS,
              WSN=  TEST_SI_WSN,
              SN=   TEST_SI_SN,
              TEST= YES          );
   %FPT_OPEN( FPTN= TEST_SI,
              STCLASS= ""    );
 
   %FPT_CLOSE( FPTN= CLOSE_SI,
               STCLASS= SYMREF );
 
   %FPT_FID( FPTN= MAKE_UI_NAME,
             STCLASS= STATIC,
             NAME= TEST_UI_NAME,
             ACCT= TEST_UI_ACCT,
             PASS= TEST_UI_PASS,
             WSN= TEST_UI_WSN,
             SN= TEST_UI_SN       );
 
   %VLP_NAME( FPTN= TEST_UI_NAME,
              LEN= 31               );
   %VLP_ACCT( FPTN= TEST_UI_ACCT);
   %VLP_PASS( FPTN= TEST_UI_PASS);
   %VLP_WSN(  FPTN= TEST_UI_WSN);
   %VLP_SN(   FPTN= TEST_UI_SN);
 
   %FPT_OPEN( FPTN= TEST_UI_CONST,
              STCLASS= CONSTANT,
              ASN= FILE,
              DCB= M$UI,
              NAME= TEST_UI_NAME,
              ACCT= TEST_UI_ACCT,
              PASS= TEST_UI_PASS,
              WSN=  TEST_UI_WSN,
              SN=   TEST_UI_SN,
              TEST= YES          );
   %FPT_OPEN( FPTN= TEST_UI,
              STCLASS= ""    );
 
   %FPT_OPEN( FPTN= OPEN_TEST_OU_CONST,
              STCLASS= SYMREF            );
 
dcl  M$SI   dcb;
dcl  M$UI   dcb;
dcl  M$OU   dcb;
 
dcl  LEN      sbin;
dcl  DOT      sbin;
dcl  FID      char( LEN) based;
dcl  SI_NAME  char( 31);
dcl  SI_LEN   sbin;
 
 
/********************************************************************/
 
 
   /* take care of the SI DCB here...
    */
   if (FILEINFO.SI_FID$ = addr( NIL)) then
      altreturn;
 
   /* do some initialization here...
    */
   TEST_SI = TEST_SI_CONST;
   MAKE_SI_NAME.ASN_ = vector( TEST_SI.V.ASN#);
   MAKE_SI_NAME.RES_ = vector( TEST_SI.V.RES#);
 
   LEN = 128;
   call index( LEN, %binasc( 0), FILEINFO.SI_FID$->FID)  altret( ALT);
 
   /* take the FID passed and stuff it into VLPs here...
    */
   MAKE_SI_NAME.TEXTFID_ = vector( substr( FILEINFO.SI_FID$->FID,,LEN));
   call M$FID( MAKE_SI_NAME)  altret( ALT);
 
   /* got the name information setup, so test open to setup DCBs...
    */
   call M$OPEN( TEST_SI)  whenaltreturn do;  ;  end;
 
 
   /* now do the UI part...
    */
   if (FILEINFO.UI_FID$ = addr( NIL)) then
      return;
 
   /* do some more initialization...
    */
   TEST_UI = TEST_UI_CONST;
   MAKE_UI_NAME.ASN_ = vector( TEST_UI.V.ASN#);
   MAKE_UI_NAME.RES_ = vector( TEST_UI.V.RES#);
 
   LEN = 128;
   call index( LEN, %binasc( 0), FILEINFO.UI_FID$->FID)  altret( ALT);
 
   /* take the FID passed and stuff it into VLPs here...
    */
   MAKE_UI_NAME.TEXTFID_ = vector( substr( FILEINFO.UI_FID$->FID,,LEN));
   call M$FID( MAKE_UI_NAME)  altret( ALT);
 
   if (TEST_UI_NAME.L# = 0) then
      TEST_UI_NAME = TEST_SI_NAME;
 
   /* got the name information setup, so test open to setup DCBs...
    */
   call M$OPEN( TEST_UI)  whenaltreturn do;  ;  end;
 
   /*N* what are we going to do about M$OU here??
    */
OK:
   return;
 
ALT:
   altreturn;
 
end SG5_SETUP_DCBS;
%eod;
 
/********************************************************************/
/*F*     NAME:       SG5_INPUT_READ
         PURPOSE:    This routine reads the next record from a file
         DESCRIPTION:This routine reads the next record from the
                     input files.
*/
/*D*     NAME:    SG5_INPUT_READ
         CALL:    CALL SG5_INPUT_READ (FILEINFO)
         INPUT:
                  FILEINFO.BUFFER$  - A pointer to a buffer that is
                                      to receive the data
                  FILEINFO.BUFSIZE  - The size of the buffer
                  FILEINFO.LEVEL    - The expected nested level of the
                                      record that is to be read
         OUTPUT:
                  FILEINFO.NBYTES   - Number of bytes read in buffer
                  FILEINFO.FILETYPE - What type of file the record
                                      was read from
                  FILEINFO.LEVEL    - If the file was an include file,
                                      the nested include level
                  FILEINFO.KEY$     - Points at the text that contains
                                      the information of the key read.
         DESCRIPTION:
            Check to see if a record is already saved of in a buffer
            (This happens when an EOF was found in an include file
             and its FILEINFO.LEVEL > 1). Get the next record to
            read by using XUU$READ or this saved buffer. Now it
            figures out from what type of file the record comes from
            and its nested include level. If no EOF was found in
            either an include file or the base file, the routine
            returns a 1 else it returns a 0.
*/
 
SG5_INPUT_READ: proc( FILEINFO) altret;
 
 
%include SEAGULL05:i;   /* It was: zbm$input$types_c; */
   %SG5$FILEINFO( NAME=FILEINFO, STCLASS="");
 
%include XU_MACRO_C;
%include XU_PERR_C;
   %XUU$ENTRY;
   %XUU$ALLOC_TYPES;
   %XUU_PARAM( STCLASS=SYMREF);
 
%include CP_6;
%include B_ERRORS_C;
 
 
dcl   XB_RETURN_ORDINAL_RESULT entry (1);
dcl   XBI_SET_ERRNO entry(1);
dcl   BASED_BUF   char(FILEINFO.BUFSIZE)     based;
dcl   BASED_KEY   char(12)                   based;
dcl   BUF_SAVED   char(4096) static;
dcl   NBYTES_OLD  sbin        static   init(0);
dcl   NUM_EOF     sbin        static   init(0);
 
 
      if (NBYTES_OLD ~= 0) then do;
         if (NUM_EOF = 0) then do;
            substr( FILEINFO.BUFFER$->BASED_BUF,0,NBYTES_OLD) = BUF_SAVED;
            FILEINFO.NBYTES = NBYTES_OLD;
            NBYTES_OLD = 0;
            call XB_RETURN_ORDINAL_RESULT( 1);
         end;
         else do;
            FILEINFO.LEVEL = FILEINFO.LEVEL - 1;
            NUM_EOF = NUM_EOF - 1;
            call XB_RETURN_ORDINAL_RESULT( 0);
         end;
      end;
      else do;
         call XUU$READ( XUU_PARAM,
                 vector( FILEINFO.BUFFER$->BASED_BUF)) altret( CHK_ERR);
         FILEINFO.NBYTES = XUU_PARAM.ARS;
      end;
      if (XUU_PARAM.FLAGS.BASE# = '1'B) then
         FILEINFO.FILETYPE = %SG5_IN_BASE;
      else if (XUU_PARAM.FLAGS.UP_DATE# = '1'B) then
         FILEINFO.FILETYPE = %SG5_IN_UPDATE;
      else if (XUU_PARAM.FLAGS.INCLUDE# = '1'B) then
         FILEINFO.FILETYPE = %SG5_IN_INCLUDE;
      if (XUU_PARAM.FLAGS.KEY_REC# = '1'B) then
         substr( FILEINFO.KEY$->BASED_KEY,0,10) = substr( XUU_PARAM.ASCII_KEY,0,10);
      else
         substr( FILEINFO.KEY$->BASED_KEY,0,10) = substr( XUU_PARAM.ASCII_KEY,0,10);
      substr( FILEINFO.KEY$->BASED_KEY,10,1) = %binasc(0);
      substr( FILEINFO.BUFFER$->BASED_BUF,FILEINFO.NBYTES,1) = %binasc(10);
      FILEINFO.NBYTES = FILEINFO.NBYTES + 1;
      if (XUU_PARAM.LEVEL = FILEINFO.LEVEL) then
         call XB_RETURN_ORDINAL_RESULT( 1);
      else do;
         NUM_EOF = FILEINFO.LEVEL - XUU_PARAM.LEVEL - 1;
         FILEINFO.LEVEL = FILEINFO.LEVEL - 1;
         BUF_SAVED = substr( FILEINFO.BUFFER$->BASED_BUF,0,FILEINFO.NBYTES);
         NBYTES_OLD = FILEINFO.NBYTES;
         call XB_RETURN_ORDINAL_RESULT( 0);
      end;
 
CHK_ERR:
      if XUU_PARAM.FLAGS.BASE# = '1'b and
         XUU_PARAM.ERRCODE.MON = '1'b and
         XUU_PARAM.ERRCODE.ERR# = %E$EOF
      then do;
         FILEINFO.LEVEL = -1;
         call XB_RETURN_ORDINAL_RESULT( 0); /* EOF of base file found */
      end;
      else do;
         call XBI_SET_ERRNO( XUU_PARAM.ERRCODE);
         call XB_RETURN_ORDINAL_RESULT( -1); /* An error occurred */
      end;
 
end SG5_INPUT_READ;
%eod;
 
/*F*     NAME:       SG5_INPUT_CLOSE
         PURPOSE:    Closes a file opened using XUU services
         DESCRIPTION:This routine closes a file opened with XUU services
*/
/*D*     NAME:    SG5_INPUT_CLOSE
         CALL:    CALL SG5_INPUT_CLOSE (FILEINFO)
         INPUT:
                  FILEINFO.FILETYPE    - The type of file that is
                                         to be closed
                                          =1 - Close base file
                                          =2 - Close update file
                                          =3 - Close include file
         OUTPUT:
                  FILEINFO.OPEN_FLAG   - This flag is set to a 0
                                         if the file is closed ok
         DESCRIPTION:
            This routine closes the current file that is opened
            as either an include, base, or update file depending
            on the value of FILEINFO.FILETYPE. If the file is closed
            without any errors the FILEINFO.OPEN_FLAG is reset to 0
*/
 
SG5_INPUT_CLOSE: proc( FILEINFO);
 
 
%include SEAGULL05:i;   /* It was: zbm$input$types_c; */
   %SG5$FILEINFO( NAME=FILEINFO, STCLASS="");
 
%include CP_6;
%include B_ERRORS_C;
 
%include XU_MACRO_C;
%include XU_PERR_C;
   %XUU$ENTRY;
   %XUU_PARAM( STCLASS=SYMREF);
 
dcl   XB_RETURN_ORDINAL_RESULT   entry(1);
 
 
   call XUU$CLOSE( XUU_PARAM) altret( CRASH_AND_BURN);
   FILEINFO.OPEN_FLAG = 0;
   call XB_RETURN_ORDINAL_RESULT( 1);
 
CRASH_AND_BURN:
   call XB_RETURN_ORDINAL_RESULT( 0);
 
end SG5_INPUT_CLOSE;
%eod;
 
/*F*     NAME:       SG5$ALLOCATE
         PURPOSE:    This routine allocates a buffer for XUU fastio
         DESCRIPTION:This routine allocates a buffer for XUU's fastio
                     by calling a C routine which in turn calls malloc
*/
/*D*     NAME:    SG5$ALLOCATE
         CALL:    CALL SG5$ALLOCATE (VECT,ATYPE)
         INPUT:
                  ATYPE sbin  - How much space to allocate:
                                 =0 Allocate 4096 bytes
                                 else Allocate 4096 * 4 bytes
         OUTPUT:
                  VECT vector - A vector framing the area allocated
                                by this routine
         DESCRIPTION:
            This routine allocates an area of memory that is used
            as a buffer by XUU services for its fast sequential
            I/O capabilities.  It gets this memory the hard way
            by calling a c routine that calls the C allocation
            routine malloc().
*/
 
SG5$ALLOCATE: proc( VECT, ATYPE);
 
dcl      VECT     vector;
dcl      ATYPE    sbin;
 
%include    CP_6;
%include    B_ERRORS_C;
   %B$TCB;
   %B$ALT;
   %FPT_MERC( FPTN=FPT_MERC, STCLASS="");
   %VLP_ERRCODE( FPTN=ERR_CODE, STCLASS="");
 
dcl      P$          ptr;
dcl      NBYTES      sbin;
dcl      VSTRING     char(NBYTES)      based;
dcl      B$TCB$      ptr               symref;
 
dcl      SG4__MALLOC  entry(2);
 
 
/* Figure out the number of bytes that are needed to be allocated */
 
   if (ATYPE = 0) then
      NBYTES = 4096;
   else
      NBYTES = 4096 * 4;
 
/* Call a C routine that calls malloc this is neccessary because
   PL6 can not call functions and it call routines that are in
   lower case.                                                    */
 
   call SG4__MALLOC( P$, NBYTES);
   if (P$ = addr( nil)) then do;
      ERR_CODE = B$TCB$->B$TCB.ALT$->B$ALT.ERR;
      ERR_CODE.SEV = 3;
      FPT_MERC.JERR_ = vector( ERR_CODE);
      call M$MERC( FPT_MERC);
   end;
   VECT = vector( substr( P$->VSTRING,0));
   return;
end SG5$ALLOCATE;
 
%eod;
 
/*F*     NAME:       SG5$RELEASE
         PURPOSE:    Free up some memory
         DESCRIPTION:This routine frees up some memory that are
                     used by XUU services for its fastio buffers
*/
/*D*     NAME:    SG5$RELEASE
         CALL:    CALL SG5$RELEASE (VECT)
         INPUT:
                  VECT vector - A vector framing the area of memory
                                that is to be released
         OUTPUT:  none
         DESCRIPTION:
            This routine frees up a chunk of memory that was used by
            XUU for its fastio buffers. This memory is freed up by
            using a C routine that calls the C function free()
*/
 
SG5$RELEASE: proc( VECT);
 
dcl      VECT     vector;
 
dcl      SG4__FREE    entry(1);
 
/* Get a pointer to call the C routine free that frees up a chunk of
   memory                                                           */
 
   call SG4__FREE( vbase(VECT));
   return;
end SG5$RELEASE;
%eod;
 
SG5_GETFILENAME: proc( FILETYPE, SOURCE_NAME, UPDATE_NAME);
 
dcl   FILETYPE       sbin;
dcl   SOURCE_NAME    char(132);
dcl   UPDATE_NAME    char(132);
 
%include SEAGULL05:i;   /* It was: zbm$input$types_c; */
 
%include CP_6;
%include CP_6_SUBS;
   %FPT_UNFID( FPTN=UNFID);
 
dcl   XB_RETURN_ORDINAL_RESULT   entry(1);
dcl   M$SI  dcb;
dcl   M$UI  dcb;
 
/*    Local Variables */
dcl   NAME_LEN    sbin;
dcl   RS       sbin;
 
 
      RS = 0;
      NAME_LEN = 0;
      UNFID.V.DCB# = dcbnum( M$SI);
      UNFID.TEXTFID_ = vector( SOURCE_NAME);
      UNFID.LEN_ = vector( NAME_LEN);
      call M$UNFID( UNFID) altret( ERR);
      substr( SOURCE_NAME,NAME_LEN,1) = %binasc(0);
 
      if (FILETYPE = %SG5_IN_UPDATE)
      then do;
         NAME_LEN = 0;
         UNFID.V.DCB# = dcbnum( M$UI);
         UNFID.TEXTFID_ = vector( UPDATE_NAME);
         UNFID.LEN_ = vector( NAME_LEN);
         call M$UNFID( UNFID) altret( ERR);
         substr( UPDATE_NAME,NAME_LEN,1) = %binasc(0);
      end; /* UNFIDDING M$UI */
      RS = 1;
 
ERR:
      call XB_RETURN_ORDINAL_RESULT( RS);
end SG5_GETFILENAME;
