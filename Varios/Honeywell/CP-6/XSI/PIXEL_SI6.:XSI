/*M*  PIXEL_SI6  Picture enhancer and printer */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
 
PIXEL: PROC MAIN;
 
%INCLUDE PIXEL_C;
%INCLUDE CP_6;
%INCLUDE CP_6_SUBS;
%INCLUDE XU_MACRO_C;
%INCLUDE XU_SUBS_C;
%INCLUDE XU_FORMAT_C;
%INCLUDE XUF_ENTRY;
%INCLUDE XUH_MACRO_C;
%INCLUDE XUR_ENTRY;
%INCLUDE PIXEL_C62;
 
%PARSE$OUT;
%PARSE$SYM;
%F_FDS  (NAME=FDS,
         DCB=M$ME,
         BUF=MESSAGE_BUFFER);
 
DCL M$SI DCB;
DCL M$ME DCB;
DCL M$LO DCB;
 
DCL F$PIXELS DCB;
DCL F$ENHANCE DCB;
DCL SCRATCH_DCB_FOR_XUE$EVAL DCB;
 
DCL PICTURE_COMMAND BIT (36) SYMREF;
DCL BLK$ PTR;
DCL CPOS UBIN;
 
DCL ERR BIT (36);
DCL ERRCODE REDEF ERR UBIN WORD;
 
DCL PROMPT CHAR (0) CONSTANT INIT ('=> ');
DCL PV BIT (72) DALIGNED CONSTANT INIT (VECTOR(PROMPT));
 
DCL MESSAGE_BUFFER CHAR (140) STATIC;
 
DCL CHARS UBIN;
DCL CHR CHAR (1);
DCL LOWER UBIN;
DCL UPPER UBIN;
 
DCL RECL UBIN;
DCL NRECS UBIN;
DCL COLS UBIN;
DCL WIDTH UBIN;
 
DCL THRESHOLD UBIN;
DCL SAMPLE UBIN;
DCL PHASE UBIN;
DCL LPI UBIN;
DCL CPI UBIN;
DCL COMPRESS UBIN;
DCL SMOOTH LOGICAL;
DCL INVERT LOGICAL STATIC INIT (%NO#);
DCL VFC UBIN;
DCL SHIFT UBIN;
 
DCL ENHANCING LOGICAL STATIC INIT (%NO#);
DCL HAVE_ENHANCEMENT LOGICAL STATIC INIT (%NO#);
DCL COMPLAINED LOGICAL;
 
DCL PIXEL_UNWIND REMEMBER STATIC SYMDEF;
 
DCL P$ PTR;
DCL P1$ PTR;
DCL P2$ PTR;
DCL P3$ PTR;
DCL P4$ PTR;
DCL P5$ PTR;
DCL LEFT$ PTR;
DCL RIGHT$ PTR;
 
DCL LEFT_X SBIN;
DCL LEFT_Y SBIN;
DCL RIGHT_X SBIN;
DCL RIGHT_Y SBIN;
 
DCL PIXEL (0:0) UBIN BYTE UNAL BASED;
DCL CPIXELS CHAR (RECL) BASED;
 
DCL M$SI$ PTR;
DCL M$LO$ PTR;
DCL F$PIXELS$ PTR;
 
DCL STRIKES (0:5) CHAR (256);
DCL NPATTERNS UBIN WORD STATIC INIT (0);
DCL NSTRIKES UBIN;
 
DCL HITS (0:255) UBIN;
DCL SAVED_HITS (0:255) UBIN;
DCL DESIRED (0:255) UBIN;
DCL TOTAL_HITS UBIN STATIC INIT (0);
DCL SMOOTHED (0:255) UBIN;
DCL TOT_DESIRED UBIN;
DCL MAX_HITS UBIN;
DCL XINC UBIN;
DCL YINC UBIN;
 
DCL P10 (0:5) UBIN CONSTANT INIT (1, 10, 100, 1000, 10000, 100000);
 
DCL HIST_COUNT (0:63) UBIN;
DCL HIST_TOT (0:63) UBIN;
DCL PEAK UBIN;
 
DCL HIST_LINE CHAR (64);
 
DCL XLATE_TABLE (0:255) UBIN BYTE UNAL;
DCL INVERT_TABLE (0:255) UBIN BYTE UNAL;
 
DCL I SBIN;
DCL J SBIN;
DCL K SBIN;
DCL L SBIN;
DCL M SBIN;
DCL N SBIN;
 
DCL THIS UBIN;
DCL PREV UBIN;
DCL NEXT UBIN;
DCL ABOVE UBIN;
DCL BELOW UBIN;
 
DCL PIXEL_ABORT ENTRY;
 
DCL 1 LINE STATIC,
      2 VFC CHAR (1),
      2 TEXT CHAR (4095);
 
DCL B$TCB$ PTR SYMREF READONLY;
 
%EJECT;
DCL NO_PIXEL_FILE CHAR (0) CONSTANT INIT
   ('No pixel file specified - fatal error!');
 
DCL 1 HELLO_FMT CONSTANT,
   2 * CHAR (0) INIT ('%/Pixel file %A contains %D records of %D bytes each.'),
   2 * CHAR (0) INIT ('%/Output medium will accept %D columns per page.%/');
 
DCL HIST_HEADER CHAR (0) CONSTANT INIT ('%/%5-/%64(-%)\');
 
DCL HIST_FMT CHAR (0) CONSTANT INIT ('%5-|%A|');
 
DCL HIST_TRAILER CHAR (0) CONSTANT INIT ('%5-\%64(-%)/%/%6-0%67-255%2/');
 
DCL COMPLAINT_FMT CHAR (0) CONSTANT INIT ('%A');
 
%EJECT;
%B$ALT  (STCLASS=BASED);
%B$TCB  (STCLASS="BASED(B$TCB$)");
 
%F$DCB;
 
%FPT_OPEN  (FPTN=OPEN_ME,
            DCB=M$ME,
            FUN=CREATE);
 
%FPT_OPEN  (FPTN=OPEN_PIXELS,
            DCB=F$PIXELS,
            FUN=IN);
 
%FPT_OPEN  (FPTN=OPEN_LO,
            DCB=M$LO,
            FUN=CREATE,
            DISP=NAMED);
 
%FPT_OPEN  (FPTN=OPEN_ENHANCE,
            DCB=F$ENHANCE,
            DISP=NAMED,
            ORG=CONSEC,
            XTNSIZE=10,
            IXTNSIZE=10);
 
%FPT_CLOSE (FPTN=CLOSE_LO,
            DCB=M$LO,
            DISP=SAVE);
 
%FPT_CLOSE (FPTN=CLOSE_ENHANCE,
            DCB=F$ENHANCE,
            DISP=SAVE,
            RELG=YES);
 
%FPT_READ  (FPTN=READ_PIXELS,
            DCB=F$PIXELS);
 
%FPT_WRITE (FPTN=WRITE_LO,
            DCB=M$LO,
            VFC=YES,
            BUF=LINE);
 
%FPT_WRITE (FPTN=WRITE_ENHANCE,
            DCB=F$ENHANCE);
 
%FPT_PRECORD  (FPTN=POSITION_PIXELS,
               DCB=F$PIXELS);
 
%FPT_REW   (FPTN=REWIND_PIXELS,
            DCB=F$PIXELS);
 
%FPT_DEVICE   (FPTN=EJECT_LO,
               DCB=M$LO,
               PAGE=YES);
 
%FPT_INT   (FPTN=SET_BREAK_CONTROL,
            UENTRY=XUR$BREAK);
 
%FPT_GDS   (FPTN=GET_SEGMENT,
            SEGSIZE=5000,
            RESULTS=SEGMENT_);
 
%VLP_VECTOR   (FPTN=SEGMENT_,
               SEGID='0'O);
 
%XUH_PARAM (OUTDCB1=M$ME);
 
%XUR_INIT  (NAME=INIT_XUR,
            PP_DCB=SCRATCH_DCB_FOR_XUE$EVAL,
            ABORT=PIXEL_ABORT);

%VA_PIXEL_HEADER;
 
%EJECT;
FETCH: PROC (P$, VALUE);
 
DCL P$ PTR;
DCL VALUE UBIN;
 
   CALL CHARBIN (VALUE, P$ -> OUT$BLK.SUBLK$(0) -> OUT$SYM.TEXT);
 
   RETURN;
 
END FETCH;
 
%EJECT;
TEST: PROC (THIS, OTHER);
 
DCL THIS UBIN;
DCL OTHER UBIN;
 
DCL DIFF SBIN;
 
   DIFF = THIS - OTHER;
 
   IF (DIFF >= 0 AND DIFF >= THRESHOLD)
    OR (DIFF < 0 AND DIFF <= -THRESHOLD)
     THEN DO;
 
      TOTAL_HITS = TOTAL_HITS + 1;
      HITS (THIS) = HITS(THIS) + 1;
      END;
 
   RETURN;
 
END TEST;
 
%EJECT;
RESET: PROC;
 
   FDS.DCB# = DCBNUM(M$ME);
 
   RETURN;
 
END RESET;
 
%EJECT;
MAKE_XLATE: PROC ALTRET;
 
DCL WANT UBIN;
DCL GOT UBIN;
DCL HERE UBIN;
DCL I UBIN;
 
   IF NOT ENHANCING
     THEN DO;
 
      CALL COMPLAIN ('No enhancement parameters entered!');
      ALTRETURN;
      END;
 
   WANT = 0;
   GOT = 0;
   HERE = 0;
 
   DO I = 0 TO 255;
 
      WANT = WANT + DESIRED(I);
 
      DO WHILE (HERE <= 255 AND WANT * TOTAL_HITS >= GOT * TOT_DESIRED);
 
         XLATE_TABLE(HERE) = I;
         GOT = GOT + HITS(HERE);
         HERE = HERE + 1;
 
         END;
 
      END;
 
   RETURN;
 
END MAKE_XLATE;
 
%EJECT;
COMPLAIN: PROC (STRING) ALTRET;
 
DCL STRING CHAR (132);
 
DCL I UBIN;
 
   CALL INDEX (I, '!', STRING);
 
   CALL X$WRITE (FDS, VECTOR(COMPLAINT_FMT),
    VECTOR(SUBSTR(STRING, 0, I+1)));
 
   ALTRETURN;
 
END COMPLAIN;
 
%EJECT;
 
ROTATE_BUFFERS: PROC;
 
DCL TEMP$ PTR;
 
   TEMP$ = P5$;
   P5$ = P4$;
   P4$ = P3$;
   P3$ = P2$;
   P2$ = P1$;
   P1$ = TEMP$;
 
   RETURN;
 
END ROTATE_BUFFERS;
 
%EJECT;
I_O_ERROR: PROC;
 
DCL ERRCODE BIT (36);
DCL ERRDCB UBIN WORD;
 
   ERRCODE = B$TCB.ALT$ -> B$ALT.ERR;
   ERRDCB = B$TCB.ALT$ -> B$ALT.DCB#;
 
   CALL XUR$ERRMSG (ERRCODE, ERRDCB, DCBNUM(M$ME));
 
   UNWIND TO PIXEL_UNWIND;
 
END I_O_ERROR;
 
%EJECT;
DEFAULT_ENHANCEMENT: PROC;
 
DCL I UBIN;
 
   HAVE_ENHANCEMENT = %YES#;
   ENHANCING = %YES#;
 
   TOT_DESIRED = 25600;
 
   DO I = 0 TO 255;
 
      DESIRED(I) = 100;
 
      END;
 
   RETURN;
 
END DEFAULT_ENHANCEMENT;
 
%EJECT;
ANALYZE: PROC;
 
   SETUP: PROC (INC, POINTS, SAMPLES);
 
   DCL INC UBIN;
   DCL POINTS UBIN;
   DCL SAMPLES UBIN;
 
      IF POINTS <= SAMPLES
        THEN
         INC = 1;
        ELSE
         INC = POINTS / (SAMPLES + 1);
 
      RETURN;
 
   END SETUP;
 
   CALL M$REW (REWIND_PIXELS);
 
   HITS = '0'B;
   TOTAL_HITS = 0;
   PHASE = 0;
 
   CALL SETUP (XINC, RECL, SAMPLE);
   CALL SETUP (YINC, NRECS, SAMPLE);
 
   POSITION_PIXELS.V.N# = YINC - 1;
 
   DO FOREVER;
 
      CALL ROTATE_BUFFERS;
 
      IF INVERT
        THEN
         READ_PIXELS.BUF_.BUF$ = P4$;
        ELSE
         READ_PIXELS.BUF_.BUF$ = P1$;
 
 
      CALL M$READ (READ_PIXELS) ALTRET (ANALYSIS_DONE);
 
      IF INVERT
        THEN
         CALL XLATE (P1$ -> CPIXELS, INVERT_TABLE, P4$ -> CPIXELS);
 
      PHASE = PHASE + 1;
 
      IF PHASE > 2
        THEN DO;
 
         THIS = P2$ -> PIXEL(0);
         NEXT = P2$ -> PIXEL(XINC);
 
         DO I = XINC TO RECL - 2*XINC - 1 BY XINC;
 
            PREV = THIS;
            THIS = NEXT;
            NEXT = P2$ -> PIXEL(I + XINC);
            ABOVE = P3$ -> PIXEL(I);
            BELOW = P1$ -> PIXEL(I);
 
            CALL TEST (THIS, PREV);
            CALL TEST (THIS, NEXT);
            CALL TEST (THIS, ABOVE);
            CALL TEST (THIS, BELOW);
 
            END;
 
         END;
 
      IF YINC > 1
        THEN
         CALL M$PRECORD (POSITION_PIXELS) ALTRET (ANALYSIS_DONE);
 
      END;
 
ANALYSIS_DONE:;
 
   RETURN;
 
END ANALYZE;
 
%EJECT;
HISTOGRAM: PROC (HITS);
 
DCL HITS (0:255) UBIN;
 
DCL TOTAL_HITS UBIN;
 
   TOTAL_HITS = 0;
   MAX_HITS = 0;
 
   DO I = 0 TO 255 BY 4;
 
      J = I / 4;
 
      HIST_COUNT(J) = HITS(I) + HITS(I+1) + HITS(I+2) + HITS(I+3);
      TOTAL_HITS = TOTAL_HITS + HIST_COUNT(J);
      HIST_TOT(J) = TOTAL_HITS;
 
      IF MAX_HITS < HIST_COUNT(J)
        THEN
         MAX_HITS = HIST_COUNT(J);
 
      END;
 
   IF MAX_HITS < 25
     THEN
      PEAK = 25;
     ELSE
      PEAK = MAX_HITS * 15 / 10;
 
 
   CALL M$DEVICE (EJECT_LO)
    WHENALTRETURN
     DO;
      CALL I_O_ERROR;
      END;
 
   FDS.DCB# = DCBNUM(M$LO);
 
   CALL X$WRITE (FDS, VECTOR(HIST_HEADER));
 
   DO I = 1 TO 25;
 
      UPPER = (PEAK * (26 - I)) / 25;
      LOWER = (PEAK * (25 - I)) / 25;
 
      HIST_LINE = ' ';
 
      DO J = 0 TO 63;
 
         CHR = ' ';
 
         IF HIST_TOT(J) > (TOTAL_HITS * (25 - I)) / 25
          AND HIST_TOT(J) <= (TOTAL_HITS * (26 - I)) / 25
           THEN
            CHR = '+';
 
         IF HIST_COUNT(J) > LOWER
           THEN
            IF HIST_COUNT(J) > UPPER
              THEN
               IF CHR = ' '
                 THEN
                  CHR = '.';
                 ELSE
                           ;
              ELSE
               IF CHR = ' '
                 THEN
                  CHR = '=';
                 ELSE
                  CHR = '#';
 
         CALL INSERT (HIST_LINE, J, 1, CHR);
 
         END;
 
      CALL X$WRITE (FDS, VECTOR(HIST_FMT), VECTOR(HIST_LINE));
 
      END;
 
   CALL X$WRITE (FDS, VECTOR(HIST_TRAILER));
 
   CALL M$DEVICE (EJECT_LO)
    WHENALTRETURN
     DO;
      CALL I_O_ERROR;
      END;
 
   RETURN;
 
END HISTOGRAM;
 
%EJECT;
GEN_LINE: PROC;
 
DCL LINE# UBIN;
DCL LAST LOGICAL;
DCL PIX CHAR (WIDTH) BASED;
 
   WRITE_LO.BUF_.BOUND = WIDTH;
 
   DO LINE# = 0 TO NSTRIKES - 1;
 
      CALL XLATE (LINE.TEXT, STRIKES(LINE#), P$ -> PIX);
 
      IF LINE# = NSTRIKES - 1
       OR LINE.TEXT = ' '
        THEN DO;
 
         LAST = %YES#;
         LINE# = NSTRIKES - 1;
         END;
 
        ELSE
         LAST = %NO#;
 
      DO CASE (VFC);
 
        CASE (%XDS);
 
         IF LAST
           THEN
            LINE.VFC = ' ';
           ELSE
            LINE.VFC = '-';
 
        CASE (%ANS);
 
         IF LINE# = 0
           THEN
            LINE.VFC = ' ';
           ELSE
            LINE.VFC = '+';
 
       CASE (%CP6);
 
         IF LAST
           THEN
            LINE.VFC = 'A';
           ELSE
            LINE.VFC = '`';
 
        END;
 
      CALL M$WRITE (WRITE_LO)
       WHENALTRETURN
        DO;
         CALL I_O_ERROR;
         END;
 
      END /* do LINE# */;
 
   RETURN;
 
END GEN_LINE;
 
%EJECT;
INITIALIZE_PASS: PROC;
 
   LINE.TEXT = ' ';
 
   DO CASE (VFC);
 
     CASE (%ANS, %XDS);
 
      LINE.VFC = '1';
 
     CASE (%CP6);
 
      LINE.VFC = 'r';
 
     END;
 
   WRITE_LO.BUF_.BOUND = 0;
 
   CALL M$WRITE (WRITE_LO)
    WHENALTRETURN
     DO;
      CALL I_O_ERROR;
      END;
 
END INITIALIZE_PASS;
 
%EJECT;
PRINT_IT: PROC;
 
DCL BYTES_WIDE UBIN;
DCL PASSES UBIN;
DCL PASS UBIN;
DCL RECS_OUT UBIN;
DCL RECORD UBIN;
DCL BLUR SBIN;
DCL START_COL UBIN;
DCL AT_REC SBIN;
DCL NEED_REC SBIN;
 
   BYTES_WIDE = RECL * 1000 / COMPRESS;
   PASSES = 1 + (BYTES_WIDE - 1) / COLS;
 
   RECS_OUT = (NRECS * 1000 * LPI) / (COMPRESS * CPI);
 
   IF ENHANCING
     THEN
      CALL MAKE_XLATE;
 
   IF INVERT OR ENHANCING
     THEN
      IF INVERT AND ENHANCING
        THEN
         READ_PIXELS.BUF_.BUF$ = P4$;
        ELSE
         READ_PIXELS.BUF_.BUF$ = P3$;
     ELSE
      READ_PIXELS.BUF_.BUF$ = P1$;
 
   DO PASS = 0 TO PASSES - 1;
 
      CALL M$REW (REWIND_PIXELS);
 
      CALL INITIALIZE_PASS;
 
      IF PASS = PASSES - 1
        THEN
         WIDTH = MOD(BYTES_WIDE - 1, COLS) + 1;
        ELSE
         WIDTH = COLS;
 
      START_COL = PASS * COLS;
 
      AT_REC = 0;
 
      DO RECORD = 0 TO RECS_OUT - 1;
 
         NEED_REC = (RECORD * COMPRESS * CPI) / (1000 * LPI);
 
         IF NEED_REC ~= AT_REC - 1
           THEN DO;
 
            IF NEED_REC ~= AT_REC
              THEN DO;
 
               POSITION_PIXELS.V.N# = NEED_REC - AT_REC;
               CALL M$PRECORD (POSITION_PIXELS) ALTRET (PASS_EOF);
               END;
 
            CALL M$READ (READ_PIXELS) ALTRET (PASS_EOF);
 
            IF INVERT
              THEN
               IF ENHANCING
                 THEN DO;
 
                  CALL XLATE (P3$ -> CPIXELS, INVERT_TABLE, P4$ -> CPIXELS);
                  CALL XLATE (P1$ -> CPIXELS, XLATE_TABLE, P3$ -> CPIXELS);
                  END;
 
                 ELSE
                  CALL XLATE (P1$ -> CPIXELS, INVERT_TABLE, P3$ -> CPIXELS);
 
              ELSE
               IF ENHANCING
                 THEN
                  CALL XLATE (P1$ -> CPIXELS, XLATE_TABLE, P3$ -> CPIXELS);
 
            AT_REC = NEED_REC + 1;
 
            END;
 
         IF COMPRESS = 1000 AND NOT SMOOTH
           THEN
            P$ = PINCRC(P1$, START_COL);
 
           ELSE DO;
 
            P$ = P2$;
            BLUR = 0;
 
            DO J = 0 TO WIDTH - 1;
 
               K = ((START_COL + J) * COMPRESS) / 1000;
 
               IF SMOOTH
                 THEN DO;
 
                  L = P1$ -> PIXEL(K) + BLUR;
 
                  IF L < 0
                    THEN
                     L = 0;
                    ELSE
                     IF L > 255
                       THEN
                        L = 255;
 
                  M = SMOOTHED(L);
                  BLUR = L - M;
                  P$ -> PIXEL(J) = M;
                  END;
 
                 ELSE
                  P$ -> PIXEL(J) = P1$ -> PIXEL(K);
 
               END /* do J */;
 
            END /* else do */;
 
         CALL GEN_LINE;
 
         END /* do RECORD */;
 
PASS_EOF:
 
      END /* do PASS */;
 
   RETURN;
 
END PRINT_IT;
 
%EJECT;
WRITE_IT: PROC;
 
DCL RECORD UBIN;
/* */
      IF ENHANCING THEN
         CALL MAKE_XLATE;
 
      IF INVERT OR ENHANCING THEN
         IF INVERT AND ENHANCING THEN
            READ_PIXELS.BUF_.BUF$=P4$;
         ELSE
            READ_PIXELS.BUF_.BUF$=P3$;
      ELSE
         READ_PIXELS.BUF_.BUF$=P1$;
 
      CALL M$REW(REWIND_PIXELS);
      WRITE_ENHANCE.BUF_.BOUND=RECL-1;
      WRITE_ENHANCE.BUF_.BUF$=P1$;
 
      DO RECORD=0 TO NRECS-1;
         CALL M$READ(READ_PIXELS) WHENALTRETURN
            DO;
            CALL I_O_ERROR;
            END;
 
         IF INVERT THEN
            IF ENHANCING THEN
               DO;
               CALL XLATE(P3$->CPIXELS, INVERT_TABLE, P4$->CPIXELS);
               CALL XLATE(P1$->CPIXELS, XLATE_TABLE, P3$->CPIXELS);
               END;
            ELSE
               CALL XLATE(P1$->CPIXELS, INVERT_TABLE, P3$->CPIXELS);
         ELSE
            IF ENHANCING THEN
               CALL XLATE(P1$->CPIXELS, XLATE_TABLE, P3$->CPIXELS);
 
         CALL M$WRITE(WRITE_ENHANCE) WHENALTRETURN
            DO;
            CALL I_O_ERROR;
            END;

      END;
 
      RETURN;
      END WRITE_IT;
      %EJECT;
WRITE_HEADER: PROC;
/* */
      WRITE_ENHANCE.BUF_=VECTOR(VA_PIXEL_HEADER);
 
      VA_PIXEL_HEADER.TYPE=%VA_GRAY#;
      VA_PIXEL_HEADER.COMP=%VA_NO_COMP#;
      VA_PIXEL_HEADER.NUM_LINES=NRECS;
      VA_PIXEL_HEADER.NUM_PIXELS=RECL;

      CALL M$WRITE(WRITE_ENHANCE) WHENALTRETURN
         DO;
         CALL I_O_ERROR;
         END;

      RETURN;
      END WRITE_HEADER;
      %EJECT;
   M$SI$ = DCBADDR(DCBNUM(M$SI));
   M$LO$ = DCBADDR(DCBNUM(M$LO));
   F$PIXELS$ = DCBADDR(DCBNUM(F$PIXELS));
 
   CALL M$OPEN (OPEN_ME);
 
   CALL M$OPEN (OPEN_LO);

      CALL M$OPEN(OPEN_ENHANCE);
 
   CALL XUR$INIT (INIT_XUR);
   CALL M$INT (SET_BREAK_CONTROL);
 
   IF M$LO$ -> F$DCB.WIDTH# > 0
     THEN
      COLS = M$LO$ -> F$DCB.WIDTH#;
     ELSE
      IF M$LO$ -> F$DCB.RECL# > 0
        THEN
         COLS = M$LO$ -> F$DCB.RECL# - 1;
        ELSE
         COLS = 132;
 
   CALL M$OPEN (OPEN_PIXELS);
 
   IF F$PIXELS$ -> F$DCB.DDEV.IC#
     THEN DO;
 
      CALL X$WRITE (FDS, VECTOR(NO_PIXEL_FILE));
      CALL M$ERR;
      END;
 
   CALL M$GDS (GET_SEGMENT);
 
   READ_PIXELS.BUF_ = SEGMENT_;
 
   CALL M$READ (READ_PIXELS);
 
   RECL = F$PIXELS$ -> F$DCB.ARS#;
 
   I = ((RECL + 3) / 4 ) * 5 - GET_SEGMENT.V.SEGSIZE#;
 
   IF I > 0
     THEN DO;
 
      GET_SEGMENT.V.SEGSIZE# = I;
      CALL M$GDS (GET_SEGMENT);
      END;
 
   P1$ = SEGMENT_.PTR$;
   P2$ = PINCRC (P1$, RECL);
   P3$ = PINCRC (P2$, RECL);
   P4$ = PINCRC (P3$, RECL);
   P5$ = PINCRC (P4$, RECL);
 
   READ_PIXELS.BUF_.BOUND = RECL - 1;
 
   POSITION_PIXELS.V.N# = 99999;
 
   CALL M$PRECORD (POSITION_PIXELS) ALTRET (EXPECTED_EOF);
 
EXPECTED_EOF:
 
   NRECS = F$PIXELS$ -> F$DCB.ARS# + 1;
 
   CALL X$WRITE (FDS, VECTOR(HELLO_FMT),
    VECTOR(SUBSTR(F$PIXELS$ -> F$DCB.NAME#.C, 0, F$PIXELS$ -> F$DCB.NAME#.L)),
    VECTOR(NRECS), VECTOR(RECL), VECTOR(COLS));
 
   DO I = 0 TO 255;
 
      INVERT_TABLE(I) = 255 - I;
 
      END;
 
   LPI = 6;
   CPI = 10;
   COMPRESS = 1000;
 
   REMEMBER RST IN PIXEL_UNWIND;
 
   DO FOREVER;
 
RST:  CALL RESET;
 
      CALL XUR$GETCMD (PICTURE_COMMAND, BLK$, PV) ALTRET (COMMAND_ERROR);
 
      CALL PROCESS;
 
      DO NEVER;
 
   COMMAND_ERROR:
 
         CALL XUR$ECHOIF (DCBNUM(M$ME));
 
         CALL XUR$ERRPTR (, DCBNUM(M$ME));
 
         CALL XUR$ERRMSG (BLK$, DCBNUM(M$SI), DCBNUM(M$ME));
 
         END;
 
      END;
 
%EJECT;
PROCESS: PROC;
 
CMD:  DO CASE (OUT$BLK.CODE);
 
     CASE (%PATTERN);
 
      NPATTERNS = OUT$BLK.NSUBLKS;
      NSTRIKES = 0;
 
      DO I = 0 TO 5;
 
         STRIKES(I) = ' ';
 
         END;
 
      DO I = 0 TO NPATTERNS - 1;
 
         P$ = OUT$BLK.SUBLK$(I);
 
         CHARS = P$ -> OUT$SYM.COUNT;
 
         IF NSTRIKES < CHARS
           THEN
            NSTRIKES = CHARS;
 
         DO J = 0 TO CHARS - 1;
 
            CHR = SUBSTR(P$ -> OUT$SYM.TEXT, J, 1);
 
            LOWER = (256 * I) / NPATTERNS;
            UPPER = (256 * (I + 1)) / NPATTERNS - 1;
 
            DO K = LOWER TO UPPER;
 
               CALL INSERT (STRIKES(J), K, 1, CHR);
 
               END;
 
            END;
 
         END;
 
%EJECT;
     CASE (%ANALYZE);
 
      THRESHOLD = 0;
      SAMPLE = 0;
 
      DO I = 0 TO OUT$BLK.NSUBLKS - 1;
 
         P$ = OUT$BLK.SUBLK$(I);
 
         DO CASE (P$ -> OUT$BLK.CODE);
 
           CASE (%THRESHOLD);
 
            CALL FETCH (P$, THRESHOLD);
 
           CASE (%SAMPLE);
 
            CALL FETCH (P$, SAMPLE);
 
           CASE (%SAMPLE_ALL);
 
            SAMPLE = 999999;
 
           END;
 
         END;
 
      IF SAMPLE = 0
        THEN
         SAMPLE = 50;
 
      CALL ANALYZE;
 
%EJECT;
     CASE (%HISTOGRAM);
 
      IF OUT$BLK.NSUBLKS = 0
        THEN
         I = %RAW;
        ELSE
         I = OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE;
 
      DO CASE (I);
 
        CASE (%RAW);
 
         IF TOTAL_HITS = 0
           THEN
            CALL COMPLAIN ('No analysis data!');
           ELSE
            CALL HISTOGRAM (HITS);
 
        CASE (%DESIRED);
 
         IF HAVE_ENHANCEMENT
           THEN
            CALL HISTOGRAM (DESIRED);
           ELSE
            CALL COMPLAIN ('No enhancement parameters entered!');
 
        CASE (%ACTUAL);
 
        END;
 
%EJECT;
     CASE (%ENHANCE);
 
      IF TOTAL_HITS = 0
        THEN
         CALL COMPLAIN ('No analysis data!') ALTRET (END_OF_ENHANCE);
 
      IF OUT$BLK.NSUBLKS = 0
        THEN
         CALL DEFAULT_ENHANCEMENT;
        ELSE
         DO CASE (OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE);
 
        CASE (%ENHANCE_ON);
 
         IF HAVE_ENHANCEMENT
           THEN
            ENHANCING = %YES#;
           ELSE
            CALL DEFAULT_ENHANCEMENT;
 
        CASE (%ENHANCE_OFF);
 
         ENHANCING = %NO#;
 
        CASE (%ENHANCE_SEGMENT);
 
         ENHANCING = %YES#;
         HAVE_ENHANCEMENT = %YES#;
 
         TOT_DESIRED = 0;
         DESIRED = '0'B;
 
         COMPLAINED = %NO#;
 
         IF OUT$BLK.SUBLK$(0) -> OUT$BLK.NSUBLKS > 0
           THEN
            DO I = 1 TO OUT$BLK.SUBLK$(0) -> OUT$BLK.NSUBLKS - 1;
 
            LEFT$ = OUT$BLK.SUBLK$(0) -> OUT$BLK.SUBLK$ (I-1);
            RIGHT$ = OUT$BLK.SUBLK$(0) -> OUT$BLK.SUBLK$ (I);
 
            CALL CHARBIN (LEFT_X, LEFT$ -> OUT$BLK.SUBLK$(0) -> OUT$SYM.TEXT);
            CALL CHARBIN (LEFT_Y, LEFT$ -> OUT$BLK.SUBLK$(1) -> OUT$SYM.TEXT);
            CALL CHARBIN (RIGHT_X, RIGHT$ -> OUT$BLK.SUBLK$(0) -> OUT$SYM.TEXT);
            CALL CHARBIN (RIGHT_Y, RIGHT$ -> OUT$BLK.SUBLK$(1) -> OUT$SYM.TEXT);
 
            IF LEFT_X >= RIGHT_X
              THEN
               CALL COMPLAIN ('Left X >= right X!');
              ELSE
               IF RIGHT_X > 255
                 THEN
                  CALL COMPLAIN ('Off scale!');
                 ELSE
                  DO J = LEFT_X TO RIGHT_X;
 
                     K = DESIRED(J);
                     DESIRED(J) = LEFT_Y + ((RIGHT_Y - LEFT_Y) * (J - LEFT_X)) /
                      (RIGHT_X - LEFT_X);
 
                     IF K ~= 0
                      AND K ~= DESIRED(J)
                      AND NOT COMPLAINED
                       THEN DO;
 
                        COMPLAINED = %YES#;
                        CALL COMPLAIN ('Segments overlap badly!');
                        END;
 
                     TOT_DESIRED = TOT_DESIRED + DESIRED(J) - K;
 
                     END;
 
            END /* do i = .. */;
 
        END;
 
END_OF_ENHANCE: ;
 
%EJECT;
     CASE (%PRINT);
 
      IF NPATTERNS = 0
        THEN
         CALL COMPLAIN ('No patterns entered!') ALTRET (END_PRINT);
 
      SMOOTH = %NO#;
      SHIFT = 0;
 
      IF M$LO$ -> F$DCB.ORG# = %TERMINAL#
       OR M$LO$ -> F$DCB.ORG# = %UR#
        THEN DO;
 
         VFC = %CP6;
         WRITE_LO.V.DVBYTE.VFC# = %YES#;
         END;
 
        ELSE DO;
 
         VFC = %ANS;
         WRITE_LO.V.DVBYTE.VFC# = %NO#;
         END;
 
      DO I = 0 TO OUT$BLK.NSUBLKS - 1;
 
         P$ = OUT$BLK.SUBLK$(I);
 
         DO CASE (P$ -> OUT$BLK.CODE);
 
           CASE (%LPI);
 
            CALL FETCH (P$, LPI);
 
           CASE (%CPI);
 
            CALL FETCH (P$, CPI);
 
           CASE (%COMPRESS);
 
            CALL FETCH (P$, COMPRESS);
            COMPRESS = COMPRESS * 1000;
 
            IF P$ -> OUT$BLK.NSUBLKS = 2
              THEN DO;
 
               CALL CHARBIN (J, P$ -> OUT$BLK.SUBLK$(1) -> OUT$SYM.TEXT);
               K = P$ -> OUT$BLK.SUBLK$(1) -> OUT$SYM.COUNT;
 
               IF K <= 3
                 THEN
                  COMPRESS = COMPRESS + J * P10 (3 - K);
                 ELSE
                  COMPRESS = COMPRESS + J / P10 (K - 3);
 
               END;
 
           CASE (%SMOOTH);
 
            SMOOTH = %YES#;
 
           CASE (%SHIFT);
 
            CALL FETCH (P$, SHIFT);
 
           CASE (%VFC);
 
            VFC = P$ -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE;
 
           CASE (%SHEETS);
 
            CALL FETCH (P$, J);
 
            COMPRESS = 1000 * RECL / (COLS * J) + 1;
 
           END /* do case P$ -> OUT$BLK.CODE */;
 
         END /* do i */;
 
      DO I = 0 TO 255;
 
         SMOOTHED(I) = (I * NPATTERNS / 256) * 256 / NPATTERNS +
          (128 / NPATTERNS);
 
         END;
 
      CALL PRINT_IT;
 
END_PRINT: ;
 
%EJECT;
      CASE(%WRITE);
 
         IF OUT$BLK.NSUBLKS > 0
           THEN DO;
            P$=OUT$BLK.SUBLK$(0);
            IF P$->OUT$BLK.CODE = %CAP THEN
               CALL WRITE_HEADER;
            END;
 
         CALL WRITE_IT;

      %EJECT;
     CASE (%INVERT);
 
      IF OUT$BLK.NSUBLKS = 0
        THEN
         INVERT = %YES#;
        ELSE
         DO CASE (OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE);
 
           CASE (%INVERT_OFF);
 
            INVERT = %NO#;
 
           CASE (%INVERT_ON);
 
            INVERT = %YES#;
 
        END;
 
      IF TOTAL_HITS ~= 0
        THEN DO;
 
         TOTAL_HITS = 0;
         CALL COMPLAIN ('Previous analysis data voided!');
         END;
 
%EJECT;
    CASE (%QMARK);
 
      CALL XUR$MOREMSG (XUH_PARAM);
 
    CASE (%DQMARK);
 
      CALL XUR$ALLMSG (XUH_PARAM);
 
    CASE (%END);
 
      CALL XUR$CLOSE_DCBS;
 
      CALL M$EXIT;
 
    CASE (%HELP);
 
      XUH_PARAM.HELP$ = OUT$BLK.SUBLK$(0) -> OUT$SYM.TEXTC$;
 
      CALL XUR$HELP (XUH_PARAM);;
 
    CASE (%NULL);
 
     END CMD;
 
   RETURN;
 
END PROCESS;
 
END PIXEL;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
PIXEL_ABORT: PROC;
 
DCL PIXEL_UNWIND REMEMBER SYMREF;
 
   UNWIND TO PIXEL_UNWIND;
 
END PIXEL_ABORT;
