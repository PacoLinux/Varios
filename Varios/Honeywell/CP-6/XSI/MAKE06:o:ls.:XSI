

rCC.C03    File=MAKE_SIc06.:XSI                                                      Thu Nov 20 1997  Page=1  
A        1         1             /*M*    make_macro:c      -- Routines to handle macros           */
A        2         2             /*T***********************************************************/
A        3         3             /*T*                                                         */
A        4         4             /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
A        5         5             /*T*                                                         */
A        6         6             /*T***********************************************************/
A        7         7
A        8         8             #include <stdlib.h>
A        9         9             #include <xu_cp6_c.h>
A       10        10             #include <xu_macro_c.h>
A       11        11             #include <xu_subs_c.h>
A       12        12             #define CP6_ESMALLWORK       5      /*  #include <xu_perr_c.h>  */
A       13        13             #define CP6_EWKOVERFLOW      4
A       14        14             #include "MAKE_Cc13"
A       15        15             #include "MAKE_Cc14"
A       16        16             #include <setjmp.h>
A       17        17             #include <string.h>
A       18        18
A       19        19
A       20        20             extern struct p_node PARSECOMMAND; /*Partrge node to parse macros   */
A       21        21
A       22        22             char *ParseWork = 0;
A       23        23             int   ParseWorkSize = 0;
A       24        24             /*********************************************************
A       25        25             char *ExpandMacros();
A       26        26             int  UserParse();
A       27        27             void ReportParseErr();
A       28        28             int  ReportParseLexemes();
A       29        29             int  DoMacSublk();
A       30        30             */
A       31        31             extern struct p_pcb MacroPCB; /*{0, &PARSECOMMAND, 0, 0, UserParse, 0, 1,
A       32        32                           0, 1, 0, 1, 0, 0, {0,0,0,0,0}, {0,0,0,0}, 0, 1, 0, 0,
A       33        33                           0, 0, 0, ReportParseLexemes};       ********/
A       34        34
A       35        35
A       36        36             jmp_buf ExpandParseRetry;
A       37        37
rCC.C03    File=MAKE_SIc06.:XSI                                                      Thu Nov 20 1997  Page=2  
A       38        38
A       39        39
A       40        40             /*D*    NAME:    ExpandMacros
A       41        41                     PURPOSE: To replace macros within text with their correct
A       42        42                              replacement text.
A       43        43             */
A       44        44
A       45        45             char *
A       46        46             ExpandMacros(buf, bsize)
A       47        47               char *buf;
A       48        48               int   bsize;
A       49        49             {
A       50        50    1          struct parse_out *p;
A       51        51    1          int   i;
A       52        52    1
A       53        53    1          MacroSubs = 0;
A       54        54    1          if (!ParseWorkSize)
A       55        55    1             if (!(ParseWork = (char *) malloc(ParseWorkSize = 4096)))
A       56        56    1                crash("Out of memory: ExpandMacros");
A       57        57    1
A       58        58    1          MacroPCB.text = buf;
A       59        59    1          MacroPCB.nchars = bsize;
A       60        60    1          setjmp(ExpandParseRetry);
A       61        61    1
A       62        62    1          MacroPCB.work = ParseWork;
A       63        63    1          MacroPCB.wksz = ParseWorkSize >> 2;
A       64        64    1
A       65        65    1          if (!X_PARSE(&MacroPCB)) {
A       66        66    2             UserParseAlt(&MacroPCB);
A       67        67    2             ReportParseErr(&MacroPCB);
A       68        68    2             MacRecLen = bsize;
A       69        69    2             return buf;
A       70        70    2             }
A       71        71    1
A       72        72    1          SpecMacroFlags = 0;
A       73        73    1          MacRecLen      = 0;
A       74        74    1
rCC.C03    File=MAKE_SIc06.:XSI                                                      Thu Nov 20 1997  Page=3  
A       75        75    1          if (!MacRecBuf)
A       76        76    1             if (!(MacRecBuf = (char *) malloc(MacRecSize = 1024)))
A       77        77    1                crash("Out of Memory: ExpandMacros");
A       78        78    1
A       79        79    1          p = MacroPCB.out;
A       80        80    1
A       81        81    1          if (p->nsublks < 2)  {  /*  No macros present!  */
A       82        82    2             MacRecLen = bsize;
A       83        83    2             return buf;
A       84        84    2             }
A       85        85    1
A       86        86    1          if (buf == MacRecBuf)   {
A       87        87    2             if (AltRecSize < bsize) {
A       88        88    3                int i = (bsize + 1023)/1024 * 1024;
A       89        89    3                if (!(AltRecBuf = (char *)realloc(AltRecBuf,(AltRecSize=i))))
A       90        90    3                   crash("Out of Memory: ExpandMacros");
A       91        91    3                }
A       92        92    2             memcpy(AltRecBuf, buf, bsize);
A       93        93    2             buf = AltRecBuf;
A       94        94    2             }
A       95        95    1
A       96        96    1          i = 0;
A       97        97    1          do {
A       98        98    2             i = DoMacSublk(p, i, buf, bsize);
A       99        99    2             } while (i > 0);
A      100       100    1
A      101       101    1          MacRecBuf[ MacRecLen ] = 0;
A      102       102    1          return MacRecBuf;
A      103       103    1        }
A      104       104
A      105       105
A      106       106             /*D*    NAME:       DoMacSublk
A      107       107                     PURPOSE:    To cause expand a single macro sub-block entry.
A      108       108                     DESCRIPTION:
A      109       109                        This function takes as input a sublk associated with the
A      110       110                        PARSECOMMAND parse.  It causes text to be added to the
A      111       111                        output which is collected in MacRecBuf.
rCC.C03    File=MAKE_SIc06.:XSI                                                      Thu Nov 20 1997  Page=4  
A      112       112             */
A      113       113             int
A      114       114             DoMacSublk(p, i, rec, reclen)
A      115       115               struct parse_out *p;
A      116       116               int               i;
A      117       117               char             *rec;
A      118       118               int               reclen;
A      119       119             {
A      120       120    1          struct parse_sym *ps = (struct parse_sym *)p->sublk[i++];
A      121       121    1          char             *st = rec + ps->cpos;
A      122       122    1          struct sym_macro *macsym;
A      123       123    1          int               ep;
A      124       124    1          int               mr = (i<p->nsublks) ? (p->sublk[i]->code==50) : 0;
A      125       125    1
A      126       126    1             switch (ps->code) {
A      127       127    2
A      128       128    2             case 0:  /* non-macro part: textc isn't always big enuf! */
A      129       129    2                if ( i<p->nsublks && p->sublk[i]->ndtype != CP6_ALTERN) {
A      130       130    3                   ep = p->sublk[i]->cpos;    /* Compute end of field */
A      131       131    3                   while (ep >= 0 && rec[ep] != '$') ep--;
A      132       132    3                   if (p->sublk[i]->code == 5) ep--;
A      133       133    3                   }
A      134       134    2                else ep = reclen;
A      135       135    2                CatenateRec( st, ep - ps->cpos);
A      136       136    2                break;
A      137       137    2
A      138       138    2             case 1:  /* user-defined macro name    */
A      139       139    2                macsym = lookup_sym_macro(&(ps->text[1]), ps->text[0], 4);
A      140       140    2                MacroSubs++;
A      141       141    2                if (!macsym || !macsym->mc_def)
A      142       142    2                   break;
A      143       143    2
A      144       144    2                macsym->mc_used++;
A      145       145    2                if (mr)
A      146       146    2                   modified_reference(p, i, macsym), i+=2;
A      147       147    2                else CatenateRec(macsym->mc_def,macsym->mc_deflen);
A      148       148    2                break;
rCC.C03    File=MAKE_SIc06.:XSI                                                      Thu Nov 20 1997  Page=5  
A      149       149    2
A      150       150    2             case 49: /*  re-construct this name    */
A      151       151    2                CatenateRec("$",1);
A      152       152    2                CatenateRec(&(ps->text[1]),ps->text[0]);
A      153       153    2                break;
A      154       154    2
A      155       155    2             case 50: /*  replace string in previous macro-name    */
A      156       156    2        /*****  warning("### String replacement not implemented\n");  ****/
A      157       157    2             case 51:
A      158       158    2                break;
A      159       159    2
A      160       160    2             default: /*  Special symbols           */
A      161       161    2                macsym = sym_macro_specials[ ps->code ];
A      162       162    2                SpecMacroFlags  |=  1<<ps->code;
A      163       163    2                if (!macsym->mc_def) break;
A      164       164    2                if (mr)
A      165       165    2                   modified_reference(p, i, macsym), i+= 2;
A      166       166    2                else CatenateRec(macsym->mc_def, macsym->mc_deflen);
A      167       167    2                break;
A      168       168    2             }
A      169       169    1          return (i < p->nsublks)? i : 0;
A      170       170    1        }
A      171       171
A      172       172             /*D*    NAME:          UserParse
A      173       173                     PURPOSE:       A generic routine to handle entries from
A      174       174                              X$PARSE to expand the parser work area.
A      175       175                     DESCRIPTION:
A      176       176                        In order to use this function, the user must be using
A      177       177                        ParseWork and ParseWorkSize.  If the workarea has moved
A      178       178                        during expansion, this routine unwinds (longjumps)
A      179       179                        through ExpandParseRetry which is expected to re-start
A      180       180                        the parse of this command.
A      181       181             */
A      182       182
A      183       183             int
A      184       184             UserParse(p)
A      185       185               struct parse_param *p;
rCC.C03    File=MAKE_SIc06.:XSI                                                      Thu Nov 20 1997  Page=6  
A      186       186             {
A      187       187    1          char *q;
A      188       188    1
A      189       189    1          switch (p->type)  {
A      190       190    2
A      191       191    2          case CP6_ESMALLWORK:
A      192       192    2          case CP6_EWKOVERFLOW:
A      193       193    2
A      194       194    2             q = ParseWork;
A      195       195    2             if (!(ParseWork = (char *) realloc(ParseWork, (ParseWorkSize <<=1))))
A      196       196    2                crash("Out of Memory: UserParse");
A      197       197    2
A      198       198    2             if (q != ParseWork) longjmp(ExpandParseRetry, 1);
A      199       199    2             p->wksz = ParseWorkSize >> 2;
A      200       200    2             break;
A      201       201    2          }
A      202       202    1          return 0;
A      203       203    1        }
A      204       204
A      205       205
A      206       206
A      207       207             /*D*    NAME:    UserParseAlt(struct p_pcb *pcb)
A      208       208                     PURPOSE: To expand the parse area if the reason for
A      209       209                              X$PARSE altreturning is work area size.
A      210       210             */
A      211       211
A      212       212             UserParseAlt(pcb)
A      213       213               struct p_pcb *pcb;
A      214       214             {
A      215       215    1          char *q;
A      216       216    1
A      217       217    1          if (pcb->error.err == CP6_ESMALLWORK)  {
A      218       218    2             q = ParseWork;
A      219       219    2             if (!(ParseWork = (char *) realloc(ParseWork, (ParseWorkSize <<= 1))))
A      220       220    2                crash("Out of Memory: UserParseAlt");
A      221       221    2             longjmp(ExpandParseRetry, 1);
A      222       222    2             }
rCC.C03    File=MAKE_SIc06.:XSI                                                      Thu Nov 20 1997  Page=7  
A      223       223    1        }
A      224       224
A      225       225
A      226       226             /*D*    NAME:       CatenateRec
A      227       227                     PURPOSE:    To add text to the output record.
A      228       228             */
A      229       229
A      230       230             CatenateRec(b, s)
A      231       231               char  *b;
A      232       232               int    s;
A      233       233             {
A      234       234    1          int    x;
A      235       235    1
A      236       236    1          if (MacRecSize < (MacRecLen + s))   {
A      237       237    2             x = (s > 1024) ? s+1024 : 1024;
A      238       238    2             if (!(MacRecBuf = (char *) realloc(MacRecBuf, (MacRecSize+=x))))
A      239       239    2                crash("Out of Memory: ExpandMacros");
A      240       240    2             }
A      241       241    1          memcpy(MacRecBuf+MacRecLen, b, s);
A      242       242    1          MacRecLen += s;
A      243       243    1          return;
A      244       244    1        }
A      245       245
A      246       246
A      247       247
A      248       248
A      249       249             /*D*    NAME:          modified_reference(p, i, macsym)
A      250       250                     PURPOSE:       To expand a modified variable reference
A      251       251                                    and add it to the output command.
A      252       252             */
A      253       253
A      254       254             modified_reference(p, i, macsym)
A      255       255               struct parse_out *p;
A      256       256               int               i;
A      257       257               struct sym_macro *macsym;
A      258       258             {
A      259       259    1          char             *old = ((struct parse_sym *)p->sublk[i])->text;
rCC.C03    File=MAKE_SIc06.:XSI                                                      Thu Nov 20 1997  Page=8  
A      260       260    1          char             *new = ((struct parse_sym *)p->sublk[i+1])->text;
A      261       261    1          int               delta = *new - *old;
A      262       262    1          char             *def = macsym->mc_def;
A      263       263    1          char             *c   = def;
A      264       264    1          int               sz  = macsym->mc_deflen;
A      265       265    1          char             *str;
A      266       266    1          char             *rs;
A      267       267    1          int               l;
A      268       268    1          int               saved = *(old + *old + 1);
A      269       269    1
A      270       270    1          if (sz == 0) return;
A      271       271    1          *(old + *old + 1) = 0;   /*  Make "old" a C string  */
A      272       272    1        /*  If oldsize != newsize then compute new size!  */
A      273       273    1          if (delta)  {
A      274       274    2             c = strstr( def, old+1 );
A      275       275    2             while (c)   {
A      276       276    3                sz = sz + delta;
A      277       277    3                c += *old;
A      278       278    3                c  = strstr(c, old+1 );
A      279       279    3                }
A      280       280    2             }
A      281       281    1
A      282       282    1        /*  Allocate memory to hold the "modified reference" result   */
A      283       283    1          rs = str = (char *) malloc(sz);
A      284       284    1          c  = strstr( def, old+1 );
A      285       285    1          while (c)   {
A      286       286    2             l = c - def;
A      287       287    2             memcpy(str, def, l);
A      288       288    2             str += l;
A      289       289    2             memcpy(str, new+1, *new);
A      290       290    2             str += *new;
A      291       291    2             def += l + *old;
A      292       292    2             c    = strstr(def, old+1);
A      293       293    2          }
A      294       294    1
A      295       295    1          c = def + strlen(def);
A      296       296    1          l = c - def;
rCC.C03    File=MAKE_SIc06.:XSI                                                      Thu Nov 20 1997  Page=9  
A      297       297    1          memcpy(str, def, l);
A      298       298    1          str += l;
A      299       299    1          *str = 0;
A      300       300    1          CatenateRec(rs, strlen(rs) );
A      301       301    1          free(rs);
A      302       302    1
A      303       303    1          *(old + *old + 1) = saved;
A      304       304    1          return;
A      305       305    1        }
A      306       306
A      307       307
A      308       308
A      309       309
A      310       310             /*D*    NAME:       ReportParseErr(pcb)
A      311       311                     PURPOSE:    To report an error detected by X$PARSE.
A      312       312             */
A      313       313
A      314       314             int
A      315       315             ReportParseErr(pcb)
A      316       316               struct p_pcb *pcb;
A      317       317             {
A      318       318    1          char  preview[40];
A      319       319    1          static CONST char marker[] = " <-*-> ";
A      320       320    1          extern int MakeRecs;
A      321       321    1          unsigned ep = pcb->hi_char;
A      322       322    1          unsigned sc = (ep > 15) ? ep - 15 : 0;
A      323       323    1          unsigned lp = pcb->nchars;
A      324       324    1          unsigned ec = ((ep+12)>lp) ? lp : ep+12;
A      325       325    1          char *ins = preview;
A      326       326    1          char *src = pcb->text;
A      327       327    1          int   l;
A      328       328    1
A      329       329    1          if ((ec - sc)>0)  {
A      330       330    2             if ((l = ep - sc) > 0)
A      331       331    2                memcpy(ins, src+sc, l), ins += l;
A      332       332    2             memcpy(ins, marker, 7), ins += 7;
A      333       333    2             if ((l = ec - ep) > 0)
rCC.C03    File=MAKE_SIc06.:XSI                                                      Thu Nov 20 1997  Page=10 
A      334       334    2                memcpy(ins, src+ep, l), ins += l;
A      335       335    2             *ins = 0;
A      336       336    2             if (MakeRecs > 0)
A      337       337    2                error("\"%s\" line %d: Error \"%s\"\n",
A      338       338    2                      file_table[InputNo].fid, file_table[InputNo].recno,
A      339       339    2                      preview);
A      340       340    2             else error("Error: \"%s\"\n",preview);
A      341       341    2             }
A      342       342    1          else Errors++;
A      343       343    1          pcb->nxt = 1;
A      344       344    1          X_PARSE(pcb);
A      345       345    1          pcb->nxt = 0;
A      346       346    1          return;
A      347       347    1        }
A      348       348
A      349       349             /*D*    NAME:       ReportParseLexemes(line)
A      350       350                     PURPOSE:    To print the syntax alternatives indicated by
A      351       351                                 X$PARSE.
A      352       352             */
A      353       353             int
A      354       354             ReportParseLexemes(line)
A      355       355               char *line;
A      356       356             {
A      357       357    1          int i = 79;
A      358       358    1          char buf[84];
A      359       359    1
A      360       360    1          memcpy(buf, line, 80);
A      361       361    1          while (buf[i] == ' ') i--;
A      362       362    1          buf[++i] = 0;
A      363       363    1          printf("%s\n",buf);
A      364       364    1          return 0;
A      365       365    1        }
A      366       366
A      367       367
A      368       368
A      369       369             /*D*    NAME:       dump_macros(LS_width)
A      370       370                     PURPOSE:    To print the entire list of macro definitions.
rCC.C03    File=MAKE_SIc06.:XSI                                                      Thu Nov 20 1997  Page=11 
A      371       371             */
A      372       372
A      373       373             void
A      374       374             dump_macros(LS_width)
A      375       375               unsigned    LS_width;
A      376       376             {
A      377       377    1          int         i;
A      378       378    1          printf("\n***  Macro Definitions  ***\n\n");
A      379       379    1
A      380       380    1          for ( i=0 ; i<macro_hash_table.hash_size ; i++ )   {
A      381       381    2             struct sym_macro *s = (struct sym_macro *) macro_hash_table.table[i];
A      382       382    2             while (s)   {
A      383       383    3                int   fw = (s->mc_len < 12)? 12 : 5 *((s->mc_len+5)/5);
A      384       384    3                char  *c = s->mc_def;
A      385       385    3                int   l = s->mc_deflen;
A      386       386    3                int   w_printed;
A      387       387    3                if (fw > 12)
A      388       388    3                   printf("%-*s   = ",fw,s->mc_sym), w_printed = fw+5;
A      389       389    3                else printf("%-12s = ",s->mc_sym), w_printed = 15;
A      390       390    3                if (l == 0) c = "";
A      391       391    3
A      392       392    3                if ( w_printed+l > LS_width )    {
A      393       393    4                   int room = LS_width-11;
A      394       394    4                   int ps = PrintSegment(room-w_printed,c,0,"%-1.*s\\\n",0,c);
A      395       395    4                   c += ps;
A      396       396    4                   l -= ps;
A      397       397    4                   while (l > room)  {
A      398       398    5                      ps = PrintSegment(room,c,0,"         %-1.*s\\\n",0,c);
A      399       399    5                      c += ps, l -= ps;
A      400       400    5                      }
A      401       401    4                   if ( strchr(c, 0200) )
A      402       402    4                      PrintSegment(LS_width-11,c,0,"%-1.*s\n",0,c);
A      403       403    4                   else printf("         %s\n",c);
A      404       404    4                   }
A      405       405    3                else if ( strchr(c, 0200) )
A      406       406    3                     PrintSegment(LS_width-11,c,0,"%-1.*s\n",0,c);
A      407       407    3                else printf("%s\n",c);
rCC.C03    File=MAKE_SIc06.:XSI                                                      Thu Nov 20 1997  Page=12 
A      408       408    3
A      409       409    3                s = s->next;
A      410       410    3             }     /* end of while (s)  */
A      411       411    2          }        /* end of for (i=0...*/
A      412       412    1        }
A      413       413
A---  Include file information  ---
A
A   stdlib:h.:LIBRARY. is referenced
A   xu_cp6_c:h.:LIBRARY. is referenced
A   xu_macro_c:h.:LIBRARY. is referenced
A   xu_subs_c:h.:LIBRARY. is referenced
A   MAKE_Cc13.:XSI. is referenced
A   MAKE_Cc14.:XSI. is referenced
A   setjmp:h.:LIBRARY. is referenced
A   string:h.:LIBRARY. is referenced
C
ANo diagnostics were issued in the file MAKE_SIc06.:XSI
