/*M* EXEQ - BATCH/XEQ portions of XEQ/BATCH files while retaining DEFAULTs */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* DDA */
 
EXEQ: PROC MAIN;
 
%INCLUDE B_ERRORS_C;                   /* Error message E$ EQU's              */
%INCLUDE B$JIT;                        /* JIT structures/EQUs                 */
%INCLUDE CP_6;                         /* Monitor service macros              */
  %B$ALT;                              /* ALTRET frame structure              */
  %B$TCB;                              /* Task Control Block structure        */
  %F$DCB;                              /* Data Control Block structure        */
%INCLUDE CP_6_SUBS;                    /* Miscellaneous EQU/SUBs for mon servs*/
/* CLUDE EXEQ_C61; */                  /* EQUs for EXEQs commands             */
/* CLUDE EXEQ_C62; */                  /* EQUs for EXEQs IBEX commands        */
%INCLUDE XU_MACRO_C;                   /* Macros for X$PARSE                  */
%INCLUDE XU_PERR_C;                    /* EQUs for X$PARSE                    */
%EJECT;
%LIST;
%INCLUDE EXEQ_C61;
 
 
%INCLUDE EXEQ_C62;
%PLIST;
%EJECT;
/**/
/* SUBs used to access the PCB */
/**/
 
%SUB BLK1_NSUBLKS = "BLK1$->P_OUT.NSUBLKS";
%SUB BLK1_SUBLK$  = "BLK1$->P_OUT.SUBLK$";
 
%SUB BLK2_NSUBLKS = "BLK2$->P_OUT.NSUBLKS";
%SUB BLK2_SUBLK$  = "BLK2$->P_OUT.SUBLK$";
%SUB BLK2_CODE    = "BLK2$->P_SYM.CODE";
%SUB BLK2_COUNT   = "BLK2$->P_SYM.COUNT";
%SUB BLK2_CPOS    = "BLK2$->P_SYM.CPOS";
%SUB BLK2_TEXT    = "SUBSTR(BLK2$->P_SYM.TEXT,0,BLK2$->P_SYM.COUNT)";
 
%SUB BLK3_NSUBLKS = "BLK3$->P_OUT.NSUBLKS";
%SUB BLK3_SUBLK$  = "BLK3$->P_OUT.SUBLK$";
%SUB BLK3_CODE    = "BLK3$->P_SYM.CODE";
%SUB BLK3_COUNT   = "BLK3$->P_SYM.COUNT";
%SUB BLK3_TEXT    = "SUBSTR(BLK3$->P_SYM.TEXT,0,BLK3$->P_SYM.COUNT)";
 
%SUB BLK4_NSUBLKS = "BLK4$->P_OUT.NSUBLKS";
%SUB BLK4_SUBLK$  = "BLK4$->P_OUT.SUBLK$";
%SUB BLK4_CODE    = "BLK4$->P_SYM.CODE";
%SUB BLK4_COUNT   = "BLK4$->P_SYM.COUNT";
%SUB BLK4_TEXT    = "SUBSTR(BLK4$->P_SYM.TEXT,0,BLK4$->P_SYM.COUNT)";
 
%SUB BLK5_NSUBLKS = "BLK5$->P_OUT.NSUBLKS";
%SUB BLK5_SUBLK$  = "BLK5$->P_OUT.SUBLK$";
%SUB BLK5_CODE    = "BLK5$->P_SYM.CODE";
%SUB BLK5_COUNT   = "BLK5$->P_SYM.COUNT";
%SUB BLK5_TEXT    = "SUBSTR(BLK5$->P_SYM.TEXT,0,BLK5$->P_SYM.COUNT)";
 
%SUB BLK6_NSUBLKS = "BLK6$->P_OUT.NSUBLKS";
%SUB BLK6_SUBLK$  = "BLK6$->P_OUT.SUBLK$";
%SUB BLK6_CODE    = "BLK6$->P_SYM.CODE";
%SUB BLK6_COUNT   = "BLK6$->P_SYM.COUNT";
%SUB BLK6_TEXT    = "SUBSTR(BLK6$->P_SYM.TEXT,0,BLK6$->P_SYM.COUNT)";
 
%SUB BLK_NSUBLKS  = "BLK$->P_OUT.NSUBLKS";
%SUB BLK_SUBLK$   = "BLK$->P_OUT.SUBLK$";
%SUB BLK_CODE     = "BLK$->P_SYM.CODE";
%SUB BLK_TEXT     = "SUBSTR(BLK$->P_SYM.TEXT,0,BLK$->P_SYM.COUNT)";
%SUB BLKA_COUNT   = "BLKA$->P_SYM.COUNT";
%SUB BLKA_TEXT    = "SUBSTR(BLKA$->P_SYM.TEXT,0,BLKA$->P_SYM.COUNT)";
 
 
 
/**/
/* X$PARSE stuff */
/**/
 
%P_PCB       (NAME                     = EXEQ_OPTS,
              C_LD='  ',               /* Override the default of double      */
              C_TL='  ',               /* quoted strings being comments.      */
              R=EXEQ_CMDS );
 
%P_PCB       (NAME                     = IBEX_OPTS,
              R=EXEQ_IBEX );
 
%PARSE$OUT   (NAME                     = P_OUT,
              STCLASS="BASED" );
%PARSE$SYM   (NAME                     = P_SYM,
              STCLASS="BASED" );
DCL EXEQ_CMDS                SBIN      SYMREF;
DCL EXEQ_IBEX                SBIN      SYMREF;
DCL X$PARSE                  ENTRY(1)  ALTRET;
DCL WORK                     CHAR(2048);
%EJECT;
/**/
/* F$IN */
/**/
 
DCL F$IN                     DCB;
 
%FPT_FID     (FPTN                     = FPT_FID,
              ACCT=A_ACCT,
              ASN=FPT_OPEN.V.ASN#,
              NAME=A_NAME,
              PASS=A_PASS,
              RES=FPT_OPEN.V.RES#,
              RESULTS=VLR_FID,
              SN=A_SN );
%VLR_FID     (FPTN                     = VLR_FID );
 
%FPT_OPEN    (FPTN                     = FPT_OPEN,
              ACCT=A_ACCT,
              DCB=F$IN,
              NAME=A_NAME,
              PASS=A_PASS,
              SN=A_SN );
%VLP_ACCT    (FPTN                     = A_ACCT );
%VLP_NAME    (FPTN                     = A_NAME );
%VLP_PASS    (FPTN                     = A_PASS );
%VLP_SN      (FPTN                     = A_SN );
 
%FPT_READ    (FPTN                     = READ_IN,
              BUF=IN_BUF,
              DCB=F$IN,
              KEY=KEY,
              KEYR=YES );
%EJECT;
/**/
/* F$OUT */
/**/
 
DCL F$OUT                    DCB;
 
%FPT_OPEN    (FPTN                     = OPEN_OUT,
              ACS=DIRECT,
              ASN=FILE,
              DCB=F$OUT,
              FUN=CREATE,
              NAME=OUT_NAME,
              ORG=KEYED );
%VLP_NAME    (FPTN                     = OUT_NAME,
              NAME='*EXEQ00000                     ' );
 
%FPT_WRITE   (FPTN                     = WRITE_OUT,
              BUF=IN_BUF,
              DCB=F$OUT,
              KEY=KEY,
              NEWKEY=YES,
              ONEWKEY=NO );
%EJECT;
/**/
/* Miscellaneous FPTs */
/**/
 
%FPT_OPEN    (FPTN                     = DEFAULT_OPEN );
 
%FPT_CLOSE   (FPTN                     = FPT_CLOSE,
              DCB=F$IN,
              DISP=SAVE );
 
%FPT_EXIT    (FPTN                     = SET_STEPCC,
              STEPCC=OK );
 
%FPT_YC      (FPTN                     = FPT_YC,
              CMD=YC_CMD );
 
%FPT_WRITE   (FPTN                     = WRITE_DO,
              DCB=M$DO );
 
%FPT_ERRMSG  (FPTN                     = FPT_ERRMSG,
              BUF=DO_BUF,
              CODE=ERRCODE,
              INCLCODE=NO,
              OUTDCB1=M$DO );
 
%VLP_ERRCODE (FPTN                     = ERRCODE );
 
%FPT_UNFID   (FPTN                     = FPT_UNFID,
              DCB=F$OUT,
              LEN=FIDLEN,
              TEXTFID=TEXTFID );
%EJECT;
/**/
/* BASED items, listed alphabetically */
/**/
 
%EJECT;
/**/
/* BIT items, listed alphabetically */
/**/
 
DCL DONE_READING             BIT(1)    STATIC INIT(%NO#);
DCL EXEQ_OPTION(0:71)        BIT(1);
%EJECT;
/**/
/* CHARacter items, listed alphabetically */
/**/
 
DCL DO_BUF                   CHAR(256) STATIC;
DCL IN_BUF                   CHAR(256) STATIC;
DCL LABEL                    CHAR(31);
DCL TEXTFID                  CHAR(80)  STATIC;
DCL YC_CMD                   CHAR(256) STATIC;
 
 
/**/
/* DCBs */
/**/
 
DCL M$DO                     DCB;
%EJECT;
/**/
/* PTRs, listed alphabetically */
/**/
 
DCL B$JIT$                   PTR       SYMREF;
DCL B$TCB$                   PTR       SYMREF;
DCL BLK1$                    PTR;
DCL BLK2$                    PTR;
DCL BLK3$                    PTR;
DCL BLK4$                    PTR;
DCL BLK5$                    PTR;
DCL BLK6$                    PTR;
DCL BLKA$                    PTR;
DCL F$IN$                    PTR;
DCL F$OUT$                   PTR;
%EJECT;
/**/
/* SBIN/UBIN items, listed alphabetically */
/**/
 
DCL ARS                      SBIN;
DCL CPOS                     UBIN;
DCL CUR_RANGE                SBIN;
DCL ERRDCB#                  SBIN;
DCL F$IN#                    SBIN;
DCL F$OUT#                   SBIN;
DCL FIDLEN                   SBIN      STATIC;
DCL FROM_TO_RANGE            SBIN;
DCL I                        SBIN;
DCL IN_CNT                   SBIN;
DCL J                        SBIN;
DCL K                        SBIN;
DCL L                        SBIN;
DCL LEN                      SBIN;
DCL M$DO#                    SBIN;
DCL NUM_LABELS               SBIN;
DCL NUM_PAIRS                SBIN;
DCL OPTIONS_POS              SBIN;
DCL SKIP_BLANKS(0:511)       SBIN(9)   STATIC CALIGNED INIT(
    1 * %ASCBIN(' '), 0, 1 * 0 );
DCL START_END_RANGE          SBIN;
DCL TMP1                     SBIN;
DCL TMP2                     SBIN;
DCL X                        SBIN;
%EJECT;
/**/
/* Structures, listed alphabetically */
/**/
 
DCL 1 KEY  STATIC,
      2 LEN                  UBIN(9)   CALIGNED,
      2 EDIT                 UBIN(27)  CALIGNED,
      2 *                    CHAR(252) CALIGNED;
 
DCL 1 OUT_KEY  STATIC,
      2 LEN                  UBIN(9)   CALIGNED,
      2 EDIT                 UBIN(27)  CALIGNED,
      2 *                    CHAR(252) CALIGNED;
 
DCL 1 NUM(0:30),
      2 FIRST_TYPE           UBIN(9)   CALIGNED,
      2 FIRST                UBIN(27)  CALIGNED,
      2 LAST_TYPE            UBIN(9)   CALIGNED,
      2 LAST                 UBIN(27)  CALIGNED;
 
DCL 1 LBL(0:49),
      2 TYPE                 UBIN(9)   CALIGNED,
      2 NAME                 CHAR(31)  CALIGNED,
      2 LEN                  UBIN(9)   CALIGNED;
 
%EJECT;
MAINLINE:
 
    CALL SETUP  ALTRET( OOPS );        /* Initialize some stuff               */
 
    CALL PARSE_THE_OPTIONS  ALTRET( SET_THE_STEPCC );
 
    DO WHILE( NOT DONE_READING );
 
       CALL READ_A_RECORD  ALTRET( NOPE );
 
       CALL DO_WE_WANT_THIS_RECORD  ALTRET( NOPE );
 
       CALL WRITE_RECORD;
NOPE:
       END;
 
CALL_M$YC:
    CALL DO_YC  ALTRET( OOPS );
    GOTO QUIT;
OOPS: ;
    ERRCODE= B$TCB$->B$TCB.ALT$->B$ALT.ERR;
    ERRDCB#= B$TCB$->B$TCB.ALT$->B$ALT.DCB#;
CALL_ERRMSG:
    CALL REPORT_ERR( ERRCODE,ERRDCB# );
SET_THE_STEPCC:
    SET_STEPCC.V.STEPCC#= 4;           /* Indicate we had an error when we xit*/
QUIT:
    CALL M$EXIT( SET_STEPCC );
%EJECT;
SETUP: PROC  ALTRET;
 
    F$IN#=  DCBNUM(F$IN);              /* Initialize some DCB numbers         */
    F$OUT#= DCBNUM(F$OUT);
    M$DO#=  DCBNUM(M$DO);
 
    F$IN$=  DCBADDR(F$IN#);            /* Initialize some DCB pointers        */
    F$OUT$= DCBADDR(F$OUT#);
 
    CUR_RANGE= 0;                      /* Initialize some counters            */
    FROM_TO_RANGE= 0;
    IN_CNT= 0;
    NUM_LABELS= 3;
    NUM_PAIRS= 0;
    START_END_RANGE= 0;
 
    EXEQ_OPTS.WKSZ=   SIZEW(WORK);     /* Set up PCBs                         */
    EXEQ_OPTS.WORK$=  ADDR(WORK);
    EXEQ_OPTS.NCHARS= B$JIT.CCARS;
    EXEQ_OPTS.TEXT$=  ADDR(B$JIT.CCBUF);
 
    IBEX_OPTS.WKSZ=   SIZEW(WORK);
    IBEX_OPTS.WORK$=  ADDR(WORK);
    IBEX_OPTS.TEXT$=  ADDR(IN_BUF);
 
    CALL OPEN_FID( M$DO#,' ',0 )   ALTRET( ALT_RETURN );
 
RE_TURN:
    RETURN;
 
ALT_RETURN:
    ALTRETURN;
 
END SETUP;
%EJECT;
PARSE_THE_OPTIONS: PROC  ALTRET;
 
    CALL X$PARSE( EXEQ_OPTS )  ALTRET( PARSE_ERR );
    EXEQ_OPTION= '0'B;
    BLK1$= EXEQ_OPTS.OUT$;
    DO I=0 TO BLK1_NSUBLKS-1;
       BLK2$= BLK1_SUBLK$(I);
       IF BLK2_NSUBLKS>0 THEN
          BLK3$= BLK2_SUBLK$(0);
       DO CASE( BLK2_CODE );
          CASE( %RU_FID## );
             /* I know who I am; don't do anything!                           */
 
          CASE( %XEQ_FID## );
             OPTIONS_POS= BLK2_CPOS + BLK2_COUNT;/* Used when building YC_CMD */
             LEN= BLK2_COUNT;
             CALL OPEN_FID( F$IN#,BLK2_TEXT,LEN ) WHENALTRETURN DO;
                CALL POINT( BLK2_CPOS );
                CALL REPORT_ERR;
                GOTO ALT_RETURN;
                END;
             IF F$IN$->F$DCB.ASN# ~= %FILE# THEN DO;
                CALL POINT( BLK2_CPOS );
                CALL PUT('.. This FID must be a disk file.\');
                GOTO ALT_RETURN;
                END;
 
          CASE( %EXEQ_OPTS## );
             DO J=0 TO BLK2_NSUBLKS-1;
                BLK3$= BLK2_SUBLK$(J);
                DO K=0 TO BLK3_NSUBLKS-1;
                   BLK4$= BLK3_SUBLK$(K);
                   IF BLK4_NSUBLKS>0 THEN DO;
                      BLK5$= BLK4_SUBLK$(0);
                      IF BLK5_NSUBLKS>0 THEN
                         BLK6$= BLK5_SUBLK$(0);
                      END;
                   EXEQ_OPTION(BLK4_CODE)= %YES#;
                   DO CASE( BLK4_CODE );
                      CASE( %BATCH## );
 
                      CASE( %CONTAINS## );
                         NUM_LABELS= NUM_LABELS + 1;
                         LBL.NAME(NUM_LABELS)= BLK6_TEXT;
                         LBL.LEN(NUM_LABELS)=  BLK6_COUNT;
                         NUM_PAIRS= NUM_PAIRS + 1;
                         NUM.FIRST_TYPE(NUM_PAIRS)= BLK5_CODE;
                         NUM.FIRST(NUM_PAIRS)= NUM_LABELS;
                         NUM.LAST_TYPE(NUM_PAIRS)= BLK5_CODE;
                         NUM.LAST(NUM_PAIRS)= NUM_LABELS;
 
                      CASE( %DASH## );
                         IF K=0 THEN DO;      /* No FIRST specified?          */
                            NUM_PAIRS= NUM_PAIRS+1;
                            NUM.FIRST_TYPE(NUM_PAIRS)= %RECNUM##;
                            NUM.FIRST(NUM_PAIRS)= 1;
                            END;
                         IF K=BLK3_NSUBLKS-1 THEN DO;/* No LAST specified?    */
                            NUM.LAST_TYPE(NUM_PAIRS)= %RECNUM##;
                            NUM.LAST(NUM_PAIRS)= F$IN$->F$DCB.NRECS#;
                            END;
 
                      CASE( %END## );
                         IF START_END_RANGE = 0 THEN DO;
                            NUM_PAIRS= NUM_PAIRS + 1;
                            START_END_RANGE= NUM_PAIRS;
                            NUM.FIRST_TYPE(START_END_RANGE)= %RECNUM##;
                            NUM.FIRST(START_END_RANGE)= 1;
                            END;
                         NUM.LAST_TYPE(START_END_RANGE)= BLK5_CODE;
                         CALL GET_VAL( BLK5$,TMP1,LABEL );
                         IF BLK5_CODE = %LABEL## THEN
                            LBL.NAME(1)= LABEL;
                         ELSE
                            NUM.LAST(START_END_RANGE)= TMP1;
 
                      CASE( %FIRST## );
                         NUM_PAIRS= NUM_PAIRS + 1;
                         CALL GET_VAL( BLK5$,TMP1,LABEL );
                         NUM.FIRST_TYPE(NUM_PAIRS)= BLK5_CODE;
                         NUM.FIRST(NUM_PAIRS)= TMP1;
                         IF K=BLK3_NSUBLKS-1 THEN DO;
                            NUM.LAST_TYPE(NUM_PAIRS)= BLK5_CODE;
                            NUM.LAST(NUM_PAIRS)= TMP1;
                            END;
 
                      CASE( %FROM## );
                         IF FROM_TO_RANGE = 0 THEN DO;
                            NUM_PAIRS= NUM_PAIRS + 1;
                            FROM_TO_RANGE= NUM_PAIRS;
                            NUM.LAST_TYPE(FROM_TO_RANGE)= %RECNUM##;
                            NUM.LAST(FROM_TO_RANGE)= F$IN$->F$DCB.NRECS#;
                            END;
                         NUM.FIRST_TYPE(FROM_TO_RANGE)= BLK5_CODE;
                         NUM.FIRST(FROM_TO_RANGE)= 2;
                         LBL.NAME(2)= BLK6_TEXT;
                         LBL.LEN(2)= BLK6_COUNT;
 
                      CASE( %LAST## );
                         IF K=1 THEN
                            NUM_PAIRS= NUM_PAIRS + 1;
                         NUM.LAST_TYPE(NUM_PAIRS)= BLK5_CODE;
                         CALL GET_VAL( BLK5$,TMP1,LABEL );
                         NUM.LAST(NUM_PAIRS)= TMP1;
                         IF K=1 THEN DO;    /* Was '-LAST' specified?       */
                            NUM.FIRST_TYPE(NUM_PAIRS)= BLK5_CODE;
                            NUM.FIRST(NUM_PAIRS)= 1;
                            END;
 
                      CASE( %ND## );
 
                      CASE( %NG## );
 
                      CASE( %SAVE## );
                         CALL OPEN_OUT( BLK4$ )  ALTRET( ALT_RETURN );
 
                      CASE( %SKIP## );
                         NUM_PAIRS= NUM_PAIRS + 1;
                         CALL GET_VAL( BLK5$,TMP1,LABEL );
                         IF BLK5_CODE = %LABEL##  OR
                            BLK5_CODE = %STRING## THEN DO;
                            NUM_LABELS= NUM_LABELS + 1;
                            LBL.NAME(NUM_LABELS)= BLK5_TEXT;
                            LBL.LEN(NUM_LABELS)=  BLK5_COUNT;
                            END;
                         NUM.FIRST_TYPE(NUM_PAIRS)= BLK5_CODE;
                         NUM.FIRST(NUM_PAIRS)= TMP1;
                         NUM.LAST_TYPE(NUM_PAIRS)= %SKIP##;
                         NUM.LAST(NUM_PAIRS)= 0;
 
                      CASE( %START## );
                         IF START_END_RANGE = 0 THEN DO;
                            NUM_PAIRS= NUM_PAIRS + 1;
                            START_END_RANGE= NUM_PAIRS;
                            NUM.LAST_TYPE(START_END_RANGE)= %RECNUM##;
                            NUM.LAST(START_END_RANGE)= F$IN$->F$DCB.NRECS#;
                            END;
                         NUM.FIRST_TYPE(START_END_RANGE)= BLK5_CODE;
                         CALL GET_VAL( BLK5$,TMP1,LABEL );
                         IF BLK5_CODE = %LABEL## THEN
                            LBL.NAME(0)= LABEL;
                         ELSE
                            NUM.FIRST(START_END_RANGE)= TMP1;
 
                      CASE( %TO## );
                         IF FROM_TO_RANGE = 0 THEN DO;
                            NUM_PAIRS= NUM_PAIRS + 1;
                            FROM_TO_RANGE= NUM_PAIRS;
                            NUM.FIRST_TYPE(FROM_TO_RANGE)= %RECNUM##;
                            NUM.FIRST(FROM_TO_RANGE)= 1;
                            END;
                         NUM.LAST_TYPE(FROM_TO_RANGE)= BLK5_CODE;
                         NUM.LAST(FROM_TO_RANGE)= 3;
                         LBL.NAME(3)= BLK6_TEXT;
                         LBL.LEN(3)= BLK6_COUNT;
 
                      END;
                   END;
                END;
 
          CASE( %OPTIONS## );
 
          CASE( %COMMENTS## );
 
          END;
       END;
 
    IF NOT EXEQ_OPTION(%SAVE##) THEN
       CALL OPEN_OUT  ALTRET( ALT_RETURN );
 
    IF NUM_PAIRS = 0 THEN DO;             /* Any selections made via options? */
       NUM_PAIRS= NUM_PAIRS + 1;
       NUM.FIRST_TYPE(NUM_PAIRS)= %RECNUM##;
       NUM.FIRST(NUM_PAIRS)= 1;
       NUM.LAST_TYPE(NUM_PAIRS)= %RECNUM##;
       NUM.LAST(NUM_PAIRS)= F$IN$->F$DCB.NRECS#;
       END;
 
RE_TURN:
    RETURN;
 
PARSE_ERR:
    CPOS= EXEQ_OPTS.HI_CHAR;
    ERRCODE= EXEQ_OPTS.ERROR;
    CALL POINT( CPOS );
    CALL REPORT_ERR( ERRCODE );
ALT_RETURN:
    ALTRETURN;
 
END PARSE_THE_OPTIONS;
%EJECT;
READ_A_RECORD: PROC  ALTRET;
 
    IN_BUF= ' ';
    IN_CNT= IN_CNT+1;
    CALL M$READ( READ_IN )  ALTRET( WAS_EOF_HIT );
    ARS= F$IN$->F$DCB.ARS#;
    IBEX_OPTS.NCHARS= ARS;
    CALL X$PARSE( IBEX_OPTS )  WHENALTRETURN DO;
       SUBSTR(IN_BUF,ARS-1,1)= '\';
       CALL PUT( IN_BUF );
       CPOS= IBEX_OPTS.HI_CHAR;
       CALL POINT( CPOS );
       CALL REPORT_ERR;
       CALL PUT('.. Oops!  EXEQ doesn''t know how to parse the above line.');
       GOTO ALT_RETURN;
       END;
    BLK1$= IBEX_OPTS.OUT$;
    DO I=0 TO BLK1_NSUBLKS-1;
       BLK2$= BLK1_SUBLK$(I);
       IF BLK2_NSUBLKS>0 THEN
          BLK3$= BLK2_SUBLK$(0);
       END;
RE_TURN:
    RETURN;
 
WAS_EOF_HIT:
    ERRCODE= B$TCB$->B$TCB.ALT$->B$ALT.ERR;
    IF ERRCODE.ERR# = %E$EOF THEN
       DONE_READING= %YES#;
    ELSE DO;
       IF F$IN$->F$DCB.ARS# > 0 THEN
          SUBSTR(IN_BUF,F$IN$->F$DCB.ARS#-1,1)= '\';
       ELSE
          SUBSTR(IN_BUF,0,1)= '\';
       CALL PUT( IN_BUF );
       CALL REPORT_ERR;
       END;
 
ALT_RETURN:
    ALTRETURN;
 
END READ_A_RECORD;
%EJECT;
DO_WE_WANT_THIS_RECORD: PROC  ALTRET;
 
    IF CUR_RANGE > 0 THEN
       DO CASE( NUM.LAST_TYPE(CUR_RANGE) );
          CASE( %RECNUM## );
             IF IN_CNT > NUM.LAST(CUR_RANGE) THEN DO;
                NUM.FIRST_TYPE(CUR_RANGE)= 0;
                CUR_RANGE= 0;
                END;
          CASE( %EDITKEY## );
             IF KEY.EDIT > NUM.LAST(CUR_RANGE) THEN DO;
                NUM.FIRST_TYPE(CUR_RANGE)= 0;
                CUR_RANGE= 0;
                END;
          CASE( %LABEL## );
             IF BLK2_CODE = %LABELED_LINE## AND BLK3_TEXT = LBL.NAME(1) THEN DO;
                CUR_RANGE= 0;
                GOTO RE_TURN;
                END;
          CASE( %STRING## );
             CALL INDEX( L,SUBSTR(LBL.NAME(3),0,LBL.LEN(3)),IN_BUF );
             IF L < LENGTHC(IN_BUF) THEN DO;
                CUR_RANGE= 0;
                GOTO RE_TURN;
                END;
          CASE( ELSE );
 
          END;
 
    IF CUR_RANGE = 0 THEN DO;
       DO I=1 TO NUM_PAIRS;
          IF NUM.FIRST_TYPE(I) > 0 THEN
             DO CASE( NUM.FIRST_TYPE(I) );
                CASE( %RECNUM## );
                   IF IN_CNT >= NUM.FIRST(I) THEN
                      IF NUM.LAST_TYPE(I) = %SKIP## THEN
                         GOTO ALT_RETURN;
                      ELSE DO;
                         CUR_RANGE= I;
                         GOTO RE_TURN;
                         END;
                CASE( %EDITKEY## );
                   IF KEY.EDIT >= NUM.FIRST(I) THEN DO;
                      CUR_RANGE= I;
                      GOTO RE_TURN;
                      END;
                CASE( %LABEL## );
                   IF BLK2_CODE = %LABELED_LINE##  AND
                      BLK3_TEXT = LBL.NAME(0) THEN
                      IF NUM.LAST_TYPE(I) = %SKIP## THEN
                         GOTO ALT_RETURN;
                      ELSE DO;
                         CUR_RANGE= I;
                         GOTO RE_TURN;
                         END;
                CASE( %STRING## );
                   TMP1= NUM.FIRST(I);
                   CALL INDEX(L,SUBSTR(LBL.NAME(TMP1),0,LBL.LEN(TMP1)),IN_BUF);
                   IF L < LENGTHC(IN_BUF) THEN DO;
                      IF TMP1 = 2 THEN
                         CUR_RANGE= I;/* Keep all until the TO string is found*/
                      IF NUM.LAST_TYPE(I) = %SKIP## THEN DO;
                         CUR_RANGE= 0;
                         GOTO ALT_RETURN;
                         END;
                      ELSE
                         GOTO RE_TURN;
                      END;
                CASE( ELSE );
 
                END;
          END;
       IF BLK2_CODE = %DEFAULT_CMD## THEN
          IF EXEQ_OPTION(%ND##) THEN
             GOTO ALT_RETURN;
          ELSE
             ;
       ELSE
          IF BLK2_CODE = %GLOBAL_CMD## THEN
             IF EXEQ_OPTION(%NG##) THEN
                GOTO ALT_RETURN;
             ELSE
                ;
          ELSE
             GOTO ALT_RETURN;
       END;
RE_TURN:
    RETURN;
 
ALT_RETURN:
    ALTRETURN;
 
END DO_WE_WANT_THIS_RECORD;
%EJECT;
WRITE_RECORD: PROC  ALTRET;
 
    IF ARS>0 THEN
       WRITE_OUT.BUF_= VECTOR(SUBSTR(IN_BUF,0,ARS));
    ELSE
       WRITE_OUT.BUF_= VECTOR(NIL);
    CALL M$WRITE( WRITE_OUT )          ALTRET( ALT_RETURN );
RE_TURN:
    RETURN;
 
ALT_RETURN:
    ALTRETURN;
 
END WRITE_RECORD;
%EJECT;
POINT: PROC( CPOS );
DCL CPOS                     UBIN;
 
    DO_BUF= ' ';
    SUBSTR(DO_BUF,CPOS+1,2)= '^\';
    CALL PUT( DO_BUF );
RE_TURN:
    RETURN;
 
END POINT;
%EJECT;
PUT: PROC( MESG );
DCL MESG                     CHAR(132);
 
    CALL INDEX( LEN,'\',MESG )  WHENALTRETURN DO;
       LEN= 1;
       END;
    WRITE_DO.BUF_= VECTOR(SUBSTR(MESG,0,LEN));
    CALL M$WRITE( WRITE_DO );
RE_TURN:
    RETURN;
 
END PUT;
%EJECT;
GET_VAL: PROC( BLK$,TMP1,LABEL );
DCL BLK$                     PTR;
DCL TMP1                     SBIN;
DCL LABEL                    CHAR(31);
 
    TMP1= 0;
    TMP2= 0;
    LABEL= ' ';
    IF BLK_NSUBLKS>0 THEN
       BLKA$= BLK_SUBLK$(0);
    IF BLK_CODE = %RECNUM## THEN
       CALL CHARBIN( TMP2,BLK_TEXT );
    ELSE
       IF BLK_CODE = %EDITKEY## THEN DO;
          CALL CHARBIN( TMP1,BLKA_TEXT );
          IF BLK_NSUBLKS>1 THEN DO;
             BLKA$= BLK_SUBLK$(1);
             CALL CHARBIN( TMP2,BLKA_TEXT );
             IF BLKA_COUNT = 1 THEN
                TMP2= TMP2 * 100;
             ELSE
                IF BLKA_COUNT = 2 THEN
                   TMP2= TMP2 * 10;
             END;
          END;
       ELSE
          IF BLK_CODE = %EDITFRC## THEN DO;
             CALL CHARBIN( TMP2,BLKA_TEXT );
             BLK_CODE= %EDITKEY##;
             END;
          ELSE
             IF BLK_CODE = %LABEL## THEN
                LABEL= BLK_TEXT;
    TMP1= (TMP1*1000) + TMP2;
RE_TURN:
    RETURN;
 
END GET_VAL;
%EJECT;
DO_YC: PROC  ALTRET;
 
    CALL CLOSE( F$IN# );                      /* Close F$IN                   */
    CALL CLOSE( F$OUT# );              /* Close F$OUT so M$YC can get the file*/
    IF EXEQ_OPTION(%BATCH##) THEN
       CALL CONCAT( YC_CMD,'BATCH ',SUBSTR(TEXTFID,0,FIDLEN),
                       SUBSTR(B$JIT.CCBUF,OPTIONS_POS,B$JIT.CCARS-OPTIONS_POS));
    ELSE
       CALL CONCAT( YC_CMD,'XEQ ',SUBSTR(TEXTFID,0,FIDLEN),
                       SUBSTR(B$JIT.CCBUF,OPTIONS_POS,B$JIT.CCARS-OPTIONS_POS));
    IF (NOT EXEQ_OPTION(%SAVE##))  AND  (NOT F$OUT$->F$DCB.AMR#)  THEN DO;
       IF B$JIT.ACCN = 'ZLHNSS6' THEN DO;
          CALL CONCAT( DO_BUF,'$',YC_CMD );
          I= LENGTHC('BATCH ') + OUT_NAME.L# + (B$JIT.CCARS - OPTIONS_POS);
          DO WHILE( I>0 AND SUBSTR(DO_BUF,I,1) = ' ' );
             I= I-1;
             END;
          SUBSTR(DO_BUF,I+1,1)= '\';
          CALL PUT( DO_BUF );
          END;
       CALL M$YC( FPT_YC ) ALTRET( ALT_RETURN );
       FPT_OPEN= DEFAULT_OPEN;
       FPT_OPEN.V.ASN#= %FILE#;
       FPT_OPEN.V.DELETE#= %YES#;
       FPT_OPEN.V.FUN#= %IN#;
       CALL OPEN_FID( F$OUT#,' ',0,FPT_OPEN ); /* DELete F$OUT file           */
       END;
    ELSE DO;
       CALL CONCAT( DO_BUF,'Results are in ',TEXTFID,'\' );
       CALL PUT( DO_BUF );
       END;
RE_TURN:
    RETURN;
 
ALT_RETURN:
    ALTRETURN;
 
END DO_YC;
%EJECT;
OPEN_FID: PROC( DCB#,FID,FID_LEN,OPEN_FPT )  ALTRET;
DCL DCB#                     UBIN;
DCL FID                      CHAR(FIDLEN);
DCL FID_LEN                  SBIN;
%FPT_OPEN    (FPTN                     = OPEN_FPT,
              STCLASS=" " );
 
DCL FIDLEN                   SBIN;
 
    IF ADDR(OPEN_FPT) = ADDR(NIL) THEN        /* Was an FPT passed?           */
       FPT_OPEN= DEFAULT_OPEN;                /* Nope, use default OPEN       */
    ELSE
       FPT_OPEN= OPEN_FPT;                    /* Yep, use it                  */
    FPT_OPEN.V_= VECTOR(FPT_OPEN.V);          /* Frame the V area in the FPT  */
    FPT_OPEN.V.DCB#= DCB#;                    /* Use their DCB#               */
 
    IF FID_LEN < 0 THEN DO;                   /* Should we find FID length?   */
       FIDLEN= -FID_LEN;                      /* Yep.                         */
       CALL SEARCHR( FIDLEN,X,SKIP_BLANKS,FID )  ALTRET( JUST_OPEN_IT );
       FIDLEN= FIDLEN + 1;
       END;
    ELSE
       FIDLEN= FID_LEN;                      /* Nope. They passed the FID_LEN */
 
    IF FID_LEN ~= 0 THEN DO;
       FPT_FID.V.SCRUB= '111111'B;
       FPT_FID.TEXTFID_= VECTOR(FID);
       CALL M$FID( FPT_FID )           ALTRET( ALT_RETURN );
       IF VLR_FID.NAME THEN                   /* Was NAME in FID?             */
          FPT_OPEN.NAME_= FPT_FID.NAME_;      /* Yep, use it on OPEN.         */
       ELSE
          FPT_OPEN.NAME_= VECTOR(NIL);        /* Nope.                        */
       IF VLR_FID.ACCT THEN                   /* Was ACCT in FID?             */
          FPT_OPEN.ACCT_= FPT_FID.ACCT_;      /* Yep, use it on the OPEN.     */
       ELSE
          FPT_OPEN.ACCT_= VECTOR(NIL);        /* Nope.                        */
       IF VLR_FID.PASS THEN                   /* Was PASSword in FID?         */
          FPT_OPEN.PASS_= FPT_FID.PASS_;      /* Yep, use it on the OPEN.     */
       ELSE
          FPT_OPEN.PASS_= VECTOR(NIL);        /* Nope.                        */
       IF VLR_FID.SN THEN                     /* Was an SN in the FID?        */
          FPT_OPEN.SN_= FPT_FID.SN_;          /* Yep, use it on the OPEN.     */
       ELSE
          FPT_OPEN.SN_= VECTOR(NIL);          /* Nope.                        */
       IF VLR_FID.WSN THEN                    /* Was a WSN ion the FID?       */
          FPT_OPEN.WSN_= FPT_FID.WSN_;        /* Yep, use it on the OPEN.     */
       ELSE
          FPT_OPEN.WSN_= VECTOR(NIL);         /* Nope.                        */
       END;
JUST_OPEN_IT:
    CALL CLOSE( DCB# );                       /* CLOSE the DCB, if it's OPEN  */
    CALL M$OPEN( FPT_OPEN )            ALTRET( ALT_RETURN );
RE_TURN:
    RETURN;
 
ALT_RETURN:
    ALTRETURN;
 
END OPEN_FID;
%EJECT;
REPORT_ERR: PROC( ERR#,DCB# );
DCL ERR#                     BIT(36);  /* Optional                            */
DCL DCB#                     UBIN;     /* Optional                            */
 
    IF ADDR(ERR#) = ADDR(NIL) THEN
       ERRCODE= B$TCB$->B$TCB.ALT$->B$ALT.ERR;
    ELSE
       ERRCODE= ERR#;
    IF ADDR(DCB#) = ADDR(NIL) THEN
       FPT_ERRMSG.V.DCB#= B$TCB$ -> B$TCB.ALT$ -> B$ALT.DCB#;
    ELSE
       FPT_ERRMSG.V.DCB#= DCB#;
    CALL M$ERRMSG( FPT_ERRMSG )        ALTRET( RE_TURN );
RE_TURN:
    RETURN;
 
END REPORT_ERR;
%EJECT;
CLOSE: PROC( DCB#,DISP# );
DCL DCB#                     UBIN;
DCL DISP#                    UBIN;
 
    FPT_CLOSE.V.DCB#= DCB#;
    IF ADDR(DISP#) = ADDR(NIL)  OR  DISP# = %SAVE#  THEN
       FPT_CLOSE.V.DISP#= %SAVE#;             /* Save the file                */
    ELSE
       FPT_CLOSE.V.DISP#= %RELEASE#;          /* Delete the file              */
    CALL M$CLOSE( FPT_CLOSE )          ALTRET( RE_TURN );
RE_TURN:
    RETURN;
 
END CLOSE;
%EJECT;
OPEN_OUT: PROC( BLK$ )  ALTRET;
DCL BLK$                     PTR;
 
    FPT_OPEN= DEFAULT_OPEN;
    FPT_OPEN.V_= VECTOR(FPT_OPEN.V);
    FPT_OPEN.V.FUN#= %CREATE#;
 
    IF F$IN$->F$DCB.ORG# = %KEYED# THEN DO;
       FPT_OPEN.V.ORG#= %KEYED#;
       WRITE_OUT.KEY_= VECTOR(KEY);
       WRITE_OUT.V.NEWKEY#= %YES#;
       WRITE_OUT.V.ONEWKEY#= %NO#;
       END;
 
    FIDLEN= LENGTHC('*EXEQ00000');
    TEXTFID= '*EXEQ00000';
    CALL BINCHAR( SUBSTR(TEXTFID,5,5),B$JIT.STEPS );
 
    IF ADDR(BLK$) = ADDR(NIL) THEN
       IF F$OUT$->F$DCB.AMR# THEN DO;
          IF NOT B$JIT.PRFLAGS.OU THEN
             FPT_OPEN.V.EXIST#= %NEWFILE#;
          FIDLEN= 0;
          END;
       ELSE
          ;
    ELSE
       IF BLK4_NSUBLKS = 0 THEN
          ;
       ELSE DO;
          FPT_OPEN.V.EXIST#= %ERROR#;
          DO L=0 TO BLK4_NSUBLKS-1;
             BLK5$= BLK4_SUBLK$(L);
             DO CASE( BLK5_CODE );
                CASE( %ON## );
 
                CASE( %INTO## );
                   FPT_OPEN.V.EXIST#= %OLDFILE#;
                CASE( %OVER## );
                   FPT_OPEN.V.EXIST#= %NEWFILE#;
                CASE( %FID## );
                   FIDLEN= BLK5_COUNT;
                   TEXTFID= BLK5_TEXT;
                END;
             END;
          END;
    CALL OPEN_FID( F$OUT#,TEXTFID,FIDLEN,FPT_OPEN )  ALTRET( ALT_RETURN );
    CALL M$UNFID( FPT_UNFID )  ALTRET( ALT_RETURN );
RE_TURN:
    RETURN;
 
ALT_RETURN:
    ALTRETURN;
 
END OPEN_OUT;
%EJECT;
END EXEQ;
