/*M*  CP6DEARC - separates "unpacks" a single file into more than one
      individual files. */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*P*
    NAME: CP6DEARC
    PURPOSE:
          To separate "unpack" one file into many individual files.
    DESCRIPTION:
          This program will take a "packed" file produced by PACKUP
          and unpack each individual files within this "packed" file
          into their original format.
*/
CP6DEARC: PROC MAIN;
%SUB OVER_FILE = 1;
%SUB ON_FILE = 2;
%SUB TO_FILE = 3;
%SUB HOW_TO = 10;
%SUB THE_FILENAME = 1;
%SUB THE_FIT = 2;
%SUB THE_KEY = 3;
%SUB THE_REC = 4;
%SUB CONT_REC = 5;
%SUB CONT_KEY = 6;
%SUB CONT_FIT = 7;
%SUB CONT_FILENAME = 8;
%SUB NO_OP = 9;
%SUB THE_EOF = 10;
%SUB TRUE = '1'B;
%SUB FALSE = '0'B;
%SUB MAX_BUFFER = 81920;
%SUB NEVER = "WHILE('0'B)";
%SUB HASHSIZE = 121;
%SUB STD_OPT = 11;
%SUB FILE_OPT1 = 12;
%SUB LIST_OPT = 13;
%SUB FILE_OPT2 = 14;
%INCLUDE CP_6;
%INCLUDE CP_6_SUBS;
%INCLUDE XU_FORMAT_C;
%INCLUDE XU_MACRO_C;
%INCLUDE XU_SUBS_C;
%INCLUDE XU_PERR_C;
%INCLUDE B$JIT_C;
%INCLUDE B_ERRORS_C;
%INCLUDE FM$FIT;
 
DCL X$FORMAT ENTRY(1);
DCL XSF$LOCCODE ENTRY(2) ALTRET;
%CODE03;
%CODE04;
%F_FDS(NAME=FDS,
       DCB=M$DO,
       TRUNC=NO,
       BUF=FORMAT_BUFF,
       VECTR=DATA_VEC);
DCL M$SI DCB;
DCL M$OU DCB;
DCL M$DO DCB;
DCL M$FILE DCB;
 
%FPT_READ (FPTN=READ_SI,
           DCB=M$SI,
           BUF=NIL);
%FPT_OPEN (FPTN=OPEN_OU,
           NAME=NAME_OUT,
           DCB=M$OU);
%FPT_WRITE (FPTN=WRITE_OU,
            DCB=M$OU,
            BUF=NIL);
%FPT_CLOSE (FPTN=CLOSE_SI,
            DCB=M$SI);
%FPT_CLOSE (FPTN=CLOSE_OU,
            DCB=M$OU,
            DISP=SAVE);
%FPT_CLOSE (FPTN=CLOSE_FILE_W_FILES,
            DCB=M$FILE);
%FPT_WRITE (FPTN=WRITE_ERROR,
            DCB=M$DO);
%FPT_WRITE (FPTN=WRITE_CHAP,
            DCB=M$DO,
            BUF=NAME_OUT.TEXT);
%FPT_OPEN (FPTN=OPEN_FILE_W_FILES,
           DCB=M$FILE,
           NAME=FILE_W_FILES,
           ASN=FILE);
%FPT_READ (FPTN=READ_FILE_W_FILES,
           DCB=M$FILE,
           BUF=CURRENT_FILENAME);
%FPT_TIME(SOURCE=UTS,
          DEST=EXT,
          DATE=DATE_BUF,
          TIME=TIME_BUF,
          TSTAMP=MOD_TIME);
 
%FPT_GDS(FREE=YES,
         RESULTS=VLP_VECTOR,
         SEGSIZE=1024,
         STCLASS=STATIC);
%VLP_VECTOR;
 
 
    %FPT_GDS       (FPTN=GET_DATA,
                         RESULTS=DATA_VECTOR,
                         SEGSIZE=40960);
 
          %VLP_VECTOR (FPTN=DATA_VECTOR);
 
          %VLP_VECTOR (FPTN=INPUT_VECTOR);
          %VLP_VECTOR (FPTN=OUTPUT_VECTOR);
 
DCL CHAR0 CHAR(16384) BASED;
DCL CHAR1 UBIN BYTE CALIGNED BASED;
DCL INPUT_BUFFER$ PTR STATIC SYMDEF;
DCL OUTPUT_BUFFER$ PTR STATIC SYMDEF;
DCL FIT_BUFFER CHAR(4096) STATIC;
DCL FIT_BUF(0:4095) REDEF FIT_BUFFER UBIN BYTE CALIGNED;
DCL DVBYTE_BUFFER BIT(9) STATIC;
DCL 1 KEY_BUFFER STATIC ALIGNED,
      2 SZ UNAL UBIN BYTE INIT(255),
      2 SZ_CH REDEF SZ CHAR(1),
      2 KEY UNAL CHAR(255) INIT(' ');
 
DCL 1 NAME_OUT STATIC,
      2 L UBIN(9) CALIGNED,
      2 TEXT CHAR(31);
DCL CURRENT_FILENAME CHAR(31) STATIC;
DCL 1 FILE_W_FILES STATIC,
      2 L# UBIN(9) INIT(31) UNAL,
      2 NAME# CHAR(31) INIT(' ');
DCL FNAME CHAR(32);
DCL TEXT_RED(0:7) REDEF FNAME SBIN;
DCL 1 NAME_ENTRY BASED,
      2 NEXT$ PTR,
      2 NAME,
        3 LEN UBIN(9),
        3 TEXT CHAR(63);
DCL HASH_TBL(0:120) PTR STATIC;
DCL FORMAT_BUFF CHAR(140) STATIC SYMDEF INIT(' ');
DCL DATA_VEC(0:7) BIT(72) STATIC INIT(VECTOR(NIL)*0);
DCL MOD_TIME UBIN(36) STATIC;
DCL DATE_BUF CHAR(10) STATIC;
DCL TIME_BUF CHAR(11) STATIC;
 
DCL M$SI$ PTR STATIC;
DCL M$OU$ PTR STATIC;
DCL M$FILE$ PTR STATIC;
DCL U$ PTR STATIC;
DCL W$ PTR STATIC;
DCL V$ PTR STATIC;
DCL Q$ PTR STATIC;
DCL PTR$ PTR STATIC;
DCL HASH_PTR$ PTR STATIC;
DCL B$JIT$ PTR SYMREF;
DCL B$TCB$ PTR SYMREF;
 
DCL FIRST_SW BIT(1) STATIC;
 
DCL RECTYPE UBIN(9) UNAL;
DCL IN_BUF_SZ UBIN;
DCL OUT_BUF_SZ UBIN;
DCL TWO_B_LENGTH UBIN;
DCL TWO_BYTE_LEN REDEF TWO_B_LENGTH CHAR(4);
DCL BYTE_LEN UBIN BYTE UNAL;
DCL FILENAME CHAR(31);
DCL ORG_CH CHAR(3);
DCL FTYPE CHAR(2);
DCL FIT_SZ UBIN;
DCL I UBIN;
DCL K UBIN;
DCL HASH_NUM SBIN;
DCL SIGN_NUM REDEF HASH_NUM SBIN;
DCL NUM_NODES UBIN;
DCL LEN UBIN;
DCL HOW_MUCH_LEFT SBIN;
DCL HOW_MUCH_USED SBIN;
DCL CODE UBIN;
DCL UGRAN UBIN;
DCL NGRAN UBIN;
DCL NREC UBIN;
DCL SI_EOF BIT(1);
DCL OPEN_SW BIT(1);
DCL NEW_REC BIT(1);
DCL LIST_GIVEN BIT(1);
DCL FOPT1_GIVEN BIT(1);
DCL FOPT2_GIVEN BIT(1);
DCL STD_GIVEN BIT(1);
DCL END_OF_FILE_W_FILES BIT(1);
DCL FILE_OPT_GIVEN BIT(1);
DCL FOUND_MATCH BIT(1);
DCL ALREADY_LISTED BIT(1);
DCL ALREADY_SEARCHED BIT(1);
DCL OPTION1 BIT(1);
DCL OPTION2 BIT(1);
 
%P_PCB (NAME=CP6DEARC_PCB,
        STCLASS="STATIC SYMDEF",
        R=CP6DEARC_NODES,
        W=CP6DEARC_WORKSPACE,
        U$=NIL,
        WSZ=500,
        N#=0);
DCL CP6DEARC_WORKSPACE(0:499) SBIN WORD STATIC SYMDEF;
DCL CP6DEARC_NODES SBIN WORD SYMREF;
%PARSE$SYM (NAME=CP6DEARC$SYM,
            STCLASS="BASED");
%PARSE$OUT (NAME=CP6DEARC$OUTBLK,
            STCLASS="BASED");
DCL X$PARSE ENTRY(1) ALTRET;
 
DCL PARSE_ERROR_MSG CHAR(0) STATIC INIT('**** Invalid command syntax ***');
DCL FID_ERROR_MSG CHAR(0) STATIC INIT('**** Fid error ****');
DCL OU_ERROR_MSG CHAR(0) STATIC INIT('**** Invalid or missing OU file ****');
DCL ILL_WILDCARD_MSG CHAR(0) STATIC INIT('*** Illegal wildcard on STD option ***');
DCL LIST_HEADING CHAR(0) STATIC INIT('Org TY  Gran  NGAV     Rec   Last modified   Name');
DCL LIST_DESC CHAR(0) STATIC INIT(
'%3A %2P%2A  %3.0.1P%4.27D  %4.0.1P%4.27D   %5P%5D %6P%5A %7P%10A  %8P%32A %10P');
DCL FILE_NOT_FOUND CHAR(0) STATIC INIT(
'Cannot find file %2.1P%32A %2/');
 
%B$JIT0;
%U$JIT1;
%A$JIT6X;
%B$TCB;
%B$ALT;
%F$DCB;
%EJECT;
/*****************************************************/
 
        VLP_VECTOR = VECTOR(NIL);
        HOW_MUCH_LEFT = 0;
        HOW_MUCH_USED = 0;
        M$SI$ = DCBADDR(DCBNUM(M$SI));
        M$OU$ = DCBADDR(DCBNUM(M$OU));
        M$FILE$ = DCBADDR(DCBNUM(M$FILE));
 
          CALL M$GDS (GET_DATA) WHENALTRETURN DO;
                    CALL M$MERCS;
                    END;
 
          INPUT_BUFFER$ = DATA_VECTOR.PTR$;
          OUTPUT_BUFFER$ = PINCRC(DATA_VECTOR.PTR$,MAX_BUFFER);
 
          READ_SI.BUF_.BUF$ = INPUT_BUFFER$;
          WRITE_OU.BUF_.BUF$ = OUTPUT_BUFFER$;
 
          READ_SI.BUF_.BOUND = MAX_BUFFER - 1;
          WRITE_OU.BUF_.BOUND = MAX_BUFFER - 1;
 
        FIRST_SW = TRUE;
        OPEN_SW = FALSE;
        DO I = 0 TO HASHSIZE - 1;  /* init hash table*/
          HASH_TBL(I) = ADDR(NIL);
        END;
 
        CP6DEARC_PCB.ROOT$ = ADDR(CP6DEARC_NODES);
      IF B$JIT$->B$JIT.CCARS > B$JIT$->B$JIT.CCDISP   /* if options given */
      THEN DO;
        CP6DEARC_PCB.TEXT$ = ADDR(B$JIT.CCBUF);
        CP6DEARC_PCB.NCHARS = B$JIT.CCARS;
        CALL X$PARSE(CP6DEARC_PCB) ALTRET(PARSE_ERROR); /* parse nodes */
        NUM_NODES = CP6DEARC_PCB.OUT$->CP6DEARC$OUTBLK.NSUBLKS;
        DO I = 0 TO NUM_NODES - 1;    /* do while theres parse nodes */
           U$ = CP6DEARC_PCB.OUT$->CP6DEARC$OUTBLK.SUBLK$(I);
           DO CASE(U$->CP6DEARC$OUTBLK.CODE);   /* if node is of type: */
              CASE(LIST_OPT);    /* list option */
                 LIST_GIVEN = TRUE;  /* set flag */
              CASE(HOW_TO);      /* OVER, ON or TO */
                 V$=U$->CP6DEARC$OUTBLK.SUBLK$(0);
                 DO CASE(V$->CP6DEARC$OUTBLK.CODE);  /* is it */
                   CASE(OVER_FILE);   /* OVER */
                      OPEN_OU.V.EXIST# = %NEWFILE#;
                   CASE(TO_FILE,ON_FILE);  /* ON or TO */
                      OPEN_OU.V.EXIST# = %ERROR#;
                 END; /* do case */
              CASE(STD_OPT);   /* STD option */
                 FILE_OPT_GIVEN = TRUE;   /* set flag */
                 FILE_W_FILES.L# = U$->CP6DEARC$OUTBLK.SUBLK$(0)->CP6DEARC$SYM.COUNT;
                 FILE_W_FILES.NAME# = U$->CP6DEARC$OUTBLK.SUBLK$(0)->CP6DEARC$SYM.TEXT;
                 CALL INDEX(K,'?',FILE_W_FILES.NAME#) /* do NOT allow wildcarding here*/
                    WHENRETURN DO;
                      WRITE_ERROR.BUF_ = VECTOR(ILL_WILDCARD_MSG);
                      CALL M$WRITE(WRITE_ERROR);
                      GOTO END_OF_SI;
                    END;
                 END_OF_FILE_W_FILES = FALSE;
                 CALL M$OPEN(OPEN_FILE_W_FILES) ALTRET(IO_ERROR); /* open file w/filenames*/
                 CALL M$READ(READ_FILE_W_FILES) ALTRET(END_OF_FWF);/* read one record*/
                 LEN = M$FILE$->F$DCB.ARS#;
                 DO WHILE NOT END_OF_FILE_W_FILES; /* while not eof on file w/filenames*/
                    CALL ADD_HASH_TBL; /* add filename to hash tbl */
                    CALL M$READ(READ_FILE_W_FILES) ALTRET(END_OF_FWF); /* read a rec */
                    LEN = M$FILE$->F$DCB.ARS#;
                   DO NEVER;
END_OF_FWF:         IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.ERR# = %E$EOF
                    THEN DO;
                      CALL M$CLOSE(CLOSE_FILE_W_FILES) ALTRET(IO_ERROR);
                      END_OF_FILE_W_FILES = TRUE;
                    END;
                   END; /* do never */
                 END; /* do while */
              CASE(FILE_OPT1); /* if one filenam given in option */
                OPTION1 = TRUE;
                FILE_OPT_GIVEN = TRUE; /* set flag */
                CURRENT_FILENAME = U$->CP6DEARC$SYM.TEXT; /* get fid */
                LEN = U$->CP6DEARC$SYM.COUNT;
                CALL ADD_HASH_TBL; /* add file to hash table */
              CASE(FILE_OPT2); /* if multiple filenames given */
                OPTION2 = TRUE;
                FILE_OPT_GIVEN = TRUE; /* set flag */
                DO K = 0 TO U$->CP6DEARC$OUTBLK.NSUBLKS - 1;/* until no more files */
                   W$ = U$->CP6DEARC$OUTBLK.SUBLK$(K); /* pickup a file */
                   CURRENT_FILENAME = W$->CP6DEARC$SYM.TEXT;
                   LEN = W$->CP6DEARC$SYM.COUNT;
                   CALL ADD_HASH_TBL; /* add file to hash tbl */
                END;
              CASE(ELSE);
           END;  /* do case */
        END; /* do i */
      END; /* if theres options */
        ALREADY_LISTED = FALSE;
        ALREADY_SEARCHED = FALSE;
        SI_EOF = FALSE;
        NAME_OUT.TEXT = ' ';
        NAME_OUT.L = 0;
        FIT_SZ = 0;
        KEY_BUFFER.SZ = 0;
        NEW_REC = TRUE;
        OUT_BUF_SZ = 0;
        CALL M$READ(READ_SI) ALTRET(END_OF_SI);
        DO WHILE NOT SI_EOF;            /* while its not end of SI file       */
           IN_BUF_SZ = 0;
           DO WHILE(IN_BUF_SZ < MAX_BUFFER) AND (IN_BUF_SZ < M$SI$->F$DCB.ARS#);
              RECTYPE = PINCRC(INPUT_BUFFER$,IN_BUF_SZ)->CHAR1;
              DO CASE(RECTYPE); /* if record is of type: */
               CASE(CONT_FILENAME,THE_FILENAME); /* if filename types         */
                    BYTE_LEN = PINCRC(INPUT_BUFFER$,IN_BUF_SZ+1)->CHAR1; /* get length                */
                    SUBSTR(NAME_OUT.TEXT,NAME_OUT.L,BYTE_LEN) =
                      SUBSTR(INPUT_BUFFER$->CHAR0,IN_BUF_SZ+2,BYTE_LEN);/* get filename*/
                    NAME_OUT.L = NAME_OUT.L + BYTE_LEN;
                    IN_BUF_SZ = IN_BUF_SZ + 2 + BYTE_LEN; /* increment counter*/
               CASE(CONT_FIT,THE_FIT);  /* if fit types                       */
                 TWO_B_LENGTH = 0;
                 SUBSTR(TWO_BYTE_LEN,2,2) =
                   SUBSTR(INPUT_BUFFER$->CHAR0,IN_BUF_SZ+1,2); /* get length          */
                 SUBSTR(FIT_BUFFER,FIT_SZ,TWO_B_LENGTH) =
                   SUBSTR(INPUT_BUFFER$->CHAR0,IN_BUF_SZ+3,TWO_B_LENGTH);
                 IN_BUF_SZ = IN_BUF_SZ + 3 + TWO_B_LENGTH;
                 IF RECTYPE = THE_FIT
                 THEN DO;
                    FIT_SZ = 0;
                    OPEN_OU.IFPARAM_ = VECTOR(FIT_BUFFER);
                    END;
                 ELSE FIT_SZ = FIT_SZ + TWO_B_LENGTH;
               CASE(CONT_KEY,THE_KEY);
                 IF LIST_GIVEN /* if list option given */
                 THEN  CALL LIST_FILE_ONLY; /* then list file only */
                 ELSE DO;  /* else no list option given */
                   IF FILE_OPT_GIVEN /* if filename(s) given */
                   THEN DO;
                     CALL FIND_NAME_IN_HASH_TBL; /* find file in hash tbl */
                     IF FOUND_MATCH /* if found */
                     THEN GOTO UNPACK_FIT_ETC; /* unpack it */
                     ELSE CALL SKIP_RECTYPE;
                   END;
                   ELSE DO;  /* else no file option given */
UNPACK_FIT_ETC:     BYTE_LEN = PINCRC(INPUT_BUFFER$,IN_BUF_SZ+1)->CHAR1; /* get length                */
                    SUBSTR(KEY_BUFFER.KEY,KEY_BUFFER.SZ,BYTE_LEN) =
                      SUBSTR(INPUT_BUFFER$->CHAR0,IN_BUF_SZ+2,BYTE_LEN);/* get key       */
                    KEY_BUFFER.SZ = KEY_BUFFER.SZ + BYTE_LEN;
                    IN_BUF_SZ = IN_BUF_SZ + 2 + BYTE_LEN;
                    IF RECTYPE = THE_KEY   /* if the key type                    */
                    THEN DO;
                      OPEN_OU.V.ORG# = %KEYED#;
                      IF NOT OPEN_SW      /* if no file opened                  */
                      THEN DO;
                        CALL M$OPEN(OPEN_OU) ALTRET(IO_ERROR);
                        CALL M$WRITE(WRITE_CHAP);
                        OPEN_SW = TRUE;  /* set open flag                      */
                      END;
                      WRITE_OU.KEY_ = VECTOR(KEY_BUFFER); /* assign key buf*/
                    END;                /* if key type                        */
                   END; /* else no file option given */
                 END; /* else no list option given */
               CASE(CONT_REC);          /* if continue record                 */
                 IF LIST_GIVEN /* if list opt given */
                 THEN CALL LIST_FILE_ONLY; /* then list file only */
                 ELSE DO;  /* if no list option given */
                   IF FILE_OPT_GIVEN /* if filename(s) given */
                   THEN DO;
                      CALL FIND_NAME_IN_HASH_TBL; /* find fid in hash tbl*/
                      IF FOUND_MATCH /* if found */
                      THEN GOTO UNPACK_CONTREC; /* unpack it */
                      ELSE CALL SKIP_RECTYPE;
                   END;
                   ELSE DO; /* else theres no file option given */
UNPACK_CONTREC:     TWO_B_LENGTH = 0;
                    IF NEW_REC             /* if new record, need dvbyte first   */
                    THEN DO;
                       WRITE_OU.V.DVBYTE = BINBIT(PINCRC(INPUT_BUFFER$,IN_BUF_SZ+1)->CHAR1,9);
                       NEW_REC = FALSE;
                       SUBSTR(TWO_BYTE_LEN,2,2) =
                         SUBSTR(INPUT_BUFFER$->CHAR0,IN_BUF_SZ+2,2); /* get length       */
                       SUBSTR(OUTPUT_BUFFER$->CHAR0,OUT_BUF_SZ,TWO_B_LENGTH) =
                         SUBSTR(INPUT_BUFFER$->CHAR0,IN_BUF_SZ+4,TWO_B_LENGTH);
                       IN_BUF_SZ = IN_BUF_SZ + 4 + TWO_B_LENGTH;
                    END;
                    ELSE DO;          /* else not new record, do not need dvbyte */
                       SUBSTR(TWO_BYTE_LEN,2,2) =
                         SUBSTR(INPUT_BUFFER$->CHAR0,IN_BUF_SZ+1,2); /* get length*/
                       SUBSTR(OUTPUT_BUFFER$->CHAR0,OUT_BUF_SZ,TWO_B_LENGTH) =
                         SUBSTR(INPUT_BUFFER$->CHAR0,IN_BUF_SZ+3,TWO_B_LENGTH);
                       IN_BUF_SZ = IN_BUF_SZ + 3 + TWO_B_LENGTH;
                    END;
                    OUT_BUF_SZ = OUT_BUF_SZ + TWO_B_LENGTH;
                   END; /* else theres no file option given */
                 END; /* else theres no list option given */
               CASE(THE_REC);           /* if the record                      */
                 IF LIST_GIVEN /* if list opt given */
                 THEN CALL LIST_FILE_ONLY; /* list file only */
                 ELSE DO;  /* no list option given */
                   IF FILE_OPT_GIVEN /* if filename(s) given */
                   THEN DO;
                     CALL FIND_NAME_IN_HASH_TBL; /* find file in hash tbl */
                     IF FOUND_MATCH /* if found */
                     THEN GOTO UNPACK_REC; /* unpack file */
                     ELSE CALL SKIP_RECTYPE;
                   END;
                   ELSE DO; /* else no file option given */
UNPACK_REC:         TWO_B_LENGTH = 0;
                    IF NOT NEW_REC         /* if not new record                  */
                    THEN DO;
                       SUBSTR(TWO_BYTE_LEN,2,2) =
                         SUBSTR(INPUT_BUFFER$->CHAR0,IN_BUF_SZ+1,2); /* get length*/
                       SUBSTR(OUTPUT_BUFFER$->CHAR0,OUT_BUF_SZ,TWO_B_LENGTH) =
                         SUBSTR(INPUT_BUFFER$->CHAR0,IN_BUF_SZ+3,TWO_B_LENGTH);
                       IN_BUF_SZ = IN_BUF_SZ + 3 + TWO_B_LENGTH;
                    END;
                    ELSE DO;               /* if new record                      */
                       WRITE_OU.V.DVBYTE = BINBIT(PINCRC(INPUT_BUFFER$,IN_BUF_SZ+1)->CHAR1,9);
                       SUBSTR(TWO_BYTE_LEN,2,2) =
                         SUBSTR(INPUT_BUFFER$->CHAR0,IN_BUF_SZ+2,2); /* get length       */
                       SUBSTR(OUTPUT_BUFFER$->CHAR0,OUT_BUF_SZ,TWO_B_LENGTH) =
                         SUBSTR(INPUT_BUFFER$->CHAR0,IN_BUF_SZ+4,TWO_B_LENGTH);
                       IN_BUF_SZ = IN_BUF_SZ + 4 + TWO_B_LENGTH;
                    END;
                    OUT_BUF_SZ = OUT_BUF_SZ + TWO_B_LENGTH;
                    IF NOT OPEN_SW
                    THEN DO;
                       CALL M$OPEN(OPEN_OU) ALTRET(IO_ERROR);
                       CALL M$WRITE(WRITE_CHAP);
                       OPEN_SW = TRUE;
                    END;                /* if not open a file                 */
                 IF OUT_BUF_SZ = 0
                    THEN WRITE_OU.BUF_ = VECTOR(NIL);
                    ELSE DO;
                         WRITE_OU.BUF_.BUF$ = OUTPUT_BUFFER$;
                         WRITE_OU.BUF_.BOUND = OUT_BUF_SZ - 1;
                         END;
                    CALL M$WRITE(WRITE_OU) ALTRET(IO_ERROR);
                    NEW_REC = TRUE;
                    OUT_BUF_SZ = 0;
                    KEY_BUFFER.SZ = 0;
                   END; /* no file option given */
                 END; /* no list option given */
               CASE(NO_OP);
                 IN_BUF_SZ = 0;
                 GOTO READ_A_RECORD;
               CASE(THE_EOF);
                 FOUND_MATCH = FALSE;
                 ALREADY_LISTED = FALSE;
                 ALREADY_SEARCHED = FALSE;
                 IF DCBADDR(DCBNUM(M$OU))->F$DCB.FCD# /* if ou file open */
                 THEN CALL M$CLOSE(CLOSE_OU) ALTRET(IO_ERROR);
                 NAME_OUT.TEXT = ' ';
                 NAME_OUT.L = 0;
                 IN_BUF_SZ = IN_BUF_SZ + 1;
                 FIT_SZ = 0;
                 OPEN_SW = FALSE;
                 OPEN_OU.V.ORG# = 0;
             CASE(ELSE);
                 GOTO READ_A_RECORD;
               END;                     /* do case*/
              END;            /* do while in_buf counter < max_buffer size    */
READ_A_RECORD:;
           CALL M$READ(READ_SI) ALTRET(END_OF_SI);
           DO NEVER;
END_OF_SI:    IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.ERR# = %E$EOF
              THEN DO;
                 CALL M$CLOSE(CLOSE_SI) ALTRET(IO_ERROR);
                 SI_EOF = TRUE;
                 END;
              END;                      /* do never                           */
           END;                         /* do while not end of SI file        */
    DO NEVER;
IO_ERROR: ;
        CALL M$MERC;
        CALL M$ERR;
 
 
PARSE_ERROR: ;
        WRITE_ERROR.BUF_ = VECTOR(PARSE_ERROR_MSG);
        CALL M$WRITE (WRITE_ERROR);
        CALL M$ERR;
 
FID_ERROR: ;
        WRITE_ERROR.BUF_ = VECTOR(FID_ERROR_MSG);
        CALL M$WRITE (WRITE_ERROR);
        CALL M$ERR;
    END; /* do never */
%EJECT;
 
/************************************************************/
/* procedure to add filename to hash table via table of pointers */
ADD_HASH_TBL: PROC;
DCL J UBIN;
 
FNAME = ' ';
HASH_NUM = 0;
DO J = 0 TO 7;
   HASH_NUM = HASH_NUM + TEXT_RED(J);
END;
IF SIGN_NUM < 0
THEN HASH_NUM = -(SIGN_NUM);
HASH_NUM = MOD(HASH_NUM,HASHSIZE);
 
IF HOW_MUCH_LEFT < SIZEC(NAME_ENTRY)
THEN DO;
   CALL M$GDS(FPT_GDS)ALTRET(PMME_ERR);
   V$ = VLP_VECTOR.PTR$;
   HOW_MUCH_LEFT = 1024 * 4;
END;
Q$ = PINCRC(V$,SIZEC(NAME_ENTRY));
 
 
 
HASH_PTR$ = HASH_TBL(HASH_NUM);
 
IF HASH_PTR$ = ADDR(NIL)
THEN DO;
    V$->NAME_ENTRY.NAME.TEXT = SUBSTR(CURRENT_FILENAME,0,LEN);
    V$->NAME_ENTRY.NAME.LEN = LEN;
    V$->NAME_ENTRY.NEXT$ = ADDR(NIL);
    HASH_TBL(HASH_NUM) = V$; /* assign new addr to index ptr in array*/
END;
ELSE DO; /* not nil addr */
   DO WHILE( HASH_PTR$ ~= ADDR(NIL));
      PTR$ = HASH_PTR$;
      HASH_PTR$ = PTR$->NAME_ENTRY.NEXT$;
   END;
   V$->NAME_ENTRY.NAME.TEXT = SUBSTR(CURRENT_FILENAME,0,LEN);
   V$->NAME_ENTRY.NAME.LEN = LEN;
   V$->NAME_ENTRY.NEXT$ = ADDR(NIL);
   PTR$->NAME_ENTRY.NEXT$ = V$;
END;
 
HOW_MUCH_USED = HOW_MUCH_USED + SIZEC(NAME_ENTRY);
HOW_MUCH_LEFT = HOW_MUCH_LEFT - HOW_MUCH_USED;
V$ = Q$;
 
DO NEVER;
PMME_ERR: CALL M$MERC;
          CALL M$ERR;
END;
END ADD_HASH_TBL;
%EJECT;
/**  routine to list file(s) only instead of unpacking */
LIST_FILE_ONLY: PROC;
 
IF NOT ALREADY_LISTED
THEN DO;
  IF (FILE_OPT_GIVEN) OR (OPTION1) OR (OPTION2)
  THEN DO;
     CALL FIND_NAME_IN_HASH_TBL;
     IF FOUND_MATCH
     THEN DO;
        CALL PRINT_FIT_INFO;
        ALREADY_LISTED = TRUE;
     END;
  END;  /* if other options given in addition to list opt. */
  ELSE DO; /* if list opt only */
     CALL PRINT_FIT_INFO;
     ALREADY_LISTED = TRUE;
  END;
   CALL SKIP_RECTYPE;
END;
ELSE CALL SKIP_RECTYPE;
END LIST_FILE_ONLY;
%EJECT;
 
PRINT_FIT_INFO: PROC;
 
IF FILE_OPT_GIVEN AND OPTION1 /* if one filename desired at option */
THEN DO;
   WRITE_CHAP.BUF_ = VECTOR(LIST_HEADING);
   CALL M$WRITE(WRITE_CHAP);
   Q$ = ADDR(FIT_BUFFER);
   ORG_CH = '   ';
   CODE = 3;
   CALL XSF$LOCCODE(Q$,CODE)ALTRET(GET_TIME);
   DO CASE(Q$->CODE03.ORG);
      CASE(%KEYED#);
         ORG_CH = 'Key';
      CASE(%CONSEC#);
         ORG_CH = 'Con';
      CASE(%INDEXED#);
         ORG_CH = 'Ind';
      CASE(%RELATIVE#);
         ORG_CH = 'Rel';
      CASE(%RANDOM#);
         ORG_CH = 'Ran';
      CASE(%FIXED#);
         ORG_CH = 'Fix';
      CASE(ELSE);
         ORG_CH = '???';
   END; /* do case*/
   FTYPE = Q$->CODE03.TYPE;
   UGRAN = Q$->CODE03.UGRANS;
   NGRAN = Q$->CODE03.NGAVAL;
   NREC = Q$->CODE03.NRECS;
GET_TIME: Q$ = ADDR(FIT_BUFFER);
          CODE = 4;
          CALL XSF$LOCCODE(Q$,CODE)ALTRET(FORGET_TIME);
   MOD_TIME = Q$->CODE04.MODIFY.TIME;
   CALL M$TIME(FPT_TIME) ALTRET(TIME_ERROR);
FORGET_TIME:FDS.FMT_ = VECTOR(LIST_DESC);
   FDS.NVECS# = 8;
   FDS.BUF_.BOUND = 100;
 
   DATA_VEC(0) = VECTOR(ORG_CH);
   DATA_VEC(1) = VECTOR(FTYPE);
   DATA_VEC(2) = VECTOR(UGRAN);
   DATA_VEC(3) = VECTOR(NGRAN);
   DATA_VEC(4) = VECTOR(NREC);
   DATA_VEC(5) = VECTOR(TIME_BUF);
   DATA_VEC(6) = VECTOR(DATE_BUF);
   DATA_VEC(7) = VECTOR(NAME_OUT.TEXT);
   CALL X$FORMAT(FDS);
END;
ELSE DO;  /* if more than 1 filename */
   WRITE_CHAP.BUF_ = VECTOR(NAME_OUT.TEXT);
   CALL M$WRITE(WRITE_CHAP);
END;
 
DO NEVER;
TIME_ERROR:  CALL M$MERC;
             CALL M$ERR;
END;
 
END PRINT_FIT_INFO;
%EJECT;
/*  routine to find current filename in hash table */
FIND_NAME_IN_HASH_TBL: PROC;
 
IF NOT ALREADY_SEARCHED
THEN DO;
  ALREADY_SEARCHED = TRUE;
  FOUND_MATCH = FALSE;
 
  FNAME = ' ';
  HASH_NUM = 0;
  DO I = 0 TO 7;
     HASH_NUM = HASH_NUM + TEXT_RED(I);
  END;
 
  IF SIGN_NUM < 0
  THEN HASH_NUM = -(SIGN_NUM);
 
  HASH_NUM = MOD(HASH_NUM,HASHSIZE);
  HASH_PTR$ = HASH_TBL(HASH_NUM);
 
  DO WHILE( HASH_PTR$ ~= ADDR(NIL) );
     PTR$ = HASH_PTR$;
     IF PTR$->NAME_ENTRY.NAME.TEXT = NAME_OUT.TEXT
       THEN GOTO FOUND_FILE;
     HASH_PTR$ = PTR$->NAME_ENTRY.NEXT$;
  END;
 
  FDS.FMT_ = VECTOR(FILE_NOT_FOUND);
  FDS.NVECS# = 1;
  FDS.BUF_.BOUND = 100;
  DATA_VEC(0) = VECTOR(NAME_OUT.TEXT);
END;  /* if not already searched */
ELSE RETURN;
 
DO NEVER;
FOUND_FILE:  FOUND_MATCH = TRUE;
             RETURN;
END;
 
END FIND_NAME_IN_HASH_TBL;
%EJECT;
/* routine to skip the current record type, to goto the next rectype */
SKIP_RECTYPE: PROC;
 
TWO_B_LENGTH = 0;
 
IF (RECTYPE = CONT_KEY) OR (RECTYPE = THE_KEY)
THEN DO;
   BYTE_LEN = PINCRC(INPUT_BUFFER$,IN_BUF_SZ+1)->CHAR1;
   IN_BUF_SZ = IN_BUF_SZ + 2 + BYTE_LEN;
END;
ELSE DO;  /* else its either cont record, or the record */
   IF NEW_REC
   THEN DO;
     IF RECTYPE = CONT_REC
     THEN NEW_REC = FALSE;
     SUBSTR(TWO_BYTE_LEN,2,2) = SUBSTR(INPUT_BUFFER$->CHAR0,IN_BUF_SZ+2,2);
     IN_BUF_SZ = IN_BUF_SZ + 4 + TWO_B_LENGTH;
   END;
   ELSE DO;
     IF RECTYPE = THE_REC
     THEN NEW_REC = TRUE;
     SUBSTR(TWO_BYTE_LEN,2,2) = SUBSTR(INPUT_BUFFER$->CHAR0,IN_BUF_SZ+1,2);
     IN_BUF_SZ = IN_BUF_SZ + 3 + TWO_B_LENGTH;
   END;
END;
KEY_BUFFER.SZ = 0;
END SKIP_RECTYPE;
%EJECT;
END CP6DEARC;
