/*M* GIMME_C2  -  this module contains GIMME MACROS.                          */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/**/
/**/
/*  NOTE:  TEXT-C fields are frequently used for resource names.  In all      */
/*  of these MACROS, the count FOLLOWS THE TEXT instead of the other way      */
/*  around.  This allows resource-based keys to sort properly.                */
/**/
/* Structure used for TIME_BLOCK */
/**/
%MACRO TIME_BLOCK (NAME = TIME_BLOCK,
                      LAST = NIL,       /* Default based on LVL               */
                      ALIGN = ALIGNED,
                      LVL = 1,
                      HEADER(YES='1'B,NO='0'B)='1'B,
                      STCLASS = STATIC);
/**/
%LSET STR=CONCAT(TEXTCHAR(STCLASS),'         ');
%IF (SUBSTR(STR,0,8)='CONSTANT') OR
    (SUBSTR(STR,0,6)='STATIC') OR
    (SUBSTR(STR,0,3)='EXT');
  %LSET INIT=CHARTEXT('INIT');
%ELSE;
  %LSET INIT=CHARTEXT('/*');
%ENDIF;
%IF TEXTCHAR(LAST)='NIL';
  %IF LVL=1;
    %LSET TERM=';';
  %ELSE;
    %LSET TERM=',';
  %ENDIF;
%ELSE;
  %LSET TERM=TEXTCHAR(LAST);
%ENDIF;
/**/
%IF HEADER = '1'B;
  %LSET OFFSET=1;
  %IF LVL = 1;
  DCL  1  NAME STCLASS ALIGN,
  %ELSE;
     %LVL NAME ALIGN,
  %ENDIF;
%ELSE;
  %LSET OFFSET=0;
  %CHARTEXT('/*')   NAME   %CHARTEXT('*/')
%ENDIF;
     %(LVL+OFFSET) UTS UBIN WORD,       /* The actual UTS value               */
     %(LVL+OFFSET) RELATIVE BIT(1),     /* Set if UTS is relative to NOW      */
     %(LVL+OFFSET) DATE_PRESENT BIT(1), /* Set if date is specified */
     %(LVL+OFFSET) HOUR_PRESENT BIT(1), /* Set if hour is specified */
     %(LVL+OFFSET) PRESENT BIT(1) %CHARTEXT(TERM) /* Set if UTS field valid   */
%MEND;
/**/
/* Structure used for RESOURCE_BLOCK */
/**/
%MACRO RESOURCE_BLOCK (NAME = RESOURCE_BLOCK,
                      LAST = NIL,       /* Default based on LVL               */
                      ALIGN = ALIGNED,
                      LVL = 1,
                      HEADER(YES='1'B,NO='0'B)='1'B,
                      STCLASS = STATIC);
/**/
%LSET STR=CONCAT(TEXTCHAR(STCLASS),'         ');
%IF (SUBSTR(STR,0,8)='CONSTANT') OR
    (SUBSTR(STR,0,6)='STATIC') OR
    (SUBSTR(STR,0,3)='EXT');
  %LSET INIT=CHARTEXT('INIT');
%ELSE;
  %LSET INIT=CHARTEXT('/*');
%ENDIF;
%IF TEXTCHAR(LAST)='NIL';
  %IF LVL=1;
    %LSET TERM=';';
  %ELSE;
    %LSET TERM=',';
  %ENDIF;
%ELSE;
  %LSET TERM=TEXTCHAR(LAST);
%ENDIF;
/**/
%IF HEADER = '1'B;
  %LSET OFFSET=1;
  %IF LVL = 1;
  DCL  1  NAME STCLASS ALIGN,
  %ELSE;
     %LVL NAME ALIGN,
  %ENDIF;
%ELSE;
  %LSET OFFSET=0;
  %CHARTEXT('/*')   NAME   %CHARTEXT('*/')
%ENDIF;
     %(LVL+OFFSET) RES CALIGNED,
       %(LVL+OFFSET+1) C UBIN(9) CALIGNED, /* The name length                 */
       %(LVL+OFFSET+1) TEXT CHAR(31) CALIGNED, /* The resource name           */
     %(LVL+OFFSET) PRESENT BIT(1) UNAL, /* Set if field valid                 */
     %(LVL+OFFSET) WCARDED BIT(1) UNAL, /* Set if field WILD-CARDED           */
     %(LVL+OFFSET) CHASED BIT(1) UNAL %CHARTEXT(TERM) /* Set if ALIAS chased  */
%MEND;
/**/
/* Structure used for REASON_BLOCK */
/**/
%MACRO REASON_BLOCK (NAME = REASON_BLOCK,
                      LAST = NIL,       /* Default based on LVL               */
                      ALIGN = ALIGNED,
                      LVL = 1,
                      HEADER(YES='1'B,NO='0'B)='1'B,
                      STCLASS = STATIC);
/**/
%LSET STR=CONCAT(TEXTCHAR(STCLASS),'         ');
%IF (SUBSTR(STR,0,8)='CONSTANT') OR
    (SUBSTR(STR,0,6)='STATIC') OR
    (SUBSTR(STR,0,3)='EXT');
  %LSET INIT=CHARTEXT('INIT');
%ELSE;
  %LSET INIT=CHARTEXT('/*');
%ENDIF;
%IF TEXTCHAR(LAST)='NIL';
  %IF LVL=1;
    %LSET TERM=';';
  %ELSE;
    %LSET TERM=',';
  %ENDIF;
%ELSE;
  %LSET TERM=TEXTCHAR(LAST);
%ENDIF;
/**/
%IF HEADER = '1'B;
  %LSET OFFSET=1;
  %IF LVL = 1;
  DCL  1  NAME STCLASS ALIGN,
  %ELSE;
     %LVL NAME ALIGN,
  %ENDIF;
%ELSE;
  %LSET OFFSET=0;
  %CHARTEXT('/*')   NAME   %CHARTEXT('*/')
%ENDIF;
     %(LVL+OFFSET) PRESENT BIT(1),      /* Set if this field is valid         */
     %(LVL+OFFSET) C UBIN(9) CALIGNED,  /* LENGTH of field                    */
     %(LVL+OFFSET) TEXT CHAR(80) %CHARTEXT(TERM) /* The actual purpose        */
%MEND;
/**/
/* Structure used for SHEET_RECORD */
/**/
%MACRO SHEET_RECORD (NAME = SHEET_RECORD,
                      LAST = NIL,       /* Default based on LVL               */
                      ALIGN = DALIGNED,
                      LVL = 1,
                      HEADER(YES='1'B,NO='0'B)='1'B,
                      STCLASS = STATIC);
/**/
%LSET STR=CONCAT(TEXTCHAR(STCLASS),'         ');
%IF (SUBSTR(STR,0,8)='CONSTANT') OR
    (SUBSTR(STR,0,6)='STATIC') OR
    (SUBSTR(STR,0,3)='EXT');
  %LSET INIT=CHARTEXT('INIT');
%ELSE;
  %LSET INIT=CHARTEXT('/*');
%ENDIF;
%IF TEXTCHAR(LAST)='NIL';
  %IF LVL=1;
    %LSET TERM=';';
  %ELSE;
    %LSET TERM=',';
  %ENDIF;
%ELSE;
  %LSET TERM=TEXTCHAR(LAST);
%ENDIF;
/**/
%IF HEADER = '1'B;
  %LSET OFFSET=1;
  %IF LVL = 1;
  DCL  1  NAME STCLASS ALIGN,
  %ELSE;
     %LVL NAME ALIGN,
  %ENDIF;
%ELSE;
  %LSET OFFSET=0;
  %CHARTEXT('/*')   NAME   %CHARTEXT('*/')
%ENDIF;
     %(LVL+OFFSET) TYPE UBIN WORD,      /* Record type                        */
     %(LVL+OFFSET) RES,      /* TYPE = %RT_RES#                    */
       %LSET KLUGE = LVL+OFFSET+1;
       %USER_ID(LVL=KLUGE,NAME=USER_ID,STCLASS=STCLASS);
       %(LVL+OFFSET+1) REASON ALIGNED,
         %(LVL+OFFSET+2) PRESENT BIT(1),
         %(LVL+OFFSET+2) C UBIN(9) CALIGNED,
         %(LVL+OFFSET+2) TEXT CHAR(40),
       %(LVL+OFFSET+1) SITE ALIGNED,
         %(LVL+OFFSET+2) PRESENT BIT(1),
         %(LVL+OFFSET+2) C UBIN(9) CALIGNED,
         %(LVL+OFFSET+2) TEXT CHAR(40),
       %(LVL+OFFSET+1) AVAIL_TIME ALIGNED,
         %(LVL+OFFSET+2) START_ CHAR(5),
         %(LVL+OFFSET+2) END_ CHAR(5),
         %(LVL+OFFSET+2) PRESENT BIT(1),
       %(LVL+OFFSET+1) REASON_SPEC ALIGNED,
         %(LVL+OFFSET+2) PRESENT BIT(1),
         %(LVL+OFFSET+2) CODE UBIN HALF,
         %(LVL+OFFSET+2) DEFAULT,
           %(LVL+OFFSET+3) C UBIN(9) CALIGNED,
           %(LVL+OFFSET+3) TEXT CHAR(80),
       %(LVL+OFFSET+1) * (0:1) UBIN WORD, /* Length-pad                       */
     %(LVL+OFFSET) SIGN REDEF RES,                /* TYPE = %RT_SIGN#                   */
       %LSET KLUGE = LVL+OFFSET+1;
       %TIME_BLOCK(LVL=KLUGE,NAME=START_TIME,STCLASS=STCLASS);
       %TIME_BLOCK(LVL=KLUGE,NAME=END_TIME,STCLASS=STCLASS);
       %REASON_BLOCK(LVL=KLUGE,NAME=REASON,STCLASS=STCLASS);
       %USER_ID(LVL=KLUGE,NAME=USER_ID,STCLASS=STCLASS);
       %(LVL+OFFSET+1) USER_NAME CHAR (20) ALIGNED,
       %(LVL+OFFSET+1) ID_TIME UBIN WORD,
       %(LVL+OFFSET+1) REQ_END_TIME UBIN WORD,
       %(LVL+OFFSET+1) * (0:4) UBIN WORD, /* Length-pad                       */
       %(LVL+OFFSET+1) * CHAR(52),
     %(LVL+OFFSET) ALIAS REDEF RES,    /* TYPE = %RT_ALIAS#                    */
       %LSET KLUGE = LVL+OFFSET+1;
       %(LVL+OFFSET+1) RES CALIGNED,
         %(LVL+OFFSET+2) C UBIN(9) CALIGNED, /* The name length               */
         %(LVL+OFFSET+2) TEXT CHAR(31), /* The resource name                  */
       %REASON_BLOCK(LVL=KLUGE,NAME=REASON,STCLASS=STCLASS);
       %USER_ID(LVL=KLUGE,NAME=USER_ID,STCLASS=STCLASS);
       %(LVL+OFFSET+1) * UBIN WORD,     /* Length-pad                         */
       %(LVL+OFFSET+1) * CHAR (80),
     %(LVL+OFFSET) * UBIN WORD %CHARTEXT(TERM) /* SPARE!                      */
%MEND;
/**/
/* Structure used for SHEET_KEY */
/**/
%MACRO SHEET_KEY (NAME = SHEET_KEY,
                      LAST = NIL,       /* Default based on LVL               */
                      ALIGN = DALIGNED,
                      LVL = 1,
                      HEADER(YES='1'B,NO='0'B)='1'B,
                      STCLASS = STATIC);
/**/
%LSET STR=CONCAT(TEXTCHAR(STCLASS),'         ');
%IF (SUBSTR(STR,0,8)='CONSTANT') OR
    (SUBSTR(STR,0,6)='STATIC') OR
    (SUBSTR(STR,0,3)='EXT');
  %LSET INIT=CHARTEXT('INIT');
%ELSE;
  %LSET INIT=CHARTEXT('/*');
%ENDIF;
%IF TEXTCHAR(LAST)='NIL';
  %IF LVL=1;
    %LSET TERM=';';
  %ELSE;
    %LSET TERM=',';
  %ENDIF;
%ELSE;
  %LSET TERM=TEXTCHAR(LAST);
%ENDIF;
/**/
%IF HEADER = '1'B;
  %LSET OFFSET=1;
  %IF LVL = 1;
  DCL  1  NAME STCLASS ALIGN,
  %ELSE;
     %LVL NAME ALIGN,
  %ENDIF;
%ELSE;
  %LSET OFFSET=0;
  %CHARTEXT('/*')   NAME   %CHARTEXT('*/')
%ENDIF;
     %(LVL+OFFSET) LEN UBIN BYTE CALIGNED,
     %(LVL+OFFSET) REST UNAL,
        %(LVL+OFFSET+1) RES CALIGNED,
           %(LVL+OFFSET+2) TEXT CHAR(31), /* The resource name                */
           %(LVL+OFFSET+2) C UBIN(9) CALIGNED, /* The name length             */
        %(LVL+OFFSET+1) UTS UBIN WORD CALIGNED %CHARTEXT(TERM) /* X-act'n tim */
%MEND;
/**/
/* Structure used for USER_ID */
/**/
%MACRO USER_ID (NAME = USER_ID,
                      LAST = NIL,       /* Default based on LVL               */
                      ALIGN = ALIGNED,
                      LVL = 1,
                      HEADER(YES='1'B,NO='0'B)='1'B,
                      STCLASS = STATIC);
/**/
%LSET STR=CONCAT(TEXTCHAR(STCLASS),'         ');
%IF (SUBSTR(STR,0,8)='CONSTANT') OR
    (SUBSTR(STR,0,6)='STATIC') OR
    (SUBSTR(STR,0,3)='EXT');
  %LSET INIT=CHARTEXT('INIT');
%ELSE;
  %LSET INIT=CHARTEXT('/*');
%ENDIF;
%IF TEXTCHAR(LAST)='NIL';
  %IF LVL=1;
    %LSET TERM=';';
  %ELSE;
    %LSET TERM=',';
  %ENDIF;
%ELSE;
  %LSET TERM=TEXTCHAR(LAST);
%ENDIF;
/**/
%IF HEADER = '1'B;
  %LSET OFFSET=1;
  %IF LVL = 1;
  DCL  1  NAME STCLASS ALIGN,
  %ELSE;
     %LVL NAME ALIGN,
  %ENDIF;
%ELSE;
  %LSET OFFSET=0;
  %CHARTEXT('/*')   NAME   %CHARTEXT('*/')
%ENDIF;
     %(LVL+OFFSET) ACCN CHAR(8),
     %(LVL+OFFSET) UNAME CHAR(12),
     %(LVL+OFFSET) * UBIN WORD %CHARTEXT(TERM) /* SPARE!                      */
%MEND;
