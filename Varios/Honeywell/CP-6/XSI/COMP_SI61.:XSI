/*M* COMP - Compare source files and generate + cards */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* AIC,DMR,PLM=7,IND=4,DCI=4,THI=2,DTI=4 */
/*
/* M$SI = old file
/* M$UI = new file
/* M$OU = + card file
*/
COMP:  PROC MAIN NOAUTO;
%INCLUDE CP_6;
%INCLUDE CP_6_SUBS;
/**/
%EQU F='0'B;
%EQU T='1'B;
/**/
DCL DELFLG BIT(1);
DCL ENDCARD CHAR(4) CONSTANT INIT('+END');
DCL 1 ENDKEY CONSTANT ALIGNED,
      2 * UBIN(9) UNAL INIT(3),
      2 * UBIN(27) UNAL INIT(99999999);
%F$DCB;
%B$ALT;
%B$TCB;
DCL B$TCB$ PTR SYMREF;
DCL LINENO SBIN STATIC INIT(1);
%FPT_CLOSE(DCB=M$SI,DISP=SAVE);
%FPT_WRITE(DCB=M$OU,BP=NO,ONEWKEY=NO,NEWKEY=YES);
DCL M$OU DCB;
DCL M$SI DCB;
DCL M$UI DCB;
DCL M$ME DCB;
DCL M$DO DCB;
%FPT_OPEN (FPTN=MEOPEN,STCLASS=STATIC,DCB=M$ME,FUN=CREATE);
%FPT_OPEN (FPTN=DOOPEN,STCLASS=STATIC,DCB=M$DO,FUN=CREATE);
%FPT_CORRES (FPTN=FPT_CORRES,STCLASS=STATIC,DCB1=M$DO,DCB2=M$ME);
%FPT_ERRMSG (FPTN=FPT_ERRMSG,STCLASS=STATIC,CODE=VLP_ERRCODE,BUF=ERRBUF,OUTDCB1=M$DO,OUTDCB2=M$ME,INCLCODE=NO,FLAGLEV=1);
%VLP_ERRCODE (FPTN=VLP_ERRCODE,STCLASS=STATIC);
DCL ERRBUF CHAR(120) STATIC;
%FPT_WRITE (FPTN=FPT_WRITEDO,STCLASS=STATIC,DCB=M$DO,BUF=DONEMSG);
%FPT_WRITE (FPTN=FPT_WRITEME,STCLASS=STATIC,DCB=M$ME,BUF=DONEMSG);
DCL DONEMSG CHAR(0) STATIC INIT('* COMP processing completed');
DCL NEWBUF CHAR(140) STATIC;
DCL NEWEOF BIT(1) STATIC INIT(%T);
DCL NEWKEY SBIN STATIC INIT(BITBIN('003000000000'O));
DCL NEWSZ SBIN;
DCL OBX SBIN;
DCL OLDBUF CHAR(140) STATIC;
DCL OLDEOF BIT(1) STATIC INIT(%T);
DCL OLDKEY SBIN STATIC INIT(BITBIN('003000000000'O));
DCL OLDSZ SBIN;
%SUB OUDCB="DCBADDR(DCBNUM(M$OU))->F$DCB";
%SUB DODCB="DCBADDR(DCBNUM(M$DO))->F$DCB";
%FPT_OPEN(FPTN=OUOPEN,DCB=M$OU,FUN=CREATE,DISP=NAMED,ORG=KEYED,ACS=DIRECT,TYPE='  ');
DCL OUTBUF CHAR(20) STATIC INIT('+00000,');
DCL OUTKEY SBIN STATIC INIT(BITBIN('003000000000'O));
DCL PREVKEY SBIN;
DCL PREVOLDKEY SBIN;
DCL SAVKEY SBIN;
DCL SAVLN SBIN;
DCL DONOTME BIT(1) STATIC INIT( %T );
%SUB SIDCB="DCBADDR(DCBNUM(M$SI))->F$DCB";
%FPT_OPEN(FPTN=SIOPEN,DCB=M$SI,ACS=SEQUEN);
%FPT_READ(FPTN=SIREAD,DCB=M$SI,BUF=OLDBUF,KEY=OLDKEY,KEYR=YES);
%SUB UIDCB="DCBADDR(DCBNUM(M$UI))->F$DCB";
%FPT_READ(FPTN=UIREAD,DCB=M$UI,BUF=NEWBUF,KEY=NEWKEY,KEYR=YES);
%VLP_NAME;
/**/
       CALL M$OPEN(MEOPEN) ALTRET(NOME);
       DO WHILE ( %F );
NOME:      CALL M$ERR;
          END;
       IF NOT DODCB.FCD# THEN
           CALL M$OPEN(DOOPEN) ALTRET(NODO);
           DO WHILE ( %F );
NODO:          CALL M$ERR;
              END;
       CALL M$CORRES(FPT_CORRES) ALTRET(SAME);
       DO WHILE ( %F );
SAME:      DONOTME = %F;
           FPT_ERRMSG.V.OUTDCB2# = 0;
          END;
       CALL M$OPEN(SIOPEN) ALTRET(NOSI);
       IF SIDCB.ORG# ~= %KEYED# THEN
           SIREAD.V.KEYR# = %NO#;
       OLDEOF=%F;
       OUOPEN.V.TYPE#=SIDCB.TYPE#;
       LINENO=0;
       DO WHILE ( %F );
NOSI:      CALL ERR;
          END;
       SIOPEN.V.DCB#=DCBNUM(M$UI);
       CALL FILENAME(UIDCB,SIOPEN);
       CALL M$OPEN(SIOPEN) ALTRET(NOUI);
       IF UIDCB.ORG# ~= %KEYED# THEN
           UIREAD.V.KEYR# = %NO#;
       NEWEOF=%F;
       IF OUOPEN.V.TYPE#=' ' THEN
           OUOPEN.V.TYPE#=UIDCB.TYPE#;
       DO WHILE ( %F );
NOUI:      CALL ERR;
          END;
       CALL INSERT(OUOPEN.V.TYPE#,0,1,'U');
       CALL FILENAME(OUDCB,OUOPEN);
       CALL M$OPEN(OUOPEN);
       IF NEWEOF THEN GOTO OLDFIN;
       IF NOT OLDEOF THEN
RD1:
           CALL READOLD;
       CALL READNEW;
LOOP1:
       DELFLG=%F;
       IF NEWEOF THEN GOTO OLDFIN;
       IF OLDEOF THEN GOTO NEWFIN;
       IF NEWKEY>OLDKEY THEN DO;
               CALL DELREC;
               GOTO LOOP1;
              END;
       IF NEWKEY<OLDKEY THEN DO;
ADDREC:
               CALL ADREC;
               GOTO LOOP1;
              END;
       CALL COMPDATA ALTRET(ADDREC);
       GOTO RD1;
/**/
NEWFIN:
       CALL ADREC;
       IF NOT NEWEOF THEN GOTO NEWFIN;
       GOTO XIT;
/**/
OLDFIN:
       IF OLDEOF THEN GOTO XIT;
       NEWKEY=BITBIN('003777777777'O);
       CALL DELREC;
       GOTO OLDFIN;
/**/
XIT:
       FPT_WRITE.BUF_=VECTOR(ENDCARD);
       FPT_WRITE.KEY_=VECTOR(ENDKEY);
       CALL M$WRITE(FPT_WRITE);
       CALL M$CLOSE(FPT_CLOSE);
       FPT_CLOSE.V.DCB#=DCBNUM(M$UI);
       CALL M$CLOSE(FPT_CLOSE);
       FPT_CLOSE.V.DCB#=DCBNUM(M$OU);
       CALL M$CLOSE(FPT_CLOSE);
       CALL M$WRITE(FPT_WRITEDO);
       IF DONOTME THEN CALL M$WRITE(FPT_WRITEME);
       RETURN;
%EJECT;
/*
/* DELREC - Delete record from old file
*/
DELREC: PROC;
       SAVLN=LINENO;
       IF OLDKEY>OUTKEY THEN SAVKEY=OLDKEY;
         ELSE SAVKEY=OUTKEY+1;
       OUTKEY=SAVKEY;
DEL00:
       DELFLG=%T;
DEL05:
       CALL READOLD ALTRET(DEL40);
       IF OLDKEY<NEWKEY THEN GOTO DEL05;
       IF OLDKEY>NEWKEY THEN GOTO ADREC2;
       CALL COMPDATA ALTRET(ADREC1);
DEL20:
       OBX=1;
       CALL CONVERT(SAVLN);
       CALL INSERT(OUTBUF,OBX,1,',');
       OBX=OBX+1;
DEL30:
       CALL CONVERT(LINENO-1);
       FPT_WRITE.BUF_=VECTOR(SUBSTR(OUTBUF,0,OBX));
       FPT_WRITE.KEY_=VECTOR(SAVKEY);
       CALL M$WRITE(FPT_WRITE);
       RETURN;
/**/
DEL40:
       IF NEWKEY=BITBIN('003777777777'O) THEN GOTO DEL20;
         ELSE GOTO ADREC2;
%EJECT;
/*
/* Add record to old file
*/
ADREC: ENTRY;
       SAVLN=LINENO;
       IF PREVKEY>OUTKEY THEN SAVKEY=PREVKEY;
         ELSE SAVKEY=OUTKEY+1;
       OUTKEY=SAVKEY;
       IF DELFLG THEN DO;
ADREC1:
               CALL READOLD;
              END;
ADREC2:
       OUTKEY=OUTKEY+1;
       IF NEWKEY>OUTKEY THEN OUTKEY=NEWKEY;
       IF NEWSZ=0 THEN FPT_WRITE.BUF_=VECTOR(NIL);
         ELSE FPT_WRITE.BUF_=VECTOR(SUBSTR(NEWBUF,0,NEWSZ));
       FPT_WRITE.KEY_=VECTOR(OUTKEY);
       CALL M$WRITE(FPT_WRITE);
       CALL READNEW ALTRET(ADREC3);
       IF OLDEOF OR NEWKEY<OLDKEY THEN GOTO ADREC2;
       IF NEWKEY>OLDKEY THEN GOTO DEL00;
       CALL COMPDATA ALTRET(ADREC1);
ADREC3:
       IF DELFLG THEN GOTO DEL20;
       OBX=1;
       GOTO DEL30;
END DELREC;
%EJECT;
/*
/* COMPDATA - Compare data
*/
COMPDATA: PROC ALTRET;
       OLDSZ=SIDCB.ARS#;
       IF SUBSTR(OLDBUF,0,OLDSZ)=SUBSTR(NEWBUF,0,NEWSZ) THEN RETURN;
       DELFLG=%T;
       ALTRETURN;
END COMPDATA;
%EJECT;
/*
/* CONVERT BINARY TO DECIMAL
*/
CONVERT: PROC (V);
DCL 1 V SBIN;
/**/
DCL I SBIN;
DCL NONZERO(0:511) UBIN(9) CONSTANT UNAL INIT(1*48,0,1*463);
DCL T SBIN;
DCL TS CHAR(8);
/**/
       CALL BINCHAR(TS,V);
       CALL SEARCH(I,T,NONZERO,TS) ALTRET(ZERO);
       DO WHILE (%F);
ZERO:
           I=7;
          END;
       CALL INSERT(OUTBUF,OBX,8,SUBSTR(TS,I,8-I));
       OBX=OBX+8-I;
       RETURN;
END CONVERT;
%EJECT;
/*
/* REPLACE : WITH SI FILE NAME
*/
FILENAME: PROC (FDCB,FOPEN);
%F$DCB(DCBN=FDCB,BASED="");
%FPT_OPEN(FPTN=FOPEN,STCLASS="");
/**/
       IF SUBSTR(FDCB.NAME#.C,0,FDCB.NAME#.L)=':' THEN DO;
               FOPEN.NAME_=VECTOR(VLP_NAME);
               IF SUBSTR(SIDCB.NAME#.C,0,1)='*' THEN DO;
                       VLP_NAME.L#=SIDCB.NAME#.L-1;
                       VLP_NAME.NAME#=SUBSTR(SIDCB.NAME#.C,1);
                      END;
                 ELSE
                   VLP_NAME=SIDCB.NAME#;
              END/* IF SUBSTR(FDCB.NAME#.C */;
         ELSE IF SUBSTR(FDCB.NAME#.C,0,FDCB.NAME#.L)='*:' THEN DO;
                   FOPEN.NAME_=VECTOR(VLP_NAME);
                   IF SUBSTR(SIDCB.NAME#.C,0,1)='*' THEN
                       VLP_NAME=SIDCB.NAME#;
                     ELSE DO;
                           VLP_NAME.L#=1+SIDCB.NAME#.L;
                           CALL INSERT(VLP_NAME.NAME#,0,,'*',SIDCB.NAME#.C);
                          END;
                  END/* ELSE IF SUBSTR(FDCB.NAME#.C */;
       RETURN;
END FILENAME;
%EJECT;
/*
/* READ RECORD FROM NEW FILE
*/
READNEW: PROC ALTRET;
       PREVKEY=NEWKEY;
       CALL M$READ(UIREAD) ALTRET(NEWABN);
       IF UIDCB.ORG#~=%KEYED# THEN NEWKEY=NEWKEY+1000;
       NEWSZ=UIDCB.ARS#;
       RETURN;
/**/
NEWABN:
       NEWEOF=%T;
       ALTRETURN;
END READNEW;
%EJECT;
/*
/* READ RECORD FROM OLD FILE
*/
READOLD: PROC ALTRET;
       LINENO=LINENO+1;
       CALL M$READ(SIREAD) ALTRET(OLDABN);
       IF SIDCB.ORG#~=%KEYED# THEN OLDKEY=OLDKEY+1000;
       RETURN;
/**/
OLDABN:
       OLDEOF=%T;
       ALTRETURN;
END READOLD;
%EJECT;
/*
/* PRINT MONITOR ERROR MESSAGES
*/
ERR:   PROC;
       FPT_ERRMSG.V.DCB# = B$TCB$ -> B$TCB.ALT$ -> B$ALT.DCB#;
       VLP_ERRCODE = B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR;
       VLP_ERRCODE.SEV = 0;
       CALL M$ERRMSG(FPT_ERRMSG);
       RETURN;
END ERR;
END COMP;
