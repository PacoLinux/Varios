/*M* LEECH - Chase indexes in [alternate keyed] INDEXED files */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* DDA */
 
LEECH: PROC MAIN;
 
%INCLUDE B_ERRORS_C;
%INCLUDE B$JIT;
/* CLUDE LEECH_C61; */
%INCLUDE CP_6;
  %B$ALT;
  %B$TCB;
  %F$DCB;
%INCLUDE CP_6_SUBS;
%INCLUDE FM$FIT;
  %CODE03;
  %FITALTKEYS(BASED="BASED(ALTKEY$)");
  %FITALTKEYS(BASED=STATIC,FITALTKEYS=ALTKEYS);
%INCLUDE XU_FORMAT_C;
%INCLUDE XU_MACRO_C;
%INCLUDE XU_PERR_C;
%INCLUDE XUH_MACRO_C;
  %XUH_PARAM;
%EJECT;
%LIST;
%INCLUDE LEECH_C61;
%PLIST;
%EJECT;
/**/
/* EQUs used to access the PCB */
/**/
 
%EQU BLK1_NSUBLKS = %CHARTEXT('BLK1$->P_OUT.NSUBLKS');
%EQU BLK1_SUBLK$  = %CHARTEXT('BLK1$->P_OUT.SUBLK$');
 
%EQU BLK2_NSUBLKS = %CHARTEXT('BLK2$->P_OUT.NSUBLKS');
%EQU BLK2_SUBLK$  = %CHARTEXT('BLK2$->P_OUT.SUBLK$');
%EQU BLK2_CODE    = %CHARTEXT('BLK2$->P_SYM.CODE');
%EQU BLK2_COUNT   = %CHARTEXT('BLK2$->P_SYM.COUNT');
%EQU BLK2_TEXT    = %CHARTEXT('SUBSTR(BLK2$->P_SYM.TEXT,0,BLK2$->P_SYM.COUNT)');
 
%EQU BLK3_NSUBLKS = %CHARTEXT('BLK3$->P_OUT.NSUBLKS');
%EQU BLK3_SUBLK$  = %CHARTEXT('BLK3$->P_OUT.SUBLK$');
%EQU BLK3_CODE    = %CHARTEXT('BLK3$->P_SYM.CODE');
%EQU BLK3_CPOS    = %CHARTEXT('BLK3$->P_SYM.CPOS');
%EQU BLK3_COUNT   = %CHARTEXT('BLK3$->P_SYM.COUNT');
%EQU BLK3_TEXT    = %CHARTEXT('SUBSTR(BLK3$->P_SYM.TEXT,0,BLK3$->P_SYM.COUNT)');
 
%EQU BLK4_NSUBLKS = %CHARTEXT('BLK4$->P_OUT.NSUBLKS');
%EQU BLK4_SUBLK$  = %CHARTEXT('BLK4$->P_OUT.SUBLK$');
%EQU BLK4_CODE    = %CHARTEXT('BLK4$->P_SYM.CODE');
%EQU BLK4_COUNT   = %CHARTEXT('BLK4$->P_SYM.COUNT');
%EQU BLK4_TEXT    = %CHARTEXT('SUBSTR(BLK4$->P_SYM.TEXT,0,BLK4$->P_SYM.COUNT)');
 
%EQU MONERR       = %CHARTEXT('B$TCB$->B$TCB.ALT$->B$ALT.ERR');
%EQU ERRDCB       = %CHARTEXT('B$TCB$->B$TCB.ALT$->B$ALT.DCB#');
 
%EJECT;
/**/
/* Miscellaneous FPTs */
/**/
 
%FPT_INT     (FPTN                     = BREAK_CNTRL,
              UENTRY=LEECH$BREAK );
 
%FPT_TIME    (FPTN                     = CALC_ELAPSE,
              DATE=YYMMDD,
              DAY=YYMMM,
              DEST=ANS,
              SOURCE=UTS,
              TIME=HHMMSSSS,
              TSTAMP=ELAPSE_UTS );
 
%FPT_PFIL    (FPTN                     = DEFAULT_PFIL,
              BOF=YES,
              DCB=F$IN );
 
%FPT_PRECORD (FPTN                     = DEFAULT_PRECORD,
              DCB=F$IN,
              KEY=KEY_BUF,
              KEYR=YES );
 
%FPT_READ    (FPTN                     = DEFAULT_READ,
              DCB=F$IN,
              KEY=KEY_BUF,
              KEYR=YES );
%VLP_ERRCODE (FPTN                     = ERRCODE );
 
%FPT_KEYIN   (FPTN                     = FPT_KEYIN,
              OCTYPE=ADMIN,
              WSN='LOCAL' );
 
%FPT_PFIL    (FPTN                     = FPT_PFIL );
 
%FPT_PRECORD (FPTN                     = FPT_PRECORD );
 
%FPT_READ    (FPTN                     = FPT_READ );
 
%FPT_GDS     (FPTN                     = GDS,
              RESULTS=GDS_ );
 
%VLP_VECTOR  (FPTN                     = GDS_ );
 
%FPT_TIME    (FPTN                     = GET_TIME,
              DEST=UTS,
              SOURCE=CLOCK,
              TSTAMP=UTS_NOW );
 
%FPT_OPEN    (FPTN                     = OPEN_IN,
              ASN=FILE,
              DCB=F$IN,
              FPARAM=FPARAM );
 
%FPT_READ    (FPTN                     = READ_IN,
              DCB=F$IN );
 
%FPT_EXIT    (FPTN                     = SET_STEPCC,
              STEPCC=OK );
 
%FPT_UNFID   (FPTN                     = UNFID_IN,
              DCB=F$IN,
              TEXTFID=IN_FID );
 
%EJECT;
/**/
/* XUR$GETCMD, X$PARSE & XUF$FORMAT stuff */
/**/
 
%XUR_INIT    (NAME                     = XUR_INIT,
              PCB=P_PCB,
              STCLASS=STATIC );
 
%P$PCB       (NAME                     = P_PCB,
              STCLASS=STATIC );
 
%PARSE$OUT   (NAME                     = P_OUT,
              STCLASS=BASED );
 
%PARSE$SYM   (NAME                     = P_SYM,
              STCLASS=BASED );
 
%F_FDS       (NAME                     = F_FDS,
              BUF=ME_BUF,
              DCB=M$LO,
              STCLASS=STATIC );
%EJECT;
/**/
/* BASED items, listed alphabetically */
/**/
 
DCL IN_REC                   CHAR(IN_ARS)     BASED(GDS_.PTR$);
%EJECT;
/**/
/* BIT items, listed alphabetically */
/**/
 
DCL CCBUF_CMD                BIT(1);
DCL CHECKING_DUPES           BIT(1);
DCL DONE                     BIT(1);
DCL DONE_PARSING             BIT(1);
DCL EOF                      BIT(1);
DCL INFORM_ON_OC             BIT(1);
DCL NO_HEADINGS_YET          BIT(1);
DCL OPTION(0:35)             BIT(1);
%EJECT;
/**/
/* CHARacter items, listed alphabetically */
/**/
 
DCL BOGUS_KEYX(0:127)        CHAR(2)   STATIC INIT(BITASC('777000'O));
DCL   BOGUS_KEY REDEF BOGUS_KEYX CHAR(256);
DCL CMD                      CHAR(80)  STATIC;
DCL HHMMSSSS                 CHAR(8)   STATIC;
DCL IN_FID                   CHAR(80)  STATIC INIT('fid');
DCL KEY_BUF                  CHAR(256) STATIC;
DCL LO_BUF                   CHAR(132) STATIC;
DCL ME_BUF                   CHAR(132) STATIC;
DCL NO_LIT                   CHAR(0)   STATIC INIT(' No');
DCL PREV_KEY                 CHAR(256);
DCL PREV_REC                 CHAR(1024);
DCL PROMPT                   CHAR(0)   STATIC INIT('LEECH> ');
DCL YES_LIT                  CHAR(0)   STATIC INIT('Yes');
DCL YYMMDD                   CHAR(6)   STATIC INIT('yymmdd');
DCL YYMMM                    CHAR(5)   STATIC INIT('yymmm');
%EJECT;
/**/
/* DCBs */
/**/
 
DCL F$IN                     DCB;             /* File to be LEECHd            */
DCL M$LO                     DCB;             /* LEECHs primary output        */
DCL M$ME                     DCB;
DCL M$SI                     DCB;             /* LEECH command(s)             */
%EJECT;
/**/
/* ENTRYs, listed alphabetically */
/**/
 
DCL LEECH$BREAK              ENTRY     ASYNC;
DCL X$WRITE                  ENTRY(22);
DCL XSF$LOCCODT              ENTRY(2)  ALTRET;
%INCLUDE XUR_ENTRY;
%EJECT;
/**/
/* X$WRITE formats */
/**/
 
DCL FMT                      CHAR(0)   STATIC INIT('%>A');
DCL FMT1                     CHAR(0)   STATIC INIT('LEECH A00 Here (04/03/84)');
DCL FMT2                     CHAR(0)   STATIC INIT(
    '%>A has %D granules, %D records and NO alternate keys.');
DCL FMT3                     CHAR(0)   STATIC INIT(
    '%>A has %D granules, %D records and %D alternate keys.');
DCL FMT4                     CHAR(0)   STATIC INIT(
    'Key#  Start  Length  Duplicates');
DCL FMT5                     CHAR(0)   STATIC INIT(
    '%3D%7D%7D       %>A');
DCL FMT6                     CHAR(0)   STATIC INIT(
    '%3D%7D%7D        No    <- Primary key');
DCL FMT7                     CHAR(0)   STATIC INIT(
    '.. Index # too large; %>A only has %D indexes.');
DCL FMT8                     CHAR(0)   STATIC INIT(
    '.. INDX %D has %D keys; %D are unique, %D were duplicates.');
DCL FMT9                     CHAR(0)   STATIC INIT(
    '.. INDX %D has %D keys.');
DCL FMT10                    CHAR(0)   STATIC INIT(
    '.. INDX %D has %D records; %D have unique keys, %D have duplicate keys.');
DCL FMT11                    CHAR(0)   STATIC INIT(
    '.. INDX %D has %D records.');
DCL FMT12                    CHAR(0)   STATIC INIT(
    '.. %D keys searched so far; %D are unique, %D are duplicates.');
DCL FMT13                    CHAR(0)   STATIC INIT(
    '.. %D keys seaached so far.');
DCL FMT14                    CHAR(0)   STATIC INIT(
    '.. %D records searched so far; %D have unique keys, %D have duplicates.');
DCL FMT15                    CHAR(0)   STATIC INIT(
    '.. %D records searched so far.');
DCL FMT16                    CHAR(0)   STATIC INIT(
    '   Elapsed time: %<A.%2A Seconds.');
DCL FMT17                    CHAR(0)   STATIC INIT(
    '   Elapsed time: %<A Minutes, %<A.%2A Seconds.');
DCL FMT18                    CHAR(0)   STATIC INIT(
    '   Elapsed time: %<A Hours, %<A Minutes, %<A.%2A Seconds.');
DCL FMT19                    CHAR(0)   STATIC INIT(
    '>> Internal problem: X$PARSE knows of a CODE %D but LEECH doesn''t. <<');
DCL FMT20                    CHAR(0)   STATIC INIT(
    'F$DCB.BFR.DA(%D)=.%O');
DCL FMT21                    CHAR(0)   STATIC INIT(
    'Previous Primary Key=''%A''');
DCL FMT22                    CHAR(0)   STATIC INIT(
    'Previous Key #%D=''%A''');
DCL FMT23                    CHAR(0)   STATIC INIT(
    '>> INDX %D in %>A is BAD <<' );
%EJECT;
/**/
/* PTRs, listed alphabetically */
/**/
 
DCL ALTKEY$                  PTR;
DCL B$JIT$                   PTR       SYMREF;
DCL B$TCB$                   PTR       SYMREF;
DCL BLK1$                    PTR;
DCL  PERRCODE REDEF BLK1$    BIT(36);
DCL BLK2$                    PTR;
DCL BLK3$                    PTR;
DCL BLK4$                    PTR;
DCL CODE03$                  PTR;
DCL F$IN$                    PTR;
DCL M$LO$                    PTR;
DCL M$ME$                    PTR;
DCL M$SI$                    PTR;
%EJECT;
/**/
/* SBIN/UBIN items, listed alphabetically */
/**/
 
DCL BRK_CNT                  SBIN      STATIC SYMDEF;
DCL LEECH_NODES              SBIN             SYMREF;
DCL CMD#                     SBIN;
DCL CMD_LEN                  SBIN;
DCL CMD_NUM                  SBIN;
DCL DUPES                    SBIN;
DCL ELAPSE_UTS               SBIN      STATIC;
DCL ERRDCB#                  SBIN;
DCL F$IN#                    SBIN      STATIC INIT(DCBNUM(F$IN));
DCL FIRST_KEY                SBIN;
DCL FPARAM(0:1023)           SBIN      STATIC;
DCL GRANS                    SBIN;
DCL I                        SBIN;
DCL IN_ARS                   SBIN;
DCL IN_CNT                   SBIN;
DCL INCR_CNT                 SBIN;
DCL INCREMENT                SBIN;
DCL INDX#                    SBIN;
DCL J                        SBIN;
DCL K                        SBIN;
DCL KEY_LEN                  SBIN;
DCL KEYL                     SBIN;
DCL KEYX                     SBIN;
DCL LAST_KEY                 SBIN;
DCL M$LO#                    SBIN      STATIC INIT(DCBNUM(M$LO));
DCL M$ME#                    SBIN      STATIC INIT(DCBNUM(M$ME));
DCL M$SI#                    SBIN      STATIC INIT(DCBNUM(M$SI));
DCL NUM_CMDS                 SBIN;
DCL NUM_KEYS_TO_LIST         SBIN;
DCL NUMKEYS                  SBIN;
DCL OFFSET                   SBIN;
DCL UNIQUES                  SBIN;
DCL UTS_NOW                  SBIN      STATIC;
%EJECT;
/**/
/* VECTORs */
/**/
 
DCL FMT_                     BIT(72) STATIC DALIGNED INIT(VECTOR(FMT));
DCL FMT1_                    BIT(72) STATIC DALIGNED INIT(VECTOR(FMT1));
DCL FMT2_                    BIT(72) STATIC DALIGNED INIT(VECTOR(FMT2));
DCL FMT3_                    BIT(72) STATIC DALIGNED INIT(VECTOR(FMT3));
DCL FMT4_                    BIT(72) STATIC DALIGNED INIT(VECTOR(FMT4));
DCL FMT5_                    BIT(72) STATIC DALIGNED INIT(VECTOR(FMT5));
DCL FMT6_                    BIT(72) STATIC DALIGNED INIT(VECTOR(FMT6));
DCL FMT7_                    BIT(72) STATIC DALIGNED INIT(VECTOR(FMT7));
DCL FMT8_                    BIT(72) STATIC DALIGNED INIT(VECTOR(FMT8));
DCL FMT9_                    BIT(72) STATIC DALIGNED INIT(VECTOR(FMT9));
DCL FMT10_                   BIT(72) STATIC DALIGNED INIT(VECTOR(FMT10));
DCL FMT11_                   BIT(72) STATIC DALIGNED INIT(VECTOR(FMT11));
DCL FMT12_                   BIT(72) STATIC DALIGNED INIT(VECTOR(FMT12));
DCL FMT13_                   BIT(72) STATIC DALIGNED INIT(VECTOR(FMT13));
DCL FMT14_                   BIT(72) STATIC DALIGNED INIT(VECTOR(FMT14));
DCL FMT15_                   BIT(72) STATIC DALIGNED INIT(VECTOR(FMT15));
DCL FMT16_                   BIT(72) STATIC DALIGNED INIT(VECTOR(FMT16));
DCL FMT17_                   BIT(72) STATIC DALIGNED INIT(VECTOR(FMT17));
DCL FMT18_                   BIT(72) STATIC DALIGNED INIT(VECTOR(FMT18));
DCL FMT19_                   BIT(72) STATIC DALIGNED INIT(VECTOR(FMT19));
DCL FMT20_                   BIT(72) STATIC DALIGNED INIT(VECTOR(FMT20));
DCL FMT21_                   BIT(72) STATIC DALIGNED INIT(VECTOR(FMT21));
DCL FMT22_                   BIT(72) STATIC DALIGNED INIT(VECTOR(FMT22));
DCL FMT23_                   BIT(72) STATIC DALIGNED INIT(VECTOR(FMT23));
 
DCL VEC1_                    BIT(72)        DALIGNED;
DCL VEC2_                    BIT(72)        DALIGNED;
DCL VEC3_                    BIT(72)        DALIGNED;
DCL VEC4_                    BIT(72)        DALIGNED;
DCL VEC5_                    BIT(72)        DALIGNED;
DCL VEC6_                    BIT(72)        DALIGNED;
%EJECT;
START_LEECH:
 
    CALL INITIALIZE          ALTRET( PUT_ERR );
 
    CALL PARSE_CCBUF         ALTRET( PUT_ERR ); /* Check CCBUF for cmd(s)     */
 
    DO WHILE( NOT DONE );
       CALL DO_1_LINE_OF_OPTIONS  ALTRET( DONE_YET );
DONE_YET:
       END;
 
EOJ:
    CALL XUR$CLOSE_DCBS;                      /* CLOSE any OPEN files         */
    GOTO QUIT;
 
PUT_ERR:
    ERRDCB#= %ERRDCB;
    IF NOT DONE THEN
       CALL XUR$ERRMSG( %MONERR,ERRDCB# );
SET_THE_STEPCC:
    SET_STEPCC.V.STEPCC#= 4;
QUIT:
    CALL M$EXIT( SET_STEPCC );                /* Set STEPCC upon exit         */
 
%EJECT;
INITIALIZE: PROC  ALTRET;
 
    F$IN$= DCBADDR(DCBNUM(F$IN));             /* Set up pointers to my DCBs   */
    M$LO$= DCBADDR(DCBNUM(M$LO));
    M$SI$= DCBADDR(DCBNUM(M$SI));
 
    CALL XUR$INIT( XUR_INIT );                /* Init stuff for XUR$? routines*/
 
    CALL M$INT( BREAK_CNTRL )          ALTRET( ALT_RETURN );
 
    BRK_CNT= 0;                               /* Zero BREAK count             */
 
    DONE= '0'B;                               /* Assume we are NOT done yet!  */
    OPTION= '0'B;
 
RE_TURN:
    RETURN;
 
ALT_RETURN:
    ALTRETURN;
 
END INITIALIZE;
%EJECT;
TELL_ABOUT_FILE: PROC  ALTRET;
 
    CALL OPEN_INPUT          ALTRET( ALT_RETURN );
    CODE03$= ADDR(FPARAM);
    CALL XSF$LOCCODT( CODE03$,3 )  ALTRET( ALT_RETURN );
    GRANS= CODE03$->CODE03.UGRANS + CODE03$->CODE03.NGAVAL;
    GDS.V.SEGSIZE#= (CODE03$->CODE03.RCSZ+1) * 1024;
    CALL M$GDS( GDS )        ALTRET( ALT_RETURN );  /* Get F$IN buffer        */
    READ_IN.BUF_= GDS_;
 
    ALTKEY$= ADDR(FPARAM);
    CALL XSF$LOCCODT( ALTKEY$,8 )  WHENALTRETURN DO;
       ALTKEY$= ADDR(ALTKEYS);     /* No ALTKEYs; Fake one so everything that */
       FITALTKEYS.K.KEYX(0)= F$IN$->F$DCB.KEYX#;
       FITALTKEYS.K.KEYL(0)= F$IN$->F$DCB.KEYL#;  /* looks at FITALTKEYs will */
       FITALTKEYS.K.UNIQUE(0)= %YES#;         /* work.                        */
       FITALTKEYS.NUMENTS= 1;
       END;
    NUMKEYS= FITALTKEYS.NUMENTS - 1;          /* Calc # of ALTKEYs            */
NO_ALT_KEYS:
    IF NUMKEYS = 0 THEN
       /* %>A has %D granules, %D records and NO alternate keys. */
       CALL X$WRITE( F_FDS,FMT2_,VECTOR(IN_FID),VECTOR(GRANS),
                           VECTOR(F$IN$->F$DCB.NRECS#) );
    ELSE
       /* %>A has %D granules, %D records and %D alternate keys. */
       CALL X$WRITE( F_FDS,FMT3_,VECTOR(IN_FID),VECTOR(GRANS),
                           VECTOR(F$IN$->F$DCB.NRECS#),VECTOR(NUMKEYS) );
    NUMKEYS= FITALTKEYS.NUMENTS;
RE_TURN:
    RETURN;
 
ALT_RETURN:
    ALTRETURN;
 
END TELL_ABOUT_FILE;
%EJECT;
PARSE_CCBUF: PROC  ALTRET;
 
    CCBUF_CMD= %NO#;
    IF B$JIT.CCDISP < B$JIT.CCARS  AND        /* Anything in CCBUF?           */
       SUBSTR(B$JIT.CCBUF,B$JIT.CCDISP) ~= '('  AND
       SUBSTR(B$JIT.CCBUF,B$JIT.CCDISP) ~= '()' THEN DO;
       OFFSET= LENGTHC('!') + B$JIT.CCDISP;
       CMD= SUBSTR(B$JIT.CCBUF,B$JIT.CCDISP+1);
       CMD_LEN= B$JIT.CCARS - B$JIT.CCDISP - 1;
       CCBUF_CMD= %YES#;
       CMD_NUM= 999;                        /* Force GET_A_CMD to look at CMD */
       NUM_CMDS= -1;
       CALL GET_A_CMD( SUBSTR(B$JIT.CCBUF,B$JIT.CCDISP+1),/* Parse CCBUF cmds */
                       B$JIT.CCARS-B$JIT.CCDISP-1 ) ALTRET( OOPS );
 
       /* LEECH A00 Here (mm/dd/yy)                                           */
       CALL X$WRITE( F_FDS,FMT1_ );           /* LEECH A00 here (mm/dd/yy)    */
       CALL TELL_ABOUT_FILE  ALTRET( OOPS );
       CMD_NUM= -1;
       CALL DO_1_LINE_OF_OPTIONS( CMD,CMD_LEN );
       END;
    ELSE DO;
       CMD_NUM= 0;
       NUM_CMDS= 0;
       /* LEECH A00 Here (mm/dd/yy)                                           */
       CALL X$WRITE( F_FDS,FMT1_ );
       CALL TELL_ABOUT_FILE  ALTRET( OOPS );
       END;
    OFFSET= 0;                           /* Set OFFSET for PUT_ERROR's finger */
    GOTO RE_TURN;
 
OOPS:
    CALL PUT_ERROR;                           /* Go give user the finger!     */
    IF CCBUF_CMD THEN
       DONE= %YES#;                           /* Quit now if cmd was in CCBUF */
RE_TURN:
    RETURN;
 
END PARSE_CCBUF;
%EJECT;
DO_1_LINE_OF_OPTIONS: PROC( BUF,BUF_LEN )  ALTRET;
DCL BUF                      CHAR(BUF_LEN);
DCL BUF_LEN                  SBIN;
 
    DONE_PARSING= %NO#;
    DO WHILE( NOT DONE_PARSING );
       CALL GET_A_CMD( BUF,BUF_LEN )   ALTRET( END_OF_RECORD );
       IF NOT DONE_PARSING THEN
          CALL DO_A_CMD;
       END;
 
END_OF_RECORD:
    IF NOT DONE_PARSING THEN
       IF ERRCODE.ERR# = %E$EOF THEN
          DONE= %YES#;
       ELSE
          CALL PUT_ERROR;
    IF CCBUF_CMD THEN
       DONE= %YES#;
ALT_RETURN:
    ALTRETURN;
 
END DO_1_LINE_OF_OPTIONS;
%EJECT;
GET_A_CMD: PROC( CMD,CMD_LEN )  ALTRET;
DCL CMD                      CHAR(CMD_LEN);
DCL CMD_LEN                  UBIN;
 
    CMD_NUM= CMD_NUM + 1;                     /* Point to next command        */
    IF CMD_NUM >= NUM_CMDS THEN               /* Anything left?               */
       IF CMD_NUM >= 999 OR ADDR(CMD) = ADDR(NIL)  THEN DO;/* Nope. Get more. */
          CMD_NUM= 0;                         /* Set number of commands to 0  */
          IF ADDR(CMD) = ADDR(NIL) THEN       /* Get commands from user?      */
             CALL XUR$GETCMD( LEECH_NODES,BLK1$,VECTOR(PROMPT) ) ALTRET( OOPS);
          ELSE                                /* Else: parse what was passed  */
             CALL XUR$GETCMD( LEECH_NODES,BLK1$, ,CMD,CMD_LEN )  ALTRET( OOPS );
          CALL XUR$ECHOIF( M$LO# );
          NUM_CMDS= %BLK1_NSUBLKS;            /* Remember number of commands  */
          END;
       ELSE DO;
          DONE_PARSING= %YES#;                /* Indicate we are done parsing */
          GOTO RE_TURN;
          END;
    BLK2$= %BLK1_SUBLK$(CMD_NUM);             /* Set up some PTRs to the PCB  */
    IF %BLK2_NSUBLKS > 0 THEN
       BLK3$= %BLK2_SUBLK$(0);
    CMD#= %BLK2_CODE;                         /* Remember the command we're on*/
RE_TURN:
    RETURN;
 
OOPS:                                         /* The label says it all!       */
    NUM_CMDS= 0;
    ERRCODE= PERRCODE;                        /* Load the error code returned */
ALT_RETURN:
    ALTRETURN;                                /* by XUR$GETCMD, then ALTRETURN*/
 
END GET_A_CMD;
%EJECT;
DO_A_CMD: PROC  ALTRET;
 
    OPTION= '0'B;
    OPTION(CMD#)= %YES#;               /* Remember they specified this option */
    DO CASE( CMD# );
       CASE( %ALL_HELP## );
          CALL XUR$ALLMSG( XUH_PARAM )  ALTRET( HELP_ERR );
 
       CASE( %END## );
          DONE= %YES#;
          DONE_PARSING= %YES#;
 
       CASE( %HELP## );
          XUH_PARAM.HELP$= BLK3$->P_SYM.TEXTC$;
          CALL XUR$HELP( XUH_PARAM )   ALTRET( HELP_ERR );
          DO WHILE('0'B);
HELP_ERR:
             IF XUH_PARAM.ERR.ERR# ~= %E$NOHPROC  AND
                XUH_PARAM.ERR.ERR# ~= %E$BDTOPIC THEN
                CALL XUR$ERRMSG( XUH_PARAM.ERR );
             END;
 
       CASE( %LIST## );
          CALL LIST_KEYS;
 
       CASE( %MORE_HELP## );
GET_MORE_HELP:
          CALL XUR$MOREMSG( XUH_PARAM )       ALTRET( HELP_ERR );
 
       CASE( %NULL## );
          IF M$SI$->F$DCB.EOMVAL#.VALUE# = BITBIN('012'O) THEN DO;
             CMD#= %MORE_HELP##;              /* Pretend they entered '?'     */
             GOTO GET_MORE_HELP;
             END;
 
       CASE( %TALLY## );
          CALL PARSE_TALLY_CMD         ALTRET( RE_TURN );
          CALL EXEC_TALLY_CMD;
 
       END;
 
RE_TURN:
    RETURN;
 
END DO_A_CMD;
%EJECT;
PUT_ERROR: PROC( FINGER_POS );
DCL FINGER_POS               SBIN;
 
    IF ERRCODE.ERR# = %E$SYNERR THEN DO;
       IF ADDR(FINGER_POS) = ADDR(NIL) THEN
          CALL XUR$ECHOIF( M$LO# );
       CALL XUR$ERRPTR( OFFSET+P_PCB.HI_CHAR,M$LO# );
       CALL PUT( '.. Syntax error; parsing stopped where indicated\' );
       END;
    ELSE
       CALL XUR$ERRMSG( ERRCODE,ERRDCB# );
RE_TURN:
    RETURN;
 
END PUT_ERROR;
%EJECT;
OPEN_INPUT: PROC  ALTRET;
 
    IF NOT F$IN$->F$DCB.AMR# THEN DO;
       CALL PUT( '.. Please specify a input fid (DCB1,F$IN).\' );
       CALL PUT( '   Invocation syntax:\' );
       CALL PUT( '  !LEECH.X indexed-file [(options[)]]\' );
       DONE= %YES#;
       GOTO ALT_RETURN;
       END;
 
    CALL M$OPEN( OPEN_IN )             ALTRET( ALT_RETURN );
 
    IF F$IN$->F$DCB.ORG# ~= %INDEXED# THEN DO;
       CALL PUT( '.. Sorry.  I only look at INDEXED files.\' );
       DONE= %YES#;
       GOTO ALT_RETURN;
       END;
 
    CALL M$UNFID( UNFID_IN )           ALTRET( ALT_RETURN );
 
RE_TURN:
    RETURN;
 
ALT_RETURN:
    ALTRETURN;
 
END OPEN_INPUT;
%EJECT;
PUT: PROC( BUF );
DCL BUF                      CHAR(132);
 
    CALL INDEX( K,'\',BUF )  WHENALTRETURN DO;
       K= LENGTHC(' ');
       END;
 
    /* %>A */
    CALL X$WRITE( F_FDS,FMT_,VECTOR(SUBSTR(BUF,0,K)) );
RE_TURN:
    RETURN;
 
END PUT;
%EJECT;
LIST_KEYS: PROC;
 
    IF %BLK2_NSUBLKS > 0  AND  %BLK3_CODE = %INDX## THEN
       CALL CHARBIN( K,%BLK3_TEXT );
    IF %BLK2_NSUBLKS>0 AND (%BLK3_CODE = %ALL##  OR  K = 0) THEN
       NUM_KEYS_TO_LIST= 0;
    ELSE
       NUM_KEYS_TO_LIST= %BLK2_NSUBLKS;
 
    NO_HEADINGS_YET= %YES#;
    VEC1_= VECTOR(I);
    DO I=1 TO FITALTKEYS.NUMENTS;
       IF NUM_KEYS_TO_LIST > 0 THEN DO;
          DO J=0 TO %BLK2_NSUBLKS-1;
             BLK3$= %BLK2_SUBLK$(J);
             CALL CHARBIN( K,%BLK3_TEXT );
             IF K > FITALTKEYS.NUMENTS THEN DO;
                LO_BUF= ' ';
                SUBSTR(LO_BUF,LENGTHC(PROMPT)+%BLK3_CPOS,2)= '^\';
                CALL PUT( LO_BUF );
                K= FITALTKEYS.NUMENTS;
                /* .. Index # too large; %>A only has %D indexes.             */
                CALL X$WRITE( F_FDS,FMT7_,VECTOR(IN_FID),VECTOR(K) );
                GOTO RE_TURN;
                END;
             IF I = K THEN
                GOTO LIST_IT;
             END;
          GOTO NEXT_KEY;
          END;
LIST_IT:
       IF NO_HEADINGS_YET THEN DO;
          /* Key#  Start  Length  Duplicates */
          CALL X$WRITE( F_FDS,FMT4_ );
          NO_HEADINGS_YET= %NO#;
          END;
       VEC2_= VECTOR(FITALTKEYS.K.KEYX(I-1));
       VEC3_= VECTOR(FITALTKEYS.K.KEYL(I-1));
       IF FITALTKEYS.K.UNIQUE(I-1) THEN
          VEC4_= VECTOR(NO_LIT);
       ELSE
          VEC4_= VECTOR(YES_LIT);
       IF I = 1 THEN DO;
          /* %3D%7D%7D        No    <- Primary key */
          CALL X$WRITE( F_FDS,FMT6_,VEC1_,VEC2_,VEC3_ );
          END;
       ELSE DO;
          /* %3D%7D%7D       %>A */
          CALL X$WRITE( F_FDS,FMT5_,VEC1_,VEC2_,VEC3_,VEC4_ );
          END;
NEXT_KEY:
       END;
RE_TURN:
    RETURN;
 
END LIST_KEYS;
%EJECT;
PARSE_TALLY_CMD: PROC  ALTRET;
 
    INCREMENT= 500;
    INFORM_ON_OC= %NO#;                       /* Assume NOT to INFORM on OC   */
    FIRST_KEY= 1;
    LAST_KEY= FITALTKEYS.NUMENTS;
    DO I=0 TO %BLK2_NSUBLKS-1;
       BLK3$= %BLK2_SUBLK$(I);
       OPTION(%BLK3_CODE)= %YES#;
       DO CASE( %BLK3_CODE );
          CASE( %ALL## );
 
          CASE( %INDX## );
             CALL CHARBIN( FIRST_KEY,%BLK3_TEXT );
             IF FIRST_KEY < 1 THEN
                FIRST_KEY= 1;
             IF FIRST_KEY > FITALTKEYS.NUMENTS THEN DO;
                K= FITALTKEYS.NUMENTS;
                /* .. Index # too large; %>A only has %D indexes.             */
                CALL X$WRITE( F_FDS,FMT7_,VECTOR(IN_FID),VECTOR(K) );
                GOTO ALT_RETURN;
                END;
             LAST_KEY= FIRST_KEY;
          CASE( %INFORM## );
             IF %BLK3_NSUBLKS > 0 THEN        /* Was On OC specified?         */
                INFORM_ON_OC= %YES#;
 
          CASE( %INCREMENT## );
 
          CASE( %KEYS## );
 
          CASE( %NRECS## );
             CALL CHARBIN( INCREMENT,%BLK3_TEXT );
             IF INCREMENT <= 0 THEN
                INCREMENT= 1;
          CASE( %COUNT## );
 
          CASE( ELSE );
             K= %BLK3_CODE;
             /*>> Internal problem; X$PARSE knows of CODE %D but LEECH doesn't*/
             CALL X$WRITE( F_FDS,FMT19_,VECTOR(K) );
             GOTO ALT_RETURN;
          END; /* end DO CASE(%BLK3_CODE) */
       END;
 
RE_TURN:
    RETURN;
 
ALT_RETURN:
    ALTRETURN;
 
END PARSE_TALLY_CMD;
%EJECT;
SETUP_FPTS: PROC;
 
    IF OPTION(%KEYS##) THEN DO;
       FPT_PRECORD= DEFAULT_PRECORD;
       FPT_PRECORD.V_= VECTOR(FPT_PRECORD.V);
       FPT_PRECORD.V.INDX#= INDX#;
       IF OPTION(%COUNT##) AND NOT FITALTKEYS.K.UNIQUE(INDX#-1) THEN DO;
          FPT_PRECORD.V.N#= 1;
          CHECKING_DUPES= %YES#;
          END;
       ELSE DO;
          FPT_PRECORD.V.N#= INCREMENT;
          CHECKING_DUPES= %NO#;
          END;
       END;
    ELSE DO;
       FPT_READ= DEFAULT_READ;
       FPT_READ.V_= VECTOR(FPT_READ.V);
       FPT_READ.BUF_= GDS_;
       FPT_READ.V.INDX#= INDX#;
       END;
 
    FPT_PFIL= DEFAULT_PFIL;
    FPT_PFIL.V_= VECTOR(FPT_PFIL.V);
    FPT_PFIL.V.INDX#= INDX#;
    KEY_LEN= FITALTKEYS.K.KEYL(INDX#-1);
RE_TURN:
    RETURN;
 
END SETUP_FPTS;
%EJECT;
EXEC_TALLY_CMD: PROC  ALTRET;
 
    DO INDX#=FIRST_KEY TO LAST_KEY;
 
       CALL SETUP_FPTS;
       EOF= %NO#;
       DUPES= 0;
       IN_CNT= 0;
       INCR_CNT= 0;
       UNIQUES= 0;
       PREV_KEY= BOGUS_KEY;
       PREV_REC= BOGUS_KEY;
       CALL M$TIME( GET_TIME )         ALTRET( ARE_WE_DONE );
       ELAPSE_UTS= UTS_NOW;
       CALL M$PFIL( FPT_PFIL )         ALTRET( ARE_WE_DONE );
       DO WHILE( NOT EOF );
          IF OPTION(%KEYS##) THEN DO;
             CALL M$PRECORD( FPT_PRECORD )  WHENALTRETURN DO;
                EOF= %YES#;
                END;
             IN_CNT= IN_CNT + F$IN$->F$DCB.ARS#;
             INCR_CNT= INCR_CNT + F$IN$->F$DCB.ARS#;
             IF SUBSTR(KEY_BUF,0,KEY_LEN) = SUBSTR(PREV_KEY,0,KEY_LEN) THEN
                DUPES= DUPES + F$IN$->F$DCB.ARS#;
             ELSE
                UNIQUES= UNIQUES + F$IN$->F$DCB.ARS#;
             END;
          ELSE DO;
             CALL M$READ( FPT_READ )   ALTRET( ARE_WE_DONE );
             IN_CNT= IN_CNT + 1;
             INCR_CNT= INCR_CNT + 1;
             IF SUBSTR(KEY_BUF,0,KEY_LEN) = SUBSTR(PREV_KEY,0,KEY_LEN) THEN
                DUPES= DUPES + 1;
             ELSE
                UNIQUES= UNIQUES + 1;
             END;
 
          IF INCR_CNT >= INCREMENT THEN DO;
             IF OPTION(%INFORM##) THEN DO;
                CALL PUT_STATS;
                END;
             INCR_CNT= 0;
             END;
 
          IF BRK_CNT > 0 THEN DO;
             F_FDS.DCB#= M$ME#;
             CALL PUT_STATS;
             F_FDS.DCB#= M$LO#;
             END;
 
          PREV_KEY= KEY_BUF;
          IF F$IN$->F$DCB.ARS# > 0 THEN
             IN_ARS= F$IN$->F$DCB.ARS#;
          PREV_REC= IN_REC;
 
          END;
 
ARE_WE_DONE:
       ERRCODE= %MONERR;
       EOF= %YES#;
       CALL PUT_STATS;
       IF ERRCODE.ERR# = %E$EOF THEN
          CALL FIGURE_ELAPSED;
       ELSE
          IF ERRCODE.ERR# = %E$NOALTKEY THEN DO;
             ERRDCB#= %ERRDCB;
             CALL XUR$ERRMSG( ERRCODE,ERRDCB# );
             END;
          ELSE DO;
             /* >> INDX %D in %>A is BAD << */
             CALL X$WRITE( F_FDS,FMT23_,VECTOR(INDX#),VECTOR(IN_FID) );
             IF INFORM_ON_OC THEN DO;
                FPT_KEYIN.MESS_= VECTOR(SUBSTR(ME_BUF,1,F_FDS.BUFX-1));
                CALL M$KEYIN( FPT_KEYIN );
                END;
             ERRDCB#= %ERRDCB;
             CALL XUR$ERRMSG( ERRCODE,ERRDCB# );
             IF IN_CNT > 0 THEN
                CALL FIGURE_ELAPSED;
             CALL DUMP_STUFF;
             SET_STEPCC.V.STEPCC#= 4;
             END;
       END;
 
RE_TURN:
    RETURN;
 
END EXEC_TALLY_CMD;
%EJECT;
PUT_STATS: PROC;
 
    VEC1_= VECTOR(INDX#);
    VEC2_= VECTOR(IN_CNT);
    VEC3_= VECTOR(UNIQUES);
    VEC4_= VECTOR(DUPES);
    IF EOF THEN
       IF OPTION(%KEYS##) THEN
          IF OPTION(%COUNT##) AND NOT FITALTKEYS.K.UNIQUE(INDX#-1) THEN
             /* .. INDX %D has %D keys; %D are unique, %D were duplicates.    */
             CALL X$WRITE( F_FDS,FMT8_,VEC1_,VEC2_,VEC3_,VEC4_ );
          ELSE
             /* .. INDX %D has %D keys.                                       */
             CALL X$WRITE( F_FDS,FMT9_,VEC1_,VEC2_ );
       ELSE
          IF OPTION(%COUNT##) AND NOT FITALTKEYS.K.UNIQUE(INDX#-1) THEN
             /* .. INDX %D has %D records; %D have unique keys, %D have duplic*/
             CALL X$WRITE( F_FDS,FMT10_,VEC1_,VEC2_,VEC3_,VEC4_ );
          ELSE
             /* .. INDX %D has %D records.                                    */
             CALL X$WRITE( F_FDS,FMT11_,VEC1_,VEC2_ );
    ELSE
       IF OPTION(%KEYS##) THEN
          IF OPTION(%COUNT##) AND NOT FITALTKEYS.K.UNIQUE(INDX#-1) THEN
             /* .. %D keys searched so far; %D are unique, %D are duplicates. */
             CALL X$WRITE( F_FDS,FMT12_,VEC2_,VEC3_,VEC4_ );
          ELSE
             /* .. %D keys searched so far.                                   */
             CALL X$WRITE( F_FDS,FMT13_,VEC2_ );
       ELSE
          IF OPTION(%COUNT##) AND NOT FITALTKEYS.K.UNIQUE(INDX#-1) THEN
             /* .. %D records searched so far; %D have unique keys, %D have du*/
             CALL X$WRITE( F_FDS,FMT14_,VEC2_,VEC3_,VEC4_ );
          ELSE
             /* .. %D records searched so far.                                */
             CALL X$WRITE( F_FDS,FMT15_,VEC2_ );
    IF INFORM_ON_OC THEN DO;        /* Should we display on the oper console? */
       FPT_KEYIN.MESS_= VECTOR(SUBSTR(ME_BUF,1,F_FDS.BUFX-1));
       CALL M$KEYIN( FPT_KEYIN );             /* Yep!                         */
       END;
    BRK_CNT= 0;
RE_TURN:
    RETURN;
 
END PUT_STATS;
%EJECT;
FIGURE_ELAPSED: PROC;
 
    CALL M$TIME( GET_TIME );                  /* Get present UTS              */
    ELAPSE_UTS= UTS_NOW - ELAPSE_UTS;
    CALL M$TIME( CALC_ELAPSE );               /* Make elapsed time printable  */
 
    CALL EDITSTR( HHMMSSSS,0,5,'105'O,HHMMSSSS );
    VEC1_= VECTOR(SUBSTR(HHMMSSSS,0,2));
    VEC2_= VECTOR(SUBSTR(HHMMSSSS,2,2));
    VEC3_= VECTOR(SUBSTR(HHMMSSSS,4,2));
    VEC4_= VECTOR(SUBSTR(HHMMSSSS,6,2));
    IF SUBSTR(HHMMSSSS,0,4)='    ' THEN
       /*    Elapsed time: %>A.%2A Seconds. */
       CALL X$WRITE( F_FDS,FMT16_,VEC3_,VEC4_ );
    ELSE
       IF SUBSTR(HHMMSSSS,0,2)='  ' THEN
          /*    Elapsed time: %<A Minutes, %<A.%2A Seconds. */
          CALL X$WRITE( F_FDS,FMT17_,VEC2_,VEC3_,VEC4_ );
       ELSE
          /*    Elapsed time: %<A Hours, %<A Minutes, %<A.%2A Seconds. */
          CALL X$WRITE( F_FDS,FMT18_,VEC1_,VEC2_,VEC3_,VEC4_ );
    IF INDX# ~= LAST_KEY THEN
       CALL PUT( ' \' );
RE_TURN:
    RETURN;
 
END FIGURE_ELAPSED;
%EJECT;
DUMP_STUFF: PROC;
 
    DO K=0 TO 3;
       VEC1_= VECTOR(K);
       VEC2_= VECTOR(DCBADDR(F$IN#)->F$DCB.BFR.DA(K));
       /* F$DCB.BFR.DA(%D)=.%O */
       CALL X$WRITE( F_FDS,FMT20_,VEC1_,VEC2_ );
       END;
 
    IF PREV_REC = BOGUS_KEY THEN
       GOTO RE_TURN;
 
    DO K=1 TO FITALTKEYS.NUMENTS;
       VEC1_= VECTOR(K);
       KEYX= FITALTKEYS.K.KEYX(K-1);
       KEYL= FITALTKEYS.K.KEYL(K-1);
       VEC2_= VECTOR(SUBSTR(PREV_REC,KEYX,KEYL));
       IF K = 1 THEN
          /* Previous Primary Key='%A' */
          CALL X$WRITE( F_FDS,FMT21_,VEC2_ );
       ELSE
          /* Previous Key #%D='%A' */
          CALL X$WRITE( F_FDS,FMT22_,VEC1_,VEC2_ );
       END;
RE_TURN:
    RETURN;
 
END DUMP_STUFF;
 
END LEECH;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
LEECH$BREAK: PROC  ASYNC;
 
%INCLUDE CP_6;
 
%FPT_TRMPRG  (FPTN                     = RESET_BRK_CNT,
              RSTBRK=YES );
 
DCL BRK_CNT                  SBIN      SYMREF;
 
    BRK_CNT= BRK_CNT + 1;                     /* Indicate BREAK was hit       */
    CALL M$TRMPRG( RESET_BRK_CNT );           /* Reset FEPs BREAK count       */
RE_TURN:
    RETURN;
 
END LEECH$BREAK;
