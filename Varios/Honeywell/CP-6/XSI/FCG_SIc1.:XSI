/*M* FCG_SIc1 -- Main routine for Functional Code Group tool */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
 
/*F*    NAME:     FCG_SIc1
        PURPOSE:  Execute start-up routines, and handle interactive
                  use of FCG until the program is quit.
 
        DESCRIPTION:
 
           FCG begins with a start-up routine, which is called from
           main.  This routine reads the data file in, builds the tree
           structures used in decoding, validates correctness of data,
           handles all command line options, and executes commands
           given on the command line.
           When, and if, we return from the start-up routine correctly
           we go to interactive mode until the user quits.
*/
 
/*
**********************************************************************
*/
 
#include <stdio.h>
#include <ctype.h>
#define __SG_MACROS__
#include <SEAGULL.h>
 
#include "FCG_Cc1"
 
#define MSG_FILE_DEFAULT = "FCG_DATA"
 
/* GLOBAL DATA */
int  quitting, error, result, verbose=NO;
int  major_area, minor_area, module_id;
char fcg_input[10];
NODE major_head[NUM_MAJOR];
PROC proc_head[NUM_MAJOR];
char message_file[41] = "FCG_DATA";
char document_file[41] = "*AF_FCG";
char input_file[41];
char *msg_file_namep;
char *docum_file_namep;
char *input_file_namep;
char *fcg_commands[100];
char *proc_commands[100];
int  flag_cap_docum = TRUE;
int  flag_text_docum = FALSE;
int  flag_ascii_docum = FALSE;
int  InputFileExists = FALSE;
int  AppendToDocumFile = FALSE;
FILE *dbp;      /* Data Base file pointer */
FILE *afp;      /* Arch docum File pointer */
FILE *inp;      /* Input File pointer (Old AF paper) */
TEXT embedded_text_list[20];
int  embedded_count=0;
char StartCommand[20];
char EndCommand[20];
int  OutputToLP = FALSE;
int  OutputToLZ = FALSE;
int  DefaultAfName = TRUE;
 
 
/*
======================================================================
                               MAIN
======================================================================
*/
 
 
main (int argc, char **argv)
{
  char *bogus_c;
 
  quitting = FALSE;
  error = dr2_StartUp (argc, argv);
 
  if (!error)
     ou1_WelcomeToFcg ();
 
  while (!quitting && !error)  {
    in1_InitShit();
    ou1_PromptEm ();
    result = pa1_GetFcg (INTERACTIVE, bogus_c);
    switch (result)  {
      case OK:
        ut1_DecodeMajorArea (major_area);
        if (minor_area != NONE)  {
          ut1_DecodeMinorArea (major_area, minor_area);
          if (module_id != NONE)
            ut1_DecodeModuleId (major_area, minor_area, module_id);
        }
        break;
      case QUIT:
        quitting = result;
        break;
      case ERROR:
        error = result;
        break;            /* more here, decode error msg somehow */
      case OPTIONS:
        break;            /* in the option handler, do nothing here */
      default:
        break;            /* do nothing */
    }  /*end switch*/
  }  /*end while*/
}  /*end main*/
 
 
 
 
 
/*
======================================================================
                       INPUT PARSING ROUTINES
======================================================================
*/
/*D*  NAME:    pa1_GetFcg (int where_from, char *in_string)
      PURPOSE: This function takes input, interactive or command line,
               and parses it out.  It will determine the type of cmd,
               and set up the variable  fcg_input  if a FCG command is
               given.  It will call the option handler if options are
               given, and also to process the "\" command as an option.
*/
 
int pa1_GetFcg (int where_from, char *in_string)
{
   I_AM( pa1_GetFcg)
  char temp[120];
  char *input_str;
  int i, count, done, num_chars, status;
 
  input_str = temp;
  if (where_from == CMD_LINE)
     input_str = in_string;
  else     /* interactive input */
     scanf("%s",input_str);
  num_chars = strlen(input_str);
 
/* check for possible command keywords, that aren't fcg cmds */
  if (num_chars > 3)  {
     StringToUpper( input_str);
     if (strcmp( input_str, "HELP") == 0)  {
         input_str[1] = 'H';
         if (status = pa1_OptionHandler( input_str,0,2) != OK)
            return (status);
         else
            return (OPTIONS);
     }
     if (strcmp( input_str, "EXIT") == 0
     ||  strcmp( input_str, "END") == 0       /*N* if no END fcg */
     ||  strcmp( input_str, "QUIT") == 0)  {
         ou1_BlowThisPopStand ();
         return (QUIT);
     }
  }  /*end if chars>3 */
 
/* parse out the given input, be it - fcg, option, or proc cmds */
  i=count=done=0;
  while ((i<num_chars) && !done)  {
    if (isalpha(input_str[i]))  {
      fcg_input[count] = toupper(input_str[i]);
      done = ut1_AssignCodes (fcg_input[count], count);
      count++;
    }  /*end if*/
    else if (isdigit(input_str[i]))  {
      if (count == 0)  {    /* major fcg can not be a digit = error */
        Error( ME, "%s \"%c\" \n",
               "Major FCG can not be a digit - ", input_str[i]);
        return (SYNTAX);
      }
      fcg_input[count] = input_str[i];
      done = ut1_AssignCodes (fcg_input[count], count);
      count++;
    }  /*end else if*/
    else  {       /* non-alpha/numeric character */
      switch (input_str[i])  {
        case '?':
          fcg_input[count] = input_str[i];
          done = ut1_AssignCodes ('?',count);
          count++;
          break;
        case BLANK:
          break;
        case BACK_SLASH:
          input_str[i--] = 'p';      /* setup for -p option */
          /* no "break" here, we go on and treat input like a -p */
        case DASH:
          status = pa1_OptionHandler (input_str,i,num_chars);
          if (status != OK)
             return (status);
          else
             return (OPTIONS);   /* OK, but if return OK we decode again */
          break;
        case '\O':
          return (OK);
          break;
        default:
          if (where_from == CMD_LINE)
             Error( ME, "%s \"%c\" %s \n",
                    "Illegal character - ", input_str[i],
                    " - given on command line");
          else
             ou1_TryAgain ();       /* illegal character input */
          return (ILLEGAL);
          break;
      }  /*end switch*/
    }  /*end else*/
    i++;
    if (count > 10)
      done = TRUE;
  }  /*end while*/
return(OK);
}  /*end pa1_GetFcg()*/
 
/*
----------------------------------------------------------------------
*/
/*D*  NAME:    pa1_OptionHandler (char options[], int pos, int num_chars)
      PURPOSE: This is the command line, and interactive option handler
               for FCG.  All options are covered in this one routine.
*/
 
int  pa1_OptionHandler (char options[], int pos, int num_chars)
{
   I_AM( pa1_OptionHandler)
  char proc[20];
  int i, result, status, num_cmds;
 
  while (pos < num_chars)  {
    pos++;
    switch (tolower(options[pos]))  {
      case '?':      /* help */
      case 'h':      /* Help */
        ou1_HelpEmOut (H_MAIN);
        return(OPTIONS);
        break;
      case 'p':      /* Proc opt */
        for (i=0; i<20; i++)
           proc[i] = 0;
        if (!options[++pos])  /* -p PROC entered with 1 or > spaces */
          scanf("%s",proc);
        else  {               /* -pPROC entered - no space */
          i = 0;
          while (options[pos])
             proc[i++] = options[pos++];
        }  /*end else*/
        num_cmds = 0;
        result = ut2_DecodeProcToFcg (StringToUpper(proc), &num_cmds);
        switch (result)  {
           case OK:
             printf("\n%s ",proc);
             for (i=1; i<= num_cmds; i++)  {
                status = pa2_FcgFromCmdLine (fcg_commands[i]);
                free(fcg_commands[i]);
                if (status != OK)
                   return (status);
             }  /*end for i*/
             break;
           case NOT_FOUND:
             printf("** NO processor \"%s\" in data file **\n");
             return (OK);
           default:
             printf("** Illegal processor given on cmd line **\n");
             break;
         }  /*end switch*/
         break;
      case 'q':      /* Quit */
      case 'e':      /* End  */
      case 'x':      /* eXit */
        ou1_BlowThisPopStand ();
        return(QUIT);
        break;
      default:       /* invalid opt given */
        Error( ME, "%s \"%c\" %s \n",
               "Option ", options[pos], " not implemented!");
        return(OK);
        break;
    }
  }  /*end while*/
return(OK);
}  /*end pa1_OptionHandler()*/
 
 
 
/*
======================================================================
                       DECODING ROUTINES
======================================================================
*/
/*D*  NAME:    ut1_DecodeMajorArea (int major_fcg)
      PURPOSE: This function takes the major functional area of the FCG
               as input, decodes the input to one or all fcgs, and then
               outputs the results (with another function call).
*/
 
void  ut1_DecodeMajorArea (int major_fcg)
{
   I_AM( ut1_DecodeMajorArea)
  int i;
 
  if ((major_fcg >= FCG_A) && (major_fcg <= FCG_Z))
    ou1_OutputMajor (major_fcg+'A', major_head[major_fcg].message);
 
  else if (major_fcg = FCG_ALL)
    for (i=FCG_A; i<=FCG_Z; i++)
      ou1_OutputMajor (i+'A', major_head[i].message);
 
  else
    Error( ME, "%s \n", "NO such major Functional Code Group area ***");
return;
}
 
/*
----------------------------------------------------------------------
*/
/*D*  NAME:    ut1_DecodeMinorArea (int major, int minor)
      PURPOSE: Similar to above function, only decodes, etc. the minor
               functional area of the FCG.
*/
 
void  ut1_DecodeMinorArea (int major, int minor)
{
  LINK minor_head;
 
  minor_head = major_head[major].next_level;
  major = major + 'A';      /* need to convert 'code' back to ASCII */
  while (minor_head)  {
    if (minor == (int)'?')
       ou1_OutputMinor (major, minor_head->fcg, minor_head->message);
    else  /* minor is A-Z or 0-9 */
       if (minor == (int)(minor_head->fcg)) {
         ou1_OutputMinor (major, minor_head->fcg, minor_head->message);
         return;
       }
    minor_head = minor_head->next_char;
  }  /*end while*/
return;
}
 
/*
----------------------------------------------------------------------
*/
/*D*  NAME:    ut1_DecodeModuleId (int major, int minor, int module)
      PURPOSE: Similar to above functions, only for module level.
*/
 
void  ut1_DecodeModuleId (int major, int minor, int module)
{
  LINK minor_head, module_head;
 
  minor_head = major_head[major].next_level;
  major = major + 'A';      /* need to convert 'code' back to ASCII */
  while (minor_head)  {   /* outter loop = Level 2 => minor list */
    if ( minor == (int)(minor_head->fcg))  {
      module_head = minor_head->next_level;
      while (module_head)  {   /* inner loop = Level 3 => module list */
        if (module == (int)'?')
          ou1_OutputModule (major,minor, module_head->fcg, module_head->message);
        else     /* module is A-Z or 0-9 */
           if (module == (int)(module_head->fcg)) {
              ou1_OutputModule (major,minor,module_head->fcg, module_head->message);
              return;
           }
        module_head = module_head->next_char;
      }  /*end while -inner*/
      return;
    }  /*end if*/
    minor_head = minor_head->next_char;
  }  /*end while -outter*/
return;
}
 
/*
----------------------------------------------------------------------
*/
/*D*  NAME:    ou1_OutputMajor (int major, char *message)
      PURPOSE: Outputs major FCG, and its message.
*/
 
void  ou1_OutputMajor (int major, char *message)
{
  printf("    %c = %s",major,message);
return;
}
 
/*D*  NAME:    ou1_OutputMinor (int major, int minor, char *message)
      PURPOSE: Outpus minor FCG, and its given message.
*/
 
void  ou1_OutputMinor (char major, char minor, char *message)
{
  printf("       %c%c = %s",major,minor,message);
return;
}
 
/*D*  NAME:    ou1_OutputModule (int major, int minor, int module, char *message)
      PURPOSE: Outpus module FCG, and its given message.
*/
 
void  ou1_OutputModule (char major, char minor, char module, char *message)
{
  printf("           %c%c%c = %s",major,minor,module,message);
return;
}
 
/*
======================================================================
                        MISC./UTILITY ROUTINES
======================================================================
*/
 
in1_InitShit ()
{
  int i;
 
  major_area = minor_area = module_id = NONE;
 
  for (i=0; i<10; i++)
    fcg_input[i] = '/';
return;
}
 
/*
----------------------------------------------------------------------
*/
/*    This function determines if a given fcg is legal or not.  */
 
int ut1_LegalFcg (int fcg)
{
  if ((fcg >= (int)'A') && (fcg <= (int)'Z') ||
      (fcg >= (int)'0') && (fcg <= (int)'9'))
     return (TRUE);
  else
    return (FALSE);
}  /*end ut1_LegalFcg ()*/
 
/*
----------------------------------------------------------------------
*/
/*    This function assigns values to global variables for the given
      fcg, the position of the character determines which variable. */
 
int ut1_AssignCodes (char letter, int count)
{
  switch (count)  {
    case 0:
      major_area = ut1_ConvertCharToCode(letter);
      break;
    case 1:
      minor_area = (int)letter;
      break;
    case 2:
      module_id = (int)letter;
      break;
    default:
      return(TRUE);       /* if count > 2, extranious input */
      break;              /* done = TRUE, basically */
  }  /*end switch*/
return(OK);     /* return 0 => not done! */
}  /*end ut1_AssignCodes()*/
 
/*
----------------------------------------------------------------------
*/
/*    This function simply converts a input character to a code that
      is more easily used to index the header arrays.  */
 
int ut1_ConvertCharToCode (char letter)
{
   I_AM( ut1_ConvertCharToCode)
 
  if (isalpha(letter))
    return (toupper(letter) - 'A');
  else if (letter = '?')
    return (FCG_ALL);
  else  {
    Error( ME, "%s \n", "Illegal character squeezed by somewhere!");
    return (ILLEGAL);
  }
}  /*end ut1_ConvertCharToCode ()*/
 
/*
======================================================================
                        OUTPUT ROUTINES
======================================================================
*/
 
ou1_WelcomeToFcg ()
{
  printf("FCG %s here at %s \n\n", MAKESTR( VERSION), GetTimeAndDate() );
return;
}
 
ou1_PromptEm ()
{
  printf("\nfcg:");
return;
}
 
ou1_TryAgain ()
{
  printf("    eh?\n\n");
return;
}
 
ou1_BlowThisPopStand ()
{
  printf("\n\n... so long.\n\n");
  exit( 0);
}
 
 
/*
----------------------------------------------------------------------
*/
/*D*  NAME:    ou1_HelpEmOut (int where_at)
      PURPOSE: This function serves as a central location for any help
               messages we may want to offer the user some time.
*/
 
void  ou1_HelpEmOut (int where_at)
{
  switch (where_at)  {
    case H_MAIN:
      printf("\n\n");
      printf("Enter FCG (Functional Code Group) at the prompt 'fcg:' \n");
      printf("  FCG consists of letters or numbers XYZ where,      \n");
      printf("    X is the major sort field for the broad functional area \n");
      printf("    Y is the minor sort field specifying smaller areas      \n");
      printf("    Z is the module identifier, assigned by programmers     \n");
      printf("    fcg:X   fcg:XY   fcg:XYZ  are examples of legal inputs \n");
      printf("\n");
      printf("Or enter a processor or area of code at the prompt:\n");
      printf("  \\PROCESSOR is the form of the command where,       \n");
      printf("    PROCESSOR is some CP-6 processor or area of code \n");
      printf("    fcg:\\IBEX   fcg:\\PCL    fcg:\\FEP are examples  \n");
      printf("\n");
      printf("  Wild carding is allowed by the use of a '?' in the input,\n");
      printf("    fcg:?   fcg:X?   fcg:XY?  are examples of fcg's wild carded\n");
      printf("    fcg:\\C?  fcg:\\SYS?  are examples of processors wildcarded \n");
      printf("  The '?' can only be in the last position.  X?Z is NOT legal!\n");
      printf("\n");
      break;
    case H_CMD_LINE:
      printf("\n\n");
      printf("For help using FCG.X do the following:  \n");
      printf("  !HELP (FCG.X)                         \n");
      printf("  See the COMMANDS and OPTIONS topics especially. \n");
      printf("\n");
      break;
    default:
      printf("*** No help available for that yet ***\n");
      break;
  }  /*end switch*/
}  /*end ou1_HelpEmOut()*/
