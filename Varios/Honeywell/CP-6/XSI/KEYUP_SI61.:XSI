/*M* KEYUP re-keys update files              */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/*X* DTI=1,THI=1 */
KEYUP:  PROC MAIN;
%INCLUDE CP_6;
%INCLUDE B$JIT_C;
%B$JIT0;
%U$JIT1;
      2 * BIT(1);
%INCLUDE B_ERRORS_C;
%INCLUDE CP_6_SUBS;
%INCLUDE XU_MACRO_C;
%INCLUDE B_MICROPS_C;
DCL B$TCB$ PTR SYMREF;
DCL B$JIT$ PTR SYMREF;
%B$TCB;
%B$ALT;
%F$DCB;
%INCLUDE FM$FIT;
%CODE03;
DCL CODE03$ PTR;
%FPT_READ(FPTN = FPT_READ,STCLASS = STATIC,
        DCB = M$SI);
%FPT_WRITE(FPTN = FPT_WRITE_OU,STCLASS = STATIC,
           DCB = M$OU,
           KEY = OUT_KEY);
DCL 1 OUT_KEY STATIC,
      2 LEN UBIN BYTE UNAL INIT(3),
      2 KEY UBIN(27) UNAL INIT(0);
DCL KEY_UP SBIN;
DCL ADD_COMMENT BIT(1) ALIGNED;
DCL 1 COMMENT,
      2 LEN UBIN BYTE UNAL,
      2 STRING CHAR(111);
%FPT_CLOSE(FPTN = FPT_CLOSE,STCLASS = STATIC,
        DCB = M$OU,
           DISP = SAVE);
%FPT_GDS(FPTN = FPT_GDS,STCLASS = STATIC);
%VLP_VECTOR(FPTN = DESC_TBL,
            SEGID = '0'O,
            STCLASS = STATIC);
%FPT_PRECORD(FPTN = FPT_PRECORD,STCLASS = STATIC,
        DCB = M$SI);
DCL DEFAULT_PLUS CHAR(0) CONSTANT INIT('+0  keyup-supplied');
DCL 1 DD_KEYUP CONSTANT,
      2 L UBIN(9) INIT(7) UNAL,
      2 C CHAR(7) INIT('$$KEYUP') UNAL;
DCL DD_FLAG BIT(1);
DCL RECS SBIN;
DCL IDX SBIN;
DCL IDX1 SBIN;
DCL REM_CHARS SBIN;
DCL USED_CHARS SBIN;
DCL RW_BUF$ PTR;
DCL 1 RD$BUF BASED(RW_BUF$),
      2 LEN UBIN UNAL,
      2 BUF CHAR(REM_CHARS);
DCL 1 WR$BUF BASED(RW_BUF$),
      2 LEN UBIN UNAL,
      2 BUF CHAR(WR$BUF.LEN);
DCL INCR_TBL(0:6) UBIN CONSTANT INIT(100,50,20,10,5,2,1);
DCL FACTOR(0:3) UBIN CONSTANT INIT(1,100,10,1);
DCL DINCR UBIN;
DCL LOOK BIT(1) ALIGNED;
DCL COUNTING BIT(1) ALIGNED;
DCL PREC_FLAG BIT(1) ALIGNED;
DCL UP_IDX SBIN;
DCL MAX_SEV SBIN;
DCL CHAR$1 CHAR(1) BASED;
DCL 1 CHAR$2 CHAR(2) BASED;
DCL 1 UP_TBL(0:0) BASED(DESC_TBL.PTR$),
      2 TYPE SBIN,  /* TYPE = 1 = +0 keyup-supplied
                              2 = +n
                              3 = +n,m                                        */
      2 START SBIN,
      2 FINISH SBIN;
%VLP_VECTOR(FPTN = BUF_DESC,
            SEGID = '0'O,
            STCLASS = STATIC);
%P_PCB(NAME=PCB,
       W = PARSE_WORK,
       WSZ = 100,
       STCLASS = STATIC);
%PARSE$OUT(NAME = OUT$BLK,STCLASS = BASED);
%PARSE$SYM(NAME = OUT$SYM,STCLASS = BASED);
DCL OUT$ PTR;
DCL PLUS_REC BIT(1) SYMREF;
DCL OPTION_LINE BIT(1) SYMREF;
DCL PLUS_END_FLAG BIT(1) ALIGNED;
DCL PARSE_WORK(0:99) UBIN STATIC;
DCL XSF$LOCCODP ENTRY(2) ALTRET;
DCL X$PARSE ENTRY(1) ALTRET;
DCL M$SI$ PTR;
DCL M$OU$ PTR;
DCL F$DCB$ PTR;
DCL M$SI DCB;
DCL M$OU DCB;
DCL M$DO DCB;
        CALL INITIALIZE;
        CALL MOVE_EM_OUT;
        IF DD_FLAG THEN
           CALL ROUND_EM_UP;
         ELSE
           CALL M$CLOSE(FPT_CLOSE) ALTRET(MONERR);
        CALL M$EXIT;
MONERR: CALL ERR_PROC(0,2);
%EJECT;
CLEAN_UP: PROC;
DCL END_BUF CHAR(0) CONSTANT INIT('+END keyup-supplied');
        IF NOT PLUS_END_FLAG
         THEN
         DO;
            OUT_KEY.KEY = 99998000;
            FPT_WRITE_OU.BUF_ = VECTOR(END_BUF);
            CALL M$WRITE(FPT_WRITE_OU) ALTRET(MONERR);
            CALL ERR_PROC(8,0);
            END;
        IF MAX_SEV~=0 THEN
           CALL ERR_PROC(9,2);
        RETURN;
MONERR: CALL ERR_PROC(0,2);
END CLEAN_UP;
%EJECT;
ERR_PROC: PROC(CODE,SEV,IDX1,IDX2);
/*I* NAME: ERR_PROC
     PURPOSE: To report any error condition to the user.
     DESCRIPTION: This procedure reports an error from the TCB if CODE=0
                  or from ERR_TBL(CODE) if CODE>0. If CODE=4, IDX2 is the
                  index to the offending table entry. IDX1 is the index
                  for CODE=1 and 4 of the new entry.                          */
DCL CODE SBIN;
DCL SEV SBIN;
DCL IDX1 SBIN;
DCL IDX2 SBIN;
%FPT_WRITE(FPTN = FPT_WRITE_DO,
           DCB = M$DO,
           STCLASS = STATIC);
DCL ERR_TBL(0:12) CHAR(80) CONSTANT INIT(' ',
    'Too many updates to fit in range',
    'Bad ''+'' record format - ABORT',
    'End of ''+'' record range less than start - ABORT',
    'Update overlap',
    'Extra ''+END'' record(s)...ignored',
    'Non-''+END'' data following ''+END'' record...ABORT',
    '+0 keyup-supplied',
    '+END keyup-supplied',
    '*** Errors *** - Input file unchanged',
    'Insufficient access to file for KEYUP to continue',
    'Invalid options specified',
    ' ');
DCL 1 PLUS_BUF1 CONSTANT,
      2 * CHAR(0) INIT('    +12345,12345@@@and@@@+12345,12345');
DCL 1 PLUS_BUF,
      2 * CHAR(5),
      2 VAL1 CHAR(5),
      2 COMMA CHAR(1),
      2 VAL2 CHAR(5),
      2 * CHAR(10),
      2 VAL3 CHAR(5),
      2 * CHAR(1),
      2 VAL4 CHAR(5);
DCL PBUF(0:36) REDEF PLUS_BUF CHAR(1);
DCL I SBIN;
DCL J SBIN;
DCL MOP_5(0:1) BIT(9) UNAL STATIC INIT(%MVZB4,%MVC1);
%FPT_ERRMSG(FPTN = FPT_ERRMSG,STCLASS = STATIC,
        CODE = ERR_CODE,
        BUF = ERR_BUF,
            RESULTS = VLR_ERRMSG,
            OUTDCB1 = M$DO);
DCL 1 ERR_CODE STATIC,
      2 * BIT(33) UNAL,
      2 SEV UBIN(3) UNAL;
%VLR_ERRMSG(FPTN = VLR_ERRMSG,STCLASS = STATIC);
DCL ERR_BUF CHAR(120) STATIC;
        IF CODE=0
         THEN DO;
            ERR_CODE = B$TCB$->B$TCB.ALT$->B$ALT.ERR;
            ERR_CODE.SEV = 0;
            FPT_ERRMSG.V.DCB# = B$TCB$->B$TCB.ALT$->B$ALT.DCB#;
            CALL M$ERRMSG(FPT_ERRMSG);
            END;
         ELSE
         DO;
            FPT_WRITE_DO.BUF_ = VECTOR(ERR_TBL(CODE));
            CALL M$WRITE(FPT_WRITE_DO) ALTRET(ABORT);
            PLUS_BUF = PLUS_BUF1;
            DO CASE(CODE);
             CASE(2,3);
               FPT_WRITE_DO.BUF_ = VECTOR(WR$BUF);
               WR$BUF.LEN = BITBIN('040040040040'O);
               CALL M$WRITE(FPT_WRITE_DO) ALTRET(ABORT);
             CASE(1,4);
               FPT_WRITE_DO.BUF_ = VECTOR(PLUS_BUF);
               CALL BINCHAR(PLUS_BUF.VAL1,UP_TBL.START(IDX1));
               CALL EDITCHAR(PLUS_BUF.VAL1,0,5,MOP_5,PLUS_BUF.VAL1);
               IF UP_TBL.TYPE(IDX1)<3
                THEN
                DO;
                   PLUS_BUF.COMMA = '@';
                   PLUS_BUF.VAL2 = '@@@@@';
                   END;
                ELSE
                DO;
                   CALL BINCHAR(PLUS_BUF.VAL2,UP_TBL.FINISH(IDX1));
                   CALL EDITCHAR(PLUS_BUF.VAL2,0,5,MOP_5,PLUS_BUF.VAL2);
                   END;
               IF CODE=4
                THEN
                DO;
                   CALL BINCHAR(PLUS_BUF.VAL3,UP_TBL.START(IDX2));
                   CALL EDITCHAR(PLUS_BUF.VAL3,0,5,MOP_5,PLUS_BUF.VAL3);
                   IF UP_TBL.TYPE(IDX2)<3
                    THEN
                      FPT_WRITE_DO.BUF_.BOUND = 30;
                    ELSE
                    DO;
                       CALL BINCHAR(PLUS_BUF.VAL4,UP_TBL.FINISH(IDX2));
                       CALL EDITCHAR(PLUS_BUF.VAL4,0,5,MOP_5,PLUS_BUF.VAL4);
                       END;
                   END;
                ELSE
                  FPT_WRITE_DO.BUF_.BOUND = 15;
               I = 4;
               DO J=5 TO FPT_WRITE_DO.BUF_.BOUND;
                  IF PBUF(J)~=' '
                   THEN
                   DO;
                      I = I+1;
                      IF PBUF(J)='@'
                       THEN
                         PBUF(I) = ' ';
                       ELSE
                         PBUF(I) = PBUF(J);
                      END;
                  END;
               FPT_WRITE_DO.BUF_.BOUND = I;
               CALL M$WRITE(FPT_WRITE_DO) ALTRET(ABORT);
             END;                       /* END CASE                           */
            END;
        IF SEV>=2
         THEN
ABORT:     CALL M$ERR;
         ELSE
           IF SEV>MAX_SEV
            THEN
              MAX_SEV = SEV;
        RETURN;
END ERR_PROC;
%EJECT;
GROW_BUF: PROC(VEC) ALTRET;
/*I* NAME: GROW_BUF
     CALL: CALL GROW_BUF(VEC);
     DESCRIPTION: GROW_BUF increases the size of the data segment framed
                  by VEC by one page.                                         */
%VLP_VECTOR(FPTN = VEC,STCLASS=);
DCL START_VEC BIT(72);
        START_VEC = VEC;
        FPT_GDS.RESULTS_ = VECTOR(VEC);
        FPT_GDS.V.SEGSIZE# = 1024;
        CALL M$GDS(FPT_GDS) ALTRET(GDS_ALT);
        RETURN;
GDS_ALT: IF (B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE=%E$ALLGONE OR
          B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE=%E$MEMLIMIT) AND
          START_VEC~=VEC
         THEN
           RETURN;                      /* GOT SOME SPACE, IT MAY BE          */
                                        /* ENOUGH                             */
         ELSE
           ALTRETURN;
END GROW_BUF;
%EJECT;
INITIALIZE: PROC;
DCL I SBIN;
%FPT_OPEN(FPTN = FPT_OPEN,STCLASS = STATIC);
        MAX_SEV = 0;
        UP_IDX = 0;
        PLUS_END_FLAG = '0'B;
        M$SI$ = DCBADDR(DCBNUM(M$SI));
        M$OU$=DCBADDR(DCBNUM(M$OU));
        FPT_GDS.V.SEGSIZE# = 1024;
        DESC_TBL = '0'O;
        FPT_GDS.RESULTS_ = VECTOR(DESC_TBL);
        CALL M$GDS(FPT_GDS) ALTRET(MONERR);
        BUF_DESC = '0'O;
        FPT_GDS.RESULTS_ = VECTOR(BUF_DESC);
        CALL M$GDS(FPT_GDS) ALTRET(MONERR);
        FPT_OPEN.FPARAM_ = BUF_DESC;
        FPT_OPEN.V.FUN# = %UPDATE#;
        FPT_OPEN.V.DCB# = DCBNUM(M$SI);
        FPT_OPEN.V.OPER.TEST#=%YES#;
        CALL M$OPEN(FPT_OPEN) ALTRET(MONERR);
        FPT_OPEN.V.OPER.TEST#=%NO#;
/*             See if can re-create file in place */
        F$DCB$=DCBADDR(DCBNUM(M$SI));
        IF F$DCB$->F$DCB.FFLG.CREATE# AND
          F$DCB$->F$DCB.FFLG.DELF# AND
          F$DCB$->F$DCB.FFLG.REATTR# THEN DO;
/*             File can be re-created.  No need for extra step. */
            FPT_OPEN.V.FUN#=%IN#;
            CALL M$OPEN(FPT_OPEN) ALTRET(MONERR);
            DD_FLAG=%NO#;
            END;
         ELSE
           IF ~F$DCB$->F$DCB.FFLG.READ# OR
             ~F$DCB$->F$DCB.FFLG.WNEW# OR
             ~F$DCB$->F$DCB.FFLG.DELR# OR
             ~F$DCB$->F$DCB.FFLG.UPD# THEN
              GOTO E_ACCESS;
            ELSE DO;
               FPT_OPEN.V.FUN#=%UPDATE#;
               CALL M$OPEN(FPT_OPEN) ALTRET(MONERR);
               DD_FLAG=%YES#;
               END;
        CODE03$ = BUF_DESC.PTR$;
        CALL XSF$LOCCODP(CODE03$,3) ALTRET(NO_CODE_3);
        FPT_OPEN.V.IXTNSIZE# = CODE03$->CODE03.UGRANS;
NO_CODE_3:
        FPT_OPEN.V.ORG# = %KEYED#;
        FPT_OPEN.V.DCB# = DCBNUM(M$OU);
        FPT_OPEN.V.ASN# = %FILE#;
        FPT_OPEN.V.ACS# = %DIRECT#;
        FPT_OPEN.NAME_ = VECTOR(M$SI$->F$DCB.NAME#);
        FPT_OPEN.ACCT_ = VECTOR(M$SI$->F$DCB.ACCT#);
        FPT_OPEN.IFPARAM_ = BUF_DESC;
        FPT_OPEN.V.FUN# = %CREATE#;
        FPT_OPEN.V.EXIST# = %NEWFILE#;
        FPT_OPEN.FPARAM_ = VECTOR(NIL);
        FPT_OPEN.V.CTG# = %NO#;
        IF ~DD_FLAG THEN DO;
            FPT_OPEN.V.CTG#=%NO#;
            FPT_OPEN.NAME_=VECTOR(M$SI$->F$DCB.NAME#);
            END;
         ELSE DO;
            FPT_OPEN.V.CTG#=%YES#;
            FPT_OPEN.NAME_=VECTOR(DD_KEYUP);
            FPT_OPEN.ACCT_=VECTOR(B$JIT.FACCN);
            END;
        CALL M$OPEN(FPT_OPEN) ALTRET(MONERR);
        DINCR=10;
        IF B$JIT.CCDISP=B$JIT.CCARS THEN
           ADD_COMMENT=%NO#;
         ELSE DO;
            PCB.ROOT$=ADDR(OPTION_LINE);
            PCB.TEXT$=PINCRC(ADDR(B$JIT.CCBUF),B$JIT.CCDISP);
            PCB.NCHARS=B$JIT.CCARS-B$JIT.CCDISP;
            CALL X$PARSE(PCB) ALTRET(PARSEERR);
            DO I=0 TO PCB.OUT$->OUT$BLK.NSUBLKS-1;
               OUT$=PCB.OUT$->OUT$BLK.SUBLK$(I);
               DO CASE(OUT$->OUT$BLK.CODE);
                CASE(1);
/* [C=] .ASYM */
                  ADD_COMMENT=%YES#;
                  COMMENT.LEN=OUT$->OUT$SYM.COUNT;
                  COMMENT.STRING=OUT$->OUT$SYM.TEXT;
                CASE(2);
/* I= .NUMERIC */
                  IF OUT$->OUT$SYM.COUNT>3 THEN
                     GOTO PARSEERR;
                  CALL CHARBIN(DINCR,OUT$->OUT$SYM.TEXT);
                  DINCR=DINCR*FACTOR(OUT$->OUT$SYM.COUNT);
                CASE(ELSE);
                  GOTO PARSEERR;
                END;                    /* CASE                               */
               END;
            END;
        PCB.TEXT$ = PINCRC(BUF_DESC.PTR$,4);
RET:    RETURN;
MONERR: CALL ERR_PROC(0,2);
        GOTO RET;
E_ACCESS: CALL ERR_PROC(10,2);
        GOTO RET;
PARSEERR: CALL ERR_PROC(11,2);
END INITIALIZE;
%EJECT;
MOVE_EM_OUT: PROC;
DCL K SBIN;
        DO WHILE('1'B);
/**/
/* READ NEXT ASSUMED '+' RECORD
*/
NEXT_PLUS: RW_BUF$ = BUF_DESC.PTR$;
           USED_CHARS = 0;
           REM_CHARS = BUF_DESC.W1.VSIZE#-3;
           FPT_READ.BUF_ = VECTOR(RD$BUF.BUF);
           CALL M$READ(FPT_READ) ALTRET(RD_ALT);
           DO WHILE('0'B);
RD_ALT:       IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE=%E$LD
               THEN
               DO;
                  FPT_PRECORD.V.N# = -1;
                  CALL M$PRECORD(FPT_PRECORD) ALTRET(MONERR);
                  CALL GROW_BUF(BUF_DESC) ALTRET(MONERR);
                  GOTO NEXT_PLUS;
                  END;
               ELSE
                 IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE=%E$EOF THEN DO;
                     CALL CLEAN_UP;
                     RETURN;
                     END;
                  ELSE
                    CALL ERR_PROC(0,2);
              END;
/**/
/* INSURE SIZE OF UP_TBL
*/
           IF (UP_IDX+2)*SIZEC(UP_TBL(0))  > (DESC_TBL.W1.VSIZE#+1)
            THEN
              CALL GROW_BUF(DESC_TBL) ALTRET(MONERR);
           RD$BUF.LEN = M$SI$->F$DCB.ARS#;
           IF RD$BUF.LEN=0 THEN DO;
               RD$BUF.LEN=1;
               SUBSTR(RD$BUF.BUF,0,1)=' ';
               END;
/**/
/* PROCESS ASSUMED '+' RECORD
*/
           IF SUBSTR(RD$BUF.BUF,0,1)='+'
            THEN
            DO;
               PCB.NCHARS = M$SI$->F$DCB.ARS#;
               PCB.ROOT$=ADDR(PLUS_REC);
               CALL X$PARSE(PCB) ALTRET(PARSE_ALT);
               DO WHILE('0'B);
PARSE_ALT:        CALL ERR_PROC(2,2);
                  END;
               DO CASE(PCB.OUT$->OUT$BLK.CODE);
                CASE(1);
/**/
/* A '+n[,m] RECORD
*/
                  IF PLUS_END_FLAG
                   THEN
                     CALL ERR_PROC(6,2);
                   ELSE DO;
                      DO K=0 TO PCB.OUT$->OUT$BLK.NSUBLKS-1;
                         DO CASE(PCB.OUT$->OUT$BLK.SUBLK$(K)->OUT$BLK.CODE);
                          CASE(1);
                            CALL CHARBIN(UP_TBL.START(UP_IDX+1),PCB.OUT$->
                              OUT$BLK.SUBLK$(0)->OUT$SYM.TEXT);
                            UP_TBL.FINISH(UP_IDX+1) = UP_TBL.START(UP_IDX+1);
                            UP_TBL.TYPE(UP_IDX+1) = 2;
                          CASE(2);
                            CALL CHARBIN(UP_TBL.FINISH(UP_IDX+1),PCB.OUT$->
                              OUT$BLK.SUBLK$(1)->OUT$SYM.TEXT);
                            UP_TBL.TYPE(UP_IDX+1) = 3;
                          CASE(3);
                            IF ADD_COMMENT
                             THEN DO;   /* Add the default comment since this */
                                        /* plus card has none                 */
                                CALL INDEX1(K,' ',WR$BUF.BUF,0);
                                CALL INSERT(WR$BUF.BUF,K,COMMENT.LEN+2,
                                  '  ',COMMENT.STRING);
                                WR$BUF.LEN = K+2+COMMENT.LEN;
                                END;
                          END;          /* END CASE                           */
                         END;
                      FPT_WRITE_OU.BUF_ = VECTOR(WR$BUF.BUF);
                      RECS = 0;
                      END;
                CASE(2);
/**/
/* A '+END' RECORD
*/
                  IF PLUS_END_FLAG
                   THEN
                     CALL ERR_PROC(5,0);
                   ELSE DO;
                      PLUS_END_FLAG = '1'B;
                      FPT_WRITE_OU.BUF_ = VECTOR(WR$BUF.BUF);
                      OUT_KEY.KEY = 99998000;
                      CALL M$WRITE(FPT_WRITE_OU) ALTRET(MONERR);
                      END;
                  GOTO NEXT_PLUS;
                CASE(3);
/**/
/* A '+*' RECORD
*/
                  GOTO NO_PLUS;
                END;                    /* END CASE                           */
               END;
            ELSE
NO_PLUS:      IF PLUS_END_FLAG
               THEN
                 CALL ERR_PROC(6,2);
               ELSE
               DO;
/**/
/* ASSUME A '+0 keyup-supplied' RECORD JUST PRECEEDING THIS RECORD
*/
                  UP_TBL.START(UP_IDX+1) = 0;
                  UP_TBL.FINISH(UP_IDX+1) = 0;
                  UP_TBL.TYPE(UP_IDX+1) = 1;
                  FPT_WRITE_OU.BUF_ = VECTOR(DEFAULT_PLUS);
                  RECS = 1;
                  USED_CHARS = USED_CHARS + RD$BUF.LEN+4;
                  REM_CHARS = BUF_DESC.W1.VSIZE#-USED_CHARS-3;
                  RW_BUF$ = PINCRC(BUF_DESC.PTR$,USED_CHARS);
                  CALL ERR_PROC(7,0);
                  END;
/**/
/* VALIDATE '+' RECORD
*/
           IF UP_TBL.START(UP_IDX+1)>UP_TBL.FINISH(UP_IDX+1)
            THEN
              CALL ERR_PROC(3,2);
VAL_LOOP:  DO K=0 TO UP_IDX-1;
              IF (UP_TBL.START(K)>=UP_TBL.START(UP_IDX+1) AND UP_TBL.START(K)<=UP_TBL.FINISH(UP_IDX+1))
                OR (UP_TBL.FINISH(K)>=UP_TBL.START(UP_IDX+1) AND UP_TBL.FINISH(K)<=UP_TBL.FINISH(UP_IDX+1))
                OR (UP_TBL.START(UP_IDX+1)>=UP_TBL.START(K) AND UP_TBL.START(UP_IDX+1)<=UP_TBL.FINISH(K))
                OR (UP_TBL.FINISH(UP_IDX+1)>=UP_TBL.START(K) AND UP_TBL.FINISH(UP_IDX+1)<=UP_TBL.FINISH(K))
               THEN DO;
                  IF UP_TBL.TYPE(UP_IDX+1)=2 AND
                    UP_TBL.FINISH(UP_IDX-1)=UP_TBL.START(UP_IDX+1) AND
                    UP_TBL.FINISH(UP_IDX-1)~=UP_TBL.START(UP_IDX-1) THEN
                     EXIT VAL_LOOP;
                  CALL ERR_PROC(4,1,UP_IDX+1,K);
                  END;
              END VAL_LOOP;
/**/
/* PLACE '+' INFORMATION IN UP_TBL IN SORTED ORDER
*/
           IDX = UP_IDX;
           LOOK = '1'B;
           DO WHILE(LOOK);
              IF IDX=0
               THEN
                 LOOK = '0'B;
               ELSE
                 IF UP_TBL.START(UP_IDX+1)<UP_TBL.START(IDX-1)
                  THEN
                    IDX = IDX-1;
                  ELSE
                    LOOK = '0'B;
              END;
           IDX1 = UP_IDX;
           DO WHILE(IDX1>IDX);
              UP_TBL(IDX1) = UP_TBL(IDX1-1);
              IDX1 = IDX1-1;
              END;
           UP_IDX = UP_IDX+1;
           UP_TBL(IDX) = UP_TBL(UP_IDX);
/**/
/* WRITE OUT '+' RECORD
*/
           OUT_KEY.KEY = UP_TBL.START(IDX)*1000;
           CALL M$WRITE(FPT_WRITE_OU) ALTRET(MONERR);
           DO WHILE('0'B);
MONERR:       CALL ERR_PROC(0,2);
              END;
/**/
/* FIND NUMBER OF UPDATE 'RECS'
*/
           PREC_FLAG = '0'B;
           COUNTING = '1'B;
           DO WHILE(COUNTING);
CNT_RD:       IF REM_CHARS<1
               THEN
                 GOTO GROW_IT;
              FPT_READ.BUF_ = VECTOR(RD$BUF.BUF);
              CALL M$READ(FPT_READ) ALTRET(RD_ALT_1);
              DO WHILE('0'B);
RD_ALT_1:        IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE=%E$LD
                  THEN
                  DO;
                     FPT_PRECORD.V.N# = -1;
                     CALL M$PRECORD(FPT_PRECORD) ALTRET(MONERR);
GROW_IT:             CALL GROW_BUF(BUF_DESC) ALTRET(NO_MEM);
                     REM_CHARS = BUF_DESC.W1.VSIZE#-3-USED_CHARS;
                     DO WHILE('0'B);
NO_MEM:                 IF PREC_FLAG
                         THEN
                           CALL ERR_PROC(0,2);
                         ELSE
                         DO;            /* MAY NOT KEEP ALL RECORDS IN        */
                                        /* MEMORY. SET IT UP.                 */
                            PREC_FLAG = '1'B;
                            RW_BUF$ = BUF_DESC.PTR$;
                            REM_CHARS = BUF_DESC.W1.VSIZE#-3;
                            END;
                        END;
                     GOTO CNT_RD;
                     END;
                  ELSE
                    IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE=%E$EOF
                     THEN
                       COUNTING = '0'B;
                     ELSE
                       CALL ERR_PROC(0,2);
                 END;
              IF COUNTING
               THEN
                 IF FPT_READ.BUF_.BUF$->CHAR$1='+'
                   AND M$SI$->F$DCB.ARS#>0
                   AND NOT (FPT_READ.BUF_.BUF$->CHAR$2='+*'
                   AND M$SI$->F$DCB.ARS#>1)
                  THEN
                  DO;
                     COUNTING = '0'B;
                     FPT_PRECORD.V.N# = -1;
                     CALL M$PRECORD(FPT_PRECORD) ALTRET(MONERR);
                     END;
                  ELSE
                  DO;
                     RECS = RECS+1;
                     IF PREC_FLAG=%NO#
                      THEN
                      DO;
                         RD$BUF.LEN = M$SI$->F$DCB.ARS#;
                         IF RD$BUF.LEN=0 THEN DO;
                             RD$BUF.LEN=1;
                             SUBSTR(RD$BUF.BUF,0,1)=' ';
                             END;
                         USED_CHARS = USED_CHARS+RD$BUF.LEN+4;
                         REM_CHARS = BUF_DESC.W1.VSIZE#-3-USED_CHARS;
                         RW_BUF$ = PINCRC(BUF_DESC.PTR$,USED_CHARS);
                         END;
                     END;
              END;
           IF RECS>0
            THEN
            DO;
/**/
/* GET KEY INCREMENT INTO 'KEY_UP'
*/
               KEY_UP = ((UP_TBL.FINISH(IDX)-UP_TBL.START(IDX))*1000+999)/RECS;
               IF KEY_UP<=0
                THEN
                  CALL ERR_PROC(1,1,IDX);
                ELSE
                DO;
                   IDX = 0;
                   DO WHILE(KEY_UP<INCR_TBL(IDX));
                      IDX = IDX+1;
                      END;
                   KEY_UP = INCR_TBL(IDX);
                   END;
               IF DINCR<KEY_UP THEN
                  KEY_UP=DINCR;
               IF MAX_SEV=0
                THEN
                DO;
                   IF PREC_FLAG
                    THEN
                    DO;
/**/
/* MOVE THE UPDATE RECORDS FROM THE INPUT FILE
*/
                       FPT_PRECORD.V.N# = -RECS;
                       CALL M$PRECORD(FPT_PRECORD) ALTRET(MONERR);
                       FPT_READ.BUF_ = BUF_DESC;
                       FPT_WRITE_OU.BUF_ = BUF_DESC;
                       DO IDX=1 TO RECS;
                          CALL M$READ(FPT_READ) ALTRET(MONERR);
                          OUT_KEY.KEY=OUT_KEY.KEY+KEY_UP;
                          IF M$SI$->F$DCB.ARS#>0 THEN
                             FPT_WRITE_OU.BUF_.BOUND=M$SI$->F$DCB.ARS#-1;
                           ELSE DO;
                              FPT_WRITE_OU.BUF_.BOUND=0;
                              FPT_WRITE_OU.BUF_.BUF$->CHAR$1=' ';
                              END;
                          CALL M$WRITE(FPT_WRITE_OU) ALTRET(MONERR);
                          END;
                       END;
                    ELSE
                    DO;
/**/
/* MOVE THE UPDATE RECORDS HELD IN MEMORY
*/
                       RW_BUF$ = BUF_DESC.PTR$;
                       DO IDX = 1 TO RECS;
                          IF WR$BUF.LEN>0
                           THEN
                           DO;
                              OUT_KEY.KEY = OUT_KEY.KEY+KEY_UP;
                              FPT_WRITE_OU.BUF_ = VECTOR(WR$BUF.BUF);
                              CALL M$WRITE(FPT_WRITE_OU) ALTRET(MONERR);
                              END;
                          RW_BUF$ = PINCRC(RW_BUF$,WR$BUF.LEN+4);
                          END;
                       END;
                   END;
               END;
           END;
END MOVE_EM_OUT;
%EJECT;
ROUND_EM_UP: PROC;
/*             At this point $$KEYUP contains the new version of
               the file.  It must be moved back into the M$SI file
               (which is opened update) after the origional set
               of records in M$SI are deleted.
*/
%FPT_DELREC(FPTN=FPT_DELREC,STCLASS=CONSTANT,KEY=LOW,LKEY=HIGH,DCB=M$SI);
%FPT_PFIL(FPTN=FPT_PFIL,STCLASS=CONSTANT,BOF=YES,DCB=M$OU);
DCL 1 LOW CONSTANT,
      2 L UBIN(9) UNAL INIT(3),
      2 V UBIN(27) UNAL INIT(0);
DCL 1 HIGH CONSTANT,
      2 L UBIN(9) UNAL INIT(3),
      2 V UBIN(27) UNAL INIT(99999999);
/**/
        CALL M$DELREC(FPT_DELREC) ALTRET(MONERR);
/*          Start at the beginning */
        CALL M$PFIL(FPT_PFIL) ALTRET(MONERR);
/*          Set up parameters to read from M$OU and write to M$SI */
        FPT_READ.V.DCB#=DCBNUM(M$OU);
        FPT_READ.V.KEYR#=%YES#;
        FPT_READ.KEY_=VECTOR(OUT_KEY);
        FPT_READ.BUF_=BUF_DESC;
        FPT_WRITE_OU.V.DCB#=DCBNUM(M$SI);
        FPT_WRITE_OU.BUF_=BUF_DESC;
/*          Move records till EOF */
        DO WHILE (%YES#);
           CALL M$READ(FPT_READ)
            WHENALTRETURN DO;
               IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.ERR#=%E$EOF THEN
                  GOTO FINISH;
                ELSE
                  GOTO MONERR;
               END;
           FPT_WRITE_OU.BUF_.BOUND=M$OU$->F$DCB.ARS#-1;
           CALL M$WRITE(FPT_WRITE_OU) ALTRET(MONERR);
           END;
/*             Now release $$KEYUP */
FINISH: FPT_CLOSE.V.DISP#=%SAVE#;
        FPT_CLOSE.V.DCB#=DCBNUM(M$SI);
        CALL M$CLOSE(FPT_CLOSE) ALTRET(MONERR);
        FPT_CLOSE.V.DISP#=%RELEASE#;
        FPT_CLOSE.V.DCB#=DCBNUM(M$OU);
        CALL M$CLOSE(FPT_CLOSE) ALTRET(MONERR);
        RETURN;
MONERR: CALL ERR_PROC(0,2);
END ROUND_EM_UP;
END KEYUP;
