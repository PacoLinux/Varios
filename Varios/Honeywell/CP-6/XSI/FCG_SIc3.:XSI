/*M* FCG_SIc3 -- Builds an architecture file document from data base*/
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
 
/*F*    NAME:     FCG_SIc3
        PURPOSE:  Generate an Architecture File style document from a
                  given data base file, which is FCG_DATA, by default.
 
        DESCRIPTION:
 
           FCG.X is envoked with the "-d fid" option on the command
           line, and then it generates an AF type file from FCG_DATA.
           The following functions open up the data base file, read
           the necessary info, and write it (formatted) to the 2nd
           file.  This file will be either CAP, or plain text format.
*/
 
/*
**********************************************************************
*/
 
 
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#define __SG_MACROS__
#include <SEAGULL.h>
 
#include "FCG_Cc1"
 
/* DEFINES */
#define  NEW_LINE(fp)     fprintf( (fp),"   \n");
#define  BREAK_PAGE(fp)   fprintf( (fp),"\\BRP   \n");
#define  INDENT05_start(fp) fprintf( (fp),"\\INL{+.5in}  \n");
#define  INDENT05_stop(fp)  fprintf( (fp),"\\INL{-.5in}  \n");
#define  INDENT10_start(fp) fprintf( (fp),"\\INL{+1.0in}  \n");
#define  INDENT10_stop(fp)  fprintf( (fp),"\\INL{-1.0in}  \n");
 
/* EXTERNAL DATA */
 
/*
======================================================================
               ARCHITECTURE FILE GENERATION ROUTINES
======================================================================
*/
/*D*  NAME:    dr3_BuildAfDocument ()
      PURPOSE: This function will be used to generate an architecture
               file document.  It will, by default, build a file in a
               CAP command type format.  It can possibly make a plain
               old text file also.
*/
 
 
void  dr3_BuildAfDocument ( )
{
   I_AM( dr3_BuildAfDocument)
  char af_access[15] = "w\0";
  int  result;
 
   ou1_WelcomeToFcg();
 
/* open up the data base file (FCG_DATA.X) -- read only */
  dbp = fopen( msg_file_namep, "r sharein");
  if (dbp == (FILE *)0)  {
    Error( ME, "%s \n", "Message File Does Not Exist!!");
    exit( 2);     /* blow away!  we can't do much w/out a data base */
  }
 
/* open the soon to be generated arch document file -- append/create*/
  if (AppendToDocumFile)
     strcpy( af_access, "a\0");
  afp = fopen( docum_file_namep, af_access);
  if (afp == (FILE *)0)  {
    Error( ME, "%s \n",
           "AF Document (Output File) given for '-d' can not be created!");
    exit( 2);     /* didn't open given file, or create new one... */
  }
 
/* open the input file (Old af paper) here, if it was given... */
   if (InputFileExists)  {
      inp = fopen( input_file_namep, "r sharein");
      if (inp == (FILE *)NULL)  {
         Error( ME, "%s %s %s \n", "Input file \"", input_file_namep,
                "\" could not be opened!!");
         exit( 2);
      }
      dr3_ReviseAfDocument( );
   }
 
/* if we get to here, we did not have an Input file:  so, we build a
   document from scratch below... */
 
/*  Both our data base file (FCG_DATA), and our document file should
    be open now, and ready to use.  So, let's get to it....
*/
 
if ((flag_cap_docum) && (!flag_text_docum) && (!flag_ascii_docum))  {
   /* do CAP format style */
   if (result = af3_DoSection1_CAP (dbp, afp)  == OK)
      if (result = af3_DoSection2_CAP (dbp, afp)  == OK)
         if (result = af3_DoSection3_CAP (dbp, afp)  == OK)
            ;          /* all 3 levels finished correctly, by-by */
         else  {
            Error( ME, "%s \n              %s \n",
                   "Problem building Document file ###",
                   "Level=3      Format=CAP");
            exit( 1);
         }
      else  {  /* level2 section problem */
         Error( ME, "%s \n              %s \n",
                "Problem building Document file ###",
                "Level=2      Format=CAP");
         exit( 1);
      }
   else  {  /* level 1 section problem */
      Error( ME, "%s \n              %s \n",
             "Problem building Document file ###",
             "Level=1      Format=CAP");
      exit( 1);
   }
}  /*end if  CAP format */
else if ((flag_ascii_docum) && (!flag_text_docum))  {
   /* do ASCII format style */
   if (result = af3_DoSection1_ASCII (dbp, afp)  == OK)
      if (result = af3_DoSection2_ASCII (dbp, afp)  == OK)
         if (result = af3_DoSection3_ASCII (dbp, afp)  == OK)
            ;          /* all 3 levels finished correctly, by-by */
         else  {
            Error( ME, "%s \n              %s \n",
                   "Problem building Document file ###",
                   "Level=3      Format=ASCII");
            exit( 1);
         }
      else  {  /* level2 section problem */
         Error( ME, "%s \n              %s \n",
                "Problem building Document file ###",
                "Level=2      Format=ASCII");
         exit( 1);
      }
   else  {  /* level 1 section problem */
      Error( ME, "%s \n              %s \n",
             "Problem building Document file ###",
             "Level=1      Format=ASCII");
      exit( 1);
   }
}  /*end else  ASCII format */
 
/* Our AF document should be complete, and in docum_file now */
 
   fclose( dbp);
   fclose( afp);
   printf("\n\n Document File build complete: file = \"%s\" \n", docum_file_namep);
   if (OutputToLP || OutputToLZ)
      ut3_PrintDocument();
 
   exit( 0);
}  /*end dr3_BuildAfDocument ()*/
 
/*
######################################################################
                   OUTPUT -CAP- FORMAT FUNCTIONS
######################################################################
*/
/*D*  NAME:    af3_DoSection1_CAP ( )
      PURPOSE: Create section one of the document.  It reads the data
               base file, and outputs all level 1 messages (which will
               correspond to "X =" of the fcg).
               THE I/O IS DONE WITH  CAP CMDS MIXED IN WITH THE MSGS.
*/
 
int af3_DoSection1_CAP ( )
{
   char fcg[5];
   char backlink[20];
   char account[9];
   char msg_buf[81];
   char *message;
 
   NEW_LINE( afp)
   fprintf( afp,"\\L1{Functional Areas of CP-6     (by FCG.X)}   \n");
   NEW_LINE( afp)
   INDENT05_start( afp)
 
   while (fscanf( dbp, "%s %s %s", fcg,backlink,account) != EOF)  {
      message = msg_buf;            /* reset ptr to start of buffer */
      fgets( message, 80, dbp);
      while (*message == BLANK)     /* strip leading blanks from msg*/
         ++message;
      StripNewline( message);
 
      if ((fcg[1] == UNDER_SCORE) && (fcg[2] == UNDER_SCORE))  {
         fprintf( afp, "\\BRL\\BF{%c} = %s \n", fcg[0], message);
      }
   }  /*end while*/
 
   INDENT05_stop( afp)
   BREAK_PAGE( afp)
   rewind( dbp);
 
return (OK);
}
 
/*
----------------------------------------------------------------------
*/
/*D*  NAME:    af3_DoSection2_CAP ( )
      PURPOSE: Create section two of the document.  It reads the data
               base file, and outputs all level 2 messages (which will
               correspond to "XY =" of the fcg).
               THE I/O IS DONE WITH  CAP CMDS MIXED IN WITH THE MSGS.
*/
 
int af3_DoSection2_CAP ( )
{
   char fcg[5];
   char backlink[20];
   char account[9];
   char msg_buf[81];
   char *message;
 
   NEW_LINE( afp)
   fprintf( afp,"\\L1{Design Categories of CP-6    (by FCG.X)}   \n");
   NEW_LINE( afp)
   INDENT05_start( afp)      /* doesn't really start here, but we turn*/
                    /* it off on 1st level 1 message.. then back on */
 
   while (fscanf( dbp, "%s %s %s", fcg,backlink,account) != EOF)  {
      message = msg_buf;            /* reset ptr to start of buffer */
      fgets( message, 80, dbp);
      while (*message == BLANK)     /* strip leading blanks from msg*/
         ++message;
      StripNewline( message);
 
      if ((fcg[1] == UNDER_SCORE) && (fcg[2] == UNDER_SCORE))  {
         NEW_LINE( afp)
         INDENT05_stop( afp)
         fprintf( afp, "\\L2{%c = %s} \n", fcg[0], message);
         INDENT05_start( afp)
      }
      else if (fcg[2] == UNDER_SCORE)  {
         if (fcg[1] != '*')
           fprintf( afp, "\\BRL\\BF{%c%c} = %s \n",
                    fcg[0], fcg[1], message);
         else     /* make message italics for 'x* = msg' */
           fprintf( afp, "\\BRL\\BF{%c%c} = \\IT{%s} \n",
                    fcg[0], fcg[1], message);
      }
      /* check our list to see if we had embedded text at this point
         of this section... */
      if (InputFileExists)
         ut3_CheckEmbeddedText( fcg);
   }  /*end while*/
 
   INDENT05_stop( afp)
   BREAK_PAGE( afp)
   rewind( dbp);
 
return (OK);
}
 
/*
----------------------------------------------------------------------
*/
/*D*  NAME:    af3_DoSection3_CAP ( )
      PURPOSE: Create section three of the document. It reads the data
               base file, and outputs all level 3 messages (which will
               correspond to "XYZ =" of the fcg).
               THE I/O IS DONE WITH  CAP CMDS MIXED IN WITH THE MSGS.
*/
 
int af3_DoSection3_CAP ( )
{
   char fcg[5];
   char backlink[20];
   char account[9];
   char msg_buf[81];
   char *message;
 
   if (verbose < 2)
      return( OK);
 
   NEW_LINE( afp)
   fprintf( afp,"\\L1{Module Level Categories of CP-6   (by FCG.X)}  \n");
   NEW_LINE( afp)
   INDENT10_start( afp)      /* not really, just like level2_section!*/
 
   while (fscanf( dbp, "%s %s %s", fcg,backlink,account) != EOF)  {
      message = msg_buf;            /* reset ptr to start of buffer */
      fgets( message, 80, dbp);
      while (*message == BLANK)     /* strip leading blanks from msg*/
         ++message;
      StripNewline( message);
 
      if ((fcg[1] == UNDER_SCORE) && (fcg[2] == UNDER_SCORE))  {
         NEW_LINE( afp)
         INDENT10_stop( afp)
         fprintf( afp, "\\L2{%c = %s} \n", fcg[0], message);
         INDENT10_start( afp)
      }
      else if (fcg[2] == UNDER_SCORE)  {
         NEW_LINE( afp)
         INDENT05_stop( afp)
         if (fcg[1] != '*')     /* most are not -- * implies comment*/
           fprintf( afp, "\\BRL\\BF{%c%c = %s} \n",
                    fcg[0], fcg[1], message);
         else   /* fcg[1] = '*' -- italics on message here */
           fprintf( afp, "\\BRL\\BF{%c%c} = \\IT{%s} \n",
                    fcg[0], fcg[1], message);
         INDENT05_start( afp)
      }
      else  {    /* module level, no '_'s were found */
         fprintf( afp, "\\BRL\\BF{%c%c%c} = %s \n",
                       fcg[0], fcg[1], fcg[2], message);
      }
      /* do we need to output embedded shit... */
      if (InputFileExists)
         ut3_CheckEmbeddedText( fcg);
   }  /*end while*/
 
   INDENT10_stop( afp)
   BREAK_PAGE( afp)
   rewind( dbp);
 
return (OK);
}
 
/*
######################################################################
                   OUTPUT -ASCII- FORMAT FUNCTIONS
######################################################################
*/
/*D*  NAME:    af3_DoSection1_ASCII ( )
      PURPOSE: Create section one of the document.  It reads the data
               base file, and outputs all level 1 messages (which will
               correspond to "X =" of the fcg).
               THE I/O IS DONE WITH PLAIN ASCII TEXT MESSAGES.
*/
 
int af3_DoSection1_ASCII ( )
{
   char fcg[5];
   char backlink[20];
   char account[9];
   char msg_buf[81];
   char *message;
 
   NEW_LINE( afp)
   fprintf( afp,"Functional Areas of CP-6     (by FCG.X)    \n");
   fprintf( afp,"------------------------                   \n");
   NEW_LINE( afp)
 
   while (fscanf( dbp, "%s %s %s", fcg,backlink,account) != EOF)  {
      message = msg_buf;            /* reset ptr to start of buffer */
      fgets( message, 80, dbp);
      while (*message == BLANK)     /* strip leading blanks from msg*/
         ++message;
 
      if ((fcg[1] == UNDER_SCORE) && (fcg[2] == UNDER_SCORE))  {
         fprintf( afp, "   %c = %s", fcg[0],message);
      }
   }  /*end while*/
 
   NEW_LINE( afp)
   rewind( dbp);
 
return (OK);
}
 
/*
----------------------------------------------------------------------
*/
/*D*  NAME:    af3_DoSection2_ASCII ( )
      PURPOSE: Create section two of the document.  It reads the data
               base file, and outputs all level 2 messages (which will
               correspond to "XY =" of the fcg).
*/
 
int af3_DoSection2_ASCII ( )
{
   char fcg[5];
   char backlink[20];
   char account[9];
   char msg_buf[81];
   char *message;
 
   NEW_LINE( afp)
   fprintf( afp,"Design Categories of CP-6     (by FCG.X)   \n");
   fprintf( afp,"-------------------------                  \n");
   NEW_LINE( afp)
 
   while (fscanf( dbp, "%s %s %s", fcg,backlink,account) != EOF)  {
      message = msg_buf;            /* reset ptr to start of buffer */
      fgets( message, 80, dbp);
      while (*message == BLANK)     /* strip leading blanks from msg*/
         ++message;
 
      if ((fcg[1] == UNDER_SCORE) && (fcg[2] == UNDER_SCORE))  {
         NEW_LINE( afp)
         fprintf( afp, "   %c = %s", fcg[0],message);
      }
      else if (fcg[2] == UNDER_SCORE)  {
         fprintf( afp, "      %c%c = %s", fcg[0],fcg[1],message);
      }
      /* do we need to output embedded shit... */
      if (InputFileExists)
         ut3_CheckEmbeddedText( fcg);
   }  /*end while*/
 
   NEW_LINE( afp)
   rewind( dbp);
 
return (OK);
}
 
/*
----------------------------------------------------------------------
*/
/*D*  NAME:    af3_DoSection3_ASCII ( )
      PURPOSE: Create section three of the document. It reads the data
               base file, and outputs all level 3 messages (which will
               correspond to "XYZ =" of the fcg).
*/
 
int af3_DoSection3_ASCII ( )
{
   char fcg[5];
   char backlink[20];
   char account[9];
   char msg_buf[81];
   char *message;
 
   if (verbose < 2)
      return( OK);
 
   NEW_LINE( afp)
   fprintf( afp,"Module Level Categories of CP-6   (by FCG.X)   \n");
   fprintf( afp,"---------------------------------------        \n");
   NEW_LINE( afp)
 
   while (fscanf( dbp, "%s %s %s", fcg,backlink,account) != EOF)  {
      message = msg_buf;            /* reset ptr to start of buffer */
      fgets( message, 80, dbp);
      while (*message == BLANK)     /* strip leading blanks from msg*/
         ++message;
 
      if ((fcg[1] == UNDER_SCORE) && (fcg[2] == UNDER_SCORE))  {
         NEW_LINE( afp)
         fprintf( afp, "   %c = %s", fcg[0],message);
      }
      else if (fcg[2] == UNDER_SCORE)  {
         NEW_LINE( afp)
         fprintf( afp, "      %c%c = %s", fcg[0],fcg[1],message);
      }
      else  {    /* module level, no '_'s were found */
         fprintf( afp, "         %c%c%c = %s", fcg[0],fcg[1],fcg[2],message);
      }
      /* do we need to output embedded shit... */
      if (InputFileExists)
         ut3_CheckEmbeddedText( fcg);
   }  /*end while*/
 
   NEW_LINE( afp)
   rewind( dbp);
 
return (OK);
}
 
 
/*
######################################################################
                   OUTPUT -TEXT- FORMAT FUNCTIONS
######################################################################
*/
/*D*  NAME:    af3_DoSection1_TEXT ( )
      PURPOSE: Create section one of the document.  It reads the data
               base file, and outputs all level 1 messages (which will
               correspond to "X =" of the fcg).
               THE I/O IS DONE WITH CP-6 TEXT COMMANDS IN THE MESSAGES.
*/
 
int af3_DoSection1_TEXT ( )
{
   char fcg[5];
   char backlink[20];
   char account[9];
   char msg_buf[81];
   char *message;
 
   NEW_LINE( afp)
   fprintf( afp,"Functional Areas of CP-6     (by FCG.X)    \n");
   fprintf( afp,"------------------------                   \n");
   NEW_LINE( afp)
 
   while (fscanf( dbp, "%s %s %s", fcg,backlink,account) != EOF)  {
      message = msg_buf;            /* reset ptr to start of buffer */
      fgets( message, 80, dbp);
      while (*message == BLANK)     /* strip leading blanks from msg*/
         ++message;
      StripNewline( message);
 
      if ((fcg[1] == UNDER_SCORE) && (fcg[2] == UNDER_SCORE))  {
         fprintf( afp, "   %c = %s \n", fcg[0], message);
      }
   }  /*end while*/
 
   NEW_LINE( afp)
   rewind( dbp);
 
return (OK);
}
 
/*
----------------------------------------------------------------------
*/
/*D*  NAME:    af3_DoSection2_TEXT ( )
      PURPOSE: Create section two of the document.  It reads the data
               base file, and outputs all level 2 messages (which will
               correspond to "XY =" of the fcg).
*/
 
int af3_DoSection2_TEXT ( )
{
   char fcg[5];
   char backlink[20];
   char account[9];
   char msg_buf[81];
   char *message;
 
   NEW_LINE( afp)
   fprintf( afp,"Design Categories of CP-6     (by FCG.X)   \n");
   fprintf( afp,"-------------------------                  \n");
   NEW_LINE( afp)
 
   while (fscanf( dbp, "%s %s %s", fcg,backlink,account) != EOF)  {
      message = msg_buf;            /* reset ptr to start of buffer */
      fgets( message, 80, dbp);
      while (*message == BLANK)     /* strip leading blanks from msg*/
         ++message;
      StripNewline( message);
 
      if ((fcg[1] == UNDER_SCORE) && (fcg[2] == UNDER_SCORE))  {
         NEW_LINE( afp)
         fprintf( afp, "   %c = %s \n", fcg[0], message);
      }
      else if (fcg[2] == UNDER_SCORE)  {
         fprintf( afp, "      %c%c = %s \n", fcg[0], fcg[1], message);
      }
      /* do we need to output embedded shit... */
      if (InputFileExists)
         ut3_CheckEmbeddedText( fcg);
   }  /*end while*/
 
   NEW_LINE( afp)
   rewind( dbp);
 
return (OK);
}
 
/*
----------------------------------------------------------------------
*/
/*D*  NAME:    af3_DoSection3_TEXT ( )
      PURPOSE: Create section three of the document. It reads the data
               base file, and outputs all level 3 messages (which will
               correspond to "XYZ =" of the fcg).
*/
 
int af3_DoSection3_TEXT ( )
{
   char fcg[5];
   char backlink[20];
   char account[9];
   char msg_buf[81];
   char *message;
 
   if (verbose < 2)
      return( OK);
 
   NEW_LINE( afp)
   fprintf( afp,"Module Level Categories of CP-6   (by FCG.X)   \n");
   fprintf( afp,"---------------------------------------        \n");
   NEW_LINE( afp)
 
   while (fscanf( dbp, "%s %s %s", fcg,backlink,account) != EOF)  {
      message = msg_buf;            /* reset ptr to start of buffer */
      fgets( message, 80, dbp);
      while (*message == BLANK)     /* strip leading blanks from msg*/
         ++message;
      StripNewline( message);
 
      if ((fcg[1] == UNDER_SCORE) && (fcg[2] == UNDER_SCORE))  {
         NEW_LINE( afp)
         fprintf( afp, "   %c = %s \n", fcg[0], message);
      }
      else if (fcg[2] == UNDER_SCORE)  {
         NEW_LINE( afp)
         fprintf( afp, "      %c%c = %s \n", fcg[0], fcg[1], message);
      }
      else  {    /* module level, no '_'s were found */
         fprintf( afp, "         %c%c%c = %s \n",
                  fcg[0], fcg[1], fcg[2], message);
      }
      /* do we need to output embedded shit... */
      if (InputFileExists)
         ut3_CheckEmbeddedText( fcg);
   }  /*end while*/
 
   NEW_LINE( afp)
   rewind( dbp);
 
return (OK);
}
 
 
/*
======================================================================
                   REVISE  DOCUMENT  DRIVER  FUNCTION
======================================================================
*/
/*D*  NAME:    dr3_ReviseAfDocument ()
      PURPOSE: This function is used to re-generate an AF paper, given
               the old one as input (with -i fid).  It uses Comment Commands
               within the document to determine where the FCG Sections start
               and end.  All other parts of the paper remain intact; even
               text comments within the sections (using more Comment
               Commands to do this).  This is the driver for the process.
*/
 
void  dr3_ReviseAfDocument ()
{
   I_AM( dr3_ReviseAfDocument)
   int  finished = FALSE;
   int  result;
   int  found_docnum = FALSE;
   int  LineCnt;
   char DocnumCommand[ 20];
   char *strpos;
   char in_record[81];
   char comment[10];
   char command[10];
   char option[10];
   int  SectionNumber;
   char compare_cmd[132];
 
   /* Here's the algorithm...  Read data from the input file, and then
      write it to the output file (af document) if it is not part of
      a FCG section...  The comment "commands" tell us when the sections
      begin & end. */
 
   if (flag_text_docum)  {
      strcpy( StartCommand, ".*FCG.X START");
      strcpy( EndCommand, ".*FCG.X END");
      strcpy( DocnumCommand, ".*FCG.X DOCNUM");
   }
   else if (flag_cap_docum)  {
      strcpy( StartCommand, "\\*{FCG.X START");
      strcpy( EndCommand, "\\*{FCG.X END");
      strcpy( DocnumCommand, "\\*{FCG.X DOCNUM");
   }
   else if (flag_ascii_docum)  {
      /*N* ??? */
      ;
   }
 
   do  {    /* while all sections are !finished */
 
      /* grab & write data 'til we get first START Comment Command */
      LineCnt = 0;
      do  {
         fgets( in_record, 80, inp);
         fputs( in_record, afp);
         /* look for the DOCNUM comment & modify the \docnum CAP
          * command to have the new file name (version)...
          */
         if (!found_docnum && ++LineCnt < 40)  {
            if (strncmp( in_record, DocnumCommand, 15) == 0)  {
               found_docnum = TRUE;
               /* grab the "\docnum AF_0071v-r" CAP command... */
               fgets( in_record, 80, inp);
               memcpy( in_record, "\\docnum \0", 9);
               strcat( in_record, docum_file_namep);
               if (strpos = strchr( in_record, '.'))
                  *strpos = 0;
               strcat( in_record, "\n");
               fputs( in_record, afp);
            }
         }
      }  while (strncmp( in_record, StartCommand, 13) != 0);
 
      /* grab & ignore data 'til we get the END Comment Command */
      /*  ** unless there is embedded text to be saved away!!   */
      do  {
         fgets( in_record, 80, inp);
         if (strncmp( in_record, StartCommand, 13) == 0)  {
            /* save data to memory, for later recall & writing */
            ut3_SaveText( in_record);
         }
         /* else ignore the record */
      } while (strncmp( in_record, EndCommand, 11) != 0);
 
      if (sscanf( in_record, "%s %s %s %d", comment, command, option,
                  &SectionNumber) != 4)  {
         Error( ME, "%s \n             %s",
                "Bad comment command given, as follows: ", in_record);
         exit( 1);
      }
      if (strncmp( option, "SECTION", 7) != 0)  {
         Error( ME, "%s \n", "Bad comment command given, no SECTION.");
         exit( 1);
      }
 
      switch (SectionNumber)  {
         case 1:
            if (flag_cap_docum)
               result = af3_DoSection1_CAP ();
            else if (flag_text_docum)
               result = af3_DoSection1_TEXT ();
            else if (flag_ascii_docum)
               result = af3_DoSection1_ASCII ();
            if (result != OK)  {
               Error( ME, "%s \n",
                      "Could not complete Section 1!!");
               exit( 3);
            }
            break;
         case 2:
            if (flag_cap_docum)
               result = af3_DoSection2_CAP ();
            else if (flag_text_docum)
               result = af3_DoSection2_TEXT ();
            else if (flag_ascii_docum)
               result = af3_DoSection2_ASCII ();
            if (result != OK)  {
               Error( ME, "%s \n",
                      "Could not complete Section 2!!");
               exit( 3);
            }
            if (verbose < 2)
               finished = TRUE;
            break;
         case 3:
            if (flag_cap_docum)
               result = af3_DoSection3_CAP ();
            else if (flag_text_docum)
               result = af3_DoSection3_TEXT ();
            else if (flag_ascii_docum)
               result = af3_DoSection3_ASCII ();
            if (result != OK)  {
               Error( ME, "%s \n",
                      "Could not complete Section 3!!");
               exit( 3);
            }
            finished = TRUE;
            break;
         default:
            Error( ME, "%s %c\n",
                   "Bad Section Number read from input file =",
                   SectionNumber);
            exit( 1);
      }  /*end switch*/
 
      /* we have to be sure to re-write the Comment Command now... */
      fputs( in_record, afp);
   } while (!finished);
 
   /* now flush any records left in the input file, to the output file */
   while (fgets( in_record, 80, inp) )  {
      fputs( in_record, afp);
   }  /*end while*/
 
   fclose( inp);
   fclose( dbp);
   fclose( afp);
   printf( "\n\nDocument File Revision complete:  file = \"%s\" \n",
           docum_file_namep);
 
   if (OutputToLP || OutputToLZ)
      ut3_PrintDocument();
 
   /* now do a CMPR.X of the two files (-i & -d) here... */
   strcpy( compare_cmd, "CMPR.X  ");
   strcat( compare_cmd, input_file_namep);
   strcat( compare_cmd, ",  ");
   strcat( compare_cmd, docum_file_namep);
   strcat( compare_cmd, "  OVER  FCG_CMPR:UPD, NO");   /*N* make variable */
   system( compare_cmd);
 
   exit( 0);
}  /*end dr3_ReviseAfDocument ()*/
 
 
/*
----------------------------------------------------------------------
*/
/*D*  NAME:    ut3_CheckEmbeddedText (char *)
      PURPOSE: This function is called only if an input file was given with
               the -i option.  It should be called after every fputs of an
               FCG message.  It determines if we need to write out possible
               text that was embedded with an FCG Section of the old paper.
               It peruses the list, if a match is found the data is then
               written to the AF file and return.
*/
 
void  ut3_CheckEmbeddedText ( char *fcg)
{
   int i;
   TLINK temp;
   char asterisk_string[39]= "**********************************";
   char seperation_comment[81];
 
   if (flag_text_docum)
      strcpy( seperation_comment, ".**");
   else
      strcpy( seperation_comment, "\\*{");
   strcat( seperation_comment, asterisk_string);
   strcat( seperation_comment, asterisk_string);
   strcat( seperation_comment, " }\n");
 
   for (i=1; i<=embedded_count; i++)  {
      if (strcmp( fcg, embedded_text_list[i].fcg) == 0)  {
         /* got a match so, output the text to output file (afp) */
         fputs( seperation_comment, afp);
         fputs( embedded_text_list[i].text, afp);
         temp = embedded_text_list[i].next;
         while (temp)  {
            fputs( temp->text, afp);
            temp = temp->next;
         }
         fputs( seperation_comment, afp);
      }  /*end if*/
 
   }  /*end for i*/
return;
}
 
 
/*
----------------------------------------------------------------------
*/
/*D*  NAME:    ut3_SaveText (char *)
      PURPOSE: This function is called when a START Comment Command is
               encountered for a FCG, telling us that we have some embedded
               text that we need to stash to memory... until we get around
               to re-generating the section that it was contained in.
*/
 
void  ut3_SaveText (char *start_cmd)
{
   I_AM( ut3_SaveText)
   int i;
   char in_text[81];
   char comment[15];
   char command[15];
   char option[15];
   char fcg[4];
 
   i = ++embedded_count;
   if (sscanf( start_cmd, "%s %s %s %s", comment, command, option,
               fcg) !=4)  {
      Error( ME, "%s \n              %s \n",
             "Bad comment command, as follows:", start_cmd);
      exit( 1);
   }
   strcpy( embedded_text_list[i].fcg, fcg);
   embedded_text_list[i].text = (char *)malloc( strlen( start_cmd)+1);
   strcpy( embedded_text_list[i].text, start_cmd);
 
   do  {  /* grab the text 'til the END Comment Command */
      fgets( in_text, 80, inp);
      tr3_InsertTextNode( fcg, in_text);
   } while (strncmp( in_text, EndCommand, 11) != 0);
 
return;
}
 
 
/*
----------------------------------------------------------------------
*/
/*D*  NAME:    tr3_NewTextNode ()
      PURPOSE: This function just malloc's a new node for the embedded
               text messages type linked list.
*/
 
TLINK  tr3_NewTextNode ()
{
   return( (TLINK)malloc( sizeof( NODE)) );
}
 
 
/*
----------------------------------------------------------------------
*/
/*D*  NAME:    tr3_InsertTextNode (char *fcg, char *text)
      PURPOSE: This function simply places a new node into the linked
               list structure used to save embedded text messages.
*/
 
int  tr3_InsertTextNode (char *fcg, char *text)
{
   int i;
   TLINK head, temp;
 
   i = embedded_count;
   head = embedded_text_list[i].next;
   if (!head)  {
      head = tr3_NewTextNode ();   /* allocate */
      embedded_text_list[i].next = head;
      head-> next = (TLINK) NULL;
      temp = head;
   }
   else  {     /* have a list of at least 1 all ready */
      temp = head;
      while (temp->next)
         temp = temp->next;
      temp->next = tr3_NewTextNode ();
      temp = temp->next;
   }
   /* now fill the node in with the params... */
   strcpy( temp->fcg, fcg);
   temp->text = (char *)malloc( strlen( text)+1);
   strcpy( temp->text, text);
   temp->next = (TLINK) NULL;
 
return( OK);
}
 
 
/*
----------------------------------------------------------------------
*/
/*D*  NAME:    tr3_FreeAllTextNodes ()
      PURPOSE: This function does what the name implies.
*/
 
int   tr3_FreeAllTextNodes ()
{
   int i;
   TLINK temp;
 
   for (i=1; i<=embedded_count; i++)  {
      temp = embedded_text_list[i].next;
      free( embedded_text_list[i].text);
      embedded_text_list[i].fcg[0] = '\0';
      while (temp)  {
         free( temp->text);
         temp = temp->next;
         free( temp->next);
      }
   }  /*end for i*/
   embedded_count = 0;
 
return;
}
 
 
 
/*
----------------------------------------------------------------------
*/
/*D*  NAME:    ut3_PrintDocument ()
      PURPOSE: This function does what the name implies.
*/
 
int   ut3_PrintDocument ()
{
   char ibex_command[132];
 
   if (OutputToLP)  {         /* LP@LOCAL PRINTER OUTPUT (LONG FORM)*/
      if (flag_text_docum)  {
         strcpy( ibex_command, "TEXT  ");
         strcat( ibex_command, docum_file_namep);
         strcat( ibex_command, "  on  LP@LOCAL (form='LONG', in=7)");
         system( ibex_command);
      }
      else if (flag_ascii_docum)  {
         strcpy( ibex_command, "COPY  ");
         strcat( ibex_command, docum_file_namep);
         strcat( ibex_command, "  to LP@LOCAL");
         system( ibex_command);
      }
      else  {
         strcpy( ibex_command, "BATCH $CAP.:CAP FMT=ARCH,DEVICE='LP@LOCAL',FILE=");
         strcat( ibex_command, docum_file_namep);
         system( ibex_command);
      }
   }  /*end if OutputToLP*/
 
   else if (OutputToLZ)  {     /* LASER PRINTER OUTPUT */
      if (flag_text_docum)  {
         Message( "%s \n", "TEXT data to LZ!  No way.  Rerouted to LP.");
         strcpy( ibex_command, "TEXT  ");
         strcat( ibex_command, docum_file_namep);
         strcat( ibex_command, "  on  LP@LOCAL (form='LONG', in=7)");
         system( ibex_command);
      }
      else if (flag_ascii_docum)  {
         Message( "%s \n", "ASCII data to LZ!  No way.  Rerouted to LP.");
         strcpy( ibex_command, "COPY  ");
         strcat( ibex_command, docum_file_namep);
         strcat( ibex_command, "  to LP@LOCAL");
         system( ibex_command);
      }
      else  {
         strcpy( ibex_command, "BATCH $CAP.:CAP FMT=ARCH,DEVICE='LZ@CAP',FILE=");
         strcat( ibex_command, docum_file_namep);
         system( ibex_command);
      }
   }  /*end if OutputToLZ*/
/* if (DefaultAfName)
      remove( docum_file_namep);   /*N* ???*/
return;
}
