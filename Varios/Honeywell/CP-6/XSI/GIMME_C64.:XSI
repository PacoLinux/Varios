/*M* GIMME_DATA_D - This module contains all SYMDEFs for GIMME.               */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
GIMME_DATA_D: PROC;
/**/
/**/
/*  INCLUDE FILES  */
/**/
%INCLUDE CP_6;
%INCLUDE CP_6_SUBS;
%INCLUDE B_ERRORS_C;
%INCLUDE B$JIT;
%INCLUDE XUD_UTS_M;
  %XUD$UTS_ENTRIES;
%INCLUDE GIMME_C61;                    /* PARSE NODE SUBS                    */
%INCLUDE GIMME_C63;                  /* ERROR CODES FOR GIMME              */
%INCLUDE GIMME_C62;
%INCLUDE XU_MACRO_C;                    /* XUR MACROS                         */
%INCLUDE XUH_MACRO_C;                   /* XUH MACROS                         */
%INCLUDE XUR_ENTRY;                     /* XUR ENTRY DCLS                     */
%INCLUDE XU_PERR_C;                     /* XUR&XUW ERROR SUBS                 */
%INCLUDE XUE_MACRO_C;                   /* XUE MACROS                         */
%INCLUDE XUW_MACRO_C;                   /* XUW MACROS                         */
/**/
/*  ENTRY DCLS  */
/**/
%XUE_ENTRIES;
%XUW_ENTRIES;
/**/
/*  DCBs and such  */
/**/
DCL M$SIGN_SHEET DCB;
DCL M$SIGN_SHEET# SBIN WORD STATIC SYMDEF INIT(DCBNUM(M$SIGN_SHEET));
DCL M$SIGN_SHEET$ PTR STATIC SYMDEF;
DCL M$MAIL_NAME DCB;
DCL M$MAIL_NAME# SBIN WORD STATIC SYMDEF INIT(DCBNUM(M$MAIL_NAME));
DCL M$LM DCB;
DCL M$LM# SBIN WORD STATIC SYMDEF INIT(DCBNUM(M$LM));
DCL M$LM$ PTR STATIC SYMDEF;
DCL M$DO DCB;
DCL M$OU DCB;
DCL M$LO DCB;
/**/
/*  SYMBOLS FROM OTHER PLACES  */
/**/
DCL B$JIT$ PTR SYMREF;
DCL B$TCB$ PTR SYMREF;
DCL 1 B_VERSION SYMREF,
      2 C UBIN(9) CALIGNED,
      2 TEXT CHAR(B_VERSION.C) CALIGNED;
/**/
/*  EXCEPTIONAL CONDITION HANDLING  */
/**/
%VLP_ERRCODE (FPTN = ERROR_CODE,
              FCG = "DE",
              MID = "G",
              SEV = 2,
              STCLASS = STATIC);
/**/
/*  Stuff & parameters of the current command  */
/**/
DCL 1 OPT STATIC SYMDEF,
      %TIME_BLOCK (NAME=START_TIME,LVL=2,STCLASS='STATIC SYMDEF');
      %TIME_BLOCK (NAME=END_TIME,LVL=2,STCLASS='STATIC SYMDEF');
      %RESOURCE_BLOCK (NAME=RESOURCE,LVL=2,STCLASS='STATIC SYMDEF');
      %RESOURCE_BLOCK (NAME=ALIAS,LVL=2,STCLASS='STATIC SYMDEF');
      %TIME_BLOCK (NAME=ID_TIME,LVL=2,STCLASS='STATIC SYMDEF');
      %REASON_BLOCK (NAME=REASON,LVL=2,STCLASS='STATIC SYMDEF');
      %REASON_BLOCK (NAME=SITE,LVL=2,STCLASS='STATIC SYMDEF');
      2 AVAIL_TIME ALIGNED,
        3 START_ CHAR(5),
        3 END_ CHAR(5),
        3 PRESENT BIT(1),
      2 DISPLAY_OPT ALIGNED,
        3 CODE UBIN HALF,
        3 PRESENT BIT(1),
      2 REASON_SPEC ALIGNED,
        3 PRESENT BIT(1),
        3 CODE UBIN HALF,
        3 DEFAULT,
          4 C UBIN(9) CALIGNED,
          4 TEXT CHAR(40),
      2 * BIT(1) ;
DCL NOW_UTS SBIN WORD STATIC SYMDEF;
DCL TODAY_START_UTS SBIN WORD STATIC SYMDEF;
DCL TODAY_END_UTS SBIN WORD STATIC SYMDEF;
%USER_ID (NAME=USER_ID,STCLASS="STATIC SYMDEF");
/**/
/*  BASED STRUCTURES THAT WE NEED EVERYWHERE  */
/**/
%PARSE$OUT (NAME=OUT$BLK,
            STCLASS=BASED);
%PARSE$SYM (NAME=OUT$SYM,
            STCLASS=BASED);
%F$DCB;                                 /* The DCB                            */
%B$TCB;
%B$ALT;
DCL 1 TEXT$C BASED CALIGNED,
      2 C UBIN BYTE CALIGNED,
      2 TEXT CHAR(TEXT$C.C) CALIGNED;
DCL 1 RES_AVAIL_TIME STATIC SYMDEF ALIGNED,
      2 START_ CHAR(5),
      2 END_ CHAR(5);
/**/
/*  Nodes in the parse tree  */
/**/
DCL GIMME_COMMAND BIT(1) SYMREF;
DCL START_TIME_STUB BIT(1) SYMREF;
DCL END_TIME_STUB BIT(1) SYMREF;
DCL RESOURCE_STUB BIT(1) SYMREF;
DCL REASON_STUB BIT(1) SYMREF;
DCL ID_STUB BIT(1) SYMREF;
DCL ALIAS_STUB BIT(1) SYMREF;
DCL SITE_STUB BIT(1) SYMREF;
DCL AVAIL_TIME_STUB BIT(1) SYMREF;
DCL DISPLAY_OPT_STUB BIT(1) SYMREF;
DCL REASON_SPEC_STUB BIT(1) SYMREF;
/**/
/*  Stuff to access the sign-up sheet  */
/**/
%SHEET_KEY (NAME = SHEET_KEY,
            STCLASS = "STATIC SYMDEF");
%SHEET_RECORD (NAME = SHEET_RECORD,
               STCLASS = "STATIC SYMDEF");
%VLP_NAME (FPTN = SHEET_NAME,
           NAME = 'GIMME_ID',
           LEN = 31,
           STCLASS = "STATIC SYMDEF");
%VLP_ACCT (FPTN = SHEET_ACCT,
           STCLASS = "STATIC SYMDEF");
%FPT_READ (FPTN = FPT_READ_SHEET,
           BUF = SHEET_RECORD,
           KEY = SHEET_KEY,
           KEYR = YES,
           DCB = M$SIGN_SHEET,
           STCLASS = "STATIC SYMDEF");
%FPT_WRITE (FPTN = FPT_WRITE_SHEET,
            BUF = SHEET_RECORD,
            KEY = SHEET_KEY,
            ONEWKEY = NO,
            NEWKEY = YES,
            DCB = M$SIGN_SHEET,
            STCLASS = "STATIC SYMDEF");
%FPT_DELREC (FPTN = FPT_DELREC_SHEET,
             KEY = SHEET_KEY,
             DCB = M$SIGN_SHEET,
             STCLASS = "STATIC SYMDEF");
%FPT_PFIL (FPTN = FPT_PFIL_SHEET,
           DCB = M$SIGN_SHEET,
           STCLASS = "STATIC SYMDEF");
%FPT_PRECORD (FPTN = FPT_PRECORD_SHEET,
             KEYS = NO,
             KEYR = NO,
             N = -2,
             DCB = M$SIGN_SHEET,
             STCLASS = "STATIC SYMDEF");
%FPT_OPEN (FPTN = FPT_OPEN_SHEET,
           ASN = FILE,
           ORG = KEYED,
           NAME = SHEET_NAME,
           ACCT = SHEET_ACCT,
           SHARE = ALL,
           CTG = YES,
           DCB = M$SIGN_SHEET,
           STCLASS = "STATIC SYMDEF");
%FPT_CLOSE (FPTN = FPT_CLOSE_SHEET,
            DCB = M$SIGN_SHEET,
            STCLASS = "CONSTANT SYMDEF");
/**/
/*  Concurrent access controls  */
/**/
DCL GOT_RESOURCE BIT(1) STATIC SYMDEF INIT('0'B);
%FPT_ENQ (FPTN = FPT_ENQ_SHEET,
          DCB = M$SIGN_SHEET,
          WAIT = YES,
          WAIT_TIME = 15,               /* Seconds to wait                    */
          RNAME = OPT.RESOURCE.RES,
          SHARE = NONE,
          STCLASS = "CONSTANT SYMDEF");
%FPT_DEQ (FPTN = FPT_DEQ_SHEET,
          DCB = M$SIGN_SHEET,
          SELECTIVE = NO,               /* ALL we have                        */
          STCLASS = "CONSTANT SYMDEF");
/**/
/*  User I/O stuff  */
/**/
%FPT_READ (FPTN = FPT_WRITE_LO,
           DCB = M$LO,
           STCLASS = "STATIC SYMDEF");
/**/
/*  Monitor info. stuff */
/**/
%VLR_SITEINFO (FPTN = CURR_SITE,
               STCLASS = "STATIC SYMDEF");
%FPT_MONINFO (FPTN = FPT_GET_SITE,
              SITEINFO = CURR_SITE,
              STCLASS = "STATIC SYMDEF");
/**/
/*  Stuff to access the :NAME file   */
/**/
DCL 1 NAME_KEY STATIC SYMDEF ALIGNED,
      2 LEN UBIN BYTE CALIGNED,
      2 ACCTN CHAR(8) CALIGNED,
      2 UNAME CHAR(12) CALIGNED;
 
DCL 1 NAME_RECORD STATIC SYMDEF ALIGNED,
      2 USER_NAME CHAR(24) CALIGNED;
 
%VLP_NAME (FPTN = MAIL_NAME,
           NAME = ':NAME',
           LEN = 31,
           STCLASS = "STATIC SYMDEF");
%VLP_ACCT (FPTN = MAIL_ACCT,
           ACCT = ':MAIL',
           STCLASS = "STATIC SYMDEF");
%FPT_READ (FPTN = FPT_READ_NAME,
           BUF = NAME_RECORD,
           KEY = NAME_KEY,
           KEYS = YES,
           DCB = M$MAIL_NAME,
           STCLASS = "STATIC SYMDEF");
%FPT_OPEN (FPTN = FPT_OPEN_NAME,
           ASN = FILE,
           ORG = KEYED,
           NAME = MAIL_NAME,
           ACCT = MAIL_ACCT,
           SHARE = ALL,
           DCB = M$MAIL_NAME,
           STCLASS = "STATIC SYMDEF");
%FPT_CLOSE (FPTN = FPT_CLOSE_NAME,
            DCB = M$MAIL_NAME,
            STCLASS = "CONSTANT SYMDEF");
/**/
    END GIMME_DATA_D;
