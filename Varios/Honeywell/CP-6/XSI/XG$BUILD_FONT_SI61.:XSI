/*M* XG$BUILD_FONT - Builds fonts for :FONT */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* DDA */
FONT:  PROC MAIN;
       %INCLUDE CP_6;
       %INCLUDE CP_6_SUBS;
       %INCLUDE B_ERRORS_C;
       %INCLUDE XU_MACRO_C;
       %INCLUDE B$JIT;
/* */
       %FPT_OPEN(FPTN=OPENSI, DCB=M$SI);
       %FPT_OPEN(FPTN=OPENOU, DCB=M$OU, ORG=KEYED, ACS=DIRECT);
       %FPT_READ(FPTN=READSI, DCB=M$SI, BUF=BUF);
       %FPT_READ(FPTN=READ_HEADER, DCB=M$OU, BUF=HEADER,
          KEY=FONT_HEADER_KEY, KEYS=YES);
       %FPT_READ(FPTN=SHORT_HEADER, BUF=FONTNUM, KEYS=YES,
          KEY=SHORT_HEADER_KEY, DCB=M$OU);
       %FPT_WRITE(FPTN=WRITEOU, DCB=M$OU, BUF=CHARBUF, KEY=CHARKEY);
       %FPT_WRITE(FPTN=WRITE_HEADER, DCB=M$OU, BUF=HEADER,
          KEY=FONT_HEADER_KEY);
       %FPT_WRITE(FPTN=WRITEDO, DCB=M$DO);
       %FPT_WRITE(FPTN=WRITE_SHORT_HEADER, KEY=SHORT_HEADER_KEY,
          BUF=FONTNUM, DCB=M$OU);
       %FPT_CLOSE(FPTN=CLOSESI, DCB=M$SI);
       %FPT_CLOSE(FPTN=CLOSEOU, DCB=M$OU, DISP=SAVE);
       %F$DCB(DCBN=F$DCB, STCLASS="BASED(DCB$)");
       %B$TCB;
       %B$ALT;
       %XUR_INIT;
       %PARSE$SYM(NAME=OUT$SYM);
       %PARSE$OUT(NAME=OUT, STCLASS=BASED);
       %P$PCB(NAME=P$PCB, STCLASS="BASED(PCB$)");
/* */
       DCL M$SI DCB;
       DCL M$OU DCB;
       DCL M$DO DCB;
/* */
       DCL X$DEC_CONVERT ENTRY(2) ALTRET;
       DCL X$STRIP_BLANKS ENTRY(1);
       DCL XUR$ERRMSG ENTRY(7) ALTRET;
       DCL XUR$INIT ENTRY(3) ALTRET;
       DCL XUR$GETCMD ENTRY(6) ALTRET;
/* */
       DCL B$TCB$ PTR SYMREF;
       DCL B$JIT$ PTR SYMREF;
       DCL CMD SBIN SYMREF;
       DCL FONT SBIN SYMREF;
/* */
       DCL FIRST SBIN STATIC;
       DCL FONTNAME CHAR(10) STATIC;
       DCL CURRFONT CHAR(10) STATIC;
       DCL CHAR1 CHAR(1) STATIC;
       DCL INDX SBIN STATIC;
       DCL DONE SBIN STATIC;
       DCL NPOINTS SBIN STATIC;
       DCL NUM SBIN;
       DCL I SBIN STATIC;
       DCL DCB$ PTR STATIC;
       DCL POS SBIN;
       DCL FONTNUM UBIN(18) CALIGNED STATIC;
       DCL BLK$ PTR STATIC;
       DCL PCB$ PTR STATIC;
       DCL SIZE SBIN STATIC;
       DCL PBUF CHAR(256) STATIC;
       DCL CHAR10 CHAR(10) STATIC;
       DCL OVERIDE SBIN STATIC;
/* */
       DCL 1 TXTC STATIC,
            2 SIZE UBIN(9) CALIGNED,
            2 TEXT CHAR(10) CALIGNED;
       DCL TXTC$ PTR STATIC INIT(ADDR(TXTC));
       DCL 1 CHARBUF(0:499) STATIC,
            2 X SBIN(9) CALIGNED,
            2 Y SBIN(9) CALIGNED;
       DCL 1 CHARKEY STATIC,
            2 SIZE UBIN(9) INIT(11) CALIGNED,
            2 FONT CHAR(10) CALIGNED,
            2 CHR CHAR(1) CALIGNED;
       DCL 1 HEADER STATIC,
            2 FONTNAME CHAR(10) CALIGNED,
            2 *(0:7) SBIN ALIGNED INIT(0*0), /* SPARES */
            2 WIDTH(0:255) SBIN(9) CALIGNED;
       DCL 1 FONT_HEADER_KEY STATIC,
            2 * UBIN(9) CALIGNED INIT(2),
            2 NUM UBIN(18) CALIGNED;
       DCL 1 SHORT_HEADER_KEY STATIC,
            2 * UBIN(9) CALIGNED INIT(10),
            2 TEXT CHAR(10) CALIGNED;
       DCL 1 BUF STATIC,
            2 FONT CHAR(10) CALIGNED,
            2 CHR CHAR(1) CALIGNED,
            2 * CHAR(2) CALIGNED,
            2 POS(0:23),
             3 X CHAR(4) CALIGNED,
             3 * CHAR(1) CALIGNED,
             3 Y CHAR(4) CALIGNED,
             3 * CHAR(1) CALIGNED;
/* */
       %EQU TOOLONG=0;
       %EQU BADFONT=1;
       %EQU BADWIDTH=2;
       %EQU REDEF=3;
       %EQU BADNUM=4;
       %EQU NOFONT=5;
       %EQU REDEF_FONT=6;
       %EQU SYNTAX_ERR=7;
       %EQU BADFONTNUM=8;
       %EQU GREETING=9;
       %EQU OKAY=10;
       %EQU BADCHAR=11;
/* */
       DCL 1 ERRBUF(0:11) CONSTANT,
            2 SIZE SBIN INIT(18, 19, 39, 55, 45, 54, 51, 12, 39, 22, 32, 43),
            2 TEXT CHAR(80) INIT(
'Record is too long',
'Bad font definition',
'Widths must be in the range of 0 to 255',
'Character defined more than once, first definition used',
'Coordinates must be in the range -256 to 255',
'Fonts must be defined before characters may be defined',
'Font defined more than once.  First definition used',
'Syntax error',
'Font numbers must be greater than 10000',
'XG$BUILD_FONT A00 Here',
'Font building completed normally',
'Characters must be in the range of 0 to 255');
/* */
       CALL PRINTERR(%GREETING);
       OVERIDE=0;
       SIZE=B$JIT.CCARS-B$JIT.CCDISP;
       IF SIZE > 0 THEN
          DO;   /* GET OPTIONS */
          CALL XUR$INIT(XUR_INIT, PCB$) ALTRET(MERR);
 
          CALL INSERT(PBUF, 0, 256,
             SUBSTR(B$JIT.CCBUF, B$JIT.CCDISP, SIZE));
 
          CALL XUR$GETCMD(CMD, BLK$,, PBUF, SIZE) ALTRET(SYNERR);
          OVERIDE=1;
          END;  /* GET OPTIONS */
 
       DCB$=DCBADDR(DCBNUM(M$SI));
       CALL M$OPEN(OPENSI) ALTRET(MERR);
       CALL M$OPEN(OPENOU) ALTRET(MERR);
 
LOOP:  DO WHILE('1'B);
          CALL M$READ(READSI) ALTRET(SIERR);
          FIRST=1;
          POS=0;
 
          DO WHILE('0'B);
SIERR:       IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE = %E$LD THEN
                DO;
                CALL WRITEDO(BUF, F$DCB.ARS#);
                CALL PRINTERR(%TOOLONG);
                CALL QUIT;
                END;
 
             IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE = %E$EOF THEN
                EXIT LOOP;
 
             CALL MONERR;
             CALL QUIT;
          END;
 
          CALL INSERT(CHAR1, 0, 1, SUBSTR(BUF.FONT, 0, 1));
          IF CHAR1 = '%' THEN
             CALL GET_FONT ALTRET(ERR);
          ELSE
             CALL GET_CHAR ALTRET(ERR);
       END;
 
       CALL WRITE_HEADER ALTRET(ERR);
 
       CALL M$CLOSE(CLOSESI) ALTRET(ERR);
       CALL M$CLOSE(CLOSEOU) ALTRET(ERR);
       CALL PRINTERR(%OKAY);
       CALL M$EXIT;
 
MERR:  CALL MONERR;
ERR:   CALL QUIT;
SYNERR: ;
       PBUF=' ';
       I=PCB$->P$PCB.HI_CHAR+B$JIT.CCDISP+1;
       CALL INSERT(PBUF, I, 1, '^');
       CALL WRITEDO(PBUF, I+1);
       CALL PRINTERR(%SYNTAX_ERR);
       CALL QUIT;
       %EJECT;
CHANGE_HEADER: PROC ALTRET;
/* */
       CALL WRITE_HEADER ALTRET(ERR);
 
       SHORT_HEADER_KEY.TEXT=FONTNAME;
       CALL M$READ(SHORT_HEADER) ALTRET(HEAD_ERR);
       FONT_HEADER_KEY.NUM=FONTNUM;
       CALL M$READ(READ_HEADER) ALTRET(MERR);
 
       DO WHILE('0'B);
HEAD_ERR: IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE ~= %E$NOKEY THEN
             DO;
MERR:        CALL MONERR;
             ALTRETURN;
             END;
          CALL PRINTERR(%NOFONT);
       CALL WRITEDO(BUF, F$DCB.ARS#);
          ALTRETURN;
       END;
 
       CURRFONT=FONTNAME;
       RETURN;
ERR:   ALTRETURN;
       END CHANGE_HEADER;
       %EJECT;
CHAR_TO_BIN: PROC ALTRET;
/* */
       NPOINTS=(F$DCB.ARS#-13)/10;
       IF FIRST = 1 THEN
          DO;   /* FIRST POINTS ARE WIDTH */
          CALL CONVERT(BUF.POS.X(0), NUM) ALTRET(ERR);
 
          CALL CONVERT(BUF.POS.Y(0), NUM) ALTRET(ERR);
          IF NUM < 0 OR NUM > 255 THEN
             DO;   /* BAD WIDTH */
             CALL WRITEDO(BUF, F$DCB.ARS#);
             CALL PRINTERR(%BADWIDTH);
             ALTRETURN;
             END;  /* BAD WIDTH */
          HEADER.WIDTH(INDX)=NUM;
          END;  /* FIRST POINTS ARE WIDTH */
 
LOOP:  DO I=FIRST TO NPOINTS-1;
          CALL CONVERT(BUF.POS.X(I), NUM) ALTRET(ERR);
          CHARBUF.X(POS)=NUM;
 
          CALL CONVERT(BUF.POS.Y(I), NUM) ALTRET(ERR);
          CHARBUF.Y(POS)=NUM;
          POS=POS+1;
 
          IF CHARBUF.X(POS-1) = -256 AND CHARBUF.Y(POS-1) = -256 THEN
             DO;
             DONE=1;
             EXIT LOOP;
             END;
       END;
 
       FIRST=0;
       RETURN;
ERR:   ALTRETURN;
       END CHAR_TO_BIN;
       %EJECT;
CONVERT: PROC(CHAR4, NUM) ALTRET;
       DCL CHAR4 CHAR(4) CALIGNED;
       DCL NUM SBIN;
/* */
       TXTC.SIZE=4;
       TXTC.TEXT=CHAR4;
       CALL X$STRIP_BLANKS(TXTC$);
       CALL X$DEC_CONVERT(TXTC$, NUM) ALTRET(ERR);
 
       IF NUM > 255 OR NUM < -256 THEN
          DO;   /* ERROR */
ERR:      CALL WRITEDO(BUF, F$DCB.ARS#);
          CALL PRINTERR(%BADNUM);
          ALTRETURN;
          END;  /* ERROR */
 
       RETURN;
       END CONVERT;
       %EJECT;
GET_CHAR: PROC ALTRET;
/* */
       FONTNAME=BUF.FONT;
 
       IF FONTNAME ~= CURRFONT THEN
          CALL CHANGE_HEADER ALTRET(ERR);
 
       CHAR1=BUF.CHR;
       INDX=ASCBIN(CHAR1);
       IF INDX > 255 THEN
          DO;   /* BAD CHARACTER */
          CALL PRINTERR(%BADCHAR);
          CALL WRITEDO(BUF, F$DCB.ARS#);
          ALTRETURN;
          END;  /* BAD CHARACTER */
 
       DONE=0;
       DO WHILE(DONE = 0);
          CALL CHAR_TO_BIN ALTRET(ERR);
 
          IF DONE = 0 THEN
             CALL M$READ(READSI) ALTRET(MERR);
       END;
       WRITEOU.BUF_.BOUND=(POS*2)-1;
       CHARKEY.FONT=CURRFONT;
       CHARKEY.CHR=CHAR1;
       CALL M$WRITE(WRITEOU) ALTRET(OUERR);
 
       DO WHILE('0'B);
OUERR:    IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE = %E$OLDREC THEN
             DO;
             CALL WRITEDO(BUF, F$DCB.ARS#);
             CALL PRINTERR(%REDEF);
             END;
          ELSE
             DO;
MERR:        CALL MONERR;
             ALTRETURN;
             END;
       END;
 
       RETURN;
ERR:   ALTRETURN;
       END GET_CHAR;
       %EJECT;
GET_FONT: PROC ALTRET;
       DCL I SBIN;
/* */
       SIZE=F$DCB.ARS#;
       CALL XUR$GETCMD(FONT, BLK$,, BUF, SIZE) ALTRET(SYNERR);
 
       CHAR10=BLK$->OUT.SUBLK$(0)->OUT.SUBLK$(1)->OUT$SYM.TEXT;
       TXTC.SIZE=10;
       TXTC.TEXT=CHAR10;
       CALL X$STRIP_BLANKS(TXTC$);
       CALL X$DEC_CONVERT(TXTC$, NUM);
 
       IF NUM < 10000 AND OVERIDE = 0 THEN
          DO;
          CALL WRITEDO(BUF, F$DCB.ARS#);
          CALL PRINTERR(%BADFONTNUM);
          ALTRETURN;
          END;
 
       FONTNAME=BLK$->OUT.SUBLK$(0)->OUT.SUBLK$(0)->OUT$SYM.TEXT;
       FONTNUM=NUM;
       SHORT_HEADER_KEY.TEXT=FONTNAME;
       CALL M$WRITE(WRITE_SHORT_HEADER) ALTRET(WERR);
 
       FONT_HEADER_KEY.NUM=FONTNUM;
 
       HEADER='0'B;
       HEADER.FONTNAME=FONTNAME;
       DO I=0 TO 255;
          HEADER.WIDTH(I)=-1;
       END;
       CALL WRITE_HEADER ALTRET(ERR);
 
       CURRFONT=FONTNAME;
 
       RETURN;
SYNERR: CALL WRITEDO(BUF, F$DCB.ARS#);
       CALL PRINTERR(%BADFONT);
ERR:   ALTRETURN;
WERR:  IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE = %E$OLDREC THEN
          DO;
          CALL WRITEDO(BUF, F$DCB.ARS#);
          CALL PRINTERR(%REDEF_FONT);
          END;
       ELSE
          DO;
          CALL MONERR;
          ALTRETURN;
          END;
 
       RETURN;
       END GET_FONT;
       %EJECT;
PRINTERR: PROC(ERRNUM);
       DCL ERRNUM SBIN;
       DCL BUF CHAR(256);
       DCL SIZE SBIN;
/* */
       BUF=ERRBUF.TEXT(ERRNUM);
       SIZE=ERRBUF.SIZE(ERRNUM);
       CALL WRITEDO(BUF, SIZE);
       RETURN;
       END PRINTERR;
       %EJECT;
MONERR: PROC;
/* */
       CALL XUR$ERRMSG(B$TCB$->B$TCB.ALT$->B$ALT.ERR,
          B$TCB$->B$TCB.ALT$->B$ALT.DCB#);
       RETURN;
       END MONERR;
       %EJECT;
QUIT:  PROC;
/* */
       CLOSEOU.V.DISP#=0;
       CALL M$CLOSE(CLOSESI);
       CALL M$CLOSE(CLOSEOU);
       CALL M$EXIT;
       END QUIT;
       %EJECT;
WRITEDO: PROC(BUF, N);
       DCL BUF CHAR(256);
       DCL N SBIN;
/* */
       WRITEDO.BUF_.BUF$=ADDR(BUF);
       WRITEDO.BUF_.BOUND=N-1;
       CALL M$WRITE(WRITEDO);
       RETURN;
       END WRITEDO;
       %EJECT;
WRITE_HEADER: PROC ALTRET;
/* */
       FONT_HEADER_KEY.NUM=FONTNUM;
       CALL M$WRITE(WRITE_HEADER) ALTRET(ERR);
       RETURN;
ERR:   CALL MONERR;
       ALTRETURN;
       END WRITE_HEADER;
       END FONT;
