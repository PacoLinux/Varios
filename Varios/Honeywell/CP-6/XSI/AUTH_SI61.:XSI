/*M* AUTH - Get & display users authorization record.                         */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* DFC=YES                                                                  */
AUTH:   PROC MAIN;
  DCL M$DO DCB;
  DCL M$USERS DCB;
  DCL M$USERS$ PTR;
  DCL M$HLP DCB;
  DCL B$TCB$ PTR SYMREF;
  DCL AUTHCMD PTR SYMREF;
  DCL NEED_PRIV BIT(1) STATIC SYMDEF INIT('0'B);
  DCL BUF_CMD CHAR(256) STATIC INIT(' ');
  DCL BUF_ERRMSG CHAR(120) STATIC INIT(' ');
  DCL BUF_CODE BIT(36) STATIC;
  DCL BLANK_LINE CHAR(256) STATIC INIT(' ');
  DCL EDIT5 (0:1) BIT(9) CONSTANT INIT('104'O,'321'O);
  DCL WORK_AREA (0:1023) UBIN STATIC INIT(0*0);
  DCL DO_FLAGS (0:143) BIT(1) UNAL;
  DCL X$PARSE ENTRY(1) ALTRET;
  DCL PATTERN# CHAR(100);
  DCL IND# UBIN;
  DCL IND2# UBIN;
  DCL CNUM# CHAR(5);
  DCL WILD_TYPE UBIN;
  DCL WILD_INDX UBIN;
  DCL OUT$ PTR;
  DCL SYM$ PTR;
%EQU QUES_TEXT = 0;
%EQU TEXT_QUES = 1;
%EQU TEXT_QUES_TEXT = 2;
%INCLUDE           CP_6                     ;
%INCLUDE           B_ERRORS_C               ;
%INCLUDE           AUTH_C61                 ;
%INCLUDE           AS_MAC_C                 ;
%INCLUDE           AS_SUBS_C                ;
%INCLUDE           AS_ENTRIES_M             ;
%INCLUDE           AS_SUPER_C               ;
%INCLUDE           KL_SUPER_C               ;
%INCLUDE           OCI_SUBS_C               ;
%INCLUDE           XG_PROFILE_C             ;
%INCLUDE           XG_SUBS_C                ;
%INCLUDE           XU_FORMAT_C              ;
%INCLUDE           XU_MACRO_C               ;
%INCLUDE           XU_SUBS_C                ;
%INCLUDE           XUW_MACRO_C              ;
%INCLUDE           B$JIT_C      ;
        %B$JIT0 ;
        %U$JIT1 ;
        %M$JIT2 ;
        %F$JIT3 ;
        %S$JIT4 ;
        %J$JIT5 ;
        %A$JIT6 ;
%INCLUDE           AS_SUPER_R               ;
%ASB$PAGE_LO ;
%ASB$READ_HLP ;
%ASB$WRITE_LO ;
%ASL$LIST_OPTS ;
%ASL$LIST_OUT ;
%F$DCB(STCLASS="BASED(M$USERS$)");
%B$TCB(STCLASS="BASED(B$TCB$)");
%B$ALT;
%P_PCB(NAME=AUTH_PCB,
        N#=256,
        R=AUTHCMD,
        T=BUF_CMD,
        W=WORK_AREA,
        WSZ="SIZEW(WORK_AREA)");
%PARSE$OUT(NAME=OUT$BLK,STCLASS="BASED(AUTH_PCB.OUT$)");
%PARSE$SYM(NAME=OUT$SYM,STCLASS=BASED);
%XUW_WILDCARD;
%XUW_ENTRIES;
%FPT_OPEN(FPTN=OPEN_HLP,
         ACCT=HLP_ACCT,
         ASN=FILE,
         DCB=M$HLP,
         FUN=IN,
         NAME=HLP_NAME,
         SHARE=ALL);
%FPT_CLOSE(FPTN=CLOSE_HLP,
         DCB=M$HLP);
%VLP_NAME(FPTN=HLP_NAME,
         NAME=':HLP');
%VLP_ACCT(FPTN=HLP_ACCT,
         ACCT=':SYS');
%FPT_OPEN(FPTN=OPEN_USERS,
        ACCT=USERS_ACCT,
        ASN=FILE,
        DCB=M$USERS,
        FUN=IN,
        NAME=USERS_NAME,
        SHARE=ALL);
%FPT_READ(FPTN=READ_USERS,
        DCB=M$USERS,
        KEY=USERS_KEY,
        KEYS=YES);
%FPT_READ(FPTN=READ_USERS_SEQ,
        DCB=M$USERS,
        KEY=USERS_KEY,
        KEYR=YES);
%FPT_PRECORD(FPTN=POS_USERS_INIT,
        DCB=M$USERS,
        KEY=USERS_KEY,
        KEYS=YES);
%FPT_PRECORD(FPTN=POS_USERS_NEXT,
        DCB=M$USERS,
        KEY=USERS_KEY,
        KEYR=YES,
        KEYS=YES,
        N=1);
%FPT_CLOSE(FPTN=CLOSE_USERS,
        DCB=M$USERS);
%FPT_ERRMSG(BUF=BUF_ERRMSG,
        CODE=BUF_CODE,
        INCLCODE=NO,
        OUTDCB1=M$DO);
%VLP_ACCT(FPTN=USERS_ACCT,ACCT=':SYS    ');
%VLP_NAME(FPTN=USERS_NAME,NAME=':USERS');
%EJECT;
LIST_ACCOUNTS:  PROC(NUM#);
  DCL NUM# UBIN;
  DCL IND1# UBIN;
  DCL IND2# UBIN;
  DCL BLANKS# UBIN;
  DCL LEN# UBIN;
  DCL COMMA CHAR(1);
  DCL OLD_FIRST CHAR(1);
  DCL BUF_LO CHAR(132) STATIC INIT(' ');
/*
        Procedure
*/
        CALL M$OPEN(OPEN_USERS) ALTRET(BOMB);
        CALL M$PRECORD(POS_USERS_INIT) WHENALTRETURN DO;
           IF B$TCB.ALT$->B$ALT.ERR.ERR# ~= %E$NOKEY THEN DO;
              CALL M$CLOSE(CLOSE_USERS);
              GOTO BOMB;
              END;
           END;
READ1:  CALL M$READ(READ_USERS_SEQ) WHENALTRETURN DO;
           IF B$TCB.ALT$->B$ALT.ERR.ERR# ~= %E$EOF THEN DO;
              CALL M$CLOSE(CLOSE_USERS);
              GOTO BOMB;
              END;
           CALL ASB$WRITE_LO('.. No users found.',18);
           CALL M$CLOSE(CLOSE_USERS);
           CALL M$EXIT;
           END;
        IF F$DCB.ARS# ~= SIZEC(AS_USERS) OR USERS_KEY.COUNT > 20 THEN
           GOTO READ1;
        CALL M$CLOSE(CLOSE_USERS) ALTRET(BOMB);
        BLANKS# = 5;
        LEN# = 0;
        OLD_FIRST = SUBSTR(USERS_KEY.UKEY.ACCT,0,1);
        BUF_LO = ' ';
        NUM# = 0;
        CALL ASB$WRITE_LO(BLANK_LINE,1);
        DO WHILE('1'B);
           CALL INDEX(IND2#,' ',USERS_KEY.UKEY.ACCT);
           XUW_WILDCARD.INPUT_.BOUND = IND2# - 1;
           XUW_WILDCARD.INPUT_.INPUT$ = ADDR(USERS_KEY.UKEY.ACCT);
           CALL X$WILDCMP(XUW_WILDCARD) WHENRETURN DO;
              IF OLD_FIRST ~= SUBSTR(USERS_KEY.UKEY.ACCT,0,1) THEN DO;
                 IF LEN# > 0 THEN DO;
                    CALL ASB$WRITE_LO(BUF_LO,LEN#);
                    BLANKS# = 5;
                    LEN# = 0;
                    BUF_LO = ' ';
                    END;
                 CALL ASB$WRITE_LO(BLANK_LINE,1);
                 OLD_FIRST = SUBSTR(USERS_KEY.UKEY.ACCT,0,1);
                 END;
              CALL INDEX(IND1#,' ',USERS_KEY.UKEY.ACCT);
              CALL INDEX(IND2#,' ',USERS_KEY.UKEY.UNAME);
              IF LEN#+BLANKS#+IND1#+IND2#+1 > LO_WIDTH THEN DO;
                 CALL ASB$WRITE_LO(BUF_LO,LEN#);
                 BUF_LO = ' ';
                 BLANKS# = 5;
                 LEN# = 0;
                 END;
              IF USERS_KEY.UKEY.UNAME = ' ' THEN
                 COMMA = ' ';
              ELSE
                 COMMA = ',';
              CALL INSERT(BUF_LO,LEN#,,SUBSTR(BLANK_LINE,0,BLANKS#),
                                       SUBSTR(USERS_KEY.UKEY.ACCT,0,IND1#),COMMA,
                                       SUBSTR(USERS_KEY.UKEY.UNAME,0,IND2#));
              LEN# = LEN# + BLANKS# + IND1# + IND2# + 1;
              BLANKS# = IND1# + IND2# + 1;
              BLANKS# = (((BLANKS# / 12) + 1) * 12) - BLANKS#;
              NUM# = NUM# + 1;
              END;
           WHENALTRETURN DO;
              DO CASE(WILD_TYPE);
                 CASE(%QUES_TEXT);
                 CASE(%TEXT_QUES);
                    IF LEN# > 0 THEN DO;
                       CALL ASB$WRITE_LO(BUF_LO,LEN#);
                       CALL ASB$WRITE_LO(BLANK_LINE,1);
                       END;
                    RETURN;
                 CASE(%TEXT_QUES_TEXT);
                    IF SUBSTR(USERS_KEY.UKEY.ACCT,0,WILD_INDX) ~= SUBSTR(PATTERN#,0,WILD_INDX) THEN DO;
                       IF LEN# > 0 THEN DO;
                          CALL ASB$WRITE_LO(BUF_LO,LEN#);
                          CALL ASB$WRITE_LO(BLANK_LINE,1);
                          END;
                       RETURN;
                       END;
                 END;
              END;
           CALL M$OPEN(OPEN_USERS);
           CALL M$PRECORD(POS_USERS_NEXT) WHENALTRETURN DO;
              IF B$TCB.ALT$->B$ALT.ERR.ERR# = %E$EOF THEN DO;
                 CALL M$EXIT;
                 END;
              GOTO BOMB;
              END;
           USERS_KEY.UKEY.ACCT = ' ';
           USERS_KEY.UKEY.UNAME = ' ';
READ2:     CALL M$READ(READ_USERS_SEQ) WHENALTRETURN DO;
              IF B$TCB.ALT$->B$ALT.ERR.ERR# = %E$EOF THEN DO;
                 IF LEN# > 0 THEN DO;
                    CALL ASB$WRITE_LO(BUF_LO,LEN#);
                    CALL ASB$WRITE_LO(BLANK_LINE,1);
                    END;
                 RETURN;
                 END;
              GOTO BOMB;
              END;
           IF F$DCB.ARS# ~= SIZEC(AS_USERS) OR USERS_KEY.COUNT > 20 THEN
              GOTO READ2;
           CALL M$CLOSE(CLOSE_USERS) ALTRET(BOMB);
           END;
BOMB:   BUF_CODE = B$TCB.ALT$->B$ALT.ERR;
        FPT_ERRMSG.V.DCB# = B$TCB.ALT$->B$ALT.DCB#;
        CALL M$ERRMSG(FPT_ERRMSG);
        CALL M$ERR;
END LIST_ACCOUNTS;
%EJECT;
/*
        Procedure
*/
        M$USERS$ = DCBADDR(DCBNUM(M$USERS));
        DSEG1$ = ADDR(WORK_AREA);
        READ_USERS.BUF_ = VECTOR(AS_USERS);
        READ_USERS_SEQ.BUF_ = VECTOR(AS_USERS);
        NEED_PRIV = '0'B;
        CALL INDEX(IND#,' ',B$JIT$->B$JIT.CCBUF);
        BUF_CMD = SUBSTR(B$JIT$->B$JIT.CCBUF,IND#,B$JIT$->B$JIT.CCARS-IND#);
        CALL X$PARSE(AUTH_PCB) WHENALTRETURN DO;
           BUF_CODE = AUTH_PCB.ERROR;
           FPT_ERRMSG.V.POINTER# = AUTH_PCB.HI_CHAR + IND# + 1;
           CALL M$ERRMSG(FPT_ERRMSG);
           AUTH_PCB.NXT = '1'B;
           CALL X$PARSE(AUTH_PCB);
           CALL M$EXIT;
           END;
        DO CASE(OUT$BLK.CODE);
           CASE(%NONE);
              CALL ASB$WRITE_LO('AUTH A00 here.',14);
              USERS_KEY.UKEY.ACCT = B$JIT$->B$JIT.ACCN;
              USERS_KEY.UKEY.UNAME = B$JIT$->B$JIT.UNAME;
              CALL INDEX(IND#,' ',USERS_KEY.UKEY.UNAME) WHENRETURN DO;
                 USERS_KEY.COUNT = IND# + 8;
                 END;
              WHENALTRETURN DO;
                 USERS_KEY.COUNT = 20;
                 END;
DO_USER:      CALL M$OPEN(OPEN_USERS) ALTRET(BOMB);
              CALL M$READ(READ_USERS) WHENALTRETURN DO;
                 IF B$TCB.ALT$->B$ALT.ERR.ERR# ~= %E$NOKEY THEN
                    GOTO BOMB;
                 CALL INDEX(IND#,' ',USERS_KEY.UKEY.ACCT);
                 CALL INDEX(IND2#,' ',USERS_KEY.UKEY.UNAME);
                 CALL CONCAT(BUF_CMD,' Account ',SUBSTR(USERS_KEY.UKEY.ACCT,0,IND#),
                             ',',SUBSTR(USERS_KEY.UKEY.UNAME,0,IND2#),' not found.');
                 CALL ASB$WRITE_LO(BUF_CMD,IND#+IND2#+21);
                 CALL M$CLOSE(CLOSE_USERS) ALTRET(BOMB);
                 CALL M$EXIT;
                 END;
              CALL M$CLOSE(CLOSE_USERS) ALTRET(BOMB);
              AS_LOGON_KEY.CNT = USERS_KEY.COUNT;
              CALL CONCAT(AS_LOGON_KEY.TEXT,USERS_KEY.UKEY.ACCT,USERS_KEY.UKEY.UNAME);
              CALL ASL$LIST_OPTS(DO_FLAGS);
              IND2# = 0;
              DO IND# = 5 TO 103;
                 IF DO_FLAGS(IND#) THEN
                    IND2# = 1;
                 END;
              IF IND2# = 0 THEN DO;
                 CALL ASB$WRITE_LO(BLANK_LINE,1);
                 CALL INDEX(IND#,' ',USERS_KEY.UKEY.ACCT);
                 CALL INDEX(IND2#,' ',USERS_KEY.UKEY.UNAME);
                 CALL CONCAT(BUF_CMD,SUBSTR(USERS_KEY.UKEY.ACCT,0,IND#),',',
                                     SUBSTR(USERS_KEY.UKEY.UNAME,0,IND2#));
                 CALL ASB$WRITE_LO(BUF_CMD,IND#+IND2#+1);
                 CALL ASB$WRITE_LO(BLANK_LINE,1);
                 END;
              ELSE DO;
                 CALL ASB$PAGE_LO;
                 CALL ASB$WRITE_LO(BLANK_LINE,1);
                 CALL M$OPEN(OPEN_HLP) ALTRET(BOMB);
                 CALL ASB$READ_HLP(KL_DREC$);
                 CALL M$CLOSE(CLOSE_HLP) ALTRET(BOMB);
                 CALL ASL$LIST_OUT(DO_FLAGS);
                 END;
              CALL ASB$WRITE_LO('.. 1 user listed.',17);
              CALL M$EXIT;
           CASE(%ACCN);
              OUT$ = OUT$BLK.SUBLK$(0);
              SYM$ = OUT$->OUT$BLK.SUBLK$(0);
              DO CASE(OUT$->OUT$BLK.CODE);
                 CASE(%ACCT);
                    USERS_KEY = '0'B;
                    CALL INDEX(IND#,'?',SYM$->OUT$SYM.TEXT) WHENRETURN DO;
                       PATTERN# = SYM$->OUT$SYM.TEXT;
                       XUW_WILDCARD.PATTERN_.BOUND = SYM$->OUT$SYM.COUNT - 1;
                       XUW_WILDCARD.PATTERN_.PATTERN$ = ADDR(PATTERN#);
                       IF IND# > 0 THEN DO;
                          USERS_KEY.COUNT = IND#;
                          SUBSTR(USERS_KEY.UKEY.ACCT,0,IND#) = SYM$->OUT$SYM.TEXT;
                          IF SUBSTR(PATTERN#,XUW_WILDCARD.PATTERN_.BOUND,1) = '?' THEN DO;
                             WILD_TYPE = %TEXT_QUES;
                             END;
                          ELSE DO;
                             WILD_TYPE = %TEXT_QUES_TEXT;
                             WILD_INDX = IND#;
                             END;
                          END;
                       ELSE DO;
                          USERS_KEY.COUNT = 1;
                          WILD_TYPE = %QUES_TEXT;
                          END;
                       END;
                    WHENALTRETURN DO;
                       USERS_KEY.COUNT = SYM$->OUT$SYM.COUNT;
                       SUBSTR(USERS_KEY.UKEY.ACCT,0,USERS_KEY.COUNT) = SYM$->OUT$SYM.TEXT;
                       CALL CONCAT(PATTERN#,SYM$->OUT$SYM.TEXT,'?');
                       XUW_WILDCARD.PATTERN_.BOUND = USERS_KEY.COUNT;
                       XUW_WILDCARD.PATTERN_.PATTERN$ = ADDR(PATTERN#);
                       END;
                    NEED_PRIV = '1'B;
                    IF NOT ((B$JIT$->B$JIT.PPRIV & %PPR_SUPER#) OR
                            (B$JIT$->B$JIT.PPRIV & %PPR_SUPERAUTH#) OR
                            (B$JIT$->B$JIT.PPRIV & %PPR_SUPERD#) OR
                            (B$JIT$->B$JIT.PRIV.ACTIVE & %PR_FMSEC#) OR
                            (B$JIT$->B$JIT.PRIV.ACTIVE & %PR_FMREAD#)) THEN DO;
                       CALL ASB$WRITE_LO('You don''t have the privilege needed to do this!',47);
                       CALL M$EXIT;
                       END;
                    CALL ASB$WRITE_LO('AUTH A00 here.',14);
                    CALL ASL$LIST_OPTS(DO_FLAGS);
                    IND2# = 0;
                    DO IND# = 5 TO 103;
                       IF DO_FLAGS(IND#) THEN
                          IND2# = 1;
                       END;
                    IF IND2# = 0 THEN DO;
                       CALL LIST_ACCOUNTS(IND#);
                       GOTO FINISHED;
                       END;
                    CALL M$OPEN(OPEN_USERS) ALTRET(BOMB);
                    CALL M$PRECORD(POS_USERS_INIT) WHENALTRETURN DO;
                       IF B$TCB.ALT$->B$ALT.ERR.ERR# ~= %E$NOKEY THEN DO;
                          CALL M$CLOSE(CLOSE_USERS);
                          GOTO BOMB;
                          END;
                       END;
READ1:              CALL M$READ(READ_USERS_SEQ) WHENALTRETURN DO;
                       IF B$TCB.ALT$->B$ALT.ERR.ERR# ~= %E$EOF THEN DO;
                          CALL M$CLOSE(CLOSE_USERS);
                          GOTO BOMB;
                          END;
                       CALL ASB$WRITE_LO('.. No users found.',18);
                       CALL M$CLOSE(CLOSE_USERS);
                       CALL M$EXIT;
                       END;
                    IF F$DCB.ARS# ~= SIZEC(AS_USERS) OR USERS_KEY.COUNT > 20 THEN
                       GOTO READ1;
                    CALL M$CLOSE(CLOSE_USERS) ALTRET(BOMB);
                    IND# = 0;
                    DO WHILE('1'B);     /* Do forever                         */
                       CALL INDEX(IND2#,' ',USERS_KEY.UKEY.ACCT);
                       XUW_WILDCARD.INPUT_.BOUND = IND2# - 1;
                       XUW_WILDCARD.INPUT_.INPUT$ = ADDR(USERS_KEY.UKEY.ACCT);
                       CALL X$WILDCMP(XUW_WILDCARD) WHENRETURN DO;
                          IND# = IND# + 1;
                          CALL ASB$PAGE_LO;
                          CALL ASB$WRITE_LO(BLANK_LINE,1);
                          CALL M$OPEN(OPEN_HLP) ALTRET(BOMB);
                          CALL ASB$READ_HLP(KL_DREC$);
                          CALL M$CLOSE(CLOSE_HLP) ALTRET(BOMB);
                          CALL ASL$LIST_OUT(DO_FLAGS);
                          END;
                       WHENALTRETURN DO;
                          DO CASE(WILD_TYPE);
                             CASE(%QUES_TEXT);
                             CASE(%TEXT_QUES);
                                GOTO FINISHED;
                             CASE(%TEXT_QUES_TEXT);
                                IF SUBSTR(USERS_KEY.UKEY.ACCT,0,WILD_INDX) ~= SUBSTR(PATTERN#,0,WILD_INDX) THEN
                                   GOTO FINISHED;
                             END;
                          END;
                       CALL M$OPEN(OPEN_USERS);
                       CALL M$PRECORD(POS_USERS_NEXT) WHENALTRETURN DO;
                          IF B$TCB.ALT$->B$ALT.ERR.ERR# = %E$EOF THEN DO;
                             GOTO FINISHED;
                             END;
                          GOTO BOMB;
                          END;
READ2:                 CALL M$READ(READ_USERS_SEQ) WHENALTRETURN DO;
                          IF B$TCB.ALT$->B$ALT.ERR.ERR# = %E$EOF THEN DO;
                             GOTO FINISHED;
                             END;
                          GOTO BOMB;
                          END;
                       IF F$DCB.ARS# ~= SIZEC(AS_USERS) OR USERS_KEY.COUNT > 20 THEN
                          GOTO READ2;
                       CALL M$CLOSE(CLOSE_USERS) ALTRET(BOMB);
                       END;
FINISHED:           IF IND# = 0 THEN
                       CALL ASB$WRITE_LO('.. No users listed.',19);
                    ELSE IF IND# = 1 THEN
                       CALL ASB$WRITE_LO('.. 1 user listed.',17);
                    ELSE DO;
                       CALL BINCHAR(CNUM#,IND#);
                       CALL EDITCHAR(CNUM#,,,EDIT5,CNUM#);
                       CALL INDEX1R(IND#,' ',CNUM#);
                       IND2# = 5 - IND#;
                       CALL CONCAT(BUF_CMD,'.. ',SUBSTR(CNUM#,IND#,IND2#),
                                   ' users listed.');
                       CALL ASB$WRITE_LO(BUF_CMD,IND2#+17);
                       END;
                    CALL M$EXIT;
                 CASE(%ACCT_UNAME);
                    CALL INDEX(IND#,'?',SYM$->OUT$SYM.TEXT) WHENRETURN DO;
                       CALL ASB$WRITE_LO('"Account,name" may not be wildcarded!',37);
                       CALL M$EXIT;
                       END;
                    CALL INDEX1(IND#,'?',OUT$->OUT$BLK.SUBLK$(1)->OUT$SYM.TEXT) WHENRETURN DO;
                       CALL ASB$WRITE_LO('"Account,name" may not be wildcarded!',37);
                       CALL M$EXIT;
                       END;
                    USERS_KEY.UKEY.ACCT = SYM$->OUT$SYM.TEXT;
                    USERS_KEY.UKEY.UNAME = OUT$->OUT$BLK.SUBLK$(1)->OUT$SYM.TEXT;
                    USERS_KEY.COUNT = 8 + OUT$->OUT$BLK.SUBLK$(1)->OUT$SYM.COUNT;
                    IF B$JIT$->B$JIT.ACCN = USERS_KEY.UKEY.ACCT AND
                           B$JIT$->B$JIT.UNAME = USERS_KEY.UKEY.UNAME THEN
                       GOTO DO_USER;
                    NEED_PRIV = '1'B;
                    IF NOT ((B$JIT$->B$JIT.PPRIV & %PPR_SUPER#) OR
                            (B$JIT$->B$JIT.PPRIV & %PPR_SUPERAUTH#) OR
                            (B$JIT$->B$JIT.PPRIV & %PPR_SUPERD#) OR
                            (B$JIT$->B$JIT.PRIV.ACTIVE & %PR_FMSEC#) OR
                            (B$JIT$->B$JIT.PRIV.ACTIVE & %PR_FMREAD#)) THEN DO;
                       CALL ASB$WRITE_LO('You don''t have the privilege needed to do this!',47);
                       CALL M$EXIT;
                       END;
                    CALL ASB$WRITE_LO('AUTH A00 here.',14);
                    GOTO DO_USER;
                 END;
           END;
BOMB:   BUF_CODE = B$TCB.ALT$->B$ALT.ERR;
        FPT_ERRMSG.V.DCB# = B$TCB.ALT$->B$ALT.DCB#;
        CALL M$ERRMSG(FPT_ERRMSG);
        CALL M$ERR;
END AUTH;
%EOD;
/*M* AUTH - Get & display users authorization record.                         */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* DFC=YES                                                                  */
ASB$PIG:  PROC(SUPER_TO_PIG) ALTRET;
  DCL 1 BUF_PIGL STATIC,
        2 * CHAR(3) INIT('L .'),
        2 ACCT# CHAR(8) INIT(' ');
  DCL BUF_PIGE CHAR(1) STATIC INIT('E');
  DCL 1 BUF_TEMP2 STATIC,
        2 VFC# CHAR(1),
        2 REC# CHAR(256);
  DCL BUF_CMD CHAR(0) CONSTANT INIT('PIG *AUTH_TO_PIG OVER ,*PIG_TO_AUTH');
  DCL BUF_ERRMSG CHAR(120) STATIC INIT(' ');
  DCL BUF_CODE BIT(36) STATIC;
  DCL M$DO DCB;
  DCL F$TEMP DCB;
  DCL F$TEMP$ PTR;
  DCL B$JIT$ PTR SYMREF;
  DCL B$TCB$ PTR SYMREF;
  DCL NEED_PRIV BIT(1) SYMREF;
  DCL IND# UBIN;
%INCLUDE CP_6;
%INCLUDE B$JIT;
%INCLUDE AS_SUPER_C;
%INCLUDE AS_ENTRIES_M;
%ASB$WRITE_LO ;
%F$DCB(STCLASS="BASED(F$TEMP$)");
%B$TCB(STCLASS="BASED(B$TCB$)");
%B$ALT;
%SUPER_TO_PIG(STCLASS="");
%FPT_OPEN(FPTN=OPEN_TEMP1,
        ASN=FILE,
        CTG=YES,
        DCB=F$TEMP,
        EXIST=NEWFILE,
        FUN=CREATE,
        NAME=TEMP1,
        ORG=CONSEC);
%FPT_OPEN(FPTN=DEL_TEMP1,
        DCB=F$TEMP,
        DELETE=YES,
        NAME=TEMP1);
%FPT_WRITE(FPTN=WRITE_PIGL,
        BUF=BUF_PIGL,
        DCB=F$TEMP);
%FPT_WRITE(FPTN=WRITE_PIGE,
        BUF=BUF_PIGE,
        DCB=F$TEMP);
%FPT_CLOSE(FPTN=CLOSE_TEMP1,
        DCB=F$TEMP,
        DISP=SAVE);
%FPT_OPEN(FPTN=OPEN_TEMP2,
        ASN=FILE,
        DCB=F$TEMP,
        FUN=IN,
        NAME=TEMP2);
%FPT_PRECORD(FPTN=POS_TEMP2,
        DCB=F$TEMP,
        N=2);
%FPT_READ(FPTN=READ_TEMP2,
        BUF=BUF_TEMP2,
        DCB=F$TEMP);
%FPT_CLOSE(FPTN=CLOSE_TEMP2,
        DCB=F$TEMP,
        DISP=RELEASE);
%FPT_YC(FPTN=YC_PIG,
        CMD=BUF_CMD,
        ECHO=NO,
        LINK=YES);
%FPT_ERRMSG(BUF=BUF_ERRMSG,
        CODE=BUF_CODE,
        INCLCODE=NO,
        OUTDCB1=M$DO);
%VLP_NAME(FPTN=TEMP1,NAME='*AUTH_TO_PIG');
%VLP_NAME(FPTN=TEMP2,NAME='*PIG_TO_AUTH');
/*
        Procedure
*/
        IF NEED_PRIV AND NOT ((B$JIT$->B$JIT.PPRIV & %PPR_PIGC#) OR
                                (B$JIT$->B$JIT.PPRIV & %PPR_PIGD#) OR
                                (B$JIT$->B$JIT.PRIV.ACTIVE & %PR_FMSEC#)) THEN DO;
           CALL ASB$WRITE_LO('   Insufficient privilege for FACCOUNT information.',51);
           RETURN;
           END;
        F$TEMP$ = DCBADDR(DCBNUM(F$TEMP));
        CALL M$OPEN(OPEN_TEMP1) ALTRET(BOMB);
        BUF_PIGL.ACCT# = SUPER_TO_PIG.ACCT;
        CALL M$WRITE(WRITE_PIGL) ALTRET(BOMB);
        CALL M$WRITE(WRITE_PIGE) ALTRET(BOMB);
        CALL M$CLOSE(CLOSE_TEMP1) ALTRET(BOMB);
        CALL M$YC(YC_PIG) ALTRET(BOMB);
        CALL M$OPEN(DEL_TEMP1) ALTRET(BOMB);
        CALL M$CLOSE(CLOSE_TEMP2) ALTRET(BOMB);
        CALL M$OPEN(OPEN_TEMP2) ALTRET(BOMB);
        CALL M$PRECORD(POS_TEMP2) ALTRET(BOMB);
        CALL M$READ(READ_TEMP2) ALTRET(BOMB);
        IND# = F$DCB.ARS# - 1;
        CALL ASB$WRITE_LO(BUF_TEMP2.REC#,IND#);
        CALL M$READ(READ_TEMP2) ALTRET(BOMB);
        IND# = F$DCB.ARS# - 1;
        CALL ASB$WRITE_LO(BUF_TEMP2.REC#,IND#);
        CALL M$CLOSE(CLOSE_TEMP2) ALTRET(BOMB);
        RETURN;
BOMB:   BUF_CODE = B$TCB.ALT$->B$ALT.ERR;
        FPT_ERRMSG.V.DCB# = B$TCB.ALT$->B$ALT.DCB#;
        CALL M$ERRMSG(FPT_ERRMSG);
        CALL M$ERR;
END ASB$PIG;
