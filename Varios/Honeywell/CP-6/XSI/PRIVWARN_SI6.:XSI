/*M* PRIVWARN - warn when users have specified privileges */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* THI=1,PLM=3 */
PRIVWARN: PROC MAIN;
 
 /***
  *** INCLUDE
  ***/
 
%INCLUDE B$JIT;
%INCLUDE CP_6;
%INCLUDE DA_MAP_R;
%INCLUDE CP_6_SUBS;
%INCLUDE XU_MACRO_C;
 
 /***
  *** ENTRY
  ***/
 
DCL DAM$INIT ENTRY ALTRET;
DCL DAM$MAP ENTRY(5) ALTRET;
DCL X$PARSE ENTRY(1) ALTRET;
 
 /***
  *** SYMREF
  ***/
 
DCL B$JIT$ PTR SYMREF;
DCL B$TCB$ PTR SYMREF;
DCL PRIVWARNCMD UBIN SYMREF;
 
 /***
  *** DCB
  ***/
 
DCL M$LO DCB;
DCL M$SI DCB;
DCL M$DO DCB;
 
 /***
  *** STATIC
  ***/
 
DCL SYSID SBIN STATIC;
DCL RESET BIT(1) ALIGNED STATIC;
DCL PRIVTYPEX SBIN STATIC;
DCL WARN_PPRIV BIT(36) STATIC;
DCL USERJIT$ PTR STATIC;                /* Pointer to user's JIT              */
DCL M$LO$ PTR STATIC;
DCL OUTPUT_WIDTH SBIN STATIC;
DCL I SBIN STATIC;
DCL N SBIN STATIC;
DCL USER SBIN STATIC;                   /* User number                        */
DCL 1 PRIV STATIC,
      2 WBIT(0:35) BIT(1) UNAL;
DCL 1 PPRIV STATIC,
      2 WBIT(0:35) BIT(1) UNAL;
DCL PRIV_SPEC BIT(36) STATIC;
DCL WARN_PRIV(0:5) BIT(36) STATIC;
DCL RESET_WARN_PRIV(0:5) BIT(1) ALIGNED STATIC;
DCL WORK_AREA(0:1023) UBIN WORD STATIC;
DCL NODEX SBIN STATIC;
DCL SUBLK$ PTR STATIC;
DCL CODE SBIN STATIC;
 
 /***
  *** CONSTANT
  ***/
 
DCL PRIVNAME(0:35) CHAR(10) CONSTANT INIT(
   'FMEFT', 'FMBLK', 'FMSEC', 'FMDIAG', 'FMREAD', 'BIT05',
   'BIT06', 'BIT07', 'BIT08', 'BIT09', 'BIT10', 'BIT11',
   'SNAP', 'SCREECH', 'DISPJOB', 'BIT15', 'SYSCON', 'ASAVE',
   'GPP', 'BIT19', 'SYSLOG', 'MFEP', 'CFEP', 'CQ',
   'INTCON', 'IOQW', 'IOQ', 'EXPM', 'PM', 'TND',
   'JIT', 'BIT31', 'MSYS', 'MAXMEM', 'EXMM', 'SPCLMM' );
DCL PRIVNAMEL(0:35) SBIN CONSTANT INIT(
   5,5,5,6,6,5, 5,5,5,5,5,5, 5,5,7,5,6,5,
   3,5,6,4,4,5, 5,4,3,4,2,3, 3,5,4,6,4,6 );
DCL PPRIVNAME(0:35) CHAR(10) CONSTANT INIT(
   'CNTRLD', 'CNTRLC', 'EFT', 'EL', 'LABEL', 'PIGD',
   'PIGC', 'SPIDERD', 'SPIDERC', 'SUPER', 'NETCON', 'SUPERAUTH',
   'SUPERWSN', 'SUPERFORM', 'PADMIN', 'SUPERD', 'VOLINIT', 'REPLAY',
   'RATES', 'SYSCON', 'BIT20', 'BIT21', 'BIT22', 'BIT23',
   'BIT24', 'BIT25', 'BIT26', 'BIT27', 'BIT28', 'BIT29',
   'BIT30', 'BIT31', 'BIT32', 'BIT33', 'BIT34', 'BIT35' );
DCL PPRIVNAMEL(0:35) SBIN CONSTANT INIT(
   6,6,3,2,5,4, 4,7,7,5,7,9, 8,9,6,6,7,6,
   5,5,5,5,5,5, 5,5,5,5,5,5, 5,5,5,5,5,5 );
DCL BLANKS CHAR(0) CONSTANT INIT('  ');
DCL NONBLANKTBL(0:511) UBIN BYTE UNAL CONSTANT SYMDEF INIT(
1*32, 0, 1*223, 1*256 );                /* Search table for non-blank         */
 
 /***
  *** FPT
  ***/
 
%FPT_OPEN( FPTN=OPEN_LO,
           DCB=M$LO,
           FUN=CREATE,
           EXIST=OLDFILE,
           CTG=YES );
 
%FPT_CLOSE( FPTN=CLOSE_LO,
            DCB=M$LO,
            DISP=SAVE );
 
%P_PCB( R=PRIVWARNCMD,
        W=WORK_AREA,
        WSZ=1024 );
 
%FPT_PRIV( FPTN=GET_SPCLMM,
           PRIV=%PR_SPCLMM#,
           AUTH=YES );
 
%FPT_PRIV( FPTN=GET_EXMM,
           PRIV=%PR_EXMM#,
           AUTH=YES );
 
%FPT_ERRMSG( FPTN=TELL_ERROR,
             STCLASS=STATIC,
             BUF=WORK_AREA,
             OUTDCB1=M$DO );
 
%FPT_WRITE( FPTN=TELL_BLANKS,
            DCB=M$LO,
            BUF=BLANKS );
 
 /***
  *** BASED
  ***/
 
%F$DCB;
%B$TCB;
%B$ALT;
DCL NCHARS CHAR(N) BASED CALIGNED;
%PARSE$OUT(STCLASS=BASED);
%PARSE$SYM(STCLASS=BASED);
 
/********************/
 
   CALL M$SPRIV( GET_SPCLMM )
    WHENALTRETURN DO;
      CALL ALTERR;
      END;
 
   PRIV = '777777777777'O;
   PPRIV = '777777777777'O;
   RESET = '0'B;
   SYSID = 0;
 
   DO PRIVTYPEX=0 TO 5;
      WARN_PRIV(PRIVTYPEX) = '0'B;
      RESET_WARN_PRIV(PRIVTYPEX) = '0'B;
      END;
 
   P_PCB.NCHARS = B$JIT$->B$JIT.CCARS - B$JIT.CCDISP;
 
   IF P_PCB.NCHARS <= 0
    THEN DO;                            /* Default to all AUTH                */
      WARN_PRIV(2) = '777777777777'O;
      END;
    ELSE DO;
      P_PCB.TEXT$ = PINCRC( ADDR(B$JIT$->B$JIT.CCBUF), B$JIT$->B$JIT.CCDISP );
      CALL X$PARSE( P_PCB )
       WHENALTRETURN DO;
         TELL_ERROR.CODE_ = VECTOR(P_PCB.ERROR);
         CALL M$ERRMSG( TELL_ERROR );
         CALL M$ERR;
         END;
 
      DO NODEX=0 TO P_PCB.OUT$->OUT$BLK.NSUBLKS-1;
         SUBLK$ = P_PCB.OUT$->OUT$BLK.SUBLK$(NODEX);
         PRIVTYPEX = SUBLK$->OUT$BLK.CODE;
         DO CASE(PRIVTYPEX);
          CASE(0);                      /* PPRIV                              */
            IF SUBLK$->OUT$BLK.NSUBLKS > 0
             THEN DO;
               SUBLK$ = SUBLK$->OUT$BLK.SUBLK$(0);
               PPRIV = '0'B;
               DO I=0 TO SUBLK$->OUT$BLK.NSUBLKS-1;
                  CODE = SUBLK$->OUT$BLK.SUBLK$(I)->OUT$BLK.CODE;
                  PPRIV.WBIT(CODE) = '1'B;
                  END;
               END;
            WARN_PRIV(0) = PPRIV;
            RESET_WARN_PRIV(0) = RESET;
          CASE(1,2,3,4,5);              /* ACTIVE, AUTH, JOB, PRC, SAVED      */
            IF SUBLK$->OUT$BLK.NSUBLKS > 0
             THEN DO;
               SUBLK$ = SUBLK$->OUT$BLK.SUBLK$(0);
               PRIV = '0'B;
               DO I=0 TO SUBLK$->OUT$BLK.NSUBLKS-1;
                  CODE = SUBLK$->OUT$BLK.SUBLK$(I)->OUT$BLK.CODE;
                  PRIV.WBIT(CODE) = '1'B;
                  END;
               END;
            WARN_PRIV(PRIVTYPEX) = PRIV;
            RESET_WARN_PRIV(PRIVTYPEX) = RESET;
          CASE(6);                      /* RESET                              */
            RESET = '1'B;
          CASE(7);                      /* LEAVE                              */
            RESET = '0'B;
          CASE(8);                      /* SYSID                              */
            CALL CHARBIN( SYSID, SUBLK$->OUT$BLK.SUBLK$(0)->OUT$SYM.TEXT );
          END;
         END;
      END;
 
   RESET = '0'B;
   PRIVTYPEX = 0;
   DO WHILE( PRIVTYPEX <= 5 );
      IF RESET_WARN_PRIV(PRIVTYPEX)
       THEN DO;
         CALL M$SPRIV( GET_EXMM )
          WHENALTRETURN DO;
            CALL ALTERR;
            END;
         PRIVTYPEX = 5;
         RESET = '1'B;
         END;
      PRIVTYPEX = PRIVTYPEX + 1;
      END;
 
   IF RESET
    THEN DO;
      CALL M$SPRIV( GET_EXMM )
       WHENALTRETURN DO;
         CALL ALTERR;
         END;
      END;
 
   CALL M$OPEN( OPEN_LO );
   M$LO$ = DCBADDR(DCBNUM(M$LO));
   OUTPUT_WIDTH = M$LO$->F$DCB.WIDTH#;
   IF OUTPUT_WIDTH > 132
    THEN OUTPUT_WIDTH = 132;
    ELSE IF OUTPUT_WIDTH <= 0
       THEN OUTPUT_WIDTH = 72;
 
   CALL DAM$INIT;
 
   DO USER = 1 TO DA_MUAIS;
      CALL DAM$MAP(B$JIT$,USERJIT$,-USER,0)
       WHENRETURN DO;
         IF USERJIT$->B$JIT.USER >= 14  /* Ignore system ghosts               */
          THEN IF SYSID = 0
             THEN CALL CHECKPRIVS;
             ELSE IF SYSID = USERJIT$->B$JIT.SYSID
                THEN CALL CHECKPRIVS;
         END;
      END;
 
   CALL M$CLOSE( CLOSE_LO );
   RETURN;
 
ALTERR: PROC;
 
   TELL_ERROR.CODE_ = VECTOR(B$TCB$->B$TCB.ALT$->B$ALT.ERR);
   CALL M$ERRMSG( TELL_ERROR );
   CALL M$ERR;
 
END ALTERR;
 
%EJECT;
CHECKPRIVS: PROC;
 
 /***
  *** STATIC
  ***/
 
DCL 1 PRIV_ON_MSG STATIC,
      2 ACCN CHAR(8) CALIGNED,
      2 * CHAR(0) CALIGNED INIT(','),
      2 UNAME CHAR(12) CALIGNED,
      2 * CHAR(0) CALIGNED INIT(' '),
      2 MODE CHAR(1) CALIGNED,
      2 * CHAR(0) CALIGNED INIT(' '),
      2 SYSID CHAR(6) CALIGNED,
      2 * CHAR(0) CALIGNED INIT(' .'),
      2 USER CALIGNED,
        3 C(0:2) UBIN BYTE CALIGNED,
      2 * CHAR(0) CALIGNED INIT(' '),
      2 STEP CHAR(1) CALIGNED,
      2 CCBUF CHAR(20) CALIGNED;
DCL 1 WHICH_PRIVS_MSG STATIC,
      2 TYPEINFO,
        3 * CHAR(0) CALIGNED INIT('   '),
        3 PRIV_TYPE CHAR(15) CALIGNED,
        3 * CHAR(0) CALIGNED INIT(' '),
      2 PRIVNAMES CHAR(200);
DCL PRIVX SBIN STATIC;
DCL OUTPUTX SBIN STATIC;
DCL OUTPUT$ PTR STATIC;
DCL 1 PRIV_ON STATIC,
      2 WBIT(0:35) BIT(1) UNAL;
DCL SAID_ACCOUNT BIT(1) ALIGNED STATIC;
DCL IX SBIN STATIC;
DCL TEMP SBIN STATIC;
DCL USERNO SBIN STATIC;
DCL 1 USER REDEF USERNO,
      2 *(0:2) UBIN BYTE CALIGNED,
      2 O(0:2) UBIN(3) UNAL;
 
 /***
  *** CONSTANT
  ***/
 
DCL PRIV_TYPE(0:5) CHAR(15) CONSTANT INIT(
  'PPRIV', 'PRIV.ACTIVE', 'PRIV.AUTH',
  'PRIV.JOB', 'PRIV.PRC', 'PRIV.SAVED' );
DCL NAMESPACER CHAR(0) CONSTANT INIT(', ');
 
 /***
  *** FPT
  ***/
 
%FPT_WRITE( FPTN=TELL_PRIV_ON_MSG,
            DCB=M$LO,
            BUF=PRIV_ON_MSG );
 
%FPT_WRITE( FPTN=TELL_WHICH_PRIVS_MSG,
            DCB=M$LO,
            BUF=WHICH_PRIVS_MSG );
 
/********************/
 
 
   SAID_ACCOUNT = '0'B;
 
   DO PRIVTYPEX = 0 TO 5;
      DO CASE(PRIVTYPEX);
       CASE(0);
         PRIV_ON = USERJIT$->B$JIT.PPRIV & WARN_PRIV(0);
       CASE(1);
         PRIV_ON = USERJIT$->B$JIT.PRIV.ACTIVE & WARN_PRIV(1);
       CASE(2);
         PRIV_ON = USERJIT$->B$JIT.PRIV.AUTH & WARN_PRIV(2);
       CASE(3);
         PRIV_ON = USERJIT$->B$JIT.PRIV.JOB & WARN_PRIV(3);
       CASE(4);
         PRIV_ON = USERJIT$->B$JIT.PRIV.PRC & WARN_PRIV(4);
       CASE(5);
         PRIV_ON = USERJIT$->B$JIT.PRIV.SAVED & WARN_PRIV(5);
       END;
 
      IF PRIV_ON
       THEN DO;
         IF NOT SAID_ACCOUNT
          THEN DO;
            PRIV_ON_MSG.ACCN = USERJIT$->B$JIT.ACCN;
            PRIV_ON_MSG.UNAME = USERJIT$->B$JIT.UNAME;
            CALL SEARCH( IX, TEMP, NONBLANKTBL, USERJIT$->B$JIT.CCBUF )
             WHENALTRETURN DO;
               IX = 0;
               END;
            PRIV_ON_MSG.CCBUF = SUBSTR( USERJIT$->B$JIT.CCBUF, IX );
            CALL BINCHAR( PRIV_ON_MSG.SYSID, USERJIT$->B$JIT.SYSID );
            USERNO = USERJIT$->B$JIT.USER;
            DO I=0 TO 2;
               PRIV_ON_MSG.USER.C(I) = USER.O(I) + ASCBIN('0');
               END;
            DO CASE( USERJIT$->B$JIT.MODE );
             CASE(%M_BATCH#);
               PRIV_ON_MSG.MODE = 'B';
             CASE(%M_GHOST#);
               PRIV_ON_MSG.MODE = 'G';
             CASE(%M_INT#);
               PRIV_ON_MSG.MODE = 'O';
             CASE(%M_TP#);
               PRIV_ON_MSG.MODE = 'T';
             END;
            IF USERJIT$->B$JIT.CPFLAGS1 & %CP_JSTEP#
             THEN PRIV_ON_MSG.STEP = '!';
             ELSE PRIV_ON_MSG.STEP = ' ';
            CALL M$WRITE( TELL_PRIV_ON_MSG );
            SAID_ACCOUNT = '1'B;
            END;
 
         WHICH_PRIVS_MSG.TYPEINFO.PRIV_TYPE = PRIV_TYPE(PRIVTYPEX);
         DO CASE(PRIVTYPEX);
          CASE(0);
            CALL LISTPRIVS( PPRIVNAME, PPRIVNAMEL );
          CASE(ELSE);
            CALL LISTPRIVS( PRIVNAME, PRIVNAMEL );
          END;
         IF RESET_WARN_PRIV(PRIVTYPEX)
          THEN DO;
            DO CASE(PRIVTYPEX);
             CASE(0);
               USERJIT$->B$JIT.PPRIV = USERJIT$->B$JIT.PPRIV & ~WARN_PRIV(0);
             CASE(1);
               USERJIT$->B$JIT.PRIV.ACTIVE = USERJIT$->B$JIT.PRIV.ACTIVE & ~WARN_PRIV(1);
             CASE(2);
               USERJIT$->B$JIT.PRIV.AUTH = USERJIT$->B$JIT.PRIV.AUTH & ~WARN_PRIV(2);
             CASE(3);
               USERJIT$->B$JIT.PRIV.JOB = USERJIT$->B$JIT.PRIV.JOB & ~WARN_PRIV(3);
             CASE(4);
               USERJIT$->B$JIT.PRIV.PRC = USERJIT$->B$JIT.PRIV.PRC & ~WARN_PRIV(4);
             CASE(5);
               USERJIT$->B$JIT.PRIV.SAVED = USERJIT$->B$JIT.PRIV.SAVED & ~WARN_PRIV(5);
             END;
            END;
         END;
      END;
 
   IF SAID_ACCOUNT THEN CALL M$WRITE( TELL_BLANKS );
 
   RETURN;
%EJECT;
LISTPRIVS: PROC( PRIVNAME, PRIVNAMEL );
 
 /***
  *** Parameters
  ***/
 
DCL PRIVNAME(0:0) CHAR(10);
DCL PRIVNAMEL(0:0) SBIN;
 
/********************/
 
   OUTPUTX = LENGTHC(WHICH_PRIVS_MSG.TYPEINFO);
   DO PRIVX = 0 TO 35;
      IF PRIV_ON.WBIT(PRIVX)
       THEN DO;
         N = PRIVNAMEL(PRIVX);
         IF OUTPUTX + N + LENGTHC(NAMESPACER) > OUTPUT_WIDTH
          THEN DO;
            TELL_WHICH_PRIVS_MSG.BUF_.BOUND = OUTPUTX - 1;
            CALL M$WRITE( TELL_WHICH_PRIVS_MSG );
            WHICH_PRIVS_MSG.TYPEINFO.PRIV_TYPE = ' ';
            OUTPUTX = LENGTHC(WHICH_PRIVS_MSG.TYPEINFO);
            END;
         OUTPUT$ = PINCRC(ADDR(WHICH_PRIVS_MSG),OUTPUTX);
         OUTPUT$->NCHARS = PRIVNAME(PRIVX);
         OUTPUTX = OUTPUTX + N + LENGTHC(NAMESPACER);
         OUTPUT$ = PINCRC( OUTPUT$, N );
         N = LENGTHC(NAMESPACER);
         OUTPUT$->NCHARS = NAMESPACER;
         END;
      END;
   TELL_WHICH_PRIVS_MSG.BUF_.BOUND = OUTPUTX - 1 - LENGTHC(NAMESPACER);
   CALL M$WRITE( TELL_WHICH_PRIVS_MSG );
 
   RETURN;
 
END LISTPRIVS;
 
END CHECKPRIVS;
 
END PRIVWARN;
