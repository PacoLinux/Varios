 
NSRELAY - A server that relays TCP/IP etc:hosts file lookups to another system
          as Domain Name Service queries.
 
Usage: !NSRELAY [-D] [-T] [-HB | -HA] [-Sx.y.z]... ipaddr [ipaddr]...
 
Each ipaddr is an IP address, in dot notation, that identifies a remote system
running the Domain Name Service.
Option -D enables the display of low-level debugging information.
 
Option -T forces the use of TCP stream sockets rather than the default UDP
datagram sockets.
 
Option -HB causes NSRELAY to consult etc:hosts BEFORE querying the remote
system(s).  See the LOOKUPS topic for more.  See the ADVICE topic for caveats.
 
Option -HA causes NSRELAY to consult etc:hosts AFTER querying the remote
system(s).  See the LOOKUPS topic for more.
 
Each -S option supplies a domain suffix for lookups of non-fully-qualified
system names.  If a system name in a lookup contains one or more dots, it is
assumed to be fully-qualified and not subject to -S option(s).
The clients of NSRELAY's service are TCP/IP applications, such as FTP, Telnet,
or any application linked with :ETC_SOCKET.  As of release A00 of CP-6 TCP/IP,
applications that invoke the gethostbyname() and gethostbyaddr() Socket
Library functions, or their PL6 equivalents, can make use of NSRELAY's service
automatically.  If NSRELAY is not running, both functions consult the local
hosts file, etc:hosts.:SYS.  If NSRELAY IS running, both functions communicate
with NSRELAY, which may then consult etc:hosts and/or one or more remote
systems depending on how NSRELAY was started.  The Socket Library's use of
NSRELAY is transparent to applications.
Help file for NSRELAY.X
 ***********************************************************
 *                                                         *
 *  Copyright (c) Bull HN Information Systems Inc., 1994   *
 *                                                         *
 ***********************************************************
If the -HB option (etc:hosts BEFORE DNS) is specified, you might want to keep
your etc:hosts file as short as possible.  The reason is to avoid slowing down
every lookup with the linear search and parse of etc:hosts that -HB specifies.
 
The Socket Library's gethostbyname() and gethostbyaddr() functions return a
pointer to a hostent structure if successful.  Otherwise they return a NULL
pointer and set errno to ENOENT.  When NSRELAY is running, there are other
kinds of errors reported besides ENOENT.  FTP and Telnet will print the error
message text of these other errors, which may confuse your users.  You can
avoid this by specifying the -HA option.  This will cause any unsuccessful
remote lookup to be followed by a search of etc:hosts, which returns only
ENOENT on errors.
 
NSRELAY communicates with its clients through a comgroup.  As distributed, the
name of the comgroup is NAMESERCG.:SYS.  You can easily enough change the
filename or account by modifying the source.  If you do this, you must also
RUM FTP and TELNET so these applications can find the comgroup.  The
:ETC_SOCKET library must also be PLOVER'd so applications linked with it can
find the comgroup.
 
If for some reason use of NSRELAY causes your FTP, Telnet, or other TCP/IP
application to fail to reach remote systems that they could without NSRELAY,
just refrain from running NSRELAY until the problem can be identified and
solved.  You could also delete NSRELAY's comgroup, but that's not necessary.
 
You might wish to obtain RFC 1035, "Domain Names - Implementation and
Specification", for background on the DNS protocol.  There's also RFC 1034,
"Domain Names - Concepts and Facilities" for the truly interested.
09/21/94 MAG
Submitted to LADC X account.
UDP datagram operation has not been verified.  Use -T to force TCP stream
operation if necessary.
 
Not all information obtained from Domain servers is returned to the
application.  Aliases and the network addresses (other than the first one) of
multihomed hosts are not returned.
 
Failure recovery is minimal.  FEP crashes, DNS crashes, and network outages
will probably confuse NSRELAY.
Here's how NSRELAY handles a gethostbyname() lookup.  Assume that NSRELAY's
client application has supplied a hostname and wants the host's address.
 
If -HB was specified, etc:hosts is searched for hostname (without -S domain
suffix(es)).  If found, the host's address is returned to the client.
 
Otherwise, the lookup request is converted to a DNS 'A' query and NSRELAY
attempts to get a definite 'known' or 'not known' answer from one of the
remote systems specified in its startup.  The exact sequence is: for each
remote system, for each domain suffix specified with -S options, for some
number of tries, attempt to get a definite answer.  If no answer is received
for an attempt, another attempt is made per the sequence given above.  NSRELAY
waits some number of seconds between attempts.  When a definite answer is
received, the next step depends on the answer itself.  If it's a 'known', it
is returned to the client.  If it's a 'not known', the next domain suffix is
tried or the next remote system is queried.
 
If none of the remote systems answer 'known', or if no remote system has given
a definite answer at all (highly unlikely unless bogus ipaddrs were specified
or the FEP or network has failed), then if -HA was specified, etc:hosts is
searched for hostname (again without -S domain suffix(es)).  If found, the
host's address is returned to the client.
 
Otherwise, an error indication is returned to the client.
Client application gethostbyaddr() lookups are handled similarly.  Assume the
client has supplied a host's address and wants the hostname.
 
If -HB was specified, etc:hosts is searched for a matching host address.  If
found, the corresponding hostname is returned to the client.
 
Otherwise, the lookup request is converted to a DNS 'PTR' query and NSRELAY
attempts to get a definite 'known' or 'not known' answer from one of the
remote systems specified in its startup.  The exact sequence is: for each
remote system, for some number of tries, attempt to get a definite answer.  If
no answer is received for an attempt, another attempt is made per the sequence
given above.  NSRELAY waits some number of seconds between attempts.  When a
definite answer is received, the next step depends on the answer itself.  If
it's a 'not known', the next remote system is queried.  If it's a 'known', the
answer contains a hostname.  The client's original gethostbyaddr() request is
then transformed into a gethostbyname() request specifying this hostname.  The
request is converted into a DNS 'A' query and NSRELAY starts the DNS querying
process over again.  (The reason for this is that 'A' queries return much more
information than 'PTR' queries, and it was a design goal for NSRELAY to return
all information available on a host lookup regardless of the type of lookup.)
 
If none of the remote systems answer 'known', or if no remote system has given
a definite answer at all (highly unlikely unless bogus ipaddrs were specified
or the FEP or network has failed), then if -HA was specified, etc:hosts is
searched for a matching host address.  If found, the corresponding hostname is
returned to the client.
 
Otherwise, an error indication is returned to the client.
Mark Geisert, LADC
NSRELAY.X
AID=SYSTEM_MANAGEMENT
TOOL=NSRELAY
A server that relays TCP/IP etc:hosts file lookups to another system as Domain
Name Service queries.
