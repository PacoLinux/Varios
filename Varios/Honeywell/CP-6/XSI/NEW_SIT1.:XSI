 
.SRV SHORT_DATE "860509"
.SRV RELEASE_DATE "May 9, 1986"
.SRV TITLE "ACCOUNT X"
.SRV SECTION "2.2"
.SRV AUTHOR "J. JOSEPH;249"
.SRV DOCUMENT "0384E-0"
..:ARF "A"
.TRF ^
 
OVERVIEW
.brf
--------
.spb 1
The "X^account", as it is generically known, is a collection of
unsupported utilities, tools, prototype products and toys that are
packaged and shipped (currently free of charge) to customers.
.spb 1
This document details the mechanical operations of the "X^account",
including maintenance procedures, file management accounts used,
required naming conventions and file contents, and other assorted
"X^account" related information.
.spb 2
GLOSSARY
.brf
--------
.spb 1
For the purposes of this document, all entities in the X^account,
regardless of origin or purpose, are called "TOOLS".
.spb 1
Also for purposes of this document, the phrase "people at LADC"
includes CP-6 project programmers whose offices are in Los Angeles
or in Phoenix, and any Marketing Software Support Services personnel
whose offices are in Los Angeles (i.e. NSS/CP-6).  Heck, these days,
it also includes the TAC and Benchmark Services personnel.
.spb 2
THE X ACCOUNT - SOME HISTORY AND BACKGROUND INFORMATION
.brf
-------------------------------------------------------
.spb 1
The "X^account" migrated, in name and in purpose, from CP-V.
.spb 1
The letter "X" was chosen for its "mysterious" flavor and
"X-perimental" implications.  (It's also easy to type.)
.spb 1
The purpose of the X^account is to provide a common tool crib for
CP-6 programmers and the CP-6 Control Group.  It is maintained in
its executable form on both production machines at LADC.  The
X^account is a vehicle to share a programmer's efforts in tool
building.  Any changes made to a tool automatically get reflected on
all machines.  The X^account is also a vehicle by which tools get
distributed to the customers, since it is included on CP-6 release
tapes.  Additionally, the "X^account" serves as a repository for the
source and documentation for the tools.  Because it is a controlled
mechanism, anyone at LADC can update a tool, create a new tool,
create a new tool based on an old tool, or just use the X^account as
a reference for "how to" tips on programming on CP-6.  Having the
source and tools in a single place also eliminates redundant disk
storage requirements when people have their own copies of tools and
tool source.  It also reduces the amount of programmer memory
required to remember "where all the tools are".
.spb 1
Since no money is exacted from a customer for the X^account, it is
officially considered "unsupported".  However, this basically
removes the requirement to send the customer patches or source fixes
when (or if) a customer determines that something is broken.
Programmers submitting tools to the X^account are expected to fix
whatever bugs are found in their tools in a timely fashion.  All
complaints against the X^account are supposed to be starred at
severity^"D", although older complaints have been starred at
severity^5.
.spb 1
The X^account is controlled, maintained, and integrated by a
volunteer from among the programmers at LADC.  This person has come
to be known colloquially as "Captain^X".  At the time of this
writing, "Captain^X" is the author of this document.
.spb 1
The X^account is fluid, a constantly changing collection of programs
and techniques.  Everyone at LADC is expected to recognize when a
program or technique has general interest, and is expected to take
the extra few steps necessary to turn that program or technique into
an X^account tool.
 
.cbm
Very importantly: ALL Control Group tools are expected to live in
the X account.  In the past, a programmer has kept "just this one
tool" in his account, then left the company, leaving behind no tool
and no way to recreate it.  If you have a tool that is to be used by
the Control Group, it MUST be in the X account.  No exceptions.
.cbf
.brp
CONTENTS
.brf
--------
.spb 1
The majority of the tools in the X^account are used in various ways
at LADC; there are programming aids, integration aids, documentation
generation aids, and field support aids.
.spb 1
There are also some "prototype products"; that is, a tool or group
of tools that has been developed at LADC that eventually wants to be
called a "product".  However, this "product" doesn't necessarily
have a PLN (catalog number) because it hasn't been officially
"approved" by our marketing organization yet.  The "X^account" is a
release and distribution mechanism for these prototype products
without requiring a PLN, giving customers the product for their
personal use and enjoyment, and also giving the product an
unofficial "Beta test".  Products released in this manner must be
carefully selected; there are special considerations to keep in mind
when a product moves from "free" (in the X^account) to "costs bucks"
(separately priced software).
.spb 1
There are also some "toys" in the X^account.  "Toys" are just well
oiled, interesting programs that could have some general interest.
The X^account gives the toy's originator a central place to keep the
toy's source and to share the toy's run unit.  Currently, things
that fall into the "toy" category are the microprocessor assemblers
and disassemblers, and things like COPYPGM, PIXEL and ASMDAL.
.brp
ORGANIZATION
.brf
------------
.spb 1
Several file management accounts are actually used in the
maintenance of the "X^account".
.spb 1
X
.spb 1
The account^X contains the tools (without schema), needed data
files, and associated (compressed) HELP files for the tools.  A file
management account called X^exists on both the LADC L66A and L66B.
Tools and their HELP files are copied into the X^account after they
are successfully integrated.  Contrary to popular belief, the files
of this account are NOT what is shipped to the customers on the
TOOLS tape set.
.spb 1
:XSI
.spb 1
The account :XSI contains the program source, HELP file source, job
control commands, and basically everything that is needed to create
the X^account tools.  All elements of every product are in this
account (see EXCEPTIONS, below).  This account lives only on the
LADC L66B machine.  This account is the account sent to the users on
the EFT TOOLS tape set (CP6T1 thru CP6Tn) when they purchase a major
release of the operating system.
.spb 1
:XTUI
.spb 1
Updates to X^account tools are made in standard fashion (via update
packets against the source in^.:XSI) in this account.  This account
lives only on the LADC L66B machine.
.spb 1
:XTSI, :XUI, :XTEMP
.spb 1
These are all accounts used for integrating the X^account tools.
One special note: the account :XTSI contains the PREVIOUS version of
an X^account tool that's just been integrated.  These "old" versions
usually remain in this account for about a week.  These accounts all
live on the LADC L66B machine.
.spb 1
:XMISC
.spb 1
The account :XMISC contains special JCL, history logs, tracker files
and other information necessary to perform X^account integrations at
LADC.  It lives only on the LADC L66B machine, and is not shipped to
customers.
.brp
FILE NAMING CONVENTIONS and FILE CONTENTS
.brf
-----------------------------------------
.spb 1
Naming conventions have been established that make the maintenance
of the X^account easier and faster.  When submitting new tools to
the X^account, please use these conventions.
.spb 2
toolname_CRU
.brf
------------
.spb 1
CRU stands for "create run unit".  toolname_CRU files contain the
IBEX commands necessary to create the executable tool.  Note that
the tool need not be a run unit.  It could be a APL workspace, a
BASIC workspace, or an IBEX XEQ file.  Regardless, ALL TOOLS HAVE A
CRU FILE IN^.:XSI.  The existence of the CRU file is used by the
X^account packaging process to establish the existence of a tool and
MUST EXIST.  For most "standard" tools, the CRU contains the
commands necessary to compile and link the tool from the source
files existing in^.:XSI.  LINK commands MUST include B_COPYRIGHT!
Please check out other CRU files for how to create a CRU file BEFORE
submitting a tool to the X^account.
.spb 1
Here is a sample toolname_CRU file taken from the :XSI account:
.spb 1
.fif
!DEFAULT SIACCT=:XSI,GNACCT=:XSI,LBACCT=:LIBRARY,XACCT=:XSI
!JOB WSN=LOCAL,NAME=TUNA_CRU
!RESOURCE TIME=5,MEM=256
!PL6 TUNA_SI61.SIACCT OVER *TUNA_OU61.GNACCT,LP (NSYS,SCHEMA,SR(.LBACCT))
!PARTRGE TUNA_SIN1.SIACCT OVER *TUNA_OUN1.GNACCT,LP (NSYS,SR(.SIACCT))
!LINK B_COPYRIGHT.XACCT, ;
     *TUNA_OUN1.GNACCT,;
     *TUNA_OU61.GNACCT ;
     OVER TUNA.GNACCT(IP=50,DP=10,STDINVOC,DCB1=M$SI,DCB3=M$OU)
.fin
.spb 1
Note that all object units are generated as star files; this is
ALWAYS done with X^account tools.  Since the OU's may be regenerated
at any time simply by re-compiling the source, the object units for
X^account tools are never kept.  (Exception: proprietary OU's
necessary to relink X^account tools; see toolname_OUpn, below.)
.spb 2
toolname_SIpn
.brf
-------------
.spb 1
SI stands for "source input".  p is a one-character identifier of a
processor (compiler) to use for processing this source.  n is a
numeric identifier used to distinguish different files using the
same processor.  p is mandatory.  n is mandatory.
.spb 1
The single character p must be one member of the following list:
.bbk
.fif
.spb 1
     6    indicates PL-6 source input
     A    indicates APL source input
     B    indicates BASIC source input
     C    indicates COBOL source input
     F    indicates FORTRAN source input
     G    indicates GMAP source input
     H    indicates HELP file (HERMAN) source input
          (this is a special case, discussed below)
     I    indicates IBEX source input (XEQ files)
     K    indicates PASCAL source input
     N    indicates PARTRGE parse [N]odes
          (n.b. older tools may have used SIP for parse nodes)
     S    indicates SUPER source input
     T    indicates TEXT source input or
          TEMPLAT source input
.spb 1
EXAMPLES:
.spb 1
TUNA_SIN1      is TUNA's parse nodes
PILOT_SIF4     is PILOT's fourth FORTRAN source module
.fin
.be
.spb 1
More clever readers will have noticed that this table bears an
uncanny (although not exact) resemblance to the file types
discussion under M$OPEN and M$DCB in the Monitor Services Reference
Manual.
.spb 1
All toolname_SI6n files and toolname_SINn files MUST have a /*M*
record as the first record of the file.  toolname_SI6n files should,
if possible, have a /*M* record before each subroutine (PROC).  All
FORTRAN main programs MUST have a PROGRAM statement.
.spb 1
All source input MUST contain an appropriate Bull trademark
notice.  TIDY.X will insert trademark notices in FORTRAN programs
upon request.  FORMAT.X will insert trademark notices in PL6
programs, INCLUDE files and PARTRGE command files upon request.  No
source will be accepted that does not have a trademark notice.
.spb 1
.bbk
Here is an example of a trademark notice for FORTRAN:
.spb 1
.fif
C*T***********************************************************
C*T*                                                         *
C*T* Copyright (c) Bull HN Information Systems Inc., 1989    *
C*T*                                                         *
C*T***********************************************************
.spb 1
.be
.bbk
And here is one for a PL-6 program:
.spb 1
/*T***********************************************************
 *T*                                                         *
 *T* Copyright (c) Bull HN Information Systems Inc., 1989    *
 *T*                                                         *
 *T***********************************************************/
.fin
.be
.spb 1
While it is not mandatory, it is suggested that toolname_SI6n,
toolname_C6n, and toolname_SINn files have a /*X* record in them
that is acceptable to the tool's submitter, since all these files
are run through the formatter as part of the X^account integration
process.  Submitters should also be aware that the source file they
submit MAY BE ALTERED in X^account integrations; only X^account
integration listings should be used as references for generating
updates.
.spb 2
toolname_Cpn
.brf
------------
.spb 1
C ostensibly means "constants".  toolname_Cpn files are INCLUDE,
COPY, READ, or whatever else is appropriate to the language
involved.  p is whatever processor (compiler) will be doing the
INCLUDEing, COPYing, or whatever, and must be a member of the above
processor list.  p is mandatory.  n is a numeric identifier used to
differentiate this INCLUDE file from any other INCLUDE file.  n is
mandatory.
.fif
.spb 1
EXAMPLES:
.spb 1
TIDY_CF1       is TIDY's first FORTRAN INCLUDE file
PILOT_C62      is PILOT's second PL-6 INCLUDE file
.fin
.spb 2
toolname_OUpn
.brf
-------------
.spb 1
OU means "object unit".  toolname_OUpn files are object units
required to link certain X^account tools.  These toolname_OUpn files
are generally exceptions.  They are usually proprietary object units
or contain special algorithms which Bull HN deems to be of a
highly sensitive nature.  The encryption algorithm in MOVE.X was an
example of one module that fell into this category.  While it is
acceptable to link a tool with proprietary OU's, it is encouraged
that they be gotten from the .:LIBRARY account.  If the proprietary
OU's a tool needs to link with aren't in the .:LIBRARY account,
maybe they should be.  Check with a Control Group representative or
the Captain^X for a judgment here.
.spb 2
.bbk
toolname_SIH1
.brf
-------------
.spb 1
H stands for "HELP".  toolname_SIH1 files are source files used as
input to HERMAN.X, the tool that creates HELP files (for use with
the IBEX !HELP command).
 
When writing a HELP file for your tool, keep these thoughts in
mind:
 
1) an X^account HELP file is usually the only documentation for that
product.  It must be complete, readable, easy to understand, and
follow some sort of structure.  That structure is:
 
 .*M*
 HELP file for x.X
 .*T*
  trademark notice
 .*A*
  abstract: a simple statement of function.
 .*B*
  Invocation syntax, including command line options
 .*B*
  Complete discussion of tool function
 .*K*
  Let the topics begin!
 .*K* OWNER
  ..
 .*K* XINDEX
 Special information used to create the XINDEX.X
 cross-reference help file.
 .*K* XINDEX_ABSTRACT
 TOOL=x
 .*R*
 Single sentence description of tool function.
 .*K* CHANGES Changes changes
  ..
 
Lots of information needs to be included. Examples and descriptions
of which DCBs are used for what are especially useful.  More
explanation of this format can be found below.
 
2) the writer of the X account HELP file must assume that a person
is reading the HELP file for 2 kinds of information:
 
     - what the tool does
 
     - how to use it
 
both kinds of information should be readily available.
 
Additionally, the writer of the X^account HELP file must assume that
the reader KNOWS NOTHING ABOUT THE PRODUCT.  In the past, some HELP
files reflected the designer's thought patterns, design criteria and
knowledge of function, rather than a complete and clear description
of how the tool works and why anyone would want to use it.  HELP
files of this nature will require conformance prior to tool
acceptance in the future.
 
3) the writer of an X^account HELP file must be aware that the HELP
file will be extracted into an "X^account reference manual" at some
point in the future.  Many users already get an "X^account reference
manual" by using the tool LISTHELP.X.  Therefore, it must be
readable, from top to bottom, like the chapters of a book.
Therefore, more effort must be made than simply to "make a HELP
file", using topics as a substitute for structure.  The HELP file
must also be readable as a running description of the product.
 
4) the writer of the X^account HELP file is the ONLY WRITER assigned
to that writing task.  It will not be picked up by a trained, paid,
technical writing professional and worked over for clarity and
completeness.  Therefore, the writer of the X^account HELP file must
approach that part of the project like a trained, paid, technical
writing professional.  If you have the habit of scrawling something
illegible and passing it off as documentation, it won't wash here.
 
 
 
Details of HELP file internals
.brf
------------------------------
.spb 1
Each toolname_SIH1 file must start out like this:
.brf
 [^stuff in brackets gets filled in by you^]
.be
.spb 1
.fif
.bbk
^.*M*
^HELP file for: [toolname].X
^.*T*
^ **************************************************************
^ *                                                            *
^ *  Copyright (c) Bull HN Information Systems Inc., 1989      *
^ *                                                            *
^ **************************************************************
^.*A*
^[a one sentence abstract of the tool's function.]
^.*B*
^[invocation syntax]
.fin
.be
.spb 1
The rest of the file must be organized into a readable running
description of the tool, so that it may be extracted into a manual
at a later date (or reads well when used in conjunction with
LISTHELP.X).  If you've never had experience with HERMAN and HELP
files, check !HELP (HERMAN.X).  It might also help if you check the
other toolname_SIH1 files in the^.:XSI account.
.spb 1
Each HELP file has four mandatory topics; OWNER, XINDEX,
XINDEX_ABSTRACT and CHANGES.  The owner topic is easy...it's a one
line description of who's responsible for the tool.
.fif
.spb 1
^.*K* OWNER
^[your name], LADC
.spb 1
.fin
The XINDEX topic is used to create the XINDEX HELP file in the
X^account.  It is basically a set of special commands and keywords
that help Captain^X maintain the "roadmap" to the X^account.
 
The contents of the XINDEX topic are simple.  The first record is
the toolname and where it should be invoked from.  The next few
records are used to categorize the tool into one or more of a few
known categories.  Any additional records are used as "KEYWORDS".
 
Categories are known, published names that help segregate the
X^account products into reasonable sets.  In the XINDEX topic, they
are preceeded with the string "AID=" so they can be checked for
validity in the process.  Known categories at the time of this
writing are:
 
.fin
 EDUCATIONAL        GENERAL        GRAPHICS       INTEGRATION
 MICROPROCESSOR     OFFICE_AUTOMATION             PROGRAMMING
 PROGRAMMING_LANGUAGE              PROJECT_MANAGEMENT
 SUPPORT            SYSTEM_MANAGEMENT
 SYSTEM_PROGRAMMING UTILITY
.fif
 
Note that the "_" character is mandatory.
 
Here is a sample of an XINDEX section:
.fif
 
 
 .*R*
 .*K* XINDEX
 TUNA.X
 .*R*
 AID=DOCUMENTATION
 .*R*
 AID=UTILITY
 .*R*
 TEXT_PROCESSING
 .*R*
 PRETTY_PRINTER
 .*R*
 
 
NOTE: THE .*R* RECORD MUST APPEAR BETWEEN THESE ITEMS.
 
.fin
It is very important that you try to use EXISTING "KEYWORDS" when
developing this section of the HELP file, so that when a user
types:
 
!HELP (XINDEX.X) KEYWORDS
 
The number of topics that print don't overflow a screen.  Please
look at the list of keywords BEFORE choosing your keywords.
 
 
The XINDEX_ABSTRACT topic is also simple.  It's a one sentence
description of the tool's function.  This is used to help create the
XINDEX database for the X account and to give users a quick way to
"look up" what everything in the X account does.
 
.fif
 .*K* XINDEX_ABSTRACT
 TOOL=TUNA.X
 .*R*
 TUNA munges a file so that it remains RR-EDITable on an 80 column CRT
 screen.
.fin
 
The CHANGES topic is a bit more complicated.  Between releases, the
CHANGES topic gets updated to reflect recent changes to the tool
(that includes bug fixes).  The most recent change comes first,
followed by a chronology of all the other changes.  The CHANGES
section of a toolname_SIH1 file looks something like this:
.spb 1
.fif
^.*K* CHANGES Changes changes
^840815
^.*R*
^Fixed a bug that caused a memory fault; also added the DBG option.
^See !HELP (thistool.X) DBG for more details.
^.*B*
^830214
^.*R*
^Added a suboption to the TLL option.  See !HELP (thistool.X) TLL for
^more details.
^.*R*
^830201
^.*R*
^Fixed bug in options parsing.  Now the TLL option works.
^.*R*
^830129
^.*R*
^Installed in LADC X account.
.spb 1
.fin
Now, when a user asks for !HELP on CHANGES, the session would look
something like this:
.fif
.spb 1
!HELP (thistool.X) CHANGES
^840815
^Fixed a bug that caused a memory fault; also added the DBG option.
^See !HELP (thistool.X) DBG for more details.
!?
^830214
^Added a suboption to the TLL option.  See !HELP (thistool.X) TLL for
^more details.
^830201
^Fixed bug in options parsing.  Now the TLL option works.
^830129
^Installed in LADC X account.
.fin
.spb 2
The biggest "trick" to updating the CHANGES portion of a HELP file
is remembering to
.spb 1
a) replace the OLD .*B* with a .*R*
     and
.brf
b) put a new .*B* AFTER the latest change.
.spb 1
Note that no tool will be updated without having its CHANGES topic
updated as well.
.spb 1
For those programmers who create toolname_SIH1 files from TEXT runs,
please set the defined page width (.PDW) to 79.  HELP files are best
viewed on CRTs at the maximum linewidth and a minimum number of
lines per screen.  For those who don't use TEXT to generate HELP
files, there is a technique in use, in conjunction with the tool
TUNA.X, that makes HELP files automatically be the maximum width
allowable on the screen.  See the X^account owner or files like
TUNA_SIH1.:XSI for examples.
.spb 1
Also remember that there are 24 lines on most CRT's.  When
assembling your HELP file input, .*B* records can be placed near the
24 line breaking point.
.spb 1
A final caveat: toolname_SIH1 files MUST BE HELPFUL.  If the
X^account owner can't figure out what you're trying to say, then
there's a good possibility that no one else will, either.
Non-HELPful HELP files will not be accepted in future X^account tool
submittals.
.spb 2
toolname_IDn
.brf
-----------
.spb 1
ID stands for "input data".  toolname_ID files are data files
required for toolname to work correctly.  toolname_ID files REQUIRE
THEIR OWN CRU FILES.  If you want, however, you can put required
input data directly into the run unit (see INTERESTING X ACCOUNT
CONVENTIONS, below).  See ID_ID?.:XSI for an illustration of how
this works.
.spb 2
-------------------------
.spb 2
Other X^account naming conventions will be developed and published
as needed.
.brp
NEW TOOL SUBMITTAL PROCEDURES
.brf
-----------------------------
.spb 1
How do you know that a tool you have is a good candidate for
submitting to the X^account?  Just ask yourself the question, "How
many people have I told about the tool or have asked about the
tool?"
.spb 1
If the answer is "one or two", then you know that the tool might be
a good addition to the X^account.  Remember, it might be usable at a
customer's site.
.spb 1
If the answer is "more than two", then you know that the tool is
best put in the X^account.  It will be easier to find, update,
support and best of all, more and more people will use it as time
goes on.
.spb 1
-------------------------
.spb 1
Submitting a new tool to the X^account is easy.
.spb 1
First, think of a name for your tool.  It should be short, and
preferably either tell exactly what the tool does or be a mnemonic
of what the tool does.  If it's the name of an animal, better yet.
.spb 1
Second, organize the tool's files as described under "NAMING
CONVENTIONS and FILE CONTENTS", above.  Make all the files involved
(ACC((:X?),READ)).
.spb 1
Third, test the toolname_CRU you have made by batching it off with
the correct account substitutions. (See toolname_CRU, above).
.spb 1
Fourth, using MAIL, send a mailgram to the owner of the X^account,
under the alias 'Captain^X'.  Tell Captain^X that you want to to
submit a new tool to the X^account, and include a list of the files,
what account they are in, and what machine they are on.
.spb 1
Fifth, aid in the correction of any problems that might crop up
during Captain^X's effort to install your tool in the X^account.
.spb 1
Sixth, wait for the announcement of the tool's arrival in the
X^account.
.spb 1
Seventh, check out the tool!  After all, it's got your name on it.
.spb 1
Eighth...AN IMPORTANT ONE...when the tool arrives in the X^account
and you're sure it works, DELETE YOUR OWN SOURCE FILES, HELP FILES,
RUN UNITS, ETC.  "Saving" copies of the source defeats half the
advantage of having the X^account tool in the first place!
Remember, once it's in the X^account, it may no longer exactly match
what you have in your account.
.spb 1
Ninth, mention your submittal on your status report to your
manager.  After all, you have done work that directly contributes to
the success of LADC.
.spb 1
Tenth...ANOTHER IMPORTANT ONE...Support the tool!  Since you're
mentioned as the tool's owner in the OWNER topic, you'll be getting
STARs, mailgrams and phone calls from other programmers interested
in the tool and (heaven forbid) suggesting changes and
improvements.  This is all part of the process, so be prepared for
it!
.brp
UPDATING X ACCOUNT TOOLS
.brf
------------------------
.spb 1
Updating X^account tools is even easier than submitting them.
.spb 1
Standard controlled procedures are used throughout.  All updates to
X^account tools are made with update ("plus-card") packets, as with
every other product in the CP-6 base.
.spb 1
First, determine which tool you want to update.  If you're the
tool's noted owner, fine.  If you're not, you should contact the
tool's owner to make sure you're not stomping on plans that the
tool's owner already has.
.spb 1
(One special note here.  If the tool's owner doesn't work at LADC
anymore and you want to make an update to the tool, you become the
tool's owner.)
.spb 1
Second, log on to the LADC L66B.  That's where the controlled TUI
account for the X^account is.
.spb 1
Third, use MODMOVE to gain write access to the file in^.:XTUI.
.spb 1
.fif
!MODMOVE (WR toolname_SI61.:XTUI)
.fin
.spb 1
Fourth, establish the update packet in the file you have write
access to in^.:XTUI.  MAKE SURE YOU USE THE FILE IN^.:XSI FOR
REFERENCE.  In the past, X^account submitters have used their
privately owned source to make updates to X^account products.  As
noted above, placing a tool in the X^account sometimes involves
adding or deleting lines from the source.  ALWAYS USE^.:XSI AS A
REFERENCE BASE WHEN MAKING UPDATES.
.spb 1
If you've really goofed up a tool's integration, and want to back
out all your "fixes", talk to 'Captain^X'.  The old version of the
tool can be re-compiled and linked, thus bailing you out in the
meantime.
.spb 1
toolname_SIH1 files and toolname_CRU files are updated just like
program source.  Create update packets for them just as you would
for any source unit.
.spb 1
Fifth, UPDATE THE HELP FILE.  At minimum, update the CHANGES topic
as described above.  If you don't, the tool won't get integrated.
.spb 1
Sixth, IF YOU POSSIBLY CAN, test integrate the tool yourself.  Check
it out.  A lot of "gosh that was really dumb" errors have been
integrated into the X^account lately, causing much grief.  People
depend on you to make GOOD UPDATES.
.spb 1
Seventh, WHEN ALL THE UPDATES ARE DONE, use MODMOVE to "DONE" the
files in^.:XTUI.
.spb 1
.fif
!MODMOVE (DONE toolname_SI61.:XTUI)
.fin
.spb 1
PLEASE do not DONE any of the files associated with a tools until
all of the updates are finished.  The X^account integration process
will go ahead and integrate your HELP file updates (if they're DONE)
and skip your PL-6 updates (if they're not DONE), thereby getting
everything out of sync.
.spb 1
Eighth, you're done...unless you're in a hurry.  If you're in a mad
rush to get the tool integrated (like if you goofed up your updates
last X^account integration), send a mailgram to the X^account owner
under the alias 'Captain^X'.  If you're not in a hurry, wait 'till
the next X^account integration.
.spb 1
Ninth, include the update activity in your status report to your
manager.  The X^account is used as a SELLING POINT throughout CP-6
marketing documents.  You've just contributed to a more versatile,
marketable system.  Congratulations!
.spb 1
Tenth, when the tool is announced as having been integrated, CHECK
IT OUT yourself.  If you're on the LADC L66A, check the birthdate of
the run unit (or the creation date of the file).  Make sure you're
testing the latest integrated version.  Often the L66B to L66A
transfer will take overnight or over-weekend.
.brp
EXCEPTIONS
.brf
----------
.spb 1
As noted above, there have been, and are, some exceptions to the
guidelines set down here.  The exceptions to the above guidelines
fall into two categories:
.spb 1
a) prototype products
.spb 1
b) conversion and migration aids
.spb 1
Prototype products require a toolname_CRU, a toolname_SIH1, and, of
course, the run unit (toolname).  Any other necessary files should
follow the X^account naming conventions.  All files are submitted
simultaneously to Captain^X, who will enter them in the appropriate
log files, guarantee that they have the appropriate trademarks and
formats, and, finally, will copy the tool and the HELP file into the
X^account. UNGMAP.X and PREPPY.X are two examples of such prototype
products.
.spb 1
Conversion and migration aids have traditionally required close
cooperation from Captain^X (such as doing a tool's integration on
the LADC L66A, because that's where all the proprietary INCLUDE
files and OU's live).  Since this is such a rare case, you should
coordinate directly with Captain^X should the situation occur.
.brp
INTERESTING X ACCOUNT CONVENTIONS
.brf
---------------------------------
.spb 1
Here is a brief collection of some "tricks" people who submit tools
to the X^account use.
.spb 1
ERROR MESSAGE FILES
.brf
-------------------
.spb 1
A quick glance will tell you that there aren't any error message
files in the X^account.  Why not?  Clever programmers, realizing
that run units are indeed keyed files, build their error message
files DIRECTLY INTO THE RUN UNITS.  Then, they use M$LM (the run
unit DCB) to get the name of the file for M$ERRMSG.  This is a
particularly clever trick; wherever the run unit lives, so does the
error message file.  See EXTRACT_CRU.:XSI for an example of how this
is done.
.spb 1
TWO TOOLS THAT DO NEARLY THE SAME THING
.brf
---------------------------------------
.spb 1
DTOR.X and DECOM.X use the SAME SOURCE FILE.  A post-link RUM step
sets a static flag that causes the tool to do one thing or another,
depending on whether it's the DTOR_CRU or the DECOM_CRU.
.spb 1
Of course, if one gets updated, the other must get updated.  Since
each tool's HELP file must be updated (CHANGES topic), the recompile
and relink happens automatically.
.brp
A DAY IN THE LIFE OF CAPTAIN X
.brf
------------------------------
.spb 1
Once a week, Captain^X's logon SETUP file lists the account^.:XTUI.
If a reasonable number of tools are marked "DONE", Captain^X logs
off and logs back on to the X^account integration account.
.spb 1
X^account integration accounts are all of the form:
.spb 1
:XMISC,100programmername,password
.spb 1
Each X^account integration account's SETUP must at least:
.spb 1
!MAIL          "Captain^X's mailbox is in .:XMISC"
.brf
[list new]
.brf
>END
.brf
and
.brf
!DIR .:XSI
.spb 1
One of the first acts Captain^X does is perform a "consistency
check" on the updates in^.:XTUI, checking for several things:
.spb 1
a) Are all the packets for a particular tool marked "DONE"?
.inl 10
.spb 1
If no, Captain^X will !MOD the DONE packets to be WR=whoever is
updating the tool
.spb 1
.inl 0
b) Does each DONE toolname_SIH1 packet update the CHANGES subject
properly?
.spb 1
.inl 10
If no, Captain^X will !MOD the DONE packets for that tool to be
WR=whoever updated the tool.  The MODMOVE tracker file in^.:XMISC
tells Captain^X who that was.
.inl 0
.spb 1
If the answer to either question is NO, the tool won't be updated.
Captain^X will send a mailgram to the updater, informing the updater
of the discrepancy.
.spb 1
Next, Captain^X cleans up the scratch account used for the
integration:
.spb 1
!PCL
.brf
<DEL ?.:XTSI(DATEM<-14)   "anything older than two weeks"
.brf
<END
.spb 2
Now,
.spb 1
!XEQ $STEP1.:XMISC
.spb 1
which produces an XEQ file (*FID) that copies the "DONE" files
from^.:XTUI to^.:XUI, deletes the copies from^.:XTUI, copies the old
version of the tool into^.:XTSI, and makes new source in^.:XSI, then
performs whatever appropriate formatting steps are necessary (as
called out in the file :LIST.:XMISC).  For example, the HELP file
creation is done in this step.
.spb 1
-------------------------
.brf
(This is the point where old tool integrations and new tool
integrations merge.)
.brf
-------------------------
.spb 1
Finally, the toolname_CRU files are batched off.
.spb 1
!A.X
.brf
:BATCH toolname_CRU       "This command is repeated for each tool"
.brf
:END
.spb 1
Captain^X then usually waits until all the batched off jobs have
completed.  When a toolname_CRU completes without errors, and the
created run unit (if any) has linked with a severity level of zero,
Captain^X will place the tool and its HELP file in the X^account,
and delete the updates and scratch files with:
.spb 1
!XEQ $LAST.:XMISC X=toolname  "repeated for each tool"
.spb 1
The last act that is performed by $LAST is to print out the CHANGES
topic for Captain^X.  If the CHANGES topic is nonexistent, or
inadequate, that means that the tool should not be installed.
Captain^X proceeds as if a compile error had occurred.
.spb 1
Note that for toolname_CRU files that do not create run units, the
output is manually checked by Captain^X to assure satisfactory
completion.
.spb 2
-------------------------
.spb 2
If any errors occur during the integration of "toolname" that
Captain^X cannot correct alone, the recovery procedure is as
follows:
.spb 1
!PCL
.brf
<CA toolname?.:XUI OVER .:XTUI(ACC(DONE))
.brf
<CA toolname_?.:XTSI OVER .:XSI(C)
.brf
<CA toolname.:XTSI OVER .:XSI
.brf
<END
.brf
!XEQ JCL:HELP.:XMISC X=toolname
.brf
!XEQ $LAST.:XMISC X=toolname
.spb 2
-------------------------
.spb 2
Finally, all the tools have been installed in the X^account or the
"bad updates" (for jobs that compile or link with errors) are back
in^.:XTUI.  It's not Miller time yet.  The final act of an X^account
integration is to announce the arrival of the new tools via MAIL.
.spb 1
!DIR .:XMISC
.brf
!MAIL
.brf
>SEND
.brf
TO:CP-6 Programmers
.brf
SUBJECT: Updated X account tools! (toolname1, toolname2, etc)
.brf
BODY: For more information on changes, type:
.spb 1
      !HELP (toolname.X) CHANGES
.spb 1
OPTIONS:end
.brf
>END
.spb 1
If it's early in the day, Captain^X might !MOVE the tool and its
HELP file to the LADC L66A.  If its evening, Captain^X will just let
the L66B to L66A EFT MOVE job move the files from the L66B to the
L66A.
.spb 1
Now, it could be Miller Time.  If all the updates were good, it is.
If they weren't, Captain^X may have to chase down the tool owner, or
get the old version of the tool back into the X^account
(from^.:XTSI).
.brp
WHAT CAPTAIN X DOES WHEN INSTALLING A NEW TOOL
.brf
----------------------------------------------
.spb 1
When Captain^X gets your note or mailgram detailing the filenames of
your tool, he'll most likely wait until the next X^account
integration to install it in the X^account (unless you indicate
otherwise).
.spb 1
Captain^X usually processes and integrates new tools before
performing update integrations.
.spb 1
Of course, the first step is for Captain^X to logon to the X^account
integration account.
.spb 1
Next, Captain^X examines your list to see if you've followed the
naming conventions (see "NAMING CONVENTIONS and FILE CONTENTS",
above).  If the naming conventions haven't been observed, Captain^X
will inform the tool's submitter, via mailgram, note or phone call
that the tool has been incorrectly submitted.
.spb 1
If the files are named all right, Captain^X will look to see if the
files are on the LADC L66B.  If they are, Captain^X will:
.spb 1
.brf
!PCL
.brf
<CA toolname_fid1.youracct OVER .(NLN,C,ACC,ACS)
.brf
     .
.brf
          "For each fid Captain^X was told about
.brf
     .
.brf
<END
.spb 1
Next, Captain^X puts the names of all the tool's files, along with
the associated formatter, into the X^account :LIST file, using the
convention already established in that file.
.spb 1
Then, Captain^X puts the tool's owner's name in the :OWNER.:XMISC
file.
.spb 1
Next, Captain^X examines every file submitted, asking a few simple
questions:
.spb 1
-------------------------
.spb 1
If it's a toolname_SI6n, toolname_C6n, or toolname_Nn file, does it
have a *M*?  Are they meaningful?
.spb 1
If it's a toolname_SI6n, toolname_C6n, or toolname_Nn file, does it
have a *X*?
.spb 1
If it's a toolname_SI6n, toolname_C6n, or toolname_Nn file, does it
have a trademark notice?
.spb 1
If it's a toolname_SIFn or toolname_CFn file, does it have a
trademark notice?
.spb 1
It it's a toolname_SIH1 file, does it have a trademark notice, a
*M*, a *A*, a *B*, a CHANGES topic, an XINDEX topic, and an OWNER
topic?  Can the toolname_SIH1 file be understood?
.spb 1
Does the toolname_CRU use star files?  Does the !LINK (if any)
include B_COPYRIGHT?  Does the !JOB card have a NAME and a WSN on
it?  Do the substitution fields match the standards?  Is the DEFAULT
line correct?
.spb 1
-------------------------
.spb 1
If the answer to any of these questions is NO, Captain^X rejects the
input by sending a mailgram to the submitter, detailing the
difficulty.
.spb 1
At this point, any difficulties are solved by standard X^account
updating methods, as the source is all in^.:XSI now.
.spb 1
Now, the source has been updated.  At this point, the PL6 source,
PL6 INCLUDE files, and PARTRGE source are formatted.  Captain^X
will:
.spb 1
!XEQ JCL:FMT.:XMISC X=toolname_SI6n "for each PL6 source file"
.spb 1
and
.spb 1
!XEQ JCL:FMT.:XMISC X=toolname_C6n "for each PL6 include file"
.spb 1
and
.spb 1
!XEQ JCL:PART.:XMISC X=toolname_SINn "for each PARTRGE node file"
.spb 1
.spb 1
Next, the new HELP file must be built. This is done when Captain^X
does this:
.spb 1
!XEQ JCL:HELP.:XMISC X=toolname
.spb 1
Note that Captain^X does NOT say X=toolname_SIH1.  That is because
this JCL assumes that the file ends in "_SIH1" anyway, and has to
build a HELP:toolname:  file as output.
.spb 1
Now, everything else is handled as if the tool had always been in
the X^account.  See the previous section where it says: "(This is
the point where old tool integrations and new tool integrations
merge.)".
.brp
WHAT CAPTAIN X DOES WHEN PREPARING THE X ACCOUNT FOR RELEASE
.brf
------------------------------------------------------------
.spb 1
When preparing the X^account for release, Captain^X logs on to the
X^account integration logon.
.spb 1
The first thing done is to update the HELP file for NEW.X.  This is
done by:
.spb 1
!L ?_CRU(C=0) INTO version_XSI.:XMISC
.spb 1
Then, using CMPR.X, Captain^X prepares a list of new and deleted
tool names by comparing the version_XSI file and the
previous_version_XSI file. Example:
.spb 1
!CMPR.X B02_XSI.:XMISC,B03_XSI.:XMISC OVER *NEW
.spb 1
Then using the CMPR output and a manual search, Captain^X manually
prepares the updates for the NEW.X tool, using the convention
already established in that tool's HELP file.  The updates are
applied, and NEW_SIH1 is processed at this point with
JCL:HELP.:XMISC.
.spb 1
Now, the big stuff starts.  A total recompilation and relinking of
everything in the X^account is done.
.spb 1
!PCL
.brf
<DEL ?.:XTSI
.brf
<CA .:XSI OVER .:XTSI
.brf
<END
.brf
!L ?_CRU.:XSI(C=0) INTO *JCL(LN)
.brf
!E *JCL
.brf
*SE;1P/BATCH /
.brf
*END
.brf
!A.X ,*JCL
.spb 1
(now, A.X will batch off all the CRU's in the X^account, and keep
track of their progress for Captain^X).
.spb 1
When all the CRU's have completed, all the tools have been
recreated.
.spb 1
Captain^X first looks at the output from an A.X run to see if any of
the jobs completed with a non-zero STEPCC.  If any did, these CRU's
are the first to be examined for why they completed that way.  Any
problems are investigated, located and corrected (in conjunction
with the tool's owner, if necessary), and the CRU is manually
rebatched.
.spb 1
After any of the previous errors are redone, Captain^X creates a
list of all the run units in the^.:XSI account and uses !SL.X to
find out the birthdate and the severity level of all the run units
in the X^account.
.spb 1
!L .:XSI(C=0,TY=R) INTO *RULIST(LN)
.brf
!E *RULIST
.brf
*SE;1P/!SL.X /
.brf
*END
.brf
!DRIBBLE OVER *RULISTO
.brf
!XEQ *RULIST
.brf
<W>
.brf
!DONT DRIBBLE
.brf
!ELBBIRD.X *RULISTO
.brf
!E *RULISTO
.brf
*FD0-9999,/Sev=0 UTS=mm//dd//yy/
.brf
               [ mm/dd/yy is the date the tool was supposed to
                    be relinked, probably today or yesterday ]
.brf
*SE;IF/Sev/;TY
.brf
*END
.spb 1
The result of the search is the number of tools that need to be
examined because they either didn't get relinked or didn't link with
a zero severity.  Once again, Captain^X works in conjunction with
the tool's owner to determine how to rectify the problems.
.spb 1
Finally, Captain^X must make sure that the CRU's for non-run unit
jobs actually have a tool in^.:XSI.
.spb 1
!C version_XSI.:XMISC TO *ALL(LN)
.brf
!E *ALL
.brf
*SE;/_CRU/S/.:XSI(A) INTO *ELSE/
.brf
*1P/L /
.brf
*END
.brf
!PCL *ALL
.brf
!E
.brf
*C *ALL
.brf
*FD0-9999,/ORG TY/,1,6
.brf
*FD0-9999,/R /,5,6       "since all the RU's were taken care of
.brf
                              above"
.brf
*FD0-9999,/mon dd 'yy/
.brf
                    "mon dd 'yy is the day the CRU is supposed to
.brf
                         have recreated the tool"
.brf
*SE;TY
.brf
*END
.spb 1
If there's anything left in the file, it's what wasn't correctly
recreated during the X^account integration.  Once again, work with
the tool's owner by Captain^X will solve any problems.
.spb 1
At this point, if all the work necessary to straighten out
error-prone tools has been corrected, the^.:XSI account should be
ready to test.  Captain^X puts the new tools on the live system for
at least two weeks to guarantee that they are usable.
.spb 1
!PCL
.brf
<CA .X OVER .:XTEMP
.brf
<DELETE ?.X
.brf
<END
.brf
!XEQ $MAKE_ALL_JCL.:XMISC
.spb 1
This XEQ file creates the $BUILD_X_ACCT file that is used by the
customers (and by Captain^X) to create the X^account.
.spb 1
!XEQ $BUILD_X_ACCT.:XSI
.brf
!DEL $$JOB.:XSI
.spb 1
After this step completes, the X^account should be as the customer
sees it.
.spb 1
Captain^X now compares the list of files in the X^account and
the^.:XTEMP account (the "old" X^account, saved above) so that any
discrepancies can be identified and corrected.  Mostly, this step is
to reinstall in the X^account at LADC things we need at LADC to make
sure our lives run right, like GIMME's database file and other
site-specific files and tools.
.spb 1
When the discrepancies are corrected, Captain^X deletes all the "old
X^account" from^.:XTEMP.
.spb 1
Captain^X sits out the two week waiting period to see if anyone
complains about any of the tools.  If no one does, then Captain^X
will inform the release manager that the X^account is ready to be
shipped.
.spb 1
NO NEW TOOLS ARE ADDED TO THE X^ACCOUNT DURING THE TESTING PERIOD.
Otherwise, Captain^X has to rebuild the $BUILD_X_ACCT file, update
NEW.X, and anything else necessary to be sure that the X^account is
self-consistent.
.spb 1
Once the X^account is captured, Captain^X has a big task ahead.  He
removes the "CHANGES" subject from all the tools, and recreates all
the HELP files.  The new HELP files are copied over the old
(released) HELP files in^.X.  Then, all the files in^.X are COPIED
OVER THEMSELVES, establishing a based modification date on all the
files that Captain^X can use to see what tools have changed
release-to-release.
.brp
REPORTING PROBLEMS WITH X ACCOUNT TOOLS
.brf
---------------------------------------
.spb 1
People at LADC should use the
.spb 1
!HELP (toolname.X) OWNER
.spb 1
topics to determine who to inform of a bug in a tool.  This can be
done by dropping a note into the OWNER's mail slot, making a phone
call, or sending a mailgram.  If it's a bad bug with a newly
integrated tool, you might want to contact Captain^X with the
problem, via phone call or mailgram.
.spb 1
PEOPLE AT LADC SHOULD NOT USE STARLOG TO REPORT X^ACCOUNT PROBLEMS.
It just confuses the customers.  Chances are that the tool you want
to STAR barely resembles what the customers have.  More likely, the
customers DON'T EVEN HAVE THE TOOL YET!  STARring it will just
confuse things.
.spb 1
-------------------------
.spb 1
Customers should STAR X^account difficulties and suggestions at
severity^D under subject name^X.
.spb 1
Since STARLOG uses the global form of the HELP command, a STARLORD
can determine who to assign a STAR on an X^account product to by
simply using the STARLOG HELP command:
.spb 1
#HELP (toolname.X) OWNER
.spb 1
#CH STAR:ASSPROGNA TO 'whoever it's' supposed to be'
.spb 1
If the tool's owner doesn't work at LADC any longer, the STARLORD
can assign the star to Captain^X.  There is one exception to this
guideline, however.  If the STAR was submitted by someone at LADC,
and the tool's owner no longer works at LADC, the star gets assigned
to the STAR's submitter.
.brp
GETTING NEW X ACCOUNT TOOLS WRITTEN
.brf
-----------------------------------
.spb 1
If you have an idea for a new feature for an X^account tool, or an
idea for an X^account tool (and you're not interested in
implementing it yourself), put your idea on record by sending a
mailgram to the alias 'TOOL_BOX'.  The TOOL_BOX mailbox is an
electronic meeting, maintained like all electronic meetings at
LADC.  The file REV_TOOL_BOX.:MEETING is where the previous
suggestions and ideas are.
.spb 1
The ideas in the TOOL_BOX are used as "starter projects" for new
hires to learn the ropes at LADC.  Managers with new hires should
check this meeting file (or talk to Captain^X) to see what's needed
in the tool area.
 
