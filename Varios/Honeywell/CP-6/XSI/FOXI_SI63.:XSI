/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
Get_Arg_Len:   Proc  (Desc$, Arg_No, Arg_Len, Arg_Type)
               Altret
               Materialize ($PR2 in Auto$);
/*
       Get_Arg_Len returns the length (and optionally the type) of the arg
         indicated by Arg_No (1-n); Desc$ is a pointer to the argument
         descriptor list.  (For parameters where the length is stored in the
         caller's Auto, we back up the call chain to find it.)  We recognize
         two error conditions, and return negative values, per:
 
           Error condition                     Result
           ----------------------------        ------
           Arg_No > #arguments passed            -1
           No descriptor list passed             -2
           "Non-Dense" desc. list passed         -3     (See B$OBJECT_C!)
 
       Andrew E. Birner, 04 Nov, '86
       Modified for FOXI 19 Mar, '87
*/
/********************************************************************
*                                                                   *
* This program  is a gratuitous contribution and  is offered as is. *
* Zenith  makes  no  representations  or  warranties  of  any kind, *
* express  or  implied,  relating  to  freedom  from  infringement, *
* accuracy,  error-freedom  or   performance,  and  shall  have  no *
* liability  or responsibility  to users  for damages  of any kind, *
* including special, indirect or consequential damages, arising out *
* of  or resulting  from use,  modification or  reproduction of the *
* program.                                                          *
*                                                                   *
* No  warranty  is  made  by  the  contributor  as to the accuracy, *
* maintenance, and functioning of the program and related material. *
* No  responsibility is  assumed by  the contributor  in connection *
* therewith.                                                        *
*                                                                   *
********************************************************************/
%Eject;
/*
**       Arguments:
*/
       Dcl Desc$ Param Ptr;     /* pointer to a desc list */
       Dcl Arg_No Param Ubin;   /* Which arg (1-n)? */
       Dcl Arg_Len Param Sbin;  /* Returns length of spec'd arg */
       Dcl Arg_Type Param Ubin; /* Returns type of spec'd arg */
/*
**       Include files and stuff:
*/
%Include B$OBJECT_C;
%CP6$ENTS;
/*
**       Arg Descriptor List stuff
*/
       %B$Desc_List (Gen_Ext=Yes, StClass="Based (Desc$)");
 
       Dcl Ext$ Ptr;
 
       Dcl  B_Pointer  Entry  Conv (5);
 
       Dcl B$IS$ Ptr SymRef ReadOnly;
       Dcl B$DS1$ Ptr SymRef ReadOnly;
 
       Dcl Size Based Ubin;
 
       Dcl Auto$ Ptr;
       Dcl 1 Auto_Frame Based (Auto$) Aligned,
             2 * Ubin Half Haligned,
             2 Prev Ubin Half Haligned;
%Eject;
Start:;
/*
**       Check #args in descriptor list:
*/
       If  B$Desc_List.Number_of_Args < Arg_No  then Do;
         Arg_Len = -1;
         AltReturn;
       End;
/*
**       Check #descriptor words provided:
**         (Note that this catches incomplete as well as missing lists.)
*/
       If  B$Desc_List.Num_Desc_Words < Arg_No  then Do;
         Arg_Len = -2;
         AltReturn;
       End;
/*
**       Check for right type of desc list
*/
       If  B$Desc_List.V  then Do;
         Arg_Len = -3;
         AltReturn;
       End;
/*
**         Grab the argument length (and type, if requested):
*/
       If  ~B$Desc_List.Desc_words.Extended (Arg_No - 1)  then Do;
           /* Arg_Len is in Descriptor List word */
 
         Arg_Len = B$Desc_List.Desc_words.Arg_size (Arg_No - 1);
 
        End; Else Do;
           /* Arg_Len not in Descriptor List word; see Extension word */
 
         Ext$ = PincrW (Desc$,
                        (B$Desc_List.Number_of_Args + 1 +
                         B$Desc_List.Desc_words.Arg_size_offset (Arg_No - 1)));
         If  ~Ext$->B$Desc_Ext.I (0)  then Do;
             /* Arg_Len is in Extension word */
 
           Arg_Len = Ext$->B$Desc_Ext.Large_size (0);
 
          End; Else Do;
             /* Arg_Len is not in Extension word; is in word elsewhere */
 
           If  Ext$->B$Desc_Ext.A (0)  then Do;
               /* Arg_Len is in word in (caller's caller)'s auto */
 
             Auto$ = PIncrW (B$DS1$, BitBin (~BinBit (Auto_Frame.Prev, 18)));
             Auto$ = PIncrW (B$DS1$, BitBin (~BinBit (Auto_Frame.Prev, 18)));
             Arg_Len = PIncrW (Auto$, Ext$->B$Desc_Ext.Auto_Offset_of_Size (0))->Size;
 
            End; Else Do;
               /* Arg_Len is in word in instruction segment somewhere */
 
             Arg_Len = PIncrW (B$IS$, Ext$->B$Desc_Ext.Static_Loc_of_Size (0))->Size;
 
           End;
         End;
       End;
 
       If  Addr (Arg_Type) ~= Addr (Nil)  then Do;
         Arg_Type = B$Desc_List.Desc_words.Data_type (Arg_No - 1);
       End;
/*
**       That's it!
*/
       Return;
 
End    Get_Arg_Len;
 
 
