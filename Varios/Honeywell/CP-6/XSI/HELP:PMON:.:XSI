                  Software Performance Monitor
 
     The software performance monitor is a set of programs to
help identify where your program is spending its time.  These
programs are as follows:
 
        PMON   --  Debugger performance data gatherer
        PM     --  Subroutines to gather performance data
        PMDISP --  Program to produce a formatted display of the data.
 
     You use either PMON or PM to gather performance data (but
not both!) on one or multiple runs of your program, and then you
use PMDISP to print the performance report.
 
     The first step in using the performance monitor is to decide
which method you will use to gather the data, PMON or PM.  PMON
is a shared debugger, and to use it you just say:  !UNDER PMON
before running your program.  PM is composed of two subroutines,
PMSTART and PMEND.  To use it, you add calls to those routines
into your program, and link with PM.  The advantages and
disadvantages of each method are as follows:
 
        1) PMON is much easier to use.  It requires no changes to
           your existing program.
        2) PMON slows your program down more than PM.
           PM adds about 10% to the running time, PMON about 20-50%
        3) PM allows you to monitor a certain section of your program,
           while PMON always monitors the entire program run.
        4) PMON and DELTA can not be used at the same time. If you are
           using PMON, and hit cntl Y and say DELTA, the system will just
           call PMON again.
 
     With either method, the performance data will be written out
to a default file '*PM_DATA'.  Each time you run your program with the
performance monitor, it will extend the file with additional
data.  After you have made your performance run, you use PMDISP
to print the data.
To get help on how to use PMON, PMDISP or PM, type HELP (PMON.:SYS) name,
where name is PMON, PMDISP, or PM.
 
HELP file for: PMON
 **************************************************************
 *                                                            *
 *  Copyright (c) Bull HN Information Systems Inc., 1989      *
 *                                                            *
 **************************************************************
7/17/86 CKW
Fixed PMON to sample more often if running on a DPS90
(star 29322).
3/16/84
Since we will use FEPMON to monitor FEP run unit, we need an extra
word in the first record of the data file to distinguish HOST and FEP
run unit so that PMDISP knows how to interpret data differently.  PMON
also needs to be able to error when a user attempts to monitor a FEP
run unit with PMON.
CHANGES
Carol Walter, LADC
PM:
     Here you must alter your program to call PMSTART before the
area to be monitored, and PMEND after it.  Usualy you will want
to monitor the whole program, so put the call to PMSTART as the
first line of procedure, and the call to PMEND just before the
program exits.  Warning: It is very important that the call to
PMEND gets executed, otherwise you will get unreasonable data or
no data at all.  Make sure all possible exits from the program
call PMEND.  After you have changed your program and recompiled,
link your program with the file PM.  After that, any time you run
your program you will get performance data.  If you don't want
the data to go to '*PM_DATA', just set PM_DCB to the file of your
choice.  If you want to run the program under DELTA, the first
command you give to DELTA should be TRAP TIMER.  This will allow
the PM routines to continue running as they do normaly, but much
slower.  It is also possible to use RUM to put the calls to
PMSTART and PMEND into a ru if you cant change the program
source.  The concern of more than one CPUs also applies here.
 
PMDISP:
     PMDISP is used to display performance data that has been gathered
via PMON.:SYS OR PM.X.
 
     To use PMDISP, give the following command:
 
     !PMDISP.X ru_fid [,pm_data_fid] [ON , lsfid] [(option,...)]
 
        The ru_fid specified must be the run unit PMON or PM collects
        performance data on, otherwise the resulting statistics
        (if any) is not valid.  The run unit should have debug schema
        if possible.
 
        The default pm_data_fid is *PM_DATA.  If you have specified
        the performance data file to be otherwise when you run PMON or
        PM, then you have to give that file name here, or you can
        !SET M$UI pm_data_fid before invoking PMDISP.  Please note
        that '*PM_DATA', being a star file, will be deleted when you
        log off, so if you want to save it, you must copy it into a
        permanent file.
 
        All statistics output from PMDISP goes out through M$LO, and
        the default is the terminal.  If you want the output to go
        somewhere else, then you must specify lsfid, or you can
        !SET M$LO lsfid before invoking PMDISP.
 
        Type
        !HELP (PMDISP.X) OPTION to get information on the available options.
 
     PMDISP is capable of calculating several kinds of statistics at
different levels.  However, to get a reasonable printout, you should
have at least a thousand data points collected.  Since this is not a
hardware monitor, please note that all figures given are only approxi-
mations.  Several points will be discussed in PMDISP HELP file regarding
to this.
 
     The following set of statistics is available currently:
 
     1. PM EXECUTION RUN STATISTICS  (*DEFAULT)
 
        It includes percentages of execution time, service time, total
        data points and total time used.
 
     2. LIST OF NODES
 
        It gives a list of the percentages of time spent for all nodes
        of a program.
 
     3. LIST OF MODULES  (*DEFAULT)
 
        The printout will list each external procedure and the percent
        of time used by that procedure.  If that external procedure
        has internal procedures (a la PL6), the printout will show the
        internal procedure with both the percent of total program time
        and percent of external procedure time.  It will also show the
        lexical level of that internal procedure.  Note that the time
        given for any internal procedure includes the time used in any
        internal procedure nested indside it.
 
     4. LIST OF STATEMENTS
 
        It is possible to get a detailed printout for any number of
        external procedures by specifying (M=(module_name,...)) on the
        PMDISP invocation. Note that the module_name can be wildcarded
        with a trailing '?'.  The time spent in a statement may not
        appear on that statement, due to hardware limitations.  (Trans-
        fer instructions or instructions located on an even-word boun-
        dry are not interruptable).  In general the deatail printout
        will be reasonable.  Time for statements is given both as per-
        cent of total time, and percent of external procedure time.
        (When a percent is of the external procedure time, it appears
        in parenthesis).
 
     5. LIST OF SPECIFIED RANGES
 
        The printout will list each range and the percentage of time
        spent in each one of them.
 
RESTRICTIONS:
 
     Your program must not use the M$STIMER or M$TTIMER monitor
services, as this is how the performance monitor gathers its
data.  You can use either PM or PMON on overlaid programs.  If
you are using PMON, the program you are running must be readable
by PMON.  In other words, PMON won't work on read-only programs
or shared processors.  Neither PM nor PMON will work for special
shared processors.  Neither PM nor PMON is able to gather data on
time spent in an alternate shared library (IDS/II).  It is better
if your program has debug schema, although you can still use the
performance monitor if it doesn't (then you can only monitor your
program by specifying ranges in addresses).  If PMON or PM are used on
a CP-6 system version A00 or before, the results will not be very
accurate due to the way M$STIMER worked prior to A01.
 
PMON:
     All you have to do here is issue the command:
!UNDER PMON
immediatly before each run of your program.  If you want the data
to be written to a different file than '*PM_DATA', just set
PMON_DCB to the file of your choice:
!SET PMON_DCB myfile
One warning: be carefull not to write performance data on two
different programs (or even different versions of the same
program) to a single file.  PMDISP will have to match the debug
schema to the data, and it has no way to know if the data doesn't
match the schema.  If your program blows up, you can associate
DELTA after the fact, but DELTA can not be used while PMON is
running.  Note that PMON works by putting a small section of code
into DELTA's special location that does M$STIMER calls.  There
should be no problem for most programs, but there could be a
problem if your program can't tolerate the timer interupts.  In
general, you can use PMON on any program that you can run under
DELTA.
     Since there are more than one CPUs on the system, different parts
of a user's program will not necessarily be running on the same CPU
every time, and each CPU differs from the other on speed.  As a result,
the accuracy of the statistics is reduced if the user isn't aware of it
and doesn't specify a CPU for its program to run on.  One can use
MODEL.X to correct this.  The X account tool MODEL.X allows one to
specify a CPU to run on, simply do this before running a program under
PMON.
     Before anyone can use PMON, the system manager must first
install it as a shared debugger.  This is done by either
modifiying the sites TIGR deck or by installing PMON with the
following SPIDER command:
INSTALL PMON,DB FROM PMON.:SYS
 
PMON.:SYS
AID=PROGRAMMING
PERFORMANCE
TOOL=PMON
Software Performance MONitor used with PMDISP.X and PM.X.
CHANGES
