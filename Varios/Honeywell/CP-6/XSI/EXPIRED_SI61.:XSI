/*M* EXPIRED a program to print the names of expired files */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/*X* DMR,PLM=5,IND=5,CTI=5,SDI=5,MCL=10,CSI=0,ECI=0 */
 
 
%SET LISTSUB='1'B;
 
 
EXPIRED: PROC MAIN;
 
                         /*
                              The primary purpose of this program is
                              to print the fids of expired disk files
                              on M$LO for possible use in situations
                              where control of expired files is
                              desireable.
                                                                  */
                         /*
                              The program runs as follows:
 
                              If a file NAME is given for DCB1,
                              that file will be opened, and assumed
                              to be a list of accounts, of the form
                              that are to be scanned for expired
                              [DP#sn].account
                              which will be searched for their expired
                              files.
 
                              If nothing is specified for DCB1, then
                              the entire PUBLIC base will be searched
                              for expired files IF the user has FMSEC
                              turned on, or the current FMDIRECTORY
                              ONLY will be searched for expired files.
                                                                  */
                         /*
                              In any case, the FIDs of the offending
                              files will be output thru DCB4 as
                              specified on the invocation line,
                              defaulting to the current LO device if
                              no specification is given.
                                                                  */
                         /*
                              Any errors encountered will be displayed
                              via M$DO.  Additionally, striking BREAK
                              will display the currrently searched
                              account on M$DO.
                                                                  */
 
                         /*
                              It should be noted that ANY file created
                              by a system ghost is subject to
                              expiration, inlcuding files in :SYS
                              that came from the PO tape, files in
                              :SYSTAC, and any NCTL-created files.
                              A wise user will siwish to examine the
                              output of this program for valuable
                              files BEFORE performing any arbitrary
                              deletions.
                                                                  */
                         /*
                              Program written by J. Joseph, LADC,
                              January, 1981
                                                                  */
%EJECT;
 
                         /*
                              INCLUDE FILES
                                                                  */
%INCLUDE CP_6;
 
%INCLUDE B$JIT;
 
%INCLUDE FM$FIT;
 
%INCLUDE B_ERRORS_C;
 
     %F$DCB;
 
     %B$TCB;
 
     %B$ALT;
 
     %CODE03 (BASED="BASED(CURRENT$)");
 
     %CODE04 (BASED="BASED(CURRENT$)");
 
                         /*
                              FPT's
                                                                  */
     %FPT_OPEN      (FPTN=NXTA_OPEN,
                         DCB=M$FILE,
                         NXTA=YES,
                         ACCT=NXTA_ACCT,
                         ASN=FILE,
                         TEST=YES);
 
          %VLP_ACCT (FPTN=NXTA_ACCT,
                         ACCT='        ');
 
     %FPT_TIME      (FPTN=GET_TODAY,
                         STCLASS=CONSTANT,
                         SOURCE=CLOCK,
                         TSTAMP=TODAY);
 
     %FPT_ERRMSG    (FPTN=GET_FULL_FIT,
                         STCLASS=CONSTANT,
                         BUF=ERROR_BUF,
                         CODE=FMN_M113_2,
                         DCB=M$FILE,
                         INCLCODE=NO,
                         SUBSN=YES);
 
     %FPT_OPEN      (FPTN=NXTF_OPEN,
                         TEST=YES,
                         DCB=M$FILE,
                         NXTF=YES,
                         ASN=FILE,
                         FPARAM=FPARAMS);
 
     %FPT_UNFID     (FPTN=PRINT_THE_FID,
                         STCLASS=CONSTANT,
                         TEXTFID=FID_BUFFER,
                         DCB=M$FILE);
 
     %FPT_WRITE     (FPTN=WRITE_FID,
                         STCLASS=CONSTANT,
                         DCB=M$LO,
                         BUF=PRINTBUF);
 
     %FPT_WRITE     (FPTN=WRITE_DO,
                         STCLASS=CONSTANT,
                         BUF=DO_BUFFER,
                         DCB=M$DO);
 
     %FPT_READ      (FPTN=READ_SI,
                         STCLASS=CONSTANT,
                         BUF=SI_BUFFER,
                         DCB=M$SI);
 
     %FPT_ERRMSG    (FPTN=DUMP_ERROR,
                         BUF=DO_BUFFER,
                         DCB=M$SI,
                         OUTDCB1=M$DO,
                         CODE=NIL);
 
     %FPT_FID       (FPTN=FID_SI_BUFFER,
                         STCLASS=CONSTANT,
                         ACCT=FID_ACCT,
                         SN=FID_SN,
                         ASN=FILE_ASN,
                         RES=FILE_ASN,
                         TEXTFID=SI_BUFFER);
 
          %VLP_ACCT (FPTN=FID_ACCT);
 
          %VLP_SN   (FPTN=FID_SN,
                         N=1,
                         SN='      ');
 
     %FPT_SETFMA    (FPTN=SET_THE_FMA,
                         ACCT=FID_ACCT,
                         PSN=FID_SN);
 
     %FPT_INT       (FPTN=SET_BREAK_ADDR,
                         STCLASS=CONSTANT,
                         UENTRY=BREAK_RTN);
 
     %FPT_CLOSE     (FPTN=CLOSE_DO,
                         STCLASS=CONSTANT,
                         DCB=M$DO,
                         DISP=SAVE);
 
     %FPT_CLOSE     (FPTN=CLOSE_LO,
                         STCLASS=CONSTANT,
                         DCB=M$LO,
                         DISP=SAVE);
 
     %FPT_CLOSE     (FPTN=CLOSE_SI,
                         STCLASS=CONSTANT,
                         DCB=M$SI,
                         DISP=SAVE);
 
%INCLUDE XUD_UTS_M;
    %XUD$UTS_ENTRIES;
    %XUD_UTS_EQU;
 
                         /*
                              EXTERNALS
                                                                  */
DCL B$JIT$ PTR SYMREF;
DCL B$TCB$ PTR SYMREF;
 
DCL BREAK_RTN ENTRY ASYNC;
 
                         /*
                              DCB'S
                                                                  */
DCL M$SI DCB;
DCL M$LO DCB;
DCL M$FILE DCB;
DCL M$DO DCB;
 
                         /*
                              LOCAL STATIC
                                                                  */
DCL 1 FPARAMS STATIC,
         2 *(0:1023) UBIN WORD;
 
DCL M$SI$ PTR STATIC;
DCL M$LO$ PTR STATIC;
DCL M$FILE$ PTR STATIC;
 
DCL CURRENT$ PTR STATIC;
 
DCL PRINTBUF CHAR(200) STATIC;
DCL FID_BUFFER CHAR(100) STATIC INIT(' ');
DCL SI_BUFFER CHAR(100) STATIC INIT(' ');
DCL DO_BUFFER CHAR(140) STATIC INIT(' ');
DCL ERROR_BUF CHAR(255) STATIC INIT(' ');
DCL FMN_M113_2 BIT(36) STATIC ALIGNED INIT('061516401612'O);
DCL FILE_ASN BIT(36) STATIC ALIGNED INIT('0'B);
 
DCL PROGRAM_MODE UBIN WORD STATIC INIT(0);
DCL CURR_ACCT CHAR(8) STATIC SYMDEF INIT(' ');
 
DCL JIT_SN CHAR(6) STATIC CALIGNED INIT(' ');
DCL JIT_ACCT CHAR(8) STATIC ALIGNED INIT(' ');
 
DCL MORE_TO_DO BIT(1) ALIGNED STATIC INIT('1'B);
 
DCL MORE_FILES BIT(1) ALIGNED STATIC INIT('1'B);
 
DCL FIRST_ACCT BIT(1) STATIC INIT('0'B);
 
DCL TODAY SBIN WORD ALIGNED STATIC INIT(0);
 
                         /*
                              LOCALLY REQUIRED SUBS
                                                                  */
%SUB B$ALT=B$TCB$->B$TCB.ALT$->B$ALT;
%SUB TRUE# ='1'B /*TRUE#*/;
%SUB FALSE#='0'B /*FALSE#*/;
%SUB MODE_FILE#="1 /* MODE_FILE# */";
%SUB MODE_ALL#="2 /* MODE_ALL# */";
%SUB MODE_ONCE#="0 /* MODE_ONCE# */";
 
%EJECT;
 
/*
     Begin  E X P I R E D  main
                                             */
 
                              /*
                                   INITIALIZATIONS
                                                                  */
     M$SI$ = DCBADDR(DCBNUM(M$SI));
     M$LO$ = DCBADDR(DCBNUM(M$LO));
     M$FILE$ = DCBADDR(DCBNUM(M$FILE));
     JIT_SN = B$JIT$->B$JIT.FPSN;
     JIT_ACCT = B$JIT$->B$JIT.FACCN;
     CALL M$INT (SET_BREAK_ADDR) ALTRET (MAIN_0);
MAIN_0: ;
 
                              /*
                                   Find out how many days today is
                                   (since UTS started)            */
     CALL GET_TODAY;
                              /*
                                   Figure out how to determine
                                   which account(s) to search */
     CALL SELECT_INFO;
 
 
                              /*
                                   FETCH NEXT ACCOUNT INFO
                                                                  */
 
     DO WHILE (MORE_TO_DO);
 
          CALL GET_NEXT_ACCT;
 
          CALL CHECK_THIS_DATE ALTRET (GO_AHEAD);
 
          CALL PRINT_BAD_FID;
GO_AHEAD: ;
 
          DO WHILE (MORE_FILES);
 
               CALL OPEN_IT ALTRET(NEXT_ACCT);
 
               CALL CHECK_THIS_DATE ALTRET(NEXT_FILE);
 
               CALL PRINT_BAD_FID;
 
NEXT_FILE:     ;
             END;                       /* DO WHILE MORE_FILES */
 
NEXT_ACCT: ;
 
        END;                            /* DO WHILE MORE_TO_DO */
 
     CALL CLOSE_FILES;
 
                                   /*
                                        final clean-up
                                                                  */
     IF PROGRAM_MODE = MODE_FILE#
     THEN
     DO;
          IF JIT_SN = ' '
          THEN
               SET_THE_FMA.PSN_ = VECTOR(ERASE);
          ELSE
               SET_THE_FMA.PSN_ = VECTOR(JIT_SN);
                                        /**/
          SET_THE_FMA.ACCT_ = VECTOR(JIT_ACCT);
 
          CALL M$SETFMA (SET_THE_FMA) ALTRET (WHO_CARES_ANYWAY);
WHO_CARES_ANYWAY: ;
        END;                            /* DO IF BAD JIT.FACCN */
 
     CALL M$EXIT;
 
%EJECT;
 
CHECK_THIS_DATE: PROC ALTRET;
 
DCL CREAT_DAY SBIN;
DCL CREAT_DAYB REDEF CREAT_DAY BIT(36);
DCL EXPIRE_DAY SBIN;
 
 
     CURRENT$ = ADDR(FPARAMS);
 
     CALL XSF$LOCCODT (CURRENT$, 4);
 
     CREAT_DAYB = CURRENT$ -> CODE04.CREATION;
     CALL XUD$UTS_DIFF_SEC(CREAT_DAY,CREAT_DAY,0);
     CREAT_DAY = CREAT_DAY/86400;
 
     CURRENT$ = ADDR(FPARAMS);
     CALL XSF$LOCCODT (CURRENT$, 3);
 
                                   /* SPECIAL CASE:
                                        If #days to expire is < 0,
                                        then file "NEVER" expires.
                                                                  */
     IF CURRENT$ -> CODE03.EXPIRE < 0
     THEN
          ALTRETURN;
 
     EXPIRE_DAY = CREAT_DAY + CURRENT$ -> CODE03.EXPIRE;
 
     IF EXPIRE_DAY > TODAY
     THEN
          ALTRETURN;
 
     RETURN;
END CHECK_THIS_DATE;
 
%EJECT;
 
CLOSE_FILES: PROC;
 
     CALL M$CLOSE (CLOSE_LO) ALTRET(NO_LO);
NO_LO: ;
     CALL M$CLOSE (CLOSE_SI) ALTRET(NO_SI);
NO_SI: ;
     CALL M$CLOSE (CLOSE_DO) ALTRET (NO_DO);
NO_DO: ;
     RETURN;
END CLOSE_FILES;
 
%EJECT;
 
GET_NEXT_ACCT: PROC;
 
     DO CASE (PROGRAM_MODE);
 
     CASE (MODE_ONCE#);
 
        CURR_ACCT = ' ';
        NXTF_OPEN.ACCT_ = VECTOR(ERASE);
        NXTF_OPEN.NAME_ = VECTOR(ERASE);
 
        CALL M$OPEN (NXTF_OPEN) ALTRET (CANT_DO_NXTF);
 
        NXTF_OPEN.ACCT_ = VECTOR(NIL);
        NXTF_OPEN.NAME_ = VECTOR(NIL);
 
        CURR_ACCT = M$FILE$ -> F$DCB.ACCT#;
 
        MORE_TO_DO = FALSE#;
        RETURN;
 
     CASE (MODE_FILE#);
 
        MORE_FILES = TRUE#;
GET_NEXT_SI_RECORD: ;
 
        SI_BUFFER = ' ';
        DO_BUFFER = ' ';
        CALL M$READ (READ_SI) ALTRET (CANT_GET_ACCT);
        CALL M$FID (FID_SI_BUFFER) ALTRET (BAD_FID);
 
        DO WHILE (FALSE#);
BAD_FID:     ;
             DO_BUFFER = SI_BUFFER;
             CALL M$WRITE (WRITE_DO) ALTRET (BAD_FID_0);
BAD_FID_0:   ;
 
             DUMP_ERROR.CODE_ = VECTOR (B$ALT.ERR);
             CALL M$ERRMSG (DUMP_ERROR) ALTRET (BAD_FID_1);
BAD_FID_1:   ;
             GOTO GET_NEXT_SI_RECORD;
           END;                         /* DO WHILE ALTRET */
 
        IF FID_SN.SN#(0) = ' '
        THEN
             SET_THE_FMA.PSN_ = VECTOR(ERASE);
        ELSE
             SET_THE_FMA.PSN_ = VECTOR(FID_SN.SN#(0));
 
        CALL M$SETFMA (SET_THE_FMA) ALTRET (BAD_FID);
 
        CURR_ACCT = ' ';
        NXTF_OPEN.ACCT_ = VECTOR(ERASE);
        NXTF_OPEN.NAME_ = VECTOR(ERASE);
 
        CALL M$OPEN (NXTF_OPEN) ALTRET (CANT_DO_NXTF);
 
        NXTF_OPEN.ACCT_ = VECTOR(NIL);
        NXTF_OPEN.NAME_ = VECTOR(NIL);
 
        CURR_ACCT = M$FILE$ -> F$DCB.ACCT#;
 
        RETURN;
 
     CASE (MODE_ALL#);
 
        MORE_FILES = TRUE#;
TRY_A_NXTA: ;
        IF FIRST_ACCT
        THEN
             GOTO GOOD_ACCT;
        CALL M$OPEN (NXTA_OPEN) ALTRET (MUST_BE_113_ERROR);
 
        DO WHILE (FALSE#);
MUST_BE_113_ERROR: ;
             IF B$ALT.ERR.CODE = %E$NOFILE
             THEN
                  GOTO GOOD_ACCT;
             IF B$ALT.ERR.CODE = %E$ADEOF
             THEN
                  GOTO CANT_GET_ACCT;
             IF B$ALT.ERR.CODE = %E$XCLSET
             THEN
                  GOTO TRY_A_NXTA;
 
           END;                         /* DO WHILE ALTRET */
 
GOOD_ACCT: ;
        FIRST_ACCT = FALSE#;
        CALL M$OPEN (NXTF_OPEN) ALTRET (CANT_DO_NXTF);
 
        CURR_ACCT = M$FILE$ -> F$DCB.ACCT#;
 
        RETURN;
 
     END;                               /* DO CASE PROGRAM_MODE */
 
CANT_DO_NXTF: ;
     MORE_FILES = FALSE#;
     RETURN;
 
CANT_GET_ACCT: ;
     MORE_FILES = FALSE#;
     MORE_TO_DO = FALSE#;
     RETURN;
 
END GET_NEXT_ACCT;
 
%EJECT;
 
GET_TODAY: PROC;
 
     CALL M$TIME (GET_TODAY) ALTRET (NOTIME);
NOTIME: ;
                         /*
                              Compute todays day as a function of
                              the UTS returned.  We need to do this
                              because the expire date is expressed as
                              number of days since creation UTS. Note
                              that the division must also be done on
                              the creation date obtained from the FIT.
                                                                  */
     CALL XUD$UTS_DIFF_SEC(TODAY,TODAY,0);
     TODAY = TODAY/86400;
 
     RETURN;
END GET_TODAY;
 
 
%EJECT;
 
OPEN_IT:PROC ALTRET;
 
 
     CALL M$OPEN (NXTF_OPEN) ALTRET (CHECK_NXTF_ALT);
 
     DO WHILE (FALSE#);
CHECK_NXTF_ALT: ;
          IF B$ALT.ERR.ERR#=%E$FDEOF
          THEN
               ALTRETURN;
        END;                            /* DO WHILE ALTRET */
 
     RETURN;
END OPEN_IT;
 
%EJECT;
 
PRINT_BAD_FID: PROC;
 
DCL I SBIN;
DCL J SBIN;
DCL K SBIN;
 
     FID_BUFFER = ' ';
     ERROR_BUF = ' ';
     PRINTBUF = ' ';
 
     K = 0;
     CALL M$ERRMSG (GET_FULL_FIT) ALTRET (NOERR);
 
     CALL INDEX (I, 'DP#', ERROR_BUF, 0) ALTRET (NOERR);
 
     DO WHILE (SUBSTR(ERROR_BUF,I,1) ~= '.');
 
          CALL INSERT (PRINTBUF, K, 1, SUBSTR(ERROR_BUF,I,1));
          K = K + 1;
          I = I + 1;
        END;                            /* DO WHILE ~= ' '*/
 
     CALL INSERT (PRINTBUF, K, 1, '/');
     K = K + 1;
NOERR: ;
     CALL M$UNFID (PRINT_THE_FID) ALTRET (NOUNFID_1);
NOUNFID_1: ;
     CALL INDEX (I, 'DP#', FID_BUFFER, 0) ALTRET (NOUNFID_2);
 
     K=0;
     PRINTBUF=' ';
NOUNFID_2: ;
 
     CALL INSERT (PRINTBUF, K, 60, SUBSTR(FID_BUFFER, 0, 60));
 
     CALL M$WRITE (WRITE_FID);
 
     RETURN;
END PRINT_BAD_FID;
 
 
%EJECT;
 
SELECT_INFO: PROC;
 
     IF B$JIT$ -> B$JIT.PRFLAGS.SI
     THEN
     DO;
          PROGRAM_MODE = MODE_FILE#;
          RETURN;
        END;                            /* DO IF FILE ON COMMAND LINE */
 
     IF B$JIT$ -> B$JIT.PRIV.ACTIVE & %PR_FMSEC#
     THEN
     DO;
          PROGRAM_MODE = MODE_ALL#;
          NXTA_OPEN.ACCT_ = VECTOR(ERASE);
          CALL M$OPEN (NXTA_OPEN) ALTRET (MUST_BE_NXTA_ERROR);
 
          DO WHILE (FALSE#);
MUST_BE_NXTA_ERROR: ;
               IF B$ALT.ERR.CODE ~= %E$NOFILE
               THEN
               DO;
                    DUMP_ERROR.CODE_ = VECTOR(B$ALT.ERR);
                    CALL M$ERRMSG (DUMP_ERROR) ALTRET(BAD_NXTA_0);
BAD_NXTA_0:         ;
                    MORE_TO_DO = FALSE#;
                    RETURN;
                  END;                  /* DO IF NOT 113 ERROR */
             END;                       /* DO WHILE ALTRET */
 
          NXTA_OPEN.SN_ = VECTOR(ERASE);
          NXTA_OPEN.ACCT_ = VECTOR(NIL);
          NXTA_OPEN.NAME_ =VECTOR(ERASE);
          FIRST_ACCT = TRUE#;
 
          RETURN;
        END;                            /* DO IF FMSEC ON */
 
     PROGRAM_MODE = MODE_ONCE# ;
 
     RETURN;
 
END SELECT_INFO;
 
%EJECT;
%SET LISTMAC='1'B;
     %LOCCODE;
 
END EXPIRED;
%EOD;
/*M* BREAK_RTN  Break handler for EXPIRED program */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
BREAK_RTN: PROC ASYNC;
                    /*
                         INCLUDE FILES
                                             */
%INCLUDE CP_6;
 
                    /*
                         FPT DECLARATIONS
                                             */
 
     %FPT_TRMPRG    (FPTN=RESET_BREAK_COUNT,
                         STCLASS=CONSTANT,
                         RSTBRK=YES);
 
     %FPT_WRITE     (FPTN=WRITE_DO,
                         STCLASS=CONSTANT,
                         DCB=M$DO,
                         BUF=DO_BUFFER);
 
                    /*
                         EXTERNAL DECLARATIONS
                                                  */
DCL M$DO DCB;
DCL CURR_ACCT CHAR(8) SYMREF;
 
                    /*
                         LOCAL STATIC
                                             */
DCL 1 DO_BUFFER STATIC,
         2 * CHAR(0) INIT('   Break at '),
         2 ACCT CHAR(8);
 
%EJECT;
 
/*
          Begin  BREAK_RTN  main
                                                                  */
 
 
     DO_BUFFER.ACCT = CURR_ACCT;
     CALL M$WRITE(WRITE_DO) ALTRET(BRK_0);
BRK_0: ;
 
     CALL M$TRMPRG(RESET_BREAK_COUNT) ALTRET (BRK_1);
BRK_1: ;
 
END BREAK_RTN;
