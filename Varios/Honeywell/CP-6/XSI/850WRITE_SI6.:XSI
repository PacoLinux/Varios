/*M* DISKET - program to output to Xerox 850's */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X*DMR,THI=0,PLM=5,IND=5,CTI=5,SDI=5,MCL=10,DCI=5,CSU=5,ECU=5,DTI=2*/
 
DISKET: PROC MAIN;
 
%INCLUDE CP_6;
 
%INCLUDE B$JIT;
 
DCL B$JIT$ PTR SYMREF;
 
 
DCL M$SI DCB;
DCL M$LO DCB;
     %F$DCB;
 
     %FPT_READ      (FPTN=READ_SI,
                         DCB=M$SI,
                         BUF=BUFIN,
                         WAIT=YES);
 
     %FPT_WRITE     (FPTN=WRITE_LO,
                         DCB=M$LO,
                         BP=YES,
                        TRANS=YES,
                        VFC=NO,
                         BUF=BUFIN,
                         WAIT=YES);
 
     %FPT_WRITE     (FPTN=WRITE_FF,
                        DCB=M$LO,
                        BP=YES,
                        BUF=FORMFEED,
                        TRANS=YES,
                        WAIT=YES,
                        VFC=NO);
 
     %FPT_WRITE    (FPTN=WRITE_NUL,
                        DCB=M$LO,
                        BP=YES,
                        BUF=NULBUF,
                        TRANS=YES,
                        WAIT=YES,
                        VFC=NO);
 
     %FPT_CLOSE     (FPTN=CLOSE_LO,
                         DCB=M$LO,
                         DISP=SAVE,
                         RELG=YES);
 
DCL 1 NULBUF STATIC UNAL,
         2 *  CHAR(10) UNAL INIT(' '),
         2 *  BIT(18) UNAL INIT('040015'O);
 
DCL M$SI$ PTR SYMDEF STATIC;
 
DCL 1 FORMFEED STATIC SYMDEF,
         2 FF BIT(9) UNAL INIT('014'O),
         2 *  BIT(9) UNAL INIT('033'O), /* ESC */
         2 *  BIT(9) UNAL INIT('105'O), /* E */
         2 *  BIT(9) UNAL INIT('033'O), /* ESC */
         2 *  BIT(9) UNAL INIT('105'O); /* E */
 
DCL FORMFEEDC REDEF FORMFEED CHAR(5) UNAL;
 
 
 
DCL BUFIN CHAR(512) UNAL STATIC;
DCL BUFINT CHAR(512) UNAL STATIC;
DCL STRINGED CHAR(512) UNAL STATIC;
DCL CONV_ITEM CHAR(63) UNAL STATIC INIT(' ');
 
DCL NUMERICS CHAR(10) UNAL STATIC INIT('0123456789');
 
 
DCL TEMP_LEN SBIN STATIC;
DCL START_SCORE SBIN STATIC;
DCL END_SCORE SBIN STATIC;
 
DCL ESCWI BIT(18) UNAL STATIC INIT('033127'O);
DCL ESCW REDEF ESCWI CHAR(2) UNAL;
 
DCL ESCXI BIT(18) UNAL STATIC INIT('033130'O);
DCL ESCX REDEF ESCXI CHAR(2) UNAL;
 
DCL BSUSCRI BIT(18) UNAL STATIC INIT('010137'O);
DCL BSUSCR REDEF BSUSCRI CHAR(2) UNAL;
 
DCL BSI BIT(9) UNAL STATIC INIT('010'O);
DCL BS REDEF BSI CHAR(1) UNAL;
 
DCL ESC_S_BUFI BIT(18) STATIC UNAL INIT('033123'O);
DCL ESC_S_BUF REDEF ESC_S_BUFI CHAR(2) UNAL;
DCL ESC_D_BUFI BIT(18) STATIC UNAL INIT('033104'O);
DCL ESC_D_BUF REDEF ESC_D_BUFI CHAR(2) UNAL;
 
DCL ESC_U_BUFI BIT(18) STATIC UNAL INIT('033125'O);
DCL ESC_U_BUF REDEF ESC_U_BUFI CHAR(2) UNAL;
 
 
DCL SPESCSI BIT(27) STATIC UNAL INIT('040033123'O);
DCL SPESCS REDEF SPESCSI CHAR(3) UNAL;
 
DCL ESCII BIT(18) STATIC UNAL INIT('033111'O);
DCL ESCI REDEF ESCII CHAR(2) UNAL;
 
 
DCL BYPASS_SET BIT(1) ALIGNED STATIC SYMDEF INIT('1'B);
DCL MAJOR_BYPASS BIT(1) ALIGNED STATIC SYMDEF INIT('1'B);
 
DCL I SBIN STATIC;
DCL J SBIN STATIC;
DCL K SBIN STATIC;
 
DCL SIZEBUF SBIN STATIC;
 
DCL ESC_H BIT(18) STATIC UNAL INIT('033110'O);
 
DCL ESC_H_BUF REDEF ESC_H CHAR(2) UNAL;
 
 
DCL PAGEL STATIC SYMDEF UBIN WORD ALIGNED INIT(66);
 
DCL LINES STATIC SYMDEF UBIN WORD ALIGNED INIT(0);
 
%EJECT;
/*
               BEGIN INTERNAL PROCEDURE   FORM_FEED
                                                                  */
 
 
FORM_FEED: PROC ALTRET;
     CALL M$WRITE (WRITE_FF) ALTRET (OOPS1);
     LINES = 0;
     RETURN;
OOPS1: ;
     ALTRETURN;
END FORM_FEED;
 
%EJECT;
 
/*
          BEGIN INTERNAL PROCEDURE      EDIT_BUF
                                                                  */
 
EDIT_BUF: PROC ALTRET;
     IF BUFIN = '%FF%'
     THEN
       DO;
            BUFIN = FORMFEEDC;
            SIZEBUF = SIZEC(FORMFEEDC);
            RETURN;
          END;                          /* DO IF SPECIAL FORM FEED */
 
CHECK_SCORE: ;
     K = 0;
     CALL INDEX2 (J, BSUSCR, BUFIN, 0) ALTRET (NO_MORE_SCORE);
 
     IF J ~= 0
     THEN
          START_SCORE = J - 1;
     ELSE
       DO;
            CALL INSERT (BUFINT, 1, SIZEBUF, BUFIN);
            CALL INSERT (BUFINT, 0, 1, ' ');
            SIZEBUF = SIZEBUF + 1;
            START_SCORE = 0;
            BUFIN = BUFINT;
          END;                          /* DO IF BS_ AT START */
 
STUFF_IT: ;
 
     CALL INSERT (STRINGED, K, 1, SUBSTR(BUFIN, J-1, 1));
     J = J + 3;
 
     IF SUBSTR(BUFIN,J,2) = BSUSCR
     THEN
       DO;
            K = K + 1;
            GOTO STUFF_IT;
          END;                          /* IF ANOTHER OCCURANCE */
     ELSE
       DO;
            K = K + 1;
            END_SCORE = J - 2;
            CALL INSERT (BUFINT, 0,, SUBSTR(BUFIN,0,START_SCORE), ESCW);
            TEMP_LEN = SIZEC(ESCW) + START_SCORE;
            CALL INSERT (BUFINT, TEMP_LEN, K, STRINGED);
            TEMP_LEN = TEMP_LEN + K;
            CALL INSERT (BUFINT, TEMP_LEN, SIZEC(ESCX), ESCX);
            TEMP_LEN = TEMP_LEN + SIZEC(ESCX);
            CALL INSERT (BUFINT, TEMP_LEN,,
                 SUBSTR(BUFIN,END_SCORE+1,SIZEBUF - END_SCORE));
            SIZEBUF = TEMP_LEN + (SIZEBUF - END_SCORE);
            BUFIN = BUFINT;
            GOTO CHECK_SCORE;
          END;                          /* DO IF END OF BS_ COMB */
 
NO_MORE_SCORE: ;
     CALL INDEX1 (I, '-', BUFIN) ALTRET (DASH_DONE);
 
GET_DASH: ;
     BUFINT = BUFIN;
     CALL INDEX1 (I, '-', BUFIN) ALTRET (DASH_DONE);
     IF I ~= 0
     THEN
          CALL CONCAT (BUFIN, SUBSTR(BUFINT,0,I), ESC_H_BUF,
               SUBSTR(BUFINT,I+1,SIZEBUF-I-1));
     ELSE
          CALL CONCAT (BUFIN, ESC_H_BUF, SUBSTR(BUFINT,1,SIZEBUF-1));
 
     SIZEBUF = SIZEBUF + 1;
 
     GOTO GET_DASH;
 
DASH_DONE : ;
 
GET_BS: ;
     BUFINT = BUFIN;
     CALL INDEX1 (I, BS, BUFIN) ALTRET (BS_DONE);
     IF I ~= 0
     THEN
          CALL CONCAT (BUFIN, SUBSTR(BUFINT,0,I), ESC_S_BUF,
               SUBSTR(BUFINT,I+1,SIZEBUF-I-1));
     ELSE
          CALL CONCAT (BUFIN, ESC_S_BUF, SUBSTR(BUFINT,1,SIZEBUF-1));
 
     SIZEBUF = SIZEBUF + 1;
     GOTO GET_BS;
 
BS_DONE : ;
     IF MAJOR_BYPASS
     THEN
          GOTO PERC_DONE;
     J = 0;
GET_PERC: ;
     BUFINT = BUFIN;
     CALL INDEX1 (I, '%', BUFIN, J) ALTRET (PERC_DONE);
     IF I ~= 0
     THEN
          CALL CONCAT (BUFIN, SUBSTR(BUFINT,0,I), '%%',
               SUBSTR(BUFINT,I+1,SIZEBUF-I-1));
     ELSE
          CALL CONCAT (BUFIN, '%%', SUBSTR(BUFINT,1,SIZEBUF-1));
 
     SIZEBUF = SIZEBUF + 1;
     J = I + 2;
 
     GOTO GET_PERC;
 
PERC_DONE : ;
 
     J = 0;
GET_AMP: ;
     BUFINT = BUFIN;
     CALL INDEX1 (I, '&', BUFIN, J) ALTRET (AMP_DONE);
     IF I ~= 0
     THEN
          CALL CONCAT (BUFIN, SUBSTR(BUFINT,0,I), '&&',
               SUBSTR(BUFINT,I+1,SIZEBUF-I-1));
     ELSE
          CALL CONCAT (BUFIN, '&&', SUBSTR(BUFINT,1,SIZEBUF-1));
 
     SIZEBUF = SIZEBUF + 1;
     J = I + 2;
 
     GOTO GET_AMP;
 
AMP_DONE : ;
     IF MAJOR_BYPASS
     THEN
          GOTO RBRACE_DONE;
 
     IF BYPASS_SET
     THEN
          GOTO GET_LBRACK;
     ELSE
          GOTO GET_ESCD;
 
GET_ESCD: ;
     BUFINT = BUFIN;
     CALL INDEX (I, ESC_D_BUF, BUFIN) ALTRET (ESCD_DONE);
     IF I ~= 0
     THEN
          CALL CONCAT (BUFIN, SUBSTR(BUFINT,0,I), '%',
               SUBSTR(BUFINT,I+2,SIZEBUF-I-2));
     ELSE
          CALL CONCAT (BUFIN, '%', SUBSTR(BUFINT,2,SIZEBUF-2));
 
     SIZEBUF = SIZEBUF - 1;
 
     GOTO GET_ESCD;
 
ESCD_DONE : ;
 
GET_ESCU: ;
     BUFINT = BUFIN;
     CALL INDEX (I, ESC_U_BUF, BUFIN) ALTRET (ESCU_DONE);
     IF I ~= 0
     THEN
          CALL CONCAT (BUFIN, SUBSTR(BUFINT,0,I), '&',
               SUBSTR(BUFINT,I+2,SIZEBUF-I-2));
     ELSE
          CALL CONCAT (BUFIN, '&', SUBSTR(BUFINT,2,SIZEBUF-2));
 
     SIZEBUF = SIZEBUF - 1;
 
     GOTO GET_ESCU;
 
ESCU_DONE : ;
 
GET_LBRACK: ;
     BUFINT = BUFIN;
     CALL INDEX1 (I, '[', BUFIN) ALTRET (LBRACK_DONE);
     IF I ~= 0
     THEN
          CALL CONCAT (BUFIN, SUBSTR(BUFINT,0,I), '%(',
               SUBSTR(BUFINT,I+1,SIZEBUF-I-1));
     ELSE
          CALL CONCAT (BUFIN, '%(', SUBSTR(BUFINT,1,SIZEBUF-1));
 
     SIZEBUF = SIZEBUF + 1;
 
     GOTO GET_LBRACK;
 
LBRACK_DONE : ;
 
GET_RBRACK: ;
     BUFINT = BUFIN;
     CALL INDEX1 (I, ']', BUFIN) ALTRET (RBRACK_DONE);
     IF I ~= 0
     THEN
          CALL CONCAT (BUFIN, SUBSTR(BUFINT,0,I), '%)',
               SUBSTR(BUFINT,I+1,SIZEBUF-I-1));
     ELSE
          CALL CONCAT (BUFIN, '%)', SUBSTR(BUFINT,1,SIZEBUF-1));
 
     SIZEBUF = SIZEBUF + 1;
 
     GOTO GET_RBRACK;
 
RBRACK_DONE : ;
 
GET_VBAR: ;
     BUFINT = BUFIN;
     CALL INDEX1 (I, '|', BUFIN) ALTRET (VBAR_DONE);
     IF I ~= 0
     THEN
          CALL CONCAT (BUFIN, SUBSTR(BUFINT,0,I), '%/',
               SUBSTR(BUFINT,I+1,SIZEBUF-I-1));
     ELSE
          CALL CONCAT (BUFIN, '%/', SUBSTR(BUFINT,1,SIZEBUF-1));
 
     SIZEBUF = SIZEBUF + 1;
 
     GOTO GET_VBAR;
 
VBAR_DONE : ;
 
GET_LBRACE: ;
     BUFINT = BUFIN;
     CALL INDEX1 (I, '{', BUFIN) ALTRET (LBRACE_DONE);
     IF I ~= 0
     THEN
          CALL CONCAT (BUFIN, SUBSTR(BUFINT,0,I), '&(',
               SUBSTR(BUFINT,I+1,SIZEBUF-I-1));
     ELSE
          CALL CONCAT (BUFIN, '&(', SUBSTR(BUFINT,1,SIZEBUF-1));
 
     SIZEBUF = SIZEBUF + 1;
 
     GOTO GET_LBRACE;
 
LBRACE_DONE : ;
 
GET_RBRACE: ;
     BUFINT = BUFIN;
     CALL INDEX1 (I, '}', BUFIN) ALTRET (RBRACE_DONE);
     IF I ~= 0
     THEN
          CALL CONCAT (BUFIN, SUBSTR(BUFINT,0,I), '&)',
               SUBSTR(BUFINT,I+1,SIZEBUF-I-1));
     ELSE
          CALL CONCAT (BUFIN, '&)', SUBSTR(BUFINT,1,SIZEBUF-1));
 
     SIZEBUF = SIZEBUF + 1;
 
     GOTO GET_RBRACE;
 
RBRACE_DONE : ;
 
GET_SPESCS: ;
     BUFINT = BUFIN;
     CALL INDEX (I, SPESCS, BUFIN) ALTRET (SPESCS_DONE);
     IF I ~= 0
     THEN
          CALL CONCAT (BUFIN, SUBSTR(BUFINT,0,I), ESCI,
               SUBSTR(BUFINT,I+1,SIZEBUF-I-1));
     ELSE
          CALL CONCAT (BUFIN, ESCI, SUBSTR(BUFINT,1,SIZEBUF-1));
 
     SIZEBUF = SIZEBUF + 1;
     GOTO GET_SPESCS;
 
SPESCS_DONE : ;
 
 
     RETURN;
 
END EDIT_BUF;
 
 
%EJECT;
 
/******************************************************************
 ***                                                            ***
 ***           BEGIN DISKET MAIN                                ***
 ***                                                            ***
 ******************************************************************/
 
     IF B$JIT.CCDISP ~= B$JIT.CCARS
     THEN
       DO;
            J = B$JIT.CCARS - B$JIT.CCDISP;
            CONV_ITEM = SUBSTR(B$JIT.CCBUF, B$JIT.CCDISP, J);
            TEMP_LEN = 62;
            DO I = 0 TO J-1;
                 K = (J-1) - I;
                 CALL INDEX1 (PAGEL, SUBSTR(CONV_ITEM,K,1), NUMERICS) ALTRET(X);
                 CALL INSERT (CONV_ITEM, TEMP_LEN, 1,
                      SUBSTR(CONV_ITEM, K, 1));
                 TEMP_LEN = TEMP_LEN - 1;
X:               ;
               END;                     /* DO LOOKING FOR CHARS */
            IF TEMP_LEN = 62
            THEN
                 GOTO NO_CHANGE;
 
            CALL INSERT (CONV_ITEM, 0, J, ' ');
            CALL CHARBIN (PAGEL, CONV_ITEM);
 
            IF PAGEL <= 0
            THEN
                 PAGEL = 66;
 
NO_CHANGE:  ;
          END;                          /* DO IF OPTION */
 
     CALL FORM_FEED ALTRET(OOPS);
 
     M$SI$ = DCBADDR(DCBNUM(M$SI));
 
     DO WHILE ('1'B);
 
          BUFIN = ' ';
          CALL M$READ (READ_SI) ALTRET (OOPS);
          SIZEBUF = M$SI$ -> F$DCB.ARS#;
 
          IF BUFIN = ' '
          THEN
            DO;
                 CALL M$WRITE (WRITE_NUL) ALTRET (OOPS);
               END;                     /* DO IF BLANKS */
          ELSE
            DO;
                 CALL EDIT_BUF ALTRET(OOPS);
                 WRITE_LO.BUF_.BOUND = SIZEBUF - 1;
                 CALL M$WRITE (WRITE_LO) ALTRET (OOPS);
               END;                     /* DO IF NON-BLANKS */
 
          LINES = LINES + 1;
 
          IF LINES >= PAGEL
          THEN
               CALL FORM_FEED ALTRET(OOPS);
        END;                            /* DO WHILE MORE TO DO */
 
OOPS: ;
     CALL FORM_FEED ALTRET(WHO_CARETH);
WHO_CARETH: ;
     CALL M$CLOSE (CLOSE_LO) ALTRET (EH);
EH:  ;
     CALL M$EXIT;
 
END DISKET;
