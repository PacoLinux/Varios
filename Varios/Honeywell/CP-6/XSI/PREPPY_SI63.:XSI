/*M* ZW1$CP6_SPECIFIC_INIT - Routines to perform CP6 specific initialization */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
 
/*X* PLM=4,STI=2,IND=2,CTI=4,DCI=5,PRB=YES,ECI=3,CSI=3,THI=2,DTI=2,
     DIN=2,ENI=2,CLM=0,CCC,SQB,MCI,NTB,MOC,CCI=3,MCR=NO,NLB,MCL=0,EDMC  */
 
/*P*     NAME:     ZW1$CP6_DCB_INIT
         PURPOSE:  This routine performs all initializations that
              are required for dcb processing.
*/
/*D*     NAME:     ZW1$CP6_DCB_INIT
         INPUT:
              None
         OUTPUT:
              ZWI$M$SI$
              ZWI$M$UI$
              ZWI$M$SO$
              ZWI$M$OU$
              ZWI$M$LIST$
              ZWI$M$LU$
              ZWI$M$NS$
              ZWI$M$MAC$
              ZWI$M$SYSTEM$
              ZWI$M$LEVEL$
              ZWI$M$DF$
              ZWI$M$XREF$
              ZWI$M$MIIL$
              ZWI$M$VIRTUAL$
              ZWI$M$DEBUGO$
              all internal dcbs initialized to null state
         ENTRY:    ZW1$CP6_DCB_INIT_LO_DO
         INPUT:
              None
         OUTPUT:
              ZWI$M$LO#
              ZWI$M$LO$
              ZWI$M$DO#
              ZWI$M$DO$
         INTERFACES:    Currently this module calls the FOLLOWING:
              PL6:
                   ZWH$MONERR$PRINT
                   ZWH$ERR$PRINT
              CP6:
                   M$OPEN (setdcb)
         DESCRIPTION:   This routine will initialize all dcb ptrs
              int the root.  Although many will never be referrenced,
              for consistency sake, all will be defined and
              initialized.
                   All internal dcbs are set to a null state to
              over-ride any sets that the user may have done.
              The dcbs are not opened but only set.  If any errors
              occur in trying to set the dcbs, this routine
              will print the error returned and will return
              abnormally.  This will result in the compilation
              being aborted.
                    Also, if PL6 has been invoked by an interactive
              user, a welcome message giving the version, time and
              date will be send to M$UC.
 
*/
/*E*
    ERROR: ZW1-E$SETDCB_ERROR-4
    MESSAGE: This error occurred while trying to initialize a DCB.
                      ***** Compilation terminated *****
*/
 
%EJECT;
ZW1$CP6_DCB_INIT_LO_DO: PROC ALTRET;
 
%INCLUDE PREPPY_C61;
 
%PAGE( ARG=Includes );
%INCLUDE ZWI$OPTION_C; /* :TOOL */
%INCLUDE PREPPY_C64;
%INCLUDE U$JIT_C;
%INCLUDE PREPPY_C62;
 
%PAGE( ARG=Entries );
%ZWH$ERR_ENTRIES;
 
%PAGE( ARG=Global Data );
  DCL ZWI$RECNO UBIN SYMREF;
 
  DCL 1 ZWI$INPUT_KEY SYMREF,
        2 TCHAR UBIN(8) UNAL,
        2 EDIT_VAL SBIN(28) UNAL;
  DCL B$JIT$ PTR SYMREF;
  DCL ZWI$VERSION_TEXT CHAR(4) ALIGNED SYMREF;
 
%DEBUG;
%OPTION;
 
%PAGE( ARG=Error Data );
%B$TCB;
%B$ALT;
  DCL B$TCB$ PTR SYMREF;
  DCL ERROR_CODE BIT(36);
  DCL ERROR_DCB_NUMBER UBIN;
 
%PAGE( ARG=DCB Data );
  DCL M$SI DCB;
  DCL ZWI$M$SI# UBIN SYMREF;
  DCL ZWI$M$SI$ PTR SYMREF;
 
  DCL M$OU DCB;
  DCL ZWI$M$OU# UBIN SYMREF;
  DCL ZWI$M$OU$ PTR SYMREF;
 
  DCL M$LO DCB;
  DCL ZWI$M$LO# UBIN SYMREF;
  DCL ZWI$M$LO$ PTR SYMREF;
 
  DCL M$UI DCB;
  DCL ZWI$M$UI# UBIN SYMREF;
  DCL ZWI$M$UI$ PTR SYMREF;
 
  DCL M$LIST DCB;
  DCL ZWI$M$LIST# UBIN SYMREF;
  DCL ZWI$M$LIST$ PTR SYMREF;
 
  DCL M$LU DCB;
  DCL ZWI$M$LU# UBIN SYMREF;
  DCL ZWI$M$LU$ PTR SYMREF;
 
  DCL M$NS DCB;
  DCL ZWI$M$NS# UBIN SYMREF;
  DCL ZWI$M$NS$ PTR SYMREF;
 
  DCL M$MAC DCB;
  DCL ZWI$M$MAC# UBIN SYMREF;
  DCL ZWI$M$MAC$ PTR SYMREF;
 
  DCL M$SYSTEM DCB;
  DCL ZWI$M$SYSTEM# UBIN SYMREF;
  DCL ZWI$M$SYSTEM$ PTR SYMREF;
 
  DCL M$LEVEL DCB;
  DCL ZWI$M$LEVEL# UBIN SYMREF;
  DCL ZWI$M$LEVEL$ PTR SYMREF;
 
  DCL M$DF DCB;
  DCL ZWI$M$DF# UBIN SYMREF;
  DCL ZWI$M$DF$ PTR SYMREF;
 
  DCL M$XREF DCB;
  DCL ZWI$M$XREF# UBIN SYMREF;
  DCL ZWI$M$XREF$ PTR SYMREF;
 
  DCL M$MIIL DCB;
  DCL ZWI$M$MIIL# UBIN SYMREF;
  DCL ZWI$M$MIIL$ PTR SYMREF;
 
  DCL M$VIRTUAL_FILE DCB;
  DCL ZWI$M$VIRTUAL# UBIN SYMREF;
  DCL ZWI$M$VIRTUAL$ PTR SYMREF;
 
  DCL G$OU DCB;
  DCL ZWI$G$OU# UBIN SYMREF;
  DCL ZWI$G$OU$ PTR SYMREF;
 
  DCL G$OUSAVE DCB;
  DCL ZWI$G$OUSAVE# UBIN SYMREF;
  DCL ZWI$G$OUSAVE$ PTR SYMREF;
 
  DCL G$IMAGE DCB;
  DCL ZWI$G$IMAGE# UBIN SYMREF;
  DCL ZWI$G$IMAGE$ PTR SYMREF;
 
  DCL G$KEY_OU DCB;
  DCL ZWI$G$KEY_OU# UBIN SYMREF;
  DCL ZWI$G$KEY_OU$ PTR SYMREF;
 
  DCL M$DO DCB;
  DCL ZWI$M$DO# UBIN SYMREF;
  DCL ZWI$M$DO$ PTR SYMREF;
 
  DCL M$DEBUGO DCB;
  DCL ZWI$M$DEBUGO# UBIN SYMREF;
  DCL ZWI$M$DEBUGO$ PTR SYMREF;
 
  DCL M$SO DCB;
  DCL ZWI$M$SO# UBIN SYMREF;
  DCL ZWI$M$SO$ PTR SYMREF;
 
 /*
    The following setdcb macros are used to
    insure that internal dcbs are have not been
    set and there do damage to the user
    */
%FPT_OPEN(FPTN=SETDCB_CONSEC,SETDCB=YES,ASN=FILE,DISP=SCRATCH,
 FUN=CREATE,ORG=CONSEC,ACS=SEQUEN,STCLASS=STATIC);
%FPT_OPEN(FPTN=SETDCB_KEYED,SETDCB=YES,ASN=FILE,DISP=SCRATCH,
 FUN=CREATE,ORG=KEYED,ACS=DIRECT,STCLASS=STATIC);
%FPT_OPEN(FPTN=SETDCB_KEYED_SAVE,SETDCB=YES,ASN=FILE,DISP=NAMED,
 FUN=CREATE,ORG=KEYED,ACS=DIRECT,STCLASS=STATIC);
%FPT_OPEN(FPTN=SETDCB_RELATIVE,SETDCB=YES,ASN=FILE,DISP=SCRATCH,
 FUN=CREATE,ORG=RELATIVE,ACS=DIRECT,RECL=2048,STCLASS=STATIC);
%FPT_OPEN(FPTN=SETDCB_RELATIVE_SAVE,SETDCB=YES,
 ORG=RELATIVE,ACS=DIRECT,RECL=2048,STCLASS=STATIC);
%FPT_OPEN(FPTN=SETDCB_NO,SETDCB=YES,RES='NO',ASN=DEVICE);
%FPT_OPEN(FPTN=SET_SYS_FILE, SETDCB=YES);
%FPT_OPEN(FPTN=REASSIGN_SYS_FILE, SETDCB=YES, REASSIGN=YES);
%VLP_NAME(FPTN=L6_SYS_FILE_NAME, NAME='L6_PL6_SYSTEMFILE' );
%VLP_NAME(FPTN=G8_SYS_FILE_NAME, NAME='GCOS8_PL6_SYSTEMFILE' );
%FPT_OPEN(FPTN=DEFAULT_OPEN_FPT,FUN=CREATE,STCLASS=STATIC);
%FPT_CORRES(FPTN=DO_LO_CORRES_FPT,DCB1=M$LO,DCB2=M$DO,STCLASS=STATIC);
%FPT_PROMPT(FPTN=PROMPT_FPT,DCB=M$UC,PROMPT=PROMPT_STRING);
 
  DCL PROMPT_STRING CHAR(0) CONSTANT INIT('-> ');
 
%FPT_TIME(FPTN=TIME_FPT);
%FPT_WRITE(FPTN=WELCOME_MESSAGE_FPT,DCB=M$UC);
 
%PAGE( ARG=Local Data );
  DCL 1 MESS CONSTANT,
        2 * CHAR(19) INIT ('Welcome to Preppy, '),
        2 * CHAR(4) INIT (' '), /* Space for version */
        2 * CHAR(9) INIT (' here at '),
        2 * CHAR(16) INIT (' '); /* Space for time and date */
 
  DCL 1 WELCOME,
        2 * CHAR(19),
        2 VERSION CHAR(4),
        2 * CHAR(9),
        2 TIME CHAR(5),
        2 * CHAR(1),
        2 DATE CHAR(10);
 
  DCL RAW_TIME CHAR(11);
 
%PAGE( ARG=ZW1$CP6_DCB_INIT_LO_DO, PAGE=YES );
 /*
    Before anything else make sure that
    the dcbnumbers for M$LO and
    M$DO are right so if any errors
    occur we can use them in M$ERRMSG
    in ZWH$ERR
    */
    ZWI$M$LO# = DCBNUM(M$LO);
    ZWI$M$LO$ = DCBADDR(ZWI$M$LO#);
 
    ZWI$M$DO# = DCBNUM(M$DO);
    ZWI$M$DO$ = DCBADDR(ZWI$M$DO#);
 
    DEFAULT_OPEN_FPT.V.DCB# = ZWI$M$LO#;
    CALL M$OPEN(DEFAULT_OPEN_FPT) ALTRET(DEFAULT_OPEN_ERROR);
 
 /*Check to see if M$LO and M$DO are same*/
    CALL M$CORRES(DO_LO_CORRES_FPT) ALTRET(DO_SAME_AS_LO);
    ZWI$OPTION.DO_LO_SAME = '0'B;
 
DO_SAME_AS_LO: ;
 
    RETURN;
 
 %PAGE(ARG=ZW1$CP6_DCB_INIT, PAGE=YES );
ZW1$CP6_DCB_INIT: ENTRY ALTRET;
 
    CALL M$PROMPT(PROMPT_FPT) ALTRET(IGNORE_PROMPT_ERROR);
IGNORE_PROMPT_ERROR: ;
 
    ZWI$M$SI# = DCBNUM(M$SI);
    ZWI$M$SI$ = DCBADDR(ZWI$M$SI#);
 
 /* Normally the compiler writes the preprocessed source thru
    M$SO.  In preppy's case we want to write the preprocessed
    source thru M$OU.  Set M$SO to be M$OU and the listing
    driver can still generate listings to M$SO.
 */
    ZWI$M$SO# = DCBNUM(M$OU);
    ZWI$M$SO$ = DCBADDR(ZWI$M$SO#);
 
    ZWI$M$UI# = DCBNUM( M$UI );
    ZWI$M$UI$ = DCBADDR( ZWI$M$UI# );
 
 /*
    If a dm or a pm or a lo listing
    are desired and ou is not specified:
    Then make M$OU a temp file
    */
    DO CASE ZWI$OPTION.SYSTEM;
 
       CASE( %$GCOS );
         ZWI$M$OU# = DCBNUM(G$OU);
         ZWI$G$OU# = DCBNUM(M$OU);
 
       CASE( ELSE );
         ZWI$M$OU# = DCBNUM(M$OU);
         ZWI$G$OU# = DCBNUM(G$OU);
       END;
 
    ZWI$M$OU$ = DCBADDR(ZWI$M$OU#);
    ZWI$G$OU$ = DCBADDR(ZWI$G$OU#);
 
 /* This code is not needed for the preprocessor and the dcb
    assignments mess it up - so get rid of it.
 */
    IF ZWI$OPTION.SYSTEM ~= %$GCOS
      THEN DO;
        IF ( ( ZWI$OPTION.LO OR ZWI$OPTION.PM OR ZWI$OPTION.DM OR ZWI$OPTION.MDM )
            AND NOT ZWI$OPTION.OU )
          THEN DO;
            SETDCB_KEYED.V.DCB# = ZWI$M$OU#;
            CALL M$OPEN(SETDCB_KEYED) ALTRET(SETDCB_KEYED_ERROR);
            END;
        END;
      ELSE DO;
        SETDCB_KEYED_SAVE.V.DCB# = ZWI$M$OU#;
        CALL M$OPEN(SETDCB_KEYED_SAVE) ALTRET(SETDCB_KEYED_ERROR);
        IF ( ZWI$OPTION.LO OR ZWI$OPTION.PM OR ZWI$OPTION.DM OR ZWI$OPTION.MDM )
            AND NOT ZWI$OPTION.OU
          THEN DO;
            SETDCB_RELATIVE.V.DCB# = ZWI$G$OU#;
            CALL M$OPEN(SETDCB_RELATIVE) ALTRET(SETDCB_RELATIVE_ERROR);
            END;
          ELSE DO;
            SETDCB_RELATIVE_SAVE.V.DCB# = ZWI$G$OU#;
            CALL M$OPEN(SETDCB_RELATIVE_SAVE) ALTRET(SETDCB_RELATIVE_SAVE_ERROR);
            END;
        END;
 
    ZWI$G$OUSAVE# = DCBNUM(G$OUSAVE);
    ZWI$G$OUSAVE$ = DCBADDR(ZWI$G$OUSAVE#);
    SETDCB_RELATIVE.V.DCB# = ZWI$G$OUSAVE#;
    CALL M$OPEN(SETDCB_RELATIVE) ALTRET(SETDCB_RELATIVE_ERROR);
 
    ZWI$M$LIST# = DCBNUM(M$LIST);
    ZWI$M$LIST$ = DCBADDR(ZWI$M$LIST#);
    SETDCB_CONSEC.V.DCB# = ZWI$M$LIST#;
    CALL M$OPEN(SETDCB_CONSEC) ALTRET(SETDCB_CONSEC_ERROR);
 
    ZWI$M$LU# = DCBNUM(M$LU);
    ZWI$M$LU$ = DCBADDR(ZWI$M$LU#);
    SETDCB_CONSEC.V.DCB# = ZWI$M$LU#;
    CALL M$OPEN(SETDCB_CONSEC) ALTRET(SETDCB_CONSEC_ERROR);
 
    ZWI$M$NS# = DCBNUM(M$NS);
    ZWI$M$NS$ = DCBADDR(ZWI$M$NS#);
    SETDCB_CONSEC.V.DCB# = ZWI$M$NS#;
    CALL M$OPEN(SETDCB_CONSEC) ALTRET(SETDCB_CONSEC_ERROR);
 
    ZWI$M$MAC# = DCBNUM(M$MAC);
    ZWI$M$MAC$ = DCBADDR(ZWI$M$MAC#);
    SETDCB_KEYED.V.DCB# = ZWI$M$MAC#;
    CALL M$OPEN(SETDCB_KEYED) ALTRET(SETDCB_KEYED_ERROR);
 
    ZWI$M$SYSTEM# = DCBNUM(M$SYSTEM);
    ZWI$M$SYSTEM$ = DCBADDR(ZWI$M$SYSTEM#);
    SET_SYS_FILE.V.DCB# = ZWI$M$SYSTEM#;
    REASSIGN_SYS_FILE.V.DCB# = ZWI$M$SYSTEM#;
    DO CASE ZWI$OPTION.SYSTEM;
       CASE ( %$CP6 ); /* CP6 sys file is inited into the dcb */
 
       CASE ( %$L6 );
         SET_SYS_FILE.NAME_ = VECTOR(L6_SYS_FILE_NAME);
         CALL M$OPEN( SET_SYS_FILE ) ALTRET ( SET_SYS_FILE_ERROR );
         CALL M$OPEN( REASSIGN_SYS_FILE ) ALTRET ( REASSIGN_SYS_FILE_ERROR );
 
       CASE ( %$GCOS );
         SET_SYS_FILE.NAME_ = VECTOR(G8_SYS_FILE_NAME);
         CALL M$OPEN( SET_SYS_FILE ) ALTRET ( SET_SYS_FILE_ERROR );
         CALL M$OPEN( REASSIGN_SYS_FILE ) ALTRET ( REASSIGN_SYS_FILE_ERROR );
 
       END;
 
    ZWI$M$LEVEL# = DCBNUM(M$LEVEL);
    ZWI$M$LEVEL$ = DCBADDR(ZWI$M$LEVEL#);
    SETDCB_CONSEC.V.DCB# = ZWI$M$LEVEL#;
    CALL M$OPEN(SETDCB_CONSEC) ALTRET(SETDCB_KEYED_ERROR);
 
    ZWI$M$DF# = DCBNUM(M$DF);
    ZWI$M$DF$ = DCBADDR(ZWI$M$DF#);
    SETDCB_KEYED.V.DCB# = ZWI$M$DF#;
    CALL M$OPEN(SETDCB_KEYED) ALTRET(SETDCB_KEYED_ERROR);
 
    ZWI$M$XREF# = DCBNUM(M$XREF);
    ZWI$M$XREF$ = DCBADDR(ZWI$M$XREF#);
    SETDCB_CONSEC.V.DCB# = ZWI$M$XREF#;
    CALL M$OPEN(SETDCB_CONSEC) ALTRET(SETDCB_CONSEC_ERROR);
 
    ZWI$M$MIIL# = DCBNUM(M$MIIL);
    ZWI$M$MIIL$ = DCBADDR(ZWI$M$MIIL#);
    SETDCB_KEYED.V.DCB# = ZWI$M$MIIL#;
    CALL M$OPEN(SETDCB_CONSEC) ALTRET(SETDCB_CONSEC_ERROR);
 
    ZWI$M$VIRTUAL# = DCBNUM(M$VIRTUAL_FILE);
    ZWI$M$VIRTUAL$ = DCBADDR(ZWI$M$VIRTUAL#);
    SETDCB_KEYED.V.DCB# = ZWI$M$VIRTUAL#;
    CALL M$OPEN(SETDCB_KEYED) ALTRET(SETDCB_KEYED_ERROR);
 
    ZWI$G$IMAGE# = DCBNUM(G$IMAGE);
    ZWI$G$IMAGE$ = DCBADDR(ZWI$G$IMAGE#);
    SETDCB_KEYED.V.DCB# = ZWI$G$IMAGE#;
    CALL M$OPEN(SETDCB_KEYED) ALTRET(SETDCB_KEYED_ERROR);
 
    ZWI$G$KEY_OU# = DCBNUM(G$KEY_OU);
    ZWI$G$KEY_OU$ = DCBADDR(ZWI$G$KEY_OU#);
    SETDCB_KEYED.V.DCB# = ZWI$G$KEY_OU#;
    CALL M$OPEN(SETDCB_KEYED) ALTRET(SETDCB_KEYED_ERROR);
 
    ZWI$M$DEBUGO# = DCBNUM(M$DEBUGO);
    ZWI$M$DEBUGO$ = DCBADDR(ZWI$M$DEBUGO#);
 /*
    Ensure that nothing get to the user unless
    debug is specified
    */
    IF ZWI$DEBUG_FLAGS = '0'B
      THEN DO;
        SETDCB_NO.V.DCB# = ZWI$M$DEBUGO#;
        CALL M$OPEN(SETDCB_NO) ALTRET(SETDCB_NO_ERROR);
        END;
 
 /*
    Print a message giving version, time and date
    if user is running on-line.
    */
 
    IF B$JIT$->B$JIT.MODE = %M_INT#
      THEN DO;
        WELCOME = MESS;
        TIME_FPT.DATE_ = VECTOR(WELCOME.DATE);
        TIME_FPT.TIME_ = VECTOR(RAW_TIME);
        CALL M$TIME(TIME_FPT) ALTRET(NO_TIME);
        WELCOME.TIME = SUBSTR(RAW_TIME,0,5);
NO_TIME: ;
        WELCOME.VERSION = ZWI$VERSION_TEXT;
        WELCOME_MESSAGE_FPT.BUF_ = VECTOR(WELCOME);
        CALL M$WRITE(WELCOME_MESSAGE_FPT) ALTRET(IGNORE_WRITE);
IGNORE_WRITE: ;
        END;
 
    RETURN;
 
 %PAGE(ARG=ERROR PROCESSING,PAGE=YES);
DEFAULT_OPEN_ERROR: ;
    ERROR_DCB_NUMBER = DEFAULT_OPEN_FPT.V.DCB#;
    GOTO SETDCB_ERROR;
 
SETDCB_RELATIVE_ERROR: ;
    ERROR_DCB_NUMBER = SETDCB_RELATIVE.V.DCB#;
    GOTO SETDCB_ERROR;
 
SETDCB_RELATIVE_SAVE_ERROR: ;
    ERROR_DCB_NUMBER = SETDCB_RELATIVE_SAVE.V.DCB#;
    GOTO SETDCB_ERROR;
 
SETDCB_NO_ERROR: ;
    ERROR_DCB_NUMBER = SETDCB_NO.V.DCB#;
    GOTO SETDCB_ERROR;
 
SETDCB_CONSEC_ERROR: ;
    ERROR_DCB_NUMBER = SETDCB_CONSEC.V.DCB#;
    GOTO SETDCB_ERROR;
 
SET_SYS_FILE_ERROR: ;
    ERROR_DCB_NUMBER = SET_SYS_FILE.V.DCB#;
    GOTO SETDCB_ERROR;
 
REASSIGN_SYS_FILE_ERROR: ;
    ERROR_DCB_NUMBER = REASSIGN_SYS_FILE.V.DCB#;
    GOTO SETDCB_ERROR;
 
SETDCB_KEYED_ERROR: ;
    ERROR_DCB_NUMBER = SETDCB_KEYED.V.DCB#;
 
SETDCB_ERROR: ;
    ERROR_CODE=B$TCB$->B$TCB.ALT$->B$ALT.ERR;
    CALL ZWH$MONERR$PRINT( ZWI$RECNO, ZWI$INPUT_KEY, ERROR_CODE, ERROR_DCB_NUMBER );
    CALL ZWH$ERR$PRINT( ZWI$RECNO, ZWI$INPUT_KEY, %ZW1$FCG_MID, %E$SETDCB_ERROR, 4 );
 
    ALTRETURN;
 
END ZW1$CP6_DCB_INIT_LO_DO;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
 
/*F*
    NAME: ZW1$CP6_TRAP_BREAK_INIT
*/
%EJECT;
ZW1$CP6_TRAP_BREAK_INIT: PROC;
 
%INCLUDE PREPPY_C61;
%INCLUDE PREPPY_C62;
 
%PAGE(ARG=Fpts);
%FPT_INT(FPTN=INT_FPT,UENTRY=ZWI$BREAK_HANDLER);
%FPT_TRAP (FPTN=TRAP,ARITHMETIC=ZWI$TRAP,ERRORS=ZWI$TRAP,PROGRAMMED=ZWI$TRAP,
 DIVIDE_CHECK=TRAP,OVERFLOW=TRAP,COMMAND=TRAP,
 IPR=TRAP,LOCKUP=TRAP,MEMORY=TRAP,MISSING_PAGE=TRAP,
 MISSING_SEG=TRAP,SECURITY_1=TRAP,SECURITY_2=TRAP,
 DERAIL=TRAP,FAULT_TAG=TRAP,MME=TRAP,STCLASS=CONSTANT);
 
%PAGE(ARG=Entry Dcls);
%ZWI$BREAK_HANDLER;
%ZWI$TRAP;
 
%PAGE(ARG=ZW1$TRAP_BREAK_INIT,PAGE=YES);
    CALL M$INT(INT_FPT) ALTRET(IGNORE_INT_ERROR);
IGNORE_INT_ERROR: ;
 
    CALL M$TRAP(TRAP) ALTRET(IGNORE_TRAP_ERROR);
IGNORE_TRAP_ERROR: ;
 
END ZW1$CP6_TRAP_BREAK_INIT;
