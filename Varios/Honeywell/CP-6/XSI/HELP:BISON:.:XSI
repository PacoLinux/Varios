BISON is a public domain version of YACC(Yet Another Compiler Compiler).  It
creates tables that execute an LALR parsing algorithm from a context-free
grammar.
   !BISON.X [options] INFID
 
options
      Are one or more BISON options separated by spaces. Options are:  -d, -l,
-o OUTFID, -t, -v
 
INFID
      Identifies the source file.  By convention the name should end
      with :y.
 
The output file is created by either replacing the ':y' of the input file with
':c' or by using the name specified with the -o option.
 
The account the output file is created in is the account specified with -o
option, the account specified on the input file, or the account the program is
running in.
 
For example:
 
      !BISON.X -o .MYACCT foo:y.TEMPACCT
 
creates the output file:   foo:c.MYACCT
This BISON parser generator was obtained from the Free Software Foundation.
The following disclaimer is required:
 
copyright (C) 1984 Bob Corbett and Richard Stallman
 
Permission is granted to anyone to make or distribute verbatim copies of this
program provided that the copyright notice and this permission notice are
preserved; and provided that the recipient is not asked to waive or limit his
right to redistribute copies as permitted by this permission notice; and
provided that anyone possessing an executable copy is granted access to copy
the source code, in machine-readable form, in some reasonable manner.
 
Permission is granted to distribute derived works or enhanced versions of this
program under the above conditions with the additional condition that the
entire derivative or enhanced work must be covered by a permission notice
identical to this one.
 
Anything distributed as part of a package containing portions derived from this
program, which cannot in current practice perform its function usefully in the
absence of what was derived directly from this program, is to be considered as
forming, together with the latter, a single work derived from this program,
which must be entirely covered by a permission notice identical to this one in
order for distribution of the package to be permitted.
 
In other words, you are welcome to use, share and improve this program.  You
are forbidden to forbid anyone else to use, share and improve what you give
them.   Help stamp out software-hoarding!
For a list of options/topics, type:
      HELP (BISON) TOPICS
For HELP on a specific option, type:
      HELP (BISON) option
Help file for: BISON.X
 **************************************************************
 *                                                            *
 *  Copyright (c) Bull HN Information Systems Inc., 1989      *
 *                                                            *
 **************************************************************
An action may be associated with every grammar rule.   Every time a grammar
rule is recognized the action will occur.  Actions can return values, and
access values returned by previous actions.  For example:
 
BEER  :  'beer'   {printf("Boy that hit the spot\n");}
 
So  every time the string literal beer is encountered, the message Boy that hit
the spot will appear.  Note that actions must be enclosed in braces "{" "}".
An action can contain any legal C code.
 
To return values in an action, the pseudo-variable "$$" is set to some value.
For example if the action should return the value 1
      {$$ = 1;}
 
To obtain values returned by previous actions and the lexical analyzer the
action may use the pseudo variables $1,$2 ... which correspond to the values
returned by the components of the right side of the rule from left to right. So
if the rule is
      expr :   A '+' B
      $1 - contains the value returned by A
      $2 - contains the value returned by '+' (came from lexical analyzer)
      $3 - contains the value returned by B
 
The action to get the assignment above to work correctly is
 
      expr : A '+' B {$$ = $1 + $3;}
 
assuming A and B return their values correctly.
 
 
The default action is {$$ = $1;} so rules of the form
 
 A    :  B;
 
often do not need actions.  Sometimes if is desirable to get control before the
rule is fully parsed. So BISON does allow imbedded actions for example
 
      A  :  B
               {$$ = 1;}
            C
               {X = $2; Y = $3;}
         ; sets x to 1 and y to the value returned by C.
 
A set of grammar rules is ambiguous if there is some input string that can be
constructed in two or more different ways. For example
 
      expr  :  expr '-' expr
with the string
 
      expr - expr - expr
can yield two different results
      (expr - expr) - expr    (left association)
      expr - (expr - expr)    (right association)
 
This is what is known as a shift/reduce conflict.  It occurs when the input has
been read up to the point of expr - expr.  This input text can be reduced to
just an expression and eventually yields left association.  But the input could
continue to be read, (shifting) until the input string is expr - expr - expr
and then get the results of right association.
 
BISON can also encounter a reduce/reduce conflict when 2 or more legal
reductions can occur on a string.
 
BISON invokes these two rules by default:
      1) In a shift/reduce conflict the default is to do the shift.
      2) In a reduce/reduce conflict, the default is to reduce the
         earlier grammar rule (in the input sequence).
 
For more information type:
      HELP (BISON.X) PRECEDENCE
 
971110 [AT] BISON.X Has been made year 2000 ready. Please see star #42942
900329
Improved error reporting inside BISON.  Now when a parse error occurs, it
reports on stderr what tokens would have been valid at the point of the error.
900212
Installed version 1-06 of GNU BISON.
890822
Initialize some pointer variables that assumed 0 = NULL.
890727
Removed the :tab part of the name from the output files.
890622
Updated the entire program with a new(GNU) version of the program.
890206
Released in the E02 X account
For a more complete description of BISON a tex manual can be obtained from
BISON_SIT1.:XSI
 
-t
 
This option will output a definition of the macro YYDEBUG into the parser file,
so that the debugging facilities are compiled.
 
The declarations section contains the declarations of the symbols used in the
RULES section.
 
All names that represent tokens must be declared in the declaration section.
This is done by:  %token   name1 name2 ... nameN
 
Every name that is not declared as a token is assumed to be a nonterminal
symbol. Every nonterminal must appear on the left-hand side of at least one
rule.
 
One nonterminal symbol must be the starting symbol of the parser.  This
starting symbol is the top of the parsing tree.  By default the parser assumes
that the left-hand side of the first rule is the start symbol.  It is possible
(and good practice) to declare the start symbol in the declaration section with
the %start keyword (e.g., %start START_SYMBOL).
 
-d
 
This option writes an extra output file containing the macro definitions for
the token type names defined in the grammar.  The output is essential if the
definition of yylex is contained in a seperate source file.
 
If the parser output file is 'name:c' then this file is named 'name:h'
 
Unfortunately not all input to a parser is correct so error handling must be
considered.  BISON provides a crude form of error handling.  There is a token
name "error" that is reserved for error handling and can be used in grammar
rules where errors are expected.  The parser pops its stack until it enters a
state where the token "error" is legal and then behaves as if the token "error"
is the current lookahead token and performs the action encountered.  If no
action has been specified for "error", the processing halts.
 
In order to prevent a cascading of error messages, the parser remains in the
error state until three tokens have been successfully read and shifted.  If an
error occurs while already in the error state, no message is given.  With the
rule
 
      stat  : error ';'
 
When an error occurs the parser continues to parse until a ";" is found and
then returns back to "normal processing".
 
Sometimes you may not want the parser to wait till it processes three input
tokens to think it has recovered from an error correctly (This could especially
be true in interactive applications).  So BISON supplies a statement yyerrok;
which resets the parser to its normal mode.
 
The token seen immediately after the "error" symbol is the input token at which
the error was discovered.  Sometimes this is not what was desired so BISON
provides a way to clear the previous lookahead token.  This is done with the
statement yyclearin;
 
This example gives the complete BISON specification for a small desk
calculator.  The desk calculator has 26 registers labeled 'a' - 'z' and accepts
'+', '-', '*', '/'. '%' (mod) and assignment.
 
%{
#include <stdio:h>
 
int regs[26];
int base;
%}
 
%start   list
%token   DIGIT LETTER
%left    '+' '-'
%left    '*' '/' '%'
%left    UMINUS   /* supplies precedence for unary minus */
%%
 
list     :     /* empty */
         |     list stat '\n'
         |     list error '\n'
                  { yyerrok; }
         ;
 
stat     :     expr
                  { printf ("%d\n", $1); }
         |     LETTER '=' expr
                  { regs[$1] = $3; }
         ;
 
expr     :     '(' expr ')'
                  { $$ = $2; }
         |     expr '+' expr
                  { $$ = $1 + $3; }
         |     expr '-' expr
                  { $$ = $1 - $3; }
         |     expr '*' expr
                  { $$ = $1 * $3; }
         |     expr '/' expr
                  { $$ = $1 / $3; }
         |     expr '%' expr
                  { $$ = $1 % $3; }
         |     '-' expr    %prec UMINUS
                  { $$ = - $2; }
         |     LETTER
                  { $$ = regs[$1]; }
         |     number
         ;
 
number   :     DIGIT
                  { $$ = $1;
                    base = ($1 == 0) ? 8 : 10;
                  }
         |     number DIGIT
                  { $$ = base * $1 + $2; }
 
%%
 
yylex ()       /* lexical analysis routine */
{
 
   int   c;
 
   while (( c = getchar() == ' ') ; /* skip blanks */
 
   if (islower(c)) {
      yylval = c - 'a';
      return (LETTER);
   }
   if (isdigit(c)) {
      yylval = c - '0';
      return (DIGIT);
   }
   return (c);
}
 
The general format of a BISON input file is:
 
[declarations]
%%
rules
[%%
programs]
 
The user must supply a lexical analyzer which reads the input stream and
communicates tokens (and possibly values) to the parser.  The lexical analyzer
must be called yylex.  The yylex function returns an integer which represents
the type of the token.  The value to be associated with the token is assigned
to the integer variable yylval.
 
Obviously the parser and lexical analyzer must agree on the token numbers to
work correctly.  This is what the -d option allows the user to create a define
file of these tokens.  If both files include this file, they will agree with
each other.
 
A very useful tool for constructing lexical analyzer is LEX.X.  For more
information type !HELP (LEX.X)
 
-l
 
This option will not put any #line preprocessor commands in the parser file.
Ordinarily BISON puts them in the parser file so that the C compiler will
associate errors with your source file.  This option causes them to associate
errors with the parser file, treating it as an independent source file in its
own right.
 
HELP is available for the following BISON options:
 
DEBUG      DEFINES     OUTFID      NOLINE       VERBOSE
 
-o [OUTFID][.ACCT]
 
Specifying this option creates the output file with the name OUTFID in the
account ACCT.
 
Bill Eme, LADC
Sometimes the default rules of resolving conflict in a BISON grammar are not
what is desired. This is especially true in the world of parsing arithmetic
expressions.  The easiest way to describe this type of expressions is by the
idea of precedence level for operators and associativity.  If all the rules are
written in the form of
 
      expr  :  expr  OP expr;
      expr  :  UNARY expr;
 
a very ambiguous grammar will result.  But by specifying precedence and the
associativity of the binary operators the conflicts will be resolved correctly.
 
The precedence and associativity of the tokens are specified in the declaration
section with the BISON keywords %left, %right and %nonassoc followed by a list
of tokens.  All tokens on the same line are assumed to have the same
precedence, with the lines being listed in order of increasing precedence.  So
for a simplified definition of expressions we get
 
      %right   '='
      %left    '+' '-'
      %left    '*' '/'
 
This solves the problem of binary operators, but what about unary operators?
They also need a precedence assigned to them, but sometimes a unary and binary
operator have the same symbol (e.g., '-') The unary operator must have the same
precedence as '*' and not what the binary operator '-' has.  To override a
precedence of an operator the % prec keyword can be used to associate a
precedence with that rule.  The keyword follows the body of the grammar rule
and is followed by a token name or string literal. So a unary minus would look
like
 
      %left '+' '-'
      %left '*' '/'
      %%
      expr  :  '-' expr %prec '*' {/ Action goes here */ }
            ;
 
a grammar rule has the form:
      A : BODY ;
 
A - is a nonterminal token
BODY - is a sequence of zero or more names or string literals.
: and ; are BISON punctuation.
 
A name is made up of letters, dot ".", underscore "_", and digits.  A name can
either represent a token or a nonterminal.
 
A string literal consists of characters enclosed in single quotes "'".
 
When there are several grammar rules that contain the same left hand side a
vertical bar "|" can be used to save typing. For example:
 
DRINKS   :  BEER;
DRINKS   :  WINE;
DRINKS   :  SCOTCH WATER;
 
can also be specified by:
 
DRINKS   :  BEER
         |  WINE
         |  SCOTCH WATER;
 
It is extremely hard to write readable BISON files, but if a standard style is
used it makes it easier on everybody to make changes to BISON files.  Here a
few simple style rules that should be followed
 
      1) Use capital letters for token names and all lowercase letters
         for nonterminal names.
 
      2) Put grammar rules and actions on separate lines.
 
      3) Put all rules with the same left-hand side together.  Put
         the left-hand side in only once and let all the following
         rules begin with a vertical bar,
 
      4) Put the semicolon only after the last rule with a given
         left-hand side, and put the semicolon on a separate line.
 
 
-v
 
This option writes an extra output file containing verbose descriptions of the
parser states and what is done for each type of lookahead token in that state.
 
The file's name is made be removing tab:c or :c from the output file name and
adding :output instead.
 
BISON.X
AID=PROGRAMMING
TOOL=BISON.X
Creates an LR(1) parser from a context-free grammar.
CHANGES
OPTIONS
