/*M* PRIVDISP Displays Privileges out of a :USERS file. */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*P* NAME: PRIVDISP
        PURPOSE: PRIVDISP is used to show what users have given privileges.
        DESCRIPTION:  Invoke PRIVDISP by either --
           !PRIVDISP.X usersfile ON ,list (privlist)
                    or --
           !PRIVDISP.X usersfile ON ,list
           privlist
        Privlist is a list of Privilege and/or Processor Privilege
        names.  (Second-flavor invocation reads from M$ME.)
*/
PRIVDISP: PROC MAIN;
%INCLUDE CP_6;
%SUB NIL_PASSWORD## = "'615502466037060222751600'O";
%SET PASSWORD# = 72;
%F$DCB;
%INCLUDE CP_6_SUBS;
%INCLUDE XU_MACRO_C;
%INCLUDE AS_SUPER_C;
%INCLUDE KL_SUPER_C;
DCL B$JIT$ PTR SYMREF;
%INCLUDE B$JIT;
/*****     DCBs     *****/
%M$DCB(DCBN=M$SI,ASN=FILE,FUN=IN,NAME=':USERS',ACCT=':SYS');
%M$DCB (DCBN=M$HLP, ASN=FILE, FUN=IN, NAME=':HLP', ACCT=':SYS');
DCL M$LO DCB;
DCL M$DO DCB;
DCL M$ME DCB;
/*****     Data for command reading and parse     *****/
DCL CMDBUF CHAR(256) STATIC;
DCL CMDLEN UBIN STATIC;
DCL BASEDCMD CHAR(CMDLEN) BASED;
%FPT_READ(FPTN=CMDREAD,DCB=M$ME,STCLASS=STATIC,BUF=CMDBUF);
DCL PRIVDISPCMD UBIN SYMREF;
DCL X$PARSE ENTRY(1)ALTRET;
%P_PCB (STCLASS=STATIC,T=CMDBUF,R=PRIVDISPCMD);
%PARSE$OUT(STCLASS=BASED);
%PARSE$SYM(STCLASS=BASED);
%FPT_GDP(FPTN=GETPG,STCLASS=STATIC,PAGES=1,RESULTS=GPPAGE);
%VLP_VECTOR(FPTN=GPPAGE,STCLASS=STATIC);
DCL 1 VBASED BASED,
      2 WBOUND UBIN HALF UNAL,
      2 * UBIN HALF UNAL,
      2 P$ PTR;
/*****     Data for reporting errors     *****/
%FPT_ERRMSG(FPTN=ERRMSG,STCLASS=STATIC,BUF=CMDBUF,OUTDCB1=M$DO);
DCL B$TCB$ PTR SYMREF;
%B$TCB(STCLASS="BASED(B$TCB$)");
%B$ALT;
/*****     Temps     *****/
DCL I SBIN STATIC;
DCL J SBIN STATIC;
DCL K SBIN STATIC;
DCL L SBIN STATIC;
DCL M SBIN STATIC;
/*****     Data for processing Privileges     *****/
DCL 1 WHICH STATIC DALIGNED,
      2 PR_OPTS,
        3 PRIVS BIT(36) INIT ('0'B),
        3 PPRIVS BIT(36) INIT ('0'B),
      2 OTHERS BIT(36) INIT ('0'B);
DCL PARSEBITS(0:143) REDEF WHICH BIT(1) UNAL;
DCL BITNAME0(0:11) CHAR(36) CONSTANT INIT(
        'FME FMB FMS FMD FMR ??? ??? ??? ??? ',
        '??? ??? ??? ??? ??? DIS ??? SYC ASV ',
        'GPP ??? SYL MFE CFE ??? ??? IQW IOQ ',
        'EXP PM  TND JIT ??? MSY MXM EXM SPM ',
        'CND CNC EFT EL  LBL PGD PGC SPD SPC ',
        'SUP FEP SUA SUW SUF PAD SUD VOL REP ',
        'RAT ??? ??? ??? ??? ??? ??? ??? ??? ',
        '??? ??? ??? ??? ??? ??? ??? ??? ??? ',
        'PWD ??? ??? ??? ??? ??? ??? ??? ??? ',
        '??? ??? ??? ??? ??? ??? ??? ??? ??? ',
        '??? ??? ??? ??? ??? ??? ??? ??? ??? ',
        '??? ??? ??? ??? ??? ??? ??? ??? ??? ');
DCL BITNAMES(0:107) REDEF BITNAME0 CHAR(4);
DCL 1 USEROR STATIC DALIGNED,
      2 PRIVS BIT(36),
      2 PPRIVS BIT(36);
DCL USERORBITS(0:71)REDEF USEROR BIT(1)UNAL;
DCL CHAR4 CHAR(4) BASED CALIGNED;
%FPT_OPEN(FPTN=OPENUSERS,DCB=M$SI,FUN=IN,SHARE=ALL,STCLASS=CONSTANT);
%FPT_READ(FPTN=READUSERS,DCB=M$SI,STCLASS=STATIC);
%AS_USERS(STR_NAME=AS$USERS,STCLASS="BASED(USERS$)");
DCL USERS$ PTR STATIC;
DCL LOBUF CHAR(256)STATIC;
DCL 1 LO2 REDEF LOBUF,
      2 ACCT CHAR(8),
      2 * CHAR(1),
      2 UNAME CHAR(12),
      2 * CHAR(1),
      2 YESORNO(0:21)CHAR(4),
      2 * CHAR(146);
DCL YORNO$(0:107) PTR STATIC INIT(ADDR(NIL)*0);
%FPT_MONINFO(FPTN=GETSITE,STCLASS=STATIC);
%VLR_SITEINFO(FPTN=SITEINFO,STCLASS="BASED(USERS$)");
%FPT_PRIV(FPTN=GETSPCLMM,STCLASS=CONSTANT,AUTH=YES,PRIV=%PR_SPCLMM#);
%FPT_TIME(FPTN=GETTIME,STCLASS=CONSTANT,SOURCE=CLOCK,DEST=EXT,
        TIME=LO2.ACCT,DATE=LO2.UNAME);
%FPT_WRITE(FPTN=WRLO,DCB=M$LO,STCLASS=STATIC,BUF=LOBUF);
%FPT_CLOSE(FPTN=LOSAVE,DCB=M$LO,STCLASS=STATIC,DISP=SAVE);
/*****  Stuff for reading :HLP *****/
%FPT_OPEN (FPTN=OPEN_HLP, DCB=M$HLP, FUN=IN, SHARE=ALL, STCLASS=CONSTANT);
%FPT_READ (FPTN=READ_HLP, DCB=M$HLP, BUF=KL_DREC, KEYS=YES, KEY=HLP_KEY);
%VLP_NAME (FPTN=HLP_KEY, LEN=20, NAME=' ');
%KL_DREC (LAST=",");
     %KL_FEBLK (LVL=2,STCLASS=STATIC,RCNT=31);
DCL HLP_KEYLEN UBIN WORD;
/*****     *****/
%EJECT;
        CALL M$GDP(GETPG)ALTRET(ERR$TCB$MERR);
        P_PCB.WORK$=ADDR(GPPAGE)->VBASED.P$;
        P_PCB.WKSZ=ADDR(GPPAGE)->VBASED.WBOUND+1;
        IF B$JIT.CCARS<B$JIT.CCDISP+3 THEN CALL M$XXX;
        CMDBUF=SUBSTR(B$JIT.CCBUF,B$JIT.CCDISP+1,
                 B$JIT.CCARS-B$JIT.CCDISP-2);
        P_PCB.NCHARS=B$JIT.CCARS-B$JIT.CCDISP-2;
        CALL X$PARSE(P_PCB)ALTRET(ERR$PCB);
        DO I=0 TO P_PCB.OUT$->OUT$BLK.NSUBLKS-1;
           PARSEBITS(P_PCB.OUT$->OUT$BLK.SUBLK$(I)->OUT$BLK.CODE)=
              '1'B;
           END;
/*
        Now we have the bits set up that we are looking for.
*/
        READUSERS.BUF_=VECTOR(ADDR(GPPAGE)->VBASED.P$->AS$USERS);
        USERS$=ADDR(GPPAGE)->VBASED.P$;
        IF NOT B$JIT.PRIV.ACTIVE&%PR_SPCLMM# THEN
           CALL M$SPRIV(GETSPCLMM)ALTRET(FORGETIT);
        GETSITE.SITEINFO_=VECTOR(SITEINFO);
        CALL M$MONINFO(GETSITE)ALTRET(FORGETIT);
        WRLO.BUF_=VECTOR(SUBSTR(SITEINFO.SITE_NAME#.C,0,
              SITEINFO.SITE_NAME#.L));
        IF WRLO.BUF_.BOUND<200 THEN
           CALL M$WRITE(WRLO);
        WRLO.BUF_=VECTOR(LOBUF);
FORGETIT:;
        J=0;
        LOBUF=' ';
        CALL M$TIME(GETTIME);
        DO I = 0 TO 107;
           IF PARSEBITS(I) THEN DO;
              LO2.YESORNO(J)=BITNAMES(I);
              YORNO$(I)=ADDR(LO2.YESORNO(J));
              J=J+1;
              END;
           END;
        WRLO.BUF_.BOUND=POFFC(ADDR(LO2.YESORNO(J)),ADDR(LOBUF))-1;
        CALL M$WRITE(WRLO);
        CALL M$OPEN(OPENUSERS)ALTRET(ERR$TCB$MERR);
        CALL M$OPEN (OPEN_HLP) ALTRET (ERR$TCB$MERR);
%EJECT;
NXTREC: CALL M$READ(READUSERS)ALTRET(EOFUSERS);
        IF DCBADDR(DCBNUM(M$SI))->F$DCB.ARS#<
           POFFC(ADDR(AS$USERS.PRIV(0)),ADDR(AS$USERS)) THEN
           GOTO NXTREC;
        LOBUF=' ';
        LO2.ACCT=AS$USERS.ACCT;
        LO2.UNAME=AS$USERS.NAME;
        USEROR.PRIVS=AS$USERS.PRIV(0)|AS$USERS.PRIV(1)|AS$USERS.PRIV(2);
        USEROR.PPRIVS=AS$USERS.PPRIV(0)|AS$USERS.PPRIV(1)|
           AS$USERS.PPRIV(2);
        USEROR = USEROR & WHICH.PR_OPTS;
        K=0;
        DO I=0 TO 71;
           IF USERORBITS(I) THEN DO;
              K=K+1;
              YORNO$(I)->CHAR4='YES ';
              END;
           END;
        IF  K > 0  &  PARSEBITS(%PASSWORD#)  THEN DO;
          CALL CONCAT (HLP_KEY.NAME#, LO2.ACCT, LO2.UNAME);
          CALL INDEX1 (HLP_KEYLEN, ' ', HLP_KEY.NAME#, 8);
          HLP_KEY.L# = HLP_KEYLEN;
          CALL M$READ (READ_HLP) WHENRETURN DO;
            IF KL_DREC.ENCODPW ~= NIL_PASSWORD## THEN
              YORNO$(%PASSWORD#)->CHAR4 = 'YES ';
           END; WHENALTRETURN DO;
            YORNO$(%PASSWORD#)->CHAR4 = '????';
          END;
        END;
        IF K>0 THEN
           CALL M$WRITE(WRLO);
        GOTO NXTREC;
EOFUSERS: CALL M$CLOSE(LOSAVE);
        CALL M$EXIT;
ERR$TCB$MERR: ERRMSG.CODE_=VECTOR(B$TCB.ALT$->B$ALT.ERR);
        CALL M$ERRMSG(ERRMSG);
        CALL M$ERR;
ERR$PCB: ERRMSG.CODE_=VECTOR(P_PCB.ERROR);
        CALL M$ERRMSG(ERRMSG);
        CALL M$ERR;
END PRIVDISP;
