/*M* REAP - supplemental PMON */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* DMR,PLM=5,IND=5,CTI=5,SDI=5,MCL=10,CSI=0,ECI=0 */
                                   /*
                                        Author: Nick Briggs, CARLETON
                                        Date: 12/85
                                                                  */
%SET LISTSUB='1'B;
 
REAP_INIT: PROC;
 
%INCLUDE CP_6;
%INCLUDE CP_6_SUBS;
%INCLUDE B$JIT;
%INCLUDE B_SEGIDS_C;
%INCLUDE B$OBJECT_C;
%INCLUDE B$ROSEG;
%INCLUDE XU_FORMAT_C;
 
   /* Bug fixes, October 8, 1984.  JAS
 
      1) Several monitor service calls had no altreturn label.
 
      2) M$MERC did not seem to print the altreturn error message, so
         it was replaced with a call to M$ERRMSG.
   */
 
 
%B$TCB;
%B$ALT;
%F$DCB;
DCL B$JIT$ PTR SYMREF READONLY;
DCL B$TCB$ PTR SYMREF READONLY;
DCL B$ROS$ PTR SYMREF READONLY;
DCL 1 B$SPCL5_ CONSTANT,                /* Pointer to the users ISR */
         2 OFFSET UBIN(24) UNAL INIT(0),
         2 SID BIT(12) UNAL INIT(%SPCL5SID);
DCL B$SPCL5$ REDEF B$SPCL5_ PTR;
%B$EXCFR;
%B$ECCB;
%B$FLT;
%B$HEAD (STCLASS=AUTO);
%B$EDEF (STCLASS="(0:0) BASED (EDEF$)");
%B$RUKEY (STCLASS=CONSTANT,TYPEINIT="(4)");
%B$RUKEY (NAME=RUKEY, STCLASS=AUTO, KEYSIZINIT=" ", TYPEINIT=" ");
%B$RUBIRTH (STCLASS=AUTO,COUNTINIT=" ");
DCL 1 BIRTH_INFO AUTO ALIGNED,
         2 W1 UBIN WORD,
         2 W2 UBIN WORD,
         2 UTS UBIN WORD;
%EJECT;
%LIST;
%SUB_EXC;
%SUB_ECCDELTA;
 
%EQU TSX='70'O;
%EQU TAG_FLTAG# = '10000'B;
%EQU LIB_START_ADDR = %BITBIN('000000700000'O);
 
%PLIST;
%EJECT;
%B$TREE_TABLE;
%B$TREE_TABLE (HDR_NAME=B$TREE_HEADER_ARRAY,NODE_NAME=B$TREE_NODE_ARRAY,STCLASS="(0:0) BASED");
%FPT_DRTN (FPTN=FPT_DRTN,STCLASS=CONSTANT,ECC=%ECC_DELTA#,SETECC=YES);
%FPT_DRTN (FPTN=DRTN,STCLASS=AUTO);
DCL 1 D_ CONSTANT,                 /* pointer to our fake static data area */
         2 * BIT(24) UNAL INIT('0'B),
         2 * BIT(12) UNAL INIT(%DS3SID);
DCL D$ REDEF D_ PTR;
DCL 1 EDEF_ CONSTANT,                   /*  pointer to B$EDEF ru record area */
         2 * BIT (24) UNAL INIT ('0'B),
         2 * BIT (12) UNAL INIT (%DS4SID);
DCL EDEF$ REDEF EDEF_ PTR;
%FPT_GDS (FPTN=FPT_GDS,STCLASS=CONSTANT);
%FPT_GDS (FPTN=GDS,STCLASS=AUTO);
%VLP_VECTOR (FPTN=GDS_RES,STCLASS=AUTO);
%FPT_OPEN (FPTN=OPEN_DO,STCLASS=CONSTANT,FUN=CREATE,ORG=UR);
%FPT_OPEN (FPTN=OPEN,STCLASS=AUTO);
%FPT_WRITE (FPTN=FPT_WRITE,STCLASS=CONSTANT);
%FPT_WRITE (FPTN=WRITE,STCLASS=AUTO);
%FPT_WRITE (FPTN=WRITE_PM,STCLASS=AUTO);
%FPT_READ (FPTN=FPT_READ,STCLASS=CONSTANT);
%FPT_READ (FPTN=READ,STCLASS=AUTO);
%FPT_GETDCB (FPTN=FPT_GETDCB,STCLASS=CONSTANT,MERGE=NO);
%FPT_GETDCB (FPTN=GETDCB,STCLASS=AUTO);
%FPT_OPEN (FPTN=FPT_OPEN,STCLASS=CONSTANT,FUN=CREATE,
            EXIST=OLDFILE,ASN=FILE,CTG=YES,TYPE='D ');
%FPT_OPEN (FPTN=OPEN_PM,STCLASS=AUTO);
%FPT_CLOSE (FPTN=FPT_CLOSE,STCLASS=CONSTANT,DISP=SAVE);
%FPT_CLOSE (FPTN=CLOSE,STCLASS=AUTO);
DCL REAP_TRAP ENTRY ASYNC;
%FPT_TRAP (FPTN=TRAP,ARITHMETIC=REAP_TRAP,ERRORS=REAP_TRAP,PROGRAMMED=REAP_TRAP,
           DIVIDE_CHECK=TRAP,OVERFLOW=TRAP,COMMAND=TRAP,
           IPR=TRAP,LOCKUP=TRAP,MEMORY=TRAP,MISSING_PAGE=TRAP,
           MISSING_SEG=TRAP,SECURITY_1=TRAP,SECURITY_2=TRAP,
           DERAIL=TRAP,FAULT_TAG=TRAP,MME=TRAP,STCLASS=CONSTANT);
%FPT_TRMPRG (FPTN=TRMPRG,STCLASS=CONSTANT,RSTBRK=YES);
%B$RUHEADKEY (STCLASS=CONSTANT);
DCL 1 BIRTHKEY CONSTANT,
         2 * UBIN BYTE CALIGNED INIT(5),
         2 * CHAR(5) CALIGNED INIT('BIRTH');
%VLP_NAME (FPTN=REAP_DCBNAME,NAME='REAP_DCB',STCLASS=CONSTANT);
%VLP_NAME (FPTN=REAP_FILE,NAME='*PM_DATA',STCLASS=CONSTANT);
%F_FDS (NAME=FDS, STCLASS=AUTO);
%F_FDS (STCLASS=CONSTANT);
DCL FDS_BUF CHAR(256);
%FPT_ERRMSG (FPTN=FPT_ERRMSG_CONST, STCLASS=CONSTANT);
%FPT_ERRMSG (FPTN=FPT_ERRMSG, STCLASS=AUTO);
DCL ERRMSG_BUF CHAR (256);
 
 
DCL SALUT CHAR(0) CONSTANT INIT(' REAP version A03');
DCL NOT_YC CHAR(0) CONSTANT INIT(' --> REAP must be associated at program startup.');
DCL HELP_MESS CHAR(0) CONSTANT INIT(' --> Well? what did you think was going to happen?');
DCL FMT_DIE CHAR(0) CONSTANT INIT(
 ' --> Uuurrp, something''s gone bad in REAP at location .%O!');
DCL ALIB_MESS CHAR(0) CONSTANT INIT (
 ' --> So! thought you''d sneak in the back way did you?');
DCL OLAY_MESS CHAR(0) CONSTANT INIT(
 ' --> Yecch! this program is overlaid!! Sigh...');
DCL BRK1 CHAR(0) CONSTANT INIT(' --> Nothing unexpected happens.');
DCL BRK2 CHAR(0) CONSTANT INIT(
 ' --> An angry dwarf leaps out and throws an axe at you... it misses.');
DCL BRK3 CHAR(0) CONSTANT INIT(' --> An angry dwarf leaps out and throws an axe at you... it hits you!');
DCL ALREADY CHAR(0) CONSTANT INIT(
 ' --> Sorry, there is no way to get anywhere from here.');
DCL FIN_MESS CHAR(0) CONSTANT INIT(
 ' --> REAP thinks your program finished up ok.');
DCL FMT_BAD_END CHAR(0) CONSTANT INIT(
 ' --> REAP thinks your program has problems (ECC=%D, SUBC=%D)%/     at IC=.%O, which was .%12O');
 
DCL LINKOUT CHAR(0) CONSTANT INIT(
 ' --> An cloud of orange smoke obscures REAP''s vision,');
DCL LINKBACK CHAR(0) CONSTANT INIT(
 ' --> when it clears, we appear to have survived unharmed.');
 
DCL TEMP CHAR(8) AUTO DALIGNED;
DCL 1 D BASED(D$) DALIGNED,             /* Our fake 'static' data */
         2 BREAK_COUNT SBIN WORD,
         2 DCB# UBIN WORD,              /* dcb# of REAP_DCB */
         2 OVERLAID BIT(1) ALIGNED,     /* '1'b = yes */
         2 ERROR BIT(1) ALIGNED,
         2 TREE_NODE$ PTR ALIGNED,
         2 EDEF_ BIT(72) ALIGNED,
         2 ROOT_MAX SBIN WORD,          /* highest address in program root */
         2 MAX_ADDR SBIN WORD,          /* highest address in any overlay */
         2 REAP_INDEX SBIN WORD,        /* index to REAP_BUF */
         2 REAP_BUF (0:1999) ALIGNED,
              3 OVERLAY# UBIN HALF HALIGNED,
              3 IC UBIN HALF HALIGNED;
DCL ECC SBIN WORD;  /* Read about ECC and SUBC in the monitor services manual*/
DCL SUBC SBIN WORD;                     /* under the M$DRTN description */
DCL OLAY SBIN WORD;           /* to keep overlay# in when fixing overlays */
DCL P1$ PTR;
DCL P2$ PTR;
DCL I SBIN;
DCL J SBIN;
DCL ARS SBIN;
DCL IC SBIN;
DCL TCB_STK$ PTR;
DCL 1 BASED$INST  WALIGNED BASED,
         2 Y      UBIN HALF HALIGNED,
         2 OPCODE UNAL,
              3 OP BIT (6) UNAL,
              3 REG UBIN (3) UNAL,
              3 EIS BIT (1) UNAL,
         2 I      BIT (1) UNAL,
         2 AR     BIT (1) UNAL,
         2 TAG    UNAL,
              3 TM BIT (2) UNAL,
              3 TD BIT (4) UNAL;
%VLP_REGS (FPTN=REGS, STCLASS=AUTO);
 
DCL X$WRITE       ENTRY(22);
 
%EJECT;
 /* First time entry point */
     CALL M$TRAP(TRAP) ALTRET(BAD_ERR);
     TCB_STK$ = B$TCB$->B$TCB.STK$;     /* Get this once to save time */
     OPEN = OPEN_DO;          /* Start by opening M$DO to write messages with*/
     OPEN.V_ = VECTOR(OPEN.V);
     OPEN.V.DCB# = %M$DO#;
     IF NOT DCBADDR(%M$DO#)->F$DCB.FCD# THEN CALL M$OPEN (OPEN) ALTRET(BAD_ERR);
 
     WRITE = FPT_WRITE;                 /* Tell em we are here */
     WRITE.V_ = VECTOR(WRITE.V);
     WRITE.BUF_ = VECTOR(SALUT);
     WRITE.V.DCB# = %M$DO#;
     CALL M$WRITE(WRITE) ALTRET(BAD_ERR);
 
     GDS = FPT_GDS;                     /* Now get our fake static data area */
     GDS.V_ = VECTOR(GDS.V);
     GDS.RESULTS_ = VECTOR(GDS_RES);
     GDS.V.SEGSIZE# = 3072;             /* THREE PAGES                        */
     GDS_RES.W2.SEGID# = %DS3SID;
     CALL M$GDS(GDS) ALTRET(BAD_ERR);
 
     D  = '0'B;                         /* clear all of our data */
 
     GETDCB = FPT_GETDCB;               /* Now get a dcb to write PM data to */
     GETDCB.V_ = VECTOR(GETDCB.V);
     GETDCB.DCBNAME_ = VECTOR(REAP_DCBNAME);
     GETDCB.DCBNUM_ = VECTOR(D.DCB#);
     CALL M$GETDCB(GETDCB) ALTRET(BAD_ERR);
 
     ECC = TCB_STK$->B$EXCFR.ECC;
     SUBC = TCB_STK$->B$EXCFR.SUBC;
 
     IF ECC=%ECC_DELTA# AND SUBC=%SC_STARTU# THEN DO;
         /* User started his program under REAP */
          OPEN_PM = FPT_OPEN;           /* Open REAP_DCB to a disk file */
          OPEN_PM.V_ = VECTOR(OPEN_PM.V);
          OPEN_PM.V.DCB# = D.DCB#;
          OPEN_PM.NAME_ = VECTOR(REAP_FILE);
          OPEN_PM.V.SETDCB# = '1'B;
          CALL M$OPEN(OPEN_PM) ALTRET(BAD_ERR);
          OPEN_PM.NAME_ = VECTOR(NIL);
          OPEN_PM.V.SETDCB# = '0'B;
          OPEN_PM.V.INITZ.REASSIGN# = '1'B;
          CALL M$OPEN(OPEN_PM) ALTRET(BAD_ERR);
 
          READ= FPT_READ;          /* Read the RU's head to get start addr */
          READ.V_ = VECTOR(READ.V);
          READ.BUF_ = VECTOR(B$HEAD);
          READ.V.DCB# = %M$LM#;
          READ.KEY_ = VECTOR(B$RUHEADKEY);
          READ.V.KEYS# = '1'B;
          CALL M$READ(READ) ALTRET (BAD_ERR);
 
                                        /* Get space for ENTDEF records */
          GDS.V.SEGSIZE# = B$HEAD.EPRECSIZE;
          GDS_RES.W2.SEGID# = %DS4SID;
          CALL M$GDS(GDS) ALTRET (BAD_ERR);
          D.EDEF_ = GDS_RES;
          D.REAP_INDEX = 0;
 
          READ.BUF_ = VECTOR(B$RUBIRTH); /* Read birth record */
          READ.KEY_ = VECTOR(BIRTHKEY);
          READ.V.KEYS# = '1'B;
          CALL M$READ(READ) ALTRET (BAD_ERR);
          BIRTH_INFO.W1 = 0;       /* W1+W2 are so PMDISP knows that this is*/
          BIRTH_INFO.W2 = BITBIN('400000000000'O); /* the birth info */
          BIRTH_INFO.UTS = B$RUBIRTH.CREATE_UTS;
          WRITE_PM = FPT_WRITE;         /* And write it out for PMDISP to use */
          WRITE_PM.V_ = VECTOR(WRITE_PM.V);
          WRITE_PM.BUF_ = VECTOR(BIRTH_INFO);
          WRITE_PM.V.DCB# = D.DCB#;
          CALL M$WRITE(WRITE_PM) ALTRET (BAD_ERR);
 
          IF B$ROS$->B$ROSEG.TREE$ ~= ADDR(NIL) THEN
               IF B$ROS$->B$ROSEG.TREE$->B$TREE_HEADER.NODES > 1 THEN
                    D.OVERLAID = '1'B;
 
          IF NOT D.OVERLAID THEN DO;
               D.MAX_ADDR = %LIB_START_ADDR;
             END;
          ELSE DO;
               P1$ = PINCRW(B$ROS$->B$ROSEG.TREE$,SIZEW(B$TREE_HEADER));
               D.TREE_NODE$ = P1$;
               D.ROOT_MAX = P1$->B$TREE_NODE.PADDR + P1$->B$TREE_NODE.PSIZE;
               D.MAX_ADDR = D.ROOT_MAX;
               DO I = 1 TO B$ROS$->B$ROSEG.TREE$->B$TREE_HEADER.NODES - 1;
                    P1$ = PINCRW(P1$,SIZEW(B$TREE_NODE));
                    IF P1$->B$TREE_NODE.PADDR + P1$->B$TREE_NODE.PSIZE > D.MAX_ADDR THEN
                         D.MAX_ADDR = P1$->B$TREE_NODE.PADDR+P1$->B$TREE_NODE.PSIZE;
                  END;
             END;
 
          IF D.OVERLAID THEN DO;
               WRITE.BUF_ = VECTOR(OLAY_MESS);
               CALL M$WRITE(WRITE) ALTRET (BAD_ERR);
             END;
 
          OLAY = 0;
          CALL FIXUP_OVERLAY;           /* we must fix the root anyway */
 
          DRTN=FPT_DRTN;
          DRTN.V_ = VECTOR(DRTN.V);
          DRTN.V.IC# = TCB_STK$->B$EXCFR.IC;
          DRTN.V.ECC# = %ECC_DELTA#;
          DRTN.V.SETECC# = '1'B;        /* Start executing at the beginning */
          CALL M$DRTN(DRTN) ALTRET(BAD_ERR);
        END;
 
 
     ELSE IF ECC=%ECC_DELTA# OR ECC=%ECC_ALIB# THEN DO;
               IF ECC = %ECC_ALIB# THEN
                    WRITE.BUF_ = VECTOR (ALIB_MESS);
               ELSE IF SUBC = %SC_YC# THEN
                         WRITE.BUF_ = VECTOR(NOT_YC);
                    ELSE
                         WRITE.BUF_ = VECTOR(HELP_MESS);
               CALL M$WRITE(WRITE) ALTRET (BAD_ERR);
               IF (ECC = %ECC_DELTA# AND SUBC = %SC_JOBSTEP#) OR
                    TCB_STK$->B$EXCFR.IC < 10
               THEN CALL M$EXIT;
               DRTN=FPT_DRTN;
               DRTN.V_ = VECTOR(DRTN.V);
               DRTN.V.IC# = TCB_STK$->B$EXCFR.IC;
               DRTN.V.ECC# = %ECC_DELTA#;
               DRTN.V.SETECC# = '1'B;
               DRTN.V.KLDELTA# = '1'B;
               CALL M$DRTN(DRTN) ALTRET(BAD_ERR);
             END;
     CALL M$ERR;
%EJECT;
/* This routine records the value of IC in the buffer */
RECORD_IC: PROC ALTRET;
        /* The only instructions we should see here are TSXn */
     IC = TCB_STK$->B$EXCFR.IC;
     D.REAP_BUF.IC (D.REAP_INDEX) = IC;
     IF IC ~= 0 THEN DO;
          D.REAP_BUF.OVERLAY#(D.REAP_INDEX) = 0;
          IF D.OVERLAID THEN       /* Figure out which overlay node we are in*/
               IF IC<D.ROOT_MAX OR IC>D.MAX_ADDR THEN D.REAP_BUF.OVERLAY#(D.REAP_INDEX) = 0;
               ELSE DO;
                    P1$ = PINCRW(B$ROS$->B$ROSEG.TREE$,SIZEW(B$TREE_HEADER));
                    DO I = 1 TO B$ROS$->B$ROSEG.TREE$->B$TREE_HEADER.NODES - 1;
                         P1$ = PINCRW(P1$,SIZEW(B$TREE_NODE));
                         IF P1$->B$TREE_NODE.FLGS.NOW_IN THEN
                              IF IC >= P1$->B$TREE_NODE.PADDR AND
                                   IC < P1$->B$TREE_NODE.PADDR + P1$->B$TREE_NODE.PSIZE THEN DO;
                                   D.REAP_BUF.OVERLAY#(D.REAP_INDEX) = I;
                                   GOTO READY;
                                 END;
                       END;
                  END;
READY:    ;
 
          IF D.REAP_INDEX < 1999 THEN
               D.REAP_INDEX = D.REAP_INDEX + 1;
          ELSE DO;
               WRITE_PM = FPT_WRITE;    /* Buffer full, time to write */
               WRITE_PM.V_ = VECTOR(WRITE_PM.V);
               WRITE_PM.BUF_ = VECTOR(D.REAP_BUF);
               WRITE_PM.V.DCB# = D.DCB#;
               CALL M$WRITE(WRITE_PM)
               WHENALTRETURN DO; ALTRETURN; END;
               D.REAP_INDEX = 0;
             END;
        END;
END RECORD_IC;
%EJECT;
FIXUP_OVERLAY: PROC;
     READ = FPT_READ;
     READ.V_ = VECTOR (READ.V);
     READ.V.DCB# = %M$LM#;
     READ.BUF_ = D.EDEF_;
     READ.KEY_ = VECTOR (RUKEY);
     READ.V.KEYS# = '1'B;
     RUKEY = B$RUKEY;
     RUKEY.NODE = OLAY;
     RUKEY.PAGE = 0;
     DO WHILE ('1'B);
          CALL M$READ (READ) ALTRET (DONE_FIX);
          ARS = DCBADDR(%M$LM#)->F$DCB.ARS#;
          DO J = 0 TO (ARS / SIZEC(B$EDEF(0))) - 1;
               P2$ = PINCRW(B$SPCL5$, B$EDEF.ISADDR(J));
               IF P2$->BASED$INST.OPCODE.OP = %TSX
                    AND B$EDEF.ISADDR(J) < D.MAX_ADDR THEN
                    P2$->BASED$INST.TAG = %TAG_FLTAG#;
             END;
          RUKEY.PAGE = RUKEY.PAGE + 1;
        END;
DONE_FIX: ;
END FIXUP_OVERLAY;
%EJECT;
/* This is the normal entry point.  First time goes to REAP_INIT */
REAP: ENTRY;
     TCB_STK$ = B$TCB$->B$TCB.STK$;     /* Get this once to save ptr loads */
     DRTN=FPT_DRTN;
     DRTN.V_ = VECTOR(DRTN.V);
     REGS = TCB_STK$->B$EXCFR.REGS;
     DRTN.REGS_ = VECTOR(REGS);
     DRTN.V.SETECC# = '1'B;
     DRTN.V.ECC# = %ECC_DELTA#;
     ECC = TCB_STK$->B$EXCFR.ECC;
     SUBC = TCB_STK$->B$EXCFR.SUBC;
 
        /* This is a fast path through for the Fault tag on a TSXn */
 
     IF ECC=%ECC_PROG# AND SUBC=%SC_FLTAG# THEN DO;
          P2$ = PINCRW(B$SPCL5$, TCB_STK$->B$EXCFR.IC);
          IF P2$->BASED$INST.OPCODE.OP = %TSX THEN DO;
               CALL RECORD_IC ALTRET (BAD_ERR);
               REGS.XREGS(P2$->BASED$INST.OPCODE.REG) = IC + 1;
               DRTN.V.IC# = P2$->BASED$INST.Y;
               CALL M$DRTN(DRTN) ALTRET (BAD_ERR);
             END;
        END;
     WRITE =FPT_WRITE;
     WRITE.V_ = VECTOR(WRITE.V);
     WRITE.V.DCB# = %M$DO#;
     FDS = F_FDS;
     FDS.BUF_ = VECTOR(FDS_BUF);
     FDS.DCB# = %M$DO#;
 
 
 
     DO CASE(ECC);
 
 
     CASE(%ECC_DELTA#);
        CALL M$ERR;                     /* Should never happen, but...*/
 
 
     CASE(%ECC_OLAY#);
           /* Overlay node loaded - go fix up all the entry points
              again, and then keep running */
        OLAY = SUBC;
        CALL FIXUP_OVERLAY;
        DRTN.V.IC# = TCB_STK$->B$EXCFR.IC;
        CALL M$DRTN(DRTN) ALTRET(BAD_ERR);
 
 
     CASE(%ECC_LRTN#);
                              /* Return from linked-to program.  Keep going */
        WRITE.BUF_ = VECTOR(LINKBACK);
        CALL M$WRITE(WRITE) ALTRET (BAD_ERR);
        DRTN.V.IC# = TCB_STK$->B$EXCFR.IC;
        CALL M$DRTN(DRTN) ALTRET(BAD_ERR);
 
 
     CASE(%ECC_LINK#);
                    /* Linking out to some other program.  Nothing special */
        WRITE.BUF_ = VECTOR(LINKOUT);
        CALL M$WRITE(WRITE) ALTRET (BAD_ERR);
        DRTN.V.IC# = TCB_STK$->B$EXCFR.IC;
        CALL M$DRTN(DRTN) ALTRET(BAD_ERR);
 
 
     CASE(%ECC_EXCRTN#);
                         /* Exit control return.  If final exit then wrap up */
        IF SUBC = %SC_XCONXIT# THEN GOTO WRAP_UP;
 
        DRTN.V.IC# = TCB_STK$->B$EXCFR.IC;
        CALL M$DRTN(DRTN) ALTRET(WRAP_UP);
 
 
     CASE(%ECC_INT#);
           /* User hit break.  Give control to users break routine if he
              has one, otherwise keep him amused. */
        IF SUBC = %SC_BRK# THEN DO;
             D.BREAK_COUNT = D.BREAK_COUNT + 1;
             DRTN.V.SETECC# = '0'B;
             CALL M$DRTN(DRTN) ALTRET(NO_BRK);
NO_BRK:      ;
 
             IF D.BREAK_COUNT > 50 AND MOD(TCB_STK$->B$EXCFR.IC,1024) = 0 THEN DO;
                  WRITE.BUF_ = VECTOR (BRK3);
                  CALL M$WRITE(WRITE) ALTRET (BAD_ERR);
                  D.ERROR = '1'B;
                  GOTO WRAP_UP;
                END;
             ELSE IF D.BREAK_COUNT > 10 AND MOD(TCB_STK$->B$EXCFR.IC,256) = 0 THEN
                       WRITE.BUF_ = VECTOR (BRK2);
                  ELSE
                       WRITE.BUF_ = VECTOR (BRK1);
             CALL M$WRITE(WRITE) ALTRET (BAD_ERR);
             CALL M$TRMPRG(TRMPRG) ALTRET (BAD_ERR);
             DRTN.V.SETECC# = '1'B;
             CALL M$DRTN(DRTN) ALTRET(BAD_ERR);
           END;
        ELSE DO;
             WRITE.BUF_ = VECTOR(ALREADY);
             CALL M$WRITE(WRITE) ALTRET (BAD_ERR);
             CALL M$DRTN(DRTN) ALTRET(BAD_ERR);
           END;
 
 
     CASE(%ECC_XCON#);
                         /* Users program wants to quit -- Time to wrap it up */
        GOTO WRAP_UP;
 
 
     CASE(ELSE);
           /* Something strange going on with the users program.  Give
              control to him if he will take it, else go wrap up.
              This case includes the programmed faults that are not
              the Fault_tag faults that were expected on TSXn insts. */
        DRTN.V.SETECC# = '0'B;
        DRTN.V.IC# = TCB_STK$->B$EXCFR.IC;
        D.ERROR = '1'B;
        CALL M$DRTN(DRTN) ALTRET(WRAP_UP);
     END;                               /* DO CASE */
%EJECT;
WRAP_UP: ;
 
     IF NOT D.ERROR AND (ECC=%ECC_XCON# OR ECC=%ECC_EXCRTN#) THEN DO;
          WRITE.BUF_ = VECTOR(FIN_MESS); /* Program exited normaly (we hope)*/
          CALL M$WRITE(WRITE) ALTRET (BAD_ERR);
        END;
     ELSE DO;
          CALL X$WRITE (FDS, VECTOR(FMT_BAD_END),
               VECTOR(ECC), VECTOR(SUBC), VECTOR(TCB_STK$->B$EXCFR.IC),
               VECTOR(PINCRW(B$SPCL5$,TCB_STK$->B$EXCFR.IC)->BASED$INST));
        END;
 
 
     IF D.REAP_INDEX > 0 THEN DO;
          WRITE_PM = FPT_WRITE;         /* write the final, part-full buffer */
          WRITE_PM.V_ = VECTOR(WRITE_PM.V);
          WRITE_PM.BUF_ = VECTOR(D.REAP_BUF);
          WRITE_PM.V.DCB# = D.DCB#;
          WRITE_PM.BUF_.BOUND = (D.REAP_INDEX*4)-1;
          CALL M$WRITE(WRITE_PM) ALTRET (BAD_ERR);
          D.REAP_INDEX = 0;
        END;
     CLOSE= FPT_CLOSE;                  /* Close and save the PM data */
     CLOSE.V_ = VECTOR(CLOSE.V);
     CLOSE.V.DCB# = D.DCB#;
     CALL M$CLOSE(CLOSE) ALTRET (BAD_ERR);
 
     DRTN.V.IC# = TCB_STK$->B$EXCFR.IC;
     DRTN.V.SETECC# = '1'B;
     DRTN.V.ECC# = %ECC_DELTA#;
     DRTN.V.KLDELTA# = '1'B;            /* Get rid of us, we are done */
     CALL M$DRTN(DRTN) ALTRET(BAD_ERR);
 
 
BAD_ERR: ;
     FDS = F_FDS;
     FDS.BUF_ = VECTOR(FDS_BUF);
     FDS.DCB# = %M$DO#;
     CALL X$WRITE (FDS, VECTOR(FMT_DIE),
          VECTOR(B$TCB$->B$TCB.ALT$->B$EXCFR.IC));
     FPT_ERRMSG = FPT_ERRMSG_CONST;
     FPT_ERRMSG.V_ = VECTOR (FPT_ERRMSG.V);
     FPT_ERRMSG.BUF_ = VECTOR (ERRMSG_BUF);
     FPT_ERRMSG.CODE_ = VECTOR (B$TCB$ -> B$TCB.ALT$ -> B$EXCFR.ERR);
     FPT_ERRMSG.V.OUTDCB1# = %M$DO#;
     FPT_ERRMSG.V.DCB# = B$TCB$ -> B$TCB.ALT$ -> B$EXCFR.DCB#;
     CALL M$ERRMSG (FPT_ERRMSG);
     CALL M$ERR;
END REAP_INIT;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
REAP_TRAP: PROC ASYNC;
 
   %INCLUDE CP_6;
   %INCLUDE CP_6_SUBS;
   %INCLUDE XU_FORMAT_C;
 
DCL B$TCB$  PTR SYMREF READONLY;
%B$TCB;
%B$EXCFR;
%F_FDS (STCLASS=CONSTANT);
%F_FDS (NAME=FDS, STCLASS=AUTO);
%FPT_TRAP (FPTN=FPT$TRAP, ARITHMETIC=NIL, ERRORS=NIL, PROGRAMMED=NIL,
            DIVIDE_CHECK=ABORT, OVERFLOW=ABORT, COMMAND=ABORT,
            IPR=ABORT, LOCKUP=ABORT, MEMORY=ABORT, MISSING_PAGE=ABORT,
            MISSING_SEG=ABORT, SECURITY_1=ABORT, SECURITY_2=ABORT,
            DERAIL=ABORT, FAULT_TAG=ABORT, MME=ABORT, STCLASS=CONSTANT);
 
DCL FMT_CROAK CHAR(0) CONSTANT INIT
      (' REAP bites the dust! IC = .%O');
DCL FDS_BUF CHAR(128);
DCL X$WRITE ENTRY(22);
 
     FDS = F_FDS;
     FDS.BUF_ = VECTOR(FDS_BUF);
     FDS.DCB# = %M$DO#;
     CALL X$WRITE (FDS, VECTOR(FMT_CROAK),
          VECTOR(B$TCB$->B$TCB.STK$->B$EXCFR.IC));
     CALL M$TRAP (FPT$TRAP);
 
END REAP_TRAP;
