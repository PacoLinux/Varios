/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*
**       This is the include file for FOXI.X; it defines some parameters
**       and macros (for data tables) that we use in the Fast$xxxxx routines.
*/
/********************************************************************
*                                                                   *
* This program  is a gratuitous contribution and  is offered as is. *
* Zenith  makes  no  representations  or  warranties  of  any kind, *
* express  or  implied,  relating  to  freedom  from  infringement, *
* accuracy,  error-freedom  or   performance,  and  shall  have  no *
* liability  or responsibility  to users  for damages  of any kind, *
* including special, indirect or consequential damages, arising out *
* of  or resulting  from use,  modification or  reproduction of the *
* program.                                                          *
*                                                                   *
* No  warranty  is  made  by  the  contributor  as to the accuracy, *
* maintenance, and functioning of the program and related material. *
* No  responsibility is  assumed by  the contributor  in connection *
* therewith.                                                        *
*                                                                   *
********************************************************************/
%Equ   Max_Open# = 20;       /* Size of our tables */
%Equ   Default_DBufSize = 5; /* Default to use if DBufSize = 0 */
/*
**       Macro for the table of XSA_Params . . .
*/
%Macro P_Table (StClass=SymRef);
       Dcl 1 P_Table (0:%(Max_Open#-1)) StClass,
         %XSA_Param (LVL=2, StClass=StClass);
%Mend;
 
%Equ   UnFast$AltRet#  = '1'B;
%Equ   UnFast$Monitor# = '0'B;
/*
**       Macro for the table of DCB numbers
*/
%Macro DCB_Table (StClass=SymRef);
%LSet ListDir='0'B;
%LSet Stc = Concat(TextChar(StClass),'        ');
%If (SubStr(Stc,0,6) = 'STATIC') or
    (SubStr(Stc,1,5) = 'tatic') or
    (SubStr(Stc,0,8) = 'CONSTANT') or
    (SubStr(Stc,1,7) = 'onstant') or
    (SubStr(Stc,0,3) = 'EXT') or
    (SubStr(Stc,1,2) = 'xt');
  %LSet Init = CharText('Init');
%Else;
  %LSet Init = CharText('/*');
%EndIf;
%LSet No# = '0'B;
%LSet Yes# = '1'B;
       Dcl 1 DCB_Table (0:%(Max_Open#-1)) StClass,
             2 DCB_Numb Ubin Half Haligned %Init (0*0) %CharText ('/**/'),
             2 NPages Ubin Byte Caligned %Init (0*0) %CharText ('/**/'),
             2 Page_Ix Ubin Byte Caligned %Init (0*0) %CharText ('/**/');
%Mend;
/*
**       Macro for the page table structures . . .
*/
%Macro Page_Table (StClass=SymRef);
%LSet ListDir='0'B;
%LSet Stc = Concat(TextChar(StClass),'        ');
%If (SubStr(Stc,0,6) = 'STATIC') or
    (SubStr(Stc,1,5) = 'tatic') or
    (SubStr(Stc,0,8) = 'CONSTANT') or
    (SubStr(Stc,1,7) = 'onstant') or
    (SubStr(Stc,0,3) = 'EXT') or
    (SubStr(Stc,1,2) = 'xt');
  %LSet Init = CharText('Init');
%Else;
  %LSet Init = CharText('/*');
%EndIf;
%LSet No# = '0'B;
%LSet Yes# = '1'B;
       Dcl Hi_Page# StClass Sbin %Init (-1) %CharText ('/**/');
 
       Dcl Page_Table (0:255) StClass Ubin Byte Caligned %Init (0*0) %CharText ('/**/');
       Dcl Page_String Redef Page_Table Char (256);
       Dcl Null_Table (0:255) StClass Ubin Byte Caligned %Init (0*0) %CharText ('/**/');
       Dcl Null_String Redef Null_Table Char (256);
%Mend;
/*
**       Macro to find the correct DCB index; returns w/ IOStat set if anything
**       weird happens.  Unit, DCB_Numb, IOStat, M$FSFA$, and F$FSFA must be
**       defined.
*/
%Macro Find_Correct_Slot (IO_Fpt="*none*");
       Call  Find$Dcb  (Unit, DCB_Numb, '0'B)  WhenReturn Do;
         M$FSFA$ = DCBAddr (DCB_Numb);
         If  ~F$FSFA.FCD#  Then Do;
           IOStat = BinBit (-2, 36);
           AltReturn;
          End; Else Do;
Find_the_Slot:
           Do;
             Do  I = 0 to (%Max_Open# - 1);
               If  DCB_Table.DCB_Numb (I) = DCB_Numb  then Do;
                 DCB_Ix = I;
                 Exit  Find_the_Slot;
               End;
             End;
             IOStat = BinBit (-3, 36);
             AltReturn;
           End  Find_the_Slot;
         End;
        End;  WhenAltReturn Do;
         IOStat = BinBit (-1, 36);
         AltReturn;
       End;
%If  TextChar (IO_Fpt) ~= '*none*';
 
       IO_Fpt.V.DCB# = DCB_Numb;
%Endif;
%Mend;
