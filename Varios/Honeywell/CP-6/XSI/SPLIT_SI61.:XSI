/*M* SPLIT - Reads "blocked" records from one file and creates an "unblocked"
             file.
*/
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/*X* DDA */
 
/*
 
    SPLIT reads a file that contains multiple "logical" records per
    CP-6 record and creates a new file which contains one "logical"
    record per CP-6 record.  By default, the sequence that separates the
    "logical" records is the Carriage Return (CR), Line Feed (LF)
    sequence.  This default value may be changed via the DELIMITERS
    option.  The IGNORE option may be used when the file being read
    contains character(s) which you wish to be IGNOREd when writing the
    new file.  The MINIMUM OUTPUT LENGTH option may be used to insure
    that each record written is at least the specified length.  And last,
    the NO TRAILING BLANKS option strips trailing blanks from records
    being written to the new file.
 
    Author: Lee Hallin, Bull LADC, 08/30/86
 
*/
 
 
SPLIT: PROC MAIN;
 
%INCLUDE B$JIT;
%INCLUDE B_ERRORS_C;
%INCLUDE CP_6;
  %B$ALT;
  %B$TCB;
  %F$DCB;
%INCLUDE CP_6_SUBS;
/* CLUDE SPLIT_C61; */
%INCLUDE XU_FORMAT_C;
%INCLUDE XUF_ENTRY;
%INCLUDE XUR_ENTRY;
%INCLUDE XU_MACRO_C;
%INCLUDE XU_PERR_C;
 
/**/
/* SUBs used to access the PCB */
/**/
 
%SUB BLK1_NSUBLKS = "BLK1$->P_OUT.NSUBLKS";
%SUB BLK1_SUBLK$  = "BLK1$->P_OUT.SUBLK$";
 
%SUB BLK2_NSUBLKS = "BLK2$->P_OUT.NSUBLKS";
%SUB BLK2_SUBLK$  = "BLK2$->P_OUT.SUBLK$";
%SUB BLK2_CODE    = "BLK2$->P_SYM.CODE";
%SUB BLK2_COUNT   = "BLK2$->P_SYM.COUNT";
%SUB BLK2_TEXT    = "SUBSTR(BLK2$->P_SYM.TEXT,0,BLK2$->P_SYM.COUNT)";
 
%SUB BLK3_NSUBLKS = "BLK3$->P_OUT.NSUBLKS";
%SUB BLK3_SUBLK$  = "BLK3$->P_OUT.SUBLK$";
%SUB BLK3_CODE    = "BLK3$->P_SYM.CODE";
%SUB BLK3_COUNT   = "BLK3$->P_SYM.COUNT";
%SUB BLK3_TEXT    = "SUBSTR(BLK3$->P_SYM.TEXT,0,BLK3$->P_SYM.COUNT)";
 
%SUB BLK4_NSUBLKS = "BLK4$->P_OUT.NSUBLKS";
%SUB BLK4_SUBLK$  = "BLK4$->P_OUT.SUBLK$";
%SUB BLK4_CODE    = "BLK4$->P_SYM.CODE";
%SUB BLK4_COUNT   = "BLK4$->P_SYM.COUNT";
%SUB BLK4_TEXT    = "SUBSTR(BLK4$->P_SYM.TEXT,0,BLK4$->P_SYM.COUNT)";
 
 
%LIST;
%INCLUDE SPLIT_C61;
%PLIST;
%EJECT;
%FPT_OPEN    (FPTN                     = OPEN_IN,
              DCB=M$SI
             );
 
%FPT_READ    (FPTN                     = READ_IN,
           /* BUF=IN_BUF, */
              DCB=M$SI
             );
 
%FPT_OPEN    (FPTN                     = OPEN_OUT,
              DCB=M$OU
             );
 
%FPT_WRITE   (FPTN                     = WRITE_OUT,
              DCB=M$OU
             );
 
%FPT_CLOSE   (FPTN                     = FPT_CLOSE,
              DISP=SAVE
             );
 
%FPT_OPEN    (FPTN                     = OPEN_LO,
              DCB=M$LO
             );
 
%FPT_ERRMSG  (FPTN                     = ERRMSG,
              DCB=NIL,
              BUF=LO_BUF,
              CODE=ERRCODE,
              OUTDCB1=M$LO
             );
%VLP_ERRCODE (FPTN                     = ERRCODE,
              STCLASS=STATIC
             );
 
%FPT_GDS     (FPTN                     = GDS,
              RESULTS=IN_BUF_,
              SEGSIZE=1024
             );
%VLP_VECTOR  (FPTN                     = IN_BUF_ );
 
%FPT_PRECORD (FPTN                     = BACKUP1,
              DCB=M$SI,
              N=-1
             );
%EJECT;
/**************************************************/
/*                                                */
/* XUR$GETCMD, X$PARSE and XUF$FORMAT macro stuff */
/*                                                */
/**************************************************/
 
%P$PCB       (NAME                     = P$PCB,
              STCLASS="BASED(PCB$)"
             );
%PARSE$OUT   (NAME                     = P_OUT,
              STCLASS="BASED(BLK1$)"
             );
%PARSE$SYM   (NAME                     = P_SYM,
              STCLASS="BASED(BLK1$)"
             );
 
%XUR_INIT;
 
%F_FDS       (NAME                     = F_FDS,
              BUF=LO_BUF,
              DCB=M$LO,
              STCLASS=STATIC
             );
%EJECT;
/* */
/* */
/* */
/* */
/* */
 
DCL GREETING                 CHAR(0)   STATIC INIT(
    'SPLIT A00 Here (08/28/86)');
DCL IGNORED_SUMMARY          CHAR(0)   STATIC INIT(
    '.. %D bytes were IGNORED.');
DCL INVOCATION_SYNTAX        CHAR(0)   STATIC INIT(
    '    !SPLIT.X blocked-file {ON|TO|OVER|INTO} deblocked-file [(options)]');
DCL REC_SUMMARY              CHAR(0)   STATIC INIT(
    '.. %D Records were read, %D were written.');
DCL SHORT_OUT_REC            CHAR(0)   STATIC INIT(
    '.. Last record has %D bytes which is less than the %D byte MINIMUM you specified.');
DCL SYNTAX                   CHAR(0)   STATIC INIT(
    'Improper invocation, proper syntax is:');
%EJECT;
DCL IN_BUF                   CHAR(IN_BUF_SIZE) BASED(IN_BUF_.PTR$);
 
DCL NO_TRAILING_BLANKS       BIT(1);
 
DCL ARS                      UBIN;
DCL BEGIN                    UBIN;
DCL DELIMS_LEN               UBIN;
DCL I                        SBIN;
DCL IN_BUF_SIZE              SBIN;
DCL IN_CNT                   UBIN;
DCL IN_LEN                   UBIN;
DCL IGNORE_CNT               UBIN;
DCL J                        UBIN;
DCL K                        UBIN;
DCL L                        UBIN;
DCL MINIMUM_OUT_LEN          UBIN;
DCL OUT_CNT                  UBIN;
DCL POS                      UBIN;
DCL SINGLE                   UBIN;
DCL SPLIT_NODES              UBIN      SYMREF;
DCL START                    UBIN;
DCL TBLVAL                   UBIN;
DCL U_OUT_LEN                UBIN;
DCL X                        UBIN;
 
DCL OK_CHARS(0:511)          UBIN(9) STATIC CALIGNED INIT( 1 * 0 );
DCL IGNORE_CHARS(0:511)      UBIN(9) STATIC CALIGNED INIT( 0 * 0 );
DCL SINGLE_CHARS(0:511)      UBIN(9) STATIC CALIGNED INIT( 0 * 0 );
DCL SKIP_BLANKS(0:511)       UBIN(9) STATIC CALIGNED INIT(
    1 * %ASCBIN(' '), 0, 1 * 0 );
 
DCL M$LO                     DCB;
DCL M$OU                     DCB;
DCL M$SI                     DCB;
 
DCL DELIMS                   CHAR(80);
DCL INT6                     CHAR(6);
DCL LO_BUF                   CHAR(132) STATIC;
 
DCL X$PARSE                  ENTRY(1)  ALTRET;
 
DCL B$JIT$                   PTR       SYMREF;
DCL B$TCB$                   PTR       SYMREF;
DCL BLK1$                    PTR;
DCL  PERRCODE REDEF BLK1$    BIT(36);
DCL BLK2$                    PTR;
DCL BLK3$                    PTR;
DCL BLK4$                    PTR;
DCL M$SI$                    PTR;
DCL M$OU$                    PTR;
DCL PCB$                     PTR;
%EJECT;
    CALL INITIALIZE          ALTRET( OOPS );  /* Housekeep, open files, etc.  */
 
    CALL PARSE_OPTIONS       ALTRET( CLOSE_EM ); /* Parse command line        */
 
    DO WHILE( '1'B );
 
       CALL READ_A_RECORD    ALTRET( GET_ERRCODE ); /* Read a blocked record  */
       CALL REMOVE_IGNORE_CHARS  ALTRET( NEXT_REC );/* Pitch any unwanted char*/
       CALL DEBLOCK          ALTRET( OOPS );        /* Delock and write recs  */
 
NEXT_REC:
    END;
 
OOPS: ;
GET_ERRCODE:
    ERRCODE= B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR;     /* Get error code         */
 
CLOSE_EM:
 
    IF IN_LEN > 0  AND  IN_LEN < MINIMUM_OUT_LEN THEN
       /* .. Last record has %D bytes which is less than the %D byte MINIMUM
                                                               you specified. */
       CALL X$WRITE( F_FDS,VECTOR(SHORT_OUT_REC),VECTOR(IN_LEN),
                                                 VECTOR(MINIMUM_OUT_LEN) );
 
    MINIMUM_OUT_LEN= 0; /* Force last partial record to be written */
    IF (ERRCODE.ERR# ~= %E$EOF) AND (ERRCODE.ERR# ~= %E$SYNERR) THEN
       CALL XUR$ERRMSG( ERRCODE );            /* Unexpected error; print it   */
    ELSE
       IF IN_LEN > 0 THEN                   /* Any output record in progress? */
          CALL WRITE_A_RECORD( IN_BUF,IN_LEN ); /* Yep, write it              */
 
    IF IN_CNT > 0 THEN                        /* Were any records ever read?  */
       CALL PUT_SUMMARY;                      /* Yep, OK to put summary       */
 
    CALL CLOSE( DCBNUM(M$OU) );
    CALL CLOSE( DCBNUM(M$SI) );
    CALL CLOSE( DCBNUM(M$LO) );
 
    CALL M$EXIT;
%EJECT;
INITIALIZE: PROC  ALTRET;
 
    IN_CNT= 0;
    OUT_CNT= 0;
    IGNORE_CNT= 0;
    CALL CONCAT( DELIMS,%BINASC(13),%BINASC(10) );
    CALL INDEX( DELIMS_LEN,'  ',DELIMS );
    IN_LEN= 0;
    MINIMUM_OUT_LEN= 00;
    U_OUT_LEN = 0;
    SINGLE = 0;
 
    M$SI$= DCBADDR(DCBNUM(M$SI));
    M$OU$= DCBADDR(DCBNUM(M$OU));
    CALL M$OPEN( OPEN_LO )   ALTRET( ALT_RETURN );
 
    IF M$SI$->F$DCB.AMR#='0'B  OR  M$OU$->F$DCB.AMR#='0'B THEN DO;
       CALL X$WRITE( F_FDS,VECTOR(SYNTAX) );
       CALL X$WRITE( F_FDS,VECTOR(INVOCATION_SYNTAX) );
       CALL M$EXIT;
       END;
    CALL M$OPEN( OPEN_IN )   ALTRET( ALT_RETURN );
    CALL M$OPEN( OPEN_OUT )  ALTRET( ALT_RETURN );
 
    IN_BUF_= VECTOR(NIL);
    CALL EXPAND( IN_BUF_,16,IN_BUF_SIZE )  ALTRET( ALT_RETURN );
 
    CALL X$WRITE( F_FDS,VECTOR(GREETING) );   /* Greet the world!             */
 
RE_TURN:
    RETURN;
 
ALT_RETURN:
    ALTRETURN;
 
END INITIALIZE;
%EJECT;
PARSE_OPTIONS: PROC  ALTRET;
 
    IN_LEN= B$JIT.CCARS - B$JIT.CCDISP;
    IF IN_LEN = 0 THEN                        /* Any options?                 */
       GOTO RE_TURN;                          /* Nope, just RETURN            */
 
    CALL XUR$INIT( XUR_INIT, PCB$ );
 
    IN_BUF= SUBSTR(B$JIT.CCBUF,B$JIT.CCDISP); /* Get the options              */
 
    CALL XUR$GETCMD( SPLIT_NODES, BLK1$,, IN_BUF, IN_LEN )  ALTRET( PARSE_ERR );
 
    IN_LEN= 0;
 
    DO I = 0 TO BLK1_NSUBLKS - 1;
       BLK2$= BLK1_SUBLK$(I);
       IF BLK2_NSUBLKS > 0 THEN
          BLK3$= BLK2_SUBLK$(0);
 
       DO CASE( BLK2_CODE );
 
          CASE( %DELIMITERS## );
             CALL PARSE_DELIMITERS  ALTRET( ALT_RETURN );
 
          CASE( %IGNORE_CHARS## );
             CALL PARSE_IGNORE_CHARS  ALTRET( ALT_RETURN );
 
          CASE( %MINIMUM## );
             CALL CHARBIN(MINIMUM_OUT_LEN,BLK3_TEXT);
 
          CASE( %NTB## );
             NO_TRAILING_BLANKS= %YES#;
 
          CASE( %OUTLEN## );
             CALL CHARBIN(U_OUT_LEN,BLK3_TEXT);
 
          CASE( %SINGLE## );
             SINGLE = 1;
 
          END; /* DO CASE */
 
     END; /* DO I */
 
    IF SINGLE = 1 THEN
       CALL MAKE_SINGLE_LIST;
 
RE_TURN:
    RETURN;
 
    DO WHILE('0'B);
PARSE_ERR:
       ERRCODE= PERRCODE;
       CALL XUR$ECHOIF( DCBNUM(M$LO) );
       CALL XUR$ERRPTR( ,DCBNUM(M$LO) );
       CALL XUR$ERRMSG( ERRCODE );
       END;
 
ALT_RETURN:
    ALTRETURN;
 
END PARSE_OPTIONS;
%EJECT;
READ_A_RECORD: PROC  ALTRET;
 
READ_AGAIN:
    IF IN_LEN >= IN_BUF_SIZE THEN             /* Do we need a bigger buffer?  */
GROW_BUFFER:
       /* Double the size of IN_BUF                                           */
       CALL EXPAND( IN_BUF_,(IN_BUF_.W1.VSIZE#+1)/4,IN_BUF_SIZE )
                                             ALTRET( ALT_RETURN );
    READ_IN.BUF_= VECTOR(SUBSTR(IN_BUF,IN_LEN,LENGTHC(IN_BUF)-IN_LEN));
    CALL M$READ( READ_IN )   WHENALTRETURN DO;
       ERRCODE= B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR;
       IF ERRCODE.ERR# = %E$LD THEN DO;
          /* Lost Data on the read; double the size of the buffer & try again */
          CALL M$PRECORD( BACKUP1 );       /* Backup so we re-READ the record */
          GOTO GROW_BUFFER;
          END;
       GOTO ALT_RETURN;
       END; /* WHENALTRETURN */
 
    IN_CNT= IN_CNT + 1;
    ARS= M$SI$->F$DCB.ARS#;
    IN_LEN= IN_LEN + ARS;
 
RE_TURN:
    RETURN;
 
ALT_RETURN:
    ALTRETURN;
 
END READ_A_RECORD;
%EJECT;
DEBLOCK: PROC  ALTRET;
 
    START= 0;
 
    IF DELIMS_LEN = 0 THEN DO;
       DO WHILE( '1'B );
          BEGIN = START;
          IF U_OUT_LEN > IN_LEN - BEGIN THEN
             GOTO CHECK_PARTIAL;
          CALL WRITE_A_RECORD(SUBSTR(IN_BUF,BEGIN),U_OUT_LEN) ALTRET(ALT_RETURN);
          START = START + U_OUT_LEN;
          END;
       END;
    ELSE DO;
       DO WHILE( '1'B );
          BEGIN= START;
TOO_SHORT:
          IF SINGLE = 0 THEN
             CALL INDEX( POS,SUBSTR(DELIMS,0,DELIMS_LEN),SUBSTR(IN_BUF,0,IN_LEN),START ) ALTRET( CHECK_PARTIAL );
          ELSE
             CALL SEARCH( POS,TBLVAL,SINGLE_CHARS,SUBSTR(IN_BUF,0,IN_LEN),START) ALTRET( CHECK_PARTIAL );
          IF POS - BEGIN < MINIMUM_OUT_LEN THEN DO;
             START= POS + 1;
             GOTO TOO_SHORT;
             END;
 
          CALL WRITE_A_RECORD( SUBSTR(IN_BUF,BEGIN),POS - BEGIN ) ALTRET( ALT_RETURN );
          IF SINGLE = 0 THEN
             START= POS + DELIMS_LEN;
          ELSE
             START = POS + 1;
          END;
       END;
 
CHECK_PARTIAL:
    IF BEGIN > 0 THEN DO;
       IN_LEN= IN_LEN - BEGIN;
       IN_BUF= SUBSTR(IN_BUF,BEGIN,IN_LEN);
       END;
RE_TURN:
    RETURN;
 
ALT_RETURN:
    ALTRETURN;
 
END DEBLOCK;
%EJECT;
CLOSE: PROC( DCB# );
DCL DCB#                     UBIN;
 
    FPT_CLOSE.V.DCB#= DCB#;
    CALL M$CLOSE( FPT_CLOSE );
RE_TURN:
    RETURN;
 
END CLOSE;
%EJECT;
WRITE_A_RECORD: PROC( BUF,LEN )  ALTRET;
DCL BUF                      CHAR(LEN);
DCL LEN                      SBIN;
 
    IF NO_TRAILING_BLANKS AND LEN > 0 THEN DO;
       CALL SEARCHR( LEN,K,SKIP_BLANKS,BUF )  WHENALTRETURN DO;
          IF MINIMUM_OUT_LEN > 0 THEN
             GOTO RE_TURN;
          ELSE
             LEN= -1;
          END;
       LEN= LEN + 1;
       END;
 
    IF LEN >= MINIMUM_OUT_LEN THEN DO;
       IF LEN = 0 THEN
          WRITE_OUT.BUF_= VECTOR(NIL);
       ELSE
          WRITE_OUT.BUF_= VECTOR(BUF);
       CALL M$WRITE( WRITE_OUT )  ALTRET( ALT_RETURN );
       OUT_CNT= OUT_CNT + 1;
       END;
 
RE_TURN:
    RETURN;
 
ALT_RETURN:
    ALTRETURN;
 
END WRITE_A_RECORD;
%EJECT;
PRINT_ERR: PROC( ERR );
DCL ERR                      BIT(36);
 
    ERRMSG.V.DCB#= B$TCB$ -> B$TCB.ALT$ -> B$ALT.DCB#;
    CALL M$ERRMSG( ERRMSG );
RE_TURN:
    RETURN;
 
END PRINT_ERR;
%EJECT;
PUT_SUMMARY: PROC;
 
    CALL X$WRITE( F_FDS,VECTOR(REC_SUMMARY),VECTOR(IN_CNT),VECTOR(OUT_CNT) );
 
    IF IGNORE_CNT > 0 THEN
       CALL X$WRITE( F_FDS,VECTOR(IGNORED_SUMMARY),VECTOR(IGNORE_CNT) );
 
RE_TURN:
    RETURN;
 
END PUT_SUMMARY;
%EJECT;
PARSE_DELIMITERS: PROC  ALTRET;
 
    DELIMS= ' ';
    DELIMS_LEN= 0;
    DO J = 0 TO BLK2_NSUBLKS - 1;
       BLK3$= BLK2_SUBLK$(J);
       IF BLK3_NSUBLKS > 0 THEN
          BLK4$= BLK3_SUBLK$(0);
 
       DO CASE( BLK3_CODE );
 
          CASE( %ASCII## );
             SUBSTR(DELIMS,DELIMS_LEN,1)= BLK3_TEXT;
             DELIMS_LEN= DELIMS_LEN + 1;
 
          CASE( %DECIMAL## );
             CALL CHARBIN( K,BLK3_TEXT );
             SUBSTR(DELIMS,DELIMS_LEN,1)= BINASC(K);
             DELIMS_LEN= DELIMS_LEN + 1;
 
          CASE( %HEX## );
             L= BLK4_COUNT;
             CALL CONVERT_TO_DECIMAL( K,16,BLK4_TEXT,L );
             IF K < 512 THEN DO;
                SUBSTR(DELIMS,DELIMS_LEN,1)= BINASC(K);
                DELIMS_LEN= DELIMS_LEN + 1;
                END;
 
          CASE( %MNEMONICS## );
             IF BLK4_CODE < %DEL## THEN
                SUBSTR(DELIMS,DELIMS_LEN,1)= BINASC(BLK4_CODE - %NUL##);
             ELSE
                SUBSTR(DELIMS,DELIMS_LEN,1)= BITASC('177'O);
             DELIMS_LEN= DELIMS_LEN + 1;
 
          CASE( %OCTAL## );
             L= BLK4_COUNT;
             CALL CONVERT_TO_DECIMAL( K,8,BLK4_TEXT,L );
             IF K < 512 THEN DO;
                SUBSTR(DELIMS,DELIMS_LEN,1)= BINASC(K);
                DELIMS_LEN= DELIMS_LEN + 1;
                END;
 
          CASE( %NONE## );
             DELIMS_LEN = 0;
 
          END; /* CASE */
 
       END; /* DO J */
 
RE_TURN:
    RETURN;
 /*
ALT_RETURN:
    ALTRETURN; */
 
END PARSE_DELIMITERS;
%EJECT;
PARSE_IGNORE_CHARS: PROC  ALTRET;
 
    DO J = 0 TO BLK2_NSUBLKS - 1;
       BLK3$= BLK2_SUBLK$(J);
       IF BLK3_NSUBLKS > 0 THEN
          BLK4$= BLK3_SUBLK$(0);
 
       DO CASE( BLK3_CODE );
 
          CASE( %ASCII## );
             K= ASCBIN(BLK3_TEXT);
             IGNORE_CHARS(K)= 1;
             OK_CHARS(K)= 0;
 
          CASE( %DECIMAL## );
             K= ASCBIN(BLK3_TEXT);
             IGNORE_CHARS(K)= 1;
             OK_CHARS(K)= 0;
 
          CASE( %HEX## );
             L= BLK4_COUNT;
             CALL CONVERT_TO_DECIMAL( K,16,BLK4_TEXT,L );
             IF K < 512 THEN DO;
                IGNORE_CHARS(K)= 1;
                OK_CHARS(K)= 0;
                END;
 
          CASE( %MNEMONICS## );
             IF BLK4_CODE < %DEL## THEN DO;
                IGNORE_CHARS(BLK4_CODE - %NUL##)= 1;
                OK_CHARS(BLK4_CODE - %NUL##)= 0;
                END;
             ELSE DO;
                IGNORE_CHARS(127)= 1;
                OK_CHARS(127)= 0;
                END;
 
          CASE( %OCTAL## );
             L= BLK4_COUNT;
             CALL CONVERT_TO_DECIMAL( K,8,BLK4_TEXT,L );
             IF K < 512 THEN DO;
                IGNORE_CHARS(K)= 1;
                OK_CHARS(K)= 0;
                END;
 
          END; /* CASE */
 
       END; /* DO J */
 
RE_TURN:
    RETURN;
 /*
ALT_RETURN:
    ALTRETURN; */
 
END PARSE_IGNORE_CHARS;
%EJECT;
MAKE_SINGLE_LIST: PROC;
 
    DO J = 0 TO DELIMS_LEN - 1;
       SINGLE_CHARS(ASCBIN(SUBSTR(DELIMS,J,1))) = J + 1;
       END;
 
END MAKE_SINGLE_LIST;
%EJECT;
CONVERT_TO_DECIMAL: PROC( DEC,RADIX,CHAR_NUM,LEN );
DCL DEC                      UBIN;
DCL RADIX                    UBIN;
DCL CHAR_NUM                 CHAR(LEN);
DCL LEN                      UBIN;
 
DCL I                        UBIN;
 
    DEC= 0;
    DO I=0 TO LEN-1;
       IF SUBSTR(CHAR_NUM,I,1) > '9' THEN
          DEC= (DEC * RADIX) + (ASCBIN(SUBSTR(CHAR_NUM,I,1)) - %ASCBIN('7'));
       ELSE
          DEC= (DEC * RADIX) + (ASCBIN(SUBSTR(CHAR_NUM,I,1)) - %ASCBIN('0'));
       END;
 
RE_TURN:
    RETURN;
 
END CONVERT_TO_DECIMAL;
%EJECT;
REMOVE_IGNORE_CHARS: PROC  ALTRET;
 
    START= 0;
 
AGAIN:
    CALL SEARCH( I,K,IGNORE_CHARS,SUBSTR(IN_BUF,0,IN_LEN),START )
                                                    ALTRET( RE_TURN );
    CALL SEARCH( J,K,OK_CHARS,IN_BUF,I )          ALTRET( IGNORE_REST_OF_REC );
    SUBSTR(IN_BUF,I,IN_LEN-I)= SUBSTR(IN_BUF,J,IN_LEN-J);
    IN_LEN= IN_LEN - (J - I);
    IGNORE_CNT= IGNORE_CNT + (J - I);
    START= I;
    GOTO AGAIN;
 
IGNORE_REST_OF_REC:
    IN_LEN= I;
 
CHECK_FOR_NULL_RECORD:
    IF IN_LEN = 0 THEN
ALT_RETURN:
       ALTRETURN;
 
RE_TURN:
    RETURN;
 
END REMOVE_IGNORE_CHARS;
%EJECT;
EXPAND: PROC( VEC_,NUM_WORDS,BUFSIZ )  ALTRET;
%VLP_VECTOR  (FPTN                     = VEC_,
              STCLASS=);
DCL NUM_WORDS                UBIN;
DCL BUFSIZ                   UBIN;
 
    GDS.V.SEGSIZE#= NUM_WORDS;
    GDS.RESULTS_= VECTOR(VEC_);
    CALL M$GDS( GDS )  ALTRET( ALT_RETURN );
    BUFSIZ= VEC_.W1.VSIZE#+1;
RE_TURN:
    RETURN;
 
ALT_RETURN:
    ALTRETURN;
 
END EXPAND;
%EJECT;
END SPLIT;
