/*M* LARK_SI607 LARK_SELECT_CMD  Comgroup selection processing */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*T*/
/*X* DDA */
/*F*
   NAME:          LARK_SELECT_CMD
   PURPOSE:       Process the SELECT command
   DESCRIPTION:   This module receives the parse tree for the SELECT command
                  and processes it through the use of the M$FID command.
*/
/*D*
   NAME:          LARK_SELECT_CMD
   CALL:          CALL LARK_SELECT_CMD ( PARSE$OUT )
   PARAMETERS:    PARSE$OUT is an X$PARSE macro which gives access to the
                     output blocks genterated by X$PARSE
   INTERFACE:     LARK_INTERNAL_ERROR
                  LARK_PROCESS_FID
   INPUT:         PARSE$OUT
   OUTPUT:        LARK$GETCMD_ (information in structure is important for ?)
                  VLP$ACCT_CG
                  VLP$NAME_CG
                  VLP$PASS_CG
                  VLP$SETSTA_LARK
                  VLP$SN_CG
                  VLP$WSN_CG
   DESCRIPTION:   SELECT_CMD syntax =
                     'SEL/ECT' ;
                     SELECT_OPTION_LIST
*/
 
%EJECT ;
LARK_SELECT_CMD : PROC ( P_OUT$BLK ) ALTRET ;
 
/*
   Includes
*/
 
%INCLUDE CP_6 ;
%INCLUDE CP_6_SUBS ;
 
%INCLUDE LARK_C61 ;
%INCLUDE LARK_C62 ;
%INCLUDE LARK_C63 ;
 
%INCLUDE XU_MACRO_C ;
%INCLUDE XUG_ENTRY ;
 
/*
    Entries
*/
 
%LARK_INTERNAL_ERROR ;
%LARK_PROCESS_FID ;
 
/*
   Parameters
*/
 
%PARSE$OUT
          ( NAME           = P_OUT$BLK,
            STCLASS        = "" ) ;
 
/*
   Structures
*/
 
%LARK_GLOBALS ;
 
%LARK_PARSEBLKS ;
 
%B$ALT ;
 
%B$TCB ;
 
/*
   Local data
*/
 
DCL         B$TCB$         PTR SYMREF ;
DCL         BLK$           PTR ;
DCL         I              SBIN ;
DCL         SUBLK$         PTR ;
 
%EJECT ;
IF ( P_OUT$BLK.CODE ~= %SELECT_CMD ) OR
   ( P_OUT$BLK.NSUBLKS ~= 1 ) THEN DO ;
   CALL LARK_INTERNAL_ERROR ;
   GOTO ALT ;
END ;
 
/*
   Processing the parameter list.
*/
 
BLK$ = P_OUT$BLK.SUBLK$ ( 0 ) ;
 
IF ( BLK$->OUT$BLK.CODE ~= %SELECT_OPTION_LIST ) OR
   ( BLK$->OUT$BLK.NSUBLKS < 1 ) THEN DO ;
   CALL LARK_INTERNAL_ERROR ;
   GOTO ALT ;
END ;
 
DO I = 0 TO ( BLK$->OUT$BLK.NSUBLKS - 1 ) ;
   SUBLK$ = BLK$->OUT$BLK.SUBLK$ ( I ) ;
   IF ( SUBLK$->OUT$BLK.NSUBLKS > 1 ) THEN DO ;
      CALL LARK_INTERNAL_ERROR ;
      GOTO ALT ;
   END ;
   DO CASE ( SUBLK$->OUT$BLK.CODE ) ;
      CASE ( %AUFORCE_OPT ) ;
         IF ( SUBLK$->OUT$BLK.SUBLK$(0)->OUT$BLK.CODE = %YES ) THEN DO ;
            AU_FORCE = %YES# ;
         END ; ELSE DO ;
            AU_FORCE = %NO# ;
         END ;
      CASE ( %CG_OPT ) ;
         CALL LARK_PROCESS_FID ( VECTOR ( SUBLK$->OUT$BLK.SUBLK$(0)->OUT$SYM.TEXT ) )
               ALTRET ( ALT ) ;
      CASE ( %DEBUG_OPT ) ;
         IF ( SUBLK$->OUT$BLK.SUBLK$(0)->OUT$BLK.CODE = %YES ) THEN DO ;
            DEBUG = %YES# ;
         END ; ELSE DO ;
            DEBUG = %NO# ;
         END ;
      CASE ( %MYSTATION_OPT ) ;
         VLP$SETSTA_LARK.MYSTATION# = SUBLK$->OUT$BLK.SUBLK$(0)->OUT$SYM.TEXT ;
   END ;
END ;
 
RETURN ;
 
ALT:
   ALTRETURN ;
 
END LARK_SELECT_CMD ;
%EOD ;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*T*/
/*X* DDA */
/*F*
   NAME:          LARK_OPEN_CMD
   PURPOSE:       Process the OPEN command
   DESCRIPTION:   This module receives the parse tree for a OPEN command
                  and processes it into data structures used with the M$OPEN.
*/
/*D*
   NAME:          LARK_OPEN_CMD
   CALL:          CALL LARK_OPEN_CMD ( PARSE$OUT )
   PARAMETERS:    PARSE$OUT is an X$PARSE macro which gives access to the
                     output blocks generated by X$PARSE
   INTERFACE:     LARK_INTERNAL_ERROR
                  LARK_PROCESS_FID
                  LARK_REPORT_CMD_ERROR
                  LARK_REPORT_PMME_ERROR
   INPUT:         PARSE$OUT
   OUTPUT:        LARK$GETCMD_ (information in structure is important for "?")
   SCRATCH:       VLP$ACCT_CG
                  VLP$NAME_CG
                  VLP$PASS_CG
                  VLP$SN_CG
                  VLP$WSN_CG
   DESCRIPTION:   OPEN_CMD syntax =
                     'OPE/N' ;
                     [ CG_FID ] ;
                     OPEN_OPTION_LIST
*/
 
%EJECT ;
LARK_OPEN_CMD : PROC ( P_OUT$BLK ) ALTRET ;
 
/*
   Includes
*/
 
%INCLUDE CP_6 ;
%INCLUDE CP_6_SUBS ;
 
%INCLUDE LARK_C61 ;
%INCLUDE LARK_C62 ;
%INCLUDE LARK_C63 ;
 
%INCLUDE XU_MACRO_C ;
%INCLUDE XUG_ENTRY ;
 
/*
   Entries
*/
 
%LARK_INTERNAL_ERROR ;
%LARK_PROCESS_FID ;
%LARK_READ_MESSAGE ;
%LARK_REPORT_CMD_ERROR ;
%LARK_REPORT_PMME_ERROR ;
 
/*
   Parameters
*/
 
%PARSE$OUT
       ( NAME              = P_OUT$BLK,
         STCLASS           = "" );
 
/*
   Error Messages
*/
 
/*E*
   ERROR:         LAR-E$LARK_MUST_SPECIFY_STATION#-3
   MESSAGE0:      Station name must be specified
   MESSAGE1:      Default station name is not supplied
   DESCRIPTION:   User must specify a unique station name.
*/
 
/*E*
   ERROR:         LAR-E$LARK_STATION_IS_OPEN#-3
   MESSAGE0:      An open station already exists
   MESSAGE1:      Only one station can be open through this DCB
   DESCRIPTION:   One DCB is used for this station; only one station can be open.
*/
 
/*
   Structures
*/
 
%LARK_GLOBALS ;
 
%LARK_PARSEBLKS ;
 
%B$ALT ;
 
%B$TCB ;
 
%F$DCB ;
 
%FPT_OPEN
       ( FPTN                 = FPT_OPEN_CONTROL,
         STCLASS              = CONSTANT,
         ASN                  = COMGROUP,
         DCB                  = M$CTRLCG,
         FUN                  = UPDATE,
         SCRUB                = YES,
         SHARE                = ALL ) ;
 
%FPT_OPEN
       ( FPTN                 = FPTOPEN_CONTROL,
         STCLASS              = AUTO ) ;
 
/*
   Local data
*/
 
DCL      B$TCB$               PTR SYMREF ;
DCL      BLK$                 PTR ;
DCL      I                    SBIN ;
DCL      SUBLK$               PTR ;
DCL      SYM$                 PTR ;
 
%EJECT ;
IF ( P_OUT$BLK.CODE ~= %OPEN_CMD ) OR
   ( P_OUT$BLK.NSUBLKS < 1 ) OR ( P_OUT$BLK.NSUBLKS > 2 ) THEN DO ;
   CALL LARK_INTERNAL_ERROR ;
   GOTO ALT ;
END ;
 
/*
   Check to make sure a station isn't already open through this DCB.
*/
 
IF M$CTRLCG$->F$DCB.FCD# THEN DO ;
   CALL LARK_REPORT_CMD_ERROR ( %E$LARK_STATION_IS_OPEN#,
                                3 ) ;
   GOTO ALT ;
END ;
 
 
BLK$ = P_OUT$BLK.SUBLK$ ( 0 ) ;
 
/*
   Processing the CG_FID if one has been specified.
*/
 
IF ( BLK$->OUT$SYM.CODE = %CG_FID ) THEN DO ;
   CALL LARK_PROCESS_FID ( VECTOR ( BLK$->OUT$SYM.TEXT ) )
         ALTRET ( ALT ) ;
END ;
 
FPTOPEN_CONTROL = FPT_OPEN_CONTROL ;
FPTOPEN_CONTROL.V_ = VECTOR ( FPTOPEN_CONTROL.V ) ;
FPTOPEN_CONTROL.ACCT_ = VECTOR ( VLP$ACCT_CG ) ;
FPTOPEN_CONTROL.NAME_ = VECTOR ( VLP$NAME_CG ) ;
FPTOPEN_CONTROL.PASS_ = VECTOR ( VLP$PASS_CG ) ;
FPTOPEN_CONTROL.SETSTA_ = VECTOR ( VLP$SETSTA_CONTROL ) ;
FPTOPEN_CONTROL.SN_ = VECTOR ( VLP$SN_CG ) ;
FPTOPEN_CONTROL.WSN_ = VECTOR ( VLP$WSN_CG ) ;
 
/*
   Processing the OPEN_OPTION_LIST.
*/
 
IF ( P_OUT$BLK.NSUBLKS = 2 ) THEN DO ;
   BLK$ = P_OUT$BLK.SUBLK$ ( 1 ) ;
END ;
 
IF ( BLK$->OUT$BLK.CODE ~= %OPEN_OPTION_LIST ) OR
   ( BLK$->OUT$BLK.NSUBLKS < 1 ) THEN DO ;
   CALL LARK_INTERNAL_ERROR ;
   GOTO ALT ;
END ;
 
DO I = 0 TO ( BLK$->OUT$BLK.NSUBLKS - 1 ) ;
   SUBLK$ = BLK$->OUT$BLK.SUBLK$ ( I ) ;
   IF ( SUBLK$->OUT$BLK.NSUBLKS > 1 ) THEN DO ;
      CALL LARK_INTERNAL_ERROR ;
      GOTO ALT ;
   END ;
   DO SELECT ( SUBLK$->OUT$BLK.CODE ) ;
      SELECT ( %AU_OPT ) ;
         IF ( SUBLK$->OUT$BLK.SUBLK$(0)->OUT$BLK.CODE = %YES ) THEN DO ;
            FPTOPEN_CONTROL.V.AU# = %YES# ;
         END ; ELSE DO ;
            FPTOPEN_CONTROL.V.AU# = %NO# ;
         END ;
      SELECT ( %JOURNALBP_OPT ) ;
         IF ( SUBLK$->OUT$BLK.SUBLK$(0)->OUT$BLK.CODE = %YES ) THEN DO ;
            FPTOPEN_CONTROL.V.GHSTACS# = %JRNLOPN# ;
         END ; ELSE DO ;
            FPTOPEN_CONTROL.V.GHSTACS# = 0 ;
         END ;
      SELECT ( %MYSTATION_OPT ) ;
         VLP$SETSTA_CONTROL.MYSTATION# = SUBLK$->OUT$BLK.SUBLK$(0)->OUT$SYM.TEXT ;
      SELECT ( ELSE ) ;
         CALL LARK_INTERNAL_ERROR ;
         GOTO ALT ;
   END;
END ;
 
/*
   Make sure a station name was specified.
*/
 
IF ( VLP$SETSTA_CONTROL.MYSTATION# = ' ' ) THEN DO ;
   CALL LARK_REPORT_CMD_ERROR ( %E$LARK_MUST_SPECIFY_STATION#,
                                3 ) ;
   GOTO ALT ;
END ;
 
/*
   Opening the station.
*/
 
CALL M$OPEN ( FPTOPEN_CONTROL )
      WHENALTRETURN DO ;
         CALL LARK_REPORT_PMME_ERROR ( B$TCB$->B$TCB.ALT$->B$ALT.ERR,
                                       M$CTRLCG_DCBNUM ) ;
         VLP$SETSTA_CONTROL.MYSTATION# = ' ' ;
         GOTO ALT ;
      END ;
 
/*
   Issue the first no-wait read for control purposes.
*/
 
VLP$STATION_CONTROL.STATION# = '?' ;
CALL LARK_READ_MESSAGE ( VECTOR ( FPT$READ_CONTROL.V ),
                         VECTOR ( VLP$STATION_CONTROL ),
                         VECTOR ( CONTROL_BUFFER ) )
      WHENALTRETURN DO ;
         CALL LARK_INTERNAL_ERROR ;
         GOTO ALT ;
      END ;
 
RETURN ;
 
ALT:
   ALTRETURN ;
 
END LARK_OPEN_CMD ;
%EOD ;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*T*/
/*X* DDA */
/*F*
   NAME:          LARK_CLOSE_CMD
   PURPOSE:       Process the CLOSE command
   DESCRIPTION:   This module receives the parse tree for a CLOSE command
                  and processes it into data structures used with the M$CLOSE.
*/
/*D*
   NAME:          LARK_CLOSE_CMD
   CALL:          CALL LARK_CLOSE_CMD ( PARSE$OUT )
   PARAMETERS:    PARSE$OUT is an X$PARSE macro which gives access to the
                     output blocks generated by X$PARSE
   INTERFACE:     LARK_ABNORMAL_LARKETTE_MESSAGE
                  LARK_CHECK_NWIO_ERRORS
                  LARK_GENERICSTA_NOPARSE_CMD
                  LARK_INTERNAL_ERROR
                  LARK_REPORT_CMD_ERROR
                  LARK_REPORT_PMME_ERROR
                  LARK_WRITE_MESSAGE
   INPUT:         PARSE$OUT
   OUTPUT:        LARK$GETCMD_ (information in structure is important for "?")
   SCRATCH:       VLP$ACCT_CG
                  VLP$NAME_CG
                  VLP$PASS_CG
                  VLP$SN_CG
                  VLP$WSN_CG
   DESCRIPTION:   CLOSE_CMD syntax =
                     'CLO/SE' ;
                     [ CLOSE_OPTION_LIST ]
*/
 
%EJECT ;
LARK_CLOSE_CMD : PROC ( P_OUT$BLK ) ALTRET ;
 
/*
   Includes
*/
 
%INCLUDE CP_6 ;
%INCLUDE CP_6_SUBS ;
 
%INCLUDE LARK_C61 ;
%INCLUDE LARK_C62 ;
%INCLUDE LARK_C63 ;
%INCLUDE LARKETTE_C61 ;
 
%INCLUDE XU_MACRO_C ;
%INCLUDE XUG_ENTRY ;
 
/*
   Entries
*/
 
%LARK_ABNORMAL_LARKETTE_MESSAGE ;
%LARK_CHECK_NWIO_ERRORS ;
%LARK_GENERICSTA_NOPARSE_CMD ;
%LARK_INTERNAL_ERROR ;
%LARK_REPORT_CMD_ERROR ;
%LARK_REPORT_PMME_ERROR ;
%LARK_WRITE_MESSAGE ;
 
/*
   Parameters
*/
 
%PARSE$OUT
       ( NAME              = P_OUT$BLK,
         STCLASS           = "" );
 
/*
   Error Messages
*/
 
/*E*
   ERROR:         LAR-E$LARK_STATION_IS_CLOSED#-3
   MESSAGE0:      No open station exists
   MESSAGE1:      This DCB is not open
   DESCRIPTION:   One DCB is used for this station; it isn't open.
*/
 
/*E*
   ERROR:         LAR-E$LARK_WRONG_STA_NAME#-3
   MESSAGE0:      No open station exists with this name
   MESSAGE1:      This DCB is open, but the station name is not as specified
   DESCRIPTION:   One DCB is used for this station; it doesn't have this name.
*/
 
/*
   Structures
*/
 
%LARK_GLOBALS ;
%LARK_NAMELIST ;
%LARK_PARSEBLKS ;
 
%B$ALT ;
 
%B$TCB ;
 
%F$DCB ;
 
%FPT_CHECK
       ( FPTN                 = FPT_CHECK_NWIO,
         STCLASS              = CONSTANT,
         DCB                  = M$CTRLCG ) ;
 
%FPT_CLOSE
       ( FPTN                 = FPT_CLOSE_CONTROL,
         STCLASS              = CONSTANT,
         DCB                  = M$CTRLCG,
         DISP                 = SAVE ) ;
 
%FPT_CLOSE
       ( FPTN                 = FPTCLOSE_CONTROL,
         STCLASS              = AUTO ) ;
 
/*
   Local data
*/
 
DCL      B$TCB$               PTR SYMREF ;
DCL      BLK$                 PTR ;
DCL      I                    SBIN ;
DCL      SUBLK$               PTR ;
DCL      SYM$                 PTR ;
 
%EJECT ;
IF ( P_OUT$BLK.CODE ~= %CLOSE_CMD ) OR ( P_OUT$BLK.NSUBLKS > 1 ) THEN DO ;
   CALL LARK_INTERNAL_ERROR ;
   GOTO ALT ;
END ;
 
/*
   Check to make sure a station is open through this DCB.
*/
 
IF NOT M$CTRLCG$->F$DCB.FCD# THEN DO ;
   CALL LARK_REPORT_CMD_ERROR ( %E$LARK_STATION_IS_CLOSED#,
                                3 ) ;
   GOTO ALT ;
END ;
 
IF ( P_OUT$BLK.NSUBLKS > 0 ) THEN DO;
   BLK$ = P_OUT$BLK.SUBLK$ ( 0 ) ;
 
   IF ( BLK$->OUT$BLK.CODE ~= %CLOSE_OPTION_LIST ) OR
      ( BLK$->OUT$BLK.NSUBLKS < 1 ) THEN DO ;
      CALL LARK_INTERNAL_ERROR ;
      GOTO ALT ;
   END ;
 
   DO I = 0 TO ( BLK$->OUT$BLK.NSUBLKS - 1 ) ;
      SUBLK$ = BLK$->OUT$BLK.SUBLK$ ( I ) ;
      IF ( SUBLK$->OUT$BLK.NSUBLKS > 1 ) THEN DO ;
         CALL LARK_INTERNAL_ERROR ;
         GOTO ALT ;
      END ;
      DO SELECT ( SUBLK$->OUT$BLK.CODE ) ;
         SELECT ( %MYSTATION_OPT ) ;
            IF ( VLP$SETSTA_CONTROL.MYSTATION# ~= SUBLK$->OUT$BLK.SUBLK$(0)->OUT$SYM.TEXT ) THEN DO ;
               CALL LARK_REPORT_CMD_ERROR ( %E$LARK_WRONG_STA_NAME#,
                                            3 ) ;
               GOTO ALT ;
            END ;
         SELECT ( ELSE ) ;
            CALL LARK_INTERNAL_ERROR ;
            GOTO ALT ;
      END;
   END ;
END ;
 
/*
   Aborting all executing LARKETTE's associated with this control station.
*/
 
DO I = 0 TO ( NAMELIST_CT - 1 ) ;
   IF ( NAMELIST.CONTROL_STA# ( I ) ~= ' ' ) THEN DO ;
      CALL LARK_GENERICSTA_NOPARSE_CMD ( ,
                                         %ABORT_LARKETTE ,
                                         I ) ;
   END ;
END ;
 
/*
   Closing the station.
*/
 
FPTCLOSE_CONTROL = FPT_CLOSE_CONTROL ;
FPTCLOSE_CONTROL.V_ = VECTOR ( FPTCLOSE_CONTROL.V ) ;
VLP$SETSTA_CONTROL.MYSTATION# = ' ' ;
CALL M$CLOSE ( FPTCLOSE_CONTROL )
      WHENALTRETURN DO ;
         CALL LARK_REPORT_PMME_ERROR ( B$TCB$->B$TCB.ALT$->B$ALT.ERR,
                                       M$CTRLCG_DCBNUM ) ;
         GOTO ALT ;
      END ;
 
CALL M$CHECK ( FPT_CHECK_NWIO )
      WHENALTRETURN DO ;
         CALL LARK_REPORT_PMME_ERROR ( B$TCB$->B$TCB.ALT$->B$ALT.ERR,
                                       M$CTRLCG_DCBNUM ) ;
         GOTO ALT ;
      END ;
CONTROL_NWIO.COMPLETE = %NO# ;
 
RETURN ;
 
ALT:
   ALTRETURN ;
 
END LARK_CLOSE_CMD ;
