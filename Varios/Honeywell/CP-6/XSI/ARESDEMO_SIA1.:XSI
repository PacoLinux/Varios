MENU DEMO;
    MAIN;
    REPEAT;
    ROW(TAB) TABS(1 40);
    ABBREV;
    WINDOW(POS=TOP,LEN=6,HBRDRCHR='=',BTMBRDR);
    PROMPT('Function: ')
 
TEXT '---- ARES demo functions ----' ROW(1) LEN(80) JUST(C)
TEXT ' ' ROW(2)
 
GLOBAL CREATED
GLOBAL CRTOGO
 
ON ENTRY
    CLEAR IWINDOW
    LET CREATED='N'
    LET CRTOGO='Y'
    DO 'T PAGEHALT=NO,SCROLL=NO'
    IF NOT $FID_EXIST('DEMO_RTD') THEN GOTO E1
        DI 'The model DEMO already exists.'
        LET YORN=$INPUT('OK to delete?',A3)
        LET YORN=$SUBSTR(YORN,0,1)
        IF YORN='N' OR YORN='n' THEN EXIT
        ENTER DROP_MODEL
E1: CLEAR IWINDOW
    SET ECHO
 
CHOICE NAME(START) PROMPT('Getting started')
    REMOVE WINDOW
    CLEAR IWINDOW
    ENTER START
 
CHOICE NAME(HARD) PROMPT('Hard copy listing')
    REMOVE WINDOW
    CLEAR IWINDOW
    ENTER HARD_COPY
 
CHOICE NAME(DEMO) PROMPT('Do the demo')
    REMOVE WINDOW
    CLEAR IWINDOW
    IF CREATED='Y' THEN GOTO DEM1
        ENTER CREATE_MODEL
        ENTER INVOKE_MODEL
        ENTER INSERT_DATA
DEM1:
    ENTER DEMO1
    ENTER DROP_MODEL
    GOTO END
 
CHOICE NAME(END) PROMPT('End')
END:
    REMOVE WINDOW
    CLEAR IWINDOW
    SET ECHO NO
    DO 'T SCR'
    ISSUE 'END'
    EXIT
 
ON ABORT
    REMOVE WINDOW
    CLEAR IWINDOW
    IF CREATED='N' THEN GOTO ABO1
        DI 'The demo database is being deleted'
        ENTER DROP_MODEL
  ABO1:
    DO 'T SCR'
    CLEAR OUTPUT
    ISSUE 'END'
    EXIT
 
ON BREAK
    GO
%EOD;
 
PROC CRTOGO
 
GLOBAL CRTOGO
    IF CRTOGO='Y' THEN LET T=$INPUT('(CR TO GO)',A3)
    CLEAR IWINDOW
 
ON BREAK
    CLEAR IWINDOW
    GO
%EOD;
 
PROC START
    DI 'This is a self-directed demo in which you will be given the choice'
    DI 'of which features you wish to demonstrate.  Each set will consist'
    DI 'of a number of ARES commands and a simple explanation of their'
    DI 'significant facts.  The features in this demo can be demonstrated'
    DI 'in any order.  However, executing them in order will provide a'
    DI 'smooth transition from one concept to another.'
    DI ' '
    DI 'No knowledge of ARES is needed to run this demo, however, this'
    DI 'demo is not meant to be a tutorial on the use of ARES.'
    DI ' '
    DI 'When using the demo it may help if the structure and initial data'
    DI 'in the database is available on hard copy so that it can be referred'
    DI 'to by the user.'
    DI ' '
    LET YORN=$INPUT('Hard copy listing (Y or N)?',A3)
    LET YORN=$SUBSTR(YORN,0,1)
    CLEAR IWINDOW
    IF YORN='Y' OR YORN='y' THEN ENTER HARD_COPY
%EOD;
 
PROC HARD_COPY
 
GLOBAL CRTOGO
 
    LET CRTOGO='N'
    DI 'The complete demo will be run so that the displays can be saved.'
    DI 'Where would you like the information sent?'
    LET DEST=$INPUT('Destination?',FID)
    IF DEST='' THEN LET DEST='LP@'
    DO 'DRIBBLE OVER '||DEST
    ENTER CREATE_MODEL
    ENTER INVOKE_MODEL
    ENTER INSERT_DATA
    ENTER SIMPLE
    ENTER COMPLEX
    ENTER DISPLAY
    ENTER FORMAT
    ENTER UPDATE
    ENTER FUNCTIONS
    ENTER ALTER
    ENTER STOREDDML
    ENTER SHARED
    ENTER APPLICATION
    ENTER PRIVS
    ENTER DROP_MODEL
    LET CRTOGO='Y'
    DO 'DONT DRIBBLE'
%EOD;
 
PROC CREATE_MODEL
 
GLOBAL CREATED
 
    DI 'The first step is to make the actual database (or model, as it is'
    DI 'known in ARES).  The name of our model is DEMO.'
    DI ' '
    ISSUE 'CREATE MODEL DEMO'
    DI ' '
    DI 'Next we specify the tables which belong to the model.  We will be'
    DI 'creating three tables: SUPPLIER, PART and SP.'
    DI ' '
    ENTER CRTOGO
 
    ISSUE 'CREATE TABLE SUPPLIER COMMENT=''Suppliers'';'
    ISSUE '    (S$ CHAR(2) COMMENT=''Supplier number'',;'
    ISSUE '    SNAME CHAR(8) COMMENT=''Supplier name'',;'
    ISSUE '    STATUS INTEGER COMMENT=''Tax status'',;'
    ISSUE '    CITY CHAR(10) COMMENT=''City'');'
    ISSUE '  KEY IS PRIMARY(S$_KEY=S$)'
    DI ' '
    DI 'The table SUPPLIER consists of 4 columns.  Associated with each'
    DI 'column is data type and an optional comment field (which we will'
    DI 'see later when DISPLAY commands are discussed).  The primary'
    DI 'key S$_KEY consists of the field S$ and is used to identify the'
    DI 'unique records in the table.'
    DI ' '
    ENTER CRTOGO
 
    ISSUE 'CREATE TABLE PART COMMENT=''Parts'';'
    ISSUE '    (P$ CHAR(2) COMMENT=''Part number'',;'
    ISSUE '    PNAME CHAR(8) COMMENT=''Part name'',;'
    ISSUE '    COLOR CHAR(6) COMMENT=''Major color'',;'
    ISSUE '    WEIGHT INTEGER COMMENT=''Weight in grams'',;'
    ISSUE '    CITY CHAR(10));'
    ISSUE '  KEY IS PRIMARY(P$_KEY=P$),;'
    ISSUE '                (COLOR_KEY=COLOR)'
    DI ' '
    DI 'The second table is PART.  Its columns are listed and described in'
    DI 'the same manner as in SUPPLIER.  In addition to the primary key, a'
    DI 'secondary key is specified (COLOR_KEY).  The secondary key will be'
    DI 'used by ARES as an alternate access path.  It does not affect the'
    DI 'types of commands a user can issue against the table.'
    DI ' '
    ENTER CRTOGO
 
    ISSUE 'CREATE TABLE SP COMMENT=''Parts supplied by specific suppliers'';'
    ISSUE '    (S$ CHAR(2),;'
    ISSUE '    P$ CHAR(2),;'
    ISSUE '    QTY INTEGER COMMENT=''Number of parts supplied'');'
    ISSUE '  KEY IS PRIMARY (S$P$_KEY=S$,P$)'
    DI ' '
    DI 'The third table is SP and is described in a similar fashion as'
    DI 'the previous tables.  Notice that the primary key for this table'
    DI 'consists of two separate fields (S$ and P$).  It is the combination'
    DI 'of the values in the two fields that will identify the unique records'
    DI 'in SP.'
    DI ' '
    ENTER CRTOGO
 
    DI 'After we have fully described our database, we issue a COMMIT command'
    DI 'which tells ARES we have finished our description and the database'
    DI 'can now be created.'
    DI ' '
    ISSUE 'COMMIT'
    DI ' '
    ENTER CRTOGO
 
    LET CREATED='Y'
%EOD;
 
PROC DROP_MODEL
 
GLOBAL CREATED
 
    SET ECHO NO
    ISSUE 'DROP MODEL DEMO'
    ISSUE 'COMMIT'
    SET ECHO
 
    LET CREATED='N'
%EOD;
 
PROC INVOKE_MODEL
 
 
    SET ECHO NO
    ISSUE 'INVOKE DEMO'
    ISSUE 'SET OVERWRITE ON'
    SET ECHO
%EOD;
 
PROC INSERT_DATA
 
    DI 'The next step is to populate the database with real data.  This is'
    DI 'done using the INSERT command in ARES.  In its rudimentary form, a'
    DI 'list of values is specified (one per column) for each record to be'
    DI 'inserted into the table.'
    DI ' '
    ISSUE 'INSERT INTO SUPPLIER VALUES(''S1'',''SMITH'',20,''LONDON'')'
    ISSUE 'INSERT INTO SUPPLIER VALUES(''S2'',''JONES'',10,''PARIS'')'
    ISSUE 'INSERT INTO SUPPLIER VALUES(''S3'',''BLAKE'',30,''PARIS'')'
    ISSUE 'INSERT INTO SUPPLIER VALUES(''S4'',''CLARK'',20,''LONDON'')'
    ISSUE 'INSERT INTO SUPPLIER VALUES(''S5'',''ADAMS'',30,''ATHENS'')'
    ISSUE 'INSERT INTO SUPPLIER VALUES(''S6'',''BOND'',10,''ROME'')'
    DI ' '
    ENTER CRTOGO
 
    DI 'To save some typing, ARES allows multiple records to be inserted'
    DI 'into a table at one time.'
    DI ' '
    ISSUE 'INSERT INTO PART VALUES;'
    ISSUE '    (''P1'',''NUT'',''RED'',12,''LONDON''),;'
    ISSUE '    (''P2'',''BOLT'',''GREEN'',17,''PARIS''),;'
    ISSUE '    (''P3'',''SCREW'',''BLUE'',17,''ROME''),;'
    ISSUE '    (''P4'',''SCREW'',''RED'',14,''LONDON''),;'
    ISSUE '    (''P5'',''CAM'',''BLUE'',12,''PARIS''),;'
    ISSUE '    (''P6'',''COG'',''RED'',19,''LONDON'')'
    DI ' '
    DI 'Each set of values contained in a pair of parenthesis represent'
    DI 'a record being inserted into the table.'
    DI ' '
    ENTER CRTOGO
 
    ISSUE 'INSERT INTO SP VALUES;'
    ISSUE '    (''S1'',''P1'',350),;'
    ISSUE '    (''S1'',''P2'',200),;'
    ISSUE '    (''S1'',''P3'',400),;'
    ISSUE '    (''S1'',''P4'',200),;'
    ISSUE '    (''S1'',''P5'',100),;'
    ISSUE '    (''S1'',''P6'',100),;'
    ISSUE '    (''S2'',''P1'',300),;'
    ISSUE '    (''S2'',''P2'',425),;'
    ISSUE '    (''S3'',''P2'',200),;'
    ISSUE '    (''S4'',''P2'',200),;'
    ISSUE '    (''S4'',''P4'',275),;'
    ISSUE '    (''S4'',''P5'',400),;'
    ISSUE '    (''S5'',''P4'',200),;'
    ISSUE '    (''S5'',''P6'',250)'
    DI ' '
    DI 'We will see other examples of the INSERT command later on in the'
    DI 'demo that will facilitate even easier data entry.'
    DI ' '
    ENTER CRTOGO
%EOD;
 
MENU DEMO1;
    REPEAT;
    ROW(TAB) TABS(1,40);
    ABBREV;
    WINDOW(POS=TOP,LEN=11,HBRDRCHR='=',BTMBRDR);
    PROMPT('DML feature: ')
 
TEXT '---- DML features ----' ROW(1) LEN(80) JUST(C)
TEXT ' ' ROW(2)
 
CHOICE NAME(SIMPLE) PROMPT ('Simple data retrieval')
    REMOVE WINDOW
    CLEAR IWINDOW
    ENTER SIMPLE
 
CHOICE NAME(COMPLEX) PROMPT ('Complex data retrieval')
    REMOVE WINDOW
    CLEAR IWINDOW
    ENTER COMPLEX
 
CHOICE NAME(DISPLAY) PROMPT ('Displaying descriptions')
    REMOVE WINDOW
    CLEAR IWINDOW
    ENTER DISPLAY
 
CHOICE NAME(FORMAT) PROMPT ('Formatting reports')
    REMOVE WINDOW
    CLEAR IWINDOW
    ENTER FORMAT
 
CHOICE NAME(UPDATE) PROMPT ('Updating data')
    REMOVE WINDOW
    CLEAR IWINDOW
    ENTER UPDATE
 
CHOICE NAME(FUNCTIONS) PROMPT ('Functions')
    REMOVE WINDOW
    CLEAR IWINDOW
    ENTER FUNCTIONS
 
CHOICE NAME(ALTER) PROMPT ('Altering the database')
    REMOVE WINDOW
    CLEAR IWINDOW
    ENTER ALTER
 
CHOICE NAME(STOREDDML) PROMPT ('Stored DML ')
    REMOVE WINDOW
    CLEAR IWINDOW
    ENTER STOREDDML
 
CHOICE NAME(SHARED) PROMPT ('Shared access to data')
    REMOVE WINDOW
    CLEAR IWINDOW
    ENTER SHARED
 
CHOICE NAME(APPLICATION) PROMPT ('Application Interface')
    REMOVE WINDOW
    CLEAR IWINDOW
    ENTER APPLICATION
 
CHOICE NAME(PRIVS) PROMPT('Privileges')
    REMOVE WINDOW
    CLEAR IWINDOW
    ENTER PRIVS
 
CHOICE NAME(END) PROMPT('END')
    EXIT
 
ON BREAK
    GO
%EOD;
 
PROC SIMPLE
 
    DI 'The SELECT command is used to retrieve data from a table.  The'
    DI 'following command will retrieve all the records in PART:'
    DI ' '
    ISSUE 'SELECT * FROM PART'
    DI ' '
    DI 'The asterisk (*) is a shorthand symbol which indicates all the'
    DI 'columns in the table are to be displayed.'
    DI ' '
    ENTER CRTOGO
 
    DI 'If you wish to only see certain columns, they can be specifically'
    DI 'listed in place of the asterisk.'
    DI ' '
    ISSUE 'SELECT P$,PNAME,CITY FROM PART'
    DI ' '
    ENTER CRTOGO
 
    DI 'If you prefer to see the records in a different order, you may'
    DI 'specify an ORDER BY clause.'
    DI ' '
    ISSUE 'SELECT P$,PNAME,CITY FROM PART;'
    ISSUE 'ORDER BY CITY'
    DI ' '
    ENTER CRTOGO
 
    DI 'The ORDER BY clause can contain any number of fields and can'
    DI 'sort them in ascending or descending order.'
    DI ' '
    ISSUE 'SELECT P$,PNAME,CITY FROM PART;'
    ISSUE 'ORDER BY CITY DESCENDING, P$ ASCENDING'
    DI ' '
    ENTER CRTOGO
 
    DI 'The DISTINCT keyword can be used to eliminate duplicates from the'
    DI 'result.'
    DI ' '
    ISSUE 'SELECT DISTINCT CITY FROM SUPPLIER'
    DI ' '
    DI 'Each city is listed once no matter how many records it originally'
    DI 'appeared in.'
    DI ' '
    ENTER CRTOGO
 
    DI 'When only certain records in a table are of interest to the'
    DI 'user, the WHERE clause can be used to specify which records to '
    DI 'display.  Let''s find only records for suppliers based in Paris.'
    DI ' '
    ISSUE 'SELECT SNAME,CITY FROM SUPPLIER WHERE CITY=''PARIS'''
    DI ' '
    DI 'There is no limit to the number of criteria which can be specified.'
    DI ' '
    ISSUE 'SELECT * FROM SUPPLIER;'
    ISSUE 'WHERE CITY=''PARIS'' AND SNAME=''JONES'';'
    ISSUE 'AND (STATUS=10 OR STATUS=20);'
    ISSUE 'ORDER BY STATUS'
    DI ' '
    ENTER CRTOGO
 
    DI 'Choosing which records to see often depends on data contained'
    DI 'in more than one table.  In such a case two tables are said to be'
    DI 'joined together.  Let''s find the suppliers based in London that also'
    DI 'supply more than 250 of a single part.'
    DI ' '
    ISSUE 'SELECT SNAME,CITY,QTY;'
    ISSUE 'FROM SUPPLIER,SP;'
    ISSUE 'WHERE CITY=''PARIS'' AND SUPPLIER.S$=SP.S$ AND QTY>250'
    DI ' '
    DI 'Of particular note here are the facts that two tables are listed in the'
    DI 'FROM clause, that the field S$ is qualified by a table name since it'
    DI 'belongs to both tables and that the expression SUPPLIER.S$=SP.S$'
    DI 'involves a field that belongs to both tables.  It is this expression'
    DI 'that says how records in the two tables are combined (equal S$s).'
    DI ' '
    ENTER CRTOGO
 
    DI 'Sometimes we must match records in a table against themselves.  For'
    DI 'example, we might want to know what other parts are made in cities'
    DI 'that bolts are made in.'
    DI ' '
    ISSUE 'SELECT PART.PNAME,PART.CITY,P.PNAME;'
    ISSUE 'FROM PART,PART P;'
    ISSUE 'WHERE PART.PNAME=''BOLT'' AND PART.CITY=P.CITY;'
    ISSUE 'AND PART.P$~=P.P$'
    DI ' '
    DI 'Since we are logically using PART twice, it is listed twice in the'
    DI 'FROM clause.  The second reference to PART also states that we will'
    DI 'use the name P to distinguish it from the first reference.  The'
    DI 'final condition insures we do not match up a record with itself.'
    DI ' '
    ENTER CRTOGO
%EOD;
 
PROC COMPLEX
 
    DI 'As shown in the simple SELECTs, two tables can be joined together.'
    DI 'Another way to select records based on data in multiple tables is to'
    DI 'use subqueries.  As an example, let''s again find suppliers in Paris'
    DI 'that supply parts in quantities of more that 250 using a subquery.'
    DI ' '
    ISSUE 'SELECT SNAME FROM SUPPLIER;'
    ISSUE 'WHERE CITY=''PARIS'' AND S$ IS IN;'
    ISSUE '   (SELECT S$ FROM SP;'
    ISSUE '    WHERE QTY>250)'
    DI ' '
    DI 'Even though Jones supplies two different parts that would qualify,'
    DI 'his name only appears once.  This is one of the subtle features of'
    DI 'using subqueries.  Notice that each FROM clause specifies only one'
    DI 'table and therefore none of the columns need be qualified.'
    DI ' '
    ENTER CRTOGO
 
    DI 'Subqueries can be nested to any level.  Let''s find the suppliers'
    DI 'that supply either bolts or screws in quantities of greater than 250.'
    ISSUE 'SELECT SNAME FROM SUPPLIER;'
    ISSUE 'WHERE S$ IS IN;'
    ISSUE ' (SELECT S$ FROM SP WHERE QTY>250 AND P$ IS IN;'
    ISSUE '    (SELECT P$ FROM PART WHERE PNAME=''BOLT'' OR PNAME=''SCREW''))'
    DI 'For comparison purposes, a equivalent join query would look as follows:'
    ISSUE 'SELECT SNAME FROM SUPPLIER,SP,PART;'
    ISSUE 'WHERE SUPPLIER.S$=SP.S$ AND SP.QTY>250 AND;'
    ISSUE '      SP.P$=PART.P$ AND (PNAME=''BOLT'' OR PNAME=''SCREW'')'
    DI ' '
    ENTER CRTOGO
 
    DI 'Subqueries can reference columns of tables that are used in the'
    DI 'containing queries.  In this way subqueries can be based on the'
    DI 'comparison of more than one field.  Let''s again issue the command'
    DI 'that will find what other parts are made in cities that bolts are'
    DI 'made in.'
    DI ' '
    ISSUE 'SELECT PNAME,CITY;'
    ISSUE 'FROM PART;'
    ISSUE 'WHERE PNAME=''BOLT'' AND PART.CITY IS IN;'
    ISSUE '  (SELECT CITY FROM PART P WHERE P.P$~=PART.P$)'
    DI ' '
    ENTER CRTOGO
 
    DI 'ARES also provides the set operations UNION, INTERSECTION and MINUS.'
    DI 'These can be useful for answering certain questions.  For example,'
    DI 'we could find the list of cities contained in SUPPLIER or PART.'
    DI ' '
    ISSUE 'SELECT CITY FROM SUPPLIER;'
    ISSUE ' UNION;'
    ISSUE 'SELECT CITY FROM PART'
    DI ' '
    DI 'Notice that the duplicates have been automatically removed.'
    DI ' '
    ENTER CRTOGO
 
    DI 'We can find those cities PART and SUPPLIER have in common.'
    DI ' '
    ISSUE 'SELECT CITY FROM SUPPLIER;'
    ISSUE ' INTERSECT;'
    ISSUE 'SELECT CITY FROM PART'
    DI ' '
    DI 'We can also find those cities in SUPPLIER that are not in PART.'
    DI ' '
    ISSUE 'SELECT CITY FROM SUPPLIER;'
    ISSUE ' MINUS;'
    ISSUE 'SELECT CITY FROM PART'
    DI ' '
    ENTER CRTOGO
 
    DI 'Set operations can be combined in the fashion we have already'
    DI 'seen with other SELECT commands.  The following command will find'
    DI 'the information on any suppliers that are not supplying any parts:'
    DI ' '
    ISSUE 'SELECT * FROM SUPPLIER;'
    ISSUE 'WHERE S$=(SELECT S$ FROM SUPPLIER;'
    ISSUE '          MINUS SELECT S$ FROM SP)'
    DI ' '
    DI 'Of course it could have been more simply stated as:'
    DI ' '
    ISSUE 'SELECT * FROM SUPPLIER;'
    ISSUE 'WHERE S$ IS NOT IN (SELECT S$ FROM SP)'
    DI ' '
    ENTER CRTOGO
%EOD;
 
PROC DISPLAY
 
    DI 'To facilitate the use of a database by unfamiliar or infrequent users,'
    DI 'ARES allows various information about the structure of the database to'
    DI 'be displayed.  The list of tables defined in the database can be'
    DI 'displayed with the following command:'
    DI ' '
    ISSUE 'LIST TABLES'
    DI ' '
    DI 'The textual information next to each table name is optional information'
    DI 'that the creator of the database has supplied to explain what each'
    DI 'table is for.'
    DI ' '
    ENTER CRTOGO
 
    DI 'In the same manner, the list of columns defined in the database'
    DI 'can be displayed.'
    DI ' '
    ISSUE 'LIST COLUMNS'
    DI ' '
    DI 'Again each column can be annotated by the database creator with'
    DI 'a comment explaining what each field is for.'
    DI ' '
    ENTER CRTOGO
 
    DI 'A specific table can be displayed.  This will show us the columns'
    DI 'in the table, their data types, and the defined keys.'
    DI ' '
    ISSUE 'DI TABLE PART'
    ENTER CRTOGO
 
    DI 'Columns can also be displayed.  ARES will show us the column''s'
    DI 'associated data type, and all the tables it belongs to.'
    DI ' '
    ISSUE 'DI COLUMN CITY'
    ENTER CRTOGO
 
    DI 'The above displays are presented in a fashion that is easy to read.'
    DI 'We might want to see the actual commands that are used to create the'
    DI 'table in its current form.  This can done by using the SYNTAX option'
    DI 'on the DISPLAY command.'
    DI ' '
    ISSUE 'DI TABLE PART SYNTAX'
    DI 'We could even send the output of such a display to a file so that we'
    DI 'could use it later.'
    DI ' '
    ISSUE 'DI TABLE PART SYNTAX OVER *PART'
    DI ' '
    ENTER CRTOGO
%EOD;
 
PROC FORMAT
 
    DI 'ARES provides a set of built-in formatting capabilities that can be'
    DI 'used to tailor a report to the user''s liking.  This is accomplished'
    DI 'with the FORMAT command.  We will use PART for our example so first'
    DI 'let us select the records we are interested in.'
    DI ' '
    ISSUE 'SELECT * FROM PART WHERE COLOR=''BLUE'''
    DI ' '
    ENTER CRTOGO
 
    DI 'The column titles can be made prettier by the following command.'
    DI ' '
    ISSUE 'FORMAT COLUMN PNAME NAME=''Part Name'''
    DI ' '
    DI 'We can then see the results of our change by using the PRINT command.'
    DI 'Since we did not issue another SELECT, the PRINT will reprint the same'
    DI 'results using the current format specifications.'
    DI ' '
    ISSUE 'PRINT'
    DI ' '
    ENTER CRTOGO
 
    DI 'The width of a field may be changed to make a report more spacious,'
    DI 'or to chop off a field at a certain length.  Numeric fields can be'
    DI 'given a fixed decimal place.'
    DI ' '
    ISSUE 'FORMAT COLUMN COLOR WIDTH=2'
    ISSUE 'FORMAT COLUMN CITY WIDTH=10'
    ISSUE 'FORMAT COLUMN WEIGHT WIDTH=5,2'
    ISSUE 'PRINT'
    DI ' '
    ENTER CRTOGO
 
    DI 'Fields can be specifically excluded from the result:'
    DI ' '
    ISSUE 'FORMAT EXCLUDE P$,CITY'
    ISSUE 'PRINT'
    DI ' '
    DI 'and then included again.'
    DI ' '
    ISSUE 'FORMAT INCLUDE CITY'
    ISSUE 'PRINT'
    DI ' '
    ENTER CRTOGO
 
    DI 'If we want to see what we have defined, we can display the current'
    DI 'set of format specifications.'
    DI ' '
    ISSUE 'DI FORMAT'
    DI ' '
    DI 'If this was an especially nice format that we wish to use again'
    DI 'in the future, we can put the commands necessary to make the'
    DI 'format into a file.'
    DI ' '
    ISSUE 'DI FORMAT SYNTAX OVER *FORMAT'
    DI ' '
    ENTER CRTOGO
 
    DI 'For the next set of formatting examples we will use data from all'
    DI 'three tables.  First let''s get the data of interest.'
    DI ' '
    ISSUE 'SELECT SNAME,PNAME,QTY;'
    ISSUE 'FROM SUPPLIER,PART,SP;'
    ISSUE 'WHERE SUPPLIER.S$=SP.S$ AND SP.P$=PART.P$ AND QTY>=300;'
    ISSUE 'ORDER BY SNAME'
    DI ' '
    ENTER CRTOGO
 
    DI 'Let''s do some initial tailoring of the report.'
    DI ' '
    ISSUE 'FORMAT COLUMN SNAME NAME=''Supplier'''
    ISSUE 'FORMAT COLUMN PNAME NAME=''Part'''
    ISSUE 'FORMAT COLUMN QTY NAME=''Quantity'''
    DI ' '
    DI 'But we also want to get cleaner breaks between the supplier names.'
    DI ' '
    ISSUE 'FORMAT GROUP SUPPLIER'
    ISSUE 'PRINT'
    DI 'Notice that column SNAME is now referred to as SUPPLIER since the'
    DI 'previous FORMAT command changed the column name.'
    DI ' '
    ENTER CRTOGO
 
    DI 'ARES can even print subtotals for column 3 whenever any of the values'
    DI 'for the grouped columns (SUPPLIER in our case) change.'
    DI ' '
    ISSUE 'FORMAT SUBTOTAL 3'
    ISSUE 'PRINT'
    ENTER CRTOGO
 
    DI 'Additional notes on formatting:'
    DI ' '
    DI '    CP-6 does have a more powerful report writer facility known'
    DI '    as ARGENT.  ARGENT lets you compile report definitions and at'
    DI '    a later time supply the data to be formatted.  Should you have'
    DI '    ARGENT reports already defined, you can use them on the data'
    DI '    you have selected from ARES.  The REPORT command in ARES will'
    DI '    automatically pass the results of the last SELECT to ARGENT'
    DI '    for formatting.'
    DI ' '
    ENTER CRTOGO
%EOD;
 
PROC UPDATE
 
    DI 'Let''s create a temporary table that we can make updates against'
    DI 'without affecting the data in the other tables.  The table will'
    DI 'consist of a list of cities and the countries and continents they'
    DI 'belong to.'
    DI ' '
    ISSUE 'CREATE TABLE CITIES(;'
    ISSUE '    CITY CHAR(10),;'
    ISSUE '    COUNTRY CHAR(10),;'
    ISSUE '    CONTINENT CHAR(10));'
    ISSUE '  KEY(K_CITY=CITY)'
    DI ' '
    DI 'Temporary tables can be displayed just like permanent tables.'
    DI ' '
    ISSUE 'DI TABLE CITIES'
    ENTER CRTOGO
 
    DI 'Next we insert data in the table.  As we have seen before this'
    DI 'can be done with the INSERT command.'
    DI ' '
    ISSUE 'INSERT INTO CITIES VALUES(''LONDON'',''ENGLAND'',''EUROPE''),;'
    ISSUE '                         (''PARIS'',''FRANCE'',''EUROPE''),;'
    ISSUE '                         (''ROME'',''ITALY'',''EUROPE'')'
    DI ' '
    ENTER CRTOGO
 
    DI 'If we wish to delete some of the records we have just inserted, we'
    DI 'can use the DELETE command.  We can delete only some records in'
    DI 'the table by using a WHERE expression similar to the one we have'
    DI 'used on SELECT commands.  Let''s delete the record for the city'
    DI 'of Rome or any city in France.'
    DI ' '
    ISSUE 'DELETE CITIES WHERE CITY=''ROME'' OR COUNTRY=''FRANCE'''
    DI ' '
    DI 'Or if we want we can delete all the records in the table.'
    DI ' '
    ISSUE 'DELETE ALL CITIES'
    DI ' '
    DI 'The keyword ALL must be used if no WHERE expression is given.  This'
    DI 'protects against inadvertently deleting all the records in the table.'
    DI ' '
    ENTER CRTOGO
 
    DI 'There is another form of INSERT that can be used when entering new data'
    DI 'into tables.  In this form (known as interactive insert) the user is'
    DI 'prompted with the field name for each field in a record of the '
    DI 'table until the first field is left empty.  Let''s insert the'
    DI 'information for London and Paris using the interactive form of the'
    DI 'INSERT command.  This is done by leaving off the VALUES clause.'
    DI ' '
    DI 'INSERT INTO CITIES'
    DI 'CITY:LONDON'
    DI 'COUNTRY:ENGLAND'
    DI 'CONTINENT:EUROPE'
    DI '  .. Inserted.'
    DI 'CITY:PARIS'
    DI 'COUNTRY:FRANCE'
    DI 'CONTINENT:EUROPE'
    DI '  .. Inserted.'
    DI 'CITY:'
    DI ' '
    ENTER CRTOGO
 
    DI 'But why should we have to retype the city names when they are already'
    DI 'in the database?  Well, there is really no need.  ARES provides'
    DI 'the ability to insert information into one table based on information'
    DI 'in another.  A third form of the INSERT command allows us to do this.'
    DI 'Let''s make a record in CITIES for each city that occurs in the'
    DI 'table PART and let''s leave out ROME again to complicate the example.'
    DI ' '
    ISSUE 'INSERT INTO CITIES;'
    ISSUE 'SELECT DISTINCT CITY,'' '','' '';'
    ISSUE 'FROM PART WHERE CITY~=''ROME'''
    DI ' '
    DI 'The reason for the two literal spaces ('' '') is that since the table'
    DI 'CITIES has three columns, we must specify three columns as the result'
    DI 'of the SELECT command.'
    DI ' '
    ENTER CRTOGO
 
    DI 'We still need to fill in the second and third column of the table to'
    DI 'complete our operation.  This can be done with the UPDATE command.'
    DI 'The UPDATE command lets us specify which records to update (by'
    DI 'using the same WHERE clause we have seen before), what fields are being'
    DI 'updated and what the new value of the fields should be.'
    DI 'We can update the COUNTRY field by issuing the following commands:'
    DI ' '
    ISSUE 'UPDATE CITIES SET COUNTRY=''ENGLAND'' WHERE CITY=''LONDON'''
    ISSUE 'UPDATE CITIES SET COUNTRY=''FRANCE'' WHERE CITY=''PARIS'''
    DI ' '
    DI 'The UPDATE command can update more than one record at a time as'
    DI 'in the following example that will fill in the continent name:'
    DI ' '
    ISSUE 'UPDATE CITIES SET CONTINENT=''EUROPE'' WHERE CITY~=''ROME'''
    DI ' '
    ENTER CRTOGO
 
    DI 'There is still an even easier way to fill in the field COUNTRY.  In'
    DI 'this form we identify the fields that we wish to be prompted for on a'
    DI 'record by record basis (as in interactive insert).  This is done by '
    DI 'specifying a SET clause without giving a new value.  The two types of'
    DI 'updates can even be mixed by specifying new values for some fields and'
    DI 'not for others.  Let''s do the same update using interactive update.'
    DI ' '
    DI 'UPDATE CITIES;'
    DI '+ SET CONTINENT=''EUROPE'',    "Just like before";'
    DI '+ COUNTRY                      "No new value so interactive update";'
    DI '+ WHERE CITY~=''ROME'''
    DI ' '
    DI 'CITY>LONDON'
    DI 'COUNTRY:ENGLAND'
    DI ' '
    DI 'CITY>PARIS'
    DI 'COUNTRY:FRANCE'
    DI '  .. 2 records UPDATEed..'
    DI ' '
    DI 'The primary key field CITY was displayed automatically for each record'
    DI 'so as to identify which record is being interactively updated.'
    DI ' '
    ENTER CRTOGO
 
    DI 'Now that we are done, we will drop the temporary table.'
    DI ' '
    ISSUE 'DROP TABLE CITIES'
    DI ' '
    ENTER CRTOGO
%EOD;
 
PROC FUNCTIONS
 
    DI 'ARES provides a set of statistical and mathematical functions'
    DI 'that can be used in any of the SELECT, INSERT, DELETE and'
    DI 'UPDATE commands.  The simplest type of functions are known'
    DI 'as scalar functions.  They return a single value for each'
    DI 'value passed to them.  Examples of scalar functions would'
    DI 'be absolute value, square root or any of the string manipulation'
    DI 'functions.  Let''s use square root in a query.'
    DI ' '
    ISSUE 'SELECT S$,SNAME,SQRT(STATUS);'
    ISSUE 'FROM SUPPLIER'
    DI ' '
    ENTER CRTOGO
 
    DI 'Scalar functions can also be used in the WHERE clause:'
    DI ' '
    ISSUE 'SELECT S$,CITY;'
    ISSUE 'FROM SUPPLIER;'
    ISSUE 'WHERE ABS(STATUS)>4'
    DI ' '
    DI 'and in the SET clause of an UPDATE command.'
    DI ' '
    ISSUE 'UPDATE SUPPLIER;'
    ISSUE 'SET STATUS=SQRT(STATUS)*SQRT(STATUS);'
    ISSUE 'WHERE SUBSTR(CITY,0,2)=CONCAT(''L'',''O'')'
    DI ' '
    ENTER CRTOGO
 
    DI 'All scalar functions can be used in a recursive fashion.  This'
    DI 'is particularly useful with the string functions.'
    DI ' '
    ISSUE 'SELECT CONCAT(SUBSTR(SNAME,0,1),LOWER(SUBSTR(SNAME,1)));'
    ISSUE 'FROM SUPPLIER'
    DI ' '
    ENTER CRTOGO
 
    DI 'The second type of function is known as a row function.  Row '
    DI 'functions produce a single result for multiple inputs.  Typical'
    DI 'examples of row functions are COUNT and SUM.'
    DI ' '
    ISSUE 'SELECT COUNT(S$) FROM SP'
    DI ' '
    ISSUE 'SELECT SUM(QTY) FROM SP WHERE P$=''P1'''
    DI ' '
    DI 'In each case a single result was produced even though multiple'
    DI 'input records where used.'
    DI ' '
    ENTER CRTOGO
 
    DI 'In the previous example, only when all the candidate records were'
    DI 'counted or totaled was the result produced.  We can request ARES'
    DI 'to produce partial counts or partial totals based on some logical'
    DI 'criteria.  For example, if we wanted to see a total of the quantities'
    DI 'supplied on a part-by-part basis we could issue the following command:'
    DI ' '
    ISSUE 'SELECT P$,SUM(QTY) FROM SP GROUP BY P$'
    DI ' '
    DI 'The GROUP BY clause means that a SUM should be computed for each'
    DI 'distinct value of P$ and a single summary record is produced.'
    DI ' '
    ENTER CRTOGO
 
    DI 'Multiple columns can be grouped and row functions can be used in'
    DI 'algebraic expressions.  In addition, a special HAVING clause can'
    DI 'be used to select only some of the summary records based on the'
    DI 'evaluation of the row function for that line.'
    DI ' '
    ISSUE 'SELECT CITY,P$,SUM(QTY)/COUNT(QTY);'
    ISSUE 'FROM SUPPLIER,SP;'
    ISSUE 'WHERE SUPPLIER.S$=SP.S$;'
    ISSUE 'GROUP BY CITY,P$;'
    ISSUE 'HAVING COUNT(QTY)>1'
    DI ' '
    ENTER CRTOGO
 
    DI 'Although ARES provides a set of built in functions, the user may have'
    DI 'needs of their own.  ARES allows users to create their own scalar'
    DI 'and row functions.  Here is an example of creating a scalar function'
    DI 'that performs exponentiation:'
    ISSUE 'CREATE FUNCTION EXP(X,Y): DECIMAL(60) FLOAT;'
    ISSUE 'DEFINE I INTEGER;'
    ISSUE 'BEGIN I:=Y, EXP:=1,;'
    ISSUE 'WHILE I>0 DO BEGIN;'
    ISSUE '    EXP:=EXP*X, I:=I-1;'
    ISSUE '    END;'
    ISSUE 'END'
    DI ' '
    DI 'Once created, the user function can be used like any other.'
    ISSUE 'SELECT STATUS,STATUS*STATUS,EXP(STATUS,2);'
    ISSUE 'FROM SUPPLIER;'
    ISSUE 'WHERE CITY=''LONDON'''
    DI ' '
    ENTER CRTOGO
 
    DI 'Row functions can also be created.  An optional FOR EACH ROW clause'
    DI 'distinguishes the definition of a row function from a scalar function.'
    DI 'Here is the definition of the row function used to compute averages:'
    DI ' '
    ISSUE 'CREATE FUNCTION AVG1(PARAM);'
    ISSUE 'DEFINE SUM DEC(60) FLOAT, COUNT INTEGER;'
    ISSUE '    INIT SUM:=0, COUNT:=0;'
    ISSUE '    FOR EACH ROW;'
    ISSUE '        IF PARAM IS NOT NULL THEN;'
    ISSUE '           BEGIN SUM:=SUM+PARAM, COUNT:=COUNT+1 END;'
    ISSUE '    BEGIN AVG1 := SUM / COUNT  END'
    DI ' '
    DI 'The FOR EACH ROW clause is executed once per record.  When a group'
    DI 'break occurs, the BEGIN clause will be executed and a result produced.'
    DI 'At the beginning of a new group, the INIT clause is processed.'
    DI ' '
    ENTER CRTOGO
 
    DI 'ARES can list the set of user defined functions and display'
    DI 'individual function definitions.'
    DI ' '
    ISSUE 'LI FUNCTION'
    ISSUE 'DI FUNCTION EXP'
    ENTER CRTOGO
 
    DI 'We will delete the row functions so they will not interfere with'
    DI 'the rest of the demonstration.'
    DI ' '
    ISSUE 'DROP FUNCTION AVG1'
    ISSUE 'DROP FUNCTION EXP'
    DI ' '
    ENTER CRTOGO
%EOD;
 
PROC ALTER
 
    DI 'ARES allows the user to easily modify the structure of the database'
    DI 'after it has been created.  This allows the user to fine tune the'
    DI 'database design as it is put into use.  The easiest change is to add a'
    DI 'new table to the database.'
    DI ' '
    ISSUE 'ALTER MODEL DEMO'
    ISSUE 'CREATE TABLE NEWTABLE(X INTEGER,Y CHAR(4)) KEY(P=X)'
    ISSUE 'COMMIT'
    DI ' '
    DI 'The ALTER MODEL command informs ARES that we will make changes to the'
    DI 'database design.  The COMMIT command says we are done specifying the'
    DI 'changes.'
    DI ' '
    ENTER CRTOGO
 
    DI 'Another simple example is to drop a table from the database.  At '
    DI 'the same time let''s add a new column to SUPPLIER.'
    DI ' '
    ISSUE 'ALTER MODEL DEMO'
    ISSUE 'DROP TABLE NEWTABLE'
    ISSUE 'ALTER TABLE SUPPLIER(ADD SAL DEC(6,2))'
    DI ' '
    ENTER CRTOGO
 
    DI 'Before we make this change final we wish to see what we have done.'
    DI 'The DISPLAY command will show both the old and new descriptions of'
    DI 'the table.'
    DI ' '
    ISSUE 'DI TABLE SUPPLIER'
    DI ' '
    ENTER CRTOGO
 
    DI 'Now let''s make the changes permanent.'
    DI ' '
    ISSUE 'COMMIT'
    DI ' '
    ENTER CRTOGO
 
    DI 'Let''s convert SUPPLIER back to its original form.  At the same time'
    DI 'let''s increase the size of the field CITY as we expect to get larger'
    DI 'names in the future.'
    DI ' '
    ISSUE 'ALTER MODEL DEMO'
    ISSUE 'ALTER TABLE SUPPLIER(DELETE SAL)'
    ISSUE 'ALTER COL CITY CHAR(15)'
    ISSUE 'COMMIT'
    DI ' '
    DI 'Notice that all occurrences of the column city were changed.'
    DI ' '
    ENTER CRTOGO
 
    DI 'ARES lets us tune the performance of the database by adding or'
    DI 'deleting secondary access paths (keys) of the tables.  If we'
    DI 'are constantly issuing commands that specify a condition on '
    DI 'field CITY in table PART we could issue the following command:'
    DI ' '
    ISSUE 'ALTER MODEL DEMO'
    ISSUE 'ALTER TABLE PART KEY ADD(S_KEY=CITY)'
    DI ' '
    DI 'But if we decided that this really was not what we wanted we could'
    DI 'use the ABORT command.'
    DI ' '
    ISSUE 'ABORT'
    DI ' '
    ENTER INVOKE_MODEL
    ENTER CRTOGO
%EOD;
 
PROC STOREDDML
 
    DI 'ARES allows DML commands to be saved for future use.  This is'
    DI 'handy when the same operation is performed on a regular basis.'
    DI 'As an example let''s use the SELECT that counted the quantity'
    DI 'of P1 parts supplied.'
    DI ' '
    ISSUE 'STORE P1QTY SELECT SUM(QTY) FROM SP WHERE P$=''P1'''
    DI ' '
    DI 'This stored DML command can now be issued by simply using its'
    DI 'name.'
    DI ' '
    ISSUE 'START P1QTY'
    DI ' '
    DI 'Notice that the query is evaluated at the time the START command is'
    DI 'issued, not at the time of the STORE.  This guarantees that the'
    DI 'result of the START always reflects the current data in the table.'
    DI ' '
    ENTER CRTOGO
 
    DI 'If we wanted such a report for each part, we could define a series of'
    DI 'stored commands (P2QTY, P3QTY ...).  ARES provides a better mechanism'
    DI 'to perform this task; the query can be parameterized.  This means'
    DI 'values can be specified as part of the START command that will be'
    DI 'substituted into the query when it is executed.  Let''s change the'
    DI 'previous select command to parameterize it.'
    DI ' '
    ISSUE 'STORE PQTY(PNAME) SELECT SUM(QTY) FROM SP WHERE P$=PNAME'
    DI ' '
    DI 'We can now issue STARTs for specific part names.'
    DI ' '
    ISSUE 'START PQTY(''P1'')'
    ISSUE 'START PQTY(''P3'')'
    DI ' '
    ENTER CRTOGO
 
    DI 'Any type of DML command can be stored and parameterized.  Suppose'
    DI 'field STATUS is continuously being modified.  The following stored'
    DI 'command could be defined to perform the task:'
    DI ' '
    ISSUE 'STORE UPDATE_STATUS(WHO);'
    ISSUE 'UPDATE SUPPLIER;'
    ISSUE 'FROM SUPPLIER,SP;'
    ISSUE 'SET STATUS=STATUS+10;'
    ISSUE 'WHERE SNAME=WHO'
    DI ' '
    ENTER CRTOGO
 
    DI 'As with other constructs, ARES allows the user to list and display'
    DI 'stored commands.'
    DI ' '
    ISSUE 'LI DML'
    ISSUE 'DI DML UPDATE_STATUS'
    DI ' '
    ENTER CRTOGO
%EOD;
 
PROC SHARED
 
    DI 'ARES provides special commands to allow the user to share the'
    DI 'tables being accessed or updated with other users.  The major'
    DI 'command that controls this feature is the BEGIN command.'
    DI 'The BEGIN command specifies what tables are being accessed,'
    DI 'how they are being accessed and who a user is willing to share'
    DI 'the table with.  For example we may wish to update a table and'
    DI 'be sure no one else is using the table at the same time.'
    DI ' '
    ISSUE 'BEGIN SP,MODE=UPDATE,SHARE=NONE'
    DI ' '
    ENTER CRTOGO
 
    DI 'The options on the BEGIN will stay in effect until specifically'
    DI 'ended.  This can be done in one of two ways.  The first is to'
    DI 'end it successfully.  To do this the user issues a COMMIT command.'
    DI ' '
    ISSUE 'COMMIT'
    DI ' '
    DI 'All updates made between the BEGIN and COMMIT would be made'
    DI 'permanent at this time.  If the user had wished to back out of'
    DI 'any updates that were issued since the BEGIN, the ABORT command'
    DI 'could have been used instead of the COMMIT command.  The span'
    DI 'of commands issued between the BEGIN and its corresponding COMMIT'
    DI 'or ABORT is known as a transaction.'
    DI ' '
    ENTER CRTOGO
 
    DI 'A more typical example would be for a user to update data and'
    DI 'share it with other users who are simply reading data.'
    DI 'The updater would issue the following sequence of commands:'
    DI ' '
    ISSUE 'BEGIN SP,MODE=UPDATE,SHARE=IN'
    DI '  (various update commands)'
    ISSUE 'COMMIT'
    DI ' '
    DI 'while the reader would issue the following:'
    DI ' '
    ISSUE 'BEGIN SP,MODE=IN,SHARE=ALL'
    DI '  (various select commands)'
    ISSUE 'COMMIT'
    DI ' '
    ENTER CRTOGO
 
    DI 'It is possible for two users to update the same table at the same'
    DI 'time.  To do this both users must issue the following sequence of'
    DI 'commands:'
    DI ' '
    ISSUE 'BEGIN SP,MODE=UPDATE,SHARE=ALL'
    DI '  (various update commands)'
    ISSUE 'COMMIT'
    DI ' '
    ENTER CRTOGO
 
    DI 'ARES also provides CHECKPOINT and ROLLBACK commands that can'
    DI 'be used from within a transaction.  Both leave the options'
    DI 'specified on the BEGIN active but affect the updates that have'
    DI 'been issued since the last BEGIN (or last CHECKPOINT or ROLLBACK).'
    DI 'A CHECKPOINT command will make all updates made since the last'
    DI 'BEGIN permanent.  ROLLBACK will back out of all updates made'
    DI 'since the last BEGIN command.'
    DI ' '
    ENTER CRTOGO
 
    DI 'When DML commands are issued outside of transactions, ARES'
    DI 'cannot allow the tables access to be shared between updaters.'
    DI 'It therefore automatically locks the table such that readers'
    DI 'can share with other readers, but updaters cannot share with'
    DI 'anyone.  These locks are issued on a per table basis so that'
    DI 'a user updating one table can run simultaneously with a user'
    DI 'updating a second table.'
    DI ' '
    ENTER CRTOGO
%EOD;
 
PROC APPLICATION
 
    DI 'ARES can interface to all compiled programming languages by providing'
    DI 'callable routines to perform any DML command.  Most DML commands can'
    DI 'be performed in a manner equivalent to issuing them online.  The DML'
    DI 'commands will be executed and the database will be updated.  SELECT'
    DI 'commands are special though.  If they are executed by an application'
    DI 'program the results are placed in a special file that can either'
    DI 'be read by the program (using standard I/O techniques) or be passed'
    DI 'as input to ARGENT, the CP-6 generalized report writer.'
    DI ' '
    DI 'SELECT commands can be used in a completely different manner'
    DI 'that is more in line with application program usage.  The results'
    DI 'of a SELECT can be presented to the application program one record'
    DI 'at a time.  As each record is presented, the application program'
    DI 'can update, delete or modify the record.  A sample application'
    DI 'program excerpt is presented below.'
    DI ' '
    ENTER CRTOGO
    DI 'C       ARES initialization call'
    DI '      CALL ARES_INIT(ERRCODE)'
    DI 'C       Open the database'
    DI '      CALL ARES_INVOKE(''DEMO'')'
    DI '      IF (ERRCODE .NE. 0)GOTO 1000'
    DI 'C       Start a select command in update mode'
    DI '      CALL ARES_STARTEXT(''SELECT S$,P$,QTY FROM SP,Q,''UPDATE'')'
    DI '      IF (ERRCODE .NE. 0)GOTO 1000'
    DI 'C       Retrieve a single record'
    DI '10    CALL ARES_FETCH(Q,S$,P$,QTY)'
    DI '      IF (ERRCODE .EQ. 1)GOTO 999'
    DI '      IF (ERRCODE .NE. 0)GOTO 1000'
    DI 'C       Delete current record if part is P3'
    DI '      IF (P$ .EQ. ''P3'')CALL ARES_DELETE'
    DI '      GOTO 10'
    DI '999   STOP'
    DI '1000  CALL ARES_ERRMSG'
    DI '      STOP'
    DI '      END'
    DI ' '
    ENTER CRTOGO
 
    DI 'ARES also provides access to the transaction control commands'
    DI 'that are available from the interactive interface.  That is, there'
    DI 'are entries defined for ARES_BEGIN, ARES_COMMIT, ARES_CHECKPOINT,'
    DI 'ARES_ABORT and ARES_ROLLBACK.'
    DI ' '
    ENTER CRTOGO
%EOD;
 
PROC PRIVS
 
    DI 'When a database is first created, only the person creating it'
    DI 'can access it.  If a multi-user database is being created the'
    DI 'creator must be able to specify who is and who is not allowed'
    DI 'to use the database.  This can be done using the GRANT and REVOKE'
    DI 'commands in ARES.  Privilege can be granted based on the account the'
    DI 'user is running in.  As an example, the following command lets a user'
    DI 'running in the account BLOTTO access the database:'
    DI ' '
    ISSUE 'GRANT ALL TO BLOTTO'
    DI ' '
    ENTER CRTOGO
 
    DI 'Actually granting ALL lets the user in account BLOTTO issue any'
    DI 'DML command (input or update) against the database.  You can control'
    DI 'exactly what type of DML command are legal by specifying them instead'
    DI 'of the keyword ALL.  The following command will allow the user to'
    DI 'select records from the database and update existing records (but'
    DI 'not delete existing records or insert new records):'
    DI ' '
    ISSUE 'GRANT SELECT,UPDATE TO BLOTTO'
    DI ' '
    ENTER CRTOGO
 
    DI 'In most cases one wishes to give a user different access to each'
    DI 'of the tables in the database.  You may want to let a user do anything'
    DI 'to some tables, but only SELECT from another.  Therefore, table names'
    DI 'can also be specified in the GRANT command.'
    DI ' '
    ISSUE 'GRANT SELECT ON SP TO BLOTTO'
    ISSUE 'GRANT UPDATE,INSERT ON PART,SUPPLIER TO BLOTTO'
    DI ' '
    DI 'If no table names were specified (as in the previous example) the'
    DI 'privileges would apply to all tables in the database.'
    DI ' '
    ENTER CRTOGO
 
    DI 'Usually we will want to give privileges to a set of users instead'
    DI 'of having to give privileges to each individual.  This can be done'
    DI 'using wildcarded account names (in the same manner that file '
    DI 'management uses).  When using wildcarded account names, more than'
    DI 'one of the wildcarded names may match the account trying to access'
    DI 'the database.  In such a case the best match (the one that matches'
    DI 'the most characters) will be used.  As an example, let us issue the'
    DI 'following commands:'
    DI ' '
    ISSUE 'GRANT SELECT ON SP TO AA?'
    ISSUE 'GRANT UPDATE,DELETE ON SP TO AAB?'
    DI ' '
    DI 'If these were the only GRANT commands issued, a user logged onto'
    DI 'account ABCD could not access the database at all, while a user on'
    DI 'account AABCD would get update and delete privilege (since it matched'
    DI 'three characters of the second GRANT and only two of the first).'
    DI ' '
    ENTER CRTOGO
 
    DI 'Sometimes one wants to eliminate access to whole classes of users.'
    DI 'This can be done by using the special keyword NONE.  As an example,'
    DI 'the following commands would allow everyone to select data from'
    DI 'the database except those whose accounts started with the letter Z.'
    DI ' '
    ISSUE 'GRANT SELECT TO ?'
    ISSUE 'GRANT NONE TO Z?'
    DI ' '
    ENTER CRTOGO
 
    DI 'Each of the privileges granted can also be revoked.  The following'
    DI 'command will remove the access to accounts that match AAB?:'
    DI ' '
    ISSUE 'REVOKE ALL FROM AAB?'
    DI ' '
    DI 'It should be noted that sometimes revoking privilege can actually'
    DI 'allow more people to access the database.  Take for example the'
    DI 'following command:'
    DI ' '
    ISSUE 'REVOKE NONE FROM Z?'
    DI ' '
    ENTER CRTOGO
 
    DI 'Since ARES allows users to write application programs, the owner'
    DI 'of the database may want to allow the programs to have greater'
    DI 'access to the database than the user running the program normally'
    DI 'would since the program can enforce its own levels of security.'
    DI 'ARES has two levels of control for this area.  The first is '
    DI 'the ability to grant such programs additional access.'
    DI ' '
    ISSUE 'GRANT UPDATE TO PROGRAM UPDATE.X'
    DI ' '
    DI 'But you may want to restrict which users can gain this extra'
    DI 'access through the program.  This is controlled by the PROGRAM'
    DI 'privilege.  We will let people on accounts that begin with the'
    DI 'letter Z gain this extra privilege.'
    DI ' '
    ISSUE 'GRANT PROGRAM TO Z?'
    DI ' '
    ENTER CRTOGO
 
    DI 'ARES allows you to list the set of privileges that have been defined.'
    DI ' '
    ISSUE 'LI PRIV'
    DI ' '
    ENTER CRTOGO
 
    DI 'It also allows two types of DISPLAY commands.  You can display specific'
    DI 'privilege records that have been granted:'
    DI ' '
    ISSUE 'DI PRIV TEMPLATE=AA?'
    DI ' '
    DI 'or you can request ARES to display the privilege record that would be'
    DI 'used if a specific account tried to access the database:'
    DI ' '
    ISSUE 'DI PRIV ACCOUNT=''AABTEST'''
    DI ' '
    ENTER CRTOGO
 
 
