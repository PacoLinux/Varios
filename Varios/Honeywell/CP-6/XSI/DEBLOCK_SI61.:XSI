/*M* DEBLOCK - Deblocks disk files as if they were tape files */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* DMR,PLM=5,IND=3,CTI=3,SDI=3,MCL=10,CSI=0,ECI=0 */
 
 
%SET LISTSUB='1'B;
%SET LISTEXP='1'B;
 
DEBLOCK: PROC MAIN;
 
/*
     BLOCKER is a program to hack apart disk files that are made of
     blocks of discrete, fixed size records into files of those same
     fixed size records.
 
     Author: John Joseph, LADC, 03/03/83
                                                                  */
 
                                   /*
                                        DCBS
                                   */
DCL M$SI DCB;
DCL M$DO DCB;
DCL M$OU DCB;
 
                                   /*
                                        EXTERNALS
                                   */
DCL GET_OPTIONS ENTRY (4);
                                   /*
                                        INCLUDE FILES
                                   */
%INCLUDE CP_6;
 
 
                                   /*
                                        LOCAL VARIABLES
                                   */
DCL BLOCK_SIZE UBIN STATIC SYMDEF;
DCL RECORD_SIZE UBIN STATIC SYMDEF;
DCL TRUNC_FLAG BIT(1) ALIGNED STATIC SYMDEF;
DCL BLANK_FILL BIT(1) ALIGNED STATIC SYMDEF;
DCL INPUT_ARS SBIN WORD STATIC SYMDEF;
DCL NON_BLANK SBIN WORD;
DCL DUMMY_ SBIN WORD;
DCL TABLE_ (0:511) UBIN BYTE CALIGNED STATIC INIT(1*32,0,1*95,1*324);
 
DCL MY_OFFSET SBIN WORD STATIC;
 
DCL OUTPUT_BUFFER BASED CHAR(RECORD_SIZE);
 
DCL INPUT_BUFFER BASED CHAR(BLOCK_SIZE);
 
 
DCL M$SI$ PTR STATIC SYMDEF;
 
                                   /*
                                        FPTS
                                   */
     %FPT_READ      (FPTN=READ_SI,
                         DCB=M$SI,
                         WAIT=YES);
 
     %FPT_WRITE     (FPTN=WRITE_OU,
                         DCB=M$OU,
                         WAIT=YES);
 
     %FPT_GDS       (FPTN=GET_MEM,
                         COMMON=YES,
                         RESULTS=MEM_VECTOR,
                         SEGSIZE=0);
 
          %VLP_VECTOR (FPTN=MEM_VECTOR);
 
 
     %FPT_CLOSE     (FPTN=CLOSE_SI,
                         DCB=M$SI,
                         DISP=SAVE);
 
     %FPT_CLOSE     (FPTN=CLOSE_OU,
                         DCB=M$OU,
                         DISP=SAVE);
 
     %FPT_OPEN      (FPTN=OPEN_SI,
                         DCB=M$SI);
 
     %F$DCB;
 
 
%EJECT;
 
/*
     begin BLOCKER main
                                                                  */
 
     M$SI$=DCBADDR(DCBNUM(M$SI));
     CALL GET_OPTIONS (BLOCK_SIZE, RECORD_SIZE, TRUNC_FLAG,
        BLANK_FILL);
 
     CALL M$OPEN (OPEN_SI)
     WHENALTRETURN
     DO;
        CALL M$MERC;
        END;                            /* DO WHEN ALTRET */
 
     GET_MEM.V.SEGSIZE# = BLOCK_SIZE/4 + 1024;
     CALL M$GDS (GET_MEM)
     WHENALTRETURN
     DO;
        CALL M$XXX;
        END;
 
     READ_SI.BUF_ = MEM_VECTOR;
 
     DO WHILE ('1'B);
 
        MEM_VECTOR.PTR$ -> INPUT_BUFFER = ' ';
        CALL M$READ (READ_SI)
        WHENALTRETURN
        DO;
           GOTO READ_ALTRET;
           END;
        INPUT_ARS = M$SI$ ->F$DCB.ARS#;
        MY_OFFSET = 0;
 
        DO WHILE (MY_OFFSET < BLOCK_SIZE);
 
           WRITE_OU.BUF_.BOUND = RECORD_SIZE - 1;
           WRITE_OU.BUF_.BUF$ = PINCRC(MEM_VECTOR.PTR$, MY_OFFSET);
 
           IF TRUNC_FLAG
           THEN
           DO;
              CALL SEARCHR(NON_BLANK, DUMMY_, TABLE_,
                 WRITE_OU.BUF_.BUF$ -> OUTPUT_BUFFER) ALTRET(OH_WELL);
 
              WRITE_OU.BUF_.BOUND = NON_BLANK;
 
              DO WHILE ('0'B);
 
OH_WELL:         ;
                 WRITE_OU.BUF_.BOUND = 0;
                 GOTO CONT_;
                 END;
              END;                      /* DO IF STRIPPING BLANKS */
CONT_:     ;
           CALL M$WRITE (WRITE_OU)
           WHENALTRETURN
           DO;
              CALL M$XXX;
              END;
           MY_OFFSET = MY_OFFSET + RECORD_SIZE;
           IF MY_OFFSET >= INPUT_ARS
           THEN
              GOTO TOO_BIG;
           END;                         /* DO WHILE JUNK LEFT */
TOO_BIG: ;
        END;                            /* DO WHILE MORE TO DO */
 
READ_ALTRET: ;
 
     CALL M$CLOSE (CLOSE_SI);
     CALL M$CLOSE (CLOSE_OU);
 
     CALL M$EXIT;
 
END DEBLOCK;
 
%EOD;
/*M* GET_OPTIONS - module for DEBLOCK */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* DMR,PLM=5,IND=3,CTI=3,SDI=3,MCL=10,CSI=0,ECI=0 */
 
 
%SET LISTSUB='1'B;
%SET LISTEXP='1'B;
 
GET_OPTIONS: PROC (BLOCK_SIZE, RECORD_SIZE, TRUNC_FLAG, BLANK_FILL);
 
%INCLUDE CP_6;
%INCLUDE XU_MACRO_C;
 
%INCLUDE B$JIT_C;
 
                         /*
                              ARGUMENTS
                                                  */
DCL BLOCK_SIZE SBIN;
DCL RECORD_SIZE SBIN;
DCL TRUNC_FLAG BIT(1) ALIGNED;
DCL BLANK_FILL BIT(1) ALIGNED;
 
                         /*
                              LOCAL STORAGE
                                                  */
DCL M$DO DCB;
 
DCL I SBIN;
 
DCL 1 TEXTC_ BASED CALIGNED,
       2 COUNT_ UBIN BYTE CALIGNED,
       2 TEXT_ CHAR(TEXTC_.COUNT_) CALIGNED;
 
DCL DEBLOCK_WK(0:50) SBIN WORD STATIC SYMDEF;
DCL OUTPUT_ CHAR(80) STATIC SYMDEF;
 
                                   /*
                                        EXTERNALS
                                                                  */
DCL DEBLOCK_ UBIN WORD SYMREF;
DCL B$JIT$ PTR SYMREF;
DCL X$PARSE ENTRY(1) ALTRET;
 
                                   /*
                                        MACRO EXPANSIONS
                                                                  */
     %PARSE$SYM     (NAME=DEBLOCK$SYM,
                         STCLASS="BASED");
 
     %PARSE$OUT     (NAME=DEBLOCK$OUTBLK,
                         STCLASS="BASED");
 
     %B$JIT0;
     %U$JIT1;
     %A$JIT6X;
 
     %P_PCB         (NAME=DEBLOCK_PCB,
                         STCLASS="STATIC SYMDEF",
                         R=NIL,
                         W=DEBLOCK_WK,
                         U$=NIL,
                         WSZ=51,
                         N#=0);
 
     %FPT_WRITE     (FPTN=WRITE_DO,
                         DCB=M$DO,
                         BUF=OUTPUT_,
                         WAIT=YES);
 
%EJECT;
 
/*
 
     BEGIN GET_OPTIONS
                                                  */
 
     DEBLOCK_PCB.ROOT$ = ADDR(DEBLOCK_);
     IF B$JIT$->B$JIT.CCARS <= B$JIT$->B$JIT.CCDISP
     THEN
     DO;
        OUTPUT_ = ' ***** I won''t work without options';
        CALL M$WRITE (WRITE_DO);
        CALL M$XXX;
        END;
 
     DEBLOCK_PCB.TEXT$ = PINCRC(ADDR(B$JIT.CCBUF),B$JIT.CCDISP+1);
     DEBLOCK_PCB.NCHARS = B$JIT.CCARS - B$JIT.CCDISP - 1;
 
     CALL X$PARSE (DEBLOCK_PCB)
     WHENALTRETURN
     DO;
        OUTPUT_ = ' ***** Illegal options syntax, try again';
        CALL M$WRITE (WRITE_DO);
        CALL M$XXX;
        END;                            /* DO WHEN ALTRET */
 
     TRUNC_FLAG = '0'B;
     RECORD_SIZE=-1;
     BLOCK_SIZE=-1;
     DO I = 0 TO DEBLOCK_PCB.OUT$ -> DEBLOCK$OUTBLK.NSUBLKS - 1;
        DO CASE (DEBLOCK_PCB.OUT$ -> DEBLOCK$OUTBLK.SUBLK$(I) ->
           DEBLOCK$OUTBLK.CODE);
 
        CASE (1);
           TRUNC_FLAG = '1'B;
 
        CASE (2);
           CALL CHARBIN(RECORD_SIZE,
              DEBLOCK_PCB.OUT$->DEBLOCK$OUTBLK.SUBLK$(I)->
              DEBLOCK$OUTBLK.SUBLK$(0) ->
              DEBLOCK$OUTBLK.SUBLK$(0) -> TEXTC_.TEXT_);
 
        CASE (3);
           CALL CHARBIN(BLOCK_SIZE,
              DEBLOCK_PCB.OUT$->DEBLOCK$OUTBLK.SUBLK$(I)->
              DEBLOCK$OUTBLK.SUBLK$(0) ->
              DEBLOCK$OUTBLK.SUBLK$(0) -> TEXTC_.TEXT_);
 
        END;                            /* DO CASE NODE.CODE */
 
        END;                            /* DO I */
 
     IF BLOCK_SIZE <= 0
        OR
        RECORD_SIZE <= 0
     THEN
     DO;
        OUTPUT_ = ' ***** Both BLOCKS and RECS must be specified!';
        CALL M$WRITE (WRITE_DO);
        CALL M$XXX;
        END;
 
     IF BLOCK_SIZE <= RECORD_SIZE
     THEN
     DO;
        OUTPUT_ = ' ***** You can''t be serious.  BLOCKS <= RECS??';
        CALL M$WRITE (WRITE_DO);
        CALL M$XXX;
        END;
 
     I = BLOCK_SIZE/RECORD_SIZE;
 
     I = I * RECORD_SIZE;
 
     IF I ~= BLOCK_SIZE
     THEN
     DO;
        OUTPUT_ = ' ***** There must be an integral number of records per block!';
        CALL M$WRITE (WRITE_DO);
        CALL M$XXX;
        END;
 
 
     RETURN;
 
END GET_OPTIONS;
