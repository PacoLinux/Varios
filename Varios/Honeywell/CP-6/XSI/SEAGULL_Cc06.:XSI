/*M* SEAGULL_Cc06 -- Header file generic symbol table management */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
 
/*P*    NAME:     SEAGULL_Cc06
        PURPOSE:  Contains #defines, structs, etc. for generic symbol
                  table management functions.
        DESCRIPTION:
            This file is the Header file for SEAGULL_SIc06, the source
            file for symbol table management. This file will also be
            munged into the header file SEAGULL:h (in the X account).
            This file, for the most part, was "stolen" from MAKE_Cc13
            and MAKE_Cc14 (by Bruce Frost).  It has been made more
            libraryish (general), and FCGs have been added to things.
*/
/********************************************************************/
 
#ifndef __SEAGULL_Cc06__
#define __SEAGULL_Cc06__
 
#ifdef __EXAMPLE__
/* First off, we need a hash table for our application... */
extern  struct  sg6_hash_table  basic_hash_table;
 
/* Next, a function to allocate a new symbol table entries... */
extern  struct  sg6_sym_       *alloc_sym_basic();
 
/* This macro will call the lookup function w/ correct params... */
#define lookup_sym_basic(n,l,r) (struct sym_basic *) \
           sg6__LookupSym( &basic_hash_table,n,l,r,alloc_sym_basic)
 
/* The following structure is user defined, and in this case, the
 * smallest allowable structure.  Any number of fields can be added
 * AFTER the four listed below.
 */
/*B*    NAME:    sym_basic
        PURPOSE: To hold the basic information for a symbol table entry.
        DESCRIPTION:
           This structure is provided as an example symbol table
           entry.  It shows the minimum fields required by the generic
           symbol table manager of SEAGULL.
*/
 
struct sym_basic {     /* A minimum size _sym block     */
   struct sym_basic  *next;
   int                bs_len; /* length of address */
   int                bs_cnt; /* Number of targets owned */
   char              *bs_text;/* address                 */
   };
 
/* A useful macro to initialize a new entry... */
#define INIT_SYM_BASIC  {0, 0, 0, 0}
 
/* ifdef __EXAMPLE__ */
#endif
 
 
/* SG6_ALLOC_TEXT - num of bytes to malloc for text storage each time */
#ifndef SG6_ALLOC_TEXT
#define SG6_ALLOC_TEXT 1024
#endif
 
/* SG6_ALLOC_NUM  --  number of sym entries to malloc at a time   */
#ifndef SG6_ALLOC_NUM
#define SG6_ALLOC_NUM   50
#endif
 
/* SG6_HASH_SIZE -- defines size of hash tables */
#ifndef SG6_HASH_SIZE
#define SG6_HASH_SIZE 191
#define SG6_INIT_HASH_TABLE {  \
        SG6_HASH_SIZE,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,\
        0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0   }
#endif
 
/********************************************************************/
/*B*    NAME:    SGSYMBOL (struct sg6_sym_)
        PURPOSE: To define the structure of a symbol table entry.
        DESCRIPTION:
                 Define generic hash table structure to be used with
           the general symbol table manager of SEAGULL.  The same
           functions operate on different hash tables.
        WARNING: correspondance w/ user specified symbol table entries
*/
 
typedef  struct sg6_sym_  {
  struct   sg6_sym_ *next;      /*    next name on this hash chain  */
  int                sym_len;   /*    Length of this name           */
  int                sym_xxx;   /*    *used*                        */
  char              *sym_text;  /*    Name                          */
  }  SGSYMBOL;
 
/*B*    NAME:    sg6_hash_table
        PURPOSE: To define the structure of a hash_table.
        DESCRIPTION:
                 Define generic hash table structure to be used with
           the general symbol table manager of SEAGULL.  The same
           functions operate on different hash tables.
*/
 
typedef  struct sg6_hash_table  {
  int         hash_size;     /*  Number of entries in table   */
  int         hash_hits;     /*  Number of used entries in table */
  int         hash_syms;     /*  Number of symbols inserted      */
  int         hash_cmprs;    /*  Number of comparisons           */
  int         hash_looks;    /*  Number of lookups               */
  SGSYMBOL   *table[ SG6_HASH_SIZE];
  }  SGHASHTABLE;
 
 
/********************************************************************/
/*B*    NAME:    sg6_stack
        PURPOSE: To define the structure of a stack.
        DESCRIPTION:
                 Define generic stack structure to be used with the
           generic stack manager of SEAGULL.
*/
 
typedef  struct sg6_stack  {
  int         st_max;        /*  Size of table (st_pile) given   */
  int         st_top;        /*  Index to top item on the stack  */
  char      **st_pile;
  }  SGSTACK;
 
#define  SG6_INIT_STACK {0,0,0}
#define  SG6_NO_STACK      1
#define  SG6_NO_PILE       2
#define  SG6_STACK_FULL    3
#define  SG6_STACK_EMPTY   (char *)NULL
#define  SG6_NO_STACK_PTR  (char *)NULL
 
 
/* -- SEAGULL_SIc06 -- Global data refs */
extern  int   (*sg6_Hash)( char *, int);
 
/* -- SEAGULL_SIc06 -- Function prototypes */
SGSYMBOL *sg6__LookupSym( SGHASHTABLE *, char *, int, int,
                          SGSYMBOL *((*)()) );
int   sg6__SymbolHash( char *, int);
char *sg6__AllocText( int, char *);
int   sg6__PrintHashtableStats( SGHASHTABLE *, char *);
int   sg6__DumpHashTable( SGHASHTABLE *, char *);
 
int   sg6__Push( SGSTACK *, char *);
char *sg6__Pop( SGSTACK *);
 
/* ifndef __SEAGULL_Cc06__ */
#endif
