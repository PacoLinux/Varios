/*M* SHREW_SI697  - SHREW module to evaluate ELF97 files  */
/*T***********************************************************/
/*T*                                                         */
/*T* COPYRIGHT, (C)                                          */
/*T*                                                         */
/*T***********************************************************/
/*  Contributed by
        Grand Valley State College  -  J.Lance Wilkinson
         Although this program has been tested by its contributor,
         no warranty, express or implied, is made by the
         contributor or Grand Valley State College, as to the
         accuracy and functioning of the program and related
         program materials, nor shall the fact of distribution
         constitute any such warranty, and no responsibility is
         assumed by the contributor or Grand Valley State College.
 
         While a module for SHREW, SHREW_SI697 actually is part of
         the RING system submittal.  It permits the SHREW.X tool
         to process :ELF97 error logs, which the enhanced RING
         system uses for its error/event/billing log.
*/
 
/*X* */
/********************************************************************
*
*      ELF97                 Provide RING specific functions for SHREW
*                            [Specially Handled Reports for Errorlog
*                            Watching], using Log File #97.
*/
       ELF97:                          PROC
           (F#,PTR$,EL_RECORD_BUF);
/**
 *                 PARAMETER DECLARATIONS
 **/
DCL    F#                              UBIN   WORD;
DCL    PTR$                            PTR;
/**/
%INCLUDE EL$TABLES.:LIBRARY;
/**/
%LIST;
%EL$HDR            (NAME=EL_RECORD_BUF,
                    STCLASS=PARAM,
                    HDRONLY=NO);
%PLIST;
/**
 *                 SHREW REQUIREMENTS
 **/
%INCLUDE SHREW_C600;
/**/
%INCLUDE SHREW_C6;
/**/
DCL    ELF00                           ENTRY  (3);
DCL    ELF_FORMAT                      ENTRY  (21);
/**
 *                 RING REQUIREMENTS
 **/
%INCLUDE RING_C61;
%INCLUDE SHREW_C697;
/**/
%LIST;
%RING_ELF          (NAME=B$RING,STCLASS="BASED(ENTRY$)");
%PLIST;
/**
 *                 GLOBAL SYMREF REQUIREMENTS
 **/
DCL    DATA (0:260)                    SYMREF
                                       CHAR   (100);
DCL  1 VECTORC                         SYMREF    ALIGNED,
       2 COUNT                         UBIN   WORD,
       2 VECTOR_ (0:260)               VECTOR;
DCL    ELF_TIME                        CHAR   (11)         SYMREF;
DCL    TYPE_97                         SBIN                SYMREF;
/**
 *                 SYSTEM SOFTWARE REQUIREMENTS
 **/
/**/
%INCLUDE SYSLIB_C61;
/**
 *                 LOCAL VARIABLE DECLARATIONS
 **/
DCL    TEMP                            CHAR   (50);
DCL    YN (0:1)                        CONSTANT
                                       CHAR(1)
                                       INIT('N','Y');
DCL  1 ELF97_TBL                       CONSTANT  SYMDEF    ALIGNED,
       2 MAX#                          UBIN   WORD         UNAL
                                       INIT(22),
       2 TBL (0:21),
         3 TYPE                        UBIN   BYTE         UNAL
                   INIT(  %ELF$RING_GENERAL,  %ELF$RING_LOGON,
                          %ELF$RING_OFF,      %ELF$RING_TIMEOUT,
                          %ELF$RING_CANTOPEN, %ELF$RING_MEMPROB,
                          %ELF$RING_ERRBOOK,  %ELF$RING_BOOKERR,
                          %ELF$RING_FAILED,   %ELF$RING_NCARRIER,
                          %ELF$RING_BADSPEED, %ELF$RING_NCONNECT,
                          %ELF$RING_INIT,     %ELF$RING_VANISH,
                          %ELF$RING_IDLE,     %ELF$RING_EXIT,
                          %ELF$RING_RETURN,   %ELF$RING_EASYLINK,
                          %ELF$RING_ALLOCATE, %ELF$RING_MODEMON,
                          %ELF$RING_MODEMOFF, %ELF$RING_CARRIER ),
         3 TEXT                        CHAR   (23)         UNAL
                   INIT(  'User Tracking','Logon',
                          'Logoff', 'Timeout',
                          'DB Open Error','Memory Problem',
                          'DB Content Error','DB Read Error',
                          'DB Command Failure', 'No Carrier',
                          'Bad Line Speed','No Modems',
                          'AU Initialize','AU Shutdown',
                          'Idle',   'Exit',
                          'Return', 'EasyLink',
                          'Request Modem','Modem Connect',
                          'Modem Disconnect','Carrier Detected'),
         3 COUNT                       UBIN   WORD
   INIT(LENGTHC('User Tracking'),LENGTHC('Logon'),
        LENGTHC('Logoff'),LENGTHC('Timeout'),
        LENGTHC('DB Open Error'),LENGTHC('Memory Problem'),
        LENGTHC('DB Content Error'),LENGTHC('DB Read Error'),
        LENGTHC('DB Command Failure'),LENGTHC('No Carrier'),
        LENGTHC('Bad Line Speed'),LENGTHC('No Modems'),
        LENGTHC('AU Initialize'),LENGTHC('AU Shutdown'),
        LENGTHC('Idle'), LENGTHC('Exit'),
        LENGTHC('Return'),LENGTHC('EasyLink'),
        LENGTHC('Request Modem'),LENGTHC('Modem Connect'),
        LENGTHC('Modem Disconnect'),LENGTHC('Carrier Detected'));
DCL    I                               SBIN   WORD;
DCL    J                               SBIN   WORD;
DCL    K                               SBIN   WORD;
DCL    SPACES                          STATIC
                                       CHAR   (1)
                                       INIT(' ');
DCL    INFO_SIZE                       SBIN   WORD;
DCL    ENTRY$                          PTR;
DCL    RAWHDR1                         CONSTANT
                                       CHAR   (0)
                                       INIT('ATIME   MESSAGE');
DCL    RAWHDR2                         CONSTANT
                                       CHAR   (0)
       INIT('A-----  ----------------------------------------------');
/**
 *                 FORMATTING SERVICE REQUIREMENTS
 **/
DCL    X$FORMAT                        ENTRY  (1);
DCL    X$WRITE                         ENTRY  (22);
/**/
%INCLUDE XU_FORMAT_C;
/**/
%F_FDS             (NAME=FDS,
                    STCLASS=SYMREF);
/**/
DCL    RAW_LOG                         CONSTANT
                                       CHAR   (0)
                           INIT('%VA%5MA%2P  %>A %>A,%A%33-%A %A %A');
DCL    DET_LOG                         CONSTANT
                                       CHAR   (0)
                                   INIT('%VA%33-Site=%<>A, Sta=%<>A');
DCL    HEADER_X                        CONSTANT
                                       CHAR   (0)
                                       INIT('%VA-----  %N(-%)');
%EJECT;
/*********************************************************************
*
*          ELF97                       Actual procedure begins here
*/
/**/
                   /***********************
                    *   BEGIN  PROCEDURE  *
                    ***********************/
/**/
/**
 *     F# actions:    0 - Return ADDR(type name table) in PTR$.
 *                    1 - Return ADDR(VECTORC table) in PTR$ with
 *                               VECTORC table loaded for RAW report
 *                               headings.
 *                    2 - Return ADDR(VECTORC table) in PTR$ with
 *                               VECTORC table loaded for RAW report
 *                               data.  EL_RECORD_BUF provides data.
 *                    3 - Return ADDR(VECTORC table) in PTR$ with
 *                               VECTORC table loaded for DETAIL report
 *                               data.  EL_RECORD_BUF provides data.
 *                    4 - Return ADDR(TYPE_97) in PTR$ with TYPE_97
 *                               being the syntax node which describes
 *                               the TYPE command for log #97.
 *                    5 - Initialize FOR clause selection criteria by
 *                               the blank-delimited string passed
 *                               as PTR$->OUT$BLK.SUBLK$(0)->OUT$SYM.
 *                               When PTR$=ADDR(NIL), reset selection
 *                               criteria to accept anything.
 *                    6 - Return ADDR(NIL) in PTR$ when record passed
 *                               as SL_RECORD_BUF doesn't fit criteria
 *                               selected in last call with F#=5.
 *                               Otherwise return ADDR(SL_RECORD_BUF)
 *                               in PTR$.
 *         ELF97 does not privide services 5 or 6; instead it nops
 *         them through ELF00.
 */
           VECTORC.COUNT = 0;
           IF  ADDR(EL_RECORD_BUF)~=ADDR(NIL)
                   THEN DO;
                   INFO_SIZE = EL_RECORD_BUF.SIZE - 5;
                   ENTRY$ = ADDR(EL_RECORD_BUF.INFO(0));
                   END;
FUNCTION:  DO CASE(F#);
       CASE(0);              PTR$ = ADDR(ELF97_TBL);
                             RETURN;
       CASE(1);              PTR$ = ADDR(VECTORC);
                             VECTORC.COUNT = 2;
                             VECTORC.VECTOR_(0) = VECTOR(RAWHDR1);
                             VECTORC.VECTOR_(1) = VECTOR(RAWHDR2);
                             RETURN;
       CASE(2);              PTR$ = ADDR(VECTORC);
                             /* Load up informtion */
           RAW_RPT:          DO CASE(EL_RECORD_BUF.TYPE);
           CASE(%ELF$RING_LOGON, %ELF$RING_OFF, %ELF$RING_TIMEOUT,
           %ELF$RING_CANTOPEN, %ELF$RING_MEMPROB, %ELF$RING_ERRBOOK,
           %ELF$RING_BOOKERR, %ELF$RING_FAILED, %ELF$RING_NCARRIER,
           %ELF$RING_BADSPEED, %ELF$RING_NCONNECT, %ELF$RING_INIT,
           %ELF$RING_VANISH, %ELF$RING_IDLE, %ELF$RING_EXIT,
           %ELF$RING_RETURN, %ELF$RING_EASYLINK, %ELF$RING_ALLOCATE,
           %ELF$RING_MODEMON, %ELF$RING_MODEMOFF, %ELF$RING_CARRIER);
                   CALL    ELF_FORMAT (VECTOR(RAW_LOG),
                                       VECTOR(ELF_TIME),
                                       VECTOR(SPACES),
                                       VECTOR(B$RING.ACCN),
                                       VECTOR(B$RING.LOGN),
                                       VECTOR(B$RING.STA),
                                       VECTOR(B$RING.SITE),
                                       VECTOR(B$RING.BILL));
           CASE(%ELF$RING_GENERAL);
                   CALL    ELF_FORMAT (VECTOR(RAW_LOG),
                                       VECTOR(ELF_TIME),
                                       VECTOR(SPACES),
                                       VECTOR(B$RING.ACCN),
                                       VECTOR(B$RING.LOGN),
                                       VECTOR(B$RING.STA),
                                       VECTOR(B$RING.SITE),
                                       VECTOR(B$RING.TEXT));
           CASE(ELSE);
                   CALL      ELF00 (F#,PTR$,EL_RECORD_BUF);
                             END RAW_RPT;
                             RETURN;
       CASE(3);              PTR$ = ADDR(VECTORC);
                             /* Load up table of entries, based on
                                EL_RECORD_BUF.TYPE value */
       DETAIL_RPT: DO CASE(EL_RECORD_BUF.TYPE);
           CASE(%ELF$RING_LOGON, %ELF$RING_OFF, %ELF$RING_TIMEOUT,
           %ELF$RING_CANTOPEN, %ELF$RING_MEMPROB, %ELF$RING_ERRBOOK,
           %ELF$RING_BOOKERR, %ELF$RING_FAILED, %ELF$RING_NCARRIER,
           %ELF$RING_BADSPEED, %ELF$RING_NCONNECT, %ELF$RING_CARRIER);
                             DATA(0) = 'ATIME   ';
                             VECTORC.COUNT = 1;
                             VECTORC.VECTOR_(0) = VECTOR(DATA(0));
                             I = 70;
                             CALL      ELF_FORMAT (VECTOR(HEADER_X),
                                                 VECTOR(I));
                             CALL      ELF_FORMAT (VECTOR(RAW_LOG),
                                                 VECTOR(ELF_TIME),
                                                 VECTOR(SPACES),
                                                 VECTOR(B$RING.ACCN),
                                                 VECTOR(B$RING.LOGN),
                                                 VECTOR(B$RING.BILL));
                             CALL      ELF_FORMAT (VECTOR(DET_LOG),
                                                 VECTOR(B$RING.SITE),
                                                 VECTOR(B$RING.STA));
           CASE(%ELF$RING_GENERAL);
                             DATA(0) = 'ATIME   TRACK=''';
                             CALL INDEX (I,'''',DATA(0));
                             CALL INSERT (DATA(0),I,8,B$RING.TEXT,'''');
                             VECTORC.COUNT = 1;
                             VECTORC.VECTOR_(0) = VECTOR(DATA(0));
                             I = 70;
                             CALL      ELF_FORMAT (VECTOR(HEADER_X),
                                                 VECTOR(I));
                             CALL      ELF_FORMAT (VECTOR(RAW_LOG),
                                                 VECTOR(ELF_TIME),
                                                 VECTOR(SPACES),
                                                 VECTOR(B$RING.ACCN),
                                                 VECTOR(B$RING.LOGN),
                                                 VECTOR(B$RING.BILL));
                             CALL      ELF_FORMAT (VECTOR(DET_LOG),
                                                 VECTOR(B$RING.SITE),
                                                 VECTOR(B$RING.STA));
           CASE(%ELF$RING_INIT,%ELF$RING_VANISH);
                             DATA(0) = 'ATIME   ';
                             VECTORC.COUNT = 1;
                             VECTORC.VECTOR_(0) = VECTOR(DATA(0));
                             I = 70;
                             CALL      ELF_FORMAT (VECTOR(HEADER_X),
                                                 VECTOR(I));
                             CALL      ELF_FORMAT (VECTOR(RAW_LOG),
                                                 VECTOR(ELF_TIME),
                                                 VECTOR(SPACES),
                                                 VECTOR(B$RING.ACCN),
                                                 VECTOR(B$RING.LOGN));
           CASE(%ELF$RING_EXIT,%ELF$RING_IDLE,%ELF$RING_RETURN,
                %ELF$RING_ALLOCATE,%ELF$RING_EASYLINK);
                             DATA(0) = 'ATIME   ';
                             VECTORC.COUNT = 1;
                             VECTORC.VECTOR_(0) = VECTOR(DATA(0));
                             I = 70;
                             CALL      ELF_FORMAT (VECTOR(HEADER_X),
                                                 VECTOR(I));
                             TEMP = ' ';
                             CALL CONCAT (TEMP,'DCB=',B$RING.SITE);
                             DO CASE(EL_RECORD_BUF.TYPE);
                   CASE(%ELF$RING_EASYLINK);
                                       CALL INSERT(TEMP,12,,', MODEM=',
                                                 B$RING.STA);
                   CASE(%ELF$RING_ALLOCATE);
                                       CALL CHARBIN(J,B$RING.STA);
                                       CALL BINCHAR(B$RING.STA,
                                                    Y_LINSPD(J));
                                       DO WHILE SUBSTR(B$RING.STA,0,1)='0';
                                        B$RING.STA=SUBSTR(B$RING.STA,1);
                                       END;
                                       CALL INSERT(TEMP,12,,', SPEED=',
                                                 B$RING.STA);
                             END;
                             CALL      ELF_FORMAT (VECTOR(RAW_LOG),
                                                 VECTOR(ELF_TIME),
                                                 VECTOR(SPACES),
                                                 VECTOR(B$RING.ACCN),
                                                 VECTOR(B$RING.LOGN),
                                                 VECTOR(TEMP));
           CASE(%ELF$RING_MODEMON,%ELF$RING_MODEMOFF);
                             DATA(0) = 'ATIME   ';
                             VECTORC.COUNT = 1;
                             VECTORC.VECTOR_(0) = VECTOR(DATA(0));
                             I = 70;
                             CALL      ELF_FORMAT (VECTOR(HEADER_X),
                                                 VECTOR(I));
                             TEMP = ' ';
                             CALL CONCAT (TEMP,'MODEM=',B$RING.SITE);
                             DO CASE(EL_RECORD_BUF.TYPE);
                   CASE(%ELF$RING_MODEMON);
                                       CALL CHARBIN(J,B$RING.STA);
                                       CALL BINCHAR(B$RING.STA,
                                                    Y_LINSPD(J));
                                       DO WHILE SUBSTR(B$RING.STA,0,1)='0';
                                        B$RING.STA=SUBSTR(B$RING.STA,1);
                                       END;
                                       CALL INSERT(TEMP,14,,', SPEED=',
                                                 B$RING.STA);
                             END;
                             CALL      ELF_FORMAT (VECTOR(RAW_LOG),
                                                 VECTOR(ELF_TIME),
                                                 VECTOR(SPACES),
                                                 VECTOR(B$RING.ACCN),
                                                 VECTOR(B$RING.LOGN),
                                                 VECTOR(TEMP));
           CASE(ELSE);       CALL      ELF00 (F#,PTR$,EL_RECORD_BUF);
                   END DETAIL_RPT;
                             RETURN;
       CASE(4);              PTR$ = ADDR(TYPE_97);
                             RETURN;
       CASE(ELSE);           CALL      ELF00 (F#,PTR$,EL_RECORD_BUF);
                             RETURN;
           END FUNCTION;
/**/
       END ELF97;
