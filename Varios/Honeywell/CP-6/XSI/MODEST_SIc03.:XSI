/*M* status_decode:c -- decoder functions for the various status' */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
 
/*F*    NAME: MODEST_SIc03    (status_decode:c)
        PURPOSE: decoder function for the different status reports
 
        ORIGINAL AUTHOR:  Arthur Tai, SDO, Phoenix (BULL HN)
        ENHANCEMENTS:  Jordan Boucher, LADC
        DATE:  August 7, 1989
      UPDATES:  JTB 9/1/89
*/
 
/*
**********************************************************************
*/
 
 
/* EXTERNAL VARIABLES */
extern char cmd_array_0x[16][50] ;
extern char cmd_array_1x[16][50] ;
extern char cmd_array_2x[16][50] ;
extern char cmd_array_3x[16][50] ;
extern char cmd_array_4x[16][50] ;
 
extern char error_code_0[9][50] ;
extern char error_code_1[9][50] ;
extern char error_code_2[9][50] ;
extern char error_code_3[9][50] ;
 
extern char drive_exception_0[9][50] ;
extern char drive_exception_1[9][50] ;
extern char drive_exception_2[9][50] ;
extern char drive_exception_3[9][50] ;
extern char drive_exception_4[9][50] ;
extern char drive_exception_5[9][50] ;
 
 
/*
**********************************************************************
*/
  void cmd_end_status(byte1,byte2,byte3,byte4)
  char byte1, byte2, byte3, byte4;
  {
 
    int upper, lower, cmd_octet_1, cmd_octet_2;
 
    cmd_octet_1 = ascii_to_dig(byte1,byte2);
    cmd_octet_2 = ascii_to_dig(byte3,byte4);
 
    if (cmd_octet_1 == 0)
      ;                   /*goto decode_cmd_oct_2*/
    else   {
                          /* decode Command Identifier */
 
/*    cmd_octet_1 = cmd_octet_1 & 0x00FF;*/
 
      upper = lower = cmd_octet_1;
      lower = lower & 0x000f;
      upper = upper & 0x00f0;
 
      /*.......................................*/
      printf("      -- Command Identifier == ");
      /*.......................................*/
      if (upper == 0x00c0)
        printf(" %s\n",cmd_array_4x[lower]);
      else if (upper == 0x00b0)
        printf(" %s\n",cmd_array_3x[lower]);
      else if (upper == 0x00a0)
        printf(" %s\n",cmd_array_2x[lower]);
      else if (upper == 0x0090)
        printf(" %s\n",cmd_array_1x[lower]);
      else if (upper == 0x0080)
        printf(" %s\n",cmd_array_0x[lower]);
      else printf ("%c%c  ** Unknown Command Identifier **\n",byte1,byte2);
    }  /*end else*/
                          /* decode_cmd_oct_2: */
    upper = lower = cmd_octet_2;
    upper = upper & 0x00C1;
 
    /*.......................................*/
    printf("      -- Error location == ");
    /*.......................................*/
    if (upper == 0x01)
      printf(" Header\n");
    else if (upper == 0x41)
      printf(" Header increment\n");
    else if (upper == 0x81)
      printf(" Skip field\n");
    else if (upper == 0xC1)
      printf(" Data field, Load, Read, or Misc Cmds\n");
    else printf(" *** Unknow Error location ***\n");
 
    upper = lower & 0x0031;
    lower = lower & 0x000f;
 
    if (lower & 0x01)   {
      lower = lower >> 1;
 
      /*.......................................*/
      printf("      -- Error Category == ");
      /*.......................................*/
      if (upper == 0x01)   {
        printf(" %s\n",error_code_0[8]);
        printf("        :  %s\n",error_code_0[lower]);
      }
      else if (upper == 0x11)  {
        printf(" %s\n",error_code_1[8]);
        printf("        :  %s\n",error_code_1[lower]);
      }
      else if (upper == 0x21)  {
        printf(" %s\n",error_code_2[8]);
        printf("        :  %s\n",error_code_2[lower]);
      }
      else if (upper == 0x31)  {
        printf(" %s\n",error_code_3[8]);
        printf("        :  %s\n",error_code_3[lower]);
      }
    }  /*end if*/
    else printf(" *** Unknown Error Category ***\n");
 
  return;
  }  /*end cmd_end_status ()*/
 
 
/*
----------------------------------------------------------------------
*/
 
drive_end_status(dr_octet)
int dr_octet;
{
  int lower, upper;
 
  lower = upper = dr_octet;
  lower = lower & 0x000f;
  upper = upper & 0x00f0;
 
  if ( upper & 0x10)
    printf("       :  Time Dependent Operation \n");
  if ( upper & 0x20)
    printf("       :  Odd Byte Transfer\n");
  if ( upper & 0x40)
    printf("       :  Bus Parity Error\n");
  if ( upper & 0x80)
    printf("       :  Successful Information Transfer\n");
 
  if ( lower == 0 )
    printf ("       :  Bus Control Executed\n");
  else if (lower == 0x01)
    printf ("       :  Busy -- Bus Control Reject \n");
  else if (lower == 0x04)
    printf("       :  Missing AM \n");
  else if (lower == 0x05)
    printf("       :  Missing Sync Byte\n");
  else if (lower == 0x06)
    printf("       :  ECC Error\n");
  else if (lower == 0x07)
    printf("       :  Header Vertify Error\n");
  else if (lower == 0x08)
    printf("       :  Operation Exception\n");
  else if (lower == 0x0c)
    printf("       :  Unsolicited Exceeption\n");
  else
    printf ("Unknown Operation Ending Status\n");
return;
}   /*end drive_end_status () */
 
/*
----------------------------------------------------------------------
*/
 
 
  drive_exception_status (octet,data)
  int octet, data;
  {
    int i;
    char *p;
    if (data != 0)  {
      switch (octet)   {
        case '0'-'0':
          p = drive_exception_0[0];
          break;
        case '1'-'0':
          p = drive_exception_1[0];
          break;
        case '2'-'0':
          p = drive_exception_2[0];
          break;
        case '3'-'0':
          p = drive_exception_3[0];
          break;
        case '4'-'0':
          p = drive_exception_4[0];
          break;
        case '5'-'0':
          p = drive_exception_5[0];
          break;
        case '6'-'0':
        case '7'-'0':
          printf (" Octet %x = %x  --  Unknow Code\n",(octet+11),data);
          return;
    }  /*end switch*/
    printf (" Octet %x = %x --  %s\n",(octet+11),data,p);
    p = p + 50 * 9;
    for (i = 1; i < 9 ; i++)  {
      p = p - 50;
      if ( i > 1 )
        data >>= 1;
      if ( data & 01 )
        printf ("          %s\n",p);
    }  /*end for*/
  }  /*end if*/
  else
    printf (" Octet %x = %x\n",(octet+11),data);
 
  return;
  }  /*end drive_exception ()*/
 
 
/*
----------------------------------------------------------------------
*/
 
void decode_ipi_status (byte1,byte2,byte3)
char byte1, byte2, byte3;
{
  int code_upper, code_lower, ipi_status;
 
  code_upper = ascii_to_dig ('0',byte1);
  code_lower = ascii_to_dig (byte2,byte3);
  code_upper <<= 8;
  ipi_status = (code_upper & 0x0f00) + (code_lower & 0x00ff);
 
  if (ipi_status & 0x008)
    printf ("                -- Successful                      \n");
  if (ipi_status & 0x800)
    printf ("                -- Command Exception               \n");
  if (ipi_status & 0x400)
    printf ("                -- Machine Exception               \n");
  if (ipi_status & 0x200)
    printf ("                -- Alternate Port Exception        \n");
  if (ipi_status & 0x100)
    printf ("                -- Intervention Required           \n");
  if (ipi_status & 0x080)
    printf ("                -- Message/Microcode Exception     \n");
  if (ipi_status & 0x040)
    printf ("                -- Defect Management               \n");
  if (ipi_status & 0x020)
    printf ("                -- Reserved                        \n");
  if (ipi_status & 0x010)
    printf ("                -- Reserved                        \n");
  if (ipi_status & 0x004)
    printf ("                -- Incomplete                      \n");
  if (ipi_status & 0x002)
    printf ("                -- Conditional Success             \n");
  if (ipi_status & 0x001)
    printf ("                -- Command Aborted                 \n");
return;
}  /*end decode_ipi_status()*/
 
 
/*
----------------------------------------------------------------------
*/
 
master_slave_status (ext_status,max_byte,position)
char ext_status[];
int max_byte,position;
 
{
  char byte1, byte2;
 
  position = position - 2;
  byte1 = ext_status[position++];
  byte2 = ext_status[position++];
  if (( byte1 == '8' ) && (byte2 == '0'))
    ;
  else  {
    printf ("Master Status = %c%c\n",byte1,byte2);
 
    if ( position + 2 <= max_byte)  {
      byte1 = ext_status[position++];
      byte2 = ext_status[position++];
      printf ("Slave Status  = %c%c\n",byte1,byte2);
    }  /*end if*/
  }  /*end else*/
return;
}  /*end master_slave_status ()*/
 
/*
----------------------------------------------------------------------
*/
 
driver_st_err_code (byte1,byte2)
char byte1, byte2;
{
 
  printf ("Drive Status/Error Codes = %c%c\n",byte1,byte2);
return;
}  /*end*/
 
/*
----------------------------------------------------------------------
*/
 
drive_frus_code(byte1,byte2)
char byte1, byte2;
{
  printf ("Drive FRUs Codes         = %c%c\n",byte1,byte2);
return;
}  /*end*/
 
/*
----------------------------------------------------------------------
*/
 
 
drive_faults_code(byte1,byte2)
char byte1, byte2;
{
  printf ("Drive Faults Codes       = %c%c\n",byte1,byte2);
  printf ("-------------------------------------------------------------\n");
return;
}  /*end*/
 
