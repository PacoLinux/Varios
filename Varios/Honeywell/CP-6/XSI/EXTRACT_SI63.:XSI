/*M* CP6-EXTRACT_SI63 - File access subroutines                   */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* AND  */
/***
***/
/******************************************************************/
/***/
/*F*     NAME: OPNFIL
         PURPOSE: To open a file under the conditions specified
                   in the parameters pased to the routine.
                                                                  */
OPNFIL : PROC (UNIT#, FUNC, THERE, KIND, FIL_NAM, FIL_LEN, FIL_ACT, FIL_PAS);
 
%INCLUDE EXTRACT_C1;
 
DCL UNIT# UBIN WORD;
DCL FIL_NAM CHAR(31);
DCL FIL_LEN UBIN WORD;
DCL FIL_ACT CHAR(8) ALIGNED;
DCL FIL_PAS CHAR(8) ALIGNED;
DCL FNAME CHAR(31) SYMREF;
DCL FNLN UBIN SYMREF;
DCL FACCT CHAR(8) SYMREF;
DCL FPASS CHAR(8) SYMREF;
DCL UIACCT CHAR(8) SYMREF;
DCL FUNC UBIN WORD;
DCL R2NAME CHAR(31)SYMREF;
DCL THERE UBIN WORD;
DCL KIND UBIN WORD;
DCL INDXED BIT(1) STATIC SYMDEF;
 
DCL 1 FILE_NAME ALIGNED,
      2 FL# UBIN BYTE UNAL ,
      2 FN# CHAR(31) UNAL;
 
DCL TELLER ENTRY(1);
 
DCL TUNIT UBIN;
 
/* FPT'S FOR OPNFIL AND CLSFIL */
%FPT_OPEN(FPTN=OPEN,STCLASS=AUTO,PFMT=VECTOR);
%FPT_OPEN(FPTN=KOPEN,ASN=FILE,ACS=DIRECT,STCLASS=CONSTANT,FUN=IN,
           TYPE='IX',KEYL=71,KEYX=0,IXTNSIZE=4,XTNSIZE=4);
%FPT_CLOSE(FPTN=CLOSE,STCLASS=AUTO,PFMT=VECTOR);
%FPT_CLOSE(FPTN=KCLOSE,STCLASS=CONSTANT);
%FPT_WAIT(UNITS=1,STCLASS=CONSTANT);
 
/*  OK  NOW LETS OPEN THE FILE */;
 
        TUNIT = INUNIT; INUNIT = UNIT#;
        OPEN = KOPEN;
        VBASE(OPEN.V_) = ADDR(OPEN.V);
        IF FUNC = %IN# THEN OPEN.V.OPER.TEST# = %YES#;
        ELSE OPEN.V.FUN# = FUNC;
        IF ADDR(FIL_ACT) ~= ADDR(NIL) THEN IF SUBSTR(FIL_ACT,0,1) ~= BINASC(0)
           THEN OPEN.ACCT_ = VECTOR(FIL_ACT);
        IF ADDR(FIL_PAS) ~= ADDR(NIL) THEN IF SUBSTR(FIL_PAS,0,1) ~= BINASC(0)
           THEN OPEN.PASS_ = VECTOR(FIL_PAS);
        IF ADDR(FIL_NAM) ~= ADDR(NIL) THEN DO;
           FILE_NAME.FN# = SUBSTR(FIL_NAM,0,FIL_LEN);
           FILE_NAME.FL# = FIL_LEN;
        END;
        ELSE DO;
           IF INUNIT = UIUNIT THEN IF SUBSTR(UIACCT,0,1) ~= BINASC(0)
              THEN OPEN.ACCT_ = VECTOR(UIACCT);
              ELSE; ELSE IF SUBSTR(FACCT,0,1) ~= BINASC(0)
              THEN OPEN.ACCT_ = VECTOR(FACCT);
           IF SUBSTR(FPASS,0,1) ~= BINASC(0) THEN OPEN.PASS_ = VECTOR(FPASS);
           FILE_NAME.FN# = SUBSTR(FNAME,0,FNLN);
           FILE_NAME.FL# = FNLN;
        END;
        OPEN.V.DCB# = UNIT# ;
        IF FILE_NAME.FN# = 'ME' OR
          FILE_NAME.FN# = 'LP' OR
          FILE_NAME.FN# = 'NO'
        THEN DO;
           OPEN.V.ASN# = %DEVICE#;
           OPEN.V.RES# = FILE_NAME.FN#;
           CALL M$OPEN(OPEN) ALTRET(NO_OPN);
           GOTO BYEB;
        END;
        OPEN.NAME_ = VECTOR(FILE_NAME);
        OPEN.V.ASN# = %FILE#;
        IF ADDR(KIND) ~= ADDR(NIL) THEN
           IF KIND = %INDEXED# THEN OPEN.V.ORG#=%KEYED#;
           ELSE OPEN.V.ORG# = KIND;
        IF ADDR(THERE) ~= ADDR(NIL) THEN OPEN.V.EXIST# = THERE;
        CHAR_LEN = 10;
TRY_AGAIN:
        CALL M$OPEN( OPEN ) ALTRET ( NO_OPN );
        IF (INUNIT = TXTUNT OR INUNIT = DATUNT) AND
          (OPEN.V.FUN# = %IN# OR DCBADDR(INUNIT)->F$DCB.FEXT = %YES#)
        THEN OLDFIL = TRUE;
        IF INUNIT = DATUNT THEN INDXED=DCBADDR(INUNIT)->F$DCB.ORG#=%INDEXED#;
BYEB:
        OK = TRUE;
        INUNIT = TUNIT;
        RETURN;
NO_OPN:
        IF ((INUNIT = TXTUNT OR INUNIT = DATUNT) AND CHAR_LEN > 0 AND
          ( B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE = %E$NOACCESS OR
          B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE = %E$FILEBUSY ))
        THEN IF OPEN.V.FUN# ~= %IN#
           THEN DO;
              WRTFLG = FALSE;
              OPEN.V.FUN# = %IN#;
              GOTO TRY_AGAIN;
           END;
           ELSE DO;
              CHAR_LEN = CHAR_LEN - 1;
              CALL M$WAIT(FPT_WAIT);
              GOTO TRY_AGAIN;
           END;
        IF INUNIT = R2UNIT THEN IF SUBSTR(FILE_NAME.FN#,0,2)='??' THEN DO;
              R2NAME = FILE_NAME.FN#;
              GOTO BYEB;
           END;
        IF UNIT# ~= UIUNIT THEN CALL TELLER(-1);
        INUNIT = TUNIT;
DEAD:
        IF ADDR(FUNC) ~= ADDR(NIL) THEN IF FUNC ~= 0 THEN OK = FALSE;
        RETURN;
 
%EJECT;
/*F*     NAME: CLSFIL
         PURPOSE: To close a file under the conditions specified
                   in the parameters pased to the routine.
                                                                  */
CLSFIL : ENTRY ( UNIT#, FUNC );
 
        CLOSE = KCLOSE;
        VBASE(CLOSE.V_) = ADDR(CLOSE.V);
        CLOSE.V.DCB# =  UNIT#;
        CLOSE.V.DISP# = FUNC;
        CALL M$CLOSE(CLOSE) ALTRET(DEAD);
        IF FUNC ~= 0 THEN OK = TRUE;
        RETURN;
END OPNFIL;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/******************************************************************/
/***/
/*F*     NAME: READ_FILE
         PURPOSE: To read from the INUNIT, place the data into
                   RECORD and Altret if EOF.
                                                                  */
READ_FILE : PROC  ALTRET NOAUTO;
 
%INCLUDE CP_6;
%INCLUDE XU_MACRO_C;
%F$DCB;
%B$TCB;
%B$ALT;
%INCLUDE B_ERRORS_C;
%XUU$PARAM(STCLASS=SYMREF,FPTN=XUDATA);
%INCLUDE EXTRACT_C2;
DCL B$TCB$ PTR SYMREF;
 
DCL RECNBR UBIN SYMREF;
 
DCL RECORD CHAR(140)SYMREF;
DCL OUT_BUFFER CHAR(140) SYMREF;
DCL INUNIT UBIN SYMREF;
DCL EXUNIT UBIN SYMREF;
DCL EOFFLG BIT(1) SYMREF;
DCL OK BIT(1) SYMREF;
%SUB TRUE = '1'B;
%SUB FALSE = '0'B;
DCL 1 RECKEY SYMREF,
      2 DEC CHAR(5),
      2 PT CHAR(1),
      2 FRC CHAR(3);
 
DCL RECLEN SBIN SYMREF;
 
%FPT_READ(FPTN=RD_FIL,KEYR=YES,KEY=KEY$,BUF=RECORD);
%FPT_CORRES(DCB1=F$6);
DCL F$6 DCB;
 
DCL 1 KEY$ ALIGNED STATIC,
      2 LEN UBIN BYTE UNAL,
      2 CHR UBIN(27) UNAL,
      2 * CHAR(252) UNAL;
 
%XUU$ENTRY;
DCL TELLER ENTRY(1);
 
/******/
 
        KEY$.LEN = 0; RECORD = ' ';
        RD_FIL.V.DCB# = INUNIT;
        IF INUNIT = EXUNIT
        THEN DO;
           CALL XUU$READ(XUDATA,RD_FIL.BUF_) ALTRET(XU_ERR);
LD_ZOK:    ;
           IF XUDATA.FLAGS.KEY_REC#
           THEN DO;
              RECKEY.FRC = SUBSTR(XUDATA.ASCII_KEY,6,3);
              RECKEY.DEC = SUBSTR(XUDATA.ASCII_KEY,0,5);
           END;
           ELSE DO;
              CALL BINCHAR(RECKEY.DEC,RECNBR + 1);
              CALL BINCHAR(RECKEY.FRC,0);
           END;
           RECLEN = XUDATA.ARS;
        END;
        ELSE DO;
           CALL M$READ(RD_FIL) ALTRET(RD_ERR);
           FPT_CORRES.V.DCB2# = INUNIT;
           IF NOT DCBADDR(INUNIT)->F$DCB.DDEV.XEQ#
           THEN CALL M$CORRES(FPT_CORRES) ALTRET(NOECHO);
           CALL CONCAT(OUT_BUFFER,'A   > ',RECORD);
           CALL TELLER(0);
NOECHO:    ;
           RECLEN = DCBADDR(INUNIT)->F$DCB.ARS#;
        END;
        EOFFLG = FALSE; OK = TRUE;
        RETURN;
RD_ERR:
        IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE = %E$EOF
        THEN ALTRETURN;
        XUDATA.ERRCODE = BINBIT(-1,36);
XU_ERR: IF XUDATA.ERRCODE.ERR# = %E$EOF AND RECNBR ~= 0
        THEN ALTRETURN;
        CALL TELLER(XUDATA.ERRCODE);
        RECLEN = -1;
        IF INUNIT = EXUNIT THEN DO;
           CALL TELLER(%LINE_NO);
           IF XUDATA.ERRCODE.ERR# = %E$LD THEN GOTO LD_ZOK;
        END;
        ALTRETURN;
END READ_FILE;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/******************************************************************/
/***/
/*F*     NAME: STPDB
         PURPOSE: This routine will stop the data base. It will
                   write out the new first record to the INDEX
                   file and write out the in core block.
                                                                  */
STPDB : PROC;
 
%INCLUDE EXTRACT_C1;
 
DCL CLSFIL ENTRY(2);
DCL DBREAD ENTRY(3);
DCL DBWRIT ENTRY(3);
DCL TELLER ENTRY(1);
 
DCL BUFFER CHAR(4096) SYMREF;
DCL NEW_BLK# UBIN SYMREF;
DCL NEW_BYT# UBIN SYMREF;
DCL NEW_CMT$ PTR SYMREF;
DCL NUMRECS SBIN SYMREF;
DCL INDXED BIT(1) SYMREF;
 
%FPT_DELREC(FPTN=DELETE,DCB=F$108,KEY=LDAT,LKEY=HDAT);
%FPT_WRITE(FPTN=WRITE_IND,DCB=F$108,BUF=DAT);
%FPT_WRITE(FPTN=WRITE_KEY,DCB=F$108,KEY=DAT);
%FPT_CLOSE(FPTN=SAVDAT,DCB=F$108,DISP=SAVE);
%FPT_CLOSE(FPTN=SAVTXT,DCB=F$109,DISP=SAVE);
%FPT_PRECORD(FPTN=PREC_IND,DCB=F$108,KEY=DAT,KEYS=YES,KEYR=YES);
 
DCL F$108 DCB;
DCL F$109 DCB;
 
DCL 1 DAT STATIC ALIGNED,
      2 L CHAR(4) INIT(' ') UNAL,
      2 NUMRECS SBIN UNAL,
      2 NEW_BLK# UBIN UNAL,
      2 NEW_BYT# UBIN UNAL,
      2 REST CHAR(60) INIT(' ') UNAL;
 
DCL 1 LDAT CONSTANT ALIGNED,
      2 * CHAR(4) INIT(BINASC(1)) UNAL,
      2 KEY(0:17) UBIN INIT(0*0) UNAL;
DCL 1 HDAT CONSTANT ALIGNED,
      2 * CHAR(4) INIT(' ') UNAL,
      2 KEY(0:17) SBIN INIT(-1*0) UNAL;
 
/*******/
 
        IF NOT HAVDAT THEN RETURN;
        IF NOT OLDFIL THEN DO;
           CALL M$CLOSE(SAVDAT);
           CALL M$CLOSE(SAVTXT);
           OLDFIL = %YES#;
        END;
        HAVDAT = FALSE;
        IF DCBADDR(DATUNT)->F$DCB.FUN# = %IN# THEN RETURN;
        CALL DBWRIT(TXTUNT,BUFFER,NEW_BLK#);
        DAT.NUMRECS = NUMRECS;
        DAT.NEW_BLK# = NEW_BLK#;
        DAT.NEW_BYT# = NEW_BYT#;
        CALL M$DELREC(DELETE);
        IF INDXED THEN DO;
           DAT.L = ' ';
           CALL M$WRITE(WRITE_IND);
        END;
        ELSE DO;
           DAT.L = BINASC(15);
           CALL M$WRITE(WRITE_KEY);
        END;
        RETURN;
%EJECT;
/******************************************************************/
/***/
/*F*     NAME: RDYDB
         PURPOSE: This routine will setup the data base. It will
                   get the first record from the INDEX file and
                   get the next updatable block in core.
                                                                  */
RDYDB : ENTRY;
 
        IF NOT OLDFIL
        THEN DO;
NEWFILE:   ;
           OLDFIL = %NO#;               /* FOR THE ERROR CASE BELOW (NOKEYOK) */
           NUMRECS = -1;
           NEW_BLK# = 0;
           NEW_BYT# = 4;
           NEW_CMT$ = PINCRC(ADDR(BUFFER),NEW_BYT#);
           BUFFER = ' '; HAVDAT = TRUE;
        END;
        ELSE DO;
           HAVDAT = TRUE;
           DAT = '001'O;
           CALL M$PRECORD(PREC_IND)ALTRET(NOKEYOK);
NOKEYOK:   IF SUBSTR(DAT.L,1,3) ~= ' ' THEN GOTO NEWFILE;
           NUMRECS = DAT.NUMRECS;
           NEW_BLK# = DAT.NEW_BLK#;
           NEW_BYT# = DAT.NEW_BYT#;
           CALL DBREAD(TXTUNT,BUFFER,NEW_BLK#);
           NEW_CMT$ = PINCRC(ADDR(BUFFER),NEW_BYT#);
        END;
        RETURN;
%EJECT;
/******************************************************************/
/***/
/*F*     NAME: ALL_DONE
         PURPOSE: Will issue an closeing remarks and make
                   all files have been closed neatly.
                                                                  */
ALL_DONE : ENTRY;
 
        IF HAVDAT THEN CALL STPDB;
        CALL TELLER(%GOOD_BYE);
        DO I = 0 TO 10;
           IF DCBADDR(UNUM#(I))->F$DCB.FCD# = %YES#
           THEN CALL CLSFIL(UNUM#(I),%SAVE#);
        END;
        RETURN;
END STPDB;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/******************************************************************/
/***/
/*F*     NAME: DBREAD
         PURPOSE: To read a random file and place the data in
                   buffer. Uses DATBLK as the block # to read.
                                                                  */
DBREAD : PROC (UNIT#, BUFFER, DATBLK);
 
%INCLUDE CP_6;
%INCLUDE B_ERRORS_C;
%INCLUDE CP_6_SUBS;
%INCLUDE EXTRACT_C2;
%B$TCB;
%B$ALT;
DCL B$TCB$ PTR SYMREF;
 
DCL UNIT# UBIN;
DCL BUFFER CHAR(4096);
DCL DATBLK UBIN;
DCL BRKFLG BIT(1) SYMREF;
 
 
DCL TELLER ENTRY(1);
 
%FPT_READ(FPTN=READ);
%FPT_WRITE(FPTN=WRITE);
%FPT_EXTEND(FPTN=EXTEND,SIZ=10);
 
        READ.BUF_ = VECTOR(BUFFER);
        READ.V.DCB# =  UNIT# ;
        READ.KEY_ = VECTOR(DATBLK);
        READ.V.KEYS# = %YES#;
        READ.V.FULL# = %YES#;
        CALL M$READ(READ) ALTRET (ERR1);
        RETURN;
ERR1:
        CALL TELLER(-1);
        CALL TELLER(%DB_NO_GOOD);
        BRKFLG = '1'B;
        RETURN;
 
%EJECT;
/*F*     NAME: DBWRIT
         PURPOSE: To write a random block to a file. It will use
                   DATBLK as the block to write.
                                                                  */
DBWRIT : ENTRY (UNIT#,BUFFER,DATBLK);
        WRITE.BUF_ = VECTOR(BUFFER);
        WRITE.V.DCB# =  UNIT# ;
        WRITE.KEY_ = VECTOR(DATBLK);
        WRITE.V.FULL# = %YES#;
AGAIN:  CALL M$WRITE(WRITE) ALTRET (ERR2);
        RETURN;
ERR2:   IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE ~= %E$RANBADBLK
        THEN DO;
           CALL TELLER(-1);
           BRKFLG = '1'B;
           RETURN;
        END;
        EXTEND.V.DCB# = UNIT#;
        CALL M$EXTEND(EXTEND) ALTRET(ERR2);
        GOTO AGAIN;
END DBREAD;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/******************************************************************/
/***/
/*F*     NAME: ADD_LST
         PURPOSE: This routine will add a record to the Indexed
                   file of the data base. This record has all info
                   for an entry.
                                                                  */
ADD_LST : PROC;
 
%INCLUDE EXTRACT_C1;
 
DCL STPDB ENTRY;
DCL TELLER ENTRY(1);
 
DCL NUMRECS SBIN SYMREF;
 
DCL 1 NEW_REC SYMREF ALIGNED,
      2 MUD CHAR(31) UNAL,
      2 * UBIN BYTE UNAL,
      2 NAM CHAR(35) UNAL,
      2 TYP UBIN BYTE UNAL,
      2 LINE UBIN(27) UNAL,
      2 BLK# UBIN(27) UNAL,
      2 BYT# UBIN(18) UNAL;
 
DCL N_REC REDEF NEW_REC CHAR(76);
 
 
DCL NEW_CMT$ PTR SYMREF;
DCL NEW_BYT# UBIN SYMREF;
DCL INDXED BIT(1) SYMREF;
 
%FPT_WRITE(FPTN=WRITE_IND,DCB=F$108,BUF=NEW_REC);
%FPT_WRITE(FPTN=WRITE_KEY,DCB=F$108,KEY=KEY_BUF);
 
DCL F$108 DCB;
 
DCL 1 KEY_BUF ALIGNED STATIC,
      2 L UBIN BYTE UNAL,
      2 T CHAR(79);
 
/*******/
 
        NUMRECS = NUMRECS + 1;
        IF INDXED THEN CALL M$WRITE(WRITE_IND) ALTRET(PROBLEM);
        ELSE DO;
           CALL INDEX1(I,' ',NEW_REC.MUD);
           CALL INDEX2(J,'  ',NEW_REC.NAM);
           CALL CONCAT(KEY_BUF.T,SUBSTR(NEW_REC.MUD,0,I+1),
             SUBSTR(NEW_REC.NAM,0,J),SUBSTR(N_REC,67,9));
           KEY_BUF.L = I+J+10;
           CALL M$WRITE(WRITE_KEY)ALTRET(PROBLEM);
        END;
        NEW_CMT$->U1 = 0; NEW_CMT$ = PINCRC(NEW_CMT$,1);
        NEW_BYT# = NEW_BYT# + 1;
        RETURN;
PROBLEM:
        CALL TELLER(-1);
        CALL STPDB;
        OK = FALSE;
        RETURN;
END ADD_LST;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*****************************************************************/
/***/
/*F*     NAME: ADD_LINE
         PURPOSE: ADD_LINE will add another line of text to the
                   random block in core.
                                                                 */
ADD_LINE : PROC (START, FINISH);
 
 
DCL START SBIN;
DCL FINISH SBIN;
DCL I SBIN;
DCL J SBIN;
DCL K SBIN;
DCL TXTUNT UBIN SYMREF;
 
DCL DBWRIT ENTRY(3);
 
DCL BUFFER CHAR(4096) SYMREF;
DCL NEW_BLK# UBIN SYMREF;
DCL NEW_BYT# UBIN SYMREF;
DCL RECORD(0:139) CHAR(1) SYMREF;
DCL RECORDC REDEF RECORD CHAR(140);
DCL NEW_CMT$ PTR SYMREF;
 
DCL FLG BIT(1);
 
/*******/
        FLG = '0'B;
        I=START;K=FINISH;
 
        IF K < I THEN GOTO BLANKREC;
/* A FIX FOR BLANK LINES */
        IF SUBSTR(RECORDC,K-1,2) = '*/'
        THEN DO;
           K = K - 2;
           IF K < I THEN RETURN;
           FLG = '1'B;
        END;
 
        DO WHILE((RECORD(K)=' ' OR SUBSTR(RECORDC,K-1,2)=' *') AND K >= I);
           K = K - 1;
        END;
 
        K = K - I + 1;
 
        IF K < 0 THEN RETURN;
        IF K = 0 THEN DO;
BLANKREC:  RECORD(0) = ' ';
           K = 1;
           I = 0;
        END;
        IF K = 1 AND RECORD(0) = ' ' AND FLG THEN RETURN;
 
        IF NEW_BYT# + K + 1 > 4095
        THEN DO;         /* THIS BLOCK FULL. WRITE IT OUT AND MAKE A NEW ONE  */
           CALL INSERT(BUFFER,NEW_BYT#,1,BINASC(K));
           CALL DBWRIT(TXTUNT,BUFFER,NEW_BLK#);
           NEW_BLK# = NEW_BLK# + 1;
           NEW_BYT# = 4;
           NEW_CMT$ = PINCRC(ADDR(BUFFER),4);
           BUFFER = ' ';
        END;
        CALL INSERT(BUFFER,NEW_BYT#,1,BINASC(K));
        CALL INSERT(BUFFER,NEW_BYT#+1,K,SUBSTR(RECORDC,I,K));
        NEW_BYT# = NEW_BYT# + K + 1;
        NEW_CMT$ = PINCRC(NEW_CMT$,K+1);
        RETURN;
END ADD_LINE;
