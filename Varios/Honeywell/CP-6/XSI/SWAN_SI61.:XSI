/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
SWANDRIVER: PROC MAIN;
 
/* EQUates */
 
%EQU TRUE = '1'B ;
%EQU FALSE = '0'B ;
 
/* INCLUDE Files */
 
%INCLUDE CP_6;
 
/* FPTs */
 
%FPT_OPEN ( FPTN = OPEN_SI, NAME = SI_NAME, ACCT = SI_ACCT, ORG = CONSEC,
            FUN = IN, DCB = M$SI, ASN = FILE ) ;
%FPT_OPEN ( FPTN = OPEN_OU, NAME = OU_NAME, ACCT = OU_ACCT, ORG = CONSEC,
            FUN = CREATE, EXIST = NEWFILE, DCB = M$OU, PASS = OU_PASS,
            SN = OU_SN ) ;
%FPT_OPEN ( FPTN = OPEN_OU_ASSMRG, FUN = CREATE, EXIST = NEWFILE, DCB = M$OU ) ;
%FPT_FID ( FPTN = FPT_FID_OU, NAME = OU_NAME, ACCT = OU_ACCT, PASS = OU_PASS,
           RES = OPEN_OU.V.RES#, ASN = OPEN_OU.V.ASN#, TEXTFID = BUFFER ) ;
%FPT_OPEN ( DCB = M$FEP, ORG = FPRG, ASN = DEVICE, FUN = CREATE,
            FPRG = VLP_FPRG ) ;
%FPT_READ ( FPTN = READ_SI, DCB = M$SI, BUF = FBUF ) ;
%FPT_READ ( DCB = M$FEP, WAIT = YES ) ;
%FPT_WRITE ( DCB = M$FEP, RRR = YES ) ;
%FPT_WRITE ( FPTN = WRITE_OU, BUF = FBUF, DCB = M$OU ) ;
%FPT_WRITE ( FPTN = WR_ME, DCB = M$ME, BUF = BUFFER ) ;
%FPT_PROMPT ( FPTN = PROMPT_ME, DCB = M$ME, VFC = YES ) ;
%FPT_READ ( FPTN = RD_ME, DCB = M$ME, BUF = BUFFER ) ;
%FPT_CLOSE ( FPTN = CLS_SI, DCB = M$SI, DISP = SAVE ) ;
%FPT_CLOSE ( FPTN = CLS_OU, DCB = M$OU, DISP = SAVE ) ;
%FPT_CLOSE ( FPTN = CLS_OU_RLS, DCB = M$OU ) ;
 
/* VLPs */
 
%VLP_NAME ( FPTN = SI_NAME, NAME = 'SWANFW' ) ;
%VLP_ACCT ( FPTN = SI_ACCT, ACCT = 'X' ) ;
%VLP_NAME ( FPTN = OU_NAME ) ;
%VLP_ACCT ( FPTN = OU_ACCT ) ;
%VLP_PASS ( FPTN = OU_PASS ) ;
%VLP_SN ( FPTN = OU_SN ) ;
%VLP_FPRG ( NAME = 'SWANHND_F', ACCT = 'X' ) ;
 
/* DCBs */
 
DCL M$FEP DCB ;
DCL M$ME DCB ;
DCL M$SI DCB ;
DCL M$OU DCB ;
 
/* Pointers */
 
DCL M$SI$ PTR ;
DCL M$ME$ PTR ;
DCL M$OU$ PTR ;
DCL M$FEP$ PTR ;
 
/* CONSTANTs */
 
DCL ASCFENUM CHAR(4) CONSTANT ALIGNED INIT ( 'FE00' ) ;
 
/* Buffers */
 
DCL BUFFER CHAR(80) STATIC INIT ( ' ' ) ;
DCL 1 PBUF_ STATIC ALIGNED ,
      2 * UBIN(9) CALIGNED INIT ( 30 ) ,
      2 TXT CHAR(79) CALIGNED INIT ( ' ' ) ;
DCL PBUF REDEF PBUF_ CHAR(80) ;
DCL FBUF CHAR(512) STATIC ;
DCL DMPBUF CHAR(256) STATIC ;
DCL RECBUF CHAR(4) STATIC ;
 
/* STATIC Variables */
 
/* BASED Variables */
 
%F$DCB ;
 
/* AUTO Variables */
 
DCL I UBIN ;
DCL FSIZE UBIN ;
DCL TVAL UBIN ;
DCL FSIZEASC CHAR(6) ;
DCL CLEN UBIN ;
DCL EOF BIT(1) UNAL ;
DCL GOODINP BIT(1) UNAL ;
DCL EOTASK BIT(1) UNAL ;
 
/* SWANDRIVER MainLine Code */
 
        M$ME$ = DCBADDR ( DCBNUM ( M$ME ) ) ;
        M$SI$ = DCBADDR ( DCBNUM ( M$SI ) ) ;
        M$OU$ = DCBADDR ( DCBNUM ( M$OU ) ) ;
        M$FEP$ = DCBADDR ( DCBNUM ( M$FEP ) ) ;
 
/* Get the FEP # */
 
        GOODINP = %FALSE ;
        PBUF_.TXT = 'Enter FEP# (DD):' ;
        DO WHILE GOODINP = %FALSE ;
           CALL RDME ;
           CALL GETBUFSTR ( I, CLEN ) ;
           CALL CHARBIN ( TVAL, SUBSTR ( BUFFER, I, CLEN ) ) ;
           IF TVAL > 0 AND TVAL < 99 THEN DO ;
              CALL CONCAT ( FPT_OPEN.V.RES#,
                            SUBSTR ( ASCFENUM, 0, 4-CLEN ),
                            SUBSTR ( BUFFER, I, CLEN ) ) ;
              GOODINP = %TRUE ;
              END /* IF VALID NUMBER */ ;
           ELSE DO ;
BADFENUM:
              BUFFER = 'Must be 1 or 2 decimal characters.' ;
              CALL WRME ;
              END /* ELSE */ ;
           END /* WHILE NOT GOOD INPUT */ ;
 
/* Start the FPRG */
 
        CALL M$OPEN ( FPT_OPEN ) WHENALTRETURN DO ;
           BUFFER = 'Error loading FPRG.' ;
           CALL WRME ;
           CALL M$EXIT ;
           END ;
 
/* Did we get to RING 1? */
 
        CALL GETFMSG ( 1 ) WHENALTRETURN DO ;
           CALL M$EXIT ;
           END ;
 
/* Does this FEP have a SWAN? */
 
        CALL GETFMSG ( 1 ) WHENALTRETURN DO ;
           CALL M$EXIT ;
           END ;
 
/* What function does the user want? */
 
        EOTASK = %FALSE ;
        DO WHILE EOTASK = %FALSE ;
           PBUF_.TXT = 'Command (L,C,D,Q,?):' ;
           GOODINP = %FALSE ;
           DO WHILE GOODINP = %FALSE ;
              CALL RDME ;
              CALL GETBUFSTR ( I, CLEN ) ;
              IF CLEN = 1 THEN
                 GOODINP = %TRUE ;
              END ;
           DO SELECT ( SUBSTR ( BUFFER, I, 1 ) ) ;
              SELECT ( 'L', 'l' ) ;
                 CALL LOADFW ;
              SELECT ( 'C', 'c' ) ;
                 CALL DSBCACHE ;
              SELECT ( 'D', 'd' ) ;
                 CALL DUMPSWAN ;
              SELECT ( 'Q', 'q' ) ;
                 CALL QUITSW ;
                 EOTASK = %TRUE ;
              SELECT ( '?' ) ;
                 BUFFER = '  L - Load SWAN Firmware' ;
                 CALL WRME ;
                 BUFFER = '  C - Disable FEP Cache' ;
                 CALL WRME ;
                 BUFFER = '  D - Dump the SWAN SILO' ;
                 CALL WRME ;
                 BUFFER = '  Q - Quit' ;
                 CALL WRME ;
                 BUFFER = '  ? - This message' ;
                 CALL WRME ;
              SELECT ( ELSE ) ;
                 BUFFER = 'Valid commands are L, C, D, and Q (enter ? for more help)' ;
                 CALL WRME ;
              END /* SELECT */ ;
           END /* WHILE USER HASN'T ENTERED Quit */ ;
 
/* END SWANDRIVER */
 
LOADFW: PROC ;
 
/* AUTO Variables */
 
DCL RECSENT BIT(1) UNAL ;
 
/* LOADFW Code */
 
/* Send the Load firmware command to the FPRG */
 
        BUFFER = 'L' ;
        CALL WRFCMD ;
        CALL GETFMSG ( 1 ) WHENALTRETURN DO ;
           RETURN ;
           END ;
 
/* Open the SWAN firmware file */
 
        CALL M$OPEN ( OPEN_SI ) WHENALTRETURN DO ;
           BUFFER = 'Error opening SWAN firmware file.' ;
           CALL WRME ;
           END ;
 
        FSIZE = 0 ;
        RECSENT = %FALSE ;
        EOF = %FALSE ;
        DO WHILE EOF = %FALSE ;
READSI:
           CALL M$READ ( READ_SI ) WHENALTRETURN DO ;
              CALL M$CLOSE ( CLS_SI ) ;
              BUFFER = 'Error reading SWAN firmware file.' ;
              CALL WRME ;
              CALL M$EXIT ;
              END ;
           DO CASE ( ASCBIN ( SUBSTR ( FBUF, 0, 1 ) ) ) ;
              CASE ( 49 ) ;
                 FPT_WRITE.BUF_ = VECTOR ( SUBSTR ( FBUF, 5,
                                                    M$SI$->F$DCB.ARS# - 5 ) ) ;
                 FSIZE = FSIZE + M$SI$->F$DCB.ARS# - 5 ;
              CASE ( 50 ) ;
                 FPT_WRITE.BUF_ = VECTOR ( SUBSTR ( FBUF, 1,
                                                    M$SI$->F$DCB.ARS# - 1 ) ) ;
                 FSIZE = FSIZE + M$SI$->F$DCB.ARS# - 1 ;
              CASE ( 255 ) ;
                 EOF = %TRUE ;
                 FBUF = 'EOFCJE' ;
                 FPT_WRITE.BUF_ = VECTOR ( SUBSTR ( FBUF, 0, 6 ) ) ;
              CASE ( ELSE ) ;
                 GOTO READSI ;
              END ;
           RECSENT = %TRUE ;
           CALL M$WRITE ( FPT_WRITE ) WHENALTRETURN DO ;
              BUFFER = 'Error writing SWAN firmware to FEP.' ;
              CALL WRME ;
              CALL M$EXIT ;
              END ;
           CALL GETFMSG ( 1 ) WHENALTRETURN DO ;
              RETURN ;
              END ;
           END ;
        CALL BINCHAR ( FSIZEASC, FSIZE ) ;
        I = 0 ;
        DO WHILE SUBSTR ( FSIZEASC, I, 1 ) = '0' ;
           I = I + 1 ;
           END ;
        CALL CONCAT ( BUFFER,
                      'Firmware size = ',
                      SUBSTR ( FSIZEASC, I, SIZEC ( FSIZEASC ) - I ),
                      ' Bytes.' ) ;
        CALL WRME ;
        BUFFER = ' ' ;
        CALL M$CLOSE ( CLS_SI ) ;
        CALL GETFMSG ( 0 ) ;
 
        RETURN ;
 
END LOADFW ;
 
DSBCACHE: PROC ;
 
        BUFFER = 'C' ;
        CALL WRFCMD ;
        CALL GETFMSG ( 0 ) ;
 
        RETURN ;
 
END DSBCACHE ;
 
DUMPSWAN: PROC ;
 
/* AUTO Variables */
 
DCL EODUMP BIT(1) UNAL ;
DCL GOODOU BIT(1) UNAL ;
DCL I UBIN ;
DCL J UBIN ;
DCL RECS UBIN ;
DCL RECSASC CHAR(4) ;
 
/* DUMPSWAN Code */
 
/* Open the SWAN dump file */
 
        GOODOU = %FALSE ;
        IF M$OU$->F$DCB.AMR# = %TRUE THEN DO ;
           CALL M$OPEN ( OPEN_OU_ASSMRG ) ALTRET ( BADOUOPN ) ;
           GOODOU = %TRUE ;
           END ;
 
        DO WHILE GOODOU = %FALSE ;
GETOU:
           PBUF_.TXT = 'Enter SWAN dump fid:' ;
           CALL RDME ;
           CALL M$FID ( FPT_FID_OU ) WHENRETURN DO ;
              CALL M$OPEN ( OPEN_OU ) WHENRETURN DO ;
                 GOODOU = %TRUE ;
                 END ;
              WHENALTRETURN DO ;
BADOUOPN:
                 BUFFER = 'Error opening SWAN dump file.' ;
                 CALL WRME ;
                 END ;
              END ;
           WHENALTRETURN DO ;
              BUFFER = 'Error during fid processing.' ;
              CALL WRME ;
              END ;
           END ;
 
        BUFFER = 'D' ;
        CALL WRFCMD ;
 
        RECS = 0 ;
        EODUMP = %FALSE ;
        FPT_READ.BUF_ = VECTOR ( FBUF ) ;
        DO WHILE EODUMP = %FALSE ;
           CALL M$READ ( FPT_READ ) WHENALTRETURN DO ;
              BUFFER = 'Error reading from FPRG.' ;
              CALL WRME ;
              CALL M$EXIT ;
              END ;
           IF SUBSTR ( FBUF, 0, 1 ) = '1' THEN DO ;
              BUFFER = SUBSTR ( FBUF, 1, M$FEP$->F$DCB.ARS# - 1 ) ;
              GOTO DMPERR ;
              END ;
           ELSE IF M$FEP$->F$DCB.ARS# = 7 AND
              SUBSTR ( FBUF, 1, 6 ) = 'EOFCJE' THEN
              EODUMP = %TRUE ;
           ELSE DO ;
              J = 0 ;
              DO I = 1 TO M$FEP$->F$DCB.ARS# - 1 ;
                 DO CASE ( ASCBIN ( SUBSTR ( FBUF, I, 1 ) ) ) ;
                    CASE ( 0, 10 ) ; /* NUL, LF */
                    CASE ( 13 ) ; /* CR */
                       IF I > 1 THEN DO ;
                          WRITE_OU.BUF_ = VECTOR ( SUBSTR ( DMPBUF, 0, J ) ) ;
                          CALL M$WRITE ( WRITE_OU ) WHENALTRETURN DO ;
                             BUFFER = 'Error writing dump file.' ;
                             GOTO DMPERR ;
                             END ;
                          RECS = RECS + 1 ;
                          J = 0 ;
                          END ;
                    CASE ( ELSE ) ;
                       SUBSTR ( DMPBUF, J, 1 ) = SUBSTR ( FBUF, I, 1 ) ;
                       J = J + 1 ;
                    END ;
                 END ;
              IF SUBSTR ( FBUF, 5, 1 ) = '0' THEN DO ;
                 WR_ME.BUF_ = VECTOR ( SUBSTR ( FBUF, 1, 5 ) ) ;
                 WR_ME.V.DVBYTE.VFC# = '1'B ;
                 SUBSTR ( FBUF, 1, 1 ) = '`' ;
                 CALL M$WRITE ( WR_ME ) ;
                 WR_ME.V.DVBYTE.VFC# = '0'B ;
                 END ;
              END ;
           END ;
 
        IF RECS > 0 THEN DO ;
           CALL BINCHAR ( RECSASC, RECS ) ;
           I = 0 ;
           DO WHILE SUBSTR ( RECSASC, I, 1 ) = '0' ;
              I = I + 1 ;
              END ;
           CALL CONCAT ( BUFFER, 'Dump Complete, ',
                                 SUBSTR ( RECSASC, I, 4 - I ),
                                 ' records transferred.' ) ;
           END ;
        ELSE
           BUFFER = 'SILO Empty.  No records transferred.' ;
 
DMPERR:
        CALL WRME ;
        IF RECS > 0 THEN
           CALL M$CLOSE ( CLS_OU ) ;
        ELSE
           CALL M$CLOSE ( CLS_OU_RLS ) ;
        RETURN ;
 
END DUMPSWAN ;
 
QUITSW: PROC ;
 
        BUFFER = 'Q' ;
        CALL WRFCMD ;
 
        CALL M$EXIT ;
 
END QUITSW ;
 
GETBUFSTR: PROC ( I, CLEN ) ;
 
DCL I UBIN ;
DCL CLEN UBIN ;
DCL J UBIN ;
 
        I = 0 ;
        CLEN = 0 ;
 
        DO WHILE ( SUBSTR ( BUFFER, I, 1 ) = ' ' ) AND
                 ( I < SIZEC ( BUFFER ) ) ;
           I = I + 1 ;
           END ;
        J = I ;
        DO WHILE ( SUBSTR ( BUFFER, J, 1 ) ~= ' ' ) AND
                 ( J < SIZEC ( BUFFER ) ) ;
           CLEN = CLEN + 1 ;
           J = J + 1 ;
           END ;
 
        RETURN ;
 
END GETBUFSTR ;
 
GETFMSG: PROC ( PRLVL ) ALTRET ;
 
/* Parameters */
 
DCL PRLVL UBIN ;
 
/* AUTO Variables */
 
DCL FERRLVL UBIN ;
 
/* GETFMSG Code */
 
        FPT_READ.BUF_ = VECTOR ( BUFFER ) ;
        CALL M$READ ( FPT_READ ) WHENALTRETURN DO ;
           BUFFER = 'Error Reading from FPRG.' ;
           CALL WRME ;
           CALL M$EXIT ;
           END ;
        CALL CHARBIN ( FERRLVL, SUBSTR ( BUFFER, 0, 1 ) ) ;
        IF FERRLVL >= PRLVL THEN DO ;
           WR_ME.BUF_ = VECTOR ( SUBSTR ( BUFFER, 1,
                                          M$FEP$->F$DCB.ARS# - 1 ) ) ;
           CALL M$WRITE ( WR_ME ) ;
           END ;
        IF FERRLVL > 0 THEN
           ALTRETURN ;
 
        RETURN ;
 
END GETFMSG ;
 
WRFCMD: PROC ;
 
/* WRFCMD Code */
 
        FPT_WRITE.BUF_ = VECTOR ( SUBSTR ( BUFFER, 0, 1 ) ) ;
        CALL M$WRITE ( FPT_WRITE ) WHENALTRETURN DO ;
           BUFFER = 'Error writing to FPRG.' ;
           CALL WRME ;
           CALL M$EXIT ;
           END ;
 
        RETURN ;
 
END WRFCMD ;
 
WRME: PROC ;
 
/* WRME Code */
 
        WR_ME.BUF_ = VECTOR ( BUFFER ) ;
        CALL M$WRITE ( WR_ME ) ;
 
        RETURN ;
 
END WRME ;
 
RDME: PROC ;
 
/* AUTO Variables */
 
DCL GOODINP BIT(1) UNAL ;
DCL I UBIN ;
 
/* RDME Code */
 
        GOODINP = %FALSE ;
        CALL INDEX ( I, ':', PBUF ) ;
        PROMPT_ME.PROMPT_ = VECTOR ( SUBSTR ( PBUF, 0, I + 3 ) ) ;
        CALL M$PROMPT ( PROMPT_ME ) ;
        BUFFER = ' ' ;
        DO WHILE GOODINP = %FALSE ;
           CALL M$READ ( RD_ME ) ;
           IF M$ME$->F$DCB.ARS# > 0 THEN
              GOODINP = %TRUE ;
           END ;
 
        RETURN ;
 
END RDME ;
 
END SWANDRIVER ;
