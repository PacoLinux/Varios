/*M*    ERRMSG   --    To display error message            */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
 
/*P*    NAME:       XX$ERRMSG
        PURPOSE:    To display the error message associated
                    with an input CP6 error code.
        DESCRIPTION:
                    The command line contains all of the input
                    to this run unit.  The command line contains
                    the error code to display and optionally
                    the FID of the error message file associated
                    with this use.
                                                                 */
 
/*D*    NAME:       XX$ERRMSG
        INTERFACE:  M$ERRMSG
                    M$EXIT
        INPUT:      B$JIT.CCBUF
        OUTPUT:     Through M$DO, the associated error message.
 
        DESCRIPTION:
                    !EMU.X FID (ERRCODE)
 
                    The error code associated with this error
                    is expected to be found within parenthesis.
                    If M$SI is set to a file, then that FID
                    setting is used as the source of the error
                    message to display.
                                                                 */
 
EMU: PROC MAIN;
 
%INCLUDE CP_6;
%INCLUDE CP_6_SUBS;
%INCLUDE B$JIT_C;
 
 
%F$DCB;
%B$TCB(       STCLASS  =  "BASED(B$TCB$)" );
%B$ALT(       STCLASS  =  BASED );
 
%B$JIT0;
%U$JIT1;
%M$JIT2X;
%F$JIT3X;
%S$JIT4X;
%J$JIT5;
%A$JIT6X;
 
DCL  B$JIT$   PTR SYMREF;
DCL  B$TCB$   PTR SYMREF;
 
DCL  M$DO     DCB;
DCL  M$SI     DCB;
 
%EJECT;
 
%FPT_ERRMSG(     FPTN        =  ERRMSG,
                 STCLASS     =  STATIC,
                 CODE        =  XX_ERROR_CODE,
                 BUF         =  XX_BUFFER,
                 INCLCODE    =  YES,
                 RESULTS     =  RESULTS,
                 OUTDCB1     =  M$DO);
 
 
%VLR_ERRMSG(     FPTN        =  RESULTS,
                 STCLASS     =  STATIC);
 
%VLP_ERRCODE(    FPTN        =  XX_ERROR_CODE,
                 STCLASS     =  STATIC);
 
%FPT_EXIT(       FPTN        =  EXIT_FPT,
                 CODE        =  XX_ERROR_CODE);
 
%FPT_WRITE(      FPTN        =  WRITE_MESSAGE,
                 DCB         =  M$DO,
                 VFC         =  NO,
                 STCLASS     =  STATIC,
                 BUF         =  XX_BUFFER);
 
DCL  MSG_NO_CODE CHAR(0) CONSTANT
     INIT('Error Code must be present within parens');
 
DCL  MSG_NO_CONTINUE CHAR(0) CONSTANT
     INIT('Command line may not be continued');
 
DCL  MSG_BAD_CODE   CHAR(0) CONSTANT
     INIT('Illegal Error Code Format');
 
DCL  MSG_NO_MESSAGE CHAR(0) CONSTANT
     INIT('Sorry, there''s no message.');
DCL  XX_BUFFER   CHAR(120) STATIC;
 
DCL  DOALL    BIT(1) ALIGNED;
DCL  GOT1     SBIN;
%EJECT;
/**************************************************************/
/*                   P R O C E D U R E                        */
/**************************************************************/
 
     IF DCBADDR(DCBNUM(M$SI))->F$DCB.ASN# = %FILE# THEN
     DO;
        ERRMSG.FILENAME_ = VECTOR(DCBADDR(DCBNUM(M$SI))->F$DCB.NAME#);
        ERRMSG.FILEACCT_ = VECTOR(DCBADDR(DCBNUM(M$SI))->F$DCB.ACCT#);
     END;
 
     IF B$JIT.CCDISP = B$JIT.CCARS
        THEN GOTO ERROR_NO_CODE;
 
     IF B$JIT.CCDISP > B$JIT.CCARS
        THEN GOTO ERROR_NO_CONTINUE;
 
     IF SUBSTR(B$JIT.CCBUF,B$JIT.CCDISP,1) = '(' THEN
     DO;
        CALL GETCODE( SUBSTR(B$JIT.CCBUF,B$JIT.CCDISP+1), XX_ERROR_CODE, DOALL)
             ALTRET(ERROR_BAD_CODE);
     IF DOALL THEN
     DO;
        GOT1 = 0;
AGAIN:  ERRMSG.V.OUTDCB1# = DCBNUM(NIL);
        CALL M$ERRMSG(ERRMSG) ALTRET(NOT1);
        IF RESULTS.NOMSG OR RESULTS.NOFILE THEN GOTO NOT1;
        IF RESULTS.CODEUSED.SEV ~= XX_ERROR_CODE.SEV THEN GOTO NOT1;
        ERRMSG.V.OUTDCB1# = DCBNUM(M$DO);
        GOT1 = GOT1 + 1;
        CALL M$ERRMSG(ERRMSG) ALTRET(NOT1);
NOT1:   XX_ERROR_CODE.SEV = XX_ERROR_CODE.SEV + 1;
        IF XX_ERROR_CODE.SEV ~= 0 THEN GOTO AGAIN;
        IF GOT1 = 0 THEN GOTO NOMESSAGE;
     END;
        ELSE CALL M$ERRMSG(ERRMSG) ALTRET(NOMESSAGE);
        CALL M$EXIT(EXIT_FPT);
     END;
 
%EJECT;
ERROR_NO_CODE: ;
     XX_BUFFER = MSG_NO_CODE;
     GOTO WRITE_FAILURE;
ERROR_NO_CONTINUE: ;
     XX_BUFFER = MSG_NO_CONTINUE;
     GOTO WRITE_FAILURE;
ERROR_BAD_CODE: ;
     XX_BUFFER = MSG_BAD_CODE;
     GOTO WRITE_FAILURE;
NOMESSAGE: ;
     XX_BUFFER = MSG_NO_MESSAGE;
WRITE_FAILURE:
     CALL M$WRITE(WRITE_MESSAGE);
     CALL M$ERR;
 
%EJECT;
/*I*    NAME:   GETCODE
        PURPOSE:    To convert the error code text to a useable code.
        CALL:       CALL GETCODE(CODE_TEXT,CODE,ALL) ALTRET(ERROR);
        INPUT:      CODE_TEXT  ... text of code to convert.
        OUTPUT:     CODE       ... Useable error code.
                    ALL        ... '1'B if sev was '?' or obmitted
                                                                    */
GETCODE: PROC(ERROR_TEXT,ERROR_CODE,ALL) ALTRET;
 
DCL  ERROR_TEXT CHAR(12);
 
DCL  TEXTTEMP CHAR(12);
 
%VLP_ERRCODE( FPTN     =  ERROR_CODE,
              STCLASS  =  " ");
 
 
DCL  ALL   BIT(1) ALIGNED;
 
DCL FCG   UBIN;
DCL MID   UBIN;
DCL M     BIT(1);
DCL NUM   UBIN;
DCL SEV   UBIN;
 
DCL  DOALL BIT(1) ALIGNED;
 
DCL I     SBIN;
DCL J     SBIN;
DCL CHNUM UBIN;
DCL CH   REDEF CHNUM CHAR(4);
 
     I  = 3;
     CHNUM = 0;
     SUBSTR(CH,3,1) = SUBSTR(ERROR_TEXT,0,1);
     CALL VALIDCH(CH) ALTRET(ERROR);
     FCG = MOD(CHNUM,64);
     SUBSTR(CH,3,1) = SUBSTR(ERROR_TEXT,1,1);
     CALL VALIDCH(CH) ALTRET(ERROR);
     FCG = 64*FCG + MOD(CHNUM,64);
 
     MID = 0;
     M = '0'B;
     SEV = 0;
     DOALL = '0'B;
     IF SUBSTR(ERROR_TEXT,2,1) ~= '-' THEN
     DO;
        SUBSTR(CH,3,1) = SUBSTR(ERROR_TEXT,2,1);
        CALL VALIDCH(CH) ALTRET(ERROR);
        MID = MOD(CHNUM,64);
        IF SUBSTR(ERROR_TEXT,3,1) ~= '-' THEN GOTO ERROR;
        I = 4;
     END;
     IF SUBSTR(ERROR_TEXT,I,1) = 'M' THEN
     DO;
        M = '1'B;
        I = I + 1;
     END;
 
     J = I;
     SUBSTR(CH,3,1) = SUBSTR(ERROR_TEXT,I,1);
 
     DO WHILE(  I <= 120  AND  CHNUM >= ASCBIN('0')  AND CHNUM <= ASCBIN('9') );
        I = I + 1;
        SUBSTR(CH,3,1) = SUBSTR(ERROR_TEXT,I,1);
     END;
 
     IF    (I - J) = 0  OR  (I - J) > 60
        THEN GOTO ERROR;
     CALL CHARBIN(NUM,SUBSTR(ERROR_TEXT,J,I-J));
 
     IF CHNUM = ASCBIN('-') THEN
     DO;
        IF SUBSTR(ERROR_TEXT,I+1,1) = '?'
           THEN DOALL = '1'B;
           ELSE SEV = ASCBIN(SUBSTR(ERROR_TEXT,I+1,1)) - ASCBIN('0');
        IF  SEV > 7
           THEN GOTO ERROR;
        I = I + 2;
        SUBSTR(CH,3,1) = SUBSTR(ERROR_TEXT,I,1);
     END;
        ELSE DOALL = '1'B;
 
     IF CHNUM ~= ASCBIN(' ')   AND  CHNUM ~= ASCBIN(')')
        THEN GOTO ERROR;
 
     ERROR_CODE.FCG = BINBIT(FCG,12);
     ERROR_CODE.MID = BINBIT(MID,6);
     ERROR_CODE.MON = M;
     ERROR_CODE.ERR#= NUM;
     ERROR_CODE.SEV = SEV;
     ALL = DOALL;
 
     RETURN;
 
ERROR:
     ALTRETURN;
 
 
VALIDCH:   PROC(CHNUM) ALTRET;
 
DCL  CHNUM UBIN;
 
     IF (   CHNUM >= ASCBIN('A')  AND  CHNUM <= ASCBIN('Z')  )
                                  OR
        (   CHNUM >= ASCBIN('0')  AND  CHNUM <= ASCBIN('9')  )
                                  OR
        (   CHNUM >= ASCBIN('a')  AND  CHNUM <= ASCBIN('z')  )
 
        THEN RETURN;
 
     ALTRETURN;
END VALIDCH;
END GETCODE;
END EMU;
