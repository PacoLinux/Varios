/*M* param_decode:c   -- used for decoding parameter information  */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
 
/*F*    NAME: MODEST_SIc02    (param_decode:c)
        PURPOSE: decoder function for parameter information
 
        ORIGINAL AUTHOR:  Arthur Tai, SDO, Phoenix (BULL HN)
        ENHANCEMENTS:  Jordan Boucher, LADC
        DATE:  August 7, 1989
      UPDATES:  JTB 9/1/89
*/
 
/*
**********************************************************************
*/
 
 
#include "MODEST_Cc09"        /* "defines:h" */
 
/* EXTERNAL VARIABLES */
extern char param_array_1[9][50] ;                      /*byte # */
extern char param_array_2[9][50] ;                       /*byte # */
extern char param_array_3[13][50] ;
extern char param_array_4[16][50] ;
extern char param_array_8[6][50] ;
extern char param_array_9[2][50] ;
extern char param_array_a[7][50] ;
extern char param_array_b[2][50] ;
extern char param_array_c[50] ;
extern char param_array_e[2][50] ;
extern char param_array_f[2][50] ;
 
/*
**********************************************************************
*/
 
 
decode_3x(param1,param2,status,i,pos)
 
char status[];
char param1, param2;
int i,pos;
 
{
 
  char byte1, byte2, byte3, byte4;
  int length, oct_cnt, octet_data, n, cnt, skip_flag;
  int second_times, jump_out;
 
  byte1 = status [pos-4];
  byte2 = status [pos-3];
  length = ascii_to_dig(byte1,byte2) - 1;
/*  printf (" param 3x length = %d\n",length); */
  second_times = 0;
  printf ("\nPARAM ID = %c%c ",param1,param2);
  switch (param2)   {
    case '1':
      printf (" %s\n",param_array_1[0]);
      break;
    case '2':
      printf (" %s\n",param_array_2[0]);
      break;
    case '3':
      printf (" %s\n",param_array_3[0]);
      break;
    case '4':
      printf (" %s\n",param_array_4[0]);
      break;
    case '8':
      printf (" %s\n",param_array_8[0]);
      break;
    case '9':
      printf (" %s\n",param_array_9[0]);
      break;
    case 'A':
    case 'a':
      printf (" %s\n",param_array_a[0]);
      break;
    case 'B':
    case 'b':
      printf (" %s\n",param_array_b[0]);
      break;
    case 'C':
    case 'c':
      printf (" %s\n",param_array_c[0]);
      break;
    case 'E':
    case 'e':
      printf (" %s\n",param_array_e[0]);
      break;
    case 'F':
    case 'f':
      printf (" %s\n",param_array_f[0]);
      break;
    default:
      printf ("*** Unknown Parameter ID ***\n");
      pos = i;
      break;
  }  /*end switch*/
 
  jump_out = FALSE;
  for (oct_cnt = n = 0 ; (pos < i) && (length > oct_cnt) && (!jump_out);)   {
/* for (oct_cnt = 0 ; pos+2 <= i ; )*/
    byte1 = status[pos++];
    byte2 = status[pos++];
    oct_cnt++;
 
    switch (param2)   {
      case '3':
      case '4':
        if (oct_cnt == 1)
          printf (" Octet %d = %c%c  %s\n",oct_cnt,byte1,byte2,param_array_3[1]);
        else if (oct_cnt == 2)
          printf (" Octet %d = %c%c  %s\n",oct_cnt,byte1,byte2,param_array_3[2]);
        else if (oct_cnt == 3)  {
          printf (" Octet %d = %c%c  %s\n",oct_cnt,byte1,byte2,param_array_3[3]);
          octet_data = ascii_to_dig(byte1,byte2);
          if (octet_data & 0x80)
            printf("          - Identifies the PARAM as a Secondary Extent\n");
          else
            printf("          - Identifies the PARAM as a Primary Extent\n");
 
          if (octet_data & 0x08)
            printf("          - ??? Unknow\n");
          else
            printf("          - Forward Direction of Data Transfer\n");
 
          if (octet_data & 0x04)
            printf("          - Physical Block Addressing\n");
          else
            printf("          - Logical Block Addressing\n");
 
          if (octet_data & 0x02)
            printf("          - Data Recovery is ON\n");
          else
            printf("          - Data Recovery is OFF\n");
 
          if (octet_data & 0x01)
            printf("          - Block Counts\n");
          else
            printf("          - Octet Counts\n");
        }  /*end else if*/
 
        else if (oct_cnt == 4)   {
          n = 0;
          printf (" Octet %d = %c%c  %s\n",oct_cnt,byte1,byte2,param_array_3[4]);
        }
 
 
        else if ((param2 == '3') && (oct_cnt == (5 + n * 8)) )
          printf (" Octet %x to %x  %s\n        = %c%c",
                   oct_cnt,(oct_cnt + 3),param_array_3[5],byte1,byte2);
 
        else if ((param2 == '4') && (oct_cnt == 5))
          printf (" Octet 5 to 8  %s\n        = %c%c",param_array_4[5],byte1,byte2);
 
        else if (oct_cnt == (6 + n * 8))   {
          oct_cnt = ( 8 + n * 8 );
          printf ("%c%c",byte1,byte2);
        }
 
        else if (oct_cnt == (9 + n * 8))   {
          printf ("\n Octet %x to %x %s\n        = ",
                   oct_cnt,(oct_cnt+1),param_array_3[9]);
          if ( pos + 2 <= i)   {
            byte3 = byte1;
            byte4 = byte2;
          }
          else
            dec_addr('0','0',byte1,byte2);
        }  /*end else if*/
        else if (oct_cnt == (10 + n * 8))
          dec_addr(byte3,byte4,byte1,byte2);
        else if (oct_cnt == (11 + n * 8))   {
          printf ("\n Octet %x = ",oct_cnt);
          dec_addr ('0','0',byte1,byte2);
          printf ("    %s\n",param_array_3[11]);
        }  /*end else if*/
        else if (oct_cnt == (12 + n * 8))   {
          if (param2 == '3')
            n++;
          printf ("\n Octet %x = ",oct_cnt);
          dec_addr ('0','0',byte1,byte2);
          printf ("    %s\n",param_array_3[12]);
        }  /*end else if*/
        else if ((oct_cnt == 13) && (param2 == '4'))
          printf (" Octet 0D to 0E  %s\n        = %c%c",param_array_4[13],byte1,byte2);
 
        else if ((oct_cnt == 14) && (param2 == '4'))
          printf (" %c%c\n",byte1,byte2);
 
        else if ((oct_cnt == 15) && (param2 == '4'))   {
          printf (" Octet 0F to n  %s\n        =",param_array_4[15]);
          pos--;
          pos--;
          jump_out = TRUE;           /*goto end_3x;*/
        }  /*end else if*/
        break;
 
      case '1':
      case '2':
      /* check how many bytes in the buffer, because the parameter */
      /* may not left out the octet 1 and octet 2 when two param   */
      /* in a row                                                 */
        if (second_times == 0)   {
          second_times++;
          skip_flag = check_skip_octet (status,i,pos);
        }
 /*     printf (" pos == %d   I == %d  flag= %d\n",pos,i,skip_flag);*/
 
      /* output the count (4 bytes) for param 31 and 33.          */
      /* output the residual count (4 bytes) for param 32 and 34. */
 
      if (oct_cnt == (1 + n * 8))   {
        if (param2 == '1')
          printf (" Octet %x to %x  %s  = %c%c",
                   oct_cnt,(oct_cnt+3),param_array_1[1],byte1,byte2);
        else
          printf (" Octet %x to %x  %s  = %c%c",
                   oct_cnt,(oct_cnt+3),param_array_2[1],byte1,byte2);
      }  /*end if*/
      else if (oct_cnt == (2 + n * 8))   {
        if (skip_flag == 0)   {
          oct_cnt = (4 + n * 8);
          printf ("%c%c",byte1,byte2);
        }
        else  {
          printf ("%c%c",byte1,byte2);
          for (cnt = 2; cnt > 0; cnt--)  {
            byte1 = status[pos++];
            byte2 = status[pos++];
            oct_cnt++;
            printf ("%c%c",byte1,byte2);
          }  /*end for*/
        }  /*end else*/
      }  /*end else if*/
 
      /* output the Data Address for param 31, and 32          */
      /* 1st and 2nd bytes are Cylinder number                */
      /* 3rd byte is head number                              */
      /* 4th byte is sector number                            */
 
      else if (oct_cnt == (5 + n * 8))   {
        printf ("\n Octet %x to %x  %s     =",
                oct_cnt,(oct_cnt+1),param_array_2[5]);
        if ( pos + 2 <= i)   {
          byte3 = byte1;
          byte4 = byte2;
        }
        else
          dec_addr('0','0',byte1,byte2);
      }  /*end else if*/
      else if (oct_cnt == (6 + n * 8))
        dec_addr(byte3,byte4,byte1,byte2);
      else if (oct_cnt == (7 + n * 8))   {
        printf ("\n Octet %x       %s         = ",oct_cnt,param_array_1[7]);
        dec_addr ('0','0',byte1,byte2);
      }
      else if (oct_cnt == (8 + n * 8))   {
        n++;
        printf ("\n Octet %x       %s       = ",oct_cnt,param_array_1[8]);
        dec_addr ('0','0',byte1,byte2);
        printf ("\n");
      }
      break;
    case '8':
      if (oct_cnt == 1)
        printf (" Octet 1 to 2  %s\n        = %c%c",param_array_8[1],byte1,byte2);
      else if (oct_cnt == 2)
        printf(" %c%c",byte1,byte2);
      else if (oct_cnt == 3)
        printf ("\n Octet 3 to 4  %s\n        = %c%c",param_array_8[3],byte1,byte2);
      else if (oct_cnt == 4)
        printf(" %c%c",byte1,byte2);
      else if (oct_cnt == 5)
        printf ("\n Octet 5 to %x  %s\n        = %c%c",
                length,param_array_8[5],byte1,byte2);
      else
        printf(" %c%c",byte1,byte2);
      break;
 
    case '9':
      if (oct_cnt == 1)
        printf (" Octet %x to %x  %s\n        = %c%c",
                oct_cnt,length,param_array_9[1],byte1,byte2);
      else
        printf(" %c%c",byte1,byte2);
      break;
    case 'A':
    case 'a':
      if (oct_cnt == 1)   {
        printf (" Octet %x = %c%c\n",oct_cnt,byte1,byte2);
        octet_data = ascii_to_dig(byte1,byte2);
        if (octet_data & 0x20)
          printf ("          - Vertify\n");
        if (octet_data & 0xdf)
          printf ("   %x     - No such Code\n",(octet_data=octet_data&0xdf));
      }  /*end if*/
      else if (oct_cnt == 2)
        printf (" Octet %x = %c%c   %s\n",oct_cnt,byte1,byte2,param_array_a[2]);
      else if (oct_cnt == 3)   {
        printf (" Octet %d to %d  %s\n        = ",
                 oct_cnt,(oct_cnt+1),param_array_a[3]);
        if ( pos + 2 <= i)   {
          byte3 = byte1;
          byte4 = byte2;
        }
        else
          dec_addr('0','0',byte1,byte2);
      }  /*end else if*/
      else if (oct_cnt == 4)
        dec_addr(byte3,byte4,byte1,byte2);
      else if (oct_cnt == 5)   {
        printf ("\n Octet %x = ",oct_cnt);
        dec_addr ('0','0',byte1,byte2);
        printf ("    %s\n",param_array_a[5]);
      }
      else if (oct_cnt == 6)   {
        printf ("\n Octet %x = ",oct_cnt);
        dec_addr ('0','0',byte1,byte2);
        printf ("    %s\n",param_array_a[6]);
      }
      break;
 
    case 'B':
    case 'b':
      if (oct_cnt == 1)
        printf (" Octet %x to %x  %s\n        = %c%c",
                 oct_cnt,length,param_array_b[1],byte1,byte2);
      else if ((oct_cnt > 1) && (oct_cnt < 5))
        printf ("%c%c",byte1,byte2);
      break;
 
    case 'C':
    case 'c':
      printf (" Octet %x = %c%c\n",oct_cnt,byte1,byte2);
      octet_data = ascii_to_dig(byte1,byte2);
      if (octet_data & 0x80)
        printf("          - Vertify\n");
      if (octet_data & 0x20)
        printf("          - Certify\n");
      if (octet_data & 0x10)
        printf("          - Stop on Data Error\n");
      if (octet_data & 0x4f)
        printf("   %x   - No such Code\n",(octet_data=octet_data&0xdf));
      break;
 
    case 'E':
    case 'e':
      if (oct_cnt == 1)
        printf (" Octet 1 = %c%c   %s\n",byte1,byte2,param_array_e[1]);
      break;
 
    case 'F':
    case 'f':
      if (oct_cnt == 1)   {
        octet_data = ascii_to_dig(byte1,byte2);
        printf (" Octet  %x   = %x\n",oct_cnt,octet_data);
        if (octet_data & 0x80)
          printf("            -- Cylinders\n");
        else if (octet_data & 0x10)
          printf("            -- Discontiguous Defect Re-allocation\n");
        else if (octet_data & 0x6f)
          printf("   %x   - No such Code\n",(octet_data=octet_data&0xdf));
      }  /*end if*/
      else if ((oct_cnt > 1) || (oct_cnt < 7))
        printf(" Octet  %x   = %c%c -- Reserved\n",oct_cnt,byte1,byte2);
      break;
    }  /*end switch*/
 
  }  /*end for loop*/
 
/*end_3x: */
 
  byte1 = status[pos++];
  byte2 = status[pos++];
  if ((byte1 = '8') & (byte2 = '0'))
    ;
  else
    pos = pos - 2;
 
  printf("\n-----  param_decode ----------------------------\n");
return (pos);
}  /*end decode_3x ()*/
