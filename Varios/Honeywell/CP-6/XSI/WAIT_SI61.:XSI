/*M* WAIT - Waits a specified amount of time, up to a maximum. */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
WAIT: PROC MAIN;
 
      %INCLUDE WAIT_C61;
 
      DCL I                            UBIN;
      DCL UNITS                        UBIN;
 
      DCL B$JIT$                       PTR       SYMREF;
      DCL WAIT_CMD                     BIT(36)   SYMREF;
 
      DCL MAX_TIME                     UBIN      STATIC SYMDEF INIT(%(6*3600));
 
      DCL WORK_AREA                    CHAR(512) STATIC;
      DCL QUIET                        BIT(1)    STATIC SYMDEF;
 
      DCL LO_BUFFER                    CHAR(80)  STATIC;
      DCL M$LO                         DCB;
 
      DCL WAIT_BREAK                   ENTRY     ASYNC;
      DCL X$PARSE                      ENTRY(1)  ALTRET;
 
      %INCLUDE CP_6;
      %INCLUDE CP_6_SUBS;
      %INCLUDE B$JIT;
      %INCLUDE XU_MACRO_C;
      %INCLUDE XU_PERR_C;
 
%EJECT;
      %FPT_INT (UENTRY=WAIT_BREAK);
 
      %FPT_WRITE (FPTN=LO_WRITE,
                  BUF=LO_BUFFER,
                  DCB=M$LO);
 
      %FPT_WAIT;
 
      %FPT_EXIT (FPTN=FPT_EXIT_ERROR,
                 STEPCC=ERROR);
 
      %P_PCB (R=WAIT_CMD,
              W=WORK_AREA,
              WSZ="SIZEW(WORK_AREA)");
 
      %PARSE$OUT (STCLASS="BASED (P_PCB.OUT$)");
      %PARSE$SYM (STCLASS="BASED (P_PCB.OUT$)");
 
%EJECT;
      P_PCB.TEXT$ = ADDR(B$JIT.CCBUF);
      P_PCB.NCHARS = B$JIT.CCARS;
      CALL X$PARSE (P_PCB) ALTRET (BAD_PARSE);
 
      QUIET = '0'B;
      UNITS = 24*60*60 - 1;
 
      DO I = 1 TO OUT$BLK.NSUBLKS - 1;
         DO CASE (OUT$BLK.SUBLK$(I)->OUT$BLK.CODE);
            CASE (%QUIET#);
               QUIET = '1'B;
            CASE (%NUM#);
               CALL CHARBIN (UNITS,
                             SUBSTR(OUT$BLK.SUBLK$(I)->OUT$SYM.TEXT,0,
                                    OUT$BLK.SUBLK$(I)->OUT$SYM.COUNT));
            CASE (%SECS#);
            CASE (%MINS#);
               UNITS = UNITS * 60;
            CASE (%HOURS#);
               UNITS = UNITS * 60 * 60;
            CASE (ELSE);
               LO_BUFFER = '  Internal error!';
               CALL M$WRITE (LO_WRITE);
               CALL M$EXIT (FPT_EXIT_ERROR);
            END;
         END;
 
      IF UNITS >= 24*60*60 THEN
         DO;
            LO_BUFFER = '   You can only WAIT up to one day!';
            CALL M$WRITE (LO_WRITE);
            CALL M$EXIT (FPT_EXIT_ERROR);
            END;
 
      FPT_WAIT.V.UNITS# = MINIMUM(UNITS, MAX_TIME);
 
%EJECT;
      IF B$JIT.MODE = %M_INT# THEN CALL M$INT (FPT_INT);
 
      IF NOT QUIET THEN
         DO;
            LO_BUFFER = 'Waiting...';
            CALL M$WRITE (LO_WRITE);
            END;
 
      CALL M$WAIT (FPT_WAIT);
 
      IF NOT QUIET THEN
         DO;
            IF FPT_WAIT.V.UNITS# = UNITS THEN
               LO_BUFFER = 'Waiting is over.';
            ELSE
               LO_BUFFER = 'Maximum WAIT time exceeded.';
            CALL M$WRITE (LO_WRITE);
            END;
 
      CALL M$EXIT;
 
BAD_PARSE:
      IF P_PCB.ERROR.CODE = %E$SYNERR THEN
         DO;
            LO_BUFFER = '   Syntax: !WAIT.X [[F/OR] num [{SEC/ONDS|MIN/UTES|HOUR/S}]] [Q/UIETLY]';
            CALL M$WRITE (LO_WRITE);
            CALL M$EXIT (FPT_EXIT_ERROR);
            END;
 
ERR:  CALL M$ERR;
 
END WAIT;
%EOD;
/*M* WAIT_BREAK - break handler for WAIT */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
WAIT_BREAK: PROC ASYNC;
 
      DCL QUIET                        BIT(1)    SYMREF;
 
      DCL LO_BUFFER                    CHAR(80)  STATIC;
      DCL M$LO                         DCB;
 
      %INCLUDE CP_6;
 
      %FPT_WRITE (FPTN=LO_WRITE,
                  BUF=LO_BUFFER,
                  DCB=M$LO);
 
      IF NOT QUIET THEN
         DO;
            LO_BUFFER = 'Waiting is terminated.';
            CALL M$WRITE (LO_WRITE);
            END;
 
      CALL M$EXIT;
 
END WAIT_BREAK;
