/*M* MAKE_SI615 -- Miscellaneous system dependent functions      */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/*F*    NAME:       CHECK_JOB_COMPLETION(sysid)
        PURPOSE:    To return an indication if the specified job
                    is still running or waiting to run.
        DESCRIPTION:
           Once a job has completed execution this function returns
           0.  Otherwise, this function returns 1 for awaiting
           prescan, awaiting execution, or running.
*/
 
CHECK_JOB_COMPLETION: proc(SYSID) altret;
 
dcl  SYSID       sbin;
 
%include   CP_6;
%include CP_6_SUBS;
 
%FPT_JOBSTATS(      FPTN        =  JOB_STATS_CONST,
                    STCLASS     =  CONSTANT,
                    ORDER       =  CHECK,
                    SYSID       =  0           );
 
%FPT_JOBSTATS(      FPTN        =  JOB_STATS,
                    STCLASS     =  ""          );
 
%VLR_JOBSTATS_CHECK(FPTN        =  NEW_STATUS,
                    STCLASS     =  ""          );
 
 
dcl  XB_RETURN_ORDINAL_RESULT   entry(1);
 
/*****************************************************************/
/*                        P R O C E D U R E                      */
/*****************************************************************/
 
     JOB_STATS          = JOB_STATS_CONST;
     JOB_STATS.V_       = vector(JOB_STATS.V);
     JOB_STATS.RESULTS_ = vector(NEW_STATUS);
     JOB_STATS.V.SYSID# = SYSID;
     call M$JOBSTATS(JOB_STATS) whenaltreturn do;
        altreturn;
        end;
 
     do case( NEW_STATUS.CODE );
 
     case( %JS_RUN#, %JS_WAIT#, %JS_AP# );
        call XB_RETURN_ORDINAL_RESULT(1);
     case( else );
        call XB_RETURN_ORDINAL_RESULT(0);
     end;
 
end CHECK_JOB_COMPLETION;
%EOD;
/*M*    fid_modtime -- returns file modification time            */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
 
/*F*    NAME:       FID_MODTIME
        PURPOSE:    To return the modification time for a file.
        DESCRIPTION:
           If the file does not exist, this function returns 0.
*/
 
FID_MODTIME:  proc(FID, ACCTLIST, ACCT);
 
dcl  fid            char(biggy);
dcl  ACCTLIST       sbin;
dcl  ACCT           char(8);
dcl  ACCT_OPT       sbin;
dcl  ACCT_OPTP      redef ACCT_OPT ptr;
 
dcl  biggy          sbin constant init(262142);
 
%include   CP_6;
%include   FM$FIT;
%include   CP_6_SUBS;
%include   B$JIT_C;
 
dcl  B$JIT$      ptr symref readonly;
 
%B$JIT0 ;
%U$JIT1 ;
%M$JIT2X;
%F$JIT3X;
%S$JIT4X;
%J$JIT5X;
%A$JIT6X;
 
 
%FPT_FID(  FPTN        =  FPT_FID_CONST,    STCLASS=CONSTANT);
%FPT_FID(  FPTN        =  FPT_FID,          STCLASS="");
 
%FPT_GETDCB(  FPTN     =  FPT_GETDCB_CONST, STCLASS=CONSTANT);
%FPT_GETDCB(  FPTN     =  FPT_GETDCB,       STCLASS="");
 
%FPT_OPEN(    FPTN     =  FPT_OPEN_CONST,   STCLASS=CONSTANT,
              FUN      =  IN,
              TEST     =  YES,
              SCRUB    =  YES);
%FPT_OPEN(    FPTN     =  FPT_OPEN,         STCLASS="");
 
 
dcl  XB_RETURN_ORDINAL_RESULT         entry(1);
 
dcl  LEN                              sbin;
 
%VLP_ACCT(    FPTN     =  FACCT,            STCLASS="");
%VLP_NAME(    FPTN     =  FNAME,            STCLASS="",
              LEN      =  31);
%VLP_ACCT(    FPTN     =  FPASS,            STCLASS="");
%VLP_SN  (    FPTN     =  FSN,              STCLASS="");
%VLP_WSN (    FPTN     =  FWSN,             STCLASS="");
 
dcl  FPARAM(0:1023)                   sbin;
 
%F$DCB(STCLASS="BASED(DCB$)");
dcl  DCB$     ptr;
dcl  DCB#     sbin static init(0);   /* Allocate DCB once!   */
 
dcl  FIT$     ptr;
dcl  FFIT$    ptr;
%CODE04(BASED="BASED(FIT$)");
%CODE09(BASED="BASED(FIT$)");
%FM$FIT(BASED="BASED(FFIT$)");
dcl XSF$LOCCODP     entry(2) altret;
dcl XSF$LOCCODE     entry(2) altret;
dcl  MT             sbin;
 
/********************************************************************/
/*                      P R O C E D U R E                           */
/********************************************************************/
 
  if addr(ACCT) ~= addr(NIL)
     then ACCT = ' ';
  ACCT_OPTP  = addr(ACCTLIST);
  if (ACCT_OPT = bitbin('6014'O)) then ACCT_OPT = 0;
  FPT_FID    = FPT_FID_CONST;
  FPT_OPEN   = FPT_OPEN_CONST;
 
  FPT_FID.V_    = vector(FPT_FID.V);
  FPT_OPEN.V_   = vector(FPT_OPEN.V);
 
  call index(LEN,%BINASC(0),fid);
  FPT_FID.TEXTFID_ = vector( substr(fid,,LEN) );
  FPT_FID.WSN_     = vector( FWSN );
  FPT_FID.SN_      = vector( FSN  );
  FPT_FID.ACCT_    = vector( FACCT );
  FPT_FID.NAME_    = vector( FNAME );
  FPT_FID.PASS_    = vector( FPASS );
  FPT_FID.RES_     = vector( FPT_OPEN.V.RES# );
  FPT_FID.ASN_     = vector( FPT_OPEN.V.ASN# );
  call M$FID( FPT_FID )   altret(IOERR);
 
  if DCB# = 0 then do;
     FPT_GETDCB         = FPT_GETDCB_CONST;
     FPT_GETDCB.V_      = vector(FPT_GETDCB.V);
     FPT_GETDCB.DCBNUM_ = vector( FPT_OPEN.V.DCB# );
     call M$GETDCB( FPT_GETDCB ) altret(IOERR);
     DCB# = FPT_OPEN.V.DCB#;
     end;
  else FPT_OPEN.V.DCB# = DCB#;
 
  DCB$ = dcbaddr( FPT_OPEN.V.DCB# );
  FPT_OPEN.NAME_    = vector( FNAME );
  FPT_OPEN.ACCT_    = vector( FACCT );
  FPT_OPEN.WSN_     = vector( FWSN  );
  FPT_OPEN.SN_      = vector( FSN   );
  FPT_OPEN.PASS_    = vector( FPASS );
  FPT_OPEN.FPARAM_  = vector( FPARAM );
  call M$OPEN( FPT_OPEN )    altret(IOERR); /*  GET A DCB FIRST! */
 
  if addr(ACCT)~=addr(nil)
     then ACCT = F$DCB.ACCT#;
 
  MT = 9;
  FIT$ = addr(FPARAM);
  FFIT$ = addr(FPARAM);
  if ACCT_OPT ~= 0 then
  call XSF$LOCCODE(FIT$, MT) whenreturn do;
     MT = FM$FIT.CODES.NDW(MT);
     do while (MT >= sizew( CODE09 ) );
        if CODE09.ACCT='DONE' or CODE09.ACCT='?MSC'
           then goto got_me;
        if ACCT_OPT > 1 and CODE09.ACCT=B$JIT.ACCN
           then goto got_me;
        MT = MT - sizec( CODE09 );
        FIT$ = pincrc(FIT$, sizec( CODE09 ) );
        end;
     call XB_RETURN_ORDINAL_RESULT(0);
     end;
got_me:
  MT = -1;
  if ( substr(FNAME.NAME#,0,1) ~= '*' ) then MT = 1;
  FIT$ = addr(FPARAM);
  call XSF$LOCCODP(FIT$, 4) whenreturn do;
        MT = CODE04.MODIFY.TIME;
     end;
  call XB_RETURN_ORDINAL_RESULT( MT );
 
IOERR:
  call XB_RETURN_ORDINAL_RESULT(0);
 
end FID_MODTIME;
%EOD;
/*M*    GENRU          -- Generate a run-unit from running program */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
 
/*F*    NAME:          GENRU(char *, void *)
        PURPOSE:       To generate a run unit from the currently
                       running process.
        DESCRIPTION:
              YOU DON'T REALLY WANT TO KNOW!
*/
 
GENRU : proc(FILENAME,HEAPREF) altret;
 
/* *    NAME:          RUGEN
        PURPOSE:       To write out records into M$INIT that can
                       be used to initialize all of the data in
                       the current run-unit to their "current"
                       values.
 
        DESCRIPTION:   This subroutine reads the section-type records
                       of the current run-unit from the M$LM dcb and
                       locates the last word of static data in the
                       run-unit and writes all of the values of the
                       current static data into the file with the
                       current values.
*/
 
dcl  FILENAME       char(60);
dcl  HEAPREF        char(12);
dcl  HEAP$          ptr;
dcl  1  HEAP        redef HEAP$ aligned,
        2 OFFSET    bit(24),
        2 SEGID     bit(12);
 
%include CP_6;
%include B$OBJECT_C;
%include B_SEGIDS_C;
%include B_ERRORS_C;
%include CP_6_SUBS;
 
dcl M$INIT dcb;
dcl M$LM   dcb;
dcl B$TCB$ ptr symref readonly;
dcl BSD$   ptr based;
 
%FPT_WRITE( FPTN       = FPT_WRITE_C,
            STCLASS    = CONSTANT,
            DCB        = M$INIT,
            NEWKEY     = NO,
            KEY        = PROKEY);
 
%FPT_WRITE( FPTN       = FPT_WRITE,
            STCLASS    = "");
 
%FPT_CLOSE( FPTN       = FPT_CLOSE,
            STCLASS    = CONSTANT,
            DISP       = SAVE,
            DCB        = M$INIT);
 
%FPT_READ(  FPTN       = FPT_READ,
            STCLASS    = "");
 
%FPT_READ(  FPTN       = FPT_READ_C,
            DCB        = M$LM,
            KEYS       = YES,
            STCLASS    = CONSTANT);
 
%FPT_REW(   FPTN       = FPT_REWIND,
            DCB        = M$LM,
            STCLASS    = CONSTANT);
 
%FPT_GDS(   FPTN       = FPT_GDS_C,
            STCLASS     = CONSTANT,
            FREE       = NO,
            SEGSIZE    = 32768);
 
%FPT_GDS(   FPTN       = FPT_GDS,
            STCLASS    = "");
 
%VLP_VECTOR(FPTN       = SECT_VECTOR,
            STCLASS    = "");
 
%FPT_OPEN(  FPTN       = OPEN_IMAGE_C,
            STCLASS    = CONSTANT,
            ORG        = KEYED,
            FUN        = CREATE,
            EXIST      = NEWFILE,
            ACS        = DIRECT,
            ASN        = FILE,
            DCB        = M$INIT,
            DISP       = NAMED,
            IXTNSIZE   = 101,
            TYPE       = 'RM',
            REASSIGN   = NO,
            SCRUB      = YES);
 
%FPT_OPEN(  FPTN       = OPEN_IMAGE,
            STCLASS    = "");
 
%FPT_FID(   FPTN       = FPT_FID_C,
            STCLASS    = CONSTANT);
 
%FPT_FID(   FPTN       = FPT_FID,
            STCLASS    = "");
 
%VLP_NAME(  STCLASS    = "",    LEN=31);
%VLP_ACCT(  STCLASS    = ""  );
%VLP_PASS(  STCLASS    = ""  );
%VLP_SN(    STCLASS    = ""  );
%VLR_FID(   STCLASS    = ""  );
 
%F$DCB(     STCLASS    = "BASED(DCB$)");
%B$TCB;
%B$ALT;
%B$EXCFR;
%B$FLT;
 
%B$SECTIONSUBS;
%B$RECORDSUBS;
 
 
%B$RUSECT;
%B$RUBIRTH(   STCLASS  = STATIC);
%B$RUKEY(     NAME     = SECTKEY_C,
              TYPEINIT = "(%TYPSECT)",
              STCLASS  = CONSTANT);
 
%B$RUKEY(     NAME     = PROKEY,
              STCLASS  = CONSTANT);
 
%B$RUKEY(     NAME     = SECTKEY,
              STCLASS  = "");
 
%B$RUHEADKEY( NAME     = HEADKEY_C,
              STCLASS  = CONSTANT);
 
%B$HEAD(      NAME     = B$HEAD,
              STCLASS  = "");
 
%VLP_NAME(    FPTN     = BIRTHKEY,
              STCLASS  = CONSTANT,
              NAME     = 'BIRTH');
 
dcl  DataSects(0:7)    sbin constant init( 1,0, 1, 1, 1,0*0);
/***  Indicates section types that are data ****/
 
dcl FILE$              ptr;
 
dcl RESIDUE            sbin;    /* Number of words on last page */
dcl PAGECOUNT          sbin;    /* Number of full pages to init  */
dcl I                  sbin;
dcl J                  sbin;
dcl ADR                sbin;
dcl OFS                sbin;
dcl PAGE               char(4096) based(PAGE$);
dcl PAGE$              ptr;
dcl PD$                ptr;
dcl PE$                ptr;
dcl CREATE_UTS         sbin;
dcl 1 STATIC#          constant,
      2   *            ubin(18) haligned init(0),
      2   *            bit(6)   unal     init('0'B),
      2   *            bit(12)  unal     init(%ISSID);
dcl STATIC$            redef STATIC#     ptr;
dcl SBIN_BASED         sbin based aligned;
dcl WORD#(0:0)         sbin based aligned;
dcl PTR_BASED          ptr based;
dcl DCB$               ptr;
 
%EQU RU_WRITTEN_INIT   = 314159265;
%EQU RU_WRITTEN_DONE   = 2718285;
dcl RU_WRITTEN         sbin  static symdef init(%RU_WRITTEN_INIT);
dcl MAKE_ONLINE_MAGIC  sbin  static symdef init(%RU_WRITTEN_INIT);
dcl 1  MAKE_HEAPDEFN   static symdef,
        2  NWORDS      sbin  init(0),
        2  PTR$        ptr   init( addr(nil) );
 
 
dcl  1  RURANGE        aligned static,
     2  MIND           sbin  init(262144),
     2  MAXD           sbin  init(0);
 
dcl  XBI$STRLEN        entry(2);
dcl  SEGSIZE           entry(2);
dcl  C_RESTART         entry(0);
 
dcl  RESTART_EPTR      EPTR CONSTANT SYMDEF INIT( ENTADDR(C_RESTART) );
dcl  1  RESTART        redef RESTART_EPTR,
        2  ISADDR      ubin(18) haligned,
        2  *           ubin(18) haligned;
 
/********************************************************************/
/****                    P R O C E D U R E                       ****/
/********************************************************************/
 
   HEAP$ = addr(HEAPREF);
   call SETUP_FPTS;
   call M$OPEN(OPEN_IMAGE);
   if RU_WRITTEN = %RU_WRITTEN_INIT
     then call COPY_M$LM;
 
   if (RURANGE.MAXD = 0) then do;
      FPT_GDS.RESULTS_  = vector(SECT_VECTOR);
      call M$GDS(FPT_GDS) whenaltreturn do; ; end;
      PAGE$             = SECT_VECTOR.PTR$;
      PD$               = PAGE$;
      SECTKEY           = SECTKEY_C;
      SECTKEY.NODE      = 0;
      SECTKEY.PAGE      = 0;
      FPT_READ.BUF_     = SECT_VECTOR;
 
      call M$READ(FPT_READ);
 
      PD$ = PAGE$;
      PE$ = addr(nil);
 
/**
 **  Locate last data word to write...
 **/
      do while DataSects( PAGE$->B$RUSECT.TYPE ) > 0;
        PE$ = PAGE$;
        PAGE$ = pincrw( PAGE$,sizew(B$RUSECT) );
      end;
 
      RURANGE.MIND = PD$->B$RUSECT.ADDRESS / 1024 * 1024;
      RURANGE.MAXD = PE$->B$RUSECT.ADDRESS + PE$->B$RUSECT.SIZE;
 
   end;
 
/**
 **  Write Heap first (so our static hea info is saved)
 **/
 
   if (HEAP$ ~= addr(nil)) then do;
      SECTKEY               = PROKEY;
      HEAP.OFFSET           = '0'b;
      SECTKEY.NODE          = 0;
      SECTKEY.DATASEG.SEGID = HEAP.SEGID;
      SECTKEY.ISADDR        = 0;
      PAGE$                 = HEAP$;
      call SEGSIZE(HEAPREF, PAGECOUNT);
      MAKE_HEAPDEFN.NWORDS = PAGECOUNT / 4;
      MAKE_HEAPDEFN.PTR$   = PAGE$;
      PAGECOUNT = PAGECOUNT / 4096;
 
      do I = 0 to PAGECOUNT-1;
         FPT_WRITE.BUF_ = vector(PAGE);
         call M$WRITE(FPT_WRITE);
         PAGE$ = pincrw(PAGE$,1024);
         SECTKEY.ISADDR = SECTKEY.ISADDR + 1024;
      end;
   end;
 
   PAGECOUNT     = (RURANGE.MAXD + 1023)/1024 - 1;
   SECTKEY       = PROKEY;
   SECTKEY.NODE  = 0;
   SECTKEY.ISADDR= 0;
   PAGE$         = STATIC$;
 
   do I = 0 to PAGECOUNT - 1;
      FPT_WRITE.BUF_ = VECTOR(PAGE);
      call M$WRITE(FPT_WRITE);
      PAGE$          = PINCRW(PAGE$,1024);
      SECTKEY.ISADDR = SECTKEY.ISADDR + 1024;
      end;
 
   RESIDUE        = mod(RURANGE.MAXD, 1024);
   if RESIDUE ~= 0 then do;
      I = RESIDUE * 4;
      FPT_WRITE.BUF_ = VECTOR( substr(PAGE,,I) );
      call M$WRITE( FPT_WRITE );
      end;
 
      call M$CLOSE(FPT_CLOSE);
      call M$EXIT;
  /*N* NOTE: This will only work if there is no (important)
       initialized data in the run-unit already (we overwrite
       the old initialization records                         */
 
 
 
GENRU_HEAP:   entry;
 
   if MAKE_HEAPDEFN.NWORDS = 0
      then return;
   call SETUP_FPTS;
   SECT_VECTOR       = vector(nil);
   SECT_VECTOR.PTR$      = MAKE_HEAPDEFN.PTR$;
   FPT_GDS.V.SEGSIZE#    = MAKE_HEAPDEFN.NWORDS;
   call M$GDS(FPT_GDS) whenaltreturn do; ; end;
 
   SECTKEY               = PROKEY;
   HEAP$                 = MAKE_HEAPDEFN.PTR$;
   SECTKEY.NODE          = 0;
   SECTKEY.DATASEG.SEGID = HEAP.SEGID;
   SECTKEY.ISADDR        = 0;
   PAGE$                 = MAKE_HEAPDEFN.PTR$;
   FPT_READ.KEY_         = vector( SECTKEY );
   PAGECOUNT             = MAKE_HEAPDEFN.NWORDS / 1024;
 
   do I = 0 to PAGECOUNT-1;
     FPT_READ.BUF_       = vector( PAGE );
     call M$READ(FPT_READ);
     PAGE$               = pincrw(PAGE$, 1024);
     SECTKEY.ISADDR       = SECTKEY.ISADDR + 1024;
   end;
 
   return;
 
COPY_M$LM: proc altret;
 
dcl BUFFER    char(4096);
dcl RTYPE     sbin;
 
 
   call M$REW(FPT_REWIND);
   DCB$  = dcbaddr( dcbnum(M$LM) );
   FPT_READ.BUF_ = vector(BUFFER);
   FPT_READ.V.KEYS# = '0'b;
   FPT_READ.V.KEYR# = '1'b;
   FPT_READ.KEY_    = vector(SECTKEY);
   FPT_WRITE.V.ONEWKEY# = '1'b;
   FPT_WRITE.KEY_   = vector(SECTKEY);
RU_LOOP:
   do while('1'b);
      call M$READ(FPT_READ) whenreturn do;
         FPT_WRITE.V.DVBYTE.CONT# = '0'b;
         FPT_READ.V.DVBYTE.CONT#  = '0'b;
         end;
      whenaltreturn do;
         if B$TCB$->BSD$->B$ALT.ERR.CODE = %E$LD then do;
            FPT_WRITE.V.DVBYTE.CONT# = '1'b;
            FPT_READ.V.DVBYTE.CONT#  = '1'b;
            end;
         else exit RU_LOOP;
         end;
      RTYPE = SECTKEY.TYPE;
      if RTYPE < 10 then do;
         FPT_WRITE.V.DVBYTE.CONT# = '0'b;
         FPT_READ.V.DVBYTE.CONT#  = '0'b;
         goto RU_LOOP;
         end;
      else if RTYPE > 72 then exit RU_LOOP;
      FPT_WRITE.BUF_ = vector( substr(buffer,,F$DCB.ARS#) );
      call M$WRITE(FPT_WRITE) whenaltreturn do;
         exit RU_LOOP;
         end;
      end RU_LOOP;
/**RU_WRITTEN = 271828;      *****/
   FPT_READ.V.KEYS# = '1'B;
   FPT_READ.V.KEYR# = '0'B;
   FPT_READ.KEY_    = vector(HEADKEY_C);
   FPT_WRITE.KEY_   = vector(HEADKEY_C);
   FPT_READ.BUF_    = vector(B$HEAD);
   FPT_WRITE.BUF_   = vector(B$HEAD);
   call M$READ(FPT_READ);
   B$HEAD.START     = RESTART.ISADDR;
   call M$WRITE(FPT_WRITE);
   FPT_WRITE.KEY_   = vector(SECTKEY);
   FPT_READ.KEY_    = vector(SECTKEY);
 
end COPY_M$LM;
 
 
 
SETUP_FPTS: proc;
 
   OPEN_IMAGE        = OPEN_IMAGE_C;
   OPEN_IMAGE.V_     = vector(OPEN_IMAGE.V);
   FPT_FID           = FPT_FID_C;
   FPT_FID.V_        = vector(FPT_FID.V);
   FPT_FID.RESULTS_  = vector(VLR_FID);
   FPT_FID.NAME_     = vector(VLP_NAME);
   FPT_FID.ACCT_     = vector(VLP_ACCT);
   FPT_FID.PASS_     = vector(VLP_PASS);
   FPT_FID.SN_       = vector(VLP_SN);
   FPT_FID.ASN_      = vector(OPEN_IMAGE.V.ASN#);
   if addr(FILENAME) ~= addr(nil) then do;
      call XBI$STRLEN(FILENAME, I);
      FPT_FID.TEXTFID_  = vector(substr(FILENAME,,I));
      call M$FID(FPT_FID);
      end;
   else I = 0;
   OPEN_IMAGE.NAME_  = vector(VLP_NAME);
   OPEN_IMAGE.ACCT_  = vector(VLP_ACCT);
   OPEN_IMAGE.PASS_  = vector(VLP_PASS);
   OPEN_IMAGE.SN_    = vector(VLP_SN);
   FPT_READ          = FPT_READ_C;
   FPT_READ.V_       = vector(FPT_READ.V);
   FPT_READ.KEY_     = vector(SECTKEY);
   FPT_WRITE         = FPT_WRITE_C;
   FPT_WRITE.V_      = vector(FPT_WRITE.V);
   FPT_WRITE.KEY_    = vector(SECTKEY);
   SECT_VECTOR       = '0'b;
   SECTKEY           = SECTKEY_C;
   FPT_GDS           = FPT_GDS_C;
   FPT_GDS.V_        = vector(FPT_GDS.V);
   FPT_GDS.RESULTS_  = vector( SECT_VECTOR );
   SECT_VECTOR       = '0'b;
 
end SETUP_FPTS;
end GENRU;
