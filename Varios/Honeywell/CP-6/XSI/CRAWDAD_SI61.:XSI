/*M* X$CRAWDAD - CReator of Alternate Ways to Display and Analyze Data */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X*MCL=0,MOC,MEC,CLM=12,EXM=12,CRT=6,DMR,PLM=3,IND=3,ENU=0,DCI=3,CSU=3,ECU=3,THI=0,DTI=0*/
X$CRAWDAD: PROC MAIN;
            /* INCLUDES:*/
%INCLUDE B$JIT;
%INCLUDE B_MICROPS_C;
%INCLUDE CP_6;
%INCLUDE CP_6_SUBS;
%INCLUDE XU_MACRO_C;
%INCLUDE XU_SUBS_C;
%INCLUDE XU_PERR_C;
%INCLUDE XUX$INTERFACE_M;
%INCLUDE ZQ$INTERFACE_M;
            /* BASED DATA */
%B$TCB(STCLASS="BASED(B$TCB$)");
%B$ALT;
%PARSE$OUT;
%PARSE$SYM;
%F$DCB;
DCL CHAR1 BASED(BLK$) CHAR(1);
DCL DATA UBIN BASED ALIGNED;
DCL CHARJ BASED CHAR(J);
            /* STATIC AND CONSTANT DATA */
DCL 1 TEXT STATIC CHAR(120) INIT(' ');
%P_PCB(R=OPTIONS);
%FPT_READ (DCB=M$NS, BUF=ZQ$NS_BUFFER);
%FPT_WRITE(FPTN=LOFPT,DCB=M$LO,BUF=TEXT);
%FPT_READ (FPTN=READ_LIST, DCB=M$LIST, BUF=ZQ$LS_BUFFER);
%FPT_READ (FPTN=READ_DIAG, DCB=M$DIAG, BUF=ZQ$DIAG_BUFFER);
%FPT_WRITE (FPTN=WRITE_LS, DCB=M$LO, BUF=LS_BUFFER, VFC=YES, STCLASS=CONSTANT);
%FPT_WRITE (FPTN=WRITE_DO, DCB=M$DO, BUF=LS_BUFFER, VFC=YES, STCLASS=CONSTANT);
%FPT_WRITE (FPTN=WRITE_BLANK, DCB=M$LO, BUF=ONE_BLANK, STCLASS=CONSTANT);
%FPT_WRITE (FPTN=WRITE_SLT,DCB=M$ME,VFC=YES,BUF=SALUTATION,STCLASS=CONSTANT);
%FPT_REW (FPTN=REWIND_PP_FILE);
%FPT_OPEN (FPTN=OUOPN, DCB=M$LO, FUN=CREATE, ACS=DIRECT);
%FPT_WRITE (FPTN=OUWRITE, DCB=M$OU, KEY=OUKEY);
DCL 1 OUKEY STATIC,
      2 L UBIN BYTE UNAL,
      2 C(0:38) CHAR(1),
      2 T REDEF C CHAR(39);
%FPT_PFIL (FPTN=FRSKEY,DCB=M$SI,BOF=YES,STCLASS=CONSTANT);
%FPT_READ (FPTN=EDITRED,DCB=M$SI,KEYR=YES,KEY=OUKEY);
%FPT_PROMPT (FPTN=CRAWDAD_PROMPT,DCB=M$ME,VFC=YES,PROMPT=CRAWPRM,STCLASS=CONSTANT);
DCL CRAWPRM CHAR(0) CONSTANT INIT(%CONCAT(BITASC('036'O),'Crawdad:'));
%FPT_PROMPT (FPTN=FMT_PROMPT, DCB=M$ME, VFC=YES);
%FPT_READ (FPTN=REREAD,DCB=M$ME,REREAD=YES);
%FPT_READ (FPTN=README,DCB=M$ME,BUF=TEXT,STCLASS=CONSTANT);
%FPT_DELREC (FPTN=EDITDEL,DCB=M$SI,KEY=OUKEY,STCLASS=CONSTANT);
%FPT_CLOSE(FPTN=OUCLS,DCB=M$OU,DISP=SAVE);
%FPT_CLOSE (FPTN=CLOSE_LIST, DCB=M$LIST, DISP=SAVE, STCLASS=CONSTANT);
%FPT_CLOSE (FPTN=CLOSE_DIAG, DCB=M$DIAG, DISP=SAVE, STCLASS=CONSTANT);
%FPT_CLOSE (FPTN=CLOSE_NS, DCB=M$NS, DISP=SAVE, STCLASS=CONSTANT);
%FPT_GDS(FPTN=WORKFPT,STCLASS="STATIC SYMDEF",RESULTS=WORK_,SEGSIZE=1024);
%FPT_ERRMSG(FPTN=EFPT,CODE=ERCODE,BUF=TEXT);
%FPT_CORRES(FPTN=CORR,DCB1=M$LO,DCB2=M$DO,STCLASS=CONSTANT);
%FPT_DEVICE(FPTN=TOPAGE,DCB=M$LO,HDR=LOHDR);
%VLP_HDR(FPTN=LOHDR,HEADERHEIGHT=2,LEN=109,RESETPAGE=YES);
%FPT_TIME(FPTN=HTIM,DATE=TITL.DAT,TIME=TITL.TIM);
%FPT_EXIT(FPTN=ERRXIT,STCLASS=CONSTANT,STEPCC=ERROR);
%FPT_FID (RESULTS=VLR_FID);
%VLR_FID;
%XUU_PARAM (FPTN=OPEN_FILES, STCLASS=STATIC, BASE=YES, DCB="DCBNUM(M$LO)",
            BLANK_FILL=YES);
%XUU_PARAM (FPTN=CLOSE_FILES, STCLASS=STATIC, CLOSE_ALL=YES);
%ZQ$PREPROC_PARAM (NAME=PREPROC, STCLASS=STATIC);
%ZQ$RECNO (NAME=CRAWDAD$RECNO, STCLASS=STATIC SYMDEF);
%ZQ$INPUT_KEY (NAME=CRAWDAD$INPUT_KEY, STCLASS=STATIC SYMDEF);
%ZQ$NS_BUFFER (STCLASS=STATIC);
%ZQ$LS_BUFFER (STCLASS=STATIC);
%ZQ$LS_BUFFER (NAME=ZQ$DIAG_BUFFER, STCLASS=STATIC);
DCL 1 B_VERSION SYMREF,
      2 LEN UBIN BYTE CALIGNED,
      2 TEXT CHAR (B_VERSION.LEN);
DCL 1 TITL STATIC,
      2 * CHAR (0) INIT ('CRAWDAD version '),
      2 VERS CHAR (4) INIT ('A000'),
      2 * CHAR (1) INIT (' '),
      2 HDR CHAR (20) INIT ('Source listing'),
      2 TIM CHAR(12)INIT(' '),
      2 DAT CHAR(11)INIT(' '),
      2 FILE CHAR(31) INIT('this rather bogus module');
DCL TITC REDEF TITL CHAR (95);
DCL 1 LS_BUFFER STATIC,
      2 VFC CHAR (1) INIT(BINASC(0)),
      2 PRINT_BUFFER CHAR (132);
DCL 1 SALUTATION STATIC,
      2 * BIT(9) INIT('037'O),
      2 * CHAR (0) INIT ('CRAWDAD version '),
      2 VERS CHAR (4),
      2 * CHAR (0) INIT (' here at '),
      2 TIM CHAR (12),
      2 DAT CHAR (12);
DCL 1 WORK_ DALIGNED STATIC,
      2 SIZE UBIN(18) INIT(0),
      2 FIRST$ PTR INIT(ADDR(NIL));
DCL WIDTH STATIC UBIN INIT(108);
DCL TAB# STATIC UBIN INIT(10);
DCL ERROR_COUNT UBIN STATIC SYMDEF INIT(0);
DCL BC (0:99) BIT (1) STATIC INIT ('1'B * 0);
DCL TOTAL_ERRORS SBIN STATIC INIT(0);
DCL RECSIZE SBIN STATIC INIT(1900);
DCL NMAX SBIN STATIC INIT(1024);
DCL ECU SBIN STATIC INIT(0);
DCL HIGHEST_BC SBIN STATIC INIT (99999);
DCL FATAL_ERROR BIT(1) STATIC INIT (%NO#);
DCL ERRVEC(0:3) BIT(72) CONSTANT INIT(
VECTOR(PREPERR),VECTOR(TEXT),
VECTOR(SYNMSG),VECTOR(CNTMSG));
DCL PREPERR CONSTANT CHAR(0)INIT(
' *** Preprocessor error(s)');
DCL 1 CNTMSG STATIC,
      2 ASTS CHAR (5),
      2 CNT CHAR(6),
      2 * CHAR(6) INIT(' error'),
      2 ERWORD CHAR(2) INIT('s,'),
      2 DEFS CHAR(4) INIT('  no'),
      2 * CHAR(0) INIT(' Format Definition'),
      2 INWORD CHAR(5) INIT('s in '),
      2 MODNAME CHAR (31);
DCL CNTMSGC REDEF CNTMSG CHAR(77);
DCL 1 SYNMSG STATIC,
      2 * CHAR(1) INIT(' '),
      2 SYN CHAR(6) INIT('Syntax'),
      2 * CHAR(0) INIT(' error at '),
      2 AT CHAR(3)INIT('<*>'),
      2 * CHAR(0)INIT(' in: '),
      2 TXT CHAR(20);
DCL ONE_BLANK CHAR (1) CONSTANT INIT (' ');
DCL 1 PP STATIC,
      2 CSYS BIT(36) INIT('0'B),
      2 LS BIT(36) INIT('1'B),
      2 SYS BIT(36) INIT('0'B),
      2 SO BIT(36) INIT('0'B),
      2 UI BIT(36) INIT('0'B),
      2 OU BIT(36)INIT('1'B),
      2 MA BIT (36) INIT ('0'B),
      2 XR BIT (36) INIT ('0'B),
      2 LO BIT(36)INIT('0'B),
      2 EDIT BIT(36) INIT ('0'B),
      2 NDELTA BIT(36) INIT ('0'B),
      2 OPTUI BIT(36) INIT ('0'B),
      2 LU BIT (36) INIT ('0'B),
      2 SCHEMA BIT(36) INIT ('1'B),
      2 AREA_REF BIT (36) INIT ('0'B);
DCL OPTS (0:14) REDEF PP BIT (36);
DCL ABORT UBIN STATIC INIT(0);
DCL 1 ERCODE REDEF ABORT,
      2 * BIT(33),2 SEV UBIN(3)UNAL;
%XUX$SRCH_LIST;
DCL SYMCHARS CHAR(0) CONSTANT INIT('1234567890QWERTYUIOPASDFGHJKLZXCVBNM$@#_');
            /* EXTERNAL ITEMS */
DCL X$PARSE ENTRY(1) ALTRET;
DCL XUU$OPEN ENTRY (1) ALTRET;
DCL XUU$CLOSE ENTRY (1) ALTRET;
DCL X$CRAWDAD_PREPROC_ERROR ENTRY (11);
DCL X$CRAWDAD_MON_ERROR ENTRY (4);
DCL ZQC$PREP ENTRY (1) ALTRET;
DCL OPTIONS UBIN SYMREF;
DCL CRAWDAD_CMD UBIN SYMREF;
%M$DCB (DCBN=M$NS, ASN=FILE, ORG=CONSEC, FUN=CREATE, DISP=SCRATCH);
%M$DCB (DCBN=M$LIST, ASN=FILE, ORG=CONSEC, FUN=CREATE, DISP=SCRATCH);
%M$DCB (DCBN=M$DIAG, ASN=FILE, ORG=CONSEC, FUN=CREATE, DISP=SCRATCH);
%M$DCB (DCBN=M$LO, ASN=DEVICE, RES='LO', ORG=UR);
DCL M$DO DCB;
DCL M$OU DCB;
DCL M$SI DCB;
DCL M$UI DCB;
DCL M$MAC DCB;
DCL M$SYSTEM DCB;
DCL M$ME DCB;
DCL B$JIT$ PTR SYMREF;
DCL B$TCB$ PTR SYMREF;
            /* AUTO */
DCL BLK$ PTR;
DCL C SBIN;
DCL I SBIN;
DCL J SBIN;
DCL K SBIN;
DCL DEF_COUNT SBIN;
DCL IN_COMMENT BIT(1);
DCL LAST_LINE_WAS_DIAGNOSTIC BIT(1);
DCL PREPROCESSOR_ABORT BIT (1);
DCL SOMETHING_WRITTEN BIT (1);
DCL CTEMP CHAR (6);
DCL TRASH_NAME CHAR (31);
%EJECT;
   CALL M$OPEN(OUOPN)ALTRET(MONERR);
   XUX$SRCH_LIST.NUM=0;
   OUOPN.V.DCB#=DCBNUM(M$OU);
   CALL M$GDS(WORKFPT)ALTRET(MONERR);
   P_PCB.WORK$=WORK_.FIRST$;
   OUWRITE.BUF_.BUF$=WORK_.FIRST$;
   P_PCB.WKSZ=WORK_.SIZE+1;
   PP.UI=B$JIT.PRFLAGS.UI;
   PP.OU=B$JIT.PRFLAGS.OUTPUT;
   PP.LS=B$JIT.PRFLAGS.LS;
   P_PCB.TEXT$=ADDR(SUBSTR(B$JIT.CCBUF,B$JIT.CCDISP));
   P_PCB.NCHARS=B$JIT.CCARS-B$JIT.CCDISP;
   IF P_PCB.NCHARS~=0 THEN CALL X$PARSE(P_PCB)ALTRET(PARSERR);
   BLK$=P_PCB.OUT$;
   IF BLK$~=ADDR(NIL) THEN DO I=0 TO OUT$BLK.NSUBLKS-1;
      P_PCB.ERROR='1'B;
NXTOPT: J=OUT$BLK.SUBLK$(I)->OUT$BLK.CODE;
      DO CASE(J);
      CASE(0); /*NO*/
         P_PCB.ERROR='0'B;
         I=I+1;
         GOTO NXTOPT;
      CASE(ELSE);
         OPTS(J-5)=P_PCB.ERROR;
      CASE(4); /* NMAX */
         CALL CHARBIN(NMAX, OUT$BLK.SUBLK$(I)->OUT$BLK.SUBLK$(0)->OUT$SYM.TEXT);
      CASE(3); /* RECSIZE */
         CALL CHARBIN(RECSIZE,
           OUT$BLK.SUBLK$(I)->OUT$BLK.SUBLK$(0)->OUT$SYM.TEXT);
      CASE (2); /* BC */
         BC='0'B;
         HIGHEST_BC=-1;
         DO J=0 TO OUT$BLK.SUBLK$(I) -> OUT$BLK.NSUBLKS-1;
            CALL CHARBIN (C, OUT$BLK.SUBLK$(I) -> OUT$BLK.SUBLK$(J) ->
              OUT$SYM.TEXT);
            BC(C)='1'B;
            HIGHEST_BC=MAXIMUM(HIGHEST_BC, C);
            END;
      CASE(1); /*SRCH*/
         DO J=0 TO OUT$BLK.SUBLK$(I)->OUT$BLK.NSUBLKS-1;
            P_PCB.HI_CHAR=OUT$BLK.SUBLK$(I)->
              OUT$BLK.SUBLK$(J)->OUT$BLK.CPOS;
            IF J=7 THEN GOTO SYNERR;
            FPT_FID.TEXTFID_=VECTOR(OUT$BLK.SUBLK$(I)->
              OUT$BLK.SUBLK$(J)->OUT$SYM.TEXT);
            FPT_FID.NAME_=VECTOR(TRASH_NAME);
            FPT_FID.ACCT_=VECTOR(XUX$SRCH_LIST.ACCT_LIST.ACCT(J));
            FPT_FID.PASS_=VECTOR(XUX$SRCH_LIST.ACCT_LIST.PASS(J));
            FPT_FID.SN_=VECTOR(XUX$SRCH_LIST.ACCT_LIST.SN(J));
            FPT_FID.WSN_=VECTOR(XUX$SRCH_LIST.ACCT_LIST.WSN(J));
            FPT_FID.ASN_=VECTOR(XUX$SRCH_LIST.ACCT_LIST.ASN(J));
            FPT_FID.RES_=VECTOR(XUX$SRCH_LIST.ACCT_LIST.RES(J));
            CALL M$FID (FPT_FID) ALTRET (MONERR);
            END;
         XUX$SRCH_LIST.NUM=J;
      END;  /* DO CASE */
      END;  /* DO INDEX */
   ELSE IF NOT PP.UI OR NOT DCBADDR(DCBNUM(M$OU))->F$DCB.AMR# OR NOT PP.LS
      THEN PP.EDIT='1'B; /* Any option disables EDIT mode */
   P_PCB.TEXT$=ADDR(TEXT);
   P_PCB.NCHARS=SIZEC(TEXT);
   IF NMAX=0 THEN RECSIZE=RECSIZE-4;
   XUX$SRCH_LIST.ACCT_LIST.ACCT(XUX$SRCH_LIST.NUM)=B$JIT.FACCN;
   XUX$SRCH_LIST.ACCT_LIST.PASS(XUX$SRCH_LIST.NUM)=' ';
   XUX$SRCH_LIST.ACCT_LIST.SN(XUX$SRCH_LIST.NUM)=' ';
   XUX$SRCH_LIST.ACCT_LIST.WSN(XUX$SRCH_LIST.NUM)=' ';
   XUX$SRCH_LIST.ACCT_LIST.ASN(XUX$SRCH_LIST.NUM)=%FILE#;
   XUX$SRCH_LIST.ACCT_LIST.RES(XUX$SRCH_LIST.NUM)=' ';
   XUX$SRCH_LIST.ACCT_LIST(XUX$SRCH_LIST.NUM+1)=XUX$SRCH_LIST.ACCT_LIST(XUX$SRCH_LIST.NUM);
   XUX$SRCH_LIST.ACCT_LIST.ACCT(XUX$SRCH_LIST.NUM+1)=':LIBRARY';
   XUX$SRCH_LIST.NUM=XUX$SRCH_LIST.NUM+2;
   XUX$SRCH_LIST.RCVD=XUX$SRCH_LIST.NUM;
   IF PP.OPTUI
   THEN DO;
      OPEN_FILES.FLAGS.UP_DATE#='1'B;
      OPEN_FILES.FLAGS.OPT_UI#='1'B;
      END;
   ELSE DO;
      OPEN_FILES.FLAGS.UP_DATE#=PP.UI;
      END;
   OPEN_FILES.FLAGS.LU_WHILE#=PP.LU;
   CALL M$TIME(HTIM);
   SALUTATION.VERS=B_VERSION.TEXT;
   SALUTATION.TIM=TITL.TIM;
   SALUTATION.DAT=TITL.DAT;
   CALL M$WRITE (WRITE_SLT) ALTRET (IGNORE_SALUTATION_ALTRET);
IGNORE_SALUTATION_ALTRET:
   CALL XUU$OPEN (OPEN_FILES) ALTRET (XUU_ERROR);
   BLK$=DCBADDR(DCBNUM(M$SI));
   IF BLK$->F$DCB.TYPE#='Dd' AND BLK$->F$DCB.ORG#=%KEYED#
     AND PP.EDIT THEN GOTO EDIT_MODE;
   IF (PP.LU OR PP.LS) AND B$JIT.PRFLAGS.LIST THEN TOPAGE.V.PAGE#='1'B;
   WIDTH=DCBADDR(LOFPT.V.DCB#)->F$DCB.WIDTH#;
   IF WIDTH=0 OR WIDTH>109 THEN WIDTH=109;
   OUOPN.V.TYPE#='Dd';
   OUOPN.V.ORG#=%KEYED#;
   OUOPN.V.SETDCB#=%YES#;
   CALL M$OPEN (OUOPN);
   PREPROC.DO_NOT_PREPROCESS='0'B;
   PREPROC.CREATE_SYS_FILE=PP.CSYS;
   PREPROC.NO_SYS_FILE=~PP.SYS;
   PREPROC.LIST_SOURCE='1'B;
   PREPROC.LIST_UPDATES=PP.LU;
   PREPROC.SOURCE_OUTPUT=PP.SO;
   PREPROC.LIST_PREPROC_SOURCE='0'B;
   PREPROC.USE_STANDARD_CHAR_SET='0'B;
   PREPROC.FORMAT='0'B;
   PREPROC.M$SO#=DCBNUM(NIL);
   PREPROC.M$LIST#=DCBNUM(M$LIST);
   PREPROC.M$LU#=DCBNUM(NIL);
   PREPROC.M$NS#=DCBNUM(M$NS);
   PREPROC.M$MAC#=DCBNUM(M$MAC);
   PREPROC.M$SYSTEM#=DCBNUM(M$SYSTEM);
   PREPROC.RECNO$=ADDR(CRAWDAD$RECNO);
   PREPROC.INPUT_KEY$=ADDR (CRAWDAD$INPUT_KEY);
   PREPROC.ALT_FID$=ADDR(XUX$SRCH_LIST);
   PREPROC.PREP_ERR$$=ENTADDR(X$CRAWDAD_PREPROC_ERROR);
   PREPROC.MONITOR_ERR$$=ENTADDR(X$CRAWDAD_MON_ERROR);
   PREPROC.WIDTH=WIDTH;
   IF NOT PP.LS THEN PREPROC.WIDTH=109;
   TITL.FILE=DCBADDR(OUOPN.V.DCB#)->F$DCB.NAME#.C;
   TITL.VERS=B_VERSION.TEXT;
   CALL INSERT(LOHDR.TITL.TITLE#,0,SIZEC(TITL),TITC);
   LOHDR.TITL.L#=WIDTH;
   LOHDR.CTL.COUNT#=WIDTH-4;
   IF TOPAGE.V.PAGE# THEN CALL M$DEVICE (TOPAGE);
   LOHDR.CTL.RESETPAGE#='0'B;
PROCESS_ECU:
   ECU=ECU+1;
   PREPROC.DO_NOT_PREPROCESS=~ BC(ECU);
   CALL ZQC$PREP (PREPROC)
   WHENRETURN DO;
      PREPROCESSOR_ABORT='0'B;
      END;
   WHENALTRETURN DO;
      PREPROCESSOR_ABORT='1'B;
      END;
   IF NOT BC(ECU)
   THEN
      IF PREPROC.END_OF_SOURCE
      THEN
         GOTO WRAP_IT_UP;
      ELSE
         GOTO PROCESS_ECU;
   REWIND_PP_FILE.V.DCB#=DCBNUM(M$NS);
   CALL M$REW (REWIND_PP_FILE) ALTRET (MONERR);
   IF TOPAGE.V.PAGE#
   THEN
      CALL M$DEVICE (TOPAGE);
   IF DCBADDR(DCBNUM(M$LIST)) -> F$DCB.FCD#
   THEN DO;
      REWIND_PP_FILE.V.DCB#=DCBNUM(M$LIST);
      CALL M$REW (REWIND_PP_FILE) ALTRET (MONERR);
      ZQ$LS_BUFFER='0'B;
      ZQ$LS_BUFFER.PRINT_BUFFER=' ';
      CALL M$READ (READ_LIST)
      WHENALTRETURN DO;
         CALL M$CLOSE (CLOSE_LIST) ALTRET (MONERR);
         END;
      END;
   IF DCBADDR(DCBNUM(M$DIAG)) -> F$DCB.FCD#
   THEN DO;
      REWIND_PP_FILE.V.DCB#=DCBNUM(M$DIAG);
      CALL M$REW (REWIND_PP_FILE) ALTRET (MONERR);
      ZQ$DIAG_BUFFER='0'B;
      ZQ$DIAG_BUFFER.PRINT_BUFFER=' ';
      CALL M$READ (READ_DIAG)
      WHENALTRETURN DO;
         CALL M$CLOSE (CLOSE_DIAG) ALTRET (MONERR);
         END;
      END;
   DEF_COUNT=0;
   IN_COMMENT='0'B;
   LAST_LINE_WAS_DIAGNOSTIC='0'B;
NEXT:;
   BLK$=PINCRW(WORK_.FIRST$,1);
   C=-1;
   OUKEY='0'B;
   K=0;
CONTINUE:
   I=I+1;
   ZQ$NS_BUFFER.TEXT=' ';
   CALL M$READ (FPT_READ)
   WHENALTRETURN DO;
      ZQ$NS_BUFFER.RECNO=BITBIN('777777'O);
      ZQ$NS_BUFFER.TEXT=TEXT;
      END;
   TEXT=ZQ$NS_BUFFER.TEXT;
   DO UNTIL NOT SOMETHING_WRITTEN;
      SOMETHING_WRITTEN='0'B;
      DO WHILE DCBADDR(DCBNUM(M$LIST)) -> F$DCB.FCD# AND
        ZQ$LS_BUFFER.RECNO <= ZQ$NS_BUFFER.RECNO AND
        (NOT DCBADDR(DCBNUM(M$DIAG)) -> F$DCB.FCD# OR
        ZQ$LS_BUFFER.RECNO <= ZQ$DIAG_BUFFER.RECNO);
         LS_BUFFER.VFC=BITASC (ZQ$LS_BUFFER.VFC);
         LS_BUFFER.PRINT_BUFFER=ZQ$LS_BUFFER.PRINT_BUFFER;
         IF PP.LS AND B$JIT.PRFLAGS.LIST THEN DO;
            IF LS_BUFFER.VFC='A' AND LAST_LINE_WAS_DIAGNOSTIC
            THEN
               CALL M$WRITE (WRITE_BLANK);
            CALL M$WRITE (WRITE_LS) ALTRET (MONERR);
            END;
         LAST_LINE_WAS_DIAGNOSTIC='0'B;
         ZQ$LS_BUFFER='0'B;
         ZQ$LS_BUFFER.PRINT_BUFFER=' ';
         CALL M$READ (READ_LIST)
         WHENALTRETURN DO;
            CALL M$CLOSE (CLOSE_LIST) ALTRET (MONERR);
            END;
         SOMETHING_WRITTEN='1'B;
         END;
      DO WHILE DCBADDR(DCBNUM(M$DIAG)) -> F$DCB.FCD# AND
        ZQ$DIAG_BUFFER.RECNO <= ZQ$NS_BUFFER.RECNO AND
        (NOT DCBADDR(DCBNUM(M$LIST)) -> F$DCB.FCD# OR
        ZQ$DIAG_BUFFER.RECNO < ZQ$LS_BUFFER.RECNO);
         IF NOT LAST_LINE_WAS_DIAGNOSTIC THEN DO;
            IF NOT PP.LS OR NOT B$JIT.PRFLAGS.LIST THEN GOTO DIAG_LIST;
            CALL M$CORRES (CORR) WHENRETURN DO;
DIAG_LIST:     CALL M$WRITE (WRITE_DO) ALTRET (MONERR);
               END;
            END;
         LS_BUFFER.VFC=BITASC (ZQ$DIAG_BUFFER.VFC);
         LS_BUFFER.PRINT_BUFFER=ZQ$DIAG_BUFFER.PRINT_BUFFER;
         IF NOT PP.LS OR NOT B$JIT.PRFLAGS.LIST THEN GOTO DIAG_DIAG;
         IF LS_BUFFER.VFC='A' AND NOT (LAST_LINE_WAS_DIAGNOSTIC)
         THEN
            CALL M$WRITE (WRITE_BLANK);
         CALL M$WRITE (WRITE_LS) ALTRET (MONERR);
         CALL M$CORRES (CORR)
         WHENRETURN DO;
DIAG_DIAG:  IF B$JIT.PRFLAGS.COMMENT
            THEN CALL M$WRITE (WRITE_DO) ALTRET (MONERR);
            END;
         LAST_LINE_WAS_DIAGNOSTIC='1'B;
         ZQ$DIAG_BUFFER='0'B;
         ZQ$DIAG_BUFFER.PRINT_BUFFER=' ';
         CALL M$READ (READ_DIAG)
         WHENALTRETURN DO;
            CALL M$CLOSE (CLOSE_DIAG) ALTRET (MONERR);
            END;
         SOMETHING_WRITTEN='1'B;
         END;
      END;
   IF ZQ$NS_BUFFER.RECNO=BITBIN('777777'O)
   THEN
      GOTO XUPDONE;
   IF PREPROCESSOR_ABORT
   THEN
      GOTO NEXT;
   I=0;
   DO WHILE '1'B;
      IF IN_COMMENT THEN CALL INDEX(I,'*/',TEXT,I) WHENRETURN DO;
            I=I+2;
            IN_COMMENT='0'B;
            END;
      IF I>=SIZEC(TEXT) THEN GOTO CONTINUE;
NNB:  IF SUBSTR(TEXT,I,1)~=' '
      THEN IF I<SIZEV(TEXT) AND SUBSTR(TEXT,I,2)='/*' THEN DO;
            IN_COMMENT='1'B;
            I=I+1;
            END;
         ELSE IF SUBSTR(TEXT,I)=';' THEN GOTO WRITEIT;
            ELSE IF SUBSTR(TEXT,I,1)='''' THEN DO;
                  IF C<0 THEN GOTO SYNERR;
                  CALL INDEX(J,'''',SUBSTR(TEXT,I+1)) ALTRET(SYNERR);
                  IF I+1+J<SIZEC(TEXT)
                  THEN IF SUBSTR(TEXT,I+J+2,1)='''' THEN J=J+1;
                  IF J>0 THEN DO;
                     PINCRC(BLK$,K)->CHARJ=SUBSTR(TEXT,I+1,J);
                     K=K+J;
                     IF K>RECSIZE THEN GOTO SIZERR;
                     END;
                  I=I+J+1;
                  IF SUBSTR(TEXT,I-1,1)='''' AND J>0 THEN GOTO NNB;
                  END;
               ELSE IF C>=0 THEN DO;
                     IF SUBSTR(TEXT,I,1)='=' AND K=0 THEN EXIT;
                     PINCRC(BLK$,K)->CHAR1=SUBSTR(TEXT,I,1);
                     IF K>=RECSIZE THEN GOTO SIZERR0;
                     K=K+1;
                     END;
                  ELSE IF OUKEY.L=0 THEN DO WHILE I<SIZEC(TEXT);
                        OUKEY.C(OUKEY.L)=SUBSTR(TEXT,I,1);
                        CALL INDEX(J,OUKEY.C(OUKEY.L),SYMCHARS)
                        WHENALTRETURN DO;
                           IF OUKEY.L=0 THEN GOTO SYNERR;
                           IF NMAX=0 THEN C=1;
                           ELSE IF OUKEY.C(OUKEY.L)='/' THEN I=I+1;
                           GOTO NNB;
                           END;
                        I=I+1;
                        OUKEY.L=OUKEY.L+1;
                        END;
                     ELSE IF OUKEY.C(OUKEY.L)~='/' THEN DO;
                           IF SUBSTR(TEXT,I,1)~='/' THEN GOTO SYNERR;
                           OUKEY.C(OUKEY.L)='/';
                           END;
                        ELSE /* IF C<0 THEN */ DO;
                           DO WHILE I<SIZEC(TEXT);
                              IF SUBSTR(TEXT,I,1)<'0' OR SUBSTR(TEXT,I,1)>'9' THEN EXIT;
                              IF C<0 THEN C=0;
                              C=C*10+ASCBIN(SUBSTR(TEXT,I,1))-48;
                              IF C>NMAX THEN GOTO NMAXERR;
                              I=I+1;
                              END;
                           IF C<0 THEN GOTO SYNERR;
                           I=I-1;
                           END;
      ELSE IF SUBSTR(TEXT,I)=' ' THEN GOTO CONTINUE;
      I=I+1;
      END;
WRITEIT:;
   IF K=0 THEN GOTO SYNERR;
   WORK_.FIRST$->DATA=C;
   J=K;
   IF NMAX=0 THEN WORK_.FIRST$->CHARJ=BLK$->CHARJ;
   ELSE K=K+4;
   OUWRITE.BUF_.BOUND=K-1;
   IF PP.OU THEN CALL M$WRITE (OUWRITE) ALTRET(MONERR);
   DEF_COUNT=DEF_COUNT+1;
   GOTO NEXT;
%EJECT;
NMAXERR: SYNMSG.SYN='NMAX';
   GOTO SYNERR;
SIZERR0: J=0;
SIZERR: SYNMSG.SYN='RECSIZ';
   I=I+1+J-K+RECSIZE;
   GOTO SYNERR;
PARSERR: I=P_PCB.HI_CHAR;
SYNERR: IF I<9 OR P_PCB.NCHARS<15 THEN J=0;
   ELSE J=I-9;
   CALL CONCAT(SYNMSG.TXT,SUBSTR(P_PCB.TEXT$->CHARJ,J,I-J),
     SYNMSG.AT,SUBSTR(P_PCB.TEXT$->CHARJ,I,P_PCB.NCHARS-I));
   CALL ERROR(2);
   SYNMSG.SYN='Syntax';
   IF ECU>0 THEN GOTO NEXT;
   TOTAL_ERRORS=ERROR_COUNT;
   GOTO SHUT_DOWN_IMMEDIATELY;
%EJECT;
ERROR: PROC(E#);
DCL MSG CHAR(99)BASED(LOFPT.BUF_.BUF$);
DCL E# UBIN;
   IF E# ~= 3
   THEN
      ERROR_COUNT=ERROR_COUNT+1;
   LOFPT.BUF_=ERRVEC(E#);
   ERCODE.SEV=0;
   IF E#=1 THEN CALL M$ERRMSG(EFPT) WHENALTRETURN DO;END;
      DO WHILE(SUBSTR(MSG,LOFPT.BUF_.BOUND,1)=' '
        AND LOFPT.BUF_.BOUND~=0);
         LOFPT.BUF_.BOUND=LOFPT.BUF_.BOUND-1;
         END;
   IF B$JIT.PRFLAGS.LIST AND PP.LS THEN DO;
      IF NOT (LAST_LINE_WAS_DIAGNOSTIC)
      THEN
         CALL M$WRITE (WRITE_BLANK);
      CALL M$WRITE (LOFPT);
      CALL M$CORRES (CORR) ALTRET (NODO);
      END;
   IF NOT B$JIT.PRFLAGS.COMMENT THEN GOTO NODO;
   LOFPT.V.DCB#=DCBNUM(M$DO);
   IF LS_BUFFER.VFC~=BINASC(0) AND NOT LAST_LINE_WAS_DIAGNOSTIC
   THEN CALL M$WRITE (WRITE_DO);
   CALL M$WRITE(LOFPT);
   LOFPT.V.DCB#=DCBNUM(M$LO);
NODO:;
   LAST_LINE_WAS_DIAGNOSTIC='1'B;
   RETURN ;
END ERROR;
%EJECT;
MONERR:;
   ERCODE=B$TCB.ALT$->B$ALT.ERR;
   EFPT.V.DCB#=B$TCB.ALT$->B$ALT.DCB#;
   CALL ERROR(1);
   FATAL_ERROR=%YES#;
   GOTO XUPEXIT;
XUU_ERROR:
   IF OPEN_FILES.SI_ERRCODE
   THEN DO;
      ERCODE=OPEN_FILES.SI_ERRCODE;
      EFPT.V.DCB#=DCBNUM(M$SI);
      CALL ERROR(1);
      END;
   ELSE
      IF OPEN_FILES.UI_ERRCODE
      THEN DO;
         ERCODE=OPEN_FILES.UI_ERRCODE;
         EFPT.V.DCB#=DCBNUM(M$UI);
         CALL ERROR (1);
         END;
   FATAL_ERROR=%YES#;
   GOTO WRAP_IT_UP;
XUPDONE:;
   IF DCBADDR(DCBNUM(M$NS)) -> F$DCB.FCD#
   THEN
      CALL M$CLOSE (CLOSE_NS) ALTRET (MONERR);
   IF OUKEY.L~=0 THEN GOTO SYNERR; /* Got part of a definition */
XUPEXIT:;
   CNTMSG.ERWORD='s,';
   CNTMSG.INWORD='s in';
   LS_BUFFER.VFC=BINASC(0);
   IF ERROR_COUNT > 0 THEN DO;
      CALL BINCHAR (CTEMP, ERROR_COUNT);
      CALL EDITSTR (CNTMSG.CNT, , , %MVZB6, CTEMP);
      CNTMSG.ASTS=' *** ';
      IF ERROR_COUNT=1
      THEN
         CNTMSG.ERWORD=',';
      END;
   ELSE DO;
      CNTMSG.ASTS=' ';
      CNTMSG.CNT='    No';
      END;
   IF DEF_COUNT>0 AND ECU>0 THEN DO;
      CALL BINCHAR (CNTMSG.DEFS, DEF_COUNT);
      CALL EDITSTR (CNTMSG.DEFS,0,3,'103'O,CNTMSG.DEFS);
      IF DEF_COUNT=1 THEN CNTMSG.INWORD=' in';
      END;
   ELSE CNTMSG.DEFS='  No';
   CNTMSG.MODNAME=TITL.FILE;
   CALL ERROR(3);
   TOTAL_ERRORS=TOTAL_ERRORS+ERROR_COUNT;
   ERROR_COUNT=0;
   IF ECU<HIGHEST_BC AND NOT PREPROC.END_OF_SOURCE AND NOT FATAL_ERROR
   THEN
      GOTO PROCESS_ECU;
WRAP_IT_UP:
   CNTMSGC=' ';
   CALL ERROR(3);
   OUCLS.V.DCB#=DCBNUM(M$OU);
   OUCLS.V.OPER.REBLD#=%YES#;
   OUCLS.V.OPER.RELG#=%YES#;
   CALL M$CLOSE (OUCLS);
   CALL XUU$CLOSE (CLOSE_FILES) ALTRET (XUU_ERROR);
   IF DCBADDR(DCBNUM(M$LIST)) -> F$DCB.FCD#
   THEN
      CALL M$CLOSE (CLOSE_LIST) ALTRET (MONERR);
SHUT_DOWN_IMMEDIATELY:;
   OUCLS.V.DCB#=DCBNUM(M$LO);
   CALL M$CLOSE(OUCLS);
   IF TOTAL_ERRORS~=0 OR FATAL_ERROR THEN CALL M$EXIT (ERRXIT);
   RETURN;
%EJECT;
WRITELO:PROC;
   LOFPT.BUF_=ERRVEC(1);
   DO WHILE(SUBSTR(TEXT,LOFPT.BUF_.BOUND,1)=' '
     AND LOFPT.BUF_.BOUND~=0);
      LOFPT.BUF_.BOUND=LOFPT.BUF_.BOUND-1;
      END;
   CALL M$WRITE(LOFPT);
   TEXT=' ';
END;
%EJECT;
EDIT_MODE:;
   CALL XUU$CLOSE (CLOSE_FILES);
   OUOPN.V.DCB#=DCBNUM(M$SI);
   OUWRITE.V.DCB#=DCBNUM(M$SI);
   LOFPT.V.DCB#=DCBNUM(M$ME);
   IF NOT DCBADDR(DCBNUM(M$ME))->F$DCB.DDEV.IC# THEN CALL M$EXIT;
   OUOPN.V.FUN#=%UPDATE#;
   CALL M$OPEN(OUOPN) ALTRET(MONERR);
   OUWRITE.BUF_=WORK_;
   REREAD.BUF_=WORK_;
   FMT_PROMPT.PROMPT_=BITVECT(WORK_);
   EDITRED.BUF_=WORK_;
   P_PCB.TEXT$=ADDR(TEXT);
   P_PCB.ROOT$=ADDR(CRAWDAD_CMD);
   IF NOT BLK$->F$DCB.FFLG.WNEW# THEN CALL M$WRITE(OUWRITE) ALTRET(MONERR);
   IF NOT BLK$->F$DCB.FFLG.UPD# THEN CALL M$READ(EDITRED) WHENRETURN DO;
         CALL M$WRITE(OUWRITE) ALTRET(MONERR);
         END; WHENALTRETURN DO;
         IF B$TCB.ALT$->B$ALT.ERR.CODE~=6 THEN GOTO MONERR;
         END;
   CALL M$PROMPT (CRAWDAD_PROMPT);
NXTCMD:;
   CALL M$READ(README) ALTRET(NXTCMD);
   P_PCB.NCHARS=DCBADDR(DCBNUM(M$ME))->F$DCB.ARS#;
   CALL X$PARSE(P_PCB) WHENALTRETURN DO;
      TEXT='List [name[?]], Edit fmtname, or Build fmtname';
      CALL WRITELO;
      GOTO NXTCMD;
      END;
   DO CASE(P_PCB.OUT$->OUT$BLK.CODE);
   CASE(3);
      CALL M$EXIT;
   CASE(2,1);
      OUKEY.L=LENGTHC(P_PCB.OUT$->OUT$BLK.SUBLK$(0)->OUT$SYM.TEXT);
      OUKEY.T=P_PCB.OUT$->OUT$BLK.SUBLK$(0)->OUT$SYM.TEXT;
      WORK_.FIRST$->CHAR1=BITASC('036'O);
      SUBSTR(WORK_.FIRST$->CHARJ,1,OUKEY.L)=OUKEY.T;
      SUBSTR(WORK_.FIRST$->CHARJ,1+OUKEY.L,1)='/';
      VBOUND(FMT_PROMPT.PROMPT_)=OUKEY.L+1;
      CALL M$PROMPT(FMT_PROMPT);
      IF P_PCB.OUT$->OUT$BLK.CODE=1 THEN DO; /* build */
         WORK_.FIRST$->DATA=0;
         J=4;
         END; ELSE DO; /* edit */
         EDITRED.V.KEYS#='1'B;
         CALL M$READ(EDITRED) WHENALTRETURN DO; END;
         J=DCBADDR(DCBNUM(M$SI))->F$DCB.ARS#;
         END;
      IF J>=4 THEN DO;
         IF NMAX>0 THEN DO;
            I=3;
            IF WORK_.FIRST$->DATA>999 THEN CALL EXPAND_BUF;
            CALL BINCHAR(SUBSTR(WORK_.FIRST$->CHARJ,0,I),WORK_.FIRST$->DATA);
            SUBSTR(WORK_.FIRST$->CHARJ,I,1)='=';
            END;
         REREAD.V.SINPUTSIZE#=J;
         CALL M$READ(REREAD);
         J=DCBADDR(DCBNUM(M$ME))->F$DCB.ARS#;
         IF J<6 THEN CALL M$DELREC(EDITDEL) WHENALTRETURN DO; END;
         ELSE DO;
            IF NMAX>0 THEN DO;
               I=0; DO WHILE '1'B;
                  IF SUBSTR(WORK_.FIRST$->CHARJ,I,1)<'0'
                    OR SUBSTR(WORK_.FIRST$->CHARJ,I,1)>'9'
                  THEN EXIT;
                  I=I+1;
                  END;
               IF I<3 THEN CALL EXPAND_BUF;
               CALL CHARBIN(WORK_.FIRST$->DATA,SUBSTR(WORK_.FIRST$->CHARJ,0,I));
               IF I~=3 THEN DO;
                  SUBSTR(WORK_.FIRST$->CHARJ,4,J-4)=
                    SUBSTR(WORK_.FIRST$->CHARJ,I+1,J-4);
                  J=J-I+3;
                  END;
               END;
            OUWRITE.BUF_.BOUND=J-1;
            CALL M$WRITE(OUWRITE) ALTRET(MONERR);
            END;
         END;
      ELSE DO;
         TEXT='That''s not a format definition!';
         CALL WRITELO;
         END;
      CALL M$PROMPT(CRAWDAD_PROMPT);
   CASE (0); /* LIST */
      TEXT=' ';
      CALL M$PFIL (FRSKEY);
      J=0;
      EDITRED.V.KEYS#='0'B;
      DO UNTIL J=0;
         CALL M$READ(EDITRED) WHENRETURN DO;
            IF J+OUKEY.L>=WIDTH THEN DO;
               CALL WRITELO;
               J=0;
               END;
            SUBSTR(TEXT,J,OUKEY.L)=OUKEY.T;
            I=(OUKEY.L+TAB#)/TAB#;
            J=J+TAB#*I;
            END; WHENALTRETURN DO;
            J=0;
            END;
         END;
      CALL WRITELO;
 
   END;
   GOTO NXTCMD;
 
EXPAND_BUF: PROC;
 
DCL ZEROS CHAR(4) CONSTANT INIT('0000');
DCL ZEROU REDEF ZEROS UBIN;
 
   DO C=J/4 DOWNTO 0;
      PINCRW(WORK_.FIRST$,C+1)->DATA=PINCRW(WORK_.FIRST$,C)->DATA;
      END;
   IF I<3 THEN WORK_.FIRST$->DATA=ZEROU;
   I=I+4;
   J=J+4;
   RETURN;
END EXPAND_BUF;
 
END X$CRAWDAD;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
X$CRAWDAD_PREPROC_ERROR: PROC (P_RECNO, P_INPUT_KEY,
     P_FCG_MID_STUFF, P_ERROR_CODE,
     P_SEVERITY_LEVEL,
     P_TEXT1_LEN, P_TEXT1,
     P_TEXT2_LEN, P_TEXT2,
     P_TEXT3_LEN, P_TEXT3);
 
DCL P_RECNO UBIN;
DCL 1 P_INPUT_KEY ALIGNED,
      2 TYPE_CHAR UBIN (8) UNAL,
      2 EDIT_KEY UBIN (28) UNAL;
DCL 1 P_FCG_MID_STUFF ALIGNED,
      2 FCG_MID BIT (18),
      2 * BIT (18);
DCL P_ERROR_CODE UBIN ALIGNED;
DCL P_SEVERITY_LEVEL UBIN ALIGNED;
DCL P_TEXT1_LEN SBIN ALIGNED; DCL P_TEXT1 CHAR (P_TEXT1_LEN);
DCL P_TEXT2_LEN SBIN ALIGNED; DCL P_TEXT2 CHAR (P_TEXT2_LEN);
DCL P_TEXT3_LEN SBIN ALIGNED; DCL P_TEXT3 CHAR (P_TEXT3_LEN);
 
%INCLUDE B_MICROPS_C;
%INCLUDE CP_6;
%INCLUDE CP_6_SUBS;
%INCLUDE ZQ$INTERFACE_M;
 
%ZQ$LS_BUFFER (STCLASS=STATIC);
%FPT_ERRMSG (STCLASS=STATIC, CODE=VLP_ERRCODE, RESULTS=VLR_ERRMSG);
%VLP_ERRCODE (STCLASS=STATIC);
%VLR_ERRMSG (STCLASS=STATIC);
%FPT_WRITE (FPTN=WRITE_DIAG, DCB=M$DIAG, BUF=ZQ$LS_BUFFER);
 
DCL M$DIAG DCB;
DCL ERRMSG_BUF (0:10) CHAR (120);
DCL ERROR_COUNT UBIN SYMREF;
DCL I UBIN;
DCL MOPS (0:1) BIT (9) CALIGNED CONSTANT INIT (%MVZB9, %MVC1);
 
   VLP_ERRCODE=P_FCG_MID_STUFF;
   VLP_ERRCODE.ERR#=P_ERROR_CODE;
   VLP_ERRCODE.SEV=P_SEVERITY_LEVEL;
 
   CALL SETUP_VLP (FPT_ERRMSG.FIELD1_, P_TEXT1_LEN, P_TEXT1, 0);
   CALL SETUP_VLP (FPT_ERRMSG.FIELD2_, P_TEXT2_LEN, P_TEXT2, 1);
   CALL SETUP_VLP (FPT_ERRMSG.FIELD3_, P_TEXT3_LEN, P_TEXT3, 2);
 
   FPT_ERRMSG.V.DCB#=DCBNUM(NIL);
 
   CALL EMIT_ERROR_LINES;
 
   RETURN;
%EJECT;
X$CRAWDAD_MON_ERROR: ENTRY (P_RECNO, P_INPUT_KEY, P_FCG_MID_STUFF,
     P_ERROR_CODE);
 
   VLP_ERRCODE=P_FCG_MID_STUFF;
 
   FPT_ERRMSG.FIELD1_=VECTOR (NIL);
   FPT_ERRMSG.FIELD2_=VECTOR (NIL);
   FPT_ERRMSG.FIELD3_=VECTOR (NIL);
 
   IF ADDR(P_ERROR_CODE)=ADDR(NIL)
   THEN
      FPT_ERRMSG.V.DCB#=DCBNUM(NIL);
   ELSE
      FPT_ERRMSG.V.DCB#=P_ERROR_CODE;
 
   CALL EMIT_ERROR_LINES;
 
   RETURN;
%EJECT;
SETUP_VLP: PROC (FIELD_, LEN, TEXT, TEMP_NUMBER);
 
DCL FIELD_ VECTOR;
DCL LEN UBIN WORD;
DCL TEXT CHAR (LEN);
DCL TEMP_NUMBER UBIN;
DCL 1 TEMP_TEXTC (0:2),
      2 LEN UBIN BYTE CALIGNED,
      2 TEXT CHAR (31) CALIGNED;
 
DCL STEMP CHAR (10);
DCL ST1 CHAR (10);
DCL IX UBIN;
 
   IF ADDR(LEN)=ADDR(NIL)
   THEN DO;
 
      FIELD_=VECTOR (NIL);
      RETURN;
 
      END;
 
   IF ADDR(TEXT)=ADDR(NIL)
   THEN DO;
 
      CALL BINCHAR (STEMP, LEN);
      CALL EDITCHAR (ST1, , , MOPS, STEMP);
      CALL INDEX1R (IX, ' ', ST1)
      WHENRETURN DO;
 
         TEMP_TEXTC.LEN(TEMP_NUMBER)=LENGTHC(ST1)-IX+1;
         TEMP_TEXTC.TEXT(TEMP_NUMBER)=SUBSTR(ST1, IX+1);
 
         END;
 
      WHENALTRETURN DO;
 
         TEMP_TEXTC.LEN(TEMP_NUMBER)=LENGTHC(ST1);
         TEMP_TEXTC.TEXT(TEMP_NUMBER)=ST1;
 
         END;
 
      END;
 
   ELSE IF LEN<32 THEN DO;
         TEMP_TEXTC.LEN(TEMP_NUMBER)=LEN;
         TEMP_TEXTC.TEXT(TEMP_NUMBER)=TEXT;
 
         END;
 
      ELSE DO;
         TEMP_TEXTC.LEN(TEMP_NUMBER)=LENGTHC('ending in ''1234567890''');
         CALL CONCAT(TEMP_TEXTC.TEXT(TEMP_NUMBER),'ending in ''',
           SUBSTR(TEXT,LEN-10,10),'''');
         END;
   FIELD_=VECTOR (TEMP_TEXTC(TEMP_NUMBER));
 
   RETURN;
 
END SETUP_VLP;
%EJECT;
EMIT_ERROR_LINES: PROC;
 
   ZQ$LS_BUFFER.RECNO=P_RECNO;
   ZQ$LS_BUFFER.VFC=ASCBIT('A');
 
   FPT_ERRMSG.BUF_=VECTOR(ERRMSG_BUF);
 
   VLR_ERRMSG.RECCNT=1;
   ERRMSG_BUF(0)='??? M$ERRMSG altreturned strangely ???';
 
   CALL M$ERRMSG (FPT_ERRMSG) ALTRET (IGNORE_ALTRET);
 
IGNORE_ALTRET:
 
   DO I=0 TO VLR_ERRMSG.RECCNT-1;
 
      ZQ$LS_BUFFER.PRINT_BUFFER=ERRMSG_BUF(I);
 
      CALL M$WRITE (WRITE_DIAG) ALTRET (ABANDON_ERRMSG);
 
      END;
 
ABANDON_ERRMSG:
 
   ERROR_COUNT=ERROR_COUNT+1;
 
   RETURN;
 
END EMIT_ERROR_LINES;
 
END X$CRAWDAD_PREPROC_ERROR;
