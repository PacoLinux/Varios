/*M*  ELBBIRD    Converts DRIBBLE file to non-VFC form */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
ELBBIRD:  PROC MAIN;
 
%INCLUDE ELBBIRD_C61;
%INCLUDE B$JIT;
%INCLUDE B_ERRORS_C;
%INCLUDE CP_6;
%INCLUDE CP_6_SUBS;
%INCLUDE NK_VFC_C;
%INCLUDE XU_MACRO_C;
%INCLUDE XU_TRANS;
%XU_LC2UC(TBLN=LC2UC);
 
DCL 1 DRIBBLE_RECORD STATIC,
      2 VFC CHAR (1) CALIGNED,
      2 CONTENTS CHAR (2048);
 
DCL OUTPUT_RECORD CHAR (2048) STATIC;
DCL ERROR_MESSAGE_BUFFER CHAR (120) STATIC;
DCL OPT_MESSAGE CHAR(80) STATIC INIT(' ');
DCL OVERPRINT_FLAG BIT(1) STATIC INIT('0'B);
DCL DELTA_FLAG BIT(1) STATIC INIT('0'B);
DCL RING_FLAG BIT(1) STATIC INIT('1'B);
DCL OPT_BUF CHAR(100) STATIC INIT(' ');
 
DCL I SBIN WORD;
DCL BS CHAR (1) CONSTANT INIT (%BITASC('08'X));
DCL DVFC CHAR (1);
DCL DRIBBLE$ PTR;
DCL DRIBBLE_ARS UBIN WORD;
DCL ELBBIRD$ PTR AUTO;
DCL FPARAM_AREA (0:1203) UBIN STATIC INIT(0*0);
DCL OUTPUT_OFFSET UBIN WORD;
 
DCL ELBBIRD_OPTS PTR SYMREF;
 
DCL 1 KEY_AREA STATIC,
      2 LEN UBIN BYTE CALIGNED INIT (3),
      2 RECNO UBIN (27) CALIGNED INIT (0);
 
DCL SCAN_FOR_NONBLANK (0:511) UBIN BYTE CALIGNED CONSTANT
   INIT( 1 * %(ASCBIN(' ')),
         0 * 1,
         1 * 0);
 
DCL X$PARSE ENTRY(1) ALTRET;
 
%P_PCB(NAME=OPTIONS,
        R=ELBBIRD_OPTS,
        T=OPT_BUF,
        W=FPARAM_AREA,
        WSZ="SIZEW(FPARAM_AREA)");
 
%PARSE$OUT(NAME=OUT$BLK,STCLASS="BASED(OPTIONS.OUT$)");
 
%FPT_OPEN  (FPTN=OPEN_DRIBBLE,
            DCB=DRIBBLE,
            FUN=IN);
 
%FPT_OPEN  (FPTN=OPEN_ELBBIRD,
            DCB=ELBBIRD,
            FUN=CREATE,
            ORG=KEYED,
            DISP=NAMED);
 
%FPT_READ  (FPTN=READ_DRIBBLE,
            DCB=DRIBBLE,
            BUF=DRIBBLE_RECORD);
 
%FPT_WRITE (FPTN=WRITE_ELBBIRD,
            DCB=ELBBIRD,
            BUF=OUTPUT_RECORD);
 
%FPT_CLOSE (FPTN=CLOSE_DRIBBLE,
            DCB=DRIBBLE);
 
%FPT_CLOSE (FPTN=CLOSE_ELBBIRD,
            DCB=ELBBIRD,
            RELG=YES,
            DISP=SAVE);
 
%FPT_ERR      (CODE=VLP_ERRCODE);
 
%FPT_ERRMSG   (CODE=VLP_ERRCODE,
               OUTDCB1=M$DO,
               BUF=ERROR_MESSAGE_BUFFER,
               INCLCODE=NO,
               RESULTS=VLR_ERRMSG);
 
%FPT_WRITE(FPTN=INV_OPTION,
        BUF=OPT_MESSAGE,
        DCB=M$DO,
        VFC=YES);
 
%VLP_NAME  (FPTN=FILE_NAME,
            STCLASS=AUTO,
            LEN=31);
 
%VLP_ACCT  (FPTN=FILE_ACCT, STCLASS=AUTO);
%VLP_SN (FPTN=FILE_PSN, N=1, STCLASS=AUTO);
 
%VLP_ERRCODE;
%VLR_ERRMSG;
 
DCL DRIBBLE DCB;
DCL ELBBIRD DCB;
DCL M$DO DCB;
 
%F$DCB;
%B$TCB  (STCLASS="BASED (B$TCB$)");
%B$ALT;
 
DCL B$JIT$ PTR SYMREF READONLY;
DCL B$TCB$ PTR SYMREF READONLY;
 
%EJECT;
   CALL INITIALIZE;
 
   CALL PROCESS;
 
   CALL TERMINATE;
 
   CALL M$EXIT;
 
%EJECT;
INITIALIZE: PROC;
 
   DRIBBLE$ = DCBADDR(DCBNUM(DRIBBLE));
   ELBBIRD$ = DCBADDR(DCBNUM(ELBBIRD));
 
   IF B$JIT.CCDISP = B$JIT.CCARS THEN DO;
      OVERPRINT_FLAG = %NO#;
      DELTA_FLAG = %NO#;
      END;
   ELSE DO;
      CALL INDEX(I,')',B$JIT.CCBUF,B$JIT.CCDISP+1) WHENRETURN DO;
         I = I - B$JIT.CCDISP - 1;
         END;
      WHENALTRETURN DO;
         I = B$JIT.CCARS - B$JIT.CCDISP - 1;
         END;
      IF I = 0 THEN DO;
         OPT_MESSAGE = 'A        I found a left parenthesis, but no options!';
         CALL M$WRITE(INV_OPTION);
         CALL M$EXIT;
         END;
      OPT_BUF = SUBSTR(B$JIT.CCBUF,B$JIT.CCDISP+1,I);
      OPTIONS.NCHARS = I;
      CALL X$PARSE(OPTIONS) WHENRETURN DO;
         IF OUT$BLK.NSUBLKS > 0 THEN DO;
            DO I = 0 TO OUT$BLK.NSUBLKS - 1;
               DO CASE(OUT$BLK.SUBLK$(I)->OUT$BLK.CODE);
                  CASE(%DELTA);
                     DELTA_FLAG = %YES#;
                  CASE(%NDELTA);
                     DELTA_FLAG = %NO#;
                  CASE(%OVERPRINT);
                     OVERPRINT_FLAG = %YES#;
                  CASE(%NOVERPRINT);
                     OVERPRINT_FLAG = %NO#;
                  CASE(%RING);
                     RING_FLAG = %YES#;
                  CASE(%NORING);
                     RING_FLAG = %NO#;
                  END;
               END;
            END;
         ELSE DO;
            DO CASE(OUT$BLK.CODE);
               CASE(%DELTA);
                  DELTA_FLAG = %YES#;
               CASE(%NDELTA);
                  DELTA_FLAG = %NO#;
               CASE(%OVERPRINT);
                  OVERPRINT_FLAG = %YES#;
               CASE(%NOVERPRINT);
                  OVERPRINT_FLAG = %NO#;
               CASE(%RING);
                  RING_FLAG = %YES#;
               CASE(%NORING);
                  RING_FLAG = %NO#;
               END;
            END;
         END;
      WHENALTRETURN DO;
         VLP_ERRCODE = OPTIONS.ERROR;
         FPT_ERRMSG.V.POINTER# = OPTIONS.HI_CHAR + B$JIT.CCDISP + 3;
         CALL M$ERRMSG(FPT_ERRMSG);
         CALL M$EXIT;
         END;
      END;
 
   IF RING_FLAG
     THEN
      CALL CHECK_FOR_RING_FILE; /* If it's a RING file we won't come back!    */
 
   IF B$JIT.PRFLAGS.OU
     THEN DO;
 
      CALL M$OPEN (OPEN_DRIBBLE) ALTRET (URGH);
      CALL M$OPEN (OPEN_ELBBIRD) ALTRET (URGH);
 
      END;
 
     ELSE DO;
 
      OPEN_DRIBBLE.FPARAM_ = VECTOR(FPARAM_AREA);
 
      CALL M$OPEN (OPEN_DRIBBLE) ALTRET (URGH);
 
      FILE_NAME.L#   =  DRIBBLE$ -> F$DCB.NAME#.L;
      FILE_NAME.NAME# = DRIBBLE$ -> F$DCB.NAME#.C;
      FILE_ACCT.ACCT# = DRIBBLE$ -> F$DCB.ACCT#;
 
      FILE_PSN.SN#(0) = DRIBBLE$ -> F$DCB.PSN#;
      OPEN_ELBBIRD.NAME_ = VECTOR(FILE_NAME);
      OPEN_ELBBIRD.ACCT_ = VECTOR(FILE_ACCT);
      OPEN_ELBBIRD.SN_ = VECTOR(FILE_PSN);
 
      CALL M$OPEN (OPEN_ELBBIRD) ALTRET (URGH);
 
      END;
 
 
   OUTPUT_RECORD = ' ';
   OUTPUT_OFFSET = 0;
 
   IF ELBBIRD$ -> F$DCB.ORG# = %KEYED#
     THEN DO;
 
      WRITE_ELBBIRD.KEY_ = VECTOR(KEY_AREA);
      WRITE_ELBBIRD.V.NEWKEY# = %YES#;
 
      END;
 
   IF DRIBBLE$ -> F$DCB.ASN# = %FILE# AND DRIBBLE$ -> F$DCB.ORG# = %UR# THEN
      DVFC = DRIBBLE$ -> F$DCB.DVFC#;
   ELSE DO;
      IF DELTA_FLAG THEN
         DVFC = '@';
      ELSE
         DVFC = 'A';
      END;
 
   RETURN;
 
URGH:
 
   CALL AIEE;
 
END INITIALIZE;
 
%EJECT;
TERMINATE: PROC;
 
   CALL M$CLOSE (CLOSE_DRIBBLE) ALTRET (URGH);
   CALL M$CLOSE (CLOSE_ELBBIRD) ALTRET (URGH);
 
   RETURN;
 
URGH:
 
   CALL AIEE;
 
END TERMINATE;
 
%EJECT;
PROCESS: PROC;
 
PROCESS_LOOP:  DO UNTIL (%NO#);
 
      CALL READ_DRIBBLE_RECORD      ALTRET (END_OF_DRIBBLE_FILE);
 
      CALL PROCESS_DRIBBLE_RECORD;
 
      END PROCESS_LOOP;
 
END_OF_DRIBBLE_FILE:
 
   IF OUTPUT_OFFSET > 0
     THEN
      CALL BURP;
 
   RETURN;
 
END PROCESS;
 
%EJECT;
READ_DRIBBLE_RECORD:  PROC ALTRET;
 
   CALL M$READ (READ_DRIBBLE)    ALTRET (ALTRET_ON_DRIBBLE);
 
   RETURN;
 
ALTRET_ON_DRIBBLE:
 
    IF B$TCB.ALT$ -> B$ALT.ERR.CODE = %E$EOF
     THEN
      ALTRETURN;
     ELSE
      CALL AIEE;
 
END READ_DRIBBLE_RECORD;
 
%EJECT;
PROCESS_DRIBBLE_RECORD: PROC;
 
   DRIBBLE_ARS = DRIBBLE$ -> F$DCB.ARS#;
 
   IF DRIBBLE$ -> F$DCB.DVBYTE.VFC#
     THEN
      CALL PROCESS_DRIBBLED_STUFF (DRIBBLE_RECORD.VFC, DRIBBLE_RECORD.CONTENTS,
       DRIBBLE_ARS - 1);
     ELSE
      CALL PROCESS_DRIBBLED_STUFF (DVFC, DRIBBLE_RECORD, DRIBBLE_ARS);
 
   RETURN;
 
END PROCESS_DRIBBLE_RECORD;
 
%EJECT;
PROCESS_DRIBBLED_STUFF:  PROC (VFC, TEXT, LEN);
 
DCL VFC CHAR (1) CALIGNED;
DCL TEXT CHAR (LEN) CALIGNED;
DCL LEN UBIN WORD ALIGNED;
 
DCL VFC_CHAR CHAR (1);
DCL 1 VFC_BYTE REDEF VFC_CHAR,
      2 * BIT (1),
      2 RFU BIT (1),
      2 FCN UBIN (3) UNAL,
      2 COUNT UBIN (4) UNAL;
 
   VFC_CHAR = VFC;
 
   DO CASE (VFC_BYTE.FCN);
 
    CASE (%VFCF_RFU);
 
      /* ignore such records - they shouldn't be here anyhow */
 
    CASE (%VFCF_SPC);
 
      DO CASE (VFC_BYTE.COUNT);
 
       CASE (%VFCS_TRS0) /* Transition 0 */;
 
         IF OUTPUT_OFFSET > 0
           THEN
            CALL BURP;
 
         CALL STUFF;
 
       CASE (%VFCS_TRS1) /* Transition 1 */;
 
         IF OUTPUT_OFFSET > 0
           THEN
            CALL BURP;
 
         CALL STUFF;
         CALL BURP;
 
       CASE (ELSE);
 
         /*N* Put in code to handle other special VFC types such as
              set output or input logical tabs, platen, etc.        */
 
       END;
 
    CASE (%VFCF_RSV);
 
      /* Another "reserved for future use" - ignore */
 
    CASE (%VFCF_SKB) /* Skip to channel COUNT before print */;
 
      /* Until time-sharing VFC simulation is available and workable,
         simply treat this as a "skip 1 and print" operation.       */
 
      CALL BURP;
      CALL STUFF;
 
    CASE (%VFCF_SPA) /* Space COUNT lines after print */;
 
      IF VFC_BYTE.COUNT = 0 /* VFC is '@' - extend previous line */
        THEN
         CALL STUFF;
 
        ELSE DO;
 
         OUTPUT_OFFSET = 0;
 
         CALL STUFF;
 
         DO I = 1 TO VFC_BYTE.COUNT;
 
            CALL BURP;
 
            END;
 
         END;
 
    CASE (%VFCF_SKA) /* Skip to channel COUNT after print */;
 
      /* Like VFCF_SKB, this code is handled in a disgustingly simple-
         minded manner until interpretation of timesharing VFC becomes
         practical.                                                 */
 
      OUTPUT_OFFSET = 0;
 
      CALL STUFF;
 
      CALL BURP;
      CALL BURP;
 
    CASE (%VFCF_SPB) /* Space COUNT lines before print */;
 
      DO I = 1 TO VFC_BYTE.COUNT;
 
         CALL BURP;
 
         END;
 
      OUTPUT_OFFSET = 0; /* necessary for pre-space 0 lines */
 
      CALL STUFF;
 
    CASE (%VFCF_HDR) /* Header */;
 
      DO I = 1 TO 5 /* Skip some blank lines... */;
 
         CALL BURP;
 
         END;
 
      CALL STUFF;
 
      OUTPUT_OFFSET = 0;
 
      DO I = 1 TO VFC_BYTE.COUNT;
 
         CALL BURP;
 
         END;
 
    END;
 
   RETURN;
 
%EJECT;
STUFF:  PROC;
 
DCL I SBIN;
DCL THIS_CHAR CHAR (1);
DCL THAT_CHAR CHAR (1);
DCL BS_PRESENT BIT (1);
 
   CALL INDEX (I, BS, SUBSTR(TEXT, 0, LEN))
    WHENRETURN DO;
      BS_PRESENT = %YES#;
      END;
    WHENALTRETURN DO;
      BS_PRESENT = %NO#;
      END;
 
   IF SUBSTR(OUTPUT_RECORD, OUTPUT_OFFSET, LEN) = ' '
    AND (NOT BS_PRESENT)
     THEN DO /* Quickie insertion */;
 
      LEN = MINIMUM (LEN, LENGTHC(OUTPUT_RECORD) - OUTPUT_OFFSET + 1);
 
      SUBSTR(OUTPUT_RECORD, OUTPUT_OFFSET, LEN) = TEXT;
 
      OUTPUT_OFFSET = OUTPUT_OFFSET + LEN;
 
      END;
 
     ELSE DO /* Backspacing or overprinting previous stuff - cobble up */;
 
      DO I = 0 TO LEN - 1;
 
         THIS_CHAR = SUBSTR(TEXT, I, 1);
         THAT_CHAR = SUBSTR(OUTPUT_RECORD, OUTPUT_OFFSET, 1);
 
         IF THIS_CHAR = BS
           THEN
            IF OUTPUT_OFFSET > 0
              THEN
               OUTPUT_OFFSET = OUTPUT_OFFSET - 1;
              ELSE /* don't backspace off left edge of page */;
 
           ELSE DO;
 
            IF OUTPUT_OFFSET < LENGTHC(OUTPUT_RECORD)
              THEN DO;
 
               IF THIS_CHAR ~= ' '
                 THEN
                  IF THAT_CHAR = ' ' OR THAT_CHAR = '_' OR OVERPRINT_FLAG THEN
                     SUBSTR(OUTPUT_RECORD, OUTPUT_OFFSET, 1) = THIS_CHAR;
                    ELSE
                     IF THIS_CHAR = '_' OR THIS_CHAR = THAT_CHAR
                       THEN /* leave it as it was */;
                       ELSE
                        SUBSTR(OUTPUT_RECORD, OUTPUT_OFFSET, 1) = '*';
 
               OUTPUT_OFFSET = OUTPUT_OFFSET + 1;
 
               END;
 
            END;
 
         END;
 
      END;
 
   RETURN;
 
END STUFF;
 
END PROCESS_DRIBBLED_STUFF;
 
%EJECT;
BURP:  PROC;
 
DCL I UBIN;
DCL J UBIN;
 
   CALL SEARCHR (I, J, SCAN_FOR_NONBLANK, OUTPUT_RECORD)
    WHENALTRETURN DO;
      I = 1;
      END;
 
   WRITE_ELBBIRD.BUF_ = VECTOR(SUBSTR(OUTPUT_RECORD, 0, I + 1));
 
   KEY_AREA.RECNO = KEY_AREA.RECNO + 1000;
 
   CALL M$WRITE (WRITE_ELBBIRD) ALTRET (URGH);
 
   OUTPUT_RECORD = ' ';
   OUTPUT_OFFSET = 0;
 
   RETURN;
 
URGH:
 
   CALL AIEE;
 
END BURP;
 
%EJECT;
AIEE:  PROC;
 
   VLP_ERRCODE = B$TCB.ALT$ -> B$ALT.ERR;
   VLP_ERRCODE.SEV = 0;
 
   FPT_ERRMSG.V.DCB# = B$TCB.ALT$ -> B$ALT.DCB#;
 
   CALL M$ERRMSG (FPT_ERRMSG) ALTRET (OOPS);
 
OOPS:   CALL M$ERR (FPT_ERR);
 
END AIEE;
%EJECT;
CHECK_FOR_RING_FILE: PROC;
DCL RECNUM UBIN;
 
    CALL M$OPEN( OPEN_DRIBBLE )  ALTRET( CLOSE_FILE );
 
    DO RECNUM = 1 TO 25; /* We should find a RING looking record in 25 recs   */
READ_AGAIN:
       CALL READ_DRIBBLE_RECORD  ALTRET( CLOSE_FILE );
       IF DRIBBLE$ -> F$DCB.DVBYTE.VFC# THEN DO;
          IF SUBSTR(DRIBBLE_RECORD.CONTENTS,0,8) = 'command>' OR
             SUBSTR(DRIBBLE_RECORD.CONTENTS,0,7) = 'Waiting'  THEN
             ;
          ELSE
             GOTO READ_AGAIN;
          OPT_MESSAGE = 'A>> This looks like a DRIBBLE of a RING session!';
          CALL M$WRITE(INV_OPTION);
          OPT_MESSAGE = 'A>> If it IS then try "!XELA.X dribble OVER output".';
          CALL M$WRITE(INV_OPTION);
          OPT_MESSAGE = 'A>> If you REALLY want to ELBBIRD this file, specify';
          CALL M$WRITE(INV_OPTION);
          OPT_MESSAGE = 'A>> the NO RING option when you invoke ELBBIRD.X.';
          CALL M$WRITE(INV_OPTION);
          CALL M$ERR;
          END;
       END;
 
CLOSE_FILE:
    CALL M$CLOSE( CLOSE_DRIBBLE );
 
RE_TURN:
    RETURN;
 
END CHECK_FOR_RING_FILE;
 
END ELBBIRD;
