.*M*
HELP file for: CMPR
.*T*
 **************************************************************
 *                                                            *
 *  Copyright (c) Bull HN Information Systems Inc., 1989      *
 *                                                            *
 **************************************************************
.*A*                                             
CMPR.X compares two files and reports the differences.
.*B*
Invocation syntax:
 
  !CMPR.X old,new {ON|OVER} upd[,lst] [(options)]
 
where:
old       is the disk file fid of the "older" of the two files
.*R*
new       is the disk file fid of the "newer" of the two files
.*R*
upd       where updates produced by CMPR are to go.
.*R*
lst       list of updates
 
Briefly, options are:
 
 COMM/ents = 'comment'
 [D/ont] C/ompress [L/eading | T/railing] B/lanks
 [N/o] DI/fference
 [D/ont] I/gnore [L/eading | T/railing] B/lanks
 [D/ont] I/gnore V/fc
 [D/ont] LI/st D/eletes
 I/gnore R/ecord L/engths
 M/inimum = number_of_records
 N/o D/efaults
 [N/o] P/atch
 [N/o] S/tatistics
 [N/o] U/pper C/ase
.*B*
Any fid specified without a "name" will have an implied "name" of a '?'.
 
All except one of the fids specified on the command line may contain at most
one '?' character.  Any such '?' will be replaced by the first fid on the
command that does NOT contain a '?'.  For instance:
 !CMPR.X CMPR_SI6.:XSI,NEW_? ON *UPD_?
is equivalent to:
 !CMPR.X CMPR_SI6.:XSI,NEW_CMPR_SI6 ON *UPD_CMPR_SI6
.*B*
    CMPR will CoMPaRe two files (presumably two versions of the same file) and
output updates which may be used to transform the first file (OLD) into the
second file (NEW).  Unlike COMP.X, CMPR ignores keys and compares only on
record content (or lack of it) and generates updates based on relative record
numbers.
.*B*
For a list of TOPICS (options), type HELP(CMPR.X) TOPICS
For HELP on a particular TOPIC, type HELP(CMPR.X) topic-name
For a complete list of all HELP, type HELP(CMPR.X) A - Z or
    if you want a hardcopy list of the HELP on the LP, type
      !LISTHELP.X CMPR.X ON,LP
.*B*
Th Th Th That's all folks!
.*K* DCBS
old= DCB1= F$OLD= The first (usually the earliest version) of the two
                  files being compare.
new= DCB2= F$NEW= The second of the two files being compared.
upd= DCB3= F$UPD= The updates produced by CMPR.
lst= DCB4= M$LO=  List of updates
 
.*K* COMMENTS
COMM[ents] = 'comment'
    Instructs CMPR to include 'comment' on all 'plus' records.
.*K* COMPRESS_BLANKS
C[ompress] B[lanks]
    Instructs CMPR to compress multiple occurrences of successive blanks down
    to just one blank.  This option also does an implied COMPRESS LEADING and
    COMPRESS TRAILING.  If, for some reason, you don't want leading and/or
    trailing blanks compressed, simply specify the DONT COMPRESS LEADING and/or
    DONT COMPRESS TRAILING options AFTER the COMPRESS BLANKS option.  This
    option may slow the compare process if the files being compared differ
    significantly.
.*K* COMPRESS_LEADING
C[ompress] L[eading] [B[lanks]]
    Instructs CMPR to compress multiple leading blanks down to just one blank
    for the comparisons.  This option may slow the compare process if the files
    being compared differ significantly.
.*K* COMPRESS_TRAILING
C[ompress] T[railing] [B[lanks]]
    Instructs CMPR to compress multiple trailing blanks down to just one blank
    for the comparisons.  This option may slow the compare process if the files
    being compared differ significantly.
.*K* DEFAULTS
    CMPR has a facility that allows each user to define his/her very own set of
defaults.  This is done via the use of an IBEX command variable
(CMPR_X_DEFAULTS).  Prior to invoking CMPR.X (typically done in the SETUP file
at logon time) you issue an IBEX LET command assigning a value to
CMPR_X_DEFAULTS equal to those options that you wish to be YOUR CMPR.X
defaults.  Then CMPR.X will automatically get default options from this command
variable and any other options from the command line.  If any default options
conflict with those entered on the command line, the one(s) specified on the
command line will be used.
.*B*
Example:
    Say that in the past you almost always specify the Ignore Trailing
Blanks option to CMPR.X.  To have it assumed, via defaults, simply do a:
  !LET CMPR_X_DEFAULTS='ITB'
command prior to invoking CMPR and ITB will be assumed!  If you did this
and on a particular compare didn't want trailing blanks ignored, simply specify
either the NO DEFAULTS option to ignore all defaults or DONT IGNORE TRAILING
BLANKS to override only the ITB option, like:
  !CMPR.X OVER file-to-receive(ND  " No Defaults "  or
  !CMPR.X OVER file-to-receive(DIT " Don't Ignore Trailing blanks "
.*K* DIFFERENCE
D[ifference]
    Requests that the difference in position of the same record(s) in the two
    files be printed.  This is done by subtracting the position (record number)
    of a record in 'old' from the same records position in 'new'.  This value
    is printed on the listing in parentheses and may be positive or negative.
.*K* DONT_COMPRESS_BLANKS
D[ont] C[ompress] B[lanks]
    Instructs CMPR to NOT compress multiple blanks down to one blank for
    comparisons.  This is the default but may be overridden via the COMPRESS
    BLANKS option.
.*K* DONT_COMPRESS_LEADING
D[ont] C[ompress] L[eading] [B[lanks]]
    Instructs CMPR to NOT compress multiple leading blanks down to one blank
    for comparisons.  This is the default but may be overridden via the
    COMPRESS LEADING BLANKS option.
.*K* DONT_COMPRESS_TRAILING
D[ont] C[ompress] T[railing] [B[lanks]]
    Instructs CMPR to NOT compress multiple trailing blanks down to one blank
    for comparisons.  This is the default but may be overridden via the
    COMPRESS TRAILING BLANKS option.
.*K* DONT_IGNORE_BLANKS
D[ont] I[gnore] B[lanks]
    Instructs CMPR to NOT ignore blanks during comparisons.  This is the
    default but may be overridden via the IGNORE BLANKS option.
.*K* DONT_IGNORE_LEADING
D[ont] I[gnore] L[eading] [B[lanks]]
    Instructs CMPR to NOT ignore leading blanks during comparisons.  This is
    the default but may be overridden via the IGNORE LEADING BLANKS option.
.*K* DONT_IGNORE_TRAILING
D[ont] I[gnore] T[railing] [B[lanks]]
    Instructs CMPR to NOT ignore trailing blanks during the comparisons.  This
    is the default but may be overridden via the IGNORE TRAILING BLANKS option.
.*K* DONT_IGNORE_VFC
D[ont] I[gnore] V[fc]
    Instructs CMPR to treat any VFC characters just like any other byte in the
    record.  This is the default but may be overridden via the IGNORE VFC
    option.
.*K* DONT_LIST_DELETES
D[ont] L[ist] [D[eletes]]
    Instructs CMPR to NOT list the lines that were deleted from the old-file.
    This is the default but may be overridden via the LIST DELETES option.
.*K* LIST_DELETES
LI[st] [D[eletes]]
    Requests that the line(s) being deleted from 'old' be listed, through M$LO,
    prior to listing the line(s) being kept from 'new'.  The line(s) being
    deleted are indicated on the listing by a 'D' about an inch from the left
    side of the listing.
.*K* IGNORE_BLANKS
I[gnore] B[lanks]
    Instructs CMPR to ignore any/all blanks during comparisons.  This option
    does an implied IGNORE LEADING and IGNORE TRAILING option.  If, for some
    reason, you don't want leading and/or trailing blanks ignored, simply
    specify the DONT IGNORE LEADING and/or DONT IGNORE TRAILING options AFTER
    the IGNORE BLANKS option.  This option may slow the compare process if the
    files being compared differ significantly.
.*K* IGNORE_LEADING
I[gnore] L[eading] [B[lanks]]
    Instructs CMPR to ignore any/all leading blanks during comparisons.  This
    option may slow the compare process if the files being compared differ
    significantly.
.*K* IGNORE_TRAILING
I[gnore] T[railing] [B[lanks]]
    Instructs CMPR to ignore any/all trailing blanks during comparisons.  This
    option may slow the compare process if the files being compared differ
    significantly.
.*K* IGNORE_RECORD_LENGTHS NO_TRAILING_BLANKS
{ I[gnore] R[ecord] L[engths] | N[o] T[railing] B[lanks] }
    Requests that record lengths are ignored in the record comparison logic.
    In this case, if the records being compared are not the same length, the
    shorter will be blank filled on the right for the compare.  This option may
    be handy when comparing a file with fixed length records with, say an, EDIT
    keyed file which throws away trailing blanks.
.*K* IGNORE_VFC
I[gnore] V[fc]
    Instructs CMPR to ignore any VFC characters in the compare process.  This
    option can be turned off via the DONT IGNORE VFC option.  This option was
    implemented by using the STRPVFC option on the M$READs.  For that reason,
    the actual VFC character will NOT be in the +updates produced.
.*K* MINIMUM HOLD
{ M[inimum] | H[old] } = value
    This indicates how many consecutive records must match before any are
    considered to match.  Generally, the default value of 6 works quite well on
    files that are different versions of the same file.  However, if two
    totally different (or close to it) files are being compared, it may be
    advisable to decrease MINIMUM.  This will significantly decrease the CPU
    time required to do the compare.
.*K* NO_DEFAULTS
N[o] D[efaults]
    Instructs CMPR to NOT use the CMPR_X_DEFAULTS to get its default options.
.*K* NO_DIFFERENCE
N[o] DI[fference]
    Instructs CMPR to NOT print the difference in position of the same record
    in the two files.  This is the default but may be overridden via the
    DIFFERENCE option.
.*K* NO_PATCH
N[o] P[atch]
    This option causes CMPR to treat a double quote (") like any other
    character.  This is the default but may be overridden via the PATCH option.
.*K* NO_STATISTICS
N[o] S[tatistics]
    Instructs CMPR to NOT print a summary of statistics at the completion of
    the compare process.  This is the default but may be overridden via the
    STATISTICS option.
.*K* NO_UPPERCASE CASELESS_COMPARES
N[o] U[pper] [C[ase]]
    Instructs CMPR that the "caseness" of records must match exactly (eg. AbCd
    is NOT the same as ABCD).  This is the default but may be overridden via
    the UPPERCASE option.
.*K* PATCH
P[atch]
    This option was intended to be used when comparing CP-6 patches.  When
    this option is specified, any characters that follow a double quote (")
    in the input records will be ignored.  This results in just the "code"
    portion of the patch being compared and the programmers initials, patch
    date, etc. will be ignored.  This option can be turned off via the NO PATCH
    option.
.*K* STATISTICS STATS
S[TATISTICS]
    Requests that additional statistics such as:
      Input buffer sizes
      Size of longest record(s) read from each file
      How much of the packing buffer was used
      How many times CMPR ran out of memory during the compare process
      The value of MINIMUM used
    be printed upon completion of the compare process.
.*K* UPPERCASE
U[pper] C[ase]
    Instructs CMPR to translate records to uppercase prior to any/all compares.
.*K* STEPCC
    CMPR sets the STEPCC to:
        0 if both files being compared appear to be identical
        2 if the compare was successful and updates were generated and
        4 if any unexpected errors (missing file, not enough memory, etc.)
          were detected.
.*K* OUTPUT_FORMATS
    CMPR will output updates through 0, 1 or 2 DCBs, depending on the presence
or absence of fids on the command line.  Generally, the actual updates are
output through F$UPD (DCB3, which defaults to 'ME') unless the 'lst' fid (M$LO)
is SET.  A formatted listing of the update(s) is output through 'lst' and
includes a sequential update line number, EDIT key or record number of the
update record, and the update record.  If you just want a summary of how many
updates will be produced, specify 'NO' as the 'upd' fid.
.*K* HOW_CMPR_WORKS
    CMPR begins by opening F$OLD and F$NEW.  If any errors occur, an
appropriate message is displayed and execution is terminated (with STEPCC set
to 4). Otherwise, CMPR acquires input buffers for F$OLD and F$NEW based on the
value of RCSZ from the files FIT.  If memory for these buffers is unavailable,
execution is terminated with an appropriate message and STEPCC is set to 4.
    Comparing goes something like this:  Records are read alternately from each
of the files until a mismatch is detected (maybe).  At this point, CMPR begins
to load records from the two files into memory, generally alternating from the
OLD and NEW files.  If CMPR thinks the file(s) are EDIT keyed, it retains the
key in memory as well.  After each read cycle (a record from each file is
read), all records in memory from each file are compared with all records from
the other file.  This comparison goes something like this.  Let O1,O2,...OL be
lines currently held in memory from F$OLD, with OL being the most recently
read.  Similarly, let N1,N2,...NL be lines from F$NEW.  Then CMPR compares
OL:NL, NL:O1, OL:N2, NL:O2, OL:N3, NL:O3, ... (keys, if any, do not effect the
comparison).  As soon as equals are found, the line numbers are added to the
stack.  If the lines are a continuation of an already found block of
consecutive pairs of equals then only the linecount (number of matches in the
block) is incremented.  As soon as any item (representing a block of equals) on
the stack is greater than or equal to MINIMUM in size, or whenever all
available memory is full, CMPR outputs appropriate updates, erases all memory
up to and including the largest block of equals found and goes back to start
the comparison cycle over again.
.*K* XINDEX
CMPR.X
.*R*
AID=UTILITY
.*R*
AID=PROGRAMMING
.*R*
FILE_MANIPULATION
.*R*
FILE_COMPARISON
.*R*
.*K* XINDEX_ABSTRACT
TOOL=CMPR
.*R*
Compares two files and generates plus cards to transform one file into the
other.
.*K* CHANGES Changes changes
07/03/92  RWL
.*R*
    Modified to complain if a file is being compared with itself.
    This will alert the user where "CMPR.X FOO,FOO.BAR" was specified
    and the user's default account is also .BAR instead of some other
    account that was assumed.
.*B*
07/31/89  TJC
.*R*
    Fixed the bug reported in star 38412 where the source file
    would be overwritten if the file name *G was specified for m$ou.
.*R*
03/21/89  TJC
.*R*
    The ILB option will now ignore blanks after the VFC character
    (star 32810).
.*R*
09/06/88  LPH
.*R*
    Fixed bug relating ONLY to the Ignore Blanks and/or Compress Blanks options
    which caused the last byte of records to be ignored in comparisons.
    Hence, if records differed only by their last byte, CMPR would
    consider them equal.
.*R*
03/03/87
.*R*
    Added the IGNORE VFC, DONT IGNORE VFC, PATCH and NO PATCH options.  Also
    made relative record numbers print on the listing for non-EDIT keyed files.
.*R*
01/18/86
.*R*
    Eliminated the "feature" that appended a 'G' on the end of the
    file name in DCB3 (F$UPD).  For further details, see star 27971.
.*R*
01/12/86
.*R*
    Added the "Fumble Fingered Typist" option which provides a shorthand
    method of specifying some of the fids on the command line.  For more
    details, see the second level of HELP on the default topic.
.*R*
07/09/84
.*R*
    Corrected problem that caused CMPR to include a stray ')' at the end of
    the "Options used:" line when the user included a ')' after the options on
    the command line.  Also, made the summary of "Options used" that appears on
    the M$LO listing also include any default values in effect at the time of
    the CMPR.
.*R*
06/12/84
.*R*
    Added the COMPRESS BLANKS, COMPRESS LEADING, COMPRESS TRAILING, DONT
    COMPRESS BLANKS, DONT COMPRESS LEADING, DONT COMPRESS TRAILING, DONT
    IGNORE BLANKS, DONT IGNORE LEADING, DONT IGNORE TRAILING, IGNORE BLANKS,
    IGNORE LEADING, IGNORE TRAILING, NO DEFAULTS, NO DIFFERENCE, NO STATISTICS,
    NO UPPERCASE and UPPERCASE options.  Also added a default option facility
    which allows a user to customize CMPRs defaults to suit his or her needs.
    Fixed the bug that caused the 'DCB F$OLD is already closed.' error
    message to be printed sometimes.
.*R*
06/02/84
    Applied first aid (a band-aid) to disable the use of FSF.  The band-aid
    prevents the possibility of getting a 'FMP-M00150-0  DCB F$OLD is already
    closed.' error.  The band-aid may be taken off (it's an ouchless band-aid)
    via a RUM of CMPR.X and doing a 'M ITS-FSF' and setting the sign (bit 0)
    bit.
.*R*
07/12/83
    Fixed CMPR so it doesn't trash your source file in rare cases.
.*R*
02/04/83
    Fixed bad patch from 01/26/83.
.*R*
01/26/83
    Fixed code to avoid getting 'Memory Faults' in very rare cases.
.*R*
12/01/82
    1) Fixed CMPR so it will compare files with LONG records correctly
       (e.g. Run Units).  Previously CMPR would Memory Fault on occasion.
 
    2) Added a subheading line to CMPRs output when the output doesn't go to
       ME.  The subheading contains the File Management Account at the time of
       the CMPR and the options, if any, that were specified.
.*X*
.*R*
.*K* OWNER
Lee Hallin, National Software Support / CP-6, LADC
 
 
 
 
