/*M* INSREC - Insert record tool */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* */
INSREC: PROC MAIN;
 
 
/**/
/* INCLUDE FILES */
/**/
%INCLUDE B_ERRORS_C;
%INCLUDE CP_6;
 
 
/**/
/* AUTO */
/**/
DCL I UBIN;
DCL J UBIN;
DCL SKIP BIT(1);
DCL FOUND BIT(1);
DCL BFR_NEW_LEN UBIN;
DCL BFR_OLD_LEN UBIN;
DCL F$SRCH1$ PTR;
DCL F$OLDCR$ PTR;
DCL F$NEW$ PTR;
DCL F$OLDIN$ PTR;
 
 
/**/
/* DCBS */
/**/
DCL F$SRCH1 DCB;
DCL F$NEW DCB;
DCL F$OLDIN DCB;
DCL F$OLDCR DCB;
DCL M$DO DCB;
 
 
/**/
/* STATIC */
/**/
DCL BFR_NEW CHAR(256) STATIC;
DCL BFR_OLD CHAR(256) STATIC;
DCL 1 FNAME STATIC,
      2 L UBIN(9) UNAL,
      2 C CHAR(31);
DCL NAME CHAR(32) STATIC;
DCL ACCOUNT CHAR(8) STATIC;
DCL ERRCODE BIT(36) STATIC;
DCL ERRDCB UBIN STATIC;
DCL EBUF(0:99) UBIN STATIC;
 
 
/**/
/* CONSTANT */
/**/
DCL MSG1 CHAR(0) CONSTANT INIT('New packet name not found in old file');
DCL MSG2 CHAR(0) CONSTANT INIT('New packet has no *M* or no name');
DCL MSG3 CHAR(0) CONSTANT INIT('Name of input file used instead');
 
 
/**/
/* BASED STRUCTURES */
/**/
%F$DCB;
%B$EXCFR;
%B$TCB (STCLASS="BASED(B$TCB$)");
 
 
/**/
/* EXTERNAL */
/**/
DCL B$TCB$ PTR SYMREF;
 
 
/**/
/* FPTS */
/**/
%FPT_OPEN (FPTN=FPT_OPNNEW,STCLASS=CONSTANT,DCB=F$NEW,FUN=IN);
%FPT_OPEN (FPTN=FPT_OPNOLDCR,STCLASS=CONSTANT,DCB=F$OLDCR,FUN=CREATE,EXIST=NEWFILE);
%FPT_OPEN (FPTN=FPT_OPNOLDIN,STCLASS=CONSTANT,DCB=F$OLDIN,FUN=IN,
           ASN=FILE,NAME=FNAME,ACCT=ACCOUNT);
%FPT_READ (FPTN=FPT_READNEW,DCB=F$NEW,BUF=BFR_NEW);
%FPT_READ (FPTN=FPT_READOLD,DCB=F$OLDIN,BUF=BFR_OLD);
%FPT_WRITE (FPTN=FPT_WRITE,DCB=F$OLDCR);
%FPT_WRITE (FPTN=FPT_WRITE_ERR,DCB=M$DO);
%FPT_PRECORD (FPTN=FPT_PRECNEW,DCB=F$NEW,N=-1);
%FPT_CLOSE (FPTN=FPT_CLOSE,DCB=F$OLDCR,DISP=SAVE);
%FPT_ERRMSG (CODE=ERRCODE,BUF=EBUF,OUTDCB1=M$DO,RESULTS=VLR_ERRMSG);
%VLR_ERRMSG;
%FPT_WAIT (UNITS=1);
%FPT_EXIT;
%EJECT;
 
 
        F$SRCH1$=DCBADDR(DCBNUM(F$SRCH1));
        F$OLDCR$=DCBADDR(DCBNUM(F$OLDCR));
        F$NEW$=DCBADDR(DCBNUM(F$NEW));
        F$OLDIN$=DCBADDR(DCBNUM(F$OLDIN));
        SKIP='0'B;
        FOUND='0'B;
        CALL M$OPEN(FPT_OPNNEW) ALTRET(OPNNEWERR);
OPNCR:  ;
        CALL M$OPEN(FPT_OPNOLDCR) ALTRET(OPNOLDCRERR);
        FNAME=F$OLDCR$->F$DCB.NAME#;
        ACCOUNT=F$OLDCR$->F$DCB.ACCT#;
OPNIN:  ;
        CALL M$OPEN(FPT_OPNOLDIN) ALTRET(OPNOLDINERR);
/**/
        CALL M$READ(FPT_READNEW) ALTRET(READNEWERR);
        BFR_NEW_LEN=F$NEW$->F$DCB.ARS#;
        IF BFR_NEW_LEN<8 THEN
           GOTO NEWNONAME;
        CALL INDEX(I,'/*M*',SUBSTR(BFR_NEW,0,BFR_NEW_LEN)) ALTRET(NEWNONAME);
        I=I+4;
        J=0;
        DO WHILE(J=0);
           I=I+1;
           IF I>=BFR_NEW_LEN THEN
              GOTO NEWNONAME;
           CALL INDEX1(J,' ',SUBSTR(BFR_NEW,I,BFR_NEW_LEN-I)) ALTRET(NEWNONAME);
           END;
        NAME=SUBSTR(BFR_NEW,I,J);
        IF NAME=' ' THEN
           GOTO NEWNONAME;
GOTNAME: ;
/**/
/**/
        DO WHILE('1'B);
READOLD:   ;
           CALL M$READ(FPT_READOLD) ALTRET(READOLDERR);
           BFR_OLD_LEN=F$OLDIN$->F$DCB.ARS#;
           IF NOT FOUND AND BFR_OLD_LEN>8 THEN
           DO;
              CALL INDEX(I,'/*M*',SUBSTR(BFR_OLD,0,BFR_OLD_LEN)) ALTRET(WRITEOLD);
              I=I+4;
              J=0;
              DO WHILE(J=0);
                 I=I+1;
                 IF I>= BFR_OLD_LEN THEN
                    GOTO WRITEOLD;
                 CALL INDEX1(J,' ',SUBSTR(BFR_OLD,I,BFR_OLD_LEN-I));
                 END;
              IF NAME=SUBSTR(BFR_OLD,I,J) THEN
              DO;
                 FOUND='1'B;
                 SKIP='1'B;
                 DO WHILE('1'B);
                    IF BFR_NEW_LEN=0 THEN
                       FPT_WRITE.BUF_=VECTOR(NIL);
                    ELSE
                    DO;
                       FPT_WRITE.BUF_=VECTOR(BFR_NEW);
                       FPT_WRITE.BUF_.BOUND=BFR_NEW_LEN-1;
                       END;
                    CALL M$WRITE(FPT_WRITE) ALTRET(WRITEERR);
                    CALL M$READ(FPT_READNEW) ALTRET(RNEWERR);
                    BFR_NEW_LEN=F$NEW$->F$DCB.ARS#;
                    END;
RNEWERR:         ;
                 IF B$TCB.ALT$->B$EXCFR.ERR.CODE~=%E$EOF THEN
                 DO;
                    ERRDCB=DCBNUM(F$NEW);
                    ERRCODE=B$TCB.ALT$->B$EXCFR.ERR;
                    GOTO ERROR;
                    END;
                 GOTO READOLD;
                 END;
              END;
/**/
           IF SKIP THEN
              IF BFR_OLD_LEN>8 THEN
              DO;
                 CALL INDEX(I,'/*M*',SUBSTR(BFR_OLD,0,BFR_OLD_LEN))ALTRET(READOLD);
                 SKIP='0'B;
                 END;
              ELSE
                 GOTO READOLD;
/**/
WRITEOLD:  ;
           IF BFR_OLD_LEN=0 THEN
              FPT_WRITE.BUF_=VECTOR(NIL);
           ELSE
           DO;
              FPT_WRITE.BUF_=VECTOR(BFR_OLD);
              FPT_WRITE.BUF_.BOUND=BFR_OLD_LEN-1;
              END;
           CALL M$WRITE(FPT_WRITE) ALTRET(WRITEERR);
           END;
/**/
READOLDERR: ;
        IF B$TCB.ALT$->B$EXCFR.ERR.CODE~=%E$EOF THEN
        DO;
           ERRCODE=B$TCB.ALT$->B$EXCFR.ERR;
           ERRDCB=DCBNUM(F$OLDIN);
           GOTO ERROR;
           END;
        IF NOT FOUND AND NOT SKIP THEN
        DO;
           FPT_WRITE_ERR.BUF_=VECTOR(MSG1);
           GOTO WRITE_ERR;
           END;
        CALL M$CLOSE(FPT_CLOSE);
        CALL M$EXIT(FPT_EXIT);
/**/
/**/
OPNNEWERR: ;
        ERRCODE=B$TCB.ALT$->B$EXCFR.ERR;
        ERRDCB=DCBNUM(F$NEW);
        GOTO ERROR;
/**/
/**/
OPNOLDCRERR: ;
        IF B$TCB.ALT$->B$EXCFR.ERR.CODE=%E$FILEBUSY THEN
        DO;
           CALL M$WAIT(FPT_WAIT);
           GOTO OPNCR;
           END;
/**/
/**/
OPNOLDINERR: ;
        IF B$TCB.ALT$->B$EXCFR.ERR.CODE~=%E$NOFILE THEN
        DO;
SETERR:    ;
           ERRCODE=B$TCB.ALT$->B$EXCFR.ERR;
           ERRDCB=DCBNUM(F$OLDIN);
           GOTO ERROR;
           END;
        IF ACCOUNT~=F$SRCH1$->F$DCB.ACCT# THEN
        DO;
           ACCOUNT=F$SRCH1$->F$DCB.ACCT#;
           GOTO OPNIN;
           END;
        GOTO SETERR;
/**/
/**/
READNEWERR: ;
        ERRCODE=B$TCB.ALT$->B$EXCFR.ERR;
        ERRDCB=DCBNUM(F$NEW);
        GOTO ERROR;
/**/
/**/
NEWNONAME: ;
        FPT_WRITE_ERR.BUF_=VECTOR(MSG2);
        CALL M$WRITE (FPT_WRITE_ERR);
        FPT_WRITE_ERR.BUF_=VECTOR(MSG3);
        CALL M$WRITE(FPT_WRITE_ERR);
        NAME=F$NEW$->F$DCB.NAME#.C;
        CALL CONCAT(BFR_NEW,'/*M* ',NAME,' */');
        BFR_NEW_LEN=8+SIZEC(NAME);
        CALL M$PRECORD(FPT_PRECNEW);
        FPT_EXIT.V.STEPCC#=2;
        GOTO GOTNAME;
/**/
/**/
WRITEERR: ;
        ERRCODE=B$TCB.ALT$->B$EXCFR.ERR;
        ERRDCB=DCBNUM(F$OLDCR);
        GOTO ERROR;
/**/
/**/
WRITE_ERR: ;
        CALL M$WRITE(FPT_WRITE_ERR);
        CALL M$XXX;
/**/
/**/
ERROR:  ;
        FPT_ERRMSG.V.DCB#=ERRDCB;
        CALL M$ERRMSG(FPT_ERRMSG);
        CALL M$XXX;
/**/
/**/
END INSREC;
