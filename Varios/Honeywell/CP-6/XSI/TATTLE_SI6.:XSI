/*M*     TATTLE - Tell of Arrival of TesTcases via a LEtter  */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X*       DMR,PLM=5,IND=5,CTI=5,SDI=5,CSI=0,ECI=0           */
/*                                                           */
/*  'TATTLE' - This routine finds the testcase in the given  */
/*       account that have been modified in the given range  */
/*       and relays the information of there arrival via the */
/*       the MAIL system.                                    */
/*  Note:  TATTLE relies on the normal execution of the      */
/*       following processors:                               */
/*            PCL, EDIT, STARLOG, IBEX                       */
/*                                                           */
/*            Chip Sands, April 6,1982                       */
/*                                                           */
/*************************************************************/
TATTLE: PROC MAIN;
%INCLUDE CP_6;
%INCLUDE XU_MACRO_C;
%INCLUDE XU_SUBS_C;
%INCLUDE XU_PERR_C;
%INCLUDE B$JIT;
%INCLUDE TATTLE_C;
%EJECT;
%SUB NEVER = "WHILE ('0'B)";
%SUB FOREVER = "WHILE ('1'B)";
 
%VLP_NAME (FPTN = FILE_NAME);
%VLP_NAME (FPTN = LINK_NAME);
%VLP_ACCT (FPTN = LINK_ACCT);
%VLR_FID;
%VLP_PASS;
DCL FILE_ASN CHAR (2) STATIC;
%FPT_UNFID (ACCT = LINK_ACCT,
    TEXTFID = FID_TEXT);
%FPT_FID (ACCT = LINK_ACCT,
    RES = VLR_FID,
    NAME = LINK_NAME,
    ASN = FILE_ASN,
    PASS = VLP_PASS,
    TEXTFID = FID_TEXT);
 
%FPT_LINK (ACCT = LINK_ACCT,
    NAME = LINK_NAME);
%EJECT;
/*
    Decalare all needed FPTs for file that PCL created containing
    all the files that have been modified in the range of the given
    time span specified in the given options.
*/
%FPT_OPEN (FPTN = NEWFILES_OPEN,
    DCB = T$NF,
    FUN = IN,
    ASN = FILE,
    CTG=YES,
    NAME = FILE_NAME);
 
%FPT_CLOSE (FPTN = NEWFILES_CLOSE,
    DCB = T$NF,
    DISP = RELEASE);
 
%FPT_READ (FPTN = NEWFILES_READ,
    DCB = T$NF,
    BUF = IO_BUF);
%EJECT;
%FPT_OPEN (FPTN = JF_OPEN,
    DCB = T$JF,
    ASN = DEVICE,
    CTG = YES,
    FUN = CREATE,
    RES = 'JF');
 
%FPT_CLOSE (FPTN = JF_CLOSE,
    DISP = SAVE,
    DCB = T$JF);
 
%FPT_WRITE (FPTN = JF_WRITE,
    DCB = T$JF);
%EJECT;
%FPT_WRITE (FPTN = ABORT_WRITE,
    DCB = M$DO,
    BUF = ABORT_BUF);
%EJECT;
/*
    Declare all needed FPTs for file access the file containing
    the TESTCASES determaned good after the parse of the new
    file names found in *NEWFILES.
*/
%FPT_OPEN (FPTN = TESTCASE_OPEN,
    DCB = T$TC,
    FUN = CREATE,
    ASN = FILE,
    CTG = YES,
    NAME = FILE_NAME);
 
%FPT_CLOSE (FPTN = TESTCASE_CLOSE_SAVE,
    DCB = T$TC,
    DISP = SAVE);
 
%FPT_CLOSE (FPTN = TESTCASE_CLOSE_RELEASE,
    DCB = T$TC,
    DISP = RELEASE);
 
%FPT_WRITE (FPTN = TESTCASE_WRITE,
    DCB = T$TC,
    BUF = IO_BUF);
 
%FPT_READ (FPTN = TESTCASE_READ,
    DCB = T$TC,
    BUF = IO_BUF);
 
%EJECT;
/*
    Declare all needed FPTs for file access the file containing
    the STARS determaned good after the parse of the new
    file names found in *NEWFILES.
*/
%FPT_OPEN (FPTN = STAR_OPEN,
    DCB = T$ST,
    FUN = CREATE,
    ASN = FILE,
    CTG = YES,
    NAME = FILE_NAME);
 
%FPT_CLOSE (FPTN = STAR_CLOSE_SAVE,
    DCB = T$ST,
    DISP = SAVE);
 
%FPT_CLOSE (FPTN = STAR_CLOSE_RELEASE,
    DCB = T$ST,
    DISP = RELEASE);
 
%FPT_WRITE (FPTN = STAR_WRITE,
    DCB = T$ST);
 
%FPT_READ (FPTN = STAR_READ,
    DCB = T$ST,
    BUF = MAIL_SUBJECT.STAR);
 
%EJECT;
%FPT_OPEN (FPTN = PROGNAM_OPEN,
    DCB = T$PN,
    FUN = IN,
    ASN = FILE,
    NAME = FILE_NAME);
 
%FPT_CLOSE (FPTN = PROGNAM_CLOSE,
    DCB = T$PN,
    DISP = RELEASE);
 
%FPT_READ (FPTN = PROGNAM_READ,
    DCB = T$PN,
    BUF = NAME_PARSE);
 
%EJECT;
%FPT_OPEN (FPTN = TALE_OPEN,
    DCB = T$TA,
    FUN = CREATE,
    ASN = FILE,
    NAME = FILE_NAME);
 
%FPT_CLOSE (FPTN = TALE_CLOSE,
    DCB = T$TA,
    DISP = SAVE);
 
%FPT_WRITE (FPTN = TALE_WRITE,
    DCB =T$TA,
    BUF = IO_BUF);
 
%EJECT;
/*
    Parse junk
*/
%PARSE$SYM (NAME = P$SYM);
%PARSE$OUT (NAME = P$BLK);
%P_PCB (NAME = TESTCASE_PCB,
    T = IO_BUF,
    N# = 32,
    W = PARSER_WORKSPACE,
    WSZ = 512,
    R = STAR_NODE);
 
%P_PCB (NAME = OPTIONS_PCB,
    T = IO_BUF,
    W = PARSER_WORKSPACE,
    WSZ = 512,
    R = TATTLE_OPTIONS);
 
%P_PCB (NAME = NAME_PCB,
    T = NAME_PARSE,
    N# = 32,
    W = PARSER_WORKSPACE,
    WSZ = 512,
    R = NAME_NODE);
%EJECT;
/* Command lines to be sent via a LINK to PCL
*/
DCL 1 TALE_CMD STATIC ALIGNED,
         2 * UBIN (9) INIT (39) UNAL,
         2 * CHAR (7) INIT ('C TALE_') UNAL,
         2 PT CHAR (1),
         2 ACCOUNT CHAR (9) UNAL,
         2 * CHAR (22) INIT (' OVER *NEWFILES') UNAL;
 
DCL 1 ACCOUNT_CMD STATIC ALIGNED,
         2 * UBIN (9) INIT (51) UNAL,
         2 * CHAR (3) INIT ('L .') UNAL,
         2 ACCOUNT CHAR (9) UNAL,
         2 * CHAR (16) INIT (' (C=0,DATEM >= -') UNAL,
         2 SPAN CHAR (4) UNAL,
         2 * CHAR (19) INIT (' ) INTO *NEWFILES') UNAL;
 
DCL 1 OLD_CMD STATIC ALIGNED,
         2 * UBIN (9) INIT (51) UNAL,
         2 * CHAR (3) INIT ('L .') UNAL,
         2 ACCOUNT CHAR (9) UNAL,
         2 * CHAR (16) INIT (' (C=0,DATEM <= -') UNAL,
         2 SPAN CHAR (4) UNAL,
         2 * CHAR (19) INIT (' ) OVER *NEWFILES') UNAL;
%EJECT;
/* All the command sent thru JF
*/
DCL STARLOG_CMD (0:12) CHAR (40) STATIC INIT (
    '!STARLOG',
    'WHEN STAR:DISPLAY PROGNAM',
    'WHEN FIND STAR:DISPLAY PROGNAME',
    'OUTPUT OVER *PROGNAM',
    'END',
    '!C *PROGNAM OVER *PROGNAM (LN,NVFC)',
    '!EDIT *PROGNAM',
    '/***/A19',
    '19A1',
    'IF / /,1,1;DE;EI',
    'END',
    '!TATTLE. (SEND)');
 
DCL 1 MAIL_TO STATIC ALIGNED,
         2 * CHAR (4) INIT ('TO: ') CALIGNED,
         2 SENDIE CHAR (32) CALIGNED;
 
DCL 1 MAIL_FROM STATIC ALIGNED,
         2 * CHAR (6) INIT ('FROM: ') UNAL,
         2 SENDER CHAR (30) INIT ('TATTLE') UNAL;
 
DCL 1 MAIL_SUBJECT STATIC ALIGNED,
         2 * CHAR (9) INIT ('SUBJECT: ') UNAL,
         2 TEXT CHAR (56) UNAL,
         2 * CHAR (6) INIT ('STAR: ') UNAL,
         2 STAR CHAR (5) UNAL;
 
DCL 1 MAIL_BODY STATIC ALIGNED,
         2 TEXT CHAR (56) UNAL;
 
DCL MAIL_SEND CHAR (0) STATIC INIT ('!SEND');
DCL MAIL_EOD CHAR (4) STATIC INIT ('!EOD');
%EJECT;
/*
    Declare DCBs
*/
DCL T$NF DCB;
DCL T$TC DCB;
DCL M$LO DCB;
DCL T$JF DCB;
DCL M$DO DCB;
DCL T$ST DCB;
DCL T$PN DCB;
DCL T$TA DCB;
DCL M$SI DCB;
%EJECT;
/*
    Parser and other interesting junk
*/
DCL X$PARSE ENTRY (1) ALTRET;
DCL PARSER_WORKSPACE (0:511) SBIN STATIC;
 
DCL IO_BUF CHAR (32) STATIC;
DCL ABORT_BUF CHAR (80) STATIC;
DCL NAME_PARSE CHAR (32) STATIC;
 
DCL SLIX UBIN WORD STATIC;
 
DCL BLK$ PTR;
DCL B$JIT$ PTR SYMREF;
 
DCL TATTLE_OPTIONS UBIN WORD SYMREF;
DCL STAR_NODE SBIN WORD SYMREF;
DCL NAME_NODE UBIN WORD SYMREF;
 
DCL OLDOPT BIT (1) STATIC INIT ('0'B) ALIGNED;
DCL TALEOPT BIT (1) STATIC INIT ('0'B) UNAL;
DCL SENDOPT BIT (1) STATIC INIT ('0'B) UNAL;
DCL TEST BIT (1) STATIC INIT ('1'B) UNAL;
DCL NOSENDOPT BIT (1) STATIC INIT ('0'B) UNAL;
DCL SKIP BIT (1) STATIC INIT ('0'B) UNAL;
 
DCL MAIL_FL CHAR (50) STATIC;
DCL FID_TEXT CHAR (15) STATIC;
DCL STARNR UBIN WORD STATIC;
DCL 1 STARC ALIGNED BASED (STARNR$),
         2 LEN UBIN (9) UNAL,
         2 TEXT CHAR (STARC.LEN);
 
DCL STARNR$ PTR STATIC INIT (ADDR(NIL));
DCL STAR_SAVE UBIN WORD STATIC;
DCL SEARCH_SPAN CHAR (3) STATIC;
DCL LITTLE_STAR UBIN WORD STATIC;
DCL TYPE CHAR (3) STATIC INIT ('NOP');
DCL PT CHAR (1) STATIC INIT ('T');
DCL CCBUF$ PTR;
DCL CCBUF CHAR (CCBUF_LEN) BASED (CCBUF$);
DCL CCBUF_LEN UBIN (9) STATIC INIT (120);
DCL N UBIN WORD STATIC;
%EJECT;
     CALL GET_OPT ALTRET (STOP_IT);
     IF NOT SENDOPT
     THEN
     DO;
          CALL LIST_ACCOUNT ALTRET (STOP_IT);
          CALL FIND_VALID_STARNR ALTRET (STOP_IT);
        END;
     ELSE
          CALL MAKE_LETTERS ALTRET (STOP_IT);
     CALL M$EXIT;
STOP_IT: ;
     CALL M$XXX;
%EJECT;
GET_OPT: PROC ALTRET;
     TEST = '1'B;
     LITTLE_STAR = 1000;
     SEARCH_SPAN = '1';
     FPT_UNFID.V.DCB# = DCBNUM (M$SI);
     CALL M$UNFID (FPT_UNFID) ALTRET (NOACC);
     CALL M$FID (FPT_FID);
     IF LINK_ACCT.ACCT# = '#CR'
          OR LINK_ACCT.ACCT# = ' '
     THEN
     DO;
NOACC:    ;
          ACCOUNT_CMD.ACCOUNT = B$JIT.ACCN;
          OLD_CMD.ACCOUNT = B$JIT.ACCN;
        END;
     ELSE
     DO;
          ACCOUNT_CMD.ACCOUNT = LINK_ACCT.ACCT#;
          OLD_CMD.ACCOUNT = ACCOUNT_CMD.ACCOUNT;
        END;
 
     OPTIONS_PCB.NCHARS = B$JIT.CCARS - B$JIT.CCDISP;
     IF OPTIONS_PCB.NCHARS > 0
     THEN
     DO;
          CCBUF$ = PINCRC (ADDR (B$JIT.CCBUF),B$JIT.CCDISP);
          IO_BUF = CCBUF;
          CALL X$PARSE (OPTIONS_PCB) ALTRET (BADOPT);
 
          DO N = 0 TO OPTIONS_PCB.OUT$ -> P$BLK.NSUBLKS - 1;
               DO CASE (OPTIONS_PCB.OUT$ -> P$BLK.SUBLK$ (N) -> P$BLK.CODE);
               CASE (%TALE);
                  TALEOPT = '1'B;
               CASE (%OLD);
                  OLDOPT = '1'B;
                  TYPE = 'OLD';
               CASE (%TEST);
                  TEST = '1'B;
                  PT = 'T';
               CASE (%PATCH);
                  TEST = '0'B;
                  PT = 'P';
               CASE (%STAR);
                  STARNR$ = OPTIONS_PCB.OUT$ -> P$BLK.SUBLK$ (N) ->
                       P$BLK.SUBLK$ (0) -> P$SYM.TEXTC$;
                  CALL CHARBIN (LITTLE_STAR,STARC.TEXT);
               CASE (%SPAN);
                  SEARCH_SPAN = OPTIONS_PCB.OUT$ -> P$BLK.SUBLK$ (N) ->
                       P$BLK.SUBLK$ (0) -> P$SYM.TEXT;
               CASE (%SEND);
                  SENDOPT = '1'B;
               CASE (%NOSEND);
                  NOSENDOPT = '1'B;
               END;
             END;
        END;
 
     ACCOUNT_CMD.SPAN = SEARCH_SPAN;
     OLD_CMD.SPAN = SEARCH_SPAN;
     TALE_CMD.ACCOUNT = ACCOUNT_CMD.ACCOUNT;
     TALE_CMD.PT = PT;
 
     CCBUF$ = ADDR (B$JIT.CCBUF);
     CCBUF_LEN = B$JIT.CCDISP;
     CALL CONCAT (STARLOG_CMD (11),'!',CCBUF,
          ' (SEND,',TYPE,',',PT);
 
     RETURN;
BADOPT: ;
     ALTRETURN;
END GET_OPT;
%EJECT;
LIST_ACCOUNT: PROC ALTRET;
 
     LINK_NAME.L# = 3;
     LINK_NAME.NAME# = 'PCL';
 
     LINK_ACCT.ACCT# = ':SYS';
 
     IF NOT OLDOPT
     THEN
     DO;
          FPT_LINK.CMD_ = VECTOR (TALE_CMD);
          CALL M$LINK (FPT_LINK) ALTRET (LA_ALT);
          IF NOT TALEOPT
          THEN
          DO;
               FPT_LINK.CMD_ = VECTOR (ACCOUNT_CMD);
               CALL M$LINK (FPT_LINK) ALTRET (LA_ALT);
             END;
        END;
     ELSE
     DO;
          FPT_LINK.CMD_ = VECTOR (OLD_CMD);
          CALL M$LINK (FPT_LINK) ALTRET (LA_ALT);
        END;
 
     RETURN;
 
LA_ALT: ;
     ALTRETURN;
END LIST_ACCOUNT;
%EJECT;
FIND_VALID_STARNR: PROC ALTRET;
 
     FILE_NAME.NAME# = '*NEWFILES';
     FILE_NAME.L# = 9;
     CALL M$OPEN (NEWFILES_OPEN) ALTRET (FVS_NOFILES);
     FILE_NAME.NAME# = '*TESTCASE';
     FILE_NAME.L# = 9;
     CALL M$OPEN (TESTCASE_OPEN) ALTRET (FVS_ABORT);
     CALL M$OPEN (JF_OPEN) ALTRET (FVS_ABORT);
     FILE_NAME.NAME# = '*STAR';
     FILE_NAME.L# = 5;
     CALL M$OPEN (STAR_OPEN) ALTRET (FVS_ABORT);
 
     IO_BUF = ' ';
     CALL M$READ (NEWFILES_READ) ALTRET (FVS_NOFILES);
 
     DO SLIX = 0 TO 3 BY 1;
          JF_WRITE.BUF_ = VECTOR (STARLOG_CMD (SLIX));
          CALL M$WRITE (JF_WRITE) ALTRET (FVS_ABORT);
        END;
 
     DO FOREVER;
          CALL X$PARSE (TESTCASE_PCB) ALTRET (FVS_BADSTARNR);
          DO CASE (TESTCASE_PCB.OUT$ -> P$BLK.CODE);
          CASE (%STARBEG,%STARALL);
             STARNR$ = (TESTCASE_PCB.OUT$ ->
                  P$BLK.SUBLK$ (0) -> P$SYM.TEXTC$);
          CASE (%STARMID);
             STARNR$ = (TESTCASE_PCB.OUT$ ->
                  P$BLK.SUBLK$ (1) -> P$SYM.TEXTC$);
          CASE (%STAREND);
             STARNR$ = (TESTCASE_PCB.OUT$ ->
                  P$BLK.SUBLK$ (1) -> P$SYM.TEXTC$);
          END;
 
          CALL CHARBIN (STARNR,STARC.TEXT);
          IF STARNR < LITTLE_STAR
          THEN
               GOTO FVS_BADSTARNR;
 
          JF_WRITE.BUF_ = VECTOR (STARC.TEXT);
          STAR_WRITE.BUF_ = VECTOR (STARC.TEXT);
          CALL M$WRITE (STAR_WRITE) ALTRET (FVS_ABORT);
          CALL M$WRITE (JF_WRITE) ALTRET (FVS_ABORT);
          CALL M$WRITE (TESTCASE_WRITE) ALTRET (FVS_ABORT);
 
          DO NEVER;
FVS_BADSTARNR: ;
               ABORT_BUF = IO_BUF;
               CALL M$WRITE (ABORT_WRITE);
             END;
 
          IO_BUF = ' ';
          CALL M$READ (NEWFILES_READ) ALTRET (FVS_DONE);
        END;
 
FVS_DONE: ;
     DO SLIX = 4 TO 10 BY 1;
          JF_WRITE.BUF_ = VECTOR (STARLOG_CMD (SLIX));
          CALL M$WRITE (JF_WRITE) ALTRET (FVS_ABORT);
        END;
     IF NOT NOSENDOPT
     THEN
     DO;
          JF_WRITE.BUF_ = VECTOR (STARLOG_CMD (11));
          CALL M$WRITE (JF_WRITE) ALTRET (FVS_ABORT);
        END;
 
     CALL M$CLOSE (STAR_CLOSE_SAVE) ALTRET (FVS_ABORT);
     CALL M$CLOSE (JF_CLOSE);
     CALL M$CLOSE (TESTCASE_CLOSE_SAVE);
     CALL M$CLOSE (NEWFILES_CLOSE);
 
     DO NEVER;
FVS_ABORT: ;
          ABORT_BUF = 'Aborting in FVS module';
          CALL M$WRITE (ABORT_WRITE);
          ALTRETURN;
        END;
 
FVS_NOFILES: ;
 
     RETURN;
END FIND_VALID_STARNR;
%EJECT;
MAKE_LETTERS: PROC ALTRET;
 
     IF OLDOPT
     THEN
          IF TEST
          THEN
          DO;
               PT = 'O';
               CALL CONCAT (MAIL_SUBJECT.TEXT,
                    'Old Testcase (s) still exist in account ',
                    ACCOUNT_CMD.ACCOUNT);
 
               MAIL_FL = 'Please delete testcase(s) when no longer needed';
             END;
          ELSE
          DO;
               PT = 'O';
               CALL CONCAT (MAIL_SUBJECT.TEXT,
                    'Old Patch (es) still exist in account ',
                    ACCOUNT_CMD.ACCOUNT);
 
               MAIL_FL = 'Please delete Patch (es) when no longer needed';
             END;
     ELSE
          IF TEST
          THEN
          DO;
               CALL CONCAT (MAIL_SUBJECT.TEXT,
                    'Testcase (s) have arrived in account ',
                    ACCOUNT_CMD.ACCOUNT);
 
               MAIL_FL = 'Testcase (s):';
             END;
          ELSE
          DO;
               CALL CONCAT (MAIL_SUBJECT.TEXT,
                    'Bad patch (es) have been place in account ',
                    ACCOUNT_CMD.ACCOUNT);
 
               MAIL_FL = 'Bad patch (es):';
             END;
     FILE_NAME.NAME# = '*STAR';
     FILE_NAME.L# = 5;
     STAR_OPEN.V.FUN# = 2;
     CALL M$OPEN (STAR_OPEN) ALTRET (ML_ABORT);
 
     FILE_NAME.NAME# = '*TESTCASE';
     FILE_NAME.L# = 9;
     TESTCASE_OPEN.V.FUN# = 2;
     CALL M$OPEN (TESTCASE_OPEN) ALTRET (ML_ABORT);
 
     FILE_NAME.NAME# = '*PROGNAM';
     FILE_NAME.L# = 8;
     CALL M$OPEN (PROGNAM_OPEN) ALTRET (ML_ABORT);
 
     CALL INDEX1 (SLIX,' ',ACCOUNT_CMD.ACCOUNT) ALTRET (ML_ABORT);
     FILE_NAME.L# = SLIX + 6;
     CALL CONCAT (FILE_NAME.NAME#,'TALE_',PT,ACCOUNT_CMD.ACCOUNT) ALTRET (ML_ABORT);
     CALL M$OPEN (TALE_OPEN) ALTRET (ML_ABORT);
 
     CALL M$OPEN (JF_OPEN) ALTRET (ML_ABORT);
 
     MAIL_SUBJECT.STAR = ' ';
     CALL M$READ (STAR_READ) ALTRET (ML_ABORT);
 
     NAME_PARSE = ' ';
     CALL M$READ (PROGNAM_READ) ALTRET (ML_ABORT);
 
     IO_BUF = ' ';
     CALL M$READ (TESTCASE_READ) ALTRET (ML_ABORT);
 
     CALL CHARBIN (STARNR,MAIL_SUBJECT.STAR);
     STAR_SAVE = STARNR;
 
     DO FOREVER;
          IF NAME_PARSE = '*** Nothing found'
               OR NAME_PARSE = 'UNASSIGNED'
          THEN
          DO;
               CALL M$WRITE (TALE_WRITE) ALTRET (ML_ABORT);
               STAR_SAVE = 0;
               SKIP = '1'B;
               GOTO NEXT_STAR;
             END;
 
          CALL X$PARSE (NAME_PCB) ALTRET (ML_ABORT);
 
          CALL CONCAT (MAIL_TO.SENDIE,NAME_PCB.OUT$ -> P$BLK.SUBLK$ (1) ->
               P$SYM.TEXT,' ',NAME_PCB.OUT$ -> P$BLK.SUBLK$ (0) -> P$SYM.TEXT);
 
          JF_WRITE.BUF_ = VECTOR (MAIL_SEND);
          CALL M$WRITE (JF_WRITE) ALTRET (ML_ABORT);
 
          JF_WRITE.BUF_ = VECTOR (MAIL_TO);
          CALL M$WRITE (JF_WRITE) ALTRET (ML_ABORT);
 
          JF_WRITE.BUF_ = VECTOR (MAIL_FROM);
          CALL M$WRITE (JF_WRITE) ALTRET (ML_ABORT);
 
          JF_WRITE.BUF_ = VECTOR (MAIL_SUBJECT);
          CALL M$WRITE (JF_WRITE) ALTRET (ML_ABORT);
 
          MAIL_BODY.TEXT = MAIL_FL;
          JF_WRITE.BUF_ = VECTOR (MAIL_BODY);
          CALL M$WRITE (JF_WRITE) ALTRET (ML_ABORT);
 
SAME_STAR: ;
          MAIL_BODY.TEXT = IO_BUF;
          JF_WRITE.BUF_ = VECTOR (MAIL_BODY);
          CALL M$WRITE (JF_WRITE) ALTRET (ML_ABORT);
 
NEXT_STAR: ;
          MAIL_SUBJECT.STAR = ' ';
          CALL M$READ (STAR_READ) ALTRET (ML_DONE);
 
          CALL CHARBIN (STARNR,MAIL_SUBJECT.STAR);
 
          NAME_PARSE = ' ';
          CALL M$READ (PROGNAM_READ) ALTRET (ML_ABORT);
 
          IO_BUF = ' ';
          CALL M$READ (TESTCASE_READ) ALTRET (ML_ABORT);
 
          IF STAR_SAVE = STARNR
          THEN
               GOTO SAME_STAR;
 
          STAR_SAVE = STARNR;
 
          IF NOT SKIP
          THEN
          DO;
               JF_WRITE.BUF_ = VECTOR (NIL);
               CALL M$WRITE (JF_WRITE) ALTRET (ML_ABORT);
 
             END;
          SKIP = '0'B;
 
        END;
ML_DONE: ;
     JF_WRITE.BUF_ = VECTOR (NIL);
     CALL M$WRITE (JF_WRITE) ALTRET (ML_ABORT);
     JF_WRITE.BUF_ = VECTOR (MAIL_EOD);
     CALL M$WRITE (JF_WRITE) ALTRET (ML_ABORT);
 
 
     CALL M$CLOSE (JF_CLOSE) ALTRET (ML_ABORT);
     CALL M$CLOSE (PROGNAM_CLOSE) ALTRET (ML_ABORT);
     CALL M$CLOSE (STAR_CLOSE_RELEASE) ALTRET (ML_ABORT);
     CALL M$CLOSE (TESTCASE_CLOSE_RELEASE) ALTRET (ML_ABORT);
     CALL M$CLOSE (TALE_CLOSE) ALTRET (ML_ABORT);
     RETURN;
ML_ABORT: ;
     ALTRETURN;
END MAKE_LETTERS;
END TATTLE;
