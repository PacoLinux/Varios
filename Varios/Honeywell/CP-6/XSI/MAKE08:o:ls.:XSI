

rCC.C03    File=MAKE_SIc08.:XSI                                                      Thu Nov 20 1997  Page=1  
A        1         1             /*M*    make_main:c    --    MAKE main execution driver          */
A        2         2             /*T***********************************************************/
A        3         3             /*T*                                                         */
A        4         4             /*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
A        5         5             /*T*                                                         */
A        6         6             /*T***********************************************************/
A        7         7
A        8         8             #include <stdio.h>
A        9         9             #include <stdlib.h>
A       10        10             #include <string.h>
A       11        11             #include   "MAKE_Cc14"
A       12        12             FILE *Makefile = 0;
A       13        13
A       14        14             extern char *alloc_text();
A       15        15             static char   blanks[40] = "                                       ";
A       16        16
A       17        17             char    **NameList[2]    =  {0, 0};
A       18        18             int       NameSize[2]    =  {0, 0};
A       19        19             int       NameLen [2]    =  {0, 0};
A       20        20             char     *GenerateOption =  0;
A       21        21             char     *Component = 0;
A       22        22             char     *ListerFid = 0;
A       23        23
A       24        24             /*D*    NAME:       main(int argn, char **argv)
A       25        25                     PURPOSE:    To initiate and control the make process.
A       26        26                     DESCRIPTION:
A       27        27                        The MAKE process contains the following steps:
A       28        28
A       29        29                        1. Analyze the command line options.
A       30        30
A       31        31                           This is controlled by the function "do_options" which
A       32        32                           is in this file.  It checks each command line option
A       33        33                           and determines the option flag to set and reports
A       34        34                           inconsistent option combinations.
A       35        35
A       36        36                        2. If the verbose option was specified, then print the
A       37        37                           current version of MAKE.
rCC.C03    File=MAKE_SIc08.:XSI                                                      Thu Nov 20 1997  Page=2  
A       38        38
A       39        39                        3. Initialize all of the default macros.  This step
A       40        40                           is performed by the make_sym:c module.  This module
A       41        41                           checks for over-riding command line values as well
A       42        42                           as IBEX variables which may be replacing the defaults.
A       43        43
A       44        44                        4. Initialize the fake targets.  These fake targets include
A       45        45                           ".PHONY", ".ONLINE", ".SILENT", ".PHONY", ".PRECIOUS",
A       46        46                           and ".DEFAULT".
A       47        47
A       48        48                        5. If a Makefile was specified on the command line, it is
A       49        49                           now read via the "ReadMake" function.  After the file
A       50        50                           has been read, it is immediately closed.
A       51        51
A       52        52                        6. The default rules are now added via the "complete_rules"
A       53        53                           function.  This function checks for the "-r" option and
A       54        54                           only adds the ".." rules if this option was not
A       55        55                           specified.
A       56        56
A       57        57                        7. The "setup_srch_lists" function is used to setup the
A       58        58                           default search lists.
A       59        59
A       60        60                        8. The function "mark_old_changed" is used to indicate the
A       61        61                           targets for which the "-o" or "-c" option was specified.
A       62        62
A       63        63                        9. If the "-p" option was specified, all of the macro
A       64        64                           definitions are displayed followed by all of the
A       65        65                           dependencies.
A       66        66
A       67        67                       10. If the "-z" option was specified, the hash table
A       68        68                           statistics are displayed.
A       69        69
A       70        70                       11. If a targets were specified on the command line, they
A       71        71                           are now converted to references to the appropriate
A       72        72                           sym_target entries; otherwise, if the makefile did
A       73        73                           not contain a target, an error is reported.
A       74        74
rCC.C03    File=MAKE_SIc08.:XSI                                                      Thu Nov 20 1997  Page=3  
A       75        75                       12. For every target specified, the function "derive" is
A       76        76                           executed to build the action list that will be used
A       77        77                           to actually build the target.
A       78        78
A       79        79                       13. If no errors have occured, the function "build" is used
A       80        80                           to build the requested target.
A       81        81
A       82        82                       14. If the "-z" or "-m" option was specified, the output
A       83        83                           associated with these options is generated by calling
A       84        84                           the "print_hash_statistics" and "memory_usage"
A       85        85                           functions.
A       86        86
A       87        87                       15. Finally, we exit setting the STEPCC to a number between
A       88        88                           0 and 15 which indicates the number of targets
A       89        89                           remaining to be built.
A       90        90
A       91        91             */
A       92        92
A       93        93             main(argn, argv)
A       94        94               int         argn;
A       95        95               char        **argv;
A       96        96             {
A       97        97    1          int   i;
A       98        98    1          int   w_p = 0, x_w = 18;
A       99        99    1          struct sym_macro *mc;
A      100       100    1          char             *Makeflgs = 0;
A      101       101    1
A      102       102    1        #ifdef RU
A      103       103    1          if (argn == 0) goto building;
A      104       104    1        #endif
A      105       105    1          x_w += strlen(argv[0]);
A      106       106    1          i = (30>x_w)? x_w : 25;
A      107       107    1          blanks[ i ] = 0;
A      108       108    1          MakeTargets = (struct sym_target **) argv + 1;
A      109       109    1          if (do_options(argn, argv, 0))
A      110       110    1             exit(4);
A      111       111    1          mc = lookup_sym_macro("MAKEFLGS", 8, 6);
rCC.C03    File=MAKE_SIc08.:XSI                                                      Thu Nov 20 1997  Page=4  
A      112       112    1          if (mc && mc->mc_deflen)  {
A      113       113    2             Makeflgs = mc->mc_def;
A      114       114    2             if (do_options(2, &(mc->mc_def)-1, 1))
A      115       115    2                exit(4);
A      116       116    2             }
A      117       117    1
A      118       118    1          Silent = options['s'];
A      119       119    1          if (options['v']) {
A      120       120    2             char  version[12];
A      121       121    2             extern char B_VERSION[6];
A      122       122    2             memcpy(version, B_VERSION+1, B_VERSION[0]);
A      123       123    2             version[ B_VERSION[0] ] = 0;
A      124       124    2             printf("CP-6 MAKE %s\n", version);
A      125       125    2             }
A      126       126    1          init_macros();
A      127       127    1          setup_pseudo_targets();
A      128       128    1          if (Makefile)
A      129       129    1             ReadMake(options['p'],options['w'],options['v']);
A      130       130    1          fclose(Makefile);
A      131       131    1          if (mc && Makeflgs != mc->mc_def && mc->mc_deflen)
A      132       132    1             if (do_options(2, &(mc->mc_def)-1, 2))
A      133       133    1                exit(4);
A      134       134    1          complete_rules(options['r']);
A      135       135    1          setup_srch_lists();
A      136       136    1          mark_old_changed();
A      137       137    1          if (options['p'])
A      138       138    1             dump_macros(options['w']);
A      139       139    1          if (options['p'])
A      140       140    1             dump_dependancies(options['w']);
A      141       141    1          if (options['z']) {
A      142       142    2             dump_hash_table(&ftype_hash_table,"File Types");
A      143       143    2             dump_hash_table(&owner_hash_table,"Target Owners");
A      144       144    2             dump_hash_table(&macro_hash_table,"Macros");
A      145       145    2             dump_hash_table(&target_hash_table,"Targets");
A      146       146    2             }
A      147       147    1          if (MakeLabel)  {
A      148       148    2             for ( i=0 ; i<MakeLabel ; i++ )  {
rCC.C03    File=MAKE_SIc08.:XSI                                                      Thu Nov 20 1997  Page=5  
A      149       149    3                char  *lbl = argv[1+i];
A      150       150    3                MakeTarget = lookup_sym_target(lbl,strlen(lbl),2);
A      151       151    3                if (!MakeTarget)
A      152       152    3                   error("### Makefile does not contain target: \"%s\"\n",lbl);
A      153       153    3                else MakeTargets[i] = MakeTarget;
A      154       154    3                }
A      155       155    2             if (Errors) exit(4);
A      156       156    2             }
A      157       157    1          else {
A      158       158    2             if (!MakeTarget)  {
A      159       159    3                if (Makefile)
A      160       160    3                   error("###  Makefile does not contain a target!");
A      161       161    3                else error("### A target or Makefile must be specified!\n");
A      162       162    3                exit(4);
A      163       163    3                }
A      164       164    2             MakeTargets[0] = MakeTarget;
A      165       165    2             MakeLabel++;
A      166       166    2             }
A      167       167    1          if (options['v']) {
A      168       168    2             if (MakeLabel > 1) {
A      169       169    3                printf("### %s: Targets are:",argv[0]), w_p = x_w;
A      170       170    3                for ( i=0 ; i<MakeLabel ; i++ )   {
A      171       171    4                   struct sym_target *tg = MakeTargets[i];
A      172       172    4                   if ( (w_p + 1 + tg->tg_len) > options['w'])
A      173       173    4                      printf("\n###                  %s",blanks);
A      174       174    4                   printf(" %s",tg->tg_text), w_p += 1+tg->tg_len;
A      175       175    4                   }
A      176       176    3                printf("\n");
A      177       177    3                }
A      178       178    2             else printf("### %s: Target is: %s\n",argv[0],MakeTargets[0]->tg_text);
A      179       179    2             }
A      180       180    1
A      181       181    1          for ( i=0 ; i<MakeLabel ; i++ )
A      182       182    1             derive(MakeTargets[i],options['w'],options['d'],options['v']);
A      183       183    1
A      184       184    1          if (options['a'])
A      185       185    1             dump_actions(options['w'], options['v']);
rCC.C03    File=MAKE_SIc08.:XSI                                                      Thu Nov 20 1997  Page=6  
A      186       186    1
A      187       187    1          if (GenerateOption) {
A      188       188    2             extern int errno;
A      189       189    2             FILE *af = fopen(GenerateOption, "w");
A      190       190    2             if (!af) {
A      191       191    3                error("Can't open -g file %s: %s\n", GenerateOption,
A      192       192    3                      strerror(errno) );
A      193       193    3                }
A      194       194    2             else generate_action_file(af);
A      195       195    2             exit( (af)? 0 : 8 );
A      196       196    2             }
A      197       197    1          if (Component) {
A      198       198    2             extern int errno;
A      199       199    2             FILE      *af = fopen(ListerFid, "w");
A      200       200    2             if (af)  {
A      201       201    3                generate_list_file(af, Component);
A      202       202    3                fclose(af);
A      203       203    3                }
A      204       204    2             else error("Can't open -l file %s: %s\n", ListerFid, strerror(errno));
A      205       205    2             }
A      206       206    1
A      207       207    1          if (!Errors)
A      208       208    1        building:
A      209       209    1             i = build(options['n'], options['w'], options['v'], options['t'], options
A                               ['q']);
A      210       210    1          else printf("\n\n**\n** Make stopped due to errors.\n**\n"), i=8;
A      211       211    1
A      212       212    1          if (options['z'])
A      213       213    1             print_hash_stats();
A      214       214    1          if (options['m'])
A      215       215    1             memory_usage();
A      216       216    1
A      217       217    1          exit((i<15)? i : 15);
A      218       218    1        }
A      219       219
A      220       220
A      221       221
rCC.C03    File=MAKE_SIc08.:XSI                                                      Thu Nov 20 1997  Page=7  
A      222       222             /*D*    NAME:          do_options(argn,argv)
A      223       223                     PURPOSE:       To process the user specified command line
A      224       224                                    options.
A      225       225             */
A      226       226
A      227       227             const char options_message[] = {
A      228       228    1             "\n%s Options:\n"
A      229       229    1             " -a     dump actions\n"
A      230       230    1             " -c     Changed: treat target mod time as now\n"
A      231       231    1             " -d     Makefile debug mode\n"
A      232       232    1             " -e     Send EMAIL for failures\n"
A      233       233    1             " -ffid  specify Makefile name\n"
A      234       234    1             " -gfid  create standard file containing actions\n"
A      235       235    1             " -iacct specify search account for :include\n"
A      236       236    1             " -j511  Limit batch jobs to 511 (for example)\n"
A      237       237    1             " -k     Use \"compressed\" file names for DO/LO\n"
A      238       238    1             " -m     Memory usage summary\n"
A      239       239    1             " -n     No-Execute mode: display build commands\n"
A      240       240    1             " -o     Old: treat target as up to date\n"
A      241       241    1             " -p     List Makefile, Macros and Dependencies\n"
A      242       242    1             " -q     Query. Set stepcc to 0 if goal is uptodate\n"
A      243       243    1             " -r     Rules: don't include built-in rules\n"
A      244       244    1             " -s     Silent: don't echo @ commands\n"
A      245       245    1             " -t     Touch: change target files modify times\n"
A      246       246    1             " -u     Update packet restrict to DONE files\n"
A      247       247    1             " -v     Verbose: print version & misc. information\n"
A      248       248    1             " -w80   Set output width to 80 (for example)\n"
A      249       249    1             " -z     Print symbol table information\n"
A      250       250    1             "\n"
A      251       251    1             };
A      252       252
A      253       253
A      254       254             char *cmdline_str();
A      255       255
A      256       256             static const char endc[2] = {0, 0};
A      257       257
A      258       258
rCC.C03    File=MAKE_SIc08.:XSI                                                      Thu Nov 20 1997  Page=8  
A      259       259             do_options(argn, argv, makeopts)
A      260       260               char     *argv[];
A      261       261               int       argn;
A      262       262             {
A      263       263    1          int          i;
A      264       264    1          char        *opt, *cp, *sp;
A      265       265    1          char       **nl;
A      266       266    1          int          w, ch;
A      267       267    1
A      268       268    1          if (makeopts == 0) {
A      269       269    2             options['w'] = 80;   /****  Default output width   ****/
A      270       270    2             options['j'] = 511;  /****  Default max batch jobs ****/
A      271       271    2             }
A      272       272    1          for (i = 1 ; i<argn ; i++) {
A      273       273    2
A      274       274    2             opt = argv[i];
A      275       275    2             if (makeopts) {
A      276       276    3                opt--;
A      277       277    3                goto st_mkopts;
A      278       278    3                }
A      279       279    2             if (*opt == '-')
A      280       280    2             while (*++opt)   {
A      281       281    3                int   c = tolower(*opt);
A      282       282    3                switch (c) {
A      283       283    4                case ' ':
A      284       284    4        st_mkopts:
A      285       285    4                   while (1)   {
A      286       286    5                      while (*(opt+1) == ' ') opt++;
A      287       287    5                      if (!*(opt+1)) break;
A      288       288    5                      c = *++opt;
A      289       289    5                      if (c == '-') {
A      290       290    6                         break;
A      291       291    6                         }
A      292       292    5                      if (c == '\'')
A      293       293    5                         cmdline_macro(&opt, argv, &i, argn, makeopts);
A      294       294    5                      else {
A      295       295    6                         char *s = strchr(opt, ' '), *t = strchr(opt, '=');
rCC.C03    File=MAKE_SIc08.:XSI                                                      Thu Nov 20 1997  Page=9  
A      296       296    6                         if (t && (!s || s>t))   {
A      297       297    7                            char len = s ? s-t : strlen(opt);
A      298       298    7                            char *buf = malloc(len+1);
A      299       299    7                            if (!buf)
A      300       300    7                               crash("Out of Memory: do_options");
A      301       301    7                            memcpy(buf, opt, len+1);
A      302       302    7                            buf[len] = 0;
A      303       303    7                            cmdline_macro(&buf, argv, &i, argn, makeopts);
A      304       304    7                            free(buf);
A      305       305    7                            }
A      306       306    6                         else error("Illegal MAKEFLGS target specification\n");
A      307       307    6                         }
A      308       308    5                      }
A      309       309    4                   break;
A      310       310    4                case 'a':
A      311       311    4                case 'd':
A      312       312    4                case 'e':
A      313       313    4                case 'k':
A      314       314    4                case 'm':
A      315       315    4                case 'n':
A      316       316    4                case 'p':
A      317       317    4                case 'q':
A      318       318    4                case 'r':
A      319       319    4                case 's':
A      320       320    4                case 't':
A      321       321    4                case 'u':
A      322       322    4                case 'v':
A      323       323    4                case 'z':
A      324       324    4                   options[c]++;
A      325       325    4                   break;
A      326       326    4
A      327       327    4                case 'c':      /*  Its changed inspite of mod times   */
A      328       328    4                case 'o':      /*  Its old (up to date)               */
A      329       329    4                   w = (c == 'c')? 1 : 0;
A      330       330    4                   if (NameLen[w] <= NameSize[w])   {
A      331       331    5                      nl = (char **) realloc(NameList[w], NameSize[w]+10);
A      332       332    5                      if (!nl) crash("Out of Memory: options\n");
rCC.C03    File=MAKE_SIc08.:XSI                                                      Thu Nov 20 1997  Page=10 
A      333       333    5                      NameList[w]  = nl;
A      334       334    5                      NameSize[w] += 10;
A      335       335    5                      }
A      336       336    4                   else nl = NameList[w];
A      337       337    4                   nl[ NameLen[w]++ ] = cmdline_str(&opt, argv, &i, argn, makeopts);
A      338       338    4                   break;
A      339       339    4
A      340       340    4                case 'f':
A      341       341    4                   if (makeopts & 2)  {
A      342       342    5                      error("### MAKEFLGS variable cannot specify -%c\n", c);
A      343       343    5                      return Errors;
A      344       344    5                      }
A      345       345    4                   if (MakeFid)
A      346       346    4                      error("### %s - Illegal duplicate -f options\n", argv[0]);
A      347       347    4                   MakeFid = cmdline_str( &opt, argv, &i, argn, makeopts);
A      348       348    4                   break;
A      349       349    4                case 'g':      /* Generate actions file      */
A      350       350    4                   if (GenerateOption)
A      351       351    4                      error("### %s - Illegal duplicate -g option\n",argv[0]);
A      352       352    4                   GenerateOption = cmdline_str( &opt, argv, &i, argn, makeopts);
A      353       353    4                   break;
A      354       354    4                case 'i':      /* search list specification  */
A      355       355    4                   if (SrchNum >= MAX_SRCH)
A      356       356    4                      error("### %s - too many search accounts\n", argv[0]);
A      357       357    4
A      358       358    4                   SrchList[SrchNum] = "\001.";
A      359       359    4                   if (!makeopts) {
A      360       360    5                      if ( *(opt+1) )   {
A      361       361    6                         cp = opt+1;
A      362       362    6                         opt = (char *) endc;
A      363       363    6                         }
A      364       364    5                      else cp = argv[++i];
A      365       365    5                      w = strlen(cp);
A      366       366    5                      sp = alloc_text(2+w, cp);
A      367       367    5                      memcpy( sp+1, cp, w+1 );
A      368       368    5                      }
A      369       369    4                   else  {  /* scanning MAKEFLGS... */
rCC.C03    File=MAKE_SIc08.:XSI                                                      Thu Nov 20 1997  Page=11 
A      370       370    5                      while (' ' == *++opt);
A      371       371    5                      cp = strchr(opt, ' ');
A      372       372    5                      w = cp ? cp - opt : strlen(opt);
A      373       373    5                      sp = alloc_text(2 + w, opt);
A      374       374    5                      memcpy(sp+1, opt, w);
A      375       375    5                      opt[w+1] = 0;
A      376       376    5                      opt += w - 1;
A      377       377    5                      }
A      378       378    4                   sp[0] = (strchr(cp, '?')) ? 2 : (strchr(cp, '.')) ? 3 : 1;
A      379       379    4                   SrchList[SrchNum-1] = sp;
A      380       380    4                   SrchNum++;
A      381       381    4                   break;
A      382       382    4
A      383       383    4
A      384       384    4
A      385       385    4                case 'l':   /* generate a "fake" lister file    */
A      386       386    4                   if (Component)
A      387       387    4                      error("### %s - duplicate -l option\n", argv[0]);
A      388       388    4                   Component = cmdline_str(&opt, argv, &i, argn, makeopts);
A      389       389    4                   if (!Component)   {
A      390       390    5                      error("### -l option requires component[,fid]\n");
A      391       391    5                      break;
A      392       392    5                      }
A      393       393    4
A      394       394    4                   if (cp = strchr(Component, ','))    {
A      395       395    5                      *cp = 0;
A      396       396    5                      ListerFid = cp + 1;
A      397       397    5                      }
A      398       398    4                   else ListerFid = ":LIST";
A      399       399    4                   break;
A      400       400    4
A      401       401    4
A      402       402    4                case 'j':
A      403       403    4                case 'w':
A      404       404    4                   options[ch=c] = (c=='w')? 80 : 511;
A      405       405    4                   w = 0, c = *(opt+1);
A      406       406    4                   while (c >= '0' && c <= '9') w = w*10+c-'0', c=*(++opt+1);
rCC.C03    File=MAKE_SIc08.:XSI                                                      Thu Nov 20 1997  Page=12 
A      407       407    4                   if (ch=='j')   {
A      408       408    5                      MaxJobs = options[ch] = w;
A      409       409    5                      }
A      410       410    4                   else {
A      411       411    5                      if (w > 30 && w < 255) options[ch] = w;
A      412       412    5                   }
A      413       413    4                   break;
A      414       414    4
A      415       415    4                default:
A      416       416    4                   error("\"-%c\" is not an option.\n",c);
A      417       417    4                   break;
A      418       418    4                }
A      419       419    3             }
A      420       420    2             else if ('\'' == *opt || strchr(opt, '='))  {
A      421       421    3                cmdline_macro(&opt, argv, &i, argn, makeopts);
A      422       422    3                }
A      423       423    2             else {   /* Better be a label */
A      424       424    3                argv[++MakeLabel] = opt;
A      425       425    3                }
A      426       426    2             }  /*  End of for( i=0; ... ) ... loop       */
A      427       427    1
A      428       428    1          UpdateRst = options['u'];
A      429       429    1          if (Errors == 0 && MakeFid && !Makefile && makeopts < 2)   {
A      430       430    2             Makefile = fopen(MakeFid,"r");
A      431       431    2             file_table[0].fid   = MakeFid;
A      432       432    2             file_table[0].recno = 0;
A      433       433    2             file_table[0].strm  = Makefile;
A      434       434    2             file_table[0].ifdepth = 0;
A      435       435    2             file_table[0].flags   = 0;
A      436       436    2             if (!Makefile)
A      437       437    2                error("### %s - cannot open file %s: %s\n",argv[0],MakeFid,strerror(er
A                               rno));
A      438       438    2             return Errors;
A      439       439    2             }
A      440       440    1
A      441       441    1          if (Errors && !makeopts)
A      442       442    1             printf(options_message, argv[0]);
rCC.C03    File=MAKE_SIc08.:XSI                                                      Thu Nov 20 1997  Page=13 
A      443       443    1          return Errors;
A      444       444    1        }
A      445       445
A      446       446
A      447       447             cmdline_macro(opt_p, argv, i_p, argn, makeopts)
A      448       448               char   **opt_p;
A"MAKE_SIc08.:XSI", line 448: (warning) identifier "argn" is not used
A      449       449               char   **argv;
A      450       450               int     *i_p;
A      451       451               int      argn;
A      452       452             {
A      453       453    1          char  *opt  = *opt_p;
A      454       454    1
A      455       455    1          char repbuf[256];
A      456       456    1          char macbuf[64];
A      457       457    1          char *str;
A      458       458    1          char  c;
A      459       459    1          int   ins = 0, nl = 0, quoted = '\'' == *opt;
A      460       460    1          struct sym_macro *macsym;
A      461       461    1          /*  First get the name of the macro */
A      462       462    1          if (!quoted) opt--;
A      463       463    1          while ( (c = *++opt) && c != ' ' && c != '=' && c != '\'')
A      464       464    1             if (ins < 63) macbuf[nl++] = c;
A      465       465    1
A      466       466    1          macbuf[nl] = 0;
A      467       467    1          while (c == ' ') c = *++opt;
A      468       468    1          if (!makeopts && quoted && !c) opt = argv[++*i_p];
A      469       469    1          if (!opt || *opt != '=') {
A      470       470    2             error("Illegal command line Macro definition!\n");
A      471       471    2             *opt_p = opt;
A      472       472    2             return;
A      473       473    2             }
A      474       474    1          /* Now grab the replacement text for the macro  */
A      475       475    1          while ( (c = *++opt) != '\'' || *(opt+1) == '\'')  {
A      476       476    2             if (!c)  {
A      477       477    3                if (!quoted) break;
A      478       478    3                if (makeopts)  {
rCC.C03    File=MAKE_SIc08.:XSI                                                      Thu Nov 20 1997  Page=14 
A      479       479    4                   error("Illegal MAKEFLGS macro definition\n");
A      480       480    4                   break;
A      481       481    4                   }
A      482       482    3                if (ins<255) repbuf[ins++] = ' ';
A      483       483    3                opt = argv[++*i_p];
A      484       484    3                if (!opt)   {
A      485       485    4                   error("Illegal command line macro definition\n");
A      486       486    4                   break;
A      487       487    4                   }
A      488       488    3                c = *opt;
A      489       489    3                }
A      490       490    2             if (ins < 255) repbuf[ins++] = c;
A      491       491    2             if (c == '\'') opt++;
A      492       492    2             }
A      493       493    1          /*  Finally, let's define this macro!           */
A      494       494    1          repbuf[ins] = 0;
A      495       495    1          macsym = lookup_sym_macro(macbuf, nl, 1);
A      496       496    1          if (!macsym) crash("Out of Memory: Options\n");
A      497       497    1          macsym->mc_def = str = alloc_text(ins+1, repbuf);
A      498       498    1          if (!str) crash("Out of Memory: Options\n");
A      499       499    1          macsym->mc_deflen  = ins;
A      500       500    1          macsym->mc_cmdline = 1;
A      501       501    1          *opt_p = opt;
A      502       502    1        }
A      503       503
A      504       504
A      505       505             char *
A      506       506             cmdline_str(opt_p, argv, i_p, argn, makeopts)
A      507       507               char **opt_p;
A"MAKE_SIc08.:XSI", line 507: (warning) identifier "argn" is not used
A      508       508               char **argv;
A      509       509               int   *i_p;
A      510       510             {
A      511       511    1          char *opt = *opt_p;
A      512       512    1          char *rs;
A      513       513    1
A      514       514    1          if (!makeopts) {  /* scanning command line */
rCC.C03    File=MAKE_SIc08.:XSI                                                      Thu Nov 20 1997  Page=15 
A      515       515    2             if ( *(opt+1) )   {  /* stuff follows option letter   */
A      516       516    3                rs = opt+1;
A      517       517    3                *opt_p = (char *) endc;
A      518       518    3                }
A      519       519    2             else rs = argv[++*i_p];
A      520       520    2             }
A      521       521    1          else  {           /* scanning MAKEFLGS    */
A      522       522    2             char *fin;
A      523       523    2             int   len;
A      524       524    2
A      525       525    2             while (*++opt == ' ');
A      526       526    2             fin = strchr(opt, ' ');
A      527       527    2             len = fin  ?  fin - opt : strlen(opt);
A      528       528    2             rs  = alloc_text(len+1, opt);
A      529       529    2             rs[len] = 0;
A      530       530    2
A      531       531    2             *opt_p = opt + len - 1;
A      532       532    2             }
A      533       533    1          return rs;
A      534       534    1        }
A      535       535
A      536       536
A      537       537             /*D*    NAME:          mark_old_changed
A      538       538                     PURPOSE:       To flag targets that are old or changed.
A      539       539             */
A      540       540
A      541       541             mark_old_changed()
A      542       542             {
A      543       543    1          int         i;
A      544       544    1          char      **nl;
A      545       545    1
A      546       546    1          if (NameLen[0] > 0)  {
A      547       547    2             /**   Mark all -o targets    **/
A      548       548    2             nl = NameList[0];
A      549       549    2             for ( i=0 ; i<NameLen[0] ; i++ ) {
A      550       550    3                struct sym_target *tg = lookup_sym_target(*nl, strlen(*nl),2);
A      551       551    3                if (!tg) crash("Out of Memory: mark old/changed targets\n");
rCC.C03    File=MAKE_SIc08.:XSI                                                      Thu Nov 20 1997  Page=16 
A      552       552    3                tg->tg_old |= 1;
A      553       553    3                nl++;
A      554       554    3                }
A      555       555    2             free(nl);
A      556       556    2             NameLen[0] = NameSize[0] = 0;
A      557       557    2             }
A      558       558    1
A      559       559    1          if (NameLen[1] > 0)  {
A      560       560    2             /**   Mark all -c targets    **/
A      561       561    2             nl = NameList[1];
A      562       562    2             for ( i=0 ; i<NameLen[1] ; i++ ) {
A      563       563    3                struct sym_target *tg = lookup_sym_target(*nl, strlen(*nl),2);
A      564       564    3                if (!tg) crash("Out of Memory: mark old/changed targets\n");
A      565       565    3                tg->tg_new |= 1;
A      566       566    3                nl++;
A      567       567    3                }
A      568       568    2             free(nl);
A      569       569    2             NameLen[1] = NameSize[1] = 0;
A      570       570    2             }
A      571       571    1
A      572       572    1          return;
A      573       573    1        }
A      574       574
A      575       575
A      576       576
A      577       577
A      578       578             /*F*    NAME:       memory_usage()
A      579       579                     PURPOSE:    To summarize main memory usage.
A      580       580                     DESCRIPTION:
A      581       581                        This function displays the main memory usage when the
A      582       582                        "-m" option was used.
A      583       583             */
A      584       584
A      585       585             memory_usage()   {
A      586       586    1          unsigned mem_heap =  SEGSIZE(MakeTarget);
A      587       587    1          unsigned mem_auto =  SEGSIZE(&mem_heap);
A      588       588    1          unsigned total;
rCC.C03    File=MAKE_SIc08.:XSI                                                      Thu Nov 20 1997  Page=17 
A      589       589    1
A      590       590    1          printf(" *** Memory Usage ***\n\n");
A      591       591    1          if (mem_targets[0])
A      592       592    1             printf(" %d(%d) targets of %d(%d)\n",
A      593       593    1                    mem_targets[1], mem_targets[1]/sizeof(struct sym_target),
A      594       594    1                    mem_targets[0], mem_targets[0]/sizeof(struct sym_target));
A      595       595    1          if (mem_strings[0])
A      596       596    1             printf(" %d strings of %d\n", mem_strings[1], mem_strings[0]);
A      597       597    1          if (mem_macros[0])
A      598       598    1             printf(" %d(%d) macros  of %d(%d)\n",
A      599       599    1                mem_macros[1], mem_macros[1]/sizeof(struct sym_macro),
A      600       600    1                mem_macros[0], mem_macros[0]/sizeof(struct sym_macro) );
A      601       601    1          if (mem_ftypes[0])
A      602       602    1             printf(" %d(%d) file types of %d(%d)\n",
A      603       603    1                mem_ftypes[1], mem_ftypes[1]/sizeof(struct sym_ftype),
A      604       604    1                mem_ftypes[0], mem_ftypes[0]/sizeof(struct sym_ftype)   );
A      605       605    1          if (mem_macstr)
A      606       606    1             printf(" %d macro strings\n", mem_macstr);
A      607       607    1          if (mem_commands)
A      608       608    1             printf(" %d command strings\n", mem_commands);
A      609       609    1          if (mem_comrules)
A      610       610    1             printf(" %d(%d) rule command lists\n", mem_comrules, mem_comrules/sizeof(
A                               struct command_list));
A      611       611    1          if (mem_rulelist)
A      612       612    1             printf(" %d(%d) rule lists\n", mem_rulelist, mem_rulelist/sizeof(struct t
A                               arget_rule));
A      613       613    1          if (mem_dependlist[0])
A      614       614    1             printf(" %d(%d) dependency lists\n",
A      615       615    1                mem_dependlist[0], mem_dependlist[1]);
A      616       616    1          if (mem_actionlist[0])
A      617       617    1             printf(" %d(%d) actions of %d(%d)\n",
A      618       618    1                mem_actionlist[1], mem_actionlist[1]/sizeof(struct target_action),
A      619       619    1                mem_actionlist[0], mem_actionlist[0]/sizeof(struct target_action));
A      620       620    1          if (mem_acctlist[0])
A      621       621    1             printf(" %d(%d) account lists\n", mem_acctlist[0], mem_acctlist[1]);
A      622       622    1          if (mem_ruleptrs[0])
A      623       623    1             printf(" %d(%d) filetype rule list\n", mem_ruleptrs[0], mem_ruleptrs[1]);
rCC.C03    File=MAKE_SIc08.:XSI                                                      Thu Nov 20 1997  Page=18 
A
A      624       624    1
A      625       625    1          total = mem_ftypes[0] + mem_strings[0] + mem_targets[0] +
A      626       626    1                  mem_macros[0] + mem_macstr     + mem_commands   +
A      627       627    1                  mem_comrules  + mem_rulelist   + mem_dependlist[0] +
A      628       628    1                  mem_actionlist[0]              + mem_acctlist[0]+
A      629       629    1                  mem_ruleptrs[0];
A      630       630    1
A      631       631    1          printf(" ===========================\n %d total accounted\n",total);
A      632       632    1          printf(" ===========================\n");
A      633       633    1          printf(" %d(%d) auto size\n %d(%d) heap size\n",
A      634       634    1                mem_auto, (mem_auto+4095)/4096,
A      635       635    1                mem_heap, (mem_heap+4088)/4096);
A      636       636    1        }
A      637       637
A      638       638             #ifdef RU
A      639       639             MAIN(argn, argv) {
A      640       640    1          freopen("ME","r",stdin);
A      641       641    1          freopen("ME","a",stdout);
A      642       642    1          main(argn, argv);
A      643       643    1        }
A      644       644             #endif
A      645       645
A---  Include file information  ---
A
A   stdio:h.:LIBRARY. is referenced
A   stdlib:h.:LIBRARY. is referenced
A   string:h.:LIBRARY. is referenced
A   MAKE_Cc14.:XSI. is referenced
A   MAKE_Cc13.:XSI. is referenced
C
A2 warnings were detected in the file MAKE_SIc08.:XSI
