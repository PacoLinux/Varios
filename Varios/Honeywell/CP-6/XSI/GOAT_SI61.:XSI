/*M* GOAT - Get Owner of Account Tool */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
GOAT: PROC MAIN;
%INCLUDE CP_6;
%INCLUDE B_ERRORS_C;
%INCLUDE B$JIT;
%INCLUDE AS_SUPER_C;
 
 
%FPT_OPEN (FPTN=OPEN_SI,
            FUN = IN,
            CTG = YES,
            SHARE = ALL,
            ASN = FILE,
            NAME = VLP_NAME,
            ACCT = SYS_ACCT,
            DCB = M$SI);
%VLP_NAME (FPTN = VLP_NAME,
            NAME = ':USERS');
%VLP_ACCT (FPTN = SYS_ACCT,
            ACCT = ':SYS');
 
%FPT_OPEN (FPTN = OPEN_LS,
            DCB = M$LS);
 
%FPT_WRITE (FPTN = WRITE_LS,
            DCB = M$LS,
            BUF = LS_BUF);
%FPT_WRITE (FPTN = WRITE_TERM,
            DCB = M$LS,
            BUF = LS_BUF);
%FPT_READ (FPTN = USERS_REC,
            KEYS = YES,
            DCB = M$SI,
            KEYR = NO,
            BUF = IN_BUF,
            KEY = KEYBUF);
%FPT_READ (FPTN = READ_SEQ,
            KEYS = NO,
            DCB = M$SI,
            KEYR = YES,
            BUF = IN_BUF,
            KEY = KEYBUF);
 
%FPT_CLOSE (FPTN = CLOSE_SI,
            DCB = M$SI);
%FPT_CLOSE (FPTN = CLOSE_LS,
            DCB = M$LS);
 
%FPT_TIME ( FPTN = MAKE_DATE,
            DATE = DATE_BUF,
            DAY = DAY_BUF,
            TIME = TIME_BUF,
            DEST = EXT,
            SOURCE = UTS,
            TSTAMP = IN_BUF.LAST_LOGON_TIME);
DCL DATE_BUF CHAR (10) CALIGNED STATIC;
DCL DAY_BUF CHAR (3) CALIGNED STATIC;
DCL TIME_BUF CHAR (11) CALIGNED STATIC;
 
%F$DCB;
%B$ALT;
%B$TCB;
DCL B$TCB$ PTR SYMREF;
DCL B$JIT$ PTR SYMREF;
DCL WILD_COMPARE ENTRY (4) ALTRET;
%AS_USERS (STR_NAME = IN_BUF, STCLASS = STATIC );
DCL M$SI$ PTR ALIGNED;
 
DCL M$SI DCB;
DCL M$LS DCB;
DCL I UBIN WORD ALIGNED;
DCL J UBIN WORD ALIGNED;
DCL LS_BUF CHAR (170) CALIGNED STATIC;
DCL TEMP CHAR (31) STATIC;
DCL 1 ACCOUNT CALIGNED STATIC,
   2 COUNT UBIN BYTE INIT (8) UNAL,
   2 TEXT CHAR (8) UNAL;
DCL 1 UNAME CALIGNED STATIC,
   2 COUNT UBIN BYTE INIT (12) UNAL,
   2 TEXT CHAR (12) UNAL;
DCL 1 KEYBUF CALIGNED STATIC,
      2 COUNT UBIN BYTE INIT (20) UNAL,
      2 TEXT CHAR (20) UNAL;
DCL ACC_OWNER CHAR (80);
DCL BANLEN UBIN;
DCL END_OF_FILE BIT (1) ALIGNED;
DCL NONE_FOUND BIT (1) ALIGNED;
DCL WILD BIT (1) ALIGNED;
 
ACCOUNT.COUNT = 0;
ACCOUNT.TEXT = ' ';
 
IF ((B$JIT$->B$JIT.PPRIV & %PPR_SUPER#) OR
    (B$JIT$->B$JIT.PPRIV & %PPR_SUPERAUTH#) OR
    (B$JIT$->B$JIT.PPRIV & %PPR_SUPERD#) OR
    (B$JIT$->B$JIT.PRIV.ACTIVE & %PR_FMSEC#) OR
    (B$JIT$->B$JIT.PRIV.ACTIVE & %PR_FMREAD#) )
THEN DO;
   END;
ELSE DO;
   ACCOUNT.COUNT = 8;
   ACCOUNT.TEXT = B$JIT$->B$JIT.ACCN;
   UNAME.TEXT = B$JIT$->B$JIT.UNAME;
   I = 11;
   DO WHILE ( (SUBSTR (UNAME.TEXT, I, 1) = ' ') AND (I > 0) );
      I = I - 1;
      END;
   UNAME.COUNT = I;
   END;
 
CALL M$OPEN (OPEN_SI); /* THIS POINTS TO THE :USERS FILE */
CALL M$OPEN (OPEN_LS);   /* THIS WILL POINT TO ME */
M$SI$ = DCBADDR (DCBNUM (M$SI));
 
IF (ACCOUNT.TEXT = B$JIT$->B$JIT.ACCN) THEN GOTO FORCE_THIS_USER;
 
CALL INDEX (I, ' ', B$JIT.CCBUF);
DO WHILE ((I < 80 AND SUBSTR (B$JIT.CCBUF, I, 1) = ' '));
   I = I + 1;
   END;
 
IF (I >= 80)
THEN DO;
   ACCOUNT.COUNT = 8;
   ACCOUNT.TEXT = B$JIT$->B$JIT.ACCN;
   UNAME.TEXT = B$JIT$->B$JIT.UNAME;
   I = 11;
   DO WHILE ( (SUBSTR (UNAME.TEXT, I, 1) = ' ') AND (I > 0) );
      I = I - 1;
      END;
   UNAME.COUNT = I;
   GOTO FORCE_THIS_USER;
   END;
 
IF SUBSTR (B$JIT.CCBUF, I, 1) = '(' THEN I = I + 1;
 
J = I;
 
DO UNTIL (SUBSTR (B$JIT.CCBUF, J, 1) = ' ' OR
          SUBSTR (B$JIT.CCBUF, J, 1) = ',') ;
   J = J + 1;
   END;
 
ACCOUNT.TEXT = ' ';
ACCOUNT.TEXT = SUBSTR (B$JIT.CCBUF, I, J - I);
ACCOUNT.COUNT = J - I;
 
IF SUBSTR (B$JIT.CCBUF, J, 1) = ','
THEN DO;
 
   J = J + 1;
   I = J;
   DO WHILE (SUBSTR (B$JIT.CCBUF, I, 1) ~= ' ' AND
             SUBSTR (B$JIT.CCBUF, I, 1) ~= ')' );
      I = I + 1;
      END;
   IF (SUBSTR (B$JIT.CCBUF, I, 1) = ')') THEN I = I - 1;
   UNAME.TEXT = SUBSTR (B$JIT.CCBUF, J, I);
   UNAME.COUNT = I - J;
   END;
ELSE DO;
   UNAME.TEXT = ' ';
   UNAME.COUNT = 12;
   END;
 
FORCE_THIS_USER: ;
 
CALL CONCAT (KEYBUF.TEXT, ACCOUNT.TEXT, SUBSTR (UNAME.TEXT, 0, UNAME.COUNT));
KEYBUF.COUNT = 8 + UNAME.COUNT;
END_OF_FILE = '0'B;
NONE_FOUND = '1'B;
 
CALL INDEX (I, '?', KEYBUF.TEXT)
WHENRETURN DO;
   WILD = '1'B;
   KEYBUF.COUNT = 1;
   KEYBUF.TEXT = ' ';
   END;
WHENALTRETURN DO;
   WILD = '0'B;
   END;
 
CALL M$READ (USERS_REC)   /* GET THE FIRST RECORD */
WHENRETURN DO;
   CALL WRITE_LINE ALTRET (UNKNOWN);
   END; /* WHENRETURN ON THE READ */
WHENALTRETURN DO;
   DO WHILE (NOT END_OF_FILE);
      CALL M$READ (READ_SEQ)
      WHENRETURN DO;
         IF NOT WILD
         THEN DO;
            IF (IN_BUF.ACCT = ACCOUNT.TEXT)
            THEN DO;
               CALL WRITE_LINE ALTRET (UNKNOWN);
               END; /* THEN DO ACCT = TEXT */
            ELSE DO;
               IF (SUBSTR (IN_BUF.ACCT, 0, 1) ~= (SUBSTR (ACCOUNT.TEXT, 0, 1)))
               THEN DO;
                  END_OF_FILE = '1'B;
                  END;
               END;
            END;  /* IF NOT WILD */
         ELSE DO;
            I = ACCOUNT.COUNT;
            CALL WILD_COMPARE (I,
             SUBSTR (ACCOUNT.TEXT, 0, ACCOUNT.COUNT), IN_BUF.ACCT, 8)
            WHENRETURN DO;
               CALL WRITE_LINE ALTRET (UNKNOWN);
               END;
            WHENALTRETURN DO;
               END;
            END; /* ELSE DO */
         END; /* WHENRETURN ON READ_SEQ */
      WHENALTRETURN DO;
         IF (B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE = %E$EOF)
         THEN DO;
            END_OF_FILE = '1'B;
            END;
         END; /* WHENALTRETURN */
      END; /* DO WHILE */
   END;
 
IF NONE_FOUND
THEN DO;
   LS_BUF = 'I didn''t find any logons with that account!';
   CALL M$WRITE (WRITE_TERM) ALTRET (FIN);
   END;
 
GOTO FIN;
 
UNKNOWN:   ;
   LS_BUF = 'SOMETHING WENT WRONG WITH AN M$WRITE, GOODBYE!';
   CALL M$WRITE (WRITE_TERM) ALTRET (FIN);
 
FIN: ;
 
CALL M$CLOSE (CLOSE_SI);
CALL M$CLOSE (CLOSE_LS);
 
WRITE_LINE: PROC ALTRET;
   CALL M$TIME (MAKE_DATE);
   CALL CONCAT (TEMP, DATE_BUF, ' @ ', SUBSTR(TIME_BUF, 0, 5));
   CALL INDEX (I, ' ', IN_BUF.NAME);
   CALL INDEX (J, ' ', IN_BUF.ACCT);
   CALL CONCAT (LS_BUF, SUBSTR (IN_BUF.ACCT, 0, J), ',',
      SUBSTR (IN_BUF.NAME, 0, I) );
   CALL INSERT (LS_BUF, 22, 9, ' Last-on ');
   CALL INSERT (LS_BUF, 31, 19, TEMP);
   CALL INSERT (LS_BUF, 50, 11, ' Owned by: ');
   CALL GET_ACC_OWNER;
   CALL INSERT (LS_BUF, 61, BANLEN, SUBSTR (ACC_OWNER, 0, BANLEN));
 
   CALL M$WRITE (WRITE_LS) ALTRET (UNKNOWN);
   NONE_FOUND = '0'B;
RETURN;
UNKNOWN: ;
   ALTRETURN;
END WRITE_LINE;
   /*************************GET_ACC_OWNER ROUTINE ****************/
GET_ACC_OWNER: PROC ;
 
DCL OFFSET UBIN WORD ALIGNED;
DCL TXT$ PTR;
DCL TEXT CHAR (80) BASED (TXT$);
 
ACC_OWNER = ' ';
BANLEN = 0;
IF (IN_BUF.BANNER (0) = -1) THEN RETURN;
OFFSET = IN_BUF.BANNER (0);
BANLEN = IN_BUF.SETUP_CHRA.TXT_UBIN (OFFSET);
TXT$ = PINCRB (ADDR (IN_BUF.SETUP_CHRA.TXT_UBIN (OFFSET)), 1);
ACC_OWNER = SUBSTR (TEXT, 1, BANLEN);
RETURN;
END GET_ACC_OWNER;
END GOAT;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
WILD_COMPARE: PROC (LEN, TEXT, BUF, BUF_LEN) ALTRET;
/* RETURN IF MATCHED,  ALTRETURN IF NO MATCH */
%INCLUDE XUW_MACRO_C;
%XUW_ENTRIES;
DCL LEN UBIN;
DCL TEXT CHAR (LEN);
DCL BUF_LEN UBIN WORD ALIGNED;
DCL BUF CHAR (BUF_LEN);
%XUW_WILDCARD ;
 
   XUW_WILDCARD.INPUT_ = VECTOR (BUF);
   XUW_WILDCARD.PATTERN_ = VECTOR (TEXT);
   CALL X$WILDCMP (XUW_WILDCARD)
   WHENRETURN DO;
      RETURN;
      END;
   WHENALTRETURN DO;
      ALTRETURN;
      END;
END WILD_COMPARE;
