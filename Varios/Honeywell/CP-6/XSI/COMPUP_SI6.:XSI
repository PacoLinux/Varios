/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/*X* PLM=3 */
UPK:PROC MAIN;
DCL M$SI DCB;
DCL M$UI DCB;
DCL OBUF CHAR(256) STATIC;
%INCLUDE CP_6;
%F$DCB;
%INCLUDE U$JIT_C;
DCL B$JIT$ PTR SYMREF READONLY;
DCL WIDTH UBIN;
DCL SIBUF CHAR(1024) STATIC INIT(' ');
DCL UIBUF CHAR(1024) STATIC INIT(' ');
DCL UIKN UBIN;
DCL SIKN UBIN;
DCL 1 UIKBF STATIC,
      2 L BIT(9) INIT('0'B),
      2 N UBIN(27)UNAL,
      2 * CHAR(252);
DCL 1 SIKBF STATIC,
      2 L BIT(9) INIT('0'B),
      2 N UBIN(27)UNAL,
      2 * CHAR(252);
DCL RECCNT(0:4) SBIN;
DCL RECTYPS CHAR(5) CONSTANT INIT('=||~-');
DCL RECFLGS(0:4) SBIN;
DCL RECTYP UBIN;
DCL RECTXT(0:4) CHAR(12) CONSTANT INIT(
'identical.','only in SI.','only in UI.','different.','same 1st 1K.');
DCL M$LO DCB;
%FPT_OPEN(DCB=M$LO);
%FPT_CLOSE(DCB=M$LO,DISP=SAVE);
%FPT_WRITE(BUF=OBUF,DCB=M$LO);
%FPT_READ(DCB=M$SI,FPTN=RDSI,KEY=SIKBF,KEYR=YES,BUF=SIBUF);
%FPT_READ(DCB=M$UI,FPTN=RDUI,KEY=UIKBF,KEYR=YES,BUF=UIBUF);
   CALL M$OPEN(FPT_OPEN);
   RECCNT='0'B;
   RECFLGS='0'B;
   IF B$JIT.CCARS>B$JIT.CCDISP THEN
   DO RECTYP = 0 TO 4;
      CALL INDEX1(UIKN,SUBSTR(RECTYPS,RECTYP,1),B$JIT.CCBUF) ALTRET(NTYP);
      RECFLGS(RECTYP)=1;
NTYP: END;
   WIDTH=DCBADDR(DCBNUM(M$LO))->F$DCB.WIDTH#;
   IF WIDTH=0 THEN WIDTH=DCBADDR(3)->F$DCB.WIDTH#;
   IF WIDTH=0 OR WIDTH>256 THEN WIDTH=256;
   FPT_WRITE.BUF_.BOUND = WIDTH-1;
   WIDTH=WIDTH/2-5;
   IF DCBADDR(DCBNUM(M$UI))->F$DCB.NAME#.L=0 THEN DO;
      FPT_OPEN.V.DCB# = DCBNUM(M$UI);
      FPT_OPEN.V.ASN# = 1;
      FPT_OPEN.NAME_=VECTOR(DCBADDR(DCBNUM(M$SI))->F$DCB.NAME#);
      CALL M$OPEN(FPT_OPEN);
      END;
   CALL OUTONE(OBUF,SIBUF,0,RDSI);
   CALL OUTONE(OBUF,UIBUF,0,RDUI);
   DO WHILE(NOT SIKBF.L&'1'B OR NOT UIKBF.L&'1'B);
      SIKN=SIKBF.N;
      IF NOT SIKBF.L THEN SIKN=SIKN*1000;
      UIKN=UIKBF.N;
      IF NOT UIKBF.L THEN UIKN=UIKN*1000;
      OBUF=' ';
      IF SIKN=UIKN THEN IF UIBUF=SIBUF THEN RECTYP=0;
         ELSE RECTYP=3;
      ELSE IF SIKN<UIKN THEN RECTYP=1;
         ELSE RECTYP=2;
      IF RECTYP=0 AND (RDSI.V.DVBYTE OR RDUI.V.DVBYTE) THEN RECTYP=4;
      CALL INSERT(OBUF,WIDTH+9,1,SUBSTR(RECTYPS,RECTYP,1));
      RECCNT(RECTYP)=RECCNT(RECTYP)+1;
      IF SIKN<=UIKN THEN CALL OUTONE(SUBSTR(OBUF,9),SIBUF,SIKN,RDSI);
      IF UIKN<=SIKN THEN DO;
         CALL OUTONE(SUBSTR(OBUF,WIDTH+10),UIBUF,UIKN,RDUI);
         IF SIKN>UIKN THEN DO;
            CALL INSERT(OBUF,WIDTH+1,8,SUBSTR(OBUF,0,8));
            CALL INSERT(OBUF,0,10,' ');
            END;
         END;
      IF RECFLGS(RECTYP)=0 THEN CALL M$WRITE(FPT_WRITE);
      END;
   OBUF='  No records.';
   DO RECTYP=0 TO 4;
      IF RECCNT(RECTYP)~=0 THEN DO;
         CALL INDEX2(UIKN,'  ',OBUF);
         IF UIKN>0 THEN CALL INSERT(OBUF,UIKN-1,1,',');
         CALL BINCHAR(SUBSTR(OBUF,UIKN,6),RECCNT(RECTYP));
         CALL EDITCHAR(OBUF,UIKN,5,'105'O,SUBSTR(OBUF,UIKN,6));
         CALL INDEX1R(SIKN,' ',SUBSTR(OBUF,0,UIKN+5));
         CALL INSERT(OBUF,UIKN,12,SUBSTR(OBUF,SIKN,6-SIKN+UIKN));
         UIKN=UIKN+UIKN+7-SIKN;
         CALL INSERT(OBUF,UIKN,12,RECTXT(RECTYP));
         END;
      END;
   CALL M$WRITE(FPT_WRITE);
   CALL M$CLOSE(FPT_CLOSE);
   RETURN;
OUTONE: PROC(PBUF,IBUF,IKEY,RDFPT);
DCL PBUF CHAR(140);
DCL IBUF CHAR(140);
DCL IKEY UBIN;
%FPT_READ(FPTN=RDFPT, STCLASS=);
DCL KEY BIT(36) BASED(RDFPT.KEY_.KEY$) ALIGNED;
   IF KEY&'1'B THEN RETURN;
   RDFPT.V.DVBYTE='0'B;
   CALL BINCHAR(SUBSTR(OBUF,0,8),IKEY);
   CALL INSERT(OBUF,0,5,SUBSTR(OBUF,1,4),'.');
   CALL EDITSTR(OBUF,0,3,'103'O,SUBSTR(OBUF,0,4));
   CALL INSERT(PBUF,0,WIDTH,IBUF);
   IBUF=' ';
   CALL M$READ(RDFPT) WHENALTRETURN DO;
      IF DCBADDR(RDFPT.V.DCB#)->F$DCB.TYC.LD# THEN RDFPT.V.DVBYTE='1'B;
      ELSE KEY='777777777777'O;
      END;
   RETURN;
END;
END;
