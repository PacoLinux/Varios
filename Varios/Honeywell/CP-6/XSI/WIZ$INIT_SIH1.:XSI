.*M*
HELP file for: WIZ$INIT
.*T*
 **************************************************************
 *                                                            *
 *  Copyright (c) Bull HN Information Systems Inc., 1989      *
 *                                                            *
 **************************************************************
.*A*                                                                           
WIZ$INIT contains several common routines designed for use by
"general" utility processors.  COPYPGM makes extensive use of these
routines.
 
.*B*
/* ****************************************************************** */
 
WIZ$INIT: PROC(GREETING,LENGTH,PCB_PTR,PC) ALTRET;
 
 
   The WIZ$INIT routine provides setup functions for a generalized
   processor.  It performs the following tasks:
 
   1.  Greet the user with GREETING of length LENGTH via M$ME,
       unless LENGTH=0.
   2.  Establish break control to WIZ$BREAK.
   3.  Opens M$SI, M$LO, and (if necessary) M$DO.
   4.  Sets flags LOEQDO if M$LO is the same device as M$DO and
       SIEQLO if M$SI is the same device as M$LO.
   5.  Parses the input command from B$JIT.CCBUF using the parser
       if PCB_PTR is not ADDR(NIL).
   6.  Establishes the single character prompt, PC.
 
   ALTRET is taken if any errors occur; if possible, an error
   message is printed prior to ALTRETing.
 
/* ****************************************************************** */
 
WIZ$BREAK: PROC ASYNC;
 
 
   The WIZ$BREAK routine is entered each time the user presses the
   BREAK key on his terminal.  WIZ$BREAK tallies one in BROKEN and
   resets the break count.  It then returns normally to the user's
   program.  It is the user's responsibility to check BROKEN on a
   periodic basis and perform appropriate actions, ending with
   resetting BROKEN back to zero.
 
/* ****************************************************************** */
 
WIZ$SYSERR: PROC(DCBNO);
 
 
   WIZ$SYSERR may be used to print an error message from the system
   error message file concerning the error in the current altret
   frame.  If DCBNO is greater than zero, the dcb number is placed
   in the M$ERRMSG FPT so that it will be included in the error
   message(s).  Return is always normal, even if M$ERRMSG returns
   an error.
 
/* ****************************************************************** */
 
WIZ$USRERR: PROC(USRCODE);
 
 
   WIZ$USRERR may be used to print an error message from the
   :WIZERRMSG file concerning the error specified in USRCODE.
   Return is always normal, even if M$ERRMSG returns an error.
 
/* ****************************************************************** */
 
WIZ$PARSERR: PROC(PCB_PTR);
 
 
   The WIZ$PARSERR routine will print an appropriate error message
   using the error code in the PCB passed to it.  It will also
   print the 10 characters prior to and the 10 characters following
   the error point on M$DO and M$LO (if necessary) and provide a
   pointer to the error.  If the error code exceeds 7, WIZ$USRERR
   is called to print a "real" error message.
 
/* ****************************************************************** */
 
WIZ$TERM: PROC(CC);
 
 
   WIZ$TERM closes M$SI, M$LO, and M$DO (if open) and sets the
   step code to CC.  If CC=4, an M$ERR is performed; if CC=6 an
   M$XXX is performed; otherwise, an M$EXIT is performed.
 
/* ****************************************************************** */
 
WIZ$READ: PROC(BFR,SIZ) ALTRET;
 
 
   WIZ$READ reads the next record from M$SI and returns it into
   BFR, which must be at least 256 characters long.  The length
   of the record is returned in SIZ, which must be SBIN WORD.  If
   end-of-file is encountered, SIZ is set to zero and ALTRET is
   taken; if any other error occurs, SIZ is set to -1, an error
   message is printed, and ALTRET is taken.  If M$LO is not the
   same as M$SI, the record read is printed on M$LO with VFC of
   'A' (print, single space).
 
/* ****************************************************************** */
 
WIZ$WRITE: PROC(BFR,SIZ,CC);
 
 
   WIZ$WRITE writes buffer BFR of size SIZ to M$LO using VFC of
   CC.  DVFC in M$LO is preserved.  SIZ must be SBIN WORD.
 
/* ****************************************************************** */
 
WIZ$USER: PROC(PARAM);
 
 
   WIZ$USER is the U$ routine for this set of subroutines.  It
   uses WIZ$READ to do a continue read into the input buffer and
   updates NCHARS.  The user's PCB must have been SYMDEFed with
   the name WIZ$PCB.  If end-of-file is encountered, return is
   made to the parser, which will probably return a syntax error.
 
/* ****************************************************************** */
 
.*X*
.*R*
.*K* XINDEX
WIZ$INIT.X
.*R*
AID=PROGRAMMING
.*R*
SUBROUTINE
.*R*
.*K* XINDEX_ABSTRACT
TOOL=WIZ$INIT
.*R*
Several common routines designed for use by "general" utility programs.
.*K* CHANGES Changes changes
05/30/84 Changed PARAM to PARM to make the new PL-6 happy.
.*K* OWNER
Bruce Beaumont, NSS/CP-6, LADC
