

14:00 NOV 16 '97 XSL_SOCKET_E.:TCA2SI                                      1    
    1      /*M*    XSL_SOCKET_E            Equates for socket library              */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /*X* DDA */
    8
    9      /*F* NAME: SOCK_E
   10      */
   11      /* socket types */
   12      %EQU XSL_SOCK_NONE      = 0;
   13      /*K* SOCK_STREAM
   14      SOCK_STREAM      XSL_SOCK_STREAM        Stream socket. */
   15      %EQU XSL_SOCK_STREAM    = 1;
   16      /*K* SOCK_DGRAM
   17      SOCK_DGRAM       XSL_SOCK_DGRAM         Datagram socket. */
   18      %EQU XSL_SOCK_DGRAM     = 2;
   19      /*K* SOCK_RAW
   20      SOCK_RAW         XSL_SOCK_RAW           Raw protocol interface. */
   21      %EQU XSL_SOCK_RAW       = 3;
   22      /*K* SOCK_RDM
   23      SOCK_RDM         XSL_SOCK_RDM           Reliably-delivered message. */
   24      %EQU XSL_SOCK_RDM       = 4;
   25      /*K* SOCK_SEQPACKET
   26      SOCK_SEQPACKET   XSL_SOCK_SEQPACKET     Sequenced packet stream. */
   27      %EQU XSL_SOCK_SEQPACKET = 5;
   28
   29      /* socket option flags */
   30      /*F* NAME: SO_E
   31      */
   32      /*K* SO_DEBUG
   33      SO_DEBUG         XSL_SO_DEBUG           Record debugging information. */
   34      %EQU XSL_SO_DEBUG       = 1;
   35      /*K* SO_ACCEPTCONN
   36      SO_ACCEPTCONN    XSL_SO_ACCEPTCONN      Socket has had listen().    */
   37      %EQU XSL_SO_ACCEPTCONN  = 2;
14:00 NOV 16 '97 XSL_SOCKET_E.:TCA2SI                                      2    
   38      /*K* SO_REUSEADDR
   39      SO_REUSEADDR     XSL_SO_REUSEADDR       Allow local address reuse.  */
   40      %EQU XSL_SO_REUSEADDR   = 4;
   41      /*K* SO_KEEPALIVE
   42      SO_KEEPALIVE     XSL_SO_KEEPALIVE       Keep connections alive.     */
   43      %EQU XSL_SO_KEEPALIVE   = 8;
   44      /*K* SO_DONTROUTE
   45      SO_DONTROUTE     XSL_SO_DONTROUTE       Just use Interface address. */
   46      %EQU XSL_SO_DONTROUTE   = 16;
   47      /*K* SO_BROADCAST
   48      SO_BROADCAST     XSL_SO_BROADCAST       Allow broadcast messages.*/
   49      %EQU XSL_SO_BROADCAST   = 32;
   50      /*K* SO_USELOOPBACK
   51      SO_USELOOPBACK   XSL_SO_USELOOPBACK     Bypass hardware when possible. */
   52      %EQU XSL_SO_USELOOPBACK = 64;
   53      /*K* SO_LINGER
   54      SO_LINGER        XSL_SO_LINGER          Linger on close if data present. */
   55      %EQU XSL_SO_LINGER      = 128;
   56      /*K* SO_OOBINLINE
   57      SO_OOBINLINE     XSL_SO_OOBINLINE       Leave received OOB data in line.*/
   58      %EQU XSL_SO_OOBINLINE   = 512;
   59      /*K* SO_ORDREL
   60      SO_ORDREL        XSL_SO_ORDREL          Perform orderly release.    */
   61      %EQU XSL_SO_ORDREL      = 1024;
   62      /*K* SO_IMASOCKET
   63      SO_IMASOCKET     XSL_SO_IMASOCKET       Reserved for DPX/2-300 Kernel.*/
   64      %EQU XSL_SO_IMASOCKET   = 2048;
   65
   66      /*K* SO_SNDBUF
   67      SO_SNDBUF        XSL_SO_SNDBUF          Send buffer size. */
   68      %EQU XSL_SO_SNDBUF      = 4097;
   69      /*K* SO_RCVBUF
   70      SO_RCVBUF        XSL_SO_RCVBUF          Receive buffer size. */
   71      %EQU XSL_SO_RCVBUF      = 4098;
   72      /*K* SO_SNDLOWAT
   73      SO_SNDLOWAT      XSL_SO_SNDLOWAT        Send low-water mark. */
   74      %EQU XSL_SO_SNDLOWAT    = 4099;
14:00 NOV 16 '97 XSL_SOCKET_E.:TCA2SI                                      3    
   75      /*K* SO_RCVLOWAT
   76      SO_RCVLOWAT      XSL_SO_RCVLOWAT        Receive low-water mark. */
   77      %EQU XSL_SO_RCVLOWAT    = 4100;
   78      /*K* SO_SNDTIMEO
   79      SO_SNDTIMEO      XSL_SO_SNDTIMEO        Send timeout value. */
   80      %EQU XSL_SO_SNDTIMEO    = 4101;
   81      /*K* SO_RCVTIMEO
   82      SO_RCVTIMEO      XSL_SO_RCVTIMEO        Receive timeout value. */
   83      %EQU XSL_SO_RCVTIMEO    = 4102;
   84      /*K* SO_ERROR
   85      SO_ERROR         XSL_SO_ERROR           Get error status and clear. */
   86      %EQU XSL_SO_ERROR       = 4103;
   87      /*K* SO_TYPE
   88      SO_TYPE          XSL_SO_TYPE            Get socket type. */
   89      %EQU XSL_SO_TYPE        = 4104;
   90
   91      /*K* SO_BLOCKING
   92      SO_BLOCKING      XSL_SO_BLOCKING        Blocking option.            */
   93      %EQU XSL_SO_BLOCKING    = 8193;
   94      /*K* SO_NWREADS
   95      SO_NWREADS       XSL_SO_NWREADS         Max pending NoWait read count.*/
   96      %EQU XSL_SO_NWREADS     = 8194;
   97      /*K* SO_NWBUFFS
   98      SO_NWBUFFS       XSL_SO_NWBUFFS         Max pending buffer count.*/
   99      %EQU XSL_SO_NWBUFFS     = 8195;
  100
  101      /*F* NAME: AF_E
  102      */
  103      /* socket address families */
  104      %EQU XSL_AF_UNSPEC      = 0;
  105      /*K* XSL_AF_UNIX
  106      AF_UNIX          XSL_AF_UNIX       Local to UNIX host (pipes, portals). */
  107      %EQU XSL_AF_UNIX        = 1;
  108      /*K* XSL_AF_INET
  109      AF_INET          XSL_AF_INET       Internet:  UDP, TCP, etc. */
  110      %EQU XSL_AF_INET        = 2;
  111      /*K* XSL_AF_IMPLINK
14:00 NOV 16 '97 XSL_SOCKET_E.:TCA2SI                                      4    
  112      AF_IMPLINK       XSL_AF_IMPLINK    Arpanet IMP address.  */
  113      %EQU XSL_AF_IMPLINK     = 3;
  114      /*K* XSL_AF_PUP
  115      AF_PUP           XSL_AF_PUP        PUP protocols, e.g., BSP. */
  116      %EQU XSL_AF_PUP         = 4;
  117      /*K* XSL_AF_CHAOS
  118      AF_CHAOS         XSL_AF_CHAOS      MIT CHAOS protocols. */
  119      %EQU XSL_AF_CHAOS       = 5;
  120      /*K* XSL_AF_NS
  121      AF_NS            XSL_AF_NS         XEROX NS protocols. */
  122      %EQU XSL_AF_NS          = 6;
  123      /*K* XSL_AF_NBS
  124      AF_NBS           XSL_AF_NBS        NBS protocols. */
  125      %EQU XSL_AF_NBS         = 7;
  126      /*K* XSL_AF_ECMA
  127      AF_ECMA          XSL_AF_ECMA       European Comp. Manufacturers Assoc. */
  128      %EQU XSL_AF_ECMA        = 8;
  129      /*K* XSL_AF_DATAKIT
  130      AF_DATAKIT       XSL_AF_DATAKIT    Datakit protocols. */
  131      %EQU XSL_AF_DATAKIT     = 9;
  132      /*K* XSL_AF_CCITT
  133      AF_CCITT         XSL_AF_CCITT      CCITT protocols, X.25, etc. */
  134      %EQU XSL_AF_CCITT       =10;
  135      /*K* XSL_AF_SNA
  136      AF_SNA           XSL_AF_SNA        IBM SNA. */
  137      %EQU XSL_AF_SNA         =11;
  138      /*K* XSL_AF_DECNET
  139      AF_DECnet        XSL_AF_DECNET     DECnet.                     */
  140      %EQU XSL_AF_DECNET      =12;
  141      /*K* XSL_AF_DLI
  142      AF_DLI           XSL_AF_DLI        Direct data link interface. */
  143      %EQU XSL_AF_DLI         =13;
  144      /*K* XSL_AF_LAT
  145      AF_LAT           XSL_AF_LAT        Local Area Transport (LAT). */
  146      %EQU XSL_AF_LAT         =14;
  147      /*K* XSL_AF_HYLINK
  148      AF_HYLINK        XSL_AF_HYLINK     NSC Hyperchannel. */
14:00 NOV 16 '97 XSL_SOCKET_E.:TCA2SI                                      5    
  149      %EQU XSL_AF_HYLINK      =15;
  150      /*K* XSL_AF_APPLETALK
  151      AF_APPLETALK     XSL_AF_APPLETALK  AppleTalk. */
  152      %EQU XSL_AF_APPLETALK   =16;
  153
  154      %EQU XSL_AF_MAX         =17;
  155
  156      /*F* NAME: PF_E
  157      */
  158      /* socket protocol families; same as address families for now */
  159      %EQU XSL_PF_UNSPEC      = XSL_AF_UNSPEC;
  160      /*K* XSL_PF_UNIX
  161      PF_UNIX          XSL_PF_UNIX       Local to UNIX host (pipes, portals). */
  162      %EQU XSL_PF_UNIX        = XSL_AF_UNIX;
  163      /*K* XSL_PF_INET
  164      PF_INET          XSL_PF_INET       Internet:  UDP, TCP, etc. */
  165      %EQU XSL_PF_INET        = XSL_AF_INET;
  166      /*K* XSL_PF_IMPLINK
  167      PF_IMPLINK       XSL_PF_IMPLINK    Arpanet IMP address. */
  168      %EQU XSL_PF_IMPLINK     = XSL_AF_IMPLINK;
  169      /*K* XSL_PF_PUP
  170      PF_PUP           XSL_PF_PUP        PUP protocols, e.g., BSP. */
  171      %EQU XSL_PF_PUP         = XSL_AF_PUP;
  172      /*K* XSL_PF_CHAOS
  173      PF_CHAOS         XSL_PF_CHAOS      MIT CHAOS protocols. */
  174      %EQU XSL_PF_CHAOS       = XSL_AF_CHAOS;
  175      /*K* XSL_PF_NS
  176      PF_NS            XSL_PF_NS         XEROX NS protocols. */
  177      %EQU XSL_PF_NS          = XSL_AF_NS;
  178      /*K* XSL_PF_NBS
  179      PF_NBS           XSL_PF_NBS        NBS protocols. */
  180      %EQU XSL_PF_NBS         = XSL_AF_NBS;
  181      /*K* XSL_PF_ECMA
  182      PF_ECMA          XSL_PF_ECMA       European Comp. Manufacturers Assoc. */
  183      %EQU XSL_PF_ECMA        = XSL_AF_ECMA;
  184      /*K* XSL_PF_DATAKIT
  185      PF_DATAKIT       XSL_PF_DATAKIT    Datakit protocols. */
14:00 NOV 16 '97 XSL_SOCKET_E.:TCA2SI                                      6    
  186      %EQU XSL_PF_DATAKIT     = XSL_AF_DATAKIT;
  187      /*K* XSL_PF_CCITT
  188      PF_CCITT         XSL_PF_CCITT      CCITT protocols, X.25, etc. */
  189      %EQU XSL_PF_CCITT       = XSL_AF_CCITT;
  190      /*K* XSL_PF_SNA
  191      PF_SNA           XSL_PF_SNA        IBM SNA. */
  192      %EQU XSL_PF_SNA         = XSL_AF_SNA;
  193      /*K* XSL_PF_DECNET
  194      PF_DECnet        XSL_PF_DECNET     DECnet.                     */
  195      %EQU XSL_PF_DECNET      = XSL_AF_DECNET;
  196      /*K* XSL_PF_DLI
  197      PF_DLI           XSL_PF_DLI        Direct data link interface. */
  198      %EQU XSL_PF_DLI         = XSL_AF_DLI;
  199      /*K* XSL_PF_LAT
  200      PF_LAT           XSL_PF_LAT        Local Area Transport (LAT). */
  201      %EQU XSL_PF_LAT         = XSL_AF_LAT;
  202      /*K* XSL_PF_HYLINK
  203      PF_HYLINK        XSL_PF_HYLINK     NSC Hyperchannel. */
  204      %EQU XSL_PF_HYLINK      = XSL_AF_HYLINK;
  205      /*K* XSL_PF_APPLETALK
  206      PF_APPLETALK     XSL_PF_APPLETALK  AppleTalk. */
  207      %EQU XSL_PF_APPLETALK   = XSL_AF_APPLETALK;
  208
  209      %EQU XSL_PF_MAX         = XSL_AF_MAX;
  210
  211      /* level number for get/setsockopt() to apply to socket itself */
  212      %EQU XSL_SOL_SOCKET     = -1;
  213
  214      /* maximum backlog value for listen() */
  215      %EQU XSL_SOMAXCONN      = 5;
  216
  217      /*F* NAME: MSG_E
  218      */
  219      /* read/write options */
  220      /*K* XSL_MSG_OOB
  221      MSG_OOB          XSL_MSG_OOB        Process out-of-band data. */
  222      %EQU XSL_MSG_OOB        = 1;
14:00 NOV 16 '97 XSL_SOCKET_E.:TCA2SI                                      7    
  223      /*K* XSL_MSG_PEEK
  224      MSG_PEEK         XSL_MSG_PEEK       Peek at incoming message. */
  225      %EQU XSL_MSG_PEEK       = 2;
  226      /*K* XSL_MSG_DONTROUTE
  227      MSG_DONTROUTE    XSL_MSG_DONTROUTE  Send without using routing tables. */
  228      %EQU XSL_MSG_DONTROUTE  = 4;
  229      /*K* XSL_MSG_NOWAIT
  230      MSG_NOWAIT       XSL_MSG_NOWAIT     ??                        */
  231      %EQU XSL_MSG_NOWAIT     = 8;
  232      /*K*  XSL_MSG_MORE
  233      MSG_MORE         XSL_MSG_MORE       ??                        */
  234      %EQU XSL_MSG_MORE       = 128;
  235
  236      /* fcntl options */
  237      %EQU XSL_F_DUPFD        = 1;
  238      %EQU XSL_F_GETFD        = 2;
  239      %EQU XSL_F_SETFD        = 3;
  240      %EQU XSL_F_GETFL        = 4;
  241      %EQU XSL_F_SETFL        = 5;
  242      %EQU XSL_F_GETLK        = 6;
  243      %EQU XSL_F_SETLK        = 7;
  244      %EQU XSL_F_SETLKW       = 8;
  245
  246      %EQU XSL_O_RDONLY       = 1;
  247      %EQU XSL_O_WRONLY       = 2;
  248      %EQU XSL_O_RDWR         = 4;
  249      %EQU XSL_O_NDELAY       = 8;
  250      %EQU XSL_O_APPEND       = 16;
  251      %EQU XSL_O_SYNC         = 32;
  252      %EQU XSL_O_BIN          = 64;
  253
  254      %EQU XSL_O_CREAT        = 128;
  255      %EQU XSL_O_TRUNC        = 256;
  256      %EQU XSL_O_EXCL         = 512;
  257      %EQU XSL_O_EXCLCK       = 1024;

