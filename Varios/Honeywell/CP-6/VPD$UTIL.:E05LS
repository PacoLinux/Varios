VERSION E05

PL6.E3A0      #001=VPD$ABORT File=VPD$UTIL.:E05TSI                               WED 07/30/97 07:19 Page:1    
        1        1        /*T***********************************************************/
        2        2        /*T*                                                         */
        3        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        4        4        /*T*                                                         */
        5        5        /*T***********************************************************/
        6        6        VPD$ABORT: PROC;
        7        7
        8        8        /*D*  NAME: VPD$ABORT
        9        9              CALL: Called from XUG$BREAK if the user hits BREAK and enters something
       10       10                    other than "C" or "c".
       11       11              DESCRIPTION: If the current command has REMEMBERed a label in BREAK_LOC,
       12       12                    VPD$ABORT will unwind to that label.  Otherwise, VPD$ABORT will
       13       13                    unwind to the ABORT_CMD label point.
       14       14        */
       15       15
       16       16        %INCLUDE VP_DATA_R;
       17     7003
       18     7004    1   DCL BREAK_LOC1 REMEMBER;
       19     7005
       20     7006    1      IF BREAK_LOC_BITS = '0'B /* no command-specific termination handler */
       21     7007    1        THEN
       22     7008    1         UNWIND TO ABORT_CMD;
       23     7009
       24     7010    1      BREAK_LOC1 = BREAK_LOC;
       25     7011    1      BREAK_LOC_BITS = '0'B;  /* zap handler, so we don't re-enter. */
       26     7012
       27     7013    1      UNWIND TO BREAK_LOC1;
       28     7014
       29     7015    1   END VPD$ABORT;
       30     7016        %EOD;

PL6.E3A0      #001=VPD$ABORT File=VPD$UTIL.:E05TSI                               WED 07/30/97 07:19 Page:2    
--  Include file information  --

   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$ABORT.

   Procedure VPD$ABORT requires 16 words for executable code.
   Procedure VPD$ABORT requires 6 words of local(AUTO) storage.

PL6.E3A0      #001=VPD$ABORT File=VPD$UTIL.:E05TSI                               WED 07/30/97 07:19 Page:3    

 Object Unit name= VPD$ABORT                                  File name= VPD$UTIL.:E05TOU
 UTS= JUL 30 '97 07:19:49.68 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$EI
    2   DCB   even  none     0      0  M$EO
    3   DCB   even  none     0      0  M$EO1
    4   DCB   even  none     0      0  M$ME
    5   DCB   even  none     0      0  M$SI
    6   DCB   even  none     0      0  M$READFILE
    7   DCB   even  none     0      0  M$DO
    8   DCB   even  none     0      0  M$STD1
    9   DCB   even  none     0      0  M$SORT1
   10   Proc  even  none    16     20  VPD$ABORT
   11  RoData even  none     2      2  VPD$ABORT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    10      0   yes            yes      Std        0  VPD$ABORT

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_0
                       nStd      0 X66_AUNWIND
PL6.E3A0      #001=VPD$ABORT File=VPD$UTIL.:E05TSI                               WED 07/30/97 07:19 Page:4    

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  ABORT_CMD                             BREAK_LOC
     BREAK_MESSAGE_REPORTER                SPEC_BUF                              IN_RES
     M$EI                                  M$EO                                  M$EO1
     M$ME                                  M$SI                                  M$READFILE
     M$DO                                  M$STD1                                M$SORT1
PL6.E3A0      #001=VPD$ABORT File=VPD$UTIL.:E05TSI                               WED 07/30/97 07:19 Page:5    


        1        1        /*T***********************************************************/
        2        2        /*T*                                                         */
        3        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        4        4        /*T*                                                         */
        5        5        /*T***********************************************************/
        6        6        VPD$ABORT: PROC;

      6 10 000000   000000 700200 xent  VPD$ABORT    TSX0  ! X66_AUTO_0
        10 000001   000006 000000                    ZERO    6,0

        7        7
        8        8        /*D*  NAME: VPD$ABORT
        9        9              CALL: Called from XUG$BREAK if the user hits BREAK and enters something
       10       10                    other than "C" or "c".
       11       11              DESCRIPTION: If the current command has REMEMBERed a label in BREAK_LOC,
       12       12                    VPD$ABORT will unwind to that label.  Otherwise, VPD$ABORT will
       13       13                    unwind to the ABORT_CMD label point.
       14       14        */
       15       15
       16       16        %INCLUDE VP_DATA_R;
       17     7003
       18     7004    1   DCL BREAK_LOC1 REMEMBER;
       19     7005
       20     7006    1      IF BREAK_LOC_BITS = '0'B /* no command-specific termination handler */

   7006 10 000002   000000 237000 xsym               LDAQ    BREAK_LOC
        10 000003   000000 117000 11                 CMPAQ   0
        10 000004   000010 601000 10                 TNZ     s:7010

       21     7007    1        THEN
       22     7008    1         UNWIND TO ABORT_CMD;

   7008 10 000005   000000 237200 xsym               LDAQ  ! ABORT_CMD
        10 000006   000000 700200 xent               TSX0  ! X66_AUNWIND
        10 000007   000000 000200                    ZERO    0,128

PL6.E3A0      #001=VPD$ABORT File=VPD$UTIL.:E05TSI                               WED 07/30/97 07:19 Page:6    
       23     7009
       24     7010    1      BREAK_LOC1 = BREAK_LOC;

   7010 10 000010   000000 237000 xsym               LDAQ    BREAK_LOC
        10 000011   200004 757100                    STAQ    BREAK_LOC1,,AUTO

       25     7011    1      BREAK_LOC_BITS = '0'B;  /* zap handler, so we don't re-enter. */

   7011 10 000012   000000 235003                    LDA     0,DU
        10 000013   000000 236003                    LDQ     0,DU
        10 000014   000000 757000 xsym               STAQ    BREAK_LOC

       26     7012
       27     7013    1      UNWIND TO BREAK_LOC1;

   7013 10 000015   200004 237300                    LDAQ  ! BREAK_LOC1,,AUTO
        10 000016   000000 700200 xent               TSX0  ! X66_AUNWIND
        10 000017   000000 000200                    ZERO    0,128
       28     7014
       29     7015    1   END VPD$ABORT;
       30     7016        %EOD;

PL6.E3A0      #001=VPD$ABORT File=VPD$UTIL.:E05TSI                               WED 07/30/97 07:19 Page:7    
--  Include file information  --

   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$ABORT.
PL6.E3A0      #001=VPD$ABORT File=VPD$UTIL.:E05TSI                               WED 07/30/97 07:19 Page:8    

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/d REMB        r     1 BREAK_LOC1

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d REMB        r     1 ABORT_CMD                  0-0-0/d REMB        r     1 BREAK_LOC
     0-0-0/d BIT (72)    r     1 BREAK_LOC_BITS
     0-0-0/w EPTR        r     1 BREAK_MESSAGE_REPORTER


   Procedure VPD$ABORT requires 16 words for executable code.
   Procedure VPD$ABORT requires 6 words of local(AUTO) storage.
PL6.E3A0      #001=VPD$ABORT File=VPD$UTIL.:E05TSI                               WED 07/30/97 07:19 Page:9    
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=VPD$ABORT File=VPD$UTIL.:E05TSI                               WED 07/30/97 07:19 Page:10   
          MINI XREF LISTING

ABORT_CMD
      5188**DCL      7008>>UNWIND
BREAK_LOC
      5223**DCL      5223--REDEF    7010>>ASSIGN
BREAK_LOC1
      7004**DCL      7010<<ASSIGN   7013>>UNWIND
BREAK_LOC_BITS
      5223**DCL      7006>>IF       7011<<ASSIGN
DEF_ICB.FID.STRING
      5821**DCL      5822--REDEF
DEV_ICB.FID.STRING
      5707**DCL      5708--REDEF
EI_KEY.KEY
      5919**DCL      5919--REDEF    5919--REDEF    5919--REDEF
EO_OCB.TYPE
      5419**DCL      5420--REDEF
FPT_CLOSE_EI.SN_
      6760**DCL      6760--REDEF
FPT_CLOSE_EI.UTL_
      6761**DCL      6761--REDEF
FPT_CLOSE_EI.V.EXPIRE#
      6775**DCL      6775--REDEF
FPT_CLOSE_EI.V.TYPE#
      6773**DCL      6773--REDEF
FPT_CLOSE_EI.V.XTNSIZE#
      6770**DCL      6770--REDEF    6772--REDEF
FPT_CLOSE_PTL.SN_
      6886**DCL      6886--REDEF
FPT_CLOSE_PTL.UTL_
      6887**DCL      6887--REDEF
FPT_CLOSE_PTL.V.EXPIRE#
      6901**DCL      6901--REDEF
PL6.E3A0      #001=VPD$ABORT File=VPD$UTIL.:E05TSI                               WED 07/30/97 07:19 Page:11   
FPT_CLOSE_PTL.V.TYPE#
      6899**DCL      6899--REDEF
FPT_CLOSE_PTL.V.XTNSIZE#
      6896**DCL      6896--REDEF    6898--REDEF
FPT_CLOSE_READ.SN_
      6802**DCL      6802--REDEF
FPT_CLOSE_READ.UTL_
      6803**DCL      6803--REDEF
FPT_CLOSE_READ.V.EXPIRE#
      6817**DCL      6817--REDEF
FPT_CLOSE_READ.V.TYPE#
      6815**DCL      6815--REDEF
FPT_CLOSE_READ.V.XTNSIZE#
      6812**DCL      6812--REDEF    6814--REDEF
FPT_CLOSE_SI.SN_
      6970**DCL      6970--REDEF
FPT_CLOSE_SI.UTL_
      6971**DCL      6971--REDEF
FPT_CLOSE_SI.V.EXPIRE#
      6985**DCL      6985--REDEF
FPT_CLOSE_SI.V.TYPE#
      6983**DCL      6983--REDEF
FPT_CLOSE_SI.V.XTNSIZE#
      6980**DCL      6980--REDEF    6982--REDEF
FPT_CLOSE_STD.SN_
      6928**DCL      6928--REDEF
FPT_CLOSE_STD.UTL_
      6929**DCL      6929--REDEF
FPT_CLOSE_STD.V.EXPIRE#
      6943**DCL      6943--REDEF
FPT_CLOSE_STD.V.TYPE#
      6941**DCL      6941--REDEF
FPT_CLOSE_STD.V.XTNSIZE#
      6938**DCL      6938--REDEF    6940--REDEF
FPT_CLSEI_FT.SN_
      6844**DCL      6844--REDEF
PL6.E3A0      #001=VPD$ABORT File=VPD$UTIL.:E05TSI                               WED 07/30/97 07:19 Page:12   
FPT_CLSEI_FT.UTL_
      6845**DCL      6845--REDEF
FPT_CLSEI_FT.V.EXPIRE#
      6859**DCL      6859--REDEF
FPT_CLSEI_FT.V.TYPE#
      6857**DCL      6857--REDEF
FPT_CLSEI_FT.V.XTNSIZE#
      6854**DCL      6854--REDEF    6856--REDEF
FPT_OPEN_EI.ACSVEH_
      6415**DCL      6416--REDEF
FPT_OPEN_EI.ALTKEYS_
      6421**DCL      6422--REDEF    6422--REDEF
FPT_OPEN_EI.HDR_
      6420**DCL      6421--REDEF
FPT_OPEN_EI.TAB_
      6419**DCL      6420--REDEF
FPT_OPEN_EI.UHL_
      6413**DCL      6414--REDEF    6414--REDEF
FPT_OPEN_EI.V.FSN#
      6453**DCL      6453--REDEF    6453--REDEF
FPT_OPEN_EI.WSN_
      6419**DCL      6419--REDEF
FPT_OPEN_EI_SAVE.ACSVEH_
      6524**DCL      6525--REDEF
FPT_OPEN_EI_SAVE.ALTKEYS_
      6530**DCL      6531--REDEF    6531--REDEF
FPT_OPEN_EI_SAVE.HDR_
      6529**DCL      6530--REDEF
FPT_OPEN_EI_SAVE.TAB_
      6528**DCL      6529--REDEF
FPT_OPEN_EI_SAVE.UHL_
      6522**DCL      6523--REDEF    6523--REDEF
FPT_OPEN_EI_SAVE.V.FSN#
      6562**DCL      6562--REDEF    6562--REDEF
FPT_OPEN_EI_SAVE.WSN_
      6528**DCL      6528--REDEF
PL6.E3A0      #001=VPD$ABORT File=VPD$UTIL.:E05TSI                               WED 07/30/97 07:19 Page:13   
FPT_OPEN_OUT.ACSVEH_
      6306**DCL      6307--REDEF
FPT_OPEN_OUT.ALTKEYS_
      6312**DCL      6313--REDEF    6313--REDEF
FPT_OPEN_OUT.HDR_
      6311**DCL      6312--REDEF
FPT_OPEN_OUT.TAB_
      6310**DCL      6311--REDEF
FPT_OPEN_OUT.UHL_
      6304**DCL      6305--REDEF    6305--REDEF
FPT_OPEN_OUT.V.FSN#
      6344**DCL      6344--REDEF    6344--REDEF
FPT_OPEN_OUT.WSN_
      6310**DCL      6310--REDEF
FPT_OPEN_OUT_SAVE.ACSVEH_
      6197**DCL      6198--REDEF
FPT_OPEN_OUT_SAVE.ALTKEYS_
      6203**DCL      6204--REDEF    6204--REDEF
FPT_OPEN_OUT_SAVE.HDR_
      6202**DCL      6203--REDEF
FPT_OPEN_OUT_SAVE.TAB_
      6201**DCL      6202--REDEF
FPT_OPEN_OUT_SAVE.UHL_
      6195**DCL      6196--REDEF    6196--REDEF
FPT_OPEN_OUT_SAVE.V.FSN#
      6235**DCL      6235--REDEF    6235--REDEF
FPT_OPEN_OUT_SAVE.WSN_
      6201**DCL      6201--REDEF
FPT_READ_STD.STATION_
      6625**DCL      6626--REDEF
FPT_READ_STD.V.DVBYTE.REREAD#
      6637**DCL      6637--REDEF
FPT_READ_STD.V.INDX#
      6635**DCL      6635--REDEF
FPT_READ_UC.STATION_
      6586**DCL      6587--REDEF
PL6.E3A0      #001=VPD$ABORT File=VPD$UTIL.:E05TSI                               WED 07/30/97 07:19 Page:14   
FPT_READ_UC.V.DVBYTE.REREAD#
      6598**DCL      6598--REDEF
FPT_READ_UC.V.INDX#
      6596**DCL      6596--REDEF
FPT_WRITE_ME.STATION_
      6694**DCL      6694--REDEF
FPT_WRITE_ME.V.DVBYTE.VFC#
      6701**DCL      6701--REDEF
FPT_WRITE_OUT.STATION_
      6725**DCL      6725--REDEF
FPT_WRITE_OUT.V.DVBYTE.VFC#
      6732**DCL      6732--REDEF
FPT_WRITE_UC.STATION_
      6663**DCL      6663--REDEF
FPT_WRITE_UC.V.DVBYTE.VFC#
      6670**DCL      6670--REDEF
FROM_SN.SN
      5569**DCL      5570--REDEF
GETCMD.OUT$
      4776**DCL      4782--REDEF
ICB.FID.STRING
      5593**DCL      5594--REDEF
IFSFA_PARAM.EOMCHAR#
      5948**DCL      5949--REDEF
IFSFA_PARAM.SIG1
      5942**DCL      5942--REDEF
IFSFA_PARAM.SIG2
      5942**DCL      5943--REDEF
IN_RES
      5515**DCL      5515--REDEF
IN_SN.SN
      5531**DCL      5532--REDEF
OCB.TYPE
      5277**DCL      5278--REDEF
OFSFA_PARAM.EOMCHAR#
      5978**DCL      5979--REDEF
PL6.E3A0      #001=VPD$ABORT File=VPD$UTIL.:E05TSI                               WED 07/30/97 07:19 Page:15   
OFSFA_PARAM.SIG1
      5972**DCL      5972--REDEF
OFSFA_PARAM.SIG2
      5972**DCL      5973--REDEF
OUT_SN.SN
      5549**DCL      5550--REDEF
SPEC_BUF
      5227**DCL      5227--REDEF

PL6.E3A0      #002=VPD$ANAL_NAME File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:20 Page:16   
       31        1        /*M* VPD$UTIL  MODULE TO CONTAIN UTILITY ROUTINES FOR PCL                     */
       32        2        /*T***********************************************************/
       33        3        /*T*                                                         */
       34        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
       35        5        /*T*                                                         */
       36        6        /*T***********************************************************/
       37        7        /*X* DTI=1,THI=1    */
       38        8        /* Next available error code = 270  (by 10s)  */
       39        9        /* OTHER CODES AVAILABLE =    (NONE)     */
       40       10        VPD$ANAL_NAME: PROC(NAME,SPEC);
       41       11        /*D* NAME: VPD$ANAL_NAME
       42       12             CALL: CALL VPD$ANAL_NAME(NAME,SPEC);
       43       13             DESCRIPTION: VPD$ANAL_NAME takes NAME, a textc of length and 31 characters,
       44       14                          and sets SPEC, an sbin word, to a value representing the
       45       15                          type of filename NAME represents as below:
       46       16                            SPEC                     INTERPRETATION
       47       17                            ----                     --------------
       48       18                             1                       Single filename
       49       19                             4                       ?something wildcarding
       50       20                             5                       wildcard without initial '?'
       51       21        */
       52       22        %INCLUDE VP_MACRO_C;
       53      536    1   DCL 1 NAME,
       54      537    1         2 LEN UBIN BYTE UNAL,
       55      538    1         2 TEXT CHAR(31);
       56      539    1   DCL I UBIN;
       57      540    1   DCL SPEC SBIN WORD;
       58      541        /**/
       59      542    1           CALL INDEX(I,'?',NAME.TEXT)
       60      543    2            WHENRETURN DO;                 /* There's a ? somewhere              */
       61      544    2               IF I=0
       62      545    2                THEN
       63      546    2                  SPEC = 4;                /* At the front                       */
       64      547    2                ELSE
       65      548    2                  SPEC = 5;                /* Not in front                       */
       66      549    2               END;
       67      550    2            WHENALTRETURN DO;              /* Must be a regular file name        */
PL6.E3A0      #002=VPD$ANAL_NAME File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:20 Page:17   
       68      551    2               SPEC = 1;
       69      552    2               END;
       70      553    1           RETURN;
       71      554    1   END VPD$ANAL_NAME;
       72      555        %EOD;

PL6.E3A0      #002=VPD$ANAL_NAME File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:20 Page:18   
--  Include file information  --

   VP_MACRO_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VPD$ANAL_NAME.

   Procedure VPD$ANAL_NAME requires 22 words for executable code.
   Procedure VPD$ANAL_NAME requires 6 words of local(AUTO) storage.

PL6.E3A0      #002=VPD$ANAL_NAME File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:20 Page:19   

 Object Unit name= VPD$ANAL_NAME                              File name= VPD$UTIL.:E05TOU
 UTS= JUL 30 '97 07:20:51.64 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none    22     26  VPD$ANAL_NAME
    1  RoData even  none     1      1  VPD$ANAL_NAME

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes            yes      Std        2  VPD$ANAL_NAME

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_2
                       nStd      0 X66_ARET
PL6.E3A0      #002=VPD$ANAL_NAME File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:20 Page:20   


       31        1        /*M* VPD$UTIL  MODULE TO CONTAIN UTILITY ROUTINES FOR PCL                     */
       32        2        /*T***********************************************************/
       33        3        /*T*                                                         */
       34        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
       35        5        /*T*                                                         */
       36        6        /*T***********************************************************/
       37        7        /*X* DTI=1,THI=1    */
       38        8        /* Next available error code = 270  (by 10s)  */
       39        9        /* OTHER CODES AVAILABLE =    (NONE)     */
       40       10        VPD$ANAL_NAME: PROC(NAME,SPEC);

     10  0 000000   000000 700200 xent  VPD$ANAL_NA* TSX0  ! X66_AUTO_2
         0 000001   000006 000002                    ZERO    6,2

       41       11        /*D* NAME: VPD$ANAL_NAME
       42       12             CALL: CALL VPD$ANAL_NAME(NAME,SPEC);
       43       13             DESCRIPTION: VPD$ANAL_NAME takes NAME, a textc of length and 31 characters,
       44       14                          and sets SPEC, an sbin word, to a value representing the
       45       15                          type of filename NAME represents as below:
       46       16                            SPEC                     INTERPRETATION
       47       17                            ----                     --------------
       48       18                             1                       Single filename
       49       19                             4                       ?something wildcarding
       50       20                             5                       wildcard without initial '?'
       51       21        */
       52       22        %INCLUDE VP_MACRO_C;
       53      536    1   DCL 1 NAME,
       54      537    1         2 LEN UBIN BYTE UNAL,
       55      538    1         2 TEXT CHAR(31);
       56      539    1   DCL I UBIN;
       57      540    1   DCL SPEC SBIN WORD;
       58      541        /**/
       59      542    1           CALL INDEX(I,'?',NAME.TEXT)

    542  0 000002   200003 470500                    LDP0    @NAME,,AUTO
         0 000003   000000 124500                    SCM     mask='000'O
PL6.E3A0      #002=VPD$ANAL_NAME File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:20 Page:21   
         0 000004   000000 200037                    ADSC9   0,,PR0                   cn=1,n=31
         0 000005   000000 000001 1                  ADSC9   0                        cn=0,n=1
         0 000006   200005 000100                    ARG     I,,AUTO
         0 000007   000022 606400 0                  TTN     s:551

       60      543    2            WHENRETURN DO;                 /* There's a ? somewhere              */

       61      544    2               IF I=0

    544  0 000010   200005 235100                    LDA     I,,AUTO
         0 000011   000016 601000 0                  TNZ     s:548

       62      545    2                THEN
       63      546    2                  SPEC = 4;                /* At the front                       */

    546  0 000012   000004 236007                    LDQ     4,DL
         0 000013   200004 471500                    LDP1    @SPEC,,AUTO
         0 000014   100000 756100                    STQ     0,,PR1
         0 000015   000021 710000 0                  TRA     s:549

       64      547    2                ELSE
       65      548    2                  SPEC = 5;                /* Not in front                       */

    548  0 000016   000005 236007                    LDQ     5,DL
         0 000017   200004 471500                    LDP1    @SPEC,,AUTO
         0 000020   100000 756100                    STQ     0,,PR1

       66      549    2               END;

    549  0 000021   000025 710000 0                  TRA     s:553

       67      550    2            WHENALTRETURN DO;              /* Must be a regular file name        */

       68      551    2               SPEC = 1;

    551  0 000022   000001 235007                    LDA     1,DL
         0 000023   200004 470500                    LDP0    @SPEC,,AUTO
PL6.E3A0      #002=VPD$ANAL_NAME File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:20 Page:22   
         0 000024   000000 755100                    STA     0,,PR0

       69      552    2               END;

       70      553    1           RETURN;

    553  0 000025   000000 702200 xent               TSX2  ! X66_ARET
       71      554    1   END VPD$ANAL_NAME;
       72      555        %EOD;

PL6.E3A0      #002=VPD$ANAL_NAME File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:20 Page:23   
--  Include file information  --

   VP_MACRO_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VPD$ANAL_NAME.
PL6.E3A0      #002=VPD$ANAL_NAME File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:20 Page:24   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @NAME                      4-0-0/w PTR         r     1 @SPEC
     5-0-0/w UBIN        r     1 I                         *0-0-0/c STRC(288)   r     1 NAME
    *0-0-0/w SBIN        r     1 SPEC


   Procedure VPD$ANAL_NAME requires 22 words for executable code.
   Procedure VPD$ANAL_NAME requires 6 words of local(AUTO) storage.
PL6.E3A0      #002=VPD$ANAL_NAME File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:20 Page:25   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=VPD$ANAL_NAME File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:20 Page:26   
          MINI XREF LISTING

I
       539**DCL       542<<CALLBLT   544>>IF
NAME
       536**DCL        10--PROC
NAME.TEXT
       538**DCL       542>>CALLBLT
SPEC
       540**DCL        10--PROC      546<<ASSIGN    548<<ASSIGN    551<<ASSIGN

PL6.E3A0      #003=VPD$BREAK File=VPD$UTIL.:E05TSI                               WED 07/30/97 07:20 Page:27   
       73        1        /*T***********************************************************/
       74        2        /*T*                                                         */
       75        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
       76        4        /*T*                                                         */
       77        5        /*T***********************************************************/
       78        6        VPD$BREAK: PROC ALTRET;
       79        7        /*D* NAME: VPD$BREAK
       80        8              CALL: Called by XUG$BREAK, to print a "Break" message.
       81        9              DESCRIPTION: If the command in progress has supplied a break-message
       82       10                    routine (its ENTADDR will be in BREAK_MESSAGE_REPORTER), that
       83       11                    routine is called to report the COPY position, etc. to the user.
       84       12                    If no break-message routine is provided, or if the routine ALTRETs,
       85       13                    then VPD$BREAK altreturns to XUG$BREAK, which then prints the
       86       14                    default break message.
       87       15        */
       88       16        %INCLUDE VP_DATA_R;
       89     7003    1   DCL BREAK_LOC1 REMEMBER DALIGNED;
       90     7004    1   DCL BREAK_LOC1_BITS REDEF BREAK_LOC1 BIT(72);
       91     7005    1           BREAKS = BREAKS + 1;
       92     7006
       93     7007    1           FPT_PROMPT.PROMPT_ = GETCMD.PROMPT_;
       94     7008
       95     7009    1           CALL M$PROMPT (FPT_PROMPT);
       96     7010
       97     7011    1           IF BREAK_MESSAGE_REPORTER = ENTADDR(NIL)
       98     7012    1            THEN
       99     7013    1              ALTRETURN;
      100     7014
      101     7015    1           CALL BREAK_MESSAGE_REPORTER
      102     7016    2            WHENALTRETURN DO;
      103     7017    2               ALTRETURN;
      104     7018    2               END;
      105     7019
      106     7020    1           RETURN;
      107     7021    1   END VPD$BREAK;
      108     7022        %EOD;

PL6.E3A0      #003=VPD$BREAK File=VPD$UTIL.:E05TSI                               WED 07/30/97 07:20 Page:28   
--  Include file information  --

   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$BREAK.

   Procedure VPD$BREAK requires 20 words for executable code.
   Procedure VPD$BREAK requires 6 words of local(AUTO) storage.

PL6.E3A0      #003=VPD$BREAK File=VPD$UTIL.:E05TSI                               WED 07/30/97 07:20 Page:29   

 Object Unit name= VPD$BREAK                                  File name= VPD$UTIL.:E05TOU
 UTS= JUL 30 '97 07:20:56.48 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$EI
    2   DCB   even  none     0      0  M$EO
    3   DCB   even  none     0      0  M$EO1
    4   DCB   even  none     0      0  M$ME
    5   DCB   even  none     0      0  M$SI
    6   DCB   even  none     0      0  M$READFILE
    7   DCB   even  none     0      0  M$DO
    8   DCB   even  none     0      0  M$STD1
    9   DCB   even  none     0      0  M$SORT1
   10   Proc  even  none    20     24  VPD$BREAK

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    10      0   yes    yes     yes      Std        0  VPD$BREAK

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_0
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET
PL6.E3A0      #003=VPD$BREAK File=VPD$UTIL.:E05TSI                               WED 07/30/97 07:20 Page:30   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  GETCMD                                BREAK_LOC
     BREAKS                                BREAK_MESSAGE_REPORTER                SPEC_BUF
     IN_RES                                M$EI                                  M$EO
     M$EO1                                 M$ME                                  M$SI
     M$READFILE                            M$DO                                  M$STD1
     M$SORT1                               FPT_PROMPT                            B_VECTNIL
PL6.E3A0      #003=VPD$BREAK File=VPD$UTIL.:E05TSI                               WED 07/30/97 07:20 Page:31   


       73        1        /*T***********************************************************/
       74        2        /*T*                                                         */
       75        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
       76        4        /*T*                                                         */
       77        5        /*T***********************************************************/
       78        6        VPD$BREAK: PROC ALTRET;

      6 10 000000   000000 700200 xent  VPD$BREAK    TSX0  ! X66_AUTO_0
        10 000001   000006 000000                    ZERO    6,0

       79        7        /*D* NAME: VPD$BREAK
       80        8              CALL: Called by XUG$BREAK, to print a "Break" message.
       81        9              DESCRIPTION: If the command in progress has supplied a break-message
       82       10                    routine (its ENTADDR will be in BREAK_MESSAGE_REPORTER), that
       83       11                    routine is called to report the COPY position, etc. to the user.
       84       12                    If no break-message routine is provided, or if the routine ALTRETs,
       85       13                    then VPD$BREAK altreturns to XUG$BREAK, which then prints the
       86       14                    default break message.
       87       15        */
       88       16        %INCLUDE VP_DATA_R;
       89     7003    1   DCL BREAK_LOC1 REMEMBER DALIGNED;
       90     7004    1   DCL BREAK_LOC1_BITS REDEF BREAK_LOC1 BIT(72);
       91     7005    1           BREAKS = BREAKS + 1;

   7005 10 000002   000000 054000 xsym               AOS     BREAKS

       92     7006
       93     7007    1           FPT_PROMPT.PROMPT_ = GETCMD.PROMPT_;

   7007 10 000003   000000 100400                    MLR     fill='000'O
        10 000004   000025 000010 xsym               ADSC9   GETCMD+21                cn=0,n=8
        10 000005   000004 000010 xsym               ADSC9   FPT_PROMPT+4             cn=0,n=8

       94     7008
       95     7009    1           CALL M$PROMPT (FPT_PROMPT);

PL6.E3A0      #003=VPD$BREAK File=VPD$UTIL.:E05TSI                               WED 07/30/97 07:20 Page:32   
   7009 10 000006   000000 630400 xsym               EPPR0   FPT_PROMPT
        10 000007   160002 713400                    CLIMB   57346
        10 000010   401000 401760                    pmme    nvectors=3

       96     7010
       97     7011    1           IF BREAK_MESSAGE_REPORTER = ENTADDR(NIL)

   7011 10 000011   000000 236000 xsym               LDQ     BREAK_MESSAGE_REPORTER
        10 000012   000002 116000 xsym               CMPQ    B_VECTNIL+2
        10 000013   000015 601000 10                 TNZ     s:7015

       98     7012    1            THEN
       99     7013    1              ALTRETURN;

   7013 10 000014   000000 702200 xent               TSX2  ! X66_AALT

      100     7014
      101     7015    1           CALL BREAK_MESSAGE_REPORTER

   7015 10 000015   000000 220000 xsym               LDX0    BREAK_MESSAGE_REPORTER
        10 000016   000002 631400 xsym               EPPR1   B_VECTNIL+2
        10 000017   000000 701010                    TSX1    0,X0
        10 000020   000022 702000 10                 TSX2    s:7017
        10 000021   000023 710000 10                 TRA     s:7020

      102     7016    2            WHENALTRETURN DO;

      103     7017    2               ALTRETURN;

   7017 10 000022   000000 702200 xent               TSX2  ! X66_AALT

      104     7018    2               END;
      105     7019
      106     7020    1           RETURN;

   7020 10 000023   000000 702200 xent               TSX2  ! X66_ARET
      107     7021    1   END VPD$BREAK;
PL6.E3A0      #003=VPD$BREAK File=VPD$UTIL.:E05TSI                               WED 07/30/97 07:20 Page:33   
      108     7022        %EOD;

PL6.E3A0      #003=VPD$BREAK File=VPD$UTIL.:E05TSI                               WED 07/30/97 07:20 Page:34   
--  Include file information  --

   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$BREAK.
PL6.E3A0      #003=VPD$BREAK File=VPD$UTIL.:E05TSI                               WED 07/30/97 07:20 Page:35   

 **** Variables and constants ****

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN        r     1 BREAKS
     0-0-0/w EPTR        r     1 BREAK_MESSAGE_REPORTER
     0-0-0/d STRC(360)   r     1 FPT_PROMPT                 0-0-0/d STRC(1512)  r     1 GETCMD


   Procedure VPD$BREAK requires 20 words for executable code.
   Procedure VPD$BREAK requires 6 words of local(AUTO) storage.
PL6.E3A0      #003=VPD$BREAK File=VPD$UTIL.:E05TSI                               WED 07/30/97 07:20 Page:36   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=VPD$BREAK File=VPD$UTIL.:E05TSI                               WED 07/30/97 07:20 Page:37   
          MINI XREF LISTING

BREAKS
      5223**DCL      7005<<ASSIGN   7005>>ASSIGN
BREAK_LOC
      5223**DCL      5223--REDEF
BREAK_LOC1
      7003**DCL      7004--REDEF
BREAK_MESSAGE_REPORTER
      5224**DCL      7011>>IF       7015>>CALL
DEF_ICB.FID.STRING
      5821**DCL      5822--REDEF
DEV_ICB.FID.STRING
      5707**DCL      5708--REDEF
EI_KEY.KEY
      5919**DCL      5919--REDEF    5919--REDEF    5919--REDEF
EO_OCB.TYPE
      5419**DCL      5420--REDEF
FPT_CLOSE_EI.SN_
      6760**DCL      6760--REDEF
FPT_CLOSE_EI.UTL_
      6761**DCL      6761--REDEF
FPT_CLOSE_EI.V.EXPIRE#
      6775**DCL      6775--REDEF
FPT_CLOSE_EI.V.TYPE#
      6773**DCL      6773--REDEF
FPT_CLOSE_EI.V.XTNSIZE#
      6770**DCL      6770--REDEF    6772--REDEF
FPT_CLOSE_PTL.SN_
      6886**DCL      6886--REDEF
FPT_CLOSE_PTL.UTL_
      6887**DCL      6887--REDEF
FPT_CLOSE_PTL.V.EXPIRE#
      6901**DCL      6901--REDEF
PL6.E3A0      #003=VPD$BREAK File=VPD$UTIL.:E05TSI                               WED 07/30/97 07:20 Page:38   
FPT_CLOSE_PTL.V.TYPE#
      6899**DCL      6899--REDEF
FPT_CLOSE_PTL.V.XTNSIZE#
      6896**DCL      6896--REDEF    6898--REDEF
FPT_CLOSE_READ.SN_
      6802**DCL      6802--REDEF
FPT_CLOSE_READ.UTL_
      6803**DCL      6803--REDEF
FPT_CLOSE_READ.V.EXPIRE#
      6817**DCL      6817--REDEF
FPT_CLOSE_READ.V.TYPE#
      6815**DCL      6815--REDEF
FPT_CLOSE_READ.V.XTNSIZE#
      6812**DCL      6812--REDEF    6814--REDEF
FPT_CLOSE_SI.SN_
      6970**DCL      6970--REDEF
FPT_CLOSE_SI.UTL_
      6971**DCL      6971--REDEF
FPT_CLOSE_SI.V.EXPIRE#
      6985**DCL      6985--REDEF
FPT_CLOSE_SI.V.TYPE#
      6983**DCL      6983--REDEF
FPT_CLOSE_SI.V.XTNSIZE#
      6980**DCL      6980--REDEF    6982--REDEF
FPT_CLOSE_STD.SN_
      6928**DCL      6928--REDEF
FPT_CLOSE_STD.UTL_
      6929**DCL      6929--REDEF
FPT_CLOSE_STD.V.EXPIRE#
      6943**DCL      6943--REDEF
FPT_CLOSE_STD.V.TYPE#
      6941**DCL      6941--REDEF
FPT_CLOSE_STD.V.XTNSIZE#
      6938**DCL      6938--REDEF    6940--REDEF
FPT_CLSEI_FT.SN_
      6844**DCL      6844--REDEF
PL6.E3A0      #003=VPD$BREAK File=VPD$UTIL.:E05TSI                               WED 07/30/97 07:20 Page:39   
FPT_CLSEI_FT.UTL_
      6845**DCL      6845--REDEF
FPT_CLSEI_FT.V.EXPIRE#
      6859**DCL      6859--REDEF
FPT_CLSEI_FT.V.TYPE#
      6857**DCL      6857--REDEF
FPT_CLSEI_FT.V.XTNSIZE#
      6854**DCL      6854--REDEF    6856--REDEF
FPT_OPEN_EI.ACSVEH_
      6415**DCL      6416--REDEF
FPT_OPEN_EI.ALTKEYS_
      6421**DCL      6422--REDEF    6422--REDEF
FPT_OPEN_EI.HDR_
      6420**DCL      6421--REDEF
FPT_OPEN_EI.TAB_
      6419**DCL      6420--REDEF
FPT_OPEN_EI.UHL_
      6413**DCL      6414--REDEF    6414--REDEF
FPT_OPEN_EI.V.FSN#
      6453**DCL      6453--REDEF    6453--REDEF
FPT_OPEN_EI.WSN_
      6419**DCL      6419--REDEF
FPT_OPEN_EI_SAVE.ACSVEH_
      6524**DCL      6525--REDEF
FPT_OPEN_EI_SAVE.ALTKEYS_
      6530**DCL      6531--REDEF    6531--REDEF
FPT_OPEN_EI_SAVE.HDR_
      6529**DCL      6530--REDEF
FPT_OPEN_EI_SAVE.TAB_
      6528**DCL      6529--REDEF
FPT_OPEN_EI_SAVE.UHL_
      6522**DCL      6523--REDEF    6523--REDEF
FPT_OPEN_EI_SAVE.V.FSN#
      6562**DCL      6562--REDEF    6562--REDEF
FPT_OPEN_EI_SAVE.WSN_
      6528**DCL      6528--REDEF
PL6.E3A0      #003=VPD$BREAK File=VPD$UTIL.:E05TSI                               WED 07/30/97 07:20 Page:40   
FPT_OPEN_OUT.ACSVEH_
      6306**DCL      6307--REDEF
FPT_OPEN_OUT.ALTKEYS_
      6312**DCL      6313--REDEF    6313--REDEF
FPT_OPEN_OUT.HDR_
      6311**DCL      6312--REDEF
FPT_OPEN_OUT.TAB_
      6310**DCL      6311--REDEF
FPT_OPEN_OUT.UHL_
      6304**DCL      6305--REDEF    6305--REDEF
FPT_OPEN_OUT.V.FSN#
      6344**DCL      6344--REDEF    6344--REDEF
FPT_OPEN_OUT.WSN_
      6310**DCL      6310--REDEF
FPT_OPEN_OUT_SAVE.ACSVEH_
      6197**DCL      6198--REDEF
FPT_OPEN_OUT_SAVE.ALTKEYS_
      6203**DCL      6204--REDEF    6204--REDEF
FPT_OPEN_OUT_SAVE.HDR_
      6202**DCL      6203--REDEF
FPT_OPEN_OUT_SAVE.TAB_
      6201**DCL      6202--REDEF
FPT_OPEN_OUT_SAVE.UHL_
      6195**DCL      6196--REDEF    6196--REDEF
FPT_OPEN_OUT_SAVE.V.FSN#
      6235**DCL      6235--REDEF    6235--REDEF
FPT_OPEN_OUT_SAVE.WSN_
      6201**DCL      6201--REDEF
FPT_PROMPT
      6068**DCL      7009<>CALL
FPT_PROMPT.PROMPT_
      6074**DCL      7007<<ASSIGN
FPT_READ_STD.STATION_
      6625**DCL      6626--REDEF
FPT_READ_STD.V.DVBYTE.REREAD#
      6637**DCL      6637--REDEF
PL6.E3A0      #003=VPD$BREAK File=VPD$UTIL.:E05TSI                               WED 07/30/97 07:20 Page:41   
FPT_READ_STD.V.INDX#
      6635**DCL      6635--REDEF
FPT_READ_UC.STATION_
      6586**DCL      6587--REDEF
FPT_READ_UC.V.DVBYTE.REREAD#
      6598**DCL      6598--REDEF
FPT_READ_UC.V.INDX#
      6596**DCL      6596--REDEF
FPT_WRITE_ME.STATION_
      6694**DCL      6694--REDEF
FPT_WRITE_ME.V.DVBYTE.VFC#
      6701**DCL      6701--REDEF
FPT_WRITE_OUT.STATION_
      6725**DCL      6725--REDEF
FPT_WRITE_OUT.V.DVBYTE.VFC#
      6732**DCL      6732--REDEF
FPT_WRITE_UC.STATION_
      6663**DCL      6663--REDEF
FPT_WRITE_UC.V.DVBYTE.VFC#
      6670**DCL      6670--REDEF
FROM_SN.SN
      5569**DCL      5570--REDEF
GETCMD.OUT$
      4776**DCL      4782--REDEF
GETCMD.PROMPT_
      4980**DCL      7007>>ASSIGN
ICB.FID.STRING
      5593**DCL      5594--REDEF
IFSFA_PARAM.EOMCHAR#
      5948**DCL      5949--REDEF
IFSFA_PARAM.SIG1
      5942**DCL      5942--REDEF
IFSFA_PARAM.SIG2
      5942**DCL      5943--REDEF
IN_RES
      5515**DCL      5515--REDEF
PL6.E3A0      #003=VPD$BREAK File=VPD$UTIL.:E05TSI                               WED 07/30/97 07:20 Page:42   
IN_SN.SN
      5531**DCL      5532--REDEF
M$PROMPT
        57**DCL-ENT  7009--CALL
OCB.TYPE
      5277**DCL      5278--REDEF
OFSFA_PARAM.EOMCHAR#
      5978**DCL      5979--REDEF
OFSFA_PARAM.SIG1
      5972**DCL      5972--REDEF
OFSFA_PARAM.SIG2
      5972**DCL      5973--REDEF
OUT_SN.SN
      5549**DCL      5550--REDEF
SPEC_BUF
      5227**DCL      5227--REDEF

PL6.E3A0      #004=VPD$CHECK_VOL File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:22 Page:43   
      109        1        /*T***********************************************************/
      110        2        /*T*                                                         */
      111        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      112        4        /*T*                                                         */
      113        5        /*T***********************************************************/
      114        6        VPD$CHECK_VOL: PROC(SN_LIST,FUN,DCBNM,VOL,DIR);
      115        7        /*D* NAME: VPD$CHECK_VOL
      116        8             CALL: CALL VPD$CHECK_VOL(SN_LIST,FUN,DCBNM,VOL,DIR);
      117        9             DESCRIPTION: This routine makes checks for VOLume transition and
      118       10                          maintains the data necessary for these checks.
      119       11                  FUN     ACTION
      120       12                  ---     ------
      121       13                    0     Check for volume transition on the DCBNM.  If it
      122       14                          is detected, print the new vol from SN_LIST.
      123       15                    1     Remove the tape set described by SN_LIST.
      124       16                    2     Force the current volume for the tape set described
      125       17                          by SN_LIST to be VOL.
      126       18                    3     Find out whan the current volume is for the set
      127       19                          described by SN_LIST.  Return it in VOL.
      128       20                  DIR = 0 indicates input, DIR = 1 is output, DIR = 2 is unknown.
      129       21           FUN  ACTION  SN_LIST  DCBNM  VOL  DIR       (CACHE)
      130       22           ---  ------  -------  -----  ---  ---       -------
      131       23            0   CHECK      Y       Y    USED USED       USED
      132       24            1   REMOVE     Y                 UNKNOWN
      133       25            2   FORCE      Y            USED USED       SET-IF-DIR-KNOWN
      134       26            3   INQUIRE    Y            SET  USED       SET-IF-DIR-KNOWN
      135       27            A cache for VOL is used by CHECK to avoid excessive calls to M$CMDVAR.
      136       28            The cache is keyed by DIR.  The cache is initialized by FORCE or
      137       29            INQUIRE.  One of these MUST be used before trying a CHECK.
      138       30        */
      139       31        %INCLUDE VP_DATA_R;
      140     7018        %INCLUDE F$DCB;
      141     7067        /**/
      142     7068        /*  ENTRY DCLS  */
      143     7069        /**/
      144     7070        %VP_ENTRIES (OMIT=VPD$CHECK_VOL);
      145     7278        /**/
PL6.E3A0      #004=VPD$CHECK_VOL File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:22 Page:44   
      146     7279        /*  PARAMETERS  */
      147     7280        /**/
      148     7281        %PCL_SN(FPTN = SN_LIST,STCLASS = "");
      149     7299    1   DCL DCBNM SBIN WORD;
      150     7300    1   DCL FUN SBIN WORD;
      151     7301    1   DCL VOL SBIN WORD;
      152     7302    1   DCL DIR SBIN WORD;
      153     7303        /**/
      154     7304        /*  CONSTANTs  */
      155     7305        /**/
      156     7306        %VLP_NAME(FPTN = PRIVATE_NAME,LEN = 31,NAME = 'PCL',STCLASS = CONSTANT);
      157     7333        %VLP_ACCT(FPTN = PRIVATE_ACCT,ACCT = ':SYS',STCLASS = CONSTANT);
      158     7346        %VLP_SN(FPTN = PRIVATE_PSN,N = 1,SN = 'SYS',STCLASS = CONSTANT);
      159     7359        /**/
      160     7360        /*  LOCAL STORAGE  */
      161     7361        /**/
      162     7362    1   DCL 1 TEXTC,
      163     7363    1         2 C UBIN(9) UNAL,
      164     7364    1         2 TEXT CHAR(31);
      165     7365    1   DCL 1 CMDVAR_NAME STATIC,
      166     7366    1         2 LEN UBIN(9) UNAL,
      167     7367    1         2 INTRO CHAR(12) INIT('PCL_TAPESET_'),
      168     7368              %PCL_SN(FPTN = VOL,LVL = 2);
      169     7386    1   DCL 1 CMDVAR_VAL STATIC,
      170     7387    1         2 LEN UBIN(9) UNAL,
      171     7388    1         2 TEXT CHAR(80),
      172     7389    1         2 PART REDEF TEXT,
      173     7390    1           3 FIRST CHAR(5),
      174     7391    1           3 REST CHAR(75);
      175     7392        %FPT_CMDVAR(FPTN = FPT_CMDVAR,
      176     7393                    PRIVATE = YES,
      177     7394                    PNAME = PRIVATE_NAME,
      178     7395                    PACCT = PRIVATE_ACCT,
      179     7396                    PPSN = PRIVATE_PSN,
      180     7397                    NAME = CMDVAR_NAME,
      181     7398                    VALUE = CMDVAR_VAL);
      182     7415    1   DCL DCB$ PTR;
PL6.E3A0      #004=VPD$CHECK_VOL File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:22 Page:45   
      183     7416    1   DCL I SBIN WORD;
      184     7417    1   DCL J SBIN WORD;
      185     7418    1   DCL TELL_HIM BIT(1);
      186     7419        %EJECT;
PL6.E3A0      #004=VPD$CHECK_VOL File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:22 Page:46   
      187     7420    2           DO CASE(FUN);
      188     7421    2            CASE(0);                       /* Check for VOL transition           */
      189     7422    2              DCB$ = DCBADDR(DCBNM);       /* Point to DCB in question           */
      190     7423    2              IF DCB$ -> F$DCB.VOL ~= LAST_VOL(DIR) /* Compare to cache          */
      191     7424    2               THEN                        /* VOLume transition occured          */
      192     7425    3               DO;
      193     7426    3                  IF LAST_VOL(DIR) = 0
      194     7427    3                    AND DCB$ -> F$DCB.VOL = 1
      195     7428    3                   THEN                    /* Very first message!                */
      196     7429    3                     TELL_HIM = '0'B;
      197     7430    3                   ELSE
      198     7431    3                     TELL_HIM = '1'B;
      199     7432    3                  LAST_VOL(DIR) = DCB$ -> F$DCB.VOL; /* Update cache             */
      200     7433    3                  CALL BINCHAR(CMDVAR_VAL.PART.FIRST,LAST_VOL(DIR));
      201     7434    3                  CMDVAR_VAL.LEN = 5;
      202     7435    3                  FPT_CMDVAR.V.FUN# =    1;/* STORE                              */
      203     7436    3                  CALL CMD_NAME;           /* Update CMD VAR                     */
      204     7437    3                  IF NOT TELL_HIM
      205     7438    3                   THEN                    /* Unknown SN list                    */
      206     7439    3                     GOTO CHK_DONE;        /* Ignore first transition            */
      207     7440    3                  IF LAST_VOL(DIR) > SN_LIST.COUNT
      208     7441    3                   THEN                    /* New VOL isn't in SN_LIST           */
      209     7442    3                     CALL VPL$ERR_PROC(0,210,'40'O);
      210     7443        /*E* ERROR:   VPD-00210
      211     7444             MESSAGE: Switching to a scratch volume
      212     7445        */
      213     7446    3                   ELSE                    /* New VOL is in list, print its name */
      214     7447    4                   DO;
      215     7448    4                      TEXTC.TEXT = SN_LIST.SN(LAST_VOL(DIR) -1);
      216     7449    4                      TEXTC.C = 6;
      217     7450    4                      CALL VPL$ERR_PROC(0,200,'04'O,,VECTOR(TEXTC));
      218     7451        /*E* ERROR:   VPD-00200
      219     7452             MESSAGE: Switching to volume #%U1
      220     7453        */
      221     7454    4                      END;
      222     7455    3   CHK_DONE:      ;
      223     7456    3                  END;
PL6.E3A0      #004=VPD$CHECK_VOL File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:22 Page:47   
      224     7457        %EJECT;
PL6.E3A0      #004=VPD$CHECK_VOL File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:22 Page:48   
      225     7458    2            CASE(1);                       /* REMOVE the set                     */
      226     7459    2              FPT_CMDVAR.V.FUN# = 3;       /* DELETE                             */
      227     7460    2              CALL CMD_NAME;
      228     7461    2            CASE(2);                       /* FORCE volume                       */
      229     7462    2              CALL BINCHAR(CMDVAR_VAL.PART.FIRST,VOL);
      230     7463    2              FPT_CMDVAR.V.FUN# = 1;       /* STORE                              */
      231     7464    2              CMDVAR_VAL.LEN = 5;
      232     7465    2              CALL CMD_NAME;
      233     7466    2              LAST_VOL(DIR) = VOL;         /* Init cache                         */
      234     7467    2            CASE(3);                       /* INQUIRE                            */
      235     7468    2              FPT_CMDVAR.V.FUN# = 2;       /* FETCH                              */
      236     7469    2              CALL CMD_NAME;
      237     7470    2              CALL CHARBIN(VOL,CMDVAR_VAL.PART.FIRST);
      238     7471    2              LAST_VOL(DIR) = VOL;         /* Init cache                         */
      239     7472    2            END;                           /* END DO CASE                        */
      240     7473    1           RETURN;
      241     7474        %EJECT;
PL6.E3A0      #004=VPD$CHECK_VOL File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:22 Page:49   
      242     7475    1   CMD_NAME: PROC;
      243     7476                                                /* Make the command variable name     */
      244     7477    3           DO I = 0 TO SN_LIST.COUNT -1;
      245     7478    3              CMDVAR_NAME.VOL.SN(I) = SN_LIST.SN(I);
      246     7479    3              END;
      247     7480    2           CMDVAR_NAME.LEN = 16 + SN_LIST.COUNT * 6;
      248     7481
      249     7482    2           CALL M$CMDVAR(FPT_CMDVAR) ALTRET(BAD_CMDVAR);
      250     7483    2           RETURN;
      251     7484
      252     7485    2   BAD_CMDVAR: ;
      253     7486    2           CMDVAR_VAL.PART.FIRST = '00000'; /* Assume VOL for unknown set = 0    */
      254     7487    2           RETURN;
      255     7488    2   END CMD_NAME;
      256     7489    1   END VPD$CHECK_VOL;
      257     7490        %EOD;

PL6.E3A0      #004=VPD$CHECK_VOL File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:22 Page:50   
--  Include file information  --

   F$DCB.:E05TOU  cannot be made into a system file and is referenced.
   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$CHECK_VOL.

   Procedure VPD$CHECK_VOL requires 153 words for executable code.
   Procedure VPD$CHECK_VOL requires 32 words of local(AUTO) storage.

PL6.E3A0      #004=VPD$CHECK_VOL File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:22 Page:51   

 Object Unit name= VPD$CHECK_VOL                              File name= VPD$UTIL.:E05TOU
 UTS= JUL 30 '97 07:22:22.08 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$EI
    2   DCB   even  none     0      0  M$EO
    3   DCB   even  none     0      0  M$EO1
    4   DCB   even  none     0      0  M$ME
    5   DCB   even  none     0      0  M$SI
    6   DCB   even  none     0      0  M$READFILE
    7   DCB   even  none     0      0  M$DO
    8   DCB   even  none     0      0  M$STD1
    9   DCB   even  none     0      0  M$SORT1
   10  RoData even  UTS     16     20  VPD$CHECK_VOL
   11   Data  even  none    70    106  VPD$CHECK_VOL
   12   Proc  even  none   153    231  VPD$CHECK_VOL
   13  RoData even  none    12     14  VPD$CHECK_VOL

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    12      0   yes            yes      Std        5  VPD$CHECK_VOL
PL6.E3A0      #004=VPD$CHECK_VOL File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:22 Page:52   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       8 VPL$ERR_PROC
                       nStd      0 X66_AUTO_5
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  BREAK_LOC                             BREAK_MESSAGE_REPORTER
     SPEC_BUF                              IN_RES                                LAST_VOL
     M$EI                                  M$EO                                  M$EO1
     M$ME                                  M$SI                                  M$READFILE
     M$DO                                  M$STD1                                M$SORT1
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 ROSID
PL6.E3A0      #004=VPD$CHECK_VOL File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:22 Page:53   


      109        1        /*T***********************************************************/
      110        2        /*T*                                                         */
      111        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      112        4        /*T*                                                         */
      113        5        /*T***********************************************************/
      114        6        VPD$CHECK_VOL: PROC(SN_LIST,FUN,DCBNM,VOL,DIR);

      6 12 000000   000000 700200 xent  VPD$CHECK_V* TSX0  ! X66_AUTO_5
        12 000001   000040 000005                    ZERO    32,5

      115        7        /*D* NAME: VPD$CHECK_VOL
      116        8             CALL: CALL VPD$CHECK_VOL(SN_LIST,FUN,DCBNM,VOL,DIR);
      117        9             DESCRIPTION: This routine makes checks for VOLume transition and
      118       10                          maintains the data necessary for these checks.
      119       11                  FUN     ACTION
      120       12                  ---     ------
      121       13                    0     Check for volume transition on the DCBNM.  If it
      122       14                          is detected, print the new vol from SN_LIST.
      123       15                    1     Remove the tape set described by SN_LIST.
      124       16                    2     Force the current volume for the tape set described
      125       17                          by SN_LIST to be VOL.
      126       18                    3     Find out whan the current volume is for the set
      127       19                          described by SN_LIST.  Return it in VOL.
      128       20                  DIR = 0 indicates input, DIR = 1 is output, DIR = 2 is unknown.
      129       21           FUN  ACTION  SN_LIST  DCBNM  VOL  DIR       (CACHE)
      130       22           ---  ------  -------  -----  ---  ---       -------
      131       23            0   CHECK      Y       Y    USED USED       USED
      132       24            1   REMOVE     Y                 UNKNOWN
      133       25            2   FORCE      Y            USED USED       SET-IF-DIR-KNOWN
      134       26            3   INQUIRE    Y            SET  USED       SET-IF-DIR-KNOWN
      135       27            A cache for VOL is used by CHECK to avoid excessive calls to M$CMDVAR.
      136       28            The cache is keyed by DIR.  The cache is initialized by FORCE or
      137       29            INQUIRE.  One of these MUST be used before trying a CHECK.
      138       30        */
      139       31        %INCLUDE VP_DATA_R;
      140     7018        %INCLUDE F$DCB;
PL6.E3A0      #004=VPD$CHECK_VOL File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:22 Page:54   
      141     7067        /**/
      142     7068        /*  ENTRY DCLS  */
      143     7069        /**/
      144     7070        %VP_ENTRIES (OMIT=VPD$CHECK_VOL);
      145     7278        /**/
      146     7279        /*  PARAMETERS  */
      147     7280        /**/
      148     7281        %PCL_SN(FPTN = SN_LIST,STCLASS = "");
      149     7299    1   DCL DCBNM SBIN WORD;
      150     7300    1   DCL FUN SBIN WORD;
      151     7301    1   DCL VOL SBIN WORD;
      152     7302    1   DCL DIR SBIN WORD;
      153     7303        /**/
      154     7304        /*  CONSTANTs  */
      155     7305        /**/
      156     7306        %VLP_NAME(FPTN = PRIVATE_NAME,LEN = 31,NAME = 'PCL',STCLASS = CONSTANT);
      157     7333        %VLP_ACCT(FPTN = PRIVATE_ACCT,ACCT = ':SYS',STCLASS = CONSTANT);
      158     7346        %VLP_SN(FPTN = PRIVATE_PSN,N = 1,SN = 'SYS',STCLASS = CONSTANT);
      159     7359        /**/
      160     7360        /*  LOCAL STORAGE  */
      161     7361        /**/
      162     7362    1   DCL 1 TEXTC,
      163     7363    1         2 C UBIN(9) UNAL,
      164     7364    1         2 TEXT CHAR(31);
      165     7365    1   DCL 1 CMDVAR_NAME STATIC,
      166     7366    1         2 LEN UBIN(9) UNAL,
      167     7367    1         2 INTRO CHAR(12) INIT('PCL_TAPESET_'),
      168     7368              %PCL_SN(FPTN = VOL,LVL = 2);
      169     7386    1   DCL 1 CMDVAR_VAL STATIC,
      170     7387    1         2 LEN UBIN(9) UNAL,
      171     7388    1         2 TEXT CHAR(80),
      172     7389    1         2 PART REDEF TEXT,
      173     7390    1           3 FIRST CHAR(5),
      174     7391    1           3 REST CHAR(75);
      175     7392        %FPT_CMDVAR(FPTN = FPT_CMDVAR,
      176     7393                    PRIVATE = YES,
      177     7394                    PNAME = PRIVATE_NAME,
PL6.E3A0      #004=VPD$CHECK_VOL File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:22 Page:55   
      178     7395                    PACCT = PRIVATE_ACCT,
      179     7396                    PPSN = PRIVATE_PSN,
      180     7397                    NAME = CMDVAR_NAME,
      181     7398                    VALUE = CMDVAR_VAL);
      182     7415    1   DCL DCB$ PTR;
      183     7416    1   DCL I SBIN WORD;
      184     7417    1   DCL J SBIN WORD;
      185     7418    1   DCL TELL_HIM BIT(1);
      186     7419        %EJECT;
PL6.E3A0      #004=VPD$CHECK_VOL File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:22 Page:56   
      187     7420    2           DO CASE(FUN);

   7420 12 000002   200004 470500                    LDP0    @FUN,,AUTO
        12 000003   000000 235100                    LDA     0,,PR0
        12 000004   000004 115007                    CMPA    4,DL
        12 000005   000007 602005 12                 TNC     s:7420+5,AL
        12 000006   000172 710000 12                 TRA     s:7473
        12 000007   000013 710000 12                 TRA     s:7422
        12 000010   000131 710000 12                 TRA     s:7459
        12 000011   000136 710000 12                 TRA     s:7462
        12 000012   000156 710000 12                 TRA     s:7468

      188     7421    2            CASE(0);                       /* Check for VOL transition           */

      189     7422    2              DCB$ = DCBADDR(DCBNM);       /* Point to DCB in question           */

   7422 12 000013   000000 471400 13                 LDP1    0
        12 000014   100000 473500                    LDP3    0,,PR1
        12 000015   200005 474500                    LDP4    @DCBNM,,AUTO
        12 000016   400000 720100                    LXL0    0,,PR4
        12 000017   300000 236110                    LDQ     0,X0,PR3
        12 000020   200020 756100                    STQ     DCB$,,AUTO

      190     7423    2              IF DCB$ -> F$DCB.VOL ~= LAST_VOL(DIR) /* Compare to cache          */

   7423 12 000021   200007 475500                    LDP5    @DIR,,AUTO
        12 000022   500000 721100                    LXL1    0,,PR5
        12 000023   200020 476500                    LDP6    DCB$,,AUTO
        12 000024   600043 236100                    LDQ     35,,PR6
        12 000025   000033 772000                    QRL     27
        12 000026   000000 116011 xsym               CMPQ    LAST_VOL,X1
        12 000027   000172 600000 12                 TZE     s:7473

      191     7424    2               THEN                        /* VOLume transition occured          */
      192     7425    3               DO;

      193     7426    3                  IF LAST_VOL(DIR) = 0
PL6.E3A0      #004=VPD$CHECK_VOL File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:22 Page:57   

   7426 12 000030   500000 721100                    LXL1    0,,PR5
        12 000031   000000 235011 xsym               LDA     LAST_VOL,X1
        12 000032   000040 601000 12                 TNZ     s:7431
        12 000033   000033 736000                    QLS     27
        12 000034   001000 116003                    CMPQ    512,DU
        12 000035   000040 601000 12                 TNZ     s:7431

      194     7427    3                    AND DCB$ -> F$DCB.VOL = 1
      195     7428    3                   THEN                    /* Very first message!                */
      196     7429    3                     TELL_HIM = '0'B;

   7429 12 000036   200023 450100                    STZ     TELL_HIM,,AUTO
        12 000037   000042 710000 12                 TRA     s:7432

      197     7430    3                   ELSE
      198     7431    3                     TELL_HIM = '1'B;

   7431 12 000040   400000 236003                    LDQ     -131072,DU
        12 000041   200023 756100                    STQ     TELL_HIM,,AUTO

      199     7432    3                  LAST_VOL(DIR) = DCB$ -> F$DCB.VOL; /* Update cache             */

   7432 12 000042   500000 721100                    LXL1    0,,PR5
        12 000043   600043 236100                    LDQ     35,,PR6
        12 000044   000033 772000                    QRL     27
        12 000045   000000 756011 xsym               STQ     LAST_VOL,X1

      200     7433    3                  CALL BINCHAR(CMDVAR_VAL.PART.FIRST,LAST_VOL(DIR));

   7433 12 000046   500000 720100                    LXL0    0,,PR5
        12 000047   000000 635010                    EAA     0,X0
        12 000050   000020 771000                    ARL     16
        12 000051   000000 301405                    BTD
        12 000052   000000 000004 xsym               NDSC9   LAST_VOL,A               cn=0,s=lsgnf,sf=0,n=4
        12 000053   000043 230005 11                 NDSC9   CMDVAR_VAL               cn=1,s=nosgn,sf=0,n=5

PL6.E3A0      #004=VPD$CHECK_VOL File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:22 Page:58   
      201     7434    3                  CMDVAR_VAL.LEN = 5;

   7434 12 000054   005000 236003                    LDQ     2560,DU
        12 000055   000043 552040 11                 STBQ    CMDVAR_VAL,'40'O

      202     7435    3                  FPT_CMDVAR.V.FUN# =    1;/* STORE                              */

   7435 12 000056   001000 236003                    LDQ     512,DU
        12 000057   000104 552040 11                 STBQ    FPT_CMDVAR+12,'40'O

      203     7436    3                  CALL CMD_NAME;           /* Update CMD VAR                     */

   7436 12 000060   000173 701000 12                 TSX1    CMD_NAME
        12 000061   000000 011000                    NOP     0

      204     7437    3                  IF NOT TELL_HIM

   7437 12 000062   200023 234100                    SZN     TELL_HIM,,AUTO
        12 000063   000130 605000 12                 TPL     CHK_DONE

      205     7438    3                   THEN                    /* Unknown SN list                    */
      206     7439    3                     GOTO CHK_DONE;        /* Ignore first transition            */
      207     7440    3                  IF LAST_VOL(DIR) > SN_LIST.COUNT

   7440 12 000064   200007 470500                    LDP0    @DIR,,AUTO
        12 000065   000000 720100                    LXL0    0,,PR0
        12 000066   200003 471500                    LDP1    @SN_LIST,,AUTO
        12 000067   000000 236010 xsym               LDQ     LAST_VOL,X0
        12 000070   100000 116100                    CMPQ    0,,PR1
        12 000071   000077 604400 12                 TMOZ    s:7448

      208     7441    3                   THEN                    /* New VOL isn't in SN_LIST           */
      209     7442    3                     CALL VPL$ERR_PROC(0,210,'40'O);

   7442 12 000072   000002 630400 13                 EPPR0   2
        12 000073   000021 631400 xsym               EPPR1   B_VECTNIL+17
        12 000074   000000 701000 xent               TSX1    VPL$ERR_PROC
PL6.E3A0      #004=VPD$CHECK_VOL File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:22 Page:59   
        12 000075   000000 011000                    NOP     0
        12 000076   000130 710000 12                 TRA     CHK_DONE

      210     7443        /*E* ERROR:   VPD-00210
      211     7444             MESSAGE: Switching to a scratch volume
      212     7445        */
      213     7446    3                   ELSE                    /* New VOL is in list, print its name */
      214     7447    4                   DO;

      215     7448    4                      TEXTC.TEXT = SN_LIST.SN(LAST_VOL(DIR) -1);

   7448 12 000077   000000 720100                    LXL0    0,,PR0
        12 000100   000000 235010 xsym               LDA     LAST_VOL,X0
        12 000101   000044 733000                    LRS     36
        12 000102   000006 402007                    MPY     6,DL
        12 000103   040100 100506                    MLR     fill='040'O
        12 000104   177777 400006                    ADSC9   -1,Q,PR1                 cn=2,n=6
        12 000105   200010 200037                    ADSC9   TEXTC,,AUTO              cn=1,n=31

      216     7449    4                      TEXTC.C = 6;

   7449 12 000106   006000 236003                    LDQ     3072,DU
        12 000107   200010 552140                    STBQ    TEXTC,'40'O,AUTO

      217     7450    4                      CALL VPL$ERR_PROC(0,200,'04'O,,VECTOR(TEXTC));

   7450 12 000110   000005 235000 13                 LDA     5
        12 000111   200026 452500                    STP2    TELL_HIM+3,,AUTO
        12 000112   200026 236100                    LDQ     TELL_HIM+3,,AUTO
        12 000113   000010 036003                    ADLQ    8,DU
        12 000114   200030 757100                    STAQ    TELL_HIM+5,,AUTO
        12 000115   200030 633500                    EPPR3   TELL_HIM+5,,AUTO
        12 000116   200036 453500                    STP3    TELL_HIM+11,,AUTO
        12 000117   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000120   000010 235000 13                 LDA     8
        12 000121   200034 757100                    STAQ    TELL_HIM+9,,AUTO
        12 000122   000012 237000 13                 LDAQ    10
PL6.E3A0      #004=VPD$CHECK_VOL File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:22 Page:60   
        12 000123   200032 757100                    STAQ    TELL_HIM+7,,AUTO
        12 000124   200032 630500                    EPPR0   TELL_HIM+7,,AUTO
        12 000125   000023 631400 xsym               EPPR1   B_VECTNIL+19
        12 000126   000000 701000 xent               TSX1    VPL$ERR_PROC
        12 000127   000000 011000                    NOP     0

      218     7451        /*E* ERROR:   VPD-00200
      219     7452             MESSAGE: Switching to volume #%U1
      220     7453        */
      221     7454    4                      END;

   7450 12 000130                       CHK_DONE     null
      222     7455    3   CHK_DONE:      ;
      223     7456    3                  END;

   7456 12 000130   000172 710000 12                 TRA     s:7473

      224     7457        %EJECT;
PL6.E3A0      #004=VPD$CHECK_VOL File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:22 Page:61   
      225     7458    2            CASE(1);                       /* REMOVE the set                     */

      226     7459    2              FPT_CMDVAR.V.FUN# = 3;       /* DELETE                             */

   7459 12 000131   003000 236003                    LDQ     1536,DU
        12 000132   000104 552040 11                 STBQ    FPT_CMDVAR+12,'40'O

      227     7460    2              CALL CMD_NAME;

   7460 12 000133   000173 701000 12                 TSX1    CMD_NAME
        12 000134   000000 011000                    NOP     0
        12 000135   000172 710000 12                 TRA     s:7473

      228     7461    2            CASE(2);                       /* FORCE volume                       */

      229     7462    2              CALL BINCHAR(CMDVAR_VAL.PART.FIRST,VOL);

   7462 12 000136   200006 471500                    LDP1    @VOL,,AUTO
        12 000137   000000 301500                    BTD
        12 000140   100000 000004                    NDSC9   0,,PR1                   cn=0,s=lsgnf,sf=0,n=4
        12 000141   000043 230005 11                 NDSC9   CMDVAR_VAL               cn=1,s=nosgn,sf=0,n=5

      230     7463    2              FPT_CMDVAR.V.FUN# = 1;       /* STORE                              */

   7463 12 000142   001000 236003                    LDQ     512,DU
        12 000143   000104 552040 11                 STBQ    FPT_CMDVAR+12,'40'O

      231     7464    2              CMDVAR_VAL.LEN = 5;

   7464 12 000144   005000 236003                    LDQ     2560,DU
        12 000145   000043 552040 11                 STBQ    CMDVAR_VAL,'40'O

      232     7465    2              CALL CMD_NAME;

   7465 12 000146   000173 701000 12                 TSX1    CMD_NAME
        12 000147   000000 011000                    NOP     0

PL6.E3A0      #004=VPD$CHECK_VOL File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:22 Page:62   
      233     7466    2              LAST_VOL(DIR) = VOL;         /* Init cache                         */

   7466 12 000150   200007 470500                    LDP0    @DIR,,AUTO
        12 000151   000000 720100                    LXL0    0,,PR0
        12 000152   200006 471500                    LDP1    @VOL,,AUTO
        12 000153   100000 235100                    LDA     0,,PR1
        12 000154   000000 755010 xsym               STA     LAST_VOL,X0
        12 000155   000172 710000 12                 TRA     s:7473

      234     7467    2            CASE(3);                       /* INQUIRE                            */

      235     7468    2              FPT_CMDVAR.V.FUN# = 2;       /* FETCH                              */

   7468 12 000156   002000 236003                    LDQ     1024,DU
        12 000157   000104 552040 11                 STBQ    FPT_CMDVAR+12,'40'O

      236     7469    2              CALL CMD_NAME;

   7469 12 000160   000173 701000 12                 TSX1    CMD_NAME
        12 000161   000000 011000                    NOP     0

      237     7470    2              CALL CHARBIN(VOL,CMDVAR_VAL.PART.FIRST);

   7470 12 000162   200006 470500                    LDP0    @VOL,,AUTO
        12 000163   000100 305400                    DTB
        12 000164   000043 230005 11                 NDSC9   CMDVAR_VAL               cn=1,s=nosgn,sf=0,n=5
        12 000165   000000 000004                    NDSC9   0,,PR0                   cn=0,s=lsgnf,sf=0,n=4

      238     7471    2              LAST_VOL(DIR) = VOL;         /* Init cache                         */

   7471 12 000166   200007 471500                    LDP1    @DIR,,AUTO
        12 000167   100000 720100                    LXL0    0,,PR1
        12 000170   000000 235100                    LDA     0,,PR0
        12 000171   000000 755010 xsym               STA     LAST_VOL,X0

      239     7472    2            END;                           /* END DO CASE                        */

PL6.E3A0      #004=VPD$CHECK_VOL File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:22 Page:63   
      240     7473    1           RETURN;

   7473 12 000172   000000 702200 xent               TSX2  ! X66_ARET

      241     7474        %EJECT;
PL6.E3A0      #004=VPD$CHECK_VOL File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:22 Page:64   
      242     7475    1   CMD_NAME: PROC;

   7475 12 000173   200024 741300       CMD_NAME     STX1  ! TELL_HIM+1,,AUTO

      243     7476                                                /* Make the command variable name     */
      244     7477    3           DO I = 0 TO SN_LIST.COUNT -1;

   7477 12 000174   200021 450100                    STZ     I,,AUTO
        12 000175   000205 710000 12                 TRA     s:7479+1

      245     7478    3              CMDVAR_NAME.VOL.SN(I) = SN_LIST.SN(I);

   7478 12 000176   200021 236100                    LDQ     I,,AUTO
        12 000177   000006 402007                    MPY     6,DL
        12 000200   200003 470500                    LDP0    @SN_LIST,,AUTO
        12 000201   040006 100506                    MLR     fill='040'O
        12 000202   000001 000006                    ADSC9   1,Q,PR0                  cn=0,n=6
        12 000203   000004 200006 11                 ADSC9   CMDVAR_NAME+4,Q          cn=1,n=6

      246     7479    3              END;

   7479 12 000204   200021 054100                    AOS     I,,AUTO
        12 000205   200003 470500                    LDP0    @SN_LIST,,AUTO
        12 000206   200021 236100                    LDQ     I,,AUTO
        12 000207   000000 116100                    CMPQ    0,,PR0
        12 000210   000176 604000 12                 TMI     s:7478

      247     7480    2           CMDVAR_NAME.LEN = 16 + SN_LIST.COUNT * 6;

   7480 12 000211   000000 236100                    LDQ     0,,PR0
        12 000212   000006 402007                    MPY     6,DL
        12 000213   000020 036007                    ADLQ    16,DL
        12 000214   000033 736000                    QLS     27
        12 000215   000000 552040 11                 STBQ    CMDVAR_NAME,'40'O

      248     7481
      249     7482    2           CALL M$CMDVAR(FPT_CMDVAR) ALTRET(BAD_CMDVAR);
PL6.E3A0      #004=VPD$CHECK_VOL File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:22 Page:65   

   7482 12 000216   000070 630400 11                 EPPR0   FPT_CMDVAR
        12 000217   420025 713400                    CLIMB   alt,+8213
        12 000220   402400 401760                    pmme    nvectors=6
        12 000221   000224 702000 12                 TSX2    BAD_CMDVAR

      250     7483    2           RETURN;

   7483 12 000222   200024 221300                    LDX1  ! TELL_HIM+1,,AUTO
        12 000223   000001 702211                    TSX2  ! 1,X1

   7480 12 000224                       BAD_CMDVAR   null
      251     7484
      252     7485    2   BAD_CMDVAR: ;
      253     7486    2           CMDVAR_VAL.PART.FIRST = '00000'; /* Assume VOL for unknown set = 0    */

   7486 12 000224   040000 100400                    MLR     fill='040'O
        12 000225   000016 000005 10                 ADSC9   PRIVATE_PSN+4            cn=0,n=5
        12 000226   000043 200005 11                 ADSC9   CMDVAR_VAL               cn=1,n=5

      254     7487    2           RETURN;

   7487 12 000227   200024 221300                    LDX1  ! TELL_HIM+1,,AUTO
        12 000230   000001 702211                    TSX2  ! 1,X1
      255     7488    2   END CMD_NAME;
      256     7489    1   END VPD$CHECK_VOL;
      257     7490        %EOD;

PL6.E3A0      #004=VPD$CHECK_VOL File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:22 Page:66   
--  Include file information  --

   F$DCB.:E05TOU  cannot be made into a system file and is referenced.
   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$CHECK_VOL.
PL6.E3A0      #004=VPD$CHECK_VOL File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:22 Page:67   

 **** Variables and constants ****

  ****  Section 010 RoData VPD$CHECK_VOL

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    10-0-0/c STRC(72)    r     1 PRIVATE_ACCT               0-0-0/c STRC(288)   r     1 PRIVATE_NAME
    12-0-0/d STRC(90)    r     1 PRIVATE_PSN

  ****  Section 011  Data  VPD$CHECK_VOL

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c STRC(1233)  r     1 CMDVAR_NAME               43-0-0/c STRC(729)   r     1 CMDVAR_VAL
    70-0-0/d STRC(504)   r     1 FPT_CMDVAR

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     5-0-0/w PTR         r     1 @DCBNM                     7-0-0/w PTR         r     1 @DIR
     4-0-0/w PTR         r     1 @FUN                       3-0-0/w PTR         r     1 @SN_LIST
     6-0-0/w PTR         r     1 @VOL                      20-0-0/w PTR         r     1 DCB$
    *0-0-0/w SBIN        r     1 DCBNM                     *0-0-0/w SBIN        r     1 DIR
    *0-0-0/w SBIN        r     1 FUN                       21-0-0/w SBIN        r     1 I
    *0-0-0/w STRC(1116)  r     1 SN_LIST                   23-0-0/b BIT         r     1 TELL_HIM
    10-0-0/c STRC(288)   r     1 TEXTC                     *0-0-0/w SBIN        r     1 VOL

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w EPTR        r     1 BREAK_MESSAGE_REPORTER
PL6.E3A0      #004=VPD$CHECK_VOL File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:22 Page:68   
     0-0-0/w SBIN        r     1 LAST_VOL(0:2)

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d ASTR(3528)  r     1 F$DCB


   Procedure VPD$CHECK_VOL requires 153 words for executable code.
   Procedure VPD$CHECK_VOL requires 32 words of local(AUTO) storage.
PL6.E3A0      #004=VPD$CHECK_VOL File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:22 Page:69   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=VPD$CHECK_VOL File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:22 Page:70   
          MINI XREF LISTING

BAD_CMDVAR IN PROCEDURE CMD_NAME
      7480**LABEL    7482--CALLALT
BREAK_LOC
      5238**DCL      5238--REDEF
CHK_DONE
      7450**LABEL    7439--GOTO
CMDVAR_NAME
      7365**DCL      7409--DCLINIT
CMDVAR_NAME.LEN
      7366**DCL      7480<<ASSIGN
CMDVAR_NAME.VOL.SN
      7383**DCL      7384--REDEF    7478<<ASSIGN
CMDVAR_VAL
      7386**DCL      7410--DCLINIT
CMDVAR_VAL.LEN
      7387**DCL      7434<<ASSIGN   7464<<ASSIGN
CMDVAR_VAL.PART.FIRST
      7390**DCL      7433<<CALLBLT  7462<<CALLBLT  7470>>CALLBLT  7486<<ASSIGN
CMDVAR_VAL.TEXT
      7388**DCL      7389--REDEF
CMD_NAME
      7475**PROC     7436--CALL     7460--CALL     7465--CALL     7469--CALL
DCB$
      7415**DCL      7422<<ASSIGN   7423>>IF       7426>>IF       7432>>ASSIGN
DCBNM
      7299**DCL         6--PROC     7422--ASSIGN
DEF_ICB.FID.STRING
      5836**DCL      5837--REDEF
DEV_ICB.FID.STRING
      5722**DCL      5723--REDEF
DIR
      7302**DCL         6--PROC     7423>>IF       7426>>IF       7432>>ASSIGN   7433>>CALLBLT  7440>>IF
PL6.E3A0      #004=VPD$CHECK_VOL File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:22 Page:71   
      7448>>ASSIGN   7466>>ASSIGN   7471>>ASSIGN
EI_KEY.KEY
      5934**DCL      5934--REDEF    5934--REDEF    5934--REDEF
EO_OCB.TYPE
      5434**DCL      5435--REDEF
F$DCB.ACTPOS
      7044**DCL      7044--REDEF
F$DCB.ARS
      7019**DCL      7019--REDEF
F$DCB.ATTR
      7037**DCL      7038--REDEF
F$DCB.BORROW
      7052**DCL      7052--REDEF    7052--REDEF    7052--REDEF
F$DCB.DCBNAME.L
      7066**DCL      7066--IMP-SIZ
F$DCB.EOMCHAR
      7023**DCL      7023--REDEF
F$DCB.FLDID
      7047**DCL      7047--REDEF
F$DCB.FORM$
      7041**DCL      7041--REDEF
F$DCB.FSECT
      7057**DCL      7057--REDEF
F$DCB.FSN
      7034**DCL      7034--REDEF    7034--REDEF    7035--REDEF
F$DCB.HEADER$
      7040**DCL      7040--REDEF
F$DCB.IXTNSIZE
      7038**DCL      7038--REDEF
F$DCB.LASTSTA$
      7028**DCL      7028--REDEF
F$DCB.LVL
      7053**DCL      7053--REDEF
F$DCB.NAME.C
      7028**DCL      7028--REDEF
F$DCB.NOEOF
PL6.E3A0      #004=VPD$CHECK_VOL File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:22 Page:72   
      7049**DCL      7049--REDEF
F$DCB.NRECS
      7039**DCL      7039--REDEF
F$DCB.NRECX
      7058**DCL      7058--REDEF
F$DCB.OHDR
      7050**DCL      7050--REDEF
F$DCB.ORG
      7033**DCL      7033--REDEF
F$DCB.PRECNO
      7056**DCL      7056--REDEF
F$DCB.RCSZ
      7061**DCL      7061--REDEF
F$DCB.RES
      7029**DCL      7029--REDEF
F$DCB.SETX
      7041**DCL      7041--REDEF
F$DCB.TAB$
      7040**DCL      7041--REDEF
F$DCB.TDA
      7055**DCL      7055--REDEF
F$DCB.VOL
      7039**DCL      7423>>IF       7426>>IF       7432>>ASSIGN
F$DCB.WSN
      7030**DCL      7030--REDEF
FPT_CLOSE_EI.SN_
      6775**DCL      6775--REDEF
FPT_CLOSE_EI.UTL_
      6776**DCL      6776--REDEF
FPT_CLOSE_EI.V.EXPIRE#
      6790**DCL      6790--REDEF
FPT_CLOSE_EI.V.TYPE#
      6788**DCL      6788--REDEF
FPT_CLOSE_EI.V.XTNSIZE#
      6785**DCL      6785--REDEF    6787--REDEF
FPT_CLOSE_PTL.SN_
PL6.E3A0      #004=VPD$CHECK_VOL File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:22 Page:73   
      6901**DCL      6901--REDEF
FPT_CLOSE_PTL.UTL_
      6902**DCL      6902--REDEF
FPT_CLOSE_PTL.V.EXPIRE#
      6916**DCL      6916--REDEF
FPT_CLOSE_PTL.V.TYPE#
      6914**DCL      6914--REDEF
FPT_CLOSE_PTL.V.XTNSIZE#
      6911**DCL      6911--REDEF    6913--REDEF
FPT_CLOSE_READ.SN_
      6817**DCL      6817--REDEF
FPT_CLOSE_READ.UTL_
      6818**DCL      6818--REDEF
FPT_CLOSE_READ.V.EXPIRE#
      6832**DCL      6832--REDEF
FPT_CLOSE_READ.V.TYPE#
      6830**DCL      6830--REDEF
FPT_CLOSE_READ.V.XTNSIZE#
      6827**DCL      6827--REDEF    6829--REDEF
FPT_CLOSE_SI.SN_
      6985**DCL      6985--REDEF
FPT_CLOSE_SI.UTL_
      6986**DCL      6986--REDEF
FPT_CLOSE_SI.V.EXPIRE#
      7000**DCL      7000--REDEF
FPT_CLOSE_SI.V.TYPE#
      6998**DCL      6998--REDEF
FPT_CLOSE_SI.V.XTNSIZE#
      6995**DCL      6995--REDEF    6997--REDEF
FPT_CLOSE_STD.SN_
      6943**DCL      6943--REDEF
FPT_CLOSE_STD.UTL_
      6944**DCL      6944--REDEF
FPT_CLOSE_STD.V.EXPIRE#
      6958**DCL      6958--REDEF
FPT_CLOSE_STD.V.TYPE#
PL6.E3A0      #004=VPD$CHECK_VOL File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:22 Page:74   
      6956**DCL      6956--REDEF
FPT_CLOSE_STD.V.XTNSIZE#
      6953**DCL      6953--REDEF    6955--REDEF
FPT_CLSEI_FT.SN_
      6859**DCL      6859--REDEF
FPT_CLSEI_FT.UTL_
      6860**DCL      6860--REDEF
FPT_CLSEI_FT.V.EXPIRE#
      6874**DCL      6874--REDEF
FPT_CLSEI_FT.V.TYPE#
      6872**DCL      6872--REDEF
FPT_CLSEI_FT.V.XTNSIZE#
      6869**DCL      6869--REDEF    6871--REDEF
FPT_CMDVAR
      7409**DCL      7482<>CALL
FPT_CMDVAR.V
      7411**DCL      7409--DCLINIT
FPT_CMDVAR.V.FUN#
      7411**DCL      7435<<ASSIGN   7459<<ASSIGN   7463<<ASSIGN   7468<<ASSIGN
FPT_OPEN_EI.ACSVEH_
      6430**DCL      6431--REDEF
FPT_OPEN_EI.ALTKEYS_
      6436**DCL      6437--REDEF    6437--REDEF
FPT_OPEN_EI.HDR_
      6435**DCL      6436--REDEF
FPT_OPEN_EI.TAB_
      6434**DCL      6435--REDEF
FPT_OPEN_EI.UHL_
      6428**DCL      6429--REDEF    6429--REDEF
FPT_OPEN_EI.V.FSN#
      6468**DCL      6468--REDEF    6468--REDEF
FPT_OPEN_EI.WSN_
      6434**DCL      6434--REDEF
FPT_OPEN_EI_SAVE.ACSVEH_
      6539**DCL      6540--REDEF
FPT_OPEN_EI_SAVE.ALTKEYS_
PL6.E3A0      #004=VPD$CHECK_VOL File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:22 Page:75   
      6545**DCL      6546--REDEF    6546--REDEF
FPT_OPEN_EI_SAVE.HDR_
      6544**DCL      6545--REDEF
FPT_OPEN_EI_SAVE.TAB_
      6543**DCL      6544--REDEF
FPT_OPEN_EI_SAVE.UHL_
      6537**DCL      6538--REDEF    6538--REDEF
FPT_OPEN_EI_SAVE.V.FSN#
      6577**DCL      6577--REDEF    6577--REDEF
FPT_OPEN_EI_SAVE.WSN_
      6543**DCL      6543--REDEF
FPT_OPEN_OUT.ACSVEH_
      6321**DCL      6322--REDEF
FPT_OPEN_OUT.ALTKEYS_
      6327**DCL      6328--REDEF    6328--REDEF
FPT_OPEN_OUT.HDR_
      6326**DCL      6327--REDEF
FPT_OPEN_OUT.TAB_
      6325**DCL      6326--REDEF
FPT_OPEN_OUT.UHL_
      6319**DCL      6320--REDEF    6320--REDEF
FPT_OPEN_OUT.V.FSN#
      6359**DCL      6359--REDEF    6359--REDEF
FPT_OPEN_OUT.WSN_
      6325**DCL      6325--REDEF
FPT_OPEN_OUT_SAVE.ACSVEH_
      6212**DCL      6213--REDEF
FPT_OPEN_OUT_SAVE.ALTKEYS_
      6218**DCL      6219--REDEF    6219--REDEF
FPT_OPEN_OUT_SAVE.HDR_
      6217**DCL      6218--REDEF
FPT_OPEN_OUT_SAVE.TAB_
      6216**DCL      6217--REDEF
FPT_OPEN_OUT_SAVE.UHL_
      6210**DCL      6211--REDEF    6211--REDEF
FPT_OPEN_OUT_SAVE.V.FSN#
PL6.E3A0      #004=VPD$CHECK_VOL File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:22 Page:76   
      6250**DCL      6250--REDEF    6250--REDEF
FPT_OPEN_OUT_SAVE.WSN_
      6216**DCL      6216--REDEF
FPT_READ_STD.STATION_
      6640**DCL      6641--REDEF
FPT_READ_STD.V.DVBYTE.REREAD#
      6652**DCL      6652--REDEF
FPT_READ_STD.V.INDX#
      6650**DCL      6650--REDEF
FPT_READ_UC.STATION_
      6601**DCL      6602--REDEF
FPT_READ_UC.V.DVBYTE.REREAD#
      6613**DCL      6613--REDEF
FPT_READ_UC.V.INDX#
      6611**DCL      6611--REDEF
FPT_WRITE_ME.STATION_
      6709**DCL      6709--REDEF
FPT_WRITE_ME.V.DVBYTE.VFC#
      6716**DCL      6716--REDEF
FPT_WRITE_OUT.STATION_
      6740**DCL      6740--REDEF
FPT_WRITE_OUT.V.DVBYTE.VFC#
      6747**DCL      6747--REDEF
FPT_WRITE_UC.STATION_
      6678**DCL      6678--REDEF
FPT_WRITE_UC.V.DVBYTE.VFC#
      6685**DCL      6685--REDEF
FROM_SN.SN
      5584**DCL      5585--REDEF
FUN
      7300**DCL         6--PROC     7420>>DOCASE
GETCMD.OUT$
      4791**DCL      4797--REDEF
I
      7416**DCL      7477<<DOINDEX  7478>>ASSIGN   7478>>ASSIGN
ICB.FID.STRING
PL6.E3A0      #004=VPD$CHECK_VOL File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:22 Page:77   
      5608**DCL      5609--REDEF
IFSFA_PARAM.EOMCHAR#
      5963**DCL      5964--REDEF
IFSFA_PARAM.SIG1
      5957**DCL      5957--REDEF
IFSFA_PARAM.SIG2
      5957**DCL      5958--REDEF
IN_RES
      5530**DCL      5530--REDEF
IN_SN.SN
      5546**DCL      5547--REDEF
LAST_VOL
      5567**DCL      7423>>IF       7426>>IF       7432<<ASSIGN   7433>>CALLBLT  7440>>IF       7448>>ASSIGN
      7466<<ASSIGN   7471<<ASSIGN
M$CMDVAR
       117**DCL-ENT  7482--CALL
OCB.TYPE
      5292**DCL      5293--REDEF
OFSFA_PARAM.EOMCHAR#
      5993**DCL      5994--REDEF
OFSFA_PARAM.SIG1
      5987**DCL      5987--REDEF
OFSFA_PARAM.SIG2
      5987**DCL      5988--REDEF
OUT_SN.SN
      5564**DCL      5565--REDEF
PRIVATE_ACCT
      7344**DCL      7411--DCLINIT
PRIVATE_NAME
      7331**DCL      7410--DCLINIT
PRIVATE_PSN
      7357**DCL      7411--DCLINIT
SN_LIST
      7291**DCL         6--PROC
SN_LIST.COUNT
      7295**DCL      7440>>IF       7477>>DOINDEX  7480>>ASSIGN
PL6.E3A0      #004=VPD$CHECK_VOL File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:22 Page:78   
SN_LIST.SN
      7296**DCL      7297--REDEF    7448>>ASSIGN   7478>>ASSIGN
SPEC_BUF
      5242**DCL      5242--REDEF
TELL_HIM
      7418**DCL      7429<<ASSIGN   7431<<ASSIGN   7437>>IF
TEXTC
      7362**DCL      7450--CALL
TEXTC.C
      7363**DCL      7449<<ASSIGN
TEXTC.TEXT
      7364**DCL      7448<<ASSIGN
VOL
      7301**DCL         6--PROC     7462>>CALLBLT  7466>>ASSIGN   7470<<CALLBLT  7471>>ASSIGN
VPL$ERR_PROC
      7252**DCL-ENT  7442--CALL     7450--CALL

PL6.E3A0      #005=VPD$CLOBBERLZ File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:23 Page:79   
      258        1        /*T***********************************************************/
      259        2        /*T*                                                         */
      260        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      261        4        /*T*                                                         */
      262        5        /*T***********************************************************/
      263        6        VPD$CLOBBERLZ: PROC(NUM_VECTOR);
      264        7        /*I* NAME: VPD$CLOBBERLZ
      265        8             PURPOSE: To process a string of digits representing a decimal number.
      266        9             CALL: CALL VPD$CLOBBERLZ(VECTOR(TEXT));
      267       10             DESCRIPTION: This procedure clobbers leading zeroes on a string
      268       11                   that represents a decimal integer.
      269       12        */
      270       13        /**/
      271       14        /*  PARAMETERS  */
      272       15        /**/
      273       16    1   DCL NUM_VECTOR VECTOR PARAM;
      274       17        /**/
      275       18        /* INCLUDE FILES  */
      276       19        /**/
      277       20        %INCLUDE VP_DATA_R;
      278     7007        /**/
      279     7008        /*  BASED  */
      280     7009        /**/
      281     7010    1   DCL NUM CHAR(NUM_LEN) BASED(NUM$);
      282     7011        /**/
      283     7012        /*  LOCAL AUTO  */
      284     7013        /**/
      285     7014    1   DCL NUM$ PTR AUTO;
      286     7015    1   DCL NUM_LEN SBIN AUTO;
      287     7016        /**/
      288     7017        /*  LOCAL STATIC  */
      289     7018        /**/
      290     7019    1   DCL MOP_CMD(0:1) BIT(9) UNAL STATIC INIT('0'B,%MVC1);
      291     7020        /**/
      292     7021    1           NUM$ = VBASE(NUM_VECTOR);
      293     7022    1           NUM_LEN = VBOUND(NUM_VECTOR) +1;
      294     7023    1           MOP_CMD(0) = MOP_ARY_MVZB(NUM_LEN -1); /* Move 1-less digits          */
PL6.E3A0      #005=VPD$CLOBBERLZ File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:23 Page:80   
      295     7024    1           CALL EDITCHAR(NUM,
      296     7025    1             0,
      297     7026    1             NUM_LEN,
      298     7027    1             MOP_CMD,
      299     7028    1             NUM);
      300     7029    1           RETURN;
      301     7030        /**/
      302     7031    1   END VPD$CLOBBERLZ;
      303     7032        %EOD;

PL6.E3A0      #005=VPD$CLOBBERLZ File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:23 Page:81   
--  Include file information  --

   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$CLOBBERLZ.

   Procedure VPD$CLOBBERLZ requires 20 words for executable code.
   Procedure VPD$CLOBBERLZ requires 6 words of local(AUTO) storage.

PL6.E3A0      #005=VPD$CLOBBERLZ File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:23 Page:82   

 Object Unit name= VPD$CLOBBERLZ                              File name= VPD$UTIL.:E05TOU
 UTS= JUL 30 '97 07:23:48.40 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$EI
    2   DCB   even  none     0      0  M$EO
    3   DCB   even  none     0      0  M$EO1
    4   DCB   even  none     0      0  M$ME
    5   DCB   even  none     0      0  M$SI
    6   DCB   even  none     0      0  M$READFILE
    7   DCB   even  none     0      0  M$DO
    8   DCB   even  none     0      0  M$STD1
    9   DCB   even  none     0      0  M$SORT1
   10   Data  even  none     1      1  VPD$CLOBBERLZ
   11   Proc  even  none    20     24  VPD$CLOBBERLZ

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    11      0   yes            yes      Std        1  VPD$CLOBBERLZ

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_1
                       nStd      0 X66_ARET
PL6.E3A0      #005=VPD$CLOBBERLZ File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:23 Page:83   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  BREAK_LOC                             BREAK_MESSAGE_REPORTER
     SPEC_BUF                              IN_RES                           r    MOP_ARY_MVZB
     M$EI                                  M$EO                                  M$EO1
     M$ME                                  M$SI                                  M$READFILE
     M$DO                                  M$STD1                                M$SORT1
PL6.E3A0      #005=VPD$CLOBBERLZ File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:23 Page:84   


      258        1        /*T***********************************************************/
      259        2        /*T*                                                         */
      260        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      261        4        /*T*                                                         */
      262        5        /*T***********************************************************/
      263        6        VPD$CLOBBERLZ: PROC(NUM_VECTOR);

      6 11 000000   000000 700200 xent  VPD$CLOBBER* TSX0  ! X66_AUTO_1
        11 000001   000006 000001                    ZERO    6,1

      264        7        /*I* NAME: VPD$CLOBBERLZ
      265        8             PURPOSE: To process a string of digits representing a decimal number.
      266        9             CALL: CALL VPD$CLOBBERLZ(VECTOR(TEXT));
      267       10             DESCRIPTION: This procedure clobbers leading zeroes on a string
      268       11                   that represents a decimal integer.
      269       12        */
      270       13        /**/
      271       14        /*  PARAMETERS  */
      272       15        /**/
      273       16    1   DCL NUM_VECTOR VECTOR PARAM;
      274       17        /**/
      275       18        /* INCLUDE FILES  */
      276       19        /**/
      277       20        %INCLUDE VP_DATA_R;
      278     7007        /**/
      279     7008        /*  BASED  */
      280     7009        /**/
      281     7010    1   DCL NUM CHAR(NUM_LEN) BASED(NUM$);
      282     7011        /**/
      283     7012        /*  LOCAL AUTO  */
      284     7013        /**/
      285     7014    1   DCL NUM$ PTR AUTO;
      286     7015    1   DCL NUM_LEN SBIN AUTO;
      287     7016        /**/
      288     7017        /*  LOCAL STATIC  */
      289     7018        /**/
PL6.E3A0      #005=VPD$CLOBBERLZ File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:23 Page:85   
      290     7019    1   DCL MOP_CMD(0:1) BIT(9) UNAL STATIC INIT('0'B,%MVC1);
      291     7020        /**/
      292     7021    1           NUM$ = VBASE(NUM_VECTOR);

   7021 11 000002   200003 470500                    LDP0    @NUM_VECTOR,,AUTO
        11 000003   000001 236100                    LDQ     1,,PR0
        11 000004   200004 756100                    STQ     NUM$,,AUTO

      293     7022    1           NUM_LEN = VBOUND(NUM_VECTOR) +1;

   7022 11 000005   000000 236100                    LDQ     0,,PR0
        11 000006   000020 772000                    QRL     16
        11 000007   000001 036007                    ADLQ    1,DL
        11 000010   200005 756100                    STQ     NUM_LEN,,AUTO

      294     7023    1           MOP_CMD(0) = MOP_ARY_MVZB(NUM_LEN -1); /* Move 1-less digits          */

   7023 11 000011   000000 100406                    MLR     fill='000'O
        11 000012   777777 600001 xsym               ADSC9   MOP_ARY_MVZB-1,Q         cn=3,n=1
        11 000013   000000 000001 10                 ADSC9   MOP_CMD                  cn=0,n=1

      295     7024    1           CALL EDITCHAR(NUM,

   7024 11 000014   200004 471500                    LDP1    NUM$,,AUTO
        11 000015   000000 620006                    EAX0    0,QL
        11 000016   200005 721100                    LXL1    NUM_LEN,,AUTO
        11 000017   140000 024540                    MVNE
        11 000020   100000 030010                    NDSC9   0,,PR1                   cn=0,s=nosgn,sf=0,n=*X0
        11 000021   000000 000002 10                 ADSC9   MOP_CMD                  cn=0,n=2
        11 000022   100000 000011                    ADSC9   0,,PR1                   cn=0,n=*X1

      296     7025    1             0,
      297     7026    1             NUM_LEN,
      298     7027    1             MOP_CMD,
      299     7028    1             NUM);
      300     7029    1           RETURN;

PL6.E3A0      #005=VPD$CLOBBERLZ File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:23 Page:86   
   7029 11 000023   000000 702200 xent               TSX2  ! X66_ARET
      301     7030        /**/
      302     7031    1   END VPD$CLOBBERLZ;
      303     7032        %EOD;

PL6.E3A0      #005=VPD$CLOBBERLZ File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:23 Page:87   
--  Include file information  --

   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$CLOBBERLZ.
PL6.E3A0      #005=VPD$CLOBBERLZ File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:23 Page:88   

 **** Variables and constants ****

  ****  Section 010  Data  VPD$CLOBBERLZ

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/b BIT (9)     r     1 MOP_CMD(0:1)

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @NUM_VECTOR                4-0-0/w PTR         r     1 NUM$
     5-0-0/w SBIN        r     1 NUM_LEN                   *0-0-0/d VECT        r     1 NUM_VECTOR

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w EPTR        r     1 BREAK_MESSAGE_REPORTER
     0-0-0/c BIT (9)     r     1 MOP_ARY_MVZB(0:9)

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c ACHR        r     1 NUM


   Procedure VPD$CLOBBERLZ requires 20 words for executable code.
   Procedure VPD$CLOBBERLZ requires 6 words of local(AUTO) storage.
PL6.E3A0      #005=VPD$CLOBBERLZ File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:23 Page:89   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #005=VPD$CLOBBERLZ File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:23 Page:90   
          MINI XREF LISTING

BREAK_LOC
      5227**DCL      5227--REDEF
DEF_ICB.FID.STRING
      5825**DCL      5826--REDEF
DEV_ICB.FID.STRING
      5711**DCL      5712--REDEF
EI_KEY.KEY
      5923**DCL      5923--REDEF    5923--REDEF    5923--REDEF
EO_OCB.TYPE
      5423**DCL      5424--REDEF
FPT_CLOSE_EI.SN_
      6764**DCL      6764--REDEF
FPT_CLOSE_EI.UTL_
      6765**DCL      6765--REDEF
FPT_CLOSE_EI.V.EXPIRE#
      6779**DCL      6779--REDEF
FPT_CLOSE_EI.V.TYPE#
      6777**DCL      6777--REDEF
FPT_CLOSE_EI.V.XTNSIZE#
      6774**DCL      6774--REDEF    6776--REDEF
FPT_CLOSE_PTL.SN_
      6890**DCL      6890--REDEF
FPT_CLOSE_PTL.UTL_
      6891**DCL      6891--REDEF
FPT_CLOSE_PTL.V.EXPIRE#
      6905**DCL      6905--REDEF
FPT_CLOSE_PTL.V.TYPE#
      6903**DCL      6903--REDEF
FPT_CLOSE_PTL.V.XTNSIZE#
      6900**DCL      6900--REDEF    6902--REDEF
FPT_CLOSE_READ.SN_
      6806**DCL      6806--REDEF
PL6.E3A0      #005=VPD$CLOBBERLZ File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:23 Page:91   
FPT_CLOSE_READ.UTL_
      6807**DCL      6807--REDEF
FPT_CLOSE_READ.V.EXPIRE#
      6821**DCL      6821--REDEF
FPT_CLOSE_READ.V.TYPE#
      6819**DCL      6819--REDEF
FPT_CLOSE_READ.V.XTNSIZE#
      6816**DCL      6816--REDEF    6818--REDEF
FPT_CLOSE_SI.SN_
      6974**DCL      6974--REDEF
FPT_CLOSE_SI.UTL_
      6975**DCL      6975--REDEF
FPT_CLOSE_SI.V.EXPIRE#
      6989**DCL      6989--REDEF
FPT_CLOSE_SI.V.TYPE#
      6987**DCL      6987--REDEF
FPT_CLOSE_SI.V.XTNSIZE#
      6984**DCL      6984--REDEF    6986--REDEF
FPT_CLOSE_STD.SN_
      6932**DCL      6932--REDEF
FPT_CLOSE_STD.UTL_
      6933**DCL      6933--REDEF
FPT_CLOSE_STD.V.EXPIRE#
      6947**DCL      6947--REDEF
FPT_CLOSE_STD.V.TYPE#
      6945**DCL      6945--REDEF
FPT_CLOSE_STD.V.XTNSIZE#
      6942**DCL      6942--REDEF    6944--REDEF
FPT_CLSEI_FT.SN_
      6848**DCL      6848--REDEF
FPT_CLSEI_FT.UTL_
      6849**DCL      6849--REDEF
FPT_CLSEI_FT.V.EXPIRE#
      6863**DCL      6863--REDEF
FPT_CLSEI_FT.V.TYPE#
      6861**DCL      6861--REDEF
PL6.E3A0      #005=VPD$CLOBBERLZ File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:23 Page:92   
FPT_CLSEI_FT.V.XTNSIZE#
      6858**DCL      6858--REDEF    6860--REDEF
FPT_OPEN_EI.ACSVEH_
      6419**DCL      6420--REDEF
FPT_OPEN_EI.ALTKEYS_
      6425**DCL      6426--REDEF    6426--REDEF
FPT_OPEN_EI.HDR_
      6424**DCL      6425--REDEF
FPT_OPEN_EI.TAB_
      6423**DCL      6424--REDEF
FPT_OPEN_EI.UHL_
      6417**DCL      6418--REDEF    6418--REDEF
FPT_OPEN_EI.V.FSN#
      6457**DCL      6457--REDEF    6457--REDEF
FPT_OPEN_EI.WSN_
      6423**DCL      6423--REDEF
FPT_OPEN_EI_SAVE.ACSVEH_
      6528**DCL      6529--REDEF
FPT_OPEN_EI_SAVE.ALTKEYS_
      6534**DCL      6535--REDEF    6535--REDEF
FPT_OPEN_EI_SAVE.HDR_
      6533**DCL      6534--REDEF
FPT_OPEN_EI_SAVE.TAB_
      6532**DCL      6533--REDEF
FPT_OPEN_EI_SAVE.UHL_
      6526**DCL      6527--REDEF    6527--REDEF
FPT_OPEN_EI_SAVE.V.FSN#
      6566**DCL      6566--REDEF    6566--REDEF
FPT_OPEN_EI_SAVE.WSN_
      6532**DCL      6532--REDEF
FPT_OPEN_OUT.ACSVEH_
      6310**DCL      6311--REDEF
FPT_OPEN_OUT.ALTKEYS_
      6316**DCL      6317--REDEF    6317--REDEF
FPT_OPEN_OUT.HDR_
      6315**DCL      6316--REDEF
PL6.E3A0      #005=VPD$CLOBBERLZ File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:23 Page:93   
FPT_OPEN_OUT.TAB_
      6314**DCL      6315--REDEF
FPT_OPEN_OUT.UHL_
      6308**DCL      6309--REDEF    6309--REDEF
FPT_OPEN_OUT.V.FSN#
      6348**DCL      6348--REDEF    6348--REDEF
FPT_OPEN_OUT.WSN_
      6314**DCL      6314--REDEF
FPT_OPEN_OUT_SAVE.ACSVEH_
      6201**DCL      6202--REDEF
FPT_OPEN_OUT_SAVE.ALTKEYS_
      6207**DCL      6208--REDEF    6208--REDEF
FPT_OPEN_OUT_SAVE.HDR_
      6206**DCL      6207--REDEF
FPT_OPEN_OUT_SAVE.TAB_
      6205**DCL      6206--REDEF
FPT_OPEN_OUT_SAVE.UHL_
      6199**DCL      6200--REDEF    6200--REDEF
FPT_OPEN_OUT_SAVE.V.FSN#
      6239**DCL      6239--REDEF    6239--REDEF
FPT_OPEN_OUT_SAVE.WSN_
      6205**DCL      6205--REDEF
FPT_READ_STD.STATION_
      6629**DCL      6630--REDEF
FPT_READ_STD.V.DVBYTE.REREAD#
      6641**DCL      6641--REDEF
FPT_READ_STD.V.INDX#
      6639**DCL      6639--REDEF
FPT_READ_UC.STATION_
      6590**DCL      6591--REDEF
FPT_READ_UC.V.DVBYTE.REREAD#
      6602**DCL      6602--REDEF
FPT_READ_UC.V.INDX#
      6600**DCL      6600--REDEF
FPT_WRITE_ME.STATION_
      6698**DCL      6698--REDEF
PL6.E3A0      #005=VPD$CLOBBERLZ File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:23 Page:94   
FPT_WRITE_ME.V.DVBYTE.VFC#
      6705**DCL      6705--REDEF
FPT_WRITE_OUT.STATION_
      6729**DCL      6729--REDEF
FPT_WRITE_OUT.V.DVBYTE.VFC#
      6736**DCL      6736--REDEF
FPT_WRITE_UC.STATION_
      6667**DCL      6667--REDEF
FPT_WRITE_UC.V.DVBYTE.VFC#
      6674**DCL      6674--REDEF
FROM_SN.SN
      5573**DCL      5574--REDEF
GETCMD.OUT$
      4780**DCL      4786--REDEF
ICB.FID.STRING
      5597**DCL      5598--REDEF
IFSFA_PARAM.EOMCHAR#
      5952**DCL      5953--REDEF
IFSFA_PARAM.SIG1
      5946**DCL      5946--REDEF
IFSFA_PARAM.SIG2
      5946**DCL      5947--REDEF
IN_RES
      5519**DCL      5519--REDEF
IN_SN.SN
      5535**DCL      5536--REDEF
MOP_ARY_MVZB
      5925**DCL      7023>>ASSIGN
MOP_CMD
      7019**DCL      7023<<ASSIGN   7024>>CALLBLT
NUM
      7010**DCL      7024<<CALLBLT  7024>>CALLBLT
NUM$
      7014**DCL      7010--IMP-PTR  7021<<ASSIGN   7024>>CALLBLT  7024>>CALLBLT
NUM_LEN
      7015**DCL      7010--IMP-SIZ  7022<<ASSIGN   7023>>ASSIGN   7024>>CALLBLT  7024>>CALLBLT  7024>>CALLBLT
PL6.E3A0      #005=VPD$CLOBBERLZ File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:23 Page:95   
NUM_VECTOR
        16**DCL         6--PROC     7021>>ASSIGN   7022>>ASSIGN
OCB.TYPE
      5281**DCL      5282--REDEF
OFSFA_PARAM.EOMCHAR#
      5982**DCL      5983--REDEF
OFSFA_PARAM.SIG1
      5976**DCL      5976--REDEF
OFSFA_PARAM.SIG2
      5976**DCL      5977--REDEF
OUT_SN.SN
      5553**DCL      5554--REDEF
SPEC_BUF
      5231**DCL      5231--REDEF

PL6.E3A0      #006=VPD$CLOSE_OUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:24 Page:96   
      304        1        /*T***********************************************************/
      305        2        /*T*                                                         */
      306        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      307        4        /*T*                                                         */
      308        5        /*T***********************************************************/
      309        6        VPD$CLOSE_OUT: PROC(ERR);
      310        7        /*D* NAME: VPD$CLOSE_OUT
      311        8             CALL: CALL VPD$CLOSE_OUT(ERR);
      312        9             DESCRIPTION: Closes the output file, specified by its DCBNUM in
      313       10                          OCB.DCBNM (UBIN(18)). The DCB is closed with SAVE if either
      314       11                          ERR (SBIN WORD) = 0 or if ERRORS SAVE has been specified
      315       12                          causing ERR_SAVE_REL to be set to 1, or OCB.ERR_SAVE = 1.
      316       13                          Attributes of the file are also changed if applicable.
      317       14                          These include NAME, PASSWORD, account and vehicle access
      318       15                          controls, and TYPE. RELEASE may also be specified to
      319       16                          release any unused granules.
      320       17                          Also allows one to change: BUPM, XTNSIZE, LRDL0, LSLIDE,
      321       18                          GHSTACS and SPARE.
      322       19        */
      323       20        %INCLUDE VP_DATA_R;
      324     7007        %INCLUDE F$DCB;
      325     7056        %INCLUDE FM$FIT;
      326     7277    1   DCL ERR SBIN WORD;
      327     7278        %FPT_CLOSE(FPTN = FPT_CLOSE,
      328     7279                   SN = CLOSE_SN,
      329     7280                   STCLASS = STATIC);
      330     7322    1   DCL DCB$ PTR STATIC;
      331     7323        %VLP_VECTOR(FPTN=B$VECTOR,STCLASS=BASED);
      332     7338    1   DCL B$WORD UBIN BASED;
      333     7339    1   DCL 1 TEXT$C BASED,
      334     7340    1         2 LEN UBIN BYTE UNAL,
      335     7341    1         2 STRING CHAR(TEXT$C.LEN);
      336     7342    1   DCL MOP_6_DIGITS(0:1) BIT(9) CONSTANT INIT(%MVZB5,%MVC1);
      337     7343    1   DCL 1 JOB_MESS STATIC,
      338     7344    1         2 VFC CHAR(1) INIT('A'),          /* Space one after printing           */
      339     7345    1         2 * CHAR(0) INIT('  JOB '),
      340     7346    1         2 ID CHAR(6),
PL6.E3A0      #006=VPD$CLOSE_OUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:24 Page:97   
      341     7347    1         2 * CHAR(0) INIT(' submitted');
      342     7348        %PCL_SN(FPTN = CLOSE_SN,STCLASS = STATIC);
      343     7366    1   DCL 1 TEXTC,
      344     7367    1         2 C UBIN(9),
      345     7368    1         2 TEXT CHAR(31);
      346     7369        %VP_ENTRIES (OMIT=VPD$CLOSE_OUT);
      347     7577    1           DCB$ = OCB.DCBPTR$;
      348     7578    1           FPT_CLOSE.V.DCB# = OCB.DCBNM;
      349     7579    1           FPT_CLOSE.V.OPER.CHGATT# = %NO#; /* Default                           */
      350     7580    1           FPT_CLOSE.V.EXPIRE# = 0;
      351     7581    1           IF ERR=1 AND ERR_SAVE_REL=2     /* CLOSE WITH ERROR AND               */
      352     7582    1             AND OCB.ERR_SAVE = 0          /* And user don't care                */
      353     7583    1            THEN                           /* 'ERRORS RELEASE' SPECIFIED         */
      354     7584    1              FPT_CLOSE.V.DISP# = 0;       /* LEAVE FILE AS IT CAME IN           */
      355     7585    2            ELSE DO;
      356     7586    2               FPT_CLOSE.V.DISP# = %SAVE#;
      357     7587    2               FPT_CLOSE.V.OPER.REBLD# = OCB.REBUILD;
      358     7588    2               IF OCB.ALTBLD = 1 THEN
      359     7589    2                  FPT_CLOSE.V.ALTBLD#=%YES#;
      360     7590    2                ELSE IF OCB.ALTBLD = 2 THEN
      361     7591    2                     FPT_CLOSE.V.ALTBLD#=%NO#;
      362     7592    2               IF OCB.RELEASE=2
      363     7593    2                THEN
      364     7594    2                  FPT_CLOSE.V.OPER.RELG# = %NO#;
      365     7595    2                ELSE
      366     7596    2                  FPT_CLOSE.V.OPER.RELG# = %YES#;
      367     7597                                                /* The following changes are OK only  */
      368     7598                                                /* a close for MODIFY.  Otherwise,    */
      369     7599                                                /* they should take the ELSE branch,  */
      370     7600                                                /* clearing data from any previous    */
      371     7601                                                /* MODIFY                             */
      372     7602    2               IF OCB.MOD_NAME.LEN>0
      373     7603    2                THEN                       /* New name specified on MODIFY       */
      374     7604    3                DO;
      375     7605    3                   FPT_CLOSE.V.OPER.CHGATT# = %YES#;
      376     7606    3                   FPT_CLOSE.NAME_ = VECTOR(OCB.MOD_NAME);
      377     7607    3                   END;
PL6.E3A0      #006=VPD$CLOSE_OUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:24 Page:98   
      378     7608    2                ELSE                       /* No new name (or not MODIFY         */
      379     7609    2                  FPT_CLOSE.NAME_ = VECTOR(NIL); /* Clear any previous MOD NAME  */
      380     7610    2               IF OCB.MOD_PASS_FLG
      381     7611    2                THEN                       /* New password specified on MODIFY   */
      382     7612    3                DO;
      383     7613    3                   FPT_CLOSE.V.OPER.CHGATT# = %YES#;
      384     7614    3                   FPT_CLOSE.PASS_ = VECTOR(OCB.MOD_PASS);
      385     7615    3                   END;
      386     7616    2                ELSE                       /* No new password or not MODIFY      */
      387     7617    2                  FPT_CLOSE.PASS_ = VECTOR(NIL); /* Clear any previous MOD PASS  */
      388     7618                                                /* The following changes are OK on    */
      389     7619                                                /* any close                          */
      390     7620    2               IF OCB.BACKUP=0
      391     7621    2                THEN
      392     7622    2                  FPT_CLOSE.V.BUPM# = '01'B;
      393     7623    3                ELSE DO;
      394     7624    3                   FPT_CLOSE.V.OPER.CHGATT# = %YES#;
      395     7625    3                   IF OCB.BACKUP=1
      396     7626    3                    THEN
      397     7627    3                      FPT_CLOSE.V.BUPM#      = %YES#;
      398     7628    3                    ELSE
      399     7629    3                      FPT_CLOSE.V.BUPM#      = %NO#;
      400     7630    3                   END;
      401     7631    2               IF (OCB.XTNSIZE + OCB.EXPIRE + OCB.LRDL0 + OCB.LSLIDE + OCB.SPARE)~=0
      402     7632    3                THEN DO;
      403     7633    3                   FPT_CLOSE.V.OPER.CHGATT# = %YES#;
      404     7634    3                   FPT_CLOSE.V.XTNSIZE# = OCB.XTNSIZE;
      405     7635    3                   FPT_CLOSE.V.EXPIRE# = OCB.EXPIRE;
      406     7636    3                   FPT_CLOSE.V.LRDL0# = OCB.LRDL0;
      407     7637    3                   FPT_CLOSE.V.LSLIDE# = OCB.LSLIDE;
      408     7638    3                   FPT_CLOSE.V.SPARE# = OCB.SPARE;
      409     7639    3                   END;
      410     7640    2               IF OCB.ACCESS_FLG
      411     7641    3                THEN DO;
      412     7642    3                   FPT_CLOSE.V.OPER.CHGATT# = %YES#;
      413     7643                                                /* Merge old and new ACCESS controls  */
      414     7644    3                   CALL VPD$PROCESS_CONTROLS(9,FPT_CLOSE.ACCESS_);
PL6.E3A0      #006=VPD$CLOSE_OUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:24 Page:99   
      415     7645    3                   END;
      416     7646    2                ELSE
      417     7647    2                  FPT_CLOSE.ACCESS_ = VECTOR(NIL);
      418     7648    2               IF OCB.ACSVEH_FLG
      419     7649    3                THEN DO;
      420     7650    3                   FPT_CLOSE.V.OPER.CHGATT# = %YES#;
      421     7651                                                /* Merge old and new ASCVEH controls  */
      422     7652    3                   CALL VPD$PROCESS_CONTROLS(10,FPT_CLOSE.ACSVEH_);
      423     7653    3                   END;
      424     7654    2                ELSE
      425     7655    2                  FPT_CLOSE.ACSVEH_ = VECTOR(NIL);
      426     7656    2               IF OCB.TYPE_BIT~='0'B
      427     7657    3                THEN DO;
      428     7658    3                   FPT_CLOSE.V.OPER.CHGATT# = %YES#;
      429     7659    3                   FPT_CLOSE.V.TYPE# = OCB.TYPE;
      430     7660    3                   END;
      431     7661    2                ELSE
      432     7662    2                  FPT_CLOSE.V.TYPE# = BINASC(0);
      433     7663    2               END;
      434     7664    1           IF OCB.GHSTACS ~= 0
      435     7665    2            THEN DO;
      436     7666    2               FPT_CLOSE.V.OPER.CHGATT# = %YES#;
      437     7667    2               FPT_CLOSE.V.GHSTACS# = OCB.GHSTACS;
      438     7668    2               END;
      439     7669    1            ELSE
      440     7670    1              FPT_CLOSE.V.GHSTACS# = 0;
      441     7671    1           IF USER_LABELS$ ~= ADDR(NIL) AND OCB.FLAVOR.TAPE /* Have to put UTL out */
      442     7672    1             AND USER_LABELS$->B$WORD ~= 0
      443     7673    2            THEN DO;
      444     7674    2               ADDR(FPT_CLOSE.UTL_)->B$VECTOR.PTR$ = USER_LABELS$;
      445     7675    2               ADDR(FPT_CLOSE.UTL_)->B$VECTOR.W1.VSIZE# = USER_LABELS$->B$WORD*80+3;
      446     7676    2               END;
      447     7677    1            ELSE
      448     7678    1              FPT_CLOSE.UTL_ = VECTOR(NIL);
      449     7679    1           IF CMD_MASK(12) AND             /* If this is a MODIFY                */
      450     7680    1             OCB.ALTBLD ~= 1 THEN          /* he didn't ask for ALTBLD           */
      451     7681    1              FPT_CLOSE.V.ALTBLD# = %NO#;  /* then don't rebuild altkeys         */
PL6.E3A0      #006=VPD$CLOSE_OUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:24 Page:100  
      452     7682    1           CALL VPC$CALL_CLOSE(FPT_CLOSE) ALTRET(CLOSE_ALT);
      453     7683    1           IF FPT_CLOSE.V.DISP#=%SAVE# AND OCB.DCBPTR$->F$DCB.RES='JE  '
      454     7684    1            THEN                           /* We have written to the JOB Entry   */
      455     7685                                                /* system.                            */
      456     7686    2            DO;                            /* Output a message giving JOB ID     */
      457     7687    2               CALL VPD$FINISH_NLIST;      /* Take care of dangling name list    */
      458     7688    2               IF TEST_MODE=0
      459     7689    2                THEN
      460     7690    2                  IF OCB.DCBPTR$->F$DCB.WSN=' '
      461     7691    2                   THEN                    /* A local JOB entry, SYSID available */
      462     7692    2                     CALL EDITCHAR(JOB_MESS.ID,
      463     7693    2                       0,
      464     7694    2                       6,
      465     7695    2                       MOP_6_DIGITS,
      466     7696    2                       SUBSTR(DCB$->F$DCB.NAME.C,0,6));
      467     7697    2                   ELSE                    /* A remote JOB entry, SYSID unknown  */
      468     7698    2                     JOB_MESS.ID = 'remote';
      469     7699    2                ELSE                       /* Test mode, don't give SYSID        */
      470     7700    2                  JOB_MESS.ID = 'TEST';
      471     7701    2               FPT_WRITE_ME.BUF_ = VECTOR(JOB_MESS);
      472     7702    2               FPT_WRITE_ME.V.DVBYTE.VFC# = %YES#;
      473     7703    2               CALL M$WRITE(FPT_WRITE_ME);
      474     7704    2               END;
      475     7705    1           IF OCB.FLAVOR.TAPE
      476     7706    1             OR SUBSTR(DCB$ -> F$DCB.RES,0,2) = 'FT'
      477     7707    1             OR SUBSTR(DCB$ -> F$DCB.RES,0,2) = 'MT'
      478     7708    1            THEN                           /* We must stash VOL and test SN list */
      479     7709    2            DO;
      480     7710    2               CALL VPD$CHECK_VOL(OUT_SN,0,OCB.DCBNM,,1); /* Check for VOL trans */
      481     7711    2               IF OUT_SN.COUNT ~= CLOSE_SN.COUNT
      482     7712    2                THEN                       /* SN list grew, report new list      */
      483     7713    3                DO;
      484     7714    3                   TEXTC.TEXT = CLOSE_SN.SNLIST;
      485     7715    3                   TEXTC.C = CLOSE_SN.COUNT * 6;
      486     7716    3                   CALL VPL$ERR_PROC(0,190,'04'O,,VECTOR(TEXTC));
      487     7717        /*E* ERROR:   VPD-0190
      488     7718             MESSAGE: Volume list has grown to %U1
PL6.E3A0      #006=VPD$CLOSE_OUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:24 Page:101  
      489     7719        */
      490     7720    3                   END;
      491     7721    2                ELSE ;                     /* No SN list change                  */
      492     7722    2               END;
      493     7723    1            ELSE ;                         /* Not a tape, leave VOL & SN list    */
      494     7724    1           RETURN;
      495     7725    1   CLOSE_ALT: CALL VPL$ERR_PROC(2,0);
      496     7726    1           RETURN;
      497     7727    1   END VPD$CLOSE_OUT;
      498     7728        %EOD;

PL6.E3A0      #006=VPD$CLOSE_OUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:24 Page:102  
--  Include file information  --

   FM$FIT.:E05TOU  is referenced.
   F$DCB.:E05TOU  cannot be made into a system file and is referenced.
   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$CLOSE_OUT.

   Procedure VPD$CLOSE_OUT requires 278 words for executable code.
   Procedure VPD$CLOSE_OUT requires 24 words of local(AUTO) storage.

PL6.E3A0      #006=VPD$CLOSE_OUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:24 Page:103  

 Object Unit name= VPD$CLOSE_OUT                              File name= VPD$UTIL.:E05TOU
 UTS= JUL 30 '97 07:24:42.28 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$EI
    2   DCB   even  none     0      0  M$EO
    3   DCB   even  none     0      0  M$EO1
    4   DCB   even  none     0      0  M$ME
    5   DCB   even  none     0      0  M$SI
    6   DCB   even  none     0      0  M$READFILE
    7   DCB   even  none     0      0  M$DO
    8   DCB   even  none     0      0  M$STD1
    9   DCB   even  none     0      0  M$SORT1
   10   Data  even  none    68    104  VPD$CLOSE_OUT
   11  RoData even  UTS      7      7  VPD$CLOSE_OUT
   12   Proc  even  none   278    426  VPD$CLOSE_OUT
   13  RoData even  none    32     40  VPD$CLOSE_OUT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    12      0   yes            yes      Std        1  VPD$CLOSE_OUT
PL6.E3A0      #006=VPD$CLOSE_OUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:24 Page:104  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       2 VPD$PROCESS_CONTROLS
         yes           Std       2 VPD$FINISH_NLIST
         yes           Std       5 VPD$CHECK_VOL
         yes           Std       8 VPL$ERR_PROC
 yes     yes           Std       1 VPC$CALL_CLOSE
                       nStd      0 X66_AUTO_1
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  ERR_SAVE_REL                          USER_LABELS$
     TEST_MODE                             BREAK_LOC                             BREAK_MESSAGE_REPORTER
     CMD_MASK                              SPEC_BUF                              OCB
     IN_RES                                OUT_SN                                M$EI
     M$EO                                  M$EO1                                 M$ME
     M$SI                                  M$READFILE                            M$DO
     M$STD1                                M$SORT1                               FPT_WRITE_ME
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #006=VPD$CLOSE_OUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:24 Page:105  


      304        1        /*T***********************************************************/
      305        2        /*T*                                                         */
      306        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      307        4        /*T*                                                         */
      308        5        /*T***********************************************************/
      309        6        VPD$CLOSE_OUT: PROC(ERR);

      6 12 000000   000000 700200 xent  VPD$CLOSE_O* TSX0  ! X66_AUTO_1
        12 000001   000030 000001                    ZERO    24,1

      310        7        /*D* NAME: VPD$CLOSE_OUT
      311        8             CALL: CALL VPD$CLOSE_OUT(ERR);
      312        9             DESCRIPTION: Closes the output file, specified by its DCBNUM in
      313       10                          OCB.DCBNM (UBIN(18)). The DCB is closed with SAVE if either
      314       11                          ERR (SBIN WORD) = 0 or if ERRORS SAVE has been specified
      315       12                          causing ERR_SAVE_REL to be set to 1, or OCB.ERR_SAVE = 1.
      316       13                          Attributes of the file are also changed if applicable.
      317       14                          These include NAME, PASSWORD, account and vehicle access
      318       15                          controls, and TYPE. RELEASE may also be specified to
      319       16                          release any unused granules.
      320       17                          Also allows one to change: BUPM, XTNSIZE, LRDL0, LSLIDE,
      321       18                          GHSTACS and SPARE.
      322       19        */
      323       20        %INCLUDE VP_DATA_R;
      324     7007        %INCLUDE F$DCB;
      325     7056        %INCLUDE FM$FIT;
      326     7277    1   DCL ERR SBIN WORD;
      327     7278        %FPT_CLOSE(FPTN = FPT_CLOSE,
      328     7279                   SN = CLOSE_SN,
      329     7280                   STCLASS = STATIC);
      330     7322    1   DCL DCB$ PTR STATIC;
      331     7323        %VLP_VECTOR(FPTN=B$VECTOR,STCLASS=BASED);
      332     7338    1   DCL B$WORD UBIN BASED;
      333     7339    1   DCL 1 TEXT$C BASED,
      334     7340    1         2 LEN UBIN BYTE UNAL,
      335     7341    1         2 STRING CHAR(TEXT$C.LEN);
PL6.E3A0      #006=VPD$CLOSE_OUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:24 Page:106  
      336     7342    1   DCL MOP_6_DIGITS(0:1) BIT(9) CONSTANT INIT(%MVZB5,%MVC1);
      337     7343    1   DCL 1 JOB_MESS STATIC,
      338     7344    1         2 VFC CHAR(1) INIT('A'),          /* Space one after printing           */
      339     7345    1         2 * CHAR(0) INIT('  JOB '),
      340     7346    1         2 ID CHAR(6),
      341     7347    1         2 * CHAR(0) INIT(' submitted');
      342     7348        %PCL_SN(FPTN = CLOSE_SN,STCLASS = STATIC);
      343     7366    1   DCL 1 TEXTC,
      344     7367    1         2 C UBIN(9),
      345     7368    1         2 TEXT CHAR(31);
      346     7369        %VP_ENTRIES (OMIT=VPD$CLOSE_OUT);
      347     7577    1           DCB$ = OCB.DCBPTR$;

   7577 12 000002   000001 236000 xsym               LDQ     OCB+1
        12 000003   000036 756000 10                 STQ     DCB$

      348     7578    1           FPT_CLOSE.V.DCB# = OCB.DCBNM;

   7578 12 000004   000000 720000 xsym               LXL0    OCB
        12 000005   000032 740000 10                 STX0    FPT_CLOSE+26

      349     7579    1           FPT_CLOSE.V.OPER.CHGATT# = %NO#; /* Default                           */

   7579 12 000006   000000 236000 13                 LDQ     0
        12 000007   000032 356000 10                 ANSQ    FPT_CLOSE+26

      350     7580    1           FPT_CLOSE.V.EXPIRE# = 0;

   7580 12 000010   000000 221003                    LDX1    0,DU
        12 000011   000034 441000 10                 SXL1    FPT_CLOSE+28

      351     7581    1           IF ERR=1 AND ERR_SAVE_REL=2     /* CLOSE WITH ERROR AND               */

   7581 12 000012   200003 470500                    LDP0    @ERR,,AUTO
        12 000013   000000 235100                    LDA     0,,PR0
        12 000014   000001 115007                    CMPA    1,DL
        12 000015   000026 601000 12                 TNZ     s:7586
PL6.E3A0      #006=VPD$CLOSE_OUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:24 Page:107  
        12 000016   000000 235000 xsym               LDA     ERR_SAVE_REL
        12 000017   000002 115007                    CMPA    2,DL
        12 000020   000026 601000 12                 TNZ     s:7586
        12 000021   000272 235000 xsym               LDA     OCB+186
        12 000022   000026 601000 12                 TNZ     s:7586

      352     7582    1             AND OCB.ERR_SAVE = 0          /* And user don't care                */
      353     7583    1            THEN                           /* 'ERRORS RELEASE' SPECIFIED         */
      354     7584    1              FPT_CLOSE.V.DISP# = 0;       /* LEAVE FILE AS IT CAME IN           */

   7584 12 000023   000000 236003                    LDQ     0,DU
        12 000024   000032 552004 10                 STBQ    FPT_CLOSE+26,'04'O
        12 000025   000217 710000 12                 TRA     s:7664

      355     7585    2            ELSE DO;

      356     7586    2               FPT_CLOSE.V.DISP# = %SAVE#;

   7586 12 000026   000002 236007                    LDQ     2,DL
        12 000027   000032 552004 10                 STBQ    FPT_CLOSE+26,'04'O

      357     7587    2               FPT_CLOSE.V.OPER.REBLD# = OCB.REBUILD;

   7587 12 000030   000227 236000 xsym               LDQ     OCB+151
        12 000031   000024 772000                    QRL     20
        12 000032   000032 676000 10                 ERQ     FPT_CLOSE+26
        12 000033   100000 376007                    ANQ     32768,DL
        12 000034   000032 656000 10                 ERSQ    FPT_CLOSE+26

      358     7588    2               IF OCB.ALTBLD = 1 THEN

   7588 12 000035   000230 235000 xsym               LDA     OCB+152
        12 000036   000001 115007                    CMPA    1,DL
        12 000037   000045 601000 12                 TNZ     s:7590

      359     7589    2                  FPT_CLOSE.V.ALTBLD#=%YES#;

PL6.E3A0      #006=VPD$CLOSE_OUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:24 Page:108  
   7589 12 000040   000034 236000 10                 LDQ     FPT_CLOSE+28
        12 000041   000001 376000 13                 ANQ     1
        12 000042   000040 276003                    ORQ     32,DU
        12 000043   000034 756000 10                 STQ     FPT_CLOSE+28
        12 000044   000051 710000 12                 TRA     s:7592

      360     7590    2                ELSE IF OCB.ALTBLD = 2 THEN

   7590 12 000045   000002 115007                    CMPA    2,DL
        12 000046   000051 601000 12                 TNZ     s:7592

      361     7591    2                     FPT_CLOSE.V.ALTBLD#=%NO#;

   7591 12 000047   000001 236000 13                 LDQ     1
        12 000050   000034 356000 10                 ANSQ    FPT_CLOSE+28

      362     7592    2               IF OCB.RELEASE=2

   7592 12 000051   000043 236000 xsym               LDQ     OCB+35
        12 000052   777000 376003                    ANQ     -512,DU
        12 000053   002000 116003                    CMPQ    1024,DU
        12 000054   000060 601000 12                 TNZ     s:7596

      363     7593    2                THEN
      364     7594    2                  FPT_CLOSE.V.OPER.RELG# = %NO#;

   7594 12 000055   000002 236000 13                 LDQ     2
        12 000056   000032 356000 10                 ANSQ    FPT_CLOSE+26
        12 000057   000062 710000 12                 TRA     s:7602

      365     7595    2                ELSE
      366     7596    2                  FPT_CLOSE.V.OPER.RELG# = %YES#;

   7596 12 000060   200000 236007                    LDQ     65536,DL
        12 000061   000032 256000 10                 ORSQ    FPT_CLOSE+26

      367     7597                                                /* The following changes are OK only  */
PL6.E3A0      #006=VPD$CLOSE_OUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:24 Page:109  
      368     7598                                                /* a close for MODIFY.  Otherwise,    */
      369     7599                                                /* they should take the ELSE branch,  */
      370     7600                                                /* clearing data from any previous    */
      371     7601                                                /* MODIFY                             */
      372     7602    2               IF OCB.MOD_NAME.LEN>0

   7602 12 000062   000231 236000 xsym               LDQ     OCB+153
        12 000063   777000 316003                    CANQ    -512,DU
        12 000064   000072 600000 12                 TZE     s:7609

      373     7603    2                THEN                       /* New name specified on MODIFY       */
      374     7604    3                DO;

      375     7605    3                   FPT_CLOSE.V.OPER.CHGATT# = %YES#;

   7605 12 000065   400000 236007                    LDQ     -131072,DL
        12 000066   000032 256000 10                 ORSQ    FPT_CLOSE+26

      376     7606    3                   FPT_CLOSE.NAME_ = VECTOR(OCB.MOD_NAME);

   7606 12 000067   000004 237000 13                 LDAQ    4
        12 000070   000006 757000 10                 STAQ    FPT_CLOSE+6

      377     7607    3                   END;

   7607 12 000071   000074 710000 12                 TRA     s:7610

      378     7608    2                ELSE                       /* No new name (or not MODIFY         */
      379     7609    2                  FPT_CLOSE.NAME_ = VECTOR(NIL); /* Clear any previous MOD NAME  */

   7609 12 000072   000006 237000 13                 LDAQ    6
        12 000073   000006 757000 10                 STAQ    FPT_CLOSE+6

      380     7610    2               IF OCB.MOD_PASS_FLG

   7610 12 000074   000243 234000 xsym               SZN     OCB+163
        12 000075   000103 605000 12                 TPL     s:7617
PL6.E3A0      #006=VPD$CLOSE_OUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:24 Page:110  

      381     7611    2                THEN                       /* New password specified on MODIFY   */
      382     7612    3                DO;

      383     7613    3                   FPT_CLOSE.V.OPER.CHGATT# = %YES#;

   7613 12 000076   400000 236007                    LDQ     -131072,DL
        12 000077   000032 256000 10                 ORSQ    FPT_CLOSE+26

      384     7614    3                   FPT_CLOSE.PASS_ = VECTOR(OCB.MOD_PASS);

   7614 12 000100   000010 237000 13                 LDAQ    8
        12 000101   000010 757000 10                 STAQ    FPT_CLOSE+8

      385     7615    3                   END;

   7615 12 000102   000105 710000 12                 TRA     s:7620

      386     7616    2                ELSE                       /* No new password or not MODIFY      */
      387     7617    2                  FPT_CLOSE.PASS_ = VECTOR(NIL); /* Clear any previous MOD PASS  */

   7617 12 000103   000006 237000 13                 LDAQ    6
        12 000104   000010 757000 10                 STAQ    FPT_CLOSE+8

      388     7618                                                /* The following changes are OK on    */
      389     7619                                                /* any close                          */
      390     7620    2               IF OCB.BACKUP=0

   7620 12 000105   000221 235000 xsym               LDA     OCB+145
        12 000106   000114 601000 12                 TNZ     s:7624

      391     7621    2                THEN
      392     7622    2                  FPT_CLOSE.V.BUPM# = '01'B;

   7622 12 000107   000034 236000 10                 LDQ     FPT_CLOSE+28
        12 000110   000003 376000 13                 ANQ     3
        12 000111   000200 276003                    ORQ     128,DU
PL6.E3A0      #006=VPD$CLOSE_OUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:24 Page:111  
        12 000112   000034 756000 10                 STQ     FPT_CLOSE+28
        12 000113   000127 710000 12                 TRA     s:7631

      393     7623    3                ELSE DO;

      394     7624    3                   FPT_CLOSE.V.OPER.CHGATT# = %YES#;

   7624 12 000114   400000 236007                    LDQ     -131072,DL
        12 000115   000032 256000 10                 ORSQ    FPT_CLOSE+26

      395     7625    3                   IF OCB.BACKUP=1

   7625 12 000116   000001 115007                    CMPA    1,DL
        12 000117   000125 601000 12                 TNZ     s:7629

      396     7626    3                    THEN
      397     7627    3                      FPT_CLOSE.V.BUPM#      = %YES#;

   7627 12 000120   000034 236000 10                 LDQ     FPT_CLOSE+28
        12 000121   000003 376000 13                 ANQ     3
        12 000122   000400 276003                    ORQ     256,DU
        12 000123   000034 756000 10                 STQ     FPT_CLOSE+28
        12 000124   000127 710000 12                 TRA     s:7631

      398     7628    3                    ELSE
      399     7629    3                      FPT_CLOSE.V.BUPM#      = %NO#;

   7629 12 000125   000003 236000 13                 LDQ     3
        12 000126   000034 356000 10                 ANSQ    FPT_CLOSE+28

      400     7630    3                   END;

      401     7631    2               IF (OCB.XTNSIZE + OCB.EXPIRE + OCB.LRDL0 + OCB.LSLIDE + OCB.SPARE)~=0

   7631 12 000127   000225 236000 xsym               LDQ     OCB+149
        12 000130   000226 036000 xsym               ADLQ    OCB+150
        12 000131   000222 036000 xsym               ADLQ    OCB+146
PL6.E3A0      #006=VPD$CLOSE_OUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:24 Page:112  
        12 000132   000223 036000 xsym               ADLQ    OCB+147
        12 000133   000224 036000 xsym               ADLQ    OCB+148
        12 000134   000154 600000 12                 TZE     s:7640

      402     7632    3                THEN DO;

      403     7633    3                   FPT_CLOSE.V.OPER.CHGATT# = %YES#;

   7633 12 000135   400000 236007                    LDQ     -131072,DL
        12 000136   000032 256000 10                 ORSQ    FPT_CLOSE+26

      404     7634    3                   FPT_CLOSE.V.XTNSIZE# = OCB.XTNSIZE;

   7634 12 000137   000225 722000 xsym               LXL2    OCB+149
        12 000140   000033 742000 10                 STX2    FPT_CLOSE+27

      405     7635    3                   FPT_CLOSE.V.EXPIRE# = OCB.EXPIRE;

   7635 12 000141   000226 723000 xsym               LXL3    OCB+150
        12 000142   000034 443000 10                 SXL3    FPT_CLOSE+28

      406     7636    3                   FPT_CLOSE.V.LRDL0# = OCB.LRDL0;

   7636 12 000143   000222 236000 xsym               LDQ     OCB+146
        12 000144   000022 736000                    QLS     18
        12 000145   000035 552020 10                 STBQ    FPT_CLOSE+29,'20'O

      407     7637    3                   FPT_CLOSE.V.LSLIDE# = OCB.LSLIDE;

   7637 12 000146   000223 236000 xsym               LDQ     OCB+147
        12 000147   000033 736000                    QLS     27
        12 000150   000035 552040 10                 STBQ    FPT_CLOSE+29,'40'O

      408     7638    3                   FPT_CLOSE.V.SPARE# = OCB.SPARE;

   7638 12 000151   000224 236000 xsym               LDQ     OCB+148
        12 000152   000011 736000                    QLS     9
PL6.E3A0      #006=VPD$CLOSE_OUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:24 Page:113  
        12 000153   000035 552010 10                 STBQ    FPT_CLOSE+29,'10'O

      409     7639    3                   END;

      410     7640    2               IF OCB.ACCESS_FLG

   7640 12 000154   000254 234000 xsym               SZN     OCB+172
        12 000155   000165 605000 12                 TPL     s:7647

      411     7641    3                THEN DO;

      412     7642    3                   FPT_CLOSE.V.OPER.CHGATT# = %YES#;

   7642 12 000156   400000 236007                    LDQ     -131072,DL
        12 000157   000032 256000 10                 ORSQ    FPT_CLOSE+26

      413     7643                                                /* Merge old and new ACCESS controls  */
      414     7644    3                   CALL VPD$PROCESS_CONTROLS(9,FPT_CLOSE.ACCESS_);

   7644 12 000160   000012 630400 13                 EPPR0   10
        12 000161   000020 631400 xsym               EPPR1   B_VECTNIL+16
        12 000162   000000 701000 xent               TSX1    VPD$PROCESS_CONTROLS
        12 000163   000000 011000                    NOP     0

      415     7645    3                   END;

   7645 12 000164   000167 710000 12                 TRA     s:7648

      416     7646    2                ELSE
      417     7647    2                  FPT_CLOSE.ACCESS_ = VECTOR(NIL);

   7647 12 000165   000006 237000 13                 LDAQ    6
        12 000166   000012 757000 10                 STAQ    FPT_CLOSE+10

      418     7648    2               IF OCB.ACSVEH_FLG

   7648 12 000167   000252 234000 xsym               SZN     OCB+170
PL6.E3A0      #006=VPD$CLOSE_OUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:24 Page:114  
        12 000170   000200 605000 12                 TPL     s:7655

      419     7649    3                THEN DO;

      420     7650    3                   FPT_CLOSE.V.OPER.CHGATT# = %YES#;

   7650 12 000171   400000 236007                    LDQ     -131072,DL
        12 000172   000032 256000 10                 ORSQ    FPT_CLOSE+26

      421     7651                                                /* Merge old and new ASCVEH controls  */
      422     7652    3                   CALL VPD$PROCESS_CONTROLS(10,FPT_CLOSE.ACSVEH_);

   7652 12 000173   000014 630400 13                 EPPR0   12
        12 000174   000020 631400 xsym               EPPR1   B_VECTNIL+16
        12 000175   000000 701000 xent               TSX1    VPD$PROCESS_CONTROLS
        12 000176   000000 011000                    NOP     0

      423     7653    3                   END;

   7653 12 000177   000202 710000 12                 TRA     s:7656

      424     7654    2                ELSE
      425     7655    2                  FPT_CLOSE.ACSVEH_ = VECTOR(NIL);

   7655 12 000200   000006 237000 13                 LDAQ    6
        12 000201   000014 757000 10                 STAQ    FPT_CLOSE+12

      426     7656    2               IF OCB.TYPE_BIT~='0'B

   7656 12 000202   000043 236000 xsym               LDQ     OCB+35
        12 000203   000016 316000 13                 CANQ    14
        12 000204   000215 600000 12                 TZE     s:7662

      427     7657    3                THEN DO;

      428     7658    3                   FPT_CLOSE.V.OPER.CHGATT# = %YES#;

PL6.E3A0      #006=VPD$CLOSE_OUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:24 Page:115  
   7658 12 000205   400000 236007                    LDQ     -131072,DL
        12 000206   000032 256000 10                 ORSQ    FPT_CLOSE+26

      429     7659    3                   FPT_CLOSE.V.TYPE# = OCB.TYPE;

   7659 12 000207   040100 100400                    MLR     fill='040'O
        12 000210   000043 200002 xsym               ADSC9   OCB+35                   cn=1,n=2
        12 000211   200016 000004                    ADSC9   TEXTC+10,,AUTO           cn=0,n=4
        12 000212   200016 220100                    LDX0    TEXTC+10,,AUTO
        12 000213   000033 440000 10                 SXL0    FPT_CLOSE+27

      430     7660    3                   END;

   7660 12 000214   000217 710000 12                 TRA     s:7664

      431     7661    2                ELSE
      432     7662    2                  FPT_CLOSE.V.TYPE# = BINASC(0);

   7662 12 000215   000040 220003                    LDX0    32,DU
        12 000216   000033 440000 10                 SXL0    FPT_CLOSE+27

      433     7663    2               END;

      434     7664    1           IF OCB.GHSTACS ~= 0

   7664 12 000217   000044 235000 xsym               LDA     OCB+36
        12 000220   000231 600000 12                 TZE     s:7670

      435     7665    2            THEN DO;

      436     7666    2               FPT_CLOSE.V.OPER.CHGATT# = %YES#;

   7666 12 000221   400000 236007                    LDQ     -131072,DL
        12 000222   000032 256000 10                 ORSQ    FPT_CLOSE+26

      437     7667    2               FPT_CLOSE.V.GHSTACS# = OCB.GHSTACS;

PL6.E3A0      #006=VPD$CLOSE_OUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:24 Page:116  
   7667 12 000223   000044 236000 xsym               LDQ     OCB+36
        12 000224   000022 736000                    QLS     18
        12 000225   000034 676000 10                 ERQ     FPT_CLOSE+28
        12 000226   000017 376003                    ANQ     15,DU
        12 000227   000034 656000 10                 ERSQ    FPT_CLOSE+28

      438     7668    2               END;

   7668 12 000230   000233 710000 12                 TRA     s:7671

      439     7669    1            ELSE
      440     7670    1              FPT_CLOSE.V.GHSTACS# = 0;

   7670 12 000231   000017 236000 13                 LDQ     15
        12 000232   000034 356000 10                 ANSQ    FPT_CLOSE+28

      441     7671    1           IF USER_LABELS$ ~= ADDR(NIL) AND OCB.FLAVOR.TAPE /* Have to put UTL out */

   7671 12 000233   000000 236000 xsym               LDQ     USER_LABELS$
        12 000234   000001 116000 xsym               CMPQ    B_VECTNIL+1
        12 000235   000256 600000 12                 TZE     s:7678
        12 000236   000256 236000 xsym               LDQ     OCB+174
        12 000237   004000 316003                    CANQ    2048,DU
        12 000240   000256 600000 12                 TZE     s:7678
        12 000241   000000 470400 xsym               LDP0    USER_LABELS$
        12 000242   000000 235100                    LDA     0,,PR0
        12 000243   000256 600000 12                 TZE     s:7678

      442     7672    1             AND USER_LABELS$->B$WORD ~= 0
      443     7673    2            THEN DO;

      444     7674    2               ADDR(FPT_CLOSE.UTL_)->B$VECTOR.PTR$ = USER_LABELS$;

   7674 12 000244   000000 236000 xsym               LDQ     USER_LABELS$
        12 000245   000005 756000 10                 STQ     FPT_CLOSE+5

      445     7675    2               ADDR(FPT_CLOSE.UTL_)->B$VECTOR.W1.VSIZE# = USER_LABELS$->B$WORD*80+3;
PL6.E3A0      #006=VPD$CLOSE_OUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:24 Page:117  

   7675 12 000246   000000 236100                    LDQ     0,,PR0
        12 000247   000120 402007                    MPY     80,DL
        12 000250   000003 036007                    ADLQ    3,DL
        12 000251   000020 736000                    QLS     16
        12 000252   000004 676000 10                 ERQ     FPT_CLOSE+4
        12 000253   000034 376000 xsym               ANQ     B_VECTNIL+28
        12 000254   000004 656000 10                 ERSQ    FPT_CLOSE+4

      446     7676    2               END;

   7676 12 000255   000260 710000 12                 TRA     s:7679

      447     7677    1            ELSE
      448     7678    1              FPT_CLOSE.UTL_ = VECTOR(NIL);

   7678 12 000256   000006 237000 13                 LDAQ    6
        12 000257   000004 757000 10                 STAQ    FPT_CLOSE+4

      449     7679    1           IF CMD_MASK(12) AND             /* If this is a MODIFY                */

   7679 12 000260   000000 236000 xsym               LDQ     CMD_MASK
        12 000261   000040 316003                    CANQ    32,DU
        12 000262   000270 600000 12                 TZE     s:7682
        12 000263   000230 235000 xsym               LDA     OCB+152
        12 000264   000001 115007                    CMPA    1,DL
        12 000265   000270 600000 12                 TZE     s:7682

      450     7680    1             OCB.ALTBLD ~= 1 THEN          /* he didn't ask for ALTBLD           */
      451     7681    1              FPT_CLOSE.V.ALTBLD# = %NO#;  /* then don't rebuild altkeys         */

   7681 12 000266   000001 236000 13                 LDQ     1
        12 000267   000034 356000 10                 ANSQ    FPT_CLOSE+28

      452     7682    1           CALL VPC$CALL_CLOSE(FPT_CLOSE) ALTRET(CLOSE_ALT);

   7682 12 000270   000020 630400 13                 EPPR0   16
PL6.E3A0      #006=VPD$CLOSE_OUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:24 Page:118  
        12 000271   000017 631400 xsym               EPPR1   B_VECTNIL+15
        12 000272   000000 701000 xent               TSX1    VPC$CALL_CLOSE
        12 000273   000421 702000 12                 TSX2    CLOSE_ALT

      453     7683    1           IF FPT_CLOSE.V.DISP#=%SAVE# AND OCB.DCBPTR$->F$DCB.RES='JE  '

   7683 12 000274   000032 236000 10                 LDQ     FPT_CLOSE+26
        12 000275   000777 376007                    ANQ     511,DL
        12 000276   000002 116007                    CMPQ    2,DL
        12 000277   000342 601000 12                 TNZ     s:7705
        12 000300   000001 470400 xsym               LDP0    OCB+1
        12 000301   000026 236100                    LDQ     22,,PR0
        12 000302   000001 116000 11                 CMPQ    MOP_6_DIGITS+1
        12 000303   000342 601000 12                 TNZ     s:7705

      454     7684    1            THEN                           /* We have written to the JOB Entry   */
      455     7685                                                /* system.                            */
      456     7686    2            DO;                            /* Output a message giving JOB ID     */

      457     7687    2               CALL VPD$FINISH_NLIST;      /* Take care of dangling name list    */

   7687 12 000304   000002 631400 xsym               EPPR1   B_VECTNIL+2
        12 000305   000000 701000 xent               TSX1    VPD$FINISH_NLIST
        12 000306   000000 011000                    NOP     0

      458     7688    2               IF TEST_MODE=0

   7688 12 000307   000000 235000 xsym               LDA     TEST_MODE
        12 000310   000330 601000 12                 TNZ     s:7700

      459     7689    2                THEN
      460     7690    2                  IF OCB.DCBPTR$->F$DCB.WSN=' '

   7690 12 000311   000001 470400 xsym               LDP0    OCB+1
        12 000312   040000 106500                    CMPC    fill='040'O
        12 000313   000027 000010                    ADSC9   23,,PR0                  cn=0,n=8
        12 000314   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
PL6.E3A0      #006=VPD$CLOSE_OUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:24 Page:119  
        12 000315   000324 601000 12                 TNZ     s:7698

      461     7691    2                   THEN                    /* A local JOB entry, SYSID available */
      462     7692    2                     CALL EDITCHAR(JOB_MESS.ID,

   7692 12 000316   000036 471400 10                 LDP1    DCB$
        12 000317   000000 024500                    MVNE
        12 000320   100010 230006                    NDSC9   8,,PR1                   cn=1,s=nosgn,sf=0,n=6
        12 000321   000000 000002 11                 ADSC9   MOP_6_DIGITS             cn=0,n=2
        12 000322   000040 600006 10                 ADSC9   JOB_MESS+1               cn=3,n=6
        12 000323   000333 710000 12                 TRA     s:7701

      463     7693    2                       0,
      464     7694    2                       6,
      465     7695    2                       MOP_6_DIGITS,
      466     7696    2                       SUBSTR(DCB$->F$DCB.NAME.C,0,6));
      467     7697    2                   ELSE                    /* A remote JOB entry, SYSID unknown  */
      468     7698    2                     JOB_MESS.ID = 'remote';

   7698 12 000324   040000 100400                    MLR     fill='040'O
        12 000325   000002 000006 11                 ADSC9   MOP_6_DIGITS+2           cn=0,n=6
        12 000326   000040 600006 10                 ADSC9   JOB_MESS+1               cn=3,n=6
        12 000327   000333 710000 12                 TRA     s:7701

      469     7699    2                ELSE                       /* Test mode, don't give SYSID        */
      470     7700    2                  JOB_MESS.ID = 'TEST';

   7700 12 000330   040000 100400                    MLR     fill='040'O
        12 000331   000004 000004 11                 ADSC9   MOP_6_DIGITS+4           cn=0,n=4
        12 000332   000040 600006 10                 ADSC9   JOB_MESS+1               cn=3,n=6

      471     7701    2               FPT_WRITE_ME.BUF_ = VECTOR(JOB_MESS);

   7701 12 000333   000022 237000 13                 LDAQ    18
        12 000334   000004 757000 xsym               STAQ    FPT_WRITE_ME+4

      472     7702    2               FPT_WRITE_ME.V.DVBYTE.VFC# = %YES#;
PL6.E3A0      #006=VPD$CLOSE_OUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:24 Page:120  

   7702 12 000335   100000 236003                    LDQ     32768,DU
        12 000336   000013 256000 xsym               ORSQ    FPT_WRITE_ME+11

      473     7703    2               CALL M$WRITE(FPT_WRITE_ME);

   7703 12 000337   000000 630400 xsym               EPPR0   FPT_WRITE_ME
        12 000340   040001 713400                    CLIMB   write
        12 000341   401400 401760                    pmme    nvectors=4

      474     7704    2               END;

      475     7705    1           IF OCB.FLAVOR.TAPE

   7705 12 000342   000256 236000 xsym               LDQ     OCB+174
        12 000343   004000 316003                    CANQ    2048,DU
        12 000344   000353 601000 12                 TNZ     s:7710
        12 000345   000036 470400 10                 LDP0    DCB$
        12 000346   000026 220100                    LDX0    22,,PR0
        12 000347   000005 100000 11                 CMPX0   MOP_6_DIGITS+5
        12 000350   000353 600000 12                 TZE     s:7710
        12 000351   000006 100000 11                 CMPX0   MOP_6_DIGITS+6
        12 000352   000420 601000 12                 TNZ     s:7724

      476     7706    1             OR SUBSTR(DCB$ -> F$DCB.RES,0,2) = 'FT'
      477     7707    1             OR SUBSTR(DCB$ -> F$DCB.RES,0,2) = 'MT'
      478     7708    1            THEN                           /* We must stash VOL and test SN list */
      479     7709    2            DO;

      480     7710    2               CALL VPD$CHECK_VOL(OUT_SN,0,OCB.DCBNM,,1); /* Check for VOL trans */

   7710 12 000353   000024 236000 13                 LDQ     20
        12 000354   200022 756100                    STQ     TEXTC+14,,AUTO
        12 000355   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000356   000025 235000 13                 LDA     21
        12 000357   200020 757100                    STAQ    TEXTC+12,,AUTO
        12 000360   000026 237000 13                 LDAQ    22
PL6.E3A0      #006=VPD$CLOSE_OUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:24 Page:121  
        12 000361   200016 757100                    STAQ    TEXTC+10,,AUTO
        12 000362   200016 630500                    EPPR0   TEXTC+10,,AUTO
        12 000363   000023 631400 xsym               EPPR1   B_VECTNIL+19
        12 000364   000000 701000 xent               TSX1    VPD$CHECK_VOL
        12 000365   000000 011000                    NOP     0

      481     7711    2               IF OUT_SN.COUNT ~= CLOSE_SN.COUNT

   7711 12 000366   000000 236000 xsym               LDQ     OUT_SN
        12 000367   000045 116000 10                 CMPQ    CLOSE_SN
        12 000370   000420 600000 12                 TZE     s:7724

      482     7712    2                THEN                       /* SN list grew, report new list      */
      483     7713    3                DO;

      484     7714    3                   TEXTC.TEXT = CLOSE_SN.SNLIST;

   7714 12 000371   040100 100400                    MLR     fill='040'O
        12 000372   000046 000037 10                 ADSC9   CLOSE_SN+1               cn=0,n=31
        12 000373   200005 000037                    ADSC9   TEXTC+1,,AUTO            cn=0,n=31

      485     7715    3                   TEXTC.C = CLOSE_SN.COUNT * 6;

   7715 12 000374   000045 236000 10                 LDQ     CLOSE_SN
        12 000375   000006 402007                    MPY     6,DL
        12 000376   000033 736000                    QLS     27
        12 000377   200004 756100                    STQ     TEXTC,,AUTO

      486     7716    3                   CALL VPL$ERR_PROC(0,190,'04'O,,VECTOR(TEXTC));

   7716 12 000400   000030 235000 13                 LDA     24
        12 000401   200016 452500                    STP2    TEXTC+10,,AUTO
        12 000402   200016 236100                    LDQ     TEXTC+10,,AUTO
        12 000403   000004 036003                    ADLQ    4,DU
        12 000404   200020 757100                    STAQ    TEXTC+12,,AUTO
        12 000405   200020 630500                    EPPR0   TEXTC+12,,AUTO
        12 000406   200026 450500                    STP0    TEXTC+18,,AUTO
PL6.E3A0      #006=VPD$CLOSE_OUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:24 Page:122  
        12 000407   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000410   000033 235000 13                 LDA     27
        12 000411   200024 757100                    STAQ    TEXTC+16,,AUTO
        12 000412   000034 237000 13                 LDAQ    28
        12 000413   200022 757100                    STAQ    TEXTC+14,,AUTO
        12 000414   200022 630500                    EPPR0   TEXTC+14,,AUTO
        12 000415   000023 631400 xsym               EPPR1   B_VECTNIL+19
        12 000416   000000 701000 xent               TSX1    VPL$ERR_PROC
        12 000417   000000 011000                    NOP     0

      487     7717        /*E* ERROR:   VPD-0190
      488     7718             MESSAGE: Volume list has grown to %U1
      489     7719        */
      490     7720    3                   END;

      491     7721    2                ELSE ;                     /* No SN list change                  */
      492     7722    2               END;

      493     7723    1            ELSE ;                         /* Not a tape, leave VOL & SN list    */
      494     7724    1           RETURN;

   7724 12 000420   000000 702200 xent               TSX2  ! X66_ARET

      495     7725    1   CLOSE_ALT: CALL VPL$ERR_PROC(2,0);

   7725 12 000421   000036 630400 13    CLOSE_ALT    EPPR0   30
        12 000422   000020 631400 xsym               EPPR1   B_VECTNIL+16
        12 000423   000000 701000 xent               TSX1    VPL$ERR_PROC
        12 000424   000000 011000                    NOP     0

      496     7726    1           RETURN;

   7726 12 000425   000000 702200 xent               TSX2  ! X66_ARET
      497     7727    1   END VPD$CLOSE_OUT;
      498     7728        %EOD;

PL6.E3A0      #006=VPD$CLOSE_OUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:24 Page:123  
--  Include file information  --

   FM$FIT.:E05TOU  is referenced.
   F$DCB.:E05TOU  cannot be made into a system file and is referenced.
   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$CLOSE_OUT.
PL6.E3A0      #006=VPD$CLOSE_OUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:24 Page:124  

 **** Variables and constants ****

  ****  Section 010  Data  VPD$CLOSE_OUT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    45-0-0/w STRC(1116)  r     1 CLOSE_SN                  36-0-0/w PTR         r     1 DCB$
     0-0-0/d STRC(1080)  r     1 FPT_CLOSE                 37-0-0/c STRC(207)   r     1 JOB_MESS

  ****  Section 011 RoData VPD$CLOSE_OUT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/b BIT (9)     r     1 MOP_6_DIGITS(0:1)

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @ERR                      *0-0-0/w SBIN        r     1 ERR
     4-0-0/w STRC(315)   r     1 TEXTC

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w EPTR        r     1 BREAK_MESSAGE_REPORTER
     0-0-0/b BIT         r     1 CMD_MASK(0:71)
     0-0-0/w SBIN        r     1 ERR_SAVE_REL               0-0-0/d STRC(432)   r     1 FPT_WRITE_ME
     0-0-0/d STRC(6840)  r     1 OCB                        0-0-0/w STRC(1116)  r     1 OUT_SN
     0-0-0/w SBIN        r     1 TEST_MODE                  0-0-0/w PTR         r     1 USER_LABELS$

  ****  BASED and DCB variables  ****
PL6.E3A0      #006=VPD$CLOSE_OUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:24 Page:125  

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(72)    r     1 B$VECTOR                   0-0-0/w UBIN        r     1 B$WORD
     0-0-0/d ASTR(3528)  r     1 F$DCB                      0-0-0/c ASTR(9)     r     1 TEXT$C


   Procedure VPD$CLOSE_OUT requires 278 words for executable code.
   Procedure VPD$CLOSE_OUT requires 24 words of local(AUTO) storage.
PL6.E3A0      #006=VPD$CLOSE_OUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:24 Page:126  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #006=VPD$CLOSE_OUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:24 Page:127  
          MINI XREF LISTING

B$VECTOR.PTR$
      7336**DCL      7674<<ASSIGN
B$VECTOR.W1.VSIZE#
      7334**DCL      7675<<ASSIGN
B$VECTOR.W2
      7335**DCL      7336--REDEF
B$WORD
      7338**DCL      7671>>IF       7675>>ASSIGN
BREAK_LOC
      5227**DCL      5227--REDEF
CLOSE_ALT
      7725**LABEL    7682--CALLALT
CLOSE_SN
      7358**DCL      7303--DCLINIT
CLOSE_SN.COUNT
      7362**DCL      7711>>IF       7715>>ASSIGN
CLOSE_SN.SN
      7363**DCL      7364--REDEF
CLOSE_SN.SNLIST
      7364**DCL      7714>>ASSIGN
CMD_MASK
      5229**DCL      7679>>IF
DCB$
      7322**DCL      7577<<ASSIGN   7692>>CALLBLT  7705>>IF       7705>>IF
DEF_ICB.FID.STRING
      5825**DCL      5826--REDEF
DEV_ICB.FID.STRING
      5711**DCL      5712--REDEF
EI_KEY.KEY
      5923**DCL      5923--REDEF    5923--REDEF    5923--REDEF
EO_OCB.TYPE
      5423**DCL      5424--REDEF
PL6.E3A0      #006=VPD$CLOSE_OUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:24 Page:128  
ERR
      7277**DCL         6--PROC     7581>>IF
ERR_SAVE_REL
      5222**DCL      7581>>IF
F$DCB.ACTPOS
      7033**DCL      7033--REDEF
F$DCB.ARS
      7008**DCL      7008--REDEF
F$DCB.ATTR
      7026**DCL      7027--REDEF
F$DCB.BORROW
      7041**DCL      7041--REDEF    7041--REDEF    7041--REDEF
F$DCB.DCBNAME.L
      7055**DCL      7055--IMP-SIZ
F$DCB.EOMCHAR
      7012**DCL      7012--REDEF
F$DCB.FLDID
      7036**DCL      7036--REDEF
F$DCB.FORM$
      7030**DCL      7030--REDEF
F$DCB.FSECT
      7046**DCL      7046--REDEF
F$DCB.FSN
      7023**DCL      7023--REDEF    7023--REDEF    7024--REDEF
F$DCB.HEADER$
      7029**DCL      7029--REDEF
F$DCB.IXTNSIZE
      7027**DCL      7027--REDEF
F$DCB.LASTSTA$
      7017**DCL      7017--REDEF
F$DCB.LVL
      7042**DCL      7042--REDEF
F$DCB.NAME.C
      7017**DCL      7017--REDEF    7692>>CALLBLT
F$DCB.NOEOF
      7038**DCL      7038--REDEF
PL6.E3A0      #006=VPD$CLOSE_OUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:24 Page:129  
F$DCB.NRECS
      7028**DCL      7028--REDEF
F$DCB.NRECX
      7047**DCL      7047--REDEF
F$DCB.OHDR
      7039**DCL      7039--REDEF
F$DCB.ORG
      7022**DCL      7022--REDEF
F$DCB.PRECNO
      7045**DCL      7045--REDEF
F$DCB.RCSZ
      7050**DCL      7050--REDEF
F$DCB.RES
      7018**DCL      7018--REDEF    7683>>IF       7705>>IF       7705>>IF
F$DCB.SETX
      7030**DCL      7030--REDEF
F$DCB.TAB$
      7029**DCL      7030--REDEF
F$DCB.TDA
      7044**DCL      7044--REDEF
F$DCB.WSN
      7019**DCL      7019--REDEF    7690>>IF
FPT_CLOSE
      7303**DCL      7682<>CALL
FPT_CLOSE.ACCESS_
      7305**DCL      7644<>CALL     7647<<ASSIGN
FPT_CLOSE.ACSVEH_
      7306**DCL      7652<>CALL     7655<<ASSIGN
FPT_CLOSE.NAME_
      7304**DCL      7606<<ASSIGN   7609<<ASSIGN
FPT_CLOSE.PASS_
      7305**DCL      7614<<ASSIGN   7617<<ASSIGN
FPT_CLOSE.SN_
      7303**DCL      7303--REDEF
FPT_CLOSE.UTL_
      7304**DCL      7304--REDEF    7674--ASSIGN   7675--ASSIGN   7678<<ASSIGN
PL6.E3A0      #006=VPD$CLOSE_OUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:24 Page:130  
FPT_CLOSE.V
      7308**DCL      7303--DCLINIT
FPT_CLOSE.V.ALTBLD#
      7317**DCL      7589<<ASSIGN   7591<<ASSIGN   7681<<ASSIGN
FPT_CLOSE.V.BUPM#
      7316**DCL      7622<<ASSIGN   7627<<ASSIGN   7629<<ASSIGN
FPT_CLOSE.V.DCB#
      7309**DCL      7578<<ASSIGN
FPT_CLOSE.V.DISP#
      7312**DCL      7584<<ASSIGN   7586<<ASSIGN   7683>>IF
FPT_CLOSE.V.EXPIRE#
      7318**DCL      7318--REDEF    7580<<ASSIGN   7635<<ASSIGN
FPT_CLOSE.V.GHSTACS#
      7317**DCL      7667<<ASSIGN   7670<<ASSIGN
FPT_CLOSE.V.LRDL0#
      7319**DCL      7636<<ASSIGN
FPT_CLOSE.V.LSLIDE#
      7319**DCL      7637<<ASSIGN
FPT_CLOSE.V.OPER.CHGATT#
      7309**DCL      7579<<ASSIGN   7605<<ASSIGN   7613<<ASSIGN   7624<<ASSIGN   7633<<ASSIGN   7642<<ASSIGN
      7650<<ASSIGN   7658<<ASSIGN   7666<<ASSIGN
FPT_CLOSE.V.OPER.REBLD#
      7310**DCL      7587<<ASSIGN
FPT_CLOSE.V.OPER.RELG#
      7309**DCL      7594<<ASSIGN   7596<<ASSIGN
FPT_CLOSE.V.SPARE#
      7319**DCL      7638<<ASSIGN
FPT_CLOSE.V.TYPE#
      7316**DCL      7316--REDEF    7659<<ASSIGN   7662<<ASSIGN
FPT_CLOSE.V.XTNSIZE#
      7313**DCL      7313--REDEF    7315--REDEF    7634<<ASSIGN
FPT_CLOSE_EI.SN_
      6764**DCL      6764--REDEF
FPT_CLOSE_EI.UTL_
      6765**DCL      6765--REDEF
FPT_CLOSE_EI.V.EXPIRE#
PL6.E3A0      #006=VPD$CLOSE_OUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:24 Page:131  
      6779**DCL      6779--REDEF
FPT_CLOSE_EI.V.TYPE#
      6777**DCL      6777--REDEF
FPT_CLOSE_EI.V.XTNSIZE#
      6774**DCL      6774--REDEF    6776--REDEF
FPT_CLOSE_PTL.SN_
      6890**DCL      6890--REDEF
FPT_CLOSE_PTL.UTL_
      6891**DCL      6891--REDEF
FPT_CLOSE_PTL.V.EXPIRE#
      6905**DCL      6905--REDEF
FPT_CLOSE_PTL.V.TYPE#
      6903**DCL      6903--REDEF
FPT_CLOSE_PTL.V.XTNSIZE#
      6900**DCL      6900--REDEF    6902--REDEF
FPT_CLOSE_READ.SN_
      6806**DCL      6806--REDEF
FPT_CLOSE_READ.UTL_
      6807**DCL      6807--REDEF
FPT_CLOSE_READ.V.EXPIRE#
      6821**DCL      6821--REDEF
FPT_CLOSE_READ.V.TYPE#
      6819**DCL      6819--REDEF
FPT_CLOSE_READ.V.XTNSIZE#
      6816**DCL      6816--REDEF    6818--REDEF
FPT_CLOSE_SI.SN_
      6974**DCL      6974--REDEF
FPT_CLOSE_SI.UTL_
      6975**DCL      6975--REDEF
FPT_CLOSE_SI.V.EXPIRE#
      6989**DCL      6989--REDEF
FPT_CLOSE_SI.V.TYPE#
      6987**DCL      6987--REDEF
FPT_CLOSE_SI.V.XTNSIZE#
      6984**DCL      6984--REDEF    6986--REDEF
FPT_CLOSE_STD.SN_
PL6.E3A0      #006=VPD$CLOSE_OUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:24 Page:132  
      6932**DCL      6932--REDEF
FPT_CLOSE_STD.UTL_
      6933**DCL      6933--REDEF
FPT_CLOSE_STD.V.EXPIRE#
      6947**DCL      6947--REDEF
FPT_CLOSE_STD.V.TYPE#
      6945**DCL      6945--REDEF
FPT_CLOSE_STD.V.XTNSIZE#
      6942**DCL      6942--REDEF    6944--REDEF
FPT_CLSEI_FT.SN_
      6848**DCL      6848--REDEF
FPT_CLSEI_FT.UTL_
      6849**DCL      6849--REDEF
FPT_CLSEI_FT.V.EXPIRE#
      6863**DCL      6863--REDEF
FPT_CLSEI_FT.V.TYPE#
      6861**DCL      6861--REDEF
FPT_CLSEI_FT.V.XTNSIZE#
      6858**DCL      6858--REDEF    6860--REDEF
FPT_OPEN_EI.ACSVEH_
      6419**DCL      6420--REDEF
FPT_OPEN_EI.ALTKEYS_
      6425**DCL      6426--REDEF    6426--REDEF
FPT_OPEN_EI.HDR_
      6424**DCL      6425--REDEF
FPT_OPEN_EI.TAB_
      6423**DCL      6424--REDEF
FPT_OPEN_EI.UHL_
      6417**DCL      6418--REDEF    6418--REDEF
FPT_OPEN_EI.V.FSN#
      6457**DCL      6457--REDEF    6457--REDEF
FPT_OPEN_EI.WSN_
      6423**DCL      6423--REDEF
FPT_OPEN_EI_SAVE.ACSVEH_
      6528**DCL      6529--REDEF
FPT_OPEN_EI_SAVE.ALTKEYS_
PL6.E3A0      #006=VPD$CLOSE_OUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:24 Page:133  
      6534**DCL      6535--REDEF    6535--REDEF
FPT_OPEN_EI_SAVE.HDR_
      6533**DCL      6534--REDEF
FPT_OPEN_EI_SAVE.TAB_
      6532**DCL      6533--REDEF
FPT_OPEN_EI_SAVE.UHL_
      6526**DCL      6527--REDEF    6527--REDEF
FPT_OPEN_EI_SAVE.V.FSN#
      6566**DCL      6566--REDEF    6566--REDEF
FPT_OPEN_EI_SAVE.WSN_
      6532**DCL      6532--REDEF
FPT_OPEN_OUT.ACSVEH_
      6310**DCL      6311--REDEF
FPT_OPEN_OUT.ALTKEYS_
      6316**DCL      6317--REDEF    6317--REDEF
FPT_OPEN_OUT.HDR_
      6315**DCL      6316--REDEF
FPT_OPEN_OUT.TAB_
      6314**DCL      6315--REDEF
FPT_OPEN_OUT.UHL_
      6308**DCL      6309--REDEF    6309--REDEF
FPT_OPEN_OUT.V.FSN#
      6348**DCL      6348--REDEF    6348--REDEF
FPT_OPEN_OUT.WSN_
      6314**DCL      6314--REDEF
FPT_OPEN_OUT_SAVE.ACSVEH_
      6201**DCL      6202--REDEF
FPT_OPEN_OUT_SAVE.ALTKEYS_
      6207**DCL      6208--REDEF    6208--REDEF
FPT_OPEN_OUT_SAVE.HDR_
      6206**DCL      6207--REDEF
FPT_OPEN_OUT_SAVE.TAB_
      6205**DCL      6206--REDEF
FPT_OPEN_OUT_SAVE.UHL_
      6199**DCL      6200--REDEF    6200--REDEF
FPT_OPEN_OUT_SAVE.V.FSN#
PL6.E3A0      #006=VPD$CLOSE_OUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:24 Page:134  
      6239**DCL      6239--REDEF    6239--REDEF
FPT_OPEN_OUT_SAVE.WSN_
      6205**DCL      6205--REDEF
FPT_READ_STD.STATION_
      6629**DCL      6630--REDEF
FPT_READ_STD.V.DVBYTE.REREAD#
      6641**DCL      6641--REDEF
FPT_READ_STD.V.INDX#
      6639**DCL      6639--REDEF
FPT_READ_UC.STATION_
      6590**DCL      6591--REDEF
FPT_READ_UC.V.DVBYTE.REREAD#
      6602**DCL      6602--REDEF
FPT_READ_UC.V.INDX#
      6600**DCL      6600--REDEF
FPT_WRITE_ME
      6696**DCL      7703<>CALL
FPT_WRITE_ME.BUF_
      6696**DCL      7701<<ASSIGN
FPT_WRITE_ME.STATION_
      6698**DCL      6698--REDEF
FPT_WRITE_ME.V.DVBYTE.VFC#
      6705**DCL      6705--REDEF    7702<<ASSIGN
FPT_WRITE_OUT.STATION_
      6729**DCL      6729--REDEF
FPT_WRITE_OUT.V.DVBYTE.VFC#
      6736**DCL      6736--REDEF
FPT_WRITE_UC.STATION_
      6667**DCL      6667--REDEF
FPT_WRITE_UC.V.DVBYTE.VFC#
      6674**DCL      6674--REDEF
FROM_SN.SN
      5573**DCL      5574--REDEF
GETCMD.OUT$
      4780**DCL      4786--REDEF
ICB.FID.STRING
PL6.E3A0      #006=VPD$CLOSE_OUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:24 Page:135  
      5597**DCL      5598--REDEF
IFSFA_PARAM.EOMCHAR#
      5952**DCL      5953--REDEF
IFSFA_PARAM.SIG1
      5946**DCL      5946--REDEF
IFSFA_PARAM.SIG2
      5946**DCL      5947--REDEF
IN_RES
      5519**DCL      5519--REDEF
IN_SN.SN
      5535**DCL      5536--REDEF
JOB_MESS
      7343**DCL      7701--ASSIGN
JOB_MESS.ID
      7346**DCL      7692<<CALLBLT  7698<<ASSIGN   7700<<ASSIGN
M$WRITE
        38**DCL-ENT  7703--CALL
MOP_6_DIGITS
      7342**DCL      7692>>CALLBLT
OCB.ACCESS_FLG
      5314**DCL      7640>>IF
OCB.ACSVEH_FLG
      5312**DCL      7648>>IF
OCB.ALTBLD
      5301**DCL      7588>>IF       7590>>IF       7679>>IF
OCB.BACKUP
      5294**DCL      7620>>IF       7625>>IF
OCB.DCBNM
      5236**DCL      7578>>ASSIGN   7710<>CALL
OCB.DCBPTR$
      5237**DCL      7577>>ASSIGN   7683>>IF       7690>>IF
OCB.ERR_SAVE
      5371**DCL      7581>>IF
OCB.EXPIRE
      5299**DCL      7631>>IF       7635>>ASSIGN
OCB.FLAVOR.TAPE
PL6.E3A0      #006=VPD$CLOSE_OUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:24 Page:136  
      5331**DCL      7671>>IF       7705>>IF
OCB.GHSTACS
      5283**DCL      7664>>IF       7667>>ASSIGN
OCB.LRDL0
      5295**DCL      7631>>IF       7636>>ASSIGN
OCB.LSLIDE
      5296**DCL      7631>>IF       7637>>ASSIGN
OCB.MOD_NAME
      5302**DCL      7606--ASSIGN
OCB.MOD_NAME.LEN
      5303**DCL      7602>>IF
OCB.MOD_PASS
      5305**DCL      7614--ASSIGN
OCB.MOD_PASS_FLG
      5306**DCL      7610>>IF
OCB.REBUILD
      5300**DCL      7587>>ASSIGN
OCB.RELEASE
      5280**DCL      7592>>IF
OCB.SPARE
      5297**DCL      7631>>IF       7638>>ASSIGN
OCB.TYPE
      5281**DCL      5282--REDEF    7659>>ASSIGN
OCB.TYPE_BIT
      5282**DCL      7656>>IF
OCB.XTNSIZE
      5298**DCL      7631>>IF       7634>>ASSIGN
OFSFA_PARAM.EOMCHAR#
      5982**DCL      5983--REDEF
OFSFA_PARAM.SIG1
      5976**DCL      5976--REDEF
OFSFA_PARAM.SIG2
      5976**DCL      5977--REDEF
OUT_SN
      5548**DCL      7710<>CALL
OUT_SN.COUNT
PL6.E3A0      #006=VPD$CLOSE_OUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:24 Page:137  
      5552**DCL      7711>>IF
OUT_SN.SN
      5553**DCL      5554--REDEF
SPEC_BUF
      5231**DCL      5231--REDEF
TEST_MODE
      5226**DCL      7688>>IF
TEXT$C.LEN
      7340**DCL      7341--IMP-SIZ
TEXTC
      7366**DCL      7716--CALL
TEXTC.C
      7367**DCL      7715<<ASSIGN
TEXTC.TEXT
      7368**DCL      7714<<ASSIGN
USER_LABELS$
      5224**DCL      7671>>IF       7671>>IF       7674>>ASSIGN   7675>>ASSIGN
VPC$CALL_CLOSE
      7371**DCL-ENT  7682--CALL
VPD$CHECK_VOL
      7391**DCL-ENT  7710--CALL
VPD$FINISH_NLIST
      7412**DCL-ENT  7687--CALL
VPD$PROCESS_CONTROLS
      7444**DCL-ENT  7644--CALL     7652--CALL
VPL$ERR_PROC
      7551**DCL-ENT  7716--CALL     7725--CALL

PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:138  
      499        1        /*T***********************************************************/
      500        2        /*T*                                                         */
      501        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      502        4        /*T*                                                         */
      503        5        /*T***********************************************************/
      504        6        VPD$PROCESS_CONTROLS: PROC (CODE,RET_VECT);
      505        7        /*I* NAME: VPD$PROCESS_CONTROLS
      506        8             PURPOSE: To process access and vehicle controls into a usable form.
      507        9             CALL: CALL VPD$PROCESS_CONTROLS(CODE,RET_VECT);
      508       10             DESCRIPTION: Applies access or vehicle control information in the
      509       11                          OCB to an internal table.  A vector surrounding this
      510       12                          table is returned.  REPLACE flags in the OCB determine
      511       13                          whether or not to include existing controls.
      512       14                          CODE = 9 for ACCESS controls.
      513       15                          CODE =10 for ACSVEHICLE controls.
      514       16        */
      515       17        %INCLUDE VP_DATA_R;
      516     7004        %INCLUDE FM$FIT;
      517     7225        %VP_ENTRIES(OMIT=VPD$PROCESS_CONTROLS);
      518     7433        /* Internal procedure to merge new controls into old                          */
      519     7434    1   DCL CODE UBIN WORD;                     /* 9 = ACCESS, 10 = ACSVEH            */
      520     7435    1   DCL RET_VECT VECTOR;
      521     7436        %CODE09;                                /* Generate structure of old ACCESS   */
      522     7440        %CODE10;                                /* Generate structure of old ACSVEH   */
      523     7444        %FM$FIT;                                /* Generate FIT structure             */
      524     7447    1   DCL XSF$LOCCODE ENTRY (2) ALTRET;       /* Modify CODE before return          */
      525     7448    1   DCL P$ PTR STATIC;
      526     7449    1   DCL FILL$ PTR STATIC;
      527     7450    1   DCL EXAM$ PTR STATIC;
      528     7451    1   DCL PTR$ PTR STATIC;
      529     7452    1   DCL PTR1$ PTR STATIC;
      530     7453    1   DCL ACS$ PTR STATIC;
      531     7454    1   DCL 1 ACS$VEH BASED,                    /* Template for old and destination   */
      532     7455    1         2 CNTLS BIT(18),
      533     7456    1         2 TEXTC,
      534     7457    1           3 LEN UBIN BYTE UNAL,
      535     7458    1           3 STRING CHAR(ACS$VEH.TEXTC.LEN);
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:139  
      536     7459    1   DCL 1 ACS$NEW BASED,                    /* New ACSVEH controls                */
      537     7460    1         2 SPEC_TYPE UBIN(9) UNAL,
      538     7461    1         2 CNTLS BIT(18),
      539     7462    1         2 TEXTC,
      540     7463    1           3 LEN UBIN BYTE UNAL,
      541     7464    1           3 STRING CHAR(ACS$NEW.TEXTC.LEN);
      542     7465    1   DCL 1 ACCESS_AREA STATIC,               /* Workspace for account access ctrl  */
      543     7466    1         2 LEN UBIN WORD,
      544     7467    1         2 LIST(0:49),                     /* 50 entries                         */
      545     7468    1           3 CNTLS BIT(18),
      546     7469    1           3 ACCT CHAR(8);
      547     7470    1   DCL 1 ACSVEH_AREA STATIC,               /* Workspace for access vehicle list  */
      548     7471    1         2 LEN UBIN WORD,
      549     7472    1         2 LIST(0:149) UBIN WORD;          /* 150 words for FIDs and CNTLS       */
      550     7473    1   DCL J UBIN WORD STATIC;
      551     7474    1   DCL I UBIN WORD STATIC;
      552     7475    1   DCL K UBIN WORD STATIC;
      553     7476    1   DCL TOTAL_CTLS UBIN WORD STATIC;
      554     7477    1   DCL CODE_IDX SBIN WORD;
      555     7478        /**/
      556     7479    1           PTR$ = FPARAM$;                 /* Scratch copy of FPARAM pointer     */
      557     7480    2           DO CASE (CODE -8);
      558     7481    2            CASE (1);                      /* ACCESS                             */
      559     7482    2              RET_VECT = VECTOR(ACCESS_AREA);
      560     7483    2              IF OCB.ACCESS_REPLACE
      561     7484    2               THEN                        /* Ignore the old controls            */
      562     7485    3               DO;
      563     7486    4                  DO I=0 TO (OCB.ACCESS.LEN/11 - 1);
      564     7487    4                     IF OCB.ACCESS.LIST.SPEC_TYPE(I) = 2 /* PLUS                 */
      565     7488    4                       OR OCB.ACCESS.LIST.SPEC_TYPE(I) = 4 /* MINUS              */
      566     7489    4                      THEN
      567     7490    4                        GOTO PLUS_MINUS;
      568     7491    4                     END;
      569     7492    3                  GOTO NO_OLD_ACCESS;
      570     7493    3   PLUS_MINUS:
      571     7494    4                  DO I=1 TO (OCB.ACCESS.LEN/11 - 1);
      572     7495    4                     IF OCB.ACCESS.LIST.SPEC_TYPE(I) = 1
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:140  
      573     7496    4                      THEN
      574     7497    4                        OCB.ACCESS.LIST.SPEC_TYPE(I) = 2; /* FORCE PLUS          */
      575     7498    4                     END;
      576     7499    3                  IF OCB.ACCESS.LIST.SPEC_TYPE(0)~=1 THEN
      577     7500    3                     OCB.ACCESS_REPLACE = %NO#;
      578     7501    3                  END;
      579     7502    2              CODE_IDX = CODE;             /* Will be changed by XSF$LOCCODE     */
      580     7503    2              CALL XSF$LOCCODE(PTR$,CODE_IDX) ALTRET(NO_OLD_ACCESS); /* -> ACC   */
      581     7504    2              TOTAL_CTLS = FPARAM$ -> FM$FIT.CODES.NDW(CODE_IDX)*4/10; /* # CNTLS */
      582     7505    2              IF TOTAL_CTLS = 0 OR OCB.ACCESS_REPLACE
      583     7506    2               THEN                        /* No valid entries                   */
      584     7507    2                 GOTO NO_OLD_ACCESS;
      585     7508    2   OLD_ACCESS: ;                           /* Must move old ACCESS to workspace  */
      586     7509    3              DO I=0 TO (TOTAL_CTLS -1);   /* For each old ACCESS                */
      587     7510    3                 ACCESS_AREA.LIST.CNTLS(I) = PTR$ -> CODE09.FFLG;
      588     7511    3                 ACCESS_AREA.LIST.ACCT(I) = PTR$ -> CODE09.ACCT;
      589     7512    3                 PTR$ = PINCRC(PTR$,10);   /* Bump pointer to next old ACCESS    */
      590     7513    3                 END;
      591     7514    3              DO WHILE ('0'B);             /* NEVER DO                           */
      592     7515    3   NO_OLD_ACCESS: TOTAL_CTLS = 0;          /* Clear ACCESS area, no controls     */
      593     7516    3                 END;                      /* END NEVER DO                       */
      594     7517    2   MERGE_ACCESS: ;                         /* Now it's time to merge new ACCESS  */
      595     7518    3              DO I=0 TO (OCB.ACCESS.LEN/11 -1); /* For each new ACCESS           */
      596     7519    4                 DO CASE (OCB.ACCESS.LIST.SPEC_TYPE(I));
      597     7520    4                  CASE(1);                 /* Normal control, 'use this'         */
      598     7521    4                    ACCESS_AREA.LIST.ACCT(TOTAL_CTLS) = OCB.ACCESS.LIST.ACCT(I);
      599     7522    4                    ACCESS_AREA.LIST.CNTLS(TOTAL_CTLS) = OCB.ACCESS.LIST.CNTLS(I);
      600     7523    4                    TOTAL_CTLS = TOTAL_CTLS +1;
      601     7524    4                  CASE(2);                 /* Edit by adding to previous ACCESS  */
      602     7525    5                    DO J = 0 TO (TOTAL_CTLS -1); /* For each existing ACCESS     */
      603     7526    5                       IF ACCESS_AREA.LIST.ACCT(J) = OCB.ACCESS.LIST.ACCT(I)
      604     7527    5                        THEN               /* Already some controls for this     */
      605     7528    6                        DO;
      606     7529    6                           ACCESS_AREA.LIST.CNTLS(J) = ACCESS_AREA.LIST.CNTLS(J)
      607     7530    6                             | OCB.ACCESS.LIST.CNTLS(I);
      608     7531    6                           GOTO FIN_ACCESS;
      609     7532    6                           END;
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:141  
      610     7533    5                       END;
      611     7534    4                    ACCESS_AREA.LIST.ACCT(TOTAL_CTLS) = OCB.ACCESS.LIST.ACCT(I);
      612     7535    4                    ACCESS_AREA.LIST.CNTLS(TOTAL_CTLS) = OCB.ACCESS.LIST.CNTLS(I);
      613     7536    4                    TOTAL_CTLS = TOTAL_CTLS +1;
      614     7537    4                  CASE(3,4);               /* Edit by removing previous ACC      */
      615     7538    5                    DO J = 0 TO (TOTAL_CTLS -1); /* For each existing ACCESS     */
      616     7539    5                       IF ACCESS_AREA.LIST.ACCT(J) = OCB.ACCESS.LIST.ACCT(I)
      617     7540    5                        THEN               /* We found the controls to delete    */
      618     7541    5                          IF OCB.ACCESS.LIST.SPEC_TYPE(I) = 3
      619     7542    5                           THEN            /* Remove only select controls        */
      620     7543    6                           DO;
      621     7544    6                              ACCESS_AREA.LIST.CNTLS(J) = ACCESS_AREA.LIST.CNTLS(J)
      622     7545    6                                & ~OCB.ACCESS.LIST.CNTLS(I);
      623     7546    6                              GOTO FIN_ACCESS;
      624     7547    6                              END;
      625     7548    5                           ELSE            /* Remove entire entry                */
      626     7549    6                           DO;
      627     7550    7                              DO K = J TO (TOTAL_CTLS -2);
      628     7551    7                                 ACCESS_AREA.LIST(K) = ACCESS_AREA.LIST(K +1);
      629     7552    7                                 END;
      630     7553    6                              TOTAL_CTLS = TOTAL_CTLS -1;
      631     7554    6                              GOTO FIN_ACCESS;
      632     7555    6                              END;
      633     7556    5                       END;
      634     7557    4                    CALL VPL$ERR_PROC(1,30,'04'O,,,,M$EI#); /* WARNING ONLY      */
      635     7558        /*E* ERROR:   VPD-00030
      636     7559             MESSAGE: No such control to remove from %UF
      637     7560        */
      638     7561    4                  END;                     /* END DO CASE                        */
      639     7562    3   FIN_ACCESS:   ;                         /* Finished with THIS NEW ACCESS      */
      640     7563    3                 END;
      641     7564    2              ACCESS_AREA.LEN = TOTAL_CTLS*10; /* LENGTH IN BYTES                */
      642     7565    2              ACCESS_AREA.LEN = (ACCESS_AREA.LEN +3)/4; /* LENGTH IN WORDS       */
      643     7566        %EJECT;
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:142  
      644     7567    2            CASE (2);                      /* ACSVEH                             */
      645     7568    2              RET_VECT = VECTOR(ACSVEH_AREA);
      646     7569    2              ACS$ = ADDR(ACSVEH_AREA.LIST);
      647     7570    2              FILL$ = ACS$;
      648     7571    2              IF OCB.ACSVEH_REPLACE
      649     7572    2               THEN                        /* Ignore the old controls            */
      650     7573    3               DO;
      651     7574    3                  I=0;
      652     7575    4                  DO WHILE(I+4<OCB.ACSVEH.LEN);
      653     7576    4                     P$=PINCRC(ADDR(OCB.ACSVEH.LIST),I);
      654     7577    4                     IF P$->ACS$NEW.SPEC_TYPE = 2
      655     7578    4                       OR P$->ACS$NEW.SPEC_TYPE=4
      656     7579    4                      THEN
      657     7580    4                        GOTO ACS_PLUS_MINUS;
      658     7581    4                     I=I+P$->ACS$NEW.TEXTC.LEN+4;
      659     7582    4                     END;
      660     7583    3                  GOTO NO_OLD_ACSVEH;
      661     7584    3   ACS_PLUS_MINUS:
      662     7585    3                  I=0;
      663     7586    4                  DO WHILE(I+4<OCB.ACSVEH.LEN);
      664     7587    4                     P$=PINCRC(ADDR(OCB.ACSVEH.LIST),I);
      665     7588    4                     IF P$->ACS$NEW.SPEC_TYPE = 1 AND I~=0
      666     7589    4                      THEN
      667     7590    4                        P$->ACS$NEW.SPEC_TYPE = 2;
      668     7591    4                     I=I+P$->ACS$NEW.TEXTC.LEN+4;
      669     7592    4                     END;
      670     7593    3                  IF ADDR(OCB.ACSVEH.LIST)->ACS$NEW.SPEC_TYPE~=1 THEN
      671     7594    3                     OCB.ACSVEH_REPLACE = %NO#;
      672     7595    3                  END;
      673     7596    2              IF OCB.ACSVEH_REPLACE THEN GOTO NO_OLD_ACSVEH;
      674     7597    2              CODE_IDX = CODE;             /* Will be changed by XSF$LOCCODE     */
      675     7598    2              CALL XSF$LOCCODE(PTR$,CODE_IDX) ALTRET(NO_OLD_ACSVEH); /* -> ACS   */
      676     7599    2              TOTAL_CTLS = FPARAM$ -> FM$FIT.CODES.NDW(CODE_IDX)*4; /* Len bytes */
      677     7600    2   OLD_ACSVEH: ;                           /* Must move old ACSVEH to workspace  */
      678     7601    2              I = 0;                       /* Byte index                         */
      679     7602    3              DO WHILE (I +3 < TOTAL_CTLS); /* For each old ACSVEH               */
      680     7603    3                 FILL$ -> ACS$VEH.CNTLS = PTR$ -> ACS$VEH.CNTLS;
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:143  
      681     7604    3                 FILL$ -> ACS$VEH.TEXTC.LEN = PTR$ -> ACS$VEH.TEXTC.LEN;
      682     7605    3                 FILL$ -> ACS$VEH.TEXTC.STRING = PTR$ -> ACS$VEH.TEXTC.STRING;
      683     7606    3                 I = I + PTR$ -> ACS$VEH.TEXTC.LEN +3;
      684     7607    3                 PTR$ = PINCRC(PTR$,PTR$ -> ACS$VEH.TEXTC.LEN +3); /* ->  old ACS */
      685     7608    3                 FILL$ = PINCRC(ACS$,I);
      686     7609    3                 END;
      687     7610    2              TOTAL_CTLS = I;
      688     7611    3              DO WHILE ('0'B);             /* NEVER DO                           */
      689     7612    3   NO_OLD_ACSVEH: TOTAL_CTLS = 0;          /* Clear ACSVEH area                  */
      690     7613    3                 END;                      /* END NEVER DO                       */
      691     7614    2   MERGE_ACSVEH: ;                         /* Now it's time to merge new ACSVEH  */
      692     7615    2              I = 0;
      693     7616    3              DO WHILE (I +4 < OCB.ACSVEH.LEN); /* For each new ACSVEH           */
      694     7617    3                 IF TOTAL_CTLS > LENGTHC(ACSVEH_AREA.LIST)
      695     7618    3                  THEN
      696     7619    3                    GOTO TOO_MANY;
      697     7620    3                 EXAM$ = PINCRC(ADDR(OCB.ACSVEH.LIST),I);
      698     7621    4                 DO CASE (EXAM$ -> ACS$NEW.SPEC_TYPE);
      699     7622    4                  CASE(1);                 /* Normal control, 'use this'         */
      700     7623    4   STUFF_ACS:       FILL$ -> ACS$VEH.CNTLS = EXAM$ -> ACS$NEW.CNTLS;
      701     7624    4                    FILL$ -> ACS$VEH.TEXTC.LEN = EXAM$ -> ACS$NEW.TEXTC.LEN;
      702     7625    4                    FILL$ -> ACS$VEH.TEXTC.STRING = EXAM$ -> ACS$NEW.TEXTC.STRING;
      703     7626    4                    TOTAL_CTLS = TOTAL_CTLS + EXAM$ -> ACS$NEW.TEXTC.LEN +3;
      704     7627    4                    FILL$ = PINCRC(ACS$,TOTAL_CTLS);
      705     7628    4                  CASE(2);                 /* Edit by adding to previous ACSVEH  */
      706     7629    4                    PTR$ = ACS$;
      707     7630    5                    DO WHILE (PTR$ < FILL$); /* For each existing ACSVEH         */
      708     7631    5                       IF EXAM$ -> ACS$NEW.TEXTC.STRING = PTR$ -> ACS$VEH.TEXTC.STRING
      709     7632    5                        THEN               /* Already some controls for this     */
      710     7633    6                        DO;
      711     7634    6                           PTR$ -> ACS$VEH.CNTLS = PTR$ -> ACS$VEH.CNTLS
      712     7635    6                             | EXAM$ -> ACS$NEW.CNTLS;
      713     7636    6                           GOTO FIN_ACSVEH;
      714     7637    6                           END;
      715     7638    5                       PTR$ = PINCRC(PTR$,PTR$ -> ACS$VEH.TEXTC.LEN +3);
              7638                                /* Next OLD ACS */
      716     7639    5                       END;
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:144  
      717     7640    4                    GOTO STUFF_ACS;
      718     7641    4                  CASE(3,4);               /* Edit by removing an ACSVEHICLS     */
      719     7642    4                    PTR$ = ACS$;
      720     7643    5                    DO WHILE (PTR$ < FILL$); /* For each existing ACSVEH         */
      721     7644    5                       IF EXAM$ -> ACS$NEW.TEXTC.STRING = PTR$ -> ACS$VEH.TEXTC.STRING
      722     7645    5                        THEN               /* We found the controls to delete    */
      723     7646    5                          IF EXAM$ -> ACS$NEW.SPEC_TYPE = 3
      724     7647    5                           THEN            /* Only delete certain bits           */
      725     7648    6                           DO;
      726     7649    6                              PTR$ -> ACS$VEH.CNTLS = PTR$ -> ACS$VEH.CNTLS
      727     7650    6                                & ~EXAM$ -> ACS$NEW.CNTLS;
      728     7651    6                              GOTO FIN_ACSVEH;
      729     7652    6                              END;
      730     7653    5                           ELSE            /* Delete entire entry                */
      731     7654    6                           DO;
      732     7655    6                              PTR1$ = PINCRC(PTR$,PTR$ -> ACS$VEH.TEXTC.LEN +3);
      733     7656    6                              TOTAL_CTLS = TOTAL_CTLS - PTR$ -> ACS$VEH.TEXTC.LEN -3;
      734     7657    7                              DO WHILE (PTR1$ < FILL$);
      735     7658    7                                 PTR$ -> ACS$VEH.CNTLS = PTR1$ -> ACS$VEH.CNTLS;
      736     7659    7                                 PTR$ -> ACS$VEH.TEXTC.LEN = PTR1$ -> ACS$VEH.TEXTC.LEN
              7659                                          ;
      737     7660    7                                 PTR$ -> ACS$VEH.TEXTC.STRING = PTR1$ -> ACS$VEH.TEXTC.
              7660                                          STRING;
      738     7661    7                                 PTR1$ = PINCRC(PTR1$,PTR$ -> ACS$VEH.TEXTC.LEN +3);
      739     7662    7                                 PTR$ = PINCRC(PTR$,PTR$-> ACS$VEH.TEXTC.LEN +3);
      740     7663    7                                 END;
      741     7664    6                              FILL$ = PINCRC(ACS$,TOTAL_CTLS);
      742     7665    6                              GOTO FIN_ACSVEH;
      743     7666    6                              END;
      744     7667    5                       PTR$ = PINCRC(PTR$,PTR$ -> ACS$VEH.TEXTC.LEN +3);
              7667                                /* Next OLD ACS */
      745     7668    5                       END;
      746     7669    4                    CALL VPL$ERR_PROC(1,30,'04'O,,,,M$EI#); /* WARNING ONLY      */
      747     7670    4                  END;                     /* END DO CASE                        */
      748     7671    3   FIN_ACSVEH:   I = I + EXAM$ -> ACS$NEW.TEXTC.LEN +4; /* Count to next NEW ACS */
      749     7672    3                 END;
      750     7673    2              ACSVEH_AREA.LEN = (TOTAL_CTLS +3)/4; /* LENGTH in WORDS            */
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:145  
      751     7674    2            END;                           /* END DO CASE (CODE)                 */
      752     7675    1           IF ACCESS_AREA.LEN > 125 AND CODE=9
      753     7676    1            THEN
      754     7677    1              CALL VPL$ERR_PROC(3,240,'04'O);
      755     7678        /*E*  ERROR:  VPD-00240
      756     7679              MESSAGE: Too many account ACCESS controls.
      757     7680             MESSAGE1: You tried to have more than 50 account ACCESS controls on a file.
      758     7681        */
      759     7682    1           IF ACSVEH_AREA.LEN > 150 AND CODE=10
      760     7683    1            THEN
      761     7684    1   TOO_MANY:  CALL VPL$ERR_PROC(3,250,'04'O);
      762     7685        /*E*  ERROR:  VPD-00250
      763     7686              MESSAGE: Too many vehicle ACCESS controls.
      764     7687             MESSAGE1: You tried to have more than 150 words of vehicle controls.
      765     7688        */
      766     7689    1           RETURN;
      767     7690    1   END VPD$PROCESS_CONTROLS;
      768     7691        %EOD;

PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:146  
--  Include file information  --

   FM$FIT.:E05TOU  is referenced.
   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$PROCESS_CONTROLS.

   Procedure VPD$PROCESS_CONTROLS requires 718 words for executable code.
   Procedure VPD$PROCESS_CONTROLS requires 14 words of local(AUTO) storage.

PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:147  

 Object Unit name= VPD$PROCESS_CONTROLS                       File name= VPD$UTIL.:E05TOU
 UTS= JUL 30 '97 07:25:43.64 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$EI
    2   DCB   even  none     0      0  M$EO
    3   DCB   even  none     0      0  M$EO1
    4   DCB   even  none     0      0  M$ME
    5   DCB   even  none     0      0  M$SI
    6   DCB   even  none     0      0  M$READFILE
    7   DCB   even  none     0      0  M$DO
    8   DCB   even  none     0      0  M$STD1
    9   DCB   even  none     0      0  M$SORT1
   10   Data  even  none   287    437  VPD$PROCESS_CONTROLS
   11   Proc  even  none   718   1316  VPD$PROCESS_CONTROLS
   12  RoData even  none    22     26  VPD$PROCESS_CONTROLS

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    11      0   yes            yes      Std        2  VPD$PROCESS_CONTROLS
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:148  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       2 XSF$LOCCODE
         yes           Std       8 VPL$ERR_PROC
                       nStd      0 X66_AUTO_2
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  BREAK_LOC                             BREAK_MESSAGE_REPORTER
     FPARAM$                               SPEC_BUF                              OCB
     IN_RES                                M$EI                                  M$EI#
     M$EO                                  M$EO1                                 M$ME
     M$SI                                  M$READFILE                            M$DO
     M$STD1                                M$SORT1                               B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:149  


      499        1        /*T***********************************************************/
      500        2        /*T*                                                         */
      501        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      502        4        /*T*                                                         */
      503        5        /*T***********************************************************/
      504        6        VPD$PROCESS_CONTROLS: PROC (CODE,RET_VECT);

      6 11 000000   000000 700200 xent  VPD$PROCESS* TSX0  ! X66_AUTO_2
        11 000001   000016 000002                    ZERO    14,2

      505        7        /*I* NAME: VPD$PROCESS_CONTROLS
      506        8             PURPOSE: To process access and vehicle controls into a usable form.
      507        9             CALL: CALL VPD$PROCESS_CONTROLS(CODE,RET_VECT);
      508       10             DESCRIPTION: Applies access or vehicle control information in the
      509       11                          OCB to an internal table.  A vector surrounding this
      510       12                          table is returned.  REPLACE flags in the OCB determine
      511       13                          whether or not to include existing controls.
      512       14                          CODE = 9 for ACCESS controls.
      513       15                          CODE =10 for ACSVEHICLE controls.
      514       16        */
      515       17        %INCLUDE VP_DATA_R;
      516     7004        %INCLUDE FM$FIT;
      517     7225        %VP_ENTRIES(OMIT=VPD$PROCESS_CONTROLS);
      518     7433        /* Internal procedure to merge new controls into old                          */
      519     7434    1   DCL CODE UBIN WORD;                     /* 9 = ACCESS, 10 = ACSVEH            */
      520     7435    1   DCL RET_VECT VECTOR;
      521     7436        %CODE09;                                /* Generate structure of old ACCESS   */
      522     7440        %CODE10;                                /* Generate structure of old ACSVEH   */
      523     7444        %FM$FIT;                                /* Generate FIT structure             */
      524     7447    1   DCL XSF$LOCCODE ENTRY (2) ALTRET;       /* Modify CODE before return          */
      525     7448    1   DCL P$ PTR STATIC;
      526     7449    1   DCL FILL$ PTR STATIC;
      527     7450    1   DCL EXAM$ PTR STATIC;
      528     7451    1   DCL PTR$ PTR STATIC;
      529     7452    1   DCL PTR1$ PTR STATIC;
      530     7453    1   DCL ACS$ PTR STATIC;
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:150  
      531     7454    1   DCL 1 ACS$VEH BASED,                    /* Template for old and destination   */
      532     7455    1         2 CNTLS BIT(18),
      533     7456    1         2 TEXTC,
      534     7457    1           3 LEN UBIN BYTE UNAL,
      535     7458    1           3 STRING CHAR(ACS$VEH.TEXTC.LEN);
      536     7459    1   DCL 1 ACS$NEW BASED,                    /* New ACSVEH controls                */
      537     7460    1         2 SPEC_TYPE UBIN(9) UNAL,
      538     7461    1         2 CNTLS BIT(18),
      539     7462    1         2 TEXTC,
      540     7463    1           3 LEN UBIN BYTE UNAL,
      541     7464    1           3 STRING CHAR(ACS$NEW.TEXTC.LEN);
      542     7465    1   DCL 1 ACCESS_AREA STATIC,               /* Workspace for account access ctrl  */
      543     7466    1         2 LEN UBIN WORD,
      544     7467    1         2 LIST(0:49),                     /* 50 entries                         */
      545     7468    1           3 CNTLS BIT(18),
      546     7469    1           3 ACCT CHAR(8);
      547     7470    1   DCL 1 ACSVEH_AREA STATIC,               /* Workspace for access vehicle list  */
      548     7471    1         2 LEN UBIN WORD,
      549     7472    1         2 LIST(0:149) UBIN WORD;          /* 150 words for FIDs and CNTLS       */
      550     7473    1   DCL J UBIN WORD STATIC;
      551     7474    1   DCL I UBIN WORD STATIC;
      552     7475    1   DCL K UBIN WORD STATIC;
      553     7476    1   DCL TOTAL_CTLS UBIN WORD STATIC;
      554     7477    1   DCL CODE_IDX SBIN WORD;
      555     7478        /**/
      556     7479    1           PTR$ = FPARAM$;                 /* Scratch copy of FPARAM pointer     */

   7479 11 000002   000000 236000 xsym               LDQ     FPARAM$
        11 000003   000003 756000 10                 STQ     PTR$

      557     7480    2           DO CASE (CODE -8);

   7480 11 000004   200003 470500                    LDP0    @CODE,,AUTO
        11 000005   000000 235100                    LDA     0,,PR0
        11 000006   000010 135007                    SBLA    8,DL
        11 000007   000003 115007                    CMPA    3,DL
        11 000010   000012 602005 11                 TNC     s:7480+6,AL
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:151  
        11 000011   001267 710000 11                 TRA     s:7675
        11 000012   001267 710000 11                 TRA     s:7675
        11 000013   000015 710000 11                 TRA     s:7482
        11 000014   000472 710000 11                 TRA     s:7568

      558     7481    2            CASE (1);                      /* ACCESS                             */

      559     7482    2              RET_VECT = VECTOR(ACCESS_AREA);

   7482 11 000015   000000 237000 12                 LDAQ    0
        11 000016   200004 471500                    LDP1    @RET_VECT,,AUTO
        11 000017   100000 757100                    STAQ    0,,PR1

      560     7483    2              IF OCB.ACCESS_REPLACE

   7483 11 000020   000253 234000 xsym               SZN     OCB+171
        11 000021   000117 605000 11                 TPL     s:7502

      561     7484    2               THEN                        /* Ignore the old controls            */
      562     7485    3               DO;

      563     7486    4                  DO I=0 TO (OCB.ACCESS.LEN/11 - 1);

   7486 11 000022   000434 450000 10                 STZ     I
        11 000023   000047 710000 11                 TRA     s:7491+3

      564     7487    4                     IF OCB.ACCESS.LIST.SPEC_TYPE(I) = 2 /* PLUS                 */

   7487 11 000024   000434 236000 10                 LDQ     I
        11 000025   000013 402007                    MPY     11,DL
        11 000026   000100 101406                    MRL     fill='000'O
        11 000027   000131 000001 xsym               ADSC9   OCB+89,Q                 cn=0,n=1
        11 000030   200006 000004                    ADSC9   CODE_IDX+1,,AUTO         cn=0,n=4
        11 000031   200006 236100                    LDQ     CODE_IDX+1,,AUTO
        11 000032   000002 116007                    CMPQ    2,DL
        11 000033   000057 600000 11                 TZE     PLUS_MINUS
        11 000034   000434 236000 10                 LDQ     I
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:152  
        11 000035   000013 402007                    MPY     11,DL
        11 000036   000100 101406                    MRL     fill='000'O
        11 000037   000131 000001 xsym               ADSC9   OCB+89,Q                 cn=0,n=1
        11 000040   200007 000004                    ADSC9   CODE_IDX+2,,AUTO         cn=0,n=4
        11 000041   200007 236100                    LDQ     CODE_IDX+2,,AUTO
        11 000042   000004 116007                    CMPQ    4,DL
        11 000043   000057 600000 11                 TZE     PLUS_MINUS

      565     7488    4                       OR OCB.ACCESS.LIST.SPEC_TYPE(I) = 4 /* MINUS              */
      566     7489    4                      THEN
      567     7490    4                        GOTO PLUS_MINUS;
      568     7491    4                     END;

   7491 11 000044   000434 235000 10                 LDA     I
        11 000045   000001 035007                    ADLA    1,DL
        11 000046   000434 755000 10                 STA     I
        11 000047   000130 235000 xsym               LDA     OCB+88
        11 000050   000043 773000                    LRL     35
        11 000051   000013 507007                    DVF     11,DL
        11 000052   000044 733000                    LRS     36
        11 000053   000434 116000 10                 CMPQ    I
        11 000054   000056 600000 11                 TZE     s:7492
        11 000055   000024 603000 11                 TRC     s:7487

      569     7492    3                  GOTO NO_OLD_ACCESS;

   7492 11 000056   000173 710000 11                 TRA     NO_OLD_ACCESS

      570     7493    3   PLUS_MINUS:
      571     7494    4                  DO I=1 TO (OCB.ACCESS.LEN/11 - 1);

   7494 11 000057   000001 235007       PLUS_MINUS   LDA     1,DL
        11 000060   000434 755000 10                 STA     I
        11 000061   000102 710000 11                 TRA     s:7498+3

      572     7495    4                     IF OCB.ACCESS.LIST.SPEC_TYPE(I) = 1

PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:153  
   7495 11 000062   000434 236000 10                 LDQ     I
        11 000063   000013 402007                    MPY     11,DL
        11 000064   000100 101406                    MRL     fill='000'O
        11 000065   000131 000001 xsym               ADSC9   OCB+89,Q                 cn=0,n=1
        11 000066   200006 000004                    ADSC9   CODE_IDX+1,,AUTO         cn=0,n=4
        11 000067   200006 236100                    LDQ     CODE_IDX+1,,AUTO
        11 000070   000001 116007                    CMPQ    1,DL
        11 000071   000077 601000 11                 TNZ     s:7498

      573     7496    4                      THEN
      574     7497    4                        OCB.ACCESS.LIST.SPEC_TYPE(I) = 2; /* FORCE PLUS          */

   7497 11 000072   000434 236000 10                 LDQ     I
        11 000073   000013 402007                    MPY     11,DL
        11 000074   000006 101400                    MRL     fill='000'O
        11 000075   000004 000004 xsym               ADSC9   B_VECTNIL+4              cn=0,n=4
        11 000076   000131 000001 xsym               ADSC9   OCB+89,Q                 cn=0,n=1

      575     7498    4                     END;

   7498 11 000077   000434 235000 10                 LDA     I
        11 000100   000001 035007                    ADLA    1,DL
        11 000101   000434 755000 10                 STA     I
        11 000102   000130 236000 xsym               LDQ     OCB+88
        11 000103   000044 737000                    LLS     36
        11 000104   000043 773000                    LRL     35
        11 000105   000013 507007                    DVF     11,DL
        11 000106   000044 733000                    LRS     36
        11 000107   000434 116000 10                 CMPQ    I
        11 000110   000112 600000 11                 TZE     s:7499
        11 000111   000062 603000 11                 TRC     s:7495

      576     7499    3                  IF OCB.ACCESS.LIST.SPEC_TYPE(0)~=1 THEN

   7499 11 000112   000131 236000 xsym               LDQ     OCB+89
        11 000113   777000 376003                    ANQ     -512,DU
        11 000114   001000 116003                    CMPQ    512,DU
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:154  
        11 000115   000117 600000 11                 TZE     s:7502

      577     7500    3                     OCB.ACCESS_REPLACE = %NO#;

   7500 11 000116   000253 450000 xsym               STZ     OCB+171

      578     7501    3                  END;

      579     7502    2              CODE_IDX = CODE;             /* Will be changed by XSF$LOCCODE     */

   7502 11 000117   200003 470500                    LDP0    @CODE,,AUTO
        11 000120   000000 235100                    LDA     0,,PR0
        11 000121   200005 755100                    STA     CODE_IDX,,AUTO

      580     7503    2              CALL XSF$LOCCODE(PTR$,CODE_IDX) ALTRET(NO_OLD_ACCESS); /* -> ACC   */

   7503 11 000122   200005 631500                    EPPR1   CODE_IDX,,AUTO
        11 000123   200007 451500                    STP1    CODE_IDX+2,,AUTO
        11 000124   000002 236000 12                 LDQ     2
        11 000125   200006 756100                    STQ     CODE_IDX+1,,AUTO
        11 000126   200006 630500                    EPPR0   CODE_IDX+1,,AUTO
        11 000127   000020 631400 xsym               EPPR1   B_VECTNIL+16
        11 000130   000000 701000 xent               TSX1    XSF$LOCCODE
        11 000131   000173 702000 11                 TSX2    NO_OLD_ACCESS

      581     7504    2              TOTAL_CTLS = FPARAM$ -> FM$FIT.CODES.NDW(CODE_IDX)*4/10; /* # CNTLS */

   7504 11 000132   000000 470400 xsym               LDP0    FPARAM$
        11 000133   200005 720100                    LXL0    CODE_IDX,,AUTO
        11 000134   000000 236110                    LDQ     0,X0,PR0
        11 000135   000010 772000                    QRL     8
        11 000136   007774 376007                    ANQ     4092,DL
        11 000137   000012 506007                    DIV     10,DL
        11 000140   000436 756000 10                 STQ     TOTAL_CTLS

      582     7505    2              IF TOTAL_CTLS = 0 OR OCB.ACCESS_REPLACE

PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:155  
   7505 11 000141   000000 116003                    CMPQ    0,DU
        11 000142   000173 600000 11                 TZE     NO_OLD_ACCESS
        11 000143   000253 234000 xsym               SZN     OCB+171
        11 000144   000173 604000 11                 TMI     NO_OLD_ACCESS

   7505 11 000145                       OLD_ACCESS   null
      583     7506    2               THEN                        /* No valid entries                   */
      584     7507    2                 GOTO NO_OLD_ACCESS;
      585     7508    2   OLD_ACCESS: ;                           /* Must move old ACCESS to workspace  */
      586     7509    3              DO I=0 TO (TOTAL_CTLS -1);   /* For each old ACCESS                */

   7509 11 000145   000434 450000 10                 STZ     I
        11 000146   000167 710000 11                 TRA     s:7513+3

      587     7510    3                 ACCESS_AREA.LIST.CNTLS(I) = PTR$ -> CODE09.FFLG;

   7510 11 000147   000434 236000 10                 LDQ     I
        11 000150   000012 402007                    MPY     10,DL
        11 000151   000003 470400 10                 LDP0    PTR$
        11 000152   000006 100500                    MLR     fill='000'O
        11 000153   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
        11 000154   000007 000002 10                 ADSC9   ACCESS_AREA+1,Q          cn=0,n=2

      588     7511    3                 ACCESS_AREA.LIST.ACCT(I) = PTR$ -> CODE09.ACCT;

   7511 11 000155   000003 470400 10                 LDP0    PTR$
        11 000156   040006 100500                    MLR     fill='040'O
        11 000157   000000 400010                    ADSC9   0,,PR0                   cn=2,n=8
        11 000160   000007 400010 10                 ADSC9   ACCESS_AREA+1,Q          cn=2,n=8

      589     7512    3                 PTR$ = PINCRC(PTR$,10);   /* Bump pointer to next old ACCESS    */

   7512 11 000161   000003 236000 10                 LDQ     PTR$
        11 000162   000003 036000 12                 ADLQ    3
        11 000163   000003 756000 10                 STQ     PTR$

      590     7513    3                 END;
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:156  

   7513 11 000164   000434 235000 10                 LDA     I
        11 000165   000001 035007                    ADLA    1,DL
        11 000166   000434 755000 10                 STA     I
        11 000167   000434 236000 10                 LDQ     I
        11 000170   000436 116000 10                 CMPQ    TOTAL_CTLS
        11 000171   000147 602000 11                 TNC     s:7510

      591     7514    3              DO WHILE ('0'B);             /* NEVER DO                           */

   7514 11 000172   000174 710000 11                 TRA     MERGE_ACCESS

      592     7515    3   NO_OLD_ACCESS: TOTAL_CTLS = 0;          /* Clear ACCESS area, no controls     */

   7515 11 000173   000436 450000 10    NO_OLD_ACCE* STZ     TOTAL_CTLS

      593     7516    3                 END;                      /* END NEVER DO                       */

   7515 11 000174                       MERGE_ACCESS null
      594     7517    2   MERGE_ACCESS: ;                         /* Now it's time to merge new ACCESS  */
      595     7518    3              DO I=0 TO (OCB.ACCESS.LEN/11 -1); /* For each new ACCESS           */

   7518 11 000174   000434 450000 10                 STZ     I
        11 000175   000454 710000 11                 TRA     FIN_ACCESS+3

      596     7519    4                 DO CASE (OCB.ACCESS.LIST.SPEC_TYPE(I));

   7519 11 000176   000434 236000 10                 LDQ     I
        11 000177   000013 402007                    MPY     11,DL
        11 000200   000100 101406                    MRL     fill='000'O
        11 000201   000131 000001 xsym               ADSC9   OCB+89,Q                 cn=0,n=1
        11 000202   200006 000002                    ADSC9   CODE_IDX+1,,AUTO         cn=0,n=2
        11 000203   200006 220100                    LDX0    CODE_IDX+1,,AUTO
        11 000204   000005 100003                    CMPX0   5,DU
        11 000205   000207 602010 11                 TNC     s:7519+9,X0
        11 000206   000451 710000 11                 TRA     FIN_ACCESS
        11 000207   000451 710000 11                 TRA     FIN_ACCESS
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:157  
        11 000210   000214 710000 11                 TRA     s:7521
        11 000211   000240 710000 11                 TRA     s:7525
        11 000212   000331 710000 11                 TRA     s:7538
        11 000213   000331 710000 11                 TRA     s:7538

      597     7520    4                  CASE(1);                 /* Normal control, 'use this'         */

      598     7521    4                    ACCESS_AREA.LIST.ACCT(TOTAL_CTLS) = OCB.ACCESS.LIST.ACCT(I);

   7521 11 000214   200006 756100                    STQ     CODE_IDX+1,,AUTO
        11 000215   000436 236000 10                 LDQ     TOTAL_CTLS
        11 000216   000012 402007                    MPY     10,DL
        11 000217   200006 235100                    LDA     CODE_IDX+1,,AUTO
        11 000220   040006 100405                    MLR     fill='040'O
        11 000221   000131 600010 xsym               ADSC9   OCB+89,A                 cn=3,n=8
        11 000222   000007 400010 10                 ADSC9   ACCESS_AREA+1,Q          cn=2,n=8

      599     7522    4                    ACCESS_AREA.LIST.CNTLS(TOTAL_CTLS) = OCB.ACCESS.LIST.CNTLS(I);

   7522 11 000223   000434 236000 10                 LDQ     I
        11 000224   000013 402007                    MPY     11,DL
        11 000225   200006 756100                    STQ     CODE_IDX+1,,AUTO
        11 000226   000436 236000 10                 LDQ     TOTAL_CTLS
        11 000227   000012 402007                    MPY     10,DL
        11 000230   200006 235100                    LDA     CODE_IDX+1,,AUTO
        11 000231   000006 100405                    MLR     fill='000'O
        11 000232   000131 200002 xsym               ADSC9   OCB+89,A                 cn=1,n=2
        11 000233   000007 000002 10                 ADSC9   ACCESS_AREA+1,Q          cn=0,n=2

      600     7523    4                    TOTAL_CTLS = TOTAL_CTLS +1;

   7523 11 000234   000436 235000 10                 LDA     TOTAL_CTLS
        11 000235   000001 035007                    ADLA    1,DL
        11 000236   000436 755000 10                 STA     TOTAL_CTLS
        11 000237   000451 710000 11                 TRA     FIN_ACCESS

      601     7524    4                  CASE(2);                 /* Edit by adding to previous ACCESS  */
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:158  

      602     7525    5                    DO J = 0 TO (TOTAL_CTLS -1); /* For each existing ACCESS     */

   7525 11 000240   000433 450000 10                 STZ     J
        11 000241   000300 710000 11                 TRA     s:7533+3

      603     7526    5                       IF ACCESS_AREA.LIST.ACCT(J) = OCB.ACCESS.LIST.ACCT(I)

   7526 11 000242   000433 236000 10                 LDQ     J
        11 000243   000012 402007                    MPY     10,DL
        11 000244   200006 756100                    STQ     CODE_IDX+1,,AUTO
        11 000245   000434 236000 10                 LDQ     I
        11 000246   000013 402007                    MPY     11,DL
        11 000247   200006 235100                    LDA     CODE_IDX+1,,AUTO
        11 000250   040006 106405                    CMPC    fill='040'O
        11 000251   000007 400010 10                 ADSC9   ACCESS_AREA+1,A          cn=2,n=8
        11 000252   000131 600010 xsym               ADSC9   OCB+89,Q                 cn=3,n=8
        11 000253   000275 601000 11                 TNZ     s:7533

      604     7527    5                        THEN               /* Already some controls for this     */
      605     7528    6                        DO;

      606     7529    6                           ACCESS_AREA.LIST.CNTLS(J) = ACCESS_AREA.LIST.CNTLS(J)

   7529 11 000254   000100 100406                    MLR     fill='000'O
        11 000255   000131 200002 xsym               ADSC9   OCB+89,Q                 cn=1,n=2
        11 000256   200006 000004                    ADSC9   CODE_IDX+1,,AUTO         cn=0,n=4
        11 000257   000433 236000 10                 LDQ     J
        11 000260   000012 402007                    MPY     10,DL
        11 000261   000100 100406                    MLR     fill='000'O
        11 000262   000007 000002 10                 ADSC9   ACCESS_AREA+1,Q          cn=0,n=2
        11 000263   200007 000004                    ADSC9   CODE_IDX+2,,AUTO         cn=0,n=4
        11 000264   200007 236100                    LDQ     CODE_IDX+2,,AUTO
        11 000265   200006 276100                    ORQ     CODE_IDX+1,,AUTO
        11 000266   200010 756100                    STQ     CODE_IDX+3,,AUTO
        11 000267   000433 236000 10                 LDQ     J
        11 000270   000012 402007                    MPY     10,DL
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:159  
        11 000271   000006 100500                    MLR     fill='000'O
        11 000272   200010 000004                    ADSC9   CODE_IDX+3,,AUTO         cn=0,n=4
        11 000273   000007 000002 10                 ADSC9   ACCESS_AREA+1,Q          cn=0,n=2

      607     7530    6                             | OCB.ACCESS.LIST.CNTLS(I);
      608     7531    6                           GOTO FIN_ACCESS;

   7531 11 000274   000451 710000 11                 TRA     FIN_ACCESS

      609     7532    6                           END;
      610     7533    5                       END;

   7533 11 000275   000433 235000 10                 LDA     J
        11 000276   000001 035007                    ADLA    1,DL
        11 000277   000433 755000 10                 STA     J
        11 000300   000433 236000 10                 LDQ     J
        11 000301   000436 116000 10                 CMPQ    TOTAL_CTLS
        11 000302   000242 602000 11                 TNC     s:7526

      611     7534    4                    ACCESS_AREA.LIST.ACCT(TOTAL_CTLS) = OCB.ACCESS.LIST.ACCT(I);

   7534 11 000303   000434 236000 10                 LDQ     I
        11 000304   000013 402007                    MPY     11,DL
        11 000305   200006 756100                    STQ     CODE_IDX+1,,AUTO
        11 000306   000436 236000 10                 LDQ     TOTAL_CTLS
        11 000307   000012 402007                    MPY     10,DL
        11 000310   200006 235100                    LDA     CODE_IDX+1,,AUTO
        11 000311   040006 100405                    MLR     fill='040'O
        11 000312   000131 600010 xsym               ADSC9   OCB+89,A                 cn=3,n=8
        11 000313   000007 400010 10                 ADSC9   ACCESS_AREA+1,Q          cn=2,n=8

      612     7535    4                    ACCESS_AREA.LIST.CNTLS(TOTAL_CTLS) = OCB.ACCESS.LIST.CNTLS(I);

   7535 11 000314   000434 236000 10                 LDQ     I
        11 000315   000013 402007                    MPY     11,DL
        11 000316   200006 756100                    STQ     CODE_IDX+1,,AUTO
        11 000317   000436 236000 10                 LDQ     TOTAL_CTLS
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:160  
        11 000320   000012 402007                    MPY     10,DL
        11 000321   200006 235100                    LDA     CODE_IDX+1,,AUTO
        11 000322   000006 100405                    MLR     fill='000'O
        11 000323   000131 200002 xsym               ADSC9   OCB+89,A                 cn=1,n=2
        11 000324   000007 000002 10                 ADSC9   ACCESS_AREA+1,Q          cn=0,n=2

      613     7536    4                    TOTAL_CTLS = TOTAL_CTLS +1;

   7536 11 000325   000436 235000 10                 LDA     TOTAL_CTLS
        11 000326   000001 035007                    ADLA    1,DL
        11 000327   000436 755000 10                 STA     TOTAL_CTLS
        11 000330   000451 710000 11                 TRA     FIN_ACCESS

      614     7537    4                  CASE(3,4);               /* Edit by removing previous ACC      */

      615     7538    5                    DO J = 0 TO (TOTAL_CTLS -1); /* For each existing ACCESS     */

   7538 11 000331   000433 450000 10                 STZ     J
        11 000332   000430 710000 11                 TRA     s:7556+3

      616     7539    5                       IF ACCESS_AREA.LIST.ACCT(J) = OCB.ACCESS.LIST.ACCT(I)

   7539 11 000333   000433 236000 10                 LDQ     J
        11 000334   000012 402007                    MPY     10,DL
        11 000335   200006 756100                    STQ     CODE_IDX+1,,AUTO
        11 000336   000434 236000 10                 LDQ     I
        11 000337   000013 402007                    MPY     11,DL
        11 000340   200006 235100                    LDA     CODE_IDX+1,,AUTO
        11 000341   040006 106405                    CMPC    fill='040'O
        11 000342   000007 400010 10                 ADSC9   ACCESS_AREA+1,A          cn=2,n=8
        11 000343   000131 600010 xsym               ADSC9   OCB+89,Q                 cn=3,n=8
        11 000344   000425 601000 11                 TNZ     s:7556

      617     7540    5                        THEN               /* We found the controls to delete    */
      618     7541    5                          IF OCB.ACCESS.LIST.SPEC_TYPE(I) = 3

   7541 11 000345   000100 101406                    MRL     fill='000'O
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:161  
        11 000346   000131 000001 xsym               ADSC9   OCB+89,Q                 cn=0,n=1
        11 000347   200006 000004                    ADSC9   CODE_IDX+1,,AUTO         cn=0,n=4
        11 000350   200006 236100                    LDQ     CODE_IDX+1,,AUTO
        11 000351   000003 116007                    CMPQ    3,DL
        11 000352   000401 601000 11                 TNZ     s:7550

      619     7542    5                           THEN            /* Remove only select controls        */
      620     7543    6                           DO;

      621     7544    6                              ACCESS_AREA.LIST.CNTLS(J) = ACCESS_AREA.LIST.CNTLS(J)

   7544 11 000353   000434 236000 10                 LDQ     I
        11 000354   000013 402007                    MPY     11,DL
        11 000355   000100 100406                    MLR     fill='000'O
        11 000356   000131 200002 xsym               ADSC9   OCB+89,Q                 cn=1,n=2
        11 000357   200006 000004                    ADSC9   CODE_IDX+1,,AUTO         cn=0,n=4
        11 000360   200006 236100                    LDQ     CODE_IDX+1,,AUTO
        11 000361   777777 676003                    ERQ     -1,DU
        11 000362   200007 756100                    STQ     CODE_IDX+2,,AUTO
        11 000363   000433 236000 10                 LDQ     J
        11 000364   000012 402007                    MPY     10,DL
        11 000365   000100 100406                    MLR     fill='000'O
        11 000366   000007 000002 10                 ADSC9   ACCESS_AREA+1,Q          cn=0,n=2
        11 000367   200010 000004                    ADSC9   CODE_IDX+3,,AUTO         cn=0,n=4
        11 000370   200010 236100                    LDQ     CODE_IDX+3,,AUTO
        11 000371   200007 376100                    ANQ     CODE_IDX+2,,AUTO
        11 000372   200011 756100                    STQ     CODE_IDX+4,,AUTO
        11 000373   000433 236000 10                 LDQ     J
        11 000374   000012 402007                    MPY     10,DL
        11 000375   000006 100500                    MLR     fill='000'O
        11 000376   200011 000004                    ADSC9   CODE_IDX+4,,AUTO         cn=0,n=4
        11 000377   000007 000002 10                 ADSC9   ACCESS_AREA+1,Q          cn=0,n=2

      622     7545    6                                & ~OCB.ACCESS.LIST.CNTLS(I);
      623     7546    6                              GOTO FIN_ACCESS;

   7546 11 000400   000451 710000 11                 TRA     FIN_ACCESS
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:162  

      624     7547    6                              END;
      625     7548    5                           ELSE            /* Remove entire entry                */
      626     7549    6                           DO;

      627     7550    7                              DO K = J TO (TOTAL_CTLS -2);

   7550 11 000401   000433 235000 10                 LDA     J
        11 000402   000435 755000 10                 STA     K
        11 000403   000414 710000 11                 TRA     s:7552+3

      628     7551    7                                 ACCESS_AREA.LIST(K) = ACCESS_AREA.LIST(K +1);

   7551 11 000404   000435 236000 10                 LDQ     K
        11 000405   000012 402007                    MPY     10,DL
        11 000406   000006 100406                    MLR     fill='000'O
        11 000407   000011 400012 10                 ADSC9   ACCESS_AREA+3,Q          cn=2,n=10
        11 000410   000007 000012 10                 ADSC9   ACCESS_AREA+1,Q          cn=0,n=10

      629     7552    7                                 END;

   7552 11 000411   000435 235000 10                 LDA     K
        11 000412   000001 035007                    ADLA    1,DL
        11 000413   000435 755000 10                 STA     K
        11 000414   000436 236000 10                 LDQ     TOTAL_CTLS
        11 000415   000002 136007                    SBLQ    2,DL
        11 000416   000421 604000 11                 TMI     s:7553
        11 000417   000435 116000 10                 CMPQ    K
        11 000420   000404 603000 11                 TRC     s:7551

      630     7553    6                              TOTAL_CTLS = TOTAL_CTLS -1;

   7553 11 000421   000436 235000 10                 LDA     TOTAL_CTLS
        11 000422   000001 135007                    SBLA    1,DL
        11 000423   000436 755000 10                 STA     TOTAL_CTLS

      631     7554    6                              GOTO FIN_ACCESS;
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:163  

   7554 11 000424   000451 710000 11                 TRA     FIN_ACCESS

      632     7555    6                              END;
      633     7556    5                       END;

   7556 11 000425   000433 235000 10                 LDA     J
        11 000426   000001 035007                    ADLA    1,DL
        11 000427   000433 755000 10                 STA     J
        11 000430   000433 236000 10                 LDQ     J
        11 000431   000436 116000 10                 CMPQ    TOTAL_CTLS
        11 000432   000333 602000 11                 TNC     s:7539

      634     7557    4                    CALL VPL$ERR_PROC(1,30,'04'O,,,,M$EI#); /* WARNING ONLY      */

   7557 11 000433   000006 236000 12                 LDQ     6
        11 000434   200014 756100                    STQ     CODE_IDX+7,,AUTO
        11 000435   000001 236000 xsym               LDQ     B_VECTNIL+1
        11 000436   000001 235000 xsym               LDA     B_VECTNIL+1
        11 000437   200012 757100                    STAQ    CODE_IDX+5,,AUTO
        11 000440   000001 236000 xsym               LDQ     B_VECTNIL+1
        11 000441   000007 235000 12                 LDA     7
        11 000442   200010 757100                    STAQ    CODE_IDX+3,,AUTO
        11 000443   000010 237000 12                 LDAQ    8
        11 000444   200006 757100                    STAQ    CODE_IDX+1,,AUTO
        11 000445   200006 630500                    EPPR0   CODE_IDX+1,,AUTO
        11 000446   000025 631400 xsym               EPPR1   B_VECTNIL+21
        11 000447   000000 701000 xent               TSX1    VPL$ERR_PROC
        11 000450   000000 011000                    NOP     0

      635     7558        /*E* ERROR:   VPD-00030
      636     7559             MESSAGE: No such control to remove from %UF
      637     7560        */
      638     7561    4                  END;                     /* END DO CASE                        */

   7552 11 000451                       FIN_ACCESS   null
      639     7562    3   FIN_ACCESS:   ;                         /* Finished with THIS NEW ACCESS      */
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:164  
      640     7563    3                 END;

   7563 11 000451   000434 235000 10                 LDA     I
        11 000452   000001 035007                    ADLA    1,DL
        11 000453   000434 755000 10                 STA     I
        11 000454   000130 235000 xsym               LDA     OCB+88
        11 000455   000043 773000                    LRL     35
        11 000456   000013 507007                    DVF     11,DL
        11 000457   000044 733000                    LRS     36
        11 000460   000434 116000 10                 CMPQ    I
        11 000461   000463 600000 11                 TZE     s:7564
        11 000462   000176 603000 11                 TRC     s:7519

      641     7564    2              ACCESS_AREA.LEN = TOTAL_CTLS*10; /* LENGTH IN BYTES                */

   7564 11 000463   000436 236000 10                 LDQ     TOTAL_CTLS
        11 000464   000012 402007                    MPY     10,DL
        11 000465   000006 756000 10                 STQ     ACCESS_AREA

      642     7565    2              ACCESS_AREA.LEN = (ACCESS_AREA.LEN +3)/4; /* LENGTH IN WORDS       */

   7565 11 000466   000003 036007                    ADLQ    3,DL
        11 000467   000002 772000                    QRL     2
        11 000470   000006 756000 10                 STQ     ACCESS_AREA
        11 000471   001267 710000 11                 TRA     s:7675

      643     7566        %EJECT;
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:165  
      644     7567    2            CASE (2);                      /* ACSVEH                             */

      645     7568    2              RET_VECT = VECTOR(ACSVEH_AREA);

   7568 11 000472   000012 237000 12                 LDAQ    10
        11 000473   200004 471500                    LDP1    @RET_VECT,,AUTO
        11 000474   100000 757100                    STAQ    0,,PR1

      646     7569    2              ACS$ = ADDR(ACSVEH_AREA.LIST);

   7569 11 000475   000014 236000 12                 LDQ     12
        11 000476   000005 756000 10                 STQ     ACS$

      647     7570    2              FILL$ = ACS$;

   7570 11 000477   000001 756000 10                 STQ     FILL$

      648     7571    2              IF OCB.ACSVEH_REPLACE

   7571 11 000500   000251 234000 xsym               SZN     OCB+169
        11 000501   000603 605000 11                 TPL     s:7596

      649     7572    2               THEN                        /* Ignore the old controls            */
      650     7573    3               DO;

      651     7574    3                  I=0;

   7574 11 000502   000434 450000 10                 STZ     I

      652     7575    4                  DO WHILE(I+4<OCB.ACSVEH.LEN);

   7575 11 000503   000534 710000 11                 TRA     s:7582

      653     7576    4                     P$=PINCRC(ADDR(OCB.ACSVEH.LIST),I);

   7576 11 000504   000434 236000 10                 LDQ     I
        11 000505   000020 736000                    QLS     16
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:166  
        11 000506   000015 036000 12                 ADLQ    13
        11 000507   000000 756000 10                 STQ     P$

      654     7577    4                     IF P$->ACS$NEW.SPEC_TYPE = 2

   7577 11 000510   000000 470400 10                 LDP0    P$
        11 000511   000100 101500                    MRL     fill='000'O
        11 000512   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
        11 000513   200006 000004                    ADSC9   CODE_IDX+1,,AUTO         cn=0,n=4
        11 000514   200006 236100                    LDQ     CODE_IDX+1,,AUTO
        11 000515   000002 116007                    CMPQ    2,DL
        11 000516   000541 600000 11                 TZE     ACS_PLUS_MINUS
        11 000517   000100 101500                    MRL     fill='000'O
        11 000520   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
        11 000521   200007 000004                    ADSC9   CODE_IDX+2,,AUTO         cn=0,n=4
        11 000522   200007 236100                    LDQ     CODE_IDX+2,,AUTO
        11 000523   000004 116007                    CMPQ    4,DL
        11 000524   000541 600000 11                 TZE     ACS_PLUS_MINUS

      655     7578    4                       OR P$->ACS$NEW.SPEC_TYPE=4
      656     7579    4                      THEN
      657     7580    4                        GOTO ACS_PLUS_MINUS;
      658     7581    4                     I=I+P$->ACS$NEW.TEXTC.LEN+4;

   7581 11 000525   000100 101500                    MRL     fill='000'O
        11 000526   000000 600001                    ADSC9   0,,PR0                   cn=3,n=1
        11 000527   200006 000004                    ADSC9   CODE_IDX+1,,AUTO         cn=0,n=4
        11 000530   200006 236100                    LDQ     CODE_IDX+1,,AUTO
        11 000531   000434 036000 10                 ADLQ    I
        11 000532   000004 036007                    ADLQ    4,DL
        11 000533   000434 756000 10                 STQ     I

      659     7582    4                     END;

   7582 11 000534   000434 236000 10                 LDQ     I
        11 000535   000004 036007                    ADLQ    4,DL
        11 000536   000045 116000 xsym               CMPQ    OCB+37
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:167  
        11 000537   000504 602000 11                 TNC     s:7576

      660     7583    3                  GOTO NO_OLD_ACSVEH;

   7583 11 000540   000710 710000 11                 TRA     NO_OLD_ACSVEH

      661     7584    3   ACS_PLUS_MINUS:
      662     7585    3                  I=0;

   7585 11 000541   000434 450000 10    ACS_PLUS_MI* STZ     I

      663     7586    4                  DO WHILE(I+4<OCB.ACSVEH.LEN);

   7586 11 000542   000572 710000 11                 TRA     s:7592

      664     7587    4                     P$=PINCRC(ADDR(OCB.ACSVEH.LIST),I);

   7587 11 000543   000434 236000 10                 LDQ     I
        11 000544   000020 736000                    QLS     16
        11 000545   000015 036000 12                 ADLQ    13
        11 000546   000000 756000 10                 STQ     P$

      665     7588    4                     IF P$->ACS$NEW.SPEC_TYPE = 1 AND I~=0

   7588 11 000547   000000 470400 10                 LDP0    P$
        11 000550   000100 101500                    MRL     fill='000'O
        11 000551   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
        11 000552   200006 000004                    ADSC9   CODE_IDX+1,,AUTO         cn=0,n=4
        11 000553   200006 236100                    LDQ     CODE_IDX+1,,AUTO
        11 000554   000001 116007                    CMPQ    1,DL
        11 000555   000563 601000 11                 TNZ     s:7591
        11 000556   000434 235000 10                 LDA     I
        11 000557   000563 600000 11                 TZE     s:7591

      666     7589    4                      THEN
      667     7590    4                        P$->ACS$NEW.SPEC_TYPE = 2;

PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:168  
   7590 11 000560   000100 101400                    MRL     fill='000'O
        11 000561   000004 000004 xsym               ADSC9   B_VECTNIL+4              cn=0,n=4
        11 000562   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1

      668     7591    4                     I=I+P$->ACS$NEW.TEXTC.LEN+4;

   7591 11 000563   000100 101500                    MRL     fill='000'O
        11 000564   000000 600001                    ADSC9   0,,PR0                   cn=3,n=1
        11 000565   200006 000004                    ADSC9   CODE_IDX+1,,AUTO         cn=0,n=4
        11 000566   200006 236100                    LDQ     CODE_IDX+1,,AUTO
        11 000567   000434 036000 10                 ADLQ    I
        11 000570   000004 036007                    ADLQ    4,DL
        11 000571   000434 756000 10                 STQ     I

      669     7592    4                     END;

   7592 11 000572   000434 236000 10                 LDQ     I
        11 000573   000004 036007                    ADLQ    4,DL
        11 000574   000045 116000 xsym               CMPQ    OCB+37
        11 000575   000543 602000 11                 TNC     s:7587

      670     7593    3                  IF ADDR(OCB.ACSVEH.LIST)->ACS$NEW.SPEC_TYPE~=1 THEN

   7593 11 000576   000046 236000 xsym               LDQ     OCB+38
        11 000577   777000 376003                    ANQ     -512,DU
        11 000600   001000 116003                    CMPQ    512,DU
        11 000601   000603 600000 11                 TZE     s:7596

      671     7594    3                     OCB.ACSVEH_REPLACE = %NO#;

   7594 11 000602   000251 450000 xsym               STZ     OCB+169

      672     7595    3                  END;

      673     7596    2              IF OCB.ACSVEH_REPLACE THEN GOTO NO_OLD_ACSVEH;

   7596 11 000603   000251 234000 xsym               SZN     OCB+169
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:169  
        11 000604   000710 604000 11                 TMI     NO_OLD_ACSVEH

      674     7597    2              CODE_IDX = CODE;             /* Will be changed by XSF$LOCCODE     */

   7597 11 000605   200003 470500                    LDP0    @CODE,,AUTO
        11 000606   000000 235100                    LDA     0,,PR0
        11 000607   200005 755100                    STA     CODE_IDX,,AUTO

      675     7598    2              CALL XSF$LOCCODE(PTR$,CODE_IDX) ALTRET(NO_OLD_ACSVEH); /* -> ACS   */

   7598 11 000610   200005 631500                    EPPR1   CODE_IDX,,AUTO
        11 000611   200007 451500                    STP1    CODE_IDX+2,,AUTO
        11 000612   000002 236000 12                 LDQ     2
        11 000613   200006 756100                    STQ     CODE_IDX+1,,AUTO
        11 000614   200006 630500                    EPPR0   CODE_IDX+1,,AUTO
        11 000615   000020 631400 xsym               EPPR1   B_VECTNIL+16
        11 000616   000000 701000 xent               TSX1    XSF$LOCCODE
        11 000617   000710 702000 11                 TSX2    NO_OLD_ACSVEH

      676     7599    2              TOTAL_CTLS = FPARAM$ -> FM$FIT.CODES.NDW(CODE_IDX)*4; /* Len bytes */

   7599 11 000620   000000 470400 xsym               LDP0    FPARAM$
        11 000621   200005 720100                    LXL0    CODE_IDX,,AUTO
        11 000622   000000 236110                    LDQ     0,X0,PR0
        11 000623   000010 772000                    QRL     8
        11 000624   007774 376007                    ANQ     4092,DL
        11 000625   000436 756000 10                 STQ     TOTAL_CTLS

   7599 11 000626                       OLD_ACSVEH   null
      677     7600    2   OLD_ACSVEH: ;                           /* Must move old ACSVEH to workspace  */
      678     7601    2              I = 0;                       /* Byte index                         */

   7601 11 000626   000434 450000 10                 STZ     I

      679     7602    3              DO WHILE (I +3 < TOTAL_CTLS); /* For each old ACSVEH               */

   7602 11 000627   000701 710000 11                 TRA     s:7609
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:170  

      680     7603    3                 FILL$ -> ACS$VEH.CNTLS = PTR$ -> ACS$VEH.CNTLS;

   7603 11 000630   000003 470400 10                 LDP0    PTR$
        11 000631   000001 471400 10                 LDP1    FILL$
        11 000632   000100 100500                    MLR     fill='000'O
        11 000633   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
        11 000634   100000 000002                    ADSC9   0,,PR1                   cn=0,n=2

      681     7604    3                 FILL$ -> ACS$VEH.TEXTC.LEN = PTR$ -> ACS$VEH.TEXTC.LEN;

   7604 11 000635   000003 470400 10                 LDP0    PTR$
        11 000636   000100 100500                    MLR     fill='000'O
        11 000637   000000 400001                    ADSC9   0,,PR0                   cn=2,n=1
        11 000640   100000 400001                    ADSC9   0,,PR1                   cn=2,n=1

      682     7605    3                 FILL$ -> ACS$VEH.TEXTC.STRING = PTR$ -> ACS$VEH.TEXTC.STRING;

   7605 11 000641   000100 101500                    MRL     fill='000'O
        11 000642   100000 400001                    ADSC9   0,,PR1                   cn=2,n=1
        11 000643   200006 000002                    ADSC9   CODE_IDX+1,,AUTO         cn=0,n=2
        11 000644   200006 220100                    LDX0    CODE_IDX+1,,AUTO
        11 000645   000003 470400 10                 LDP0    PTR$
        11 000646   000100 101500                    MRL     fill='000'O
        11 000647   000000 400001                    ADSC9   0,,PR0                   cn=2,n=1
        11 000650   200007 000002                    ADSC9   CODE_IDX+2,,AUTO         cn=0,n=2
        11 000651   200007 221100                    LDX1    CODE_IDX+2,,AUTO
        11 000652   040140 100540                    MLR     fill='040'O
        11 000653   000000 600011                    ADSC9   0,,PR0                   cn=3,n=*X1
        11 000654   100000 600010                    ADSC9   0,,PR1                   cn=3,n=*X0

      683     7606    3                 I = I + PTR$ -> ACS$VEH.TEXTC.LEN +3;

   7606 11 000655   000003 470400 10                 LDP0    PTR$
        11 000656   000100 101500                    MRL     fill='000'O
        11 000657   000000 400001                    ADSC9   0,,PR0                   cn=2,n=1
        11 000660   200006 000004                    ADSC9   CODE_IDX+1,,AUTO         cn=0,n=4
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:171  
        11 000661   200006 236100                    LDQ     CODE_IDX+1,,AUTO
        11 000662   000434 036000 10                 ADLQ    I
        11 000663   000003 036007                    ADLQ    3,DL
        11 000664   000434 756000 10                 STQ     I

      684     7607    3                 PTR$ = PINCRC(PTR$,PTR$ -> ACS$VEH.TEXTC.LEN +3); /* ->  old ACS */

   7607 11 000665   000100 101500                    MRL     fill='000'O
        11 000666   000000 400001                    ADSC9   0,,PR0                   cn=2,n=1
        11 000667   200006 000004                    ADSC9   CODE_IDX+1,,AUTO         cn=0,n=4
        11 000670   200006 236100                    LDQ     CODE_IDX+1,,AUTO
        11 000671   000020 736000                    QLS     16
        11 000672   600000 036007                    ADLQ    -65536,DL
        11 000673   000003 036000 10                 ADLQ    PTR$
        11 000674   000003 756000 10                 STQ     PTR$

      685     7608    3                 FILL$ = PINCRC(ACS$,I);

   7608 11 000675   000434 236000 10                 LDQ     I
        11 000676   000020 736000                    QLS     16
        11 000677   000005 036000 10                 ADLQ    ACS$
        11 000700   000001 756000 10                 STQ     FILL$

      686     7609    3                 END;

   7609 11 000701   000434 236000 10                 LDQ     I
        11 000702   000003 036007                    ADLQ    3,DL
        11 000703   000436 116000 10                 CMPQ    TOTAL_CTLS
        11 000704   000630 602000 11                 TNC     s:7603

      687     7610    2              TOTAL_CTLS = I;

   7610 11 000705   000434 235000 10                 LDA     I
        11 000706   000436 755000 10                 STA     TOTAL_CTLS

      688     7611    3              DO WHILE ('0'B);             /* NEVER DO                           */

PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:172  
   7611 11 000707   000711 710000 11                 TRA     MERGE_ACSVEH

      689     7612    3   NO_OLD_ACSVEH: TOTAL_CTLS = 0;          /* Clear ACSVEH area                  */

   7612 11 000710   000436 450000 10    NO_OLD_ACSV* STZ     TOTAL_CTLS

      690     7613    3                 END;                      /* END NEVER DO                       */

   7612 11 000711                       MERGE_ACSVEH null
      691     7614    2   MERGE_ACSVEH: ;                         /* Now it's time to merge new ACSVEH  */
      692     7615    2              I = 0;

   7615 11 000711   000434 450000 10                 STZ     I

      693     7616    3              DO WHILE (I +4 < OCB.ACSVEH.LEN); /* For each new ACSVEH           */

   7616 11 000712   001257 710000 11                 TRA     s:7672

      694     7617    3                 IF TOTAL_CTLS > LENGTHC(ACSVEH_AREA.LIST)

   7617 11 000713   000436 235000 10                 LDA     TOTAL_CTLS
        11 000714   001131 115007                    CMPA    601,DL
        11 000715   001311 603000 11                 TRC     TOO_MANY

      695     7618    3                  THEN
      696     7619    3                    GOTO TOO_MANY;
      697     7620    3                 EXAM$ = PINCRC(ADDR(OCB.ACSVEH.LIST),I);

   7620 11 000716   000434 236000 10                 LDQ     I
        11 000717   000020 736000                    QLS     16
        11 000720   000015 036000 12                 ADLQ    13
        11 000721   000002 756000 10                 STQ     EXAM$

      698     7621    4                 DO CASE (EXAM$ -> ACS$NEW.SPEC_TYPE);

   7621 11 000722   000002 470400 10                 LDP0    EXAM$
        11 000723   000100 101500                    MRL     fill='000'O
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:173  
        11 000724   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
        11 000725   200006 000002                    ADSC9   CODE_IDX+1,,AUTO         cn=0,n=2
        11 000726   200006 220100                    LDX0    CODE_IDX+1,,AUTO
        11 000727   000005 100003                    CMPX0   5,DU
        11 000730   000732 602010 11                 TNC     s:7621+8,X0
        11 000731   001247 710000 11                 TRA     FIN_ACSVEH
        11 000732   001247 710000 11                 TRA     FIN_ACSVEH
        11 000733   000737 710000 11                 TRA     STUFF_ACS
        11 000734   000775 710000 11                 TRA     s:7629
        11 000735   001047 710000 11                 TRA     s:7642
        11 000736   001047 710000 11                 TRA     s:7642

      699     7622    4                  CASE(1);                 /* Normal control, 'use this'         */

      700     7623    4   STUFF_ACS:       FILL$ -> ACS$VEH.CNTLS = EXAM$ -> ACS$NEW.CNTLS;

   7623 11 000737   000002 470400 10    STUFF_ACS    LDP0    EXAM$
        11 000740   000001 471400 10                 LDP1    FILL$
        11 000741   000100 100500                    MLR     fill='000'O
        11 000742   000000 200002                    ADSC9   0,,PR0                   cn=1,n=2
        11 000743   100000 000002                    ADSC9   0,,PR1                   cn=0,n=2

      701     7624    4                    FILL$ -> ACS$VEH.TEXTC.LEN = EXAM$ -> ACS$NEW.TEXTC.LEN;

   7624 11 000744   000100 100500                    MLR     fill='000'O
        11 000745   000000 600001                    ADSC9   0,,PR0                   cn=3,n=1
        11 000746   100000 400001                    ADSC9   0,,PR1                   cn=2,n=1

      702     7625    4                    FILL$ -> ACS$VEH.TEXTC.STRING = EXAM$ -> ACS$NEW.TEXTC.STRING;

   7625 11 000747   000100 101500                    MRL     fill='000'O
        11 000750   100000 400001                    ADSC9   0,,PR1                   cn=2,n=1
        11 000751   200006 000002                    ADSC9   CODE_IDX+1,,AUTO         cn=0,n=2
        11 000752   200006 220100                    LDX0    CODE_IDX+1,,AUTO
        11 000753   000100 101500                    MRL     fill='000'O
        11 000754   000000 600001                    ADSC9   0,,PR0                   cn=3,n=1
        11 000755   200007 000002                    ADSC9   CODE_IDX+2,,AUTO         cn=0,n=2
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:174  
        11 000756   200007 221100                    LDX1    CODE_IDX+2,,AUTO
        11 000757   040140 100540                    MLR     fill='040'O
        11 000760   000001 000011                    ADSC9   1,,PR0                   cn=0,n=*X1
        11 000761   100000 600010                    ADSC9   0,,PR1                   cn=3,n=*X0

      703     7626    4                    TOTAL_CTLS = TOTAL_CTLS + EXAM$ -> ACS$NEW.TEXTC.LEN +3;

   7626 11 000762   000100 101500                    MRL     fill='000'O
        11 000763   000000 600001                    ADSC9   0,,PR0                   cn=3,n=1
        11 000764   200006 000004                    ADSC9   CODE_IDX+1,,AUTO         cn=0,n=4
        11 000765   200006 236100                    LDQ     CODE_IDX+1,,AUTO
        11 000766   000436 036000 10                 ADLQ    TOTAL_CTLS
        11 000767   000003 036007                    ADLQ    3,DL
        11 000770   000436 756000 10                 STQ     TOTAL_CTLS

      704     7627    4                    FILL$ = PINCRC(ACS$,TOTAL_CTLS);

   7627 11 000771   000020 736000                    QLS     16
        11 000772   000005 036000 10                 ADLQ    ACS$
        11 000773   000001 756000 10                 STQ     FILL$
        11 000774   001247 710000 11                 TRA     FIN_ACSVEH

      705     7628    4                  CASE(2);                 /* Edit by adding to previous ACSVEH  */

      706     7629    4                    PTR$ = ACS$;

   7629 11 000775   000005 236000 10                 LDQ     ACS$
        11 000776   000003 756000 10                 STQ     PTR$

      707     7630    5                    DO WHILE (PTR$ < FILL$); /* For each existing ACSVEH         */

   7630 11 000777   000001 116000 10                 CMPQ    FILL$
        11 001000   001046 603000 11                 TRC     s:7640

      708     7631    5                       IF EXAM$ -> ACS$NEW.TEXTC.STRING = PTR$ -> ACS$VEH.TEXTC.STRING

   7631 11 001001   000002 470400 10                 LDP0    EXAM$
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:175  
        11 001002   000100 101500                    MRL     fill='000'O
        11 001003   000000 600001                    ADSC9   0,,PR0                   cn=3,n=1
        11 001004   200006 000002                    ADSC9   CODE_IDX+1,,AUTO         cn=0,n=2
        11 001005   200006 220100                    LDX0    CODE_IDX+1,,AUTO
        11 001006   000003 471400 10                 LDP1    PTR$
        11 001007   000100 101500                    MRL     fill='000'O
        11 001010   100000 400001                    ADSC9   0,,PR1                   cn=2,n=1
        11 001011   200007 000002                    ADSC9   CODE_IDX+2,,AUTO         cn=0,n=2
        11 001012   200007 221100                    LDX1    CODE_IDX+2,,AUTO
        11 001013   040140 106540                    CMPC    fill='040'O
        11 001014   000001 000010                    ADSC9   1,,PR0                   cn=0,n=*X0
        11 001015   100000 600011                    ADSC9   0,,PR1                   cn=3,n=*X1
        11 001016   001034 601000 11                 TNZ     s:7638

      709     7632    5                        THEN               /* Already some controls for this     */
      710     7633    6                        DO;

      711     7634    6                           PTR$ -> ACS$VEH.CNTLS = PTR$ -> ACS$VEH.CNTLS

   7634 11 001017   000100 100500                    MLR     fill='000'O
        11 001020   000000 200002                    ADSC9   0,,PR0                   cn=1,n=2
        11 001021   200006 000004                    ADSC9   CODE_IDX+1,,AUTO         cn=0,n=4
        11 001022   000100 100500                    MLR     fill='000'O
        11 001023   100000 000002                    ADSC9   0,,PR1                   cn=0,n=2
        11 001024   200007 000004                    ADSC9   CODE_IDX+2,,AUTO         cn=0,n=4
        11 001025   200007 236100                    LDQ     CODE_IDX+2,,AUTO
        11 001026   200006 276100                    ORQ     CODE_IDX+1,,AUTO
        11 001027   200010 756100                    STQ     CODE_IDX+3,,AUTO
        11 001030   000100 100500                    MLR     fill='000'O
        11 001031   200010 000004                    ADSC9   CODE_IDX+3,,AUTO         cn=0,n=4
        11 001032   100000 000002                    ADSC9   0,,PR1                   cn=0,n=2

      712     7635    6                             | EXAM$ -> ACS$NEW.CNTLS;
      713     7636    6                           GOTO FIN_ACSVEH;

   7636 11 001033   001247 710000 11                 TRA     FIN_ACSVEH

PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:176  
      714     7637    6                           END;
      715     7638    5                       PTR$ = PINCRC(PTR$,PTR$ -> ACS$VEH.TEXTC.LEN +3);
              7638                                /* Next OLD ACS */

   7638 11 001034   000100 101500                    MRL     fill='000'O
        11 001035   100000 400001                    ADSC9   0,,PR1                   cn=2,n=1
        11 001036   200006 000004                    ADSC9   CODE_IDX+1,,AUTO         cn=0,n=4
        11 001037   200006 236100                    LDQ     CODE_IDX+1,,AUTO
        11 001040   000020 736000                    QLS     16
        11 001041   600000 036007                    ADLQ    -65536,DL
        11 001042   000003 036000 10                 ADLQ    PTR$
        11 001043   000003 756000 10                 STQ     PTR$

      716     7639    5                       END;

   7639 11 001044   000001 116000 10                 CMPQ    FILL$
        11 001045   001001 602000 11                 TNC     s:7631

      717     7640    4                    GOTO STUFF_ACS;

   7640 11 001046   000737 710000 11                 TRA     STUFF_ACS

      718     7641    4                  CASE(3,4);               /* Edit by removing an ACSVEHICLS     */

      719     7642    4                    PTR$ = ACS$;

   7642 11 001047   000005 236000 10                 LDQ     ACS$
        11 001050   000003 756000 10                 STQ     PTR$

      720     7643    5                    DO WHILE (PTR$ < FILL$); /* For each existing ACSVEH         */

   7643 11 001051   000001 116000 10                 CMPQ    FILL$
        11 001052   001231 603000 11                 TRC     s:7669

      721     7644    5                       IF EXAM$ -> ACS$NEW.TEXTC.STRING = PTR$ -> ACS$VEH.TEXTC.STRING

   7644 11 001053   000002 470400 10                 LDP0    EXAM$
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:177  
        11 001054   000100 101500                    MRL     fill='000'O
        11 001055   000000 600001                    ADSC9   0,,PR0                   cn=3,n=1
        11 001056   200006 000002                    ADSC9   CODE_IDX+1,,AUTO         cn=0,n=2
        11 001057   200006 220100                    LDX0    CODE_IDX+1,,AUTO
        11 001060   000003 471400 10                 LDP1    PTR$
        11 001061   000100 101500                    MRL     fill='000'O
        11 001062   100000 400001                    ADSC9   0,,PR1                   cn=2,n=1
        11 001063   200007 000002                    ADSC9   CODE_IDX+2,,AUTO         cn=0,n=2
        11 001064   200007 221100                    LDX1    CODE_IDX+2,,AUTO
        11 001065   040140 106540                    CMPC    fill='040'O
        11 001066   000001 000010                    ADSC9   1,,PR0                   cn=0,n=*X0
        11 001067   100000 600011                    ADSC9   0,,PR1                   cn=3,n=*X1
        11 001070   001217 601000 11                 TNZ     s:7667

      722     7645    5                        THEN               /* We found the controls to delete    */
      723     7646    5                          IF EXAM$ -> ACS$NEW.SPEC_TYPE = 3

   7646 11 001071   000100 101500                    MRL     fill='000'O
        11 001072   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
        11 001073   200006 000004                    ADSC9   CODE_IDX+1,,AUTO         cn=0,n=4
        11 001074   200006 236100                    LDQ     CODE_IDX+1,,AUTO
        11 001075   000003 116007                    CMPQ    3,DL
        11 001076   001117 601000 11                 TNZ     s:7655

      724     7647    5                           THEN            /* Only delete certain bits           */
      725     7648    6                           DO;

      726     7649    6                              PTR$ -> ACS$VEH.CNTLS = PTR$ -> ACS$VEH.CNTLS

   7649 11 001077   000100 100500                    MLR     fill='000'O
        11 001100   000000 200002                    ADSC9   0,,PR0                   cn=1,n=2
        11 001101   200006 000004                    ADSC9   CODE_IDX+1,,AUTO         cn=0,n=4
        11 001102   200006 236100                    LDQ     CODE_IDX+1,,AUTO
        11 001103   777777 676003                    ERQ     -1,DU
        11 001104   200007 756100                    STQ     CODE_IDX+2,,AUTO
        11 001105   000100 100500                    MLR     fill='000'O
        11 001106   100000 000002                    ADSC9   0,,PR1                   cn=0,n=2
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:178  
        11 001107   200010 000004                    ADSC9   CODE_IDX+3,,AUTO         cn=0,n=4
        11 001110   200010 236100                    LDQ     CODE_IDX+3,,AUTO
        11 001111   200007 376100                    ANQ     CODE_IDX+2,,AUTO
        11 001112   200011 756100                    STQ     CODE_IDX+4,,AUTO
        11 001113   000100 100500                    MLR     fill='000'O
        11 001114   200011 000004                    ADSC9   CODE_IDX+4,,AUTO         cn=0,n=4
        11 001115   100000 000002                    ADSC9   0,,PR1                   cn=0,n=2

      727     7650    6                                & ~EXAM$ -> ACS$NEW.CNTLS;
      728     7651    6                              GOTO FIN_ACSVEH;

   7651 11 001116   001247 710000 11                 TRA     FIN_ACSVEH

      729     7652    6                              END;
      730     7653    5                           ELSE            /* Delete entire entry                */
      731     7654    6                           DO;

      732     7655    6                              PTR1$ = PINCRC(PTR$,PTR$ -> ACS$VEH.TEXTC.LEN +3);

   7655 11 001117   000100 101500                    MRL     fill='000'O
        11 001120   100000 400001                    ADSC9   0,,PR1                   cn=2,n=1
        11 001121   200006 000004                    ADSC9   CODE_IDX+1,,AUTO         cn=0,n=4
        11 001122   200006 236100                    LDQ     CODE_IDX+1,,AUTO
        11 001123   000020 736000                    QLS     16
        11 001124   600000 036007                    ADLQ    -65536,DL
        11 001125   000003 036000 10                 ADLQ    PTR$
        11 001126   000004 756000 10                 STQ     PTR1$

      733     7656    6                              TOTAL_CTLS = TOTAL_CTLS - PTR$ -> ACS$VEH.TEXTC.LEN -3;

   7656 11 001127   000100 101500                    MRL     fill='000'O
        11 001130   100000 400001                    ADSC9   0,,PR1                   cn=2,n=1
        11 001131   200006 000004                    ADSC9   CODE_IDX+1,,AUTO         cn=0,n=4
        11 001132   000436 236000 10                 LDQ     TOTAL_CTLS
        11 001133   200006 136100                    SBLQ    CODE_IDX+1,,AUTO
        11 001134   000003 136007                    SBLQ    3,DL
        11 001135   000436 756000 10                 STQ     TOTAL_CTLS
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:179  

      734     7657    7                              DO WHILE (PTR1$ < FILL$);

   7657 11 001136   000004 236000 10                 LDQ     PTR1$
        11 001137   000001 116000 10                 CMPQ    FILL$
        11 001140   001212 603000 11                 TRC     s:7664

      735     7658    7                                 PTR$ -> ACS$VEH.CNTLS = PTR1$ -> ACS$VEH.CNTLS;

   7658 11 001141   000004 470400 10                 LDP0    PTR1$
        11 001142   000003 471400 10                 LDP1    PTR$
        11 001143   000100 100500                    MLR     fill='000'O
        11 001144   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
        11 001145   100000 000002                    ADSC9   0,,PR1                   cn=0,n=2

      736     7659    7                                PTR$ -> ACS$VEH.TEXTC.LEN = PTR1$ -> ACS$VEH.TEXTC.LEN
              7659                                          ;

   7659 11 001146   000003 471400 10                 LDP1    PTR$
        11 001147   000100 100500                    MLR     fill='000'O
        11 001150   000000 400001                    ADSC9   0,,PR0                   cn=2,n=1
        11 001151   100000 400001                    ADSC9   0,,PR1                   cn=2,n=1

      737     7660    7                                PTR$ -> ACS$VEH.TEXTC.STRING = PTR1$ -> ACS$VEH.TEXTC.
              7660                                          STRING;

   7660 11 001152   000003 471400 10                 LDP1    PTR$
        11 001153   000100 101500                    MRL     fill='000'O
        11 001154   100000 400001                    ADSC9   0,,PR1                   cn=2,n=1
        11 001155   200006 000002                    ADSC9   CODE_IDX+1,,AUTO         cn=0,n=2
        11 001156   200006 220100                    LDX0    CODE_IDX+1,,AUTO
        11 001157   000100 101500                    MRL     fill='000'O
        11 001160   000000 400001                    ADSC9   0,,PR0                   cn=2,n=1
        11 001161   200007 000002                    ADSC9   CODE_IDX+2,,AUTO         cn=0,n=2
        11 001162   200007 221100                    LDX1    CODE_IDX+2,,AUTO
        11 001163   040140 100540                    MLR     fill='040'O
        11 001164   000000 600011                    ADSC9   0,,PR0                   cn=3,n=*X1
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:180  
        11 001165   100000 600010                    ADSC9   0,,PR1                   cn=3,n=*X0

      738     7661    7                                 PTR1$ = PINCRC(PTR1$,PTR$ -> ACS$VEH.TEXTC.LEN +3);

   7661 11 001166   000003 471400 10                 LDP1    PTR$
        11 001167   000100 101500                    MRL     fill='000'O
        11 001170   100000 400001                    ADSC9   0,,PR1                   cn=2,n=1
        11 001171   200006 000004                    ADSC9   CODE_IDX+1,,AUTO         cn=0,n=4
        11 001172   200006 236100                    LDQ     CODE_IDX+1,,AUTO
        11 001173   000020 736000                    QLS     16
        11 001174   600000 036007                    ADLQ    -65536,DL
        11 001175   000004 036000 10                 ADLQ    PTR1$
        11 001176   000004 756000 10                 STQ     PTR1$

      739     7662    7                                 PTR$ = PINCRC(PTR$,PTR$-> ACS$VEH.TEXTC.LEN +3);

   7662 11 001177   000100 101500                    MRL     fill='000'O
        11 001200   100000 400001                    ADSC9   0,,PR1                   cn=2,n=1
        11 001201   200006 000004                    ADSC9   CODE_IDX+1,,AUTO         cn=0,n=4
        11 001202   200006 236100                    LDQ     CODE_IDX+1,,AUTO
        11 001203   000020 736000                    QLS     16
        11 001204   600000 036007                    ADLQ    -65536,DL
        11 001205   000003 036000 10                 ADLQ    PTR$
        11 001206   000003 756000 10                 STQ     PTR$

      740     7663    7                                 END;

   7663 11 001207   000004 236000 10                 LDQ     PTR1$
        11 001210   000001 116000 10                 CMPQ    FILL$
        11 001211   001141 602000 11                 TNC     s:7658

      741     7664    6                              FILL$ = PINCRC(ACS$,TOTAL_CTLS);

   7664 11 001212   000436 236000 10                 LDQ     TOTAL_CTLS
        11 001213   000020 736000                    QLS     16
        11 001214   000005 036000 10                 ADLQ    ACS$
        11 001215   000001 756000 10                 STQ     FILL$
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:181  

      742     7665    6                              GOTO FIN_ACSVEH;

   7665 11 001216   001247 710000 11                 TRA     FIN_ACSVEH

      743     7666    6                              END;
      744     7667    5                       PTR$ = PINCRC(PTR$,PTR$ -> ACS$VEH.TEXTC.LEN +3);
              7667                                /* Next OLD ACS */

   7667 11 001217   000100 101500                    MRL     fill='000'O
        11 001220   100000 400001                    ADSC9   0,,PR1                   cn=2,n=1
        11 001221   200006 000004                    ADSC9   CODE_IDX+1,,AUTO         cn=0,n=4
        11 001222   200006 236100                    LDQ     CODE_IDX+1,,AUTO
        11 001223   000020 736000                    QLS     16
        11 001224   600000 036007                    ADLQ    -65536,DL
        11 001225   000003 036000 10                 ADLQ    PTR$
        11 001226   000003 756000 10                 STQ     PTR$

      745     7668    5                       END;

   7668 11 001227   000001 116000 10                 CMPQ    FILL$
        11 001230   001053 602000 11                 TNC     s:7644

      746     7669    4                    CALL VPL$ERR_PROC(1,30,'04'O,,,,M$EI#); /* WARNING ONLY      */

   7669 11 001231   000006 236000 12                 LDQ     6
        11 001232   200014 756100                    STQ     CODE_IDX+7,,AUTO
        11 001233   000001 236000 xsym               LDQ     B_VECTNIL+1
        11 001234   000001 235000 xsym               LDA     B_VECTNIL+1
        11 001235   200012 757100                    STAQ    CODE_IDX+5,,AUTO
        11 001236   000001 236000 xsym               LDQ     B_VECTNIL+1
        11 001237   000007 235000 12                 LDA     7
        11 001240   200010 757100                    STAQ    CODE_IDX+3,,AUTO
        11 001241   000010 237000 12                 LDAQ    8
        11 001242   200006 757100                    STAQ    CODE_IDX+1,,AUTO
        11 001243   200006 630500                    EPPR0   CODE_IDX+1,,AUTO
        11 001244   000025 631400 xsym               EPPR1   B_VECTNIL+21
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:182  
        11 001245   000000 701000 xent               TSX1    VPL$ERR_PROC
        11 001246   000000 011000                    NOP     0

      747     7670    4                  END;                     /* END DO CASE                        */

      748     7671    3   FIN_ACSVEH:   I = I + EXAM$ -> ACS$NEW.TEXTC.LEN +4; /* Count to next NEW ACS */

   7671 11 001247   000002 470400 10    FIN_ACSVEH   LDP0    EXAM$
        11 001250   000100 101500                    MRL     fill='000'O
        11 001251   000000 600001                    ADSC9   0,,PR0                   cn=3,n=1
        11 001252   200006 000004                    ADSC9   CODE_IDX+1,,AUTO         cn=0,n=4
        11 001253   200006 236100                    LDQ     CODE_IDX+1,,AUTO
        11 001254   000434 036000 10                 ADLQ    I
        11 001255   000004 036007                    ADLQ    4,DL
        11 001256   000434 756000 10                 STQ     I

      749     7672    3                 END;

   7672 11 001257   000434 236000 10                 LDQ     I
        11 001260   000004 036007                    ADLQ    4,DL
        11 001261   000045 116000 xsym               CMPQ    OCB+37
        11 001262   000713 602000 11                 TNC     s:7617

      750     7673    2              ACSVEH_AREA.LEN = (TOTAL_CTLS +3)/4; /* LENGTH in WORDS            */

   7673 11 001263   000436 236000 10                 LDQ     TOTAL_CTLS
        11 001264   000003 036007                    ADLQ    3,DL
        11 001265   000002 772000                    QRL     2
        11 001266   000204 756000 10                 STQ     ACSVEH_AREA

      751     7674    2            END;                           /* END DO CASE (CODE)                 */

      752     7675    1           IF ACCESS_AREA.LEN > 125 AND CODE=9

   7675 11 001267   000006 235000 10                 LDA     ACCESS_AREA
        11 001270   000176 115007                    CMPA    126,DL
        11 001271   001302 602000 11                 TNC     s:7682
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:183  
        11 001272   200003 470500                    LDP0    @CODE,,AUTO
        11 001273   000000 235100                    LDA     0,,PR0
        11 001274   000011 115007                    CMPA    9,DL
        11 001275   001302 601000 11                 TNZ     s:7682

      753     7676    1            THEN
      754     7677    1              CALL VPL$ERR_PROC(3,240,'04'O);

   7677 11 001276   000017 630400 12                 EPPR0   15
        11 001277   000021 631400 xsym               EPPR1   B_VECTNIL+17
        11 001300   000000 701000 xent               TSX1    VPL$ERR_PROC
        11 001301   000000 011000                    NOP     0

      755     7678        /*E*  ERROR:  VPD-00240
      756     7679              MESSAGE: Too many account ACCESS controls.
      757     7680             MESSAGE1: You tried to have more than 50 account ACCESS controls on a file.
      758     7681        */
      759     7682    1           IF ACSVEH_AREA.LEN > 150 AND CODE=10

   7682 11 001302   000204 235000 10                 LDA     ACSVEH_AREA
        11 001303   000227 115007                    CMPA    151,DL
        11 001304   001315 602000 11                 TNC     s:7689
        11 001305   200003 470500                    LDP0    @CODE,,AUTO
        11 001306   000000 235100                    LDA     0,,PR0
        11 001307   000012 115007                    CMPA    10,DL
        11 001310   001315 601000 11                 TNZ     s:7689

      760     7683    1            THEN
      761     7684    1   TOO_MANY:  CALL VPL$ERR_PROC(3,250,'04'O);

   7684 11 001311   000023 630400 12    TOO_MANY     EPPR0   19
        11 001312   000021 631400 xsym               EPPR1   B_VECTNIL+17
        11 001313   000000 701000 xent               TSX1    VPL$ERR_PROC
        11 001314   000000 011000                    NOP     0

      762     7685        /*E*  ERROR:  VPD-00250
      763     7686              MESSAGE: Too many vehicle ACCESS controls.
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:184  
      764     7687             MESSAGE1: You tried to have more than 150 words of vehicle controls.
      765     7688        */
      766     7689    1           RETURN;

   7689 11 001315   000000 702200 xent               TSX2  ! X66_ARET
      767     7690    1   END VPD$PROCESS_CONTROLS;
      768     7691        %EOD;

PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:185  
--  Include file information  --

   FM$FIT.:E05TOU  is referenced.
   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$PROCESS_CONTROLS.
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:186  

 **** Variables and constants ****

  ****  Section 010  Data  VPD$PROCESS_CONTROLS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     6-0-0/w STRC(4536)  r     1 ACCESS_AREA                5-0-0/w PTR         r     1 ACS$
   204-0-0/w STRC(5436)  r     1 ACSVEH_AREA                2-0-0/w PTR         r     1 EXAM$
     1-0-0/w PTR         r     1 FILL$                    434-0-0/w UBIN        r     1 I
   433-0-0/w UBIN        r     1 J                        435-0-0/w UBIN        r     1 K
     0-0-0/w PTR         r     1 P$                         3-0-0/w PTR         r     1 PTR$
     4-0-0/w PTR         r     1 PTR1$                    436-0-0/w UBIN        r     1 TOTAL_CTLS

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @CODE                      4-0-0/w PTR         r     1 @RET_VECT
    *0-0-0/w UBIN        r     1 CODE                       5-0-0/w SBIN        r     1 CODE_IDX
    *0-0-0/d VECT        r     1 RET_VECT

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w EPTR        r     1 BREAK_MESSAGE_REPORTER
     0-0-0/w PTR         r     1 FPARAM$                    0-0-0/w SBIN        r     1 M$EI#
     0-0-0/d STRC(6840)  r     1 OCB

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:187  
     0-0-0/c ASTR        r     1 ACS$NEW                    0-0-0/c ASTR(27)    r     1 ACS$VEH
     0-0-0/c STRC(90)    r     1 CODE09                     0-0-0/c ASTR(27)    r     1 CODE10
     0-0-0/w STRC(1116)  r     1 FM$FIT


   Procedure VPD$PROCESS_CONTROLS requires 718 words for executable code.
   Procedure VPD$PROCESS_CONTROLS requires 14 words of local(AUTO) storage.
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:188  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:189  
          MINI XREF LISTING

ACCESS_AREA
      7465**DCL      7482--ASSIGN
ACCESS_AREA.LEN
      7466**DCL      7564<<ASSIGN   7565<<ASSIGN   7565>>ASSIGN   7675>>IF
ACCESS_AREA.LIST
      7467**DCL      7551<<ASSIGN   7551>>ASSIGN
ACCESS_AREA.LIST.ACCT
      7469**DCL      7511<<ASSIGN   7521<<ASSIGN   7526>>IF       7534<<ASSIGN   7539>>IF
ACCESS_AREA.LIST.CNTLS
      7468**DCL      7510<<ASSIGN   7522<<ASSIGN   7529<<ASSIGN   7529>>ASSIGN   7535<<ASSIGN   7544<<ASSIGN
      7544>>ASSIGN
ACS$
      7453**DCL      7569<<ASSIGN   7570>>ASSIGN   7608>>ASSIGN   7627>>ASSIGN   7629>>ASSIGN   7642>>ASSIGN
      7664>>ASSIGN
ACS$NEW.CNTLS
      7461**DCL      7623>>ASSIGN   7634>>ASSIGN   7649>>ASSIGN
ACS$NEW.SPEC_TYPE
      7460**DCL      7577>>IF       7577>>IF       7588>>IF       7590<<ASSIGN   7593>>IF       7621>>DOCASE
      7646>>IF
ACS$NEW.TEXTC.LEN
      7463**DCL      7464--IMP-SIZ  7581>>ASSIGN   7591>>ASSIGN   7624>>ASSIGN   7625>>ASSIGN   7626>>ASSIGN
      7631>>IF       7644>>IF       7671>>ASSIGN
ACS$NEW.TEXTC.STRING
      7464**DCL      7625>>ASSIGN   7631>>IF       7644>>IF
ACS$VEH.CNTLS
      7455**DCL      7603<<ASSIGN   7603>>ASSIGN   7623<<ASSIGN   7634<<ASSIGN   7634>>ASSIGN   7649<<ASSIGN
      7649>>ASSIGN   7658<<ASSIGN   7658>>ASSIGN
ACS$VEH.TEXTC.LEN
      7457**DCL      7458--IMP-SIZ  7604<<ASSIGN   7604>>ASSIGN   7605>>ASSIGN   7605>>ASSIGN   7606>>ASSIGN
      7607>>ASSIGN   7624<<ASSIGN   7625>>ASSIGN   7631>>IF       7638>>ASSIGN   7644>>IF       7655>>ASSIGN
      7656>>ASSIGN   7659<<ASSIGN   7659>>ASSIGN   7660>>ASSIGN   7660>>ASSIGN   7661>>ASSIGN   7662>>ASSIGN
      7667>>ASSIGN
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:190  
ACS$VEH.TEXTC.STRING
      7458**DCL      7605<<ASSIGN   7605>>ASSIGN   7625<<ASSIGN   7631>>IF       7644>>IF       7660<<ASSIGN
      7660>>ASSIGN
ACSVEH_AREA
      7470**DCL      7568--ASSIGN
ACSVEH_AREA.LEN
      7471**DCL      7673<<ASSIGN   7682>>IF
ACSVEH_AREA.LIST
      7472**DCL      7569--ASSIGN   7617--IF
ACS_PLUS_MINUS
      7585**LABEL    7580--GOTO
BREAK_LOC
      5224**DCL      5224--REDEF
CODE
      7434**DCL         6--PROC     7480>>DOCASE   7502>>ASSIGN   7597>>ASSIGN   7675>>IF       7682>>IF
CODE09.ACCT
      7438**DCL      7511>>ASSIGN
CODE09.FFLG
      7437**DCL      7510>>ASSIGN
CODE10.ACSVEH.C
      7442**DCL      7442--IMP-SIZ
CODE_IDX
      7477**DCL      7502<<ASSIGN   7503<>CALL     7504>>ASSIGN   7597<<ASSIGN   7598<>CALL     7599>>ASSIGN
DEF_ICB.FID.STRING
      5822**DCL      5823--REDEF
DEV_ICB.FID.STRING
      5708**DCL      5709--REDEF
EI_KEY.KEY
      5920**DCL      5920--REDEF    5920--REDEF    5920--REDEF
EO_OCB.TYPE
      5420**DCL      5421--REDEF
EXAM$
      7450**DCL      7620<<ASSIGN   7621>>DOCASE   7623>>ASSIGN   7624>>ASSIGN   7625>>ASSIGN   7625>>ASSIGN
      7626>>ASSIGN   7631>>IF       7631>>IF       7634>>ASSIGN   7644>>IF       7644>>IF       7646>>IF
      7649>>ASSIGN   7671>>ASSIGN
FILL$
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:191  
      7449**DCL      7570<<ASSIGN   7603>>ASSIGN   7604>>ASSIGN   7605>>ASSIGN   7605>>ASSIGN   7608<<ASSIGN
      7623>>ASSIGN   7624>>ASSIGN   7625>>ASSIGN   7625>>ASSIGN   7627<<ASSIGN   7630>>DOWHILE  7643>>DOWHILE
      7657>>DOWHILE  7664<<ASSIGN
FIN_ACCESS
      7552**LABEL    7531--GOTO     7546--GOTO     7554--GOTO
FIN_ACSVEH
      7671**LABEL    7636--GOTO     7651--GOTO     7665--GOTO
FM$FIT.CODES.NDW
      7445**DCL      7504>>ASSIGN   7599>>ASSIGN
FPARAM$
      5225**DCL      7479>>ASSIGN   7504>>ASSIGN   7599>>ASSIGN
FPT_CLOSE_EI.SN_
      6761**DCL      6761--REDEF
FPT_CLOSE_EI.UTL_
      6762**DCL      6762--REDEF
FPT_CLOSE_EI.V.EXPIRE#
      6776**DCL      6776--REDEF
FPT_CLOSE_EI.V.TYPE#
      6774**DCL      6774--REDEF
FPT_CLOSE_EI.V.XTNSIZE#
      6771**DCL      6771--REDEF    6773--REDEF
FPT_CLOSE_PTL.SN_
      6887**DCL      6887--REDEF
FPT_CLOSE_PTL.UTL_
      6888**DCL      6888--REDEF
FPT_CLOSE_PTL.V.EXPIRE#
      6902**DCL      6902--REDEF
FPT_CLOSE_PTL.V.TYPE#
      6900**DCL      6900--REDEF
FPT_CLOSE_PTL.V.XTNSIZE#
      6897**DCL      6897--REDEF    6899--REDEF
FPT_CLOSE_READ.SN_
      6803**DCL      6803--REDEF
FPT_CLOSE_READ.UTL_
      6804**DCL      6804--REDEF
FPT_CLOSE_READ.V.EXPIRE#
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:192  
      6818**DCL      6818--REDEF
FPT_CLOSE_READ.V.TYPE#
      6816**DCL      6816--REDEF
FPT_CLOSE_READ.V.XTNSIZE#
      6813**DCL      6813--REDEF    6815--REDEF
FPT_CLOSE_SI.SN_
      6971**DCL      6971--REDEF
FPT_CLOSE_SI.UTL_
      6972**DCL      6972--REDEF
FPT_CLOSE_SI.V.EXPIRE#
      6986**DCL      6986--REDEF
FPT_CLOSE_SI.V.TYPE#
      6984**DCL      6984--REDEF
FPT_CLOSE_SI.V.XTNSIZE#
      6981**DCL      6981--REDEF    6983--REDEF
FPT_CLOSE_STD.SN_
      6929**DCL      6929--REDEF
FPT_CLOSE_STD.UTL_
      6930**DCL      6930--REDEF
FPT_CLOSE_STD.V.EXPIRE#
      6944**DCL      6944--REDEF
FPT_CLOSE_STD.V.TYPE#
      6942**DCL      6942--REDEF
FPT_CLOSE_STD.V.XTNSIZE#
      6939**DCL      6939--REDEF    6941--REDEF
FPT_CLSEI_FT.SN_
      6845**DCL      6845--REDEF
FPT_CLSEI_FT.UTL_
      6846**DCL      6846--REDEF
FPT_CLSEI_FT.V.EXPIRE#
      6860**DCL      6860--REDEF
FPT_CLSEI_FT.V.TYPE#
      6858**DCL      6858--REDEF
FPT_CLSEI_FT.V.XTNSIZE#
      6855**DCL      6855--REDEF    6857--REDEF
FPT_OPEN_EI.ACSVEH_
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:193  
      6416**DCL      6417--REDEF
FPT_OPEN_EI.ALTKEYS_
      6422**DCL      6423--REDEF    6423--REDEF
FPT_OPEN_EI.HDR_
      6421**DCL      6422--REDEF
FPT_OPEN_EI.TAB_
      6420**DCL      6421--REDEF
FPT_OPEN_EI.UHL_
      6414**DCL      6415--REDEF    6415--REDEF
FPT_OPEN_EI.V.FSN#
      6454**DCL      6454--REDEF    6454--REDEF
FPT_OPEN_EI.WSN_
      6420**DCL      6420--REDEF
FPT_OPEN_EI_SAVE.ACSVEH_
      6525**DCL      6526--REDEF
FPT_OPEN_EI_SAVE.ALTKEYS_
      6531**DCL      6532--REDEF    6532--REDEF
FPT_OPEN_EI_SAVE.HDR_
      6530**DCL      6531--REDEF
FPT_OPEN_EI_SAVE.TAB_
      6529**DCL      6530--REDEF
FPT_OPEN_EI_SAVE.UHL_
      6523**DCL      6524--REDEF    6524--REDEF
FPT_OPEN_EI_SAVE.V.FSN#
      6563**DCL      6563--REDEF    6563--REDEF
FPT_OPEN_EI_SAVE.WSN_
      6529**DCL      6529--REDEF
FPT_OPEN_OUT.ACSVEH_
      6307**DCL      6308--REDEF
FPT_OPEN_OUT.ALTKEYS_
      6313**DCL      6314--REDEF    6314--REDEF
FPT_OPEN_OUT.HDR_
      6312**DCL      6313--REDEF
FPT_OPEN_OUT.TAB_
      6311**DCL      6312--REDEF
FPT_OPEN_OUT.UHL_
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:194  
      6305**DCL      6306--REDEF    6306--REDEF
FPT_OPEN_OUT.V.FSN#
      6345**DCL      6345--REDEF    6345--REDEF
FPT_OPEN_OUT.WSN_
      6311**DCL      6311--REDEF
FPT_OPEN_OUT_SAVE.ACSVEH_
      6198**DCL      6199--REDEF
FPT_OPEN_OUT_SAVE.ALTKEYS_
      6204**DCL      6205--REDEF    6205--REDEF
FPT_OPEN_OUT_SAVE.HDR_
      6203**DCL      6204--REDEF
FPT_OPEN_OUT_SAVE.TAB_
      6202**DCL      6203--REDEF
FPT_OPEN_OUT_SAVE.UHL_
      6196**DCL      6197--REDEF    6197--REDEF
FPT_OPEN_OUT_SAVE.V.FSN#
      6236**DCL      6236--REDEF    6236--REDEF
FPT_OPEN_OUT_SAVE.WSN_
      6202**DCL      6202--REDEF
FPT_READ_STD.STATION_
      6626**DCL      6627--REDEF
FPT_READ_STD.V.DVBYTE.REREAD#
      6638**DCL      6638--REDEF
FPT_READ_STD.V.INDX#
      6636**DCL      6636--REDEF
FPT_READ_UC.STATION_
      6587**DCL      6588--REDEF
FPT_READ_UC.V.DVBYTE.REREAD#
      6599**DCL      6599--REDEF
FPT_READ_UC.V.INDX#
      6597**DCL      6597--REDEF
FPT_WRITE_ME.STATION_
      6695**DCL      6695--REDEF
FPT_WRITE_ME.V.DVBYTE.VFC#
      6702**DCL      6702--REDEF
FPT_WRITE_OUT.STATION_
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:195  
      6726**DCL      6726--REDEF
FPT_WRITE_OUT.V.DVBYTE.VFC#
      6733**DCL      6733--REDEF
FPT_WRITE_UC.STATION_
      6664**DCL      6664--REDEF
FPT_WRITE_UC.V.DVBYTE.VFC#
      6671**DCL      6671--REDEF
FROM_SN.SN
      5570**DCL      5571--REDEF
GETCMD.OUT$
      4777**DCL      4783--REDEF
I
      7474**DCL      7486<<DOINDEX  7487>>IF       7487>>IF       7494<<DOINDEX  7495>>IF       7497>>ASSIGN
      7509<<DOINDEX  7510>>ASSIGN   7511>>ASSIGN   7518<<DOINDEX  7519>>DOCASE   7521>>ASSIGN   7522>>ASSIGN
      7526>>IF       7529>>ASSIGN   7534>>ASSIGN   7535>>ASSIGN   7539>>IF       7541>>IF       7544>>ASSIGN
      7574<<ASSIGN   7575>>DOWHILE  7576>>ASSIGN   7581<<ASSIGN   7581>>ASSIGN   7585<<ASSIGN   7586>>DOWHILE
      7587>>ASSIGN   7588>>IF       7591<<ASSIGN   7591>>ASSIGN   7601<<ASSIGN   7602>>DOWHILE  7606<<ASSIGN
      7606>>ASSIGN   7608>>ASSIGN   7610>>ASSIGN   7615<<ASSIGN   7616>>DOWHILE  7620>>ASSIGN   7671<<ASSIGN
      7671>>ASSIGN
ICB.FID.STRING
      5594**DCL      5595--REDEF
IFSFA_PARAM.EOMCHAR#
      5949**DCL      5950--REDEF
IFSFA_PARAM.SIG1
      5943**DCL      5943--REDEF
IFSFA_PARAM.SIG2
      5943**DCL      5944--REDEF
IN_RES
      5516**DCL      5516--REDEF
IN_SN.SN
      5532**DCL      5533--REDEF
J
      7473**DCL      7525<<DOINDEX  7526>>IF       7529>>ASSIGN   7529>>ASSIGN   7538<<DOINDEX  7539>>IF
      7544>>ASSIGN   7544>>ASSIGN   7550>>DOINDEX
K
      7475**DCL      7550<<DOINDEX  7551>>ASSIGN   7551>>ASSIGN
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:196  
M$EI#
      5985**DCL      7557<>CALL     7669<>CALL
NO_OLD_ACCESS
      7515**LABEL    7492--GOTO     7503--CALLALT  7507--GOTO
NO_OLD_ACSVEH
      7612**LABEL    7583--GOTO     7596--GOTO     7598--CALLALT
OCB.ACCESS.LEN
      5285**DCL      7486>>DOINDEX  7494>>DOINDEX  7518>>DOINDEX
OCB.ACCESS.LIST.ACCT
      5289**DCL      7521>>ASSIGN   7526>>IF       7534>>ASSIGN   7539>>IF
OCB.ACCESS.LIST.CNTLS
      5288**DCL      7522>>ASSIGN   7529>>ASSIGN   7535>>ASSIGN   7544>>ASSIGN
OCB.ACCESS.LIST.SPEC_TYPE
      5287**DCL      7487>>IF       7487>>IF       7495>>IF       7497<<ASSIGN   7499>>IF       7519>>DOCASE
      7541>>IF
OCB.ACCESS_REPLACE
      5310**DCL      7483>>IF       7500<<ASSIGN   7505>>IF
OCB.ACSVEH.LEN
      5282**DCL      7575>>DOWHILE  7586>>DOWHILE  7616>>DOWHILE
OCB.ACSVEH.LIST
      5283**DCL      7576--ASSIGN   7587--ASSIGN   7593--IF       7620--ASSIGN
OCB.ACSVEH_REPLACE
      5308**DCL      7571>>IF       7594<<ASSIGN   7596>>IF
OCB.TYPE
      5278**DCL      5279--REDEF
OFSFA_PARAM.EOMCHAR#
      5979**DCL      5980--REDEF
OFSFA_PARAM.SIG1
      5973**DCL      5973--REDEF
OFSFA_PARAM.SIG2
      5973**DCL      5974--REDEF
OUT_SN.SN
      5550**DCL      5551--REDEF
P$
      7448**DCL      7576<<ASSIGN   7577>>IF       7577>>IF       7581>>ASSIGN   7587<<ASSIGN   7588>>IF
      7590>>ASSIGN   7591>>ASSIGN
PL6.E3A0      #007=VPD$PROCESS_CONTROLS File=VPD$UTIL.:E05TSI                    WED 07/30/97 07:25 Page:197  
PLUS_MINUS
      7494**LABEL    7490--GOTO
PTR$
      7451**DCL      7479<<ASSIGN   7503<>CALL     7510>>ASSIGN   7511>>ASSIGN   7512<<ASSIGN   7512>>ASSIGN
      7598<>CALL     7603>>ASSIGN   7604>>ASSIGN   7605>>ASSIGN   7605>>ASSIGN   7606>>ASSIGN   7607<<ASSIGN
      7607>>ASSIGN   7607>>ASSIGN   7629<<ASSIGN   7630>>DOWHILE  7631>>IF       7631>>IF       7634>>ASSIGN
      7634>>ASSIGN   7638<<ASSIGN   7638>>ASSIGN   7638>>ASSIGN   7642<<ASSIGN   7643>>DOWHILE  7644>>IF
      7644>>IF       7649>>ASSIGN   7649>>ASSIGN   7655>>ASSIGN   7655>>ASSIGN   7656>>ASSIGN   7658>>ASSIGN
      7659>>ASSIGN   7660>>ASSIGN   7660>>ASSIGN   7661>>ASSIGN   7662<<ASSIGN   7662>>ASSIGN   7662>>ASSIGN
      7667<<ASSIGN   7667>>ASSIGN   7667>>ASSIGN
PTR1$
      7452**DCL      7655<<ASSIGN   7657>>DOWHILE  7658>>ASSIGN   7659>>ASSIGN   7660>>ASSIGN   7660>>ASSIGN
      7661<<ASSIGN   7661>>ASSIGN
RET_VECT
      7435**DCL         6--PROC     7482<<ASSIGN   7568<<ASSIGN
SPEC_BUF
      5228**DCL      5228--REDEF
STUFF_ACS
      7623**LABEL    7640--GOTO
TOO_MANY
      7684**LABEL    7619--GOTO
TOTAL_CTLS
      7476**DCL      7504<<ASSIGN   7505>>IF       7509>>DOINDEX  7515<<ASSIGN   7521>>ASSIGN   7522>>ASSIGN
      7523<<ASSIGN   7523>>ASSIGN   7525>>DOINDEX  7534>>ASSIGN   7535>>ASSIGN   7536<<ASSIGN   7536>>ASSIGN
      7538>>DOINDEX  7550>>DOINDEX  7553<<ASSIGN   7553>>ASSIGN   7564>>ASSIGN   7599<<ASSIGN   7602>>DOWHILE
      7610<<ASSIGN   7612<<ASSIGN   7617>>IF       7626<<ASSIGN   7626>>ASSIGN   7627>>ASSIGN   7656<<ASSIGN
      7656>>ASSIGN   7664>>ASSIGN   7673>>ASSIGN
VPL$ERR_PROC
      7407**DCL-ENT  7557--CALL     7669--CALL     7677--CALL     7684--CALL
XSF$LOCCODE
      7447**DCL-ENT  7503--CALL     7598--CALL

PL6.E3A0      #008=VPD$CONTINUE File=VPD$UTIL.:E05TSI                            WED 07/30/97 07:26 Page:198  
      769        1        /*T***********************************************************/
      770        2        /*T*                                                         */
      771        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      772        4        /*T*                                                         */
      773        5        /*T***********************************************************/
      774        6        VPD$CONTINUE: PROC;
      775        7
      776        8        /*D*  NAME: VPD$CONTINUE
      777        9              CALL: Called from XUG$BREAK if the user hits BREAK and enters C.
      778       10              DESCRIPTION: Resets the M$PROMPT to '.' (intra-command).
      779       11        */
      780       12
      781       13        %INCLUDE VP_DATA_R;
      782     7000
      783     7001    1   DCL PROMPT_2 CHAR (1) SYMREF READONLY;  /* it lives in VPD$INIT_COMMANDS      */
      784     7002
      785     7003    1           OLD_BREAKS = OLD_BREAKS + BREAKS;
      786     7004    1           BREAKS = 0;
      787     7005
      788     7006    1           FPT_PROMPT.PROMPT_ = VECTOR (PROMPT_2);
      789     7007    1           CALL M$PROMPT (FPT_PROMPT);
      790     7008    1           IF CMD_MASK & '34'O             /* IF COPY,COPYALL, or COPYSTD        */
      791     7009    1             AND OCB.DEV_MASK.IC           /* AND output is to terminal          */
      792     7010    1             AND OCB.FLAVOR.FORMATTED      /* AND we're formatting the output    */
      793     7011    2            THEN DO;
      794     7012    2               CALL M$CLRSTK;
      795     7013    2               UNWIND TO CLEAN_POINT;      /* Continue with the next record      */
      796     7014    2               END;
      797     7015    1           RETURN;
      798     7016
      799     7017    1   END VPD$CONTINUE;
      800     7018        %EOD;

PL6.E3A0      #008=VPD$CONTINUE File=VPD$UTIL.:E05TSI                            WED 07/30/97 07:26 Page:199  
--  Include file information  --

   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$CONTINUE.

   Procedure VPD$CONTINUE requires 29 words for executable code.
   Procedure VPD$CONTINUE requires 6 words of local(AUTO) storage.

PL6.E3A0      #008=VPD$CONTINUE File=VPD$UTIL.:E05TSI                            WED 07/30/97 07:26 Page:200  

 Object Unit name= VPD$CONTINUE                               File name= VPD$UTIL.:E05TOU
 UTS= JUL 30 '97 07:26:47.24 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$EI
    2   DCB   even  none     0      0  M$EO
    3   DCB   even  none     0      0  M$EO1
    4   DCB   even  none     0      0  M$ME
    5   DCB   even  none     0      0  M$SI
    6   DCB   even  none     0      0  M$READFILE
    7   DCB   even  none     0      0  M$DO
    8   DCB   even  none     0      0  M$STD1
    9   DCB   even  none     0      0  M$SORT1
   10   Proc  even  none    29     35  VPD$CONTINUE
   11  RoData even  none     4      4  VPD$CONTINUE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    10      0   yes            yes      Std        0  VPD$CONTINUE

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_0
                       nStd      0 X66_AUNWIND
                       nStd      0 X66_ARET
PL6.E3A0      #008=VPD$CONTINUE File=VPD$UTIL.:E05TSI                            WED 07/30/97 07:26 Page:201  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  CLEAN_POINT                           BREAK_LOC
     BREAKS                                OLD_BREAKS                            BREAK_MESSAGE_REPORTER
     CMD_MASK                              SPEC_BUF                              OCB
     IN_RES                                M$EI                                  M$EO
     M$EO1                                 M$ME                                  M$SI
     M$READFILE                            M$DO                                  M$STD1
     M$SORT1                               FPT_PROMPT                       r    PROMPT_2

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #008=VPD$CONTINUE File=VPD$UTIL.:E05TSI                            WED 07/30/97 07:26 Page:202  


      769        1        /*T***********************************************************/
      770        2        /*T*                                                         */
      771        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      772        4        /*T*                                                         */
      773        5        /*T***********************************************************/
      774        6        VPD$CONTINUE: PROC;

      6 10 000000   000000 700200 xent  VPD$CONTINUE TSX0  ! X66_AUTO_0
        10 000001   000006 000000                    ZERO    6,0

      775        7
      776        8        /*D*  NAME: VPD$CONTINUE
      777        9              CALL: Called from XUG$BREAK if the user hits BREAK and enters C.
      778       10              DESCRIPTION: Resets the M$PROMPT to '.' (intra-command).
      779       11        */
      780       12
      781       13        %INCLUDE VP_DATA_R;
      782     7000
      783     7001    1   DCL PROMPT_2 CHAR (1) SYMREF READONLY;  /* it lives in VPD$INIT_COMMANDS      */
      784     7002
      785     7003    1           OLD_BREAKS = OLD_BREAKS + BREAKS;

   7003 10 000002   000000 236000 xsym               LDQ     OLD_BREAKS
        10 000003   000000 036000 xsym               ADLQ    BREAKS
        10 000004   000000 756000 xsym               STQ     OLD_BREAKS

      786     7004    1           BREAKS = 0;

   7004 10 000005   000000 450000 xsym               STZ     BREAKS

      787     7005
      788     7006    1           FPT_PROMPT.PROMPT_ = VECTOR (PROMPT_2);

   7006 10 000006   000000 237000 11                 LDAQ    0
        10 000007   000004 757000 xsym               STAQ    FPT_PROMPT+4

PL6.E3A0      #008=VPD$CONTINUE File=VPD$UTIL.:E05TSI                            WED 07/30/97 07:26 Page:203  
      789     7007    1           CALL M$PROMPT (FPT_PROMPT);

   7007 10 000010   000000 630400 xsym               EPPR0   FPT_PROMPT
        10 000011   160002 713400                    CLIMB   57346
        10 000012   401000 401760                    pmme    nvectors=3

      790     7008    1           IF CMD_MASK & '34'O             /* IF COPY,COPYALL, or COPYSTD        */

   7008 10 000013   000100 100400                    MLR     fill='000'O
        10 000014   000000 000010 xsym               ADSC9   CMD_MASK                 cn=0,n=8
        10 000015   200004 000010                    ADSC9   4,,AUTO                  cn=0,n=8
        10 000016   200004 237100                    LDAQ    4,,AUTO
        10 000017   000002 377000 11                 ANAQ    2
        10 000020   000034 600000 10                 TZE     s:7015
        10 000021   000255 236000 xsym               LDQ     OCB+173
        10 000022   020000 316003                    CANQ    8192,DU
        10 000023   000034 600000 10                 TZE     s:7015
        10 000024   000256 236000 xsym               LDQ     OCB+174
        10 000025   200000 316003                    CANQ    65536,DU
        10 000026   000034 600000 10                 TZE     s:7015

      791     7009    1             AND OCB.DEV_MASK.IC           /* AND output is to terminal          */
      792     7010    1             AND OCB.FLAVOR.FORMATTED      /* AND we're formatting the output    */
      793     7011    2            THEN DO;

      794     7012    2               CALL M$CLRSTK;

   7012 10 000027   010013 713400                    CLIMB   4107
        10 000030   000000 401760                    pmme    nvectors=0

      795     7013    2               UNWIND TO CLEAN_POINT;      /* Continue with the next record      */

   7013 10 000031   000000 237200 xsym               LDAQ  ! CLEAN_POINT
        10 000032   000000 700200 xent               TSX0  ! X66_AUNWIND
        10 000033   000000 000200                    ZERO    0,128

      796     7014    2               END;
PL6.E3A0      #008=VPD$CONTINUE File=VPD$UTIL.:E05TSI                            WED 07/30/97 07:26 Page:204  
      797     7015    1           RETURN;

   7015 10 000034   000000 702200 xent               TSX2  ! X66_ARET
      798     7016
      799     7017    1   END VPD$CONTINUE;
      800     7018        %EOD;

PL6.E3A0      #008=VPD$CONTINUE File=VPD$UTIL.:E05TSI                            WED 07/30/97 07:26 Page:205  
--  Include file information  --

   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$CONTINUE.
PL6.E3A0      #008=VPD$CONTINUE File=VPD$UTIL.:E05TSI                            WED 07/30/97 07:26 Page:206  

 **** Variables and constants ****

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN        r     1 BREAKS
     0-0-0/w EPTR        r     1 BREAK_MESSAGE_REPORTER
     0-0-0/d REMB        r     1 CLEAN_POINT
     0-0-0/b BIT         r     1 CMD_MASK(0:71)
     0-0-0/d STRC(360)   r     1 FPT_PROMPT                 0-0-0/d STRC(6840)  r     1 OCB
     0-0-0/w SBIN        r     1 OLD_BREAKS                 0-0-0/c CHAR        r     1 PROMPT_2


   Procedure VPD$CONTINUE requires 29 words for executable code.
   Procedure VPD$CONTINUE requires 6 words of local(AUTO) storage.
PL6.E3A0      #008=VPD$CONTINUE File=VPD$UTIL.:E05TSI                            WED 07/30/97 07:26 Page:207  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #008=VPD$CONTINUE File=VPD$UTIL.:E05TSI                            WED 07/30/97 07:26 Page:208  
          MINI XREF LISTING

BREAKS
      5220**DCL      7003>>ASSIGN   7004<<ASSIGN
BREAK_LOC
      5220**DCL      5220--REDEF
CLEAN_POINT
      5185**DCL      7013>>UNWIND
CMD_MASK
      5222**DCL      7008>>IF
DEF_ICB.FID.STRING
      5818**DCL      5819--REDEF
DEV_ICB.FID.STRING
      5704**DCL      5705--REDEF
EI_KEY.KEY
      5916**DCL      5916--REDEF    5916--REDEF    5916--REDEF
EO_OCB.TYPE
      5416**DCL      5417--REDEF
FPT_CLOSE_EI.SN_
      6757**DCL      6757--REDEF
FPT_CLOSE_EI.UTL_
      6758**DCL      6758--REDEF
FPT_CLOSE_EI.V.EXPIRE#
      6772**DCL      6772--REDEF
FPT_CLOSE_EI.V.TYPE#
      6770**DCL      6770--REDEF
FPT_CLOSE_EI.V.XTNSIZE#
      6767**DCL      6767--REDEF    6769--REDEF
FPT_CLOSE_PTL.SN_
      6883**DCL      6883--REDEF
FPT_CLOSE_PTL.UTL_
      6884**DCL      6884--REDEF
FPT_CLOSE_PTL.V.EXPIRE#
      6898**DCL      6898--REDEF
PL6.E3A0      #008=VPD$CONTINUE File=VPD$UTIL.:E05TSI                            WED 07/30/97 07:26 Page:209  
FPT_CLOSE_PTL.V.TYPE#
      6896**DCL      6896--REDEF
FPT_CLOSE_PTL.V.XTNSIZE#
      6893**DCL      6893--REDEF    6895--REDEF
FPT_CLOSE_READ.SN_
      6799**DCL      6799--REDEF
FPT_CLOSE_READ.UTL_
      6800**DCL      6800--REDEF
FPT_CLOSE_READ.V.EXPIRE#
      6814**DCL      6814--REDEF
FPT_CLOSE_READ.V.TYPE#
      6812**DCL      6812--REDEF
FPT_CLOSE_READ.V.XTNSIZE#
      6809**DCL      6809--REDEF    6811--REDEF
FPT_CLOSE_SI.SN_
      6967**DCL      6967--REDEF
FPT_CLOSE_SI.UTL_
      6968**DCL      6968--REDEF
FPT_CLOSE_SI.V.EXPIRE#
      6982**DCL      6982--REDEF
FPT_CLOSE_SI.V.TYPE#
      6980**DCL      6980--REDEF
FPT_CLOSE_SI.V.XTNSIZE#
      6977**DCL      6977--REDEF    6979--REDEF
FPT_CLOSE_STD.SN_
      6925**DCL      6925--REDEF
FPT_CLOSE_STD.UTL_
      6926**DCL      6926--REDEF
FPT_CLOSE_STD.V.EXPIRE#
      6940**DCL      6940--REDEF
FPT_CLOSE_STD.V.TYPE#
      6938**DCL      6938--REDEF
FPT_CLOSE_STD.V.XTNSIZE#
      6935**DCL      6935--REDEF    6937--REDEF
FPT_CLSEI_FT.SN_
      6841**DCL      6841--REDEF
PL6.E3A0      #008=VPD$CONTINUE File=VPD$UTIL.:E05TSI                            WED 07/30/97 07:26 Page:210  
FPT_CLSEI_FT.UTL_
      6842**DCL      6842--REDEF
FPT_CLSEI_FT.V.EXPIRE#
      6856**DCL      6856--REDEF
FPT_CLSEI_FT.V.TYPE#
      6854**DCL      6854--REDEF
FPT_CLSEI_FT.V.XTNSIZE#
      6851**DCL      6851--REDEF    6853--REDEF
FPT_OPEN_EI.ACSVEH_
      6412**DCL      6413--REDEF
FPT_OPEN_EI.ALTKEYS_
      6418**DCL      6419--REDEF    6419--REDEF
FPT_OPEN_EI.HDR_
      6417**DCL      6418--REDEF
FPT_OPEN_EI.TAB_
      6416**DCL      6417--REDEF
FPT_OPEN_EI.UHL_
      6410**DCL      6411--REDEF    6411--REDEF
FPT_OPEN_EI.V.FSN#
      6450**DCL      6450--REDEF    6450--REDEF
FPT_OPEN_EI.WSN_
      6416**DCL      6416--REDEF
FPT_OPEN_EI_SAVE.ACSVEH_
      6521**DCL      6522--REDEF
FPT_OPEN_EI_SAVE.ALTKEYS_
      6527**DCL      6528--REDEF    6528--REDEF
FPT_OPEN_EI_SAVE.HDR_
      6526**DCL      6527--REDEF
FPT_OPEN_EI_SAVE.TAB_
      6525**DCL      6526--REDEF
FPT_OPEN_EI_SAVE.UHL_
      6519**DCL      6520--REDEF    6520--REDEF
FPT_OPEN_EI_SAVE.V.FSN#
      6559**DCL      6559--REDEF    6559--REDEF
FPT_OPEN_EI_SAVE.WSN_
      6525**DCL      6525--REDEF
PL6.E3A0      #008=VPD$CONTINUE File=VPD$UTIL.:E05TSI                            WED 07/30/97 07:26 Page:211  
FPT_OPEN_OUT.ACSVEH_
      6303**DCL      6304--REDEF
FPT_OPEN_OUT.ALTKEYS_
      6309**DCL      6310--REDEF    6310--REDEF
FPT_OPEN_OUT.HDR_
      6308**DCL      6309--REDEF
FPT_OPEN_OUT.TAB_
      6307**DCL      6308--REDEF
FPT_OPEN_OUT.UHL_
      6301**DCL      6302--REDEF    6302--REDEF
FPT_OPEN_OUT.V.FSN#
      6341**DCL      6341--REDEF    6341--REDEF
FPT_OPEN_OUT.WSN_
      6307**DCL      6307--REDEF
FPT_OPEN_OUT_SAVE.ACSVEH_
      6194**DCL      6195--REDEF
FPT_OPEN_OUT_SAVE.ALTKEYS_
      6200**DCL      6201--REDEF    6201--REDEF
FPT_OPEN_OUT_SAVE.HDR_
      6199**DCL      6200--REDEF
FPT_OPEN_OUT_SAVE.TAB_
      6198**DCL      6199--REDEF
FPT_OPEN_OUT_SAVE.UHL_
      6192**DCL      6193--REDEF    6193--REDEF
FPT_OPEN_OUT_SAVE.V.FSN#
      6232**DCL      6232--REDEF    6232--REDEF
FPT_OPEN_OUT_SAVE.WSN_
      6198**DCL      6198--REDEF
FPT_PROMPT
      6065**DCL      7007<>CALL
FPT_PROMPT.PROMPT_
      6071**DCL      7006<<ASSIGN
FPT_READ_STD.STATION_
      6622**DCL      6623--REDEF
FPT_READ_STD.V.DVBYTE.REREAD#
      6634**DCL      6634--REDEF
PL6.E3A0      #008=VPD$CONTINUE File=VPD$UTIL.:E05TSI                            WED 07/30/97 07:26 Page:212  
FPT_READ_STD.V.INDX#
      6632**DCL      6632--REDEF
FPT_READ_UC.STATION_
      6583**DCL      6584--REDEF
FPT_READ_UC.V.DVBYTE.REREAD#
      6595**DCL      6595--REDEF
FPT_READ_UC.V.INDX#
      6593**DCL      6593--REDEF
FPT_WRITE_ME.STATION_
      6691**DCL      6691--REDEF
FPT_WRITE_ME.V.DVBYTE.VFC#
      6698**DCL      6698--REDEF
FPT_WRITE_OUT.STATION_
      6722**DCL      6722--REDEF
FPT_WRITE_OUT.V.DVBYTE.VFC#
      6729**DCL      6729--REDEF
FPT_WRITE_UC.STATION_
      6660**DCL      6660--REDEF
FPT_WRITE_UC.V.DVBYTE.VFC#
      6667**DCL      6667--REDEF
FROM_SN.SN
      5566**DCL      5567--REDEF
GETCMD.OUT$
      4773**DCL      4779--REDEF
ICB.FID.STRING
      5590**DCL      5591--REDEF
IFSFA_PARAM.EOMCHAR#
      5945**DCL      5946--REDEF
IFSFA_PARAM.SIG1
      5939**DCL      5939--REDEF
IFSFA_PARAM.SIG2
      5939**DCL      5940--REDEF
IN_RES
      5512**DCL      5512--REDEF
IN_SN.SN
      5528**DCL      5529--REDEF
PL6.E3A0      #008=VPD$CONTINUE File=VPD$UTIL.:E05TSI                            WED 07/30/97 07:26 Page:213  
M$CLRSTK
        88**DCL-ENT  7012--CALL
M$PROMPT
        54**DCL-ENT  7007--CALL
OCB.DEV_MASK.IC
      5312**DCL      7008>>IF
OCB.FLAVOR.FORMATTED
      5319**DCL      7008>>IF
OCB.TYPE
      5274**DCL      5275--REDEF
OFSFA_PARAM.EOMCHAR#
      5975**DCL      5976--REDEF
OFSFA_PARAM.SIG1
      5969**DCL      5969--REDEF
OFSFA_PARAM.SIG2
      5969**DCL      5970--REDEF
OLD_BREAKS
      5221**DCL      7003<<ASSIGN   7003>>ASSIGN
OUT_SN.SN
      5546**DCL      5547--REDEF
PROMPT_2
      7001**DCL      7006--ASSIGN
SPEC_BUF
      5224**DCL      5224--REDEF

PL6.E3A0      #009=VPD$COUNTER_BUMP File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:27 Page:214  
      801        1        /*T***********************************************************/
      802        2        /*T*                                                         */
      803        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      804        4        /*T*                                                         */
      805        5        /*T***********************************************************/
      806        6        VPD$COUNTER_BUMP: PROC(FUNCTION);
      807        7        /*D* NAME: VPD$COUNTER_BUMP
      808        8             CALL: CALL VPD$COUNTER_BUMP;
      809        9             DESCRIPTION:  This routine bumps the total file and granule
      810       10                          counters.  Entry point VPD$COUNTER_PRINT prints them through M$ME.
      811       11                           The required parameter FUNCTION tells what was done
      812       12                           to the file.
      813       13
      814       14                           FUNCTION  function
      815       15                           --------  --------
      816       16                               0     copy
      817       17                               1     delete
      818       18                               2     list
      819       19        */
      820       20        /**/
      821       21        /*  PARAMETERS  */
      822       22        /**/
      823       23    1   DCL FUNCTION SBIN WORD;
      824       24        /**/
      825       25        /*  INCLUDE FILES  */
      826       26        /**/
      827       27        %INCLUDE VP_DATA_R;
      828     7014        %INCLUDE F$DCB;
      829     7063        %INCLUDE FM$FIT;
      830     7284        %CODE03;
      831     7291        /**/
      832     7292        /*  SUBS  */
      833     7293        /**/
      834     7294        %SUB NO# = '0'B;
      835     7295        /**/
      836     7296        /*  LOCAL AUTO  */
      837     7297        /**/
PL6.E3A0      #009=VPD$COUNTER_BUMP File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:27 Page:215  
      838     7298    1   DCL CODE$ PTR;
      839     7299    1   DCL OUT_BUF CHAR(50) AUTO;
      840     7300    1   DCL CHAR_6 CHAR(6);
      841     7301    1   DCL IDX SBIN WORD;
      842     7302        /**/
      843     7303        /*  CONSTANT  */
      844     7304        /**/
      845     7305    1   DCL MOP_6_BUF (0:1) BIT(9) CONSTANT INIT(%MVZB5,%MVC1);
      846     7306    1   DCL FUNCTION_NAME (0:4) CHAR(10) STATIC INIT(
      847     7307    1         'copied    ','deleted   ','listed    ',
      848     7308    1         '!BUG!     ','!BUG!     ');
      849     7309        /**/
      850     7310        /*  ENTRY DCLS  */
      851     7311        /**/
      852     7312    1   DCL XSF$LOCCODT ENTRY(2) ALTRET;
      853     7313        /**/
      854     7314    1           TOT_FILES(FUNCTION) = TOT_FILES(FUNCTION)+1;
      855     7315    1           CODE$ = ADDR(FPARAM_BUF);
      856     7316    1           CALL XSF$LOCCODT(CODE$,3) ALTRET(NO_CODE_3);
      857     7317    1           TOT_GRANS(FUNCTION) = TOT_GRANS(FUNCTION) + CODE$->CODE03.NGAVAL + CODE$->
              7317                    CODE03.UGRANS;
      858     7318    1   NO_CODE_3: ;
      859     7319    1           RETURN;
      860     7320        /**/
      861     7321    1   VPD$COUNTER_PRINT: ENTRY(FUNCTION);
      862     7322    1           IF TOT_FILES(FUNCTION) = 0
      863     7323    1            THEN
      864     7324    1              IF ~ERR_FLG
      865     7325    1               THEN                        /* Print 'no files'                   */
      866     7326    2               DO;
      867     7327    2                  CALL CONCAT(OUT_BUF,'  Nothing ',FUNCTION_NAME(FUNCTION));
      868     7328    2                  FPT_WRITE_ME.BUF_   = VECTOR(OUT_BUF);
      869     7329    2                  FPT_WRITE_ME.V.DVBYTE.VFC# = %NO#;
      870     7330    2                  CALL M$WRITE(FPT_WRITE_ME);
      871     7331    2                  END;
      872     7332    1               ELSE
      873     7333    1                 ;
PL6.E3A0      #009=VPD$COUNTER_BUMP File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:27 Page:216  
      874     7334    1            ELSE                           /* Print summary                      */
      875     7335    2            DO;
      876     7336    2               CALL BINCHAR(CHAR_6,TOT_FILES(FUNCTION));
      877     7337    2               CALL EDITCHAR(CHAR_6,
      878     7338    2                 0,
      879     7339    2                 6,
      880     7340    2                 MOP_6_BUF,
      881     7341    2                 CHAR_6);
      882     7342    2               CALL CONCAT(OUT_BUF,CHAR_6,' file');
      883     7343    2               IDX = 11;
      884     7344    2               IF TOT_FILES(FUNCTION) ~= 1
      885     7345    2                THEN
      886     7346    3                DO;
      887     7347    3                   CALL INSERT(OUT_BUF,IDX,1,'s');
      888     7348    3                   IDX = IDX +1;
      889     7349    3                   END;
      890     7350    2               IF TOT_GRANS(FUNCTION) > 0 AND ICB.DEV_MASK.MAN_DISC
      891     7351    2                THEN                       /* Report GRANS, too                  */
      892     7352    3                DO;
      893     7353    3                   CALL BINCHAR(CHAR_6,TOT_GRANS(FUNCTION));
      894     7354    3                   CALL EDITCHAR(CHAR_6,
      895     7355    3                     0,
      896     7356    3                     6,
      897     7357    3                     MOP_6_BUF,
      898     7358    3                     CHAR_6);
      899     7359    3                   CALL INSERT(OUT_BUF,IDX,,', ',CHAR_6,' granule');
      900     7360    3                   IDX = IDX + 16;
      901     7361    3                   IF TOT_GRANS(FUNCTION) ~= 1
      902     7362    3                    THEN
      903     7363    4                    DO;
      904     7364    4                       CALL INSERT(OUT_BUF,IDX,1,'s');
      905     7365    4                       IDX = IDX +1;
      906     7366    4                       END;
      907     7367    3                   END;
      908     7368    2               CALL INSERT(OUT_BUF,IDX,,' ',FUNCTION_NAME(FUNCTION));
      909     7369    2               FPT_WRITE_ME.BUF_   = VECTOR(OUT_BUF);
      910     7370    2               FPT_WRITE_ME.V.DVBYTE.VFC# = %NO#;
PL6.E3A0      #009=VPD$COUNTER_BUMP File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:27 Page:217  
      911     7371    2               CALL M$WRITE(FPT_WRITE_ME);
      912     7372    2               END;
      913     7373    1           RETURN;
      914     7374        /**/
      915     7375    1   END VPD$COUNTER_BUMP;
      916     7376        %EOD;

PL6.E3A0      #009=VPD$COUNTER_BUMP File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:27 Page:218  
--  Include file information  --

   FM$FIT.:E05TOU  is referenced.
   F$DCB.:E05TOU  cannot be made into a system file and is referenced.
   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$COUNTER_BUMP.

   Procedure VPD$COUNTER_BUMP requires 170 words for executable code.
   Procedure VPD$COUNTER_BUMP requires 24 words of local(AUTO) storage.

PL6.E3A0      #009=VPD$COUNTER_BUMP File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:27 Page:219  

 Object Unit name= VPD$COUNTER_BUMP                           File name= VPD$UTIL.:E05TOU
 UTS= JUL 30 '97 07:27:32.52 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$EI
    2   DCB   even  none     0      0  M$EO
    3   DCB   even  none     0      0  M$EO1
    4   DCB   even  none     0      0  M$ME
    5   DCB   even  none     0      0  M$SI
    6   DCB   even  none     0      0  M$READFILE
    7   DCB   even  none     0      0  M$DO
    8   DCB   even  none     0      0  M$STD1
    9   DCB   even  none     0      0  M$SORT1
   10  RoData even  UTS      9     11  VPD$COUNTER_BUMP
   11   Data  even  none    13     15  VPD$COUNTER_BUMP
   12   Proc  even  none   170    252  VPD$COUNTER_BUMP
   13  RoData even  none     5      5  VPD$COUNTER_BUMP

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    12      0   yes            yes      Std        1  VPD$COUNTER_BUMP
    12     41                  yes      Std        1  VPD$COUNTER_PRINT
PL6.E3A0      #009=VPD$COUNTER_BUMP File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:27 Page:220  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       2 XSF$LOCCODT
                       nStd      0 X66_AUTO_1
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  ERR_FLG                               BREAK_LOC
     BREAK_MESSAGE_REPORTER                FPARAM_BUF                            TOT_FILES
     TOT_GRANS                             SPEC_BUF                              IN_RES
     ICB                                   M$EI                                  M$EO
     M$EO1                                 M$ME                                  M$SI
     M$READFILE                            M$DO                                  M$STD1
     M$SORT1                               FPT_WRITE_ME                          B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #009=VPD$COUNTER_BUMP File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:27 Page:221  


      801        1        /*T***********************************************************/
      802        2        /*T*                                                         */
      803        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      804        4        /*T*                                                         */
      805        5        /*T***********************************************************/
      806        6        VPD$COUNTER_BUMP: PROC(FUNCTION);

      6 12 000000   000000 700200 xent  VPD$COUNTER* TSX0  ! X66_AUTO_1
        12 000001   000030 000001                    ZERO    24,1

      807        7        /*D* NAME: VPD$COUNTER_BUMP
      808        8             CALL: CALL VPD$COUNTER_BUMP;
      809        9             DESCRIPTION:  This routine bumps the total file and granule
      810       10                          counters. Entry point VPD$COUNTER_PRINT prints them through M$ME.
      811       11                           The required parameter FUNCTION tells what was done
      812       12                           to the file.
      813       13
      814       14                           FUNCTION  function
      815       15                           --------  --------
      816       16                               0     copy
      817       17                               1     delete
      818       18                               2     list
      819       19        */
      820       20        /**/
      821       21        /*  PARAMETERS  */
      822       22        /**/
      823       23    1   DCL FUNCTION SBIN WORD;
      824       24        /**/
      825       25        /*  INCLUDE FILES  */
      826       26        /**/
      827       27        %INCLUDE VP_DATA_R;
      828     7014        %INCLUDE F$DCB;
      829     7063        %INCLUDE FM$FIT;
      830     7284        %CODE03;
      831     7291        /**/
      832     7292        /*  SUBS  */
PL6.E3A0      #009=VPD$COUNTER_BUMP File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:27 Page:222  
      833     7293        /**/
      834     7294        %SUB NO# = '0'B;
      835     7295        /**/
      836     7296        /*  LOCAL AUTO  */
      837     7297        /**/
      838     7298    1   DCL CODE$ PTR;
      839     7299    1   DCL OUT_BUF CHAR(50) AUTO;
      840     7300    1   DCL CHAR_6 CHAR(6);
      841     7301    1   DCL IDX SBIN WORD;
      842     7302        /**/
      843     7303        /*  CONSTANT  */
      844     7304        /**/
      845     7305    1   DCL MOP_6_BUF (0:1) BIT(9) CONSTANT INIT(%MVZB5,%MVC1);
      846     7306    1   DCL FUNCTION_NAME (0:4) CHAR(10) STATIC INIT(
      847     7307    1         'copied    ','deleted   ','listed    ',
      848     7308    1         '!BUG!     ','!BUG!     ');
      849     7309        /**/
      850     7310        /*  ENTRY DCLS  */
      851     7311        /**/
      852     7312    1   DCL XSF$LOCCODT ENTRY(2) ALTRET;
      853     7313        /**/
      854     7314    1           TOT_FILES(FUNCTION) = TOT_FILES(FUNCTION)+1;

   7314 12 000002   200003 470500                    LDP0    @FUNCTION,,AUTO
        12 000003   000000 720100                    LXL0    0,,PR0
        12 000004   000000 721100                    LXL1    0,,PR0
        12 000005   000000 235011 xsym               LDA     TOT_FILES,X1
        12 000006   000001 035007                    ADLA    1,DL
        12 000007   000000 755010 xsym               STA     TOT_FILES,X0

      855     7315    1           CODE$ = ADDR(FPARAM_BUF);

   7315 12 000010   000000 236000 13                 LDQ     0
        12 000011   200004 756100                    STQ     CODE$,,AUTO

      856     7316    1           CALL XSF$LOCCODT(CODE$,3) ALTRET(NO_CODE_3);

PL6.E3A0      #009=VPD$COUNTER_BUMP File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:27 Page:223  
   7316 12 000012   000001 236000 13                 LDQ     1
        12 000013   200027 756100                    STQ     IDX+3,,AUTO
        12 000014   200004 631500                    EPPR1   CODE$,,AUTO
        12 000015   200026 451500                    STP1    IDX+2,,AUTO
        12 000016   200026 630500                    EPPR0   IDX+2,,AUTO
        12 000017   000020 631400 xsym               EPPR1   B_VECTNIL+16
        12 000020   000000 701000 xent               TSX1    XSF$LOCCODT
        12 000021   000040 702000 12                 TSX2    NO_CODE_3

      857     7317    1           TOT_GRANS(FUNCTION) = TOT_GRANS(FUNCTION) + CODE$->CODE03.NGAVAL + CODE$->
              7317                    CODE03.UGRANS;

   7317 12 000022   200003 470500                    LDP0    @FUNCTION,,AUTO
        12 000023   000000 720100                    LXL0    0,,PR0
        12 000024   000000 721100                    LXL1    0,,PR0
        12 000025   200004 471500                    LDP1    CODE$,,AUTO
        12 000026   100003 236100                    LDQ     3,,PR1
        12 000027   000032 376000 xsym               ANQ     B_VECTNIL+26
        12 000030   000000 036011 xsym               ADLQ    TOT_GRANS,X1
        12 000031   200026 756100                    STQ     IDX+2,,AUTO
        12 000032   100000 236100                    LDQ     0,,PR1
        12 000033   000032 376000 xsym               ANQ     B_VECTNIL+26
        12 000034   200027 756100                    STQ     IDX+3,,AUTO
        12 000035   200026 236100                    LDQ     IDX+2,,AUTO
        12 000036   200027 036100                    ADLQ    IDX+3,,AUTO
        12 000037   000000 756010 xsym               STQ     TOT_GRANS,X0

   7317 12 000040                       NO_CODE_3    null
      858     7318    1   NO_CODE_3: ;
      859     7319    1           RETURN;

   7319 12 000040   000000 702200 xent               TSX2  ! X66_ARET

      860     7320        /**/
      861     7321    1   VPD$COUNTER_PRINT: ENTRY(FUNCTION);

   7321 12 000041   000000 700200 xent  VPD$COUNTER* TSX0  ! X66_AUTO_1
PL6.E3A0      #009=VPD$COUNTER_BUMP File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:27 Page:224  
        12 000042   000030 000001                    ZERO    24,1

      862     7322    1           IF TOT_FILES(FUNCTION) = 0

   7322 12 000043   200003 470500                    LDP0    @FUNCTION,,AUTO
        12 000044   000000 720100                    LXL0    0,,PR0
        12 000045   000000 235010 xsym               LDA     TOT_FILES,X0
        12 000046   000077 601000 12                 TNZ     s:7336

      863     7323    1            THEN
      864     7324    1              IF ~ERR_FLG

   7324 12 000047   000000 236000 xsym               LDQ     ERR_FLG
        12 000050   400000 376003                    ANQ     -131072,DU
        12 000051   400000 676003                    ERQ     -131072,DU
        12 000052   000251 600000 12                 TZE     s:7373

      865     7325    1               THEN                        /* Print 'no files'                   */
      866     7326    2               DO;

      867     7327    2                  CALL CONCAT(OUT_BUF,'  Nothing ',FUNCTION_NAME(FUNCTION));

   7327 12 000053   000000 235100                    LDA     0,,PR0
        12 000054   040100 100400                    MLR     fill='040'O
        12 000055   000001 000012 10                 ADSC9   MOP_6_BUF+1              cn=0,n=10
        12 000056   200005 000012                    ADSC9   OUT_BUF,,AUTO            cn=0,n=10
        12 000057   000044 733000                    LRS     36
        12 000060   000012 402007                    MPY     10,DL
        12 000061   040100 100406                    MLR     fill='040'O
        12 000062   000000 000012 11                 ADSC9   FUNCTION_NAME,Q          cn=0,n=10
        12 000063   200007 400050                    ADSC9   OUT_BUF+2,,AUTO          cn=2,n=40

      868     7328    2                  FPT_WRITE_ME.BUF_   = VECTOR(OUT_BUF);

   7328 12 000064   000002 235000 13                 LDA     2
        12 000065   200026 452500                    STP2    IDX+2,,AUTO
        12 000066   200026 236100                    LDQ     IDX+2,,AUTO
PL6.E3A0      #009=VPD$COUNTER_BUMP File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:27 Page:225  
        12 000067   000005 036003                    ADLQ    5,DU
        12 000070   000004 757000 xsym               STAQ    FPT_WRITE_ME+4

      869     7329    2                  FPT_WRITE_ME.V.DVBYTE.VFC# = %NO#;

   7329 12 000071   000003 236000 13                 LDQ     3
        12 000072   000013 356000 xsym               ANSQ    FPT_WRITE_ME+11

      870     7330    2                  CALL M$WRITE(FPT_WRITE_ME);

   7330 12 000073   000000 630400 xsym               EPPR0   FPT_WRITE_ME
        12 000074   040001 713400                    CLIMB   write
        12 000075   401400 401760                    pmme    nvectors=4

      871     7331    2                  END;

   7331 12 000076   000251 710000 12                 TRA     s:7373

      872     7332    1               ELSE
      873     7333    1                 ;
      874     7334    1            ELSE                           /* Print summary                      */
      875     7335    2            DO;

      876     7336    2               CALL BINCHAR(CHAR_6,TOT_FILES(FUNCTION));

   7336 12 000077   000000 720100                    LXL0    0,,PR0
        12 000100   000000 635010                    EAA     0,X0
        12 000101   000020 771000                    ARL     16
        12 000102   000100 301405                    BTD
        12 000103   000000 000004 xsym               NDSC9   TOT_FILES,A              cn=0,s=lsgnf,sf=0,n=4
        12 000104   200022 030006                    NDSC9   CHAR_6,,AUTO             cn=0,s=nosgn,sf=0,n=6

      877     7337    2               CALL EDITCHAR(CHAR_6,

   7337 12 000105   100000 024500                    MVNE
        12 000106   200022 030006                    NDSC9   CHAR_6,,AUTO             cn=0,s=nosgn,sf=0,n=6
        12 000107   000000 000002 10                 ADSC9   MOP_6_BUF                cn=0,n=2
PL6.E3A0      #009=VPD$COUNTER_BUMP File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:27 Page:226  
        12 000110   200022 000006                    ADSC9   CHAR_6,,AUTO             cn=0,n=6

      878     7338    2                 0,
      879     7339    2                 6,
      880     7340    2                 MOP_6_BUF,
      881     7341    2                 CHAR_6);
      882     7342    2               CALL CONCAT(OUT_BUF,CHAR_6,' file');

   7342 12 000111   040100 100500                    MLR     fill='040'O
        12 000112   200022 000006                    ADSC9   CHAR_6,,AUTO             cn=0,n=6
        12 000113   200005 000006                    ADSC9   OUT_BUF,,AUTO            cn=0,n=6
        12 000114   040100 100400                    MLR     fill='040'O
        12 000115   000004 000005 10                 ADSC9   MOP_6_BUF+4              cn=0,n=5
        12 000116   200006 400054                    ADSC9   OUT_BUF+1,,AUTO          cn=2,n=44

      883     7343    2               IDX = 11;

   7343 12 000117   000013 235007                    LDA     11,DL
        12 000120   200024 755100                    STA     IDX,,AUTO

      884     7344    2               IF TOT_FILES(FUNCTION) ~= 1

   7344 12 000121   200003 470500                    LDP0    @FUNCTION,,AUTO
        12 000122   000000 720100                    LXL0    0,,PR0
        12 000123   000000 235010 xsym               LDA     TOT_FILES,X0
        12 000124   000001 115007                    CMPA    1,DL
        12 000125   000133 600000 12                 TZE     s:7350

      885     7345    2                THEN
      886     7346    3                DO;

      887     7347    3                   CALL INSERT(OUT_BUF,IDX,1,'s');

   7347 12 000126   200024 235100                    LDA     IDX,,AUTO
        12 000127   040105 100400                    MLR     fill='040'O
        12 000130   000004 000001 13                 ADSC9   4                        cn=0,n=1
        12 000131   200005 000001                    ADSC9   OUT_BUF,A,AUTO           cn=0,n=1
PL6.E3A0      #009=VPD$COUNTER_BUMP File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:27 Page:227  

      888     7348    3                   IDX = IDX +1;

   7348 12 000132   200024 054100                    AOS     IDX,,AUTO

      889     7349    3                   END;

      890     7350    2               IF TOT_GRANS(FUNCTION) > 0 AND ICB.DEV_MASK.MAN_DISC

   7350 12 000133   000000 720100                    LXL0    0,,PR0
        12 000134   000000 235010 xsym               LDA     TOT_GRANS,X0
        12 000135   000214 604400 12                 TMOZ    s:7368
        12 000136   000171 236000 xsym               LDQ     ICB+121
        12 000137   200000 316003                    CANQ    65536,DU
        12 000140   000214 600000 12                 TZE     s:7368

      891     7351    2                THEN                       /* Report GRANS, too                  */
      892     7352    3                DO;

      893     7353    3                   CALL BINCHAR(CHAR_6,TOT_GRANS(FUNCTION));

   7353 12 000141   000000 720100                    LXL0    0,,PR0
        12 000142   000000 635010                    EAA     0,X0
        12 000143   000020 771000                    ARL     16
        12 000144   000100 301405                    BTD
        12 000145   000000 000004 xsym               NDSC9   TOT_GRANS,A              cn=0,s=lsgnf,sf=0,n=4
        12 000146   200022 030006                    NDSC9   CHAR_6,,AUTO             cn=0,s=nosgn,sf=0,n=6

      894     7354    3                   CALL EDITCHAR(CHAR_6,

   7354 12 000147   100000 024500                    MVNE
        12 000150   200022 030006                    NDSC9   CHAR_6,,AUTO             cn=0,s=nosgn,sf=0,n=6
        12 000151   000000 000002 10                 ADSC9   MOP_6_BUF                cn=0,n=2
        12 000152   200022 000006                    ADSC9   CHAR_6,,AUTO             cn=0,n=6

      895     7355    3                     0,
      896     7356    3                     6,
PL6.E3A0      #009=VPD$COUNTER_BUMP File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:27 Page:228  
      897     7357    3                     MOP_6_BUF,
      898     7358    3                     CHAR_6);
      899     7359    3                   CALL INSERT(OUT_BUF,IDX,,', ',CHAR_6,' granule');

   7359 12 000153   200024 720100                    LXL0    IDX,,AUTO
        12 000154   777715 620010                    EAX0    -51,X0
        12 000155   777777 660003                    ERX0    -1,DU
        12 000156   200024 235100                    LDA     IDX,,AUTO
        12 000157   040145 100400                    MLR     fill='040'O
        12 000160   000006 000002 10                 ADSC9   MOP_6_BUF+6              cn=0,n=2
        12 000161   200005 000010                    ADSC9   OUT_BUF,A,AUTO           cn=0,n=*X0
        12 000162   200024 236100                    LDQ     IDX,,AUTO
        12 000163   000060 116007                    CMPQ    48,DL
        12 000164   000201 605000 12                 TPL     s:7360
        12 000165   777717 621006                    EAX1    -49,QL
        12 000166   777777 661003                    ERX1    -1,DU
        12 000167   040146 100500                    MLR     fill='040'O
        12 000170   200022 000006                    ADSC9   CHAR_6,,AUTO             cn=0,n=6
        12 000171   200005 400011                    ADSC9   OUT_BUF,Q,AUTO           cn=2,n=*X1
        12 000172   000052 116007                    CMPQ    42,DL
        12 000173   000201 605000 12                 TPL     s:7360
        12 000174   777725 622006                    EAX2    -43,QL
        12 000175   777777 662003                    ERX2    -1,DU
        12 000176   040146 100400                    MLR     fill='040'O
        12 000177   000007 000010 10                 ADSC9   MOP_6_BUF+7              cn=0,n=8
        12 000200   200007 000012                    ADSC9   OUT_BUF+2,Q,AUTO         cn=0,n=*X2

      900     7360    3                   IDX = IDX + 16;

   7360 12 000201   000020 236007                    LDQ     16,DL
        12 000202   200024 056100                    ASQ     IDX,,AUTO

      901     7361    3                   IF TOT_GRANS(FUNCTION) ~= 1

   7361 12 000203   000000 720100                    LXL0    0,,PR0
        12 000204   000000 235010 xsym               LDA     TOT_GRANS,X0
        12 000205   000001 115007                    CMPA    1,DL
PL6.E3A0      #009=VPD$COUNTER_BUMP File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:27 Page:229  
        12 000206   000214 600000 12                 TZE     s:7368

      902     7362    3                    THEN
      903     7363    4                    DO;

      904     7364    4                       CALL INSERT(OUT_BUF,IDX,1,'s');

   7364 12 000207   200024 235100                    LDA     IDX,,AUTO
        12 000210   040105 100400                    MLR     fill='040'O
        12 000211   000004 000001 13                 ADSC9   4                        cn=0,n=1
        12 000212   200005 000001                    ADSC9   OUT_BUF,A,AUTO           cn=0,n=1

      905     7365    4                       IDX = IDX +1;

   7365 12 000213   200024 054100                    AOS     IDX,,AUTO

      906     7366    4                       END;

      907     7367    3                   END;

      908     7368    2               CALL INSERT(OUT_BUF,IDX,,' ',FUNCTION_NAME(FUNCTION));

   7368 12 000214   000000 235100                    LDA     0,,PR0
        12 000215   200024 720100                    LXL0    IDX,,AUTO
        12 000216   777715 620010                    EAX0    -51,X0
        12 000217   777777 660003                    ERX0    -1,DU
        12 000220   200024 236100                    LDQ     IDX,,AUTO
        12 000221   040146 100400                    MLR     fill='040'O
        12 000222   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
        12 000223   200005 000010                    ADSC9   OUT_BUF,Q,AUTO           cn=0,n=*X0
        12 000224   000061 116007                    CMPQ    49,DL
        12 000225   000237 605000 12                 TPL     s:7369
        12 000226   000044 733000                    LRS     36
        12 000227   000012 402007                    MPY     10,DL
        12 000230   200024 721100                    LXL1    IDX,,AUTO
        12 000231   777716 621011                    EAX1    -50,X1
        12 000232   777777 661003                    ERX1    -1,DU
PL6.E3A0      #009=VPD$COUNTER_BUMP File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:27 Page:230  
        12 000233   200024 235100                    LDA     IDX,,AUTO
        12 000234   040145 100406                    MLR     fill='040'O
        12 000235   000000 000012 11                 ADSC9   FUNCTION_NAME,Q          cn=0,n=10
        12 000236   200005 200011                    ADSC9   OUT_BUF,A,AUTO           cn=1,n=*X1

      909     7369    2               FPT_WRITE_ME.BUF_   = VECTOR(OUT_BUF);

   7369 12 000237   000002 235000 13                 LDA     2
        12 000240   200026 452500                    STP2    IDX+2,,AUTO
        12 000241   200026 236100                    LDQ     IDX+2,,AUTO
        12 000242   000005 036003                    ADLQ    5,DU
        12 000243   000004 757000 xsym               STAQ    FPT_WRITE_ME+4

      910     7370    2               FPT_WRITE_ME.V.DVBYTE.VFC# = %NO#;

   7370 12 000244   000003 236000 13                 LDQ     3
        12 000245   000013 356000 xsym               ANSQ    FPT_WRITE_ME+11

      911     7371    2               CALL M$WRITE(FPT_WRITE_ME);

   7371 12 000246   000000 630400 xsym               EPPR0   FPT_WRITE_ME
        12 000247   040001 713400                    CLIMB   write
        12 000250   401400 401760                    pmme    nvectors=4

      912     7372    2               END;

      913     7373    1           RETURN;

   7373 12 000251   000000 702200 xent               TSX2  ! X66_ARET
      914     7374        /**/
      915     7375    1   END VPD$COUNTER_BUMP;
      916     7376        %EOD;

PL6.E3A0      #009=VPD$COUNTER_BUMP File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:27 Page:231  
--  Include file information  --

   FM$FIT.:E05TOU  is referenced.
   F$DCB.:E05TOU  cannot be made into a system file and is referenced.
   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$COUNTER_BUMP.
PL6.E3A0      #009=VPD$COUNTER_BUMP File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:27 Page:232  

 **** Variables and constants ****

  ****  Section 010 RoData VPD$COUNTER_BUMP

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/b BIT (9)     r     1 MOP_6_BUF(0:1)

  ****  Section 011  Data  VPD$COUNTER_BUMP

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c CHAR(10)    r     1 FUNCTION_NAME(0:4)

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @FUNCTION                 22-0-0/c CHAR(6)     r     1 CHAR_6
     4-0-0/w PTR         r     1 CODE$                     *0-0-0/w SBIN        r     1 FUNCTION
    24-0-0/w SBIN        r     1 IDX                        5-0-0/c CHAR(50)    r     1 OUT_BUF

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w EPTR        r     1 BREAK_MESSAGE_REPORTER
     0-0-0/w BIT         r     1 ERR_FLG
     0-0-0/d SBIN        r     1 FPARAM_BUF(0:1023)
     0-0-0/d STRC(432)   r     1 FPT_WRITE_ME               0-0-0/d STRC(5868)  r     1 ICB
     0-0-0/w SBIN        r     1 TOT_FILES(0:4)
     0-0-0/w SBIN        r     1 TOT_GRANS(0:4)

PL6.E3A0      #009=VPD$COUNTER_BUMP File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:27 Page:233  
  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(324)   r     1 CODE03                     0-0-0/d ASTR(3528)  r     1 F$DCB


   Procedure VPD$COUNTER_BUMP requires 170 words for executable code.
   Procedure VPD$COUNTER_BUMP requires 24 words of local(AUTO) storage.
PL6.E3A0      #009=VPD$COUNTER_BUMP File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:27 Page:234  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #009=VPD$COUNTER_BUMP File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:27 Page:235  
          MINI XREF LISTING

BREAK_LOC
      5234**DCL      5234--REDEF
CHAR_6
      7300**DCL      7336<<CALLBLT  7337<<CALLBLT  7337>>CALLBLT  7342>>CALLBLT  7353<<CALLBLT  7354<<CALLBLT
      7354>>CALLBLT  7359>>CALLBLT
CODE$
      7298**DCL      7315<<ASSIGN   7316<>CALL     7317>>ASSIGN   7317>>ASSIGN
CODE03.NGAVAL
      7287**DCL      7317>>ASSIGN
CODE03.UGRANS
      7285**DCL      7317>>ASSIGN
DEF_ICB.FID.STRING
      5832**DCL      5833--REDEF
DEV_ICB.FID.STRING
      5718**DCL      5719--REDEF
EI_KEY.KEY
      5930**DCL      5930--REDEF    5930--REDEF    5930--REDEF
EO_OCB.TYPE
      5430**DCL      5431--REDEF
ERR_FLG
      5197**DCL      7324>>IF
F$DCB.ACTPOS
      7040**DCL      7040--REDEF
F$DCB.ARS
      7015**DCL      7015--REDEF
F$DCB.ATTR
      7033**DCL      7034--REDEF
F$DCB.BORROW
      7048**DCL      7048--REDEF    7048--REDEF    7048--REDEF
F$DCB.DCBNAME.L
      7062**DCL      7062--IMP-SIZ
F$DCB.EOMCHAR
PL6.E3A0      #009=VPD$COUNTER_BUMP File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:27 Page:236  
      7019**DCL      7019--REDEF
F$DCB.FLDID
      7043**DCL      7043--REDEF
F$DCB.FORM$
      7037**DCL      7037--REDEF
F$DCB.FSECT
      7053**DCL      7053--REDEF
F$DCB.FSN
      7030**DCL      7030--REDEF    7030--REDEF    7031--REDEF
F$DCB.HEADER$
      7036**DCL      7036--REDEF
F$DCB.IXTNSIZE
      7034**DCL      7034--REDEF
F$DCB.LASTSTA$
      7024**DCL      7024--REDEF
F$DCB.LVL
      7049**DCL      7049--REDEF
F$DCB.NAME.C
      7024**DCL      7024--REDEF
F$DCB.NOEOF
      7045**DCL      7045--REDEF
F$DCB.NRECS
      7035**DCL      7035--REDEF
F$DCB.NRECX
      7054**DCL      7054--REDEF
F$DCB.OHDR
      7046**DCL      7046--REDEF
F$DCB.ORG
      7029**DCL      7029--REDEF
F$DCB.PRECNO
      7052**DCL      7052--REDEF
F$DCB.RCSZ
      7057**DCL      7057--REDEF
F$DCB.RES
      7025**DCL      7025--REDEF
F$DCB.SETX
PL6.E3A0      #009=VPD$COUNTER_BUMP File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:27 Page:237  
      7037**DCL      7037--REDEF
F$DCB.TAB$
      7036**DCL      7037--REDEF
F$DCB.TDA
      7051**DCL      7051--REDEF
F$DCB.WSN
      7026**DCL      7026--REDEF
FPARAM_BUF
      5235**DCL      7315--ASSIGN
FPT_CLOSE_EI.SN_
      6771**DCL      6771--REDEF
FPT_CLOSE_EI.UTL_
      6772**DCL      6772--REDEF
FPT_CLOSE_EI.V.EXPIRE#
      6786**DCL      6786--REDEF
FPT_CLOSE_EI.V.TYPE#
      6784**DCL      6784--REDEF
FPT_CLOSE_EI.V.XTNSIZE#
      6781**DCL      6781--REDEF    6783--REDEF
FPT_CLOSE_PTL.SN_
      6897**DCL      6897--REDEF
FPT_CLOSE_PTL.UTL_
      6898**DCL      6898--REDEF
FPT_CLOSE_PTL.V.EXPIRE#
      6912**DCL      6912--REDEF
FPT_CLOSE_PTL.V.TYPE#
      6910**DCL      6910--REDEF
FPT_CLOSE_PTL.V.XTNSIZE#
      6907**DCL      6907--REDEF    6909--REDEF
FPT_CLOSE_READ.SN_
      6813**DCL      6813--REDEF
FPT_CLOSE_READ.UTL_
      6814**DCL      6814--REDEF
FPT_CLOSE_READ.V.EXPIRE#
      6828**DCL      6828--REDEF
FPT_CLOSE_READ.V.TYPE#
PL6.E3A0      #009=VPD$COUNTER_BUMP File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:27 Page:238  
      6826**DCL      6826--REDEF
FPT_CLOSE_READ.V.XTNSIZE#
      6823**DCL      6823--REDEF    6825--REDEF
FPT_CLOSE_SI.SN_
      6981**DCL      6981--REDEF
FPT_CLOSE_SI.UTL_
      6982**DCL      6982--REDEF
FPT_CLOSE_SI.V.EXPIRE#
      6996**DCL      6996--REDEF
FPT_CLOSE_SI.V.TYPE#
      6994**DCL      6994--REDEF
FPT_CLOSE_SI.V.XTNSIZE#
      6991**DCL      6991--REDEF    6993--REDEF
FPT_CLOSE_STD.SN_
      6939**DCL      6939--REDEF
FPT_CLOSE_STD.UTL_
      6940**DCL      6940--REDEF
FPT_CLOSE_STD.V.EXPIRE#
      6954**DCL      6954--REDEF
FPT_CLOSE_STD.V.TYPE#
      6952**DCL      6952--REDEF
FPT_CLOSE_STD.V.XTNSIZE#
      6949**DCL      6949--REDEF    6951--REDEF
FPT_CLSEI_FT.SN_
      6855**DCL      6855--REDEF
FPT_CLSEI_FT.UTL_
      6856**DCL      6856--REDEF
FPT_CLSEI_FT.V.EXPIRE#
      6870**DCL      6870--REDEF
FPT_CLSEI_FT.V.TYPE#
      6868**DCL      6868--REDEF
FPT_CLSEI_FT.V.XTNSIZE#
      6865**DCL      6865--REDEF    6867--REDEF
FPT_OPEN_EI.ACSVEH_
      6426**DCL      6427--REDEF
FPT_OPEN_EI.ALTKEYS_
PL6.E3A0      #009=VPD$COUNTER_BUMP File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:27 Page:239  
      6432**DCL      6433--REDEF    6433--REDEF
FPT_OPEN_EI.HDR_
      6431**DCL      6432--REDEF
FPT_OPEN_EI.TAB_
      6430**DCL      6431--REDEF
FPT_OPEN_EI.UHL_
      6424**DCL      6425--REDEF    6425--REDEF
FPT_OPEN_EI.V.FSN#
      6464**DCL      6464--REDEF    6464--REDEF
FPT_OPEN_EI.WSN_
      6430**DCL      6430--REDEF
FPT_OPEN_EI_SAVE.ACSVEH_
      6535**DCL      6536--REDEF
FPT_OPEN_EI_SAVE.ALTKEYS_
      6541**DCL      6542--REDEF    6542--REDEF
FPT_OPEN_EI_SAVE.HDR_
      6540**DCL      6541--REDEF
FPT_OPEN_EI_SAVE.TAB_
      6539**DCL      6540--REDEF
FPT_OPEN_EI_SAVE.UHL_
      6533**DCL      6534--REDEF    6534--REDEF
FPT_OPEN_EI_SAVE.V.FSN#
      6573**DCL      6573--REDEF    6573--REDEF
FPT_OPEN_EI_SAVE.WSN_
      6539**DCL      6539--REDEF
FPT_OPEN_OUT.ACSVEH_
      6317**DCL      6318--REDEF
FPT_OPEN_OUT.ALTKEYS_
      6323**DCL      6324--REDEF    6324--REDEF
FPT_OPEN_OUT.HDR_
      6322**DCL      6323--REDEF
FPT_OPEN_OUT.TAB_
      6321**DCL      6322--REDEF
FPT_OPEN_OUT.UHL_
      6315**DCL      6316--REDEF    6316--REDEF
FPT_OPEN_OUT.V.FSN#
PL6.E3A0      #009=VPD$COUNTER_BUMP File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:27 Page:240  
      6355**DCL      6355--REDEF    6355--REDEF
FPT_OPEN_OUT.WSN_
      6321**DCL      6321--REDEF
FPT_OPEN_OUT_SAVE.ACSVEH_
      6208**DCL      6209--REDEF
FPT_OPEN_OUT_SAVE.ALTKEYS_
      6214**DCL      6215--REDEF    6215--REDEF
FPT_OPEN_OUT_SAVE.HDR_
      6213**DCL      6214--REDEF
FPT_OPEN_OUT_SAVE.TAB_
      6212**DCL      6213--REDEF
FPT_OPEN_OUT_SAVE.UHL_
      6206**DCL      6207--REDEF    6207--REDEF
FPT_OPEN_OUT_SAVE.V.FSN#
      6246**DCL      6246--REDEF    6246--REDEF
FPT_OPEN_OUT_SAVE.WSN_
      6212**DCL      6212--REDEF
FPT_READ_STD.STATION_
      6636**DCL      6637--REDEF
FPT_READ_STD.V.DVBYTE.REREAD#
      6648**DCL      6648--REDEF
FPT_READ_STD.V.INDX#
      6646**DCL      6646--REDEF
FPT_READ_UC.STATION_
      6597**DCL      6598--REDEF
FPT_READ_UC.V.DVBYTE.REREAD#
      6609**DCL      6609--REDEF
FPT_READ_UC.V.INDX#
      6607**DCL      6607--REDEF
FPT_WRITE_ME
      6703**DCL      7330<>CALL     7371<>CALL
FPT_WRITE_ME.BUF_
      6703**DCL      7328<<ASSIGN   7369<<ASSIGN
FPT_WRITE_ME.STATION_
      6705**DCL      6705--REDEF
FPT_WRITE_ME.V.DVBYTE.VFC#
PL6.E3A0      #009=VPD$COUNTER_BUMP File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:27 Page:241  
      6712**DCL      6712--REDEF    7329<<ASSIGN   7370<<ASSIGN
FPT_WRITE_OUT.STATION_
      6736**DCL      6736--REDEF
FPT_WRITE_OUT.V.DVBYTE.VFC#
      6743**DCL      6743--REDEF
FPT_WRITE_UC.STATION_
      6674**DCL      6674--REDEF
FPT_WRITE_UC.V.DVBYTE.VFC#
      6681**DCL      6681--REDEF
FROM_SN.SN
      5580**DCL      5581--REDEF
FUNCTION
        23**DCL         6--PROC     7314>>ASSIGN   7314>>ASSIGN   7317>>ASSIGN   7317>>ASSIGN   7321--ENTRY
      7322>>IF       7327>>CALLBLT  7336>>CALLBLT  7344>>IF       7350>>IF       7353>>CALLBLT  7361>>IF
      7368>>CALLBLT
FUNCTION_NAME
      7306**DCL      7327>>CALLBLT  7368>>CALLBLT
GETCMD.OUT$
      4787**DCL      4793--REDEF
ICB.DEV_MASK.MAN_DISC
      5656**DCL      7350>>IF
ICB.FID.STRING
      5604**DCL      5605--REDEF
IDX
      7301**DCL      7343<<ASSIGN   7347>>CALLBLT  7348<<ASSIGN   7348>>ASSIGN   7359>>CALLBLT  7360<<ASSIGN
      7360>>ASSIGN   7364>>CALLBLT  7365<<ASSIGN   7365>>ASSIGN   7368>>CALLBLT
IFSFA_PARAM.EOMCHAR#
      5959**DCL      5960--REDEF
IFSFA_PARAM.SIG1
      5953**DCL      5953--REDEF
IFSFA_PARAM.SIG2
      5953**DCL      5954--REDEF
IN_RES
      5526**DCL      5526--REDEF
IN_SN.SN
      5542**DCL      5543--REDEF
PL6.E3A0      #009=VPD$COUNTER_BUMP File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:27 Page:242  
M$WRITE
        45**DCL-ENT  7330--CALL     7371--CALL
MOP_6_BUF
      7305**DCL      7337>>CALLBLT  7354>>CALLBLT
NO_CODE_3
      7317**LABEL    7316--CALLALT
OCB.TYPE
      5288**DCL      5289--REDEF
OFSFA_PARAM.EOMCHAR#
      5989**DCL      5990--REDEF
OFSFA_PARAM.SIG1
      5983**DCL      5983--REDEF
OFSFA_PARAM.SIG2
      5983**DCL      5984--REDEF
OUT_BUF
      7299**DCL      7327<<CALLBLT  7328--ASSIGN   7342<<CALLBLT  7347<<CALLBLT  7359<<CALLBLT  7364<<CALLBLT
      7368<<CALLBLT  7369--ASSIGN
OUT_SN.SN
      5560**DCL      5561--REDEF
SPEC_BUF
      5238**DCL      5238--REDEF
TOT_FILES
      5237**DCL      7314<<ASSIGN   7314>>ASSIGN   7322>>IF       7336>>CALLBLT  7344>>IF
TOT_GRANS
      5237**DCL      7317<<ASSIGN   7317>>ASSIGN   7350>>IF       7353>>CALLBLT  7361>>IF
XSF$LOCCODT
      7312**DCL-ENT  7316--CALL

PL6.E3A0      #010=VPD$DECI_MUNGE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:28 Page:243  
      917        1        /*T***********************************************************/
      918        2        /*T*                                                         */
      919        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      920        4        /*T*                                                         */
      921        5        /*T***********************************************************/
      922        6        VPD$DECI_MUNGE: PROC(DEC_BLOCK$,LOW_LIM,HIGH_LIM,TO_WORD) ALTRET;
      923        7        /*I* NAME: VPD$DECI_MUNGE
      924        8             PURPOSE: To process a parse node for a possible decimal number.
      925        9             CALL: CALL VPD$DECI_MUNGE(DEC_BLOCK$,TO_WORD) ALTRET(ERROR);
      926       10             DESCRIPTION: This procedure converts a decimal number into a
      927       11                   WORD integer, shifted over to give room for the decimal.
      928       12
      929       13                   In the event of an error, we ALTRET without printing any
      930       14                   kind of message.
      931       15        */
      932       16        /**/
      933       17        /*  PARAMETERS  */
      934       18        /**/
      935       19    1   DCL DEC_BLOCK$ PTR;
      936       20    1   DCL TO_WORD SBIN WORD;
      937       21    1   DCL LOW_LIM SBIN WORD;
      938       22    1   DCL HIGH_LIM SBIN WORD;
      939       23        /**/
      940       24        /* INCLUDE FILES  */
      941       25        /**/
      942       26        %INCLUDE VP_DATA_R;
      943     7013        /**/
      944     7014        /*  BASED  */
      945     7015        /**/
      946     7016        %PARSE$OUT(NAME = OUT$BLK,STCLASS = BASED);
      947     7061        %PARSE$SYM(NAME = OUT$SYM,STCLASS = BASED);
      948     7099    1   DCL 1 TEXT$C BASED,
      949     7100    1         2 LEN UBIN BYTE UNAL,
      950     7101    1         2 STRING CHAR(TEXT$C.LEN);
      951     7102        /**/
      952     7103        /*  LOCAL AUTO  */
      953     7104        /**/
PL6.E3A0      #010=VPD$DECI_MUNGE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:28 Page:244  
      954     7105    1   DCL DEC$ PTR;
      955     7106    1   DCL DEC_NUM SBIN WORD;
      956     7107    1   DCL SIGN_NUM SBIN WORD;
      957     7108        /**/
      958     7109        /*  ENTRY DCLS  */
      959     7110        /**/
      960     7111        %VP_ENTRIES (OMIT=VPD$DECI_MUNGE);
      961     7319        /**/
      962     7320    1           DEC$ = DEC_BLOCK$->OUT$BLK.SUBLK$(0);
      963     7321    1           SIGN_NUM = 1;
      964     7322    1           IF DEC$->OUT$BLK.CODE = 100
      965     7323    1            THEN
      966     7324    2            DO;
      967     7325    2               CALL VPD$TEXTC_CHARBIN(DEC_NUM,
      968     7326    2                 DEC$ -> OUT$BLK.SUBLK$(0),
      969     7327    2                 99999,SIGN_NUM) ALTRET(BAD_DECIMAL);
      970     7328    2               TO_WORD = DEC_NUM*1000;
      971     7329    2               DEC$ = DEC_BLOCK$->OUT$BLK.SUBLK$(DEC_BLOCK$->OUT$BLK.NSUBLKS-1);
      972     7330    2               END;
      973     7331    1           IF DEC$->OUT$BLK.CODE = 101
      974     7332    1            THEN
      975     7333    2            DO;
      976     7334    2               CALL VPD$TEXTC_CHARBIN(DEC_NUM,
      977     7335    2                 DEC$->OUT$BLK.SUBLK$(0),
      978     7336    2                 999) ALTRET(BAD_DECIMAL);
      979     7337    3               DO CASE(DEC$->OUT$BLK.SUBLK$(0)->TEXT$C.LEN);
      980     7338    3                CASE(1);
      981     7339    3                  DEC_NUM = DEC_NUM * 100;
      982     7340    3                CASE(2);
      983     7341    3                  DEC_NUM = DEC_NUM * 10;
      984     7342    3                END;                       /* END CASE                           */
      985     7343    2               TO_WORD = TO_WORD + DEC_NUM;
      986     7344    2               END;
      987     7345    1           TO_WORD = TO_WORD * SIGN_NUM;
      988     7346    1           IF TO_WORD < LOW_LIM
      989     7347    1             OR TO_WORD > HIGH_LIM
      990     7348    1            THEN
PL6.E3A0      #010=VPD$DECI_MUNGE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:28 Page:245  
      991     7349    1              GOTO BAD_DECIMAL;
      992     7350    1           RETURN;
      993     7351        /**/
      994     7352    1   BAD_DECIMAL: ;
      995     7353    1           ALTRETURN;
      996     7354        /**/
      997     7355    1   END VPD$DECI_MUNGE;
      998     7356        %EOD;

PL6.E3A0      #010=VPD$DECI_MUNGE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:28 Page:246  
--  Include file information  --

   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$DECI_MUNGE.

   Procedure VPD$DECI_MUNGE requires 84 words for executable code.
   Procedure VPD$DECI_MUNGE requires 14 words of local(AUTO) storage.

PL6.E3A0      #010=VPD$DECI_MUNGE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:28 Page:247  

 Object Unit name= VPD$DECI_MUNGE                             File name= VPD$UTIL.:E05TOU
 UTS= JUL 30 '97 07:28:27.04 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$EI
    2   DCB   even  none     0      0  M$EO
    3   DCB   even  none     0      0  M$EO1
    4   DCB   even  none     0      0  M$ME
    5   DCB   even  none     0      0  M$SI
    6   DCB   even  none     0      0  M$READFILE
    7   DCB   even  none     0      0  M$DO
    8   DCB   even  none     0      0  M$STD1
    9   DCB   even  none     0      0  M$SORT1
   10   Proc  even  none    84    124  VPD$DECI_MUNGE
   11  RoData even  none     4      4  VPD$DECI_MUNGE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    10      0   yes    yes     yes      Std        4  VPD$DECI_MUNGE
PL6.E3A0      #010=VPD$DECI_MUNGE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:28 Page:248  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       4 VPD$TEXTC_CHARBIN
                       nStd      0 X66_AUTO_4
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  BREAK_LOC                             BREAK_MESSAGE_REPORTER
     SPEC_BUF                              IN_RES                                M$EI
     M$EO                                  M$EO1                                 M$ME
     M$SI                                  M$READFILE                            M$DO
     M$STD1                                M$SORT1                               B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #010=VPD$DECI_MUNGE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:28 Page:249  


      917        1        /*T***********************************************************/
      918        2        /*T*                                                         */
      919        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      920        4        /*T*                                                         */
      921        5        /*T***********************************************************/
      922        6        VPD$DECI_MUNGE: PROC(DEC_BLOCK$,LOW_LIM,HIGH_LIM,TO_WORD) ALTRET;

      6 10 000000   000000 700200 xent  VPD$DECI_MU* TSX0  ! X66_AUTO_4
        10 000001   000016 000004                    ZERO    14,4

      923        7        /*I* NAME: VPD$DECI_MUNGE
      924        8             PURPOSE: To process a parse node for a possible decimal number.
      925        9             CALL: CALL VPD$DECI_MUNGE(DEC_BLOCK$,TO_WORD) ALTRET(ERROR);
      926       10             DESCRIPTION: This procedure converts a decimal number into a
      927       11                   WORD integer, shifted over to give room for the decimal.
      928       12
      929       13                   In the event of an error, we ALTRET without printing any
      930       14                   kind of message.
      931       15        */
      932       16        /**/
      933       17        /*  PARAMETERS  */
      934       18        /**/
      935       19    1   DCL DEC_BLOCK$ PTR;
      936       20    1   DCL TO_WORD SBIN WORD;
      937       21    1   DCL LOW_LIM SBIN WORD;
      938       22    1   DCL HIGH_LIM SBIN WORD;
      939       23        /**/
      940       24        /* INCLUDE FILES  */
      941       25        /**/
      942       26        %INCLUDE VP_DATA_R;
      943     7013        /**/
      944     7014        /*  BASED  */
      945     7015        /**/
      946     7016        %PARSE$OUT(NAME = OUT$BLK,STCLASS = BASED);
      947     7061        %PARSE$SYM(NAME = OUT$SYM,STCLASS = BASED);
      948     7099    1   DCL 1 TEXT$C BASED,
PL6.E3A0      #010=VPD$DECI_MUNGE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:28 Page:250  
      949     7100    1         2 LEN UBIN BYTE UNAL,
      950     7101    1         2 STRING CHAR(TEXT$C.LEN);
      951     7102        /**/
      952     7103        /*  LOCAL AUTO  */
      953     7104        /**/
      954     7105    1   DCL DEC$ PTR;
      955     7106    1   DCL DEC_NUM SBIN WORD;
      956     7107    1   DCL SIGN_NUM SBIN WORD;
      957     7108        /**/
      958     7109        /*  ENTRY DCLS  */
      959     7110        /**/
      960     7111        %VP_ENTRIES (OMIT=VPD$DECI_MUNGE);
      961     7319        /**/
      962     7320    1           DEC$ = DEC_BLOCK$->OUT$BLK.SUBLK$(0);

   7320 10 000002   200003 470500                    LDP0    @DEC_BLOCK$,,AUTO
        10 000003   000000 471500                    LDP1    0,,PR0
        10 000004   100003 236100                    LDQ     3,,PR1
        10 000005   200007 756100                    STQ     DEC$,,AUTO

      963     7321    1           SIGN_NUM = 1;

   7321 10 000006   000001 235007                    LDA     1,DL
        10 000007   200011 755100                    STA     SIGN_NUM,,AUTO

      964     7322    1           IF DEC$->OUT$BLK.CODE = 100

   7322 10 000010   200007 471500                    LDP1    DEC$,,AUTO
        10 000011   100000 720100                    LXL0    0,,PR1
        10 000012   000144 100003                    CMPX0   100,DU
        10 000013   000042 601000 10                 TNZ     s:7331

      965     7323    1            THEN
      966     7324    2            DO;

      967     7325    2               CALL VPD$TEXTC_CHARBIN(DEC_NUM,

PL6.E3A0      #010=VPD$DECI_MUNGE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:28 Page:251  
   7325 10 000014   200011 633500                    EPPR3   SIGN_NUM,,AUTO
        10 000015   200015 453500                    STP3    SIGN_NUM+4,,AUTO
        10 000016   000001 236000 11                 LDQ     1
        10 000017   200014 756100                    STQ     SIGN_NUM+3,,AUTO
        10 000020   200007 236100                    LDQ     DEC$,,AUTO
        10 000021   000003 036003                    ADLQ    3,DU
        10 000022   200013 756100                    STQ     SIGN_NUM+2,,AUTO
        10 000023   200010 634500                    EPPR4   DEC_NUM,,AUTO
        10 000024   200012 454500                    STP4    SIGN_NUM+1,,AUTO
        10 000025   200012 630500                    EPPR0   SIGN_NUM+1,,AUTO
        10 000026   000022 631400 xsym               EPPR1   B_VECTNIL+18
        10 000027   000000 701000 xent               TSX1    VPD$TEXTC_CHARBIN
        10 000030   000123 702000 10                 TSX2    BAD_DECIMAL

      968     7326    2                 DEC$ -> OUT$BLK.SUBLK$(0),
      969     7327    2                 99999,SIGN_NUM) ALTRET(BAD_DECIMAL);
      970     7328    2               TO_WORD = DEC_NUM*1000;

   7328 10 000031   200006 470500                    LDP0    @TO_WORD,,AUTO
        10 000032   200010 236100                    LDQ     DEC_NUM,,AUTO
        10 000033   001750 402007                    MPY     1000,DL
        10 000034   000000 756100                    STQ     0,,PR0

      971     7329    2               DEC$ = DEC_BLOCK$->OUT$BLK.SUBLK$(DEC_BLOCK$->OUT$BLK.NSUBLKS-1);

   7329 10 000035   200003 471500                    LDP1    @DEC_BLOCK$,,AUTO
        10 000036   100000 473500                    LDP3    0,,PR1
        10 000037   300001 220100                    LDX0    1,,PR3
        10 000040   300002 236110                    LDQ     2,X0,PR3
        10 000041   200007 756100                    STQ     DEC$,,AUTO

      972     7330    2               END;

      973     7331    1           IF DEC$->OUT$BLK.CODE = 101

   7331 10 000042   200007 470500                    LDP0    DEC$,,AUTO
        10 000043   000000 720100                    LXL0    0,,PR0
PL6.E3A0      #010=VPD$DECI_MUNGE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:28 Page:252  
        10 000044   000145 100003                    CMPX0   101,DU
        10 000045   000110 601000 10                 TNZ     s:7345

      974     7332    1            THEN
      975     7333    2            DO;

      976     7334    2               CALL VPD$TEXTC_CHARBIN(DEC_NUM,

   7334 10 000046   000003 236000 11                 LDQ     3
        10 000047   200014 756100                    STQ     SIGN_NUM+3,,AUTO
        10 000050   200007 236100                    LDQ     DEC$,,AUTO
        10 000051   000003 036003                    ADLQ    3,DU
        10 000052   200013 756100                    STQ     SIGN_NUM+2,,AUTO
        10 000053   200010 631500                    EPPR1   DEC_NUM,,AUTO
        10 000054   200012 451500                    STP1    SIGN_NUM+1,,AUTO
        10 000055   200012 630500                    EPPR0   SIGN_NUM+1,,AUTO
        10 000056   000021 631400 xsym               EPPR1   B_VECTNIL+17
        10 000057   000000 701000 xent               TSX1    VPD$TEXTC_CHARBIN
        10 000060   000123 702000 10                 TSX2    BAD_DECIMAL

      977     7335    2                 DEC$->OUT$BLK.SUBLK$(0),
      978     7336    2                 999) ALTRET(BAD_DECIMAL);
      979     7337    3               DO CASE(DEC$->OUT$BLK.SUBLK$(0)->TEXT$C.LEN);

   7337 10 000061   200007 470500                    LDP0    DEC$,,AUTO
        10 000062   000003 471500                    LDP1    3,,PR0
        10 000063   000100 101500                    MRL     fill='000'O
        10 000064   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
        10 000065   200012 000002                    ADSC9   SIGN_NUM+1,,AUTO         cn=0,n=2
        10 000066   200012 220100                    LDX0    SIGN_NUM+1,,AUTO
        10 000067   000003 100003                    CMPX0   3,DU
        10 000070   000072 602010 10                 TNC     s:7337+9,X0
        10 000071   000104 710000 10                 TRA     s:7343
        10 000072   000104 710000 10                 TRA     s:7343
        10 000073   000075 710000 10                 TRA     s:7339
        10 000074   000101 710000 10                 TRA     s:7341

PL6.E3A0      #010=VPD$DECI_MUNGE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:28 Page:253  
      980     7338    3                CASE(1);

      981     7339    3                  DEC_NUM = DEC_NUM * 100;

   7339 10 000075   200010 236100                    LDQ     DEC_NUM,,AUTO
        10 000076   000144 402007                    MPY     100,DL
        10 000077   200010 756100                    STQ     DEC_NUM,,AUTO
        10 000100   000104 710000 10                 TRA     s:7343

      982     7340    3                CASE(2);

      983     7341    3                  DEC_NUM = DEC_NUM * 10;

   7341 10 000101   200010 236100                    LDQ     DEC_NUM,,AUTO
        10 000102   000012 402007                    MPY     10,DL
        10 000103   200010 756100                    STQ     DEC_NUM,,AUTO

      984     7342    3                END;                       /* END CASE                           */

      985     7343    2               TO_WORD = TO_WORD + DEC_NUM;

   7343 10 000104   200006 471500                    LDP1    @TO_WORD,,AUTO
        10 000105   100000 236100                    LDQ     0,,PR1
        10 000106   200010 036100                    ADLQ    DEC_NUM,,AUTO
        10 000107   100000 756100                    STQ     0,,PR1

      986     7344    2               END;

      987     7345    1           TO_WORD = TO_WORD * SIGN_NUM;

   7345 10 000110   200006 471500                    LDP1    @TO_WORD,,AUTO
        10 000111   100000 236100                    LDQ     0,,PR1
        10 000112   200011 402100                    MPY     SIGN_NUM,,AUTO
        10 000113   100000 756100                    STQ     0,,PR1

      988     7346    1           IF TO_WORD < LOW_LIM

PL6.E3A0      #010=VPD$DECI_MUNGE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:28 Page:254  
   7346 10 000114   200004 473500                    LDP3    @LOW_LIM,,AUTO
        10 000115   300000 116100                    CMPQ    0,,PR3
        10 000116   000123 604000 10                 TMI     BAD_DECIMAL
        10 000117   200005 474500                    LDP4    @HIGH_LIM,,AUTO
        10 000120   400000 116100                    CMPQ    0,,PR4
        10 000121   000123 605400 10                 TPNZ    BAD_DECIMAL

      989     7347    1             OR TO_WORD > HIGH_LIM
      990     7348    1            THEN
      991     7349    1              GOTO BAD_DECIMAL;
      992     7350    1           RETURN;

   7350 10 000122   000000 702200 xent               TSX2  ! X66_ARET

   7346 10 000123                       BAD_DECIMAL  null
      993     7351        /**/
      994     7352    1   BAD_DECIMAL: ;
      995     7353    1           ALTRETURN;

   7353 10 000123   000000 702200 xent               TSX2  ! X66_AALT
      996     7354        /**/
      997     7355    1   END VPD$DECI_MUNGE;
      998     7356        %EOD;

PL6.E3A0      #010=VPD$DECI_MUNGE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:28 Page:255  
--  Include file information  --

   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$DECI_MUNGE.
PL6.E3A0      #010=VPD$DECI_MUNGE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:28 Page:256  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @DEC_BLOCK$                5-0-0/w PTR         r     1 @HIGH_LIM
     4-0-0/w PTR         r     1 @LOW_LIM                   6-0-0/w PTR         r     1 @TO_WORD
     7-0-0/w PTR         r     1 DEC$                      *0-0-0/w PTR         r     1 DEC_BLOCK$
    10-0-0/w SBIN        r     1 DEC_NUM                   *0-0-0/w SBIN        r     1 HIGH_LIM
    *0-0-0/w SBIN        r     1 LOW_LIM                   11-0-0/w SBIN        r     1 SIGN_NUM
    *0-0-0/w SBIN        r     1 TO_WORD

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w EPTR        r     1 BREAK_MESSAGE_REPORTER

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(144)   r     1 OUT$BLK                    0-0-0/w ASTR(153)   r     1 OUT$SYM
     0-0-0/c ASTR(9)     r     1 TEXT$C


   Procedure VPD$DECI_MUNGE requires 84 words for executable code.
   Procedure VPD$DECI_MUNGE requires 14 words of local(AUTO) storage.
PL6.E3A0      #010=VPD$DECI_MUNGE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:28 Page:257  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #010=VPD$DECI_MUNGE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:28 Page:258  
          MINI XREF LISTING

BAD_DECIMAL
      7346**LABEL    7325--CALLALT  7334--CALLALT  7349--GOTO
BREAK_LOC
      5233**DCL      5233--REDEF
DEC$
      7105**DCL      7320<<ASSIGN   7322>>IF       7325>>CALL     7329<<ASSIGN   7331>>IF       7334>>CALL
      7337>>DOCASE
DEC_BLOCK$
        19**DCL         6--PROC     7320>>ASSIGN   7329>>ASSIGN   7329>>ASSIGN
DEC_NUM
      7106**DCL      7325<>CALL     7328>>ASSIGN   7334<>CALL     7339<<ASSIGN   7339>>ASSIGN   7341<<ASSIGN
      7341>>ASSIGN   7343>>ASSIGN
DEF_ICB.FID.STRING
      5831**DCL      5832--REDEF
DEV_ICB.FID.STRING
      5717**DCL      5718--REDEF
EI_KEY.KEY
      5929**DCL      5929--REDEF    5929--REDEF    5929--REDEF
EO_OCB.TYPE
      5429**DCL      5430--REDEF
FPT_CLOSE_EI.SN_
      6770**DCL      6770--REDEF
FPT_CLOSE_EI.UTL_
      6771**DCL      6771--REDEF
FPT_CLOSE_EI.V.EXPIRE#
      6785**DCL      6785--REDEF
FPT_CLOSE_EI.V.TYPE#
      6783**DCL      6783--REDEF
FPT_CLOSE_EI.V.XTNSIZE#
      6780**DCL      6780--REDEF    6782--REDEF
FPT_CLOSE_PTL.SN_
      6896**DCL      6896--REDEF
PL6.E3A0      #010=VPD$DECI_MUNGE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:28 Page:259  
FPT_CLOSE_PTL.UTL_
      6897**DCL      6897--REDEF
FPT_CLOSE_PTL.V.EXPIRE#
      6911**DCL      6911--REDEF
FPT_CLOSE_PTL.V.TYPE#
      6909**DCL      6909--REDEF
FPT_CLOSE_PTL.V.XTNSIZE#
      6906**DCL      6906--REDEF    6908--REDEF
FPT_CLOSE_READ.SN_
      6812**DCL      6812--REDEF
FPT_CLOSE_READ.UTL_
      6813**DCL      6813--REDEF
FPT_CLOSE_READ.V.EXPIRE#
      6827**DCL      6827--REDEF
FPT_CLOSE_READ.V.TYPE#
      6825**DCL      6825--REDEF
FPT_CLOSE_READ.V.XTNSIZE#
      6822**DCL      6822--REDEF    6824--REDEF
FPT_CLOSE_SI.SN_
      6980**DCL      6980--REDEF
FPT_CLOSE_SI.UTL_
      6981**DCL      6981--REDEF
FPT_CLOSE_SI.V.EXPIRE#
      6995**DCL      6995--REDEF
FPT_CLOSE_SI.V.TYPE#
      6993**DCL      6993--REDEF
FPT_CLOSE_SI.V.XTNSIZE#
      6990**DCL      6990--REDEF    6992--REDEF
FPT_CLOSE_STD.SN_
      6938**DCL      6938--REDEF
FPT_CLOSE_STD.UTL_
      6939**DCL      6939--REDEF
FPT_CLOSE_STD.V.EXPIRE#
      6953**DCL      6953--REDEF
FPT_CLOSE_STD.V.TYPE#
      6951**DCL      6951--REDEF
PL6.E3A0      #010=VPD$DECI_MUNGE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:28 Page:260  
FPT_CLOSE_STD.V.XTNSIZE#
      6948**DCL      6948--REDEF    6950--REDEF
FPT_CLSEI_FT.SN_
      6854**DCL      6854--REDEF
FPT_CLSEI_FT.UTL_
      6855**DCL      6855--REDEF
FPT_CLSEI_FT.V.EXPIRE#
      6869**DCL      6869--REDEF
FPT_CLSEI_FT.V.TYPE#
      6867**DCL      6867--REDEF
FPT_CLSEI_FT.V.XTNSIZE#
      6864**DCL      6864--REDEF    6866--REDEF
FPT_OPEN_EI.ACSVEH_
      6425**DCL      6426--REDEF
FPT_OPEN_EI.ALTKEYS_
      6431**DCL      6432--REDEF    6432--REDEF
FPT_OPEN_EI.HDR_
      6430**DCL      6431--REDEF
FPT_OPEN_EI.TAB_
      6429**DCL      6430--REDEF
FPT_OPEN_EI.UHL_
      6423**DCL      6424--REDEF    6424--REDEF
FPT_OPEN_EI.V.FSN#
      6463**DCL      6463--REDEF    6463--REDEF
FPT_OPEN_EI.WSN_
      6429**DCL      6429--REDEF
FPT_OPEN_EI_SAVE.ACSVEH_
      6534**DCL      6535--REDEF
FPT_OPEN_EI_SAVE.ALTKEYS_
      6540**DCL      6541--REDEF    6541--REDEF
FPT_OPEN_EI_SAVE.HDR_
      6539**DCL      6540--REDEF
FPT_OPEN_EI_SAVE.TAB_
      6538**DCL      6539--REDEF
FPT_OPEN_EI_SAVE.UHL_
      6532**DCL      6533--REDEF    6533--REDEF
PL6.E3A0      #010=VPD$DECI_MUNGE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:28 Page:261  
FPT_OPEN_EI_SAVE.V.FSN#
      6572**DCL      6572--REDEF    6572--REDEF
FPT_OPEN_EI_SAVE.WSN_
      6538**DCL      6538--REDEF
FPT_OPEN_OUT.ACSVEH_
      6316**DCL      6317--REDEF
FPT_OPEN_OUT.ALTKEYS_
      6322**DCL      6323--REDEF    6323--REDEF
FPT_OPEN_OUT.HDR_
      6321**DCL      6322--REDEF
FPT_OPEN_OUT.TAB_
      6320**DCL      6321--REDEF
FPT_OPEN_OUT.UHL_
      6314**DCL      6315--REDEF    6315--REDEF
FPT_OPEN_OUT.V.FSN#
      6354**DCL      6354--REDEF    6354--REDEF
FPT_OPEN_OUT.WSN_
      6320**DCL      6320--REDEF
FPT_OPEN_OUT_SAVE.ACSVEH_
      6207**DCL      6208--REDEF
FPT_OPEN_OUT_SAVE.ALTKEYS_
      6213**DCL      6214--REDEF    6214--REDEF
FPT_OPEN_OUT_SAVE.HDR_
      6212**DCL      6213--REDEF
FPT_OPEN_OUT_SAVE.TAB_
      6211**DCL      6212--REDEF
FPT_OPEN_OUT_SAVE.UHL_
      6205**DCL      6206--REDEF    6206--REDEF
FPT_OPEN_OUT_SAVE.V.FSN#
      6245**DCL      6245--REDEF    6245--REDEF
FPT_OPEN_OUT_SAVE.WSN_
      6211**DCL      6211--REDEF
FPT_READ_STD.STATION_
      6635**DCL      6636--REDEF
FPT_READ_STD.V.DVBYTE.REREAD#
      6647**DCL      6647--REDEF
PL6.E3A0      #010=VPD$DECI_MUNGE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:28 Page:262  
FPT_READ_STD.V.INDX#
      6645**DCL      6645--REDEF
FPT_READ_UC.STATION_
      6596**DCL      6597--REDEF
FPT_READ_UC.V.DVBYTE.REREAD#
      6608**DCL      6608--REDEF
FPT_READ_UC.V.INDX#
      6606**DCL      6606--REDEF
FPT_WRITE_ME.STATION_
      6704**DCL      6704--REDEF
FPT_WRITE_ME.V.DVBYTE.VFC#
      6711**DCL      6711--REDEF
FPT_WRITE_OUT.STATION_
      6735**DCL      6735--REDEF
FPT_WRITE_OUT.V.DVBYTE.VFC#
      6742**DCL      6742--REDEF
FPT_WRITE_UC.STATION_
      6673**DCL      6673--REDEF
FPT_WRITE_UC.V.DVBYTE.VFC#
      6680**DCL      6680--REDEF
FROM_SN.SN
      5579**DCL      5580--REDEF
GETCMD.OUT$
      4786**DCL      4792--REDEF
HIGH_LIM
        22**DCL         6--PROC     7346>>IF
ICB.FID.STRING
      5603**DCL      5604--REDEF
IFSFA_PARAM.EOMCHAR#
      5958**DCL      5959--REDEF
IFSFA_PARAM.SIG1
      5952**DCL      5952--REDEF
IFSFA_PARAM.SIG2
      5952**DCL      5953--REDEF
IN_RES
      5525**DCL      5525--REDEF
PL6.E3A0      #010=VPD$DECI_MUNGE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:28 Page:263  
IN_SN.SN
      5541**DCL      5542--REDEF
LOW_LIM
        21**DCL         6--PROC     7346>>IF
OCB.TYPE
      5287**DCL      5288--REDEF
OFSFA_PARAM.EOMCHAR#
      5988**DCL      5989--REDEF
OFSFA_PARAM.SIG1
      5982**DCL      5982--REDEF
OFSFA_PARAM.SIG2
      5982**DCL      5983--REDEF
OUT$BLK.CODE
      7030**DCL      7322>>IF       7331>>IF
OUT$BLK.NSUBLKS
      7034**DCL      7329>>ASSIGN
OUT$BLK.SUBLK$
      7055**DCL      7320>>ASSIGN   7325<>CALL     7329>>ASSIGN   7334<>CALL     7337>>DOCASE
OUT$SYM.COUNT
      7091**DCL      7094--IMP-SIZ
OUT_SN.SN
      5559**DCL      5560--REDEF
SIGN_NUM
      7107**DCL      7321<<ASSIGN   7325<>CALL     7345>>ASSIGN
SPEC_BUF
      5237**DCL      5237--REDEF
TEXT$C.LEN
      7100**DCL      7101--IMP-SIZ  7337>>DOCASE
TO_WORD
        20**DCL         6--PROC     7328<<ASSIGN   7343<<ASSIGN   7343>>ASSIGN   7345<<ASSIGN   7345>>ASSIGN
      7346>>IF       7346>>IF
VPD$TEXTC_CHARBIN
      7193**DCL-ENT  7325--CALL     7334--CALL

PL6.E3A0      #011=VPD$ENLARGE_BUF File=VPD$UTIL.:E05TSI                         WED 07/30/97 07:29 Page:264  
      999        1        /*T***********************************************************/
     1000        2        /*T*                                                         */
     1001        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1002        4        /*T*                                                         */
     1003        5        /*T***********************************************************/
     1004        6        VPD$ENLARGE_BUF: PROC(PAGES);
     1005        7        /*D* NAME: VPD$ENLARGE_BUF
     1006        8             CALL: CALL VPD$ENLARGE_BUF(PAGES);
     1007        9             DESCRIPTION: This procedure sets the size of the
     1008       10                          in-out buffer to PAGES pages. If PAGES=0,
     1009       11                          the buffer is doubled instead.
     1010       12                          The vector framing the resulting data space is RES.BUF_VECTOR
     1011       13                          but this vector is altered to not include the first 6 words
     1012       14                          (for later possible insertion of key text and/or room for
     1013       15                          FT data movement to insure that the record ends on a word
     1014       16                          boundary...ain't the IOM wonderful?). modified vector is
     1015       17                          IN_BUF_VECTOR.
     1016       18        */
     1017       19    1   DCL PAGES SBIN WORD;
     1018       20        %INCLUDE VP_DATA_R;
     1019     7007        %INCLUDE B_ERRORS_C;
     1020     8134        %B$TCB;
     1021     8137        %B$ALT;
     1022     8145        %FPT_GDP(FPTN = FPT_GDP_FDP,
     1023     8146                 RESULTS = NEW_VECTOR,
     1024     8147                 STCLASS = STATIC);
     1025     8161        %FPT_GDDL(FPTN = FPT_GDDL,
     1026     8162                  RESULTS = RES,
     1027     8163                  STCLASS = CONSTANT);
     1028     8176    1   DCL 1 RES STATIC,
     1029     8177    1         2 BUF_VECTOR,
     1030     8178    1           3 BOUND UBIN(20) UNAL,
     1031     8179    1           3 * BIT(16) UNAL,
     1032     8180    1           3 PTR$ PTR,
     1033     8181    1         2 * SBIN WORD;
     1034     8182    1   DCL 1 NEW_VECTOR STATIC,
     1035     8183    1         2 BOUND UBIN(20) UNAL,
PL6.E3A0      #011=VPD$ENLARGE_BUF File=VPD$UTIL.:E05TSI                         WED 07/30/97 07:29 Page:265  
     1036     8184    1         2 * BIT(16) UNAL,
     1037     8185    1         2 PTR$ PTR;
     1038     8186    1   DCL PAGES_REQUIRED SBIN;
     1039     8187        %VP_ENTRIES (OMIT=VPD$ENLARGE_BUF);
     1040     8395    1           GOTO START;
     1041     8396
     1042     8397    1   VPD$INIT_BUF: ENTRY;
     1043     8398        /*D* NAME: VPD$INIT_BUF
     1044     8399             CALL: CALL VPD$INIT_BUF;
     1045     8400             DESCRIPTION: This procedure initializes the in/out buffer to MIN_PAGES pages
     1046     8401        */
     1047     8402    1           CALL M$GDDL(FPT_GDDL);
     1048     8403    1           RES.BUF_VECTOR.BOUND = 0;
     1049     8404    1           RES.BUF_VECTOR.BOUND = RES.BUF_VECTOR.BOUND -1; /* Set to bump t'zero */
     1050     8405    1           PAGES_REQUIRED = MIN_PAGES;
     1051     8406    1           GOTO CALL_GDP;
     1052     8407
     1053     8408    1   START:  IF PAGES=0
     1054     8409    1            THEN                           /* Double current buffer              */
     1055     8410    1              PAGES_REQUIRED = (RES.BUF_VECTOR.BOUND+1)/4096;
     1056     8411    1            ELSE                           /* Expand size to PAGES               */
     1057     8412    1              PAGES_REQUIRED = PAGES - (RES.BUF_VECTOR.BOUND+1)/4096;
     1058     8413    1           IF PAGES_REQUIRED <= 0
     1059     8414    1            THEN                           /* No additional pages required       */
     1060     8415    1              RETURN;                      /* Just go back                       */
     1061     8416    1   CALL_GDP: FPT_GDP_FDP.V.PAGES# = PAGES_REQUIRED;
     1062     8417    1           CALL M$GDP(FPT_GDP_FDP) ALTRET(GDP_ALT);
     1063     8418    1   OK:     RES.BUF_VECTOR.BOUND = RES.BUF_VECTOR.BOUND+NEW_VECTOR.BOUND+1;
     1064     8419    1           GOTO COMMON;
     1065     8420        %EJECT;
PL6.E3A0      #011=VPD$ENLARGE_BUF File=VPD$UTIL.:E05TSI                         WED 07/30/97 07:29 Page:266  
     1066     8421    1   VPD$MINIMIZE_BUF: ENTRY;
     1067     8422        /*D* NAME: VPD$MINIMIZE_BUF
     1068     8423             CALL: CALL VPD$MINIMIZE_BUF;
     1069     8424             DESCRIPTION: This entry point lies inside ENLARGE_BUF and simply dumps
     1070     8425                          excess buffer pages until there are only MIN_PAGES left.
     1071     8426        */
     1072     8427    1           IF RES.BUF_VECTOR.BOUND>MIN_PAGES*4096-1
     1073     8428    1            THEN
     1074     8429    2            DO;
     1075     8430    2               FPT_GDP_FDP.V.PAGES# = (RES.BUF_VECTOR.BOUND+1)/4096 - MIN_PAGES;
     1076     8431    2               CALL M$FDP(FPT_GDP_FDP) ALTRET(FDP_ALT);
     1077     8432    2               RES.BUF_VECTOR = NEW_VECTOR;
     1078     8433    2               END;
     1079     8434    1   COMMON: ;
     1080     8435        /**/
     1081     8436        /*  Insert some slack so we can format keys and stuff without enlarging the   */
     1082     8437        /*  buffer and shoving everything over.                                       */
     1083     8438        /**/
     1084     8439    1           ACTUAL_IN_BUF_VECTOR = RES.BUF_VECTOR;
     1085     8440    1           IN_BUF_VECTOR = RES.BUF_VECTOR;
     1086     8441    1           IN_BUF_VECTOR.BOUND = RES.BUF_VECTOR.BOUND-24;
     1087     8442    1           IN_BUF_VECTOR.PTR$ = PINCRC(RES.BUF_VECTOR.PTR$,24);
     1088     8443    1           RETURN;
     1089     8444    1   GDP_ALT:
     1090     8445    1           IF (B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE=%E$ALLGONE OR
     1091     8446    1             B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE=%E$MEMLIMIT) AND
     1092     8447    1             NEW_VECTOR.BOUND > 0 AND PAGES_REQUIRED < 88
     1093     8448    1            THEN
     1094     8449    1              GOTO OK;                     /* AT LEAST WE GOT SOME SPACE         */
     1095     8450    1            ELSE
     1096     8451    1   FDP_ALT:   IF %VPSZ_ERR# = %E$CVMORGVP  /* Are we out of DS space?            */
     1097     8452    1                OR %VPSZ_ERR# = %E$ALLGONE
     1098     8453    1                OR %VPSZ_ERR# = %E$MEMLIMIT
     1099     8454    1               THEN
     1100     8455    2               DO;
     1101     8456    2                  USE_CONT = %YES#;
     1102     8457    2                  IF NEW_VECTOR.BOUND ~= 0
PL6.E3A0      #011=VPD$ENLARGE_BUF File=VPD$UTIL.:E05TSI                         WED 07/30/97 07:29 Page:267  
     1103     8458    2                   THEN
     1104     8459    2                     GOTO OK;              /* Make sure we update RES            */
     1105     8460    2                  END;
     1106     8461    1               ELSE
     1107     8462    1                 CALL VPL$ERR_PROC(3,0);   /* Report and abort command           */
     1108     8463    1   END VPD$ENLARGE_BUF;
     1109     8464        %EOD;

PL6.E3A0      #011=VPD$ENLARGE_BUF File=VPD$UTIL.:E05TSI                         WED 07/30/97 07:29 Page:268  
--  Include file information  --

   B_ERRORS_C.:E05TOU  is referenced.
   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$ENLARGE_BUF.

   Procedure VPD$ENLARGE_BUF requires 127 words for executable code.
   Procedure VPD$ENLARGE_BUF requires 8 words of local(AUTO) storage.

PL6.E3A0      #011=VPD$ENLARGE_BUF File=VPD$UTIL.:E05TSI                         WED 07/30/97 07:29 Page:269  

 Object Unit name= VPD$ENLARGE_BUF                            File name= VPD$UTIL.:E05TOU
 UTS= JUL 30 '97 07:29:23.72 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$EI
    2   DCB   even  none     0      0  M$EO
    3   DCB   even  none     0      0  M$EO1
    4   DCB   even  none     0      0  M$ME
    5   DCB   even  none     0      0  M$SI
    6   DCB   even  none     0      0  M$READFILE
    7   DCB   even  none     0      0  M$DO
    8   DCB   even  none     0      0  M$STD1
    9   DCB   even  none     0      0  M$SORT1
   10   Data  even  none    11     13  VPD$ENLARGE_BUF
   11  RoData even  UTS      2      2  VPD$ENLARGE_BUF
   12   Proc  even  none   127    177  VPD$ENLARGE_BUF
   13  RoData even  none     2      2  VPD$ENLARGE_BUF

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    12      0   yes            yes      Std        1  VPD$ENLARGE_BUF
    12      3                  yes      Std        0  VPD$INIT_BUF
    12     71                  yes      Std        0  VPD$MINIMIZE_BUF
PL6.E3A0      #011=VPD$ENLARGE_BUF File=VPD$UTIL.:E05TSI                         WED 07/30/97 07:29 Page:270  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       8 VPL$ERR_PROC
                       nStd      0 X66_AUTO_1
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                             r    MIN_PAGES                             USE_CONT
     BREAK_LOC                             BREAK_MESSAGE_REPORTER                SPEC_BUF
     IN_RES                                IN_BUF_VECTOR                         ACTUAL_IN_BUF_VECTOR
     M$EI                                  M$EO                                  M$EO1
     M$ME                                  M$SI                                  M$READFILE
     M$DO                                  M$STD1                                M$SORT1
     B$TCB$                                B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #011=VPD$ENLARGE_BUF File=VPD$UTIL.:E05TSI                         WED 07/30/97 07:29 Page:271  


      999        1        /*T***********************************************************/
     1000        2        /*T*                                                         */
     1001        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1002        4        /*T*                                                         */
     1003        5        /*T***********************************************************/
     1004        6        VPD$ENLARGE_BUF: PROC(PAGES);

      6 12 000000   000000 700200 xent  VPD$ENLARGE* TSX0  ! X66_AUTO_1
        12 000001   000010 000001                    ZERO    8,1

     1005        7        /*D* NAME: VPD$ENLARGE_BUF
     1006        8             CALL: CALL VPD$ENLARGE_BUF(PAGES);
     1007        9             DESCRIPTION: This procedure sets the size of the
     1008       10                          in-out buffer to PAGES pages. If PAGES=0,
     1009       11                          the buffer is doubled instead.
     1010       12                          The vector framing the resulting data space is RES.BUF_VECTOR
     1011       13                          but this vector is altered to not include the first 6 words
     1012       14                          (for later possible insertion of key text and/or room for
     1013       15                          FT data movement to insure that the record ends on a word
     1014       16                          boundary...ain't the IOM wonderful?). modified vector is
     1015       17                          IN_BUF_VECTOR.
     1016       18        */
     1017       19    1   DCL PAGES SBIN WORD;
     1018       20        %INCLUDE VP_DATA_R;
     1019     7007        %INCLUDE B_ERRORS_C;
     1020     8134        %B$TCB;
     1021     8137        %B$ALT;
     1022     8145        %FPT_GDP(FPTN = FPT_GDP_FDP,
     1023     8146                 RESULTS = NEW_VECTOR,
     1024     8147                 STCLASS = STATIC);
     1025     8161        %FPT_GDDL(FPTN = FPT_GDDL,
     1026     8162                  RESULTS = RES,
     1027     8163                  STCLASS = CONSTANT);
     1028     8176    1   DCL 1 RES STATIC,
     1029     8177    1         2 BUF_VECTOR,
     1030     8178    1           3 BOUND UBIN(20) UNAL,
PL6.E3A0      #011=VPD$ENLARGE_BUF File=VPD$UTIL.:E05TSI                         WED 07/30/97 07:29 Page:272  
     1031     8179    1           3 * BIT(16) UNAL,
     1032     8180    1           3 PTR$ PTR,
     1033     8181    1         2 * SBIN WORD;
     1034     8182    1   DCL 1 NEW_VECTOR STATIC,
     1035     8183    1         2 BOUND UBIN(20) UNAL,
     1036     8184    1         2 * BIT(16) UNAL,
     1037     8185    1         2 PTR$ PTR;
     1038     8186    1   DCL PAGES_REQUIRED SBIN;
     1039     8187        %VP_ENTRIES (OMIT=VPD$ENLARGE_BUF);
     1040     8395    1           GOTO START;

   8395 12 000002   000024 710000 12                 TRA     START

     1041     8396
     1042     8397    1   VPD$INIT_BUF: ENTRY;

   8397 12 000003   000000 700200 xent  VPD$INIT_BUF TSX0  ! X66_AUTO_1
        12 000004   000010 000001                    ZERO    8,1

     1043     8398        /*D* NAME: VPD$INIT_BUF
     1044     8399             CALL: CALL VPD$INIT_BUF;
     1045     8400             DESCRIPTION: This procedure initializes the in/out buffer to MIN_PAGES pages
     1046     8401        */
     1047     8402    1           CALL M$GDDL(FPT_GDDL);

   8402 12 000005   000000 630400 11                 EPPR0   FPT_GDDL
        12 000006   030014 713400                    CLIMB   12300
        12 000007   400000 401760                    pmme    nvectors=1

     1048     8403    1           RES.BUF_VECTOR.BOUND = 0;

   8403 12 000010   177777 236007                    LDQ     65535,DL
        12 000011   000006 356000 10                 ANSQ    RES

     1049     8404    1           RES.BUF_VECTOR.BOUND = RES.BUF_VECTOR.BOUND -1; /* Set to bump t'zero */

   8404 12 000012   000006 236000 10                 LDQ     RES
PL6.E3A0      #011=VPD$ENLARGE_BUF File=VPD$UTIL.:E05TSI                         WED 07/30/97 07:29 Page:273  
        12 000013   000020 772000                    QRL     16
        12 000014   000001 136007                    SBLQ    1,DL
        12 000015   000020 736000                    QLS     16
        12 000016   000006 676000 10                 ERQ     RES
        12 000017   000034 376000 xsym               ANQ     B_VECTNIL+28
        12 000020   000006 656000 10                 ERSQ    RES

     1050     8405    1           PAGES_REQUIRED = MIN_PAGES;

   8405 12 000021   000000 235000 xsym               LDA     MIN_PAGES
        12 000022   200004 755100                    STA     PAGES_REQUIRED,,AUTO

     1051     8406    1           GOTO CALL_GDP;

   8406 12 000023   000047 710000 12                 TRA     CALL_GDP

     1052     8407
     1053     8408    1   START:  IF PAGES=0

   8408 12 000024   200003 470500       START        LDP0    @PAGES,,AUTO
        12 000025   000000 235100                    LDA     0,,PR0
        12 000026   000035 601000 12                 TNZ     s:8412

     1054     8409    1            THEN                           /* Double current buffer              */
     1055     8410    1              PAGES_REQUIRED = (RES.BUF_VECTOR.BOUND+1)/4096;

   8410 12 000027   000006 236000 10                 LDQ     RES
        12 000030   000020 772000                    QRL     16
        12 000031   000001 036007                    ADLQ    1,DL
        12 000032   000014 772000                    QRL     12
        12 000033   200004 756100                    STQ     PAGES_REQUIRED,,AUTO
        12 000034   000045 710000 12                 TRA     s:8413

     1056     8411    1            ELSE                           /* Expand size to PAGES               */
     1057     8412    1              PAGES_REQUIRED = PAGES - (RES.BUF_VECTOR.BOUND+1)/4096;

   8412 12 000035   000006 236000 10                 LDQ     RES
PL6.E3A0      #011=VPD$ENLARGE_BUF File=VPD$UTIL.:E05TSI                         WED 07/30/97 07:29 Page:274  
        12 000036   000020 772000                    QRL     16
        12 000037   000001 036007                    ADLQ    1,DL
        12 000040   000014 772000                    QRL     12
        12 000041   200006 756100                    STQ     PAGES_REQUIRED+2,,AUTO
        12 000042   000000 236100                    LDQ     0,,PR0
        12 000043   200006 136100                    SBLQ    PAGES_REQUIRED+2,,AUTO
        12 000044   200004 756100                    STQ     PAGES_REQUIRED,,AUTO

     1058     8413    1           IF PAGES_REQUIRED <= 0

   8413 12 000045   000047 605400 12                 TPNZ    CALL_GDP

     1059     8414    1            THEN                           /* No additional pages required       */
     1060     8415    1              RETURN;                      /* Just go back                       */

   8415 12 000046   000000 702200 xent               TSX2  ! X66_ARET

     1061     8416    1   CALL_GDP: FPT_GDP_FDP.V.PAGES# = PAGES_REQUIRED;

   8416 12 000047   200004 235100       CALL_GDP     LDA     PAGES_REQUIRED,,AUTO
        12 000050   000004 755000 10                 STA     FPT_GDP_FDP+4

     1062     8417    1           CALL M$GDP(FPT_GDP_FDP) ALTRET(GDP_ALT);

   8417 12 000051   000000 630400 10                 EPPR0   FPT_GDP_FDP
        12 000052   430003 713400                    CLIMB   alt,+12291
        12 000053   400400 401760                    pmme    nvectors=2
        12 000054   000134 702000 12                 TSX2    GDP_ALT

     1063     8418    1   OK:     RES.BUF_VECTOR.BOUND = RES.BUF_VECTOR.BOUND+NEW_VECTOR.BOUND+1;

   8418 12 000055   000011 236000 10    OK           LDQ     NEW_VECTOR
        12 000056   000020 772000                    QRL     16
        12 000057   200006 756100                    STQ     PAGES_REQUIRED+2,,AUTO
        12 000060   000006 236000 10                 LDQ     RES
        12 000061   000020 772000                    QRL     16
        12 000062   200006 036100                    ADLQ    PAGES_REQUIRED+2,,AUTO
PL6.E3A0      #011=VPD$ENLARGE_BUF File=VPD$UTIL.:E05TSI                         WED 07/30/97 07:29 Page:275  
        12 000063   000001 036007                    ADLQ    1,DL
        12 000064   000020 736000                    QLS     16
        12 000065   000006 676000 10                 ERQ     RES
        12 000066   000034 376000 xsym               ANQ     B_VECTNIL+28
        12 000067   000006 656000 10                 ERSQ    RES

     1064     8419    1           GOTO COMMON;

   8419 12 000070   000115 710000 12                 TRA     COMMON

     1065     8420        %EJECT;
PL6.E3A0      #011=VPD$ENLARGE_BUF File=VPD$UTIL.:E05TSI                         WED 07/30/97 07:29 Page:276  
     1066     8421    1   VPD$MINIMIZE_BUF: ENTRY;

   8421 12 000071   000000 700200 xent  VPD$MINIMIZ* TSX0  ! X66_AUTO_1
        12 000072   000010 000001                    ZERO    8,1

     1067     8422        /*D* NAME: VPD$MINIMIZE_BUF
     1068     8423             CALL: CALL VPD$MINIMIZE_BUF;
     1069     8424             DESCRIPTION: This entry point lies inside ENLARGE_BUF and simply dumps
     1070     8425                          excess buffer pages until there are only MIN_PAGES left.
     1071     8426        */
     1072     8427    1           IF RES.BUF_VECTOR.BOUND>MIN_PAGES*4096-1

   8427 12 000073   000000 235000 xsym               LDA     MIN_PAGES
        12 000074   000014 735000                    ALS     12
        12 000075   200006 755100                    STA     PAGES_REQUIRED+2,,AUTO
        12 000076   000006 236000 10                 LDQ     RES
        12 000077   000020 772000                    QRL     16
        12 000100   200006 116100                    CMPQ    PAGES_REQUIRED+2,,AUTO
        12 000101   000115 604000 12                 TMI     COMMON

     1073     8428    1            THEN
     1074     8429    2            DO;

     1075     8430    2               FPT_GDP_FDP.V.PAGES# = (RES.BUF_VECTOR.BOUND+1)/4096 - MIN_PAGES;

   8430 12 000102   000001 036007                    ADLQ    1,DL
        12 000103   000014 772000                    QRL     12
        12 000104   000000 136000 xsym               SBLQ    MIN_PAGES
        12 000105   000004 756000 10                 STQ     FPT_GDP_FDP+4

     1076     8431    2               CALL M$FDP(FPT_GDP_FDP) ALTRET(FDP_ALT);

   8431 12 000106   000000 630400 10                 EPPR0   FPT_GDP_FDP
        12 000107   430004 713400                    CLIMB   alt,+12292
        12 000110   400400 401760                    pmme    nvectors=2
        12 000111   000152 702000 12                 TSX2    FDP_ALT

PL6.E3A0      #011=VPD$ENLARGE_BUF File=VPD$UTIL.:E05TSI                         WED 07/30/97 07:29 Page:277  
     1077     8432    2               RES.BUF_VECTOR = NEW_VECTOR;

   8432 12 000112   000000 100400                    MLR     fill='000'O
        12 000113   000011 000010 10                 ADSC9   NEW_VECTOR               cn=0,n=8
        12 000114   000006 000010 10                 ADSC9   RES                      cn=0,n=8

     1078     8433    2               END;

   8433 12 000115                       COMMON       null
     1079     8434    1   COMMON: ;
     1080     8435        /**/
     1081     8436        /*  Insert some slack so we can format keys and stuff without enlarging the   */
     1082     8437        /*  buffer and shoving everything over.                                       */
     1083     8438        /**/
     1084     8439    1           ACTUAL_IN_BUF_VECTOR = RES.BUF_VECTOR;

   8439 12 000115   000006 237000 10                 LDAQ    RES
        12 000116   000000 757000 xsym               STAQ    ACTUAL_IN_BUF_VECTOR

     1085     8440    1           IN_BUF_VECTOR = RES.BUF_VECTOR;

   8440 12 000117   000006 237000 10                 LDAQ    RES
        12 000120   000000 757000 xsym               STAQ    IN_BUF_VECTOR

     1086     8441    1           IN_BUF_VECTOR.BOUND = RES.BUF_VECTOR.BOUND-24;

   8441 12 000121   000006 236000 10                 LDQ     RES
        12 000122   000020 772000                    QRL     16
        12 000123   000030 136007                    SBLQ    24,DL
        12 000124   000020 736000                    QLS     16
        12 000125   000000 676000 xsym               ERQ     IN_BUF_VECTOR
        12 000126   000034 376000 xsym               ANQ     B_VECTNIL+28
        12 000127   000000 656000 xsym               ERSQ    IN_BUF_VECTOR

     1087     8442    1           IN_BUF_VECTOR.PTR$ = PINCRC(RES.BUF_VECTOR.PTR$,24);

   8442 12 000130   000007 236000 10                 LDQ     RES+1
PL6.E3A0      #011=VPD$ENLARGE_BUF File=VPD$UTIL.:E05TSI                         WED 07/30/97 07:29 Page:278  
        12 000131   000006 036003                    ADLQ    6,DU
        12 000132   000001 756000 xsym               STQ     IN_BUF_VECTOR+1

     1088     8443    1           RETURN;

   8443 12 000133   000000 702200 xent               TSX2  ! X66_ARET

     1089     8444    1   GDP_ALT:
     1090     8445    1           IF (B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE=%E$ALLGONE OR

   8445 12 000134   000000 470400 xsym  GDP_ALT      LDP0    B$TCB$
        12 000135   000000 471500                    LDP1    0,,PR0
        12 000136   100102 236100                    LDQ     66,,PR1
        12 000137   377770 376007                    ANQ     131064,DL
        12 000140   011340 116007                    CMPQ    4832,DL
        12 000141   000144 600000 12                 TZE     GDP_ALT+8
        12 000142   011350 116007                    CMPQ    4840,DL
        12 000143   000152 601000 12                 TNZ     FDP_ALT
        12 000144   000011 236000 10                 LDQ     NEW_VECTOR
        12 000145   000034 316000 xsym               CANQ    B_VECTNIL+28
        12 000146   000152 600000 12                 TZE     FDP_ALT
        12 000147   200004 235100                    LDA     PAGES_REQUIRED,,AUTO
        12 000150   000130 115007                    CMPA    88,DL
        12 000151   000055 604000 12                 TMI     OK

     1091     8446    1             B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE=%E$MEMLIMIT) AND
     1092     8447    1             NEW_VECTOR.BOUND > 0 AND PAGES_REQUIRED < 88
     1093     8448    1            THEN
     1094     8449    1              GOTO OK;                     /* AT LEAST WE GOT SOME SPACE         */
     1095     8450    1            ELSE
     1096     8451    1   FDP_ALT:   IF %VPSZ_ERR# = %E$CVMORGVP  /* Are we out of DS space?            */

   8451 12 000152   000000 470400 xsym  FDP_ALT      LDP0    B$TCB$
        12 000153   000000 471500                    LDP1    0,,PR0
        12 000154   100102 236100                    LDQ     66,,PR1
        12 000155   377770 376007                    ANQ     131064,DL
        12 000156   011370 116007                    CMPQ    4856,DL
PL6.E3A0      #011=VPD$ENLARGE_BUF File=VPD$UTIL.:E05TSI                         WED 07/30/97 07:29 Page:279  
        12 000157   000164 600000 12                 TZE     s:8456
        12 000160   011340 116007                    CMPQ    4832,DL
        12 000161   000164 600000 12                 TZE     s:8456
        12 000162   011350 116007                    CMPQ    4840,DL
        12 000163   000172 601000 12                 TNZ     s:8462

     1097     8452    1                OR %VPSZ_ERR# = %E$ALLGONE
     1098     8453    1                OR %VPSZ_ERR# = %E$MEMLIMIT
     1099     8454    1               THEN
     1100     8455    2               DO;

     1101     8456    2                  USE_CONT = %YES#;

   8456 12 000164   400000 236003                    LDQ     -131072,DU
        12 000165   000000 756000 xsym               STQ     USE_CONT

     1102     8457    2                  IF NEW_VECTOR.BOUND ~= 0

   8457 12 000166   000011 236000 10                 LDQ     NEW_VECTOR
        12 000167   000034 316000 xsym               CANQ    B_VECTNIL+28
        12 000170   000055 601000 12                 TNZ     OK

     1103     8458    2                   THEN
     1104     8459    2                     GOTO OK;              /* Make sure we update RES            */
     1105     8460    2                  END;

   8460 12 000171   000176 710000 12                 TRA     s:8463

     1106     8461    1               ELSE
     1107     8462    1                 CALL VPL$ERR_PROC(3,0);   /* Report and abort command           */

   8462 12 000172   000000 630400 13                 EPPR0   0
        12 000173   000020 631400 xsym               EPPR1   B_VECTNIL+16
        12 000174   000000 701000 xent               TSX1    VPL$ERR_PROC
        12 000175   000000 011000                    NOP     0

     1108     8463    1   END VPD$ENLARGE_BUF;
PL6.E3A0      #011=VPD$ENLARGE_BUF File=VPD$UTIL.:E05TSI                         WED 07/30/97 07:29 Page:280  

   8463 12 000176   000000 702200 xent               TSX2  ! X66_ARET
     1109     8464        %EOD;

PL6.E3A0      #011=VPD$ENLARGE_BUF File=VPD$UTIL.:E05TSI                         WED 07/30/97 07:29 Page:281  
--  Include file information  --

   B_ERRORS_C.:E05TOU  is referenced.
   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$ENLARGE_BUF.
PL6.E3A0      #011=VPD$ENLARGE_BUF File=VPD$UTIL.:E05TSI                         WED 07/30/97 07:29 Page:282  

 **** Variables and constants ****

  ****  Section 010  Data  VPD$ENLARGE_BUF

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(216)   r     1 FPT_GDP_FDP               11-0-0/w STRC(72)    r     1 NEW_VECTOR
     6-0-0/w STRC(108)   r     1 RES

  ****  Section 011 RoData VPD$ENLARGE_BUF

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(72)    r     1 FPT_GDDL

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @PAGES                    *0-0-0/w SBIN        r     1 PAGES
     4-0-0/w SBIN        r     1 PAGES_REQUIRED

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(72)    r     1 ACTUAL_IN_BUF_VECTOR       0-0-0/w PTR         r     1 B$TCB$
     0-0-0/w EPTR        r     1 BREAK_MESSAGE_REPORTER
     0-0-0/d STRC(72)    r     1 IN_BUF_VECTOR              0-0-0/w SBIN        r     1 MIN_PAGES
     0-0-0/b BIT         r     1 USE_CONT

  ****  BASED and DCB variables  ****

PL6.E3A0      #011=VPD$ENLARGE_BUF File=VPD$UTIL.:E05TSI                         WED 07/30/97 07:29 Page:283  
  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/w STRC(144)   r     1 B$TCB


   Procedure VPD$ENLARGE_BUF requires 127 words for executable code.
   Procedure VPD$ENLARGE_BUF requires 8 words of local(AUTO) storage.
PL6.E3A0      #011=VPD$ENLARGE_BUF File=VPD$UTIL.:E05TSI                         WED 07/30/97 07:29 Page:284  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #011=VPD$ENLARGE_BUF File=VPD$UTIL.:E05TSI                         WED 07/30/97 07:29 Page:285  
          MINI XREF LISTING

ACTUAL_IN_BUF_VECTOR
      5922**DCL      8439<<ASSIGN
B$ALT.CODE
      8139**DCL      8139--REDEF    8140--REDEF    8140--REDEF
B$ALT.ERR.CODE
      8141**DCL      8445>>IF       8445>>IF
B$ALT.ERR.ERR#
      8141**DCL      8141--REDEF    8451>>IF       8451>>IF       8451>>IF
B$ALT.EVID
      8140**DCL      8140--REDEF    8140--REDEF
B$TCB.ALT$
      8135**DCL      8445>>IF       8445>>IF       8451>>IF       8451>>IF       8451>>IF
B$TCB$
      5992**DCL      8445>>IF       8445>>IF       8451>>IF       8451>>IF       8451>>IF
BREAK_LOC
      5227**DCL      5227--REDEF
CALL_GDP
      8416**LABEL    8406--GOTO
COMMON
      8433**LABEL    8419--GOTO
DEF_ICB.FID.STRING
      5825**DCL      5826--REDEF
DEV_ICB.FID.STRING
      5711**DCL      5712--REDEF
EI_KEY.KEY
      5923**DCL      5923--REDEF    5923--REDEF    5923--REDEF
EO_OCB.TYPE
      5423**DCL      5424--REDEF
FDP_ALT
      8451**LABEL    8431--CALLALT
FPT_CLOSE_EI.SN_
      6764**DCL      6764--REDEF
PL6.E3A0      #011=VPD$ENLARGE_BUF File=VPD$UTIL.:E05TSI                         WED 07/30/97 07:29 Page:286  
FPT_CLOSE_EI.UTL_
      6765**DCL      6765--REDEF
FPT_CLOSE_EI.V.EXPIRE#
      6779**DCL      6779--REDEF
FPT_CLOSE_EI.V.TYPE#
      6777**DCL      6777--REDEF
FPT_CLOSE_EI.V.XTNSIZE#
      6774**DCL      6774--REDEF    6776--REDEF
FPT_CLOSE_PTL.SN_
      6890**DCL      6890--REDEF
FPT_CLOSE_PTL.UTL_
      6891**DCL      6891--REDEF
FPT_CLOSE_PTL.V.EXPIRE#
      6905**DCL      6905--REDEF
FPT_CLOSE_PTL.V.TYPE#
      6903**DCL      6903--REDEF
FPT_CLOSE_PTL.V.XTNSIZE#
      6900**DCL      6900--REDEF    6902--REDEF
FPT_CLOSE_READ.SN_
      6806**DCL      6806--REDEF
FPT_CLOSE_READ.UTL_
      6807**DCL      6807--REDEF
FPT_CLOSE_READ.V.EXPIRE#
      6821**DCL      6821--REDEF
FPT_CLOSE_READ.V.TYPE#
      6819**DCL      6819--REDEF
FPT_CLOSE_READ.V.XTNSIZE#
      6816**DCL      6816--REDEF    6818--REDEF
FPT_CLOSE_SI.SN_
      6974**DCL      6974--REDEF
FPT_CLOSE_SI.UTL_
      6975**DCL      6975--REDEF
FPT_CLOSE_SI.V.EXPIRE#
      6989**DCL      6989--REDEF
FPT_CLOSE_SI.V.TYPE#
      6987**DCL      6987--REDEF
PL6.E3A0      #011=VPD$ENLARGE_BUF File=VPD$UTIL.:E05TSI                         WED 07/30/97 07:29 Page:287  
FPT_CLOSE_SI.V.XTNSIZE#
      6984**DCL      6984--REDEF    6986--REDEF
FPT_CLOSE_STD.SN_
      6932**DCL      6932--REDEF
FPT_CLOSE_STD.UTL_
      6933**DCL      6933--REDEF
FPT_CLOSE_STD.V.EXPIRE#
      6947**DCL      6947--REDEF
FPT_CLOSE_STD.V.TYPE#
      6945**DCL      6945--REDEF
FPT_CLOSE_STD.V.XTNSIZE#
      6942**DCL      6942--REDEF    6944--REDEF
FPT_CLSEI_FT.SN_
      6848**DCL      6848--REDEF
FPT_CLSEI_FT.UTL_
      6849**DCL      6849--REDEF
FPT_CLSEI_FT.V.EXPIRE#
      6863**DCL      6863--REDEF
FPT_CLSEI_FT.V.TYPE#
      6861**DCL      6861--REDEF
FPT_CLSEI_FT.V.XTNSIZE#
      6858**DCL      6858--REDEF    6860--REDEF
FPT_GDDL
      8174**DCL      8402<>CALL
FPT_GDP_FDP
      8158**DCL      8417<>CALL     8431<>CALL
FPT_GDP_FDP.V
      8158**DCL      8158--DCLINIT
FPT_GDP_FDP.V.PAGES#
      8159**DCL      8416<<ASSIGN   8430<<ASSIGN
FPT_OPEN_EI.ACSVEH_
      6419**DCL      6420--REDEF
FPT_OPEN_EI.ALTKEYS_
      6425**DCL      6426--REDEF    6426--REDEF
FPT_OPEN_EI.HDR_
      6424**DCL      6425--REDEF
PL6.E3A0      #011=VPD$ENLARGE_BUF File=VPD$UTIL.:E05TSI                         WED 07/30/97 07:29 Page:288  
FPT_OPEN_EI.TAB_
      6423**DCL      6424--REDEF
FPT_OPEN_EI.UHL_
      6417**DCL      6418--REDEF    6418--REDEF
FPT_OPEN_EI.V.FSN#
      6457**DCL      6457--REDEF    6457--REDEF
FPT_OPEN_EI.WSN_
      6423**DCL      6423--REDEF
FPT_OPEN_EI_SAVE.ACSVEH_
      6528**DCL      6529--REDEF
FPT_OPEN_EI_SAVE.ALTKEYS_
      6534**DCL      6535--REDEF    6535--REDEF
FPT_OPEN_EI_SAVE.HDR_
      6533**DCL      6534--REDEF
FPT_OPEN_EI_SAVE.TAB_
      6532**DCL      6533--REDEF
FPT_OPEN_EI_SAVE.UHL_
      6526**DCL      6527--REDEF    6527--REDEF
FPT_OPEN_EI_SAVE.V.FSN#
      6566**DCL      6566--REDEF    6566--REDEF
FPT_OPEN_EI_SAVE.WSN_
      6532**DCL      6532--REDEF
FPT_OPEN_OUT.ACSVEH_
      6310**DCL      6311--REDEF
FPT_OPEN_OUT.ALTKEYS_
      6316**DCL      6317--REDEF    6317--REDEF
FPT_OPEN_OUT.HDR_
      6315**DCL      6316--REDEF
FPT_OPEN_OUT.TAB_
      6314**DCL      6315--REDEF
FPT_OPEN_OUT.UHL_
      6308**DCL      6309--REDEF    6309--REDEF
FPT_OPEN_OUT.V.FSN#
      6348**DCL      6348--REDEF    6348--REDEF
FPT_OPEN_OUT.WSN_
      6314**DCL      6314--REDEF
PL6.E3A0      #011=VPD$ENLARGE_BUF File=VPD$UTIL.:E05TSI                         WED 07/30/97 07:29 Page:289  
FPT_OPEN_OUT_SAVE.ACSVEH_
      6201**DCL      6202--REDEF
FPT_OPEN_OUT_SAVE.ALTKEYS_
      6207**DCL      6208--REDEF    6208--REDEF
FPT_OPEN_OUT_SAVE.HDR_
      6206**DCL      6207--REDEF
FPT_OPEN_OUT_SAVE.TAB_
      6205**DCL      6206--REDEF
FPT_OPEN_OUT_SAVE.UHL_
      6199**DCL      6200--REDEF    6200--REDEF
FPT_OPEN_OUT_SAVE.V.FSN#
      6239**DCL      6239--REDEF    6239--REDEF
FPT_OPEN_OUT_SAVE.WSN_
      6205**DCL      6205--REDEF
FPT_READ_STD.STATION_
      6629**DCL      6630--REDEF
FPT_READ_STD.V.DVBYTE.REREAD#
      6641**DCL      6641--REDEF
FPT_READ_STD.V.INDX#
      6639**DCL      6639--REDEF
FPT_READ_UC.STATION_
      6590**DCL      6591--REDEF
FPT_READ_UC.V.DVBYTE.REREAD#
      6602**DCL      6602--REDEF
FPT_READ_UC.V.INDX#
      6600**DCL      6600--REDEF
FPT_WRITE_ME.STATION_
      6698**DCL      6698--REDEF
FPT_WRITE_ME.V.DVBYTE.VFC#
      6705**DCL      6705--REDEF
FPT_WRITE_OUT.STATION_
      6729**DCL      6729--REDEF
FPT_WRITE_OUT.V.DVBYTE.VFC#
      6736**DCL      6736--REDEF
FPT_WRITE_UC.STATION_
      6667**DCL      6667--REDEF
PL6.E3A0      #011=VPD$ENLARGE_BUF File=VPD$UTIL.:E05TSI                         WED 07/30/97 07:29 Page:290  
FPT_WRITE_UC.V.DVBYTE.VFC#
      6674**DCL      6674--REDEF
FROM_SN.SN
      5573**DCL      5574--REDEF
GDP_ALT
      8445**LABEL    8417--CALLALT
GETCMD.OUT$
      4780**DCL      4786--REDEF
ICB.FID.STRING
      5597**DCL      5598--REDEF
IFSFA_PARAM.EOMCHAR#
      5952**DCL      5953--REDEF
IFSFA_PARAM.SIG1
      5946**DCL      5946--REDEF
IFSFA_PARAM.SIG2
      5946**DCL      5947--REDEF
IN_BUF_VECTOR
      5921**DCL      8440<<ASSIGN
IN_BUF_VECTOR.BOUND
      5921**DCL      8441<<ASSIGN
IN_BUF_VECTOR.PTR$
      5922**DCL      8442<<ASSIGN
IN_RES
      5519**DCL      5519--REDEF
IN_SN.SN
      5535**DCL      5536--REDEF
M$FDP
        73**DCL-ENT  8431--CALL
M$GDDL
        74**DCL-ENT  8402--CALL
M$GDP
        73**DCL-ENT  8417--CALL
MIN_PAGES
      5223**DCL      8405>>ASSIGN   8427>>IF       8430>>ASSIGN
NEW_VECTOR
      8182**DCL      8158--DCLINIT  8432>>ASSIGN
PL6.E3A0      #011=VPD$ENLARGE_BUF File=VPD$UTIL.:E05TSI                         WED 07/30/97 07:29 Page:291  
NEW_VECTOR.BOUND
      8183**DCL      8418>>ASSIGN   8445>>IF       8457>>IF
OCB.TYPE
      5281**DCL      5282--REDEF
OFSFA_PARAM.EOMCHAR#
      5982**DCL      5983--REDEF
OFSFA_PARAM.SIG1
      5976**DCL      5976--REDEF
OFSFA_PARAM.SIG2
      5976**DCL      5977--REDEF
OK
      8418**LABEL    8449--GOTO     8459--GOTO
OUT_SN.SN
      5553**DCL      5554--REDEF
PAGES
        19**DCL         6--PROC     8408>>IF       8412>>ASSIGN
PAGES_REQUIRED
      8186**DCL      8405<<ASSIGN   8410<<ASSIGN   8412<<ASSIGN   8413>>IF       8416>>ASSIGN   8445>>IF
RES
      8176**DCL      8174--DCLINIT
RES.BUF_VECTOR
      8177**DCL      8432<<ASSIGN   8439>>ASSIGN   8440>>ASSIGN
RES.BUF_VECTOR.BOUND
      8178**DCL      8403<<ASSIGN   8404<<ASSIGN   8404>>ASSIGN   8410>>ASSIGN   8412>>ASSIGN   8418<<ASSIGN
      8418>>ASSIGN   8427>>IF       8430>>ASSIGN   8441>>ASSIGN
RES.BUF_VECTOR.PTR$
      8180**DCL      8442>>ASSIGN
SPEC_BUF
      5231**DCL      5231--REDEF
START
      8408**LABEL    8395--GOTO
USE_CONT
      5223**DCL      8456<<ASSIGN
VPL$ERR_PROC
      8369**DCL-ENT  8462--CALL

PL6.E3A0      #012=VPD$FETCH_CREATOR File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:30 Page:292  
     1110        1        /*T***********************************************************/
     1111        2        /*T*                                                         */
     1112        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1113        4        /*T*                                                         */
     1114        5        /*T***********************************************************/
     1115        6        VPD$FETCH_CREATOR: PROC(TEXT_C) ALTRET;
     1116        7        /*I* NAME: VPD$FETCH_CREATOR
     1117        8             PURPOSE: To return the creator of a file as a TEXTC field.
     1118        9             CALL: CALL VPD$FETCH_CREATOR(TEXT_C) ALTRET(ERROR);
     1119       10             DESCRIPTION: This procedure finds the creator of a file and
     1120       11                   returns it in a TEXTC field.
     1121       12
     1122       13                   If we are unable to ascertain the creator, the ALTRET
     1123       14                   is taken.
     1124       15        */
     1125       16        /**/
     1126       17        /*  PARAMETERS  */
     1127       18        /**/
     1128       19    1   DCL 1 TEXT_C CALIGNED,
     1129       20    1         2 C UBIN BYTE CALIGNED,
     1130       21    1         2 TEXT CHAR(30) CALIGNED;
     1131       22        /**/
     1132       23        /* INCLUDE FILES  */
     1133       24        /**/
     1134       25        %INCLUDE VP_DATA_R;
     1135     7012        %INCLUDE FM$FIT;
     1136     7233        %INCLUDE B$JIT;
     1137     7523        /**/
     1138     7524        /*  LOCAL AUTO  */
     1139     7525        /**/
     1140     7526    1   DCL DATE$ PTR;
     1141     7527    1   DCL INSERT_IDX SBIN WORD;
     1142     7528        /**/
     1143     7529        /*  BASED  */
     1144     7530        /**/
     1145     7531        %CODE04;                                /* Structure for FPARAM dates         */
     1146     7539        /**/
PL6.E3A0      #012=VPD$FETCH_CREATOR File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:30 Page:293  
     1147     7540        /*  ENTRY DCLS  */
     1148     7541        /**/
     1149     7542    1   DCL XSF$LOCCODP ENTRY(2) ALTRET;
     1150     7543        /**/
     1151     7544    1           IF NOT B$JIT$ -> B$JIT.PRIV.ACTIVE & %PR_FMSEC#
     1152     7545    1            THEN
     1153     7546    1              GOTO UNKNOWN_CREATOR;
     1154     7547    1           DATE$ = ADDR (FPARAM_BUF);
     1155     7548    1           CALL XSF$LOCCODP(DATE$,04) ALTRET(UNKNOWN_CREATOR);
     1156     7549    1           TEXT_C.TEXT = DATE$ -> CODE04.CREATOR.ACCT;
     1157     7550    1           CALL INDEX (INSERT_IDX,' ',TEXT_C.TEXT);
     1158     7551    1           CALL INSERT(TEXT_C.TEXT,INSERT_IDX,,',',DATE$ -> CODE04.CREATOR.NAME);
     1159     7552    1           CALL INDEX (INSERT_IDX,' ',TEXT_C.TEXT);
     1160     7553    1           IF INSERT_IDX = 1
     1161     7554    1            THEN                           /* Nothing interesting there!         */
     1162     7555    1              GOTO UNKNOWN_CREATOR;
     1163     7556    1           TEXT_C.C = INSERT_IDX;
     1164     7557    1           RETURN;
     1165     7558        /**/
     1166     7559    1   UNKNOWN_CREATOR: ;
     1167     7560    1           ALTRETURN;
     1168     7561        /**/
     1169     7562    1   END VPD$FETCH_CREATOR;
     1170     7563        %EOD;

PL6.E3A0      #012=VPD$FETCH_CREATOR File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:30 Page:294  
--  Include file information  --

   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   FM$FIT.:E05TOU  is referenced.
   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$FETCH_CREATOR.

   Procedure VPD$FETCH_CREATOR requires 53 words for executable code.
   Procedure VPD$FETCH_CREATOR requires 8 words of local(AUTO) storage.

PL6.E3A0      #012=VPD$FETCH_CREATOR File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:30 Page:295  

 Object Unit name= VPD$FETCH_CREATOR                          File name= VPD$UTIL.:E05TOU
 UTS= JUL 30 '97 07:30:36.20 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$EI
    2   DCB   even  none     0      0  M$EO
    3   DCB   even  none     0      0  M$EO1
    4   DCB   even  none     0      0  M$ME
    5   DCB   even  none     0      0  M$SI
    6   DCB   even  none     0      0  M$READFILE
    7   DCB   even  none     0      0  M$DO
    8   DCB   even  none     0      0  M$STD1
    9   DCB   even  none     0      0  M$SORT1
   10  RoData even  UTS      1      1  VPD$FETCH_CREATOR
   11   Proc  even  none    53     65  VPD$FETCH_CREATOR
   12  RoData even  none     3      3  VPD$FETCH_CREATOR

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    11      0   yes    yes     yes      Std        1  VPD$FETCH_CREATOR
PL6.E3A0      #012=VPD$FETCH_CREATOR File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:30 Page:296  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       2 XSF$LOCCODP
                       nStd      0 X66_AUTO_1
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  BREAK_LOC                             BREAK_MESSAGE_REPORTER
     FPARAM_BUF                            SPEC_BUF                              IN_RES
     M$EI                                  M$EO                                  M$EO1
     M$ME                                  M$SI                                  M$READFILE
     M$DO                                  M$STD1                                M$SORT1
     B$JIT$                                B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #012=VPD$FETCH_CREATOR File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:30 Page:297  


     1110        1        /*T***********************************************************/
     1111        2        /*T*                                                         */
     1112        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1113        4        /*T*                                                         */
     1114        5        /*T***********************************************************/
     1115        6        VPD$FETCH_CREATOR: PROC(TEXT_C) ALTRET;

      6 11 000000   000000 700200 xent  VPD$FETCH_C* TSX0  ! X66_AUTO_1
        11 000001   000010 000001                    ZERO    8,1

     1116        7        /*I* NAME: VPD$FETCH_CREATOR
     1117        8             PURPOSE: To return the creator of a file as a TEXTC field.
     1118        9             CALL: CALL VPD$FETCH_CREATOR(TEXT_C) ALTRET(ERROR);
     1119       10             DESCRIPTION: This procedure finds the creator of a file and
     1120       11                   returns it in a TEXTC field.
     1121       12
     1122       13                   If we are unable to ascertain the creator, the ALTRET
     1123       14                   is taken.
     1124       15        */
     1125       16        /**/
     1126       17        /*  PARAMETERS  */
     1127       18        /**/
     1128       19    1   DCL 1 TEXT_C CALIGNED,
     1129       20    1         2 C UBIN BYTE CALIGNED,
     1130       21    1         2 TEXT CHAR(30) CALIGNED;
     1131       22        /**/
     1132       23        /* INCLUDE FILES  */
     1133       24        /**/
     1134       25        %INCLUDE VP_DATA_R;
     1135     7012        %INCLUDE FM$FIT;
     1136     7233        %INCLUDE B$JIT;
     1137     7523        /**/
     1138     7524        /*  LOCAL AUTO  */
     1139     7525        /**/
     1140     7526    1   DCL DATE$ PTR;
     1141     7527    1   DCL INSERT_IDX SBIN WORD;
PL6.E3A0      #012=VPD$FETCH_CREATOR File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:30 Page:298  
     1142     7528        /**/
     1143     7529        /*  BASED  */
     1144     7530        /**/
     1145     7531        %CODE04;                                /* Structure for FPARAM dates         */
     1146     7539        /**/
     1147     7540        /*  ENTRY DCLS  */
     1148     7541        /**/
     1149     7542    1   DCL XSF$LOCCODP ENTRY(2) ALTRET;
     1150     7543        /**/
     1151     7544    1           IF NOT B$JIT$ -> B$JIT.PRIV.ACTIVE & %PR_FMSEC#

   7544 11 000002   000000 470400 xsym               LDP0    B$JIT$
        11 000003   000013 236100                    LDQ     11,,PR0
        11 000004   000000 376000 10                 ANQ     0
        11 000005   000064 600000 11                 TZE     UNKNOWN_CREATOR

     1152     7545    1            THEN
     1153     7546    1              GOTO UNKNOWN_CREATOR;
     1154     7547    1           DATE$ = ADDR (FPARAM_BUF);

   7547 11 000006   000000 236000 12                 LDQ     0
        11 000007   200004 756100                    STQ     DATE$,,AUTO

     1155     7548    1           CALL XSF$LOCCODP(DATE$,04) ALTRET(UNKNOWN_CREATOR);

   7548 11 000010   000001 236000 12                 LDQ     1
        11 000011   200007 756100                    STQ     INSERT_IDX+2,,AUTO
        11 000012   200004 631500                    EPPR1   DATE$,,AUTO
        11 000013   200006 451500                    STP1    INSERT_IDX+1,,AUTO
        11 000014   200006 630500                    EPPR0   INSERT_IDX+1,,AUTO
        11 000015   000020 631400 xsym               EPPR1   B_VECTNIL+16
        11 000016   000000 701000 xent               TSX1    XSF$LOCCODP
        11 000017   000064 702000 11                 TSX2    UNKNOWN_CREATOR

     1156     7549    1           TEXT_C.TEXT = DATE$ -> CODE04.CREATOR.ACCT;

   7549 11 000020   200004 470500                    LDP0    DATE$,,AUTO
PL6.E3A0      #012=VPD$FETCH_CREATOR File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:30 Page:299  
        11 000021   200003 471500                    LDP1    @TEXT_C,,AUTO
        11 000022   040100 100500                    MLR     fill='040'O
        11 000023   000003 000010                    ADSC9   3,,PR0                   cn=0,n=8
        11 000024   100000 200036                    ADSC9   0,,PR1                   cn=1,n=30

     1157     7550    1           CALL INDEX (INSERT_IDX,' ',TEXT_C.TEXT);

   7550 11 000025   000000 124500                    SCM     mask='000'O
        11 000026   100000 200036                    ADSC9   0,,PR1                   cn=1,n=30
        11 000027   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
        11 000030   200005 000100                    ARG     INSERT_IDX,,AUTO

     1158     7551    1           CALL INSERT(TEXT_C.TEXT,INSERT_IDX,,',',DATE$ -> CODE04.CREATOR.NAME);

   7551 11 000031   200005 720100                    LXL0    INSERT_IDX,,AUTO
        11 000032   777741 620010                    EAX0    -31,X0
        11 000033   777777 660003                    ERX0    -1,DU
        11 000034   200005 235100                    LDA     INSERT_IDX,,AUTO
        11 000035   040145 100400                    MLR     fill='040'O
        11 000036   000002 000001 12                 ADSC9   2                        cn=0,n=1
        11 000037   100000 200010                    ADSC9   0,A,PR1                  cn=1,n=*X0
        11 000040   200005 236100                    LDQ     INSERT_IDX,,AUTO
        11 000041   000035 116007                    CMPQ    29,DL
        11 000042   000051 605000 11                 TPL     s:7552
        11 000043   777742 621006                    EAX1    -30,QL
        11 000044   777777 661003                    ERX1    -1,DU
        11 000045   200004 470500                    LDP0    DATE$,,AUTO
        11 000046   040146 100500                    MLR     fill='040'O
        11 000047   000005 000014                    ADSC9   5,,PR0                   cn=0,n=12
        11 000050   100000 400011                    ADSC9   0,Q,PR1                  cn=2,n=*X1

     1159     7552    1           CALL INDEX (INSERT_IDX,' ',TEXT_C.TEXT);

   7552 11 000051   000000 124500                    SCM     mask='000'O
        11 000052   100000 200036                    ADSC9   0,,PR1                   cn=1,n=30
        11 000053   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
        11 000054   200005 000100                    ARG     INSERT_IDX,,AUTO
PL6.E3A0      #012=VPD$FETCH_CREATOR File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:30 Page:300  

     1160     7553    1           IF INSERT_IDX = 1

   7553 11 000055   200005 235100                    LDA     INSERT_IDX,,AUTO
        11 000056   000001 115007                    CMPA    1,DL
        11 000057   000064 600000 11                 TZE     UNKNOWN_CREATOR

     1161     7554    1            THEN                           /* Nothing interesting there!         */
     1162     7555    1              GOTO UNKNOWN_CREATOR;
     1163     7556    1           TEXT_C.C = INSERT_IDX;

   7556 11 000060   000100 101500                    MRL     fill='000'O
        11 000061   200005 000004                    ADSC9   INSERT_IDX,,AUTO         cn=0,n=4
        11 000062   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1

     1164     7557    1           RETURN;

   7557 11 000063   000000 702200 xent               TSX2  ! X66_ARET

   7556 11 000064                       UNKNOWN_CRE* null
     1165     7558        /**/
     1166     7559    1   UNKNOWN_CREATOR: ;
     1167     7560    1           ALTRETURN;

   7560 11 000064   000000 702200 xent               TSX2  ! X66_AALT
     1168     7561        /**/
     1169     7562    1   END VPD$FETCH_CREATOR;
     1170     7563        %EOD;

PL6.E3A0      #012=VPD$FETCH_CREATOR File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:30 Page:301  
--  Include file information  --

   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   FM$FIT.:E05TOU  is referenced.
   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$FETCH_CREATOR.
PL6.E3A0      #012=VPD$FETCH_CREATOR File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:30 Page:302  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @TEXT_C                    4-0-0/w PTR         r     1 DATE$
     5-0-0/w SBIN        r     1 INSERT_IDX                *0-0-0/c STRC(279)   r     1 TEXT_C

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$
     0-0-0/w EPTR        r     1 BREAK_MESSAGE_REPORTER
     0-0-0/d SBIN        r     1 FPARAM_BUF(0:1023)

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(8856)  r     1 B$JIT                      0-0-0/w STRC(396)   r     1 CODE04


   Procedure VPD$FETCH_CREATOR requires 53 words for executable code.
   Procedure VPD$FETCH_CREATOR requires 8 words of local(AUTO) storage.
PL6.E3A0      #012=VPD$FETCH_CREATOR File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:30 Page:303  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #012=VPD$FETCH_CREATOR File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:30 Page:304  
          MINI XREF LISTING

B$JIT.CPFLAGS1.SLEAZE
      7341**DCL      7341--REDEF
B$JIT.ERR.MID
      7248**DCL      7248--REDEF
B$JIT.JRESPEAK
      7409**DCL      7410--REDEF
B$JIT.ORIGINATOR_PORT.FROM_CR
      7518**DCL      7518--REDEF    7519--REDEF
B$JIT.PNR
      7422**DCL      7422--REDEF
B$JIT.PRIV.ACTIVE
      7248**DCL      7544>>IF
B$JIT.TSLINE
      7516**DCL      7517--REDEF
B$JIT$
      5997**DCL      7242--IMP-PTR  7544>>IF
BREAK_LOC
      5232**DCL      5232--REDEF
CODE04.CREATOR.ACCT
      7536**DCL      7549>>ASSIGN
CODE04.CREATOR.NAME
      7536**DCL      7551>>CALLBLT
DATE$
      7526**DCL      7547<<ASSIGN   7548<>CALL     7549>>ASSIGN   7551>>CALLBLT
DEF_ICB.FID.STRING
      5830**DCL      5831--REDEF
DEV_ICB.FID.STRING
      5716**DCL      5717--REDEF
EI_KEY.KEY
      5928**DCL      5928--REDEF    5928--REDEF    5928--REDEF
EO_OCB.TYPE
      5428**DCL      5429--REDEF
PL6.E3A0      #012=VPD$FETCH_CREATOR File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:30 Page:305  
FPARAM_BUF
      5233**DCL      7547--ASSIGN
FPT_CLOSE_EI.SN_
      6769**DCL      6769--REDEF
FPT_CLOSE_EI.UTL_
      6770**DCL      6770--REDEF
FPT_CLOSE_EI.V.EXPIRE#
      6784**DCL      6784--REDEF
FPT_CLOSE_EI.V.TYPE#
      6782**DCL      6782--REDEF
FPT_CLOSE_EI.V.XTNSIZE#
      6779**DCL      6779--REDEF    6781--REDEF
FPT_CLOSE_PTL.SN_
      6895**DCL      6895--REDEF
FPT_CLOSE_PTL.UTL_
      6896**DCL      6896--REDEF
FPT_CLOSE_PTL.V.EXPIRE#
      6910**DCL      6910--REDEF
FPT_CLOSE_PTL.V.TYPE#
      6908**DCL      6908--REDEF
FPT_CLOSE_PTL.V.XTNSIZE#
      6905**DCL      6905--REDEF    6907--REDEF
FPT_CLOSE_READ.SN_
      6811**DCL      6811--REDEF
FPT_CLOSE_READ.UTL_
      6812**DCL      6812--REDEF
FPT_CLOSE_READ.V.EXPIRE#
      6826**DCL      6826--REDEF
FPT_CLOSE_READ.V.TYPE#
      6824**DCL      6824--REDEF
FPT_CLOSE_READ.V.XTNSIZE#
      6821**DCL      6821--REDEF    6823--REDEF
FPT_CLOSE_SI.SN_
      6979**DCL      6979--REDEF
FPT_CLOSE_SI.UTL_
      6980**DCL      6980--REDEF
PL6.E3A0      #012=VPD$FETCH_CREATOR File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:30 Page:306  
FPT_CLOSE_SI.V.EXPIRE#
      6994**DCL      6994--REDEF
FPT_CLOSE_SI.V.TYPE#
      6992**DCL      6992--REDEF
FPT_CLOSE_SI.V.XTNSIZE#
      6989**DCL      6989--REDEF    6991--REDEF
FPT_CLOSE_STD.SN_
      6937**DCL      6937--REDEF
FPT_CLOSE_STD.UTL_
      6938**DCL      6938--REDEF
FPT_CLOSE_STD.V.EXPIRE#
      6952**DCL      6952--REDEF
FPT_CLOSE_STD.V.TYPE#
      6950**DCL      6950--REDEF
FPT_CLOSE_STD.V.XTNSIZE#
      6947**DCL      6947--REDEF    6949--REDEF
FPT_CLSEI_FT.SN_
      6853**DCL      6853--REDEF
FPT_CLSEI_FT.UTL_
      6854**DCL      6854--REDEF
FPT_CLSEI_FT.V.EXPIRE#
      6868**DCL      6868--REDEF
FPT_CLSEI_FT.V.TYPE#
      6866**DCL      6866--REDEF
FPT_CLSEI_FT.V.XTNSIZE#
      6863**DCL      6863--REDEF    6865--REDEF
FPT_OPEN_EI.ACSVEH_
      6424**DCL      6425--REDEF
FPT_OPEN_EI.ALTKEYS_
      6430**DCL      6431--REDEF    6431--REDEF
FPT_OPEN_EI.HDR_
      6429**DCL      6430--REDEF
FPT_OPEN_EI.TAB_
      6428**DCL      6429--REDEF
FPT_OPEN_EI.UHL_
      6422**DCL      6423--REDEF    6423--REDEF
PL6.E3A0      #012=VPD$FETCH_CREATOR File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:30 Page:307  
FPT_OPEN_EI.V.FSN#
      6462**DCL      6462--REDEF    6462--REDEF
FPT_OPEN_EI.WSN_
      6428**DCL      6428--REDEF
FPT_OPEN_EI_SAVE.ACSVEH_
      6533**DCL      6534--REDEF
FPT_OPEN_EI_SAVE.ALTKEYS_
      6539**DCL      6540--REDEF    6540--REDEF
FPT_OPEN_EI_SAVE.HDR_
      6538**DCL      6539--REDEF
FPT_OPEN_EI_SAVE.TAB_
      6537**DCL      6538--REDEF
FPT_OPEN_EI_SAVE.UHL_
      6531**DCL      6532--REDEF    6532--REDEF
FPT_OPEN_EI_SAVE.V.FSN#
      6571**DCL      6571--REDEF    6571--REDEF
FPT_OPEN_EI_SAVE.WSN_
      6537**DCL      6537--REDEF
FPT_OPEN_OUT.ACSVEH_
      6315**DCL      6316--REDEF
FPT_OPEN_OUT.ALTKEYS_
      6321**DCL      6322--REDEF    6322--REDEF
FPT_OPEN_OUT.HDR_
      6320**DCL      6321--REDEF
FPT_OPEN_OUT.TAB_
      6319**DCL      6320--REDEF
FPT_OPEN_OUT.UHL_
      6313**DCL      6314--REDEF    6314--REDEF
FPT_OPEN_OUT.V.FSN#
      6353**DCL      6353--REDEF    6353--REDEF
FPT_OPEN_OUT.WSN_
      6319**DCL      6319--REDEF
FPT_OPEN_OUT_SAVE.ACSVEH_
      6206**DCL      6207--REDEF
FPT_OPEN_OUT_SAVE.ALTKEYS_
      6212**DCL      6213--REDEF    6213--REDEF
PL6.E3A0      #012=VPD$FETCH_CREATOR File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:30 Page:308  
FPT_OPEN_OUT_SAVE.HDR_
      6211**DCL      6212--REDEF
FPT_OPEN_OUT_SAVE.TAB_
      6210**DCL      6211--REDEF
FPT_OPEN_OUT_SAVE.UHL_
      6204**DCL      6205--REDEF    6205--REDEF
FPT_OPEN_OUT_SAVE.V.FSN#
      6244**DCL      6244--REDEF    6244--REDEF
FPT_OPEN_OUT_SAVE.WSN_
      6210**DCL      6210--REDEF
FPT_READ_STD.STATION_
      6634**DCL      6635--REDEF
FPT_READ_STD.V.DVBYTE.REREAD#
      6646**DCL      6646--REDEF
FPT_READ_STD.V.INDX#
      6644**DCL      6644--REDEF
FPT_READ_UC.STATION_
      6595**DCL      6596--REDEF
FPT_READ_UC.V.DVBYTE.REREAD#
      6607**DCL      6607--REDEF
FPT_READ_UC.V.INDX#
      6605**DCL      6605--REDEF
FPT_WRITE_ME.STATION_
      6703**DCL      6703--REDEF
FPT_WRITE_ME.V.DVBYTE.VFC#
      6710**DCL      6710--REDEF
FPT_WRITE_OUT.STATION_
      6734**DCL      6734--REDEF
FPT_WRITE_OUT.V.DVBYTE.VFC#
      6741**DCL      6741--REDEF
FPT_WRITE_UC.STATION_
      6672**DCL      6672--REDEF
FPT_WRITE_UC.V.DVBYTE.VFC#
      6679**DCL      6679--REDEF
FROM_SN.SN
      5578**DCL      5579--REDEF
PL6.E3A0      #012=VPD$FETCH_CREATOR File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:30 Page:309  
GETCMD.OUT$
      4785**DCL      4791--REDEF
ICB.FID.STRING
      5602**DCL      5603--REDEF
IFSFA_PARAM.EOMCHAR#
      5957**DCL      5958--REDEF
IFSFA_PARAM.SIG1
      5951**DCL      5951--REDEF
IFSFA_PARAM.SIG2
      5951**DCL      5952--REDEF
INSERT_IDX
      7527**DCL      7550<<CALLBLT  7551>>CALLBLT  7552<<CALLBLT  7553>>IF       7556>>ASSIGN
IN_RES
      5524**DCL      5524--REDEF
IN_SN.SN
      5540**DCL      5541--REDEF
OCB.TYPE
      5286**DCL      5287--REDEF
OFSFA_PARAM.EOMCHAR#
      5987**DCL      5988--REDEF
OFSFA_PARAM.SIG1
      5981**DCL      5981--REDEF
OFSFA_PARAM.SIG2
      5981**DCL      5982--REDEF
OUT_SN.SN
      5558**DCL      5559--REDEF
SPEC_BUF
      5236**DCL      5236--REDEF
TEXT_C
        19**DCL         6--PROC
TEXT_C.C
        20**DCL      7556<<ASSIGN
TEXT_C.TEXT
        21**DCL      7549<<ASSIGN   7550>>CALLBLT  7551<<CALLBLT  7552>>CALLBLT
UNKNOWN_CREATOR
      7556**LABEL    7546--GOTO     7548--CALLALT  7555--GOTO
PL6.E3A0      #012=VPD$FETCH_CREATOR File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:30 Page:310  
XSF$LOCCODP
      7542**DCL-ENT  7548--CALL

PL6.E3A0      #013=VPD$FID File=VPD$UTIL.:E05TSI                                 WED 07/30/97 07:32 Page:311  
     1171        1        /*T***********************************************************/
     1172        2        /*T*                                                         */
     1173        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1174        4        /*T*                                                         */
     1175        5        /*T***********************************************************/
     1176        6        VPD$FID: PROC(FPT_FID,SEV) ALTRET;
     1177        7        /*D* NAME: VPD$FID
     1178        8             CALL: CALL VPD$FID(FPT_FID);
     1179        9                    where FPT_FID is a normal M$FID FPT.
     1180       10             DESCRIPTION: This procedure is used by all of PCL as a uniform interface
     1181       11                          to M$FID.
     1182       12                   NOTE:  If M$FID ALTRETURNS, the error message will be printed with
     1183       13                          the passed SEVERITY.  SEV defaults to 3.
     1184       14        */
     1185       15        %INCLUDE B_ERRORS_C;
     1186     1142        %INCLUDE VP_DATA_R;
     1187     8129        /**/
     1188     8130        /*  PARAMETERS  */
     1189     8131        /**/
     1190     8132        %FPT_FID(FPTN = FPT_FID,STCLASS = "");
     1191     8155    1   DCL SEV SBIN WORD;
     1192     8156        /**/
     1193     8157        /*  BASED STRUCTURES  */
     1194     8158        /**/
     1195     8159        %B$TCB;
     1196     8162        %B$ALT;
     1197     8170    1   DCL 1 VECTR BASED DALIGNED,
     1198     8171    1         2 BOUND UBIN(20) UNAL,
     1199     8172    1         2 FLAGS BIT(16) UNAL,
     1200     8173    1         2 PTR$ PTR UNAL;
     1201     8174    1   DCL 1 TEXT$C BASED,
     1202     8175    1         2 C UBIN BYTE UNAL,
     1203     8176    1         2 TEXT CHAR(TEXT$C.C) UNAL;
     1204     8177        %VLR_FID(FPTN = RESULTS,STCLASS = BASED);
     1205     8196        /**/
     1206     8197        /*  LOCAL STORAGE  */
     1207     8198        /**/
PL6.E3A0      #013=VPD$FID File=VPD$UTIL.:E05TSI                                 WED 07/30/97 07:32 Page:312  
     1208     8199    1   DCL SYS_ERR SBIN WORD;
     1209     8200    1   DCL SEVERITY SBIN WORD STATIC;
     1210     8201        %VLR_FID (FPTN = RESLT,STCLASS = AUTO);
     1211     8220        /**/
     1212     8221        /* ENTRY POINTS  */
     1213     8222        /**/
     1214     8223        %VP_ENTRIES (OMIT=VPD$FID);
     1215     8431        /**/
     1216     8432    1           IF ADDR(SEV) = ADDR(NIL)
     1217     8433    1            THEN
     1218     8434    1              SEVERITY = 3;
     1219     8435    1            ELSE
     1220     8436    1              SEVERITY = SEV;
     1221     8437    1           CALL M$FID (FPT_FID) ALTRET(FID_ERRORS);
     1222     8438    1           IF ADDR(FPT_FID.NAME_) -> VECTR.PTR$ -> TEXT$C.C = 0
     1223     8439    1            THEN
     1224     8440    1              ADDR(FPT_FID.RESULTS_) -> VECTR.PTR$ -> RESULTS.NAME = '0'B;
     1225     8441    1           RETURN;
     1226     8442
     1227     8443    1   FID_ERRORS:
     1228     8444    1           SYS_ERR = B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR.CODE;
     1229     8445    1           RESLT = ADDR(FPT_FID.RESULTS_) -> VECTR.PTR$ -> RESULTS;
     1230     8446    1           IF SYS_ERR = %E$BADVECT5
     1231     8447    1            THEN                           /* Bad SN vector                      */
     1232     8448    1              CALL VPL$ERR_PROC(SEVERITY,230,'04'O);
     1233     8449        /*E* ERROR:   VPD-00230
     1234     8450             MESSAGE: Too many tape reels
     1235     8451        */
     1236     8452                                                /* Unknown error                      */
     1237     8453        /**/
     1238     8454        /*  UNKNOWN ERROR  */
     1239     8455        /**/
     1240     8456    1           CALL VPL$ERR_PROC(SEVERITY,0);
     1241     8457    1           ALTRETURN;
     1242     8458    1   END VPD$FID;
     1243     8459        %EOD;

PL6.E3A0      #013=VPD$FID File=VPD$UTIL.:E05TSI                                 WED 07/30/97 07:32 Page:313  
--  Include file information  --

   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B_ERRORS_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$FID.

   Procedure VPD$FID requires 49 words for executable code.
   Procedure VPD$FID requires 18 words of local(AUTO) storage.

PL6.E3A0      #013=VPD$FID File=VPD$UTIL.:E05TSI                                 WED 07/30/97 07:32 Page:314  

 Object Unit name= VPD$FID                                    File name= VPD$UTIL.:E05TOU
 UTS= JUL 30 '97 07:32:31.56 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$EI
    2   DCB   even  none     0      0  M$EO
    3   DCB   even  none     0      0  M$EO1
    4   DCB   even  none     0      0  M$ME
    5   DCB   even  none     0      0  M$SI
    6   DCB   even  none     0      0  M$READFILE
    7   DCB   even  none     0      0  M$DO
    8   DCB   even  none     0      0  M$STD1
    9   DCB   even  none     0      0  M$SORT1
   10   Data  even  none     1      1  VPD$FID
   11   Proc  even  none    49     61  VPD$FID
   12  RoData even  none     7      7  VPD$FID

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    11      0   yes    yes     yes      Std        2  VPD$FID
PL6.E3A0      #013=VPD$FID File=VPD$UTIL.:E05TSI                                 WED 07/30/97 07:32 Page:315  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       8 VPL$ERR_PROC
                       nStd      0 X66_AUTO_2
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  BREAK_LOC                             BREAK_MESSAGE_REPORTER
     SPEC_BUF                              IN_RES                                M$EI
     M$EO                                  M$EO1                                 M$ME
     M$SI                                  M$READFILE                            M$DO
     M$STD1                                M$SORT1                               B$TCB$
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #013=VPD$FID File=VPD$UTIL.:E05TSI                                 WED 07/30/97 07:32 Page:316  


     1171        1        /*T***********************************************************/
     1172        2        /*T*                                                         */
     1173        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1174        4        /*T*                                                         */
     1175        5        /*T***********************************************************/
     1176        6        VPD$FID: PROC(FPT_FID,SEV) ALTRET;

      6 11 000000   000000 700200 xent  VPD$FID      TSX0  ! X66_AUTO_2
        11 000001   000022 000002                    ZERO    18,2

     1177        7        /*D* NAME: VPD$FID
     1178        8             CALL: CALL VPD$FID(FPT_FID);
     1179        9                    where FPT_FID is a normal M$FID FPT.
     1180       10             DESCRIPTION: This procedure is used by all of PCL as a uniform interface
     1181       11                          to M$FID.
     1182       12                   NOTE:  If M$FID ALTRETURNS, the error message will be printed with
     1183       13                          the passed SEVERITY.  SEV defaults to 3.
     1184       14        */
     1185       15        %INCLUDE B_ERRORS_C;
     1186     1142        %INCLUDE VP_DATA_R;
     1187     8129        /**/
     1188     8130        /*  PARAMETERS  */
     1189     8131        /**/
     1190     8132        %FPT_FID(FPTN = FPT_FID,STCLASS = "");
     1191     8155    1   DCL SEV SBIN WORD;
     1192     8156        /**/
     1193     8157        /*  BASED STRUCTURES  */
     1194     8158        /**/
     1195     8159        %B$TCB;
     1196     8162        %B$ALT;
     1197     8170    1   DCL 1 VECTR BASED DALIGNED,
     1198     8171    1         2 BOUND UBIN(20) UNAL,
     1199     8172    1         2 FLAGS BIT(16) UNAL,
     1200     8173    1         2 PTR$ PTR UNAL;
     1201     8174    1   DCL 1 TEXT$C BASED,
     1202     8175    1         2 C UBIN BYTE UNAL,
PL6.E3A0      #013=VPD$FID File=VPD$UTIL.:E05TSI                                 WED 07/30/97 07:32 Page:317  
     1203     8176    1         2 TEXT CHAR(TEXT$C.C) UNAL;
     1204     8177        %VLR_FID(FPTN = RESULTS,STCLASS = BASED);
     1205     8196        /**/
     1206     8197        /*  LOCAL STORAGE  */
     1207     8198        /**/
     1208     8199    1   DCL SYS_ERR SBIN WORD;
     1209     8200    1   DCL SEVERITY SBIN WORD STATIC;
     1210     8201        %VLR_FID (FPTN = RESLT,STCLASS = AUTO);
     1211     8220        /**/
     1212     8221        /* ENTRY POINTS  */
     1213     8222        /**/
     1214     8223        %VP_ENTRIES (OMIT=VPD$FID);
     1215     8431        /**/
     1216     8432    1           IF ADDR(SEV) = ADDR(NIL)

   8432 11 000002   200004 236100                    LDQ     @SEV,,AUTO
        11 000003   000001 116000 xsym               CMPQ    B_VECTNIL+1
        11 000004   000010 601000 11                 TNZ     s:8436

     1217     8433    1            THEN
     1218     8434    1              SEVERITY = 3;

   8434 11 000005   000003 235007                    LDA     3,DL
        11 000006   000000 755000 10                 STA     SEVERITY
        11 000007   000013 710000 11                 TRA     s:8437

     1219     8435    1            ELSE
     1220     8436    1              SEVERITY = SEV;

   8436 11 000010   200004 470500                    LDP0    @SEV,,AUTO
        11 000011   000000 235100                    LDA     0,,PR0
        11 000012   000000 755000 10                 STA     SEVERITY

     1221     8437    1           CALL M$FID (FPT_FID) ALTRET(FID_ERRORS);

   8437 11 000013   200003 470500                    LDP0    @FPT_FID,,AUTO
        11 000014   420001 713400                    CLIMB   alt,+8193
PL6.E3A0      #013=VPD$FID File=VPD$UTIL.:E05TSI                                 WED 07/30/97 07:32 Page:318  
        11 000015   404400 401760                    pmme    nvectors=10
        11 000016   000033 702000 11                 TSX2    FID_ERRORS

     1222     8438    1           IF ADDR(FPT_FID.NAME_) -> VECTR.PTR$ -> TEXT$C.C = 0

   8438 11 000017   200003 470500                    LDP0    @FPT_FID,,AUTO
        11 000020   000005 471500                    LDP1    5,,PR0
        11 000021   000100 101500                    MRL     fill='000'O
        11 000022   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
        11 000023   200020 000004                    ADSC9   RESLT+10,,AUTO           cn=0,n=4
        11 000024   200020 236100                    LDQ     RESLT+10,,AUTO
        11 000025   000000 116003                    CMPQ    0,DU
        11 000026   000032 601000 11                 TNZ     s:8441

     1223     8439    1            THEN
     1224     8440    1              ADDR(FPT_FID.RESULTS_) -> VECTR.PTR$ -> RESULTS.NAME = '0'B;

   8440 11 000027   000023 471500                    LDP1    19,,PR0
        11 000030   000031 236000 xsym               LDQ     B_VECTNIL+25
        11 000031   100000 356100                    ANSQ    0,,PR1

     1225     8441    1           RETURN;

   8441 11 000032   000000 702200 xent               TSX2  ! X66_ARET

     1226     8442
     1227     8443    1   FID_ERRORS:
     1228     8444    1           SYS_ERR = B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR.CODE;

   8444 11 000033   000000 470400 xsym  FID_ERRORS   LDP0    B$TCB$
        11 000034   000000 471500                    LDP1    0,,PR0
        11 000035   100102 236100                    LDQ     66,,PR1
        11 000036   000003 772000                    QRL     3
        11 000037   037777 376007                    ANQ     16383,DL
        11 000040   200005 756100                    STQ     SYS_ERR,,AUTO

     1229     8445    1           RESLT = ADDR(FPT_FID.RESULTS_) -> VECTR.PTR$ -> RESULTS;
PL6.E3A0      #013=VPD$FID File=VPD$UTIL.:E05TSI                                 WED 07/30/97 07:32 Page:319  

   8445 11 000041   200003 473500                    LDP3    @FPT_FID,,AUTO
        11 000042   300023 474500                    LDP4    19,,PR3
        11 000043   000100 100500                    MLR     fill='000'O
        11 000044   400000 000044                    ADSC9   0,,PR4                   cn=0,n=36
        11 000045   200006 000044                    ADSC9   RESLT,,AUTO              cn=0,n=36

     1230     8446    1           IF SYS_ERR = %E$BADVECT5

   8446 11 000046   000651 116007                    CMPQ    425,DL
        11 000047   000054 601000 11                 TNZ     s:8456

     1231     8447    1            THEN                           /* Bad SN vector                      */
     1232     8448    1              CALL VPL$ERR_PROC(SEVERITY,230,'04'O);

   8448 11 000050   000002 630400 12                 EPPR0   2
        11 000051   000021 631400 xsym               EPPR1   B_VECTNIL+17
        11 000052   000000 701000 xent               TSX1    VPL$ERR_PROC
        11 000053   000000 011000                    NOP     0

     1233     8449        /*E* ERROR:   VPD-00230
     1234     8450             MESSAGE: Too many tape reels
     1235     8451        */
     1236     8452                                                /* Unknown error                      */
     1237     8453        /**/
     1238     8454        /*  UNKNOWN ERROR  */
     1239     8455        /**/
     1240     8456    1           CALL VPL$ERR_PROC(SEVERITY,0);

   8456 11 000054   000005 630400 12                 EPPR0   5
        11 000055   000020 631400 xsym               EPPR1   B_VECTNIL+16
        11 000056   000000 701000 xent               TSX1    VPL$ERR_PROC
        11 000057   000000 011000                    NOP     0

     1241     8457    1           ALTRETURN;

   8457 11 000060   000000 702200 xent               TSX2  ! X66_AALT
PL6.E3A0      #013=VPD$FID File=VPD$UTIL.:E05TSI                                 WED 07/30/97 07:32 Page:320  
     1242     8458    1   END VPD$FID;
     1243     8459        %EOD;

PL6.E3A0      #013=VPD$FID File=VPD$UTIL.:E05TSI                                 WED 07/30/97 07:32 Page:321  
--  Include file information  --

   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B_ERRORS_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$FID.
PL6.E3A0      #013=VPD$FID File=VPD$UTIL.:E05TSI                                 WED 07/30/97 07:32 Page:322  

 **** Variables and constants ****

  ****  Section 010  Data  VPD$FID

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN        r     1 SEVERITY

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @FPT_FID                   4-0-0/w PTR         r     1 @SEV
    *0-0-0/d STRC(864)   r     1 FPT_FID                    6-0-0/d STRC(324)   r     1 RESLT
    *0-0-0/w SBIN        r     1 SEV                        5-0-0/w SBIN        r     1 SYS_ERR

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$TCB$
     0-0-0/w EPTR        r     1 BREAK_MESSAGE_REPORTER

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/w STRC(144)   r     1 B$TCB
     0-0-0/d STRC(324)   r     1 RESULTS                    0-0-0/c ASTR(9)     r     1 TEXT$C
     0-0-0/d STRC(72)    r     1 VECTR

PL6.E3A0      #013=VPD$FID File=VPD$UTIL.:E05TSI                                 WED 07/30/97 07:32 Page:323  

   Procedure VPD$FID requires 49 words for executable code.
   Procedure VPD$FID requires 18 words of local(AUTO) storage.
PL6.E3A0      #013=VPD$FID File=VPD$UTIL.:E05TSI                                 WED 07/30/97 07:32 Page:324  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #013=VPD$FID File=VPD$UTIL.:E05TSI                                 WED 07/30/97 07:32 Page:325  
          MINI XREF LISTING

B$ALT.CODE
      8164**DCL      8164--REDEF    8165--REDEF    8165--REDEF
B$ALT.ERR.CODE
      8166**DCL      8444>>ASSIGN
B$ALT.ERR.ERR#
      8166**DCL      8166--REDEF
B$ALT.EVID
      8165**DCL      8165--REDEF    8165--REDEF
B$TCB.ALT$
      8160**DCL      8444>>ASSIGN
B$TCB$
      7114**DCL      8444>>ASSIGN
BREAK_LOC
      6349**DCL      6349--REDEF
DEF_ICB.FID.STRING
      6947**DCL      6948--REDEF
DEV_ICB.FID.STRING
      6833**DCL      6834--REDEF
EI_KEY.KEY
      7045**DCL      7045--REDEF    7045--REDEF    7045--REDEF
EO_OCB.TYPE
      6545**DCL      6546--REDEF
FID_ERRORS
      8444**LABEL    8437--CALLALT
FPT_CLOSE_EI.SN_
      7886**DCL      7886--REDEF
FPT_CLOSE_EI.UTL_
      7887**DCL      7887--REDEF
FPT_CLOSE_EI.V.EXPIRE#
      7901**DCL      7901--REDEF
FPT_CLOSE_EI.V.TYPE#
      7899**DCL      7899--REDEF
PL6.E3A0      #013=VPD$FID File=VPD$UTIL.:E05TSI                                 WED 07/30/97 07:32 Page:326  
FPT_CLOSE_EI.V.XTNSIZE#
      7896**DCL      7896--REDEF    7898--REDEF
FPT_CLOSE_PTL.SN_
      8012**DCL      8012--REDEF
FPT_CLOSE_PTL.UTL_
      8013**DCL      8013--REDEF
FPT_CLOSE_PTL.V.EXPIRE#
      8027**DCL      8027--REDEF
FPT_CLOSE_PTL.V.TYPE#
      8025**DCL      8025--REDEF
FPT_CLOSE_PTL.V.XTNSIZE#
      8022**DCL      8022--REDEF    8024--REDEF
FPT_CLOSE_READ.SN_
      7928**DCL      7928--REDEF
FPT_CLOSE_READ.UTL_
      7929**DCL      7929--REDEF
FPT_CLOSE_READ.V.EXPIRE#
      7943**DCL      7943--REDEF
FPT_CLOSE_READ.V.TYPE#
      7941**DCL      7941--REDEF
FPT_CLOSE_READ.V.XTNSIZE#
      7938**DCL      7938--REDEF    7940--REDEF
FPT_CLOSE_SI.SN_
      8096**DCL      8096--REDEF
FPT_CLOSE_SI.UTL_
      8097**DCL      8097--REDEF
FPT_CLOSE_SI.V.EXPIRE#
      8111**DCL      8111--REDEF
FPT_CLOSE_SI.V.TYPE#
      8109**DCL      8109--REDEF
FPT_CLOSE_SI.V.XTNSIZE#
      8106**DCL      8106--REDEF    8108--REDEF
FPT_CLOSE_STD.SN_
      8054**DCL      8054--REDEF
FPT_CLOSE_STD.UTL_
      8055**DCL      8055--REDEF
PL6.E3A0      #013=VPD$FID File=VPD$UTIL.:E05TSI                                 WED 07/30/97 07:32 Page:327  
FPT_CLOSE_STD.V.EXPIRE#
      8069**DCL      8069--REDEF
FPT_CLOSE_STD.V.TYPE#
      8067**DCL      8067--REDEF
FPT_CLOSE_STD.V.XTNSIZE#
      8064**DCL      8064--REDEF    8066--REDEF
FPT_CLSEI_FT.SN_
      7970**DCL      7970--REDEF
FPT_CLSEI_FT.UTL_
      7971**DCL      7971--REDEF
FPT_CLSEI_FT.V.EXPIRE#
      7985**DCL      7985--REDEF
FPT_CLSEI_FT.V.TYPE#
      7983**DCL      7983--REDEF
FPT_CLSEI_FT.V.XTNSIZE#
      7980**DCL      7980--REDEF    7982--REDEF
FPT_FID
      8143**DCL         6--PROC     8437<>CALL
FPT_FID.NAME_
      8144**DCL      8438--IF
FPT_FID.RESULTS_
      8146**DCL      8440--ASSIGN   8445--ASSIGN
FPT_OPEN_EI.ACSVEH_
      7541**DCL      7542--REDEF
FPT_OPEN_EI.ALTKEYS_
      7547**DCL      7548--REDEF    7548--REDEF
FPT_OPEN_EI.HDR_
      7546**DCL      7547--REDEF
FPT_OPEN_EI.TAB_
      7545**DCL      7546--REDEF
FPT_OPEN_EI.UHL_
      7539**DCL      7540--REDEF    7540--REDEF
FPT_OPEN_EI.V.FSN#
      7579**DCL      7579--REDEF    7579--REDEF
FPT_OPEN_EI.WSN_
      7545**DCL      7545--REDEF
PL6.E3A0      #013=VPD$FID File=VPD$UTIL.:E05TSI                                 WED 07/30/97 07:32 Page:328  
FPT_OPEN_EI_SAVE.ACSVEH_
      7650**DCL      7651--REDEF
FPT_OPEN_EI_SAVE.ALTKEYS_
      7656**DCL      7657--REDEF    7657--REDEF
FPT_OPEN_EI_SAVE.HDR_
      7655**DCL      7656--REDEF
FPT_OPEN_EI_SAVE.TAB_
      7654**DCL      7655--REDEF
FPT_OPEN_EI_SAVE.UHL_
      7648**DCL      7649--REDEF    7649--REDEF
FPT_OPEN_EI_SAVE.V.FSN#
      7688**DCL      7688--REDEF    7688--REDEF
FPT_OPEN_EI_SAVE.WSN_
      7654**DCL      7654--REDEF
FPT_OPEN_OUT.ACSVEH_
      7432**DCL      7433--REDEF
FPT_OPEN_OUT.ALTKEYS_
      7438**DCL      7439--REDEF    7439--REDEF
FPT_OPEN_OUT.HDR_
      7437**DCL      7438--REDEF
FPT_OPEN_OUT.TAB_
      7436**DCL      7437--REDEF
FPT_OPEN_OUT.UHL_
      7430**DCL      7431--REDEF    7431--REDEF
FPT_OPEN_OUT.V.FSN#
      7470**DCL      7470--REDEF    7470--REDEF
FPT_OPEN_OUT.WSN_
      7436**DCL      7436--REDEF
FPT_OPEN_OUT_SAVE.ACSVEH_
      7323**DCL      7324--REDEF
FPT_OPEN_OUT_SAVE.ALTKEYS_
      7329**DCL      7330--REDEF    7330--REDEF
FPT_OPEN_OUT_SAVE.HDR_
      7328**DCL      7329--REDEF
FPT_OPEN_OUT_SAVE.TAB_
      7327**DCL      7328--REDEF
PL6.E3A0      #013=VPD$FID File=VPD$UTIL.:E05TSI                                 WED 07/30/97 07:32 Page:329  
FPT_OPEN_OUT_SAVE.UHL_
      7321**DCL      7322--REDEF    7322--REDEF
FPT_OPEN_OUT_SAVE.V.FSN#
      7361**DCL      7361--REDEF    7361--REDEF
FPT_OPEN_OUT_SAVE.WSN_
      7327**DCL      7327--REDEF
FPT_READ_STD.STATION_
      7751**DCL      7752--REDEF
FPT_READ_STD.V.DVBYTE.REREAD#
      7763**DCL      7763--REDEF
FPT_READ_STD.V.INDX#
      7761**DCL      7761--REDEF
FPT_READ_UC.STATION_
      7712**DCL      7713--REDEF
FPT_READ_UC.V.DVBYTE.REREAD#
      7724**DCL      7724--REDEF
FPT_READ_UC.V.INDX#
      7722**DCL      7722--REDEF
FPT_WRITE_ME.STATION_
      7820**DCL      7820--REDEF
FPT_WRITE_ME.V.DVBYTE.VFC#
      7827**DCL      7827--REDEF
FPT_WRITE_OUT.STATION_
      7851**DCL      7851--REDEF
FPT_WRITE_OUT.V.DVBYTE.VFC#
      7858**DCL      7858--REDEF
FPT_WRITE_UC.STATION_
      7789**DCL      7789--REDEF
FPT_WRITE_UC.V.DVBYTE.VFC#
      7796**DCL      7796--REDEF
FROM_SN.SN
      6695**DCL      6696--REDEF
GETCMD.OUT$
      5902**DCL      5908--REDEF
ICB.FID.STRING
      6719**DCL      6720--REDEF
PL6.E3A0      #013=VPD$FID File=VPD$UTIL.:E05TSI                                 WED 07/30/97 07:32 Page:330  
IFSFA_PARAM.EOMCHAR#
      7074**DCL      7075--REDEF
IFSFA_PARAM.SIG1
      7068**DCL      7068--REDEF
IFSFA_PARAM.SIG2
      7068**DCL      7069--REDEF
IN_RES
      6641**DCL      6641--REDEF
IN_SN.SN
      6657**DCL      6658--REDEF
M$FID
      1222**DCL-ENT  8437--CALL
OCB.TYPE
      6403**DCL      6404--REDEF
OFSFA_PARAM.EOMCHAR#
      7104**DCL      7105--REDEF
OFSFA_PARAM.SIG1
      7098**DCL      7098--REDEF
OFSFA_PARAM.SIG2
      7098**DCL      7099--REDEF
OUT_SN.SN
      6675**DCL      6676--REDEF
RESLT
      8212**DCL      8445<<ASSIGN
RESULTS
      8188**DCL      8445>>ASSIGN
RESULTS.NAME
      8188**DCL      8440<<ASSIGN
SEV
      8155**DCL         6--PROC     8432--IF       8436>>ASSIGN
SEVERITY
      8200**DCL      8434<<ASSIGN   8436<<ASSIGN   8448<>CALL     8456<>CALL
SPEC_BUF
      6353**DCL      6353--REDEF
SYS_ERR
      8199**DCL      8444<<ASSIGN   8446>>IF
PL6.E3A0      #013=VPD$FID File=VPD$UTIL.:E05TSI                                 WED 07/30/97 07:32 Page:331  
TEXT$C.C
      8175**DCL      8176--IMP-SIZ  8438>>IF
VECTR.PTR$
      8173**DCL      8438>>IF       8440>>ASSIGN   8445>>ASSIGN
VPL$ERR_PROC
      8405**DCL-ENT  8448--CALL     8456--CALL

PL6.E3A0      #014=VPD$GET_BUF File=VPD$UTIL.:E05TSI                             WED 07/30/97 07:34 Page:332  
     1244        1        /*T***********************************************************/
     1245        2        /*T*                                                         */
     1246        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1247        4        /*T*                                                         */
     1248        5        /*T***********************************************************/
     1249        6        VPD$GET_BUF: PROC(BUF$,WORDS) ALTRET;
     1250        7        /*D* NAME: VPD$GET_BUF
     1251        8             CALL: CALL VPD$GET_BUF(BUF$,WORDS);
     1252        9             DESCRIPTION: This procedure is used to allocate a data segment of
     1253       10                          the requested size.  If there is not enough memory to
     1254       11                          allocate the entire buffer, the ALTRETURN is taken and
     1255       12                          no space is allocated.
     1256       13        */
     1257       14        /**/
     1258       15        /*  INCLUDE FILES  */
     1259       16        /**/
     1260       17        %INCLUDE CP_6;
     1261       98        /**/
     1262       99        /*  Parameters  */
     1263      100        /**/
     1264      101    1   DCL WORDS SBIN WORD;
     1265      102    1   DCL BUF$ PTR;
     1266      103        /**/
     1267      104        /*  Local Storage  */
     1268      105        /**/
     1269      106        %VLP_VECTOR(FPTN = RESULTS,
     1270      107                    STCLASS = STATIC);
     1271      122        %FPT_GDS(FPTN = FPT_GDS,
     1272      123                 FREE = YES,
     1273      124                 RESULTS = RESULTS,
     1274      125                 STCLASS = STATIC);
     1275      141        %FPT_FDS(FPTN = FPT_FDS,
     1276      142                 RESULTS = RESULTS,
     1277      143                 STCLASS = STATIC);
     1278      158        /**/
     1279      159    1           RESULTS.PTR$ = BUF$;
     1280      160    1           FPT_GDS.V.SEGSIZE# = WORDS;
PL6.E3A0      #014=VPD$GET_BUF File=VPD$UTIL.:E05TSI                             WED 07/30/97 07:34 Page:333  
     1281      161        /**/
     1282      162    1           CALL M$GDS(FPT_GDS) ALTRET(ALT);
     1283      163        /**/
     1284      164    1           BUF$ = RESULTS.PTR$;
     1285      165        /**/
     1286      166    1           RETURN;
     1287      167        %EJECT;
PL6.E3A0      #014=VPD$GET_BUF File=VPD$UTIL.:E05TSI                             WED 07/30/97 07:34 Page:334  
     1288      168    1   VPD$REL_BUF: ENTRY(BUF$,WORDS) ALTRET;
     1289      169        /*D* NAME: VPD$REL_BUF
     1290      170             CALL: CALL VPD$REL_BUF(BUF$,WORDS);
     1291      171             DESCRIPTION: This procedure is used to release the data segment
     1292      172                          allocated by VPD$GETBUF.
     1293      173        */
     1294      174        /**/
     1295      175    1           RESULTS.PTR$ = BUF$;
     1296      176    1           FPT_FDS.V.SEGSIZE# = WORDS;
     1297      177        /**/
     1298      178    1           CALL M$FDS(FPT_FDS) ALTRET(ALT);
     1299      179        /**/
     1300      180    1           BUF$ = ADDR(NIL);
     1301      181        /**/
     1302      182    1           RETURN;
     1303      183
     1304      184
     1305      185    1   ALT:    ;                               /* PMME problems                      */
     1306      186    1           ALTRETURN;
     1307      187
     1308      188    1   END VPD$GET_BUF;
     1309      189        %EOD;

PL6.E3A0      #014=VPD$GET_BUF File=VPD$UTIL.:E05TSI                             WED 07/30/97 07:34 Page:335  
--  Include file information  --

   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$GET_BUF.

   Procedure VPD$GET_BUF requires 33 words for executable code.
   Procedure VPD$GET_BUF requires 6 words of local(AUTO) storage.

PL6.E3A0      #014=VPD$GET_BUF File=VPD$UTIL.:E05TSI                             WED 07/30/97 07:34 Page:336  

 Object Unit name= VPD$GET_BUF                                File name= VPD$UTIL.:E05TOU
 UTS= JUL 30 '97 07:34:46.64 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none    14     16  VPD$GET_BUF
    2   Proc  even  none    33     41  VPD$GET_BUF

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     2      0   yes    yes     yes      Std        2  VPD$GET_BUF
     2     20          yes     yes      Std        2  VPD$REL_BUF

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_2
                       nStd      0 X66_ARET
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B_VECTNIL
PL6.E3A0      #014=VPD$GET_BUF File=VPD$UTIL.:E05TSI                             WED 07/30/97 07:34 Page:337  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #014=VPD$GET_BUF File=VPD$UTIL.:E05TSI                             WED 07/30/97 07:34 Page:338  


     1244        1        /*T***********************************************************/
     1245        2        /*T*                                                         */
     1246        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1247        4        /*T*                                                         */
     1248        5        /*T***********************************************************/
     1249        6        VPD$GET_BUF: PROC(BUF$,WORDS) ALTRET;

      6  2 000000   000000 700200 xent  VPD$GET_BUF  TSX0  ! X66_AUTO_2
         2 000001   000006 000002                    ZERO    6,2

     1250        7        /*D* NAME: VPD$GET_BUF
     1251        8             CALL: CALL VPD$GET_BUF(BUF$,WORDS);
     1252        9             DESCRIPTION: This procedure is used to allocate a data segment of
     1253       10                          the requested size.  If there is not enough memory to
     1254       11                          allocate the entire buffer, the ALTRETURN is taken and
     1255       12                          no space is allocated.
     1256       13        */
     1257       14        /**/
     1258       15        /*  INCLUDE FILES  */
     1259       16        /**/
     1260       17        %INCLUDE CP_6;
     1261       98        /**/
     1262       99        /*  Parameters  */
     1263      100        /**/
     1264      101    1   DCL WORDS SBIN WORD;
     1265      102    1   DCL BUF$ PTR;
     1266      103        /**/
     1267      104        /*  Local Storage  */
     1268      105        /**/
     1269      106        %VLP_VECTOR(FPTN = RESULTS,
     1270      107                    STCLASS = STATIC);
     1271      122        %FPT_GDS(FPTN = FPT_GDS,
     1272      123                 FREE = YES,
     1273      124                 RESULTS = RESULTS,
     1274      125                 STCLASS = STATIC);
     1275      141        %FPT_FDS(FPTN = FPT_FDS,
PL6.E3A0      #014=VPD$GET_BUF File=VPD$UTIL.:E05TSI                             WED 07/30/97 07:34 Page:339  
     1276      142                 RESULTS = RESULTS,
     1277      143                 STCLASS = STATIC);
     1278      158        /**/
     1279      159    1           RESULTS.PTR$ = BUF$;

    159  2 000002   200003 470500                    LDP0    @BUF$,,AUTO
         2 000003   000000 236100                    LDQ     0,,PR0
         2 000004   000001 756000 1                  STQ     RESULTS+1

     1280      160    1           FPT_GDS.V.SEGSIZE# = WORDS;

    160  2 000005   200004 471500                    LDP1    @WORDS,,AUTO
         2 000006   100000 720100                    LXL0    0,,PR1
         2 000007   000006 440000 1                  SXL0    FPT_GDS+4

     1281      161        /**/
     1282      162    1           CALL M$GDS(FPT_GDS) ALTRET(ALT);

    162  2 000010   000002 630400 1                  EPPR0   FPT_GDS
         2 000011   430001 713400                    CLIMB   alt,gds
         2 000012   400400 401760                    pmme    nvectors=2
         2 000013   000040 702000 2                  TSX2    ALT

     1283      163        /**/
     1284      164    1           BUF$ = RESULTS.PTR$;

    164  2 000014   000001 236000 1                  LDQ     RESULTS+1
         2 000015   200003 470500                    LDP0    @BUF$,,AUTO
         2 000016   000000 756100                    STQ     0,,PR0

     1285      165        /**/
     1286      166    1           RETURN;

    166  2 000017   000000 702200 xent               TSX2  ! X66_ARET

     1287      167        %EJECT;
PL6.E3A0      #014=VPD$GET_BUF File=VPD$UTIL.:E05TSI                             WED 07/30/97 07:34 Page:340  
     1288      168    1   VPD$REL_BUF: ENTRY(BUF$,WORDS) ALTRET;

    168  2 000020   000000 700200 xent  VPD$REL_BUF  TSX0  ! X66_AUTO_2
         2 000021   000006 000002                    ZERO    6,2

     1289      169        /*D* NAME: VPD$REL_BUF
     1290      170             CALL: CALL VPD$REL_BUF(BUF$,WORDS);
     1291      171             DESCRIPTION: This procedure is used to release the data segment
     1292      172                          allocated by VPD$GETBUF.
     1293      173        */
     1294      174        /**/
     1295      175    1           RESULTS.PTR$ = BUF$;

    175  2 000022   200003 470500                    LDP0    @BUF$,,AUTO
         2 000023   000000 236100                    LDQ     0,,PR0
         2 000024   000001 756000 1                  STQ     RESULTS+1

     1296      176    1           FPT_FDS.V.SEGSIZE# = WORDS;

    176  2 000025   200004 471500                    LDP1    @WORDS,,AUTO
         2 000026   100000 720100                    LXL0    0,,PR1
         2 000027   000014 440000 1                  SXL0    FPT_FDS+4

     1297      177        /**/
     1298      178    1           CALL M$FDS(FPT_FDS) ALTRET(ALT);

    178  2 000030   000010 630400 1                  EPPR0   FPT_FDS
         2 000031   430002 713400                    CLIMB   alt,fds
         2 000032   400400 401760                    pmme    nvectors=2
         2 000033   000040 702000 2                  TSX2    ALT

     1299      179        /**/
     1300      180    1           BUF$ = ADDR(NIL);

    180  2 000034   000001 236000 xsym               LDQ     B_VECTNIL+1
         2 000035   200003 470500                    LDP0    @BUF$,,AUTO
         2 000036   000000 756100                    STQ     0,,PR0
PL6.E3A0      #014=VPD$GET_BUF File=VPD$UTIL.:E05TSI                             WED 07/30/97 07:34 Page:341  

     1301      181        /**/
     1302      182    1           RETURN;

    182  2 000037   000000 702200 xent               TSX2  ! X66_ARET

    180  2 000040                       ALT          null
     1303      183
     1304      184
     1305      185    1   ALT:    ;                               /* PMME problems                      */
     1306      186    1           ALTRETURN;

    186  2 000040   000000 702200 xent               TSX2  ! X66_AALT
     1307      187
     1308      188    1   END VPD$GET_BUF;
     1309      189        %EOD;

PL6.E3A0      #014=VPD$GET_BUF File=VPD$UTIL.:E05TSI                             WED 07/30/97 07:34 Page:342  
--  Include file information  --

   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$GET_BUF.
PL6.E3A0      #014=VPD$GET_BUF File=VPD$UTIL.:E05TSI                             WED 07/30/97 07:34 Page:343  

 **** Variables and constants ****

  ****  Section 001  Data  VPD$GET_BUF

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    10-0-0/d STRC(216)   r     1 FPT_FDS                    2-0-0/d STRC(216)   r     1 FPT_GDS
     0-0-0/d STRC(72)    r     1 RESULTS

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @BUF$                      4-0-0/w PTR         r     1 @WORDS
    *0-0-0/w PTR         r     1 BUF$                      *0-0-0/w SBIN        r     1 WORDS


   Procedure VPD$GET_BUF requires 33 words for executable code.
   Procedure VPD$GET_BUF requires 6 words of local(AUTO) storage.
PL6.E3A0      #014=VPD$GET_BUF File=VPD$UTIL.:E05TSI                             WED 07/30/97 07:34 Page:344  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #014=VPD$GET_BUF File=VPD$UTIL.:E05TSI                             WED 07/30/97 07:34 Page:345  
          MINI XREF LISTING

ALT
       180**LABEL     162--CALLALT   178--CALLALT
BUF$
       102**DCL         6--PROC      159>>ASSIGN    164<<ASSIGN    168--ENTRY     175>>ASSIGN    180<<ASSIGN
FPT_FDS
       154**DCL       178<>CALL
FPT_FDS.V
       154**DCL       154--DCLINIT
FPT_FDS.V.SEGSIZE#
       156**DCL       176<<ASSIGN
FPT_GDS
       136**DCL       162<>CALL
FPT_GDS.V
       136**DCL       136--DCLINIT
FPT_GDS.V.SEGSIZE#
       139**DCL       160<<ASSIGN
M$FDS
        61**DCL-ENT   178--CALL
M$GDS
        61**DCL-ENT   162--CALL
RESULTS
       118**DCL       136--DCLINIT   154--DCLINIT
RESULTS.PTR$
       120**DCL       159<<ASSIGN    164>>ASSIGN    175<<ASSIGN
RESULTS.W2
       119**DCL       120--REDEF
WORDS
       101**DCL         6--PROC      160>>ASSIGN    168--ENTRY     176>>ASSIGN

PL6.E3A0      #015=VPD$GET_INPUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:35 Page:346  
     1310        1        /*T***********************************************************/
     1311        2        /*T*                                                         */
     1312        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1313        4        /*T*                                                         */
     1314        5        /*T***********************************************************/
     1315        6        VPD$GET_INPUT: PROC(IDX);
     1316        7        /*D* NAME: VPD$GET_INPUT
     1317        8             CALL: CALL VPD$GET_INPUT(IDX);
     1318        9             DESCRIPTION: GET_INPUT is called with IDX  (SBIN WORD) indicating
     1319       10                          where in PARSE_IN_BUF to begin putting the next input.
     1320       11                          If IDX=0,  the buffer is blanked out first.
     1321       12                          The M$READ buffer vector is altered to point to the
     1322       13                          correct area in PARSE_IN_BUF and M$READ is called.
     1323       14                          If both M$ME and M$SI are DDEV='IC' then the input is not
     1324       15                          echoed, otherwise it is through M$ME if ECHO is on.
     1325       16                          Any error on M$READ
     1326       17                          aborts the command, any other ALTRET aborts PCL.
     1327       18        */
     1328       19    1   DCL IDX SBIN WORD;
     1329       20        %INCLUDE VP_DATA_R;
     1330     7007        %INCLUDE F$DCB;
     1331     7056        %INCLUDE B_ERRORS_C;
     1332     8183 S      %INCLUDE B$JIT_C;
     1333     8184        %B$TCB;
     1334     8187        %B$ALT;
     1335     8195        %B$JIT0;
     1336     8284        %U$JIT1;
     1337     8358    1         2 * BIT (1);                      /* DON'T NEED REST OF JIT             */
     1338     8359    1   DCL 1 OUT_BUF,
     1339     8360    1         2 PROMPT CHAR(1),
     1340     8361    1         2 CMD CHAR(1024);
     1341     8362        %VP_ENTRIES (OMIT=VPD$GET_INPUT);
     1342     8570        %FPT_READ;
     1343     8609    1           FPT_READ.BUF_   = VECTOR(PARSE_IN_BUF);
     1344     8610    1           PARSE_INPUT_OFFSET = IDX;
     1345     8611    1           IF IDX>0                        /* CONTINUATION?                      */
     1346     8612    1            THEN
PL6.E3A0      #015=VPD$GET_INPUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:35 Page:347  
     1347     8613    2            DO;                            /* YES...FUTZ THE READ BUF VECTOR*/
     1348     8614    2               FPT_READ.BUF_.BOUND   = FPT_READ.BUF_.BOUND-IDX;
     1349     8615    2               FPT_READ.BUF_.BUF$   = PINCRC(FPT_READ.BUF_.BUF$,IDX);
     1350     8616    2               END;
     1351     8617        /***
     1352     8618         *** SET UP TO SKIP READ IF BREAK ON A REVIEW
     1353     8619         ***/
     1354     8620    1           IF CMD_MASK='000100002'O        /* A REVIEW OR REVIEWSTD              */
     1355     8621    1            THEN
     1356     8622    1              REMEMBER SKIP_READ IN BREAK_LOC;
     1357     8623    1           IF READ_FILE
     1358     8624    1            THEN
     1359     8625    1              FPT_READ.V.DCB# = M$READFILE#;
     1360     8626    1            ELSE
     1361     8627    1              FPT_READ.V.DCB# = M$SI#;
     1362     8628    1   READ_SI: CALL M$READ(FPT_READ) ALTRET(READ_ALT);
     1363     8629    1           BREAK_LOC_BITS = '0'B;          /* Reset Review Break Special Casing  */
     1364     8630    1           IF (NOT M$SI$ -> F$DCB.DDEV.IC  /* If M$SI isn't the user's console   */
     1365     8631    1             OR NOT M$ME$ -> F$DCB.DDEV.UCOUT) /* or M$ME isn't the user console */
     1366     8632    1             AND (B$JIT.CPFLAGS1 & %CP_ECHO#) /* and ECHO is ON                  */
     1367     8633    1            THEN                           /* ECHO the input line                */
     1368     8634    2            DO;
     1369     8635    2               OUT_BUF.PROMPT = '<';
     1370     8636    2               OUT_BUF.CMD = SUBSTR(PARSE_IN_BUF,IDX);
     1371     8637    2               FPT_WRITE_ME.BUF_ = VECTOR(OUT_BUF);
     1372     8638    2               FPT_WRITE_ME.BUF_.BOUND = M$SI$->F$DCB.ARS;
     1373     8639    2               FPT_WRITE_ME.V.DVBYTE.VFC# = '0'B;
     1374     8640    2               CALL M$WRITE(FPT_WRITE_ME);
     1375     8641    2               END;
     1376     8642    1   GET_LEN:PCB.NCHARS = IDX + M$SI$ -> F$DCB.ARS;
     1377     8643    1   SKIP_READ: RETURN;
     1378     8644    1   READ_ALT: IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE=%E$EOF
     1379     8645    1            THEN
     1380     8646    1              IF IDX>0
     1381     8647    1               THEN
     1382     8648    1                 CALL VPL$ERR_PROC(3,10,'04'O);
     1383     8649        /*E* ERROR:   VPD-00010
PL6.E3A0      #015=VPD$GET_INPUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:35 Page:348  
     1384     8650             MESSAGE: Nothing to continue
     1385     8651        */
     1386     8652    1               ELSE
     1387     8653    1                 IF READ_FILE
     1388     8654    1                  THEN                     /* A READ command just ended          */
     1389     8655    2                  DO;
     1390     8656    2                     CALL M$CLOSE(FPT_CLOSE_READ); /* Quit READing there         */
     1391     8657    2                     READ_FILE = '0'B;     /* READ command no longer active      */
     1392     8658    2                     FPT_READ.V.DCB# = M$SI#;
     1393     8659    2                     GOTO READ_SI;
     1394     8660    2                     END;
     1395     8661    1                  ELSE                     /* A 'true' EOF, exit PCL             */
     1396     8662    2                  DO;
     1397     8663    2                     PARSE_IN_BUF = 'END'; /* Fake an END command                */
     1398     8664    2                     PCB.NCHARS = 3;
     1399     8665    2                     RETURN;
     1400     8666    2                     END;
     1401     8667    1           IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE=%E$LD
     1402     8668    1            THEN
     1403     8669    1              CALL VPL$ERR_PROC(3,20,'04'O);
     1404     8670        /*E* ERROR:   VPD-00020
     1405     8671             MESSAGE: Command too long
     1406     8672            MESSAGE1: Input command may not be greater than 1024 characters
     1407     8673        */
     1408     8674    1           IF M$SI$->F$DCB.DDEV.IC         /* IF HE CAN HEAR US                  */
     1409     8675    1            THEN
     1410     8676    1              CALL VPL$ERR_PROC (3,0);     /* JUST WARN HIM & ABORT CMD          */
     1411     8677    1            ELSE
     1412     8678    1              CALL VPL$ERR_PROC (4,0);     /* BLOW HIM AWAY                      */
     1413     8679    1   END VPD$GET_INPUT;
     1414     8680        %EOD;

PL6.E3A0      #015=VPD$GET_INPUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:35 Page:349  
--  Include file information  --

   B_ERRORS_C.:E05TOU  is referenced.
   F$DCB.:E05TOU  cannot be made into a system file and is referenced.
   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$GET_INPUT.

   Procedure VPD$GET_INPUT requires 140 words for executable code.
   Procedure VPD$GET_INPUT requires 264 words of local(AUTO) storage.

PL6.E3A0      #015=VPD$GET_INPUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:35 Page:350  

 Object Unit name= VPD$GET_INPUT                              File name= VPD$UTIL.:E05TOU
 UTS= JUL 30 '97 07:35:00.32 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$EI
    2   DCB   even  none     0      0  M$EO
    3   DCB   even  none     0      0  M$EO1
    4   DCB   even  none     0      0  M$ME
    5   DCB   even  none     0      0  M$SI
    6   DCB   even  none     0      0  M$READFILE
    7   DCB   even  none     0      0  M$DO
    8   DCB   even  none     0      0  M$STD1
    9   DCB   even  none     0      0  M$SORT1
   10   Data  even  none    14     16  VPD$GET_INPUT
   11  RoData even  UTS      2      2  VPD$GET_INPUT
   12   Proc  even  none   140    214  VPD$GET_INPUT
   13  RoData even  none    16     20  VPD$GET_INPUT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    12      0   yes            yes      Std        1  VPD$GET_INPUT
PL6.E3A0      #015=VPD$GET_INPUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:35 Page:351  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       8 VPL$ERR_PROC
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AUTO_1
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  PARSE_IN_BUF                          PARSE_INPUT_OFFSET
     READ_FILE                             PCB                                   BREAK_LOC
     BREAK_MESSAGE_REPORTER                CMD_MASK                              SPEC_BUF
     IN_RES                                M$EI                                  M$EO
     M$EO1                                 M$ME                                  M$ME$
     M$SI                                  M$SI$                                 M$SI#
     M$READFILE                            M$READFILE#                           M$DO
     M$STD1                                M$SORT1                               B$TCB$
     B$JIT$                                FPT_WRITE_ME                     r    FPT_CLOSE_READ
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #015=VPD$GET_INPUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:35 Page:352  


     1310        1        /*T***********************************************************/
     1311        2        /*T*                                                         */
     1312        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1313        4        /*T*                                                         */
     1314        5        /*T***********************************************************/
     1315        6        VPD$GET_INPUT: PROC(IDX);

      6 12 000000   000000 700200 xent  VPD$GET_INP* TSX0  ! X66_AUTO_1
        12 000001   000410 000001                    ZERO    264,1

     1316        7        /*D* NAME: VPD$GET_INPUT
     1317        8             CALL: CALL VPD$GET_INPUT(IDX);
     1318        9             DESCRIPTION: GET_INPUT is called with IDX  (SBIN WORD) indicating
     1319       10                          where in PARSE_IN_BUF to begin putting the next input.
     1320       11                          If IDX=0,  the buffer is blanked out first.
     1321       12                          The M$READ buffer vector is altered to point to the
     1322       13                          correct area in PARSE_IN_BUF and M$READ is called.
     1323       14                          If both M$ME and M$SI are DDEV='IC' then the input is not
     1324       15                          echoed, otherwise it is through M$ME if ECHO is on.
     1325       16                          Any error on M$READ
     1326       17                          aborts the command, any other ALTRET aborts PCL.
     1327       18        */
     1328       19    1   DCL IDX SBIN WORD;
     1329       20        %INCLUDE VP_DATA_R;
     1330     7007        %INCLUDE F$DCB;
     1331     7056        %INCLUDE B_ERRORS_C;
     1332     8183 S      %INCLUDE B$JIT_C;
     1333     8184        %B$TCB;
     1334     8187        %B$ALT;
     1335     8195        %B$JIT0;
     1336     8284        %U$JIT1;
     1337     8358    1         2 * BIT (1);                      /* DON'T NEED REST OF JIT             */
     1338     8359    1   DCL 1 OUT_BUF,
     1339     8360    1         2 PROMPT CHAR(1),
     1340     8361    1         2 CMD CHAR(1024);
     1341     8362        %VP_ENTRIES (OMIT=VPD$GET_INPUT);
PL6.E3A0      #015=VPD$GET_INPUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:35 Page:353  
     1342     8570        %FPT_READ;
     1343     8609    1           FPT_READ.BUF_   = VECTOR(PARSE_IN_BUF);

   8609 12 000002   000000 237000 13                 LDAQ    0
        12 000003   000004 757000 10                 STAQ    FPT_READ+4

     1344     8610    1           PARSE_INPUT_OFFSET = IDX;

   8610 12 000004   200003 470500                    LDP0    @IDX,,AUTO
        12 000005   000000 235100                    LDA     0,,PR0
        12 000006   000000 755000 xsym               STA     PARSE_INPUT_OFFSET

     1345     8611    1           IF IDX>0                        /* CONTINUATION?                      */

   8611 12 000007   000000 235100                    LDA     0,,PR0
        12 000010   000024 604400 12                 TMOZ    s:8620

     1346     8612    1            THEN
     1347     8613    2            DO;                            /* YES...FUTZ THE READ BUF VECTOR*/

     1348     8614    2               FPT_READ.BUF_.BOUND   = FPT_READ.BUF_.BOUND-IDX;

   8614 12 000011   000004 236000 10                 LDQ     FPT_READ+4
        12 000012   000020 772000                    QRL     16
        12 000013   000000 136100                    SBLQ    0,,PR0
        12 000014   000020 736000                    QLS     16
        12 000015   000004 676000 10                 ERQ     FPT_READ+4
        12 000016   000034 376000 xsym               ANQ     B_VECTNIL+28
        12 000017   000004 656000 10                 ERSQ    FPT_READ+4

     1349     8615    2               FPT_READ.BUF_.BUF$   = PINCRC(FPT_READ.BUF_.BUF$,IDX);

   8615 12 000020   000000 236100                    LDQ     0,,PR0
        12 000021   000020 736000                    QLS     16
        12 000022   000005 036000 10                 ADLQ    FPT_READ+5
        12 000023   000005 756000 10                 STQ     FPT_READ+5

PL6.E3A0      #015=VPD$GET_INPUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:35 Page:354  
     1350     8616    2               END;

     1351     8617        /***
     1352     8618         *** SET UP TO SKIP READ IF BREAK ON A REVIEW
     1353     8619         ***/
     1354     8620    1           IF CMD_MASK='000100002'O        /* A REVIEW OR REVIEWSTD              */

   8620 12 000024   000000 106400                    CMPC    fill='000'O
        12 000025   000000 000010 xsym               ADSC9   CMD_MASK                 cn=0,n=8
        12 000026   000000 000003 11                 ADSC9   0                        cn=0,n=3
        12 000027   000033 601000 12                 TNZ     s:8623

     1355     8621    1            THEN
     1356     8622    1              REMEMBER SKIP_READ IN BREAK_LOC;

   8622 12 000030   000126 635000 12                 EAA     SKIP_READ
        12 000031   000000 452400 xsym               STP2    BREAK_LOC
        12 000032   000001 755000 xsym               STA     BREAK_LOC+1

     1357     8623    1           IF READ_FILE

   8623 12 000033   000000 234000 xsym               SZN     READ_FILE
        12 000034   000040 605000 12                 TPL     s:8627

     1358     8624    1            THEN
     1359     8625    1              FPT_READ.V.DCB# = M$READFILE#;

   8625 12 000035   000000 720000 xsym               LXL0    M$READFILE#
        12 000036   000010 740000 10                 STX0    FPT_READ+8
        12 000037   000042 710000 12                 TRA     READ_SI

     1360     8626    1            ELSE
     1361     8627    1              FPT_READ.V.DCB# = M$SI#;

   8627 12 000040   000000 720000 xsym               LXL0    M$SI#
        12 000041   000010 740000 10                 STX0    FPT_READ+8

PL6.E3A0      #015=VPD$GET_INPUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:35 Page:355  
     1362     8628    1   READ_SI: CALL M$READ(FPT_READ) ALTRET(READ_ALT);

   8628 12 000042   000000 630400 10    READ_SI      EPPR0   FPT_READ
        12 000043   440000 713400                    CLIMB   alt,read
        12 000044   401400 401760                    pmme    nvectors=4
        12 000045   000127 702000 12                 TSX2    READ_ALT

     1363     8629    1           BREAK_LOC_BITS = '0'B;          /* Reset Review Break Special Casing  */

   8629 12 000046   000000 235003                    LDA     0,DU
        12 000047   000000 236003                    LDQ     0,DU
        12 000050   000000 757000 xsym               STAQ    BREAK_LOC

     1364     8630    1           IF (NOT M$SI$ -> F$DCB.DDEV.IC  /* If M$SI isn't the user's console   */

   8630 12 000051   000000 470400 xsym               LDP0    M$SI$
        12 000052   000004 236100                    LDQ     4,,PR0
        12 000053   100000 316007                    CANQ    32768,DL
        12 000054   000061 600000 12                 TZE     s:8630+8
        12 000055   000000 471400 xsym               LDP1    M$ME$
        12 000056   100004 236100                    LDQ     4,,PR1
        12 000057   020000 316007                    CANQ    8192,DL
        12 000060   000121 601000 12                 TNZ     GET_LEN
        12 000061   000000 471400 xsym               LDP1    B$JIT$
        12 000062   100143 236100                    LDQ     99,,PR1
        12 000063   000012 376000 xsym               ANQ     B_VECTNIL+10
        12 000064   000121 600000 12                 TZE     GET_LEN

     1365     8631    1             OR NOT M$ME$ -> F$DCB.DDEV.UCOUT) /* or M$ME isn't the user console */
     1366     8632    1             AND (B$JIT.CPFLAGS1 & %CP_ECHO#) /* and ECHO is ON                  */
     1367     8633    1            THEN                           /* ECHO the input line                */
     1368     8634    2            DO;

     1369     8635    2               OUT_BUF.PROMPT = '<';

   8635 12 000065   074000 236003                    LDQ     30720,DU
        12 000066   200004 552140                    STBQ    OUT_BUF,'40'O,AUTO
PL6.E3A0      #015=VPD$GET_INPUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:35 Page:356  

     1370     8636    2               OUT_BUF.CMD = SUBSTR(PARSE_IN_BUF,IDX);

   8636 12 000067   200003 473500                    LDP3    @IDX,,AUTO
        12 000070   300000 235100                    LDA     0,,PR3
        12 000071   200406 755100                    STA     OUT_BUF+258,,AUTO
        12 000072   300000 235100                    LDA     0,,PR3
        12 000073   000027 675000 xsym               ERA     B_VECTNIL+23
        12 000074   002001 035007                    ADLA    1025,DL
        12 000075   000000 620005                    EAX0    0,AL
        12 000076   200406 235100                    LDA     OUT_BUF+258,,AUTO
        12 000077   040100 100445                    MLR     fill='040'O
        12 000100   000000 000010 xsym               ADSC9   PARSE_IN_BUF,A           cn=0,n=*X0
        12 000101   200004 202000                    ADSC9   OUT_BUF,,AUTO            cn=1,n=1024

     1371     8637    2               FPT_WRITE_ME.BUF_ = VECTOR(OUT_BUF);

   8637 12 000102   000002 235000 13                 LDA     2
        12 000103   200406 452500                    STP2    OUT_BUF+258,,AUTO
        12 000104   200406 236100                    LDQ     OUT_BUF+258,,AUTO
        12 000105   000004 036003                    ADLQ    4,DU
        12 000106   000004 757000 xsym               STAQ    FPT_WRITE_ME+4

     1372     8638    2               FPT_WRITE_ME.BUF_.BOUND = M$SI$->F$DCB.ARS;

   8638 12 000107   000000 236100                    LDQ     0,,PR0
        12 000110   000020 736000                    QLS     16
        12 000111   000004 676000 xsym               ERQ     FPT_WRITE_ME+4
        12 000112   000034 376000 xsym               ANQ     B_VECTNIL+28
        12 000113   000004 656000 xsym               ERSQ    FPT_WRITE_ME+4

     1373     8639    2               FPT_WRITE_ME.V.DVBYTE.VFC# = '0'B;

   8639 12 000114   000003 236000 13                 LDQ     3
        12 000115   000013 356000 xsym               ANSQ    FPT_WRITE_ME+11

     1374     8640    2               CALL M$WRITE(FPT_WRITE_ME);
PL6.E3A0      #015=VPD$GET_INPUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:35 Page:357  

   8640 12 000116   000000 630400 xsym               EPPR0   FPT_WRITE_ME
        12 000117   040001 713400                    CLIMB   write
        12 000120   401400 401760                    pmme    nvectors=4

     1375     8641    2               END;

     1376     8642    1   GET_LEN:PCB.NCHARS = IDX + M$SI$ -> F$DCB.ARS;

   8642 12 000121   200003 470500       GET_LEN      LDP0    @IDX,,AUTO
        12 000122   000000 471400 xsym               LDP1    M$SI$
        12 000123   000000 236100                    LDQ     0,,PR0
        12 000124   100000 036100                    ADLQ    0,,PR1
        12 000125   000011 756000 xsym               STQ     PCB+9

     1377     8643    1   SKIP_READ: RETURN;

   8643 12 000126   000000 702200 xent  SKIP_READ    TSX2  ! X66_ARET

     1378     8644    1   READ_ALT: IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE=%E$EOF

   8644 12 000127   000000 470400 xsym  READ_ALT     LDP0    B$TCB$
        12 000130   000000 471500                    LDP1    0,,PR0
        12 000131   100102 236100                    LDQ     66,,PR1
        12 000132   377770 376007                    ANQ     131064,DL
        12 000133   000060 116007                    CMPQ    48,DL
        12 000134   000164 601000 12                 TNZ     s:8667

     1379     8645    1            THEN
     1380     8646    1              IF IDX>0

   8646 12 000135   200003 473500                    LDP3    @IDX,,AUTO
        12 000136   300000 235100                    LDA     0,,PR3
        12 000137   000145 604400 12                 TMOZ    s:8653

     1381     8647    1               THEN
     1382     8648    1                 CALL VPL$ERR_PROC(3,10,'04'O);
PL6.E3A0      #015=VPD$GET_INPUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:35 Page:358  

   8648 12 000140   000005 630400 13                 EPPR0   5
        12 000141   000021 631400 xsym               EPPR1   B_VECTNIL+17
        12 000142   000000 701000 xent               TSX1    VPL$ERR_PROC
        12 000143   000000 011000                    NOP     0
        12 000144   000164 710000 12                 TRA     s:8667

     1383     8649        /*E* ERROR:   VPD-00010
     1384     8650             MESSAGE: Nothing to continue
     1385     8651        */
     1386     8652    1               ELSE
     1387     8653    1                 IF READ_FILE

   8653 12 000145   000000 234000 xsym               SZN     READ_FILE
        12 000146   000156 605000 12                 TPL     s:8663

     1388     8654    1                  THEN                     /* A READ command just ended          */
     1389     8655    2                  DO;

     1390     8656    2                     CALL M$CLOSE(FPT_CLOSE_READ); /* Quit READing there         */

   8656 12 000147   000000 630400 xsym               EPPR0   FPT_CLOSE_READ
        12 000150   050001 713400                    CLIMB   close
        12 000151   406000 401760                    pmme    nvectors=13

     1391     8657    2                     READ_FILE = '0'B;     /* READ command no longer active      */

   8657 12 000152   000000 450000 xsym               STZ     READ_FILE

     1392     8658    2                     FPT_READ.V.DCB# = M$SI#;

   8658 12 000153   000000 720000 xsym               LXL0    M$SI#
        12 000154   000010 740000 10                 STX0    FPT_READ+8

     1393     8659    2                     GOTO READ_SI;

   8659 12 000155   000042 710000 12                 TRA     READ_SI
PL6.E3A0      #015=VPD$GET_INPUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:35 Page:359  

     1394     8660    2                     END;
     1395     8661    1                  ELSE                     /* A 'true' EOF, exit PCL             */
     1396     8662    2                  DO;

     1397     8663    2                     PARSE_IN_BUF = 'END'; /* Fake an END command                */

   8663 12 000156   040000 100400                    MLR     fill='040'O
        12 000157   000001 000003 11                 ADSC9   1                        cn=0,n=3
        12 000160   000000 002000 xsym               ADSC9   PARSE_IN_BUF             cn=0,n=1024

     1398     8664    2                     PCB.NCHARS = 3;

   8664 12 000161   000003 235007                    LDA     3,DL
        12 000162   000011 755000 xsym               STA     PCB+9

     1399     8665    2                     RETURN;

   8665 12 000163   000000 702200 xent               TSX2  ! X66_ARET

     1400     8666    2                     END;
     1401     8667    1           IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE=%E$LD

   8667 12 000164   000000 470400 xsym               LDP0    B$TCB$
        12 000165   000000 471500                    LDP1    0,,PR0
        12 000166   100102 236100                    LDQ     66,,PR1
        12 000167   377770 376007                    ANQ     131064,DL
        12 000170   000070 116007                    CMPQ    56,DL
        12 000171   000176 601000 12                 TNZ     s:8674

     1402     8668    1            THEN
     1403     8669    1              CALL VPL$ERR_PROC(3,20,'04'O);

   8669 12 000172   000011 630400 13                 EPPR0   9
        12 000173   000021 631400 xsym               EPPR1   B_VECTNIL+17
        12 000174   000000 701000 xent               TSX1    VPL$ERR_PROC
        12 000175   000000 011000                    NOP     0
PL6.E3A0      #015=VPD$GET_INPUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:35 Page:360  

     1404     8670        /*E* ERROR:   VPD-00020
     1405     8671             MESSAGE: Command too long
     1406     8672            MESSAGE1: Input command may not be greater than 1024 characters
     1407     8673        */
     1408     8674    1           IF M$SI$->F$DCB.DDEV.IC         /* IF HE CAN HEAR US                  */

   8674 12 000176   000000 470400 xsym               LDP0    M$SI$
        12 000177   000004 236100                    LDQ     4,,PR0
        12 000200   100000 316007                    CANQ    32768,DL
        12 000201   000207 600000 12                 TZE     s:8678

     1409     8675    1            THEN
     1410     8676    1              CALL VPL$ERR_PROC (3,0);     /* JUST WARN HIM & ABORT CMD          */

   8676 12 000202   000014 630400 13                 EPPR0   12
        12 000203   000020 631400 xsym               EPPR1   B_VECTNIL+16
        12 000204   000000 701000 xent               TSX1    VPL$ERR_PROC
        12 000205   000000 011000                    NOP     0
        12 000206   000213 710000 12                 TRA     s:8679

     1411     8677    1            ELSE
     1412     8678    1              CALL VPL$ERR_PROC (4,0);     /* BLOW HIM AWAY                      */

   8678 12 000207   000016 630400 13                 EPPR0   14
        12 000210   000020 631400 xsym               EPPR1   B_VECTNIL+16
        12 000211   000000 701000 xent               TSX1    VPL$ERR_PROC
        12 000212   000000 011000                    NOP     0

     1413     8679    1   END VPD$GET_INPUT;

   8679 12 000213   000000 702200 xent               TSX2  ! X66_ARET
     1414     8680        %EOD;

PL6.E3A0      #015=VPD$GET_INPUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:35 Page:361  
--  Include file information  --

   B_ERRORS_C.:E05TOU  is referenced.
   F$DCB.:E05TOU  cannot be made into a system file and is referenced.
   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$GET_INPUT.
PL6.E3A0      #015=VPD$GET_INPUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:35 Page:362  

 **** Variables and constants ****

  ****  Section 010  Data  VPD$GET_INPUT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(504)   r     1 FPT_READ

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @IDX                      *0-0-0/w SBIN        r     1 IDX
     4-0-0/c STRC(9225)  r     1 OUT_BUF

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$                     0-0-0/w PTR         r     1 B$TCB$
     0-0-0/d REMB        r     1 BREAK_LOC                  0-0-0/d BIT (72)    r     1 BREAK_LOC_BITS
     0-0-0/w EPTR        r     1 BREAK_MESSAGE_REPORTER
     0-0-0/b BIT         r     1 CMD_MASK(0:71)
     0-0-0/d STRC(1080)  r     1 FPT_CLOSE_READ             0-0-0/d STRC(432)   r     1 FPT_WRITE_ME
     0-0-0/w PTR         r     1 M$ME$                      0-0-0/w SBIN        r     1 M$READFILE#
     0-0-0/w SBIN        r     1 M$SI#                      0-0-0/w PTR         r     1 M$SI$
     0-0-0/w SBIN        r     1 PARSE_INPUT_OFFSET         0-0-0/c CHAR(1024)  r     1 PARSE_IN_BUF
     0-0-0/w STRC(504)   r     1 PCB                        0-0-0/b BIT         r     1 READ_FILE

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

PL6.E3A0      #015=VPD$GET_INPUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:35 Page:363  
     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/d STRC(4537)  r     1 B$JIT
     0-0-0/w STRC(144)   r     1 B$TCB                      0-0-0/d ASTR(3528)  r     1 F$DCB


   Procedure VPD$GET_INPUT requires 140 words for executable code.
   Procedure VPD$GET_INPUT requires 264 words of local(AUTO) storage.
PL6.E3A0      #015=VPD$GET_INPUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:35 Page:364  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #015=VPD$GET_INPUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:35 Page:365  
          MINI XREF LISTING

B$ALT.CODE
      8189**DCL      8189--REDEF    8190--REDEF    8190--REDEF
B$ALT.ERR.CODE
      8191**DCL      8644>>IF       8667>>IF
B$ALT.ERR.ERR#
      8191**DCL      8191--REDEF
B$ALT.EVID
      8190**DCL      8190--REDEF    8190--REDEF
B$JIT.CPFLAGS1
      8290**DCL      8630>>IF
B$JIT.CPFLAGS1.SLEAZE
      8295**DCL      8295--REDEF
B$JIT.ERR.MID
      8202**DCL      8202--REDEF
B$JIT$
      5992**DCL      8196--IMP-PTR  8630>>IF
B$TCB.ALT$
      8185**DCL      8644>>IF       8667>>IF
B$TCB$
      5992**DCL      8644>>IF       8667>>IF
BREAK_LOC
      5227**DCL      5227--REDEF    8622<<REMEMBR
BREAK_LOC_BITS
      5227**DCL      8629<<ASSIGN
CMD_MASK
      5229**DCL      8620>>IF
DEF_ICB.FID.STRING
      5825**DCL      5826--REDEF
DEV_ICB.FID.STRING
      5711**DCL      5712--REDEF
EI_KEY.KEY
      5923**DCL      5923--REDEF    5923--REDEF    5923--REDEF
PL6.E3A0      #015=VPD$GET_INPUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:35 Page:366  
EO_OCB.TYPE
      5423**DCL      5424--REDEF
F$DCB.ACTPOS
      7033**DCL      7033--REDEF
F$DCB.ARS
      7008**DCL      7008--REDEF    8638>>ASSIGN   8642>>ASSIGN
F$DCB.ATTR
      7026**DCL      7027--REDEF
F$DCB.BORROW
      7041**DCL      7041--REDEF    7041--REDEF    7041--REDEF
F$DCB.DCBNAME.L
      7055**DCL      7055--IMP-SIZ
F$DCB.DDEV.IC
      7014**DCL      8630>>IF       8674>>IF
F$DCB.DDEV.UCOUT
      7014**DCL      8630>>IF
F$DCB.EOMCHAR
      7012**DCL      7012--REDEF
F$DCB.FLDID
      7036**DCL      7036--REDEF
F$DCB.FORM$
      7030**DCL      7030--REDEF
F$DCB.FSECT
      7046**DCL      7046--REDEF
F$DCB.FSN
      7023**DCL      7023--REDEF    7023--REDEF    7024--REDEF
F$DCB.HEADER$
      7029**DCL      7029--REDEF
F$DCB.IXTNSIZE
      7027**DCL      7027--REDEF
F$DCB.LASTSTA$
      7017**DCL      7017--REDEF
F$DCB.LVL
      7042**DCL      7042--REDEF
F$DCB.NAME.C
      7017**DCL      7017--REDEF
PL6.E3A0      #015=VPD$GET_INPUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:35 Page:367  
F$DCB.NOEOF
      7038**DCL      7038--REDEF
F$DCB.NRECS
      7028**DCL      7028--REDEF
F$DCB.NRECX
      7047**DCL      7047--REDEF
F$DCB.OHDR
      7039**DCL      7039--REDEF
F$DCB.ORG
      7022**DCL      7022--REDEF
F$DCB.PRECNO
      7045**DCL      7045--REDEF
F$DCB.RCSZ
      7050**DCL      7050--REDEF
F$DCB.RES
      7018**DCL      7018--REDEF
F$DCB.SETX
      7030**DCL      7030--REDEF
F$DCB.TAB$
      7029**DCL      7030--REDEF
F$DCB.TDA
      7044**DCL      7044--REDEF
F$DCB.WSN
      7019**DCL      7019--REDEF
FPT_CLOSE_EI.SN_
      6764**DCL      6764--REDEF
FPT_CLOSE_EI.UTL_
      6765**DCL      6765--REDEF
FPT_CLOSE_EI.V.EXPIRE#
      6779**DCL      6779--REDEF
FPT_CLOSE_EI.V.TYPE#
      6777**DCL      6777--REDEF
FPT_CLOSE_EI.V.XTNSIZE#
      6774**DCL      6774--REDEF    6776--REDEF
FPT_CLOSE_PTL.SN_
      6890**DCL      6890--REDEF
PL6.E3A0      #015=VPD$GET_INPUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:35 Page:368  
FPT_CLOSE_PTL.UTL_
      6891**DCL      6891--REDEF
FPT_CLOSE_PTL.V.EXPIRE#
      6905**DCL      6905--REDEF
FPT_CLOSE_PTL.V.TYPE#
      6903**DCL      6903--REDEF
FPT_CLOSE_PTL.V.XTNSIZE#
      6900**DCL      6900--REDEF    6902--REDEF
FPT_CLOSE_READ
      6806**DCL      8656<>CALL
FPT_CLOSE_READ.SN_
      6806**DCL      6806--REDEF
FPT_CLOSE_READ.UTL_
      6807**DCL      6807--REDEF
FPT_CLOSE_READ.V.EXPIRE#
      6821**DCL      6821--REDEF
FPT_CLOSE_READ.V.TYPE#
      6819**DCL      6819--REDEF
FPT_CLOSE_READ.V.XTNSIZE#
      6816**DCL      6816--REDEF    6818--REDEF
FPT_CLOSE_SI.SN_
      6974**DCL      6974--REDEF
FPT_CLOSE_SI.UTL_
      6975**DCL      6975--REDEF
FPT_CLOSE_SI.V.EXPIRE#
      6989**DCL      6989--REDEF
FPT_CLOSE_SI.V.TYPE#
      6987**DCL      6987--REDEF
FPT_CLOSE_SI.V.XTNSIZE#
      6984**DCL      6984--REDEF    6986--REDEF
FPT_CLOSE_STD.SN_
      6932**DCL      6932--REDEF
FPT_CLOSE_STD.UTL_
      6933**DCL      6933--REDEF
FPT_CLOSE_STD.V.EXPIRE#
      6947**DCL      6947--REDEF
PL6.E3A0      #015=VPD$GET_INPUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:35 Page:369  
FPT_CLOSE_STD.V.TYPE#
      6945**DCL      6945--REDEF
FPT_CLOSE_STD.V.XTNSIZE#
      6942**DCL      6942--REDEF    6944--REDEF
FPT_CLSEI_FT.SN_
      6848**DCL      6848--REDEF
FPT_CLSEI_FT.UTL_
      6849**DCL      6849--REDEF
FPT_CLSEI_FT.V.EXPIRE#
      6863**DCL      6863--REDEF
FPT_CLSEI_FT.V.TYPE#
      6861**DCL      6861--REDEF
FPT_CLSEI_FT.V.XTNSIZE#
      6858**DCL      6858--REDEF    6860--REDEF
FPT_OPEN_EI.ACSVEH_
      6419**DCL      6420--REDEF
FPT_OPEN_EI.ALTKEYS_
      6425**DCL      6426--REDEF    6426--REDEF
FPT_OPEN_EI.HDR_
      6424**DCL      6425--REDEF
FPT_OPEN_EI.TAB_
      6423**DCL      6424--REDEF
FPT_OPEN_EI.UHL_
      6417**DCL      6418--REDEF    6418--REDEF
FPT_OPEN_EI.V.FSN#
      6457**DCL      6457--REDEF    6457--REDEF
FPT_OPEN_EI.WSN_
      6423**DCL      6423--REDEF
FPT_OPEN_EI_SAVE.ACSVEH_
      6528**DCL      6529--REDEF
FPT_OPEN_EI_SAVE.ALTKEYS_
      6534**DCL      6535--REDEF    6535--REDEF
FPT_OPEN_EI_SAVE.HDR_
      6533**DCL      6534--REDEF
FPT_OPEN_EI_SAVE.TAB_
      6532**DCL      6533--REDEF
PL6.E3A0      #015=VPD$GET_INPUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:35 Page:370  
FPT_OPEN_EI_SAVE.UHL_
      6526**DCL      6527--REDEF    6527--REDEF
FPT_OPEN_EI_SAVE.V.FSN#
      6566**DCL      6566--REDEF    6566--REDEF
FPT_OPEN_EI_SAVE.WSN_
      6532**DCL      6532--REDEF
FPT_OPEN_OUT.ACSVEH_
      6310**DCL      6311--REDEF
FPT_OPEN_OUT.ALTKEYS_
      6316**DCL      6317--REDEF    6317--REDEF
FPT_OPEN_OUT.HDR_
      6315**DCL      6316--REDEF
FPT_OPEN_OUT.TAB_
      6314**DCL      6315--REDEF
FPT_OPEN_OUT.UHL_
      6308**DCL      6309--REDEF    6309--REDEF
FPT_OPEN_OUT.V.FSN#
      6348**DCL      6348--REDEF    6348--REDEF
FPT_OPEN_OUT.WSN_
      6314**DCL      6314--REDEF
FPT_OPEN_OUT_SAVE.ACSVEH_
      6201**DCL      6202--REDEF
FPT_OPEN_OUT_SAVE.ALTKEYS_
      6207**DCL      6208--REDEF    6208--REDEF
FPT_OPEN_OUT_SAVE.HDR_
      6206**DCL      6207--REDEF
FPT_OPEN_OUT_SAVE.TAB_
      6205**DCL      6206--REDEF
FPT_OPEN_OUT_SAVE.UHL_
      6199**DCL      6200--REDEF    6200--REDEF
FPT_OPEN_OUT_SAVE.V.FSN#
      6239**DCL      6239--REDEF    6239--REDEF
FPT_OPEN_OUT_SAVE.WSN_
      6205**DCL      6205--REDEF
FPT_READ
      8587**DCL      8628<>CALL
PL6.E3A0      #015=VPD$GET_INPUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:35 Page:371  
FPT_READ.BUF_
      8589**DCL      8609<<ASSIGN
FPT_READ.BUF_.BOUND
      8589**DCL      8614<<ASSIGN   8614>>ASSIGN
FPT_READ.BUF_.BUF$
      8590**DCL      8615<<ASSIGN   8615>>ASSIGN
FPT_READ.STATION_
      8590**DCL      8591--REDEF
FPT_READ.V
      8591**DCL      8587--DCLINIT
FPT_READ.V.DCB#
      8591**DCL      8625<<ASSIGN   8627<<ASSIGN   8658<<ASSIGN
FPT_READ.V.DVBYTE.REREAD#
      8602**DCL      8602--REDEF
FPT_READ.V.INDX#
      8600**DCL      8600--REDEF
FPT_READ_STD.STATION_
      6629**DCL      6630--REDEF
FPT_READ_STD.V.DVBYTE.REREAD#
      6641**DCL      6641--REDEF
FPT_READ_STD.V.INDX#
      6639**DCL      6639--REDEF
FPT_READ_UC.STATION_
      6590**DCL      6591--REDEF
FPT_READ_UC.V.DVBYTE.REREAD#
      6602**DCL      6602--REDEF
FPT_READ_UC.V.INDX#
      6600**DCL      6600--REDEF
FPT_WRITE_ME
      6696**DCL      8640<>CALL
FPT_WRITE_ME.BUF_
      6696**DCL      8637<<ASSIGN
FPT_WRITE_ME.BUF_.BOUND
      6696**DCL      8638<<ASSIGN
FPT_WRITE_ME.STATION_
      6698**DCL      6698--REDEF
PL6.E3A0      #015=VPD$GET_INPUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:35 Page:372  
FPT_WRITE_ME.V.DVBYTE.VFC#
      6705**DCL      6705--REDEF    8639<<ASSIGN
FPT_WRITE_OUT.STATION_
      6729**DCL      6729--REDEF
FPT_WRITE_OUT.V.DVBYTE.VFC#
      6736**DCL      6736--REDEF
FPT_WRITE_UC.STATION_
      6667**DCL      6667--REDEF
FPT_WRITE_UC.V.DVBYTE.VFC#
      6674**DCL      6674--REDEF
FROM_SN.SN
      5573**DCL      5574--REDEF
GETCMD.OUT$
      4780**DCL      4786--REDEF
ICB.FID.STRING
      5597**DCL      5598--REDEF
IDX
        19**DCL         6--PROC     8610>>ASSIGN   8611>>IF       8614>>ASSIGN   8615>>ASSIGN   8636>>ASSIGN
      8642>>ASSIGN   8646>>IF
IFSFA_PARAM.EOMCHAR#
      5952**DCL      5953--REDEF
IFSFA_PARAM.SIG1
      5946**DCL      5946--REDEF
IFSFA_PARAM.SIG2
      5946**DCL      5947--REDEF
IN_RES
      5519**DCL      5519--REDEF
IN_SN.SN
      5535**DCL      5536--REDEF
M$CLOSE
        37**DCL-ENT  8656--CALL
M$ME$
      5989**DCL      8630>>IF
M$READ
        38**DCL-ENT  8628--CALL
M$READFILE#
PL6.E3A0      #015=VPD$GET_INPUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:35 Page:373  
      5990**DCL      8625>>ASSIGN
M$SI#
      5990**DCL      8627>>ASSIGN   8658>>ASSIGN
M$SI$
      5989**DCL      8630>>IF       8638>>ASSIGN   8642>>ASSIGN   8674>>IF
M$WRITE
        38**DCL-ENT  8640--CALL
OCB.TYPE
      5281**DCL      5282--REDEF
OFSFA_PARAM.EOMCHAR#
      5982**DCL      5983--REDEF
OFSFA_PARAM.SIG1
      5976**DCL      5976--REDEF
OFSFA_PARAM.SIG2
      5976**DCL      5977--REDEF
OUT_BUF
      8359**DCL      8637--ASSIGN
OUT_BUF.CMD
      8361**DCL      8636<<ASSIGN
OUT_BUF.PROMPT
      8360**DCL      8635<<ASSIGN
OUT_SN.SN
      5553**DCL      5554--REDEF
PARSE_INPUT_OFFSET
      4561**DCL      8610<<ASSIGN
PARSE_IN_BUF
      4561**DCL      8609--ASSIGN   8636>>ASSIGN   8663<<ASSIGN
PCB.NCHARS
      4728**DCL      8642<<ASSIGN   8664<<ASSIGN
READ_ALT
      8644**LABEL    8628--CALLALT
READ_FILE
      4562**DCL      8623>>IF       8653>>IF       8657<<ASSIGN
READ_SI
      8628**LABEL    8659--GOTO
SKIP_READ
PL6.E3A0      #015=VPD$GET_INPUT File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:35 Page:374  
      8643**LABEL    8622--REMEMBR
SPEC_BUF
      5231**DCL      5231--REDEF
VPL$ERR_PROC
      8544**DCL-ENT  8648--CALL     8669--CALL     8676--CALL     8678--CALL

PL6.E3A0      #016=VPD$GET_IN_DEV_MASK File=VPD$UTIL.:E05TSI                     WED 07/30/97 07:37 Page:375  
     1415        1        /*T***********************************************************/
     1416        2        /*T*                                                         */
     1417        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1418        4        /*T*                                                         */
     1419        5        /*T***********************************************************/
     1420        6        VPD$GET_IN_DEV_MASK: PROC (X_ICB);
     1421        7        /*I* NAME: VPD$GET_IN_DEV_MASK
     1422        8             PURPOSE: To set X_ICB.DEV_MASK(BIT(9)) to a value which reflects the input
     1423        9                      device type.
     1424       10             CALL  : CALL VPD$GET_IN_DEV_MASK(X_ICB);
     1425       11             DESCRIPTION: This procedure sets X_ICB.DEV_MASK to a value reflecting the
     1426       12                          type of input file to be used.
     1427       13                            OCTAL VALUE        DESCRIPTION
     1428       14                            -----------        -----------
     1429       15                                400            Default. Denotes COMGROUP or
     1430       16                                               non-tape device.
     1431       17                                200            Managed disk.
     1432       18                                100            Managed tape.
     1433       19                                040            Device tape.
     1434       20        */
     1435       21        %INCLUDE VP_DATA_R;
     1436     7008        /**/
     1437     7009        /*  PARAMETERS  */
     1438     7010        /**/
     1439     7011        %ICB(FPTN = X_ICB,STCLASS = "");
     1440     7125    1           X_ICB.DEV_MASK = '400'O;        /* DEFAULT...COMGROUP OR              */
     1441     7126                                                /* NON-TAPE DEVICE                    */
     1442     7127    2           DO CASE(IN_ASN);
     1443     7128    2            CASE(%FILE#);
     1444     7129    2              X_ICB.DEV_MASK = '200'O;     /* DISK FILE                          */
     1445     7130    2            CASE(%TAPE#);
     1446     7131    2              X_ICB.DEV_MASK = '100'O;     /* LABELED TAPE                       */
     1447     7132    2            CASE(%DEVICE#);
     1448     7133    2              IF IN_RES1.OP = 'MT'
     1449     7134    2                OR IN_RES1.OP = 'FT'
     1450     7135    2               THEN
     1451     7136    2                 X_ICB.DEV_MASK = '040'O;  /* DEVICE TAPE                        */
PL6.E3A0      #016=VPD$GET_IN_DEV_MASK File=VPD$UTIL.:E05TSI                     WED 07/30/97 07:37 Page:376  
     1452     7137    2            END;
     1453     7138    1   END VPD$GET_IN_DEV_MASK;
     1454     7139        %EOD;

PL6.E3A0      #016=VPD$GET_IN_DEV_MASK File=VPD$UTIL.:E05TSI                     WED 07/30/97 07:37 Page:377  
--  Include file information  --

   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$GET_IN_DEV_MASK.

   Procedure VPD$GET_IN_DEV_MASK requires 28 words for executable code.
   Procedure VPD$GET_IN_DEV_MASK requires 4 words of local(AUTO) storage.

PL6.E3A0      #016=VPD$GET_IN_DEV_MASK File=VPD$UTIL.:E05TSI                     WED 07/30/97 07:37 Page:378  

 Object Unit name= VPD$GET_IN_DEV_MASK                        File name= VPD$UTIL.:E05TOU
 UTS= JUL 30 '97 07:37:27.48 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$EI
    2   DCB   even  none     0      0  M$EO
    3   DCB   even  none     0      0  M$EO1
    4   DCB   even  none     0      0  M$ME
    5   DCB   even  none     0      0  M$SI
    6   DCB   even  none     0      0  M$READFILE
    7   DCB   even  none     0      0  M$DO
    8   DCB   even  none     0      0  M$STD1
    9   DCB   even  none     0      0  M$SORT1
   10  RoData even  UTS      2      2  VPD$GET_IN_DEV_MASK
   11   Proc  even  none    28     34  VPD$GET_IN_DEV_MASK

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    11      0   yes            yes      Std        1  VPD$GET_IN_DEV_MASK

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_1
                       nStd      0 X66_ARET
PL6.E3A0      #016=VPD$GET_IN_DEV_MASK File=VPD$UTIL.:E05TSI                     WED 07/30/97 07:37 Page:379  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  BREAK_LOC                             BREAK_MESSAGE_REPORTER
     SPEC_BUF                              IN_RES                                IN_ASN
     M$EI                                  M$EO                                  M$EO1
     M$ME                                  M$SI                                  M$READFILE
     M$DO                                  M$STD1                                M$SORT1
PL6.E3A0      #016=VPD$GET_IN_DEV_MASK File=VPD$UTIL.:E05TSI                     WED 07/30/97 07:37 Page:380  


     1415        1        /*T***********************************************************/
     1416        2        /*T*                                                         */
     1417        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1418        4        /*T*                                                         */
     1419        5        /*T***********************************************************/
     1420        6        VPD$GET_IN_DEV_MASK: PROC (X_ICB);

      6 11 000000   000000 700200 xent  VPD$GET_IN_* TSX0  ! X66_AUTO_1
        11 000001   000004 000001                    ZERO    4,1

     1421        7        /*I* NAME: VPD$GET_IN_DEV_MASK
     1422        8             PURPOSE: To set X_ICB.DEV_MASK(BIT(9)) to a value which reflects the input
     1423        9                      device type.
     1424       10             CALL  : CALL VPD$GET_IN_DEV_MASK(X_ICB);
     1425       11             DESCRIPTION: This procedure sets X_ICB.DEV_MASK to a value reflecting the
     1426       12                          type of input file to be used.
     1427       13                            OCTAL VALUE        DESCRIPTION
     1428       14                            -----------        -----------
     1429       15                                400            Default. Denotes COMGROUP or
     1430       16                                               non-tape device.
     1431       17                                200            Managed disk.
     1432       18                                100            Managed tape.
     1433       19                                040            Device tape.
     1434       20        */
     1435       21        %INCLUDE VP_DATA_R;
     1436     7008        /**/
     1437     7009        /*  PARAMETERS  */
     1438     7010        /**/
     1439     7011        %ICB(FPTN = X_ICB,STCLASS = "");
     1440     7125    1           X_ICB.DEV_MASK = '400'O;        /* DEFAULT...COMGROUP OR              */

   7125 11 000002   400000 236003                    LDQ     -131072,DU
        11 000003   200003 470500                    LDP0    @X_ICB,,AUTO
        11 000004   000171 756100                    STQ     121,,PR0

     1441     7126                                                /* NON-TAPE DEVICE                    */
PL6.E3A0      #016=VPD$GET_IN_DEV_MASK File=VPD$UTIL.:E05TSI                     WED 07/30/97 07:37 Page:381  
     1442     7127    2           DO CASE(IN_ASN);

   7127 11 000005   000000 236000 xsym               LDQ     IN_ASN
        11 000006   000033 772000                    QRL     27
        11 000007   000004 116007                    CMPQ    4,DL
        11 000010   000012 602006 11                 TNC     s:7127+5,QL
        11 000011   000033 710000 11                 TRA     s:7138
        11 000012   000033 710000 11                 TRA     s:7138
        11 000013   000016 710000 11                 TRA     s:7129
        11 000014   000021 710000 11                 TRA     s:7131
        11 000015   000024 710000 11                 TRA     s:7133

     1443     7128    2            CASE(%FILE#);

     1444     7129    2              X_ICB.DEV_MASK = '200'O;     /* DISK FILE                          */

   7129 11 000016   200000 236003                    LDQ     65536,DU
        11 000017   000171 756100                    STQ     121,,PR0
        11 000020   000033 710000 11                 TRA     s:7138

     1445     7130    2            CASE(%TAPE#);

     1446     7131    2              X_ICB.DEV_MASK = '100'O;     /* LABELED TAPE                       */

   7131 11 000021   100000 236003                    LDQ     32768,DU
        11 000022   000171 756100                    STQ     121,,PR0
        11 000023   000033 710000 11                 TRA     s:7138

     1447     7132    2            CASE(%DEVICE#);

     1448     7133    2              IF IN_RES1.OP = 'MT'

   7133 11 000024   000000 220000 xsym               LDX0    IN_RES
        11 000025   000000 100000 10                 CMPX0   0
        11 000026   000031 600000 11                 TZE     s:7136
        11 000027   000001 100000 10                 CMPX0   1
        11 000030   000033 601000 11                 TNZ     s:7138
PL6.E3A0      #016=VPD$GET_IN_DEV_MASK File=VPD$UTIL.:E05TSI                     WED 07/30/97 07:37 Page:382  

     1449     7134    2                OR IN_RES1.OP = 'FT'
     1450     7135    2               THEN
     1451     7136    2                 X_ICB.DEV_MASK = '040'O;  /* DEVICE TAPE                        */

   7136 11 000031   040000 236003                    LDQ     16384,DU
        11 000032   000171 756100                    STQ     121,,PR0

     1452     7137    2            END;

     1453     7138    1   END VPD$GET_IN_DEV_MASK;

   7138 11 000033   000000 702200 xent               TSX2  ! X66_ARET
     1454     7139        %EOD;

PL6.E3A0      #016=VPD$GET_IN_DEV_MASK File=VPD$UTIL.:E05TSI                     WED 07/30/97 07:37 Page:383  
--  Include file information  --

   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$GET_IN_DEV_MASK.
PL6.E3A0      #016=VPD$GET_IN_DEV_MASK File=VPD$UTIL.:E05TSI                     WED 07/30/97 07:37 Page:384  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @X_ICB                    *0-0-0/d STRC(5868)  r     1 X_ICB

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w EPTR        r     1 BREAK_MESSAGE_REPORTER
     0-0-0/b UBIN(9)     r     1 IN_ASN                     0-0-0/c CHAR(4)     r     1 IN_RES
     0-0-0/c STRC        r     1 IN_RES1


   Procedure VPD$GET_IN_DEV_MASK requires 28 words for executable code.
   Procedure VPD$GET_IN_DEV_MASK requires 4 words of local(AUTO) storage.
PL6.E3A0      #016=VPD$GET_IN_DEV_MASK File=VPD$UTIL.:E05TSI                     WED 07/30/97 07:37 Page:385  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #016=VPD$GET_IN_DEV_MASK File=VPD$UTIL.:E05TSI                     WED 07/30/97 07:37 Page:386  
          MINI XREF LISTING

BREAK_LOC
      5228**DCL      5228--REDEF
DEF_ICB.FID.STRING
      5826**DCL      5827--REDEF
DEV_ICB.FID.STRING
      5712**DCL      5713--REDEF
EI_KEY.KEY
      5924**DCL      5924--REDEF    5924--REDEF    5924--REDEF
EO_OCB.TYPE
      5424**DCL      5425--REDEF
FPT_CLOSE_EI.SN_
      6765**DCL      6765--REDEF
FPT_CLOSE_EI.UTL_
      6766**DCL      6766--REDEF
FPT_CLOSE_EI.V.EXPIRE#
      6780**DCL      6780--REDEF
FPT_CLOSE_EI.V.TYPE#
      6778**DCL      6778--REDEF
FPT_CLOSE_EI.V.XTNSIZE#
      6775**DCL      6775--REDEF    6777--REDEF
FPT_CLOSE_PTL.SN_
      6891**DCL      6891--REDEF
FPT_CLOSE_PTL.UTL_
      6892**DCL      6892--REDEF
FPT_CLOSE_PTL.V.EXPIRE#
      6906**DCL      6906--REDEF
FPT_CLOSE_PTL.V.TYPE#
      6904**DCL      6904--REDEF
FPT_CLOSE_PTL.V.XTNSIZE#
      6901**DCL      6901--REDEF    6903--REDEF
FPT_CLOSE_READ.SN_
      6807**DCL      6807--REDEF
PL6.E3A0      #016=VPD$GET_IN_DEV_MASK File=VPD$UTIL.:E05TSI                     WED 07/30/97 07:37 Page:387  
FPT_CLOSE_READ.UTL_
      6808**DCL      6808--REDEF
FPT_CLOSE_READ.V.EXPIRE#
      6822**DCL      6822--REDEF
FPT_CLOSE_READ.V.TYPE#
      6820**DCL      6820--REDEF
FPT_CLOSE_READ.V.XTNSIZE#
      6817**DCL      6817--REDEF    6819--REDEF
FPT_CLOSE_SI.SN_
      6975**DCL      6975--REDEF
FPT_CLOSE_SI.UTL_
      6976**DCL      6976--REDEF
FPT_CLOSE_SI.V.EXPIRE#
      6990**DCL      6990--REDEF
FPT_CLOSE_SI.V.TYPE#
      6988**DCL      6988--REDEF
FPT_CLOSE_SI.V.XTNSIZE#
      6985**DCL      6985--REDEF    6987--REDEF
FPT_CLOSE_STD.SN_
      6933**DCL      6933--REDEF
FPT_CLOSE_STD.UTL_
      6934**DCL      6934--REDEF
FPT_CLOSE_STD.V.EXPIRE#
      6948**DCL      6948--REDEF
FPT_CLOSE_STD.V.TYPE#
      6946**DCL      6946--REDEF
FPT_CLOSE_STD.V.XTNSIZE#
      6943**DCL      6943--REDEF    6945--REDEF
FPT_CLSEI_FT.SN_
      6849**DCL      6849--REDEF
FPT_CLSEI_FT.UTL_
      6850**DCL      6850--REDEF
FPT_CLSEI_FT.V.EXPIRE#
      6864**DCL      6864--REDEF
FPT_CLSEI_FT.V.TYPE#
      6862**DCL      6862--REDEF
PL6.E3A0      #016=VPD$GET_IN_DEV_MASK File=VPD$UTIL.:E05TSI                     WED 07/30/97 07:37 Page:388  
FPT_CLSEI_FT.V.XTNSIZE#
      6859**DCL      6859--REDEF    6861--REDEF
FPT_OPEN_EI.ACSVEH_
      6420**DCL      6421--REDEF
FPT_OPEN_EI.ALTKEYS_
      6426**DCL      6427--REDEF    6427--REDEF
FPT_OPEN_EI.HDR_
      6425**DCL      6426--REDEF
FPT_OPEN_EI.TAB_
      6424**DCL      6425--REDEF
FPT_OPEN_EI.UHL_
      6418**DCL      6419--REDEF    6419--REDEF
FPT_OPEN_EI.V.FSN#
      6458**DCL      6458--REDEF    6458--REDEF
FPT_OPEN_EI.WSN_
      6424**DCL      6424--REDEF
FPT_OPEN_EI_SAVE.ACSVEH_
      6529**DCL      6530--REDEF
FPT_OPEN_EI_SAVE.ALTKEYS_
      6535**DCL      6536--REDEF    6536--REDEF
FPT_OPEN_EI_SAVE.HDR_
      6534**DCL      6535--REDEF
FPT_OPEN_EI_SAVE.TAB_
      6533**DCL      6534--REDEF
FPT_OPEN_EI_SAVE.UHL_
      6527**DCL      6528--REDEF    6528--REDEF
FPT_OPEN_EI_SAVE.V.FSN#
      6567**DCL      6567--REDEF    6567--REDEF
FPT_OPEN_EI_SAVE.WSN_
      6533**DCL      6533--REDEF
FPT_OPEN_OUT.ACSVEH_
      6311**DCL      6312--REDEF
FPT_OPEN_OUT.ALTKEYS_
      6317**DCL      6318--REDEF    6318--REDEF
FPT_OPEN_OUT.HDR_
      6316**DCL      6317--REDEF
PL6.E3A0      #016=VPD$GET_IN_DEV_MASK File=VPD$UTIL.:E05TSI                     WED 07/30/97 07:37 Page:389  
FPT_OPEN_OUT.TAB_
      6315**DCL      6316--REDEF
FPT_OPEN_OUT.UHL_
      6309**DCL      6310--REDEF    6310--REDEF
FPT_OPEN_OUT.V.FSN#
      6349**DCL      6349--REDEF    6349--REDEF
FPT_OPEN_OUT.WSN_
      6315**DCL      6315--REDEF
FPT_OPEN_OUT_SAVE.ACSVEH_
      6202**DCL      6203--REDEF
FPT_OPEN_OUT_SAVE.ALTKEYS_
      6208**DCL      6209--REDEF    6209--REDEF
FPT_OPEN_OUT_SAVE.HDR_
      6207**DCL      6208--REDEF
FPT_OPEN_OUT_SAVE.TAB_
      6206**DCL      6207--REDEF
FPT_OPEN_OUT_SAVE.UHL_
      6200**DCL      6201--REDEF    6201--REDEF
FPT_OPEN_OUT_SAVE.V.FSN#
      6240**DCL      6240--REDEF    6240--REDEF
FPT_OPEN_OUT_SAVE.WSN_
      6206**DCL      6206--REDEF
FPT_READ_STD.STATION_
      6630**DCL      6631--REDEF
FPT_READ_STD.V.DVBYTE.REREAD#
      6642**DCL      6642--REDEF
FPT_READ_STD.V.INDX#
      6640**DCL      6640--REDEF
FPT_READ_UC.STATION_
      6591**DCL      6592--REDEF
FPT_READ_UC.V.DVBYTE.REREAD#
      6603**DCL      6603--REDEF
FPT_READ_UC.V.INDX#
      6601**DCL      6601--REDEF
FPT_WRITE_ME.STATION_
      6699**DCL      6699--REDEF
PL6.E3A0      #016=VPD$GET_IN_DEV_MASK File=VPD$UTIL.:E05TSI                     WED 07/30/97 07:37 Page:390  
FPT_WRITE_ME.V.DVBYTE.VFC#
      6706**DCL      6706--REDEF
FPT_WRITE_OUT.STATION_
      6730**DCL      6730--REDEF
FPT_WRITE_OUT.V.DVBYTE.VFC#
      6737**DCL      6737--REDEF
FPT_WRITE_UC.STATION_
      6668**DCL      6668--REDEF
FPT_WRITE_UC.V.DVBYTE.VFC#
      6675**DCL      6675--REDEF
FROM_SN.SN
      5574**DCL      5575--REDEF
GETCMD.OUT$
      4781**DCL      4787--REDEF
ICB.FID.STRING
      5598**DCL      5599--REDEF
IFSFA_PARAM.EOMCHAR#
      5953**DCL      5954--REDEF
IFSFA_PARAM.SIG1
      5947**DCL      5947--REDEF
IFSFA_PARAM.SIG2
      5947**DCL      5948--REDEF
IN_ASN
      5557**DCL      7127>>DOCASE
IN_RES
      5520**DCL      5520--REDEF
IN_RES1.OP
      5520**DCL      7133>>IF       7133>>IF
IN_SN.SN
      5536**DCL      5537--REDEF
OCB.TYPE
      5282**DCL      5283--REDEF
OFSFA_PARAM.EOMCHAR#
      5983**DCL      5984--REDEF
OFSFA_PARAM.SIG1
      5977**DCL      5977--REDEF
PL6.E3A0      #016=VPD$GET_IN_DEV_MASK File=VPD$UTIL.:E05TSI                     WED 07/30/97 07:37 Page:391  
OFSFA_PARAM.SIG2
      5977**DCL      5978--REDEF
OUT_SN.SN
      5554**DCL      5555--REDEF
SPEC_BUF
      5232**DCL      5232--REDEF
X_ICB
      7012**DCL         6--PROC
X_ICB.DEV_MASK
      7081**DCL      7125<<ASSIGN   7129<<ASSIGN   7131<<ASSIGN   7136<<ASSIGN
X_ICB.FID.STRING
      7031**DCL      7032--REDEF

PL6.E3A0      #017=VPD$GET_OUT_FLAVOR File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:38 Page:392  
     1455        1        /*T***********************************************************/
     1456        2        /*T*                                                         */
     1457        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1458        4        /*T*                                                         */
     1459        5        /*T***********************************************************/
     1460        6        VPD$GET_OUT_FLAVOR: PROC;
     1461        7        /*I* NAME: VPD$GET_OUT_FLAVOR
     1462        8             PURPOSE: To set up the FLAVOR mask in OCB.
     1463        9             CALL: CALL VPD$GET_OUT_FLAVOR;
     1464       10             DESCRIPTION: This procedure is CALLed AFTER M$OPENing the output DCB.
     1465       11                          Tests are made to set any appropriate bits in OCB.FLAVOR
     1466       12        */
     1467       13        %INCLUDE VP_DATA_R;
     1468     7000        %INCLUDE F$DCB;
     1469     7049        /**/
     1470     7050        /*  FLAVOR.TAPE warns PCL that the output is destined for that long,          */
     1471     7051        /*  stringy stuff that usually needs special care.  This means ANY            */
     1472     7052        /*  form of tape.                                                             */
     1473     7053        /**/
     1474     7054    1           IF OCB.DEV_MASK & '006'O
     1475     7055    1            THEN
     1476     7056    1              OCB.FLAVOR.TAPE = '1'B;
     1477     7057        /**/
     1478     7058        /*  FLAVOR.UR is used to signal an output that PCL considers to be            */
     1479     7059        /*  Unit-Record style.  This includes many devices and files with             */
     1480     7060        /*  ORG=UR.  The user's time-sharing terminal is explicitly excluded.         */
     1481     7061        /**/
     1482     7062    1           IF OCB.DEV_MASK.LP
     1483     7063    1             AND NOT OCB.DEV_MASK.IC       /* AND not the user's terminal        */
     1484     7064    1            THEN
     1485     7065    1              OCB.FLAVOR.UR = '1'B;
     1486     7066        %EJECT;
PL6.E3A0      #017=VPD$GET_OUT_FLAVOR File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:38 Page:393  
     1487     7067        /**/
     1488     7068        /*  FLAVOR.JE indicates that the output is a stream of commands for           */
     1489     7069        /*  execution.  One wouldn't want to write really strange stuff there.        */
     1490     7070        /**/
     1491     7071    1           IF OCB.DCBPTR$ -> F$DCB.RES = 'JE  '
     1492     7072    1             OR OCB.DCBPTR$ -> F$DCB.RES = 'JF  '
     1493     7073    1            THEN
     1494     7074    1              OCB.FLAVOR.JE = '1'B;
     1495     7075        /**/
     1496     7076        /*  The FLAVOR.GRANB is used to indicate that the output destination          */
     1497     7077        /*  likes output in granule-sized blocks.                                     */
     1498     7078        /**/
     1499     7079    1           IF OCB.DCBPTR$ -> F$DCB.ORG = %RANDOM#
     1500     7080    1             OR OCB.DCBPTR$ -> F$DCB.ORG = %IDS#
     1501     7081    1             OR OCB.DCBPTR$ -> F$DCB.ORG = %CG#
     1502     7082    1            THEN
     1503     7083    1              OCB.FLAVOR.GRANB = '1'B;
     1504     7084        /**/
     1505     7085        /*  The FLAVOR.MANAGED bit is used to indicate that the output destination    */
     1506     7086        /*  is a managed resource.                                                    */
     1507     7087        /**/
     1508     7088    1           IF OCB.DCBPTR$->F$DCB.ASN = %FILE# OR OCB.DCBPTR$->F$DCB.ASN=%TAPE#
     1509     7089    1            THEN
     1510     7090    1              OCB.FLAVOR.MANAGED = '1'B;
     1511     7091    1           RETURN;
     1512     7092    1   END VPD$GET_OUT_FLAVOR;
     1513     7093        %EOD;

PL6.E3A0      #017=VPD$GET_OUT_FLAVOR File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:38 Page:394  
--  Include file information  --

   F$DCB.:E05TOU  cannot be made into a system file and is referenced.
   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$GET_OUT_FLAVOR.

   Procedure VPD$GET_OUT_FLAVOR requires 42 words for executable code.
   Procedure VPD$GET_OUT_FLAVOR requires 4 words of local(AUTO) storage.

PL6.E3A0      #017=VPD$GET_OUT_FLAVOR File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:38 Page:395  

 Object Unit name= VPD$GET_OUT_FLAVOR                         File name= VPD$UTIL.:E05TOU
 UTS= JUL 30 '97 07:38:49.56 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$EI
    2   DCB   even  none     0      0  M$EO
    3   DCB   even  none     0      0  M$EO1
    4   DCB   even  none     0      0  M$ME
    5   DCB   even  none     0      0  M$SI
    6   DCB   even  none     0      0  M$READFILE
    7   DCB   even  none     0      0  M$DO
    8   DCB   even  none     0      0  M$STD1
    9   DCB   even  none     0      0  M$SORT1
   10  RoData even  UTS      2      2  VPD$GET_OUT_FLAVOR
   11   Proc  even  none    42     52  VPD$GET_OUT_FLAVOR

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    11      0   yes            yes      Std        0  VPD$GET_OUT_FLAVOR

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_0
                       nStd      0 X66_ARET
PL6.E3A0      #017=VPD$GET_OUT_FLAVOR File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:38 Page:396  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  BREAK_LOC                             BREAK_MESSAGE_REPORTER
     SPEC_BUF                              OCB                                   IN_RES
     M$EI                                  M$EO                                  M$EO1
     M$ME                                  M$SI                                  M$READFILE
     M$DO                                  M$STD1                                M$SORT1
PL6.E3A0      #017=VPD$GET_OUT_FLAVOR File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:38 Page:397  


     1455        1        /*T***********************************************************/
     1456        2        /*T*                                                         */
     1457        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1458        4        /*T*                                                         */
     1459        5        /*T***********************************************************/
     1460        6        VPD$GET_OUT_FLAVOR: PROC;

      6 11 000000   000000 700200 xent  VPD$GET_OUT* TSX0  ! X66_AUTO_0
        11 000001   000004 000000                    ZERO    4,0

     1461        7        /*I* NAME: VPD$GET_OUT_FLAVOR
     1462        8             PURPOSE: To set up the FLAVOR mask in OCB.
     1463        9             CALL: CALL VPD$GET_OUT_FLAVOR;
     1464       10             DESCRIPTION: This procedure is CALLed AFTER M$OPENing the output DCB.
     1465       11                          Tests are made to set any appropriate bits in OCB.FLAVOR
     1466       12        */
     1467       13        %INCLUDE VP_DATA_R;
     1468     7000        %INCLUDE F$DCB;
     1469     7049        /**/
     1470     7050        /*  FLAVOR.TAPE warns PCL that the output is destined for that long,          */
     1471     7051        /*  stringy stuff that usually needs special care.  This means ANY            */
     1472     7052        /*  form of tape.                                                             */
     1473     7053        /**/
     1474     7054    1           IF OCB.DEV_MASK & '006'O

   7054 11 000002   000255 236000 xsym               LDQ     OCB+173
        11 000003   777000 376003                    ANQ     -512,DU
        11 000004   006000 376003                    ANQ     3072,DU
        11 000005   000010 600000 11                 TZE     s:7062

     1475     7055    1            THEN
     1476     7056    1              OCB.FLAVOR.TAPE = '1'B;

   7056 11 000006   004000 236003                    LDQ     2048,DU
        11 000007   000256 256000 xsym               ORSQ    OCB+174

PL6.E3A0      #017=VPD$GET_OUT_FLAVOR File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:38 Page:398  
     1477     7057        /**/
     1478     7058        /*  FLAVOR.UR is used to signal an output that PCL considers to be            */
     1479     7059        /*  Unit-Record style.  This includes many devices and files with             */
     1480     7060        /*  ORG=UR.  The user's time-sharing terminal is explicitly excluded.         */
     1481     7061        /**/
     1482     7062    1           IF OCB.DEV_MASK.LP

   7062 11 000010   000255 236000 xsym               LDQ     OCB+173
        11 000011   010000 316003                    CANQ    4096,DU
        11 000012   000017 600000 11                 TZE     s:7071
        11 000013   020000 316003                    CANQ    8192,DU
        11 000014   000017 601000 11                 TNZ     s:7071

     1483     7063    1             AND NOT OCB.DEV_MASK.IC       /* AND not the user's terminal        */
     1484     7064    1            THEN
     1485     7065    1              OCB.FLAVOR.UR = '1'B;

   7065 11 000015   002000 236003                    LDQ     1024,DU
        11 000016   000256 256000 xsym               ORSQ    OCB+174

     1486     7066        %EJECT;
PL6.E3A0      #017=VPD$GET_OUT_FLAVOR File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:38 Page:399  
     1487     7067        /**/
     1488     7068        /*  FLAVOR.JE indicates that the output is a stream of commands for           */
     1489     7069        /*  execution.  One wouldn't want to write really strange stuff there.        */
     1490     7070        /**/
     1491     7071    1           IF OCB.DCBPTR$ -> F$DCB.RES = 'JE  '

   7071 11 000017   000001 470400 xsym               LDP0    OCB+1
        11 000020   000026 236100                    LDQ     22,,PR0
        11 000021   000000 116000 10                 CMPQ    0
        11 000022   000025 600000 11                 TZE     s:7074
        11 000023   000001 116000 10                 CMPQ    1
        11 000024   000027 601000 11                 TNZ     s:7079

     1492     7072    1             OR OCB.DCBPTR$ -> F$DCB.RES = 'JF  '
     1493     7073    1            THEN
     1494     7074    1              OCB.FLAVOR.JE = '1'B;

   7074 11 000025   040000 236003                    LDQ     16384,DU
        11 000026   000256 256000 xsym               ORSQ    OCB+174

     1495     7075        /**/
     1496     7076        /*  The FLAVOR.GRANB is used to indicate that the output destination          */
     1497     7077        /*  likes output in granule-sized blocks.                                     */
     1498     7078        /**/
     1499     7079    1           IF OCB.DCBPTR$ -> F$DCB.ORG = %RANDOM#

   7079 11 000027   000032 236100                    LDQ     26,,PR0
        11 000030   777000 376003                    ANQ     -512,DU
        11 000031   003000 116003                    CMPQ    1536,DU
        11 000032   000037 600000 11                 TZE     s:7083
        11 000033   007000 116003                    CMPQ    3584,DU
        11 000034   000037 600000 11                 TZE     s:7083
        11 000035   013000 116003                    CMPQ    5632,DU
        11 000036   000041 601000 11                 TNZ     s:7088

     1500     7080    1             OR OCB.DCBPTR$ -> F$DCB.ORG = %IDS#
     1501     7081    1             OR OCB.DCBPTR$ -> F$DCB.ORG = %CG#
PL6.E3A0      #017=VPD$GET_OUT_FLAVOR File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:38 Page:400  
     1502     7082    1            THEN
     1503     7083    1              OCB.FLAVOR.GRANB = '1'B;

   7083 11 000037   100000 236003                    LDQ     32768,DU
        11 000040   000256 256000 xsym               ORSQ    OCB+174

     1504     7084        /**/
     1505     7085        /*  The FLAVOR.MANAGED bit is used to indicate that the output destination    */
     1506     7086        /*  is a managed resource.                                                    */
     1507     7087        /**/
     1508     7088    1           IF OCB.DCBPTR$->F$DCB.ASN = %FILE# OR OCB.DCBPTR$->F$DCB.ASN=%TAPE#

   7088 11 000041   000032 236100                    LDQ     26,,PR0
        11 000042   777000 376007                    ANQ     -512,DL
        11 000043   001000 116007                    CMPQ    512,DL
        11 000044   000047 600000 11                 TZE     s:7090
        11 000045   002000 116007                    CMPQ    1024,DL
        11 000046   000051 601000 11                 TNZ     s:7091

     1509     7089    1            THEN
     1510     7090    1              OCB.FLAVOR.MANAGED = '1'B;

   7090 11 000047   020000 236003                    LDQ     8192,DU
        11 000050   000256 256000 xsym               ORSQ    OCB+174

     1511     7091    1           RETURN;

   7091 11 000051   000000 702200 xent               TSX2  ! X66_ARET
     1512     7092    1   END VPD$GET_OUT_FLAVOR;
     1513     7093        %EOD;

PL6.E3A0      #017=VPD$GET_OUT_FLAVOR File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:38 Page:401  
--  Include file information  --

   F$DCB.:E05TOU  cannot be made into a system file and is referenced.
   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$GET_OUT_FLAVOR.
PL6.E3A0      #017=VPD$GET_OUT_FLAVOR File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:38 Page:402  

 **** Variables and constants ****

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w EPTR        r     1 BREAK_MESSAGE_REPORTER
     0-0-0/d STRC(6840)  r     1 OCB

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d ASTR(3528)  r     1 F$DCB


   Procedure VPD$GET_OUT_FLAVOR requires 42 words for executable code.
   Procedure VPD$GET_OUT_FLAVOR requires 4 words of local(AUTO) storage.
PL6.E3A0      #017=VPD$GET_OUT_FLAVOR File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:38 Page:403  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #017=VPD$GET_OUT_FLAVOR File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:38 Page:404  
          MINI XREF LISTING

BREAK_LOC
      5220**DCL      5220--REDEF
DEF_ICB.FID.STRING
      5818**DCL      5819--REDEF
DEV_ICB.FID.STRING
      5704**DCL      5705--REDEF
EI_KEY.KEY
      5916**DCL      5916--REDEF    5916--REDEF    5916--REDEF
EO_OCB.TYPE
      5416**DCL      5417--REDEF
F$DCB.ACTPOS
      7026**DCL      7026--REDEF
F$DCB.ARS
      7001**DCL      7001--REDEF
F$DCB.ASN
      7016**DCL      7088>>IF       7088>>IF
F$DCB.ATTR
      7019**DCL      7020--REDEF
F$DCB.BORROW
      7034**DCL      7034--REDEF    7034--REDEF    7034--REDEF
F$DCB.DCBNAME.L
      7048**DCL      7048--IMP-SIZ
F$DCB.EOMCHAR
      7005**DCL      7005--REDEF
F$DCB.FLDID
      7029**DCL      7029--REDEF
F$DCB.FORM$
      7023**DCL      7023--REDEF
F$DCB.FSECT
      7039**DCL      7039--REDEF
F$DCB.FSN
      7016**DCL      7016--REDEF    7016--REDEF    7017--REDEF
PL6.E3A0      #017=VPD$GET_OUT_FLAVOR File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:38 Page:405  
F$DCB.HEADER$
      7022**DCL      7022--REDEF
F$DCB.IXTNSIZE
      7020**DCL      7020--REDEF
F$DCB.LASTSTA$
      7010**DCL      7010--REDEF
F$DCB.LVL
      7035**DCL      7035--REDEF
F$DCB.NAME.C
      7010**DCL      7010--REDEF
F$DCB.NOEOF
      7031**DCL      7031--REDEF
F$DCB.NRECS
      7021**DCL      7021--REDEF
F$DCB.NRECX
      7040**DCL      7040--REDEF
F$DCB.OHDR
      7032**DCL      7032--REDEF
F$DCB.ORG
      7015**DCL      7015--REDEF    7079>>IF       7079>>IF       7079>>IF
F$DCB.PRECNO
      7038**DCL      7038--REDEF
F$DCB.RCSZ
      7043**DCL      7043--REDEF
F$DCB.RES
      7011**DCL      7011--REDEF    7071>>IF       7071>>IF
F$DCB.SETX
      7023**DCL      7023--REDEF
F$DCB.TAB$
      7022**DCL      7023--REDEF
F$DCB.TDA
      7037**DCL      7037--REDEF
F$DCB.WSN
      7012**DCL      7012--REDEF
FPT_CLOSE_EI.SN_
      6757**DCL      6757--REDEF
PL6.E3A0      #017=VPD$GET_OUT_FLAVOR File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:38 Page:406  
FPT_CLOSE_EI.UTL_
      6758**DCL      6758--REDEF
FPT_CLOSE_EI.V.EXPIRE#
      6772**DCL      6772--REDEF
FPT_CLOSE_EI.V.TYPE#
      6770**DCL      6770--REDEF
FPT_CLOSE_EI.V.XTNSIZE#
      6767**DCL      6767--REDEF    6769--REDEF
FPT_CLOSE_PTL.SN_
      6883**DCL      6883--REDEF
FPT_CLOSE_PTL.UTL_
      6884**DCL      6884--REDEF
FPT_CLOSE_PTL.V.EXPIRE#
      6898**DCL      6898--REDEF
FPT_CLOSE_PTL.V.TYPE#
      6896**DCL      6896--REDEF
FPT_CLOSE_PTL.V.XTNSIZE#
      6893**DCL      6893--REDEF    6895--REDEF
FPT_CLOSE_READ.SN_
      6799**DCL      6799--REDEF
FPT_CLOSE_READ.UTL_
      6800**DCL      6800--REDEF
FPT_CLOSE_READ.V.EXPIRE#
      6814**DCL      6814--REDEF
FPT_CLOSE_READ.V.TYPE#
      6812**DCL      6812--REDEF
FPT_CLOSE_READ.V.XTNSIZE#
      6809**DCL      6809--REDEF    6811--REDEF
FPT_CLOSE_SI.SN_
      6967**DCL      6967--REDEF
FPT_CLOSE_SI.UTL_
      6968**DCL      6968--REDEF
FPT_CLOSE_SI.V.EXPIRE#
      6982**DCL      6982--REDEF
FPT_CLOSE_SI.V.TYPE#
      6980**DCL      6980--REDEF
PL6.E3A0      #017=VPD$GET_OUT_FLAVOR File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:38 Page:407  
FPT_CLOSE_SI.V.XTNSIZE#
      6977**DCL      6977--REDEF    6979--REDEF
FPT_CLOSE_STD.SN_
      6925**DCL      6925--REDEF
FPT_CLOSE_STD.UTL_
      6926**DCL      6926--REDEF
FPT_CLOSE_STD.V.EXPIRE#
      6940**DCL      6940--REDEF
FPT_CLOSE_STD.V.TYPE#
      6938**DCL      6938--REDEF
FPT_CLOSE_STD.V.XTNSIZE#
      6935**DCL      6935--REDEF    6937--REDEF
FPT_CLSEI_FT.SN_
      6841**DCL      6841--REDEF
FPT_CLSEI_FT.UTL_
      6842**DCL      6842--REDEF
FPT_CLSEI_FT.V.EXPIRE#
      6856**DCL      6856--REDEF
FPT_CLSEI_FT.V.TYPE#
      6854**DCL      6854--REDEF
FPT_CLSEI_FT.V.XTNSIZE#
      6851**DCL      6851--REDEF    6853--REDEF
FPT_OPEN_EI.ACSVEH_
      6412**DCL      6413--REDEF
FPT_OPEN_EI.ALTKEYS_
      6418**DCL      6419--REDEF    6419--REDEF
FPT_OPEN_EI.HDR_
      6417**DCL      6418--REDEF
FPT_OPEN_EI.TAB_
      6416**DCL      6417--REDEF
FPT_OPEN_EI.UHL_
      6410**DCL      6411--REDEF    6411--REDEF
FPT_OPEN_EI.V.FSN#
      6450**DCL      6450--REDEF    6450--REDEF
FPT_OPEN_EI.WSN_
      6416**DCL      6416--REDEF
PL6.E3A0      #017=VPD$GET_OUT_FLAVOR File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:38 Page:408  
FPT_OPEN_EI_SAVE.ACSVEH_
      6521**DCL      6522--REDEF
FPT_OPEN_EI_SAVE.ALTKEYS_
      6527**DCL      6528--REDEF    6528--REDEF
FPT_OPEN_EI_SAVE.HDR_
      6526**DCL      6527--REDEF
FPT_OPEN_EI_SAVE.TAB_
      6525**DCL      6526--REDEF
FPT_OPEN_EI_SAVE.UHL_
      6519**DCL      6520--REDEF    6520--REDEF
FPT_OPEN_EI_SAVE.V.FSN#
      6559**DCL      6559--REDEF    6559--REDEF
FPT_OPEN_EI_SAVE.WSN_
      6525**DCL      6525--REDEF
FPT_OPEN_OUT.ACSVEH_
      6303**DCL      6304--REDEF
FPT_OPEN_OUT.ALTKEYS_
      6309**DCL      6310--REDEF    6310--REDEF
FPT_OPEN_OUT.HDR_
      6308**DCL      6309--REDEF
FPT_OPEN_OUT.TAB_
      6307**DCL      6308--REDEF
FPT_OPEN_OUT.UHL_
      6301**DCL      6302--REDEF    6302--REDEF
FPT_OPEN_OUT.V.FSN#
      6341**DCL      6341--REDEF    6341--REDEF
FPT_OPEN_OUT.WSN_
      6307**DCL      6307--REDEF
FPT_OPEN_OUT_SAVE.ACSVEH_
      6194**DCL      6195--REDEF
FPT_OPEN_OUT_SAVE.ALTKEYS_
      6200**DCL      6201--REDEF    6201--REDEF
FPT_OPEN_OUT_SAVE.HDR_
      6199**DCL      6200--REDEF
FPT_OPEN_OUT_SAVE.TAB_
      6198**DCL      6199--REDEF
PL6.E3A0      #017=VPD$GET_OUT_FLAVOR File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:38 Page:409  
FPT_OPEN_OUT_SAVE.UHL_
      6192**DCL      6193--REDEF    6193--REDEF
FPT_OPEN_OUT_SAVE.V.FSN#
      6232**DCL      6232--REDEF    6232--REDEF
FPT_OPEN_OUT_SAVE.WSN_
      6198**DCL      6198--REDEF
FPT_READ_STD.STATION_
      6622**DCL      6623--REDEF
FPT_READ_STD.V.DVBYTE.REREAD#
      6634**DCL      6634--REDEF
FPT_READ_STD.V.INDX#
      6632**DCL      6632--REDEF
FPT_READ_UC.STATION_
      6583**DCL      6584--REDEF
FPT_READ_UC.V.DVBYTE.REREAD#
      6595**DCL      6595--REDEF
FPT_READ_UC.V.INDX#
      6593**DCL      6593--REDEF
FPT_WRITE_ME.STATION_
      6691**DCL      6691--REDEF
FPT_WRITE_ME.V.DVBYTE.VFC#
      6698**DCL      6698--REDEF
FPT_WRITE_OUT.STATION_
      6722**DCL      6722--REDEF
FPT_WRITE_OUT.V.DVBYTE.VFC#
      6729**DCL      6729--REDEF
FPT_WRITE_UC.STATION_
      6660**DCL      6660--REDEF
FPT_WRITE_UC.V.DVBYTE.VFC#
      6667**DCL      6667--REDEF
FROM_SN.SN
      5566**DCL      5567--REDEF
GETCMD.OUT$
      4773**DCL      4779--REDEF
ICB.FID.STRING
      5590**DCL      5591--REDEF
PL6.E3A0      #017=VPD$GET_OUT_FLAVOR File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:38 Page:410  
IFSFA_PARAM.EOMCHAR#
      5945**DCL      5946--REDEF
IFSFA_PARAM.SIG1
      5939**DCL      5939--REDEF
IFSFA_PARAM.SIG2
      5939**DCL      5940--REDEF
IN_RES
      5512**DCL      5512--REDEF
IN_SN.SN
      5528**DCL      5529--REDEF
OCB.DCBPTR$
      5230**DCL      7071>>IF       7071>>IF       7079>>IF       7079>>IF       7079>>IF       7088>>IF
      7088>>IF
OCB.DEV_MASK
      5308**DCL      7054>>IF
OCB.DEV_MASK.IC
      5312**DCL      7062>>IF
OCB.DEV_MASK.LP
      5313**DCL      7062>>IF
OCB.FLAVOR.GRANB
      5320**DCL      7083<<ASSIGN
OCB.FLAVOR.JE
      5321**DCL      7074<<ASSIGN
OCB.FLAVOR.MANAGED
      5322**DCL      7090<<ASSIGN
OCB.FLAVOR.TAPE
      5324**DCL      7056<<ASSIGN
OCB.FLAVOR.UR
      5325**DCL      7065<<ASSIGN
OCB.TYPE
      5274**DCL      5275--REDEF
OFSFA_PARAM.EOMCHAR#
      5975**DCL      5976--REDEF
OFSFA_PARAM.SIG1
      5969**DCL      5969--REDEF
OFSFA_PARAM.SIG2
PL6.E3A0      #017=VPD$GET_OUT_FLAVOR File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:38 Page:411  
      5969**DCL      5970--REDEF
OUT_SN.SN
      5546**DCL      5547--REDEF
SPEC_BUF
      5224**DCL      5224--REDEF

PL6.E3A0      #018=VPD$GET_KEY_OR_NUM File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:40 Page:412  
     1514        1        /*T***********************************************************/
     1515        2        /*T*                                                         */
     1516        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1517        4        /*T*                                                         */
     1518        5        /*T***********************************************************/
     1519        6        VPD$GET_KEY_OR_NUM: PROC(KEY_BLOCK$,TO_KEY$) ALTRET;
     1520        7        /*I* NAME: VPD$GET_KEY_OR_NUM
     1521        8             PURPOSE: To process the current key or record sequence number.
     1522        9             CALL: CALL VPD$GET_KEY_OR_NUM(KEY_BLOCK$,TO_KEY$) ALTRET(ERROR);
     1523       10             DESCRIPTION: This procedure converts a key or record sequence
     1524       11                          number from text into an actual key.  KEY_BLOCK$ is
     1525       12                          a pointer to the parse block containing the key.
     1526       13                          TO_KEY$ locates a TEXTC area to receive the key.
     1527       14                          If any errors are encountered, a severity 1 message is
     1528       15                          printed and the routine takes the ALTRET.
     1529       16        */
     1530       17        %INCLUDE VP_DATA_R;
     1531     7004        %PARSE$OUT(NAME = OUT$BLK,STCLASS = BASED);
     1532     7049        %PARSE$SYM(NAME = OUT$SYM,STCLASS = BASED);
     1533     7087    1   DCL 1 TEXT$C BASED,
     1534     7088    1         2 LEN UBIN BYTE UNAL,
     1535     7089    1         2 STRING CHAR(TEXT$C.LEN);
     1536     7090    1   DCL 1 TEXT$C_BIT BASED,
     1537     7091    1         2 LEN UBIN BYTE UNAL,
     1538     7092    1         2 STRING,
     1539     7093    1           3 STRINGC CHAR(TEXT$C_BIT.LEN);
     1540     7094    1   DCL 1 TEXT$C_ARY BASED,
     1541     7095    1         2 LEN UBIN BYTE UNAL,
     1542     7096    1         2 STRING(0:0) CHAR(1);
     1543     7097    1   DCL B$UBIN UBIN BASED;
     1544     7098    1   DCL 1 OCT_ARY BASED,
     1545     7099    1         2 LEN UBIN(9) CALIGNED,
     1546     7100    1         2 DIGIT(0:0) UBIN(3) UNAL;
     1547     7101    1   DCL KEY_BLOCK$ PTR;
     1548     7102    1   DCL TO_KEY$ PTR;
     1549     7103    1   DCL 1 NORM$KEY BASED,
     1550     7104    1         2 LEN UBIN BYTE UNAL,
PL6.E3A0      #018=VPD$GET_KEY_OR_NUM File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:40 Page:413  
     1551     7105    1         2 KEY CHAR(31) UNAL,
     1552     7106    1         2 OCT_KEY_ARY(0:92) REDEF KEY UBIN(3) UNAL,
     1553     7107    1         2 NUM UBIN WORD UNAL;
     1554     7108    1   DCL 1 EDIT$KEY BASED,
     1555     7109    1         2 LEN UBIN BYTE UNAL,
     1556     7110    1         2 KEY UBIN(27) UNAL;
     1557     7111    1   DCL DEC_NUM SBIN WORD;
     1558     7112    1   DCL DEC$ PTR;
     1559     7113        /**/
     1560     7114        /*  ENTRY DCLS  */
     1561     7115        /**/
     1562     7116        %VP_ENTRIES (OMIT=VPD$GET_KEY_OR_NUM);
     1563     7324    2           DO CASE(KEY_BLOCK$ -> OUT$BLK.CODE);
     1564     7325    2            CASE(1);
     1565     7326    2              CALL OCTAL_KEY ALTRET(GK_ALT);
     1566     7327    2            CASE(2);
     1567     7328    2              CALL QUOTE_KEY ALTRET(GK_ALT);
     1568     7329    2            CASE(3);
     1569     7330    2              CALL EDIT_KEY ALTRET(GK_ALT);
     1570     7331    2            CASE(4);
     1571     7332    2              CALL LOGICAL_REC_NUM ALTRET(GK_ALT);
     1572     7333    2            END;
     1573     7334
     1574     7335    1           RETURN;
     1575     7336
     1576     7337    1   GK_ALT:
     1577     7338    1           ALTRETURN;
     1578     7339        %EJECT;
PL6.E3A0      #018=VPD$GET_KEY_OR_NUM File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:40 Page:414  
     1579     7340    1   EDIT_KEY: PROC ALTRET;
     1580     7341        /*I* NAME: EDIT_KEY
     1581     7342             PURPOSE: To validate and store away the current EDIT-style key.
     1582     7343             CALL: CALL EDIT_KEY;
     1583     7344             DESCRIPTION: The current EDIT-style key is checked for being in range
     1584     7345                          and if it is, it is stuffed away; otherwise the ALTRET
     1585     7346                          is taken.
     1586     7347        */
     1587     7348    2   DCL CHAR3 CHAR(3);
     1588     7349    2           TO_KEY$->EDIT$KEY.LEN = 3;
     1589     7350    2           DEC_NUM = 0;
     1590     7351    2           CALL VPD$DECI_MUNGE(KEY_BLOCK$,
     1591     7352    2             0,99999999,                   /* Limits 0 - 99999.999               */
     1592     7353    2             DEC_NUM) ALTRET(BAD_EKEY);
     1593     7354    2           TO_KEY$ -> EDIT$KEY.KEY = DEC_NUM;
     1594     7355    2           RETURN;
     1595     7356        /**/
     1596     7357    2   BAD_EKEY: CALL VPL$ERR_PROC(1,140,'04'O); /* BAD EDIT KEY                     */
     1597     7358        /*E* ERROR:   VPD-00140
     1598     7359             MESSAGE: Bad EDIT key
     1599     7360        */
     1600     7361    2           ALTRETURN;
     1601     7362    2   END EDIT_KEY;
     1602     7363        %EJECT;
PL6.E3A0      #018=VPD$GET_KEY_OR_NUM File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:40 Page:415  
     1603     7364    1   LOGICAL_REC_NUM: PROC ALTRET;
     1604     7365        /*I* NAME: LOGICAL_REC_NUM
     1605     7366             PURPOSE: To validate and store away the current logical record number.
     1606     7367             CALL: CALL LOGICAL_REC_NUM;
     1607     7368             DESCRIPTION: If the logical record number is greater than too large,
     1608     7369                          the ALTRET is taken; otherwise the logical record
     1609     7370                          number is stuffed away.
     1610     7371        */
     1611     7372    2           CALL VPD$TEXTC_CHARBIN(TO_KEY$->B$UBIN,
     1612     7373    2             KEY_BLOCK$->OUT$BLK.SUBLK$(0),
     1613     7374    2             -1) ALTRET(BAD_RECNUM);
     1614     7375    2           IF TO_KEY$->B$UBIN=0
     1615     7376    2            THEN
     1616     7377    3            DO;
     1617     7378    3               CALL VPL$ERR_PROC(1,150,'04'O); /* INVALID...LOGICAL REC. NUM=0   */
     1618     7379        /*E* ERROR:   VPD-00150
     1619     7380             MESSAGE: Illegal...logical record number = 0
     1620     7381        */
     1621     7382    3               ALTRETURN;
     1622     7383    3               END;
     1623     7384    2           RETURN;
     1624     7385    2   BAD_RECNUM: CALL VPL$ERR_PROC(1,160,'04'O); /* LOGICAL RECORD NUMBER TOO BIG  */
     1625     7386        /*E* ERROR:   VPD-00160
     1626     7387             MESSAGE: Logical record number too large
     1627     7388        */
     1628     7389    2           ALTRETURN;
     1629     7390    2   END LOGICAL_REC_NUM;
     1630     7391        %EJECT;
PL6.E3A0      #018=VPD$GET_KEY_OR_NUM File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:40 Page:416  
     1631     7392    1   OCTAL_KEY: PROC ALTRET;
     1632     7393        /*I* NAME: OCTAL_KEY
     1633     7394             PURPOSE: To validate and store away the current OCTAL-style key.
     1634     7395             CALL: CALL OCTAL_KEY;
     1635     7396             DESCRIPTION: The current OCTAL-style key is checked for being too long or
     1636     7397                          non-octal. If it is, the ALTRET is taken; otherwise
     1637     7398                          the key is formed and stuffed away.
     1638     7399        */
     1639     7400    2   DCL KEY$ PTR;
     1640     7401    2   DCL I SBIN WORD;
     1641     7402    2   DCL CHR CHAR(1);
     1642     7403    2   DCL 1 CHR_VAL REDEF CHR,
     1643     7404    2         2 * BIT(6) UNAL,
     1644     7405    2         2 VAL UBIN(3) UNAL;
     1645     7406    2           KEY$ = KEY_BLOCK$->OUT$BLK.SUBLK$(0)->OUT$BLK.SUBLK$(0);
     1646     7407    2           IF KEY$->TEXT$C.LEN>510
     1647     7408    2            THEN
     1648     7409    3            DO;
     1649     7410    3               CALL VPL$ERR_PROC(1,170,'04'O); /* OCTAL KEY TOO LONG             */
     1650     7411        /*E* ERROR:   VPD-00170
     1651     7412             MESSAGE: Octal key too long
     1652     7413        */
     1653     7414    3               ALTRETURN;
     1654     7415    3               END;
     1655     7416    2            ELSE
     1656     7417    3            DO;
     1657     7418    3               TO_KEY$->TEXT$C.LEN=511;
     1658     7419    3               TO_KEY$->TEXT$C = '0'O;     /* INSURE ZERO PADDING FOR INPUT      */
     1659     7420                                                /* STRINGS OF LENGTH NOT MOD 3        */
     1660     7421    3               TO_KEY$->TEXT$C.LEN = (KEY$->TEXT$C.LEN+2)/3;
     1661     7422    3               I=0;
     1662     7423    4               DO WHILE(I<KEY$->TEXT$C.LEN);
     1663     7424    4                  CHR = KEY$->TEXT$C_ARY.STRING(I);
     1664     7425    4                  IF CHR_VAL & '770'O ~='060'O
     1665     7426    4                   THEN
     1666     7427    5                   DO;
     1667     7428    5                      CALL VPL$ERR_PROC(1,180,'04'O);
PL6.E3A0      #018=VPD$GET_KEY_OR_NUM File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:40 Page:417  
     1668     7429        /*E* ERROR:   VPD-00180
     1669     7430             MESSAGE: Bad octal key
     1670     7431        */
     1671     7432    5                      ALTRETURN;
     1672     7433    5                      END;
     1673     7434    4                   ELSE
     1674     7435    4                     TO_KEY$->OCT_ARY.DIGIT(I) = CHR_VAL.VAL;
     1675     7436    4                  I = I+1;
     1676     7437    4                  END;
     1677     7438    3               END;
     1678     7439    2   END OCTAL_KEY;
     1679     7440        %EJECT;
PL6.E3A0      #018=VPD$GET_KEY_OR_NUM File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:40 Page:418  
     1680     7441    1   QUOTE_KEY: PROC ALTRET;
     1681     7442        /*I* NAME: QUOTE_KEY
     1682     7443             PURPOSE: To validate and store away the current quoted string style key.
     1683     7444             CALL: CALL QUOTE_KEY;
     1684     7445             DESCRIPTION: The current key is checked for length and the ALTRET
     1685     7446                          is taken if it is too long. If is is OK, it is stuffed
     1686     7447                          away.
     1687     7448        */
     1688     7449    2           IF KEY_BLOCK$->OUT$SYM.COUNT>510
     1689     7450    2            THEN
     1690     7451    3            DO;
     1691     7452    3               CALL VPL$ERR_PROC(1,120,'04'O); /* KEY TOO LONG                   */
     1692     7453        /*E* ERROR:   VPD-00120
     1693     7454             MESSAGE: Quoted key too long
     1694     7455        */
     1695     7456    3               ALTRETURN;
     1696     7457    3               END;
     1697     7458    2            ELSE
     1698     7459    2              TO_KEY$->TEXT$C.LEN = KEY_BLOCK$->OUT$SYM.TEXTC$->TEXT$C.LEN;
     1699     7460    2           TO_KEY$->TEXT$C.STRING = KEY_BLOCK$->OUT$SYM.TEXTC$->TEXT$C.STRING;
     1700     7461    2   END QUOTE_KEY;
     1701     7462    1   END VPD$GET_KEY_OR_NUM;
     1702     7463        %EOD;

PL6.E3A0      #018=VPD$GET_KEY_OR_NUM File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:40 Page:419  
--  Include file information  --

   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$GET_KEY_OR_NUM.

   Procedure VPD$GET_KEY_OR_NUM requires 214 words for executable code.
   Procedure VPD$GET_KEY_OR_NUM requires 16 words of local(AUTO) storage.

PL6.E3A0      #018=VPD$GET_KEY_OR_NUM File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:40 Page:420  

 Object Unit name= VPD$GET_KEY_OR_NUM                         File name= VPD$UTIL.:E05TOU
 UTS= JUL 30 '97 07:40:14.36 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$EI
    2   DCB   even  none     0      0  M$EO
    3   DCB   even  none     0      0  M$EO1
    4   DCB   even  none     0      0  M$ME
    5   DCB   even  none     0      0  M$SI
    6   DCB   even  none     0      0  M$READFILE
    7   DCB   even  none     0      0  M$DO
    8   DCB   even  none     0      0  M$STD1
    9   DCB   even  none     0      0  M$SORT1
   10   Proc  even  none   214    326  VPD$GET_KEY_OR_NUM
   11  RoData even  none    30     36  VPD$GET_KEY_OR_NUM

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    10      0   yes    yes     yes      Std        2  VPD$GET_KEY_OR_NUM
PL6.E3A0      #018=VPD$GET_KEY_OR_NUM File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:40 Page:421  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       4 VPD$DECI_MUNGE
         yes           Std       8 VPL$ERR_PROC
 yes     yes           Std       4 VPD$TEXTC_CHARBIN
                       nStd      0 X66_AUTO_2
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT
                       Std       0 B_CONSPOOL_D

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  BREAK_LOC                             BREAK_MESSAGE_REPORTER
     SPEC_BUF                              IN_RES                                M$EI
     M$EO                                  M$EO1                                 M$ME
     M$SI                                  M$READFILE                            M$DO
     M$STD1                                M$SORT1                               B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #018=VPD$GET_KEY_OR_NUM File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:40 Page:422  


     1514        1        /*T***********************************************************/
     1515        2        /*T*                                                         */
     1516        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1517        4        /*T*                                                         */
     1518        5        /*T***********************************************************/
     1519        6        VPD$GET_KEY_OR_NUM: PROC(KEY_BLOCK$,TO_KEY$) ALTRET;

      6 10 000000   000000 700200 xent  VPD$GET_KEY* TSX0  ! X66_AUTO_2
        10 000001   000020 000002                    ZERO    16,2

     1520        7        /*I* NAME: VPD$GET_KEY_OR_NUM
     1521        8             PURPOSE: To process the current key or record sequence number.
     1522        9             CALL: CALL VPD$GET_KEY_OR_NUM(KEY_BLOCK$,TO_KEY$) ALTRET(ERROR);
     1523       10             DESCRIPTION: This procedure converts a key or record sequence
     1524       11                          number from text into an actual key.  KEY_BLOCK$ is
     1525       12                          a pointer to the parse block containing the key.
     1526       13                          TO_KEY$ locates a TEXTC area to receive the key.
     1527       14                          If any errors are encountered, a severity 1 message is
     1528       15                          printed and the routine takes the ALTRET.
     1529       16        */
     1530       17        %INCLUDE VP_DATA_R;
     1531     7004        %PARSE$OUT(NAME = OUT$BLK,STCLASS = BASED);
     1532     7049        %PARSE$SYM(NAME = OUT$SYM,STCLASS = BASED);
     1533     7087    1   DCL 1 TEXT$C BASED,
     1534     7088    1         2 LEN UBIN BYTE UNAL,
     1535     7089    1         2 STRING CHAR(TEXT$C.LEN);
     1536     7090    1   DCL 1 TEXT$C_BIT BASED,
     1537     7091    1         2 LEN UBIN BYTE UNAL,
     1538     7092    1         2 STRING,
     1539     7093    1           3 STRINGC CHAR(TEXT$C_BIT.LEN);
     1540     7094    1   DCL 1 TEXT$C_ARY BASED,
     1541     7095    1         2 LEN UBIN BYTE UNAL,
     1542     7096    1         2 STRING(0:0) CHAR(1);
     1543     7097    1   DCL B$UBIN UBIN BASED;
     1544     7098    1   DCL 1 OCT_ARY BASED,
     1545     7099    1         2 LEN UBIN(9) CALIGNED,
PL6.E3A0      #018=VPD$GET_KEY_OR_NUM File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:40 Page:423  
     1546     7100    1         2 DIGIT(0:0) UBIN(3) UNAL;
     1547     7101    1   DCL KEY_BLOCK$ PTR;
     1548     7102    1   DCL TO_KEY$ PTR;
     1549     7103    1   DCL 1 NORM$KEY BASED,
     1550     7104    1         2 LEN UBIN BYTE UNAL,
     1551     7105    1         2 KEY CHAR(31) UNAL,
     1552     7106    1         2 OCT_KEY_ARY(0:92) REDEF KEY UBIN(3) UNAL,
     1553     7107    1         2 NUM UBIN WORD UNAL;
     1554     7108    1   DCL 1 EDIT$KEY BASED,
     1555     7109    1         2 LEN UBIN BYTE UNAL,
     1556     7110    1         2 KEY UBIN(27) UNAL;
     1557     7111    1   DCL DEC_NUM SBIN WORD;
     1558     7112    1   DCL DEC$ PTR;
     1559     7113        /**/
     1560     7114        /*  ENTRY DCLS  */
     1561     7115        /**/
     1562     7116        %VP_ENTRIES (OMIT=VPD$GET_KEY_OR_NUM);
     1563     7324    2           DO CASE(KEY_BLOCK$ -> OUT$BLK.CODE);

   7324 10 000002   200003 470500                    LDP0    @KEY_BLOCK$,,AUTO
        10 000003   000000 471500                    LDP1    0,,PR0
        10 000004   100000 720100                    LXL0    0,,PR1
        10 000005   000005 100003                    CMPX0   5,DU
        10 000006   000010 602010 10                 TNC     s:7324+6,X0
        10 000007   000030 710000 10                 TRA     s:7335
        10 000010   000030 710000 10                 TRA     s:7335
        10 000011   000015 710000 10                 TRA     s:7326
        10 000012   000020 710000 10                 TRA     s:7328
        10 000013   000023 710000 10                 TRA     s:7330
        10 000014   000026 710000 10                 TRA     s:7332

     1564     7325    2            CASE(1);

     1565     7326    2              CALL OCTAL_KEY ALTRET(GK_ALT);

   7326 10 000015   000131 701000 10                 TSX1    OCTAL_KEY
        10 000016   000031 702000 10                 TSX2    GK_ALT
PL6.E3A0      #018=VPD$GET_KEY_OR_NUM File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:40 Page:424  
        10 000017   000030 710000 10                 TRA     s:7335

     1566     7327    2            CASE(2);

     1567     7328    2              CALL QUOTE_KEY ALTRET(GK_ALT);

   7328 10 000020   000263 701000 10                 TSX1    QUOTE_KEY
        10 000021   000031 702000 10                 TSX2    GK_ALT
        10 000022   000030 710000 10                 TRA     s:7335

     1568     7329    2            CASE(3);

     1569     7330    2              CALL EDIT_KEY ALTRET(GK_ALT);

   7330 10 000023   000032 701000 10                 TSX1    EDIT_KEY
        10 000024   000031 702000 10                 TSX2    GK_ALT
        10 000025   000030 710000 10                 TRA     s:7335

     1570     7331    2            CASE(4);

     1571     7332    2              CALL LOGICAL_REC_NUM ALTRET(GK_ALT);

   7332 10 000026   000071 701000 10                 TSX1    LOGICAL_REC_NUM
        10 000027   000031 702000 10                 TSX2    GK_ALT

     1572     7333    2            END;

     1573     7334
     1574     7335    1           RETURN;

   7335 10 000030   000000 702200 xent               TSX2  ! X66_ARET

     1575     7336
     1576     7337    1   GK_ALT:
     1577     7338    1           ALTRETURN;

   7338 10 000031   000000 702200 xent  GK_ALT       TSX2  ! X66_AALT
PL6.E3A0      #018=VPD$GET_KEY_OR_NUM File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:40 Page:425  

     1578     7339        %EJECT;
PL6.E3A0      #018=VPD$GET_KEY_OR_NUM File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:40 Page:426  
     1579     7340    1   EDIT_KEY: PROC ALTRET;

   7340 10 000032   200010 741300       EDIT_KEY     STX1  ! DEC_NUM+3,,AUTO

     1580     7341        /*I* NAME: EDIT_KEY
     1581     7342             PURPOSE: To validate and store away the current EDIT-style key.
     1582     7343             CALL: CALL EDIT_KEY;
     1583     7344             DESCRIPTION: The current EDIT-style key is checked for being in range
     1584     7345                          and if it is, it is stuffed away; otherwise the ALTRET
     1585     7346                          is taken.
     1586     7347        */
     1587     7348    2   DCL CHAR3 CHAR(3);
     1588     7349    2           TO_KEY$->EDIT$KEY.LEN = 3;

   7349 10 000033   200004 470500                    LDP0    @TO_KEY$,,AUTO
        10 000034   000000 471500                    LDP1    0,,PR0
        10 000035   003100 061400                    CSR     bolr='003'O
        10 000036   000005 000044 xsym               BDSC    B_VECTNIL+5              by=0,bit=0,n=36
        10 000037   100000 000011                    BDSC    0,,PR1                   by=0,bit=0,n=9

     1589     7350    2           DEC_NUM = 0;

   7350 10 000040   200005 450100                    STZ     DEC_NUM,,AUTO

     1590     7351    2           CALL VPD$DECI_MUNGE(KEY_BLOCK$,

   7351 10 000041   200005 631500                    EPPR1   DEC_NUM,,AUTO
        10 000042   200017 451500                    STP1    CHR+4,,AUTO
        10 000043   000001 236000 11                 LDQ     1
        10 000044   200016 756100                    STQ     CHR+3,,AUTO
        10 000045   000002 236000 11                 LDQ     2
        10 000046   200003 235100                    LDA     @KEY_BLOCK$,,AUTO
        10 000047   200014 757100                    STAQ    CHR+1,,AUTO
        10 000050   200014 630500                    EPPR0   CHR+1,,AUTO
        10 000051   000022 631400 xsym               EPPR1   B_VECTNIL+18
        10 000052   000000 701000 xent               TSX1    VPD$DECI_MUNGE
        10 000053   000063 702000 10                 TSX2    BAD_EKEY
PL6.E3A0      #018=VPD$GET_KEY_OR_NUM File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:40 Page:427  

     1591     7352    2             0,99999999,                   /* Limits 0 - 99999.999               */
     1592     7353    2             DEC_NUM) ALTRET(BAD_EKEY);
     1593     7354    2           TO_KEY$ -> EDIT$KEY.KEY = DEC_NUM;

   7354 10 000054   200004 470500                    LDP0    @TO_KEY$,,AUTO
        10 000055   000000 471500                    LDP1    0,,PR0
        10 000056   003100 061500                    CSR     bolr='003'O
        10 000057   200005 000044                    BDSC    DEC_NUM,,AUTO            by=0,bit=0,n=36
        10 000060   100000 200033                    BDSC    0,,PR1                   by=1,bit=0,n=27

     1594     7355    2           RETURN;

   7355 10 000061   200010 221300                    LDX1  ! DEC_NUM+3,,AUTO
        10 000062   000001 702211                    TSX2  ! 1,X1

     1595     7356        /**/
     1596     7357    2   BAD_EKEY: CALL VPL$ERR_PROC(1,140,'04'O); /* BAD EDIT KEY                     */

   7357 10 000063   000005 630400 11    BAD_EKEY     EPPR0   5
        10 000064   000021 631400 xsym               EPPR1   B_VECTNIL+17
        10 000065   000000 701000 xent               TSX1    VPL$ERR_PROC
        10 000066   000000 011000                    NOP     0

     1597     7358        /*E* ERROR:   VPD-00140
     1598     7359             MESSAGE: Bad EDIT key
     1599     7360        */
     1600     7361    2           ALTRETURN;

   7361 10 000067   200010 221300                    LDX1  ! DEC_NUM+3,,AUTO
        10 000070   000000 702211                    TSX2  ! 0,X1

     1601     7362    2   END EDIT_KEY;
     1602     7363        %EJECT;
PL6.E3A0      #018=VPD$GET_KEY_OR_NUM File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:40 Page:428  
     1603     7364    1   LOGICAL_REC_NUM: PROC ALTRET;

   7364 10 000071   200010 741300       LOGICAL_REC* STX1  ! DEC_NUM+3,,AUTO

     1604     7365        /*I* NAME: LOGICAL_REC_NUM
     1605     7366             PURPOSE: To validate and store away the current logical record number.
     1606     7367             CALL: CALL LOGICAL_REC_NUM;
     1607     7368             DESCRIPTION: If the logical record number is greater than too large,
     1608     7369                          the ALTRET is taken; otherwise the logical record
     1609     7370                          number is stuffed away.
     1610     7371        */
     1611     7372    2           CALL VPD$TEXTC_CHARBIN(TO_KEY$->B$UBIN,

   7372 10 000072   200004 470500                    LDP0    @TO_KEY$,,AUTO
        10 000073   000000 471500                    LDP1    0,,PR0
        10 000074   200003 473500                    LDP3    @KEY_BLOCK$,,AUTO
        10 000075   300000 474500                    LDP4    0,,PR3
        10 000076   000010 236000 11                 LDQ     8
        10 000077   200016 756100                    STQ     CHR+3,,AUTO
        10 000100   400003 635500                    EPPR5   3,,PR4
        10 000101   200015 455500                    STP5    CHR+2,,AUTO
        10 000102   200014 451500                    STP1    CHR+1,,AUTO
        10 000103   200014 630500                    EPPR0   CHR+1,,AUTO
        10 000104   000021 631400 xsym               EPPR1   B_VECTNIL+17
        10 000105   000000 701000 xent               TSX1    VPD$TEXTC_CHARBIN
        10 000106   000123 702000 10                 TSX2    BAD_RECNUM

     1612     7373    2             KEY_BLOCK$->OUT$BLK.SUBLK$(0),
     1613     7374    2             -1) ALTRET(BAD_RECNUM);
     1614     7375    2           IF TO_KEY$->B$UBIN=0

   7375 10 000107   200004 470500                    LDP0    @TO_KEY$,,AUTO
        10 000110   000000 471500                    LDP1    0,,PR0
        10 000111   100000 235100                    LDA     0,,PR1
        10 000112   000121 601000 10                 TNZ     s:7384

     1615     7376    2            THEN
PL6.E3A0      #018=VPD$GET_KEY_OR_NUM File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:40 Page:429  
     1616     7377    3            DO;

     1617     7378    3               CALL VPL$ERR_PROC(1,150,'04'O); /* INVALID...LOGICAL REC. NUM=0   */

   7378 10 000113   000012 630400 11                 EPPR0   10
        10 000114   000021 631400 xsym               EPPR1   B_VECTNIL+17
        10 000115   000000 701000 xent               TSX1    VPL$ERR_PROC
        10 000116   000000 011000                    NOP     0

     1618     7379        /*E* ERROR:   VPD-00150
     1619     7380             MESSAGE: Illegal...logical record number = 0
     1620     7381        */
     1621     7382    3               ALTRETURN;

   7382 10 000117   200010 221300                    LDX1  ! DEC_NUM+3,,AUTO
        10 000120   000000 702211                    TSX2  ! 0,X1

     1622     7383    3               END;
     1623     7384    2           RETURN;

   7384 10 000121   200010 221300                    LDX1  ! DEC_NUM+3,,AUTO
        10 000122   000001 702211                    TSX2  ! 1,X1

     1624     7385    2   BAD_RECNUM: CALL VPL$ERR_PROC(1,160,'04'O); /* LOGICAL RECORD NUMBER TOO BIG  */

   7385 10 000123   000016 630400 11    BAD_RECNUM   EPPR0   14
        10 000124   000021 631400 xsym               EPPR1   B_VECTNIL+17
        10 000125   000000 701000 xent               TSX1    VPL$ERR_PROC
        10 000126   000000 011000                    NOP     0

     1625     7386        /*E* ERROR:   VPD-00160
     1626     7387             MESSAGE: Logical record number too large
     1627     7388        */
     1628     7389    2           ALTRETURN;

   7389 10 000127   200010 221300                    LDX1  ! DEC_NUM+3,,AUTO
        10 000130   000000 702211                    TSX2  ! 0,X1
PL6.E3A0      #018=VPD$GET_KEY_OR_NUM File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:40 Page:430  

     1629     7390    2   END LOGICAL_REC_NUM;
     1630     7391        %EJECT;
PL6.E3A0      #018=VPD$GET_KEY_OR_NUM File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:40 Page:431  
     1631     7392    1   OCTAL_KEY: PROC ALTRET;

   7392 10 000131   200010 741300       OCTAL_KEY    STX1  ! DEC_NUM+3,,AUTO

     1632     7393        /*I* NAME: OCTAL_KEY
     1633     7394             PURPOSE: To validate and store away the current OCTAL-style key.
     1634     7395             CALL: CALL OCTAL_KEY;
     1635     7396             DESCRIPTION: The current OCTAL-style key is checked for being too long or
     1636     7397                          non-octal. If it is, the ALTRET is taken; otherwise
     1637     7398                          the key is formed and stuffed away.
     1638     7399        */
     1639     7400    2   DCL KEY$ PTR;
     1640     7401    2   DCL I SBIN WORD;
     1641     7402    2   DCL CHR CHAR(1);
     1642     7403    2   DCL 1 CHR_VAL REDEF CHR,
     1643     7404    2         2 * BIT(6) UNAL,
     1644     7405    2         2 VAL UBIN(3) UNAL;
     1645     7406    2           KEY$ = KEY_BLOCK$->OUT$BLK.SUBLK$(0)->OUT$BLK.SUBLK$(0);

   7406 10 000132   200003 470500                    LDP0    @KEY_BLOCK$,,AUTO
        10 000133   000000 471500                    LDP1    0,,PR0
        10 000134   100003 473500                    LDP3    3,,PR1
        10 000135   300003 236100                    LDQ     3,,PR3
        10 000136   200011 756100                    STQ     KEY$,,AUTO

     1646     7407    2           IF KEY$->TEXT$C.LEN>510

   7407 10 000137   200011 474500                    LDP4    KEY$,,AUTO
        10 000140   000100 101500                    MRL     fill='000'O
        10 000141   400000 000001                    ADSC9   0,,PR4                   cn=0,n=1
        10 000142   200014 000004                    ADSC9   CHR+1,,AUTO              cn=0,n=4
        10 000143   200014 236100                    LDQ     CHR+1,,AUTO
        10 000144   000777 116007                    CMPQ    511,DL
        10 000145   000154 604000 10                 TMI     s:7418

     1647     7408    2            THEN
     1648     7409    3            DO;
PL6.E3A0      #018=VPD$GET_KEY_OR_NUM File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:40 Page:432  

     1649     7410    3               CALL VPL$ERR_PROC(1,170,'04'O); /* OCTAL KEY TOO LONG             */

   7410 10 000146   000022 630400 11                 EPPR0   18
        10 000147   000021 631400 xsym               EPPR1   B_VECTNIL+17
        10 000150   000000 701000 xent               TSX1    VPL$ERR_PROC
        10 000151   000000 011000                    NOP     0

     1650     7411        /*E* ERROR:   VPD-00170
     1651     7412             MESSAGE: Octal key too long
     1652     7413        */
     1653     7414    3               ALTRETURN;

   7414 10 000152   200010 221300                    LDX1  ! DEC_NUM+3,,AUTO
        10 000153   000000 702211                    TSX2  ! 0,X1

     1654     7415    3               END;
     1655     7416    2            ELSE
     1656     7417    3            DO;

     1657     7418    3               TO_KEY$->TEXT$C.LEN=511;

   7418 10 000154   200004 471500                    LDP1    @TO_KEY$,,AUTO
        10 000155   100000 473500                    LDP3    0,,PR1
        10 000156   000100 101400                    MRL     fill='000'O
        10 000157   000025 000004 11                 ADSC9   21                       cn=0,n=4
        10 000160   300000 000001                    ADSC9   0,,PR3                   cn=0,n=1

     1658     7419    3               TO_KEY$->TEXT$C = '0'O;     /* INSURE ZERO PADDING FOR INPUT      */

   7419 10 000161   100000 473500                    LDP3    0,,PR1
        10 000162   000100 101500                    MRL     fill='000'O
        10 000163   300000 000001                    ADSC9   0,,PR3                   cn=0,n=1
        10 000164   200014 000002                    ADSC9   CHR+1,,AUTO              cn=0,n=2
        10 000165   200014 220100                    LDX0    CHR+1,,AUTO
        10 000166   000001 621010                    EAX1    1,X0
        10 000167   000140 100400                    MLR     fill='000'O
PL6.E3A0      #018=VPD$GET_KEY_OR_NUM File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:40 Page:433  
        10 000170   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
        10 000171   300000 000011                    ADSC9   0,,PR3                   cn=0,n=*X1

     1659     7420                                                /* STRINGS OF LENGTH NOT MOD 3        */
     1660     7421    3               TO_KEY$->TEXT$C.LEN = (KEY$->TEXT$C.LEN+2)/3;

   7421 10 000172   100000 473500                    LDP3    0,,PR1
        10 000173   000100 101500                    MRL     fill='000'O
        10 000174   400000 000001                    ADSC9   0,,PR4                   cn=0,n=1
        10 000175   200014 000004                    ADSC9   CHR+1,,AUTO              cn=0,n=4
        10 000176   200014 236100                    LDQ     CHR+1,,AUTO
        10 000177   000002 036007                    ADLQ    2,DL
        10 000200   000003 506007                    DIV     3,DL
        10 000201   200015 756100                    STQ     CHR+2,,AUTO
        10 000202   000100 101500                    MRL     fill='000'O
        10 000203   200015 000004                    ADSC9   CHR+2,,AUTO              cn=0,n=4
        10 000204   300000 000001                    ADSC9   0,,PR3                   cn=0,n=1

     1661     7422    3               I=0;

   7422 10 000205   200012 450100                    STZ     I,,AUTO

     1662     7423    4               DO WHILE(I<KEY$->TEXT$C.LEN);

   7423 10 000206   000100 101500                    MRL     fill='000'O
        10 000207   400000 000001                    ADSC9   0,,PR4                   cn=0,n=1
        10 000210   200014 000004                    ADSC9   CHR+1,,AUTO              cn=0,n=4
        10 000211   200014 236100                    LDQ     CHR+1,,AUTO
        10 000212   200012 116100                    CMPQ    I,,AUTO
        10 000213   000261 604400 10                 TMOZ    s:7439

     1663     7424    4                  CHR = KEY$->TEXT$C_ARY.STRING(I);

   7424 10 000214   200011 470500                    LDP0    KEY$,,AUTO
        10 000215   200012 235100                    LDA     I,,AUTO
        10 000216   040100 100505                    MLR     fill='040'O
        10 000217   000000 200001                    ADSC9   0,A,PR0                  cn=1,n=1
PL6.E3A0      #018=VPD$GET_KEY_OR_NUM File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:40 Page:434  
        10 000220   200013 000001                    ADSC9   CHR,,AUTO                cn=0,n=1

     1664     7425    4                  IF CHR_VAL & '770'O ~='060'O

   7425 10 000221   400000 220003                    LDX0    -131072,DU
        10 000222   000224 710000 10                 TRA     s:7425+3
        10 000223   000000 220003                    LDX0    0,DU
        10 000224   000000 636010                    EAQ     0,X0
        10 000225   200014 756100                    STQ     CHR+1,,AUTO
        10 000226   200013 236100                    LDQ     CHR,,AUTO
        10 000227   777000 376003                    ANQ     -512,DU
        10 000230   200014 376100                    ANQ     CHR+1,,AUTO
        10 000231   000240 600000 10                 TZE     s:7435

     1665     7426    4                   THEN
     1666     7427    5                   DO;

     1667     7428    5                      CALL VPL$ERR_PROC(1,180,'04'O);

   7428 10 000232   000027 630400 11                 EPPR0   23
        10 000233   000021 631400 xsym               EPPR1   B_VECTNIL+17
        10 000234   000000 701000 xent               TSX1    VPL$ERR_PROC
        10 000235   000000 011000                    NOP     0

     1668     7429        /*E* ERROR:   VPD-00180
     1669     7430             MESSAGE: Bad octal key
     1670     7431        */
     1671     7432    5                      ALTRETURN;

   7432 10 000236   200010 221300                    LDX1  ! DEC_NUM+3,,AUTO
        10 000237   000000 702211                    TSX2  ! 0,X1

     1672     7433    5                      END;
     1673     7434    4                   ELSE
     1674     7435    4                     TO_KEY$->OCT_ARY.DIGIT(I) = CHR_VAL.VAL;

   7435 10 000240   200004 471500                    LDP1    @TO_KEY$,,AUTO
PL6.E3A0      #018=VPD$GET_KEY_OR_NUM File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:40 Page:435  
        10 000241   100000 473500                    LDP3    0,,PR1
        10 000242   200012 236100                    LDQ     I,,AUTO
        10 000243   000003 402007                    MPY     3,DL
        10 000244   000000 116003                    CMPQ    0,DU
        10 000245   000247 605000 10                 TPL     s:7435+7
        10 000246   000044 036003                    ADLQ    36,DU
        10 000247   003106 060500                    CSL     bolr='003'O
        10 000250   200013 060003                    BDSC    CHR,,AUTO                by=0,bit=6,n=3
        10 000251   300000 200003                    BDSC    0,Q,PR3                  by=1,bit=0,n=3

     1675     7436    4                  I = I+1;

   7436 10 000252   200012 054100                    AOS     I,,AUTO

     1676     7437    4                  END;

   7437 10 000253   000100 101500                    MRL     fill='000'O
        10 000254   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
        10 000255   200014 000004                    ADSC9   CHR+1,,AUTO              cn=0,n=4
        10 000256   200014 236100                    LDQ     CHR+1,,AUTO
        10 000257   200012 116100                    CMPQ    I,,AUTO
        10 000260   000214 605400 10                 TPNZ    s:7424

     1677     7438    3               END;

     1678     7439    2   END OCTAL_KEY;

   7439 10 000261   200010 221300                    LDX1  ! DEC_NUM+3,,AUTO
        10 000262   000001 702211                    TSX2  ! 1,X1

     1679     7440        %EJECT;
PL6.E3A0      #018=VPD$GET_KEY_OR_NUM File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:40 Page:436  
     1680     7441    1   QUOTE_KEY: PROC ALTRET;

   7441 10 000263   200010 741300       QUOTE_KEY    STX1  ! DEC_NUM+3,,AUTO

     1681     7442        /*I* NAME: QUOTE_KEY
     1682     7443             PURPOSE: To validate and store away the current quoted string style key.
     1683     7444             CALL: CALL QUOTE_KEY;
     1684     7445             DESCRIPTION: The current key is checked for length and the ALTRET
     1685     7446                          is taken if it is too long. If is is OK, it is stuffed
     1686     7447                          away.
     1687     7448        */
     1688     7449    2           IF KEY_BLOCK$->OUT$SYM.COUNT>510

   7449 10 000264   200003 470500                    LDP0    @KEY_BLOCK$,,AUTO
        10 000265   000000 471500                    LDP1    0,,PR0
        10 000266   100004 236100                    LDQ     4,,PR1
        10 000267   777000 376003                    ANQ     -512,DU
        10 000270   777000 116003                    CMPQ    -512,DU
        10 000271   000300 602000 10                 TNC     s:7459

     1689     7450    2            THEN
     1690     7451    3            DO;

     1691     7452    3               CALL VPL$ERR_PROC(1,120,'04'O); /* KEY TOO LONG                   */

   7452 10 000272   000033 630400 11                 EPPR0   27
        10 000273   000021 631400 xsym               EPPR1   B_VECTNIL+17
        10 000274   000000 701000 xent               TSX1    VPL$ERR_PROC
        10 000275   000000 011000                    NOP     0

     1692     7453        /*E* ERROR:   VPD-00120
     1693     7454             MESSAGE: Quoted key too long
     1694     7455        */
     1695     7456    3               ALTRETURN;

   7456 10 000276   200010 221300                    LDX1  ! DEC_NUM+3,,AUTO
        10 000277   000000 702211                    TSX2  ! 0,X1
PL6.E3A0      #018=VPD$GET_KEY_OR_NUM File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:40 Page:437  

     1696     7457    3               END;
     1697     7458    2            ELSE
     1698     7459    2              TO_KEY$->TEXT$C.LEN = KEY_BLOCK$->OUT$SYM.TEXTC$->TEXT$C.LEN;

   7459 10 000300   200004 473500                    LDP3    @TO_KEY$,,AUTO
        10 000301   300000 474500                    LDP4    0,,PR3
        10 000302   100003 475500                    LDP5    3,,PR1
        10 000303   000100 100500                    MLR     fill='000'O
        10 000304   500000 000001                    ADSC9   0,,PR5                   cn=0,n=1
        10 000305   400000 000001                    ADSC9   0,,PR4                   cn=0,n=1

     1699     7460    2           TO_KEY$->TEXT$C.STRING = KEY_BLOCK$->OUT$SYM.TEXTC$->TEXT$C.STRING;

   7460 10 000306   300000 471500                    LDP1    0,,PR3
        10 000307   000100 101500                    MRL     fill='000'O
        10 000310   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
        10 000311   200014 000002                    ADSC9   CHR+1,,AUTO              cn=0,n=2
        10 000312   200014 220100                    LDX0    CHR+1,,AUTO
        10 000313   000000 474500                    LDP4    0,,PR0
        10 000314   400003 475500                    LDP5    3,,PR4
        10 000315   000100 101500                    MRL     fill='000'O
        10 000316   500000 000001                    ADSC9   0,,PR5                   cn=0,n=1
        10 000317   200015 000002                    ADSC9   CHR+2,,AUTO              cn=0,n=2
        10 000320   200015 221100                    LDX1    CHR+2,,AUTO
        10 000321   040140 100540                    MLR     fill='040'O
        10 000322   500000 200011                    ADSC9   0,,PR5                   cn=1,n=*X1
        10 000323   100000 200010                    ADSC9   0,,PR1                   cn=1,n=*X0

     1700     7461    2   END QUOTE_KEY;

   7461 10 000324   200010 221300                    LDX1  ! DEC_NUM+3,,AUTO
        10 000325   000001 702211                    TSX2  ! 1,X1
     1701     7462    1   END VPD$GET_KEY_OR_NUM;
     1702     7463        %EOD;

PL6.E3A0      #018=VPD$GET_KEY_OR_NUM File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:40 Page:438  
--  Include file information  --

   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$GET_KEY_OR_NUM.
PL6.E3A0      #018=VPD$GET_KEY_OR_NUM File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:40 Page:439  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @KEY_BLOCK$                4-0-0/w PTR         r     1 @TO_KEY$
    13-0-0/c CHAR        r     1 CHR                       13-0-0/c STRC(9)     r     1 CHR_VAL
     5-0-0/w SBIN        r     1 DEC_NUM                   12-0-0/w SBIN        r     1 I
    11-0-0/w PTR         r     1 KEY$                      *0-0-0/w PTR         r     1 KEY_BLOCK$
    *0-0-0/w PTR         r     1 TO_KEY$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w EPTR        r     1 BREAK_MESSAGE_REPORTER

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN        r     1 B$UBIN                     0-0-0/b STRC        r     1 EDIT$KEY
     0-0-0/c STRC(12)    r     1 OCT_ARY                    0-0-0/w STRC(144)   r     1 OUT$BLK
     0-0-0/w ASTR(153)   r     1 OUT$SYM                    0-0-0/c ASTR(9)     r     1 TEXT$C
     0-0-0/c STRC(18)    r     1 TEXT$C_ARY                 0-0-0/c ASTR(9)     r     1 TEXT$C_BIT


   Procedure VPD$GET_KEY_OR_NUM requires 214 words for executable code.
   Procedure VPD$GET_KEY_OR_NUM requires 16 words of local(AUTO) storage.
PL6.E3A0      #018=VPD$GET_KEY_OR_NUM File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:40 Page:440  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #018=VPD$GET_KEY_OR_NUM File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:40 Page:441  
          MINI XREF LISTING

B$UBIN
      7097**DCL      7372<>CALL     7375>>IF
BAD_EKEY IN PROCEDURE EDIT_KEY
      7357**LABEL    7351--CALLALT
BAD_RECNUM IN PROCEDURE LOGICAL_REC_NUM
      7385**LABEL    7372--CALLALT
BREAK_LOC
      5224**DCL      5224--REDEF
CHR IN PROCEDURE OCTAL_KEY
      7402**DCL      7403--REDEF    7424<<ASSIGN
CHR_VAL IN PROCEDURE OCTAL_KEY
      7403**DCL      7425>>IF
CHR_VAL.VAL IN PROCEDURE OCTAL_KEY
      7405**DCL      7435>>ASSIGN
DEC_NUM
      7111**DCL      7350<<ASSIGN   7351<>CALL     7354>>ASSIGN
DEF_ICB.FID.STRING
      5822**DCL      5823--REDEF
DEV_ICB.FID.STRING
      5708**DCL      5709--REDEF
EDIT$KEY.KEY
      7110**DCL      7354<<ASSIGN
EDIT$KEY.LEN
      7109**DCL      7349<<ASSIGN
EDIT_KEY
      7340**PROC     7330--CALL
EI_KEY.KEY
      5920**DCL      5920--REDEF    5920--REDEF    5920--REDEF
EO_OCB.TYPE
      5420**DCL      5421--REDEF
FPT_CLOSE_EI.SN_
      6761**DCL      6761--REDEF
PL6.E3A0      #018=VPD$GET_KEY_OR_NUM File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:40 Page:442  
FPT_CLOSE_EI.UTL_
      6762**DCL      6762--REDEF
FPT_CLOSE_EI.V.EXPIRE#
      6776**DCL      6776--REDEF
FPT_CLOSE_EI.V.TYPE#
      6774**DCL      6774--REDEF
FPT_CLOSE_EI.V.XTNSIZE#
      6771**DCL      6771--REDEF    6773--REDEF
FPT_CLOSE_PTL.SN_
      6887**DCL      6887--REDEF
FPT_CLOSE_PTL.UTL_
      6888**DCL      6888--REDEF
FPT_CLOSE_PTL.V.EXPIRE#
      6902**DCL      6902--REDEF
FPT_CLOSE_PTL.V.TYPE#
      6900**DCL      6900--REDEF
FPT_CLOSE_PTL.V.XTNSIZE#
      6897**DCL      6897--REDEF    6899--REDEF
FPT_CLOSE_READ.SN_
      6803**DCL      6803--REDEF
FPT_CLOSE_READ.UTL_
      6804**DCL      6804--REDEF
FPT_CLOSE_READ.V.EXPIRE#
      6818**DCL      6818--REDEF
FPT_CLOSE_READ.V.TYPE#
      6816**DCL      6816--REDEF
FPT_CLOSE_READ.V.XTNSIZE#
      6813**DCL      6813--REDEF    6815--REDEF
FPT_CLOSE_SI.SN_
      6971**DCL      6971--REDEF
FPT_CLOSE_SI.UTL_
      6972**DCL      6972--REDEF
FPT_CLOSE_SI.V.EXPIRE#
      6986**DCL      6986--REDEF
FPT_CLOSE_SI.V.TYPE#
      6984**DCL      6984--REDEF
PL6.E3A0      #018=VPD$GET_KEY_OR_NUM File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:40 Page:443  
FPT_CLOSE_SI.V.XTNSIZE#
      6981**DCL      6981--REDEF    6983--REDEF
FPT_CLOSE_STD.SN_
      6929**DCL      6929--REDEF
FPT_CLOSE_STD.UTL_
      6930**DCL      6930--REDEF
FPT_CLOSE_STD.V.EXPIRE#
      6944**DCL      6944--REDEF
FPT_CLOSE_STD.V.TYPE#
      6942**DCL      6942--REDEF
FPT_CLOSE_STD.V.XTNSIZE#
      6939**DCL      6939--REDEF    6941--REDEF
FPT_CLSEI_FT.SN_
      6845**DCL      6845--REDEF
FPT_CLSEI_FT.UTL_
      6846**DCL      6846--REDEF
FPT_CLSEI_FT.V.EXPIRE#
      6860**DCL      6860--REDEF
FPT_CLSEI_FT.V.TYPE#
      6858**DCL      6858--REDEF
FPT_CLSEI_FT.V.XTNSIZE#
      6855**DCL      6855--REDEF    6857--REDEF
FPT_OPEN_EI.ACSVEH_
      6416**DCL      6417--REDEF
FPT_OPEN_EI.ALTKEYS_
      6422**DCL      6423--REDEF    6423--REDEF
FPT_OPEN_EI.HDR_
      6421**DCL      6422--REDEF
FPT_OPEN_EI.TAB_
      6420**DCL      6421--REDEF
FPT_OPEN_EI.UHL_
      6414**DCL      6415--REDEF    6415--REDEF
FPT_OPEN_EI.V.FSN#
      6454**DCL      6454--REDEF    6454--REDEF
FPT_OPEN_EI.WSN_
      6420**DCL      6420--REDEF
PL6.E3A0      #018=VPD$GET_KEY_OR_NUM File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:40 Page:444  
FPT_OPEN_EI_SAVE.ACSVEH_
      6525**DCL      6526--REDEF
FPT_OPEN_EI_SAVE.ALTKEYS_
      6531**DCL      6532--REDEF    6532--REDEF
FPT_OPEN_EI_SAVE.HDR_
      6530**DCL      6531--REDEF
FPT_OPEN_EI_SAVE.TAB_
      6529**DCL      6530--REDEF
FPT_OPEN_EI_SAVE.UHL_
      6523**DCL      6524--REDEF    6524--REDEF
FPT_OPEN_EI_SAVE.V.FSN#
      6563**DCL      6563--REDEF    6563--REDEF
FPT_OPEN_EI_SAVE.WSN_
      6529**DCL      6529--REDEF
FPT_OPEN_OUT.ACSVEH_
      6307**DCL      6308--REDEF
FPT_OPEN_OUT.ALTKEYS_
      6313**DCL      6314--REDEF    6314--REDEF
FPT_OPEN_OUT.HDR_
      6312**DCL      6313--REDEF
FPT_OPEN_OUT.TAB_
      6311**DCL      6312--REDEF
FPT_OPEN_OUT.UHL_
      6305**DCL      6306--REDEF    6306--REDEF
FPT_OPEN_OUT.V.FSN#
      6345**DCL      6345--REDEF    6345--REDEF
FPT_OPEN_OUT.WSN_
      6311**DCL      6311--REDEF
FPT_OPEN_OUT_SAVE.ACSVEH_
      6198**DCL      6199--REDEF
FPT_OPEN_OUT_SAVE.ALTKEYS_
      6204**DCL      6205--REDEF    6205--REDEF
FPT_OPEN_OUT_SAVE.HDR_
      6203**DCL      6204--REDEF
FPT_OPEN_OUT_SAVE.TAB_
      6202**DCL      6203--REDEF
PL6.E3A0      #018=VPD$GET_KEY_OR_NUM File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:40 Page:445  
FPT_OPEN_OUT_SAVE.UHL_
      6196**DCL      6197--REDEF    6197--REDEF
FPT_OPEN_OUT_SAVE.V.FSN#
      6236**DCL      6236--REDEF    6236--REDEF
FPT_OPEN_OUT_SAVE.WSN_
      6202**DCL      6202--REDEF
FPT_READ_STD.STATION_
      6626**DCL      6627--REDEF
FPT_READ_STD.V.DVBYTE.REREAD#
      6638**DCL      6638--REDEF
FPT_READ_STD.V.INDX#
      6636**DCL      6636--REDEF
FPT_READ_UC.STATION_
      6587**DCL      6588--REDEF
FPT_READ_UC.V.DVBYTE.REREAD#
      6599**DCL      6599--REDEF
FPT_READ_UC.V.INDX#
      6597**DCL      6597--REDEF
FPT_WRITE_ME.STATION_
      6695**DCL      6695--REDEF
FPT_WRITE_ME.V.DVBYTE.VFC#
      6702**DCL      6702--REDEF
FPT_WRITE_OUT.STATION_
      6726**DCL      6726--REDEF
FPT_WRITE_OUT.V.DVBYTE.VFC#
      6733**DCL      6733--REDEF
FPT_WRITE_UC.STATION_
      6664**DCL      6664--REDEF
FPT_WRITE_UC.V.DVBYTE.VFC#
      6671**DCL      6671--REDEF
FROM_SN.SN
      5570**DCL      5571--REDEF
GETCMD.OUT$
      4777**DCL      4783--REDEF
GK_ALT
      7338**LABEL    7326--CALLALT  7328--CALLALT  7330--CALLALT  7332--CALLALT
PL6.E3A0      #018=VPD$GET_KEY_OR_NUM File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:40 Page:446  
I IN PROCEDURE OCTAL_KEY
      7401**DCL      7422<<ASSIGN   7423>>DOWHILE  7424>>ASSIGN   7435>>ASSIGN   7436<<ASSIGN   7436>>ASSIGN
ICB.FID.STRING
      5594**DCL      5595--REDEF
IFSFA_PARAM.EOMCHAR#
      5949**DCL      5950--REDEF
IFSFA_PARAM.SIG1
      5943**DCL      5943--REDEF
IFSFA_PARAM.SIG2
      5943**DCL      5944--REDEF
IN_RES
      5516**DCL      5516--REDEF
IN_SN.SN
      5532**DCL      5533--REDEF
KEY$ IN PROCEDURE OCTAL_KEY
      7400**DCL      7406<<ASSIGN   7407>>IF       7421>>ASSIGN   7423>>DOWHILE  7424>>ASSIGN
KEY_BLOCK$
      7101**DCL         6--PROC     7324>>DOCASE   7351<>CALL     7372>>CALL     7406>>ASSIGN   7449>>IF
      7459>>ASSIGN   7460>>ASSIGN   7460>>ASSIGN
LOGICAL_REC_NUM
      7364**PROC     7332--CALL
NORM$KEY.KEY
      7105**DCL      7106--REDEF
OCB.TYPE
      5278**DCL      5279--REDEF
OCTAL_KEY
      7392**PROC     7326--CALL
OCT_ARY.DIGIT
      7100**DCL      7435<<ASSIGN
OFSFA_PARAM.EOMCHAR#
      5979**DCL      5980--REDEF
OFSFA_PARAM.SIG1
      5973**DCL      5973--REDEF
OFSFA_PARAM.SIG2
      5973**DCL      5974--REDEF
OUT$BLK.CODE
PL6.E3A0      #018=VPD$GET_KEY_OR_NUM File=VPD$UTIL.:E05TSI                      WED 07/30/97 07:40 Page:447  
      7018**DCL      7324>>DOCASE
OUT$BLK.SUBLK$
      7043**DCL      7372<>CALL     7406>>ASSIGN   7406>>ASSIGN
OUT$SYM.COUNT
      7079**DCL      7082--IMP-SIZ  7449>>IF
OUT$SYM.TEXTC$
      7074**DCL      7459>>ASSIGN   7460>>ASSIGN   7460>>ASSIGN
OUT_SN.SN
      5550**DCL      5551--REDEF
QUOTE_KEY
      7441**PROC     7328--CALL
SPEC_BUF
      5228**DCL      5228--REDEF
TEXT$C
      7087**DCL      7419<<ASSIGN
TEXT$C.LEN
      7088**DCL      7089--IMP-SIZ  7407>>IF       7418<<ASSIGN   7419>>ASSIGN   7421<<ASSIGN   7421>>ASSIGN
      7423>>DOWHILE  7459<<ASSIGN   7459>>ASSIGN   7460>>ASSIGN   7460>>ASSIGN
TEXT$C.STRING
      7089**DCL      7460<<ASSIGN   7460>>ASSIGN
TEXT$C_ARY.STRING
      7096**DCL      7424>>ASSIGN
TEXT$C_BIT.LEN
      7091**DCL      7093--IMP-SIZ
TO_KEY$
      7102**DCL         6--PROC     7349>>ASSIGN   7354>>ASSIGN   7372>>CALL     7375>>IF       7418>>ASSIGN
      7419>>ASSIGN   7419>>ASSIGN   7421>>ASSIGN   7435>>ASSIGN   7459>>ASSIGN   7460>>ASSIGN   7460>>ASSIGN
VPD$DECI_MUNGE
      7315**DCL-ENT  7351--CALL
VPD$TEXTC_CHARBIN
      7198**DCL-ENT  7372--CALL
VPL$ERR_PROC
      7298**DCL-ENT  7357--CALL     7378--CALL     7385--CALL     7410--CALL     7428--CALL     7452--CALL

PL6.E3A0      #019=VPD$GET_SPEC_BUF File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:41 Page:448  
     1703        1        /*T***********************************************************/
     1704        2        /*T*                                                         */
     1705        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1706        4        /*T*                                                         */
     1707        5        /*T***********************************************************/
     1708        6        VPD$GET_SPEC_BUF: PROC(EI,TIME);
     1709        7        /*D* NAME: VPD$GET_SPEC_BUF
     1710        8             CALL: CALL VPD$GET_SPEC_BUF(EI,TIME);
     1711        9             DESCRIPTION: This procedure assimilates the information found in
     1712       10                          the fields returned from M$FID and ICB.SPEC_TYPE into
     1713       11                          SPEC_BUF, a TEXTC buffer, spelling out the current input
     1714       12                          specification if EI=0, otherwise it uses the information
     1715       13                          in M$EI. If TIME=1, the buffer is preceeded with the
     1716       14                          current date and time.
     1717       15        */
     1718       16        %INCLUDE VP_DATA_R;
     1719     7003        %FPT_TIME(FPTN = FPT_TIME,
     1720     7004                  SOURCE = CLOCK,
     1721     7005                  DEST = EXT,
     1722     7006                  TIME = SPEC.TIM,
     1723     7007                  DATE = SPEC.TODAY,
     1724     7008                  STCLASS = CONSTANT);
     1725     7027        %FPT_UNFID(FPTN = FPT_UNFID,
     1726     7028                   NAME = IN_NAME,
     1727     7029                   ACCT = IN_ACCT,
     1728     7030                   SN   = IN_SN,
     1729     7031                   ASN  = IN_ASN,
     1730     7032                   WSN  = IN_WSN,
     1731     7033                   FORCE = YES,
     1732     7034                   STCLASS = STATIC);
     1733     7052    1   DCL EI SBIN WORD;
     1734     7053    1   DCL TIME SBIN WORD;
     1735     7054    1   DCL LEN SBIN;
     1736     7055 S      %INCLUDE B$JIT_C;
     1737     7056        %B$JIT0;
     1738     7145    1         2 * BIT(1);                       /* Rest of JIT not needed             */
     1739     7146    1           SPEC_BUF.STRING = ' ';
PL6.E3A0      #019=VPD$GET_SPEC_BUF File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:41 Page:449  
     1740     7147    1           IF TIME=1
     1741     7148    2            THEN DO;
     1742     7149    2               IF TEST_MODE=0
     1743     7150    2                THEN
     1744     7151    2                  CALL M$TIME(FPT_TIME);
     1745     7152    2                ELSE
     1746     7153    2                  SPEC_BUF.STRING = 'TEST-MODE-DATE';
     1747     7154    2               LEN = 17;
     1748     7155    2               FPT_UNFID.TEXTFID_ = VECTOR(SPEC.FID);
     1749     7156    2               END;
     1750     7157    2            ELSE DO;
     1751     7158    2               LEN = 0;
     1752     7159    2               FPT_UNFID.TEXTFID_ = VECTOR(SPEC_BUF.STRING);
     1753     7160    2               END;
     1754     7161    1           IF EI=1
     1755     7162    1            THEN
     1756     7163    1              FPT_UNFID.V.DCB# = DCBNUM(M$EI);
     1757     7164    2            ELSE DO;
     1758     7165    2               FPT_UNFID.V.DCB# = 0;
     1759     7166    2               IF RESULTS_FID_IN.RES       /* To fix M$FID SCRUB problem         */
     1760     7167    2                THEN
     1761     7168    2                  FPT_UNFID.RES_ = VECTOR(IN_RES);
     1762     7169    2                ELSE
     1763     7170    2                  FPT_UNFID.RES_ = VECTOR(NIL);
     1764     7171    2               FPT_UNFID.V.FORCE# ='1'B;
     1765     7172    2               END;
     1766     7173    1           CALL M$UNFID(FPT_UNFID) ALTRET(IGNORE);
     1767     7174    1   IGNORE:
     1768     7175    1           CALL INDEX(LEN,' ',SPEC_BUF.STRING,LEN);
     1769     7176    1           IF EI=0 AND ICB.SPEC_TYPE=3     /* Sub range                          */
     1770     7177    2            THEN DO;
     1771     7178    2               CALL INSERT(SPEC_BUF.STRING,LEN,,' - ',ICB.NAME_RANGE_END);
     1772     7179    2               IF ICB.NAME_RANGE_END=BITASC('777'O)
     1773     7180    2                THEN
     1774     7181    2                  LEN = LEN+2;
     1775     7182    2                ELSE
     1776     7183    2                  CALL INDEX(LEN,' ',SPEC_BUF.STRING,LEN+3);
PL6.E3A0      #019=VPD$GET_SPEC_BUF File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:41 Page:450  
     1777     7184    2               END;
     1778     7185    1           SPEC_BUF.LEN = LEN;
     1779     7186    1   END VPD$GET_SPEC_BUF;
     1780     7187        %EOD;

PL6.E3A0      #019=VPD$GET_SPEC_BUF File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:41 Page:451  
--  Include file information  --

   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$GET_SPEC_BUF.

   Procedure VPD$GET_SPEC_BUF requires 100 words for executable code.
   Procedure VPD$GET_SPEC_BUF requires 6 words of local(AUTO) storage.

PL6.E3A0      #019=VPD$GET_SPEC_BUF File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:41 Page:452  

 Object Unit name= VPD$GET_SPEC_BUF                           File name= VPD$UTIL.:E05TOU
 UTS= JUL 30 '97 07:41:47.20 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$EI
    2   DCB   even  none     0      0  M$EO
    3   DCB   even  none     0      0  M$EO1
    4   DCB   even  none     0      0  M$ME
    5   DCB   even  none     0      0  M$SI
    6   DCB   even  none     0      0  M$READFILE
    7   DCB   even  none     0      0  M$DO
    8   DCB   even  none     0      0  M$STD1
    9   DCB   even  none     0      0  M$SORT1
   10  RoData even  UTS     17     21  VPD$GET_SPEC_BUF
   11   Data  even  none    22     26  VPD$GET_SPEC_BUF
   12   Proc  even  none   100    144  VPD$GET_SPEC_BUF
   13  RoData even  none     9     11  VPD$GET_SPEC_BUF

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    12      0   yes            yes      Std        2  VPD$GET_SPEC_BUF
PL6.E3A0      #019=VPD$GET_SPEC_BUF File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:41 Page:453  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_2
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  TEST_MODE                             BREAK_LOC
     BREAK_MESSAGE_REPORTER                SPEC_BUF                              IN_NAME
     IN_ACCT                               IN_RES                                IN_SN
     IN_WSN                                IN_ASN                                ICB
     M$EI                                  M$EO                                  M$EO1
     M$ME                                  M$SI                                  M$READFILE
     M$DO                                  M$STD1                                M$SORT1
     B$JIT$                                RESULTS_FID_IN                        B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #019=VPD$GET_SPEC_BUF File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:41 Page:454  


     1703        1        /*T***********************************************************/
     1704        2        /*T*                                                         */
     1705        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1706        4        /*T*                                                         */
     1707        5        /*T***********************************************************/
     1708        6        VPD$GET_SPEC_BUF: PROC(EI,TIME);

      6 12 000000   000000 700200 xent  VPD$GET_SPE* TSX0  ! X66_AUTO_2
        12 000001   000006 000002                    ZERO    6,2

     1709        7        /*D* NAME: VPD$GET_SPEC_BUF
     1710        8             CALL: CALL VPD$GET_SPEC_BUF(EI,TIME);
     1711        9             DESCRIPTION: This procedure assimilates the information found in
     1712       10                          the fields returned from M$FID and ICB.SPEC_TYPE into
     1713       11                          SPEC_BUF, a TEXTC buffer, spelling out the current input
     1714       12                          specification if EI=0, otherwise it uses the information
     1715       13                          in M$EI. If TIME=1, the buffer is preceeded with the
     1716       14                          current date and time.
     1717       15        */
     1718       16        %INCLUDE VP_DATA_R;
     1719     7003        %FPT_TIME(FPTN = FPT_TIME,
     1720     7004                  SOURCE = CLOCK,
     1721     7005                  DEST = EXT,
     1722     7006                  TIME = SPEC.TIM,
     1723     7007                  DATE = SPEC.TODAY,
     1724     7008                  STCLASS = CONSTANT);
     1725     7027        %FPT_UNFID(FPTN = FPT_UNFID,
     1726     7028                   NAME = IN_NAME,
     1727     7029                   ACCT = IN_ACCT,
     1728     7030                   SN   = IN_SN,
     1729     7031                   ASN  = IN_ASN,
     1730     7032                   WSN  = IN_WSN,
     1731     7033                   FORCE = YES,
     1732     7034                   STCLASS = STATIC);
     1733     7052    1   DCL EI SBIN WORD;
     1734     7053    1   DCL TIME SBIN WORD;
PL6.E3A0      #019=VPD$GET_SPEC_BUF File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:41 Page:455  
     1735     7054    1   DCL LEN SBIN;
     1736     7055 S      %INCLUDE B$JIT_C;
     1737     7056        %B$JIT0;
     1738     7145    1         2 * BIT(1);                       /* Rest of JIT not needed             */
     1739     7146    1           SPEC_BUF.STRING = ' ';

   7146 12 000002   040000 100400                    MLR     fill='040'O
        12 000003   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
        12 000004   000000 200213 xsym               ADSC9   SPEC_BUF                 cn=1,n=139

     1740     7147    1           IF TIME=1

   7147 12 000005   200004 470500                    LDP0    @TIME,,AUTO
        12 000006   000000 235100                    LDA     0,,PR0
        12 000007   000001 115007                    CMPA    1,DL
        12 000010   000027 601000 12                 TNZ     s:7158

     1741     7148    2            THEN DO;

     1742     7149    2               IF TEST_MODE=0

   7149 12 000011   000000 236000 xsym               LDQ     TEST_MODE
        12 000012   000017 601000 12                 TNZ     s:7153

     1743     7150    2                THEN
     1744     7151    2                  CALL M$TIME(FPT_TIME);

   7151 12 000013   000000 630400 10                 EPPR0   FPT_TIME
        12 000014   020004 713400                    CLIMB   8196
        12 000015   402000 401760                    pmme    nvectors=5
        12 000016   000022 710000 12                 TRA     s:7154

     1745     7152    2                ELSE
     1746     7153    2                  SPEC_BUF.STRING = 'TEST-MODE-DATE';

   7153 12 000017   040000 100400                    MLR     fill='040'O
        12 000020   000014 000016 10                 ADSC9   FPT_TIME+12              cn=0,n=14
PL6.E3A0      #019=VPD$GET_SPEC_BUF File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:41 Page:456  
        12 000021   000000 200213 xsym               ADSC9   SPEC_BUF                 cn=1,n=139

     1747     7154    2               LEN = 17;

   7154 12 000022   000021 235007                    LDA     17,DL
        12 000023   200005 755100                    STA     LEN,,AUTO

     1748     7155    2               FPT_UNFID.TEXTFID_ = VECTOR(SPEC.FID);

   7155 12 000024   000000 237000 13                 LDAQ    0
        12 000025   000002 757000 11                 STAQ    FPT_UNFID+2

     1749     7156    2               END;

   7156 12 000026   000032 710000 12                 TRA     s:7161

     1750     7157    2            ELSE DO;

     1751     7158    2               LEN = 0;

   7158 12 000027   200005 450100                    STZ     LEN,,AUTO

     1752     7159    2               FPT_UNFID.TEXTFID_ = VECTOR(SPEC_BUF.STRING);

   7159 12 000030   000002 237000 13                 LDAQ    2
        12 000031   000002 757000 11                 STAQ    FPT_UNFID+2

     1753     7160    2               END;

     1754     7161    1           IF EI=1

   7161 12 000032   200003 470500                    LDP0    @EI,,AUTO
        12 000033   000000 235100                    LDA     0,,PR0
        12 000034   000001 115007                    CMPA    1,DL
        12 000035   000042 601000 12                 TNZ     s:7165

     1755     7162    1            THEN
PL6.E3A0      #019=VPD$GET_SPEC_BUF File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:41 Page:457  
     1756     7163    1              FPT_UNFID.V.DCB# = DCBNUM(M$EI);

   7163 12 000036   000000 236007 xsym               LDQ     M$EI,DL
        12 000037   000000 620006                    EAX0    0,QL
        12 000040   000024 740000 11                 STX0    FPT_UNFID+20
        12 000041   000056 710000 12                 TRA     s:7173

     1757     7164    2            ELSE DO;

     1758     7165    2               FPT_UNFID.V.DCB# = 0;

   7165 12 000042   000000 220003                    LDX0    0,DU
        12 000043   000024 740000 11                 STX0    FPT_UNFID+20

     1759     7166    2               IF RESULTS_FID_IN.RES       /* To fix M$FID SCRUB problem         */

   7166 12 000044   000000 236000 xsym               LDQ     RESULTS_FID_IN
        12 000045   004000 316003                    CANQ    2048,DU
        12 000046   000052 600000 12                 TZE     s:7170

     1760     7167    2                THEN
     1761     7168    2                  FPT_UNFID.RES_ = VECTOR(IN_RES);

   7168 12 000047   000004 237000 13                 LDAQ    4
        12 000050   000020 757000 11                 STAQ    FPT_UNFID+16
        12 000051   000054 710000 12                 TRA     s:7171

     1762     7169    2                ELSE
     1763     7170    2                  FPT_UNFID.RES_ = VECTOR(NIL);

   7170 12 000052   000006 237000 13                 LDAQ    6
        12 000053   000020 757000 11                 STAQ    FPT_UNFID+16

     1764     7171    2               FPT_UNFID.V.FORCE# ='1'B;

   7171 12 000054   400000 236007                    LDQ     -131072,DL
        12 000055   000024 256000 11                 ORSQ    FPT_UNFID+20
PL6.E3A0      #019=VPD$GET_SPEC_BUF File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:41 Page:458  

     1765     7172    2               END;

     1766     7173    1           CALL M$UNFID(FPT_UNFID) ALTRET(IGNORE);

   7173 12 000056   000000 630400 11                 EPPR0   FPT_UNFID
        12 000057   420021 713400                    CLIMB   alt,+8209
        12 000060   404400 401760                    pmme    nvectors=10
        12 000061   000062 702000 12                 TSX2    IGNORE

     1767     7174    1   IGNORE:
     1768     7175    1           CALL INDEX(LEN,' ',SPEC_BUF.STRING,LEN);

   7175 12 000062   200005 720100       IGNORE       LXL0    LEN,,AUTO
        12 000063   777564 620010                    EAX0    -140,X0
        12 000064   777777 660003                    ERX0    -1,DU
        12 000065   200005 236100                    LDQ     LEN,,AUTO
        12 000066   200005 235100                    LDA     LEN,,AUTO
        12 000067   000000 124445                    SCM     mask='000'O
        12 000070   000000 200010 xsym               ADSC9   SPEC_BUF,A               cn=1,n=*X0
        12 000071   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
        12 000072   200005 000100                    ARG     LEN,,AUTO
        12 000073   200005 056100                    ASQ     LEN,,AUTO

     1769     7176    1           IF EI=0 AND ICB.SPEC_TYPE=3     /* Sub range                          */

   7176 12 000074   200003 470500                    LDP0    @EI,,AUTO
        12 000075   000000 235100                    LDA     0,,PR0
        12 000076   000140 601000 12                 TNZ     s:7185
        12 000077   000017 236000 xsym               LDQ     ICB+15
        12 000100   000003 116007                    CMPQ    3,DL
        12 000101   000140 601000 12                 TNZ     s:7185

     1770     7177    2            THEN DO;

     1771     7178    2               CALL INSERT(SPEC_BUF.STRING,LEN,,' - ',ICB.NAME_RANGE_END);

PL6.E3A0      #019=VPD$GET_SPEC_BUF File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:41 Page:459  
   7178 12 000102   200005 720100                    LXL0    LEN,,AUTO
        12 000103   777564 620010                    EAX0    -140,X0
        12 000104   777777 660003                    ERX0    -1,DU
        12 000105   200005 235100                    LDA     LEN,,AUTO
        12 000106   040045 100400                    MLR     fill='040'O
        12 000107   000020 000003 10                 ADSC9   FPT_TIME+16              cn=0,n=3
        12 000110   000000 200010 xsym               ADSC9   SPEC_BUF,A               cn=1,n=*X0
        12 000111   200005 236100                    LDQ     LEN,,AUTO
        12 000112   000210 116007                    CMPQ    136,DL
        12 000113   000121 605000 12                 TPL     s:7179
        12 000114   777567 621006                    EAX1    -137,QL
        12 000115   777777 661003                    ERX1    -1,DU
        12 000116   040046 100400                    MLR     fill='040'O
        12 000117   000140 000037 xsym               ADSC9   ICB+96                   cn=0,n=31
        12 000120   000001 000011 xsym               ADSC9   SPEC_BUF+1,Q             cn=0,n=*X1

     1772     7179    2               IF ICB.NAME_RANGE_END=BITASC('777'O)

   7179 12 000121   040000 106400                    CMPC    fill='040'O
        12 000122   000140 000037 xsym               ADSC9   ICB+96                   cn=0,n=31
        12 000123   000010 000001 13                 ADSC9   8                        cn=0,n=1
        12 000124   000130 601000 12                 TNZ     s:7183

     1773     7180    2                THEN
     1774     7181    2                  LEN = LEN+2;

   7181 12 000125   000002 236007                    LDQ     2,DL
        12 000126   200005 056100                    ASQ     LEN,,AUTO
        12 000127   000140 710000 12                 TRA     s:7185

     1775     7182    2                ELSE
     1776     7183    2                  CALL INDEX(LEN,' ',SPEC_BUF.STRING,LEN+3);

   7183 12 000130   777567 621006                    EAX1    -137,QL
        12 000131   777777 661003                    ERX1    -1,DU
        12 000132   000003 036007                    ADLQ    3,DL
        12 000133   000000 124445                    SCM     mask='000'O
PL6.E3A0      #019=VPD$GET_SPEC_BUF File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:41 Page:460  
        12 000134   000001 000011 xsym               ADSC9   SPEC_BUF+1,A             cn=0,n=*X1
        12 000135   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
        12 000136   200005 000100                    ARG     LEN,,AUTO
        12 000137   200005 056100                    ASQ     LEN,,AUTO

     1777     7184    2               END;

     1778     7185    1           SPEC_BUF.LEN = LEN;

   7185 12 000140   200005 236100                    LDQ     LEN,,AUTO
        12 000141   000033 736000                    QLS     27
        12 000142   000000 552040 xsym               STBQ    SPEC_BUF,'40'O

     1779     7186    1   END VPD$GET_SPEC_BUF;

   7186 12 000143   000000 702200 xent               TSX2  ! X66_ARET
     1780     7187        %EOD;

PL6.E3A0      #019=VPD$GET_SPEC_BUF File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:41 Page:461  
--  Include file information  --

   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$GET_SPEC_BUF.
PL6.E3A0      #019=VPD$GET_SPEC_BUF File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:41 Page:462  

 **** Variables and constants ****

  ****  Section 010 RoData VPD$GET_SPEC_BUF

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(432)   r     1 FPT_TIME

  ****  Section 011  Data  VPD$GET_SPEC_BUF

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(792)   r     1 FPT_UNFID

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @EI                        4-0-0/w PTR         r     1 @TIME
    *0-0-0/w SBIN        r     1 EI                         5-0-0/w SBIN        r     1 LEN
    *0-0-0/w SBIN        r     1 TIME

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$
     0-0-0/w EPTR        r     1 BREAK_MESSAGE_REPORTER
     0-0-0/d STRC(5868)  r     1 ICB                        0-0-0/c CHAR(8)     r     1 IN_ACCT
     0-0-0/b UBIN(9)     r     1 IN_ASN                     0-0-0/c STRC(288)   r     1 IN_NAME
     0-0-0/c CHAR(4)     r     1 IN_RES                     0-0-0/w STRC(1116)  r     1 IN_SN
     0-0-0/c CHAR(8)     r     1 IN_WSN                     0-0-0/d STRC(324)   r     1 RESULTS_FID_IN
     0-0-0/c STRC(1260)  r     1 SPEC                       0-0-0/c STRC(1260)  r     1 SPEC_BUF
PL6.E3A0      #019=VPD$GET_SPEC_BUF File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:41 Page:463  
     0-0-0/w SBIN        r     1 TEST_MODE

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0N  NULL        r     1 M$EI


   Procedure VPD$GET_SPEC_BUF requires 100 words for executable code.
   Procedure VPD$GET_SPEC_BUF requires 6 words of local(AUTO) storage.
PL6.E3A0      #019=VPD$GET_SPEC_BUF File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:41 Page:464  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #019=VPD$GET_SPEC_BUF File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:41 Page:465  
          MINI XREF LISTING

B$JIT.ERR.MID
      7063**DCL      7063--REDEF
B$JIT$
      5988**DCL      7057--IMP-PTR
BREAK_LOC
      5223**DCL      5223--REDEF
DEF_ICB.FID.STRING
      5821**DCL      5822--REDEF
DEV_ICB.FID.STRING
      5707**DCL      5708--REDEF
EI
      7052**DCL         6--PROC     7161>>IF       7176>>IF
EI_KEY.KEY
      5919**DCL      5919--REDEF    5919--REDEF    5919--REDEF
EO_OCB.TYPE
      5419**DCL      5420--REDEF
FPT_CLOSE_EI.SN_
      6760**DCL      6760--REDEF
FPT_CLOSE_EI.UTL_
      6761**DCL      6761--REDEF
FPT_CLOSE_EI.V.EXPIRE#
      6775**DCL      6775--REDEF
FPT_CLOSE_EI.V.TYPE#
      6773**DCL      6773--REDEF
FPT_CLOSE_EI.V.XTNSIZE#
      6770**DCL      6770--REDEF    6772--REDEF
FPT_CLOSE_PTL.SN_
      6886**DCL      6886--REDEF
FPT_CLOSE_PTL.UTL_
      6887**DCL      6887--REDEF
FPT_CLOSE_PTL.V.EXPIRE#
      6901**DCL      6901--REDEF
PL6.E3A0      #019=VPD$GET_SPEC_BUF File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:41 Page:466  
FPT_CLOSE_PTL.V.TYPE#
      6899**DCL      6899--REDEF
FPT_CLOSE_PTL.V.XTNSIZE#
      6896**DCL      6896--REDEF    6898--REDEF
FPT_CLOSE_READ.SN_
      6802**DCL      6802--REDEF
FPT_CLOSE_READ.UTL_
      6803**DCL      6803--REDEF
FPT_CLOSE_READ.V.EXPIRE#
      6817**DCL      6817--REDEF
FPT_CLOSE_READ.V.TYPE#
      6815**DCL      6815--REDEF
FPT_CLOSE_READ.V.XTNSIZE#
      6812**DCL      6812--REDEF    6814--REDEF
FPT_CLOSE_SI.SN_
      6970**DCL      6970--REDEF
FPT_CLOSE_SI.UTL_
      6971**DCL      6971--REDEF
FPT_CLOSE_SI.V.EXPIRE#
      6985**DCL      6985--REDEF
FPT_CLOSE_SI.V.TYPE#
      6983**DCL      6983--REDEF
FPT_CLOSE_SI.V.XTNSIZE#
      6980**DCL      6980--REDEF    6982--REDEF
FPT_CLOSE_STD.SN_
      6928**DCL      6928--REDEF
FPT_CLOSE_STD.UTL_
      6929**DCL      6929--REDEF
FPT_CLOSE_STD.V.EXPIRE#
      6943**DCL      6943--REDEF
FPT_CLOSE_STD.V.TYPE#
      6941**DCL      6941--REDEF
FPT_CLOSE_STD.V.XTNSIZE#
      6938**DCL      6938--REDEF    6940--REDEF
FPT_CLSEI_FT.SN_
      6844**DCL      6844--REDEF
PL6.E3A0      #019=VPD$GET_SPEC_BUF File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:41 Page:467  
FPT_CLSEI_FT.UTL_
      6845**DCL      6845--REDEF
FPT_CLSEI_FT.V.EXPIRE#
      6859**DCL      6859--REDEF
FPT_CLSEI_FT.V.TYPE#
      6857**DCL      6857--REDEF
FPT_CLSEI_FT.V.XTNSIZE#
      6854**DCL      6854--REDEF    6856--REDEF
FPT_OPEN_EI.ACSVEH_
      6415**DCL      6416--REDEF
FPT_OPEN_EI.ALTKEYS_
      6421**DCL      6422--REDEF    6422--REDEF
FPT_OPEN_EI.HDR_
      6420**DCL      6421--REDEF
FPT_OPEN_EI.TAB_
      6419**DCL      6420--REDEF
FPT_OPEN_EI.UHL_
      6413**DCL      6414--REDEF    6414--REDEF
FPT_OPEN_EI.V.FSN#
      6453**DCL      6453--REDEF    6453--REDEF
FPT_OPEN_EI.WSN_
      6419**DCL      6419--REDEF
FPT_OPEN_EI_SAVE.ACSVEH_
      6524**DCL      6525--REDEF
FPT_OPEN_EI_SAVE.ALTKEYS_
      6530**DCL      6531--REDEF    6531--REDEF
FPT_OPEN_EI_SAVE.HDR_
      6529**DCL      6530--REDEF
FPT_OPEN_EI_SAVE.TAB_
      6528**DCL      6529--REDEF
FPT_OPEN_EI_SAVE.UHL_
      6522**DCL      6523--REDEF    6523--REDEF
FPT_OPEN_EI_SAVE.V.FSN#
      6562**DCL      6562--REDEF    6562--REDEF
FPT_OPEN_EI_SAVE.WSN_
      6528**DCL      6528--REDEF
PL6.E3A0      #019=VPD$GET_SPEC_BUF File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:41 Page:468  
FPT_OPEN_OUT.ACSVEH_
      6306**DCL      6307--REDEF
FPT_OPEN_OUT.ALTKEYS_
      6312**DCL      6313--REDEF    6313--REDEF
FPT_OPEN_OUT.HDR_
      6311**DCL      6312--REDEF
FPT_OPEN_OUT.TAB_
      6310**DCL      6311--REDEF
FPT_OPEN_OUT.UHL_
      6304**DCL      6305--REDEF    6305--REDEF
FPT_OPEN_OUT.V.FSN#
      6344**DCL      6344--REDEF    6344--REDEF
FPT_OPEN_OUT.WSN_
      6310**DCL      6310--REDEF
FPT_OPEN_OUT_SAVE.ACSVEH_
      6197**DCL      6198--REDEF
FPT_OPEN_OUT_SAVE.ALTKEYS_
      6203**DCL      6204--REDEF    6204--REDEF
FPT_OPEN_OUT_SAVE.HDR_
      6202**DCL      6203--REDEF
FPT_OPEN_OUT_SAVE.TAB_
      6201**DCL      6202--REDEF
FPT_OPEN_OUT_SAVE.UHL_
      6195**DCL      6196--REDEF    6196--REDEF
FPT_OPEN_OUT_SAVE.V.FSN#
      6235**DCL      6235--REDEF    6235--REDEF
FPT_OPEN_OUT_SAVE.WSN_
      6201**DCL      6201--REDEF
FPT_READ_STD.STATION_
      6625**DCL      6626--REDEF
FPT_READ_STD.V.DVBYTE.REREAD#
      6637**DCL      6637--REDEF
FPT_READ_STD.V.INDX#
      6635**DCL      6635--REDEF
FPT_READ_UC.STATION_
      6586**DCL      6587--REDEF
PL6.E3A0      #019=VPD$GET_SPEC_BUF File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:41 Page:469  
FPT_READ_UC.V.DVBYTE.REREAD#
      6598**DCL      6598--REDEF
FPT_READ_UC.V.INDX#
      6596**DCL      6596--REDEF
FPT_TIME
      7019**DCL      7151<>CALL
FPT_TIME.V
      7023**DCL      7019--DCLINIT
FPT_UNFID
      7045**DCL      7173<>CALL
FPT_UNFID.RES_
      7048**DCL      7168<<ASSIGN   7170<<ASSIGN
FPT_UNFID.TEXTFID_
      7045**DCL      7155<<ASSIGN   7159<<ASSIGN
FPT_UNFID.V
      7049**DCL      7045--DCLINIT
FPT_UNFID.V.DCB#
      7049**DCL      7163<<ASSIGN   7165<<ASSIGN
FPT_UNFID.V.FORCE#
      7049**DCL      7171<<ASSIGN
FPT_WRITE_ME.STATION_
      6694**DCL      6694--REDEF
FPT_WRITE_ME.V.DVBYTE.VFC#
      6701**DCL      6701--REDEF
FPT_WRITE_OUT.STATION_
      6725**DCL      6725--REDEF
FPT_WRITE_OUT.V.DVBYTE.VFC#
      6732**DCL      6732--REDEF
FPT_WRITE_UC.STATION_
      6663**DCL      6663--REDEF
FPT_WRITE_UC.V.DVBYTE.VFC#
      6670**DCL      6670--REDEF
FROM_SN.SN
      5569**DCL      5570--REDEF
GETCMD.OUT$
      4776**DCL      4782--REDEF
PL6.E3A0      #019=VPD$GET_SPEC_BUF File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:41 Page:470  
ICB.FID.STRING
      5593**DCL      5594--REDEF
ICB.NAME_RANGE_END
      5616**DCL      7178>>CALLBLT  7179>>IF
ICB.SPEC_TYPE
      5590**DCL      7176>>IF
IFSFA_PARAM.EOMCHAR#
      5948**DCL      5949--REDEF
IFSFA_PARAM.SIG1
      5942**DCL      5942--REDEF
IFSFA_PARAM.SIG2
      5942**DCL      5943--REDEF
IGNORE
      7175**LABEL    7173--CALLALT
IN_ACCT
      5514**DCL      7046--DCLINIT
IN_ASN
      5552**DCL      7048--DCLINIT
IN_NAME
      5514**DCL      7046--DCLINIT
IN_RES
      5515**DCL      5515--REDEF    7168--ASSIGN
IN_SN
      5526**DCL      7047--DCLINIT
IN_SN.SN
      5531**DCL      5532--REDEF
IN_WSN
      5552**DCL      7047--DCLINIT
LEN
      7054**DCL      7154<<ASSIGN   7158<<ASSIGN   7175<<CALLBLT  7175>>CALLBLT  7178>>CALLBLT  7181<<ASSIGN
      7181>>ASSIGN   7183<<CALLBLT  7183>>CALLBLT  7185>>ASSIGN
M$EI
      5984**DCL      7163>>ASSIGN
M$TIME
       100**DCL-ENT  7151--CALL
M$UNFID
PL6.E3A0      #019=VPD$GET_SPEC_BUF File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:41 Page:471  
        96**DCL-ENT  7173--CALL
OCB.TYPE
      5277**DCL      5278--REDEF
OFSFA_PARAM.EOMCHAR#
      5978**DCL      5979--REDEF
OFSFA_PARAM.SIG1
      5972**DCL      5972--REDEF
OFSFA_PARAM.SIG2
      5972**DCL      5973--REDEF
OUT_SN.SN
      5549**DCL      5550--REDEF
RESULTS_FID_IN.RES
      6025**DCL      7166>>IF
SPEC.FID
      5228**DCL      7155--ASSIGN
SPEC.TIM
      5228**DCL      7021--DCLINIT  7022--DCLINIT
SPEC.TODAY
      5228**DCL      7019--DCLINIT  7020--DCLINIT
SPEC_BUF
      5227**DCL      5227--REDEF
SPEC_BUF.LEN
      5227**DCL      7185<<ASSIGN
SPEC_BUF.STRING
      5227**DCL      7146<<ASSIGN   7153<<ASSIGN   7159--ASSIGN   7175>>CALLBLT  7178<<CALLBLT  7183>>CALLBLT
TEST_MODE
      5222**DCL      7149>>IF
TIME
      7053**DCL         6--PROC     7147>>IF

PL6.E3A0      #020=VPD$HELPMSG File=VPD$UTIL.:E05TSI                             WED 07/30/97 07:43 Page:472  
     1781        1        /*T***********************************************************/
     1782        2        /*T*                                                         */
     1783        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1784        4        /*T*                                                         */
     1785        5        /*T***********************************************************/
     1786        6        VPD$HELPMSG: PROC;
     1787        7        /*D* NAME: VPD$HELPMSG
     1788        8             CALL: This module contains no executable code.
     1789        9             DESCRIPTION: This module contains all the HELP messages for PCL.
     1790       10        */
     1791       11    1           RETURN;
     1792       12        /**/
     1793       13        /*E* ERROR:VPD-VP$BEYONDHELP
     1794       14        MESSAGE::
     1795       15        Please refer to the Programmer Reference Manual for more information.
     1796       16        */
     1797       17        /**/
     1798       18        /*E* ERROR:VPD-VP$OFFERHELP
     1799       19        MESSAGE::
     1800       20        HELP is available for this command.
     1801       21        */
     1802       22        /**/
     1803       23        /**/
     1804       24        /**/
     1805       25    1   END VPD$HELPMSG;
     1806       26        %EOD;

PL6.E3A0      #020=VPD$HELPMSG File=VPD$UTIL.:E05TSI                             WED 07/30/97 07:43 Page:473  
--  Include file information  --

   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VPD$HELPMSG.

   Procedure VPD$HELPMSG requires 3 words for executable code.
   Procedure VPD$HELPMSG requires 4 words of local(AUTO) storage.

PL6.E3A0      #020=VPD$HELPMSG File=VPD$UTIL.:E05TSI                             WED 07/30/97 07:43 Page:474  

 Object Unit name= VPD$HELPMSG                                File name= VPD$UTIL.:E05TOU
 UTS= JUL 30 '97 07:43:02.76 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none     3      3  VPD$HELPMSG

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes            yes      Std        0  VPD$HELPMSG

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_0
                       nStd      0 X66_ARET
PL6.E3A0      #020=VPD$HELPMSG File=VPD$UTIL.:E05TSI                             WED 07/30/97 07:43 Page:475  


     1781        1        /*T***********************************************************/
     1782        2        /*T*                                                         */
     1783        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1784        4        /*T*                                                         */
     1785        5        /*T***********************************************************/
     1786        6        VPD$HELPMSG: PROC;

      6  0 000000   000000 700200 xent  VPD$HELPMSG  TSX0  ! X66_AUTO_0
         0 000001   000004 000000                    ZERO    4,0

     1787        7        /*D* NAME: VPD$HELPMSG
     1788        8             CALL: This module contains no executable code.
     1789        9             DESCRIPTION: This module contains all the HELP messages for PCL.
     1790       10        */
     1791       11    1           RETURN;

     11  0 000002   000000 702200 xent               TSX2  ! X66_ARET
     1792       12        /**/
     1793       13        /*E* ERROR:VPD-VP$BEYONDHELP
     1794       14        MESSAGE::
     1795       15        Please refer to the Programmer Reference Manual for more information.
     1796       16        */
     1797       17        /**/
     1798       18        /*E* ERROR:VPD-VP$OFFERHELP
     1799       19        MESSAGE::
     1800       20        HELP is available for this command.
     1801       21        */
     1802       22        /**/
     1803       23        /**/
     1804       24        /**/
     1805       25    1   END VPD$HELPMSG;
     1806       26        %EOD;

PL6.E3A0      #020=VPD$HELPMSG File=VPD$UTIL.:E05TSI                             WED 07/30/97 07:43 Page:476  
--  Include file information  --

   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VPD$HELPMSG.
PL6.E3A0      #020=VPD$HELPMSG File=VPD$UTIL.:E05TSI                             WED 07/30/97 07:43 Page:477  

 **** Variables and constants ****


   Procedure VPD$HELPMSG requires 3 words for executable code.
   Procedure VPD$HELPMSG requires 4 words of local(AUTO) storage.
PL6.E3A0      #020=VPD$HELPMSG File=VPD$UTIL.:E05TSI                             WED 07/30/97 07:43 Page:478  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #020=VPD$HELPMSG File=VPD$UTIL.:E05TSI                             WED 07/30/97 07:43 Page:479  
          MINI XREF LISTING


PL6.E3A0      #021=VPD$INITIALIZE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:43 Page:480  
     1807        1        /*T***********************************************************/
     1808        2        /*T*                                                         */
     1809        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1810        4        /*T*                                                         */
     1811        5        /*T***********************************************************/
     1812        6        VPD$INITIALIZE: PROC;
     1813        7        /*I* NAME: VPD$INITIALIZE
     1814        8             PURPOSE: To perform necessary initialization duties on startup
     1815        9             CALL: CALL VPD$INITIALIZE;
     1816       10             DESCRIPTION: On entering PCL, this procedure is used to initialize M$EO,
     1817       11                          OPEN M$ME and M$DO and check them for usability,
     1818       12                          initialize several data items, and possibly output a
     1819       13                          greeting.
     1820       14        */
     1821       15        %INCLUDE VP_DATA_R;
     1822     7002        %INCLUDE B$JIT;
     1823     7292        %INCLUDE F$DCB;
     1824     7341        %FPT_OPEN(FPTN = FPT_OPEN_ME,
     1825     7342                  DCB  = M$ME,
     1826     7343                  FUN  = CREATE,
     1827     7344                  EXIST = OLDFILE,
     1828     7345                  ORG = CONSEC,
     1829     7346                  TEST = YES,
     1830     7347                  STCLASS = CONSTANT);
     1831     7456        %FPT_OPEN(FPTN = FPT_OPEN_DO,
     1832     7457                  DCB  = M$DO,
     1833     7458                  FUN  = CREATE,
     1834     7459                  ORG = CONSEC,
     1835     7460                  TEST = YES,
     1836     7461                  STCLASS = CONSTANT);
     1837     7570    1   DCL CODE UBIN;
     1838     7571        %FPT_INT(FPTN = FPT_INT,
     1839     7572                 UENTRY=XUG$BREAK,
     1840     7573                 STCLASS = CONSTANT);
     1841     7587        %FPT_OPEN(FPTN = FPT_SETUP_EO,
     1842     7588                  DCB  = M$EO,
     1843     7589                  SETDCB = YES,
PL6.E3A0      #021=VPD$INITIALIZE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:43 Page:481  
     1844     7590                  ASN = DEVICE,
     1845     7591                  RES = 'ME  ',
     1846     7592                  STCLASS = CONSTANT);
     1847     7701        %XUG_INIT     (NAME=XUG_INIT,
     1848     7702                       STCLASS=CONSTANT,
     1849     7703                       COMMANDS=YES,
     1850     7704                       PREPROCESS=YES,
     1851     7705                       SYNTAX=YES,
     1852     7706                       GOODCMD=YES,
     1853     7707                       SPELLING=YES,
     1854     7708                       ECHO=HONOR_FLAG,
     1855     7709                       PASS=BLANK,
     1856     7710                       ABORT=VPD$ABORT,
     1857     7711                       BRKMSG=VPD$BREAK,
     1858     7712                       CONTINUE=VPD$CONTINUE,
     1859     7713                       PREPROCESSOR=X$PRE_PROCESS);
     1860     8126        %XUG_INIT     (NAME=XUG_INIT_AUTO, STCLASS=AUTO);
     1861     8539    1   DCL GREET_BUF CHAR(30) STATIC;          /* Will hold PCL greeting             */
     1862     8540    1   DCL B_VERSION CHAR(1) SYMREF;           /* LINKER-supplied Version Number     */
     1863     8541    1   DCL 1 TEXT$C BASED,
     1864     8542    1         2 COUNT UBIN(9) UNAL,
     1865     8543    1         2 TEXT CHAR(TEXT$C.COUNT) UNAL;   /* Structure for RELVER from LINKER   */
     1866     8544    1   DCL BAD_DCB_NUM UBIN;
     1867     8545    1   DCL I UBIN;
     1868     8546        /**/
     1869     8547        /* ENTRY POINTS  */
     1870     8548        /**/
     1871     8549        %VP_ENTRIES (OMIT=VPD$INITIALIZE);
     1872     8757    1   DCL X$PRE_PROCESS ENTRY (1) ALTRET;
     1873     8758        %INCLUDE XUG_ENTRY;
     1874     8789        %PARSE$OUT(STCLASS = BASED);
     1875     8834    1           XUG_INIT_AUTO = XUG_INIT;
     1876     8835    1           CALL XUG$INIT (GETCMD, XUG_INIT_AUTO)
     1877     8836    2            WHENALTRETURN DO;
     1878     8837    2               CALL M$ERR;
     1879     8838    2               END;
     1880     8839    1           GETCMD.OUTDCB# = M$ME#;
PL6.E3A0      #021=VPD$INITIALIZE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:43 Page:482  
     1881     8840    1           GETCMD.DCB_PARAM# = M$ME#;
     1882     8841    1           GETCMD.DCB2_PARAM# = M$DO#;
     1883     8842    1           GETCMD.NODES$ = ADDR(TOP_PCL_CMD);
     1884     8843    1           BREAK_LOC_BITS = '0'B;
     1885     8844    1           STD_WORK$ = ADDR(NIL);
     1886     8845    1           KEY_AREA$ = ADDR(NIL);
     1887     8846    1           REMEMBER PARSE_ALT IN ABORT_CMD;
     1888     8847    1           TABS = '0'B;
     1889     8848    1           ERR_CODE = '000000000007'O;     /* Severity = 7                       */
     1890     8849    1           M$EI$ = DCBADDR(M$EI#);
     1891     8850    1           M$EO$ = DCBADDR(M$EO#);
     1892     8851    1           M$EO1$ = DCBADDR(M$EO1#);
     1893     8852    1           M$ME$ = DCBADDR(M$ME#);
     1894     8853    1           M$SI$ = DCBADDR(M$SI#);
     1895     8854    1           M$DO$ = DCBADDR(M$DO#);
     1896     8855    1           M$READFILE$ = DCBADDR(M$READFILE#);
     1897     8856    1           M$STD1$ = DCBADDR(M$STD1#);
     1898     8857    1           M$UC$ = DCBADDR(M$UC#);
     1899     8858    1           M$SORT1$ = DCBADDR(M$SORT1#);
     1900     8859    1           IF (B$JIT.SWITCH & '777777777000'O)=TEST_PATTERN
     1901     8860    1            THEN
     1902     8861    1              TEST_MODE = 1;
     1903     8862    1            ELSE
     1904     8863    1              TEST_MODE = 0;
     1905     8864    1           IF M$UC$->F$DCB.DDEV.IC         /* DOES IT LOOK LIKE A TERMINAL?      */
     1906     8865    1            THEN
     1907     8866    1              CALL M$INT(FPT_INT);         /* SET UP BREAK CONTROL ONLY IF       */
     1908     8867                                                /* M$UC CAN HEAR AND RESPOND          */
     1909     8868    1           EO_OCB = '0'B;
     1910     8869    1           EO_OCB.DEV_MASK = '040'O;       /* DEVICE flavor                      */
     1911     8870    1           CALL M$OPEN(FPT_SETUP_EO);      /* SET M$EO TO BE DEVICE ME           */
     1912     8871                                                /**********************/
     1913     8872                                                /*    OPEN M$ME                       */
     1914     8873                                                /**********************/
     1915     8874    1           BAD_DCB_NUM = DCBNUM(M$ME);
     1916     8875    1           IF NOT M$ME$ -> F$DCB.FCD
     1917     8876    1            THEN                           /* Gotta OPEN M$ME                    */
PL6.E3A0      #021=VPD$INITIALIZE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:43 Page:483  
     1918     8877    1              CALL M$OPEN(FPT_OPEN_ME) ALTRET(BAD_DIAG_DCB);
     1919     8878    1           IF M$ME$ -> F$DCB.ORG = %KEYED#
     1920     8879    1             OR M$ME$ -> F$DCB.ORG = %RANDOM#
     1921     8880    1             OR M$ME$ -> F$DCB.ORG = %IDS#
     1922     8881    1             OR M$ME$ -> F$DCB.ORG = %CG#
     1923     8882    1            THEN                           /* A key required to WRITE here       */
     1924     8883    1              GOTO BAD_DIAG_DCB;
     1925     8884    1           ME_WIDTH = M$ME$->F$DCB.WIDTH;
     1926     8885    1           IF ME_WIDTH>132
     1927     8886    1            THEN
     1928     8887    1              ME_WIDTH = 132;
     1929     8888    1            ELSE
     1930     8889    1              IF ME_WIDTH<=0
     1931     8890    1               THEN
     1932     8891    1                 ME_WIDTH = 80;
     1933     8892    1           BAD_DCB_NUM = DCBNUM(M$DO);
     1934     8893    1           IF ~ M$DO$ -> F$DCB.FCD
     1935     8894    1            THEN                           /* M$DO closed                        */
     1936     8895    1              CALL M$OPEN(FPT_OPEN_DO) ALTRET(BAD_DIAG_DCB);
     1937     8896    1           IF M$DO$ -> F$DCB.ORG = %KEYED#
     1938     8897    1             OR M$DO$ -> F$DCB.ORG = %RANDOM#
     1939     8898    1             OR M$DO$ -> F$DCB.ORG = %IDS#
     1940     8899    1             OR M$DO$ -> F$DCB.ORG = %CG#
     1941     8900    1            THEN                           /* A key required to WRITE here       */
     1942     8901    1   BAD_DIAG_DCB: CALL VPL$ERR_PROC(4,220,'04'O,,,,BAD_DCB_NUM);
     1943     8902        /*E* ERROR:   VPD-00220
     1944     8903             MESSAGE: %DC is unsuitable for writing error messages.
     1945     8904            MESSAGE1: %DC either requires keys or could not be opened.
     1946     8905        */
     1947     8906    1           PCB.WORK$ = ADDR(PARSE_WORK_AREA);
     1948     8907    1           PCB.WKSZ = SIZEW(PARSE_WORK_AREA);
     1949     8908    1           PCB.U$$ = ENTADDR(VPD$U$);
     1950     8909    1           PCB.CONTINUE = '0'B;            /* Don't allow continuation           */
     1951     8910    1           SUCCESS_NODE = '0'B;            /* We haven't had any parsing success */
     1952     8911    1           IF B$JIT.CCARS = 0 OR TEST_MODE = 1
     1953     8912    1            THEN
     1954     8913    1              CODE = 38;              /* fake parse if linked to with nil bfr    */
PL6.E3A0      #021=VPD$INITIALIZE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:43 Page:484  
     1955     8914    2            ELSE DO;
     1956     8915    2               I=0;
     1957     8916    3               DO WHILE SUBSTR(B$JIT.CCBUF,I,1)='!';
     1958     8917    3                  I=I+1;
     1959     8918    3                  END;
     1960     8919    2               GETCMD.TEXT_ = VECTOR (SUBSTR (B$JIT.CCBUF, 0, B$JIT.CCARS-I));
     1961     8920    2               VBASE(GETCMD.TEXT_)=PINCRC(VBASE(GETCMD.TEXT_),I);
     1962     8921    2               CALL XUG$GETCMD (GETCMD) ALTRET (PARSE_ALT);
     1963     8922    2               IF GETCMD.OUT$=ADDR(NIL) THEN
     1964     8923    2                  CODE=38;                 /* Fake an end                        */
     1965     8924    3                ELSE DO;
     1966     8925    3                   PCB.OUT$ = GETCMD.OUT$;
     1967     8926    3                   CODE = PCB.OUT$ -> OUT$BLK.CODE;
     1968     8927    3                   IF CODE = 38 AND
     1969     8928    3                     PCB.OUT$ -> OUT$BLK.NSUBLKS ~= 0 AND
     1970     8929    3                     PCB.OUT$ -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE ~= 0
     1971     8930    3                    THEN
     1972     8931    3                      CALL VPK$PCL_INVOCATION;
     1973     8932    3                   END;
     1974     8933    2               END;
     1975     8934    1           IF CODE = 38
     1976     8935    1            THEN                           /* A 'PCL' invocation                 */
     1977     8936    2            DO;
     1978     8937    2               ONE_TIME = 0;               /* Not a one-shot                     */
     1979     8938    2               COMMAND_STUFFED = '0'B;     /* We need a new command              */
     1980     8939    2               PRE_PARSED = '0'B;          /* And it'll need parsing             */
     1981     8940    2               END;
     1982     8941    1            ELSE                           /* Not an invocation                  */
     1983     8942    2            DO;
     1984     8943    2               ONE_TIME = 1;               /* A one-shot command                 */
     1985     8944    2               PRE_PARSED = '1'B;          /* We've already done the parsing     */
     1986     8945    2               COMMAND_STUFFED = '1'B;     /* And we needn't READ it again       */
     1987     8946    2               END;
     1988     8947    2           DO WHILE ('0'B);                /* Never do                           */
     1989     8948    2   PARSE_ALT: ONE_TIME = 1;                /* Bad implicit call                  */
     1990     8949    2              ERR_FLG = '1'B;              /* Dont reparse this junk             */
     1991     8950    2              END;
PL6.E3A0      #021=VPD$INITIALIZE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:43 Page:485  
     1992     8951    1           IF ONE_TIME = 0
     1993     8952    1            THEN                           /* Not a one-shot                     */
     1994     8953    2            DO;                            /* We must select a greeting          */
     1995     8954    2               IF TEST_MODE=1
     1996     8955    2                THEN
     1997     8956    3                DO;
     1998     8957    3                   FROM_SYS = '1'B;
     1999     8958    3                   GREET_BUF = 'PCL TEST-MODE HERE';
     2000     8959    3                   END;
     2001     8960    2                ELSE
     2002     8961    2                  IF B$JIT$ -> B$JIT.RUNFLAGS & %RUN_PROC#
     2003     8962    2                   THEN                    /* PCL is running as a processor      */
     2004     8963    3                   DO;
     2005     8964    3                      FROM_SYS = '1'B;     /* Set a flag bit                     */
     2006     8965    3                      CALL CONCAT(GREET_BUF,'PCL ',ADDR(B_VERSION) -> TEXT$C.TEXT,
              8965                               ' here');
     2007     8966    3                      END;
     2008     8967    2                   ELSE                    /* PCL is running as a user           */
     2009     8968    3                   DO;
     2010     8969    3                      FROM_SYS = '0'B;
     2011     8970    3                      CALL CONCAT(GREET_BUF,'Bootleg PCL ',ADDR(B_VERSION) -> TEXT$C.
              8970                               TEXT,' here');
     2012     8971    3                      END;
     2013     8972    2               FPT_WRITE_ME.V.DVBYTE.VFC# = %NO#;
     2014     8973    2               FPT_WRITE_ME.BUF_ = VECTOR(GREET_BUF);
     2015     8974    2               IF B$JIT$ -> B$JIT.MODE ~= %M_TP#
     2016     8975    2                THEN                       /* Greet him, he's not a TP user      */
     2017     8976    2                  CALL M$WRITE(FPT_WRITE_ME); /* OUTPUT A GREETING               */
     2018     8977    2               END;
     2019     8978    1           FPT_OPEN_EI_SAVE = FPT_OPEN_EI;
     2020     8979    1           FPT_OPEN_OUT_SAVE = FPT_OPEN_OUT;
     2021     8980    1           CALL VPD$INIT_BUF;
     2022     8981    1   END VPD$INITIALIZE;
     2023     8982        %EOD;

PL6.E3A0      #021=VPD$INITIALIZE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:43 Page:486  
--  Include file information  --

   XUG_ENTRY.:E05TOU  cannot be made into a system file and is referenced.
   F$DCB.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$INITIALIZE.

   Procedure VPD$INITIALIZE requires 325 words for executable code.
   Procedure VPD$INITIALIZE requires 50 words of local(AUTO) storage.

PL6.E3A0      #021=VPD$INITIALIZE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:43 Page:487  

 Object Unit name= VPD$INITIALIZE                             File name= VPD$UTIL.:E05TOU
 UTS= JUL 30 '97 07:43:06.16 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$EI
    2   DCB   even  none     0      0  M$EO
    3   DCB   even  none     0      0  M$EO1
    4   DCB   even  none     0      0  M$ME
    5   DCB   even  none     0      0  M$SI
    6   DCB   even  none     0      0  M$READFILE
    7   DCB   even  none     0      0  M$DO
    8   DCB   even  none     0      0  M$STD1
    9   DCB   even  none     0      0  M$SORT1
   10  RoData even  UTS    225    341  VPD$INITIALIZE
   11   Data  even  none     8     10  VPD$INITIALIZE
   12   Proc  even  none   325    505  VPD$INITIALIZE
   13  RoData even  none    14     16  VPD$INITIALIZE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    12      0   yes            yes      Std        0  VPD$INITIALIZE
PL6.E3A0      #021=VPD$INITIALIZE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:43 Page:488  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes          Async      0 XUG$BREAK
         yes           Std       0 VPD$ABORT
         yes           Std       0 VPD$CONTINUE
         yes           Std       8 VPL$ERR_PROC
         yes           Std       0 VPK$PCL_INVOCATION
         yes           Std       0 VPD$INIT_BUF
 yes     yes           Std       1 X$PRE_PROCESS
 yes     yes           Std       0 VPD$BREAK
 yes     yes           Std       2 XTX$ADAPT
         yes           Std       1 VPD$U$
 yes     yes           Std       1 XUG$GETCMD
 yes     yes           Std       2 XUG$INIT
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AUTO_0
                       nStd      0 X66_ARET
PL6.E3A0      #021=VPD$INITIALIZE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:43 Page:489  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  PARSE_WORK_AREA                       STD_WORK$
     SUCCESS_NODE                          COMMAND_STUFFED                       PRE_PARSED
     PCB                                   GETCMD                                ERR_FLG
     ABORT_CMD                             ERR_CODE                              TEST_PATTERN
     TEST_MODE                             FROM_SYS                              BREAK_LOC
     BREAK_MESSAGE_REPORTER                ME_WIDTH                              SPEC_BUF
     ONE_TIME                              TABS                                  EO_OCB
     IN_RES                                KEY_AREA$                             M$EI
     M$EI$                                 M$EI#                                 M$EO
     M$EO$                                 M$EO#                                 M$EO1
     M$EO1$                                M$EO1#                                M$ME
     M$ME$                                 M$ME#                                 M$SI
     M$SI$                                 M$SI#                                 M$READFILE
     M$READFILE$                           M$READFILE#                           M$DO
     M$DO$                                 M$DO#                                 M$UC$
     M$UC#                                 M$STD1                                M$STD1$
     M$STD1#                               M$SORT1                               M$SORT1$
     M$SORT1#                              B$JIT$                                TOP_PCL_CMD
     FPT_OPEN_OUT_SAVE                     FPT_OPEN_OUT                          FPT_OPEN_EI
     FPT_OPEN_EI_SAVE                      FPT_WRITE_ME                          B_VERSION
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID                               ROSID
PL6.E3A0      #021=VPD$INITIALIZE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:43 Page:490  


     1807        1        /*T***********************************************************/
     1808        2        /*T*                                                         */
     1809        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1810        4        /*T*                                                         */
     1811        5        /*T***********************************************************/
     1812        6        VPD$INITIALIZE: PROC;

      6 12 000000   000000 700200 xent  VPD$INITIAL* TSX0  ! X66_AUTO_0
        12 000001   000062 000000                    ZERO    50,0

     1813        7        /*I* NAME: VPD$INITIALIZE
     1814        8             PURPOSE: To perform necessary initialization duties on startup
     1815        9             CALL: CALL VPD$INITIALIZE;
     1816       10             DESCRIPTION: On entering PCL, this procedure is used to initialize M$EO,
     1817       11                          OPEN M$ME and M$DO and check them for usability,
     1818       12                          initialize several data items, and possibly output a
     1819       13                          greeting.
     1820       14        */
     1821       15        %INCLUDE VP_DATA_R;
     1822     7002        %INCLUDE B$JIT;
     1823     7292        %INCLUDE F$DCB;
     1824     7341        %FPT_OPEN(FPTN = FPT_OPEN_ME,
     1825     7342                  DCB  = M$ME,
     1826     7343                  FUN  = CREATE,
     1827     7344                  EXIST = OLDFILE,
     1828     7345                  ORG = CONSEC,
     1829     7346                  TEST = YES,
     1830     7347                  STCLASS = CONSTANT);
     1831     7456        %FPT_OPEN(FPTN = FPT_OPEN_DO,
     1832     7457                  DCB  = M$DO,
     1833     7458                  FUN  = CREATE,
     1834     7459                  ORG = CONSEC,
     1835     7460                  TEST = YES,
     1836     7461                  STCLASS = CONSTANT);
     1837     7570    1   DCL CODE UBIN;
     1838     7571        %FPT_INT(FPTN = FPT_INT,
PL6.E3A0      #021=VPD$INITIALIZE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:43 Page:491  
     1839     7572                 UENTRY=XUG$BREAK,
     1840     7573                 STCLASS = CONSTANT);
     1841     7587        %FPT_OPEN(FPTN = FPT_SETUP_EO,
     1842     7588                  DCB  = M$EO,
     1843     7589                  SETDCB = YES,
     1844     7590                  ASN = DEVICE,
     1845     7591                  RES = 'ME  ',
     1846     7592                  STCLASS = CONSTANT);
     1847     7701        %XUG_INIT     (NAME=XUG_INIT,
     1848     7702                       STCLASS=CONSTANT,
     1849     7703                       COMMANDS=YES,
     1850     7704                       PREPROCESS=YES,
     1851     7705                       SYNTAX=YES,
     1852     7706                       GOODCMD=YES,
     1853     7707                       SPELLING=YES,
     1854     7708                       ECHO=HONOR_FLAG,
     1855     7709                       PASS=BLANK,
     1856     7710                       ABORT=VPD$ABORT,
     1857     7711                       BRKMSG=VPD$BREAK,
     1858     7712                       CONTINUE=VPD$CONTINUE,
     1859     7713                       PREPROCESSOR=X$PRE_PROCESS);
     1860     8126        %XUG_INIT     (NAME=XUG_INIT_AUTO, STCLASS=AUTO);
     1861     8539    1   DCL GREET_BUF CHAR(30) STATIC;          /* Will hold PCL greeting             */
     1862     8540    1   DCL B_VERSION CHAR(1) SYMREF;           /* LINKER-supplied Version Number     */
     1863     8541    1   DCL 1 TEXT$C BASED,
     1864     8542    1         2 COUNT UBIN(9) UNAL,
     1865     8543    1         2 TEXT CHAR(TEXT$C.COUNT) UNAL;   /* Structure for RELVER from LINKER   */
     1866     8544    1   DCL BAD_DCB_NUM UBIN;
     1867     8545    1   DCL I UBIN;
     1868     8546        /**/
     1869     8547        /* ENTRY POINTS  */
     1870     8548        /**/
     1871     8549        %VP_ENTRIES (OMIT=VPD$INITIALIZE);
     1872     8757    1   DCL X$PRE_PROCESS ENTRY (1) ALTRET;
     1873     8758        %INCLUDE XUG_ENTRY;
     1874     8789        %PARSE$OUT(STCLASS = BASED);
     1875     8834    1           XUG_INIT_AUTO = XUG_INIT;
PL6.E3A0      #021=VPD$INITIALIZE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:43 Page:492  

   8834 12 000002   000100 100400                    MLR     fill='000'O
        12 000003   000262 000220 10                 ADSC9   XUG_INIT                 cn=0,n=144
        12 000004   200004 000220                    ADSC9   XUG_INIT_AUTO,,AUTO      cn=0,n=144

     1876     8835    1           CALL XUG$INIT (GETCMD, XUG_INIT_AUTO)

   8835 12 000005   200004 630500                    EPPR0   XUG_INIT_AUTO,,AUTO
        12 000006   200053 450500                    STP0    I+2,,AUTO
        12 000007   000000 236000 13                 LDQ     0
        12 000010   200052 756100                    STQ     I+1,,AUTO
        12 000011   200052 630500                    EPPR0   I+1,,AUTO
        12 000012   000020 631400 xsym               EPPR1   B_VECTNIL+16
        12 000013   000000 701000 xent               TSX1    XUG$INIT
        12 000014   000016 702000 12                 TSX2    s:8837
        12 000015   000020 710000 12                 TRA     s:8839

     1877     8836    2            WHENALTRETURN DO;

     1878     8837    2               CALL M$ERR;

   8837 12 000016   000002 713400                    CLIMB   err
        12 000017   000000 401760                    pmme    nvectors=0

     1879     8838    2               END;

     1880     8839    1           GETCMD.OUTDCB# = M$ME#;

   8839 12 000020   000000 235000 xsym               LDA     M$ME#
        12 000021   000013 755000 xsym               STA     GETCMD+11

     1881     8840    1           GETCMD.DCB_PARAM# = M$ME#;

   8840 12 000022   000014 755000 xsym               STA     GETCMD+12

     1882     8841    1           GETCMD.DCB2_PARAM# = M$DO#;

PL6.E3A0      #021=VPD$INITIALIZE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:43 Page:493  
   8841 12 000023   000000 236000 xsym               LDQ     M$DO#
        12 000024   000015 756000 xsym               STQ     GETCMD+13

     1883     8842    1           GETCMD.NODES$ = ADDR(TOP_PCL_CMD);

   8842 12 000025   000001 236000 13                 LDQ     1
        12 000026   000000 756000 xsym               STQ     GETCMD

     1884     8843    1           BREAK_LOC_BITS = '0'B;

   8843 12 000027   000000 235003                    LDA     0,DU
        12 000030   000000 236003                    LDQ     0,DU
        12 000031   000000 757000 xsym               STAQ    BREAK_LOC

     1885     8844    1           STD_WORK$ = ADDR(NIL);

   8844 12 000032   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000033   000000 756000 xsym               STQ     STD_WORK$

     1886     8845    1           KEY_AREA$ = ADDR(NIL);

   8845 12 000034   000000 756000 xsym               STQ     KEY_AREA$

     1887     8846    1           REMEMBER PARSE_ALT IN ABORT_CMD;

   8846 12 000035   000362 635000 12                 EAA     PARSE_ALT
        12 000036   000000 452400 xsym               STP2    ABORT_CMD
        12 000037   000001 755000 xsym               STA     ABORT_CMD+1

     1888     8847    1           TABS = '0'B;

   8847 12 000040   000000 100400                    MLR     fill='000'O
        12 000041   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
        12 000042   000000 000037 xsym               ADSC9   TABS                     cn=0,n=31

     1889     8848    1           ERR_CODE = '000000000007'O;     /* Severity = 7                       */

PL6.E3A0      #021=VPD$INITIALIZE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:43 Page:494  
   8848 12 000043   000011 236000 xsym               LDQ     B_VECTNIL+9
        12 000044   000000 756000 xsym               STQ     ERR_CODE

     1890     8849    1           M$EI$ = DCBADDR(M$EI#);

   8849 12 000045   000002 470400 13                 LDP0    2
        12 000046   000000 471500                    LDP1    0,,PR0
        12 000047   000000 720000 xsym               LXL0    M$EI#
        12 000050   100000 236110                    LDQ     0,X0,PR1
        12 000051   000000 756000 xsym               STQ     M$EI$

     1891     8850    1           M$EO$ = DCBADDR(M$EO#);

   8850 12 000052   000000 721000 xsym               LXL1    M$EO#
        12 000053   100000 236111                    LDQ     0,X1,PR1
        12 000054   000000 756000 xsym               STQ     M$EO$

     1892     8851    1           M$EO1$ = DCBADDR(M$EO1#);

   8851 12 000055   000000 722000 xsym               LXL2    M$EO1#
        12 000056   100000 236112                    LDQ     0,X2,PR1
        12 000057   000000 756000 xsym               STQ     M$EO1$

     1893     8852    1           M$ME$ = DCBADDR(M$ME#);

   8852 12 000060   000000 723000 xsym               LXL3    M$ME#
        12 000061   100000 236113                    LDQ     0,X3,PR1
        12 000062   000000 756000 xsym               STQ     M$ME$

     1894     8853    1           M$SI$ = DCBADDR(M$SI#);

   8853 12 000063   000000 724000 xsym               LXL4    M$SI#
        12 000064   100000 236114                    LDQ     0,X4,PR1
        12 000065   000000 756000 xsym               STQ     M$SI$

     1895     8854    1           M$DO$ = DCBADDR(M$DO#);

PL6.E3A0      #021=VPD$INITIALIZE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:43 Page:495  
   8854 12 000066   000000 725000 xsym               LXL5    M$DO#
        12 000067   100000 236115                    LDQ     0,X5,PR1
        12 000070   000000 756000 xsym               STQ     M$DO$

     1896     8855    1           M$READFILE$ = DCBADDR(M$READFILE#);

   8855 12 000071   000000 726000 xsym               LXL6    M$READFILE#
        12 000072   100000 236116                    LDQ     0,X6,PR1
        12 000073   000000 756000 xsym               STQ     M$READFILE$

     1897     8856    1           M$STD1$ = DCBADDR(M$STD1#);

   8856 12 000074   000000 727000 xsym               LXL7    M$STD1#
        12 000075   100000 236117                    LDQ     0,X7,PR1
        12 000076   000000 756000 xsym               STQ     M$STD1$

     1898     8857    1           M$UC$ = DCBADDR(M$UC#);

   8857 12 000077   000000 720000 xsym               LXL0    M$UC#
        12 000100   100000 236110                    LDQ     0,X0,PR1
        12 000101   000000 756000 xsym               STQ     M$UC$

     1899     8858    1           M$SORT1$ = DCBADDR(M$SORT1#);

   8858 12 000102   000000 720000 xsym               LXL0    M$SORT1#
        12 000103   100000 236110                    LDQ     0,X0,PR1
        12 000104   000000 756000 xsym               STQ     M$SORT1$

     1900     8859    1           IF (B$JIT.SWITCH & '777777777000'O)=TEST_PATTERN

   8859 12 000105   000000 473400 xsym               LDP3    B$JIT$
        12 000106   300031 236100                    LDQ     25,,PR3
        12 000107   000326 376000 10                 ANQ     XUG_INIT+36
        12 000110   000000 116000 xsym               CMPQ    TEST_PATTERN
        12 000111   000115 601000 12                 TNZ     s:8863

     1901     8860    1            THEN
PL6.E3A0      #021=VPD$INITIALIZE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:43 Page:496  
     1902     8861    1              TEST_MODE = 1;

   8861 12 000112   000001 236007                    LDQ     1,DL
        12 000113   000000 756000 xsym               STQ     TEST_MODE
        12 000114   000116 710000 12                 TRA     s:8864

     1903     8862    1            ELSE
     1904     8863    1              TEST_MODE = 0;

   8863 12 000115   000000 450000 xsym               STZ     TEST_MODE

     1905     8864    1           IF M$UC$->F$DCB.DDEV.IC         /* DOES IT LOOK LIKE A TERMINAL?      */

   8864 12 000116   000000 474400 xsym               LDP4    M$UC$
        12 000117   400004 236100                    LDQ     4,,PR4
        12 000120   100000 316007                    CANQ    32768,DL
        12 000121   000125 600000 12                 TZE     s:8868

     1906     8865    1            THEN
     1907     8866    1              CALL M$INT(FPT_INT);         /* SET UP BREAK CONTROL ONLY IF       */

   8866 12 000122   000164 630400 10                 EPPR0   FPT_INT
        12 000123   010002 713400                    CLIMB   4098
        12 000124   400000 401760                    pmme    nvectors=1

     1908     8867                                                /* M$UC CAN HEAR AND RESPOND          */
     1909     8868    1           EO_OCB = '0'B;

   8868 12 000125   000000 100400                    MLR     fill='000'O
        12 000126   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
        12 000127   000000 001370 xsym               ADSC9   EO_OCB                   cn=0,n=760

     1910     8869    1           EO_OCB.DEV_MASK = '040'O;       /* DEVICE flavor                      */

   8869 12 000130   040000 236003                    LDQ     16384,DU
        12 000131   000255 756000 xsym               STQ     EO_OCB+173

PL6.E3A0      #021=VPD$INITIALIZE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:43 Page:497  
     1911     8870    1           CALL M$OPEN(FPT_SETUP_EO);      /* SET M$EO TO BE DEVICE ME           */

   8870 12 000132   000170 630400 10                 EPPR0   FPT_SETUP_EO
        12 000133   050000 713400                    CLIMB   open
        12 000134   410400 401760                    pmme    nvectors=18

     1912     8871                                                /**********************/
     1913     8872                                                /*    OPEN M$ME                       */
     1914     8873                                                /**********************/
     1915     8874    1           BAD_DCB_NUM = DCBNUM(M$ME);

   8874 12 000135   000000 236007 xsym               LDQ     M$ME,DL
        12 000136   200050 756100                    STQ     BAD_DCB_NUM,,AUTO

     1916     8875    1           IF NOT M$ME$ -> F$DCB.FCD

   8875 12 000137   000000 470400 xsym               LDP0    M$ME$
        12 000140   000031 236100                    LDQ     25,,PR0
        12 000141   020000 316007                    CANQ    8192,DL
        12 000142   000147 601000 12                 TNZ     s:8878

     1917     8876    1            THEN                           /* Gotta OPEN M$ME                    */
     1918     8877    1              CALL M$OPEN(FPT_OPEN_ME) ALTRET(BAD_DIAG_DCB);

   8877 12 000143   000000 630400 10                 EPPR0   FPT_OPEN_ME
        12 000144   450000 713400                    CLIMB   alt,open
        12 000145   410400 401760                    pmme    nvectors=18
        12 000146   000225 702000 12                 TSX2    BAD_DIAG_DCB

     1919     8878    1           IF M$ME$ -> F$DCB.ORG = %KEYED#

   8878 12 000147   000000 470400 xsym               LDP0    M$ME$
        12 000150   000032 236100                    LDQ     26,,PR0
        12 000151   777000 376003                    ANQ     -512,DU
        12 000152   002000 116003                    CMPQ    1024,DU
        12 000153   000225 600000 12                 TZE     BAD_DIAG_DCB
        12 000154   003000 116003                    CMPQ    1536,DU
PL6.E3A0      #021=VPD$INITIALIZE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:43 Page:498  
        12 000155   000225 600000 12                 TZE     BAD_DIAG_DCB
        12 000156   007000 116003                    CMPQ    3584,DU
        12 000157   000225 600000 12                 TZE     BAD_DIAG_DCB
        12 000160   013000 116003                    CMPQ    5632,DU
        12 000161   000225 600000 12                 TZE     BAD_DIAG_DCB

     1920     8879    1             OR M$ME$ -> F$DCB.ORG = %RANDOM#
     1921     8880    1             OR M$ME$ -> F$DCB.ORG = %IDS#
     1922     8881    1             OR M$ME$ -> F$DCB.ORG = %CG#
     1923     8882    1            THEN                           /* A key required to WRITE here       */
     1924     8883    1              GOTO BAD_DIAG_DCB;
     1925     8884    1           ME_WIDTH = M$ME$->F$DCB.WIDTH;

   8884 12 000162   000004 236100                    LDQ     4,,PR0
        12 000163   000777 376007                    ANQ     511,DL
        12 000164   000000 756000 xsym               STQ     ME_WIDTH

     1926     8885    1           IF ME_WIDTH>132

   8885 12 000165   000205 116007                    CMPQ    133,DL
        12 000166   000172 602000 12                 TNC     s:8889

     1927     8886    1            THEN
     1928     8887    1              ME_WIDTH = 132;

   8887 12 000167   000204 235007                    LDA     132,DL
        12 000170   000000 755000 xsym               STA     ME_WIDTH
        12 000171   000176 710000 12                 TRA     s:8892

     1929     8888    1            ELSE
     1930     8889    1              IF ME_WIDTH<=0

   8889 12 000172   000000 116003                    CMPQ    0,DU
        12 000173   000176 601000 12                 TNZ     s:8892

     1931     8890    1               THEN
     1932     8891    1                 ME_WIDTH = 80;
PL6.E3A0      #021=VPD$INITIALIZE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:43 Page:499  

   8891 12 000174   000120 235007                    LDA     80,DL
        12 000175   000000 755000 xsym               STA     ME_WIDTH

     1933     8892    1           BAD_DCB_NUM = DCBNUM(M$DO);

   8892 12 000176   000000 236007 xsym               LDQ     M$DO,DL
        12 000177   200050 756100                    STQ     BAD_DCB_NUM,,AUTO

     1934     8893    1           IF ~ M$DO$ -> F$DCB.FCD

   8893 12 000200   000000 471400 xsym               LDP1    M$DO$
        12 000201   100031 236100                    LDQ     25,,PR1
        12 000202   000026 736000                    QLS     22
        12 000203   400000 376003                    ANQ     -131072,DU
        12 000204   400000 676003                    ERQ     -131072,DU
        12 000205   000212 600000 12                 TZE     s:8896

     1935     8894    1            THEN                           /* M$DO closed                        */
     1936     8895    1              CALL M$OPEN(FPT_OPEN_DO) ALTRET(BAD_DIAG_DCB);

   8895 12 000206   000072 630400 10                 EPPR0   FPT_OPEN_DO
        12 000207   450000 713400                    CLIMB   alt,open
        12 000210   410400 401760                    pmme    nvectors=18
        12 000211   000225 702000 12                 TSX2    BAD_DIAG_DCB

     1937     8896    1           IF M$DO$ -> F$DCB.ORG = %KEYED#

   8896 12 000212   000000 470400 xsym               LDP0    M$DO$
        12 000213   000032 236100                    LDQ     26,,PR0
        12 000214   777000 376003                    ANQ     -512,DU
        12 000215   002000 116003                    CMPQ    1024,DU
        12 000216   000225 600000 12                 TZE     BAD_DIAG_DCB
        12 000217   003000 116003                    CMPQ    1536,DU
        12 000220   000225 600000 12                 TZE     BAD_DIAG_DCB
        12 000221   007000 116003                    CMPQ    3584,DU
        12 000222   000225 600000 12                 TZE     BAD_DIAG_DCB
PL6.E3A0      #021=VPD$INITIALIZE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:43 Page:500  
        12 000223   013000 116003                    CMPQ    5632,DU
        12 000224   000243 601000 12                 TNZ     s:8906

     1938     8897    1             OR M$DO$ -> F$DCB.ORG = %RANDOM#
     1939     8898    1             OR M$DO$ -> F$DCB.ORG = %IDS#
     1940     8899    1             OR M$DO$ -> F$DCB.ORG = %CG#
     1941     8900    1            THEN                           /* A key required to WRITE here       */
     1942     8901    1   BAD_DIAG_DCB: CALL VPL$ERR_PROC(4,220,'04'O,,,,BAD_DCB_NUM);

   8901 12 000225   200050 630500       BAD_DIAG_DCB EPPR0   BAD_DCB_NUM,,AUTO
        12 000226   200060 450500                    STP0    I+7,,AUTO
        12 000227   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000230   000001 235000 xsym               LDA     B_VECTNIL+1
        12 000231   200056 757100                    STAQ    I+5,,AUTO
        12 000232   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000233   000005 235000 13                 LDA     5
        12 000234   200054 757100                    STAQ    I+3,,AUTO
        12 000235   000006 237000 13                 LDAQ    6
        12 000236   200052 757100                    STAQ    I+1,,AUTO
        12 000237   200052 630500                    EPPR0   I+1,,AUTO
        12 000240   000025 631400 xsym               EPPR1   B_VECTNIL+21
        12 000241   000000 701000 xent               TSX1    VPL$ERR_PROC
        12 000242   000000 011000                    NOP     0

     1943     8902        /*E* ERROR:   VPD-00220
     1944     8903             MESSAGE: %DC is unsuitable for writing error messages.
     1945     8904            MESSAGE1: %DC either requires keys or could not be opened.
     1946     8905        */
     1947     8906    1           PCB.WORK$ = ADDR(PARSE_WORK_AREA);

   8906 12 000243   000010 236000 13                 LDQ     8
        12 000244   000002 756000 xsym               STQ     PCB+2

     1948     8907    1           PCB.WKSZ = SIZEW(PARSE_WORK_AREA);

   8907 12 000245   001001 220003                    LDX0    513,DU
        12 000246   000005 740000 xsym               STX0    PCB+5
PL6.E3A0      #021=VPD$INITIALIZE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:43 Page:501  

     1949     8908    1           PCB.U$$ = ENTADDR(VPD$U$);

   8908 12 000247   000000 636000 xent               EAQ     VPD$U$
        12 000250   000004 756000 xsym               STQ     PCB+4

     1950     8909    1           PCB.CONTINUE = '0'B;            /* Don't allow continuation           */

   8909 12 000251   000011 236000 13                 LDQ     9
        12 000252   000005 356000 xsym               ANSQ    PCB+5

     1951     8910    1           SUCCESS_NODE = '0'B;            /* We haven't had any parsing success */

   8910 12 000253   000000 450000 xsym               STZ     SUCCESS_NODE

     1952     8911    1           IF B$JIT.CCARS = 0 OR TEST_MODE = 1

   8911 12 000254   000000 470400 xsym               LDP0    B$JIT$
        12 000255   000032 221100                    LDX1    26,,PR0
        12 000256   000262 600000 12                 TZE     s:8913
        12 000257   000000 235000 xsym               LDA     TEST_MODE
        12 000260   000001 115007                    CMPA    1,DL
        12 000261   000265 601000 12                 TNZ     s:8915

     1953     8912    1            THEN
     1954     8913    1              CODE = 38;              /* fake parse if linked to with nil bfr    */

   8913 12 000262   000046 235007                    LDA     38,DL
        12 000263   200003 755100                    STA     CODE,,AUTO
        12 000264   000345 710000 12                 TRA     s:8934

     1955     8914    2            ELSE DO;

     1956     8915    2               I=0;

   8915 12 000265   200051 450100                    STZ     I,,AUTO

PL6.E3A0      #021=VPD$INITIALIZE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:43 Page:502  
     1957     8916    3               DO WHILE SUBSTR(B$JIT.CCBUF,I,1)='!';

   8916 12 000266   000272 710000 12                 TRA     s:8918

     1958     8917    3                  I=I+1;

   8917 12 000267   200051 235100                    LDA     I,,AUTO
        12 000270   000001 035007                    ADLA    1,DL
        12 000271   200051 755100                    STA     I,,AUTO

     1959     8918    3                  END;

   8918 12 000272   000000 470400 xsym               LDP0    B$JIT$
        12 000273   200051 235100                    LDA     I,,AUTO
        12 000274   040000 106505                    CMPC    fill='040'O
        12 000275   000033 000001                    ADSC9   27,A,PR0                 cn=0,n=1
        12 000276   000012 000001 13                 ADSC9   10                       cn=0,n=1
        12 000277   000267 600000 12                 TZE     s:8917

     1960     8919    2               GETCMD.TEXT_ = VECTOR (SUBSTR (B$JIT.CCBUF, 0, B$JIT.CCARS-I));

   8919 12 000300   000032 236100                    LDQ     26,,PR0
        12 000301   000022 732000                    QRS     18
        12 000302   200051 136100                    SBLQ    I,,AUTO
        12 000303   000064 737000                    LLS     52
        12 000304   000140 135007                    SBLA    96,DL
        12 000305   000000 236000 xsym               LDQ     B$JIT$
        12 000306   000033 036003                    ADLQ    27,DU
        12 000307   000034 757000 xsym               STAQ    GETCMD+28

     1961     8920    2               VBASE(GETCMD.TEXT_)=PINCRC(VBASE(GETCMD.TEXT_),I);

   8920 12 000310   200051 236100                    LDQ     I,,AUTO
        12 000311   000020 736000                    QLS     16
        12 000312   000035 036000 xsym               ADLQ    GETCMD+29
        12 000313   000035 756000 xsym               STQ     GETCMD+29

PL6.E3A0      #021=VPD$INITIALIZE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:43 Page:503  
     1962     8921    2               CALL XUG$GETCMD (GETCMD) ALTRET (PARSE_ALT);

   8921 12 000314   000000 630400 13                 EPPR0   0
        12 000315   000017 631400 xsym               EPPR1   B_VECTNIL+15
        12 000316   000000 701000 xent               TSX1    XUG$GETCMD
        12 000317   000362 702000 12                 TSX2    PARSE_ALT

     1963     8922    2               IF GETCMD.OUT$=ADDR(NIL) THEN

   8922 12 000320   000001 236000 xsym               LDQ     GETCMD+1
        12 000321   000001 116000 xsym               CMPQ    B_VECTNIL+1
        12 000322   000326 601000 12                 TNZ     s:8925

     1964     8923    2                  CODE=38;                 /* Fake an end                        */

   8923 12 000323   000046 235007                    LDA     38,DL
        12 000324   200003 755100                    STA     CODE,,AUTO
        12 000325   000345 710000 12                 TRA     s:8934

     1965     8924    3                ELSE DO;

     1966     8925    3                   PCB.OUT$ = GETCMD.OUT$;

   8925 12 000326   000003 756000 xsym               STQ     PCB+3

     1967     8926    3                   CODE = PCB.OUT$ -> OUT$BLK.CODE;

   8926 12 000327   000003 470400 xsym               LDP0    PCB+3
        12 000330   000000 236100                    LDQ     0,,PR0
        12 000331   777777 376007                    ANQ     -1,DL
        12 000332   200003 756100                    STQ     CODE,,AUTO

     1968     8927    3                   IF CODE = 38 AND

   8927 12 000333   000046 116007                    CMPQ    38,DL
        12 000334   000345 601000 12                 TNZ     s:8934
        12 000335   000001 220100                    LDX0    1,,PR0
PL6.E3A0      #021=VPD$INITIALIZE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:43 Page:504  
        12 000336   000345 600000 12                 TZE     s:8934
        12 000337   000003 471500                    LDP1    3,,PR0
        12 000340   100000 721100                    LXL1    0,,PR1
        12 000341   000345 600000 12                 TZE     s:8934

     1969     8928    3                     PCB.OUT$ -> OUT$BLK.NSUBLKS ~= 0 AND
     1970     8929    3                     PCB.OUT$ -> OUT$BLK.SUBLK$(0) -> OUT$BLK.CODE ~= 0
     1971     8930    3                    THEN
     1972     8931    3                      CALL VPK$PCL_INVOCATION;

   8931 12 000342   000002 631400 xsym               EPPR1   B_VECTNIL+2
        12 000343   000000 701000 xent               TSX1    VPK$PCL_INVOCATION
        12 000344   000000 011000                    NOP     0

     1973     8932    3                   END;

     1974     8933    2               END;

     1975     8934    1           IF CODE = 38

   8934 12 000345   200003 235100                    LDA     CODE,,AUTO
        12 000346   000046 115007                    CMPA    38,DL
        12 000347   000354 601000 12                 TNZ     s:8943

     1976     8935    1            THEN                           /* A 'PCL' invocation                 */
     1977     8936    2            DO;

     1978     8937    2               ONE_TIME = 0;               /* Not a one-shot                     */

   8937 12 000350   000000 450000 xsym               STZ     ONE_TIME

     1979     8938    2               COMMAND_STUFFED = '0'B;     /* We need a new command              */

   8938 12 000351   000000 450000 xsym               STZ     COMMAND_STUFFED

     1980     8939    2               PRE_PARSED = '0'B;          /* And it'll need parsing             */

PL6.E3A0      #021=VPD$INITIALIZE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:43 Page:505  
   8939 12 000352   000000 450000 xsym               STZ     PRE_PARSED

     1981     8940    2               END;

   8940 12 000353   000361 710000 12                 TRA     s:8947

     1982     8941    1            ELSE                           /* Not an invocation                  */
     1983     8942    2            DO;

     1984     8943    2               ONE_TIME = 1;               /* A one-shot command                 */

   8943 12 000354   000001 236007                    LDQ     1,DL
        12 000355   000000 756000 xsym               STQ     ONE_TIME

     1985     8944    2               PRE_PARSED = '1'B;          /* We've already done the parsing     */

   8944 12 000356   400000 236003                    LDQ     -131072,DU
        12 000357   000000 756000 xsym               STQ     PRE_PARSED

     1986     8945    2               COMMAND_STUFFED = '1'B;     /* And we needn't READ it again       */

   8945 12 000360   000000 756000 xsym               STQ     COMMAND_STUFFED

     1987     8946    2               END;

     1988     8947    2           DO WHILE ('0'B);                /* Never do                           */

   8947 12 000361   000366 710000 12                 TRA     s:8951

     1989     8948    2   PARSE_ALT: ONE_TIME = 1;                /* Bad implicit call                  */

   8948 12 000362   000001 235007       PARSE_ALT    LDA     1,DL
        12 000363   000000 755000 xsym               STA     ONE_TIME

     1990     8949    2              ERR_FLG = '1'B;              /* Dont reparse this junk             */

   8949 12 000364   400000 236003                    LDQ     -131072,DU
PL6.E3A0      #021=VPD$INITIALIZE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:43 Page:506  
        12 000365   000000 756000 xsym               STQ     ERR_FLG

     1991     8950    2              END;

     1992     8951    1           IF ONE_TIME = 0

   8951 12 000366   000000 235000 xsym               LDA     ONE_TIME
        12 000367   000473 601000 12                 TNZ     s:8978

     1993     8952    1            THEN                           /* Not a one-shot                     */
     1994     8953    2            DO;                            /* We must select a greeting          */

     1995     8954    2               IF TEST_MODE=1

   8954 12 000370   000000 236000 xsym               LDQ     TEST_MODE
        12 000371   000001 116007                    CMPQ    1,DL
        12 000372   000401 601000 12                 TNZ     s:8961

     1996     8955    2                THEN
     1997     8956    3                DO;

     1998     8957    3                   FROM_SYS = '1'B;

   8957 12 000373   400000 236003                    LDQ     -131072,DU
        12 000374   000000 756000 xsym               STQ     FROM_SYS

     1999     8958    3                   GREET_BUF = 'PCL TEST-MODE HERE';

   8958 12 000375   040000 100400                    MLR     fill='040'O
        12 000376   000327 000022 10                 ADSC9   XUG_INIT+37              cn=0,n=18
        12 000377   000000 000036 11                 ADSC9   GREET_BUF                cn=0,n=30

     2000     8959    3                   END;

   8959 12 000400   000457 710000 12                 TRA     s:8972

     2001     8960    2                ELSE
PL6.E3A0      #021=VPD$INITIALIZE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:43 Page:507  
     2002     8961    2                  IF B$JIT$ -> B$JIT.RUNFLAGS & %RUN_PROC#

   8961 12 000401   000000 470400 xsym               LDP0    B$JIT$
        12 000402   000314 236100                    LDQ     204,,PR0
        12 000403   000022 736000                    QLS     18
        12 000404   777000 376003                    ANQ     -512,DU
        12 000405   002000 376003                    ANQ     1024,DU
        12 000406   000436 600000 12                 TZE     s:8969

     2003     8962    2                   THEN                    /* PCL is running as a processor      */
     2004     8963    3                   DO;

     2005     8964    3                      FROM_SYS = '1'B;     /* Set a flag bit                     */

   8964 12 000407   400000 236003                    LDQ     -131072,DU
        12 000410   000000 756000 xsym               STQ     FROM_SYS

     2006     8965    3                      CALL CONCAT(GREET_BUF,'PCL ',ADDR(B_VERSION) -> TEXT$C.TEXT,
              8965                               ' here');

   8965 12 000411   000000 236000 xsym               LDQ     B_VERSION
        12 000412   000033 772000                    QRL     27
        12 000413   000000 620006                    EAX0    0,QL
        12 000414   000327 236000 10                 LDQ     XUG_INIT+37
        12 000415   000000 756000 11                 STQ     GREET_BUF
        12 000416   040000 100440                    MLR     fill='040'O
        12 000417   000000 200010 xsym               ADSC9   B_VERSION                cn=1,n=*X0
        12 000420   000001 000032 11                 ADSC9   GREET_BUF+1              cn=0,n=26
        12 000421   000000 636010                    EAQ     0,X0
        12 000422   000022 772000                    QRL     18
        12 000423   000032 116007                    CMPQ    26,DL
        12 000424   000435 603000 12                 TRC     s:8966
        12 000425   200052 740100                    STX0    I+1,,AUTO
        12 000426   777745 620010                    EAX0    -27,X0
        12 000427   777777 660003                    ERX0    -1,DU
        12 000430   200052 236100                    LDQ     I+1,,AUTO
        12 000431   000022 772000                    QRL     18
PL6.E3A0      #021=VPD$INITIALIZE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:43 Page:508  
        12 000432   040046 100400                    MLR     fill='040'O
        12 000433   000334 000005 10                 ADSC9   XUG_INIT+42              cn=0,n=5
        12 000434   000001 000010 11                 ADSC9   GREET_BUF+1,Q            cn=0,n=*X0

     2007     8966    3                      END;

   8966 12 000435   000457 710000 12                 TRA     s:8972

     2008     8967    2                   ELSE                    /* PCL is running as a user           */
     2009     8968    3                   DO;

     2010     8969    3                      FROM_SYS = '0'B;

   8969 12 000436   000000 450000 xsym               STZ     FROM_SYS

     2011     8970    3                      CALL CONCAT(GREET_BUF,'Bootleg PCL ',ADDR(B_VERSION) -> TEXT$C.
              8970                               TEXT,' here');

   8970 12 000437   000000 236000 xsym               LDQ     B_VERSION
        12 000440   000033 772000                    QRL     27
        12 000441   040000 100400                    MLR     fill='040'O
        12 000442   000336 000014 10                 ADSC9   XUG_INIT+44              cn=0,n=12
        12 000443   000000 000014 11                 ADSC9   GREET_BUF                cn=0,n=12
        12 000444   000000 620006                    EAX0    0,QL
        12 000445   040000 100440                    MLR     fill='040'O
        12 000446   000000 200010 xsym               ADSC9   B_VERSION                cn=1,n=*X0
        12 000447   000003 000022 11                 ADSC9   GREET_BUF+3              cn=0,n=18
        12 000450   000022 116007                    CMPQ    18,DL
        12 000451   000457 603000 12                 TRC     s:8972
        12 000452   777755 621006                    EAX1    -19,QL
        12 000453   777777 661003                    ERX1    -1,DU
        12 000454   040046 100400                    MLR     fill='040'O
        12 000455   000334 000005 10                 ADSC9   XUG_INIT+42              cn=0,n=5
        12 000456   000003 000011 11                 ADSC9   GREET_BUF+3,Q            cn=0,n=*X1

     2012     8971    3                      END;

PL6.E3A0      #021=VPD$INITIALIZE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:43 Page:509  
     2013     8972    2               FPT_WRITE_ME.V.DVBYTE.VFC# = %NO#;

   8972 12 000457   000013 236000 13                 LDQ     11
        12 000460   000013 356000 xsym               ANSQ    FPT_WRITE_ME+11

     2014     8973    2               FPT_WRITE_ME.BUF_ = VECTOR(GREET_BUF);

   8973 12 000461   000014 237000 13                 LDAQ    12
        12 000462   000004 757000 xsym               STAQ    FPT_WRITE_ME+4

     2015     8974    2               IF B$JIT$ -> B$JIT.MODE ~= %M_TP#

   8974 12 000463   000000 470400 xsym               LDP0    B$JIT$
        12 000464   000000 236100                    LDQ     0,,PR0
        12 000465   740000 376003                    ANQ     -16384,DU
        12 000466   200000 116003                    CMPQ    65536,DU
        12 000467   000473 600000 12                 TZE     s:8978

     2016     8975    2                THEN                       /* Greet him, he's not a TP user      */
     2017     8976    2                  CALL M$WRITE(FPT_WRITE_ME); /* OUTPUT A GREETING               */

   8976 12 000470   000000 630400 xsym               EPPR0   FPT_WRITE_ME
        12 000471   040001 713400                    CLIMB   write
        12 000472   401400 401760                    pmme    nvectors=4

     2018     8977    2               END;

     2019     8978    1           FPT_OPEN_EI_SAVE = FPT_OPEN_EI;

   8978 12 000473   000000 100400                    MLR     fill='000'O
        12 000474   000000 000350 xsym               ADSC9   FPT_OPEN_EI              cn=0,n=232
        12 000475   000000 000350 xsym               ADSC9   FPT_OPEN_EI_SAVE         cn=0,n=232

     2020     8979    1           FPT_OPEN_OUT_SAVE = FPT_OPEN_OUT;

   8979 12 000476   000000 100400                    MLR     fill='000'O
        12 000477   000000 000350 xsym               ADSC9   FPT_OPEN_OUT             cn=0,n=232
PL6.E3A0      #021=VPD$INITIALIZE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:43 Page:510  
        12 000500   000000 000350 xsym               ADSC9   FPT_OPEN_OUT_SAVE        cn=0,n=232

     2021     8980    1           CALL VPD$INIT_BUF;

   8980 12 000501   000002 631400 xsym               EPPR1   B_VECTNIL+2
        12 000502   000000 701000 xent               TSX1    VPD$INIT_BUF
        12 000503   000000 011000                    NOP     0

     2022     8981    1   END VPD$INITIALIZE;

   8981 12 000504   000000 702200 xent               TSX2  ! X66_ARET
     2023     8982        %EOD;

PL6.E3A0      #021=VPD$INITIALIZE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:43 Page:511  
--  Include file information  --

   XUG_ENTRY.:E05TOU  cannot be made into a system file and is referenced.
   F$DCB.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$INITIALIZE.
PL6.E3A0      #021=VPD$INITIALIZE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:43 Page:512  

 **** Variables and constants ****

  ****  Section 010 RoData VPD$INITIALIZE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   164-0-0/d STRC(144)   r     1 FPT_INT                   72-0-0/d STRC(2088)  r     1 FPT_OPEN_DO
     0-0-0/d STRC(2088)  r     1 FPT_OPEN_ME              170-0-0/d STRC(2088)  r     1 FPT_SETUP_EO
   262-0-0/d STRC(1296)  r     1 XUG_INIT

  ****  Section 011  Data  VPD$INITIALIZE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c CHAR(30)    r     1 GREET_BUF

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    50-0-0/w UBIN        r     1 BAD_DCB_NUM                3-0-0/w UBIN        r     1 CODE
    51-0-0/w UBIN        r     1 I                          4-0-0/d STRC(1296)  r     1 XUG_INIT_AUTO

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d REMB        r     1 ABORT_CMD                  0-0-0/w PTR         r     1 B$JIT$
     0-0-0/d REMB        r     1 BREAK_LOC                  0-0-0/d BIT (72)    r     1 BREAK_LOC_BITS
     0-0-0/w EPTR        r     1 BREAK_MESSAGE_REPORTER
     0-0-0/c CHAR        r     1 B_VERSION                  0-0-0/b BIT         r     1 COMMAND_STUFFED
     0-0-0/d STRC(6840)  r     1 EO_OCB                     0-0-0/b STRC        r     1 ERR_CODE
     0-0-0/w BIT         r     1 ERR_FLG                    0-0-0/d STRC(2088)  r     1 FPT_OPEN_EI
PL6.E3A0      #021=VPD$INITIALIZE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:43 Page:513  
     0-0-0/d STRC(2088)  r     1 FPT_OPEN_EI_SAVE           0-0-0/d STRC(2088)  r     1 FPT_OPEN_OUT
     0-0-0/d STRC(2088)  r     1 FPT_OPEN_OUT_SAVE          0-0-0/d STRC(432)   r     1 FPT_WRITE_ME
     0-0-0/b BIT         r     1 FROM_SYS                   0-0-0/d STRC(1512)  r     1 GETCMD
     0-0-0/w PTR         r     1 KEY_AREA$                  0-0-0/w SBIN        r     1 M$DO#
     0-0-0/w PTR         r     1 M$DO$                      0-0-0/w SBIN        r     1 M$EI#
     0-0-0/w PTR         r     1 M$EI$                      0-0-0/w SBIN        r     1 M$EO#
     0-0-0/w PTR         r     1 M$EO$                      0-0-0/w SBIN        r     1 M$EO1#
     0-0-0/w PTR         r     1 M$EO1$                     0-0-0/w SBIN        r     1 M$ME#
     0-0-0/w PTR         r     1 M$ME$                      0-0-0/w SBIN        r     1 M$READFILE#
     0-0-0/w PTR         r     1 M$READFILE$                0-0-0/w SBIN        r     1 M$SI#
     0-0-0/w PTR         r     1 M$SI$                      0-0-0/w SBIN        r     1 M$SORT1#
     0-0-0/w PTR         r     1 M$SORT1$                   0-0-0/w SBIN        r     1 M$STD1#
     0-0-0/w PTR         r     1 M$STD1$                    0-0-0/w SBIN        r     1 M$UC#
     0-0-0/w PTR         r     1 M$UC$                      0-0-0/w UBIN        r     1 ME_WIDTH
     0-0-0/w SBIN        r     1 ONE_TIME
     0-0-0/w SBIN        r     1 PARSE_WORK_AREA(0:512)
     0-0-0/w STRC(504)   r     1 PCB                        0-0-0/b BIT         r     1 PRE_PARSED
     0-0-0/w PTR         r     1 STD_WORK$                  0-0-0/b BIT         r     1 SUCCESS_NODE
     0-0-0/b UBIN(9)     r     1 TABS(0:30)                 0-0-0/w SBIN        r     1 TEST_MODE
     0-0-0/c STRC        r     1 TEST_PATTERN               0-0-0/b BIT         r     1 TOP_PCL_CMD

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(8856)  r     1 B$JIT                      0-0-0/d ASTR(3528)  r     1 F$DCB
     0-0-0N  NULL        r     1 M$DO                       0-0-0N  NULL        r     1 M$EO
     0-0-0N  NULL        r     1 M$ME                       0-0-0/w STRC(144)   r     1 OUT$BLK
     0-0-0/c ASTR(9)     r     1 TEXT$C


   Procedure VPD$INITIALIZE requires 325 words for executable code.
   Procedure VPD$INITIALIZE requires 50 words of local(AUTO) storage.
PL6.E3A0      #021=VPD$INITIALIZE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:43 Page:514  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #021=VPD$INITIALIZE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:43 Page:515  
          MINI XREF LISTING

ABORT_CMD
      5187**DCL      8846<<REMEMBR
B$JIT.CCARS
      7104**DCL      8911>>IF       8919>>ASSIGN
B$JIT.CCBUF
      7104**DCL      8916>>DOWHILE  8919--ASSIGN
B$JIT.CPFLAGS1.SLEAZE
      7110**DCL      7110--REDEF
B$JIT.ERR.MID
      7017**DCL      7017--REDEF
B$JIT.JRESPEAK
      7178**DCL      7179--REDEF
B$JIT.MODE
      7011**DCL      8974>>IF
B$JIT.ORIGINATOR_PORT.FROM_CR
      7287**DCL      7287--REDEF    7288--REDEF
B$JIT.PNR
      7191**DCL      7191--REDEF
B$JIT.RUNFLAGS
      7212**DCL      8961>>IF
B$JIT.SWITCH
      7104**DCL      8859>>IF
B$JIT.TSLINE
      7285**DCL      7286--REDEF
B$JIT$
      5987**DCL      7011--IMP-PTR  8859>>IF       8911>>IF       8916>>DOWHILE  8919>>ASSIGN   8919>>ASSIGN
      8961>>IF       8974>>IF
BAD_DCB_NUM
      8544**DCL      8874<<ASSIGN   8892<<ASSIGN   8901<>CALL
BAD_DIAG_DCB
      8901**LABEL    8877--CALLALT  8883--GOTO     8895--CALLALT
BREAK_LOC
PL6.E3A0      #021=VPD$INITIALIZE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:43 Page:516  
      5222**DCL      5222--REDEF
BREAK_LOC_BITS
      5222**DCL      8843<<ASSIGN
B_VERSION
      8540**DCL      8965--CALLBLT  8965--CALLBLT  8970--CALLBLT  8970--CALLBLT
CODE
      7570**DCL      8913<<ASSIGN   8923<<ASSIGN   8926<<ASSIGN   8927>>IF       8934>>IF
COMMAND_STUFFED
      4557**DCL      8938<<ASSIGN   8945<<ASSIGN
DEF_ICB.FID.STRING
      5820**DCL      5821--REDEF
DEV_ICB.FID.STRING
      5706**DCL      5707--REDEF
EI_KEY.KEY
      5918**DCL      5918--REDEF    5918--REDEF    5918--REDEF
EO_OCB
      5372**DCL      8868<<ASSIGN
EO_OCB.DEV_MASK
      5452**DCL      8869<<ASSIGN
EO_OCB.TYPE
      5418**DCL      5419--REDEF
ERR_CODE
      5188**DCL      8848<<ASSIGN
ERR_FLG
      5185**DCL      8949<<ASSIGN
F$DCB.ACTPOS
      7318**DCL      7318--REDEF
F$DCB.ARS
      7293**DCL      7293--REDEF
F$DCB.ATTR
      7311**DCL      7312--REDEF
F$DCB.BORROW
      7326**DCL      7326--REDEF    7326--REDEF    7326--REDEF
F$DCB.DCBNAME.L
      7340**DCL      7340--IMP-SIZ
F$DCB.DDEV.IC
PL6.E3A0      #021=VPD$INITIALIZE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:43 Page:517  
      7299**DCL      8864>>IF
F$DCB.EOMCHAR
      7297**DCL      7297--REDEF
F$DCB.FCD
      7306**DCL      8875>>IF       8893>>IF
F$DCB.FLDID
      7321**DCL      7321--REDEF
F$DCB.FORM$
      7315**DCL      7315--REDEF
F$DCB.FSECT
      7331**DCL      7331--REDEF
F$DCB.FSN
      7308**DCL      7308--REDEF    7308--REDEF    7309--REDEF
F$DCB.HEADER$
      7314**DCL      7314--REDEF
F$DCB.IXTNSIZE
      7312**DCL      7312--REDEF
F$DCB.LASTSTA$
      7302**DCL      7302--REDEF
F$DCB.LVL
      7327**DCL      7327--REDEF
F$DCB.NAME.C
      7302**DCL      7302--REDEF
F$DCB.NOEOF
      7323**DCL      7323--REDEF
F$DCB.NRECS
      7313**DCL      7313--REDEF
F$DCB.NRECX
      7332**DCL      7332--REDEF
F$DCB.OHDR
      7324**DCL      7324--REDEF
F$DCB.ORG
      7307**DCL      7307--REDEF    8878>>IF       8878>>IF       8878>>IF       8878>>IF       8896>>IF
      8896>>IF       8896>>IF       8896>>IF
F$DCB.PRECNO
      7330**DCL      7330--REDEF
PL6.E3A0      #021=VPD$INITIALIZE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:43 Page:518  
F$DCB.RCSZ
      7335**DCL      7335--REDEF
F$DCB.RES
      7303**DCL      7303--REDEF
F$DCB.SETX
      7315**DCL      7315--REDEF
F$DCB.TAB$
      7314**DCL      7315--REDEF
F$DCB.TDA
      7329**DCL      7329--REDEF
F$DCB.WIDTH
      7300**DCL      8884>>ASSIGN
F$DCB.WSN
      7304**DCL      7304--REDEF
FPT_CLOSE_EI.SN_
      6759**DCL      6759--REDEF
FPT_CLOSE_EI.UTL_
      6760**DCL      6760--REDEF
FPT_CLOSE_EI.V.EXPIRE#
      6774**DCL      6774--REDEF
FPT_CLOSE_EI.V.TYPE#
      6772**DCL      6772--REDEF
FPT_CLOSE_EI.V.XTNSIZE#
      6769**DCL      6769--REDEF    6771--REDEF
FPT_CLOSE_PTL.SN_
      6885**DCL      6885--REDEF
FPT_CLOSE_PTL.UTL_
      6886**DCL      6886--REDEF
FPT_CLOSE_PTL.V.EXPIRE#
      6900**DCL      6900--REDEF
FPT_CLOSE_PTL.V.TYPE#
      6898**DCL      6898--REDEF
FPT_CLOSE_PTL.V.XTNSIZE#
      6895**DCL      6895--REDEF    6897--REDEF
FPT_CLOSE_READ.SN_
      6801**DCL      6801--REDEF
PL6.E3A0      #021=VPD$INITIALIZE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:43 Page:519  
FPT_CLOSE_READ.UTL_
      6802**DCL      6802--REDEF
FPT_CLOSE_READ.V.EXPIRE#
      6816**DCL      6816--REDEF
FPT_CLOSE_READ.V.TYPE#
      6814**DCL      6814--REDEF
FPT_CLOSE_READ.V.XTNSIZE#
      6811**DCL      6811--REDEF    6813--REDEF
FPT_CLOSE_SI.SN_
      6969**DCL      6969--REDEF
FPT_CLOSE_SI.UTL_
      6970**DCL      6970--REDEF
FPT_CLOSE_SI.V.EXPIRE#
      6984**DCL      6984--REDEF
FPT_CLOSE_SI.V.TYPE#
      6982**DCL      6982--REDEF
FPT_CLOSE_SI.V.XTNSIZE#
      6979**DCL      6979--REDEF    6981--REDEF
FPT_CLOSE_STD.SN_
      6927**DCL      6927--REDEF
FPT_CLOSE_STD.UTL_
      6928**DCL      6928--REDEF
FPT_CLOSE_STD.V.EXPIRE#
      6942**DCL      6942--REDEF
FPT_CLOSE_STD.V.TYPE#
      6940**DCL      6940--REDEF
FPT_CLOSE_STD.V.XTNSIZE#
      6937**DCL      6937--REDEF    6939--REDEF
FPT_CLSEI_FT.SN_
      6843**DCL      6843--REDEF
FPT_CLSEI_FT.UTL_
      6844**DCL      6844--REDEF
FPT_CLSEI_FT.V.EXPIRE#
      6858**DCL      6858--REDEF
FPT_CLSEI_FT.V.TYPE#
      6856**DCL      6856--REDEF
PL6.E3A0      #021=VPD$INITIALIZE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:43 Page:520  
FPT_CLSEI_FT.V.XTNSIZE#
      6853**DCL      6853--REDEF    6855--REDEF
FPT_INT
      7584**DCL      8866<>CALL
FPT_INT.V
      7584**DCL      7584--DCLINIT
FPT_OPEN_DO
      7526**DCL      8895<>CALL
FPT_OPEN_DO.ACSVEH_
      7528**DCL      7529--REDEF
FPT_OPEN_DO.ALTKEYS_
      7534**DCL      7535--REDEF    7535--REDEF
FPT_OPEN_DO.HDR_
      7533**DCL      7534--REDEF
FPT_OPEN_DO.TAB_
      7532**DCL      7533--REDEF
FPT_OPEN_DO.UHL_
      7526**DCL      7527--REDEF    7527--REDEF
FPT_OPEN_DO.V
      7535**DCL      7526--DCLINIT
FPT_OPEN_DO.V.FSN#
      7566**DCL      7566--REDEF    7566--REDEF
FPT_OPEN_DO.WSN_
      7532**DCL      7532--REDEF
FPT_OPEN_EI
      6412**DCL      8978>>ASSIGN
FPT_OPEN_EI.ACSVEH_
      6414**DCL      6415--REDEF
FPT_OPEN_EI.ALTKEYS_
      6420**DCL      6421--REDEF    6421--REDEF
FPT_OPEN_EI.HDR_
      6419**DCL      6420--REDEF
FPT_OPEN_EI.TAB_
      6418**DCL      6419--REDEF
FPT_OPEN_EI.UHL_
      6412**DCL      6413--REDEF    6413--REDEF
PL6.E3A0      #021=VPD$INITIALIZE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:43 Page:521  
FPT_OPEN_EI.V.FSN#
      6452**DCL      6452--REDEF    6452--REDEF
FPT_OPEN_EI.WSN_
      6418**DCL      6418--REDEF
FPT_OPEN_EI_SAVE
      6521**DCL      8978<<ASSIGN
FPT_OPEN_EI_SAVE.ACSVEH_
      6523**DCL      6524--REDEF
FPT_OPEN_EI_SAVE.ALTKEYS_
      6529**DCL      6530--REDEF    6530--REDEF
FPT_OPEN_EI_SAVE.HDR_
      6528**DCL      6529--REDEF
FPT_OPEN_EI_SAVE.TAB_
      6527**DCL      6528--REDEF
FPT_OPEN_EI_SAVE.UHL_
      6521**DCL      6522--REDEF    6522--REDEF
FPT_OPEN_EI_SAVE.V.FSN#
      6561**DCL      6561--REDEF    6561--REDEF
FPT_OPEN_EI_SAVE.WSN_
      6527**DCL      6527--REDEF
FPT_OPEN_ME
      7412**DCL      8877<>CALL
FPT_OPEN_ME.ACSVEH_
      7414**DCL      7415--REDEF
FPT_OPEN_ME.ALTKEYS_
      7420**DCL      7421--REDEF    7421--REDEF
FPT_OPEN_ME.HDR_
      7419**DCL      7420--REDEF
FPT_OPEN_ME.TAB_
      7418**DCL      7419--REDEF
FPT_OPEN_ME.UHL_
      7412**DCL      7413--REDEF    7413--REDEF
FPT_OPEN_ME.V
      7421**DCL      7412--DCLINIT
FPT_OPEN_ME.V.FSN#
      7452**DCL      7452--REDEF    7452--REDEF
PL6.E3A0      #021=VPD$INITIALIZE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:43 Page:522  
FPT_OPEN_ME.WSN_
      7418**DCL      7418--REDEF
FPT_OPEN_OUT
      6303**DCL      8979>>ASSIGN
FPT_OPEN_OUT.ACSVEH_
      6305**DCL      6306--REDEF
FPT_OPEN_OUT.ALTKEYS_
      6311**DCL      6312--REDEF    6312--REDEF
FPT_OPEN_OUT.HDR_
      6310**DCL      6311--REDEF
FPT_OPEN_OUT.TAB_
      6309**DCL      6310--REDEF
FPT_OPEN_OUT.UHL_
      6303**DCL      6304--REDEF    6304--REDEF
FPT_OPEN_OUT.V.FSN#
      6343**DCL      6343--REDEF    6343--REDEF
FPT_OPEN_OUT.WSN_
      6309**DCL      6309--REDEF
FPT_OPEN_OUT_SAVE
      6194**DCL      8979<<ASSIGN
FPT_OPEN_OUT_SAVE.ACSVEH_
      6196**DCL      6197--REDEF
FPT_OPEN_OUT_SAVE.ALTKEYS_
      6202**DCL      6203--REDEF    6203--REDEF
FPT_OPEN_OUT_SAVE.HDR_
      6201**DCL      6202--REDEF
FPT_OPEN_OUT_SAVE.TAB_
      6200**DCL      6201--REDEF
FPT_OPEN_OUT_SAVE.UHL_
      6194**DCL      6195--REDEF    6195--REDEF
FPT_OPEN_OUT_SAVE.V.FSN#
      6234**DCL      6234--REDEF    6234--REDEF
FPT_OPEN_OUT_SAVE.WSN_
      6200**DCL      6200--REDEF
FPT_READ_STD.STATION_
      6624**DCL      6625--REDEF
PL6.E3A0      #021=VPD$INITIALIZE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:43 Page:523  
FPT_READ_STD.V.DVBYTE.REREAD#
      6636**DCL      6636--REDEF
FPT_READ_STD.V.INDX#
      6634**DCL      6634--REDEF
FPT_READ_UC.STATION_
      6585**DCL      6586--REDEF
FPT_READ_UC.V.DVBYTE.REREAD#
      6597**DCL      6597--REDEF
FPT_READ_UC.V.INDX#
      6595**DCL      6595--REDEF
FPT_SETUP_EO
      7657**DCL      8870<>CALL
FPT_SETUP_EO.ACSVEH_
      7659**DCL      7660--REDEF
FPT_SETUP_EO.ALTKEYS_
      7665**DCL      7666--REDEF    7666--REDEF
FPT_SETUP_EO.HDR_
      7664**DCL      7665--REDEF
FPT_SETUP_EO.TAB_
      7663**DCL      7664--REDEF
FPT_SETUP_EO.UHL_
      7657**DCL      7658--REDEF    7658--REDEF
FPT_SETUP_EO.V
      7666**DCL      7657--DCLINIT
FPT_SETUP_EO.V.FSN#
      7697**DCL      7697--REDEF    7697--REDEF
FPT_SETUP_EO.WSN_
      7663**DCL      7663--REDEF
FPT_WRITE_ME
      6691**DCL      8976<>CALL
FPT_WRITE_ME.BUF_
      6691**DCL      8973<<ASSIGN
FPT_WRITE_ME.STATION_
      6693**DCL      6693--REDEF
FPT_WRITE_ME.V.DVBYTE.VFC#
      6700**DCL      6700--REDEF    8972<<ASSIGN
PL6.E3A0      #021=VPD$INITIALIZE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:43 Page:524  
FPT_WRITE_OUT.STATION_
      6724**DCL      6724--REDEF
FPT_WRITE_OUT.V.DVBYTE.VFC#
      6731**DCL      6731--REDEF
FPT_WRITE_UC.STATION_
      6662**DCL      6662--REDEF
FPT_WRITE_UC.V.DVBYTE.VFC#
      6669**DCL      6669--REDEF
FROM_SN.SN
      5568**DCL      5569--REDEF
FROM_SYS
      5221**DCL      8957<<ASSIGN   8964<<ASSIGN   8969<<ASSIGN
GETCMD
      4770**DCL      8835<>CALL     8921<>CALL
GETCMD.DCB2_PARAM#
      4955**DCL      8841<<ASSIGN
GETCMD.DCB_PARAM#
      4950**DCL      8840<<ASSIGN
GETCMD.NODES$
      4771**DCL      8842<<ASSIGN
GETCMD.OUT$
      4775**DCL      4781--REDEF    8922>>IF       8925>>ASSIGN
GETCMD.OUTDCB#
      4946**DCL      8839<<ASSIGN
GETCMD.TEXT_
      5033**DCL      8919<<ASSIGN   8920<<ASSIGN   8920>>ASSIGN
GREET_BUF
      8539**DCL      8958<<ASSIGN   8965<<CALLBLT  8970<<CALLBLT  8973--ASSIGN
I
      8545**DCL      8915<<ASSIGN   8916>>DOWHILE  8917<<ASSIGN   8917>>ASSIGN   8919>>ASSIGN   8920>>ASSIGN
ICB.FID.STRING
      5592**DCL      5593--REDEF
IFSFA_PARAM.EOMCHAR#
      5947**DCL      5948--REDEF
IFSFA_PARAM.SIG1
      5941**DCL      5941--REDEF
PL6.E3A0      #021=VPD$INITIALIZE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:43 Page:525  
IFSFA_PARAM.SIG2
      5941**DCL      5942--REDEF
IN_RES
      5514**DCL      5514--REDEF
IN_SN.SN
      5530**DCL      5531--REDEF
KEY_AREA$
      5919**DCL      8845<<ASSIGN
M$DO
      5985**DCL      8892>>ASSIGN
M$DO#
      5986**DCL      8841>>ASSIGN   8854--ASSIGN
M$DO$
      5986**DCL      8854<<ASSIGN   8893>>IF       8896>>IF       8896>>IF       8896>>IF       8896>>IF
M$EI#
      5983**DCL      8849--ASSIGN
M$EI$
      5983**DCL      8849<<ASSIGN
M$EO#
      5983**DCL      8850--ASSIGN
M$EO$
      5983**DCL      8850<<ASSIGN
M$EO1#
      5984**DCL      8851--ASSIGN
M$EO1$
      5984**DCL      8851<<ASSIGN
M$ERR
        44**DCL-ENT  8837--CALL
M$INT
        87**DCL-ENT  8866--CALL
M$ME
      5984**DCL      8874>>ASSIGN
M$ME#
      5984**DCL      8839>>ASSIGN   8840>>ASSIGN   8852--ASSIGN
M$ME$
      5984**DCL      8852<<ASSIGN   8875>>IF       8878>>IF       8878>>IF       8878>>IF       8878>>IF
PL6.E3A0      #021=VPD$INITIALIZE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:43 Page:526  
      8884>>ASSIGN
M$OPEN
        32**DCL-ENT  8870--CALL     8877--CALL     8895--CALL
M$READFILE#
      5985**DCL      8855--ASSIGN
M$READFILE$
      5985**DCL      8855<<ASSIGN
M$SI#
      5985**DCL      8853--ASSIGN
M$SI$
      5984**DCL      8853<<ASSIGN
M$SORT1#
      5987**DCL      8858--ASSIGN
M$SORT1$
      5987**DCL      8858<<ASSIGN
M$STD1#
      5987**DCL      8856--ASSIGN
M$STD1$
      5986**DCL      8856<<ASSIGN
M$UC#
      5986**DCL      8857--ASSIGN
M$UC$
      5986**DCL      8857<<ASSIGN   8864>>IF
M$WRITE
        33**DCL-ENT  8976--CALL
ME_WIDTH
      5224**DCL      8884<<ASSIGN   8885>>IF       8887<<ASSIGN   8889>>IF       8891<<ASSIGN
OCB.TYPE
      5276**DCL      5277--REDEF
OFSFA_PARAM.EOMCHAR#
      5977**DCL      5978--REDEF
OFSFA_PARAM.SIG1
      5971**DCL      5971--REDEF
OFSFA_PARAM.SIG2
      5971**DCL      5972--REDEF
ONE_TIME
PL6.E3A0      #021=VPD$INITIALIZE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:43 Page:527  
      5227**DCL      8937<<ASSIGN   8943<<ASSIGN   8948<<ASSIGN   8951>>IF
OUT$BLK.CODE
      8803**DCL      8926>>ASSIGN   8927>>IF
OUT$BLK.NSUBLKS
      8807**DCL      8927>>IF
OUT$BLK.SUBLK$
      8828**DCL      8927>>IF
OUT_SN.SN
      5548**DCL      5549--REDEF
PARSE_ALT
      8948**LABEL    8846--REMEMBR  8921--CALLALT
PARSE_WORK_AREA
      4556**DCL      8906--ASSIGN   8907--ASSIGN
PCB.CONTINUE
      4617**DCL      8909<<ASSIGN
PCB.OUT$
      4589**DCL      8925<<ASSIGN   8926>>ASSIGN   8927>>IF       8927>>IF
PCB.U$$
      4594**DCL      8908<<ASSIGN
PCB.WKSZ
      4606**DCL      8907<<ASSIGN
PCB.WORK$
      4585**DCL      8906<<ASSIGN
PRE_PARSED
      4557**DCL      8939<<ASSIGN   8944<<ASSIGN
SPEC_BUF
      5226**DCL      5226--REDEF
STD_WORK$
      4556**DCL      8844<<ASSIGN
SUCCESS_NODE
      4557**DCL      8910<<ASSIGN
TABS
      5228**DCL      8847<<ASSIGN
TEST_MODE
      5221**DCL      8861<<ASSIGN   8863<<ASSIGN   8911>>IF       8954>>IF
TEST_PATTERN
PL6.E3A0      #021=VPD$INITIALIZE File=VPD$UTIL.:E05TSI                          WED 07/30/97 07:43 Page:528  
      5218**DCL      8859>>IF
TEXT$C.COUNT
      8542**DCL      8543--IMP-SIZ  8965>>CALLBLT  8970>>CALLBLT
TEXT$C.TEXT
      8543**DCL      8965>>CALLBLT  8970>>CALLBLT
TOP_PCL_CMD
      5988**DCL      8842--ASSIGN
VPD$ABORT
      8562**DCL-ENT  7736--DCLINIT
VPD$BREAK
      8568**DCL-ENT  7751--DCLINIT
VPD$CONTINUE
      8555**DCL-ENT  7744--DCLINIT
VPD$INIT_BUF
      8585**DCL-ENT  8980--CALL
VPD$U$
      8634**DCL-ENT  8908--ASSIGN
VPK$PCL_INVOCATION
      8717**DCL-ENT  8931--CALL
VPL$ERR_PROC
      8731**DCL-ENT  8901--CALL
X$PRE_PROCESS
      8757**DCL-ENT  7831--DCLINIT
XTX$ADAPT
      7730**DCL-ENT  8046--DCLINIT
XUG$BREAK
      8775**DCL-ENT  7584--DCLINIT
XUG$GETCMD
      8765**DCL-ENT  8921--CALL
XUG$INIT
      8769**DCL-ENT  8835--CALL
XUG_INIT
      7735**DCL      8834>>ASSIGN
XUG_INIT_AUTO
      8148**DCL      8834<<ASSIGN   8835<>CALL

PL6.E3A0      #022=VPD$INIT_COMMANDS File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:45 Page:529  
     2024        1        /*T***********************************************************/
     2025        2        /*T*                                                         */
     2026        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2027        4        /*T*                                                         */
     2028        5        /*T***********************************************************/
     2029        6        VPD$INIT_COMMANDS: PROC;
     2030        7        /*D* NAME: VPD$INIT_COMMANDS
     2031        8             CALL: CALL VPD$INIT_COMMANDS;
     2032        9             DESCRIPTION: This procedure is to be invoked before any command is
     2033       10                          processed.  It performs necessary initialization that
     2034       11                          needs to be performed on a per-command basis.
     2035       12        */
     2036       13        /**/
     2037       14        /*  INCLUDES  */
     2038       15        /**/
     2039       16        %INCLUDE VP_DATA_R;
     2040     7003        %VP_ENTRIES(OMIT=VPD$INIT_COMMANDS);
     2041     7211        /**/
     2042     7212        /*  LOCAL CONSTANT  */
     2043     7213        /**/
     2044     7214        %FPT_TIME(FPTN = FPT_MAKE_NOW_UTS,
     2045     7215                  STCLASS = CONSTANT,
     2046     7216                  SOURCE = CLOCK,
     2047     7217                  DEST = UTS,
     2048     7218                  TSTAMP = NOW_UTS);
     2049     7237        /**/
     2050     7238        /*  LOCAL CONSTANTS  */
     2051     7239        /**/
     2052     7240    1   DCL PROMPT_2 CHAR(1) CONSTANT SYMDEF INIT('.');
     2053     7241        /**/
     2054     7242    1           IF NOT (CMD_MASK & '0040000004'O) /* NOT (NULL OR QUEST)              */
     2055     7243    1            THEN
     2056     7244    1              ERR_CODE = '000000000007'O;  /* Severity = 7                       */
     2057     7245    1           RESULTS_FID_FROM = '0'B;        /* CLEAR THE FROM INFORMATION         */
     2058     7246    1           TOT_FILES = '0'B;
     2059     7247    1           TOT_GRANS = '0'B;
     2060     7248    1           TOT_RECS=0;
PL6.E3A0      #022=VPD$INIT_COMMANDS File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:45 Page:530  
     2061     7249    1           PCB.WORK$ = ADDR(PARSE_WORK_AREA);
     2062     7250    1           PCB.WKSZ = SIZEW(PARSE_WORK_AREA);
     2063     7251    1           IF STD_WORK$ ~= ADDR(NIL)
     2064     7252    1            THEN
     2065     7253    1              CALL VPD$REL_BUF(STD_WORK$,1024);
     2066     7254    2           IF LIST_BUF$ ~=ADDR(NIL) THEN DO;
     2067     7255    2               CALL VPD$REL_BUF(LIST_BUF$,LIST_SIZE);
     2068     7256    2               LIST_SIZE=0;
     2069     7257    2               END;
     2070     7258    1           IF KEY_AREA$~=ADDR(NIL) THEN
     2071     7259    1              CALL VPD$REL_BUF(KEY_AREA$,2048);
     2072     7260    2           IF USER_LABELS$~=ADDR(NIL) THEN DO;
     2073     7261    2               CALL VPD$REL_BUF(USER_LABELS$,1024*8);
     2074     7262    2               USER_LABELS$=ADDR(NIL);
     2075     7263    2               END;
     2076     7264    1           DEF_ICB = '0'B;
     2077     7265    1           KEY_AREA$=ADDR(NIL);
     2078     7266    1           STD_WORK$ = ADDR(NIL);
     2079     7267    1           THIS_STD_FILE = '0'B;
     2080     7268    1           FPT_PROMPT.PROMPT_ = VECTOR(PROMPT_2);
     2081     7269    1           CALL M$PROMPT(FPT_PROMPT);
     2082     7270    1           CALL M$TIME (FPT_MAKE_NOW_UTS); /* Update NOW_UTS                     */
     2083     7271    1           RETURN;
     2084     7272    1   END VPD$INIT_COMMANDS;
     2085     7273        %EOD;

PL6.E3A0      #022=VPD$INIT_COMMANDS File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:45 Page:531  
--  Include file information  --

   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$INIT_COMMANDS.

   Procedure VPD$INIT_COMMANDS requires 74 words for executable code.
   Procedure VPD$INIT_COMMANDS requires 8 words of local(AUTO) storage.

PL6.E3A0      #022=VPD$INIT_COMMANDS File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:45 Page:532  

 Object Unit name= VPD$INIT_COMMANDS                          File name= VPD$UTIL.:E05TOU
 UTS= JUL 30 '97 07:45:09.20 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$EI
    2   DCB   even  none     0      0  M$EO
    3   DCB   even  none     0      0  M$EO1
    4   DCB   even  none     0      0  M$ME
    5   DCB   even  none     0      0  M$SI
    6   DCB   even  none     0      0  M$READFILE
    7   DCB   even  none     0      0  M$DO
    8   DCB   even  none     0      0  M$STD1
    9   DCB   even  none     0      0  M$SORT1
   10  RoData even  UTS     14     16  VPD$INIT_COMMANDS
   11   Proc  even  none    74    112  VPD$INIT_COMMANDS
   12  RoData even  none    14     16  VPD$INIT_COMMANDS

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    11      0   yes            yes      Std        0  VPD$INIT_COMMANDS

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
   10     14  PROMPT_2
PL6.E3A0      #022=VPD$INIT_COMMANDS File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:45 Page:533  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       2 VPD$REL_BUF
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AUTO_0
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  PARSE_WORK_AREA                       STD_WORK$
     PCB                                   ERR_CODE                              LIST_BUF$
     LIST_SIZE                             USER_LABELS$                          THIS_STD_FILE
     NOW_UTS                               BREAK_LOC                             BREAK_MESSAGE_REPORTER
     CMD_MASK                              TOT_FILES                             TOT_GRANS
     TOT_RECS                              SPEC_BUF                              IN_RES
     DEF_ICB                               KEY_AREA$                             M$EI
     M$EO                                  M$EO1                                 M$ME
     M$SI                                  M$READFILE                            M$DO
     M$STD1                                M$SORT1                               RESULTS_FID_FROM
     FPT_PROMPT                            B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #022=VPD$INIT_COMMANDS File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:45 Page:534  


     2024        1        /*T***********************************************************/
     2025        2        /*T*                                                         */
     2026        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2027        4        /*T*                                                         */
     2028        5        /*T***********************************************************/
     2029        6        VPD$INIT_COMMANDS: PROC;

      6 11 000000   000000 700200 xent  VPD$INIT_CO* TSX0  ! X66_AUTO_0
        11 000001   000010 000000                    ZERO    8,0

     2030        7        /*D* NAME: VPD$INIT_COMMANDS
     2031        8             CALL: CALL VPD$INIT_COMMANDS;
     2032        9             DESCRIPTION: This procedure is to be invoked before any command is
     2033       10                          processed.  It performs necessary initialization that
     2034       11                          needs to be performed on a per-command basis.
     2035       12        */
     2036       13        /**/
     2037       14        /*  INCLUDES  */
     2038       15        /**/
     2039       16        %INCLUDE VP_DATA_R;
     2040     7003        %VP_ENTRIES(OMIT=VPD$INIT_COMMANDS);
     2041     7211        /**/
     2042     7212        /*  LOCAL CONSTANT  */
     2043     7213        /**/
     2044     7214        %FPT_TIME(FPTN = FPT_MAKE_NOW_UTS,
     2045     7215                  STCLASS = CONSTANT,
     2046     7216                  SOURCE = CLOCK,
     2047     7217                  DEST = UTS,
     2048     7218                  TSTAMP = NOW_UTS);
     2049     7237        /**/
     2050     7238        /*  LOCAL CONSTANTS  */
     2051     7239        /**/
     2052     7240    1   DCL PROMPT_2 CHAR(1) CONSTANT SYMDEF INIT('.');
     2053     7241        /**/
     2054     7242    1           IF NOT (CMD_MASK & '0040000004'O) /* NOT (NULL OR QUEST)              */

PL6.E3A0      #022=VPD$INIT_COMMANDS File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:45 Page:535  
   7242 11 000002   000015 235000 10                 LDA     PROMPT_2+1
        11 000003   000000 236003                    LDQ     0,DU
        11 000004   200004 757100                    STAQ    4,,AUTO
        11 000005   000100 100400                    MLR     fill='000'O
        11 000006   000000 000010 xsym               ADSC9   CMD_MASK                 cn=0,n=8
        11 000007   200006 000010                    ADSC9   6,,AUTO                  cn=0,n=8
        11 000010   200006 237100                    LDAQ    6,,AUTO
        11 000011   200004 377100                    ANAQ    4,,AUTO
        11 000012   000015 601000 11                 TNZ     s:7245

     2055     7243    1            THEN
     2056     7244    1              ERR_CODE = '000000000007'O;  /* Severity = 7                       */

   7244 11 000013   000011 236000 xsym               LDQ     B_VECTNIL+9
        11 000014   000000 756000 xsym               STQ     ERR_CODE

     2057     7245    1           RESULTS_FID_FROM = '0'B;        /* CLEAR THE FROM INFORMATION         */

   7245 11 000015   000000 100400                    MLR     fill='000'O
        11 000016   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
        11 000017   000000 000044 xsym               ADSC9   RESULTS_FID_FROM         cn=0,n=36

     2058     7246    1           TOT_FILES = '0'B;

   7246 11 000020   000000 100400                    MLR     fill='000'O
        11 000021   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
        11 000022   000000 000024 xsym               ADSC9   TOT_FILES                cn=0,n=20

     2059     7247    1           TOT_GRANS = '0'B;

   7247 11 000023   000000 100400                    MLR     fill='000'O
        11 000024   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
        11 000025   000000 000024 xsym               ADSC9   TOT_GRANS                cn=0,n=20

     2060     7248    1           TOT_RECS=0;

   7248 11 000026   000000 450000 xsym               STZ     TOT_RECS
PL6.E3A0      #022=VPD$INIT_COMMANDS File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:45 Page:536  

     2061     7249    1           PCB.WORK$ = ADDR(PARSE_WORK_AREA);

   7249 11 000027   000000 236000 12                 LDQ     0
        11 000030   000002 756000 xsym               STQ     PCB+2

     2062     7250    1           PCB.WKSZ = SIZEW(PARSE_WORK_AREA);

   7250 11 000031   001001 220003                    LDX0    513,DU
        11 000032   000005 740000 xsym               STX0    PCB+5

     2063     7251    1           IF STD_WORK$ ~= ADDR(NIL)

   7251 11 000033   000000 236000 xsym               LDQ     STD_WORK$
        11 000034   000001 116000 xsym               CMPQ    B_VECTNIL+1
        11 000035   000042 600000 11                 TZE     s:7254

     2064     7252    1            THEN
     2065     7253    1              CALL VPD$REL_BUF(STD_WORK$,1024);

   7253 11 000036   000002 630400 12                 EPPR0   2
        11 000037   000020 631400 xsym               EPPR1   B_VECTNIL+16
        11 000040   000000 701000 xent               TSX1    VPD$REL_BUF
        11 000041   000000 011000                    NOP     0

     2066     7254    2           IF LIST_BUF$ ~=ADDR(NIL) THEN DO;

   7254 11 000042   000000 236000 xsym               LDQ     LIST_BUF$
        11 000043   000001 116000 xsym               CMPQ    B_VECTNIL+1
        11 000044   000052 600000 11                 TZE     s:7258

     2067     7255    2               CALL VPD$REL_BUF(LIST_BUF$,LIST_SIZE);

   7255 11 000045   000004 630400 12                 EPPR0   4
        11 000046   000020 631400 xsym               EPPR1   B_VECTNIL+16
        11 000047   000000 701000 xent               TSX1    VPD$REL_BUF
        11 000050   000000 011000                    NOP     0
PL6.E3A0      #022=VPD$INIT_COMMANDS File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:45 Page:537  

     2068     7256    2               LIST_SIZE=0;

   7256 11 000051   000000 450000 xsym               STZ     LIST_SIZE

     2069     7257    2               END;

     2070     7258    1           IF KEY_AREA$~=ADDR(NIL) THEN

   7258 11 000052   000000 236000 xsym               LDQ     KEY_AREA$
        11 000053   000001 116000 xsym               CMPQ    B_VECTNIL+1
        11 000054   000061 600000 11                 TZE     s:7260

     2071     7259    1              CALL VPD$REL_BUF(KEY_AREA$,2048);

   7259 11 000055   000007 630400 12                 EPPR0   7
        11 000056   000020 631400 xsym               EPPR1   B_VECTNIL+16
        11 000057   000000 701000 xent               TSX1    VPD$REL_BUF
        11 000060   000000 011000                    NOP     0

     2072     7260    2           IF USER_LABELS$~=ADDR(NIL) THEN DO;

   7260 11 000061   000000 236000 xsym               LDQ     USER_LABELS$
        11 000062   000001 116000 xsym               CMPQ    B_VECTNIL+1
        11 000063   000072 600000 11                 TZE     s:7264

     2073     7261    2               CALL VPD$REL_BUF(USER_LABELS$,1024*8);

   7261 11 000064   000012 630400 12                 EPPR0   10
        11 000065   000020 631400 xsym               EPPR1   B_VECTNIL+16
        11 000066   000000 701000 xent               TSX1    VPD$REL_BUF
        11 000067   000000 011000                    NOP     0

     2074     7262    2               USER_LABELS$=ADDR(NIL);

   7262 11 000070   000001 236000 xsym               LDQ     B_VECTNIL+1
        11 000071   000000 756000 xsym               STQ     USER_LABELS$
PL6.E3A0      #022=VPD$INIT_COMMANDS File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:45 Page:538  

     2075     7263    2               END;

     2076     7264    1           DEF_ICB = '0'B;

   7264 11 000072   000000 100400                    MLR     fill='000'O
        11 000073   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
        11 000074   000000 001214 xsym               ADSC9   DEF_ICB                  cn=0,n=652

     2077     7265    1           KEY_AREA$=ADDR(NIL);

   7265 11 000075   000001 236000 xsym               LDQ     B_VECTNIL+1
        11 000076   000000 756000 xsym               STQ     KEY_AREA$

     2078     7266    1           STD_WORK$ = ADDR(NIL);

   7266 11 000077   000000 756000 xsym               STQ     STD_WORK$

     2079     7267    1           THIS_STD_FILE = '0'B;

   7267 11 000100   000000 450000 xsym               STZ     THIS_STD_FILE

     2080     7268    1           FPT_PROMPT.PROMPT_ = VECTOR(PROMPT_2);

   7268 11 000101   000014 237000 12                 LDAQ    12
        11 000102   000004 757000 xsym               STAQ    FPT_PROMPT+4

     2081     7269    1           CALL M$PROMPT(FPT_PROMPT);

   7269 11 000103   000000 630400 xsym               EPPR0   FPT_PROMPT
        11 000104   160002 713400                    CLIMB   57346
        11 000105   401000 401760                    pmme    nvectors=3

     2082     7270    1           CALL M$TIME (FPT_MAKE_NOW_UTS); /* Update NOW_UTS                     */

   7270 11 000106   000000 630400 10                 EPPR0   FPT_MAKE_NOW_UTS
        11 000107   020004 713400                    CLIMB   8196
PL6.E3A0      #022=VPD$INIT_COMMANDS File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:45 Page:539  
        11 000110   402000 401760                    pmme    nvectors=5

     2083     7271    1           RETURN;

   7271 11 000111   000000 702200 xent               TSX2  ! X66_ARET
     2084     7272    1   END VPD$INIT_COMMANDS;
     2085     7273        %EOD;

PL6.E3A0      #022=VPD$INIT_COMMANDS File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:45 Page:540  
--  Include file information  --

   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$INIT_COMMANDS.
PL6.E3A0      #022=VPD$INIT_COMMANDS File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:45 Page:541  

 **** Variables and constants ****

  ****  Section 010 RoData VPD$INIT_COMMANDS

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(432)   r     1 FPT_MAKE_NOW_UTS          14-0-0/c CHAR        r     1 PROMPT_2

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w EPTR        r     1 BREAK_MESSAGE_REPORTER
     0-0-0/b BIT         r     1 CMD_MASK(0:71)
     0-0-0/d STRC(5868)  r     1 DEF_ICB                    0-0-0/b STRC        r     1 ERR_CODE
     0-0-0/d STRC(360)   r     1 FPT_PROMPT                 0-0-0/w PTR         r     1 KEY_AREA$
     0-0-0/w PTR         r     1 LIST_BUF$                  0-0-0/w UBIN        r     1 LIST_SIZE
     0-0-0/w UBIN        r     1 NOW_UTS
     0-0-0/w SBIN        r     1 PARSE_WORK_AREA(0:512)
     0-0-0/w STRC(504)   r     1 PCB                        0-0-0/d STRC(324)   r     1 RESULTS_FID_FROM
     0-0-0/w PTR         r     1 STD_WORK$                  0-0-0/b BIT         r     1 THIS_STD_FILE
     0-0-0/w SBIN        r     1 TOT_FILES(0:4)
     0-0-0/w SBIN        r     1 TOT_GRANS(0:4)
     0-0-0/w SBIN        r     1 TOT_RECS                   0-0-0/w PTR         r     1 USER_LABELS$


   Procedure VPD$INIT_COMMANDS requires 74 words for executable code.
   Procedure VPD$INIT_COMMANDS requires 8 words of local(AUTO) storage.
PL6.E3A0      #022=VPD$INIT_COMMANDS File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:45 Page:542  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #022=VPD$INIT_COMMANDS File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:45 Page:543  
          MINI XREF LISTING

BREAK_LOC
      5223**DCL      5223--REDEF
CMD_MASK
      5225**DCL      7242>>IF
DEF_ICB
      5802**DCL      7264<<ASSIGN
DEF_ICB.FID.STRING
      5821**DCL      5822--REDEF
DEV_ICB.FID.STRING
      5707**DCL      5708--REDEF
EI_KEY.KEY
      5919**DCL      5919--REDEF    5919--REDEF    5919--REDEF
EO_OCB.TYPE
      5419**DCL      5420--REDEF
ERR_CODE
      5189**DCL      7244<<ASSIGN
FPT_CLOSE_EI.SN_
      6760**DCL      6760--REDEF
FPT_CLOSE_EI.UTL_
      6761**DCL      6761--REDEF
FPT_CLOSE_EI.V.EXPIRE#
      6775**DCL      6775--REDEF
FPT_CLOSE_EI.V.TYPE#
      6773**DCL      6773--REDEF
FPT_CLOSE_EI.V.XTNSIZE#
      6770**DCL      6770--REDEF    6772--REDEF
FPT_CLOSE_PTL.SN_
      6886**DCL      6886--REDEF
FPT_CLOSE_PTL.UTL_
      6887**DCL      6887--REDEF
FPT_CLOSE_PTL.V.EXPIRE#
      6901**DCL      6901--REDEF
PL6.E3A0      #022=VPD$INIT_COMMANDS File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:45 Page:544  
FPT_CLOSE_PTL.V.TYPE#
      6899**DCL      6899--REDEF
FPT_CLOSE_PTL.V.XTNSIZE#
      6896**DCL      6896--REDEF    6898--REDEF
FPT_CLOSE_READ.SN_
      6802**DCL      6802--REDEF
FPT_CLOSE_READ.UTL_
      6803**DCL      6803--REDEF
FPT_CLOSE_READ.V.EXPIRE#
      6817**DCL      6817--REDEF
FPT_CLOSE_READ.V.TYPE#
      6815**DCL      6815--REDEF
FPT_CLOSE_READ.V.XTNSIZE#
      6812**DCL      6812--REDEF    6814--REDEF
FPT_CLOSE_SI.SN_
      6970**DCL      6970--REDEF
FPT_CLOSE_SI.UTL_
      6971**DCL      6971--REDEF
FPT_CLOSE_SI.V.EXPIRE#
      6985**DCL      6985--REDEF
FPT_CLOSE_SI.V.TYPE#
      6983**DCL      6983--REDEF
FPT_CLOSE_SI.V.XTNSIZE#
      6980**DCL      6980--REDEF    6982--REDEF
FPT_CLOSE_STD.SN_
      6928**DCL      6928--REDEF
FPT_CLOSE_STD.UTL_
      6929**DCL      6929--REDEF
FPT_CLOSE_STD.V.EXPIRE#
      6943**DCL      6943--REDEF
FPT_CLOSE_STD.V.TYPE#
      6941**DCL      6941--REDEF
FPT_CLOSE_STD.V.XTNSIZE#
      6938**DCL      6938--REDEF    6940--REDEF
FPT_CLSEI_FT.SN_
      6844**DCL      6844--REDEF
PL6.E3A0      #022=VPD$INIT_COMMANDS File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:45 Page:545  
FPT_CLSEI_FT.UTL_
      6845**DCL      6845--REDEF
FPT_CLSEI_FT.V.EXPIRE#
      6859**DCL      6859--REDEF
FPT_CLSEI_FT.V.TYPE#
      6857**DCL      6857--REDEF
FPT_CLSEI_FT.V.XTNSIZE#
      6854**DCL      6854--REDEF    6856--REDEF
FPT_MAKE_NOW_UTS
      7229**DCL      7270<>CALL
FPT_MAKE_NOW_UTS.V
      7233**DCL      7229--DCLINIT
FPT_OPEN_EI.ACSVEH_
      6415**DCL      6416--REDEF
FPT_OPEN_EI.ALTKEYS_
      6421**DCL      6422--REDEF    6422--REDEF
FPT_OPEN_EI.HDR_
      6420**DCL      6421--REDEF
FPT_OPEN_EI.TAB_
      6419**DCL      6420--REDEF
FPT_OPEN_EI.UHL_
      6413**DCL      6414--REDEF    6414--REDEF
FPT_OPEN_EI.V.FSN#
      6453**DCL      6453--REDEF    6453--REDEF
FPT_OPEN_EI.WSN_
      6419**DCL      6419--REDEF
FPT_OPEN_EI_SAVE.ACSVEH_
      6524**DCL      6525--REDEF
FPT_OPEN_EI_SAVE.ALTKEYS_
      6530**DCL      6531--REDEF    6531--REDEF
FPT_OPEN_EI_SAVE.HDR_
      6529**DCL      6530--REDEF
FPT_OPEN_EI_SAVE.TAB_
      6528**DCL      6529--REDEF
FPT_OPEN_EI_SAVE.UHL_
      6522**DCL      6523--REDEF    6523--REDEF
PL6.E3A0      #022=VPD$INIT_COMMANDS File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:45 Page:546  
FPT_OPEN_EI_SAVE.V.FSN#
      6562**DCL      6562--REDEF    6562--REDEF
FPT_OPEN_EI_SAVE.WSN_
      6528**DCL      6528--REDEF
FPT_OPEN_OUT.ACSVEH_
      6306**DCL      6307--REDEF
FPT_OPEN_OUT.ALTKEYS_
      6312**DCL      6313--REDEF    6313--REDEF
FPT_OPEN_OUT.HDR_
      6311**DCL      6312--REDEF
FPT_OPEN_OUT.TAB_
      6310**DCL      6311--REDEF
FPT_OPEN_OUT.UHL_
      6304**DCL      6305--REDEF    6305--REDEF
FPT_OPEN_OUT.V.FSN#
      6344**DCL      6344--REDEF    6344--REDEF
FPT_OPEN_OUT.WSN_
      6310**DCL      6310--REDEF
FPT_OPEN_OUT_SAVE.ACSVEH_
      6197**DCL      6198--REDEF
FPT_OPEN_OUT_SAVE.ALTKEYS_
      6203**DCL      6204--REDEF    6204--REDEF
FPT_OPEN_OUT_SAVE.HDR_
      6202**DCL      6203--REDEF
FPT_OPEN_OUT_SAVE.TAB_
      6201**DCL      6202--REDEF
FPT_OPEN_OUT_SAVE.UHL_
      6195**DCL      6196--REDEF    6196--REDEF
FPT_OPEN_OUT_SAVE.V.FSN#
      6235**DCL      6235--REDEF    6235--REDEF
FPT_OPEN_OUT_SAVE.WSN_
      6201**DCL      6201--REDEF
FPT_PROMPT
      6068**DCL      7269<>CALL
FPT_PROMPT.PROMPT_
      6074**DCL      7268<<ASSIGN
PL6.E3A0      #022=VPD$INIT_COMMANDS File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:45 Page:547  
FPT_READ_STD.STATION_
      6625**DCL      6626--REDEF
FPT_READ_STD.V.DVBYTE.REREAD#
      6637**DCL      6637--REDEF
FPT_READ_STD.V.INDX#
      6635**DCL      6635--REDEF
FPT_READ_UC.STATION_
      6586**DCL      6587--REDEF
FPT_READ_UC.V.DVBYTE.REREAD#
      6598**DCL      6598--REDEF
FPT_READ_UC.V.INDX#
      6596**DCL      6596--REDEF
FPT_WRITE_ME.STATION_
      6694**DCL      6694--REDEF
FPT_WRITE_ME.V.DVBYTE.VFC#
      6701**DCL      6701--REDEF
FPT_WRITE_OUT.STATION_
      6725**DCL      6725--REDEF
FPT_WRITE_OUT.V.DVBYTE.VFC#
      6732**DCL      6732--REDEF
FPT_WRITE_UC.STATION_
      6663**DCL      6663--REDEF
FPT_WRITE_UC.V.DVBYTE.VFC#
      6670**DCL      6670--REDEF
FROM_SN.SN
      5569**DCL      5570--REDEF
GETCMD.OUT$
      4776**DCL      4782--REDEF
ICB.FID.STRING
      5593**DCL      5594--REDEF
IFSFA_PARAM.EOMCHAR#
      5948**DCL      5949--REDEF
IFSFA_PARAM.SIG1
      5942**DCL      5942--REDEF
IFSFA_PARAM.SIG2
      5942**DCL      5943--REDEF
PL6.E3A0      #022=VPD$INIT_COMMANDS File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:45 Page:548  
IN_RES
      5515**DCL      5515--REDEF
IN_SN.SN
      5531**DCL      5532--REDEF
KEY_AREA$
      5920**DCL      7258>>IF       7259<>CALL     7265<<ASSIGN
LIST_BUF$
      5220**DCL      7254>>IF       7255<>CALL
LIST_SIZE
      5220**DCL      7255<>CALL     7256<<ASSIGN
M$PROMPT
        57**DCL-ENT  7269--CALL
M$TIME
       100**DCL-ENT  7270--CALL
NOW_UTS
      5222**DCL      7233--DCLINIT
OCB.TYPE
      5277**DCL      5278--REDEF
OFSFA_PARAM.EOMCHAR#
      5978**DCL      5979--REDEF
OFSFA_PARAM.SIG1
      5972**DCL      5972--REDEF
OFSFA_PARAM.SIG2
      5972**DCL      5973--REDEF
OUT_SN.SN
      5549**DCL      5550--REDEF
PARSE_WORK_AREA
      4557**DCL      7249--ASSIGN   7250--ASSIGN
PCB.WKSZ
      4607**DCL      7250<<ASSIGN
PCB.WORK$
      4586**DCL      7249<<ASSIGN
PROMPT_2
      7240**DCL      7268--ASSIGN
RESULTS_FID_FROM
      6044**DCL      7245<<ASSIGN
PL6.E3A0      #022=VPD$INIT_COMMANDS File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:45 Page:549  
SPEC_BUF
      5227**DCL      5227--REDEF
STD_WORK$
      4557**DCL      7251>>IF       7253<>CALL     7266<<ASSIGN
THIS_STD_FILE
      5221**DCL      7267<<ASSIGN
TOT_FILES
      5226**DCL      7246<<ASSIGN
TOT_GRANS
      5226**DCL      7247<<ASSIGN
TOT_RECS
      5227**DCL      7248<<ASSIGN
USER_LABELS$
      5220**DCL      7260>>IF       7261<>CALL     7262<<ASSIGN
VPD$REL_BUF
      7051**DCL-ENT  7253--CALL     7255--CALL     7259--CALL     7261--CALL

PL6.E3A0      #023=VPD$INIT_STD_FILE File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:46 Page:550  
     2086        1        /*T***********************************************************/
     2087        2        /*T*                                                         */
     2088        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2089        4        /*T*                                                         */
     2090        5        /*T***********************************************************/
     2091        6        VPD$INIT_STD_FILE: PROC(FID$);
     2092        7        /*D* NAME: VPD$INIT_STD_FILE
     2093        8             CALL: CALL VPD$INIT_STD_FILE(FID$);
     2094        9             DESCRIPTION: This procedure takes the file defined by the PARSE$SYM
     2095       10                          block pointed to by FID$ to a scratch file through M$STD1
     2096       11                          DCB and PFIL's to BOF ready to read.
     2097       12        */
     2098       13        %INCLUDE VP_DATA_R;
     2099     7000        %INCLUDE F$DCB;
     2100     7049        %B$TCB;
     2101     7052        %B$ALT;
     2102     7060        %INCLUDE B_ERRORS_C;
     2103     8187        %PARSE$SYM(NAME = OUT$SYM,STCLASS = BASED);
     2104     8225    1   DCL FID$ PTR;
     2105     8226        %FPT_FID(FPTN = FPT_FID_STD,
     2106     8227                 NAME = STD_NAME,
     2107     8228                 ACCT = STD_ACCT,
     2108     8229                 PASS = STD_PASS,
     2109     8230                 RES  = FPT_OPEN_STD_IN.V.RES#,
     2110     8231                 SN   = STD_SN,
     2111     8232                 WSN  = STD_WSN,
     2112     8233                 ASN  = FPT_OPEN_STD_IN.V.ASN#,
     2113     8234                 SNAME = YES,
     2114     8235                 SACCT = YES,
     2115     8236                 SPASS = YES,
     2116     8237                 SRES  = YES,
     2117     8238                 SSN   = YES,
     2118     8239                 SWSN  = YES,
     2119     8240                 RESULTS = RESULTS_FID_STD,
     2120     8241                 STCLASS = STATIC);
     2121     8264        %VLR_FID(FPTN = RESULTS_FID_STD,
     2122     8265                     STCLASS = STATIC);
PL6.E3A0      #023=VPD$INIT_STD_FILE File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:46 Page:551  
     2123     8284    1   DCL 1 STD_NAME STATIC,
     2124     8285    1         2 * UBIN BYTE UNAL,
     2125     8286    1         2 * CHAR(31);
     2126     8287    1   DCL STD_ACCT CHAR(8) STATIC;
     2127     8288    1   DCL STD_PASS CHAR(8) STATIC;
     2128     8289        %PCL_SN(FPTN = STD_SN,STCLASS = STATIC);
     2129     8307    1   DCL STD_WSN CHAR(8) STATIC;
     2130     8308        %FPT_OPEN(FPTN = FPT_OPEN_STD_IN,
     2131     8309                  DCB  = M$EI,
     2132     8310                  NAME = STD_NAME,
     2133     8311                  ACCT = STD_ACCT,
     2134     8312                  PASS = STD_PASS,
     2135     8313                  SN   = STD_SN,
     2136     8314                  WSN  = STD_WSN,
     2137     8315                  SCRUB = YES,
     2138     8316                  REASSIGN = NO,
     2139     8317                  SHARE = ALL,
     2140     8318                  FUN = IN,
     2141     8319                STCLASS = STATIC);
     2142     8428        %FPT_CLOSE(FPTN = FPT_CLOSE_STD_IN_PTL,
     2143     8429                   DCB  = M$EI,
     2144     8430                   POS  = PTL,
     2145     8431                   STCLASS = CONSTANT);
     2146     8473        %FPT_OPEN(FPTN = FPT_OPEN_STD_OUT,
     2147     8474                  DCB = M$STD1,
     2148     8475                  DISP = SCRATCH,
     2149     8476                  FUN  = CREATE,
     2150     8477                  EXIST = NEWFILE,
     2151     8478                  ASN = FILE,
     2152     8479                  ORG = CONSEC,
     2153     8480                  STCLASS = CONSTANT);
     2154     8589        %FPT_READ(FPTN = FPT_READ_STD_IN,
     2155     8590                  DCB = M$EI,
     2156     8591                  BUF = PARSE_IN_BUF,
     2157     8592                  STCLASS = CONSTANT);
     2158     8631        %FPT_WRITE(FPTN = FPT_WRITE_STD,
     2159     8632                   DCB = M$STD1,
PL6.E3A0      #023=VPD$INIT_STD_FILE File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:46 Page:552  
     2160     8633                   STCLASS = STATIC);
     2161     8664        %FPT_PFIL(FPTN = FPT_PFIL_STD,
     2162     8665                  DCB = M$STD1,
     2163     8666                  BOF = YES,
     2164     8667                  STCLASS = CONSTANT);
     2165     8682        %VP_ENTRIES (OMIT=VPD$INIT_STD_FILE);
     2166     8890        /**/
     2167     8891        /*  Make some room to parse the source specs in the STD file.  Leaving        */
     2168     8892        /*  the parse output blocks from the command intact.                          */
     2169     8893        /**/
     2170     8894    1           PCB.WORK$=ADDR(NIL);
     2171     8895    1           CALL VPD$GET_BUF(PCB.WORK$,1024)
     2172     8896    2            WHENALTRETURN DO;
     2173     8897    2               CALL VPL$ERR_PROC(5,260,'04'O);
     2174     8898    2               END;
     2175     8899        /*E*  ERROR: VPD-00260
     2176     8900            MESSAGE: INTERNAL PCL ERROR!  STD work area unavailable!
     2177     8901        */
     2178     8902    1           PCB.WKSZ = 1024;
     2179     8903    1           STD_WORK$ = PCB.WORK$;
     2180     8904    1           PCB.ROOT$ = ADDR(TOP_STD_N);
     2181     8905    1           PCB.U$$ = ENTADDR(NIL);
     2182     8906        /**/
     2183     8907        /*  Prepare a scratch file that will contain the STD-file image.              */
     2184     8908        /**/
     2185     8909    1           FPT_FID_STD.TEXTFID_   = VECTOR(FID$->OUT$SYM.TEXT);
     2186     8910    1           CALL VPD$FID (FPT_FID_STD);
     2187     8911    1           CALL M$OPEN(FPT_OPEN_STD_IN) ALTRET(ALT_1);
     2188     8912    1           CALL M$OPEN(FPT_OPEN_STD_OUT) ALTRET(ALT_2);
     2189     8913        /**/
     2190     8914        /*  In most cases, the STD file is manipulated along with the files           */
     2191     8915        /*  that it names.  Exceptions are:                                           */
     2192     8916        /*    o A DELETE operation                                                    */
     2193     8917        /*    o STD info from a DEVICE (probably can't position back to               */
     2194     8918        /*      access the original file).                                            */
     2195     8919        /**/
     2196     8920    1           IF CMD_MASK(7)='0'B             /* not DELETESTD                      */
PL6.E3A0      #023=VPD$INIT_STD_FILE File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:46 Page:553  
     2197     8921    1             AND FPT_OPEN_STD_IN.V.ASN#~=%DEVICE# /* and not DEVICE              */
     2198     8922    1            THEN
     2199     8923    2            DO;                            /* PUT STD FILE AS FIRST FILE IN      */
     2200     8924                                                /* DUMMY STD FILE                     */
     2201     8925    2               FPT_WRITE_STD.BUF_   = FPT_FID_STD.TEXTFID_;
     2202     8926    2               CALL M$WRITE(FPT_WRITE_STD) ALTRET(ALT_3);
     2203     8927    2               THIS_STD_FILE = '1'B;
     2204     8928    2               END;
     2205     8929        /**/
     2206     8930        /*  Copy the original STD file to the scratch one.                            */
     2207     8931        /**/
     2208     8932    2           DO WHILE('1'B);
     2209     8933    2              CALL M$READ(FPT_READ_STD_IN) ALTRET(READ_ALT);
     2210     8934    2              IF M$EI$->F$DCB.ARS>0
     2211     8935    2               THEN
     2212     8936    3               DO;
     2213     8937    3                  FPT_WRITE_STD.BUF_   = VECTOR(PARSE_IN_BUF);
     2214     8938    3                  FPT_WRITE_STD.BUF_.BOUND   = M$EI$->F$DCB.ARS-1;
     2215     8939    3                  END;
     2216     8940    2               ELSE
     2217     8941    2                 FPT_WRITE_STD.BUF_ = VECTOR(NIL);
     2218     8942    2              CALL M$WRITE(FPT_WRITE_STD) ALTRET(ALT_3);
     2219     8943    2              END;
     2220     8944    1   ALT_3:
     2221     8945    1           CALL M$CLOSE(FPT_CLOSE_STD);
     2222     8946    1   ALT_2:
     2223     8947    1           CALL M$CLOSE(FPT_CLOSE_STD_IN_PTL);
     2224     8948    1   ALT_1:
     2225     8949    1           CALL VPL$ERR_PROC(3,0);
     2226     8950    1   READ_ALT:
     2227     8951    1           IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE=%E$EOF
     2228     8952    1            THEN
     2229     8953    2            DO;
     2230     8954    2               CALL M$CLOSE(FPT_CLOSE_STD_IN_PTL);
     2231     8955    2               CALL M$PFIL(FPT_PFIL_STD);
     2232     8956    2               END;
     2233     8957    1            ELSE
PL6.E3A0      #023=VPD$INIT_STD_FILE File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:46 Page:554  
     2234     8958    1              GOTO ALT_3;
     2235     8959    1   END VPD$INIT_STD_FILE;
     2236     8960        %EOD;

PL6.E3A0      #023=VPD$INIT_STD_FILE File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:46 Page:555  
--  Include file information  --

   B_ERRORS_C.:E05TOU  is referenced.
   F$DCB.:E05TOU  cannot be made into a system file and is referenced.
   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$INIT_STD_FILE.

   Procedure VPD$INIT_STD_FILE requires 105 words for executable code.
   Procedure VPD$INIT_STD_FILE requires 6 words of local(AUTO) storage.

PL6.E3A0      #023=VPD$INIT_STD_FILE File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:46 Page:556  

 Object Unit name= VPD$INIT_STD_FILE                          File name= VPD$UTIL.:E05TOU
 UTS= JUL 30 '97 07:46:44.92 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$EI
    2   DCB   even  none     0      0  M$EO
    3   DCB   even  none     0      0  M$EO1
    4   DCB   even  none     0      0  M$ME
    5   DCB   even  none     0      0  M$SI
    6   DCB   even  none     0      0  M$READFILE
    7   DCB   even  none     0      0  M$DO
    8   DCB   even  none     0      0  M$STD1
    9   DCB   even  none     0      0  M$SORT1
   10   Data  even  none   150    226  VPD$INIT_STD_FILE
   11  RoData even  UTS    106    152  VPD$INIT_STD_FILE
   12   Proc  even  none   105    151  VPD$INIT_STD_FILE
   13  RoData even  none    18     22  VPD$INIT_STD_FILE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    12      0   yes            yes      Std        1  VPD$INIT_STD_FILE
PL6.E3A0      #023=VPD$INIT_STD_FILE File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:46 Page:557  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       2 VPD$GET_BUF
         yes           Std       8 VPL$ERR_PROC
 yes     yes           Std       2 VPD$FID
                       nStd      0 X66_AUTO_1
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  PARSE_IN_BUF                          STD_WORK$
     PCB                                   THIS_STD_FILE                         BREAK_LOC
     BREAK_MESSAGE_REPORTER                CMD_MASK                              SPEC_BUF
     IN_RES                                M$EI                                  M$EI$
     M$EO                                  M$EO1                                 M$ME
     M$SI                                  M$READFILE                            M$DO
     M$STD1                                M$SORT1                               B$TCB$
     TOP_STD_N                        r    FPT_CLOSE_STD                         B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #023=VPD$INIT_STD_FILE File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:46 Page:558  


     2086        1        /*T***********************************************************/
     2087        2        /*T*                                                         */
     2088        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2089        4        /*T*                                                         */
     2090        5        /*T***********************************************************/
     2091        6        VPD$INIT_STD_FILE: PROC(FID$);

      6 12 000000   000000 700200 xent  VPD$INIT_ST* TSX0  ! X66_AUTO_1
        12 000001   000006 000001                    ZERO    6,1

     2092        7        /*D* NAME: VPD$INIT_STD_FILE
     2093        8             CALL: CALL VPD$INIT_STD_FILE(FID$);
     2094        9             DESCRIPTION: This procedure takes the file defined by the PARSE$SYM
     2095       10                          block pointed to by FID$ to a scratch file through M$STD1
     2096       11                          DCB and PFIL's to BOF ready to read.
     2097       12        */
     2098       13        %INCLUDE VP_DATA_R;
     2099     7000        %INCLUDE F$DCB;
     2100     7049        %B$TCB;
     2101     7052        %B$ALT;
     2102     7060        %INCLUDE B_ERRORS_C;
     2103     8187        %PARSE$SYM(NAME = OUT$SYM,STCLASS = BASED);
     2104     8225    1   DCL FID$ PTR;
     2105     8226        %FPT_FID(FPTN = FPT_FID_STD,
     2106     8227                 NAME = STD_NAME,
     2107     8228                 ACCT = STD_ACCT,
     2108     8229                 PASS = STD_PASS,
     2109     8230                 RES  = FPT_OPEN_STD_IN.V.RES#,
     2110     8231                 SN   = STD_SN,
     2111     8232                 WSN  = STD_WSN,
     2112     8233                 ASN  = FPT_OPEN_STD_IN.V.ASN#,
     2113     8234                 SNAME = YES,
     2114     8235                 SACCT = YES,
     2115     8236                 SPASS = YES,
     2116     8237                 SRES  = YES,
     2117     8238                 SSN   = YES,
PL6.E3A0      #023=VPD$INIT_STD_FILE File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:46 Page:559  
     2118     8239                 SWSN  = YES,
     2119     8240                 RESULTS = RESULTS_FID_STD,
     2120     8241                 STCLASS = STATIC);
     2121     8264        %VLR_FID(FPTN = RESULTS_FID_STD,
     2122     8265                     STCLASS = STATIC);
     2123     8284    1   DCL 1 STD_NAME STATIC,
     2124     8285    1         2 * UBIN BYTE UNAL,
     2125     8286    1         2 * CHAR(31);
     2126     8287    1   DCL STD_ACCT CHAR(8) STATIC;
     2127     8288    1   DCL STD_PASS CHAR(8) STATIC;
     2128     8289        %PCL_SN(FPTN = STD_SN,STCLASS = STATIC);
     2129     8307    1   DCL STD_WSN CHAR(8) STATIC;
     2130     8308        %FPT_OPEN(FPTN = FPT_OPEN_STD_IN,
     2131     8309                  DCB  = M$EI,
     2132     8310                  NAME = STD_NAME,
     2133     8311                  ACCT = STD_ACCT,
     2134     8312                  PASS = STD_PASS,
     2135     8313                  SN   = STD_SN,
     2136     8314                  WSN  = STD_WSN,
     2137     8315                  SCRUB = YES,
     2138     8316                  REASSIGN = NO,
     2139     8317                  SHARE = ALL,
     2140     8318                  FUN = IN,
     2141     8319                STCLASS = STATIC);
     2142     8428        %FPT_CLOSE(FPTN = FPT_CLOSE_STD_IN_PTL,
     2143     8429                   DCB  = M$EI,
     2144     8430                   POS  = PTL,
     2145     8431                   STCLASS = CONSTANT);
     2146     8473        %FPT_OPEN(FPTN = FPT_OPEN_STD_OUT,
     2147     8474                  DCB = M$STD1,
     2148     8475                  DISP = SCRATCH,
     2149     8476                  FUN  = CREATE,
     2150     8477                  EXIST = NEWFILE,
     2151     8478                  ASN = FILE,
     2152     8479                  ORG = CONSEC,
     2153     8480                  STCLASS = CONSTANT);
     2154     8589        %FPT_READ(FPTN = FPT_READ_STD_IN,
PL6.E3A0      #023=VPD$INIT_STD_FILE File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:46 Page:560  
     2155     8590                  DCB = M$EI,
     2156     8591                  BUF = PARSE_IN_BUF,
     2157     8592                  STCLASS = CONSTANT);
     2158     8631        %FPT_WRITE(FPTN = FPT_WRITE_STD,
     2159     8632                   DCB = M$STD1,
     2160     8633                   STCLASS = STATIC);
     2161     8664        %FPT_PFIL(FPTN = FPT_PFIL_STD,
     2162     8665                  DCB = M$STD1,
     2163     8666                  BOF = YES,
     2164     8667                  STCLASS = CONSTANT);
     2165     8682        %VP_ENTRIES (OMIT=VPD$INIT_STD_FILE);
     2166     8890        /**/
     2167     8891        /*  Make some room to parse the source specs in the STD file.  Leaving        */
     2168     8892        /*  the parse output blocks from the command intact.                          */
     2169     8893        /**/
     2170     8894    1           PCB.WORK$=ADDR(NIL);

   8894 12 000002   000001 236000 xsym               LDQ     B_VECTNIL+1
        12 000003   000002 756000 xsym               STQ     PCB+2

     2171     8895    1           CALL VPD$GET_BUF(PCB.WORK$,1024)

   8895 12 000004   000001 630400 13                 EPPR0   1
        12 000005   000020 631400 xsym               EPPR1   B_VECTNIL+16
        12 000006   000000 701000 xent               TSX1    VPD$GET_BUF
        12 000007   000011 702000 12                 TSX2    s:8897
        12 000010   000015 710000 12                 TRA     s:8902

     2172     8896    2            WHENALTRETURN DO;

     2173     8897    2               CALL VPL$ERR_PROC(5,260,'04'O);

   8897 12 000011   000005 630400 13                 EPPR0   5
        12 000012   000021 631400 xsym               EPPR1   B_VECTNIL+17
        12 000013   000000 701000 xent               TSX1    VPL$ERR_PROC
        12 000014   000000 011000                    NOP     0

PL6.E3A0      #023=VPD$INIT_STD_FILE File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:46 Page:561  
     2174     8898    2               END;

     2175     8899        /*E*  ERROR: VPD-00260
     2176     8900            MESSAGE: INTERNAL PCL ERROR!  STD work area unavailable!
     2177     8901        */
     2178     8902    1           PCB.WKSZ = 1024;

   8902 12 000015   002000 220003                    LDX0    1024,DU
        12 000016   000005 740000 xsym               STX0    PCB+5

     2179     8903    1           STD_WORK$ = PCB.WORK$;

   8903 12 000017   000002 236000 xsym               LDQ     PCB+2
        12 000020   000000 756000 xsym               STQ     STD_WORK$

     2180     8904    1           PCB.ROOT$ = ADDR(TOP_STD_N);

   8904 12 000021   000010 236000 13                 LDQ     8
        12 000022   000001 756000 xsym               STQ     PCB+1

     2181     8905    1           PCB.U$$ = ENTADDR(NIL);

   8905 12 000023   000002 236000 xsym               LDQ     B_VECTNIL+2
        12 000024   000004 756000 xsym               STQ     PCB+4

     2182     8906        /**/
     2183     8907        /*  Prepare a scratch file that will contain the STD-file image.              */
     2184     8908        /**/
     2185     8909    1           FPT_FID_STD.TEXTFID_   = VECTOR(FID$->OUT$SYM.TEXT);

   8909 12 000025   200003 470500                    LDP0    @FID$,,AUTO
        12 000026   000000 471500                    LDP1    0,,PR0
        12 000027   100004 236100                    LDQ     4,,PR1
        12 000030   000033 772000                    QRL     27
        12 000031   000064 737000                    LLS     52
        12 000032   000140 135007                    SBLA    96,DL
        12 000033   200004 451500                    STP1    @FID$+1,,AUTO
PL6.E3A0      #023=VPD$INIT_STD_FILE File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:46 Page:562  
        12 000034   200004 236100                    LDQ     @FID$+1,,AUTO
        12 000035   000011 036000 13                 ADLQ    9
        12 000036   000002 757000 10                 STAQ    FPT_FID_STD+2

     2186     8910    1           CALL VPD$FID (FPT_FID_STD);

   8910 12 000037   000012 630400 13                 EPPR0   10
        12 000040   000017 631400 xsym               EPPR1   B_VECTNIL+15
        12 000041   000000 701000 xent               TSX1    VPD$FID
        12 000042   000000 011000                    NOP     0

     2187     8911    1           CALL M$OPEN(FPT_OPEN_STD_IN) ALTRET(ALT_1);

   8911 12 000043   000120 630400 10                 EPPR0   FPT_OPEN_STD_IN
        12 000044   450000 713400                    CLIMB   alt,open
        12 000045   410400 401760                    pmme    nvectors=18
        12 000046   000127 702000 12                 TSX2    ALT_1

     2188     8912    1           CALL M$OPEN(FPT_OPEN_STD_OUT) ALTRET(ALT_2);

   8912 12 000047   000036 630400 11                 EPPR0   FPT_OPEN_STD_OUT
        12 000050   450000 713400                    CLIMB   alt,open
        12 000051   410400 401760                    pmme    nvectors=18
        12 000052   000124 702000 12                 TSX2    ALT_2

     2189     8913        /**/
     2190     8914        /*  In most cases, the STD file is manipulated along with the files           */
     2191     8915        /*  that it names.  Exceptions are:                                           */
     2192     8916        /*    o A DELETE operation                                                    */
     2193     8917        /*    o STD info from a DEVICE (probably can't position back to               */
     2194     8918        /*      access the original file).                                            */
     2195     8919        /**/
     2196     8920    1           IF CMD_MASK(7)='0'B             /* not DELETESTD                      */

   8920 12 000053   000000 236000 xsym               LDQ     CMD_MASK
        12 000054   002000 316003                    CANQ    1024,DU
        12 000055   000072 601000 12                 TNZ     s:8933
PL6.E3A0      #023=VPD$INIT_STD_FILE File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:46 Page:563  
        12 000056   000165 236000 10                 LDQ     FPT_OPEN_STD_IN+37
        12 000057   000777 376007                    ANQ     511,DL
        12 000060   000003 116007                    CMPQ    3,DL
        12 000061   000072 600000 12                 TZE     s:8933

     2197     8921    1             AND FPT_OPEN_STD_IN.V.ASN#~=%DEVICE# /* and not DEVICE              */
     2198     8922    1            THEN
     2199     8923    2            DO;                            /* PUT STD FILE AS FIRST FILE IN      */

     2200     8924                                                /* DUMMY STD FILE                     */
     2201     8925    2               FPT_WRITE_STD.BUF_   = FPT_FID_STD.TEXTFID_;

   8925 12 000062   000002 237000 10                 LDAQ    FPT_FID_STD+2
        12 000063   000216 757000 10                 STAQ    FPT_WRITE_STD+4

     2202     8926    2               CALL M$WRITE(FPT_WRITE_STD) ALTRET(ALT_3);

   8926 12 000064   000212 630400 10                 EPPR0   FPT_WRITE_STD
        12 000065   440001 713400                    CLIMB   alt,write
        12 000066   401400 401760                    pmme    nvectors=4
        12 000067   000121 702000 12                 TSX2    ALT_3

     2203     8927    2               THIS_STD_FILE = '1'B;

   8927 12 000070   400000 236003                    LDQ     -131072,DU
        12 000071   000000 756000 xsym               STQ     THIS_STD_FILE

     2204     8928    2               END;

     2205     8929        /**/
     2206     8930        /*  Copy the original STD file to the scratch one.                            */
     2207     8931        /**/
     2208     8932    2           DO WHILE('1'B);

     2209     8933    2              CALL M$READ(FPT_READ_STD_IN) ALTRET(READ_ALT);

   8933 12 000072   000130 630400 11                 EPPR0   FPT_READ_STD_IN
PL6.E3A0      #023=VPD$INIT_STD_FILE File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:46 Page:564  
        12 000073   440000 713400                    CLIMB   alt,read
        12 000074   401400 401760                    pmme    nvectors=4
        12 000075   000133 702000 12                 TSX2    READ_ALT

     2210     8934    2              IF M$EI$->F$DCB.ARS>0

   8934 12 000076   000000 470400 xsym               LDP0    M$EI$
        12 000077   000000 235100                    LDA     0,,PR0
        12 000100   000112 604400 12                 TMOZ    s:8941

     2211     8935    2               THEN
     2212     8936    3               DO;

     2213     8937    3                  FPT_WRITE_STD.BUF_   = VECTOR(PARSE_IN_BUF);

   8937 12 000101   000014 237000 13                 LDAQ    12
        12 000102   000216 757000 10                 STAQ    FPT_WRITE_STD+4

     2214     8938    3                  FPT_WRITE_STD.BUF_.BOUND   = M$EI$->F$DCB.ARS-1;

   8938 12 000103   000000 236100                    LDQ     0,,PR0
        12 000104   000001 136007                    SBLQ    1,DL
        12 000105   000020 736000                    QLS     16
        12 000106   000216 676000 10                 ERQ     FPT_WRITE_STD+4
        12 000107   000034 376000 xsym               ANQ     B_VECTNIL+28
        12 000110   000216 656000 10                 ERSQ    FPT_WRITE_STD+4

     2215     8939    3                  END;

   8939 12 000111   000114 710000 12                 TRA     s:8942

     2216     8940    2               ELSE
     2217     8941    2                 FPT_WRITE_STD.BUF_ = VECTOR(NIL);

   8941 12 000112   000016 237000 13                 LDAQ    14
        12 000113   000216 757000 10                 STAQ    FPT_WRITE_STD+4

PL6.E3A0      #023=VPD$INIT_STD_FILE File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:46 Page:565  
     2218     8942    2              CALL M$WRITE(FPT_WRITE_STD) ALTRET(ALT_3);

   8942 12 000114   000212 630400 10                 EPPR0   FPT_WRITE_STD
        12 000115   440001 713400                    CLIMB   alt,write
        12 000116   401400 401760                    pmme    nvectors=4
        12 000117   000121 702000 12                 TSX2    ALT_3

     2219     8943    2              END;

   8943 12 000120   000072 710000 12                 TRA     s:8933

     2220     8944    1   ALT_3:
     2221     8945    1           CALL M$CLOSE(FPT_CLOSE_STD);

   8945 12 000121   000000 630400 xsym  ALT_3        EPPR0   FPT_CLOSE_STD
        12 000122   050001 713400                    CLIMB   close
        12 000123   406000 401760                    pmme    nvectors=13

     2222     8946    1   ALT_2:
     2223     8947    1           CALL M$CLOSE(FPT_CLOSE_STD_IN_PTL);

   8947 12 000124   000000 630400 11    ALT_2        EPPR0   FPT_CLOSE_STD_IN_PTL
        12 000125   050001 713400                    CLIMB   close
        12 000126   406000 401760                    pmme    nvectors=13

     2224     8948    1   ALT_1:
     2225     8949    1           CALL VPL$ERR_PROC(3,0);

   8949 12 000127   000020 630400 13    ALT_1        EPPR0   16
        12 000130   000020 631400 xsym               EPPR1   B_VECTNIL+16
        12 000131   000000 701000 xent               TSX1    VPL$ERR_PROC
        12 000132   000000 011000                    NOP     0

     2226     8950    1   READ_ALT:
     2227     8951    1           IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE=%E$EOF

   8951 12 000133   000000 470400 xsym  READ_ALT     LDP0    B$TCB$
PL6.E3A0      #023=VPD$INIT_STD_FILE File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:46 Page:566  
        12 000134   000000 471500                    LDP1    0,,PR0
        12 000135   100102 236100                    LDQ     66,,PR1
        12 000136   377770 376007                    ANQ     131064,DL
        12 000137   000060 116007                    CMPQ    48,DL
        12 000140   000121 601000 12                 TNZ     ALT_3

     2228     8952    1            THEN
     2229     8953    2            DO;

     2230     8954    2               CALL M$CLOSE(FPT_CLOSE_STD_IN_PTL);

   8954 12 000141   000000 630400 11                 EPPR0   FPT_CLOSE_STD_IN_PTL
        12 000142   050001 713400                    CLIMB   close
        12 000143   406000 401760                    pmme    nvectors=13

     2231     8955    2               CALL M$PFIL(FPT_PFIL_STD);

   8955 12 000144   000146 630400 11                 EPPR0   FPT_PFIL_STD
        12 000145   040004 713400                    CLIMB   16388
        12 000146   400000 401760                    pmme    nvectors=1

     2232     8956    2               END;

   8956 12 000147   000150 710000 12                 TRA     s:8959

     2233     8957    1            ELSE
     2234     8958    1              GOTO ALT_3;
     2235     8959    1   END VPD$INIT_STD_FILE;

   8959 12 000150   000000 702200 xent               TSX2  ! X66_ARET
     2236     8960        %EOD;

PL6.E3A0      #023=VPD$INIT_STD_FILE File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:46 Page:567  
--  Include file information  --

   B_ERRORS_C.:E05TOU  is referenced.
   F$DCB.:E05TOU  cannot be made into a system file and is referenced.
   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$INIT_STD_FILE.
PL6.E3A0      #023=VPD$INIT_STD_FILE File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:46 Page:568  

 **** Variables and constants ****

  ****  Section 010  Data  VPD$INIT_STD_FILE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(864)   r     1 FPT_FID_STD              120-0-0/d STRC(2088)  r     1 FPT_OPEN_STD_IN
   212-0-0/d STRC(432)   r     1 FPT_WRITE_STD             30-0-0/d STRC(324)   r     1 RESULTS_FID_STD
    52-0-0/c CHAR(8)     r     1 STD_ACCT                  42-0-0/c STRC(288)   r     1 STD_NAME
    54-0-0/c CHAR(8)     r     1 STD_PASS                  56-0-0/w STRC(1116)  r     1 STD_SN
   115-0-0/c CHAR(8)     r     1 STD_WSN

  ****  Section 011 RoData VPD$INIT_STD_FILE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(1080)  r     1 FPT_CLOSE_STD_IN_PTL      36-0-0/d STRC(2088)  r     1 FPT_OPEN_STD_OUT
   146-0-0/d STRC(144)   r     1 FPT_PFIL_STD             130-0-0/d STRC(504)   r     1 FPT_READ_STD_IN

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @FID$                     *0-0-0/w PTR         r     1 FID$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$TCB$
     0-0-0/w EPTR        r     1 BREAK_MESSAGE_REPORTER
     0-0-0/b BIT         r     1 CMD_MASK(0:71)
     0-0-0/d STRC(1080)  r     1 FPT_CLOSE_STD              0-0-0/w PTR         r     1 M$EI$
PL6.E3A0      #023=VPD$INIT_STD_FILE File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:46 Page:569  
     0-0-0/c CHAR(1024)  r     1 PARSE_IN_BUF               0-0-0/w STRC(504)   r     1 PCB
     0-0-0/w PTR         r     1 STD_WORK$                  0-0-0/b BIT         r     1 THIS_STD_FILE
     0-0-0/b BIT         r     1 TOP_STD_N

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/w STRC(144)   r     1 B$TCB
     0-0-0/d ASTR(3528)  r     1 F$DCB                      0-0-0N  NULL        r     1 M$EI
     0-0-0N  NULL        r     1 M$STD1                     0-0-0/w ASTR(153)   r     1 OUT$SYM


   Procedure VPD$INIT_STD_FILE requires 105 words for executable code.
   Procedure VPD$INIT_STD_FILE requires 6 words of local(AUTO) storage.
PL6.E3A0      #023=VPD$INIT_STD_FILE File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:46 Page:570  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #023=VPD$INIT_STD_FILE File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:46 Page:571  
          MINI XREF LISTING

ALT_1
      8949**LABEL    8911--CALLALT
ALT_2
      8947**LABEL    8912--CALLALT
ALT_3
      8945**LABEL    8926--CALLALT  8942--CALLALT  8958--GOTO
B$ALT.CODE
      7054**DCL      7054--REDEF    7055--REDEF    7055--REDEF
B$ALT.ERR.CODE
      7056**DCL      8951>>IF
B$ALT.ERR.ERR#
      7056**DCL      7056--REDEF
B$ALT.EVID
      7055**DCL      7055--REDEF    7055--REDEF
B$TCB.ALT$
      7050**DCL      8951>>IF
B$TCB$
      5985**DCL      8951>>IF
BREAK_LOC
      5220**DCL      5220--REDEF
CMD_MASK
      5222**DCL      8920>>IF
DEF_ICB.FID.STRING
      5818**DCL      5819--REDEF
DEV_ICB.FID.STRING
      5704**DCL      5705--REDEF
EI_KEY.KEY
      5916**DCL      5916--REDEF    5916--REDEF    5916--REDEF
EO_OCB.TYPE
      5416**DCL      5417--REDEF
F$DCB.ACTPOS
      7026**DCL      7026--REDEF
PL6.E3A0      #023=VPD$INIT_STD_FILE File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:46 Page:572  
F$DCB.ARS
      7001**DCL      7001--REDEF    8934>>IF       8938>>ASSIGN
F$DCB.ATTR
      7019**DCL      7020--REDEF
F$DCB.BORROW
      7034**DCL      7034--REDEF    7034--REDEF    7034--REDEF
F$DCB.DCBNAME.L
      7048**DCL      7048--IMP-SIZ
F$DCB.EOMCHAR
      7005**DCL      7005--REDEF
F$DCB.FLDID
      7029**DCL      7029--REDEF
F$DCB.FORM$
      7023**DCL      7023--REDEF
F$DCB.FSECT
      7039**DCL      7039--REDEF
F$DCB.FSN
      7016**DCL      7016--REDEF    7016--REDEF    7017--REDEF
F$DCB.HEADER$
      7022**DCL      7022--REDEF
F$DCB.IXTNSIZE
      7020**DCL      7020--REDEF
F$DCB.LASTSTA$
      7010**DCL      7010--REDEF
F$DCB.LVL
      7035**DCL      7035--REDEF
F$DCB.NAME.C
      7010**DCL      7010--REDEF
F$DCB.NOEOF
      7031**DCL      7031--REDEF
F$DCB.NRECS
      7021**DCL      7021--REDEF
F$DCB.NRECX
      7040**DCL      7040--REDEF
F$DCB.OHDR
      7032**DCL      7032--REDEF
PL6.E3A0      #023=VPD$INIT_STD_FILE File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:46 Page:573  
F$DCB.ORG
      7015**DCL      7015--REDEF
F$DCB.PRECNO
      7038**DCL      7038--REDEF
F$DCB.RCSZ
      7043**DCL      7043--REDEF
F$DCB.RES
      7011**DCL      7011--REDEF
F$DCB.SETX
      7023**DCL      7023--REDEF
F$DCB.TAB$
      7022**DCL      7023--REDEF
F$DCB.TDA
      7037**DCL      7037--REDEF
F$DCB.WSN
      7012**DCL      7012--REDEF
FID$
      8225**DCL         6--PROC     8909>>ASSIGN   8909>>ASSIGN
FPT_CLOSE_EI.SN_
      6757**DCL      6757--REDEF
FPT_CLOSE_EI.UTL_
      6758**DCL      6758--REDEF
FPT_CLOSE_EI.V.EXPIRE#
      6772**DCL      6772--REDEF
FPT_CLOSE_EI.V.TYPE#
      6770**DCL      6770--REDEF
FPT_CLOSE_EI.V.XTNSIZE#
      6767**DCL      6767--REDEF    6769--REDEF
FPT_CLOSE_PTL.SN_
      6883**DCL      6883--REDEF
FPT_CLOSE_PTL.UTL_
      6884**DCL      6884--REDEF
FPT_CLOSE_PTL.V.EXPIRE#
      6898**DCL      6898--REDEF
FPT_CLOSE_PTL.V.TYPE#
      6896**DCL      6896--REDEF
PL6.E3A0      #023=VPD$INIT_STD_FILE File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:46 Page:574  
FPT_CLOSE_PTL.V.XTNSIZE#
      6893**DCL      6893--REDEF    6895--REDEF
FPT_CLOSE_READ.SN_
      6799**DCL      6799--REDEF
FPT_CLOSE_READ.UTL_
      6800**DCL      6800--REDEF
FPT_CLOSE_READ.V.EXPIRE#
      6814**DCL      6814--REDEF
FPT_CLOSE_READ.V.TYPE#
      6812**DCL      6812--REDEF
FPT_CLOSE_READ.V.XTNSIZE#
      6809**DCL      6809--REDEF    6811--REDEF
FPT_CLOSE_SI.SN_
      6967**DCL      6967--REDEF
FPT_CLOSE_SI.UTL_
      6968**DCL      6968--REDEF
FPT_CLOSE_SI.V.EXPIRE#
      6982**DCL      6982--REDEF
FPT_CLOSE_SI.V.TYPE#
      6980**DCL      6980--REDEF
FPT_CLOSE_SI.V.XTNSIZE#
      6977**DCL      6977--REDEF    6979--REDEF
FPT_CLOSE_STD
      6925**DCL      8945<>CALL
FPT_CLOSE_STD.SN_
      6925**DCL      6925--REDEF
FPT_CLOSE_STD.UTL_
      6926**DCL      6926--REDEF
FPT_CLOSE_STD.V.EXPIRE#
      6940**DCL      6940--REDEF
FPT_CLOSE_STD.V.TYPE#
      6938**DCL      6938--REDEF
FPT_CLOSE_STD.V.XTNSIZE#
      6935**DCL      6935--REDEF    6937--REDEF
FPT_CLOSE_STD_IN_PTL
      8454**DCL      8947<>CALL     8954<>CALL
PL6.E3A0      #023=VPD$INIT_STD_FILE File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:46 Page:575  
FPT_CLOSE_STD_IN_PTL.SN_
      8454**DCL      8454--REDEF
FPT_CLOSE_STD_IN_PTL.UTL_
      8455**DCL      8455--REDEF
FPT_CLOSE_STD_IN_PTL.V
      8459**DCL      8454--DCLINIT
FPT_CLOSE_STD_IN_PTL.V.EXPIRE#
      8469**DCL      8469--REDEF
FPT_CLOSE_STD_IN_PTL.V.TYPE#
      8467**DCL      8467--REDEF
FPT_CLOSE_STD_IN_PTL.V.XTNSIZE#
      8464**DCL      8464--REDEF    8466--REDEF
FPT_CLSEI_FT.SN_
      6841**DCL      6841--REDEF
FPT_CLSEI_FT.UTL_
      6842**DCL      6842--REDEF
FPT_CLSEI_FT.V.EXPIRE#
      6856**DCL      6856--REDEF
FPT_CLSEI_FT.V.TYPE#
      6854**DCL      6854--REDEF
FPT_CLSEI_FT.V.XTNSIZE#
      6851**DCL      6851--REDEF    6853--REDEF
FPT_FID_STD
      8252**DCL      8910<>CALL
FPT_FID_STD.TEXTFID_
      8252**DCL      8909<<ASSIGN   8925>>ASSIGN
FPT_FID_STD.V
      8256**DCL      8252--DCLINIT
FPT_OPEN_EI.ACSVEH_
      6412**DCL      6413--REDEF
FPT_OPEN_EI.ALTKEYS_
      6418**DCL      6419--REDEF    6419--REDEF
FPT_OPEN_EI.HDR_
      6417**DCL      6418--REDEF
FPT_OPEN_EI.TAB_
      6416**DCL      6417--REDEF
PL6.E3A0      #023=VPD$INIT_STD_FILE File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:46 Page:576  
FPT_OPEN_EI.UHL_
      6410**DCL      6411--REDEF    6411--REDEF
FPT_OPEN_EI.V.FSN#
      6450**DCL      6450--REDEF    6450--REDEF
FPT_OPEN_EI.WSN_
      6416**DCL      6416--REDEF
FPT_OPEN_EI_SAVE.ACSVEH_
      6521**DCL      6522--REDEF
FPT_OPEN_EI_SAVE.ALTKEYS_
      6527**DCL      6528--REDEF    6528--REDEF
FPT_OPEN_EI_SAVE.HDR_
      6526**DCL      6527--REDEF
FPT_OPEN_EI_SAVE.TAB_
      6525**DCL      6526--REDEF
FPT_OPEN_EI_SAVE.UHL_
      6519**DCL      6520--REDEF    6520--REDEF
FPT_OPEN_EI_SAVE.V.FSN#
      6559**DCL      6559--REDEF    6559--REDEF
FPT_OPEN_EI_SAVE.WSN_
      6525**DCL      6525--REDEF
FPT_OPEN_OUT.ACSVEH_
      6303**DCL      6304--REDEF
FPT_OPEN_OUT.ALTKEYS_
      6309**DCL      6310--REDEF    6310--REDEF
FPT_OPEN_OUT.HDR_
      6308**DCL      6309--REDEF
FPT_OPEN_OUT.TAB_
      6307**DCL      6308--REDEF
FPT_OPEN_OUT.UHL_
      6301**DCL      6302--REDEF    6302--REDEF
FPT_OPEN_OUT.V.FSN#
      6341**DCL      6341--REDEF    6341--REDEF
FPT_OPEN_OUT.WSN_
      6307**DCL      6307--REDEF
FPT_OPEN_OUT_SAVE.ACSVEH_
      6194**DCL      6195--REDEF
PL6.E3A0      #023=VPD$INIT_STD_FILE File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:46 Page:577  
FPT_OPEN_OUT_SAVE.ALTKEYS_
      6200**DCL      6201--REDEF    6201--REDEF
FPT_OPEN_OUT_SAVE.HDR_
      6199**DCL      6200--REDEF
FPT_OPEN_OUT_SAVE.TAB_
      6198**DCL      6199--REDEF
FPT_OPEN_OUT_SAVE.UHL_
      6192**DCL      6193--REDEF    6193--REDEF
FPT_OPEN_OUT_SAVE.V.FSN#
      6232**DCL      6232--REDEF    6232--REDEF
FPT_OPEN_OUT_SAVE.WSN_
      6198**DCL      6198--REDEF
FPT_OPEN_STD_IN
      8384**DCL      8911<>CALL
FPT_OPEN_STD_IN.ACSVEH_
      8386**DCL      8387--REDEF
FPT_OPEN_STD_IN.ALTKEYS_
      8392**DCL      8393--REDEF    8393--REDEF
FPT_OPEN_STD_IN.HDR_
      8391**DCL      8392--REDEF
FPT_OPEN_STD_IN.TAB_
      8390**DCL      8391--REDEF
FPT_OPEN_STD_IN.UHL_
      8384**DCL      8385--REDEF    8385--REDEF
FPT_OPEN_STD_IN.V
      8393**DCL      8384--DCLINIT
FPT_OPEN_STD_IN.V.ASN#
      8403**DCL      8255--DCLINIT  8920>>IF
FPT_OPEN_STD_IN.V.FSN#
      8424**DCL      8424--REDEF    8424--REDEF
FPT_OPEN_STD_IN.V.RES#
      8408**DCL      8255--DCLINIT
FPT_OPEN_STD_IN.WSN_
      8390**DCL      8390--REDEF
FPT_OPEN_STD_OUT
      8545**DCL      8912<>CALL
PL6.E3A0      #023=VPD$INIT_STD_FILE File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:46 Page:578  
FPT_OPEN_STD_OUT.ACSVEH_
      8547**DCL      8548--REDEF
FPT_OPEN_STD_OUT.ALTKEYS_
      8553**DCL      8554--REDEF    8554--REDEF
FPT_OPEN_STD_OUT.HDR_
      8552**DCL      8553--REDEF
FPT_OPEN_STD_OUT.TAB_
      8551**DCL      8552--REDEF
FPT_OPEN_STD_OUT.UHL_
      8545**DCL      8546--REDEF    8546--REDEF
FPT_OPEN_STD_OUT.V
      8554**DCL      8545--DCLINIT
FPT_OPEN_STD_OUT.V.FSN#
      8585**DCL      8585--REDEF    8585--REDEF
FPT_OPEN_STD_OUT.WSN_
      8551**DCL      8551--REDEF
FPT_PFIL_STD
      8678**DCL      8955<>CALL
FPT_PFIL_STD.V
      8678**DCL      8678--DCLINIT
FPT_READ_STD.STATION_
      6622**DCL      6623--REDEF
FPT_READ_STD.V.DVBYTE.REREAD#
      6634**DCL      6634--REDEF
FPT_READ_STD.V.INDX#
      6632**DCL      6632--REDEF
FPT_READ_STD_IN
      8609**DCL      8933<>CALL
FPT_READ_STD_IN.STATION_
      8612**DCL      8613--REDEF
FPT_READ_STD_IN.V
      8613**DCL      8609--DCLINIT
FPT_READ_STD_IN.V.DVBYTE.REREAD#
      8624**DCL      8624--REDEF
FPT_READ_STD_IN.V.INDX#
      8622**DCL      8622--REDEF
PL6.E3A0      #023=VPD$INIT_STD_FILE File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:46 Page:579  
FPT_READ_UC.STATION_
      6583**DCL      6584--REDEF
FPT_READ_UC.V.DVBYTE.REREAD#
      6595**DCL      6595--REDEF
FPT_READ_UC.V.INDX#
      6593**DCL      6593--REDEF
FPT_WRITE_ME.STATION_
      6691**DCL      6691--REDEF
FPT_WRITE_ME.V.DVBYTE.VFC#
      6698**DCL      6698--REDEF
FPT_WRITE_OUT.STATION_
      6722**DCL      6722--REDEF
FPT_WRITE_OUT.V.DVBYTE.VFC#
      6729**DCL      6729--REDEF
FPT_WRITE_STD
      8650**DCL      8926<>CALL     8942<>CALL
FPT_WRITE_STD.BUF_
      8650**DCL      8925<<ASSIGN   8937<<ASSIGN   8941<<ASSIGN
FPT_WRITE_STD.BUF_.BOUND
      8650**DCL      8938<<ASSIGN
FPT_WRITE_STD.STATION_
      8652**DCL      8652--REDEF
FPT_WRITE_STD.V
      8653**DCL      8650--DCLINIT
FPT_WRITE_STD.V.DVBYTE.VFC#
      8659**DCL      8659--REDEF
FPT_WRITE_UC.STATION_
      6660**DCL      6660--REDEF
FPT_WRITE_UC.V.DVBYTE.VFC#
      6667**DCL      6667--REDEF
FROM_SN.SN
      5566**DCL      5567--REDEF
GETCMD.OUT$
      4773**DCL      4779--REDEF
ICB.FID.STRING
      5590**DCL      5591--REDEF
PL6.E3A0      #023=VPD$INIT_STD_FILE File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:46 Page:580  
IFSFA_PARAM.EOMCHAR#
      5945**DCL      5946--REDEF
IFSFA_PARAM.SIG1
      5939**DCL      5939--REDEF
IFSFA_PARAM.SIG2
      5939**DCL      5940--REDEF
IN_RES
      5512**DCL      5512--REDEF
IN_SN.SN
      5528**DCL      5529--REDEF
M$CLOSE
        30**DCL-ENT  8945--CALL     8947--CALL     8954--CALL
M$EI$
      5981**DCL      8934>>IF       8938>>ASSIGN
M$OPEN
        30**DCL-ENT  8911--CALL     8912--CALL
M$PFIL
        32**DCL-ENT  8955--CALL
M$READ
        31**DCL-ENT  8933--CALL
M$WRITE
        31**DCL-ENT  8926--CALL     8942--CALL
OCB.TYPE
      5274**DCL      5275--REDEF
OFSFA_PARAM.EOMCHAR#
      5975**DCL      5976--REDEF
OFSFA_PARAM.SIG1
      5969**DCL      5969--REDEF
OFSFA_PARAM.SIG2
      5969**DCL      5970--REDEF
OUT$SYM.COUNT
      8217**DCL      8220--IMP-SIZ  8909>>ASSIGN
OUT$SYM.TEXT
      8220**DCL      8909--ASSIGN
OUT_SN.SN
      5546**DCL      5547--REDEF
PL6.E3A0      #023=VPD$INIT_STD_FILE File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:46 Page:581  
PARSE_IN_BUF
      4554**DCL      8611--DCLINIT  8612--DCLINIT  8937--ASSIGN
PCB.ROOT$
      4579**DCL      8904<<ASSIGN
PCB.U$$
      4592**DCL      8905<<ASSIGN
PCB.WKSZ
      4604**DCL      8902<<ASSIGN
PCB.WORK$
      4583**DCL      8894<<ASSIGN   8895<>CALL     8903>>ASSIGN
READ_ALT
      8951**LABEL    8933--CALLALT
RESULTS_FID_STD
      8276**DCL      8256--DCLINIT
SPEC_BUF
      5224**DCL      5224--REDEF
STD_ACCT
      8287**DCL      8253--DCLINIT  8389--DCLINIT
STD_NAME
      8284**DCL      8253--DCLINIT  8385--DCLINIT
STD_PASS
      8288**DCL      8254--DCLINIT  8386--DCLINIT
STD_SN
      8299**DCL      8254--DCLINIT  8384--DCLINIT
STD_SN.SN
      8304**DCL      8305--REDEF
STD_WORK$
      4554**DCL      8903<<ASSIGN
STD_WSN
      8307**DCL      8254--DCLINIT  8390--DCLINIT
THIS_STD_FILE
      5218**DCL      8927<<ASSIGN
TOP_STD_N
      5986**DCL      8904--ASSIGN
VPD$FID
      8722**DCL-ENT  8910--CALL
PL6.E3A0      #023=VPD$INIT_STD_FILE File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:46 Page:582  
VPD$GET_BUF
      8729**DCL-ENT  8895--CALL
VPL$ERR_PROC
      8864**DCL-ENT  8897--CALL     8949--CALL

PL6.E3A0      #024=VPD$MAKE_WILD_OUT File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:49 Page:583  
     2237        1        /*T***********************************************************/
     2238        2        /*T*                                                         */
     2239        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2240        4        /*T*                                                         */
     2241        5        /*T***********************************************************/
     2242        6        VPD$MAKE_WILD_OUT: PROC(TNAME,NEW_NAME);
     2243        7        /*D* NAME: VPD$MAKE_WILD_OUT
     2244        8             CALL: CALL VPD$MAKE_WILD_OUT(TNAME,NEW_NAME);
     2245        9             DESCRIPTION: VPD$MAKE_WILD_OUT uses the passed TNAME
     2246       10                          and calls XUW$WILDFMT to format the output name.
     2247       11                          It also uses IN_NAME and DIN_NAME.
     2248       12        */
     2249       13        %INCLUDE F$DCB;
     2250       62        %INCLUDE VP_DATA_R;
     2251     7049        %INCLUDE XUW_MACRO_C;
     2252     7184        %INCLUDE XU_PERR_C;
     2253     7375    1   DCL I UBIN;
     2254     7376    1   DCL 1 TNAME,
     2255     7377    1         2 L UBIN BYTE UNAL,
     2256     7378    1         2 C CHAR(31);
     2257     7379    1   DCL 1 NEW_NAME,
     2258     7380    1         2 L UBIN BYTE UNAL,
     2259     7381    1         2 C CHAR(31);
     2260     7382    1   DCL QUESTION_MARK CHAR(1) CONSTANT INIT('?');
     2261     7383        %VP_ENTRIES (OMIT=VPD$MAKE_WILD_OUT);
     2262     7591        %XUW_ENTRIES;
     2263     7603        %XUW_WILDCARD;
     2264     7699    1           XUW_WILDCARD.TEMPLATE_ = VECTOR(SUBSTR(TNAME.C,0,TNAME.L));
     2265     7700    1           XUW_WILDCARD.INPUT_ = VECTOR(SUBSTR(DIN_NAME.STRING,0,DIN_NAME.LEN));
     2266     7701    1           XUW_WILDCARD.PATTERN_ = VECTOR(SUBSTR(IN_NAME.STRING,0,IN_NAME.LEN));
     2267     7702        /*     If input spec fid was not wildcarded, and the output was, then
     2268     7703               the pattern should match the entire input name                         */
     2269     7704    1           CALL INDEX(I,'?',SUBSTR(IN_NAME.STRING,0,IN_NAME.LEN))
     2270     7705    2            WHENALTRETURN DO;
     2271     7706    2               XUW_WILDCARD.PATTERN_ = VECTOR(QUESTION_MARK);
     2272     7707    2               END;
     2273     7708    1           XUW_WILDCARD.OUTPUT_ = VECTOR(NEW_NAME.C);
PL6.E3A0      #024=VPD$MAKE_WILD_OUT File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:49 Page:584  
     2274     7709    1           CALL X$WILDFMT(XUW_WILDCARD)
     2275     7710    2            WHENALTRETURN DO;
     2276     7711    2               IF XUW_WILDCARD.ERROR.ERR# = %E$XUW#TOOLONG
     2277     7712    2                THEN
     2278     7713    2                  GOTO TOO_LONG;
     2279     7714    2               CALL VPL$ERR_PROC(3,0,,XUW_WILDCARD.ERROR); /* Some other error   */
     2280     7715    2               END;
     2281     7716    1           NEW_NAME.L = XUW_WILDCARD.OUTPUT_LEN;
     2282     7717    1           IF NEW_NAME.L > 31
     2283     7718    1            THEN
     2284     7719    1   TOO_LONG:  CALL VPL$ERR_PROC(2,40,'04'O);
     2285     7720        /*E* ERROR:   VPD-00040
     2286     7721             MESSAGE: Wildcarded output name too big
     2287     7722            MESSAGE1: Wildcarded output name may not evaluate to > 31 characters
     2288     7723        */
     2289     7724    1           RETURN;
     2290     7725    1   END VPD$MAKE_WILD_OUT;
     2291     7726        %EOD;

PL6.E3A0      #024=VPD$MAKE_WILD_OUT File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:49 Page:585  
--  Include file information  --

   XU_PERR_C.:E05TOU  is referenced.
   XUW_MACRO_C.:E05TOU  is referenced.
   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   F$DCB.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$MAKE_WILD_OUT.

   Procedure VPD$MAKE_WILD_OUT requires 73 words for executable code.
   Procedure VPD$MAKE_WILD_OUT requires 10 words of local(AUTO) storage.

PL6.E3A0      #024=VPD$MAKE_WILD_OUT File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:49 Page:586  

 Object Unit name= VPD$MAKE_WILD_OUT                          File name= VPD$UTIL.:E05TOU
 UTS= JUL 30 '97 07:49:12.48 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$EI
    2   DCB   even  none     0      0  M$EO
    3   DCB   even  none     0      0  M$EO1
    4   DCB   even  none     0      0  M$ME
    5   DCB   even  none     0      0  M$SI
    6   DCB   even  none     0      0  M$READFILE
    7   DCB   even  none     0      0  M$DO
    8   DCB   even  none     0      0  M$STD1
    9   DCB   even  none     0      0  M$SORT1
   10  RoData even  UTS      1      1  VPD$MAKE_WILD_OUT
   11   Data  even  none    12     14  VPD$MAKE_WILD_OUT
   12   Proc  even  none    73    111  VPD$MAKE_WILD_OUT
   13  RoData even  none    15     17  VPD$MAKE_WILD_OUT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    12      0   yes            yes      Std        2  VPD$MAKE_WILD_OUT
PL6.E3A0      #024=VPD$MAKE_WILD_OUT File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:49 Page:587  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       1 X$WILDFMT
         yes           Std       8 VPL$ERR_PROC
                       nStd      0 X66_AUTO_2
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  BREAK_LOC                             BREAK_MESSAGE_REPORTER
     SPEC_BUF                              DIN_NAME                              IN_NAME
     IN_RES                                M$EI                                  M$EO
     M$EO1                                 M$ME                                  M$SI
     M$READFILE                            M$DO                                  M$STD1
     M$SORT1                               B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #024=VPD$MAKE_WILD_OUT File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:49 Page:588  


     2237        1        /*T***********************************************************/
     2238        2        /*T*                                                         */
     2239        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2240        4        /*T*                                                         */
     2241        5        /*T***********************************************************/
     2242        6        VPD$MAKE_WILD_OUT: PROC(TNAME,NEW_NAME);

      6 12 000000   000000 700200 xent  VPD$MAKE_WI* TSX0  ! X66_AUTO_2
        12 000001   000012 000002                    ZERO    10,2

     2243        7        /*D* NAME: VPD$MAKE_WILD_OUT
     2244        8             CALL: CALL VPD$MAKE_WILD_OUT(TNAME,NEW_NAME);
     2245        9             DESCRIPTION: VPD$MAKE_WILD_OUT uses the passed TNAME
     2246       10                          and calls XUW$WILDFMT to format the output name.
     2247       11                          It also uses IN_NAME and DIN_NAME.
     2248       12        */
     2249       13        %INCLUDE F$DCB;
     2250       62        %INCLUDE VP_DATA_R;
     2251     7049        %INCLUDE XUW_MACRO_C;
     2252     7184        %INCLUDE XU_PERR_C;
     2253     7375    1   DCL I UBIN;
     2254     7376    1   DCL 1 TNAME,
     2255     7377    1         2 L UBIN BYTE UNAL,
     2256     7378    1         2 C CHAR(31);
     2257     7379    1   DCL 1 NEW_NAME,
     2258     7380    1         2 L UBIN BYTE UNAL,
     2259     7381    1         2 C CHAR(31);
     2260     7382    1   DCL QUESTION_MARK CHAR(1) CONSTANT INIT('?');
     2261     7383        %VP_ENTRIES (OMIT=VPD$MAKE_WILD_OUT);
     2262     7591        %XUW_ENTRIES;
     2263     7603        %XUW_WILDCARD;
     2264     7699    1           XUW_WILDCARD.TEMPLATE_ = VECTOR(SUBSTR(TNAME.C,0,TNAME.L));

   7699 12 000002   200003 470500                    LDP0    @TNAME,,AUTO
        12 000003   000100 101500                    MRL     fill='000'O
        12 000004   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
PL6.E3A0      #024=VPD$MAKE_WILD_OUT File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:49 Page:589  
        12 000005   200006 000002                    ADSC9   I+1,,AUTO                cn=0,n=2
        12 000006   200006 220100                    LDX0    I+1,,AUTO
        12 000007   000000 635010                    EAA     0,X0
        12 000010   000002 771000                    ARL     2
        12 000011   000140 135007                    SBLA    96,DL
        12 000012   200003 236100                    LDQ     @TNAME,,AUTO
        12 000013   200000 036007                    ADLQ    65536,DL
        12 000014   000004 757000 11                 STAQ    XUW_WILDCARD+4

     2265     7700    1           XUW_WILDCARD.INPUT_ = VECTOR(SUBSTR(DIN_NAME.STRING,0,DIN_NAME.LEN));

   7700 12 000015   000000 236000 xsym               LDQ     DIN_NAME
        12 000016   000033 772000                    QRL     27
        12 000017   000064 737000                    LLS     52
        12 000020   000140 135007                    SBLA    96,DL
        12 000021   000000 236000 13                 LDQ     0
        12 000022   000002 757000 11                 STAQ    XUW_WILDCARD+2

     2266     7701    1           XUW_WILDCARD.PATTERN_ = VECTOR(SUBSTR(IN_NAME.STRING,0,IN_NAME.LEN));

   7701 12 000023   000000 236000 xsym               LDQ     IN_NAME
        12 000024   000033 772000                    QRL     27
        12 000025   000064 737000                    LLS     52
        12 000026   000140 135007                    SBLA    96,DL
        12 000027   000001 236000 13                 LDQ     1
        12 000030   000000 757000 11                 STAQ    XUW_WILDCARD

     2267     7702        /*     If input spec fid was not wildcarded, and the output was, then
     2268     7703               the pattern should match the entire input name                         */
     2269     7704    1           CALL INDEX(I,'?',SUBSTR(IN_NAME.STRING,0,IN_NAME.LEN))

   7704 12 000031   000000 236000 xsym               LDQ     IN_NAME
        12 000032   000033 772000                    QRL     27
        12 000033   000000 620006                    EAX0    0,QL
        12 000034   000000 124440                    SCM     mask='000'O
        12 000035   000000 200010 xsym               ADSC9   IN_NAME                  cn=1,n=*X0
        12 000036   000002 000001 13                 ADSC9   2                        cn=0,n=1
PL6.E3A0      #024=VPD$MAKE_WILD_OUT File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:49 Page:590  
        12 000037   200005 000100                    ARG     I,,AUTO
        12 000040   000042 606400 12                 TTN     s:7706
        12 000041   000044 710000 12                 TRA     s:7708

     2270     7705    2            WHENALTRETURN DO;

     2271     7706    2               XUW_WILDCARD.PATTERN_ = VECTOR(QUESTION_MARK);

   7706 12 000042   000004 237000 13                 LDAQ    4
        12 000043   000000 757000 11                 STAQ    XUW_WILDCARD

     2272     7707    2               END;

     2273     7708    1           XUW_WILDCARD.OUTPUT_ = VECTOR(NEW_NAME.C);

   7708 12 000044   000003 235000 13                 LDA     3
        12 000045   200004 236100                    LDQ     @NEW_NAME,,AUTO
        12 000046   200000 036007                    ADLQ    65536,DL
        12 000047   000006 757000 11                 STAQ    XUW_WILDCARD+6

     2274     7709    1           CALL X$WILDFMT(XUW_WILDCARD)

   7709 12 000050   000006 630400 13                 EPPR0   6
        12 000051   000017 631400 xsym               EPPR1   B_VECTNIL+15
        12 000052   000000 701000 xent               TSX1    X$WILDFMT
        12 000053   000055 702000 12                 TSX2    s:7711
        12 000054   000072 710000 12                 TRA     s:7716

     2275     7710    2            WHENALTRETURN DO;

     2276     7711    2               IF XUW_WILDCARD.ERROR.ERR# = %E$XUW#TOOLONG

   7711 12 000055   000010 236000 11                 LDQ     XUW_WILDCARD+8
        12 000056   377770 376007                    ANQ     131064,DL
        12 000057   004010 116007                    CMPQ    2056,DL
        12 000060   000104 600000 12                 TZE     TOO_LONG

PL6.E3A0      #024=VPD$MAKE_WILD_OUT File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:49 Page:591  
     2277     7712    2                THEN
     2278     7713    2                  GOTO TOO_LONG;
     2279     7714    2               CALL VPL$ERR_PROC(3,0,,XUW_WILDCARD.ERROR); /* Some other error   */

   7714 12 000061   000007 236000 13                 LDQ     7
        12 000062   000001 235000 xsym               LDA     B_VECTNIL+1
        12 000063   200010 757100                    STAQ    I+3,,AUTO
        12 000064   000010 237000 13                 LDAQ    8
        12 000065   200006 757100                    STAQ    I+1,,AUTO
        12 000066   200006 630500                    EPPR0   I+1,,AUTO
        12 000067   000022 631400 xsym               EPPR1   B_VECTNIL+18
        12 000070   000000 701000 xent               TSX1    VPL$ERR_PROC
        12 000071   000000 011000                    NOP     0

     2280     7715    2               END;

     2281     7716    1           NEW_NAME.L = XUW_WILDCARD.OUTPUT_LEN;

   7716 12 000072   200004 470500                    LDP0    @NEW_NAME,,AUTO
        12 000073   000100 101400                    MRL     fill='000'O
        12 000074   000012 000004 11                 ADSC9   XUW_WILDCARD+10          cn=0,n=4
        12 000075   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1

     2282     7717    1           IF NEW_NAME.L > 31

   7717 12 000076   000100 101500                    MRL     fill='000'O
        12 000077   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
        12 000100   200006 000004                    ADSC9   I+1,,AUTO                cn=0,n=4
        12 000101   200006 236100                    LDQ     I+1,,AUTO
        12 000102   000040 116007                    CMPQ    32,DL
        12 000103   000110 604000 12                 TMI     s:7724

     2283     7718    1            THEN
     2284     7719    1   TOO_LONG:  CALL VPL$ERR_PROC(2,40,'04'O);

   7719 12 000104   000014 630400 13    TOO_LONG     EPPR0   12
        12 000105   000021 631400 xsym               EPPR1   B_VECTNIL+17
PL6.E3A0      #024=VPD$MAKE_WILD_OUT File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:49 Page:592  
        12 000106   000000 701000 xent               TSX1    VPL$ERR_PROC
        12 000107   000000 011000                    NOP     0

     2285     7720        /*E* ERROR:   VPD-00040
     2286     7721             MESSAGE: Wildcarded output name too big
     2287     7722            MESSAGE1: Wildcarded output name may not evaluate to > 31 characters
     2288     7723        */
     2289     7724    1           RETURN;

   7724 12 000110   000000 702200 xent               TSX2  ! X66_ARET
     2290     7725    1   END VPD$MAKE_WILD_OUT;
     2291     7726        %EOD;

PL6.E3A0      #024=VPD$MAKE_WILD_OUT File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:49 Page:593  
--  Include file information  --

   XU_PERR_C.:E05TOU  is referenced.
   XUW_MACRO_C.:E05TOU  is referenced.
   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   F$DCB.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$MAKE_WILD_OUT.
PL6.E3A0      #024=VPD$MAKE_WILD_OUT File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:49 Page:594  

 **** Variables and constants ****

  ****  Section 010 RoData VPD$MAKE_WILD_OUT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c CHAR        r     1 QUESTION_MARK

  ****  Section 011  Data  VPD$MAKE_WILD_OUT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(432)   r     1 XUW_WILDCARD

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @NEW_NAME                  3-0-0/w PTR         r     1 @TNAME
     5-0-0/w UBIN        r     1 I                         *0-0-0/c STRC(288)   r     1 NEW_NAME
    *0-0-0/c STRC(288)   r     1 TNAME

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w EPTR        r     1 BREAK_MESSAGE_REPORTER
     0-0-0/c STRC(288)   r     1 DIN_NAME                   0-0-0/c STRC(288)   r     1 IN_NAME

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name
PL6.E3A0      #024=VPD$MAKE_WILD_OUT File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:49 Page:595  

     0-0-0/d ASTR(3528)  r     1 F$DCB


   Procedure VPD$MAKE_WILD_OUT requires 73 words for executable code.
   Procedure VPD$MAKE_WILD_OUT requires 10 words of local(AUTO) storage.
PL6.E3A0      #024=VPD$MAKE_WILD_OUT File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:49 Page:596  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #024=VPD$MAKE_WILD_OUT File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:49 Page:597  
          MINI XREF LISTING

BREAK_LOC
      5269**DCL      5269--REDEF
DEF_ICB.FID.STRING
      5867**DCL      5868--REDEF
DEV_ICB.FID.STRING
      5753**DCL      5754--REDEF
DIN_NAME.LEN
      5560**DCL      7700>>ASSIGN
DIN_NAME.STRING
      5560**DCL      7700--ASSIGN
EI_KEY.KEY
      5965**DCL      5965--REDEF    5965--REDEF    5965--REDEF
EO_OCB.TYPE
      5465**DCL      5466--REDEF
F$DCB.ACTPOS
        39**DCL        39--REDEF
F$DCB.ARS
        14**DCL        14--REDEF
F$DCB.ATTR
        32**DCL        33--REDEF
F$DCB.BORROW
        47**DCL        47--REDEF      47--REDEF      47--REDEF
F$DCB.DCBNAME.L
        61**DCL        61--IMP-SIZ
F$DCB.EOMCHAR
        18**DCL        18--REDEF
F$DCB.FLDID
        42**DCL        42--REDEF
F$DCB.FORM$
        36**DCL        36--REDEF
F$DCB.FSECT
        52**DCL        52--REDEF
PL6.E3A0      #024=VPD$MAKE_WILD_OUT File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:49 Page:598  
F$DCB.FSN
        29**DCL        29--REDEF      29--REDEF      30--REDEF
F$DCB.HEADER$
        35**DCL        35--REDEF
F$DCB.IXTNSIZE
        33**DCL        33--REDEF
F$DCB.LASTSTA$
        23**DCL        23--REDEF
F$DCB.LVL
        48**DCL        48--REDEF
F$DCB.NAME.C
        23**DCL        23--REDEF
F$DCB.NOEOF
        44**DCL        44--REDEF
F$DCB.NRECS
        34**DCL        34--REDEF
F$DCB.NRECX
        53**DCL        53--REDEF
F$DCB.OHDR
        45**DCL        45--REDEF
F$DCB.ORG
        28**DCL        28--REDEF
F$DCB.PRECNO
        51**DCL        51--REDEF
F$DCB.RCSZ
        56**DCL        56--REDEF
F$DCB.RES
        24**DCL        24--REDEF
F$DCB.SETX
        36**DCL        36--REDEF
F$DCB.TAB$
        35**DCL        36--REDEF
F$DCB.TDA
        50**DCL        50--REDEF
F$DCB.WSN
        25**DCL        25--REDEF
PL6.E3A0      #024=VPD$MAKE_WILD_OUT File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:49 Page:599  
FPT_CLOSE_EI.SN_
      6806**DCL      6806--REDEF
FPT_CLOSE_EI.UTL_
      6807**DCL      6807--REDEF
FPT_CLOSE_EI.V.EXPIRE#
      6821**DCL      6821--REDEF
FPT_CLOSE_EI.V.TYPE#
      6819**DCL      6819--REDEF
FPT_CLOSE_EI.V.XTNSIZE#
      6816**DCL      6816--REDEF    6818--REDEF
FPT_CLOSE_PTL.SN_
      6932**DCL      6932--REDEF
FPT_CLOSE_PTL.UTL_
      6933**DCL      6933--REDEF
FPT_CLOSE_PTL.V.EXPIRE#
      6947**DCL      6947--REDEF
FPT_CLOSE_PTL.V.TYPE#
      6945**DCL      6945--REDEF
FPT_CLOSE_PTL.V.XTNSIZE#
      6942**DCL      6942--REDEF    6944--REDEF
FPT_CLOSE_READ.SN_
      6848**DCL      6848--REDEF
FPT_CLOSE_READ.UTL_
      6849**DCL      6849--REDEF
FPT_CLOSE_READ.V.EXPIRE#
      6863**DCL      6863--REDEF
FPT_CLOSE_READ.V.TYPE#
      6861**DCL      6861--REDEF
FPT_CLOSE_READ.V.XTNSIZE#
      6858**DCL      6858--REDEF    6860--REDEF
FPT_CLOSE_SI.SN_
      7016**DCL      7016--REDEF
FPT_CLOSE_SI.UTL_
      7017**DCL      7017--REDEF
FPT_CLOSE_SI.V.EXPIRE#
      7031**DCL      7031--REDEF
PL6.E3A0      #024=VPD$MAKE_WILD_OUT File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:49 Page:600  
FPT_CLOSE_SI.V.TYPE#
      7029**DCL      7029--REDEF
FPT_CLOSE_SI.V.XTNSIZE#
      7026**DCL      7026--REDEF    7028--REDEF
FPT_CLOSE_STD.SN_
      6974**DCL      6974--REDEF
FPT_CLOSE_STD.UTL_
      6975**DCL      6975--REDEF
FPT_CLOSE_STD.V.EXPIRE#
      6989**DCL      6989--REDEF
FPT_CLOSE_STD.V.TYPE#
      6987**DCL      6987--REDEF
FPT_CLOSE_STD.V.XTNSIZE#
      6984**DCL      6984--REDEF    6986--REDEF
FPT_CLSEI_FT.SN_
      6890**DCL      6890--REDEF
FPT_CLSEI_FT.UTL_
      6891**DCL      6891--REDEF
FPT_CLSEI_FT.V.EXPIRE#
      6905**DCL      6905--REDEF
FPT_CLSEI_FT.V.TYPE#
      6903**DCL      6903--REDEF
FPT_CLSEI_FT.V.XTNSIZE#
      6900**DCL      6900--REDEF    6902--REDEF
FPT_OPEN_EI.ACSVEH_
      6461**DCL      6462--REDEF
FPT_OPEN_EI.ALTKEYS_
      6467**DCL      6468--REDEF    6468--REDEF
FPT_OPEN_EI.HDR_
      6466**DCL      6467--REDEF
FPT_OPEN_EI.TAB_
      6465**DCL      6466--REDEF
FPT_OPEN_EI.UHL_
      6459**DCL      6460--REDEF    6460--REDEF
FPT_OPEN_EI.V.FSN#
      6499**DCL      6499--REDEF    6499--REDEF
PL6.E3A0      #024=VPD$MAKE_WILD_OUT File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:49 Page:601  
FPT_OPEN_EI.WSN_
      6465**DCL      6465--REDEF
FPT_OPEN_EI_SAVE.ACSVEH_
      6570**DCL      6571--REDEF
FPT_OPEN_EI_SAVE.ALTKEYS_
      6576**DCL      6577--REDEF    6577--REDEF
FPT_OPEN_EI_SAVE.HDR_
      6575**DCL      6576--REDEF
FPT_OPEN_EI_SAVE.TAB_
      6574**DCL      6575--REDEF
FPT_OPEN_EI_SAVE.UHL_
      6568**DCL      6569--REDEF    6569--REDEF
FPT_OPEN_EI_SAVE.V.FSN#
      6608**DCL      6608--REDEF    6608--REDEF
FPT_OPEN_EI_SAVE.WSN_
      6574**DCL      6574--REDEF
FPT_OPEN_OUT.ACSVEH_
      6352**DCL      6353--REDEF
FPT_OPEN_OUT.ALTKEYS_
      6358**DCL      6359--REDEF    6359--REDEF
FPT_OPEN_OUT.HDR_
      6357**DCL      6358--REDEF
FPT_OPEN_OUT.TAB_
      6356**DCL      6357--REDEF
FPT_OPEN_OUT.UHL_
      6350**DCL      6351--REDEF    6351--REDEF
FPT_OPEN_OUT.V.FSN#
      6390**DCL      6390--REDEF    6390--REDEF
FPT_OPEN_OUT.WSN_
      6356**DCL      6356--REDEF
FPT_OPEN_OUT_SAVE.ACSVEH_
      6243**DCL      6244--REDEF
FPT_OPEN_OUT_SAVE.ALTKEYS_
      6249**DCL      6250--REDEF    6250--REDEF
FPT_OPEN_OUT_SAVE.HDR_
      6248**DCL      6249--REDEF
PL6.E3A0      #024=VPD$MAKE_WILD_OUT File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:49 Page:602  
FPT_OPEN_OUT_SAVE.TAB_
      6247**DCL      6248--REDEF
FPT_OPEN_OUT_SAVE.UHL_
      6241**DCL      6242--REDEF    6242--REDEF
FPT_OPEN_OUT_SAVE.V.FSN#
      6281**DCL      6281--REDEF    6281--REDEF
FPT_OPEN_OUT_SAVE.WSN_
      6247**DCL      6247--REDEF
FPT_READ_STD.STATION_
      6671**DCL      6672--REDEF
FPT_READ_STD.V.DVBYTE.REREAD#
      6683**DCL      6683--REDEF
FPT_READ_STD.V.INDX#
      6681**DCL      6681--REDEF
FPT_READ_UC.STATION_
      6632**DCL      6633--REDEF
FPT_READ_UC.V.DVBYTE.REREAD#
      6644**DCL      6644--REDEF
FPT_READ_UC.V.INDX#
      6642**DCL      6642--REDEF
FPT_WRITE_ME.STATION_
      6740**DCL      6740--REDEF
FPT_WRITE_ME.V.DVBYTE.VFC#
      6747**DCL      6747--REDEF
FPT_WRITE_OUT.STATION_
      6771**DCL      6771--REDEF
FPT_WRITE_OUT.V.DVBYTE.VFC#
      6778**DCL      6778--REDEF
FPT_WRITE_UC.STATION_
      6709**DCL      6709--REDEF
FPT_WRITE_UC.V.DVBYTE.VFC#
      6716**DCL      6716--REDEF
FROM_SN.SN
      5615**DCL      5616--REDEF
GETCMD.OUT$
      4822**DCL      4828--REDEF
PL6.E3A0      #024=VPD$MAKE_WILD_OUT File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:49 Page:603  
I
      7375**DCL      7704<<CALLBLT
ICB.FID.STRING
      5639**DCL      5640--REDEF
IFSFA_PARAM.EOMCHAR#
      5994**DCL      5995--REDEF
IFSFA_PARAM.SIG1
      5988**DCL      5988--REDEF
IFSFA_PARAM.SIG2
      5988**DCL      5989--REDEF
IN_NAME.LEN
      5560**DCL      7701>>ASSIGN   7704>>CALLBLT
IN_NAME.STRING
      5560**DCL      7701--ASSIGN   7704>>CALLBLT
IN_RES
      5561**DCL      5561--REDEF
IN_SN.SN
      5577**DCL      5578--REDEF
NEW_NAME
      7379**DCL         6--PROC
NEW_NAME.C
      7381**DCL      7708--ASSIGN
NEW_NAME.L
      7380**DCL      7716<<ASSIGN   7717>>IF
OCB.TYPE
      5323**DCL      5324--REDEF
OFSFA_PARAM.EOMCHAR#
      6024**DCL      6025--REDEF
OFSFA_PARAM.SIG1
      6018**DCL      6018--REDEF
OFSFA_PARAM.SIG2
      6018**DCL      6019--REDEF
OUT_SN.SN
      5595**DCL      5596--REDEF
QUESTION_MARK
      7382**DCL      7706--ASSIGN
PL6.E3A0      #024=VPD$MAKE_WILD_OUT File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:49 Page:604  
SPEC_BUF
      5273**DCL      5273--REDEF
TNAME
      7376**DCL         6--PROC
TNAME.C
      7378**DCL      7699--ASSIGN
TNAME.L
      7377**DCL      7699>>ASSIGN
TOO_LONG
      7719**LABEL    7713--GOTO
VPL$ERR_PROC
      7565**DCL-ENT  7714--CALL     7719--CALL
X$WILDFMT
      7593**DCL-ENT  7709--CALL
XUW_WILDCARD
      7665**DCL      7709<>CALL
XUW_WILDCARD.ERROR
      7686**DCL      7714<>CALL
XUW_WILDCARD.ERROR.ERR#
      7690**DCL      7711>>IF
XUW_WILDCARD.INPUT_
      7671**DCL      7700<<ASSIGN
XUW_WILDCARD.OUTPUT_
      7681**DCL      7708<<ASSIGN
XUW_WILDCARD.OUTPUT_LEN
      7696**DCL      7716>>ASSIGN
XUW_WILDCARD.PATTERN_
      7666**DCL      7701<<ASSIGN   7706<<ASSIGN
XUW_WILDCARD.TEMPLATE_
      7676**DCL      7699<<ASSIGN

PL6.E3A0      #025=VPD$MNG_CRPT File=VPD$UTIL.:E05TSI                            WED 07/30/97 07:51 Page:605  
     2292        1        /*T***********************************************************/
     2293        2        /*T*                                                         */
     2294        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2295        4        /*T*                                                         */
     2296        5        /*T***********************************************************/
     2297        6        VPD$MNG_CRPT: PROC(CONVERTED_VALUE,NODE$) ALTRET;
     2298        7        /*D* NAME: VPD$MNG_CRPT
     2299        8             CALL: CALL VPD$MNG_CRPT(CONVERTED_VALUE,NODE$);
     2300        9             DESCRIPTION: This module is used for both input and output
     2301       10                          CRPT options.  It will munge either a text string
     2302       11                          or octal string into a UBIN WORD.
     2303       12        */
     2304       13        /**/
     2305       14        /*  PARAMETERS  */
     2306       15        /**/
     2307       16    1   DCL CONVERTED_VALUE UBIN WORD;
     2308       17    1   DCL CONVERTED_VALUE_(0:3) REDEF CONVERTED_VALUE CHAR(1);
     2309       18    1   DCL NODE$ PTR;
     2310       19        /**/
     2311       20        /*  INCLUDE FILES  */
     2312       21        /**/
     2313       22        %INCLUDE VP_DATA_R;
     2314     7009        /**/
     2315     7010        /*  LOCAL AUTO  */
     2316     7011        /**/
     2317     7012    1   DCL I UBIN WORD AUTO;
     2318     7013        /**/
     2319     7014        /*  BASED DATA  */
     2320     7015        /**/
     2321     7016        %PARSE$OUT(STCLASS=BASED);
     2322     7061        %PARSE$SYM(STCLASS=BASED);
     2323     7099    1   DCL 1 TEXT$C BASED CALIGNED,
     2324     7100    1         2 C UBIN(9) CALIGNED,
     2325     7101    1         2 T(0:0) CHAR(1) CALIGNED,
     2326     7102    1         2 U(0:0) REDEF T UBIN(9) CALIGNED;
     2327     7103        /**/
     2328     7104    1           CONVERTED_VALUE = 0;
PL6.E3A0      #025=VPD$MNG_CRPT File=VPD$UTIL.:E05TSI                            WED 07/30/97 07:51 Page:606  
     2329     7105    1           IF NODE$ -> OUT$BLK.CODE = 4
     2330     7106    1            THEN                           /* TEXT!                              */
     2331     7107    2            DO;
     2332     7108    2               IF NODE$ -> OUT$BLK.SUBLK$(0) -> TEXT$C.C > 4
     2333     7109    2                THEN
     2334     7110    2                  GOTO GRIPE;
     2335     7111    3               DO I = 0 TO NODE$ -> OUT$BLK.SUBLK$(0) -> TEXT$C.C -1;
     2336     7112    3                  CONVERTED_VALUE_(I) = NODE$ -> OUT$BLK.SUBLK$(0) -> TEXT$C.T(I);
     2337     7113    3                  END;
     2338     7114    2               END;
     2339     7115    1            ELSE                           /* OCTAL!                             */
     2340     7116    2            DO;
     2341     7117    2               IF NODE$ -> OUT$BLK.SUBLK$(0) -> TEXT$C.C > 12
     2342     7118    2                THEN
     2343     7119    2                  GOTO GRIPE;
     2344     7120    3               DO I = 0 TO NODE$ -> OUT$BLK.SUBLK$(0) -> TEXT$C.C -1;
     2345     7121    3                  CONVERTED_VALUE = CONVERTED_VALUE*8 +
     2346     7122    3                    ASCBIN(NODE$ -> OUT$BLK.SUBLK$(0) -> TEXT$C.T(I)) - 48;
     2347     7123    3                  END;
     2348     7124    2               END;
     2349     7125    1           RETURN;
     2350     7126        /**/
     2351     7127    1   GRIPE:  ;
     2352     7128    1           ALTRETURN;
     2353     7129        /**/
     2354     7130    1   END VPD$MNG_CRPT;
     2355     7131        %EOD;

PL6.E3A0      #025=VPD$MNG_CRPT File=VPD$UTIL.:E05TSI                            WED 07/30/97 07:51 Page:607  
--  Include file information  --

   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$MNG_CRPT.

   Procedure VPD$MNG_CRPT requires 77 words for executable code.
   Procedure VPD$MNG_CRPT requires 8 words of local(AUTO) storage.

PL6.E3A0      #025=VPD$MNG_CRPT File=VPD$UTIL.:E05TSI                            WED 07/30/97 07:51 Page:608  

 Object Unit name= VPD$MNG_CRPT                               File name= VPD$UTIL.:E05TOU
 UTS= JUL 30 '97 07:51:04.76 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$EI
    2   DCB   even  none     0      0  M$EO
    3   DCB   even  none     0      0  M$EO1
    4   DCB   even  none     0      0  M$ME
    5   DCB   even  none     0      0  M$SI
    6   DCB   even  none     0      0  M$READFILE
    7   DCB   even  none     0      0  M$DO
    8   DCB   even  none     0      0  M$STD1
    9   DCB   even  none     0      0  M$SORT1
   10   Proc  even  none    77    115  VPD$MNG_CRPT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    10      0   yes    yes     yes      Std        2  VPD$MNG_CRPT

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_2
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT
PL6.E3A0      #025=VPD$MNG_CRPT File=VPD$UTIL.:E05TSI                            WED 07/30/97 07:51 Page:609  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  BREAK_LOC                             BREAK_MESSAGE_REPORTER
     SPEC_BUF                              IN_RES                                M$EI
     M$EO                                  M$EO1                                 M$ME
     M$SI                                  M$READFILE                            M$DO
     M$STD1                                M$SORT1
PL6.E3A0      #025=VPD$MNG_CRPT File=VPD$UTIL.:E05TSI                            WED 07/30/97 07:51 Page:610  


     2292        1        /*T***********************************************************/
     2293        2        /*T*                                                         */
     2294        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2295        4        /*T*                                                         */
     2296        5        /*T***********************************************************/
     2297        6        VPD$MNG_CRPT: PROC(CONVERTED_VALUE,NODE$) ALTRET;

      6 10 000000   000000 700200 xent  VPD$MNG_CRPT TSX0  ! X66_AUTO_2
        10 000001   000010 000002                    ZERO    8,2

     2298        7        /*D* NAME: VPD$MNG_CRPT
     2299        8             CALL: CALL VPD$MNG_CRPT(CONVERTED_VALUE,NODE$);
     2300        9             DESCRIPTION: This module is used for both input and output
     2301       10                          CRPT options.  It will munge either a text string
     2302       11                          or octal string into a UBIN WORD.
     2303       12        */
     2304       13        /**/
     2305       14        /*  PARAMETERS  */
     2306       15        /**/
     2307       16    1   DCL CONVERTED_VALUE UBIN WORD;
     2308       17    1   DCL CONVERTED_VALUE_(0:3) REDEF CONVERTED_VALUE CHAR(1);
     2309       18    1   DCL NODE$ PTR;
     2310       19        /**/
     2311       20        /*  INCLUDE FILES  */
     2312       21        /**/
     2313       22        %INCLUDE VP_DATA_R;
     2314     7009        /**/
     2315     7010        /*  LOCAL AUTO  */
     2316     7011        /**/
     2317     7012    1   DCL I UBIN WORD AUTO;
     2318     7013        /**/
     2319     7014        /*  BASED DATA  */
     2320     7015        /**/
     2321     7016        %PARSE$OUT(STCLASS=BASED);
     2322     7061        %PARSE$SYM(STCLASS=BASED);
     2323     7099    1   DCL 1 TEXT$C BASED CALIGNED,
PL6.E3A0      #025=VPD$MNG_CRPT File=VPD$UTIL.:E05TSI                            WED 07/30/97 07:51 Page:611  
     2324     7100    1         2 C UBIN(9) CALIGNED,
     2325     7101    1         2 T(0:0) CHAR(1) CALIGNED,
     2326     7102    1         2 U(0:0) REDEF T UBIN(9) CALIGNED;
     2327     7103        /**/
     2328     7104    1           CONVERTED_VALUE = 0;

   7104 10 000002   200003 470500                    LDP0    @CONVERTED_VALUE,,AUTO
        10 000003   000000 450100                    STZ     0,,PR0

     2329     7105    1           IF NODE$ -> OUT$BLK.CODE = 4

   7105 10 000004   200004 471500                    LDP1    @NODE$,,AUTO
        10 000005   100000 473500                    LDP3    0,,PR1
        10 000006   300000 720100                    LXL0    0,,PR3
        10 000007   000004 100003                    CMPX0   4,DU
        10 000010   000047 601000 10                 TNZ     s:7117

     2330     7106    1            THEN                           /* TEXT!                              */
     2331     7107    2            DO;

     2332     7108    2               IF NODE$ -> OUT$BLK.SUBLK$(0) -> TEXT$C.C > 4

   7108 10 000011   300003 474500                    LDP4    3,,PR3
        10 000012   000100 101500                    MRL     fill='000'O
        10 000013   400000 000001                    ADSC9   0,,PR4                   cn=0,n=1
        10 000014   200006 000004                    ADSC9   I+1,,AUTO                cn=0,n=4
        10 000015   200006 236100                    LDQ     I+1,,AUTO
        10 000016   000005 116007                    CMPQ    5,DL
        10 000017   000114 605000 10                 TPL     GRIPE

     2333     7109    2                THEN
     2334     7110    2                  GOTO GRIPE;
     2335     7111    3               DO I = 0 TO NODE$ -> OUT$BLK.SUBLK$(0) -> TEXT$C.C -1;

   7111 10 000020   200005 450100                    STZ     I,,AUTO
        10 000021   000034 710000 10                 TRA     s:7113+2

PL6.E3A0      #025=VPD$MNG_CRPT File=VPD$UTIL.:E05TSI                            WED 07/30/97 07:51 Page:612  
     2336     7112    3                  CONVERTED_VALUE_(I) = NODE$ -> OUT$BLK.SUBLK$(0) -> TEXT$C.T(I);

   7112 10 000022   200004 470500                    LDP0    @NODE$,,AUTO
        10 000023   000000 471500                    LDP1    0,,PR0
        10 000024   100003 473500                    LDP3    3,,PR1
        10 000025   200005 235100                    LDA     I,,AUTO
        10 000026   200003 474500                    LDP4    @CONVERTED_VALUE,,AUTO
        10 000027   040105 100505                    MLR     fill='040'O
        10 000030   300000 200001                    ADSC9   0,A,PR3                  cn=1,n=1
        10 000031   400000 000001                    ADSC9   0,A,PR4                  cn=0,n=1

     2337     7113    3                  END;

   7113 10 000032   000001 035007                    ADLA    1,DL
        10 000033   200005 755100                    STA     I,,AUTO
        10 000034   200004 470500                    LDP0    @NODE$,,AUTO
        10 000035   000000 471500                    LDP1    0,,PR0
        10 000036   100003 473500                    LDP3    3,,PR1
        10 000037   000100 101500                    MRL     fill='000'O
        10 000040   300000 000001                    ADSC9   0,,PR3                   cn=0,n=1
        10 000041   200006 000004                    ADSC9   I+1,,AUTO                cn=0,n=4
        10 000042   200006 236100                    LDQ     I+1,,AUTO
        10 000043   200005 116100                    CMPQ    I,,AUTO
        10 000044   000046 600000 10                 TZE     s:7114
        10 000045   000022 603000 10                 TRC     s:7112

     2338     7114    2               END;

   7114 10 000046   000113 710000 10                 TRA     s:7125

     2339     7115    1            ELSE                           /* OCTAL!                             */
     2340     7116    2            DO;

     2341     7117    2               IF NODE$ -> OUT$BLK.SUBLK$(0) -> TEXT$C.C > 12

   7117 10 000047   300003 474500                    LDP4    3,,PR3
        10 000050   000100 101500                    MRL     fill='000'O
PL6.E3A0      #025=VPD$MNG_CRPT File=VPD$UTIL.:E05TSI                            WED 07/30/97 07:51 Page:613  
        10 000051   400000 000001                    ADSC9   0,,PR4                   cn=0,n=1
        10 000052   200006 000004                    ADSC9   I+1,,AUTO                cn=0,n=4
        10 000053   200006 236100                    LDQ     I+1,,AUTO
        10 000054   000015 116007                    CMPQ    13,DL
        10 000055   000114 605000 10                 TPL     GRIPE

     2342     7118    2                THEN
     2343     7119    2                  GOTO GRIPE;
     2344     7120    3               DO I = 0 TO NODE$ -> OUT$BLK.SUBLK$(0) -> TEXT$C.C -1;

   7120 10 000056   200005 450100                    STZ     I,,AUTO
        10 000057   000101 710000 10                 TRA     s:7123+2

     2345     7121    3                  CONVERTED_VALUE = CONVERTED_VALUE*8 +

   7121 10 000060   200004 470500                    LDP0    @NODE$,,AUTO
        10 000061   000000 471500                    LDP1    0,,PR0
        10 000062   100003 473500                    LDP3    3,,PR1
        10 000063   200005 235100                    LDA     I,,AUTO
        10 000064   000100 101505                    MRL     fill='000'O
        10 000065   300000 200001                    ADSC9   0,A,PR3                  cn=1,n=1
        10 000066   200006 000004                    ADSC9   I+1,,AUTO                cn=0,n=4
        10 000067   200006 236100                    LDQ     I+1,,AUTO
        10 000070   200007 756100                    STQ     I+2,,AUTO
        10 000071   200003 471500                    LDP1    @CONVERTED_VALUE,,AUTO
        10 000072   100000 236100                    LDQ     0,,PR1
        10 000073   000003 736000                    QLS     3
        10 000074   200007 036100                    ADLQ    I+2,,AUTO
        10 000075   000060 136007                    SBLQ    48,DL
        10 000076   100000 756100                    STQ     0,,PR1

     2346     7122    3                    ASCBIN(NODE$ -> OUT$BLK.SUBLK$(0) -> TEXT$C.T(I)) - 48;
     2347     7123    3                  END;

   7123 10 000077   000001 035007                    ADLA    1,DL
        10 000100   200005 755100                    STA     I,,AUTO
        10 000101   200004 470500                    LDP0    @NODE$,,AUTO
PL6.E3A0      #025=VPD$MNG_CRPT File=VPD$UTIL.:E05TSI                            WED 07/30/97 07:51 Page:614  
        10 000102   000000 471500                    LDP1    0,,PR0
        10 000103   100003 473500                    LDP3    3,,PR1
        10 000104   000100 101500                    MRL     fill='000'O
        10 000105   300000 000001                    ADSC9   0,,PR3                   cn=0,n=1
        10 000106   200006 000004                    ADSC9   I+1,,AUTO                cn=0,n=4
        10 000107   200006 236100                    LDQ     I+1,,AUTO
        10 000110   200005 116100                    CMPQ    I,,AUTO
        10 000111   000113 600000 10                 TZE     s:7125
        10 000112   000060 603000 10                 TRC     s:7121

     2348     7124    2               END;

     2349     7125    1           RETURN;

   7125 10 000113   000000 702200 xent               TSX2  ! X66_ARET

   7120 10 000114                       GRIPE        null
     2350     7126        /**/
     2351     7127    1   GRIPE:  ;
     2352     7128    1           ALTRETURN;

   7128 10 000114   000000 702200 xent               TSX2  ! X66_AALT
     2353     7129        /**/
     2354     7130    1   END VPD$MNG_CRPT;
     2355     7131        %EOD;

PL6.E3A0      #025=VPD$MNG_CRPT File=VPD$UTIL.:E05TSI                            WED 07/30/97 07:51 Page:615  
--  Include file information  --

   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$MNG_CRPT.
PL6.E3A0      #025=VPD$MNG_CRPT File=VPD$UTIL.:E05TSI                            WED 07/30/97 07:51 Page:616  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @CONVERTED_VALUE           4-0-0/w PTR         r     1 @NODE$
    *0-0-0/w UBIN        r     1 CONVERTED_VALUE
    *0-0-0/w CHAR        r     1 CONVERTED_VALUE_(0:3)
     5-0-0/w UBIN        r     1 I                         *0-0-0/w PTR         r     1 NODE$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w EPTR        r     1 BREAK_MESSAGE_REPORTER

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(144)   r     1 OUT$BLK                    0-0-0/w ASTR(153)   r     1 OUT$SYM
     0-0-0/c STRC(18)    r     1 TEXT$C


   Procedure VPD$MNG_CRPT requires 77 words for executable code.
   Procedure VPD$MNG_CRPT requires 8 words of local(AUTO) storage.
PL6.E3A0      #025=VPD$MNG_CRPT File=VPD$UTIL.:E05TSI                            WED 07/30/97 07:51 Page:617  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #025=VPD$MNG_CRPT File=VPD$UTIL.:E05TSI                            WED 07/30/97 07:51 Page:618  
          MINI XREF LISTING

BREAK_LOC
      5229**DCL      5229--REDEF
CONVERTED_VALUE
        16**DCL         6--PROC       17--REDEF    7104<<ASSIGN   7121<<ASSIGN   7121>>ASSIGN
CONVERTED_VALUE_
        17**DCL      7112<<ASSIGN
DEF_ICB.FID.STRING
      5827**DCL      5828--REDEF
DEV_ICB.FID.STRING
      5713**DCL      5714--REDEF
EI_KEY.KEY
      5925**DCL      5925--REDEF    5925--REDEF    5925--REDEF
EO_OCB.TYPE
      5425**DCL      5426--REDEF
FPT_CLOSE_EI.SN_
      6766**DCL      6766--REDEF
FPT_CLOSE_EI.UTL_
      6767**DCL      6767--REDEF
FPT_CLOSE_EI.V.EXPIRE#
      6781**DCL      6781--REDEF
FPT_CLOSE_EI.V.TYPE#
      6779**DCL      6779--REDEF
FPT_CLOSE_EI.V.XTNSIZE#
      6776**DCL      6776--REDEF    6778--REDEF
FPT_CLOSE_PTL.SN_
      6892**DCL      6892--REDEF
FPT_CLOSE_PTL.UTL_
      6893**DCL      6893--REDEF
FPT_CLOSE_PTL.V.EXPIRE#
      6907**DCL      6907--REDEF
FPT_CLOSE_PTL.V.TYPE#
      6905**DCL      6905--REDEF
PL6.E3A0      #025=VPD$MNG_CRPT File=VPD$UTIL.:E05TSI                            WED 07/30/97 07:51 Page:619  
FPT_CLOSE_PTL.V.XTNSIZE#
      6902**DCL      6902--REDEF    6904--REDEF
FPT_CLOSE_READ.SN_
      6808**DCL      6808--REDEF
FPT_CLOSE_READ.UTL_
      6809**DCL      6809--REDEF
FPT_CLOSE_READ.V.EXPIRE#
      6823**DCL      6823--REDEF
FPT_CLOSE_READ.V.TYPE#
      6821**DCL      6821--REDEF
FPT_CLOSE_READ.V.XTNSIZE#
      6818**DCL      6818--REDEF    6820--REDEF
FPT_CLOSE_SI.SN_
      6976**DCL      6976--REDEF
FPT_CLOSE_SI.UTL_
      6977**DCL      6977--REDEF
FPT_CLOSE_SI.V.EXPIRE#
      6991**DCL      6991--REDEF
FPT_CLOSE_SI.V.TYPE#
      6989**DCL      6989--REDEF
FPT_CLOSE_SI.V.XTNSIZE#
      6986**DCL      6986--REDEF    6988--REDEF
FPT_CLOSE_STD.SN_
      6934**DCL      6934--REDEF
FPT_CLOSE_STD.UTL_
      6935**DCL      6935--REDEF
FPT_CLOSE_STD.V.EXPIRE#
      6949**DCL      6949--REDEF
FPT_CLOSE_STD.V.TYPE#
      6947**DCL      6947--REDEF
FPT_CLOSE_STD.V.XTNSIZE#
      6944**DCL      6944--REDEF    6946--REDEF
FPT_CLSEI_FT.SN_
      6850**DCL      6850--REDEF
FPT_CLSEI_FT.UTL_
      6851**DCL      6851--REDEF
PL6.E3A0      #025=VPD$MNG_CRPT File=VPD$UTIL.:E05TSI                            WED 07/30/97 07:51 Page:620  
FPT_CLSEI_FT.V.EXPIRE#
      6865**DCL      6865--REDEF
FPT_CLSEI_FT.V.TYPE#
      6863**DCL      6863--REDEF
FPT_CLSEI_FT.V.XTNSIZE#
      6860**DCL      6860--REDEF    6862--REDEF
FPT_OPEN_EI.ACSVEH_
      6421**DCL      6422--REDEF
FPT_OPEN_EI.ALTKEYS_
      6427**DCL      6428--REDEF    6428--REDEF
FPT_OPEN_EI.HDR_
      6426**DCL      6427--REDEF
FPT_OPEN_EI.TAB_
      6425**DCL      6426--REDEF
FPT_OPEN_EI.UHL_
      6419**DCL      6420--REDEF    6420--REDEF
FPT_OPEN_EI.V.FSN#
      6459**DCL      6459--REDEF    6459--REDEF
FPT_OPEN_EI.WSN_
      6425**DCL      6425--REDEF
FPT_OPEN_EI_SAVE.ACSVEH_
      6530**DCL      6531--REDEF
FPT_OPEN_EI_SAVE.ALTKEYS_
      6536**DCL      6537--REDEF    6537--REDEF
FPT_OPEN_EI_SAVE.HDR_
      6535**DCL      6536--REDEF
FPT_OPEN_EI_SAVE.TAB_
      6534**DCL      6535--REDEF
FPT_OPEN_EI_SAVE.UHL_
      6528**DCL      6529--REDEF    6529--REDEF
FPT_OPEN_EI_SAVE.V.FSN#
      6568**DCL      6568--REDEF    6568--REDEF
FPT_OPEN_EI_SAVE.WSN_
      6534**DCL      6534--REDEF
FPT_OPEN_OUT.ACSVEH_
      6312**DCL      6313--REDEF
PL6.E3A0      #025=VPD$MNG_CRPT File=VPD$UTIL.:E05TSI                            WED 07/30/97 07:51 Page:621  
FPT_OPEN_OUT.ALTKEYS_
      6318**DCL      6319--REDEF    6319--REDEF
FPT_OPEN_OUT.HDR_
      6317**DCL      6318--REDEF
FPT_OPEN_OUT.TAB_
      6316**DCL      6317--REDEF
FPT_OPEN_OUT.UHL_
      6310**DCL      6311--REDEF    6311--REDEF
FPT_OPEN_OUT.V.FSN#
      6350**DCL      6350--REDEF    6350--REDEF
FPT_OPEN_OUT.WSN_
      6316**DCL      6316--REDEF
FPT_OPEN_OUT_SAVE.ACSVEH_
      6203**DCL      6204--REDEF
FPT_OPEN_OUT_SAVE.ALTKEYS_
      6209**DCL      6210--REDEF    6210--REDEF
FPT_OPEN_OUT_SAVE.HDR_
      6208**DCL      6209--REDEF
FPT_OPEN_OUT_SAVE.TAB_
      6207**DCL      6208--REDEF
FPT_OPEN_OUT_SAVE.UHL_
      6201**DCL      6202--REDEF    6202--REDEF
FPT_OPEN_OUT_SAVE.V.FSN#
      6241**DCL      6241--REDEF    6241--REDEF
FPT_OPEN_OUT_SAVE.WSN_
      6207**DCL      6207--REDEF
FPT_READ_STD.STATION_
      6631**DCL      6632--REDEF
FPT_READ_STD.V.DVBYTE.REREAD#
      6643**DCL      6643--REDEF
FPT_READ_STD.V.INDX#
      6641**DCL      6641--REDEF
FPT_READ_UC.STATION_
      6592**DCL      6593--REDEF
FPT_READ_UC.V.DVBYTE.REREAD#
      6604**DCL      6604--REDEF
PL6.E3A0      #025=VPD$MNG_CRPT File=VPD$UTIL.:E05TSI                            WED 07/30/97 07:51 Page:622  
FPT_READ_UC.V.INDX#
      6602**DCL      6602--REDEF
FPT_WRITE_ME.STATION_
      6700**DCL      6700--REDEF
FPT_WRITE_ME.V.DVBYTE.VFC#
      6707**DCL      6707--REDEF
FPT_WRITE_OUT.STATION_
      6731**DCL      6731--REDEF
FPT_WRITE_OUT.V.DVBYTE.VFC#
      6738**DCL      6738--REDEF
FPT_WRITE_UC.STATION_
      6669**DCL      6669--REDEF
FPT_WRITE_UC.V.DVBYTE.VFC#
      6676**DCL      6676--REDEF
FROM_SN.SN
      5575**DCL      5576--REDEF
GETCMD.OUT$
      4782**DCL      4788--REDEF
GRIPE
      7120**LABEL    7110--GOTO     7119--GOTO
I
      7012**DCL      7111<<DOINDEX  7112>>ASSIGN   7112>>ASSIGN   7120<<DOINDEX  7121>>ASSIGN
ICB.FID.STRING
      5599**DCL      5600--REDEF
IFSFA_PARAM.EOMCHAR#
      5954**DCL      5955--REDEF
IFSFA_PARAM.SIG1
      5948**DCL      5948--REDEF
IFSFA_PARAM.SIG2
      5948**DCL      5949--REDEF
IN_RES
      5521**DCL      5521--REDEF
IN_SN.SN
      5537**DCL      5538--REDEF
NODE$
        18**DCL         6--PROC     7105>>IF       7108>>IF       7111>>DOINDEX  7112>>ASSIGN   7117>>IF
PL6.E3A0      #025=VPD$MNG_CRPT File=VPD$UTIL.:E05TSI                            WED 07/30/97 07:51 Page:623  
      7120>>DOINDEX  7121>>ASSIGN
OCB.TYPE
      5283**DCL      5284--REDEF
OFSFA_PARAM.EOMCHAR#
      5984**DCL      5985--REDEF
OFSFA_PARAM.SIG1
      5978**DCL      5978--REDEF
OFSFA_PARAM.SIG2
      5978**DCL      5979--REDEF
OUT$BLK.CODE
      7030**DCL      7105>>IF
OUT$BLK.SUBLK$
      7055**DCL      7108>>IF       7111>>DOINDEX  7112>>ASSIGN   7117>>IF       7120>>DOINDEX  7121>>ASSIGN
OUT$SYM.COUNT
      7091**DCL      7094--IMP-SIZ
OUT_SN.SN
      5555**DCL      5556--REDEF
SPEC_BUF
      5233**DCL      5233--REDEF
TEXT$C.C
      7100**DCL      7108>>IF       7111>>DOINDEX  7117>>IF       7120>>DOINDEX
TEXT$C.T
      7101**DCL      7102--REDEF    7112>>ASSIGN   7121>>ASSIGN

PL6.E3A0      #026=VPD$OUT_NAMES File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:52 Page:624  
     2356        1        /*T***********************************************************/
     2357        2        /*T*                                                         */
     2358        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2359        4        /*T*                                                         */
     2360        5        /*T***********************************************************/
     2361        6        VPD$OUT_NAMES: PROC(IN_NAM,OUT_NAM);
     2362        7        /*D* NAME: VPD$OUT_NAMES
     2363        8             CALL: CALL VPD$OUT_NAMES(IN_NAM,OUT_NAM);
     2364        9                    where IN_NAM and OUT_NAM are the textc names of the filenames
     2365       10                    to report.
     2366       11             DESCRIPTION: If OUT_NAM.LEN>0 and OUT_NAM~=IN_NAM then
     2367       12                            IN_NAM -> OUT_NAM      is output otherwise
     2368       13                            IN_NAM                 is output.
     2369       14        */
     2370       15        /**/
     2371       16        /*  PARAMETERS  */
     2372       17        /**/
     2373       18    1   DCL 1 IN_NAM,
     2374       19    1         2 LEN UBIN BYTE UNAL,
     2375       20    1         2 STRING CHAR(IN_NAM.LEN);
     2376       21    1   DCL 1 OUT_NAM,
     2377       22    1         2 LEN UBIN BYTE UNAL,
     2378       23    1         2 STRING CHAR(OUT_NAM.LEN);
     2379       24        /**/
     2380       25        /*  INCLUDE FILES  */
     2381       26        /**/
     2382       27        %INCLUDE VP_DATA_R;
     2383     7014        %INCLUDE F$DCB;
     2384     7063        /**/
     2385     7064        /*  LOCAL AUTO  */
     2386     7065        /**/
     2387     7066    1   DCL BLNKS UBIN WORD;
     2388     7067    1   DCL SEP$ PTR;
     2389     7068    1   DCL OUT_NAME$ PTR;
     2390     7069    1   DCL 1 NAME_BUF,
     2391     7070    1         2 LEN UBIN BYTE UNAL,
     2392     7071    1         2 VFC CHAR(1),
PL6.E3A0      #026=VPD$OUT_NAMES File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:52 Page:625  
     2393     7072    1         2 NAME CHAR(72);
     2394     7073    1   DCL 1 NAME_BUF1 REDEF NAME_BUF,
     2395     7074    1         2 LEN UBIN BYTE UNAL,
     2396     7075    1         2 NAME CHAR(73);
     2397     7076    1   DCL I SBIN WORD;
     2398     7077        /**/
     2399     7078        /*  ENTRY DCLS  */
     2400     7079        /**/
     2401     7080    1   DCL VPG$WRITE_OUT ENTRY(2);
     2402     7081        /**/
     2403     7082        /*  CONSTANT  */
     2404     7083        /**/
     2405     7084    1   DCL CRLF_VFC CHAR(1) CONSTANT INIT('a');
     2406     7085    1   DCL BLANKS_12 CHAR(12) CONSTANT INIT(' ');
     2407     7086    1   DCL ZERO_BYTE UBIN BYTE CONSTANT INIT(0);
     2408     7087    1   DCL 1 SEP CONSTANT,
     2409     7088    1         2 * UBIN BYTE UNAL INIT(4),
     2410     7089    1         2 * CHAR(4) INIT(' -> ');
     2411     7090    1   DCL 1 TEXT$C BASED,
     2412     7091    1         2 LEN UBIN BYTE UNAL,
     2413     7092    1         2 STRING CHAR(TEXT$C.LEN);
     2414     7093    1           IF OUT_NAM.LEN=0 OR  OUT_NAM=IN_NAM
     2415     7094    2            THEN DO;
     2416     7095    2               SEP$ = ADDR(ZERO_BYTE);
     2417     7096    2               OUT_NAME$ = SEP$;
     2418     7097    2               END;
     2419     7098    1            ELSE
     2420     7099    2            DO;
     2421     7100    2               SEP$ = ADDR(SEP);
     2422     7101    2               OUT_NAME$ = ADDR(OUT_NAM);
     2423     7102    2               END;
     2424     7103    1           IF OUT_COL=0
     2425     7104    1            THEN
     2426     7105    1              BLNKS = 0;
     2427     7106    1            ELSE
     2428     7107    1              BLNKS = 12 - MOD(OUT_COL,12);
     2429     7108    1           IF IN_NAM.LEN + OUT_COL + BLNKS
PL6.E3A0      #026=VPD$OUT_NAMES File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:52 Page:626  
     2430     7109    1             + SEP$->TEXT$C.LEN + OUT_NAME$->TEXT$C.LEN
     2431     7110    1             >ME_WIDTH AND OUT_COL>0
     2432     7111    1            THEN
     2433     7112    2            DO;                            /* End of the line, start a new one   */
     2434     7113    2               BLNKS = 0;
     2435     7114    2               OUT_COL = 0;
     2436     7115    2               NAME_BUF.VFC = 'a';
     2437     7116    2               END;
     2438     7117    1            ELSE
     2439     7118    1              NAME_BUF.VFC = '@';
     2440     7119    1           CALL CONCAT(NAME_BUF.NAME,
     2441     7120    1             SUBSTR(BLANKS_12,0,BLNKS),
     2442     7121    1             IN_NAM.STRING,
     2443     7122    1             SEP$->TEXT$C.STRING,
     2444     7123    1             OUT_NAME$->TEXT$C.STRING);
     2445     7124    1           NAME_BUF.LEN = 1 + BLNKS + IN_NAM.LEN
     2446     7125    1             + SEP$->TEXT$C.LEN + OUT_NAME$->TEXT$C.LEN;
     2447     7126    1           OUT_COL = OUT_COL + NAME_BUF.LEN - 1;
     2448     7127    1           FPT_WRITE_ME.BUF_ = VECTOR(ADDR(NAME_BUF)->TEXT$C.STRING);
     2449     7128    1           FPT_WRITE_ME.V.DVBYTE.VFC# = %YES#;
     2450     7129    1           CALL M$WRITE(FPT_WRITE_ME);
     2451     7130    1           RETURN;
     2452     7131        /**/
     2453     7132    1   VPD$FINISH_NLIST: ENTRY(IN_NAM,OUT_NAM);
     2454     7133        /**/
     2455     7134        /*  First finish off continued lines written with extend VFC. */
     2456     7135        /**/
     2457     7136    1           IF OUT_COL > 0
     2458     7137    1            THEN                           /* A name list dangles                */
     2459     7138    2            DO;
     2460     7139    2               OUT_COL = 0;
     2461     7140    2               FPT_WRITE_ME.V.DVBYTE.VFC# = %YES#;
     2462     7141    2               FPT_WRITE_ME.BUF_ = VECTOR(CRLF_VFC);
     2463     7142    3               CALL M$WRITE(FPT_WRITE_ME) WHENALTRETURN DO; END;
     2464     7143    2               END;
     2465     7144        /**/
     2466     7145        /*  Finish off partial LIST line buffered up for later extension */
PL6.E3A0      #026=VPD$OUT_NAMES File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:52 Page:627  
     2467     7146        /**/
     2468     7147    1           IF CMD_MASK & '0006'O           /* LISTs                              */
     2469     7148    1             AND LIST_IDX > 0              /* AND partial LIST line exists       */
     2470     7149    1            THEN                           /* We have to finish a dangling LIST  */
     2471     7150    2            DO;
     2472     7151    2               I = LIST_IDX;
     2473     7152    2               LIST_IDX = -1;              /* Don't come through here again      */
     2474     7153    2               CALL VPG$WRITE_OUT(I,-1);
     2475     7154    2               END;
     2476     7155    1           RETURN;
     2477     7156    1   END VPD$OUT_NAMES;
     2478     7157        %EOD;

PL6.E3A0      #026=VPD$OUT_NAMES File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:52 Page:628  
--  Include file information  --

   F$DCB.:E05TOU  cannot be made into a system file and is referenced.
   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$OUT_NAMES.

   Procedure VPD$OUT_NAMES requires 195 words for executable code.
   Procedure VPD$OUT_NAMES requires 34 words of local(AUTO) storage.

PL6.E3A0      #026=VPD$OUT_NAMES File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:52 Page:629  

 Object Unit name= VPD$OUT_NAMES                              File name= VPD$UTIL.:E05TOU
 UTS= JUL 30 '97 07:52:47.52 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$EI
    2   DCB   even  none     0      0  M$EO
    3   DCB   even  none     0      0  M$EO1
    4   DCB   even  none     0      0  M$ME
    5   DCB   even  none     0      0  M$SI
    6   DCB   even  none     0      0  M$READFILE
    7   DCB   even  none     0      0  M$DO
    8   DCB   even  none     0      0  M$STD1
    9   DCB   even  none     0      0  M$SORT1
   10  RoData even  UTS      7      7  VPD$OUT_NAMES
   11   Proc  even  none   195    303  VPD$OUT_NAMES
   12  RoData even  none     8     10  VPD$OUT_NAMES

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    11      0   yes            yes      Std        2  VPD$OUT_NAMES
    11    241                  yes      Std        2  VPD$FINISH_NLIST
PL6.E3A0      #026=VPD$OUT_NAMES File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:52 Page:630  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       2 VPG$WRITE_OUT
                       nStd      0 X66_AUTO_2
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  LIST_IDX                              OUT_COL
     BREAK_LOC                             BREAK_MESSAGE_REPORTER                CMD_MASK
     ME_WIDTH                              SPEC_BUF                              IN_RES
     M$EI                                  M$EO                                  M$EO1
     M$ME                                  M$SI                                  M$READFILE
     M$DO                                  M$STD1                                M$SORT1
     FPT_WRITE_ME                          B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID
PL6.E3A0      #026=VPD$OUT_NAMES File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:52 Page:631  


     2356        1        /*T***********************************************************/
     2357        2        /*T*                                                         */
     2358        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2359        4        /*T*                                                         */
     2360        5        /*T***********************************************************/
     2361        6        VPD$OUT_NAMES: PROC(IN_NAM,OUT_NAM);

      6 11 000000   000000 700200 xent  VPD$OUT_NAM* TSX0  ! X66_AUTO_2
        11 000001   000042 000002                    ZERO    34,2

     2362        7        /*D* NAME: VPD$OUT_NAMES
     2363        8             CALL: CALL VPD$OUT_NAMES(IN_NAM,OUT_NAM);
     2364        9                    where IN_NAM and OUT_NAM are the textc names of the filenames
     2365       10                    to report.
     2366       11             DESCRIPTION: If OUT_NAM.LEN>0 and OUT_NAM~=IN_NAM then
     2367       12                            IN_NAM -> OUT_NAM      is output otherwise
     2368       13                            IN_NAM                 is output.
     2369       14        */
     2370       15        /**/
     2371       16        /*  PARAMETERS  */
     2372       17        /**/
     2373       18    1   DCL 1 IN_NAM,
     2374       19    1         2 LEN UBIN BYTE UNAL,
     2375       20    1         2 STRING CHAR(IN_NAM.LEN);
     2376       21    1   DCL 1 OUT_NAM,
     2377       22    1         2 LEN UBIN BYTE UNAL,
     2378       23    1         2 STRING CHAR(OUT_NAM.LEN);
     2379       24        /**/
     2380       25        /*  INCLUDE FILES  */
     2381       26        /**/
     2382       27        %INCLUDE VP_DATA_R;
     2383     7014        %INCLUDE F$DCB;
     2384     7063        /**/
     2385     7064        /*  LOCAL AUTO  */
     2386     7065        /**/
     2387     7066    1   DCL BLNKS UBIN WORD;
PL6.E3A0      #026=VPD$OUT_NAMES File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:52 Page:632  
     2388     7067    1   DCL SEP$ PTR;
     2389     7068    1   DCL OUT_NAME$ PTR;
     2390     7069    1   DCL 1 NAME_BUF,
     2391     7070    1         2 LEN UBIN BYTE UNAL,
     2392     7071    1         2 VFC CHAR(1),
     2393     7072    1         2 NAME CHAR(72);
     2394     7073    1   DCL 1 NAME_BUF1 REDEF NAME_BUF,
     2395     7074    1         2 LEN UBIN BYTE UNAL,
     2396     7075    1         2 NAME CHAR(73);
     2397     7076    1   DCL I SBIN WORD;
     2398     7077        /**/
     2399     7078        /*  ENTRY DCLS  */
     2400     7079        /**/
     2401     7080    1   DCL VPG$WRITE_OUT ENTRY(2);
     2402     7081        /**/
     2403     7082        /*  CONSTANT  */
     2404     7083        /**/
     2405     7084    1   DCL CRLF_VFC CHAR(1) CONSTANT INIT('a');
     2406     7085    1   DCL BLANKS_12 CHAR(12) CONSTANT INIT(' ');
     2407     7086    1   DCL ZERO_BYTE UBIN BYTE CONSTANT INIT(0);
     2408     7087    1   DCL 1 SEP CONSTANT,
     2409     7088    1         2 * UBIN BYTE UNAL INIT(4),
     2410     7089    1         2 * CHAR(4) INIT(' -> ');
     2411     7090    1   DCL 1 TEXT$C BASED,
     2412     7091    1         2 LEN UBIN BYTE UNAL,
     2413     7092    1         2 STRING CHAR(TEXT$C.LEN);
     2414     7093    1           IF OUT_NAM.LEN=0 OR  OUT_NAM=IN_NAM

   7093 11 000002   200004 470500                    LDP0    @OUT_NAM,,AUTO
        11 000003   000100 101500                    MRL     fill='000'O
        11 000004   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
        11 000005   200034 000004                    ADSC9   I+1,,AUTO                cn=0,n=4
        11 000006   200034 236100                    LDQ     I+1,,AUTO
        11 000007   000000 116003                    CMPQ    0,DU
        11 000010   000030 600000 11                 TZE     s:7095
        11 000011   000100 101500                    MRL     fill='000'O
        11 000012   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
PL6.E3A0      #026=VPD$OUT_NAMES File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:52 Page:633  
        11 000013   200035 000002                    ADSC9   I+2,,AUTO                cn=0,n=2
        11 000014   200035 220100                    LDX0    I+2,,AUTO
        11 000015   000001 621010                    EAX1    1,X0
        11 000016   200003 471500                    LDP1    @IN_NAM,,AUTO
        11 000017   000100 101500                    MRL     fill='000'O
        11 000020   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
        11 000021   200036 000002                    ADSC9   I+3,,AUTO                cn=0,n=2
        11 000022   200036 222100                    LDX2    I+3,,AUTO
        11 000023   000001 623012                    EAX3    1,X2
        11 000024   000140 106540                    CMPC    fill='000'O
        11 000025   000000 000011                    ADSC9   0,,PR0                   cn=0,n=*X1
        11 000026   100000 000013                    ADSC9   0,,PR1                   cn=0,n=*X3
        11 000027   000034 601000 11                 TNZ     s:7100

     2415     7094    2            THEN DO;

     2416     7095    2               SEP$ = ADDR(ZERO_BYTE);

   7095 11 000030   000000 236000 12                 LDQ     0
        11 000031   200006 756100                    STQ     SEP$,,AUTO

     2417     7096    2               OUT_NAME$ = SEP$;

   7096 11 000032   200007 756100                    STQ     OUT_NAME$,,AUTO

     2418     7097    2               END;

   7097 11 000033   000040 710000 11                 TRA     s:7103

     2419     7098    1            ELSE
     2420     7099    2            DO;

     2421     7100    2               SEP$ = ADDR(SEP);

   7100 11 000034   000001 236000 12                 LDQ     1
        11 000035   200006 756100                    STQ     SEP$,,AUTO

PL6.E3A0      #026=VPD$OUT_NAMES File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:52 Page:634  
     2422     7101    2               OUT_NAME$ = ADDR(OUT_NAM);

   7101 11 000036   200004 236100                    LDQ     @OUT_NAM,,AUTO
        11 000037   200007 756100                    STQ     OUT_NAME$,,AUTO

     2423     7102    2               END;

     2424     7103    1           IF OUT_COL=0

   7103 11 000040   000000 235000 xsym               LDA     OUT_COL
        11 000041   000044 601000 11                 TNZ     s:7107

     2425     7104    1            THEN
     2426     7105    1              BLNKS = 0;

   7105 11 000042   200005 450100                    STZ     BLNKS,,AUTO
        11 000043   000051 710000 11                 TRA     s:7108

     2427     7106    1            ELSE
     2428     7107    1              BLNKS = 12 - MOD(OUT_COL,12);

   7107 11 000044   000000 236000 xsym               LDQ     OUT_COL
        11 000045   000014 506007                    DIV     12,DL
        11 000046   000027 675000 xsym               ERA     B_VECTNIL+23
        11 000047   000015 035007                    ADLA    13,DL
        11 000050   200005 755100                    STA     BLNKS,,AUTO

     2429     7108    1           IF IN_NAM.LEN + OUT_COL + BLNKS

   7108 11 000051   200003 471500                    LDP1    @IN_NAM,,AUTO
        11 000052   000100 101500                    MRL     fill='000'O
        11 000053   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
        11 000054   200034 000004                    ADSC9   I+1,,AUTO                cn=0,n=4
        11 000055   200034 236100                    LDQ     I+1,,AUTO
        11 000056   000000 036000 xsym               ADLQ    OUT_COL
        11 000057   200005 036100                    ADLQ    BLNKS,,AUTO
        11 000060   200006 473500                    LDP3    SEP$,,AUTO
PL6.E3A0      #026=VPD$OUT_NAMES File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:52 Page:635  
        11 000061   000100 101500                    MRL     fill='000'O
        11 000062   300000 000001                    ADSC9   0,,PR3                   cn=0,n=1
        11 000063   200035 000004                    ADSC9   I+2,,AUTO                cn=0,n=4
        11 000064   200035 036100                    ADLQ    I+2,,AUTO
        11 000065   200007 474500                    LDP4    OUT_NAME$,,AUTO
        11 000066   000100 101500                    MRL     fill='000'O
        11 000067   400000 000001                    ADSC9   0,,PR4                   cn=0,n=1
        11 000070   200036 000004                    ADSC9   I+3,,AUTO                cn=0,n=4
        11 000071   200036 036100                    ADLQ    I+3,,AUTO
        11 000072   000105 604000 11                 TMI     s:7118
        11 000073   000000 116000 xsym               CMPQ    ME_WIDTH
        11 000074   000105 602000 11                 TNC     s:7118
        11 000075   000105 600000 11                 TZE     s:7118
        11 000076   000000 235000 xsym               LDA     OUT_COL
        11 000077   000105 604400 11                 TMOZ    s:7118

     2430     7109    1             + SEP$->TEXT$C.LEN + OUT_NAME$->TEXT$C.LEN
     2431     7110    1             >ME_WIDTH AND OUT_COL>0
     2432     7111    1            THEN
     2433     7112    2            DO;                            /* End of the line, start a new one   */

     2434     7113    2               BLNKS = 0;

   7113 11 000100   200005 450100                    STZ     BLNKS,,AUTO

     2435     7114    2               OUT_COL = 0;

   7114 11 000101   000000 450000 xsym               STZ     OUT_COL

     2436     7115    2               NAME_BUF.VFC = 'a';

   7115 11 000102   000141 236003                    LDQ     97,DU
        11 000103   200010 552120                    STBQ    NAME_BUF,'20'O,AUTO

     2437     7116    2               END;

   7116 11 000104   000107 710000 11                 TRA     s:7119
PL6.E3A0      #026=VPD$OUT_NAMES File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:52 Page:636  

     2438     7117    1            ELSE
     2439     7118    1              NAME_BUF.VFC = '@';

   7118 11 000105   000100 236003                    LDQ     64,DU
        11 000106   200010 552120                    STBQ    NAME_BUF,'20'O,AUTO

     2440     7119    1           CALL CONCAT(NAME_BUF.NAME,

   7119 11 000107   000100 101500                    MRL     fill='000'O
        11 000110   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
        11 000111   200034 000002                    ADSC9   I+1,,AUTO                cn=0,n=2
        11 000112   200034 220100                    LDX0    I+1,,AUTO
        11 000113   000100 101500                    MRL     fill='000'O
        11 000114   300000 000001                    ADSC9   0,,PR3                   cn=0,n=1
        11 000115   200035 000002                    ADSC9   I+2,,AUTO                cn=0,n=2
        11 000116   200035 221100                    LDX1    I+2,,AUTO
        11 000117   000100 101500                    MRL     fill='000'O
        11 000120   400000 000001                    ADSC9   0,,PR4                   cn=0,n=1
        11 000121   200036 000002                    ADSC9   I+3,,AUTO                cn=0,n=2
        11 000122   200036 222100                    LDX2    I+3,,AUTO
        11 000123   200005 723100                    LXL3    BLNKS,,AUTO
        11 000124   040100 100440                    MLR     fill='040'O
        11 000125   000001 000013 10                 ADSC9   BLANKS_12                cn=0,n=*X3
        11 000126   200010 400110                    ADSC9   NAME_BUF,,AUTO           cn=2,n=72
        11 000127   200005 236100                    LDQ     BLNKS,,AUTO
        11 000130   000110 116007                    CMPQ    72,DL
        11 000131   000176 603000 11                 TRC     s:7124
        11 000132   777667 624006                    EAX4    -73,QL
        11 000133   777777 664003                    ERX4    -1,DU
        11 000134   040146 100540                    MLR     fill='040'O
        11 000135   100000 200010                    ADSC9   0,,PR1                   cn=1,n=*X0
        11 000136   200010 400014                    ADSC9   NAME_BUF,Q,AUTO          cn=2,n=*X4
        11 000137   000000 636010                    EAQ     0,X0
        11 000140   000022 772000                    QRL     18
        11 000141   200005 036100                    ADLQ    BLNKS,,AUTO
        11 000142   000110 116007                    CMPQ    72,DL
PL6.E3A0      #026=VPD$OUT_NAMES File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:52 Page:637  
        11 000143   000176 603000 11                 TRC     s:7124
        11 000144   200037 756100                    STQ     I+4,,AUTO
        11 000145   000000 636010                    EAQ     0,X0
        11 000146   000022 772000                    QRL     18
        11 000147   200005 036100                    ADLQ    BLNKS,,AUTO
        11 000150   200037 725100                    LXL5    I+4,,AUTO
        11 000151   777667 625015                    EAX5    -73,X5
        11 000152   777777 665003                    ERX5    -1,DU
        11 000153   040146 100540                    MLR     fill='040'O
        11 000154   300000 200011                    ADSC9   0,,PR3                   cn=1,n=*X1
        11 000155   200010 400015                    ADSC9   NAME_BUF,Q,AUTO          cn=2,n=*X5
        11 000156   200040 756100                    STQ     I+5,,AUTO
        11 000157   000000 636011                    EAQ     0,X1
        11 000160   000022 772000                    QRL     18
        11 000161   200037 036100                    ADLQ    I+4,,AUTO
        11 000162   000110 116007                    CMPQ    72,DL
        11 000163   000176 603000 11                 TRC     s:7124
        11 000164   200041 756100                    STQ     I+6,,AUTO
        11 000165   000000 636011                    EAQ     0,X1
        11 000166   000022 772000                    QRL     18
        11 000167   200040 036100                    ADLQ    I+5,,AUTO
        11 000170   200041 726100                    LXL6    I+6,,AUTO
        11 000171   777667 626016                    EAX6    -73,X6
        11 000172   777777 666003                    ERX6    -1,DU
        11 000173   040146 100540                    MLR     fill='040'O
        11 000174   400000 200012                    ADSC9   0,,PR4                   cn=1,n=*X2
        11 000175   200010 400016                    ADSC9   NAME_BUF,Q,AUTO          cn=2,n=*X6

     2441     7120    1             SUBSTR(BLANKS_12,0,BLNKS),
     2442     7121    1             IN_NAM.STRING,
     2443     7122    1             SEP$->TEXT$C.STRING,
     2444     7123    1             OUT_NAME$->TEXT$C.STRING);
     2445     7124    1           NAME_BUF.LEN = 1 + BLNKS + IN_NAM.LEN

   7124 11 000176   000100 101500                    MRL     fill='000'O
        11 000177   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
        11 000200   200034 000004                    ADSC9   I+1,,AUTO                cn=0,n=4
PL6.E3A0      #026=VPD$OUT_NAMES File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:52 Page:638  
        11 000201   200034 236100                    LDQ     I+1,,AUTO
        11 000202   200005 036100                    ADLQ    BLNKS,,AUTO
        11 000203   000100 101500                    MRL     fill='000'O
        11 000204   300000 000001                    ADSC9   0,,PR3                   cn=0,n=1
        11 000205   200035 000004                    ADSC9   I+2,,AUTO                cn=0,n=4
        11 000206   200035 036100                    ADLQ    I+2,,AUTO
        11 000207   000100 101500                    MRL     fill='000'O
        11 000210   400000 000001                    ADSC9   0,,PR4                   cn=0,n=1
        11 000211   200036 000004                    ADSC9   I+3,,AUTO                cn=0,n=4
        11 000212   200036 036100                    ADLQ    I+3,,AUTO
        11 000213   000001 036007                    ADLQ    1,DL
        11 000214   000033 736000                    QLS     27
        11 000215   200010 552140                    STBQ    NAME_BUF,'40'O,AUTO

     2446     7125    1             + SEP$->TEXT$C.LEN + OUT_NAME$->TEXT$C.LEN;
     2447     7126    1           OUT_COL = OUT_COL + NAME_BUF.LEN - 1;

   7126 11 000216   200010 236100                    LDQ     NAME_BUF,,AUTO
        11 000217   000033 772000                    QRL     27
        11 000220   000000 036000 xsym               ADLQ    OUT_COL
        11 000221   000001 136007                    SBLQ    1,DL
        11 000222   000000 756000 xsym               STQ     OUT_COL

     2448     7127    1           FPT_WRITE_ME.BUF_ = VECTOR(ADDR(NAME_BUF)->TEXT$C.STRING);

   7127 11 000223   200010 236100                    LDQ     NAME_BUF,,AUTO
        11 000224   000033 772000                    QRL     27
        11 000225   000064 737000                    LLS     52
        11 000226   000140 135007                    SBLA    96,DL
        11 000227   200034 452500                    STP2    I+1,,AUTO
        11 000230   200034 236100                    LDQ     I+1,,AUTO
        11 000231   000002 036000 12                 ADLQ    2
        11 000232   000004 757000 xsym               STAQ    FPT_WRITE_ME+4

     2449     7128    1           FPT_WRITE_ME.V.DVBYTE.VFC# = %YES#;

   7128 11 000233   100000 236003                    LDQ     32768,DU
PL6.E3A0      #026=VPD$OUT_NAMES File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:52 Page:639  
        11 000234   000013 256000 xsym               ORSQ    FPT_WRITE_ME+11

     2450     7129    1           CALL M$WRITE(FPT_WRITE_ME);

   7129 11 000235   000000 630400 xsym               EPPR0   FPT_WRITE_ME
        11 000236   040001 713400                    CLIMB   write
        11 000237   401400 401760                    pmme    nvectors=4

     2451     7130    1           RETURN;

   7130 11 000240   000000 702200 xent               TSX2  ! X66_ARET

     2452     7131        /**/
     2453     7132    1   VPD$FINISH_NLIST: ENTRY(IN_NAM,OUT_NAM);

   7132 11 000241   000000 700200 xent  VPD$FINISH_* TSX0  ! X66_AUTO_2
        11 000242   000042 000002                    ZERO    34,2

     2454     7133        /**/
     2455     7134        /*  First finish off continued lines written with extend VFC. */
     2456     7135        /**/
     2457     7136    1           IF OUT_COL > 0

   7136 11 000243   000000 235000 xsym               LDA     OUT_COL
        11 000244   000257 604400 11                 TMOZ    s:7147

     2458     7137    1            THEN                           /* A name list dangles                */
     2459     7138    2            DO;

     2460     7139    2               OUT_COL = 0;

   7139 11 000245   000000 450000 xsym               STZ     OUT_COL

     2461     7140    2               FPT_WRITE_ME.V.DVBYTE.VFC# = %YES#;

   7140 11 000246   100000 236003                    LDQ     32768,DU
        11 000247   000013 256000 xsym               ORSQ    FPT_WRITE_ME+11
PL6.E3A0      #026=VPD$OUT_NAMES File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:52 Page:640  

     2462     7141    2               FPT_WRITE_ME.BUF_ = VECTOR(CRLF_VFC);

   7141 11 000250   000004 237000 12                 LDAQ    4
        11 000251   000004 757000 xsym               STAQ    FPT_WRITE_ME+4

     2463     7142    3               CALL M$WRITE(FPT_WRITE_ME) WHENALTRETURN DO; END;

   7142 11 000252   000000 630400 xsym               EPPR0   FPT_WRITE_ME
        11 000253   440001 713400                    CLIMB   alt,write
        11 000254   401400 401760                    pmme    nvectors=4
        11 000255   000257 702000 11                 TSX2    s:7147
        11 000256   000257 710000 11                 TRA     s:7147

     2464     7143    2               END;

     2465     7144        /**/
     2466     7145        /*  Finish off partial LIST line buffered up for later extension */
     2467     7146        /**/
     2468     7147    1           IF CMD_MASK & '0006'O           /* LISTs                              */

   7147 11 000257   000100 100400                    MLR     fill='000'O
        11 000260   000000 000010 xsym               ADSC9   CMD_MASK                 cn=0,n=8
        11 000261   200034 000010                    ADSC9   I+1,,AUTO                cn=0,n=8
        11 000262   200034 237100                    LDAQ    I+1,,AUTO
        11 000263   000006 377000 12                 ANAQ    6
        11 000264   000302 600000 11                 TZE     s:7155
        11 000265   000000 235000 xsym               LDA     LIST_IDX
        11 000266   000302 604400 11                 TMOZ    s:7155

     2469     7148    1             AND LIST_IDX > 0              /* AND partial LIST line exists       */
     2470     7149    1            THEN                           /* We have to finish a dangling LIST  */
     2471     7150    2            DO;

     2472     7151    2               I = LIST_IDX;

   7151 11 000267   200033 755100                    STA     I,,AUTO
PL6.E3A0      #026=VPD$OUT_NAMES File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:52 Page:641  

     2473     7152    2               LIST_IDX = -1;              /* Don't come through here again      */

   7152 11 000270   000001 336007                    LCQ     1,DL
        11 000271   000000 756000 xsym               STQ     LIST_IDX

     2474     7153    2               CALL VPG$WRITE_OUT(I,-1);

   7153 11 000272   000003 236000 12                 LDQ     3
        11 000273   200035 756100                    STQ     I+2,,AUTO
        11 000274   200033 630500                    EPPR0   I,,AUTO
        11 000275   200034 450500                    STP0    I+1,,AUTO
        11 000276   200034 630500                    EPPR0   I+1,,AUTO
        11 000277   000020 631400 xsym               EPPR1   B_VECTNIL+16
        11 000300   000000 701000 xent               TSX1    VPG$WRITE_OUT
        11 000301   000000 011000                    NOP     0

     2475     7154    2               END;

     2476     7155    1           RETURN;

   7155 11 000302   000000 702200 xent               TSX2  ! X66_ARET
     2477     7156    1   END VPD$OUT_NAMES;
     2478     7157        %EOD;

PL6.E3A0      #026=VPD$OUT_NAMES File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:52 Page:642  
--  Include file information  --

   F$DCB.:E05TOU  cannot be made into a system file and is referenced.
   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$OUT_NAMES.
PL6.E3A0      #026=VPD$OUT_NAMES File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:52 Page:643  

 **** Variables and constants ****

  ****  Section 010 RoData VPD$OUT_NAMES

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     1-0-0/c CHAR(12)    r     1 BLANKS_12                  0-0-0/c CHAR        r     1 CRLF_VFC
     5-0-0/c STRC(45)    r     1 SEP                        4-0-0/w UBIN(9)     r     1 ZERO_BYTE

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @IN_NAM                    4-0-0/w PTR         r     1 @OUT_NAM
     5-0-0/w UBIN        r     1 BLNKS                     33-0-0/w SBIN        r     1 I
    *0-0-0/c ASTR(9)     r     1 IN_NAM                    10-0-0/c STRC(666)   r     1 NAME_BUF
    *0-0-0/c ASTR(9)     r     1 OUT_NAM                    7-0-0/w PTR         r     1 OUT_NAME$
     6-0-0/w PTR         r     1 SEP$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w EPTR        r     1 BREAK_MESSAGE_REPORTER
     0-0-0/b BIT         r     1 CMD_MASK(0:71)
     0-0-0/d STRC(432)   r     1 FPT_WRITE_ME               0-0-0/w SBIN        r     1 LIST_IDX
     0-0-0/w UBIN        r     1 ME_WIDTH                   0-0-0/w SBIN        r     1 OUT_COL

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d ASTR(3528)  r     1 F$DCB                      0-0-0/c ASTR(9)     r     1 TEXT$C
PL6.E3A0      #026=VPD$OUT_NAMES File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:52 Page:644  


   Procedure VPD$OUT_NAMES requires 195 words for executable code.
   Procedure VPD$OUT_NAMES requires 34 words of local(AUTO) storage.
PL6.E3A0      #026=VPD$OUT_NAMES File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:52 Page:645  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #026=VPD$OUT_NAMES File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:52 Page:646  
          MINI XREF LISTING

BLANKS_12
      7085**DCL      7119>>CALLBLT
BLNKS
      7066**DCL      7105<<ASSIGN   7107<<ASSIGN   7108>>IF       7113<<ASSIGN   7119>>CALLBLT  7124>>ASSIGN
BREAK_LOC
      5234**DCL      5234--REDEF
CMD_MASK
      5236**DCL      7147>>IF
CRLF_VFC
      7084**DCL      7141--ASSIGN
DEF_ICB.FID.STRING
      5832**DCL      5833--REDEF
DEV_ICB.FID.STRING
      5718**DCL      5719--REDEF
EI_KEY.KEY
      5930**DCL      5930--REDEF    5930--REDEF    5930--REDEF
EO_OCB.TYPE
      5430**DCL      5431--REDEF
F$DCB.ACTPOS
      7040**DCL      7040--REDEF
F$DCB.ARS
      7015**DCL      7015--REDEF
F$DCB.ATTR
      7033**DCL      7034--REDEF
F$DCB.BORROW
      7048**DCL      7048--REDEF    7048--REDEF    7048--REDEF
F$DCB.DCBNAME.L
      7062**DCL      7062--IMP-SIZ
F$DCB.EOMCHAR
      7019**DCL      7019--REDEF
F$DCB.FLDID
      7043**DCL      7043--REDEF
PL6.E3A0      #026=VPD$OUT_NAMES File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:52 Page:647  
F$DCB.FORM$
      7037**DCL      7037--REDEF
F$DCB.FSECT
      7053**DCL      7053--REDEF
F$DCB.FSN
      7030**DCL      7030--REDEF    7030--REDEF    7031--REDEF
F$DCB.HEADER$
      7036**DCL      7036--REDEF
F$DCB.IXTNSIZE
      7034**DCL      7034--REDEF
F$DCB.LASTSTA$
      7024**DCL      7024--REDEF
F$DCB.LVL
      7049**DCL      7049--REDEF
F$DCB.NAME.C
      7024**DCL      7024--REDEF
F$DCB.NOEOF
      7045**DCL      7045--REDEF
F$DCB.NRECS
      7035**DCL      7035--REDEF
F$DCB.NRECX
      7054**DCL      7054--REDEF
F$DCB.OHDR
      7046**DCL      7046--REDEF
F$DCB.ORG
      7029**DCL      7029--REDEF
F$DCB.PRECNO
      7052**DCL      7052--REDEF
F$DCB.RCSZ
      7057**DCL      7057--REDEF
F$DCB.RES
      7025**DCL      7025--REDEF
F$DCB.SETX
      7037**DCL      7037--REDEF
F$DCB.TAB$
      7036**DCL      7037--REDEF
PL6.E3A0      #026=VPD$OUT_NAMES File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:52 Page:648  
F$DCB.TDA
      7051**DCL      7051--REDEF
F$DCB.WSN
      7026**DCL      7026--REDEF
FPT_CLOSE_EI.SN_
      6771**DCL      6771--REDEF
FPT_CLOSE_EI.UTL_
      6772**DCL      6772--REDEF
FPT_CLOSE_EI.V.EXPIRE#
      6786**DCL      6786--REDEF
FPT_CLOSE_EI.V.TYPE#
      6784**DCL      6784--REDEF
FPT_CLOSE_EI.V.XTNSIZE#
      6781**DCL      6781--REDEF    6783--REDEF
FPT_CLOSE_PTL.SN_
      6897**DCL      6897--REDEF
FPT_CLOSE_PTL.UTL_
      6898**DCL      6898--REDEF
FPT_CLOSE_PTL.V.EXPIRE#
      6912**DCL      6912--REDEF
FPT_CLOSE_PTL.V.TYPE#
      6910**DCL      6910--REDEF
FPT_CLOSE_PTL.V.XTNSIZE#
      6907**DCL      6907--REDEF    6909--REDEF
FPT_CLOSE_READ.SN_
      6813**DCL      6813--REDEF
FPT_CLOSE_READ.UTL_
      6814**DCL      6814--REDEF
FPT_CLOSE_READ.V.EXPIRE#
      6828**DCL      6828--REDEF
FPT_CLOSE_READ.V.TYPE#
      6826**DCL      6826--REDEF
FPT_CLOSE_READ.V.XTNSIZE#
      6823**DCL      6823--REDEF    6825--REDEF
FPT_CLOSE_SI.SN_
      6981**DCL      6981--REDEF
PL6.E3A0      #026=VPD$OUT_NAMES File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:52 Page:649  
FPT_CLOSE_SI.UTL_
      6982**DCL      6982--REDEF
FPT_CLOSE_SI.V.EXPIRE#
      6996**DCL      6996--REDEF
FPT_CLOSE_SI.V.TYPE#
      6994**DCL      6994--REDEF
FPT_CLOSE_SI.V.XTNSIZE#
      6991**DCL      6991--REDEF    6993--REDEF
FPT_CLOSE_STD.SN_
      6939**DCL      6939--REDEF
FPT_CLOSE_STD.UTL_
      6940**DCL      6940--REDEF
FPT_CLOSE_STD.V.EXPIRE#
      6954**DCL      6954--REDEF
FPT_CLOSE_STD.V.TYPE#
      6952**DCL      6952--REDEF
FPT_CLOSE_STD.V.XTNSIZE#
      6949**DCL      6949--REDEF    6951--REDEF
FPT_CLSEI_FT.SN_
      6855**DCL      6855--REDEF
FPT_CLSEI_FT.UTL_
      6856**DCL      6856--REDEF
FPT_CLSEI_FT.V.EXPIRE#
      6870**DCL      6870--REDEF
FPT_CLSEI_FT.V.TYPE#
      6868**DCL      6868--REDEF
FPT_CLSEI_FT.V.XTNSIZE#
      6865**DCL      6865--REDEF    6867--REDEF
FPT_OPEN_EI.ACSVEH_
      6426**DCL      6427--REDEF
FPT_OPEN_EI.ALTKEYS_
      6432**DCL      6433--REDEF    6433--REDEF
FPT_OPEN_EI.HDR_
      6431**DCL      6432--REDEF
FPT_OPEN_EI.TAB_
      6430**DCL      6431--REDEF
PL6.E3A0      #026=VPD$OUT_NAMES File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:52 Page:650  
FPT_OPEN_EI.UHL_
      6424**DCL      6425--REDEF    6425--REDEF
FPT_OPEN_EI.V.FSN#
      6464**DCL      6464--REDEF    6464--REDEF
FPT_OPEN_EI.WSN_
      6430**DCL      6430--REDEF
FPT_OPEN_EI_SAVE.ACSVEH_
      6535**DCL      6536--REDEF
FPT_OPEN_EI_SAVE.ALTKEYS_
      6541**DCL      6542--REDEF    6542--REDEF
FPT_OPEN_EI_SAVE.HDR_
      6540**DCL      6541--REDEF
FPT_OPEN_EI_SAVE.TAB_
      6539**DCL      6540--REDEF
FPT_OPEN_EI_SAVE.UHL_
      6533**DCL      6534--REDEF    6534--REDEF
FPT_OPEN_EI_SAVE.V.FSN#
      6573**DCL      6573--REDEF    6573--REDEF
FPT_OPEN_EI_SAVE.WSN_
      6539**DCL      6539--REDEF
FPT_OPEN_OUT.ACSVEH_
      6317**DCL      6318--REDEF
FPT_OPEN_OUT.ALTKEYS_
      6323**DCL      6324--REDEF    6324--REDEF
FPT_OPEN_OUT.HDR_
      6322**DCL      6323--REDEF
FPT_OPEN_OUT.TAB_
      6321**DCL      6322--REDEF
FPT_OPEN_OUT.UHL_
      6315**DCL      6316--REDEF    6316--REDEF
FPT_OPEN_OUT.V.FSN#
      6355**DCL      6355--REDEF    6355--REDEF
FPT_OPEN_OUT.WSN_
      6321**DCL      6321--REDEF
FPT_OPEN_OUT_SAVE.ACSVEH_
      6208**DCL      6209--REDEF
PL6.E3A0      #026=VPD$OUT_NAMES File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:52 Page:651  
FPT_OPEN_OUT_SAVE.ALTKEYS_
      6214**DCL      6215--REDEF    6215--REDEF
FPT_OPEN_OUT_SAVE.HDR_
      6213**DCL      6214--REDEF
FPT_OPEN_OUT_SAVE.TAB_
      6212**DCL      6213--REDEF
FPT_OPEN_OUT_SAVE.UHL_
      6206**DCL      6207--REDEF    6207--REDEF
FPT_OPEN_OUT_SAVE.V.FSN#
      6246**DCL      6246--REDEF    6246--REDEF
FPT_OPEN_OUT_SAVE.WSN_
      6212**DCL      6212--REDEF
FPT_READ_STD.STATION_
      6636**DCL      6637--REDEF
FPT_READ_STD.V.DVBYTE.REREAD#
      6648**DCL      6648--REDEF
FPT_READ_STD.V.INDX#
      6646**DCL      6646--REDEF
FPT_READ_UC.STATION_
      6597**DCL      6598--REDEF
FPT_READ_UC.V.DVBYTE.REREAD#
      6609**DCL      6609--REDEF
FPT_READ_UC.V.INDX#
      6607**DCL      6607--REDEF
FPT_WRITE_ME
      6703**DCL      7129<>CALL     7142<>CALL
FPT_WRITE_ME.BUF_
      6703**DCL      7127<<ASSIGN   7141<<ASSIGN
FPT_WRITE_ME.STATION_
      6705**DCL      6705--REDEF
FPT_WRITE_ME.V.DVBYTE.VFC#
      6712**DCL      6712--REDEF    7128<<ASSIGN   7140<<ASSIGN
FPT_WRITE_OUT.STATION_
      6736**DCL      6736--REDEF
FPT_WRITE_OUT.V.DVBYTE.VFC#
      6743**DCL      6743--REDEF
PL6.E3A0      #026=VPD$OUT_NAMES File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:52 Page:652  
FPT_WRITE_UC.STATION_
      6674**DCL      6674--REDEF
FPT_WRITE_UC.V.DVBYTE.VFC#
      6681**DCL      6681--REDEF
FROM_SN.SN
      5580**DCL      5581--REDEF
GETCMD.OUT$
      4787**DCL      4793--REDEF
I
      7076**DCL      7151<<ASSIGN   7153<>CALL
ICB.FID.STRING
      5604**DCL      5605--REDEF
IFSFA_PARAM.EOMCHAR#
      5959**DCL      5960--REDEF
IFSFA_PARAM.SIG1
      5953**DCL      5953--REDEF
IFSFA_PARAM.SIG2
      5953**DCL      5954--REDEF
IN_NAM
        18**DCL         6--PROC     7093>>IF       7132--ENTRY
IN_NAM.LEN
        19**DCL        20--IMP-SIZ  7093>>IF       7108>>IF       7119>>CALLBLT  7124>>ASSIGN
IN_NAM.STRING
        20**DCL      7119>>CALLBLT
IN_RES
      5526**DCL      5526--REDEF
IN_SN.SN
      5542**DCL      5543--REDEF
LIST_IDX
      5231**DCL      7147>>IF       7151>>ASSIGN   7152<<ASSIGN
M$WRITE
        45**DCL-ENT  7129--CALL     7142--CALL
ME_WIDTH
      5236**DCL      7108>>IF
NAME_BUF
      7069**DCL      7073--REDEF    7127--ASSIGN   7127--ASSIGN
PL6.E3A0      #026=VPD$OUT_NAMES File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:52 Page:653  
NAME_BUF.LEN
      7070**DCL      7124<<ASSIGN   7126>>ASSIGN
NAME_BUF.NAME
      7072**DCL      7119<<CALLBLT
NAME_BUF.VFC
      7071**DCL      7115<<ASSIGN   7118<<ASSIGN
OCB.TYPE
      5288**DCL      5289--REDEF
OFSFA_PARAM.EOMCHAR#
      5989**DCL      5990--REDEF
OFSFA_PARAM.SIG1
      5983**DCL      5983--REDEF
OFSFA_PARAM.SIG2
      5983**DCL      5984--REDEF
OUT_COL
      5232**DCL      7103>>IF       7107>>ASSIGN   7108>>IF       7108>>IF       7114<<ASSIGN   7126<<ASSIGN
      7126>>ASSIGN   7136>>IF       7139<<ASSIGN
OUT_NAM
        21**DCL         6--PROC     7093>>IF       7101--ASSIGN   7132--ENTRY
OUT_NAM.LEN
        22**DCL        23--IMP-SIZ  7093>>IF       7093>>IF
OUT_NAME$
      7068**DCL      7096<<ASSIGN   7101<<ASSIGN   7108>>IF       7119>>CALLBLT  7119>>CALLBLT  7124>>ASSIGN
OUT_SN.SN
      5560**DCL      5561--REDEF
SEP
      7087**DCL      7100--ASSIGN
SEP$
      7067**DCL      7095<<ASSIGN   7096>>ASSIGN   7100<<ASSIGN   7108>>IF       7119>>CALLBLT  7119>>CALLBLT
      7124>>ASSIGN
SPEC_BUF
      5238**DCL      5238--REDEF
TEXT$C.LEN
      7091**DCL      7092--IMP-SIZ  7108>>IF       7108>>IF       7119>>CALLBLT  7119>>CALLBLT  7124>>ASSIGN
      7124>>ASSIGN   7127>>ASSIGN
TEXT$C.STRING
PL6.E3A0      #026=VPD$OUT_NAMES File=VPD$UTIL.:E05TSI                           WED 07/30/97 07:52 Page:654  
      7092**DCL      7119>>CALLBLT  7119>>CALLBLT  7127--ASSIGN
VPG$WRITE_OUT
      7080**DCL-ENT  7153--CALL
ZERO_BYTE
      7086**DCL      7095--ASSIGN

PL6.E3A0      #027=VPD$PROCESS_DATE File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:54 Page:655  
     2479        1        /*T***********************************************************/
     2480        2        /*T*                                                         */
     2481        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2482        4        /*T*                                                         */
     2483        5        /*T***********************************************************/
     2484        6        VPD$PROCESS_DATE: PROC (DATE$,DATE_TYPE,RET_UTS,ROUND_CODE) ALTRET;
     2485        7        /*I* NAME: VPD$PROCESS_DATE
     2486        8             PURPOSE: To process a date node returned by the parser.
     2487        9           CALL: CALL VPD$PROCESS_DATE(DATE$,DATE_TYPE,RET_UTS,ROUND_CODE) ALTRET(BAD_DATE);
     2488       10             DESCRIPTION: The node pointed to by DATE$ is examined for TYPE and
     2489       11                          is then converted to a UTS value.  Valid TYPES are:
     2490       12                          DATE_TYPE    meaning
     2491       13                          ---------    -------
     2492       14                              1        positive 'ddd' displacement
     2493       15                              2        today's date.
     2494       16                              3        NEVER.  Does not return a value in RET_UTS.
     2495       17                              4        today's date.
     2496       18                              5        negative -'ddd' displacement
     2497       19                              6        specific 'dd/dd/dd' date
     2498       20                          All returned values EXCEPT #4 are truncated to the
     2499       21                          beginning of the day.
     2500       22
     2501       23                          If any problems are encountered in date processing,
     2502       24                          the procedure takes the ALTRETURN with DATE_TYPE = 0
     2503       25                          and RET_UTS = 0.
     2504       26
     2505       27                         ROUND_CODE indicates the type of rounding that was
     2506       28                         performed on the date (and should be performed on
     2507       29                         any date used for comparison).
     2508       30                             0 - rounded down to beginning of day
     2509       31                             1 - unaltered UTS
     2510       32
     2511       33                          This proc is used by VPF$SRCLST, VPC$SETOUT....
     2512       34        */
     2513       35        %EJECT;
PL6.E3A0      #027=VPD$PROCESS_DATE File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:54 Page:656  
     2514       36        /**/
     2515       37        /*  INCLUDES  */
     2516       38        /**/
     2517       39        %INCLUDE VP_DATA_R;
     2518     7026        %INCLUDE XUD_UTS_M;
     2519     7108        %XUD$UTS_ENTRIES;
     2520     7140        %XUD_UTS_EQU;
     2521     7151        /**/
     2522     7152        /*  PARAPETERS  */
     2523     7153        /**/
     2524     7154    1   DCL RET_UTS UBIN WORD;                  /* PARAMETER for UTS time return      */
     2525     7155    1   DCL DATE$ PTR;                          /* PARAMETER pointing to DATE node    */
     2526     7156    1   DCL DATE_TYPE UBIN;                     /* Return variable for type of DATE   */
     2527     7157    1   DCL ROUND_CODE UBIN;                    /* Return variable for rounding type  */
     2528     7158        /**/
     2529     7159        /*  BASED DATA  */
     2530     7160        /**/
     2531     7161        %PARSE$OUT(NAME = OUT$BLK,STCLASS = BASED);
     2532     7206        %PARSE$SYM(NAME = OUT$SYM,STCLASS = BASED);
     2533     7244    1   DCL 1 TEXT$C BASED,
     2534     7245    1         2 LEN UBIN BYTE UNAL,
     2535     7246    1         2 STRING CHAR(TEXT$C.LEN);
     2536     7247        /**/
     2537     7248        /*  ENTRY DCLS  */
     2538     7249        /**/
     2539     7250    1   DCL VPD$TEXTC_CHARBIN ENTRY(4) ALTRET;
     2540     7251        /**/
     2541     7252        /*   %EQU'S   */
     2542     7253        /**/
     2543     7254        %EQU MAX_SBIN_DAYS# = 15907;            /* MAX # OF DAYS THAT FITS IN SBIN    */
     2544     7255        /**/
     2545     7256        /*  LOCAL STATIC  */
     2546     7257        /**/
     2547     7258    1   DCL TO_RET_UTS UBIN WORD STATIC;        /* Local copy of RET_UTS              */
     2548     7259    1   DCL TMP UBIN STATIC;
     2549     7260    1   DCL DATE# CHAR(8) STATIC;
     2550     7261    1   DCL DAYS# SBIN WORD STATIC;
PL6.E3A0      #027=VPD$PROCESS_DATE File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:54 Page:657  
     2551     7262        %FPT_TIME(FPTN = FPT_MAKE_UTS,
     2552     7263                  STCLASS = STATIC,
     2553     7264                  SOURCE = LOCAL,
     2554     7265                  DATE = DATE#,
     2555     7266                  DEST = UTS,
     2556     7267                  TSTAMP = TO_RET_UTS);
     2557     7286        /**/
     2558     7287    1           DATE_TYPE = DATE$ -> OUT$BLK.CODE;
     2559     7288    2           DO CASE(DATE_TYPE);
     2560     7289    2            CASE(1,5);                     /* + or -  displacement               */
     2561     7290    2              CALL VPD$TEXTC_CHARBIN(DAYS#,
     2562     7291    2                DATE$ -> OUT$BLK.SUBLK$(0) -> OUT$BLK.SUBLK$(0),
     2563     7292    2                %MAX_SBIN_DAYS#) ALTRET (BAD_DATE);
     2564     7293    2              IF DATE_TYPE = 1
     2565     7294    2               THEN                        /* '+' Increment                      */
     2566     7295    2                 CALL XUD$UTS_ADJ_25TH (TO_RET_UTS, NOW_UTS, DAYS#*%UTS_25TH_DAY#)
              7295                          ALTRET (BAD_DATE);
     2567     7296    2               ELSE                        /* '-' Increment                      */
     2568     7297    2                 CALL XUD$UTS_ADJ_25TH(TO_RET_UTS, NOW_UTS, -DAYS#*%UTS_25TH_DAY#)
              7297                          ALTRET (BAD_DATE);
     2569     7298    2            CASE(2);                       /* TODAY                              */
     2570     7299    2              TO_RET_UTS = NOW_UTS;        /* Get current UTS time               */
     2571     7300    2            CASE(3);                       /* NEVER                              */
     2572     7301    2              TO_RET_UTS = 0;              /* DO NOTHING FOR 'NEVER'             */
     2573     7302    2            CASE(4);                       /* NOW                                */
     2574     7303    2              TO_RET_UTS = NOW_UTS;        /* Get current UTS time               */
     2575     7304    2            CASE(6);                       /* Specific dd/dd/dd date             */
     2576     7305    2              CALL CONCAT(DATE#,
     2577     7306    2                DATE$ -> OUT$BLK.SUBLK$(0) ->
     2578     7307    2                OUT$BLK.SUBLK$(0) ->
     2579     7308    2                TEXT$C.STRING,
     2580     7309    2                '/',
     2581     7310    2                DATE$ -> OUT$BLK.SUBLK$(1) ->
     2582     7311    2                OUT$BLK.SUBLK$(0) ->
     2583     7312    2                TEXT$C.STRING,
     2584     7313    2                '/',
     2585     7314    2                DATE$ -> OUT$BLK.SUBLK$(2) ->
PL6.E3A0      #027=VPD$PROCESS_DATE File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:54 Page:658  
     2586     7315    2                OUT$BLK.SUBLK$(0) ->
     2587     7316    2                TEXT$C.STRING);
     2588     7317    2              CALL M$TIME(FPT_MAKE_UTS) ALTRET(BAD_DATE);
     2589     7318    2            END;                           /* END CASE                           */
     2590     7319    1           RET_UTS = TO_RET_UTS;
     2591     7320    1           IF DATE_TYPE = 4                /* NOW                                */
     2592     7321    1            THEN
     2593     7322    1              ROUND_CODE = 1;              /* No truncation                      */
     2594     7323    1            ELSE
     2595     7324    1              ROUND_CODE = 0;              /* Truncate to beginning of day       */
     2596     7325        /**/
     2597     7326    1   VPD$ROUND_DATE: ENTRY(DATE$,DATE_TYPE,RET_UTS,ROUND_CODE) ALTRET;
     2598     7327        /**/
     2599     7328    2           DO CASE(ROUND_CODE);
     2600     7329    2            CASE(0);                       /* Truncate to beginning of day       */
     2601     7330    2              CALL XUD$UTS_DIFF_25TH(TMP,RET_UTS,0);
     2602     7331    2              TMP = (TMP/%UTS_25TH_DAY#) * %UTS_25TH_DAY#;
              7331                       /* truncate to beginning of day */
     2603     7332    2              CALL XUD$UTS_ADJ_25TH (RET_UTS,0,TMP);
     2604     7333    2            CASE(1);                       /* Leave it alone!                    */
     2605     7334    2              ;
     2606     7335    2            END;
     2607     7336        /**/
     2608     7337    1           RETURN;
     2609     7338
     2610     7339    1   BAD_DATE: RET_UTS = 0;                  /* Error, return a date of zero       */
     2611     7340    1           DATE_TYPE = 0;
     2612     7341    1           ALTRETURN;
     2613     7342
     2614     7343    1   END VPD$PROCESS_DATE;
     2615     7344        %EOD;

PL6.E3A0      #027=VPD$PROCESS_DATE File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:54 Page:659  
--  Include file information  --

   XUD_UTS_M.:E05TOU  is referenced.
   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$PROCESS_DATE.

   Procedure VPD$PROCESS_DATE requires 201 words for executable code.
   Procedure VPD$PROCESS_DATE requires 16 words of local(AUTO) storage.

PL6.E3A0      #027=VPD$PROCESS_DATE File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:54 Page:660  

 Object Unit name= VPD$PROCESS_DATE                           File name= VPD$UTIL.:E05TOU
 UTS= JUL 30 '97 07:54:46.80 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$EI
    2   DCB   even  none     0      0  M$EO
    3   DCB   even  none     0      0  M$EO1
    4   DCB   even  none     0      0  M$ME
    5   DCB   even  none     0      0  M$SI
    6   DCB   even  none     0      0  M$READFILE
    7   DCB   even  none     0      0  M$DO
    8   DCB   even  none     0      0  M$STD1
    9   DCB   even  none     0      0  M$SORT1
   10   Data  even  none    18     22  VPD$PROCESS_DATE
   11   Proc  even  none   201    311  VPD$PROCESS_DATE
   12  RoData even  none    10     12  VPD$PROCESS_DATE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    11      0   yes    yes     yes      Std        4  VPD$PROCESS_DATE
    11    243          yes     yes      Std        4  VPD$ROUND_DATE
PL6.E3A0      #027=VPD$PROCESS_DATE File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:54 Page:661  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       4 VPD$TEXTC_CHARBIN
 yes     yes           Std       3 XUD$UTS_ADJ_25TH
 yes     yes           Std       3 XUD$UTS_DIFF_25TH
                       nStd      0 X66_AUTO_4
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  NOW_UTS                               BREAK_LOC
     BREAK_MESSAGE_REPORTER                SPEC_BUF                              IN_RES
     M$EI                                  M$EO                                  M$EO1
     M$ME                                  M$SI                                  M$READFILE
     M$DO                                  M$STD1                                M$SORT1
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #027=VPD$PROCESS_DATE File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:54 Page:662  


     2479        1        /*T***********************************************************/
     2480        2        /*T*                                                         */
     2481        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2482        4        /*T*                                                         */
     2483        5        /*T***********************************************************/
     2484        6        VPD$PROCESS_DATE: PROC (DATE$,DATE_TYPE,RET_UTS,ROUND_CODE) ALTRET;

      6 11 000000   000000 700200 xent  VPD$PROCESS* TSX0  ! X66_AUTO_4
        11 000001   000020 000004                    ZERO    16,4

     2485        7        /*I* NAME: VPD$PROCESS_DATE
     2486        8             PURPOSE: To process a date node returned by the parser.
     2487        9          CALL: CALL VPD$PROCESS_DATE(DATE$,DATE_TYPE,RET_UTS,ROUND_CODE) ALTRET(BAD_DATE);
     2488       10             DESCRIPTION: The node pointed to by DATE$ is examined for TYPE and
     2489       11                          is then converted to a UTS value.  Valid TYPES are:
     2490       12                          DATE_TYPE    meaning
     2491       13                          ---------    -------
     2492       14                              1        positive 'ddd' displacement
     2493       15                              2        today's date.
     2494       16                              3        NEVER.  Does not return a value in RET_UTS.
     2495       17                              4        today's date.
     2496       18                              5        negative -'ddd' displacement
     2497       19                              6        specific 'dd/dd/dd' date
     2498       20                          All returned values EXCEPT #4 are truncated to the
     2499       21                          beginning of the day.
     2500       22
     2501       23                          If any problems are encountered in date processing,
     2502       24                          the procedure takes the ALTRETURN with DATE_TYPE = 0
     2503       25                          and RET_UTS = 0.
     2504       26
     2505       27                         ROUND_CODE indicates the type of rounding that was
     2506       28                         performed on the date (and should be performed on
     2507       29                         any date used for comparison).
     2508       30                             0 - rounded down to beginning of day
     2509       31                             1 - unaltered UTS
     2510       32
PL6.E3A0      #027=VPD$PROCESS_DATE File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:54 Page:663  
     2511       33                          This proc is used by VPF$SRCLST, VPC$SETOUT....
     2512       34        */
     2513       35        %EJECT;
PL6.E3A0      #027=VPD$PROCESS_DATE File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:54 Page:664  
     2514       36        /**/
     2515       37        /*  INCLUDES  */
     2516       38        /**/
     2517       39        %INCLUDE VP_DATA_R;
     2518     7026        %INCLUDE XUD_UTS_M;
     2519     7108        %XUD$UTS_ENTRIES;
     2520     7140        %XUD_UTS_EQU;
     2521     7151        /**/
     2522     7152        /*  PARAPETERS  */
     2523     7153        /**/
     2524     7154    1   DCL RET_UTS UBIN WORD;                  /* PARAMETER for UTS time return      */
     2525     7155    1   DCL DATE$ PTR;                          /* PARAMETER pointing to DATE node    */
     2526     7156    1   DCL DATE_TYPE UBIN;                     /* Return variable for type of DATE   */
     2527     7157    1   DCL ROUND_CODE UBIN;                    /* Return variable for rounding type  */
     2528     7158        /**/
     2529     7159        /*  BASED DATA  */
     2530     7160        /**/
     2531     7161        %PARSE$OUT(NAME = OUT$BLK,STCLASS = BASED);
     2532     7206        %PARSE$SYM(NAME = OUT$SYM,STCLASS = BASED);
     2533     7244    1   DCL 1 TEXT$C BASED,
     2534     7245    1         2 LEN UBIN BYTE UNAL,
     2535     7246    1         2 STRING CHAR(TEXT$C.LEN);
     2536     7247        /**/
     2537     7248        /*  ENTRY DCLS  */
     2538     7249        /**/
     2539     7250    1   DCL VPD$TEXTC_CHARBIN ENTRY(4) ALTRET;
     2540     7251        /**/
     2541     7252        /*   %EQU'S   */
     2542     7253        /**/
     2543     7254        %EQU MAX_SBIN_DAYS# = 15907;            /* MAX # OF DAYS THAT FITS IN SBIN    */
     2544     7255        /**/
     2545     7256        /*  LOCAL STATIC  */
     2546     7257        /**/
     2547     7258    1   DCL TO_RET_UTS UBIN WORD STATIC;        /* Local copy of RET_UTS              */
     2548     7259    1   DCL TMP UBIN STATIC;
     2549     7260    1   DCL DATE# CHAR(8) STATIC;
     2550     7261    1   DCL DAYS# SBIN WORD STATIC;
PL6.E3A0      #027=VPD$PROCESS_DATE File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:54 Page:665  
     2551     7262        %FPT_TIME(FPTN = FPT_MAKE_UTS,
     2552     7263                  STCLASS = STATIC,
     2553     7264                  SOURCE = LOCAL,
     2554     7265                  DATE = DATE#,
     2555     7266                  DEST = UTS,
     2556     7267                  TSTAMP = TO_RET_UTS);
     2557     7286        /**/
     2558     7287    1           DATE_TYPE = DATE$ -> OUT$BLK.CODE;

   7287 11 000002   200003 470500                    LDP0    @DATE$,,AUTO
        11 000003   000000 471500                    LDP1    0,,PR0
        11 000004   100000 236100                    LDQ     0,,PR1
        11 000005   777777 376007                    ANQ     -1,DL
        11 000006   200004 473500                    LDP3    @DATE_TYPE,,AUTO
        11 000007   300000 756100                    STQ     0,,PR3

     2559     7288    2           DO CASE(DATE_TYPE);

   7288 11 000010   000007 116007                    CMPQ    7,DL
        11 000011   000013 602006 11                 TNC     s:7288+3,QL
        11 000012   000225 710000 11                 TRA     s:7319
        11 000013   000225 710000 11                 TRA     s:7319
        11 000014   000022 710000 11                 TRA     s:7290
        11 000015   000077 710000 11                 TRA     s:7299
        11 000016   000102 710000 11                 TRA     s:7301
        11 000017   000104 710000 11                 TRA     s:7303
        11 000020   000022 710000 11                 TRA     s:7290
        11 000021   000107 710000 11                 TRA     s:7305

     2560     7289    2            CASE(1,5);                     /* + or -  displacement               */

     2561     7290    2              CALL VPD$TEXTC_CHARBIN(DAYS#,

   7290 11 000022   000000 471500                    LDP1    0,,PR0
        11 000023   100003 474500                    LDP4    3,,PR1
        11 000024   000001 236000 12                 LDQ     1
        11 000025   200012 756100                    STQ     @ROUND_CODE+4,,AUTO
PL6.E3A0      #027=VPD$PROCESS_DATE File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:54 Page:666  
        11 000026   400003 631500                    EPPR1   3,,PR4
        11 000027   200011 451500                    STP1    @ROUND_CODE+3,,AUTO
        11 000030   000002 236000 12                 LDQ     2
        11 000031   200010 756100                    STQ     @ROUND_CODE+2,,AUTO
        11 000032   200010 630500                    EPPR0   @ROUND_CODE+2,,AUTO
        11 000033   000021 631400 xsym               EPPR1   B_VECTNIL+17
        11 000034   000000 701000 xent               TSX1    VPD$TEXTC_CHARBIN
        11 000035   000304 702000 11                 TSX2    BAD_DATE

     2562     7291    2                DATE$ -> OUT$BLK.SUBLK$(0) -> OUT$BLK.SUBLK$(0),
     2563     7292    2                %MAX_SBIN_DAYS#) ALTRET (BAD_DATE);
     2564     7293    2              IF DATE_TYPE = 1

   7293 11 000036   200004 470500                    LDP0    @DATE_TYPE,,AUTO
        11 000037   000000 235100                    LDA     0,,PR0
        11 000040   000001 115007                    CMPA    1,DL
        11 000041   000060 601000 11                 TNZ     s:7297

     2565     7294    2               THEN                        /* '+' Increment                      */
     2566     7295    2                 CALL XUD$UTS_ADJ_25TH (TO_RET_UTS, NOW_UTS, DAYS#*%UTS_25TH_DAY#)
              7295                          ALTRET (BAD_DATE);

   7295 11 000042   000004 236000 10                 LDQ     DAYS#
        11 000043   000003 402000 12                 MPY     3
        11 000044   200010 756100                    STQ     @ROUND_CODE+2,,AUTO
        11 000045   200010 631500                    EPPR1   @ROUND_CODE+2,,AUTO
        11 000046   200013 451500                    STP1    @ROUND_CODE+5,,AUTO
        11 000047   000004 236000 12                 LDQ     4
        11 000050   200012 756100                    STQ     @ROUND_CODE+4,,AUTO
        11 000051   000005 236000 12                 LDQ     5
        11 000052   200011 756100                    STQ     @ROUND_CODE+3,,AUTO
        11 000053   200011 630500                    EPPR0   @ROUND_CODE+3,,AUTO
        11 000054   000021 631400 xsym               EPPR1   B_VECTNIL+17
        11 000055   000000 701000 xent               TSX1    XUD$UTS_ADJ_25TH
        11 000056   000304 702000 11                 TSX2    BAD_DATE
        11 000057   000225 710000 11                 TRA     s:7319

PL6.E3A0      #027=VPD$PROCESS_DATE File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:54 Page:667  
     2567     7296    2               ELSE                        /* '-' Increment                      */
     2568     7297    2                 CALL XUD$UTS_ADJ_25TH(TO_RET_UTS, NOW_UTS, -DAYS#*%UTS_25TH_DAY#)
              7297                          ALTRET (BAD_DATE);

   7297 11 000060   000000 236003                    LDQ     0,DU
        11 000061   000004 136000 10                 SBLQ    DAYS#
        11 000062   000003 402000 12                 MPY     3
        11 000063   200010 756100                    STQ     @ROUND_CODE+2,,AUTO
        11 000064   200010 631500                    EPPR1   @ROUND_CODE+2,,AUTO
        11 000065   200013 451500                    STP1    @ROUND_CODE+5,,AUTO
        11 000066   000004 236000 12                 LDQ     4
        11 000067   200012 756100                    STQ     @ROUND_CODE+4,,AUTO
        11 000070   000005 236000 12                 LDQ     5
        11 000071   200011 756100                    STQ     @ROUND_CODE+3,,AUTO
        11 000072   200011 630500                    EPPR0   @ROUND_CODE+3,,AUTO
        11 000073   000021 631400 xsym               EPPR1   B_VECTNIL+17
        11 000074   000000 701000 xent               TSX1    XUD$UTS_ADJ_25TH
        11 000075   000304 702000 11                 TSX2    BAD_DATE
        11 000076   000225 710000 11                 TRA     s:7319

     2569     7298    2            CASE(2);                       /* TODAY                              */

     2570     7299    2              TO_RET_UTS = NOW_UTS;        /* Get current UTS time               */

   7299 11 000077   000000 235000 xsym               LDA     NOW_UTS
        11 000100   000000 755000 10                 STA     TO_RET_UTS
        11 000101   000225 710000 11                 TRA     s:7319

     2571     7300    2            CASE(3);                       /* NEVER                              */

     2572     7301    2              TO_RET_UTS = 0;              /* DO NOTHING FOR 'NEVER'             */

   7301 11 000102   000000 450000 10                 STZ     TO_RET_UTS
        11 000103   000225 710000 11                 TRA     s:7319

     2573     7302    2            CASE(4);                       /* NOW                                */

PL6.E3A0      #027=VPD$PROCESS_DATE File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:54 Page:668  
     2574     7303    2              TO_RET_UTS = NOW_UTS;        /* Get current UTS time               */

   7303 11 000104   000000 235000 xsym               LDA     NOW_UTS
        11 000105   000000 755000 10                 STA     TO_RET_UTS
        11 000106   000225 710000 11                 TRA     s:7319

     2575     7304    2            CASE(6);                       /* Specific dd/dd/dd date             */

     2576     7305    2              CALL CONCAT(DATE#,

   7305 11 000107   000000 471500                    LDP1    0,,PR0
        11 000110   100003 474500                    LDP4    3,,PR1
        11 000111   400003 475500                    LDP5    3,,PR4
        11 000112   000100 101500                    MRL     fill='000'O
        11 000113   500000 000001                    ADSC9   0,,PR5                   cn=0,n=1
        11 000114   200010 000002                    ADSC9   @ROUND_CODE+2,,AUTO      cn=0,n=2
        11 000115   200010 220100                    LDX0    @ROUND_CODE+2,,AUTO
        11 000116   000000 471500                    LDP1    0,,PR0
        11 000117   100004 474500                    LDP4    4,,PR1
        11 000120   400003 476500                    LDP6    3,,PR4
        11 000121   000100 101500                    MRL     fill='000'O
        11 000122   600000 000001                    ADSC9   0,,PR6                   cn=0,n=1
        11 000123   200011 000002                    ADSC9   @ROUND_CODE+3,,AUTO      cn=0,n=2
        11 000124   200011 221100                    LDX1    @ROUND_CODE+3,,AUTO
        11 000125   000000 471500                    LDP1    0,,PR0
        11 000126   100005 474500                    LDP4    5,,PR1
        11 000127   400003 477500                    LDP7    3,,PR4
        11 000130   000100 101500                    MRL     fill='000'O
        11 000131   700000 000001                    ADSC9   0,,PR7                   cn=0,n=1
        11 000132   200012 000002                    ADSC9   @ROUND_CODE+4,,AUTO      cn=0,n=2
        11 000133   200012 222100                    LDX2    @ROUND_CODE+4,,AUTO
        11 000134   040000 100540                    MLR     fill='040'O
        11 000135   500000 200010                    ADSC9   0,,PR5                   cn=1,n=*X0
        11 000136   000002 000010 10                 ADSC9   DATE#                    cn=0,n=8
        11 000137   000000 636010                    EAQ     0,X0
        11 000140   000022 772000                    QRL     18
        11 000141   000010 116007                    CMPQ    8,DL
PL6.E3A0      #027=VPD$PROCESS_DATE File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:54 Page:669  
        11 000142   000221 603000 11                 TRC     s:7317
        11 000143   200013 740100                    STX0    @ROUND_CODE+5,,AUTO
        11 000144   777767 620010                    EAX0    -9,X0
        11 000145   777777 660003                    ERX0    -1,DU
        11 000146   200013 235100                    LDA     @ROUND_CODE+5,,AUTO
        11 000147   000022 771000                    ARL     18
        11 000150   040045 100400                    MLR     fill='040'O
        11 000151   000006 000001 12                 ADSC9   6                        cn=0,n=1
        11 000152   000002 000010 10                 ADSC9   DATE#,A                  cn=0,n=*X0
        11 000153   200013 236100                    LDQ     @ROUND_CODE+5,,AUTO
        11 000154   000022 772000                    QRL     18
        11 000155   000007 116007                    CMPQ    7,DL
        11 000156   000221 603000 11                 TRC     s:7317
        11 000157   777770 620006                    EAX0    -8,QL
        11 000160   777777 660003                    ERX0    -1,DU
        11 000161   040046 100540                    MLR     fill='040'O
        11 000162   600000 200011                    ADSC9   0,,PR6                   cn=1,n=*X1
        11 000163   000002 200010 10                 ADSC9   DATE#,Q                  cn=1,n=*X0
        11 000164   000000 635011                    EAA     0,X1
        11 000165   000022 771000                    ARL     18
        11 000166   200014 755100                    STA     @ROUND_CODE+6,,AUTO
        11 000167   200014 036100                    ADLQ    @ROUND_CODE+6,,AUTO
        11 000170   000007 116007                    CMPQ    7,DL
        11 000171   000221 603000 11                 TRC     s:7317
        11 000172   000000 635011                    EAA     0,X1
        11 000173   000022 771000                    ARL     18
        11 000174   200015 755100                    STA     @ROUND_CODE+7,,AUTO
        11 000175   200016 756100                    STQ     @ROUND_CODE+8,,AUTO
        11 000176   200013 236100                    LDQ     @ROUND_CODE+5,,AUTO
        11 000177   000022 772000                    QRL     18
        11 000200   200015 036100                    ADLQ    @ROUND_CODE+7,,AUTO
        11 000201   200016 723100                    LXL3    @ROUND_CODE+8,,AUTO
        11 000202   777770 623013                    EAX3    -8,X3
        11 000203   777777 663003                    ERX3    -1,DU
        11 000204   040046 100400                    MLR     fill='040'O
        11 000205   000006 000001 12                 ADSC9   6                        cn=0,n=1
        11 000206   000002 200013 10                 ADSC9   DATE#,Q                  cn=1,n=*X3
PL6.E3A0      #027=VPD$PROCESS_DATE File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:54 Page:670  
        11 000207   200017 756100                    STQ     @ROUND_CODE+9,,AUTO
        11 000210   200016 236100                    LDQ     @ROUND_CODE+8,,AUTO
        11 000211   000006 116007                    CMPQ    6,DL
        11 000212   000221 603000 11                 TRC     s:7317
        11 000213   777771 624006                    EAX4    -7,QL
        11 000214   777777 664003                    ERX4    -1,DU
        11 000215   200017 235100                    LDA     @ROUND_CODE+9,,AUTO
        11 000216   040045 100540                    MLR     fill='040'O
        11 000217   700000 200012                    ADSC9   0,,PR7                   cn=1,n=*X2
        11 000220   000002 400014 10                 ADSC9   DATE#,A                  cn=2,n=*X4

     2577     7306    2                DATE$ -> OUT$BLK.SUBLK$(0) ->
     2578     7307    2                OUT$BLK.SUBLK$(0) ->
     2579     7308    2                TEXT$C.STRING,
     2580     7309    2                '/',
     2581     7310    2                DATE$ -> OUT$BLK.SUBLK$(1) ->
     2582     7311    2                OUT$BLK.SUBLK$(0) ->
     2583     7312    2                TEXT$C.STRING,
     2584     7313    2                '/',
     2585     7314    2                DATE$ -> OUT$BLK.SUBLK$(2) ->
     2586     7315    2                OUT$BLK.SUBLK$(0) ->
     2587     7316    2                TEXT$C.STRING);
     2588     7317    2              CALL M$TIME(FPT_MAKE_UTS) ALTRET(BAD_DATE);

   7317 11 000221   000006 630400 10                 EPPR0   FPT_MAKE_UTS
        11 000222   420004 713400                    CLIMB   alt,+8196
        11 000223   402000 401760                    pmme    nvectors=5
        11 000224   000304 702000 11                 TSX2    BAD_DATE

     2589     7318    2            END;                           /* END CASE                           */

     2590     7319    1           RET_UTS = TO_RET_UTS;

   7319 11 000225   200005 470500                    LDP0    @RET_UTS,,AUTO
        11 000226   000000 235000 10                 LDA     TO_RET_UTS
        11 000227   000000 755100                    STA     0,,PR0

PL6.E3A0      #027=VPD$PROCESS_DATE File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:54 Page:671  
     2591     7320    1           IF DATE_TYPE = 4                /* NOW                                */

   7320 11 000230   200004 471500                    LDP1    @DATE_TYPE,,AUTO
        11 000231   100000 235100                    LDA     0,,PR1
        11 000232   000004 115007                    CMPA    4,DL
        11 000233   000240 601000 11                 TNZ     s:7324

     2592     7321    1            THEN
     2593     7322    1              ROUND_CODE = 1;              /* No truncation                      */

   7322 11 000234   000001 236007                    LDQ     1,DL
        11 000235   200006 473500                    LDP3    @ROUND_CODE,,AUTO
        11 000236   300000 756100                    STQ     0,,PR3
        11 000237   000242 710000 11                 TRA     s:7324+2

     2594     7323    1            ELSE
     2595     7324    1              ROUND_CODE = 0;              /* Truncate to beginning of day       */

   7324 11 000240   200006 473500                    LDP3    @ROUND_CODE,,AUTO
        11 000241   300000 450100                    STZ     0,,PR3
        11 000242   000245 710000 11                 TRA     s:7328

     2596     7325        /**/
     2597     7326    1   VPD$ROUND_DATE: ENTRY(DATE$,DATE_TYPE,RET_UTS,ROUND_CODE) ALTRET;

   7326 11 000243   000000 700200 xent  VPD$ROUND_D* TSX0  ! X66_AUTO_4
        11 000244   000020 000004                    ZERO    16,4

     2598     7327        /**/
     2599     7328    2           DO CASE(ROUND_CODE);

   7328 11 000245   200006 470500                    LDP0    @ROUND_CODE,,AUTO
        11 000246   000000 235100                    LDA     0,,PR0
        11 000247   000001 115007                    CMPA    1,DL
        11 000250   000252 602005 11                 TNC     s:7328+5,AL
        11 000251   000303 710000 11                 TRA     s:7337
        11 000252   000253 710000 11                 TRA     s:7330
PL6.E3A0      #027=VPD$PROCESS_DATE File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:54 Page:672  

     2600     7329    2            CASE(0);                       /* Truncate to beginning of day       */

     2601     7330    2              CALL XUD$UTS_DIFF_25TH(TMP,RET_UTS,0);

   7330 11 000253   000007 236000 12                 LDQ     7
        11 000254   200012 756100                    STQ     @ROUND_CODE+4,,AUTO
        11 000255   200005 236100                    LDQ     @RET_UTS,,AUTO
        11 000256   000010 235000 12                 LDA     8
        11 000257   200010 757100                    STAQ    @ROUND_CODE+2,,AUTO
        11 000260   200010 630500                    EPPR0   @ROUND_CODE+2,,AUTO
        11 000261   000021 631400 xsym               EPPR1   B_VECTNIL+17
        11 000262   000000 701000 xent               TSX1    XUD$UTS_DIFF_25TH
        11 000263   000000 011000                    NOP     0

     2602     7331    2              TMP = (TMP/%UTS_25TH_DAY#) * %UTS_25TH_DAY#;
              7331                       /* truncate to beginning of day */

   7331 11 000264   000001 236000 10                 LDQ     TMP
        11 000265   000001 772000                    QRL     1
        11 000266   000011 506000 12                 DIV     9
        11 000267   000003 402000 12                 MPY     3
        11 000270   000001 756000 10                 STQ     TMP

     2603     7332    2              CALL XUD$UTS_ADJ_25TH (RET_UTS,0,TMP);

   7332 11 000271   000010 236000 12                 LDQ     8
        11 000272   200012 756100                    STQ     @ROUND_CODE+4,,AUTO
        11 000273   000007 236000 12                 LDQ     7
        11 000274   200005 235100                    LDA     @RET_UTS,,AUTO
        11 000275   200010 757100                    STAQ    @ROUND_CODE+2,,AUTO
        11 000276   200010 630500                    EPPR0   @ROUND_CODE+2,,AUTO
        11 000277   000021 631400 xsym               EPPR1   B_VECTNIL+17
        11 000300   000000 701000 xent               TSX1    XUD$UTS_ADJ_25TH
        11 000301   000000 011000                    NOP     0
        11 000302   000303 710000 11                 TRA     s:7337

PL6.E3A0      #027=VPD$PROCESS_DATE File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:54 Page:673  
     2604     7333    2            CASE(1);                       /* Leave it alone!                    */

     2605     7334    2              ;
     2606     7335    2            END;

     2607     7336        /**/
     2608     7337    1           RETURN;

   7337 11 000303   000000 702200 xent               TSX2  ! X66_ARET

     2609     7338
     2610     7339    1   BAD_DATE: RET_UTS = 0;                  /* Error, return a date of zero       */

   7339 11 000304   200005 470500       BAD_DATE     LDP0    @RET_UTS,,AUTO
        11 000305   000000 450100                    STZ     0,,PR0

     2611     7340    1           DATE_TYPE = 0;

   7340 11 000306   200004 471500                    LDP1    @DATE_TYPE,,AUTO
        11 000307   100000 450100                    STZ     0,,PR1

     2612     7341    1           ALTRETURN;

   7341 11 000310   000000 702200 xent               TSX2  ! X66_AALT
     2613     7342
     2614     7343    1   END VPD$PROCESS_DATE;
     2615     7344        %EOD;

PL6.E3A0      #027=VPD$PROCESS_DATE File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:54 Page:674  
--  Include file information  --

   XUD_UTS_M.:E05TOU  is referenced.
   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$PROCESS_DATE.
PL6.E3A0      #027=VPD$PROCESS_DATE File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:54 Page:675  

 **** Variables and constants ****

  ****  Section 010  Data  VPD$PROCESS_DATE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     2-0-0/c CHAR(8)     r     1 DATE#                      4-0-0/w SBIN        r     1 DAYS#
     6-0-0/d STRC(432)   r     1 FPT_MAKE_UTS               1-0-0/w UBIN        r     1 TMP
     0-0-0/w UBIN        r     1 TO_RET_UTS

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @DATE$                     4-0-0/w PTR         r     1 @DATE_TYPE
     5-0-0/w PTR         r     1 @RET_UTS                   6-0-0/w PTR         r     1 @ROUND_CODE
    *0-0-0/w PTR         r     1 DATE$                     *0-0-0/w UBIN        r     1 DATE_TYPE
    *0-0-0/w UBIN        r     1 RET_UTS                   *0-0-0/w UBIN        r     1 ROUND_CODE

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w EPTR        r     1 BREAK_MESSAGE_REPORTER
     0-0-0/w UBIN        r     1 NOW_UTS

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(144)   r     1 OUT$BLK                    0-0-0/w ASTR(153)   r     1 OUT$SYM
     0-0-0/c ASTR(9)     r     1 TEXT$C

PL6.E3A0      #027=VPD$PROCESS_DATE File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:54 Page:676  

   Procedure VPD$PROCESS_DATE requires 201 words for executable code.
   Procedure VPD$PROCESS_DATE requires 16 words of local(AUTO) storage.
PL6.E3A0      #027=VPD$PROCESS_DATE File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:54 Page:677  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #027=VPD$PROCESS_DATE File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:54 Page:678  
          MINI XREF LISTING

BAD_DATE
      7339**LABEL    7290--CALLALT  7295--CALLALT  7297--CALLALT  7317--CALLALT
BREAK_LOC
      5246**DCL      5246--REDEF
DATE#
      7260**DCL      7278--DCLINIT  7279--DCLINIT  7305<<CALLBLT
DATE$
      7155**DCL         6--PROC     7287>>ASSIGN   7290>>CALL     7305>>CALLBLT  7305>>CALLBLT  7305>>CALLBLT
      7305>>CALLBLT  7305>>CALLBLT  7305>>CALLBLT  7326--ENTRY
DATE_TYPE
      7156**DCL         6--PROC     7287<<ASSIGN   7288>>DOCASE   7293>>IF       7320>>IF       7326--ENTRY
      7340<<ASSIGN
DAYS#
      7261**DCL      7290<>CALL     7295>>CALL     7297>>CALL
DEF_ICB.FID.STRING
      5844**DCL      5845--REDEF
DEV_ICB.FID.STRING
      5730**DCL      5731--REDEF
EI_KEY.KEY
      5942**DCL      5942--REDEF    5942--REDEF    5942--REDEF
EO_OCB.TYPE
      5442**DCL      5443--REDEF
FPT_CLOSE_EI.SN_
      6783**DCL      6783--REDEF
FPT_CLOSE_EI.UTL_
      6784**DCL      6784--REDEF
FPT_CLOSE_EI.V.EXPIRE#
      6798**DCL      6798--REDEF
FPT_CLOSE_EI.V.TYPE#
      6796**DCL      6796--REDEF
FPT_CLOSE_EI.V.XTNSIZE#
      6793**DCL      6793--REDEF    6795--REDEF
PL6.E3A0      #027=VPD$PROCESS_DATE File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:54 Page:679  
FPT_CLOSE_PTL.SN_
      6909**DCL      6909--REDEF
FPT_CLOSE_PTL.UTL_
      6910**DCL      6910--REDEF
FPT_CLOSE_PTL.V.EXPIRE#
      6924**DCL      6924--REDEF
FPT_CLOSE_PTL.V.TYPE#
      6922**DCL      6922--REDEF
FPT_CLOSE_PTL.V.XTNSIZE#
      6919**DCL      6919--REDEF    6921--REDEF
FPT_CLOSE_READ.SN_
      6825**DCL      6825--REDEF
FPT_CLOSE_READ.UTL_
      6826**DCL      6826--REDEF
FPT_CLOSE_READ.V.EXPIRE#
      6840**DCL      6840--REDEF
FPT_CLOSE_READ.V.TYPE#
      6838**DCL      6838--REDEF
FPT_CLOSE_READ.V.XTNSIZE#
      6835**DCL      6835--REDEF    6837--REDEF
FPT_CLOSE_SI.SN_
      6993**DCL      6993--REDEF
FPT_CLOSE_SI.UTL_
      6994**DCL      6994--REDEF
FPT_CLOSE_SI.V.EXPIRE#
      7008**DCL      7008--REDEF
FPT_CLOSE_SI.V.TYPE#
      7006**DCL      7006--REDEF
FPT_CLOSE_SI.V.XTNSIZE#
      7003**DCL      7003--REDEF    7005--REDEF
FPT_CLOSE_STD.SN_
      6951**DCL      6951--REDEF
FPT_CLOSE_STD.UTL_
      6952**DCL      6952--REDEF
FPT_CLOSE_STD.V.EXPIRE#
      6966**DCL      6966--REDEF
PL6.E3A0      #027=VPD$PROCESS_DATE File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:54 Page:680  
FPT_CLOSE_STD.V.TYPE#
      6964**DCL      6964--REDEF
FPT_CLOSE_STD.V.XTNSIZE#
      6961**DCL      6961--REDEF    6963--REDEF
FPT_CLSEI_FT.SN_
      6867**DCL      6867--REDEF
FPT_CLSEI_FT.UTL_
      6868**DCL      6868--REDEF
FPT_CLSEI_FT.V.EXPIRE#
      6882**DCL      6882--REDEF
FPT_CLSEI_FT.V.TYPE#
      6880**DCL      6880--REDEF
FPT_CLSEI_FT.V.XTNSIZE#
      6877**DCL      6877--REDEF    6879--REDEF
FPT_MAKE_UTS
      7278**DCL      7317<>CALL
FPT_MAKE_UTS.V
      7282**DCL      7278--DCLINIT
FPT_OPEN_EI.ACSVEH_
      6438**DCL      6439--REDEF
FPT_OPEN_EI.ALTKEYS_
      6444**DCL      6445--REDEF    6445--REDEF
FPT_OPEN_EI.HDR_
      6443**DCL      6444--REDEF
FPT_OPEN_EI.TAB_
      6442**DCL      6443--REDEF
FPT_OPEN_EI.UHL_
      6436**DCL      6437--REDEF    6437--REDEF
FPT_OPEN_EI.V.FSN#
      6476**DCL      6476--REDEF    6476--REDEF
FPT_OPEN_EI.WSN_
      6442**DCL      6442--REDEF
FPT_OPEN_EI_SAVE.ACSVEH_
      6547**DCL      6548--REDEF
FPT_OPEN_EI_SAVE.ALTKEYS_
      6553**DCL      6554--REDEF    6554--REDEF
PL6.E3A0      #027=VPD$PROCESS_DATE File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:54 Page:681  
FPT_OPEN_EI_SAVE.HDR_
      6552**DCL      6553--REDEF
FPT_OPEN_EI_SAVE.TAB_
      6551**DCL      6552--REDEF
FPT_OPEN_EI_SAVE.UHL_
      6545**DCL      6546--REDEF    6546--REDEF
FPT_OPEN_EI_SAVE.V.FSN#
      6585**DCL      6585--REDEF    6585--REDEF
FPT_OPEN_EI_SAVE.WSN_
      6551**DCL      6551--REDEF
FPT_OPEN_OUT.ACSVEH_
      6329**DCL      6330--REDEF
FPT_OPEN_OUT.ALTKEYS_
      6335**DCL      6336--REDEF    6336--REDEF
FPT_OPEN_OUT.HDR_
      6334**DCL      6335--REDEF
FPT_OPEN_OUT.TAB_
      6333**DCL      6334--REDEF
FPT_OPEN_OUT.UHL_
      6327**DCL      6328--REDEF    6328--REDEF
FPT_OPEN_OUT.V.FSN#
      6367**DCL      6367--REDEF    6367--REDEF
FPT_OPEN_OUT.WSN_
      6333**DCL      6333--REDEF
FPT_OPEN_OUT_SAVE.ACSVEH_
      6220**DCL      6221--REDEF
FPT_OPEN_OUT_SAVE.ALTKEYS_
      6226**DCL      6227--REDEF    6227--REDEF
FPT_OPEN_OUT_SAVE.HDR_
      6225**DCL      6226--REDEF
FPT_OPEN_OUT_SAVE.TAB_
      6224**DCL      6225--REDEF
FPT_OPEN_OUT_SAVE.UHL_
      6218**DCL      6219--REDEF    6219--REDEF
FPT_OPEN_OUT_SAVE.V.FSN#
      6258**DCL      6258--REDEF    6258--REDEF
PL6.E3A0      #027=VPD$PROCESS_DATE File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:54 Page:682  
FPT_OPEN_OUT_SAVE.WSN_
      6224**DCL      6224--REDEF
FPT_READ_STD.STATION_
      6648**DCL      6649--REDEF
FPT_READ_STD.V.DVBYTE.REREAD#
      6660**DCL      6660--REDEF
FPT_READ_STD.V.INDX#
      6658**DCL      6658--REDEF
FPT_READ_UC.STATION_
      6609**DCL      6610--REDEF
FPT_READ_UC.V.DVBYTE.REREAD#
      6621**DCL      6621--REDEF
FPT_READ_UC.V.INDX#
      6619**DCL      6619--REDEF
FPT_WRITE_ME.STATION_
      6717**DCL      6717--REDEF
FPT_WRITE_ME.V.DVBYTE.VFC#
      6724**DCL      6724--REDEF
FPT_WRITE_OUT.STATION_
      6748**DCL      6748--REDEF
FPT_WRITE_OUT.V.DVBYTE.VFC#
      6755**DCL      6755--REDEF
FPT_WRITE_UC.STATION_
      6686**DCL      6686--REDEF
FPT_WRITE_UC.V.DVBYTE.VFC#
      6693**DCL      6693--REDEF
FROM_SN.SN
      5592**DCL      5593--REDEF
GETCMD.OUT$
      4799**DCL      4805--REDEF
ICB.FID.STRING
      5616**DCL      5617--REDEF
IFSFA_PARAM.EOMCHAR#
      5971**DCL      5972--REDEF
IFSFA_PARAM.SIG1
      5965**DCL      5965--REDEF
PL6.E3A0      #027=VPD$PROCESS_DATE File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:54 Page:683  
IFSFA_PARAM.SIG2
      5965**DCL      5966--REDEF
IN_RES
      5538**DCL      5538--REDEF
IN_SN.SN
      5554**DCL      5555--REDEF
M$TIME
       123**DCL-ENT  7317--CALL
NOW_UTS
      5245**DCL      7295<>CALL     7297<>CALL     7299>>ASSIGN   7303>>ASSIGN
OCB.TYPE
      5300**DCL      5301--REDEF
OFSFA_PARAM.EOMCHAR#
      6001**DCL      6002--REDEF
OFSFA_PARAM.SIG1
      5995**DCL      5995--REDEF
OFSFA_PARAM.SIG2
      5995**DCL      5996--REDEF
OUT$BLK.CODE
      7175**DCL      7287>>ASSIGN
OUT$BLK.SUBLK$
      7200**DCL      7290>>CALL     7290<>CALL     7305>>CALLBLT  7305>>CALLBLT  7305>>CALLBLT  7305>>CALLBLT
      7305>>CALLBLT  7305>>CALLBLT  7305>>CALLBLT  7305>>CALLBLT  7305>>CALLBLT  7305>>CALLBLT  7305>>CALLBLT
      7305>>CALLBLT
OUT$SYM.COUNT
      7236**DCL      7239--IMP-SIZ
OUT_SN.SN
      5572**DCL      5573--REDEF
RET_UTS
      7154**DCL         6--PROC     7319<<ASSIGN   7326--ENTRY    7330<>CALL     7332<>CALL     7339<<ASSIGN
ROUND_CODE
      7157**DCL         6--PROC     7322<<ASSIGN   7324<<ASSIGN   7326--ENTRY    7328>>DOCASE
SPEC_BUF
      5250**DCL      5250--REDEF
TEXT$C.LEN
      7245**DCL      7246--IMP-SIZ  7305>>CALLBLT  7305>>CALLBLT  7305>>CALLBLT
PL6.E3A0      #027=VPD$PROCESS_DATE File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:54 Page:684  
TEXT$C.STRING
      7246**DCL      7305>>CALLBLT  7305>>CALLBLT  7305>>CALLBLT
TMP
      7259**DCL      7330<>CALL     7331<<ASSIGN   7331>>ASSIGN   7332<>CALL
TO_RET_UTS
      7258**DCL      7282--DCLINIT  7295<>CALL     7297<>CALL     7299<<ASSIGN   7301<<ASSIGN   7303<<ASSIGN
      7319>>ASSIGN
VPD$TEXTC_CHARBIN
      7250**DCL-ENT  7290--CALL
XUD$UTS_ADJ_25TH
      7133**DCL-ENT  7295--CALL     7297--CALL     7332--CALL
XUD$UTS_DIFF_25TH
      7121**DCL-ENT  7330--CALL

PL6.E3A0      #028=VPD$TEXTC_CHARBIN File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:57 Page:685  
     2616        1        /*T***********************************************************/
     2617        2        /*T*                                                         */
     2618        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2619        4        /*T*                                                         */
     2620        5        /*T***********************************************************/
     2621        6        VPD$TEXTC_CHARBIN: PROC(BIN_NUM,TEXTC$,MAX_NUM,SIGN_FIELD_) ALTRET;
     2622        7        /*D* NAME: VPD$TEXTC_CHARBIN
     2623        8             CALL: CALL VPD$TEXTC_CHARBIN(BIN_NUM,TEXTC$,MAX_NUM,SIGN_FIELD_);
     2624        9             DESCRIPTION: This procedure takes a pointer to a TEXTC structure
     2625       10                          and performs a CHARBIN on it with a UBIN WORD destination.
     2626       11                          If the TEXTC string contains a number which is either
     2627       12                          larger than 2^36 -1 or a passed limit, this procedure
     2628       13                          ALTRETURNS.
     2629       14
     2630       15                          BIN_NUM = UBIN WORD receiving field
     2631       16                          TEXTC$ = PTR to the TEXTC representation of the number
     2632       17                          MAX_NUM = UBIN WORD for highest allowable number
     2633       18                          MAX_NUM = UBIN WORD for highest allowable number
     2634       19                          SIGN_FIELD_ = SBIN WORD (OPTIONAL).  Returns 1 if
     2635       20                            the sign character was absent or '+'.  A -1 is
     2636       21                            returned for a sign of '-'.
     2637       22        */
     2638       23        /**/
     2639       24        /*  PARAMETERS  */
     2640       25        /**/
     2641       26    1   DCL BIN_NUM UBIN WORD ALIGNED;
     2642       27    1   DCL TEXTC$ PTR;
     2643       28    1   DCL MAX_NUM UBIN WORD;
     2644       29    1   DCL SIGN_FIELD_ SBIN WORD;
     2645       30    1   DCL I SBIN WORD;
     2646       31        /**/
     2647       32        /*  BASED DATA  */
     2648       33        /**/
     2649       34    1   DCL NUM$TEXT CHAR(NUM_LEN) BASED(NUM$);
     2650       35    1   DCL 1 TEXT$C BASED,
     2651       36    1         2 LEN UBIN BYTE UNAL,
     2652       37    1         2 STRING CHAR(TEXT$C.LEN);
PL6.E3A0      #028=VPD$TEXTC_CHARBIN File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:57 Page:686  
     2653       38        /**/
     2654       39        /*  LOCAL AUTO  */
     2655       40        /**/
     2656       41    1   DCL SIGN_FIELD SBIN WORD;
     2657       42    1   DCL NUM_LEN SBIN WORD;
     2658       43    1   DCL NUM$ PTR;
     2659       44        /**/
     2660       45    1           NUM_LEN = TEXTC$ -> TEXT$C.LEN;
     2661       46    1           NUM$ = PINCRC(TEXTC$,1);
     2662       47        /**/
     2663       48    1           SIGN_FIELD = 1;
     2664       49    1           IF SUBSTR(NUM$TEXT,0,1) = '-'
     2665       50    1            THEN
     2666       51    2            DO;
     2667       52    2               SIGN_FIELD = -1;
     2668       53    2               GOTO GOT_SIGN;
     2669       54    2               END;
     2670       55    1           IF SUBSTR(NUM$TEXT,0,1) = '+'
     2671       56    1            THEN
     2672       57    2            DO;
     2673       58    2   GOT_SIGN:   NUM_LEN = NUM_LEN -1;
     2674       59    2               NUM$ = PINCRC(NUM$,1);
     2675       60    2               END;
     2676       61    1           CALL INDEX(I,'+',NUM$TEXT);
     2677       62    1           IF I < NUM_LEN
     2678       63    1            THEN
     2679       64    1              GOTO BAD_NUM;
     2680       65    1           CALL INDEX(I,'-',NUM$TEXT);
     2681       66    1           IF I < NUM_LEN
     2682       67    1            THEN
     2683       68    1              GOTO BAD_NUM;
     2684       69        /**/
     2685       70    1           IF NUM_LEN > 11
     2686       71    1             OR (NUM_LEN = 11 AND NUM$TEXT > '68719476735')
     2687       72    1            THEN
     2688       73    1              GOTO BAD_NUM;
     2689       74    1           CALL CHARBIN(BIN_NUM,NUM$TEXT);
PL6.E3A0      #028=VPD$TEXTC_CHARBIN File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:57 Page:687  
     2690       75        /**/
     2691       76    1           IF ADDR(SIGN_FIELD_) ~= ADDR(NIL)
     2692       77    1            THEN
     2693       78    1              SIGN_FIELD_ = SIGN_FIELD;
     2694       79    1           IF BIN_NUM>MAX_NUM
     2695       80    1            THEN
     2696       81    1              GOTO BAD_NUM;
     2697       82    1           RETURN;
     2698       83        /**/
     2699       84    1   BAD_NUM: ;
     2700       85    1           ALTRETURN;
     2701       86        /**/
     2702       87    1   END VPD$TEXTC_CHARBIN;
     2703       88        %EOD;

PL6.E3A0      #028=VPD$TEXTC_CHARBIN File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:57 Page:688  
--  Include file information  --

   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VPD$TEXTC_CHARBIN.

   Procedure VPD$TEXTC_CHARBIN requires 71 words for executable code.
   Procedure VPD$TEXTC_CHARBIN requires 14 words of local(AUTO) storage.

PL6.E3A0      #028=VPD$TEXTC_CHARBIN File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:57 Page:689  

 Object Unit name= VPD$TEXTC_CHARBIN                          File name= VPD$UTIL.:E05TOU
 UTS= JUL 30 '97 07:57:02.56 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0  RoData even  UTS      3      3  VPD$TEXTC_CHARBIN
    1   Proc  even  none    71    107  VPD$TEXTC_CHARBIN
    2  RoData even  none     2      2  VPD$TEXTC_CHARBIN

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        4  VPD$TEXTC_CHARBIN

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_4
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     B_VECTNIL
PL6.E3A0      #028=VPD$TEXTC_CHARBIN File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:57 Page:690  


     2616        1        /*T***********************************************************/
     2617        2        /*T*                                                         */
     2618        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2619        4        /*T*                                                         */
     2620        5        /*T***********************************************************/
     2621        6        VPD$TEXTC_CHARBIN: PROC(BIN_NUM,TEXTC$,MAX_NUM,SIGN_FIELD_) ALTRET;

      6  1 000000   000000 700200 xent  VPD$TEXTC_C* TSX0  ! X66_AUTO_4
         1 000001   000016 000004                    ZERO    14,4

     2622        7        /*D* NAME: VPD$TEXTC_CHARBIN
     2623        8             CALL: CALL VPD$TEXTC_CHARBIN(BIN_NUM,TEXTC$,MAX_NUM,SIGN_FIELD_);
     2624        9             DESCRIPTION: This procedure takes a pointer to a TEXTC structure
     2625       10                          and performs a CHARBIN on it with a UBIN WORD destination.
     2626       11                          If the TEXTC string contains a number which is either
     2627       12                          larger than 2^36 -1 or a passed limit, this procedure
     2628       13                          ALTRETURNS.
     2629       14
     2630       15                          BIN_NUM = UBIN WORD receiving field
     2631       16                          TEXTC$ = PTR to the TEXTC representation of the number
     2632       17                          MAX_NUM = UBIN WORD for highest allowable number
     2633       18                          MAX_NUM = UBIN WORD for highest allowable number
     2634       19                          SIGN_FIELD_ = SBIN WORD (OPTIONAL).  Returns 1 if
     2635       20                            the sign character was absent or '+'.  A -1 is
     2636       21                            returned for a sign of '-'.
     2637       22        */
     2638       23        /**/
     2639       24        /*  PARAMETERS  */
     2640       25        /**/
     2641       26    1   DCL BIN_NUM UBIN WORD ALIGNED;
     2642       27    1   DCL TEXTC$ PTR;
     2643       28    1   DCL MAX_NUM UBIN WORD;
     2644       29    1   DCL SIGN_FIELD_ SBIN WORD;
     2645       30    1   DCL I SBIN WORD;
     2646       31        /**/
     2647       32        /*  BASED DATA  */
PL6.E3A0      #028=VPD$TEXTC_CHARBIN File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:57 Page:691  
     2648       33        /**/
     2649       34    1   DCL NUM$TEXT CHAR(NUM_LEN) BASED(NUM$);
     2650       35    1   DCL 1 TEXT$C BASED,
     2651       36    1         2 LEN UBIN BYTE UNAL,
     2652       37    1         2 STRING CHAR(TEXT$C.LEN);
     2653       38        /**/
     2654       39        /*  LOCAL AUTO  */
     2655       40        /**/
     2656       41    1   DCL SIGN_FIELD SBIN WORD;
     2657       42    1   DCL NUM_LEN SBIN WORD;
     2658       43    1   DCL NUM$ PTR;
     2659       44        /**/
     2660       45    1           NUM_LEN = TEXTC$ -> TEXT$C.LEN;

     45  1 000002   200004 470500                    LDP0    @TEXTC$,,AUTO
         1 000003   000000 471500                    LDP1    0,,PR0
         1 000004   000100 101500                    MRL     fill='000'O
         1 000005   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         1 000006   200011 000004                    ADSC9   NUM_LEN,,AUTO            cn=0,n=4

     2661       46    1           NUM$ = PINCRC(TEXTC$,1);

     46  1 000007   000000 236100                    LDQ     0,,PR0
         1 000010   200000 036007                    ADLQ    65536,DL
         1 000011   200012 756100                    STQ     NUM$,,AUTO

     2662       47        /**/
     2663       48    1           SIGN_FIELD = 1;

     48  1 000012   000001 235007                    LDA     1,DL
         1 000013   200010 755100                    STA     SIGN_FIELD,,AUTO

     2664       49    1           IF SUBSTR(NUM$TEXT,0,1) = '-'

     49  1 000014   200012 473500                    LDP3    NUM$,,AUTO
         1 000015   040000 106500                    CMPC    fill='040'O
         1 000016   300000 000001                    ADSC9   0,,PR3                   cn=0,n=1
PL6.E3A0      #028=VPD$TEXTC_CHARBIN File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:57 Page:692  
         1 000017   000000 000001 2                  ADSC9   0                        cn=0,n=1
         1 000020   000024 601000 1                  TNZ     s:55

     2665       50    1            THEN
     2666       51    2            DO;

     2667       52    2               SIGN_FIELD = -1;

     52  1 000021   000001 335007                    LCA     1,DL
         1 000022   200010 755100                    STA     SIGN_FIELD,,AUTO

     2668       53    2               GOTO GOT_SIGN;

     53  1 000023   000030 710000 1                  TRA     GOT_SIGN

     2669       54    2               END;
     2670       55    1           IF SUBSTR(NUM$TEXT,0,1) = '+'

     55  1 000024   040000 106500                    CMPC    fill='040'O
         1 000025   300000 000001                    ADSC9   0,,PR3                   cn=0,n=1
         1 000026   000001 000001 2                  ADSC9   1                        cn=0,n=1
         1 000027   000035 601000 1                  TNZ     s:61

     2671       56    1            THEN
     2672       57    2            DO;

     2673       58    2   GOT_SIGN:   NUM_LEN = NUM_LEN -1;

     58  1 000030   000001 336007       GOT_SIGN     LCQ     1,DL
         1 000031   200011 056100                    ASQ     NUM_LEN,,AUTO

     2674       59    2               NUM$ = PINCRC(NUM$,1);

     59  1 000032   200012 236100                    LDQ     NUM$,,AUTO
         1 000033   200000 036007                    ADLQ    65536,DL
         1 000034   200012 756100                    STQ     NUM$,,AUTO

PL6.E3A0      #028=VPD$TEXTC_CHARBIN File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:57 Page:693  
     2675       60    2               END;

     2676       61    1           CALL INDEX(I,'+',NUM$TEXT);

     61  1 000035   200012 473500                    LDP3    NUM$,,AUTO
         1 000036   200011 720100                    LXL0    NUM_LEN,,AUTO
         1 000037   000000 124540                    SCM     mask='000'O
         1 000040   300000 000010                    ADSC9   0,,PR3                   cn=0,n=*X0
         1 000041   000001 000001 2                  ADSC9   1                        cn=0,n=1
         1 000042   200007 000100                    ARG     I,,AUTO

     2677       62    1           IF I < NUM_LEN

     62  1 000043   200007 236100                    LDQ     I,,AUTO
         1 000044   200011 116100                    CMPQ    NUM_LEN,,AUTO
         1 000045   000106 604000 1                  TMI     BAD_NUM

     2678       63    1            THEN
     2679       64    1              GOTO BAD_NUM;
     2680       65    1           CALL INDEX(I,'-',NUM$TEXT);

     65  1 000046   000000 124540                    SCM     mask='000'O
         1 000047   300000 000010                    ADSC9   0,,PR3                   cn=0,n=*X0
         1 000050   000000 000001 2                  ADSC9   0                        cn=0,n=1
         1 000051   200007 000100                    ARG     I,,AUTO

     2681       66    1           IF I < NUM_LEN

     66  1 000052   200007 236100                    LDQ     I,,AUTO
         1 000053   200011 116100                    CMPQ    NUM_LEN,,AUTO
         1 000054   000106 604000 1                  TMI     BAD_NUM

     2682       67    1            THEN
     2683       68    1              GOTO BAD_NUM;
     2684       69        /**/
     2685       70    1           IF NUM_LEN > 11

PL6.E3A0      #028=VPD$TEXTC_CHARBIN File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:57 Page:694  
     70  1 000055   200011 235100                    LDA     NUM_LEN,,AUTO
         1 000056   000013 115007                    CMPA    11,DL
         1 000057   000106 605400 1                  TPNZ    BAD_NUM
         1 000060   000065 601000 1                  TNZ     s:74
         1 000061   040140 106400                    CMPC    fill='040'O
         1 000062   000000 000013 0                  ADSC9   0                        cn=0,n=11
         1 000063   300000 000010                    ADSC9   0,,PR3                   cn=0,n=*X0
         1 000064   000106 602000 1                  TNC     BAD_NUM

     2686       71    1             OR (NUM_LEN = 11 AND NUM$TEXT > '68719476735')
     2687       72    1            THEN
     2688       73    1              GOTO BAD_NUM;
     2689       74    1           CALL CHARBIN(BIN_NUM,NUM$TEXT);

     74  1 000065   000100 305540                    DTB
         1 000066   300000 030010                    NDSC9   0,,PR3                   cn=0,s=nosgn,sf=0,n=*X0
         1 000067   200014 000010                    NDSC9   NUM$+2,,AUTO             cn=0,s=lsgnf,sf=0,n=8
         1 000070   200003 471500                    LDP1    @BIN_NUM,,AUTO
         1 000071   200015 235100                    LDA     NUM$+3,,AUTO
         1 000072   100000 755100                    STA     0,,PR1

     2690       75        /**/
     2691       76    1           IF ADDR(SIGN_FIELD_) ~= ADDR(NIL)

     76  1 000073   200006 236100                    LDQ     @SIGN_FIELD_,,AUTO
         1 000074   000001 116000 xsym               CMPQ    B_VECTNIL+1
         1 000075   000101 600000 1                  TZE     s:79

     2692       77    1            THEN
     2693       78    1              SIGN_FIELD_ = SIGN_FIELD;

     78  1 000076   200006 474500                    LDP4    @SIGN_FIELD_,,AUTO
         1 000077   200010 235100                    LDA     SIGN_FIELD,,AUTO
         1 000100   400000 755100                    STA     0,,PR4

     2694       79    1           IF BIN_NUM>MAX_NUM

PL6.E3A0      #028=VPD$TEXTC_CHARBIN File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:57 Page:695  
     79  1 000101   200005 474500                    LDP4    @MAX_NUM,,AUTO
         1 000102   400000 236100                    LDQ     0,,PR4
         1 000103   100000 116100                    CMPQ    0,,PR1
         1 000104   000106 602000 1                  TNC     BAD_NUM

     2695       80    1            THEN
     2696       81    1              GOTO BAD_NUM;
     2697       82    1           RETURN;

     82  1 000105   000000 702200 xent               TSX2  ! X66_ARET

     79  1 000106                       BAD_NUM      null
     2698       83        /**/
     2699       84    1   BAD_NUM: ;
     2700       85    1           ALTRETURN;

     85  1 000106   000000 702200 xent               TSX2  ! X66_AALT
     2701       86        /**/
     2702       87    1   END VPD$TEXTC_CHARBIN;
     2703       88        %EOD;

PL6.E3A0      #028=VPD$TEXTC_CHARBIN File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:57 Page:696  
--  Include file information  --

   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VPD$TEXTC_CHARBIN.
PL6.E3A0      #028=VPD$TEXTC_CHARBIN File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:57 Page:697  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @BIN_NUM                   5-0-0/w PTR         r     1 @MAX_NUM
     6-0-0/w PTR         r     1 @SIGN_FIELD_               4-0-0/w PTR         r     1 @TEXTC$
    *0-0-0/w UBIN        r     1 BIN_NUM                    7-0-0/w SBIN        r     1 I
    *0-0-0/w UBIN        r     1 MAX_NUM                   12-0-0/w PTR         r     1 NUM$
    11-0-0/w SBIN        r     1 NUM_LEN                   10-0-0/w SBIN        r     1 SIGN_FIELD
    *0-0-0/w SBIN        r     1 SIGN_FIELD_               *0-0-0/w PTR         r     1 TEXTC$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c ACHR        r     1 NUM$TEXT                   0-0-0/c ASTR(9)     r     1 TEXT$C


   Procedure VPD$TEXTC_CHARBIN requires 71 words for executable code.
   Procedure VPD$TEXTC_CHARBIN requires 14 words of local(AUTO) storage.
PL6.E3A0      #028=VPD$TEXTC_CHARBIN File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:57 Page:698  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #028=VPD$TEXTC_CHARBIN File=VPD$UTIL.:E05TSI                       WED 07/30/97 07:57 Page:699  
          MINI XREF LISTING

BAD_NUM
        79**LABEL      64--GOTO       68--GOTO       73--GOTO       81--GOTO
BIN_NUM
        26**DCL         6--PROC       74<<CALLBLT    79>>IF
GOT_SIGN
        58**LABEL      53--GOTO
I
        30**DCL        61<<CALLBLT    62>>IF         65<<CALLBLT    66>>IF
MAX_NUM
        28**DCL         6--PROC       79>>IF
NUM$
        43**DCL        34--IMP-PTR    46<<ASSIGN     49>>IF         55>>IF         59<<ASSIGN     59>>ASSIGN
        61>>CALLBLT    65>>CALLBLT    70>>IF         74>>CALLBLT
NUM$TEXT
        34**DCL        49>>IF         55>>IF         61>>CALLBLT    65>>CALLBLT    70>>IF         74>>CALLBLT
NUM_LEN
        42**DCL        34--IMP-SIZ    45<<ASSIGN     49>>IF         55>>IF         58<<ASSIGN     58>>ASSIGN
        61>>CALLBLT    62>>IF         65>>CALLBLT    66>>IF         70>>IF         70>>IF         70>>IF
        74>>CALLBLT
SIGN_FIELD
        41**DCL        48<<ASSIGN     52<<ASSIGN     78>>ASSIGN
SIGN_FIELD_
        29**DCL         6--PROC       76--IF         78<<ASSIGN
TEXT$C.LEN
        36**DCL        37--IMP-SIZ    45>>ASSIGN
TEXTC$
        27**DCL         6--PROC       45>>ASSIGN     46>>ASSIGN

PL6.E3A0      #029=VPD$U$ File=VPD$UTIL.:E05TSI                                  WED 07/30/97 07:57 Page:700  
     2704        1        /*T***********************************************************/
     2705        2        /*T*                                                         */
     2706        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2707        4        /*T*                                                         */
     2708        5        /*T***********************************************************/
     2709        6        VPD$U$: PROC(PARSE_PARAM);
     2710        7        /*D* NAME: VPD$U$
     2711        8             CALL: CALL VPD$U$(PARSE_PARAM);
     2712        9                    where PARSE_PARAM is a structure defined by macro PARSE$PARAM.
     2713       10             DESCRIPTION: This procedure is called by X$PARSE for various functions
     2714       11                          and special conditions.
     2715       12        */
     2716       13        %INCLUDE XU_SUBS_C;
     2717      105        %INCLUDE VP_DATA_R;
     2718     7092        %PARSE$PARAM(NAME  = PARSE_PARAM,STCLASS=);
     2719     7173        %PARSE$OUT(NAME = OUT$BLK,STCLASS = BASED);
     2720     7218        %PARSE$SYM(NAME = OUT$SYM,STCLASS = BASED);
     2721     7256    1   DCL KEYWORD_LEN SBIN WORD STATIC;
     2722     7257    1   DCL VPD$GET_INPUT ENTRY(1);
     2723     7258    2           DO SELECT(PARSE_PARAM.TYPE);
     2724     7259    2              SELECT(%INPUT#);             /* Input line needs continuation      */
     2725     7260    2              CALL VPD$GET_INPUT(PARSE_PARAM.CHARPOS);
     2726     7261    2              SELECT(%SUCC#);              /* Successfully parsed a verb!        */
     2727     7262    2              HELP_ERR_CODE.CODE = VP$OFFERHELP; /* Offer him HELP on a '?'      */
     2728     7263    2              HELP_KEYWORD.NAME# = SUBSTR(PARSE_IN_BUF,0);
     2729     7264    2              CALL INDEX(KEYWORD_LEN,' ',HELP_KEYWORD.NAME#);
     2730     7265    2              HELP_KEYWORD.L# = KEYWORD_LEN;
     2731     7266    2              SUCCESS_NODE = '1'B;
     2732     7267    2              SELECT(%PRE#);               /* Before parsing a chunk of text     */
     2733     7268    2              END;
     2734     7269    1           RETURN;
     2735     7270    1   END VPD$U$;
     2736     7271        %EOD;

PL6.E3A0      #029=VPD$U$ File=VPD$UTIL.:E05TSI                                  WED 07/30/97 07:57 Page:701  
--  Include file information  --

   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_SUBS_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$U$.

   Procedure VPD$U$ requires 43 words for executable code.
   Procedure VPD$U$ requires 6 words of local(AUTO) storage.

PL6.E3A0      #029=VPD$U$ File=VPD$UTIL.:E05TSI                                  WED 07/30/97 07:57 Page:702  

 Object Unit name= VPD$U$                                     File name= VPD$UTIL.:E05TOU
 UTS= JUL 30 '97 07:57:13.52 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   DCB   even  none     0      0  M$EI
    2   DCB   even  none     0      0  M$EO
    3   DCB   even  none     0      0  M$EO1
    4   DCB   even  none     0      0  M$ME
    5   DCB   even  none     0      0  M$SI
    6   DCB   even  none     0      0  M$READFILE
    7   DCB   even  none     0      0  M$DO
    8   DCB   even  none     0      0  M$STD1
    9   DCB   even  none     0      0  M$SORT1
   10   Data  even  none     1      1  VPD$U$
   11   Proc  even  none    43     53  VPD$U$
   12  RoData even  none     1      1  VPD$U$

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    11      0   yes            yes      Std        1  VPD$U$
PL6.E3A0      #029=VPD$U$ File=VPD$UTIL.:E05TSI                                  WED 07/30/97 07:57 Page:703  

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       1 VPD$GET_INPUT
                       nStd      0 X66_AUTO_1
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  PARSE_IN_BUF                          SUCCESS_NODE
     HELP_ERR_CODE                         HELP_KEYWORD                          BREAK_LOC
     BREAK_MESSAGE_REPORTER                SPEC_BUF                              IN_RES
     M$EI                                  M$EO                                  M$EO1
     M$ME                                  M$SI                                  M$READFILE
     M$DO                                  M$STD1                                M$SORT1
     B_VECTNIL
PL6.E3A0      #029=VPD$U$ File=VPD$UTIL.:E05TSI                                  WED 07/30/97 07:57 Page:704  


     2704        1        /*T***********************************************************/
     2705        2        /*T*                                                         */
     2706        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2707        4        /*T*                                                         */
     2708        5        /*T***********************************************************/
     2709        6        VPD$U$: PROC(PARSE_PARAM);

      6 11 000000   000000 700200 xent  VPD$U$       TSX0  ! X66_AUTO_1
        11 000001   000006 000001                    ZERO    6,1

     2710        7        /*D* NAME: VPD$U$
     2711        8             CALL: CALL VPD$U$(PARSE_PARAM);
     2712        9                    where PARSE_PARAM is a structure defined by macro PARSE$PARAM.
     2713       10             DESCRIPTION: This procedure is called by X$PARSE for various functions
     2714       11                          and special conditions.
     2715       12        */
     2716       13        %INCLUDE XU_SUBS_C;
     2717      105        %INCLUDE VP_DATA_R;
     2718     7092        %PARSE$PARAM(NAME  = PARSE_PARAM,STCLASS=);
     2719     7173        %PARSE$OUT(NAME = OUT$BLK,STCLASS = BASED);
     2720     7218        %PARSE$SYM(NAME = OUT$SYM,STCLASS = BASED);
     2721     7256    1   DCL KEYWORD_LEN SBIN WORD STATIC;
     2722     7257    1   DCL VPD$GET_INPUT ENTRY(1);
     2723     7258    2           DO SELECT(PARSE_PARAM.TYPE);

   7258 11 000002   200003 470500                    LDP0    @PARSE_PARAM,,AUTO
        11 000003   000000 236100                    LDQ     0,,PR0
        11 000004   000033 772000                    QRL     27
        11 000005   000002 116007                    CMPQ    2,DL
        11 000006   000014 602000 11                 TNC     s:7258+10
        11 000007   000031 600000 11                 TZE     s:7262
        11 000010   000033 736000                    QLS     27
        11 000011   004000 116003                    CMPQ    2048,DU
        11 000012   000052 601000 11                 TNZ     s:7269
        11 000013   000021 710000 11                 TRA     s:7260
        11 000014   000000 236100                    LDQ     0,,PR0
PL6.E3A0      #029=VPD$U$ File=VPD$UTIL.:E05TSI                                  WED 07/30/97 07:57 Page:705  
        11 000015   777000 376003                    ANQ     -512,DU
        11 000016   001000 116003                    CMPQ    512,DU
        11 000017   000052 601000 11                 TNZ     s:7269
        11 000020   000052 710000 11                 TRA     s:7269

     2724     7259    2              SELECT(%INPUT#);             /* Input line needs continuation      */

     2725     7260    2              CALL VPD$GET_INPUT(PARSE_PARAM.CHARPOS);

   7260 11 000021   200003 236100                    LDQ     @PARSE_PARAM,,AUTO
        11 000022   000004 036003                    ADLQ    4,DU
        11 000023   200004 756100                    STQ     @PARSE_PARAM+1,,AUTO
        11 000024   200004 630500                    EPPR0   @PARSE_PARAM+1,,AUTO
        11 000025   000017 631400 xsym               EPPR1   B_VECTNIL+15
        11 000026   000000 701000 xent               TSX1    VPD$GET_INPUT
        11 000027   000000 011000                    NOP     0
        11 000030   000052 710000 11                 TRA     s:7269

     2726     7261    2              SELECT(%SUCC#);              /* Successfully parsed a verb!        */

     2727     7262    2              HELP_ERR_CODE.CODE = VP$OFFERHELP; /* Offer him HELP on a '?'      */

   7262 11 000031   000000 236000 xsym               LDQ     HELP_ERR_CODE
        11 000032   000000 376000 12                 ANQ     0
        11 000033   012720 276007                    ORQ     5584,DL
        11 000034   000000 756000 xsym               STQ     HELP_ERR_CODE

     2728     7263    2              HELP_KEYWORD.NAME# = SUBSTR(PARSE_IN_BUF,0);

   7263 11 000035   040000 100400                    MLR     fill='040'O
        11 000036   000000 000037 xsym               ADSC9   PARSE_IN_BUF             cn=0,n=31
        11 000037   000000 200037 xsym               ADSC9   HELP_KEYWORD             cn=1,n=31

     2729     7264    2              CALL INDEX(KEYWORD_LEN,' ',HELP_KEYWORD.NAME#);

   7264 11 000040   000000 124400                    SCM     mask='000'O
        11 000041   000000 200037 xsym               ADSC9   HELP_KEYWORD             cn=1,n=31
PL6.E3A0      #029=VPD$U$ File=VPD$UTIL.:E05TSI                                  WED 07/30/97 07:57 Page:706  
        11 000042   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
        11 000043   000000 000000 10                 ARG     KEYWORD_LEN

     2730     7265    2              HELP_KEYWORD.L# = KEYWORD_LEN;

   7265 11 000044   000000 236000 10                 LDQ     KEYWORD_LEN
        11 000045   000033 736000                    QLS     27
        11 000046   000000 552040 xsym               STBQ    HELP_KEYWORD,'40'O

     2731     7266    2              SUCCESS_NODE = '1'B;

   7266 11 000047   400000 236003                    LDQ     -131072,DU
        11 000050   000000 756000 xsym               STQ     SUCCESS_NODE
        11 000051   000052 710000 11                 TRA     s:7269

     2732     7267    2              SELECT(%PRE#);               /* Before parsing a chunk of text     */

     2733     7268    2              END;

     2734     7269    1           RETURN;

   7269 11 000052   000000 702200 xent               TSX2  ! X66_ARET
     2735     7270    1   END VPD$U$;
     2736     7271        %EOD;

PL6.E3A0      #029=VPD$U$ File=VPD$UTIL.:E05TSI                                  WED 07/30/97 07:57 Page:707  
--  Include file information  --

   B_MICROPS_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   XS_MACRO_C.:E05TOU  is referenced.
   VP_PERR_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VP_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_SUBS_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VPD$U$.
PL6.E3A0      #029=VPD$U$ File=VPD$UTIL.:E05TSI                                  WED 07/30/97 07:57 Page:708  

 **** Variables and constants ****

  ****  Section 010  Data  VPD$U$

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w SBIN        r     1 KEYWORD_LEN

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @PARSE_PARAM              *0-0-0/w STRC(270)   r     1 PARSE_PARAM

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w EPTR        r     1 BREAK_MESSAGE_REPORTER
     0-0-0/b STRC        r     1 HELP_ERR_CODE              0-0-0/c STRC(288)   r     1 HELP_KEYWORD
     0-0-0/c CHAR(1024)  r     1 PARSE_IN_BUF               0-0-0/b BIT         r     1 SUCCESS_NODE

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w ASTR(153)   r     1 OUT$SYM


   Procedure VPD$U$ requires 43 words for executable code.
   Procedure VPD$U$ requires 6 words of local(AUTO) storage.
PL6.E3A0      #029=VPD$U$ File=VPD$UTIL.:E05TSI                                  WED 07/30/97 07:57 Page:709  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #029=VPD$U$ File=VPD$UTIL.:E05TSI                                  WED 07/30/97 07:57 Page:710  
          MINI XREF LISTING

BREAK_LOC
      5312**DCL      5312--REDEF
DEF_ICB.FID.STRING
      5910**DCL      5911--REDEF
DEV_ICB.FID.STRING
      5796**DCL      5797--REDEF
EI_KEY.KEY
      6008**DCL      6008--REDEF    6008--REDEF    6008--REDEF
EO_OCB.TYPE
      5508**DCL      5509--REDEF
FPT_CLOSE_EI.SN_
      6849**DCL      6849--REDEF
FPT_CLOSE_EI.UTL_
      6850**DCL      6850--REDEF
FPT_CLOSE_EI.V.EXPIRE#
      6864**DCL      6864--REDEF
FPT_CLOSE_EI.V.TYPE#
      6862**DCL      6862--REDEF
FPT_CLOSE_EI.V.XTNSIZE#
      6859**DCL      6859--REDEF    6861--REDEF
FPT_CLOSE_PTL.SN_
      6975**DCL      6975--REDEF
FPT_CLOSE_PTL.UTL_
      6976**DCL      6976--REDEF
FPT_CLOSE_PTL.V.EXPIRE#
      6990**DCL      6990--REDEF
FPT_CLOSE_PTL.V.TYPE#
      6988**DCL      6988--REDEF
FPT_CLOSE_PTL.V.XTNSIZE#
      6985**DCL      6985--REDEF    6987--REDEF
FPT_CLOSE_READ.SN_
      6891**DCL      6891--REDEF
PL6.E3A0      #029=VPD$U$ File=VPD$UTIL.:E05TSI                                  WED 07/30/97 07:57 Page:711  
FPT_CLOSE_READ.UTL_
      6892**DCL      6892--REDEF
FPT_CLOSE_READ.V.EXPIRE#
      6906**DCL      6906--REDEF
FPT_CLOSE_READ.V.TYPE#
      6904**DCL      6904--REDEF
FPT_CLOSE_READ.V.XTNSIZE#
      6901**DCL      6901--REDEF    6903--REDEF
FPT_CLOSE_SI.SN_
      7059**DCL      7059--REDEF
FPT_CLOSE_SI.UTL_
      7060**DCL      7060--REDEF
FPT_CLOSE_SI.V.EXPIRE#
      7074**DCL      7074--REDEF
FPT_CLOSE_SI.V.TYPE#
      7072**DCL      7072--REDEF
FPT_CLOSE_SI.V.XTNSIZE#
      7069**DCL      7069--REDEF    7071--REDEF
FPT_CLOSE_STD.SN_
      7017**DCL      7017--REDEF
FPT_CLOSE_STD.UTL_
      7018**DCL      7018--REDEF
FPT_CLOSE_STD.V.EXPIRE#
      7032**DCL      7032--REDEF
FPT_CLOSE_STD.V.TYPE#
      7030**DCL      7030--REDEF
FPT_CLOSE_STD.V.XTNSIZE#
      7027**DCL      7027--REDEF    7029--REDEF
FPT_CLSEI_FT.SN_
      6933**DCL      6933--REDEF
FPT_CLSEI_FT.UTL_
      6934**DCL      6934--REDEF
FPT_CLSEI_FT.V.EXPIRE#
      6948**DCL      6948--REDEF
FPT_CLSEI_FT.V.TYPE#
      6946**DCL      6946--REDEF
PL6.E3A0      #029=VPD$U$ File=VPD$UTIL.:E05TSI                                  WED 07/30/97 07:57 Page:712  
FPT_CLSEI_FT.V.XTNSIZE#
      6943**DCL      6943--REDEF    6945--REDEF
FPT_OPEN_EI.ACSVEH_
      6504**DCL      6505--REDEF
FPT_OPEN_EI.ALTKEYS_
      6510**DCL      6511--REDEF    6511--REDEF
FPT_OPEN_EI.HDR_
      6509**DCL      6510--REDEF
FPT_OPEN_EI.TAB_
      6508**DCL      6509--REDEF
FPT_OPEN_EI.UHL_
      6502**DCL      6503--REDEF    6503--REDEF
FPT_OPEN_EI.V.FSN#
      6542**DCL      6542--REDEF    6542--REDEF
FPT_OPEN_EI.WSN_
      6508**DCL      6508--REDEF
FPT_OPEN_EI_SAVE.ACSVEH_
      6613**DCL      6614--REDEF
FPT_OPEN_EI_SAVE.ALTKEYS_
      6619**DCL      6620--REDEF    6620--REDEF
FPT_OPEN_EI_SAVE.HDR_
      6618**DCL      6619--REDEF
FPT_OPEN_EI_SAVE.TAB_
      6617**DCL      6618--REDEF
FPT_OPEN_EI_SAVE.UHL_
      6611**DCL      6612--REDEF    6612--REDEF
FPT_OPEN_EI_SAVE.V.FSN#
      6651**DCL      6651--REDEF    6651--REDEF
FPT_OPEN_EI_SAVE.WSN_
      6617**DCL      6617--REDEF
FPT_OPEN_OUT.ACSVEH_
      6395**DCL      6396--REDEF
FPT_OPEN_OUT.ALTKEYS_
      6401**DCL      6402--REDEF    6402--REDEF
FPT_OPEN_OUT.HDR_
      6400**DCL      6401--REDEF
PL6.E3A0      #029=VPD$U$ File=VPD$UTIL.:E05TSI                                  WED 07/30/97 07:57 Page:713  
FPT_OPEN_OUT.TAB_
      6399**DCL      6400--REDEF
FPT_OPEN_OUT.UHL_
      6393**DCL      6394--REDEF    6394--REDEF
FPT_OPEN_OUT.V.FSN#
      6433**DCL      6433--REDEF    6433--REDEF
FPT_OPEN_OUT.WSN_
      6399**DCL      6399--REDEF
FPT_OPEN_OUT_SAVE.ACSVEH_
      6286**DCL      6287--REDEF
FPT_OPEN_OUT_SAVE.ALTKEYS_
      6292**DCL      6293--REDEF    6293--REDEF
FPT_OPEN_OUT_SAVE.HDR_
      6291**DCL      6292--REDEF
FPT_OPEN_OUT_SAVE.TAB_
      6290**DCL      6291--REDEF
FPT_OPEN_OUT_SAVE.UHL_
      6284**DCL      6285--REDEF    6285--REDEF
FPT_OPEN_OUT_SAVE.V.FSN#
      6324**DCL      6324--REDEF    6324--REDEF
FPT_OPEN_OUT_SAVE.WSN_
      6290**DCL      6290--REDEF
FPT_READ_STD.STATION_
      6714**DCL      6715--REDEF
FPT_READ_STD.V.DVBYTE.REREAD#
      6726**DCL      6726--REDEF
FPT_READ_STD.V.INDX#
      6724**DCL      6724--REDEF
FPT_READ_UC.STATION_
      6675**DCL      6676--REDEF
FPT_READ_UC.V.DVBYTE.REREAD#
      6687**DCL      6687--REDEF
FPT_READ_UC.V.INDX#
      6685**DCL      6685--REDEF
FPT_WRITE_ME.STATION_
      6783**DCL      6783--REDEF
PL6.E3A0      #029=VPD$U$ File=VPD$UTIL.:E05TSI                                  WED 07/30/97 07:57 Page:714  
FPT_WRITE_ME.V.DVBYTE.VFC#
      6790**DCL      6790--REDEF
FPT_WRITE_OUT.STATION_
      6814**DCL      6814--REDEF
FPT_WRITE_OUT.V.DVBYTE.VFC#
      6821**DCL      6821--REDEF
FPT_WRITE_UC.STATION_
      6752**DCL      6752--REDEF
FPT_WRITE_UC.V.DVBYTE.VFC#
      6759**DCL      6759--REDEF
FROM_SN.SN
      5658**DCL      5659--REDEF
GETCMD.OUT$
      4865**DCL      4871--REDEF
HELP_ERR_CODE.CODE
      5279**DCL      7262<<ASSIGN
HELP_KEYWORD.L#
      5305**DCL      7265<<ASSIGN
HELP_KEYWORD.NAME#
      5305**DCL      7263<<ASSIGN   7264>>CALLBLT
ICB.FID.STRING
      5682**DCL      5683--REDEF
IFSFA_PARAM.EOMCHAR#
      6037**DCL      6038--REDEF
IFSFA_PARAM.SIG1
      6031**DCL      6031--REDEF
IFSFA_PARAM.SIG2
      6031**DCL      6032--REDEF
IN_RES
      5604**DCL      5604--REDEF
IN_SN.SN
      5620**DCL      5621--REDEF
KEYWORD_LEN
      7256**DCL      7264<<CALLBLT  7265>>ASSIGN
OCB.TYPE
      5366**DCL      5367--REDEF
PL6.E3A0      #029=VPD$U$ File=VPD$UTIL.:E05TSI                                  WED 07/30/97 07:57 Page:715  
OFSFA_PARAM.EOMCHAR#
      6067**DCL      6068--REDEF
OFSFA_PARAM.SIG1
      6061**DCL      6061--REDEF
OFSFA_PARAM.SIG2
      6061**DCL      6062--REDEF
OUT$SYM.COUNT
      7248**DCL      7251--IMP-SIZ
OUT_SN.SN
      5638**DCL      5639--REDEF
PARSE_IN_BUF
      4646**DCL      7263>>ASSIGN
PARSE_PARAM
      7111**DCL         6--PROC
PARSE_PARAM.CHARPOS
      7149**DCL      7260<>CALL
PARSE_PARAM.TYPE
      7112**DCL      7258>>DOSELCT
SPEC_BUF
      5316**DCL      5316--REDEF
SUCCESS_NODE
      4647**DCL      7266<<ASSIGN
VPD$GET_INPUT
      7257**DCL-ENT  7260--CALL

PL6.E3A0      #030=VPD$WILD_COMPARE File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:58 Page:716  
     2737        1        /*T***********************************************************/
     2738        2        /*T*                                                         */
     2739        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2740        4        /*T*                                                         */
     2741        5        /*T***********************************************************/
     2742        6        VPD$WILD_COMPARE: PROC(PATTERN,TRIAL) ALTRET;
     2743        7        /*D* NAME: VPD$WILD_COMPARE
     2744        8             CALL: CALL VPD$WILD_COMPARE(PATTERN,TRIAL)
     2745        9             DESCRIPTION: This procedure uses X$WILDCMP to compare the PATTERN
     2746       10                          string with the TRIAL string.  It ALTRETURNs if
     2747       11                          X$WILDCMP ALTRETURNs.
     2748       12
     2749       13        */
     2750       14        %INCLUDE VP_MACRO_C;
     2751      528        %INCLUDE XUW_MACRO_C;
     2752      663        %INCLUDE XU_PERR_C;
     2753      854        %XUW_WILDCARD;
     2754      950        %XUW_ENTRIES;
     2755      962    1   DCL 1 PATTERN,                          /* TEXTC of wildcard template         */
     2756      963    1         2 LEN UBIN(9) UNAL,
     2757      964    1         2 TEXT CHAR(31) UNAL;
     2758      965    1   DCL 1 TRIAL,                            /* TEXTC of TRIAL against wildcard    */
     2759      966    1         2 LEN UBIN(9) UNAL,
     2760      967    1         2 TEXT CHAR(31) UNAL;
     2761      968        /**/
     2762      969    1           XUW_WILDCARD.PATTERN_ = VECTOR(SUBSTR(PATTERN.TEXT,0,PATTERN.LEN));
     2763      970    1           XUW_WILDCARD.INPUT_ = VECTOR(SUBSTR(TRIAL.TEXT,0,TRIAL.LEN));
     2764      971    1           CALL X$WILDCMP(XUW_WILDCARD)
     2765      972    2            WHENALTRETURN DO;
     2766      973    2               ALTRETURN;
     2767      974    2               END;
     2768      975    1           RETURN;
     2769      976    1   END VPD$WILD_COMPARE;

PL6.E3A0      #030=VPD$WILD_COMPARE File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:58 Page:717  
--  Include file information  --

   XU_PERR_C.:E05TOU  is referenced.
   XUW_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VPD$WILD_COMPARE.

   Procedure VPD$WILD_COMPARE requires 31 words for executable code.
   Procedure VPD$WILD_COMPARE requires 8 words of local(AUTO) storage.

    No errors detected in file VPD$UTIL.:E05TSI    .

PL6.E3A0      #030=VPD$WILD_COMPARE File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:58 Page:718  

 Object Unit name= VPD$WILD_COMPARE                           File name= VPD$UTIL.:E05TOU
 UTS= JUL 30 '97 07:58:51.88 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Data  even  none    12     14  VPD$WILD_COMPARE
    1   Proc  even  none    31     37  VPD$WILD_COMPARE
    2  RoData even  none     1      1  VPD$WILD_COMPARE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes    yes     yes      Std        2  VPD$WILD_COMPARE

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       1 X$WILDCMP
                       nStd      0 X66_AUTO_2
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     B_VECTNIL
PL6.E3A0      #030=VPD$WILD_COMPARE File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:58 Page:719  

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #030=VPD$WILD_COMPARE File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:58 Page:720  


     2737        1        /*T***********************************************************/
     2738        2        /*T*                                                         */
     2739        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2740        4        /*T*                                                         */
     2741        5        /*T***********************************************************/
     2742        6        VPD$WILD_COMPARE: PROC(PATTERN,TRIAL) ALTRET;

      6  1 000000   000000 700200 xent  VPD$WILD_CO* TSX0  ! X66_AUTO_2
         1 000001   000010 000002                    ZERO    8,2

     2743        7        /*D* NAME: VPD$WILD_COMPARE
     2744        8             CALL: CALL VPD$WILD_COMPARE(PATTERN,TRIAL)
     2745        9             DESCRIPTION: This procedure uses X$WILDCMP to compare the PATTERN
     2746       10                          string with the TRIAL string.  It ALTRETURNs if
     2747       11                          X$WILDCMP ALTRETURNs.
     2748       12
     2749       13        */
     2750       14        %INCLUDE VP_MACRO_C;
     2751      528        %INCLUDE XUW_MACRO_C;
     2752      663        %INCLUDE XU_PERR_C;
     2753      854        %XUW_WILDCARD;
     2754      950        %XUW_ENTRIES;
     2755      962    1   DCL 1 PATTERN,                          /* TEXTC of wildcard template         */
     2756      963    1         2 LEN UBIN(9) UNAL,
     2757      964    1         2 TEXT CHAR(31) UNAL;
     2758      965    1   DCL 1 TRIAL,                            /* TEXTC of TRIAL against wildcard    */
     2759      966    1         2 LEN UBIN(9) UNAL,
     2760      967    1         2 TEXT CHAR(31) UNAL;
     2761      968        /**/
     2762      969    1           XUW_WILDCARD.PATTERN_ = VECTOR(SUBSTR(PATTERN.TEXT,0,PATTERN.LEN));

    969  1 000002   200003 470500                    LDP0    @PATTERN,,AUTO
         1 000003   000100 101500                    MRL     fill='000'O
         1 000004   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
         1 000005   200006 000002                    ADSC9   @TRIAL+2,,AUTO           cn=0,n=2
         1 000006   200006 220100                    LDX0    @TRIAL+2,,AUTO
PL6.E3A0      #030=VPD$WILD_COMPARE File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:58 Page:721  
         1 000007   000000 635010                    EAA     0,X0
         1 000010   000002 771000                    ARL     2
         1 000011   000140 135007                    SBLA    96,DL
         1 000012   200003 236100                    LDQ     @PATTERN,,AUTO
         1 000013   200000 036007                    ADLQ    65536,DL
         1 000014   000000 757000 0                  STAQ    XUW_WILDCARD

     2763      970    1           XUW_WILDCARD.INPUT_ = VECTOR(SUBSTR(TRIAL.TEXT,0,TRIAL.LEN));

    970  1 000015   200004 471500                    LDP1    @TRIAL,,AUTO
         1 000016   000100 101500                    MRL     fill='000'O
         1 000017   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         1 000020   200006 000002                    ADSC9   @TRIAL+2,,AUTO           cn=0,n=2
         1 000021   200006 220100                    LDX0    @TRIAL+2,,AUTO
         1 000022   000000 635010                    EAA     0,X0
         1 000023   000002 771000                    ARL     2
         1 000024   000140 135007                    SBLA    96,DL
         1 000025   200004 236100                    LDQ     @TRIAL,,AUTO
         1 000026   200000 036007                    ADLQ    65536,DL
         1 000027   000002 757000 0                  STAQ    XUW_WILDCARD+2

     2764      971    1           CALL X$WILDCMP(XUW_WILDCARD)

    971  1 000030   000000 630400 2                  EPPR0   0
         1 000031   000017 631400 xsym               EPPR1   B_VECTNIL+15
         1 000032   000000 701000 xent               TSX1    X$WILDCMP
         1 000033   000035 702000 1                  TSX2    s:973
         1 000034   000036 710000 1                  TRA     s:975

     2765      972    2            WHENALTRETURN DO;

     2766      973    2               ALTRETURN;

    973  1 000035   000000 702200 xent               TSX2  ! X66_AALT

     2767      974    2               END;
     2768      975    1           RETURN;
PL6.E3A0      #030=VPD$WILD_COMPARE File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:58 Page:722  

    975  1 000036   000000 702200 xent               TSX2  ! X66_ARET
     2769      976    1   END VPD$WILD_COMPARE;

PL6.E3A0      #030=VPD$WILD_COMPARE File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:58 Page:723  
--  Include file information  --

   XU_PERR_C.:E05TOU  is referenced.
   XUW_MACRO_C.:E05TOU  is referenced.
   VP_MACRO_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure VPD$WILD_COMPARE.
PL6.E3A0      #030=VPD$WILD_COMPARE File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:58 Page:724  

 **** Variables and constants ****

  ****  Section 000  Data  VPD$WILD_COMPARE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(432)   r     1 XUW_WILDCARD

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @PATTERN                   4-0-0/w PTR         r     1 @TRIAL
    *0-0-0/c STRC(288)   r     1 PATTERN                   *0-0-0/c STRC(288)   r     1 TRIAL


   Procedure VPD$WILD_COMPARE requires 31 words for executable code.
   Procedure VPD$WILD_COMPARE requires 8 words of local(AUTO) storage.

    No errors detected in file VPD$UTIL.:E05TSI    .
PL6.E3A0      #030=VPD$WILD_COMPARE File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:58 Page:725  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #030=VPD$WILD_COMPARE File=VPD$UTIL.:E05TSI                        WED 07/30/97 07:58 Page:726  
          MINI XREF LISTING

PATTERN
       962**DCL         6--PROC
PATTERN.LEN
       963**DCL       969>>ASSIGN
PATTERN.TEXT
       964**DCL       969--ASSIGN
TRIAL
       965**DCL         6--PROC
TRIAL.LEN
       966**DCL       970>>ASSIGN
TRIAL.TEXT
       967**DCL       970--ASSIGN
X$WILDCMP
       953**DCL-ENT   971--CALL
XUW_WILDCARD
       916**DCL       971<>CALL
XUW_WILDCARD.INPUT_
       922**DCL       970<<ASSIGN
XUW_WILDCARD.PATTERN_
       917**DCL       969<<ASSIGN
