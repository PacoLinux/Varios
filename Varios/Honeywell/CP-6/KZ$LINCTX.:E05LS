

15:00 JUL 28 '97 KZ$LINCTX.:E05SI                                          1    
    1      /*M* KZ$LINCTX - Line context for SYNC lines */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /*X* */
    8
    9      /*F*  NAME:         KZ$LINCTX
   10            PURPOSE:      Line-specific information for SYNC lines
   11      */
   12
   13      %MACRO KZ$LINCTX(NAME=KZ$LINCTX,STCLASS=BASED);
   14      %LSET LISTDIR='0'B;
   15      %LSET LISTEXP='1'B;
   16      %LSET LISTCOM='0'B;
   17      %LSET LISTSUB='1'B;
   18      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
   19      %IF (SUBSTR(STR,0,6)='STATIC')OR(SUBSTR(STR,0,8)='CONSTANT')OR(SUBSTR(STR,0,3)='EXT');
   20      %LSET INIT=CHARTEXT('INIT');
   21      %ELSE;
   22      %LSET INIT=CHARTEXT('/*');
   23      %ENDIF;
   24      DCL 1 NAME STCLASS WALIGNED,
   25
   26
   27            2 CTRHD$ PTR CALIGNED %INIT(ADDR(NIL))%CHARTEXT('/**/'),
   28                                    /* CTRHD$ - Ptr to head of controller chain     */
   29
   30            2 CHN$ PTR CALIGNED %INIT(ADDR(NIL))%CHARTEXT('/**/'),
   31                                              /* CHN$ - Ptr to channel table        */
   32
   33            %B$TERMINAL_ID (FPTN=LINID,LVL=2,LAST=",");
   34                                              /* PID - Path-id for line             */
   35
   36            2 * UBIN BYTE CALIGNED %INIT(0)%CHARTEXT('/**/'),
   37
15:00 JUL 28 '97 KZ$LINCTX.:E05SI                                          2    
   38
   39            2 PRMCTBTYP UBIN BYTE CALIGNED %INIT(0)%CHARTEXT('/**/'),
   40                                              /* PRMCTBTYP - Type of PRM clock      */
   41
   42            2 PTHSTT UBIN (%(18-BITBIN(MODE_FEP)*2)) CALIGNED %INIT(0)%CHARTEXT('/**/'),
   43                                              /* PTHSTT - Path state                */
   44
   45            2 LINSTT UBIN (%(18-BITBIN(MODE_FEP)*2)) CALIGNED %INIT(0)%CHARTEXT('/**/'),
   46                                              /* LINSTT - Line state                */
   47
   48            2 STBL$ PTR CALIGNED %INIT(ADDR(NIL))%CHARTEXT('/**/'),
   49                                              /* STBL$ - Pointer to state table     */
   50
   51            2 MAP$ PTR CALIGNED %INIT(ADDR(NIL))%CHARTEXT('/**/'),
   52                                              /* MAP$ - Pointer to state table map  */
   53
   54            2 HIST CALIGNED,
   55                               /* HIST - State/event history arrays for debugging   */
   56
   57              3 X UBIN (%(18-BITBIN(MODE_FEP)*2)) CALIGNED %INIT(0)%CHARTEXT('/**/'),
   58                                         /* X - State/event history array index     */
   59
   60              3 EVT(0:7) UBIN BYTE CALIGNED %INIT(0,0,0,0,0,0,0,0)%CHARTEXT('/**/'),
   61                                              /* EVT - Event history array          */
   62              3 STT(0:7) UBIN BYTE CALIGNED %INIT(0,0,0,0,0,0,0,0)%CHARTEXT('/**/'),
   63                                              /* STT - State history array          */
   64
   65
   66              3 ACT(0:7) UBIN BYTE CALIGNED %INIT(0,0,0,0,0,0,0,0)%CHARTEXT('/**/'),
   67                                              /*ACT - Action history array          */
   68              3 ORD(0:7) UBIN BYTE CALIGNED %INIT(0,0,0,0,0,0,0,0)%CHARTEXT('/**/'),
   69                                              /* ORD - Order sent to MLCP as a
   70                                                       result of "event" */
   71            2 TIMER CALIGNED,
   72                                              /* TIMER - Timer values               */
   73
   74              3 INP UBIN (%(36-BITBIN(MODE_FEP)*4)) CALIGNED %INIT(0)%CHARTEXT('/**/'),
15:00 JUL 28 '97 KZ$LINCTX.:E05SI                                          3    
   75                                              /* INP - Time at start input          */
   76
   77              3 OTP UBIN (%(36-BITBIN(MODE_FEP)*4)) CALIGNED %INIT(0)%CHARTEXT('/**/'),
   78                                              /* OTP - Time at start output         */
   79
   80              3 POL UBIN (%(36-BITBIN(MODE_FEP)*4)) CALIGNED %INIT(0)%CHARTEXT('/**/'),
   81                     /* POL - Time at termination of "poll unknown con-
   82                              troller" sequence.  For "interval" compu-
   83                              tation. */
   84
   85              %IF NOT (MODE_FEP);
   86              3 * BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
   87              %ENDIF;
   88              3 INPVLD BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
   89                                    /* INPVLD - KZ$LINCTX.TIMER.INP time is valid   */
   90
   91              3 OTPVLD BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
   92                                    /* OTPVLD - KZ$LINCTX.TIMER.OTP time is valid   */
   93
   94              3 POLVLD BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
   95                                    /* POLVLD - KZ$LINCTX.TIMER.POL time is valid   */
   96              3 * BIT(5) UNAL %INIT('0'B)%CHARTEXT('/**/'),
   97              3 * UBIN BYTE %INIT(0)%CHARTEXT('/**/') CALIGNED,
   98
   99            2 CTB CALIGNED,
  100                     /* CTB - Clock timer block pointers for dispatched
  101                              events. */
  102
  103              3 ACK$ PTR CALIGNED %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  104                               /* ACK$ - CTB pointer for "deferred ACK" routine.    */
  105
  106              3 ENQ$ PTR CALIGNED %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  107                               /* ENQ$ - CTB pointer for "deferred ENQ" routine.    */
  108
  109              3 NAK$ PTR CALIGNED %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  110                               /* NAK$ - CTB pointer for "deferred NAK" routine.    */
  111
15:00 JUL 28 '97 KZ$LINCTX.:E05SI                                          4    
  112              3 PRM$ PTR CALIGNED %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  113                               /* PRM$ - CTB pointer for permanent timeout clock.   */
  114
  115            2 CHAN UBIN (%(18-BITBIN(MODE_FEP)*2)) CALIGNED %INIT(0)%CHARTEXT('/**/'),
  116                                              /* CHAN - Channel number              */
  117
  118            2 FLAGS CALIGNED,
  119
  120              %IF NOT (MODE_FEP);
  121              3 * BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  122              %ENDIF;
  123              3 NEWSTATE BIT(1) %INIT('1'B)%CHARTEXT('/**/'),
  124                                    /* NEWSTATE - Set if path state is to change    */
  125
  126              3 CLKDISC BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
  127                     /* CLKDISC - Set if the clock services routine is to
  128                                  send disconnect request.  Flag is set if
  129                                  the line manager can't reset his timeout
  130                                  clock when disconnecting. */
  131
  132              3 NEWCTR BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
  133                     /* NEWCTR - Set from time poll to an inactive controller
  134                                 is begun until either it times out or EOT
  135                                 is received. */
  136
  137              3 DSC BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
  138                                         /* DSC - Set if line is being disconnected */
  139
  140              3 RCVWAB BIT(1) %INIT('0'B)%CHARTEXT('/**/') UNAL,
  141                     /* RCVWAB - Set if line has received a "wait-a-bit"
  142                                 from the remote.  Used by HASP only. */
  143
  144              3 BCB_INIT BIT(1) %INIT('0'B)%CHARTEXT('/**/') UNAL,
  145                     /* BCB_INIT - Set when CP6 sends a "set sequencing"
  146                                   block control byte to the remote.
  147                                   Used by HASP only. */
  148
15:00 JUL 28 '97 KZ$LINCTX.:E05SI                                          5    
  149              3 DFRINP BIT(1) %INIT('0'B)%CHARTEXT('/**/') UNAL,
  150                     /* DFRINP - Set when the input complete level runs
  151                                 before output complete level runs.  When
  152                                 this bit is set, the output complete level
  153                                 must perform the task that the input
  154                                 complete would normally perform.        */
  155
  156              3 RPTEOT BIT(1) %INIT('1'B)%CHARTEXT('/**/'),
  157                     /* RPTEOT - Set if the output complete interrupt
  158                                 handler is to call the line driver with
  159                                 event %KZ#LIN_EVENT_EOTCMP.  The driver
  160                                 sets this bit whenever an EOT is sent
  161                                 and resets the bit after EOTCMP event
  162                                 has been processed.                     */
  163
  164              %IF NOT (MODE_FEP);
  165              3 * BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  166              %ENDIF;
  167              3 FIRST BIT(1) %INIT('1'B)%CHARTEXT('/**/'),
  168                     /* FIRST - Set when a block terminated in ETX is
  169                                received.  When the next block is
  170                                received, the bit is examined and if
  171                                set "first block" is reported to the
  172                                device handler.                          */
  173
  174              3 SIGNON BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
  175
  176                     /* SIGNON - Set when a signon block is received or if
  177                                 AUTOLOG line.                           */
  178
  179              3 SETCLK BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
  180                     /* SETCLK - Set if KZO$ORDERS and KZP$OTPCMP are
  181                        to set clocks */
  182
  183              3 CTRINITDONE BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
  184                     /* CTRINITDONE - For 3270 lines, set when one pass
  185                        has been made thru the controller list to determine
15:00 JUL 28 '97 KZ$LINCTX.:E05SI                                          6    
  186                        which are active. */
  187
  188              3 SUBDSC BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
  189
  190                               /* SUBDSC - Set when sub-devices begin disconnect.   */
  191
  192              3 SND BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
  193
  194                     /* SND - Set when the RBT device manager has a send
  195                              operation to perform and protocol type is
  196                              2780 or 3780.  When the line terminates
  197                              it's current operation, SND is examined
  198                              and if set a send operation is initiated. */
  199
  200              3 INT BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
  201              3 RJCT BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
  202                     /* RJCT - Set when VDH reports a device logon reject for
  203                              an RBT device.  Causes line disconnect.    */
  204
  205
  206            2 INHLVL UBIN (%(18-BITBIN(MODE_FEP)*2)) CALIGNED %INIT(0)%CHARTEXT('/**/'),
  207                          /* INTLVL - Contains the Inhibit Interrupt Level number   */
  208
  209            2 RCVFCS BIT (%(18-BITBIN(MODE_FEP)*2)) CALIGNED %INIT('0'B)%CHARTEXT('/**/'),
  210                     /* RCVFCS - Contains the latest function control
  211                                 sequence (susbits/wait-a-bit) received
  212                                 from the remote.  Used by HASP only. */
  213
  214            2 SNDFCS BIT (%(18-BITBIN(MODE_FEP)*2)) CALIGNED %INIT('0'B)%CHARTEXT('/**/'),
  215                     /* SNDFCS - Contains the last function control
  216                                 sequence sent by CP6 to the remote.
  217                                 Used by HASP only. */
  218
  219            2 DSCRSN UBIN (%(18-BITBIN(MODE_FEP)*2)) CALIGNED %INIT(0)%CHARTEXT('/**/'),
  220                     /* DSCRSN - Disconnect reason.  Codes are the
  221                                 GG#MSG_DSCRQS_RSN_? equs.  Contents are
  222                                 valid only when KZ$LINCTX.FLAGS.DSC is
15:00 JUL 28 '97 KZ$LINCTX.:E05SI                                          7    
  223                                 set. */
  224
  225            2 RTRCNT UBIN (%(18-BITBIN(MODE_FEP)*2)) CALIGNED %INIT(0)%CHARTEXT('/**/'),
  226                     /* RTRCNT - Retry count.  Cell is incremented once
  227                                 after each operation failure.  When the
  228                                 value goes higher than RETRYS, the line
  229                                 is forced to disconnect.  When an
  230                                 operation completes successfully, the
  231                                 cell is cleared. */
  232
  233            2 PRO CALIGNED,
  234
  235              3 PROTYP UBIN (%(18-BITBIN(MODE_FEP)*2)) CALIGNED %INIT(0)%CHARTEXT('/**/'),
  236                                    /* PROTYP - Protocol type.  See KLPT_?# equs
  237                                                in KL_SUPER_C. */
  238
  239              3 BLKRECS UBIN (%(18-BITBIN(MODE_FEP)*2)) CALIGNED %INIT(255)%CHARTEXT('/**/'),
  240                     /* BLKRECS - Maximum legal number of records per block.
  241                                  Nonzero value is limit.  Zero value means
  242                                  whatever fits. */
  243
  244              3 BLKBYTES UBIN (%(18-BITBIN(MODE_FEP)*2)) CALIGNED %INIT(0)%CHARTEXT('/**/'),
  245                     /* BLKBYTES - Maximum legal number of bytes which may
  246                                   be sent in one block.  Zero value is
  247                                   illegal. */
  248
  249              3 RETRYS UBIN (%(18-BITBIN(MODE_FEP)*2)) CALIGNED %INIT(25)%CHARTEXT('/**/'),
  250                     /* RETRYS - Maximum legal number of retries permitted
  251                                 before line disconnect is forced.  Zero value
  252                                 is infinite retry count. */
  253
  254              3 DELAYS UBIN (%(18-BITBIN(MODE_FEP)*2)) CALIGNED %INIT(15)%CHARTEXT('/**/'),
  255                     /* DELAYS - Number of delay pads to send preceding
  256                                 and following a transmission block. */
  257
  258              3 INTERVAL UBIN (%(18-BITBIN(MODE_FEP)*2)) CALIGNED %INIT(10)%CHARTEXT('/**/'),
  259                                              /* INTERVAL - ?                       */
15:00 JUL 28 '97 KZ$LINCTX.:E05SI                                          8    
  260
  261              3 COMPRESS UBIN (%(18-BITBIN(MODE_FEP)*2)) CALIGNED %INIT(2)%CHARTEXT('/**/'),
  262                  /* COMPRESS - Compression algorithm:
  263                        %KLCO_NO# (0) = No compression
  264                        %KLCO_YES# (1) = Compress blanks and identical chars
  265                        %KLCO_LINE# (2) = Based on line speed
  266                        %KLCO_BLANKS# (3) =  Compress blanks only */
  267
  268              3 BLKRFPS UBIN BYTE %INIT(0)%CHARTEXT('/**/') CALIGNED,
  269                     /* BLKRFPS - Number of request function permission
  270                                  records which are legal in a single
  271                                  transmission block.  Used by HASP only.
  272                                  Zero means any number.  Nonzero is
  273                                  count. */
  274
  275              3 BLKGFPS UBIN BYTE %INIT(0)%CHARTEXT('/**/') CALIGNED,
  276                     /* BLKGFPS - Number of grant function permission
  277                                  records which may be send in a single
  278                                  transmission block.  Used by HASP only.
  279                                  Zero means any number.  Nonzero is
  280                                  count. */
  281
  282              3 EMCHR BIT (%(9-BITBIN(MODE_FEP))) %INIT('19'X)%CHARTEXT('/**/') CALIGNED,
  283                     /* EMCHR - EM character for 2780 I/O.
  284                                Default is '19'X. */
  285
  286              3 IRSCHR BIT (%(9-BITBIN(MODE_FEP))) %INIT('1E'X)%CHARTEXT('/**/') CALIGNED,
  287                     /* IRSCHR - IRS character for 3780 I/O.
  288                                 Default is '1E'X. */
  289
  290              3 RMTSS$ PTR CALIGNED %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  291                     /* RMTSS$ - Pointer to remote signon string when line is
  292                                 slave. */
  293
  294              3 PRONAME CALIGNED,
  295
  296                4 SIZE UBIN BYTE %INIT(0)%CHARTEXT('/**/') UNAL,
15:00 JUL 28 '97 KZ$LINCTX.:E05SI                                          9    
  297                                         /* SIZE - Size of profile name in bytes    */
  298
  299                4 TEXT CHAR(11) %INIT(' ')%CHARTEXT('/**/') UNAL,
  300                                              /* TEXT - ASCII profile name text     */
  301
  302              %IF NOT (MODE_FEP);
  303              3 * BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  304              %ENDIF;
  305              3 SLAVE BIT(1) %INIT('0'B)%CHARTEXT('/**/') UNAL,
  306                     /* SLAVE - Set if line is to "speak" slave flavor of
  307                                protocol. */
  308
  309              3 MULSTRM BIT(1) %INIT('1'B)%CHARTEXT('/**/') UNAL,
  310                     /* MULSTRM - Set if full HASP multileaving is legal for
  311                                  the line (provided that PROTYP=HASP). */
  312
  313              3 ACK0_UNSUSP BIT(1) %INIT('0'B)%CHARTEXT('/**/') UNAL,
  314                     /* ACK0_UNSUSP - Set if ACK0 undoes device suspension.
  315                                      Valid only for HASP workstations. */
  316
  317              3 ACK0_UNWABS BIT(1) %INIT('1'B)%CHARTEXT('/**/') UNAL,
  318                     /* ACK0_UNWABS - Set if ACK0 undoes "wait-a-bit".
  319                                      Valid only for HASP workstations. */
  320
  321              3 RFP_ON_SUSP_OK BIT(1) %INIT('1'B)%CHARTEXT('/**/') UNAL,
  322                     /* RFP_ON_SUSP_OK - Set if it it legal to send a
  323                                         request function permission for an
  324                                         inactive stream (closed) when that
  325                                         streams susbit is reset. */
  326
  327              3 SUSP_WAB_IGN BIT(1) %INIT('0'B)%CHARTEXT('/**/') UNAL,
  328                     /* SUSP_WAB_IGN - Set if susbits in a "wait-a-bit"
  329                                       block are meaningless. */
  330
  331              3 TRSPCY BIT(1) %INIT('0'B)%CHARTEXT('/**/') UNAL,
  332                     /* TRSPCY - Set when transparency feature is installed
  333                                 on a remote 2780/3780. */
15:00 JUL 28 '97 KZ$LINCTX.:E05SI                                          10   
  334
  335              3 LSTRECCTN BIT(1) %INIT('0'B)%CHARTEXT('/**/') UNAL,
  336                     /* LSTRECCTN - Set if records ending in <ETB> but not <IRS ETB>
  337                                    from 2780/3780 are "broken," and should be "cut"
  338                                    from their blocks and "pasted" onto the first
  339                                    record of the next block. */
  340
  341              %IF NOT (MODE_FEP);
  342              3 * BIT(1) %INIT('0'B)%CHARTEXT('/**/') UNAL,
  343              %ENDIF;
  344
  345              3 ERRDUPBLK BIT(1) %INIT('1'B)%CHARTEXT('/**/') UNAL,
  346                     /* ERRDUPBLK - Set if the RBT can handle duplicate blocks...
  347                                    if not, don't send them (dangerous). */
  348
  349              3 RRR BIT(1) %INIT('1'B)%CHARTEXT('/**/') UNAL,
  350                     /* RRR - Set if we should wait until the remote end ACKs
  351                              before acknowledging OTPMRKs. */
  352
  353              3 SLC BIT(1) %INIT('1'B)%CHARTEXT('/**/') UNAL,
  354                     /* SLC - Set if 2780/3780 blocks may contain device selection
  355                              bytes (on input and output). */
  356
  357              3 SLCALLBLK BIT(1) %INIT('0'B)%CHARTEXT('/**/') UNAL,
  358                     /* SLCALLBLK - Set if ALL 2780/3780 blocks contain device
  359                                    selection bytes (on input and output). */
  360
  361              3 PADSIGNON BIT(1) %INIT('1'B)%CHARTEXT('/**/') UNAL,
  362                     /* PADSIGNON - Set if the SIGNON string is to be extended
  363                                    out to 80 bytes with blanks. */
  364
  365              3 * BIT(3) %INIT('0'B)%CHARTEXT('/**/') UNAL,
  366
  367              3 * UBIN BYTE %INIT(0)%CHARTEXT('/**/') CALIGNED,
  368              3 * UBIN BYTE %INIT(0)%CHARTEXT('/**/') CALIGNED,
  369
  370            2 OTPCNT UBIN (%(18-BITBIN(MODE_FEP)*2)) CALIGNED,
15:00 JUL 28 '97 KZ$LINCTX.:E05SI                                          11   
  371                     /* OTPCNT - Count of number of KZ$OTPBFRs waiting to go
  372                                 for devices that are not halted. */
  373
  374            2 BCB REDEF OTPCNT,
  375
  376              3 RCV UBIN BYTE CALIGNED,
  377
  378                                              /* RCV - Received BCB.*/
  379
  380              3 SND UBIN BYTE CALIGNED,
  381
  382                                              /* SND - Counter for sent BCB         */
  383
  384            2 CURCTR$ PTR CALIGNED %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  385                     /* CURCTR$ - Ptr to context of the controller currently
  386                                  being addressed. */
  387
  388            2 CURDEV$ PTR CALIGNED %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  389                /* CURDEV$ - Ptr to context of device currently being addressed.    */
  390
  391            2 OTPHD$ PTR CALIGNED %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  392                     /* OTPHD$ - Ptr to chain of KZ$OTPBFRs that are currently
  393                                 being sent. */
  394
  395            2 OTPTL$ PTR CALIGNED %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  396                                              /* OTPTL$ - Tail of OTPHD$ chain      */
  397
  398            2 INPBFR$ PTR CALIGNED %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  399                                         /* INPBFR$ - Pointer to the input buffer   */
  400
  401            2 INPBFRSIZ UBIN (%(18-BITBIN(MODE_FEP)*2)) CALIGNED,
  402                                    /* INPBFRSIZ - Size of input buffer in words    */
  403
  404            2 INPDATSIZ UBIN (%(18-BITBIN(MODE_FEP)*2)) CALIGNED,
  405                                         /* INPDATSIZ - Size of input data in bytes */
  406
  407            2 OTPBFR$ PTR CALIGNED %INIT(ADDR(NIL))%CHARTEXT('/**/'),
15:00 JUL 28 '97 KZ$LINCTX.:E05SI                                          12   
  408                                         /* OTPBFR$ - Pointer to the output buffer  */
  409
  410            2 OTPBFRSIZ UBIN (%(18-BITBIN(MODE_FEP)*2)) CALIGNED,
  411                                    /* OTPBFRSIZ - Size of output buffer in words   */
  412
  413            2 OTPDATSIZ UBIN (%(18-BITBIN(MODE_FEP)*2)) CALIGNED,
  414                                    /* OTPDATSIZ - Size of the output data in bytes */
  415
  416            2 OTPCTR$ PTR CALIGNED %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  417                     /* OTPCTR$ - Ptr to controller that is to be checked next
  418                                  for output. */
  419
  420            2 INPREC$ PTR CALIGNED %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  421                     /* INPREC$ - Ptr to the input record buffer into which
  422                                  RBT records are assembled for shipment to
  423                                  VDH.                                   */
  424            2 OTPDEV$ PTR CALIGNED %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  425                     /* OTPDEV$ - Ptr to device that is to be checked next
  426                                  for output. */
  427
  428            2 POLADR CALIGNED,
  429                     /* POLADR - Poll address (EBCDIC).  May be general poll,
  430                                 specific poll, or select depending on what
  431                                 is being done. */
  432
  433              3 CTR UBIN BYTE %INIT(0)%CHARTEXT('/**/') CALIGNED,
  434
  435              3 DEV UBIN BYTE %INIT(0)%CHARTEXT('/**/') CALIGNED,
  436
  437            2 POLSIZ SBIN (%(18-BITBIN(MODE_FEP)*2)) CALIGNED %INIT(0)%CHARTEXT('/**/'),
  438                               /* POLSIZ - Size of general poll list (# entries)    */
  439
  440            2 INPRECSIZ REDEF POLSIZ UBIN (%(18-BITBIN(MODE_FEP)*2)) CALIGNED,
  441                     /* INPRECSIZ - Size of the input record buffer referenced
  442                                    by INPREC$, in bytes.               */
  443            2 POLLST$ PTR CALIGNED %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  444                     /* POLLST$ - Ptr to byte array of general poll addresses.
15:00 JUL 28 '97 KZ$LINCTX.:E05SI                                          13   
  445                                  There is one entry per known controller.  If
  446                                  an entry is non-zero, it is the poll address.
  447                                  If zero, that controller is inactive. */
  448
  449            2 CTRLST$ PTR CALIGNED %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  450            2 TMRCTB$ PTR CALIGNED %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  451                     /* CTRLST$ - Ptr to an array of pointers to the known
  452                                  controller contexts, parallel to POLLST$.
  453                                  Used by 3270.
  454                        TMRCTB$ - Ptr to CTB for inactive line timer.  Used
  455                                  by HASP and 2780/3780.                 */
  456
  457            2 INACT_CTR UBIN BYTE %INIT(0)%CHARTEXT('/**/') CALIGNED,
  458                     /* INACT_CTR - Index into POLLST$ of the last inactive
  459                                    controller polled. */
  460
  461            2 POLX UBIN BYTE %INIT(0)%CHARTEXT('/**/') CALIGNED,
  462                     /* POLX - Index into POLLST$ of the current controller.
  463                               Must be set by the line manager when a response
  464                               is received from a 'general poll all'.  Will
  465                               be set by the device manager in all other cases. */
  466
  467            2 ACTCTR UBIN BYTE CALIGNED %INIT(0)%CHARTEXT('/**/'),
  468                                         /* ACTCTR - Number of active controllers   */
  469
  470            2 OPR UBIN BYTE CALIGNED %INIT(0)%CHARTEXT('/**/'),
  471                                              /* OPR - Current operation.           */
  472
  473            2 DEVMGR@ EPTR CALIGNED %INIT(ENTADDR(NIL))%CHARTEXT('/**/'),
  474
  475                                         /* DEVMGR@ - Device handler entry pointer  */
  476
  477            2 LINMGR@ EPTR CALIGNED %INIT(ENTADDR(NIL))%CHARTEXT('/**/'),
  478                                         /* LINMGR@ - Line handler entry pointer    */
  479
  480            2 IOMGR@ EPTR CALIGNED %INIT(ENTADDR(NIL))%CHARTEXT('/**/'),
  481                                              /* IOMGR@ - IO handler entry pointer  */
15:00 JUL 28 '97 KZ$LINCTX.:E05SI                                          14   
  482
  483            2 DSCTERMID$ PTR CALIGNED %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  484                                              /* DSCTERMID$ - Pointer to pending disconnecting
  485                                                    B$TERMINAL_ID */
  486
  487            2 DSCEVT UBIN (%(18-BITBIN(MODE_FEP)*2)) CALIGNED %INIT(0)%CHARTEXT('/**/'),
  488                                              /* DSCEVT - Reason (event) for disc   */
  489
  490
  491            2 TIMR CALIGNED,                  /* More clock stuff                   */
  492
  493              3 GENPOL UBIN (%(36-BITBIN(MODE_FEP)*4)) CALIGNED %INIT(0)%CHARTEXT('/**/'),
  494                                         /* GENPOL - Time last general poll started */
  495
  496              3 SPCPOL UBIN (%(36-BITBIN(MODE_FEP)*4)) CALIGNED %INIT(0)%CHARTEXT('/**/'),
  497                                    /* SPCPOL - Time last specific-poll-all started */
  498
  499            2 CHRIN UBIN (%(36-BITBIN(MODE_FEP)*4)) CALIGNED %INIT(0)%CHARTEXT('/**/'),
  500                                         /* CHRIN - Characters input for accounting */
  501
  502            2 CHROUT UBIN (%(36-BITBIN(MODE_FEP)*4)) CALIGNED %INIT(0)%CHARTEXT('/**/'),
  503                                    /* CHROUT - Characters output for accounting    */
  504
  505            2 RCRIN UBIN (%(36-BITBIN(MODE_FEP)*4)) CALIGNED %INIT(0)%CHARTEXT('/**/'),
  506                                         /* RCRIN - Blocks input for accounting     */
  507
  508            2 RCROUT UBIN (%(36-BITBIN(MODE_FEP)*4)) CALIGNED %INIT(0)%CHARTEXT('/**/'),
  509                                         /* RCROUT - Blocks output for accounting   */
  510
  511            2 POLLTBL$ PTR CALIGNED %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  512                         /* POLL_TBL$ - Pointer to polling table used
  513                            by MLCP in poll all */
  514            %IF NOT (MODE_FEP);
  515            2 * BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  516            %ENDIF;
  517            2 CNTTSTRQS BIT(1) %INIT('0'B)%CHARTEXT('/**/') UNAL,
  518                         /* CNTTSTRQS - Indicates whether or not reception
15:00 JUL 28 '97 KZ$LINCTX.:E05SI                                          15   
  519                            of a continued test request sequence is in
  520                            progress  */
  521            2 * BIT(7) %INIT('0'B)%CHARTEXT('/**/') UNAL,
  522            2 DSC_LEV UBIN BYTE CALIGNED %INIT(0)%CHARTEXT('/**/'),
  523            2 TIMOUT CALIGNED,
  524
  525              3 PRIMARY UBIN (%(18-BITBIN(MODE_FEP)*2)) CALIGNED %INIT(0)%CHARTEXT('/**/'),
  526                         /* PRIMARY - The first of two time out values
  527                            KZO and KZN use to set input and output
  528                            time out clocks. */
  529
  530              3 SECONDARY UBIN (%(18-BITBIN(MODE_FEP)*2)) CALIGNED %INIT(0)%CHARTEXT('/**/'),
  531
  532                         /* SECONDARY - The second of two time out values
  533                            KZO and KZP use to set input and output timeout
  534                            clock.  Used to timeout ENQ when 2780/3780 bid
  535                            for line.  Otherwise, not used at this time. */
  536
  537              %IF NOT (MODE_FEP);
  538              3 * BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  539              %ENDIF;
  540              3 USESEC BIT(1) %INIT('0'B)%CHARTEXT('/**/') UNAL,
  541                         /* USESEC - When this bit is set, KZO and KZP use
  542                            the value contained in KZ$LINCTX.TIMOUT.SECONDARY
  543                            otherwise the value contained in .TIMOUT.PRIMARY
  544                            is used. */
  545
  546              3 * BIT(7) %INIT('0'B)%CHARTEXT('/**/') UNAL,
  547              3 * UBIN BYTE %INIT(0)%CHARTEXT('/**/') CALIGNED;
  548      %MEND;
  549
  550      %MACRO KZ$EVENT (FPTN = KZ$EVENT, STCLASS = BASED,
  551      EVENT = 0,
  552      CHNCTX$ = "ADDR(NIL)",
  553      LINCTX$ = "ADDR(NIL)",
  554      TERMID$ = "ADDR(NIL)",
  555      CHN$ = "ADDR(NIL)",
15:00 JUL 28 '97 KZ$LINCTX.:E05SI                                          16   
  556      LGNVEC = "VECTOR(NIL)");
  557      %LSET LISTDIR = '0'B;
  558      %LSET LISTEXP = '1'B;
  559      %LSET LISTCOM = '0'B;
  560      %LSET LISTSUB = '1'B;
  561      %LSET STR = CONCAT(TEXTCHAR(STCLASS), '        ');
  562      %IF (SUBSTR(STR,0,6) = 'STATIC') OR (SUBSTR(STR,0,8) = 'CONSTANT')
  563      OR (SUBSTR(STR,0,3) = 'EXT');
  564      %LSET INIT = CHARTEXT(' INIT');
  565      %LSET ENIT = CHARTEXT('');
  566      %ELSE;
  567      %LSET INIT = CHARTEXT('/*');
  568      %LSET ENIT = CHARTEXT('*/');
  569      %ENDIF;
  570
  571      DCL 1 FPTN STCLASS WALIGNED,
  572            2 %CHARTEXT('EVENT') UBIN WORD %INIT(EVENT)%ENIT UNAL,
  573      /*K* Event being reported to CNCDSC.
  574      */
  575            2 %CHARTEXT('CHNCTX$') CPTR %INIT(CHNCTX$)%ENIT UNAL,
  576      /*K* Pointer to the build context area.
  577      */
  578            2 %CHARTEXT('LINCTX$') PTR %INIT(LINCTX$)%ENIT UNAL,
  579      /*K* Pointer to SYNC line context.
  580      */
  581            2 %CHARTEXT('TERMID$') PTR %INIT(TERMID$)%ENIT UNAL,
  582      /*K* Pointer to KL_TERMID data
  583      */
  584            2 %CHARTEXT('CHN$') PTR %INIT(CHN$)%ENIT UNAL,
  585      /*K* Pointer to channel table
  586      */
  587            2 %CHARTEXT('LGNVEC') VECTOR %INIT(LGNVEC)%ENIT UNAL,
  588      /*K* Logon string received by the protocol handler.
  589      */
  590            %VLP_ERRCODE(FPTN=RESULT,STCLASS=STCLASS,ALGN=CALIGNED,LVL=2,LAST=";");
  591      /*K* Result of device manager operation
  592      */
15:00 JUL 28 '97 KZ$LINCTX.:E05SI                                          17   
  593      %MEND;
  594
  595
  596      %MACRO KZ$INIT (FPTN = KZ$INIT, STCLASS = STATIC);
  597
  598      %LSET LISTDIR = '0'B;
  599      %LSET LISTEXP = '1'B;
  600      %LSET LISTCOM = '0'B;
  601      %LSET LISTSUB = '1'B;
  602      %LSET STR = CONCAT(TEXTCHAR(STCLASS), '        ');
  603      %IF (SUBSTR(STR,0,6) = 'STATIC') OR (SUBSTR(STR,0,8) = 'CONSTANT')
  604      OR (SUBSTR(STR,0,3) = 'EXT');
  605      %LSET INIT = CHARTEXT(' INIT');
  606      %LSET ENIT = CHARTEXT('');
  607      %ELSE;
  608      %LSET INIT = CHARTEXT('/*');
  609      %LSET ENIT = CHARTEXT('*/');
  610      %ENDIF;
  611
  612      DCL 1 FPTN STCLASS WALIGNED,
  613            2 %CHARTEXT('HDR$') PTR %INIT(ADDR(KZ_HDR$))%ENIT,
  614            2 %CHARTEXT('ABORT') EPTR %INIT(ENTADDR(KZO$ABORT))%ENIT,
  615            2 %CHARTEXT('CNCDSC') EPTR %INIT(ENTADDR(KZP$CNCDSC))%ENIT,
  616            2 %CHARTEXT('ORDERS') EPTR %INIT(ENTADDR(KZO$ORDERS))%ENIT,
  617            2 %CHARTEXT('DRIVER') EPTR %INIT(ENTADDR(KZP$DRIVER))%ENIT,
  618            2 %CHARTEXT('GO') EPTR %INIT(ENTADDR(KZC$GO))%ENIT;
  619      %MEND;

