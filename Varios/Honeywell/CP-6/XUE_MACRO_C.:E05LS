

15:23 JUL 28 '97 XUE_MACRO_C.:E05SI                                        1    
    1      /*M*    XUE_MACRO_C   macro definitions for X$EVAL           */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /*X*    DFC,DMC   */
    8      /*F* NAME:  XUE_ECB
    9              The XUE_ECB structure contains these parameters:
   10      */
   11
   12      %MACRO XUE_ECB (NAME=XUE_ECB,
   13                      STCLASS=STATIC,
   14                      LVL=1,
   15                      LAST=";",
   16                      TREE=NIL,
   17                      WORK=NIL,
   18                      WKSZ=0,
   19                      WORK_DCB=NIL,
   20                      INPUT_DCB=NIL,
   21                      FUN=NIL,
   22                      VAR=NIL,
   23                      USER=NIL,
   24                      LEAD = ' "',
   25                      TRAIL = ' "',
   26                      PROCNAME=NIL,
   27                      PROCACCT=NIL,
   28                      CMDVARS(NO='0'B,YES='1'B,ANY)='1'B,
   29                      PRIVATE(NO='0'B,YES='1'B,ANY)='0'B);
   30      %LSET LISTDIR='0'B;
   31      %LSET LISTEXP='0'B;
   32      %LSET LISTCOM='0'B;
   33      %LSET LISTSUB='0'B;
   34      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
   35      %IF (SUBSTR(STR,0,8)='CONSTANT') OR
   36          (SUBSTR(STR,0,6)='STATIC') OR
   37          (SUBSTR(STR,0,3)='EXT');
15:23 JUL 28 '97 XUE_MACRO_C.:E05SI                                        2    
   38        %LSET INIT=CHARTEXT('INIT');
   39      %ELSE;
   40        %LSET INIT=CHARTEXT('/*');
   41      %ENDIF;
   42      %IF LVL=1;
   43      DCL 1 NAME ALIGNED STCLASS,
   44      %ELSE;
   45       %LVL NAME ALIGNED,
   46      %ENDIF;
   47
   48       %(LVL+1)  TREE$ PTR %INIT(ADDR(TREE)) %CHARTEXT('/**/'),
   49
   50      /*K*    TREE = PTR points to the parse tree
   51              of an expression to be evaluated.  The
   52              fully qualified name of this field is
   53              XUE_ECB.TREE$.
   54              */
   55
   56       %(LVL+1)  WORK$ PTR %INIT(ADDR(WORK)) %CHARTEXT('/**/'),
   57
   58      /*K*    WORK = PTR locates a work area.
   59              The fully qualified name of this field
   60              is XUE_ECB.WORK$.
   61              */
   62
   63       %(LVL+1)  WKSZ# UBIN WORD %INIT(WKSZ) %CHARTEXT('/**/'),
   64
   65      /*K*    WKSZ = VALUE-DEC(150-?) specifies the
   66              size of the work area pointed to by
   67              WORK$ in words.  The fully qualified
   68              name of this field is XUE_ECB.WKSZ#.
   69              The default is 0.
   70              */
   71
   72       %(LVL+1)  WORK_DCB# UBIN WORD %INIT(DCBNUM(WORK_DCB)) %CHARTEXT('/**/'),
   73
   74      /*K*    WORK_DCB = DCBNAME is the name of the
15:23 JUL 28 '97 XUE_MACRO_C.:E05SI                                        3    
   75              scratch DCB that X$EVAL may use.  It
   76              should always be closed upon the initial
   77              call to X$EVAL and the user program must
   78              close it at exit time as required.  The
   79              user program must not use this DCB.  The
   80              fully qualified name of this field is
   81              XUE_ECB.WORK_DCB#.
   82              */
   83
   84       %(LVL+1)  OUT$ PTR %INIT(ADDR(NIL)) %CHARTEXT('/**/'),
   85
   86      /*K*    OUT - VARIABLE points to a TEXTC
   87              field in the work area which contains
   88              the result of the expression evaluation.
   89              The fully qualified name of this field
   90              is XUE_ECB.OUT$.
   91              */
   92
   93       %(LVL+1)  FUN$$ EPTR %INIT(ENTADDR(FUN)) %CHARTEXT('/**/'),
   94
   95      /*K*    FUN = {ENTRY|NIL} specifies the
   96              address of the user-supplied routine
   97              which will handle any user-defined
   98              functions.  If there are no user-defined
   99              functions then this routine is
  100              unnecessary.  The fully qualified name
  101              of this field is XUE_ECB.FUN$$.
  102              */
  103
  104       %(LVL+1)  VAR$$ EPTR %INIT(ENTADDR(VAR)) %CHARTEXT('/**/'),
  105
  106      /*K*    VAR = {ENTRY|NIL} specifies the
  107              address of the user-supplied routine
  108              which will store/return the values for
  109              any user-managed command variables in
  110              the expression to be evaluated.  If
  111              standard or private command variables
15:23 JUL 28 '97 XUE_MACRO_C.:E05SI                                        4    
  112              are to be used VAR should be NIL.  The
  113              fully qualified name of this field is
  114              XUE_ECB.VAR$$.
  115              */
  116
  117       %(LVL+1)  USER$ PTR %INIT(ADDR(USER)) %CHARTEXT('/**/'),
  118
  119      /*K*    USER = PTR this field is
  120              available for the user's use.  It will
  121              be passed in XUE_FUNPARAM.USER$ and
  122              XUE_VARPARAM.USER$ to the user-supplied
  123              routines.  The fully qualified name of
  124              this field is XUE_ECB.USER$.
  125              */
  126
  127       %(LVL+1)  ERR_POS# UBIN HALF UNAL %INIT(0) %CHARTEXT('/**/'),
  128
  129      /*K*    ERR_POS - VALUE-DEC(0-?) on return,
  130              this variable holds the character
  131              position in the expression where the
  132              first error was found.  It is valid only
  133              when ERR is non-zero.  The fully
  134              qualified name of this field is
  135              XUE_ECB.ERR_POS#.
  136              */
  137
  138       %(LVL+1)  ERR_DCB# UBIN HALF UNAL %INIT(0) %CHARTEXT('/**/'),
  139
  140      /*K*    ERR_DCB - VALUE-DEC(0-?) on return,
  141              this variable holds the DCB number on
  142              which the error occurred.  It is valid
  143              only when ERR is non-zero.  The fully
  144              qualified name of this field is
  145              XUE_ECB.ERR_DCB#.
  146              */
  147
  148       %(LVL+1)  ERR,
15:23 JUL 28 '97 XUE_MACRO_C.:E05SI                                        5    
  149                 %(LVL+2) FCG BIT(12) UNAL,
  150                 %(LVL+2) MID BIT(6) UNAL,
  151                 %(LVL+2) MON BIT(1) UNAL,
  152                 %(LVL+2) CODE UBIN(14) UNAL,
  153                 %(LVL+2) SEV UBIN(3) UNAL,
  154
  155      /*K*    ERR - VALUE-BIT(36) on return,
  156              contains the error code associated with
  157              the first error detected. If ERR is
  158              equal to E$XUE#SMALLWORK, then the
  159              workspace should be enlarged and X$EVAL
  160              called again.  Otherwise, the error
  161              should be printed.  See ERR_POS for more
  162              information.
  163              */
  164
  165       %(LVL+1)  PROCNAME_ BIT(72) DALIGNED %INIT(VECTOR(PROCNAME)) %CHARTEXT('/**/'),
  166      /*K*    PROCNAME = VARIABLE this vector
  167              frames the name of the processor that is
  168              using X$EVAL.  The name must be in TEXTC
  169              form, preferably stored in a VLP_NAME
  170              structure.  This information is used
  171              when accessing command variables if
  172              FLAGS.PRIVATE# is set.  Otherwise,
  173              standard command variables will be used.
  174              If PROCNAME is NIL then the default will
  175              be taken from M$LM.  This field will not
  176              be used if the user program handles all
  177              variable references.  See CMDVAR.  The
  178              fully qualified name of this field is
  179              XUE_ECB.PROCNAME_.
  180              */
  181
  182       %(LVL+1)  PROCACCT_ BIT(72) DALIGNED %INIT(VECTOR(PROCACCT)) %CHARTEXT('/**/'),
  183
  184      /*K*    PROCACCT = VARIABLE this vector
  185              frames the account where the processor
15:23 JUL 28 '97 XUE_MACRO_C.:E05SI                                        6    
  186              named in PROCNAME resides.  If NIL, the
  187              default will be taken from M$LM.  The
  188              fully qualified name of this field is
  189              XUE_ECB.PROCACCT_.
  190              */
  191
  192       %(LVL+1)  FLAGS,
  193
  194
  195                 %(LVL+2) CMDVARS# BIT(1) UNAL %INIT(CMDVARS) %CHARTEXT('/**/'),
  196
  197      /*K*    CMDVAR = {YES|NO} if YES is specified
  198              then all variables will refer to
  199              standard or private command variables.
  200              If NO is specified the user routine
  201              pointed to by VAR$$ will be called to
  202              handle variable references.  The fully
  203              qualified name of this field is
  204              XUE_ECB.FLAGS.CMDVAR#.  The default is
  205              YES.
  206              */
  207
  208                 %(LVL+2) PRIVATE# BIT(1) UNAL %INIT(PRIVATE) %CHARTEXT('/**/'),
  209
  210      /*K*    PRIVATE = {YES|NO} specifies whether
  211              command variables are to be private
  212              (YES) or standard (NO).  This flag is
  213              meaningful only if CMDVAR is YES.  The
  214              fully qualified name of this field is
  215              XUE_ECB.FLAGS.PRIVATE#.  The default is
  216              NO.
  217              */
  218
  219                 %(LVL+2) * BIT(34) UNAL %INIT('0'B) %CHARTEXT('/**/'),
  220
  221       %(LVL+1)  RESULTS,
  222
15:23 JUL 28 '97 XUE_MACRO_C.:E05SI                                        7    
  223
  224                 %(LVL+2) PROMPT# BIT(1) UNAL %INIT('0'B) %CHARTEXT('/**/'),
  225
  226      /*K*    PROMPT - {YES|NO} this flag will be
  227              set by X$EVAL when an M$PROMPT monitor
  228              service was issued.  In this case the
  229              user must reset the prompt before doing
  230              any reads or writes to the terminal.
  231              Since XUE$EVAL restores the user's prompt
  232              whenever possible, this flag will seldom
  233              be set.
  234              The fully qualified name of this field
  235              is XUE_ECB.RESULTS.PROMPT#.
  236              */
  237
  238                 %(LVL+2) * BIT(35) UNAL %INIT('0'B) %CHARTEXT('/**/'),
  239
  240       %(LVL+1)  INTERNAL,
  241
  242
  243                 %(LVL+2) RESET_EOF# BIT(1) UNAL,
  244                 %(LVL+2) * BIT(35) UNAL,
  245
  246       %(LVL+1)  LEAD# CHAR(2) %INIT(LEAD) %CHARTEXT('/**/'),
  247
  248      /*K*    LEAD = VALUE-CHAR(2) is the
  249              2-character value of the leading
  250              delimiter of comments included in
  251              command input.  A single character
  252              delimiter must include a leading blank.
  253              The fully qualified name of this field is
  254              XUE_ECB.LEAD#.  The default is ' "'.
  255              */
  256
  257       %(LVL+1)  TRAIL# CHAR(2) %INIT(TRAIL) %CHARTEXT('/**/'),
  258      /*K*    TRAIL = VALUE-CHAR(2) is the
  259              2-character value of the trailing
15:23 JUL 28 '97 XUE_MACRO_C.:E05SI                                        8    
  260              delimiter of comments included in
  261              command input.  A single character
  262              delimiter must include a leading blank.
  263              The fully qualified name of this field is
  264              XUE_ECB.TRAIL#.  The default is ' "'.
  265              */
  266       %(LVL+1)  INPUT_DCB# UBIN WORD %INIT(DCBNUM(INPUT_DCB)) %CHARTEXT('/**/'),
  267      /*K*    INPUT_DCB = DCBNAME is the name of the DCB to be used by the
  268              $INPUT function.  The default is NIL, in which case M$UC will
  269              be used.
  270              */
  271
  272                 /* Reserved for future expansion */
  273       %(LVL+1)  * (0:8) UBIN WORD %INIT(0*0) %CHARTEXT('/**/') LAST
  274      %MEND;
  275      /**/
  276      /**/
  277      /*F* NAME:  XUE_PPCB
  278              The XUE_PPCB structure contains the
  279              following fields.  In addition, the
  280              structure XUE_ECB is appended to
  281              XUE_PPCB.  Fields in that structure are
  282              accessed by the fully qualified name
  283              XUE_PPCB.ECB.ERR, for example, which is
  284              analogous to XUE_ECB.ERR in the XUE_ECB
  285              structure.
  286              */
  287
  288      %MACRO XUE_PPCB (NAME=XUE_PPCB,
  289                       INBUF=NIL,
  290                       ICHARS=0,
  291                       OUTBUF=NIL,
  292                       OCHARS=0,
  293                       ROOT=NIL,
  294                       STCLASS=STATIC,
  295                       LVL=1,
  296                       LAST=";",
15:23 JUL 28 '97 XUE_MACRO_C.:E05SI                                        9    
  297                       WORK=NIL,
  298                       WKSZ=0,
  299                       WORK_DCB=NIL,
  300                       FUN=NIL,
  301                       VAR=NIL,
  302                       USER=NIL,
  303                       PROCNAME=NIL,
  304                       PROCACCT=NIL,
  305                       CMDVARS(NO='0'B,YES='1'B)='1'B,
  306                       PRIVATE(NO='0'B,YES='1'B)='0'B);
  307      %LSET LISTDIR='0'B;
  308      %LSET LISTEXP='0'B;
  309      %LSET LISTCOM='0'B;
  310      %LSET LISTSUB='0'B;
  311      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  312      %IF (SUBSTR(STR,0,8)='CONSTANT') OR
  313          (SUBSTR(STR,0,6)='STATIC') OR
  314          (SUBSTR(STR,0,3)='EXT');
  315        %LSET INIT=CHARTEXT('INIT');
  316      %ELSE;
  317        %LSET INIT=CHARTEXT('/*');
  318      %ENDIF;
  319      %LSET PPCB_LVL = LVL+1;
  320      %IF LVL=1;
  321      DCL 1 NAME ALIGNED STCLASS,
  322      %ELSE;
  323       %LVL  NAME ALIGNED,
  324      %ENDIF;
  325        %(LVL+1) INBUF$ PTR %INIT(ADDR(INBUF)) %CHARTEXT('/**/'),
  326
  327      /*K*    INBUF = PTR locates the buffer to be
  328              preprocessed.  The fully qualified name
  329              of this field is XUE_PPCB.INBUF$.
  330              */
  331
  332        %(LVL+1) ICHARS# UBIN WORD %INIT(ICHARS) %CHARTEXT('/**/'),
  333
15:23 JUL 28 '97 XUE_MACRO_C.:E05SI                                        10   
  334      /*K*    ICHARS = VALUE-DEC(0-?) specifies the
  335              number of characters in INBUF that are
  336              to be considered by X$PRE_PROCESS.  The
  337              fully qualified name of this field is
  338              XUE_PPCB.ICHARS#.  The default is 0.
  339              */
  340
  341       %(LVL+1) OUTBUF$ PTR %INIT(ADDR(OUTBUF)) %CHARTEXT('/**/'),
  342
  343      /*K*    OUTBUF = VARIABLE locates the buffer
  344              where the result of X$PRE_PROCESS is to
  345              be stored.  This buffer may be the same
  346              as used for input.  The fully qualified
  347              name of this field is XUE_PPCB.OUTBUF$.
  348              */
  349
  350        %(LVL+1) OCHARS# UBIN WORD %INIT(OCHARS) %CHARTEXT('/**/'),
  351
  352      /*K*    OCHARS = VALUE-DEC(0-?) specifies the
  353              maximum number of characters that may be
  354              stored in the result buffer.  The fully
  355              qualified name of this field is
  356              XUE_PPCB.OCHARS#.  The default is 0.
  357              */
  358
  359        %(LVL+1) RCHARS# UBIN WORD,
  360
  361      /*K*    RCHARS - VALUE-DEC(0-?) on return,
  362              contains the actual number of meaningful
  363              characters in OUTBUF.  The fully
  364              qualified name of this field is
  365              XUE_PPCB.RCHARS#.
  366              */
  367
  368        %(LVL+1) ROOT$ PTR %INIT(ADDR(ROOT)) %CHARTEXT('/**/'),
  369
  370      /*K*    ROOT = VARIABLE specifies the address
15:23 JUL 28 '97 XUE_MACRO_C.:E05SI                                        11   
  371              of the parse root node that defines the
  372              syntax of a preprocessor expression.
  373              Unless the user has his own preprocessing
  374              tree, the preprocessor should be set to
  375              XUE_PREEXP.  The fully qualified name of
  376              this field is XUE_PPCB.ROOT$.
  377              */
  378
  379        %XUE_ECB (LVL=PPCB_LVL,LAST=LAST,TREE=NIL,WORK=WORK,WKSZ=WKSZ,
  380                  FUN=FUN,VAR=VAR,WORK_DCB=WORK_DCB,PROCNAME=PROCNAME,
  381                  PROCACCT=PROCACCT,CMDVARS=CMDVARS,PRIVATE=PRIVATE,
  382                  NAME=ECB,STCLASS=STCLASS);
  383      %MEND;
  384      /**/
  385      /**/
  386      /*F* NAME:  XUE_FUNPARAM
  387              The XUE_FUNPARAM structure contains these fields:
  388      */
  389
  390      %MACRO XUE_FUNPARAM (NAME=XUE_FUNPARAM,
  391                           STCLASS=BASED,
  392                           VARILEN(YES=1,NO=0)=1,
  393                           LAST=";",
  394                           LEN=0,
  395                           LVL=1);
  396      %LSET LISTDIR='0'B;
  397      %LSET LISTEXP='0'B;
  398      %LSET LISTCOM='0'B;
  399      %LSET LISTSUB='0'B;
  400      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  401      %IF (SUBSTR(STR,0,8)='CONSTANT') OR
  402          (SUBSTR(STR,0,6)='STATIC') OR
  403          (SUBSTR(STR,0,3)='EXT');
  404        %LSET INIT=CHARTEXT('INIT');
  405      %ELSE;
  406        %LSET INIT=CHARTEXT('/*');
  407      %ENDIF;
15:23 JUL 28 '97 XUE_MACRO_C.:E05SI                                        12   
  408      %IF LVL=1;
  409      DCL 1 NAME ALIGNED STCLASS,
  410      %ELSE;
  411       %LVL  NAME ALIGNED,
  412      %ENDIF;
  413       %(LVL+1)  CODE# UBIN WORD,
  414      /*K*    CODE - VALUE-DEC(0-?) this field will
  415              contain the code of the root node of the
  416              user-defined function to be processed.
  417              The fully qualified name of this field
  418              is XUE_FUNPARAM.CODE#.
  419              */
  420
  421       %(LVL+1)  CPOS# UBIN WORD,
  422
  423      /*K*    CPOS - VALUE-DEC(0-?) contains the
  424              character position of the function name.
  425              The fully qualified name of this field
  426              is XUE_FUNPARAM.CPOS#.
  427              */
  428
  429       %(LVL+1)  ERR_POS# UBIN HALF UNAL,
  430
  431      /*K*    ERR_POS - VALUE-DEC(0-?) this field
  432              may be set by the user-supplied routine.
  433              It will be passed back thru
  434              XUE_ECB.ERR_POS# to the calling routine
  435              if XUE_FUNPARAM.ERR is non-zero.  The
  436              fully qualified name of this field is
  437              XUE_FUNPARAM.ERR_POS#.
  438              */
  439
  440       %(LVL+1)  ERR_DCB# UBIN HALF UNAL,
  441
  442      /*K*    ERR_DCB - VALUE-DEC(0-?) this
  443              variable holds the DCB number on which
  444              the error occurred.  It is valid only
15:23 JUL 28 '97 XUE_MACRO_C.:E05SI                                        13   
  445              when ERR is non-zero.  The fully
  446              qualified name of this field is
  447              XUE_FUNPARAM.ERR_DCB#.
  448              */
  449
  450       %(LVL+1)  ERR,
  451                 %(LVL+2) FCG BIT(12) UNAL,
  452                 %(LVL+2) MID BIT(6) UNAL,
  453                 %(LVL+2) MON BIT(1) UNAL,
  454                 %(LVL+2) CODE UBIN(14) UNAL,
  455                 %(LVL+2) SEV UBIN(3) UNAL,
  456
  457      /*K*    ERR - standard CP-6 error code.  This
  458              field may be set by the user-supplied
  459              routine to any error code.  When this
  460              routine returns to X$EVAL this field
  461              will be checked and if non-zero this
  462              error code and ERR_POS will be moved
  463              into XUE_ECB.  X$EVAL will then
  464              ALTRETURN to the calling routine.
  465              */
  466
  467       %(LVL+1)  OUT$ PTR,
  468
  469      /*K*    OUT - PTR  Points to a 512 byte buffer
  470              where the user-supplied routine is to
  471              put the result of evaluating the
  472              function.  The field is considered to be
  473              a TEXTC field, i.e., the first byte will
  474              specify how many bytes are significant.
  475              The fully qualified name of this field
  476              is XUE_FUNPARAM.OUT$.
  477              */
  478
  479       %(LVL+1)  USER$ PTR,
  480
  481      /*K*    USER - PTR this pointer will contain
15:23 JUL 28 '97 XUE_MACRO_C.:E05SI                                        14   
  482              the same data as XUE_ECB.USER$ (or
  483              XUE_PPCB.USER$).  The fully qualified
  484              name of this field is
  485              XUE_FUNPARAM.USER$.
  486              */
  487
  488       %(LVL+1)  NOPTS# UBIN WORD,
  489
  490      /*K*    NOPTS - VALUE-DEC(0-?) specifies how
  491              many OPTION pointers are in this
  492              structure.  The fully qualified name of
  493              this field is XUE_FUNPARAM.NOPTS#.
  494              */
  495
  496       %IF ((SUBSTR(STR,0,6)='STATIC') OR
  497       (SUBSTR(STR,0,8)='CONSTANT') OR
  498       (SUBSTR(STR,0,4)='AUTO') OR
  499       (SUBSTR(STR,0,3)='EXT')) OR
  500       (((SUBSTR(STR,0,6)='      ') OR
  501         (SUBSTR(STR,0,6)='SYMREF')) AND VARILEN=0);
  502       %(LVL+1) OPTION$ (0:LEN) PTR LAST
  503      %ELSE;
  504       %(LVL+1) OPTION$ (0:0) PTR LAST
  505      %ENDIF;
  506
  507      /*K*    OPTION - PTR each pointer in this
  508              array points to an XUE_OPTION structure.
  509              Each of these structures contains
  510              information about a parameter for this
  511              function.  The fully qualified name of
  512              this field is XUE_FUNPARAM.OPTION$.
  513              */
  514
  515      %MEND;
  516      /**/
  517      /**/
  518      /*F* NAME:  XUE_OPTION
15:23 JUL 28 '97 XUE_MACRO_C.:E05SI                                        15   
  519              The XUE_OPTION structure contains these fields:
  520      */
  521
  522      %MACRO XUE_OPTION (NAME=XUE_OPTION,
  523                         STCLASS=BASED,
  524                         VARILEN(YES=1,NO=0)=1,
  525                         LAST=";",
  526                         LEN=511,
  527                         LVL=1);
  528      %LSET LISTDIR='0'B;
  529      %LSET LISTEXP='0'B;
  530      %LSET LISTCOM='0'B;
  531      %LSET LISTSUB='0'B;
  532      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  533      %IF (SUBSTR(STR,0,8)='CONSTANT') OR
  534          (SUBSTR(STR,0,6)='STATIC') OR
  535          (SUBSTR(STR,0,3)='EXT');
  536        %LSET INIT=CHARTEXT('INIT');
  537      %ELSE;
  538        %LSET INIT=CHARTEXT('/*');
  539      %ENDIF;
  540      %IF LVL=1;
  541      DCL 1 NAME ALIGNED STCLASS,
  542      %ELSE;
  543       %LVL  NAME ALIGNED,
  544      %ENDIF;
  545       %(LVL+1)  CODE# UBIN WORD,
  546
  547      /*K*    CODE - VALUE-DEC(0-?) this field will
  548              contain the user-defined code for this
  549              option.  The fully qualified name of
  550              this field is XUE_OPTION.CODE#.
  551              */
  552
  553       %(LVL+1)  CPOS# UBIN WORD,
  554
  555      /*K*    CPOS - VALUE-DEC(0-?) contains the
15:23 JUL 28 '97 XUE_MACRO_C.:E05SI                                        16   
  556              character position of the expression
  557              part of this option.  The fully
  558              qualified name of this field is
  559              XUE_OPTION.CPOS#.
  560              */
  561
  562       %(LVL+1)  COUNT# UBIN BYTE UNAL,
  563
  564      /*K*    COUNT - VALUE-DEC(0-?) contains the
  565              number of characters in the field TEXT.
  566              Will be zero for a valueless argument.
  567              The fully qualified name of this field
  568              is XUE_OPTION.COUNT#.
  569              */
  570
  571       %IF ((SUBSTR(STR,0,6)='STATIC') OR
  572       (SUBSTR(STR,0,8)='CONSTANT') OR
  573       (SUBSTR(STR,0,4)='AUTO') OR
  574       (SUBSTR(STR,0,3)='EXT')) OR
  575       (((SUBSTR(STR,0,6)='      ') OR
  576         (SUBSTR(STR,0,6)='SYMREF')) AND VARILEN=0);
  577       %(LVL+1) TEXT# CHAR(LEN) LAST
  578      %ELSE;
  579       %(LVL+1) TEXT# CHAR (NAME.COUNT#) LAST
  580      %ENDIF;
  581
  582      /*K*    TEXT - VALUE-CHAR(0-?) contains a
  583              text string resulting from evaluation of
  584              the expression represented by XUE_VALUE
  585              or XUE_PARAMETER in the parse nodes.
  586              The fully qualified name of this field
  587              is XUE_OPTION.TEXT#.
  588              */
  589
  590      %MEND;
  591      /**/
  592      /**/
15:23 JUL 28 '97 XUE_MACRO_C.:E05SI                                        17   
  593      /*F* NAME:  XUE_VARPARAM
  594              The XUE_OPTION structure contains these fields:
  595      */
  596
  597      %MACRO XUE_VARPARAM (NAME=XUE_VARPARAM,
  598                           STCLASS=BASED,
  599                           VARILEN(YES=1,NO=0)=1,
  600                           LEN=31,
  601                           LAST = ";",
  602                           LVL=1);
  603      %LSET LISTDIR='0'B;
  604      %LSET LISTEXP='0'B;
  605      %LSET LISTCOM='0'B;
  606      %LSET LISTSUB='0'B;
  607      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
  608      %IF (SUBSTR(STR,0,8)='CONSTANT') OR
  609          (SUBSTR(STR,0,6)='STATIC') OR
  610          (SUBSTR(STR,0,3)='EXT');
  611        %LSET INIT=CHARTEXT('INIT');
  612      %ELSE;
  613        %LSET INIT=CHARTEXT('/*');
  614      %ENDIF;
  615      %IF LVL=1;
  616      DCL 1 NAME ALIGNED STCLASS,
  617      %ELSE;
  618       %LVL  NAME ALIGNED,
  619      %ENDIF;
  620       %(LVL+1)  CODE# UBIN WORD,
  621      /*K*    CODE - {%XUE_FETCH#|%XUE_STORE#} specifies
  622              the function to perform.  The fully
  623              qualified name of this field is
  624              XUE_VARPARAM.CODE#.
  625              */
  626
  627       %(LVL+1)  CPOS# UBIN WORD,
  628
  629      /*K*    CPOS = VALUE contains the character
15:23 JUL 28 '97 XUE_MACRO_C.:E05SI                                        18   
  630              position of the variable name.  The
  631              fully qualified name of this field is
  632              XUE_VARPARAM.CPOS#.
  633              */
  634
  635       %(LVL+1)  ERR_POS# UBIN HALF UNAL,
  636
  637      /*K*    ERR_POS - VALUE-DEC(0-?) may be set
  638              by the user-supplied routine.  It will
  639              be passed back through XUE_ECB.ERR_POS# to
  640              the calling routine if XUE_FUNPARAM.ERR
  641              is non-zero.  The fully qualified name
  642              of this field is XUE_VARPARAM.ERR_POS#.
  643      */
  644
  645       %(LVL+1)  ERR_DCB# UBIN HALF UNAL,
  646
  647      /*K*    ERR_DCB - VALUE-DEC(0-?) specifies
  648              the DCB number on which the error
  649              occurred.  It is valid only when ERR is
  650              non-zero.  The fully qualified name of
  651              this field is XUE_VARPARAM.ERR_DCB#.
  652              */
  653
  654       %(LVL+1)  ERR,
  655                 %(LVL+2) FCG BIT(12) UNAL,
  656                 %(LVL+2) MID BIT(6) UNAL,
  657                 %(LVL+2) MON BIT(1) UNAL,
  658                 %(LVL+2) CODE UBIN(14) UNAL,
  659                 %(LVL+2) SEV UBIN(3) UNAL,
  660
  661      /*K*    ERR - standard CP-6 error code.  May be
  662              set by the user-supplied routine to any
  663              error code.  When this routine returns to
  664              X$EVAL this field will be checked and if
  665              non-zero this error code and ERR_POS
  666              will be moved into XUE_ECB. X$EVAL will
15:23 JUL 28 '97 XUE_MACRO_C.:E05SI                                        19   
  667              then ALTRETURN to the calling routine.
  668              */
  669
  670       %(LVL+1)  VALUE$ PTR,
  671      /*K*    VALUE - PTR contains the address of a
  672              TEXTC buffer.  On a STORE operation this
  673              buffer will contain the value associated
  674              with the variable named in
  675              XUE_VARPARAM.TEXT#.  For a FETCH
  676              operation, the buffer is to be used to
  677              return the TEXTC value of the specified
  678              command variable.  The maximum size is
  679              512 bytes including count.  The fully
  680              qualified name of this field is
  681              XUE_VARPARAM.VALUE$.
  682              */
  683       %(LVL+1)  USER$ PTR,
  684
  685      /*K*    USER - PTR contains the same data as
  686              XUE_ECB.USER$ (or XUE_PPCB.USER$).  The
  687              fully qualified name of this field is
  688              XUE_VARPARAM.USER$.
  689              */
  690
  691       %(LVL+1)  VARIABLE,
  692                 %(LVL+2) COUNT# UBIN BYTE UNAL,
  693
  694      /*K*    COUNT - VALUE-DEC(0-?) specifies the
  695              length of the name of the variable.  The
  696              fully qualified name of this field is
  697              XUE_VARPARAM.COUNT#.
  698              */
  699
  700       %IF ((SUBSTR(STR,0,6)='STATIC') OR
  701       (SUBSTR(STR,0,8)='CONSTANT') OR
  702       (SUBSTR(STR,0,4)='AUTO') OR
  703       (SUBSTR(STR,0,3)='EXT')) OR
15:23 JUL 28 '97 XUE_MACRO_C.:E05SI                                        20   
  704       (((SUBSTR(STR,0,6)='      ') OR
  705         (SUBSTR(STR,0,6)='SYMREF')) AND VARILEN=0);
  706                 %(LVL+2) TEXT# CHAR(LEN) LAST
  707      %ELSE;
  708                 %(LVL+2) TEXT# CHAR (NAME.VARIABLE.COUNT#) LAST
  709      %ENDIF;
  710
  711      /*K*    TEXT - VALUE-CHAR(0-?) contains the name
  712              of the variable that the user service
  713              routine is to return.  The fully
  714              qualified name of this field is
  715              XUE_VARPARAM.TEXT#.
  716              */
  717
  718      %MEND;
  719      /**/
  720      %MACRO XUE_ENTRIES (OMIT=NIL);
  721      %IF TEXTCHAR(OMIT)~='X$EVAL';
  722         DCL X$EVAL ENTRY (1) ALTRET;
  723         %ENDIF;
  724      %IF TEXTCHAR(OMIT)~='X$EVALUATE';
  725         DCL X$EVALUATE ENTRY (3) ALTRET;
  726         %ENDIF;
  727      %IF TEXTCHAR(OMIT)~='X$GET_VAR';
  728         DCL X$GET_VAR ENTRY (5) ALTRET;
  729         DCL X$PUT_VAR ENTRY (5) ALTRET;
  730         %ENDIF;
  731      %IF TEXTCHAR(OMIT)~='X$STRIP_BLANKS';
  732         DCL X$STRIP_BLANKS ENTRY (1);
  733         %ENDIF;
  734      %IF TEXTCHAR(OMIT)~='X$DEC_CONVERT';
  735         DCL X$DEC_CONVERT ENTRY (2) ALTRET;
  736         %ENDIF;
  737      %IF TEXTCHAR(OMIT)~='X$PRE_PROCESS';
  738         DCL X$PRE_PROCESS ENTRY (1) ALTRET;
  739         %ENDIF;
  740      %IF TEXTCHAR(OMIT)~='XUE$PP_SUCCESS';
15:23 JUL 28 '97 XUE_MACRO_C.:E05SI                                        21   
  741         DCL XUE$PP_SUCCESS ENTRY (1);
  742         %ENDIF;
  743      %MEND;

