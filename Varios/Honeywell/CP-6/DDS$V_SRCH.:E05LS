VERSION E05

PL6.E3A0      #001=DDS$V_SRCH File=DDS$V_SRCH.:E05TSI                            TUE 07/29/97 14:24 Page:1    
        1        1        /*M* DDS$V_SRCH Evaluate variable reference at structure level. */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMR,PLM=5,IND=5,CSU=3,EXM=0,ECU=3,MOC,DCI=5,CRT=5 */
        8        8        %SET LISTSUB='1'B;
        9        9        /*F* NAME: DDS$V_SRCH
       10       10             PURPOSE: To validate the specified variable.
       11       11             DESCRIPTION: Searches the variables table for the specified variable. */
       12       12        /*D* NAME: DDS$V_SRCH
       13       13             CALL: CALL DDS$V_SRCH(NODE$,ENTRY$,ENTRY#) ALTRET(found);
       14       14             INTERFACE: DDF$DBG_#
       15       15                        DDF$VREBL_#
       16       16                        DDF$N_VREBL
       17       17             ENVIRONMENT: Delta.
       18       18             INPUT: NODE$ - Pointer to variable (.) list.
       19       19             OUTPUT: Points to finest variable name.
       20       20                     ENTRY$ - Pointer to entry in variable table.
       21       21                     ENTRY# - Array of entry numbers for each level item found.
       22       22                     ENTRY#.C - Deepest level variable text index not found,
       23       23                                returned only if search fails.
       24       24             SCRATCH: Local auto.
       25       25             DESCRIPTION: This routine validates a structure reference on a
       26       26             nested logical block basis. If successful the array ENTRY#.E
       27       27             contains the variables record entry numbers for each successive
       28       28             level of the structure reference. If not successful then ENTRY#.C
       29       29             contains the parse output subnode index of the highest structure
       30       30             level not found, for error reporting purposes. Three types of
       31       31             structure references are accepted.
       32       32             1. PL-6 : The reference must be completely specified, i.e., every
       33       33                       structure level must be present. ENTRY#.E is built as
       34       34                       each level reference is found.
       35       35             2. COBOL simple : A single level reference is accepted. The first
       36       36                       such variable that satisfies this reference is considered
       37       37                       to be the desired reference. ENTRY#.E is built by scanning
PL6.E3A0      #001=DDS$V_SRCH File=DDS$V_SRCH.:E05TSI                            TUE 07/29/97 14:24 Page:2    
       38       38                       the variables table backwards.
       39       39             3. COBOL complex : A multi-level reference is accepted. The level 1
       40       40                       item must be specified. Any number of successive level
       41       41                       items may be specified, as long as at least one of them
       42       42                       is specified. ENTRY#.E is built by scanning the variables
       43       43                       table backwards, starting at the last, i.e., the highest
       44       44                       level item found.
       45       45             Note that simple references in COBOL may be ambiguous, the first
       46       46             reference that satisfies the preceeding criteria for COBOL simple
       47       47             references will be considered to be a successful reference.
       48       48             The restriction for complex COBOL references that the level 1
       49       49             item must be specified allows ambiguous references only as far as
       50       50             the COBOL compiler is concerned, such references are unique as far
       51       51             as DELTA is concerned. This routine ALTRETURNs when successful,
       52       52             RETURNs when unsuccessful. */
       53       53                                                /**/
       54       54        DDS$V_SRCH: PROC(NODE$,ENTRY$,ENTRY#) ALTRET;
       55       55                                                /**/
       56       56    1   DCL NODE$ PTR;                          /* Pointer to node input */
       57       57    1   DCL ENTRY$ PTR;                         /* Pointer to entry output */
       58       58        %INCLUDE DD$BASED;
       59     1361        %DD$VENTRY;                             /* Array of entry numbers output */
       60     1366    1   DCL REVERSE BIT(1) ALIGNED;             /* COBOL flag */
       61     1367    1   DCL DEEPEST UBIN;                       /* Deepest level on failure */
       62     1368    1   DCL JX UBIN;                            /* Temp for index */
       63     1369    1   DCL IX SBIN;                            /* Temp for index */
       64     1370    1   DCL COUNT SBIN;                         /* Temp for count of qualifiers */
       65     1371    1   DCL VL$ PTR;                            /* Temp pointer to variables record */
       66     1372    1   DCL CLB$ PTR;                      /* Temp pointer for current logical block */
       67     1373    1   DCL TSYM$ PTR;                /* Temp for pointing to current qualifier text */
       68     1374    1   DCL TEMP$ PTR;                          /* Temp pointer */
       69     1375    1   DCL TMPLVL SBIN;                        /* Temp for lexical level */
       70     1376    1   DCL LBLVL SBIN;                    /* Temp for logical block lexical level */
       71     1377    1   DCL VX SBIN;                            /* Temp for current entry number */
       72     1378    1   DCL NP# SBIN;                           /* Temp for name pointer */
       73     1379    1   DCL VLEND SBIN;                    /* Temp for end of table this lexlevel */
       74     1380    1   DCL LASTLVL UBIN;                       /* Last level found for COBOL */
PL6.E3A0      #001=DDS$V_SRCH File=DDS$V_SRCH.:E05TSI                            TUE 07/29/97 14:24 Page:3    
       75     1381    1   DCL SRCH_TYPE UBIN;                     /* Code for search type */
       76     1382        /*D* VX, VLEND, & NP# Must be SBIN */
       77     1383        %INCLUDE DD_ERR_C;                      /* Error code %subs */
       78     1780        %INCLUDE DD_SUBS_C;                     /* Commonly used %subs */
       79     2051        %INCLUDE DD_PSUBS_C;                    /* %Subs for parse output nodes */
       80     2526        %INCLUDE XU_MACRO_C;                    /* M$PARSE macros */
       81     5632        %PARSE$OUT (NAME=POB,NSUBLKS=NSB,STCLASS=BASED);
       82     5677        %INCLUDE B$OBJECT_C;                    /* Run unit templates */
       83     9107        %B$DNAME;
       84     9126        %B$LOGBLK (STCLASS="BASED(CLB$)");
       85     9157        %COMPILERIDSUBS;
       86     9173        %B$VREBL (STCLASS="BASED(VL$)");
       87     9337        %VREBLSUBS;
       88     9345        %VREBL_DATATYPES;
       89     9420        %TEXT$C;
       90     9425    1   DCL D_SYMBOLS BIT(1) ALIGNED SYMREF;
       91     9426        %INCLUDE XUH_MACRO_C;
       92     9510        %INCLUDE DD_SD_M;                       /* "STATIC DATA" */
       93    10846        %S_D;
       94    12164        %INCLUDE B$TABLES_C;
       95    12272        %B$XL_UPPER(NAME=XLATE_TABLE);
       96    12276    1   DCL DDF$DBG_# ENTRY(2) ALTRET;
       97    12277    1   DCL DDF$VREBL_# ENTRY(2) ALTRET;
       98    12278    1   DCL DDF$N_VREBL ENTRY(1) ALTRET;
       99    12279    1   DCL DDF$P_VREBL ENTRY(1) ALTRET;
      100    12280    1   DCL DDE$ERROR ENTRY(0);
      101    12281                                                /**/
      102    12282    1        DEEPEST = 0;
      103    12283    1        IF NODE$ -> POB.CODE = 88 /* SYMLISTC_CODE */
      104    12284    1        THEN REVERSE = '1'B;
      105    12285    1        ELSE REVERSE = '0'B;
      106    12286    1        COUNT = NODE$ -> POB.NSB;
      107    12287    1        IF (NOT S_D.SCHEMA)
      108    12288    1          OR (NOT S_D.QSCH.OK)
      109    12289    1          OR (S_D.DBG$ = ADDR(NIL))
      110    12290    1          OR (S_D.VREBL$ = ADDR(NIL))
      111    12291    1          OR (NOT D_SYMBOLS)
PL6.E3A0      #001=DDS$V_SRCH File=DDS$V_SRCH.:E05TSI                            TUE 07/29/97 14:24 Page:4    
      112    12292    1        THEN GOTO RETN;                    /* Schema cannot be accessed */
      113    12293    1        IF ( S_D.SYNTAX = %COBOLID ) OR
      114    12294    1          ( S_D.SYNTAX = %FPLID )
      115    12295    1        THEN IF COUNT = 1
      116    12296    1             THEN SRCH_TYPE = 1;
      117    12297    1             ELSE SRCH_TYPE = 2;
      118    12298    1        ELSE SRCH_TYPE = 0;
      119    12299    1        CLB$ = PINCRW( S_D.LB$, S_D.QSCH.LB# * SIZEW( B$LOGBLK ) );
      120    12300                                                /* Loop on logical block entrys */
      121    12301    1   LOOP1: ;
      122    12302    1        LBLVL = B$LOGBLK.LEXLVL;
      123    12303    1        VX = B$LOGBLK.VAOFFST / SIZEW( B$VREBL );
      124    12304    1        VLEND = B$LOGBLK.VASIZE + VX - 1;
      125    12305    1        CALL DDF$VREBL_#( VX, VL$ ) ALTRET( NFOUND1 );
      126    12306    2        DO IX = 1 TO COUNT;
      127    12307                                                /* Get variable */
      128    12308    2             JX = IX - 1;
      129    12309    2             IF REVERSE
      130    12310    2             THEN JX = COUNT - JX - 1;
      131    12311    2             TSYM$ = NODE$ -> POB.SUBLK$( JX ) -> POB.SUBLK$( 0 );
      132    12312    3             DO WHILE ( VX <= VLEND );
      133    12313    3                  TMPLVL = B$VREBL.LEVEL;
      134    12314    3                  IF B$VREBL.DATATYP ~= %NULL_DATATYPE
      135    12315    4                  THEN DO CASE ( SRCH_TYPE );
      136    12316    4                    CASE ( 0 );            /* PL-6 */
      137    12317    4                       IF TMPLVL = IX
      138    12318    4                       THEN CALL CHECK_NAME ALTRET( FOUND1 );
      139    12319    4                       ELSE IF TMPLVL < IX
      140    12320    4                            THEN GOTO NFOUND1;
      141    12321    4                    CASE ( 1 );            /* COBOL, count = 1 */
      142    12322    4                       CALL CHECK_NAME ALTRET( FOUND1 );
      143    12323    4                    CASE ( 2 );            /* COBOL, count > 1 */
      144    12324    4                       IF IX = 1
      145    12325    4                       THEN IF TMPLVL = 1
      146    12326    4                            THEN CALL CHECK_NAME ALTRET( FOUND1 );
      147    12327    4                            ELSE ;
      148    12328    4                       ELSE IF TMPLVL > LASTLVL
PL6.E3A0      #001=DDS$V_SRCH File=DDS$V_SRCH.:E05TSI                            TUE 07/29/97 14:24 Page:5    
      149    12329    4                            THEN CALL CHECK_NAME ALTRET( FOUND1 );
      150    12330    4                            ELSE GOTO NFOUND1;
      151    12331    4                    END;                   /* "DO CASE ( SRCH_TYPE )" */
      152    12332                                                /* Get next variable */
      153    12333    3                  CALL NEXT_VREBL ALTRET( ARETN1 );
      154    12334    4                  DO WHILE ( '0'B );
      155    12335    4   ARETN1:             ;
      156    12336    4                       IF VX <= VLEND
      157    12337    4                       THEN GOTO RETNBUG;
      158    12338    4                     END;
      159    12339    3                END;                       /* "DO WHILE" */
      160    12340    2             GOTO NFOUND1;                 /* Try popping up a level */
      161    12341    2   FOUND1:   ;
      162    12342    2             LASTLVL = TMPLVL;             /* For COBOL */
      163    12343    2             IF DEEPEST < IX
      164    12344    2             THEN DEEPEST = IX;
      165    12345    2             ENTRY#.E( IX ) = VX;
      166    12346    2             IF IX = COUNT
      167    12347    2             THEN GOTO FOUND_IT;
      168    12348    2             CALL NEXT_VREBL ALTRET( ARETN2 ); /* Get next variable */
      169    12349    3             DO WHILE ( '0'B );
      170    12350    3   ARETN2:        ;
      171    12351    3                  IF VX <= VLEND
      172    12352    3                  THEN GOTO RETNBUG;
      173    12353    3                END;
      174    12354    2           END;                            /* "DO IX" */
      175    12355                                                /* Got it - non-error return */
      176    12356    1   FOUND_IT: ;
      177    12357    1        IF SRCH_TYPE ~= 0
      178    12358    2        THEN DO;                           /* Fill ENTRY#.E for COBOL */
      179    12359    2             JX = VX;
      180    12360    2             COUNT = B$VREBL.LEVEL;
      181    12361    2             LASTLVL = COUNT;
      182    12362    3             DO IX = 1 TO COUNT;
      183    12363    4                  DO WHILE ( ( B$VREBL.DATATYP = %NULL_DATATYPE ) OR
      184    12364    4                    ( B$VREBL.LEVEL ~= LASTLVL ) );
      185    12365    4                       CALL DDF$P_VREBL( VL$ ) ALTRET( RETNBUG );
PL6.E3A0      #001=DDS$V_SRCH File=DDS$V_SRCH.:E05TSI                            TUE 07/29/97 14:24 Page:6    
      186    12366    4                       JX = JX - 1;
      187    12367    4                     END;
      188    12368    3                  ENTRY#.E( LASTLVL ) = JX;
      189    12369    3                  LASTLVL = LASTLVL - 1;
      190    12370    3                END;
      191    12371    2             CALL DDF$VREBL_#( VX, VL$ ) ALTRET( RETNBUG );
      192    12372    2           END;                            /* Fill ENTRY#.E for COBOL */
      193    12373    1        ENTRY$ = VL$;
      194    12374    1        ENTRY#.C = COUNT;
      195    12375    1        ALTRETURN;
      196    12376                                                /**/
      197    12377    1   NFOUND1: ;
      198    12378    1        IF LBLVL = 1
      199    12379    1        THEN GOTO RETN;                    /* Ran out of lower level entrys */
      200    12380    2        DO WHILE ( '1'B );            /* Decrement to next lowest logical block */
      201    12381    2             CLB$ = PINCRW(CLB$,-SIZEW(B$LOGBLK));
      202    12382    2             IF CLB$ < S_D.LB$
      203    12383    3             THEN DO;
      204    12384    3                  S_D.ERROR = 22;    /* E@UERR11 */
      205    12385    3                  CALL DDE$ERROR;
      206    12386    3                  GOTO RETN;
      207    12387    3                END;
      208    12388    2             IF B$LOGBLK.LEXLVL < LBLVL
      209    12389    2             THEN GOTO LOOP1;              /* Got next lowest level */
      210    12390    2           END;                       /* Decrement to next lowest logical block */
      211    12391                                                /**/
      212    12392    1   RETNBUG: ;
      213    12393    1        S_D.ERROR = 502;              /* E@DELBUG */
      214    12394    1        CALL DDE$ERROR;
      215    12395                                                /**/
      216    12396    1   RETN: ;
      217    12397    1        IF REVERSE
      218    12398    1        THEN ENTRY#.C = COUNT - DEEPEST - 1;
      219    12399    1        ELSE ENTRY#.C = DEEPEST;
      220    12400                                                /**/
      221    12401    1        RETURN;
      222    12402        %EJECT;
PL6.E3A0      #001=DDS$V_SRCH File=DDS$V_SRCH.:E05TSI                            TUE 07/29/97 14:24 Page:7    
      223    12403        /*F* NAME: CHECK_NAME
      224    12404             PURPOSE: Checks current variable name against desired one.
      225    12405             DESCRIPTION: Compares the name of the current variable entry with
      226    12406                          the Textc name of the desired variable entry. */
      227    12407        /*D* NAME: CHECK_NAME
      228    12408             CALL: CALL CHECK_NAME ALTRET( match );
      229    12409             INPUT: TSYM$ - Pointer to desired variable name.
      230    12410                    VL$ - Pointer to current variable entry.
      231    12411             SCRATCH: NP#, TEMP$
      232    12412             DESCRIPTION: Obtains the variable's name pointer from the current
      233    12413                          variable (B$VREBL.NPOINTER). Calls DDF$DBG_# to get a
      234    12414                          pointer to the current variable's name. Compares the
      235    12415                          two, if they match then ALTRETURNs, else RETURNs. */
      236    12416                                                /**/
      237    12417    1   CHECK_NAME: PROC ALTRET;
      238    12418                                                /**/
      239    12419    2        NP# = B$VREBL.NPOINTER;
      240    12420    2        CALL DDF$DBG_#( NP#, TEMP$ ) ALTRET( BADSCH );
      241    12421    2        IF TEMP$ -> B$DNAME.TEXT = TSYM$ -> TEXT$C.TXT
      242    12422    2        THEN ALTRETURN;                    /* Got it, ALTRET */
      243    12423                                                /**/
      244    12424    3        DO WHILE ( '0'B );
      245    12425    3   BADSCH:   S_D.ERROR = 22;         /* E@UERR11 */
      246    12426    3             CALL DDE$ERROR;
      247    12427    3           END;
      248    12428                                                /**/
      249    12429    2        RETURN;
      250    12430                                                /**/
      251    12431    2   END CHECK_NAME;
      252    12432        %EJECT;
PL6.E3A0      #001=DDS$V_SRCH File=DDS$V_SRCH.:E05TSI                            TUE 07/29/97 14:24 Page:8    
      253    12433        /*F* NAME: NEXT_VREBL
      254    12434             PURPOSE: To increment to next entry in variables record.
      255    12435            DESCRIPTION: Increments VX & VL$ based upon array type & number of dimensions */
      256    12436        /*D* NAME: NEXT_VREBL
      257    12437             CALL: CALL NEXT_VREBL ALTRET( error );
      258    12438             INTERFACE: VL$
      259    12439             ENVIRONMENT: DDS$V_SRCH active.
      260    12440             INPUT: VL$ - points to current entry.
      261    12441                    VX - Entry number of current variable.
      262    12442             OUTPUT: VL$ - tPoints to next entry.
      263    12443                     VX - Entry number of current variable.
      264    12444             DESCRIPTION: VX & VL$ point to the current entry. VX & VL$ are
      265    12445             incremented past any continuation entrys to the next entry. */
      266    12446                                                /**/
      267    12447    1   NEXT_VREBL: PROC ALTRET;
      268    12448                                                /**/
      269    12449    2   DCL DIMS SBIN;
      270    12450    2   DCL ATYP UBIN;
      271    12451    2   DCL DTYP UBIN;
      272    12452                                                /**/
      273    12453    2        DIMS = B$VREBL.DIMS;               /* Number of dimensions */
      274    12454    2        ATYP = B$VREBL.ARRAYTYP;           /* Array type code */
      275    12455    2        VX = VX + 1;
      276    12456    2   NEXT_VAR: ;
      277    12457    2        CALL DDF$N_VREBL( VL$ ) ALTRET( ARET );
      278    12458    2        DTYP = B$VREBL.DATATYP;
      279    12459    2        IF DTYP = %ENUMTYPE_DATATYPE OR DTYP = %SET_DATATYPE
      280    12460    3        THEN DO;
      281    12461    3             VX = VX + 1;
      282    12462    3             GOTO NEXT_VAR;
      283    12463    3           END;
      284    12464    2        IF B$VREBL.DATATYP ~= %NULL_DATATYPE
      285    12465    2        THEN IF ( ATYP = %VIRTUAL_ARRAY ) OR ( ATYP = %ADJUSTABLE_ARRAY )
      286    12466    3             THEN DO;
      287    12467    3                  VX = VX + ( DIMS + 2 ) / 3;
      288    12468    3                  CALL DDF$VREBL_#( VX, VL$ ) ALTRET( ARET );
      289    12469    3                END;
PL6.E3A0      #001=DDS$V_SRCH File=DDS$V_SRCH.:E05TSI                            TUE 07/29/97 14:24 Page:9    
      290    12470    2             ELSE IF ATYP = %REAL_ARRAY
      291    12471    3                  THEN DO;
      292    12472    3                       VX = VX + ( DIMS + 5 ) / 6;
      293    12473    3                       CALL DDF$VREBL_#( VX, VL$ ) ALTRET( ARET );
      294    12474    3                     END;
      295    12475                                                /**/
      296    12476    2        RETURN;
      297    12477                                                /**/
      298    12478    2   ARET: ;
      299    12479    2        ALTRETURN;
      300    12480                                                /**/
      301    12481    2   END NEXT_VREBL;
      302    12482                                                /**/
      303    12483    1   END DDS$V_SRCH;

PL6.E3A0      #001=DDS$V_SRCH File=DDS$V_SRCH.:E05TSI                            TUE 07/29/97 14:24 Page:10   
--  Include file information  --

   B$TABLES_C.:E05TOU  cannot be made into a system file and is referenced.
   DD_SD_M.:E05TOU  is referenced.
   XUH_MACRO_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   DD_PSUBS_C.:E05TOU  is referenced.
   DD_SUBS_C.:E05TOU  is referenced.
   DD_ERR_C.:E05TOU  is referenced.
   DD$BASED.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure DDS$V_SRCH.

   Procedure DDS$V_SRCH requires 370 words for executable code.
   Procedure DDS$V_SRCH requires 28 words of local(AUTO) storage.

    No errors detected in file DDS$V_SRCH.:E05TSI    .

PL6.E3A0      #001=DDS$V_SRCH File=DDS$V_SRCH.:E05TSI                            TUE 07/29/97 14:24 Page:11   

 Object Unit name= DDS$V_SRCH                                 File name= DDS$V_SRCH.:E05TOU
 UTS= JUL 29 '97 14:24:52.36 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   Proc  even  none   370    562  DDS$V_SRCH

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     0      0   yes    yes     yes      Std        3  DDS$V_SRCH

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes          ~proc      0 B_POINTER
 yes     yes           Std       1 DDF$P_VREBL
 yes     yes           Std       2 DDF$VREBL_#
         yes           Std       0 DDE$ERROR
 yes     yes           Std       2 DDF$DBG_#
 yes     yes           Std       1 DDF$N_VREBL
                       nStd      0 X66_AUTO_3
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
                       nStd      0 X66_ARET
PL6.E3A0      #001=DDS$V_SRCH File=DDS$V_SRCH.:E05TSI                            TUE 07/29/97 14:24 Page:12   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     D_SYMBOLS                        r    S_D$                             r    B$XL_UPPER$
     B_VECTNIL
PL6.E3A0      #001=DDS$V_SRCH File=DDS$V_SRCH.:E05TSI                            TUE 07/29/97 14:24 Page:13   


        1        1        /*M* DDS$V_SRCH Evaluate variable reference at structure level. */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMR,PLM=5,IND=5,CSU=3,EXM=0,ECU=3,MOC,DCI=5,CRT=5 */
        8        8        %SET LISTSUB='1'B;
        9        9        /*F* NAME: DDS$V_SRCH
       10       10             PURPOSE: To validate the specified variable.
       11       11             DESCRIPTION: Searches the variables table for the specified variable. */
       12       12        /*D* NAME: DDS$V_SRCH
       13       13             CALL: CALL DDS$V_SRCH(NODE$,ENTRY$,ENTRY#) ALTRET(found);
       14       14             INTERFACE: DDF$DBG_#
       15       15                        DDF$VREBL_#
       16       16                        DDF$N_VREBL
       17       17             ENVIRONMENT: Delta.
       18       18             INPUT: NODE$ - Pointer to variable (.) list.
       19       19             OUTPUT: Points to finest variable name.
       20       20                     ENTRY$ - Pointer to entry in variable table.
       21       21                     ENTRY# - Array of entry numbers for each level item found.
       22       22                     ENTRY#.C - Deepest level variable text index not found,
       23       23                                returned only if search fails.
       24       24             SCRATCH: Local auto.
       25       25             DESCRIPTION: This routine validates a structure reference on a
       26       26             nested logical block basis. If successful the array ENTRY#.E
       27       27             contains the variables record entry numbers for each successive
       28       28             level of the structure reference. If not successful then ENTRY#.C
       29       29             contains the parse output subnode index of the highest structure
       30       30             level not found, for error reporting purposes. Three types of
       31       31             structure references are accepted.
       32       32             1. PL-6 : The reference must be completely specified, i.e., every
       33       33                       structure level must be present. ENTRY#.E is built as
       34       34                       each level reference is found.
       35       35             2. COBOL simple : A single level reference is accepted. The first
       36       36                       such variable that satisfies this reference is considered
PL6.E3A0      #001=DDS$V_SRCH File=DDS$V_SRCH.:E05TSI                            TUE 07/29/97 14:24 Page:14   
       37       37                       to be the desired reference. ENTRY#.E is built by scanning
       38       38                       the variables table backwards.
       39       39             3. COBOL complex : A multi-level reference is accepted. The level 1
       40       40                       item must be specified. Any number of successive level
       41       41                       items may be specified, as long as at least one of them
       42       42                       is specified. ENTRY#.E is built by scanning the variables
       43       43                       table backwards, starting at the last, i.e., the highest
       44       44                       level item found.
       45       45             Note that simple references in COBOL may be ambiguous, the first
       46       46             reference that satisfies the preceeding criteria for COBOL simple
       47       47             references will be considered to be a successful reference.
       48       48             The restriction for complex COBOL references that the level 1
       49       49             item must be specified allows ambiguous references only as far as
       50       50             the COBOL compiler is concerned, such references are unique as far
       51       51             as DELTA is concerned. This routine ALTRETURNs when successful,
       52       52             RETURNs when unsuccessful. */
       53       53                                                /**/
       54       54        DDS$V_SRCH: PROC(NODE$,ENTRY$,ENTRY#) ALTRET;

     54  0 000000   000000 700200 xent  DDS$V_SRCH   TSX0  ! X66_AUTO_3
         0 000001   000034 000003                    ZERO    28,3

       55       55                                                /**/
       56       56    1   DCL NODE$ PTR;                          /* Pointer to node input */
       57       57    1   DCL ENTRY$ PTR;                         /* Pointer to entry output */
       58       58        %INCLUDE DD$BASED;
       59     1361        %DD$VENTRY;                             /* Array of entry numbers output */
       60     1366    1   DCL REVERSE BIT(1) ALIGNED;             /* COBOL flag */
       61     1367    1   DCL DEEPEST UBIN;                       /* Deepest level on failure */
       62     1368    1   DCL JX UBIN;                            /* Temp for index */
       63     1369    1   DCL IX SBIN;                            /* Temp for index */
       64     1370    1   DCL COUNT SBIN;                         /* Temp for count of qualifiers */
       65     1371    1   DCL VL$ PTR;                            /* Temp pointer to variables record */
       66     1372    1   DCL CLB$ PTR;                      /* Temp pointer for current logical block */
       67     1373    1   DCL TSYM$ PTR;                /* Temp for pointing to current qualifier text */
       68     1374    1   DCL TEMP$ PTR;                          /* Temp pointer */
       69     1375    1   DCL TMPLVL SBIN;                        /* Temp for lexical level */
PL6.E3A0      #001=DDS$V_SRCH File=DDS$V_SRCH.:E05TSI                            TUE 07/29/97 14:24 Page:15   
       70     1376    1   DCL LBLVL SBIN;                    /* Temp for logical block lexical level */
       71     1377    1   DCL VX SBIN;                            /* Temp for current entry number */
       72     1378    1   DCL NP# SBIN;                           /* Temp for name pointer */
       73     1379    1   DCL VLEND SBIN;                    /* Temp for end of table this lexlevel */
       74     1380    1   DCL LASTLVL UBIN;                       /* Last level found for COBOL */
       75     1381    1   DCL SRCH_TYPE UBIN;                     /* Code for search type */
       76     1382        /*D* VX, VLEND, & NP# Must be SBIN */
       77     1383        %INCLUDE DD_ERR_C;                      /* Error code %subs */
       78     1780        %INCLUDE DD_SUBS_C;                     /* Commonly used %subs */
       79     2051        %INCLUDE DD_PSUBS_C;                    /* %Subs for parse output nodes */
       80     2526        %INCLUDE XU_MACRO_C;                    /* M$PARSE macros */
       81     5632        %PARSE$OUT (NAME=POB,NSUBLKS=NSB,STCLASS=BASED);
       82     5677        %INCLUDE B$OBJECT_C;                    /* Run unit templates */
       83     9107        %B$DNAME;
       84     9126        %B$LOGBLK (STCLASS="BASED(CLB$)");
       85     9157        %COMPILERIDSUBS;
       86     9173        %B$VREBL (STCLASS="BASED(VL$)");
       87     9337        %VREBLSUBS;
       88     9345        %VREBL_DATATYPES;
       89     9420        %TEXT$C;
       90     9425    1   DCL D_SYMBOLS BIT(1) ALIGNED SYMREF;
       91     9426        %INCLUDE XUH_MACRO_C;
       92     9510        %INCLUDE DD_SD_M;                       /* "STATIC DATA" */
       93    10846        %S_D;
       94    12164        %INCLUDE B$TABLES_C;
       95    12272        %B$XL_UPPER(NAME=XLATE_TABLE);
       96    12276    1   DCL DDF$DBG_# ENTRY(2) ALTRET;
       97    12277    1   DCL DDF$VREBL_# ENTRY(2) ALTRET;
       98    12278    1   DCL DDF$N_VREBL ENTRY(1) ALTRET;
       99    12279    1   DCL DDF$P_VREBL ENTRY(1) ALTRET;
      100    12280    1   DCL DDE$ERROR ENTRY(0);
      101    12281                                                /**/
      102    12282    1        DEEPEST = 0;

  12282  0 000002   200007 450100                    STZ     DEEPEST,,AUTO

      103    12283    1        IF NODE$ -> POB.CODE = 88 /* SYMLISTC_CODE */
PL6.E3A0      #001=DDS$V_SRCH File=DDS$V_SRCH.:E05TSI                            TUE 07/29/97 14:24 Page:16   

  12283  0 000003   200003 470500                    LDP0    @NODE$,,AUTO
         0 000004   000000 471500                    LDP1    0,,PR0
         0 000005   100000 720100                    LXL0    0,,PR1
         0 000006   000130 100003                    CMPX0   88,DU
         0 000007   000013 601000 0                  TNZ     s:12285

      104    12284    1        THEN REVERSE = '1'B;

  12284  0 000010   400000 236003                    LDQ     -131072,DU
         0 000011   200006 756100                    STQ     REVERSE,,AUTO
         0 000012   000014 710000 0                  TRA     s:12286

      105    12285    1        ELSE REVERSE = '0'B;

  12285  0 000013   200006 450100                    STZ     REVERSE,,AUTO

      106    12286    1        COUNT = NODE$ -> POB.NSB;

  12286  0 000014   100001 236100                    LDQ     1,,PR1
         0 000015   000022 772000                    QRL     18
         0 000016   200012 756100                    STQ     COUNT,,AUTO

      107    12287    1        IF (NOT S_D.SCHEMA)

  12287  0 000017   000000 473400 xsym               LDP3    S_D$
         0 000020   300052 234100                    SZN     42,,PR3
         0 000021   000377 605000 0                  TPL     RETN
         0 000022   300733 234100                    SZN     475,,PR3
         0 000023   000377 605000 0                  TPL     RETN
         0 000024   301005 236100                    LDQ     517,,PR3
         0 000025   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000026   000377 600000 0                  TZE     RETN
         0 000027   301016 236100                    LDQ     526,,PR3
         0 000030   000001 116000 xsym               CMPQ    B_VECTNIL+1
         0 000031   000377 600000 0                  TZE     RETN
         0 000032   000000 234000 xsym               SZN     D_SYMBOLS
PL6.E3A0      #001=DDS$V_SRCH File=DDS$V_SRCH.:E05TSI                            TUE 07/29/97 14:24 Page:17   
         0 000033   000377 605000 0                  TPL     RETN

      108    12288    1          OR (NOT S_D.QSCH.OK)
      109    12289    1          OR (S_D.DBG$ = ADDR(NIL))
      110    12290    1          OR (S_D.VREBL$ = ADDR(NIL))
      111    12291    1          OR (NOT D_SYMBOLS)
      112    12292    1        THEN GOTO RETN;                    /* Schema cannot be accessed */
      113    12293    1        IF ( S_D.SYNTAX = %COBOLID ) OR

  12293  0 000034   305235 235100                    LDA     2717,,PR3
         0 000035   000003 115007                    CMPA    3,DL
         0 000036   000041 600000 0                  TZE     s:12295
         0 000037   000010 115007                    CMPA    8,DL
         0 000040   000052 601000 0                  TNZ     s:12298

      114    12294    1          ( S_D.SYNTAX = %FPLID )
      115    12295    1        THEN IF COUNT = 1

  12295  0 000041   200012 235100                    LDA     COUNT,,AUTO
         0 000042   000001 115007                    CMPA    1,DL
         0 000043   000047 601000 0                  TNZ     s:12297

      116    12296    1             THEN SRCH_TYPE = 1;

  12296  0 000044   000001 235007                    LDA     1,DL
         0 000045   200025 755100                    STA     SRCH_TYPE,,AUTO
         0 000046   000053 710000 0                  TRA     s:12299

      117    12297    1             ELSE SRCH_TYPE = 2;

  12297  0 000047   000002 235007                    LDA     2,DL
         0 000050   200025 755100                    STA     SRCH_TYPE,,AUTO
         0 000051   000053 710000 0                  TRA     s:12299

      118    12298    1        ELSE SRCH_TYPE = 0;

  12298  0 000052   200025 450100                    STZ     SRCH_TYPE,,AUTO
PL6.E3A0      #001=DDS$V_SRCH File=DDS$V_SRCH.:E05TSI                            TUE 07/29/97 14:24 Page:18   

      119    12299    1        CLB$ = PINCRW( S_D.LB$, S_D.QSCH.LB# * SIZEW( B$LOGBLK ) );

  12299  0 000053   300740 721100                    LXL1    480,,PR3
         0 000054   301037 474500                    LDP4    543,,PR3
         0 000055   000000 635011                    EAA     0,X1
         0 000056   000020 771000                    ARL     16
         0 000057   400000 635505                    EPPR5   0,AL,PR4
         0 000060   200014 455500                    STP5    CLB$,,AUTO

  12299  0 000061                       LOOP1        null
      120    12300                                                /* Loop on logical block entrys */
      121    12301    1   LOOP1: ;
      122    12302    1        LBLVL = B$LOGBLK.LEXLVL;

  12302  0 000061   200014 470500                    LDP0    CLB$,,AUTO
         0 000062   000001 236100                    LDQ     1,,PR0
         0 000063   000777 376007                    ANQ     511,DL
         0 000064   200020 756100                    STQ     LBLVL,,AUTO

      123    12303    1        VX = B$LOGBLK.VAOFFST / SIZEW( B$VREBL );

  12303  0 000065   000003 236100                    LDQ     3,,PR0
         0 000066   000022 772000                    QRL     18
         0 000067   000005 506007                    DIV     5,DL
         0 000070   200021 756100                    STQ     VX,,AUTO

      124    12304    1        VLEND = B$LOGBLK.VASIZE + VX - 1;

  12304  0 000071   000003 236100                    LDQ     3,,PR0
         0 000072   777777 376007                    ANQ     -1,DL
         0 000073   200021 036100                    ADLQ    VX,,AUTO
         0 000074   000001 136007                    SBLQ    1,DL
         0 000075   200023 756100                    STQ     VLEND,,AUTO

      125    12305    1        CALL DDF$VREBL_#( VX, VL$ ) ALTRET( NFOUND1 );

PL6.E3A0      #001=DDS$V_SRCH File=DDS$V_SRCH.:E05TSI                            TUE 07/29/97 14:24 Page:19   
  12305  0 000076   200013 631500                    EPPR1   VL$,,AUTO
         0 000077   200033 451500                    STP1    DTYP+2,,AUTO
         0 000100   200021 633500                    EPPR3   VX,,AUTO
         0 000101   200032 453500                    STP3    DTYP+1,,AUTO
         0 000102   200032 630500                    EPPR0   DTYP+1,,AUTO
         0 000103   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000104   000000 701000 xent               TSX1    DDF$VREBL_#
         0 000105   000344 702000 0                  TSX2    NFOUND1

      126    12306    2        DO IX = 1 TO COUNT;

  12306  0 000106   000001 235007                    LDA     1,DL
         0 000107   200011 755100                    STA     IX,,AUTO
         0 000110   000246 710000 0                  TRA     s:12354+1

      127    12307                                                /* Get variable */
      128    12308    2             JX = IX - 1;

  12308  0 000111   200011 235100                    LDA     IX,,AUTO
         0 000112   000001 135007                    SBLA    1,DL
         0 000113   200010 755100                    STA     JX,,AUTO

      129    12309    2             IF REVERSE

  12309  0 000114   200006 234100                    SZN     REVERSE,,AUTO
         0 000115   000122 605000 0                  TPL     s:12311

      130    12310    2             THEN JX = COUNT - JX - 1;

  12310  0 000116   200012 236100                    LDQ     COUNT,,AUTO
         0 000117   200010 136100                    SBLQ    JX,,AUTO
         0 000120   000001 136007                    SBLQ    1,DL
         0 000121   200010 756100                    STQ     JX,,AUTO

      131    12311    2             TSYM$ = NODE$ -> POB.SUBLK$( JX ) -> POB.SUBLK$( 0 );

  12311  0 000122   200003 470500                    LDP0    @NODE$,,AUTO
PL6.E3A0      #001=DDS$V_SRCH File=DDS$V_SRCH.:E05TSI                            TUE 07/29/97 14:24 Page:20   
         0 000123   000000 471500                    LDP1    0,,PR0
         0 000124   200010 720100                    LXL0    JX,,AUTO
         0 000125   100003 473510                    LDP3    3,X0,PR1
         0 000126   300003 236100                    LDQ     3,,PR3
         0 000127   200015 756100                    STQ     TSYM$,,AUTO

      132    12312    3             DO WHILE ( VX <= VLEND );

  12312  0 000130   200021 236100                    LDQ     VX,,AUTO
         0 000131   200023 116100                    CMPQ    VLEND,,AUTO
         0 000132   000217 605400 0                  TPNZ    s:12340

      133    12313    3                  TMPLVL = B$VREBL.LEVEL;

  12313  0 000133   200013 470500                    LDP0    VL$,,AUTO
         0 000134   000001 236100                    LDQ     1,,PR0
         0 000135   000014 772000                    QRL     12
         0 000136   000077 376007                    ANQ     63,DL
         0 000137   200017 756100                    STQ     TMPLVL,,AUTO

      134    12314    3                  IF B$VREBL.DATATYP ~= %NULL_DATATYPE

  12314  0 000140   000000 236100                    LDQ     0,,PR0
         0 000141   000374 376007                    ANQ     252,DL
         0 000142   000360 116007                    CMPQ    240,DL
         0 000143   000206 600000 0                  TZE     s:12333

      135    12315    4                  THEN DO CASE ( SRCH_TYPE );

  12315  0 000144   200025 235100                    LDA     SRCH_TYPE,,AUTO
         0 000145   000003 115007                    CMPA    3,DL
         0 000146   000150 602005 0                  TNC     s:12315+4,AL
         0 000147   000206 710000 0                  TRA     s:12333
         0 000150   000153 710000 0                  TRA     s:12317
         0 000151   000163 710000 0                  TRA     s:12322
         0 000152   000166 710000 0                  TRA     s:12324

PL6.E3A0      #001=DDS$V_SRCH File=DDS$V_SRCH.:E05TSI                            TUE 07/29/97 14:24 Page:21   
      136    12316    4                    CASE ( 0 );            /* PL-6 */

      137    12317    4                       IF TMPLVL = IX

  12317  0 000153   200017 236100                    LDQ     TMPLVL,,AUTO
         0 000154   200011 116100                    CMPQ    IX,,AUTO
         0 000155   000161 601000 0                  TNZ     s:12319

      138    12318    4                       THEN CALL CHECK_NAME ALTRET( FOUND1 );

  12318  0 000156   000413 701000 0                  TSX1    CHECK_NAME
         0 000157   000220 702000 0                  TSX2    FOUND1
         0 000160   000206 710000 0                  TRA     s:12333

      139    12319    4                       ELSE IF TMPLVL < IX

  12319  0 000161   000344 604000 0                  TMI     NFOUND1
         0 000162   000206 710000 0                  TRA     s:12333

      140    12320    4                            THEN GOTO NFOUND1;
      141    12321    4                    CASE ( 1 );            /* COBOL, count = 1 */

      142    12322    4                       CALL CHECK_NAME ALTRET( FOUND1 );

  12322  0 000163   000413 701000 0                  TSX1    CHECK_NAME
         0 000164   000220 702000 0                  TSX2    FOUND1
         0 000165   000206 710000 0                  TRA     s:12333

      143    12323    4                    CASE ( 2 );            /* COBOL, count > 1 */

      144    12324    4                       IF IX = 1

  12324  0 000166   200011 235100                    LDA     IX,,AUTO
         0 000167   000001 115007                    CMPA    1,DL
         0 000170   000177 601000 0                  TNZ     s:12328

      145    12325    4                       THEN IF TMPLVL = 1
PL6.E3A0      #001=DDS$V_SRCH File=DDS$V_SRCH.:E05TSI                            TUE 07/29/97 14:24 Page:22   

  12325  0 000171   200017 235100                    LDA     TMPLVL,,AUTO
         0 000172   000001 115007                    CMPA    1,DL
         0 000173   000206 601000 0                  TNZ     s:12333

      146    12326    4                            THEN CALL CHECK_NAME ALTRET( FOUND1 );

  12326  0 000174   000413 701000 0                  TSX1    CHECK_NAME
         0 000175   000220 702000 0                  TSX2    FOUND1
         0 000176   000206 710000 0                  TRA     s:12333

      147    12327    4                            ELSE ;
      148    12328    4                       ELSE IF TMPLVL > LASTLVL

  12328  0 000177   200024 236100                    LDQ     LASTLVL,,AUTO
         0 000200   000344 604000 0                  TMI     NFOUND1
         0 000201   200017 116100                    CMPQ    TMPLVL,,AUTO
         0 000202   000344 605000 0                  TPL     NFOUND1

      149    12329    4                            THEN CALL CHECK_NAME ALTRET( FOUND1 );

  12329  0 000203   000413 701000 0                  TSX1    CHECK_NAME
         0 000204   000220 702000 0                  TSX2    FOUND1
         0 000205   000206 710000 0                  TRA     s:12333

      150    12330    4                            ELSE GOTO NFOUND1;
      151    12331    4                    END;                   /* "DO CASE ( SRCH_TYPE )" */

      152    12332                                                /* Get next variable */
      153    12333    3                  CALL NEXT_VREBL ALTRET( ARETN1 );

  12333  0 000206   000456 701000 0                  TSX1    NEXT_VREBL
         0 000207   000211 702000 0                  TSX2    ARETN1

      154    12334    4                  DO WHILE ( '0'B );

  12334  0 000210   000214 710000 0                  TRA     s:12339
PL6.E3A0      #001=DDS$V_SRCH File=DDS$V_SRCH.:E05TSI                            TUE 07/29/97 14:24 Page:23   

  12333  0 000211                       ARETN1       null
      155    12335    4   ARETN1:             ;
      156    12336    4                       IF VX <= VLEND

  12336  0 000211   200021 236100                    LDQ     VX,,AUTO
         0 000212   200023 116100                    CMPQ    VLEND,,AUTO
         0 000213   000371 604400 0                  TMOZ    RETNBUG

      157    12337    4                       THEN GOTO RETNBUG;
      158    12338    4                     END;

      159    12339    3                END;                       /* "DO WHILE" */

  12339  0 000214   200021 236100                    LDQ     VX,,AUTO
         0 000215   200023 116100                    CMPQ    VLEND,,AUTO
         0 000216   000133 604400 0                  TMOZ    s:12313

      160    12340    2             GOTO NFOUND1;                 /* Try popping up a level */

  12340  0 000217   000344 710000 0                  TRA     NFOUND1

  12333  0 000220                       FOUND1       null
      161    12341    2   FOUND1:   ;
      162    12342    2             LASTLVL = TMPLVL;             /* For COBOL */

  12342  0 000220   200017 235100                    LDA     TMPLVL,,AUTO
         0 000221   200024 755100                    STA     LASTLVL,,AUTO

      163    12343    2             IF DEEPEST < IX

  12343  0 000222   200007 236100                    LDQ     DEEPEST,,AUTO
         0 000223   000230 604000 0                  TMI     s:12345
         0 000224   200011 116100                    CMPQ    IX,,AUTO
         0 000225   000230 605000 0                  TPL     s:12345

      164    12344    2             THEN DEEPEST = IX;
PL6.E3A0      #001=DDS$V_SRCH File=DDS$V_SRCH.:E05TSI                            TUE 07/29/97 14:24 Page:24   

  12344  0 000226   200011 235100                    LDA     IX,,AUTO
         0 000227   200007 755100                    STA     DEEPEST,,AUTO

      165    12345    2             ENTRY#.E( IX ) = VX;

  12345  0 000230   200021 235100                    LDA     VX,,AUTO
         0 000231   200005 470500                    LDP0    @ENTRY#,,AUTO
         0 000232   200011 720100                    LXL0    IX,,AUTO
         0 000233   000001 755110                    STA     1,X0,PR0

      166    12346    2             IF IX = COUNT

  12346  0 000234   200011 236100                    LDQ     IX,,AUTO
         0 000235   200012 116100                    CMPQ    COUNT,,AUTO
         0 000236   000251 600000 0                  TZE     FOUND_IT

      167    12347    2             THEN GOTO FOUND_IT;
      168    12348    2             CALL NEXT_VREBL ALTRET( ARETN2 ); /* Get next variable */

  12348  0 000237   000456 701000 0                  TSX1    NEXT_VREBL
         0 000240   000242 702000 0                  TSX2    ARETN2

      169    12349    3             DO WHILE ( '0'B );

  12349  0 000241   000245 710000 0                  TRA     s:12354

  12348  0 000242                       ARETN2       null
      170    12350    3   ARETN2:        ;
      171    12351    3                  IF VX <= VLEND

  12351  0 000242   200021 236100                    LDQ     VX,,AUTO
         0 000243   200023 116100                    CMPQ    VLEND,,AUTO
         0 000244   000371 604400 0                  TMOZ    RETNBUG

      172    12352    3                  THEN GOTO RETNBUG;
      173    12353    3                END;
PL6.E3A0      #001=DDS$V_SRCH File=DDS$V_SRCH.:E05TSI                            TUE 07/29/97 14:24 Page:25   

      174    12354    2           END;                            /* "DO IX" */

  12354  0 000245   200011 054100                    AOS     IX,,AUTO
         0 000246   200011 236100                    LDQ     IX,,AUTO
         0 000247   200012 116100                    CMPQ    COUNT,,AUTO
         0 000250   000111 604400 0                  TMOZ    s:12308

  12347  0 000251                       FOUND_IT     null
      175    12355                                                /* Got it - non-error return */
      176    12356    1   FOUND_IT: ;
      177    12357    1        IF SRCH_TYPE ~= 0

  12357  0 000251   200025 235100                    LDA     SRCH_TYPE,,AUTO
         0 000252   000335 600000 0                  TZE     s:12373

      178    12358    2        THEN DO;                           /* Fill ENTRY#.E for COBOL */

      179    12359    2             JX = VX;

  12359  0 000253   200021 235100                    LDA     VX,,AUTO
         0 000254   200010 755100                    STA     JX,,AUTO

      180    12360    2             COUNT = B$VREBL.LEVEL;

  12360  0 000255   200013 470500                    LDP0    VL$,,AUTO
         0 000256   000001 236100                    LDQ     1,,PR0
         0 000257   000014 772000                    QRL     12
         0 000260   000077 376007                    ANQ     63,DL
         0 000261   200012 756100                    STQ     COUNT,,AUTO

      181    12361    2             LASTLVL = COUNT;

  12361  0 000262   200024 756100                    STQ     LASTLVL,,AUTO

      182    12362    3             DO IX = 1 TO COUNT;

PL6.E3A0      #001=DDS$V_SRCH File=DDS$V_SRCH.:E05TSI                            TUE 07/29/97 14:24 Page:26   
  12362  0 000263   000001 235007                    LDA     1,DL
         0 000264   200011 755100                    STA     IX,,AUTO
         0 000265   000322 710000 0                  TRA     s:12370+1

      183    12363    4                  DO WHILE ( ( B$VREBL.DATATYP = %NULL_DATATYPE ) OR

  12363  0 000266   000300 710000 0                  TRA     s:12367

      184    12364    4                    ( B$VREBL.LEVEL ~= LASTLVL ) );
      185    12365    4                       CALL DDF$P_VREBL( VL$ ) ALTRET( RETNBUG );

  12365  0 000267   200013 630500                    EPPR0   VL$,,AUTO
         0 000270   200032 450500                    STP0    DTYP+1,,AUTO
         0 000271   200032 630500                    EPPR0   DTYP+1,,AUTO
         0 000272   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000273   000000 701000 xent               TSX1    DDF$P_VREBL
         0 000274   000371 702000 0                  TSX2    RETNBUG

      186    12366    4                       JX = JX - 1;

  12366  0 000275   200010 235100                    LDA     JX,,AUTO
         0 000276   000001 135007                    SBLA    1,DL
         0 000277   200010 755100                    STA     JX,,AUTO

      187    12367    4                     END;

  12367  0 000300   200013 470500                    LDP0    VL$,,AUTO
         0 000301   000000 236100                    LDQ     0,,PR0
         0 000302   000374 376007                    ANQ     252,DL
         0 000303   000360 116007                    CMPQ    240,DL
         0 000304   000267 600000 0                  TZE     s:12365
         0 000305   000001 236100                    LDQ     1,,PR0
         0 000306   000014 772000                    QRL     12
         0 000307   000077 376007                    ANQ     63,DL
         0 000310   200024 116100                    CMPQ    LASTLVL,,AUTO
         0 000311   000267 601000 0                  TNZ     s:12365

PL6.E3A0      #001=DDS$V_SRCH File=DDS$V_SRCH.:E05TSI                            TUE 07/29/97 14:24 Page:27   
      188    12368    3                  ENTRY#.E( LASTLVL ) = JX;

  12368  0 000312   200005 471500                    LDP1    @ENTRY#,,AUTO
         0 000313   200024 720100                    LXL0    LASTLVL,,AUTO
         0 000314   200010 235100                    LDA     JX,,AUTO
         0 000315   100001 755110                    STA     1,X0,PR1

      189    12369    3                  LASTLVL = LASTLVL - 1;

  12369  0 000316   200024 236100                    LDQ     LASTLVL,,AUTO
         0 000317   000001 136007                    SBLQ    1,DL
         0 000320   200024 756100                    STQ     LASTLVL,,AUTO

      190    12370    3                END;

  12370  0 000321   200011 054100                    AOS     IX,,AUTO
         0 000322   200011 236100                    LDQ     IX,,AUTO
         0 000323   200012 116100                    CMPQ    COUNT,,AUTO
         0 000324   000266 604400 0                  TMOZ    s:12363

      191    12371    2             CALL DDF$VREBL_#( VX, VL$ ) ALTRET( RETNBUG );

  12371  0 000325   200013 630500                    EPPR0   VL$,,AUTO
         0 000326   200033 450500                    STP0    DTYP+2,,AUTO
         0 000327   200021 631500                    EPPR1   VX,,AUTO
         0 000330   200032 451500                    STP1    DTYP+1,,AUTO
         0 000331   200032 630500                    EPPR0   DTYP+1,,AUTO
         0 000332   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000333   000000 701000 xent               TSX1    DDF$VREBL_#
         0 000334   000371 702000 0                  TSX2    RETNBUG

      192    12372    2           END;                            /* Fill ENTRY#.E for COBOL */

      193    12373    1        ENTRY$ = VL$;

  12373  0 000335   200013 236100                    LDQ     VL$,,AUTO
         0 000336   200004 470500                    LDP0    @ENTRY$,,AUTO
PL6.E3A0      #001=DDS$V_SRCH File=DDS$V_SRCH.:E05TSI                            TUE 07/29/97 14:24 Page:28   
         0 000337   000000 756100                    STQ     0,,PR0

      194    12374    1        ENTRY#.C = COUNT;

  12374  0 000340   200012 235100                    LDA     COUNT,,AUTO
         0 000341   200005 471500                    LDP1    @ENTRY#,,AUTO
         0 000342   100000 755100                    STA     0,,PR1

      195    12375    1        ALTRETURN;

  12375  0 000343   000000 702200 xent               TSX2  ! X66_AALT

  12374  0 000344                       NFOUND1      null
      196    12376                                                /**/
      197    12377    1   NFOUND1: ;
      198    12378    1        IF LBLVL = 1

  12378  0 000344   200020 235100                    LDA     LBLVL,,AUTO
         0 000345   000001 115007                    CMPA    1,DL
         0 000346   000377 600000 0                  TZE     RETN

      199    12379    1        THEN GOTO RETN;                    /* Ran out of lower level entrys */
      200    12380    2        DO WHILE ( '1'B );            /* Decrement to next lowest logical block */

      201    12381    2             CLB$ = PINCRW(CLB$,-SIZEW(B$LOGBLK));

  12381  0 000347   200014 236100                    LDQ     CLB$,,AUTO
         0 000350   777774 036003                    ADLQ    -4,DU
         0 000351   200014 756100                    STQ     CLB$,,AUTO

      202    12382    2             IF CLB$ < S_D.LB$

  12382  0 000352   000000 470400 xsym               LDP0    S_D$
         0 000353   001037 116100                    CMPQ    543,,PR0
         0 000354   000363 603000 0                  TRC     s:12388

      203    12383    3             THEN DO;
PL6.E3A0      #001=DDS$V_SRCH File=DDS$V_SRCH.:E05TSI                            TUE 07/29/97 14:24 Page:29   

      204    12384    3                  S_D.ERROR = 22;    /* E@UERR11 */

  12384  0 000355   000026 235007                    LDA     22,DL
         0 000356   000013 755100                    STA     11,,PR0

      205    12385    3                  CALL DDE$ERROR;

  12385  0 000357   000002 631400 xsym               EPPR1   B_VECTNIL+2
         0 000360   000000 701000 xent               TSX1    DDE$ERROR
         0 000361   000000 011000                    NOP     0

      206    12386    3                  GOTO RETN;

  12386  0 000362   000377 710000 0                  TRA     RETN

      207    12387    3                END;
      208    12388    2             IF B$LOGBLK.LEXLVL < LBLVL

  12388  0 000363   200014 471500                    LDP1    CLB$,,AUTO
         0 000364   100001 236100                    LDQ     1,,PR1
         0 000365   000777 376007                    ANQ     511,DL
         0 000366   200020 116100                    CMPQ    LBLVL,,AUTO
         0 000367   000061 604000 0                  TMI     LOOP1

      209    12389    2             THEN GOTO LOOP1;              /* Got next lowest level */
      210    12390    2           END;                       /* Decrement to next lowest logical block */

  12390  0 000370   000347 710000 0                  TRA     s:12381

  12381  0 000371                       RETNBUG      null
      211    12391                                                /**/
      212    12392    1   RETNBUG: ;
      213    12393    1        S_D.ERROR = 502;              /* E@DELBUG */

  12393  0 000371   000766 235007                    LDA     502,DL
         0 000372   000000 470400 xsym               LDP0    S_D$
PL6.E3A0      #001=DDS$V_SRCH File=DDS$V_SRCH.:E05TSI                            TUE 07/29/97 14:24 Page:30   
         0 000373   000013 755100                    STA     11,,PR0

      214    12394    1        CALL DDE$ERROR;

  12394  0 000374   000002 631400 xsym               EPPR1   B_VECTNIL+2
         0 000375   000000 701000 xent               TSX1    DDE$ERROR
         0 000376   000000 011000                    NOP     0

  12393  0 000377                       RETN         null
      215    12395                                                /**/
      216    12396    1   RETN: ;
      217    12397    1        IF REVERSE

  12397  0 000377   200006 234100                    SZN     REVERSE,,AUTO
         0 000400   000407 605000 0                  TPL     s:12399

      218    12398    1        THEN ENTRY#.C = COUNT - DEEPEST - 1;

  12398  0 000401   200012 236100                    LDQ     COUNT,,AUTO
         0 000402   200007 136100                    SBLQ    DEEPEST,,AUTO
         0 000403   000001 136007                    SBLQ    1,DL
         0 000404   200005 470500                    LDP0    @ENTRY#,,AUTO
         0 000405   000000 756100                    STQ     0,,PR0
         0 000406   000412 710000 0                  TRA     s:12401

      219    12399    1        ELSE ENTRY#.C = DEEPEST;

  12399  0 000407   200005 470500                    LDP0    @ENTRY#,,AUTO
         0 000410   200007 235100                    LDA     DEEPEST,,AUTO
         0 000411   000000 755100                    STA     0,,PR0

      220    12400                                                /**/
      221    12401    1        RETURN;

  12401  0 000412   000000 702200 xent               TSX2  ! X66_ARET

      222    12402        %EJECT;
PL6.E3A0      #001=DDS$V_SRCH File=DDS$V_SRCH.:E05TSI                            TUE 07/29/97 14:24 Page:31   
      223    12403        /*F* NAME: CHECK_NAME
      224    12404             PURPOSE: Checks current variable name against desired one.
      225    12405             DESCRIPTION: Compares the name of the current variable entry with
      226    12406                          the Textc name of the desired variable entry. */
      227    12407        /*D* NAME: CHECK_NAME
      228    12408             CALL: CALL CHECK_NAME ALTRET( match );
      229    12409             INPUT: TSYM$ - Pointer to desired variable name.
      230    12410                    VL$ - Pointer to current variable entry.
      231    12411             SCRATCH: NP#, TEMP$
      232    12412             DESCRIPTION: Obtains the variable's name pointer from the current
      233    12413                          variable (B$VREBL.NPOINTER). Calls DDF$DBG_# to get a
      234    12414                          pointer to the current variable's name. Compares the
      235    12415                          two, if they match then ALTRETURNs, else RETURNs. */
      236    12416                                                /**/
      237    12417    1   CHECK_NAME: PROC ALTRET;

  12417  0 000413   200026 741300       CHECK_NAME   STX1  ! SRCH_TYPE+1,,AUTO

      238    12418                                                /**/
      239    12419    2        NP# = B$VREBL.NPOINTER;

  12419  0 000414   200013 470500                    LDP0    VL$,,AUTO
         0 000415   000004 236100                    LDQ     4,,PR0
         0 000416   000022 736000                    QLS     18
         0 000417   000022 732000                    QRS     18
         0 000420   200022 756100                    STQ     NP#,,AUTO

      240    12420    2        CALL DDF$DBG_#( NP#, TEMP$ ) ALTRET( BADSCH );

  12420  0 000421   200016 631500                    EPPR1   TEMP$,,AUTO
         0 000422   200033 451500                    STP1    DTYP+2,,AUTO
         0 000423   200022 633500                    EPPR3   NP#,,AUTO
         0 000424   200032 453500                    STP3    DTYP+1,,AUTO
         0 000425   200032 630500                    EPPR0   DTYP+1,,AUTO
         0 000426   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000427   000000 701000 xent               TSX1    DDF$DBG_#
         0 000430   000446 702000 0                  TSX2    BADSCH
PL6.E3A0      #001=DDS$V_SRCH File=DDS$V_SRCH.:E05TSI                            TUE 07/29/97 14:24 Page:32   

      241    12421    2        IF TEMP$ -> B$DNAME.TEXT = TSYM$ -> TEXT$C.TXT

  12421  0 000431   200016 470500                    LDP0    TEMP$,,AUTO
         0 000432   000000 220100                    LDX0    0,,PR0
         0 000433   200015 471500                    LDP1    TSYM$,,AUTO
         0 000434   100000 236100                    LDQ     0,,PR1
         0 000435   000033 772000                    QRL     27
         0 000436   000000 621006                    EAX1    0,QL
         0 000437   040140 106540                    CMPC    fill='040'O
         0 000440   000000 400010                    ADSC9   0,,PR0                   cn=2,n=*X0
         0 000441   100000 200011                    ADSC9   0,,PR1                   cn=1,n=*X1
         0 000442   000445 601000 0                  TNZ     s:12424

      242    12422    2        THEN ALTRETURN;                    /* Got it, ALTRET */

  12422  0 000443   200026 221300                    LDX1  ! SRCH_TYPE+1,,AUTO
         0 000444   000000 702211                    TSX2  ! 0,X1

      243    12423                                                /**/
      244    12424    3        DO WHILE ( '0'B );

  12424  0 000445   000454 710000 0                  TRA     s:12429

      245    12425    3   BADSCH:   S_D.ERROR = 22;         /* E@UERR11 */

  12425  0 000446   000026 235007       BADSCH       LDA     22,DL
         0 000447   000000 470400 xsym               LDP0    S_D$
         0 000450   000013 755100                    STA     11,,PR0

      246    12426    3             CALL DDE$ERROR;

  12426  0 000451   000002 631400 xsym               EPPR1   B_VECTNIL+2
         0 000452   000000 701000 xent               TSX1    DDE$ERROR
         0 000453   000000 011000                    NOP     0

      247    12427    3           END;
PL6.E3A0      #001=DDS$V_SRCH File=DDS$V_SRCH.:E05TSI                            TUE 07/29/97 14:24 Page:33   

      248    12428                                                /**/
      249    12429    2        RETURN;

  12429  0 000454   200026 221300                    LDX1  ! SRCH_TYPE+1,,AUTO
         0 000455   000001 702211                    TSX2  ! 1,X1

      250    12430                                                /**/
      251    12431    2   END CHECK_NAME;
      252    12432        %EJECT;
PL6.E3A0      #001=DDS$V_SRCH File=DDS$V_SRCH.:E05TSI                            TUE 07/29/97 14:24 Page:34   
      253    12433        /*F* NAME: NEXT_VREBL
      254    12434             PURPOSE: To increment to next entry in variables record.
      255    12435           DESCRIPTION: Increments VX & VL$ based upon array type & number of dimensions */
      256    12436        /*D* NAME: NEXT_VREBL
      257    12437             CALL: CALL NEXT_VREBL ALTRET( error );
      258    12438             INTERFACE: VL$
      259    12439             ENVIRONMENT: DDS$V_SRCH active.
      260    12440             INPUT: VL$ - points to current entry.
      261    12441                    VX - Entry number of current variable.
      262    12442             OUTPUT: VL$ - tPoints to next entry.
      263    12443                     VX - Entry number of current variable.
      264    12444             DESCRIPTION: VX & VL$ point to the current entry. VX & VL$ are
      265    12445             incremented past any continuation entrys to the next entry. */
      266    12446                                                /**/
      267    12447    1   NEXT_VREBL: PROC ALTRET;

  12447  0 000456   200026 741300       NEXT_VREBL   STX1  ! SRCH_TYPE+1,,AUTO

      268    12448                                                /**/
      269    12449    2   DCL DIMS SBIN;
      270    12450    2   DCL ATYP UBIN;
      271    12451    2   DCL DTYP UBIN;
      272    12452                                                /**/
      273    12453    2        DIMS = B$VREBL.DIMS;               /* Number of dimensions */

  12453  0 000457   200013 470500                    LDP0    VL$,,AUTO
         0 000460   000004 236100                    LDQ     4,,PR0
         0 000461   000022 772000                    QRL     18
         0 000462   200027 756100                    STQ     DIMS,,AUTO

      274    12454    2        ATYP = B$VREBL.ARRAYTYP;           /* Array type code */

  12454  0 000463   000001 236100                    LDQ     1,,PR0
         0 000464   000004 772000                    QRL     4
         0 000465   000017 376007                    ANQ     15,DL
         0 000466   200030 756100                    STQ     ATYP,,AUTO

PL6.E3A0      #001=DDS$V_SRCH File=DDS$V_SRCH.:E05TSI                            TUE 07/29/97 14:24 Page:35   
      275    12455    2        VX = VX + 1;

  12455  0 000467   200021 054100                    AOS     VX,,AUTO

  12455  0 000470                       NEXT_VAR     null
      276    12456    2   NEXT_VAR: ;
      277    12457    2        CALL DDF$N_VREBL( VL$ ) ALTRET( ARET );

  12457  0 000470   200013 630500                    EPPR0   VL$,,AUTO
         0 000471   200032 450500                    STP0    DTYP+1,,AUTO
         0 000472   200032 630500                    EPPR0   DTYP+1,,AUTO
         0 000473   000017 631400 xsym               EPPR1   B_VECTNIL+15
         0 000474   000000 701000 xent               TSX1    DDF$N_VREBL
         0 000475   000560 702000 0                  TSX2    ARET

      278    12458    2        DTYP = B$VREBL.DATATYP;

  12458  0 000476   200013 470500                    LDP0    VL$,,AUTO
         0 000477   000000 236100                    LDQ     0,,PR0
         0 000500   000002 772000                    QRL     2
         0 000501   000077 376007                    ANQ     63,DL
         0 000502   200031 756100                    STQ     DTYP,,AUTO

      279    12459    2        IF DTYP = %ENUMTYPE_DATATYPE OR DTYP = %SET_DATATYPE

  12459  0 000503   000064 116007                    CMPQ    52,DL
         0 000504   000507 600000 0                  TZE     s:12461
         0 000505   000065 116007                    CMPQ    53,DL
         0 000506   000511 601000 0                  TNZ     s:12464

      280    12460    3        THEN DO;

      281    12461    3             VX = VX + 1;

  12461  0 000507   200021 054100                    AOS     VX,,AUTO

      282    12462    3             GOTO NEXT_VAR;
PL6.E3A0      #001=DDS$V_SRCH File=DDS$V_SRCH.:E05TSI                            TUE 07/29/97 14:24 Page:36   

  12462  0 000510   000470 710000 0                  TRA     NEXT_VAR

      283    12463    3           END;
      284    12464    2        IF B$VREBL.DATATYP ~= %NULL_DATATYPE

  12464  0 000511   000002 736000                    QLS     2
         0 000512   000360 116007                    CMPQ    240,DL
         0 000513   000556 600000 0                  TZE     s:12476

      285    12465    2        THEN IF ( ATYP = %VIRTUAL_ARRAY ) OR ( ATYP = %ADJUSTABLE_ARRAY )

  12465  0 000514   200030 235100                    LDA     ATYP,,AUTO
         0 000515   000004 115007                    CMPA    4,DL
         0 000516   000521 600000 0                  TZE     s:12467
         0 000517   000005 115007                    CMPA    5,DL
         0 000520   000537 601000 0                  TNZ     s:12470

      286    12466    3             THEN DO;

      287    12467    3                  VX = VX + ( DIMS + 2 ) / 3;

  12467  0 000521   200027 236100                    LDQ     DIMS,,AUTO
         0 000522   000002 036007                    ADLQ    2,DL
         0 000523   000003 506007                    DIV     3,DL
         0 000524   200021 036100                    ADLQ    VX,,AUTO
         0 000525   200021 756100                    STQ     VX,,AUTO

      288    12468    3                  CALL DDF$VREBL_#( VX, VL$ ) ALTRET( ARET );

  12468  0 000526   200013 631500                    EPPR1   VL$,,AUTO
         0 000527   200033 451500                    STP1    DTYP+2,,AUTO
         0 000530   200021 633500                    EPPR3   VX,,AUTO
         0 000531   200032 453500                    STP3    DTYP+1,,AUTO
         0 000532   200032 630500                    EPPR0   DTYP+1,,AUTO
         0 000533   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000534   000000 701000 xent               TSX1    DDF$VREBL_#
PL6.E3A0      #001=DDS$V_SRCH File=DDS$V_SRCH.:E05TSI                            TUE 07/29/97 14:24 Page:37   
         0 000535   000560 702000 0                  TSX2    ARET

      289    12469    3                END;

  12469  0 000536   000556 710000 0                  TRA     s:12476

      290    12470    2             ELSE IF ATYP = %REAL_ARRAY

  12470  0 000537   000003 115007                    CMPA    3,DL
         0 000540   000556 601000 0                  TNZ     s:12476

      291    12471    3                  THEN DO;

      292    12472    3                       VX = VX + ( DIMS + 5 ) / 6;

  12472  0 000541   200027 236100                    LDQ     DIMS,,AUTO
         0 000542   000005 036007                    ADLQ    5,DL
         0 000543   000006 506007                    DIV     6,DL
         0 000544   200021 036100                    ADLQ    VX,,AUTO
         0 000545   200021 756100                    STQ     VX,,AUTO

      293    12473    3                       CALL DDF$VREBL_#( VX, VL$ ) ALTRET( ARET );

  12473  0 000546   200013 631500                    EPPR1   VL$,,AUTO
         0 000547   200033 451500                    STP1    DTYP+2,,AUTO
         0 000550   200021 633500                    EPPR3   VX,,AUTO
         0 000551   200032 453500                    STP3    DTYP+1,,AUTO
         0 000552   200032 630500                    EPPR0   DTYP+1,,AUTO
         0 000553   000020 631400 xsym               EPPR1   B_VECTNIL+16
         0 000554   000000 701000 xent               TSX1    DDF$VREBL_#
         0 000555   000560 702000 0                  TSX2    ARET

      294    12474    3                     END;

      295    12475                                                /**/
      296    12476    2        RETURN;

PL6.E3A0      #001=DDS$V_SRCH File=DDS$V_SRCH.:E05TSI                            TUE 07/29/97 14:24 Page:38   
  12476  0 000556   200026 221300                    LDX1  ! SRCH_TYPE+1,,AUTO
         0 000557   000001 702211                    TSX2  ! 1,X1

  12470  0 000560                       ARET         null
      297    12477                                                /**/
      298    12478    2   ARET: ;
      299    12479    2        ALTRETURN;

  12479  0 000560   200026 221300                    LDX1  ! SRCH_TYPE+1,,AUTO
         0 000561   000000 702211                    TSX2  ! 0,X1
      300    12480                                                /**/
      301    12481    2   END NEXT_VREBL;
      302    12482                                                /**/
      303    12483    1   END DDS$V_SRCH;

PL6.E3A0      #001=DDS$V_SRCH File=DDS$V_SRCH.:E05TSI                            TUE 07/29/97 14:24 Page:39   
--  Include file information  --

   B$TABLES_C.:E05TOU  cannot be made into a system file and is referenced.
   DD_SD_M.:E05TOU  is referenced.
   XUH_MACRO_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   DD_PSUBS_C.:E05TOU  is referenced.
   DD_SUBS_C.:E05TOU  is referenced.
   DD_ERR_C.:E05TOU  is referenced.
   DD$BASED.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure DDS$V_SRCH.

   Procedure DDS$V_SRCH requires 370 words for executable code.
   Procedure DDS$V_SRCH requires 28 words of local(AUTO) storage.

    No errors detected in file DDS$V_SRCH.:E05TSI    .
PL6.E3A0      #001=DDS$V_SRCH File=DDS$V_SRCH.:E05TSI                            TUE 07/29/97 14:24 Page:40   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=DDS$V_SRCH File=DDS$V_SRCH.:E05TSI                            TUE 07/29/97 14:24 Page:41   
          MINI XREF LISTING

ARET IN PROCEDURE NEXT_VREBL
     12470**LABEL   12457--CALLALT 12468--CALLALT 12473--CALLALT
ARETN1
     12333**LABEL   12333--CALLALT
ARETN2
     12348**LABEL   12348--CALLALT
ATYP IN PROCEDURE NEXT_VREBL
     12450**DCL     12454<<ASSIGN  12465>>IF      12465>>IF      12470>>IF
B$DNAME.COUNT
      9116**DCL      9123--IMP-SIZ 12421>>IF
B$DNAME.TEXT
      9123**DCL     12421>>IF
B$LOGBLK
      9127**DCL     12299--ASSIGN  12381--ASSIGN
B$LOGBLK.LEXLVL
      9138**DCL     12302>>ASSIGN  12388>>IF
B$LOGBLK.VAOFFST
      9149**DCL     12303>>ASSIGN
B$LOGBLK.VASIZE
      9153**DCL     12304>>ASSIGN
B$VREBL
      9174**DCL     12303--ASSIGN
B$VREBL.ADR
      9175**DCL      9187--REDEF
B$VREBL.ARRAYTYP
      9262**DCL     12454>>ASSIGN
B$VREBL.DATATYP
      9225**DCL     12314>>IF      12363>>DOWHILE 12458>>ASSIGN  12464>>IF
B$VREBL.DIMS
      9328**DCL     12453>>ASSIGN
B$VREBL.LEVEL
      9244**DCL     12313>>ASSIGN  12360>>ASSIGN  12363>>DOWHILE
PL6.E3A0      #001=DDS$V_SRCH File=DDS$V_SRCH.:E05TSI                            TUE 07/29/97 14:24 Page:42   
B$VREBL.NPOINTER
      9332**DCL     12419>>ASSIGN
B$XL_UPPER$
     12273**DCL     12274--IMP-PTR
BADSCH IN PROCEDURE CHECK_NAME
     12425**LABEL   12420--CALLALT
CHECK_NAME
     12417**PROC    12318--CALL    12322--CALL    12326--CALL    12329--CALL
CLB$
      1372**DCL      9127--IMP-PTR 12299<<ASSIGN  12302>>ASSIGN  12303>>ASSIGN  12304>>ASSIGN  12381<<ASSIGN
     12381>>ASSIGN  12382>>IF      12388>>IF
COUNT
      1370**DCL     12286<<ASSIGN  12295>>IF      12306>>DOINDEX 12310>>ASSIGN  12346>>IF      12360<<ASSIGN
     12361>>ASSIGN  12362>>DOINDEX 12374>>ASSIGN  12398>>ASSIGN
DDE$ERROR
     12280**DCL-ENT 12385--CALL    12394--CALL    12426--CALL
DDF$DBG_#
     12276**DCL-ENT 12420--CALL
DDF$N_VREBL
     12278**DCL-ENT 12457--CALL
DDF$P_VREBL
     12279**DCL-ENT 12365--CALL
DDF$VREBL_#
     12277**DCL-ENT 12305--CALL    12371--CALL    12468--CALL    12473--CALL
DEEPEST
      1367**DCL     12282<<ASSIGN  12343>>IF      12344<<ASSIGN  12398>>ASSIGN  12399>>ASSIGN
DIMS IN PROCEDURE NEXT_VREBL
     12449**DCL     12453<<ASSIGN  12467>>ASSIGN  12472>>ASSIGN
DTYP IN PROCEDURE NEXT_VREBL
     12451**DCL     12458<<ASSIGN  12459>>IF      12459>>IF
D_SYMBOLS
      9425**DCL     12287>>IF
ENTRY#
      1362**DCL        54--PROC
ENTRY#.C
      1363**DCL     12374<<ASSIGN  12398<<ASSIGN  12399<<ASSIGN
PL6.E3A0      #001=DDS$V_SRCH File=DDS$V_SRCH.:E05TSI                            TUE 07/29/97 14:24 Page:43   
ENTRY#.E
      1364**DCL     12345<<ASSIGN  12368<<ASSIGN
ENTRY$
        57**DCL        54--PROC    12373<<ASSIGN
FOUND1
     12333**LABEL   12318--CALLALT 12322--CALLALT 12326--CALLALT 12329--CALLALT
FOUND_IT
     12347**LABEL   12347--GOTO
IX
      1369**DCL     12306<<DOINDEX 12308>>ASSIGN  12317>>IF      12319>>IF      12324>>IF      12343>>IF
     12344>>ASSIGN  12345>>ASSIGN  12346>>IF      12362<<DOINDEX
JX
      1368**DCL     12308<<ASSIGN  12310<<ASSIGN  12310>>ASSIGN  12311>>ASSIGN  12359<<ASSIGN  12366<<ASSIGN
     12366>>ASSIGN  12368>>ASSIGN
LASTLVL
      1380**DCL     12328>>IF      12342<<ASSIGN  12361<<ASSIGN  12363>>DOWHILE 12368>>ASSIGN  12369<<ASSIGN
     12369>>ASSIGN
LBLVL
      1376**DCL     12302<<ASSIGN  12378>>IF      12388>>IF
LOOP1
     12299**LABEL   12389--GOTO
NEXT_VAR IN PROCEDURE NEXT_VREBL
     12455**LABEL   12462--GOTO
NEXT_VREBL
     12447**PROC    12333--CALL    12348--CALL
NFOUND1
     12374**LABEL   12305--CALLALT 12320--GOTO    12330--GOTO    12340--GOTO
NODE$
        56**DCL        54--PROC    12283>>IF      12286>>ASSIGN  12311>>ASSIGN
NP#
      1378**DCL     12419<<ASSIGN  12420<>CALL
POB.CODE
      5646**DCL     12283>>IF
POB.NSB
      5650**DCL     12286>>ASSIGN
POB.SUBLK$
PL6.E3A0      #001=DDS$V_SRCH File=DDS$V_SRCH.:E05TSI                            TUE 07/29/97 14:24 Page:44   
      5671**DCL     12311>>ASSIGN  12311>>ASSIGN
RETN
     12393**LABEL   12292--GOTO    12379--GOTO    12386--GOTO
RETNBUG
     12381**LABEL   12337--GOTO    12352--GOTO    12365--CALLALT 12371--CALLALT
REVERSE
      1366**DCL     12284<<ASSIGN  12285<<ASSIGN  12309>>IF      12397>>IF
SRCH_TYPE
      1381**DCL     12296<<ASSIGN  12297<<ASSIGN  12298<<ASSIGN  12315>>DOCASE  12357>>IF
S_D.CURRENT_CHANNEL
     11798**DCL     11800--REDEF
S_D.DBG$
     11248**DCL     12287>>IF
S_D.DEBUGA
     10950**DCL     10952--REDEF
S_D.EIS
     11908**DCL     11937--REDEF
S_D.ERROR
     10879**DCL     12384<<ASSIGN  12393<<ASSIGN  12425<<ASSIGN
S_D.HOST_MESSAGE_BUF_REMOTE
     11841**DCL     11842--REDEF   11856--REDEF
S_D.JDE
     11455**DCL     11456--REDEF
S_D.L$.VALUE
     11008**DCL     11014--REDEF   11022--REDEF   11025--REDEF   11028--REDEF   11031--REDEF
S_D.L$.VALUE.L
     11009**DCL     11010--REDEF   11011--REDEF
S_D.L6_MESSAGE_BUF
     11862**DCL     11864--REDEF
S_D.LB$
     11288**DCL     12299>>ASSIGN  12382>>IF
S_D.OUTPUT
     11828**DCL     11830--REDEF
S_D.QSCH.LB#
     11164**DCL     12299>>ASSIGN
S_D.QSCH.OK
PL6.E3A0      #001=DDS$V_SRCH File=DDS$V_SRCH.:E05TSI                            TUE 07/29/97 14:24 Page:45   
     11154**DCL     12287>>IF
S_D.REMOTE_MSG.FNCC
     11847**DCL     11848--REDEF
S_D.REMOTE_MSG.STXC
     11843**DCL     11844--REDEF
S_D.REMOTE_MSG.SUBFNCC
     11851**DCL     11852--REDEF
S_D.SCHEMA
     10948**DCL     12287>>IF
S_D.SV
     10907**DCL     10928--REDEF
S_D.SYNTAX
     11679**DCL     12293>>IF      12293>>IF
S_D.VREBL$
     11266**DCL     12287>>IF
S_D$
     12159**DCL     10855--IMP-PTR 12287>>IF      12287>>IF      12287>>IF      12287>>IF      12293>>IF
     12293>>IF      12299>>ASSIGN  12299>>ASSIGN  12382>>IF      12384>>ASSIGN  12393>>ASSIGN  12425>>ASSIGN
TEMP$
      1374**DCL     12420<>CALL    12421>>IF      12421>>IF
TEXT$C.SIZE
      9422**DCL      9423--IMP-SIZ 12421>>IF
TEXT$C.TXT
      9423**DCL     12421>>IF
TMPLVL
      1375**DCL     12313<<ASSIGN  12317>>IF      12319>>IF      12325>>IF      12328>>IF      12342>>ASSIGN
TSYM$
      1373**DCL     12311<<ASSIGN  12421>>IF      12421>>IF
VL$
      1371**DCL      9174--IMP-PTR 12305<>CALL    12313>>ASSIGN  12314>>IF      12360>>ASSIGN  12363>>DOWHILE
     12363>>DOWHILE 12365<>CALL    12371<>CALL    12373>>ASSIGN  12419>>ASSIGN  12453>>ASSIGN  12454>>ASSIGN
     12457<>CALL    12458>>ASSIGN  12464>>IF      12468<>CALL    12473<>CALL
VLEND
      1379**DCL     12304<<ASSIGN  12312>>DOWHILE 12336>>IF      12351>>IF
VX
      1377**DCL     12303<<ASSIGN  12304>>ASSIGN  12305<>CALL    12312>>DOWHILE 12336>>IF      12345>>ASSIGN
PL6.E3A0      #001=DDS$V_SRCH File=DDS$V_SRCH.:E05TSI                            TUE 07/29/97 14:24 Page:46   
     12351>>IF      12359>>ASSIGN  12371<>CALL    12455<<ASSIGN  12455>>ASSIGN  12461<<ASSIGN  12461>>ASSIGN
     12467<<ASSIGN  12467>>ASSIGN  12468<>CALL    12472<<ASSIGN  12472>>ASSIGN  12473<>CALL
PL6.E3A0      #001=DDS$V_SRCH File=DDS$V_SRCH.:E05TSI                            TUE 07/29/97 14:24 Page:47   
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #001=DDS$V_SRCH File=DDS$V_SRCH.:E05TSI                            TUE 07/29/97 14:24 Page:48   
              MINI UREF LISTING

B_POINTER   12214**DCL-ENT
DDS$V_SRCH      54**PROC
XLATE_TABLE   12274**DCL
