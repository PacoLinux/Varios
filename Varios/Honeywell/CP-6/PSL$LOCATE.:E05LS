VERSION E05

PL6.E3A0      #001=PSL$LOCATE File=PSL$LOCATE.:E05TSI                            WED 07/30/97 04:35 Page:1    
        1        1        /*M* PSL$LOCATE  STATS routine to locate an item in the buffer                */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* CLM=77,CRM=80,CRT=1,PLM=3,CTI=1,THI=2                                    */
        8        8        /*P*  NAME:    PSL$LOCATE
        9        9              PURPOSE: PSL$LOCATE is called by various STATS routines to locate
       10       10                       (and build a pointer to) a various data fragment in
       11       11                       the PS_PMDAT$ and PS_OLD_PMDAT$ buffers.
       12       12                                                                                      */
       13       13        PSL$LOCATE: PROC (ITEM, POINTER$, OLD_POINTER$);
       14       14
       15       15    1   DCL ITEM SBIN WORD;
       16       16    1   DCL POINTER$ PTR;
       17       17    1   DCL OLD_POINTER$ PTR;
       18       18
       19       19        %INCLUDE PS_DATA_R;
       20     5315        %INCLUDE PS_PERR_C;
       21     5346    1   DCL TEMP SBIN;
       22     5347    1   DCL CODE CHAR(3);
       23     5348    1   DCL PSE$ERRMSG ENTRY (5);
       24     5349
       25     5350    1   LOCATE: PROC (ITEM, BUFFER$, POINTER$);
       26     5351
       27     5352    2   DCL ITEM SBIN;
       28     5353    2   DCL BUFFER$ PTR;
       29     5354    2   DCL POINTER$ PTR;
       30     5355
       31     5356    2      IF BUFFER$ = PS_PMDAT$
       32     5357    2        THEN
       33     5358    2         POINTER$ = PS_PTRS$(ITEM);
       34     5359    2        ELSE
       35     5360    2         POINTER$ = PS_OLD_PTRS$(ITEM);
       36     5361
       37     5362    2      IF POINTER$ ~= ADDR(NIL)
PL6.E3A0      #001=PSL$LOCATE File=PSL$LOCATE.:E05TSI                            WED 07/30/97 04:35 Page:2    
       38     5363    2        THEN
       39     5364    2         RETURN;
       40     5365
       41     5366    2      CALL BINCHAR (CODE, ITEM);
       42     5367
       43     5368    2      CALL PSE$ERRMSG (E$PS_MISSING_ITEM, SERIOUS#,
       44     5369    2       VECTOR(CODE));
       45     5370
       46     5371    2   END LOCATE;
       47     5372
       48     5373    1      CALL LOCATE (ITEM, PS_PMDAT$, POINTER$);
       49     5374
       50     5375    1      IF ADDR(OLD_POINTER$) ~= ADDR(NIL)
       51     5376    1        THEN
       52     5377    1         IF PS_OLD_PMDAT$ = ADDR(NIL)
       53     5378    1           THEN OLD_POINTER$ = ADDR(NIL);
       54     5379    1           ELSE CALL LOCATE (ITEM, PS_OLD_PMDAT$, OLD_POINTER$);
       55     5380
       56     5381    1      RETURN;
       57     5382
       58     5383    1   END PSL$LOCATE;
       59     5384        %EOD;

PL6.E3A0      #001=PSL$LOCATE File=PSL$LOCATE.:E05TSI                            WED 07/30/97 04:35 Page:3    
--  Include file information  --

   PS_PERR_C.:E05TOU  is referenced.
   KL_MACRO_C.:E05TOU  is referenced.
   KL_AFCN_C.:E05TOU  is referenced.
   P_FEP_M.:E05TOU  is referenced.
   K_ID_E.:E05TOU  is referenced.
   XU_FORMAT_C.:E05TOU  is referenced.
   PM_BUCKET_C.:E05TOU  is referenced.
   PS_SUBS_C.:E05TOU  is referenced.
   PS_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure PSL$LOCATE.

   Procedure PSL$LOCATE requires 66 words for executable code.
   Procedure PSL$LOCATE requires 22 words of local(AUTO) storage.

PL6.E3A0      #001=PSL$LOCATE File=PSL$LOCATE.:E05TSI                            WED 07/30/97 04:35 Page:4    

 Object Unit name= PSL$LOCATE                                 File name= PSL$LOCATE.:E05TOU
 UTS= JUL 30 '97 04:35:09.48 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$LO
    1   DCB   even  none     0      0  M$DO
    2   DCB   even  none     0      0  M$SI
    3   DCB   even  none     0      0  F$LOG
    4   DCB   even  none     0      0  M$ME
    5   DCB   even  none     0      0  M$HLPCG
    6  RtLbCm even  none    30     36  PS_FDS
    7  RtLbCm even  none    32     40  PS_SELECT_RPN
    8  RtLbCm even  none    17     21  PS_STATS_RPN
    9  RtLbCm even  none    34     42  PS_STATS_BUCKET
   10   Proc  even  none    66    102  PSL$LOCATE
   11  RoData even  none     5      5  PSL$LOCATE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    10      0   yes            yes      Std        3  PSL$LOCATE

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       5 PSE$ERRMSG
                       nStd      0 X66_AUTO_3
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #001=PSL$LOCATE File=PSL$LOCATE.:E05TSI                            WED 07/30/97 04:35 Page:5    

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$LO                                  M$DO                                  M$SI
     F$LOG                                 M$ME                                  M$HLPCG
     PS_PMDAT$                             PS_OLD_PMDAT$                         PS_BUFFER
     PS_PTRS$                              PS_OLD_PTRS$                          PS_STATS$
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #001=PSL$LOCATE File=PSL$LOCATE.:E05TSI                            WED 07/30/97 04:35 Page:6    


        1        1        /*M* PSL$LOCATE  STATS routine to locate an item in the buffer                */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* CLM=77,CRM=80,CRT=1,PLM=3,CTI=1,THI=2                                    */
        8        8        /*P*  NAME:    PSL$LOCATE
        9        9              PURPOSE: PSL$LOCATE is called by various STATS routines to locate
       10       10                       (and build a pointer to) a various data fragment in
       11       11                       the PS_PMDAT$ and PS_OLD_PMDAT$ buffers.
       12       12                                                                                      */
       13       13        PSL$LOCATE: PROC (ITEM, POINTER$, OLD_POINTER$);

     13 10 000000   000000 700200 xent  PSL$LOCATE   TSX0  ! X66_AUTO_3
        10 000001   000026 000003                    ZERO    22,3
        10 000002   000051 710000 10                 TRA     s:5373

       14       14
       15       15    1   DCL ITEM SBIN WORD;
       16       16    1   DCL POINTER$ PTR;
       17       17    1   DCL OLD_POINTER$ PTR;
       18       18
       19       19        %INCLUDE PS_DATA_R;
       20     5315        %INCLUDE PS_PERR_C;
       21     5346    1   DCL TEMP SBIN;
       22     5347    1   DCL CODE CHAR(3);
       23     5348    1   DCL PSE$ERRMSG ENTRY (5);
       24     5349
       25     5350    1   LOCATE: PROC (ITEM, BUFFER$, POINTER$);

   5350 10 000003   200012 741300       LOCATE       STX1  ! CODE+2,,AUTO

       26     5351
       27     5352    2   DCL ITEM SBIN;
       28     5353    2   DCL BUFFER$ PTR;
PL6.E3A0      #001=PSL$LOCATE File=PSL$LOCATE.:E05TSI                            WED 07/30/97 04:35 Page:7    
       29     5354    2   DCL POINTER$ PTR;
       30     5355
       31     5356    2      IF BUFFER$ = PS_PMDAT$

   5356 10 000004   200014 470500                    LDP0    @BUFFER$,,AUTO
        10 000005   000000 236100                    LDQ     0,,PR0
        10 000006   000000 116000 xsym               CMPQ    PS_PMDAT$
        10 000007   000016 601000 10                 TNZ     s:5360

       32     5357    2        THEN
       33     5358    2         POINTER$ = PS_PTRS$(ITEM);

   5358 10 000010   200013 471500                    LDP1    @ITEM,,AUTO
        10 000011   100000 720100                    LXL0    0,,PR1
        10 000012   000000 236010 xsym               LDQ     PS_PTRS$,X0
        10 000013   200015 473500                    LDP3    @POINTER$,,AUTO
        10 000014   300000 756100                    STQ     0,,PR3
        10 000015   000023 710000 10                 TRA     s:5362

       34     5359    2        ELSE
       35     5360    2         POINTER$ = PS_OLD_PTRS$(ITEM);

   5360 10 000016   200013 471500                    LDP1    @ITEM,,AUTO
        10 000017   100000 720100                    LXL0    0,,PR1
        10 000020   000000 236010 xsym               LDQ     PS_OLD_PTRS$,X0
        10 000021   200015 473500                    LDP3    @POINTER$,,AUTO
        10 000022   300000 756100                    STQ     0,,PR3

       36     5361
       37     5362    2      IF POINTER$ ~= ADDR(NIL)

   5362 10 000023   000001 116000 xsym               CMPQ    B_VECTNIL+1
        10 000024   000027 600000 10                 TZE     s:5366

       38     5363    2        THEN
       39     5364    2         RETURN;

PL6.E3A0      #001=PSL$LOCATE File=PSL$LOCATE.:E05TSI                            WED 07/30/97 04:35 Page:8    
   5364 10 000025   200012 221300                    LDX1  ! CODE+2,,AUTO
        10 000026   000001 702211                    TSX2  ! 1,X1

       40     5365
       41     5366    2      CALL BINCHAR (CODE, ITEM);

   5366 10 000027   000100 301500                    BTD
        10 000030   100000 000004                    NDSC9   0,,PR1                   cn=0,s=lsgnf,sf=0,n=4
        10 000031   200010 030003                    NDSC9   CODE,,AUTO               cn=0,s=nosgn,sf=0,n=3

       42     5367
       43     5368    2      CALL PSE$ERRMSG (E$PS_MISSING_ITEM, SERIOUS#,

   5368 10 000032   577640 235007                    LDA     -65632,DL
        10 000033   200016 452500                    STP2    @POINTER$+1,,AUTO
        10 000034   200016 236100                    LDQ     @POINTER$+1,,AUTO
        10 000035   000010 036003                    ADLQ    8,DU
        10 000036   200020 757100                    STAQ    @POINTER$+3,,AUTO
        10 000037   200020 634500                    EPPR4   @POINTER$+3,,AUTO
        10 000040   200024 454500                    STP4    @POINTER$+7,,AUTO
        10 000041   000002 237000 11                 LDAQ    2
        10 000042   200022 757100                    STAQ    @POINTER$+5,,AUTO
        10 000043   200022 630500                    EPPR0   @POINTER$+5,,AUTO
        10 000044   000021 631400 xsym               EPPR1   B_VECTNIL+17
        10 000045   000000 701000 xent               TSX1    PSE$ERRMSG
        10 000046   000000 011000                    NOP     0

       44     5369    2       VECTOR(CODE));
       45     5370
       46     5371    2   END LOCATE;

   5371 10 000047   200012 221300                    LDX1  ! CODE+2,,AUTO
        10 000050   000001 702211                    TSX2  ! 1,X1

       47     5372
       48     5373    1      CALL LOCATE (ITEM, PS_PMDAT$, POINTER$);

PL6.E3A0      #001=PSL$LOCATE File=PSL$LOCATE.:E05TSI                            WED 07/30/97 04:35 Page:9    
   5373 10 000051   200004 236100                    LDQ     @POINTER$,,AUTO
        10 000052   000001 235000 11                 LDA     1
        10 000053   200014 757100                    STAQ    @ITEM+1,,AUTO
        10 000054   200003 236100                    LDQ     @ITEM,,AUTO
        10 000055   200013 756100                    STQ     CODE+3,,AUTO
        10 000056   000003 701000 10                 TSX1    LOCATE
        10 000057   000000 011000                    NOP     0

       49     5374
       50     5375    1      IF ADDR(OLD_POINTER$) ~= ADDR(NIL)

   5375 10 000060   200005 236100                    LDQ     @OLD_POINTER$,,AUTO
        10 000061   000001 116000 xsym               CMPQ    B_VECTNIL+1
        10 000062   000101 600000 10                 TZE     s:5381

       51     5376    1        THEN
       52     5377    1         IF PS_OLD_PMDAT$ = ADDR(NIL)

   5377 10 000063   000000 236000 xsym               LDQ     PS_OLD_PMDAT$
        10 000064   000001 116000 xsym               CMPQ    B_VECTNIL+1
        10 000065   000072 601000 10                 TNZ     s:5379

       53     5378    1           THEN OLD_POINTER$ = ADDR(NIL);

   5378 10 000066   000001 236000 xsym               LDQ     B_VECTNIL+1
        10 000067   200005 470500                    LDP0    @OLD_POINTER$,,AUTO
        10 000070   000000 756100                    STQ     0,,PR0
        10 000071   000101 710000 10                 TRA     s:5381

       54     5379    1           ELSE CALL LOCATE (ITEM, PS_OLD_PMDAT$, OLD_POINTER$);

   5379 10 000072   200005 236100                    LDQ     @OLD_POINTER$,,AUTO
        10 000073   000004 235000 11                 LDA     4
        10 000074   200014 757100                    STAQ    @ITEM+1,,AUTO
        10 000075   200003 236100                    LDQ     @ITEM,,AUTO
        10 000076   200013 756100                    STQ     CODE+3,,AUTO
        10 000077   000003 701000 10                 TSX1    LOCATE
PL6.E3A0      #001=PSL$LOCATE File=PSL$LOCATE.:E05TSI                            WED 07/30/97 04:35 Page:10   
        10 000100   000000 011000                    NOP     0

       55     5380
       56     5381    1      RETURN;

   5381 10 000101   000000 702200 xent               TSX2  ! X66_ARET
       57     5382
       58     5383    1   END PSL$LOCATE;
       59     5384        %EOD;

PL6.E3A0      #001=PSL$LOCATE File=PSL$LOCATE.:E05TSI                            WED 07/30/97 04:35 Page:11   
--  Include file information  --

   PS_PERR_C.:E05TOU  is referenced.
   KL_MACRO_C.:E05TOU  is referenced.
   KL_AFCN_C.:E05TOU  is referenced.
   P_FEP_M.:E05TOU  is referenced.
   K_ID_E.:E05TOU  is referenced.
   XU_FORMAT_C.:E05TOU  is referenced.
   PM_BUCKET_C.:E05TOU  is referenced.
   PS_SUBS_C.:E05TOU  is referenced.
   PS_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure PSL$LOCATE.
PL6.E3A0      #001=PSL$LOCATE File=PSL$LOCATE.:E05TSI                            WED 07/30/97 04:35 Page:12   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    14-0-0/w PTR         r     1 @BUFFER$                   3-0-0/w PTR         r     1 @ITEM
    13-0-0/w PTR         r     1 @ITEM                      5-0-0/w PTR         r     1 @OLD_POINTER$
     4-0-0/w PTR         r     1 @POINTER$                 15-0-0/w PTR         r     1 @POINTER$
    *0-0-0/w PTR         r     1 BUFFER$                   10-0-0/c CHAR(3)     r     1 CODE
    *0-0-0/w SBIN        r     1 ITEM                      *0-0-0/w SBIN        r     1 ITEM
    *0-0-0/w PTR         r     1 OLD_POINTER$              *0-0-0/w PTR         r     1 POINTER$
    *0-0-0/w PTR         r     1 POINTER$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c CHAR(140)   r     1 PS_BUFFER                  0-0-0/w PTR         r     1 PS_OLD_PMDAT$
     0-0-0/w PTR         r     1 PS_OLD_PTRS$(0:99)
     0-0-0/w PTR         r     1 PS_PMDAT$
     0-0-0/w PTR         r     1 PS_PTRS$(0:99)
     0-0-0/w PTR         r     1 PS_STATS$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0N  NULL        r     1 M$LO                       0-0-0/c ASTR(9)     r     1 TEXTC


   Procedure PSL$LOCATE requires 66 words for executable code.
   Procedure PSL$LOCATE requires 22 words of local(AUTO) storage.
PL6.E3A0      #001=PSL$LOCATE File=PSL$LOCATE.:E05TSI                            WED 07/30/97 04:35 Page:13   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=PSL$LOCATE File=PSL$LOCATE.:E05TSI                            WED 07/30/97 04:35 Page:14   
          MINI XREF LISTING

BUFFER$ IN PROCEDURE LOCATE
      5353**DCL      5350--PROC     5356>>IF
CODE
      5347**DCL      5366<<CALLBLT  5368--CALL
ITEM
        15**DCL        13--PROC     5373<>CALL     5379<>CALL
ITEM IN PROCEDURE LOCATE
      5352**DCL      5350--PROC     5358>>ASSIGN   5360>>ASSIGN   5366>>CALLBLT
LOCATE
      5350**PROC     5373--CALL     5379--CALL
OLD_POINTER$
        17**DCL        13--PROC     5375--IF       5378<<ASSIGN   5379<>CALL
POINTER$
        16**DCL        13--PROC     5373<>CALL
POINTER$ IN PROCEDURE LOCATE
      5354**DCL      5350--PROC     5358<<ASSIGN   5360<<ASSIGN   5362>>IF
PSE$ERRMSG
      5348**DCL-ENT  5368--CALL
PS_BUFFER
      4850**DCL      4885--DCLINIT  4887--DCLINIT
PS_COLLECT.CALCNT
      5005**DCL      5005--REDEF
PS_COLLECT.USRSRV
      5002**DCL      5003--REDEF
PS_HLPCGBUF.DSPMSK
      5262**DCL      5268--REDEF
PS_HLPCGBUF.SLCMSK
      5303**DCL      5310--REDEF
PS_OLD_COLLECT.CALCNT
      5009**DCL      5010--REDEF
PS_OLD_COLLECT.USRSRV
      5007**DCL      5007--REDEF
PL6.E3A0      #001=PSL$LOCATE File=PSL$LOCATE.:E05TSI                            WED 07/30/97 04:35 Page:15   
PS_OLD_PMDAT$
      4429**DCL      5377>>IF       5379<>CALL
PS_OLD_PTRS$
      5002**DCL      5360>>ASSIGN
PS_PMDAT$
      4429**DCL      5356>>IF       5373<>CALL
PS_PTRS$
      5002**DCL      5358>>ASSIGN
PS_STATS$
      5011**DCL      5013--IMP-PTR
TEXTC.LEN
      5015**DCL      5015--IMP-SIZ

PL6.E3A0      #002=PSL$EVAL File=PSL$LOCATE.:E05TSI                              WED 07/30/97 04:35 Page:16   
       60        1        /*M* PSL$EVAL     Called by STATS to locate and evaluate a PMDAT entry        */
       61        2        /*T***********************************************************/
       62        3        /*T*                                                         */
       63        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
       64        5        /*T*                                                         */
       65        6        /*T***********************************************************/
       66        7        /*P*  NAME:    PSL$EVAL
       67        8              PURPOSE: Called by various STATS routines to locate and evaluate
       68        9                       (as an SBIN WORD) an entry in the PMDAT tables.
       69       10                                                                                      */
       70       11        PSL$EVAL: PROC (ITEM, CURRENT_VALUE, OLD_VALUE);
       71       12
       72       13    1   DCL ITEM SBIN;
       73       14    1   DCL CURRENT_VALUE SBIN;
       74       15    1   DCL OLD_VALUE SBIN;
       75       16        %INCLUDE PS_DATA_R;
       76     5312
       77     5313    1   DCL TEMP$ PTR;
       78     5314    1   DCL TEMP1$ PTR;
       79     5315    1   DCL PSL$LOCATE ENTRY (3);
       80     5316
       81     5317    1      CALL PSL$LOCATE (ITEM, TEMP$, TEMP1$);
       82     5318
       83     5319    1      CURRENT_VALUE = TEMP$ -> BLOCK.DATA(0);
       84     5320
       85     5321    1      IF ADDR(OLD_VALUE) ~= ADDR(NIL)
       86     5322    1        THEN
       87     5323    1         IF TEMP1$ = ADDR(NIL)        /* No old PMDAT stuff - "SNAP" in progress */
       88     5324    1           THEN OLD_VALUE = 0;
       89     5325    1           ELSE OLD_VALUE = TEMP1$ -> BLOCK.DATA(0);
       90     5326
       91     5327    1      RETURN;
       92     5328
       93     5329    1   END PSL$EVAL;
       94     5330        %EOD;

PL6.E3A0      #002=PSL$EVAL File=PSL$LOCATE.:E05TSI                              WED 07/30/97 04:35 Page:17   
--  Include file information  --

   KL_MACRO_C.:E05TOU  is referenced.
   KL_AFCN_C.:E05TOU  is referenced.
   P_FEP_M.:E05TOU  is referenced.
   K_ID_E.:E05TOU  is referenced.
   XU_FORMAT_C.:E05TOU  is referenced.
   PM_BUCKET_C.:E05TOU  is referenced.
   PS_SUBS_C.:E05TOU  is referenced.
   PS_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure PSL$EVAL.

   Procedure PSL$EVAL requires 30 words for executable code.
   Procedure PSL$EVAL requires 14 words of local(AUTO) storage.

PL6.E3A0      #002=PSL$EVAL File=PSL$LOCATE.:E05TSI                              WED 07/30/97 04:35 Page:18   

 Object Unit name= PSL$EVAL                                   File name= PSL$LOCATE.:E05TOU
 UTS= JUL 30 '97 04:35:35.36 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$LO
    1   DCB   even  none     0      0  M$DO
    2   DCB   even  none     0      0  M$SI
    3   DCB   even  none     0      0  F$LOG
    4   DCB   even  none     0      0  M$ME
    5   DCB   even  none     0      0  M$HLPCG
    6  RtLbCm even  none    30     36  PS_FDS
    7  RtLbCm even  none    32     40  PS_SELECT_RPN
    8  RtLbCm even  none    17     21  PS_STATS_RPN
    9  RtLbCm even  none    34     42  PS_STATS_BUCKET
   10   Proc  even  none    30     36  PSL$EVAL

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    10      0   yes            yes      Std        3  PSL$EVAL

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       3 PSL$LOCATE
                       nStd      0 X66_AUTO_3
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #002=PSL$EVAL File=PSL$LOCATE.:E05TSI                              WED 07/30/97 04:35 Page:19   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$LO                                  M$DO                                  M$SI
     F$LOG                                 M$ME                                  M$HLPCG
     PS_BUFFER                             PS_STATS$                             B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #002=PSL$EVAL File=PSL$LOCATE.:E05TSI                              WED 07/30/97 04:35 Page:20   


       60        1        /*M* PSL$EVAL     Called by STATS to locate and evaluate a PMDAT entry        */
       61        2        /*T***********************************************************/
       62        3        /*T*                                                         */
       63        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
       64        5        /*T*                                                         */
       65        6        /*T***********************************************************/
       66        7        /*P*  NAME:    PSL$EVAL
       67        8              PURPOSE: Called by various STATS routines to locate and evaluate
       68        9                       (as an SBIN WORD) an entry in the PMDAT tables.
       69       10                                                                                      */
       70       11        PSL$EVAL: PROC (ITEM, CURRENT_VALUE, OLD_VALUE);

     11 10 000000   000000 700200 xent  PSL$EVAL     TSX0  ! X66_AUTO_3
        10 000001   000016 000003                    ZERO    14,3

       71       12
       72       13    1   DCL ITEM SBIN;
       73       14    1   DCL CURRENT_VALUE SBIN;
       74       15    1   DCL OLD_VALUE SBIN;
       75       16        %INCLUDE PS_DATA_R;
       76     5312
       77     5313    1   DCL TEMP$ PTR;
       78     5314    1   DCL TEMP1$ PTR;
       79     5315    1   DCL PSL$LOCATE ENTRY (3);
       80     5316
       81     5317    1      CALL PSL$LOCATE (ITEM, TEMP$, TEMP1$);

   5317 10 000002   200010 630500                    EPPR0   TEMP1$,,AUTO
        10 000003   200014 450500                    STP0    TEMP1$+4,,AUTO
        10 000004   200007 631500                    EPPR1   TEMP$,,AUTO
        10 000005   200013 451500                    STP1    TEMP1$+3,,AUTO
        10 000006   200003 236100                    LDQ     @ITEM,,AUTO
        10 000007   200012 756100                    STQ     TEMP1$+2,,AUTO
        10 000010   200012 630500                    EPPR0   TEMP1$+2,,AUTO
        10 000011   000021 631400 xsym               EPPR1   B_VECTNIL+17
        10 000012   000000 701000 xent               TSX1    PSL$LOCATE
PL6.E3A0      #002=PSL$EVAL File=PSL$LOCATE.:E05TSI                              WED 07/30/97 04:35 Page:21   
        10 000013   000000 011000                    NOP     0

       82     5318
       83     5319    1      CURRENT_VALUE = TEMP$ -> BLOCK.DATA(0);

   5319 10 000014   200007 470500                    LDP0    TEMP$,,AUTO
        10 000015   200004 471500                    LDP1    @CURRENT_VALUE,,AUTO
        10 000016   000002 235100                    LDA     2,,PR0
        10 000017   100000 755100                    STA     0,,PR1

       84     5320
       85     5321    1      IF ADDR(OLD_VALUE) ~= ADDR(NIL)

   5321 10 000020   200005 236100                    LDQ     @OLD_VALUE,,AUTO
        10 000021   000001 116000 xsym               CMPQ    B_VECTNIL+1
        10 000022   000035 600000 10                 TZE     s:5327

       86     5322    1        THEN
       87     5323    1         IF TEMP1$ = ADDR(NIL)        /* No old PMDAT stuff - "SNAP" in progress */

   5323 10 000023   200010 236100                    LDQ     TEMP1$,,AUTO
        10 000024   000001 116000 xsym               CMPQ    B_VECTNIL+1
        10 000025   000031 601000 10                 TNZ     s:5325

       88     5324    1           THEN OLD_VALUE = 0;

   5324 10 000026   200005 470500                    LDP0    @OLD_VALUE,,AUTO
        10 000027   000000 450100                    STZ     0,,PR0
        10 000030   000035 710000 10                 TRA     s:5327

       89     5325    1           ELSE OLD_VALUE = TEMP1$ -> BLOCK.DATA(0);

   5325 10 000031   200010 470500                    LDP0    TEMP1$,,AUTO
        10 000032   200005 473500                    LDP3    @OLD_VALUE,,AUTO
        10 000033   000002 235100                    LDA     2,,PR0
        10 000034   300000 755100                    STA     0,,PR3

PL6.E3A0      #002=PSL$EVAL File=PSL$LOCATE.:E05TSI                              WED 07/30/97 04:35 Page:22   
       90     5326
       91     5327    1      RETURN;

   5327 10 000035   000000 702200 xent               TSX2  ! X66_ARET
       92     5328
       93     5329    1   END PSL$EVAL;
       94     5330        %EOD;

PL6.E3A0      #002=PSL$EVAL File=PSL$LOCATE.:E05TSI                              WED 07/30/97 04:35 Page:23   
--  Include file information  --

   KL_MACRO_C.:E05TOU  is referenced.
   KL_AFCN_C.:E05TOU  is referenced.
   P_FEP_M.:E05TOU  is referenced.
   K_ID_E.:E05TOU  is referenced.
   XU_FORMAT_C.:E05TOU  is referenced.
   PM_BUCKET_C.:E05TOU  is referenced.
   PS_SUBS_C.:E05TOU  is referenced.
   PS_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure PSL$EVAL.
PL6.E3A0      #002=PSL$EVAL File=PSL$LOCATE.:E05TSI                              WED 07/30/97 04:35 Page:24   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @CURRENT_VALUE             3-0-0/w PTR         r     1 @ITEM
     5-0-0/w PTR         r     1 @OLD_VALUE                *0-0-0/w SBIN        r     1 CURRENT_VALUE
    *0-0-0/w SBIN        r     1 ITEM                      *0-0-0/w SBIN        r     1 OLD_VALUE
     7-0-0/w PTR         r     1 TEMP$                     10-0-0/w PTR         r     1 TEMP1$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c CHAR(140)   r     1 PS_BUFFER                  0-0-0/w PTR         r     1 PS_STATS$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(108)   r     1 BLOCK                      0-0-0N  NULL        r     1 M$LO
     0-0-0/c ASTR(9)     r     1 TEXTC


   Procedure PSL$EVAL requires 30 words for executable code.
   Procedure PSL$EVAL requires 14 words of local(AUTO) storage.
PL6.E3A0      #002=PSL$EVAL File=PSL$LOCATE.:E05TSI                              WED 07/30/97 04:35 Page:25   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=PSL$EVAL File=PSL$LOCATE.:E05TSI                              WED 07/30/97 04:35 Page:26   
          MINI XREF LISTING

BLOCK.DATA
      4844**DCL      5319>>ASSIGN   5325>>ASSIGN
CURRENT_VALUE
        14**DCL        11--PROC     5319<<ASSIGN
ITEM
        13**DCL        11--PROC     5317<>CALL
OLD_VALUE
        15**DCL        11--PROC     5321--IF       5324<<ASSIGN   5325<<ASSIGN
PSL$LOCATE
      5315**DCL-ENT  5317--CALL
PS_BUFFER
      4847**DCL      4882--DCLINIT  4884--DCLINIT
PS_COLLECT.CALCNT
      5002**DCL      5002--REDEF
PS_COLLECT.USRSRV
      4999**DCL      5000--REDEF
PS_HLPCGBUF.DSPMSK
      5259**DCL      5265--REDEF
PS_HLPCGBUF.SLCMSK
      5300**DCL      5307--REDEF
PS_OLD_COLLECT.CALCNT
      5006**DCL      5007--REDEF
PS_OLD_COLLECT.USRSRV
      5004**DCL      5004--REDEF
PS_STATS$
      5008**DCL      5010--IMP-PTR
TEMP$
      5313**DCL      5317<>CALL     5319>>ASSIGN
TEMP1$
      5314**DCL      5317<>CALL     5323>>IF       5325>>ASSIGN
TEXTC.LEN
      5012**DCL      5012--IMP-SIZ

PL6.E3A0      #003=PSL$MUNGE File=PSL$LOCATE.:E05TSI                             WED 07/30/97 04:35 Page:27   
       95        1        /*M*  PSL$MUNGE   Munges multiple data entries into one sum value             */
       96        2        /*T***********************************************************/
       97        3        /*T*                                                         */
       98        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
       99        5        /*T*                                                         */
      100        6        /*T***********************************************************/
      101        7        /*P*  NAME:    PSL$MUNGE
      102        8              PURPOSE: PSL$MUNGE is called by the STATS data-deriving routines
      103        9                       to munge individual entries in the PMDAT table into
      104       10                       a sum value (e.g., idle times for the several CPUs in
      105       11                       a CP-6 system get munged into one "idle time" value).
      106       12                                                                                      */
      107       13        PSL$MUNGE: PROC (ITEM, TARGET, COUNT, OFFSET);
      108       14
      109       15    1   DCL ITEM SBIN;
      110       16    1   DCL TARGET SBIN;
      111       17    1   DCL COUNT SBIN;
      112       18    1   DCL OFFSET SBIN;
      113       19        %INCLUDE PS_DATA_R;
      114     5315    1   DCL REAL_OFFSET SBIN;
      115     5316    1   DCL I SBIN;
      116     5317    1   DCL P$ PTR;
      117     5318    1   DCL PSL$LOCATE ENTRY (3);
      118     5319
      119     5320    1      IF ADDR(OFFSET) = ADDR(NIL)
      120     5321    1        THEN
      121     5322    1         REAL_OFFSET = 0;
      122     5323    1        ELSE
      123     5324    1         REAL_OFFSET = OFFSET;
      124     5325
      125     5326    1      CALL PSL$LOCATE (ITEM, P$);
      126     5327
      127     5328    1      TARGET = 0;
      128     5329
      129     5330    2      DO I = 0 TO COUNT - 1;
      130     5331
      131     5332    2         TARGET = TARGET + P$ -> BLOCK.DATA (REAL_OFFSET + I *
PL6.E3A0      #003=PSL$MUNGE File=PSL$LOCATE.:E05TSI                             WED 07/30/97 04:35 Page:28   
      132     5333    2          P$ -> BLOCK.WORDS);
      133     5334
      134     5335    2         END;
      135     5336
      136     5337    1      RETURN;
      137     5338
      138     5339    1   END PSL$MUNGE;
      139     5340        %EOD;

PL6.E3A0      #003=PSL$MUNGE File=PSL$LOCATE.:E05TSI                             WED 07/30/97 04:35 Page:29   
--  Include file information  --

   KL_MACRO_C.:E05TOU  is referenced.
   KL_AFCN_C.:E05TOU  is referenced.
   P_FEP_M.:E05TOU  is referenced.
   K_ID_E.:E05TOU  is referenced.
   XU_FORMAT_C.:E05TOU  is referenced.
   PM_BUCKET_C.:E05TOU  is referenced.
   PS_SUBS_C.:E05TOU  is referenced.
   PS_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure PSL$MUNGE.

   Procedure PSL$MUNGE requires 39 words for executable code.
   Procedure PSL$MUNGE requires 14 words of local(AUTO) storage.

PL6.E3A0      #003=PSL$MUNGE File=PSL$LOCATE.:E05TSI                             WED 07/30/97 04:35 Page:30   

 Object Unit name= PSL$MUNGE                                  File name= PSL$LOCATE.:E05TOU
 UTS= JUL 30 '97 04:35:56.08 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$LO
    1   DCB   even  none     0      0  M$DO
    2   DCB   even  none     0      0  M$SI
    3   DCB   even  none     0      0  F$LOG
    4   DCB   even  none     0      0  M$ME
    5   DCB   even  none     0      0  M$HLPCG
    6  RtLbCm even  none    30     36  PS_FDS
    7  RtLbCm even  none    32     40  PS_SELECT_RPN
    8  RtLbCm even  none    17     21  PS_STATS_RPN
    9  RtLbCm even  none    34     42  PS_STATS_BUCKET
   10   Proc  even  none    39     47  PSL$MUNGE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    10      0   yes            yes      Std        4  PSL$MUNGE

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       3 PSL$LOCATE
                       nStd      0 X66_AUTO_4
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #003=PSL$MUNGE File=PSL$LOCATE.:E05TSI                             WED 07/30/97 04:35 Page:31   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$LO                                  M$DO                                  M$SI
     F$LOG                                 M$ME                                  M$HLPCG
     PS_BUFFER                             PS_STATS$                             B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #003=PSL$MUNGE File=PSL$LOCATE.:E05TSI                             WED 07/30/97 04:35 Page:32   


       95        1        /*M*  PSL$MUNGE   Munges multiple data entries into one sum value             */
       96        2        /*T***********************************************************/
       97        3        /*T*                                                         */
       98        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
       99        5        /*T*                                                         */
      100        6        /*T***********************************************************/
      101        7        /*P*  NAME:    PSL$MUNGE
      102        8              PURPOSE: PSL$MUNGE is called by the STATS data-deriving routines
      103        9                       to munge individual entries in the PMDAT table into
      104       10                       a sum value (e.g., idle times for the several CPUs in
      105       11                       a CP-6 system get munged into one "idle time" value).
      106       12                                                                                      */
      107       13        PSL$MUNGE: PROC (ITEM, TARGET, COUNT, OFFSET);

     13 10 000000   000000 700200 xent  PSL$MUNGE    TSX0  ! X66_AUTO_4
        10 000001   000016 000004                    ZERO    14,4

      108       14
      109       15    1   DCL ITEM SBIN;
      110       16    1   DCL TARGET SBIN;
      111       17    1   DCL COUNT SBIN;
      112       18    1   DCL OFFSET SBIN;
      113       19        %INCLUDE PS_DATA_R;
      114     5315    1   DCL REAL_OFFSET SBIN;
      115     5316    1   DCL I SBIN;
      116     5317    1   DCL P$ PTR;
      117     5318    1   DCL PSL$LOCATE ENTRY (3);
      118     5319
      119     5320    1      IF ADDR(OFFSET) = ADDR(NIL)

   5320 10 000002   200006 236100                    LDQ     @OFFSET,,AUTO
        10 000003   000001 116000 xsym               CMPQ    B_VECTNIL+1
        10 000004   000007 601000 10                 TNZ     s:5324

      120     5321    1        THEN
      121     5322    1         REAL_OFFSET = 0;
PL6.E3A0      #003=PSL$MUNGE File=PSL$LOCATE.:E05TSI                             WED 07/30/97 04:35 Page:33   

   5322 10 000005   200010 450100                    STZ     REAL_OFFSET,,AUTO
        10 000006   000012 710000 10                 TRA     s:5326

      122     5323    1        ELSE
      123     5324    1         REAL_OFFSET = OFFSET;

   5324 10 000007   200006 470500                    LDP0    @OFFSET,,AUTO
        10 000010   000000 235100                    LDA     0,,PR0
        10 000011   200010 755100                    STA     REAL_OFFSET,,AUTO

      124     5325
      125     5326    1      CALL PSL$LOCATE (ITEM, P$);

   5326 10 000012   200012 630500                    EPPR0   P$,,AUTO
        10 000013   200015 450500                    STP0    P$+3,,AUTO
        10 000014   200003 236100                    LDQ     @ITEM,,AUTO
        10 000015   200014 756100                    STQ     P$+2,,AUTO
        10 000016   200014 630500                    EPPR0   P$+2,,AUTO
        10 000017   000020 631400 xsym               EPPR1   B_VECTNIL+16
        10 000020   000000 701000 xent               TSX1    PSL$LOCATE
        10 000021   000000 011000                    NOP     0

      126     5327
      127     5328    1      TARGET = 0;

   5328 10 000022   200004 470500                    LDP0    @TARGET,,AUTO
        10 000023   000000 450100                    STZ     0,,PR0

      128     5329
      129     5330    2      DO I = 0 TO COUNT - 1;

   5330 10 000024   200011 450100                    STZ     I,,AUTO
        10 000025   000042 710000 10                 TRA     s:5335+1

      130     5331
      131     5332    2         TARGET = TARGET + P$ -> BLOCK.DATA (REAL_OFFSET + I *
PL6.E3A0      #003=PSL$MUNGE File=PSL$LOCATE.:E05TSI                             WED 07/30/97 04:35 Page:34   

   5332 10 000026   200012 470500                    LDP0    P$,,AUTO
        10 000027   000001 236100                    LDQ     1,,PR0
        10 000030   000022 736000                    QLS     18
        10 000031   000022 732000                    QRS     18
        10 000032   200011 402100                    MPY     I,,AUTO
        10 000033   200010 036100                    ADLQ    REAL_OFFSET,,AUTO
        10 000034   200004 471500                    LDP1    @TARGET,,AUTO
        10 000035   000000 620006                    EAX0    0,QL
        10 000036   100000 236100                    LDQ     0,,PR1
        10 000037   000002 036110                    ADLQ    2,X0,PR0
        10 000040   100000 756100                    STQ     0,,PR1

      132     5333    2          P$ -> BLOCK.WORDS);
      133     5334
      134     5335    2         END;

   5335 10 000041   200011 054100                    AOS     I,,AUTO
        10 000042   200005 470500                    LDP0    @COUNT,,AUTO
        10 000043   200011 236100                    LDQ     I,,AUTO
        10 000044   000000 116100                    CMPQ    0,,PR0
        10 000045   000026 604000 10                 TMI     s:5332

      135     5336
      136     5337    1      RETURN;

   5337 10 000046   000000 702200 xent               TSX2  ! X66_ARET
      137     5338
      138     5339    1   END PSL$MUNGE;
      139     5340        %EOD;

PL6.E3A0      #003=PSL$MUNGE File=PSL$LOCATE.:E05TSI                             WED 07/30/97 04:35 Page:35   
--  Include file information  --

   KL_MACRO_C.:E05TOU  is referenced.
   KL_AFCN_C.:E05TOU  is referenced.
   P_FEP_M.:E05TOU  is referenced.
   K_ID_E.:E05TOU  is referenced.
   XU_FORMAT_C.:E05TOU  is referenced.
   PM_BUCKET_C.:E05TOU  is referenced.
   PS_SUBS_C.:E05TOU  is referenced.
   PS_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure PSL$MUNGE.
PL6.E3A0      #003=PSL$MUNGE File=PSL$LOCATE.:E05TSI                             WED 07/30/97 04:35 Page:36   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     5-0-0/w PTR         r     1 @COUNT                     3-0-0/w PTR         r     1 @ITEM
     6-0-0/w PTR         r     1 @OFFSET                    4-0-0/w PTR         r     1 @TARGET
    *0-0-0/w SBIN        r     1 COUNT                     11-0-0/w SBIN        r     1 I
    *0-0-0/w SBIN        r     1 ITEM                      *0-0-0/w SBIN        r     1 OFFSET
    12-0-0/w PTR         r     1 P$                        10-0-0/w SBIN        r     1 REAL_OFFSET
    *0-0-0/w SBIN        r     1 TARGET

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c CHAR(140)   r     1 PS_BUFFER                  0-0-0/w PTR         r     1 PS_STATS$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(108)   r     1 BLOCK                      0-0-0N  NULL        r     1 M$LO
     0-0-0/c ASTR(9)     r     1 TEXTC


   Procedure PSL$MUNGE requires 39 words for executable code.
   Procedure PSL$MUNGE requires 14 words of local(AUTO) storage.
PL6.E3A0      #003=PSL$MUNGE File=PSL$LOCATE.:E05TSI                             WED 07/30/97 04:35 Page:37   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=PSL$MUNGE File=PSL$LOCATE.:E05TSI                             WED 07/30/97 04:35 Page:38   
          MINI XREF LISTING

BLOCK.DATA
      4847**DCL      5332>>ASSIGN
BLOCK.WORDS
      4847**DCL      5332>>ASSIGN
COUNT
        17**DCL        13--PROC     5330>>DOINDEX
I
      5316**DCL      5330<<DOINDEX  5332>>ASSIGN
ITEM
        15**DCL        13--PROC     5326<>CALL
OFFSET
        18**DCL        13--PROC     5320--IF       5324>>ASSIGN
P$
      5317**DCL      5326<>CALL     5332>>ASSIGN   5332>>ASSIGN
PSL$LOCATE
      5318**DCL-ENT  5326--CALL
PS_BUFFER
      4850**DCL      4885--DCLINIT  4887--DCLINIT
PS_COLLECT.CALCNT
      5005**DCL      5005--REDEF
PS_COLLECT.USRSRV
      5002**DCL      5003--REDEF
PS_HLPCGBUF.DSPMSK
      5262**DCL      5268--REDEF
PS_HLPCGBUF.SLCMSK
      5303**DCL      5310--REDEF
PS_OLD_COLLECT.CALCNT
      5009**DCL      5010--REDEF
PS_OLD_COLLECT.USRSRV
      5007**DCL      5007--REDEF
PS_STATS$
      5011**DCL      5013--IMP-PTR
PL6.E3A0      #003=PSL$MUNGE File=PSL$LOCATE.:E05TSI                             WED 07/30/97 04:35 Page:39   
REAL_OFFSET
      5315**DCL      5322<<ASSIGN   5324<<ASSIGN   5332>>ASSIGN
TARGET
        16**DCL        13--PROC     5328<<ASSIGN   5332<<ASSIGN   5332>>ASSIGN
TEXTC.LEN
      5015**DCL      5015--IMP-SIZ

PL6.E3A0      #004=PSL$CHOMP File=PSL$LOCATE.:E05TSI                             WED 07/30/97 04:36 Page:40   
      140        1        /*M*  PSL$CHOMP   Compute values for ALL and SNAP columns of displays         */
      141        2        /*T***********************************************************/
      142        3        /*T*                                                         */
      143        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      144        5        /*T*                                                         */
      145        6        /*T***********************************************************/
      146        7        /*P*  NAME:    PSL$CHOMP
      147        8              PURPOSE: PSL$CHOMP is called by various data-display routines to
      148        9                       compute the actual numerical values to be printed in the
      149       10                       {all} and {snap} portions of a display.  Five parameters
      150       11                       are passed:  the value of the variable in question at the
      151       12                       beginning and end of the snapshot interval, the print code
      152       13                       (which tells how the data is to be munged), and the target
      153       14                       variables into which the munged data is to be deposited.       */
      154       15        PSL$CHOMP: PROC (OLD_VALUE, NEW_VALUE, PRINT_CODE, RESULT_ALL, RESULT_SNAP);
      155       16
      156       17    1   DCL OLD_VALUE SBIN;
      157       18    1   DCL NEW_VALUE SBIN;
      158       19    1   DCL PRINT_CODE UBIN;
      159       20    1   DCL RESULT_ALL SBIN;
      160       21    1   DCL RESULT_SNAP SBIN;
      161       22        %INCLUDE PS_DATA_R;
      162     5318        %INCLUDE XUD_UTS_M;
      163     5400        %XUD_UTS_EQU;
      164     5411
      165     5412    2      DO CASE (PRINT_CODE);
      166     5413
      167     5414    2       CASE (ABS#);
      168     5415
      169     5416    2         RESULT_SNAP = NEW_VALUE;
      170     5417    2         RESULT_ALL = OLD_VALUE;               /* This is a weirdie - be warned! */
      171     5418
      172     5419    2       CASE (DIFF#);
      173     5420
      174     5421    2         RESULT_ALL = NEW_VALUE;
      175     5422    2         RESULT_SNAP = (NEW_VALUE - OLD_VALUE);
      176     5423
PL6.E3A0      #004=PSL$CHOMP File=PSL$LOCATE.:E05TSI                             WED 07/30/97 04:36 Page:41   
      177     5424    2       CASE (RATE#);
      178     5425
      179     5426    2         IF NEW_VALUE < 600000
      180     5427    2           THEN
      181     5428    2            RESULT_ALL = (NEW_VALUE * %UTS_CSEC_MIN# +
      182     5429    2             (PS_UPTIME / 2)) / PS_UPTIME;
      183     5430    2           ELSE
      184     5431    2            RESULT_ALL = NEW_VALUE / (PS_UPTIME / %UTS_CSEC_MIN#);
      185     5432
      186     5433    2         IF (NEW_VALUE - OLD_VALUE) < 600000
      187     5434    2           THEN
      188     5435    2            RESULT_SNAP = ((NEW_VALUE - OLD_VALUE) * %UTS_CSEC_MIN#
      189     5436    2             + (PS_ELAPSED_TIME / 2)) / PS_ELAPSED_TIME;
      190     5437    2           ELSE
      191     5438    2            RESULT_SNAP = (NEW_VALUE - OLD_VALUE) / (PS_ELAPSED_TIME /
      192     5439    2             %UTS_CSEC_MIN#);
      193     5440
      194     5441    2       CASE (PERCENT#);
      195     5442
      196     5443    2         IF NEW_VALUE < 1000000
      197     5444    2           THEN
      198     5445    2            RESULT_ALL = (NEW_VALUE * 100 + (PS_UPTIME / 2)) / PS_UPTIME;
      199     5446    2           ELSE
      200     5447    2            RESULT_ALL = NEW_VALUE / (PS_UPTIME / 100);
      201     5448
      202     5449    2         IF (NEW_VALUE - OLD_VALUE) < 1000000
      203     5450    2           THEN
      204     5451    2            RESULT_SNAP = ((NEW_VALUE - OLD_VALUE) * 100 +
      205     5452    2             (PS_ELAPSED_TIME / 2)) / PS_ELAPSED_TIME;
      206     5453    2           ELSE
      207     5454    2            RESULT_SNAP = (NEW_VALUE - OLD_VALUE) / (PS_ELAPSED_TIME / 100);
      208     5455
      209     5456    2       END;
      210     5457
      211     5458    1      IF RESULT_ALL < 0
      212     5459    1        THEN RESULT_ALL = 0;
      213     5460
PL6.E3A0      #004=PSL$CHOMP File=PSL$LOCATE.:E05TSI                             WED 07/30/97 04:36 Page:42   
      214     5461    1      IF RESULT_SNAP < 0
      215     5462    1        THEN RESULT_SNAP = 0;
      216     5463
      217     5464    1      RETURN;
      218     5465
      219     5466    1   END PSL$CHOMP;
      220     5467        %EOD;

PL6.E3A0      #004=PSL$CHOMP File=PSL$LOCATE.:E05TSI                             WED 07/30/97 04:36 Page:43   
--  Include file information  --

   XUD_UTS_M.:E05TOU  is referenced.
   KL_MACRO_C.:E05TOU  is referenced.
   KL_AFCN_C.:E05TOU  is referenced.
   P_FEP_M.:E05TOU  is referenced.
   K_ID_E.:E05TOU  is referenced.
   XU_FORMAT_C.:E05TOU  is referenced.
   PM_BUCKET_C.:E05TOU  is referenced.
   PS_SUBS_C.:E05TOU  is referenced.
   PS_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure PSL$CHOMP.

   Procedure PSL$CHOMP requires 138 words for executable code.
   Procedure PSL$CHOMP requires 12 words of local(AUTO) storage.

PL6.E3A0      #004=PSL$CHOMP File=PSL$LOCATE.:E05TSI                             WED 07/30/97 04:36 Page:44   

 Object Unit name= PSL$CHOMP                                  File name= PSL$LOCATE.:E05TOU
 UTS= JUL 30 '97 04:36:17.48 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$LO
    1   DCB   even  none     0      0  M$DO
    2   DCB   even  none     0      0  M$SI
    3   DCB   even  none     0      0  F$LOG
    4   DCB   even  none     0      0  M$ME
    5   DCB   even  none     0      0  M$HLPCG
    6  RtLbCm even  none    30     36  PS_FDS
    7  RtLbCm even  none    32     40  PS_SELECT_RPN
    8  RtLbCm even  none    17     21  PS_STATS_RPN
    9  RtLbCm even  none    34     42  PS_STATS_BUCKET
   10   Proc  even  none   138    212  PSL$CHOMP
   11  RoData even  none     2      2  PSL$CHOMP

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    10      0   yes            yes      Std        5  PSL$CHOMP

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_5
                       nStd      0 X66_ARET
PL6.E3A0      #004=PSL$CHOMP File=PSL$LOCATE.:E05TSI                             WED 07/30/97 04:36 Page:45   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$LO                                  M$DO                                  M$SI
     F$LOG                                 M$ME                                  M$HLPCG
     PS_BUFFER                             PS_ELAPSED_TIME                       PS_UPTIME
     PS_STATS$

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #004=PSL$CHOMP File=PSL$LOCATE.:E05TSI                             WED 07/30/97 04:36 Page:46   


      140        1        /*M*  PSL$CHOMP   Compute values for ALL and SNAP columns of displays         */
      141        2        /*T***********************************************************/
      142        3        /*T*                                                         */
      143        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      144        5        /*T*                                                         */
      145        6        /*T***********************************************************/
      146        7        /*P*  NAME:    PSL$CHOMP
      147        8              PURPOSE: PSL$CHOMP is called by various data-display routines to
      148        9                       compute the actual numerical values to be printed in the
      149       10                       {all} and {snap} portions of a display.  Five parameters
      150       11                       are passed:  the value of the variable in question at the
      151       12                       beginning and end of the snapshot interval, the print code
      152       13                       (which tells how the data is to be munged), and the target
      153       14                       variables into which the munged data is to be deposited.       */
      154       15        PSL$CHOMP: PROC (OLD_VALUE, NEW_VALUE, PRINT_CODE, RESULT_ALL, RESULT_SNAP);

     15 10 000000   000000 700200 xent  PSL$CHOMP    TSX0  ! X66_AUTO_5
        10 000001   000014 000005                    ZERO    12,5

      155       16
      156       17    1   DCL OLD_VALUE SBIN;
      157       18    1   DCL NEW_VALUE SBIN;
      158       19    1   DCL PRINT_CODE UBIN;
      159       20    1   DCL RESULT_ALL SBIN;
      160       21    1   DCL RESULT_SNAP SBIN;
      161       22        %INCLUDE PS_DATA_R;
      162     5318        %INCLUDE XUD_UTS_M;
      163     5400        %XUD_UTS_EQU;
      164     5411
      165     5412    2      DO CASE (PRINT_CODE);

   5412 10 000002   200005 470500                    LDP0    @PRINT_CODE,,AUTO
        10 000003   000000 235100                    LDA     0,,PR0
        10 000004   000004 115007                    CMPA    4,DL
        10 000005   000007 602005 10                 TNC     s:5412+5,AL
        10 000006   000201 710000 10                 TRA     s:5458
PL6.E3A0      #004=PSL$CHOMP File=PSL$LOCATE.:E05TSI                             WED 07/30/97 04:36 Page:47   
        10 000007   000013 710000 10                 TRA     s:5416
        10 000010   000024 710000 10                 TRA     s:5421
        10 000011   000036 710000 10                 TRA     s:5426
        10 000012   000120 710000 10                 TRA     s:5443

      166     5413
      167     5414    2       CASE (ABS#);

      168     5415
      169     5416    2         RESULT_SNAP = NEW_VALUE;

   5416 10 000013   200004 471500                    LDP1    @NEW_VALUE,,AUTO
        10 000014   200007 473500                    LDP3    @RESULT_SNAP,,AUTO
        10 000015   100000 235100                    LDA     0,,PR1
        10 000016   300000 755100                    STA     0,,PR3

      170     5417    2         RESULT_ALL = OLD_VALUE;               /* This is a weirdie - be warned! */

   5417 10 000017   200003 474500                    LDP4    @OLD_VALUE,,AUTO
        10 000020   200006 475500                    LDP5    @RESULT_ALL,,AUTO
        10 000021   400000 235100                    LDA     0,,PR4
        10 000022   500000 755100                    STA     0,,PR5
        10 000023   000201 710000 10                 TRA     s:5458

      171     5418
      172     5419    2       CASE (DIFF#);

      173     5420
      174     5421    2         RESULT_ALL = NEW_VALUE;

   5421 10 000024   200004 471500                    LDP1    @NEW_VALUE,,AUTO
        10 000025   200006 473500                    LDP3    @RESULT_ALL,,AUTO
        10 000026   100000 235100                    LDA     0,,PR1
        10 000027   300000 755100                    STA     0,,PR3

      175     5422    2         RESULT_SNAP = (NEW_VALUE - OLD_VALUE);

PL6.E3A0      #004=PSL$CHOMP File=PSL$LOCATE.:E05TSI                             WED 07/30/97 04:36 Page:48   
   5422 10 000030   200003 474500                    LDP4    @OLD_VALUE,,AUTO
        10 000031   100000 236100                    LDQ     0,,PR1
        10 000032   400000 136100                    SBLQ    0,,PR4
        10 000033   200007 475500                    LDP5    @RESULT_SNAP,,AUTO
        10 000034   500000 756100                    STQ     0,,PR5
        10 000035   000201 710000 10                 TRA     s:5458

      176     5423
      177     5424    2       CASE (RATE#);

      178     5425
      179     5426    2         IF NEW_VALUE < 600000

   5426 10 000036   200004 471500                    LDP1    @NEW_VALUE,,AUTO
        10 000037   100000 235100                    LDA     0,,PR1
        10 000040   000000 115000 11                 CMPA    0
        10 000041   000054 605000 10                 TPL     s:5431

      180     5427    2           THEN
      181     5428    2            RESULT_ALL = (NEW_VALUE * %UTS_CSEC_MIN# +

   5428 10 000042   000000 236000 xsym               LDQ     PS_UPTIME
        10 000043   000002 506007                    DIV     2,DL
        10 000044   200012 756100                    STQ     @RESULT_SNAP+3,,AUTO
        10 000045   100000 236100                    LDQ     0,,PR1
        10 000046   013560 402007                    MPY     6000,DL
        10 000047   200012 036100                    ADLQ    @RESULT_SNAP+3,,AUTO
        10 000050   000000 506000 xsym               DIV     PS_UPTIME
        10 000051   200006 473500                    LDP3    @RESULT_ALL,,AUTO
        10 000052   300000 756100                    STQ     0,,PR3
        10 000053   000063 710000 10                 TRA     s:5433

      182     5429    2             (PS_UPTIME / 2)) / PS_UPTIME;
      183     5430    2           ELSE
      184     5431    2            RESULT_ALL = NEW_VALUE / (PS_UPTIME / %UTS_CSEC_MIN#);

   5431 10 000054   000000 236000 xsym               LDQ     PS_UPTIME
PL6.E3A0      #004=PSL$CHOMP File=PSL$LOCATE.:E05TSI                             WED 07/30/97 04:36 Page:49   
        10 000055   013560 506007                    DIV     6000,DL
        10 000056   200012 756100                    STQ     @RESULT_SNAP+3,,AUTO
        10 000057   100000 236100                    LDQ     0,,PR1
        10 000060   200012 506100                    DIV     @RESULT_SNAP+3,,AUTO
        10 000061   200006 473500                    LDP3    @RESULT_ALL,,AUTO
        10 000062   300000 756100                    STQ     0,,PR3

      185     5432
      186     5433    2         IF (NEW_VALUE - OLD_VALUE) < 600000

   5433 10 000063   200003 474500                    LDP4    @OLD_VALUE,,AUTO
        10 000064   100000 236100                    LDQ     0,,PR1
        10 000065   400000 136100                    SBLQ    0,,PR4
        10 000066   000000 116000 11                 CMPQ    0
        10 000067   000105 605000 10                 TPL     s:5438

      187     5434    2           THEN
      188     5435    2            RESULT_SNAP = ((NEW_VALUE - OLD_VALUE) * %UTS_CSEC_MIN#

   5435 10 000070   100000 236100                    LDQ     0,,PR1
        10 000071   400000 136100                    SBLQ    0,,PR4
        10 000072   200012 756100                    STQ     @RESULT_SNAP+3,,AUTO
        10 000073   000000 236000 xsym               LDQ     PS_ELAPSED_TIME
        10 000074   000002 506007                    DIV     2,DL
        10 000075   200013 756100                    STQ     @RESULT_SNAP+4,,AUTO
        10 000076   200012 236100                    LDQ     @RESULT_SNAP+3,,AUTO
        10 000077   013560 402007                    MPY     6000,DL
        10 000100   200013 036100                    ADLQ    @RESULT_SNAP+4,,AUTO
        10 000101   000000 506000 xsym               DIV     PS_ELAPSED_TIME
        10 000102   200007 475500                    LDP5    @RESULT_SNAP,,AUTO
        10 000103   500000 756100                    STQ     0,,PR5
        10 000104   000201 710000 10                 TRA     s:5458

      189     5436    2             + (PS_ELAPSED_TIME / 2)) / PS_ELAPSED_TIME;
      190     5437    2           ELSE
      191     5438    2            RESULT_SNAP = (NEW_VALUE - OLD_VALUE) / (PS_ELAPSED_TIME /

PL6.E3A0      #004=PSL$CHOMP File=PSL$LOCATE.:E05TSI                             WED 07/30/97 04:36 Page:50   
   5438 10 000105   100000 236100                    LDQ     0,,PR1
        10 000106   400000 136100                    SBLQ    0,,PR4
        10 000107   200012 756100                    STQ     @RESULT_SNAP+3,,AUTO
        10 000110   000000 236000 xsym               LDQ     PS_ELAPSED_TIME
        10 000111   013560 506007                    DIV     6000,DL
        10 000112   200013 756100                    STQ     @RESULT_SNAP+4,,AUTO
        10 000113   200012 236100                    LDQ     @RESULT_SNAP+3,,AUTO
        10 000114   200013 506100                    DIV     @RESULT_SNAP+4,,AUTO
        10 000115   200007 475500                    LDP5    @RESULT_SNAP,,AUTO
        10 000116   500000 756100                    STQ     0,,PR5
        10 000117   000201 710000 10                 TRA     s:5458

      192     5439    2             %UTS_CSEC_MIN#);
      193     5440
      194     5441    2       CASE (PERCENT#);

      195     5442
      196     5443    2         IF NEW_VALUE < 1000000

   5443 10 000120   200004 471500                    LDP1    @NEW_VALUE,,AUTO
        10 000121   100000 235100                    LDA     0,,PR1
        10 000122   000001 115000 11                 CMPA    1
        10 000123   000136 605000 10                 TPL     s:5447

      197     5444    2           THEN
      198     5445    2            RESULT_ALL = (NEW_VALUE * 100 + (PS_UPTIME / 2)) / PS_UPTIME;

   5445 10 000124   000000 236000 xsym               LDQ     PS_UPTIME
        10 000125   000002 506007                    DIV     2,DL
        10 000126   200012 756100                    STQ     @RESULT_SNAP+3,,AUTO
        10 000127   100000 236100                    LDQ     0,,PR1
        10 000130   000144 402007                    MPY     100,DL
        10 000131   200012 036100                    ADLQ    @RESULT_SNAP+3,,AUTO
        10 000132   000000 506000 xsym               DIV     PS_UPTIME
        10 000133   200006 473500                    LDP3    @RESULT_ALL,,AUTO
        10 000134   300000 756100                    STQ     0,,PR3
        10 000135   000145 710000 10                 TRA     s:5449
PL6.E3A0      #004=PSL$CHOMP File=PSL$LOCATE.:E05TSI                             WED 07/30/97 04:36 Page:51   

      199     5446    2           ELSE
      200     5447    2            RESULT_ALL = NEW_VALUE / (PS_UPTIME / 100);

   5447 10 000136   000000 236000 xsym               LDQ     PS_UPTIME
        10 000137   000144 506007                    DIV     100,DL
        10 000140   200012 756100                    STQ     @RESULT_SNAP+3,,AUTO
        10 000141   100000 236100                    LDQ     0,,PR1
        10 000142   200012 506100                    DIV     @RESULT_SNAP+3,,AUTO
        10 000143   200006 473500                    LDP3    @RESULT_ALL,,AUTO
        10 000144   300000 756100                    STQ     0,,PR3

      201     5448
      202     5449    2         IF (NEW_VALUE - OLD_VALUE) < 1000000

   5449 10 000145   200003 474500                    LDP4    @OLD_VALUE,,AUTO
        10 000146   100000 236100                    LDQ     0,,PR1
        10 000147   400000 136100                    SBLQ    0,,PR4
        10 000150   000001 116000 11                 CMPQ    1
        10 000151   000167 605000 10                 TPL     s:5454

      203     5450    2           THEN
      204     5451    2            RESULT_SNAP = ((NEW_VALUE - OLD_VALUE) * 100 +

   5451 10 000152   100000 236100                    LDQ     0,,PR1
        10 000153   400000 136100                    SBLQ    0,,PR4
        10 000154   200012 756100                    STQ     @RESULT_SNAP+3,,AUTO
        10 000155   000000 236000 xsym               LDQ     PS_ELAPSED_TIME
        10 000156   000002 506007                    DIV     2,DL
        10 000157   200013 756100                    STQ     @RESULT_SNAP+4,,AUTO
        10 000160   200012 236100                    LDQ     @RESULT_SNAP+3,,AUTO
        10 000161   000144 402007                    MPY     100,DL
        10 000162   200013 036100                    ADLQ    @RESULT_SNAP+4,,AUTO
        10 000163   000000 506000 xsym               DIV     PS_ELAPSED_TIME
        10 000164   200007 475500                    LDP5    @RESULT_SNAP,,AUTO
        10 000165   500000 756100                    STQ     0,,PR5
        10 000166   000201 710000 10                 TRA     s:5458
PL6.E3A0      #004=PSL$CHOMP File=PSL$LOCATE.:E05TSI                             WED 07/30/97 04:36 Page:52   

      205     5452    2             (PS_ELAPSED_TIME / 2)) / PS_ELAPSED_TIME;
      206     5453    2           ELSE
      207     5454    2            RESULT_SNAP = (NEW_VALUE - OLD_VALUE) / (PS_ELAPSED_TIME / 100);

   5454 10 000167   100000 236100                    LDQ     0,,PR1
        10 000170   400000 136100                    SBLQ    0,,PR4
        10 000171   200012 756100                    STQ     @RESULT_SNAP+3,,AUTO
        10 000172   000000 236000 xsym               LDQ     PS_ELAPSED_TIME
        10 000173   000144 506007                    DIV     100,DL
        10 000174   200013 756100                    STQ     @RESULT_SNAP+4,,AUTO
        10 000175   200012 236100                    LDQ     @RESULT_SNAP+3,,AUTO
        10 000176   200013 506100                    DIV     @RESULT_SNAP+4,,AUTO
        10 000177   200007 475500                    LDP5    @RESULT_SNAP,,AUTO
        10 000200   500000 756100                    STQ     0,,PR5

      208     5455
      209     5456    2       END;

      210     5457
      211     5458    1      IF RESULT_ALL < 0

   5458 10 000201   200006 471500                    LDP1    @RESULT_ALL,,AUTO
        10 000202   100000 235100                    LDA     0,,PR1
        10 000203   000205 605000 10                 TPL     s:5461

      212     5459    1        THEN RESULT_ALL = 0;

   5459 10 000204   100000 450100                    STZ     0,,PR1

      213     5460
      214     5461    1      IF RESULT_SNAP < 0

   5461 10 000205   200007 473500                    LDP3    @RESULT_SNAP,,AUTO
        10 000206   300000 235100                    LDA     0,,PR3
        10 000207   000211 605000 10                 TPL     s:5464

PL6.E3A0      #004=PSL$CHOMP File=PSL$LOCATE.:E05TSI                             WED 07/30/97 04:36 Page:53   
      215     5462    1        THEN RESULT_SNAP = 0;

   5462 10 000210   300000 450100                    STZ     0,,PR3

      216     5463
      217     5464    1      RETURN;

   5464 10 000211   000000 702200 xent               TSX2  ! X66_ARET
      218     5465
      219     5466    1   END PSL$CHOMP;
      220     5467        %EOD;

PL6.E3A0      #004=PSL$CHOMP File=PSL$LOCATE.:E05TSI                             WED 07/30/97 04:36 Page:54   
--  Include file information  --

   XUD_UTS_M.:E05TOU  is referenced.
   KL_MACRO_C.:E05TOU  is referenced.
   KL_AFCN_C.:E05TOU  is referenced.
   P_FEP_M.:E05TOU  is referenced.
   K_ID_E.:E05TOU  is referenced.
   XU_FORMAT_C.:E05TOU  is referenced.
   PM_BUCKET_C.:E05TOU  is referenced.
   PS_SUBS_C.:E05TOU  is referenced.
   PS_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is never referenced.
      No diagnostics issued in procedure PSL$CHOMP.
PL6.E3A0      #004=PSL$CHOMP File=PSL$LOCATE.:E05TSI                             WED 07/30/97 04:36 Page:55   

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @NEW_VALUE                 3-0-0/w PTR         r     1 @OLD_VALUE
     5-0-0/w PTR         r     1 @PRINT_CODE                6-0-0/w PTR         r     1 @RESULT_ALL
     7-0-0/w PTR         r     1 @RESULT_SNAP              *0-0-0/w SBIN        r     1 NEW_VALUE
    *0-0-0/w SBIN        r     1 OLD_VALUE                 *0-0-0/w UBIN        r     1 PRINT_CODE
    *0-0-0/w SBIN        r     1 RESULT_ALL                *0-0-0/w SBIN        r     1 RESULT_SNAP

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c CHAR(140)   r     1 PS_BUFFER                  0-0-0/w SBIN        r     1 PS_ELAPSED_TIME
     0-0-0/w PTR         r     1 PS_STATS$                  0-0-0/w SBIN        r     1 PS_UPTIME

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0N  NULL        r     1 M$LO                       0-0-0/c ASTR(9)     r     1 TEXTC


   Procedure PSL$CHOMP requires 138 words for executable code.
   Procedure PSL$CHOMP requires 12 words of local(AUTO) storage.
PL6.E3A0      #004=PSL$CHOMP File=PSL$LOCATE.:E05TSI                             WED 07/30/97 04:36 Page:56   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=PSL$CHOMP File=PSL$LOCATE.:E05TSI                             WED 07/30/97 04:36 Page:57   
          MINI XREF LISTING

NEW_VALUE
        18**DCL        15--PROC     5416>>ASSIGN   5421>>ASSIGN   5422>>ASSIGN   5426>>IF       5428>>ASSIGN
      5431>>ASSIGN   5433>>IF       5435>>ASSIGN   5438>>ASSIGN   5443>>IF       5445>>ASSIGN   5447>>ASSIGN
      5449>>IF       5451>>ASSIGN   5454>>ASSIGN
OLD_VALUE
        17**DCL        15--PROC     5417>>ASSIGN   5422>>ASSIGN   5433>>IF       5435>>ASSIGN   5438>>ASSIGN
      5449>>IF       5451>>ASSIGN   5454>>ASSIGN
PRINT_CODE
        19**DCL        15--PROC     5412>>DOCASE
PS_BUFFER
      4853**DCL      4888--DCLINIT  4890--DCLINIT
PS_COLLECT.CALCNT
      5008**DCL      5008--REDEF
PS_COLLECT.USRSRV
      5005**DCL      5006--REDEF
PS_ELAPSED_TIME
      4854**DCL      5435>>ASSIGN   5435>>ASSIGN   5438>>ASSIGN   5451>>ASSIGN   5451>>ASSIGN   5454>>ASSIGN
PS_HLPCGBUF.DSPMSK
      5265**DCL      5271--REDEF
PS_HLPCGBUF.SLCMSK
      5306**DCL      5313--REDEF
PS_OLD_COLLECT.CALCNT
      5012**DCL      5013--REDEF
PS_OLD_COLLECT.USRSRV
      5010**DCL      5010--REDEF
PS_STATS$
      5014**DCL      5016--IMP-PTR
PS_UPTIME
      4854**DCL      5428>>ASSIGN   5428>>ASSIGN   5431>>ASSIGN   5445>>ASSIGN   5445>>ASSIGN   5447>>ASSIGN
RESULT_ALL
        20**DCL        15--PROC     5417<<ASSIGN   5421<<ASSIGN   5428<<ASSIGN   5431<<ASSIGN   5445<<ASSIGN
      5447<<ASSIGN   5458>>IF       5459<<ASSIGN
PL6.E3A0      #004=PSL$CHOMP File=PSL$LOCATE.:E05TSI                             WED 07/30/97 04:36 Page:58   
RESULT_SNAP
        21**DCL        15--PROC     5416<<ASSIGN   5422<<ASSIGN   5435<<ASSIGN   5438<<ASSIGN   5451<<ASSIGN
      5454<<ASSIGN   5461>>IF       5462<<ASSIGN
TEXTC.LEN
      5018**DCL      5018--IMP-SIZ

PL6.E3A0      #005=PSL$TIME File=PSL$LOCATE.:E05TSI                              WED 07/30/97 04:36 Page:59   
      221        1        /*T***********************************************************/
      222        2        /*T*                                                         */
      223        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      224        4        /*T*                                                         */
      225        5        /*T***********************************************************/
      226        6        PSL$TIME: PROC (UTS_INPUT, TIME_OUTPUT);
      227        7        %INCLUDE PS_DATA_R;
      228     5303        %INCLUDE CP_6;
      229     5384        %FPT_TIME  (DEST=EXT,
      230     5385                    SOURCE=UTS);
      231     5404    1   DCL UTS_INPUT UBIN;
      232     5405        %EXT_TIME (NAME=TIME_OUTPUT, STCLASS=" ");
      233     5413
      234     5414    1      FPT_TIME.TSTAMP_ = VECTOR(UTS_INPUT);
      235     5415    1      FPT_TIME.DAY_ = VECTOR(TIME_OUTPUT.DAY@);
      236     5416    1      FPT_TIME.DATE_ = VECTOR(TIME_OUTPUT.DATE@);
      237     5417    1      FPT_TIME.TIME_ = VECTOR(TIME_OUTPUT.TIME@);
      238     5418
      239     5419    1      TIME_OUTPUT.SEP1 = '. ';
      240     5420    1      TIME_OUTPUT.SEP2 = ' at ';
      241     5421
      242     5422    1      CALL M$TIME (FPT_TIME);
      243     5423
      244     5424    1      RETURN;
      245     5425
      246     5426    1   END PSL$TIME;

PL6.E3A0      #005=PSL$TIME File=PSL$LOCATE.:E05TSI                              WED 07/30/97 04:36 Page:60   
--  Include file information  --

   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   KL_MACRO_C.:E05TOU  is referenced.
   KL_AFCN_C.:E05TOU  is referenced.
   P_FEP_M.:E05TOU  is referenced.
   K_ID_E.:E05TOU  is referenced.
   XU_FORMAT_C.:E05TOU  is referenced.
   PM_BUCKET_C.:E05TOU  is referenced.
   PS_SUBS_C.:E05TOU  is referenced.
   PS_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure PSL$TIME.

   Procedure PSL$TIME requires 27 words for executable code.
   Procedure PSL$TIME requires 6 words of local(AUTO) storage.

    No errors detected in file PSL$LOCATE.:E05TSI    .

PL6.E3A0      #005=PSL$TIME File=PSL$LOCATE.:E05TSI                              WED 07/30/97 04:36 Page:61   

 Object Unit name= PSL$TIME                                   File name= PSL$LOCATE.:E05TOU
 UTS= JUL 30 '97 04:36:43.32 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$LO
    1   DCB   even  none     0      0  M$DO
    2   DCB   even  none     0      0  M$SI
    3   DCB   even  none     0      0  F$LOG
    4   DCB   even  none     0      0  M$ME
    5   DCB   even  none     0      0  M$HLPCG
    6  RtLbCm even  none    30     36  PS_FDS
    7  RtLbCm even  none    32     40  PS_SELECT_RPN
    8  RtLbCm even  none    17     21  PS_STATS_RPN
    9  RtLbCm even  none    34     42  PS_STATS_BUCKET
   10   DCB   even  none     0      0  M$UC
   11   Data  even  none    12     14  PSL$TIME
   12  RoData even  UTS      2      2  PSL$TIME
   13   Proc  even  none    27     33  PSL$TIME
   14  RoData even  none     4      4  PSL$TIME

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
    13      0   yes            yes      Std        2  PSL$TIME
PL6.E3A0      #005=PSL$TIME File=PSL$LOCATE.:E05TSI                              WED 07/30/97 04:36 Page:62   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_2
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$LO                                  M$DO                                  M$SI
     F$LOG                                 M$ME                                  M$HLPCG
     PS_BUFFER                             PS_STATS$                             M$UC

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #005=PSL$TIME File=PSL$LOCATE.:E05TSI                              WED 07/30/97 04:36 Page:63   


      221        1        /*T***********************************************************/
      222        2        /*T*                                                         */
      223        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      224        4        /*T*                                                         */
      225        5        /*T***********************************************************/
      226        6        PSL$TIME: PROC (UTS_INPUT, TIME_OUTPUT);

      6 13 000000   000000 700200 xent  PSL$TIME     TSX0  ! X66_AUTO_2
        13 000001   000006 000002                    ZERO    6,2

      227        7        %INCLUDE PS_DATA_R;
      228     5303        %INCLUDE CP_6;
      229     5384        %FPT_TIME  (DEST=EXT,
      230     5385                    SOURCE=UTS);
      231     5404    1   DCL UTS_INPUT UBIN;
      232     5405        %EXT_TIME (NAME=TIME_OUTPUT, STCLASS=" ");
      233     5413
      234     5414    1      FPT_TIME.TSTAMP_ = VECTOR(UTS_INPUT);

   5414 13 000002   777640 235007                    LDA     -96,DL
        13 000003   200003 236100                    LDQ     @UTS_INPUT,,AUTO
        13 000004   000010 757000 11                 STAQ    FPT_TIME+8

      235     5415    1      FPT_TIME.DAY_ = VECTOR(TIME_OUTPUT.DAY@);

   5415 13 000005   577640 235007                    LDA     -65632,DL
        13 000006   200004 236100                    LDQ     @TIME_OUTPUT,,AUTO
        13 000007   000006 757000 11                 STAQ    FPT_TIME+6

      236     5416    1      FPT_TIME.DATE_ = VECTOR(TIME_OUTPUT.DATE@);

   5416 13 000010   000000 235000 14                 LDA     0
        13 000011   200004 236100                    LDQ     @TIME_OUTPUT,,AUTO
        13 000012   000001 036000 14                 ADLQ    1
        13 000013   000002 757000 11                 STAQ    FPT_TIME+2

PL6.E3A0      #005=PSL$TIME File=PSL$LOCATE.:E05TSI                              WED 07/30/97 04:36 Page:64   
      237     5417    1      FPT_TIME.TIME_ = VECTOR(TIME_OUTPUT.TIME@);

   5417 13 000014   000002 235000 14                 LDA     2
        13 000015   200004 236100                    LDQ     @TIME_OUTPUT,,AUTO
        13 000016   000003 036000 14                 ADLQ    3
        13 000017   000004 757000 11                 STAQ    FPT_TIME+4

      238     5418
      239     5419    1      TIME_OUTPUT.SEP1 = '. ';

   5419 13 000020   200004 470500                    LDP0    @TIME_OUTPUT,,AUTO
        13 000021   040100 100400                    MLR     fill='040'O
        13 000022   000000 000002 12                 ADSC9   0                        cn=0,n=2
        13 000023   000000 600002                    ADSC9   0,,PR0                   cn=3,n=2

      240     5420    1      TIME_OUTPUT.SEP2 = ' at ';

   5420 13 000024   040100 100400                    MLR     fill='040'O
        13 000025   000001 000004 12                 ADSC9   1                        cn=0,n=4
        13 000026   000003 600004                    ADSC9   3,,PR0                   cn=3,n=4

      241     5421
      242     5422    1      CALL M$TIME (FPT_TIME);

   5422 13 000027   000000 630400 11                 EPPR0   FPT_TIME
        13 000030   020004 713400                    CLIMB   8196
        13 000031   402000 401760                    pmme    nvectors=5

      243     5423
      244     5424    1      RETURN;

   5424 13 000032   000000 702200 xent               TSX2  ! X66_ARET
      245     5425
      246     5426    1   END PSL$TIME;

PL6.E3A0      #005=PSL$TIME File=PSL$LOCATE.:E05TSI                              WED 07/30/97 04:36 Page:65   
--  Include file information  --

   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   KL_MACRO_C.:E05TOU  is referenced.
   KL_AFCN_C.:E05TOU  is referenced.
   P_FEP_M.:E05TOU  is referenced.
   K_ID_E.:E05TOU  is referenced.
   XU_FORMAT_C.:E05TOU  is referenced.
   PM_BUCKET_C.:E05TOU  is referenced.
   PS_SUBS_C.:E05TOU  is referenced.
   PS_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure PSL$TIME.
PL6.E3A0      #005=PSL$TIME File=PSL$LOCATE.:E05TSI                              WED 07/30/97 04:36 Page:66   

 **** Variables and constants ****

  ****  Section 011  Data  PSL$TIME

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(432)   r     1 FPT_TIME

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @TIME_OUTPUT               3-0-0/w PTR         r     1 @UTS_INPUT
    *0-0-0/c STRC(270)   r     1 TIME_OUTPUT               *0-0-0/w UBIN        r     1 UTS_INPUT

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c CHAR(140)   r     1 PS_BUFFER                  0-0-0/w PTR         r     1 PS_STATS$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0N  NULL        r     1 M$LO                       0-0-0/c ASTR(9)     r     1 TEXTC


   Procedure PSL$TIME requires 27 words for executable code.
   Procedure PSL$TIME requires 6 words of local(AUTO) storage.
PL6.E3A0      #005=PSL$TIME File=PSL$LOCATE.:E05TSI                              WED 07/30/97 04:36 Page:67   

    No errors detected in file PSL$LOCATE.:E05TSI    .
PL6.E3A0      #005=PSL$TIME File=PSL$LOCATE.:E05TSI                              WED 07/30/97 04:36 Page:68   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #005=PSL$TIME File=PSL$LOCATE.:E05TSI                              WED 07/30/97 04:36 Page:69   
          MINI XREF LISTING

FPT_TIME
      5396**DCL      5422<>CALL
FPT_TIME.DATE_
      5396**DCL      5416<<ASSIGN
FPT_TIME.DAY_
      5399**DCL      5415<<ASSIGN
FPT_TIME.TIME_
      5398**DCL      5417<<ASSIGN
FPT_TIME.TSTAMP_
      5399**DCL      5414<<ASSIGN
FPT_TIME.V
      5400**DCL      5396--DCLINIT
M$TIME
      5379**DCL-ENT  5422--CALL
PS_BUFFER
      4838**DCL      4873--DCLINIT  4875--DCLINIT
PS_COLLECT.CALCNT
      4993**DCL      4993--REDEF
PS_COLLECT.USRSRV
      4990**DCL      4991--REDEF
PS_HLPCGBUF.DSPMSK
      5250**DCL      5256--REDEF
PS_HLPCGBUF.SLCMSK
      5291**DCL      5298--REDEF
PS_OLD_COLLECT.CALCNT
      4997**DCL      4998--REDEF
PS_OLD_COLLECT.USRSRV
      4995**DCL      4995--REDEF
PS_STATS$
      4999**DCL      5001--IMP-PTR
TEXTC.LEN
      5003**DCL      5003--IMP-SIZ
PL6.E3A0      #005=PSL$TIME File=PSL$LOCATE.:E05TSI                              WED 07/30/97 04:36 Page:70   
TIME_OUTPUT
      5406**DCL         6--PROC
TIME_OUTPUT.DATE@
      5409**DCL      5416--ASSIGN
TIME_OUTPUT.DAY@
      5407**DCL      5415--ASSIGN
TIME_OUTPUT.SEP1
      5408**DCL      5419<<ASSIGN
TIME_OUTPUT.SEP2
      5410**DCL      5420<<ASSIGN
TIME_OUTPUT.TIME@
      5411**DCL      5417--ASSIGN
UTS_INPUT
      5404**DCL         6--PROC     5414--ASSIGN
