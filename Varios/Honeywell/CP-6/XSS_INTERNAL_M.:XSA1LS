

10:41 OCT 01 '97 XSS_INTERNAL_M.:XSA1SI                                    1    
    1      /*M*    XSS_INTERNAL_M  Internal macros for the ISO Session layer.      */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /*X* DDA */
    8      /*F*    NAME:   XSS$TADDR
    9              DESCRIPTION:
   10                  This macro defines a structure that holds the Transport and
   11                  Network layer addresses of an application.
   12      */
   13      %MACRO XSS$TADDR( NAME=XSS$TADDR, LVL=1, LAST=";", STCLASS=BASED);
   14      %LSET LISTDIR = '0'B;
   15      %LSET LISTEXP = '1'B;
   16      %LSET LISTCOM = '0'B;
   17      %LSET LISTSUB = '1'B;
   18      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
   19      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
   20          %LSET INIT = CHARTEXT( ' INIT');
   21          %LSET ENIT = CHARTEXT( '');
   22      %ELSE;
   23          %LSET INIT = CHARTEXT( '/*');
   24          %LSET ENIT = CHARTEXT( '*/');
   25      %ENDIF;
   26      %IF LENGTHC( 'NAME') = 0;
   27          %LSET LVL = LVL-1;
   28      %ELSE;
   29          %IF LVL = 1;
   30              DCL 1 NAME STCLASS,
   31          %ELSE;
   32              %LVL NAME,
   33          %ENDIF;
   34      %ENDIF;
   35      %LSET LVL1 = LVL+1;
   36      %LSET LVL2 = LVL1+1;
   37
10:41 OCT 01 '97 XSS_INTERNAL_M.:XSA1SI                                    2    
   38          %K$TSAP( NAME=TSAP, LVL=%LVL1, LAST=",");
   39          %K$NSAP( FPTN=NSAP, LVL=%LVL1);
   40      %MEND;
   41      /*F*    NAME:   XSS$TOKENS
   42              DESCRIPTION:
   43                  This macro defines an area as a bit list which is used
   44                  by the ISO Session protocol state machine (PSM).  There
   45                  are several uses of this macro in the XSS$SCTX structure.
   46      */
   47      %MACRO XSS$TOKENS( NAME=XSS$TOKENS, LVL=1, LAST=";", STCLASS=BASED, ALGN=CALIGNED);
   48      %LSET LISTDIR = '0'B;
   49      %LSET LISTEXP = '1'B;
   50      %LSET LISTCOM = '0'B;
   51      %LSET LISTSUB = '1'B;
   52      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
   53      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
   54          %LSET INIT = CHARTEXT( ' INIT');
   55          %LSET ENIT = CHARTEXT( '');
   56      %ELSE;
   57          %LSET INIT = CHARTEXT( '/*');
   58          %LSET ENIT = CHARTEXT( '*/');
   59      %ENDIF;
   60      %IF LENGTHC( 'NAME') = 0;
   61          %LSET LVL = LVL-1;
   62      %ELSE;
   63          %IF LVL = 1;
   64              DCL 1 NAME STCLASS ALGN,
   65          %ELSE;
   66              %LVL NAME ALGN,
   67          %ENDIF;
   68      %ENDIF;
   69      %LSET LVL1 = LVL+1;
   70      %LSET LVL2 = LVL1+1;
   71
   72          %LVL1 %CHARTEXT( '*') BIT(1) %INIT( '0'B)%ENIT UNAL,
   73          %LVL1 %CHARTEXT( 'TR') BIT(1) %INIT( %FALSE)%ENIT UNAL,
   74          %LVL1 %CHARTEXT( '*') BIT(1) %INIT( '0'B)%ENIT UNAL,
10:41 OCT 01 '97 XSS_INTERNAL_M.:XSA1SI                                    3    
   75          %LVL1 %CHARTEXT( 'MA') BIT(1) %INIT( %FALSE)%ENIT UNAL,
   76          %LVL1 %CHARTEXT( '*') BIT(1) %INIT( '0'B)%ENIT UNAL,
   77          %LVL1 %CHARTEXT( 'MI') BIT(1) %INIT( %FALSE)%ENIT UNAL,
   78          %LVL1 %CHARTEXT( '*') BIT(1) %INIT( '0'B)%ENIT UNAL,
   79          %LVL1 %CHARTEXT( 'DK') BIT(1) %INIT( %FALSE)%ENIT UNAL
   80      %IF NOT MODE_FEP;
   81          , %LVL1 %CHARTEXT( '*') BIT(1) %INIT( '0'B)%ENIT UNAL
   82      %ENDIF;
   83          LAST
   84      %MEND;
   85      /*F*    NAME:   XSS$SCTX
   86              DESCRIPTION:
   87                  This is the connection context block for an ISO Session
   88                  connection.  When Session is part of the CP-6 or LCP-6
   89                  monitor, these are aquired from TIGR-initialized or
   90                  BOBCAT-initialized data space as needed for new incoming
   91                  connect requests.  They are released on disconnect.
   92                  When Session is part of the user application, these are
   93                  allocated out of and released to a dynamic segment.
   94      */
   95      %MACRO XSS$SCTX( NAME=XSS$SCTX, LVL=1, LAST=";", STCLASS=BASED);
   96      %LSET L6 = BITBIN( MODE_FEP);
   97      %LSET LISTDIR = '0'B;
   98      %LSET LISTEXP = '1'B;
   99      %LSET LISTCOM = '0'B;
  100      %LSET LISTSUB = '1'B;
  101      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
  102      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
  103          %LSET INIT = CHARTEXT( ' INIT');
  104          %LSET ENIT = CHARTEXT( '');
  105      %ELSE;
  106          %LSET INIT = CHARTEXT( '/*');
  107          %LSET ENIT = CHARTEXT( '*/');
  108      %ENDIF;
  109      %IF LENGTHC( 'NAME') = 0;
  110          %LSET LVL = LVL-1;
  111      %ELSE;
10:41 OCT 01 '97 XSS_INTERNAL_M.:XSA1SI                                    4    
  112          %IF LVL = 1;
  113              DCL 1 NAME STCLASS,
  114          %ELSE;
  115              %LVL NAME,
  116          %ENDIF;
  117      %ENDIF;
  118      %LSET LVL1 = LVL+1;
  119      %LSET LVL2 = LVL1+1;
  120      %IF MODE_FEP;
  121          %LSET LONG = CHARTEXT( '(32)');
  122          %LSET HALF = CHARTEXT( 'WORD');
  123      %ELSE;
  124          %LSET LONG = CHARTEXT( 'WORD');
  125          %LSET HALF = CHARTEXT( 'HALF');
  126      %ENDIF;
  127
  128          %LVL1 %CHARTEXT( 'STATE') UBIN BYTE %INIT( %XSS_SST_00)%ENIT CALIGNED,
  129          %LVL1 %CHARTEXT( 'HISTX') UBIN BYTE %INIT( 0)%ENIT CALIGNED,
  130          %LVL1 %CHARTEXT( 'RPV'),
  131              %LVL2 %CHARTEXT( 'LEN') UBIN BYTE %INIT( 0)%ENIT CALIGNED,
  132              %LVL2 %CHARTEXT( 'TXT(0:8)') UBIN BYTE %INIT( 0*9)%ENIT CALIGNED,
  133          %LVL1 %CHARTEXT( 'SRCX') UBIN %HALF %INIT( %NULL)%ENIT CALIGNED,
  134          %LVL1 %CHARTEXT( 'DSTX') UBIN %HALF %INIT( %NULL)%ENIT CALIGNED,
  135          %LVL1 %CHARTEXT( 'COMX') UBIN %HALF %INIT( %NULL)%ENIT CALIGNED,
  136          /* one byte contains each of the following */
  137          %XSS$TOKENS( NAME=AVAIL, LVL=LVL1, STCLASS=STCLASS, LAST=",");
  138          %XSS$TOKENS( NAME=OWNED, LVL=LVL1, STCLASS=STCLASS, LAST=",");
  139          %XSS$TOKENS( NAME=I, LVL=LVL1, STCLASS=STCLASS, LAST=",");
  140          %XSS$TOKENS( NAME=A, LVL=LVL1, STCLASS=STCLASS, LAST=",");
  141          %XSS$TOKENS( NAME=II, LVL=LVL1, STCLASS=STCLASS, LAST=",");
  142          %XSS$TOKENS( NAME=AA, LVL=LVL1, STCLASS=STCLASS, LAST=",");
  143          /* two bytes contain the following */
  144          %LVL1 %CHARTEXT( 'FU'),
  145              %LVL2 %CHARTEXT( '*') BIT(5) %INIT( '00000'B)%ENIT UNAL,
  146              %LVL2 %CHARTEXT( 'TD') BIT(1) %INIT( %FALSE)%ENIT UNAL,
  147              %LVL2 %CHARTEXT( 'EXCEP') BIT(1) %INIT( %FALSE)%ENIT UNAL,
  148              %LVL2 %CHARTEXT( 'CD') BIT(1) %INIT( %FALSE)%ENIT UNAL,
10:41 OCT 01 '97 XSS_INTERNAL_M.:XSA1SI                                    5    
  149              %LVL2 %CHARTEXT( 'NR') BIT(1) %INIT( %FALSE)%ENIT UNAL,
  150              %LVL2 %CHARTEXT( 'ACT') BIT(1) %INIT( %FALSE)%ENIT UNAL,
  151              %LVL2 %CHARTEXT( 'RESYN') BIT(1) %INIT( %FALSE)%ENIT UNAL,
  152              %LVL2 %CHARTEXT( 'MA') BIT(1) %INIT( %FALSE)%ENIT UNAL,
  153              %LVL2 %CHARTEXT( 'SY') BIT(1) %INIT( %FALSE)%ENIT UNAL,
  154              %LVL2 %CHARTEXT( 'EX') BIT(1) %INIT( %FALSE)%ENIT UNAL,
  155              %LVL2 %CHARTEXT( 'FD') BIT(1) %INIT( %FALSE)%ENIT UNAL,
  156              %LVL2 %CHARTEXT( 'HD') BIT(1) %INIT( %FALSE)%ENIT UNAL,
  157      %IF NOT MODE_FEP;
  158              %LVL2 %CHARTEXT( '*') BIT(2) %INIT( '00'B)%ENIT UNAL,
  159      %ENDIF;
  160          %LVL1 %CHARTEXT( 'FLAGS'),
  161              /* one byte contains the following */
  162              %LVL2 %CHARTEXT( 'WINNER') BIT(1) %INIT( %FALSE)%ENIT UNAL,
  163              %LVL2 %CHARTEXT( 'VSC') BIT(1) %INIT( %FALSE)%ENIT UNAL,
  164              %LVL2 %CHARTEXT( 'VACT') BIT(1) %INIT( %FALSE)%ENIT UNAL,
  165              %LVL2 %CHARTEXT( 'VNEXTACT') BIT(1) %INIT( %FALSE)%ENIT UNAL,
  166              %LVL2 %CHARTEXT( 'VTRR') BIT(1) %INIT( %FALSE)%ENIT UNAL,
  167              %LVL2 %CHARTEXT( 'TEXP') BIT(1) %INIT( %FALSE)%ENIT UNAL,
  168              %LVL2 %CHARTEXT( 'VCOLL') BIT(1) %INIT( %FALSE)%ENIT UNAL,
  169              %LVL2 %CHARTEXT( 'VTCA') BIT(1) %INIT( %FALSE)%ENIT UNAL,
  170              %LVL2 %CHARTEXT( 'VDNR') BIT(1) %INIT( %FALSE)%ENIT UNAL,
  171          /* one byte contains the following */
  172          %LVL1 %CHARTEXT( 'VRSP') UBIN BYTE %INIT( 0)%ENIT CALIGNED,
  173          /* that's it for byte values */
  174          %LVL1 %CHARTEXT( 'VRSPNB') UBIN %LONG %INIT( 0)%ENIT ALIGNED,
  175          %LVL1 %CHARTEXT( 'VA') UBIN %LONG %INIT( 0)%ENIT ALIGNED,
  176          %LVL1 %CHARTEXT( 'VM') UBIN %LONG %INIT( 0)%ENIT ALIGNED,
  177          %LVL1 %CHARTEXT( 'VR') UBIN %LONG %INIT( 0)%ENIT ALIGNED,
  178          %LVL1 %CHARTEXT( 'PO') UBIN BYTE %INIT( 0)%ENIT CALIGNED,
  179      %IF NOT MODE_FEP;
  180          %LVL1 %CHARTEXT( '*') BIT(1) %INIT( '0'B)%ENIT UNAL,
  181      %ENDIF;
  182          %LVL1 %CHARTEXT( 'VN') UBIN(4) %INIT( 0)%ENIT UNAL,
  183          %LVL1 %CHARTEXT( 'PT') UBIN(4) %INIT( 0)%ENIT UNAL,
  184      %IF NOT MODE_FEP;
  185          %LVL1 %CHARTEXT( '*') BIT(1) %INIT( '0'B)%ENIT UNAL,
10:41 OCT 01 '97 XSS_INTERNAL_M.:XSA1SI                                    6    
  186      %ENDIF;
  187          %LVL1 %CHARTEXT( '*') BIT(2) %INIT( '00'B)%ENIT UNAL,
  188          %LVL1 %CHARTEXT( 'FLOWSTOPPED') BIT(1) %INIT( '0'B)%ENIT UNAL,
  189          %LVL1 %CHARTEXT( 'BLOCKING') BIT(1) %INIT( '0'B)%ENIT UNAL,
  190          %LVL1 %CHARTEXT( 'ALARM') BIT(1) %INIT( '0'B)%ENIT UNAL,
  191          %LVL1 %CHARTEXT( 'NEEDAREAD') BIT(1) %INIT( '0'B)%ENIT UNAL,
  192          %LVL1 %CHARTEXT( 'TERMINATING') BIT(1) %INIT( '0'B)%ENIT UNAL,
  193          %LVL1 %CHARTEXT( 'ABORTING') BIT(1) %INIT( '0'B)%ENIT UNAL,
  194          %LVL1 %CHARTEXT( 'MODE') UBIN BYTE %INIT(0)%ENIT CALIGNED,
  195          %LVL1 %CHARTEXT( 'TSDUMS'),
  196              %LVL2 %CHARTEXT( 'INI') UBIN %HALF %INIT( 0)%ENIT CALIGNED,
  197              %LVL2 %CHARTEXT( 'RSP') UBIN %HALF %INIT( 0)%ENIT CALIGNED,
  198          %LVL1 %CHARTEXT( 'PEERSCID') UBIN BYTE %INIT( 0)%ENIT CALIGNED,
  199          %LVL1 %CHARTEXT( 'SCID') UBIN BYTE %INIT( 0)%ENIT CALIGNED,
  200          %LVL1 %CHARTEXT( 'TD'),
  201              %LVL2 %CHARTEXT( '*') BIT(4) %INIT( '0'B)%ENIT UNAL,
  202              %LVL2 %CHARTEXT( 'NORSN') BIT(1) %INIT( '0'B)%ENIT UNAL,
  203              %LVL2 %CHARTEXT( 'PRTER') BIT(1) %INIT( '0'B)%ENIT UNAL,
  204              %LVL2 %CHARTEXT( 'USRAB') BIT(1) %INIT( '0'B)%ENIT UNAL,
  205              %LVL2 %CHARTEXT( 'TCREL') BIT(1) %INIT( '0'B)%ENIT UNAL,
  206      %IF NOT MODE_FEP;
  207              %LVL2 %CHARTEXT( '*') BIT(1) %INIT( '0'B)%ENIT UNAL,
  208      %ENDIF;
  209          %LVL1 %CHARTEXT( 'MAGIC') UBIN BYTE %INIT( 0)%ENIT CALIGNED,
  210          %LVL1 %CHARTEXT( 'ENTRY$') EPTR %INIT( ENTADDR( NIL))%ENIT ALIGNED,
  211          %LVL1 %CHARTEXT( 'SUR') UBIN WORD %INIT( 0)%ENIT ALIGNED,
  212          %LVL1 %CHARTEXT( 'HISTZ(0:7)') UBIN %HALF %INIT( 0*8)%ENIT CALIGNED,
  213          %LVL1 %CHARTEXT( 'HIST(0:7)') REDEF HISTZ,
  214              %LVL2 %CHARTEXT( 'EVENT') UBIN BYTE CALIGNED,
  215              %LVL2 %CHARTEXT( 'NXTST') UBIN BYTE CALIGNED,
  216          %LVL1 %CHARTEXT( 'REFLECT'),
  217              %LVL2 %CHARTEXT( 'STATE') UBIN BYTE %INIT( %XSS_SST_00)%ENIT CALIGNED,
  218              %LVL2 %CHARTEXT( 'EVENT') UBIN BYTE %INIT( %XSS_SEV_NULL)%ENIT CALIGNED,
  219              %LVL2 %CHARTEXT( 'ERROR') UBIN BYTE %INIT( 0)%ENIT CALIGNED,
  220          %LVL1 %CHARTEXT( 'EVQX') UBIN BYTE %INIT( 0)%ENIT CALIGNED,
  221          %LVL1 %CHARTEXT( 'EVQ(0:7)') UBIN BYTE %INIT(8*0)%ENIT CALIGNED,
  222          %LVL1 %CHARTEXT( 'STATION') CHAR(8) %INIT( '        ')%ENIT ALIGNED,
10:41 OCT 01 '97 XSS_INTERNAL_M.:XSA1SI                                    7    
  223          %LVL1 %CHARTEXT( 'HEADX') UBIN %HALF %INIT( %NULL)%ENIT CALIGNED,
  224          %LVL1 %CHARTEXT( 'TAILX') UBIN %HALF %INIT( %NULL)%ENIT CALIGNED,
  225          %LVL1 %CHARTEXT( 'BUFTOT') UBIN %INIT( 0)%ENIT ALIGNED,
  226          %LVL1 %CHARTEXT( 'BUFX') UBIN %HALF %INIT( %NULL)%ENIT CALIGNED,
  227          %LVL1 %CHARTEXT( 'DCB#') UBIN %HALF %INIT( 0)%ENIT CALIGNED,
  228          %LVL1 %CHARTEXT( 'EVENT#') UBIN %INIT( 0)%ENIT ALIGNED,
  229          %XSS$LATCH( NAME=LATCH, LVL=LVL1, STCLASS=STCLASS, LAST=LAST);
  230      %MEND;
  231      /*F*    NAME:   XSS$QVEC
  232              DESCRIPTION:
  233                  This macro generates a structure allowing access to a buffer
  234                  given its length and address.  It is similar to the VECTOR
  235                  construct, but more efficient since the length is right-justified
  236                  in a full word.  The "down" side is, only byte resolution.
  237      */
  238      %MACRO XSS$QVEC( NAME=XSS$QVEC, LVL=1, LAST=";", STCLASS=BASED,
  239                       PTR$=NIL,
  240                       SIZE=0);
  241      %LSET LISTDIR = '0'B;
  242      %LSET LISTEXP = '1'B;
  243      %LSET LISTCOM = '0'B;
  244      %LSET LISTSUB = '1'B;
  245      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
  246      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
  247          %LSET INIT = CHARTEXT( ' INIT');
  248          %LSET ENIT = CHARTEXT( '');
  249      %ELSE;
  250          %LSET INIT = CHARTEXT( '/*');
  251          %LSET ENIT = CHARTEXT( '*/');
  252      %ENDIF;
  253      %IF LENGTHC( 'NAME') = 0;
  254          %LSET LVL = LVL-1;
  255      %ELSE;
  256          %IF LVL = 1;
  257              DCL 1 NAME STCLASS DALIGNED,
  258          %ELSE;
  259              %LVL NAME DALIGNED,
10:41 OCT 01 '97 XSS_INTERNAL_M.:XSA1SI                                    8    
  260          %ENDIF;
  261      %ENDIF;
  262      %LSET LVL1 = LVL+1;
  263      %IF MODE_FEP;
  264          %LSET LONG = CHARTEXT( '(32)');
  265          %LSET HALF = CHARTEXT( 'WORD');
  266      %ELSE;
  267          %LSET LONG = CHARTEXT( 'WORD');
  268          %LSET HALF = CHARTEXT( 'HALF');
  269      %ENDIF;
  270
  271          %LVL1 %CHARTEXT( 'PTR$') PTR %INIT( ADDR( PTR$))%ENIT CALIGNED,
  272          %LVL1 %CHARTEXT( 'SIZE') SBIN %LONG %INIT( SIZE)%ENIT LAST
  273      %MEND;
  274      /*F*    NAME:   XSS$VBLK
  275              DESCRIPTION:
  276                  This macro is used to generate a structure that is used to pass
  277                  parameters to various procedures within the Session layer.  It
  278                  carries all the status information for a particular outgoing or
  279                  incoming Session message, and is thus somethat like K$RWPARM.
  280      */
  281      %MACRO XSS$VBLK( NAME=XSS$VBLK, LVL=1, LAST=";", STCLASS=BASED);
  282      %LSET LISTDIR = '0'B;
  283      %LSET LISTEXP = '1'B;
  284      %LSET LISTCOM = '0'B;
  285      %LSET LISTSUB = '1'B;
  286      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
  287      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
  288          %LSET INIT = CHARTEXT( ' INIT');
  289          %LSET ENIT = CHARTEXT( '');
  290      %ELSE;
  291          %LSET INIT = CHARTEXT( '/*');
  292          %LSET ENIT = CHARTEXT( '*/');
  293      %ENDIF;
  294      %IF LENGTHC( 'NAME') = 0;
  295          %LSET LVL = LVL-1;
  296      %ELSE;
10:41 OCT 01 '97 XSS_INTERNAL_M.:XSA1SI                                    9    
  297          %IF LVL = 1;
  298              DCL 1 NAME STCLASS,
  299          %ELSE;
  300              %LVL NAME,
  301          %ENDIF;
  302      %ENDIF;
  303      %LSET LVL1 = LVL+1;
  304      %LSET LVL2 = LVL1+1;
  305      %LSET L6 = BITBIN( MODE_FEP);
  306
  307          %LVL1 %CHARTEXT( 'CTX$') PTR %INIT( ADDR( NIL))%ENIT,
  308          %LVL1 %CHARTEXT( 'RF_RSN') UBIN BYTE %INIT( 0)%ENIT CALIGNED,
  309          %LVL1 %CHARTEXT( 'TRN_DSC') UBIN BYTE %INIT( 0)%ENIT CALIGNED,
  310          %LVL1 %CHARTEXT( 'EI'),
  311              %LVL2 %CHARTEXT( '*') UBIN(6) %INIT( 0)%ENIT UNAL,
  312              %LVL2 %CHARTEXT( 'BOSSDU') BIT(1) %INIT( %FALSE)%ENIT UNAL,
  313              %LVL2 %CHARTEXT( 'EOSSDU') BIT(1) %INIT( %FALSE)%ENIT UNAL,
  314      %IF NOT MODE_FEP;
  315              %LVL2 %CHARTEXT( '*') BIT(1) %INIT( '0'B)%ENIT UNAL,
  316      %ENDIF;
  317          %LVL1 %CHARTEXT( 'EVENT') UBIN BYTE %INIT( 0)%ENIT CALIGNED,
  318          %LVL1 %CHARTEXT( 'FPT$') PTR %INIT( ADDR( NIL))%ENIT ALIGNED,
  319          %LVL1 %CHARTEXT( 'USERCALL') UBIN %INIT( 0)%ENIT ALIGNED,
  320          %XSS$QVEC( NAME=PDU, LVL=%LVL1, LAST=",", STCLASS=STCLASS);
  321          %XSS$QVEC( NAME=DAT, LVL=%LVL1, LAST=";", STCLASS=STCLASS);
  322      %MEND;
  323      /*F*    NAME:   XSS$LATCH
  324              DESCRIPTION:
  325                  This macro generates a structure that holds information relating
  326                  to the most recently satisfied read on M$AU or M$NC.  The info
  327                  is saved by the ASYNC routine XSS$TRECV for later use by
  328                  XSS$COMMWAIT.
  329      */
  330      %MACRO XSS$LATCH( NAME=XSS$LATCH, LVL=1, LAST=";", STCLASS=BASED);
  331      %LSET LISTDIR = '0'B;
  332      %LSET LISTEXP = '1'B;
  333      %LSET LISTCOM = '0'B;
10:41 OCT 01 '97 XSS_INTERNAL_M.:XSA1SI                                    10   
  334      %LSET LISTSUB = '1'B;
  335      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
  336      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
  337          %LSET INIT = CHARTEXT( ' INIT');
  338          %LSET ENIT = CHARTEXT( '');
  339      %ELSE;
  340          %LSET INIT = CHARTEXT( '/*');
  341          %LSET ENIT = CHARTEXT( '*/');
  342      %ENDIF;
  343      %IF LENGTHC( 'NAME') = 0;
  344          %LSET LVL = LVL-1;
  345      %ELSE;
  346          %IF LVL = 1;
  347              DCL 1 NAME STCLASS,
  348          %ELSE;
  349              %LVL NAME,
  350          %ENDIF;
  351      %ENDIF;
  352      %LSET LVL1 = LVL+1;
  353      %LSET LVL2 = LVL1+1;
  354      %IF MODE_FEP;
  355          %LSET LONG = CHARTEXT( '(32)');
  356          %LSET HALF = CHARTEXT( 'WORD');
  357      %ELSE;
  358          %LSET LONG = CHARTEXT( 'WORD');
  359          %LSET HALF = CHARTEXT( 'HALF');
  360      %ENDIF;
  361
  362          %LVL1 %CHARTEXT( 'PRESENT') BIT(1) %INIT( '0'B)%ENIT UNAL,
  363          %LVL1 %CHARTEXT( 'ADMIN') BIT(1) %INIT( '0'B)%ENIT UNAL,
  364          %LVL1 %CHARTEXT( '*') BIT(16) %INIT( '0'B)%ENIT UNAL,
  365          %LVL1 %CHARTEXT( 'LNKX') UBIN %HALF %INIT( %NULL)%ENIT CALIGNED,
  366          %LVL1 %CHARTEXT( 'MSG$') PTR %INIT( ADDR( NIL))%ENIT,
  367          %LVL1 %CHARTEXT( 'MSGSZ') SBIN %INIT( 0)%ENIT,
  368          %VLP_ERRCODE( FPTN=ERRCODE, LVL=LVL1, LAST=",", STCLASS=STCLASS);
  369          %LVL1 %CHARTEXT( 'STATION') CHAR(8) %INIT( '        ')%ENIT ALIGNED LAST
  370      %MEND;
10:41 OCT 01 '97 XSS_INTERNAL_M.:XSA1SI                                    11   
  371      /*F*    NAME:   XSS$GLUE
  372              DESCRIPTION:
  373                  This macro is used to define the structure of a message passed
  374                  between the user-domain Session layer and the monitor domain
  375                  part of OSI Session.  This structure applies to messages for
  376                  both clients and servers, though how the message is actually
  377                  written to/read from the monitor varies for the two cases.
  378      */
  379      %MACRO XSS$GLUE( NAME=XSS$GLUE, LVL=1, LAST=";", STCLASS=BASED);
  380      %LSET LISTDIR = '0'B;
  381      %LSET LISTEXP = '1'B;
  382      %LSET LISTCOM = '0'B;
  383      %LSET LISTSUB = '1'B;
  384      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
  385      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
  386          %LSET INIT = CHARTEXT( ' INIT');
  387          %LSET ENIT = CHARTEXT( '');
  388      %ELSE;
  389          %LSET INIT = CHARTEXT( '/*');
  390          %LSET ENIT = CHARTEXT( '*/');
  391      %ENDIF;
  392      %IF LENGTHC( 'NAME') = 0;
  393          %LSET LVL = LVL-1;
  394      %ELSE;
  395          %IF LVL = 1;
  396              DCL 1 NAME STCLASS ALIGNED,
  397          %ELSE;
  398              %LVL NAME,
  399          %ENDIF;
  400      %ENDIF;
  401      %LSET LVL1 = LVL+1;
  402      %LSET LVL2 = LVL1+1;
  403
  404          %LVL1 %CHARTEXT( 'MYSCID') UBIN BYTE %INIT( 0)%ENIT CALIGNED,
  405          %LVL1 %CHARTEXT( 'TRNFNC') UBIN BYTE %INIT( 0)%ENIT CALIGNED,
  406          %LVL1 %CHARTEXT( 'YRSCID') UBIN BYTE %INIT( 0)%ENIT CALIGNED,
  407          %LVL1 %CHARTEXT( 'MAGIC') UBIN BYTE %INIT( 0)%ENIT CALIGNED,
10:41 OCT 01 '97 XSS_INTERNAL_M.:XSA1SI                                    12   
  408          %LVL1 %CHARTEXT( 'DATA') UBIN %INIT( 0)%ENIT ALIGNED LAST
  409      %MEND;
  410      /*F*    NAME:   XSS$MEMBLK
  411              DESCRIPTION:
  412                  This macro describes the structure returned by a call to the
  413                  Session memory allocator.  It contains two words of overhead
  414                  followed by a region large enough to contain the number of
  415                  bytes requested.
  416      */
  417      %MACRO XSS$MEMBLK( NAME=XSS$MEMBLK, LVL=1, LAST=";", STCLASS=BASED);
  418      %LSET LISTDIR = '0'B;
  419      %LSET LISTEXP = '1'B;
  420      %LSET LISTCOM = '0'B;
  421      %LSET LISTSUB = '1'B;
  422      %LSET STC = SUBSTR( CONCAT( TEXTCHAR(STCLASS), '   '), 0, 3);
  423      %IF ( STC = 'STA') OR ( STC = 'CON') OR ( STC = 'EXT');
  424          %LSET INIT = CHARTEXT( ' INIT');
  425          %LSET ENIT = CHARTEXT( '');
  426      %ELSE;
  427          %LSET INIT = CHARTEXT( '/*');
  428          %LSET ENIT = CHARTEXT( '*/');
  429      %ENDIF;
  430      %IF LENGTHC( 'NAME') = 0;
  431          %LSET LVL = LVL-1;
  432      %ELSE;
  433          %IF LVL = 1;
  434              DCL 1 NAME STCLASS ALIGNED,
  435          %ELSE;
  436              %LVL NAME,
  437          %ENDIF;
  438      %ENDIF;
  439      %LSET LVL1 = LVL+1;
  440      %LSET LVL2 = LVL1+1;
  441      %IF MODE_FEP;
  442          %LSET LONG = CHARTEXT( '(32)');
  443          %LSET HALF = CHARTEXT( 'WORD');
  444      %ELSE;
10:41 OCT 01 '97 XSS_INTERNAL_M.:XSA1SI                                    13   
  445          %LSET LONG = CHARTEXT( 'WORD');
  446          %LSET HALF = CHARTEXT( 'HALF');
  447      %ENDIF;
  448
  449          %LVL1 LSTX UBIN %HALF %INIT( 0)%ENIT CALIGNED,
  450          %LVL1 BLKX UBIN %HALF %INIT( 0)%ENIT CALIGNED,
  451          %LVL1 FLNKX UBIN %HALF %INIT( 0)%ENIT CALIGNED,
  452          %LVL1 BLNKX UBIN %HALF %INIT( 0)%ENIT CALIGNED,
  453          %LVL1 HTEMP REDEF BLNKX UBIN %HALF CALIGNED,
  454          %LVL1 DATA(0:0) UBIN ALIGNED LAST
  455      %MEND;
  456
  457      /*F*    NAME:   ITEM
  458
  459              ITEM defines one 'item' of the 'itemlist'.  As an SPDU is being
  460              encoded or decoded, the itemlist contains an item for each piece of
  461              the PPDU.
  462      */
  463      %MACRO ITEM( NAME=ITEM, LVL=1, LAST=";", STCLASS=BASED);
  464      %IF LENGTHC( 'NAME') = 0;
  465          %LSET LVL = LVL - 1;
  466      %ELSE;
  467          %IF LVL = 1;
  468              DCL 1 NAME STCLASS ALIGNED,
  469          %ELSE;
  470              %LVL NAME ALIGNED,
  471          %ENDIF;
  472      %ENDIF;
  473      %LSET LVL1 = LVL + 1;
  474      %LSET LVL2 = LVL1 + 1;
  475
  476          %LVL1 %CHARTEXT( 'Z') UBIN WORD ALIGNED,
  477          %LVL1 %CHARTEXT( 'X') REDEF %CHARTEXT( 'Z'),
  478              %LVL2 %CHARTEXT( 'LEN') UBIN(18) CALIGNED,
  479              %LVL2 %CHARTEXT( 'OPT') UBIN(1) UNAL,
  480              %LVL2 %CHARTEXT( 'TAG') UBIN(8) UNAL,
  481              %LVL2 %CHARTEXT( 'IMP') UBIN(1) UNAL,
10:41 OCT 01 '97 XSS_INTERNAL_M.:XSA1SI                                    14   
  482              %LVL2 %CHARTEXT( 'TYP') UBIN(5) UNAL,
  483              %LVL2 %CHARTEXT( 'LVL') UBIN(3) UNAL,
  484          %LVL1 %CHARTEXT( 'U') UBIN WORD ALIGNED,
  485          %LVL1 %CHARTEXT( 'S') REDEF %CHARTEXT( 'U') SBIN WORD ALIGNED,
  486          %LVL1 %CHARTEXT( 'P') REDEF %CHARTEXT( 'U') PTR CALIGNED,
  487          %LVL1 %CHARTEXT( 'B') REDEF %CHARTEXT( 'U') BIT(36) ALIGNED LAST
  488      %MEND;
  489
  490      /*F*    NAME:   LOAD
  491
  492              The LOAD macro is used in XSS$ENCODE to add another item to the
  493              itemlist as an SPDU is being encoded.
  494      */
  495      %MACRO LOAD(
  496              LEN=0,
  497              IMP( NO=0, YES=1, N=0, Y=1)=0,
  498              CON( NO=0, YES=32, N=0, Y=32)=0,
  499              TAG=,
  500              TYP( NONE=0, UBIN=1, CPTR=2, UBC6=3, CVEC=4, DATA=5, BITS=6, TXTC=7)=,
  501              LVL=,
  502              VAL="0",
  503              OPT( NO=0, YES=1, N=0, Y=1)=0,
  504              SCANNING=0);
  505      %LSET TLVL = TEXTCHAR(LVL);
  506      %ERROR( LENGTHC( TLVL) = 0, 'LVL must be specified');
  507      %LSET L1 = SUBSTR( TLVL, 0, 1);
  508      %IF L1 >= '0' AND L1 <= '9';
  509          %ERROR( LVL > 7, 'LVL too deep');
  510      %ENDIF;
  511      %LSET XLVL = CHARTEXT( TLVL);
  512      %LSET XCON = CON;
  513      %IF LENGTHC( TEXTCHAR(TYP)) = 0;
  514          %IF LENGTHC( TEXTCHAR(TAG)) = 0;
  515              %ERROR( '1'B, 'TAG or TYP must be specified');
  516              %LSET XTAG = 0;
  517          %ELSE;
  518              %LSET XTAG = TAG;
10:41 OCT 01 '97 XSS_INTERNAL_M.:XSA1SI                                    15   
  519          %ENDIF;
  520          %LSET XTYP = 0;
  521      %ELSE;
  522          %LSET XTYP = TYP;
  523          %IF LENGTHC( TEXTCHAR(TAG)) = 0;
  524              %LSET XTAG = TYP;
  525          %ELSE;
  526              %LSET XTAG = TAG;
  527          %ENDIF;
  528      %ENDIF;
  529          DO;
  530      %LSET TVAL = TEXTCHAR(VAL);
  531      %LSET TLEN = TEXTCHAR(LEN);
  532      %IF TVAL = '0';
  533          %LSET XVAL = 0;
  534      %ELSE;
  535          %LSET XVAL = CHARTEXT( %TVAL);
  536      %ENDIF;
  537      /* Figure out length of item */
  538      %IF %TLEN ~= '0';
  539          %LSET XLEN = CHARTEXT( CONCAT( '(', %TLEN, ')'));
  540      %ELSE;
  541          %LSET XLEN = 0;
  542      %ENDIF;
  543      /* Stash the item value word */
  544      %IF     %XTYP = %NONE;
  545      %ELSEIF %XTYP = %UBIN OR %XTYP = %UBC6;
  546          %IF SCANNING = 1;
  547              ITEMLIST.P( XSS_ITEMCNT) = %CHARTEXT( CONCAT( 'ADDR(', %TVAL, ')'));
  548          %ELSE;
  549              ITEMLIST.U( XSS_ITEMCNT) = %XVAL;
  550          %ENDIF;
  551      %ELSEIF %XTYP = %CPTR OR %XTYP = %CVEC OR %XTYP = %DATA OR %XTYP = %TXTC;
  552          ITEMLIST.P( XSS_ITEMCNT) = %CHARTEXT( CONCAT( 'ADDR(', %TVAL, ')'));
  553      %ELSEIF %XTYP = %BITS;
  554          %IF SCANNING = 1;
  555              ITEMLIST.P( XSS_ITEMCNT) = %CHARTEXT( CONCAT( 'ADDR(', %TVAL, ')'));
10:41 OCT 01 '97 XSS_INTERNAL_M.:XSA1SI                                    16   
  556          %ELSE;
  557              ITEMLIST.B( XSS_ITEMCNT) = %XVAL;
  558          %ENDIF;
  559      %ENDIF;
  560      /* Stash the item descriptor word */
  561          ITEMLIST.Z( XSS_ITEMCNT) = %XLVL + %XTYP*8 + IMP*256 + (%XCON+%XTAG)*512 + OPT*131072 + %XLEN*262144;
  562      /* Increment itemlist index */
  563      %IF SCANNING = 0;
  564          XSS_ITEMCNT = XSS_ITEMCNT + 1;
  565      %ENDIF;
  566          END;
  567      %MEND;
  568
  569      /*F*    NAME:   SCAN
  570
  571              The SCAN macro is used in XSS$DECODE to scan another item of the
  572              itemlist as an SPDU is being decoded.
  573      */
  574      %MACRO SCAN(
  575              LEN=0,
  576              IMP( NO=0, YES=1, N=0, Y=1)=0,
  577              CON( NO=0, YES=32, N=0, Y=32)=0,
  578              TAG=,
  579              TYP( NONE=0, UBIN=1, CPTR=2, UBC6=3, CVEC=4, DATA=5, BITS=6, TXTC=7)=,
  580              LVL=,
  581              VAL="0",
  582              OPT( NO=0, YES=1, N=0, Y=1)=0,
  583              SCANNING=0);
  584          DO;
  585          %LOAD( LEN=LEN, IMP=IMP, CON=CON, TAG=TAG, TYP=TYP, LVL=LVL, VAL=VAL, OPT=OPT, SCANNING=1);
  586          CALL SCAN ALTRET( SCANERR);
  587          END;
  588      %MEND;

