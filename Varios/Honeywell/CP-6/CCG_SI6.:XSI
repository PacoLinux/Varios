/*M* CCG - See all messages in a comgroup */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* DMC,PLM=6,IND=0,IDT=2,SDI=2,CTI=0,ENU=0,AND,DCI=4,CSU=2,ECU=4,THI=0,DTI=0,STI=2,IAD=0,PRB */
 
CCG:  PROC MAIN;
 
/* Includes */
 
%INCLUDE B_ERRORS_C;
%INCLUDE B$JIT;
%INCLUDE CCG_C1;
%INCLUDE CP_6;
%INCLUDE CP_6_SUBS;
%INCLUDE XUF_ENTRY;
%INCLUDE XU_FORMAT_C;
%INCLUDE XU_MACRO_C;
 
/* Dcbs */
 
DCL F$CG DCB;
DCL M$ME DCB;
 
/* Equs */
 
%EQU BS=31;
%EQU_CG;
 
/* Fpts */
 
%FPT_OPEN (FPTN=FPT_OPEN,
            STCLASS=STATIC,
            DCB=F$CG,
            ASN=COMGROUP,
            FUN=UPDATE,
            AU=NO,
            SETSTA=VLP_SETSTA);
%VLP_SETSTA (FPTN=VLP_SETSTA,
               STCLASS=STATIC,
               MYSTATION="' '");
%FPT_FWCG (FPTN=FPT_FWCG,
            STCLASS=STATIC,
            CRITERIA=VLP_CGMA,
            SCA=VLP_SCGMA,
            RESULTS=VLR_FWCG);
%FPT_FWCG (FPTN=FPT_FWCGC,
            STCLASS=CONSTANT,
            INFORM=YES,
            QSELECT=ALL,
            DCB=F$CG);
%VLP_CGMA (FPTN=VLP_CGMA,
            STCLASS=STATIC);
%VLP_SCGMA (FPTN=VLP_SCGMA,
             STCLASS=STATIC);
%VLP_CGMA (FPTN=VLP_CGMAC,
            STCLASS=CONSTANT);
%VLP_SCGMA (FPTN=VLP_SCGMAC,
             STCLASS=CONSTANT);
%VLR_FWCG (FPTN=VLR_FWCG,
            STCLASS=STATIC);
%FPT_READ (FPTN=FPT_READ,
            STCLASS=STATIC,
            DCB=F$CG,
            STATION=VLP_STATION);
%VLP_STATION (FPTN=VLP_STATION,
               STCLASS=CONSTANT,
               DIRONLY=YES,
               LATCH=YES);
%FPT_UNLATCH (FPTN=FPT_UNLATCH,
               STCLASS=STATIC,
               DCB=F$CG,
               INPUT=DELETE);
%FPT_EXIT (FPTN=FPT_EXIT,
            STCLASS=CONSTANT,
            CODE=ERRCODE);
%VLP_ERRCODE (FPTN=ERRCODE,
               STCLASS=STATIC);
%FPT_CLOSE (FPTN=FPT_CLOSE_ME,
             STCLASS=CONSTANT,
             DCB=M$ME,
             DISP=SAVE);
 
/* Based */
 
%B$ALT;
%B$TCB;
%F$DCB;
%PARSE$OUT (NAME=OUT$BLK,
             STCLASS="BASED");
%PARSE$SYM (NAME=OUT$SYM,
             STCLASS="BASED");
 
/* Symref */
 
DCL B$TCB$ PTR SYMREF;
DCL B$JIT$ PTR SYMREF;
DCL CCG@R UBIN SYMREF;
 
/* XUF & XUR stuff */
 
%F_FDS (NAME=F_FDS,
         STCLASS=STATIC,
         BUF=OUTBUF,
         DCB=M$ME,
         TRUNC=YES);
%INCLUDE XUR_ENTRY;
%XUR_INIT (NAME=XUR_INIT,
            STCLASS=CONSTANT);
DCL HEADER CHAR(0) CONSTANT INIT (
'---Msgid-| --Dest-| -Origin| -Msgtyp| -Prio| -Size-| --Time stamp-| ---Msgidxt|' );
DCL CONTENTS CHAR (0) CONSTANT INIT ( '%10*D %8>A%21-%8>A%30-%8>A%39-%6*D %7*D %..2U %11*D' );
DCL NOTCG CHAR (0) CONSTANT INIT ( '*** Specified FID is not a comgroup' );
DCL NOTSTA CHAR (0) CONSTANT INIT ( '*** Specified MYSTATION is too big' );
DCL NOTDEST CHAR (0) CONSTANT INIT ( '*** Specified DEST is too big' );
DCL NOTORIGIN CHAR (0) CONSTANT INIT ( '*** Specified ORIGIN is too big' );
DCL NOTMSGTYP CHAR (0) CONSTANT INIT ( '*** Specified MSGTYP is too big' );
DCL REPFMT CHAR (0) CONSTANT INIT ( '... %D messages found' );
DCL DELFMT CHAR (0) CONSTANT INIT ( '... %D messages deleted' );
DCL PROMPT CHAR(0) CONSTANT INIT ( 'Options:' );
 
/* Buffers */
 
%B$CGAURD (FPTN=MSGBUF,
            STCLASS=STATIC,
            LAST=",");
%VLP_CGMA (FPTN="CGMA (0:%(BS-1))",
            LVL=2);
DCL 1 STUFF STATIC,
      2 MSGID UBIN,
      2 DEST CHAR (8),
      2 ORIGIN CHAR (8),
      2 MSGTYP CHAR (8),
      2 PRIO UBIN,
      2 MSGSIZE UBIN,
      2 UTS UBIN,
      2 MSGIDXT BIT(36);
DCL OUTBUF CHAR (256) STATIC;
DCL REPORT BIT(1) ALIGNED STATIC INIT ( '1'B );
DCL INFORM SBIN;
DCL I UBIN;
DCL LEFT UBIN;
DCL CHUNK UBIN;
DCL F$CG$ PTR;
DCL JUNK UBIN;
DCL OUT$ PTR;
DCL OUTERR REDEF OUT$ BIT(36);
DCL OUT1$ PTR;
DCL CCARS UBIN;
DCL TOTAL UBIN;
 
%EJECT;
 
      CALL XUR$INIT (XUR_INIT);
      F$CG$ = DCBADDR (DCBNUM (F$CG));
      CCARS = B$JIT.CCARS;
      CALL XUR$GETCMD (CCG@R,OUT$,VECTOR (PROMPT),B$JIT.CCBUF,
      CCARS) ALTRET (ARETX);
        DO WHILE ('0'B);
ARETX:
        ERRCODE = OUTERR;
        ERRCODE.SEV = 0;
        CALL XUR$ERRMSG (OUT$);
        GOTO CLOSEXIT;
        END;
      VLP_CGMA = VLP_CGMAC;
      VLP_SCGMA = VLP_SCGMAC;
      FPT_FWCG.V = FPT_FWCGC.V;
      FPT_FWCG.V.DELETE# = '0'B;
      INFORM = -1;
      LEFT = OUT$->OUT$BLK.NSUBLKS - 1;
        DO I = 0 TO LEFT;
        OUT1$ = OUT$->OUT$BLK.SUBLK$ (I);
          DO CASE (OUT1$->OUT$BLK.CODE);
            CASE (%CCG@FIDX);
            CASE (%CCG@AUN);
            CASE (%CCG@AUY);
              FPT_OPEN.V.AU# = '1'B;
            CASE (%CCG@MYSTA);
              VLP_SETSTA.MYSTATION# = OUT1$->OUT$SYM.TEXT;
              IF OUT1$->OUT$SYM.COUNT > LENGTHC (VLP_SETSTA.MYSTATION#) THEN
                CALL WREXIT (VECTOR (NOTSTA));
            CASE (%CCG@ORIGIN);
              VLP_SCGMA.ORIGIN# = '1'B;
              VLP_CGMA.ORIGIN# = OUT1$->OUT$SYM.TEXT;
              IF OUT1$->OUT$SYM.COUNT > LENGTHC (VLP_CGMA.ORIGIN#) THEN
                CALL WREXIT (VECTOR (NOTORIGIN));
            CASE (%CCG@DEST);
              VLP_SCGMA.DEST# = '1'B;
              VLP_CGMA.DEST# = OUT1$->OUT$SYM.TEXT;
              IF OUT1$->OUT$SYM.COUNT > LENGTHC (VLP_CGMA.DEST#) THEN
                CALL WREXIT (VECTOR (NOTDEST));
            CASE (%CCG@MSGTYP);
              VLP_SCGMA.MSGTYP# = '1'B;
              VLP_CGMA.MSGTYP# = OUT1$->OUT$SYM.TEXT;
              IF OUT1$->OUT$SYM.COUNT > LENGTHC (VLP_CGMA.MSGTYP#) THEN
                CALL WREXIT (VECTOR (NOTMSGTYP));
            CASE (%CCG@MSGID);
              VLP_SCGMA.MSGID# = '1'B;
              CALL CHARBIN (VLP_CGMA.MSGID#,OUT1$->OUT$SYM.TEXT);
            CASE (%CCG@QSELALL);
              FPT_FWCG.V.QSELECT# = %CG_QSELECT_ALL#;
            CASE (%CCG@QSELDIR);
              FPT_FWCG.V.QSELECT# = %CG_QSELECT_DIRECT#;
            CASE (%CCG@QSELANO);
              FPT_FWCG.V.QSELECT# = %CG_QSELECT_ANONYMOUS#;
            CASE (%CCG@REPY);
              REPORT = '1'B;
            CASE (%CCG@REPN);
              REPORT = '0'B;
            CASE (%CCG@INFORMY);
              INFORM = 1;
            CASE (%CCG@INFORMN);
              INFORM = 0;
            CASE (%CCG@DELETEY);
              FPT_FWCG.V.DELETE# = '1'B;
            CASE (%CCG@DELETEN);
              FPT_FWCG.V.DELETE# = '0'B;
          END;
        END;
      CALL M$OPEN (FPT_OPEN) ALTRET (ARETO);
        DO WHILE ('0'B);
ARETO:
        CALL XALTERRMSG;
        END;
      IF F$CG$->F$DCB.ASN# ~= %COMGROUP# THEN
        CALL WREXIT (VECTOR (NOTCG));
      IF (INFORM = 1) OR (INFORM = -1 AND REPORT) THEN
        FPT_FWCG.V.INFORM# = '1'B;
      ELSE
        FPT_FWCG.V.INFORM# = '0'B;
      CALL M$FWCG (FPT_FWCG) ALTRET (ARETF);
        DO WHILE ('0'B);
ARETF:
        ERRCODE = B$TCB$->B$TCB.ALT$->B$ALT.ERR;
        IF (ERRCODE.ERR# ~= %E$DI) AND (ERRCODE.ERR# ~= %E$FWCG_NONE) THEN
          CALL XALTERRMSG;
        CALL ALTERRMSG;
        END;
      LEFT = VLR_FWCG.FOUND#;
      TOTAL = 0;
      IF LEFT ~= 0 THEN
        DO;
        IF FPT_FWCG.V.DELETE# THEN
          CALL X$WRITE (F_FDS,VECTOR (DELFMT),VECTOR (LEFT));
        ELSE
          CALL X$WRITE (F_FDS,VECTOR (REPFMT),VECTOR (LEFT));
        IF FPT_FWCG.V.INFORM# THEN
          DO;
          FPT_READ.BUF_ = VECTOR (MSGBUF);
          FPT_READ.V.DVBYTE.CONT# = '0'B;
          JUNK = SIZEC (MSGBUF) - SIZEC (MSGBUF.CGMA);
            DO WHILE (LEFT > 0);
            CALL M$READ (FPT_READ) ALTRET (ARETR);
              DO WHILE ('0'B);
ARETR:
              IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE ~= %E$LD THEN
                DO;
                CALL ALTERRMSG;
                FPT_UNLATCH.V.INPUT# = %HOLD#;
                CALL M$UNLATCH (FPT_UNLATCH) ALTRET (ARETUH);
                  DO WHILE ('0'B);
ARETUH:
                  CALL ALTERRMSG;
                  END;
CLOSEXIT:
                CALL M$CLOSE (FPT_CLOSE_ME) ALTRET (ARETCE);
ARETCE:
                CALL M$EXIT (FPT_EXIT);
                END;
              END;
            CHUNK = (F$CG$->F$DCB.ARS# - JUNK) / SIZEC (MSGBUF.CGMA (0));
            LEFT = LEFT - CHUNK;
            CHUNK = CHUNK - 1;
              DO I = 0 TO CHUNK;
              STUFF.MSGID = MSGBUF.CGMA.MSGID# (I);
              STUFF.DEST = MSGBUF.CGMA.DEST# (I);
              STUFF.ORIGIN = MSGBUF.CGMA.ORIGIN# (I);
              STUFF.MSGTYP = MSGBUF.CGMA.MSGTYP# (I);
              STUFF.PRIO = MSGBUF.CGMA.PRIO# (I);
              STUFF.MSGSIZE = MSGBUF.CGMA.MSGSIZE# (I);
              STUFF.UTS = MSGBUF.CGMA.UTS# (I);
              STUFF.MSGIDXT = MSGBUF.CGMA.MSGIDXT (I);
              IF MOD (TOTAL,23) = 0 THEN
                CALL X$WRITE (F_FDS,VECTOR (HEADER));
              CALL X$WRITE (F_FDS,VECTOR (CONTENTS),VECTOR (STUFF));
              TOTAL = TOTAL + 1;
              END;
            FPT_READ.BUF_ = VECTOR (MSGBUF.CGMA);
            FPT_READ.V.DVBYTE.CONT# = '1'B;
            JUNK = 0;
            END;
          CALL M$UNLATCH (FPT_UNLATCH) ALTRET (ARETUD);
            DO WHILE ('0'B);
ARETUD:
            CALL XALTERRMSG;
            END;
          END;
        END;
 
      CALL M$CLOSE (FPT_CLOSE_ME) ALTRET (RETN);
RETN:
      RETURN;
 
%EJECT;
 
WREXIT: PROC (ERRVEC);
 
DCL ERRVEC BIT(72);
 
      CALL X$WRITE (F_FDS,ERRVEC);
      CALL M$EXIT;
 
      RETURN;
 
END WREXIT;
 
%EJECT;
 
ALTERRMSG: PROC;
 
%FPT_ERRMSG (FPTN=FPT_ERRMSG,
              STCLASS=STATIC,
              BUF=ERRBUF,
              CODE=ERRCODE,
              INCLCODE=NO,
              OUTDCB1=M$ME);
DCL ERRBUF CHAR (120) STATIC;
DCL EXITFLAG BIT (1) ALIGNED;
 
      EXITFLAG = '0'B;
      GOTO ERRPT;
 
XALTERRMSG: ENTRY;
 
      EXITFLAG = '1'B;
ERRPT:
      ERRCODE = B$TCB$->B$TCB.ALT$->B$ALT.ERR;
      ERRCODE.SEV = 0;
      FPT_ERRMSG.V.DCB# = B$TCB$->B$TCB.ALT$->B$ALT.DCB#;
      CALL M$ERRMSG (FPT_ERRMSG);
      IF EXITFLAG THEN
        DO;
        CALL M$CLOSE (FPT_CLOSE_ME) ALTRET (ARETCM);
ARETCM:
        CALL M$EXIT (FPT_EXIT);
        END;
 
      RETURN;
 
END ALTERRMSG;
 
END CCG;
