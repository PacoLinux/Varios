

14:37 JUL 28 '97 G_ROS_M.:E05SI                                            1    
    1      /*M* G_ROS_M  macro to generate structure for the entire RO Seg */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /*X*  MEC,MOC,EXM=20,CLM=20,CRM=100       */
    8
    9
   10
   11
   12                          /*F* NAME: User_Context Data
   13
   14                          This appendix contains a description of the
   15                          Read Only Segment, which includes the JIT.
   16                          */
   17
   18
   19
   20                          /*F* NAME: G_ROS_M
   21
   22                          The INCLUDE file G_ROS_M contains the macros
   23                          defining the LCP-6 Read Only Segment.  Macros contained
   24                          in this file include the following:
   25                          }
   26                          }   G$ROS
   27                          }   G$ROS_AVAIL_HDR
   28                          }   G$DCBTABLE
   29                          }
   30
   31                          */
   32                          /*F*   NAME: G$ROS
   33
   34                          The G$ROS macro generates a structure that
   35                          defines the user's Read Only Segment.
   36
   37                          The Read Only Segment contains all the information to
14:37 JUL 28 '97 G_ROS_M.:E05SI                                            2    
   38                          which the user has read, but not write, permission.
   39                          This includes:
   40
   41                          1) the user's Job Information Table which contains
   42                             various accounting, limit and identity information.
   43
   44                          2) Exceptional Condition Control Blocks - used to
   45                             contain information concerning conditions
   46                             for which the user wishes to receive control.
   47                             There is a separate ECCB allocated in the Read Only
   48                             Segment for the user and debugger.
   49
   50                          3) Task Control Block - used to contain the environment
   51                             at the time of an exceptional condition or error
   52                             on a monitor service request.
   53
   54                          4) The DCB Table which contains the address of each Data
   55                             Control Block.
   56
   57                          5) The following "canned" Data Control Blocks:
   58                             } M$DEBUG
   59                             } M$LM
   60                             } M$ME
   61                             } M$HOST
   62                             } M$DO
   63
   64                          6) An available space header.
   65
   66                          The Read Only Segment may be accessed by using the
   67                          linker built pointer G$ROS$.
   68                          The first portion of the Read Only Segment contains
   69                          pointers to those specific areas that follow.
   70                          A description of the fields in this portion of
   71                          the Read Only Segment follows.
   72                          */
   73
   74
14:37 JUL 28 '97 G_ROS_M.:E05SI                                            3    
   75      %MACRO G$ROS (FPTN=G$ROS,
   76        LVL=1,
   77        LAST(YES=";",NO=",",ANY)=";",
   78        FULL(YES=1,NO=0,ANY)=0,
   79        ALGN=WALIGNED,
   80        STCLASS=BASED);
   81
   82      %LSET LISTDIR='0'B;
   83      %LSET LISTEXP='1'B;
   84      %LSET LISTCOM='0'B;
   85      %LSET LISTSUB='1'B;
   86
   87      %LSET STR=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
   88      %IF (STR='STA') OR (STR='CON') OR STR='EXT';
   89      %LSET INIT=CHARTEXT(' INIT');
   90      %LSET EINIT=CHARTEXT('');
   91      %ELSE;
   92      %LSET INIT=CHARTEXT('/*');
   93      %LSET EINIT=CHARTEXT('*/');
   94      %ENDIF;
   95
   96      %IF LVL=1;
   97      DCL 1 FPTN STCLASS ALGN,
   98      %ELSE;
   99              %LVL FPTN,
  100      %ENDIF;
  101      %LSET ROS_NXT_LVL=LVL+1;
  102
  103                %(LVL+1) DCBPTR$ PTR %INIT(ADDR(FPTN.DCBTABLE))%EINIT,
  104                          /*K* DCBPTR$ - PTR.  Contains the address of G$ROS.DCBTABLE.
  105                          */
  106                %(LVL+1) JIT$ PTR %INIT(ADDR(FPTN.JIT))%EINIT,
  107                          /*K* JIT$ - PTR.  Contains the address of G$ROS.JIT.
  108                          */
  109                %(LVL+1) TCB,
  110                %(LVL+2) ALT$ PTR %INIT(ADDR(NIL))%EINIT,
  111                          /*K* TCB.ALT$ - PTR.  Contains the address of the
14:37 JUL 28 '97 G_ROS_M.:E05SI                                            4    
  112                          ALTRET frame on the user's TCB.  This pointer is
  113                          built by Job Step.
  114                          */
  115                %(LVL+2) STK$ PTR %INIT(ADDR(NIL))%EINIT,
  116                          /*K* TCB.STK$ - PTR.  Contains the address of the
  117                          current top of stack frame on the user's TCB.  This
  118                          pointer is build by Job Step and maintained by the
  119                          Exceptional Condition processing routines.
  120                          */
  121                %(LVL+2) AVSZ SBIN WORD %INIT(0)%EINIT,
  122                          /*K* TCB.AVSZ - SBIN WORD.  Contains the word size of
  123                          the available TCB space.
  124                          */
  125                %(LVL+2) CURRSZ SBIN WORD %INIT(0)%EINIT,
  126                          /*K* TCB.CURRSZ - SBIN WORD.  Contains the word size of
  127                          the top of stack frame.
  128                          */
  129                %(LVL+1) AVAIL$ PTR %INIT(ADDR(FPTN.AVAIL_HDR))%EINIT,
  130                          /*K* AVAIL$ - PTR.  Contains the address of G$ROS.AVAIL_HDR.
  131                          */
  132                %(LVL+1) U_ECCB$ PTR %INIT(ADDR(FPTN.U_ECCB))%EINIT,
  133                          /*K* U_ECCB$ - PTR.  Contains the address of G$ROS.U_ECCB
  134                          which is the Exceptional Condition Control Block
  135                          for the user domain.  Refer to G$ECCB.
  136                          */
  137                %(LVL+1) DB_ECCB$ PTR %INIT(ADDR(FPTN.DB_ECCB))%EINIT,
  138                          /*K* DB_ECCB$ - PTR.  Contains the address of G$ROS.DB_ECCB
  139                          which is the Exceptional Condition Control Block
  140                          for the debugger domain.  Refer to G$ECCB.
  141                          */
  142                %(LVL+1) CP_ECCB$ PTR %INIT(ADDR(FPTN.CP_ECCB))%EINIT,
  143                          /*N* CP_ECCB$ - PTR.  Contains the address of G$ROS.CP_ECCB.
  144                          which is the Exceptional Condition Control Block
  145                          for the command processor domain.  Refer to G$ECCB.
  146                          */
  147                %(LVL+1) PIA$ PTR %INIT(ADDR(FPTN.PIA))%EINIT,
  148                          /*K* PIA$ - PTR.  Contains the address of G$ROS.PIA.
14:37 JUL 28 '97 G_ROS_M.:E05SI                                            5    
  149                          */
  150                %(LVL+1) NUMDCBS UBIN %INIT(9)%EINIT,
  151                          /*K* NUMDCBS - UBIN.  Contains the number of entries in
  152                          the DCBTABLE.
  153                          */
  154                %(LVL+1) * UBIN %INIT(0)%EINIT,
  155                %(LVL+1) AUTO_DS$ PTR %INIT(ADDR(NIL))%EINIT,
  156                %(LVL+1) AUTO_DS REDEF AUTO_DS$ UBIN(32),
  157                          /*K* AUTO_DS$ - PTR.  Contains the address of the base
  158                          of the user AUTO data segment (which depends on the
  159                          LAUTO option in FEPLINK).
  160                          */
  161                %(LVL+1) AUTO_T$ PTR %INIT(ADDR(NIL))%EINIT,
  162                %(LVL+1) AUTO_T REDEF AUTO_T$ UBIN(32),
  163                          /*K* AUTO_T$ - PTR.  Contains the address of the stack
  164                          control words for user AUTO (which depends on the
  165                          LAUTO option in FEPLINK).
  166                          */
  167      %IF FULL=0;
  168                %(LVL+1) PIA(0:31) BIT(16) %INIT('0'B*0)%EINIT;
  169      %ELSE;
  170              %(LVL+1) PIA(0:31) BIT(16) %INIT('0'B*0)%EINIT,
  171                          /*K* PIA - ARRAY(0:31) BIT(16).
  172                          Is the Processor Information Area in the ROS.  PIA
  173                          is available for use by the debugger.
  174                          */
  175
  176                          /*
  177
  178                          If a structure that defines the entire segment
  179                          is desired, the option FULL=YES should be specified
  180                          and macros found in the following INCLUDE files
  181                          will be invoked:
  182                          }
  183                          } G_JIT_M
  184                          } GF_LCP6_M
  185                          } GU_LCP6_M
14:37 JUL 28 '97 G_ROS_M.:E05SI                                            6    
  186                          }
  187                          */
  188      %G$JIT  (FPTN=JIT,
  189              STCLASS=STCLASS,
  190              LVL=ROS_NXT_LVL,
  191              LAST=",");
  192
  193              %G$ECCB (FPTN=U_ECCB,
  194              STCLASS=STCLASS,
  195              LVL=ROS_NXT_LVL,
  196              LAST=",");
  197
  198              %G$ECCB (FPTN=DB_ECCB,
  199              STCLASS=STCLASS,
  200              LVL=ROS_NXT_LVL,
  201              LAST=",");
  202
  203              %G$ECCB (FPTN=CP_ECCB,
  204              STCLASS=STCLASS,
  205              LVL=ROS_NXT_LVL,
  206              LAST=",");
  207
  208              %M$DCB (DCBN=M$DEBUG,STCLASS=STCLASS,LVL=ROS_NXT_LVL,LAST=NO,
  209              RES='HO');
  210
  211              %M$DCB (DCBN=M$LM,STCLASS=STCLASS,LVL=ROS_NXT_LVL,LAST=NO,
  212              RES='HO');
  213
  214              %(LVL+2) PASS CHAR(8) UNAL %INIT(' ')%EINIT,
  215              %(LVL+2) PSN CHAR(6) UNAL %INIT(' ')%EINIT,
  216              %(LVL+2) MODTIME UBIN(32) %INIT(0)%EINIT,
  217
  218              %M$DCB (DCBN=M$ME,STCLASS=STCLASS,LVL=ROS_NXT_LVL,LAST=NO,
  219              RES='UC01');
  220
  221              %M$DCB (DCBN=M$HOST,STCLASS=STCLASS,LVL=ROS_NXT_LVL,LAST=NO,
  222              RES='HO');
14:37 JUL 28 '97 G_ROS_M.:E05SI                                            7    
  223
  224              %M$DCB (DCBN=M$DO,STCLASS=STCLASS,LVL=ROS_NXT_LVL,LAST=NO);
  225
  226              %(LVL+1) DCBTABLE(0:9) PTR
  227              %INIT(ADDR(NIL),
  228              ADDR(FPTN.M$DEBUG),
  229              ADDR(FPTN.M$LM),
  230              ADDR(FPTN.M$ME),
  231              ADDR(FPTN.M$HOST),
  232              ADDR(FPTN.M$DO),
  233              ADDR(NIL),
  234              ADDR(NIL),
  235              ADDR(NIL),
  236              ADDR(NIL)) %EINIT,
  237
  238
  239      %G$ROS_AVAIL_HDR (FPTN=AVAIL_HDR,
  240              STCLASS=STCLASS,
  241              LVL=ROS_NXT_LVL,
  242              LAST=YES);
  243      %ENDIF;
  244      %MEND;
  245
  246
  247
  248
  249
  250                          /*F* NAME: G$ROS_AVAIL_HDR
  251
  252                          The G$ROS_AVAIL_HDR macro may be used to generate
  253                          the structure that defines that available Read
  254                          Only Segment available space header.  This header
  255                          may be accessed via the pointer at G$ROS.AVAIL$.
  256
  257                          This structure contains the following fields:
  258                          */
  259
14:37 JUL 28 '97 G_ROS_M.:E05SI                                            8    
  260      %MACRO G$ROS_AVAIL_HDR (FPTN=G$ROS_AVAIL_HDR,
  261         LVL=1,
  262         LAST(YES=";",NO=",",ANY)=";",
  263         ALGN=WALIGNED,
  264         STCLASS=BASED);
  265
  266      %LSET LISTDIR='0'B;
  267      %LSET LISTEXP='1'B;
  268      %LSET LISTCOM='0'B;
  269      %LSET LISTSUB='1'B;
  270
  271      %LSET STR=SUBSTR(CONCAT(TEXTCHAR(STCLASS),'   '),0,3);
  272      %IF (STR='STA') OR (STR='CON') OR STR='EXT';
  273      %LSET INIT=CHARTEXT(' INIT');
  274      %LSET EINIT=CHARTEXT('');
  275      %ELSE;
  276      %LSET INIT=CHARTEXT('/*');
  277      %LSET EINIT=CHARTEXT('*/');
  278      %ENDIF;
  279
  280      %IF LVL=1;
  281      DCL 1 FPTN STCLASS ALGN,
  282      %ELSE;
  283              %LVL FPTN,
  284      %ENDIF;
  285                %(LVL+1) NEXT$ PTR %INIT(ADDR(NIL))%EINIT,
  286                          /*K* NEXT$ - PTR.  Contains the address of the
  287                          next available space header if all of the
  288                          space in this section has been allocated.
  289                          */
  290                %(LVL+1) NWORDS UBIN %INIT(0)%EINIT LAST
  291                          /*K* NWORDS - UBIN WORD.  Contains the number of
  292                          words available.
  293                          */
  294      %MEND;
  295
  296
14:37 JUL 28 '97 G_ROS_M.:E05SI                                            9    
  297
  298
  299
  300                          /*F*  NAME: G$DCBTABLE
  301
  302                          The G$DCBTABLE may be used to generate the
  303                          DCB Table, which is simply an array of pointers
  304                          that contains the addresses of each allocated
  305                          DCB.  This table may be accessed via the pointer
  306                          at G$ROS.DCBPTR$.
  307                          */
  308
  309      %MACRO G$DCBTABLE (FPTN=G$DCBTABLE,
  310         LVL=1,
  311         NUM=0,
  312         LAST(YES=";",NO=",",ANY)=";",
  313         STCLASS=BASED);
  314
  315      %LSET LISTDIR='0'B;
  316      %LSET LISTEXP='1'B;
  317      %LSET LISTCOM='0'B;
  318      %LSET LISTSUB='1'B;
  319      %IF LVL=1;
  320      DCL 1 FPTN(0:NUM) STCLASS PTR LAST
  321      %ELSE;
  322              %LVL FPTN(0:NUM) PTR LAST
  323      %ENDIF;
  324      %MEND;
  325
  326
  327
  328
  329
  330
  331

