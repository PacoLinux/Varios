

CC.C03    File=zbo$alloc:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=1  
        1         1             #ifndef NORCSID
        2         2             static char rcsid[] = "$Header: alloc.c,v 2.3 87/03/10 01:37:38 ceriel Exp $";

        3         3             #endif
        4         4
        5         5             #include <stdio:h>
        6         6             #include "zbo$param:h"
        7         7             #include "zbo$types:h"
        8         8             #include "zbo$assert:h"
        9         9             #include "zbo$alloc:h"
       10        10             #include "zbo$line:h"
       11        11             #include "zbo$lookup:h"
       12        12             #include "zbo$proinf:h"
       13        13
       14        14             /*
       15        15              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
       16        16              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
       17        17              *
       18        18              * Author: Hans van Staveren
       19        19              */
       20        20
       21        21             #ifdef USEMALLOC
       22        22
       23        23             short * myalloc();
       24        24
       25        25             #define newcore(size) myalloc(size)
       26        26             #define oldcore(p,size) vfree(p)
       27        27
       28        28             #else
       29        29   *S*
       30        30   *S*       /* #define CORECHECK  /* if defined tests are made to insure
       31        31   *S*                 each block occurs at most once */
       32        32   *S*
       33        33   *S*       #define CCHUNK  1024  /* number of shorts asked from system */
       34        34   *S*
       35        35   *S*       short *newcore(),*freshcore();
CC.C03    File=zbo$alloc:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=2  
       36        36   *S*       extern char *sbrk();
       37        37   *S*
       38        38   *S*       #ifdef COREDEBUG
       39        39   *S*       int shortsasked=0;
       40        40   *S*       #endif
       41        41   *S*
       42        42   *S*       #endif
       43        43
       44        44             /*
       45        45              * The following two sizetables contain the sizes of the various kinds
       46        46              * of line and argument structures.
       47        47              * Care has been taken to make this table implementation independent,
       48        48              * but if you think very hard you might find a compiler failing the
       49        49              * assumptions made.
       50        50              * A wasteful but safe approach is to replace every line of them by
       51        51              *  sizeof(line_t)
       52        52              * and
       53        53              *  sizeof(arg_t)
       54        54              * respectively.
       55        55              */
       56        56
       57        57             #define LBASE (sizeof(line_t)-sizeof(un_l_a))
       58        58
       59        59             int lsizetab[] = {
       60        60    1         LBASE,
       61        61    1         LBASE+sizeof(short),
       62        62    1         LBASE+sizeof(offset),
       63        63    1         LBASE+sizeof(num_p),
       64        64    1         LBASE+sizeof(sym_p),
       65        65    1         LBASE+sizeof(s_la_sval),
       66        66    1         LBASE+sizeof(s_la_lval),
       67        67    1         LBASE+sizeof(arg_p),
       68        68    1         LBASE
       69        69    1        };
       70        70
       71        71             #define ABASE (sizeof(arg_t)-sizeof(un_a_a))
       72        72
CC.C03    File=zbo$alloc:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=3  
       73        73             int asizetab[] = {
       74        74    1         ABASE+sizeof(offset),
       75        75    1         ABASE+sizeof(num_p),
       76        76    1         ABASE+sizeof(sym_p),
       77        77    1         ABASE+sizeof(s_a_val),
       78        78    1         ABASE+sizeof(argb_t),
       79        79    1         ABASE+sizeof(s_a_con),
       80        80    1         ABASE+sizeof(s_a_con),
       81        81    1         ABASE+sizeof(s_a_con),
       82        82    1        };
       83        83
       84        84             /*
       85        85              * alloc routines:
       86        86              * Two parts:
       87        87              *   1)   typed alloc and free routines
       88        88              *   2) untyped raw core allocation
       89        89              */
       90        90
       91        91             /*
       92        92              * PART 1
       93        93              */
       94        94
       95        95             line_p newline(optyp) int optyp; {
       96        96    1         register line_p lnp;
       97        97    1         register kind=optyp;
       98        98    1
       99        99    1         if (kind>OPMINI)
      100       100    1            kind = OPMINI;
      101       101    1         lnp = (line_p) newcore(lsizetab[kind]);
      102       102    1         lnp->l_optyp = optyp;
      103       103    1         return(lnp);
      104       104    1        }
      105       105
      106       106             oldline(lnp) register line_p lnp; {
      107       107    1         register kind=lnp->l_optyp&BMASK;
      108       108    1
      109       109    1         if (kind>OPMINI)
CC.C03    File=zbo$alloc:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=4  
      110       110    1            kind = OPMINI;
      111       111    1         if (kind == OPLIST)
      112       112    1            oldargs(lnp->l_a.la_arg);
      113       113    1         oldcore((short *) lnp,lsizetab[kind]);
      114       114    1        }
      115       115
      116       116             arg_p newarg(kind) int kind; {
      117       117    1         register arg_p ap;
      118       118    1
      119       119    1         ap = (arg_p) newcore(asizetab[kind]);
      120       120    1         ap->a_typ = kind;
      121       121    1         return(ap);
      122       122    1        }
      123       123
      124       124             oldargs(ap) register arg_p ap; {
      125       125    1         register arg_p next;
      126       126    1
      127       127    1         while (ap != (arg_p) 0) {
      128       128    2            next = ap->a_next;
      129       129    2            switch(ap->a_typ) {
      130       130    3            case ARGSTR:
      131       131    3               oldargb(ap->a_a.a_string.ab_next);
      132       132    3               break;
      133       133    3            case ARGICN:
      134       134    3            case ARGUCN:
      135       135    3            case ARGFCN:
      136       136    3               oldargb(ap->a_a.a_con.ac_con.ab_next);
      137       137    3               break;
      138       138    3            }
      139       139    2            oldcore((short *) ap,asizetab[ap->a_typ]);
      140       140    2            ap = next;
      141       141    2         }
      142       142    1        }
      143       143
      144       144             oldargb(abp) register argb_p abp; {
      145       145    1         register argb_p next;
      146       146    1
CC.C03    File=zbo$alloc:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=5  
      147       147    1         while (abp != (argb_p) 0) {
      148       148    2            next = abp->ab_next;
      149       149    2            oldcore((short *) abp,sizeof (argb_t));
      150       150    2            abp = next;
      151       151    2         }
      152       152    1        }
      153       153
      154       154             reg_p newreg() {
      155       155    1
      156       156    1         return((reg_p) newcore(sizeof(reg_t)));
      157       157    1        }
      158       158
      159       159             oldreg(rp) reg_p rp; {
      160       160    1
      161       161    1         oldcore((short *) rp,sizeof(reg_t));
      162       162    1        }
      163       163
      164       164             num_p newnum() {
      165       165    1
      166       166    1         return((num_p) newcore(sizeof(num_t)));
      167       167    1        }
      168       168
      169       169             oldnum(lp) num_p lp; {
      170       170    1
      171       171    1         oldcore((short *) lp,sizeof(num_t));
      172       172    1        }
      173       173
      174       174             offset *newrom() {
      175       175    1
      176       176    1         return((offset *) newcore(MAXROM*sizeof(offset)));
      177       177    1        }
      178       178
      179       179             sym_p newsym(len) int len; {
      180       180    1         /*
      181       181    1          * sym_t includes a 2 character s_name at the end
      182       182    1          * extend this structure with len-2 characters
      183       183    1          */
CC.C03    File=zbo$alloc:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=6  
      184       184    1         return((sym_p) newcore(sizeof(sym_t) - 2 + len));
      185       185    1        }
      186       186
      187       187             argb_p newargb() {
      188       188    1
      189       189    1         return((argb_p) newcore(sizeof(argb_t)));
      190       190    1        }
      191       191
      192       192             #ifndef USEMALLOC
      193       193   *S*
      194       194   *S*       /******************************************************************/
      195       195   *S*       /******   Start of raw core management package    *****************/
      196       196   *S*       /******************************************************************/
      197       197   *S*
      198       198   *S*       #define MAXSHORT 30   /* Maximum number of shorts one can ask for */
      199       199   *S*
      200       200   *S*       short *freelist[MAXSHORT];
      201       201   *S*
      202       202   *S*       typedef struct coreblock {
      203       203   *S*        struct coreblock *co_next;
      204       204   *S*        short co_size;
      205       205   *S*       } core_t,*core_p;
      206       206   *S*
      207       207   *S*       #define SINC (sizeof(core_t)/sizeof(short))
      208       208   *S*       #ifdef COREDEBUG
      209       209   *S*       coreverbose() {
      210       210   *S*        register size;
      211       211   *S*        register short *p;
      212       212   *S*        register sum;
      213       213   *S*
      214       214   *S*        sum = 0;
      215       215   *S*        for(size=1;size<MAXSHORT;size++)
      216       216   *S*           for (p=freelist[size];p!=0;p = *(short **) p)
      217       217   *S*              sum += size;
      218       218   *S*        fprintf(stderr,"Used core %u\n",(shortsasked-sum)*sizeof(short));
      219       219   *S*       }
      220       220   *S*       #endif
CC.C03    File=zbo$alloc:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=7  
      221       221   *S*
      222       222   *S*       #ifdef SEPID
      223       223   *S*
      224       224   *S*       compactcore() {
      225       225   *S*        register core_p corelist=0,tp,cl;
      226       226   *S*        int size;
      227       227   *S*
      228       228   *S*       #ifdef COREDEBUG
      229       229   *S*        fprintf(stderr,"Almost out of core\n");
      230       230   *S*       #endif
      231       231   *S*        for(size=SINC;size<MAXSHORT;size++) {
      232       232   *S*           while ((tp = (core_p) freelist[size]) != (core_p) 0) {
      233       233   *S*              freelist[size] = (short *) tp->co_next;
      234       234   *S*              tp->co_size = size;
      235       235   *S*              if (corelist==0 || tp<corelist) {
      236       236   *S*                 tp->co_next = corelist;
      237       237   *S*                 corelist = tp;
      238       238   *S*              } else {
      239       239   *S*                 for(cl=corelist;cl->co_next != 0 && tp>cl->co_next;
      240       240   *S*                          cl = cl->co_next)
      241       241   *S*                    ;
      242       242   *S*                 tp->co_next = cl->co_next;
      243       243   *S*                 cl->co_next = tp;
      244       244   *S*              }
      245       245   *S*           }
      246       246   *S*        }
      247       247   *S*        while (corelist != 0) {
      248       248   *S*           while ((short *) corelist->co_next ==
      249       249   *S*               (short *) corelist + corelist->co_size) {
      250       250   *S*              corelist->co_size += corelist->co_next->co_size;
      251       251   *S*              corelist->co_next =  corelist->co_next->co_next;
      252       252   *S*           }
      253       253   *S*           assert(corelist->co_next==0 ||
      254       254   *S*              (short *) corelist->co_next >
      255       255   *S*                  (short *) corelist + corelist->co_size);
      256       256   *S*           while (corelist->co_size >= MAXSHORT+SINC) {
      257       257   *S*              oldcore((short *) corelist + corelist->co_size-(MAXSHORT-1),
CC.C03    File=zbo$alloc:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=8  
      258       258   *S*                 sizeof(short)*(MAXSHORT-1));
      259       259   *S*              corelist->co_size -= MAXSHORT;
      260       260   *S*           }
      261       261   *S*           if (corelist->co_size >= MAXSHORT) {
      262       262   *S*              oldcore((short *) corelist + corelist->co_size-SINC,
      263       263   *S*                 sizeof(short)*SINC);
      264       264   *S*              corelist->co_size -= SINC;
      265       265   *S*           }
      266       266   *S*           cl = corelist->co_next;
      267       267   *S*           oldcore((short *) corelist, sizeof(short)*corelist->co_size);
      268       268   *S*           corelist = cl;
      269       269   *S*        }
      270       270   *S*       }
      271       271   *S*
      272       272   *S*       short *grabcore(size) int size; {
      273       273   *S*        register short *p;
      274       274   *S*        register trysize;
      275       275   *S*
      276       276   *S*        /*
      277       277   *S*         * Desperate situation, can't get more core from system.
      278       278   *S*         * Postpone giving up just a little bit by splitting up
      279       279   *S*         * larger free blocks if possible.
      280       280   *S*         * Algorithm is worst fit.
      281       281   *S*         */
      282       282   *S*
      283       283   *S*        assert(size<2*MAXSHORT);
      284       284   *S*        for(trysize=2*MAXSHORT-2; trysize>size; trysize -= 2) {
      285       285   *S*           p = freelist[trysize/sizeof(short)];
      286       286   *S*           if ( p != (short *) 0) {
      287       287   *S*              freelist[trysize/sizeof(short)] = *(short **) p;
      288       288   *S*              oldcore(p+size/sizeof(short),trysize-size);
      289       289   *S*              return(p);
      290       290   *S*           }
      291       291   *S*        }
      292       292   *S*
      293       293   *S*        /*
      294       294   *S*         * Can't get more core from the biggies, try to combine the
CC.C03    File=zbo$alloc:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=9  
      295       295   *S*         * little ones. This is expensive but probably better than
      296       296   *S*         * giving up.
      297       297   *S*         */
      298       298   *S*
      299       299   *S*        compactcore();
      300       300   *S*        if ((p=freelist[size/sizeof(short)]) != 0) {
      301       301   *S*           freelist[size/sizeof(short)] = * (short **) p;
      302       302   *S*           return(p);
      303       303   *S*        }
      304       304   *S*        for(trysize=2*MAXSHORT-2; trysize>size; trysize -= 2) {
      305       305   *S*           p = freelist[trysize/sizeof(short)];
      306       306   *S*           if ( p != (short *) 0) {
      307       307   *S*              freelist[trysize/sizeof(short)] = *(short **) p;
      308       308   *S*              oldcore(p+size/sizeof(short),trysize-size);
      309       309   *S*              return(p);
      310       310   *S*           }
      311       311   *S*        }
      312       312   *S*
      313       313   *S*        /*
      314       314   *S*         * That's it then. Finished.
      315       315   *S*         */
      316       316   *S*
      317       317   *S*        return(0);
      318       318   *S*       }
      319       319   *S*       #endif /* SEPID */
      320       320   *S*
      321       321   *S*       short *newcore(size) int size; {
      322       322   *S*        register short *p,*q;
      323       323   *S*
      324       324   *S*        if( size < 2*MAXSHORT ) {
      325       325   *S*           if ((p=freelist[size/sizeof(short)]) != (short *) 0)
      326       326   *S*              freelist[size/sizeof(short)] = *(short **) p;
      327       327   *S*           else {
      328       328   *S*              p = freshcore(size);
      329       329   *S*       #ifdef SEPID
      330       330   *S*              if (p == (short *) 0)
      331       331   *S*                 p = grabcore(size);
CC.C03    File=zbo$alloc:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=10 
      332       332   *S*       #endif
      333       333   *S*           }
      334       334   *S*        } else
      335       335   *S*           p = freshcore(size);
      336       336   *S*        if (p == 0)
      337       337   *S*           error("out of memory");
      338       338   *S*        for (q=p; size > 0 ; size -= sizeof(short))
      339       339   *S*           *q++ = 0;
      340       340   *S*        return(p);
      341       341   *S*       }
      342       342   *S*
      343       343   *S*       #ifdef NOMALLOC
      344       344   *S*
      345       345   *S*       /*
      346       346   *S*        * stdio uses malloc and free.
      347       347   *S*        * you can use these as substitutes
      348       348   *S*        */
      349       349   *S*
      350       350   *S*       char *malloc(size) int size; {
      351       351   *S*
      352       352   *S*        /*
      353       353   *S*         * malloc(III) is called by stdio,
      354       354   *S*         * this routine is a substitute.
      355       355   *S*         */
      356       356   *S*
      357       357   *S*        return( (char *) newcore(size));
      358       358   *S*       }
      359       359   *S*
      360       360   *S*       free() {
      361       361   *S*
      362       362   *S*       }
      363       363   *S*       #endif
      364       364   *S*
      365       365   *S*       oldcore(p,size) short *p; int size; {
      366       366   *S*       #ifdef CORECHECK
      367       367   *S*        register short *cp;
      368       368   *S*       #endif
CC.C03    File=zbo$alloc:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=11 
      369       369   *S*
      370       370   *S*        assert(size<2*MAXSHORT);
      371       371   *S*       #ifdef CORECHECK
      372       372   *S*        for (cp=freelist[size/sizeof(short)]; cp != (short *) 0;
      373       373   *S*            cp = (short *) *cp)
      374       374   *S*           assert(cp != p);
      375       375   *S*       #endif
      376       376   *S*        *(short **) p = freelist[size/sizeof(short)];
      377       377   *S*        freelist[size/sizeof(short)] = p;
      378       378   *S*       }
      379       379   *S*
      380       380   *S*       short *ccur,*cend;
      381       381   *S*
      382       382   *S*       coreinit(p1,p2) short *p1,*p2; {
      383       383   *S*
      384       384   *S*        /*
      385       385   *S*         * coreinit is called with the boundaries of a piece of
      386       386   *S*         * memory that can be used for starters.
      387       387   *S*         */
      388       388   *S*
      389       389   *S*        ccur = p1;
      390       390   *S*        cend = p2;
      391       391   *S*       }
      392       392   *S*
      393       393   *S*       short *freshcore(size) int size; {
      394       394   *S*        register short *temp;
      395       395   *S*        static int cchunk=CCHUNK;
      396       396   *S*
      397       397   *S*        while(&ccur[size/sizeof(short)] >= cend && cchunk>0) {
      398       398   *S*           do {
      399       399   *S*              temp = (short *) sbrk(cchunk*sizeof(short));
      400       400   *S*              if (temp == (short *) -1)
      401       401   *S*                 cchunk >>= 1;
      402       402   *S*              else if (temp != cend)
      403       403   *S*                 ccur = cend = temp;
      404       404   *S*           } while (temp == (short *) -1 && cchunk>0);
      405       405   *S*           cend += cchunk;
CC.C03    File=zbo$alloc:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=12 
      406       406   *S*       #ifdef COREDEBUG
      407       407   *S*           shortsasked += cchunk;
      408       408   *S*       #endif
      409       409   *S*        }
      410       410   *S*        if (cchunk==0)
      411       411   *S*           return(0);
      412       412   *S*        temp = ccur;
      413       413   *S*        ccur = &ccur[size/sizeof(short)];
      414       414   *S*        return(temp);
      415       415   *S*       }
      416       416   *S*
      417       417   *S*       #else  /* USEMALLOC */
      418       418
      419       419             coreinit() {
      420       420    1
      421       421    1         /*
      422       422    1          * Empty function, no initialization needed
      423       423    1          */
      424       424    1        }
      425       425
      426       426             short *myalloc(size) register size; {
      427       427    1         register short *p,*q;
      428       428    1         extern char *vmalloc();
      429       429    1
      430       430    1         p = (short *)vmalloc(size);
      431       431    1         if (p == 0)
      432       432    1            error("out of memory");
      433       433    1         for(q=p;size>0;size -= sizeof(short))
      434       434    1            *q++ = 0;
      435       435    1         return(p);
      436       436    1        }
      437       437             #endif
      438       438
---  Include file information  ---

   stdio:h.:LIBRARY. is referenced
   zbo$param:h.:ZBC3TOU. is referenced
CC.C03    File=zbo$alloc:c.:ZBC3TSI                                                 Fri Aug 22 1997  Page=13 
   zbo$types:h.:ZBC3TOU. is referenced
   zbo$assert:h.:ZBC3TOU. is referenced
   zbo$alloc:h.:ZBC3TOU. is referenced
   zbo$line:h.:ZBC3TOU. is referenced
   zbo$lookup:h.:ZBC3TOU. is referenced
   zbo$proinf:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbo$alloc:c.:ZBC3TSI
