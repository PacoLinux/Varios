

14:38 AUG 20 '97 VM_MACRO_C.:VMB6SI                                        1    
    1      /*M* VM_MACROS_C  Macros used throughout the mail system. */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /*X*   DMC, DFC */
    8
    9      /***************************************************************/
   10      /*              Profile  record  format                        */
   11      /***************************************************************/
   12      /* This macro defines the MAIL PROFILE record structure.
   13
   14         All pointers should be setup to assume that this structure
   15         is stored in a data segment beginning at the zeroth word.
   16         Data segment three (DS3SID) is assumed. */
   17      %MACRO VM_PROFILE (NAME=VM_PROFILE,
   18                         STCLASS="BASED(VM_PROFILE$)");
   19      %LSET LISTDIR='0'B;
   20      %LSET STR = CONCAT(TEXTCHAR(STCLASS),'        ');
   21      %IF (SUBSTR(STR,0,6) = 'STATIC') OR
   22          (SUBSTR(STR,0,8) = 'CONSTANT') OR
   23          (SUBSTR(STR,0,3) = 'EXT');
   24        %LSET INIT = CHARTEXT('INIT');
   25      %ELSE;
   26        %LSET INIT = CHARTEXT('/*');
   27      %ENDIF;
   28
   29        DCL 1 NAME STCLASS,
   30               2 VERSION CHAR(3) %INIT('B00')%CHARTEXT('/**/'),
   31                             /* What version of MAIL last wrote this file */
   32               2 OPT,
   33                  3 HEADERS BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
   34                             /* Set if headers are desired on COPY, DELETE, MOVE, etc. */
   35                  3 FCOPY BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
   36                             /* Set if FILE_FOLDER is to be used for filing msgs */
   37                  3 RETURN_RECEIPT BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
14:38 AUG 20 '97 VM_MACRO_C.:VMB6SI                                        2    
   38                             /* Set if return receipt is desired for all messages */
   39                  3 RENUMBER BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
   40                             /* Set if messages are to be renumbered at exit time */
   41                  3 PAGE BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
   42                             /* Set if messages are to be displayed on seperate pages */
   43                  3 AUTO_EDIT BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
   44                             /* Set if Editor is to be called to create *BODY */
   45                  3 DISPTRACE BIT(1) UNAL %INIT('1'B)%CHARTEXT('/**/'),
   46                           /* Display TRACE records in mailgrams */
   47                  3 COMBINE BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
   48                           /* Combine DELIVs, ACKs, and ERRs with file copy */
   49                  3 DELIVERY_RECEIPT BIT (1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
   50                           /* Request delivery receipt */
   51                  3 ANS_RECEIVERS BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
   52                           /* ANS RECEIVERS by default */
   53                  3 PREPROCESS BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
   54                           /* Do preprocessing in SEND by default */
   55                  3 EXT_ADDR_DISP BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
   56                           /* Display long TO: C: and BC fields */
   57                  3 DEL_ON_DETACH BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
   58                           /* Delete enclosures upon DETACH */
   59                  3 RESERVED BIT(32) UNAL %INIT('0'B)%CHARTEXT('/**/'),
   60               2 PROFILE_SIZE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
   61                             /* How many words in this PROFILE */
   62               2 FREE$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
   63                             /* Head of FREE BLOCKS CHAIN in WORK_AREA */
   64               2 NEXT$ PTR %INIT(ADDR(NAME.WORK_AREA))%CHARTEXT('/**/'),
   65                             /* Ptr to next avail. word in WORK_AREA */
   66               2 NUM_MESSAGES UBIN WORD %INIT(0)%CHARTEXT('/**/'),
   67                             /* Current number of messages in file */
   68               2 NUM_NEW_MESSAGES UBIN WORD %INIT(0)%CHARTEXT('/**/'),
   69                             /* Number of new messages in file */
   70               2 NUM_DEL_MESSAGES UBIN WORD %INIT(0)%CHARTEXT('/**/'),
   71                             /* Number of deleted messages in file */
   72               2 NUM_MOLD_MESSAGES UBIN WORD %INIT(0)%CHARTEXT('/**/'),
   73                             /* Number of marked as old messages in file */
   74               2 HI_MESSAGE_NUMBER UBIN WORD %INIT(0)%CHARTEXT('/**/'),
14:38 AUG 20 '97 VM_MACRO_C.:VMB6SI                                        3    
   75                             /* Highest message number in this folder */
   76               2 GRANULES UBIN WORD %INIT(0)%CHARTEXT('/**/'),
   77                             /* Max # of granules to be allowed in message file */
   78               2 SETUP,
   79                             /* First command to be executed upon entry to mail */
   80                  3 COUNT UBIN BYTE CALIGNED %INIT(8)%CHARTEXT('/**/'),
   81                  3 TEXT CHAR(256) CALIGNED %INIT('LIST NEW ')%CHARTEXT('/**/'),
   82               2 FILE_FOLDER$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
   83                             /* Address to be used for storing copies of messages by user */
   84               2 SEARCH_LIST$ (0:8) PTR %INIT(ADDR(NIL)*0)%CHARTEXT('/**/'),
   85                             /* What folders to search for address resolution */
   86              2 SIGNED$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
   87                             /* Who do I claim to be? */
   88              2 NAME_KEY CHAR(20) ALIGNED %INIT(' ')%CHARTEXT('/**/'),
   89                             /* ACCT||UNAME of owner of this folder */
   90              2 LOW_DEL_NUM UBIN WORD ALIGNED %INIT(0)%CHARTEXT('/**/'),
   91               2 RECS_DELETED UBIN WORD ALIGNED %INIT(0)%CHARTEXT('/**/'),
   92                     /* Total records deleted since last recopy */
   93               2 HIGH_RECS UBIN WORD ALIGNED %INIT(0)%CHARTEXT('/**/'),
   94                     /* High water mark of file size since last copy */
   95              2 EDITOR$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
   96                     /* Editor to use when editing a message to be sent */
   97              2 REPLY_TO$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
   98                     /* Address to be used for replying to messages */
   99              2 NUM_LOST UBIN WORD ALIGNED %INIT(0)%CHARTEXT('/**/'),
  100                             /* Number of messages lost due to lack of disk space */
  101              2 RESERVED (0:13) UBIN WORD ALIGNED %INIT(0*0)%CHARTEXT('/**/'),
  102                             /* Reserved for future use */
  103              2 WORK_AREA UBIN WORD;
  104                             /* Work area used for string space */
  105      %MEND;
  106
  107
  108      /**************************************************************/
  109      /*              Header record format                          */
  110      /**************************************************************/
  111      /* The following macro generates a structure which describes the
14:38 AUG 20 '97 VM_MACRO_C.:VMB6SI                                        4    
  112         message header record. All pointers rely upon this structure
  113         being contained in data segment 8. */
  114      %MACRO VM_HEADER (NAME=VM_HEADER,
  115                          STCLASS="BASED (VM_HEADER$)");
  116      %LSET LISTDIR='0'B;
  117      %LSET STR = CONCAT(TEXTCHAR(STCLASS),'        ');
  118      %IF (SUBSTR(STR,0,6) = 'STATIC') OR
  119          (SUBSTR(STR,0,8) = 'CONSTANT') OR
  120          (SUBSTR(STR,0,3) = 'EXT');
  121        %LSET INIT = CHARTEXT('INIT');
  122      %ELSE;
  123        %LSET INIT = CHARTEXT('/*');
  124      %ENDIF;
  125
  126        DCL 1 NAME STCLASS,
  127               2 HEADER_SIZE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  128                             /* Number of words in this header */
  129               2 CREATION_DATE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  130                             /* Date message created (passed to send) */
  131               2 DELIVERY_DATE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  132                             /* Date message is to be/was delivered */
  133               2 FIRST_DELIVERY UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  134                           /* Date/time of MAILMAN's first delivery pass */
  135               2 RESERVED_DATES (0:4) UBIN WORD %INIT(0*0)%CHARTEXT('/**/'),
  136                             /* Reserved for future use */
  137               2 NUM_RECORDS UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  138                             /* Number of records in message body */
  139               2 STATUS,
  140                  3 ERR BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  141                      /* Set if message is being returned to sender -
  142                         see HDR.ERROR and HDR.BAD_ADDR */
  143                  3 ANSWER BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  144                             /* Set if this is an answer to a received message */
  145                  3 ACK BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  146                             /* Set if this is an ack to a received message */
  147                  3 DEFER BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  148                             /* Set if deferred message (sent at HDR.DELIVERY_DATE) */
14:38 AUG 20 '97 VM_MACRO_C.:VMB6SI                                        5    
  149                  3 RR BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  150                             /* Set if "Return Receipt" requested */
  151                  3 CRYPT BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  152                             /* Set if message body is encrypted */
  153                  3 OLD BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  154                      /* Set if message is "old" (has at least had
  155                         header printed in prior session). */
  156                  3 MAKE_OLD BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  157                      /* Set if message is to be marked "old" when
  158                         message file is overwritten. */
  159                  3 EXAM BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  160                             /* Set if message has been examined */
  161                  3 DEL BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  162                             /* Set if message has been deleted */
  163                  3 FCOPY BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  164                             /* Set if message is a FILE COPY */
  165                  3 MARK BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  166                             /* Set if message has been MARKed */
  167                  3 GRAPHICS BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  168                             /* Set if message contains graphics */
  169                  3 FORWARDED BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  170                             /* Set if message was result of FORWARD command */
  171                  3 ANS_TO BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  172                             /* Used to tell MAILMAN to set RETURN_TO_ORIGIN */
  173                  3 DR BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  174                           /* Delivery receipt requested */
  175                  3 DELIVERY BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  176                           /* This 'gram is a delivery receipt */
  177                  3 BROADCAST BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  178                           /* Broadcast (junk) mail; don't return errors */
  179                  3 PRIMARY BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  180                           /* Recipient is on primary TO: list */
  181                  3 C BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  182                           /* Recipient is on C: list */
  183                  3 BC BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  184                           /* Recipient is on BC: list */
  185                  3 THINGED BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
14:38 AUG 20 '97 VM_MACRO_C.:VMB6SI                                        6    
  186                           /* Thing has already [attempted to] sched this */
  187                  3 RRACK BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  188                           /* Set if this is a rr ack to a displayed message */
  189                  3 PRE_B00 BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  190                           /* Set when a pre-B00 message is read */
  191                  3 ENCL BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  192                           /* This mailgram has binary enclosures */
  193                  3 RESERVED BIT(11) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  194               2 MISC ALIGNED,
  195                  3 PHASE UBIN (4) UNAL %INIT(0)%CHARTEXT('/**/'),
  196                           /* Current phase of delivery */
  197                  3 * UBIN (32) UNAL %INIT(0)%CHARTEXT('/**/'),
  198                             /* Reserved for future use */
  199               2 ERROR,
  200                             /* Reason message was returned to sender */
  201                  3 FCG BIT(12) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  202                  3 MID BIT(6) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  203                  3 MON BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  204                  3 ERR# UBIN(14) UNAL %INIT(0)%CHARTEXT('/**/'),
  205                  3 SEV UBIN(3) UNAL %INIT(0)%CHARTEXT('/**/'),
  206               2 FREE$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  207                             /* Head of FREE BLOCKS CHAIN in WORK_AREA */
  208               2 NEXT$ PTR %INIT(ADDR(NAME.WORK_AREA))%CHARTEXT('/**/'),
  209                             /* Ptr to next avail. word in WORK_AREA */
  210               2 BAD_ADDRESS$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  211                             /* Ptr to bad address textc info */
  212               2 BLIND$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  213                             /* Ptr to BLIND COPY textc info */
  214               2 COPY$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  215                             /* Ptr to COPY textc info */
  216               2 FILE_FOLDER$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  217                             /* Address to be used for storing copies of messages by user */
  218               2 FROM$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  219                             /* Ptr to FROM textc info */
  220               2 REFERENCE$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  221                             /* Ptr to REFERENCE textc info */
  222               2 REPLY_TO$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
14:38 AUG 20 '97 VM_MACRO_C.:VMB6SI                                        7    
  223                             /* Ptr to REPLY-TO textc info */
  224               2 RETURN_ADDRESS$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  225                             /* Ptr to RETURN_ADDRESS address structure */
  226               2 SIGNED$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  227                             /* Signature text */
  228               2 SUBJECT$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  229                             /* Ptr to SUBJECT textc info */
  230               2 TO$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  231                             /* Ptr to TO textc info */
  232               2 UNIQUE_ID$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  233                                  /* Unique identifier for this message */
  234               2 REFERS_TO_ID$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  235                                  /* Identifies original mailgram for ACK/ERR/ANS */
  236               2 NUM_TRACE_RECORDS UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  237                                  /* Number of TRACE records */
  238               2 NUM_ENCL_RECORDS UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  239                           /* Number of binary enclosure records MINUS  context record */
  240               2 RESERVED (0:5) UBIN WORD %INIT(0*0)%CHARTEXT('/**/'),
  241                             /* Reserved for future expansion */
  242
  243               2 WORK_AREA UBIN WORD;
  244                             /* Base of work area for textc data */
  245      %MEND;
  246
  247
  248      /**************************************************************/
  249      /*              %EQU'S for KEY types                          */
  250      /**************************************************************/
  251      %MACRO VM_KEYTYPES;
  252
  253      %EQU    VM_TYPE_PRO   = 1;      /* The Profile record */
  254      %EQU    VM_TYPE_ACC   = 2;      /* The access-control record */
  255      %EQU    VM_TYPE_HEAD  = 8;      /* The Header record */
  256      %EQU    VM_TYPE_DELIV = 9;      /* The delivery records */
  257      %EQU    VM_TYPE_SITE  = 10;     /* SITE INFORMATION */
  258      %EQU    VM_TYPE_TO    = 16;     /* The original TO record */
  259      %EQU    VM_TYPE_ITO   = 17;     /* The intersystem TO record */
14:38 AUG 20 '97 VM_MACRO_C.:VMB6SI                                        8    
  260      %EQU    VM_TYPE_C     = 24;     /* The original Copies record */
  261      %EQU    VM_TYPE_IC    = 25;     /* The intersystem Copies record */
  262      %EQU    VM_TYPE_BC    = 32;     /* The original Blind Copies record */
  263      %EQU    VM_TYPE_IBC   = 33;     /* The intersystem Blind Copies record */
  264      %EQU    VM_TYPE_RTO   = 36;     /* The Reply To record */
  265      %EQU    VM_TYPE_TRACE = 44;     /* The message trace record(s) */
  266      %EQU    VM_TYPE_BODY  = 48;     /* The message body record(s) */
  267      %EQU    VM_TYPE_LIST  = 60;     /* Definition for a LIST of addresses */
  268      %EQU    VM_TYPE_USER  = 80;     /* Definition for a USER */
  269      %EQU    VM_TYPE_ID    = 90;     /* The unique-message-ID cross reference */
  270      %EQU    VM_TYPE_ENCL  = 100;    /* The binary enclosure context record*/
  271      %EQU    VM_TYPE_ENCL_INIT = 101;/* To initialize the first enclosure record */
  272
  273      %MEND;
  274
  275      /**************************************************************/
  276      /*     %EQU's for phase-of-delivery                           */
  277      /**************************************************************/
  278
  279      %MACRO VM_DELIVERYPHASES;
  280
  281      %EQU VM_PHASE_STARTUP = 0;             /* No previous attempt on this system */
  282      %EQU VM_PHASE_RESOLVE_FC = 1;          /* Write deliv. record for file copy */
  283      %EQU VM_PHASE_DELIVER_FC = 2;          /* Deliver file copy */
  284      %EQU VM_PHASE_RESOLVE_ALL = 3;         /* Resolve addr., ship intersystem */
  285      %EQU VM_PHASE_CORRECT_FC = 4;          /* Update flags for the file copy */
  286      %EQU VM_PHASE_ERR_SWEEP_1 = 5;         /* Report any errors in earlier phases */
  287      %EQU VM_PHASE_DELIVER_ALL = 6;         /* Deliver other local copies */
  288      %EQU VM_PHASE_ERR_SWEEP_2 = 7;         /* Report undeliverable mail */
  289      %EQU VM_PHASE_SEND_RECEIPT = 8;        /* Send delivery receipt if requested */
  290      %EQU VM_PHASE_FINI = 9;                /* Completed;  discard mailman file */
  291
  292      %MEND;
  293
  294
  295      /**************************************************************/
  296      /*         Key structure for the PROFILE record               */
14:38 AUG 20 '97 VM_MACRO_C.:VMB6SI                                        9    
  297      /**************************************************************/
  298      %MACRO VM_PROKEY (NAME=VM_PROKEY,
  299                         STCLASS=STATIC);
  300      %LSET LISTDIR='0'B;
  301      %LSET STR = CONCAT(TEXTCHAR(STCLASS),'        ');
  302      %IF (SUBSTR(STR,0,6) = 'STATIC') OR
  303          (SUBSTR(STR,0,8) = 'CONSTANT') OR
  304          (SUBSTR(STR,0,3) = 'EXT');
  305        %LSET INIT = CHARTEXT('INIT');
  306      %ELSE;
  307        %LSET INIT = CHARTEXT('/*');
  308      %ENDIF;
  309
  310        DCL 1 NAME STCLASS,
  311               2 COUNT UBIN BYTE CALIGNED %INIT(1)%CHARTEXT('/**/'),
  312               2 TYPE UBIN BYTE CALIGNED %INIT(%VM_TYPE_PRO)%CHARTEXT('/**/');
  313                      /* This type specifies a PROFILE record */
  314      %MEND;
  315
  316
  317      /**************************************************************/
  318      /*         Key structure for the SITE record                  */
  319      /**************************************************************/
  320      %MACRO VM_SITEKEY (NAME=VM_SITEKEY,
  321                         STCLASS=STATIC);
  322      %LSET LISTDIR='0'B;
  323      %LSET STR = CONCAT(TEXTCHAR(STCLASS),'        ');
  324      %IF (SUBSTR(STR,0,6) = 'STATIC') OR
  325          (SUBSTR(STR,0,8) = 'CONSTANT') OR
  326          (SUBSTR(STR,0,3) = 'EXT');
  327        %LSET INIT = CHARTEXT('INIT');
  328      %ELSE;
  329        %LSET INIT = CHARTEXT('/*');
  330      %ENDIF;
  331
  332        DCL 1 NAME STCLASS,
  333               2 COUNT UBIN BYTE CALIGNED %INIT(1)%CHARTEXT('/**/'),
14:38 AUG 20 '97 VM_MACRO_C.:VMB6SI                                        10   
  334               2 TYPE UBIN BYTE CALIGNED %INIT(%VM_TYPE_SITE)%CHARTEXT('/**/');
  335                      /* This type specifies a SITE record */
  336      %MEND;
  337
  338
  339      /**************************************************************/
  340      /*   Key structure for all message data except body records   */
  341      /**************************************************************/
  342      /* This macro generates structures describing the keys used for
  343        the message header and the address structures: TO, C and BC. */
  344      %MACRO VM_INFOKEY (NAME=VM_INFOKEY,
  345                         STCLASS=STATIC,
  346                         TYP=0);
  347      %LSET LISTDIR='0'B;
  348      %LSET STR = CONCAT(TEXTCHAR(STCLASS),'        ');
  349      %IF (SUBSTR(STR,0,6) = 'STATIC') OR
  350          (SUBSTR(STR,0,8) = 'CONSTANT') OR
  351          (SUBSTR(STR,0,3) = 'EXT');
  352        %LSET INIT = CHARTEXT('INIT');
  353      %ELSE;
  354        %LSET INIT = CHARTEXT('/*');
  355      %ENDIF;
  356
  357        DCL 1 NAME STCLASS,
  358               2 COUNT UBIN BYTE CALIGNED %INIT(5)%CHARTEXT('/**/'),
  359               2 TYPE UBIN BYTE CALIGNED %INIT(TYP)%CHARTEXT('/**/'),
  360                      /* The type of the record to be accessed. */
  361               2 MESSAGE_NUMBER UBIN WORD CALIGNED %INIT(0)%CHARTEXT('/**/');
  362                      /* Number of this message. */
  363      %MEND;
  364
  365
  366      /**************************************************************/
  367      /*              The message body key format                   */
  368      /**************************************************************/
  369      %MACRO VM_BODYKEY (NAME=VM_BODYKEY,
  370                         TYP=%VM_TYPE_BODY,
14:38 AUG 20 '97 VM_MACRO_C.:VMB6SI                                        11   
  371                         STCLASS=STATIC);
  372      %LSET LISTDIR='0'B;
  373      %LSET STR = CONCAT(TEXTCHAR(STCLASS),'        ');
  374      %IF (SUBSTR(STR,0,6) = 'STATIC') OR
  375          (SUBSTR(STR,0,8) = 'CONSTANT') OR
  376          (SUBSTR(STR,0,3) = 'EXT');
  377        %LSET INIT = CHARTEXT('INIT');
  378      %ELSE;
  379        %LSET INIT = CHARTEXT('/*');
  380      %ENDIF;
  381
  382        DCL 1 NAME STCLASS,
  383               2 COUNT UBIN BYTE CALIGNED %INIT(7)%CHARTEXT('/**/'),
  384               2 TYPE UBIN BYTE CALIGNED %INIT(TYP)%CHARTEXT('/**/'),
  385                      /* The type of the record to be accessed. */
  386               2 MESSAGE_NUMBER UBIN WORD CALIGNED %INIT(0)%CHARTEXT('/**/'),
  387                      /* Number of this message. */
  388               2 REC_NUMBER UBIN HALF CALIGNED %INIT(0)%CHARTEXT('/**/');
  389                      /* The record number identifying the line of
  390                         the message body to be accessed. */
  391      %MEND;
  392
  393      /**************************************************************/
  394      /* This structure describes the key of an LIST of addresses   */
  395      /**************************************************************/
  396      %MACRO VM_LISTKEY (NAME=VM_LISTKEY,
  397                         STCLASS=STATIC,
  398                         TYP=%VM_TYPE_LIST);
  399      %LSET LISTDIR='0'B;
  400      %LSET STR = CONCAT(TEXTCHAR(STCLASS),'        ');
  401      %IF (SUBSTR(STR,0,6) = 'STATIC') OR
  402          (SUBSTR(STR,0,8) = 'CONSTANT') OR
  403          (SUBSTR(STR,0,3) = 'EXT');
  404        %LSET INIT = CHARTEXT('INIT');
  405      %ELSE;
  406        %LSET INIT = CHARTEXT('/*');
  407      %ENDIF;
14:38 AUG 20 '97 VM_MACRO_C.:VMB6SI                                        12   
  408
  409        DCL 1 NAME STCLASS,
  410               2 COUNT UBIN BYTE CALIGNED %INIT(201)%CHARTEXT('/**/'),
  411               2 TYPE UBIN BYTE CALIGNED %INIT(TYP)%CHARTEXT('/**/'),
  412                      /* The type of the record to be accessed. */
  413               2 TEXT CHAR(200) CALIGNED;
  414      %MEND;
  415
  416
  417      /**************************************************************/
  418      /* This structure describes the key for a USER definition     */
  419      /**************************************************************/
  420      /* THE FOLLOWING STRUCTURES DESCRIBE THE NAME MAP.
  421         GIVEN THE USER NAME AS INPUT, THIS STRUCTURE WILL CONTAIN THE
  422         ACCOUNT, UNAME, FOLDER, PASS, SITE AND VARIOUS FLAGS.          */
  423      %MACRO VM_USERKEY (NAME=VM_USERKEY,
  424                         TYP=%VM_TYPE_USER,
  425                         STCLASS=STATIC);
  426      %LSET LISTDIR='0'B;
  427      %LSET STR = CONCAT(TEXTCHAR(STCLASS),'        ');
  428      %IF (SUBSTR(STR,0,6) = 'STATIC') OR
  429          (SUBSTR(STR,0,8) = 'CONSTANT') OR
  430          (SUBSTR(STR,0,3) = 'EXT');
  431        %LSET INIT = CHARTEXT('INIT');
  432      %ELSE;
  433        %LSET INIT = CHARTEXT('/*');
  434      %ENDIF;
  435
  436        DCL 1 NAME STCLASS,
  437               2 COUNT UBIN BYTE CALIGNED %INIT(201)%CHARTEXT('/**/'),
  438               2 TYPE UBIN BYTE CALIGNED %INIT(TYP)%CHARTEXT('/**/'),
  439                      /* The type of the record to be accessed. */
  440               2 TEXT CHAR(200) CALIGNED;
  441      %MEND;
  442
  443
  444      /**************************************************************/
14:38 AUG 20 '97 VM_MACRO_C.:VMB6SI                                        13   
  445      /* This structure describes the key for a DELIVERY record     */
  446      /**************************************************************/
  447
  448      %MACRO VM_DELIVERYKEY (NAME=VM_DELIVERYKEY,
  449                         TYP=%VM_TYPE_DELIV,
  450                         STCLASS=STATIC);
  451      %LSET LISTDIR='0'B;
  452      %LSET STR = CONCAT(TEXTCHAR(STCLASS),'        ');
  453      %IF (SUBSTR(STR,0,6) = 'STATIC') OR
  454          (SUBSTR(STR,0,8) = 'CONSTANT') OR
  455          (SUBSTR(STR,0,3) = 'EXT');
  456        %LSET INIT = CHARTEXT('INIT');
  457      %ELSE;
  458        %LSET INIT = CHARTEXT('/*');
  459      %ENDIF;
  460
  461        DCL 1 NAME STCLASS,
  462               2 COUNT UBIN BYTE CALIGNED %INIT(40)%CHARTEXT('/**/'),
  463               2 TYPE UBIN BYTE CALIGNED %INIT(TYP)%CHARTEXT('/**/'),
  464                      /* The type of the record to be accessed. */
  465               2 PSID CHAR(6) CALIGNED %INIT(' ')%CHARTEXT('/**/'),
  466               2 ACCT CHAR(8) CALIGNED %INIT(' ')%CHARTEXT('/**/'),
  467               2 FOLDER CHAR(25) CALIGNED %INIT(' ')%CHARTEXT('/**/');
  468
  469      %MEND;
  470
  471
  472      /**************************************************************/
  473      /* This structure describes the key for an ID record          */
  474      /**************************************************************/
  475
  476      %MACRO VM_IDKEY (NAME=VM_IDKEY,
  477                         TYP=%VM_TYPE_ID,
  478                         STCLASS=STATIC);
  479      %LSET LISTDIR='0'B;
  480      %LSET STR = CONCAT(TEXTCHAR(STCLASS),'        ');
  481      %IF (SUBSTR(STR,0,6) = 'STATIC') OR
14:38 AUG 20 '97 VM_MACRO_C.:VMB6SI                                        14   
  482          (SUBSTR(STR,0,8) = 'CONSTANT') OR
  483          (SUBSTR(STR,0,3) = 'EXT');
  484        %LSET INIT = CHARTEXT('INIT');
  485      %ELSE;
  486        %LSET INIT = CHARTEXT('/*');
  487      %ENDIF;
  488
  489        DCL 1 NAME STCLASS,
  490               2 COUNT UBIN BYTE CALIGNED %INIT(255)%CHARTEXT('/**/'),
  491               2 TYPE UBIN BYTE CALIGNED %INIT(TYP)%CHARTEXT('/**/'),
  492                      /* The type of the record to be accessed. */
  493               2 UNIQUE_ID CHAR (254) %INIT(' ')%CHARTEXT('/**/');
  494
  495      %MEND;
  496
  497
  498      /**************************************************************/
  499      /*              %EQU'S for BODY RECORD types                  */
  500      /**************************************************************/
  501      %MACRO VM_BODYTYPES;
  502
  503      %EQU    VM_BODY_TEXT = 1;   /* Text record */
  504      %EQU    VM_BODY_GRAPHICS = 2;   /* Graphics data. RESERVED FOR FUTURE USE */
  505      %EQU    VM_BODY_ENCODED_ERR = 3; /* Encoded error/time/textc information */
  506      %EQU    VM_BODY_BINARY_ENCL = 4; /* Binary enclosure record */
  507
  508      %MEND;
  509
  510
  511      /**************************************************************/
  512      /*              The body record format                        */
  513      /**************************************************************/
  514      %MACRO VM_BODYREC (NAME=VM_BODYREC,
  515                          LEN=300,
  516                         TYP=%VM_BODY_TEXT,
  517                         VARYLEN (YES=1,NO=0)=0,
  518                         ERR_FORMAT (YES=1,NO=0)=0,
14:38 AUG 20 '97 VM_MACRO_C.:VMB6SI                                        15   
  519                         STCLASS=STATIC);
  520      %LSET LISTDIR='0'B;
  521      %LSET STR = CONCAT(TEXTCHAR(STCLASS),'        ');
  522      %IF (SUBSTR(STR,0,6) = 'STATIC') OR
  523          (SUBSTR(STR,0,8) = 'CONSTANT') OR
  524          (SUBSTR(STR,0,3) = 'EXT');
  525        %LSET INIT = CHARTEXT('INIT');
  526      %ELSE;
  527        %LSET INIT = CHARTEXT('/*');
  528      %ENDIF;
  529
  530        DCL 1 NAME STCLASS,
  531               2 TYPE UBIN BYTE CALIGNED %INIT(TYP)%CHARTEXT('/**/'),
  532                      /* The type of the record to be accessed. */
  533               2 RESERVED UBIN (27) UNAL %INIT(0)%CHARTEXT('/**/'),
  534                       /* Reserved for future use */
  535                2 VALUE,
  536                  3 COUNT UBIN WORD,
  537                      /* Number of bytes of DATA */
  538      %IF (ERR_FORMAT=1);
  539                     3 DATA,
  540                        4 ERR BIT (36),
  541                        4 UTS UBIN WORD,
  542                        4 STUFF,
  543                           5 PIECE (0:%(LEN-9)) UBIN BYTE CALIGNED;
  544      %ELSE;
  545         %IF (VARYLEN=1);
  546                     3 DATA CHAR(NAME.VALUE.COUNT) CALIGNED;
  547         %ELSE;
  548                     3 DATA CHAR(LEN) CALIGNED;
  549         %ENDIF;
  550      %ENDIF;
  551      %MEND;
  552
  553
  554      /**************************************************************/
  555      /*              %EQU'S for ADDRESS types                      */
14:38 AUG 20 '97 VM_MACRO_C.:VMB6SI                                        16   
  556      /**************************************************************/
  557      %MACRO VM_ADDTYPES;
  558
  559      %EQU    VM_ADD_RESOLVED = 1;   /* Resolved address entry */
  560      %EQU    VM_ADD_UNRESOLVED = 2; /* Unresolved address entry */
  561      %MEND;
  562
  563
  564      /**************************************************************/
  565      /*             Address list head                              */
  566      /**************************************************************/
  567      /* This macro describes the HEAD of  a linked list which
  568         contains N entries of RESOLVED and UNRESOLVED adresses.  */
  569      %MACRO VM_ADD_HEAD (NAME=VM_ADD_HEAD,
  570                         STCLASS="BASED(VM_ADDLIST$)");
  571      %LSET LISTDIR='0'B;
  572      %LSET STR = CONCAT(TEXTCHAR(STCLASS),'        ');
  573      %IF (SUBSTR(STR,0,6) = 'STATIC') OR
  574          (SUBSTR(STR,0,8) = 'CONSTANT') OR
  575          (SUBSTR(STR,0,3) = 'EXT');
  576        %LSET INIT = CHARTEXT('INIT');
  577      %ELSE;
  578        %LSET INIT = CHARTEXT('/*');
  579      %ENDIF;
  580
  581        DCL 1 NAME STCLASS,
  582               2 ADDRESS_SIZE UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  583                             /* Number of words in this address list */
  584               2 NUM_ENTRIES UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  585                             /* Number of entries in list */
  586               2 FLAGS,
  587                  3 ERR# BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  588                             /* Some error found in address list */
  589                  3 RESERVED BIT(35) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  590                             /* Reserved for future expansion */
  591               2 HEAD$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  592                             /* Head of link list */
14:38 AUG 20 '97 VM_MACRO_C.:VMB6SI                                        17   
  593               2 FREE$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  594                             /* Ptr to first entry in free block list */
  595               2 NEXT$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  596                             /* Ptr to next available word in work area */
  597               2 WORK_AREA UBIN WORD;
  598                             /* First word of work area. */
  599      %MEND;
  600
  601
  602      /**************************************************************/
  603      /*             Resolved address entry                         */
  604      /**************************************************************/
  605      /* This macro is used to describe a fully resolved address.
  606         This structure is assumed to be one of N entries in an
  607         address list.                                             */
  608      %MACRO VM_RADDRESS (NAME=VM_RADDRESS,
  609                         STCLASS=STATIC);
  610      %LSET LISTDIR='0'B;
  611      %LSET STR = CONCAT(TEXTCHAR(STCLASS),'        ');
  612      %IF (SUBSTR(STR,0,6) = 'STATIC') OR
  613          (SUBSTR(STR,0,8) = 'CONSTANT') OR
  614          (SUBSTR(STR,0,3) = 'EXT');
  615        %LSET INIT = CHARTEXT('INIT');
  616      %ELSE;
  617        %LSET INIT = CHARTEXT('/*');
  618      %ENDIF;
  619
  620        DCL 1 NAME STCLASS,
  621               2 NEXT$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  622                             /* Ptr to next entry on list */
  623               2 PREV$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  624                             /* Ptr to previous entry on list */
  625               2 FLAGS,
  626                  3 UNDEF# BIT (1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  627                             /* This entry is not valid. Report as an error */
  628                  3 USER# BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  629                             /* USER def, not LIST */
14:38 AUG 20 '97 VM_MACRO_C.:VMB6SI                                        18   
  630                  3 RESERVED BIT(7) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  631                             /* Reserved for future use */
  632               2 TYPE UBIN BYTE UNAL %INIT(%VM_ADD_RESOLVED)%CHARTEXT('/**/'),
  633               2 NAME_KEY CHAR(20) CALIGNED %INIT(' ')%CHARTEXT('/**/'),
  634                             /* Used only for USER definitions */
  635               2 FOLDER CHAR(25) CALIGNED %INIT(' '*0)%CHARTEXT('/**/'),
  636               2 NOMAD REDEF FOLDER,
  637                  3 FOLDER CHAR (18) CALIGNED,
  638                  3 DELIM CHAR (1) CALIGNED,
  639                  3 PSID CHAR (6) CALIGNED,
  640               2 PASS CHAR(8) CALIGNED %INIT(' '*0)%CHARTEXT('/**/'),
  641                             /* NOTE: Passwords are encrypted */
  642               2 SITENAME CHAR(8) CALIGNED %INIT(' '*0)%CHARTEXT('/**/'),
  643               2 ACCT CHAR(8) CALIGNED %INIT(' '*0)%CHARTEXT('/**/');
  644      %MEND;
  645
  646      /**************************************************************/
  647      /*           Unresolved address entry                         */
  648      /**************************************************************/
  649      /* This macro is used to describe an unresolved address.
  650         This structure is assumed to be one of N entries in an
  651         address list. It must be further resolved by MAILMAN
  652         before the message can be delivered.                      */
  653      %MACRO VM_UADDRESS (NAME=VM_UADDRESS,
  654                         STCLASS=STATIC);
  655      %LSET LISTDIR='0'B;
  656      %LSET STR = CONCAT(TEXTCHAR(STCLASS),'        ');
  657      %IF (SUBSTR(STR,0,6) = 'STATIC') OR
  658          (SUBSTR(STR,0,8) = 'CONSTANT') OR
  659          (SUBSTR(STR,0,3) = 'EXT');
  660        %LSET INIT = CHARTEXT('INIT');
  661      %ELSE;
  662        %LSET INIT = CHARTEXT('/*');
  663      %ENDIF;
  664
  665        DCL 1 NAME STCLASS,
  666               2 NEXT$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
14:38 AUG 20 '97 VM_MACRO_C.:VMB6SI                                        19   
  667                             /* Ptr to next entry on list */
  668               2 PREV$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  669                             /* Ptr to previous entry on list */
  670               2 FLAGS,
  671                  3 UNDEF# BIT (1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  672                             /* This entry is not valid. Report as an error */
  673                  3 USER# BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  674                             /* USER def, not LIST */
  675                  3 RESERVED BIT(7) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  676                             /* Reserved for future use */
  677               2 TYPE UBIN BYTE UNAL %INIT(%VM_ADD_UNRESOLVED)%CHARTEXT('/**/'),
  678               2 NAME_KEY CHAR(20) CALIGNED %INIT(' ')%CHARTEXT('/**/'),
  679                             /* Used only for USER definitions */
  680               2 FOLDER CHAR(25) CALIGNED %INIT(' '*0)%CHARTEXT('/**/'),
  681               2 NOMAD REDEF FOLDER,
  682                  3 FOLDER CHAR (18) CALIGNED,
  683                  3 DELIM CHAR (1) CALIGNED,
  684                  3 PSID CHAR (6) CALIGNED,
  685               2 PASS CHAR(8) CALIGNED %INIT(' '*0)%CHARTEXT('/**/'),
  686                             /* NOTE: Passwords are encrypted */
  687               2 SITENAME CHAR(8) CALIGNED %INIT(' '*0)%CHARTEXT('/**/'),
  688               2 USER_NAME,
  689                  3 COUNT UBIN BYTE CALIGNED %INIT(0)%CHARTEXT('/**/'),
  690                  3 TEXT CHAR(200) CALIGNED %INIT(' ')%CHARTEXT('/**/');
  691      %MEND;
  692
  693
  694      /**************************************************************/
  695      /* This structure describes the format of a DELIVERY record   */
  696      /**************************************************************/
  697
  698      %MACRO VM_DELIVERY (NAME=VM_DELIVERY,
  699                         STCLASS=STATIC,
  700                         VARYLEN (YES='1'B,NO='0'B)='0'B);
  701      %LSET LISTDIR='0'B;
  702      %LSET STR = CONCAT(TEXTCHAR(STCLASS),'        ');
  703      %IF (SUBSTR(STR,0,6) = 'STATIC') OR
14:38 AUG 20 '97 VM_MACRO_C.:VMB6SI                                        20   
  704          (SUBSTR(STR,0,8) = 'CONSTANT') OR
  705          (SUBSTR(STR,0,3) = 'EXT');
  706        %LSET INIT = CHARTEXT('INIT');
  707      %ELSE;
  708        %LSET INIT = CHARTEXT('/*');
  709      %ENDIF;
  710
  711        DCL 1 NAME STCLASS,
  712               2 UTS_OF_DELIVERY UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  713                  /* UTS of last delivery attempt.  0 if none yet. */
  714               2 FLAGS ALIGNED,
  715                  3 DONE BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
  716                     /* Success, or fatal failure; don't try again. */
  717                  3 REPORTED BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
  718                     /* Reason for failure reported to sender */
  719                  3 PRIMARY BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
  720                     /* Addressee is on TO: list. */
  721                  3 C BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
  722                     /* Addressee is on C: list */
  723                  3 BC BIT(1) %INIT('0'B)%CHARTEXT('/**/'),
  724                     /* Addressee is on BC: list */
  725                  3 FC BIT (1) %INIT('0'B)%CHARTEXT('/**/'),
  726                     /* Addressee is the file copy folder */
  727                  3 * BIT (30) %INIT('0'B)%CHARTEXT('/**/'),
  728               2 ERR BIT (36) ALIGNED %INIT('0'B)%CHARTEXT('/**/'),
  729                     /* Error code during delivery, or 0 for not-tried or success */
  730               2 COUNT UBIN BYTE CALIGNED %INIT(0)%CHARTEXT('/**/'),
  731                     /* Length of mailbox owner's name/id */
  732      %IF VARYLEN;
  733               2 TEXT CHAR (NAME.COUNT) %INIT(' ')%CHARTEXT('/**/');
  734      %ELSE;
  735               2 TEXT CHAR (255) %INIT(' ')%CHARTEXT('/**/');
  736      %ENDIF;
  737                     /* Mailbox owner's name or address in readable form. */
  738
  739      %MEND;
  740
14:38 AUG 20 '97 VM_MACRO_C.:VMB6SI                                        21   
  741
  742      /**************************************************************/
  743      /* This structure describes the format of an ID record        */
  744      /**************************************************************/
  745
  746      %MACRO VM_ID (NAME=VM_ID,
  747                    STCLASS=STATIC);
  748      %LSET LISTDIR='0'B;
  749      %LSET STR = CONCAT(TEXTCHAR(STCLASS),'        ');
  750      %IF (SUBSTR(STR,0,6) = 'STATIC') OR
  751          (SUBSTR(STR,0,8) = 'CONSTANT') OR
  752          (SUBSTR(STR,0,3) = 'EXT');
  753        %LSET INIT = CHARTEXT('INIT');
  754      %ELSE;
  755        %LSET INIT = CHARTEXT('/*');
  756      %ENDIF;
  757
  758        DCL 1 NAME STCLASS,
  759               2 MESSAGE_NUMBER UBIN WORD %INIT(0)%CHARTEXT('/**/');
  760
  761      %MEND;
  762
  763
  764      /*************************************************************/
  765      /*                   SEARCH LIST information                 */
  766      /*************************************************************/
  767      %MACRO VM_SEARCH_INFO (NAME=VM_SEARCH_INFO,
  768                             STCLASS=STATIC);
  769      %LSET LISTDIR='0'B;
  770      %LSET STR = CONCAT(TEXTCHAR(STCLASS),'        ');
  771      %IF (SUBSTR(STR,0,6) = 'STATIC') OR
  772          (SUBSTR(STR,0,8) = 'CONSTANT') OR
  773          (SUBSTR(STR,0,3) = 'EXT');
  774        %LSET INIT = CHARTEXT('INIT');
  775      %ELSE;
  776        %LSET INIT = CHARTEXT('/*');
  777      %ENDIF;
14:38 AUG 20 '97 VM_MACRO_C.:VMB6SI                                        22   
  778
  779        DCL 1 NAME STCLASS,
  780               2 NUM_ENTRIES UBIN WORD,
  781                          /* Number of folders to be searched */
  782               2 DCB# (0:10) UBIN WORD %INIT(0*11)%CHARTEXT('/**/'),
  783                          /* Number of dcb which points to folder to search */
  784              2 MAP(0:10) UBIN WORD %INIT(0*11)%CHARTEXT('/**/'),
  785                         /* Maps entry numbers to SEARCH_LIST$ in profile */
  786              2 GETDCB#(0:10) UBIN WORD %INIT(0*11)%CHARTEXT('/**/'),
  787                          /* DCB number for this slot (via get dcb) */
  788              2 ACTIVE BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  789                          /* All files are open */
  790              2 GLOBAL BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  791                          /* Global folder exists */
  792              2 CURRENT BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  793                          /* Local folder exists */
  794              2 * BIT(33) UNAL;
  795      %MEND;
  796
  797
  798      /*************************************************************/
  799      /*        Information about the currently open folder        */
  800      /*************************************************************/
  801      %MACRO VM_FOLDER_INFO (NAME=VM_FOLDER_INFO,
  802                             STCLASS=STATIC);
  803      %LSET LISTDIR='0'B;
  804      %LSET STR = CONCAT(TEXTCHAR(STCLASS),'        ');
  805      %IF (SUBSTR(STR,0,6) = 'STATIC') OR
  806          (SUBSTR(STR,0,8) = 'CONSTANT') OR
  807          (SUBSTR(STR,0,3) = 'EXT');
  808        %LSET INIT = CHARTEXT('INIT');
  809      %ELSE;
  810        %LSET INIT = CHARTEXT('/*');
  811      %ENDIF;
  812
  813        DCL 1 NAME STCLASS,
  814             2 PSID CHAR(6) CALIGNED %INIT(' ')%CHARTEXT('/**/'),
14:38 AUG 20 '97 VM_MACRO_C.:VMB6SI                                        23   
  815                        /* Packset on which this folder resides */
  816               2 ACCT CHAR(8) CALIGNED %INIT(' ')%CHARTEXT('/**/'),
  817                          /* Account where this folder resides */
  818               2 FOLDER CHAR(25) CALIGNED %INIT(' ')%CHARTEXT('/**/'),
  819                          /* Name of this folder */
  820               2 PASS CHAR(8) CALIGNED %INIT(' ')%CHARTEXT('/**/'),
  821                          /* Password (if any) of this folder */
  822               2 SITENAME CHAR(8) %INIT(' ')%CHARTEXT('/**/'),
  823                          /* Site where this folder exists */
  824               2 TIME,
  825                          /* Various times of interest */
  826                    3 ACCESS UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  827                          /* Time that this file was last accessed */
  828                    3 CREATION UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  829                          /* Time that this file was created */
  830                    3 MODIFY UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  831                          /* Time that this file was last modified */
  832               2 NRECS UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  833                          /* Number of records in this file */
  834               2 UGRANS UBIN WORD %INIT(0)%CHARTEXT('/**/'),
  835                          /* Number of granules currently in use */
  836               2 FLAGS,
  837                    3 UPDATE BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  838                          /* May the user UPDATE or just READ this folder */
  839                    3 OWNER BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  840                          /* Is current user OWNER of this folder? */
  841                    3 ACCT_SPEC BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  842                          /* Was a account specified in the address? */
  843                    3 FOLDER_SPEC BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  844                          /* Was a folder specified in the address? */
  845                    3 SITENAME_SPEC BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  846                          /* Was a sitename specified in the address? */
  847                    3 OPEN BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  848                          /* Has this folder been opened? */
  849                    3 RESERVED BIT(30) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  850               2 USER_NAME,
  851                          /* Name that got us to this folder */
14:38 AUG 20 '97 VM_MACRO_C.:VMB6SI                                        24   
  852                    3 COUNT UBIN BYTE CALIGNED %INIT(0)%CHARTEXT('/**/'),
  853                    3 TEXT CHAR(200) CALIGNED %INIT(' ')%CHARTEXT('/**/');
  854      %MEND;
  855
  856
  857
  858
  859      /**************************************************************/
  860      /*         Key structure for the ENCLOSURE record             */
  861      /**************************************************************/
  862      %MACRO VM_ENCLKEY (NAME=VM_ENCLKEY,
  863                         STCLASS=STATIC);
  864      %LSET LISTDIR='0'B;
  865      %LSET STR = CONCAT(TEXTCHAR(STCLASS),'        ');
  866      %IF (SUBSTR(STR,0,6) = 'STATIC') OR
  867          (SUBSTR(STR,0,8) = 'CONSTANT') OR
  868          (SUBSTR(STR,0,3) = 'EXT');
  869        %LSET INIT = CHARTEXT('INIT');
  870      %ELSE;
  871        %LSET INIT = CHARTEXT('/*');
  872      %ENDIF;
  873
  874        DCL 1 NAME STCLASS,
  875               2 COUNT UBIN BYTE CALIGNED %INIT(9)%CHARTEXT('/**/'),
  876               2 TYPE UBIN BYTE CALIGNED %INIT(%VM_TYPE_ENCL)%CHARTEXT('/**/'),
  877                      /* This type specifies a ENCL record. This is equal to
  878                          %VM_TYPE_ENCL + then enclosure number. The range is
  879                          fro 101 to 199. */
  880               2 MESSAGE_NUMBER UBIN WORD CALIGNED %INIT(0)%CHARTEXT('/**/'),
  881                      /* Number of this message */
  882               2 REC_NUMBER UBIN WORD CALIGNED %INIT(0)%CHARTEXT('/**/');
  883                      /* The record number within the particular enclosure */
  884
  885
  886      %MEND;
  887      /**************************************************************/
  888      /*              Binary enclosure information                  */
14:38 AUG 20 '97 VM_MACRO_C.:VMB6SI                                        25   
  889      /**************************************************************/
  890      %MACRO VM_ENCLOS (NAME=VM_ENCLOS,
  891                         STCLASS=STATIC);
  892      %LSET LISTDIR='0'B;
  893      %LSET STR = CONCAT(TEXTCHAR(STCLASS),'        ');
  894      %IF (SUBSTR(STR,0,6) = 'STATIC') OR
  895          (SUBSTR(STR,0,8) = 'CONSTANT') OR
  896          (SUBSTR(STR,0,3) = 'EXT');
  897        %LSET INIT = CHARTEXT('INIT');
  898      %ELSE;
  899        %LSET INIT = CHARTEXT('/*');
  900      %ENDIF;
  901
  902        DCL 1 NAME STCLASS,
  903               2 NEXT$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  904                           /* Ptr to next entry on list */
  905               2 PREV$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/'),
  906                           /* Ptr to previous entry on list */
  907               2 FLAGS,
  908                 3 DELETED BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  909                           /* Set if this enclosure is deleted */
  910                 3 FORWARD BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  911                           /* Set if this encl. is from a fwd mailgram */
  912                 3 RESERVED BIT(34) UNAL %INIT('0'B)%CHARTEXT('/**/'),
  913                           /* Misc flags for future use */
  914               2 RESERVED (0:5) UBIN WORD %INIT(0*0)%CHARTEXT('/**/'),
  915                           /* Reserved for future use */
  916               2 NRECS UBIN WORD WALIGNED %INIT(0)%CHARTEXT('/**/'),
  917                           /* Number of records in this enclosure */
  918               2 TYPE UBIN BYTE  CALIGNED %INIT(0)%CHARTEXT('/**/'),
  919                           /* Type, 101-199, of the record */
  920               2 TITLE$ PTR %INIT(ADDR(NIL))%CHARTEXT('/**/');
  921                           /* Pointer to title string */
  922      %MEND;
  923
  924      %EQU VM_ENCLLIST_ENTRY_SIZE = 74;
  925                           /* Maximum number of words in VM_ENCLOS */
14:38 AUG 20 '97 VM_MACRO_C.:VMB6SI                                        26   
  926
  927
  928      /**************************************************************/
  929      /*              Message selection criteria information        */
  930      /**************************************************************/
  931      %MACRO VM_SELECT (NAME=VM_SELECT,
  932                         STCLASS=STATIC);
  933      %LSET LISTDIR='0'B;
  934      %LSET STR = CONCAT(TEXTCHAR(STCLASS),'        ');
  935      %IF (SUBSTR(STR,0,6) = 'STATIC') OR
  936          (SUBSTR(STR,0,8) = 'CONSTANT') OR
  937          (SUBSTR(STR,0,3) = 'EXT');
  938        %LSET INIT = CHARTEXT('INIT');
  939      %ELSE;
  940        %LSET INIT = CHARTEXT('/*');
  941      %ENDIF;
  942
  943        DCL 1 NAME STCLASS,
  944               2 ERROR,
  945                  3 FCG BIT(12) UNAL,
  946                  3 MID BIT(6) UNAL,
  947                  3 MON BIT(1) UNAL,
  948                  3 ERR# UBIN (14) UNAL,
  949                  3 SEV UBIN(3) UNAL,
  950                             /* Error code returned from VMS$SELECT. */
  951               2 ERR_POS# UBIN WORD;
  952                             /* Position where the error was found. */
  953      %MEND;
  954
  955
  956      /**************************************************************/
  957      /*              Selection Context information                 */
  958      /**************************************************************/
  959      %MACRO VM_CONTEXT (NAME=VM_CONTEXT,
  960                         STCLASS=BASED);
  961      %LSET LISTDIR='0'B;
  962      %LSET STR = CONCAT(TEXTCHAR(STCLASS),'        ');
14:38 AUG 20 '97 VM_MACRO_C.:VMB6SI                                        27   
  963      %IF (SUBSTR(STR,0,6) = 'STATIC') OR
  964          (SUBSTR(STR,0,8) = 'CONSTANT') OR
  965          (SUBSTR(STR,0,3) = 'EXT');
  966        %LSET INIT = CHARTEXT('INIT');
  967      %ELSE;
  968        %LSET INIT = CHARTEXT('/*');
  969      %ENDIF;
  970
  971        DCL 1 NAME STCLASS,
  972               2 MESSAGE_POINTER SBIN WORD,
  973                             /* Number of message currently being processed */
  974               2 TRUTH_TREE$ PTR,
  975                             /* Ptr to parse tree that contains TRUTH EXPRESSION */
  976               2 NUM_ENTRIES UBIN WORD,
  977                             /* Number of entries in the MESSAGE SET */
  978               2 SET_INDX SBIN WORD,
  979                             /* Which MESSAGE SET range is currently active? */
  980               2 FLAGS,
  981                  3 INVERSE BIT(1) UNAL,
  982                             /* Backwards? YES/NO. Default=NO */
  983                  3 NEXT BIT(1) UNAL,
  984                             /* Pickup the NEXT message only */
  985                  3 PREV BIT(1) UNAL,
  986                             /* Pickup the PREVIOUS message only */
  987                  3 RESERVED BIT(33) UNAL,
  988               2 MESSAGE_SET (0:0),
  989                  3 LOW SBIN WORD,
  990                             /* Low number in the range specification */
  991                  3 HIGH SBIN WORD;
  992                             /* High number in the range specification */
  993      %MEND;
  994
  995
  996      /****************************************************************/
  997      /*                  Site information                            */
  998      /****************************************************************/
  999      /* This macro defines the site infomation for this mail and is
14:38 AUG 20 '97 VM_MACRO_C.:VMB6SI                                        28   
 1000           used internally by mail to keep track of the sender system
 1001           and recepient */
 1002      %MACRO VM_SITE (NAME=VM_SITE,
 1003                         STCLASS=STATIC);
 1004      %LSET LISTDIR='0'B;
 1005      %LSET STR = CONCAT(TEXTCHAR(STCLASS),'        ');
 1006      %IF (SUBSTR(STR,0,6) = 'STATIC') OR
 1007          (SUBSTR(STR,0,8) = 'CONSTANT') OR
 1008          (SUBSTR(STR,0,3) = 'EXT');
 1009        %LSET INIT = CHARTEXT('INIT');
 1010      %ELSE;
 1011        %LSET INIT = CHARTEXT('/*');
 1012      %ENDIF;
 1013
 1014        DCL 1 NAME STCLASS,
 1015               2 FLAGS,
 1016                   3 RETURN_TO_ORIGIN BIT(1) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1017                       /* Receiver should "become" new ORIGIN site.
 1018                          Used in ANSWER cases */
 1019                   3 RESERVED BIT(35) UNAL %INIT('0'B)%CHARTEXT('/**/'),
 1020               2 NUM_SITES UBIN WORD %INIT(0)%CHARTEXT('/**/'),
 1021                    /* How many sites have received this message so far */
 1022               2 ORIGIN CHAR(8) CALIGNED %INIT(' ')%CHARTEXT('/**/'),
 1023                    /* Where did this message originate? */
 1024               2 RECEIVER_SITE (0:25) CHAR(8) CALIGNED;
 1025                    /* Contains the siteids (as known to sender) where
 1026                       this message has been sent. Used to detect loops */
 1027      %MEND;
 1028
 1029
 1030      /**************************************************************/
 1031      /*              Inter-program communication buffer            */
 1032      /**************************************************************/
 1033      /* This macro generates the structure for the comgroup communication
 1034         buffer between send and mailman on the mailcg. */
 1035      %MACRO VM_CGBUFFER (NAME=VM_CGBUFFER,
 1036                         STCLASS=STATIC,
14:38 AUG 20 '97 VM_MACRO_C.:VMB6SI                                        29   
 1037                         SIZE=8);
 1038      %LSET LISTDIR='0'B;
 1039      %LSET STR = CONCAT(TEXTCHAR(STCLASS),'        ');
 1040      %IF (SUBSTR(STR,0,6) = 'STATIC') OR
 1041          (SUBSTR(STR,0,8) = 'CONSTANT') OR
 1042          (SUBSTR(STR,0,3) = 'EXT');
 1043        %LSET INIT = CHARTEXT('INIT');
 1044      %ELSE;
 1045        %LSET INIT = CHARTEXT('/*');
 1046      %ENDIF;
 1047
 1048        DCL 1 NAME STCLASS,
 1049               2 STATION# CHAR(8) CALIGNED %INIT(' ')%CHARTEXT('/**/'),
 1050               2 COMMAND SBIN WORD CALIGNED %INIT(0)%CHARTEXT('/**/'),
 1051               2 FOLDER,
 1052                  3 COUNT UBIN BYTE CALIGNED %INIT(0)%CHARTEXT('/**/'),
 1053                  3 TEXT CHAR(25) CALIGNED %INIT(' ')%CHARTEXT('/**/'),
 1054               2 * SBIN HALF CALIGNED %INIT(0)%CHARTEXT('/**/'),
 1055               2 ACCT CHAR(8) CALIGNED %INIT(' ')%CHARTEXT('/**/'),
 1056               2 * CHAR(24) CALIGNED %INIT(' ')%CHARTEXT('/**/'),
 1057               2 FILE_NAME,
 1058                  3 COUNT UBIN BYTE CALIGNED %INIT(0)%CHARTEXT('/**/'),
 1059                  3 TEXT CHAR(31) CALIGNED %INIT(' ')%CHARTEXT('/**/'),
 1060               2 ERROR ,
 1061                    /* Error code returned by MAILMAN */
 1062                  3 FCG BIT(12) UNAL,
 1063                  3 MID BIT(6) UNAL,
 1064                  3 MON BIT(1) UNAL,
 1065                  3 ERR# UBIN(14) UNAL,
 1066                  3 SEV UBIN(3) UNAL,
 1067               2 * CHAR(36) CALIGNED %INIT(' ')%CHARTEXT('/**/');
 1068      %MEND;
 1069      /**************************************************************/
 1070      /*         PROFILE resource                                   */
 1071      /**************************************************************/
 1072      %MACRO VM_PRORES (NAME=VM_PRORES,
 1073                          RES='PROFILE',
14:38 AUG 20 '97 VM_MACRO_C.:VMB6SI                                        30   
 1074                         STCLASS=STATIC);
 1075      %LSET LISTDIR='0'B;
 1076      %LSET STR = CONCAT(TEXTCHAR(STCLASS),'        ');
 1077      %IF (SUBSTR(STR,0,6) = 'STATIC') OR
 1078          (SUBSTR(STR,0,8) = 'CONSTANT') OR
 1079          (SUBSTR(STR,0,3) = 'EXT');
 1080        %LSET INIT = CHARTEXT('INIT');
 1081      %ELSE;
 1082        %LSET INIT = CHARTEXT('/*');
 1083      %ENDIF;
 1084
 1085        DCL 1 NAME STCLASS,
 1086               2 COUNT UBIN BYTE CALIGNED %INIT(SIZEC(RES))%CHARTEXT('/**/'),
 1087               2 RES# CHAR(0) %INIT(RES)%CHARTEXT('/**/');
 1088      %MEND;
 1089
 1090
 1091      /**************************************************************/
 1092      /*         HEADER resource                                   */
 1093      /**************************************************************/
 1094      %MACRO VM_HEADRES (NAME=VM_HEADRES,
 1095                         STCLASS=STATIC);
 1096      %LSET LISTDIR='0'B;
 1097      %LSET STR = CONCAT(TEXTCHAR(STCLASS),'        ');
 1098      %IF (SUBSTR(STR,0,6) = 'STATIC') OR
 1099          (SUBSTR(STR,0,8) = 'CONSTANT') OR
 1100          (SUBSTR(STR,0,3) = 'EXT');
 1101        %LSET INIT = CHARTEXT('INIT');
 1102      %ELSE;
 1103        %LSET INIT = CHARTEXT('/*');
 1104      %ENDIF;
 1105
 1106        DCL 1 NAME STCLASS,
 1107               2 COUNT UBIN BYTE CALIGNED %INIT(4)%CHARTEXT('/**/'),
 1108               2 RES# UBIN WORD UNAL %INIT(0)%CHARTEXT('/**/');
 1109      %MEND;
 1110
14:38 AUG 20 '97 VM_MACRO_C.:VMB6SI                                        31   
 1111      /* This macro invokes code to initialize an ERRMSG string and
 1112         optionally set F_FDS.FMT_, FPT_PROMPT.PROMPT_ or NEXT_CMD
 1113      */
 1114      %MACRO INIT_STR (STR=STR, CODE=CODE, VECT=, NEXT_CMD=, DODCL(NO=0,YES=1)=0,TEST(NO=0,YES=1)=0);
 1115      %LSET LISTDIR='0'B;
 1116      %if DODCL=1;
 1117      dcl VMD$ERRMSG entry(3) altret;
 1118      %else;
 1119      do;
 1120      %if TEST=1;
 1121         if STR.NAME# = ' ' then
 1122         do;
 1123             call VMD$ERRMSG (CODE, STR, VECT);
 1124         end;
 1125      %if lengthc(textchar(VECT)) > 0;
 1126              else VECT = vector( substr(STR.NAME#,,STR.L#));
 1127      %endif;
 1128      %else;
 1129         call VMD$ERRMSG(CODE, STR, VECT);
 1130      %endif;
 1131      %if lengthc( textchar(NEXT_CMD) ) > 0;
 1132         NEXT_CMD = STR;
 1133      %endif;
 1134      end;
 1135      %endif;
 1136      %MEND;
 1137      /*
 1138         EQUs for assigning values from ACTUAL_ROOTS back to variables
 1139         for passing to the parser.
 1140      */
 1141      %EQU NUM_NODES = 30;
 1142      %EQU NUM_LANGUAGES = 5;
 1143      %EQU PN_MAIL_NODES = 0;
 1144      %EQU PN_MAIL_CMD = 1;
 1145      %EQU PN_MODIFY_LIST = 2;
 1146      %EQU PN_MODIFY_USER = 3;
 1147      %EQU PN_OPT_ADDRESS = 4;
14:38 AUG 20 '97 VM_MACRO_C.:VMB6SI                                        32   
 1148      %EQU PN_OPT_MID = 5;
 1149      %EQU PN_OPT_FOLDER = 6;
 1150      %EQU PN_OPT_ACCT= 7;
 1151      %EQU PN_OPT_PASS = 8;
 1152      %EQU PN_OPT_SITE = 9;
 1153      %EQU PN_OPT_NAME = 10;
 1154      %EQU PN_OPT_NAME_DI = 11;
 1155      %EQU PN_OPT_UNAME = 12;
 1156      %EQU PN_SEND_NODES = 13;
 1157      %EQU PN_PRIVILEGED_NODES = 14;
 1158      %EQU PN_SEND_CMD = 15;
 1159      %EQU PN_CMD_TO = 16;
 1160      %EQU PN_CMD_SUBJECT = 17;
 1161      %EQU PN_CMD_BODY = 18;
 1162      %EQU PN_CMD_RTO = 19;
 1163      %EQU PN_CMD_REF = 20;
 1164      %EQU PN_CMD_COPY = 21;
 1165      %EQU PN_CMD_BC = 22;
 1166      %EQU PN_CMD_DEFER = 23;
 1167      %EQU PN_CMD_SIGNED = 24;
 1168      %EQU PN_OPTION_NODES = 25;
 1169      %EQU PN_ADDRESS_SPEC = 26;
 1170      /********************************************************************/
 1171      /*               Parse node list                                    */
 1172      /********************************************************************/
 1173      /*
 1174         This macro is used to store the addresses of DEFd parse nodes
 1175         used in a program.  A program can have at most %NUM_NODES SYMREFd
 1176         parse nodes.
 1177      */
 1178      %MACRO PARSE_NODES ( STCLASS = STATIC, LEV = 1, NAME = PARSE_NODES,
 1179           N0=NIL,  N1=NIL,  N2=NIL,  N3=NIL,  N4=NIL,  N5=NIL,  N6=NIL,
 1180           N7=NIL,  N8=NIL,  N9=NIL,  N10=NIL, N11=NIL, N12=NIL, N13=NIL,
 1181           N14=NIL, N15=NIL, N16=NIL, N17=NIL, N18=NIL, N19=NIL, N20=NIL,
 1182           N21=NIL, N22=NIL, N23=NIL, N24=NIL, N25=NIL, N26=NIL, N27=NIL,
 1183           N28=NIL, N29=NIL                                               );
 1184
14:38 AUG 20 '97 VM_MACRO_C.:VMB6SI                                        33   
 1185      %LSET LISTDIR='0'B;
 1186      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 1187      %IF (SUBSTR(STR,0,6)='STATIC')OR
 1188          (SUBSTR(STR,0,8)='CONSTANT')OR
 1189          (SUBSTR(STR,0,3)='EXT');
 1190          %LSET INIT=CHARTEXT('INIT');
 1191      %ELSE;
 1192          %LSET INIT=CHARTEXT('/*');
 1193      %ENDIF;
 1194      %LSET EINIT=CHARTEXT('/**/');
 1195
 1196      %IF LEV > 1;
 1197        LEV NAME(0:%(NUM_NODES-1)) ptr aligned %INIT(
 1198                          ADDR(N0),  ADDR(N1),   ADDR(N2),   ADDR(N3),
 1199                          ADDR(N4),  ADDR(N5),   ADDR(N6),   ADDR(N7),
 1200                          ADDR(N8),  ADDR(N9),   ADDR(N10),  ADDR(N11),
 1201                          ADDR(N12), ADDR(N13),  ADDR(N14),  ADDR(N15),
 1202                          ADDR(N16), ADDR(N17),  ADDR(N18),  ADDR(N19),
 1203                          ADDR(N20), ADDR(N21),  ADDR(N22),  ADDR(N23),
 1204                          ADDR(N24), ADDR(N25),  ADDR(N26),  ADDR(N27),
 1205                          ADDR(N28), ADDR(N29)                          )
 1206                          %EINIT;
 1207      %ELSE;
 1208      dcl  NAME (0:%(NUM_NODES-1)) ptr STCLASS aligned %INIT(
 1209                          ADDR(N0),  ADDR(N1),   ADDR(N2),   ADDR(N3),
 1210                          ADDR(N4),  ADDR(N5),   ADDR(N6),   ADDR(N7),
 1211                          ADDR(N8),  ADDR(N9),   ADDR(N10),  ADDR(N11),
 1212                          ADDR(N12), ADDR(N13),  ADDR(N14),  ADDR(N15),
 1213                          ADDR(N16), ADDR(N17),  ADDR(N18),  ADDR(N19),
 1214                          ADDR(N20), ADDR(N21),  ADDR(N22),  ADDR(N23),
 1215                          ADDR(N24), ADDR(N25),  ADDR(N26),  ADDR(N27),
 1216                          ADDR(N28), ADDR(N29)                          )
 1217                          %EINIT;
 1218      %ENDIF;
 1219      %MEND;
 1220      /********************************************************************/
 1221      /*           NATL_PAIRS                                             */
14:38 AUG 20 '97 VM_MACRO_C.:VMB6SI                                        34   
 1222      /********************************************************************/
 1223      /*
 1224          The first array in this macro contains the list of native language
 1225          characters.  The second array contains a list of pointers to the
 1226          corresponding list of parse nodes of each language.
 1227      */
 1228      %MACRO NATL_PAIRS ( STCLASS=STATIC, LEV=1, NAME=NATL_PAIRS, NATL_CHARS=' ', NODES$="ADDR(NIL)*0"  );
 1229
 1230      %LSET LISTDIR='0'B;
 1231      %LSET STR=CONCAT(TEXTCHAR(STCLASS),'        ');
 1232      %IF (SUBSTR(STR,0,6)='STATIC')OR(SUBSTR(STR,0,8)='CONSTANT')OR(SUBSTR(STR,0,3)='EXT');
 1233          %LSET INIT=CHARTEXT('INIT');
 1234      %ELSE;
 1235          %LSET INIT=CHARTEXT('/*');
 1236      %ENDIF;
 1237      %LSET EINIT=CHARTEXT('/**/');
 1238
 1239      %IF LEV > 1;
 1240        LEV NATLS char(%NUM_LANGUAGES) aligned %INIT(NATL_CHARS)%EINIT,
 1241        LEV PARSE_NODES$(0:%(NUM_LANGUAGES-1)) ptr aligned %INIT(NODES$)%EINIT;
 1242      %ELSE;
 1243      dcl  1 NAME  STCLASS aligned,
 1244              2 NATLS char(%NUM_LANGUAGES) aligned %INIT(NATL_CHARS)%EINIT,
 1245              2 PARSE_NODES$(0:%(NUM_LANGUAGES-1)) ptr aligned %INIT(NODES$ )%EINIT;
 1246      %ENDIF;
 1247      %MEND;
 1248
 1249
 1250      /***
 1251       ***    Macro to build the Nodename tables for MAIL and SEND.
 1252       ***
 1253       ***/
 1254
 1255      %MACRO  BUILD_NODENAMES(NAME=,N=,DONE(NO=0,YES=1)=0);
 1256      %lset LISTDIR = '0'b;
 1257
 1258      %if DONE=0;
14:38 AUG 20 '97 VM_MACRO_C.:VMB6SI                                        35   
 1259      %lset   NM = textchar(NAME);
 1260      %lset   LN = lengthc(NM);
 1261      ,2 * ubin(18) caligned init(N)
 1262      ,2 * ubin(9)  caligned init(%LN)
 1263      ,2 * char(%LN) caligned init(%NM)
 1264      %else;
 1265      ,2 * ubin(27) caligned init(0);
 1266      %endif;
 1267      %MEND;

