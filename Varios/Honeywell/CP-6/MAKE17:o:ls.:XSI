
rPARTRGE version E05  Source listing      22:46:29.96 NOV 20 '97 MAKE_OU17                              1    
A        1        1        /*M* MAKE -- Command syntax                                      */
A        2        2        /*T***********************************************************/
A        3        3        /*T*                                                         */
A        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
A        5        5        /*T*                                                         */
A        6        6        /*T***********************************************************/
A        7        7        /*
A        8        8             Make accepts the following commands:
A        9        9
A       10       10             name     =  stuff
A       11       11             namelist :  namelist
A       12       12              commands
A       13       13
A       14       14        */
A       15       15        MAKECOMMAND   (DEF) = (COMMENT    | ACTIONDEFN | STRINGDEFN |   ;
A       16       16                               RULEDEFN   | EMAILDEFN  | CPP              )
A       17       17
A       18       18        PARSECOMMAND  (DEF) = .asym+'$'- ( .e                             | ;
A       19       19                                           SIMPLE-        PARSECOMMAND-   | ;
A       20       20                                           '${' SPECIAL '}'- PARSECOMMAND | ;
A       21       21                                           '$(' SPECIAL ')'- PARSECOMMAND )
A       22       22
A       23       23        SRCH          (DEF) =  ( FID1 | FIDLISTS )
A       24       24
A       25       25        INVOKATION    (DEF) =  <',',INVOKE> .e
A       26       26
A       27       27        FIDLISTS            =  '(' FIDLIST ')'  [.b FIDLISTS] .e
A       28       28        FIDLIST       (56)  =  <',',.FID>
A       29       29        FID1          (57)  =  .FID
A       30       30
A       31       31
A       32       32        SPECIAL             = ( SPECIALS | NAME ) [REPLACEMENT]
A       33       33
A       34       34        REPLACEMENT         =  ':'-   STRING1- '='- STRING2-
A       35       35        STRING1      (50)   =  .asym+'='-
A       36       36        STRING2      (51)   =  .asym+')'-
A       37       37
rPARTRGE version E05  Source listing      22:46:29.96 NOV 20 '97 MAKE_OU17                              2    
A       38       38
A       39       39        SPECIALS            =  (SPECLONG | SPECNAMES)
A       40       40
A       41       41        NAME          (1)   =  .alpha+'0123456789_-.$?*#200'
A       42       42        NAMELIST      (2)   =  <[','],NAME>
A       43       43
A       44       44        SPECNAMES           =  (  CHANGE_NAMES      |  PREDECESSOR_TREE  | ;
A       45       45                                  ARCHIVE_NAME      |  SINGLE_DOLLAR     | ;
A       46       46                                  NO_SUFFIX_NAME    |  SI_NAME           | ;
A       47       47                                  OU_NAME           |  LS_NAME           | ;
A       48       48                                  DO_NAME           |  DEPENDENT_NAMES      )
A       49       49
A       50       50        SPECLONG            =  (  NO_SUFFIX_FILE    |  SI_FILE           | ;
A       51       51                                  OU_FILE           |  LS_FILE           | ;
A       52       52                                  DO_FILE                                | ;
A       53       53                                  NO_SUFFIX_ACCT    |  SI_ACCT           | ;
A       54       54                                  OU_ACCT           |  LS_ACCT           | ;
A       55       55                                  DO_ACCT                                | ;
A       56       56                                  DYN_OU_NAME       |  DYN_OU_FILE       | ;
A       57       57                                  DYN_OU_ACCT                               )
A       58       58
A       59       59        CHANGE_NAMES     (2)   =  '?'-
A       60       60        PREDECESSOR_TREE (3)   =  '!'-
A       61       61        ARCHIVE_NAME     (4)   =  '%'-
A       62       62        SINGLE_DOLLAR    (5)   =  '$'-
A       63       63        NO_SUFFIX_NAME   (6)   =  '*'-
A       64       64        SI_NAME          (7)   =  '<'-
A       65       65        OU_NAME          (8)   =  '@'-
A       66       66        LS_NAME          (9)   =  '&'-
A       67       67        DO_NAME         (10)   =  '+'-
A       68       68        NO_SUFFIX_FILE  (11)   =  '*F'
A       69       69        SI_FILE         (12)   =  '<F'
A       70       70        OU_FILE         (13)   =  '@F'
A       71       71        LS_FILE         (14)   =  '&F'
A       72       72        DO_FILE         (15)   =  '+F'
A       73       73        NO_SUFFIX_ACCT  (16)   =  '*D'
A       74       74        SI_ACCT         (17)   =  '<D'
rPARTRGE version E05  Source listing      22:46:29.96 NOV 20 '97 MAKE_OU17                              3    
A       75       75        OU_ACCT         (18)   =  '@D'
A       76       76        LS_ACCT         (19)   =  '&D'
A       77       77        DO_ACCT         (20)   =  '+D'
A       78       78        DYN_OU_NAME     (21)   =  '$$@'
A       79       79        DYN_OU_FILE     (22)   =  '$$(@F)'-
A       80       80        DYN_OU_ACCT     (23)   =  '$$(@D)'-
A       81       81        DEPENDENT_NAMES (24)   =  '^'-
A       82       82
A       83       83        SIMPLE              =  '$'- ( SPECNAMES- | SIMPLE_NAME- | IGNORE_NAME-)
A       84       84        SIMPLE_NAME   (1)   =  .alpha1+'0123456789_-'-
A       85       85        IGNORE_NAME   (49)  =  .alpha+'0123456789_!"%&''-=^~\|@,.:;*+/?><#200'-
A       86       86
A       87       87
A       88       88
A       89       89        STRINGDEFN    (1)   =  NAME '=' PARSECOMMAND             .e
A       90       90        RULEDEFN      (2)   =  NAMELIST ':' [.b NAMELIST] [COMMENT] .e
A       91       91        ACTIONDEFN    (3)   =  .B .asym+'#'-           [COMMENT] .e
A       92       92        COMMENT       (4)   =  ( '#' .asym .e | .e )
A       93       93        EMAILDEFN     (5)   =  NAMELIST ':=' [.b NAMELIST] [COMMENT] .e
A       94       94
A       95       95        CPP           =  (     INCLUDE                               ;
A       96       96                            |  IF       | ELIF   | ELSE   | ENDIF    ;
A       97       97                            |  ERROR    | PRINT                      ;
A       98       98                         )
A       99       99
A      100      100        INCLUDE  (6)  =  ':' '=include'    filename    [COMMENT]   .e
A      101      101        filename      =  (  barefid  |  bracefid  | quotefid )
A      102      102        bracefid      =  '<' barefid '>'
A      103      103        quotefid      =  '"' barefid '"'
A      104      104        barefid  (6)  =  .fid
A      105      105
A      106      106        IF       (7)  =  ':' '=if'         expression  [COMMENT]   .e
A      107      107        ELIF     (8)  =  ':' '=elif'       expression  [COMMENT]   .e
A      108      108        ELSE     (9)  =  ':' '=else'                   [COMMENT]   .e
A      109      109        ENDIF   (10)  =  ':' '=endif'                  [COMMENT]   .e
A      110      110
A      111      111        ERROR   (11)  =  ':' '=error'      < ',', expression >     .e
rPARTRGE version E05  Source listing      22:46:29.96 NOV 20 '97 MAKE_OU17                              4    
A      112      112        PRINT   (12)  =  ':' '=print'      < ',', expression >     .e
A      113      113
A      114      114
A      115      115
A      116      116        INVOKE     =  (SI | UI | OU | OPTIONS)
A      117      117
A      118      118        SI         =  'SI' '=' ( SIF | '(' SIF [ ',' UIF [',' IGNOREF ]] ')' )
A      119      119        IGNOREF    =  <',', SKF>
A      120      120        UI         =  'UI' '=' UIF
A      121      121        OU         =  'OU' '=' OUF
A      122      122        SIF  (2)   = .fid
A      123      123        UIF  (3)   = .fid
A      124      124        OUF  (4)   = .fid
A      125      125        SKF  (5)   = .fid
A      126      126
A      127      127        OPTIONS    =  '('    <',',OPTS>    ')'
A      128      128        OPTS       = (VAR|TEST|BUILD|STOP|WARN|NWARN|LS|NLS|NVERB|VERB|DEBUG)
A      129      129
A      130      130        TEST (10)  =  'T/EST'
A      131      131        BUILD(11)  =  'B/UILD'
A      132      132        STOP (12)  =  'S/TOP'
A      133      133        WARN (13)  =  'WARN'
A      134      134        NWARN(14)  =  'N/O' 'W/ARN'
A      135      135        LS   (15)  =  'L'-  ['I'-]  'S/T'
A      136      136        NLS  (16)  =  'N/O' 'L'- ['I'-] 'S/T'
A      137      137        NVERB(17)  =  'N/O' 'V/ERBOSE'
A      138      138        VERB (18)  =  'V/ERBOSE'
A      139      139        DEBUG(19)  =  'DEB/UG'
A      140      140
A      141      141        VAR        =  NAME '=' (VAL1 | VAL2)
A      142      142        VAL1 (20)  =  .ALPHA+'0123456789_#$-'
A      143      143        VAL2 (20)  =  .QUOTE
A      144      144
A      145      145
A      146      146        /*      Expressions:
A      147      147
A      148      148             The evaluation of expressions is performed by building a single
rPARTRGE version E05  Source listing      22:46:29.96 NOV 20 '97 MAKE_OU17                              5    
A      149      149             list of operands and operations.  The higher precedence functions
A      150      150             are indicated by a lower code value.  The highest precedence item
A      151      151             is the end of the statement, followed by primarys, unaries,
A      152      152             the multiplicative functions, the additive functions, the shift
A      153      153             functions, the relational functions, the equality functions,
A      154      154             the and function, the exclusive or function, the or function,
A      155      155             the double and function, the double or function and closing
A      156      156             parenthesis.  The precedence is obtained by dividing the code
A      157      157             by 8.
A      158      158        */
A      159      159
A      160      160        expression (D,9) =  binary
A      161      161
A      162      162        primary          =  ( constant | quotes | string | identifier )
A      163      163
A      164      164        constant   (16)  =  .dec
A      165      165        quotes     (17)  =  .quote4
A      166      166        string     (18)  =  .dstring+'"'
A      167      167        identifier (19)  =  .anum+'_.$#200'
A      168      168
A      169      169        unary            =  (     monop unary             ;
A      170      170                               |  parenthesis             ;
A      171      171                               |  defined_identifier      ;
A      172      172                               |  sizeof_primary          ;
A      173      173                               |  primary                 ;
A      174      174                            )
A      175      175
A      176      176        monop            =  ( negateop | nullop | notop | complop )
A      177      177        negateop   (24)  =  '-'
A      178      178        nullop     (25)  =  '+'
A      179      179        notop      (26)  =  '!'
A      180      180        complop    (27)  =  '~'
A      181      181
A      182      182        parenthesis(9)   =  '(' binary ')'
A      183      183
A      184      184        defined_identifier (30)   =  (     'defined'     identifier         ;
A      185      185                                        |  'defined' '(' identifier ')'     ;
rPARTRGE version E05  Source listing      22:46:29.96 NOV 20 '97 MAKE_OU17                              6    
A      186      186                                     )
A      187      187
A      188      188        sizeof_primary     (31)   =  (     'sizeof'      string             ;
A      189      189                                        |  'sizeof'  '(' string     ')'     ;
A      190      190                                        |  'sizeof'      identifier         ;
A      191      191                                        |  'sizeof'  '(' identifier ')'     ;
A      192      192                                     )
A      193      193
A      194      194        binary           =  unary [ binop binary ]
A      195      195
A      196      196        binop            =  ( loglexprop | arithop | relop | eqop )
A      197      197
A      198      198        loglexprop       =  ( andandop | ororop )
A      199      199        andandop   (96)  =  '&&'
A      200      200        ororop     (104) =  '||'
A      201      201
A      202      202        arithop          =  ( multop | addop | shiftop | loglop )
A      203      203        multop           =  ( multiplyop | divideop | modop )
A      204      204        multiplyop (32)  =  '*'
A      205      205        divideop   (33)  =  '/'
A      206      206        modop      (34)  =  '%'
A      207      207
A      208      208        addop            =  (additionop | subtractop)
A      209      209        additionop (40)  =  '+'
A      210      210        subtractop (41)  =  '-'
A      211      211
A      212      212        shiftop          =  ( leftshop  | rightshop )
A      213      213        leftshop   (48)  =  '<<'
A      214      214        rightshop  (49)  =  '>>'
A      215      215
A      216      216        loglop           =  ( andop | xorop | orop )
A      217      217        andop      (72)  =  '&'
A      218      218        xorop      (80)  =  '^'
A      219      219        orop       (88)  =  '|'
A      220      220
A      221      221        relop            =  ( lesseqop | greateqop | lessop | greatop )
A      222      222        lessop     (56)  =  '<'
rPARTRGE version E05  Source listing      22:46:29.96 NOV 20 '97 MAKE_OU17                              7    
A      223      223        greatop    (57)  =  '>'
A      224      224        lesseqop   (58)  =  '<='
A      225      225        greateqop  (59)  =  '>='
A      226      226
A      227      227        eqop             =  ( equalsop  | nequalsop )
A      228      228        equalsop   (64)  =  '==='
A      229      229        nequalsop  (65)  =  '!='
A      230      230
P
rPARTRGE version E05  Source listing      22:46:29.96 NOV 20 '97 MAKE_OU17                              8    
A
A
A         No errors,  no PREFs in MAKECOMMAND
A
