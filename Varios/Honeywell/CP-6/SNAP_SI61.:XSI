/*M* SNAP - Takes a snapshot and optionally sua's user(s) */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
SNAP: PROC MAIN;
 
      DCL JIT$                         PTR;
      DCL BLK$                         PTR;
      DCL I                            UBIN;
      DCL TEMP                         SBIN;
      DCL SUA#                         BIT(1)    ALIGNED;
 
      DCL M$LO                         DCB;
      DCL LO_BUFFER                    CHAR(80)  STATIC;
 
      DCL NO_PRIV_FMT                  CHAR(0)   STATIC
            INIT('You must have EXMM privilege on');
      DCL USER_FMT                     CHAR(0)   STATIC
            INIT('Dump file for user number .%O is %T%S.:SYSTAC');
      DCL SYSID_FMT                    CHAR(0)   STATIC
            INIT('Dump file for sysid %D is %T%S.:SYSTAC');
      DCL SYNTAX_FMT                   CHAR(0)   STATIC
            INIT('   Syntax: !SNAP {.user[,.user]...|sysid[,sysid]...} [[,] SUA]');
 
      DCL B$IS$                        PTR       SYMREF;
      DCL B$JIT$                       PTR       SYMREF;
      DCL B$TCB$                       PTR       SYMREF;
      DCL B$USRT$                      PTR       SYMREF;
      DCL SNAP_CMD                     SBIN      SYMREF;
 
      DCL DAM$INIT                     ENTRY     ALTRET;
      DCL DAM$MAP                      ENTRY(5)  ALTRET;
 
 
%EJECT;
      %INCLUDE CP_6;
      %INCLUDE B$JIT;
      %INCLUDE B$MAP;
      %INCLUDE B$USER;
      %INCLUDE B_SEGIDS_C;
      %INCLUDE DA_MAP_R;
      %INCLUDE XUF_ENTRY;
      %INCLUDE XUR_ENTRY;
      %INCLUDE XU_MACRO_C;
      %INCLUDE SS_SCHED_C;
      %INCLUDE XU_FORMAT_C;
      %INCLUDE B_STRINGS_C;
 
      %F_FDS (BUF=LO_BUFFER,
              DCB=M$LO);
      %B$TCB;
      %B$ALT;
      %F$DCB;
      %PARSE$OUT;
      %PARSE$SYM;
      %XUR_INIT (COMMANDS=NO);
 
      %FPT_CVM;
      %FPT_EXIT (STEPCC=4);
      %VLP_NAME (LEN=31);
      %FPT_SCREECH (SCODE=VLP_SCODE, SCREECHID=VLP_NAME);
      %VLR_SITEINFO;
      %FPT_MONINFO (SITEINFO=VLR_SITEINFO);
 
%EJECT;
/*
**
**    These parameters specify what gets dumped in the snapshot.
**    They may be altered to fit specific needs, the parameters
**    here will dump the specified user and most monitor data.
*/
%VLP_SCODE (STCLASS="STATIC SYMDEF",
            ALLUSR=NO,
            ASAVE=YES,
            ASLSEG=YES,
            AUSER=YES,
            CFUS=YES,
            CGDATA=YES,
            CODE=0,
            CPSEG=YES,
            CURCG=YES,
            CUSR=NO,
            CUSRS=NO,
            CWSPT=YES,
            DBSEG=YES,
            DDSEG=YES,
            ENQ=YES,
            FCG='SN',
            FMBUF=YES,
            IOUSRS=NO,
            ISEG=YES,
            LDCTS=YES,
            LRM=YES,
            MID='P',
            MON=NO,
            PMDATA=YES,
            PMST=YES,
            PPUT=YES,
            ROSEG=YES,
            SEV=SEV_SNAP,
            SHJIT=YES,
            SPBUF=YES,
            USER=0); /* USER to be filled in at run-time */
 
%EJECT;
      CALL XUR$INIT (XUR_INIT);
      CALL DAM$INIT
         WHENALTRETURN DO;
            CALL XUR$ERRMSG (DA_MAPERR);
            CALL M$EXIT (FPT_EXIT);
            END;
 
      TEMP=B$JIT.CCARS;
      CALL XUR$GETCMD (SNAP_CMD,BLK$,,B$JIT.CCBUF,TEMP) ALTRET(CMD_ERR);
 
      IF NOT (B$JIT.PRIV.ACTIVE & %PR_EXMM#) THEN
         DO;
            CALL X$WRITE (F_FDS, VECTOR(NO_PRIV_FMT));
            CALL M$EXIT (FPT_EXIT);
            END;
 
      SUA# = '0'B;
      IF BLK$->OUT$BLK.NSUBLKS = 3 THEN SUA# = '1'B;
 
      BLK$=OUT$BLK.SUBLK$(1);
      DO CASE(OUT$BLK.CODE);
         CASE(1);                    /* USER#        */
            DO I=0 TO OUT$BLK.NSUBLKS-1;
               CALL CVTOCT (TEMP,OUT$BLK.SUBLK$(I)->OUT$BLK);
               CALL DAM$MAP (B$JIT$,JIT$,-TEMP,0)
                  WHENALTRETURN DO;
                     CALL XUR$ERRMSG (DA_MAPERR);
                     GOTO NEXT1;
                     END;
               CALL SNAPSHOT ALTRET (NEXT1);
               CALL X$WRITE (F_FDS, VECTOR(USER_FMT), VECTOR(TEMP), VECTOR(VLP_NAME));
NEXT1:         END;
         CASE(2);                    /* SYSID        */
            DO I=0 TO OUT$BLK.NSUBLKS-1;
               CALL CHARBIN (TEMP,OUT$BLK.SUBLK$(I)->OUT$SYM.TEXT);
               CALL DAM$MAP (B$JIT$,JIT$,TEMP,0)
                  WHENALTRETURN DO;
                     CALL XUR$ERRMSG (DA_MAPERR);
                     GOTO NEXT2;
                     END;
               CALL SNAPSHOT ALTRET (NEXT2);
               CALL X$WRITE (F_FDS, VECTOR(SYSID_FMT), VECTOR(TEMP), VECTOR(VLP_NAME));
NEXT2:         END;
         END;
 
      CALL M$EXIT;
 
CMD_ERR:
      CALL X$WRITE (F_FDS, VECTOR(SYNTAX_FMT));
      CALL M$EXIT (FPT_EXIT);
%EJECT;
SNAPSHOT: PROC ALTRET;
 
      DCL B$CHAR                       CHAR(SZ)  BASED;
      DCL SZ                           UBIN;
      DCL P$                           PTR;
 
      VLP_SCODE.USER# = JIT$->B$JIT.USER;
      CALL M$SCREECH (FPT_SCREECH) ALTRET (ERR); /* Get the snapshot */
 
      IF NOT SUA# THEN RETURN; /* snapshot is enough */
/*
**
**    This will SUA him (hopefully)
*/
      CALL M$MONINFO(FPT_MONINFO) ALTRET(ERR);
      IF VLR_SITEINFO.CPU_TYPE#  = %DPS90XA THEN DO;
         FPT_CVM.V.PPNO# = B$USRT$->B$USER.PT(JIT$->B$JIT.USER);
         END;
      ELSE DO;
         IF VLR_SITEINFO.CPU_TYPE# = %DPS8000 THEN
            FPT_CVM.V.PPNO# = B$USRT$->B$USER.PT(JIT$->B$JIT.USER);
         ELSE
            FPT_CVM.V.PPNO# = B$USRT$->B$USER.PT(JIT$->B$JIT.USER)*64/1024; /* his page table page */
         END;
      FPT_CVM.V.VPNO# = B$JIT.DDLL-64; /* some empty page in my IS */
      CALL M$CVM (FPT_CVM) ALTRET (ERR); /* now we've got his page table... */
      P$ = PINCRW(B$IS$, (B$JIT.DDLL-64)*1024); /* ...and a pointer to it */
      FPT_CVM.V.PPNO# = P$->B$MAP.RPN(11);
      CALL M$CVM (FPT_CVM) ALTRET (ERR); /* now we've got his jit page... */
      P$ = PINCRW(P$, SIZEW(B$JIT)); /* ...and a pointer to his tstack */
      SZ = 4096-SIZEC(B$JIT); /* SZ is size of tstack */
      P$->B$CHAR = ' '; /* Blank out the tstack! */
      RETURN;
 
ERR:  CALL XUR$ERRMSG (B$TCB$->B$TCB.ALT$->B$ALT.ERR);
      ALTRETURN;
 
END SNAPSHOT;
%EJECT;
CVTOCT: PROC (NUM, OUT$SYM);
 
      DCL NUM                          SBIN;
      %PARSE$SYM (STCLASS="");
 
      DCL I                            SBIN;
 
      NUM=0;
      DO I=0 TO OUT$SYM.COUNT-1;
         NUM=NUM*8+ASCBIN(SUBSTR(OUT$SYM.TEXT,I,1))-48;
         END;
      RETURN;
 
END CVTOCT;
 
END SNAP;
