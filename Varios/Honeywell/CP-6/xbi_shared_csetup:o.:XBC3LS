

CC.C02    File=xbi_shared_csetup:c.:XBC3TSI                                         Fri Jan  6 1995  Page=1  
        1         1             /*T***********************************************************/
        2         2             /*T*                                                         */
        3         3             /*T* COPYRIGHT, (C) HONEYWELL BULL INC., 1988                */
        4         4             /*T*                                                         */
        5         5             /*T***********************************************************/
        6         6             /*I* NAME: _XBI_SHARE_CSETUP
        7         7                   PURPOSE: Called from _XBI_CSTARTUP. Parses the command line
        8         8                      opens stdin, stdout, initializes the runtime library and
        9         9                      sets up the arguments to the main function.
       10        10             */
       11        11
       12        12
       13        13             #include <stddef.h>
       14        14             #include <stdio.h>
       15        15             #include <stdlib.h>
       16        16             #include <errno.h>
       17        17             #include <string.h>
       18        18
       19        19             /*    Get all the internal global variables that are used for
       20        20                   access variables that are outside the shared library. */
       21        21
       22        22             extern   FILE  *STDIN_P;
       23        23             extern   FILE  *STDOUT_P;
       24        24             extern   FILE  *STDERR_P;
       25        25             extern   long  *ERRNO_P;
       26        26             extern   unsigned   *XBI$MB_CUR_MAX_P;
       27        27             struct   __lib_com_vector__ *_LIBCOM_DATA;
       28        28
       29        29             /*    Define the structure that contains all the variables that the
       30        30                   C shared library needs to get at from the unshared portion of
       31        31                   the library.                                                  */
       32        32
       33        33             struct   __lib_com_vector__ {
       34        34    1           FILE  *fp1;
       35        35    1           FILE  *fp2;
       36        36    1           FILE  *fp3;
       37        37    1           long  *errno_p;
CC.C02    File=xbi_shared_csetup:c.:XBC3TSI                                         Fri Jan  6 1995  Page=2  
       38        38    1           unsigned    *MB_CUR_MAX_p;
       39        39    1           unsigned    contin_file;
       40        40    1           unsigned    rfu1     :36;
       41        41    1           unsigned    rfu2     :36;
       42        42    1           unsigned    rfu3     :36;
       43        43    1           unsigned    rfu4     :36;
       44        44    1           unsigned    rfu5     :36;
       45        45    1        };
       46        46             static char *C_get_token ( );
       47        47             static char *C_get_value ( );
       48        48             static char *C_make_token ( );
       49        49             static void C_setup_error(char *);
       50        50             static char *C_get_buffer ( );
       51        51
       52        52             static char *cp;
       53        53             static char *pend;
       54        54
       55        55             _XBI_SHARE_CSETUP ( ccars, ccdisp, ccbuf, standard_invocation, contin_line, ar
                               gsn, args)
       56        56              unsigned ccars;
       57        57              unsigned ccdisp;
       58        58              char *ccbuf;
       59        59              int contin_line;
       60        60              int standard_invocation;
       61        61              int argsn;
       62        62              int *args;
       63        63             {
       64        64    1         char *inname;
       65        65    1         char *outname;
       66        66    1         char *outmode;
       67        67    1         unsigned toklen;
       68        68    1         char *str;
       69        69    1         char *start;
       70        70    1         int argc;
       71        71    1         char **argv;
       72        72    1         unsigned maxarg;
       73        73    1         static const   char  error_stdin[] = "can not open stdin";
CC.C02    File=xbi_shared_csetup:c.:XBC3TSI                                         Fri Jan  6 1995  Page=3  
       74        74    1         static const   char  error_stdout[] = "can not open stdout";
       75        75    1         static const   char  dcb_stdin[]  = "dcb=M$SI";
       76        76    1         static const   char  dcb_stdout[] = "dcb=M$LO";
       77        77    1         static const   char  freopen_me[] = "ME";
       78        78    1         static const   char  read_mode[]   = "r";
       79        79    1         static const   char  write_mode[]  = "w";
       80        80    1         static const   char  append_mode[] = "a";
       81        81    1         static const   char  error_out_redirect[] = "Multiple output redirection\n";
       82        82    1         static const   char  error_in_redirect[]  = "Multiple input redirection\n";
       83        83    1
       84        84    1
       85        85    1           STDIN_P = _LIBCOM_DATA->fp1;
       86        86    1           STDOUT_P = _LIBCOM_DATA->fp2;
       87        87    1           STDERR_P = _LIBCOM_DATA->fp3;
       88        88    1           ERRNO_P = _LIBCOM_DATA->errno_p;
       89        89    1           XBI$MB_CUR_MAX_P = _LIBCOM_DATA->MB_CUR_MAX_p;
       90        90    1
       91        91    1         /* now that stderr is defined, we can initialize the file system */
       92        92    1         XBI_INITIALIZE_FILE_SYSTEM ( );
       93        93    1
       94        94    1         /* initialize the random number seed */
       95        95    1
       96        96    1         srand (1);
       97        97    1
       98        98    1         if (standard_invocation)
       99        99    1           { /* CP-6 standard command line invocation */
      100       100    2            if (!freopen (dcb_stdin, read_mode, STDIN_P))
      101       101    2              { perror (error_stdin); exit (7); }
      102       102    2            if (!freopen (dcb_stdout, write_mode, STDOUT_P))
      103       103    2              { perror (error_stdout); exit (7); }
      104       104    2          }
      105       105    1
      106       106    1         maxarg = 10;
      107       107    1         argv = (char **) malloc ( maxarg * sizeof(char *) );
      108       108    1           if (!argv) {
      109       109    2              C_setup_error("Unable to allocate enough memory to process command line
                               options\n");
CC.C02    File=xbi_shared_csetup:c.:XBC3TSI                                         Fri Jan  6 1995  Page=4  
      110       110    2           }
      111       111    1         inname = outname = (char *)NULL;
      112       112    1
      113       113    1         if (contin_line) {
      114       114    2            cp = C_get_buffer ();
      115       115    2            if (!cp) cp = ccbuf;
      116       116    2         }
      117       117    1         else
      118       118    1            cp = ccbuf;
      119       119    1         pend = cp + ccars;
      120       120    1         argc = 0;
      121       121    1         start = cp;
      122       122    1
      123       123    1         /* pickup the first token, the program name */
      124       124    1
      125       125    1         argv[argc++] = C_get_token ( );
      126       126    1
      127       127    1        /* if this is standard invocation we just parse any
      128       128    1         * options in brackets.
      129       129    1         */
      130       130    1
      131       131    1         if (standard_invocation)
      132       132    1          {
      133       133    2           cp = start + ccdisp;
      134       134    2           if ( cp < pend && *cp == '(') {
      135       135    3            start = cp;
      136       136    3            toklen = pend - start; /* include everything after '(' */
      137       137    3            str = (char *) malloc ( toklen + 1 );
      138       138    3           if (!str) {
      139       139    4              C_setup_error("Unable to allocate enough memory to process command line
                               options\n");
      140       140    4           }
      141       141    3            (memcpy)( str, start, toklen );
"xbi_shared_csetup:c.:XBC3TSI", line 141: (warning) macro memcpy needs arguments
      142       142    3            str[toklen] = '\0';
      143       143    3            if( argc >= maxarg-1 ) {
      144       144    4            maxarg += 10;
CC.C02    File=xbi_shared_csetup:c.:XBC3TSI                                         Fri Jan  6 1995  Page=5  
      145       145    4            argv = (char **) realloc( (char *) argv, maxarg * sizeof(char *) );
      146       146    4
      147       147    4             if( argv == (char **)NULL ) {
      148       148    5              C_setup_error("Unable to allocate enough memory to process command line
                               options\n");
      149       149    5              exit( 7 );
      150       150    5             }
      151       151    4            }
      152       152    3            argv [argc++] = str;
      153       153    3           } /* if */
      154       154    2           goto call_main;
      155       155    2          }
      156       156    1
      157       157    1         /* non standard invocation */
      158       158    1
      159       159    1         for(;;) {
      160       160    2          while( cp < pend && isspace( *cp ) ) /* skip whitespace */
      161       161    2           cp++;
      162       162    2
      163       163    2          if( cp >= pend ) /* check for loop termination */
      164       164    2           break;
      165       165    2
      166       166    2          /*
      167       167    2           * Decide if the string is redirection, and either process it,
      168       168    2           * or stuff it into argv.
      169       169    2           */
      170       170    2          switch( *cp ) {
      171       171    3          case '>':
      172       172    3           cp++;
      173       173    3           if( outname != NULL) {
      174       174    4              fprintf (STDERR_P, error_out_redirect );
      175       175    4              exit (7);
      176       176    4           }
      177       177    3           if( *cp == '>' ) {
      178       178    4            cp++;
      179       179    4            outmode = (char *) append_mode;
      180       180    4            outname = C_get_token( );
CC.C02    File=xbi_shared_csetup:c.:XBC3TSI                                         Fri Jan  6 1995  Page=6  
      181       181    4           }
      182       182    3           else {
      183       183    4            outmode = (char *) write_mode;
      184       184    4            outname = C_get_token ( );
      185       185    4           }
      186       186    3           continue;
      187       187    3
      188       188    3          case '<':
      189       189    3           cp++;
      190       190    3           if( inname != NULL ) {
      191       191    4              fprintf (STDERR_P, error_in_redirect );
      192       192    4              exit (7);
      193       193    4           }
      194       194    3           inname = C_get_token ();
      195       195    3           continue;
      196       196    3
      197       197    3          default:
      198       198    3           str = C_get_token ();
      199       199    3           if( argc >= maxarg-1 ) {
      200       200    4            maxarg += 10;
      201       201    4            argv = (char **) realloc( (char *) argv, maxarg * sizeof(char *) );
      202       202    4
      203       203    4            if( argv == (char **)NULL ) {
      204       204    5              C_setup_error("Unable to allocate enough memory to process command line
                               options\n");
      205       205    5             exit( 7 );
      206       206    5            }
      207       207    4           }
      208       208    3           argv[argc++] = str;
      209       209    3          } /* switch */
      210       210    2         } /* for */
      211       211    1
      212       212    1         if( inname != NULL ) {
      213       213    2           if (!freopen( inname, read_mode, STDIN_P)) {
      214       214    3              perror( error_stdin );
      215       215    3              exit (7);
      216       216    3           }
CC.C02    File=xbi_shared_csetup:c.:XBC3TSI                                         Fri Jan  6 1995  Page=7  
      217       217    2           free (inname);
      218       218    2         }
      219       219    1         else
      220       220    1           if (!freopen ( freopen_me, read_mode, STDIN_P)) {
      221       221    2              perror( error_stdin );
      222       222    2              exit (7);
      223       223    2           }
      224       224    1
      225       225    1         if( outname != NULL ) {
      226       226    2           if (!freopen( outname, outmode, STDOUT_P)) {
      227       227    3             perror( error_stdout );
      228       228    3             exit (7);
      229       229    3          }
      230       230    2           free (outname);
      231       231    2         }
      232       232    1         else
      233       233    1          if (!freopen(freopen_me, write_mode, STDOUT_P)) {
      234       234    2             perror( error_stdout );
      235       235    2             exit (7);
      236       236    2          }
      237       237    1
      238       238    1        call_main:    /*  Insert parameters into main's auto frame */
      239       239    1
      240       240    1         if (argsn)   {
      241       241    2            argv[argc] = (char *)NULL;
      242       242    2            *args++ = argc;
      243       243    2            (*(char ***)args) = argv;
      244       244    2            if (argsn > 2) (*(char **)++args) = (char *) NULL;
      245       245    2         }
      246       246    1        }
      247       247
      248       248             static char *
      249       249             C_get_token()
      250       250             {
      251       251    1           char *start = 0, *str = 0;
      252       252    1           int   slen = 0;
      253       253    1
CC.C02    File=xbi_shared_csetup:c.:XBC3TSI                                         Fri Jan  6 1995  Page=8  
      254       254    1        /* parse a token */
      255       255    1
      256       256    1           while( cp < pend && isspace( *cp ) ) /* skip whitespace */
      257       257    1              cp++;
      258       258    1
      259       259    1           start = cp;
      260       260    1
      261       261    1           while( cp < pend && !isspace( *cp ) ) /* scan for whitespace */
      262       262    1              if (*cp == '\'') {
      263       263    2                 str = C_get_value(start, str, &slen, '\'');
      264       264    2                 start = cp;
      265       265    2              }
      266       266    1              else
      267       267    1                 cp++;
      268       268    1
      269       269    1           str = C_make_token(start, cp - start, str, &slen);
      270       270    1           return str;
      271       271    1        }
      272       272
      273       273
      274       274             static char *
      275       275             C_make_token(start, toklen, str, len_ptr)
      276       276             char  *start;
      277       277             int   toklen;
      278       278             char  *str;
      279       279             int   *len_ptr;
      280       280             {
      281       281    1
      282       282    1           *len_ptr = *len_ptr + toklen;
      283       283    1           str = realloc(str, *len_ptr + 1);
      284       284    1           if (!str) {
      285       285    2              C_setup_error("Unable to allocate enough memory to process command line
                               options\n");
      286       286    2           }
      287       287    1           if (*len_ptr == toklen)
      288       288    1              *str ='\0';
      289       289    1           memcpy(str + *len_ptr - toklen, start, toklen);
CC.C02    File=xbi_shared_csetup:c.:XBC3TSI                                         Fri Jan  6 1995  Page=9  
      290       290    1           str[*len_ptr] = '\0';
      291       291    1           return str;
      292       292    1        }
      293       293
      294       294             static char *
      295       295             C_get_value(start, str, len_ptr, value)
      296       296             char  *start;
      297       297             char  *str;
      298       298             int   *len_ptr;
      299       299             int   value;
      300       300             {
      301       301    1           int   toklen = 0;
      302       302    1
      303       303    1           str = C_make_token(start, cp - start, str, len_ptr);
      304       304    1           if ((cp != start) && (*(cp-1) == '\\')) {
      305       305    2              *(str + *len_ptr - 1) = '\'';
      306       306    2              cp++;
      307       307    2              return (str);
      308       308    2           }
      309       309    1
      310       310    1        find_quote:
      311       311    1           cp++;
      312       312    1           start = cp;
      313       313    1           while (cp <pend && (*cp != value))
      314       314    1              cp++;
      315       315    1
      316       316    1        /*    Check to see if this value was escaped in anyway
      317       317    1                 \value   =  value    -  does not end search                */
      318       318    1
      319       319    1           if (*(cp-1) == '\\') {  /* value was escaped */
      320       320    2              toklen = cp - start;
      321       321    2              str = C_make_token(start, toklen, str, len_ptr);
      322       322    2              *(str + *len_ptr - 1) = value;   /*replace '\' with val */
      323       323    2              goto find_quote;
      324       324    2           }
      325       325    1
      326       326    1           if (*(cp+1) == value) { /* remove both single quotes */
CC.C02    File=xbi_shared_csetup:c.:XBC3TSI                                         Fri Jan  6 1995  Page=10 
      327       327    2              cp++;
      328       328    2              toklen = cp - start - 1;
      329       329    2              str = C_make_token(start, toklen, str, len_ptr);
      330       330    2              goto find_quote;
      331       331    2           }
      332       332    1           toklen = cp - start;
      333       333    1           if (cp < pend)
      334       334    1              cp++;
      335       335    1           str = C_make_token(start, toklen, str, len_ptr);
      336       336    1           return str;
      337       337    1        }
      338       338
      339       339             static char *
      340       340             C_get_buffer()
      341       341             {
      342       342    1        #define  MAXLINE_SIZE   520
      343       343    1
      344       344    1           static const char CONTIN_FID[]  = "*CONTINUATION_COMMANDS";
      345       345    1           static const char CONTIN_MODE[] = "r";
      346       346    1           static const char CONTIN_NL[]   = ";\n";
      347       347    1           FILE  *fp;
      348       348    1           char  *tempbuf;
      349       349    1           char  *str = (char *) 0;
      350       350    1           int   strsz = 0, tsz;
      351       351    1
      352       352    1        /*    See if there is a continuation file to begin with             */
      353       353    1
      354       354    1           fp = fopen(CONTIN_FID, CONTIN_MODE);
      355       355    1           if (fp) {
      356       356    2              tempbuf = (char *) malloc (MAXLINE_SIZE);
      357       357    2              if (!tempbuf) {
      358       358    3                 C_setup_error("Unable to allocate enough memory to process command li
                               ne options\n");
      359       359    3              }
      360       360    2              while (fgets (tempbuf, MAXLINE_SIZE, fp)) {
      361       361    3                 tsz = strlen(tempbuf);
      362       362    3                 str = (char *) realloc(str, strsz + tsz);
CC.C02    File=xbi_shared_csetup:c.:XBC3TSI                                         Fri Jan  6 1995  Page=11 
      363       363    3                 if (!str) {
      364       364    4                    C_setup_error("Unable to allocate enough memory to process command
                                line options\n");
      365       365    4                    }
      366       366    3                 if (!memcmp(tempbuf+tsz-2, CONTIN_NL, 2))
      367       367    3                    tempbuf[tsz - 2] = '\n';
      368       368    3                 memcpy(str+strsz, tempbuf, tsz);
      369       369    3                 strsz += tsz - 1;
      370       370    3              }
      371       371    2              str[strsz] = 0;
      372       372    2              free (tempbuf);
      373       373    2              if (_LIBCOM_DATA->contin_file)
      374       374    2                 remove (CONTIN_FID);
      375       375    2              fclose(fp);
      376       376    2           }
      377       377    1           if ((!fp) || (!str))
      378       378    1              return ((char *) 0);
      379       379    1           else
      380       380    1              return (str);
      381       381    1        }
      382       382
      383       383             static void
      384       384             C_setup_error(char *str) {
      385       385    1
      386       386    1           fprintf (STDERR_P, "%s", str);
      387       387    1           exit(8);
      388       388    1        }
---  Include file information  ---

   stddef:h.:XBC3TOU. is referenced
   stdio:h.:XBC3TOU. is referenced
   stdlib:h.:XBC3TOU. is referenced
   errno:h.:XBC3TOU. is referenced
   string:h.:XBC3TOU. is referenced

CC.C02    File=xbi_shared_csetup:c.:XBC3TSI                                         Fri Jan  6 1995  Page=12 
1 warning was detected in the file xbi_shared_csetup:c.:XBC3TSI
