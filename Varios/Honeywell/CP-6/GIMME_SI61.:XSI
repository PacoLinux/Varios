/*M* GIMME_SI61 - Main module for the GIMME processor.                        */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/**/
GIMME: PROC MAIN;
/**/
/*  GIMME is an X-account tool that electronically 'signs you up' for         */
/*  resources such as hands-on equipment and meeting rooms.                   */
/*                                                                            */
/*  Written by Dennis Griesser                                                */
/*             LADC                                                           */
/*             04/28/83                                                       */
/*                                                                            */
/*  This programme was suggested by Ted Martner, who likes to break           */
/*  things.  I am sure that he will have a ball with this one!                */
/**/
%INCLUDE *GIMME_DATA_R;
/**/
DCL PROMPT CHAR(0) CONSTANT INIT('GIMME! ');
/**/
%XUH_PARAM (NAME = XUH_PARAM,
            STCLASS = STATIC);
DCL EXITING BIT(1) STATIC;
%VLP_ERRCODE (FPTN = ERR_CODE,
              STCLASS = STATIC);
DCL OUT$ REDEF ERR_CODE PTR;
%EJECT;
/**/
/*  ENTRY DCLS  */
/**/
DCL PROCESS_GET ENTRY(1);
DCL PROCESS_REL ENTRY(1);
DCL PROCESS_DISPLAY ENTRY(1);
DCL PROCESS_LIST ENTRY(1);
DCL PROCESS_STRETCH ENTRY(1);
DCL PROCESS_MOVE ENTRY(1);
DCL PROCESS_ALIAS ENTRY(1);
DCL PROCESS_CREATE ENTRY(1);
DCL PROCESS_DESTROY ENTRY(1);
DCL PROCESS_FLUSH ENTRY(1);
DCL PROCESS_USE ENTRY(1);
DCL GIMME_INIT ENTRY ALTRET;
DCL MAKE_NOW_UTS ENTRY;
DCL DEQ_SHEET ENTRY ALTRET;
/**/
%EQU FALSE# = '0'B;
%EQU TRUE# = '1'B;
%EJECT;
      EXITING = %FALSE#;
      CALL GIMME_INIT ALTRET(BAILOUT);
/**/
      DO WHILE (NOT EXITING);
         CALL XUR$GETCMD(GIMME_COMMAND,OUT$,VECTOR(PROMPT)) ALTRET(PARSE_ERROR);
         CALL MAKE_NOW_UTS;             /* Time-stamp this command            */
         DO CASE (OUT$ -> OUT$BLK.CODE); /* ON COMMAND TYPE                   */
            CASE (%GET_COMMAND#);
              CALL PROCESS_GET (OUT$ -> OUT$BLK);
            CASE (%REL_COMMAND#);
              CALL PROCESS_REL (OUT$ -> OUT$BLK);
            CASE (%DISPLAY_COMMAND#);
              CALL PROCESS_DISPLAY (OUT$ -> OUT$BLK);
            CASE (%LIST_COMMAND#);
              CALL PROCESS_LIST (OUT$ -> OUT$BLK);
            CASE (%STRETCH_COMMAND#);
              CALL PROCESS_STRETCH (OUT$ -> OUT$BLK);
            CASE (%MOVE_COMMAND#);
              CALL PROCESS_MOVE (OUT$ -> OUT$BLK);
            CASE (%CREATE_COMMAND#);
              CALL PROCESS_CREATE (OUT$ -> OUT$BLK);
            CASE (%ALIAS_COMMAND#);
              CALL PROCESS_ALIAS (OUT$ -> OUT$BLK);
            CASE (%DESTROY_COMMAND#);
              CALL PROCESS_DESTROY (OUT$ -> OUT$BLK);
            CASE (%FLUSH_COMMAND#);
              CALL PROCESS_FLUSH (OUT$ -> OUT$BLK);
            CASE (%USE_COMMAND#);
              CALL PROCESS_USE (OUT$ -> OUT$BLK);
            CASE (%QUIT_COMMAND#);
              EXITING = %TRUE#;
            END;                        /* END CASE ON COMMAND TYPE           */
         DO WHILE (%FALSE#);
PARSE_ERROR: ;
            CALL XUR$ECHOIF (DCBNUM(M$DO));
            IF ERR_CODE.ERR# = %E$SYNERR
             THEN
               CALL XUR$ERRPTR (,DCBNUM(M$DO));
            CALL XUR$ERRMSG (ERR_CODE);
            IF ERR_CODE.ERR# = %E$EOF THEN EXITING = '1'B;
            END;
/**/
         CALL DEQ_SHEET ALTRET(BAILOUT); /* Release sheet if we had it        */
         END;                           /* END WHILE NOT EXITING              */
BAILOUT: ;
      CALL XUR$CLOSE_DCBS;              /* CLOSE ALL DCBS WITH SAVE           */
      RETURN;
      END GIMME;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/**/
GIMME_INIT: PROC ALTRET;
/**/
/*  This routine does the initial setup for the GIMME processor.              */
/**/
/*  INCLUDE FILES  */
/**/
%INCLUDE *GIMME_DATA_R;
/**/
/*  LOCAL CONSTANT  */
/**/
%XUR_INIT (NAME=FPT_INIT,
           PREPROCESS=YES,              /* Use the command pre-processor      */
           PREPROCESSOR=X$PRE_PROCESS,
           SYNTAX=YES,
           STCLASS=CONSTANT);
/**/
/*  LOCAL AUTO  */
/**/
%VLP_NAME (FPTN = ERRF_FID,
           LEN = 40,
           STCLASS = AUTO);
/**/
/*  ENTRY DCLS  */
/**/
DCL OPEN_SIGNUPS ENTRY ALTRET;
%EJECT;
/**/
/*  Set up some pseudo-constants for later use.                               */
/**/
     M$SIGN_SHEET$ = DCBADDR(M$SIGN_SHEET#);
     M$LM$ = DCBADDR(M$LM#);
     SHEET_KEY.LEN = SIZEC(SHEET_KEY.REST);
     SHEET_KEY.REST = '0'B;
/**/
/*  Prepare to use XUR$GETCMD and his buddies.                                */
/*  NOTE:  This entails telling them what error message file to use.          */
/*         We will assume that the error messages have been 'folded' into     */
/*         our run-unit, so we have to find out what that is.                 */
/**/
     ERRF_FID.L# = M$LM$ -> F$DCB.NAME#.L +1 +8;
     ERRF_FID.NAME# = M$LM$ -> F$DCB.NAME#.C;
     CALL INSERT(ERRF_FID.NAME#,M$LM$ -> F$DCB.NAME#.L,,
                 '.',M$LM$ -> F$DCB.ACCT#);
     CALL XUR$INIT(FPT_INIT);
     CALL XUR$SETERRMSG(ERRF_FID);
/**/
/*  Find out who is using us.                                                 */
/**/
     USER_ID = '0'B;
     USER_ID.ACCN = B$JIT.ACCN;
     USER_ID.UNAME = B$JIT.UNAME;
/**/
/*  Read in the corresponding name from mail file  */
/**/
     FPT_OPEN_NAME.V.FUN# = %IN#;
     CALL M$OPEN (FPT_OPEN_NAME) ALTRET(NO_MAIL);
     NAME_KEY.LEN = SIZEC(NAME_KEY.ACCTN) + SIZEC(NAME_KEY.UNAME);
     NAME_KEY.ACCTN = USER_ID.ACCN;
     NAME_KEY.UNAME = ' ';
     NAME_RECORD.USER_NAME = '  ';
     CALL M$READ (FPT_READ_NAME) ALTRET(NO_MAIL);
/**/
     DO WHILE ('0'B);
NO_MAIL: ;
       SUBSTR(NAME_RECORD.USER_NAME,0,8) = USER_ID.ACCN;
       SUBSTR(NAME_RECORD.USER_NAME,8,12) = USER_ID.UNAME;
     END;
/**/
/**/
/*  Find out the site we are running on.                                      */
/**/
     CALL M$MONINFO (FPT_GET_SITE);
/**/
/*  Greet the user  */
/**/
     ERROR_CODE.ERR# = %DEG$TELL_GREETING#;
     CALL XUR$ERRMSG (ERROR_CODE,,,VECTOR(B_VERSION));
/*E* ERROR: DEG-DEG$TELL_GREETING#-2
   MESSAGE: GIMME %U1 here.
*/
/**/
/*  OPEN the file of sigup sheets.                                            */
/**/
     SHEET_ACCT.ACCT# = M$LM$ -> F$DCB.ACCT#; /* Default account to same as us*/
     CALL OPEN_SIGNUPS ALTRET(BAILOUT);
/**/
/*  Initialization completed OK.                                              */
/**/
     RETURN;
/**/
BAILOUT: ;
     ALTRETURN;
/**/
     END GIMME_INIT;
