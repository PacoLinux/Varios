

14:01 NOV 16 '97 xsl_socket:h.:TCA2SI                                      1    
    1      /*M*    xsl_socket:h    CP-6 version of socket.h header file            */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /*X* DDA */
    8      #ifndef __xsl_socket
    9      #define __xsl_socket
   10
   11      /*
   12       * Definitions related to sockets: types, address families, options.
   13       *
   14       *      This file should be used by applications wanting to deal
   15       *      solely with the 4.3 user-level socket operations.
   16       */
   17
   18      /*
   19       * Types
   20       */
   21      #define SOCK_STREAM     1       /* stream socket */
   22      #define SOCK_DGRAM      2       /* datagram socket */
   23      #define SOCK_RAW        3       /* raw-protocol interface */
   24      #define SOCK_RDM        4       /* reliably-delivered message */
   25      #define SOCK_SEQPACKET  5       /* sequenced packet stream */
   26
   27      /*
   28       * Option flags per-socket.
   29       */
   30      #define SO_DEBUG        0000001 /* turn on debugging info recording */
   31      #define SO_ACCEPTCONN   0000002 /* socket has had listen() */
   32      #define SO_REUSEADDR    0000004 /* allow local address reuse */
   33      #define SO_KEEPALIVE    0000010 /* keep connections alive */
   34      #define SO_DONTROUTE    0000020 /* just use interface addresses */
   35      #define SO_BROADCAST    0000040 /* permit sending of broadcast msgs */
   36      #define SO_USELOOPBACK  0000100 /* bypass hardware when possible */
   37      #define SO_LINGER       0000200 /* linger on close if data present */
14:01 NOV 16 '97 xsl_socket:h.:TCA2SI                                      2    
   38      #define SO_OOBINLINE    0001000 /* leave received OOB data in line */
   39      #define SO_ORDREL       0002000 /* orderly release */
   40      #define SO_IMASOCKET    0004000 /* reserved for DPX kernel */
   41
   42      /*
   43       * Additional options, not kept in so_options.
   44       */
   45      #define SO_SNDBUF       0010001 /* send buffer size */
   46      #define SO_RCVBUF       0010002 /* receive buffer size */
   47      #define SO_SNDLOWAT     0010003 /* send low-water mark */
   48      #define SO_RCVLOWAT     0010004 /* receive low-water mark */
   49      #define SO_SNDTIMEO     0010005 /* send timeout */
   50      #define SO_RCVTIMEO     0010006 /* receive timeout */
   51      #define SO_ERROR        0010007 /* get error status and clear */
   52      #define SO_TYPE         0010010 /* get socket type */
   53
   54      #define SO_BLOCKING     0020001 /* 'blocking' option */
   55      #define SO_NWREADS      0020002 /* max number of pending NoWait reads */
   56      #define SO_NWBUFFS      0020003 /* max number of pending buffers */
   57
   58      /*
   59       * Structure used for manipulating linger option.
   60       */
   61      struct linger {
   62          int l_onoff;        /* option on/off */
   63          int l_linger;       /* linger time */
   64          };
   65
   66      /*
   67       * Level number for (get/set)sockopt() to apply to socket itself.
   68       */
   69      #define SOL_SOCKET      (-1)    /* options for socket level */
   70
   71      /*
   72       * Address families.
   73       */
   74      #define AF_UNSPEC       0       /* unspecified */
14:01 NOV 16 '97 xsl_socket:h.:TCA2SI                                      3    
   75      #define AF_UNIX         1       /* local to host (pipes, portals) */
   76      #define AF_INET         2       /* internetwork: UDP, TCP, etc. */
   77      #define AF_IMPLINK      3       /* arpanet imp addresses */
   78      #define AF_PUP          4       /* pup protocols: e.g. BSP */
   79      #define AF_CHAOS        5       /* mit CHAOS protocols */
   80      #define AF_NS           6       /* XEROX NS protocols */
   81      #define AF_NBS          7       /* nbs protocols */
   82      #define AF_ECMA         8       /* european computer manufacturers */
   83      #define AF_DATAKIT      9       /* datakit protocols */
   84      #define AF_CCITT        10      /* CCITT protocols, X.25 etc */
   85      #define AF_SNA          11      /* IBM SNA */
   86      #define AF_DECnet       12      /* DECnet */
   87      #define AF_DLI          13      /* Direct data link interface */
   88      #define AF_LAT          14      /* LAT */
   89      #define AF_HYLINK       15      /* NSC Hyperchannel */
   90      #define AF_APPLETALK    16      /* Apple Talk */
   91
   92      #define AF_MAX          17
   93
   94      /*
   95       * Structure used by kernel to store most
   96       * addresses.
   97       */
   98      /*F* NAME: sockaddr Structure
   99          The sockaddr structure is a generic address
  100          template for Socket Library applications.  The two parts of
  101          the generic address are the family and data.  The specific
  102          value in the family part determines how to interpret the
  103          data part.  One family in particular (AF_INET) is used so
  104          widely that a separate structure is defined for it:  sockaddr_in.
  105      */
  106      struct sockaddr {
  107      /*K* sa_family - (unsigned short)
  108          .xeq XSL_SOCKET_M XSL$SOCKADDR SA_FAMILY
  109          Equates for the possible values can be found in <xsl_socket.h>.
  110      */
  111          unsigned short sa_family;   /* address family */
14:01 NOV 16 '97 xsl_socket:h.:TCA2SI                                      4    
  112      /*K* sa_data - (char)
  113          .xeq XSL_SOCKET_M XSL$SOCKADDR SA_DATA
  114      */
  115          char sa_data[16];   /* up to 16 bytes of direct address */
  116          };
  117      /*F* NAME:  D_sockaddr
  118          .IBL D:sockaddr
  119      */
  120
  121      /*
  122       * Structure used by kernel to pass protocol
  123       * information in raw sockets.
  124       */
  125      struct sockproto {
  126          unsigned short sp_family;   /* address family */
  127          unsigned short sp_protocol; /* protocol */
  128          };
  129
  130      /*
  131       * Protocol families, same as address families for now.
  132       */
  133      #define PF_UNSPEC       AF_UNSPEC
  134      #define PF_UNIX         AF_UNIX
  135      #define PF_INET         AF_INET
  136      #define PF_IMPLINK      AF_IMPLINK
  137      #define PF_PUP          AF_PUP
  138      #define PF_CHAOS        AF_CHAOS
  139      #define PF_NS           AF_NS
  140      #define PF_NBS          AF_NBS
  141      #define PF_ECMA         AF_ECMA
  142      #define PF_DATAKIT      AF_DATAKIT
  143      #define PF_CCITT        AF_CCITT
  144      #define PF_SNA          AF_SNA
  145      #define PF_DECnet       AF_DECnet
  146      #define PF_DLI          AF_DLI
  147      #define PF_LAT          AF_LAT
  148      #define PF_HYLINK       AF_HYLINK
14:01 NOV 16 '97 xsl_socket:h.:TCA2SI                                      5    
  149      #define PF_APPLETALK    AF_APPLETALK
  150
  151      #define PF_MAX          AF_MAX
  152
  153      /*
  154       * Structure for initializing socket library.
  155      */
  156      /*F* NAME: xsl_sockinit Structure
  157
  158          The xsl_sockinit structure collects together various parameters
  159          that are used to initialize the Socket Library.  If no special
  160          action is taken by the application (see below), defaults are used
  161          for initialization at the first use of socket() or XSL$SOCKET.
  162          To override the defaults, the application calls XSL$SOCKINIT
  163          passing a xsl_sockinit structure with new parameters.  To have
  164          any effect, the call to XSL$SOCKINIT must precede any call to
  165          socket() or XSL$SOCKET.
  166      */
  167      struct xsl_sockinit {
  168      /*K* maxsock - (unsigned long)
  169          .xeq XSL_SOCKET_M XSL_SOCKINIT MAXSOCK
  170      */
  171          unsigned long maxsock;
  172      /*K* nwsocks - (long)
  173          .xeq XSL_SOCKET_M XSL_SOCKINIT NWSOCKS
  174      */
  175          long nwsocks;
  176      /*K* bufsize - (unsigned long)
  177          .xeq XSL_SOCKET_M XSL_SOCKINIT BUFSIZE
  178      */
  179          unsigned long bufsize;
  180      /*K* mem$ - (void *)
  181          .xeq XSL_SOCKET_M XSL_SOCKINIT MEM$
  182      */
  183          void *mem$;
  184      /*K* evnt$ - (void *)()
  185          .xeq XSL_SOCKET_M XSL_SOCKINIT EVNT$
14:01 NOV 16 '97 xsl_socket:h.:TCA2SI                                      6    
  186      */
  187          void (*evnt$)(void *);
  188      /*K* maxrds - (unsigned :18)
  189          .xeq XSL_SOCKET_M XSL_SOCKINIT MAXRDS
  190      */
  191          unsigned maxrds :18;
  192      /*K* maxbuf - (unsigned :18)
  193          .xeq XSL_SOCKET_M XSL_SOCKINIT MAXBUF
  194      */
  195          unsigned maxbuf :18;
  196          };
  197      /*F* NAME:  D_xsl_sockinit
  198          .IBL D:xsl_sockinit
  199      */
  200
  201      /*
  202       * Maximum queue length specifiable by listen.
  203       */
  204      #define SOMAXCONN 5
  205
  206      /*F* NAME: iovec Structure
  207          The iovec structure frames an area of memory to be used as an
  208          I/O buffer in the readv(), writev(), recvmsg(), and sendmsg()
  209          functions.
  210      */
  211      struct iovec {
  212      /*K* iov_base - (char *)
  213          .xeq XSL_SOCKET_M XSL$IOVEC IOV_BASE$
  214      */
  215          char *iov_base;  /* starting address of buffer */
  216      /*K* iov_len - (int)
  217          .xeq XSL_SOCKET_M XSL$IOVEC IOV_LEN
  218      */
  219          int iov_len;  /* size of buffer in bytes */
  220          };
  221      /*F* NAME:  D_iovec
  222          .IBL D:iovec
14:01 NOV 16 '97 xsl_socket:h.:TCA2SI                                      7    
  223      */
  224
  225      /*F* NAME: msghdr Structure
  226          The msghdr structure collects together various parameters needed
  227          by the sendmsg() and recvmsg() functions.
  228      */
  229      struct msghdr {
  230      /*K* msg_name - (char *)
  231          .xeq XSL_SOCKET_M XSL$MSGHDR MSG_NAME$
  232      */
  233          char *msg_name;     /* optional address */
  234      /*K* msg_namelen - (int)
  235          .xeq XSL_SOCKET_M XSL$MSGHDR MSG_NAMELEN
  236      */
  237          int msg_namelen;            /* size of address */
  238      /*K* msg_iov - (struct iovec *)
  239          .xeq XSL_SOCKET_M XSL$MSGHDR MSG_IOV$
  240      */
  241          struct iovec *msg_iov;      /* scatter/gather array */
  242      /*K* msg_iovlen - (int)
  243          .xeq XSL_SOCKET_M XSL$MSGHDR MSG_IOVLEN
  244      */
  245          int msg_iovlen;             /* # elements in msg_iov */
  246      /*K* msg_accrights - (char *)
  247          .xeq XSL_SOCKET_M XSL$MSGHDR MSG_ACCRIGHTS$
  248      */
  249          char *msg_accrights;/* access rights sent/received */
  250      /*K* msg_accrightslen - (int)
  251          .xeq XSL_SOCKET_M XSL$MSGHDR MSG_ACCRIGHTSLEN
  252      */
  253          int msg_accrightslen;
  254          };
  255      /*F* NAME:  D_msghdr
  256          .IBL D:msghdr
  257      */
  258
  259      #define MSG_OOB         001     /* process out-of-band data */
14:01 NOV 16 '97 xsl_socket:h.:TCA2SI                                      8    
  260      #define MSG_PEEK        002     /* peek at incoming message */
  261      #define MSG_DONTROUTE   004     /* send without using routing tables */
  262      #define MSG_NOWAIT      010
  263      #define MSG_MORE        0200
  264
  265      #define MSG_MAXIOVLEN   16
  266
  267
  268      /*
  269       * Socket Library function prototypes
  270       */
  271      extern int socket( int af, int type, int protocol);
  272      extern int accept_srvr( struct sockaddr *name, int *namelen);
  273      extern int bind( int sock, struct sockaddr *name, int namelen);
  274      extern int listen( int sock, int backlog);
  275      extern int accept( int sock, struct sockaddr *name, int *namelen);
  276      extern int connect( int sock, struct sockaddr *name, int namelen);
  277      extern int send( int sock, char *msg, int len, int flags);
  278      extern int recv( int sock, char *buf, int len, int flags);
  279      extern int sendto( int sock, char *msg, int len, int flags, \
  280                      struct sockaddr *to, int tolen);
  281      extern int recvfrom( int sock, char *buf, int len, int flags, \
  282                      struct sockaddr *from, int *fromlen);
  283      extern int shutdown( int sock, int how);
  284      extern int gethostname( char *name, int namelen);
  285      extern int getpeername( int sock, struct sockaddr *name, int *namelen);
  286      extern int getsockname( int sock, struct sockaddr *name, int *namelen);
  287      extern int getsockopt( int sock, int level, int optname, \
  288                      char *optval, int *optlen);
  289      extern int setsockopt( int sock, int level, int optname, \
  290                      char *optval, int optlen);
  291      extern unsigned long htonl( unsigned long hostlong);
  292      extern unsigned short htons( unsigned short hostshort);
  293      extern unsigned long ntohl( unsigned long netlong);
  294      extern unsigned short ntohs( unsigned short netshort);
  295
  296      #endif

