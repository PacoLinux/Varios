VERSION E05

PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:1    
        1        1        /*M* VXT$POST - does post-processing for pass 2.     */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* PLM=4,STI=0,IND=4,CTI=3,DCI=4,ECI=4,CSI=0,THI=0,DTI=0,ENI=4,
        8        8             CLM=0,SQB,NTB,MOC,CCI=3,NLB,MCL=0,EDMC*/
        9        9        VXT$POST: PROC;
       10       10
       11       11        %INCLUDE VX_INC_C;
       12    10727        %INCLUDE VX_PSUBS_C;
       13    10905        %VX$NODE;

             10917    1   /*******************************************************************************
             10918    1   *                                                                              *
             10919    1   *                          VX$NODE                                                 *
             10920    1   *                                                                              *
             10921    1   *******************************************************************************/

             10937    1   DCL 1 VX$NODE      ALIGNED    BASED,
             10938    1         2 SON$ PTR /*(ADDR(NIL))*/, /* Son pointer                      */
             10939    1         2 BROTHER$ PTR /*(ADDR(NIL))*/, /* Brother pointer              */
             10940    1         2 FATHER$ PTR /*(ADDR(NIL))*/, /* Father pointer                */
             10941    1         2 PATH$ PTR /*(ADDR(NIL))*/, /* Path   pointer                  */
             10942    1         2 HEAD$       PTR /*(ADDR(NIL))*/, /* Head pointer to
             10943                              to list of file nodes for this node            */
             10944    1         2 TAIL$ PTR /*(ADDR(NIL))*/, /* Tail pointer to list            */
             10945    1         2 SHARED_LIB_HEAD$ PTR /*(ADDR(NIL))*/,
             10945                  /* Head pointer to shared library list */
             10946    1         2 LIB_HEAD$         PTR /*(ADDR(NIL))*/,
             10946                  /* Head pointer to list of shared libraries
             10947                                          which have been mapped to included libraries */
             10948    1         2 NUM          UBIN(36)  UNAL,    /* Node number                        */
             10949    1         2 DEPTH          UBIN(36)  UNAL,  /* Depth; ROOT=0*/
             10950    1         2 ADDR_START_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array            */
             10951    1         2 ADDR_START REDEF  ADDR_START_A,
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:2    
             10952    1           3 RDATA       SBIN WORD,   /* First address for this node in data     */
             10953    1           3 RPROC       SBIN WORD,   /* First address for this node in proc     */
             10954    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
             10955    1         2 ADDR_STOP_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array            */
             10956    1         2 ADDR_STOP  REDEF  ADDR_STOP_A,
             10957    1           3 RDATA       SBIN WORD,        /* Last address for this node in data */
             10958    1           3 RPROC       SBIN WORD,        /* Last address for this node in proc */
             10959    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
             10960    1         2 START_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array           */
             10961    1         2 START_PAGE# REDEF START_PAGE#_A,
             10962    1           3 RDATA       SBIN WORD,   /* First page    for this node in data     */
             10963    1           3 RPROC       SBIN WORD,   /* First page    for this node in proc     */
             10964    1           3 ROS       SBIN WORD,          /* First page   for program in ros    */
             10965    1         2 STOP_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array*/
             10966    1         2 STOP_PAGE#  REDEF STOP_PAGE#_A,
             10967    1           3 RDATA       SBIN WORD,   /* Last  page    for this node in data     */
             10968    1           3 RPROC       SBIN WORD,   /* Last  page    for this node in proc     */
             10969    1           3 ROS       SBIN WORD,          /* Last  page   for program in ros    */
             10970    1         2 START_SC_ALL$ PTR /*(ADDR(NIL))*/,
             10970                  /* Starting pointer for common sections for this node */
             10971    1         2 STOP_SC_ALL$ PTR /*(ADDR(NIL))*/,
             10971                  /* Stopping pointer for common sections for this node */
             10972    1         2 L_START,
             10973    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
             10974    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
             10975    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
             10976    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
             10977    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
             10978    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
             10979    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
             10980    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
             10981    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
             10982    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
             10983    1         2 L_START_A$(0:9)     REDEF L_START PTR,
             10984    1         2 L_STOP,
             10985    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
             10986    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:3    
             10987    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
             10988    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
             10989    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
             10990    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
             10991    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
             10992    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
             10993    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
             10994    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
             10995    1         2 L_STOP_A$(0:9) REDEF   L_STOP    PTR,
             10996    1         2 L_SIZE,
             10997    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
             10998    1           3 DN      UBIN /*(0)*/, /* Def names                          */
             10999    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
             11000    1           3 SC      UBIN /*(0)*/, /* Sections                           */
             11001    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
             11002    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
             11003    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
             11004    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
             11005    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
             11006    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
             11007    1         2 L_SIZE_A(0:9)  REDEF   L_SIZE    UBIN,
             11008    1         2 L_PREV_SIZE,
             11009    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
             11010    1           3 DN      UBIN /*(0)*/, /* Def names                          */
             11011    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
             11012    1           3 SC      UBIN /*(0)*/, /* Sections                           */
             11013    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
             11014    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
             11015    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
             11016    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
             11017    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
             11018    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
             11019    1         2 L_PREV_SIZE_A(0:9)  REDEF   L_PREV_SIZE    UBIN,
             11020    1         2 BIT_MAP                ALIGNED,
             11021    1           3 DATA                  ALIGNED,
             11022    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             11023    1           3 RPROC                 ALIGNED,
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:4    
             11024    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             11025    1           3 ROS                   ALIGNED,
             11026    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             11027    1         2 L_SC_START,
             11028    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
             11029    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
             11030    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
             11031    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
             11032    1         2 L_SC_START_A$(0:3)  REDEF L_SC_START PTR,
             11033    1         2 L_SC_STOP,
             11034    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
             11035    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
             11036    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
             11037    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
             11038    1         2 L_SC_STOP_A$(0:3)   REDEF L_SC_STOP  PTR,
             11039    1         2 PROMOTE_HEAD,
             11040    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
             11041    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
             11042    1         2 PROMOTE_HEAD_A$(0:1) REDEF PROMOTE_HEAD     PTR,
             11043    1         2 PROMOTE_TAIL,
             11044    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
             11045    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
             11046    1         2 PROMOTE_TAIL_A$(0:1) REDEF PROMOTE_TAIL     PTR,
             11047    1         2 HAVE_ASL          BIT(1)    UNAL /*('0'B)*/,
             11048    1         2 ALL_BLK_COM          BIT(1)    UNAL /*('0'B)*/,
             11049    1         2 USE_NODE          BIT(1)    UNAL /*('0'B)*/,
             11050    1         2 *                 BIT(33)   UNAL /*('0'B)*/,
             11051    1         2 BLANK_COMMON$     PTR       ALIGNED /*(ADDR(NIL))*/;

       14    11055        %VXD$TMPLT(EDEF=YES,SDEF=YES,SEGDEF=YES);

             11068    1   /*******************************************************************************
             11069    1   *                                                                              *
             11070    1   *                          VXD$TMPLT                                               *
             11071    1   *                                                                              *
             11072    1   *******************************************************************************/

PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:5    
             11076        /*
             11077                  VXD$TMPLT (B$RU_DEF) is used to reference fields common to
             11078                  ENTDEFs, SYMDEFs and SEGDEFs.
             11079        */
             11081    1   DCL 1 VXD$TMPLT BASED ALIGNED,
             11082    1         2 VALUE SBIN UNAL,
             11083                /*K*  VALUE is the value if this entry is a constant.  */
             11084    1         2 AD REDEF VALUE,
             11085                /*K*  AD is the address if this entry is not constant.  */
             11086    1           3 LFLAGS UNAL,
             11087                  /*K*  LFLAGS is the field reserved for loader to flag load
             11088                        time attributes of the definition and must be zero
             11089                        in the object unit. */
             11090    1             4 SOURCE UBIN(3) UNAL,
             11091                    /*K*  SOURCE - Source of this DEF */
             11092    1             4 DEFINED BIT(1) UNAL,
             11093                    /*K*  DEFINED - Set if this DEF defined */
             11094    1             4 MULTIPLE BIT(1) UNAL,
             11095                    /*K*  MULTIPLE - Set if this DEF is multiply defined. */
             11096    1             4 USED BIT(1) UNAL,
             11097                    /*K*  USED - Set if this DEF is used. */
             11098    1           3 LOOKUP_SECTNUM BIT(1) UNAL,
             11099                  /*K*  LOOKUP_SECTNUM is set if the section number is greater
             11100                        than 2048 (RU).  */
             11101    1           3 SECTNUM UBIN(11) UNAL,
             11102                  /*K*  SECTNUM contains an entry number into the section
             11103                        table (TYPE 3).  */
             11104    1           3 ISADDR UBIN HALF UNAL,
             11105                  /*K*  ISADDR - Is Address (RU)  */
             11106    1           3 OFFSET REDEF ISADDR UBIN HALF UNAL,
             11107                  /*K*  OFFSET is the word offset from the origin of the section. */
             11108    1         2 NPOINTER SBIN HALF UNAL,
             11109                /*K*  NPOINTER is a word displacement into the name record
             11110                      (TYPE 1) locating the name (of this entry). */
             11111    1         2 CONSTNT BIT(1) UNAL,
             11112                /*K*  CONSTNT is a flag bit to determine the interpretation
             11113                      of word 0.
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:6    
             11114                      If CONSTNT=0, word 0 is AD which contains LFLAGS,
             11115                                    SECTNUM, and ISADDR or OFFSET.
             11116                      If CONSTNT=1, word 0 is a constant value (VALUE)  */
             11117    1         2 LFLAGS UNAL,
             11118                /*K*  LFLAGS is the field reserved for loader to flag load
             11119                      time attributes and must be zero in the object unit. */
             11120    1           3 MULTIPLE BIT(1) UNAL,
             11121                  /*K*  MULTIPLE - Set if this DEF is multiply defined. */
             11122    1           3 USED BIT(1) UNAL,
             11123                  /*K*  USED - Set if this DEF is used. */
             11124    1           3 SOURCE UBIN(4) UNAL,
             11125                  /*K*  SOURCE - Source of this DEF */
             11126    1           3 IS_DCB BIT(1) UNAL,
             11127                  /*K* IS_DCB - Set if this is a DCB */
             11128    1           3 * BIT(10) UNAL,
             11129                  /*K*  * is reserved for future use and must be zero.  */
             11130    1         2 PROTECTION REDEF LFLAGS,
             11131                /*K*  PROTECTION is used for non-constant SYMDEF OR SEGDEF.  */
             11132    1           3 TYPE UBIN(5) UNAL,
             11133                  /*K*  TYPE is the Protection type.  */
             11134    1           3 * UBIN(12) UNAL;
             11135                  /*K*  * is reserved for future use and must be zero.  */

             11146    1   /*******************************************************************************
             11147    1   *                                                                              *
             11148    1   *                          B$EDEF                                                 *
             11149    1   *                                                                              *
             11150    1   *******************************************************************************/

             11155    1   DCL 1 B$EDEF BASED ALIGNED,
             11156    1         2 LFLAGS UNAL,
             11157                /*K*  LFLAGS is the field reserved for loader to flag load
             11158                      time attributes of the definition and must be zero
             11159                      in the object unit. */
             11160    1           3 SOURCE UBIN(3) UNAL,
             11161                  /*K*  SOURCE - Source of this ENTDEF */
             11162    1           3 DEFINED BIT(1)  UNAL,
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:7    
             11163                  /*K*  DEFINED - Set if this ENTDEF defined */
             11164    1           3 MULTIPLE BIT(1) UNAL,
             11165                  /*K*  MULTIPLE - Set if this ENTDEF is multiply defined. */
             11166    1           3 USED BIT(1) UNAL,
             11167                  /*K*  USED - Set if this ENTDEF is used. */
             11168    1           3 * BIT(2) UNAL,
             11169                  /*K*  * - Unused and must be zero. */
             11170    1           3 FAULTAGS BIT(1) UNAL,
             11171                  /*K*  FAULTAGS - Internal calls fault tags flag. */
             11172    1         2 OU UNAL,
             11173    1           3 SECTNUM UBIN BYTE UNAL,
             11174                  /*K*  SECTNUM contains an entry number into the section
             11175                        table (TYPE 3).  */
             11176    1           3 OFFSET UBIN HALF UNAL,
             11177                  /*K*  OFFSET is the word offset from the origin of the section. */
             11178    1         2 ISADDR REDEF OU UBIN(27) UNAL,
             11179                /*K*  ISADDR - Is Address (RU)  */
             11180    1         2 NPOINTER SBIN HALF UNAL,
             11181                /*K*  NPOINTER is a word displacement into the name record
             11182                      (TYPE 1) locating the name (of this entry). */
             11183    1         2 PRI BIT(1) UNAL,
             11184                /*K*  PRI is a one-bit flag denoting primary entry
             11185                      definition.
             11186                         PRI = 1, primary name (object unit name)
             11187                             = 0, not primary name                 */
             11188    1         2 ALT BIT(1) UNAL,
             11189                /*K*  ALT is a one-bit flag denoting permissible alternate
             11190                      return.
             11191                         ALT = 1, alternate return allowed
             11192                             = 0, alternate return not allowed        */
             11193    1         2 CHECK BIT(1) UNAL,
             11194                /*K*  CHECK is a one-bit flag denoting arguments/parameter
             11195                      check and alternate return specification check.
             11196                         CHECK = 0, do not check for matching
             11197                                    arguments/parameters and alternate
             11198                                    return specification check.
             11199                               = 1, check for matching arguments/parameters
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:8    
             11200                                    and alternate return specification.  */
             11201    1         2 CST UBIN(4) UNAL,
             11202                /*K*  CST is a 4-bit field denoting calling sequence type.
             11203                         CST =  0, Standard CP-6 Callable Procedure
             11204                         CST =  1, Nonstandard Call Type
             11205                         CST =  2, Standard CP-6 Procedure with MAIN attribute
             11206                         CST =  3, Standard CP-6 Procedure with ASYNC attribute
             11207                         CST =  4, Standard CP-6 Function Procedure; a
             11208                                   variable table entry will be present to
             11209                                   define the attributes of the function
             11210                         CST =  5, Same as 0, except USE, AVOID, or
             11211                                   MATERIALIZE attributes specified
             11212                         CST =  7, Same as 2, except USE, AVOID, or
             11213                                   MATERIALIZE attributes specified
             11214                         CST =  8, Same as 3, except USE, AVOID, or
             11215                                   MATERIALIZE attributes specified
             11216                         CST =  9, Same as 4, except USE, AVOID, or
             11217                                   MATERIALIZE attributes specified
             11218                         CST = 13, GCOS domain, save
             11219                         CST = 14, GCOS domain, no save
             11220                         CST = 15, Non-Callable Procedure.          */
             11221    1         2 NPARAM UBIN(11) UNAL;
             11222                /*K*  NPARAM is an 11-bit field denoting number of parameters. */

             11234    1   /*******************************************************************************
             11235    1   *                                                                              *
             11236    1   *                          B$SDEF                                                 *
             11237    1   *                                                                              *
             11238    1   *******************************************************************************/

             11243    1   DCL 1 B$SDEF BASED ALIGNED,
             11244    1         2 VALUE SBIN UNAL,
             11245                /*K*  VALUE is the value of the constant segment definition
             11246                      pointer if CONSTNT=1.  */
             11247    1         2 AD REDEF VALUE,
             11248                /*K*  AD - Address (not constant)  */
             11249    1           3 LFLAGS UNAL,
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:9    
             11250                  /*K*  LFLAGS is the field reserved for loader to flag load
             11251                        time attributes of the definition and must be zero
             11252                        in object unit.  */
             11253    1             4 SOURCE UBIN(3) UNAL,
             11254                    /*K*  SOURCE - Source of this SYMDEF */
             11255    1             4 DEFINED BIT(1) UNAL,
             11256                    /*K*  DEFINED - Set if this SYMDEF is defined */
             11257    1             4 MULTIPLE BIT(1) UNAL,
             11258                    /*K*  MULTIPLE - Set if this SYMDEF is multiply defined. */
             11259    1             4 USED BIT(1) UNAL,
             11260                    /*K*  USED - Set if this SYMDEF is used */
             11261    1             4 * BIT(3) UNAL,
             11262                    /*K*  * - Unused */
             11263    1           3 OU UNAL,
             11264    1             4 SECTNUM UBIN BYTE UNAL,
             11265                    /*K*  SECTNUM contains I, where I is an entry number in the
             11266                          section table (TYPE 3).  */
             11267    1             4 OFFSET UBIN HALF UNAL,
             11268                   /*K*  OFFSET is the offset from the origin of section I (See SECTNUM). */
             11269    1           3 ISADDR REDEF OU UBIN(27) UNAL,
             11270                  /*K*  ISADDR - IS Address (RU)  */
             11271    1         2 NPOINTER SBIN HALF UNAL,
             11272                /*K*  NPOINTER is the word displacement into the record of
             11273                      names (TYPE 1) locating the SYMDEF name. */
             11274    1         2 CONSTNT BIT(1) UNAL,
             11275                /*K*  CONSTNT is a flag bit to determine the interpretation
             11276                      of word 0.
             11277                      If CONSTNT=0, word 0 is AD which contains LFLAGS,
             11278                                    SECTNUM, and ISADDR or OFFSET.
             11279                      If CONSTNT=1, word 0 is a constant value (VALUE)  */
             11280    1         2 LFLAGS UNAL,
             11281                /*K*  LFLAGS is the field reserved for loader to flag load
             11282                      time attributes and must be zero in the object unit. */
             11283    1           3 MULTIPLE BIT(1) UNAL,
             11284                  /*K*  MULTIPLE - Set if this SYMDEF is multiply defined. */
             11285    1           3 USED BIT(1) UNAL,
             11286                  /*K*  USED - Set if this SYMDEF is used. */
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:10   
             11287    1           3 SOURCE UBIN(4) UNAL,
             11288                  /*K*  SOURCE - Source of this SYMDEF */
             11289    1           3 IS_DCB BIT(1) UNAL,
             11290                  /*K* IS_DCB - Set if this is a DCB */
             11291    1           3 * BIT(4) UNAL,
             11292                  /*K*  * - Unused */
             11293    1         2 * BIT(6) UNAL;
             11294                /*K*  * is reserved for future use and must be zero. */

             11306    1   /*******************************************************************************
             11307    1   *                                                                              *
             11308    1   *                          B$SEGDEF                                                *
             11309    1   *                                                                              *
             11310    1   *******************************************************************************/

             11315    1   DCL 1 B$SEGDEF BASED ALIGNED,
             11316    1         2 VALUE SBIN UNAL,
             11317                /*K*  VALUE is the value of the constant segment definition
             11318                      pointer if CONSTANT=1.  */
             11319    1         2 S REDEF VALUE,
             11320    1           3 * UBIN(24) UNAL,
             11321    1           3 SEGID UBIN(12) UNAL,
             11322                  /*K*  SEGID - Segid of constant value */
             11323    1         2 AD REDEF VALUE,
             11324                /*K*  AD - Address (not constant )  */
             11325    1           3 LFLAGS UNAL,
             11326                  /*K*  LFLAGS is the field reserved for loader to flag load
             11327                        time attributes of the definition and must be zero
             11328                        in object unit.  */
             11329    1             4 SOURCE UBIN(3) UNAL,
             11330                    /*K*  SOURCE - Source of this SEGDEF */
             11331    1             4 DEFINED BIT(1) UNAL,
             11332                    /*K*  DEFINED - Set if this SEGDEF is defined */
             11333    1             4 MULTIPLE BIT(1) UNAL,
             11334                    /*K*  MULTIPLE - Set if this SEGDEF is multiply defined */
             11335    1             4 USED BIT(1) UNAL,
             11336                    /*K*  USED - Set if this SEGDEF is used */
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:11   
             11337    1             4 * BIT(3) UNAL,
             11338                    /*K*  * is reserved for future use and must be zero. */
             11339    1           3 OU UNAL,
             11340    1             4 SECTNUM UBIN BYTE UNAL,
             11341                    /*K*  SECTNUM is the Section number.  */
             11342    1             4 OFFSET UBIN HALF UNAL,
             11343                    /*K*  OFFSET is the offset within section. */
             11344    1           3 ISADDR REDEF OU UBIN(27) UNAL,
             11345                  /*K*  ISADDR - IS Address (RU)  */
             11346    1         2 NPOINTER SBIN HALF UNAL,
             11347                /*K*  NPOINTER is the word displacement into DEFNAMES record. */
             11348    1         2 CONSTNT BIT(1) UNAL,
             11349                /*K*  CONSTNT is a flag bit to determine the interpretation
             11350                      of word 0.
             11351                      If CONSTNT=0, word 0 is AD which contains LFLAGS,
             11352                                    SECTNUM, and ISADDR or OFFSET.
             11353                      If CONSTNT=1, word 0 is a constant value (VALUE)  */
             11354    1         2 LFLAGS UNAL,
             11355                /*K*  LFLAGS is the field reserved for loader to flag load time
             11356                      attributes and must be zero in the object unit.  */
             11357    1           3 MULTIPLE BIT(1) UNAL,
             11358                  /*K*  MULTIPLE - Set if this SEGDEF is multiply defined */
             11359    1           3 USED BIT(1) UNAL,
             11360                  /*K*  USED - Set if this SEGDEF is used */
             11361    1           3 SOURCE UBIN(4) UNAL,
             11362                  /*K*  SOURCE - Source of this SEGDEF */
             11363    1           3 * BIT(11) UNAL,
             11364                  /*K*  * is reserved for future use and must be zero. */
             11365    1         2 SEG REDEF LFLAGS UNAL,          /* Not constant SEGDEF (RU) */
             11366    1           3 TYPE UBIN(5) UNAL,            /* Segment protection type (RU) */
             11367    1           3 SEGID UBIN(12) UNAL;          /* Segid of segment (RU) */
       15    11371        %VX$SC;

             11384    1   /*******************************************************************************
             11385    1   *                                                                              *
             11386    1   *                          VX$SC                                                 *
             11387    1   *                                                                              *
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:12   
             11388    1   *******************************************************************************/

             11393    1   DCL 1 VX$SC BASED ALIGNED,
             11394    1         2 SEG UBIN(3) UNAL,
             11395                /*K*  SEG - The segment number of this section */
             11396    1         2 TYPE UBIN(6) UNAL,
             11397                /*K*  TYPE -
             11398                      Type code      Section type
             11399                      ---------      ------------
             11400                          0          Data control section with write access.
             11401                          1          Procedure control section.
             11402                          2          Unlabeled common, name pointer must be zero.
             11403                          3          Labeled common, with mandatory name pointer.
             11404                                     This is for labeled common which must be
             11405                                     in the root.
             11406                          4          Labeled common, with mandatory name pointer.
             11407                                     This is for labeled common which need not
             11408                                     be in the root.
             11409                          5          DCB, word 1 is name pointer.
             11410                          6          Data control section with read only access,
             11411                                     word 1 = 0 or name pointer.      */
             11412    1         2 EMPTY BIT(1) UNAL,
             11413                /*K*  EMPTY is the empty bit.  This bit is set if the control
             11414                      section is of size zero.  */
             11415    1         2 ATTR UNAL,
             11416    1           3 INT  UBIN(2) UNAL,
             11417                  /*K*  INT is the Section initialization.  */
             11418    1           3 SEGMENT BIT(1) UNAL,
             11419                  /*K* SEGMENT is set if the Section is defined in a data
             11420                       segment.  */
             11421    1           3 ALL BIT(1) UNAL,
             11422                  /*K*  ALL is set if the Section is allocated.  */
             11423    1           3 PRE_DCB BIT(1) UNAL,
             11424                  /*K*  PRE_DCB is set if a Pre_defined DCB.  */
             11425    1           3 MES_INIT BIT(1) UNAL,
             11426    1           3 ALIGN UBIN(2) UNAL,
             11427                  /*K*  ALIGN is the Section alignment.  */
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:13   
             11428    1         2 ADDRESS UBIN HALF UNAL,
             11429                /*K*  ADDRESS is the address within the Instruction Segment of
             11430                      the entry point of the external procedure.  */
             11431    1         2 NAME_DISP SBIN HALF UNAL,
             11432                /*K*  NAME_DISP is the Name index.  */
             11433    1         2 SIZE UBIN HALF UNAL,
             11434                /*K*  SIZE is the size, in words, of the section.  */
             11435    1         2 NODE# UBIN HALF UNAL,
             11436                /*K*  NODE# is the Node number of section.  */
             11437    1         2 COM_LINK UBIN HALF UNAL;
             11438                /*K*  COM_LINK is used internally by linker to link common sections */

             11448    1   /*******************************************************************************
             11449    1   *                                                                              *
             11450    1   *                          VX$SECT                                                 *
             11451    1   *                                                                              *
             11452    1   *******************************************************************************/

             11457    1   DCL 1 VX$SECT BASED ALIGNED,
             11458    1         2 TYPE UBIN BYTE UNAL,
             11459                /*K*  TYPE -
             11460                      Type code      Section type
             11461                      ---------      ------------
             11462                          0          Data control section with write access.
             11463                          1          Procedure control section.
             11464                          2          Unlabeled common, name pointer must be zero.
             11465                          3          Labeled common, with mandatory name pointer.
             11466                                     This is for labeled common which must be
             11467                                     in the root.
             11468                          4          Labeled common, with mandatory name pointer.
             11469                                     This is for labeled common which need not
             11470                                     be in the root.
             11471                          5          DCB, word 1 is name pointer.
             11472                          6          Data control section with read only access,
             11473                                     word 1 = 0 or name pointer.
             11474                          7          Constant labeled common, with mandatory name pointer.
             11475                                     This is for labeled common which must be
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:14   
             11476                                     in the root.
             11477                          8          Constant labeled common, with mandatory name pointer.
             11478                                     This is for labeled common which need not
             11479                                     be in the root.                        */
             11480    1         2 * BIT(1),
             11481                /*K*  * is reserved for future use and must be zero. */
             11482    1         2 INITZERO BIT(1),
             11483                /*K*  INITZERO - if 1, initialize with zero.  */
             11484    1         2 INITUTS BIT(1),
             11485                /*K*  INITUTS - if 1, initialize with UTS.  */
             11486    1         2 SEGMENT BIT(1),
             11487                /*K*  SEGMENT - if 1, specifies that this section is
             11488                                to be placed in the segment specified by
             11489                                SEG_NPOINTER.  */
             11490    1         2 * BIT(3),
             11491                /*K*  * is reserved for future use and must be zero. */
             11492    1         2 BOUND UBIN(2) UNAL,
             11493                /*K*  BOUND - bits 6-7 - defines starting location.
             11494                              00 - starts on even word
             11495                              01 - starts on odd word
             11496                              10 - starts on multiple of 8
             11497                              11 - starts on page boundary     */
             11498    1         2 SIZE UBIN HALF UNAL,
             11499                /*K*  SIZE is the size, in words, of the section.  */
             11500    1         2 NPOINTER SBIN HALF UNAL,
             11501                /*K*  NPOINTER is the word displacement into the name record
             11502                      (TYPE 1) locating the name of this section.  If the
             11503                      field is negative, the section has no name.  */
             11504    1         2 MBZ UBIN HALF UNAL,
             11505                /*K*  MBZ is reserved for future expansion and must be zero. */
             11506    1         2 SEG_NPOINTER REDEF MBZ SBIN HALF UNAL,
             11507                /*K*  SEG_NPOINTER locates a name in the Definition Names
             11508                      Section.  The name must be a valid segment name
             11509                      recognized by the linker.  */
             11510    1         2 G66 REDEF MBZ,
             11511                /*K*  G66 is not used on CP-6. */
             11512    1           3 * BIT(9),
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:15   
             11513    1           3 NSAB BIT(9);
       16    11516        %VX$LST;

             11529    1   /*******************************************************************************
             11530    1   *                                                                              *
             11531    1   *                          VX$LST                                                 *
             11532    1   *                                                                              *
             11533    1   *******************************************************************************/

             11538    1   DCL 1 VX$LST                          ALIGNED BASED,
             11539    1         2 LINK$        PTR,               /* Link to next item                  */
             11540    1         2 TYPE         UBIN( 18) UNAL,    /* Type                               */
             11541    1         2 SUB_TYPE     UBIN( 18) UNAL,    /* Sub-type                           */
             11542    1         2 OBJECT_NAME$ PTR,               /* Pointer to object unit name        */
             11543    1         2 PRIOR$ REDEF OBJECT_NAME$ PTR,  /* Pointer to prior element in list   */
             11544    1         2 SC_HEAD$     PTR,               /* Head pointer to section link list  */
             11545    1         2 LIBSRCH$ REDEF SC_HEAD$ PTR,    /* Pointer to account list for library*/
             11546    1         2 SC_TAIL$     PTR,               /* Tail pointer to section link list  */
             11547    1         2 LIB REDEF SC_TAIL$,             /* Used only by UNSAT library files   */
             11548    1           3 USED UBIN HALF UNAL,          /* 1 => library file used, 0=>not used*/
             11549    1           3 NEEDED UBIN HALF UNAL,   /* 1 => library file needed, 0=>not needed*/
             11550    1         2 P,
             11551    1           3 NAME_       ALIGNED,
             11552    1             4 BOUND      UBIN(20)  UNAL,
             11553    1             4 FLAGSV     UBIN(11)  UNAL,
             11554    1             4 *          BIT(5)    UNAL,
             11555    1             4 NAME$      PTR,
             11556    1           3 ACCT_       ALIGNED,
             11557    1             4 BOUND      UBIN(20)  UNAL,
             11558    1             4 FLAGSV     UBIN(11)  UNAL,
             11559    1             4 *          BIT(5)    UNAL,
             11560    1             4 ACCT$      PTR,
             11561    1           3 PASS_       ALIGNED,
             11562    1             4 BOUND      UBIN(20)  UNAL,
             11563    1             4 FLAGSV     UBIN(11)  UNAL,
             11564    1             4 *          BIT(5)    UNAL,
             11565    1             4 PASS$      PTR,
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:16   
             11566    1           3 SN_         ALIGNED,
             11567    1             4 BOUND      UBIN(20)  UNAL,
             11568    1             4 FLAGSV     UBIN(11)  UNAL,
             11569    1             4 *          BIT(5)    UNAL,
             11570    1             4 SN$        PTR,
             11571    1           3 WSN_        ALIGNED,
             11572    1             4 BOUND      UBIN(20)  UNAL,
             11573    1             4 FLAGSV     UBIN(11)  UNAL,
             11574    1             4 *          BIT(5)    UNAL,
             11575    1             4 WSN$       PTR,
             11576    1           3 B           ALIGNED,
             11577    1             4 RES        BIT(1)    UNAL,
             11578    1             4 ASN        BIT(1)    UNAL,
             11579    1             4 ACCT       BIT(1)    UNAL,
             11580    1             4 *          BIT(33)   UNAL,
             11581    1           3 RES         CHAR(4)   ALIGNED,
             11582    1           3 ASN         UBIN(36)  ALIGNED;
       17    11585        %VX$WORD;

             11597    1   /*******************************************************************************
             11598    1   *                                                                              *
             11599    1   *                          VX$WORD                                                 *
             11600    1   *                                                                              *
             11601    1   *******************************************************************************/

             11606    1   DCL VX$WORD_A(0:0)       UBIN(36) ALIGNED    BASED PTR;
             11607    1   DCL VX$HALF_A(0:0)       UBIN(18) HALIGNED   BASED PTR;
             11608    1   DCL VX$BYTE_A(0:0)       UBIN( 9) CALIGNED   BASED PTR;
             11609    1   DCL VX$CHAR_A(0:0)       CHAR( 1) UNAL       BASED PTR;
             11610        /**/
             11611    1   DCL VX$WORD_SBIN_A(0:0)  SBIN WORD ALIGNED   BASED     PTR;
             11612    1   DCL VX$HALF_SBIN_A(0:0)  SBIN HALF HALIGNED  BASED     PTR;
             11613    1   DCL VX$BYTE_SBIN_A(0:0)  SBIN HALF CALIGNED  BASED     PTR;
             11614    1   DCL VX$BIT_A(0:0)        BIT(36)   ALIGNED   BASED     PTR;
       18    11617        %TMPLT;

             11629    1   /*******************************************************************************
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:17   
             11630    1   *                                                                              *
             11631    1   *                          TMPLT                                                 *
             11632    1   *                                                                              *
             11633    1   *******************************************************************************/

             11638    1   DCL 1 VX$TMPLT           ALIGNED BASED, /* Template for defs                  */
             11639    1         2 A(0:3)       UBIN(18)  UNAL,    /* Array access                       */
             11640    1         2 A_SBIN(0:3) REDEF A    SBIN HALF UNAL,
             11641    1         2 W       REDEF     A,            /* By name                            */
             11642    1           3 WORD0       UBIN(36)  UNAL,   /* First word                         */
             11643    1           3 WORD1       UBIN(36)  UNAL;   /* Second word                        */
       19    11646        %T$C;

             11658    1   /*******************************************************************************
             11659    1   *                                                                              *
             11660    1   *                          T$C                                                 *
             11661    1   *                                                                              *
             11662    1   *******************************************************************************/

             11667    1   DCL 1 T$C           BASED     ALIGNED,  /* Text count                         */
             11668    1         2 COUNT        UBIN( 9) UNAL,
             11669    1         2 CHARS        CHAR( T$C.COUNT )   UNAL;
             11670    1   DCL 1 T$C_UNAL      BASED     UNAL,     /* Text count                         */
             11671    1         2 COUNT        UBIN( 9) UNAL,
             11672    1         2 CHARS        CHAR( T$C_UNAL.COUNT ) UNAL;
       20    11675        %BANNER(ARG=SUBS);

             11683    1   /*******************************************************************************
             11684    1   *                                                                              *
             11685    1   *                          SUBS                                                 *
             11686    1   *                                                                              *
             11687    1   *******************************************************************************/

       21    11691        %B$RECORDSUBS;
       22    11719        %B$SECTIONSUBS;
       23    11734        %BANNER(ARG=B$DNAME);

PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:18   
             11742    1   /*******************************************************************************
             11743    1   *                                                                              *
             11744    1   *                          B$DNAME                                                 *
             11745    1   *                                                                              *
             11746    1   *******************************************************************************/

       24    11750        %B$DNAME( NAME=B$DNAME, STCLASS=BASED);
       25    11769        %B$TREE_TABLE(HDR_NAME=VX$TREE_HEADER,NODE_NAME=VX$TREE_NODE);
       26    11827        %VX$DCB;

             11836    1   /*******************************************************************************
             11837    1   *                                                                              *
             11838    1   *                          VX$DCB                                                 *
             11839    1   *                                                                              *
             11840    1   *******************************************************************************/

             11844        %LIST;
             11845    1   DCL 1 VX$DCB                       ALIGNED   BASED,
             11846    1         2 * CHAR( VX_DCB_SIZEC);
             11847        /* End of actual DCB; now for NAME: Just one word in this description */
             11848        /* Dcb name description */
             11849    1   DCL 1 VX$DCB$T$C                   ALIGNED   BASED,
             11850    1         2 LOGICAL_DCB_NUM             UBIN(3)   UNAL,
             11851    1         2 INT                         BIT(1)    UNAL,      /* '1'=> no relocation
             11852                                                                        '0' => relocation */
             11853    1         2 COUNT                       UBIN(5)   UNAL,
             11854    1         2 CHARS                       CHAR( VX$DCB$T$C.COUNT ) UNAL;
       27    11856        %E;
             11857        %LSET LISTDIR='0'B;

             11864    1   /*******************************************************************************
             11865    1   *                                                                              *
             11866    1   *                          ENTRY                                                 *
             11867    1   *                                                                              *
             11868    1   *******************************************************************************/

       28    11872        %ENTRIES;
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:19   
             11873    1   DCL VXE$ERROR       ENTRY(4);
             11874    1   DCL VXE$ERR         ENTRY(3);
             11875    1   DCL VXE$MERC        ENTRY;
             11876    1   DCL VXE$ERRMSG      ENTRY(3);
             11877    1   DCL VXR$READ        ENTRY( 3 );
             11878    1   DCL VXW$WRITE       ENTRY( 3 );
             11879    1   DCL VXW$WRITE_DO    ENTRY( 2 );
             11880    1   DCL VXD$B2C         ENTRY( 5 );
             11881    1   DCL VXD$C2B         ENTRY( 3 );
             11882    1   DCL VXA$GET         ENTRY( 3 );
             11883    1   DCL VXF$FREE        ENTRY( 3 );
             11884    1   DCL VXQ$SORT        ENTRY( 7 );
             11885    1   DCL VXY$YESNO       ENTRY( 1 );
       29    11887        %ENTRIES_IO;
             11888    1   DCL VXF$OPEN        ENTRY(3) ALTRET;
             11889    1   DCL VXF$CLOSE       ENTRY(3);
             11890    1   DCL VXU$PREAD       ENTRY(12);
             11891    1   DCL VXK$KEY         ENTRY(4);
             11892    1   DCL VXI$READ        ENTRY(4)  ALTRET;
             11893    1   DCL VXI$WRITE       ENTRY(4)  ALTRET;
       30    11895    1   DCL VXQ$SORT_V ENTRY( 7 );
       31    11896    1   DCL VXT$PROC ENTRY;
       32    11897    1   DCL VXT$BNDADR ENTRY;
       33    11898    1   DCL VXT$DUPCHK ENTRY;
       34    11899    1   DCL VXU$SETUP ENTRY(5);
       35    11900    1   DCL VXU$PAGEOUT ENTRY(3);
       36    11901    1   DCL VXO$DEL_PATCH_FILE ENTRY;
       37    11902        %PTR;
             11903        %LSET LISTDIR='0'B;

             11910    1   /*******************************************************************************
             11911    1   *                                                                              *
             11912    1   *                          PTR                                                 *
             11913    1   *                                                                              *
             11914    1   *******************************************************************************/

       38    11918        %POINTER;
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:20   
             11919    1   DCL P$         PTR       ALIGNED AUTO;
             11920    1   DCL Q$         PTR       ALIGNED AUTO;
             11921    1   DCL R$         PTR       ALIGNED AUTO;
       39    11923    1   DCL CURR$ PTR ALIGNED AUTO;
       40    11924    1   DCL DCB_CURR$ PTR ALIGNED AUTO;
       41    11925    1   DCL DN_ROOT_START$ PTR ALIGNED AUTO;
       42    11926    1   DCL WHERE$ PTR ALIGNED AUTO;
       43    11927    1   DCL NEXT$ PTR ALIGNED AUTO;
       44    11928    1   DCL T$ PTR ALIGNED AUTO;
       45    11929    1   DCL NODE$ PTR ALIGNED AUTO;
       46    11930    1   DCL NAME$ PTR ALIGNED AUTO;
       47    11931    1   DCL S_NAME$ PTR ALIGNED AUTO;
       48    11932    1   DCL N$ PTR ALIGNED AUTO;
       49    11933        %VX$PTR$;
             11934    1   DCL VX$PTR$(0:0)         PTR  ALIGNED   BASED( VX_SC_X_NODE$ );
             11935                                      /* Section allocated NODE# to node pointer map  */
       50    11937        %U;
             11938        %LSET LISTDIR='0'B;

             11945    1   /*******************************************************************************
             11946    1   *                                                                              *
             11947    1   *                          UBIN                                                 *
             11948    1   *                                                                              *
             11949    1   *******************************************************************************/

       51    11953        %INDEX;
             11954    1   DCL I          UBIN(36) ALIGNED AUTO;
             11955    1   DCL SI REDEF I SBIN WORD ALIGNED;
             11956    1   DCL J          UBIN(36) ALIGNED AUTO;
             11957    1   DCL SJ REDEF J SBIN WORD ALIGNED;
             11958    1   DCL K          UBIN(36) ALIGNED AUTO;
             11959    1   DCL SK REDEF K SBIN WORD ALIGNED;
             11960    1   DCL L          UBIN(36) ALIGNED AUTO;
             11961    1   DCL SL REDEF L    SBIN WORD ALIGNED;
       52    11963    1   DCL MX UBIN(36) ALIGNED AUTO;
       53    11964    1   DCL SAT_MX UBIN(36) ALIGNED AUTO;
       54    11965    1   DCL NEXT UBIN(36) ALIGNED AUTO;
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:21   
       55    11966    1   DCL TREE_TABLE_SIZE UBIN(36) ALIGNED AUTO;
       56    11967    1   DCL STOP UBIN(36) ALIGNED AUTO;
       57    11968    1   DCL GET UBIN(36) ALIGNED AUTO;
       58    11969    1   DCL VALUE UBIN(36) ALIGNED AUTO;
       59    11970    1   DCL BUFTYPE UBIN(36) ALIGNED AUTO;
       60    11971    1   DCL NODE# UBIN(36) ALIGNED AUTO;
       61    11972    1   DCL SIZE UBIN(36) ALIGNED AUTO;
       62    11973    1   DCL S_SIZE UBIN(36) ALIGNED AUTO;
       63    11974    1   DCL C_SIZE UBIN(36) ALIGNED AUTO;
       64    11975    1   DCL I_SIZE UBIN(36) ALIGNED AUTO;
       65    11976    1   DCL NAME_ADR UBIN(36) ALIGNED AUTO;
       66    11977    1   DCL TREE_ADR UBIN(36) ALIGNED AUTO;
       67    11978    1   DCL NAME_SIZE UBIN(36) ALIGNED AUTO;
       68    11979    1   DCL NODE_ADR UBIN(36) ALIGNED AUTO;
       69    11980    1   DCL DIFF UBIN(36) ALIGNED AUTO;
       70    11981    1   DCL LOOP UBIN(36) ALIGNED AUTO;
       71    11982    1   DCL PR_SIZE UBIN(36) ALIGNED AUTO;
       72    11983        %S;
             11984        %LSET LISTDIR='0'B;

             11991    1   /*******************************************************************************
             11992    1   *                                                                              *
             11993    1   *                          SBIN                                                 *
             11994    1   *                                                                              *
             11995    1   *******************************************************************************/

       73    11999    1   DCL ADR SBIN WORD ALIGNED AUTO;
       74    12000    1   DCL SBIN_NAME_DISP SBIN HALF ALIGNED AUTO;
       75    12001        %BIN_SEARCH_TEMPS(
       76    12002         LOW=BIN_LOW,
       77    12003         HIGH=BIN_HIGH,
       78    12004         START1$=BIN_START1$,
       79    12005         MID=BIN_MID,
       80    12006         NTEMP$=BIN_NTEMP$);
             12007    1   DCL LOW             UBIN(36)  ALIGNED AUTO;
             12008    1   DCL HIGH            UBIN(36)  ALIGNED AUTO;
             12009    1   DCL MID             UBIN(36)  ALIGNED AUTO;
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:22   
             12010    1   DCL NTEMP$          PTR        ALIGNED AUTO;
             12011    1   DCL START1$         PTR       ALIGNED AUTO;
       81    12013        %BIN_SEARCH_VARS(
       82    12014         START$=BIN_START$,
       83    12015         STOP$=BIN_STOP$,
       84    12016         RESULT$=BIN_RESULT$,
       85    12017         N$=BIN_N$,
       86    12018         MATCH$=BIN_MATCH$,
       87    12019         NAME_DISP=BIN_NAME_DISP,
       88    12020         SIZE=BIN_SIZE);
             12021    1   DCL START$          PTR  ALIGNED   AUTO;
             12022    1   DCL STOP$           PTR  ALIGNED   AUTO;
             12023    1   DCL RESULT$         PTR  ALIGNED   AUTO;
             12024    1   DCL N$              PTR  ALIGNED   AUTO;
             12025    1   DCL MATCH$          PTR       ALIGNED   AUTO;
             12026    1   DCL NAME_DISP       UBIN(36)  ALIGNED   AUTO;
             12027    1   DCL SIZE            UBIN(36)  ALIGNED   AUTO;
       89    12029        %IMAGE_BUFFERS( NAME=VX$IMAGE, STCLASS="BASED(VX_IMAGE$)");
             12030    1   DCL 1 NAME           ALIGNED        STCLASS,
             12031    1         2 CPAGE#_A(0:1) SBIN WORD ALIGNED INT_SBIN, /* Current page # in buffer # */
             12032    1         2 CPAGE# REDEF CPAGE#_A,
             12033    1           3 BUF0                  SBIN WORD ALIGNED,
             12034    1           3 BUF1                  SBIN WORD ALIGNED,
             12035    1         2 START_A$(0:1) PTR ALIGNED INT_PTR, /* Pointer to start of buffer #    */
             12036    1         2 START$ REDEF START_A$,
             12037    1           3 BUF0$                 PTR       ALIGNED,
             12038    1           3 BUF1$                 PTR       ALIGNED,
             12039    1         2 STOP_A$(0:1)           PTR       ALIGNED INT_PTR,
             12040    1         2 STOP$  REDEF STOP_A$,           /* Pointer to end of buffer #         */
             12041    1           3 BUF0$                 PTR       ALIGNED,
             12042    1           3 BUF1$                 PTR       ALIGNED,
             12043    1         2 NODE_A$(0:1) PTR ALIGNED INT_PTR, /* Pointer to node  of buffer #     */
             12044    1         2 NODE$  REDEF NODE_A$,
             12045    1           3 BUF0$                 PTR       ALIGNED,
             12046    1           3 BUF1$                 PTR       ALIGNED,
             12047    1         2 BEGIN$                 PTR       ALIGNED,
             12048    1         2 END$                   PTR       ALIGNED,
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:23   
             12049    1         2 SPAGE#                 UBIN(36)  ALIGNED INT_UBIN,
             12050    1         2 EPAGE#                 UBIN(36)  ALIGNED INT_UBIN;
       90    12052        %MOVE_PAGE_DCL;
             12053    1   DCL MOVE_PAGE_REMAIN          SBIN WORD ALIGNED   AUTO;
             12054    1   DCL MOVE_TARGET$              PTR       ALIGNED   AUTO;
             12055    1   DCL MOVE_ADR_TEMP             UBIN(36)  ALIGNED   AUTO;
             12056    1   DCL MOVE_SRC$                 PTR       ALIGNED   AUTO;
             12057    1   DCL MOVE_TEMP                 UBIN(36)  ALIGNED   AUTO;
       91    12059        %MOVE_TMPLT;
             12060    1   DCL TNAME           BIT( TCOUNT ) ALIGNED    TSTCLASS;
             12061    1   DCL SNAME           BIT( SCOUNT ) ALIGNED    SSTCLASS;
             12062    1   DCL TNAME_C         CHAR( TCOUNT_C ) ALIGNED TSTCLASS_C;
             12063    1   DCL SNAME_C         CHAR( SCOUNT_C ) ALIGNED SSTCLASS_C;
       92    12065    1   DCL DCB_TEXT(0:3) CHAR(5) ALIGNED CONSTANT INIT(
       93    12066    1    'SIDCB',
       94    12067    1    'UIDCB',
       95    12068    1    'OUDCB',
       96    12069    1    'LODCB' );
       97    12070    1   DCL 1 NODE_NAME ALIGNED,
       98    12071    1         2 COUNT UBIN BYTE UNAL,
       99    12072    1         2 TEXT CHAR(31) UNAL ;
      100    12073        %PLIST;
      101    12074
      102    12075    1   DCL LEAST UBIN(36) ALIGNED AUTO;
      103    12076    1   DCL 1 LEAST_ENTRY ALIGNED STATIC,
      104    12077    1         2 LH UBIN(18) UNAL,
      105    12078    1         2 * UBIN(18) UNAL INIT(0);
      106    12079    1   DCL LEAST_ENTRY$ REDEF LEAST_ENTRY EPTR;
      107    12080        %B$RUBIRTH(
      108    12081         NAME=BIRTH_REC,
      109    12082         STCLASS=AUTO,
      110    12083         COUNTINIT=" ");
      111    12092        %EJECT;
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:24   
      112    12093    1       VX_CURR$ = VX_ROOT$;
      113    12094    1   DEPTH_WRITE:
      114    12095    1       IF VX_CURR$ -> VX$NODE.SON$ = ADDR(NIL) THEN GOTO WRITE;
      115    12096    1       VX_CURR$ = VX_CURR$ -> VX$NODE.SON$;
      116    12097    1       GOTO DEPTH_WRITE;
      117    12098    1   WRITE:
      118    12099    2       IF VX_CURR$ = VX_ROOT$ THEN DO;
      119    12100    2           IF VX_ROOT$ -> VX$NODE.SON$ ~= ADDR(NIL)
      120    12101    2              AND
      121    12102    3              VX_SC_ROOT_LBL_COM > 0 THEN DO;
      122    12103    3               P$ = VX_ROOT$ -> VX$NODE.L_SC_START.SC_ROOT_LBL_COM$;
      123    12104    4               IF P$ ~= ADDR(NIL) THEN DO;
      124    12105    4                   DN_ROOT_START$ = VX_ROOT$ -> VX$NODE.L_START.DN$;
      125    12106    4                   N$ = PINCRW( DN_ROOT_START$,
      126    12107    4                      VX_ROOT$ -> VX$NODE.L_SIZE.DN );
      127    12108    4                   T$ = PINCRW( VX_ROOT$ -> VX$NODE.L_START.SC$,
      128    12109    4                      VX_ROOT$ -> VX$NODE.L_SIZE.SC );
      129    12110    4                   Q$ = VX_ROOT$ -> VX$NODE.L_SC_STOP.SC_ROOT_LBL_COM$;
      130    12111    5                   DO WHILE( P$ <= Q$ );
      131    12112    5                       IF P$ -> VX$SC.TYPE = %RLCOMSECTION
      132    12113    6                          OR P$ -> VX$SC.TYPE = %RORLCOMSECTION THEN DO;
      133    12114    6                           SBIN_NAME_DISP = P$ -> VX$SC.NAME_DISP;
      134    12115    7                           IF SBIN_NAME_DISP > 0 THEN DO;
      135    12116    7                               R$ = PINCRW( DN_ROOT_START$, P$ -> VX$SC.NAME_DISP );
      136    12117    7                               SBIN_NAME_DISP = POFFW( N$, DN_ROOT_START$ );
      137    12118    7                               K = R$ -> B$DNAME.COUNT;
      138    12119    7                               N$ -> B$DNAME.COUNT = K;
      139    12120    7                               N$ -> B$DNAME.TEXT = R$ -> B$DNAME.TEXT;
      140    12121    7                               N$ = PINCRW( N$,
      141    12122                                       %TEXTH_SIZEW(CNT=K);
      142    12125    7                               );
      143    12126    7                               END; /* If P$ -> VX$SC.NAME_DISP > 0 then do; */
      144    12127    6                           T$ -> VX$SC = P$ -> VX$SC;
      145    12128    6                           T$ -> VX$SC.NAME_DISP = SBIN_NAME_DISP;
      146    12129    6                           T$ = PINCRW( T$, SIZEW( VX$SC ) );
      147    12130    6                           END; /* If P$->VX$SC.TYPE = rlcomsection */
      148    12131    5                       P$ = PINCRW( P$, SIZEW( VX$SC ) );
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:25   
      149    12132    5                       END; /* Do while( P$ <= Q$ ); */
      150    12133    4                   J = POFFW( N$, VX_ROOT$ -> VX$NODE.L_START.DN$ );
      151    12134    4                   VX_ROOT$ -> VX$NODE.L_SIZE.DN = J;
      152    12135    4                   VX_ROOT$ -> VX$NODE.L_STOP.DN$ = PINCRW( VX_ROOT$ -> VX$NODE.L_START
             12135                            .DN$,
      153    12136    4                      J - VX_REC_SIZE_A(%TYPDNAM) );
      154    12137    4                   J = POFFW( T$, VX_ROOT$ -> VX$NODE.L_START.SC$ );
      155    12138    4                   VX_ROOT$ -> VX$NODE.L_SIZE.SC = J;
      156    12139    4                   VX_ROOT$ -> VX$NODE.L_STOP.SC$ = PINCRW( VX_ROOT$ -> VX$NODE.L_START
             12139                            .SC$,
      157    12140    4                      J - VX_REC_SIZE_A(%TYPSECT) );
      158    12141    4                   END; /* If P$ ~= addr(nil) then do; */
      159    12142    3               END; /* If VX_ROOT$ -> VX$NODE.SON$ ~= addr(nil) ... */
      160    12143    2           N$ = PINCRW( VX_ROOT$ -> VX$NODE.L_START.DN$,
      161    12144    2              VX_ROOT$ -> VX$NODE.L_SIZE.DN );
      162    12145    2           BIN_START$ = VX_ROOT$ -> VX$NODE.L_START.DD$;
      163    12146    2           BIN_STOP$ = VX_ROOT$ -> VX$NODE.L_STOP.DD$;
      164    12147    2           BIN_N$ = VX_ROOT$ -> VX$NODE.L_START.DN$;
      165    12148    2           IF VX_DCB_START$ = ADDR(NIL) THEN GOTO DONE_DCB_PUMP_UP;
      166    12149    2           DCB_CURR$ = VX_DCB_START$;
      167    12150    3           DO WHILE( DCB_CURR$ <= VX_DCB_STOP$ );
      168    12151    3               BIN_MATCH$ = PINCRW( BIN_N$, DCB_CURR$ -> VX$SC.NAME_DISP );
      169    12152                    %BIN_SEARCH(
      170    12153                    START$=BIN_START$,
      171    12154                    STOP$=BIN_STOP$,
      172    12155                    RESULT$=BIN_RESULT$,
      173    12156                    N$=BIN_N$,
      174    12157                    MATCH$=BIN_MATCH$,
      175    12158                    NAME_DISP=2,
      176    12159                    SIZE="SIZEW(VXD$TMPLT)",
      177    12160                    FOUND=FOUND_DCB,
      178    12161                    NEG=%@COMMENT,
      179    12162                    GEN=%@TNEMMOC,
      180    12163                    ALTRETURN=LINK_ERROR,
      181    12164                    EMPTY=LINK_ERROR);
             12166    3           IF START$ = ADDR(NIL) THEN GOTO EMPTY;
             12167    4           IF POFFW( STOP$, START$ ) / SIZE < TRADE_OFF_POINT THEN DO;
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:26   
             12168    4              RESULT$ = START$;            /* Sequential search                  */
             12169    5              DO WHILE( RESULT$ <= STOP$ );
             12170    5                 NTEMP$ = PINCRW( N$, RESULT$ -> VX$TMPLT.A(NAME_DISP) ADDITIVE );
             12171    5                 IF NTEMP$ -> B$DNAME.TEXT
             12172    5                   >=
             12173    6                   MATCH$ -> B$DNAME.TEXT THEN DO;
             12174    6                    IF NTEMP$ -> B$DNAME.TEXT
             12175    6                      =
             12176    6                      MATCH$ -> B$DNAME.TEXT THEN GOTO FOUND;
             12177    6                    ELSE GOTO ALTRETURN;
             12178    6                    END;
             12179    5                 RESULT$ = PINCRW( RESULT$, SIZE );
             12180    5                 END;                      /* Do while                           */
             12181    4              GOTO ALTRETURN;
             12182    4              END; /* If poffw( STOP$, START$ ) / size < TRADE_OFF_POINT then do; */
             12183    4           ELSE DO;                        /* Binary search                      */
             12184    4              LOW = 0;
             12185    4              HIGH = POFFW( STOP$, START$ ) / SIZE + 2;
             12186    4              START1$ = PINCRW( START$, -SIZE );
             12187    4   SPLIT:     ;
             12188    4              MID = ( LOW + HIGH ) / 2;
             12189    4              RESULT$ = PINCRW( START1$, MID*SIZE );
             12190    4              NTEMP$ = PINCRW( N$, RESULT$ -> VX$TMPLT.A(NAME_DISP) ADDITIVE );
             12191    4              IF NTEMP$ -> B$DNAME.TEXT
             12192    4                <
             12193    5                MATCH$ -> B$DNAME.TEXT THEN DO;
             12194    5                 LOW = MID;
             12195    5                 GOTO CHECK;
             12196    5                 END;
             12197    4              IF NTEMP$ -> B$DNAME.TEXT
             12198    4                >
             12199    5                MATCH$ -> B$DNAME.TEXT THEN DO;
             12200    5                 HIGH = MID;
             12201    5   CHECK:        ;
             12202    5                 IF LOW + 1    < HIGH THEN GOTO SPLIT;
             12203                                                /* Here => looping or not found       */
             12204                                      /* Result -> < match => a boundary condition    */
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:27   
             12205    5                 NEG              %
             12206    5                   IF PINCRW( N$, RESULT$ -> VX$TMPLT.A(NAME_DISP) ADDITIVE ) ->
             12206                            B$DNAME.TEXT
             12207    5                   <
             12208    5                   MATCH$ -> B$DNAME.TEXT THEN RESULT$ = PINCRW( RESULT$, SIZE );
             12209    5                 GEN              %
             12210    5                   GOTO ALTRETURN;
             12211    5                 END;
             12212    4              END;                         /* Else do;                           */
             12213    3   FOUND:
             12214        /* Here -> found */
      182    12216    3               P$ = PINCRW( BIN_N$, BIN_RESULT$ -> VXD$TMPLT.NPOINTER );
      183    12217
      184    12218    3               K = POFFW( N$, BIN_N$ );
      185    12219    3               T$ = BIN_RESULT$;
      186    12220    4               DO WHILE( T$ >= BIN_START$ );
      187    12221    4                   IF PINCRW( BIN_N$, T$->VXD$TMPLT.NPOINTER ) ->
      188    12222    4                      B$DNAME.TEXT
      189    12223    4                      ~=
      190    12224    4                      BIN_MATCH$ -> B$DNAME.TEXT THEN GOTO SPC_FURTHER_DCB;
      191    12225    4                   T$ -> VXD$TMPLT.NPOINTER = K;
      192    12226    4                   T$ = PINCRW( T$, -SIZEW(VXD$TMPLT) );
      193    12227    4                   END; /* Do while( T$ >= BIN_START$ ); */
      194    12228    3   SPC_FURTHER_DCB:
      195    12229    3               T$ = PINCRW( BIN_RESULT$, SIZEW(VXD$TMPLT) );
      196    12230    4               DO WHILE( T$ <= BIN_STOP$ );
      197    12231    4                   IF PINCRW( BIN_N$, T$->VXD$TMPLT.NPOINTER ) ->
      198    12232    4                      B$DNAME.TEXT
      199    12233    4                      ~=
      200    12234    4                      BIN_MATCH$ -> B$DNAME.TEXT THEN GOTO ALL_DONE_DCB;
      201    12235    4                   T$ -> VXD$TMPLT.NPOINTER = K;
      202    12236    4                   T$ = PINCRW( T$, SIZEW(VXD$TMPLT) );
      203    12237    4                   END; /* Do while( T$ <= BIN_START$ ); */
      204    12238    3   ALL_DONE_DCB:
      205    12239
      206    12240    3               J = P$ -> B$DNAME.COUNT;
      207    12241    3               N$ -> B$DNAME.COUNT = J;
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:28   
      208    12242    3               N$ -> B$DNAME.TEXT = P$ -> B$DNAME.TEXT;
      209    12243    3               N$ = PINCRW( N$,
      210    12244                       %TEXTH_SIZEW(CNT=J);
      211    12247    3               );
      212    12248    3               DCB_CURR$ = PINCRW( DCB_CURR$, SIZEW( VX$SC ) );
      213    12249    3               END; /* Do while( DCB_CURR$ <= VX_DCB_STOP$ ); */
      214    12250    2   DONE_DCB_PUMP_UP:
      215    12251    3           DO I = 0 TO SIZEW( VX_SPC.B$.NAME_A$) - 1;
      216    12252    3               IF VX_SPC.B$.SKIP_A(I) ~= @YES
      217    12253    3                  AND
      218    12254    4                  VX_SPC.B$.MINE_A(I) = @YES THEN DO;
      219    12255    5                   IF I ~= 1 THEN DO;
      220    12256    5                       BIN_MATCH$ = VX_SPC.B$.NAME_A$(I);
      221    12257                            %BIN_SEARCH(
      222    12258                            START$=BIN_START$,
      223    12259                            STOP$=BIN_STOP$,
      224    12260                            RESULT$=BIN_RESULT$,
      225    12261                            N$=BIN_N$,
      226    12262                            MATCH$=BIN_MATCH$,
      227    12263                            NAME_DISP=2,
      228    12264                            SIZE="SIZEW(VXD$TMPLT)",
      229    12265                            FOUND=FOUND_SPC,
      230    12266                            SPLIT=SPLIT_SPC,
      231    12267                            CHECK=CHECK_SPC,
      232    12268                            NEG=%@COMMENT,
      233    12269                            GEN=%@TNEMMOC,
      234    12270                            ALTRETURN=LINK_ERROR,
      235    12271                            EMPTY=LINK_ERROR);
             12273    5           IF START$ = ADDR(NIL) THEN GOTO EMPTY;
             12274    6           IF POFFW( STOP$, START$ ) / SIZE < TRADE_OFF_POINT THEN DO;
             12275    6              RESULT$ = START$;            /* Sequential search                  */
             12276    7              DO WHILE( RESULT$ <= STOP$ );
             12277    7                 NTEMP$ = PINCRW( N$, RESULT$ -> VX$TMPLT.A(NAME_DISP) ADDITIVE );
             12278    7                 IF NTEMP$ -> B$DNAME.TEXT
             12279    7                   >=
             12280    8                   MATCH$ -> B$DNAME.TEXT THEN DO;
             12281    8                    IF NTEMP$ -> B$DNAME.TEXT
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:29   
             12282    8                      =
             12283    8                      MATCH$ -> B$DNAME.TEXT THEN GOTO FOUND;
             12284    8                    ELSE GOTO ALTRETURN;
             12285    8                    END;
             12286    7                 RESULT$ = PINCRW( RESULT$, SIZE );
             12287    7                 END;                      /* Do while                           */
             12288    6              GOTO ALTRETURN;
             12289    6              END; /* If poffw( STOP$, START$ ) / size < TRADE_OFF_POINT then do; */
             12290    6           ELSE DO;                        /* Binary search                      */
             12291    6              LOW = 0;
             12292    6              HIGH = POFFW( STOP$, START$ ) / SIZE + 2;
             12293    6              START1$ = PINCRW( START$, -SIZE );
             12294    6   SPLIT:     ;
             12295    6              MID = ( LOW + HIGH ) / 2;
             12296    6              RESULT$ = PINCRW( START1$, MID*SIZE );
             12297    6              NTEMP$ = PINCRW( N$, RESULT$ -> VX$TMPLT.A(NAME_DISP) ADDITIVE );
             12298    6              IF NTEMP$ -> B$DNAME.TEXT
             12299    6                <
             12300    7                MATCH$ -> B$DNAME.TEXT THEN DO;
             12301    7                 LOW = MID;
             12302    7                 GOTO CHECK;
             12303    7                 END;
             12304    6              IF NTEMP$ -> B$DNAME.TEXT
             12305    6                >
             12306    7                MATCH$ -> B$DNAME.TEXT THEN DO;
             12307    7                 HIGH = MID;
             12308    7   CHECK:        ;
             12309    7                 IF LOW + 1    < HIGH THEN GOTO SPLIT;
             12310                                                /* Here => looping or not found       */
             12311                                      /* Result -> < match => a boundary condition    */
             12312    7                 NEG              %
             12313    7                   IF PINCRW( N$, RESULT$ -> VX$TMPLT.A(NAME_DISP) ADDITIVE ) ->
             12313                            B$DNAME.TEXT
             12314    7                   <
             12315    7                   MATCH$ -> B$DNAME.TEXT THEN RESULT$ = PINCRW( RESULT$, SIZE );
             12316    7                 GEN              %
             12317    7                   GOTO ALTRETURN;
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:30   
             12318    7                 END;
             12319    6              END;                         /* Else do;                           */
             12320    5   FOUND:
             12321        /* Here -> found */
      236    12323    5                       P$ = PINCRW( BIN_N$, BIN_RESULT$ -> VXD$TMPLT.NPOINTER );
      237    12324    5                       K = POFFW( N$, BIN_N$ );
      238    12325    5                       T$ = BIN_RESULT$;
      239    12326    6                       DO WHILE( T$ >= BIN_START$ );
      240    12327    6                           IF PINCRW( BIN_N$, T$->VXD$TMPLT.NPOINTER ) ->
      241    12328    6                              B$DNAME.TEXT
      242    12329    6                              ~=
      243    12330    6                              BIN_MATCH$ -> B$DNAME.TEXT THEN GOTO SPC_FURTHER;
      244    12331    6                           T$ -> VXD$TMPLT.NPOINTER = K;
      245    12332    6                           T$ = PINCRW( T$, -SIZEW(VXD$TMPLT) );
      246    12333    6                           END; /* Do while( T$ >= BIN_START$ ); */
      247    12334    5   SPC_FURTHER:
      248    12335    5                       T$ = PINCRW( BIN_RESULT$, SIZEW(VXD$TMPLT) );
      249    12336    6                       DO WHILE( T$ <= BIN_STOP$ );
      250    12337    6                           IF PINCRW( BIN_N$, T$->VXD$TMPLT.NPOINTER ) ->
      251    12338    6                              B$DNAME.TEXT
      252    12339    6                              ~=
      253    12340    6                              BIN_MATCH$ -> B$DNAME.TEXT THEN GOTO ALL_DONE;
      254    12341    6                           T$ -> VXD$TMPLT.NPOINTER = K;
      255    12342    6                           T$ = PINCRW( T$, SIZEW(VXD$TMPLT) );
      256    12343    6                           END; /* Do while( T$ <= BIN_START$ ); */
      257    12344    5   ALL_DONE:
      258    12345    5                       J = P$ -> B$DNAME.COUNT;
      259    12346    5                       N$ -> B$DNAME.COUNT = J;
      260    12347    5                       N$ -> B$DNAME.TEXT = P$ -> B$DNAME.TEXT;
      261    12348    5                       N$ = PINCRW( N$,
      262    12349                               %TEXTH_SIZEW(CNT=J);
      263    12352    5                       );
      264    12353    5                       END; /* If i ~= 1 then do; */
      265    12354    4                   END; /* If VX_SPC.B$.SKIP_A(I) ~= ... */
      266    12355    3               END; /* Do i = 0 to SIZEW... */
      267    12356    2           J = POFFW( N$, VX_ROOT$ -> VX$NODE.L_START.DN$ );
      268    12357    2           VX_ROOT$ -> VX$NODE.L_SIZE.DN = J;
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:31   
      269    12358    2           VX_ROOT$ -> VX$NODE.L_STOP.DN$ = PINCRW( VX_ROOT$ -> VX$NODE.L_START.DN$,
      270    12359    2              J - VX_REC_SIZE_A(%TYPDNAM) );
      271    12360    2           END; /* If VX_CURR$ = VX_ROOT$ then do; */
      272    12361
      273    12362         /*         Now write out the defs */
      274    12363
      275    12364    1       CURR$ = VX_ROOT$;
      276    12365    1   L00P:
      277    12366    2       DO WHILE (CURR$->VX$NODE.SON$ ~=ADDR(NIL));
      278    12367    2           CURR$ = CURR$->VX$NODE.SON$;
      279    12368    2           END;
      280    12369    2   L00P1: DO I = 1 TO 3;
      281    12370    2           P$ = ADDR(NIL);
      282    12371    2           Q$ = ADDR(NIL);
      283    12372    3           DO CASE(I);
      284    12373    3           CASE(1);
      285    12374    3               P$ = CURR$->VX$NODE.L_START.ED$;
      286    12375    3               Q$ = CURR$->VX$NODE.L_STOP.ED$;
      287    12376    3           CASE(2);
      288    12377    3               P$ = CURR$->VX$NODE.L_START.DD$;
      289    12378    3               Q$ = CURR$->VX$NODE.L_STOP.DD$;
      290    12379    3           CASE(3);
      291    12380    3               P$ = CURR$->VX$NODE.L_START.SD$;
      292    12381    3               Q$ = CURR$->VX$NODE.L_STOP.SD$;
      293    12382    3               END;
      294    12383    3           DO WHILE (P$ <= Q$) AND (P$ ~= ADDR(NIL)) AND (Q$ ~= ADDR(NIL));
      295    12384    3               IF I = 1
      296    12385    3               THEN
      297    12386    3                   P$->VXD$TMPLT.AD.SECTNUM = 0;
      298    12387    3               ELSE
      299    12388    4               DO;
      300    12389    4                   IF NOT P$->VXD$TMPLT.CONSTNT
      301    12390    4                   THEN
      302    12391    4                       P$->VXD$TMPLT.AD.SECTNUM = 0;
      303    12392    4                   END;
      304    12393    3               P$ = PINCRW(P$,SIZEW(VXD$TMPLT));
      305    12394    3               END;
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:32   
      306    12395    2           END; /* I*/
      307    12396    1       R$ = CURR$;
      308    12397    1       R$->VX$NODE.PATH$ = ADDR(NIL);
      309    12398    2       DO WHILE (R$->VX$NODE.FATHER$ ~= ADDR(NIL));
      310    12399    2           R$->VX$NODE.FATHER$->VX$NODE.PATH$ = R$;
      311    12400    2           R$ = R$->VX$NODE.FATHER$;
      312    12401    2           END;
      313    12402    1       IF CURR$->VX$NODE.BROTHER$ ~= ADDR(NIL)
      314    12403    1       THEN
      315    12404    2       DO;
      316    12405    2           CURR$ = CURR$->VX$NODE.BROTHER$;
      317    12406    2           GOTO L00P;
      318    12407    2           END;
      319    12408    1       ELSE
      320    12409    2       DO;
      321    12410    2           CURR$ = CURR$->VX$NODE.FATHER$;
      322    12411    2           IF CURR$ ~= ADDR(NIL)
      323    12412    2           THEN GOTO L00P1;
      324    12413    2           END;
      325    12414    2       DO I = 0 TO SIZEW( VX_DEF_REC_A ) - 1;
      326    12415    2           J = VX_DEF_REC_A(I);
      327    12416    2           SIZE = VX_CURR$ -> VX$NODE.L_SIZE_A(J);
      328    12417    3           IF SIZE > 0 THEN DO;
      329    12418    4               DO CASE(I);
      330    12419    4               CASE(0);
      331    12420    4                   IF VX_RU_HEAD.NRECSIZE < SIZE THEN VX_RU_HEAD.NRECSIZE = SIZE;
      332    12421    4               CASE(1);
      333    12422    4                   IF VX_RU_HEAD.EPRECSIZE < SIZE THEN VX_RU_HEAD.EPRECSIZE = SIZE;
      334    12423    4               CASE(2);
      335    12424    4                   IF VX_RU_HEAD.EDRECSIZE < SIZE THEN VX_RU_HEAD.EDRECSIZE = SIZE;
      336    12425    4               CASE(3);
      337    12426    4                   IF VX_RU_HEAD.SDRECSIZE < SIZE THEN VX_RU_HEAD.SDRECSIZE = SIZE;
      338    12427    4                   END;
      339    12428    3               CALL VXK$KEY( @RF,
      340    12429    3                  J,
      341    12430    3                  VX_CURR$ -> VX$NODE.NUM,
      342    12431    3                  0 );
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:33   
      343    12432    3               CALL VXI$WRITE( @RF,
      344    12433    3                  VX_CURR$ -> VX$NODE.L_START_A$(J),
      345    12434    3                  SIZE,
      346    12435    3                  @RF );
      347    12436    3               END; /* If size > 0 then do; */
      348    12437    2           END; /* Do i = 0 to sizew( VX_DEF_REC_A ) - 1; */
      349    12438         /*
      350    12439            Now write out the sections
      351    12440         */
      352    12441    1       SIZE = VX_CURR$ -> VX$NODE.L_SIZE.SC;
      353    12442    2       IF SIZE > 0 THEN DO;
      354    12443    2           CALL VXQ$SORT_V( ADDR(NIL),
      355    12444    2              VX_CURR$ -> VX$NODE.L_START.SC$,
      356    12445    2              VX_CURR$ -> VX$NODE.L_STOP.SC$,
      357    12446    2              SIZEW( VX$SC ),
      358    12447    2              @BY_VALUE,
      359    12448    2              2,
      360    12449    2              %TYPSECT );
      361    12450    3           IF SIZE > SIZEW( VX$SC ) THEN DO;
      362    12451    3               P$ = VX_CURR$ -> VX$NODE.L_START.SC$;
      363    12452    3               Q$ = VX_CURR$ -> VX$NODE.L_STOP.SC$;
      364    12453    4               DO WHILE( P$ < Q$ );
      365    12454    4                   J = P$ -> VX$SC.SIZE;
      366    12455    4                   IF J <= 0 THEN T$ = ADDR(NIL);
      367    12456    4                   ELSE T$ = P$;
      368    12457    4                   R$ = PINCRW( P$, SIZEW( VX$SC ) );
      369    12458    5                   DO WHILE( R$ -> VX$SC.ADDRESS
      370    12459    5                      =
      371    12460    5                      P$ -> VX$SC.ADDRESS );
      372    12461    6                       IF R$ -> VX$SC.SIZE > J THEN DO;
      373    12462    6                           J = R$ -> VX$SC.SIZE;
      374    12463    6                           IF T$ = ADDR(NIL) THEN T$ = R$;
      375    12464    6                           END; /* If R$ -> VX$SC.SIZE > j then do; */
      376    12465    5                       R$ = PINCRW( R$, SIZEW( VX$SC ) );
      377    12466    5                       IF R$ > Q$ THEN GOTO JUMP_OUT_SC;
      378    12467    5                       END; /* Do while( R$ -> VX$SC.ADDRESS = ... */
      379    12468    4   JUMP_OUT_SC:
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:34   
      380    12469    4                   IF T$ ~= ADDR(NIL) THEN T$ -> VX$SC.SIZE = J;
      381    12470    4                   P$ = R$;
      382    12471    4                   END; /* Do while( P$ < Q$ ); */
      383    12472    3               END; /* If size > sizew( VX$SC ) then do; */
      384    12473    2           CALL VXK$KEY( @RF,
      385    12474    2              %TYPSECT,
      386    12475    2              VX_CURR$ -> VX$NODE.NUM,
      387    12476    2              0 );
      388    12477    2           CALL VXI$WRITE( @RF,
      389    12478    2              VX_CURR$ -> VX$NODE.L_START.SC$,
      390    12479    2              SIZE,
      391    12480    2              @RF );
      392    12481    2           END; /* If size > 0 then do; */
      393    12482
      394    12483    2       IF VX_CURR$ -> VX$NODE.BROTHER$ ~= ADDR(NIL) THEN DO;
      395    12484    2           VX_CURR$ = VX_CURR$ -> VX$NODE.BROTHER$;
      396    12485    2           GOTO DEPTH_WRITE;
      397    12486    2           END;
      398    12487    2       ELSE DO;
      399    12488    2           VX_CURR$ = VX_CURR$ -> VX$NODE.FATHER$;
      400    12489    2           IF VX_CURR$ ~= ADDR(NIL) THEN GOTO WRITE;
      401    12490    2           END; /* Else do; */
      402    12491
      403    12492         /* Check if bref table needs to be laid in */
      404    12493    2       IF VX_NEXT_BREF$ ~= VX_BREF_START$ THEN DO;
      405    12494                %MOVE_PAGE(
      406    12495                MOVE_SOURCE$=VX_BREF_START$,
      407    12496                MOVE_PAGE_SIZE="POFFW(VX_NEXT_BREF$,VX_BREF_START$)",
      408    12497                MOVE_ADR=VX_BREF_ADR,
      409    12498                MOVE_UNIT=@BUF_SIZE,
      410    12499                MOVE_BUFTYP=@PROC,
      411    12500                MOVE_NODE#=0);
      412    12518    2           END; /* If VX_BREF_NEXT$ ~= VX$BREF_START$ then do; */
      413    12519        %PLIST;
      414    12520
      415    12521    2       IF VX_ROS_ALLOWED THEN DO;
      416    12522    2           TREE_ADR = VX_TREE_ADR;
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:35   
      417    12523    2           NAME_ADR = TREE_ADR
      418    12524    2              +
      419    12525    2              SIZEW( VX$TREE_HEADER )
      420    12526    2              +
      421    12527    2              SIZEW( VX$TREE_NODE ) * ( VX_NODE_NUMBER + 1);
      422    12528    2           CALL VXU$SETUP( NODE$,
      423    12529    2              @ROS,
      424    12530    2              TREE_ADR,
      425    12531    2              SIZEW( VX$TREE_HEADER ),
      426    12532    2              0 );
      427    12533    2           NODE$ -> VX$TREE_HEADER.NODES = VX_NODE_NUMBER + 1;
      428    12534    2           NODE$ -> VX$TREE_HEADER.SIZE = VX_RU_HEAD.ROSIZE - VX_RU_HEAD.TREEDISP;
      429    12535    2           NODE$ -> VX$TREE_HEADER.PRECSIZE = @BUF_SIZE;
      430    12536    2           NODE$ -> VX$TREE_HEADER.MAX_LIB_DATA = VX_SLIB_MAX_DATA;
      431    12537    2           P$ = ADDR( NODE$ -> VX$TREE_HEADER.LIB$ );
      432    12538    2           P$ -> VX$WORD_A(0) = VX_SPC.SEG.VALUE.ROS;
      433    12539    2           P$ -> VX$HALF_A(0) = NAME_ADR;
      434    12540    3           IF VX_SLIB_INIT$ ~= ADDR(NIL) THEN DO;
      435    12541    3               S_NAME$ = VX_SLIB_INIT$ -> VX$LST.P.NAME_.NAME$;
      436    12542    3               NAME_SIZE =
      437    12543                       %TEXTC_SIZEW(CNT="S_NAME$->T$C.COUNT");
      438    12546    3               ;
      439    12547    3               CALL VXU$SETUP( NAME$,
      440    12548    3                  @ROS,
      441    12549    3                  NAME_ADR,
      442    12550    3                  NAME_SIZE,
      443    12551    3                  0 );
      444    12552    3               NAME$ -> T$C.COUNT = S_NAME$ -> T$C.COUNT;
      445    12553    3               NAME$ -> T$C.CHARS = S_NAME$ -> T$C.CHARS;
      446    12554    3               NAME_ADR = NAME_ADR + NAME_SIZE;
      447    12555    3               END;
      448    12556    3           ELSE DO; /* No library */
      449    12557    3               P$ -> VX$WORD_A(0) = VX_SPC.SEG.VALUE.NUL;
      450    12558    3               END; /* Else do; */
      451    12559    2           NODE_ADR = TREE_ADR + SIZEW( VX$TREE_HEADER );
      452    12560    2           VX_CURR$ = VX_ROOT$;
      453    12561    2   NEXT_NODE:
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:36   
      454    12562         /*
      455    12563            Build tree entries here
      456    12564         */
      457    12565    2           CALL VXU$SETUP( NODE$,
      458    12566    2              @ROS,
      459    12567    2              ( NODE_ADR + ( VX_CURR$ -> VX$NODE.NUM * SIZEW( VX$TREE_NODE ) )),
      460    12568    2              SIZEW( VX$TREE_NODE ),
      461    12569    2              0 );
      462    12570    2           NODE$ -> VX$TREE_NODE = '0'B;
      463    12571    2           T$ = VX_CURR$ -> VX$NODE.FATHER$;
      464    12572    2           IF T$ = ADDR(NIL) THEN NODE$ -> VX$TREE_NODE.BACK# = -1;
      465    12573    2           ELSE NODE$ -> VX$TREE_NODE.BACK# = T$ -> VX$NODE.NUM;
      466    12574    2           T$ = VX_CURR$ -> VX$NODE.SON$;
      467    12575    2           IF T$ = ADDR(NIL) THEN NODE$ -> VX$TREE_NODE.FORWARD# = -1;
      468    12576    2           ELSE NODE$ -> VX$TREE_NODE.FORWARD# = T$ -> VX$NODE.NUM;
      469    12577    2           T$ = VX_CURR$ -> VX$NODE.BROTHER$;
      470    12578    2           IF T$ = ADDR(NIL) THEN NODE$ -> VX$TREE_NODE.OVERLAY# = -1;
      471    12579    2           ELSE NODE$ -> VX$TREE_NODE.OVERLAY# = T$ -> VX$NODE.NUM;
      472    12580    2           NODE$ -> VX$TREE_NODE.PADDR = VX_CURR$ -> VX$NODE.ADDR_START.RPROC;
      473    12581    2           NODE$ -> VX$TREE_NODE.DADDR = VX_CURR$ -> VX$NODE.ADDR_START.RDATA;
      474    12582    2           NODE$ -> VX$TREE_NODE.PSIZE = VX_CURR$ -> VX$NODE.ADDR_STOP.RPROC
      475    12583    2              -
      476    12584    2              VX_CURR$ -> VX$NODE.ADDR_START.RPROC + 1;
      477    12585    2           NODE$ -> VX$TREE_NODE.DSIZE = VX_CURR$ -> VX$NODE.ADDR_STOP.RDATA
      478    12586    2              -
      479    12587    2              VX_CURR$ -> VX$NODE.ADDR_START.RDATA + 1;
      480    12588    3           IF VX_NODE_NUMBER > 0 THEN DO;
      481    12589    3               P$ = VX_CURR$ -> VX$NODE.L_START.ED$;
      482    12590    4               IF P$ ~= ADDR(NIL) THEN DO;
      483    12591    4                   Q$ = VX_CURR$ -> VX$NODE.L_STOP.ED$;
      484    12592    4                   LEAST = P$ -> B$EDEF.ISADDR;
      485    12593    5                   DO WHILE( P$ <= Q$ );
      486    12594    5                       IF P$ -> B$EDEF.ISADDR < LEAST THEN LEAST = P$ -> B$EDEF.ISADDR;
      487    12595    5                       P$ = PINCRW( P$, SIZEW( B$EDEF ) );
      488    12596    5                       END; /* Do while( P$ <= Q$ ); */
      489    12597    4                   LEAST_ENTRY.LH = LEAST;
      490    12598    4                   NODE$ -> VX$TREE_NODE.ENTRY$ = LEAST_ENTRY$;
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:37   
      491    12599    4                   END; /* If P$ ~= addr(nil) then do; */
      492    12600    3               ELSE GOTO SET_NIL;
      493    12601    3               END; /* If VX_NODE_NUMBER > 0 then do; */
      494    12602    2           ELSE
      495    12603    2   SET_NIL:
      496    12604    2               NODE$ -> VX$TREE_NODE.ENTRY$ = ENTADDR( NIL );
      497    12605    2           P$ = ADDR( NODE$ -> VX$TREE_NODE.NAME$ );
      498    12606    2           P$ -> VX$WORD_A(0) = VX_SPC.SEG.VALUE.ROS;
      499    12607    2           P$ -> VX$HALF_A(0) = NAME_ADR - VX_TREE_ADR;
      500    12608    2           IF VX_CURR$ -> VX$NODE.HEAD$ -> VX$LST.TYPE = @OF
      501    12609    2              AND VX_CURR$ -> VX$NODE.HEAD$ -> VX$LST.SUB_TYPE = @OF_LIST
      502    12610    3           THEN DO ;
      503    12611    3               S_NAME$ = VX_CURR$ -> VX$NODE.HEAD$ -> VX$LST.OBJECT_NAME$ ;
      504    12612    3               NODE_NAME.COUNT = S_NAME$ -> T$C.COUNT - 1;
      505    12613    3               NODE_NAME.TEXT = SUBSTR( S_NAME$->T$C.CHARS, 1 ) ;
      506    12614    3               END ;
      507    12615    2           ELSE
      508    12616    2               NODE_NAME = VX_CURR$ -> VX$NODE.HEAD$ -> VX$LST.P.NAME_.NAME$ -> T$C ;
      509    12617    2           NAME_SIZE =
      510    12618                   %TEXTC_SIZEW( CNT="NODE_NAME.COUNT" ) ;
      511    12621    2           ;
      512    12622    2           CALL VXU$SETUP( NAME$,
      513    12623    2              @ROS,
      514    12624    2              NAME_ADR,
      515    12625    2              NAME_SIZE,
      516    12626    2              0 );
      517    12627    2           NAME$ -> T$C.COUNT = NODE_NAME.COUNT ;
      518    12628    2           NAME$ -> T$C.CHARS = NODE_NAME.TEXT ;
      519    12629    2           NAME_ADR = NAME_ADR + NAME_SIZE;
      520    12630    3           IF VX_CURR$ -> VX$NODE.SON$ ~= ADDR(NIL) THEN DO; /* Step to son */
      521    12631    3               VX_CURR$ = VX_CURR$ -> VX$NODE.SON$;
      522    12632    3               GOTO NEXT_NODE;
      523    12633    3               END;
      524    12634    3           ELSE DO;
      525    12635    3   CHECK_BROTHER:
      526    12636    4               IF VX_CURR$ -> VX$NODE.BROTHER$ ~=ADDR(NIL) THEN DO;
      527    12637    4                   VX_CURR$ = VX_CURR$ -> VX$NODE.BROTHER$; /* Step to brother */
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:38   
      528    12638    4                   GOTO NEXT_NODE;
      529    12639    4                   END;
      530    12640    4               ELSE DO;
      531    12641    4                   VX_CURR$ = VX_CURR$ -> VX$NODE.FATHER$;
      532    12642    4                   IF VX_CURR$ ~= ADDR(NIL) THEN GOTO CHECK_BROTHER;
      533    12643    4                   END;
      534    12644    3               END;
      535    12645    2           END; /* If VX_ROS_ALLOWED then do; */
      536    12646
      537    12647    2       IF VX_SLIB_INIT$ ~= ADDR(NIL) THEN DO;
      538    12648    2           P$ = VX_SLIB_INIT$ -> VX$LST.P.NAME_.NAME$;
      539    12649    2           VX_RU_HEAD.LIBNAME.CNT = P$ -> T$C.COUNT;
      540    12650    2           VX_RU_HEAD.LIBNAME.TXT = P$ -> T$C.CHARS;
      541    12651    2           END;
      542    12652        %EJECT;
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:39   
      543    12653         /*
      544    12654            Do error checking.
      545    12655         */
      546    12656    2       DO I = 0 TO SIZEW( VX_O.DCB_MATCH_A$ ) - 1;
      547    12657    2           IF VX_OD.DCB_MATCH_A$(I)
      548    12658    2              AND
      549    12659    3              NOT VX_O.DCB_MATCH_HIT_A(I) THEN DO;
      550    12660        /*E*  ERROR: VXT-E$NO_DCB_CORR_VX-0
      551    12661              MESSAGE: DCB %U1 was not encountered.
      552    12662                       No function performed for the %U2 option.
      553    12663              DESCRIPTION: Self-explanatory.
      554    12664        */
      555    12665    3               VX_EFIELD2.COUNT = 10;
      556    12666    3               VX_EFIELD2.CHARS = VX_DCB_OPTION_TEXT(I);
      557    12667    4               IF VX_O.DCB_MATCH_A$(I) ~= ADDR(NIL) THEN DO;
      558    12668    4                   VX_EFIELD1.COUNT = VX_O.DCB_MATCH_A$(I) -> B$DNAME.COUNT;
      559    12669    4                   VX_EFIELD1.CHARS = VX_O.DCB_MATCH_A$(I) -> B$DNAME.TEXT;
      560    12670    4                   J = E$NO_DCB_CORR_VX;
      561    12671    4                   END;
      562    12672    3               ELSE J = E$NO_DCB_CORR_ALT_VX;
      563    12673        /*E*  ERROR: VXT-E$NO_DCB_CORR_ALT_VX-0
      564    12674              MESSAGE: No function performed for the %U2 option.
      565    12675              DESCRIPTION: Self-explanatory.
      566    12676        */
      567    12677                    %SCREAM(
      568    12678                    ERR#=J,
      569    12679                    LEVEL=@E$W_VX,
      570    12680                    MID="'T'");
      571    12683    3               VX_ERR_SEV = MAXIMUM ( VX_ERR_SEV, 2 ) ;
      572    12684    3               END; /* If VX_O.DCB_MATCH_A$(I) ~= addr(nil) and ... */
      573    12685    2           END; /* Do i = 0 to sizew( VX_O.DCB_MATCH_A$ ) - 1; */
      574    12686    2       IF VX_BREF_INSTANCE > 0 THEN DO;
      575    12687        /*E*  ERROR: VXT-E$BREF_INSTANCE_VX-0
      576    12688              MESSAGE: Number of branch reference instances = %U1.
      577    12689              DESCRIPTION: Self-explanatory.
      578    12690        */
      579    12691                %NUMBER(
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:40   
      580    12692                NUM1=VX_BREF_INSTANCE, SIZE1=6, BASE1=10);
      581    12709                %SCREAM(
      582    12710                ERR#=E$BREF_INSTANCE_VX,
      583    12711                LEVEL=@E$I_VX,
      584    12712                MID="'T'");
      585    12715        /*E*  ERROR: VXT-E$BREF_DEFINITION_VX-0
      586    12716              MESSAGE: Number of unique branch reference targets = %U1.
      587    12717              DESCRIPTION: Self-explanatory.
      588    12718        */
      589    12719                %NUMBER(
      590    12720                NUM1=VX_BREF_DEFINITION, SIZE1=6, BASE1=10);
      591    12737                %SCREAM(
      592    12738                ERR#=E$BREF_DEFINITION_VX,
      593    12739                LEVEL=@E$I_VX,
      594    12740                MID="'T'");
      595    12743    2           END; /* If VX_BREF_INSTANCE > 0 then do; */
      596    12744         /* Check for a valid start address if ru is a user flavor one or
      597    12745            an asl flavored one. */
      598    12746    1       IF VX_O.SIN_A(@C_SLIB_KEY_WORD - 1) = 0 AND
      599    12747    1          VX_O.NUM_A(@C_START_KEY_WORD - 1) < 0 AND
      600    12748    2          VX_O.OPT.START < 0 THEN DO;
      601    12749                %SCREAM(
      602    12750                ERR#=E$MAIN_NO_START_VX,
      603    12751                LEVEL=@E$W_VX,MID="'M'");
      604    12754    2           END;
      605    12755        /*E*     ERROR: VXM-E$MAIN_NO_START_VX
      606    12756                 MESSAGE: No start address specified for the target RU.
      607    12757                 DESCRIPTION: Either an object unit in the object unit list
      608    12758                      does not specify a start address or no START option
      609    12759                      was specified to the linker and the target RU is a
      610    12760                      vanilla "user" kind or an ASL.
      611    12761        */
      612    12762    1       IF
      613    12763    1          VX_ERRORS.MULTIPLE = 0
      614    12764    1          AND
      615    12765    1          VX_ERRORS.UNSAT.UNSAT_PRIMARY = 0
      616    12766    1          AND
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:41   
      617    12767    1          VX_ERRORS.UNSAT.UNSAT_SECONDARY = 0
      618    12768    1          AND
      619    12769    1          VX_ERRORS.CONFLICT.ALTRIT = 0
      620    12770    1          AND
      621    12771    1          VX_ERRORS.CONFLICT.PARM = 0
      622    12772    1          AND
      623    12773    1          VX_ERRORS.CONFLICT.CST = 0
      624    12774    1          AND
      625    12775    1          VX_ERR_SEV <= 0
      626    12776    2       THEN DO;
      627    12777        /*E*  ERROR: VXT-E$NOERRORS_VX-0
      628    12778              MESSAGE: No linking errors.
      629    12779              DESCRIPTION: Self-explanatory.
      630    12780        */
      631    12781                %SCREAM(
      632    12782                ERR# = E$NOERRORS_VX,
      633    12783                LEVEL=@E$I_VX,
      634    12784                MID="'T'");
      635    12787    2           END;
      636    12788    2       ELSE DO;
      637    12789        /*E*  ERROR: VXT-E$MULTIPLY_DEF_VX-0
      638    12790              MESSAGE: %U1 multiply defined symbol(s).
      639    12791              DESCRIPTION: Self-explanatory.
      640    12792        */
      641    12793        /*E*  ERROR: VXT-E$UNSAT_PRI_VX-0
      642    12794              MESSAGE: %U1 unsatisfied primary reference(s).
      643    12795              DESCRIPTION: Self-explanatory.
      644    12796        */
      645    12797        /*E*  ERROR: VXT-E$UNSAT_SEC_VX-0
      646    12798              MESSAGE: %U1 unsatisfied secondary reference(s).
      647    12799              DESCRIPTION: Self-explanatory.
      648    12800        */
      649    12801        /*E*  ERROR: VXT-E$CONFLICT_ALTRETURN_VX-0
      650    12802              MESSAGE: %U1 altreturn conflict(s).
      651    12803              DESCRIPTION: Self-explanatory.
      652    12804        */
      653    12805        /*E*  ERROR: VXT-E$CONFLICT_ARG_PARM_VX-0
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:42   
      654    12806              MESSAGE: %U1 argument/parameter conflict(s).
      655    12807              DESCRIPTION: Self-explanatory.
      656    12808        */
      657    12809        /*E*  ERROR: VXT-E$CONFLICT_CALL_SEQ_VX-0
      658    12810              MESSAGE: %U1 calling sequence mismatch(es).
      659    12811              DESCRIPTION: Self-explanatory.
      660    12812        */
      661    12813    2           STOP = SIZEW( VX_ERRORS_A ) - 1;
      662    12814    3           DO I = 0 TO STOP;
      663    12815    3               J = VX_ERRORS_A(I);
      664    12816    4               IF J > 0 THEN DO;
      665    12817                        %NUMBER( NUM1 = J, SIZE1 = 4 );
      666    12834                        %SCREAM(
      667    12835                        ERR#="E$MULTIPLY_DEF_VX+I",
      668    12836                        MID="'T'",
      669    12837                        LEVEL=@E$W_VX);
      670    12840    4                   END;
      671    12841    3               END;
      672    12842    2           END;
      673    12843    2       IF VX_ERR_SEV > 0 THEN DO;
      674    12844        /*E*  ERROR: VXT-E$ERR_SEV_VX-0
      675    12845              MESSAGE: Severity level = %U1.
      676    12846              DESCRIPTION: Self-explanatory.
      677    12847        */
      678    12848                %NUMBER( NUM1=VX_ERR_SEV );
      679    12865                %SCREAM( ERR#=E$ERR_SEV_VX, LEVEL=@E$I_VX, MID="'T'" );
      680    12868    2           END; /* If VX_ERR_SEV       > 0 then do; */
      681    12869        %EJECT;
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:43   
      682    12870         /*
      683    12871            Write anything remaining in image formation buffers
      684    12872         */
      685    12873
      686    12874    2       DO I = 0 TO SIZEW( VX_IMAGE_PTR$ ) - 1;
      687    12875    2           VX_IMAGE$ = VX_IMAGE_PTR$(I);
      688    12876    3           DO J = 0 TO SIZEW( VX$IMAGE.CPAGE#_A ) - 1;
      689    12877    3               IF VX$IMAGE.CPAGE#_A(J) >= 0 THEN
      690    12878    3                   CALL VXU$PAGEOUT( VX$IMAGE.NODE_A$(J), I, J );
      691    12879    3               END; /* Do j = 0 to sizew( VX$IMAGE.CPAGE#_A ) - 1; */
      692    12880    2           END; /* Do i = 0 to sizew( VX$IMAGE_PTR$ ) - 1; */
      693    12881
      694    12882    1       VX_RU_HEAD.S = ~VX_OD.SIN.NSHARED;
      695    12883    1       VX_RU_HEAD.LIB = VX_OD.SIN.SLIB;
      696    12884    1       VX_RU_HEAD.ASL = VX_OD.SIN.ASLIB;
      697    12885    1       VX_RU_HEAD.OVRL = ( VX_NODE_NUMBER >= 1 );
      698    12886    1       VX_RU_HEAD.PROCACC = VX_OD.SIN.PROCACC;
      699    12887    1       VX_RU_HEAD.NOCHGPMEM = VX_OD.SIN.NOCHGPMEM;
      700    12888    1       VX_RU_HEAD.PROCSURCHG = VX_OD.SIN.SURCHARGE;
      701    12889    1       VX_RU_HEAD.RESTPROC = VX_OD.SLOCK | VX_OD.WLOCK;
      702    12890    1       VX_RU_HEAD.STRONG_LOCK = VX_OD.SLOCK;
      703    12891    1       VX_RU_HEAD.NSTDINVOC = VX_OD.SIN.NSTDINVOC;
      704    12892    1       VX_RU_HEAD.STATS = VX_OD.SIN.STATS;
      705    12893    1       VX_RU_HEAD.LOCK = VX_O.LOCK;
      706    12894    1       VX_RU_HEAD.SEV = VX_ERR_SEV;
      707    12895    2       IF VX_O.NUM.START >= 0 THEN DO; /* Check if user override on start address */
      708    12896    2           IF ( VX_ROOT$ -> VX$NODE.ADDR_START.RDATA <= VX_O.NUM.START
      709    12897    2              AND
      710    12898    2              VX_ROOT$ -> VX$NODE.ADDR_STOP.RDATA >= VX_O.NUM.START )
      711    12899    2              OR
      712    12900    2              ( VX_ROOT$ -> VX$NODE.ADDR_START.RPROC <= VX_O.NUM.START
      713    12901    2              AND
      714    12902    2              VX_ROOT$ -> VX$NODE.ADDR_STOP.RPROC >= VX_O.NUM.START ) THEN
      715    12903    2               VX_RU_HEAD.START = VX_O.NUM.START; /* Within root bounds */
      716    12904    3           ELSE DO; /* Here => error; not within root bounds */
      717    12905                    %SCREAM(
      718    12906                    ERR#=E$FIMAGE_START_NOT_ROOT_VX,
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:44   
      719    12907                    LEVEL=@E$W_VX,
      720    12908                    MID="'T'",
      721    12909                    AUX=@E$REFOUOF_VX);
      722    12912    3               GOTO IGNORE_START;
      723    12913    3               END; /* Else do; */
      724    12914    2           END; /* If VX_O.NUM.START >= 0 then do; */
      725    12915    2       ELSE DO;
      726    12916    2   IGNORE_START:
      727    12917    2           IF VX_O.OPT.START >= 0 THEN VX_RU_HEAD.START = VX_O.OPT.START;
      728    12918    2           ELSE VX_RU_HEAD.START = VX_PROGRAM_BIAS.I.DATA;
      729    12919    2           END; /* Else do */
      730    12920    1       VX_RU_HEAD.TCBSIZE = VX_O.NUM.TCB;
      731    12921    1       VX_RU_HEAD.PRECSIZE = @BUF_SIZE;
      732    12922    2       IF VX_O.FID.ALTSHARELIB$ ~= ADDR(NIL) THEN DO;
      733    12923    2           P$ = VX_O.FID.ALTSHARELIB$ -> VX$LST.P.NAME_.NAME$;
      734    12924    2           VX_RU_HEAD.ASLNAME.CNT = P$ -> T$C.COUNT;
      735    12925    2           VX_RU_HEAD.ASLNAME.TXT = P$ -> T$C.CHARS;
      736    12926    2           END;
      737    12927         /* Write birth record */
      738    12928    1       BIRTH_REC.CREATE_UTS = VX_LINK_UTS;
      739    12929    1       BIRTH_REC.RUMED_UTS = 0;
      740    12930    1       BIRTH_REC.COUNT = 0;
      741    12931    1       VX_R_KEY_BUF.FORM0.COUNT = SIZEC( VX_R_KEY_BIRTH );
      742    12932    1       VX_R_KEY_BUF.FORM0.CHARS = VX_R_KEY_BIRTH;
      743    12933    1       CALL VXI$WRITE( @RF,
      744    12934    1          ADDR( BIRTH_REC ),
      745    12935    1          SIZEW( BIRTH_REC ),
      746    12936    1          @RF );
      747    12937         /* Write run unit head record */
      748    12938    1       VX_R_KEY_BUF.FORM0.COUNT = LENGTHC( VX_R_KEY_HEAD );
      749    12939    1       VX_R_KEY_BUF.FORM0.CHARS = VX_R_KEY_HEAD;
      750    12940    1       CALL VXI$WRITE( @RF,
      751    12941    1          ADDR( VX_RU_HEAD ),
      752    12942    1          SIZEW( VX_RU_HEAD ),
      753    12943    1          @RF );
      754    12944         /* Give back memory*/
      755    12945    2       DO I = 0 TO @DATA_SEGS1; /* For all data segs */
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:45   
      756    12946    2           SJ = VX_M_FREE(I); /* Get allocated size */
      757    12947    2           IF I ~= @AUTO_SEG AND SJ > 0 THEN
      758    12948    2               CALL VXF$FREE( I, SJ, 0 );
      759    12949    2           END;
      760    12950         /* Delete the **..**B_PATCH file */
      761    12951    1       IF VX_O.NUM.DPATCH > 0 OR
      762    12952    1          VX_O.NUM.IPATCH > 0
      763    12953    2       THEN DO;
      764    12954    2           CALL VXO$DEL_PATCH_FILE;
      765    12955    2           END;
      766    12956    1       RETURN;
      767    12957        %EJECT;
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:46   
      768    12958    1   LINK_ERROR:
      769    12959        /*E*  ERROR: VXT-E$INTERNAL_DCB_PUMP_VX-0
      770    12960              MESSAGE: Internal LINK error; VXT$POST cannot pump name %U1 to root.
      771    12961              DESCRIPTION: Self-explanatory.
      772    12962        */
      773    12963    1       VX_EFIELD1.COUNT = BIN_MATCH$ -> B$DNAME.COUNT;
      774    12964    1       VX_EFIELD1.CHARS = BIN_MATCH$ -> B$DNAME.TEXT;
      775    12965            %SCREAM(
      776    12966            ERR#=E$INTERNAL_DCB_PUMP_VX,
      777    12967            MID="'T'",
      778    12968            LEVEL=@E$F_VX);
      779    12971    1   IO_ERROR:
      780    12972        /*E*  ERROR: VXT-E$SLIB_HEAD_INIT_VX-0
      781    12973              MESSAGE: I/O error while attempting shared library data lay in.
      782    12974              DESCRIPTION: Self-explanatory.
      783    12975        */
      784    12976            %SCREAM(
      785    12977            ERR#=E$SLIB_HEAD_INIT_VX,
      786    12978            LEVEL=E$F_VX,
      787    12979            MID="'T'");
      788    12982    1   END VXT$POST;

PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:47   
--  Include file information  --

   VX_PSUBS_C.:E05TOU  is referenced.
   F_DCB_D.:E05TOU  is referenced.
   VX_DCB_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_FIXED_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VX_MACRO_C.:E05TOU  is referenced.
   VX_PERR_C.:E05TOU  is referenced.
   VX_SUBS_C.:E05TOU  is referenced.
   VX_SWITCH_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   VX_INC_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VXT$POST.

   Procedure VXT$POST requires 1563 words for executable code.
   Procedure VXT$POST requires 80 words of local(AUTO) storage.

    No errors detected in file VXT$POST.:E05TSI    .

PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:48   

 Object Unit name= VXT$POST                                   File name= VXT$POST.:E05TOU
 UTS= JUL 30 '97 08:41:05.40 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  LblCom even  none    96    140  VX_CONST_DCB
    2  RoData even  UTS      8     10  VXT$POST
    3   Data  even  none     1      1  VXT$POST
    4   Proc  even  none  1563   3033  VXT$POST
    5  RoData even  none    76    114  VXT$POST

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     4      0   yes            yes      Std        0  VXT$POST
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:49   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       4 VXK$KEY
         yes           Std       5 VXU$SETUP
         yes           Std       4 VXE$ERROR
         yes           Std       3 VXU$PAGEOUT
         yes           Std       0 VXO$DEL_PATCH_FILE
 yes     yes           Std       4 VXI$WRITE
         yes           Std       7 VXQ$SORT_V
         yes           Std       3 VXF$FREE
         yes           Std       5 VXD$B2C
                       nStd      0 X66_AUTO_0
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  VX_R_KEY_BUF                          VX_IMAGE_PTR$
     VX_RU_HEAD                            VX_OU_HEAD                            VX_SC_ROOT_LBL_COM
     VX_TREE_ADR                           VX_LINK_UTS                           VX_NODE_NUMBER
     VX_ROOT$                              VX_CURR$                              VX_ERRORS
     VX_ERR_SEV                            VX_PROGRAM_BIAS                       VX_M_FREE
     VX_O                                  VX_OD                                 VX_EFIELD1
     VX_EFIELD2                            VX_IMAGE$                             VX_TARGET_COUNT
     VX_SOURCE_COUNT                       VX_R_KEY_HEAD                         VX_R_KEY_BIRTH
     VX_SLIB_INIT$                         VX_SLIB_MAX_DATA                      VX_BREF_START$
     VX_NEXT_BREF$                         VX_BREF_ADR                           VX_BREF_INSTANCE
     VX_BREF_DEFINITION                    VX_SC_X_NODE$                         VX_DCB_START$
     VX_DCB_STOP$                          VX_REC_SIZE_A                         VX_DEF_REC_A
     VX_SPC                                VX_DCB_OPTION_TEXT                    VX_ROS_ALLOWED
     VX_DCB_SIZEC                          B_VECTNIL
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:50   

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:51   


        1        1        /*M* VXT$POST - does post-processing for pass 2.     */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* PLM=4,STI=0,IND=4,CTI=3,DCI=4,ECI=4,CSI=0,THI=0,DTI=0,ENI=4,
        8        8             CLM=0,SQB,NTB,MOC,CCI=3,NLB,MCL=0,EDMC*/
        9        9        VXT$POST: PROC;

      9  4 000000   000000 700200 xent  VXT$POST     TSX0  ! X66_AUTO_0
         4 000001   000120 000000                    ZERO    80,0

       10       10
       11       11        %INCLUDE VX_INC_C;
       12    10727        %INCLUDE VX_PSUBS_C;
       13    10905        %VX$NODE;

             10917    1   /*******************************************************************************
             10918    1   *                                                                              *
             10919    1   *                          VX$NODE                                                *
             10920    1   *                                                                              *
             10921    1   *******************************************************************************/

             10937    1   DCL 1 VX$NODE      ALIGNED    BASED,
             10938    1         2 SON$ PTR /*(ADDR(NIL))*/, /* Son pointer                      */
             10939    1         2 BROTHER$ PTR /*(ADDR(NIL))*/, /* Brother pointer              */
             10940    1         2 FATHER$ PTR /*(ADDR(NIL))*/, /* Father pointer                */
             10941    1         2 PATH$ PTR /*(ADDR(NIL))*/, /* Path   pointer                  */
             10942    1         2 HEAD$       PTR /*(ADDR(NIL))*/, /* Head pointer to
             10943                              to list of file nodes for this node            */
             10944    1         2 TAIL$ PTR /*(ADDR(NIL))*/, /* Tail pointer to list            */
             10945    1         2 SHARED_LIB_HEAD$ PTR /*(ADDR(NIL))*/,
             10945                  /* Head pointer to shared library list */
             10946    1         2 LIB_HEAD$         PTR /*(ADDR(NIL))*/,
             10946                  /* Head pointer to list of shared libraries
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:52   
             10947                                          which have been mapped to included libraries */
             10948    1         2 NUM          UBIN(36)  UNAL,    /* Node number                        */
             10949    1         2 DEPTH          UBIN(36)  UNAL,  /* Depth; ROOT=0*/
             10950    1         2 ADDR_START_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array            */
             10951    1         2 ADDR_START REDEF  ADDR_START_A,
             10952    1           3 RDATA       SBIN WORD,   /* First address for this node in data     */
             10953    1           3 RPROC       SBIN WORD,   /* First address for this node in proc     */
             10954    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
             10955    1         2 ADDR_STOP_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array            */
             10956    1         2 ADDR_STOP  REDEF  ADDR_STOP_A,
             10957    1           3 RDATA       SBIN WORD,        /* Last address for this node in data */
             10958    1           3 RPROC       SBIN WORD,        /* Last address for this node in proc */
             10959    1           3 ROS       SBIN WORD,          /* Last address for program in ros    */
             10960    1         2 START_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(0*3)*/, /* Array           */
             10961    1         2 START_PAGE# REDEF START_PAGE#_A,
             10962    1           3 RDATA       SBIN WORD,   /* First page    for this node in data     */
             10963    1           3 RPROC       SBIN WORD,   /* First page    for this node in proc     */
             10964    1           3 ROS       SBIN WORD,          /* First page   for program in ros    */
             10965    1         2 STOP_PAGE#_A(0:2/*@ROS*/) SBIN WORD /*(-1*3)*/, /* Array*/
             10966    1         2 STOP_PAGE#  REDEF STOP_PAGE#_A,
             10967    1           3 RDATA       SBIN WORD,   /* Last  page    for this node in data     */
             10968    1           3 RPROC       SBIN WORD,   /* Last  page    for this node in proc     */
             10969    1           3 ROS       SBIN WORD,          /* Last  page   for program in ros    */
             10970    1         2 START_SC_ALL$ PTR /*(ADDR(NIL))*/,
             10970                  /* Starting pointer for common sections for this node */
             10971    1         2 STOP_SC_ALL$ PTR /*(ADDR(NIL))*/,
             10971                  /* Stopping pointer for common sections for this node */
             10972    1         2 L_START,
             10973    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
             10974    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
             10975    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
             10976    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
             10977    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
             10978    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
             10979    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
             10980    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
             10981    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:53   
             10982    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
             10983    1         2 L_START_A$(0:9)     REDEF L_START PTR,
             10984    1         2 L_STOP,
             10985    1           3 SN$ PTR /*(ADDR(NIL))*/, /* Segment definition names        */
             10986    1           3 DN$ PTR /*(ADDR(NIL))*/, /* Def names                       */
             10987    1           3 RN$ PTR /*(ADDR(NIL))*/, /* Ref names                       */
             10988    1           3 SC$ PTR /*(ADDR(NIL))*/, /* Sections                        */
             10989    1           3 ED$ PTR /*(ADDR(NIL))*/, /* Entry defs*/
             10990    1           3 ER$ PTR /*(ADDR(NIL))*/, /* Entry refs*/
             10991    1           3 DD$ PTR /*(ADDR(NIL))*/, /* Data defs                       */
             10992    1           3 DR$ PTR /*(ADDR(NIL))*/, /* Data refs                       */
             10993    1           3 SD$ PTR /*(ADDR(NIL))*/, /* Seg defs                        */
             10994    1           3 SR$ PTR /*(ADDR(NIL))*/, /* Seg refs                        */
             10995    1         2 L_STOP_A$(0:9) REDEF   L_STOP    PTR,
             10996    1         2 L_SIZE,
             10997    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
             10998    1           3 DN      UBIN /*(0)*/, /* Def names                          */
             10999    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
             11000    1           3 SC      UBIN /*(0)*/, /* Sections                           */
             11001    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
             11002    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
             11003    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
             11004    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
             11005    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
             11006    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
             11007    1         2 L_SIZE_A(0:9)  REDEF   L_SIZE    UBIN,
             11008    1         2 L_PREV_SIZE,
             11009    1           3 SN      UBIN /*(0)*/, /* Segment definition names           */
             11010    1           3 DN      UBIN /*(0)*/, /* Def names                          */
             11011    1           3 RN      UBIN /*(0)*/, /* Ref names                          */
             11012    1           3 SC      UBIN /*(0)*/, /* Sections                           */
             11013    1           3 ED      UBIN /*(0)*/, /* Entry defs*/
             11014    1           3 ER      UBIN /*(0)*/, /* Entry refs*/
             11015    1           3 DD      UBIN /*(0)*/, /* Data defs                          */
             11016    1           3 DR      UBIN /*(0)*/, /* Data refs                          */
             11017    1           3 SD      UBIN /*(0)*/, /* Seg defs                           */
             11018    1           3 SR      UBIN /*(0)*/, /* Seg refs                           */
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:54   
             11019    1         2 L_PREV_SIZE_A(0:9)  REDEF   L_PREV_SIZE    UBIN,
             11020    1         2 BIT_MAP                ALIGNED,
             11021    1           3 DATA                  ALIGNED,
             11022    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             11023    1           3 RPROC                 ALIGNED,
             11024    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             11025    1           3 ROS                   ALIGNED,
             11026    1             4 BITS(0:255)          BIT(1)    UNAL /*('0'B*256)*/,
             11027    1         2 L_SC_START,
             11028    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
             11029    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
             11030    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
             11031    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
             11032    1         2 L_SC_START_A$(0:3)  REDEF L_SC_START PTR,
             11033    1         2 L_SC_STOP,
             11034    1           3 SC_BLK_COM$ PTR /*(ADDR(NIL))*/, /* Blank common            */
             11035    1           3 SC_ROOT_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Root labelled common */
             11036    1           3 SC_LBL_COM$ PTR /*(ADDR(NIL))*/, /* Labelled common         */
             11037    1           3 SC_DCB$ PTR /*(ADDR(NIL))*/, /* Dcbs                        */
             11038    1         2 L_SC_STOP_A$(0:3)   REDEF L_SC_STOP  PTR,
             11039    1         2 PROMOTE_HEAD,
             11040    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
             11041    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
             11042    1         2 PROMOTE_HEAD_A$(0:1) REDEF PROMOTE_HEAD     PTR,
             11043    1         2 PROMOTE_TAIL,
             11044    1           3 BLK_COM$              PTR /*(ADDR(NIL))*/,
             11045    1           3 LBL_COM$              PTR /*(ADDR(NIL))*/,
             11046    1         2 PROMOTE_TAIL_A$(0:1) REDEF PROMOTE_TAIL     PTR,
             11047    1         2 HAVE_ASL          BIT(1)    UNAL /*('0'B)*/,
             11048    1         2 ALL_BLK_COM          BIT(1)    UNAL /*('0'B)*/,
             11049    1         2 USE_NODE          BIT(1)    UNAL /*('0'B)*/,
             11050    1         2 *                 BIT(33)   UNAL /*('0'B)*/,
             11051    1         2 BLANK_COMMON$     PTR       ALIGNED /*(ADDR(NIL))*/;

       14    11055        %VXD$TMPLT(EDEF=YES,SDEF=YES,SEGDEF=YES);

             11068    1   /*******************************************************************************
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:55   
             11069    1   *                                                                              *
             11070    1   *                          VXD$TMPLT                                              *
             11071    1   *                                                                              *
             11072    1   *******************************************************************************/

             11076        /*
             11077                  VXD$TMPLT (B$RU_DEF) is used to reference fields common to
             11078                  ENTDEFs, SYMDEFs and SEGDEFs.
             11079        */
             11081    1   DCL 1 VXD$TMPLT BASED ALIGNED,
             11082    1         2 VALUE SBIN UNAL,
             11083                /*K*  VALUE is the value if this entry is a constant.  */
             11084    1         2 AD REDEF VALUE,
             11085                /*K*  AD is the address if this entry is not constant.  */
             11086    1           3 LFLAGS UNAL,
             11087                  /*K*  LFLAGS is the field reserved for loader to flag load
             11088                        time attributes of the definition and must be zero
             11089                        in the object unit. */
             11090    1             4 SOURCE UBIN(3) UNAL,
             11091                    /*K*  SOURCE - Source of this DEF */
             11092    1             4 DEFINED BIT(1) UNAL,
             11093                    /*K*  DEFINED - Set if this DEF defined */
             11094    1             4 MULTIPLE BIT(1) UNAL,
             11095                    /*K*  MULTIPLE - Set if this DEF is multiply defined. */
             11096    1             4 USED BIT(1) UNAL,
             11097                    /*K*  USED - Set if this DEF is used. */
             11098    1           3 LOOKUP_SECTNUM BIT(1) UNAL,
             11099                  /*K*  LOOKUP_SECTNUM is set if the section number is greater
             11100                        than 2048 (RU).  */
             11101    1           3 SECTNUM UBIN(11) UNAL,
             11102                  /*K*  SECTNUM contains an entry number into the section
             11103                        table (TYPE 3).  */
             11104    1           3 ISADDR UBIN HALF UNAL,
             11105                  /*K*  ISADDR - Is Address (RU)  */
             11106    1           3 OFFSET REDEF ISADDR UBIN HALF UNAL,
             11107                  /*K*  OFFSET is the word offset from the origin of the section. */
             11108    1         2 NPOINTER SBIN HALF UNAL,
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:56   
             11109                /*K*  NPOINTER is a word displacement into the name record
             11110                      (TYPE 1) locating the name (of this entry). */
             11111    1         2 CONSTNT BIT(1) UNAL,
             11112                /*K*  CONSTNT is a flag bit to determine the interpretation
             11113                      of word 0.
             11114                      If CONSTNT=0, word 0 is AD which contains LFLAGS,
             11115                                    SECTNUM, and ISADDR or OFFSET.
             11116                      If CONSTNT=1, word 0 is a constant value (VALUE)  */
             11117    1         2 LFLAGS UNAL,
             11118                /*K*  LFLAGS is the field reserved for loader to flag load
             11119                      time attributes and must be zero in the object unit. */
             11120    1           3 MULTIPLE BIT(1) UNAL,
             11121                  /*K*  MULTIPLE - Set if this DEF is multiply defined. */
             11122    1           3 USED BIT(1) UNAL,
             11123                  /*K*  USED - Set if this DEF is used. */
             11124    1           3 SOURCE UBIN(4) UNAL,
             11125                  /*K*  SOURCE - Source of this DEF */
             11126    1           3 IS_DCB BIT(1) UNAL,
             11127                  /*K* IS_DCB - Set if this is a DCB */
             11128    1           3 * BIT(10) UNAL,
             11129                  /*K*  * is reserved for future use and must be zero.  */
             11130    1         2 PROTECTION REDEF LFLAGS,
             11131                /*K*  PROTECTION is used for non-constant SYMDEF OR SEGDEF.  */
             11132    1           3 TYPE UBIN(5) UNAL,
             11133                  /*K*  TYPE is the Protection type.  */
             11134    1           3 * UBIN(12) UNAL;
             11135                  /*K*  * is reserved for future use and must be zero.  */

             11146    1   /*******************************************************************************
             11147    1   *                                                                              *
             11148    1   *                          B$EDEF                                                 *
             11149    1   *                                                                              *
             11150    1   *******************************************************************************/

             11155    1   DCL 1 B$EDEF BASED ALIGNED,
             11156    1         2 LFLAGS UNAL,
             11157                /*K*  LFLAGS is the field reserved for loader to flag load
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:57   
             11158                      time attributes of the definition and must be zero
             11159                      in the object unit. */
             11160    1           3 SOURCE UBIN(3) UNAL,
             11161                  /*K*  SOURCE - Source of this ENTDEF */
             11162    1           3 DEFINED BIT(1)  UNAL,
             11163                  /*K*  DEFINED - Set if this ENTDEF defined */
             11164    1           3 MULTIPLE BIT(1) UNAL,
             11165                  /*K*  MULTIPLE - Set if this ENTDEF is multiply defined. */
             11166    1           3 USED BIT(1) UNAL,
             11167                  /*K*  USED - Set if this ENTDEF is used. */
             11168    1           3 * BIT(2) UNAL,
             11169                  /*K*  * - Unused and must be zero. */
             11170    1           3 FAULTAGS BIT(1) UNAL,
             11171                  /*K*  FAULTAGS - Internal calls fault tags flag. */
             11172    1         2 OU UNAL,
             11173    1           3 SECTNUM UBIN BYTE UNAL,
             11174                  /*K*  SECTNUM contains an entry number into the section
             11175                        table (TYPE 3).  */
             11176    1           3 OFFSET UBIN HALF UNAL,
             11177                  /*K*  OFFSET is the word offset from the origin of the section. */
             11178    1         2 ISADDR REDEF OU UBIN(27) UNAL,
             11179                /*K*  ISADDR - Is Address (RU)  */
             11180    1         2 NPOINTER SBIN HALF UNAL,
             11181                /*K*  NPOINTER is a word displacement into the name record
             11182                      (TYPE 1) locating the name (of this entry). */
             11183    1         2 PRI BIT(1) UNAL,
             11184                /*K*  PRI is a one-bit flag denoting primary entry
             11185                      definition.
             11186                         PRI = 1, primary name (object unit name)
             11187                             = 0, not primary name                 */
             11188    1         2 ALT BIT(1) UNAL,
             11189                /*K*  ALT is a one-bit flag denoting permissible alternate
             11190                      return.
             11191                         ALT = 1, alternate return allowed
             11192                             = 0, alternate return not allowed        */
             11193    1         2 CHECK BIT(1) UNAL,
             11194                /*K*  CHECK is a one-bit flag denoting arguments/parameter
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:58   
             11195                      check and alternate return specification check.
             11196                         CHECK = 0, do not check for matching
             11197                                    arguments/parameters and alternate
             11198                                    return specification check.
             11199                               = 1, check for matching arguments/parameters
             11200                                    and alternate return specification.  */
             11201    1         2 CST UBIN(4) UNAL,
             11202                /*K*  CST is a 4-bit field denoting calling sequence type.
             11203                         CST =  0, Standard CP-6 Callable Procedure
             11204                         CST =  1, Nonstandard Call Type
             11205                         CST =  2, Standard CP-6 Procedure with MAIN attribute
             11206                         CST =  3, Standard CP-6 Procedure with ASYNC attribute
             11207                         CST =  4, Standard CP-6 Function Procedure; a
             11208                                   variable table entry will be present to
             11209                                   define the attributes of the function
             11210                         CST =  5, Same as 0, except USE, AVOID, or
             11211                                   MATERIALIZE attributes specified
             11212                         CST =  7, Same as 2, except USE, AVOID, or
             11213                                   MATERIALIZE attributes specified
             11214                         CST =  8, Same as 3, except USE, AVOID, or
             11215                                   MATERIALIZE attributes specified
             11216                         CST =  9, Same as 4, except USE, AVOID, or
             11217                                   MATERIALIZE attributes specified
             11218                         CST = 13, GCOS domain, save
             11219                         CST = 14, GCOS domain, no save
             11220                         CST = 15, Non-Callable Procedure.          */
             11221    1         2 NPARAM UBIN(11) UNAL;
             11222                /*K*  NPARAM is an 11-bit field denoting number of parameters. */

             11234    1   /*******************************************************************************
             11235    1   *                                                                              *
             11236    1   *                          B$SDEF                                                 *
             11237    1   *                                                                              *
             11238    1   *******************************************************************************/

             11243    1   DCL 1 B$SDEF BASED ALIGNED,
             11244    1         2 VALUE SBIN UNAL,
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:59   
             11245                /*K*  VALUE is the value of the constant segment definition
             11246                      pointer if CONSTNT=1.  */
             11247    1         2 AD REDEF VALUE,
             11248                /*K*  AD - Address (not constant)  */
             11249    1           3 LFLAGS UNAL,
             11250                  /*K*  LFLAGS is the field reserved for loader to flag load
             11251                        time attributes of the definition and must be zero
             11252                        in object unit.  */
             11253    1             4 SOURCE UBIN(3) UNAL,
             11254                    /*K*  SOURCE - Source of this SYMDEF */
             11255    1             4 DEFINED BIT(1) UNAL,
             11256                    /*K*  DEFINED - Set if this SYMDEF is defined */
             11257    1             4 MULTIPLE BIT(1) UNAL,
             11258                    /*K*  MULTIPLE - Set if this SYMDEF is multiply defined. */
             11259    1             4 USED BIT(1) UNAL,
             11260                    /*K*  USED - Set if this SYMDEF is used */
             11261    1             4 * BIT(3) UNAL,
             11262                    /*K*  * - Unused */
             11263    1           3 OU UNAL,
             11264    1             4 SECTNUM UBIN BYTE UNAL,
             11265                    /*K*  SECTNUM contains I, where I is an entry number in the
             11266                          section table (TYPE 3).  */
             11267    1             4 OFFSET UBIN HALF UNAL,
             11268                   /*K* OFFSET is the offset from the origin of section I (See SECTNUM). */
             11269    1           3 ISADDR REDEF OU UBIN(27) UNAL,
             11270                  /*K*  ISADDR - IS Address (RU)  */
             11271    1         2 NPOINTER SBIN HALF UNAL,
             11272                /*K*  NPOINTER is the word displacement into the record of
             11273                      names (TYPE 1) locating the SYMDEF name. */
             11274    1         2 CONSTNT BIT(1) UNAL,
             11275                /*K*  CONSTNT is a flag bit to determine the interpretation
             11276                      of word 0.
             11277                      If CONSTNT=0, word 0 is AD which contains LFLAGS,
             11278                                    SECTNUM, and ISADDR or OFFSET.
             11279                      If CONSTNT=1, word 0 is a constant value (VALUE)  */
             11280    1         2 LFLAGS UNAL,
             11281                /*K*  LFLAGS is the field reserved for loader to flag load
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:60   
             11282                      time attributes and must be zero in the object unit. */
             11283    1           3 MULTIPLE BIT(1) UNAL,
             11284                  /*K*  MULTIPLE - Set if this SYMDEF is multiply defined. */
             11285    1           3 USED BIT(1) UNAL,
             11286                  /*K*  USED - Set if this SYMDEF is used. */
             11287    1           3 SOURCE UBIN(4) UNAL,
             11288                  /*K*  SOURCE - Source of this SYMDEF */
             11289    1           3 IS_DCB BIT(1) UNAL,
             11290                  /*K* IS_DCB - Set if this is a DCB */
             11291    1           3 * BIT(4) UNAL,
             11292                  /*K*  * - Unused */
             11293    1         2 * BIT(6) UNAL;
             11294                /*K*  * is reserved for future use and must be zero. */

             11306    1   /*******************************************************************************
             11307    1   *                                                                              *
             11308    1   *                          B$SEGDEF                                               *
             11309    1   *                                                                              *
             11310    1   *******************************************************************************/

             11315    1   DCL 1 B$SEGDEF BASED ALIGNED,
             11316    1         2 VALUE SBIN UNAL,
             11317                /*K*  VALUE is the value of the constant segment definition
             11318                      pointer if CONSTANT=1.  */
             11319    1         2 S REDEF VALUE,
             11320    1           3 * UBIN(24) UNAL,
             11321    1           3 SEGID UBIN(12) UNAL,
             11322                  /*K*  SEGID - Segid of constant value */
             11323    1         2 AD REDEF VALUE,
             11324                /*K*  AD - Address (not constant )  */
             11325    1           3 LFLAGS UNAL,
             11326                  /*K*  LFLAGS is the field reserved for loader to flag load
             11327                        time attributes of the definition and must be zero
             11328                        in object unit.  */
             11329    1             4 SOURCE UBIN(3) UNAL,
             11330                    /*K*  SOURCE - Source of this SEGDEF */
             11331    1             4 DEFINED BIT(1) UNAL,
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:61   
             11332                    /*K*  DEFINED - Set if this SEGDEF is defined */
             11333    1             4 MULTIPLE BIT(1) UNAL,
             11334                    /*K*  MULTIPLE - Set if this SEGDEF is multiply defined */
             11335    1             4 USED BIT(1) UNAL,
             11336                    /*K*  USED - Set if this SEGDEF is used */
             11337    1             4 * BIT(3) UNAL,
             11338                    /*K*  * is reserved for future use and must be zero. */
             11339    1           3 OU UNAL,
             11340    1             4 SECTNUM UBIN BYTE UNAL,
             11341                    /*K*  SECTNUM is the Section number.  */
             11342    1             4 OFFSET UBIN HALF UNAL,
             11343                    /*K*  OFFSET is the offset within section. */
             11344    1           3 ISADDR REDEF OU UBIN(27) UNAL,
             11345                  /*K*  ISADDR - IS Address (RU)  */
             11346    1         2 NPOINTER SBIN HALF UNAL,
             11347                /*K*  NPOINTER is the word displacement into DEFNAMES record. */
             11348    1         2 CONSTNT BIT(1) UNAL,
             11349                /*K*  CONSTNT is a flag bit to determine the interpretation
             11350                      of word 0.
             11351                      If CONSTNT=0, word 0 is AD which contains LFLAGS,
             11352                                    SECTNUM, and ISADDR or OFFSET.
             11353                      If CONSTNT=1, word 0 is a constant value (VALUE)  */
             11354    1         2 LFLAGS UNAL,
             11355                /*K*  LFLAGS is the field reserved for loader to flag load time
             11356                      attributes and must be zero in the object unit.  */
             11357    1           3 MULTIPLE BIT(1) UNAL,
             11358                  /*K*  MULTIPLE - Set if this SEGDEF is multiply defined */
             11359    1           3 USED BIT(1) UNAL,
             11360                  /*K*  USED - Set if this SEGDEF is used */
             11361    1           3 SOURCE UBIN(4) UNAL,
             11362                  /*K*  SOURCE - Source of this SEGDEF */
             11363    1           3 * BIT(11) UNAL,
             11364                  /*K*  * is reserved for future use and must be zero. */
             11365    1         2 SEG REDEF LFLAGS UNAL,          /* Not constant SEGDEF (RU) */
             11366    1           3 TYPE UBIN(5) UNAL,            /* Segment protection type (RU) */
             11367    1           3 SEGID UBIN(12) UNAL;          /* Segid of segment (RU) */
       15    11371        %VX$SC;
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:62   

             11384    1   /*******************************************************************************
             11385    1   *                                                                              *
             11386    1   *                          VX$SC                                                 *
             11387    1   *                                                                              *
             11388    1   *******************************************************************************/

             11393    1   DCL 1 VX$SC BASED ALIGNED,
             11394    1         2 SEG UBIN(3) UNAL,
             11395                /*K*  SEG - The segment number of this section */
             11396    1         2 TYPE UBIN(6) UNAL,
             11397                /*K*  TYPE -
             11398                      Type code      Section type
             11399                      ---------      ------------
             11400                          0          Data control section with write access.
             11401                          1          Procedure control section.
             11402                          2          Unlabeled common, name pointer must be zero.
             11403                          3          Labeled common, with mandatory name pointer.
             11404                                     This is for labeled common which must be
             11405                                     in the root.
             11406                          4          Labeled common, with mandatory name pointer.
             11407                                     This is for labeled common which need not
             11408                                     be in the root.
             11409                          5          DCB, word 1 is name pointer.
             11410                          6          Data control section with read only access,
             11411                                     word 1 = 0 or name pointer.      */
             11412    1         2 EMPTY BIT(1) UNAL,
             11413                /*K*  EMPTY is the empty bit.  This bit is set if the control
             11414                      section is of size zero.  */
             11415    1         2 ATTR UNAL,
             11416    1           3 INT  UBIN(2) UNAL,
             11417                  /*K*  INT is the Section initialization.  */
             11418    1           3 SEGMENT BIT(1) UNAL,
             11419                  /*K* SEGMENT is set if the Section is defined in a data
             11420                       segment.  */
             11421    1           3 ALL BIT(1) UNAL,
             11422                  /*K*  ALL is set if the Section is allocated.  */
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:63   
             11423    1           3 PRE_DCB BIT(1) UNAL,
             11424                  /*K*  PRE_DCB is set if a Pre_defined DCB.  */
             11425    1           3 MES_INIT BIT(1) UNAL,
             11426    1           3 ALIGN UBIN(2) UNAL,
             11427                  /*K*  ALIGN is the Section alignment.  */
             11428    1         2 ADDRESS UBIN HALF UNAL,
             11429                /*K*  ADDRESS is the address within the Instruction Segment of
             11430                      the entry point of the external procedure.  */
             11431    1         2 NAME_DISP SBIN HALF UNAL,
             11432                /*K*  NAME_DISP is the Name index.  */
             11433    1         2 SIZE UBIN HALF UNAL,
             11434                /*K*  SIZE is the size, in words, of the section.  */
             11435    1         2 NODE# UBIN HALF UNAL,
             11436                /*K*  NODE# is the Node number of section.  */
             11437    1         2 COM_LINK UBIN HALF UNAL;
             11438                /*K*  COM_LINK is used internally by linker to link common sections */

             11448    1   /*******************************************************************************
             11449    1   *                                                                              *
             11450    1   *                          VX$SECT                                                *
             11451    1   *                                                                              *
             11452    1   *******************************************************************************/

             11457    1   DCL 1 VX$SECT BASED ALIGNED,
             11458    1         2 TYPE UBIN BYTE UNAL,
             11459                /*K*  TYPE -
             11460                      Type code      Section type
             11461                      ---------      ------------
             11462                          0          Data control section with write access.
             11463                          1          Procedure control section.
             11464                          2          Unlabeled common, name pointer must be zero.
             11465                          3          Labeled common, with mandatory name pointer.
             11466                                     This is for labeled common which must be
             11467                                     in the root.
             11468                          4          Labeled common, with mandatory name pointer.
             11469                                     This is for labeled common which need not
             11470                                     be in the root.
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:64   
             11471                          5          DCB, word 1 is name pointer.
             11472                          6          Data control section with read only access,
             11473                                     word 1 = 0 or name pointer.
             11474                          7          Constant labeled common, with mandatory name pointer.
             11475                                     This is for labeled common which must be
             11476                                     in the root.
             11477                          8          Constant labeled common, with mandatory name pointer.
             11478                                     This is for labeled common which need not
             11479                                     be in the root.                        */
             11480    1         2 * BIT(1),
             11481                /*K*  * is reserved for future use and must be zero. */
             11482    1         2 INITZERO BIT(1),
             11483                /*K*  INITZERO - if 1, initialize with zero.  */
             11484    1         2 INITUTS BIT(1),
             11485                /*K*  INITUTS - if 1, initialize with UTS.  */
             11486    1         2 SEGMENT BIT(1),
             11487                /*K*  SEGMENT - if 1, specifies that this section is
             11488                                to be placed in the segment specified by
             11489                                SEG_NPOINTER.  */
             11490    1         2 * BIT(3),
             11491                /*K*  * is reserved for future use and must be zero. */
             11492    1         2 BOUND UBIN(2) UNAL,
             11493                /*K*  BOUND - bits 6-7 - defines starting location.
             11494                              00 - starts on even word
             11495                              01 - starts on odd word
             11496                              10 - starts on multiple of 8
             11497                              11 - starts on page boundary     */
             11498    1         2 SIZE UBIN HALF UNAL,
             11499                /*K*  SIZE is the size, in words, of the section.  */
             11500    1         2 NPOINTER SBIN HALF UNAL,
             11501                /*K*  NPOINTER is the word displacement into the name record
             11502                      (TYPE 1) locating the name of this section.  If the
             11503                      field is negative, the section has no name.  */
             11504    1         2 MBZ UBIN HALF UNAL,
             11505                /*K*  MBZ is reserved for future expansion and must be zero. */
             11506    1         2 SEG_NPOINTER REDEF MBZ SBIN HALF UNAL,
             11507                /*K*  SEG_NPOINTER locates a name in the Definition Names
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:65   
             11508                      Section.  The name must be a valid segment name
             11509                      recognized by the linker.  */
             11510    1         2 G66 REDEF MBZ,
             11511                /*K*  G66 is not used on CP-6. */
             11512    1           3 * BIT(9),
             11513    1           3 NSAB BIT(9);
       16    11516        %VX$LST;

             11529    1   /*******************************************************************************
             11530    1   *                                                                              *
             11531    1   *                          VX$LST                                                 *
             11532    1   *                                                                              *
             11533    1   *******************************************************************************/

             11538    1   DCL 1 VX$LST                          ALIGNED BASED,
             11539    1         2 LINK$        PTR,               /* Link to next item                  */
             11540    1         2 TYPE         UBIN( 18) UNAL,    /* Type                               */
             11541    1         2 SUB_TYPE     UBIN( 18) UNAL,    /* Sub-type                           */
             11542    1         2 OBJECT_NAME$ PTR,               /* Pointer to object unit name        */
             11543    1         2 PRIOR$ REDEF OBJECT_NAME$ PTR,  /* Pointer to prior element in list   */
             11544    1         2 SC_HEAD$     PTR,               /* Head pointer to section link list  */
             11545    1         2 LIBSRCH$ REDEF SC_HEAD$ PTR,    /* Pointer to account list for library*/
             11546    1         2 SC_TAIL$     PTR,               /* Tail pointer to section link list  */
             11547    1         2 LIB REDEF SC_TAIL$,             /* Used only by UNSAT library files   */
             11548    1           3 USED UBIN HALF UNAL,          /* 1 => library file used, 0=>not used*/
             11549    1           3 NEEDED UBIN HALF UNAL,   /* 1 => library file needed, 0=>not needed*/
             11550    1         2 P,
             11551    1           3 NAME_       ALIGNED,
             11552    1             4 BOUND      UBIN(20)  UNAL,
             11553    1             4 FLAGSV     UBIN(11)  UNAL,
             11554    1             4 *          BIT(5)    UNAL,
             11555    1             4 NAME$      PTR,
             11556    1           3 ACCT_       ALIGNED,
             11557    1             4 BOUND      UBIN(20)  UNAL,
             11558    1             4 FLAGSV     UBIN(11)  UNAL,
             11559    1             4 *          BIT(5)    UNAL,
             11560    1             4 ACCT$      PTR,
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:66   
             11561    1           3 PASS_       ALIGNED,
             11562    1             4 BOUND      UBIN(20)  UNAL,
             11563    1             4 FLAGSV     UBIN(11)  UNAL,
             11564    1             4 *          BIT(5)    UNAL,
             11565    1             4 PASS$      PTR,
             11566    1           3 SN_         ALIGNED,
             11567    1             4 BOUND      UBIN(20)  UNAL,
             11568    1             4 FLAGSV     UBIN(11)  UNAL,
             11569    1             4 *          BIT(5)    UNAL,
             11570    1             4 SN$        PTR,
             11571    1           3 WSN_        ALIGNED,
             11572    1             4 BOUND      UBIN(20)  UNAL,
             11573    1             4 FLAGSV     UBIN(11)  UNAL,
             11574    1             4 *          BIT(5)    UNAL,
             11575    1             4 WSN$       PTR,
             11576    1           3 B           ALIGNED,
             11577    1             4 RES        BIT(1)    UNAL,
             11578    1             4 ASN        BIT(1)    UNAL,
             11579    1             4 ACCT       BIT(1)    UNAL,
             11580    1             4 *          BIT(33)   UNAL,
             11581    1           3 RES         CHAR(4)   ALIGNED,
             11582    1           3 ASN         UBIN(36)  ALIGNED;
       17    11585        %VX$WORD;

             11597    1   /*******************************************************************************
             11598    1   *                                                                              *
             11599    1   *                          VX$WORD                                                *
             11600    1   *                                                                              *
             11601    1   *******************************************************************************/

             11606    1   DCL VX$WORD_A(0:0)       UBIN(36) ALIGNED    BASED PTR;
             11607    1   DCL VX$HALF_A(0:0)       UBIN(18) HALIGNED   BASED PTR;
             11608    1   DCL VX$BYTE_A(0:0)       UBIN( 9) CALIGNED   BASED PTR;
             11609    1   DCL VX$CHAR_A(0:0)       CHAR( 1) UNAL       BASED PTR;
             11610        /**/
             11611    1   DCL VX$WORD_SBIN_A(0:0)  SBIN WORD ALIGNED   BASED     PTR;
             11612    1   DCL VX$HALF_SBIN_A(0:0)  SBIN HALF HALIGNED  BASED     PTR;
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:67   
             11613    1   DCL VX$BYTE_SBIN_A(0:0)  SBIN HALF CALIGNED  BASED     PTR;
             11614    1   DCL VX$BIT_A(0:0)        BIT(36)   ALIGNED   BASED     PTR;
       18    11617        %TMPLT;

             11629    1   /*******************************************************************************
             11630    1   *                                                                              *
             11631    1   *                          TMPLT                                                 *
             11632    1   *                                                                              *
             11633    1   *******************************************************************************/

             11638    1   DCL 1 VX$TMPLT           ALIGNED BASED, /* Template for defs                  */
             11639    1         2 A(0:3)       UBIN(18)  UNAL,    /* Array access                       */
             11640    1         2 A_SBIN(0:3) REDEF A    SBIN HALF UNAL,
             11641    1         2 W       REDEF     A,            /* By name                            */
             11642    1           3 WORD0       UBIN(36)  UNAL,   /* First word                         */
             11643    1           3 WORD1       UBIN(36)  UNAL;   /* Second word                        */
       19    11646        %T$C;

             11658    1   /*******************************************************************************
             11659    1   *                                                                              *
             11660    1   *                          T$C                                                 *
             11661    1   *                                                                              *
             11662    1   *******************************************************************************/

             11667    1   DCL 1 T$C           BASED     ALIGNED,  /* Text count                         */
             11668    1         2 COUNT        UBIN( 9) UNAL,
             11669    1         2 CHARS        CHAR( T$C.COUNT )   UNAL;
             11670    1   DCL 1 T$C_UNAL      BASED     UNAL,     /* Text count                         */
             11671    1         2 COUNT        UBIN( 9) UNAL,
             11672    1         2 CHARS        CHAR( T$C_UNAL.COUNT ) UNAL;
       20    11675        %BANNER(ARG=SUBS);

             11683    1   /*******************************************************************************
             11684    1   *                                                                              *
             11685    1   *                          SUBS                                                 *
             11686    1   *                                                                              *
             11687    1   *******************************************************************************/
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:68   

       21    11691        %B$RECORDSUBS;
       22    11719        %B$SECTIONSUBS;
       23    11734        %BANNER(ARG=B$DNAME);

             11742    1   /*******************************************************************************
             11743    1   *                                                                              *
             11744    1   *                          B$DNAME                                                *
             11745    1   *                                                                              *
             11746    1   *******************************************************************************/

       24    11750        %B$DNAME( NAME=B$DNAME, STCLASS=BASED);
       25    11769        %B$TREE_TABLE(HDR_NAME=VX$TREE_HEADER,NODE_NAME=VX$TREE_NODE);
       26    11827        %VX$DCB;

             11836    1   /*******************************************************************************
             11837    1   *                                                                              *
             11838    1   *                          VX$DCB                                                 *
             11839    1   *                                                                              *
             11840    1   *******************************************************************************/

             11844        %LIST;
             11845    1   DCL 1 VX$DCB                       ALIGNED   BASED,
             11846    1         2 * CHAR( VX_DCB_SIZEC);
             11847        /* End of actual DCB; now for NAME: Just one word in this description */
             11848        /* Dcb name description */
             11849    1   DCL 1 VX$DCB$T$C                   ALIGNED   BASED,
             11850    1         2 LOGICAL_DCB_NUM             UBIN(3)   UNAL,
             11851    1         2 INT                         BIT(1)    UNAL,      /* '1'=> no relocation
             11852                                                                       '0' => relocation */
             11853    1         2 COUNT                       UBIN(5)   UNAL,
             11854    1         2 CHARS                       CHAR( VX$DCB$T$C.COUNT ) UNAL;
       27    11856        %E;
             11857        %LSET LISTDIR='0'B;

             11864    1   /*******************************************************************************
             11865    1   *                                                                              *
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:69   
             11866    1   *                          ENTRY                                                 *
             11867    1   *                                                                              *
             11868    1   *******************************************************************************/

       28    11872        %ENTRIES;
             11873    1   DCL VXE$ERROR       ENTRY(4);
             11874    1   DCL VXE$ERR         ENTRY(3);
             11875    1   DCL VXE$MERC        ENTRY;
             11876    1   DCL VXE$ERRMSG      ENTRY(3);
             11877    1   DCL VXR$READ        ENTRY( 3 );
             11878    1   DCL VXW$WRITE       ENTRY( 3 );
             11879    1   DCL VXW$WRITE_DO    ENTRY( 2 );
             11880    1   DCL VXD$B2C         ENTRY( 5 );
             11881    1   DCL VXD$C2B         ENTRY( 3 );
             11882    1   DCL VXA$GET         ENTRY( 3 );
             11883    1   DCL VXF$FREE        ENTRY( 3 );
             11884    1   DCL VXQ$SORT        ENTRY( 7 );
             11885    1   DCL VXY$YESNO       ENTRY( 1 );
       29    11887        %ENTRIES_IO;
             11888    1   DCL VXF$OPEN        ENTRY(3) ALTRET;
             11889    1   DCL VXF$CLOSE       ENTRY(3);
             11890    1   DCL VXU$PREAD       ENTRY(12);
             11891    1   DCL VXK$KEY         ENTRY(4);
             11892    1   DCL VXI$READ        ENTRY(4)  ALTRET;
             11893    1   DCL VXI$WRITE       ENTRY(4)  ALTRET;
       30    11895    1   DCL VXQ$SORT_V ENTRY( 7 );
       31    11896    1   DCL VXT$PROC ENTRY;
       32    11897    1   DCL VXT$BNDADR ENTRY;
       33    11898    1   DCL VXT$DUPCHK ENTRY;
       34    11899    1   DCL VXU$SETUP ENTRY(5);
       35    11900    1   DCL VXU$PAGEOUT ENTRY(3);
       36    11901    1   DCL VXO$DEL_PATCH_FILE ENTRY;
       37    11902        %PTR;
             11903        %LSET LISTDIR='0'B;

             11910    1   /*******************************************************************************
             11911    1   *                                                                              *
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:70   
             11912    1   *                          PTR                                                 *
             11913    1   *                                                                              *
             11914    1   *******************************************************************************/

       38    11918        %POINTER;
             11919    1   DCL P$         PTR       ALIGNED AUTO;
             11920    1   DCL Q$         PTR       ALIGNED AUTO;
             11921    1   DCL R$         PTR       ALIGNED AUTO;
       39    11923    1   DCL CURR$ PTR ALIGNED AUTO;
       40    11924    1   DCL DCB_CURR$ PTR ALIGNED AUTO;
       41    11925    1   DCL DN_ROOT_START$ PTR ALIGNED AUTO;
       42    11926    1   DCL WHERE$ PTR ALIGNED AUTO;
       43    11927    1   DCL NEXT$ PTR ALIGNED AUTO;
       44    11928    1   DCL T$ PTR ALIGNED AUTO;
       45    11929    1   DCL NODE$ PTR ALIGNED AUTO;
       46    11930    1   DCL NAME$ PTR ALIGNED AUTO;
       47    11931    1   DCL S_NAME$ PTR ALIGNED AUTO;
       48    11932    1   DCL N$ PTR ALIGNED AUTO;
       49    11933        %VX$PTR$;
             11934    1   DCL VX$PTR$(0:0)         PTR  ALIGNED   BASED( VX_SC_X_NODE$ );
             11935                                      /* Section allocated NODE# to node pointer map  */
       50    11937        %U;
             11938        %LSET LISTDIR='0'B;

             11945    1   /*******************************************************************************
             11946    1   *                                                                              *
             11947    1   *                          UBIN                                                 *
             11948    1   *                                                                              *
             11949    1   *******************************************************************************/

       51    11953        %INDEX;
             11954    1   DCL I          UBIN(36) ALIGNED AUTO;
             11955    1   DCL SI REDEF I SBIN WORD ALIGNED;
             11956    1   DCL J          UBIN(36) ALIGNED AUTO;
             11957    1   DCL SJ REDEF J SBIN WORD ALIGNED;
             11958    1   DCL K          UBIN(36) ALIGNED AUTO;
             11959    1   DCL SK REDEF K SBIN WORD ALIGNED;
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:71   
             11960    1   DCL L          UBIN(36) ALIGNED AUTO;
             11961    1   DCL SL REDEF L    SBIN WORD ALIGNED;
       52    11963    1   DCL MX UBIN(36) ALIGNED AUTO;
       53    11964    1   DCL SAT_MX UBIN(36) ALIGNED AUTO;
       54    11965    1   DCL NEXT UBIN(36) ALIGNED AUTO;
       55    11966    1   DCL TREE_TABLE_SIZE UBIN(36) ALIGNED AUTO;
       56    11967    1   DCL STOP UBIN(36) ALIGNED AUTO;
       57    11968    1   DCL GET UBIN(36) ALIGNED AUTO;
       58    11969    1   DCL VALUE UBIN(36) ALIGNED AUTO;
       59    11970    1   DCL BUFTYPE UBIN(36) ALIGNED AUTO;
       60    11971    1   DCL NODE# UBIN(36) ALIGNED AUTO;
       61    11972    1   DCL SIZE UBIN(36) ALIGNED AUTO;
       62    11973    1   DCL S_SIZE UBIN(36) ALIGNED AUTO;
       63    11974    1   DCL C_SIZE UBIN(36) ALIGNED AUTO;
       64    11975    1   DCL I_SIZE UBIN(36) ALIGNED AUTO;
       65    11976    1   DCL NAME_ADR UBIN(36) ALIGNED AUTO;
       66    11977    1   DCL TREE_ADR UBIN(36) ALIGNED AUTO;
       67    11978    1   DCL NAME_SIZE UBIN(36) ALIGNED AUTO;
       68    11979    1   DCL NODE_ADR UBIN(36) ALIGNED AUTO;
       69    11980    1   DCL DIFF UBIN(36) ALIGNED AUTO;
       70    11981    1   DCL LOOP UBIN(36) ALIGNED AUTO;
       71    11982    1   DCL PR_SIZE UBIN(36) ALIGNED AUTO;
       72    11983        %S;
             11984        %LSET LISTDIR='0'B;

             11991    1   /*******************************************************************************
             11992    1   *                                                                              *
             11993    1   *                          SBIN                                                 *
             11994    1   *                                                                              *
             11995    1   *******************************************************************************/

       73    11999    1   DCL ADR SBIN WORD ALIGNED AUTO;
       74    12000    1   DCL SBIN_NAME_DISP SBIN HALF ALIGNED AUTO;
       75    12001        %BIN_SEARCH_TEMPS(
       76    12002         LOW=BIN_LOW,
       77    12003         HIGH=BIN_HIGH,
       78    12004         START1$=BIN_START1$,
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:72   
       79    12005         MID=BIN_MID,
       80    12006         NTEMP$=BIN_NTEMP$);
             12007    1   DCL LOW             UBIN(36)  ALIGNED AUTO;
             12008    1   DCL HIGH            UBIN(36)  ALIGNED AUTO;
             12009    1   DCL MID             UBIN(36)  ALIGNED AUTO;
             12010    1   DCL NTEMP$          PTR        ALIGNED AUTO;
             12011    1   DCL START1$         PTR       ALIGNED AUTO;
       81    12013        %BIN_SEARCH_VARS(
       82    12014         START$=BIN_START$,
       83    12015         STOP$=BIN_STOP$,
       84    12016         RESULT$=BIN_RESULT$,
       85    12017         N$=BIN_N$,
       86    12018         MATCH$=BIN_MATCH$,
       87    12019         NAME_DISP=BIN_NAME_DISP,
       88    12020         SIZE=BIN_SIZE);
             12021    1   DCL START$          PTR  ALIGNED   AUTO;
             12022    1   DCL STOP$           PTR  ALIGNED   AUTO;
             12023    1   DCL RESULT$         PTR  ALIGNED   AUTO;
             12024    1   DCL N$              PTR  ALIGNED   AUTO;
             12025    1   DCL MATCH$          PTR       ALIGNED   AUTO;
             12026    1   DCL NAME_DISP       UBIN(36)  ALIGNED   AUTO;
             12027    1   DCL SIZE            UBIN(36)  ALIGNED   AUTO;
       89    12029        %IMAGE_BUFFERS( NAME=VX$IMAGE, STCLASS="BASED(VX_IMAGE$)");
             12030    1   DCL 1 NAME           ALIGNED        STCLASS,
             12031    1         2 CPAGE#_A(0:1) SBIN WORD ALIGNED INT_SBIN, /* Current page # in buffer # */
             12032    1         2 CPAGE# REDEF CPAGE#_A,
             12033    1           3 BUF0                  SBIN WORD ALIGNED,
             12034    1           3 BUF1                  SBIN WORD ALIGNED,
             12035    1         2 START_A$(0:1) PTR ALIGNED INT_PTR, /* Pointer to start of buffer #    */
             12036    1         2 START$ REDEF START_A$,
             12037    1           3 BUF0$                 PTR       ALIGNED,
             12038    1           3 BUF1$                 PTR       ALIGNED,
             12039    1         2 STOP_A$(0:1)           PTR       ALIGNED INT_PTR,
             12040    1         2 STOP$  REDEF STOP_A$,           /* Pointer to end of buffer #         */
             12041    1           3 BUF0$                 PTR       ALIGNED,
             12042    1           3 BUF1$                 PTR       ALIGNED,
             12043    1         2 NODE_A$(0:1) PTR ALIGNED INT_PTR, /* Pointer to node  of buffer #     */
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:73   
             12044    1         2 NODE$  REDEF NODE_A$,
             12045    1           3 BUF0$                 PTR       ALIGNED,
             12046    1           3 BUF1$                 PTR       ALIGNED,
             12047    1         2 BEGIN$                 PTR       ALIGNED,
             12048    1         2 END$                   PTR       ALIGNED,
             12049    1         2 SPAGE#                 UBIN(36)  ALIGNED INT_UBIN,
             12050    1         2 EPAGE#                 UBIN(36)  ALIGNED INT_UBIN;
       90    12052        %MOVE_PAGE_DCL;
             12053    1   DCL MOVE_PAGE_REMAIN          SBIN WORD ALIGNED   AUTO;
             12054    1   DCL MOVE_TARGET$              PTR       ALIGNED   AUTO;
             12055    1   DCL MOVE_ADR_TEMP             UBIN(36)  ALIGNED   AUTO;
             12056    1   DCL MOVE_SRC$                 PTR       ALIGNED   AUTO;
             12057    1   DCL MOVE_TEMP                 UBIN(36)  ALIGNED   AUTO;
       91    12059        %MOVE_TMPLT;
             12060    1   DCL TNAME           BIT( TCOUNT ) ALIGNED    TSTCLASS;
             12061    1   DCL SNAME           BIT( SCOUNT ) ALIGNED    SSTCLASS;
             12062    1   DCL TNAME_C         CHAR( TCOUNT_C ) ALIGNED TSTCLASS_C;
             12063    1   DCL SNAME_C         CHAR( SCOUNT_C ) ALIGNED SSTCLASS_C;
       92    12065    1   DCL DCB_TEXT(0:3) CHAR(5) ALIGNED CONSTANT INIT(
       93    12066    1    'SIDCB',
       94    12067    1    'UIDCB',
       95    12068    1    'OUDCB',
       96    12069    1    'LODCB' );
       97    12070    1   DCL 1 NODE_NAME ALIGNED,
       98    12071    1         2 COUNT UBIN BYTE UNAL,
       99    12072    1         2 TEXT CHAR(31) UNAL ;
      100    12073        %PLIST;
      101    12074
      102    12075    1   DCL LEAST UBIN(36) ALIGNED AUTO;
      103    12076    1   DCL 1 LEAST_ENTRY ALIGNED STATIC,
      104    12077    1         2 LH UBIN(18) UNAL,
      105    12078    1         2 * UBIN(18) UNAL INIT(0);
      106    12079    1   DCL LEAST_ENTRY$ REDEF LEAST_ENTRY EPTR;
      107    12080        %B$RUBIRTH(
      108    12081         NAME=BIRTH_REC,
      109    12082         STCLASS=AUTO,
      110    12083         COUNTINIT=" ");
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:74   
      111    12092        %EJECT;
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:75   
      112    12093    1       VX_CURR$ = VX_ROOT$;

  12093  4 000002   000000 236000 xsym               LDQ     VX_ROOT$
         4 000003   000000 756000 xsym               STQ     VX_CURR$

      113    12094    1   DEPTH_WRITE:
      114    12095    1       IF VX_CURR$ -> VX$NODE.SON$ = ADDR(NIL) THEN GOTO WRITE;

  12095  4 000004   000000 470400 xsym  DEPTH_WRITE  LDP0    VX_CURR$
         4 000005   000000 236100                    LDQ     0,,PR0
         4 000006   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 000007   000012 600000 4                  TZE     WRITE

      115    12096    1       VX_CURR$ = VX_CURR$ -> VX$NODE.SON$;

  12096  4 000010   000000 756000 xsym               STQ     VX_CURR$

      116    12097    1       GOTO DEPTH_WRITE;

  12097  4 000011   000004 710000 4                  TRA     DEPTH_WRITE

      117    12098    1   WRITE:
      118    12099    2       IF VX_CURR$ = VX_ROOT$ THEN DO;

  12099  4 000012   000000 236000 xsym  WRITE        LDQ     VX_CURR$
         4 000013   000000 116000 xsym               CMPQ    VX_ROOT$
         4 000014   000762 601000 4                  TNZ     s:12364

      119    12100    2           IF VX_ROOT$ -> VX$NODE.SON$ ~= ADDR(NIL)

  12100  4 000015   000000 470400 xsym               LDP0    VX_ROOT$
         4 000016   000000 236100                    LDQ     0,,PR0
         4 000017   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 000020   000163 600000 4                  TZE     s:12143
         4 000021   000000 235000 xsym               LDA     VX_SC_ROOT_LBL_COM
         4 000022   000163 600000 4                  TZE     s:12143

PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:76   
      120    12101    2              AND
      121    12102    3              VX_SC_ROOT_LBL_COM > 0 THEN DO;

      122    12103    3               P$ = VX_ROOT$ -> VX$NODE.L_SC_START.SC_ROOT_LBL_COM$;

  12103  4 000023   000131 236100                    LDQ     89,,PR0
         4 000024   200003 756100                    STQ     P$,,AUTO

      123    12104    4               IF P$ ~= ADDR(NIL) THEN DO;

  12104  4 000025   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 000026   000163 600000 4                  TZE     s:12143

      124    12105    4                   DN_ROOT_START$ = VX_ROOT$ -> VX$NODE.L_START.DN$;

  12105  4 000027   000031 236100                    LDQ     25,,PR0
         4 000030   200010 756100                    STQ     DN_ROOT_START$,,AUTO

      125    12106    4                   N$ = PINCRW( DN_ROOT_START$,

  12106  4 000031   000055 720100                    LXL0    45,,PR0
         4 000032   000000 636010                    EAQ     0,X0
         4 000033   200010 036100                    ADLQ    DN_ROOT_START$,,AUTO
         4 000034   200017 756100                    STQ     N$,,AUTO

      126    12107    4                      VX_ROOT$ -> VX$NODE.L_SIZE.DN );
      127    12108    4                   T$ = PINCRW( VX_ROOT$ -> VX$NODE.L_START.SC$,

  12108  4 000035   000057 721100                    LXL1    47,,PR0
         4 000036   000033 471500                    LDP1    27,,PR0
         4 000037   100000 633511                    EPPR3   0,X1,PR1
         4 000040   200013 453500                    STP3    T$,,AUTO

      128    12109    4                      VX_ROOT$ -> VX$NODE.L_SIZE.SC );
      129    12110    4                   Q$ = VX_ROOT$ -> VX$NODE.L_SC_STOP.SC_ROOT_LBL_COM$;

  12110  4 000041   000135 236100                    LDQ     93,,PR0
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:77   
         4 000042   200004 756100                    STQ     Q$,,AUTO

      130    12111    5                   DO WHILE( P$ <= Q$ );

  12111  4 000043   200003 116100                    CMPQ    P$,,AUTO
         4 000044   000132 602000 4                  TNC     s:12133

      131    12112    5                       IF P$ -> VX$SC.TYPE = %RLCOMSECTION

  12112  4 000045   200003 470500                    LDP0    P$,,AUTO
         4 000046   000000 236100                    LDQ     0,,PR0
         4 000047   077000 376003                    ANQ     32256,DU
         4 000050   003000 116003                    CMPQ    1536,DU
         4 000051   000054 600000 4                  TZE     s:12114
         4 000052   007000 116003                    CMPQ    3584,DU
         4 000053   000124 601000 4                  TNZ     s:12131

      132    12113    6                          OR P$ -> VX$SC.TYPE = %RORLCOMSECTION THEN DO;

      133    12114    6                           SBIN_NAME_DISP = P$ -> VX$SC.NAME_DISP;

  12114  4 000054   000001 220100                    LDX0    1,,PR0
         4 000055   200051 740100                    STX0    SBIN_NAME_DISP,,AUTO

      134    12115    7                           IF SBIN_NAME_DISP > 0 THEN DO;

  12115  4 000056   000113 604400 4                  TMOZ    s:12127

      135    12116    7                               R$ = PINCRW( DN_ROOT_START$, P$ -> VX$SC.NAME_DISP );

  12116  4 000057   000000 636010                    EAQ     0,X0
         4 000060   200010 036100                    ADLQ    DN_ROOT_START$,,AUTO
         4 000061   200005 756100                    STQ     R$,,AUTO

      136    12117    7                               SBIN_NAME_DISP = POFFW( N$, DN_ROOT_START$ );

  12117  4 000062   200010 235100                    LDA     DN_ROOT_START$,,AUTO
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:78   
         4 000063   000022 771000                    ARL     18
         4 000064   200110 755100                    STA     BIRTH_REC+4,,AUTO
         4 000065   200017 236100                    LDQ     N$,,AUTO
         4 000066   000022 772000                    QRL     18
         4 000067   200110 136100                    SBLQ    BIRTH_REC+4,,AUTO
         4 000070   000000 621006                    EAX1    0,QL
         4 000071   200051 741100                    STX1    SBIN_NAME_DISP,,AUTO

      137    12118    7                               K = R$ -> B$DNAME.COUNT;

  12118  4 000072   200005 471500                    LDP1    R$,,AUTO
         4 000073   100000 236100                    LDQ     0,,PR1
         4 000074   000022 772000                    QRL     18
         4 000075   200022 756100                    STQ     K,,AUTO

      138    12119    7                               N$ -> B$DNAME.COUNT = K;

  12119  4 000076   000000 620006                    EAX0    0,QL
         4 000077   200017 473500                    LDP3    N$,,AUTO
         4 000100   300000 740100                    STX0    0,,PR3

      139    12120    7                               N$ -> B$DNAME.TEXT = R$ -> B$DNAME.TEXT;

  12120  4 000101   100000 222100                    LDX2    0,,PR1
         4 000102   040140 100540                    MLR     fill='040'O
         4 000103   100000 400012                    ADSC9   0,,PR1                   cn=2,n=*X2
         4 000104   300000 400010                    ADSC9   0,,PR3                   cn=2,n=*X0

      140    12121    7                               N$ = PINCRW( N$,

  12121  4 000105   200022 236100                    LDQ     K,,AUTO
         4 000106   000005 036007                    ADLQ    5,DL
         4 000107   000002 772000                    QRL     2
         4 000110   000022 736000                    QLS     18
         4 000111   200017 036100                    ADLQ    N$,,AUTO
         4 000112   200017 756100                    STQ     N$,,AUTO

PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:79   
      141    12122                                       %TEXTH_SIZEW(CNT=K);
      142    12125    7                               );
      143    12126    7                               END; /* If P$ -> VX$SC.NAME_DISP > 0 then do; */

      144    12127    6                           T$ -> VX$SC = P$ -> VX$SC;

  12127  4 000113   200013 471500                    LDP1    T$,,AUTO
         4 000114   000100 100500                    MLR     fill='000'O
         4 000115   000000 000014                    ADSC9   0,,PR0                   cn=0,n=12
         4 000116   100000 000014                    ADSC9   0,,PR1                   cn=0,n=12

      145    12128    6                           T$ -> VX$SC.NAME_DISP = SBIN_NAME_DISP;

  12128  4 000117   200051 220100                    LDX0    SBIN_NAME_DISP,,AUTO
         4 000120   100001 740100                    STX0    1,,PR1

      146    12129    6                           T$ = PINCRW( T$, SIZEW( VX$SC ) );

  12129  4 000121   200013 236100                    LDQ     T$,,AUTO
         4 000122   000003 036003                    ADLQ    3,DU
         4 000123   200013 756100                    STQ     T$,,AUTO

      147    12130    6                           END; /* If P$->VX$SC.TYPE = rlcomsection */

      148    12131    5                       P$ = PINCRW( P$, SIZEW( VX$SC ) );

  12131  4 000124   200003 236100                    LDQ     P$,,AUTO
         4 000125   000003 036003                    ADLQ    3,DU
         4 000126   200003 756100                    STQ     P$,,AUTO

      149    12132    5                       END; /* Do while( P$ <= Q$ ); */

  12132  4 000127   200004 116100                    CMPQ    Q$,,AUTO
         4 000130   000045 602000 4                  TNC     s:12112
         4 000131   000045 600000 4                  TZE     s:12112

      150    12133    4                   J = POFFW( N$, VX_ROOT$ -> VX$NODE.L_START.DN$ );
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:80   

  12133  4 000132   000000 470400 xsym               LDP0    VX_ROOT$
         4 000133   000031 236100                    LDQ     25,,PR0
         4 000134   000022 772000                    QRL     18
         4 000135   200110 756100                    STQ     BIRTH_REC+4,,AUTO
         4 000136   200017 236100                    LDQ     N$,,AUTO
         4 000137   000022 772000                    QRL     18
         4 000140   200110 136100                    SBLQ    BIRTH_REC+4,,AUTO
         4 000141   200021 756100                    STQ     J,,AUTO

      151    12134    4                   VX_ROOT$ -> VX$NODE.L_SIZE.DN = J;

  12134  4 000142   000055 756100                    STQ     45,,PR0

      152    12135    4                  VX_ROOT$ -> VX$NODE.L_STOP.DN$ = PINCRW( VX_ROOT$ -> VX$NODE.L_START
             12135                            .DN$,

  12135  4 000143   000001 136000 xsym               SBLQ    VX_REC_SIZE_A+1
         4 000144   000031 471500                    LDP1    25,,PR0
         4 000145   100000 633506                    EPPR3   0,QL,PR1
         4 000146   000043 453500                    STP3    35,,PR0

      153    12136    4                      J - VX_REC_SIZE_A(%TYPDNAM) );
      154    12137    4                   J = POFFW( T$, VX_ROOT$ -> VX$NODE.L_START.SC$ );

  12137  4 000147   000033 236100                    LDQ     27,,PR0
         4 000150   000022 772000                    QRL     18
         4 000151   200110 756100                    STQ     BIRTH_REC+4,,AUTO
         4 000152   200013 236100                    LDQ     T$,,AUTO
         4 000153   000022 772000                    QRL     18
         4 000154   200110 136100                    SBLQ    BIRTH_REC+4,,AUTO
         4 000155   200021 756100                    STQ     J,,AUTO

      155    12138    4                   VX_ROOT$ -> VX$NODE.L_SIZE.SC = J;

  12138  4 000156   000057 756100                    STQ     47,,PR0

PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:81   
      156    12139    4                  VX_ROOT$ -> VX$NODE.L_STOP.SC$ = PINCRW( VX_ROOT$ -> VX$NODE.L_START
             12139                            .SC$,

  12139  4 000157   000003 136000 xsym               SBLQ    VX_REC_SIZE_A+3
         4 000160   000033 471500                    LDP1    27,,PR0
         4 000161   100000 633506                    EPPR3   0,QL,PR1
         4 000162   000045 453500                    STP3    37,,PR0

      157    12140    4                      J - VX_REC_SIZE_A(%TYPSECT) );
      158    12141    4                   END; /* If P$ ~= addr(nil) then do; */

      159    12142    3               END; /* If VX_ROOT$ -> VX$NODE.SON$ ~= addr(nil) ... */

      160    12143    2           N$ = PINCRW( VX_ROOT$ -> VX$NODE.L_START.DN$,

  12143  4 000163   000055 720100                    LXL0    45,,PR0
         4 000164   000031 471500                    LDP1    25,,PR0
         4 000165   100000 633510                    EPPR3   0,X0,PR1
         4 000166   200017 453500                    STP3    N$,,AUTO

      161    12144    2              VX_ROOT$ -> VX$NODE.L_SIZE.DN );
      162    12145    2           BIN_START$ = VX_ROOT$ -> VX$NODE.L_START.DD$;

  12145  4 000167   000036 236100                    LDQ     30,,PR0
         4 000170   200057 756100                    STQ     BIN_START$,,AUTO

      163    12146    2           BIN_STOP$ = VX_ROOT$ -> VX$NODE.L_STOP.DD$;

  12146  4 000171   000050 236100                    LDQ     40,,PR0
         4 000172   200060 756100                    STQ     BIN_STOP$,,AUTO

      164    12147    2           BIN_N$ = VX_ROOT$ -> VX$NODE.L_START.DN$;

  12147  4 000173   000031 236100                    LDQ     25,,PR0
         4 000174   200062 756100                    STQ     BIN_N$,,AUTO

      165    12148    2           IF VX_DCB_START$ = ADDR(NIL) THEN GOTO DONE_DCB_PUMP_UP;
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:82   

  12148  4 000175   000000 236000 xsym               LDQ     VX_DCB_START$
         4 000176   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 000177   000460 600000 4                  TZE     DONE_DCB_PUMP_UP

      166    12149    2           DCB_CURR$ = VX_DCB_START$;

  12149  4 000200   200007 756100                    STQ     DCB_CURR$,,AUTO

      167    12150    3           DO WHILE( DCB_CURR$ <= VX_DCB_STOP$ );

  12150  4 000201   000000 116000 xsym               CMPQ    VX_DCB_STOP$
         4 000202   000204 600000 4                  TZE     s:12151
         4 000203   000460 603000 4                  TRC     DONE_DCB_PUMP_UP

      168    12151    3               BIN_MATCH$ = PINCRW( BIN_N$, DCB_CURR$ -> VX$SC.NAME_DISP );

  12151  4 000204   200007 470500                    LDP0    DCB_CURR$,,AUTO
         4 000205   000001 220100                    LDX0    1,,PR0
         4 000206   000000 636010                    EAQ     0,X0
         4 000207   200062 036100                    ADLQ    BIN_N$,,AUTO
         4 000210   200063 756100                    STQ     BIN_MATCH$,,AUTO

      169    12152                    %BIN_SEARCH(
      170    12153                    START$=BIN_START$,
      171    12154                    STOP$=BIN_STOP$,
      172    12155                    RESULT$=BIN_RESULT$,
      173    12156                    N$=BIN_N$,
      174    12157                    MATCH$=BIN_MATCH$,
      175    12158                    NAME_DISP=2,
      176    12159                    SIZE="SIZEW(VXD$TMPLT)",
      177    12160                    FOUND=FOUND_DCB,
      178    12161                    NEG=%@COMMENT,
      179    12162                    GEN=%@TNEMMOC,
      180    12163                    ALTRETURN=LINK_ERROR,
      181    12164                    EMPTY=LINK_ERROR);
             12166    3           IF START$ = ADDR(NIL) THEN GOTO EMPTY;
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:83   

  12166  4 000211   200057 236100                    LDQ     BIN_START$,,AUTO
         4 000212   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 000213   003012 600000 4                  TZE     LINK_ERROR

             12167    4           IF POFFW( STOP$, START$ ) / SIZE < TRADE_OFF_POINT THEN DO;

  12167  4 000214   200057 235100                    LDA     BIN_START$,,AUTO
         4 000215   000022 771000                    ARL     18
         4 000216   200110 755100                    STA     BIRTH_REC+4,,AUTO
         4 000217   200060 236100                    LDQ     BIN_STOP$,,AUTO
         4 000220   000022 772000                    QRL     18
         4 000221   200110 136100                    SBLQ    BIRTH_REC+4,,AUTO
         4 000222   000002 506007                    DIV     2,DL
         4 000223   000021 116007                    CMPQ    17,DL
         4 000224   000260 605000 4                  TPL     s:12184

             12168    4              RESULT$ = START$;            /* Sequential search                  */

  12168  4 000225   200057 236100                    LDQ     BIN_START$,,AUTO
         4 000226   200061 756100                    STQ     BIN_RESULT$,,AUTO

             12169    5              DO WHILE( RESULT$ <= STOP$ );

  12169  4 000227   200060 116100                    CMPQ    BIN_STOP$,,AUTO
         4 000230   000232 600000 4                  TZE     s:12170
         4 000231   000257 603000 4                  TRC     s:12181

             12170    5                 NTEMP$ = PINCRW( N$, RESULT$ -> VX$TMPLT.A(NAME_DISP) ADDITIVE );

  12170  4 000232   200061 470500                    LDP0    BIN_RESULT$,,AUTO
         4 000233   000001 220100                    LDX0    1,,PR0
         4 000234   000000 636010                    EAQ     0,X0
         4 000235   200062 036100                    ADLQ    BIN_N$,,AUTO
         4 000236   200055 756100                    STQ     BIN_NTEMP$,,AUTO

             12171    5                 IF NTEMP$ -> B$DNAME.TEXT
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:84   

  12171  4 000237   200055 471500                    LDP1    BIN_NTEMP$,,AUTO
         4 000240   100000 221100                    LDX1    0,,PR1
         4 000241   200063 473500                    LDP3    BIN_MATCH$,,AUTO
         4 000242   300000 222100                    LDX2    0,,PR3
         4 000243   040140 106540                    CMPC    fill='040'O
         4 000244   100000 400011                    ADSC9   0,,PR1                   cn=2,n=*X1
         4 000245   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         4 000246   000251 602000 4                  TNC     s:12179

             12172    5                   >=
             12173    6                   MATCH$ -> B$DNAME.TEXT THEN DO;

             12174    6                    IF NTEMP$ -> B$DNAME.TEXT

  12174  4 000247   000335 600000 4                  TZE     FOUND_DCB

             12175    6                      =
             12176    6                      MATCH$ -> B$DNAME.TEXT THEN GOTO FOUND;
             12177    6                    ELSE GOTO ALTRETURN;

  12177  4 000250   003012 710000 4                  TRA     LINK_ERROR

             12178    6                    END;
             12179    5                 RESULT$ = PINCRW( RESULT$, SIZE );

  12179  4 000251   200061 236100                    LDQ     BIN_RESULT$,,AUTO
         4 000252   000002 036003                    ADLQ    2,DU
         4 000253   200061 756100                    STQ     BIN_RESULT$,,AUTO

             12180    5                 END;                      /* Do while                           */

  12180  4 000254   200060 116100                    CMPQ    BIN_STOP$,,AUTO
         4 000255   000232 602000 4                  TNC     s:12170
         4 000256   000232 600000 4                  TZE     s:12170

             12181    4              GOTO ALTRETURN;
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:85   

  12181  4 000257   003012 710000 4                  TRA     LINK_ERROR

             12182    4              END; /* If poffw( STOP$, START$ ) / size < TRADE_OFF_POINT then do; */
             12183    4           ELSE DO;                        /* Binary search                      */

             12184    4              LOW = 0;

  12184  4 000260   200052 450100                    STZ     BIN_LOW,,AUTO

             12185    4              HIGH = POFFW( STOP$, START$ ) / SIZE + 2;

  12185  4 000261   200057 235100                    LDA     BIN_START$,,AUTO
         4 000262   000022 771000                    ARL     18
         4 000263   200110 755100                    STA     BIRTH_REC+4,,AUTO
         4 000264   200060 236100                    LDQ     BIN_STOP$,,AUTO
         4 000265   000022 772000                    QRL     18
         4 000266   200110 136100                    SBLQ    BIRTH_REC+4,,AUTO
         4 000267   000002 506007                    DIV     2,DL
         4 000270   000002 036007                    ADLQ    2,DL
         4 000271   200053 756100                    STQ     BIN_HIGH,,AUTO

             12186    4              START1$ = PINCRW( START$, -SIZE );

  12186  4 000272   200057 236100                    LDQ     BIN_START$,,AUTO
         4 000273   777776 036003                    ADLQ    -2,DU
         4 000274   200056 756100                    STQ     BIN_START1$,,AUTO

  12186  4 000275                       BIN_SPLIT    null
             12187    4   SPLIT:     ;
             12188    4              MID = ( LOW + HIGH ) / 2;

  12188  4 000275   200052 236100                    LDQ     BIN_LOW,,AUTO
         4 000276   200053 036100                    ADLQ    BIN_HIGH,,AUTO
         4 000277   000001 772000                    QRL     1
         4 000300   200054 756100                    STQ     BIN_MID,,AUTO

PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:86   
             12189    4              RESULT$ = PINCRW( START1$, MID*SIZE );

  12189  4 000301   000023 736000                    QLS     19
         4 000302   200056 036100                    ADLQ    BIN_START1$,,AUTO
         4 000303   200061 756100                    STQ     BIN_RESULT$,,AUTO

             12190    4              NTEMP$ = PINCRW( N$, RESULT$ -> VX$TMPLT.A(NAME_DISP) ADDITIVE );

  12190  4 000304   200061 470500                    LDP0    BIN_RESULT$,,AUTO
         4 000305   000001 220100                    LDX0    1,,PR0
         4 000306   000000 636010                    EAQ     0,X0
         4 000307   200062 036100                    ADLQ    BIN_N$,,AUTO
         4 000310   200055 756100                    STQ     BIN_NTEMP$,,AUTO

             12191    4              IF NTEMP$ -> B$DNAME.TEXT

  12191  4 000311   200055 471500                    LDP1    BIN_NTEMP$,,AUTO
         4 000312   100000 221100                    LDX1    0,,PR1
         4 000313   200063 473500                    LDP3    BIN_MATCH$,,AUTO
         4 000314   300000 222100                    LDX2    0,,PR3
         4 000315   040140 106540                    CMPC    fill='040'O
         4 000316   100000 400011                    ADSC9   0,,PR1                   cn=2,n=*X1
         4 000317   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         4 000320   000324 603000 4                  TRC     s:12197

             12192    4                <
             12193    5                MATCH$ -> B$DNAME.TEXT THEN DO;

             12194    5                 LOW = MID;

  12194  4 000321   200054 235100                    LDA     BIN_MID,,AUTO
         4 000322   200052 755100                    STA     BIN_LOW,,AUTO

             12195    5                 GOTO CHECK;

  12195  4 000323   000330 710000 4                  TRA     BIN_CHECK

PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:87   
             12196    5                 END;
             12197    4              IF NTEMP$ -> B$DNAME.TEXT

  12197  4 000324   000335 602000 4                  TNC     FOUND_DCB
         4 000325   000335 600000 4                  TZE     FOUND_DCB

             12198    4                >
             12199    5                MATCH$ -> B$DNAME.TEXT THEN DO;

             12200    5                 HIGH = MID;

  12200  4 000326   200054 235100                    LDA     BIN_MID,,AUTO
         4 000327   200053 755100                    STA     BIN_HIGH,,AUTO

  12200  4 000330                       BIN_CHECK    null
             12201    5   CHECK:        ;
             12202    5                 IF LOW + 1    < HIGH THEN GOTO SPLIT;

  12202  4 000330   200052 236100                    LDQ     BIN_LOW,,AUTO
         4 000331   000001 036007                    ADLQ    1,DL
         4 000332   200053 116100                    CMPQ    BIN_HIGH,,AUTO
         4 000333   000275 602000 4                  TNC     BIN_SPLIT

             12203                                                /* Here => looping or not found       */
             12204                                      /* Result -> < match => a boundary condition    */
             12205    5                 NEG              %
             12206    5                   IF PINCRW( N$, RESULT$ -> VX$TMPLT.A(NAME_DISP) ADDITIVE ) ->
             12206                            B$DNAME.TEXT
             12207    5                   <
             12208    5                   MATCH$ -> B$DNAME.TEXT THEN RESULT$ = PINCRW( RESULT$, SIZE );
             12209    5                 GEN              %
             12210    5                   GOTO ALTRETURN;

  12210  4 000334   003012 710000 4                  TRA     LINK_ERROR

             12211    5                 END;
             12212    4              END;                         /* Else do;                           */
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:88   
             12213    3   FOUND:
             12214        /* Here -> found */
      182    12216    3               P$ = PINCRW( BIN_N$, BIN_RESULT$ -> VXD$TMPLT.NPOINTER );

  12216  4 000335   000001 223100       FOUND_DCB    LDX3    1,,PR0
         4 000336   000000 636013                    EAQ     0,X3
         4 000337   200062 036100                    ADLQ    BIN_N$,,AUTO
         4 000340   200003 756100                    STQ     P$,,AUTO

      183    12217
      184    12218    3               K = POFFW( N$, BIN_N$ );

  12218  4 000341   200062 235100                    LDA     BIN_N$,,AUTO
         4 000342   000022 771000                    ARL     18
         4 000343   200110 755100                    STA     BIRTH_REC+4,,AUTO
         4 000344   200017 236100                    LDQ     N$,,AUTO
         4 000345   000022 772000                    QRL     18
         4 000346   200110 136100                    SBLQ    BIRTH_REC+4,,AUTO
         4 000347   200022 756100                    STQ     K,,AUTO

      185    12219    3               T$ = BIN_RESULT$;

  12219  4 000350   200061 236100                    LDQ     BIN_RESULT$,,AUTO
         4 000351   200013 756100                    STQ     T$,,AUTO

      186    12220    4               DO WHILE( T$ >= BIN_START$ );

  12220  4 000352   200057 116100                    CMPQ    BIN_START$,,AUTO
         4 000353   000377 602000 4                  TNC     SPC_FURTHER_DCB

      187    12221    4                   IF PINCRW( BIN_N$, T$->VXD$TMPLT.NPOINTER ) ->

  12221  4 000354   200013 470500                    LDP0    T$,,AUTO
         4 000355   000001 220100                    LDX0    1,,PR0
         4 000356   200062 471500                    LDP1    BIN_N$,,AUTO
         4 000357   100000 221110                    LDX1    0,X0,PR1
         4 000360   200063 473500                    LDP3    BIN_MATCH$,,AUTO
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:89   
         4 000361   300000 222100                    LDX2    0,,PR3
         4 000362   000000 635010                    EAA     0,X0
         4 000363   000020 731000                    ARS     16
         4 000364   040140 106545                    CMPC    fill='040'O
         4 000365   100000 400011                    ADSC9   0,A,PR1                  cn=2,n=*X1
         4 000366   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         4 000367   000377 601000 4                  TNZ     SPC_FURTHER_DCB

      188    12222    4                      B$DNAME.TEXT
      189    12223    4                      ~=
      190    12224    4                      BIN_MATCH$ -> B$DNAME.TEXT THEN GOTO SPC_FURTHER_DCB;
      191    12225    4                   T$ -> VXD$TMPLT.NPOINTER = K;

  12225  4 000370   200022 723100                    LXL3    K,,AUTO
         4 000371   000001 743100                    STX3    1,,PR0

      192    12226    4                   T$ = PINCRW( T$, -SIZEW(VXD$TMPLT) );

  12226  4 000372   200013 236100                    LDQ     T$,,AUTO
         4 000373   777776 036003                    ADLQ    -2,DU
         4 000374   200013 756100                    STQ     T$,,AUTO

      193    12227    4                   END; /* Do while( T$ >= BIN_START$ ); */

  12227  4 000375   200057 116100                    CMPQ    BIN_START$,,AUTO
         4 000376   000354 603000 4                  TRC     s:12221

      194    12228    3   SPC_FURTHER_DCB:
      195    12229    3               T$ = PINCRW( BIN_RESULT$, SIZEW(VXD$TMPLT) );

  12229  4 000377   200061 236100       SPC_FURTHER* LDQ     BIN_RESULT$,,AUTO
         4 000400   000002 036003                    ADLQ    2,DU
         4 000401   200013 756100                    STQ     T$,,AUTO

      196    12230    4               DO WHILE( T$ <= BIN_STOP$ );

  12230  4 000402   200060 116100                    CMPQ    BIN_STOP$,,AUTO
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:90   
         4 000403   000405 600000 4                  TZE     s:12231
         4 000404   000431 603000 4                  TRC     ALL_DONE_DCB

      197    12231    4                   IF PINCRW( BIN_N$, T$->VXD$TMPLT.NPOINTER ) ->

  12231  4 000405   200013 470500                    LDP0    T$,,AUTO
         4 000406   000001 220100                    LDX0    1,,PR0
         4 000407   200062 471500                    LDP1    BIN_N$,,AUTO
         4 000410   100000 221110                    LDX1    0,X0,PR1
         4 000411   200063 473500                    LDP3    BIN_MATCH$,,AUTO
         4 000412   300000 222100                    LDX2    0,,PR3
         4 000413   000000 635010                    EAA     0,X0
         4 000414   000020 731000                    ARS     16
         4 000415   040140 106545                    CMPC    fill='040'O
         4 000416   100000 400011                    ADSC9   0,A,PR1                  cn=2,n=*X1
         4 000417   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         4 000420   000431 601000 4                  TNZ     ALL_DONE_DCB

      198    12232    4                      B$DNAME.TEXT
      199    12233    4                      ~=
      200    12234    4                      BIN_MATCH$ -> B$DNAME.TEXT THEN GOTO ALL_DONE_DCB;
      201    12235    4                   T$ -> VXD$TMPLT.NPOINTER = K;

  12235  4 000421   200022 723100                    LXL3    K,,AUTO
         4 000422   000001 743100                    STX3    1,,PR0

      202    12236    4                   T$ = PINCRW( T$, SIZEW(VXD$TMPLT) );

  12236  4 000423   200013 236100                    LDQ     T$,,AUTO
         4 000424   000002 036003                    ADLQ    2,DU
         4 000425   200013 756100                    STQ     T$,,AUTO

      203    12237    4                   END; /* Do while( T$ <= BIN_START$ ); */

  12237  4 000426   200060 116100                    CMPQ    BIN_STOP$,,AUTO
         4 000427   000405 602000 4                  TNC     s:12231
         4 000430   000405 600000 4                  TZE     s:12231
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:91   

      204    12238    3   ALL_DONE_DCB:
      205    12239
      206    12240    3               J = P$ -> B$DNAME.COUNT;

  12240  4 000431   200003 470500       ALL_DONE_DCB LDP0    P$,,AUTO
         4 000432   000000 236100                    LDQ     0,,PR0
         4 000433   000022 772000                    QRL     18
         4 000434   200021 756100                    STQ     J,,AUTO

      207    12241    3               N$ -> B$DNAME.COUNT = J;

  12241  4 000435   000000 620006                    EAX0    0,QL
         4 000436   200017 471500                    LDP1    N$,,AUTO
         4 000437   100000 740100                    STX0    0,,PR1

      208    12242    3               N$ -> B$DNAME.TEXT = P$ -> B$DNAME.TEXT;

  12242  4 000440   000000 221100                    LDX1    0,,PR0
         4 000441   040140 100540                    MLR     fill='040'O
         4 000442   000000 400011                    ADSC9   0,,PR0                   cn=2,n=*X1
         4 000443   100000 400010                    ADSC9   0,,PR1                   cn=2,n=*X0

      209    12243    3               N$ = PINCRW( N$,

  12243  4 000444   200021 236100                    LDQ     J,,AUTO
         4 000445   000005 036007                    ADLQ    5,DL
         4 000446   000002 772000                    QRL     2
         4 000447   000022 736000                    QLS     18
         4 000450   200017 036100                    ADLQ    N$,,AUTO
         4 000451   200017 756100                    STQ     N$,,AUTO

      210    12244                       %TEXTH_SIZEW(CNT=J);
      211    12247    3               );
      212    12248    3               DCB_CURR$ = PINCRW( DCB_CURR$, SIZEW( VX$SC ) );

  12248  4 000452   200007 236100                    LDQ     DCB_CURR$,,AUTO
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:92   
         4 000453   000003 036003                    ADLQ    3,DU
         4 000454   200007 756100                    STQ     DCB_CURR$,,AUTO

      213    12249    3               END; /* Do while( DCB_CURR$ <= VX_DCB_STOP$ ); */

  12249  4 000455   000000 116000 xsym               CMPQ    VX_DCB_STOP$
         4 000456   000204 602000 4                  TNC     s:12151
         4 000457   000204 600000 4                  TZE     s:12151

      214    12250    2   DONE_DCB_PUMP_UP:
      215    12251    3           DO I = 0 TO SIZEW( VX_SPC.B$.NAME_A$) - 1;

  12251  4 000460   200020 450100       DONE_DCB_PU* STZ     I,,AUTO
         4 000461   000742 710000 4                  TRA     s:12355+3

      216    12252    3               IF VX_SPC.B$.SKIP_A(I) ~= @YES

  12252  4 000462   200020 720100                    LXL0    I,,AUTO
         4 000463   000037 235010 xsym               LDA     VX_SPC+31,X0
         4 000464   000001 115007                    CMPA    1,DL
         4 000465   000737 600000 4                  TZE     s:12355
         4 000466   000044 235010 xsym               LDA     VX_SPC+36,X0
         4 000467   000001 115007                    CMPA    1,DL
         4 000470   000737 601000 4                  TNZ     s:12355

      217    12253    3                  AND
      218    12254    4                  VX_SPC.B$.MINE_A(I) = @YES THEN DO;

      219    12255    5                   IF I ~= 1 THEN DO;

  12255  4 000471   200020 236100                    LDQ     I,,AUTO
         4 000472   000001 116007                    CMPQ    1,DL
         4 000473   000737 600000 4                  TZE     s:12355

      220    12256    5                       BIN_MATCH$ = VX_SPC.B$.NAME_A$(I);

  12256  4 000474   000025 236010 xsym               LDQ     VX_SPC+21,X0
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:93   
         4 000475   200063 756100                    STQ     BIN_MATCH$,,AUTO

      221    12257                            %BIN_SEARCH(
      222    12258                            START$=BIN_START$,
      223    12259                            STOP$=BIN_STOP$,
      224    12260                            RESULT$=BIN_RESULT$,
      225    12261                            N$=BIN_N$,
      226    12262                            MATCH$=BIN_MATCH$,
      227    12263                            NAME_DISP=2,
      228    12264                            SIZE="SIZEW(VXD$TMPLT)",
      229    12265                            FOUND=FOUND_SPC,
      230    12266                            SPLIT=SPLIT_SPC,
      231    12267                            CHECK=CHECK_SPC,
      232    12268                            NEG=%@COMMENT,
      233    12269                            GEN=%@TNEMMOC,
      234    12270                            ALTRETURN=LINK_ERROR,
      235    12271                            EMPTY=LINK_ERROR);
             12273    5           IF START$ = ADDR(NIL) THEN GOTO EMPTY;

  12273  4 000476   200057 236100                    LDQ     BIN_START$,,AUTO
         4 000477   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 000500   003012 600000 4                  TZE     LINK_ERROR

             12274    6           IF POFFW( STOP$, START$ ) / SIZE < TRADE_OFF_POINT THEN DO;

  12274  4 000501   200057 235100                    LDA     BIN_START$,,AUTO
         4 000502   000022 771000                    ARL     18
         4 000503   200110 755100                    STA     BIRTH_REC+4,,AUTO
         4 000504   200060 236100                    LDQ     BIN_STOP$,,AUTO
         4 000505   000022 772000                    QRL     18
         4 000506   200110 136100                    SBLQ    BIRTH_REC+4,,AUTO
         4 000507   000002 506007                    DIV     2,DL
         4 000510   000021 116007                    CMPQ    17,DL
         4 000511   000545 605000 4                  TPL     s:12291

             12275    6              RESULT$ = START$;            /* Sequential search                  */

PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:94   
  12275  4 000512   200057 236100                    LDQ     BIN_START$,,AUTO
         4 000513   200061 756100                    STQ     BIN_RESULT$,,AUTO

             12276    7              DO WHILE( RESULT$ <= STOP$ );

  12276  4 000514   200060 116100                    CMPQ    BIN_STOP$,,AUTO
         4 000515   000517 600000 4                  TZE     s:12277
         4 000516   000544 603000 4                  TRC     s:12288

             12277    7                 NTEMP$ = PINCRW( N$, RESULT$ -> VX$TMPLT.A(NAME_DISP) ADDITIVE );

  12277  4 000517   200061 470500                    LDP0    BIN_RESULT$,,AUTO
         4 000520   000001 220100                    LDX0    1,,PR0
         4 000521   000000 636010                    EAQ     0,X0
         4 000522   200062 036100                    ADLQ    BIN_N$,,AUTO
         4 000523   200055 756100                    STQ     BIN_NTEMP$,,AUTO

             12278    7                 IF NTEMP$ -> B$DNAME.TEXT

  12278  4 000524   200055 471500                    LDP1    BIN_NTEMP$,,AUTO
         4 000525   100000 221100                    LDX1    0,,PR1
         4 000526   200063 473500                    LDP3    BIN_MATCH$,,AUTO
         4 000527   300000 222100                    LDX2    0,,PR3
         4 000530   040140 106540                    CMPC    fill='040'O
         4 000531   100000 400011                    ADSC9   0,,PR1                   cn=2,n=*X1
         4 000532   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         4 000533   000536 602000 4                  TNC     s:12286

             12279    7                   >=
             12280    8                   MATCH$ -> B$DNAME.TEXT THEN DO;

             12281    8                    IF NTEMP$ -> B$DNAME.TEXT

  12281  4 000534   000622 600000 4                  TZE     FOUND_SPC

             12282    8                      =
             12283    8                      MATCH$ -> B$DNAME.TEXT THEN GOTO FOUND;
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:95   
             12284    8                    ELSE GOTO ALTRETURN;

  12284  4 000535   003012 710000 4                  TRA     LINK_ERROR

             12285    8                    END;
             12286    7                 RESULT$ = PINCRW( RESULT$, SIZE );

  12286  4 000536   200061 236100                    LDQ     BIN_RESULT$,,AUTO
         4 000537   000002 036003                    ADLQ    2,DU
         4 000540   200061 756100                    STQ     BIN_RESULT$,,AUTO

             12287    7                 END;                      /* Do while                           */

  12287  4 000541   200060 116100                    CMPQ    BIN_STOP$,,AUTO
         4 000542   000517 602000 4                  TNC     s:12277
         4 000543   000517 600000 4                  TZE     s:12277

             12288    6              GOTO ALTRETURN;

  12288  4 000544   003012 710000 4                  TRA     LINK_ERROR

             12289    6              END; /* If poffw( STOP$, START$ ) / size < TRADE_OFF_POINT then do; */
             12290    6           ELSE DO;                        /* Binary search                      */

             12291    6              LOW = 0;

  12291  4 000545   200052 450100                    STZ     BIN_LOW,,AUTO

             12292    6              HIGH = POFFW( STOP$, START$ ) / SIZE + 2;

  12292  4 000546   200057 235100                    LDA     BIN_START$,,AUTO
         4 000547   000022 771000                    ARL     18
         4 000550   200110 755100                    STA     BIRTH_REC+4,,AUTO
         4 000551   200060 236100                    LDQ     BIN_STOP$,,AUTO
         4 000552   000022 772000                    QRL     18
         4 000553   200110 136100                    SBLQ    BIRTH_REC+4,,AUTO
         4 000554   000002 506007                    DIV     2,DL
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:96   
         4 000555   000002 036007                    ADLQ    2,DL
         4 000556   200053 756100                    STQ     BIN_HIGH,,AUTO

             12293    6              START1$ = PINCRW( START$, -SIZE );

  12293  4 000557   200057 236100                    LDQ     BIN_START$,,AUTO
         4 000560   777776 036003                    ADLQ    -2,DU
         4 000561   200056 756100                    STQ     BIN_START1$,,AUTO

  12293  4 000562                       SPLIT_SPC    null
             12294    6   SPLIT:     ;
             12295    6              MID = ( LOW + HIGH ) / 2;

  12295  4 000562   200052 236100                    LDQ     BIN_LOW,,AUTO
         4 000563   200053 036100                    ADLQ    BIN_HIGH,,AUTO
         4 000564   000001 772000                    QRL     1
         4 000565   200054 756100                    STQ     BIN_MID,,AUTO

             12296    6              RESULT$ = PINCRW( START1$, MID*SIZE );

  12296  4 000566   000023 736000                    QLS     19
         4 000567   200056 036100                    ADLQ    BIN_START1$,,AUTO
         4 000570   200061 756100                    STQ     BIN_RESULT$,,AUTO

             12297    6              NTEMP$ = PINCRW( N$, RESULT$ -> VX$TMPLT.A(NAME_DISP) ADDITIVE );

  12297  4 000571   200061 470500                    LDP0    BIN_RESULT$,,AUTO
         4 000572   000001 220100                    LDX0    1,,PR0
         4 000573   000000 636010                    EAQ     0,X0
         4 000574   200062 036100                    ADLQ    BIN_N$,,AUTO
         4 000575   200055 756100                    STQ     BIN_NTEMP$,,AUTO

             12298    6              IF NTEMP$ -> B$DNAME.TEXT

  12298  4 000576   200055 471500                    LDP1    BIN_NTEMP$,,AUTO
         4 000577   100000 221100                    LDX1    0,,PR1
         4 000600   200063 473500                    LDP3    BIN_MATCH$,,AUTO
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:97   
         4 000601   300000 222100                    LDX2    0,,PR3
         4 000602   040140 106540                    CMPC    fill='040'O
         4 000603   100000 400011                    ADSC9   0,,PR1                   cn=2,n=*X1
         4 000604   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         4 000605   000611 603000 4                  TRC     s:12304

             12299    6                <
             12300    7                MATCH$ -> B$DNAME.TEXT THEN DO;

             12301    7                 LOW = MID;

  12301  4 000606   200054 235100                    LDA     BIN_MID,,AUTO
         4 000607   200052 755100                    STA     BIN_LOW,,AUTO

             12302    7                 GOTO CHECK;

  12302  4 000610   000615 710000 4                  TRA     CHECK_SPC

             12303    7                 END;
             12304    6              IF NTEMP$ -> B$DNAME.TEXT

  12304  4 000611   000622 602000 4                  TNC     FOUND_SPC
         4 000612   000622 600000 4                  TZE     FOUND_SPC

             12305    6                >
             12306    7                MATCH$ -> B$DNAME.TEXT THEN DO;

             12307    7                 HIGH = MID;

  12307  4 000613   200054 235100                    LDA     BIN_MID,,AUTO
         4 000614   200053 755100                    STA     BIN_HIGH,,AUTO

  12307  4 000615                       CHECK_SPC    null
             12308    7   CHECK:        ;
             12309    7                 IF LOW + 1    < HIGH THEN GOTO SPLIT;

  12309  4 000615   200052 236100                    LDQ     BIN_LOW,,AUTO
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:98   
         4 000616   000001 036007                    ADLQ    1,DL
         4 000617   200053 116100                    CMPQ    BIN_HIGH,,AUTO
         4 000620   000562 602000 4                  TNC     SPLIT_SPC

             12310                                                /* Here => looping or not found       */
             12311                                      /* Result -> < match => a boundary condition    */
             12312    7                 NEG              %
             12313    7                   IF PINCRW( N$, RESULT$ -> VX$TMPLT.A(NAME_DISP) ADDITIVE ) ->
             12313                            B$DNAME.TEXT
             12314    7                   <
             12315    7                   MATCH$ -> B$DNAME.TEXT THEN RESULT$ = PINCRW( RESULT$, SIZE );
             12316    7                 GEN              %
             12317    7                   GOTO ALTRETURN;

  12317  4 000621   003012 710000 4                  TRA     LINK_ERROR

             12318    7                 END;
             12319    6              END;                         /* Else do;                           */
             12320    5   FOUND:
             12321        /* Here -> found */
      236    12323    5                       P$ = PINCRW( BIN_N$, BIN_RESULT$ -> VXD$TMPLT.NPOINTER );

  12323  4 000622   000001 223100       FOUND_SPC    LDX3    1,,PR0
         4 000623   000000 636013                    EAQ     0,X3
         4 000624   200062 036100                    ADLQ    BIN_N$,,AUTO
         4 000625   200003 756100                    STQ     P$,,AUTO

      237    12324    5                       K = POFFW( N$, BIN_N$ );

  12324  4 000626   200062 235100                    LDA     BIN_N$,,AUTO
         4 000627   000022 771000                    ARL     18
         4 000630   200110 755100                    STA     BIRTH_REC+4,,AUTO
         4 000631   200017 236100                    LDQ     N$,,AUTO
         4 000632   000022 772000                    QRL     18
         4 000633   200110 136100                    SBLQ    BIRTH_REC+4,,AUTO
         4 000634   200022 756100                    STQ     K,,AUTO

PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:99   
      238    12325    5                       T$ = BIN_RESULT$;

  12325  4 000635   200061 236100                    LDQ     BIN_RESULT$,,AUTO
         4 000636   200013 756100                    STQ     T$,,AUTO

      239    12326    6                       DO WHILE( T$ >= BIN_START$ );

  12326  4 000637   200057 116100                    CMPQ    BIN_START$,,AUTO
         4 000640   000664 602000 4                  TNC     SPC_FURTHER

      240    12327    6                           IF PINCRW( BIN_N$, T$->VXD$TMPLT.NPOINTER ) ->

  12327  4 000641   200013 470500                    LDP0    T$,,AUTO
         4 000642   000001 220100                    LDX0    1,,PR0
         4 000643   200062 471500                    LDP1    BIN_N$,,AUTO
         4 000644   100000 221110                    LDX1    0,X0,PR1
         4 000645   200063 473500                    LDP3    BIN_MATCH$,,AUTO
         4 000646   300000 222100                    LDX2    0,,PR3
         4 000647   000000 635010                    EAA     0,X0
         4 000650   000020 731000                    ARS     16
         4 000651   040140 106545                    CMPC    fill='040'O
         4 000652   100000 400011                    ADSC9   0,A,PR1                  cn=2,n=*X1
         4 000653   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         4 000654   000664 601000 4                  TNZ     SPC_FURTHER

      241    12328    6                              B$DNAME.TEXT
      242    12329    6                              ~=
      243    12330    6                              BIN_MATCH$ -> B$DNAME.TEXT THEN GOTO SPC_FURTHER;
      244    12331    6                           T$ -> VXD$TMPLT.NPOINTER = K;

  12331  4 000655   200022 723100                    LXL3    K,,AUTO
         4 000656   000001 743100                    STX3    1,,PR0

      245    12332    6                           T$ = PINCRW( T$, -SIZEW(VXD$TMPLT) );

  12332  4 000657   200013 236100                    LDQ     T$,,AUTO
         4 000660   777776 036003                    ADLQ    -2,DU
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:100  
         4 000661   200013 756100                    STQ     T$,,AUTO

      246    12333    6                           END; /* Do while( T$ >= BIN_START$ ); */

  12333  4 000662   200057 116100                    CMPQ    BIN_START$,,AUTO
         4 000663   000641 603000 4                  TRC     s:12327

      247    12334    5   SPC_FURTHER:
      248    12335    5                       T$ = PINCRW( BIN_RESULT$, SIZEW(VXD$TMPLT) );

  12335  4 000664   200061 236100       SPC_FURTHER  LDQ     BIN_RESULT$,,AUTO
         4 000665   000002 036003                    ADLQ    2,DU
         4 000666   200013 756100                    STQ     T$,,AUTO

      249    12336    6                       DO WHILE( T$ <= BIN_STOP$ );

  12336  4 000667   200060 116100                    CMPQ    BIN_STOP$,,AUTO
         4 000670   000672 600000 4                  TZE     s:12337
         4 000671   000716 603000 4                  TRC     ALL_DONE

      250    12337    6                           IF PINCRW( BIN_N$, T$->VXD$TMPLT.NPOINTER ) ->

  12337  4 000672   200013 470500                    LDP0    T$,,AUTO
         4 000673   000001 220100                    LDX0    1,,PR0
         4 000674   200062 471500                    LDP1    BIN_N$,,AUTO
         4 000675   100000 221110                    LDX1    0,X0,PR1
         4 000676   200063 473500                    LDP3    BIN_MATCH$,,AUTO
         4 000677   300000 222100                    LDX2    0,,PR3
         4 000700   000000 635010                    EAA     0,X0
         4 000701   000020 731000                    ARS     16
         4 000702   040140 106545                    CMPC    fill='040'O
         4 000703   100000 400011                    ADSC9   0,A,PR1                  cn=2,n=*X1
         4 000704   300000 400012                    ADSC9   0,,PR3                   cn=2,n=*X2
         4 000705   000716 601000 4                  TNZ     ALL_DONE

      251    12338    6                              B$DNAME.TEXT
      252    12339    6                              ~=
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:101  
      253    12340    6                              BIN_MATCH$ -> B$DNAME.TEXT THEN GOTO ALL_DONE;
      254    12341    6                           T$ -> VXD$TMPLT.NPOINTER = K;

  12341  4 000706   200022 723100                    LXL3    K,,AUTO
         4 000707   000001 743100                    STX3    1,,PR0

      255    12342    6                           T$ = PINCRW( T$, SIZEW(VXD$TMPLT) );

  12342  4 000710   200013 236100                    LDQ     T$,,AUTO
         4 000711   000002 036003                    ADLQ    2,DU
         4 000712   200013 756100                    STQ     T$,,AUTO

      256    12343    6                           END; /* Do while( T$ <= BIN_START$ ); */

  12343  4 000713   200060 116100                    CMPQ    BIN_STOP$,,AUTO
         4 000714   000672 602000 4                  TNC     s:12337
         4 000715   000672 600000 4                  TZE     s:12337

      257    12344    5   ALL_DONE:
      258    12345    5                       J = P$ -> B$DNAME.COUNT;

  12345  4 000716   200003 470500       ALL_DONE     LDP0    P$,,AUTO
         4 000717   000000 236100                    LDQ     0,,PR0
         4 000720   000022 772000                    QRL     18
         4 000721   200021 756100                    STQ     J,,AUTO

      259    12346    5                       N$ -> B$DNAME.COUNT = J;

  12346  4 000722   000000 620006                    EAX0    0,QL
         4 000723   200017 471500                    LDP1    N$,,AUTO
         4 000724   100000 740100                    STX0    0,,PR1

      260    12347    5                       N$ -> B$DNAME.TEXT = P$ -> B$DNAME.TEXT;

  12347  4 000725   000000 221100                    LDX1    0,,PR0
         4 000726   040140 100540                    MLR     fill='040'O
         4 000727   000000 400011                    ADSC9   0,,PR0                   cn=2,n=*X1
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:102  
         4 000730   100000 400010                    ADSC9   0,,PR1                   cn=2,n=*X0

      261    12348    5                       N$ = PINCRW( N$,

  12348  4 000731   200021 236100                    LDQ     J,,AUTO
         4 000732   000005 036007                    ADLQ    5,DL
         4 000733   000002 772000                    QRL     2
         4 000734   000022 736000                    QLS     18
         4 000735   200017 036100                    ADLQ    N$,,AUTO
         4 000736   200017 756100                    STQ     N$,,AUTO

      262    12349                               %TEXTH_SIZEW(CNT=J);
      263    12352    5                       );
      264    12353    5                       END; /* If i ~= 1 then do; */

      265    12354    4                   END; /* If VX_SPC.B$.SKIP_A(I) ~= ... */

      266    12355    3               END; /* Do i = 0 to SIZEW... */

  12355  4 000737   200020 235100                    LDA     I,,AUTO
         4 000740   000001 035007                    ADLA    1,DL
         4 000741   200020 755100                    STA     I,,AUTO
         4 000742   200020 235100                    LDA     I,,AUTO
         4 000743   000005 115007                    CMPA    5,DL
         4 000744   000462 602000 4                  TNC     s:12252

      267    12356    2           J = POFFW( N$, VX_ROOT$ -> VX$NODE.L_START.DN$ );

  12356  4 000745   000000 470400 xsym               LDP0    VX_ROOT$
         4 000746   000031 236100                    LDQ     25,,PR0
         4 000747   000022 772000                    QRL     18
         4 000750   200110 756100                    STQ     BIRTH_REC+4,,AUTO
         4 000751   200017 236100                    LDQ     N$,,AUTO
         4 000752   000022 772000                    QRL     18
         4 000753   200110 136100                    SBLQ    BIRTH_REC+4,,AUTO
         4 000754   200021 756100                    STQ     J,,AUTO

PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:103  
      268    12357    2           VX_ROOT$ -> VX$NODE.L_SIZE.DN = J;

  12357  4 000755   000055 756100                    STQ     45,,PR0

      269    12358    2           VX_ROOT$ -> VX$NODE.L_STOP.DN$ = PINCRW( VX_ROOT$ -> VX$NODE.L_START.DN$,

  12358  4 000756   000001 136000 xsym               SBLQ    VX_REC_SIZE_A+1
         4 000757   000031 471500                    LDP1    25,,PR0
         4 000760   100000 633506                    EPPR3   0,QL,PR1
         4 000761   000043 453500                    STP3    35,,PR0

      270    12359    2              J - VX_REC_SIZE_A(%TYPDNAM) );
      271    12360    2           END; /* If VX_CURR$ = VX_ROOT$ then do; */

      272    12361
      273    12362         /*         Now write out the defs */
      274    12363
      275    12364    1       CURR$ = VX_ROOT$;

  12364  4 000762   000000 236000 xsym               LDQ     VX_ROOT$
         4 000763   200006 756100                    STQ     CURR$,,AUTO

      276    12365    1   L00P:
      277    12366    2       DO WHILE (CURR$->VX$NODE.SON$ ~=ADDR(NIL));

  12366  4 000764   000770 710000 4     L00P         TRA     s:12368

      278    12367    2           CURR$ = CURR$->VX$NODE.SON$;

  12367  4 000765   200006 470500                    LDP0    CURR$,,AUTO
         4 000766   000000 236100                    LDQ     0,,PR0
         4 000767   200006 756100                    STQ     CURR$,,AUTO

      279    12368    2           END;

  12368  4 000770   200006 470500                    LDP0    CURR$,,AUTO
         4 000771   000000 236100                    LDQ     0,,PR0
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:104  
         4 000772   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 000773   000765 601000 4                  TNZ     s:12367

      280    12369    2   L00P1: DO I = 1 TO 3;

  12369  4 000774   000001 235007       L00P1        LDA     1,DL
         4 000775   200020 755100                    STA     I,,AUTO

      281    12370    2           P$ = ADDR(NIL);

  12370  4 000776   000001 236000 xsym               LDQ     B_VECTNIL+1
         4 000777   200003 756100                    STQ     P$,,AUTO

      282    12371    2           Q$ = ADDR(NIL);

  12371  4 001000   200004 756100                    STQ     Q$,,AUTO

      283    12372    3           DO CASE(I);

  12372  4 001001   200020 235100                    LDA     I,,AUTO
         4 001002   000004 115007                    CMPA    4,DL
         4 001003   001005 602005 4                  TNC     s:12372+4,AL
         4 001004   001032 710000 4                  TRA     s:12383
         4 001005   001032 710000 4                  TRA     s:12383
         4 001006   001011 710000 4                  TRA     s:12374
         4 001007   001017 710000 4                  TRA     s:12377
         4 001010   001025 710000 4                  TRA     s:12380

      284    12373    3           CASE(1);

      285    12374    3               P$ = CURR$->VX$NODE.L_START.ED$;

  12374  4 001011   200006 470500                    LDP0    CURR$,,AUTO
         4 001012   000034 236100                    LDQ     28,,PR0
         4 001013   200003 756100                    STQ     P$,,AUTO

      286    12375    3               Q$ = CURR$->VX$NODE.L_STOP.ED$;
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:105  

  12375  4 001014   000046 236100                    LDQ     38,,PR0
         4 001015   200004 756100                    STQ     Q$,,AUTO
         4 001016   001032 710000 4                  TRA     s:12383

      287    12376    3           CASE(2);

      288    12377    3               P$ = CURR$->VX$NODE.L_START.DD$;

  12377  4 001017   200006 470500                    LDP0    CURR$,,AUTO
         4 001020   000036 236100                    LDQ     30,,PR0
         4 001021   200003 756100                    STQ     P$,,AUTO

      289    12378    3               Q$ = CURR$->VX$NODE.L_STOP.DD$;

  12378  4 001022   000050 236100                    LDQ     40,,PR0
         4 001023   200004 756100                    STQ     Q$,,AUTO
         4 001024   001032 710000 4                  TRA     s:12383

      290    12379    3           CASE(3);

      291    12380    3               P$ = CURR$->VX$NODE.L_START.SD$;

  12380  4 001025   200006 470500                    LDP0    CURR$,,AUTO
         4 001026   000040 236100                    LDQ     32,,PR0
         4 001027   200003 756100                    STQ     P$,,AUTO

      292    12381    3               Q$ = CURR$->VX$NODE.L_STOP.SD$;

  12381  4 001030   000052 236100                    LDQ     42,,PR0
         4 001031   200004 756100                    STQ     Q$,,AUTO

      293    12382    3               END;

      294    12383    3           DO WHILE (P$ <= Q$) AND (P$ ~= ADDR(NIL)) AND (Q$ ~= ADDR(NIL));

  12383  4 001032   001053 710000 4                  TRA     s:12394
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:106  

      295    12384    3               IF I = 1

  12384  4 001033   200020 235100                    LDA     I,,AUTO
         4 001034   000001 115007                    CMPA    1,DL
         4 001035   001042 601000 4                  TNZ     s:12389

      296    12385    3               THEN
      297    12386    3                   P$->VXD$TMPLT.AD.SECTNUM = 0;

  12386  4 001036   200003 470500                    LDP0    P$,,AUTO
         4 001037   000000 236000 5                  LDQ     0
         4 001040   000000 356100                    ANSQ    0,,PR0
         4 001041   001050 710000 4                  TRA     s:12393

      298    12387    3               ELSE
      299    12388    4               DO;

      300    12389    4                   IF NOT P$->VXD$TMPLT.CONSTNT

  12389  4 001042   200003 470500                    LDP0    P$,,AUTO
         4 001043   000001 236100                    LDQ     1,,PR0
         4 001044   400000 316007                    CANQ    -131072,DL
         4 001045   001050 601000 4                  TNZ     s:12393

      301    12390    4                   THEN
      302    12391    4                       P$->VXD$TMPLT.AD.SECTNUM = 0;

  12391  4 001046   000000 236000 5                  LDQ     0
         4 001047   000000 356100                    ANSQ    0,,PR0

      303    12392    4                   END;

      304    12393    3               P$ = PINCRW(P$,SIZEW(VXD$TMPLT));

  12393  4 001050   200003 236100                    LDQ     P$,,AUTO
         4 001051   000002 036003                    ADLQ    2,DU
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:107  
         4 001052   200003 756100                    STQ     P$,,AUTO

      305    12394    3               END;

  12394  4 001053   200004 236100                    LDQ     Q$,,AUTO
         4 001054   200003 116100                    CMPQ    P$,,AUTO
         4 001055   001064 602000 4                  TNC     s:12395
         4 001056   200003 236100                    LDQ     P$,,AUTO
         4 001057   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 001060   001064 600000 4                  TZE     s:12395
         4 001061   200004 236100                    LDQ     Q$,,AUTO
         4 001062   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 001063   001033 601000 4                  TNZ     s:12384

      306    12395    2           END; /* I*/

  12395  4 001064   200020 235100                    LDA     I,,AUTO
         4 001065   000001 035007                    ADLA    1,DL
         4 001066   200020 755100                    STA     I,,AUTO
         4 001067   000004 115007                    CMPA    4,DL
         4 001070   000776 602000 4                  TNC     s:12370

      307    12396    1       R$ = CURR$;

  12396  4 001071   200006 236100                    LDQ     CURR$,,AUTO
         4 001072   200005 756100                    STQ     R$,,AUTO

      308    12397    1       R$->VX$NODE.PATH$ = ADDR(NIL);

  12397  4 001073   000001 236000 xsym               LDQ     B_VECTNIL+1
         4 001074   200005 470500                    LDP0    R$,,AUTO
         4 001075   000003 756100                    STQ     3,,PR0

      309    12398    2       DO WHILE (R$->VX$NODE.FATHER$ ~= ADDR(NIL));

  12398  4 001076   001105 710000 4                  TRA     s:12401

PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:108  
      310    12399    2           R$->VX$NODE.FATHER$->VX$NODE.PATH$ = R$;

  12399  4 001077   200005 470500                    LDP0    R$,,AUTO
         4 001100   000002 471500                    LDP1    2,,PR0
         4 001101   200005 236100                    LDQ     R$,,AUTO
         4 001102   100003 756100                    STQ     3,,PR1

      311    12400    2           R$ = R$->VX$NODE.FATHER$;

  12400  4 001103   000002 236100                    LDQ     2,,PR0
         4 001104   200005 756100                    STQ     R$,,AUTO

      312    12401    2           END;

  12401  4 001105   200005 470500                    LDP0    R$,,AUTO
         4 001106   000002 236100                    LDQ     2,,PR0
         4 001107   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 001110   001077 601000 4                  TNZ     s:12399

      313    12402    1       IF CURR$->VX$NODE.BROTHER$ ~= ADDR(NIL)

  12402  4 001111   200006 471500                    LDP1    CURR$,,AUTO
         4 001112   100001 236100                    LDQ     1,,PR1
         4 001113   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 001114   001117 600000 4                  TZE     s:12410

      314    12403    1       THEN
      315    12404    2       DO;

      316    12405    2           CURR$ = CURR$->VX$NODE.BROTHER$;

  12405  4 001115   200006 756100                    STQ     CURR$,,AUTO

      317    12406    2           GOTO L00P;

  12406  4 001116   000764 710000 4                  TRA     L00P

PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:109  
      318    12407    2           END;
      319    12408    1       ELSE
      320    12409    2       DO;

      321    12410    2           CURR$ = CURR$->VX$NODE.FATHER$;

  12410  4 001117   100002 236100                    LDQ     2,,PR1
         4 001120   200006 756100                    STQ     CURR$,,AUTO

      322    12411    2           IF CURR$ ~= ADDR(NIL)

  12411  4 001121   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 001122   000774 601000 4                  TNZ     L00P1

      323    12412    2           THEN GOTO L00P1;
      324    12413    2           END;

      325    12414    2       DO I = 0 TO SIZEW( VX_DEF_REC_A ) - 1;

  12414  4 001123   200020 450100                    STZ     I,,AUTO
         4 001124   001235 710000 4                  TRA     s:12437+3

      326    12415    2           J = VX_DEF_REC_A(I);

  12415  4 001125   200020 720100                    LXL0    I,,AUTO
         4 001126   000000 235010 xsym               LDA     VX_DEF_REC_A,X0
         4 001127   200021 755100                    STA     J,,AUTO

      327    12416    2           SIZE = VX_CURR$ -> VX$NODE.L_SIZE_A(J);

  12416  4 001130   000000 470400 xsym               LDP0    VX_CURR$
         4 001131   000054 235105                    LDA     44,AL,PR0
         4 001132   200035 755100                    STA     SIZE,,AUTO

      328    12417    3           IF SIZE > 0 THEN DO;

  12417  4 001133   001232 600000 4                  TZE     s:12437
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:110  

      329    12418    4               DO CASE(I);

  12418  4 001134   200020 236100                    LDQ     I,,AUTO
         4 001135   000004 116007                    CMPQ    4,DL
         4 001136   001140 602006 4                  TNC     s:12418+4,QL
         4 001137   001177 710000 4                  TRA     s:12428
         4 001140   001144 710000 4                  TRA     s:12420
         4 001141   001153 710000 4                  TRA     s:12422
         4 001142   001162 710000 4                  TRA     s:12424
         4 001143   001171 710000 4                  TRA     s:12426

      330    12419    4               CASE(0);

      331    12420    4                   IF VX_RU_HEAD.NRECSIZE < SIZE THEN VX_RU_HEAD.NRECSIZE = SIZE;

  12420  4 001144   000006 236000 xsym               LDQ     VX_RU_HEAD+6
         4 001145   777777 376007                    ANQ     -1,DL
         4 001146   200035 116100                    CMPQ    SIZE,,AUTO
         4 001147   001177 603000 4                  TRC     s:12428

  12420  4 001150   000000 621005                    EAX1    0,AL
         4 001151   000006 441000 xsym               SXL1    VX_RU_HEAD+6
         4 001152   001177 710000 4                  TRA     s:12428

      332    12421    4               CASE(1);

      333    12422    4                   IF VX_RU_HEAD.EPRECSIZE < SIZE THEN VX_RU_HEAD.EPRECSIZE = SIZE;

  12422  4 001153   000007 236000 xsym               LDQ     VX_RU_HEAD+7
         4 001154   000022 772000                    QRL     18
         4 001155   200035 116100                    CMPQ    SIZE,,AUTO
         4 001156   001177 603000 4                  TRC     s:12428

  12422  4 001157   000000 621005                    EAX1    0,AL
         4 001160   000007 741000 xsym               STX1    VX_RU_HEAD+7
         4 001161   001177 710000 4                  TRA     s:12428
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:111  

      334    12423    4               CASE(2);

      335    12424    4                   IF VX_RU_HEAD.EDRECSIZE < SIZE THEN VX_RU_HEAD.EDRECSIZE = SIZE;

  12424  4 001162   000007 236000 xsym               LDQ     VX_RU_HEAD+7
         4 001163   777777 376007                    ANQ     -1,DL
         4 001164   200035 116100                    CMPQ    SIZE,,AUTO
         4 001165   001177 603000 4                  TRC     s:12428

  12424  4 001166   000000 621005                    EAX1    0,AL
         4 001167   000007 441000 xsym               SXL1    VX_RU_HEAD+7
         4 001170   001177 710000 4                  TRA     s:12428

      336    12425    4               CASE(3);

      337    12426    4                   IF VX_RU_HEAD.SDRECSIZE < SIZE THEN VX_RU_HEAD.SDRECSIZE = SIZE;

  12426  4 001171   000010 236000 xsym               LDQ     VX_RU_HEAD+8
         4 001172   000022 772000                    QRL     18
         4 001173   200035 116100                    CMPQ    SIZE,,AUTO
         4 001174   001177 603000 4                  TRC     s:12428

  12426  4 001175   000000 621005                    EAX1    0,AL
         4 001176   000010 741000 xsym               STX1    VX_RU_HEAD+8

      338    12427    4                   END;

      339    12428    3               CALL VXK$KEY( @RF,

  12428  4 001177   000001 236000 5                  LDQ     1
         4 001200   200113 756100                    STQ     BIRTH_REC+7,,AUTO
         4 001201   000000 236000 xsym               LDQ     VX_CURR$
         4 001202   000010 036003                    ADLQ    8,DU
         4 001203   200112 756100                    STQ     BIRTH_REC+6,,AUTO
         4 001204   200021 631500                    EPPR1   J,,AUTO
         4 001205   200111 451500                    STP1    BIRTH_REC+5,,AUTO
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:112  
         4 001206   000002 236000 5                  LDQ     2
         4 001207   200110 756100                    STQ     BIRTH_REC+4,,AUTO
         4 001210   200110 630500                    EPPR0   BIRTH_REC+4,,AUTO
         4 001211   000022 631400 xsym               EPPR1   B_VECTNIL+18
         4 001212   000000 701000 xent               TSX1    VXK$KEY
         4 001213   000000 011000                    NOP     0

      340    12429    3                  J,
      341    12430    3                  VX_CURR$ -> VX$NODE.NUM,
      342    12431    3                  0 );
      343    12432    3               CALL VXI$WRITE( @RF,

  12432  4 001214   000002 236000 5                  LDQ     2
         4 001215   200113 756100                    STQ     BIRTH_REC+7,,AUTO
         4 001216   200035 630500                    EPPR0   SIZE,,AUTO
         4 001217   200112 450500                    STP0    BIRTH_REC+6,,AUTO
         4 001220   200021 236100                    LDQ     J,,AUTO
         4 001221   000022 736000                    QLS     18
         4 001222   000030 036003                    ADLQ    24,DU
         4 001223   000000 036000 xsym               ADLQ    VX_CURR$
         4 001224   000002 235000 5                  LDA     2
         4 001225   200110 757100                    STAQ    BIRTH_REC+4,,AUTO
         4 001226   200110 630500                    EPPR0   BIRTH_REC+4,,AUTO
         4 001227   000022 631400 xsym               EPPR1   B_VECTNIL+18
         4 001230   000000 701000 xent               TSX1    VXI$WRITE
         4 001231   000000 011000                    NOP     0

      344    12433    3                  VX_CURR$ -> VX$NODE.L_START_A$(J),
      345    12434    3                  SIZE,
      346    12435    3                  @RF );
      347    12436    3               END; /* If size > 0 then do; */

      348    12437    2           END; /* Do i = 0 to sizew( VX_DEF_REC_A ) - 1; */

  12437  4 001232   200020 235100                    LDA     I,,AUTO
         4 001233   000001 035007                    ADLA    1,DL
         4 001234   200020 755100                    STA     I,,AUTO
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:113  
         4 001235   200020 235100                    LDA     I,,AUTO
         4 001236   000004 115007                    CMPA    4,DL
         4 001237   001125 602000 4                  TNC     s:12415

      349    12438         /*
      350    12439            Now write out the sections
      351    12440         */
      352    12441    1       SIZE = VX_CURR$ -> VX$NODE.L_SIZE.SC;

  12441  4 001240   000000 470400 xsym               LDP0    VX_CURR$
         4 001241   000057 235100                    LDA     47,,PR0
         4 001242   200035 755100                    STA     SIZE,,AUTO

      353    12442    2       IF SIZE > 0 THEN DO;

  12442  4 001243   001414 600000 4                  TZE     s:12483

      354    12443    2           CALL VXQ$SORT_V( ADDR(NIL),

  12443  4 001244   000001 236000 xsym               LDQ     B_VECTNIL+1
         4 001245   200110 756100                    STQ     BIRTH_REC+4,,AUTO
         4 001246   000004 237000 5                  LDAQ    4
         4 001247   200116 757100                    STAQ    BIRTH_REC+10,,AUTO
         4 001250   000006 237000 5                  LDAQ    6
         4 001251   200114 757100                    STAQ    BIRTH_REC+8,,AUTO
         4 001252   000000 236000 xsym               LDQ     VX_CURR$
         4 001253   000045 036003                    ADLQ    37,DU
         4 001254   200113 756100                    STQ     BIRTH_REC+7,,AUTO
         4 001255   000000 236000 xsym               LDQ     VX_CURR$
         4 001256   000033 036003                    ADLQ    27,DU
         4 001257   200112 756100                    STQ     BIRTH_REC+6,,AUTO
         4 001260   200110 631500                    EPPR1   BIRTH_REC+4,,AUTO
         4 001261   200111 451500                    STP1    BIRTH_REC+5,,AUTO
         4 001262   200111 630500                    EPPR0   BIRTH_REC+5,,AUTO
         4 001263   000025 631400 xsym               EPPR1   B_VECTNIL+21
         4 001264   000000 701000 xent               TSX1    VXQ$SORT_V
         4 001265   000000 011000                    NOP     0
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:114  

      355    12444    2              VX_CURR$ -> VX$NODE.L_START.SC$,
      356    12445    2              VX_CURR$ -> VX$NODE.L_STOP.SC$,
      357    12446    2              SIZEW( VX$SC ),
      358    12447    2              @BY_VALUE,
      359    12448    2              2,
      360    12449    2              %TYPSECT );
      361    12450    3           IF SIZE > SIZEW( VX$SC ) THEN DO;

  12450  4 001266   200035 235100                    LDA     SIZE,,AUTO
         4 001267   000004 115007                    CMPA    4,DL
         4 001270   001365 602000 4                  TNC     s:12473

      362    12451    3               P$ = VX_CURR$ -> VX$NODE.L_START.SC$;

  12451  4 001271   000000 470400 xsym               LDP0    VX_CURR$
         4 001272   000033 236100                    LDQ     27,,PR0
         4 001273   200003 756100                    STQ     P$,,AUTO

      363    12452    3               Q$ = VX_CURR$ -> VX$NODE.L_STOP.SC$;

  12452  4 001274   000045 236100                    LDQ     37,,PR0
         4 001275   200004 756100                    STQ     Q$,,AUTO

      364    12453    4               DO WHILE( P$ < Q$ );

  12453  4 001276   200003 116100                    CMPQ    P$,,AUTO
         4 001277   001365 602000 4                  TNC     s:12473
         4 001300   001365 600000 4                  TZE     s:12473

      365    12454    4                   J = P$ -> VX$SC.SIZE;

  12454  4 001301   200003 470500                    LDP0    P$,,AUTO
         4 001302   000001 236100                    LDQ     1,,PR0
         4 001303   777777 376007                    ANQ     -1,DL
         4 001304   200021 756100                    STQ     J,,AUTO

PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:115  
      366    12455    4                   IF J <= 0 THEN T$ = ADDR(NIL);

  12455  4 001305   001311 601000 4                  TNZ     s:12456

  12455  4 001306   000001 236000 xsym               LDQ     B_VECTNIL+1
         4 001307   200013 756100                    STQ     T$,,AUTO
         4 001310   001313 710000 4                  TRA     s:12457

      367    12456    4                   ELSE T$ = P$;

  12456  4 001311   200003 236100                    LDQ     P$,,AUTO
         4 001312   200013 756100                    STQ     T$,,AUTO

      368    12457    4                   R$ = PINCRW( P$, SIZEW( VX$SC ) );

  12457  4 001313   200003 236100                    LDQ     P$,,AUTO
         4 001314   000003 036003                    ADLQ    3,DU
         4 001315   200005 756100                    STQ     R$,,AUTO

      369    12458    5                   DO WHILE( R$ -> VX$SC.ADDRESS

  12458  4 001316   200005 471500                    LDP1    R$,,AUTO
         4 001317   100000 236100                    LDQ     0,,PR1
         4 001320   000000 676100                    ERQ     0,,PR0
         4 001321   777777 376007                    ANQ     -1,DL
         4 001322   001353 601000 4                  TNZ     JUMP_OUT_SC

      370    12459    5                      =
      371    12460    5                      P$ -> VX$SC.ADDRESS );
      372    12461    6                       IF R$ -> VX$SC.SIZE > J THEN DO;

  12461  4 001323   200005 470500                    LDP0    R$,,AUTO
         4 001324   000001 236100                    LDQ     1,,PR0
         4 001325   777777 376007                    ANQ     -1,DL
         4 001326   200021 116100                    CMPQ    J,,AUTO
         4 001327   001337 602000 4                  TNC     s:12465
         4 001330   001337 600000 4                  TZE     s:12465
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:116  

      373    12462    6                           J = R$ -> VX$SC.SIZE;

  12462  4 001331   200021 756100                    STQ     J,,AUTO

      374    12463    6                           IF T$ = ADDR(NIL) THEN T$ = R$;

  12463  4 001332   200013 236100                    LDQ     T$,,AUTO
         4 001333   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 001334   001337 601000 4                  TNZ     s:12465

  12463  4 001335   200005 236100                    LDQ     R$,,AUTO
         4 001336   200013 756100                    STQ     T$,,AUTO

      375    12464    6                           END; /* If R$ -> VX$SC.SIZE > j then do; */

      376    12465    5                       R$ = PINCRW( R$, SIZEW( VX$SC ) );

  12465  4 001337   200005 236100                    LDQ     R$,,AUTO
         4 001340   000003 036003                    ADLQ    3,DU
         4 001341   200005 756100                    STQ     R$,,AUTO

      377    12466    5                       IF R$ > Q$ THEN GOTO JUMP_OUT_SC;

  12466  4 001342   200004 116100                    CMPQ    Q$,,AUTO
         4 001343   001345 600000 4                  TZE     s:12467
         4 001344   001353 603000 4                  TRC     JUMP_OUT_SC

      378    12467    5                       END; /* Do while( R$ -> VX$SC.ADDRESS = ... */

  12467  4 001345   200003 470500                    LDP0    P$,,AUTO
         4 001346   200005 471500                    LDP1    R$,,AUTO
         4 001347   100000 236100                    LDQ     0,,PR1
         4 001350   000000 676100                    ERQ     0,,PR0
         4 001351   777777 376007                    ANQ     -1,DL
         4 001352   001323 600000 4                  TZE     s:12461

PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:117  
      379    12468    4   JUMP_OUT_SC:
      380    12469    4                   IF T$ ~= ADDR(NIL) THEN T$ -> VX$SC.SIZE = J;

  12469  4 001353   200013 236100       JUMP_OUT_SC  LDQ     T$,,AUTO
         4 001354   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 001355   001361 600000 4                  TZE     s:12470

  12469  4 001356   200021 720100                    LXL0    J,,AUTO
         4 001357   200013 470500                    LDP0    T$,,AUTO
         4 001360   000001 440100                    SXL0    1,,PR0

      381    12470    4                   P$ = R$;

  12470  4 001361   200005 236100                    LDQ     R$,,AUTO
         4 001362   200003 756100                    STQ     P$,,AUTO

      382    12471    4                   END; /* Do while( P$ < Q$ ); */

  12471  4 001363   200004 116100                    CMPQ    Q$,,AUTO
         4 001364   001301 602000 4                  TNC     s:12454

      383    12472    3               END; /* If size > sizew( VX$SC ) then do; */

      384    12473    2           CALL VXK$KEY( @RF,

  12473  4 001365   000001 236000 5                  LDQ     1
         4 001366   200113 756100                    STQ     BIRTH_REC+7,,AUTO
         4 001367   000000 236000 xsym               LDQ     VX_CURR$
         4 001370   000010 036003                    ADLQ    8,DU
         4 001371   200112 756100                    STQ     BIRTH_REC+6,,AUTO
         4 001372   000002 237000 5                  LDAQ    2
         4 001373   200110 757100                    STAQ    BIRTH_REC+4,,AUTO
         4 001374   200110 630500                    EPPR0   BIRTH_REC+4,,AUTO
         4 001375   000022 631400 xsym               EPPR1   B_VECTNIL+18
         4 001376   000000 701000 xent               TSX1    VXK$KEY
         4 001377   000000 011000                    NOP     0

PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:118  
      385    12474    2              %TYPSECT,
      386    12475    2              VX_CURR$ -> VX$NODE.NUM,
      387    12476    2              0 );
      388    12477    2           CALL VXI$WRITE( @RF,

  12477  4 001400   000002 236000 5                  LDQ     2
         4 001401   200113 756100                    STQ     BIRTH_REC+7,,AUTO
         4 001402   200035 630500                    EPPR0   SIZE,,AUTO
         4 001403   200112 450500                    STP0    BIRTH_REC+6,,AUTO
         4 001404   000000 236000 xsym               LDQ     VX_CURR$
         4 001405   000033 036003                    ADLQ    27,DU
         4 001406   000002 235000 5                  LDA     2
         4 001407   200110 757100                    STAQ    BIRTH_REC+4,,AUTO
         4 001410   200110 630500                    EPPR0   BIRTH_REC+4,,AUTO
         4 001411   000022 631400 xsym               EPPR1   B_VECTNIL+18
         4 001412   000000 701000 xent               TSX1    VXI$WRITE
         4 001413   000000 011000                    NOP     0

      389    12478    2              VX_CURR$ -> VX$NODE.L_START.SC$,
      390    12479    2              SIZE,
      391    12480    2              @RF );
      392    12481    2           END; /* If size > 0 then do; */

      393    12482
      394    12483    2       IF VX_CURR$ -> VX$NODE.BROTHER$ ~= ADDR(NIL) THEN DO;

  12483  4 001414   000000 470400 xsym               LDP0    VX_CURR$
         4 001415   000001 236100                    LDQ     1,,PR0
         4 001416   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 001417   001422 600000 4                  TZE     s:12488

      395    12484    2           VX_CURR$ = VX_CURR$ -> VX$NODE.BROTHER$;

  12484  4 001420   000000 756000 xsym               STQ     VX_CURR$

      396    12485    2           GOTO DEPTH_WRITE;

PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:119  
  12485  4 001421   000004 710000 4                  TRA     DEPTH_WRITE

      397    12486    2           END;
      398    12487    2       ELSE DO;

      399    12488    2           VX_CURR$ = VX_CURR$ -> VX$NODE.FATHER$;

  12488  4 001422   000002 236100                    LDQ     2,,PR0
         4 001423   000000 756000 xsym               STQ     VX_CURR$

      400    12489    2           IF VX_CURR$ ~= ADDR(NIL) THEN GOTO WRITE;

  12489  4 001424   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 001425   000012 601000 4                  TNZ     WRITE

      401    12490    2           END; /* Else do; */

      402    12491
      403    12492         /* Check if bref table needs to be laid in */
      404    12493    2       IF VX_NEXT_BREF$ ~= VX_BREF_START$ THEN DO;

  12493  4 001426   000000 236000 xsym               LDQ     VX_NEXT_BREF$
         4 001427   000000 116000 xsym               CMPQ    VX_BREF_START$
         4 001430   001522 600000 4                  TZE     s:12521

      405    12494                %MOVE_PAGE(
      406    12495                MOVE_SOURCE$=VX_BREF_START$,
      407    12496                MOVE_PAGE_SIZE="POFFW(VX_NEXT_BREF$,VX_BREF_START$)",
      408    12497                MOVE_ADR=VX_BREF_ADR,
      409    12498                MOVE_UNIT=@BUF_SIZE,
      410    12499                MOVE_BUFTYP=@PROC,
      411    12500                MOVE_NODE#=0);

  12503  4 001431   000000 235000 xsym               LDA     VX_BREF_ADR
         4 001432   200070 755100                    STA     MOVE_ADR_TEMP,,AUTO

  12504  4 001433   000000 235000 xsym               LDA     VX_BREF_START$
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:120  
         4 001434   000022 771000                    ARL     18
         4 001435   200110 755100                    STA     BIRTH_REC+4,,AUTO
         4 001436   000000 236000 xsym               LDQ     VX_NEXT_BREF$
         4 001437   000022 772000                    QRL     18
         4 001440   200110 136100                    SBLQ    BIRTH_REC+4,,AUTO
         4 001441   200066 756100                    STQ     MOVE_PAGE_REMAIN,,AUTO

  12505  4 001442   000000 236000 xsym               LDQ     VX_BREF_START$
         4 001443   200071 756100                    STQ     MOVE_SRC$,,AUTO

  12506  4 001444   200066 235100                    LDA     MOVE_PAGE_REMAIN,,AUTO
         4 001445   001522 604400 4                  TMOZ    s:12521

  12507  4 001446   200066 235100                    LDA     MOVE_PAGE_REMAIN,,AUTO
         4 001447   002000 115007                    CMPA    1024,DL
         4 001450   001454 604000 4                  TMI     s:12508

  12507  4 001451   002000 236007                    LDQ     1024,DL
         4 001452   200072 756100                    STQ     MOVE_TEMP,,AUTO
         4 001453   001455 710000 4                  TRA     s:12509

  12508  4 001454   200072 755100                    STA     MOVE_TEMP,,AUTO

  12509  4 001455   000001 236000 5                  LDQ     1
         4 001456   200114 756100                    STQ     BIRTH_REC+8,,AUTO
         4 001457   200072 630500                    EPPR0   MOVE_TEMP,,AUTO
         4 001460   200113 450500                    STP0    BIRTH_REC+7,,AUTO
         4 001461   200070 631500                    EPPR1   MOVE_ADR_TEMP,,AUTO
         4 001462   200112 451500                    STP1    BIRTH_REC+6,,AUTO
         4 001463   000002 236000 5                  LDQ     2
         4 001464   200111 756100                    STQ     BIRTH_REC+5,,AUTO
         4 001465   200067 633500                    EPPR3   MOVE_TARGET$,,AUTO
         4 001466   200110 453500                    STP3    BIRTH_REC+4,,AUTO
         4 001467   200110 630500                    EPPR0   BIRTH_REC+4,,AUTO
         4 001470   000023 631400 xsym               EPPR1   B_VECTNIL+19
         4 001471   000000 701000 xent               TSX1    VXU$SETUP
         4 001472   000000 011000                    NOP     0
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:121  

  12510  4 001473   200072 235100                    LDA     MOVE_TEMP,,AUTO
         4 001474   000002 735000                    ALS     2
         4 001475   000000 755000 xsym               STA     VX_TARGET_COUNT

  12511  4 001476   000000 755000 xsym               STA     VX_SOURCE_COUNT

  12512  4 001477   200071 470500                    LDP0    MOVE_SRC$,,AUTO
         4 001500   000000 620005                    EAX0    0,AL
         4 001501   200067 471500                    LDP1    MOVE_TARGET$,,AUTO
         4 001502   000000 721000 xsym               LXL1    VX_TARGET_COUNT
         4 001503   040140 100540                    MLR     fill='040'O
         4 001504   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         4 001505   100000 000011                    ADSC9   0,,PR1                   cn=0,n=*X1

  12513  4 001506   200072 236100                    LDQ     MOVE_TEMP,,AUTO
         4 001507   000022 736000                    QLS     18
         4 001510   200071 036100                    ADLQ    MOVE_SRC$,,AUTO
         4 001511   200071 756100                    STQ     MOVE_SRC$,,AUTO

  12514  4 001512   200066 236100                    LDQ     MOVE_PAGE_REMAIN,,AUTO
         4 001513   200072 136100                    SBLQ    MOVE_TEMP,,AUTO
         4 001514   200066 756100                    STQ     MOVE_PAGE_REMAIN,,AUTO

  12515  4 001515   200070 236100                    LDQ     MOVE_ADR_TEMP,,AUTO
         4 001516   200072 036100                    ADLQ    MOVE_TEMP,,AUTO
         4 001517   200070 756100                    STQ     MOVE_ADR_TEMP,,AUTO

  12516  4 001520   200066 235100                    LDA     MOVE_PAGE_REMAIN,,AUTO
         4 001521   001446 605400 4                  TPNZ    s:12507

      412    12518    2           END; /* If VX_BREF_NEXT$ ~= VX$BREF_START$ then do; */

      413    12519        %PLIST;
      414    12520
      415    12521    2       IF VX_ROS_ALLOWED THEN DO;

PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:122  
  12521  4 001522   000000 234000 xsym               SZN     VX_ROS_ALLOWED
         4 001523   002176 605000 4                  TPL     s:12647

      416    12522    2           TREE_ADR = VX_TREE_ADR;

  12522  4 001524   000000 235000 xsym               LDA     VX_TREE_ADR
         4 001525   200042 755100                    STA     TREE_ADR,,AUTO

      417    12523    2           NAME_ADR = TREE_ADR

  12523  4 001526   000000 236000 xsym               LDQ     VX_NODE_NUMBER
         4 001527   000006 402007                    MPY     6,DL
         4 001530   200042 036100                    ADLQ    TREE_ADR,,AUTO
         4 001531   000011 036007                    ADLQ    9,DL
         4 001532   200041 756100                    STQ     NAME_ADR,,AUTO

      418    12524    2              +
      419    12525    2              SIZEW( VX$TREE_HEADER )
      420    12526    2              +
      421    12527    2              SIZEW( VX$TREE_NODE ) * ( VX_NODE_NUMBER + 1);
      422    12528    2           CALL VXU$SETUP( NODE$,

  12528  4 001533   000001 236000 5                  LDQ     1
         4 001534   200114 756100                    STQ     BIRTH_REC+8,,AUTO
         4 001535   000003 236000 5                  LDQ     3
         4 001536   200113 756100                    STQ     BIRTH_REC+7,,AUTO
         4 001537   200042 630500                    EPPR0   TREE_ADR,,AUTO
         4 001540   200112 450500                    STP0    BIRTH_REC+6,,AUTO
         4 001541   000004 236000 5                  LDQ     4
         4 001542   200111 756100                    STQ     BIRTH_REC+5,,AUTO
         4 001543   200014 631500                    EPPR1   NODE$,,AUTO
         4 001544   200110 451500                    STP1    BIRTH_REC+4,,AUTO
         4 001545   200110 630500                    EPPR0   BIRTH_REC+4,,AUTO
         4 001546   000023 631400 xsym               EPPR1   B_VECTNIL+19
         4 001547   000000 701000 xent               TSX1    VXU$SETUP
         4 001550   000000 011000                    NOP     0

PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:123  
      423    12529    2              @ROS,
      424    12530    2              TREE_ADR,
      425    12531    2              SIZEW( VX$TREE_HEADER ),
      426    12532    2              0 );
      427    12533    2           NODE$ -> VX$TREE_HEADER.NODES = VX_NODE_NUMBER + 1;

  12533  4 001551   000000 720000 xsym               LXL0    VX_NODE_NUMBER
         4 001552   000001 621010                    EAX1    1,X0
         4 001553   200014 470500                    LDP0    NODE$,,AUTO
         4 001554   000000 741100                    STX1    0,,PR0

      428    12534    2           NODE$ -> VX$TREE_HEADER.SIZE = VX_RU_HEAD.ROSIZE - VX_RU_HEAD.TREEDISP;

  12534  4 001555   000005 235000 xsym               LDA     VX_RU_HEAD+5
         4 001556   000022 771000                    ARL     18
         4 001557   200110 755100                    STA     BIRTH_REC+4,,AUTO
         4 001560   000010 236000 xsym               LDQ     VX_RU_HEAD+8
         4 001561   777777 376007                    ANQ     -1,DL
         4 001562   200110 136100                    SBLQ    BIRTH_REC+4,,AUTO
         4 001563   000000 620006                    EAX0    0,QL
         4 001564   200014 470500                    LDP0    NODE$,,AUTO
         4 001565   000000 440100                    SXL0    0,,PR0

      429    12535    2           NODE$ -> VX$TREE_HEADER.PRECSIZE = @BUF_SIZE;

  12535  4 001566   002000 220003                    LDX0    1024,DU
         4 001567   200014 470500                    LDP0    NODE$,,AUTO
         4 001570   000002 740100                    STX0    2,,PR0

      430    12536    2           NODE$ -> VX$TREE_HEADER.MAX_LIB_DATA = VX_SLIB_MAX_DATA;

  12536  4 001571   000000 721000 xsym               LXL1    VX_SLIB_MAX_DATA
         4 001572   200014 470500                    LDP0    NODE$,,AUTO
         4 001573   000002 441100                    SXL1    2,,PR0

      431    12537    2           P$ = ADDR( NODE$ -> VX$TREE_HEADER.LIB$ );

PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:124  
  12537  4 001574   200014 236100                    LDQ     NODE$,,AUTO
         4 001575   000001 036003                    ADLQ    1,DU
         4 001576   200003 756100                    STQ     P$,,AUTO

      432    12538    2           P$ -> VX$WORD_A(0) = VX_SPC.SEG.VALUE.ROS;

  12538  4 001577   200003 470500                    LDP0    P$,,AUTO
         4 001600   000010 235000 xsym               LDA     VX_SPC+8
         4 001601   000000 755100                    STA     0,,PR0

      433    12539    2           P$ -> VX$HALF_A(0) = NAME_ADR;

  12539  4 001602   000100 101500                    MRL     fill='000'O
         4 001603   200041 000004                    ADSC9   NAME_ADR,,AUTO           cn=0,n=4
         4 001604   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2

      434    12540    3           IF VX_SLIB_INIT$ ~= ADDR(NIL) THEN DO;

  12540  4 001605   000000 236000 xsym               LDQ     VX_SLIB_INIT$
         4 001606   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 001607   001661 600000 4                  TZE     s:12557

      435    12541    3               S_NAME$ = VX_SLIB_INIT$ -> VX$LST.P.NAME_.NAME$;

  12541  4 001610   000000 471400 xsym               LDP1    VX_SLIB_INIT$
         4 001611   100006 236100                    LDQ     6,,PR1
         4 001612   200016 756100                    STQ     S_NAME$,,AUTO

      436    12542    3               NAME_SIZE =

  12542  4 001613   200016 473500                    LDP3    S_NAME$,,AUTO
         4 001614   300000 236100                    LDQ     0,,PR3
         4 001615   000033 772000                    QRL     27
         4 001616   000004 036007                    ADLQ    4,DL
         4 001617   000002 772000                    QRL     2
         4 001620   200043 756100                    STQ     NAME_SIZE,,AUTO

PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:125  
      437    12543                       %TEXTC_SIZEW(CNT="S_NAME$->T$C.COUNT");
      438    12546    3               ;
      439    12547    3               CALL VXU$SETUP( NAME$,

  12547  4 001621   000001 236000 5                  LDQ     1
         4 001622   200114 756100                    STQ     BIRTH_REC+8,,AUTO
         4 001623   200043 634500                    EPPR4   NAME_SIZE,,AUTO
         4 001624   200113 454500                    STP4    BIRTH_REC+7,,AUTO
         4 001625   200041 635500                    EPPR5   NAME_ADR,,AUTO
         4 001626   200112 455500                    STP5    BIRTH_REC+6,,AUTO
         4 001627   000004 236000 5                  LDQ     4
         4 001630   200111 756100                    STQ     BIRTH_REC+5,,AUTO
         4 001631   200015 636500                    EPPR6   NAME$,,AUTO
         4 001632   200110 456500                    STP6    BIRTH_REC+4,,AUTO
         4 001633   200110 630500                    EPPR0   BIRTH_REC+4,,AUTO
         4 001634   000023 631400 xsym               EPPR1   B_VECTNIL+19
         4 001635   000000 701000 xent               TSX1    VXU$SETUP
         4 001636   000000 011000                    NOP     0

      440    12548    3                  @ROS,
      441    12549    3                  NAME_ADR,
      442    12550    3                  NAME_SIZE,
      443    12551    3                  0 );
      444    12552    3               NAME$ -> T$C.COUNT = S_NAME$ -> T$C.COUNT;

  12552  4 001637   200016 470500                    LDP0    S_NAME$,,AUTO
         4 001640   200015 471500                    LDP1    NAME$,,AUTO
         4 001641   000000 236100                    LDQ     0,,PR0
         4 001642   100000 552140                    STBQ    0,'40'O,PR1

      445    12553    3               NAME$ -> T$C.CHARS = S_NAME$ -> T$C.CHARS;

  12553  4 001643   200015 471500                    LDP1    NAME$,,AUTO
         4 001644   100000 236100                    LDQ     0,,PR1
         4 001645   000033 772000                    QRL     27
         4 001646   000000 620006                    EAX0    0,QL
         4 001647   000000 236100                    LDQ     0,,PR0
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:126  
         4 001650   000033 772000                    QRL     27
         4 001651   000000 621006                    EAX1    0,QL
         4 001652   040140 100540                    MLR     fill='040'O
         4 001653   000000 200011                    ADSC9   0,,PR0                   cn=1,n=*X1
         4 001654   100000 200010                    ADSC9   0,,PR1                   cn=1,n=*X0

      446    12554    3               NAME_ADR = NAME_ADR + NAME_SIZE;

  12554  4 001655   200041 236100                    LDQ     NAME_ADR,,AUTO
         4 001656   200043 036100                    ADLQ    NAME_SIZE,,AUTO
         4 001657   200041 756100                    STQ     NAME_ADR,,AUTO

      447    12555    3               END;

  12555  4 001660   001663 710000 4                  TRA     s:12559

      448    12556    3           ELSE DO; /* No library */

      449    12557    3               P$ -> VX$WORD_A(0) = VX_SPC.SEG.VALUE.NUL;

  12557  4 001661   000011 235000 xsym               LDA     VX_SPC+9
         4 001662   000000 755100                    STA     0,,PR0

      450    12558    3               END; /* Else do; */

      451    12559    2           NODE_ADR = TREE_ADR + SIZEW( VX$TREE_HEADER );

  12559  4 001663   200042 235100                    LDA     TREE_ADR,,AUTO
         4 001664   000003 035007                    ADLA    3,DL
         4 001665   200044 755100                    STA     NODE_ADR,,AUTO

      452    12560    2           VX_CURR$ = VX_ROOT$;

  12560  4 001666   000000 236000 xsym               LDQ     VX_ROOT$
         4 001667   000000 756000 xsym               STQ     VX_CURR$

      453    12561    2   NEXT_NODE:
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:127  
      454    12562         /*
      455    12563            Build tree entries here
      456    12564         */
      457    12565    2           CALL VXU$SETUP( NODE$,

  12565  4 001670   000000 470400 xsym  NEXT_NODE    LDP0    VX_CURR$
         4 001671   000010 236100                    LDQ     8,,PR0
         4 001672   000006 402007                    MPY     6,DL
         4 001673   200044 036100                    ADLQ    NODE_ADR,,AUTO
         4 001674   200110 756100                    STQ     BIRTH_REC+4,,AUTO
         4 001675   000010 237000 5                  LDAQ    8
         4 001676   200114 757100                    STAQ    BIRTH_REC+8,,AUTO
         4 001677   200110 631500                    EPPR1   BIRTH_REC+4,,AUTO
         4 001700   200113 451500                    STP1    BIRTH_REC+7,,AUTO
         4 001701   000004 236000 5                  LDQ     4
         4 001702   200112 756100                    STQ     BIRTH_REC+6,,AUTO
         4 001703   200014 633500                    EPPR3   NODE$,,AUTO
         4 001704   200111 453500                    STP3    BIRTH_REC+5,,AUTO
         4 001705   200111 630500                    EPPR0   BIRTH_REC+5,,AUTO
         4 001706   000023 631400 xsym               EPPR1   B_VECTNIL+19
         4 001707   000000 701000 xent               TSX1    VXU$SETUP
         4 001710   000000 011000                    NOP     0

      458    12566    2              @ROS,
      459    12567    2              ( NODE_ADR + ( VX_CURR$ -> VX$NODE.NUM * SIZEW( VX$TREE_NODE ) )),
      460    12568    2              SIZEW( VX$TREE_NODE ),
      461    12569    2              0 );
      462    12570    2           NODE$ -> VX$TREE_NODE = '0'B;

  12570  4 001711   200014 470500                    LDP0    NODE$,,AUTO
         4 001712   000100 100400                    MLR     fill='000'O
         4 001713   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         4 001714   000000 000030                    ADSC9   0,,PR0                   cn=0,n=24

      463    12571    2           T$ = VX_CURR$ -> VX$NODE.FATHER$;

  12571  4 001715   000000 470400 xsym               LDP0    VX_CURR$
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:128  
         4 001716   000002 236100                    LDQ     2,,PR0
         4 001717   200013 756100                    STQ     T$,,AUTO

      464    12572    2           IF T$ = ADDR(NIL) THEN NODE$ -> VX$TREE_NODE.BACK# = -1;

  12572  4 001720   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 001721   001726 601000 4                  TNZ     s:12573

  12572  4 001722   777777 220003                    LDX0    -1,DU
         4 001723   200014 471500                    LDP1    NODE$,,AUTO
         4 001724   100001 440100                    SXL0    1,,PR1
         4 001725   001732 710000 4                  TRA     s:12574

      465    12573    2           ELSE NODE$ -> VX$TREE_NODE.BACK# = T$ -> VX$NODE.NUM;

  12573  4 001726   200013 471500                    LDP1    T$,,AUTO
         4 001727   100010 720100                    LXL0    8,,PR1
         4 001730   200014 473500                    LDP3    NODE$,,AUTO
         4 001731   300001 440100                    SXL0    1,,PR3

      466    12574    2           T$ = VX_CURR$ -> VX$NODE.SON$;

  12574  4 001732   000000 236100                    LDQ     0,,PR0
         4 001733   200013 756100                    STQ     T$,,AUTO

      467    12575    2           IF T$ = ADDR(NIL) THEN NODE$ -> VX$TREE_NODE.FORWARD# = -1;

  12575  4 001734   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 001735   001742 601000 4                  TNZ     s:12576

  12575  4 001736   777777 220003                    LDX0    -1,DU
         4 001737   200014 471500                    LDP1    NODE$,,AUTO
         4 001740   100002 740100                    STX0    2,,PR1
         4 001741   001746 710000 4                  TRA     s:12577

      468    12576    2           ELSE NODE$ -> VX$TREE_NODE.FORWARD# = T$ -> VX$NODE.NUM;

PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:129  
  12576  4 001742   200013 471500                    LDP1    T$,,AUTO
         4 001743   100010 720100                    LXL0    8,,PR1
         4 001744   200014 473500                    LDP3    NODE$,,AUTO
         4 001745   300002 740100                    STX0    2,,PR3

      469    12577    2           T$ = VX_CURR$ -> VX$NODE.BROTHER$;

  12577  4 001746   000001 236100                    LDQ     1,,PR0
         4 001747   200013 756100                    STQ     T$,,AUTO

      470    12578    2           IF T$ = ADDR(NIL) THEN NODE$ -> VX$TREE_NODE.OVERLAY# = -1;

  12578  4 001750   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 001751   001756 601000 4                  TNZ     s:12579

  12578  4 001752   777777 220003                    LDX0    -1,DU
         4 001753   200014 471500                    LDP1    NODE$,,AUTO
         4 001754   100002 440100                    SXL0    2,,PR1
         4 001755   001762 710000 4                  TRA     s:12580

      471    12579    2           ELSE NODE$ -> VX$TREE_NODE.OVERLAY# = T$ -> VX$NODE.NUM;

  12579  4 001756   200013 471500                    LDP1    T$,,AUTO
         4 001757   100010 720100                    LXL0    8,,PR1
         4 001760   200014 473500                    LDP3    NODE$,,AUTO
         4 001761   300002 440100                    SXL0    2,,PR3

      472    12580    2           NODE$ -> VX$TREE_NODE.PADDR = VX_CURR$ -> VX$NODE.ADDR_START.RPROC;

  12580  4 001762   000013 720100                    LXL0    11,,PR0
         4 001763   200014 471500                    LDP1    NODE$,,AUTO
         4 001764   100003 740100                    STX0    3,,PR1

      473    12581    2           NODE$ -> VX$TREE_NODE.DADDR = VX_CURR$ -> VX$NODE.ADDR_START.RDATA;

  12581  4 001765   000012 720100                    LXL0    10,,PR0
         4 001766   200014 471500                    LDP1    NODE$,,AUTO
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:130  
         4 001767   100004 740100                    STX0    4,,PR1

      474    12582    2           NODE$ -> VX$TREE_NODE.PSIZE = VX_CURR$ -> VX$NODE.ADDR_STOP.RPROC

  12582  4 001770   000016 236100                    LDQ     14,,PR0
         4 001771   000013 136100                    SBLQ    11,,PR0
         4 001772   000001 620006                    EAX0    1,QL
         4 001773   200014 471500                    LDP1    NODE$,,AUTO
         4 001774   100003 440100                    SXL0    3,,PR1

      475    12583    2              -
      476    12584    2              VX_CURR$ -> VX$NODE.ADDR_START.RPROC + 1;
      477    12585    2           NODE$ -> VX$TREE_NODE.DSIZE = VX_CURR$ -> VX$NODE.ADDR_STOP.RDATA

  12585  4 001775   000015 236100                    LDQ     13,,PR0
         4 001776   000012 136100                    SBLQ    10,,PR0
         4 001777   000001 620006                    EAX0    1,QL
         4 002000   200014 471500                    LDP1    NODE$,,AUTO
         4 002001   100004 440100                    SXL0    4,,PR1

      478    12586    2              -
      479    12587    2              VX_CURR$ -> VX$NODE.ADDR_START.RDATA + 1;
      480    12588    3           IF VX_NODE_NUMBER > 0 THEN DO;

  12588  4 002002   000000 235000 xsym               LDA     VX_NODE_NUMBER
         4 002003   002043 604400 4                  TMOZ    SET_NIL

      481    12589    3               P$ = VX_CURR$ -> VX$NODE.L_START.ED$;

  12589  4 002004   000034 236100                    LDQ     28,,PR0
         4 002005   200003 756100                    STQ     P$,,AUTO

      482    12590    4               IF P$ ~= ADDR(NIL) THEN DO;

  12590  4 002006   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 002007   002043 600000 4                  TZE     SET_NIL

PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:131  
      483    12591    4                   Q$ = VX_CURR$ -> VX$NODE.L_STOP.ED$;

  12591  4 002010   000046 236100                    LDQ     38,,PR0
         4 002011   200004 756100                    STQ     Q$,,AUTO

      484    12592    4                   LEAST = P$ -> B$EDEF.ISADDR;

  12592  4 002012   200003 471500                    LDP1    P$,,AUTO
         4 002013   100000 236100                    LDQ     0,,PR1
         4 002014   000032 376000 xsym               ANQ     B_VECTNIL+26
         4 002015   200103 756100                    STQ     LEAST,,AUTO

      485    12593    5                   DO WHILE( P$ <= Q$ );

  12593  4 002016   200004 236100                    LDQ     Q$,,AUTO
         4 002017   200003 116100                    CMPQ    P$,,AUTO
         4 002020   002035 602000 4                  TNC     s:12597

      486    12594    5                      IF P$ -> B$EDEF.ISADDR < LEAST THEN LEAST = P$ -> B$EDEF.ISADDR;

  12594  4 002021   200003 470500                    LDP0    P$,,AUTO
         4 002022   000000 236100                    LDQ     0,,PR0
         4 002023   000032 376000 xsym               ANQ     B_VECTNIL+26
         4 002024   200103 116100                    CMPQ    LEAST,,AUTO
         4 002025   002027 603000 4                  TRC     s:12595

  12594  4 002026   200103 756100                    STQ     LEAST,,AUTO

      487    12595    5                       P$ = PINCRW( P$, SIZEW( B$EDEF ) );

  12595  4 002027   200003 236100                    LDQ     P$,,AUTO
         4 002030   000002 036003                    ADLQ    2,DU
         4 002031   200003 756100                    STQ     P$,,AUTO

      488    12596    5                       END; /* Do while( P$ <= Q$ ); */

  12596  4 002032   200004 116100                    CMPQ    Q$,,AUTO
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:132  
         4 002033   002021 602000 4                  TNC     s:12594
         4 002034   002021 600000 4                  TZE     s:12594

      489    12597    4                   LEAST_ENTRY.LH = LEAST;

  12597  4 002035   200103 720100                    LXL0    LEAST,,AUTO
         4 002036   000000 740000 3                  STX0    LEAST_ENTRY

      490    12598    4                   NODE$ -> VX$TREE_NODE.ENTRY$ = LEAST_ENTRY$;

  12598  4 002037   000000 236000 3                  LDQ     LEAST_ENTRY
         4 002040   200014 470500                    LDP0    NODE$,,AUTO
         4 002041   000005 756100                    STQ     5,,PR0

      491    12599    4                   END; /* If P$ ~= addr(nil) then do; */

  12599  4 002042   002046 710000 4                  TRA     s:12605

      492    12600    3               ELSE GOTO SET_NIL;
      493    12601    3               END; /* If VX_NODE_NUMBER > 0 then do; */
      494    12602    2           ELSE
      495    12603    2   SET_NIL:
      496    12604    2               NODE$ -> VX$TREE_NODE.ENTRY$ = ENTADDR( NIL );

  12604  4 002043   000002 236000 xsym  SET_NIL      LDQ     B_VECTNIL+2
         4 002044   200014 471500                    LDP1    NODE$,,AUTO
         4 002045   100005 756100                    STQ     5,,PR1

      497    12605    2           P$ = ADDR( NODE$ -> VX$TREE_NODE.NAME$ );

  12605  4 002046   200014 236100                    LDQ     NODE$,,AUTO
         4 002047   200003 756100                    STQ     P$,,AUTO

      498    12606    2           P$ -> VX$WORD_A(0) = VX_SPC.SEG.VALUE.ROS;

  12606  4 002050   200003 470500                    LDP0    P$,,AUTO
         4 002051   000010 235000 xsym               LDA     VX_SPC+8
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:133  
         4 002052   000000 755100                    STA     0,,PR0

      499    12607    2           P$ -> VX$HALF_A(0) = NAME_ADR - VX_TREE_ADR;

  12607  4 002053   200041 236100                    LDQ     NAME_ADR,,AUTO
         4 002054   000000 136000 xsym               SBLQ    VX_TREE_ADR
         4 002055   200110 756100                    STQ     BIRTH_REC+4,,AUTO
         4 002056   000100 101500                    MRL     fill='000'O
         4 002057   200110 000004                    ADSC9   BIRTH_REC+4,,AUTO        cn=0,n=4
         4 002060   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2

      500    12608    2           IF VX_CURR$ -> VX$NODE.HEAD$ -> VX$LST.TYPE = @OF

  12608  4 002061   000000 471400 xsym               LDP1    VX_CURR$
         4 002062   100004 473500                    LDP3    4,,PR1
         4 002063   300001 220100                    LDX0    1,,PR3
         4 002064   002107 601000 4                  TNZ     s:12616
         4 002065   300001 721100                    LXL1    1,,PR3
         4 002066   000001 101003                    CMPX1   1,DU
         4 002067   002107 601000 4                  TNZ     s:12616

      501    12609    2              AND VX_CURR$ -> VX$NODE.HEAD$ -> VX$LST.SUB_TYPE = @OF_LIST
      502    12610    3           THEN DO ;

      503    12611    3               S_NAME$ = VX_CURR$ -> VX$NODE.HEAD$ -> VX$LST.OBJECT_NAME$ ;

  12611  4 002070   300002 236100                    LDQ     2,,PR3
         4 002071   200016 756100                    STQ     S_NAME$,,AUTO

      504    12612    3               NODE_NAME.COUNT = S_NAME$ -> T$C.COUNT - 1;

  12612  4 002072   200016 474500                    LDP4    S_NAME$,,AUTO
         4 002073   400000 236100                    LDQ     0,,PR4
         4 002074   000033 772000                    QRL     27
         4 002075   000001 136007                    SBLQ    1,DL
         4 002076   000033 736000                    QLS     27
         4 002077   200073 552140                    STBQ    NODE_NAME,'40'O,AUTO
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:134  

      505    12613    3               NODE_NAME.TEXT = SUBSTR( S_NAME$->T$C.CHARS, 1 ) ;

  12613  4 002100   400000 236100                    LDQ     0,,PR4
         4 002101   000033 772000                    QRL     27
         4 002102   777777 622006                    EAX2    -1,QL
         4 002103   040100 100540                    MLR     fill='040'O
         4 002104   400000 400012                    ADSC9   0,,PR4                   cn=2,n=*X2
         4 002105   200073 200037                    ADSC9   NODE_NAME,,AUTO          cn=1,n=31

      506    12614    3               END ;

  12614  4 002106   002116 710000 4                  TRA     s:12617

      507    12615    2           ELSE
      508    12616    2               NODE_NAME = VX_CURR$ -> VX$NODE.HEAD$ -> VX$LST.P.NAME_.NAME$ -> T$C ;

  12616  4 002107   300006 474500                    LDP4    6,,PR3
         4 002110   400000 236100                    LDQ     0,,PR4
         4 002111   000033 772000                    QRL     27
         4 002112   000001 621006                    EAX1    1,QL
         4 002113   000100 100540                    MLR     fill='000'O
         4 002114   400000 000011                    ADSC9   0,,PR4                   cn=0,n=*X1
         4 002115   200073 000040                    ADSC9   NODE_NAME,,AUTO          cn=0,n=32

      509    12617    2           NAME_SIZE =

  12617  4 002116   200073 236100                    LDQ     NODE_NAME,,AUTO
         4 002117   000033 772000                    QRL     27
         4 002120   000004 036007                    ADLQ    4,DL
         4 002121   000002 772000                    QRL     2
         4 002122   200043 756100                    STQ     NAME_SIZE,,AUTO

      510    12618                   %TEXTC_SIZEW( CNT="NODE_NAME.COUNT" ) ;
      511    12621    2           ;
      512    12622    2           CALL VXU$SETUP( NAME$,

PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:135  
  12622  4 002123   000001 236000 5                  LDQ     1
         4 002124   200114 756100                    STQ     BIRTH_REC+8,,AUTO
         4 002125   200043 633500                    EPPR3   NAME_SIZE,,AUTO
         4 002126   200113 453500                    STP3    BIRTH_REC+7,,AUTO
         4 002127   200041 634500                    EPPR4   NAME_ADR,,AUTO
         4 002130   200112 454500                    STP4    BIRTH_REC+6,,AUTO
         4 002131   000004 236000 5                  LDQ     4
         4 002132   200111 756100                    STQ     BIRTH_REC+5,,AUTO
         4 002133   200015 635500                    EPPR5   NAME$,,AUTO
         4 002134   200110 455500                    STP5    BIRTH_REC+4,,AUTO
         4 002135   200110 630500                    EPPR0   BIRTH_REC+4,,AUTO
         4 002136   000023 631400 xsym               EPPR1   B_VECTNIL+19
         4 002137   000000 701000 xent               TSX1    VXU$SETUP
         4 002140   000000 011000                    NOP     0

      513    12623    2              @ROS,
      514    12624    2              NAME_ADR,
      515    12625    2              NAME_SIZE,
      516    12626    2              0 );
      517    12627    2           NAME$ -> T$C.COUNT = NODE_NAME.COUNT ;

  12627  4 002141   200015 470500                    LDP0    NAME$,,AUTO
         4 002142   200073 236100                    LDQ     NODE_NAME,,AUTO
         4 002143   000000 552140                    STBQ    0,'40'O,PR0

      518    12628    2           NAME$ -> T$C.CHARS = NODE_NAME.TEXT ;

  12628  4 002144   200015 470500                    LDP0    NAME$,,AUTO
         4 002145   000000 236100                    LDQ     0,,PR0
         4 002146   000033 772000                    QRL     27
         4 002147   000000 620006                    EAX0    0,QL
         4 002150   040140 100500                    MLR     fill='040'O
         4 002151   200073 200037                    ADSC9   NODE_NAME,,AUTO          cn=1,n=31
         4 002152   000000 200010                    ADSC9   0,,PR0                   cn=1,n=*X0

      519    12629    2           NAME_ADR = NAME_ADR + NAME_SIZE;

PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:136  
  12629  4 002153   200041 236100                    LDQ     NAME_ADR,,AUTO
         4 002154   200043 036100                    ADLQ    NAME_SIZE,,AUTO
         4 002155   200041 756100                    STQ     NAME_ADR,,AUTO

      520    12630    3           IF VX_CURR$ -> VX$NODE.SON$ ~= ADDR(NIL) THEN DO; /* Step to son */

  12630  4 002156   000000 470400 xsym               LDP0    VX_CURR$
         4 002157   000000 236100                    LDQ     0,,PR0
         4 002160   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 002161   002164 600000 4                  TZE     CHECK_BROTHER

      521    12631    3               VX_CURR$ = VX_CURR$ -> VX$NODE.SON$;

  12631  4 002162   000000 756000 xsym               STQ     VX_CURR$

      522    12632    3               GOTO NEXT_NODE;

  12632  4 002163   001670 710000 4                  TRA     NEXT_NODE

      523    12633    3               END;
      524    12634    3           ELSE DO;

      525    12635    3   CHECK_BROTHER:
      526    12636    4               IF VX_CURR$ -> VX$NODE.BROTHER$ ~=ADDR(NIL) THEN DO;

  12636  4 002164   000000 470400 xsym  CHECK_BROTH* LDP0    VX_CURR$
         4 002165   000001 236100                    LDQ     1,,PR0
         4 002166   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 002167   002172 600000 4                  TZE     s:12641

      527    12637    4                   VX_CURR$ = VX_CURR$ -> VX$NODE.BROTHER$; /* Step to brother */

  12637  4 002170   000000 756000 xsym               STQ     VX_CURR$

      528    12638    4                   GOTO NEXT_NODE;

  12638  4 002171   001670 710000 4                  TRA     NEXT_NODE
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:137  

      529    12639    4                   END;
      530    12640    4               ELSE DO;

      531    12641    4                   VX_CURR$ = VX_CURR$ -> VX$NODE.FATHER$;

  12641  4 002172   000002 236100                    LDQ     2,,PR0
         4 002173   000000 756000 xsym               STQ     VX_CURR$

      532    12642    4                   IF VX_CURR$ ~= ADDR(NIL) THEN GOTO CHECK_BROTHER;

  12642  4 002174   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 002175   002164 601000 4                  TNZ     CHECK_BROTHER

      533    12643    4                   END;

      534    12644    3               END;

      535    12645    2           END; /* If VX_ROS_ALLOWED then do; */

      536    12646
      537    12647    2       IF VX_SLIB_INIT$ ~= ADDR(NIL) THEN DO;

  12647  4 002176   000000 236000 xsym               LDQ     VX_SLIB_INIT$
         4 002177   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 002200   002215 600000 4                  TZE     s:12656

      538    12648    2           P$ = VX_SLIB_INIT$ -> VX$LST.P.NAME_.NAME$;

  12648  4 002201   000000 470400 xsym               LDP0    VX_SLIB_INIT$
         4 002202   000006 236100                    LDQ     6,,PR0
         4 002203   200003 756100                    STQ     P$,,AUTO

      539    12649    2           VX_RU_HEAD.LIBNAME.CNT = P$ -> T$C.COUNT;

  12649  4 002204   200003 471500                    LDP1    P$,,AUTO
         4 002205   100000 236100                    LDQ     0,,PR1
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:138  
         4 002206   000030 552040 xsym               STBQ    VX_RU_HEAD+24,'40'O

      540    12650    2           VX_RU_HEAD.LIBNAME.TXT = P$ -> T$C.CHARS;

  12650  4 002207   100000 236100                    LDQ     0,,PR1
         4 002210   000033 772000                    QRL     27
         4 002211   000000 620006                    EAX0    0,QL
         4 002212   040000 100540                    MLR     fill='040'O
         4 002213   100000 200010                    ADSC9   0,,PR1                   cn=1,n=*X0
         4 002214   000030 200037 xsym               ADSC9   VX_RU_HEAD+24            cn=1,n=31

      541    12651    2           END;

      542    12652        %EJECT;
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:139  
      543    12653         /*
      544    12654            Do error checking.
      545    12655         */
      546    12656    2       DO I = 0 TO SIZEW( VX_O.DCB_MATCH_A$ ) - 1;

  12656  4 002215   200020 450100                    STZ     I,,AUTO
         4 002216   002300 710000 4                  TRA     s:12685+3

      547    12657    2           IF VX_OD.DCB_MATCH_A$(I)

  12657  4 002217   200020 235100                    LDA     I,,AUTO
         4 002220   000000 066405                    CMPB    filb='0'B
         4 002221   000002 470001 xsym               BDSC    VX_OD+2,A                by=2,bit=7,n=1
         4 002222   000002 000022 xsym               BDSC    B_VECTNIL+2              by=0,bit=0,n=18
         4 002223   002275 600000 4                  TZE     s:12685
         4 002224   000145 234005 xsym               SZN     VX_O+101,AL
         4 002225   002275 604000 4                  TMI     s:12685

      548    12658    2              AND
      549    12659    3              NOT VX_O.DCB_MATCH_HIT_A(I) THEN DO;

      550    12660        /*E*  ERROR: VXT-E$NO_DCB_CORR_VX-0
      551    12661              MESSAGE: DCB %U1 was not encountered.
      552    12662                       No function performed for the %U2 option.
      553    12663              DESCRIPTION: Self-explanatory.
      554    12664        */
      555    12665    3               VX_EFIELD2.COUNT = 10;

  12665  4 002226   012000 236003                    LDQ     5120,DU
         4 002227   000000 552040 xsym               STBQ    VX_EFIELD2,'40'O

      556    12666    3               VX_EFIELD2.CHARS = VX_DCB_OPTION_TEXT(I);

  12666  4 002230   200020 236100                    LDQ     I,,AUTO
         4 002231   000014 402007                    MPY     12,DL
         4 002232   040000 100406                    MLR     fill='040'O
         4 002233   000000 000012 xsym               ADSC9   VX_DCB_OPTION_TEXT,Q     cn=0,n=10
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:140  
         4 002234   000000 200117 xsym               ADSC9   VX_EFIELD2               cn=1,n=79

      557    12667    4               IF VX_O.DCB_MATCH_A$(I) ~= ADDR(NIL) THEN DO;

  12667  4 002235   200020 720100                    LXL0    I,,AUTO
         4 002236   000141 236010 xsym               LDQ     VX_O+97,X0
         4 002237   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 002240   002254 600000 4                  TZE     s:12672

      558    12668    4                   VX_EFIELD1.COUNT = VX_O.DCB_MATCH_A$(I) -> B$DNAME.COUNT;

  12668  4 002241   000141 470410 xsym               LDP0    VX_O+97,X0
         4 002242   000000 236100                    LDQ     0,,PR0
         4 002243   000011 736000                    QLS     9
         4 002244   000000 552040 xsym               STBQ    VX_EFIELD1,'40'O

      559    12669    4                   VX_EFIELD1.CHARS = VX_O.DCB_MATCH_A$(I) -> B$DNAME.TEXT;

  12669  4 002245   000000 221100                    LDX1    0,,PR0
         4 002246   040000 100540                    MLR     fill='040'O
         4 002247   000000 400011                    ADSC9   0,,PR0                   cn=2,n=*X1
         4 002250   000000 200117 xsym               ADSC9   VX_EFIELD1               cn=1,n=79

      560    12670    4                   J = E$NO_DCB_CORR_VX;

  12670  4 002251   003311 235007                    LDA     1737,DL
         4 002252   200021 755100                    STA     J,,AUTO

      561    12671    4                   END;

  12671  4 002253   002256 710000 4                  TRA     s:12681

      562    12672    3               ELSE J = E$NO_DCB_CORR_ALT_VX;

  12672  4 002254   003745 235007                    LDA     2021,DL
         4 002255   200021 755100                    STA     J,,AUTO

PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:141  
      563    12673        /*E*  ERROR: VXT-E$NO_DCB_CORR_ALT_VX-0
      564    12674              MESSAGE: No function performed for the %U2 option.
      565    12675              DESCRIPTION: Self-explanatory.
      566    12676        */
      567    12677                    %SCREAM(
      568    12678                    ERR#=J,
      569    12679                    LEVEL=@E$W_VX,
      570    12680                    MID="'T'");

  12681  4 002256   000014 237000 5                  LDAQ    12
         4 002257   200112 757100                    STAQ    BIRTH_REC+6,,AUTO
         4 002260   000004 236000 5                  LDQ     4
         4 002261   200111 756100                    STQ     BIRTH_REC+5,,AUTO
         4 002262   200021 630500                    EPPR0   J,,AUTO
         4 002263   200110 450500                    STP0    BIRTH_REC+4,,AUTO
         4 002264   200110 630500                    EPPR0   BIRTH_REC+4,,AUTO
         4 002265   000022 631400 xsym               EPPR1   B_VECTNIL+18
         4 002266   000000 701000 xent               TSX1    VXE$ERROR
         4 002267   000000 011000                    NOP     0

      571    12683    3               VX_ERR_SEV = MAXIMUM ( VX_ERR_SEV, 2 ) ;

  12683  4 002270   000002 236007                    LDQ     2,DL
         4 002271   000000 116000 xsym               CMPQ    VX_ERR_SEV
         4 002272   002274 603000 4                  TRC     s:12683+4
         4 002273   000000 236000 xsym               LDQ     VX_ERR_SEV
         4 002274   000000 756000 xsym               STQ     VX_ERR_SEV

      572    12684    3               END; /* If VX_O.DCB_MATCH_A$(I) ~= addr(nil) and ... */

      573    12685    2           END; /* Do i = 0 to sizew( VX_O.DCB_MATCH_A$ ) - 1; */

  12685  4 002275   200020 235100                    LDA     I,,AUTO
         4 002276   000001 035007                    ADLA    1,DL
         4 002277   200020 755100                    STA     I,,AUTO
         4 002300   200020 235100                    LDA     I,,AUTO
         4 002301   000004 115007                    CMPA    4,DL
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:142  
         4 002302   002217 602000 4                  TNC     s:12657

      574    12686    2       IF VX_BREF_INSTANCE > 0 THEN DO;

  12686  4 002303   000000 236000 xsym               LDQ     VX_BREF_INSTANCE
         4 002304   002325 600000 4                  TZE     s:12746

      575    12687        /*E*  ERROR: VXT-E$BREF_INSTANCE_VX-0
      576    12688              MESSAGE: Number of branch reference instances = %U1.
      577    12689              DESCRIPTION: Self-explanatory.
      578    12690        */
      579    12691                %NUMBER(
      580    12692                NUM1=VX_BREF_INSTANCE, SIZE1=6, BASE1=10);

  12698  4 002305   000016 630400 5                  EPPR0   14
         4 002306   000023 631400 xsym               EPPR1   B_VECTNIL+19
         4 002307   000000 701000 xent               TSX1    VXD$B2C
         4 002310   000000 011000                    NOP     0

      581    12709                %SCREAM(
      582    12710                ERR#=E$BREF_INSTANCE_VX,
      583    12711                LEVEL=@E$I_VX,
      584    12712                MID="'T'");

  12713  4 002311   000023 630400 5                  EPPR0   19
         4 002312   000022 631400 xsym               EPPR1   B_VECTNIL+18
         4 002313   000000 701000 xent               TSX1    VXE$ERROR
         4 002314   000000 011000                    NOP     0

      585    12715        /*E*  ERROR: VXT-E$BREF_DEFINITION_VX-0
      586    12716              MESSAGE: Number of unique branch reference targets = %U1.
      587    12717              DESCRIPTION: Self-explanatory.
      588    12718        */
      589    12719                %NUMBER(
      590    12720                NUM1=VX_BREF_DEFINITION, SIZE1=6, BASE1=10);

  12726  4 002315   000027 630400 5                  EPPR0   23
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:143  
         4 002316   000023 631400 xsym               EPPR1   B_VECTNIL+19
         4 002317   000000 701000 xent               TSX1    VXD$B2C
         4 002320   000000 011000                    NOP     0

      591    12737                %SCREAM(
      592    12738                ERR#=E$BREF_DEFINITION_VX,
      593    12739                LEVEL=@E$I_VX,
      594    12740                MID="'T'");

  12741  4 002321   000035 630400 5                  EPPR0   29
         4 002322   000022 631400 xsym               EPPR1   B_VECTNIL+18
         4 002323   000000 701000 xent               TSX1    VXE$ERROR
         4 002324   000000 011000                    NOP     0

      595    12743    2           END; /* If VX_BREF_INSTANCE > 0 then do; */

      596    12744         /* Check for a valid start address if ru is a user flavor one or
      597    12745            an asl flavored one. */
      598    12746    1       IF VX_O.SIN_A(@C_SLIB_KEY_WORD - 1) = 0 AND

  12746  4 002325   000015 235000 xsym               LDA     VX_O+13
         4 002326   002337 601000 4                  TNZ     s:12762
         4 002327   000042 236000 xsym               LDQ     VX_O+34
         4 002330   002337 605000 4                  TPL     s:12762
         4 002331   000154 235000 xsym               LDA     VX_O+108
         4 002332   002337 605000 4                  TPL     s:12762

      599    12747    1          VX_O.NUM_A(@C_START_KEY_WORD - 1) < 0 AND
      600    12748    2          VX_O.OPT.START < 0 THEN DO;

      601    12749                %SCREAM(
      602    12750                ERR#=E$MAIN_NO_START_VX,
      603    12751                LEVEL=@E$W_VX,MID="'M'");

  12752  4 002333   000043 630400 5                  EPPR0   35
         4 002334   000022 631400 xsym               EPPR1   B_VECTNIL+18
         4 002335   000000 701000 xent               TSX1    VXE$ERROR
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:144  
         4 002336   000000 011000                    NOP     0

      604    12754    2           END;

      605    12755        /*E*     ERROR: VXM-E$MAIN_NO_START_VX
      606    12756                 MESSAGE: No start address specified for the target RU.
      607    12757                 DESCRIPTION: Either an object unit in the object unit list
      608    12758                      does not specify a start address or no START option
      609    12759                      was specified to the linker and the target RU is a
      610    12760                      vanilla "user" kind or an ASL.
      611    12761        */
      612    12762    1       IF

  12762  4 002337   000000 235000 xsym               LDA     VX_ERRORS
         4 002340   002362 601000 4                  TNZ     s:12813
         4 002341   000001 236000 xsym               LDQ     VX_ERRORS+1
         4 002342   002362 601000 4                  TNZ     s:12813
         4 002343   000002 235000 xsym               LDA     VX_ERRORS+2
         4 002344   002362 601000 4                  TNZ     s:12813
         4 002345   000003 235000 xsym               LDA     VX_ERRORS+3
         4 002346   002362 601000 4                  TNZ     s:12813
         4 002347   000004 235000 xsym               LDA     VX_ERRORS+4
         4 002350   002362 601000 4                  TNZ     s:12813
         4 002351   000005 235000 xsym               LDA     VX_ERRORS+5
         4 002352   002362 601000 4                  TNZ     s:12813
         4 002353   000000 235000 xsym               LDA     VX_ERR_SEV
         4 002354   002362 601000 4                  TNZ     s:12813

      613    12763    1          VX_ERRORS.MULTIPLE = 0
      614    12764    1          AND
      615    12765    1          VX_ERRORS.UNSAT.UNSAT_PRIMARY = 0
      616    12766    1          AND
      617    12767    1          VX_ERRORS.UNSAT.UNSAT_SECONDARY = 0
      618    12768    1          AND
      619    12769    1          VX_ERRORS.CONFLICT.ALTRIT = 0
      620    12770    1          AND
      621    12771    1          VX_ERRORS.CONFLICT.PARM = 0
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:145  
      622    12772    1          AND
      623    12773    1          VX_ERRORS.CONFLICT.CST = 0
      624    12774    1          AND
      625    12775    1          VX_ERR_SEV <= 0
      626    12776    2       THEN DO;

      627    12777        /*E*  ERROR: VXT-E$NOERRORS_VX-0
      628    12778              MESSAGE: No linking errors.
      629    12779              DESCRIPTION: Self-explanatory.
      630    12780        */
      631    12781                %SCREAM(
      632    12782                ERR# = E$NOERRORS_VX,
      633    12783                LEVEL=@E$I_VX,
      634    12784                MID="'T'");

  12785  4 002355   000050 630400 5                  EPPR0   40
         4 002356   000022 631400 xsym               EPPR1   B_VECTNIL+18
         4 002357   000000 701000 xent               TSX1    VXE$ERROR
         4 002360   000000 011000                    NOP     0

      635    12787    2           END;

  12787  4 002361   002431 710000 4                  TRA     s:12843

      636    12788    2       ELSE DO;

      637    12789        /*E*  ERROR: VXT-E$MULTIPLY_DEF_VX-0
      638    12790              MESSAGE: %U1 multiply defined symbol(s).
      639    12791              DESCRIPTION: Self-explanatory.
      640    12792        */
      641    12793        /*E*  ERROR: VXT-E$UNSAT_PRI_VX-0
      642    12794              MESSAGE: %U1 unsatisfied primary reference(s).
      643    12795              DESCRIPTION: Self-explanatory.
      644    12796        */
      645    12797        /*E*  ERROR: VXT-E$UNSAT_SEC_VX-0
      646    12798              MESSAGE: %U1 unsatisfied secondary reference(s).
      647    12799              DESCRIPTION: Self-explanatory.
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:146  
      648    12800        */
      649    12801        /*E*  ERROR: VXT-E$CONFLICT_ALTRETURN_VX-0
      650    12802              MESSAGE: %U1 altreturn conflict(s).
      651    12803              DESCRIPTION: Self-explanatory.
      652    12804        */
      653    12805        /*E*  ERROR: VXT-E$CONFLICT_ARG_PARM_VX-0
      654    12806              MESSAGE: %U1 argument/parameter conflict(s).
      655    12807              DESCRIPTION: Self-explanatory.
      656    12808        */
      657    12809        /*E*  ERROR: VXT-E$CONFLICT_CALL_SEQ_VX-0
      658    12810              MESSAGE: %U1 calling sequence mismatch(es).
      659    12811              DESCRIPTION: Self-explanatory.
      660    12812        */
      661    12813    2           STOP = SIZEW( VX_ERRORS_A ) - 1;

  12813  4 002362   000005 235007                    LDA     5,DL
         4 002363   200030 755100                    STA     STOP,,AUTO

      662    12814    3           DO I = 0 TO STOP;

  12814  4 002364   200020 450100                    STZ     I,,AUTO
         4 002365   002426 710000 4                  TRA     s:12841+3

      663    12815    3               J = VX_ERRORS_A(I);

  12815  4 002366   200020 720100                    LXL0    I,,AUTO
         4 002367   000000 235010 xsym               LDA     VX_ERRORS,X0
         4 002370   200021 755100                    STA     J,,AUTO

      664    12816    4               IF J > 0 THEN DO;

  12816  4 002371   002423 600000 4                  TZE     s:12841

      665    12817                        %NUMBER( NUM1 = J, SIZE1 = 4 );

  12823  4 002372   000022 236000 5                  LDQ     18
         4 002373   200114 756100                    STQ     BIRTH_REC+8,,AUTO
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:147  
         4 002374   200021 630500                    EPPR0   J,,AUTO
         4 002375   200113 450500                    STP0    BIRTH_REC+7,,AUTO
         4 002376   000020 236000 5                  LDQ     16
         4 002377   200112 756100                    STQ     BIRTH_REC+6,,AUTO
         4 002400   000016 237000 5                  LDAQ    14
         4 002401   200110 757100                    STAQ    BIRTH_REC+4,,AUTO
         4 002402   200110 630500                    EPPR0   BIRTH_REC+4,,AUTO
         4 002403   000023 631400 xsym               EPPR1   B_VECTNIL+19
         4 002404   000000 701000 xent               TSX1    VXD$B2C
         4 002405   000000 011000                    NOP     0

      666    12834                        %SCREAM(
      667    12835                        ERR#="E$MULTIPLY_DEF_VX+I",
      668    12836                        MID="'T'",
      669    12837                        LEVEL=@E$W_VX);

  12838  4 002406   200020 235100                    LDA     I,,AUTO
         4 002407   000454 035007                    ADLA    300,DL
         4 002410   200110 755100                    STA     BIRTH_REC+4,,AUTO
         4 002411   000014 237000 5                  LDAQ    12
         4 002412   200114 757100                    STAQ    BIRTH_REC+8,,AUTO
         4 002413   000004 236000 5                  LDQ     4
         4 002414   200113 756100                    STQ     BIRTH_REC+7,,AUTO
         4 002415   200110 630500                    EPPR0   BIRTH_REC+4,,AUTO
         4 002416   200112 450500                    STP0    BIRTH_REC+6,,AUTO
         4 002417   200112 630500                    EPPR0   BIRTH_REC+6,,AUTO
         4 002420   000022 631400 xsym               EPPR1   B_VECTNIL+18
         4 002421   000000 701000 xent               TSX1    VXE$ERROR
         4 002422   000000 011000                    NOP     0

      670    12840    4                   END;

      671    12841    3               END;

  12841  4 002423   200020 235100                    LDA     I,,AUTO
         4 002424   000001 035007                    ADLA    1,DL
         4 002425   200020 755100                    STA     I,,AUTO
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:148  
         4 002426   200030 236100                    LDQ     STOP,,AUTO
         4 002427   200020 116100                    CMPQ    I,,AUTO
         4 002430   002366 603000 4                  TRC     s:12815

      672    12842    2           END;

      673    12843    2       IF VX_ERR_SEV > 0 THEN DO;

  12843  4 002431   000000 235000 xsym               LDA     VX_ERR_SEV
         4 002432   002443 600000 4                  TZE     s:12874

      674    12844        /*E*  ERROR: VXT-E$ERR_SEV_VX-0
      675    12845              MESSAGE: Severity level = %U1.
      676    12846              DESCRIPTION: Self-explanatory.
      677    12847        */
      678    12848                %NUMBER( NUM1=VX_ERR_SEV );

  12854  4 002433   000054 630400 5                  EPPR0   44
         4 002434   000023 631400 xsym               EPPR1   B_VECTNIL+19
         4 002435   000000 701000 xent               TSX1    VXD$B2C
         4 002436   000000 011000                    NOP     0

      679    12865                %SCREAM( ERR#=E$ERR_SEV_VX, LEVEL=@E$I_VX, MID="'T'" );

  12866  4 002437   000062 630400 5                  EPPR0   50
         4 002440   000022 631400 xsym               EPPR1   B_VECTNIL+18
         4 002441   000000 701000 xent               TSX1    VXE$ERROR
         4 002442   000000 011000                    NOP     0

      680    12868    2           END; /* If VX_ERR_SEV       > 0 then do; */

      681    12869        %EJECT;
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:149  
      682    12870         /*
      683    12871            Write anything remaining in image formation buffers
      684    12872         */
      685    12873
      686    12874    2       DO I = 0 TO SIZEW( VX_IMAGE_PTR$ ) - 1;

  12874  4 002443   200020 450100                    STZ     I,,AUTO
         4 002444   002504 710000 4                  TRA     s:12880+3

      687    12875    2           VX_IMAGE$ = VX_IMAGE_PTR$(I);

  12875  4 002445   200020 720100                    LXL0    I,,AUTO
         4 002446   000000 236010 xsym               LDQ     VX_IMAGE_PTR$,X0
         4 002447   000000 756000 xsym               STQ     VX_IMAGE$

      688    12876    3           DO J = 0 TO SIZEW( VX$IMAGE.CPAGE#_A ) - 1;

  12876  4 002450   200021 450100                    STZ     J,,AUTO
         4 002451   002476 710000 4                  TRA     s:12879+3

      689    12877    3               IF VX$IMAGE.CPAGE#_A(J) >= 0 THEN

  12877  4 002452   000000 470400 xsym               LDP0    VX_IMAGE$
         4 002453   200021 720100                    LXL0    J,,AUTO
         4 002454   000000 235110                    LDA     0,X0,PR0
         4 002455   002473 604000 4                  TMI     s:12879

      690    12878    3                   CALL VXU$PAGEOUT( VX$IMAGE.NODE_A$(J), I, J );

  12878  4 002456   200021 631500                    EPPR1   J,,AUTO
         4 002457   200112 451500                    STP1    BIRTH_REC+6,,AUTO
         4 002460   200020 633500                    EPPR3   I,,AUTO
         4 002461   200111 453500                    STP3    BIRTH_REC+5,,AUTO
         4 002462   200021 236100                    LDQ     J,,AUTO
         4 002463   000022 736000                    QLS     18
         4 002464   000006 036003                    ADLQ    6,DU
         4 002465   000000 036000 xsym               ADLQ    VX_IMAGE$
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:150  
         4 002466   200110 756100                    STQ     BIRTH_REC+4,,AUTO
         4 002467   200110 630500                    EPPR0   BIRTH_REC+4,,AUTO
         4 002470   000021 631400 xsym               EPPR1   B_VECTNIL+17
         4 002471   000000 701000 xent               TSX1    VXU$PAGEOUT
         4 002472   000000 011000                    NOP     0

      691    12879    3               END; /* Do j = 0 to sizew( VX$IMAGE.CPAGE#_A ) - 1; */

  12879  4 002473   200021 235100                    LDA     J,,AUTO
         4 002474   000001 035007                    ADLA    1,DL
         4 002475   200021 755100                    STA     J,,AUTO
         4 002476   200021 235100                    LDA     J,,AUTO
         4 002477   000002 115007                    CMPA    2,DL
         4 002500   002452 602000 4                  TNC     s:12877

      692    12880    2           END; /* Do i = 0 to sizew( VX$IMAGE_PTR$ ) - 1; */

  12880  4 002501   200020 236100                    LDQ     I,,AUTO
         4 002502   000001 036007                    ADLQ    1,DL
         4 002503   200020 756100                    STQ     I,,AUTO
         4 002504   200020 235100                    LDA     I,,AUTO
         4 002505   000011 115007                    CMPA    9,DL
         4 002506   002445 602000 4                  TNC     s:12875

      693    12881
      694    12882    1       VX_RU_HEAD.S = ~VX_OD.SIN.NSHARED;

  12882  4 002507   000000 236000 xsym               LDQ     VX_OD
         4 002510   000001 736000                    QLS     1
         4 002511   400000 376003                    ANQ     -131072,DU
         4 002512   400000 676003                    ERQ     -131072,DU
         4 002513   000011 772000                    QRL     9
         4 002514   000022 676000 xsym               ERQ     VX_RU_HEAD+18
         4 002515   000400 376003                    ANQ     256,DU
         4 002516   000022 656000 xsym               ERSQ    VX_RU_HEAD+18

      695    12883    1       VX_RU_HEAD.LIB = VX_OD.SIN.SLIB;
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:151  

  12883  4 002517   000000 236000 xsym               LDQ     VX_OD
         4 002520   000003 736000                    QLS     3
         4 002521   000022 676000 xsym               ERQ     VX_RU_HEAD+18
         4 002522   000200 376003                    ANQ     128,DU
         4 002523   000022 656000 xsym               ERSQ    VX_RU_HEAD+18

      696    12884    1       VX_RU_HEAD.ASL = VX_OD.SIN.ASLIB;

  12884  4 002524   000000 236000 xsym               LDQ     VX_OD
         4 002525   000001 736000                    QLS     1
         4 002526   000022 676000 xsym               ERQ     VX_RU_HEAD+18
         4 002527   000100 376003                    ANQ     64,DU
         4 002530   000022 656000 xsym               ERSQ    VX_RU_HEAD+18

      697    12885    1       VX_RU_HEAD.OVRL = ( VX_NODE_NUMBER >= 1 );

  12885  4 002531   400000 220003                    LDX0    -131072,DU
         4 002532   000000 236000 xsym               LDQ     VX_NODE_NUMBER
         4 002533   002535 605400 4                  TPNZ    s:12885+4
         4 002534   000000 220003                    LDX0    0,DU
         4 002535   000000 636010                    EAQ     0,X0
         4 002536   000016 772000                    QRL     14
         4 002537   000022 676000 xsym               ERQ     VX_RU_HEAD+18
         4 002540   000010 376003                    ANQ     8,DU
         4 002541   000022 656000 xsym               ERSQ    VX_RU_HEAD+18

      698    12886    1       VX_RU_HEAD.PROCACC = VX_OD.SIN.PROCACC;

  12886  4 002542   000000 236000 xsym               LDQ     VX_OD
         4 002543   000003 736000                    QLS     3
         4 002544   000022 676000 xsym               ERQ     VX_RU_HEAD+18
         4 002545   000004 376003                    ANQ     4,DU
         4 002546   000022 656000 xsym               ERSQ    VX_RU_HEAD+18

      699    12887    1       VX_RU_HEAD.NOCHGPMEM = VX_OD.SIN.NOCHGPMEM;

PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:152  
  12887  4 002547   000000 236000 xsym               LDQ     VX_OD
         4 002550   000003 736000                    QLS     3
         4 002551   000022 676000 xsym               ERQ     VX_RU_HEAD+18
         4 002552   000002 376003                    ANQ     2,DU
         4 002553   000022 656000 xsym               ERSQ    VX_RU_HEAD+18

      700    12888    1       VX_RU_HEAD.PROCSURCHG = VX_OD.SIN.SURCHARGE;

  12888  4 002554   000000 236000 xsym               LDQ     VX_OD
         4 002555   000004 736000                    QLS     4
         4 002556   000022 676000 xsym               ERQ     VX_RU_HEAD+18
         4 002557   000001 376003                    ANQ     1,DU
         4 002560   000022 656000 xsym               ERSQ    VX_RU_HEAD+18

      701    12889    1       VX_RU_HEAD.RESTPROC = VX_OD.SLOCK | VX_OD.WLOCK;

  12889  4 002561   000003 236000 xsym               LDQ     VX_OD+3
         4 002562   000005 736000                    QLS     5
         4 002563   400000 376003                    ANQ     -131072,DU
         4 002564   200110 756100                    STQ     BIRTH_REC+4,,AUTO
         4 002565   000003 236000 xsym               LDQ     VX_OD+3
         4 002566   000004 736000                    QLS     4
         4 002567   400000 376003                    ANQ     -131072,DU
         4 002570   200110 276100                    ORQ     BIRTH_REC+4,,AUTO
         4 002571   000022 772000                    QRL     18
         4 002572   000022 676000 xsym               ERQ     VX_RU_HEAD+18
         4 002573   400000 376007                    ANQ     -131072,DL
         4 002574   000022 656000 xsym               ERSQ    VX_RU_HEAD+18

      702    12890    1       VX_RU_HEAD.STRONG_LOCK = VX_OD.SLOCK;

  12890  4 002575   000003 236000 xsym               LDQ     VX_OD+3
         4 002576   000017 772000                    QRL     15
         4 002577   000022 676000 xsym               ERQ     VX_RU_HEAD+18
         4 002600   200000 376007                    ANQ     65536,DL
         4 002601   000022 656000 xsym               ERSQ    VX_RU_HEAD+18

PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:153  
      703    12891    1       VX_RU_HEAD.NSTDINVOC = VX_OD.SIN.NSTDINVOC;

  12891  4 002602   000000 236000 xsym               LDQ     VX_OD
         4 002603   000007 772000                    QRL     7
         4 002604   000011 676000 xsym               ERQ     VX_RU_HEAD+9
         4 002605   000100 376007                    ANQ     64,DL
         4 002606   000011 656000 xsym               ERSQ    VX_RU_HEAD+9

      704    12892    1       VX_RU_HEAD.STATS = VX_OD.SIN.STATS;

  12892  4 002607   000000 236000 xsym               LDQ     VX_OD
         4 002610   000011 772000                    QRL     9
         4 002611   000011 676000 xsym               ERQ     VX_RU_HEAD+9
         4 002612   000010 376007                    ANQ     8,DL
         4 002613   000011 656000 xsym               ERSQ    VX_RU_HEAD+9

      705    12893    1       VX_RU_HEAD.LOCK = VX_O.LOCK;

  12893  4 002614   000000 100400                    MLR     fill='000'O
         4 002615   000170 000010 xsym               ADSC9   VX_O+120                 cn=0,n=8
         4 002616   000020 000010 xsym               ADSC9   VX_RU_HEAD+16            cn=0,n=8

      706    12894    1       VX_RU_HEAD.SEV = VX_ERR_SEV;

  12894  4 002617   000000 236000 xsym               LDQ     VX_ERR_SEV
         4 002620   000033 736000                    QLS     27
         4 002621   000003 552040 xsym               STBQ    VX_RU_HEAD+3,'40'O

      707    12895    2       IF VX_O.NUM.START >= 0 THEN DO; /* Check if user override on start address */

  12895  4 002622   000042 236000 xsym               LDQ     VX_O+34
         4 002623   002646 604000 4                  TMI     IGNORE_START

      708    12896    2           IF ( VX_ROOT$ -> VX$NODE.ADDR_START.RDATA <= VX_O.NUM.START

  12896  4 002624   000000 470400 xsym               LDP0    VX_ROOT$
         4 002625   000012 116100                    CMPQ    10,,PR0
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:154  
         4 002626   002631 604000 4                  TMI     s:12896+5
         4 002627   000015 116100                    CMPQ    13,,PR0
         4 002630   002635 604400 4                  TMOZ    s:12903
         4 002631   000013 116100                    CMPQ    11,,PR0
         4 002632   002641 604000 4                  TMI     s:12910
         4 002633   000016 116100                    CMPQ    14,,PR0
         4 002634   002641 605400 4                  TPNZ    s:12910

      709    12897    2              AND
      710    12898    2              VX_ROOT$ -> VX$NODE.ADDR_STOP.RDATA >= VX_O.NUM.START )
      711    12899    2              OR
      712    12900    2              ( VX_ROOT$ -> VX$NODE.ADDR_START.RPROC <= VX_O.NUM.START
      713    12901    2              AND
      714    12902    2              VX_ROOT$ -> VX$NODE.ADDR_STOP.RPROC >= VX_O.NUM.START ) THEN
      715    12903    2               VX_RU_HEAD.START = VX_O.NUM.START; /* Within root bounds */

  12903  4 002635   000003 676000 xsym               ERQ     VX_RU_HEAD+3
         4 002636   000066 376000 5                  ANQ     54
         4 002637   000003 656000 xsym               ERSQ    VX_RU_HEAD+3
         4 002640   002661 710000 4                  TRA     s:12920

      716    12904    3           ELSE DO; /* Here => error; not within root bounds */

      717    12905                    %SCREAM(
      718    12906                    ERR#=E$FIMAGE_START_NOT_ROOT_VX,
      719    12907                    LEVEL=@E$W_VX,
      720    12908                    MID="'T'",
      721    12909                    AUX=@E$REFOUOF_VX);

  12910  4 002641   000070 630400 5                  EPPR0   56
         4 002642   000022 631400 xsym               EPPR1   B_VECTNIL+18
         4 002643   000000 701000 xent               TSX1    VXE$ERROR
         4 002644   000000 011000                    NOP     0

      722    12912    3               GOTO IGNORE_START;

  12912  4 002645   002646 710000 4                  TRA     IGNORE_START
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:155  

      723    12913    3               END; /* Else do; */
      724    12914    2           END; /* If VX_O.NUM.START >= 0 then do; */
      725    12915    2       ELSE DO;

      726    12916    2   IGNORE_START:
      727    12917    2           IF VX_O.OPT.START >= 0 THEN VX_RU_HEAD.START = VX_O.OPT.START;

  12917  4 002646   000154 235000 xsym  IGNORE_START LDA     VX_O+108
         4 002647   002655 604000 4                  TMI     s:12918

  12917  4 002650   000154 236000 xsym               LDQ     VX_O+108
         4 002651   000003 676000 xsym               ERQ     VX_RU_HEAD+3
         4 002652   000066 376000 5                  ANQ     54
         4 002653   000003 656000 xsym               ERSQ    VX_RU_HEAD+3
         4 002654   002661 710000 4                  TRA     s:12920

      728    12918    2           ELSE VX_RU_HEAD.START = VX_PROGRAM_BIAS.I.DATA;

  12918  4 002655   000000 236000 xsym               LDQ     VX_PROGRAM_BIAS
         4 002656   000003 676000 xsym               ERQ     VX_RU_HEAD+3
         4 002657   000066 376000 5                  ANQ     54
         4 002660   000003 656000 xsym               ERSQ    VX_RU_HEAD+3

      729    12919    2           END; /* Else do */

      730    12920    1       VX_RU_HEAD.TCBSIZE = VX_O.NUM.TCB;

  12920  4 002661   000043 720000 xsym               LXL0    VX_O+35
         4 002662   000005 440000 xsym               SXL0    VX_RU_HEAD+5

      731    12921    1       VX_RU_HEAD.PRECSIZE = @BUF_SIZE;

  12921  4 002663   002000 221003                    LDX1    1024,DU
         4 002664   000006 741000 xsym               STX1    VX_RU_HEAD+6

      732    12922    2       IF VX_O.FID.ALTSHARELIB$ ~= ADDR(NIL) THEN DO;
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:156  

  12922  4 002665   000122 236000 xsym               LDQ     VX_O+82
         4 002666   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 002667   002704 600000 4                  TZE     s:12928

      733    12923    2           P$ = VX_O.FID.ALTSHARELIB$ -> VX$LST.P.NAME_.NAME$;

  12923  4 002670   000122 470400 xsym               LDP0    VX_O+82
         4 002671   000006 236100                    LDQ     6,,PR0
         4 002672   200003 756100                    STQ     P$,,AUTO

      734    12924    2           VX_RU_HEAD.ASLNAME.CNT = P$ -> T$C.COUNT;

  12924  4 002673   200003 471500                    LDP1    P$,,AUTO
         4 002674   100000 236100                    LDQ     0,,PR1
         4 002675   000040 552040 xsym               STBQ    VX_RU_HEAD+32,'40'O

      735    12925    2           VX_RU_HEAD.ASLNAME.TXT = P$ -> T$C.CHARS;

  12925  4 002676   100000 236100                    LDQ     0,,PR1
         4 002677   000033 772000                    QRL     27
         4 002700   000000 622006                    EAX2    0,QL
         4 002701   040000 100540                    MLR     fill='040'O
         4 002702   100000 200012                    ADSC9   0,,PR1                   cn=1,n=*X2
         4 002703   000040 200037 xsym               ADSC9   VX_RU_HEAD+32            cn=1,n=31

      736    12926    2           END;

      737    12927         /* Write birth record */
      738    12928    1       BIRTH_REC.CREATE_UTS = VX_LINK_UTS;

  12928  4 002704   000000 235000 xsym               LDA     VX_LINK_UTS
         4 002705   200104 755100                    STA     BIRTH_REC,,AUTO

      739    12929    1       BIRTH_REC.RUMED_UTS = 0;

  12929  4 002706   200105 450100                    STZ     BIRTH_REC+1,,AUTO
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:157  

      740    12930    1       BIRTH_REC.COUNT = 0;

  12930  4 002707   200106 450100                    STZ     BIRTH_REC+2,,AUTO

      741    12931    1       VX_R_KEY_BUF.FORM0.COUNT = SIZEC( VX_R_KEY_BIRTH );

  12931  4 002710   005000 236003                    LDQ     2560,DU
         4 002711   000000 552040 xsym               STBQ    VX_R_KEY_BUF,'40'O

      742    12932    1       VX_R_KEY_BUF.FORM0.CHARS = VX_R_KEY_BIRTH;

  12932  4 002712   040000 100400                    MLR     fill='040'O
         4 002713   000000 000005 xsym               ADSC9   VX_R_KEY_BIRTH           cn=0,n=5
         4 002714   000000 200005 xsym               ADSC9   VX_R_KEY_BUF             cn=1,n=5

      743    12933    1       CALL VXI$WRITE( @RF,

  12933  4 002715   200104 630500                    EPPR0   BIRTH_REC,,AUTO
         4 002716   200110 450500                    STP0    BIRTH_REC+4,,AUTO
         4 002717   000074 237000 5                  LDAQ    60
         4 002720   200114 757100                    STAQ    BIRTH_REC+8,,AUTO
         4 002721   200110 631500                    EPPR1   BIRTH_REC+4,,AUTO
         4 002722   200113 451500                    STP1    BIRTH_REC+7,,AUTO
         4 002723   000002 236000 5                  LDQ     2
         4 002724   200112 756100                    STQ     BIRTH_REC+6,,AUTO
         4 002725   200112 630500                    EPPR0   BIRTH_REC+6,,AUTO
         4 002726   000022 631400 xsym               EPPR1   B_VECTNIL+18
         4 002727   000000 701000 xent               TSX1    VXI$WRITE
         4 002730   000000 011000                    NOP     0

      744    12934    1          ADDR( BIRTH_REC ),
      745    12935    1          SIZEW( BIRTH_REC ),
      746    12936    1          @RF );
      747    12937         /* Write run unit head record */
      748    12938    1       VX_R_KEY_BUF.FORM0.COUNT = LENGTHC( VX_R_KEY_HEAD );

PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:158  
  12938  4 002731   004000 236003                    LDQ     2048,DU
         4 002732   000000 552040 xsym               STBQ    VX_R_KEY_BUF,'40'O

      749    12939    1       VX_R_KEY_BUF.FORM0.CHARS = VX_R_KEY_HEAD;

  12939  4 002733   040000 100400                    MLR     fill='040'O
         4 002734   000000 000004 xsym               ADSC9   VX_R_KEY_HEAD            cn=0,n=4
         4 002735   000000 200005 xsym               ADSC9   VX_R_KEY_BUF             cn=1,n=5

      750    12940    1       CALL VXI$WRITE( @RF,

  12940  4 002736   000076 236000 5                  LDQ     62
         4 002737   200110 756100                    STQ     BIRTH_REC+4,,AUTO
         4 002740   000100 237000 5                  LDAQ    64
         4 002741   200114 757100                    STAQ    BIRTH_REC+8,,AUTO
         4 002742   200110 630500                    EPPR0   BIRTH_REC+4,,AUTO
         4 002743   200113 450500                    STP0    BIRTH_REC+7,,AUTO
         4 002744   000002 236000 5                  LDQ     2
         4 002745   200112 756100                    STQ     BIRTH_REC+6,,AUTO
         4 002746   200112 630500                    EPPR0   BIRTH_REC+6,,AUTO
         4 002747   000022 631400 xsym               EPPR1   B_VECTNIL+18
         4 002750   000000 701000 xent               TSX1    VXI$WRITE
         4 002751   000000 011000                    NOP     0

      751    12941    1          ADDR( VX_RU_HEAD ),
      752    12942    1          SIZEW( VX_RU_HEAD ),
      753    12943    1          @RF );
      754    12944         /* Give back memory*/
      755    12945    2       DO I = 0 TO @DATA_SEGS1; /* For all data segs */

  12945  4 002752   200020 450100                    STZ     I,,AUTO

      756    12946    2           SJ = VX_M_FREE(I); /* Get allocated size */

  12946  4 002753   200020 720100                    LXL0    I,,AUTO
         4 002754   000000 235010 xsym               LDA     VX_M_FREE,X0
         4 002755   200021 755100                    STA     J,,AUTO
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:159  

      757    12947    2           IF I ~= @AUTO_SEG AND SJ > 0 THEN

  12947  4 002756   200020 236100                    LDQ     I,,AUTO
         4 002757   000002 116007                    CMPQ    2,DL
         4 002760   002775 600000 4                  TZE     s:12949
         4 002761   000000 115003                    CMPA    0,DU
         4 002762   002775 604400 4                  TMOZ    s:12949

      758    12948    2               CALL VXF$FREE( I, SJ, 0 );

  12948  4 002763   000001 236000 5                  LDQ     1
         4 002764   200112 756100                    STQ     BIRTH_REC+6,,AUTO
         4 002765   200021 630500                    EPPR0   J,,AUTO
         4 002766   200111 450500                    STP0    BIRTH_REC+5,,AUTO
         4 002767   200020 631500                    EPPR1   I,,AUTO
         4 002770   200110 451500                    STP1    BIRTH_REC+4,,AUTO
         4 002771   200110 630500                    EPPR0   BIRTH_REC+4,,AUTO
         4 002772   000021 631400 xsym               EPPR1   B_VECTNIL+17
         4 002773   000000 701000 xent               TSX1    VXF$FREE
         4 002774   000000 011000                    NOP     0

      759    12949    2           END;

  12949  4 002775   200020 235100                    LDA     I,,AUTO
         4 002776   000001 035007                    ADLA    1,DL
         4 002777   200020 755100                    STA     I,,AUTO
         4 003000   000007 115007                    CMPA    7,DL
         4 003001   002753 602000 4                  TNC     s:12946

      760    12950         /* Delete the **..**B_PATCH file */
      761    12951    1       IF VX_O.NUM.DPATCH > 0 OR

  12951  4 003002   000045 236000 xsym               LDQ     VX_O+37
         4 003003   003006 605400 4                  TPNZ    s:12954
         4 003004   000046 235000 xsym               LDA     VX_O+38
         4 003005   003011 604400 4                  TMOZ    s:12956
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:160  

      762    12952    1          VX_O.NUM.IPATCH > 0
      763    12953    2       THEN DO;

      764    12954    2           CALL VXO$DEL_PATCH_FILE;

  12954  4 003006   000002 631400 xsym               EPPR1   B_VECTNIL+2
         4 003007   000000 701000 xent               TSX1    VXO$DEL_PATCH_FILE
         4 003010   000000 011000                    NOP     0

      765    12955    2           END;

      766    12956    1       RETURN;

  12956  4 003011   000000 702200 xent               TSX2  ! X66_ARET

      767    12957        %EJECT;
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:161  
      768    12958    1   LINK_ERROR:
      769    12959        /*E*  ERROR: VXT-E$INTERNAL_DCB_PUMP_VX-0
      770    12960              MESSAGE: Internal LINK error; VXT$POST cannot pump name %U1 to root.
      771    12961              DESCRIPTION: Self-explanatory.
      772    12962        */
      773    12963    1       VX_EFIELD1.COUNT = BIN_MATCH$ -> B$DNAME.COUNT;

  12963  4 003012   200063 470500       LINK_ERROR   LDP0    BIN_MATCH$,,AUTO
         4 003013   000000 236100                    LDQ     0,,PR0
         4 003014   000011 736000                    QLS     9
         4 003015   000000 552040 xsym               STBQ    VX_EFIELD1,'40'O

      774    12964    1       VX_EFIELD1.CHARS = BIN_MATCH$ -> B$DNAME.TEXT;

  12964  4 003016   000000 220100                    LDX0    0,,PR0
         4 003017   040000 100540                    MLR     fill='040'O
         4 003020   000000 400010                    ADSC9   0,,PR0                   cn=2,n=*X0
         4 003021   000000 200117 xsym               ADSC9   VX_EFIELD1               cn=1,n=79

      775    12965            %SCREAM(
      776    12966            ERR#=E$INTERNAL_DCB_PUMP_VX,
      777    12967            MID="'T'",
      778    12968            LEVEL=@E$F_VX);

  12969  4 003022   000103 630400 5                  EPPR0   67
         4 003023   000022 631400 xsym               EPPR1   B_VECTNIL+18
         4 003024   000000 701000 xent               TSX1    VXE$ERROR
         4 003025   000000 011000                    NOP     0

      779    12971    1   IO_ERROR:
      780    12972        /*E*  ERROR: VXT-E$SLIB_HEAD_INIT_VX-0
      781    12973              MESSAGE: I/O error while attempting shared library data lay in.
      782    12974              DESCRIPTION: Self-explanatory.
      783    12975        */
      784    12976            %SCREAM(
      785    12977            ERR#=E$SLIB_HEAD_INIT_VX,
      786    12978            LEVEL=E$F_VX,
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:162  
      787    12979            MID="'T'");

  12980  4 003026   000110 630400 5     IO_ERROR     EPPR0   72
         4 003027   000022 631400 xsym               EPPR1   B_VECTNIL+18
         4 003030   000000 701000 xent               TSX1    VXE$ERROR
         4 003031   000000 011000                    NOP     0

      788    12982    1   END VXT$POST;

  12982  4 003032   000000 702200 xent               TSX2  ! X66_ARET

PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:163  
--  Include file information  --

   VX_PSUBS_C.:E05TOU  is referenced.
   F_DCB_D.:E05TOU  is referenced.
   VX_DCB_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_FIXED_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VX_MACRO_C.:E05TOU  is referenced.
   VX_PERR_C.:E05TOU  is referenced.
   VX_SUBS_C.:E05TOU  is referenced.
   VX_SWITCH_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   VX_INC_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VXT$POST.
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:164  

 **** Variables and constants ****

  ****  Section 003  Data  VXT$POST

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC        r     1 LEAST_ENTRY                0-0-0/w EPTR        r     1 LEAST_ENTRY$

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    53-0-0/w UBIN        r     1 BIN_HIGH                  52-0-0/w UBIN        r     1 BIN_LOW
    63-0-0/w PTR         r     1 BIN_MATCH$                54-0-0/w UBIN        r     1 BIN_MID
    62-0-0/w PTR         r     1 BIN_N$                    55-0-0/w PTR         r     1 BIN_NTEMP$
    61-0-0/w PTR         r     1 BIN_RESULT$               57-0-0/w PTR         r     1 BIN_START$
    56-0-0/w PTR         r     1 BIN_START1$               60-0-0/w PTR         r     1 BIN_STOP$
   104-0-0/w STRC(108)   r     1 BIRTH_REC                  6-0-0/w PTR         r     1 CURR$
     7-0-0/w PTR         r     1 DCB_CURR$                 10-0-0/w PTR         r     1 DN_ROOT_START$
    20-0-0/w UBIN        r     1 I                         21-0-0/w UBIN        r     1 J
    22-0-0/w UBIN        r     1 K                        103-0-0/w UBIN        r     1 LEAST
    70-0-0/w UBIN        r     1 MOVE_ADR_TEMP             66-0-0/w SBIN        r     1 MOVE_PAGE_REMAIN
    71-0-0/w PTR         r     1 MOVE_SRC$                 67-0-0/w PTR         r     1 MOVE_TARGET$
    72-0-0/w UBIN        r     1 MOVE_TEMP                 17-0-0/w PTR         r     1 N$
    15-0-0/w PTR         r     1 NAME$                     41-0-0/w UBIN        r     1 NAME_ADR
    43-0-0/w UBIN        r     1 NAME_SIZE                 14-0-0/w PTR         r     1 NODE$
    44-0-0/w UBIN        r     1 NODE_ADR                  73-0-0/w STRC(288)   r     1 NODE_NAME
     3-0-0/w PTR         r     1 P$                         4-0-0/w PTR         r     1 Q$
     5-0-0/w PTR         r     1 R$                        51-0-0/w SBIN(18)    r     1 SBIN_NAME_DISP
    35-0-0/w UBIN        r     1 SIZE                      21-0-0/w SBIN        r     1 SJ
    30-0-0/w UBIN        r     1 STOP                      16-0-0/w PTR         r     1 S_NAME$
    13-0-0/w PTR         r     1 T$                        42-0-0/w UBIN        r     1 TREE_ADR

  ****  SYMREF variables  ****

PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:165  
  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN        r     1 VX_BREF_ADR                0-0-0/w UBIN        r     1 VX_BREF_DEFINITION
     0-0-0/w UBIN        r     1 VX_BREF_INSTANCE           0-0-0/w PTR         r     1 VX_BREF_START$
     0-0-0/w PTR         r     1 VX_CURR$
     0-0-0/w CHAR(10)    r     1 VX_DCB_OPTION_TEXT(0:3)
     0-0-0/w UBIN        r     1 VX_DCB_SIZEC               0-0-0/w PTR         r     1 VX_DCB_START$
     0-0-0/w PTR         r     1 VX_DCB_STOP$
     0-0-0/w UBIN        r     1 VX_DEF_REC_A(0:3)
     0-0-0/w STRC(720)   r     1 VX_EFIELD1                 0-0-0/w STRC(720)   r     1 VX_EFIELD2
     0-0-0/w STRC(216)   r     1 VX_ERRORS
     0-0-0/w UBIN        r     1 VX_ERRORS_A(0:5)
     0-0-0/w UBIN        r     1 VX_ERR_SEV                 0-0-0/w PTR         r     1 VX_IMAGE$
     0-0-0/w PTR         r     1 VX_IMAGE_PTR$(0:8)
     0-0-0/w UBIN        r     1 VX_LINK_UTS
     0-0-0/w SBIN        r     1 VX_M_FREE(0:8)
     0-0-0/w PTR         r     1 VX_NEXT_BREF$              0-0-0/w SBIN        r     1 VX_NODE_NUMBER
     0-0-0/w STRC(4572)  r     1 VX_O                       0-0-0/b STRC(116)   r     1 VX_OD
     0-0-0/w STRC(108)   r     1 VX_PROGRAM_BIAS
     0-0-0/w SBIN        r     1 VX_REC_SIZE_A(0:15)
     0-0-0/w PTR         r     1 VX_ROOT$                   0-0-0/w BIT         r     1 VX_ROS_ALLOWED
     0-0-0/w STRC(1440)  r     1 VX_RU_HEAD                 0-0-0/c CHAR(5)     r     1 VX_R_KEY_BIRTH
     0-0-0/w STRC(108)   r     1 VX_R_KEY_BUF               0-0-0/c CHAR(4)     r     1 VX_R_KEY_HEAD
     0-0-0/w UBIN        r     1 VX_SC_ROOT_LBL_COM         0-0-0/w PTR         r     1 VX_SC_X_NODE$
     0-0-0/w PTR         r     1 VX_SLIB_INIT$              0-0-0/w UBIN        r     1 VX_SLIB_MAX_DATA
     0-0-0/w UBIN        r     1 VX_SOURCE_COUNT            0-0-0/w STRC(1908)  r     1 VX_SPC
     0-0-0/w UBIN        r     1 VX_TARGET_COUNT            0-0-0/w UBIN        r     1 VX_TREE_ADR

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w ASTR(18)    r     1 B$DNAME                    0-0-0/w STRC(72)    r     1 B$EDEF
     0-0-0/w ASTR(9)     r     1 T$C                        0-0-0/c ASTR(9)     r     1 T$C_UNAL
     0-0-0/w ASTR(9)     r     1 VX$DCB$T$C
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:166  
     0-0-0/h UBIN(18)    r     1 VX$HALF_A(0:0)
     0-0-0/w STRC(432)   r     1 VX$IMAGE                   0-0-0/w STRC(648)   r     1 VX$LST
     0-0-0/w STRC(3672)  r     1 VX$NODE                    0-0-0/w STRC(108)   r     1 VX$SC
     0-0-0/w ACHR        r     1 VX$SOURCE_C                0-0-0/w ACHR        r     1 VX$TARGET_C
     0-0-0/w STRC(72)    r     1 VX$TMPLT                   0-0-0/w STRC(108)   r     1 VX$TREE_HEADER
     0-0-0/w STRC(216)   r     1 VX$TREE_NODE
     0-0-0/w UBIN        r     1 VX$WORD_A(0:0)
     0-0-0/w STRC(72)    r     1 VXD$TMPLT


   Procedure VXT$POST requires 1563 words for executable code.
   Procedure VXT$POST requires 80 words of local(AUTO) storage.

    No errors detected in file VXT$POST.:E05TSI    .
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:167  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:168  
          MINI XREF LISTING

ALL_DONE
     12345**LABEL   12340--GOTO
ALL_DONE_DCB
     12240**LABEL   12234--GOTO
B$DNAME.COUNT
     11759**DCL     11766--IMP-SIZ 12118>>ASSIGN  12119<<ASSIGN  12120>>ASSIGN  12120>>ASSIGN  12171>>IF
     12171>>IF      12174>>IF      12174>>IF      12191>>IF      12191>>IF      12197>>IF      12197>>IF
     12221>>IF      12221>>IF      12231>>IF      12231>>IF      12240>>ASSIGN  12241<<ASSIGN  12242>>ASSIGN
     12242>>ASSIGN  12278>>IF      12278>>IF      12281>>IF      12281>>IF      12298>>IF      12298>>IF
     12304>>IF      12304>>IF      12327>>IF      12327>>IF      12337>>IF      12337>>IF      12345>>ASSIGN
     12346<<ASSIGN  12347>>ASSIGN  12347>>ASSIGN  12668>>ASSIGN  12669>>ASSIGN  12963>>ASSIGN  12964>>ASSIGN
B$DNAME.TEXT
     11766**DCL     12120<<ASSIGN  12120>>ASSIGN  12171>>IF      12171>>IF      12174>>IF      12174>>IF
     12191>>IF      12191>>IF      12197>>IF      12197>>IF      12221>>IF      12221>>IF      12231>>IF
     12231>>IF      12242<<ASSIGN  12242>>ASSIGN  12278>>IF      12278>>IF      12281>>IF      12281>>IF
     12298>>IF      12298>>IF      12304>>IF      12304>>IF      12327>>IF      12327>>IF      12337>>IF
     12337>>IF      12347<<ASSIGN  12347>>ASSIGN  12669>>ASSIGN  12964>>ASSIGN
B$EDEF
     11155**DCL     12595--ASSIGN
B$EDEF.ISADDR
     11178**DCL     12592>>ASSIGN  12594>>IF      12594>>ASSIGN
B$EDEF.OU
     11172**DCL     11178--REDEF
B$SDEF.AD.OU
     11263**DCL     11269--REDEF
B$SDEF.VALUE
     11244**DCL     11247--REDEF
B$SEGDEF.AD.OU
     11339**DCL     11344--REDEF
B$SEGDEF.LFLAGS
     11354**DCL     11365--REDEF
B$SEGDEF.VALUE
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:169  
     11316**DCL     11319--REDEF   11323--REDEF
BIN_CHECK
     12200**LABEL   12195--GOTO
BIN_HIGH
     12008**DCL     12185<<ASSIGN  12188>>ASSIGN  12200<<ASSIGN  12202>>IF      12292<<ASSIGN  12295>>ASSIGN
     12307<<ASSIGN  12309>>IF
BIN_LOW
     12007**DCL     12184<<ASSIGN  12188>>ASSIGN  12194<<ASSIGN  12202>>IF      12291<<ASSIGN  12295>>ASSIGN
     12301<<ASSIGN  12309>>IF
BIN_MATCH$
     12025**DCL     12151<<ASSIGN  12171>>IF      12171>>IF      12174>>IF      12174>>IF      12191>>IF
     12191>>IF      12197>>IF      12197>>IF      12221>>IF      12221>>IF      12231>>IF      12231>>IF
     12256<<ASSIGN  12278>>IF      12278>>IF      12281>>IF      12281>>IF      12298>>IF      12298>>IF
     12304>>IF      12304>>IF      12327>>IF      12327>>IF      12337>>IF      12337>>IF      12963>>ASSIGN
     12964>>ASSIGN  12964>>ASSIGN
BIN_MID
     12009**DCL     12188<<ASSIGN  12189>>ASSIGN  12194>>ASSIGN  12200>>ASSIGN  12295<<ASSIGN  12296>>ASSIGN
     12301>>ASSIGN  12307>>ASSIGN
BIN_N$
     12024**DCL     12147<<ASSIGN  12151>>ASSIGN  12170>>ASSIGN  12190>>ASSIGN  12216>>ASSIGN  12218>>ASSIGN
     12221>>IF      12221>>IF      12231>>IF      12231>>IF      12277>>ASSIGN  12297>>ASSIGN  12323>>ASSIGN
     12324>>ASSIGN  12327>>IF      12327>>IF      12337>>IF      12337>>IF
BIN_NTEMP$
     12010**DCL     12170<<ASSIGN  12171>>IF      12171>>IF      12174>>IF      12174>>IF      12190<<ASSIGN
     12191>>IF      12191>>IF      12197>>IF      12197>>IF      12277<<ASSIGN  12278>>IF      12278>>IF
     12281>>IF      12281>>IF      12297<<ASSIGN  12298>>IF      12298>>IF      12304>>IF      12304>>IF
BIN_RESULT$
     12023**DCL     12168<<ASSIGN  12169>>DOWHILE 12170>>ASSIGN  12179<<ASSIGN  12179>>ASSIGN  12189<<ASSIGN
     12190>>ASSIGN  12216>>ASSIGN  12219>>ASSIGN  12229>>ASSIGN  12275<<ASSIGN  12276>>DOWHILE 12277>>ASSIGN
     12286<<ASSIGN  12286>>ASSIGN  12296<<ASSIGN  12297>>ASSIGN  12323>>ASSIGN  12325>>ASSIGN  12335>>ASSIGN
BIN_SPLIT
     12186**LABEL   12202--GOTO
BIN_START$
     12021**DCL     12145<<ASSIGN  12166>>IF      12167>>IF      12168>>ASSIGN  12185>>ASSIGN  12186>>ASSIGN
     12220>>DOWHILE 12273>>IF      12274>>IF      12275>>ASSIGN  12292>>ASSIGN  12293>>ASSIGN  12326>>DOWHILE
BIN_START1$
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:170  
     12011**DCL     12186<<ASSIGN  12189>>ASSIGN  12293<<ASSIGN  12296>>ASSIGN
BIN_STOP$
     12022**DCL     12146<<ASSIGN  12167>>IF      12169>>DOWHILE 12185>>ASSIGN  12230>>DOWHILE 12274>>IF
     12276>>DOWHILE 12292>>ASSIGN  12336>>DOWHILE
BIRTH_REC
     12084**DCL     12933--CALL    12933--CALL
BIRTH_REC.COUNT
     12089**DCL     12930<<ASSIGN
BIRTH_REC.CREATE_UTS
     12085**DCL     12928<<ASSIGN
BIRTH_REC.RUMED_UTS
     12087**DCL     12929<<ASSIGN
CHECK_BROTHER
     12636**LABEL   12642--GOTO
CHECK_SPC
     12307**LABEL   12302--GOTO
CURR$
     11923**DCL     12364<<ASSIGN  12366>>DOWHILE 12367<<ASSIGN  12367>>ASSIGN  12374>>ASSIGN  12375>>ASSIGN
     12377>>ASSIGN  12378>>ASSIGN  12380>>ASSIGN  12381>>ASSIGN  12396>>ASSIGN  12402>>IF      12405<<ASSIGN
     12405>>ASSIGN  12410<<ASSIGN  12410>>ASSIGN  12411>>IF
DCB_CURR$
     11924**DCL     12149<<ASSIGN  12150>>DOWHILE 12151>>ASSIGN  12248<<ASSIGN  12248>>ASSIGN
DEPTH_WRITE
     12095**LABEL   12097--GOTO    12485--GOTO
DN_ROOT_START$
     11925**DCL     12105<<ASSIGN  12106>>ASSIGN  12116>>ASSIGN  12117>>ASSIGN
DONE_DCB_PUMP_UP
     12251**LABEL   12148--GOTO
FOUND_DCB
     12216**LABEL   12176--GOTO
FOUND_SPC
     12323**LABEL   12283--GOTO
I
     11954**DCL     11955--REDEF   12251<<DOINDEX 12252>>IF      12252>>IF      12255>>IF      12256>>ASSIGN
     12369<<DOINDEX 12372>>DOCASE  12384>>IF      12414<<DOINDEX 12415>>ASSIGN  12418>>DOCASE  12656<<DOINDEX
     12657>>IF      12657>>IF      12666>>ASSIGN  12667>>IF      12668>>ASSIGN  12669>>ASSIGN  12669>>ASSIGN
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:171  
     12814<<DOINDEX 12815>>ASSIGN  12838>>CALL    12874<<DOINDEX 12875>>ASSIGN  12878<>CALL    12945<<DOINDEX
     12946>>ASSIGN  12947>>IF      12948<>CALL
IGNORE_START
     12917**LABEL   12912--GOTO
J
     11956**DCL     11957--REDEF   12133<<ASSIGN  12134>>ASSIGN  12135>>ASSIGN  12137<<ASSIGN  12138>>ASSIGN
     12139>>ASSIGN  12240<<ASSIGN  12241>>ASSIGN  12243>>ASSIGN  12345<<ASSIGN  12346>>ASSIGN  12348>>ASSIGN
     12356<<ASSIGN  12357>>ASSIGN  12358>>ASSIGN  12415<<ASSIGN  12416>>ASSIGN  12428<>CALL    12432>>CALL
     12454<<ASSIGN  12455>>IF      12461>>IF      12462<<ASSIGN  12469>>ASSIGN  12670<<ASSIGN  12672<<ASSIGN
     12681<>CALL    12815<<ASSIGN  12816>>IF      12823<>CALL    12876<<DOINDEX 12877>>IF      12878>>CALL
     12878<>CALL
JUMP_OUT_SC
     12469**LABEL   12466--GOTO
K
     11958**DCL     11959--REDEF   12118<<ASSIGN  12119>>ASSIGN  12121>>ASSIGN  12218<<ASSIGN  12225>>ASSIGN
     12235>>ASSIGN  12324<<ASSIGN  12331>>ASSIGN  12341>>ASSIGN
L
     11960**DCL     11961--REDEF
L00P
     12366**LABEL   12406--GOTO
L00P1
     12369**LABEL   12412--GOTO
LEAST
     12075**DCL     12592<<ASSIGN  12594>>IF      12594<<ASSIGN  12597>>ASSIGN
LEAST_ENTRY
     12076**DCL     12079--REDEF
LEAST_ENTRY.LH
     12077**DCL     12597<<ASSIGN
LEAST_ENTRY$
     12079**DCL     12598>>ASSIGN
LINK_ERROR
     12963**LABEL   12166--GOTO    12177--GOTO    12181--GOTO    12210--GOTO    12273--GOTO    12284--GOTO
     12288--GOTO    12317--GOTO
MOVE_ADR_TEMP
     12055**DCL     12503<<ASSIGN  12509<>CALL    12515<<ASSIGN  12515>>ASSIGN
MOVE_PAGE_REMAIN
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:172  
     12053**DCL     12504<<ASSIGN  12506>>DOWHILE 12507>>IF      12508>>ASSIGN  12514<<ASSIGN  12514>>ASSIGN
MOVE_SRC$
     12056**DCL     12505<<ASSIGN  12512>>ASSIGN  12513<<ASSIGN  12513>>ASSIGN
MOVE_TARGET$
     12054**DCL     12509<>CALL    12512>>ASSIGN
MOVE_TEMP
     12057**DCL     12507<<ASSIGN  12508<<ASSIGN  12509<>CALL    12510>>ASSIGN  12513>>ASSIGN  12514>>ASSIGN
     12515>>ASSIGN
N$
     11932**DCL     12106<<ASSIGN  12117>>ASSIGN  12119>>ASSIGN  12120>>ASSIGN  12120>>ASSIGN  12121<<ASSIGN
     12121>>ASSIGN  12133>>ASSIGN  12143<<ASSIGN  12218>>ASSIGN  12241>>ASSIGN  12242>>ASSIGN  12242>>ASSIGN
     12243<<ASSIGN  12243>>ASSIGN  12324>>ASSIGN  12346>>ASSIGN  12347>>ASSIGN  12347>>ASSIGN  12348<<ASSIGN
     12348>>ASSIGN  12356>>ASSIGN
NAME$
     11930**DCL     12547<>CALL    12552>>ASSIGN  12553>>ASSIGN  12553>>ASSIGN  12622<>CALL    12627>>ASSIGN
     12628>>ASSIGN  12628>>ASSIGN
NAME_ADR
     11976**DCL     12523<<ASSIGN  12539>>ASSIGN  12547<>CALL    12554<<ASSIGN  12554>>ASSIGN  12607>>ASSIGN
     12622<>CALL    12629<<ASSIGN  12629>>ASSIGN
NAME_SIZE
     11978**DCL     12542<<ASSIGN  12547<>CALL    12554>>ASSIGN  12617<<ASSIGN  12622<>CALL    12629>>ASSIGN
NEXT_NODE
     12565**LABEL   12632--GOTO    12638--GOTO
NODE$
     11929**DCL     12528<>CALL    12533>>ASSIGN  12534>>ASSIGN  12535>>ASSIGN  12536>>ASSIGN  12537>>ASSIGN
     12565<>CALL    12570>>ASSIGN  12572>>ASSIGN  12573>>ASSIGN  12575>>ASSIGN  12576>>ASSIGN  12578>>ASSIGN
     12579>>ASSIGN  12580>>ASSIGN  12581>>ASSIGN  12582>>ASSIGN  12585>>ASSIGN  12598>>ASSIGN  12604>>ASSIGN
     12605>>ASSIGN
NODE_ADR
     11979**DCL     12559<<ASSIGN  12565>>CALL
NODE_NAME
     12070**DCL     12616<<ASSIGN
NODE_NAME.COUNT
     12071**DCL     12612<<ASSIGN  12617>>ASSIGN  12627>>ASSIGN
NODE_NAME.TEXT
     12072**DCL     12613<<ASSIGN  12628>>ASSIGN
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:173  
P$
     11919**DCL     12103<<ASSIGN  12104>>IF      12111>>DOWHILE 12112>>IF      12112>>IF      12114>>ASSIGN
     12116>>ASSIGN  12127>>ASSIGN  12131<<ASSIGN  12131>>ASSIGN  12216<<ASSIGN  12240>>ASSIGN  12242>>ASSIGN
     12242>>ASSIGN  12323<<ASSIGN  12345>>ASSIGN  12347>>ASSIGN  12347>>ASSIGN  12370<<ASSIGN  12374<<ASSIGN
     12377<<ASSIGN  12380<<ASSIGN  12383>>DOWHILE 12383>>DOWHILE 12386>>ASSIGN  12389>>IF      12391>>ASSIGN
     12393<<ASSIGN  12393>>ASSIGN  12451<<ASSIGN  12453>>DOWHILE 12454>>ASSIGN  12456>>ASSIGN  12457>>ASSIGN
     12458>>DOWHILE 12470<<ASSIGN  12537<<ASSIGN  12538>>ASSIGN  12539>>ASSIGN  12557>>ASSIGN  12589<<ASSIGN
     12590>>IF      12592>>ASSIGN  12593>>DOWHILE 12594>>IF      12594>>ASSIGN  12595<<ASSIGN  12595>>ASSIGN
     12605<<ASSIGN  12606>>ASSIGN  12607>>ASSIGN  12648<<ASSIGN  12649>>ASSIGN  12650>>ASSIGN  12650>>ASSIGN
     12923<<ASSIGN  12924>>ASSIGN  12925>>ASSIGN  12925>>ASSIGN
Q$
     11920**DCL     12110<<ASSIGN  12111>>DOWHILE 12371<<ASSIGN  12375<<ASSIGN  12378<<ASSIGN  12381<<ASSIGN
     12383>>DOWHILE 12383>>DOWHILE 12452<<ASSIGN  12453>>DOWHILE 12466>>IF      12591<<ASSIGN  12593>>DOWHILE
R$
     11921**DCL     12116<<ASSIGN  12118>>ASSIGN  12120>>ASSIGN  12120>>ASSIGN  12396<<ASSIGN  12397>>ASSIGN
     12398>>DOWHILE 12399>>ASSIGN  12399>>ASSIGN  12400<<ASSIGN  12400>>ASSIGN  12457<<ASSIGN  12458>>DOWHILE
     12461>>IF      12462>>ASSIGN  12463>>ASSIGN  12465<<ASSIGN  12465>>ASSIGN  12466>>IF      12470>>ASSIGN
SBIN_NAME_DISP
     12000**DCL     12114<<ASSIGN  12115>>IF      12117<<ASSIGN  12128>>ASSIGN
SET_NIL
     12604**LABEL   12600--GOTO
SIZE
     11972**DCL     12416<<ASSIGN  12417>>IF      12420>>IF      12420>>ASSIGN  12422>>IF      12422>>ASSIGN
     12424>>IF      12424>>ASSIGN  12426>>IF      12426>>ASSIGN  12432<>CALL    12441<<ASSIGN  12442>>IF
     12450>>IF      12477<>CALL
SJ
     11957**DCL     12946<<ASSIGN  12947>>IF      12948<>CALL
SPC_FURTHER
     12335**LABEL   12330--GOTO
SPC_FURTHER_DCB
     12229**LABEL   12224--GOTO
SPLIT_SPC
     12293**LABEL   12309--GOTO
STOP
     11967**DCL     12813<<ASSIGN  12814>>DOINDEX
S_NAME$
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:174  
     11931**DCL     12541<<ASSIGN  12542>>ASSIGN  12552>>ASSIGN  12553>>ASSIGN  12553>>ASSIGN  12611<<ASSIGN
     12612>>ASSIGN  12613>>ASSIGN  12613>>ASSIGN
T$
     11928**DCL     12108<<ASSIGN  12127>>ASSIGN  12128>>ASSIGN  12129<<ASSIGN  12129>>ASSIGN  12137>>ASSIGN
     12219<<ASSIGN  12220>>DOWHILE 12221>>IF      12221>>IF      12225>>ASSIGN  12226<<ASSIGN  12226>>ASSIGN
     12229<<ASSIGN  12230>>DOWHILE 12231>>IF      12231>>IF      12235>>ASSIGN  12236<<ASSIGN  12236>>ASSIGN
     12325<<ASSIGN  12326>>DOWHILE 12327>>IF      12327>>IF      12331>>ASSIGN  12332<<ASSIGN  12332>>ASSIGN
     12335<<ASSIGN  12336>>DOWHILE 12337>>IF      12337>>IF      12341>>ASSIGN  12342<<ASSIGN  12342>>ASSIGN
     12455<<ASSIGN  12456<<ASSIGN  12463>>IF      12463<<ASSIGN  12469>>IF      12469>>ASSIGN  12571<<ASSIGN
     12572>>IF      12573>>ASSIGN  12574<<ASSIGN  12575>>IF      12576>>ASSIGN  12577<<ASSIGN  12578>>IF
     12579>>ASSIGN
T$C
     11667**DCL     12616>>ASSIGN
T$C.CHARS
     11669**DCL     12553<<ASSIGN  12553>>ASSIGN  12613>>ASSIGN  12628<<ASSIGN  12650>>ASSIGN  12925>>ASSIGN
T$C.COUNT
     11668**DCL     11669--IMP-SIZ 12542>>ASSIGN  12552<<ASSIGN  12552>>ASSIGN  12553>>ASSIGN  12553>>ASSIGN
     12612>>ASSIGN  12613>>ASSIGN  12616>>ASSIGN  12627<<ASSIGN  12628>>ASSIGN  12649>>ASSIGN  12650>>ASSIGN
     12924>>ASSIGN  12925>>ASSIGN
T$C_UNAL.COUNT
     11671**DCL     11672--IMP-SIZ
TREE_ADR
     11977**DCL     12522<<ASSIGN  12523>>ASSIGN  12528<>CALL    12559>>ASSIGN
VX$DCB$T$C.COUNT
     11853**DCL     11854--IMP-SIZ
VX$HALF_A
     11607**DCL     12539<<ASSIGN  12607<<ASSIGN
VX$IMAGE.CPAGE#_A
     12031**DCL     12032--REDEF   12876--DOINDEX 12877>>IF
VX$IMAGE.NODE_A$
     12043**DCL     12044--REDEF   12878<>CALL
VX$IMAGE.START_A$
     12035**DCL     12036--REDEF
VX$IMAGE.STOP_A$
     12039**DCL     12040--REDEF
VX$LST.OBJECT_NAME$
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:175  
     11542**DCL     11543--REDEF   12611>>ASSIGN
VX$LST.P.NAME_.NAME$
     11555**DCL     12541>>ASSIGN  12616>>ASSIGN  12616>>ASSIGN  12648>>ASSIGN  12923>>ASSIGN
VX$LST.SC_HEAD$
     11544**DCL     11545--REDEF
VX$LST.SC_TAIL$
     11546**DCL     11547--REDEF
VX$LST.SUB_TYPE
     11541**DCL     12608>>IF
VX$LST.TYPE
     11540**DCL     12608>>IF
VX$NODE.ADDR_START.RDATA
     10952**DCL     12581>>ASSIGN  12585>>ASSIGN  12896>>IF
VX$NODE.ADDR_START.RPROC
     10953**DCL     12580>>ASSIGN  12582>>ASSIGN  12896>>IF
VX$NODE.ADDR_START_A
     10950**DCL     10951--REDEF
VX$NODE.ADDR_STOP.RDATA
     10957**DCL     12585>>ASSIGN  12896>>IF
VX$NODE.ADDR_STOP.RPROC
     10958**DCL     12582>>ASSIGN  12896>>IF
VX$NODE.ADDR_STOP_A
     10955**DCL     10956--REDEF
VX$NODE.BROTHER$
     10939**DCL     12402>>IF      12405>>ASSIGN  12483>>IF      12484>>ASSIGN  12577>>ASSIGN  12636>>IF
     12637>>ASSIGN
VX$NODE.FATHER$
     10940**DCL     12398>>DOWHILE 12399>>ASSIGN  12400>>ASSIGN  12410>>ASSIGN  12488>>ASSIGN  12571>>ASSIGN
     12641>>ASSIGN
VX$NODE.HEAD$
     10942**DCL     12608>>IF      12608>>IF      12611>>ASSIGN  12616>>ASSIGN  12616>>ASSIGN
VX$NODE.L_PREV_SIZE
     11008**DCL     11019--REDEF
VX$NODE.L_SC_START
     11027**DCL     11032--REDEF
VX$NODE.L_SC_START.SC_ROOT_LBL_COM$
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:176  
     11029**DCL     12103>>ASSIGN
VX$NODE.L_SC_STOP
     11033**DCL     11038--REDEF
VX$NODE.L_SC_STOP.SC_ROOT_LBL_COM$
     11035**DCL     12110>>ASSIGN
VX$NODE.L_SIZE
     10996**DCL     11007--REDEF
VX$NODE.L_SIZE.DN
     10998**DCL     12106>>ASSIGN  12134<<ASSIGN  12143>>ASSIGN  12357<<ASSIGN
VX$NODE.L_SIZE.SC
     11000**DCL     12108>>ASSIGN  12138<<ASSIGN  12441>>ASSIGN
VX$NODE.L_SIZE_A
     11007**DCL     12416>>ASSIGN
VX$NODE.L_START
     10972**DCL     10983--REDEF
VX$NODE.L_START.DD$
     10979**DCL     12145>>ASSIGN  12377>>ASSIGN
VX$NODE.L_START.DN$
     10974**DCL     12105>>ASSIGN  12133>>ASSIGN  12135>>ASSIGN  12143>>ASSIGN  12147>>ASSIGN  12356>>ASSIGN
     12358>>ASSIGN
VX$NODE.L_START.ED$
     10977**DCL     12374>>ASSIGN  12589>>ASSIGN
VX$NODE.L_START.SC$
     10976**DCL     12108>>ASSIGN  12137>>ASSIGN  12139>>ASSIGN  12443<>CALL    12451>>ASSIGN  12477<>CALL
VX$NODE.L_START.SD$
     10981**DCL     12380>>ASSIGN
VX$NODE.L_START_A$
     10983**DCL     12432<>CALL
VX$NODE.L_STOP
     10984**DCL     10995--REDEF
VX$NODE.L_STOP.DD$
     10991**DCL     12146>>ASSIGN  12378>>ASSIGN
VX$NODE.L_STOP.DN$
     10986**DCL     12135<<ASSIGN  12358<<ASSIGN
VX$NODE.L_STOP.ED$
     10989**DCL     12375>>ASSIGN  12591>>ASSIGN
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:177  
VX$NODE.L_STOP.SC$
     10988**DCL     12139<<ASSIGN  12443<>CALL    12452>>ASSIGN
VX$NODE.L_STOP.SD$
     10993**DCL     12381>>ASSIGN
VX$NODE.NUM
     10948**DCL     12428<>CALL    12473<>CALL    12565>>CALL    12573>>ASSIGN  12576>>ASSIGN  12579>>ASSIGN
VX$NODE.PATH$
     10941**DCL     12397<<ASSIGN  12399<<ASSIGN
VX$NODE.PROMOTE_HEAD
     11039**DCL     11042--REDEF
VX$NODE.PROMOTE_TAIL
     11043**DCL     11046--REDEF
VX$NODE.SON$
     10938**DCL     12095>>IF      12096>>ASSIGN  12100>>IF      12366>>DOWHILE 12367>>ASSIGN  12574>>ASSIGN
     12630>>IF      12631>>ASSIGN
VX$NODE.START_PAGE#_A
     10960**DCL     10961--REDEF
VX$NODE.STOP_PAGE#_A
     10965**DCL     10966--REDEF
VX$SC
     11393**DCL     12127<<ASSIGN  12127>>ASSIGN  12129--ASSIGN  12131--ASSIGN  12248--ASSIGN  12443--CALL
     12450--IF      12457--ASSIGN  12465--ASSIGN
VX$SC.ADDRESS
     11428**DCL     12458>>DOWHILE 12458>>DOWHILE
VX$SC.NAME_DISP
     11431**DCL     12114>>ASSIGN  12116>>ASSIGN  12128<<ASSIGN  12151>>ASSIGN
VX$SC.SIZE
     11433**DCL     12454>>ASSIGN  12461>>IF      12462>>ASSIGN  12469<<ASSIGN
VX$SC.TYPE
     11396**DCL     12112>>IF      12112>>IF
VX$SECT.MBZ
     11504**DCL     11506--REDEF   11510--REDEF
VX$SOURCE_C
     12063**DCL     12512>>ASSIGN
VX$TARGET_C
     12062**DCL     12512<<ASSIGN
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:178  
VX$TMPLT.A
     11639**DCL     11640--REDEF   11641--REDEF   12170>>ASSIGN  12190>>ASSIGN  12277>>ASSIGN  12297>>ASSIGN
VX$TREE_HEADER
     11770**DCL     12523--ASSIGN  12528--CALL    12559--ASSIGN
VX$TREE_HEADER.LIB$
     11777**DCL     12537--ASSIGN
VX$TREE_HEADER.MAX_LIB_DATA
     11783**DCL     12536<<ASSIGN
VX$TREE_HEADER.NODES
     11772**DCL     12533<<ASSIGN
VX$TREE_HEADER.PRECSIZE
     11780**DCL     12535<<ASSIGN
VX$TREE_HEADER.SIZE
     11774**DCL     12534<<ASSIGN
VX$TREE_NODE
     11786**DCL     12523--ASSIGN  12565--CALL    12565--CALL    12570<<ASSIGN
VX$TREE_NODE.BACK#
     11810**DCL     12572<<ASSIGN  12573<<ASSIGN
VX$TREE_NODE.DADDR
     11820**DCL     12581<<ASSIGN
VX$TREE_NODE.DSIZE
     11822**DCL     12585<<ASSIGN
VX$TREE_NODE.ENTRY$
     11824**DCL     12598<<ASSIGN  12604<<ASSIGN
VX$TREE_NODE.FORWARD#
     11812**DCL     12575<<ASSIGN  12576<<ASSIGN
VX$TREE_NODE.NAME$
     11788**DCL     12605--ASSIGN
VX$TREE_NODE.OVERLAY#
     11814**DCL     12578<<ASSIGN  12579<<ASSIGN
VX$TREE_NODE.PADDR
     11816**DCL     12580<<ASSIGN
VX$TREE_NODE.PSIZE
     11818**DCL     12582<<ASSIGN
VX$WORD_A
     11606**DCL     12538<<ASSIGN  12557<<ASSIGN  12606<<ASSIGN
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:179  
VXD$B2C
     11880**DCL-ENT 12698--CALL    12726--CALL    12823--CALL    12854--CALL
VXD$TMPLT
     11081**DCL     12167--IF      12179--ASSIGN  12185--ASSIGN  12186--ASSIGN  12189--ASSIGN  12226--ASSIGN
     12229--ASSIGN  12236--ASSIGN  12274--IF      12286--ASSIGN  12292--ASSIGN  12293--ASSIGN  12296--ASSIGN
     12332--ASSIGN  12335--ASSIGN  12342--ASSIGN  12393--ASSIGN
VXD$TMPLT.AD.ISADDR
     11104**DCL     11106--REDEF
VXD$TMPLT.AD.SECTNUM
     11101**DCL     12386<<ASSIGN  12391<<ASSIGN
VXD$TMPLT.CONSTNT
     11111**DCL     12389>>IF
VXD$TMPLT.LFLAGS
     11117**DCL     11130--REDEF
VXD$TMPLT.NPOINTER
     11108**DCL     12216>>ASSIGN  12221>>IF      12221>>IF      12225<<ASSIGN  12231>>IF      12231>>IF
     12235<<ASSIGN  12323>>ASSIGN  12327>>IF      12327>>IF      12331<<ASSIGN  12337>>IF      12337>>IF
     12341<<ASSIGN
VXD$TMPLT.VALUE
     11082**DCL     11084--REDEF
VXE$ERROR
     11873**DCL-ENT 12681--CALL    12713--CALL    12741--CALL    12752--CALL    12785--CALL    12838--CALL
     12866--CALL    12910--CALL    12969--CALL    12980--CALL
VXF$FREE
     11883**DCL-ENT 12948--CALL
VXI$WRITE
     11893**DCL-ENT 12432--CALL    12477--CALL    12933--CALL    12940--CALL
VXK$KEY
     11891**DCL-ENT 12428--CALL    12473--CALL
VXO$DEL_PATCH_FILE
     11901**DCL-ENT 12954--CALL
VXQ$SORT_V
     11895**DCL-ENT 12443--CALL
VXU$PAGEOUT
     11900**DCL-ENT 12878--CALL
VXU$SETUP
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:180  
     11899**DCL-ENT 12509--CALL    12528--CALL    12547--CALL    12565--CALL    12622--CALL
VX_BIAS.A
      9577**DCL      9578--REDEF
VX_BREF_ADR
     10176**DCL     12503>>ASSIGN
VX_BREF_DEFINITION
     10178**DCL     12726<>CALL
VX_BREF_INSTANCE
     10177**DCL     12686>>IF      12698<>CALL
VX_BREF_START$
     10173**DCL     12493>>IF      12504>>ASSIGN  12505>>ASSIGN
VX_CBUF.CHARS_A
      9511**DCL      9512--REDEF
VX_CONST_DCB.ACTPOS
     10693**DCL     10693--REDEF
VX_CONST_DCB.ARS#
     10652**DCL     10652--REDEF
VX_CONST_DCB.ATTR#
     10682**DCL     10682--REDEF   10684--REDEF
VX_CONST_DCB.BORROW
     10704**DCL     10704--REDEF   10704--REDEF   10704--REDEF
VX_CONST_DCB.EOMCHAR#
     10659**DCL     10660--REDEF
VX_CONST_DCB.FLDID
     10696**DCL     10697--REDEF
VX_CONST_DCB.FORM$
     10688**DCL     10688--REDEF
VX_CONST_DCB.FSECT
     10711**DCL     10711--REDEF
VX_CONST_DCB.FSN#
     10678**DCL     10678--REDEF   10678--REDEF   10679--REDEF
VX_CONST_DCB.HEADER$
     10687**DCL     10688--REDEF
VX_CONST_DCB.IXTNSIZE#
     10684**DCL     10685--REDEF
VX_CONST_DCB.LASTSTA$
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:181  
     10668**DCL     10668--REDEF
VX_CONST_DCB.LVL
     10705**DCL     10705--REDEF
VX_CONST_DCB.NAME#.C
     10668**DCL     10669--REDEF
VX_CONST_DCB.NOEOF
     10700**DCL     10700--REDEF
VX_CONST_DCB.NRECS#
     10685**DCL     10685--REDEF
VX_CONST_DCB.NRECX
     10712**DCL     10712--REDEF
VX_CONST_DCB.OHDR
     10701**DCL     10701--REDEF
VX_CONST_DCB.ORG#
     10676**DCL     10677--REDEF
VX_CONST_DCB.PRECNO
     10709**DCL     10709--REDEF
VX_CONST_DCB.RCSZ
     10717**DCL     10717--REDEF
VX_CONST_DCB.RES#
     10670**DCL     10670--REDEF
VX_CONST_DCB.SETX
     10689**DCL     10689--REDEF
VX_CONST_DCB.TAB$
     10688**DCL     10688--REDEF
VX_CONST_DCB.TDA
     10708**DCL     10709--REDEF
VX_CONST_DCB.WSN#
     10670**DCL     10671--REDEF
VX_CURR$
      9546**DCL     12093<<ASSIGN  12095>>IF      12096<<ASSIGN  12096>>ASSIGN  12099>>IF      12416>>ASSIGN
     12428>>CALL    12432>>CALL    12441>>ASSIGN  12443>>CALL    12443>>CALL    12451>>ASSIGN  12452>>ASSIGN
     12473>>CALL    12477>>CALL    12483>>IF      12484<<ASSIGN  12484>>ASSIGN  12488<<ASSIGN  12488>>ASSIGN
     12489>>IF      12560<<ASSIGN  12565>>CALL    12571>>ASSIGN  12574>>ASSIGN  12577>>ASSIGN  12580>>ASSIGN
     12581>>ASSIGN  12582>>ASSIGN  12582>>ASSIGN  12585>>ASSIGN  12585>>ASSIGN  12589>>ASSIGN  12591>>ASSIGN
     12608>>IF      12608>>IF      12611>>ASSIGN  12616>>ASSIGN  12616>>ASSIGN  12630>>IF      12631<<ASSIGN
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:182  
     12631>>ASSIGN  12636>>IF      12637<<ASSIGN  12637>>ASSIGN  12641<<ASSIGN  12641>>ASSIGN  12642>>IF
VX_DCB_OPTION_TEXT
     10487**DCL     12666>>ASSIGN
VX_DCB_SIZEC
     10726**DCL     11846--IMP-SIZ
VX_DCB_START$
     10197**DCL     12148>>IF      12149>>ASSIGN
VX_DCB_STOP$
     10198**DCL     12150>>DOWHILE
VX_DEF_REC_A
     10218**DCL     12414--DOINDEX 12415>>ASSIGN
VX_EBUF.CHARS_A
     10100**DCL     10101--REDEF
VX_EFIELD1.CHARS
     10109**DCL     10110--REDEF   12669<<ASSIGN  12964<<ASSIGN
VX_EFIELD1.CHARS_A
     10110**DCL     12698<>CALL    12726<>CALL    12823<>CALL    12854<>CALL
VX_EFIELD1.COUNT
     10108**DCL     12668<<ASSIGN  12963<<ASSIGN
VX_EFIELD2.CHARS
     10113**DCL     10114--REDEF   12666<<ASSIGN
VX_EFIELD2.COUNT
     10112**DCL     12665<<ASSIGN
VX_EFIELD3.CHARS
     10117**DCL     10118--REDEF
VX_EI_KEY_BUF.KEY
     10493**DCL     10494--REDEF
VX_ERRORS
      9554**DCL      9565--REDEF
VX_ERRORS.CONFLICT.ALTRIT
      9562**DCL     12762>>IF
VX_ERRORS.CONFLICT.CST
      9564**DCL     12762>>IF
VX_ERRORS.CONFLICT.PARM
      9563**DCL     12762>>IF
VX_ERRORS.CONFLICT_A
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:183  
      9560**DCL      9561--REDEF
VX_ERRORS.MULTIPLE
      9555**DCL     12762>>IF
VX_ERRORS.UNSAT.UNSAT_PRIMARY
      9558**DCL     12762>>IF
VX_ERRORS.UNSAT.UNSAT_SECONDARY
      9559**DCL     12762>>IF
VX_ERRORS.UNSAT_A
      9556**DCL      9557--REDEF
VX_ERRORS_A
      9565**DCL     12813--ASSIGN  12815>>ASSIGN
VX_ERR_SEV
      9567**DCL     12683<<ASSIGN  12683>>ASSIGN  12762>>IF      12843>>IF      12854<>CALL    12894>>ASSIGN
VX_IMAGE$
     10122**DCL     12030--IMP-PTR 12875<<ASSIGN  12877>>IF      12878>>CALL
VX_IMAGE_DATA.CPAGE#_A
      8691**DCL      8692--REDEF
VX_IMAGE_DATA.NODE_A$
      8703**DCL      8704--REDEF
VX_IMAGE_DATA.START_A$
      8695**DCL      8696--REDEF
VX_IMAGE_DATA.STOP_A$
      8699**DCL      8700--REDEF
VX_IMAGE_DS3.CPAGE#_A
      8760**DCL      8761--REDEF
VX_IMAGE_DS3.NODE_A$
      8772**DCL      8773--REDEF
VX_IMAGE_DS3.START_A$
      8764**DCL      8765--REDEF
VX_IMAGE_DS3.STOP_A$
      8768**DCL      8769--REDEF
VX_IMAGE_DS4.CPAGE#_A
      8783**DCL      8784--REDEF
VX_IMAGE_DS4.NODE_A$
      8795**DCL      8796--REDEF
VX_IMAGE_DS4.START_A$
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:184  
      8787**DCL      8788--REDEF
VX_IMAGE_DS4.STOP_A$
      8791**DCL      8792--REDEF
VX_IMAGE_DS5.CPAGE#_A
      8806**DCL      8807--REDEF
VX_IMAGE_DS5.NODE_A$
      8818**DCL      8819--REDEF
VX_IMAGE_DS5.START_A$
      8810**DCL      8811--REDEF
VX_IMAGE_DS5.STOP_A$
      8814**DCL      8815--REDEF
VX_IMAGE_DS6.CPAGE#_A
      8829**DCL      8830--REDEF
VX_IMAGE_DS6.NODE_A$
      8841**DCL      8842--REDEF
VX_IMAGE_DS6.START_A$
      8833**DCL      8834--REDEF
VX_IMAGE_DS6.STOP_A$
      8837**DCL      8838--REDEF
VX_IMAGE_DS7.CPAGE#_A
      8852**DCL      8853--REDEF
VX_IMAGE_DS7.NODE_A$
      8864**DCL      8865--REDEF
VX_IMAGE_DS7.START_A$
      8856**DCL      8857--REDEF
VX_IMAGE_DS7.STOP_A$
      8860**DCL      8861--REDEF
VX_IMAGE_DS8.CPAGE#_A
      8875**DCL      8876--REDEF
VX_IMAGE_DS8.NODE_A$
      8887**DCL      8888--REDEF
VX_IMAGE_DS8.START_A$
      8879**DCL      8880--REDEF
VX_IMAGE_DS8.STOP_A$
      8883**DCL      8884--REDEF
VX_IMAGE_PROC.CPAGE#_A
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:185  
      8714**DCL      8715--REDEF
VX_IMAGE_PROC.NODE_A$
      8726**DCL      8727--REDEF
VX_IMAGE_PROC.START_A$
      8718**DCL      8719--REDEF
VX_IMAGE_PROC.STOP_A$
      8722**DCL      8723--REDEF
VX_IMAGE_PTR$
      8897**DCL     12874--DOINDEX 12875>>ASSIGN
VX_IMAGE_ROS.CPAGE#_A
      8737**DCL      8738--REDEF
VX_IMAGE_ROS.NODE_A$
      8749**DCL      8750--REDEF
VX_IMAGE_ROS.START_A$
      8741**DCL      8742--REDEF
VX_IMAGE_ROS.STOP_A$
      8745**DCL      8746--REDEF
VX_LINK_UTS
      9536**DCL     12928>>ASSIGN
VX_M_FREE
      9586**DCL     12946>>ASSIGN
VX_M_VECTOR.F
      8542**DCL      8546--REDEF
VX_M_VECTOR_DP.F
      8577**DCL      8581--REDEF
VX_NEXT_BREF$
     10174**DCL     12493>>IF      12504>>ASSIGN
VX_NODE_NUMBER
      9537**DCL     12523>>ASSIGN  12533>>ASSIGN  12588>>IF      12885>>ASSIGN
VX_O.ACCTN_A$
      9706**DCL      9707--REDEF
VX_O.DCB_MATCH_A$
      9715**DCL      9716--REDEF   12656--DOINDEX 12667>>IF      12668>>ASSIGN  12669>>ASSIGN  12669>>ASSIGN
VX_O.DCB_MATCH_HIT_A
      9721**DCL      9722--REDEF   12657>>IF
VX_O.FID.ALTSHARELIB$
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:186  
      9694**DCL     12922>>IF      12923>>ASSIGN
VX_O.FIDN_A$
      9700**DCL      9701--REDEF
VX_O.FID_A$
      9692**DCL      9693--REDEF
VX_O.INCLUDE_A$
      9712**DCL      9713--REDEF
VX_O.LOCK
      9749**DCL     12893>>ASSIGN
VX_O.MAP_A
      9686**DCL      9687--REDEF
VX_O.NODCB_A
      9743**DCL      9744--REDEF
VX_O.NUM.DPATCH
      9642**DCL     12951>>IF
VX_O.NUM.IPATCH
      9643**DCL     12951>>IF
VX_O.NUM.START
      9639**DCL     12895>>IF      12896>>IF      12896>>IF      12896>>IF      12896>>IF      12903>>ASSIGN
VX_O.NUM.TCB
      9640**DCL     12920>>ASSIGN
VX_O.NUM_A
      9631**DCL      9633--REDEF   12746>>IF
VX_O.OPT.START
      9734**DCL     12746>>IF      12917>>IF      12917>>ASSIGN
VX_O.OPT_A
      9731**DCL      9732--REDEF
VX_O.PRIV_A
      9647**DCL      9649--REDEF
VX_O.SIN_A
      9600**DCL      9601--REDEF   12746>>IF
VX_O.TCB_A
      9727**DCL      9728--REDEF
VX_OD.ACCTN_A$
      9904**DCL      9905--REDEF
VX_OD.DCB_MATCH_A$
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:187  
      9913**DCL      9914--REDEF   12657>>IF
VX_OD.FIDN_A$
      9898**DCL      9899--REDEF
VX_OD.FID_A$
      9890**DCL      9891--REDEF
VX_OD.INCLUDE_A$
      9910**DCL      9911--REDEF
VX_OD.MAP_A
      9884**DCL      9885--REDEF
VX_OD.NODCB_A
      9928**DCL      9929--REDEF
VX_OD.NUM_A
      9831**DCL      9832--REDEF
VX_OD.PRIV_A
      9846**DCL      9847--REDEF
VX_OD.SIN.ASLIB
      9814**DCL     12884>>ASSIGN
VX_OD.SIN.NOCHGPMEM
      9821**DCL     12887>>ASSIGN
VX_OD.SIN.NSHARED
      9803**DCL     12882>>ASSIGN
VX_OD.SIN.NSTDINVOC
      9824**DCL     12891>>ASSIGN
VX_OD.SIN.PROCACC
      9820**DCL     12886>>ASSIGN
VX_OD.SIN.SLIB
      9815**DCL     12883>>ASSIGN
VX_OD.SIN.STATS
      9825**DCL     12892>>ASSIGN
VX_OD.SIN.SURCHARGE
      9823**DCL     12888>>ASSIGN
VX_OD.SIN_A
      9800**DCL      9801--REDEF
VX_OD.SLOCK
      9934**DCL     12889>>ASSIGN  12890>>ASSIGN
VX_OD.VECTOR_A$
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:188  
      9919**DCL      9920--REDEF
VX_OD.WLOCK
      9935**DCL     12889>>ASSIGN
VX_OL.MAX_A
      9775**DCL      9777--REDEF
VX_OL.MIN_A
      9760**DCL      9761--REDEF
VX_ON.ACCTN_A$
     10049**DCL     10051--REDEF
VX_ON.DCB_MATCH_A$
     10060**DCL     10062--REDEF
VX_ON.FIDN_A$
     10042**DCL     10044--REDEF
VX_ON.FID_A$
     10033**DCL     10035--REDEF
VX_ON.INCLUDE_A$
     10056**DCL     10058--REDEF
VX_ON.MAP_A
     10026**DCL     10028--REDEF
VX_ON.NODCB_A$
     10076**DCL     10077--REDEF
VX_ON.NUM_A
      9971**DCL      9973--REDEF
VX_ON.PRIV_A
      9987**DCL      9989--REDEF
VX_ON.SIN_A
      9939**DCL      9941--REDEF
VX_ON.VECTOR_A$
     10067**DCL     10068--REDEF
VX_OUHEAD.VERSION
      9386**DCL      9388--REDEF
VX_OU_HEAD
      9329**DCL      9368--REDEF
VX_OU_HEAD.REC_A
      9341**DCL      9344--REDEF
VX_O_KEY_BUF.FORM0
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:189  
      8590**DCL      8593--REDEF    8600--REDEF
VX_O_KEY_BUF_L.FORM0
      8613**DCL      8616--REDEF    8623--REDEF
VX_PASS2_REF.OU.L_START
     10279**DCL     10284--REDEF
VX_PASS2_REF.OU.L_STOP
     10285**DCL     10290--REDEF
VX_PASS2_REF.OU.MAX
     10273**DCL     10278--REDEF
VX_PASS2_REF.OU.SIZE
     10291**DCL     10296--REDEF
VX_PASS2_REF.SAT.COUNT
     10318**DCL     10324--REDEF
VX_PASS2_REF.SAT.ENT_SIZE
     10325**DCL     10331--REDEF
VX_PASS2_REF.SAT.L_START
     10304**DCL     10310--REDEF
VX_PASS2_REF.SAT.L_STOP
     10311**DCL     10317--REDEF
VX_PASS2_REF.SAT.MAX
     10298**DCL     10303--REDEF
VX_PASS2_REF.UNSAT.L_START
     10366**DCL     10371--REDEF
VX_PASS2_REF.UNSAT.L_STOP
     10372**DCL     10377--REDEF
VX_PASS2_REF.UNSAT.L_WHERE
     10378**DCL     10383--REDEF
VX_PASS2_REF.UNSAT.MAX
     10360**DCL     10365--REDEF
VX_PASS2_REF.UNSAT.PAGE#
     10390**DCL     10395--REDEF
VX_PASS2_REF.UNSAT.SIZE
     10384**DCL     10389--REDEF
VX_PHRASE.PHRASE
      9792**DCL      9794--REDEF
VX_PROGRAM_BIAS.A
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:190  
      9570**DCL      9571--REDEF
VX_PROGRAM_BIAS.I.DATA
      9572**DCL     12918>>ASSIGN
VX_REC_SIZE_A
     10217**DCL     12135>>ASSIGN  12139>>ASSIGN  12358>>ASSIGN
VX_ROOT$
      9543**DCL     12093>>ASSIGN  12099>>IF      12100>>IF      12103>>ASSIGN  12105>>ASSIGN  12106>>ASSIGN
     12108>>ASSIGN  12108>>ASSIGN  12110>>ASSIGN  12133>>ASSIGN  12134>>ASSIGN  12135>>ASSIGN  12135>>ASSIGN
     12137>>ASSIGN  12138>>ASSIGN  12139>>ASSIGN  12139>>ASSIGN  12143>>ASSIGN  12143>>ASSIGN  12145>>ASSIGN
     12146>>ASSIGN  12147>>ASSIGN  12356>>ASSIGN  12357>>ASSIGN  12358>>ASSIGN  12358>>ASSIGN  12364>>ASSIGN
     12560>>ASSIGN  12896>>IF      12896>>IF      12896>>IF      12896>>IF
VX_ROS_ALLOWED
     10502**DCL     12521>>IF
VX_RU_HEAD
      8921**DCL     12940--CALL    12940--CALL
VX_RU_HEAD.ASL
      9053**DCL     12884<<ASSIGN
VX_RU_HEAD.ASLNAME.CNT
      9108**DCL     12924<<ASSIGN
VX_RU_HEAD.ASLNAME.TXT
      9111**DCL     12925<<ASSIGN
VX_RU_HEAD.EDRECSIZE
      8993**DCL     12424>>IF      12424<<ASSIGN
VX_RU_HEAD.EPRECSIZE
      8990**DCL     12422>>IF      12422<<ASSIGN
VX_RU_HEAD.LIB
      9051**DCL     12883<<ASSIGN
VX_RU_HEAD.LIBNAME.CNT
      9098**DCL     12649<<ASSIGN
VX_RU_HEAD.LIBNAME.TXT
      9101**DCL     12650<<ASSIGN
VX_RU_HEAD.LOCK
      9044**DCL     12893<<ASSIGN
VX_RU_HEAD.NOCHGPMEM
      9065**DCL     12887<<ASSIGN
VX_RU_HEAD.NRECSIZE
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:191  
      8987**DCL     12420>>IF      12420<<ASSIGN
VX_RU_HEAD.NSTDINVOC
      9018**DCL     12891<<ASSIGN
VX_RU_HEAD.OVRL
      9060**DCL     12885<<ASSIGN
VX_RU_HEAD.PRECSIZE
      8983**DCL     12921<<ASSIGN
VX_RU_HEAD.PROCACC
      9062**DCL     12886<<ASSIGN
VX_RU_HEAD.PROCSURCHG
      9068**DCL     12888<<ASSIGN
VX_RU_HEAD.RESTPROC
      9071**DCL     12889<<ASSIGN
VX_RU_HEAD.ROSIZE
      8999**DCL     12534>>ASSIGN
VX_RU_HEAD.S
      9049**DCL     12882<<ASSIGN
VX_RU_HEAD.SDRECSIZE
      8996**DCL     12426>>IF      12426<<ASSIGN
VX_RU_HEAD.SEV
      8961**DCL     12894<<ASSIGN
VX_RU_HEAD.START
      8966**DCL     12903<<ASSIGN  12917<<ASSIGN  12918<<ASSIGN
VX_RU_HEAD.STATS
      9027**DCL     12892<<ASSIGN
VX_RU_HEAD.STRONG_LOCK
      9074**DCL     12890<<ASSIGN
VX_RU_HEAD.TCBSIZE
      8979**DCL     12920<<ASSIGN
VX_RU_HEAD.TREEDISP
      8975**DCL     12534>>ASSIGN
VX_R_KEY_BIRTH
     10152**DCL     12931--ASSIGN  12932>>ASSIGN
VX_R_KEY_BUF.FORM0
      8639**DCL      8643--REDEF    8649--REDEF
VX_R_KEY_BUF.FORM0.CHARS
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:192  
      8641**DCL     12932<<ASSIGN  12939<<ASSIGN
VX_R_KEY_BUF.FORM0.COUNT
      8640**DCL     12931<<ASSIGN  12938<<ASSIGN
VX_R_KEY_HEAD
     10151**DCL     12938--ASSIGN  12939>>ASSIGN
VX_SC_ROOT_LBL_COM
      9487**DCL     12100>>IF
VX_SC_X_NODE$
     10193**DCL     11934--IMP-PTR
VX_SD.A
      8267**DCL      8268--REDEF
VX_SLIB_INIT$
     10165**DCL     12540>>IF      12541>>ASSIGN  12647>>IF      12648>>ASSIGN
VX_SLIB_MAX_DATA
     10167**DCL     12536>>ASSIGN
VX_SOURCE_COUNT
     10126**DCL     12061--IMP-SIZ 12063--IMP-SIZ 12511<<ASSIGN  12512>>ASSIGN
VX_SPC.B$.MINE
     10461**DCL     10467--REDEF
VX_SPC.B$.MINE_A
     10467**DCL     12252>>IF
VX_SPC.B$.NAME
     10440**DCL     10446--REDEF
VX_SPC.B$.NAME_A$
     10446**DCL     12251--DOINDEX 12256>>ASSIGN
VX_SPC.B$.SKIP
     10454**DCL     10460--REDEF
VX_SPC.B$.SKIP_A
     10460**DCL     12252>>IF
VX_SPC.B$.VALUE
     10447**DCL     10453--REDEF
VX_SPC.SEG.NAME
     10409**DCL     10415--REDEF
VX_SPC.SEG.VALUE
     10416**DCL     10422--REDEF
VX_SPC.SEG.VALUE.NUL
PL6.E3A0      #001=VXT$POST File=VXT$POST.:E05TSI                                WED 07/30/97 08:41 Page:193  
     10421**DCL     12557>>ASSIGN
VX_SPC.SEG.VALUE.ROS
     10420**DCL     12538>>ASSIGN  12606>>ASSIGN
VX_TARGET_COUNT
     10125**DCL     12060--IMP-SIZ 12062--IMP-SIZ 12510<<ASSIGN  12511>>ASSIGN  12512>>ASSIGN
VX_TREE_ADR
      9496**DCL     12522>>ASSIGN  12607>>ASSIGN
VX_TSX0_OVERLAY.H
     10184**DCL     10187--REDEF
WRITE
     12099**LABEL   12095--GOTO    12489--GOTO
