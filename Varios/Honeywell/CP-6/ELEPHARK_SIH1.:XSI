.*M*
ELEPHARK - Monitor memory data and take corrective action.
.*T*
 **************************************************************
 *                                                            *
 *  Copyright (c) Bull HN Information Systems Inc., 1989      *
 *                                                            *
 **************************************************************
.*A*                                                            
ELEPHARK monitors CP-6 host memory utilization and can help avoid !QRMM!
situations.
.*B*
ELEPHARK can do one or more of the following:
 
1) Log data (consisting of the free page count, the monitor's user tables,
and each active user's JIT) into a permanent file if the number of
available pages gets below a user-specified minimum.  The data collected
can be displayed using FLEA.X.
 
2) Display the mode, account, user name, sysid, size (in pages) and CCBUF of
the largest non-MING user in the system.
 
3) Same as 2 above except that the indicated user is X'ed off the system if
one or more other users are waiting for memory (QRMM).
 
ELEPHARK needs SPCLMM privilege for all modes and MSYS privilege for #3 above.
.*B*
ELEPHARK is invoked via the command
 
    !ELEPHARK.X                                   (for on-line use)
or
    START acct,name,password USING !ELEPHARK.X [fid]    (in GOOSE)
 
The account in which ELEPHARK runs MUST have special memory (SPCLMM) or
extended memory (EXMM) privilege(s).  If the AUTO option is to be used in
ELEPHARK, the user MUST also have MSYS privilege.  However, these privileges
need not be ON when ELEPHARK is invoked since he attempts to turn them on
regardless.
.*B*
ELEPHARK greets the on-line user via M$LO or the operator via the system
console.  The defaults in effect when ELEPHARK is first invoked are:
LOGON which enables the logging of data should it be necessary and
THRESHOLD=128.
.*B*
Whenever the number of free pages available drops below the current threshold
value and the LOGOFF command has not been issued, ELEPHARK begins recording
data to the MEMORYLOG file in the current file management account.  If
MEMORYLOG exists prior to calling ELEPHARK, it will be extended; if it does
not exist, it will be created.  A header record is written, containing the
count of free memory pages.  This record is followed by one record for each
active user; each of these records contains the monitor's user table (see
B$USER.:LIBRARY) followed by the user's JIT (see B$JIT_C.:LIBRARY).
 
After all the user records have been written, ELEPHARK computes a sleep
interval and waits until that interval expires.  The length of the sleep
interval depends on the number of available memory pages; when fewer pages
are available, logging is done at shorter intervals.  In no case will the
interval be shorter than 5 seconds or longer than 60 seconds.
 
When ELEPHARK begins to write data to the output file, it will print a message
on the user's terminal (or OC).  When the available free memory exceeds the
threshold, logging stops (but ELEPHARK continues to watch memory), and the
program prints a "suspended" message.
.*B*
In an attempt to keep ELEPHARK's memory usage to a minimum (both Data and
Procedure), some sacrifices were necessary.  ELEPHARK is overlayed with such
things as greeting the user, taking exit or break control, turning on
privileges and OPENing the LOG file contained in this overlay.  Once, these
"one time only" tasks are completed, the overlay is effectively thrown away
thus releasing the memory which the overlay once used.  Once this is done,
ELEPHARK should only occupy one page each of procedure and data.  Also in
the effort to keep ELEPHARK's memory requirements low, the system parser
was not used so for that reason ELEPHARK's commands are limited in number
and somewhat restrictive in function.
.*K* COMMANDS
ELEPHARK recognizes the following commands:
 
    A[UTOMATIC]                - Automatically !X largest user if out of memory
    C[ONTINUE] or G[O] or <CR> - Continue monitoring
    LOGON                      - Enable the logging of data
    LOFOF[F]                   - Disable the logging of data
    NOA[UTO]                   - Turns off the AUTOMATIC mode
    NOS[PY]                    - Turns off the SPY mode
    Q[UIT] or E[ND]            - Terminate monitoring
    S[PY]                      - Display the largest user every 10 seconds
    T[HRESHOLD]=value          - Set memory threshold
 
When running on-line, the user uses the BREAK key (or ESC-B) to get ELEPHARK's
attention.  When running as a ghost job, the operator uses the E sysid
keyin (NOT THE X KEYIN) to accomplish the same task.  ELEPHARK will report the
current threshold, the current available memory, and whether or not it is
logging data actively.  This message will not be printed until ELEPHARK
completes the current snapshot, if any.
 
Commands must be entered in UPPER CASE, exactly as shown.  To keep ELEPHARK's
memory requirements low, the system parser has not been used.  ELEPHARK prompts
for only a single command, then returns to scanning memory.  To enter multiple
commands, use the BREAK key or E keyin repeatedly.
.*K* CONTINUE GO
Syntax:
 
    C[ONTINUE]
    G[O]
    <CR>
 
The above commands are synonymous.  ELEPHARK activity continues from the point
of interruption.
.*K* THRESHOLD
Syntax:
 
    T[HRESHOLD]=value
 
This command sets the memory threshold.  When the available memory pages
becomes equal to or less than the specified value logging begins and continues
at intervals until the available memory exceeds the value.  Value is expressed
in memory pages (K words).  Value may not exceed 16384.  Example:
 
    T=256
 
Sets the memory threshold to 256K words.  The default threshold value is
128K words.
.*K* FILE_FORMAT
ELEPHARK writes two types of records to the output file.  All records are
keyed with the following:
 
    Bytes  Contents
    =====  ========
     1-4   The UTS (Universal Time Stamp) of the snap.  This value will remain
           constant throughout a snapshot.
      5    A record type character:
           'H' - indicates a head record
           'U' - indicates a user record
     6-7   The user number for type U records or binary zero for head records.
 
Record contents are as follows:
 
Head record:
 
    Bytes  Contents
    =====  ========
     1-4   The available free pages of memory at the time of the snap.
 
User record:
 
    Bytes  Contents
    =====  ========
     1-64  The B$U table entry for this user (see B$USER.:LIBRARY for the
           layout of the data).
  65-1048  The JIT entry for this user (see B$JIT_C.:LIBRARY for the layout
            of the data).
 
These records are fairly large, requiring in excess of one granule for each
four active users per snap.  ELEPHARK will try to allocate file space in
extents equal to the maximum allowed users on the system divided by four.
After each snapshot, an M$TRUNC is performed to ensure that the data are
written to disk.  Also, the MEMORYLOG file is opened with CTG=YES to ensure
that it is preserved through a system recovery or user terminal disconnect.
 
ELEPHARK does no preprocessing of the data it collects other than to eliminate
empty user slots. This is so that it places as small a load as possible on the
system.  All the data from the user table and JIT is dumped so that (a) the
standard structures can be used to access the data and (b) any information may
be pulled from the data file in a post hoc fashion.
.*X*
.*R*
.*K* OWNER
Tim Cashin, LADC
.*K* AUTO AUTOMATIC
Syntax:
 
    A[UTOMATIC]
 
This command causes ELEPHARK to look at all users in the system (except MING
ghosts) every 10 seconds and if ANY user is in the QRCO state then ABRT the
largest user found in the system.  If the user of ELEPHARK is not AUTHorized
the MSYS privilege, ELEPHARK will act as if the SPY command were issued
instead.  If a user is !X'd, a line of the format described under the SPY
command is output with '!X' in between the size and CCBUF fields.
.*B* RELATED
Related:
    NOAUTO
.*K* LOGON ENABLE_LOGGING
Syntax:
 
    LOGON
 
This command enables the data logging feature.
.*B* RELATED
Related:
    LOGOFF, THRESHOLD
.*K* LOGOFF DISABLE_LOGGING
Syntax:
 
    LOGOF[F]
 
This command disables the data logging feature.
.*B* RELATED
Related:
    LOGON, THRESHOLD
.*K* NOAUTO
Syntax:
 
    NOA[UTO]
 
Terminates the the effects of the AUTOMATIC command.
.*B* RELATED
Related:
    AUTOMATIC, SPY
.*K* NOSPY DONT_SPY
Syntax:
 
    NOS[PY]
 
Terminates the effects of the SPY command.
.*B* RELATED
Related:
    SPY, AUTOMATIC
.*K* SPY
Syntax:
 
    S[PY]
 
This command causes ELEPHARK to display selected items about the largest user
(excluding MING ghosts) in the system every 10 seconds.  The line displayed
has the following format:
  <mode> <account> <name> <sysid> <size> <ccbuf>
.*B* RELATED
Related:
    AUTOMATIC, NOAUTO, NOSPY
.*K* NOTES
Once ELEPHARK starts running, his memory usage should remain constant in that
he should not request additional pages UNLESS, the LOGging feature (see LOGON)
is enabled (which is the default).  If this feature is enabled, it is possible
for ELEPHARK himself to get stuck in the QRCO state while trying to acquire
file buffer(s) needed for the I/O to the LOG file.  To get around this
problem (hopefully), you can either disable the logging (see LOGOFF) and
enable the AUTOMATIC and/or SPYING modes OR, you can run two copies of
ELEPHARK.  One copy to LOG, the other to SPY and/or AUTOMATICly X the largest
user on the system at the time of the QRCO occurance.
.*K* XINDEX
ELEPHARK.:SYS
.*R*
AID=SYSTEM_MANAGEMENT
.*R*
MEMORY_MANAGEMENT
.*R*
.*K* XINDEX_ABSTRACT
TOOL=ELEPHARK
.*R*
Monitors memory utilization and  takes appropriate action depending on user
commands.
.*K* CHANGES Changes changes
.*R*
03/16/89  TJC
.*R*
Set minimum ghost value (MING) to 15 per star 34236.
.*B*
08/30/86  LPH
.*R*
Initialized ISYS as per star #29463.
.*R*
05/21/86
.*R*
Added the ability to get first command from a file in ghost_mode. JLJ
.*R*
05/27/83
.*R*
Installed at LADC.
