

CC.C03    File=zbc$expr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=1  
        1         1             /*
        2         2              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        3         3              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        4         4              */
        5         5             /* $Header: expr.c,v 3.18 87/03/25 22:55:46 ceriel Exp $ */
        6         6             /* EXPRESSION TREE HANDLING */
        7         7
        8         8             #include "nofloat:h"
        9         9             #include "botch_free:h"
       10        10             #include <alloc:h>
       11        11             #include "idf:h"
       12        12             #include "arith:h"
       13        13             #include "def:h"
       14        14             #include "type:h"
       15        15             #include "label:h"
       16        16             #include "expr:h"
       17        17             #include "LLlex:h"
       18        18             #include "Lpars:h"
       19        19             #include "decspecs:h"
       20        20             #include "declar:h"
       21        21             #include "sizes:h"
       22        22             #include "level:h"
       23        23             #include "noRoption:h"
       24        24
       25        25             extern char *symbol2str();
       26        26             extern char options[];
       27        27
       28        28             int
       29        29             rank_of(oper)
       30        30              int oper;
       31        31             {
       32        32    1         /* The rank of the operator oper is returned.
       33        33    1         */
       34        34    1         switch (oper)  {
       35        35    2         default:
       36        36    2            return 0;         /* INT2INT etc. */
CC.C03    File=zbc$expr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=2  
       37        37    2         case '[':
       38        38    2         case '(':
       39        39    2         case '.':
       40        40    2         case ARROW:
       41        41    2         case PARCOMMA:
       42        42    2            return 1;
       43        43    2         case '!':
       44        44    2         case PLUSPLUS:
       45        45    2         case MINMIN:
       46        46    2         case CAST:
       47        47    2         case SIZEOF:
       48        48    2         case ALIGNOF:
       49        49    2            return 2;         /* monadic */
       50        50    2         case '*':
       51        51    2         case '/':
       52        52    2         case '%':
       53        53    2            return 3;
       54        54    2         case '+':
       55        55    2         case '-':
       56        56    2            return 4;
       57        57    2         case LEFT:
       58        58    2         case RIGHT:
       59        59    2            return 5;
       60        60    2         case '<':
       61        61    2         case '>':
       62        62    2         case LESSEQ:
       63        63    2         case GREATEREQ:
       64        64    2            return 6;
       65        65    2         case EQUAL:
       66        66    2         case NOTEQUAL:
       67        67    2            return 7;
       68        68    2         case '&':
       69        69    2            return 8;
       70        70    2         case '^':
       71        71    2            return 9;
       72        72    2         case '|':
       73        73    2            return 10;
CC.C03    File=zbc$expr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=3  
       74        74    2         case AND:
       75        75    2            return 11;
       76        76    2         case OR:
       77        77    2            return 12;
       78        78    2         case '?':
       79        79    2         case ':':
       80        80    2            return 13;
       81        81    2         case '=':
       82        82    2         case PLUSAB:
       83        83    2         case MINAB:
       84        84    2         case TIMESAB:
       85        85    2         case DIVAB:
       86        86    2         case MODAB:
       87        87    2         case RIGHTAB:
       88        88    2         case LEFTAB:
       89        89    2         case ANDAB:
       90        90    2         case XORAB:
       91        91    2         case ORAB:
       92        92    2            return 14;
       93        93    2         case ',':
       94        94    2            return 15;
       95        95    2         }
       96        96    1         /*NOTREACHED*/
       97        97    1        }
       98        98
       99        99             #ifndef NOROPTION
      100       100             int
      101       101             rank_of_expression(ex)
      102       102              register struct expr *ex;
      103       103             {
      104       104    1         /* Returns the rank of the top node in the expression.
      105       105    1         */
      106       106    1         if (!ex || (ex->ex_flags & EX_PARENS) || ex->ex_class != Oper)
      107       107    1            return 0;
      108       108    1         return rank_of(ex->OP_OPER);
      109       109    1        }
      110       110
CC.C03    File=zbc$expr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=4  
      111       111             check_conditional(expr, oper, pos_descr)
      112       112              register struct expr *expr;
      113       113              char *pos_descr;
      114       114             {
      115       115    1         /* Warn if restricted C is in effect and the expression expr,
      116       116    1            which occurs at the position pos_descr, is not lighter than
      117       117    1            the operator oper.
      118       118    1         */
      119       119    1         if (options['R'] && rank_of_expression(expr) >= rank_of(oper))
      120       120    1            expr_warning(expr, "%s %s is ungrammatical",
      121       121    1               symbol2str(expr->OP_OPER), pos_descr);
      122       122    1        }
      123       123             #endif
      124       124
      125       125             dot2expr(expp)
      126       126              struct expr **expp;
      127       127             {
      128       128    1         /* The token in dot is converted into an expression, a
      129       129    1            pointer to which is stored in *expp.
      130       130    1         */
      131       131    1         register struct expr *ex = new_expr();
      132       132    1
      133       133    1         *expp = ex;
      134       134    1         ex->ex_file = dot.tk_file;
      135       135    1         ex->ex_line = dot.tk_line;
      136       136    1         ex->ex_debline = dot.tok_debline;
      137       137    1         switch (DOT)   {
      138       138    2         case IDENTIFIER:
      139       139    2            idf2expr(ex);
      140       140    2            break;
      141       141    2         case STRING:
      142       142    2            string2expr(ex);
      143       143    2            break;
      144       144    2         case INTEGER:
      145       145    2            int2expr(ex);
      146       146    2            break;
      147       147    2        #ifndef NOFLOAT
CC.C03    File=zbc$expr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=5  
      148       148    2         case FLOATING:
      149       149    2            float2expr(ex);
      150       150    2            break;
      151       151    2        #endif NOFLOAT
      152       152    2         default:
      153       153    2            crash("bad conversion to expression");
      154       154    2            break;
      155       155    2         }
      156       156    1        }
      157       157
      158       158             idf2expr(expr)
      159       159              register struct expr *expr;
      160       160             {
      161       161    1         /* Dot contains an identifier which is turned into an
      162       162    1            expression.
      163       163    1            Note that this constitutes an applied occurrence of
      164       164    1            the identifier.
      165       165    1         */
      166       166    1         register struct idf *idf = dot.tk_idf; /* != 0*/
      167       167    1         register struct def *def = idf->id_def;
      168       168    1
      169       169    1         if (def == 0)  {
      170       170    2            if (AHEAD == '(') /* function call, declare name IMPLICITly */
      171       171    2               add_def(idf, IMPLICIT, funint_type, level); /* RM 13 */
      172       172    2            else  {
      173       173    3               if (!is_anon_idf(idf))
      174       174    3                  error("%s undefined", idf->id_text);
      175       175    3               /* declare idf anyway */
      176       176    3               add_def(idf, 0, error_type, level);
      177       177    3            }
      178       178    2            def = idf->id_def;
      179       179    2         }
      180       180    1         /* now def != 0 */
      181       181    1         if (def->df_type->tp_fund == LABEL) {
      182       182    2            expr_error(expr, "illegal use of label %s", idf->id_text);
      183       183    2            expr->ex_type = error_type;
      184       184    2         }
CC.C03    File=zbc$expr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=6  
      185       185    1         else {
      186       186    2            def->df_used = 1;
      187       187    2            expr->ex_type = def->df_type;
      188       188    2            if (expr->ex_type == error_type)
      189       189    2               expr->ex_flags |= EX_ERROR;
      190       190    2         }
      191       191    1         expr->ex_lvalue =
      192       192    1            (  def->df_type->tp_fund == FUNCTION ||
      193       193    1               def->df_type->tp_fund == ARRAY ||
      194       194    1               def->df_sc == ENUM
      195       195    1            ) ? 0 : 1;
      196       196    1         expr->ex_modlvalue = expr->ex_lvalue;
      197       197    1         expr->ex_class = Value;
      198       198    1         if (def->df_sc == ENUM) {
      199       199    2            expr->VL_CLASS = Const;
      200       200    2            expr->VL_VALUE = def->df_address;
      201       201    2         }
      202       202    1         else
      203       203    1         if (def->df_sc == STATIC && def->df_level >= L_LOCAL) {
      204       204    2            expr->VL_CLASS = Label;
      205       205    2            expr->VL_LBL = def->df_address;
      206       206    2            expr->VL_VALUE = (arith)0;
      207       207    2         }
      208       208    1         else {
      209       209    2            expr->VL_CLASS = Name;
      210       210    2            expr->VL_IDF = idf;
      211       211    2            expr->VL_VALUE = (arith)0;
      212       212    2         }
      213       213    1        }
      214       214
      215       215             string2expr(expr)
      216       216              register struct expr *expr;
      217       217             {
      218       218    1         /* Dot contains a string which is turned into an expression.
      219       219    1         */
      220       220    1         expr->ex_type = string_type;
      221       221    1         expr->ex_modlvalue = expr->ex_lvalue = 0;
CC.C03    File=zbc$expr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=7  
      222       222    1         expr->ex_class = String;
      223       223    1         expr->SG_VALUE = dot.tk_bts;
      224       224    1         expr->SG_LEN = dot.tk_len;
      225       225    1         expr->SG_DATLAB = 0;
      226       226    1        }
      227       227
      228       228
      229       229             concat2expr(expp)
      230       230              register struct expr **expp;
      231       231
      232       232             {
      233       233    1         /*
      234       234    1          *  Append string literal in 'dot' to the end of string
      235       235    1          *  literal pointered by 'expp'.
      236       236    1          *  If 'dot' is an empty string literal, do nothing.
      237       237    1          *
      238       238    1          */
      239       239    1
      240       240    1         extern char *memcpy();
      241       241    1         int source_len = (*expp)->SG_LEN - 1;
      242       242    1
      243       243    1         if ( dot.tk_len > 1 ) {
      244       244    2             (*expp)->SG_VALUE = Srealloc((*expp)->SG_VALUE, ((*expp)->SG_LEN += dot.t
                               k_len -1));
      245       245    2             memcpy((*expp)->SG_VALUE + source_len, dot.tk_bts, dot.tk_len);
      246       246    2         }
      247       247    1        }
      248       248             int2expr(expr)
      249       249              struct expr *expr;
      250       250             {
      251       251    1         /* Dot contains an integer constant which is turned
      252       252    1            into an expression.
      253       253    1         */
      254       254    1         fill_int_expr(expr, dot.tk_ival, dot.tk_fund);
      255       255    1        }
      256       256
      257       257             #ifndef NOFLOAT
CC.C03    File=zbc$expr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=8  
      258       258             float2expr(expr)
      259       259              register struct expr *expr;
      260       260             {
      261       261    1         /* Dot contains a floating point constant which is turned
      262       262    1            into an expression.
      263       263    1         */
      264       264    1         expr->ex_type = (dot.tk_ftype==FLOAT)? float_type :
      265       265    1                         (dot.tk_ftype==LONG) ? ldouble_type : double_type;
      266       266    1         expr->ex_class = Float;
      267       267    1         expr->FL_VALUE = dot.tk_fval;
      268       268    1         expr->FL_DATLAB = 0;
      269       269    1        }
      270       270             #endif NOFLOAT
      271       271
      272       272             struct expr*
      273       273             intexpr(ivalue, fund)
      274       274              arith ivalue;
      275       275              int fund;
      276       276             {
      277       277    1         /* The value ivalue is turned into an integer expression of
      278       278    1            the size indicated by fund.
      279       279    1         */
      280       280    1         register struct expr *expr = new_expr();
      281       281    1
      282       282    1         expr->ex_file = dot.tk_file;
      283       283    1         expr->ex_line = dot.tk_line;
      284       284    1         expr->ex_debline = dot.tok_debline;
      285       285    1         fill_int_expr(expr, ivalue, fund);
      286       286    1         return expr;
      287       287    1        }
      288       288
      289       289             fill_int_expr(ex, ivalue, fund)
      290       290              register struct expr *ex;
      291       291              arith ivalue;
      292       292              int fund;
      293       293             {
      294       294    1         /* Details derived from ivalue and fund are put into the
CC.C03    File=zbc$expr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=9  
      295       295    1            constant integer expression ex.
      296       296    1         */
      297       297    1         switch (fund) {
      298       298    2         case INT:
      299       299    2            ex->ex_type = int_type;
      300       300    2            break;
      301       301    2         case LONG:
      302       302    2            ex->ex_type = long_type;
      303       303    2            break;
      304       304    2         case UNSIGNED:
      305       305    2            /* We cannot make a test like
      306       306    2                  ivalue <= max_unsigned
      307       307    2               because, if
      308       308    2                  sizeof(long) == int_size
      309       309    2               holds, max_unsigned may be a negative long in
      310       310    2               which case the comparison results in an unexpected
      311       311    2               answer.  We assume that the type "unsigned long"
      312       312    2               is not part of portable C !
      313       313    2            */
      314       314    2            ex->ex_type = (ivalue & ~max_unsigned) ? ulong_type : uint_type;
      315       315    2            break;
      316       316    2         case INTEGER:
      317       317    2            ex->ex_type = (ivalue <= max_int) ? int_type :
      318       318    2                           (ivalue & ~max_unsigned) ? uint_type : long_type;
      319       319    2            break;
      320       320    2         case UNSIGNEDLONG:
      321       321    2          ex->ex_type = ulong_type;
      322       322    2          break;
      323       323    2         default:
      324       324    2            crash("(intexpr) bad fund %s\n", symbol2str(fund));
      325       325    2         }
      326       326    1         ex->ex_class = Value;
      327       327    1         ex->VL_CLASS = Const;
      328       328    1         ex->VL_VALUE = ivalue;
      329       329    1         cut_size(ex);
      330       330    1        }
      331       331
CC.C03    File=zbc$expr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=10 
      332       332             struct expr *
      333       333             new_oper(tp, e1, oper, e2)
      334       334              struct type *tp;
      335       335              register struct expr *e1, *e2;
      336       336             {
      337       337    1         /* A new expression is constructed which consists of the
      338       338    1            operator oper which has e1 and e2 as operands; for a
      339       339    1            monadic operator e1 == NILEXPR.
      340       340    1            During the construction of the right recursive initialisation
      341       341    1            tree it is possible for e2 to be NILEXPR.
      342       342    1         */
      343       343    1         register struct expr *expr = new_expr();
      344       344    1         register struct oper *op;
      345       345    1
      346       346    1         if (e2)  {
      347       347    2            register struct expr *e = e2;
      348       348    2
      349       349    2            while (e->ex_class == Oper && e->OP_LEFT)
      350       350    2               e = e->OP_LEFT;
      351       351    2            expr->ex_file = e->ex_file;
      352       352    2            expr->ex_line = e->ex_line;
      353       353    2            expr->ex_debline = e->ex_debline;
      354       354    2         }
      355       355    1         else
      356       356    1         if (e1)  {
      357       357    2            register struct expr *e = e1;
      358       358    2
      359       359    2            while (e->ex_class == Oper && e->OP_RIGHT)
      360       360    2               e = e->OP_RIGHT;
      361       361    2            expr->ex_file = e->ex_file;
      362       362    2            expr->ex_line = e->ex_line;
      363       363    2            expr->ex_debline = e->ex_debline;
      364       364    2         }
      365       365    1         else  {
      366       366    2            expr->ex_file = dot.tk_file;
      367       367    2            expr->ex_line = dot.tk_line;
      368       368    2            expr->ex_debline = dot.tok_debline;
CC.C03    File=zbc$expr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=11 
      369       369    2         }
      370       370    1         expr->ex_type = tp;
      371       371    1         expr->ex_class = Oper;
      372       372    1         /* combine depths and flags of both expressions */
      373       373    1         if (e2)  {
      374       374    2            int e1_depth = e1 ? e1->ex_depth : 0;
      375       375    2            int e1_flags = e1 ? e1->ex_flags : 0;
      376       376    2
      377       377    2            expr->ex_depth =
      378       378    2               (e1_depth > e2->ex_depth ? e1_depth : e2->ex_depth) + 1;
      379       379    2            expr->ex_flags = (e1_flags | e2->ex_flags) & ~EX_PARENS;
      380       380    2         }
      381       381    1         op = &expr->ex_object.ex_oper;
      382       382    1         op->op_type = tp;
      383       383    1         op->op_oper = oper;
      384       384    1         op->op_left = e1;
      385       385    1         op->op_right = e2;
      386       386    1         return expr;
      387       387    1        }
      388       388
      389       389             chk_cst_expr(expp)
      390       390              register struct expr **expp;
      391       391             {
      392       392    1         /* The expression expr is checked for constancy.
      393       393    1
      394       394    1            There are 6 places where constant expressions occur in C:
      395       395    1            1. after #if
      396       396    1            2. in a global initialization
      397       397    1            3. as size in an array declaration
      398       398    1            4. as value in an enum declaration
      399       399    1            5. as width in a bit field
      400       400    1            6. as case value in a switch
      401       401    1
      402       402    1            The constant expression in a global initialization is
      403       403    1            handled separately (by IVAL()).
      404       404    1
      405       405    1            There are various disparate restrictions on each of
CC.C03    File=zbc$expr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=12 
      406       406    1            the others in the various C compilers.  I have tried some
      407       407    1            hypotheses to unify them, but all have failed.
      408       408    1
      409       409    1            This routine will give a warning for those operators
      410       410    1            not allowed by K&R, under the R-option only.  The anomalies
      411       411    1            are cast, logical operators and the expression comma.
      412       412    1            Special problems (of which there is only one, sizeof in
      413       413    1            Preprocessor #if) have to be dealt with locally
      414       414    1
      415       415    1            Note that according to K&R the negation ! is illegal in
      416       416    1            constant expressions and is indeed rejected by the
      417       417    1            Ritchie compiler.
      418       418    1         */
      419       419    1         register struct expr *expr = *expp;
      420       420    1         register int fund = expr->ex_type->tp_fund;
      421       421    1         register int flags = expr->ex_flags;
      422       422    1         int err = 0;
      423       423    1
      424       424    1        #ifdef DEBUG
      425       425   *S*        print_expr("constant_expression", expr);
      426       426   *S*       #endif DEBUG
      427       427    1         if (  fund != CHAR && fund != SHORT && fund != INT &&
      428       428    1            fund != ENUM && fund != LONG
      429       429    1         )
      430       430    1            expr_error(expr, "non-numerical constant expression"), err++;
      431       431    1         else
      432       432    1         if (!is_ld_cst(expr))
      433       433    1            expr_error(expr, "expression is not constant"), err++;
      434       434    1        #ifdef FLOATOPT
      435       435    1         if (options['A'] && flags & EX_FLOATOPT)
      436       436    1            expr_warning(expr, "constant expression uses f.p. operations");
      437       437    1        #endif
      438       438    1        #ifndef NOROPTION
      439       439    1         if (options['R']) {
      440       440    2            if (flags & EX_CAST)
      441       441    2               expr_warning(expr, "cast in constant expression");
      442       442    2            if (flags & EX_LOGICAL)
CC.C03    File=zbc$expr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=13 
      443       443    2               expr_warning(expr,
      444       444    2                  "logical operator in constant expression");
      445       445    2            if (flags & EX_COMMA)
      446       446    2               expr_warning(expr,
      447       447    2                  "expression comma in constant expression");
      448       448    2         }
      449       449    1        #endif NOROPTION
      450       450    1         if (err)
      451       451    1            erroneous2int(expp);
      452       452    1        }
      453       453
      454       454             init_expression(eppp, expr)
      455       455              register struct expr ***eppp, *expr;
      456       456             {
      457       457    1         /* The expression expr is added to the tree designated
      458       458    1            indirectly by **eppp.
      459       459    1            The natural form of a tree representing an
      460       460    1            initial_value_list is right-recursive, ie. with the
      461       461    1            left-most comma as main operator. The iterative grammar in
      462       462    1            expression.g, however, tends to produce a left-recursive
      463       463    1            tree, ie. one with the right-most comma as its main
      464       464    1            operator.
      465       465    1            To produce a right-recursive tree from the iterative
      466       466    1            grammar, we keep track of the address of the pointer where
      467       467    1            the next expression must be hooked in.
      468       468    1         */
      469       469    1         **eppp = new_oper(void_type, expr, INITCOMMA, NILEXPR);
      470       470    1         *eppp = &(**eppp)->OP_RIGHT;
      471       471    1        }
      472       472
      473       473             int
      474       474             is_ld_cst(expr)
      475       475              register struct expr *expr;
      476       476             {
      477       477    1         /* An expression is a `load-time constant' if it is of the form
      478       478    1            <idf> +/- <integral> or <integral>.
      479       479    1         */
CC.C03    File=zbc$expr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=14 
      480       480    1         return expr->ex_lvalue == 0 && expr->ex_class == Value;
      481       481    1        }
      482       482
      483       483             int
      484       484             is_cp_cst(expr)
      485       485              register struct expr *expr;
      486       486             {
      487       487    1         /* An expression is a `compile-time constant' if it is a
      488       488    1            load-time constant, and the idf is not there.
      489       489    1         */
      490       490    1         return is_ld_cst(expr) && expr->VL_CLASS == Const;
      491       491    1        }
      492       492
      493       493             #ifndef NOFLOAT
      494       494             int
      495       495             is_fp_cst(expr)
      496       496              register struct expr *expr;
      497       497             {
      498       498    1         /* An expression is a `floating-point constant' if it consists
      499       499    1            of the float only.
      500       500    1         */
      501       501    1         return expr->ex_class == Float;
      502       502    1        }
      503       503             int
      504       504             is_fp_cst_zero(expr)
      505       505              register struct expr *expr;
      506       506             {
      507       507    1         /* An expression is a `floating-point constant' if it consists
      508       508    1            of the float only.
      509       509    1         */
      510       510    1         return expr->ex_class == Float && expr->FL_VALUE == (double) 0.0;
      511       511    1        }
      512       512             #endif NOFLOAT
      513       513
      514       514             free_expression(expr)
      515       515              register struct expr *expr;
      516       516             {
CC.C03    File=zbc$expr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=15 
      517       517    1         /* The expression expr is freed recursively.
      518       518    1         */
      519       519    1         if (expr) {
      520       520    2            if (expr->ex_class == Oper)   {
      521       521    3               free_expression(expr->OP_LEFT);
      522       522    3               free_expression(expr->OP_RIGHT);
      523       523    3            }
      524       524    2            free_expr(expr);
      525       525    2         }
      526       526    1        }
      527       527
---  Include file information  ---

   zbc$nofloat:h.:ZBC3TOU. is referenced
   zbc$botch_free:h.:ZBC3TOU. is referenced
   alloc:h.:ZBC3TOU. is referenced
   zbc$idf:h.:ZBC3TOU. is referenced
   zbc$nopp:h.:ZBC3TOU. is referenced
   zbc$arith:h.:ZBC3TOU. is referenced
   zbc$spec_arith:h.:ZBC3TOU. is referenced
   em_arith:h.:ZBC3TOU. is referenced
   zbc$def:h.:ZBC3TOU. is referenced
   zbc$type:h.:ZBC3TOU. is referenced
   zbc$nobitfield:h.:ZBC3TOU. is referenced
   zbc$label:h.:ZBC3TOU. is referenced
   em_label:h.:ZBC3TOU. is referenced
   zbc$expr:h.:ZBC3TOU. is referenced
   zbc$LLlex:h.:ZBC3TOU. is referenced
   zbc$file_info:h.:ZBC3TOU. is referenced
   zbc$Lpars:h.:ZBC3TOU. is referenced
   zbc$decspecs:h.:ZBC3TOU. is referenced
   zbc$declar:h.:ZBC3TOU. is referenced
   zbc$sizes:h.:ZBC3TOU. is referenced
   zbc$nocross:h.:ZBC3TOU. is referenced
   zbc$target_sizes:h.:ZBC3TOU. is referenced
   zbc$level:h.:ZBC3TOU. is referenced
   zbc$noRoption:h.:ZBC3TOU. is referenced
CC.C03    File=zbc$expr:c.:ZBC3TSI                                                  Fri Aug 22 1997  Page=16 

No diagnostics were issued in the file zbc$expr:c.:ZBC3TSI
