

14:56 JUL 28 '97 KV_TRNTBL_M.:E05SI                                        1    
    1      /*M* KV_TRNTBL_M - VDH translate table macros */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7      /*F* NAME:  Translate Table Macros
    8
    9      The following macros may be used to create translate tables:
   10
   11      .fif
   12      KV_PRMINPTRN - Build primary input translate table
   13      KV_SCNINPTRN - Build secondary input translate table
   14      KV$TRNTBL - Translate table definitions
   15      KV$PRMINPTRN - View primary input translate table
   16      KV$SCNINPTRN - View secondary input translate table
   17      KV$PRMOTPTRN - Primary output translate table
   18      KV$SCNOTPTRN - Secondary output translate table
   19      .fin
   20      */
   21      /*F* NAME: KV_PRMINPTRN - Build Primary Input Translate Table
   22
   23           KV_PRMINPTRN is used to generate the primary input translate table.
   24           The result consists of three parts:
   25
   26              NAME.CHARS is a 128 or 256 byte table of translate values.
   27              NAME.TKNTBL is a same-length bit table indicating tokenness.
   28              NAME.SPCESC is a 256-bit table indicating special (early) translation.
   29
   30           The options follow:
   31      */
   32      /*K* INPFNC = VALUE-DEC(1-63).
   33           Specifies the offset of the indicated character in all the
   34           system input function tables.
   35           TRNCHR, NXTTBL, and INPFNC are mutually exclusive.
   36      */
   37      /*K* SPCESC = {YES|NO}.  Specifies, if set, that the indicated
14:56 JUL 28 '97 KV_TRNTBL_M.:E05SI                                        2    
   38           character(s) are first to be sent
   39           back to the user for special-input-translation (via KV$USR_EXTINPTRN).
   40      */
   41      /*K* NXTTBL = {YES}.  Specifies, if set, that the indicated
   42           character(s) are translated in the secondary
   43           input translate table. The preprocessor variable NXTTBLX
   44           is used to maintain the current secondary translate table size.  It
   45           should be used to assure that the secondary table matches the primary
   46           one (see the TEST option on KV_SCNINPTRN).
   47           TRNCHR, NXTTBL, and INPFNC are mutually exclusive.
   48      */
   49      /*K* FRSCHR = VALUE-CHAR or BIT.  Specifies either the first character
   50           of a range (with LSTCHR), or a set of characters, for which this
   51           invocation of KV_PRMINPTRN applies.  It may be specified as a
   52           character string constant or as a (list of) bit-string expression(s).
   53      */
   54      /*K* LSTCHR = VALUE-TEXT or BIT.  Specifies the last character
   55           of a range (with FRSCHR, both must be length one) for which this
   56           invocation of KV_PRMINPTRN applies.  It may be specified as a
   57           character string constant or as a (list of) bit-string expression(s).
   58      */
   59      /*K* TRNCHR = VALUE-CHAR or BIT.
   60           Specifies the translated
   61           character values for those characters for which this
   62           invocation of KV_PRMINPTRN applies.  It may be specified as a
   63           character string constant or as a (list of) bit-string expression(s).
   64           The length of TRNCHR must be zero, one, or the same as the number
   65           or characters being translated.  One causes all the characters
   66           to be translated to the same value.  Zero means one-to-one translation.
   67           TRNCHR, NXTTBL, and INPFNC are mutually exclusive.
   68      */
   69      /*K* INCR = VALUE-DEC(0-?).  Is used with NXTTBL to set the number of secondary
   70           translate table entries needed for each of the indicated characters.
   71           In particular, a value of two is useful for secondary entries of
   72           the INPFNCTRN variety.  The default is 1.
   73      */
   74      /*K* LAST = {NO|any}.
14:56 JUL 28 '97 KV_TRNTBL_M.:E05SI                                        3    
   75      Specifies that the table is complete.  If translation
   76           was ever specified for a character greater than BINASC(127), then a
   77           full-size table will be built.  Otherwise, only a half-size table is
   78           provided, in which case KV$TRNTBL should specify INPCHRMSK='007F'X,
   79           but NAME.SPCESC is always a full-size table.
   80      */
   81      %MACRO KV_PRMINPTRN (NAME=, STCLASS=CONSTANT, INPFNC=0, NXTTBL(YES='1'B)='0'B,
   82                          INCR=1,
   83                          SPCESC(YES='1'B)='0'B, FRSCHR=, LSTCHR=, TRNCHR=, LAST=NO);
   84      %LSET LISTDIR='0'B;
   85      %LSET CONST='0'B;
   86      %IF LENGTHC (TEXTCHAR (NAME))~=0;
   87      DCL 1 NAME STCLASS,
   88         %SET NXTTBLX=0;
   89         %SET TKN0=CONCAT('00000000'X,'00000000'X);
   90         %SET TKN1=TKN0;
   91         %SET TKN2=TKN0;
   92         %SET TKN3=TKN0;
   93         %SET EXT0=TKN0;
   94         %SET EXT1=TKN0;
   95         %SET EXT2=TKN0;
   96         %SET EXT3=TKN0;
   97         %SET CHRS='0123456789ABCDEF0123456789ABCDEF';
   98         %SET CHRS=CONCAT (CHRS, CHRS, CHRS, CHRS, CHRS, CHRS, CHRS, CHRS);
   99         %SET H2C_C=BINASC(0);
  100         %LSET INCR=1;
  101         %LSET FLAGS='0'B;
  102         %LSET K=0;
  103         %SET IN_LNG=128;
  104         %LSET IN_CHR=' ';
  105         %INSERT_CHRS;
  106         %LSET K=128;
  107         %SET IN_LNG=128;
  108         %SET H2C_C=BINASC (128);
  109         %INSERT_CHRS;
  110         %SET CHRS=SUBSTR(CHRS,0,255);
  111      %ENDIF;
14:56 JUL 28 '97 KV_TRNTBL_M.:E05SI                                        4    
  112      %IF LENGTHC (TEXTCHAR (FRSCHR))~=0;
  113         %HEX2CHR (INPCHR=FRSCHR);
  114         %LSET IN_CHR=H2C_C;
  115         %LSET IN_LNG=LENGTHC (IN_CHR);
  116         %IF LENGTHC (TEXTCHAR (LSTCHR))>0;
  117            %HEX2CHR (INPCHR=LSTCHR);
  118            %ERROR (IN_LNG~=1 OR LENGTHC (H2C_C)~=1, 'FRSCHR and LSTCHR must be 1-char');
  119            %LSET IN_LNG=ASCBIN (H2C_C)-ASCBIN (IN_CHR)+1;
  120            %ERROR (IN_LNG<=0, 'LSTCHR must not preceed FRSCHR in ASCII collation');
  121            %SET H2C_C=IN_CHR;
  122         %ENDIF;
  123         %LSET INCR=INCR;
  124         %IF LENGTHC (TEXTCHAR (TRNCHR))>0;
  125            %HEX2CHR (INPCHR=TRNCHR);
  126            %IF LENGTHC (H2C_C)=1 AND IN_LNG>1;
  127               %LSET CONST='1'B;
  128            %ELSE;
  129               %ERROR (LENGTHC (H2C_C)~=IN_LNG, 'LENGTH (TRNCHR) is incorrect');
  130            %ENDIF;
  131         %ENDIF;
  132         %LSET K=ASCBIN (SUBSTR (IN_CHR, 0, 1));
  133         %IF K+IN_LNG>128 AND LENGTHC(CHRS)=255 AND (INPFNC~=0 OR NXTTBL
  134           OR LENGTHC(TEXTCHAR(TRNCHR))~=0);
  135            %SET CHRS=CONCAT(CHRS,BINASC(255));
  136         %ENDIF;
  137         %LSET FLAGS=CONCAT('0'B,SPCESC);
  138         %IF INPFNC~=0 OR NXTTBL;
  139            %ERROR (LENGTHC (TEXTCHAR (TRNCHR))~=0 OR NXTTBL AND INPFNC~=0,
  140            'TRNCHR, INPFNC, and NXTTBL are mutually exclusive');
  141            %LSET FLAGS=FLAGS|'1'B;
  142            %IF INPFNC~=0;
  143               %SET H2C_C=BINASC(INPFNC+128);
  144               %ERROR(INPFNC+(INCR-1)*IN_LNG>63 OR INPFNC<1,CONCAT(BINXCHAR(INPFNC),' (',
  145               BINXCHAR((INCR-1)*IN_LNG),') is beyond the INPFNC limits of 1 to 63');
  146            %ELSE;
  147               %ERROR(NXTTBLX+(IN_LNG-1)*INCR>63,CONCAT(BINXCHAR(NXTTBLX+
  148               (IN_LNG-1)*INCR),' is beyond the NXTTBL limit of 63');
14:56 JUL 28 '97 KV_TRNTBL_M.:E05SI                                        5    
  149               %SET H2C_C=BINASC(NXTTBLX);
  150               %SET NXTTBLX=NXTTBLX+IN_LNG*INCR;
  151            %ENDIF;
  152         %ENDIF;
  153         %IF LENGTHC (H2C_C)>LENGTHC (IN_CHR) AND NOT FLAGS;
  154            %SET CHRS=CONCAT (SUBSTR (CHRS, 0, K), H2C_C, SUBSTR (CHRS, K+IN_LNG));
  155         %ELSE;
  156            %INSERT_CHRS;
  157         %ENDIF;
  158      %ENDIF;
  159      %IF TEXTCHAR (LAST)~='NO';
  160         %IF LENGTHC (CHRS)=255;
  161            %SET CHRS=SUBSTR(CHRS,0,128);
  162         %ENDIF;
  163         %LSET LNG=LENGTHC(CHRS);
  164            2 CHARS CHAR(%LNG) INIT (%CHRS),
  165            2 TKNTBL,3 *(0:3) BIT(32) INIT (%SUBBIT(TKN0,0,32),%SUBBIT(TKN0,32),
  166             %SUBBIT(TKN1,0,32),%SUBBIT(TKN1,32)),
  167         %IF LNG>128;
  168            3 *(0:3) BIT(32) INIT(%SUBBIT(TKN2,0,32),%SUBBIT(TKN2,32),
  169             %SUBBIT(TKN3,0,32),%SUBBIT(TKN3,32)),
  170         %ENDIF;
  171            2 %CHARTEXT('SPCESC')(0:7) BIT(32) INIT(%SUBBIT(EXT0,0,32),%SUBBIT(EXT0,32),
  172             %SUBBIT(EXT1,0,32),%SUBBIT(EXT1,32),
  173            %SUBBIT(EXT2,0,32),%SUBBIT(EXT2,32),%SUBBIT(EXT3,0,32),%SUBBIT(EXT3,32));
  174      %ENDIF;
  175      %MEND;
  176      %MACRO INSERT_CHRS;
  177      %IF FLAGS;
  178         %IF K<64;
  179            %SET TKN0=CONCAT(SUBBIT(TKN0,0,K),SUBBIT(FLAGS,0,1),SUBBIT(TKN0,K+1));
  180            %SET EXT0=CONCAT(SUBBIT(EXT0,0,K),SUBBIT(FLAGS,1,1),SUBBIT(EXT0,K+1));
  181         %ELSEIF K<128;
  182            %SET TKN1=CONCAT(SUBBIT(TKN1,0,K-64),SUBBIT(FLAGS,0,1),SUBBIT(TKN1,K-63));
  183            %SET EXT1=CONCAT(SUBBIT(EXT1,0,K-64),SUBBIT(FLAGS,1,1),SUBBIT(EXT1,K-63));
  184         %ELSEIF K<192;
  185            %SET TKN2=CONCAT(SUBBIT(TKN2,0,K-128),SUBBIT(FLAGS,0,1),SUBBIT(TKN2,K-127));
14:56 JUL 28 '97 KV_TRNTBL_M.:E05SI                                        6    
  186            %SET EXT2=CONCAT(SUBBIT(EXT2,0,K-128),SUBBIT(FLAGS,1,1),SUBBIT(EXT2,K-127));
  187         %ELSE;
  188            %SET TKN3=CONCAT(SUBBIT(TKN3,0,K-192),SUBBIT(FLAGS,0,1),SUBBIT(TKN3,K-191));
  189            %SET EXT3=CONCAT(SUBBIT(EXT3,0,K-192),SUBBIT(FLAGS,1,1),SUBBIT(EXT3,K-191));
  190         %ENDIF;
  191      %ENDIF;
  192      %IF K<LENGTHC(CHRS);
  193      %SET CHRS=CONCAT (SUBSTR (CHRS, 0, K), SUBSTR (H2C_C, 0, 1), SUBSTR (CHRS, K+1));
  194      %ENDIF;
  195      %IF LENGTHC (H2C_C)>1 AND NOT CONST;
  196         %SET H2C_C=SUBSTR (H2C_C, 1);
  197      %ELSEIF NOT CONST;
  198         %SET H2C_C=BINASC (ASCBIN (H2C_C)+INCR);
  199      %ENDIF;
  200      %IF IN_LNG>1;
  201         %IF LENGTHC (IN_CHR)>1;
  202            %LSET IN_CHR=SUBSTR (IN_CHR, 1);
  203            %LSET K=ASCBIN (SUBSTR (IN_CHR, 0, 1));
  204         %ELSE;
  205            %LSET K=K+1;
  206         %ENDIF;
  207         %SET IN_LNG=IN_LNG-1;
  208         %INSERT_CHRS;
  209      %ENDIF;
  210      %MEND;
  211      %MACRO HEX2CHR (INPCHR=);
  212      %SET H2C_C=TEXTCHAR (INPCHR);
  213      %IF LENGTHC (H2C_C)>0;
  214         %IF SUBSTR (H2C_C, 0, 1)=''''
  215           AND SUBSTR (H2C_C, LENGTHC (H2C_C)-1, 1)='''';
  216            %SET H2C_C=INPCHR;
  217         %ELSE;
  218            %LSET H2C_H=CONCAT (INPCHR);
  219            %LSET H2C_I=0;
  220            %HEX2CHR1;
  221         %ENDIF;
  222      %ENDIF;
14:56 JUL 28 '97 KV_TRNTBL_M.:E05SI                                        7    
  223      %MEND;
  224      %MACRO HEX2CHR1;
  225      %SET H2C_C=CONCAT (SUBSTR (H2C_C, 0, H2C_I), BITASC (SUBBIT (H2C_H, 0, 8)));
  226      %IF LENGTHB (H2C_H)>8;
  227         %LSET H2C_H=SUBBIT (H2C_H, 8);
  228         %LSET H2C_I=H2C_I+1;
  229         %HEX2CHR1;
  230      %ENDIF;
  231      %MEND;
  232      /*F* NAME: KV_SCNINPTRN - Build Secondary Input Translate Table
  233           KV_SCNINPTRN is used to generate a secondary input translate table.
  234           It must be used after KV_PRMINPTRN, and provides the translation for
  235           exactly those characters declared by KV_PRMINPTRN to be NXTTBL.
  236
  237           A secondary input translate table consists of a 4-word bit-map
  238           indicating tokenness followed immediately by a character array of
  239           tokens or translated characters.
  240
  241           The options follow:
  242      */
  243      /*K* INPFNC = VALUE-DEC(1-63).
  244           .xeq KV_TRNTBL_M KV_PRMINPTRN INPFNC
  245           */
  246      /*K* INPFNCTRN = VALUE-DEC(1-63).  Is the same as INPFNC, but TRNCHR specifies a
  247           translated character value for which the function really exists.
  248      */
  249      /*K* TRNCHR = VALUE-CHAR or BIT.
  250           .xeq KV_TRNTBL_M KV_PRMINPTRN TRNCHR
  251           The length need
  252           not be one, but the values must be specified in the same
  253           order as the NXTTBL entries were specified in KV_PRMINPTRN.
  254      */
  255      /*K* TEST = preprocessor-expression.  Causes an error to be reported if
  256           the value of the expression does not match the entry number about to
  257           be used. The invocation of KV_PRMINPTRN with NXTTBL=YES, corresponding
  258           to this invocation of KV_SCNINPTRN could be preceded by, for example,
  259           %EQU^test-variable^= NXTTBLX; and KV_SCNINPTRN would specify
14:56 JUL 28 '97 KV_TRNTBL_M.:E05SI                                        8    
  260           TEST=test-variable.
  261           */
  262      /*K* LAST = {NO|any}.
  263           .xeq KV_TRNTBL_M KV_PRMINPTRN LAST
  264      */
  265      %MACRO KV_SCNINPTRN(NAME=, STCLASS=CONSTANT, LAST=NO, TEST=, INPFNC=0,
  266                          INPFNCTRN=0, TRNCHR=);
  267      %LSET LISTDIR='0'B;
  268      %IF LENGTHC (TEXTCHAR (NAME))~=0;
  269      DCL 1 NAME STCLASS,
  270         %SET CHRS=SUBSTR (' ', 0, 0);
  271         %SET TKN0=CONCAT ('00000000'X,'00000000'X);
  272      %ENDIF;
  273      %ERROR (INPFNC* (INPFNCTRN+LENGTHC (TEXTCHAR (TRNCHR))) ~=0,
  274      'INPFNC and TRNCHR don''t mix ... use INPFNCTRN');
  275      %LSET LNG=LENGTHC(CHRS);
  276      %IF LENGTHC (TEXTCHAR (TEST))~=0;
  277         %ERROR(TEST~=LNG, CONCAT('TEST is off by ',BINXCHAR(TEST-LNG)));
  278      %ENDIF;
  279      %ERROR(INPFNC+INPFNCTRN>63,'INPFNC must be less than 64');
  280      %IF INPFNC+INPFNCTRN~=0;
  281         %SET TKN0=CONCAT(SUBBIT(TKN0,0,LNG),'1'B,SUBBIT(TKN0,LNG+1));
  282         %IF INPFNC~=0;
  283            %SET CHRS=CONCAT(CHRS,BINASC(INPFNC+128));
  284         %ELSE;
  285            %HEX2CHR (INPCHR=TRNCHR);
  286            %ERROR(LENGTHC(H2C_C)~=1,'INPFNCTRN must translate to one character');
  287            %SET CHRS=CONCAT(CHRS,CONCAT(BINASC(INPFNCTRN+192),H2C_C));
  288         %ENDIF;
  289      %ELSE;
  290         %HEX2CHR (INPCHR=TRNCHR);
  291         %LSET LNGH=LENGTHC(H2C_C);
  292         %SET CHRS=CONCAT(CHRS,H2C_C);
  293      %ENDIF;
  294      %IF TEXTCHAR(LAST)~='NO';
  295         2 * BIT(32) INIT(%SUBBIT(TKN0,0,32)),
  296         2 * BIT(32) INIT(%SUBBIT(TKN0,32)),
14:56 JUL 28 '97 KV_TRNTBL_M.:E05SI                                        9    
  297         2 * CHAR(0) INIT(%CHRS);
  298      %LSET LNG=LENGTHC(CHRS);
  299      %ERROR(LNG~=NXTTBLX,CONCAT('SCNINPTRN length off by ',BINXCHAR(LNG-NXTTBLX)));
  300      %ENDIF;
  301      %MEND;
  302      %MACRO KV_PRMOTPTRN (NAME=, STCLASS=CONSTANT, DFLTRNCHR='00'X,
  303                          FRSCHR=, LSTCHR=, TRNCHR=, LAST=NO);
  304      %LSET LISTDIR='0'B;
  305      %IF LENGTHC (TEXTCHAR (NAME))~=0;
  306      DCL 1 NAME STCLASS,
  307         %HEX2CHR (INPCHR=DFLTRNCHR);
  308         %SET CHRS=CONCAT (H2C_C, H2C_C, H2C_C, H2C_C);
  309         %SET CHRS=CONCAT (CHRS, CHRS, CHRS, CHRS, CHRS, CHRS, CHRS, CHRS);
  310         %SET CHRS=CONCAT (CHRS, CHRS, CHRS, CHRS, CHRS, CHRS, CHRS, CHRS);
  311      %ENDIF;
  312      %IF LENGTHC (TEXTCHAR (FRSCHR))~=0;
  313         %HEX2CHR (INPCHR=FRSCHR);
  314         %LSET IN_CHR=H2C_C;
  315         %LSET IN_LNG=LENGTHC (IN_CHR);
  316         %IF LENGTHC (TEXTCHAR (LSTCHR))>0;
  317            %HEX2CHR (INPCHR=LSTCHR);
  318            %ERROR (IN_LNG~=1 OR LENGTHC (H2C_C)~=1, 'FRSCHR and LSTCHR must be 1-char');
  319            %LSET IN_LNG=ASCBIN (H2C_C)-ASCBIN (IN_CHR)+1;
  320            %ERROR (IN_LNG<=0, 'LSTCHR must not preceed FRSCHR in ASCII collation');
  321            %SET H2C_C=IN_CHR;
  322         %ENDIF;
  323         %LSET CONST='0'B;
  324         %LSET INCR=1;
  325         %IF LENGTHC (TEXTCHAR (TRNCHR))>0;
  326            %HEX2CHR (INPCHR=TRNCHR);
  327            %IF LENGTHC (H2C_C)=1 AND IN_LNG>1;
  328               %LSET CONST='1'B;
  329            %ELSE;
  330               %ERROR (LENGTHC (H2C_C)~=IN_LNG AND IN_LNG>1,
  331                'LENGTH (TRNCHR) is not LENGTH (FRSCHR) or LSTCHR-FRSCHR-1');
  332               %LSET IN_LNG=LENGTHC(H2C_C);
  333            %ENDIF;
14:56 JUL 28 '97 KV_TRNTBL_M.:E05SI                                        10   
  334         %ENDIF;
  335         %LSET K=ASCBIN (SUBSTR (IN_CHR, 0, 1));
  336         %IF LENGTHC (H2C_C)>LENGTHC (IN_CHR);
  337            %SET CHRS=CONCAT (SUBSTR (CHRS, 0, K), H2C_C, SUBSTR (CHRS, K+IN_LNG));
  338         %ELSE;
  339            %LSET FLAGS='0'B;
  340            %INSERT_CHRS;
  341         %ENDIF;
  342      %ENDIF;
  343      %IF TEXTCHAR (LAST)~='NO';
  344            2 * CHAR(256) INIT (%CHRS);
  345      %ENDIF;
  346      %MEND;
  347      %MACRO KV_SCNOTPTRN (NAME=, STCLASS=CONSTANT,
  348                          INPCHR=, TRNCHR=, LAST=NO,
  349         TYPE (NRMPST=100, NRMNO_PST=101, EXTTRN=102, OTPFNC_BS=1,
  350              OTPFNC_HT=2, OTPFNC_LF=3, OTPFNC_CR=4, OTPFNC_HOM=5,
  351              OTPFNC_SPCLF=6, OTPFNC_NXTTBL=7)=100);
  352      %LSET LISTDIR='0'B;
  353      %IF LENGTHC (TEXTCHAR (NAME))~=0;
  354      DCL 1 NAME STCLASS,
  355         %SET INP0=SUBSTR (' ', 0, 0);
  356         %SET INP1=SUBSTR (' ', 0, 0);
  357         %SET INP2=SUBSTR (' ', 0, 0);
  358         %SET INP3=SUBSTR (' ', 0, 0);
  359         %SET OTP0=SUBSTR (' ', 0, 0);
  360         %SET OTP1=SUBSTR (' ', 0, 0);
  361         %SET OTP2=SUBSTR (' ', 0, 0);
  362         %SET OTP3=SUBSTR (' ', 0, 0);
  363         %SET PST1=SUBBIT ('0'B, 0, 0);
  364         %SET PST2=SUBBIT ('0'B, 0, 0);
  365         %SET PST3=SUBBIT ('0'B, 0, 0);
  366         %SET NRM1=SUBBIT ('0'B, 0, 0);
  367         %SET NRM2=SUBBIT ('0'B, 0, 0);
  368         %SET NRM3=SUBBIT ('0'B, 0, 0);
  369      %SET KV_EXTOTPX=0;
  370      %ENDIF;
14:56 JUL 28 '97 KV_TRNTBL_M.:E05SI                                        11   
  371      %IF LENGTHC (TEXTCHAR (INPCHR))~=0;
  372         %LSET TOP=LENGTHC (INP3);
  373         %HEX2CHR (INPCHR=INPCHR);
  374         %ERROR (TOP+LENGTHC (H2C_C)>72, 'INPCHR too long - current size + this one > 72');
  375         %ERROR (LENGTHC (H2C_C)>16, 'INPCHR too long - max size is 16');
  376         %SET TOP=LENGTHC (H2C_C);
  377         %SET INP3=CONCAT (INP3, H2C_C);
  378         %IF TYPE=100 OR TYPE=101;
  379            %IF LENGTHC (TEXTCHAR (TRNCHR))~=0;
  380               %HEX2CHR (INPCHR=TRNCHR);
  381            %ENDIF;
  382            %ERROR (LENGTHC (H2C_C)~=TOP, 'Must translate N chars to N chars');
  383            %SET OTP3=CONCAT (OTP3, H2C_C);
  384            %IF TYPE=100;
  385               %SET PST3=CONCAT (PST3, SUBBIT ('FFFF'X, 0, TOP));
  386            %ELSE;
  387               %SET PST3=CONCAT (PST3, SUBBIT ('0000'X, 0, TOP));
  388            %ENDIF;
  389            %SET NRM3=CONCAT (NRM3, SUBBIT ('FFFF'X, 0, TOP));
  390         %ELSE;
  391            %SET NRM3=CONCAT (NRM3, SUBBIT ('0000'X, 0, TOP));
  392            %IF TYPE=102;                   /* EXTTRN                             */
  393               %SET EXTT=CONCAT(BINASC(KV_EXTOTPX),BINASC(KV_EXTOTPX+1),
  394                 BINASC(KV_EXTOTPX+2),BINASC(KV_EXTOTPX+3),BINASC(KV_EXTOTPX+4),
  395                 BINASC(KV_EXTOTPX+5),BINASC(KV_EXTOTPX+6),BINASC(KV_EXTOTPX+7),
  396                 BINASC(KV_EXTOTPX+8),BINASC(KV_EXTOTPX+9),BINASC(KV_EXTOTPX+10),
  397                 BINASC(KV_EXTOTPX+11),BINASC(KV_EXTOTPX+12),BINASC(KV_EXTOTPX+13),
  398                 BINASC(KV_EXTOTPX+14),BINASC(KV_EXTOTPX+15));
  399               %SET OTP3=CONCAT (OTP3, SUBSTR(EXTT,0,TOP));
  400               %SET PST3=CONCAT (PST3, SUBBIT('0000'X,0,TOP));
  401               %SET KV_EXTOTPX=KV_EXTOTPX+TOP;
  402            %ELSE;
  403               %SET H2C_C=CONCAT (BINASC (TYPE), BINASC (TYPE), BINASC (TYPE), BINASC (TYPE));
  404               %SET H2C_C=CONCAT (H2C_C, H2C_C, H2C_C, H2C_C);
  405               %SET OTP3=CONCAT (OTP3, SUBSTR (H2C_C, 0, TOP));
  406               %SET PST3=CONCAT (PST3, SUBBIT ('FFFF'X, 0, TOP));
  407            %ENDIF;
14:56 JUL 28 '97 KV_TRNTBL_M.:E05SI                                        12   
  408         %ENDIF;
  409         %IF LENGTHC (INP3)>=64;
  410            %SET INP0=INP1;
  411            %SET INP1=INP2;
  412            %SET INP2=SUBSTR (INP3, 0, 64);
  413            %SET INP3=SUBSTR (INP3, 64);
  414            %SET OTP0=OTP1;
  415            %SET OTP1=OTP2;
  416            %SET OTP2=SUBSTR (OTP3, 0, 64);
  417            %SET OTP3=SUBSTR (OTP3, 64);
  418            %SET NRM0=NRM1;
  419            %SET NRM1=NRM2;
  420            %SET NRM2=SUBBIT (NRM3, 0, 64);
  421            %SET NRM3=SUBBIT (NRM3, 64);
  422            %SET PST0=PST1;
  423            %SET PST1=PST2;
  424            %SET PST2=SUBBIT (PST3, 0, 64);
  425            %SET PST3=SUBBIT (PST3, 64);
  426         %ENDIF;
  427         %IF TEXTCHAR (LAST)~='NO';
  428            %SET INP3=CONCAT (INP0, INP1, INP2, INP3);
  429            %SET OTP3=CONCAT (OTP0, OTP1, OTP2, OTP3);
  430            %LSET TOP=LENGTHC (INP3);
  431            2 * CHAR( %(2*TOP+2))
  432              INIT (%CONCAT (BINASC (TOP+1), INP3, SUBSTR (INP3, 0, 1), OTP3)),
  433            %IF TOP>192;
  434            2 * BIT(32) INIT (%SUBBIT (NRM0, 0, 32)),
  435            2 * BIT(32) INIT (%SUBBIT (NRM0, 32)),
  436            %ENDIF;
  437            %IF TOP>128;
  438            2 * BIT(32) INIT (%SUBBIT (NRM1, 0, 32)),
  439            2 * BIT(32) INIT (%SUBBIT (NRM1, 32)),
  440            %ENDIF;
  441            %IF TOP>64;
  442            2 * BIT(32) INIT (%SUBBIT (NRM2, 0, 32)),
  443            2 * BIT(32) INIT (%SUBBIT (NRM2, 32)),
  444            %ENDIF;
14:56 JUL 28 '97 KV_TRNTBL_M.:E05SI                                        13   
  445            %IF MOD (TOP, 64)>32;
  446            2 * BIT(32) INIT (%SUBBIT (NRM3, 0, 32)),
  447               %SET NRM3=SUBBIT (NRM3, 32);
  448            %ENDIF;
  449            2 * BIT( %(LENGTHB (NRM3)+1)) INIT (%NRM3),
  450            %IF TOP>192;
  451            2 * BIT(32) INIT (%SUBBIT (PST0, 0, 32)),
  452            2 * BIT(32) INIT (%SUBBIT (PST0, 32)),
  453            %ENDIF;
  454            %IF TOP>128;
  455            2 * BIT(32) INIT (%SUBBIT (PST1, 0, 32)),
  456            2 * BIT(32) INIT (%SUBBIT (PST1, 32)),
  457            %ENDIF;
  458            %IF TOP>64;
  459            2 * BIT(32) INIT (%SUBBIT (PST2, 0, 32)),
  460            2 * BIT(32) INIT (%SUBBIT (PST2, 32)),
  461            %ENDIF;
  462            %IF MOD (TOP, 64)>32;
  463            2 * BIT(32) INIT (%SUBBIT (PST3, 0, 32)),
  464               %SET PST3=SUBBIT (PST3, 32);
  465            %ENDIF;
  466            2 * BIT( %(LENGTHB (PST3))) INIT (%PST3);
  467         %ENDIF;
  468      %ENDIF;
  469      %MEND;

