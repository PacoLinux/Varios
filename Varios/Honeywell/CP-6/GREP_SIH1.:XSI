.*M*
HELP file for GREP.X
.*T*
 **************************************************************
 *                                                            *
 *  Copyright (c) Bull HN Information Systems Inc., 1989      *
 *                                                            *
 **************************************************************
.*                                             
.fif
.*R*
*T*************************************************************
*T*                                                           *
*T*  Copyright (c) BULL HN Information Systems Inc., 1990     *
*T*                                                           *
*T*************************************************************
.*A*
GREP.X -- prints lines in files matching a regular expression.
.*B*
!GREP.X [options] regular_expression filename [filename ...]
 
where options are:
 
-Anum   print <num> lines after match          -h  suppress filename display
-Bnum   print <num> lines before match         -i  ignore case
-C      print 2 lines either side of match     -l  list files with matches
-num    print <num> lines either side of match -n  number lines with matches
-V      print version i.d.                     -s  run silently
-b      print matches with byte offset         -v  print lines not matching
-c      print count of matching lines only         <expr>
 
.*
.fin
.*R*
"regular_expression" is a regular expression as described under the
REGULAR_EXPRESSION topic.
 
"filename" are one or more (possibly wild-carded) filenames to be searched for
the regular expression.
 
.*B*
SYNOPSIS
 
.*
.fif
.*R*
GREP.X [ -CVbchilnsvwx ] [- num] [-AB num] [[-e] expr | -f file] [files...]
.*
.fin
.*R*
 
DESCRIPTION
 
GREP.X searches the files listed in the arguments (or standard input if no
files are given) for all lines that contain a match for the given "expr".  If
any lines match, they are printed.  Also, if any matches were found, GREP will
exit with a stepcc of 0, but if no matches were found it will exit with a
stepcc of 1.  This is useful for building scripts that use GREP as a condition
for the IF statement.
 
When invoked as EGREP.X the syntax of the "expr" is slightly different; see
topic REGULAR_EXPRESSIONS for details.
 
.*K* REGULAR_EXPRESSIONS
.*
.fif
.*R*
 
(GREP.X) (EGREP.X)  (explanation)
 
"c"        "c"       single (non-meta) character matches itself.
 
"."        "."       matches any single character except newline.
 
"\?"       "?"       postfix operator; preceeding item is optional.
 
"*"        "*"       postfix operator; preceeding item 0 or more times.
 
"\+"       "+"       postfix operator; preceeding item 1 or more times.
 
"\|"       "|"       infix operator; matches either argument.
 
"^"        "^"       matches the empty string at the beginning of a line.
 
"$"        "$"       matches the empty string at the end of a line.
 
"\<"       "\<"      matches the empty string at the beginning of a word.
 
<more>
.*B*
"\>"       "\>"      matches the empty string at the end of a word.
 
"[chars]"  "[chars]" matches any character in the given class; if the first
                     character after the "[" is ^, match any character not in
                     the given class; a range of characters may be specified
                     by "first-last"; for example, (below) is equivalent to
                     the class [^A-Za-z0-9]
 
"\( \)"    "( )"     parentheses are used to override operator precedence.
 
"\digit"   "\digit"  matches a repeat of the text matched earlier in the
                     regexp by the subexpression inside the nth opening
                     parenthesis.
 
"\"        "\"       any special character may be preceded by a backslash to
                     match it literally.
 
<more>
.*B*
(the following are for compatibility with GNU Emacs)
 
"\b"       "\b"      matches the empty string at the edge of a word.
 
"\B"       "\B"      matches the empty string if not at the edge of a word.
 
"\w"       "\w"      matches word-constituent characters (letters & digits).
 
"\W"       "\W"      matches characters that are not word-constituent.
.*
.fin
.*R*
 
Operator precedence is (highest to lowest) ?, *, and +, catenation, and finally
|.  All other constructs are syntactically identical to normal characters.  For
the truly interested, the file dfa.c (GREP_SIc02.:XSI) describes (and
implements) the exact grammar understood by the parser.
 
.*K* OPTIONS
.*
.fif
.*R*
 
-Anum      print <num> lines of context after every matching line
 
-Bnum      print <num> lines of context before every matching line
 
-C         print 2 lines of context on each side of every match
 
-num       print <num> lines of context on each side of every match
 
-V         print the version number on the diagnostic output
 
-b         print every match preceded by its byte offset
 
-c         print a total count of matching lines only
 
-e expr    search for <expr>; useful if <expr> begins with "-"
 
-f file    search for the expression contained in file
 
-h         don't display filenames on matches
 
-i         ignore case difference when comparing strings
 
<more>
.*B*
-l         list files containing matches only
 
-n         print each match preceded by its line number
 
-s         run silently producing no output except error messages
 
-v         print only lines that contain no matches for the <expr>
 
-w         print only lines where the match is a complete word
 
-x         print only lines where the match is a whole line
.*
.fin
.*R*
 
.*K* INCOMPATIBILITIES
The following incompatibilities with UNIX grep exist:
 
The context-dependent meaning of "(" is not quite the same (GREP only).
 
"-b" prints a byte offset instead of a block offset.
 
The "m,n" construct of System V grep is not implemented.
 
.*K* BUGS
GNU E?GREP has been thoroughly debugged and tested by several people over a
period of several months; we think it's a reliable beast or we wouldn't
distribute it.  If by some fluke of the universe you discover a bug, send a
detailed description (including options, regular expressions, and a copy of an
input file that can reproduce it) to me, mike@wheaties.ai.mit.edu.
 
There is also a newsgroup, gnu.utils.bug, for reporting FSF utility programs'
bugs and fixes; but before reporting something as a bug, please try to be sure
that it really is a bug, not a misunderstanding or a deliberate feature.  Also,
include the version number of the utility program you are running in every bug
report that you send in.  Please do not send anything but bug reports to this
newsgroup.
 
.*K* AVAILABILITY
 
GNU grep is free; anyone may redistribute copies of GREP.X to anyone under the
terms stated in the GNU General Public License, a copy of which may be found in
each copy of "GNU Emacs".  See also the comment at the beginning of the source
code file GREP_SIc01.:XSI (grep.c).
 
Copies of GNU grep may sometimes be received packaged with distributions of
Unix systems, but it is never included in the scope of any license covering
those systems.  Such inclusion violates the terms on which distribution is
permitted.  In fact, the primary purpose of the General Public License is to
prohibit anyone from attaching any other restrictions to redistribution of any
of the Free Software Foundation programs.
.*K* AUTHORS
Mike Haertel wrote the deterministic regexp code and the bulk of the program.
 
James A. Woods is responsible for the hybridized search strategy of using
Boyer-Moore-Gosper fixed-string search as a filter before calling the general
regexp matcher.
 
Arthur David Olson contributed code that finds fixed strings for the
aforementioned BMG search for a large class of regexps.
 
Richard Stallman wrote the backtracking regexp matcher that is used for "digit"
backreferences, as well as the getopt that is provided for 4.2BSD sites.  The
backtracking matcher was originally written for GNU Emacs.
 
D. A. Gwyn wrote the C alloca emulation that is provided so System V machines
can run this program.  (Alloca is used only by RMS' backtracking matcher, and
then only rarely, so there is no loss if your machine doesn't have a "real"
alloca.)
 
Scott Anderson and Henry Spencer designed the regression tests used in the
"regress" script.
 
Paul Placeway wrote the original version of this manual page.
.*K* OWNER
Bruce Frost, LADC (port to CP-6).
.*K* XINDEX
GREP.X
.*R*
AID=UTILITY
.*R*
FILE_SEARCHING
.*R*
FILE_MANIPULATION
.*K* XINDEX_ABSTRACT
TOOL=GREP
.*R*
Displays the filename and lines within it that match the user-specified regular
expression.
.*K* CHANGES
910429  MII
.*R*
Fixed star #40852.  Use 9-bit byte instead of 8-bit.
.*B*
03/12/90 Submitted to the X account.  06/27/90 Relinked to get the right
startup routines.
 
.*B*
