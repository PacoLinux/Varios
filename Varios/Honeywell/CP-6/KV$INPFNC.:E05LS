

14:54 JUL 28 '97 KV$INPFNC.:E05SI                                          1    
    1      /*M* KV$INPFNC VDH input function table definitions */
    2      /*T***********************************************************/
    3      /*T*                                                         */
    4      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    5      /*T*                                                         */
    6      /*T***********************************************************/
    7
    8      /* VDH INPUT FUNCTION ITEM DEFINITIONS */
    9
   10
   11      /*F* NAME: KV_INPFNC_E
   12      */
   13      /* INPUT FUNCTION TYPE DEFINITIONS.  THESE ARE INDEXES FOR */
   14      /* KV$INPFNCTBL.ID_CHRCNT, ETC. ARRAYS. */
   15
   16      %MACRO KV_INPFNC_E;
   17
   18      /*K* KV_INPFNCTYP_PRMESC
   19      KV_INPFNCTYP_PRMESC           Primary Escape Sequence.*/
   20      %EQU KV_INPFNCTYP_PRMESC = 0;
   21      /*K* KV_INPFNCTYP_SCNESC
   22      KV_INPFNCTYP_SCNESC           Secondary Escape Sequence.*/
   23      %EQU KV_INPFNCTYP_SCNESC = 1;
   24      /*K* KV_INPFNCTYP_SPCCHR
   25      KV_INPFNCTYP_SPCCHR           Special Character.*/
   26      %EQU KV_INPFNCTYP_SPCCHR = 2;
   27      /*K* KV_INPFNCTYP_CTR
   28      KV_INPFNCTYP_CTR              Control String.*/
   29      %EQU KV_INPFNCTYP_CTR = 3;
   30      /*K* KV_INPFNCTYP_FNCKEY
   31      KV_INPFNCTYP_FNCKEY           Function Key.*/
   32      %EQU KV_INPFNCTYP_FNCKEY = 4;
   33      /*N* KV_INPFNCTYP_SHFFNCKEY
   34      KV_INPFNCTYP_SHFFNCKEY        Shift Function Key.*/
   35      %EQU KV_INPFNCTYP_SHFFNCKEY = 5;
   36      /*N* KV_INPFNCTYP_TRN
   37      KV_INPFNCTYP_TRN              Translation.*/
14:54 JUL 28 '97 KV$INPFNC.:E05SI                                          2    
   38      %EQU KV_INPFNCTYP_TRN = 6;
   39
   40      /* Value for KV$INPFNCTBL.ESCINTn_CHR that indicates this escape */
   41      /* doesn't exist (1) or this escape only has one introducer */
   42      /* character (2).  For indication purposes, any negative value will do. */
   43
   44      %EQU KV_ESCINTCHR_NON = -1;
   45
   46      /* Input control string character bias.  Value added to an input */
   47      /* control string character to distinguish it from normal ones. */
   48
   49      %EQU KV_INPCTRSTRCHR_BIS = KV_INPFNCTYP_CTR*256;
   50      %EQU KV_INPFNCKEY_BIS = KV_INPFNCTYP_FNCKEY*256;
   51      %EQU KV_INPFNCKEYN_BIS = 20*256;
   52      %EQU KV_INPFNCCHRN_BIS = 21*256;
   53      %MEND;
   54      /*F*   NAME:  Input Function Table Macros
   55
   56             The building of a set of system input function tables occurs in
   57             three phases, so ordered because of the single-pass nature of the
   58             PL-6 preprocessor.  Only one data structure is generated, to insure
   59             that the several offset words in the tables are computed properly.
   60             The first phase uses the KV_INPOPR macro to generate all the input
   61             operator instructions, assign a name to the structure, and to
   62             establish the zero-point for those operators that need to be invoked
   63             by index alone.  The second phase uses KV_FNCID to connect the
   64             operators defined in the first phase to the desired ID values.
   65             The third phase uses KV$INPFNCTBL to generate the VDH structures
   66             used to access all of the above.  Several invocations of KV$INPFNCTBL
   67             may be used to define subsets of the FNCID lists created in phase 2,
   68             or phases 2 and 3 may be repeated after phase 3 to define other
   69             combinations.
   70      */
   71      /*F*     NAME: KV_INPOPR__ - Build Input Operators for Input Function Tables
   72
   73               This macro builds the input operators for a set of input function
   74               tables.  Each invocation builds one operator.  The first invocation
14:54 JUL 28 '97 KV$INPFNC.:E05SI                                          3    
   75               must include a NAME option to define the name of the table set.
   76               The KV_INPOPRX preprocessor variable is maintained as the word
   77               index from NAME of the next operator to be defined.  It should
   78               be used to label the operators as in:
   79
   80               }  %EQU MY_OPERATOR=KV_INPOPRX;
   81               }  %KV_INPOPR (TYP=MSC, ... definition for MY_OPERATOR);
   82
   83               The KV_INPOPR0 preprocessor variable should be set to KV_INPOPRX
   84               as if to label the operator that is to occur at the zero-point.
   85               The TEST option can be used to ensure that KV_INPOPRX-KV_INPOPR0
   86               has the value appropriate for the (fixed-index) operator being
   87               defined.  Note that TEST (and the VDH calls using fixed indexes)
   88               use indexes relative to KV_INPOPR0, but KV_FNCID uses indexes
   89               relative to NAME (KV_INPOPRX values).  In the options description
   90               following, all {YES|NO} options default to NO and may be assigned
   91               a YES sense via any specification except "option=NO", e.g.,
   92               "option=,".
   93              */
   94      /*K* ACK = {YES|NO}.  Specifies acknowledgment (e.g. <K>) is to be sent. */
   95      /*K* CHN = {YES|NO}.  Specifies to perform the next operator too.  */
   96      /*K* IMD = {YES|NO}.  Specifies to operate upon invocation.  */
   97      /*K* RED = {YES|NO}.  Specifies to buffer in typeahead until reading.  */
   98      /*K* TYP = OPTION.  Specifies the operator type.
   99
  100               For TYP=ACTRED, the CMPCOD option specifies the read completion code.
  101
  102               For TYP=FLWON or TYP=JMP, the INPOPRX option specifies which
  103               operator to perform next (after the next character has been input
  104               for FLWON).  The default is the "next" one (KV_INPOPRX+1).
  105
  106               For TYP=MSC, four {YES|NO} options specify what to do, DLTINP,
  107               DLTOTP, ABRRED, and DLTRED.
  108
  109               For TYP=RSTPRM, SETPRM, or TGLPRM, the PRMID option specifies
  110               which parameter.
  111
14:54 JUL 28 '97 KV$INPFNC.:E05SI                                          4    
  112               For TYP=USRINPPRC or VDHINPPRC, the ID option specifies which
  113               input procedure to perform.
  114
  115               For TYP=PST, all the options for KV$VDH_PST are available.
  116
  117               For TYP=TXT, the TXT option specifies the text to operate with,
  118               the DSP option specifies what to do with it (INPFNC, REDBFR,
  119               TYPAHD, or WRT), and the {YES|NO} options VRT, TRN, and ECH
  120               also correspond to similar options in IMP.
  121
  122               For patch space creation, KV_INPOPR may be invoked with only the
  123               TYP option, which is required, or space may be reserved at level
  124               2, but be sure to %SET KV_INPOPRX=KV_INPOPRX+number-of-words.
  125
  126      */
  127      /*K* TEST = preprocessor-value.  Causes a compilation error if the
  128      value doesn't match KV_INPOPRX-KV_INPOPR0.
  129      */
  130      /*K* LAST = {YES|NO}.  Specifies, if set, that the table is complete.
  131      */
  132      /*K* DLTINP = {YES|NO}.
  133      Specifies, if set and TYP=MSC, to delete type-ahead input.
  134      */
  135      /*K* DLTRED = {YES|NO}.
  136      Specifies, if set and TYP=MSC, to delete the current read message buffer.
  137      */
  138      /*K* DLTOTP = {YES|NO}.
  139      Specifies, if set and TYP=MSC, to delete the current output buffers, abort any
  140      partially completed write message, and ignore write messages to the
  141      output stream until a marker has been returned down the stream.
  142      */
  143      /*K* ABRRED = {YES|NO}.
  144      Specifies, if set and TYP=MSC, to abort the current read request, if any is
  145      pending.  No notification is sent to the other end of the path.
  146      The read is not re-issued.*/
  147      /*K* INPOPRX = preprocessor-value.  Specifies, for TYP = JMP or TYP =
  148      FLWON,  which operator to perform next.
14:54 JUL 28 '97 KV$INPFNC.:E05SI                                          5    
  149      */
  150      /*K* ID = VALUE-DEC(0-255).
  151      Specifies the input procedure code for TYP = VDHINPPRC or TYP = USRINPPRC.
  152      The EQUate identifiers for VDHINPPRC ID codes are listed in the following table.
  153      ..::TB "^\Identifier\#20\Meaning"
  154      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_ADJWND
  155      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_AT_PRF
  156      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_BLKTYPAHD
  157      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_BRK
  158      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_COPSSNEDTBFR
  159      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_COPSTREDTBFR
  160      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_CR
  161      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_DEL
  162      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_DELLFT
  163      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_DELWRD
  164      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_DLTTO_BGN
  165      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_DLTTO_END
  166      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_DMP
  167      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_DSC
  168      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_ESC
  169      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_FNDPSTCHR
  170      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_FNDPSTWRD
  171      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_INCINPFLDSIZ
  172      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_JOIN
  173      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_LCLLF
  174      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_LF
  175      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_MNTATN
  176      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_NXTSSN
  177      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_OTPPRTID
  178      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_OTPSTT
  179      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_PAGBRK
  180      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_PSTBGNRED
  181      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_PSTENDRED
  182      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_PSTLFT
  183      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_PSTRHT
  184      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_PSTWND_DWN
  185      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_PSTWND_LFT
14:54 JUL 28 '97 KV$INPFNC.:E05SI                                          6    
  186      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_PSTWND_RHT
  187      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_PSTWND_UP
  188      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_RCLEDTWND
  189      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_RE_PSTRED
  190      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_RE_TYP
  191      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_RE_TYPFRM
  192      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_RSTINSMOD
  193      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_SAVEDTWND
  194      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_SCREND
  195      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_SETINSHI_X
  196      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_SETINSLOWX
  197      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_SE_CRSHOM
  198      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_SE_DWN
  199      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_SE_UP
  200      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_SPLIT
  201      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_TAB
  202      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_TGLINSMOD
  203      .xeq KV$INPFNC KV_INPPRC_E KV_INPPRC_TGLLCLMOD
  204      ..::TB
  205      */
  206      /*K* PRMID = VALUE-DEC(0-255).
  207      Parameter ID.  Specifies the
  208      parameter to be set, reset or toggled (depending upon the
  209      setting of TYP to SETPRM, RSTPRM, or TGLPRM.
  210      For the definition of parameter items, structures, or arrays, see
  211      KV_PRMTBL_D.:LIBRARY which uses EQUate identifiers from
  212      KV_PRMID_E.:LIBRARY.  See KV$VDH_SETPRM for a discussion of
  213      KV_PRMTBL_D.
  214      */
  215      /*K* CMPCOD = VALUE-DEC(0-255).
  216      .xeq KV$VDH KV$VDH_DAT CMPCOD
  217      */
  218      /*K* FNCID = VALUE-{DEC(0-255)|CHAR(1)|BIT(8)}.  Invokes KV_FNCID for this
  219      input operator with ID = FNCID and TYP = FNCTYP.
  220      */
  221      /*K* FNCTYP = VALUE-DEC(0-5).
  222      Specifies the input function type for FNCID.
14:54 JUL 28 '97 KV$INPFNC.:E05SI                                          7    
  223      EQUate identifiers for this field are as follows:
  224      ..::TB "^\Identifier\#20\Meaning"
  225      .xeq KV$INPFNC KV_INPFNC_E KV_INPFNCTYP_CTR
  226      .xeq KV$INPFNC KV_INPFNC_E KV_INPFNCTYP_FNCKEY
  227      .xeq KV$INPFNC KV_INPFNC_E KV_INPFNCTYP_PRMESC
  228      .xeq KV$INPFNC KV_INPFNC_E KV_INPFNCTYP_SCNESC
  229      .xeq KV$INPFNC KV_INPFNC_E KV_INPFNCTYP_SPCCHR
  230      ..::TB
  231      */
  232      /*K* TXT = VALUE-CHAR(1-255).  Contains text with which to operate if TYP=TXT.
  233      */
  234      /*K* VRT = {YES|NO}.
  235      Specifies, if set and DSP=WRT and TYP=TXT, to write updating the virtual
  236      position.  VRT and TRN are not useful together.
  237      */
  238      /*K* TRN = {YES|NO}.
  239      Specifies, if set and DSP=WRT and TYP=TXT, to write transparently.
  240      VRT and TRN are not useful together.
  241      */
  242      /*K* ECH = {YES|NO}.
  243      Specifies, if set and TYP=TXT and DSP=REDBFR or INPFNC, to echo any
  244      characters being buffered in the read buffer if ECHOPLEX is on.
  245      */
  246      /*K* DSP = {INPFNC|REDBFR|TYPAHD|WRT}.
  247      Specifies, if TYP=TXT, the operation to
  248      to perform on the text in TXT:  input function, read buffer, type-ahead,
  249      or write.
  250      */
  251      /*K* VRTPSTVAL = VALUE-DEC(-32768 - +32767).
  252      .xeq KV$VDH KV$VDH_PST VRTPSTVAL
  253      */
  254      /*K* HRZPSTVAL = VALUE-DEC(-32768 - +32767).
  255      .xeq KV$VDH KV$VDH_PST HRZPSTVAL
  256      */
  257      /*K* PHSPSTMOD = VALUE-DEC(0-3).
  258      .xeq KV$VDH KV$VDH_PST PHSPSTMOD
  259      */
14:54 JUL 28 '97 KV$INPFNC.:E05SI                                          8    
  260      /*K* HRZPSTORG = VALUE-DEC(0-3).
  261      .xeq KV$VDH KV$VDH_PST HRZPSTORG
  262      */
  263      /*K* VRTPSTORG = VALUE-DEC(0-3).
  264      .xeq KV$VDH KV$VDH_PST VRTPSTORG
  265      */
  266      /*K* HRZPSTUNT = VALUE-DEC(0-7).
  267      .xeq KV$VDH KV$VDH_PST HRZPSTUNT
  268      */
  269      /*K* VRTPSTUNT = VALUE-DEC(0-7).
  270      .xeq KV$VDH KV$VDH_PST VRTPSTUNT
  271      */
  272      /*K* PSTIN_PLC = {YES|NO}.
  273      .xeq KV$VDH KV$VDH_PST PSTIN_PLC
  274      */
  275      /*K* VRTPSTMOD = VALUE-DEC(0-3).
  276      .xeq KV$VDH KV$VDH_PST VRTPSTMOD
  277      */
  278      %MACRO KV_INPOPR (NAME=, TEST=, IMD=NO, RED=NO, ACK=NO, CHN=NO,
  279                        TYP (ACTRED=1, FLWON=2, JMP=3, MSC=4, PST=5, RSTPRM=6,
  280                             SETPRM=7, TGLPRM=8, TXT=9, USRINPPRC=10, VDHINPPRC=11)=0,
  281                        LAST (YES=";", NO=",")=",", STCLASS=CONSTANT,
  282                        DLTINP=NO, DLTRED=NO, DLTOTP=NO, ABRRED=NO,
  283                        INPOPRX=0, ID=0, PRMID=0, CMPCOD=0,
  284             FNCID=, FNCTYP (PRMESC=0, SCNESC=1, SPCCHR=2, CTRSTR=3, FNCKEY=4)=6,
  285                        TXT=' ', VRT=NO, TRN=NO, ECH=NO, DSP (INPFNC=0, REDBFR=1,
  286                          TYPAHD=2, WRT=3)=2,
  287                        VRTPSTVAL=0, HRZPSTVAL=0,
  288                        PHSPSTMOD (SKP=1, BLN=2, ANY=3)=1,
  289                        HRZPSTORG (ABS=1, CRTPST=2, SRD=3)=1,
  290                        VRTPSTORG (ABS=1, CRTPST=2, SRD=3)=2,
  291                        HRZPSTUNT (CLM=1, FLD=2, UN_PRTFLD=3)=1,
  292                        VRTPSTUNT (LIN=1, FLD=2, UN_PRTFLD=3)=1,
  293                        PSTIN_PLC (YES='1'B, NO='0'B)='0'B,
  294                        VRTPSTMOD (WHTSPCOVRSHT=0, WHTSPC=1, IN_PLC=2, RSTVRTPST=3)=2);
  295      %LSET LISTDIR='0'B;
  296      %ERROR (TYP=0,'TYP must be specified');
14:54 JUL 28 '97 KV$INPFNC.:E05SI                                          9    
  297      %IF LENGTHC (TEXTCHAR (NAME))~=0;
  298      DCL 1 NAME STCLASS,
  299      %SET KV_ID_CHRX=1; /* Mark the FNCIDs not started */
  300      %SET KV_INPOPRX=0;
  301      %SET KV_INPOPR0=0;
  302      %ENDIF;
  303      %IF LENGTHC(TEXTCHAR(FNCID))>0;
  304         %KV_FNCID (ID=FNCID, TYP=FNCTYP);
  305      %ENDIF;
  306      %ERROR (TEXTCHAR (IMD)='NO' AND TEXTCHAR (RED)='NO','RED and/or IMD needed.');
  307         2 * BIT(4) INIT (%CONCAT (TEXTCHAR (IMD)~='NO', TEXTCHAR (RED)~='NO',
  308                                   TEXTCHAR (CHN)~='NO', TEXTCHAR (ACK)~='NO')),
  309         2 * UBIN(4) UNAL INIT (TYP),
  310      %IF LENGTHC (TEXTCHAR (TEST))~=0;
  311      %ERROR (TEST~=KV_INPOPRX-KV_INPOPR0, CONCAT('TEST (',BINXCHAR(TEST),
  312               ') ~= KV_INPOPRX-KV_INPOPR0 (',BINXCHAR (KV_INPOPRX-KV_INPOPR0),')'));
  313      %ENDIF;
  314      %IF TYP=4/*KV_INPOPR_TYP_MSC*/;
  315         2 * BIT(8) INIT (%CONCAT (TEXTCHAR (DLTINP)~='NO', TEXTCHAR (DLTRED)~='NO',
  316                                   TEXTCHAR (DLTOTP)~='NO', TEXTCHAR (ABRRED)~='NO')) LAST
  317      %ELSEIF TYP=9/*KV_INPOPR_TYP_TXT*/;
  318      %ERROR (TEXTCHAR (VRT)~='NO' AND TEXTCHAR (TRN)~='NO','VRT and TRN are exclusive.');
  319      %LSET TMP=DSP+BITBIN (CONCAT (TEXTCHAR (ECH)~='NO', TEXTCHAR (TRN)~='NO',
  320                                TEXTCHAR (VRT)~='NO', '0'X, '0'B));
  321         2 * UBIN(8) UNAL INIT (%TMP),
  322         2 * CHAR(0) ALIGNED INIT(%CONCAT (BINASC (LENGTHC(TXT)),TXT)) LAST
  323      %SET KV_INPOPRX=KV_INPOPRX+LENGTHC(TXT)/2+1;
  324      %ELSEIF TYP=5 /*KV_INPOPR_TYP_PST*/;
  325      %LSET YES=(TEXTCHAR(VRT)~='NO');
  326         %KV$VDH_PST (NAME=*, STCLASS=CONSTANT, LAST=LAST, LVL=2, VRTPSTVAL=VRTPSTVAL,
  327            HRZPSTVAL=HRZPSTVAL, PHSPSTMOD=PHSPSTMOD, VRTPSTMOD=VRTPSTMOD,
  328            VRTPSTORG=VRTPSTORG, HRZPSTORG=HRZPSTORG, VRTPSTUNT=VRTPSTUNT,
  329            HRZPSTUNT=HRZPSTUNT, PSTIN_PLC=PSTIN_PLC, VRT=%YES);
  330      %SET KV_INPOPRX=KV_INPOPRX+4;
  331      %ELSE;
  332      %LSET TMP=BITBIN (TYP=2 AND INPOPRX~=0 OR TYP=3)*(KV_INPOPRX+1);
  333         2 * UBIN(8)UNAL INIT (%(ID+PRMID+CMPCOD-INPOPRX+TMP)) LAST
14:54 JUL 28 '97 KV$INPFNC.:E05SI                                          10   
  334      %ERROR(ID+PRMID+CMPCOD+INPOPRX~=MAX(ID,PRMID,CMPCOD,INPOPRX) OR MIN(ID,PRMID,CMPCOD,INPOPRX)<0,
  335         'ID, CMPCOD, PRMID, and INPOPRX are mutually exclusive');
  336      %ENDIF;
  337      %SET KV_INPOPRX=KV_INPOPRX+1;
  338      %MEND;
  339      /*F* NAME: KV_FNCID - Connect Function IDs to Input Operators
  340
  341      The KV_FNCID macro is used to connect function IDs to their respective
  342      input operators.
  343      */
  344      /*K* ID = VALUE-{DEC(0-255)|CHAR(1)|BIT(8)}.  Specifies the identifying
  345      portion of the escape sequence or control string, the value of a special
  346      character, or a function key name; see KV_INPOPR, ID, for a list of
  347      these identifiers.
  348      */
  349      /*K* INPOPRX = VALUE-DEC(0-KV_INPOPRX).  Specifies the value of KV_INPOPRX
  350      when KV_INPOPR was invoked to define the respective operator.
  351      */
  352      /*K* TRNCHR = VALUE-{DEC(0-6*256)|CHAR(1)|TEXT(1)|BIT(16)}.  Specifies,
  353      if INPOPRX is not specified, the meaning of the referenced input function.
  354      TRNCHR is used only in profile-function tables, which have no INPOPR portion.
  355      */
  356      /*K* TYP = VALUE-DEC(0-5).
  357      .xeq KV$INPFNC KV_INPOPR__ FNCTYP
  358      */
  359      %MACRO KV_FNCID (ID=, INPOPRX=, TRNCHR=, NAME=, STCLASS=CONSTANT,
  360             TYP (PRMESC=0, SCNESC=1, SPCCHR=2, CTRSTR=3, FNCKEY=4, SHFFNCKEY=5)=6);
  361      %IF LENGTHC (TEXTCHAR (NAME))~=0;
  362      DCL 1 NAME STCLASS,
  363      %SET KV_ID_CHRX=1; /* Mark the FNCIDs not started */
  364      %SET KV_INPOPRX=0;
  365      %SET KV_INPOPR0=0;
  366      %ENDIF;
  367      %IF KV_ID_CHRX~=0;
  368         %SET KV_ID_CHRX=0;
  369         %SET ID_TYP=6;
  370         %SET SPCCHR=CONCAT (BINASC(0), BINASC(0), BINASC(0), BINASC (0));
14:54 JUL 28 '97 KV$INPFNC.:E05SI                                          11   
  371         %SET SPCCHR=CONCAT (SPCCHR, SPCCHR, SPCCHR, SPCCHR, SPCCHR, SPCCHR, SPCCHR, SPCCHR);
  372         %SET ID_LNG=SUBSTR (SPCCHR,0,12); /* 0-5 = counts, 6-11 = ID_CHRS index */
  373         %SET ID_CHRS=SUBSTR (ID_LNG,0,0); /* String of ID chars. */
  374         %SET FNCOPRX=SUBSTR (ID_LNG,0,0); /* Dblbyte string of OPRXes */
  375      /* Note that FNCOPRX limits the number of functions for any one table to 128 */
  376      %ENDIF;
  377      %LSET T0=LENGTHC (ID_CHRS);
  378      %IF TYP<6;
  379         %LSET T1=ASCBIN (SUBSTR (ID_LNG, TYP, 1));
  380         %LSET T2=ASCBIN (SUBSTR (ID_LNG, TYP+6, 1));
  381         %IF T1~=0;
  382            %SET ID_CHRS= CONCAT (SUBSTR (ID_CHRS,0,T2), SUBSTR (ID_CHRS, T1+T2),
  383              SUBSTR (ID_CHRS,T2,T1));
  384            %SET FNCOPRX= CONCAT (SUBSTR (FNCOPRX,0,2*T2), SUBSTR (FNCOPRX, 2*T1+2*T2),
  385              SUBSTR (FNCOPRX,2*T2,2*T1));
  386            %LSET T6=ASCBIN (SUBSTR (ID_LNG,6,1));
  387            %LSET T7=ASCBIN (SUBSTR (ID_LNG,7,1));
  388            %LSET T8=ASCBIN (SUBSTR (ID_LNG,8,1));
  389            %LSET T9=ASCBIN (SUBSTR (ID_LNG,9,1));
  390            %LSET T10=ASCBIN (SUBSTR (ID_LNG,10,1));
  391            %LSET T11=ASCBIN (SUBSTR (ID_LNG,11));
  392            %LSET T6=T6-BITBIN (T6>T2)*T1+BITBIN (TYP=0)*(T0-T1-T6);
  393            %LSET T7=T7-BITBIN (T7>T2)*T1+BITBIN (TYP=1)*(T0-T1-T7);
  394            %LSET T8=T8-BITBIN (T8>T2)*T1+BITBIN (TYP=2)*(T0-T1-T8);
  395            %LSET T9=T9-BITBIN (T9>T2)*T1+BITBIN (TYP=3)*(T0-T1-T9);
  396            %LSET T10=T10-BITBIN (T10>T2)*T1+BITBIN (TYP=4)*(T0-T1-T10);
  397            %LSET T11=T11-BITBIN (T11>T2)*T1+BITBIN (TYP=5)*(T0-T1-T11);
  398            %LSET ID_LNG=CONCAT (SUBSTR (ID_LNG,0,6), BINASC(T6),
  399               BINASC(T7), BINASC (T8), BINASC (T9), BINASC (T10), BINASC(T11));
  400         %ELSE;
  401            %SET ID_LNG=CONCAT (SUBSTR (ID_LNG,0,TYP+6), BINASC (T0), SUBSTR (ID_LNG,TYP+7));
  402         %ENDIF;
  403         %SET ID_TYP=TYP;
  404      %ENDIF;
  405      %IF ID_TYP<6;
  406         %LSET CH=TEXTCHAR(ID);
  407         %IF LENGTHC (CH)=1; /* SIMPLE ASCII TEXT */
14:54 JUL 28 '97 KV$INPFNC.:E05SI                                          12   
  408         %ELSEIF SUBSTR (CH,0,1)~='''' OR SUBSTR (CH, LENGTHC(CH)-1,1)~='''';
  409            %IF ID_TYP<3 OR SUBSTR (CH, LENGTHC(CH)-2,1)='''';
  410               %LSET CH=BITASC (ID); /* BIT STRING OR PREPROCESSOR EXP */
  411            %ELSE; /* CTRSTR ARE USUALLY JUST NUMBERS */
  412               %LSET CH=BINASC (ID);
  413            %ENDIF;
  414         %ELSE;
  415            %LSET CH=ID; /* CHARACTER STRING */
  416            %ERROR (LENGTHC (CH)~=1,' One ID character at a time, please.');
  417         %ENDIF;
  418         %SET ID_CHRS = CONCAT (ID_CHRS, CH);
  419         %IF LENGTHC(TEXTCHAR(INPOPRX))>0;
  420            %LSET T9=BINBIT(INPOPRX-KV_INPOPR0,16);
  421         %ELSEIF LENGTHC(TEXTCHAR(TRNCHR))=0;
  422            %LSET T9=BINBIT(KV_INPOPRX-KV_INPOPR0,16);
  423         %ELSE;
  424            %LSET T9=TEXTCHAR(TRNCHR);
  425            %IF LENGTHC(T9)=1;
  426               %LSET T9=ASCBIN(T9);
  427            %ELSEIF SUBSTR(T9,0,1)='''' AND SUBSTR(T9,LENGTHC(T9)-1,1)='''';
  428               %LSET T9=ASCBIN(TRNCHR)+256*6*(LENGTHC(TRNCHR)-1);
  429            %ELSEIF SUBSTR(T9,LENGTHC(T9)-2,1)='''';
  430               %LSET T9=BITBIN(TRNCHR);
  431            %ELSE;
  432               %LSET T9=TRNCHR;
  433            %ENDIF;
  434            %ERROR (T9>6*256,'TRNCHR must be a single char, CTRSTR, or (SHF)FNCKEY');
  435            %LSET T9=BINBIT(T9,16);
  436         %ENDIF;
  437         %SET FNCOPRX=CONCAT (FNCOPRX, BITASC (SUBBIT(T9,0,8)), BITASC (SUBBIT(T9,8)));
  438         %LSET T9=BINASC (ASCBIN (SUBSTR (ID_LNG, ID_TYP,1))+1);
  439         %SET ID_LNG=CONCAT (SUBSTR (ID_LNG,0,ID_TYP), T9, SUBSTR (ID_LNG,ID_TYP+1));
  440         %IF ID_TYP=2;
  441            %LSET T9=ASCBIN(CH);
  442            %LSET T8=T9/8;
  443            %LSET T9=MOD (T9,8)*8;
  444            %LSET T7=SUBBIT ('88442211'X,MOD(T9,32),8)&SUBBIT ('F00F'X,T9/32*8,8);
14:54 JUL 28 '97 KV$INPFNC.:E05SI                                          13   
  445            %LSET T7=T7|ASCBIT (SUBSTR (SPCCHR,T8,1));
  446            %SET SPCCHR=CONCAT (SUBSTR (SPCCHR,0,T8), BITASC(T7), SUBSTR (SPCCHR,T8+1));
  447         %ENDIF;
  448      %ENDIF;
  449      %SET KV_FNCID_SAV=CONCAT (SUBSTR(ID_LNG,0,6), SPCCHR);
  450      %MEND;
  451      /*F* NAME: KV$INPFNCTBL - VDH Input Function Table
  452
  453      The KV$INPFNCTBL macro is used to view the input function table.
  454      KV$INPFNCTBL also completes the construction process if STCLASS is
  455      INITable (requiring some previous KV_INPOPRs and/or KV_FNCIDs).
  456      */
  457      %MACRO KV$INPFNCTBL (NAME=KV$INPFNCTBL, LAST=";", STCLASS=BASED, LNK=NIL,
  458             NAM=' ', ESCCNTOK(P='10'B,S='01'B,SP='11'B,PS='11'B,ANY)='00'B,
  459             FNCID_SAV=KV_FNCID_SAV, SBSLVL=0, REDONLY(YES='1'B,NO='0'B)='0'B,
  460             PRMINTCHR1='FFFF'X, PRMINTCHR2='FFFF'X, SCNINTCHR1='FFFF'X, SCNINTCHR2='FFFF'X);
  461      %LSET LISTDIR = '0'B;
  462      %LSET LISTEXP = '1'B;
  463      %LSET LISTCOM = '0'B;
  464      %LSET LISTSUB = '1'B;
  465      %LSET STR = SUBSTR(CONCAT(TEXTCHAR(STCLASS), '   '), 0, 3);
  466      %LSET STR = 2*BITBIN(STR = 'STA' OR STR = 'CON' OR STR = 'EXT');
  467      %LSET INIT = CHARTEXT(SUBSTR('/*INIT',STR,STR+2));
  468      %LSET ENIT = CHARTEXT(SUBSTR('*/',STR));
  469      %LSET LVL=STR/2+1;
  470      %LSET TBLSZ=92; /* THIS IS SIZEC(KV$INPFNCTBL) (if it's kept accurate!!) */
  471      %IF LVL=2; /* Generate the parallel lists of ID chrs and INPOPRXs */
  472         %IF KV_ID_CHRX=0; /* If needed */
  473            %SET ID_CHRS=CONCAT (ID_CHRS, SUBSTR(' ',0,MOD(LENGTHC(ID_CHRS),2)));
  474               %SET KV_ID_CHRX=TBLSZ;
  475         %ELSE;
  476            %SET KV_ID_CHRX=KV_ID_CHRX-TBLSZ;
  477         %ENDIF;
  478         %LSET IX0=KV_ID_CHRX+ASCBIN(SUBSTR(ID_LNG,6,1));
  479         %LSET IX1=KV_ID_CHRX+ASCBIN(SUBSTR(ID_LNG,7,1));
  480         %LSET IX2=KV_ID_CHRX+ASCBIN(SUBSTR(ID_LNG,8,1));
  481         %LSET IX3=KV_ID_CHRX+ASCBIN(SUBSTR(ID_LNG,9,1));
14:54 JUL 28 '97 KV$INPFNC.:E05SI                                          14   
  482         %LSET IX4=KV_ID_CHRX+ASCBIN(SUBSTR(ID_LNG,10,1));
  483         %LSET IX5=KV_ID_CHRX+ASCBIN(SUBSTR(ID_LNG,11,1));
  484         %LSET OX0=IX0+(LENGTHC(ID_CHRS)-KV_ID_CHRX)/2;
  485         %LSET OX1=IX1+(LENGTHC(ID_CHRS)-KV_ID_CHRX)/2;
  486         %LSET OX2=IX2+(LENGTHC(ID_CHRS)-KV_ID_CHRX)/2;
  487         %LSET OX3=IX3+(LENGTHC(ID_CHRS)-KV_ID_CHRX)/2;
  488         %LSET OX4=IX4+(LENGTHC(ID_CHRS)-KV_ID_CHRX)/2;
  489         %LSET OX5=IX5+(LENGTHC(ID_CHRS)-KV_ID_CHRX)/2;
  490      %ENDIF;
  491
  492      %KV$SHRBFR (NAME=NAME, LVL=%LVL, LNK=LNK, NAM=NAM, STCLASS=STCLASS, LAST=",", SIZ=%TBLSZ);
  493      %LSET LVL=LVL+1;
  494
  495      /*K* ID_CHRCNT - UBIN BYTE ARRAY(0:5).
  496      ID-character table size (in bytes - the number of entries).
  497      ID_CHRCNT is indexed by input function type (KV_INPFNCTYP_...). */
  498
  499      %IF STR=0;
  500            2 ID_CHRCNT(0:5) UBIN BYTE CALIGNED,
  501
  502      /*K* SPCCHR - BIT(1) ARRAY(0:255).
  503      Special Character Table.  This BIT(1) array is indexed by the input
  504      character after translation. SPCCHR indicates the character is in the SPCCHR list
  505      or is in the ESCINT1_CHR array. */
  506
  507            2 SPCCHR(0:255) BIT(1),
  508
  509      /*K* SBSLVL - VALUE-DEC(0-3).
  510      Subset Level.  SBSLVL restricts what parameters can be affected by
  511      ESC-N-id.  [Compare to function table types CP5, CP5S1, and CP5S2
  512      described in the TERMINAL command, FNCTBL option, in the CP-6
  513      Programmer Reference (CE40).]
  514      */
  515
  516            2 %CHARTEXT('SBSLVL') UBIN BYTE CALIGNED,
  517
  518      /*K* ESCCNTOK -  BIT(1) ARRAY(0:1).
14:54 JUL 28 '97 KV$INPFNC.:E05SI                                          15   
  519      Indicates for escape sequences that the
  520      escape-n-identifier sequence is permitted (as opposed to only
  521      ESC-identifier).  ESCCNTOK is indexed by input function type (KV_INPFNCTYP_...).
  522      Only the first two (..PRMESC and ..SCNESC) are represented in this array.
  523      ESCCNTOK may be specified as a two-bit bit-string or as P, S, PS, or SP.
  524      See KV_INPOPR, FNCTYP, for a list of input function types. */
  525
  526            2 %CHARTEXT('ESCCNTOK')(0:1) BIT(1),
  527      /*K* REDONLY - BIT(1).
  528      Indicates when set that the (system) function table is to prohibit any
  529      modification of a reread buffer.  Any character not defined in the table
  530      is interpreted the same as if it were the NUL character.  The NUL character
  531      should be defined in the table in such a way as to be ignored, perhaps
  532      accompanied by a warning beep or other indicator. */
  533            2 %CHARTEXT('REDONLY') BIT(1),
  534            2 * BIT(5),
  535
  536      /*K* OPRX_OFS - SBIN WORD ARRAY(0:5).
  537      Operator Index table word Offset (from the beginning of
  538      KV$INPFNCTBL).  OPRX_OFS is indexed by input function type (KV_INPFNCTYP_...).
  539      See KV_INPOPR, FNCTYP, for a list of input function types. */
  540
  541            2 OPRX_OFS(0:5) SBIN,
  542
  543      /*K* ID_CHROFS - SBIN WORD ARRAY(0:5).
  544      ID-character table type offset (from the beginning of
  545      KV$INPFNCTBL).  ID_CHROFS is indexed by input function type (KV_INPFNCTYP_...).
  546      See KV_INPOPR, FNCTYP, for a list of input function types. */
  547
  548            2 ID_CHROFS(0:5) SBIN,
  549
  550      /*K* ESCINT1_CHR - SBIN WORD ARRAY(0:1).
  551      Escape Introducer 1 character table.  ESCINT1_CHR is indexed by escape
  552      index, which yields the first character that introduces the escapes.
  553      A negative value indicates the escape type (primary or secondary) does not exist. */
  554
  555            2 ESCINT1_CHR(0:1) SBIN,
14:54 JUL 28 '97 KV$INPFNC.:E05SI                                          16   
  556
  557      /*K* ESCINT2_CHR - SBIN WORD ARRAY(0:1).
  558      Escape Introducer 2 character table.  ESCINT2_CHR is indexed by escape index,
  559      and yields the second of a 2-character escape introducer sequence.
  560      A negative value indicates this introducer is at most one character. */
  561
  562            2 ESCINT2_CHR(0:1) SBIN,
  563
  564      /*K* INPOPROFS - VALUE-DEC(-32768-32767).
  565      Input Operator table word offset (from the beginning of
  566      KV$INPFNCTBL).  INPOPROFS locates the fixed-value operators for System Tables. */
  567
  568            2 INPOPROFS SBIN,
  569
  570      /*K* FREWRDSIZ - VALUE-DEC(0-32767).
  571      Specifies the number of words available for expansion of this (User) Table. */
  572
  573            2 FREWRDSIZ UBIN LAST
  574
  575      %ELSE;
  576            3 * CHAR(38) INIT (%FNCID_SAV),
  577            3 * UBIN BYTE CALIGNED INIT(SBSLVL),
  578            3 * BIT(2) INIT(ESCCNTOK),
  579            3 * BIT(1) INIT(REDONLY),
  580            3 * BIT(5) INIT('0'B),
  581            3 *(0:11) SBIN INIT (%OX0,%OX1,%OX2,%OX3,%OX4,%OX5,%IX0,%IX1,%IX2,%IX3,%IX4,%IX5),
  582            3 *(0:3) BIT(16) INIT (%BINBIT(BITBIN(PRMINTCHR1),16),%BINBIT(BITBIN(SCNINTCHR1),16),
  583              %BINBIT(BITBIN(PRMINTCHR2),16),%BINBIT(BITBIN(SCNINTCHR2),16)),
  584            3 *(0:1) SBIN INIT(%(KV_INPOPR0-KV_INPOPRX),0)
  585      %IF KV_ID_CHRX=TBLSZ;
  586            %SET KV_ID_CHRX=TBLSZ-LENGTHC(ID_CHRS)-LENGTHC(FNCOPRX);
  587            %LSET TBLSZ=TBLSZ+LENGTHC(ID_CHRS)+LENGTHC(FNCOPRX);
  588         %IF LENGTHC(FNCOPRX)>0;
  589            ,2 * CHAR(0) INIT(%ID_CHRS),
  590            2 * CHAR(0) INIT(%FNCOPRX)
  591          %ENDIF;
  592      %ENDIF;
14:54 JUL 28 '97 KV$INPFNC.:E05SI                                          17   
  593            LAST
  594         %SET KV_INPOPRX=KV_INPOPRX+TBLSZ/2;
  595      %ENDIF;
  596      %MEND;
  597      /*F* NAME: KV$INPOPR - VDH Input Operators
  598
  599      The KV$INPOPR macro is used to view the input operators in the
  600      structure built by the KV_INPOPR macro.
  601      */
  602
  603      /* INPUT OPERATOR ITEM DEFINITIONS. */
  604      /* Description of common (among INPOPRs) items. */
  605
  606
  607      %MACRO KV$INPOPR(NAME = KV$INPOPR, STCLASS = BASED);
  608      %LSET LISTDIR = '0'B;
  609      %LSET LISTEXP = '1'B;
  610      %LSET LISTCOM = '0'B;
  611      %LSET LISTSUB = '1'B;
  612      %LSET STR = SUBSTR(CONCAT(TEXTCHAR(STCLASS), '   '), 0, 3);
  613      %ERROR((STR='STA') OR (STR='CON') OR (STR='EXT'),'Use KV_INPFNC to INIT values');
  614      %LSET NAM=CHARTEXT (CONCAT (TEXTCHAR (NAME), '_DUMMY'));
  615      DCL %NAM ALIGNED STCLASS CHAR(NAME.ID);
  616      DCL 1 NAME REDEF %NAM,
  617
  618      %LSET FIL2=CHARTEXT (SUBSTR ('2 * BIT(1),',11*BITBIN(MODE_FEP)));
  619            %FIL2
  620      /*K* IMD = VALUE-BIT(1).
  621      Specifies, if set, to
  622      "process if in immediate mode". */
  623            2 IMD BIT(1),
  624      /*K* RED = VALUE-BIT(1).
  625      Specifies, if set, to "process if reading".*/
  626            2 RED BIT(1),
  627      /*K* CHN = VALUE-BIT(1).
  628      Specifies, if set, to "chain to next INPOPR".*/
  629            2 CHN BIT(1),
14:54 JUL 28 '97 KV$INPFNC.:E05SI                                          18   
  630      /*K* ACK = VALUE-BIT(1).
  631      Specifies, if set, to acknowledge the function (<C>)".*/
  632            2 ACK BIT(1),
  633      /*K* TYP = VALUE-DEC(0-15).
  634      Specifies the type of operator.  EQUate identifiers for input
  635      operators are listed in the following table.
  636      ..::TB "^\Identifiers\#19\Meaning"
  637      .xeq KV$INPFNC KV_INPOPR_E ACTRED
  638      .xeq KV$INPFNC KV_INPOPR_E FLWON
  639      .xeq KV$INPFNC KV_INPOPR_E JMP
  640      .xeq KV$INPFNC KV_INPOPR_E MSC
  641      .xeq KV$INPFNC KV_INPOPR_E PST
  642      .xeq KV$INPFNC KV_INPOPR_E RSTPRM
  643      .xeq KV$INPFNC KV_INPOPR_E SETPRM
  644      .xeq KV$INPFNC KV_INPOPR_E TGLPRM
  645      .xeq KV$INPFNC KV_INPOPR_E TXT
  646      .xeq KV$INPFNC KV_INPOPR_E USRINPPRC
  647      .xeq KV$INPFNC KV_INPOPR_E VDHINPPRC
  648      ..::TB
  649      */
  650            2 TYP UBIN(4) UNAL,
  651
  652      /* Input operator description for USRINPPRC (user input procedure). */
  653      /* Input operator description for VDHINPPRC (VDH input procedure). */
  654
  655      /*K* ID = VALUE-DEC(0-255).
  656      .xeq KV$INPFNC KV_INPOPR__ ID
  657      */
  658
  659            2 ID UBIN BYTE CALIGNED,
  660
  661      /* Input operator description for ACTRED (activate read). */
  662
  663      /*K* CMPCOD = VALUE-DEC(0-255).
  664      Read completion code if TYP=KV_INPOPR_TYP_ACTRED.
  665      .xeq KV$VDH KV$VDH_DAT CMPCOD
  666      */
14:54 JUL 28 '97 KV$INPFNC.:E05SI                                          19   
  667
  668            2 CMPCOD REDEF ID UBIN BYTE CALIGNED,
  669
  670      /*K* INPOPRX = VALUE-DEC(-128-127).
  671      Input operator offset for FLWON (follow-on) and for JMP (jump).
  672      INPOPRX contains the index of the INPOPR to follow-on to or to jump to.
  673      INPOPRX is a redefinition of ID.  */
  674
  675            2 INPOPRX REDEF ID UBIN BYTE CALIGNED,
  676
  677      /*K* PRMID = VALUE-DEC(0-255).
  678      .xeq KV$INPFNC KV_INPOPR__ PRMID
  679      PRMID is a redefinition of ID.  */
  680
  681            2 PRMID REDEF ID UBIN BYTE CALIGNED;
  682
  683      /* Input operator description for MSC (miscellaneous). */
  684
  685      DCL 1 %CHARTEXT (CONCAT (TEXTCHAR (NAME), '_MSC')) REDEF %NAM,2 * CHAR(1),%FIL2
  686
  687      /*K* NAME_MSC.DLTINP = {YES|NO}.
  688      .xeq KV$INPFNC KV_INPOPR__ DLTINP
  689      */
  690
  691              2 DLTINP BIT(1),
  692
  693      /*K* NAME_MSC.DLTRED = {YES|NO}.
  694      .xeq KV$INPFNC KV_INPOPR__ DLTRED
  695      */
  696
  697              2 DLTRED BIT(1),
  698
  699      /*K* NAME_MSC.DLTOTP = {YES|NO}.
  700      .xeq KV$INPFNC KV_INPOPR__ DLTOTP
  701      */
  702
  703              2 DLTOTP BIT(1),
14:54 JUL 28 '97 KV$INPFNC.:E05SI                                          20   
  704
  705      /*K* NAME_MSC.ABRRED = {YES|NO}.
  706      .xeq KV$INPFNC KV_INPOPR__ ABRRED
  707      */
  708
  709              2 ABRRED BIT(1);
  710
  711      /*K* NAME_TXT.  KV$INPOPR is REDEFed as NAME_DUMMY, NAME_MSC,
  712      NAME_PST, and NAME_TXT to allow
  713      for structures of different size needed for TYP=KV_INPOPR_TYP_TXT and
  714      KV_INPOPR_TYP_PST. */
  715
  716      %LSET TXTNAM=CHARTEXT (CONCAT (TEXTCHAR (NAME), '_TXT'));
  717      DCL 1 %TXTNAM REDEF %NAM,2 * CHAR(1),%FIL2
  718
  719      /*K* NAME_TXT.ECH = {YES|NO}
  720      .xeq KV$INPFNC KV_INPOPR__ ECH
  721      */
  722
  723              2 ECH BIT(1),
  724
  725      /*K* NAME_TXT.TRN = {YES|NO}.
  726      .xeq KV$INPFNC KV_INPOPR__ TRN
  727      */
  728
  729              2 TRN BIT(1),
  730
  731      /*K* NAME_TXT.VRT = {YES|NO}.
  732      .xeq KV$INPFNC KV_INPOPR__ VRT
  733      */
  734
  735              2 VRT BIT(1),
  736              2 * BIT(3),
  737
  738      /* PASS THE CHARACTERS THRU THE SYSTEM INPUT */
  739      /* FUNCTION TABLE, POSSIBLY BUFFERING AND ECHOING. */
  740
14:54 JUL 28 '97 KV$INPFNC.:E05SI                                          21   
  741      %SET KV_INPOPR_TXT_DSP_INPFNC = 0;
  742
  743      /* BUFFER (IN READ BUFFERS) THE ASSOCIATED TEXT. */
  744
  745      %SET KV_INPOPR_TXT_DSP_REDBFR = 1;
  746
  747      /* BUFFER (IN TYPE-AHEAD BUFFERS) THE ASSOCIATED TEXT. */
  748
  749      %SET KV_INPOPR_TXT_DSP_TYPAHDBFR = 2;
  750
  751      /* WRITE THE ASSOCIATED TEXT ON THE TERMINAL. */
  752
  753      %SET KV_INPOPR_TXT_DSP_WRT = 3;
  754
  755      /*K* NAME_TXT.DSP = {INPFNC|REDBFR|TYPAHD|WRT}.
  756      .xeq KV$INPFNC KV_INPOPR__ DSP
  757      */
  758
  759              2 DSP UBIN(2) UNAL,
  760
  761      /* Text (in textc form) */
  762
  763      /*K* NAME_TXT.L = VALUE-DEC(0-255).  Specifies the size of NAME_TXT.T. */
  764
  765              2 L UBIN BYTE CALIGNED,
  766
  767      /*K* NAME_TXT.T = CHAR(NAME_TXT.L).  Specifies the text for TYP=KV_INPOPR_TYP_TXT.*/
  768
  769              2 T CHAR(%TXTNAM.L);
  770      %IF MODE_FEP;
  771
  772      /*K* NAME_PST.VDH_PST.VRTPSTVAL = VALUE-DEC(-32768 - +32767).
  773      .xeq KV$VDH KV$VDH_PST VRTPSTVAL
  774      */
  775      /*K* NAME_PST.VDH_PST.HRZPSTVAL = VALUE-DEC(-32768 - +32767).
  776      .xeq KV$VDH KV$VDH_PST HRZPSTVAL
  777      */
14:54 JUL 28 '97 KV$INPFNC.:E05SI                                          22   
  778      /*K* NAME_PST.VDH_PST.PHSPSTMOD = VALUE-DEC(0-3).
  779      .xeq KV$VDH KV$VDH_PST PHSPSTMOD
  780      */
  781      /*K* NAME_PST.VDH_PST.HRZPSTORG = VALUE-DEC(0-3).
  782      .xeq KV$VDH KV$VDH_PST HRZPSTORG
  783      */
  784      /*K* NAME_PST.VDH_PST.VRTPSTORG = VALUE-DEC(0-3).
  785      .xeq KV$VDH KV$VDH_PST VRTPSTORG
  786      */
  787      /*K* NAME_PST.VDH_PST.HRZPSTUNT = VALUE-DEC(0-7).
  788      .xeq KV$VDH KV$VDH_PST HRZPSTUNT
  789      */
  790      /*K* NAME_PST.VDH_PST.VRTPSTUNT = VALUE-DEC(0-7).
  791      .xeq KV$VDH KV$VDH_PST VRTPSTUNT
  792      */
  793      /*K* NAME_PST.VDH_PST.PSTIN_PLC = {YES|NO}.
  794      .xeq KV$VDH KV$VDH_PST PSTIN_PLC
  795      */
  796      /*K* NAME_PST.VDH_PST.VRTPSTMOD = VALUE-DEC(0-3).
  797      .xeq KV$VDH KV$VDH_PST VRTPSTMOD
  798      */
  799
  800      %LSET PSTNAM= CHARTEXT (CONCAT (TEXTCHAR (NAME), '_PST'));
  801      DCL 1 %PSTNAM REDEF %NAM,2 * BIT(16),
  802      %KV$VDH_PST (NAME= VDH_PST, LVL=2, STCLASS=STCLASS, LAST=";");
  803      %ENDIF;
  804      %MEND;
  805
  806      /*F* NAME: KV_INPPRC_E
  807      INPUT PROCEDURE CODES: */
  808      %MACRO KV_INPPRC_E;
  809
  810      /*K* KV_INPPRC_AT_PRF
  811      KV_INPPRC_AT_PRF              At Perforation.*/
  812      %EQU KV_INPPRC_AT_PRF = 1;
  813      /*K* KV_INPPRC_BRK
  814      KV_INPPRC_BRK                 Break Event*/
14:54 JUL 28 '97 KV$INPFNC.:E05SI                                          23   
  815      %EQU KV_INPPRC_BRK = 2;
  816      /*K* KV_INPPRC_COPSSNEDTBFR
  817      KV_INPPRC_COPSSNEDTBFR        Copy session edit buffer */
  818      %EQU KV_INPPRC_COPSSNEDTBFR = 3;
  819      /*K* KV_INPPRC_COPSTREDTBFR
  820      KV_INPPRC_COPSTREDTBFR        Copy stream edit buffer*/
  821      %EQU KV_INPPRC_COPSTREDTBFR = 4;
  822      /*K* KV_INPPRC_CR
  823      KV_INPPRC_CR                  Carriage return*/
  824      %EQU KV_INPPRC_CR = 5;
  825      /*K* KV_INPPRC_DEL
  826      KV_INPPRC_DEL                 Delete Character*/
  827      %EQU KV_INPPRC_DEL = 6;
  828      /*K* KV_INPPRC_DELLFT
  829      KV_INPPRC_DELLFT              Delete left Character*/
  830      %EQU KV_INPPRC_DELLFT = 23;
  831      /*K* KV_INPPRC_DELWRD
  832      KV_INPPRC_DELWRD              Delete word*/
  833      %EQU KV_INPPRC_DELWRD = 47;
  834      /*K* KV_INPPRC_DLTTO_BGN
  835      KV_INPPRC_DLTTO_BGN           Delete to beginning of Edit Window*/
  836      %EQU KV_INPPRC_DLTTO_BGN = 7;
  837      /*K* KV_INPPRC_DLTTO_END
  838      KV_INPPRC_DLTTO_END           Delete to end of Edit Window*/
  839      %EQU KV_INPPRC_DLTTO_END = 8;
  840      /*K* KV_INPPRC_DMP
  841      KV_INPPRC_DMP                 Dump*/
  842      %EQU KV_INPPRC_DMP = 9;
  843      /*K* KV_INPPRC_DSC
  844      KV_INPPRC_DSC                 Disconnect Event*/
  845      %EQU KV_INPPRC_DSC = 10;
  846      /*K* KV_INPPRC_ESC
  847      KV_INPPRC_ESC                 Escape Introducer*/
  848      %EQU KV_INPPRC_ESC = 11;
  849      /*K* KV_INPPRC_FNDPSTCHR
  850      KV_INPPRC_FNDPSTCHR           Find and Position to Character*/
  851      %EQU KV_INPPRC_FNDPSTCHR = 12;
14:54 JUL 28 '97 KV$INPFNC.:E05SI                                          24   
  852      /*K* KV_INPPRC_FNDPSTWRD
  853      KV_INPPRC_FNDPSTWRD           Find and Position to next Word*/
  854      %EQU KV_INPPRC_FNDPSTWRD = 13;
  855      /*K* KV_INPPRC_LCLLF
  856      KV_INPPRC_LCLLF               Local Line Feed*/
  857      %EQU KV_INPPRC_LCLLF = 14;
  858      /*K* KV_INPPRC_LF
  859      KV_INPPRC_LF                  Line Feed*/
  860      %EQU KV_INPPRC_LF = 15;
  861      /*K* KV_INPPRC_MNTATN
  862      KV_INPPRC_MNTATN              Monitor Attention Event*/
  863      %EQU KV_INPPRC_MNTATN = 16;
  864      /*K* KV_INPPRC_OTPPRTID
  865      KV_INPPRC_OTPPRTID            Output Port ID*/
  866      %EQU KV_INPPRC_OTPPRTID = 17;
  867      /*K* KV_INPPRC_OTPSTT
  868      KV_INPPRC_OTPSTT              Output status*/
  869      %EQU KV_INPPRC_OTPSTT = 18;
  870      /*K* KV_INPPRC_PAGBRK
  871      KV_INPPRC_PAGBRK              Page Break*/
  872      %EQU KV_INPPRC_PAGBRK = 19;
  873      /*K* KV_INPPRC_PSTBGNRED
  874      KV_INPPRC_PSTBGNRED           Position to Beginning of Edit Window*/
  875      %EQU KV_INPPRC_PSTBGNRED = 20;
  876      /*K* KV_INPPRC_PSTENDRED
  877      KV_INPPRC_PSTENDRED           Position to End of Edit Window*/
  878      %EQU KV_INPPRC_PSTENDRED = 21;
  879      /*K* KV_INPPRC_PSTLFT
  880      KV_INPPRC_PSTLFT              Position Left one character*/
  881      %EQU KV_INPPRC_PSTLFT = 22;
  882      /*K* KV_INPPRC_PSTRHT
  883      KV_INPPRC_PSTRHT              Position Right one character*/
  884      %EQU KV_INPPRC_PSTRHT = 24;
  885      /*K* KV_INPPRC_RE_PSTRED
  886      KV_INPPRC_RE_PSTRED           RePosition Input field*/
  887      %EQU KV_INPPRC_RE_PSTRED = 25;
  888      /*K* KV_INPPRC_RE_TYP
14:54 JUL 28 '97 KV$INPFNC.:E05SI                                          25   
  889      KV_INPPRC_RE_TYP              Retype Input*/
  890      %EQU KV_INPPRC_RE_TYP = 26;
  891      /*K* KV_INPPRC_RSTINSMOD
  892      KV_INPPRC_RSTINSMOD           Reset Edit Window*/
  893      %EQU KV_INPPRC_RSTINSMOD = 27;
  894      /*K* KV_INPPRC_RCLEDTWND
  895      KV_INPPRC_RCLEDTWND           Recall Edit Window*/
  896      %EQU KV_INPPRC_RCLEDTWND = 48;
  897      /*K* KV_INPPRC_SAVEDTWND
  898      KV_INPPRC_SAVEDTWND           Save Edit Window*/
  899      %EQU KV_INPPRC_SAVEDTWND = 49;
  900      /*K* KV_INPPRC_SCREND
  901      KV_INPPRC_SCREND              Screen end*/
  902      %EQU KV_INPPRC_SCREND = 28;
  903      /*K* KV_INPPRC_SETINSHI_X
  904      KV_INPPRC_SETINSHI_X          Set Edit Window Right End*/
  905      %EQU KV_INPPRC_SETINSHI_X = 29;
  906      /*K* KV_INPPRC_SETINSLOWX
  907      KV_INPPRC_SETINSLOWX          Set Edit Window Left End*/
  908      %EQU KV_INPPRC_SETINSLOWX = 30;
  909      /*K* KV_INPPRC_TAB
  910      KV_INPPRC_TAB                 Tab*/
  911      %EQU KV_INPPRC_TAB = 31;
  912      /*K* KV_INPPRC_RE_TYPFRM
  913      KV_INPPRC_RE_TYPFRM           ReType Form*/
  914      %EQU KV_INPPRC_RE_TYPFRM = 32;
  915      /*K* KV_INPPRC_BLKTYPAHD
  916      KV_INPPRC_BLKTYPAHD           Block-input Type-Ahead*/
  917      %EQU KV_INPPRC_BLKTYPAHD = 33;
  918      /*K* KV_INPPRC_INCINPFLDSIZ
  919      KV_INPPRC_INCINPFLDSIZ        Increase Input Field Size*/
  920      %EQU KV_INPPRC_INCINPFLDSIZ = 34;
  921      /*K* KV_INPPRC_TGLINSMOD
  922      KV_INPPRC_TGLINSMOD           Toggle Edit Window*/
  923      %EQU KV_INPPRC_TGLINSMOD = 35;
  924      /*K* KV_INPPRC_NXTSSN
  925      KV_INPPRC_NXTSSN              Next Session*/
14:54 JUL 28 '97 KV$INPFNC.:E05SI                                          26   
  926      %EQU KV_INPPRC_NXTSSN = 36;
  927      /*K* KV_INPPRC_TGLLCLMOD
  928      KV_INPPRC_TGLLCLMOD           Toggle Local Mode*/
  929      %EQU KV_INPPRC_TGLLCLMOD = 37;
  930      /*K* KV_INPPRC_ADJWND
  931      KV_INPPRC_ADJWND              Adjust Window*/
  932      %EQU KV_INPPRC_ADJWND = 38;
  933      /*K* KV_INPPRC_PSTWND_UP
  934      KV_INPPRC_PSTWND_UP           Position Window Up*/
  935      %EQU KV_INPPRC_PSTWND_UP = 39;
  936      /*K* KV_INPPRC_PSTWND_DWN
  937      KV_INPPRC_PSTWND_DWN          Position Window Down*/
  938      %EQU KV_INPPRC_PSTWND_DWN = 40;
  939      /*K* KV_INPPRC_PSTWND_LFT
  940      KV_INPPRC_PSTWND_LFT          Position Window Left*/
  941      %EQU KV_INPPRC_PSTWND_LFT = 41;
  942      /*K* KV_INPPRC_PSTWND_RHT
  943      KV_INPPRC_PSTWND_RHT          Position Window Right*/
  944      %EQU KV_INPPRC_PSTWND_RHT = 42;
  945      /*K* KV_INPPRC_SPLIT
  946      KV_INPPRC_SPLIT               Split Record*/
  947      %EQU KV_INPPRC_SPLIT = 43;
  948      /*K* KV_INPPRC_JOIN
  949      KV_INPPRC_JOIN                Join Records*/
  950      %EQU KV_INPPRC_JOIN = 44;
  951      /*K* KV_INPPRC_SE_UP
  952      KV_INPPRC_SE_UP               Screen Editor position Up*/
  953      %EQU KV_INPPRC_SE_UP = 45;
  954      /*K* KV_INPPRC_SE_DWN
  955      KV_INPPRC_SE_DWN              Screen Editor position Down*/
  956      %EQU KV_INPPRC_SE_DWN = 46;
  957      /*K* KV_INPPRC_SE_CRSHOM
  958      KV_INPPRC_SE_CRSHOM           Screen Editor cursor Home*/
  959      %EQU KV_INPPRC_SE_CRSHOM = 50;
  960
  961      %MEND;
  962
14:54 JUL 28 '97 KV$INPFNC.:E05SI                                          27   
  963      /*F* NAME:  KV_INPOPR_E
  964      Input operator type codes. */
  965      %MACRO KV_INPOPR_E;
  966
  967      /*K* ACTRED
  968      KV_INPOPR_TYP_ACTRED          Activate read     */
  969      %EQU KV_INPOPR_TYP_ACTRED = 1;
  970      /*K* FLWON
  971      KV_INPOPR_TYP_FLWON           Follow-on   */
  972      %EQU KV_INPOPR_TYP_FLWON = 2;
  973      /*K* JMP
  974      KV_INPOPR_TYP_JMP             Jump    */
  975      %EQU KV_INPOPR_TYP_JMP = 3;
  976      /*K* MSC
  977      KV_INPOPR_TYP_MSC             Miscellaneous */
  978      %EQU KV_INPOPR_TYP_MSC = 4;
  979      /*K* PST
  980      KV_INPOPR_TYP_PST             Position   */
  981      %EQU KV_INPOPR_TYP_PST = 5;
  982      /*K* RSTPRM
  983      KV_INPOPR_TYP_RSTPRM          Reset parameter   */
  984      %EQU KV_INPOPR_TYP_RSTPRM = 6;
  985      /*K* SETPRM
  986      KV_INPOPR_TYP_SETPRM          Set parameter   */
  987      %EQU KV_INPOPR_TYP_SETPRM = 7;
  988      /*K* TGLPRM
  989      KV_INPOPR_TYP_TGLPRM          Toggle parameter*/
  990      %EQU KV_INPOPR_TYP_TGLPRM = 8;
  991      /*K* TXT
  992      KV_INPOPR_TYP_TXT             Text   */
  993      %EQU KV_INPOPR_TYP_TXT = 9;
  994      /*K* USRINPPRC
  995      KV_INPOPR_TYP_USRINPPRC       User Input Procedure*/
  996      %EQU KV_INPOPR_TYP_USRINPPRC = 10;
  997      /*K* VDHINPPRC
  998      KV_INPOPR_TYP_VDHINPPRC       VDH Input Procedure*/
  999      %EQU KV_INPOPR_TYP_VDHINPPRC = 11;
14:54 JUL 28 '97 KV$INPFNC.:E05SI                                          28   
 1000
 1001      %MEND;
 1002
 1003      /* FUnction key definitions. */
 1004      %MACRO KV_INPFNCKEY_E;
 1005
 1006      /* WARNING... WARNING... WARNING... These EQUates coincide directly to
 1007            the actual key names in the structure FUNKEY_NAMES in the file
 1008            ASL$L_PRO.  If a new key is EQUated, then the structure should
 1009            also be updated.
 1010      */
 1011      %EQU KV_INPFNCKEY_F0                    =   0;
 1012      %EQU KV_INPFNCKEY_F1                    =   1;
 1013      %EQU KV_INPFNCKEY_F2                    =   2;
 1014      %EQU KV_INPFNCKEY_F3                    =   3;
 1015      %EQU KV_INPFNCKEY_F4                    =   4;
 1016      %EQU KV_INPFNCKEY_F5                    =   5;
 1017      %EQU KV_INPFNCKEY_F6                    =   6;
 1018      %EQU KV_INPFNCKEY_F7                    =   7;
 1019      %EQU KV_INPFNCKEY_F8                    =   8;
 1020      %EQU KV_INPFNCKEY_F9                    =   9;
 1021      %EQU KV_INPFNCKEY_F10                   =  10;
 1022      %EQU KV_INPFNCKEY_F11                   =  11;
 1023      %EQU KV_INPFNCKEY_F12                   =  12;
 1024      %EQU KV_INPFNCKEY_F13                   =  13;
 1025      %EQU KV_INPFNCKEY_F14                   =  14;
 1026      %EQU KV_INPFNCKEY_F15                   =  15;
 1027      %EQU KV_INPFNCKEY_F16                   =  16;
 1028      %EQU KV_INPFNCKEY_F17                   =  17;
 1029      %EQU KV_INPFNCKEY_F18                   =  18;
 1030      %EQU KV_INPFNCKEY_F19                   =  19;
 1031      %EQU KV_INPFNCKEY_F20                   =  20;
 1032      %EQU KV_INPFNCKEY_F21                   =  21;
 1033      %EQU KV_INPFNCKEY_F22                   =  22;
 1034      %EQU KV_INPFNCKEY_F23                   =  23;
 1035      %EQU KV_INPFNCKEY_F24                   =  24;
 1036      %EQU KV_INPFNCKEY_F25                   =  25;
14:54 JUL 28 '97 KV$INPFNC.:E05SI                                          29   
 1037      %EQU KV_INPFNCKEY_SPARE12               =  26;
 1038      %EQU KV_INPFNCKEY_SPARE13               =  27;
 1039      %EQU KV_INPFNCKEY_SPARE14               =  28;
 1040      %EQU KV_INPFNCKEY_SPARE15               =  29;
 1041      %EQU KV_INPFNCKEY_SPARE16               =  30;
 1042      %EQU KV_INPFNCKEY_SPARE17               =  31;
 1043      %EQU KV_INPFNCKEY_SPARE18               =  32;
 1044      %EQU KV_INPFNCKEY_SPARE19               =  33;
 1045      %EQU KV_INPFNCKEY_SPARE20               =  34;
 1046      %EQU KV_INPFNCKEY_SPARE21               =  35;
 1047      %EQU KV_INPFNCKEY_SPARE22               =  36;
 1048      %EQU KV_INPFNCKEY_SPARE23               =  37;
 1049      %EQU KV_INPFNCKEY_HELP                  =  38;
 1050      %EQU KV_INPFNCKEY_C_END                 =  39;
 1051      %EQU KV_INPFNCKEY_SF0                   =  40;
 1052      %EQU KV_INPFNCKEY_SF1                   =  41;
 1053      %EQU KV_INPFNCKEY_SF2                   =  42;
 1054      %EQU KV_INPFNCKEY_SF3                   =  43;
 1055      %EQU KV_INPFNCKEY_SF4                   =  44;
 1056      %EQU KV_INPFNCKEY_SF5                   =  45;
 1057      %EQU KV_INPFNCKEY_SF6                   =  46;
 1058      %EQU KV_INPFNCKEY_SF7                   =  47;
 1059      %EQU KV_INPFNCKEY_SF8                   =  48;
 1060      %EQU KV_INPFNCKEY_SF9                   =  49;
 1061      %EQU KV_INPFNCKEY_SF10                  =  50;
 1062      %EQU KV_INPFNCKEY_SF11                  =  51;
 1063      %EQU KV_INPFNCKEY_SF12                  =  52;
 1064      %EQU KV_INPFNCKEY_SF13                  =  53;
 1065      %EQU KV_INPFNCKEY_SF14                  =  54;
 1066      %EQU KV_INPFNCKEY_SF15                  =  55;
 1067      %EQU KV_INPFNCKEY_SF16                  =  56;
 1068      %EQU KV_INPFNCKEY_SF17                  =  57;
 1069      %EQU KV_INPFNCKEY_SF18                  =  58;
 1070      %EQU KV_INPFNCKEY_SF19                  =  59;
 1071      %EQU KV_INPFNCKEY_SF20                  =  60;
 1072      %EQU KV_INPFNCKEY_SF21                  =  61;
 1073      %EQU KV_INPFNCKEY_SF22                  =  62;
14:54 JUL 28 '97 KV$INPFNC.:E05SI                                          30   
 1074      %EQU KV_INPFNCKEY_SF23                  =  63;
 1075      %EQU KV_INPFNCKEY_SF24                  =  64;
 1076      %EQU KV_INPFNCKEY_SF25                  =  65;
 1077      %EQU KV_INPFNCKEY_UF0                   = 66;
 1078      %EQU KV_INPFNCKEY_UF1                   = 67;
 1079      %EQU KV_INPFNCKEY_UF2                   = 68;
 1080      %EQU KV_INPFNCKEY_UF3                   = 69;
 1081      %EQU KV_INPFNCKEY_UF4                   = 70;
 1082      %EQU KV_INPFNCKEY_UF5                   = 71;
 1083      %EQU KV_INPFNCKEY_UF6                   = 72;
 1084      %EQU KV_INPFNCKEY_UF7                   = 73;
 1085      %EQU KV_INPFNCKEY_UF8                   = 74;
 1086      %EQU KV_INPFNCKEY_UF9                   = 75;
 1087      %EQU KV_INPFNCKEY_UF10                  = 76;
 1088      %EQU KV_INPFNCKEY_UF11                  = 77;
 1089      %EQU KV_INPFNCKEY_UF12                  = 78;
 1090      %EQU KV_INPFNCKEY_UF13                  = 79;
 1091      %EQU KV_INPFNCKEY_UF14                  =  80;
 1092      %EQU KV_INPFNCKEY_UF15                  =  81;
 1093      %EQU KV_INPFNCKEY_UF16                  =  82;
 1094      %EQU KV_INPFNCKEY_UF17                  =  83;
 1095      %EQU KV_INPFNCKEY_UF18                  =  84;
 1096      %EQU KV_INPFNCKEY_UF19                  =  85;
 1097      %EQU KV_INPFNCKEY_UF20                  =  86;
 1098      %EQU KV_INPFNCKEY_UF21                  =  87;
 1099      %EQU KV_INPFNCKEY_UF22                  =  88;
 1100      %EQU KV_INPFNCKEY_UF23                  =  89;
 1101      %EQU KV_INPFNCKEY_UF24                  =  90;
 1102      %EQU KV_INPFNCKEY_ARC                   =  91;
 1103      %EQU KV_INPFNCKEY_AREA_FILL             =  92;
 1104      %EQU KV_INPFNCKEY_ASSIGN_INPUT          =  93;
 1105      %EQU KV_INPFNCKEY_ASSIGN_OUTPUT         =  94;
 1106      %EQU KV_INPFNCKEY_ATTRIBUTE_OFF         =  95;
 1107      %EQU KV_INPFNCKEY_ATTRIBUTE_ON          =  96;
 1108      %EQU KV_INPFNCKEY_AUX                   =  97;
 1109      %EQU KV_INPFNCKEY_AUX_ON                =  98;
 1110      %EQU KV_INPFNCKEY_AUX_SEND              =  99;
14:54 JUL 28 '97 KV$INPFNC.:E05SI                                          31   
 1111      %EQU KV_INPFNCKEY_ENTER                 = 100;
 1112      %EQU KV_INPFNCKEY_CLEAR                 = 101;
 1113      %EQU KV_INPFNCKEY_PA1                   = 102;
 1114      %EQU KV_INPFNCKEY_PA2                   = 103;
 1115      %EQU KV_INPFNCKEY_PA3                   = 104;
 1116      %EQU KV_INPFNCKEY_PA4                   = 105;
 1117      %EQU KV_INPFNCKEY_ATTENTION             = 106;
 1118      %EQU KV_INPFNCKEY_C_HOME                = 107;
 1119      %EQU KV_INPFNCKEY_BACK_TAB              = 108;
 1120      %EQU KV_INPFNCKEY_BLACK                 = 109;
 1121      %EQU KV_INPFNCKEY_BLINK                 = 110;
 1122      %EQU KV_INPFNCKEY_BLUE                  = 111;
 1123      %EQU KV_INPFNCKEY_C_PGUP                = 112;
 1124      %EQU KV_INPFNCKEY_CALC_MODE             = 113;
 1125      %EQU KV_INPFNCKEY_CHANGE                = 114;
 1126      %EQU KV_INPFNCKEY_CHARACTER_MODE        = 115;
 1127      %EQU KV_INPFNCKEY_CIRCLE                = 116;
 1128      %EQU KV_INPFNCKEY_CLEAR_ENTRY           = 117;
 1129      %EQU KV_INPFNCKEY_CLEAR_TO_RT_MARGIN    = 118;
 1130      %EQU KV_INPFNCKEY_COLOR_SWAP            = 119;
 1131      %EQU KV_INPFNCKEY_CONCAT_VECTOR         = 120;
 1132      %EQU KV_INPFNCKEY_COPY                  = 121;
 1133      %EQU KV_INPFNCKEY_CREATE                = 122;
 1134      %EQU KV_INPFNCKEY_CURSOR_ON             = 123;
 1135      %EQU KV_INPFNCKEY_CURVE                 = 124;
 1136      %EQU KV_INPFNCKEY_DEFINE                = 125;
 1137      %EQU KV_INPFNCKEY_C_PGDN                = 126;
 1138      %EQU KV_INPFNCKEY_DELETE_CHAR_EOP       = 127;
 1139      %EQU KV_INPFNCKEY_DELETE_CHARACTER      = 128;
 1140      %EQU KV_INPFNCKEY_DELETE_LINE           = 129;
 1141      %EQU KV_INPFNCKEY_DELETE_MODE_EOL       = 130;
 1142      %EQU KV_INPFNCKEY_DELETE_MODE_EOP       = 131;
 1143      %EQU KV_INPFNCKEY_DNARROW               = 132;
 1144      %EQU KV_INPFNCKEY_DOS                   = 133;
 1145      %EQU KV_INPFNCKEY_DOT                   = 134;
 1146      %EQU KV_INPFNCKEY_E_AUX                 = 135;
 1147      %EQU KV_INPFNCKEY_END_OF_FIELD          = 136;
14:54 JUL 28 '97 KV$INPFNC.:E05SI                                          32   
 1148      %EQU KV_INPFNCKEY_END_OF_LINE           = 137;
 1149      %EQU KV_INPFNCKEY_END_OF_PAGE           = 138;
 1150      %EQU KV_INPFNCKEY_ERASE_ALL             = 139;
 1151      %EQU KV_INPFNCKEY_ERASE_EOF             = 140;
 1152      %EQU KV_INPFNCKEY_ERASE_EOP             = 141;
 1153      %EQU KV_INPFNCKEY_EXECUTE               = 142;
 1154      %EQU KV_INPFNCKEY_EXIT                  = 143;
 1155      %EQU KV_INPFNCKEY_FILL                  = 144;
 1156      %EQU KV_INPFNCKEY_FORMS                 = 145;
 1157      %EQU KV_INPFNCKEY_FORM_MODE             = 146;
 1158      %EQU KV_INPFNCKEY_SU0                   = 147;
 1159      %EQU KV_INPFNCKEY_SU1                   = 148;
 1160      %EQU KV_INPFNCKEY_SU2                   = 149;
 1161      %EQU KV_INPFNCKEY_SU3                   = 150;
 1162      %EQU KV_INPFNCKEY_SU4                   = 151;
 1163      %EQU KV_INPFNCKEY_SU5                   = 152;
 1164      %EQU KV_INPFNCKEY_SU6                   = 153;
 1165      %EQU KV_INPFNCKEY_SU7                   = 154;
 1166      %EQU KV_INPFNCKEY_SU8                   = 155;
 1167      %EQU KV_INPFNCKEY_SU9                   = 156;
 1168      %EQU KV_INPFNCKEY_SU10                  = 157;
 1169      %EQU KV_INPFNCKEY_SU11                  = 158;
 1170      %EQU KV_INPFNCKEY_SU12                  = 159;
 1171      %EQU KV_INPFNCKEY_SU13                  = 160;
 1172      %EQU KV_INPFNCKEY_SU14                  = 161;
 1173      %EQU KV_INPFNCKEY_SU15                  = 162;
 1174      %EQU KV_INPFNCKEY_SU16                  = 163;
 1175      %EQU KV_INPFNCKEY_SU17                  = 164;
 1176      %EQU KV_INPFNCKEY_SU18                  = 165;
 1177      %EQU KV_INPFNCKEY_SU19                  = 166;
 1178      %EQU KV_INPFNCKEY_SU20                  = 167;
 1179      %EQU KV_INPFNCKEY_SU21                  = 168;
 1180      %EQU KV_INPFNCKEY_SU22                  = 169;
 1181      %EQU KV_INPFNCKEY_SU23                  = 170;
 1182      %EQU KV_INPFNCKEY_SU24                  = 171;
 1183      %EQU KV_INPFNCKEY_GOTO_RIGHT_MARGIN     = 172;
 1184      %EQU KV_INPFNCKEY_GREEN                 = 173;
14:54 JUL 28 '97 KV$INPFNC.:E05SI                                          33   
 1185      %EQU KV_INPFNCKEY_HOME                  = 174;
 1186      %EQU KV_INPFNCKEY_IDRIS                 = 175;
 1187      %EQU KV_INPFNCKEY_INCREMENT_X_BAR       = 176;
 1188      %EQU KV_INPFNCKEY_INCREMENT_Y_BAR       = 177;
 1189      %EQU KV_INPFNCKEY_INC_VECTOR            = 178;
 1190      %EQU KV_INPFNCKEY_INIT                  = 179;
 1191      %EQU KV_INPFNCKEY_INSERT_CHARACTER      = 180;
 1192      %EQU KV_INPFNCKEY_INSERT_LINE           = 181;
 1193      %EQU KV_INPFNCKEY_INSERT_MODE           = 182;
 1194      %EQU KV_INPFNCKEY_INSERT_MODE_EOL       = 183;
 1195      %EQU KV_INPFNCKEY_INSERT_MODE_EOP       = 184;
 1196      %EQU KV_INPFNCKEY_LINE                  = 185;
 1197      %EQU KV_INPFNCKEY_LOCAL                 = 186;
 1198      %EQU KV_INPFNCKEY_LTARROW               = 187;
 1199      %EQU KV_INPFNCKEY_M1                    = 188;
 1200      %EQU KV_INPFNCKEY_M2                    = 189;
 1201      %EQU KV_INPFNCKEY_MEMORY_LOCK           = 190;
 1202      %EQU KV_INPFNCKEY_MONITOR               = 191;
 1203      %EQU KV_INPFNCKEY_MOVE_X_Y              = 192;
 1204      %EQU KV_INPFNCKEY_OTHER_XMIT            = 193;
 1205      %EQU KV_INPFNCKEY_OVERLAY               = 194;
 1206      %EQU KV_INPFNCKEY_PAGE                  = 195;
 1207      %EQU KV_INPFNCKEY_PAN_X_Y               = 196;
 1208      %EQU KV_INPFNCKEY_PLOT                  = 197;
 1209      %EQU KV_INPFNCKEY_PLOT_MODE             = 198;
 1210      %EQU KV_INPFNCKEY_POLYGON               = 199;
 1211      %EQU KV_INPFNCKEY_PRINT                 = 200;
 1212      %EQU KV_INPFNCKEY_PURPLE                = 201;
 1213      %EQU KV_INPFNCKEY_RAY                   = 202;
 1214      %EQU KV_INPFNCKEY_RECALL                = 203;
 1215      %EQU KV_INPFNCKEY_RECTANGLE             = 204;
 1216      %EQU KV_INPFNCKEY_RED                   = 205;
 1217      %EQU KV_INPFNCKEY_REDRAW                = 206;
 1218      %EQU KV_INPFNCKEY_RESET                 = 207;
 1219      %EQU KV_INPFNCKEY_RESET_INSERT_MODE     = 208;
 1220      %EQU KV_INPFNCKEY_ROLL                  = 209;
 1221      %EQU KV_INPFNCKEY_RTARROW               = 210;
14:54 JUL 28 '97 KV$INPFNC.:E05SI                                          34   
 1222      %EQU KV_INPFNCKEY_RUBBER_BAND           = 211;
 1223      %EQU KV_INPFNCKEY_C_LTARROW             = 212;
 1224      %EQU KV_INPFNCKEY_SCALE                 = 213;
 1225      %EQU KV_INPFNCKEY_SCROLL_SEG_DOWN       = 214;
 1226      %EQU KV_INPFNCKEY_SCROLL_SEG_UP         = 215;
 1227      %EQU KV_INPFNCKEY_SEND                  = 216;
 1228      %EQU KV_INPFNCKEY_SET                   = 217;
 1229      %EQU KV_INPFNCKEY_SPARE0                = 218;
 1230      %EQU KV_INPFNCKEY_SPARE1                = 219;
 1231      %EQU KV_INPFNCKEY_SPARE2                = 220;
 1232      %EQU KV_INPFNCKEY_SPARE3                = 221;
 1233      %EQU KV_INPFNCKEY_SPARE4                = 222;
 1234      %EQU KV_INPFNCKEY_SPARE5                = 223;
 1235      %EQU KV_INPFNCKEY_SPARE6                = 224;
 1236      %EQU KV_INPFNCKEY_SPARE7                = 225;
 1237      %EQU KV_INPFNCKEY_SPARE8                = 226;
 1238      %EQU KV_INPFNCKEY_SPARE9                = 227;
 1239      %EQU KV_INPFNCKEY_SPARE10               = 228;
 1240      %EQU KV_INPFNCKEY_SPARE11               = 229;
 1241      %EQU KV_INPFNCKEY_SIZE                  = 230;
 1242      %EQU KV_INPFNCKEY_TAB_CLEAR_1           = 231;
 1243      %EQU KV_INPFNCKEY_TAB_CLEAR_ALL         = 232;
 1244      %EQU KV_INPFNCKEY_TAB_SET               = 233;
 1245      %EQU KV_INPFNCKEY_TERMINAL              = 234;
 1246      %EQU KV_INPFNCKEY_TEST                  = 235;
 1247      %EQU KV_INPFNCKEY_TEST_TONE             = 236;
 1248      %EQU KV_INPFNCKEY_TEXT_MODE             = 237;
 1249      %EQU KV_INPFNCKEY_THAW                  = 238;
 1250      %EQU KV_INPFNCKEY_TRANSMIT              = 239;
 1251      %EQU KV_INPFNCKEY_TRIANGLE              = 240;
 1252      %EQU KV_INPFNCKEY_TURQUOISE             = 241;
 1253      %EQU KV_INPFNCKEY_UPARROW               = 242;
 1254      %EQU KV_INPFNCKEY_VECTOR                = 243;
 1255      %EQU KV_INPFNCKEY_VERTICAL_WIDTH        = 244;
 1256      %EQU KV_INPFNCKEY_VIEW                  = 245;
 1257      %EQU KV_INPFNCKEY_WHITE                 = 246;
 1258      %EQU KV_INPFNCKEY_WINDOW                = 247;
14:54 JUL 28 '97 KV$INPFNC.:E05SI                                          35   
 1259      %EQU KV_INPFNCKEY_YELLOW                = 248;
 1260      %EQU KV_INPFNCKEY_C_RTARROW             =  249;
 1261      %EQU KV_INPFNCKEY_C_UPARROW             =  250;
 1262      %EQU KV_INPFNCKEY_C_DNARROW             =  251;
 1263      %EQU KV_INPFNCKEY_S_LTARROW             =  252;
 1264      %EQU KV_INPFNCKEY_S_RTARROW             =  253;
 1265      %EQU KV_INPFNCKEY_S_UPARROW             =  254;
 1266      %EQU KV_INPFNCKEY_S_DNARROW             =  255;
 1267      %EQU KV_INPFNCKEY_BREAK                 = 257;
 1268      %EQU KV_INPFNCKEY_IGNORE                = 511;
 1269      /* The following EQUs are for the modifier stuff and are not part of
 1270      the key names.  They are set up to allow 99 function key modifiers
 1271      and 99 special character modifiers.
 1272      */
 1273      %EQU KV_FCNKEY_MODIFIER_BASE   = 10;
 1274      %EQU KV_SPCCHR_MODIFIER_BASE   = 128;
 1275
 1276      %MEND;

