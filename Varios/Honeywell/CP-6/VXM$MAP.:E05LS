VERSION E05

PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:1    
        1        1        /*M* VXM$MAP -  driver routine for producing a map.    */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMR,PLM=6,IND=4,CSU=2,EXM=0,ECU=2,MOC,DCI=4,CRT=4,CTI=8,CCC */
        8        8        VXM$MAP: PROC;
        9        9
       10       10        %INCLUDE VX_INC_C;
       11    10726        %INCLUDE CP_6_SUBS;
       12    11266        %VX$LST;

             11279    1   /*******************************************************************************
             11280    1   *                                                                              *
             11281    1   *                          VX$LST                                                 *
             11282    1   *                                                                              *
             11283    1   *******************************************************************************/

             11288    1   DCL 1 VX$LST                          ALIGNED BASED,
             11289    1         2 LINK$        PTR,               /* Link to next item                  */
             11290    1         2 TYPE         UBIN( 18) UNAL,    /* Type                               */
             11291    1         2 SUB_TYPE     UBIN( 18) UNAL,    /* Sub-type                           */
             11292    1         2 OBJECT_NAME$ PTR,               /* Pointer to object unit name        */
             11293    1         2 PRIOR$ REDEF OBJECT_NAME$ PTR,  /* Pointer to prior element in list   */
             11294    1         2 SC_HEAD$     PTR,               /* Head pointer to section link list  */
             11295    1         2 LIBSRCH$ REDEF SC_HEAD$ PTR,    /* Pointer to account list for library*/
             11296    1         2 SC_TAIL$     PTR,               /* Tail pointer to section link list  */
             11297    1         2 LIB REDEF SC_TAIL$,             /* Used only by UNSAT library files   */
             11298    1           3 USED UBIN HALF UNAL,          /* 1 => library file used, 0=>not used*/
             11299    1           3 NEEDED UBIN HALF UNAL,   /* 1 => library file needed, 0=>not needed*/
             11300    1         2 P,
             11301    1           3 NAME_       ALIGNED,
             11302    1             4 BOUND      UBIN(20)  UNAL,
             11303    1             4 FLAGSV     UBIN(11)  UNAL,
             11304    1             4 *          BIT(5)    UNAL,
             11305    1             4 NAME$      PTR,
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:2    
             11306    1           3 ACCT_       ALIGNED,
             11307    1             4 BOUND      UBIN(20)  UNAL,
             11308    1             4 FLAGSV     UBIN(11)  UNAL,
             11309    1             4 *          BIT(5)    UNAL,
             11310    1             4 ACCT$      PTR,
             11311    1           3 PASS_       ALIGNED,
             11312    1             4 BOUND      UBIN(20)  UNAL,
             11313    1             4 FLAGSV     UBIN(11)  UNAL,
             11314    1             4 *          BIT(5)    UNAL,
             11315    1             4 PASS$      PTR,
             11316    1           3 SN_         ALIGNED,
             11317    1             4 BOUND      UBIN(20)  UNAL,
             11318    1             4 FLAGSV     UBIN(11)  UNAL,
             11319    1             4 *          BIT(5)    UNAL,
             11320    1             4 SN$        PTR,
             11321    1           3 WSN_        ALIGNED,
             11322    1             4 BOUND      UBIN(20)  UNAL,
             11323    1             4 FLAGSV     UBIN(11)  UNAL,
             11324    1             4 *          BIT(5)    UNAL,
             11325    1             4 WSN$       PTR,
             11326    1           3 B           ALIGNED,
             11327    1             4 RES        BIT(1)    UNAL,
             11328    1             4 ASN        BIT(1)    UNAL,
             11329    1             4 ACCT       BIT(1)    UNAL,
             11330    1             4 *          BIT(33)   UNAL,
             11331    1           3 RES         CHAR(4)   ALIGNED,
             11332    1           3 ASN         UBIN(36)  ALIGNED;
       13    11335        %VX$WORD;

             11347    1   /*******************************************************************************
             11348    1   *                                                                              *
             11349    1   *                          VX$WORD                                                 *
             11350    1   *                                                                              *
             11351    1   *******************************************************************************/

             11356    1   DCL VX$WORD_A(0:0)       UBIN(36) ALIGNED    BASED PTR;
             11357    1   DCL VX$HALF_A(0:0)       UBIN(18) HALIGNED   BASED PTR;
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:3    
             11358    1   DCL VX$BYTE_A(0:0)       UBIN( 9) CALIGNED   BASED PTR;
             11359    1   DCL VX$CHAR_A(0:0)       CHAR( 1) UNAL       BASED PTR;
             11360        /**/
             11361    1   DCL VX$WORD_SBIN_A(0:0)  SBIN WORD ALIGNED   BASED     PTR;
             11362    1   DCL VX$HALF_SBIN_A(0:0)  SBIN HALF HALIGNED  BASED     PTR;
             11363    1   DCL VX$BYTE_SBIN_A(0:0)  SBIN HALF CALIGNED  BASED     PTR;
             11364    1   DCL VX$BIT_A(0:0)        BIT(36)   ALIGNED   BASED     PTR;
       14    11367        %T$C;

             11379    1   /*******************************************************************************
             11380    1   *                                                                              *
             11381    1   *                          T$C                                                 *
             11382    1   *                                                                              *
             11383    1   *******************************************************************************/

             11388    1   DCL 1 T$C           BASED     ALIGNED,  /* Text count                         */
             11389    1         2 COUNT        UBIN( 9) UNAL,
             11390    1         2 CHARS        CHAR( T$C.COUNT )   UNAL;
             11391    1   DCL 1 T$C_UNAL      BASED     UNAL,     /* Text count                         */
             11392    1         2 COUNT        UBIN( 9) UNAL,
             11393    1         2 CHARS        CHAR( T$C_UNAL.COUNT ) UNAL;
       15    11396        %SET LISTMAC='1'B;
       16    11397        %SET LISTEXP='1'B;
       17    11398        %SET LISTSUB='1'B;
       18    11399        %BANNER(ARG=SUBS);
             11400        %LSET LISTDIR='0'B;

             11407    1   /*******************************************************************************
             11408    1   *                                                                              *
             11409    1   *                          SUBS                                                 *
             11410    1   *                                                                              *
             11411    1   *******************************************************************************/

       19    11415        %B$RECORDSUBS;
             11416        %EQU TYPHEAD=0 ;
             11417        %EQU TYPDNAM=1 ;
             11418        %EQU TYPRNAM=2 ;
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:4    
             11419        %EQU TYPSECT=3 ;
             11420        %EQU TYPEDEF=4 ;
             11421        %EQU TYPEREF=5 ;
             11422        %EQU TYPSDEF=6 ;
             11423        %EQU TYPSREF=7 ;
             11424        %EQU TYPSEGDEF=8 ;
             11425        %EQU TYPSEGREF=9 ;
             11426        %EQU TYPPROG=10 ;
             11427        %EQU SUBTYPPROG=0 ;
             11428        %EQU SUBTYPREL=1 ;
             11429        %EQU TYPLOGBLK=11 ;
             11430        %EQU TYPINTNTRY=12 ;
             11431        %EQU TYPEXST=13 ;
             11432        %EQU TYPVREBL=14 ;
             11433        %EQU TYPDBGNAM=15 ;
             11434        %EQU TYPLV1LB=16 ;
             11435        %EQU TYPLV1=17 ;
             11436        %EQU TYPDATASEG=18 ;
             11437        %EQU TYPRUM=20 ;
             11438        %EQU TYPBIRTH=21 ;
             11439        %EQU TYPPLOVER=22 ;
             11440        %EQU TYPCOMPID=23 ;
             11441        %EQU TYPROS=30 ;
       20    11443        %C;
             11444        %LSET LISTDIR='0'B;

             11451    1   /*******************************************************************************
             11452    1   *                                                                              *
             11453    1   *                          CHAR                                                 *
             11454    1   *                                                                              *
             11455    1   *******************************************************************************/

       21    11459    1   DCL FIRST_LP        CHAR(0)             CONSTANT  INIT(
       22    11460    1    'q********************** CP6  LINK  VERSION XXX       MAP  ALLOCATION  SUMMARY ****
             11460        ******************');
       23    11461    1   DCL FIRST_TERM      CHAR(0)             CONSTANT  INIT(
       24    11462    1         'q******** CP6  LINK  VERSION XXX       MAP  ALLOCATION  SUMMARY ********');
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:5    
       25    11463    1   DCL HDR_LP          CHAR(0)             CONSTANT  INIT(
       26    11464    1    'A********************** RF   =                                 ACN  =         ****
             11464        ******************');
       27    11465    1   DCL HDR_TERM        CHAR(0)             CONSTANT  INIT(
       28    11466    1         'A******** RF   =                                 ACN  =         ********');
       29    11467    1   DCL NODE_HDR_LP          CHAR(0)             CONSTANT  INIT(
       30    11468    1    'B********************** NODE =                                 SIZE =       K ****
             11468        ******************');
       31    11469    1   DCL NODE_HDR_TERM        CHAR(0)             CONSTANT  INIT(
       32    11470    1         'B******** NODE =                                 SIZE =       K ********');
       33    11471    1   DCL UTS_HDR_LP           CHAR(0)             CONSTANT  INIT(
       34    11472    1    'A********************** UTS  = MM/DD/YY  HH:MM:SS:SS                          ****
             11472        ******************');
       35    11473    1   DCL UTS_HDR_TERM         CHAR(0)             CONSTANT  INIT(
       36    11474    1         'A******** UTS  = MM/DD/YY  HH:MM:SS:SS                          ********');
       37    11475    1   DCL BIAS_START_DCB       CHAR(0)             CONSTANT  INIT(
       38    11476    1              'A  BIAS   START   SEVERITY   TCB FRAMES   DCB SLOTS');
       39    11477    1   DCL SLIB_ALIB            CHAR(0)             CONSTANT  INIT(
       40    11478    1              'ASHARED LIBRARY                 ALTERNATE SHARED LIBRARY');
       41    11479    1   DCL ROS_SEG_MES CHAR(0) CONSTANT INIT(
       42    11480    1           'B******* READ ONLY SEGMENT *******' );
       43    11481    1   DCL SIZE_OCTSIZ_PAGES CHAR(0) CONSTANT INIT(
       44    11482    1           '   SIZE    OCTSIZ      PAGES' );
       45    11483    1   DCL INSTRUCTION_SEGMENT CHAR(0) CONSTANT INIT(
       46    11484    1           'B******* INSTRUCTION SEGMENT *******' );
       47    11485    1   DCL TYPE_OCTLOC CHAR(0) CONSTANT INIT(
       48    11486    1           'A TYPE             OCTLOC  ' );
       49    11487    1   DCL DATA_SEGMENTS CHAR(0) CONSTANT INIT(
       50    11488    1           'B******* DATA SEGMENTS *******' );
       51    11489    1   DCL SEGID_TYPE CHAR(0) CONSTANT INIT(
       52    11490    1           'A SEGID            TYPE    ' );
       53    11491    1   DCL SEGID(0:5) CHAR(16) CONSTANT INIT(
       54    11492    1           'A 6006 (DS3SID)',
       55    11493    1           'A 6007 (DS4SID)',
       56    11494    1           'A 6010 (DS5SID)',
       57    11495    1           'A 6011 (DS6SID)',
       58    11496    1           'A 6012 (DS7SID)',
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:6    
       59    11497    1           'A 6013 (DS8SID)' );
       60    11498    1   DCL LINK_VERSION#(0:10/*@LINK_VERSION#*/) CHAR(3) CONSTANT INIT
       61    11499    1         ( 'A00', 'A01', 'B00', 'B01', 'B02', 'B03', 'C00' , 'D00', 'E00', 'E02', 'E03'
             11499                  ) ;
       62    11500        %E;
             11501        %LSET LISTDIR='0'B;

             11508    1   /*******************************************************************************
             11509    1   *                                                                              *
             11510    1   *                          ENTRY                                                 *
             11511    1   *                                                                              *
             11512    1   *******************************************************************************/

       63    11516    1   DCL VXA$ND          ENTRY(2);
       64    11517        %ENTRIES;
             11518    1   DCL VXE$ERROR       ENTRY(4);
             11519    1   DCL VXE$ERR         ENTRY(3);
             11520    1   DCL VXE$MERC        ENTRY;
             11521    1   DCL VXE$ERRMSG      ENTRY(3);
             11522    1   DCL VXR$READ        ENTRY( 3 );
             11523    1   DCL VXW$WRITE       ENTRY( 3 );
             11524    1   DCL VXW$WRITE_DO    ENTRY( 2 );
             11525    1   DCL VXD$B2C         ENTRY( 5 );
             11526    1   DCL VXD$C2B         ENTRY( 3 );
             11527    1   DCL VXA$GET         ENTRY( 3 );
             11528    1   DCL VXF$FREE        ENTRY( 3 );
             11529    1   DCL VXQ$SORT        ENTRY( 7 );
             11530    1   DCL VXY$YESNO       ENTRY( 1 );
       65    11532    1   DCL VXM$NODE        ENTRY;
       66    11533    1   DCL VXM$OVERLAY     ENTRY( 1 );
       67    11534        %ENTRIES_IO;
             11535    1   DCL VXF$OPEN        ENTRY(3) ALTRET;
             11536    1   DCL VXF$CLOSE       ENTRY(3);
             11537    1   DCL VXU$PREAD       ENTRY(12);
             11538    1   DCL VXK$KEY         ENTRY(4);
             11539    1   DCL VXI$READ        ENTRY(4)  ALTRET;
             11540    1   DCL VXI$WRITE       ENTRY(4)  ALTRET;
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:7    
       68    11542        %PTR;
             11543        %LSET LISTDIR='0'B;

             11550    1   /*******************************************************************************
             11551    1   *                                                                              *
             11552    1   *                          PTR                                                 *
             11553    1   *                                                                              *
             11554    1   *******************************************************************************/

       69    11558    1   DCL START$          PTR  ALIGNED   AUTO;
       70    11559        %POINTER;
             11560    1   DCL P$         PTR       ALIGNED AUTO;
             11561    1   DCL Q$         PTR       ALIGNED AUTO;
             11562    1   DCL R$         PTR       ALIGNED AUTO;
       71    11564    1   DCL NEXT$           PTR  ALIGNED   AUTO;
       72    11565    1   DCL NODE$           PTR  ALIGNED   AUTO;
       73    11566        %U;
             11567        %LSET LISTDIR='0'B;

             11574    1   /*******************************************************************************
             11575    1   *                                                                              *
             11576    1   *                          UBIN                                                 *
             11577    1   *                                                                              *
             11578    1   *******************************************************************************/

       74    11582        %INDEX;
             11583    1   DCL I          UBIN(36) ALIGNED AUTO;
             11584    1   DCL SI REDEF I SBIN WORD ALIGNED;
             11585    1   DCL J          UBIN(36) ALIGNED AUTO;
             11586    1   DCL SJ REDEF J SBIN WORD ALIGNED;
             11587    1   DCL K          UBIN(36) ALIGNED AUTO;
             11588    1   DCL SK REDEF K SBIN WORD ALIGNED;
             11589    1   DCL L          UBIN(36) ALIGNED AUTO;
             11590    1   DCL SL REDEF L    SBIN WORD ALIGNED;
       75    11592    1   DCL PAGE#           UBIN(36)  ALIGNED   AUTO;
       76    11593    1   DCL ADR             UBIN(36)  ALIGNED   AUTO;
       77    11594    1   DCL IMAGE_SIZE      SBIN(36)  ALIGNED   AUTO;
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:8    
       78    11595        /**/
       79    11596        /**/
       80    11597        /**/
       81    11598        %M_NUMBER_DCL;
             11599    1   DCL THREE$BITS(0:11)          BIT(3)    UNAL BASED;
             11600    1   DCL 1 WORK_BUF           ALIGNED   STATIC,
             11601    1         2 COMPOSITE         ALIGNED,
             11602    1           3 H                UBIN(6)   UNAL INIT( BITBIN('06'O) ),
             11603    1           3 UBN              UBIN(3)   UNAL,
             11604    1         2 CHR REDEF COMPOSITE    CHAR(1) ALIGNED;
             11605    1   DCL SIG                  BIT(1)    ALIGNED   STATIC    INIT('0'B);
             11606    1   DCL K_INDEX              UBIN(36)  ALIGNED   AUTO;
             11607    1   DCL L_INDEX              UBIN(36)  ALIGNED   AUTO;
       82    11609        %B$TREE_TABLE(HDR_NAME=VX$TREE_HEADER,NODE_NAME=VX$TREE_NODE);
             11610    1   DCL 1 VX$TREE_HEADER BASED ALIGNED,
             11611              /*K*  HDR_NAME is the Tree table header.  */
             11612    1         2 NODES UBIN HALF UNAL,
             11613                /*K*  NODES is the number of nodes in the tree table.  */
             11614    1         2 SIZE UBIN HALF UNAL,
             11615                /*K*  SIZE is the total word size of the tree table
             11616                      (HDR + NODES + TEST pool).   */
             11617    1         2 LIB$ PTR,
             11618                /*K*  LIB$ is the pointer to the name of the shared library
             11619                      currently associated.  */
             11620    1         2 PRECSIZE UBIN HALF UNAL,
             11621                /*K*  PRECSIZE  is the maximum program record size in the
             11622                      Run Unit (from the Head record).  */
             11623    1         2 MAX_LIB_DATA UBIN HALF UNAL;
             11624                /*K*  MAX_LIB_DATA is the maximum reserved in the program
             11625                      image for the shared library data.  */
             11626    1   DCL 1 VX$TREE_NODE BASED ALIGNED,
             11627              /*K*  NODE_NAME is the node specification.  */
             11628    1         2 NAME$ PTR,
             11629                /*K*  NAME$ is the pointer to the name of the node.  */
             11630    1         2 FLGS,
             11631                /*K*  FLGS are control flags used by M$OLAY.  */
             11632    1           3 NOW_IN BIT(1) UNAL,
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:9    
             11633                  /*K*  NOW_IN is set if this node is now in memory.  */
             11634    1           3 WAS_IN BIT(1) UNAL,
             11635                  /*K*  WAS_IN is set if this node was in memory.  */
             11636    1           3 * BIT(7) UNAL,
             11637                  /*K*  * is reserved for future use and must be zero.  */
             11638    1         2 AFLGS,
             11639                /*K*  AFLGS are access flags.  */
             11640    1           3 * BIT(6) UNAL,
             11641                  /*K*  * is reserved for future use and must be zero.  */
             11642    1           3 NOPATH BIT(1) UNAL,
             11643                  /*K*  NOPATH is set if this node is independently loaded
             11644                        (no backward path).  */
             11645    1           3 ENTER BIT(1) UNAL,
             11646                  /*K*  ENTER is set if ENTRY$ is valid.  */
             11647    1           3 CANCEL BIT(1) UNAL,
             11648                  /*K*  CANCEL is set if the overlay was removed by
             11649                        "CANCEL=YES".   */
             11650    1         2 BACK# SBIN HALF UNAL,
             11651                /*K*  BACK# is the backward link (parent).  */
             11652    1         2 FORWARD# SBIN HALF UNAL,
             11653                /*K*  FORWARD# is the forward link (daughter).  */
             11654    1         2 OVERLAY# SBIN HALF UNAL,
             11655                /*K*  OVERLAY# is the overlay link (same level).   */
             11656    1         2 PADDR UBIN HALF UNAL,
             11657                /*K*  PADDR is the address of procedure.  */
             11658    1         2 PSIZE UBIN HALF UNAL,
             11659                /*K*  PSIZE is the size of procedure.  */
             11660    1         2 DADDR UBIN HALF UNAL,
             11661                /*K*  DADDR is the address of data.  */
             11662    1         2 DSIZE UBIN HALF UNAL,
             11663                /*K*  DSIZE is the size of data.  */
             11664    1         2 ENTRY$ EPTR;
             11665                /*K*  ENTRY$ is the overlay entry point (see ENTER).  */
       83    11667        %B$HEAD;
             11668    1   DCL 1 B$HEAD BASED ALIGNED,
             11669    1         2 PRIV BIT(36),
             11670                /*K*  PRIV is a 36 bit field containing privilege flags.  */
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:10   
             11671    1         2 VPPGS UBIN(14) UNAL,
             11672                /*K*  VPPGS is the number of virtual pages of procedure
             11673                      required for the longest overlay path.
             11674                      (256 words/page if FEP, 1024 words/page if Host)  */
             11675    1         2 * UBIN(2) UNAL,
             11676                /*K*  * is reserved for future use and must be zero.  */
             11677    1         2 RPROC UBIN(20) UNAL,
             11678                /*K*  RPROC is the size, in words, of the procedure for the root.  */
             11679    1         2 VDPGS UBIN(14) UNAL,
             11680                /*K*  VDPGS is the number of virtual pages of data required
             11681                      for the longest overlay path.
             11682                      (256 words/page if FEP, 1024 words/page if Host)
             11683                      This includes both library and user defined data.
             11684                       */
             11685    1         2 * UBIN(2) UNAL,
             11686                /*K*  * is reserved for future use and must be zero.  */
             11687    1         2 RDATA UBIN(20) UNAL,
             11688                /*K*  RDATA is the size, in words of the data for the root.
             11689                      This includes both library and user defined data.
             11690                      If this is a host run unit, all data records will be
             11691                      included in the run unit.
             11692                      If this is a FEP run unit,
             11693                      no library data will be included in the run unit itself.
             11694                      The ISADDR field of B$RUKEY for the first user data record
             11695                      may be determined by calculating the FEP word address of
             11696                      B$HEAD.BIAS rounded to the next lower 2048 FEP word boundry.
             11697                      (2048 FEP words is the maximum size of run unit records
             11698                      for FEP run units.)  The data in this record below
             11699                      BIAS will be padded with zeros.
             11700                      The word size of data contained in the FEP run unit
             11701                      may be calculated by subtracting the ISADDR value as
             11702                      calculated for the first data record from the word
             11703                      address of the last word of user data.  The last
             11704                      word of user data is the sum of the default FPRG
             11705                      bias (%GM_ISR1_BASE - EQU is in file GM_LCP6_E) and
             11706                      the total data size (B$HEAD.RDATA).
             11707                      */
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:11   
             11708    1         2 SEV UBIN BYTE UNAL,
             11709                /*K*  SEV is the maximum severity level of the object units
             11710                      making up the run unit.  */
             11711    1         2 * UBIN(7) UNAL,
             11712                /*K*  * is reserved for future use and must be zero.  */
             11713    1         2 START UBIN(20) UNAL,
             11714                /*K*  START is the address within the instruction segment at
             11715                      which execution will start.  */
             11716    1         2 UDCBNUM UBIN HALF UNAL,
             11717                /*K*  UDCBNUM is the number of DCBs in the Read-Only segment
             11718                      as generated by LINK.   */
             11719    1         2 DCBRES UBIN HALF UNAL,
             11720                /*K*  DCBRES is the number of pointers to DCBs as supplied by
             11721                      LINK.   */
             11722    1         2 TREEDISP UBIN HALF UNAL,
             11723                /*K*  TREEDISP is the displacement in words from the start of
             11724                      the variable portion of the Read-Only Segment locating
             11725                      the tree table.   */
             11726    1         2 TCBSIZE UBIN HALF UNAL,
             11727                /*K*  TCBSIZE specifies the number of frames of the Task Control Block;
             11728                      if the size is 0, then a two frame Task Control Block will be
             11729                      built by STEP.   */
             11730    1         2 PRECSIZE UBIN HALF UNAL,
             11731                /*K*  PRECSIZ is the maximum size of any program record
             11732                      in the run unit; words if Host, double words if FEP.
             11733                      */
             11734    1         2 NRECSIZE UBIN HALF UNAL,
             11735                /*K*  NRECSIZ is the maximum size of External Name records in
             11736                      the run unit.   */
             11737    1         2 EPRECSIZE UBIN HALF UNAL,
             11738                /*K*  EPRECSIZE is the maximum size of External Procedure
             11739                      Definition Records in the run unit.   */
             11740    1         2 EDRECSIZE UBIN HALF UNAL,
             11741                /*K*  EDRECSIZE is the maximum size of External Data Definition
             11742                      Records in the run unit.    */
             11743    1         2 SDRECSIZE UBIN HALF UNAL,
             11744                /*K*  SDRECSIZE is the maximum size of External Segment
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:12   
             11745                      Definition Records in the run unit.   */
             11746    1         2 ROSIZE UBIN HALF UNAL,
             11747                /*K*  ROSIZE is the size of the Read Only Segment Record.  */
             11748    1         2 VERSION# UBIN BYTE UNAL,
             11749                /*K*  VERSION# is the LINK version number.  */
             11750    1         2 MAP_BITS_A(0:2) UNAL,
             11751                /*K*  MAP_BITS_A are used by the linker to produce MAP.  */
             11752    1           3 MULTIPLE BIT(1) UNAL,
             11753                  /*K*  MULTIPLE is set if a multiply defined symbol exists.  */
             11754    1           3 CON BIT(1) UNAL,
             11755                  /*K*  CON is set if a Constant symbol is defined.  */
             11756    1           3 PRIMARY BIT(1) UNAL,
             11757                  /*K*  PRIMARY is set if an unresolved primary reference exists.  */
             11758    1           3 SECONDARY BIT(1) UNAL,
             11759                  /*K*  SECONDARY is set if an unresolved secondary reference
             11760                        exists.  */
             11761    1         2 SECTABLESIZE UBIN(8) UNAL,
             11762                /*K*  SECTABLESIZE is the size in words of the record which
             11763                      contains the start location and size of all sections
             11764                      (for BIAS by OU for FEP)   */
             11765    1         2 NSTDINVOC BIT(1) UNAL,
             11766                /*K*  NSTDINVOC indicates that the RU will can tolerate invoking
             11767                      in nonstandard form.   */
             11768    1         2 REMOVE_ENTDEF BIT(1) UNAL,
             11769                /*K*  REMOVE_ENTDEF is set if ENTDEFs not in the transfer
             11770                      vector have been removed from the shared library.  */
             11771    1         2 REMOVE_SYMDEF BIT(1) UNAL,
             11772                /*K*  REMOVE_SYMDEF is set if SYMDEFs not in the transfer
             11773                      vector have been removed from the shared library.  */
             11774    1         2 STATS BIT(1) UNAL,
             11775                /*K*  STATS is set if Statistics are being collected on
             11776                      this processor.  */
             11777    1         2 LAUTO BIT(1) UNAL,
             11778                /*K*  LAUTO is set for a Fep run unit if user auto is to be in
             11779                a small segment, thereby freeing up a large one for other purposes. */
             11780    1         2 * BIT(2) UNAL,
             11781                /*K*  * is reserved for future use and must be zero.  */
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:13   
             11782    1         2 DATA_SEG (0:5),
             11783                /*K*  DATA_SEG defines the initialized data segment in the RU.  */
             11784    1           3 SIZ UBIN HALF UNAL,
             11785                  /*K* SIZ is the word size of the initialized data segment.  */
             11786    1           3 * UBIN(9) UNAL,
             11787                  /*K*  * is reserved for future use and must be zero.  */
             11788    1           3 PROTECTION UBIN(9) UNAL,
             11789                  /*K*  PROTECTION is the initialized data segment
             11790                        protection.   */
             11791    1         2 LOCK(0:71) BIT(1) UNAL,
             11792                /*K*  LOCK is the Lock for restricted processor.  */
             11793    1         2 FLAVOR UBIN BYTE UNAL,
             11794                /*K*  FLAVOR is the flavor of the run unit.  The RU_FLAVORS
             11795                      macro gives the legal values for FLAVOR.  */
             11796    1         2 S BIT(1) UNAL,
             11797                /*K*  S - S = 1 if the run unit is Shareable  */
             11798    1         2 LIB BIT(1) UNAL,
             11799                /*K*  LIB - LIB = 1 if the run unit is a Shared Library  */
             11800    1         2 ASL BIT(1) UNAL,
             11801                /*K*  ASL - ASL = 1 if the run unit is an Alternate Shared
             11802                      Library.   */
             11803    1         2 CMDPROC BIT(1) UNAL,
             11804                /*K*  CMDPROC - CMDPROC = 1 is the run unit is a Command Processor. */
             11805    1         2 DEBUGGER BIT(1) UNAL,
             11806                /*K*  DEBUGGER - DEBUGGER = 1 if the run unit is a Debugger. */
             11807    1         2 OVRL BIT(1) UNAL,
             11808                /*K*  OVRL -  OVRL = 1 if the run unit is overlaid.   */
             11809    1         2 PROCACC BIT(1) UNAL,
             11810                /*K*  PROCACC - If PROCACC = 1,  if the run unit resides in
             11811                      :SYS, it should be charged as processor, not user.  */
             11812    1         2 NOCHGPMEM BIT(1) UNAL,
             11813                /*K*  NOCHGPMEM - If NOCHGPMEM = 1, if the run unit resides in
             11814                      :SYS, the user should not be charged for procedures.  */
             11815    1         2 PROCSURCHG BIT(1) UNAL,
             11816                /*K*  PROCSURCHG - If PROCSURCHG = 1, Surcharge accountings
             11817                      should be applied.  */
             11818    1         2 RESTPROC BIT(1) UNAL,
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:14   
             11819                /*K*  RESTPROC - If RESTPROC = 1, this is a restricted
             11820                      processor and should be verified against the user's key.  */
             11821    1         2 STRONG_LOCK BIT(1) UNAL,
             11822                /*K*  STRONG_LOCK - If STRONG_LOCK = 1, the restricted
             11823                      processor has a strong lock.  If STRONG_LOCK = 0, the
             11824                      restricted processor has a weak lock.   */
             11825    1         2 * UBIN(16) UNAL,
             11826                /*K*  * is reserved for future use and must be zero. */
             11827    1         2 PSEUDO_COUNT UBIN BYTE UNAL,
             11828                /*K*  PSEUDO_COUNT - If PSEUDO_COUNT > 0, then a pseudo resource
             11829                      is required to execute this run-unit.  */
             11830    1         2 * UBIN(7) UNAL,
             11831                /*K*  * is reserved for future use and must be zero.  */
             11832    1         2 BIAS UBIN(20) UNAL,
             11833                /*K*  BIAS is the address within the instruction segment of
             11834                      the beginning of the root data.  */
             11835    1         2 PSEUDO_TEXT CHAR(8),
             11836                /*K*  PSEUDO_TEXT - contains the text of the pseudo resource
             11837                      to acquire when the run-unit is executed.  */
             11838    1         2 * (0:1) UBIN WORD UNAL,
             11839                /*K*  * is reserved for future use and must be zero.  */
             11840    1         2 LIBNAME,
             11841                /*K* LIBNAME gives the name, if any, of the shared library to
             11842                     be associated.  Each name resides in a fixed 8-word field.
             11843                     The first byte contains the character count of the name
             11844                     followed by the name itself.   */
             11845    1           3 CNT UBIN BYTE UNAL,
             11846                  /*K* CNT contains the character count of the name of the
             11847                       shared library.  */
             11848    1           3 TXT CHAR(31) UNAL,
             11849                  /*K*  TXT contains the name itself of the shared library.  */
             11850    1         2 ASLNAME,
             11851                /*K*  ASLNAME gives the name, if any, of the alternate shared
             11852                      library to be associated.  Each name resides in a fixed
             11853                      8-word field.  The first byte contains the character
             11854                      count of the name followed by the name itself.   */
             11855    1           3 CNT UBIN BYTE UNAL,
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:15   
             11856                  /*K*  CNT contains the character count of the name of
             11857                        the alternate shared library.  */
             11858    1           3 TXT CHAR(31) UNAL;
             11859                  /*K*  TXT contains the name itself of the alternate
             11860                        shared library.  */
             11861        %IF '1'B;
             11862        /* %EQU's for data segment protection type */
             11863        %EQU DS_READONLY#=256;
             11864        %EQU DS_READWRITE#=384;
             11865        %ENDIF;
       84    11867        %S;
             11868        %LSET LISTDIR='0'B;

             11875    1   /*******************************************************************************
             11876    1   *                                                                              *
             11877    1   *                          SBIN                                                 *
             11878    1   *                                                                              *
             11879    1   *******************************************************************************/

       85    11883    1   DCL DIFF            SBIN WORD ALIGNED   AUTO;
       86    11884    1   DCL START(0:1/*@PROC*/)  SBIN WORD ALIGNED   AUTO;
       87    11885    1   DCL SIZE (0:1/*@PROC*/)  SBIN WORD ALIGNED   AUTO;
       88    11886    1   DCL ROS_PAGES       SBIN WORD ALIGNED   AUTO;
       89    11887    1   DCL SEG_PAGES       SBIN WORD ALIGNED   AUTO;
       90    11888    1   DCL PAGES           SBIN WORD ALIGNED   AUTO;
       91    11889    1   DCL TOTAL_PROGRAM_SIZE SBIN WORD ALIGNED AUTO;
       92    11890    1   DCL TOTAL_NUMBER_NODES SBIN WORD ALIGNED AUTO ;
       93    11891        /**/
       94    11892        /**/
       95    11893        %MOVE_NAME_DCL;
             11894    1   DCL MOVE_SIZE           UBIN  ALIGNED   AUTO;
             11895    1   DCL T$VAR             CHAR(MOVE_SIZE)   BASED;
             11896    1   DCL SOURCE$              PTR  ALIGNED   AUTO;
       96    11898        /**/
       97    11899        /**/
       98    11900        %FILE;
             11901    1   DCL 1 F$NAME_                 BASED,
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:16   
             11902    1         2 COUNT             UBIN( 9) UNAL,
             11903    1         2 CHARS             CHAR( F$NAME_.COUNT ) UNAL;
             11904    1   DCL F$ACCT_         CHAR(8/*@F_ACCT_SIZEC*/) BASED;
             11905    1   DCL F$ACCT_A(0:7/*@F_ACCT_SIZEC1*/)     CHAR(1)   BASED;
             11906    1   DCL F$PASS_         CHAR(8/*@F_PASS_SIZEC*/) BASED;
             11907    1   DCL F$PASS_A(0:7/*@F_PASS_SIZEC1*/)     CHAR(1)   BASED;
       99    11909        /**/
      100    11910        /**/
      101    11911        %PLIST;
      102    11912        %F$DCB;
      103    11969        /**/
      104    11970        /**/
      105    11971        /**/
      106    11972        %FPT_WRITE( FPTN=VX_MAP_LO_FPT_WRITE,
      107    11973                   DCB=M$LO,
      108    11974                   BUF=VX_MBUF,
      109    11975                   VFC=YES,
      110    11976                   STCLASS="STATIC SYMDEF");
      111    12007        /**/
      112    12008        %FPT_WRITE( FPTN=VX_MAP_LIT_LO_FPT_WRITE,
      113    12009                   DCB=M$LO,
      114    12010                   BUF=VX_MBUF,
      115    12011                   VFC=YES,
      116    12012                   STCLASS="STATIC SYMDEF");
      117    12043        /**/
      118    12044        /**/
      119    12045        /**/
      120    12046    1   DCL M$LO            DCB;
      121    12047        %EJECT;
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:17   
      122    12048        /*
      123    12049              Variables for map(ping)
      124    12050        */
      125    12051    1   DCL VX_MAP$               PTR  ALIGNED   STATIC    SYMDEF    INIT(ADDR(NIL));
      126    12052    1   DCL VX_MAP_ROS$           PTR  ALIGNED   STATIC    SYMDEF    INIT(ADDR(NIL));
      127    12053    1   DCL VX_MAP_AREA$          PTR  ALIGNED   STATIC    SYMDEF    INIT(ADDR(NIL));
      128    12054    1   DCL VX_MAP_TREE_START$    PTR  ALIGNED   STATIC    SYMDEF    INIT(ADDR(NIL));
      129    12055    1   DCL VX_MAP_AREA_SIZE      UBIN(36) ALIGNED STATIC  SYMDEF    INIT(0);
      130    12056    1   DCL VX_MAP_NUM            SBIN WORD ALIGNED   STATIC    SYMDEF    INIT(0);
      131    12057    1   DCL VX_MAP_REC_SIZE_A(0:9)   UBIN(36)  ALIGNED   STATIC    SYMDEF INIT(0*0);
      132    12058    1   DCL VX_CTAB               UBIN(36) ALIGNED STATIC  SYMDEF    INIT(0);
      133    12059    1   DCL VX_MAP_TABS_A(0:4)    UBIN(36)  ALIGNED   CONSTANT    SYMDEF  INIT(
      134    12060    1              17, 47, 77, 107, 99999999 );
      135    12061    1   DCL VX_MAP_WIDTH          SBIN WORD ALIGNED   STATIC    SYMDEF    INIT(0);
      136    12062    1   DCL VX_MAP_WIDTH_HDR      SBIN WORD ALIGNED   STATIC    SYMDEF    INIT(0);
      137    12063    1   DCL VX_MAX_CTAB           UBIN(36)  ALIGNED   STATIC    SYMDEF    INIT(0);
      138    12064    1   DCL 1 VX_MBUF ALIGNED STATIC SYMDEF,
      139    12065    1         2 CHARS CHAR(132) UNAL INIT(' '),
      140    12066    1         2 CHARS_A(0:131) REDEF CHARS CHAR(1) UNAL,
      141    12067    1         2 LIT_BUF REDEF CHARS UNAL,
      142    12068    1           3 VFC CHAR(1) UNAL,
      143    12069    1           3 CHARS CHAR(131) UNAL;
      144    12070    1   DCL VX_HDR_FIELD1              UBIN(36)  ALIGNED   STATIC    SYMDEF INIT(25);
      145    12071    1   DCL VX_HDR_FIELD2              UBIN(36)  ALIGNED   STATIC    SYMDEF INIT(64);
      146    12072    1   DCL 1 VX_MAP_HDR0 ALIGNED STATIC SYMDEF,
      147    12073    1         2 CHARS CHAR(132) UNAL INIT(' '),
      148    12074    1         2 CHARS_A(0:131) REDEF CHARS CHAR(1) UNAL,
      149    12075    1         2 LIT_BUF REDEF CHARS UNAL,
      150    12076    1           3 VFC CHAR(1) UNAL,
      151    12077    1           3 CHARS CHAR(131) UNAL;
      152    12078    1   DCL 1 VX_MAP_HDR ALIGNED STATIC SYMDEF,
      153    12079    1         2 CHARS CHAR(132) UNAL INIT(' '),
      154    12080    1         2 CHARS_A(0:131) REDEF CHARS CHAR(1) UNAL,
      155    12081    1         2 LIT_BUF REDEF CHARS UNAL,
      156    12082    1           3 VFC CHAR(1) UNAL,
      157    12083    1           3 CHARS CHAR(131) UNAL;
      158    12084    1   DCL 1 VX_MAP_HDR1 ALIGNED STATIC SYMDEF,
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:18   
      159    12085    1         2 CHARS CHAR(132) UNAL INIT(' '),
      160    12086    1         2 CHARS_A(0:131) REDEF CHARS CHAR(1) UNAL,
      161    12087    1         2 LIT_BUF REDEF CHARS UNAL,
      162    12088    1           3 VFC CHAR(1) UNAL,
      163    12089    1           3 CHARS CHAR(131) UNAL;
      164    12090    1   DCL 1 VX_MAP_UTS_HDR ALIGNED STATIC SYMDEF,
      165    12091    1         2 CHARS CHAR(132) UNAL INIT(' '),
      166    12092    1         2 CHARS_A(0:131) REDEF CHARS CHAR(1) UNAL,
      167    12093    1         2 LIT_BUF REDEF CHARS UNAL,
      168    12094    1           3 VFC CHAR(1) UNAL,
      169    12095    1           3 CHARS CHAR(131) UNAL;
      170    12096        /**/
      171    12097        /**/
      172    12098        %FPT_XCON( FPTN=FPT_XCON,
      173    12099                   UENTRY=VXX$CON,
      174    12100                   STCLASS=CONSTANT);
      175    12114
      176    12115        %FPT_TIME( DEST=LOCAL, SOURCE=UTS, TSTAMP="BIRTH_REC.CREATE_UTS" );
      177    12134        %B$RUBIRTH( NAME=BIRTH_REC, STCLASS=STATIC );
      178    12143    1   DCL VXX$CON         ENTRY     ASYNC;
      179    12144        /**/
      180    12145        %PLIST;
      181    12146        %SET LISTSUB='0'B;
      182    12147        %EJECT;
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:19   
      183    12148    1         IF VX_ONLINE = @YES THEN CALL M$XCON(FPT_XCON);
      184    12149    1         IF VX_COMMAND > 0 THEN VX_RU_HEAD_BUF = VX_RU_HEAD;
      185    12150    2         ELSE DO;
      186    12151    2             VX_R_KEY_BUF.FORM0.COUNT = SIZEC( VX_R_KEY_HEAD );
      187    12152    2             VX_R_KEY_BUF.FORM0.CHARS = VX_R_KEY_HEAD;
      188    12153    2             CALL VXI$READ(      @RF,
      189    12154    2                     ADDR( VX_RU_HEAD_BUF ),
      190    12155    2                     SIZEW( VX_RU_HEAD_BUF ),
      191    12156    2                     @RF )          ALTRET( NO_HEAD );
      192    12157    2            END;
      193    12158    1         ROS_PAGES = ( VX_RU_HEAD_BUF.ROSIZE + @PAGE_SIZE1 ) / @PAGE_SIZE;
      194    12159    1         SEG_PAGES = 0;
      195    12160    2         DO I = 0 TO 5;
      196    12161    2             VX_SEG_EPAGE#(I) = ( VX_RU_HEAD_BUF.DATA_SEG.SIZ(I) + @PAGE_SIZE1 ) /
             12161                      @PAGE_SIZE;
      197    12162    2             SEG_PAGES = SEG_PAGES + VX_SEG_EPAGE#(I);
      198    12163    2            END;
      199    12164    1         TOTAL_PROGRAM_SIZE = ROS_PAGES + SEG_PAGES + VX_RU_HEAD_BUF.VPPGS
      200    12165    1                 + VX_RU_HEAD_BUF.VDPGS;
      201    12166    1         IF VX_O.OPT.MAP <= 0
      202    12167    1                 AND
      203    12168    1                 VX_ERR_SEV <= 0
      204    12169    1                 AND VX_ERRORS.UNSAT.UNSAT_SECONDARY = 0
      205    12170    2         THEN DO;
      206    12171        /*E*  ERROR: VXM-E$TOTAL_PROGRAM_SIZE-0
      207    12172              MESSAGE: Total program size = %U1K.
      208    12173              DESCRIPTION: Self-explantory.
      209    12174        */
      210    12175                  %NUMBER( NUM1=TOTAL_PROGRAM_SIZE );
      211    12192                  %SCREAM( ERR#=E$TOTAL_PROGRAM_SIZE, LEVEL=@E$I_VX, MID="'M'" );
      212    12195    3             IF VX_RU_HEAD.OVRL THEN DO ;
      213    12196    3                 TOTAL_NUMBER_NODES = VX_NODE_NUMBER + 1 ;
      214    12197                      %NUMBER ( NUM1=TOTAL_NUMBER_NODES ) ;
      215    12214                      %SCREAM ( ERR#=E$TOTAL_NUMBER_NODES,
      216    12215                      LEVEL=@E$I_VX,
      217    12216                      MID="'M'" ) ;
      218    12219    3                END ;
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:20   
      219    12220    2             GOTO DONE;
      220    12221    2            END;
      221    12222    1         IMAGE_SIZE = VX_RU_HEAD_BUF.PRECSIZE;
      222    12223    1         VX_MAP_NUM = 0;
      223    12224    1         CALL VXA$ND( VX_MAP$, ADDR(NIL) ); /* Get a node */
      224    12225    1         VX_MAP_AREA_SIZE =
      225    12226    1                 VX_RU_HEAD_BUF.NRECSIZE
      226    12227    1                 +
      227    12228    1                 VX_RU_HEAD_BUF.EPRECSIZE
      228    12229    1                 +
      229    12230    1                 VX_RU_HEAD_BUF.EDRECSIZE
      230    12231    1                 +
      231    12232    1                 VX_RU_HEAD_BUF.SDRECSIZE;
      232    12233
      233    12234    1         VX_MAP_AREA_SIZE = VX_MAP_AREA_SIZE + VX_MAP_AREA_SIZE; /* Double for refs */
      234    12235              %ALLOCATE(
      235    12236              PTR$=VX_MAP_AREA$,
      236    12237              TYPE=@MAP_DS,
      237    12238              SIZE=VX_MAP_AREA_SIZE);
      238    12245    1         VX_MAP_REC_SIZE_A( 1 ) = VX_RU_HEAD_BUF.NRECSIZE; /* Set size */
      239    12246    1         VX_MAP_REC_SIZE_A( 4 ) = VX_RU_HEAD_BUF.EPRECSIZE; /* Set size */
      240    12247    1         VX_MAP_REC_SIZE_A( 6 ) = VX_RU_HEAD_BUF.EDRECSIZE; /* Set size */
      241    12248    1         VX_MAP_REC_SIZE_A( 8 ) = VX_RU_HEAD_BUF.SDRECSIZE; /* Set size */
      242    12249        /**/
      243    12250    1         IF M$LO$ -> F$DCB.ASN# ~= 3 THEN VX_MAP_WIDTH = 49;
      244    12251    1         ELSE VX_MAP_WIDTH = M$LO$ -> F$DCB.WIDTH# - 31;
      245    12252    1         IF VX_MAP_WIDTH < 41 THEN VX_MAP_WIDTH = 41;
      246    12253    1         VX_MAX_CTAB = 0;
      247    12254    2         DO WHILE( VX_MAP_TABS_A(VX_MAX_CTAB) < VX_MAP_WIDTH );
      248    12255    2             VX_MAX_CTAB = VX_MAX_CTAB + 1;
      249    12256    2            END;                           /* Do while */
      250    12257    1         IF VX_MAX_CTAB > 3 THEN VX_MAX_CTAB = 3;
      251    12258    1         VX_MAP_WIDTH = VX_MAP_WIDTH + 31;
      252    12259        /**/
      253    12260    2         IF VX_MAX_CTAB = 3 THEN DO;
      254    12261                                                /* Width is 133 columns */
      255    12262    2             VX_HDR_FIELD1 = 23;           /* *-*+2 */
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:21   
      256    12263    2             VX_MAP_HDR0.CHARS        = FIRST_LP;
      257    12264    2             VX_MAP_HDR.CHARS         = HDR_LP;
      258    12265    2             VX_MAP_HDR1.CHARS        = NODE_HDR_LP;
      259    12266    2             VX_MAP_UTS_HDR.CHARS     = UTS_HDR_LP;
      260    12267    2             VX_MAP_WIDTH_HDR         = SIZEV( FIRST_LP );
      261    12268    2             J = 43;
      262    12269    2            END;
      263    12270    2         ELSE DO;
      264    12271                                                /* Width is 80 columns */
      265    12272    2             VX_HDR_FIELD1 = 9;            /* *-*+2 */
      266    12273    2             VX_MAP_HDR0.CHARS        = FIRST_TERM;
      267    12274    2             VX_MAP_HDR.CHARS         = HDR_TERM;
      268    12275    2             VX_MAP_HDR1.CHARS        = NODE_HDR_TERM;
      269    12276    2             VX_MAP_UTS_HDR.CHARS     = UTS_HDR_TERM;
      270    12277    2             VX_MAP_WIDTH_HDR         = SIZEV( FIRST_TERM );
      271    12278    2             J = 29;
      272    12279    2            END;
      273    12280    1         VX_HDR_FIELD2 = VX_HDR_FIELD1 + 39; /* Compute index to second field */
      274    12281    2         IF VX_O.OPT.MAP >= 0 THEN DO;
      275    12282    2             I = VX_RU_HEAD_BUF.VERSION#;
      276    12283    2             CALL INSERT(  VX_MAP_HDR0.CHARS, J, 3, LINK_VERSION#(I) );
      277    12284                                                /* Move rf name in */
      278    12285    2             CALL INSERT( VX_MAP_HDR.CHARS, VX_HDR_FIELD1+8, M$RF$->F$DCB.NAME#.L,
             12285                      M$RF$->F$DCB.NAME#.C );
      279    12286                                                /* Move account in */
      280    12287    2             CALL INSERT( VX_MAP_HDR.CHARS, VX_HDR_FIELD2+8, @F_ACCT_SIZEC, M$RF$->
             12287                      F$DCB.ACCT# );
      281    12288    2             VX_R_KEY_BUF.FORM0.COUNT = SIZEC( VX_R_KEY_BIRTH );
      282    12289    2             VX_R_KEY_BUF.FORM0.CHARS = VX_R_KEY_BIRTH;
      283    12290    2             CALL VXI$READ( @RF, ADDR(BIRTH_REC), SIZEW(BIRTH_REC), @RF ) ALTRET(
             12290                      NO_BIRTH_REC);
      284    12291    2             FPT_TIME.DATE_ = VECTOR(SUBSTR(VX_MAP_UTS_HDR.CHARS, VX_HDR_FIELD1+8, 8));
      285    12292    2             FPT_TIME.TIME_ = VECTOR( SUBSTR(VX_MAP_UTS_HDR.CHARS, VX_HDR_FIELD1+18, 11
             12292                      ));
      286    12293    2             FPT_TIME.DAY_  = VECTOR( SUBSTR(VX_MAP_UTS_HDR.CHARS, VX_HDR_FIELD1+31, 3)
             12293                      );
      287    12294    2             CALL M$TIME( FPT_TIME );
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:22   
      288    12295    2            END;                           /* If VX_O.OPT.MAP >= 0 then do; */
      289    12296    2         ELSE DO;
      290    12297    2             VX_MAP_HDR1.LIT_BUF.VFC  = 'r';
      291    12298    2            END;                           /* Else do */
      292    12299    2         IF VX_RU_HEAD_BUF.ROSIZE ~= 0 THEN DO;
      293    12300    2             PAGE# = VX_RU_HEAD_BUF.TREEDISP / IMAGE_SIZE;
      294    12301    2             ADR = PAGE# * IMAGE_SIZE;
      295    12302                  %ALLOCATE(
      296    12303                  PTR$=VX_MAP_ROS$,
      297    12304                  TYPE=@MAP_ROS_DS,
      298    12305                  SIZE=IMAGE_SIZE);
      299    12312    2             CALL VXK$KEY( @RF, 30, 0, ADR );
      300    12313    2             CALL VXI$READ( @RF, VX_MAP_ROS$, IMAGE_SIZE, @RF )    ALTRET( IO_ERROR );
      301    12314    2             START$ = PINCRW( VX_MAP_ROS$, VX_RU_HEAD_BUF.TREEDISP - ADR );
      302    12315    2             DIFF = VX_RU_HEAD_BUF.TREEDISP + START$ -> VX$TREE_HEADER.SIZE
      303    12316    2                     - ( ADR + VX_IO_SIZEW );
      304    12317    2             NEXT$ = VX_MAP_ROS$;
      305    12318    3             DO WHILE( DIFF > 0 );
      306    12319    3                 NEXT$ = PINCRW( NEXT$, VX_IO_SIZEW );
      307    12320    3                 ADR   = ADR + VX_IO_SIZEW;
      308    12321                      %ALLOCATE(
      309    12322                      PTR$=Q$,
      310    12323                      TYPE=@MAP_ROS_DS,
      311    12324                      SIZE=VX_IO_SIZEW);
      312    12331    3                 CALL VXK$KEY( @RF, 30, 0, ADR );
      313    12332    3                 CALL VXI$READ( @RF, NEXT$, IMAGE_SIZE, @RF )  ALTRET( IO_ERROR );
      314    12333    3                 DIFF = DIFF - VX_IO_SIZEW;
      315    12334    3                END;
      316    12335    2             VX_MAP_TREE_START$ = START$;
      317    12336    2             START$ = PINCRW( START$,  SIZEW( VX$TREE_HEADER ) );
      318    12337        /*
      319    12338                          Print allocation summary
      320    12339        */
      321    12340    2             CALL ALLOCATION_SUMMARY( START$ );
      322    12341        /*
      323    12342                          Print overlay summary
      324    12343        */
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:23   
      325    12344    2             IF  (START$ -> VX$TREE_NODE.FORWARD# > 0)  AND  (VX_O.OPT.MAP  >= 0)
      326    12345    2             THEN CALL VXM$OVERLAY( START$ );
      327    12346        /*
      328    12347                          Print map
      329    12348        */
      330    12349    2             CALL INSERT( VX_MAP_HDR0.CHARS, VX_HDR_FIELD1+34, 20, ' ' );
      331    12350    2             VX_MAP_NUM = 0;
      332    12351    2             VX_CURR$ = START$;
      333    12352    2   NEXT:
      334    12353    2             CALL VXM$NODE;
      335    12354    2             VX_MAP_NUM = VX_CURR$ -> VX$TREE_NODE.FORWARD#;
      336    12355    3             IF VX_MAP_NUM > 0 THEN DO;
      337    12356    3                 VX_CURR$ = PINCRW( START$, VX_MAP_NUM * SIZEW( VX$TREE_NODE) );
      338    12357    3                END;
      339    12358    3             ELSE DO;
      340    12359    3   CLIMB:
      341    12360    3                 VX_MAP_NUM = VX_CURR$ -> VX$TREE_NODE.OVERLAY#;
      342    12361    4                 IF VX_MAP_NUM > 0 THEN DO;
      343    12362    4                     VX_CURR$ = PINCRW( START$, VX_MAP_NUM * SIZEW( VX$TREE_NODE ) );
      344    12363    4                    END;
      345    12364    4                 ELSE DO;
      346    12365    4                     VX_MAP_NUM = VX_CURR$ -> VX$TREE_NODE.BACK#;
      347    12366    4                     IF VX_MAP_NUM <=0 THEN GOTO DONE;
      348    12367    4                     VX_CURR$ = PINCRW( START$, VX_MAP_NUM * SIZEW( VX$TREE_NODE) );
      349    12368    4                     GOTO CLIMB;
      350    12369    4                    END;
      351    12370    3                END;
      352    12371    2             GOTO NEXT;
      353    12372    2            END;                       /* If VX_RU_HEAD_BUF.ROS_SIZE ~= 0 ... */
      354    12373    2         ELSE DO;                          /* No read only segment */
      355    12374    2             L =
      356    12375                          %TEXTC_SIZEW( CNT="VX_OK.FILE.RFNAME.COUNT");
      357    12378    2             ;
      358    12379    2             L = L + SIZEW( VX$TREE_HEADER) + SIZEW( VX$TREE_NODE );
      359    12380                  %ALLOCATE(
      360    12381                  PTR$=VX_MAP_TREE_START$,
      361    12382                  TYPE=@GDP,
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:24   
      362    12383                  SIZE=L);
      363    12390    2             VX_CURR$ = PINCRW( VX_MAP_TREE_START$, SIZEW( VX$TREE_HEADER ) );
      364    12391    2             VX_CURR$ -> VX$TREE_NODE = '0'B;
      365    12392    2             P$ = PINCRW( VX_CURR$, SIZEW( VX$TREE_NODE ) );
      366    12393    2             ADDR( VX_CURR$ -> VX$TREE_NODE.NAME$ ) -> VX$HALF_A(0) =
      367    12394    2                     POFFW( P$, VX_MAP_TREE_START$ );
      368    12395    2             VX_CURR$ -> VX$TREE_NODE.DADDR = VX_RU_HEAD_BUF.BIAS;
      369    12396    2             VX_CURR$ -> VX$TREE_NODE.DSIZE = VX_RU_HEAD_BUF.RDATA;
      370    12397    2             VX_CURR$ -> VX$TREE_NODE.PADDR =
      371    12398    2                     ( VX_RU_HEAD_BUF.BIAS+VX_RU_HEAD_BUF.RDATA+IMAGE_SIZE-1)/
             12398                              IMAGE_SIZE * IMAGE_SIZE;
      372    12399    2             VX_CURR$ -> VX$TREE_NODE.PSIZE = VX_RU_HEAD_BUF.RPROC;
      373    12400    2             CALL INDEX(L,'.',ADDR(VX_OK.FILE.RFNAME)->T$C.CHARS) ALTRET(NOT_FOUND);
      374    12401    2   SET_COUNT:
      375    12402    2             P$ -> T$C.COUNT = L;
      376    12403    2             P$ -> T$C.CHARS = VX_OK.FILE.RFNAME.CHARS;
      377    12404    2             CALL ALLOCATION_SUMMARY( VX_CURR$ );
      378    12405    2             CALL INSERT( VX_MAP_HDR0.CHARS, VX_HDR_FIELD1+34, 20, ' ' );
      379    12406    2             CALL VXM$NODE;
      380    12407    2            END;
      381    12408    1   DONE:
      382    12409    1         RETURN;
      383    12410    1   NOT_FOUND:
      384    12411    1         L = VX_OK.FILE.RFNAME.COUNT;
      385    12412    1         GOTO SET_COUNT;
      386    12413        %EJECT;
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:25   
      387    12414    1   NO_HEAD:
      388    12415        /*E*  ERROR: VXM-E$MAP_NO_HEAD_VX-0
      389    12416              MESSAGE: Unable to read head record for map.
      390    12417              DESCRIPTION: Self-explanatory.
      391    12418        */
      392    12419              %SCREAM(
      393    12420              ERR#=E$MAP_NO_HEAD_VX,
      394    12421              MID="'M'",
      395    12422              LEVEL=@E$F_D_VX);
      396    12425    2         DO WHILE( '0'B );
      397    12426    2   NO_BIRTH_REC:
      398    12427        /*E*  ERROR: VXM-E$MAP_NO_BIRTH_VX-0
      399    12428              MESSAGE: I/O error while attempting BIRTH record read for map.
      400    12429              DESCRIPTION: Self-explanatory.
      401    12430        */
      402    12431                  %SCREAM( ERR#=E$MAP_NO_BIRTH_VX, LEVEL=@E$F_D_VX, MID="'M'" );
      403    12434    2            END;
      404    12435    1   MAP_IO_ERROR: ;
      405    12436    1   DO_MERC:
      406    12437    1         CALL M$MERC                             ALTRET(MERC_ERROR);
      407    12438              %ERROR_IT;
      408    12441    1   MERC_ERROR:
      409    12442    1         CALL VXE$MERC;
      410    12443    1   IO_ERROR:
      411    12444        /*E*  ERROR: VXM-E$MAP_ROS_IO_ERROR_VX-0
      412    12445              MESSAGE: I/O error while attempting ROS record read for map.
      413    12446              DESCRIPTION: Self-explanatory.
      414    12447        */
      415    12448              %SCREAM(
      416    12449              ERR#=E$MAP_ROS_IO_ERROR_VX,
      417    12450              MID="'M'",
      418    12451              LEVEL=@E$F_D_VX);
      419    12454    1         GOTO DO_MERC;
      420    12455        %EJECT;
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:26   
      421    12456    1   ALLOCATION_SUMMARY: PROC( START$ );
      422    12457
      423    12458
      424    12459    2   DCL START$            PTR;
      425    12460
      426    12461        /*
      427    12462                          Print allocation summary
      428    12463        */
      429    12464    2         VX_MAP_LO_FPT_WRITE.BUF_.BOUND = VX_MAP_WIDTH_HDR;
      430    12465    3         IF VX_O.OPT.MAP >= 0 THEN DO;
      431    12466    3             VX_MAP_LO_FPT_WRITE.BUF_.BUF$ = ADDR( VX_MAP_HDR0 );
      432    12467    3             CALL M$WRITE( VX_MAP_LO_FPT_WRITE)       ALTRET(MAP_IO_ERROR);
      433    12468    3             VX_MAP_LO_FPT_WRITE.BUF_.BUF$ = ADDR( VX_MAP_HDR );
      434    12469    3             CALL M$WRITE( VX_MAP_LO_FPT_WRITE)       ALTRET(MAP_IO_ERROR);
      435    12470    3             VX_MAP_LO_FPT_WRITE.BUF_.BUF$ = ADDR( VX_MAP_UTS_HDR );
      436    12471    3             CALL M$WRITE( VX_MAP_LO_FPT_WRITE)       ALTRET(MAP_IO_ERROR);
      437    12472    3             VX_MAP_LO_FPT_WRITE.BUF_.BUF$ = ADDR( VX_MBUF );
      438    12473    3             VX_MAP_LO_FPT_WRITE.BUF_.BOUND = VX_MAP_WIDTH;
      439    12474    3             VX_MBUF.CHARS = 'A';
      440    12475                  %M_WRITE( CLEAR=" ", ZERO=" " );
      441    12484                  %WR_LIT( MES1="BIAS_START_DCB" );
      442    12494    3             VX_MBUF.CHARS = 'B';
      443    12495    3             L=VX_RU_HEAD_BUF.BIAS;
      444    12496    3             CALL VXD$B2C( VX_MBUF.CHARS_A, 1, 6, L, 8 );
      445    12497    3             L=VX_RU_HEAD_BUF.START;
      446    12498    3             CALL VXD$B2C( VX_MBUF.CHARS_A, 9, 6, L, 8 );
      447    12499    3             L = VX_RU_HEAD_BUF.SEV;
      448    12500    3             CALL VXD$B2C( VX_MBUF.CHARS_A, 20, 6, L, 10 );
      449    12501    3             L=VX_RU_HEAD_BUF.TCBSIZE;
      450    12502    3             CALL VXD$B2C( VX_MBUF.CHARS_A, 33, 6, L, 10 );
      451    12503    3             L=VX_RU_HEAD_BUF.DCBRES;
      452    12504    3             CALL VXD$B2C( VX_MBUF.CHARS_A, 45, 6, L, 10 );
      453    12505                  %M_WRITE;
      454    12514    3             IF VX_RU_HEAD_BUF.LIBNAME.CNT ~= 0
      455    12515    3                     OR
      456    12516    4                     VX_RU_HEAD_BUF.ASLNAME.CNT ~= 0 THEN DO;
      457    12517                      %WR_LIT( MES1=SLIB_ALIB );
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:27   
      458    12527    4                 VX_MBUF.CHARS = 'B';
      459    12528    5                 IF VX_RU_HEAD_BUF.LIBNAME.CNT ~= 0 THEN DO;
      460    12529    5                     CALL INSERT(VX_MBUF.CHARS, 1, VX_RU_HEAD_BUF.LIBNAME.CNT,
      461    12530    5                             VX_RU_HEAD_BUF.LIBNAME.TXT );
      462    12531    5                    END;
      463    12532    5                 IF VX_RU_HEAD_BUF.ASLNAME.CNT ~= 0 THEN DO;
      464    12533    5                     CALL INSERT(VX_MBUF.CHARS, 32, VX_RU_HEAD_BUF.ASLNAME.CNT,
      465    12534    5                             VX_RU_HEAD_BUF.ASLNAME.TXT );
      466    12535    5                    END;
      467    12536                      %M_WRITE;
      468    12545    4                END;
      469    12546    4             IF ROS_PAGES > 0 THEN DO;
      470    12547                      %WR_LIT( MES1=ROS_SEG_MES );
      471    12557    4                 CALL CONCAT( VX_MBUF.CHARS, 'A', SIZE_OCTSIZ_PAGES );
      472    12558                      %M_WRITE( CLEAR="VX_MBUF.CHARS= 'B';" );
      473    12567    4                 L = VX_RU_HEAD_BUF.ROSIZE;
      474    12568    4                 CALL VXD$B2C( VX_MBUF.CHARS, 2, 6, L, 10 );
      475    12569    4                 CALL VXD$B2C( VX_MBUF.CHARS, 12, 6, L, 8 );
      476    12570    4                 CALL VXD$B2C( VX_MBUF.CHARS, 23, 6, ROS_PAGES, 10 );
      477    12571                      %M_WRITE;
      478    12580    4                END;
      479    12581    3             START(@DATA) = START$ -> VX$TREE_NODE.DADDR;
      480    12582    3             START(@PROC) = START$ -> VX$TREE_NODE.PADDR;
      481    12583    4             IF START$ -> VX$TREE_NODE.FORWARD# <= 0 THEN DO;
      482    12584    4                 SIZE(@DATA) = START$ -> VX$TREE_NODE.DSIZE;
      483    12585    4                 SIZE(@PROC) = START$ -> VX$TREE_NODE.PSIZE;
      484    12586    4                END;
      485    12587    4             ELSE DO;                      /* Find size of longest path */
      486    12588    4                 NODE$ = START$;
      487    12589    4                 SIZE(@DATA) = 0;
      488    12590    4                 SIZE(@PROC) = 0;
      489    12591    5                 DO WHILE( '1'B );
      490    12592    5                     VX_MAP_NUM = NODE$ -> VX$TREE_NODE.DADDR + NODE$ -> VX$TREE_NODE.
             12592                              DSIZE;
      491    12593    5                     IF VX_MAP_NUM > SIZE(@DATA) THEN SIZE(@DATA) = VX_MAP_NUM;
      492    12594    5                     VX_MAP_NUM = NODE$ -> VX$TREE_NODE.PADDR + NODE$ -> VX$TREE_NODE.
             12594                              PSIZE;
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:28   
      493    12595    5                     IF VX_MAP_NUM > SIZE(@PROC) THEN SIZE(@PROC) = VX_MAP_NUM;
      494    12596    5                     VX_MAP_NUM = NODE$ -> VX$TREE_NODE.FORWARD#;
      495    12597    6                     IF VX_MAP_NUM > 0 THEN DO;
      496    12598    6                         NODE$ = PINCRW( START$, VX_MAP_NUM * SIZEW(VX$TREE_NODE) );
      497    12599    6                        END;
      498    12600    6                     ELSE DO;
      499    12601    6                         VX_MAP_NUM = NODE$ -> VX$TREE_NODE.OVERLAY#;
      500    12602    7                         DO WHILE( VX_MAP_NUM <= 0 );
      501    12603    7                             VX_MAP_NUM = NODE$ -> VX$TREE_NODE.BACK#;
      502    12604    7                             IF VX_MAP_NUM <= 0 THEN GOTO FINISHED;
      503    12605    7                             NODE$ = PINCRW( START$, VX_MAP_NUM * SIZEW(VX$TREE_NODE) )
             12605                                      ;
      504    12606    7                             VX_MAP_NUM = NODE$ -> VX$TREE_NODE.OVERLAY#;
      505    12607    7                            END;
      506    12608    6                         NODE$ = PINCRW( START$, VX_MAP_NUM * SIZEW(VX$TREE_NODE) );
      507    12609    6                        END;
      508    12610    5                    END;                   /* Do forever */
      509    12611    4   FINISHED:
      510    12612    4                 SIZE(@DATA) = SIZE(@DATA) - START(@DATA);
      511    12613    4                 SIZE(@PROC) = SIZE(@PROC) - START(@PROC);
      512    12614    4                END;
      513    12615                  %WR_LIT( MES1=INSTRUCTION_SEGMENT );
      514    12625    3             CALL CONCAT( VX_MBUF.CHARS, TYPE_OCTLOC, SIZE_OCTSIZ_PAGES );
      515    12626                  %M_WRITE;
      516    12635    4             DO I = @DATA TO @PROC;
      517    12636    5                 DO CASE( I );
      518    12637    5                   CASE( @DATA );
      519    12638    5                     VX_MBUF.CHARS = 'A DATA';
      520    12639    5                     PAGES = VX_RU_HEAD_BUF.VDPGS;
      521    12640    5                   CASE( @PROC );
      522    12641    5                     VX_MBUF.CHARS = 'B PROCEDURE';
      523    12642    5                     PAGES = VX_RU_HEAD_BUF.VPPGS;
      524    12643    5                   END;                    /* Do case( i ); */
      525    12644    4                 CALL VXD$B2C( VX_MBUF.CHARS, 19, 6, START(I), 8 );
      526    12645    5                 IF SIZE(I) > 0 THEN DO;
      527    12646    5                     CALL VXD$B2C( VX_MBUF.CHARS, 28, 6, SIZE(I), 10 );
      528    12647    5                     CALL VXD$B2C( VX_MBUF.CHARS, 38, 6, SIZE(I), 8 );
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:29   
      529    12648    5                     CALL VXD$B2C( VX_MBUF.CHARS, 49, 6, PAGES, 10 );
      530    12649    5                    END;
      531    12650    5                 ELSE DO;
      532    12651    5                     CALL INSERT( VX_MBUF.CHARS, 33, 1, '0' );
      533    12652    5                     CALL INSERT( VX_MBUF.CHARS, 43, 1, '0' );
      534    12653    5                     CALL INSERT( VX_MBUF.CHARS, 54, 1, '0' );
      535    12654    5                    END;
      536    12655                      %M_WRITE;
      537    12664    4                END;
      538    12665    4             IF SEG_PAGES > 0 THEN DO;
      539    12666                      %WR_LIT( MES1=DATA_SEGMENTS );
      540    12676    4                 CALL CONCAT( VX_MBUF.CHARS, SEGID_TYPE, SIZE_OCTSIZ_PAGES );
      541    12677                      %M_WRITE;
      542    12686    5                 DO I = 0 TO 5;
      543    12687    6                     IF VX_SEG_EPAGE#(I) > 0 THEN DO;
      544    12688    6                         VX_MBUF.CHARS = SEGID(I);
      545    12689    6                         IF VX_RU_HEAD_BUF.DATA_SEG.PROTECTION(I) = 384
      546    12690    6                         THEN CALL INSERT( VX_MBUF.CHARS, 19, , 'DATA' );
      547    12691    6                         ELSE CALL INSERT( VX_MBUF.CHARS, 19, , 'RODATA' );
      548    12692    6                         L = VX_RU_HEAD_BUF.DATA_SEG.SIZ(I);
      549    12693    6                         CALL VXD$B2C( VX_MBUF.CHARS, 28, 6, L, 10 );
      550    12694    6                         CALL VXD$B2C( VX_MBUF.CHARS, 38, 6, L, 8 );
      551    12695    6                         CALL VXD$B2C( VX_MBUF.CHARS, 49, 6, VX_SEG_EPAGE#(I), 10 );
      552    12696                              %M_WRITE;
      553    12705    6                        END;
      554    12706    5                    END;
      555    12707                      %M_WRITE( CLEAR=" ", ZERO=" " );
      556    12716    4                END;
      557    12717
      558    12718    3            END;
      559    12719              %NUMBER( NUM1=TOTAL_PROGRAM_SIZE );
      560    12736              %SCREAM( ERR#=E$TOTAL_PROGRAM_SIZE, LEVEL=E$I_VX, MID="'M'" );
      561    12739    3         IF VX_RU_HEAD_BUF.OVRL THEN DO ;
      562    12740    3             TOTAL_NUMBER_NODES = VX_MAP_TREE_START$ -> VX$TREE_HEADER.NODES ;
      563    12741        /*E*  ERROR: VXM-E$TOTAL_NUMBER_NODES-0
      564    12742              MESSAGE: Total number of nodes = %U1.
      565    12743              DESCRIPTION: If the run unit is an overlaid program, this
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:30   
      566    12744                           message will display the total number of nodes
      567    12745                           in the run unit.
      568    12746        */
      569    12747                  %NUMBER ( NUM1=TOTAL_NUMBER_NODES ) ;
      570    12764                  %SCREAM ( ERR#=E$TOTAL_NUMBER_NODES,
      571    12765                  LEVEL=@E$I_VX,
      572    12766                  MID="'M'" ) ;
      573    12769    3            END ;
      574    12770    2         RETURN;
      575    12771
      576    12772    2   MAP_IO_ERROR: ;
      577    12773    2         CALL M$MERC                             ALTRET(MERC_ERROR);
      578    12774              %ERROR_IT;
      579    12777    2   MERC_ERROR:
      580    12778    2         CALL VXE$MERC;
      581    12779
      582    12780
      583    12781    2   END ALLOCATION_SUMMARY;
      584    12782
      585    12783
      586    12784
      587    12785    1   END VXM$MAP;
      588    12786        %EOD;

PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:31   
--  Include file information  --

   CP_6_SUBS.:E05TOU  is referenced.
   F_DCB_D.:E05TOU  is referenced.
   VX_DCB_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_FIXED_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VX_MACRO_C.:E05TOU  is referenced.
   VX_PERR_C.:E05TOU  is referenced.
   VX_SUBS_C.:E05TOU  is referenced.
   VX_SWITCH_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   VX_INC_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VXM$MAP.

   Procedure VXM$MAP requires 1213 words for executable code.
   Procedure VXM$MAP requires 38 words of local(AUTO) storage.

PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:32   

 Object Unit name= VXM$MAP                                    File name= VXM$MAP.:E05TOU
 UTS= JUL 30 '97 08:19:53.44 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  LblCom even  none    96    140  VX_CONST_DCB
    2  RoData even  UTS    299    453  VXM$MAP
    3   Data  even  none   229    345  VXM$MAP
    4   DCB   even  none     0      0  M$LO
    5   Proc  even  none  1213   2275  VXM$MAP
    6  RoData even  none   112    160  VXM$MAP

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     5      0   yes            yes      Std        0  VXM$MAP
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:33   

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
    3      2  VX_MAP_LO_FPT_WRITE                3     16  VX_MAP_LIT_LO_FPT_WRITE
    3     32  VX_MAP$                            3     33  VX_MAP_ROS$
    3     34  VX_MAP_AREA$                       3     35  VX_MAP_TREE_START$
    3     36  VX_MAP_AREA_SIZE                   3     37  VX_MAP_NUM
    3     40  VX_MAP_REC_SIZE_A                  3     52  VX_CTAB
    2    427  VX_MAP_TABS_A                      3     53  VX_MAP_WIDTH
    3     54  VX_MAP_WIDTH_HDR                   3     55  VX_MAX_CTAB
    3     56  VX_MBUF                            3    117  VX_HDR_FIELD1
    3    120  VX_HDR_FIELD2                      3    121  VX_MAP_HDR0
    3    162  VX_MAP_HDR                         3    223  VX_MAP_HDR1
    3    264  VX_MAP_UTS_HDR

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes          Async      0 VXX$CON
 yes     yes           Std       4 VXI$READ
         yes           Std       1 VXM$OVERLAY
         yes           Std       4 VXE$ERROR
         yes           Std       2 VXA$ND
         yes           Std       3 VXA$GET
         yes           Std       0 VXM$NODE
         yes           Std       5 VXD$B2C
         yes           Std       4 VXK$KEY
         yes           Std       0 VXE$MERC
                       nStd      0 X66_AUTO_0
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:34   

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  VX_R_KEY_BUF                          VX_OK
     VX_RU_HEAD                            VX_RU_HEAD_BUF                        VX_OU_HEAD
     VX_COMMAND                            VX_NODE_NUMBER                        VX_CURR$
     VX_ERRORS                             VX_ERR_SEV                            VX_M_FREE
     VX_M_ALL                              VX_M_BASE_PTR                         VX_ONLINE
     VX_O                                  VX_EFIELD1                            VX_IO_SIZEW
     VX_R_KEY_HEAD                         VX_R_KEY_BIRTH                        VX_SEG_EPAGE#
     M$LO$                                 M$RF$                                 M$LO
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:35   


        1        1        /*M* VXM$MAP -  driver routine for producing a map.    */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* DMR,PLM=6,IND=4,CSU=2,EXM=0,ECU=2,MOC,DCI=4,CRT=4,CTI=8,CCC */
        8        8        VXM$MAP: PROC;

      8  5 000000   000000 700200 xent  VXM$MAP      TSX0  ! X66_AUTO_0
         5 000001   000046 000000                    ZERO    38,0

        9        9
       10       10        %INCLUDE VX_INC_C;
       11    10726        %INCLUDE CP_6_SUBS;
       12    11266        %VX$LST;

             11279    1   /*******************************************************************************
             11280    1   *                                                                              *
             11281    1   *                          VX$LST                                                 *
             11282    1   *                                                                              *
             11283    1   *******************************************************************************/

             11288    1   DCL 1 VX$LST                          ALIGNED BASED,
             11289    1         2 LINK$        PTR,               /* Link to next item                  */
             11290    1         2 TYPE         UBIN( 18) UNAL,    /* Type                               */
             11291    1         2 SUB_TYPE     UBIN( 18) UNAL,    /* Sub-type                           */
             11292    1         2 OBJECT_NAME$ PTR,               /* Pointer to object unit name        */
             11293    1         2 PRIOR$ REDEF OBJECT_NAME$ PTR,  /* Pointer to prior element in list   */
             11294    1         2 SC_HEAD$     PTR,               /* Head pointer to section link list  */
             11295    1         2 LIBSRCH$ REDEF SC_HEAD$ PTR,    /* Pointer to account list for library*/
             11296    1         2 SC_TAIL$     PTR,               /* Tail pointer to section link list  */
             11297    1         2 LIB REDEF SC_TAIL$,             /* Used only by UNSAT library files   */
             11298    1           3 USED UBIN HALF UNAL,          /* 1 => library file used, 0=>not used*/
             11299    1           3 NEEDED UBIN HALF UNAL,   /* 1 => library file needed, 0=>not needed*/
             11300    1         2 P,
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:36   
             11301    1           3 NAME_       ALIGNED,
             11302    1             4 BOUND      UBIN(20)  UNAL,
             11303    1             4 FLAGSV     UBIN(11)  UNAL,
             11304    1             4 *          BIT(5)    UNAL,
             11305    1             4 NAME$      PTR,
             11306    1           3 ACCT_       ALIGNED,
             11307    1             4 BOUND      UBIN(20)  UNAL,
             11308    1             4 FLAGSV     UBIN(11)  UNAL,
             11309    1             4 *          BIT(5)    UNAL,
             11310    1             4 ACCT$      PTR,
             11311    1           3 PASS_       ALIGNED,
             11312    1             4 BOUND      UBIN(20)  UNAL,
             11313    1             4 FLAGSV     UBIN(11)  UNAL,
             11314    1             4 *          BIT(5)    UNAL,
             11315    1             4 PASS$      PTR,
             11316    1           3 SN_         ALIGNED,
             11317    1             4 BOUND      UBIN(20)  UNAL,
             11318    1             4 FLAGSV     UBIN(11)  UNAL,
             11319    1             4 *          BIT(5)    UNAL,
             11320    1             4 SN$        PTR,
             11321    1           3 WSN_        ALIGNED,
             11322    1             4 BOUND      UBIN(20)  UNAL,
             11323    1             4 FLAGSV     UBIN(11)  UNAL,
             11324    1             4 *          BIT(5)    UNAL,
             11325    1             4 WSN$       PTR,
             11326    1           3 B           ALIGNED,
             11327    1             4 RES        BIT(1)    UNAL,
             11328    1             4 ASN        BIT(1)    UNAL,
             11329    1             4 ACCT       BIT(1)    UNAL,
             11330    1             4 *          BIT(33)   UNAL,
             11331    1           3 RES         CHAR(4)   ALIGNED,
             11332    1           3 ASN         UBIN(36)  ALIGNED;
       13    11335        %VX$WORD;

             11347    1   /*******************************************************************************
             11348    1   *                                                                              *
             11349    1   *                          VX$WORD                                                *
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:37   
             11350    1   *                                                                              *
             11351    1   *******************************************************************************/

             11356    1   DCL VX$WORD_A(0:0)       UBIN(36) ALIGNED    BASED PTR;
             11357    1   DCL VX$HALF_A(0:0)       UBIN(18) HALIGNED   BASED PTR;
             11358    1   DCL VX$BYTE_A(0:0)       UBIN( 9) CALIGNED   BASED PTR;
             11359    1   DCL VX$CHAR_A(0:0)       CHAR( 1) UNAL       BASED PTR;
             11360        /**/
             11361    1   DCL VX$WORD_SBIN_A(0:0)  SBIN WORD ALIGNED   BASED     PTR;
             11362    1   DCL VX$HALF_SBIN_A(0:0)  SBIN HALF HALIGNED  BASED     PTR;
             11363    1   DCL VX$BYTE_SBIN_A(0:0)  SBIN HALF CALIGNED  BASED     PTR;
             11364    1   DCL VX$BIT_A(0:0)        BIT(36)   ALIGNED   BASED     PTR;
       14    11367        %T$C;

             11379    1   /*******************************************************************************
             11380    1   *                                                                              *
             11381    1   *                          T$C                                                 *
             11382    1   *                                                                              *
             11383    1   *******************************************************************************/

             11388    1   DCL 1 T$C           BASED     ALIGNED,  /* Text count                         */
             11389    1         2 COUNT        UBIN( 9) UNAL,
             11390    1         2 CHARS        CHAR( T$C.COUNT )   UNAL;
             11391    1   DCL 1 T$C_UNAL      BASED     UNAL,     /* Text count                         */
             11392    1         2 COUNT        UBIN( 9) UNAL,
             11393    1         2 CHARS        CHAR( T$C_UNAL.COUNT ) UNAL;
       15    11396        %SET LISTMAC='1'B;
       16    11397        %SET LISTEXP='1'B;
       17    11398        %SET LISTSUB='1'B;
       18    11399        %BANNER(ARG=SUBS);
             11400        %LSET LISTDIR='0'B;

             11407    1   /*******************************************************************************
             11408    1   *                                                                              *
             11409    1   *                          SUBS                                                 *
             11410    1   *                                                                              *
             11411    1   *******************************************************************************/
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:38   

       19    11415        %B$RECORDSUBS;
             11416        %EQU TYPHEAD=0 ;
             11417        %EQU TYPDNAM=1 ;
             11418        %EQU TYPRNAM=2 ;
             11419        %EQU TYPSECT=3 ;
             11420        %EQU TYPEDEF=4 ;
             11421        %EQU TYPEREF=5 ;
             11422        %EQU TYPSDEF=6 ;
             11423        %EQU TYPSREF=7 ;
             11424        %EQU TYPSEGDEF=8 ;
             11425        %EQU TYPSEGREF=9 ;
             11426        %EQU TYPPROG=10 ;
             11427        %EQU SUBTYPPROG=0 ;
             11428        %EQU SUBTYPREL=1 ;
             11429        %EQU TYPLOGBLK=11 ;
             11430        %EQU TYPINTNTRY=12 ;
             11431        %EQU TYPEXST=13 ;
             11432        %EQU TYPVREBL=14 ;
             11433        %EQU TYPDBGNAM=15 ;
             11434        %EQU TYPLV1LB=16 ;
             11435        %EQU TYPLV1=17 ;
             11436        %EQU TYPDATASEG=18 ;
             11437        %EQU TYPRUM=20 ;
             11438        %EQU TYPBIRTH=21 ;
             11439        %EQU TYPPLOVER=22 ;
             11440        %EQU TYPCOMPID=23 ;
             11441        %EQU TYPROS=30 ;
       20    11443        %C;
             11444        %LSET LISTDIR='0'B;

             11451    1   /*******************************************************************************
             11452    1   *                                                                              *
             11453    1   *                          CHAR                                                 *
             11454    1   *                                                                              *
             11455    1   *******************************************************************************/

PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:39   
       21    11459    1   DCL FIRST_LP        CHAR(0)             CONSTANT  INIT(
       22    11460    1    'q********************** CP6  LINK  VERSION XXX       MAP  ALLOCATION SUMMARY ****
             11460        ******************');
       23    11461    1   DCL FIRST_TERM      CHAR(0)             CONSTANT  INIT(
       24    11462    1         'q******** CP6  LINK  VERSION XXX       MAP  ALLOCATION  SUMMARY ********');
       25    11463    1   DCL HDR_LP          CHAR(0)             CONSTANT  INIT(
       26    11464    1    'A********************** RF   =                                 ACN  =        ****
             11464        ******************');
       27    11465    1   DCL HDR_TERM        CHAR(0)             CONSTANT  INIT(
       28    11466    1         'A******** RF   =                                 ACN  =         ********');
       29    11467    1   DCL NODE_HDR_LP          CHAR(0)             CONSTANT  INIT(
       30    11468    1    'B********************** NODE =                                 SIZE =      K ****
             11468        ******************');
       31    11469    1   DCL NODE_HDR_TERM        CHAR(0)             CONSTANT  INIT(
       32    11470    1         'B******** NODE =                                 SIZE =       K ********');
       33    11471    1   DCL UTS_HDR_LP           CHAR(0)             CONSTANT  INIT(
       34    11472    1    'A********************** UTS  = MM/DD/YY  HH:MM:SS:SS                         ****
             11472        ******************');
       35    11473    1   DCL UTS_HDR_TERM         CHAR(0)             CONSTANT  INIT(
       36    11474    1         'A******** UTS  = MM/DD/YY  HH:MM:SS:SS                          ********');
       37    11475    1   DCL BIAS_START_DCB       CHAR(0)             CONSTANT  INIT(
       38    11476    1              'A  BIAS   START   SEVERITY   TCB FRAMES   DCB SLOTS');
       39    11477    1   DCL SLIB_ALIB            CHAR(0)             CONSTANT  INIT(
       40    11478    1              'ASHARED LIBRARY                 ALTERNATE SHARED LIBRARY');
       41    11479    1   DCL ROS_SEG_MES CHAR(0) CONSTANT INIT(
       42    11480    1           'B******* READ ONLY SEGMENT *******' );
       43    11481    1   DCL SIZE_OCTSIZ_PAGES CHAR(0) CONSTANT INIT(
       44    11482    1           '   SIZE    OCTSIZ      PAGES' );
       45    11483    1   DCL INSTRUCTION_SEGMENT CHAR(0) CONSTANT INIT(
       46    11484    1           'B******* INSTRUCTION SEGMENT *******' );
       47    11485    1   DCL TYPE_OCTLOC CHAR(0) CONSTANT INIT(
       48    11486    1           'A TYPE             OCTLOC  ' );
       49    11487    1   DCL DATA_SEGMENTS CHAR(0) CONSTANT INIT(
       50    11488    1           'B******* DATA SEGMENTS *******' );
       51    11489    1   DCL SEGID_TYPE CHAR(0) CONSTANT INIT(
       52    11490    1           'A SEGID            TYPE    ' );
       53    11491    1   DCL SEGID(0:5) CHAR(16) CONSTANT INIT(
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:40   
       54    11492    1           'A 6006 (DS3SID)',
       55    11493    1           'A 6007 (DS4SID)',
       56    11494    1           'A 6010 (DS5SID)',
       57    11495    1           'A 6011 (DS6SID)',
       58    11496    1           'A 6012 (DS7SID)',
       59    11497    1           'A 6013 (DS8SID)' );
       60    11498    1   DCL LINK_VERSION#(0:10/*@LINK_VERSION#*/) CHAR(3) CONSTANT INIT
       61    11499    1        ( 'A00', 'A01', 'B00', 'B01', 'B02', 'B03', 'C00' , 'D00', 'E00', 'E02', 'E03'
             11499                  ) ;
       62    11500        %E;
             11501        %LSET LISTDIR='0'B;

             11508    1   /*******************************************************************************
             11509    1   *                                                                              *
             11510    1   *                          ENTRY                                                 *
             11511    1   *                                                                              *
             11512    1   *******************************************************************************/

       63    11516    1   DCL VXA$ND          ENTRY(2);
       64    11517        %ENTRIES;
             11518    1   DCL VXE$ERROR       ENTRY(4);
             11519    1   DCL VXE$ERR         ENTRY(3);
             11520    1   DCL VXE$MERC        ENTRY;
             11521    1   DCL VXE$ERRMSG      ENTRY(3);
             11522    1   DCL VXR$READ        ENTRY( 3 );
             11523    1   DCL VXW$WRITE       ENTRY( 3 );
             11524    1   DCL VXW$WRITE_DO    ENTRY( 2 );
             11525    1   DCL VXD$B2C         ENTRY( 5 );
             11526    1   DCL VXD$C2B         ENTRY( 3 );
             11527    1   DCL VXA$GET         ENTRY( 3 );
             11528    1   DCL VXF$FREE        ENTRY( 3 );
             11529    1   DCL VXQ$SORT        ENTRY( 7 );
             11530    1   DCL VXY$YESNO       ENTRY( 1 );
       65    11532    1   DCL VXM$NODE        ENTRY;
       66    11533    1   DCL VXM$OVERLAY     ENTRY( 1 );
       67    11534        %ENTRIES_IO;
             11535    1   DCL VXF$OPEN        ENTRY(3) ALTRET;
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:41   
             11536    1   DCL VXF$CLOSE       ENTRY(3);
             11537    1   DCL VXU$PREAD       ENTRY(12);
             11538    1   DCL VXK$KEY         ENTRY(4);
             11539    1   DCL VXI$READ        ENTRY(4)  ALTRET;
             11540    1   DCL VXI$WRITE       ENTRY(4)  ALTRET;
       68    11542        %PTR;
             11543        %LSET LISTDIR='0'B;

             11550    1   /*******************************************************************************
             11551    1   *                                                                              *
             11552    1   *                          PTR                                                 *
             11553    1   *                                                                              *
             11554    1   *******************************************************************************/

       69    11558    1   DCL START$          PTR  ALIGNED   AUTO;
       70    11559        %POINTER;
             11560    1   DCL P$         PTR       ALIGNED AUTO;
             11561    1   DCL Q$         PTR       ALIGNED AUTO;
             11562    1   DCL R$         PTR       ALIGNED AUTO;
       71    11564    1   DCL NEXT$           PTR  ALIGNED   AUTO;
       72    11565    1   DCL NODE$           PTR  ALIGNED   AUTO;
       73    11566        %U;
             11567        %LSET LISTDIR='0'B;

             11574    1   /*******************************************************************************
             11575    1   *                                                                              *
             11576    1   *                          UBIN                                                 *
             11577    1   *                                                                              *
             11578    1   *******************************************************************************/

       74    11582        %INDEX;
             11583    1   DCL I          UBIN(36) ALIGNED AUTO;
             11584    1   DCL SI REDEF I SBIN WORD ALIGNED;
             11585    1   DCL J          UBIN(36) ALIGNED AUTO;
             11586    1   DCL SJ REDEF J SBIN WORD ALIGNED;
             11587    1   DCL K          UBIN(36) ALIGNED AUTO;
             11588    1   DCL SK REDEF K SBIN WORD ALIGNED;
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:42   
             11589    1   DCL L          UBIN(36) ALIGNED AUTO;
             11590    1   DCL SL REDEF L    SBIN WORD ALIGNED;
       75    11592    1   DCL PAGE#           UBIN(36)  ALIGNED   AUTO;
       76    11593    1   DCL ADR             UBIN(36)  ALIGNED   AUTO;
       77    11594    1   DCL IMAGE_SIZE      SBIN(36)  ALIGNED   AUTO;
       78    11595        /**/
       79    11596        /**/
       80    11597        /**/
       81    11598        %M_NUMBER_DCL;
             11599    1   DCL THREE$BITS(0:11)          BIT(3)    UNAL BASED;
             11600    1   DCL 1 WORK_BUF           ALIGNED   STATIC,
             11601    1         2 COMPOSITE         ALIGNED,
             11602    1           3 H                UBIN(6)   UNAL INIT( BITBIN('06'O) ),
             11603    1           3 UBN              UBIN(3)   UNAL,
             11604    1         2 CHR REDEF COMPOSITE    CHAR(1) ALIGNED;
             11605    1   DCL SIG                  BIT(1)    ALIGNED   STATIC    INIT('0'B);
             11606    1   DCL K_INDEX              UBIN(36)  ALIGNED   AUTO;
             11607    1   DCL L_INDEX              UBIN(36)  ALIGNED   AUTO;
       82    11609        %B$TREE_TABLE(HDR_NAME=VX$TREE_HEADER,NODE_NAME=VX$TREE_NODE);
             11610    1   DCL 1 VX$TREE_HEADER BASED ALIGNED,
             11611              /*K*  HDR_NAME is the Tree table header.  */
             11612    1         2 NODES UBIN HALF UNAL,
             11613                /*K*  NODES is the number of nodes in the tree table.  */
             11614    1         2 SIZE UBIN HALF UNAL,
             11615                /*K*  SIZE is the total word size of the tree table
             11616                      (HDR + NODES + TEST pool).   */
             11617    1         2 LIB$ PTR,
             11618                /*K*  LIB$ is the pointer to the name of the shared library
             11619                      currently associated.  */
             11620    1         2 PRECSIZE UBIN HALF UNAL,
             11621                /*K*  PRECSIZE  is the maximum program record size in the
             11622                      Run Unit (from the Head record).  */
             11623    1         2 MAX_LIB_DATA UBIN HALF UNAL;
             11624                /*K*  MAX_LIB_DATA is the maximum reserved in the program
             11625                      image for the shared library data.  */
             11626    1   DCL 1 VX$TREE_NODE BASED ALIGNED,
             11627              /*K*  NODE_NAME is the node specification.  */
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:43   
             11628    1         2 NAME$ PTR,
             11629                /*K*  NAME$ is the pointer to the name of the node.  */
             11630    1         2 FLGS,
             11631                /*K*  FLGS are control flags used by M$OLAY.  */
             11632    1           3 NOW_IN BIT(1) UNAL,
             11633                  /*K*  NOW_IN is set if this node is now in memory.  */
             11634    1           3 WAS_IN BIT(1) UNAL,
             11635                  /*K*  WAS_IN is set if this node was in memory.  */
             11636    1           3 * BIT(7) UNAL,
             11637                  /*K*  * is reserved for future use and must be zero.  */
             11638    1         2 AFLGS,
             11639                /*K*  AFLGS are access flags.  */
             11640    1           3 * BIT(6) UNAL,
             11641                  /*K*  * is reserved for future use and must be zero.  */
             11642    1           3 NOPATH BIT(1) UNAL,
             11643                  /*K*  NOPATH is set if this node is independently loaded
             11644                        (no backward path).  */
             11645    1           3 ENTER BIT(1) UNAL,
             11646                  /*K*  ENTER is set if ENTRY$ is valid.  */
             11647    1           3 CANCEL BIT(1) UNAL,
             11648                  /*K*  CANCEL is set if the overlay was removed by
             11649                        "CANCEL=YES".   */
             11650    1         2 BACK# SBIN HALF UNAL,
             11651                /*K*  BACK# is the backward link (parent).  */
             11652    1         2 FORWARD# SBIN HALF UNAL,
             11653                /*K*  FORWARD# is the forward link (daughter).  */
             11654    1         2 OVERLAY# SBIN HALF UNAL,
             11655                /*K*  OVERLAY# is the overlay link (same level).   */
             11656    1         2 PADDR UBIN HALF UNAL,
             11657                /*K*  PADDR is the address of procedure.  */
             11658    1         2 PSIZE UBIN HALF UNAL,
             11659                /*K*  PSIZE is the size of procedure.  */
             11660    1         2 DADDR UBIN HALF UNAL,
             11661                /*K*  DADDR is the address of data.  */
             11662    1         2 DSIZE UBIN HALF UNAL,
             11663                /*K*  DSIZE is the size of data.  */
             11664    1         2 ENTRY$ EPTR;
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:44   
             11665                /*K*  ENTRY$ is the overlay entry point (see ENTER).  */
       83    11667        %B$HEAD;
             11668    1   DCL 1 B$HEAD BASED ALIGNED,
             11669    1         2 PRIV BIT(36),
             11670                /*K*  PRIV is a 36 bit field containing privilege flags.  */
             11671    1         2 VPPGS UBIN(14) UNAL,
             11672                /*K*  VPPGS is the number of virtual pages of procedure
             11673                      required for the longest overlay path.
             11674                      (256 words/page if FEP, 1024 words/page if Host)  */
             11675    1         2 * UBIN(2) UNAL,
             11676                /*K*  * is reserved for future use and must be zero.  */
             11677    1         2 RPROC UBIN(20) UNAL,
             11678                /*K*  RPROC is the size, in words, of the procedure for the root.  */
             11679    1         2 VDPGS UBIN(14) UNAL,
             11680                /*K*  VDPGS is the number of virtual pages of data required
             11681                      for the longest overlay path.
             11682                      (256 words/page if FEP, 1024 words/page if Host)
             11683                      This includes both library and user defined data.
             11684                       */
             11685    1         2 * UBIN(2) UNAL,
             11686                /*K*  * is reserved for future use and must be zero.  */
             11687    1         2 RDATA UBIN(20) UNAL,
             11688                /*K*  RDATA is the size, in words of the data for the root.
             11689                      This includes both library and user defined data.
             11690                      If this is a host run unit, all data records will be
             11691                      included in the run unit.
             11692                      If this is a FEP run unit,
             11693                      no library data will be included in the run unit itself.
             11694                      The ISADDR field of B$RUKEY for the first user data record
             11695                      may be determined by calculating the FEP word address of
             11696                      B$HEAD.BIAS rounded to the next lower 2048 FEP word boundry.
             11697                      (2048 FEP words is the maximum size of run unit records
             11698                      for FEP run units.)  The data in this record below
             11699                      BIAS will be padded with zeros.
             11700                      The word size of data contained in the FEP run unit
             11701                      may be calculated by subtracting the ISADDR value as
             11702                      calculated for the first data record from the word
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:45   
             11703                      address of the last word of user data.  The last
             11704                      word of user data is the sum of the default FPRG
             11705                      bias (%GM_ISR1_BASE - EQU is in file GM_LCP6_E) and
             11706                      the total data size (B$HEAD.RDATA).
             11707                      */
             11708    1         2 SEV UBIN BYTE UNAL,
             11709                /*K*  SEV is the maximum severity level of the object units
             11710                      making up the run unit.  */
             11711    1         2 * UBIN(7) UNAL,
             11712                /*K*  * is reserved for future use and must be zero.  */
             11713    1         2 START UBIN(20) UNAL,
             11714                /*K*  START is the address within the instruction segment at
             11715                      which execution will start.  */
             11716    1         2 UDCBNUM UBIN HALF UNAL,
             11717                /*K*  UDCBNUM is the number of DCBs in the Read-Only segment
             11718                      as generated by LINK.   */
             11719    1         2 DCBRES UBIN HALF UNAL,
             11720                /*K*  DCBRES is the number of pointers to DCBs as supplied by
             11721                      LINK.   */
             11722    1         2 TREEDISP UBIN HALF UNAL,
             11723                /*K*  TREEDISP is the displacement in words from the start of
             11724                      the variable portion of the Read-Only Segment locating
             11725                      the tree table.   */
             11726    1         2 TCBSIZE UBIN HALF UNAL,
             11727                /*K*  TCBSIZE specifies the number of frames of the Task Control Block;
             11728                      if the size is 0, then a two frame Task Control Block will be
             11729                      built by STEP.   */
             11730    1         2 PRECSIZE UBIN HALF UNAL,
             11731                /*K*  PRECSIZ is the maximum size of any program record
             11732                      in the run unit; words if Host, double words if FEP.
             11733                      */
             11734    1         2 NRECSIZE UBIN HALF UNAL,
             11735                /*K*  NRECSIZ is the maximum size of External Name records in
             11736                      the run unit.   */
             11737    1         2 EPRECSIZE UBIN HALF UNAL,
             11738                /*K*  EPRECSIZE is the maximum size of External Procedure
             11739                      Definition Records in the run unit.   */
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:46   
             11740    1         2 EDRECSIZE UBIN HALF UNAL,
             11741                /*K*  EDRECSIZE is the maximum size of External Data Definition
             11742                      Records in the run unit.    */
             11743    1         2 SDRECSIZE UBIN HALF UNAL,
             11744                /*K*  SDRECSIZE is the maximum size of External Segment
             11745                      Definition Records in the run unit.   */
             11746    1         2 ROSIZE UBIN HALF UNAL,
             11747                /*K*  ROSIZE is the size of the Read Only Segment Record.  */
             11748    1         2 VERSION# UBIN BYTE UNAL,
             11749                /*K*  VERSION# is the LINK version number.  */
             11750    1         2 MAP_BITS_A(0:2) UNAL,
             11751                /*K*  MAP_BITS_A are used by the linker to produce MAP.  */
             11752    1           3 MULTIPLE BIT(1) UNAL,
             11753                  /*K*  MULTIPLE is set if a multiply defined symbol exists.  */
             11754    1           3 CON BIT(1) UNAL,
             11755                  /*K*  CON is set if a Constant symbol is defined.  */
             11756    1           3 PRIMARY BIT(1) UNAL,
             11757                  /*K*  PRIMARY is set if an unresolved primary reference exists.  */
             11758    1           3 SECONDARY BIT(1) UNAL,
             11759                  /*K*  SECONDARY is set if an unresolved secondary reference
             11760                        exists.  */
             11761    1         2 SECTABLESIZE UBIN(8) UNAL,
             11762                /*K*  SECTABLESIZE is the size in words of the record which
             11763                      contains the start location and size of all sections
             11764                      (for BIAS by OU for FEP)   */
             11765    1         2 NSTDINVOC BIT(1) UNAL,
             11766                /*K*  NSTDINVOC indicates that the RU will can tolerate invoking
             11767                      in nonstandard form.   */
             11768    1         2 REMOVE_ENTDEF BIT(1) UNAL,
             11769                /*K*  REMOVE_ENTDEF is set if ENTDEFs not in the transfer
             11770                      vector have been removed from the shared library.  */
             11771    1         2 REMOVE_SYMDEF BIT(1) UNAL,
             11772                /*K*  REMOVE_SYMDEF is set if SYMDEFs not in the transfer
             11773                      vector have been removed from the shared library.  */
             11774    1         2 STATS BIT(1) UNAL,
             11775                /*K*  STATS is set if Statistics are being collected on
             11776                      this processor.  */
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:47   
             11777    1         2 LAUTO BIT(1) UNAL,
             11778                /*K*  LAUTO is set for a Fep run unit if user auto is to be in
             11779                a small segment, thereby freeing up a large one for other purposes. */
             11780    1         2 * BIT(2) UNAL,
             11781                /*K*  * is reserved for future use and must be zero.  */
             11782    1         2 DATA_SEG (0:5),
             11783                /*K*  DATA_SEG defines the initialized data segment in the RU.  */
             11784    1           3 SIZ UBIN HALF UNAL,
             11785                  /*K* SIZ is the word size of the initialized data segment.  */
             11786    1           3 * UBIN(9) UNAL,
             11787                  /*K*  * is reserved for future use and must be zero.  */
             11788    1           3 PROTECTION UBIN(9) UNAL,
             11789                  /*K*  PROTECTION is the initialized data segment
             11790                        protection.   */
             11791    1         2 LOCK(0:71) BIT(1) UNAL,
             11792                /*K*  LOCK is the Lock for restricted processor.  */
             11793    1         2 FLAVOR UBIN BYTE UNAL,
             11794                /*K*  FLAVOR is the flavor of the run unit.  The RU_FLAVORS
             11795                      macro gives the legal values for FLAVOR.  */
             11796    1         2 S BIT(1) UNAL,
             11797                /*K*  S - S = 1 if the run unit is Shareable  */
             11798    1         2 LIB BIT(1) UNAL,
             11799                /*K*  LIB - LIB = 1 if the run unit is a Shared Library  */
             11800    1         2 ASL BIT(1) UNAL,
             11801                /*K*  ASL - ASL = 1 if the run unit is an Alternate Shared
             11802                      Library.   */
             11803    1         2 CMDPROC BIT(1) UNAL,
             11804                /*K*  CMDPROC - CMDPROC = 1 is the run unit is a Command Processor. */
             11805    1         2 DEBUGGER BIT(1) UNAL,
             11806                /*K*  DEBUGGER - DEBUGGER = 1 if the run unit is a Debugger. */
             11807    1         2 OVRL BIT(1) UNAL,
             11808                /*K*  OVRL -  OVRL = 1 if the run unit is overlaid.   */
             11809    1         2 PROCACC BIT(1) UNAL,
             11810                /*K*  PROCACC - If PROCACC = 1,  if the run unit resides in
             11811                      :SYS, it should be charged as processor, not user.  */
             11812    1         2 NOCHGPMEM BIT(1) UNAL,
             11813                /*K*  NOCHGPMEM - If NOCHGPMEM = 1, if the run unit resides in
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:48   
             11814                      :SYS, the user should not be charged for procedures.  */
             11815    1         2 PROCSURCHG BIT(1) UNAL,
             11816                /*K*  PROCSURCHG - If PROCSURCHG = 1, Surcharge accountings
             11817                      should be applied.  */
             11818    1         2 RESTPROC BIT(1) UNAL,
             11819                /*K*  RESTPROC - If RESTPROC = 1, this is a restricted
             11820                      processor and should be verified against the user's key.  */
             11821    1         2 STRONG_LOCK BIT(1) UNAL,
             11822                /*K*  STRONG_LOCK - If STRONG_LOCK = 1, the restricted
             11823                      processor has a strong lock.  If STRONG_LOCK = 0, the
             11824                      restricted processor has a weak lock.   */
             11825    1         2 * UBIN(16) UNAL,
             11826                /*K*  * is reserved for future use and must be zero. */
             11827    1         2 PSEUDO_COUNT UBIN BYTE UNAL,
             11828                /*K*  PSEUDO_COUNT - If PSEUDO_COUNT > 0, then a pseudo resource
             11829                      is required to execute this run-unit.  */
             11830    1         2 * UBIN(7) UNAL,
             11831                /*K*  * is reserved for future use and must be zero.  */
             11832    1         2 BIAS UBIN(20) UNAL,
             11833                /*K*  BIAS is the address within the instruction segment of
             11834                      the beginning of the root data.  */
             11835    1         2 PSEUDO_TEXT CHAR(8),
             11836                /*K*  PSEUDO_TEXT - contains the text of the pseudo resource
             11837                      to acquire when the run-unit is executed.  */
             11838    1         2 * (0:1) UBIN WORD UNAL,
             11839                /*K*  * is reserved for future use and must be zero.  */
             11840    1         2 LIBNAME,
             11841                /*K* LIBNAME gives the name, if any, of the shared library to
             11842                     be associated.  Each name resides in a fixed 8-word field.
             11843                     The first byte contains the character count of the name
             11844                     followed by the name itself.   */
             11845    1           3 CNT UBIN BYTE UNAL,
             11846                  /*K* CNT contains the character count of the name of the
             11847                       shared library.  */
             11848    1           3 TXT CHAR(31) UNAL,
             11849                  /*K*  TXT contains the name itself of the shared library.  */
             11850    1         2 ASLNAME,
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:49   
             11851                /*K*  ASLNAME gives the name, if any, of the alternate shared
             11852                      library to be associated.  Each name resides in a fixed
             11853                      8-word field.  The first byte contains the character
             11854                      count of the name followed by the name itself.   */
             11855    1           3 CNT UBIN BYTE UNAL,
             11856                  /*K*  CNT contains the character count of the name of
             11857                        the alternate shared library.  */
             11858    1           3 TXT CHAR(31) UNAL;
             11859                  /*K*  TXT contains the name itself of the alternate
             11860                        shared library.  */
             11861        %IF '1'B;
             11862        /* %EQU's for data segment protection type */
             11863        %EQU DS_READONLY#=256;
             11864        %EQU DS_READWRITE#=384;
             11865        %ENDIF;
       84    11867        %S;
             11868        %LSET LISTDIR='0'B;

             11875    1   /*******************************************************************************
             11876    1   *                                                                              *
             11877    1   *                          SBIN                                                 *
             11878    1   *                                                                              *
             11879    1   *******************************************************************************/

       85    11883    1   DCL DIFF            SBIN WORD ALIGNED   AUTO;
       86    11884    1   DCL START(0:1/*@PROC*/)  SBIN WORD ALIGNED   AUTO;
       87    11885    1   DCL SIZE (0:1/*@PROC*/)  SBIN WORD ALIGNED   AUTO;
       88    11886    1   DCL ROS_PAGES       SBIN WORD ALIGNED   AUTO;
       89    11887    1   DCL SEG_PAGES       SBIN WORD ALIGNED   AUTO;
       90    11888    1   DCL PAGES           SBIN WORD ALIGNED   AUTO;
       91    11889    1   DCL TOTAL_PROGRAM_SIZE SBIN WORD ALIGNED AUTO;
       92    11890    1   DCL TOTAL_NUMBER_NODES SBIN WORD ALIGNED AUTO ;
       93    11891        /**/
       94    11892        /**/
       95    11893        %MOVE_NAME_DCL;
             11894    1   DCL MOVE_SIZE           UBIN  ALIGNED   AUTO;
             11895    1   DCL T$VAR             CHAR(MOVE_SIZE)   BASED;
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:50   
             11896    1   DCL SOURCE$              PTR  ALIGNED   AUTO;
       96    11898        /**/
       97    11899        /**/
       98    11900        %FILE;
             11901    1   DCL 1 F$NAME_                 BASED,
             11902    1         2 COUNT             UBIN( 9) UNAL,
             11903    1         2 CHARS             CHAR( F$NAME_.COUNT ) UNAL;
             11904    1   DCL F$ACCT_         CHAR(8/*@F_ACCT_SIZEC*/) BASED;
             11905    1   DCL F$ACCT_A(0:7/*@F_ACCT_SIZEC1*/)     CHAR(1)   BASED;
             11906    1   DCL F$PASS_         CHAR(8/*@F_PASS_SIZEC*/) BASED;
             11907    1   DCL F$PASS_A(0:7/*@F_PASS_SIZEC1*/)     CHAR(1)   BASED;
       99    11909        /**/
      100    11910        /**/
      101    11911        %PLIST;
      102    11912        %F$DCB;
      103    11969        /**/
      104    11970        /**/
      105    11971        /**/
      106    11972        %FPT_WRITE( FPTN=VX_MAP_LO_FPT_WRITE,
      107    11973                   DCB=M$LO,
      108    11974                   BUF=VX_MBUF,
      109    11975                   VFC=YES,
      110    11976                   STCLASS="STATIC SYMDEF");
      111    12007        /**/
      112    12008        %FPT_WRITE( FPTN=VX_MAP_LIT_LO_FPT_WRITE,
      113    12009                   DCB=M$LO,
      114    12010                   BUF=VX_MBUF,
      115    12011                   VFC=YES,
      116    12012                   STCLASS="STATIC SYMDEF");
      117    12043        /**/
      118    12044        /**/
      119    12045        /**/
      120    12046    1   DCL M$LO            DCB;
      121    12047        %EJECT;
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:51   
      122    12048        /*
      123    12049              Variables for map(ping)
      124    12050        */
      125    12051    1   DCL VX_MAP$               PTR  ALIGNED   STATIC    SYMDEF    INIT(ADDR(NIL));
      126    12052    1   DCL VX_MAP_ROS$           PTR  ALIGNED   STATIC    SYMDEF    INIT(ADDR(NIL));
      127    12053    1   DCL VX_MAP_AREA$          PTR  ALIGNED   STATIC    SYMDEF    INIT(ADDR(NIL));
      128    12054    1   DCL VX_MAP_TREE_START$    PTR  ALIGNED   STATIC    SYMDEF    INIT(ADDR(NIL));
      129    12055    1   DCL VX_MAP_AREA_SIZE      UBIN(36) ALIGNED STATIC  SYMDEF    INIT(0);
      130    12056    1   DCL VX_MAP_NUM            SBIN WORD ALIGNED   STATIC    SYMDEF    INIT(0);
      131    12057    1   DCL VX_MAP_REC_SIZE_A(0:9)   UBIN(36)  ALIGNED   STATIC    SYMDEF INIT(0*0);
      132    12058    1   DCL VX_CTAB               UBIN(36) ALIGNED STATIC  SYMDEF    INIT(0);
      133    12059    1   DCL VX_MAP_TABS_A(0:4)    UBIN(36)  ALIGNED   CONSTANT    SYMDEF  INIT(
      134    12060    1              17, 47, 77, 107, 99999999 );
      135    12061    1   DCL VX_MAP_WIDTH          SBIN WORD ALIGNED   STATIC    SYMDEF    INIT(0);
      136    12062    1   DCL VX_MAP_WIDTH_HDR      SBIN WORD ALIGNED   STATIC    SYMDEF    INIT(0);
      137    12063    1   DCL VX_MAX_CTAB           UBIN(36)  ALIGNED   STATIC    SYMDEF    INIT(0);
      138    12064    1   DCL 1 VX_MBUF ALIGNED STATIC SYMDEF,
      139    12065    1         2 CHARS CHAR(132) UNAL INIT(' '),
      140    12066    1         2 CHARS_A(0:131) REDEF CHARS CHAR(1) UNAL,
      141    12067    1         2 LIT_BUF REDEF CHARS UNAL,
      142    12068    1           3 VFC CHAR(1) UNAL,
      143    12069    1           3 CHARS CHAR(131) UNAL;
      144    12070    1   DCL VX_HDR_FIELD1              UBIN(36)  ALIGNED   STATIC    SYMDEF INIT(25);
      145    12071    1   DCL VX_HDR_FIELD2              UBIN(36)  ALIGNED   STATIC    SYMDEF INIT(64);
      146    12072    1   DCL 1 VX_MAP_HDR0 ALIGNED STATIC SYMDEF,
      147    12073    1         2 CHARS CHAR(132) UNAL INIT(' '),
      148    12074    1         2 CHARS_A(0:131) REDEF CHARS CHAR(1) UNAL,
      149    12075    1         2 LIT_BUF REDEF CHARS UNAL,
      150    12076    1           3 VFC CHAR(1) UNAL,
      151    12077    1           3 CHARS CHAR(131) UNAL;
      152    12078    1   DCL 1 VX_MAP_HDR ALIGNED STATIC SYMDEF,
      153    12079    1         2 CHARS CHAR(132) UNAL INIT(' '),
      154    12080    1         2 CHARS_A(0:131) REDEF CHARS CHAR(1) UNAL,
      155    12081    1         2 LIT_BUF REDEF CHARS UNAL,
      156    12082    1           3 VFC CHAR(1) UNAL,
      157    12083    1           3 CHARS CHAR(131) UNAL;
      158    12084    1   DCL 1 VX_MAP_HDR1 ALIGNED STATIC SYMDEF,
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:52   
      159    12085    1         2 CHARS CHAR(132) UNAL INIT(' '),
      160    12086    1         2 CHARS_A(0:131) REDEF CHARS CHAR(1) UNAL,
      161    12087    1         2 LIT_BUF REDEF CHARS UNAL,
      162    12088    1           3 VFC CHAR(1) UNAL,
      163    12089    1           3 CHARS CHAR(131) UNAL;
      164    12090    1   DCL 1 VX_MAP_UTS_HDR ALIGNED STATIC SYMDEF,
      165    12091    1         2 CHARS CHAR(132) UNAL INIT(' '),
      166    12092    1         2 CHARS_A(0:131) REDEF CHARS CHAR(1) UNAL,
      167    12093    1         2 LIT_BUF REDEF CHARS UNAL,
      168    12094    1           3 VFC CHAR(1) UNAL,
      169    12095    1           3 CHARS CHAR(131) UNAL;
      170    12096        /**/
      171    12097        /**/
      172    12098        %FPT_XCON( FPTN=FPT_XCON,
      173    12099                   UENTRY=VXX$CON,
      174    12100                   STCLASS=CONSTANT);
      175    12114
      176    12115        %FPT_TIME( DEST=LOCAL, SOURCE=UTS, TSTAMP="BIRTH_REC.CREATE_UTS" );
      177    12134        %B$RUBIRTH( NAME=BIRTH_REC, STCLASS=STATIC );
      178    12143    1   DCL VXX$CON         ENTRY     ASYNC;
      179    12144        /**/
      180    12145        %PLIST;
      181    12146        %SET LISTSUB='0'B;
      182    12147        %EJECT;
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:53   
      183    12148    1         IF VX_ONLINE = @YES THEN CALL M$XCON(FPT_XCON);

  12148  5 000002   000000 235000 xsym               LDA     VX_ONLINE
         5 000003   000001 115007                    CMPA    1,DL
         5 000004   000010 601000 5                  TNZ     s:12149

  12148  5 000005   000434 630400 2                  EPPR0   FPT_XCON
         5 000006   010003 713400                    CLIMB   4099
         5 000007   400400 401760                    pmme    nvectors=2

      184    12149    1         IF VX_COMMAND > 0 THEN VX_RU_HEAD_BUF = VX_RU_HEAD;

  12149  5 000010   000000 235000 xsym               LDA     VX_COMMAND
         5 000011   000016 600000 5                  TZE     s:12151

  12149  5 000012   000000 100400                    MLR     fill='000'O
         5 000013   000000 000240 xsym               ADSC9   VX_RU_HEAD               cn=0,n=160
         5 000014   000000 000240 xsym               ADSC9   VX_RU_HEAD_BUF           cn=0,n=160
         5 000015   000037 710000 5                  TRA     s:12158

      185    12150    2         ELSE DO;

      186    12151    2             VX_R_KEY_BUF.FORM0.COUNT = SIZEC( VX_R_KEY_HEAD );

  12151  5 000016   004000 236003                    LDQ     2048,DU
         5 000017   000000 552040 xsym               STBQ    VX_R_KEY_BUF,'40'O

      187    12152    2             VX_R_KEY_BUF.FORM0.CHARS = VX_R_KEY_HEAD;

  12152  5 000020   040000 100400                    MLR     fill='040'O
         5 000021   000000 000004 xsym               ADSC9   VX_R_KEY_HEAD            cn=0,n=4
         5 000022   000000 200005 xsym               ADSC9   VX_R_KEY_BUF             cn=1,n=5

      188    12153    2             CALL VXI$READ(      @RF,

  12153  5 000023   000000 236000 6                  LDQ     0
         5 000024   200040 756100                    STQ     @START$+1,,AUTO
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:54   
         5 000025   000002 237000 6                  LDAQ    2
         5 000026   200044 757100                    STAQ    @START$+5,,AUTO
         5 000027   200040 630500                    EPPR0   @START$+1,,AUTO
         5 000030   200043 450500                    STP0    @START$+4,,AUTO
         5 000031   000003 236000 6                  LDQ     3
         5 000032   200042 756100                    STQ     @START$+3,,AUTO
         5 000033   200042 630500                    EPPR0   @START$+3,,AUTO
         5 000034   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 000035   000000 701000 xent               TSX1    VXI$READ
         5 000036   001130 702000 5                  TSX2    NO_HEAD

      189    12154    2                     ADDR( VX_RU_HEAD_BUF ),
      190    12155    2                     SIZEW( VX_RU_HEAD_BUF ),
      191    12156    2                     @RF )          ALTRET( NO_HEAD );
      192    12157    2            END;

      193    12158    1         ROS_PAGES = ( VX_RU_HEAD_BUF.ROSIZE + @PAGE_SIZE1 ) / @PAGE_SIZE;

  12158  5 000037   000010 236000 xsym               LDQ     VX_RU_HEAD_BUF+8
         5 000040   777777 376007                    ANQ     -1,DL
         5 000041   001777 036007                    ADLQ    1023,DL
         5 000042   000012 772000                    QRL     10
         5 000043   200027 756100                    STQ     ROS_PAGES,,AUTO

      194    12159    1         SEG_PAGES = 0;

  12159  5 000044   200030 450100                    STZ     SEG_PAGES,,AUTO

      195    12160    2         DO I = 0 TO 5;

  12160  5 000045   200011 450100                    STZ     I,,AUTO

      196    12161    2             VX_SEG_EPAGE#(I) = ( VX_RU_HEAD_BUF.DATA_SEG.SIZ(I) + @PAGE_SIZE1 ) /
             12161                      @PAGE_SIZE;

  12161  5 000046   200011 720100                    LXL0    I,,AUTO
         5 000047   000012 236010 xsym               LDQ     VX_RU_HEAD_BUF+10,X0
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:55   
         5 000050   000022 772000                    QRL     18
         5 000051   001777 036007                    ADLQ    1023,DL
         5 000052   000012 772000                    QRL     10
         5 000053   000000 756010 xsym               STQ     VX_SEG_EPAGE#,X0

      197    12162    2             SEG_PAGES = SEG_PAGES + VX_SEG_EPAGE#(I);

  12162  5 000054   200030 236100                    LDQ     SEG_PAGES,,AUTO
         5 000055   000000 036010 xsym               ADLQ    VX_SEG_EPAGE#,X0
         5 000056   200030 756100                    STQ     SEG_PAGES,,AUTO

      198    12163    2            END;

  12163  5 000057   200011 235100                    LDA     I,,AUTO
         5 000060   000001 035007                    ADLA    1,DL
         5 000061   200011 755100                    STA     I,,AUTO
         5 000062   000006 115007                    CMPA    6,DL
         5 000063   000046 602000 5                  TNC     s:12161

      199    12164    1         TOTAL_PROGRAM_SIZE = ROS_PAGES + SEG_PAGES + VX_RU_HEAD_BUF.VPPGS

  12164  5 000064   200027 036100                    ADLQ    ROS_PAGES,,AUTO
         5 000065   200040 756100                    STQ     @START$+1,,AUTO
         5 000066   000001 236000 xsym               LDQ     VX_RU_HEAD_BUF+1
         5 000067   000026 772000                    QRL     22
         5 000070   200041 756100                    STQ     @START$+2,,AUTO
         5 000071   200040 236100                    LDQ     @START$+1,,AUTO
         5 000072   200041 036100                    ADLQ    @START$+2,,AUTO
         5 000073   200042 756100                    STQ     @START$+3,,AUTO
         5 000074   000002 236000 xsym               LDQ     VX_RU_HEAD_BUF+2
         5 000075   000026 772000                    QRL     22
         5 000076   200043 756100                    STQ     @START$+4,,AUTO
         5 000077   200042 236100                    LDQ     @START$+3,,AUTO
         5 000100   200043 036100                    ADLQ    @START$+4,,AUTO
         5 000101   200032 756100                    STQ     TOTAL_PROGRAM_SIZE,,AUTO

      200    12165    1                 + VX_RU_HEAD_BUF.VDPGS;
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:56   
      201    12166    1         IF VX_O.OPT.MAP <= 0

  12166  5 000102   000153 235000 xsym               LDA     VX_O+107
         5 000103   000157 605400 5                  TPNZ    s:12222
         5 000104   000000 235000 xsym               LDA     VX_ERR_SEV
         5 000105   000157 601000 5                  TNZ     s:12222
         5 000106   000002 235000 xsym               LDA     VX_ERRORS+2
         5 000107   000157 601000 5                  TNZ     s:12222

      202    12167    1                 AND
      203    12168    1                 VX_ERR_SEV <= 0
      204    12169    1                 AND VX_ERRORS.UNSAT.UNSAT_SECONDARY = 0
      205    12170    2         THEN DO;

      206    12171        /*E*  ERROR: VXM-E$TOTAL_PROGRAM_SIZE-0
      207    12172              MESSAGE: Total program size = %U1K.
      208    12173              DESCRIPTION: Self-explantory.
      209    12174        */
      210    12175                  %NUMBER( NUM1=TOTAL_PROGRAM_SIZE );

  12181  5 000110   000004 236000 6                  LDQ     4
         5 000111   200044 756100                    STQ     @START$+5,,AUTO
         5 000112   200032 630500                    EPPR0   TOTAL_PROGRAM_SIZE,,AUTO
         5 000113   200043 450500                    STP0    @START$+4,,AUTO
         5 000114   000005 236000 6                  LDQ     5
         5 000115   200042 756100                    STQ     @START$+3,,AUTO
         5 000116   000006 237000 6                  LDAQ    6
         5 000117   200040 757100                    STAQ    @START$+1,,AUTO
         5 000120   200040 630500                    EPPR0   @START$+1,,AUTO
         5 000121   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 000122   000000 701000 xent               TSX1    VXD$B2C
         5 000123   000000 011000                    NOP     0

      211    12192                  %SCREAM( ERR#=E$TOTAL_PROGRAM_SIZE, LEVEL=@E$I_VX, MID="'M'" );

  12193  5 000124   000012 630400 6                  EPPR0   10
         5 000125   000022 631400 xsym               EPPR1   B_VECTNIL+18
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:57   
         5 000126   000000 701000 xent               TSX1    VXE$ERROR
         5 000127   000000 011000                    NOP     0

      212    12195    3             IF VX_RU_HEAD.OVRL THEN DO ;

  12195  5 000130   000022 236000 xsym               LDQ     VX_RU_HEAD+18
         5 000131   000010 316003                    CANQ    8,DU
         5 000132   000156 600000 5                  TZE     s:12220

      213    12196    3                 TOTAL_NUMBER_NODES = VX_NODE_NUMBER + 1 ;

  12196  5 000133   000000 235000 xsym               LDA     VX_NODE_NUMBER
         5 000134   000001 035007                    ADLA    1,DL
         5 000135   200033 755100                    STA     TOTAL_NUMBER_NODES,,AUTO

      214    12197                      %NUMBER ( NUM1=TOTAL_NUMBER_NODES ) ;

  12203  5 000136   000004 236000 6                  LDQ     4
         5 000137   200044 756100                    STQ     @START$+5,,AUTO
         5 000140   200033 630500                    EPPR0   TOTAL_NUMBER_NODES,,AUTO
         5 000141   200043 450500                    STP0    @START$+4,,AUTO
         5 000142   000005 236000 6                  LDQ     5
         5 000143   200042 756100                    STQ     @START$+3,,AUTO
         5 000144   000006 237000 6                  LDAQ    6
         5 000145   200040 757100                    STAQ    @START$+1,,AUTO
         5 000146   200040 630500                    EPPR0   @START$+1,,AUTO
         5 000147   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 000150   000000 701000 xent               TSX1    VXD$B2C
         5 000151   000000 011000                    NOP     0

      215    12214                      %SCREAM ( ERR#=E$TOTAL_NUMBER_NODES,
      216    12215                      LEVEL=@E$I_VX,
      217    12216                      MID="'M'" ) ;

  12217  5 000152   000017 630400 6                  EPPR0   15
         5 000153   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 000154   000000 701000 xent               TSX1    VXE$ERROR
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:58   
         5 000155   000000 011000                    NOP     0

      218    12219    3                END ;

      219    12220    2             GOTO DONE;

  12220  5 000156   001123 710000 5                  TRA     DONE

      220    12221    2            END;
      221    12222    1         IMAGE_SIZE = VX_RU_HEAD_BUF.PRECSIZE;

  12222  5 000157   000006 235000 xsym               LDA     VX_RU_HEAD_BUF+6
         5 000160   000022 771000                    ARL     18
         5 000161   200017 755100                    STA     IMAGE_SIZE,,AUTO

      222    12223    1         VX_MAP_NUM = 0;

  12223  5 000162   000037 450000 3                  STZ     VX_MAP_NUM

      223    12224    1         CALL VXA$ND( VX_MAP$, ADDR(NIL) ); /* Get a node */

  12224  5 000163   000001 236000 xsym               LDQ     B_VECTNIL+1
         5 000164   200040 756100                    STQ     @START$+1,,AUTO
         5 000165   200040 630500                    EPPR0   @START$+1,,AUTO
         5 000166   200043 450500                    STP0    @START$+4,,AUTO
         5 000167   000023 236000 6                  LDQ     19
         5 000170   200042 756100                    STQ     @START$+3,,AUTO
         5 000171   200042 630500                    EPPR0   @START$+3,,AUTO
         5 000172   000020 631400 xsym               EPPR1   B_VECTNIL+16
         5 000173   000000 701000 xent               TSX1    VXA$ND
         5 000174   000000 011000                    NOP     0

      224    12225    1         VX_MAP_AREA_SIZE =

  12225  5 000175   000007 235000 xsym               LDA     VX_RU_HEAD_BUF+7
         5 000176   000022 771000                    ARL     18
         5 000177   200040 755100                    STA     @START$+1,,AUTO
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:59   
         5 000200   000006 236000 xsym               LDQ     VX_RU_HEAD_BUF+6
         5 000201   777777 376007                    ANQ     -1,DL
         5 000202   200040 036100                    ADLQ    @START$+1,,AUTO
         5 000203   200041 756100                    STQ     @START$+2,,AUTO
         5 000204   000007 236000 xsym               LDQ     VX_RU_HEAD_BUF+7
         5 000205   777777 376007                    ANQ     -1,DL
         5 000206   200042 756100                    STQ     @START$+3,,AUTO
         5 000207   200041 236100                    LDQ     @START$+2,,AUTO
         5 000210   200042 036100                    ADLQ    @START$+3,,AUTO
         5 000211   000010 235000 xsym               LDA     VX_RU_HEAD_BUF+8
         5 000212   000022 771000                    ARL     18
         5 000213   200043 755100                    STA     @START$+4,,AUTO
         5 000214   200043 036100                    ADLQ    @START$+4,,AUTO
         5 000215   000036 756000 3                  STQ     VX_MAP_AREA_SIZE

      225    12226    1                 VX_RU_HEAD_BUF.NRECSIZE
      226    12227    1                 +
      227    12228    1                 VX_RU_HEAD_BUF.EPRECSIZE
      228    12229    1                 +
      229    12230    1                 VX_RU_HEAD_BUF.EDRECSIZE
      230    12231    1                 +
      231    12232    1                 VX_RU_HEAD_BUF.SDRECSIZE;
      232    12233
      233    12234    1         VX_MAP_AREA_SIZE = VX_MAP_AREA_SIZE + VX_MAP_AREA_SIZE; /* Double for refs */

  12234  5 000216   000036 036000 3                  ADLQ    VX_MAP_AREA_SIZE
         5 000217   000036 756000 3                  STQ     VX_MAP_AREA_SIZE

      234    12235              %ALLOCATE(
      235    12236              PTR$=VX_MAP_AREA$,
      236    12237              TYPE=@MAP_DS,
      237    12238              SIZE=VX_MAP_AREA_SIZE);

  12239  5 000220   000004 236000 xsym               LDQ     VX_M_ALL+4
         5 000221   000004 136000 xsym               SBLQ    VX_M_FREE+4
         5 000222   000235 604000 5                  TMI     s:12243
         5 000223   000036 116000 3                  CMPQ    VX_MAP_AREA_SIZE
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:60   
         5 000224   000235 602000 5                  TNC     s:12243

  12240  5 000225   000004 236000 xsym               LDQ     VX_M_FREE+4
         5 000226   000022 736000                    QLS     18
         5 000227   000004 036000 xsym               ADLQ    VX_M_BASE_PTR+4
         5 000230   000034 756000 3                  STQ     VX_MAP_AREA$

  12241  5 000231   000004 236000 xsym               LDQ     VX_M_FREE+4
         5 000232   000036 036000 3                  ADLQ    VX_MAP_AREA_SIZE
         5 000233   000004 756000 xsym               STQ     VX_M_FREE+4

  12242  5 000234   000241 710000 5                  TRA     s:12245

  12243  5 000235   000024 630400 6                  EPPR0   20
         5 000236   000021 631400 xsym               EPPR1   B_VECTNIL+17
         5 000237   000000 701000 xent               TSX1    VXA$GET
         5 000240   000000 011000                    NOP     0

      238    12245    1         VX_MAP_REC_SIZE_A( 1 ) = VX_RU_HEAD_BUF.NRECSIZE; /* Set size */

  12245  5 000241   000006 236000 xsym               LDQ     VX_RU_HEAD_BUF+6
         5 000242   777777 376007                    ANQ     -1,DL
         5 000243   000041 756000 3                  STQ     VX_MAP_REC_SIZE_A+1

      239    12246    1         VX_MAP_REC_SIZE_A( 4 ) = VX_RU_HEAD_BUF.EPRECSIZE; /* Set size */

  12246  5 000244   000007 235000 xsym               LDA     VX_RU_HEAD_BUF+7
         5 000245   000022 771000                    ARL     18
         5 000246   000044 755000 3                  STA     VX_MAP_REC_SIZE_A+4

      240    12247    1         VX_MAP_REC_SIZE_A( 6 ) = VX_RU_HEAD_BUF.EDRECSIZE; /* Set size */

  12247  5 000247   000007 236000 xsym               LDQ     VX_RU_HEAD_BUF+7
         5 000250   777777 376007                    ANQ     -1,DL
         5 000251   000046 756000 3                  STQ     VX_MAP_REC_SIZE_A+6

      241    12248    1         VX_MAP_REC_SIZE_A( 8 ) = VX_RU_HEAD_BUF.SDRECSIZE; /* Set size */
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:61   

  12248  5 000252   000010 235000 xsym               LDA     VX_RU_HEAD_BUF+8
         5 000253   000022 771000                    ARL     18
         5 000254   000050 755000 3                  STA     VX_MAP_REC_SIZE_A+8

      242    12249        /**/
      243    12250    1         IF M$LO$ -> F$DCB.ASN# ~= 3 THEN VX_MAP_WIDTH = 49;

  12250  5 000255   000000 470400 xsym               LDP0    M$LO$
         5 000256   000032 236100                    LDQ     26,,PR0
         5 000257   777000 376007                    ANQ     -512,DL
         5 000260   003000 116007                    CMPQ    1536,DL
         5 000261   000265 600000 5                  TZE     s:12251

  12250  5 000262   000061 235007                    LDA     49,DL
         5 000263   000053 755000 3                  STA     VX_MAP_WIDTH
         5 000264   000271 710000 5                  TRA     s:12252

      244    12251    1         ELSE VX_MAP_WIDTH = M$LO$ -> F$DCB.WIDTH# - 31;

  12251  5 000265   000004 236100                    LDQ     4,,PR0
         5 000266   000777 376007                    ANQ     511,DL
         5 000267   000037 136007                    SBLQ    31,DL
         5 000270   000053 756000 3                  STQ     VX_MAP_WIDTH

      245    12252    1         IF VX_MAP_WIDTH < 41 THEN VX_MAP_WIDTH = 41;

  12252  5 000271   000053 235000 3                  LDA     VX_MAP_WIDTH
         5 000272   000051 115007                    CMPA    41,DL
         5 000273   000276 605000 5                  TPL     s:12253

  12252  5 000274   000051 236007                    LDQ     41,DL
         5 000275   000053 756000 3                  STQ     VX_MAP_WIDTH

      246    12253    1         VX_MAX_CTAB = 0;

  12253  5 000276   000055 450000 3                  STZ     VX_MAX_CTAB
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:62   

      247    12254    2         DO WHILE( VX_MAP_TABS_A(VX_MAX_CTAB) < VX_MAP_WIDTH );

  12254  5 000277   000055 720000 3                  LXL0    VX_MAX_CTAB
         5 000300   000427 236010 2                  LDQ     VX_MAP_TABS_A,X0
         5 000301   000313 604000 5                  TMI     s:12257
         5 000302   000053 116000 3                  CMPQ    VX_MAP_WIDTH
         5 000303   000313 605000 5                  TPL     s:12257

      248    12255    2             VX_MAX_CTAB = VX_MAX_CTAB + 1;

  12255  5 000304   000055 235000 3                  LDA     VX_MAX_CTAB
         5 000305   000001 035007                    ADLA    1,DL
         5 000306   000055 755000 3                  STA     VX_MAX_CTAB

      249    12256    2            END;                           /* Do while */

  12256  5 000307   000427 236005 2                  LDQ     VX_MAP_TABS_A,AL
         5 000310   000313 604000 5                  TMI     s:12257
         5 000311   000053 116000 3                  CMPQ    VX_MAP_WIDTH
         5 000312   000304 604000 5                  TMI     s:12255

      250    12257    1         IF VX_MAX_CTAB > 3 THEN VX_MAX_CTAB = 3;

  12257  5 000313   000055 235000 3                  LDA     VX_MAX_CTAB
         5 000314   000004 115007                    CMPA    4,DL
         5 000315   000320 602000 5                  TNC     s:12258

  12257  5 000316   000003 236007                    LDQ     3,DL
         5 000317   000055 756000 3                  STQ     VX_MAX_CTAB

      251    12258    1         VX_MAP_WIDTH = VX_MAP_WIDTH + 31;

  12258  5 000320   000037 236007                    LDQ     31,DL
         5 000321   000053 056000 3                  ASQ     VX_MAP_WIDTH

      252    12259        /**/
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:63   
      253    12260    2         IF VX_MAX_CTAB = 3 THEN DO;

  12260  5 000322   000055 235000 3                  LDA     VX_MAX_CTAB
         5 000323   000003 115007                    CMPA    3,DL
         5 000324   000350 601000 5                  TNZ     s:12272

      254    12261                                                /* Width is 133 columns */
      255    12262    2             VX_HDR_FIELD1 = 23;           /* *-*+2 */

  12262  5 000325   000027 235007                    LDA     23,DL
         5 000326   000117 755000 3                  STA     VX_HDR_FIELD1

      256    12263    2             VX_MAP_HDR0.CHARS        = FIRST_LP;

  12263  5 000327   040000 100400                    MLR     fill='040'O
         5 000330   000000 000144 2                  ADSC9   FIRST_LP                 cn=0,n=100
         5 000331   000121 000204 3                  ADSC9   VX_MAP_HDR0              cn=0,n=132

      257    12264    2             VX_MAP_HDR.CHARS         = HDR_LP;

  12264  5 000332   040000 100400                    MLR     fill='040'O
         5 000333   000053 000144 2                  ADSC9   HDR_LP                   cn=0,n=100
         5 000334   000162 000204 3                  ADSC9   VX_MAP_HDR               cn=0,n=132

      258    12265    2             VX_MAP_HDR1.CHARS        = NODE_HDR_LP;

  12265  5 000335   040000 100400                    MLR     fill='040'O
         5 000336   000126 000144 2                  ADSC9   NODE_HDR_LP              cn=0,n=100
         5 000337   000223 000204 3                  ADSC9   VX_MAP_HDR1              cn=0,n=132

      259    12266    2             VX_MAP_UTS_HDR.CHARS     = UTS_HDR_LP;

  12266  5 000340   040000 100400                    MLR     fill='040'O
         5 000341   000201 000144 2                  ADSC9   UTS_HDR_LP               cn=0,n=100
         5 000342   000264 000204 3                  ADSC9   VX_MAP_UTS_HDR           cn=0,n=132

      260    12267    2             VX_MAP_WIDTH_HDR         = SIZEV( FIRST_LP );
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:64   

  12267  5 000343   000143 235007                    LDA     99,DL
         5 000344   000054 755000 3                  STA     VX_MAP_WIDTH_HDR

      261    12268    2             J = 43;

  12268  5 000345   000053 235007                    LDA     43,DL
         5 000346   200012 755100                    STA     J,,AUTO

      262    12269    2            END;

  12269  5 000347   000372 710000 5                  TRA     s:12280

      263    12270    2         ELSE DO;

      264    12271                                                /* Width is 80 columns */
      265    12272    2             VX_HDR_FIELD1 = 9;            /* *-*+2 */

  12272  5 000350   000011 235007                    LDA     9,DL
         5 000351   000117 755000 3                  STA     VX_HDR_FIELD1

      266    12273    2             VX_MAP_HDR0.CHARS        = FIRST_TERM;

  12273  5 000352   040000 100400                    MLR     fill='040'O
         5 000353   000031 000110 2                  ADSC9   FIRST_TERM               cn=0,n=72
         5 000354   000121 000204 3                  ADSC9   VX_MAP_HDR0              cn=0,n=132

      267    12274    2             VX_MAP_HDR.CHARS         = HDR_TERM;

  12274  5 000355   040000 100400                    MLR     fill='040'O
         5 000356   000104 000110 2                  ADSC9   HDR_TERM                 cn=0,n=72
         5 000357   000162 000204 3                  ADSC9   VX_MAP_HDR               cn=0,n=132

      268    12275    2             VX_MAP_HDR1.CHARS        = NODE_HDR_TERM;

  12275  5 000360   040000 100400                    MLR     fill='040'O
         5 000361   000157 000110 2                  ADSC9   NODE_HDR_TERM            cn=0,n=72
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:65   
         5 000362   000223 000204 3                  ADSC9   VX_MAP_HDR1              cn=0,n=132

      269    12276    2             VX_MAP_UTS_HDR.CHARS     = UTS_HDR_TERM;

  12276  5 000363   040000 100400                    MLR     fill='040'O
         5 000364   000232 000110 2                  ADSC9   UTS_HDR_TERM             cn=0,n=72
         5 000365   000264 000204 3                  ADSC9   VX_MAP_UTS_HDR           cn=0,n=132

      270    12277    2             VX_MAP_WIDTH_HDR         = SIZEV( FIRST_TERM );

  12277  5 000366   000107 235007                    LDA     71,DL
         5 000367   000054 755000 3                  STA     VX_MAP_WIDTH_HDR

      271    12278    2             J = 29;

  12278  5 000370   000035 235007                    LDA     29,DL
         5 000371   200012 755100                    STA     J,,AUTO

      272    12279    2            END;

      273    12280    1         VX_HDR_FIELD2 = VX_HDR_FIELD1 + 39; /* Compute index to second field */

  12280  5 000372   000117 235000 3                  LDA     VX_HDR_FIELD1
         5 000373   000047 035007                    ADLA    39,DL
         5 000374   000120 755000 3                  STA     VX_HDR_FIELD2

      274    12281    2         IF VX_O.OPT.MAP >= 0 THEN DO;

  12281  5 000375   000153 235000 xsym               LDA     VX_O+107
         5 000376   000467 604000 5                  TMI     s:12297

      275    12282    2             I = VX_RU_HEAD_BUF.VERSION#;

  12282  5 000377   000011 236000 xsym               LDQ     VX_RU_HEAD_BUF+9
         5 000400   000033 772000                    QRL     27
         5 000401   200011 756100                    STQ     I,,AUTO

PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:66   
      276    12283    2             CALL INSERT(  VX_MAP_HDR0.CHARS, J, 3, LINK_VERSION#(I) );

  12283  5 000402   000003 402007                    MPY     3,DL
         5 000403   200012 235100                    LDA     J,,AUTO
         5 000404   040005 100406                    MLR     fill='040'O
         5 000405   000416 000003 2                  ADSC9   LINK_VERSION#,Q          cn=0,n=3
         5 000406   000121 000003 3                  ADSC9   VX_MAP_HDR0,A            cn=0,n=3

      277    12284                                                /* Move rf name in */
      278    12285    2             CALL INSERT( VX_MAP_HDR.CHARS, VX_HDR_FIELD1+8, M$RF$->F$DCB.NAME#.L,
             12285                      M$RF$->F$DCB.NAME#.C );

  12285  5 000407   000000 470400 xsym               LDP0    M$RF$
         5 000410   000010 236100                    LDQ     8,,PR0
         5 000411   000033 772000                    QRL     27
         5 000412   000000 620006                    EAX0    0,QL
         5 000413   000117 236000 3                  LDQ     VX_HDR_FIELD1
         5 000414   040046 100500                    MLR     fill='040'O
         5 000415   000010 200037                    ADSC9   8,,PR0                   cn=1,n=31
         5 000416   000164 000010 3                  ADSC9   VX_MAP_HDR+2,Q           cn=0,n=*X0

      279    12286                                                /* Move account in */
      280    12287    2             CALL INSERT( VX_MAP_HDR.CHARS, VX_HDR_FIELD2+8, @F_ACCT_SIZEC, M$RF$->
             12287                      F$DCB.ACCT# );

  12287  5 000417   000120 236000 3                  LDQ     VX_HDR_FIELD2
         5 000420   040006 100500                    MLR     fill='040'O
         5 000421   000020 000010                    ADSC9   16,,PR0                  cn=0,n=8
         5 000422   000164 000010 3                  ADSC9   VX_MAP_HDR+2,Q           cn=0,n=8

      281    12288    2             VX_R_KEY_BUF.FORM0.COUNT = SIZEC( VX_R_KEY_BIRTH );

  12288  5 000423   005000 236003                    LDQ     2560,DU
         5 000424   000000 552040 xsym               STBQ    VX_R_KEY_BUF,'40'O

      282    12289    2             VX_R_KEY_BUF.FORM0.CHARS = VX_R_KEY_BIRTH;

PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:67   
  12289  5 000425   040000 100400                    MLR     fill='040'O
         5 000426   000000 000005 xsym               ADSC9   VX_R_KEY_BIRTH           cn=0,n=5
         5 000427   000000 200005 xsym               ADSC9   VX_R_KEY_BUF             cn=1,n=5

      283    12290    2             CALL VXI$READ( @RF, ADDR(BIRTH_REC), SIZEW(BIRTH_REC), @RF ) ALTRET(
             12290                      NO_BIRTH_REC);

  12290  5 000430   000027 236000 6                  LDQ     23
         5 000431   200040 756100                    STQ     @START$+1,,AUTO
         5 000432   000030 237000 6                  LDAQ    24
         5 000433   200044 757100                    STAQ    @START$+5,,AUTO
         5 000434   200040 631500                    EPPR1   @START$+1,,AUTO
         5 000435   200043 451500                    STP1    @START$+4,,AUTO
         5 000436   000003 236000 6                  LDQ     3
         5 000437   200042 756100                    STQ     @START$+3,,AUTO
         5 000440   200042 630500                    EPPR0   @START$+3,,AUTO
         5 000441   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 000442   000000 701000 xent               TSX1    VXI$READ
         5 000443   001135 702000 5                  TSX2    NO_BIRTH_REC

      284    12291    2            FPT_TIME.DATE_ = VECTOR(SUBSTR(VX_MAP_UTS_HDR.CHARS, VX_HDR_FIELD1+8, 8));

  12291  5 000444   000032 235000 6                  LDA     26
         5 000445   000117 236000 3                  LDQ     VX_HDR_FIELD1
         5 000446   000020 736000                    QLS     16
         5 000447   000033 036000 6                  ADLQ    27
         5 000450   000330 757000 3                  STAQ    FPT_TIME+2

      285    12292    2            FPT_TIME.TIME_ = VECTOR( SUBSTR(VX_MAP_UTS_HDR.CHARS, VX_HDR_FIELD1+18, 11
             12292                      ));

  12292  5 000451   000034 235000 6                  LDA     28
         5 000452   000117 236000 3                  LDQ     VX_HDR_FIELD1
         5 000453   000020 736000                    QLS     16
         5 000454   000035 036000 6                  ADLQ    29
         5 000455   000332 757000 3                  STAQ    FPT_TIME+4

PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:68   
      286    12293    2             FPT_TIME.DAY_ = VECTOR( SUBSTR(VX_MAP_UTS_HDR.CHARS, VX_HDR_FIELD1+31, 3)
             12293                      );

  12293  5 000456   577640 235007                    LDA     -65632,DL
         5 000457   000117 236000 3                  LDQ     VX_HDR_FIELD1
         5 000460   000020 736000                    QLS     16
         5 000461   000036 036000 6                  ADLQ    30
         5 000462   000334 757000 3                  STAQ    FPT_TIME+6

      287    12294    2             CALL M$TIME( FPT_TIME );

  12294  5 000463   000326 630400 3                  EPPR0   FPT_TIME
         5 000464   020004 713400                    CLIMB   8196
         5 000465   402000 401760                    pmme    nvectors=5

      288    12295    2            END;                           /* If VX_O.OPT.MAP >= 0 then do; */

  12295  5 000466   000471 710000 5                  TRA     s:12299

      289    12296    2         ELSE DO;

      290    12297    2             VX_MAP_HDR1.LIT_BUF.VFC  = 'r';

  12297  5 000467   162000 236003                    LDQ     58368,DU
         5 000470   000223 552040 3                  STBQ    VX_MAP_HDR1,'40'O

      291    12298    2            END;                           /* Else do */

      292    12299    2         IF VX_RU_HEAD_BUF.ROSIZE ~= 0 THEN DO;

  12299  5 000471   000010 720000 xsym               LXL0    VX_RU_HEAD_BUF+8
         5 000472   000761 600000 5                  TZE     s:12374

      293    12300    2             PAGE# = VX_RU_HEAD_BUF.TREEDISP / IMAGE_SIZE;

  12300  5 000473   000005 236000 xsym               LDQ     VX_RU_HEAD_BUF+5
         5 000474   000022 772000                    QRL     18
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:69   
         5 000475   200017 506100                    DIV     IMAGE_SIZE,,AUTO
         5 000476   200015 756100                    STQ     PAGE#,,AUTO

      294    12301    2             ADR = PAGE# * IMAGE_SIZE;

  12301  5 000477   200017 402100                    MPY     IMAGE_SIZE,,AUTO
         5 000500   200016 756100                    STQ     ADR,,AUTO

      295    12302                  %ALLOCATE(
      296    12303                  PTR$=VX_MAP_ROS$,
      297    12304                  TYPE=@MAP_ROS_DS,
      298    12305                  SIZE=IMAGE_SIZE);

  12306  5 000501   000005 236000 xsym               LDQ     VX_M_ALL+5
         5 000502   000005 136000 xsym               SBLQ    VX_M_FREE+5
         5 000503   200017 116100                    CMPQ    IMAGE_SIZE,,AUTO
         5 000504   000515 604000 5                  TMI     s:12310

  12307  5 000505   000005 236000 xsym               LDQ     VX_M_FREE+5
         5 000506   000022 736000                    QLS     18
         5 000507   000005 036000 xsym               ADLQ    VX_M_BASE_PTR+5
         5 000510   000033 756000 3                  STQ     VX_MAP_ROS$

  12308  5 000511   000005 236000 xsym               LDQ     VX_M_FREE+5
         5 000512   200017 036100                    ADLQ    IMAGE_SIZE,,AUTO
         5 000513   000005 756000 xsym               STQ     VX_M_FREE+5

  12309  5 000514   000525 710000 5                  TRA     s:12312

  12310  5 000515   200017 630500                    EPPR0   IMAGE_SIZE,,AUTO
         5 000516   200042 450500                    STP0    @START$+3,,AUTO
         5 000517   000040 237000 6                  LDAQ    32
         5 000520   200040 757100                    STAQ    @START$+1,,AUTO
         5 000521   200040 630500                    EPPR0   @START$+1,,AUTO
         5 000522   000021 631400 xsym               EPPR1   B_VECTNIL+17
         5 000523   000000 701000 xent               TSX1    VXA$GET
         5 000524   000000 011000                    NOP     0
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:70   

      299    12312    2             CALL VXK$KEY( @RF, 30, 0, ADR );

  12312  5 000525   200016 630500                    EPPR0   ADR,,AUTO
         5 000526   200043 450500                    STP0    @START$+4,,AUTO
         5 000527   000007 236000 6                  LDQ     7
         5 000530   200042 756100                    STQ     @START$+3,,AUTO
         5 000531   000044 237000 6                  LDAQ    36
         5 000532   200040 757100                    STAQ    @START$+1,,AUTO
         5 000533   200040 630500                    EPPR0   @START$+1,,AUTO
         5 000534   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 000535   000000 701000 xent               TSX1    VXK$KEY
         5 000536   000000 011000                    NOP     0

      300    12313    2             CALL VXI$READ( @RF, VX_MAP_ROS$, IMAGE_SIZE, @RF )    ALTRET( IO_ERROR );

  12313  5 000537   000003 236000 6                  LDQ     3
         5 000540   200043 756100                    STQ     @START$+4,,AUTO
         5 000541   200017 630500                    EPPR0   IMAGE_SIZE,,AUTO
         5 000542   200042 450500                    STP0    @START$+3,,AUTO
         5 000543   000046 237000 6                  LDAQ    38
         5 000544   200040 757100                    STAQ    @START$+1,,AUTO
         5 000545   200040 630500                    EPPR0   @START$+1,,AUTO
         5 000546   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 000547   000000 701000 xent               TSX1    VXI$READ
         5 000550   001151 702000 5                  TSX2    IO_ERROR

      301    12314    2             START$ = PINCRW( VX_MAP_ROS$, VX_RU_HEAD_BUF.TREEDISP - ADR );

  12314  5 000551   000005 236000 xsym               LDQ     VX_RU_HEAD_BUF+5
         5 000552   000022 772000                    QRL     18
         5 000553   200016 136100                    SBLQ    ADR,,AUTO
         5 000554   000022 736000                    QLS     18
         5 000555   000033 036000 3                  ADLQ    VX_MAP_ROS$
         5 000556   200003 756100                    STQ     START$,,AUTO

      302    12315    2             DIFF = VX_RU_HEAD_BUF.TREEDISP + START$ -> VX$TREE_HEADER.SIZE
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:71   

  12315  5 000557   200003 470500                    LDP0    START$,,AUTO
         5 000560   000000 236100                    LDQ     0,,PR0
         5 000561   777777 376007                    ANQ     -1,DL
         5 000562   200040 756100                    STQ     @START$+1,,AUTO
         5 000563   000005 236000 xsym               LDQ     VX_RU_HEAD_BUF+5
         5 000564   000022 772000                    QRL     18
         5 000565   200040 036100                    ADLQ    @START$+1,,AUTO
         5 000566   200041 756100                    STQ     @START$+2,,AUTO
         5 000567   200016 236100                    LDQ     ADR,,AUTO
         5 000570   000000 036000 xsym               ADLQ    VX_IO_SIZEW
         5 000571   200042 756100                    STQ     @START$+3,,AUTO
         5 000572   200041 236100                    LDQ     @START$+2,,AUTO
         5 000573   200042 136100                    SBLQ    @START$+3,,AUTO
         5 000574   200022 756100                    STQ     DIFF,,AUTO

      303    12316    2                     - ( ADR + VX_IO_SIZEW );
      304    12317    2             NEXT$ = VX_MAP_ROS$;

  12317  5 000575   000033 236000 3                  LDQ     VX_MAP_ROS$
         5 000576   200007 756100                    STQ     NEXT$,,AUTO

      305    12318    3             DO WHILE( DIFF > 0 );

  12318  5 000577   200022 235100                    LDA     DIFF,,AUTO
         5 000600   000667 604400 5                  TMOZ    s:12335

      306    12319    3                 NEXT$ = PINCRW( NEXT$, VX_IO_SIZEW );

  12319  5 000601   000000 236000 xsym               LDQ     VX_IO_SIZEW
         5 000602   000022 736000                    QLS     18
         5 000603   200007 036100                    ADLQ    NEXT$,,AUTO
         5 000604   200007 756100                    STQ     NEXT$,,AUTO

      307    12320    3                 ADR   = ADR + VX_IO_SIZEW;

  12320  5 000605   200016 236100                    LDQ     ADR,,AUTO
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:72   
         5 000606   000000 036000 xsym               ADLQ    VX_IO_SIZEW
         5 000607   200016 756100                    STQ     ADR,,AUTO

      308    12321                      %ALLOCATE(
      309    12322                      PTR$=Q$,
      310    12323                      TYPE=@MAP_ROS_DS,
      311    12324                      SIZE=VX_IO_SIZEW);

  12325  5 000610   000005 236000 xsym               LDQ     VX_M_ALL+5
         5 000611   000005 136000 xsym               SBLQ    VX_M_FREE+5
         5 000612   000000 116000 xsym               CMPQ    VX_IO_SIZEW
         5 000613   000624 604000 5                  TMI     s:12329

  12326  5 000614   000005 236000 xsym               LDQ     VX_M_FREE+5
         5 000615   000022 736000                    QLS     18
         5 000616   000005 036000 xsym               ADLQ    VX_M_BASE_PTR+5
         5 000617   200005 756100                    STQ     Q$,,AUTO

  12327  5 000620   000005 236000 xsym               LDQ     VX_M_FREE+5
         5 000621   000000 036000 xsym               ADLQ    VX_IO_SIZEW
         5 000622   000005 756000 xsym               STQ     VX_M_FREE+5

  12328  5 000623   000636 710000 5                  TRA     s:12331

  12329  5 000624   000043 236000 6                  LDQ     35
         5 000625   200042 756100                    STQ     @START$+3,,AUTO
         5 000626   000041 236000 6                  LDQ     33
         5 000627   200041 756100                    STQ     @START$+2,,AUTO
         5 000630   200005 630500                    EPPR0   Q$,,AUTO
         5 000631   200040 450500                    STP0    @START$+1,,AUTO
         5 000632   200040 630500                    EPPR0   @START$+1,,AUTO
         5 000633   000021 631400 xsym               EPPR1   B_VECTNIL+17
         5 000634   000000 701000 xent               TSX1    VXA$GET
         5 000635   000000 011000                    NOP     0

      312    12331    3                 CALL VXK$KEY( @RF, 30, 0, ADR );

PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:73   
  12331  5 000636   200016 630500                    EPPR0   ADR,,AUTO
         5 000637   200043 450500                    STP0    @START$+4,,AUTO
         5 000640   000007 236000 6                  LDQ     7
         5 000641   200042 756100                    STQ     @START$+3,,AUTO
         5 000642   000044 237000 6                  LDAQ    36
         5 000643   200040 757100                    STAQ    @START$+1,,AUTO
         5 000644   200040 630500                    EPPR0   @START$+1,,AUTO
         5 000645   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 000646   000000 701000 xent               TSX1    VXK$KEY
         5 000647   000000 011000                    NOP     0

      313    12332    3                 CALL VXI$READ( @RF, NEXT$, IMAGE_SIZE, @RF )  ALTRET( IO_ERROR );

  12332  5 000650   000003 236000 6                  LDQ     3
         5 000651   200043 756100                    STQ     @START$+4,,AUTO
         5 000652   200017 630500                    EPPR0   IMAGE_SIZE,,AUTO
         5 000653   200042 450500                    STP0    @START$+3,,AUTO
         5 000654   200007 631500                    EPPR1   NEXT$,,AUTO
         5 000655   200041 451500                    STP1    @START$+2,,AUTO
         5 000656   200040 756100                    STQ     @START$+1,,AUTO
         5 000657   200040 630500                    EPPR0   @START$+1,,AUTO
         5 000660   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 000661   000000 701000 xent               TSX1    VXI$READ
         5 000662   001151 702000 5                  TSX2    IO_ERROR

      314    12333    3                 DIFF = DIFF - VX_IO_SIZEW;

  12333  5 000663   200022 236100                    LDQ     DIFF,,AUTO
         5 000664   000000 136000 xsym               SBLQ    VX_IO_SIZEW
         5 000665   200022 756100                    STQ     DIFF,,AUTO

      315    12334    3                END;

  12334  5 000666   000601 605400 5                  TPNZ    s:12319

      316    12335    2             VX_MAP_TREE_START$ = START$;

PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:74   
  12335  5 000667   200003 236100                    LDQ     START$,,AUTO
         5 000670   000035 756000 3                  STQ     VX_MAP_TREE_START$

      317    12336    2             START$ = PINCRW( START$,  SIZEW( VX$TREE_HEADER ) );

  12336  5 000671   000003 036003                    ADLQ    3,DU
         5 000672   200003 756100                    STQ     START$,,AUTO

      318    12337        /*
      319    12338                          Print allocation summary
      320    12339        */
      321    12340    2             CALL ALLOCATION_SUMMARY( START$ );

  12340  5 000673   200003 630500                    EPPR0   START$,,AUTO
         5 000674   200037 450500                    STP0    MOVE_SIZE+3,,AUTO
         5 000675   001156 701000 5                  TSX1    ALLOCATION_SUMMARY
         5 000676   000000 011000                    NOP     0

      322    12341        /*
      323    12342                          Print overlay summary
      324    12343        */
      325    12344    2             IF  (START$ -> VX$TREE_NODE.FORWARD# > 0)  AND  (VX_O.OPT.MAP  >= 0)

  12344  5 000677   200003 470500                    LDP0    START$,,AUTO
         5 000700   000002 220100                    LDX0    2,,PR0
         5 000701   000712 604400 5                  TMOZ    s:12349
         5 000702   000153 235000 xsym               LDA     VX_O+107
         5 000703   000712 604000 5                  TMI     s:12349

      326    12345    2             THEN CALL VXM$OVERLAY( START$ );

  12345  5 000704   200003 631500                    EPPR1   START$,,AUTO
         5 000705   200040 451500                    STP1    @START$+1,,AUTO
         5 000706   200040 630500                    EPPR0   @START$+1,,AUTO
         5 000707   000017 631400 xsym               EPPR1   B_VECTNIL+15
         5 000710   000000 701000 xent               TSX1    VXM$OVERLAY
         5 000711   000000 011000                    NOP     0
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:75   

      327    12346        /*
      328    12347                          Print map
      329    12348        */
      330    12349    2             CALL INSERT( VX_MAP_HDR0.CHARS, VX_HDR_FIELD1+34, 20, ' ' );

  12349  5 000712   000117 235000 3                  LDA     VX_HDR_FIELD1
         5 000713   040005 100400                    MLR     fill='040'O
         5 000714   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         5 000715   000131 400024 3                  ADSC9   VX_MAP_HDR0+8,A          cn=2,n=20

      331    12350    2             VX_MAP_NUM = 0;

  12350  5 000716   000037 450000 3                  STZ     VX_MAP_NUM

      332    12351    2             VX_CURR$ = START$;

  12351  5 000717   200003 236100                    LDQ     START$,,AUTO
         5 000720   000000 756000 xsym               STQ     VX_CURR$

      333    12352    2   NEXT:
      334    12353    2             CALL VXM$NODE;

  12353  5 000721   000002 631400 xsym  NEXT         EPPR1   B_VECTNIL+2
         5 000722   000000 701000 xent               TSX1    VXM$NODE
         5 000723   000000 011000                    NOP     0

      335    12354    2             VX_MAP_NUM = VX_CURR$ -> VX$TREE_NODE.FORWARD#;

  12354  5 000724   000000 470400 xsym               LDP0    VX_CURR$
         5 000725   000002 236100                    LDQ     2,,PR0
         5 000726   000022 732000                    QRS     18
         5 000727   000037 756000 3                  STQ     VX_MAP_NUM

      336    12355    3             IF VX_MAP_NUM > 0 THEN DO;

  12355  5 000730   000735 604400 5                  TMOZ    CLIMB
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:76   

      337    12356    3                 VX_CURR$ = PINCRW( START$, VX_MAP_NUM * SIZEW( VX$TREE_NODE) );

  12356  5 000731   000006 402003                    MPY     6,DU
         5 000732   200003 036100                    ADLQ    START$,,AUTO
         5 000733   000000 756000 xsym               STQ     VX_CURR$

      338    12357    3                END;

  12357  5 000734   000760 710000 5                  TRA     s:12371

      339    12358    3             ELSE DO;

      340    12359    3   CLIMB:
      341    12360    3                 VX_MAP_NUM = VX_CURR$ -> VX$TREE_NODE.OVERLAY#;

  12360  5 000735   000000 470400 xsym  CLIMB        LDP0    VX_CURR$
         5 000736   000002 236100                    LDQ     2,,PR0
         5 000737   000022 736000                    QLS     18
         5 000740   000022 732000                    QRS     18
         5 000741   000037 756000 3                  STQ     VX_MAP_NUM

      342    12361    4                 IF VX_MAP_NUM > 0 THEN DO;

  12361  5 000742   000747 604400 5                  TMOZ    s:12365

      343    12362    4                     VX_CURR$ = PINCRW( START$, VX_MAP_NUM * SIZEW( VX$TREE_NODE ) );

  12362  5 000743   000006 402003                    MPY     6,DU
         5 000744   200003 036100                    ADLQ    START$,,AUTO
         5 000745   000000 756000 xsym               STQ     VX_CURR$

      344    12363    4                    END;

  12363  5 000746   000760 710000 5                  TRA     s:12371

      345    12364    4                 ELSE DO;
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:77   

      346    12365    4                     VX_MAP_NUM = VX_CURR$ -> VX$TREE_NODE.BACK#;

  12365  5 000747   000001 236100                    LDQ     1,,PR0
         5 000750   000022 736000                    QLS     18
         5 000751   000022 732000                    QRS     18
         5 000752   000037 756000 3                  STQ     VX_MAP_NUM

      347    12366    4                     IF VX_MAP_NUM <=0 THEN GOTO DONE;

  12366  5 000753   001123 604400 5                  TMOZ    DONE

      348    12367    4                     VX_CURR$ = PINCRW( START$, VX_MAP_NUM * SIZEW( VX$TREE_NODE) );

  12367  5 000754   000006 402003                    MPY     6,DU
         5 000755   200003 036100                    ADLQ    START$,,AUTO
         5 000756   000000 756000 xsym               STQ     VX_CURR$

      349    12368    4                     GOTO CLIMB;

  12368  5 000757   000735 710000 5                  TRA     CLIMB

      350    12369    4                    END;
      351    12370    3                END;
      352    12371    2             GOTO NEXT;

  12371  5 000760   000721 710000 5                  TRA     NEXT

      353    12372    2            END;                       /* If VX_RU_HEAD_BUF.ROS_SIZE ~= 0 ... */
      354    12373    2         ELSE DO;                          /* No read only segment */

      355    12374    2             L =

  12374  5 000761   000036 236000 xsym               LDQ     VX_OK+30
         5 000762   000033 772000                    QRL     27
         5 000763   000004 036007                    ADLQ    4,DL
         5 000764   000002 772000                    QRL     2
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:78   
         5 000765   200014 756100                    STQ     L,,AUTO

      356    12375                          %TEXTC_SIZEW( CNT="VX_OK.FILE.RFNAME.COUNT");
      357    12378    2             ;
      358    12379    2             L = L + SIZEW( VX$TREE_HEADER) + SIZEW( VX$TREE_NODE );

  12379  5 000766   000011 036007                    ADLQ    9,DL
         5 000767   200014 756100                    STQ     L,,AUTO

      359    12380                  %ALLOCATE(
      360    12381                  PTR$=VX_MAP_TREE_START$,
      361    12382                  TYPE=@GDP,
      362    12383                  SIZE=L);

  12384  5 000770   000010 236000 xsym               LDQ     VX_M_ALL+8
         5 000771   000010 136000 xsym               SBLQ    VX_M_FREE+8
         5 000772   001005 604000 5                  TMI     s:12388
         5 000773   200014 116100                    CMPQ    L,,AUTO
         5 000774   001005 602000 5                  TNC     s:12388

  12385  5 000775   000010 236000 xsym               LDQ     VX_M_FREE+8
         5 000776   000022 736000                    QLS     18
         5 000777   000010 036000 xsym               ADLQ    VX_M_BASE_PTR+8
         5 001000   000035 756000 3                  STQ     VX_MAP_TREE_START$

  12386  5 001001   000010 236000 xsym               LDQ     VX_M_FREE+8
         5 001002   200014 036100                    ADLQ    L,,AUTO
         5 001003   000010 756000 xsym               STQ     VX_M_FREE+8

  12387  5 001004   001015 710000 5                  TRA     s:12390

  12388  5 001005   200014 630500                    EPPR0   L,,AUTO
         5 001006   200042 450500                    STP0    @START$+3,,AUTO
         5 001007   000050 237000 6                  LDAQ    40
         5 001010   200040 757100                    STAQ    @START$+1,,AUTO
         5 001011   200040 630500                    EPPR0   @START$+1,,AUTO
         5 001012   000021 631400 xsym               EPPR1   B_VECTNIL+17
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:79   
         5 001013   000000 701000 xent               TSX1    VXA$GET
         5 001014   000000 011000                    NOP     0

      363    12390    2             VX_CURR$ = PINCRW( VX_MAP_TREE_START$, SIZEW( VX$TREE_HEADER ) );

  12390  5 001015   000035 236000 3                  LDQ     VX_MAP_TREE_START$
         5 001016   000003 036003                    ADLQ    3,DU
         5 001017   000000 756000 xsym               STQ     VX_CURR$

      364    12391    2             VX_CURR$ -> VX$TREE_NODE = '0'B;

  12391  5 001020   000000 470400 xsym               LDP0    VX_CURR$
         5 001021   000100 100400                    MLR     fill='000'O
         5 001022   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         5 001023   000000 000030                    ADSC9   0,,PR0                   cn=0,n=24

      365    12392    2             P$ = PINCRW( VX_CURR$, SIZEW( VX$TREE_NODE ) );

  12392  5 001024   000000 236000 xsym               LDQ     VX_CURR$
         5 001025   000006 036003                    ADLQ    6,DU
         5 001026   200004 756100                    STQ     P$,,AUTO

      366    12393    2             ADDR( VX_CURR$ -> VX$TREE_NODE.NAME$ ) -> VX$HALF_A(0) =

  12393  5 001027   000035 235000 3                  LDA     VX_MAP_TREE_START$
         5 001030   000022 771000                    ARL     18
         5 001031   200040 755100                    STA     @START$+1,,AUTO
         5 001032   200004 236100                    LDQ     P$,,AUTO
         5 001033   000022 772000                    QRL     18
         5 001034   200040 136100                    SBLQ    @START$+1,,AUTO
         5 001035   000000 620006                    EAX0    0,QL
         5 001036   000000 470400 xsym               LDP0    VX_CURR$
         5 001037   000000 740100                    STX0    0,,PR0

      367    12394    2                     POFFW( P$, VX_MAP_TREE_START$ );
      368    12395    2             VX_CURR$ -> VX$TREE_NODE.DADDR = VX_RU_HEAD_BUF.BIAS;

PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:80   
  12395  5 001040   000023 720000 xsym               LXL0    VX_RU_HEAD_BUF+19
         5 001041   777777 360003                    ANX0    -1,DU
         5 001042   000000 470400 xsym               LDP0    VX_CURR$
         5 001043   000004 740100                    STX0    4,,PR0

      369    12396    2             VX_CURR$ -> VX$TREE_NODE.DSIZE = VX_RU_HEAD_BUF.RDATA;

  12396  5 001044   000002 721000 xsym               LXL1    VX_RU_HEAD_BUF+2
         5 001045   777777 361003                    ANX1    -1,DU
         5 001046   000004 441100                    SXL1    4,,PR0

      370    12397    2             VX_CURR$ -> VX$TREE_NODE.PADDR =

  12397  5 001047   000002 236000 xsym               LDQ     VX_RU_HEAD_BUF+2
         5 001050   000052 376000 6                  ANQ     42
         5 001051   200040 756100                    STQ     @START$+1,,AUTO
         5 001052   000023 236000 xsym               LDQ     VX_RU_HEAD_BUF+19
         5 001053   000052 376000 6                  ANQ     42
         5 001054   200040 036100                    ADLQ    @START$+1,,AUTO
         5 001055   200017 036100                    ADLQ    IMAGE_SIZE,,AUTO
         5 001056   000001 136007                    SBLQ    1,DL
         5 001057   200017 506100                    DIV     IMAGE_SIZE,,AUTO
         5 001060   200017 402100                    MPY     IMAGE_SIZE,,AUTO
         5 001061   000000 620006                    EAX0    0,QL
         5 001062   000003 740100                    STX0    3,,PR0

      371    12398    2                     ( VX_RU_HEAD_BUF.BIAS+VX_RU_HEAD_BUF.RDATA+IMAGE_SIZE-1)/
             12398                              IMAGE_SIZE * IMAGE_SIZE;
      372    12399    2             VX_CURR$ -> VX$TREE_NODE.PSIZE = VX_RU_HEAD_BUF.RPROC;

  12399  5 001063   000001 722000 xsym               LXL2    VX_RU_HEAD_BUF+1
         5 001064   777777 362003                    ANX2    -1,DU
         5 001065   000003 442100                    SXL2    3,,PR0

      373    12400    2             CALL INDEX(L,'.',ADDR(VX_OK.FILE.RFNAME)->T$C.CHARS) ALTRET(NOT_FOUND);

  12400  5 001066   000036 236000 xsym               LDQ     VX_OK+30
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:81   
         5 001067   000033 772000                    QRL     27
         5 001070   000000 623006                    EAX3    0,QL
         5 001071   000000 124440                    SCM     mask='000'O
         5 001072   000036 200013 xsym               ADSC9   VX_OK+30                 cn=1,n=*X3
         5 001073   000053 000001 6                  ADSC9   43                       cn=0,n=1
         5 001074   200014 000100                    ARG     L,,AUTO
         5 001075   001124 606400 5                  TTN     NOT_FOUND

      374    12401    2   SET_COUNT:
      375    12402    2             P$ -> T$C.COUNT = L;

  12402  5 001076   200004 470500       SET_COUNT    LDP0    P$,,AUTO
         5 001077   200014 236100                    LDQ     L,,AUTO
         5 001100   000033 736000                    QLS     27
         5 001101   000000 552140                    STBQ    0,'40'O,PR0

      376    12403    2             P$ -> T$C.CHARS = VX_OK.FILE.RFNAME.CHARS;

  12403  5 001102   000000 236100                    LDQ     0,,PR0
         5 001103   000033 772000                    QRL     27
         5 001104   000000 620006                    EAX0    0,QL
         5 001105   040140 100400                    MLR     fill='040'O
         5 001106   000036 200050 xsym               ADSC9   VX_OK+30                 cn=1,n=40
         5 001107   000000 200010                    ADSC9   0,,PR0                   cn=1,n=*X0

      377    12404    2             CALL ALLOCATION_SUMMARY( VX_CURR$ );

  12404  5 001110   000054 236000 6                  LDQ     44
         5 001111   200037 756100                    STQ     MOVE_SIZE+3,,AUTO
         5 001112   001156 701000 5                  TSX1    ALLOCATION_SUMMARY
         5 001113   000000 011000                    NOP     0

      378    12405    2             CALL INSERT( VX_MAP_HDR0.CHARS, VX_HDR_FIELD1+34, 20, ' ' );

  12405  5 001114   000117 235000 3                  LDA     VX_HDR_FIELD1
         5 001115   040005 100400                    MLR     fill='040'O
         5 001116   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:82   
         5 001117   000131 400024 3                  ADSC9   VX_MAP_HDR0+8,A          cn=2,n=20

      379    12406    2             CALL VXM$NODE;

  12406  5 001120   000002 631400 xsym               EPPR1   B_VECTNIL+2
         5 001121   000000 701000 xent               TSX1    VXM$NODE
         5 001122   000000 011000                    NOP     0

      380    12407    2            END;

      381    12408    1   DONE:
      382    12409    1         RETURN;

  12409  5 001123   000000 702200 xent  DONE         TSX2  ! X66_ARET

      383    12410    1   NOT_FOUND:
      384    12411    1         L = VX_OK.FILE.RFNAME.COUNT;

  12411  5 001124   000036 236000 xsym  NOT_FOUND    LDQ     VX_OK+30
         5 001125   000033 772000                    QRL     27
         5 001126   200014 756100                    STQ     L,,AUTO

      385    12412    1         GOTO SET_COUNT;

  12412  5 001127   001076 710000 5                  TRA     SET_COUNT

      386    12413        %EJECT;
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:83   
      387    12414    1   NO_HEAD:
      388    12415        /*E*  ERROR: VXM-E$MAP_NO_HEAD_VX-0
      389    12416              MESSAGE: Unable to read head record for map.
      390    12417              DESCRIPTION: Self-explanatory.
      391    12418        */
      392    12419              %SCREAM(
      393    12420              ERR#=E$MAP_NO_HEAD_VX,
      394    12421              MID="'M'",
      395    12422              LEVEL=@E$F_D_VX);

  12423  5 001130   000057 630400 6     NO_HEAD      EPPR0   47
         5 001131   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 001132   000000 701000 xent               TSX1    VXE$ERROR
         5 001133   000000 011000                    NOP     0

      396    12425    2         DO WHILE( '0'B );

  12425  5 001134   001141 710000 5                  TRA     MAP_IO_ERROR

      397    12426    2   NO_BIRTH_REC:
      398    12427        /*E*  ERROR: VXM-E$MAP_NO_BIRTH_VX-0
      399    12428              MESSAGE: I/O error while attempting BIRTH record read for map.
      400    12429              DESCRIPTION: Self-explanatory.
      401    12430        */
      402    12431                  %SCREAM( ERR#=E$MAP_NO_BIRTH_VX, LEVEL=@E$F_D_VX, MID="'M'" );

  12432  5 001135   000064 630400 6     NO_BIRTH_REC EPPR0   52
         5 001136   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 001137   000000 701000 xent               TSX1    VXE$ERROR
         5 001140   000000 011000                    NOP     0

      403    12434    2            END;

  12426  5 001141                       MAP_IO_ERROR null
      404    12435    1   MAP_IO_ERROR: ;
      405    12436    1   DO_MERC:
      406    12437    1         CALL M$MERC                             ALTRET(MERC_ERROR);
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:84   

  12437  5 001141   410007 713400       DO_MERC      CLIMB   alt,+4103
         5 001142   000000 401760                    pmme    nvectors=0
         5 001143   001146 702000 5                  TSX2    MERC_ERROR

      407    12438              %ERROR_IT;

  12439  5 001144   000002 713400                    CLIMB   err
         5 001145   000000 401760                    pmme    nvectors=0

      408    12441    1   MERC_ERROR:
      409    12442    1         CALL VXE$MERC;

  12442  5 001146   000002 631400 xsym  MERC_ERROR   EPPR1   B_VECTNIL+2
         5 001147   000000 701000 xent               TSX1    VXE$MERC
         5 001150   000000 011000                    NOP     0

      410    12443    1   IO_ERROR:
      411    12444        /*E*  ERROR: VXM-E$MAP_ROS_IO_ERROR_VX-0
      412    12445              MESSAGE: I/O error while attempting ROS record read for map.
      413    12446              DESCRIPTION: Self-explanatory.
      414    12447        */
      415    12448              %SCREAM(
      416    12449              ERR#=E$MAP_ROS_IO_ERROR_VX,
      417    12450              MID="'M'",
      418    12451              LEVEL=@E$F_D_VX);

  12452  5 001151   000071 630400 6     IO_ERROR     EPPR0   57
         5 001152   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 001153   000000 701000 xent               TSX1    VXE$ERROR
         5 001154   000000 011000                    NOP     0

      419    12454    1         GOTO DO_MERC;

  12454  5 001155   001141 710000 5                  TRA     MAP_IO_ERROR

      420    12455        %EJECT;
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:85   
      421    12456    1   ALLOCATION_SUMMARY: PROC( START$ );

  12456  5 001156   200036 741300       ALLOCATION_* STX1  ! MOVE_SIZE+2,,AUTO

      422    12457
      423    12458
      424    12459    2   DCL START$            PTR;
      425    12460
      426    12461        /*
      427    12462                          Print allocation summary
      428    12463        */
      429    12464    2         VX_MAP_LO_FPT_WRITE.BUF_.BOUND = VX_MAP_WIDTH_HDR;

  12464  5 001157   000054 236000 3                  LDQ     VX_MAP_WIDTH_HDR
         5 001160   000020 736000                    QLS     16
         5 001161   000006 676000 3                  ERQ     VX_MAP_LO_FPT_WRITE+4
         5 001162   000034 376000 xsym               ANQ     B_VECTNIL+28
         5 001163   000006 656000 3                  ERSQ    VX_MAP_LO_FPT_WRITE+4

      430    12465    3         IF VX_O.OPT.MAP >= 0 THEN DO;

  12465  5 001164   000153 235000 xsym               LDA     VX_O+107
         5 001165   002212 604000 5                  TMI     s:12725

      431    12466    3             VX_MAP_LO_FPT_WRITE.BUF_.BUF$ = ADDR( VX_MAP_HDR0 );

  12466  5 001166   000075 236000 6                  LDQ     61
         5 001167   000007 756000 3                  STQ     VX_MAP_LO_FPT_WRITE+5

      432    12467    3             CALL M$WRITE( VX_MAP_LO_FPT_WRITE)       ALTRET(MAP_IO_ERROR);

  12467  5 001170   000002 630400 3                  EPPR0   VX_MAP_LO_FPT_WRITE
         5 001171   440001 713400                    CLIMB   alt,write
         5 001172   401400 401760                    pmme    nvectors=4
         5 001173   002263 702000 5                  TSX2    MAP_IO_ERROR

      433    12468    3             VX_MAP_LO_FPT_WRITE.BUF_.BUF$ = ADDR( VX_MAP_HDR );
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:86   

  12468  5 001174   000076 236000 6                  LDQ     62
         5 001175   000007 756000 3                  STQ     VX_MAP_LO_FPT_WRITE+5

      434    12469    3             CALL M$WRITE( VX_MAP_LO_FPT_WRITE)       ALTRET(MAP_IO_ERROR);

  12469  5 001176   000002 630400 3                  EPPR0   VX_MAP_LO_FPT_WRITE
         5 001177   440001 713400                    CLIMB   alt,write
         5 001200   401400 401760                    pmme    nvectors=4
         5 001201   002263 702000 5                  TSX2    MAP_IO_ERROR

      435    12470    3             VX_MAP_LO_FPT_WRITE.BUF_.BUF$ = ADDR( VX_MAP_UTS_HDR );

  12470  5 001202   000077 236000 6                  LDQ     63
         5 001203   000007 756000 3                  STQ     VX_MAP_LO_FPT_WRITE+5

      436    12471    3             CALL M$WRITE( VX_MAP_LO_FPT_WRITE)       ALTRET(MAP_IO_ERROR);

  12471  5 001204   000002 630400 3                  EPPR0   VX_MAP_LO_FPT_WRITE
         5 001205   440001 713400                    CLIMB   alt,write
         5 001206   401400 401760                    pmme    nvectors=4
         5 001207   002263 702000 5                  TSX2    MAP_IO_ERROR

      437    12472    3             VX_MAP_LO_FPT_WRITE.BUF_.BUF$ = ADDR( VX_MBUF );

  12472  5 001210   000100 236000 6                  LDQ     64
         5 001211   000007 756000 3                  STQ     VX_MAP_LO_FPT_WRITE+5

      438    12473    3             VX_MAP_LO_FPT_WRITE.BUF_.BOUND = VX_MAP_WIDTH;

  12473  5 001212   000053 236000 3                  LDQ     VX_MAP_WIDTH
         5 001213   000020 736000                    QLS     16
         5 001214   000006 676000 3                  ERQ     VX_MAP_LO_FPT_WRITE+4
         5 001215   000034 376000 xsym               ANQ     B_VECTNIL+28
         5 001216   000006 656000 3                  ERSQ    VX_MAP_LO_FPT_WRITE+4

      439    12474    3             VX_MBUF.CHARS = 'A';
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:87   

  12474  5 001217   040000 100400                    MLR     fill='040'O
         5 001220   000101 000001 6                  ADSC9   65                       cn=0,n=1
         5 001221   000056 000204 3                  ADSC9   VX_MBUF                  cn=0,n=132

      440    12475                  %M_WRITE( CLEAR=" ", ZERO=" " );

  12477  5 001222   000002 630400 3                  EPPR0   VX_MAP_LO_FPT_WRITE
         5 001223   440001 713400                    CLIMB   alt,write
         5 001224   401400 401760                    pmme    nvectors=4
         5 001225   002263 702000 5                  TSX2    MAP_IO_ERROR

      441    12484                  %WR_LIT( MES1="BIAS_START_DCB" );

  12485  5 001226   000102 237000 6                  LDAQ    66
         5 001227   000022 757000 3                  STAQ    VX_MAP_LIT_LO_FPT_WRITE+4

  12486  5 001230   000016 630400 3                  EPPR0   VX_MAP_LIT_LO_FPT_WRITE
         5 001231   440001 713400                    CLIMB   alt,write
         5 001232   401400 401760                    pmme    nvectors=4
         5 001233   002263 702000 5                  TSX2    MAP_IO_ERROR

      442    12494    3             VX_MBUF.CHARS = 'B';

  12494  5 001234   040000 100400                    MLR     fill='040'O
         5 001235   000104 000001 6                  ADSC9   68                       cn=0,n=1
         5 001236   000056 000204 3                  ADSC9   VX_MBUF                  cn=0,n=132

      443    12495    3             L=VX_RU_HEAD_BUF.BIAS;

  12495  5 001237   000023 236000 xsym               LDQ     VX_RU_HEAD_BUF+19
         5 001240   000052 376000 6                  ANQ     42
         5 001241   200014 756100                    STQ     L,,AUTO

      444    12496    3             CALL VXD$B2C( VX_MBUF.CHARS_A, 1, 6, L, 8 );

  12496  5 001242   000051 236000 6                  LDQ     41
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:88   
         5 001243   200044 756100                    STQ     @START$+5,,AUTO
         5 001244   200014 630500                    EPPR0   L,,AUTO
         5 001245   200043 450500                    STP0    @START$+4,,AUTO
         5 001246   000105 236000 6                  LDQ     69
         5 001247   200042 756100                    STQ     @START$+3,,AUTO
         5 001250   000106 237000 6                  LDAQ    70
         5 001251   200040 757100                    STAQ    @START$+1,,AUTO
         5 001252   200040 630500                    EPPR0   @START$+1,,AUTO
         5 001253   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 001254   000000 701000 xent               TSX1    VXD$B2C
         5 001255   000000 011000                    NOP     0

      445    12497    3             L=VX_RU_HEAD_BUF.START;

  12497  5 001256   000003 236000 xsym               LDQ     VX_RU_HEAD_BUF+3
         5 001257   000052 376000 6                  ANQ     42
         5 001260   200014 756100                    STQ     L,,AUTO

      446    12498    3             CALL VXD$B2C( VX_MBUF.CHARS_A, 9, 6, L, 8 );

  12498  5 001261   000051 236000 6                  LDQ     41
         5 001262   200044 756100                    STQ     @START$+5,,AUTO
         5 001263   200014 630500                    EPPR0   L,,AUTO
         5 001264   200043 450500                    STP0    @START$+4,,AUTO
         5 001265   000105 236000 6                  LDQ     69
         5 001266   200042 756100                    STQ     @START$+3,,AUTO
         5 001267   000110 237000 6                  LDAQ    72
         5 001270   200040 757100                    STAQ    @START$+1,,AUTO
         5 001271   200040 630500                    EPPR0   @START$+1,,AUTO
         5 001272   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 001273   000000 701000 xent               TSX1    VXD$B2C
         5 001274   000000 011000                    NOP     0

      447    12499    3             L = VX_RU_HEAD_BUF.SEV;

  12499  5 001275   000003 236000 xsym               LDQ     VX_RU_HEAD_BUF+3
         5 001276   000033 772000                    QRL     27
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:89   
         5 001277   200014 756100                    STQ     L,,AUTO

      448    12500    3             CALL VXD$B2C( VX_MBUF.CHARS_A, 20, 6, L, 10 );

  12500  5 001300   000004 236000 6                  LDQ     4
         5 001301   200044 756100                    STQ     @START$+5,,AUTO
         5 001302   200014 630500                    EPPR0   L,,AUTO
         5 001303   200043 450500                    STP0    @START$+4,,AUTO
         5 001304   000105 236000 6                  LDQ     69
         5 001305   200042 756100                    STQ     @START$+3,,AUTO
         5 001306   000114 237000 6                  LDAQ    76
         5 001307   200040 757100                    STAQ    @START$+1,,AUTO
         5 001310   200040 630500                    EPPR0   @START$+1,,AUTO
         5 001311   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 001312   000000 701000 xent               TSX1    VXD$B2C
         5 001313   000000 011000                    NOP     0

      449    12501    3             L=VX_RU_HEAD_BUF.TCBSIZE;

  12501  5 001314   000005 236000 xsym               LDQ     VX_RU_HEAD_BUF+5
         5 001315   777777 376007                    ANQ     -1,DL
         5 001316   200014 756100                    STQ     L,,AUTO

      450    12502    3             CALL VXD$B2C( VX_MBUF.CHARS_A, 33, 6, L, 10 );

  12502  5 001317   000004 236000 6                  LDQ     4
         5 001320   200044 756100                    STQ     @START$+5,,AUTO
         5 001321   200014 630500                    EPPR0   L,,AUTO
         5 001322   200043 450500                    STP0    @START$+4,,AUTO
         5 001323   000105 236000 6                  LDQ     69
         5 001324   200042 756100                    STQ     @START$+3,,AUTO
         5 001325   000116 237000 6                  LDAQ    78
         5 001326   200040 757100                    STAQ    @START$+1,,AUTO
         5 001327   200040 630500                    EPPR0   @START$+1,,AUTO
         5 001330   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 001331   000000 701000 xent               TSX1    VXD$B2C
         5 001332   000000 011000                    NOP     0
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:90   

      451    12503    3             L=VX_RU_HEAD_BUF.DCBRES;

  12503  5 001333   000004 236000 xsym               LDQ     VX_RU_HEAD_BUF+4
         5 001334   777777 376007                    ANQ     -1,DL
         5 001335   200014 756100                    STQ     L,,AUTO

      452    12504    3             CALL VXD$B2C( VX_MBUF.CHARS_A, 45, 6, L, 10 );

  12504  5 001336   000004 236000 6                  LDQ     4
         5 001337   200044 756100                    STQ     @START$+5,,AUTO
         5 001340   200014 630500                    EPPR0   L,,AUTO
         5 001341   200043 450500                    STP0    @START$+4,,AUTO
         5 001342   000105 236000 6                  LDQ     69
         5 001343   200042 756100                    STQ     @START$+3,,AUTO
         5 001344   000122 237000 6                  LDAQ    82
         5 001345   200040 757100                    STAQ    @START$+1,,AUTO
         5 001346   200040 630500                    EPPR0   @START$+1,,AUTO
         5 001347   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 001350   000000 701000 xent               TSX1    VXD$B2C
         5 001351   000000 011000                    NOP     0

      453    12505                  %M_WRITE;

  12507  5 001352   000002 630400 3                  EPPR0   VX_MAP_LO_FPT_WRITE
         5 001353   440001 713400                    CLIMB   alt,write
         5 001354   401400 401760                    pmme    nvectors=4
         5 001355   002263 702000 5                  TSX2    MAP_IO_ERROR

  12511  5 001356   040000 100400                    MLR     fill='040'O
         5 001357   000442 000002 2                  ADSC9   FPT_XCON+6               cn=0,n=2
         5 001360   000056 000204 3                  ADSC9   VX_MBUF                  cn=0,n=132

  12512  5 001361   000052 450000 3                  STZ     VX_CTAB

      454    12514    3             IF VX_RU_HEAD_BUF.LIBNAME.CNT ~= 0

PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:91   
  12514  5 001362   000030 236000 xsym               LDQ     VX_RU_HEAD_BUF+24
         5 001363   777000 316003                    CANQ    -512,DU
         5 001364   001370 601000 5                  TNZ     s:12518
         5 001365   000040 236000 xsym               LDQ     VX_RU_HEAD_BUF+32
         5 001366   777000 316003                    CANQ    -512,DU
         5 001367   001433 600000 5                  TZE     s:12546

      455    12515    3                     OR
      456    12516    4                     VX_RU_HEAD_BUF.ASLNAME.CNT ~= 0 THEN DO;

      457    12517                      %WR_LIT( MES1=SLIB_ALIB );

  12518  5 001370   000124 237000 6                  LDAQ    84
         5 001371   000022 757000 3                  STAQ    VX_MAP_LIT_LO_FPT_WRITE+4

  12519  5 001372   000016 630400 3                  EPPR0   VX_MAP_LIT_LO_FPT_WRITE
         5 001373   440001 713400                    CLIMB   alt,write
         5 001374   401400 401760                    pmme    nvectors=4
         5 001375   002263 702000 5                  TSX2    MAP_IO_ERROR

      458    12527    4                 VX_MBUF.CHARS = 'B';

  12527  5 001376   040000 100400                    MLR     fill='040'O
         5 001377   000104 000001 6                  ADSC9   68                       cn=0,n=1
         5 001400   000056 000204 3                  ADSC9   VX_MBUF                  cn=0,n=132

      459    12528    5                 IF VX_RU_HEAD_BUF.LIBNAME.CNT ~= 0 THEN DO;

  12528  5 001401   000030 236000 xsym               LDQ     VX_RU_HEAD_BUF+24
         5 001402   777000 316003                    CANQ    -512,DU
         5 001403   001412 600000 5                  TZE     s:12532

      460    12529    5                     CALL INSERT(VX_MBUF.CHARS, 1, VX_RU_HEAD_BUF.LIBNAME.CNT,

  12529  5 001404   000030 236000 xsym               LDQ     VX_RU_HEAD_BUF+24
         5 001405   000033 772000                    QRL     27
         5 001406   000000 620006                    EAX0    0,QL
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:92   
         5 001407   040040 100400                    MLR     fill='040'O
         5 001410   000030 200037 xsym               ADSC9   VX_RU_HEAD_BUF+24        cn=1,n=31
         5 001411   000056 200010 3                  ADSC9   VX_MBUF                  cn=1,n=*X0

      461    12530    5                             VX_RU_HEAD_BUF.LIBNAME.TXT );
      462    12531    5                    END;

      463    12532    5                 IF VX_RU_HEAD_BUF.ASLNAME.CNT ~= 0 THEN DO;

  12532  5 001412   000040 236000 xsym               LDQ     VX_RU_HEAD_BUF+32
         5 001413   777000 316003                    CANQ    -512,DU
         5 001414   001423 600000 5                  TZE     s:12538

      464    12533    5                     CALL INSERT(VX_MBUF.CHARS, 32, VX_RU_HEAD_BUF.ASLNAME.CNT,

  12533  5 001415   000040 236000 xsym               LDQ     VX_RU_HEAD_BUF+32
         5 001416   000033 772000                    QRL     27
         5 001417   000000 620006                    EAX0    0,QL
         5 001420   040040 100400                    MLR     fill='040'O
         5 001421   000040 200037 xsym               ADSC9   VX_RU_HEAD_BUF+32        cn=1,n=31
         5 001422   000066 000010 3                  ADSC9   VX_MBUF+8                cn=0,n=*X0

      465    12534    5                             VX_RU_HEAD_BUF.ASLNAME.TXT );
      466    12535    5                    END;

      467    12536                      %M_WRITE;

  12538  5 001423   000002 630400 3                  EPPR0   VX_MAP_LO_FPT_WRITE
         5 001424   440001 713400                    CLIMB   alt,write
         5 001425   401400 401760                    pmme    nvectors=4
         5 001426   002263 702000 5                  TSX2    MAP_IO_ERROR

  12542  5 001427   040000 100400                    MLR     fill='040'O
         5 001430   000442 000002 2                  ADSC9   FPT_XCON+6               cn=0,n=2
         5 001431   000056 000204 3                  ADSC9   VX_MBUF                  cn=0,n=132

  12543  5 001432   000052 450000 3                  STZ     VX_CTAB
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:93   

      468    12545    4                END;

      469    12546    4             IF ROS_PAGES > 0 THEN DO;

  12546  5 001433   200027 235100                    LDA     ROS_PAGES,,AUTO
         5 001434   001537 604400 5                  TMOZ    s:12581

      470    12547                      %WR_LIT( MES1=ROS_SEG_MES );

  12548  5 001435   000126 237000 6                  LDAQ    86
         5 001436   000022 757000 3                  STAQ    VX_MAP_LIT_LO_FPT_WRITE+4

  12549  5 001437   000016 630400 3                  EPPR0   VX_MAP_LIT_LO_FPT_WRITE
         5 001440   440001 713400                    CLIMB   alt,write
         5 001441   401400 401760                    pmme    nvectors=4
         5 001442   002263 702000 5                  TSX2    MAP_IO_ERROR

      471    12557    4                 CALL CONCAT( VX_MBUF.CHARS, 'A', SIZE_OCTSIZ_PAGES );

  12557  5 001443   101000 236003                    LDQ     33280,DU
         5 001444   000056 552040 3                  STBQ    VX_MBUF,'40'O
         5 001445   040000 100400                    MLR     fill='040'O
         5 001446   000320 000034 2                  ADSC9   SIZE_OCTSIZ_PAGES        cn=0,n=28
         5 001447   000056 200203 3                  ADSC9   VX_MBUF                  cn=1,n=131

      472    12558                      %M_WRITE( CLEAR="VX_MBUF.CHARS= 'B';" );

  12560  5 001450   000002 630400 3                  EPPR0   VX_MAP_LO_FPT_WRITE
         5 001451   440001 713400                    CLIMB   alt,write
         5 001452   401400 401760                    pmme    nvectors=4
         5 001453   002263 702000 5                  TSX2    MAP_IO_ERROR

  12564  5 001454   040000 100400                    MLR     fill='040'O
         5 001455   000104 000001 6                  ADSC9   68                       cn=0,n=1
         5 001456   000056 000204 3                  ADSC9   VX_MBUF                  cn=0,n=132

PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:94   
  12565  5 001457   000052 450000 3                  STZ     VX_CTAB

      473    12567    4                 L = VX_RU_HEAD_BUF.ROSIZE;

  12567  5 001460   000010 236000 xsym               LDQ     VX_RU_HEAD_BUF+8
         5 001461   777777 376007                    ANQ     -1,DL
         5 001462   200014 756100                    STQ     L,,AUTO

      474    12568    4                 CALL VXD$B2C( VX_MBUF.CHARS, 2, 6, L, 10 );

  12568  5 001463   000004 236000 6                  LDQ     4
         5 001464   200044 756100                    STQ     @START$+5,,AUTO
         5 001465   200014 630500                    EPPR0   L,,AUTO
         5 001466   200043 450500                    STP0    @START$+4,,AUTO
         5 001467   000105 236000 6                  LDQ     69
         5 001470   200042 756100                    STQ     @START$+3,,AUTO
         5 001471   000130 237000 6                  LDAQ    88
         5 001472   200040 757100                    STAQ    @START$+1,,AUTO
         5 001473   200040 630500                    EPPR0   @START$+1,,AUTO
         5 001474   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 001475   000000 701000 xent               TSX1    VXD$B2C
         5 001476   000000 011000                    NOP     0

      475    12569    4                 CALL VXD$B2C( VX_MBUF.CHARS, 12, 6, L, 8 );

  12569  5 001477   000051 236000 6                  LDQ     41
         5 001500   200044 756100                    STQ     @START$+5,,AUTO
         5 001501   200014 630500                    EPPR0   L,,AUTO
         5 001502   200043 450500                    STP0    @START$+4,,AUTO
         5 001503   000105 236000 6                  LDQ     69
         5 001504   200042 756100                    STQ     @START$+3,,AUTO
         5 001505   000132 237000 6                  LDAQ    90
         5 001506   200040 757100                    STAQ    @START$+1,,AUTO
         5 001507   200040 630500                    EPPR0   @START$+1,,AUTO
         5 001510   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 001511   000000 701000 xent               TSX1    VXD$B2C
         5 001512   000000 011000                    NOP     0
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:95   

      476    12570    4                 CALL VXD$B2C( VX_MBUF.CHARS, 23, 6, ROS_PAGES, 10 );

  12570  5 001513   000004 236000 6                  LDQ     4
         5 001514   200044 756100                    STQ     @START$+5,,AUTO
         5 001515   200027 630500                    EPPR0   ROS_PAGES,,AUTO
         5 001516   200043 450500                    STP0    @START$+4,,AUTO
         5 001517   000105 236000 6                  LDQ     69
         5 001520   200042 756100                    STQ     @START$+3,,AUTO
         5 001521   000136 237000 6                  LDAQ    94
         5 001522   200040 757100                    STAQ    @START$+1,,AUTO
         5 001523   200040 630500                    EPPR0   @START$+1,,AUTO
         5 001524   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 001525   000000 701000 xent               TSX1    VXD$B2C
         5 001526   000000 011000                    NOP     0

      477    12571                      %M_WRITE;

  12573  5 001527   000002 630400 3                  EPPR0   VX_MAP_LO_FPT_WRITE
         5 001530   440001 713400                    CLIMB   alt,write
         5 001531   401400 401760                    pmme    nvectors=4
         5 001532   002263 702000 5                  TSX2    MAP_IO_ERROR

  12577  5 001533   040000 100400                    MLR     fill='040'O
         5 001534   000442 000002 2                  ADSC9   FPT_XCON+6               cn=0,n=2
         5 001535   000056 000204 3                  ADSC9   VX_MBUF                  cn=0,n=132

  12578  5 001536   000052 450000 3                  STZ     VX_CTAB

      478    12580    4                END;

      479    12581    3             START(@DATA) = START$ -> VX$TREE_NODE.DADDR;

  12581  5 001537   200037 470500                    LDP0    @START$,,AUTO
         5 001540   000000 471500                    LDP1    0,,PR0
         5 001541   100004 236100                    LDQ     4,,PR1
         5 001542   000022 772000                    QRL     18
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:96   
         5 001543   200023 756100                    STQ     START,,AUTO

      480    12582    3             START(@PROC) = START$ -> VX$TREE_NODE.PADDR;

  12582  5 001544   000000 471500                    LDP1    0,,PR0
         5 001545   100003 236100                    LDQ     3,,PR1
         5 001546   000022 772000                    QRL     18
         5 001547   200024 756100                    STQ     START+1,,AUTO

      481    12583    4             IF START$ -> VX$TREE_NODE.FORWARD# <= 0 THEN DO;

  12583  5 001550   000000 471500                    LDP1    0,,PR0
         5 001551   100002 220100                    LDX0    2,,PR1
         5 001552   001563 605400 5                  TPNZ    s:12588

      482    12584    4                 SIZE(@DATA) = START$ -> VX$TREE_NODE.DSIZE;

  12584  5 001553   100004 236100                    LDQ     4,,PR1
         5 001554   777777 376007                    ANQ     -1,DL
         5 001555   200025 756100                    STQ     SIZE,,AUTO

      483    12585    4                 SIZE(@PROC) = START$ -> VX$TREE_NODE.PSIZE;

  12585  5 001556   000000 471500                    LDP1    0,,PR0
         5 001557   100003 236100                    LDQ     3,,PR1
         5 001560   777777 376007                    ANQ     -1,DL
         5 001561   200026 756100                    STQ     SIZE+1,,AUTO

      484    12586    4                END;

  12586  5 001562   001667 710000 5                  TRA     s:12616

      485    12587    4             ELSE DO;                      /* Find size of longest path */

      486    12588    4                 NODE$ = START$;

  12588  5 001563   000000 236100                    LDQ     0,,PR0
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:97   
         5 001564   200010 756100                    STQ     NODE$,,AUTO

      487    12589    4                 SIZE(@DATA) = 0;

  12589  5 001565   200025 450100                    STZ     SIZE,,AUTO

      488    12590    4                 SIZE(@PROC) = 0;

  12590  5 001566   200026 450100                    STZ     SIZE+1,,AUTO

      489    12591    5                 DO WHILE( '1'B );

      490    12592    5                     VX_MAP_NUM = NODE$ -> VX$TREE_NODE.DADDR + NODE$ -> VX$TREE_NODE.
             12592                              DSIZE;

  12592  5 001567   200010 470500                    LDP0    NODE$,,AUTO
         5 001570   000004 236100                    LDQ     4,,PR0
         5 001571   777777 376007                    ANQ     -1,DL
         5 001572   200040 756100                    STQ     @START$+1,,AUTO
         5 001573   000004 236100                    LDQ     4,,PR0
         5 001574   000022 772000                    QRL     18
         5 001575   200040 036100                    ADLQ    @START$+1,,AUTO
         5 001576   000037 756000 3                  STQ     VX_MAP_NUM

      491    12593    5                     IF VX_MAP_NUM > SIZE(@DATA) THEN SIZE(@DATA) = VX_MAP_NUM;

  12593  5 001577   200025 116100                    CMPQ    SIZE,,AUTO
         5 001600   001602 604400 5                  TMOZ    s:12594

  12593  5 001601   200025 756100                    STQ     SIZE,,AUTO

      492    12594    5                     VX_MAP_NUM = NODE$ -> VX$TREE_NODE.PADDR + NODE$ -> VX$TREE_NODE.
             12594                              PSIZE;

  12594  5 001602   000003 236100                    LDQ     3,,PR0
         5 001603   777777 376007                    ANQ     -1,DL
         5 001604   200040 756100                    STQ     @START$+1,,AUTO
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:98   
         5 001605   000003 236100                    LDQ     3,,PR0
         5 001606   000022 772000                    QRL     18
         5 001607   200040 036100                    ADLQ    @START$+1,,AUTO
         5 001610   000037 756000 3                  STQ     VX_MAP_NUM

      493    12595    5                     IF VX_MAP_NUM > SIZE(@PROC) THEN SIZE(@PROC) = VX_MAP_NUM;

  12595  5 001611   200026 116100                    CMPQ    SIZE+1,,AUTO
         5 001612   001614 604400 5                  TMOZ    s:12596

  12595  5 001613   200026 756100                    STQ     SIZE+1,,AUTO

      494    12596    5                     VX_MAP_NUM = NODE$ -> VX$TREE_NODE.FORWARD#;

  12596  5 001614   000002 236100                    LDQ     2,,PR0
         5 001615   000022 732000                    QRS     18
         5 001616   000037 756000 3                  STQ     VX_MAP_NUM

      495    12597    6                     IF VX_MAP_NUM > 0 THEN DO;

  12597  5 001617   001626 604400 5                  TMOZ    s:12601

      496    12598    6                         NODE$ = PINCRW( START$, VX_MAP_NUM * SIZEW(VX$TREE_NODE) );

  12598  5 001620   200037 471500                    LDP1    @START$,,AUTO
         5 001621   100000 473500                    LDP3    0,,PR1
         5 001622   000006 402007                    MPY     6,DL
         5 001623   300000 634506                    EPPR4   0,QL,PR3
         5 001624   200010 454500                    STP4    NODE$,,AUTO

      497    12599    6                        END;

  12599  5 001625   001567 710000 5                  TRA     s:12592

      498    12600    6                     ELSE DO;

      499    12601    6                         VX_MAP_NUM = NODE$ -> VX$TREE_NODE.OVERLAY#;
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:99   

  12601  5 001626   000002 236100                    LDQ     2,,PR0
         5 001627   000022 736000                    QLS     18
         5 001630   000022 732000                    QRS     18
         5 001631   000037 756000 3                  STQ     VX_MAP_NUM

      500    12602    7                         DO WHILE( VX_MAP_NUM <= 0 );

  12602  5 001632   001653 605400 5                  TPNZ    s:12608

      501    12603    7                             VX_MAP_NUM = NODE$ -> VX$TREE_NODE.BACK#;

  12603  5 001633   200010 470500                    LDP0    NODE$,,AUTO
         5 001634   000001 236100                    LDQ     1,,PR0
         5 001635   000022 736000                    QLS     18
         5 001636   000022 732000                    QRS     18
         5 001637   000037 756000 3                  STQ     VX_MAP_NUM

      502    12604    7                             IF VX_MAP_NUM <= 0 THEN GOTO FINISHED;

  12604  5 001640   001661 604400 5                  TMOZ    FINISHED

      503    12605    7                            NODE$ = PINCRW( START$, VX_MAP_NUM * SIZEW(VX$TREE_NODE) )
             12605                                      ;

  12605  5 001641   200037 471500                    LDP1    @START$,,AUTO
         5 001642   100000 473500                    LDP3    0,,PR1
         5 001643   000006 402007                    MPY     6,DL
         5 001644   300000 634506                    EPPR4   0,QL,PR3
         5 001645   200010 454500                    STP4    NODE$,,AUTO

      504    12606    7                             VX_MAP_NUM = NODE$ -> VX$TREE_NODE.OVERLAY#;

  12606  5 001646   400002 236100                    LDQ     2,,PR4
         5 001647   000022 736000                    QLS     18
         5 001650   000022 732000                    QRS     18
         5 001651   000037 756000 3                  STQ     VX_MAP_NUM
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:100  

      505    12607    7                            END;

  12607  5 001652   001633 604400 5                  TMOZ    s:12603

      506    12608    6                         NODE$ = PINCRW( START$, VX_MAP_NUM * SIZEW(VX$TREE_NODE) );

  12608  5 001653   200037 470500                    LDP0    @START$,,AUTO
         5 001654   000000 471500                    LDP1    0,,PR0
         5 001655   000006 402007                    MPY     6,DL
         5 001656   100000 633506                    EPPR3   0,QL,PR1
         5 001657   200010 453500                    STP3    NODE$,,AUTO

      507    12609    6                        END;

      508    12610    5                    END;                   /* Do forever */

  12610  5 001660   001567 710000 5                  TRA     s:12592

      509    12611    4   FINISHED:
      510    12612    4                 SIZE(@DATA) = SIZE(@DATA) - START(@DATA);

  12612  5 001661   200025 236100       FINISHED     LDQ     SIZE,,AUTO
         5 001662   200023 136100                    SBLQ    START,,AUTO
         5 001663   200025 756100                    STQ     SIZE,,AUTO

      511    12613    4                 SIZE(@PROC) = SIZE(@PROC) - START(@PROC);

  12613  5 001664   200026 236100                    LDQ     SIZE+1,,AUTO
         5 001665   200024 136100                    SBLQ    START+1,,AUTO
         5 001666   200026 756100                    STQ     SIZE+1,,AUTO

      512    12614    4                END;

      513    12615                  %WR_LIT( MES1=INSTRUCTION_SEGMENT );

  12616  5 001667   000140 237000 6                  LDAQ    96
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:101  
         5 001670   000022 757000 3                  STAQ    VX_MAP_LIT_LO_FPT_WRITE+4

  12617  5 001671   000016 630400 3                  EPPR0   VX_MAP_LIT_LO_FPT_WRITE
         5 001672   440001 713400                    CLIMB   alt,write
         5 001673   401400 401760                    pmme    nvectors=4
         5 001674   002263 702000 5                  TSX2    MAP_IO_ERROR

      514    12625    3             CALL CONCAT( VX_MBUF.CHARS, TYPE_OCTLOC, SIZE_OCTSIZ_PAGES );

  12625  5 001675   040000 100400                    MLR     fill='040'O
         5 001676   000340 000033 2                  ADSC9   TYPE_OCTLOC              cn=0,n=27
         5 001677   000056 000033 3                  ADSC9   VX_MBUF                  cn=0,n=27
         5 001700   040000 100400                    MLR     fill='040'O
         5 001701   000320 000034 2                  ADSC9   SIZE_OCTSIZ_PAGES        cn=0,n=28
         5 001702   000064 600151 3                  ADSC9   VX_MBUF+6                cn=3,n=105

      515    12626                  %M_WRITE;

  12628  5 001703   000002 630400 3                  EPPR0   VX_MAP_LO_FPT_WRITE
         5 001704   440001 713400                    CLIMB   alt,write
         5 001705   401400 401760                    pmme    nvectors=4
         5 001706   002263 702000 5                  TSX2    MAP_IO_ERROR

  12632  5 001707   040000 100400                    MLR     fill='040'O
         5 001710   000442 000002 2                  ADSC9   FPT_XCON+6               cn=0,n=2
         5 001711   000056 000204 3                  ADSC9   VX_MBUF                  cn=0,n=132

  12633  5 001712   000052 450000 3                  STZ     VX_CTAB

      516    12635    4             DO I = @DATA TO @PROC;

  12635  5 001713   200011 450100                    STZ     I,,AUTO

      517    12636    5                 DO CASE( I );

  12636  5 001714   200011 235100                    LDA     I,,AUTO
         5 001715   000002 115007                    CMPA    2,DL
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:102  
         5 001716   001720 602005 5                  TNC     s:12636+4,AL
         5 001717   001737 710000 5                  TRA     s:12644
         5 001720   001722 710000 5                  TRA     s:12638
         5 001721   001731 710000 5                  TRA     s:12641

      518    12637    5                   CASE( @DATA );

      519    12638    5                     VX_MBUF.CHARS = 'A DATA';

  12638  5 001722   040000 100400                    MLR     fill='040'O
         5 001723   000443 000006 2                  ADSC9   FPT_XCON+7               cn=0,n=6
         5 001724   000056 000204 3                  ADSC9   VX_MBUF                  cn=0,n=132

      520    12639    5                     PAGES = VX_RU_HEAD_BUF.VDPGS;

  12639  5 001725   000002 236000 xsym               LDQ     VX_RU_HEAD_BUF+2
         5 001726   000026 772000                    QRL     22
         5 001727   200031 756100                    STQ     PAGES,,AUTO
         5 001730   001737 710000 5                  TRA     s:12644

      521    12640    5                   CASE( @PROC );

      522    12641    5                     VX_MBUF.CHARS = 'B PROCEDURE';

  12641  5 001731   040000 100400                    MLR     fill='040'O
         5 001732   000445 000013 2                  ADSC9   FPT_XCON+9               cn=0,n=11
         5 001733   000056 000204 3                  ADSC9   VX_MBUF                  cn=0,n=132

      523    12642    5                     PAGES = VX_RU_HEAD_BUF.VPPGS;

  12642  5 001734   000001 236000 xsym               LDQ     VX_RU_HEAD_BUF+1
         5 001735   000026 772000                    QRL     22
         5 001736   200031 756100                    STQ     PAGES,,AUTO

      524    12643    5                   END;                    /* Do case( i ); */

      525    12644    4                 CALL VXD$B2C( VX_MBUF.CHARS, 19, 6, START(I), 8 );
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:103  

  12644  5 001737   000051 236000 6                  LDQ     41
         5 001740   200044 756100                    STQ     @START$+5,,AUTO
         5 001741   200023 630505                    EPPR0   START,AL,AUTO
         5 001742   200043 450500                    STP0    @START$+4,,AUTO
         5 001743   000105 236000 6                  LDQ     69
         5 001744   200042 756100                    STQ     @START$+3,,AUTO
         5 001745   000142 237000 6                  LDAQ    98
         5 001746   200040 757100                    STAQ    @START$+1,,AUTO
         5 001747   200040 630500                    EPPR0   @START$+1,,AUTO
         5 001750   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 001751   000000 701000 xent               TSX1    VXD$B2C
         5 001752   000000 011000                    NOP     0

      526    12645    5                 IF SIZE(I) > 0 THEN DO;

  12645  5 001753   200011 720100                    LXL0    I,,AUTO
         5 001754   200025 235110                    LDA     SIZE,X0,AUTO
         5 001755   002024 604400 5                  TMOZ    s:12651

      527    12646    5                     CALL VXD$B2C( VX_MBUF.CHARS, 28, 6, SIZE(I), 10 );

  12646  5 001756   000004 236000 6                  LDQ     4
         5 001757   200044 756100                    STQ     @START$+5,,AUTO
         5 001760   200025 630510                    EPPR0   SIZE,X0,AUTO
         5 001761   200043 450500                    STP0    @START$+4,,AUTO
         5 001762   000105 236000 6                  LDQ     69
         5 001763   200042 756100                    STQ     @START$+3,,AUTO
         5 001764   000146 237000 6                  LDAQ    102
         5 001765   200040 757100                    STAQ    @START$+1,,AUTO
         5 001766   200040 630500                    EPPR0   @START$+1,,AUTO
         5 001767   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 001770   000000 701000 xent               TSX1    VXD$B2C
         5 001771   000000 011000                    NOP     0

      528    12647    5                     CALL VXD$B2C( VX_MBUF.CHARS, 38, 6, SIZE(I), 8 );

PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:104  
  12647  5 001772   000051 236000 6                  LDQ     41
         5 001773   200044 756100                    STQ     @START$+5,,AUTO
         5 001774   200011 720100                    LXL0    I,,AUTO
         5 001775   200025 630510                    EPPR0   SIZE,X0,AUTO
         5 001776   200043 450500                    STP0    @START$+4,,AUTO
         5 001777   000105 236000 6                  LDQ     69
         5 002000   200042 756100                    STQ     @START$+3,,AUTO
         5 002001   000150 237000 6                  LDAQ    104
         5 002002   200040 757100                    STAQ    @START$+1,,AUTO
         5 002003   200040 630500                    EPPR0   @START$+1,,AUTO
         5 002004   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 002005   000000 701000 xent               TSX1    VXD$B2C
         5 002006   000000 011000                    NOP     0

      529    12648    5                     CALL VXD$B2C( VX_MBUF.CHARS, 49, 6, PAGES, 10 );

  12648  5 002007   000004 236000 6                  LDQ     4
         5 002010   200044 756100                    STQ     @START$+5,,AUTO
         5 002011   200031 630500                    EPPR0   PAGES,,AUTO
         5 002012   200043 450500                    STP0    @START$+4,,AUTO
         5 002013   000105 236000 6                  LDQ     69
         5 002014   200042 756100                    STQ     @START$+3,,AUTO
         5 002015   000154 237000 6                  LDAQ    108
         5 002016   200040 757100                    STAQ    @START$+1,,AUTO
         5 002017   200040 630500                    EPPR0   @START$+1,,AUTO
         5 002020   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 002021   000000 701000 xent               TSX1    VXD$B2C
         5 002022   000000 011000                    NOP     0

      530    12649    5                    END;

  12649  5 002023   002032 710000 5                  TRA     s:12657

      531    12650    5                 ELSE DO;

      532    12651    5                     CALL INSERT( VX_MBUF.CHARS, 33, 1, '0' );

PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:105  
  12651  5 002024   000060 236003                    LDQ     48,DU
         5 002025   000066 552020 3                  STBQ    VX_MBUF+8,'20'O

      533    12652    5                     CALL INSERT( VX_MBUF.CHARS, 43, 1, '0' );

  12652  5 002026   000060 236007                    LDQ     48,DL
         5 002027   000070 552004 3                  STBQ    VX_MBUF+10,'04'O

      534    12653    5                     CALL INSERT( VX_MBUF.CHARS, 54, 1, '0' );

  12653  5 002030   060000 236007                    LDQ     24576,DL
         5 002031   000073 552010 3                  STBQ    VX_MBUF+13,'10'O

      535    12654    5                    END;

      536    12655                      %M_WRITE;

  12657  5 002032   000002 630400 3                  EPPR0   VX_MAP_LO_FPT_WRITE
         5 002033   440001 713400                    CLIMB   alt,write
         5 002034   401400 401760                    pmme    nvectors=4
         5 002035   002263 702000 5                  TSX2    MAP_IO_ERROR

  12661  5 002036   040000 100400                    MLR     fill='040'O
         5 002037   000442 000002 2                  ADSC9   FPT_XCON+6               cn=0,n=2
         5 002040   000056 000204 3                  ADSC9   VX_MBUF                  cn=0,n=132

  12662  5 002041   000052 450000 3                  STZ     VX_CTAB

      537    12664    4                END;

  12664  5 002042   200011 235100                    LDA     I,,AUTO
         5 002043   000001 035007                    ADLA    1,DL
         5 002044   200011 755100                    STA     I,,AUTO
         5 002045   000002 115007                    CMPA    2,DL
         5 002046   001714 602000 5                  TNC     s:12636

      538    12665    4             IF SEG_PAGES > 0 THEN DO;
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:106  

  12665  5 002047   200030 236100                    LDQ     SEG_PAGES,,AUTO
         5 002050   002212 604400 5                  TMOZ    s:12725

      539    12666                      %WR_LIT( MES1=DATA_SEGMENTS );

  12667  5 002051   000156 237000 6                  LDAQ    110
         5 002052   000022 757000 3                  STAQ    VX_MAP_LIT_LO_FPT_WRITE+4

  12668  5 002053   000016 630400 3                  EPPR0   VX_MAP_LIT_LO_FPT_WRITE
         5 002054   440001 713400                    CLIMB   alt,write
         5 002055   401400 401760                    pmme    nvectors=4
         5 002056   002263 702000 5                  TSX2    MAP_IO_ERROR

      540    12676    4                 CALL CONCAT( VX_MBUF.CHARS, SEGID_TYPE, SIZE_OCTSIZ_PAGES );

  12676  5 002057   040000 100400                    MLR     fill='040'O
         5 002060   000357 000033 2                  ADSC9   SEGID_TYPE               cn=0,n=27
         5 002061   000056 000033 3                  ADSC9   VX_MBUF                  cn=0,n=27
         5 002062   040000 100400                    MLR     fill='040'O
         5 002063   000320 000034 2                  ADSC9   SIZE_OCTSIZ_PAGES        cn=0,n=28
         5 002064   000064 600151 3                  ADSC9   VX_MBUF+6                cn=3,n=105

      541    12677                      %M_WRITE;

  12679  5 002065   000002 630400 3                  EPPR0   VX_MAP_LO_FPT_WRITE
         5 002066   440001 713400                    CLIMB   alt,write
         5 002067   401400 401760                    pmme    nvectors=4
         5 002070   002263 702000 5                  TSX2    MAP_IO_ERROR

  12683  5 002071   040000 100400                    MLR     fill='040'O
         5 002072   000442 000002 2                  ADSC9   FPT_XCON+6               cn=0,n=2
         5 002073   000056 000204 3                  ADSC9   VX_MBUF                  cn=0,n=132

  12684  5 002074   000052 450000 3                  STZ     VX_CTAB

      542    12686    5                 DO I = 0 TO 5;
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:107  

  12686  5 002075   200011 450100                    STZ     I,,AUTO

      543    12687    6                     IF VX_SEG_EPAGE#(I) > 0 THEN DO;

  12687  5 002076   200011 720100                    LXL0    I,,AUTO
         5 002077   000000 235010 xsym               LDA     VX_SEG_EPAGE#,X0
         5 002100   002201 600000 5                  TZE     s:12706

      544    12688    6                         VX_MBUF.CHARS = SEGID(I);

  12688  5 002101   200011 236100                    LDQ     I,,AUTO
         5 002102   000004 736000                    QLS     4
         5 002103   040000 100406                    MLR     fill='040'O
         5 002104   000366 000020 2                  ADSC9   SEGID,Q                  cn=0,n=16
         5 002105   000056 000204 3                  ADSC9   VX_MBUF                  cn=0,n=132

      545    12689    6                         IF VX_RU_HEAD_BUF.DATA_SEG.PROTECTION(I) = 384

  12689  5 002106   000012 236010 xsym               LDQ     VX_RU_HEAD_BUF+10,X0
         5 002107   000777 376007                    ANQ     511,DL
         5 002110   000600 116007                    CMPQ    384,DL
         5 002111   002116 601000 5                  TNZ     s:12691

      546    12690    6                         THEN CALL INSERT( VX_MBUF.CHARS, 19, , 'DATA' );

  12690  5 002112   040000 100400                    MLR     fill='040'O
         5 002113   000450 000004 2                  ADSC9   FPT_XCON+12              cn=0,n=4
         5 002114   000062 600161 3                  ADSC9   VX_MBUF+4                cn=3,n=113
         5 002115   002121 710000 5                  TRA     s:12692

      547    12691    6                         ELSE CALL INSERT( VX_MBUF.CHARS, 19, , 'RODATA' );

  12691  5 002116   040000 100400                    MLR     fill='040'O
         5 002117   000451 000006 2                  ADSC9   FPT_XCON+13              cn=0,n=6
         5 002120   000062 600161 3                  ADSC9   VX_MBUF+4                cn=3,n=113

PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:108  
      548    12692    6                         L = VX_RU_HEAD_BUF.DATA_SEG.SIZ(I);

  12692  5 002121   000012 236010 xsym               LDQ     VX_RU_HEAD_BUF+10,X0
         5 002122   000022 772000                    QRL     18
         5 002123   200014 756100                    STQ     L,,AUTO

      549    12693    6                         CALL VXD$B2C( VX_MBUF.CHARS, 28, 6, L, 10 );

  12693  5 002124   000004 236000 6                  LDQ     4
         5 002125   200044 756100                    STQ     @START$+5,,AUTO
         5 002126   200014 630500                    EPPR0   L,,AUTO
         5 002127   200043 450500                    STP0    @START$+4,,AUTO
         5 002130   000105 236000 6                  LDQ     69
         5 002131   200042 756100                    STQ     @START$+3,,AUTO
         5 002132   000146 237000 6                  LDAQ    102
         5 002133   200040 757100                    STAQ    @START$+1,,AUTO
         5 002134   200040 630500                    EPPR0   @START$+1,,AUTO
         5 002135   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 002136   000000 701000 xent               TSX1    VXD$B2C
         5 002137   000000 011000                    NOP     0

      550    12694    6                         CALL VXD$B2C( VX_MBUF.CHARS, 38, 6, L, 8 );

  12694  5 002140   000051 236000 6                  LDQ     41
         5 002141   200044 756100                    STQ     @START$+5,,AUTO
         5 002142   200014 630500                    EPPR0   L,,AUTO
         5 002143   200043 450500                    STP0    @START$+4,,AUTO
         5 002144   000105 236000 6                  LDQ     69
         5 002145   200042 756100                    STQ     @START$+3,,AUTO
         5 002146   000150 237000 6                  LDAQ    104
         5 002147   200040 757100                    STAQ    @START$+1,,AUTO
         5 002150   200040 630500                    EPPR0   @START$+1,,AUTO
         5 002151   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 002152   000000 701000 xent               TSX1    VXD$B2C
         5 002153   000000 011000                    NOP     0

      551    12695    6                         CALL VXD$B2C( VX_MBUF.CHARS, 49, 6, VX_SEG_EPAGE#(I), 10 );
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:109  

  12695  5 002154   000004 236000 6                  LDQ     4
         5 002155   200044 756100                    STQ     @START$+5,,AUTO
         5 002156   200011 720100                    LXL0    I,,AUTO
         5 002157   000000 630410 xsym               EPPR0   VX_SEG_EPAGE#,X0
         5 002160   200043 450500                    STP0    @START$+4,,AUTO
         5 002161   000105 236000 6                  LDQ     69
         5 002162   200042 756100                    STQ     @START$+3,,AUTO
         5 002163   000154 237000 6                  LDAQ    108
         5 002164   200040 757100                    STAQ    @START$+1,,AUTO
         5 002165   200040 630500                    EPPR0   @START$+1,,AUTO
         5 002166   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 002167   000000 701000 xent               TSX1    VXD$B2C
         5 002170   000000 011000                    NOP     0

      552    12696                              %M_WRITE;

  12698  5 002171   000002 630400 3                  EPPR0   VX_MAP_LO_FPT_WRITE
         5 002172   440001 713400                    CLIMB   alt,write
         5 002173   401400 401760                    pmme    nvectors=4
         5 002174   002263 702000 5                  TSX2    MAP_IO_ERROR

  12702  5 002175   040000 100400                    MLR     fill='040'O
         5 002176   000442 000002 2                  ADSC9   FPT_XCON+6               cn=0,n=2
         5 002177   000056 000204 3                  ADSC9   VX_MBUF                  cn=0,n=132

  12703  5 002200   000052 450000 3                  STZ     VX_CTAB

      553    12705    6                        END;

      554    12706    5                    END;

  12706  5 002201   200011 235100                    LDA     I,,AUTO
         5 002202   000001 035007                    ADLA    1,DL
         5 002203   200011 755100                    STA     I,,AUTO
         5 002204   000006 115007                    CMPA    6,DL
         5 002205   002076 602000 5                  TNC     s:12687
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:110  

      555    12707                      %M_WRITE( CLEAR=" ", ZERO=" " );

  12709  5 002206   000002 630400 3                  EPPR0   VX_MAP_LO_FPT_WRITE
         5 002207   440001 713400                    CLIMB   alt,write
         5 002210   401400 401760                    pmme    nvectors=4
         5 002211   002263 702000 5                  TSX2    MAP_IO_ERROR

      556    12716    4                END;

      557    12717
      558    12718    3            END;

      559    12719              %NUMBER( NUM1=TOTAL_PROGRAM_SIZE );

  12725  5 002212   000004 236000 6                  LDQ     4
         5 002213   200044 756100                    STQ     @START$+5,,AUTO
         5 002214   200032 630500                    EPPR0   TOTAL_PROGRAM_SIZE,,AUTO
         5 002215   200043 450500                    STP0    @START$+4,,AUTO
         5 002216   000005 236000 6                  LDQ     5
         5 002217   200042 756100                    STQ     @START$+3,,AUTO
         5 002220   000006 237000 6                  LDAQ    6
         5 002221   200040 757100                    STAQ    @START$+1,,AUTO
         5 002222   200040 630500                    EPPR0   @START$+1,,AUTO
         5 002223   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 002224   000000 701000 xent               TSX1    VXD$B2C
         5 002225   000000 011000                    NOP     0

      560    12736              %SCREAM( ERR#=E$TOTAL_PROGRAM_SIZE, LEVEL=E$I_VX, MID="'M'" );

  12737  5 002226   000012 630400 6                  EPPR0   10
         5 002227   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 002230   000000 701000 xent               TSX1    VXE$ERROR
         5 002231   000000 011000                    NOP     0

      561    12739    3         IF VX_RU_HEAD_BUF.OVRL THEN DO ;

PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:111  
  12739  5 002232   000022 236000 xsym               LDQ     VX_RU_HEAD_BUF+18
         5 002233   000010 316003                    CANQ    8,DU
         5 002234   002261 600000 5                  TZE     s:12770

      562    12740    3             TOTAL_NUMBER_NODES = VX_MAP_TREE_START$ -> VX$TREE_HEADER.NODES ;

  12740  5 002235   000035 470400 3                  LDP0    VX_MAP_TREE_START$
         5 002236   000000 236100                    LDQ     0,,PR0
         5 002237   000022 772000                    QRL     18
         5 002240   200033 756100                    STQ     TOTAL_NUMBER_NODES,,AUTO

      563    12741        /*E*  ERROR: VXM-E$TOTAL_NUMBER_NODES-0
      564    12742              MESSAGE: Total number of nodes = %U1.
      565    12743              DESCRIPTION: If the run unit is an overlaid program, this
      566    12744                           message will display the total number of nodes
      567    12745                           in the run unit.
      568    12746        */
      569    12747                  %NUMBER ( NUM1=TOTAL_NUMBER_NODES ) ;

  12753  5 002241   000004 236000 6                  LDQ     4
         5 002242   200044 756100                    STQ     @START$+5,,AUTO
         5 002243   200033 631500                    EPPR1   TOTAL_NUMBER_NODES,,AUTO
         5 002244   200043 451500                    STP1    @START$+4,,AUTO
         5 002245   000005 236000 6                  LDQ     5
         5 002246   200042 756100                    STQ     @START$+3,,AUTO
         5 002247   000006 237000 6                  LDAQ    6
         5 002250   200040 757100                    STAQ    @START$+1,,AUTO
         5 002251   200040 630500                    EPPR0   @START$+1,,AUTO
         5 002252   000023 631400 xsym               EPPR1   B_VECTNIL+19
         5 002253   000000 701000 xent               TSX1    VXD$B2C
         5 002254   000000 011000                    NOP     0

      570    12764                  %SCREAM ( ERR#=E$TOTAL_NUMBER_NODES,
      571    12765                  LEVEL=@E$I_VX,
      572    12766                  MID="'M'" ) ;

  12767  5 002255   000017 630400 6                  EPPR0   15
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:112  
         5 002256   000022 631400 xsym               EPPR1   B_VECTNIL+18
         5 002257   000000 701000 xent               TSX1    VXE$ERROR
         5 002260   000000 011000                    NOP     0

      573    12769    3            END ;

      574    12770    2         RETURN;

  12770  5 002261   200036 221300                    LDX1  ! MOVE_SIZE+2,,AUTO
         5 002262   000001 702211                    TSX2  ! 1,X1

  12739  5 002263                       MAP_IO_ERROR null
      575    12771
      576    12772    2   MAP_IO_ERROR: ;
      577    12773    2         CALL M$MERC                             ALTRET(MERC_ERROR);

  12773  5 002263   410007 713400                    CLIMB   alt,+4103
         5 002264   000000 401760                    pmme    nvectors=0
         5 002265   002270 702000 5                  TSX2    MERC_ERROR

      578    12774              %ERROR_IT;

  12775  5 002266   000002 713400                    CLIMB   err
         5 002267   000000 401760                    pmme    nvectors=0

      579    12777    2   MERC_ERROR:
      580    12778    2         CALL VXE$MERC;

  12778  5 002270   000002 631400 xsym  MERC_ERROR   EPPR1   B_VECTNIL+2
         5 002271   000000 701000 xent               TSX1    VXE$MERC
         5 002272   000000 011000                    NOP     0

      581    12779
      582    12780
      583    12781    2   END ALLOCATION_SUMMARY;

  12781  5 002273   200036 221300                    LDX1  ! MOVE_SIZE+2,,AUTO
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:113  
         5 002274   000001 702211                    TSX2  ! 1,X1
      584    12782
      585    12783
      586    12784
      587    12785    1   END VXM$MAP;
      588    12786        %EOD;

PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:114  
--  Include file information  --

   CP_6_SUBS.:E05TOU  is referenced.
   F_DCB_D.:E05TOU  is referenced.
   VX_DCB_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_FIXED_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VX_MACRO_C.:E05TOU  is referenced.
   VX_PERR_C.:E05TOU  is referenced.
   VX_SUBS_C.:E05TOU  is referenced.
   VX_SWITCH_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   VX_INC_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VXM$MAP.
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:115  

 **** Variables and constants ****

  ****  Section 002 RoData VXM$MAP

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   254-0-0/c CHAR(51)    r     1 BIAS_START_DCB           347-0-0/c CHAR(30)    r     1 DATA_SEGMENTS
     0-0-0/c CHAR(100)   r     1 FIRST_LP                  31-0-0/c CHAR(72)    r     1 FIRST_TERM
   434-0-0/d STRC(216)   r     1 FPT_XCON                  53-0-0/c CHAR(100)   r     1 HDR_LP
   104-0-0/c CHAR(72)    r     1 HDR_TERM                 327-0-0/c CHAR        r     1 INSTRUCTION_SEGMENT
   416-0-0/c CHAR(3)     r     1 LINK_VERSION#(0:10)
   126-0-0/c CHAR(100)   r     1 NODE_HDR_LP              157-0-0/c CHAR(72)    r     1 NODE_HDR_TERM
   307-0-0/c CHAR(34)    r     1 ROS_SEG_MES              366-0-0/c CHAR(16)    r     1 SEGID(0:5)
   357-0-0/c CHAR(27)    r     1 SEGID_TYPE               320-0-0/c CHAR(28)    r     1 SIZE_OCTSIZ_PAGES
   271-0-0/c CHAR(56)    r     1 SLIB_ALIB                340-0-0/c CHAR(27)    r     1 TYPE_OCTLOC
   201-0-0/c CHAR(100)   r     1 UTS_HDR_LP               232-0-0/c CHAR(72)    r     1 UTS_HDR_TERM
   427-0-0/w UBIN        r     1 VX_MAP_TABS_A(0:4)

  ****  Section 003  Data  VXM$MAP

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   342-0-0/w STRC(108)   r     1 BIRTH_REC                326-0-0/d STRC(432)   r     1 FPT_TIME
    52-0-0/w UBIN        r     1 VX_CTAB                  117-0-0/w UBIN        r     1 VX_HDR_FIELD1
   120-0-0/w UBIN        r     1 VX_HDR_FIELD2             32-0-0/w PTR         r     1 VX_MAP$
    34-0-0/w PTR         r     1 VX_MAP_AREA$              36-0-0/w UBIN        r     1 VX_MAP_AREA_SIZE
   162-0-0/w STRC(1188)  r     1 VX_MAP_HDR               121-0-0/w STRC(1188)  r     1 VX_MAP_HDR0
   223-0-0/w STRC(1188)  r     1 VX_MAP_HDR1
    16-0-0/d STRC(432)   r     1 VX_MAP_LIT_LO_FPT_WRITE
     2-0-0/d STRC(432)   r     1 VX_MAP_LO_FPT_WRITE       37-0-0/w SBIN        r     1 VX_MAP_NUM
    40-0-0/w UBIN        r     1 VX_MAP_REC_SIZE_A(0:9)
    33-0-0/w PTR         r     1 VX_MAP_ROS$               35-0-0/w PTR         r     1 VX_MAP_TREE_START$
   264-0-0/w STRC(1188)  r     1 VX_MAP_UTS_HDR            53-0-0/w SBIN        r     1 VX_MAP_WIDTH
    54-0-0/w SBIN        r     1 VX_MAP_WIDTH_HDR          55-0-0/w UBIN        r     1 VX_MAX_CTAB
    56-0-0/w STRC(1188)  r     1 VX_MBUF
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:116  

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    37-0-0/w PTR         r     1 @START$                   16-0-0/w UBIN        r     1 ADR
    22-0-0/w SBIN        r     1 DIFF                      11-0-0/w UBIN        r     1 I
    17-0-0/w SBIN        r     1 IMAGE_SIZE                12-0-0/w UBIN        r     1 J
    14-0-0/w UBIN        r     1 L                         34-0-0/w UBIN        r     1 MOVE_SIZE
     7-0-0/w PTR         r     1 NEXT$                     10-0-0/w PTR         r     1 NODE$
     4-0-0/w PTR         r     1 P$                        15-0-0/w UBIN        r     1 PAGE#
    31-0-0/w SBIN        r     1 PAGES                      5-0-0/w PTR         r     1 Q$
    27-0-0/w SBIN        r     1 ROS_PAGES                 30-0-0/w SBIN        r     1 SEG_PAGES
    25-0-0/w SBIN        r     1 SIZE(0:1)                 23-0-0/w SBIN        r     1 START(0:1)
     3-0-0/w PTR         r     1 START$                    *0-0-0/w PTR         r     1 START$
    33-0-0/w SBIN        r     1 TOTAL_NUMBER_NODES        32-0-0/w SBIN        r     1 TOTAL_PROGRAM_SIZE

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 M$LO$                      0-0-0/w PTR         r     1 M$RF$
     0-0-0/w UBIN        r     1 VX_COMMAND                 0-0-0/w PTR         r     1 VX_CURR$
     0-0-0/w STRC(720)   r     1 VX_EFIELD1                 0-0-0/w STRC(216)   r     1 VX_ERRORS
     0-0-0/w UBIN        r     1 VX_ERR_SEV                 0-0-0/w SBIN        r     1 VX_IO_SIZEW
     0-0-0/w SBIN        r     1 VX_M_ALL(0:8)
     0-0-0/w PTR         r     1 VX_M_BASE_PTR(0:8)
     0-0-0/w SBIN        r     1 VX_M_FREE(0:8)
     0-0-0/w SBIN        r     1 VX_NODE_NUMBER             0-0-0/w STRC(4572)  r     1 VX_O
     0-0-0/w STRC(1476)  r     1 VX_OK                      0-0-0/w UBIN        r     1 VX_ONLINE
     0-0-0/w STRC(1440)  r     1 VX_RU_HEAD                 0-0-0/w STRC(1440)  r     1 VX_RU_HEAD_BUF
     0-0-0/c CHAR(5)     r     1 VX_R_KEY_BIRTH             0-0-0/w STRC(108)   r     1 VX_R_KEY_BUF
     0-0-0/c CHAR(4)     r     1 VX_R_KEY_HEAD
     0-0-0/w UBIN        r     1 VX_SEG_EPAGE#(0:5)

PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:117  
  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d ASTR(3528)  r     1 F$DCB                      0-0-0/c ASTR(9)     r     1 F$NAME_
     0-0-0N  NULL        r     1 M$LO                       0-0-0/w ASTR(9)     r     1 T$C
     0-0-0/c ASTR(9)     r     1 T$C_UNAL
     0-0-0/h UBIN(18)    r     1 VX$HALF_A(0:0)
     0-0-0/w STRC(108)   r     1 VX$TREE_HEADER             0-0-0/w STRC(216)   r     1 VX$TREE_NODE


   Procedure VXM$MAP requires 1213 words for executable code.
   Procedure VXM$MAP requires 38 words of local(AUTO) storage.
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:118  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:119  
          MINI XREF LISTING

ADR
     11593**DCL     12301<<ASSIGN  12312<>CALL    12314>>ASSIGN  12315>>ASSIGN  12320<<ASSIGN  12320>>ASSIGN
     12331<>CALL
ALLOCATION_SUMMARY
     12456**PROC    12340--CALL    12404--CALL
BIAS_START_DCB
     11475**DCL     12485--ASSIGN
BIRTH_REC
     12135**DCL     12290--CALL    12290--CALL
BIRTH_REC.CREATE_UTS
     12136**DCL     12130--DCLINIT
CLIMB
     12360**LABEL   12368--GOTO
DATA_SEGMENTS
     11487**DCL     12667--ASSIGN
DIFF
     11883**DCL     12315<<ASSIGN  12318>>DOWHILE 12333<<ASSIGN  12333>>ASSIGN
DONE
     12409**LABEL   12220--GOTO    12366--GOTO
DO_MERC
     12437**LABEL   12454--GOTO
F$DCB.ACCT#
     11929**DCL     12287>>CALLBLT
F$DCB.ACTPOS
     11945**DCL     11945--REDEF
F$DCB.ARS#
     11919**DCL     11919--REDEF
F$DCB.ASN#
     11934**DCL     12250>>IF
F$DCB.ATTR
     11938**DCL     11939--REDEF
F$DCB.BORROW
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:120  
     11953**DCL     11953--REDEF   11953--REDEF   11953--REDEF
F$DCB.DCBNAME.L
     11967**DCL     11967--IMP-SIZ
F$DCB.EOMCHAR#
     11923**DCL     11923--REDEF
F$DCB.FLDID
     11948**DCL     11948--REDEF
F$DCB.FORM$
     11942**DCL     11942--REDEF
F$DCB.FSECT
     11958**DCL     11958--REDEF
F$DCB.FSN#
     11935**DCL     11935--REDEF   11935--REDEF   11936--REDEF
F$DCB.HEADER$
     11941**DCL     11941--REDEF
F$DCB.IXTNSIZE#
     11939**DCL     11939--REDEF
F$DCB.LASTSTA$
     11928**DCL     11928--REDEF
F$DCB.LVL
     11954**DCL     11954--REDEF
F$DCB.NAME#.C
     11929**DCL     11929--REDEF   12285>>CALLBLT
F$DCB.NAME#.L
     11929**DCL     12285>>CALLBLT
F$DCB.NOEOF
     11951**DCL     11951--REDEF
F$DCB.NRECS#
     11940**DCL     11940--REDEF
F$DCB.NRECX
     11959**DCL     11959--REDEF
F$DCB.OHDR
     11951**DCL     11951--REDEF
F$DCB.ORG#
     11934**DCL     11934--REDEF
F$DCB.PRECNO
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:121  
     11957**DCL     11957--REDEF
F$DCB.RCSZ
     11963**DCL     11963--REDEF
F$DCB.RES#
     11930**DCL     11930--REDEF
F$DCB.SETX
     11942**DCL     11942--REDEF
F$DCB.TAB$
     11942**DCL     11942--REDEF
F$DCB.TDA
     11956**DCL     11957--REDEF
F$DCB.WIDTH#
     11926**DCL     12251>>ASSIGN
F$DCB.WSN#
     11930**DCL     11930--REDEF
F$NAME_.COUNT
     11902**DCL     11903--IMP-SIZ
FINISHED IN PROCEDURE ALLOCATION_SUMMARY
     12612**LABEL   12604--GOTO
FIRST_LP
     11459**DCL     12263>>ASSIGN  12267--ASSIGN
FIRST_TERM
     11461**DCL     12273>>ASSIGN  12277--ASSIGN
FPT_TIME
     12126**DCL     12294<>CALL
FPT_TIME.DATE_
     12126**DCL     12291<<ASSIGN
FPT_TIME.DAY_
     12129**DCL     12293<<ASSIGN
FPT_TIME.TIME_
     12128**DCL     12292<<ASSIGN
FPT_TIME.V
     12130**DCL     12126--DCLINIT
FPT_XCON
     12111**DCL     12148<>CALL
FPT_XCON.V
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:122  
     12112**DCL     12111--DCLINIT
HDR_LP
     11463**DCL     12264>>ASSIGN
HDR_TERM
     11465**DCL     12274>>ASSIGN
I
     11583**DCL     11584--REDEF   12160<<DOINDEX 12161>>ASSIGN  12161>>ASSIGN  12162>>ASSIGN  12282<<ASSIGN
     12283>>CALLBLT 12635<<DOINDEX 12636>>DOCASE  12644>>CALL    12645>>IF      12646>>CALL    12647>>CALL
     12686<<DOINDEX 12687>>IF      12688>>ASSIGN  12689>>IF      12692>>ASSIGN  12695>>CALL
IMAGE_SIZE
     11594**DCL     12222<<ASSIGN  12300>>ASSIGN  12301>>ASSIGN  12306>>IF      12308>>ASSIGN  12310<>CALL
     12313<>CALL    12332<>CALL    12397>>ASSIGN  12397>>ASSIGN  12397>>ASSIGN
INSTRUCTION_SEGMENT
     11483**DCL     12616--ASSIGN
IO_ERROR
     12452**LABEL   12313--CALLALT 12332--CALLALT
J
     11585**DCL     11586--REDEF   12268<<ASSIGN  12278<<ASSIGN  12283>>CALLBLT
K
     11587**DCL     11588--REDEF
L
     11589**DCL     11590--REDEF   12374<<ASSIGN  12379<<ASSIGN  12379>>ASSIGN  12384>>IF      12386>>ASSIGN
     12388<>CALL    12400<<CALLBLT 12402>>ASSIGN  12411<<ASSIGN  12495<<ASSIGN  12496<>CALL    12497<<ASSIGN
     12498<>CALL    12499<<ASSIGN  12500<>CALL    12501<<ASSIGN  12502<>CALL    12503<<ASSIGN  12504<>CALL
     12567<<ASSIGN  12568<>CALL    12569<>CALL    12692<<ASSIGN  12693<>CALL    12694<>CALL
LINK_VERSION#
     11498**DCL     12283>>CALLBLT
M$ERR
      5085**DCL-ENT 12439--CALL    12775--CALL
M$LO$
     10645**DCL     12250>>IF      12251>>ASSIGN
M$MERC
      5129**DCL-ENT 12437--CALL    12773--CALL
M$RF$
     10647**DCL     12285>>CALLBLT 12285>>CALLBLT 12287>>CALLBLT
M$TIME
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:123  
      5140**DCL-ENT 12294--CALL
M$WRITE
      5074**DCL-ENT 12467--CALL    12469--CALL    12471--CALL    12477--CALL    12486--CALL    12507--CALL
     12519--CALL    12538--CALL    12549--CALL    12560--CALL    12573--CALL    12617--CALL    12628--CALL
     12657--CALL    12668--CALL    12679--CALL    12698--CALL    12709--CALL
M$XCON
      5128**DCL-ENT 12148--CALL
MAP_IO_ERROR IN PROCEDURE ALLOCATION_SUMMARY
     12739**LABEL   12467--CALLALT 12469--CALLALT 12471--CALLALT 12477--CALLALT 12486--CALLALT 12507--CALLALT
     12519--CALLALT 12538--CALLALT 12549--CALLALT 12560--CALLALT 12573--CALLALT 12617--CALLALT 12628--CALLALT
     12657--CALLALT 12668--CALLALT 12679--CALLALT 12698--CALLALT 12709--CALLALT
MERC_ERROR
     12442**LABEL   12437--CALLALT
MERC_ERROR IN PROCEDURE ALLOCATION_SUMMARY
     12778**LABEL   12773--CALLALT
MOVE_SIZE
     11894**DCL     11895--IMP-SIZ
NEXT
     12353**LABEL   12371--GOTO
NEXT$
     11564**DCL     12317<<ASSIGN  12319<<ASSIGN  12319>>ASSIGN  12332<>CALL
NODE$
     11565**DCL     12588<<ASSIGN  12592>>ASSIGN  12592>>ASSIGN  12594>>ASSIGN  12594>>ASSIGN  12596>>ASSIGN
     12598<<ASSIGN  12601>>ASSIGN  12603>>ASSIGN  12605<<ASSIGN  12606>>ASSIGN  12608<<ASSIGN
NODE_HDR_LP
     11467**DCL     12265>>ASSIGN
NODE_HDR_TERM
     11469**DCL     12275>>ASSIGN
NOT_FOUND
     12411**LABEL   12400--CALLALT
NO_BIRTH_REC
     12432**LABEL   12290--CALLALT
NO_HEAD
     12423**LABEL   12153--CALLALT
P$
     11560**DCL     12392<<ASSIGN  12393>>ASSIGN  12402>>ASSIGN  12403>>ASSIGN  12403>>ASSIGN
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:124  
PAGE#
     11592**DCL     12300<<ASSIGN  12301>>ASSIGN
PAGES
     11888**DCL     12639<<ASSIGN  12642<<ASSIGN  12648<>CALL
Q$
     11561**DCL     12326<<ASSIGN  12329<>CALL
ROS_PAGES
     11886**DCL     12158<<ASSIGN  12164>>ASSIGN  12546>>IF      12570<>CALL
ROS_SEG_MES
     11479**DCL     12548--ASSIGN
SEGID
     11491**DCL     12688>>ASSIGN
SEGID_TYPE
     11489**DCL     12676>>CALLBLT
SEG_PAGES
     11887**DCL     12159<<ASSIGN  12162<<ASSIGN  12162>>ASSIGN  12164>>ASSIGN  12665>>IF
SET_COUNT
     12402**LABEL   12412--GOTO
SIZE
     11885**DCL     12584<<ASSIGN  12585<<ASSIGN  12589<<ASSIGN  12590<<ASSIGN  12593>>IF      12593<<ASSIGN
     12595>>IF      12595<<ASSIGN  12612<<ASSIGN  12612>>ASSIGN  12613<<ASSIGN  12613>>ASSIGN  12645>>IF
     12646<>CALL    12647<>CALL
SIZE_OCTSIZ_PAGES
     11481**DCL     12557>>CALLBLT 12625>>CALLBLT 12676>>CALLBLT
SLIB_ALIB
     11477**DCL     12518--ASSIGN
START
     11884**DCL     12581<<ASSIGN  12582<<ASSIGN  12612>>ASSIGN  12613>>ASSIGN  12644<>CALL
START$
     11558**DCL     12314<<ASSIGN  12315>>ASSIGN  12335>>ASSIGN  12336<<ASSIGN  12336>>ASSIGN  12340<>CALL
     12344>>IF      12345<>CALL    12351>>ASSIGN  12356>>ASSIGN  12362>>ASSIGN  12367>>ASSIGN
START$ IN PROCEDURE ALLOCATION_SUMMARY
     12459**DCL     12456--PROC    12581>>ASSIGN  12582>>ASSIGN  12583>>IF      12584>>ASSIGN  12585>>ASSIGN
     12588>>ASSIGN  12598>>ASSIGN  12605>>ASSIGN  12608>>ASSIGN
T$C.CHARS
     11390**DCL     12400>>CALLBLT 12403<<ASSIGN
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:125  
T$C.COUNT
     11389**DCL     11390--IMP-SIZ 12400>>CALLBLT 12402<<ASSIGN  12403>>ASSIGN
T$C_UNAL.COUNT
     11392**DCL     11393--IMP-SIZ
TOTAL_NUMBER_NODES
     11890**DCL     12196<<ASSIGN  12203<>CALL    12740<<ASSIGN  12753<>CALL
TOTAL_PROGRAM_SIZE
     11889**DCL     12164<<ASSIGN  12181<>CALL    12725<>CALL
TYPE_OCTLOC
     11485**DCL     12625>>CALLBLT
UTS_HDR_LP
     11471**DCL     12266>>ASSIGN
UTS_HDR_TERM
     11473**DCL     12276>>ASSIGN
VX$HALF_A
     11357**DCL     12393<<ASSIGN
VX$LST.OBJECT_NAME$
     11292**DCL     11293--REDEF
VX$LST.SC_HEAD$
     11294**DCL     11295--REDEF
VX$LST.SC_TAIL$
     11296**DCL     11297--REDEF
VX$TREE_HEADER
     11610**DCL     12336--ASSIGN  12379--ASSIGN  12390--ASSIGN
VX$TREE_HEADER.NODES
     11612**DCL     12740>>ASSIGN
VX$TREE_HEADER.SIZE
     11614**DCL     12315>>ASSIGN
VX$TREE_NODE
     11626**DCL     12356--ASSIGN  12362--ASSIGN  12367--ASSIGN  12379--ASSIGN  12391<<ASSIGN  12392--ASSIGN
     12598--ASSIGN  12605--ASSIGN  12608--ASSIGN
VX$TREE_NODE.BACK#
     11650**DCL     12365>>ASSIGN  12603>>ASSIGN
VX$TREE_NODE.DADDR
     11660**DCL     12395<<ASSIGN  12581>>ASSIGN  12592>>ASSIGN
VX$TREE_NODE.DSIZE
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:126  
     11662**DCL     12396<<ASSIGN  12584>>ASSIGN  12592>>ASSIGN
VX$TREE_NODE.FORWARD#
     11652**DCL     12344>>IF      12354>>ASSIGN  12583>>IF      12596>>ASSIGN
VX$TREE_NODE.NAME$
     11628**DCL     12393--ASSIGN
VX$TREE_NODE.OVERLAY#
     11654**DCL     12360>>ASSIGN  12601>>ASSIGN  12606>>ASSIGN
VX$TREE_NODE.PADDR
     11656**DCL     12397<<ASSIGN  12582>>ASSIGN  12594>>ASSIGN
VX$TREE_NODE.PSIZE
     11658**DCL     12399<<ASSIGN  12585>>ASSIGN  12594>>ASSIGN
VXA$GET
     11527**DCL-ENT 12243--CALL    12310--CALL    12329--CALL    12388--CALL
VXA$ND
     11516**DCL-ENT 12224--CALL
VXD$B2C
     11525**DCL-ENT 12181--CALL    12203--CALL    12496--CALL    12498--CALL    12500--CALL    12502--CALL
     12504--CALL    12568--CALL    12569--CALL    12570--CALL    12644--CALL    12646--CALL    12647--CALL
     12648--CALL    12693--CALL    12694--CALL    12695--CALL    12725--CALL    12753--CALL
VXE$ERROR
     11518**DCL-ENT 12193--CALL    12217--CALL    12423--CALL    12432--CALL    12452--CALL    12737--CALL
     12767--CALL
VXE$MERC
     11520**DCL-ENT 12442--CALL    12778--CALL
VXI$READ
     11539**DCL-ENT 12153--CALL    12290--CALL    12313--CALL    12332--CALL
VXK$KEY
     11538**DCL-ENT 12312--CALL    12331--CALL
VXM$NODE
     11532**DCL-ENT 12353--CALL    12406--CALL
VXM$OVERLAY
     11533**DCL-ENT 12345--CALL
VXX$CON
     12143**DCL-ENT 12112--DCLINIT
VX_BIAS.A
      9576**DCL      9577--REDEF
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:127  
VX_CBUF.CHARS_A
      9510**DCL      9511--REDEF
VX_COMMAND
      9519**DCL     12149>>IF
VX_CONST_DCB.ACTPOS
     10692**DCL     10692--REDEF
VX_CONST_DCB.ARS#
     10651**DCL     10651--REDEF
VX_CONST_DCB.ATTR#
     10681**DCL     10681--REDEF   10683--REDEF
VX_CONST_DCB.BORROW
     10703**DCL     10703--REDEF   10703--REDEF   10703--REDEF
VX_CONST_DCB.EOMCHAR#
     10658**DCL     10659--REDEF
VX_CONST_DCB.FLDID
     10695**DCL     10696--REDEF
VX_CONST_DCB.FORM$
     10687**DCL     10687--REDEF
VX_CONST_DCB.FSECT
     10710**DCL     10710--REDEF
VX_CONST_DCB.FSN#
     10677**DCL     10677--REDEF   10677--REDEF   10678--REDEF
VX_CONST_DCB.HEADER$
     10686**DCL     10687--REDEF
VX_CONST_DCB.IXTNSIZE#
     10683**DCL     10684--REDEF
VX_CONST_DCB.LASTSTA$
     10667**DCL     10667--REDEF
VX_CONST_DCB.LVL
     10704**DCL     10704--REDEF
VX_CONST_DCB.NAME#.C
     10667**DCL     10668--REDEF
VX_CONST_DCB.NOEOF
     10699**DCL     10699--REDEF
VX_CONST_DCB.NRECS#
     10684**DCL     10684--REDEF
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:128  
VX_CONST_DCB.NRECX
     10711**DCL     10711--REDEF
VX_CONST_DCB.OHDR
     10700**DCL     10700--REDEF
VX_CONST_DCB.ORG#
     10675**DCL     10676--REDEF
VX_CONST_DCB.PRECNO
     10708**DCL     10708--REDEF
VX_CONST_DCB.RCSZ
     10716**DCL     10716--REDEF
VX_CONST_DCB.RES#
     10669**DCL     10669--REDEF
VX_CONST_DCB.SETX
     10688**DCL     10688--REDEF
VX_CONST_DCB.TAB$
     10687**DCL     10687--REDEF
VX_CONST_DCB.TDA
     10707**DCL     10708--REDEF
VX_CONST_DCB.WSN#
     10669**DCL     10670--REDEF
VX_CTAB
     12058**DCL     12512<<ASSIGN  12543<<ASSIGN  12565<<ASSIGN  12578<<ASSIGN  12633<<ASSIGN  12662<<ASSIGN
     12684<<ASSIGN  12703<<ASSIGN
VX_CURR$
      9545**DCL     12351<<ASSIGN  12354>>ASSIGN  12356<<ASSIGN  12360>>ASSIGN  12362<<ASSIGN  12365>>ASSIGN
     12367<<ASSIGN  12390<<ASSIGN  12391>>ASSIGN  12392>>ASSIGN  12393>>ASSIGN  12395>>ASSIGN  12396>>ASSIGN
     12397>>ASSIGN  12399>>ASSIGN  12404<>CALL
VX_EBUF.CHARS_A
     10099**DCL     10100--REDEF
VX_EFIELD1.CHARS
     10108**DCL     10109--REDEF
VX_EFIELD1.CHARS_A
     10109**DCL     12181<>CALL    12203<>CALL    12725<>CALL    12753<>CALL
VX_EFIELD2.CHARS
     10112**DCL     10113--REDEF
VX_EFIELD3.CHARS
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:129  
     10116**DCL     10117--REDEF
VX_EI_KEY_BUF.KEY
     10492**DCL     10493--REDEF
VX_ERRORS
      9553**DCL      9564--REDEF
VX_ERRORS.CONFLICT_A
      9559**DCL      9560--REDEF
VX_ERRORS.UNSAT.UNSAT_SECONDARY
      9558**DCL     12166>>IF
VX_ERRORS.UNSAT_A
      9555**DCL      9556--REDEF
VX_ERR_SEV
      9566**DCL     12166>>IF
VX_HDR_FIELD1
     12070**DCL     12262<<ASSIGN  12272<<ASSIGN  12280>>ASSIGN  12285>>CALLBLT 12291>>ASSIGN  12292>>ASSIGN
     12293>>ASSIGN  12349>>CALLBLT 12405>>CALLBLT
VX_HDR_FIELD2
     12071**DCL     12280<<ASSIGN  12287>>CALLBLT
VX_IMAGE_DATA.CPAGE#_A
      8690**DCL      8691--REDEF
VX_IMAGE_DATA.NODE_A$
      8702**DCL      8703--REDEF
VX_IMAGE_DATA.START_A$
      8694**DCL      8695--REDEF
VX_IMAGE_DATA.STOP_A$
      8698**DCL      8699--REDEF
VX_IMAGE_DS3.CPAGE#_A
      8759**DCL      8760--REDEF
VX_IMAGE_DS3.NODE_A$
      8771**DCL      8772--REDEF
VX_IMAGE_DS3.START_A$
      8763**DCL      8764--REDEF
VX_IMAGE_DS3.STOP_A$
      8767**DCL      8768--REDEF
VX_IMAGE_DS4.CPAGE#_A
      8782**DCL      8783--REDEF
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:130  
VX_IMAGE_DS4.NODE_A$
      8794**DCL      8795--REDEF
VX_IMAGE_DS4.START_A$
      8786**DCL      8787--REDEF
VX_IMAGE_DS4.STOP_A$
      8790**DCL      8791--REDEF
VX_IMAGE_DS5.CPAGE#_A
      8805**DCL      8806--REDEF
VX_IMAGE_DS5.NODE_A$
      8817**DCL      8818--REDEF
VX_IMAGE_DS5.START_A$
      8809**DCL      8810--REDEF
VX_IMAGE_DS5.STOP_A$
      8813**DCL      8814--REDEF
VX_IMAGE_DS6.CPAGE#_A
      8828**DCL      8829--REDEF
VX_IMAGE_DS6.NODE_A$
      8840**DCL      8841--REDEF
VX_IMAGE_DS6.START_A$
      8832**DCL      8833--REDEF
VX_IMAGE_DS6.STOP_A$
      8836**DCL      8837--REDEF
VX_IMAGE_DS7.CPAGE#_A
      8851**DCL      8852--REDEF
VX_IMAGE_DS7.NODE_A$
      8863**DCL      8864--REDEF
VX_IMAGE_DS7.START_A$
      8855**DCL      8856--REDEF
VX_IMAGE_DS7.STOP_A$
      8859**DCL      8860--REDEF
VX_IMAGE_DS8.CPAGE#_A
      8874**DCL      8875--REDEF
VX_IMAGE_DS8.NODE_A$
      8886**DCL      8887--REDEF
VX_IMAGE_DS8.START_A$
      8878**DCL      8879--REDEF
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:131  
VX_IMAGE_DS8.STOP_A$
      8882**DCL      8883--REDEF
VX_IMAGE_PROC.CPAGE#_A
      8713**DCL      8714--REDEF
VX_IMAGE_PROC.NODE_A$
      8725**DCL      8726--REDEF
VX_IMAGE_PROC.START_A$
      8717**DCL      8718--REDEF
VX_IMAGE_PROC.STOP_A$
      8721**DCL      8722--REDEF
VX_IMAGE_ROS.CPAGE#_A
      8736**DCL      8737--REDEF
VX_IMAGE_ROS.NODE_A$
      8748**DCL      8749--REDEF
VX_IMAGE_ROS.START_A$
      8740**DCL      8741--REDEF
VX_IMAGE_ROS.STOP_A$
      8744**DCL      8745--REDEF
VX_IO_SIZEW
     10130**DCL     12315>>ASSIGN  12319>>ASSIGN  12320>>ASSIGN  12325>>IF      12327>>ASSIGN  12329<>CALL
     12333>>ASSIGN
VX_MAP$
     12051**DCL     12224<>CALL
VX_MAP_AREA$
     12053**DCL     12240<<ASSIGN  12243<>CALL
VX_MAP_AREA_SIZE
     12055**DCL     12225<<ASSIGN  12234<<ASSIGN  12234>>ASSIGN  12234>>ASSIGN  12239>>IF      12241>>ASSIGN
     12243<>CALL
VX_MAP_HDR
     12078**DCL     12468--ASSIGN
VX_MAP_HDR.CHARS
     12079**DCL     12080--REDEF   12081--REDEF   12264<<ASSIGN  12274<<ASSIGN  12285<<CALLBLT 12287<<CALLBLT
VX_MAP_HDR0
     12072**DCL     12466--ASSIGN
VX_MAP_HDR0.CHARS
     12073**DCL     12074--REDEF   12075--REDEF   12263<<ASSIGN  12273<<ASSIGN  12283<<CALLBLT 12349<<CALLBLT
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:132  
     12405<<CALLBLT
VX_MAP_HDR1.CHARS
     12085**DCL     12086--REDEF   12087--REDEF   12265<<ASSIGN  12275<<ASSIGN
VX_MAP_HDR1.LIT_BUF.VFC
     12088**DCL     12297<<ASSIGN
VX_MAP_LIT_LO_FPT_WRITE
     12029**DCL     12486<>CALL    12519<>CALL    12549<>CALL    12617<>CALL    12668<>CALL
VX_MAP_LIT_LO_FPT_WRITE.BUF_
     12029**DCL     12485<<ASSIGN  12518<<ASSIGN  12548<<ASSIGN  12616<<ASSIGN  12667<<ASSIGN
VX_MAP_LIT_LO_FPT_WRITE.STATION_
     12031**DCL     12031--REDEF
VX_MAP_LIT_LO_FPT_WRITE.V
     12032**DCL     12029--DCLINIT
VX_MAP_LIT_LO_FPT_WRITE.V.DVBYTE.VFC#
     12038**DCL     12038--REDEF
VX_MAP_LO_FPT_WRITE
     11993**DCL     12467<>CALL    12469<>CALL    12471<>CALL    12477<>CALL    12507<>CALL    12538<>CALL
     12560<>CALL    12573<>CALL    12628<>CALL    12657<>CALL    12679<>CALL    12698<>CALL    12709<>CALL
VX_MAP_LO_FPT_WRITE.BUF_.BOUND
     11993**DCL     12464<<ASSIGN  12473<<ASSIGN
VX_MAP_LO_FPT_WRITE.BUF_.BUF$
     11995**DCL     12466<<ASSIGN  12468<<ASSIGN  12470<<ASSIGN  12472<<ASSIGN
VX_MAP_LO_FPT_WRITE.STATION_
     11995**DCL     11995--REDEF
VX_MAP_LO_FPT_WRITE.V
     11996**DCL     11993--DCLINIT
VX_MAP_LO_FPT_WRITE.V.DVBYTE.VFC#
     12002**DCL     12002--REDEF
VX_MAP_NUM
     12056**DCL     12223<<ASSIGN  12350<<ASSIGN  12354<<ASSIGN  12355>>IF      12356>>ASSIGN  12360<<ASSIGN
     12361>>IF      12362>>ASSIGN  12365<<ASSIGN  12366>>IF      12367>>ASSIGN  12592<<ASSIGN  12593>>IF
     12593>>ASSIGN  12594<<ASSIGN  12595>>IF      12595>>ASSIGN  12596<<ASSIGN  12597>>IF      12598>>ASSIGN
     12601<<ASSIGN  12602>>DOWHILE 12603<<ASSIGN  12604>>IF      12605>>ASSIGN  12606<<ASSIGN  12608>>ASSIGN
VX_MAP_REC_SIZE_A
     12057**DCL     12245<<ASSIGN  12246<<ASSIGN  12247<<ASSIGN  12248<<ASSIGN
VX_MAP_ROS$
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:133  
     12052**DCL     12307<<ASSIGN  12310<>CALL    12313<>CALL    12314>>ASSIGN  12317>>ASSIGN
VX_MAP_TABS_A
     12059**DCL     12254>>DOWHILE
VX_MAP_TREE_START$
     12054**DCL     12335<<ASSIGN  12385<<ASSIGN  12388<>CALL    12390>>ASSIGN  12393>>ASSIGN  12740>>ASSIGN
VX_MAP_UTS_HDR
     12090**DCL     12470--ASSIGN
VX_MAP_UTS_HDR.CHARS
     12091**DCL     12092--REDEF   12093--REDEF   12266<<ASSIGN  12276<<ASSIGN  12291--ASSIGN  12292--ASSIGN
     12293--ASSIGN
VX_MAP_WIDTH
     12061**DCL     12250<<ASSIGN  12251<<ASSIGN  12252>>IF      12252<<ASSIGN  12254>>DOWHILE 12258<<ASSIGN
     12258>>ASSIGN  12473>>ASSIGN
VX_MAP_WIDTH_HDR
     12062**DCL     12267<<ASSIGN  12277<<ASSIGN  12464>>ASSIGN
VX_MAX_CTAB
     12063**DCL     12253<<ASSIGN  12254>>DOWHILE 12255<<ASSIGN  12255>>ASSIGN  12257>>IF      12257<<ASSIGN
     12260>>IF
VX_MBUF
     12064**DCL     11994--DCLINIT 11995--DCLINIT 12030--DCLINIT 12031--DCLINIT 12472--ASSIGN
VX_MBUF.CHARS
     12065**DCL     12066--REDEF   12067--REDEF   12474<<ASSIGN  12494<<ASSIGN  12511<<ASSIGN  12527<<ASSIGN
     12529<<CALLBLT 12533<<CALLBLT 12542<<ASSIGN  12557<<CALLBLT 12564<<ASSIGN  12568<>CALL    12569<>CALL
     12570<>CALL    12577<<ASSIGN  12625<<CALLBLT 12632<<ASSIGN  12638<<ASSIGN  12641<<ASSIGN  12644<>CALL
     12646<>CALL    12647<>CALL    12648<>CALL    12651<<CALLBLT 12652<<CALLBLT 12653<<CALLBLT 12661<<ASSIGN
     12676<<CALLBLT 12683<<ASSIGN  12688<<ASSIGN  12690<<CALLBLT 12691<<CALLBLT 12693<>CALL    12694<>CALL
     12695<>CALL    12702<<ASSIGN
VX_MBUF.CHARS_A
     12066**DCL     12496<>CALL    12498<>CALL    12500<>CALL    12502<>CALL    12504<>CALL
VX_M_ALL
      9587**DCL     12239>>IF      12306>>IF      12325>>IF      12384>>IF
VX_M_BASE_PTR
      9589**DCL     12240>>ASSIGN  12307>>ASSIGN  12326>>ASSIGN  12385>>ASSIGN
VX_M_FREE
      9585**DCL     12239>>IF      12240>>ASSIGN  12241<<ASSIGN  12241>>ASSIGN  12306>>IF      12307>>ASSIGN
     12308<<ASSIGN  12308>>ASSIGN  12325>>IF      12326>>ASSIGN  12327<<ASSIGN  12327>>ASSIGN  12384>>IF
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:134  
     12385>>ASSIGN  12386<<ASSIGN  12386>>ASSIGN
VX_M_VECTOR.F
      8541**DCL      8545--REDEF
VX_M_VECTOR_DP.F
      8576**DCL      8580--REDEF
VX_NODE_NUMBER
      9536**DCL     12196>>ASSIGN
VX_O.ACCTN_A$
      9705**DCL      9706--REDEF
VX_O.DCB_MATCH_A$
      9714**DCL      9715--REDEF
VX_O.DCB_MATCH_HIT_A
      9720**DCL      9721--REDEF
VX_O.FIDN_A$
      9699**DCL      9700--REDEF
VX_O.FID_A$
      9691**DCL      9692--REDEF
VX_O.INCLUDE_A$
      9711**DCL      9712--REDEF
VX_O.MAP_A
      9685**DCL      9686--REDEF
VX_O.NODCB_A
      9742**DCL      9743--REDEF
VX_O.NUM_A
      9630**DCL      9632--REDEF
VX_O.OPT.MAP
      9732**DCL     12166>>IF      12281>>IF      12344>>IF      12465>>IF
VX_O.OPT_A
      9730**DCL      9731--REDEF
VX_O.PRIV_A
      9646**DCL      9648--REDEF
VX_O.SIN_A
      9599**DCL      9600--REDEF
VX_O.TCB_A
      9726**DCL      9727--REDEF
VX_OD.ACCTN_A$
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:135  
      9903**DCL      9904--REDEF
VX_OD.DCB_MATCH_A$
      9912**DCL      9913--REDEF
VX_OD.FIDN_A$
      9897**DCL      9898--REDEF
VX_OD.FID_A$
      9889**DCL      9890--REDEF
VX_OD.INCLUDE_A$
      9909**DCL      9910--REDEF
VX_OD.MAP_A
      9883**DCL      9884--REDEF
VX_OD.NODCB_A
      9927**DCL      9928--REDEF
VX_OD.NUM_A
      9830**DCL      9831--REDEF
VX_OD.PRIV_A
      9845**DCL      9846--REDEF
VX_OD.SIN_A
      9799**DCL      9800--REDEF
VX_OD.VECTOR_A$
      9918**DCL      9919--REDEF
VX_OK.FILE.RFNAME
      8677**DCL     12400--CALLBLT 12400--CALLBLT
VX_OK.FILE.RFNAME.CHARS
      8679**DCL     12403>>ASSIGN
VX_OK.FILE.RFNAME.COUNT
      8678**DCL     12374>>ASSIGN  12411>>ASSIGN
VX_OL.MAX_A
      9774**DCL      9776--REDEF
VX_OL.MIN_A
      9759**DCL      9760--REDEF
VX_ON.ACCTN_A$
     10048**DCL     10050--REDEF
VX_ON.DCB_MATCH_A$
     10059**DCL     10061--REDEF
VX_ON.FIDN_A$
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:136  
     10041**DCL     10043--REDEF
VX_ON.FID_A$
     10032**DCL     10034--REDEF
VX_ON.INCLUDE_A$
     10055**DCL     10057--REDEF
VX_ON.MAP_A
     10025**DCL     10027--REDEF
VX_ON.NODCB_A$
     10075**DCL     10076--REDEF
VX_ON.NUM_A
      9970**DCL      9972--REDEF
VX_ON.PRIV_A
      9986**DCL      9988--REDEF
VX_ON.SIN_A
      9938**DCL      9940--REDEF
VX_ON.VECTOR_A$
     10066**DCL     10067--REDEF
VX_ONLINE
      9596**DCL     12148>>IF
VX_OUHEAD.VERSION
      9385**DCL      9387--REDEF
VX_OU_HEAD
      9328**DCL      9367--REDEF
VX_OU_HEAD.REC_A
      9340**DCL      9343--REDEF
VX_O_KEY_BUF.FORM0
      8589**DCL      8592--REDEF    8599--REDEF
VX_O_KEY_BUF_L.FORM0
      8612**DCL      8615--REDEF    8622--REDEF
VX_PASS2_REF.OU.L_START
     10278**DCL     10283--REDEF
VX_PASS2_REF.OU.L_STOP
     10284**DCL     10289--REDEF
VX_PASS2_REF.OU.MAX
     10272**DCL     10277--REDEF
VX_PASS2_REF.OU.SIZE
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:137  
     10290**DCL     10295--REDEF
VX_PASS2_REF.SAT.COUNT
     10317**DCL     10323--REDEF
VX_PASS2_REF.SAT.ENT_SIZE
     10324**DCL     10330--REDEF
VX_PASS2_REF.SAT.L_START
     10303**DCL     10309--REDEF
VX_PASS2_REF.SAT.L_STOP
     10310**DCL     10316--REDEF
VX_PASS2_REF.SAT.MAX
     10297**DCL     10302--REDEF
VX_PASS2_REF.UNSAT.L_START
     10365**DCL     10370--REDEF
VX_PASS2_REF.UNSAT.L_STOP
     10371**DCL     10376--REDEF
VX_PASS2_REF.UNSAT.L_WHERE
     10377**DCL     10382--REDEF
VX_PASS2_REF.UNSAT.MAX
     10359**DCL     10364--REDEF
VX_PASS2_REF.UNSAT.PAGE#
     10389**DCL     10394--REDEF
VX_PASS2_REF.UNSAT.SIZE
     10383**DCL     10388--REDEF
VX_PHRASE.PHRASE
      9791**DCL      9793--REDEF
VX_PROGRAM_BIAS.A
      9569**DCL      9570--REDEF
VX_RU_HEAD
      8920**DCL     12149>>ASSIGN
VX_RU_HEAD.OVRL
      9059**DCL     12195>>IF
VX_RU_HEAD_BUF
      9120**DCL     12149<<ASSIGN  12153--CALL    12153--CALL
VX_RU_HEAD_BUF.ASLNAME.CNT
      9307**DCL     12514>>IF      12532>>IF      12533>>CALLBLT
VX_RU_HEAD_BUF.ASLNAME.TXT
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:138  
      9310**DCL     12533>>CALLBLT
VX_RU_HEAD_BUF.BIAS
      9284**DCL     12395>>ASSIGN  12397>>ASSIGN  12495>>ASSIGN
VX_RU_HEAD_BUF.DATA_SEG.PROTECTION
      9240**DCL     12689>>IF
VX_RU_HEAD_BUF.DATA_SEG.SIZ
      9236**DCL     12161>>ASSIGN  12692>>ASSIGN
VX_RU_HEAD_BUF.DCBRES
      9171**DCL     12503>>ASSIGN
VX_RU_HEAD_BUF.EDRECSIZE
      9192**DCL     12225>>ASSIGN  12247>>ASSIGN
VX_RU_HEAD_BUF.EPRECSIZE
      9189**DCL     12225>>ASSIGN  12246>>ASSIGN
VX_RU_HEAD_BUF.LIBNAME.CNT
      9297**DCL     12514>>IF      12528>>IF      12529>>CALLBLT
VX_RU_HEAD_BUF.LIBNAME.TXT
      9300**DCL     12529>>CALLBLT
VX_RU_HEAD_BUF.NRECSIZE
      9186**DCL     12225>>ASSIGN  12245>>ASSIGN
VX_RU_HEAD_BUF.OVRL
      9259**DCL     12739>>IF
VX_RU_HEAD_BUF.PRECSIZE
      9182**DCL     12222>>ASSIGN
VX_RU_HEAD_BUF.RDATA
      9139**DCL     12396>>ASSIGN  12397>>ASSIGN
VX_RU_HEAD_BUF.ROSIZE
      9198**DCL     12158>>ASSIGN  12299>>IF      12567>>ASSIGN
VX_RU_HEAD_BUF.RPROC
      9129**DCL     12399>>ASSIGN
VX_RU_HEAD_BUF.SDRECSIZE
      9195**DCL     12225>>ASSIGN  12248>>ASSIGN
VX_RU_HEAD_BUF.SEV
      9160**DCL     12499>>ASSIGN
VX_RU_HEAD_BUF.START
      9165**DCL     12497>>ASSIGN
VX_RU_HEAD_BUF.TCBSIZE
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:139  
      9178**DCL     12501>>ASSIGN
VX_RU_HEAD_BUF.TREEDISP
      9174**DCL     12300>>ASSIGN  12314>>ASSIGN  12315>>ASSIGN
VX_RU_HEAD_BUF.VDPGS
      9131**DCL     12164>>ASSIGN  12639>>ASSIGN
VX_RU_HEAD_BUF.VERSION#
      9200**DCL     12282>>ASSIGN
VX_RU_HEAD_BUF.VPPGS
      9123**DCL     12164>>ASSIGN  12642>>ASSIGN
VX_R_KEY_BIRTH
     10151**DCL     12288--ASSIGN  12289>>ASSIGN
VX_R_KEY_BUF.FORM0
      8638**DCL      8642--REDEF    8648--REDEF
VX_R_KEY_BUF.FORM0.CHARS
      8640**DCL     12152<<ASSIGN  12289<<ASSIGN
VX_R_KEY_BUF.FORM0.COUNT
      8639**DCL     12151<<ASSIGN  12288<<ASSIGN
VX_R_KEY_HEAD
     10150**DCL     12151--ASSIGN  12152>>ASSIGN
VX_SD.A
      8266**DCL      8267--REDEF
VX_SEG_EPAGE#
     10404**DCL     12161<<ASSIGN  12162>>ASSIGN  12687>>IF      12695<>CALL
VX_SPC.B$.MINE
     10460**DCL     10466--REDEF
VX_SPC.B$.NAME
     10439**DCL     10445--REDEF
VX_SPC.B$.SKIP
     10453**DCL     10459--REDEF
VX_SPC.B$.VALUE
     10446**DCL     10452--REDEF
VX_SPC.SEG.NAME
     10408**DCL     10414--REDEF
VX_SPC.SEG.VALUE
     10415**DCL     10421--REDEF
VX_TSX0_OVERLAY.H
PL6.E3A0      #001=VXM$MAP File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:19 Page:140  
     10183**DCL     10186--REDEF
WORK_BUF.COMPOSITE
     11601**DCL     11604--REDEF

PL6.E3A0      #002=VXM$OVERLAY File=VXM$MAP.:E05TSI                              WED 07/30/97 08:21 Page:141  
      589        1        /*T***********************************************************/
      590        2        /*T*                                                         */
      591        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      592        4        /*T*                                                         */
      593        5        /*T***********************************************************/
      594        6        /*X* DMR,PLM=6,IND=4,CSU=2,EXM=0,ECU=2,MOC,DCI=4,CRT=4,CTI=8,CCC */
      595        7        VXM$OVERLAY:
      596        8              PROC ( START$ );
      597        9
      598       10        %INCLUDE VX_INC_C;
      599    10726        %VX$WORD;

             10738    1   /*******************************************************************************
             10739    1   *                                                                              *
             10740    1   *                          VX$WORD                                                 *
             10741    1   *                                                                              *
             10742    1   *******************************************************************************/

             10747    1   DCL VX$WORD_A(0:0)       UBIN(36) ALIGNED    BASED PTR;
             10748    1   DCL VX$HALF_A(0:0)       UBIN(18) HALIGNED   BASED PTR;
             10749    1   DCL VX$BYTE_A(0:0)       UBIN( 9) CALIGNED   BASED PTR;
             10750    1   DCL VX$CHAR_A(0:0)       CHAR( 1) UNAL       BASED PTR;
             10751        /**/
             10752    1   DCL VX$WORD_SBIN_A(0:0)  SBIN WORD ALIGNED   BASED     PTR;
             10753    1   DCL VX$HALF_SBIN_A(0:0)  SBIN HALF HALIGNED  BASED     PTR;
             10754    1   DCL VX$BYTE_SBIN_A(0:0)  SBIN HALF CALIGNED  BASED     PTR;
             10755    1   DCL VX$BIT_A(0:0)        BIT(36)   ALIGNED   BASED     PTR;
      600    10758        %T$C;

             10770    1   /*******************************************************************************
             10771    1   *                                                                              *
             10772    1   *                          T$C                                                 *
             10773    1   *                                                                              *
             10774    1   *******************************************************************************/

             10779    1   DCL 1 T$C           BASED     ALIGNED,  /* Text count                         */
             10780    1         2 COUNT        UBIN( 9) UNAL,
PL6.E3A0      #002=VXM$OVERLAY File=VXM$MAP.:E05TSI                              WED 07/30/97 08:21 Page:142  
             10781    1         2 CHARS        CHAR( T$C.COUNT )   UNAL;
             10782    1   DCL 1 T$C_UNAL      BASED     UNAL,     /* Text count                         */
             10783    1         2 COUNT        UBIN( 9) UNAL,
             10784    1         2 CHARS        CHAR( T$C_UNAL.COUNT ) UNAL;
      601    10787        %SET  LISTMAC='1'B;
      602    10788        %SET  LISTSUB='1'B;
      603    10789        %SET  LISTEXP='1'B;
      604    10790        %P;
             10791        %LSET LISTDIR='0'B;

             10798    1   /*******************************************************************************
             10799    1   *                                                                              *
             10800    1   *                          PARAMETERS                                              *
             10801    1   *                                                                              *
             10802    1   *******************************************************************************/

      605    10806    1   DCL   START$      PTR;                  /* Pointer to start of tree table */
      606    10807        %C;
             10808        %LSET LISTDIR='0'B;

             10815    1   /*******************************************************************************
             10816    1   *                                                                              *
             10817    1   *                          CHAR                                                 *
             10818    1   *                                                                              *
             10819    1   *******************************************************************************/

      607    10823    1   DCL  ROOT_NODE_LIT    CHAR(0)  STATIC  INIT(
      608    10824    1   'A******* ROOT NODE *******' );
      609    10825    1   DCL  SUMMARY_HEADING (0:2)    CHAR(81) STATIC  INIT(
      610    10826    1   'A                                 TOTAL   DATA   DATA   DATA   PROC   PROC   PROC',
      611    10827    1   'ANODE              <PARENT NODE>   SIZE    LOW   HIGH   SIZE    LOW   HIGH   SIZE',
      612    10828    1   'A------------------------------- ------ ------ ------ ------ ------ ------ ------')
             10828            ;
      613    10829    1   DCL   DECIMAL   CHAR(8)    AUTO;
      614    10830    1   DCL   SKIP_THREE_LINES    CHAR(2)     CONSTANT    INIT ( 'C ' );
      615    10831        %PTR;
             10832        %LSET LISTDIR='0'B;
PL6.E3A0      #002=VXM$OVERLAY File=VXM$MAP.:E05TSI                              WED 07/30/97 08:21 Page:143  

             10839    1   /*******************************************************************************
             10840    1   *                                                                              *
             10841    1   *                          PTR                                                 *
             10842    1   *                                                                              *
             10843    1   *******************************************************************************/

      616    10847        %POINTER;
             10848    1   DCL P$         PTR       ALIGNED AUTO;
             10849    1   DCL Q$         PTR       ALIGNED AUTO;
             10850    1   DCL R$         PTR       ALIGNED AUTO;
      617    10852    1   DCL   CURR$       PTR     AUTO;
      618    10853    1   DCL   PARENT$     PTR     AUTO;
      619    10854        %B;
             10855        %LSET LISTDIR='0'B;

             10862    1   /*******************************************************************************
             10863    1   *                                                                              *
             10864    1   *                          BIT                                                 *
             10865    1   *                                                                              *
             10866    1   *******************************************************************************/

      620    10870    1   DCL MORE_LEVELS  BIT(1)   STATIC;
      621    10871        %U;
             10872        %LSET LISTDIR='0'B;

             10879    1   /*******************************************************************************
             10880    1   *                                                                              *
             10881    1   *                          UBIN                                                 *
             10882    1   *                                                                              *
             10883    1   *******************************************************************************/

      622    10887        %INDEX;
             10888    1   DCL I          UBIN(36) ALIGNED AUTO;
             10889    1   DCL SI REDEF I SBIN WORD ALIGNED;
             10890    1   DCL J          UBIN(36) ALIGNED AUTO;
             10891    1   DCL SJ REDEF J SBIN WORD ALIGNED;
PL6.E3A0      #002=VXM$OVERLAY File=VXM$MAP.:E05TSI                              WED 07/30/97 08:21 Page:144  
             10892    1   DCL K          UBIN(36) ALIGNED AUTO;
             10893    1   DCL SK REDEF K SBIN WORD ALIGNED;
             10894    1   DCL L          UBIN(36) ALIGNED AUTO;
             10895    1   DCL SL REDEF L    SBIN WORD ALIGNED;
      623    10897    1   DCL       SIZE        UBIN        AUTO;
      624    10898        %E;
             10899        %LSET LISTDIR='0'B;

             10906    1   /*******************************************************************************
             10907    1   *                                                                              *
             10908    1   *                          ENTRY                                                 *
             10909    1   *                                                                              *
             10910    1   *******************************************************************************/

      625    10914    1   DCL VXM$LEVEL ENTRY(5);
      626    10915        %ENTRIES;
             10916    1   DCL VXE$ERROR       ENTRY(4);
             10917    1   DCL VXE$ERR         ENTRY(3);
             10918    1   DCL VXE$MERC        ENTRY;
             10919    1   DCL VXE$ERRMSG      ENTRY(3);
             10920    1   DCL VXR$READ        ENTRY( 3 );
             10921    1   DCL VXW$WRITE       ENTRY( 3 );
             10922    1   DCL VXW$WRITE_DO    ENTRY( 2 );
             10923    1   DCL VXD$B2C         ENTRY( 5 );
             10924    1   DCL VXD$C2B         ENTRY( 3 );
             10925    1   DCL VXA$GET         ENTRY( 3 );
             10926    1   DCL VXF$FREE        ENTRY( 3 );
             10927    1   DCL VXQ$SORT        ENTRY( 7 );
             10928    1   DCL VXY$YESNO       ENTRY( 1 );
      627    10930        %S;
             10931        %LSET LISTDIR='0'B;

             10938    1   /*******************************************************************************
             10939    1   *                                                                              *
             10940    1   *                          SBIN                                                 *
             10941    1   *                                                                              *
             10942    1   *******************************************************************************/
PL6.E3A0      #002=VXM$OVERLAY File=VXM$MAP.:E05TSI                              WED 07/30/97 08:21 Page:145  

      628    10946    1   DCL       NODE_LEVEL_NUM      SBIN        AUTO;
      629    10947        %BANNER(ARG="VX$TREE_HEADER - VX$TREE_NODE");
             10948        %LSET LISTDIR='0'B;

             10955    1   /*******************************************************************************
             10956    1   *                                                                              *
             10957    1   *                          VX$TREE_HEADER - VX$TREE_NODE                           *
             10958    1   *                                                                              *
             10959    1   *******************************************************************************/

      630    10963        %B$TREE_TABLE(HDR_NAME=VX$TREE_HEADER, NODE_NAME=VX$TREE_NODE );
             10964    1   DCL 1 VX$TREE_HEADER BASED ALIGNED,
             10965              /*K*  HDR_NAME is the Tree table header.  */
             10966    1         2 NODES UBIN HALF UNAL,
             10967                /*K*  NODES is the number of nodes in the tree table.  */
             10968    1         2 SIZE UBIN HALF UNAL,
             10969                /*K*  SIZE is the total word size of the tree table
             10970                      (HDR + NODES + TEST pool).   */
             10971    1         2 LIB$ PTR,
             10972                /*K*  LIB$ is the pointer to the name of the shared library
             10973                      currently associated.  */
             10974    1         2 PRECSIZE UBIN HALF UNAL,
             10975                /*K*  PRECSIZE  is the maximum program record size in the
             10976                      Run Unit (from the Head record).  */
             10977    1         2 MAX_LIB_DATA UBIN HALF UNAL;
             10978                /*K*  MAX_LIB_DATA is the maximum reserved in the program
             10979                      image for the shared library data.  */
             10980    1   DCL 1 VX$TREE_NODE BASED ALIGNED,
             10981              /*K*  NODE_NAME is the node specification.  */
             10982    1         2 NAME$ PTR,
             10983                /*K*  NAME$ is the pointer to the name of the node.  */
             10984    1         2 FLGS,
             10985                /*K*  FLGS are control flags used by M$OLAY.  */
             10986    1           3 NOW_IN BIT(1) UNAL,
             10987                  /*K*  NOW_IN is set if this node is now in memory.  */
             10988    1           3 WAS_IN BIT(1) UNAL,
PL6.E3A0      #002=VXM$OVERLAY File=VXM$MAP.:E05TSI                              WED 07/30/97 08:21 Page:146  
             10989                  /*K*  WAS_IN is set if this node was in memory.  */
             10990    1           3 * BIT(7) UNAL,
             10991                  /*K*  * is reserved for future use and must be zero.  */
             10992    1         2 AFLGS,
             10993                /*K*  AFLGS are access flags.  */
             10994    1           3 * BIT(6) UNAL,
             10995                  /*K*  * is reserved for future use and must be zero.  */
             10996    1           3 NOPATH BIT(1) UNAL,
             10997                  /*K*  NOPATH is set if this node is independently loaded
             10998                        (no backward path).  */
             10999    1           3 ENTER BIT(1) UNAL,
             11000                  /*K*  ENTER is set if ENTRY$ is valid.  */
             11001    1           3 CANCEL BIT(1) UNAL,
             11002                  /*K*  CANCEL is set if the overlay was removed by
             11003                        "CANCEL=YES".   */
             11004    1         2 BACK# SBIN HALF UNAL,
             11005                /*K*  BACK# is the backward link (parent).  */
             11006    1         2 FORWARD# SBIN HALF UNAL,
             11007                /*K*  FORWARD# is the forward link (daughter).  */
             11008    1         2 OVERLAY# SBIN HALF UNAL,
             11009                /*K*  OVERLAY# is the overlay link (same level).   */
             11010    1         2 PADDR UBIN HALF UNAL,
             11011                /*K*  PADDR is the address of procedure.  */
             11012    1         2 PSIZE UBIN HALF UNAL,
             11013                /*K*  PSIZE is the size of procedure.  */
             11014    1         2 DADDR UBIN HALF UNAL,
             11015                /*K*  DADDR is the address of data.  */
             11016    1         2 DSIZE UBIN HALF UNAL,
             11017                /*K*  DSIZE is the size of data.  */
             11018    1         2 ENTRY$ EPTR;
             11019                /*K*  ENTRY$ is the overlay entry point (see ENTER).  */
      631    11021        %BANNER(ARG=FPTS);
             11022        %LSET LISTDIR='0'B;

             11029    1   /*******************************************************************************
             11030    1   *                                                                              *
             11031    1   *                          FPTS                                                 *
PL6.E3A0      #002=VXM$OVERLAY File=VXM$MAP.:E05TSI                              WED 07/30/97 08:21 Page:147  
             11032    1   *                                                                              *
             11033    1   *******************************************************************************/

      632    11037        %PLIST;
      633    11038        %FPT_WRITE( FPTN=VX_MAP_LO_FPT_WRITE, STCLASS=SYMREF);
      634    11069        %FPT_WRITE( FPTN=VX_MAP_LIT_LO_FPT_WRITE, STCLASS=SYMREF);
      635    11100        %EJECT;
PL6.E3A0      #002=VXM$OVERLAY File=VXM$MAP.:E05TSI                              WED 07/30/97 08:21 Page:148  
      636    11101        /*
      637    11102              Variables for map(ping)
      638    11103        */
      639    11104    1   DCL VX_MAP$               PTR  ALIGNED   SYMREF;
      640    11105    1   DCL VX_MAP_ROS$           PTR  ALIGNED   SYMREF;
      641    11106    1   DCL VX_MAP_AREA$          PTR  ALIGNED   SYMREF;
      642    11107    1   DCL VX_MAP_TREE_START$    PTR  ALIGNED   SYMREF;
      643    11108    1   DCL VX_MAP_AREA_SIZE      UBIN(36) ALIGNED SYMREF;
      644    11109    1   DCL VX_MAP_NUM            SBIN WORD ALIGNED   SYMREF;
      645    11110    1   DCL VX_MAP_REC_SIZE_A(0:9)   UBIN(36)  ALIGNED   SYMREF;
      646    11111    1   DCL VX_CTAB               UBIN(36) ALIGNED SYMREF;
      647    11112    1   DCL VX_MAP_TABS_A(0:4)    UBIN(36)  ALIGNED   SYMREF;
      648    11113
      649    11114    1   DCL VX_MAP_WIDTH          UBIN(36)  ALIGNED   SYMREF;
      650    11115    1   DCL VX_MAP_WIDTH_HDR      UBIN(36)  ALIGNED   SYMREF;
      651    11116    1   DCL VX_MAX_CTAB           UBIN(36)  ALIGNED   SYMREF;
      652    11117    1   DCL 1 VX_MBUF ALIGNED SYMREF,
      653    11118    1         2 CHARS CHAR(132) UNAL,
      654    11119    1         2 CHARS_A(0:131) REDEF CHARS CHAR(1) UNAL,
      655    11120    1         2 LIT_BUF REDEF CHARS UNAL,
      656    11121    1           3 VFC CHAR(1) UNAL,
      657    11122    1           3 CHARS CHAR(131) UNAL;
      658    11123    1   DCL VX_HDR_FIELD1              UBIN(36)  ALIGNED   SYMREF;
      659    11124    1   DCL VX_HDR_FIELD2              UBIN(36)  ALIGNED   SYMREF;
      660    11125    1   DCL 1 VX_MAP_HDR0 ALIGNED SYMREF,
      661    11126    1         2 CHARS CHAR(132) UNAL,
      662    11127    1         2 CHARS_A(0:131) REDEF CHARS CHAR(1) UNAL,
      663    11128    1         2 LIT_BUF REDEF CHARS UNAL,
      664    11129    1           3 VFC CHAR(1) UNAL,
      665    11130    1           3 CHARS CHAR(131) UNAL;
      666    11131    1   DCL 1 VX_MAP_HDR ALIGNED SYMREF,
      667    11132    1         2 CHARS CHAR(132) UNAL,
      668    11133    1         2 CHARS_A(0:131) REDEF CHARS CHAR(1) UNAL,
      669    11134    1         2 LIT_BUF REDEF CHARS UNAL,
      670    11135    1           3 VFC CHAR(1) UNAL,
      671    11136    1           3 CHARS CHAR(131) UNAL;
      672    11137    1   DCL 1 VX_MAP_HDR1 ALIGNED SYMREF,
PL6.E3A0      #002=VXM$OVERLAY File=VXM$MAP.:E05TSI                              WED 07/30/97 08:21 Page:149  
      673    11138    1         2 CHARS CHAR(132) UNAL,
      674    11139    1         2 CHARS_A(0:131) REDEF CHARS CHAR(1) UNAL,
      675    11140    1         2 LIT_BUF REDEF CHARS UNAL,
      676    11141    1           3 VFC CHAR(1) UNAL,
      677    11142    1           3 CHARS CHAR(131) UNAL;
      678    11143    1   DCL 1 VX_MAP_UTS_HDR ALIGNED SYMREF,
      679    11144    1         2 CHARS CHAR(132) UNAL,
      680    11145    1         2 CHARS_A(0:131) REDEF CHARS CHAR(1) UNAL,
      681    11146    1         2 LIT_BUF REDEF CHARS UNAL,
      682    11147    1           3 VFC CHAR(1) UNAL,
      683    11148    1           3 CHARS CHAR(131) UNAL;
      684    11149        %EJECT;
PL6.E3A0      #002=VXM$OVERLAY File=VXM$MAP.:E05TSI                              WED 07/30/97 08:21 Page:150  
      685    11150        /*
      686    11151                          Write out headings
      687    11152        */
      688    11153    1         VX_MAP_LO_FPT_WRITE.BUF_.BOUND = VX_MAP_WIDTH_HDR;
      689    11154    1         VX_MAP_LO_FPT_WRITE.BUF_.BUF$ = ADDR( VX_MAP_HDR0 );
      690    11155    1         CALL INSERT( VX_MAP_HDR0.CHARS, VX_HDR_FIELD1+34, 20,
      691    11156    1                 'OVERLAY  SUMMARY' );
      692    11157    1         CALL M$WRITE( VX_MAP_LO_FPT_WRITE)           ALTRET(MAP_IO_ERROR);
      693    11158    1         VX_MAP_LO_FPT_WRITE.BUF_.BUF$ = ADDR( VX_MAP_HDR );
      694    11159    1         CALL M$WRITE( VX_MAP_LO_FPT_WRITE)           ALTRET(MAP_IO_ERROR);
      695    11160    1         VX_MAP_LO_FPT_WRITE.BUF_.BUF$ = ADDR( VX_MAP_UTS_HDR );
      696    11161    1         CALL M$WRITE( VX_MAP_LO_FPT_WRITE)           ALTRET(MAP_IO_ERROR);
      697    11162    1         VX_MAP_LO_FPT_WRITE.BUF_     =    VECTOR( VX_MBUF );
      698    11163    1         CURR$ = START$;
      699    11164        /*
      700    11165                                  Print out a summary for all the overlays
      701    11166        */
      702    11167    1         NODE_LEVEL_NUM = -1;
      703    11168    1         MORE_LEVELS = '1'B/*@TRUE_B*/;
      704    11169    2         DO WHILE ( MORE_LEVELS );
      705    11170    2             MORE_LEVELS = '0'B/*@FALSE_B*/;
      706    11171    2             NODE_LEVEL_NUM = NODE_LEVEL_NUM + 1;
      707    11172        /*
      708    11173                          Output a headings for the overlay summary
      709    11174        */
      710    11175    3             IF NODE_LEVEL_NUM = 0 THEN DO;
      711    11176                      %M_WRITE( BEFORE="VX_MBUF.CHARS='A';", CLEAR=" " );
      712    11185                      %WR_LIT( MES1=ROOT_NODE_LIT );
      713    11195    3                END;
      714    11196    3             ELSE DO;
      715    11197    3                 CALL VXD$B2C( DECIMAL, 0, 8, NODE_LEVEL_NUM, 10);
      716    11198    3                 CALL INDEX1R( I, ' ', DECIMAL);
      717    11199    3                 CALL CONCAT( VX_MBUF.CHARS, 'A******* LEVEL ', SUBSTR(DECIMAL, I),
      718    11200    3                         ' NODE(S) *******');
      719    11201                      %M_WRITE;
      720    11210    3                END;
      721    11211    3             DO I = 0 TO 2;
PL6.E3A0      #002=VXM$OVERLAY File=VXM$MAP.:E05TSI                              WED 07/30/97 08:21 Page:151  
      722    11212                      %WR_LIT( MES1="SUMMARY_HEADING(I)" );
      723    11222    3                END;
      724    11223        /*
      725    11224                                  Print summary for nodes at next level
      726    11225        */
      727    11226    2             CALL VXM$LEVEL( START$, START$, NODE_LEVEL_NUM, 0, MORE_LEVELS );
      728    11227                  %WR_LIT( MES1=SKIP_THREE_LINES );
      729    11237    2            END;                           /* end do while (MORE_LEVELS) */
      730    11238    1         RETURN;
      731    11239
      732    11240
      733    11241
      734    11242    1   MAP_IO_ERROR:
      735    11243    1         CALL M$MERC                             ALTRET( MERC_ERROR );
      736    11244              %ERROR_IT;
      737    11247    1   MERC_ERROR:
      738    11248    1         CALL VXE$MERC;
      739    11249
      740    11250
      741    11251    1   END  VXM$OVERLAY;
      742    11252        %EOD;

PL6.E3A0      #002=VXM$OVERLAY File=VXM$MAP.:E05TSI                              WED 07/30/97 08:21 Page:152  
--  Include file information  --

   F_DCB_D.:E05TOU  is referenced.
   VX_DCB_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_FIXED_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VX_MACRO_C.:E05TOU  is referenced.
   VX_PERR_C.:E05TOU  is referenced.
   VX_SUBS_C.:E05TOU  is referenced.
   VX_SWITCH_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   VX_INC_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VXM$OVERLAY.

   Procedure VXM$OVERLAY requires 155 words for executable code.
   Procedure VXM$OVERLAY requires 24 words of local(AUTO) storage.

PL6.E3A0      #002=VXM$OVERLAY File=VXM$MAP.:E05TSI                              WED 07/30/97 08:21 Page:153  

 Object Unit name= VXM$OVERLAY                                File name= VXM$MAP.:E05TOU
 UTS= JUL 30 '97 08:21:32.12 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  LblCom even  none    96    140  VX_CONST_DCB
    2   Data  even  none    69    105  VXM$OVERLAY
    3  RoData even  UTS     14     16  VXM$OVERLAY
    4   Proc  even  none   155    233  VXM$OVERLAY
    5  RoData even  none    20     24  VXM$OVERLAY

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     4      0   yes            yes      Std        1  VXM$OVERLAY

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       5 VXD$B2C
         yes           Std       5 VXM$LEVEL
         yes           Std       0 VXE$MERC
                       nStd      0 X66_AUTO_1
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #002=VXM$OVERLAY File=VXM$MAP.:E05TSI                              WED 07/30/97 08:21 Page:154  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  VX_OU_HEAD                            VX_ERRORS
     VX_MAP_LO_FPT_WRITE                   VX_MAP_LIT_LO_FPT_WRITE               VX_CTAB
     VX_MAP_WIDTH_HDR                      VX_MBUF                               VX_HDR_FIELD1
     VX_MAP_HDR0                           VX_MAP_HDR                            VX_MAP_UTS_HDR
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #002=VXM$OVERLAY File=VXM$MAP.:E05TSI                              WED 07/30/97 08:21 Page:155  


      589        1        /*T***********************************************************/
      590        2        /*T*                                                         */
      591        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      592        4        /*T*                                                         */
      593        5        /*T***********************************************************/
      594        6        /*X* DMR,PLM=6,IND=4,CSU=2,EXM=0,ECU=2,MOC,DCI=4,CRT=4,CTI=8,CCC */
      595        7        VXM$OVERLAY:
      596        8              PROC ( START$ );

      8  4 000000   000000 700200 xent  VXM$OVERLAY  TSX0  ! X66_AUTO_1
         4 000001   000030 000001                    ZERO    24,1

      597        9
      598       10        %INCLUDE VX_INC_C;
      599    10726        %VX$WORD;

             10738    1   /*******************************************************************************
             10739    1   *                                                                              *
             10740    1   *                          VX$WORD                                                *
             10741    1   *                                                                              *
             10742    1   *******************************************************************************/

             10747    1   DCL VX$WORD_A(0:0)       UBIN(36) ALIGNED    BASED PTR;
             10748    1   DCL VX$HALF_A(0:0)       UBIN(18) HALIGNED   BASED PTR;
             10749    1   DCL VX$BYTE_A(0:0)       UBIN( 9) CALIGNED   BASED PTR;
             10750    1   DCL VX$CHAR_A(0:0)       CHAR( 1) UNAL       BASED PTR;
             10751        /**/
             10752    1   DCL VX$WORD_SBIN_A(0:0)  SBIN WORD ALIGNED   BASED     PTR;
             10753    1   DCL VX$HALF_SBIN_A(0:0)  SBIN HALF HALIGNED  BASED     PTR;
             10754    1   DCL VX$BYTE_SBIN_A(0:0)  SBIN HALF CALIGNED  BASED     PTR;
             10755    1   DCL VX$BIT_A(0:0)        BIT(36)   ALIGNED   BASED     PTR;
      600    10758        %T$C;

             10770    1   /*******************************************************************************
             10771    1   *                                                                              *
             10772    1   *                          T$C                                                 *
PL6.E3A0      #002=VXM$OVERLAY File=VXM$MAP.:E05TSI                              WED 07/30/97 08:21 Page:156  
             10773    1   *                                                                              *
             10774    1   *******************************************************************************/

             10779    1   DCL 1 T$C           BASED     ALIGNED,  /* Text count                         */
             10780    1         2 COUNT        UBIN( 9) UNAL,
             10781    1         2 CHARS        CHAR( T$C.COUNT )   UNAL;
             10782    1   DCL 1 T$C_UNAL      BASED     UNAL,     /* Text count                         */
             10783    1         2 COUNT        UBIN( 9) UNAL,
             10784    1         2 CHARS        CHAR( T$C_UNAL.COUNT ) UNAL;
      601    10787        %SET  LISTMAC='1'B;
      602    10788        %SET  LISTSUB='1'B;
      603    10789        %SET  LISTEXP='1'B;
      604    10790        %P;
             10791        %LSET LISTDIR='0'B;

             10798    1   /*******************************************************************************
             10799    1   *                                                                              *
             10800    1   *                          PARAMETERS                                             *
             10801    1   *                                                                              *
             10802    1   *******************************************************************************/

      605    10806    1   DCL   START$      PTR;                  /* Pointer to start of tree table */
      606    10807        %C;
             10808        %LSET LISTDIR='0'B;

             10815    1   /*******************************************************************************
             10816    1   *                                                                              *
             10817    1   *                          CHAR                                                 *
             10818    1   *                                                                              *
             10819    1   *******************************************************************************/

      607    10823    1   DCL  ROOT_NODE_LIT    CHAR(0)  STATIC  INIT(
      608    10824    1   'A******* ROOT NODE *******' );
      609    10825    1   DCL  SUMMARY_HEADING (0:2)    CHAR(81) STATIC  INIT(
      610    10826    1   'A                                 TOTAL   DATA   DATA   DATA   PROC   PROC  PROC',
      611    10827    1   'ANODE              <PARENT NODE>   SIZE    LOW   HIGH   SIZE    LOW   HIGH  SIZE',
      612    10828    1  'A------------------------------- ------ ------ ------ ------ ------ ------ ------')
PL6.E3A0      #002=VXM$OVERLAY File=VXM$MAP.:E05TSI                              WED 07/30/97 08:21 Page:157  
             10828            ;
      613    10829    1   DCL   DECIMAL   CHAR(8)    AUTO;
      614    10830    1   DCL   SKIP_THREE_LINES    CHAR(2)     CONSTANT    INIT ( 'C ' );
      615    10831        %PTR;
             10832        %LSET LISTDIR='0'B;

             10839    1   /*******************************************************************************
             10840    1   *                                                                              *
             10841    1   *                          PTR                                                 *
             10842    1   *                                                                              *
             10843    1   *******************************************************************************/

      616    10847        %POINTER;
             10848    1   DCL P$         PTR       ALIGNED AUTO;
             10849    1   DCL Q$         PTR       ALIGNED AUTO;
             10850    1   DCL R$         PTR       ALIGNED AUTO;
      617    10852    1   DCL   CURR$       PTR     AUTO;
      618    10853    1   DCL   PARENT$     PTR     AUTO;
      619    10854        %B;
             10855        %LSET LISTDIR='0'B;

             10862    1   /*******************************************************************************
             10863    1   *                                                                              *
             10864    1   *                          BIT                                                 *
             10865    1   *                                                                              *
             10866    1   *******************************************************************************/

      620    10870    1   DCL MORE_LEVELS  BIT(1)   STATIC;
      621    10871        %U;
             10872        %LSET LISTDIR='0'B;

             10879    1   /*******************************************************************************
             10880    1   *                                                                              *
             10881    1   *                          UBIN                                                 *
             10882    1   *                                                                              *
             10883    1   *******************************************************************************/

PL6.E3A0      #002=VXM$OVERLAY File=VXM$MAP.:E05TSI                              WED 07/30/97 08:21 Page:158  
      622    10887        %INDEX;
             10888    1   DCL I          UBIN(36) ALIGNED AUTO;
             10889    1   DCL SI REDEF I SBIN WORD ALIGNED;
             10890    1   DCL J          UBIN(36) ALIGNED AUTO;
             10891    1   DCL SJ REDEF J SBIN WORD ALIGNED;
             10892    1   DCL K          UBIN(36) ALIGNED AUTO;
             10893    1   DCL SK REDEF K SBIN WORD ALIGNED;
             10894    1   DCL L          UBIN(36) ALIGNED AUTO;
             10895    1   DCL SL REDEF L    SBIN WORD ALIGNED;
      623    10897    1   DCL       SIZE        UBIN        AUTO;
      624    10898        %E;
             10899        %LSET LISTDIR='0'B;

             10906    1   /*******************************************************************************
             10907    1   *                                                                              *
             10908    1   *                          ENTRY                                                 *
             10909    1   *                                                                              *
             10910    1   *******************************************************************************/

      625    10914    1   DCL VXM$LEVEL ENTRY(5);
      626    10915        %ENTRIES;
             10916    1   DCL VXE$ERROR       ENTRY(4);
             10917    1   DCL VXE$ERR         ENTRY(3);
             10918    1   DCL VXE$MERC        ENTRY;
             10919    1   DCL VXE$ERRMSG      ENTRY(3);
             10920    1   DCL VXR$READ        ENTRY( 3 );
             10921    1   DCL VXW$WRITE       ENTRY( 3 );
             10922    1   DCL VXW$WRITE_DO    ENTRY( 2 );
             10923    1   DCL VXD$B2C         ENTRY( 5 );
             10924    1   DCL VXD$C2B         ENTRY( 3 );
             10925    1   DCL VXA$GET         ENTRY( 3 );
             10926    1   DCL VXF$FREE        ENTRY( 3 );
             10927    1   DCL VXQ$SORT        ENTRY( 7 );
             10928    1   DCL VXY$YESNO       ENTRY( 1 );
      627    10930        %S;
             10931        %LSET LISTDIR='0'B;

PL6.E3A0      #002=VXM$OVERLAY File=VXM$MAP.:E05TSI                              WED 07/30/97 08:21 Page:159  
             10938    1   /*******************************************************************************
             10939    1   *                                                                              *
             10940    1   *                          SBIN                                                 *
             10941    1   *                                                                              *
             10942    1   *******************************************************************************/

      628    10946    1   DCL       NODE_LEVEL_NUM      SBIN        AUTO;
      629    10947        %BANNER(ARG="VX$TREE_HEADER - VX$TREE_NODE");
             10948        %LSET LISTDIR='0'B;

             10955    1   /*******************************************************************************
             10956    1   *                                                                              *
             10957    1   *                          VX$TREE_HEADER - VX$TREE_NODE                          *
             10958    1   *                                                                              *
             10959    1   *******************************************************************************/

      630    10963        %B$TREE_TABLE(HDR_NAME=VX$TREE_HEADER, NODE_NAME=VX$TREE_NODE );
             10964    1   DCL 1 VX$TREE_HEADER BASED ALIGNED,
             10965              /*K*  HDR_NAME is the Tree table header.  */
             10966    1         2 NODES UBIN HALF UNAL,
             10967                /*K*  NODES is the number of nodes in the tree table.  */
             10968    1         2 SIZE UBIN HALF UNAL,
             10969                /*K*  SIZE is the total word size of the tree table
             10970                      (HDR + NODES + TEST pool).   */
             10971    1         2 LIB$ PTR,
             10972                /*K*  LIB$ is the pointer to the name of the shared library
             10973                      currently associated.  */
             10974    1         2 PRECSIZE UBIN HALF UNAL,
             10975                /*K*  PRECSIZE  is the maximum program record size in the
             10976                      Run Unit (from the Head record).  */
             10977    1         2 MAX_LIB_DATA UBIN HALF UNAL;
             10978                /*K*  MAX_LIB_DATA is the maximum reserved in the program
             10979                      image for the shared library data.  */
             10980    1   DCL 1 VX$TREE_NODE BASED ALIGNED,
             10981              /*K*  NODE_NAME is the node specification.  */
             10982    1         2 NAME$ PTR,
             10983                /*K*  NAME$ is the pointer to the name of the node.  */
PL6.E3A0      #002=VXM$OVERLAY File=VXM$MAP.:E05TSI                              WED 07/30/97 08:21 Page:160  
             10984    1         2 FLGS,
             10985                /*K*  FLGS are control flags used by M$OLAY.  */
             10986    1           3 NOW_IN BIT(1) UNAL,
             10987                  /*K*  NOW_IN is set if this node is now in memory.  */
             10988    1           3 WAS_IN BIT(1) UNAL,
             10989                  /*K*  WAS_IN is set if this node was in memory.  */
             10990    1           3 * BIT(7) UNAL,
             10991                  /*K*  * is reserved for future use and must be zero.  */
             10992    1         2 AFLGS,
             10993                /*K*  AFLGS are access flags.  */
             10994    1           3 * BIT(6) UNAL,
             10995                  /*K*  * is reserved for future use and must be zero.  */
             10996    1           3 NOPATH BIT(1) UNAL,
             10997                  /*K*  NOPATH is set if this node is independently loaded
             10998                        (no backward path).  */
             10999    1           3 ENTER BIT(1) UNAL,
             11000                  /*K*  ENTER is set if ENTRY$ is valid.  */
             11001    1           3 CANCEL BIT(1) UNAL,
             11002                  /*K*  CANCEL is set if the overlay was removed by
             11003                        "CANCEL=YES".   */
             11004    1         2 BACK# SBIN HALF UNAL,
             11005                /*K*  BACK# is the backward link (parent).  */
             11006    1         2 FORWARD# SBIN HALF UNAL,
             11007                /*K*  FORWARD# is the forward link (daughter).  */
             11008    1         2 OVERLAY# SBIN HALF UNAL,
             11009                /*K*  OVERLAY# is the overlay link (same level).   */
             11010    1         2 PADDR UBIN HALF UNAL,
             11011                /*K*  PADDR is the address of procedure.  */
             11012    1         2 PSIZE UBIN HALF UNAL,
             11013                /*K*  PSIZE is the size of procedure.  */
             11014    1         2 DADDR UBIN HALF UNAL,
             11015                /*K*  DADDR is the address of data.  */
             11016    1         2 DSIZE UBIN HALF UNAL,
             11017                /*K*  DSIZE is the size of data.  */
             11018    1         2 ENTRY$ EPTR;
             11019                /*K*  ENTRY$ is the overlay entry point (see ENTER).  */
      631    11021        %BANNER(ARG=FPTS);
PL6.E3A0      #002=VXM$OVERLAY File=VXM$MAP.:E05TSI                              WED 07/30/97 08:21 Page:161  
             11022        %LSET LISTDIR='0'B;

             11029    1   /*******************************************************************************
             11030    1   *                                                                              *
             11031    1   *                          FPTS                                                 *
             11032    1   *                                                                              *
             11033    1   *******************************************************************************/

      632    11037        %PLIST;
      633    11038        %FPT_WRITE( FPTN=VX_MAP_LO_FPT_WRITE, STCLASS=SYMREF);
      634    11069        %FPT_WRITE( FPTN=VX_MAP_LIT_LO_FPT_WRITE, STCLASS=SYMREF);
      635    11100        %EJECT;
PL6.E3A0      #002=VXM$OVERLAY File=VXM$MAP.:E05TSI                              WED 07/30/97 08:21 Page:162  
      636    11101        /*
      637    11102              Variables for map(ping)
      638    11103        */
      639    11104    1   DCL VX_MAP$               PTR  ALIGNED   SYMREF;
      640    11105    1   DCL VX_MAP_ROS$           PTR  ALIGNED   SYMREF;
      641    11106    1   DCL VX_MAP_AREA$          PTR  ALIGNED   SYMREF;
      642    11107    1   DCL VX_MAP_TREE_START$    PTR  ALIGNED   SYMREF;
      643    11108    1   DCL VX_MAP_AREA_SIZE      UBIN(36) ALIGNED SYMREF;
      644    11109    1   DCL VX_MAP_NUM            SBIN WORD ALIGNED   SYMREF;
      645    11110    1   DCL VX_MAP_REC_SIZE_A(0:9)   UBIN(36)  ALIGNED   SYMREF;
      646    11111    1   DCL VX_CTAB               UBIN(36) ALIGNED SYMREF;
      647    11112    1   DCL VX_MAP_TABS_A(0:4)    UBIN(36)  ALIGNED   SYMREF;
      648    11113
      649    11114    1   DCL VX_MAP_WIDTH          UBIN(36)  ALIGNED   SYMREF;
      650    11115    1   DCL VX_MAP_WIDTH_HDR      UBIN(36)  ALIGNED   SYMREF;
      651    11116    1   DCL VX_MAX_CTAB           UBIN(36)  ALIGNED   SYMREF;
      652    11117    1   DCL 1 VX_MBUF ALIGNED SYMREF,
      653    11118    1         2 CHARS CHAR(132) UNAL,
      654    11119    1         2 CHARS_A(0:131) REDEF CHARS CHAR(1) UNAL,
      655    11120    1         2 LIT_BUF REDEF CHARS UNAL,
      656    11121    1           3 VFC CHAR(1) UNAL,
      657    11122    1           3 CHARS CHAR(131) UNAL;
      658    11123    1   DCL VX_HDR_FIELD1              UBIN(36)  ALIGNED   SYMREF;
      659    11124    1   DCL VX_HDR_FIELD2              UBIN(36)  ALIGNED   SYMREF;
      660    11125    1   DCL 1 VX_MAP_HDR0 ALIGNED SYMREF,
      661    11126    1         2 CHARS CHAR(132) UNAL,
      662    11127    1         2 CHARS_A(0:131) REDEF CHARS CHAR(1) UNAL,
      663    11128    1         2 LIT_BUF REDEF CHARS UNAL,
      664    11129    1           3 VFC CHAR(1) UNAL,
      665    11130    1           3 CHARS CHAR(131) UNAL;
      666    11131    1   DCL 1 VX_MAP_HDR ALIGNED SYMREF,
      667    11132    1         2 CHARS CHAR(132) UNAL,
      668    11133    1         2 CHARS_A(0:131) REDEF CHARS CHAR(1) UNAL,
      669    11134    1         2 LIT_BUF REDEF CHARS UNAL,
      670    11135    1           3 VFC CHAR(1) UNAL,
      671    11136    1           3 CHARS CHAR(131) UNAL;
      672    11137    1   DCL 1 VX_MAP_HDR1 ALIGNED SYMREF,
PL6.E3A0      #002=VXM$OVERLAY File=VXM$MAP.:E05TSI                              WED 07/30/97 08:21 Page:163  
      673    11138    1         2 CHARS CHAR(132) UNAL,
      674    11139    1         2 CHARS_A(0:131) REDEF CHARS CHAR(1) UNAL,
      675    11140    1         2 LIT_BUF REDEF CHARS UNAL,
      676    11141    1           3 VFC CHAR(1) UNAL,
      677    11142    1           3 CHARS CHAR(131) UNAL;
      678    11143    1   DCL 1 VX_MAP_UTS_HDR ALIGNED SYMREF,
      679    11144    1         2 CHARS CHAR(132) UNAL,
      680    11145    1         2 CHARS_A(0:131) REDEF CHARS CHAR(1) UNAL,
      681    11146    1         2 LIT_BUF REDEF CHARS UNAL,
      682    11147    1           3 VFC CHAR(1) UNAL,
      683    11148    1           3 CHARS CHAR(131) UNAL;
      684    11149        %EJECT;
PL6.E3A0      #002=VXM$OVERLAY File=VXM$MAP.:E05TSI                              WED 07/30/97 08:21 Page:164  
      685    11150        /*
      686    11151                          Write out headings
      687    11152        */
      688    11153    1         VX_MAP_LO_FPT_WRITE.BUF_.BOUND = VX_MAP_WIDTH_HDR;

  11153  4 000002   000000 236000 xsym               LDQ     VX_MAP_WIDTH_HDR
         4 000003   000020 736000                    QLS     16
         4 000004   000004 676000 xsym               ERQ     VX_MAP_LO_FPT_WRITE+4
         4 000005   000034 376000 xsym               ANQ     B_VECTNIL+28
         4 000006   000004 656000 xsym               ERSQ    VX_MAP_LO_FPT_WRITE+4

      689    11154    1         VX_MAP_LO_FPT_WRITE.BUF_.BUF$ = ADDR( VX_MAP_HDR0 );

  11154  4 000007   000000 236000 5                  LDQ     0
         4 000010   000005 756000 xsym               STQ     VX_MAP_LO_FPT_WRITE+5

      690    11155    1         CALL INSERT( VX_MAP_HDR0.CHARS, VX_HDR_FIELD1+34, 20,

  11155  4 000011   000000 235000 xsym               LDA     VX_HDR_FIELD1
         4 000012   040005 100400                    MLR     fill='040'O
         4 000013   000001 000020 3                  ADSC9   SKIP_THREE_LINES+1       cn=0,n=16
         4 000014   000010 400024 xsym               ADSC9   VX_MAP_HDR0+8,A          cn=2,n=20

      691    11156    1                 'OVERLAY  SUMMARY' );
      692    11157    1         CALL M$WRITE( VX_MAP_LO_FPT_WRITE)           ALTRET(MAP_IO_ERROR);

  11157  4 000015   000000 630400 xsym               EPPR0   VX_MAP_LO_FPT_WRITE
         4 000016   440001 713400                    CLIMB   alt,write
         4 000017   401400 401760                    pmme    nvectors=4
         4 000020   000222 702000 4                  TSX2    MAP_IO_ERROR

      693    11158    1         VX_MAP_LO_FPT_WRITE.BUF_.BUF$ = ADDR( VX_MAP_HDR );

  11158  4 000021   000001 236000 5                  LDQ     1
         4 000022   000005 756000 xsym               STQ     VX_MAP_LO_FPT_WRITE+5

      694    11159    1         CALL M$WRITE( VX_MAP_LO_FPT_WRITE)           ALTRET(MAP_IO_ERROR);
PL6.E3A0      #002=VXM$OVERLAY File=VXM$MAP.:E05TSI                              WED 07/30/97 08:21 Page:165  

  11159  4 000023   000000 630400 xsym               EPPR0   VX_MAP_LO_FPT_WRITE
         4 000024   440001 713400                    CLIMB   alt,write
         4 000025   401400 401760                    pmme    nvectors=4
         4 000026   000222 702000 4                  TSX2    MAP_IO_ERROR

      695    11160    1         VX_MAP_LO_FPT_WRITE.BUF_.BUF$ = ADDR( VX_MAP_UTS_HDR );

  11160  4 000027   000002 236000 5                  LDQ     2
         4 000030   000005 756000 xsym               STQ     VX_MAP_LO_FPT_WRITE+5

      696    11161    1         CALL M$WRITE( VX_MAP_LO_FPT_WRITE)           ALTRET(MAP_IO_ERROR);

  11161  4 000031   000000 630400 xsym               EPPR0   VX_MAP_LO_FPT_WRITE
         4 000032   440001 713400                    CLIMB   alt,write
         4 000033   401400 401760                    pmme    nvectors=4
         4 000034   000222 702000 4                  TSX2    MAP_IO_ERROR

      697    11162    1         VX_MAP_LO_FPT_WRITE.BUF_     =    VECTOR( VX_MBUF );

  11162  4 000035   000004 237000 5                  LDAQ    4
         4 000036   000004 757000 xsym               STAQ    VX_MAP_LO_FPT_WRITE+4

      698    11163    1         CURR$ = START$;

  11163  4 000037   200003 470500                    LDP0    @START$,,AUTO
         4 000040   000000 236100                    LDQ     0,,PR0
         4 000041   200011 756100                    STQ     CURR$,,AUTO

      699    11164        /*
      700    11165                                  Print out a summary for all the overlays
      701    11166        */
      702    11167    1         NODE_LEVEL_NUM = -1;

  11167  4 000042   000001 335007                    LCA     1,DL
         4 000043   200020 755100                    STA     NODE_LEVEL_NUM,,AUTO

PL6.E3A0      #002=VXM$OVERLAY File=VXM$MAP.:E05TSI                              WED 07/30/97 08:21 Page:166  
      703    11168    1         MORE_LEVELS = '1'B/*@TRUE_B*/;

  11168  4 000044   400000 236003                    LDQ     -131072,DU
         4 000045   000104 756000 2                  STQ     MORE_LEVELS

      704    11169    2         DO WHILE ( MORE_LEVELS );

  11169  4 000046   000104 234000 2                  SZN     MORE_LEVELS
         4 000047   000221 605000 4                  TPL     s:11238

      705    11170    2             MORE_LEVELS = '0'B/*@FALSE_B*/;

  11170  4 000050   000104 450000 2                  STZ     MORE_LEVELS

      706    11171    2             NODE_LEVEL_NUM = NODE_LEVEL_NUM + 1;

  11171  4 000051   200020 054100                    AOS     NODE_LEVEL_NUM,,AUTO

      707    11172        /*
      708    11173                          Output a headings for the overlay summary
      709    11174        */
      710    11175    3             IF NODE_LEVEL_NUM = 0 THEN DO;

  11175  4 000052   000072 601000 4                  TNZ     s:11197

      711    11176                      %M_WRITE( BEFORE="VX_MBUF.CHARS='A';", CLEAR=" " );

  11177  4 000053   040000 100400                    MLR     fill='040'O
         4 000054   000006 000001 5                  ADSC9   6                        cn=0,n=1
         4 000055   000000 000204 xsym               ADSC9   VX_MBUF                  cn=0,n=132

  11178  4 000056   000000 630400 xsym               EPPR0   VX_MAP_LO_FPT_WRITE
         4 000057   440001 713400                    CLIMB   alt,write
         4 000060   401400 401760                    pmme    nvectors=4
         4 000061   000222 702000 4                  TSX2    MAP_IO_ERROR

  11183  4 000062   000000 450000 xsym               STZ     VX_CTAB
PL6.E3A0      #002=VXM$OVERLAY File=VXM$MAP.:E05TSI                              WED 07/30/97 08:21 Page:167  

      712    11185                      %WR_LIT( MES1=ROOT_NODE_LIT );

  11186  4 000063   000010 237000 5                  LDAQ    8
         4 000064   000004 757000 xsym               STAQ    VX_MAP_LIT_LO_FPT_WRITE+4

  11187  4 000065   000000 630400 xsym               EPPR0   VX_MAP_LIT_LO_FPT_WRITE
         4 000066   440001 713400                    CLIMB   alt,write
         4 000067   401400 401760                    pmme    nvectors=4
         4 000070   000222 702000 4                  TSX2    MAP_IO_ERROR

      713    11195    3                END;

  11195  4 000071   000153 710000 4                  TRA     s:11211

      714    11196    3             ELSE DO;

      715    11197    3                 CALL VXD$B2C( DECIMAL, 0, 8, NODE_LEVEL_NUM, 10);

  11197  4 000072   000007 236000 5                  LDQ     7
         4 000073   200026 756100                    STQ     NODE_LEVEL_NUM+6,,AUTO
         4 000074   200020 630500                    EPPR0   NODE_LEVEL_NUM,,AUTO
         4 000075   200025 450500                    STP0    NODE_LEVEL_NUM+5,,AUTO
         4 000076   000012 236000 5                  LDQ     10
         4 000077   200024 756100                    STQ     NODE_LEVEL_NUM+4,,AUTO
         4 000100   000013 236000 5                  LDQ     11
         4 000101   200023 756100                    STQ     NODE_LEVEL_NUM+3,,AUTO
         4 000102   200004 631500                    EPPR1   DECIMAL,,AUTO
         4 000103   200022 451500                    STP1    NODE_LEVEL_NUM+2,,AUTO
         4 000104   200022 630500                    EPPR0   NODE_LEVEL_NUM+2,,AUTO
         4 000105   000023 631400 xsym               EPPR1   B_VECTNIL+19
         4 000106   000000 701000 xent               TSX1    VXD$B2C
         4 000107   000000 011000                    NOP     0

      716    11198    3                 CALL INDEX1R( I, ' ', DECIMAL);

  11198  4 000110   000000 125500                    SCMR    mask='000'O
PL6.E3A0      #002=VXM$OVERLAY File=VXM$MAP.:E05TSI                              WED 07/30/97 08:21 Page:168  
         4 000111   200004 000010                    ADSC9   DECIMAL,,AUTO            cn=0,n=8
         4 000112   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         4 000113   200013 000100                    ARG     I,,AUTO
         4 000114   000117 606400 4                  TTN     s:11199
         4 000115   000007 236007                    LDQ     7,DL
         4 000116   200013 156100                    SSQ     I,,AUTO

      717    11199    3                 CALL CONCAT( VX_MBUF.CHARS, 'A******* LEVEL ', SUBSTR(DECIMAL, I),

  11199  4 000117   040000 100400                    MLR     fill='040'O
         4 000120   000005 000017 3                  ADSC9   SKIP_THREE_LINES+5       cn=0,n=15
         4 000121   000000 000017 xsym               ADSC9   VX_MBUF                  cn=0,n=15
         4 000122   200013 720100                    LXL0    I,,AUTO
         4 000123   777767 620010                    EAX0    -9,X0
         4 000124   777777 660003                    ERX0    -1,DU
         4 000125   200013 235100                    LDA     I,,AUTO
         4 000126   040000 100545                    MLR     fill='040'O
         4 000127   200004 000010                    ADSC9   DECIMAL,A,AUTO           cn=0,n=*X0
         4 000130   000003 600165 xsym               ADSC9   VX_MBUF+3                cn=3,n=117
         4 000131   200013 236100                    LDQ     I,,AUTO
         4 000132   000135 604000 4                  TMI     s:11199+14
         4 000133   000014 116000 5                  CMPQ    12
         4 000134   000143 604000 4                  TMI     s:11203
         4 000135   000155 621006                    EAX1    109,QL
         4 000136   000027 675000 xsym               ERA     B_VECTNIL+23
         4 000137   000001 035007                    ADLA    1,DL
         4 000140   040045 100400                    MLR     fill='040'O
         4 000141   000011 000020 3                  ADSC9   SKIP_THREE_LINES+9       cn=0,n=16
         4 000142   000005 600011 xsym               ADSC9   VX_MBUF+5,A              cn=3,n=*X1

      718    11200    3                         ' NODE(S) *******');
      719    11201                      %M_WRITE;

  11203  4 000143   000000 630400 xsym               EPPR0   VX_MAP_LO_FPT_WRITE
         4 000144   440001 713400                    CLIMB   alt,write
         4 000145   401400 401760                    pmme    nvectors=4
         4 000146   000222 702000 4                  TSX2    MAP_IO_ERROR
PL6.E3A0      #002=VXM$OVERLAY File=VXM$MAP.:E05TSI                              WED 07/30/97 08:21 Page:169  

  11207  4 000147   040000 100400                    MLR     fill='040'O
         4 000150   000015 000002 3                  ADSC9   SKIP_THREE_LINES+13      cn=0,n=2
         4 000151   000000 000204 xsym               ADSC9   VX_MBUF                  cn=0,n=132

  11208  4 000152   000000 450000 xsym               STZ     VX_CTAB

      720    11210    3                END;

      721    11211    3             DO I = 0 TO 2;

  11211  4 000153   200013 450100                    STZ     I,,AUTO

      722    11212                      %WR_LIT( MES1="SUMMARY_HEADING(I)" );

  11213  4 000154   000015 235000 5                  LDA     13
         4 000155   200013 236100                    LDQ     I,,AUTO
         4 000156   200022 755100                    STA     NODE_LEVEL_NUM+2,,AUTO
         4 000157   000017 402000 5                  MPY     15
         4 000160   000016 036000 5                  ADLQ    14
         4 000161   200022 235100                    LDA     NODE_LEVEL_NUM+2,,AUTO
         4 000162   000004 757000 xsym               STAQ    VX_MAP_LIT_LO_FPT_WRITE+4

  11214  4 000163   000000 630400 xsym               EPPR0   VX_MAP_LIT_LO_FPT_WRITE
         4 000164   440001 713400                    CLIMB   alt,write
         4 000165   401400 401760                    pmme    nvectors=4
         4 000166   000222 702000 4                  TSX2    MAP_IO_ERROR

      723    11222    3                END;

  11222  4 000167   200013 235100                    LDA     I,,AUTO
         4 000170   000001 035007                    ADLA    1,DL
         4 000171   200013 755100                    STA     I,,AUTO
         4 000172   000003 115007                    CMPA    3,DL
         4 000173   000154 602000 4                  TNC     s:11213

      724    11223        /*
PL6.E3A0      #002=VXM$OVERLAY File=VXM$MAP.:E05TSI                              WED 07/30/97 08:21 Page:170  
      725    11224                                  Print summary for nodes at next level
      726    11225        */
      727    11226    2             CALL VXM$LEVEL( START$, START$, NODE_LEVEL_NUM, 0, MORE_LEVELS );

  11226  4 000174   000020 236000 5                  LDQ     16
         4 000175   200026 756100                    STQ     NODE_LEVEL_NUM+6,,AUTO
         4 000176   000013 236000 5                  LDQ     11
         4 000177   200025 756100                    STQ     NODE_LEVEL_NUM+5,,AUTO
         4 000200   200020 630500                    EPPR0   NODE_LEVEL_NUM,,AUTO
         4 000201   200024 450500                    STP0    NODE_LEVEL_NUM+4,,AUTO
         4 000202   200003 236100                    LDQ     @START$,,AUTO
         4 000203   200003 235100                    LDA     @START$,,AUTO
         4 000204   200022 757100                    STAQ    NODE_LEVEL_NUM+2,,AUTO
         4 000205   200022 630500                    EPPR0   NODE_LEVEL_NUM+2,,AUTO
         4 000206   000023 631400 xsym               EPPR1   B_VECTNIL+19
         4 000207   000000 701000 xent               TSX1    VXM$LEVEL
         4 000210   000000 011000                    NOP     0

      728    11227                  %WR_LIT( MES1=SKIP_THREE_LINES );

  11228  4 000211   000022 237000 5                  LDAQ    18
         4 000212   000004 757000 xsym               STAQ    VX_MAP_LIT_LO_FPT_WRITE+4

  11229  4 000213   000000 630400 xsym               EPPR0   VX_MAP_LIT_LO_FPT_WRITE
         4 000214   440001 713400                    CLIMB   alt,write
         4 000215   401400 401760                    pmme    nvectors=4
         4 000216   000222 702000 4                  TSX2    MAP_IO_ERROR

      729    11237    2            END;                           /* end do while (MORE_LEVELS) */

  11237  4 000217   000104 234000 2                  SZN     MORE_LEVELS
         4 000220   000050 604000 4                  TMI     s:11170

      730    11238    1         RETURN;

  11238  4 000221   000000 702200 xent               TSX2  ! X66_ARET

PL6.E3A0      #002=VXM$OVERLAY File=VXM$MAP.:E05TSI                              WED 07/30/97 08:21 Page:171  
      731    11239
      732    11240
      733    11241
      734    11242    1   MAP_IO_ERROR:
      735    11243    1         CALL M$MERC                             ALTRET( MERC_ERROR );

  11243  4 000222   410007 713400       MAP_IO_ERROR CLIMB   alt,+4103
         4 000223   000000 401760                    pmme    nvectors=0
         4 000224   000227 702000 4                  TSX2    MERC_ERROR

      736    11244              %ERROR_IT;

  11245  4 000225   000002 713400                    CLIMB   err
         4 000226   000000 401760                    pmme    nvectors=0

      737    11247    1   MERC_ERROR:
      738    11248    1         CALL VXE$MERC;

  11248  4 000227   000002 631400 xsym  MERC_ERROR   EPPR1   B_VECTNIL+2
         4 000230   000000 701000 xent               TSX1    VXE$MERC
         4 000231   000000 011000                    NOP     0

      739    11249
      740    11250
      741    11251    1   END  VXM$OVERLAY;

  11251  4 000232   000000 702200 xent               TSX2  ! X66_ARET
      742    11252        %EOD;

PL6.E3A0      #002=VXM$OVERLAY File=VXM$MAP.:E05TSI                              WED 07/30/97 08:21 Page:172  
--  Include file information  --

   F_DCB_D.:E05TOU  is referenced.
   VX_DCB_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_FIXED_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VX_MACRO_C.:E05TOU  is referenced.
   VX_PERR_C.:E05TOU  is referenced.
   VX_SUBS_C.:E05TOU  is referenced.
   VX_SWITCH_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   VX_INC_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VXM$OVERLAY.
PL6.E3A0      #002=VXM$OVERLAY File=VXM$MAP.:E05TSI                              WED 07/30/97 08:21 Page:173  

 **** Variables and constants ****

  ****  Section 002  Data  VXM$OVERLAY

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   104-0-0/b BIT         r     1 MORE_LEVELS                0-0-0/c CHAR(26)    r     1 ROOT_NODE_LIT
     7-0-0/c CHAR(81)    r     1 SUMMARY_HEADING(0:2)

  ****  Section 003 RoData VXM$OVERLAY

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c CHAR(2)     r     1 SKIP_THREE_LINES

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @START$                   11-0-0/w PTR         r     1 CURR$
     4-0-0/c CHAR(8)     r     1 DECIMAL                   13-0-0/w UBIN        r     1 I
    20-0-0/w SBIN        r     1 NODE_LEVEL_NUM            *0-0-0/w PTR         r     1 START$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w UBIN        r     1 VX_CTAB                    0-0-0/w UBIN        r     1 VX_HDR_FIELD1
     0-0-0/w STRC(1188)  r     1 VX_MAP_HDR                 0-0-0/w STRC(1188)  r     1 VX_MAP_HDR0
     0-0-0/d STRC(432)   r     1 VX_MAP_LIT_LO_FPT_WRITE
     0-0-0/d STRC(432)   r     1 VX_MAP_LO_FPT_WRITE        0-0-0/w STRC(1188)  r     1 VX_MAP_UTS_HDR
     0-0-0/w UBIN        r     1 VX_MAP_WIDTH_HDR           0-0-0/w STRC(1188)  r     1 VX_MBUF

PL6.E3A0      #002=VXM$OVERLAY File=VXM$MAP.:E05TSI                              WED 07/30/97 08:21 Page:174  
  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w ASTR(9)     r     1 T$C                        0-0-0/c ASTR(9)     r     1 T$C_UNAL


   Procedure VXM$OVERLAY requires 155 words for executable code.
   Procedure VXM$OVERLAY requires 24 words of local(AUTO) storage.
PL6.E3A0      #002=VXM$OVERLAY File=VXM$MAP.:E05TSI                              WED 07/30/97 08:21 Page:175  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=VXM$OVERLAY File=VXM$MAP.:E05TSI                              WED 07/30/97 08:21 Page:176  
          MINI XREF LISTING

CURR$
     10852**DCL     11163<<ASSIGN
DECIMAL
     10829**DCL     11197<>CALL    11198>>CALLBLT 11199>>CALLBLT
I
     10888**DCL     10889--REDEF   11198<<CALLBLT 11199>>CALLBLT 11211<<DOINDEX 11213>>ASSIGN
J
     10890**DCL     10891--REDEF
K
     10892**DCL     10893--REDEF
L
     10894**DCL     10895--REDEF
M$ERR
      5085**DCL-ENT 11245--CALL
M$MERC
      5129**DCL-ENT 11243--CALL
M$WRITE
      5074**DCL-ENT 11157--CALL    11159--CALL    11161--CALL    11178--CALL    11187--CALL    11203--CALL
     11214--CALL    11229--CALL
MAP_IO_ERROR
     11243**LABEL   11157--CALLALT 11159--CALLALT 11161--CALLALT 11178--CALLALT 11187--CALLALT 11203--CALLALT
     11214--CALLALT 11229--CALLALT
MERC_ERROR
     11248**LABEL   11243--CALLALT
MORE_LEVELS
     10870**DCL     11168<<ASSIGN  11169>>DOWHILE 11170<<ASSIGN  11226<>CALL
NODE_LEVEL_NUM
     10946**DCL     11167<<ASSIGN  11171<<ASSIGN  11171>>ASSIGN  11175>>IF      11197<>CALL    11226<>CALL
ROOT_NODE_LIT
     10823**DCL     11186--ASSIGN
SKIP_THREE_LINES
     10830**DCL     11228--ASSIGN
PL6.E3A0      #002=VXM$OVERLAY File=VXM$MAP.:E05TSI                              WED 07/30/97 08:21 Page:177  
START$
     10806**DCL         7--PROC    11163>>ASSIGN  11226<>CALL    11226<>CALL
SUMMARY_HEADING
     10825**DCL     11213--ASSIGN
T$C.COUNT
     10780**DCL     10781--IMP-SIZ
T$C_UNAL.COUNT
     10783**DCL     10784--IMP-SIZ
VXD$B2C
     10923**DCL-ENT 11197--CALL
VXE$MERC
     10918**DCL-ENT 11248--CALL
VXM$LEVEL
     10914**DCL-ENT 11226--CALL
VX_BIAS.A
      9576**DCL      9577--REDEF
VX_CBUF.CHARS_A
      9510**DCL      9511--REDEF
VX_CONST_DCB.ACTPOS
     10692**DCL     10692--REDEF
VX_CONST_DCB.ARS#
     10651**DCL     10651--REDEF
VX_CONST_DCB.ATTR#
     10681**DCL     10681--REDEF   10683--REDEF
VX_CONST_DCB.BORROW
     10703**DCL     10703--REDEF   10703--REDEF   10703--REDEF
VX_CONST_DCB.EOMCHAR#
     10658**DCL     10659--REDEF
VX_CONST_DCB.FLDID
     10695**DCL     10696--REDEF
VX_CONST_DCB.FORM$
     10687**DCL     10687--REDEF
VX_CONST_DCB.FSECT
     10710**DCL     10710--REDEF
VX_CONST_DCB.FSN#
     10677**DCL     10677--REDEF   10677--REDEF   10678--REDEF
PL6.E3A0      #002=VXM$OVERLAY File=VXM$MAP.:E05TSI                              WED 07/30/97 08:21 Page:178  
VX_CONST_DCB.HEADER$
     10686**DCL     10687--REDEF
VX_CONST_DCB.IXTNSIZE#
     10683**DCL     10684--REDEF
VX_CONST_DCB.LASTSTA$
     10667**DCL     10667--REDEF
VX_CONST_DCB.LVL
     10704**DCL     10704--REDEF
VX_CONST_DCB.NAME#.C
     10667**DCL     10668--REDEF
VX_CONST_DCB.NOEOF
     10699**DCL     10699--REDEF
VX_CONST_DCB.NRECS#
     10684**DCL     10684--REDEF
VX_CONST_DCB.NRECX
     10711**DCL     10711--REDEF
VX_CONST_DCB.OHDR
     10700**DCL     10700--REDEF
VX_CONST_DCB.ORG#
     10675**DCL     10676--REDEF
VX_CONST_DCB.PRECNO
     10708**DCL     10708--REDEF
VX_CONST_DCB.RCSZ
     10716**DCL     10716--REDEF
VX_CONST_DCB.RES#
     10669**DCL     10669--REDEF
VX_CONST_DCB.SETX
     10688**DCL     10688--REDEF
VX_CONST_DCB.TAB$
     10687**DCL     10687--REDEF
VX_CONST_DCB.TDA
     10707**DCL     10708--REDEF
VX_CONST_DCB.WSN#
     10669**DCL     10670--REDEF
VX_CTAB
     11111**DCL     11183<<ASSIGN  11208<<ASSIGN
PL6.E3A0      #002=VXM$OVERLAY File=VXM$MAP.:E05TSI                              WED 07/30/97 08:21 Page:179  
VX_EBUF.CHARS_A
     10099**DCL     10100--REDEF
VX_EFIELD1.CHARS
     10108**DCL     10109--REDEF
VX_EFIELD2.CHARS
     10112**DCL     10113--REDEF
VX_EFIELD3.CHARS
     10116**DCL     10117--REDEF
VX_EI_KEY_BUF.KEY
     10492**DCL     10493--REDEF
VX_ERRORS
      9553**DCL      9564--REDEF
VX_ERRORS.CONFLICT_A
      9559**DCL      9560--REDEF
VX_ERRORS.UNSAT_A
      9555**DCL      9556--REDEF
VX_HDR_FIELD1
     11123**DCL     11155>>CALLBLT
VX_IMAGE_DATA.CPAGE#_A
      8690**DCL      8691--REDEF
VX_IMAGE_DATA.NODE_A$
      8702**DCL      8703--REDEF
VX_IMAGE_DATA.START_A$
      8694**DCL      8695--REDEF
VX_IMAGE_DATA.STOP_A$
      8698**DCL      8699--REDEF
VX_IMAGE_DS3.CPAGE#_A
      8759**DCL      8760--REDEF
VX_IMAGE_DS3.NODE_A$
      8771**DCL      8772--REDEF
VX_IMAGE_DS3.START_A$
      8763**DCL      8764--REDEF
VX_IMAGE_DS3.STOP_A$
      8767**DCL      8768--REDEF
VX_IMAGE_DS4.CPAGE#_A
      8782**DCL      8783--REDEF
PL6.E3A0      #002=VXM$OVERLAY File=VXM$MAP.:E05TSI                              WED 07/30/97 08:21 Page:180  
VX_IMAGE_DS4.NODE_A$
      8794**DCL      8795--REDEF
VX_IMAGE_DS4.START_A$
      8786**DCL      8787--REDEF
VX_IMAGE_DS4.STOP_A$
      8790**DCL      8791--REDEF
VX_IMAGE_DS5.CPAGE#_A
      8805**DCL      8806--REDEF
VX_IMAGE_DS5.NODE_A$
      8817**DCL      8818--REDEF
VX_IMAGE_DS5.START_A$
      8809**DCL      8810--REDEF
VX_IMAGE_DS5.STOP_A$
      8813**DCL      8814--REDEF
VX_IMAGE_DS6.CPAGE#_A
      8828**DCL      8829--REDEF
VX_IMAGE_DS6.NODE_A$
      8840**DCL      8841--REDEF
VX_IMAGE_DS6.START_A$
      8832**DCL      8833--REDEF
VX_IMAGE_DS6.STOP_A$
      8836**DCL      8837--REDEF
VX_IMAGE_DS7.CPAGE#_A
      8851**DCL      8852--REDEF
VX_IMAGE_DS7.NODE_A$
      8863**DCL      8864--REDEF
VX_IMAGE_DS7.START_A$
      8855**DCL      8856--REDEF
VX_IMAGE_DS7.STOP_A$
      8859**DCL      8860--REDEF
VX_IMAGE_DS8.CPAGE#_A
      8874**DCL      8875--REDEF
VX_IMAGE_DS8.NODE_A$
      8886**DCL      8887--REDEF
VX_IMAGE_DS8.START_A$
      8878**DCL      8879--REDEF
PL6.E3A0      #002=VXM$OVERLAY File=VXM$MAP.:E05TSI                              WED 07/30/97 08:21 Page:181  
VX_IMAGE_DS8.STOP_A$
      8882**DCL      8883--REDEF
VX_IMAGE_PROC.CPAGE#_A
      8713**DCL      8714--REDEF
VX_IMAGE_PROC.NODE_A$
      8725**DCL      8726--REDEF
VX_IMAGE_PROC.START_A$
      8717**DCL      8718--REDEF
VX_IMAGE_PROC.STOP_A$
      8721**DCL      8722--REDEF
VX_IMAGE_ROS.CPAGE#_A
      8736**DCL      8737--REDEF
VX_IMAGE_ROS.NODE_A$
      8748**DCL      8749--REDEF
VX_IMAGE_ROS.START_A$
      8740**DCL      8741--REDEF
VX_IMAGE_ROS.STOP_A$
      8744**DCL      8745--REDEF
VX_MAP_HDR
     11131**DCL     11158--ASSIGN
VX_MAP_HDR.CHARS
     11132**DCL     11133--REDEF   11134--REDEF
VX_MAP_HDR0
     11125**DCL     11154--ASSIGN
VX_MAP_HDR0.CHARS
     11126**DCL     11127--REDEF   11128--REDEF   11155<<CALLBLT
VX_MAP_HDR1.CHARS
     11138**DCL     11139--REDEF   11140--REDEF
VX_MAP_LIT_LO_FPT_WRITE
     11086**DCL     11187<>CALL    11214<>CALL    11229<>CALL
VX_MAP_LIT_LO_FPT_WRITE.BUF_
     11086**DCL     11186<<ASSIGN  11213<<ASSIGN  11228<<ASSIGN
VX_MAP_LIT_LO_FPT_WRITE.STATION_
     11088**DCL     11088--REDEF
VX_MAP_LIT_LO_FPT_WRITE.V.DVBYTE.VFC#
     11095**DCL     11095--REDEF
PL6.E3A0      #002=VXM$OVERLAY File=VXM$MAP.:E05TSI                              WED 07/30/97 08:21 Page:182  
VX_MAP_LO_FPT_WRITE
     11055**DCL     11157<>CALL    11159<>CALL    11161<>CALL    11178<>CALL    11203<>CALL
VX_MAP_LO_FPT_WRITE.BUF_
     11055**DCL     11162<<ASSIGN
VX_MAP_LO_FPT_WRITE.BUF_.BOUND
     11055**DCL     11153<<ASSIGN
VX_MAP_LO_FPT_WRITE.BUF_.BUF$
     11057**DCL     11154<<ASSIGN  11158<<ASSIGN  11160<<ASSIGN
VX_MAP_LO_FPT_WRITE.STATION_
     11057**DCL     11057--REDEF
VX_MAP_LO_FPT_WRITE.V.DVBYTE.VFC#
     11064**DCL     11064--REDEF
VX_MAP_UTS_HDR
     11143**DCL     11160--ASSIGN
VX_MAP_UTS_HDR.CHARS
     11144**DCL     11145--REDEF   11146--REDEF
VX_MAP_WIDTH_HDR
     11115**DCL     11153>>ASSIGN
VX_MBUF
     11117**DCL     11162--ASSIGN
VX_MBUF.CHARS
     11118**DCL     11119--REDEF   11120--REDEF   11177<<ASSIGN  11199<<CALLBLT 11207<<ASSIGN
VX_M_VECTOR.F
      8541**DCL      8545--REDEF
VX_M_VECTOR_DP.F
      8576**DCL      8580--REDEF
VX_O.ACCTN_A$
      9705**DCL      9706--REDEF
VX_O.DCB_MATCH_A$
      9714**DCL      9715--REDEF
VX_O.DCB_MATCH_HIT_A
      9720**DCL      9721--REDEF
VX_O.FIDN_A$
      9699**DCL      9700--REDEF
VX_O.FID_A$
      9691**DCL      9692--REDEF
PL6.E3A0      #002=VXM$OVERLAY File=VXM$MAP.:E05TSI                              WED 07/30/97 08:21 Page:183  
VX_O.INCLUDE_A$
      9711**DCL      9712--REDEF
VX_O.MAP_A
      9685**DCL      9686--REDEF
VX_O.NODCB_A
      9742**DCL      9743--REDEF
VX_O.NUM_A
      9630**DCL      9632--REDEF
VX_O.OPT_A
      9730**DCL      9731--REDEF
VX_O.PRIV_A
      9646**DCL      9648--REDEF
VX_O.SIN_A
      9599**DCL      9600--REDEF
VX_O.TCB_A
      9726**DCL      9727--REDEF
VX_OD.ACCTN_A$
      9903**DCL      9904--REDEF
VX_OD.DCB_MATCH_A$
      9912**DCL      9913--REDEF
VX_OD.FIDN_A$
      9897**DCL      9898--REDEF
VX_OD.FID_A$
      9889**DCL      9890--REDEF
VX_OD.INCLUDE_A$
      9909**DCL      9910--REDEF
VX_OD.MAP_A
      9883**DCL      9884--REDEF
VX_OD.NODCB_A
      9927**DCL      9928--REDEF
VX_OD.NUM_A
      9830**DCL      9831--REDEF
VX_OD.PRIV_A
      9845**DCL      9846--REDEF
VX_OD.SIN_A
      9799**DCL      9800--REDEF
PL6.E3A0      #002=VXM$OVERLAY File=VXM$MAP.:E05TSI                              WED 07/30/97 08:21 Page:184  
VX_OD.VECTOR_A$
      9918**DCL      9919--REDEF
VX_OL.MAX_A
      9774**DCL      9776--REDEF
VX_OL.MIN_A
      9759**DCL      9760--REDEF
VX_ON.ACCTN_A$
     10048**DCL     10050--REDEF
VX_ON.DCB_MATCH_A$
     10059**DCL     10061--REDEF
VX_ON.FIDN_A$
     10041**DCL     10043--REDEF
VX_ON.FID_A$
     10032**DCL     10034--REDEF
VX_ON.INCLUDE_A$
     10055**DCL     10057--REDEF
VX_ON.MAP_A
     10025**DCL     10027--REDEF
VX_ON.NODCB_A$
     10075**DCL     10076--REDEF
VX_ON.NUM_A
      9970**DCL      9972--REDEF
VX_ON.PRIV_A
      9986**DCL      9988--REDEF
VX_ON.SIN_A
      9938**DCL      9940--REDEF
VX_ON.VECTOR_A$
     10066**DCL     10067--REDEF
VX_OUHEAD.VERSION
      9385**DCL      9387--REDEF
VX_OU_HEAD
      9328**DCL      9367--REDEF
VX_OU_HEAD.REC_A
      9340**DCL      9343--REDEF
VX_O_KEY_BUF.FORM0
      8589**DCL      8592--REDEF    8599--REDEF
PL6.E3A0      #002=VXM$OVERLAY File=VXM$MAP.:E05TSI                              WED 07/30/97 08:21 Page:185  
VX_O_KEY_BUF_L.FORM0
      8612**DCL      8615--REDEF    8622--REDEF
VX_PASS2_REF.OU.L_START
     10278**DCL     10283--REDEF
VX_PASS2_REF.OU.L_STOP
     10284**DCL     10289--REDEF
VX_PASS2_REF.OU.MAX
     10272**DCL     10277--REDEF
VX_PASS2_REF.OU.SIZE
     10290**DCL     10295--REDEF
VX_PASS2_REF.SAT.COUNT
     10317**DCL     10323--REDEF
VX_PASS2_REF.SAT.ENT_SIZE
     10324**DCL     10330--REDEF
VX_PASS2_REF.SAT.L_START
     10303**DCL     10309--REDEF
VX_PASS2_REF.SAT.L_STOP
     10310**DCL     10316--REDEF
VX_PASS2_REF.SAT.MAX
     10297**DCL     10302--REDEF
VX_PASS2_REF.UNSAT.L_START
     10365**DCL     10370--REDEF
VX_PASS2_REF.UNSAT.L_STOP
     10371**DCL     10376--REDEF
VX_PASS2_REF.UNSAT.L_WHERE
     10377**DCL     10382--REDEF
VX_PASS2_REF.UNSAT.MAX
     10359**DCL     10364--REDEF
VX_PASS2_REF.UNSAT.PAGE#
     10389**DCL     10394--REDEF
VX_PASS2_REF.UNSAT.SIZE
     10383**DCL     10388--REDEF
VX_PHRASE.PHRASE
      9791**DCL      9793--REDEF
VX_PROGRAM_BIAS.A
      9569**DCL      9570--REDEF
PL6.E3A0      #002=VXM$OVERLAY File=VXM$MAP.:E05TSI                              WED 07/30/97 08:21 Page:186  
VX_R_KEY_BUF.FORM0
      8638**DCL      8642--REDEF    8648--REDEF
VX_SD.A
      8266**DCL      8267--REDEF
VX_SPC.B$.MINE
     10460**DCL     10466--REDEF
VX_SPC.B$.NAME
     10439**DCL     10445--REDEF
VX_SPC.B$.SKIP
     10453**DCL     10459--REDEF
VX_SPC.B$.VALUE
     10446**DCL     10452--REDEF
VX_SPC.SEG.NAME
     10408**DCL     10414--REDEF
VX_SPC.SEG.VALUE
     10415**DCL     10421--REDEF
VX_TSX0_OVERLAY.H
     10183**DCL     10186--REDEF

PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:187  
      743        1        /*T***********************************************************/
      744        2        /*T*                                                         */
      745        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      746        4        /*T*                                                         */
      747        5        /*T***********************************************************/
      748        6        /*X* DMR,PLM=6,IND=4,CSU=2,EXM=0,ECU=2,MOC,DCI=4,CRT=4,CTI=8,CCC */
      749        7        VXM$LEVEL:
      750        8              PROC( START$, CURR$, DESIRED_LEVEL, CURRENT_LEVEL, MORE_LEVELS);
      751        9        %INCLUDE VX_INC_C;
      752    10725        %VX$WORD;

             10737    1   /*******************************************************************************
             10738    1   *                                                                              *
             10739    1   *                          VX$WORD                                                 *
             10740    1   *                                                                              *
             10741    1   *******************************************************************************/

             10746    1   DCL VX$WORD_A(0:0)       UBIN(36) ALIGNED    BASED PTR;
             10747    1   DCL VX$HALF_A(0:0)       UBIN(18) HALIGNED   BASED PTR;
             10748    1   DCL VX$BYTE_A(0:0)       UBIN( 9) CALIGNED   BASED PTR;
             10749    1   DCL VX$CHAR_A(0:0)       CHAR( 1) UNAL       BASED PTR;
             10750        /**/
             10751    1   DCL VX$WORD_SBIN_A(0:0)  SBIN WORD ALIGNED   BASED     PTR;
             10752    1   DCL VX$HALF_SBIN_A(0:0)  SBIN HALF HALIGNED  BASED     PTR;
             10753    1   DCL VX$BYTE_SBIN_A(0:0)  SBIN HALF CALIGNED  BASED     PTR;
             10754    1   DCL VX$BIT_A(0:0)        BIT(36)   ALIGNED   BASED     PTR;
      753    10757        %T$C;

             10769    1   /*******************************************************************************
             10770    1   *                                                                              *
             10771    1   *                          T$C                                                 *
             10772    1   *                                                                              *
             10773    1   *******************************************************************************/

             10778    1   DCL 1 T$C           BASED     ALIGNED,  /* Text count                         */
             10779    1         2 COUNT        UBIN( 9) UNAL,
             10780    1         2 CHARS        CHAR( T$C.COUNT )   UNAL;
PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:188  
             10781    1   DCL 1 T$C_UNAL      BASED     UNAL,     /* Text count                         */
             10782    1         2 COUNT        UBIN( 9) UNAL,
             10783    1         2 CHARS        CHAR( T$C_UNAL.COUNT ) UNAL;
      754    10786        %SET LISTMAC='1'B;
      755    10787        %SET LISTSUB='1'B;
      756    10788        %SET LISTEXP='1'B;
      757    10789
      758    10790        %P;
             10791        %LSET LISTDIR='0'B;

             10798    1   /*******************************************************************************
             10799    1   *                                                                              *
             10800    1   *                          PARAMETERS                                              *
             10801    1   *                                                                              *
             10802    1   *******************************************************************************/

      759    10806    1   DCL  START$   PTR;                      /* Pointer to root node */
      760    10807    1   DCL  CURR$    PTR;                      /* Pointer to current node */
      761    10808    1   DCL  DESIRED_LEVEL  UBIN;               /* Desired level for node summaries */
      762    10809    1   DCL  CURRENT_LEVEL  UBIN;               /* Level the current node is at  */
      763    10810    1   DCL MORE_LEVELS BIT(1) ALIGNED;
             10810            /* Flag set if there are nodes below the desired level */
      764    10811        %C;
             10812        %LSET LISTDIR='0'B;

             10819    1   /*******************************************************************************
             10820    1   *                                                                              *
             10821    1   *                          CHAR                                                 *
             10822    1   *                                                                              *
             10823    1   *******************************************************************************/

      765    10827    1   DCL  SUMMARY  CHAR(81)   STATIC   INIT(
      766    10828    1             'A                                    9K');
      767    10829        %PTR;
             10830        %LSET LISTDIR='0'B;

             10837    1   /*******************************************************************************
PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:189  
             10838    1   *                                                                              *
             10839    1   *                          PTR                                                 *
             10840    1   *                                                                              *
             10841    1   *******************************************************************************/

      768    10845    1   DCL   BACK$     PTR    AUTO;
      769    10846    1   DCL   FORWARD$  PTR    AUTO;
      770    10847    1   DCL   OVERLAY$  PTR    AUTO;
      771    10848        %POINTER;
             10849    1   DCL P$         PTR       ALIGNED AUTO;
             10850    1   DCL Q$         PTR       ALIGNED AUTO;
             10851    1   DCL R$         PTR       ALIGNED AUTO;
      772    10853        %U;
             10854        %LSET LISTDIR='0'B;

             10861    1   /*******************************************************************************
             10862    1   *                                                                              *
             10863    1   *                          UBIN                                                 *
             10864    1   *                                                                              *
             10865    1   *******************************************************************************/

      773    10869    1   DCL   LOW_INDEX (0:1)     UBIN    CONSTANT  INIT ( 40, 61 );
      774    10870    1   DCL   HIGH_INDEX(0:1)     UBIN    CONSTANT  INIT ( 47, 68 );
      775    10871    1   DCL   SIZE_INDEX(0:1)     UBIN    CONSTANT  INIT ( 54, 75 );
      776    10872    1   DCL   NAME_SIZE           UBIN    STATIC;
      777    10873    1   DCL   PARENT_NAME_SIZE    UBIN    STATIC;
      778    10874    1   DCL   I                   UBIN    STATIC;
      779    10875    1   DCL   SIZE                UBIN    STATIC;
      780    10876    1   DCL   NEXT_LEVEL          UBIN    AUTO;
      781    10877        %E;
             10878        %LSET LISTDIR='0'B;

             10885    1   /*******************************************************************************
             10886    1   *                                                                              *
             10887    1   *                          ENTRY                                                 *
             10888    1   *                                                                              *
             10889    1   *******************************************************************************/
PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:190  

      782    10893        %ENTRIES;
             10894    1   DCL VXE$ERROR       ENTRY(4);
             10895    1   DCL VXE$ERR         ENTRY(3);
             10896    1   DCL VXE$MERC        ENTRY;
             10897    1   DCL VXE$ERRMSG      ENTRY(3);
             10898    1   DCL VXR$READ        ENTRY( 3 );
             10899    1   DCL VXW$WRITE       ENTRY( 3 );
             10900    1   DCL VXW$WRITE_DO    ENTRY( 2 );
             10901    1   DCL VXD$B2C         ENTRY( 5 );
             10902    1   DCL VXD$C2B         ENTRY( 3 );
             10903    1   DCL VXA$GET         ENTRY( 3 );
             10904    1   DCL VXF$FREE        ENTRY( 3 );
             10905    1   DCL VXQ$SORT        ENTRY( 7 );
             10906    1   DCL VXY$YESNO       ENTRY( 1 );
      783    10908        %S;
             10909        %LSET LISTDIR='0'B;

             10916    1   /*******************************************************************************
             10917    1   *                                                                              *
             10918    1   *                          SBIN                                                 *
             10919    1   *                                                                              *
             10920    1   *******************************************************************************/

      784    10924    1   DCL S_START (0:2/*@ROS*/)  SBIN    WORD    ALIGNED     AUTO;
      785    10925    1   DCL S_STOP  (0:2/*@ROS*/)  SBIN    WORD    ALIGNED     AUTO;
      786    10926    1   DCL S_SIZE  (0:2/*@ROS*/)  SBIN    WORD    ALIGNED     AUTO;
      787    10927        %BANNER(ARG="VX$TREE_HEADER - VX$TREE_NODE");
             10928        %LSET LISTDIR='0'B;

             10935    1   /*******************************************************************************
             10936    1   *                                                                              *
             10937    1   *                          VX$TREE_HEADER - VX$TREE_NODE                           *
             10938    1   *                                                                              *
             10939    1   *******************************************************************************/

      788    10943        %B$TREE_TABLE(HDR_NAME=VX$TREE_HEADER, NODE_NAME=VX$TREE_NODE );
PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:191  
             10944    1   DCL 1 VX$TREE_HEADER BASED ALIGNED,
             10945              /*K*  HDR_NAME is the Tree table header.  */
             10946    1         2 NODES UBIN HALF UNAL,
             10947                /*K*  NODES is the number of nodes in the tree table.  */
             10948    1         2 SIZE UBIN HALF UNAL,
             10949                /*K*  SIZE is the total word size of the tree table
             10950                      (HDR + NODES + TEST pool).   */
             10951    1         2 LIB$ PTR,
             10952                /*K*  LIB$ is the pointer to the name of the shared library
             10953                      currently associated.  */
             10954    1         2 PRECSIZE UBIN HALF UNAL,
             10955                /*K*  PRECSIZE  is the maximum program record size in the
             10956                      Run Unit (from the Head record).  */
             10957    1         2 MAX_LIB_DATA UBIN HALF UNAL;
             10958                /*K*  MAX_LIB_DATA is the maximum reserved in the program
             10959                      image for the shared library data.  */
             10960    1   DCL 1 VX$TREE_NODE BASED ALIGNED,
             10961              /*K*  NODE_NAME is the node specification.  */
             10962    1         2 NAME$ PTR,
             10963                /*K*  NAME$ is the pointer to the name of the node.  */
             10964    1         2 FLGS,
             10965                /*K*  FLGS are control flags used by M$OLAY.  */
             10966    1           3 NOW_IN BIT(1) UNAL,
             10967                  /*K*  NOW_IN is set if this node is now in memory.  */
             10968    1           3 WAS_IN BIT(1) UNAL,
             10969                  /*K*  WAS_IN is set if this node was in memory.  */
             10970    1           3 * BIT(7) UNAL,
             10971                  /*K*  * is reserved for future use and must be zero.  */
             10972    1         2 AFLGS,
             10973                /*K*  AFLGS are access flags.  */
             10974    1           3 * BIT(6) UNAL,
             10975                  /*K*  * is reserved for future use and must be zero.  */
             10976    1           3 NOPATH BIT(1) UNAL,
             10977                  /*K*  NOPATH is set if this node is independently loaded
             10978                        (no backward path).  */
             10979    1           3 ENTER BIT(1) UNAL,
             10980                  /*K*  ENTER is set if ENTRY$ is valid.  */
PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:192  
             10981    1           3 CANCEL BIT(1) UNAL,
             10982                  /*K*  CANCEL is set if the overlay was removed by
             10983                        "CANCEL=YES".   */
             10984    1         2 BACK# SBIN HALF UNAL,
             10985                /*K*  BACK# is the backward link (parent).  */
             10986    1         2 FORWARD# SBIN HALF UNAL,
             10987                /*K*  FORWARD# is the forward link (daughter).  */
             10988    1         2 OVERLAY# SBIN HALF UNAL,
             10989                /*K*  OVERLAY# is the overlay link (same level).   */
             10990    1         2 PADDR UBIN HALF UNAL,
             10991                /*K*  PADDR is the address of procedure.  */
             10992    1         2 PSIZE UBIN HALF UNAL,
             10993                /*K*  PSIZE is the size of procedure.  */
             10994    1         2 DADDR UBIN HALF UNAL,
             10995                /*K*  DADDR is the address of data.  */
             10996    1         2 DSIZE UBIN HALF UNAL,
             10997                /*K*  DSIZE is the size of data.  */
             10998    1         2 ENTRY$ EPTR;
             10999                /*K*  ENTRY$ is the overlay entry point (see ENTER).  */
      789    11001        %BANNER(ARG=FPTS);
             11002        %LSET LISTDIR='0'B;

             11009    1   /*******************************************************************************
             11010    1   *                                                                              *
             11011    1   *                          FPTS                                                 *
             11012    1   *                                                                              *
             11013    1   *******************************************************************************/

      790    11017        %PLIST;
      791    11018        %FPT_WRITE( FPTN=VX_MAP_LO_FPT_WRITE, STCLASS=SYMREF);
      792    11049        %FPT_WRITE( FPTN=VX_MAP_LIT_LO_FPT_WRITE, STCLASS=SYMREF);
      793    11080        %EJECT;
PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:193  
      794    11081        /*
      795    11082              Variables for map(ping)
      796    11083        */
      797    11084    1   DCL VX_MAP$               PTR  ALIGNED   SYMREF;
      798    11085    1   DCL VX_MAP_TREE_START$    PTR  ALIGNED   SYMREF;
      799    11086    1   DCL VX_MAP_NUM            SBIN WORD ALIGNED   SYMREF;
      800    11087    1   DCL 1 VX_MBUF ALIGNED SYMREF,
      801    11088    1         2 CHARS CHAR(132) UNAL,
      802    11089    1         2 CHARS_A(0:131) REDEF CHARS CHAR(1) UNAL,
      803    11090    1         2 LIT_BUF REDEF CHARS UNAL,
      804    11091    1           3 VFC CHAR(1) UNAL,
      805    11092    1           3 CHARS CHAR(131) UNAL;
      806    11093        %EJECT;
PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:194  
      807    11094    2         IF CURRENT_LEVEL = DESIRED_LEVEL THEN DO;
      808    11095        /*
      809    11096                                          Print a summary for each node at this
      810    11097                                          level and set MORE_LEVELS if there are
      811    11098                                          any nodes at a lower level
      812    11099        */
      813    11100    2             VX_MBUF.CHARS = 'A';
      814    11101    2             VX_MAP_LO_FPT_WRITE.BUF_ = VECTOR( VX_MBUF );
      815    11102    2             VX_MAP_LIT_LO_FPT_WRITE.BUF_ = VECTOR( SUMMARY );
      816    11103    2             CALL INSERT( SUMMARY, 0, 1, 'A' );
      817    11104    2             OVERLAY$ = CURR$;
      818    11105    3             DO WHILE ( OVERLAY$ ~= ADDR(NIL) );
      819    11106    3                 IF OVERLAY$->VX$TREE_NODE.FORWARD# > 0 THEN MORE_LEVELS = '1'B
             11106                          /*@TRUE_B*/;
      820    11107    3                 S_START(0/*@DATA*/) = OVERLAY$ -> VX$TREE_NODE.DADDR;
      821    11108    3                 S_START(1/*@PROC*/) = OVERLAY$ -> VX$TREE_NODE.PADDR;
      822    11109    3                 S_SIZE(0/*@DATA*/) = OVERLAY$ -> VX$TREE_NODE.DSIZE;
      823    11110    3                 S_SIZE(1/*@PROC*/) = OVERLAY$ -> VX$TREE_NODE.PSIZE;
      824    11111    3                 SIZE = (S_SIZE(0/*@DATA*/) + 1024/*@PAGE_SIZE*/-1) / 1024
             11111                          /*@PAGE_SIZE*/
      825    11112    3                         + (S_SIZE(1/*@PROC*/) + 1024/*@PAGE_SIZE*/-1) / 1024
             11112                                  /*@PAGE_SIZE*/;
      826    11113    3                 CALL VXD$B2C( SUMMARY, 33, 5, SIZE, 10 );
      827    11114    4                 DO I = 0/*@DATA*/ TO 1/*@PROC*/;
      828    11115    5                     IF S_SIZE(I) > 0 THEN DO;
      829    11116    5                         CALL VXD$B2C( SUMMARY, LOW_INDEX(I), 6, S_START(I), 8 );
      830    11117    5                         S_STOP(I) = S_START(I) + S_SIZE(I) - 1;
      831    11118    5                         CALL VXD$B2C( SUMMARY, HIGH_INDEX(I), 6, S_STOP(I), 8 );
      832    11119    5                        END;
      833    11120    5                     ELSE DO;
      834    11121    5                         CALL INSERT( SUMMARY, LOW_INDEX(I), , ' ' );
      835    11122    5                        END;
      836    11123    4                     CALL VXD$B2C( SUMMARY, SIZE_INDEX(I), 6, S_SIZE(I), 8 );
      837    11124    4                    END;                   /* do i = @DATA to @PROC  */
      838    11125    3                 R$ = ADDR( OVERLAY$ -> VX$TREE_NODE.NAME$ );
      839    11126    3                 P$ = PINCRW( VX_MAP_TREE_START$, R$ -> VX$HALF_A(0) );
      840    11127    3                 CALL INSERT( SUMMARY, 1, 31, P$ -> T$C_UNAL.CHARS );
PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:195  
      841    11128    3                 NAME_SIZE = P$ -> T$C_UNAL.COUNT;
      842    11129    4                 IF DESIRED_LEVEL = 0 THEN DO; /* Processing the root node */
      843    11130    4                     CALL M$WRITE( VX_MAP_LIT_LO_FPT_WRITE ) ALTRET( MAP_IO_ERROR);
      844    11131    4                     RETURN;
      845    11132    4                    END;
      846    11133    3                 VX_MAP_NUM = CURR$ -> VX$TREE_NODE.BACK#;
      847    11134    3                 BACK$ = PINCRW( START$, VX_MAP_NUM * SIZEW(VX$TREE_NODE) );
      848    11135    3                 R$ = ADDR( BACK$ -> VX$TREE_NODE.NAME$ );
      849    11136    3                 P$ = PINCRW( VX_MAP_TREE_START$, R$ -> VX$HALF_A(0) );
      850    11137    3                 PARENT_NAME_SIZE = P$ -> T$C_UNAL.COUNT + 2;
      851    11138    3                 IF NAME_SIZE + PARENT_NAME_SIZE + 2 > 31
      852    11139    4                 THEN DO;
      853    11140    4                     CALL M$WRITE ( VX_MAP_LIT_LO_FPT_WRITE ) ALTRET (MAP_IO_ERROR);
      854    11141    4                     CALL INSERT( VX_MBUF.CHARS, 34-PARENT_NAME_SIZE,
      855    11142    4                             PARENT_NAME_SIZE, '<', P$ -> T$C_UNAL.CHARS, '>' );
      856    11143    4                     CALL M$WRITE( VX_MAP_LO_FPT_WRITE ) ALTRET ( MAP_IO_ERROR );
      857    11144    4                     VX_MBUF.CHARS = 'A';
      858    11145    4                    END;
      859    11146    4                 ELSE DO;
      860    11147    4                     CALL INSERT( SUMMARY, 32-PARENT_NAME_SIZE, PARENT_NAME_SIZE,
      861    11148    4                             '<', P$ -> T$C_UNAL.CHARS, '>' );
      862    11149    4                     CALL M$WRITE( VX_MAP_LIT_LO_FPT_WRITE ) ALTRET ( MAP_IO_ERROR );
      863    11150    4                    END;
      864    11151    3                 VX_MAP_NUM = OVERLAY$ -> VX$TREE_NODE.OVERLAY#;
      865    11152    3                 IF VX_MAP_NUM > 0 THEN
      866    11153    3                     OVERLAY$ = PINCRW( START$, VX_MAP_NUM * SIZEW(VX$TREE_NODE) );
      867    11154    3                 ELSE
      868    11155    3                     OVERLAY$ = ADDR( NIL );
      869    11156    3                END;                       /* end do while(OVERLAY$~=addr(nil))*/
      870    11157    2            END;                   /* if CURRENT_LEVEL = DESIRED_LEVEL then do */
      871    11158    2         ELSE DO;                  /* if CURRENT_LEVEL = DESIRED_LEVEL then do */
      872    11159                                    /* Not at the desired level for the node summaries.
      873    11160                                       For each node at this level, recursively continue
      874    11161                                       searching for the desired level.
      875    11162                                    */
      876    11163    2             NEXT_LEVEL = CURRENT_LEVEL + 1;
      877    11164    2             OVERLAY$ = CURR$;
PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:196  
      878    11165    3             DO WHILE ( OVERLAY$ ~= ADDR(NIL) );
      879    11166    3                 VX_MAP_NUM = OVERLAY$ -> VX$TREE_NODE.FORWARD#;
      880    11167    4                 IF VX_MAP_NUM > 0 THEN DO;
      881    11168    4                     FORWARD$ = PINCRW( START$, VX_MAP_NUM * SIZEW(VX$TREE_NODE) );
      882    11169    4                     CALL VXM$LEVEL( START$, FORWARD$, DESIRED_LEVEL, NEXT_LEVEL,
             11169                              MORE_LEVELS );
      883    11170    4                    END;
      884    11171    3                 VX_MAP_NUM = OVERLAY$ -> VX$TREE_NODE.OVERLAY#;
      885    11172    3                 IF VX_MAP_NUM > 0 THEN
      886    11173    3                     OVERLAY$ = PINCRW( START$, VX_MAP_NUM * SIZEW(VX$TREE_NODE) );
      887    11174    3                 ELSE
      888    11175    3                     OVERLAY$ = ADDR(NIL);
      889    11176    3                END;                       /* end do while(OVERLAY$~=addr(nill))*/
      890    11177    2            END;                           /* end else do  */
      891    11178    1         RETURN;
      892    11179
      893    11180
      894    11181
      895    11182
      896    11183    1   MAP_IO_ERROR:
      897    11184    1         CALL M$MERC                             ALTRET( MERC_ERROR );
      898    11185              %ERROR_IT;
      899    11188    1   MERC_ERROR:
      900    11189    1         CALL VXE$MERC;
      901    11190
      902    11191
      903    11192    1   END VXM$LEVEL;
      904    11193        %EOD;

PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:197  
--  Include file information  --

   F_DCB_D.:E05TOU  is referenced.
   VX_DCB_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_FIXED_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VX_MACRO_C.:E05TOU  is referenced.
   VX_PERR_C.:E05TOU  is referenced.
   VX_SUBS_C.:E05TOU  is referenced.
   VX_SWITCH_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   VX_INC_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VXM$LEVEL.

   Procedure VXM$LEVEL requires 335 words for executable code.
   Procedure VXM$LEVEL requires 30 words of local(AUTO) storage.

PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:198  

 Object Unit name= VXM$LEVEL                                  File name= VXM$MAP.:E05TOU
 UTS= JUL 30 '97 08:21:57.96 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  LblCom even  none    96    140  VX_CONST_DCB
    2   Data  even  none    25     31  VXM$LEVEL
    3  RoData even  UTS      6      6  VXM$LEVEL
    4   Proc  even  none   335    517  VXM$LEVEL
    5  RoData even  none    15     17  VXM$LEVEL

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     4      0   yes            yes      Std        5  VXM$LEVEL

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       5 VXD$B2C
         yes           Std       0 VXE$MERC
                       nStd      0 X66_AUTO_5
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:199  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  VX_OU_HEAD                            VX_ERRORS
     VX_MAP_LO_FPT_WRITE                   VX_MAP_LIT_LO_FPT_WRITE               VX_MAP_TREE_START$
     VX_MAP_NUM                            VX_MBUF                               B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:200  


      743        1        /*T***********************************************************/
      744        2        /*T*                                                         */
      745        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      746        4        /*T*                                                         */
      747        5        /*T***********************************************************/
      748        6        /*X* DMR,PLM=6,IND=4,CSU=2,EXM=0,ECU=2,MOC,DCI=4,CRT=4,CTI=8,CCC */
      749        7        VXM$LEVEL:
      750        8              PROC( START$, CURR$, DESIRED_LEVEL, CURRENT_LEVEL, MORE_LEVELS);

      8  4 000000   000000 700200 xent  VXM$LEVEL    TSX0  ! X66_AUTO_5
         4 000001   000036 000005                    ZERO    30,5

      751        9        %INCLUDE VX_INC_C;
      752    10725        %VX$WORD;

             10737    1   /*******************************************************************************
             10738    1   *                                                                              *
             10739    1   *                          VX$WORD                                                *
             10740    1   *                                                                              *
             10741    1   *******************************************************************************/

             10746    1   DCL VX$WORD_A(0:0)       UBIN(36) ALIGNED    BASED PTR;
             10747    1   DCL VX$HALF_A(0:0)       UBIN(18) HALIGNED   BASED PTR;
             10748    1   DCL VX$BYTE_A(0:0)       UBIN( 9) CALIGNED   BASED PTR;
             10749    1   DCL VX$CHAR_A(0:0)       CHAR( 1) UNAL       BASED PTR;
             10750        /**/
             10751    1   DCL VX$WORD_SBIN_A(0:0)  SBIN WORD ALIGNED   BASED     PTR;
             10752    1   DCL VX$HALF_SBIN_A(0:0)  SBIN HALF HALIGNED  BASED     PTR;
             10753    1   DCL VX$BYTE_SBIN_A(0:0)  SBIN HALF CALIGNED  BASED     PTR;
             10754    1   DCL VX$BIT_A(0:0)        BIT(36)   ALIGNED   BASED     PTR;
      753    10757        %T$C;

             10769    1   /*******************************************************************************
             10770    1   *                                                                              *
             10771    1   *                          T$C                                                 *
             10772    1   *                                                                              *
PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:201  
             10773    1   *******************************************************************************/

             10778    1   DCL 1 T$C           BASED     ALIGNED,  /* Text count                         */
             10779    1         2 COUNT        UBIN( 9) UNAL,
             10780    1         2 CHARS        CHAR( T$C.COUNT )   UNAL;
             10781    1   DCL 1 T$C_UNAL      BASED     UNAL,     /* Text count                         */
             10782    1         2 COUNT        UBIN( 9) UNAL,
             10783    1         2 CHARS        CHAR( T$C_UNAL.COUNT ) UNAL;
      754    10786        %SET LISTMAC='1'B;
      755    10787        %SET LISTSUB='1'B;
      756    10788        %SET LISTEXP='1'B;
      757    10789
      758    10790        %P;
             10791        %LSET LISTDIR='0'B;

             10798    1   /*******************************************************************************
             10799    1   *                                                                              *
             10800    1   *                          PARAMETERS                                             *
             10801    1   *                                                                              *
             10802    1   *******************************************************************************/

      759    10806    1   DCL  START$   PTR;                      /* Pointer to root node */
      760    10807    1   DCL  CURR$    PTR;                      /* Pointer to current node */
      761    10808    1   DCL  DESIRED_LEVEL  UBIN;               /* Desired level for node summaries */
      762    10809    1   DCL  CURRENT_LEVEL  UBIN;               /* Level the current node is at  */
      763    10810    1   DCL MORE_LEVELS BIT(1) ALIGNED;
             10810            /* Flag set if there are nodes below the desired level */
      764    10811        %C;
             10812        %LSET LISTDIR='0'B;

             10819    1   /*******************************************************************************
             10820    1   *                                                                              *
             10821    1   *                          CHAR                                                 *
             10822    1   *                                                                              *
             10823    1   *******************************************************************************/

      765    10827    1   DCL  SUMMARY  CHAR(81)   STATIC   INIT(
PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:202  
      766    10828    1             'A                                    9K');
      767    10829        %PTR;
             10830        %LSET LISTDIR='0'B;

             10837    1   /*******************************************************************************
             10838    1   *                                                                              *
             10839    1   *                          PTR                                                 *
             10840    1   *                                                                              *
             10841    1   *******************************************************************************/

      768    10845    1   DCL   BACK$     PTR    AUTO;
      769    10846    1   DCL   FORWARD$  PTR    AUTO;
      770    10847    1   DCL   OVERLAY$  PTR    AUTO;
      771    10848        %POINTER;
             10849    1   DCL P$         PTR       ALIGNED AUTO;
             10850    1   DCL Q$         PTR       ALIGNED AUTO;
             10851    1   DCL R$         PTR       ALIGNED AUTO;
      772    10853        %U;
             10854        %LSET LISTDIR='0'B;

             10861    1   /*******************************************************************************
             10862    1   *                                                                              *
             10863    1   *                          UBIN                                                 *
             10864    1   *                                                                              *
             10865    1   *******************************************************************************/

      773    10869    1   DCL   LOW_INDEX (0:1)     UBIN    CONSTANT  INIT ( 40, 61 );
      774    10870    1   DCL   HIGH_INDEX(0:1)     UBIN    CONSTANT  INIT ( 47, 68 );
      775    10871    1   DCL   SIZE_INDEX(0:1)     UBIN    CONSTANT  INIT ( 54, 75 );
      776    10872    1   DCL   NAME_SIZE           UBIN    STATIC;
      777    10873    1   DCL   PARENT_NAME_SIZE    UBIN    STATIC;
      778    10874    1   DCL   I                   UBIN    STATIC;
      779    10875    1   DCL   SIZE                UBIN    STATIC;
      780    10876    1   DCL   NEXT_LEVEL          UBIN    AUTO;
      781    10877        %E;
             10878        %LSET LISTDIR='0'B;

PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:203  
             10885    1   /*******************************************************************************
             10886    1   *                                                                              *
             10887    1   *                          ENTRY                                                 *
             10888    1   *                                                                              *
             10889    1   *******************************************************************************/

      782    10893        %ENTRIES;
             10894    1   DCL VXE$ERROR       ENTRY(4);
             10895    1   DCL VXE$ERR         ENTRY(3);
             10896    1   DCL VXE$MERC        ENTRY;
             10897    1   DCL VXE$ERRMSG      ENTRY(3);
             10898    1   DCL VXR$READ        ENTRY( 3 );
             10899    1   DCL VXW$WRITE       ENTRY( 3 );
             10900    1   DCL VXW$WRITE_DO    ENTRY( 2 );
             10901    1   DCL VXD$B2C         ENTRY( 5 );
             10902    1   DCL VXD$C2B         ENTRY( 3 );
             10903    1   DCL VXA$GET         ENTRY( 3 );
             10904    1   DCL VXF$FREE        ENTRY( 3 );
             10905    1   DCL VXQ$SORT        ENTRY( 7 );
             10906    1   DCL VXY$YESNO       ENTRY( 1 );
      783    10908        %S;
             10909        %LSET LISTDIR='0'B;

             10916    1   /*******************************************************************************
             10917    1   *                                                                              *
             10918    1   *                          SBIN                                                 *
             10919    1   *                                                                              *
             10920    1   *******************************************************************************/

      784    10924    1   DCL S_START (0:2/*@ROS*/)  SBIN    WORD    ALIGNED     AUTO;
      785    10925    1   DCL S_STOP  (0:2/*@ROS*/)  SBIN    WORD    ALIGNED     AUTO;
      786    10926    1   DCL S_SIZE  (0:2/*@ROS*/)  SBIN    WORD    ALIGNED     AUTO;
      787    10927        %BANNER(ARG="VX$TREE_HEADER - VX$TREE_NODE");
             10928        %LSET LISTDIR='0'B;

             10935    1   /*******************************************************************************
             10936    1   *                                                                              *
PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:204  
             10937    1   *                          VX$TREE_HEADER - VX$TREE_NODE                          *
             10938    1   *                                                                              *
             10939    1   *******************************************************************************/

      788    10943        %B$TREE_TABLE(HDR_NAME=VX$TREE_HEADER, NODE_NAME=VX$TREE_NODE );
             10944    1   DCL 1 VX$TREE_HEADER BASED ALIGNED,
             10945              /*K*  HDR_NAME is the Tree table header.  */
             10946    1         2 NODES UBIN HALF UNAL,
             10947                /*K*  NODES is the number of nodes in the tree table.  */
             10948    1         2 SIZE UBIN HALF UNAL,
             10949                /*K*  SIZE is the total word size of the tree table
             10950                      (HDR + NODES + TEST pool).   */
             10951    1         2 LIB$ PTR,
             10952                /*K*  LIB$ is the pointer to the name of the shared library
             10953                      currently associated.  */
             10954    1         2 PRECSIZE UBIN HALF UNAL,
             10955                /*K*  PRECSIZE  is the maximum program record size in the
             10956                      Run Unit (from the Head record).  */
             10957    1         2 MAX_LIB_DATA UBIN HALF UNAL;
             10958                /*K*  MAX_LIB_DATA is the maximum reserved in the program
             10959                      image for the shared library data.  */
             10960    1   DCL 1 VX$TREE_NODE BASED ALIGNED,
             10961              /*K*  NODE_NAME is the node specification.  */
             10962    1         2 NAME$ PTR,
             10963                /*K*  NAME$ is the pointer to the name of the node.  */
             10964    1         2 FLGS,
             10965                /*K*  FLGS are control flags used by M$OLAY.  */
             10966    1           3 NOW_IN BIT(1) UNAL,
             10967                  /*K*  NOW_IN is set if this node is now in memory.  */
             10968    1           3 WAS_IN BIT(1) UNAL,
             10969                  /*K*  WAS_IN is set if this node was in memory.  */
             10970    1           3 * BIT(7) UNAL,
             10971                  /*K*  * is reserved for future use and must be zero.  */
             10972    1         2 AFLGS,
             10973                /*K*  AFLGS are access flags.  */
             10974    1           3 * BIT(6) UNAL,
             10975                  /*K*  * is reserved for future use and must be zero.  */
PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:205  
             10976    1           3 NOPATH BIT(1) UNAL,
             10977                  /*K*  NOPATH is set if this node is independently loaded
             10978                        (no backward path).  */
             10979    1           3 ENTER BIT(1) UNAL,
             10980                  /*K*  ENTER is set if ENTRY$ is valid.  */
             10981    1           3 CANCEL BIT(1) UNAL,
             10982                  /*K*  CANCEL is set if the overlay was removed by
             10983                        "CANCEL=YES".   */
             10984    1         2 BACK# SBIN HALF UNAL,
             10985                /*K*  BACK# is the backward link (parent).  */
             10986    1         2 FORWARD# SBIN HALF UNAL,
             10987                /*K*  FORWARD# is the forward link (daughter).  */
             10988    1         2 OVERLAY# SBIN HALF UNAL,
             10989                /*K*  OVERLAY# is the overlay link (same level).   */
             10990    1         2 PADDR UBIN HALF UNAL,
             10991                /*K*  PADDR is the address of procedure.  */
             10992    1         2 PSIZE UBIN HALF UNAL,
             10993                /*K*  PSIZE is the size of procedure.  */
             10994    1         2 DADDR UBIN HALF UNAL,
             10995                /*K*  DADDR is the address of data.  */
             10996    1         2 DSIZE UBIN HALF UNAL,
             10997                /*K*  DSIZE is the size of data.  */
             10998    1         2 ENTRY$ EPTR;
             10999                /*K*  ENTRY$ is the overlay entry point (see ENTER).  */
      789    11001        %BANNER(ARG=FPTS);
             11002        %LSET LISTDIR='0'B;

             11009    1   /*******************************************************************************
             11010    1   *                                                                              *
             11011    1   *                          FPTS                                                 *
             11012    1   *                                                                              *
             11013    1   *******************************************************************************/

      790    11017        %PLIST;
      791    11018        %FPT_WRITE( FPTN=VX_MAP_LO_FPT_WRITE, STCLASS=SYMREF);
      792    11049        %FPT_WRITE( FPTN=VX_MAP_LIT_LO_FPT_WRITE, STCLASS=SYMREF);
      793    11080        %EJECT;
PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:206  
      794    11081        /*
      795    11082              Variables for map(ping)
      796    11083        */
      797    11084    1   DCL VX_MAP$               PTR  ALIGNED   SYMREF;
      798    11085    1   DCL VX_MAP_TREE_START$    PTR  ALIGNED   SYMREF;
      799    11086    1   DCL VX_MAP_NUM            SBIN WORD ALIGNED   SYMREF;
      800    11087    1   DCL 1 VX_MBUF ALIGNED SYMREF,
      801    11088    1         2 CHARS CHAR(132) UNAL,
      802    11089    1         2 CHARS_A(0:131) REDEF CHARS CHAR(1) UNAL,
      803    11090    1         2 LIT_BUF REDEF CHARS UNAL,
      804    11091    1           3 VFC CHAR(1) UNAL,
      805    11092    1           3 CHARS CHAR(131) UNAL;
      806    11093        %EJECT;
PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:207  
      807    11094    2         IF CURRENT_LEVEL = DESIRED_LEVEL THEN DO;

  11094  4 000002   200006 470500                    LDP0    @CURRENT_LEVEL,,AUTO
         4 000003   200005 471500                    LDP1    @DESIRED_LEVEL,,AUTO
         4 000004   000000 236100                    LDQ     0,,PR0
         4 000005   100000 116100                    CMPQ    0,,PR1
         4 000006   000426 601000 4                  TNZ     s:11163

      808    11095        /*
      809    11096                                          Print a summary for each node at this
      810    11097                                          level and set MORE_LEVELS if there are
      811    11098                                          any nodes at a lower level
      812    11099        */
      813    11100    2             VX_MBUF.CHARS = 'A';

  11100  4 000007   040000 100400                    MLR     fill='040'O
         4 000010   000000 000001 5                  ADSC9   0                        cn=0,n=1
         4 000011   000000 000204 xsym               ADSC9   VX_MBUF                  cn=0,n=132

      814    11101    2             VX_MAP_LO_FPT_WRITE.BUF_ = VECTOR( VX_MBUF );

  11101  4 000012   000002 237000 5                  LDAQ    2
         4 000013   000004 757000 xsym               STAQ    VX_MAP_LO_FPT_WRITE+4

      815    11102    2             VX_MAP_LIT_LO_FPT_WRITE.BUF_ = VECTOR( SUMMARY );

  11102  4 000014   000004 237000 5                  LDAQ    4
         4 000015   000004 757000 xsym               STAQ    VX_MAP_LIT_LO_FPT_WRITE+4

      816    11103    2             CALL INSERT( SUMMARY, 0, 1, 'A' );

  11103  4 000016   101000 236003                    LDQ     33280,DU
         4 000017   000000 552040 2                  STBQ    SUMMARY,'40'O

      817    11104    2             OVERLAY$ = CURR$;

  11104  4 000020   200004 473500                    LDP3    @CURR$,,AUTO
PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:208  
         4 000021   300000 236100                    LDQ     0,,PR3
         4 000022   200012 756100                    STQ     OVERLAY$,,AUTO

      818    11105    3             DO WHILE ( OVERLAY$ ~= ADDR(NIL) );

  11105  4 000023   000422 710000 4                  TRA     s:11156

      819    11106    3                 IF OVERLAY$->VX$TREE_NODE.FORWARD# > 0 THEN MORE_LEVELS = '1'B
             11106                          /*@TRUE_B*/;

  11106  4 000024   200012 470500                    LDP0    OVERLAY$,,AUTO
         4 000025   000002 220100                    LDX0    2,,PR0
         4 000026   000032 604400 4                  TMOZ    s:11107

  11106  4 000027   400000 236003                    LDQ     -131072,DU
         4 000030   200007 471500                    LDP1    @MORE_LEVELS,,AUTO
         4 000031   100000 756100                    STQ     0,,PR1

      820    11107    3                 S_START(0/*@DATA*/) = OVERLAY$ -> VX$TREE_NODE.DADDR;

  11107  4 000032   000004 236100                    LDQ     4,,PR0
         4 000033   000022 772000                    QRL     18
         4 000034   200017 756100                    STQ     S_START,,AUTO

      821    11108    3                 S_START(1/*@PROC*/) = OVERLAY$ -> VX$TREE_NODE.PADDR;

  11108  4 000035   000003 236100                    LDQ     3,,PR0
         4 000036   000022 772000                    QRL     18
         4 000037   200020 756100                    STQ     S_START+1,,AUTO

      822    11109    3                 S_SIZE(0/*@DATA*/) = OVERLAY$ -> VX$TREE_NODE.DSIZE;

  11109  4 000040   000004 236100                    LDQ     4,,PR0
         4 000041   777777 376007                    ANQ     -1,DL
         4 000042   200025 756100                    STQ     S_SIZE,,AUTO

      823    11110    3                 S_SIZE(1/*@PROC*/) = OVERLAY$ -> VX$TREE_NODE.PSIZE;
PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:209  

  11110  4 000043   000003 236100                    LDQ     3,,PR0
         4 000044   777777 376007                    ANQ     -1,DL
         4 000045   200026 756100                    STQ     S_SIZE+1,,AUTO

      824    11111    3                 SIZE = (S_SIZE(0/*@DATA*/) + 1024/*@PAGE_SIZE*/-1) / 1024
             11111                          /*@PAGE_SIZE*/

  11111  4 000046   200025 236100                    LDQ     S_SIZE,,AUTO
         4 000047   001777 036007                    ADLQ    1023,DL
         4 000050   002000 506007                    DIV     1024,DL
         4 000051   200030 756100                    STQ     S_SIZE+3,,AUTO
         4 000052   200026 236100                    LDQ     S_SIZE+1,,AUTO
         4 000053   001777 036007                    ADLQ    1023,DL
         4 000054   002000 506007                    DIV     1024,DL
         4 000055   200030 036100                    ADLQ    S_SIZE+3,,AUTO
         4 000056   000030 756000 2                  STQ     SIZE

      825    11112    3                         + (S_SIZE(1/*@PROC*/) + 1024/*@PAGE_SIZE*/-1) / 1024
             11112                                  /*@PAGE_SIZE*/;
      826    11113    3                 CALL VXD$B2C( SUMMARY, 33, 5, SIZE, 10 );

  11113  4 000057   000006 630400 5                  EPPR0   6
         4 000060   000023 631400 xsym               EPPR1   B_VECTNIL+19
         4 000061   000000 701000 xent               TSX1    VXD$B2C
         4 000062   000000 011000                    NOP     0

      827    11114    4                 DO I = 0/*@DATA*/ TO 1/*@PROC*/;

  11114  4 000063   000027 450000 2                  STZ     I

      828    11115    5                     IF S_SIZE(I) > 0 THEN DO;

  11115  4 000064   000027 720000 2                  LXL0    I
         4 000065   200025 235110                    LDA     S_SIZE,X0,AUTO
         4 000066   000131 604400 4                  TMOZ    s:11121

PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:210  
      829    11116    5                         CALL VXD$B2C( SUMMARY, LOW_INDEX(I), 6, S_START(I), 8 );

  11116  4 000067   000013 236000 5                  LDQ     11
         4 000070   200034 756100                    STQ     S_SIZE+7,,AUTO
         4 000071   200017 630510                    EPPR0   S_START,X0,AUTO
         4 000072   200033 450500                    STP0    S_SIZE+6,,AUTO
         4 000073   000014 236000 5                  LDQ     12
         4 000074   200032 756100                    STQ     S_SIZE+5,,AUTO
         4 000075   000000 631410 3                  EPPR1   LOW_INDEX,X0
         4 000076   200031 451500                    STP1    S_SIZE+4,,AUTO
         4 000077   000005 236000 5                  LDQ     5
         4 000100   200030 756100                    STQ     S_SIZE+3,,AUTO
         4 000101   200030 630500                    EPPR0   S_SIZE+3,,AUTO
         4 000102   000023 631400 xsym               EPPR1   B_VECTNIL+19
         4 000103   000000 701000 xent               TSX1    VXD$B2C
         4 000104   000000 011000                    NOP     0

      830    11117    5                         S_STOP(I) = S_START(I) + S_SIZE(I) - 1;

  11117  4 000105   000027 720000 2                  LXL0    I
         4 000106   200017 236110                    LDQ     S_START,X0,AUTO
         4 000107   200025 036110                    ADLQ    S_SIZE,X0,AUTO
         4 000110   000001 136007                    SBLQ    1,DL
         4 000111   200022 756110                    STQ     S_STOP,X0,AUTO

      831    11118    5                         CALL VXD$B2C( SUMMARY, HIGH_INDEX(I), 6, S_STOP(I), 8 );

  11118  4 000112   000013 236000 5                  LDQ     11
         4 000113   200034 756100                    STQ     S_SIZE+7,,AUTO
         4 000114   200022 630510                    EPPR0   S_STOP,X0,AUTO
         4 000115   200033 450500                    STP0    S_SIZE+6,,AUTO
         4 000116   000014 236000 5                  LDQ     12
         4 000117   200032 756100                    STQ     S_SIZE+5,,AUTO
         4 000120   000002 631410 3                  EPPR1   HIGH_INDEX,X0
         4 000121   200031 451500                    STP1    S_SIZE+4,,AUTO
         4 000122   000005 236000 5                  LDQ     5
         4 000123   200030 756100                    STQ     S_SIZE+3,,AUTO
PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:211  
         4 000124   200030 630500                    EPPR0   S_SIZE+3,,AUTO
         4 000125   000023 631400 xsym               EPPR1   B_VECTNIL+19
         4 000126   000000 701000 xent               TSX1    VXD$B2C
         4 000127   000000 011000                    NOP     0

      832    11119    5                        END;

  11119  4 000130   000143 710000 4                  TRA     s:11123

      833    11120    5                     ELSE DO;

      834    11121    5                         CALL INSERT( SUMMARY, LOW_INDEX(I), , ' ' );

  11121  4 000131   000000 235010 3                  LDA     LOW_INDEX,X0
         4 000132   200030 755100                    STA     S_SIZE+3,,AUTO
         4 000133   000000 235010 3                  LDA     LOW_INDEX,X0
         4 000134   000027 675000 xsym               ERA     B_VECTNIL+23
         4 000135   000122 035007                    ADLA    82,DL
         4 000136   000000 621005                    EAX1    0,AL
         4 000137   200030 235100                    LDA     S_SIZE+3,,AUTO
         4 000140   040045 100400                    MLR     fill='040'O
         4 000141   000035 000001 xsym               ADSC9   B_VECTNIL+29             cn=0,n=1
         4 000142   000000 000011 2                  ADSC9   SUMMARY,A                cn=0,n=*X1

      835    11122    5                        END;

      836    11123    4                     CALL VXD$B2C( SUMMARY, SIZE_INDEX(I), 6, S_SIZE(I), 8 );

  11123  4 000143   000013 236000 5                  LDQ     11
         4 000144   200034 756100                    STQ     S_SIZE+7,,AUTO
         4 000145   000027 720000 2                  LXL0    I
         4 000146   200025 630510                    EPPR0   S_SIZE,X0,AUTO
         4 000147   200033 450500                    STP0    S_SIZE+6,,AUTO
         4 000150   000014 236000 5                  LDQ     12
         4 000151   200032 756100                    STQ     S_SIZE+5,,AUTO
         4 000152   000004 631410 3                  EPPR1   SIZE_INDEX,X0
         4 000153   200031 451500                    STP1    S_SIZE+4,,AUTO
PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:212  
         4 000154   000005 236000 5                  LDQ     5
         4 000155   200030 756100                    STQ     S_SIZE+3,,AUTO
         4 000156   200030 630500                    EPPR0   S_SIZE+3,,AUTO
         4 000157   000023 631400 xsym               EPPR1   B_VECTNIL+19
         4 000160   000000 701000 xent               TSX1    VXD$B2C
         4 000161   000000 011000                    NOP     0

      837    11124    4                    END;                   /* do i = @DATA to @PROC  */

  11124  4 000162   000027 235000 2                  LDA     I
         4 000163   000001 035007                    ADLA    1,DL
         4 000164   000027 755000 2                  STA     I
         4 000165   000002 115007                    CMPA    2,DL
         4 000166   000064 602000 4                  TNC     s:11115

      838    11125    3                 R$ = ADDR( OVERLAY$ -> VX$TREE_NODE.NAME$ );

  11125  4 000167   200012 236100                    LDQ     OVERLAY$,,AUTO
         4 000170   200015 756100                    STQ     R$,,AUTO

      839    11126    3                 P$ = PINCRW( VX_MAP_TREE_START$, R$ -> VX$HALF_A(0) );

  11126  4 000171   200015 470500                    LDP0    R$,,AUTO
         4 000172   000100 100500                    MLR     fill='000'O
         4 000173   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
         4 000174   200030 000004                    ADSC9   S_SIZE+3,,AUTO           cn=0,n=4
         4 000175   200030 220100                    LDX0    S_SIZE+3,,AUTO
         4 000176   000000 636010                    EAQ     0,X0
         4 000177   000000 036000 xsym               ADLQ    VX_MAP_TREE_START$
         4 000200   200013 756100                    STQ     P$,,AUTO

      840    11127    3                 CALL INSERT( SUMMARY, 1, 31, P$ -> T$C_UNAL.CHARS );

  11127  4 000201   200013 471500                    LDP1    P$,,AUTO
         4 000202   000100 101500                    MRL     fill='000'O
         4 000203   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         4 000204   200030 000002                    ADSC9   S_SIZE+3,,AUTO           cn=0,n=2
PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:213  
         4 000205   200030 220100                    LDX0    S_SIZE+3,,AUTO
         4 000206   040000 100540                    MLR     fill='040'O
         4 000207   100000 200010                    ADSC9   0,,PR1                   cn=1,n=*X0
         4 000210   000000 200037 2                  ADSC9   SUMMARY                  cn=1,n=31

      841    11128    3                 NAME_SIZE = P$ -> T$C_UNAL.COUNT;

  11128  4 000211   000000 101500                    MRL     fill='000'O
         4 000212   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         4 000213   000025 000004 2                  ADSC9   NAME_SIZE                cn=0,n=4

      842    11129    4                 IF DESIRED_LEVEL = 0 THEN DO; /* Processing the root node */

  11129  4 000214   200005 473500                    LDP3    @DESIRED_LEVEL,,AUTO
         4 000215   300000 235100                    LDA     0,,PR3
         4 000216   000224 601000 4                  TNZ     s:11133

      843    11130    4                     CALL M$WRITE( VX_MAP_LIT_LO_FPT_WRITE ) ALTRET( MAP_IO_ERROR);

  11130  4 000217   000000 630400 xsym               EPPR0   VX_MAP_LIT_LO_FPT_WRITE
         4 000220   440001 713400                    CLIMB   alt,write
         4 000221   401400 401760                    pmme    nvectors=4
         4 000222   000506 702000 4                  TSX2    MAP_IO_ERROR

      844    11131    4                     RETURN;

  11131  4 000223   000000 702200 xent               TSX2  ! X66_ARET

      845    11132    4                    END;
      846    11133    3                 VX_MAP_NUM = CURR$ -> VX$TREE_NODE.BACK#;

  11133  4 000224   200004 474500                    LDP4    @CURR$,,AUTO
         4 000225   400000 475500                    LDP5    0,,PR4
         4 000226   500001 236100                    LDQ     1,,PR5
         4 000227   000022 736000                    QLS     18
         4 000230   000022 732000                    QRS     18
         4 000231   000000 756000 xsym               STQ     VX_MAP_NUM
PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:214  

      847    11134    3                 BACK$ = PINCRW( START$, VX_MAP_NUM * SIZEW(VX$TREE_NODE) );

  11134  4 000232   200003 475500                    LDP5    @START$,,AUTO
         4 000233   500000 476500                    LDP6    0,,PR5
         4 000234   000006 402007                    MPY     6,DL
         4 000235   600000 637506                    EPPR7   0,QL,PR6
         4 000236   200010 457500                    STP7    BACK$,,AUTO

      848    11135    3                 R$ = ADDR( BACK$ -> VX$TREE_NODE.NAME$ );

  11135  4 000237   200010 236100                    LDQ     BACK$,,AUTO
         4 000240   200015 756100                    STQ     R$,,AUTO

      849    11136    3                 P$ = PINCRW( VX_MAP_TREE_START$, R$ -> VX$HALF_A(0) );

  11136  4 000241   200015 470500                    LDP0    R$,,AUTO
         4 000242   000100 100500                    MLR     fill='000'O
         4 000243   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
         4 000244   200030 000004                    ADSC9   S_SIZE+3,,AUTO           cn=0,n=4
         4 000245   200030 220100                    LDX0    S_SIZE+3,,AUTO
         4 000246   000000 636010                    EAQ     0,X0
         4 000247   000000 036000 xsym               ADLQ    VX_MAP_TREE_START$
         4 000250   200013 756100                    STQ     P$,,AUTO

      850    11137    3                 PARENT_NAME_SIZE = P$ -> T$C_UNAL.COUNT + 2;

  11137  4 000251   200013 471500                    LDP1    P$,,AUTO
         4 000252   000100 101500                    MRL     fill='000'O
         4 000253   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         4 000254   200030 000004                    ADSC9   S_SIZE+3,,AUTO           cn=0,n=4
         4 000255   200030 236100                    LDQ     S_SIZE+3,,AUTO
         4 000256   000002 036007                    ADLQ    2,DL
         4 000257   000026 756000 2                  STQ     PARENT_NAME_SIZE

      851    11138    3                 IF NAME_SIZE + PARENT_NAME_SIZE + 2 > 31

PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:215  
  11138  4 000260   000025 036000 2                  ADLQ    NAME_SIZE
         4 000261   000036 116007                    CMPQ    30,DL
         4 000262   000340 602000 4                  TNC     s:11147

      852    11139    4                 THEN DO;

      853    11140    4                     CALL M$WRITE ( VX_MAP_LIT_LO_FPT_WRITE ) ALTRET (MAP_IO_ERROR);

  11140  4 000263   000000 630400 xsym               EPPR0   VX_MAP_LIT_LO_FPT_WRITE
         4 000264   440001 713400                    CLIMB   alt,write
         4 000265   401400 401760                    pmme    nvectors=4
         4 000266   000506 702000 4                  TSX2    MAP_IO_ERROR

      854    11141    4                     CALL INSERT( VX_MBUF.CHARS, 34-PARENT_NAME_SIZE,

  11141  4 000267   200013 470500                    LDP0    P$,,AUTO
         4 000270   000100 101500                    MRL     fill='000'O
         4 000271   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
         4 000272   200030 000002                    ADSC9   S_SIZE+3,,AUTO           cn=0,n=2
         4 000273   200030 220100                    LDX0    S_SIZE+3,,AUTO
         4 000274   000000 235003                    LDA     0,DU
         4 000275   000026 135000 2                  SBLA    PARENT_NAME_SIZE
         4 000276   000026 721000 2                  LXL1    PARENT_NAME_SIZE
         4 000277   040045 100400                    MLR     fill='040'O
         4 000300   000015 000001 5                  ADSC9   13                       cn=0,n=1
         4 000301   000010 400011 xsym               ADSC9   VX_MBUF+8,A              cn=2,n=*X1
         4 000302   000026 236000 2                  LDQ     PARENT_NAME_SIZE
         4 000303   000002 116007                    CMPQ    2,DL
         4 000304   000330 602000 4                  TNC     s:11143
         4 000305   777777 622006                    EAX2    -1,QL
         4 000306   040045 100540                    MLR     fill='040'O
         4 000307   000000 200010                    ADSC9   0,,PR0                   cn=1,n=*X0
         4 000310   000010 600012 xsym               ADSC9   VX_MBUF+8,A              cn=3,n=*X2
         4 000311   000000 635010                    EAA     0,X0
         4 000312   000022 771000                    ARL     18
         4 000313   200031 755100                    STA     S_SIZE+4,,AUTO
         4 000314   200031 136100                    SBLQ    S_SIZE+4,,AUTO
PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:216  
         4 000315   000001 116007                    CMPQ    1,DL
         4 000316   000330 604400 4                  TMOZ    s:11143
         4 000317   200032 756100                    STQ     S_SIZE+5,,AUTO
         4 000320   000000 636010                    EAQ     0,X0
         4 000321   000022 772000                    QRL     18
         4 000322   000026 136000 2                  SBLQ    PARENT_NAME_SIZE
         4 000323   200032 723100                    LXL3    S_SIZE+5,,AUTO
         4 000324   777777 624013                    EAX4    -1,X3
         4 000325   040046 100400                    MLR     fill='040'O
         4 000326   000016 000001 5                  ADSC9   14                       cn=0,n=1
         4 000327   000010 600014 xsym               ADSC9   VX_MBUF+8,Q              cn=3,n=*X4

      855    11142    4                             PARENT_NAME_SIZE, '<', P$ -> T$C_UNAL.CHARS, '>' );
      856    11143    4                     CALL M$WRITE( VX_MAP_LO_FPT_WRITE ) ALTRET ( MAP_IO_ERROR );

  11143  4 000330   000000 630400 xsym               EPPR0   VX_MAP_LO_FPT_WRITE
         4 000331   440001 713400                    CLIMB   alt,write
         4 000332   401400 401760                    pmme    nvectors=4
         4 000333   000506 702000 4                  TSX2    MAP_IO_ERROR

      857    11144    4                     VX_MBUF.CHARS = 'A';

  11144  4 000334   040000 100400                    MLR     fill='040'O
         4 000335   000000 000001 5                  ADSC9   0                        cn=0,n=1
         4 000336   000000 000204 xsym               ADSC9   VX_MBUF                  cn=0,n=132

      858    11145    4                    END;

  11145  4 000337   000404 710000 4                  TRA     s:11151

      859    11146    4                 ELSE DO;

      860    11147    4                     CALL INSERT( SUMMARY, 32-PARENT_NAME_SIZE, PARENT_NAME_SIZE,

  11147  4 000340   000100 101500                    MRL     fill='000'O
         4 000341   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
         4 000342   200030 000002                    ADSC9   S_SIZE+3,,AUTO           cn=0,n=2
PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:217  
         4 000343   200030 220100                    LDX0    S_SIZE+3,,AUTO
         4 000344   000000 235003                    LDA     0,DU
         4 000345   000026 135000 2                  SBLA    PARENT_NAME_SIZE
         4 000346   000026 721000 2                  LXL1    PARENT_NAME_SIZE
         4 000347   040045 100400                    MLR     fill='040'O
         4 000350   000015 000001 5                  ADSC9   13                       cn=0,n=1
         4 000351   000010 000011 2                  ADSC9   SUMMARY+8,A              cn=0,n=*X1
         4 000352   000026 236000 2                  LDQ     PARENT_NAME_SIZE
         4 000353   000002 116007                    CMPQ    2,DL
         4 000354   000400 602000 4                  TNC     s:11149
         4 000355   777777 622006                    EAX2    -1,QL
         4 000356   040045 100540                    MLR     fill='040'O
         4 000357   100000 200010                    ADSC9   0,,PR1                   cn=1,n=*X0
         4 000360   000010 200012 2                  ADSC9   SUMMARY+8,A              cn=1,n=*X2
         4 000361   000000 635010                    EAA     0,X0
         4 000362   000022 771000                    ARL     18
         4 000363   200031 755100                    STA     S_SIZE+4,,AUTO
         4 000364   200031 136100                    SBLQ    S_SIZE+4,,AUTO
         4 000365   000001 116007                    CMPQ    1,DL
         4 000366   000400 604400 4                  TMOZ    s:11149
         4 000367   200032 756100                    STQ     S_SIZE+5,,AUTO
         4 000370   000000 636010                    EAQ     0,X0
         4 000371   000022 772000                    QRL     18
         4 000372   000026 136000 2                  SBLQ    PARENT_NAME_SIZE
         4 000373   200032 723100                    LXL3    S_SIZE+5,,AUTO
         4 000374   777777 624013                    EAX4    -1,X3
         4 000375   040046 100400                    MLR     fill='040'O
         4 000376   000016 000001 5                  ADSC9   14                       cn=0,n=1
         4 000377   000010 200014 2                  ADSC9   SUMMARY+8,Q              cn=1,n=*X4

      861    11148    4                             '<', P$ -> T$C_UNAL.CHARS, '>' );
      862    11149    4                     CALL M$WRITE( VX_MAP_LIT_LO_FPT_WRITE ) ALTRET ( MAP_IO_ERROR );

  11149  4 000400   000000 630400 xsym               EPPR0   VX_MAP_LIT_LO_FPT_WRITE
         4 000401   440001 713400                    CLIMB   alt,write
         4 000402   401400 401760                    pmme    nvectors=4
         4 000403   000506 702000 4                  TSX2    MAP_IO_ERROR
PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:218  

      863    11150    4                    END;

      864    11151    3                 VX_MAP_NUM = OVERLAY$ -> VX$TREE_NODE.OVERLAY#;

  11151  4 000404   200012 470500                    LDP0    OVERLAY$,,AUTO
         4 000405   000002 236100                    LDQ     2,,PR0
         4 000406   000022 736000                    QLS     18
         4 000407   000022 732000                    QRS     18
         4 000410   000000 756000 xsym               STQ     VX_MAP_NUM

      865    11152    3                 IF VX_MAP_NUM > 0 THEN

  11152  4 000411   000420 604400 4                  TMOZ    s:11155

      866    11153    3                     OVERLAY$ = PINCRW( START$, VX_MAP_NUM * SIZEW(VX$TREE_NODE) );

  11153  4 000412   200003 471500                    LDP1    @START$,,AUTO
         4 000413   100000 473500                    LDP3    0,,PR1
         4 000414   000006 402007                    MPY     6,DL
         4 000415   300000 634506                    EPPR4   0,QL,PR3
         4 000416   200012 454500                    STP4    OVERLAY$,,AUTO
         4 000417   000422 710000 4                  TRA     s:11156

      867    11154    3                 ELSE
      868    11155    3                     OVERLAY$ = ADDR( NIL );

  11155  4 000420   000001 236000 xsym               LDQ     B_VECTNIL+1
         4 000421   200012 756100                    STQ     OVERLAY$,,AUTO

      869    11156    3                END;                       /* end do while(OVERLAY$~=addr(nil))*/

  11156  4 000422   200012 236100                    LDQ     OVERLAY$,,AUTO
         4 000423   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 000424   000024 601000 4                  TNZ     s:11106

      870    11157    2            END;                   /* if CURRENT_LEVEL = DESIRED_LEVEL then do */
PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:219  

  11157  4 000425   000505 710000 4                  TRA     s:11178

      871    11158    2         ELSE DO;                  /* if CURRENT_LEVEL = DESIRED_LEVEL then do */

      872    11159                                    /* Not at the desired level for the node summaries.
      873    11160                                       For each node at this level, recursively continue
      874    11161                                       searching for the desired level.
      875    11162                                    */
      876    11163    2             NEXT_LEVEL = CURRENT_LEVEL + 1;

  11163  4 000426   000001 036007                    ADLQ    1,DL
         4 000427   200016 756100                    STQ     NEXT_LEVEL,,AUTO

      877    11164    2             OVERLAY$ = CURR$;

  11164  4 000430   200004 473500                    LDP3    @CURR$,,AUTO
         4 000431   300000 236100                    LDQ     0,,PR3
         4 000432   200012 756100                    STQ     OVERLAY$,,AUTO

      878    11165    3             DO WHILE ( OVERLAY$ ~= ADDR(NIL) );

  11165  4 000433   000502 710000 4                  TRA     s:11176

      879    11166    3                 VX_MAP_NUM = OVERLAY$ -> VX$TREE_NODE.FORWARD#;

  11166  4 000434   200012 470500                    LDP0    OVERLAY$,,AUTO
         4 000435   000002 236100                    LDQ     2,,PR0
         4 000436   000022 732000                    QRS     18
         4 000437   000000 756000 xsym               STQ     VX_MAP_NUM

      880    11167    4                 IF VX_MAP_NUM > 0 THEN DO;

  11167  4 000440   000464 604400 4                  TMOZ    s:11171

      881    11168    4                     FORWARD$ = PINCRW( START$, VX_MAP_NUM * SIZEW(VX$TREE_NODE) );

PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:220  
  11168  4 000441   200003 471500                    LDP1    @START$,,AUTO
         4 000442   100000 473500                    LDP3    0,,PR1
         4 000443   000006 402007                    MPY     6,DL
         4 000444   300000 634506                    EPPR4   0,QL,PR3
         4 000445   200011 454500                    STP4    FORWARD$,,AUTO

      882    11169    4                     CALL VXM$LEVEL( START$, FORWARD$, DESIRED_LEVEL, NEXT_LEVEL,
             11169                              MORE_LEVELS );

  11169  4 000446   200007 236100                    LDQ     @MORE_LEVELS,,AUTO
         4 000447   200034 756100                    STQ     S_SIZE+7,,AUTO
         4 000450   200016 633500                    EPPR3   NEXT_LEVEL,,AUTO
         4 000451   200033 453500                    STP3    S_SIZE+6,,AUTO
         4 000452   200005 236100                    LDQ     @DESIRED_LEVEL,,AUTO
         4 000453   200032 756100                    STQ     S_SIZE+5,,AUTO
         4 000454   200011 635500                    EPPR5   FORWARD$,,AUTO
         4 000455   200031 455500                    STP5    S_SIZE+4,,AUTO
         4 000456   200003 236100                    LDQ     @START$,,AUTO
         4 000457   200030 756100                    STQ     S_SIZE+3,,AUTO
         4 000460   200030 630500                    EPPR0   S_SIZE+3,,AUTO
         4 000461   000023 631400 xsym               EPPR1   B_VECTNIL+19
         4 000462   000000 701000 4                  TSX1    s:8
         4 000463   000000 011000                    NOP     0

      883    11170    4                    END;

      884    11171    3                 VX_MAP_NUM = OVERLAY$ -> VX$TREE_NODE.OVERLAY#;

  11171  4 000464   200012 470500                    LDP0    OVERLAY$,,AUTO
         4 000465   000002 236100                    LDQ     2,,PR0
         4 000466   000022 736000                    QLS     18
         4 000467   000022 732000                    QRS     18
         4 000470   000000 756000 xsym               STQ     VX_MAP_NUM

      885    11172    3                 IF VX_MAP_NUM > 0 THEN

  11172  4 000471   000500 604400 4                  TMOZ    s:11175
PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:221  

      886    11173    3                     OVERLAY$ = PINCRW( START$, VX_MAP_NUM * SIZEW(VX$TREE_NODE) );

  11173  4 000472   200003 471500                    LDP1    @START$,,AUTO
         4 000473   100000 473500                    LDP3    0,,PR1
         4 000474   000006 402007                    MPY     6,DL
         4 000475   300000 634506                    EPPR4   0,QL,PR3
         4 000476   200012 454500                    STP4    OVERLAY$,,AUTO
         4 000477   000502 710000 4                  TRA     s:11176

      887    11174    3                 ELSE
      888    11175    3                     OVERLAY$ = ADDR(NIL);

  11175  4 000500   000001 236000 xsym               LDQ     B_VECTNIL+1
         4 000501   200012 756100                    STQ     OVERLAY$,,AUTO

      889    11176    3                END;                       /* end do while(OVERLAY$~=addr(nill))*/

  11176  4 000502   200012 236100                    LDQ     OVERLAY$,,AUTO
         4 000503   000001 116000 xsym               CMPQ    B_VECTNIL+1
         4 000504   000434 601000 4                  TNZ     s:11166

      890    11177    2            END;                           /* end else do  */

      891    11178    1         RETURN;

  11178  4 000505   000000 702200 xent               TSX2  ! X66_ARET

      892    11179
      893    11180
      894    11181
      895    11182
      896    11183    1   MAP_IO_ERROR:
      897    11184    1         CALL M$MERC                             ALTRET( MERC_ERROR );

  11184  4 000506   410007 713400       MAP_IO_ERROR CLIMB   alt,+4103
         4 000507   000000 401760                    pmme    nvectors=0
PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:222  
         4 000510   000513 702000 4                  TSX2    MERC_ERROR

      898    11185              %ERROR_IT;

  11186  4 000511   000002 713400                    CLIMB   err
         4 000512   000000 401760                    pmme    nvectors=0

      899    11188    1   MERC_ERROR:
      900    11189    1         CALL VXE$MERC;

  11189  4 000513   000002 631400 xsym  MERC_ERROR   EPPR1   B_VECTNIL+2
         4 000514   000000 701000 xent               TSX1    VXE$MERC
         4 000515   000000 011000                    NOP     0

      901    11190
      902    11191
      903    11192    1   END VXM$LEVEL;

  11192  4 000516   000000 702200 xent               TSX2  ! X66_ARET
      904    11193        %EOD;

PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:223  
--  Include file information  --

   F_DCB_D.:E05TOU  is referenced.
   VX_DCB_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_FIXED_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VX_MACRO_C.:E05TOU  is referenced.
   VX_PERR_C.:E05TOU  is referenced.
   VX_SUBS_C.:E05TOU  is referenced.
   VX_SWITCH_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   VX_INC_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VXM$LEVEL.
PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:224  

 **** Variables and constants ****

  ****  Section 002  Data  VXM$LEVEL

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    27-0-0/w UBIN        r     1 I                         25-0-0/w UBIN        r     1 NAME_SIZE
    26-0-0/w UBIN        r     1 PARENT_NAME_SIZE          30-0-0/w UBIN        r     1 SIZE
     0-0-0/c CHAR(81)    r     1 SUMMARY

  ****  Section 003 RoData VXM$LEVEL

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     2-0-0/w UBIN        r     1 HIGH_INDEX(0:1)
     0-0-0/w UBIN        r     1 LOW_INDEX(0:1)
     4-0-0/w UBIN        r     1 SIZE_INDEX(0:1)

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @CURR$                     6-0-0/w PTR         r     1 @CURRENT_LEVEL
     5-0-0/w PTR         r     1 @DESIRED_LEVEL             7-0-0/w PTR         r     1 @MORE_LEVELS
     3-0-0/w PTR         r     1 @START$                   10-0-0/w PTR         r     1 BACK$
    *0-0-0/w PTR         r     1 CURR$                     *0-0-0/w UBIN        r     1 CURRENT_LEVEL
    *0-0-0/w UBIN        r     1 DESIRED_LEVEL             11-0-0/w PTR         r     1 FORWARD$
    *0-0-0/w BIT         r     1 MORE_LEVELS               16-0-0/w UBIN        r     1 NEXT_LEVEL
    12-0-0/w PTR         r     1 OVERLAY$                  13-0-0/w PTR         r     1 P$
    15-0-0/w PTR         r     1 R$                        *0-0-0/w PTR         r     1 START$
    25-0-0/w SBIN        r     1 S_SIZE(0:2)
    17-0-0/w SBIN        r     1 S_START(0:2)
    22-0-0/w SBIN        r     1 S_STOP(0:2)

PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:225  
  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(432)   r     1 VX_MAP_LIT_LO_FPT_WRITE
     0-0-0/d STRC(432)   r     1 VX_MAP_LO_FPT_WRITE        0-0-0/w SBIN        r     1 VX_MAP_NUM
     0-0-0/w PTR         r     1 VX_MAP_TREE_START$         0-0-0/w STRC(1188)  r     1 VX_MBUF

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w ASTR(9)     r     1 T$C                        0-0-0/c ASTR(9)     r     1 T$C_UNAL
     0-0-0/h UBIN(18)    r     1 VX$HALF_A(0:0)
     0-0-0/w STRC(216)   r     1 VX$TREE_NODE


   Procedure VXM$LEVEL requires 335 words for executable code.
   Procedure VXM$LEVEL requires 30 words of local(AUTO) storage.
PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:226  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:227  
          MINI XREF LISTING

BACK$
     10845**DCL     11134<<ASSIGN  11135>>ASSIGN
CURR$
     10807**DCL         7--PROC    11104>>ASSIGN  11133>>ASSIGN  11164>>ASSIGN
CURRENT_LEVEL
     10809**DCL         7--PROC    11094>>IF      11163>>ASSIGN
DESIRED_LEVEL
     10808**DCL         7--PROC    11094>>IF      11129>>IF      11169<>CALL
FORWARD$
     10846**DCL     11168<<ASSIGN  11169<>CALL
HIGH_INDEX
     10870**DCL     11118<>CALL
I
     10874**DCL     11114<<DOINDEX 11115>>IF      11116>>CALL    11116>>CALL    11117>>ASSIGN  11117>>ASSIGN
     11117>>ASSIGN  11118>>CALL    11118>>CALL    11121>>CALLBLT 11123>>CALL    11123>>CALL
LOW_INDEX
     10869**DCL     11116<>CALL    11121>>CALLBLT
M$ERR
      5084**DCL-ENT 11186--CALL
M$MERC
      5128**DCL-ENT 11184--CALL
M$WRITE
      5073**DCL-ENT 11130--CALL    11140--CALL    11143--CALL    11149--CALL
MAP_IO_ERROR
     11184**LABEL   11130--CALLALT 11140--CALLALT 11143--CALLALT 11149--CALLALT
MERC_ERROR
     11189**LABEL   11184--CALLALT
MORE_LEVELS
     10810**DCL         7--PROC    11106<<ASSIGN  11169<>CALL
NAME_SIZE
     10872**DCL     11128<<ASSIGN  11138>>IF
NEXT_LEVEL
PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:228  
     10876**DCL     11163<<ASSIGN  11169<>CALL
OVERLAY$
     10847**DCL     11104<<ASSIGN  11105>>DOWHILE 11106>>IF      11107>>ASSIGN  11108>>ASSIGN  11109>>ASSIGN
     11110>>ASSIGN  11125>>ASSIGN  11151>>ASSIGN  11153<<ASSIGN  11155<<ASSIGN  11164<<ASSIGN  11165>>DOWHILE
     11166>>ASSIGN  11171>>ASSIGN  11173<<ASSIGN  11175<<ASSIGN
P$
     10849**DCL     11126<<ASSIGN  11127>>CALLBLT 11127>>CALLBLT 11128>>ASSIGN  11136<<ASSIGN  11137>>ASSIGN
     11141>>CALLBLT 11141>>CALLBLT 11147>>CALLBLT 11147>>CALLBLT
PARENT_NAME_SIZE
     10873**DCL     11137<<ASSIGN  11138>>IF      11141>>CALLBLT 11141>>CALLBLT 11147>>CALLBLT 11147>>CALLBLT
R$
     10851**DCL     11125<<ASSIGN  11126>>ASSIGN  11135<<ASSIGN  11136>>ASSIGN
SIZE
     10875**DCL     11111<<ASSIGN  11113<>CALL
SIZE_INDEX
     10871**DCL     11123<>CALL
START$
     10806**DCL         7--PROC    11134>>ASSIGN  11153>>ASSIGN  11168>>ASSIGN  11169<>CALL    11173>>ASSIGN
SUMMARY
     10827**DCL     11102--ASSIGN  11103<<CALLBLT 11113<>CALL    11116<>CALL    11118<>CALL    11121<<CALLBLT
     11123<>CALL    11127<<CALLBLT 11147<<CALLBLT
S_SIZE
     10926**DCL     11109<<ASSIGN  11110<<ASSIGN  11111>>ASSIGN  11111>>ASSIGN  11115>>IF      11117>>ASSIGN
     11123<>CALL
S_START
     10924**DCL     11107<<ASSIGN  11108<<ASSIGN  11116<>CALL    11117>>ASSIGN
S_STOP
     10925**DCL     11117<<ASSIGN  11118<>CALL
T$C.COUNT
     10779**DCL     10780--IMP-SIZ
T$C_UNAL.CHARS
     10783**DCL     11127>>CALLBLT 11141>>CALLBLT 11147>>CALLBLT
T$C_UNAL.COUNT
     10782**DCL     10783--IMP-SIZ 11127>>CALLBLT 11128>>ASSIGN  11137>>ASSIGN  11141>>CALLBLT 11147>>CALLBLT
VX$HALF_A
     10747**DCL     11126>>ASSIGN  11136>>ASSIGN
PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:229  
VX$TREE_NODE
     10960**DCL     11134--ASSIGN  11153--ASSIGN  11168--ASSIGN  11173--ASSIGN
VX$TREE_NODE.BACK#
     10984**DCL     11133>>ASSIGN
VX$TREE_NODE.DADDR
     10994**DCL     11107>>ASSIGN
VX$TREE_NODE.DSIZE
     10996**DCL     11109>>ASSIGN
VX$TREE_NODE.FORWARD#
     10986**DCL     11106>>IF      11166>>ASSIGN
VX$TREE_NODE.NAME$
     10962**DCL     11125--ASSIGN  11135--ASSIGN
VX$TREE_NODE.OVERLAY#
     10988**DCL     11151>>ASSIGN  11171>>ASSIGN
VX$TREE_NODE.PADDR
     10990**DCL     11108>>ASSIGN
VX$TREE_NODE.PSIZE
     10992**DCL     11110>>ASSIGN
VXD$B2C
     10901**DCL-ENT 11113--CALL    11116--CALL    11118--CALL    11123--CALL
VXE$MERC
     10896**DCL-ENT 11189--CALL
VXM$LEVEL
         7**PROC    11169--CALL
VX_BIAS.A
      9575**DCL      9576--REDEF
VX_CBUF.CHARS_A
      9509**DCL      9510--REDEF
VX_CONST_DCB.ACTPOS
     10691**DCL     10691--REDEF
VX_CONST_DCB.ARS#
     10650**DCL     10650--REDEF
VX_CONST_DCB.ATTR#
     10680**DCL     10680--REDEF   10682--REDEF
VX_CONST_DCB.BORROW
     10702**DCL     10702--REDEF   10702--REDEF   10702--REDEF
PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:230  
VX_CONST_DCB.EOMCHAR#
     10657**DCL     10658--REDEF
VX_CONST_DCB.FLDID
     10694**DCL     10695--REDEF
VX_CONST_DCB.FORM$
     10686**DCL     10686--REDEF
VX_CONST_DCB.FSECT
     10709**DCL     10709--REDEF
VX_CONST_DCB.FSN#
     10676**DCL     10676--REDEF   10676--REDEF   10677--REDEF
VX_CONST_DCB.HEADER$
     10685**DCL     10686--REDEF
VX_CONST_DCB.IXTNSIZE#
     10682**DCL     10683--REDEF
VX_CONST_DCB.LASTSTA$
     10666**DCL     10666--REDEF
VX_CONST_DCB.LVL
     10703**DCL     10703--REDEF
VX_CONST_DCB.NAME#.C
     10666**DCL     10667--REDEF
VX_CONST_DCB.NOEOF
     10698**DCL     10698--REDEF
VX_CONST_DCB.NRECS#
     10683**DCL     10683--REDEF
VX_CONST_DCB.NRECX
     10710**DCL     10710--REDEF
VX_CONST_DCB.OHDR
     10699**DCL     10699--REDEF
VX_CONST_DCB.ORG#
     10674**DCL     10675--REDEF
VX_CONST_DCB.PRECNO
     10707**DCL     10707--REDEF
VX_CONST_DCB.RCSZ
     10715**DCL     10715--REDEF
VX_CONST_DCB.RES#
     10668**DCL     10668--REDEF
PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:231  
VX_CONST_DCB.SETX
     10687**DCL     10687--REDEF
VX_CONST_DCB.TAB$
     10686**DCL     10686--REDEF
VX_CONST_DCB.TDA
     10706**DCL     10707--REDEF
VX_CONST_DCB.WSN#
     10668**DCL     10669--REDEF
VX_EBUF.CHARS_A
     10098**DCL     10099--REDEF
VX_EFIELD1.CHARS
     10107**DCL     10108--REDEF
VX_EFIELD2.CHARS
     10111**DCL     10112--REDEF
VX_EFIELD3.CHARS
     10115**DCL     10116--REDEF
VX_EI_KEY_BUF.KEY
     10491**DCL     10492--REDEF
VX_ERRORS
      9552**DCL      9563--REDEF
VX_ERRORS.CONFLICT_A
      9558**DCL      9559--REDEF
VX_ERRORS.UNSAT_A
      9554**DCL      9555--REDEF
VX_IMAGE_DATA.CPAGE#_A
      8689**DCL      8690--REDEF
VX_IMAGE_DATA.NODE_A$
      8701**DCL      8702--REDEF
VX_IMAGE_DATA.START_A$
      8693**DCL      8694--REDEF
VX_IMAGE_DATA.STOP_A$
      8697**DCL      8698--REDEF
VX_IMAGE_DS3.CPAGE#_A
      8758**DCL      8759--REDEF
VX_IMAGE_DS3.NODE_A$
      8770**DCL      8771--REDEF
PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:232  
VX_IMAGE_DS3.START_A$
      8762**DCL      8763--REDEF
VX_IMAGE_DS3.STOP_A$
      8766**DCL      8767--REDEF
VX_IMAGE_DS4.CPAGE#_A
      8781**DCL      8782--REDEF
VX_IMAGE_DS4.NODE_A$
      8793**DCL      8794--REDEF
VX_IMAGE_DS4.START_A$
      8785**DCL      8786--REDEF
VX_IMAGE_DS4.STOP_A$
      8789**DCL      8790--REDEF
VX_IMAGE_DS5.CPAGE#_A
      8804**DCL      8805--REDEF
VX_IMAGE_DS5.NODE_A$
      8816**DCL      8817--REDEF
VX_IMAGE_DS5.START_A$
      8808**DCL      8809--REDEF
VX_IMAGE_DS5.STOP_A$
      8812**DCL      8813--REDEF
VX_IMAGE_DS6.CPAGE#_A
      8827**DCL      8828--REDEF
VX_IMAGE_DS6.NODE_A$
      8839**DCL      8840--REDEF
VX_IMAGE_DS6.START_A$
      8831**DCL      8832--REDEF
VX_IMAGE_DS6.STOP_A$
      8835**DCL      8836--REDEF
VX_IMAGE_DS7.CPAGE#_A
      8850**DCL      8851--REDEF
VX_IMAGE_DS7.NODE_A$
      8862**DCL      8863--REDEF
VX_IMAGE_DS7.START_A$
      8854**DCL      8855--REDEF
VX_IMAGE_DS7.STOP_A$
      8858**DCL      8859--REDEF
PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:233  
VX_IMAGE_DS8.CPAGE#_A
      8873**DCL      8874--REDEF
VX_IMAGE_DS8.NODE_A$
      8885**DCL      8886--REDEF
VX_IMAGE_DS8.START_A$
      8877**DCL      8878--REDEF
VX_IMAGE_DS8.STOP_A$
      8881**DCL      8882--REDEF
VX_IMAGE_PROC.CPAGE#_A
      8712**DCL      8713--REDEF
VX_IMAGE_PROC.NODE_A$
      8724**DCL      8725--REDEF
VX_IMAGE_PROC.START_A$
      8716**DCL      8717--REDEF
VX_IMAGE_PROC.STOP_A$
      8720**DCL      8721--REDEF
VX_IMAGE_ROS.CPAGE#_A
      8735**DCL      8736--REDEF
VX_IMAGE_ROS.NODE_A$
      8747**DCL      8748--REDEF
VX_IMAGE_ROS.START_A$
      8739**DCL      8740--REDEF
VX_IMAGE_ROS.STOP_A$
      8743**DCL      8744--REDEF
VX_MAP_LIT_LO_FPT_WRITE
     11066**DCL     11130<>CALL    11140<>CALL    11149<>CALL
VX_MAP_LIT_LO_FPT_WRITE.BUF_
     11066**DCL     11102<<ASSIGN
VX_MAP_LIT_LO_FPT_WRITE.STATION_
     11068**DCL     11068--REDEF
VX_MAP_LIT_LO_FPT_WRITE.V.DVBYTE.VFC#
     11075**DCL     11075--REDEF
VX_MAP_LO_FPT_WRITE
     11035**DCL     11143<>CALL
VX_MAP_LO_FPT_WRITE.BUF_
     11035**DCL     11101<<ASSIGN
PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:234  
VX_MAP_LO_FPT_WRITE.STATION_
     11037**DCL     11037--REDEF
VX_MAP_LO_FPT_WRITE.V.DVBYTE.VFC#
     11044**DCL     11044--REDEF
VX_MAP_NUM
     11086**DCL     11133<<ASSIGN  11134>>ASSIGN  11151<<ASSIGN  11152>>IF      11153>>ASSIGN  11166<<ASSIGN
     11167>>IF      11168>>ASSIGN  11171<<ASSIGN  11172>>IF      11173>>ASSIGN
VX_MAP_TREE_START$
     11085**DCL     11126>>ASSIGN  11136>>ASSIGN
VX_MBUF
     11087**DCL     11101--ASSIGN
VX_MBUF.CHARS
     11088**DCL     11089--REDEF   11090--REDEF   11100<<ASSIGN  11141<<CALLBLT 11144<<ASSIGN
VX_M_VECTOR.F
      8540**DCL      8544--REDEF
VX_M_VECTOR_DP.F
      8575**DCL      8579--REDEF
VX_O.ACCTN_A$
      9704**DCL      9705--REDEF
VX_O.DCB_MATCH_A$
      9713**DCL      9714--REDEF
VX_O.DCB_MATCH_HIT_A
      9719**DCL      9720--REDEF
VX_O.FIDN_A$
      9698**DCL      9699--REDEF
VX_O.FID_A$
      9690**DCL      9691--REDEF
VX_O.INCLUDE_A$
      9710**DCL      9711--REDEF
VX_O.MAP_A
      9684**DCL      9685--REDEF
VX_O.NODCB_A
      9741**DCL      9742--REDEF
VX_O.NUM_A
      9629**DCL      9631--REDEF
VX_O.OPT_A
PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:235  
      9729**DCL      9730--REDEF
VX_O.PRIV_A
      9645**DCL      9647--REDEF
VX_O.SIN_A
      9598**DCL      9599--REDEF
VX_O.TCB_A
      9725**DCL      9726--REDEF
VX_OD.ACCTN_A$
      9902**DCL      9903--REDEF
VX_OD.DCB_MATCH_A$
      9911**DCL      9912--REDEF
VX_OD.FIDN_A$
      9896**DCL      9897--REDEF
VX_OD.FID_A$
      9888**DCL      9889--REDEF
VX_OD.INCLUDE_A$
      9908**DCL      9909--REDEF
VX_OD.MAP_A
      9882**DCL      9883--REDEF
VX_OD.NODCB_A
      9926**DCL      9927--REDEF
VX_OD.NUM_A
      9829**DCL      9830--REDEF
VX_OD.PRIV_A
      9844**DCL      9845--REDEF
VX_OD.SIN_A
      9798**DCL      9799--REDEF
VX_OD.VECTOR_A$
      9917**DCL      9918--REDEF
VX_OL.MAX_A
      9773**DCL      9775--REDEF
VX_OL.MIN_A
      9758**DCL      9759--REDEF
VX_ON.ACCTN_A$
     10047**DCL     10049--REDEF
VX_ON.DCB_MATCH_A$
PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:236  
     10058**DCL     10060--REDEF
VX_ON.FIDN_A$
     10040**DCL     10042--REDEF
VX_ON.FID_A$
     10031**DCL     10033--REDEF
VX_ON.INCLUDE_A$
     10054**DCL     10056--REDEF
VX_ON.MAP_A
     10024**DCL     10026--REDEF
VX_ON.NODCB_A$
     10074**DCL     10075--REDEF
VX_ON.NUM_A
      9969**DCL      9971--REDEF
VX_ON.PRIV_A
      9985**DCL      9987--REDEF
VX_ON.SIN_A
      9937**DCL      9939--REDEF
VX_ON.VECTOR_A$
     10065**DCL     10066--REDEF
VX_OUHEAD.VERSION
      9384**DCL      9386--REDEF
VX_OU_HEAD
      9327**DCL      9366--REDEF
VX_OU_HEAD.REC_A
      9339**DCL      9342--REDEF
VX_O_KEY_BUF.FORM0
      8588**DCL      8591--REDEF    8598--REDEF
VX_O_KEY_BUF_L.FORM0
      8611**DCL      8614--REDEF    8621--REDEF
VX_PASS2_REF.OU.L_START
     10277**DCL     10282--REDEF
VX_PASS2_REF.OU.L_STOP
     10283**DCL     10288--REDEF
VX_PASS2_REF.OU.MAX
     10271**DCL     10276--REDEF
VX_PASS2_REF.OU.SIZE
PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:237  
     10289**DCL     10294--REDEF
VX_PASS2_REF.SAT.COUNT
     10316**DCL     10322--REDEF
VX_PASS2_REF.SAT.ENT_SIZE
     10323**DCL     10329--REDEF
VX_PASS2_REF.SAT.L_START
     10302**DCL     10308--REDEF
VX_PASS2_REF.SAT.L_STOP
     10309**DCL     10315--REDEF
VX_PASS2_REF.SAT.MAX
     10296**DCL     10301--REDEF
VX_PASS2_REF.UNSAT.L_START
     10364**DCL     10369--REDEF
VX_PASS2_REF.UNSAT.L_STOP
     10370**DCL     10375--REDEF
VX_PASS2_REF.UNSAT.L_WHERE
     10376**DCL     10381--REDEF
VX_PASS2_REF.UNSAT.MAX
     10358**DCL     10363--REDEF
VX_PASS2_REF.UNSAT.PAGE#
     10388**DCL     10393--REDEF
VX_PASS2_REF.UNSAT.SIZE
     10382**DCL     10387--REDEF
VX_PHRASE.PHRASE
      9790**DCL      9792--REDEF
VX_PROGRAM_BIAS.A
      9568**DCL      9569--REDEF
VX_R_KEY_BUF.FORM0
      8637**DCL      8641--REDEF    8647--REDEF
VX_SD.A
      8265**DCL      8266--REDEF
VX_SPC.B$.MINE
     10459**DCL     10465--REDEF
VX_SPC.B$.NAME
     10438**DCL     10444--REDEF
VX_SPC.B$.SKIP
PL6.E3A0      #003=VXM$LEVEL File=VXM$MAP.:E05TSI                                WED 07/30/97 08:21 Page:238  
     10452**DCL     10458--REDEF
VX_SPC.B$.VALUE
     10445**DCL     10451--REDEF
VX_SPC.SEG.NAME
     10407**DCL     10413--REDEF
VX_SPC.SEG.VALUE
     10414**DCL     10420--REDEF
VX_TSX0_OVERLAY.H
     10182**DCL     10185--REDEF

PL6.E3A0      #004=VXX$CON File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:22 Page:239  
      905        1        /*T***********************************************************/
      906        2        /*T*                                                         */
      907        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      908        4        /*T*                                                         */
      909        5        /*T***********************************************************/
      910        6        VXX$CON: PROC  ASYNC;
      911        7
      912        8        %INCLUDE VX_INC_C;
      913    10724        %INCLUDE B$JIT;
      914    11014        %F$DCB;
      915    11071    1   DCL VXF$CLOSE       ENTRY(3);
      916    11072    1   DCL STEPCC     UBIN(36)  ALIGNED   AUTO;
      917    11073        %LIST;
      918    11074        %FPT_EXIT(FPTN=FPT_EXIT,
      919    11075                  STCLASS=STATIC);
             11076        %LSET LISTDIR='0'B;
             11086    1   DCL 1 FPT_EXIT STATIC DALIGNED,2 V_ BIT(72)INIT(VECTOR(FPT_EXIT.V))/**/,2 CODE_ BIT(
             11086            72)INIT(VECTOR(NIL))/**/,2
             11087    1   V DALIGNED,3 STEPCC# UBIN(9)UNAL INIT(0)/**/,3 CODE# REDEF STEPCC# BIT(9),3 * BIT(27
             11087            )INIT('0'B)
             11088    1   /**/,3 * BIT(36)INIT('0'B)/**/;
      920    11090
      921    11091
      922    11092
      923    11093    1         IF M$RF$ -> F$DCB.FCD# THEN CALL VXF$CLOSE( VX_RUF$, @RF, @SAVE );
      924    11094    1         IF M$LO$ -> F$DCB.FCD# THEN CALL VXF$CLOSE( VX_LOF$, @LO, @SAVE );
      925    11095    1         IF VX_ONLINE = @YES THEN CALL M$EXIT;
      926    11096    1         STEPCC = B$JIT$ -> B$JIT.STEPCC;
      927    11097    1         FPT_EXIT.V.STEPCC# = STEPCC;
      928    11098    2         IF STEPCC >= 6 THEN DO;
      929    11099    2             CALL M$XXX(FPT_EXIT);
      930    11100    2            END;
      931    11101    2         ELSE IF STEPCC >= 4 THEN DO;
      932    11102    2                 CALL M$ERR(FPT_EXIT);
      933    11103    2                END;
      934    11104    1             ELSE CALL M$EXIT(FPT_EXIT);
      935    11105    1   END VXX$CON;
PL6.E3A0      #004=VXX$CON File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:22 Page:240  

PL6.E3A0      #004=VXX$CON File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:22 Page:241  
--  Include file information  --

   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   F_DCB_D.:E05TOU  is referenced.
   VX_DCB_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_FIXED_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VX_MACRO_C.:E05TOU  is referenced.
   VX_PERR_C.:E05TOU  is referenced.
   VX_SUBS_C.:E05TOU  is referenced.
   VX_SWITCH_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   VX_INC_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VXX$CON.

   Procedure VXX$CON requires 47 words for executable code.
   Procedure VXX$CON requires 4 words of local(AUTO) storage.

    No errors detected in file VXM$MAP.:E05TSI    .

PL6.E3A0      #004=VXX$CON File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:22 Page:242  

 Object Unit name= VXX$CON                                    File name= VXM$MAP.:E05TOU
 UTS= JUL 30 '97 08:22:25.16 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  LblCom even  none    96    140  VX_CONST_DCB
    2   Data  even  none     6      6  VXX$CON
    3   Proc  even  none    47     57  VXX$CON
    4  RoData even  none     6      6  VXX$CON

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     3      0   yes            yes     Async       0  VXX$CON

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       3 VXF$CLOSE
                       nStd      0 X66_AAUTO
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AARET
PL6.E3A0      #004=VXX$CON File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:22 Page:243  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B$JIT$                                VX_OU_HEAD
     VX_RUF$                               VX_LOF$                               VX_ERRORS
     VX_ONLINE                             M$LO$                                 M$RF$
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #004=VXX$CON File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:22 Page:244  


      905        1        /*T***********************************************************/
      906        2        /*T*                                                         */
      907        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      908        4        /*T*                                                         */
      909        5        /*T***********************************************************/
      910        6        VXX$CON: PROC  ASYNC;

      6  3 000000   000000 700200 xent  VXX$CON      TSX0  ! X66_AAUTO
         3 000001   000004 000000                    ZERO    4,0

      911        7
      912        8        %INCLUDE VX_INC_C;
      913    10724        %INCLUDE B$JIT;
      914    11014        %F$DCB;
      915    11071    1   DCL VXF$CLOSE       ENTRY(3);
      916    11072    1   DCL STEPCC     UBIN(36)  ALIGNED   AUTO;
      917    11073        %LIST;
      918    11074        %FPT_EXIT(FPTN=FPT_EXIT,
      919    11075                  STCLASS=STATIC);
             11076        %LSET LISTDIR='0'B;
             11086    1  DCL 1 FPT_EXIT STATIC DALIGNED,2 V_ BIT(72)INIT(VECTOR(FPT_EXIT.V))/**/,2 CODE_ BIT(
             11086            72)INIT(VECTOR(NIL))/**/,2
             11087    1  V DALIGNED,3 STEPCC# UBIN(9)UNAL INIT(0)/**/,3 CODE# REDEF STEPCC# BIT(9),3 * BIT(27
             11087            )INIT('0'B)
             11088    1   /**/,3 * BIT(36)INIT('0'B)/**/;
      920    11090
      921    11091
      922    11092
      923    11093    1         IF M$RF$ -> F$DCB.FCD# THEN CALL VXF$CLOSE( VX_RUF$, @RF, @SAVE );

  11093  3 000002   000000 470400 xsym               LDP0    M$RF$
         3 000003   000031 236100                    LDQ     25,,PR0
         3 000004   020000 316007                    CANQ    8192,DL
         3 000005   000012 600000 3                  TZE     s:11094

  11093  3 000006   000000 630400 4                  EPPR0   0
PL6.E3A0      #004=VXX$CON File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:22 Page:245  
         3 000007   000021 631400 xsym               EPPR1   B_VECTNIL+17
         3 000010   000000 701000 xent               TSX1    VXF$CLOSE
         3 000011   000000 011000                    NOP     0

      924    11094    1         IF M$LO$ -> F$DCB.FCD# THEN CALL VXF$CLOSE( VX_LOF$, @LO, @SAVE );

  11094  3 000012   000000 470400 xsym               LDP0    M$LO$
         3 000013   000031 236100                    LDQ     25,,PR0
         3 000014   020000 316007                    CANQ    8192,DL
         3 000015   000022 600000 3                  TZE     s:11095

  11094  3 000016   000003 630400 4                  EPPR0   3
         3 000017   000021 631400 xsym               EPPR1   B_VECTNIL+17
         3 000020   000000 701000 xent               TSX1    VXF$CLOSE
         3 000021   000000 011000                    NOP     0

      925    11095    1         IF VX_ONLINE = @YES THEN CALL M$EXIT;

  11095  3 000022   000000 235000 xsym               LDA     VX_ONLINE
         3 000023   000001 115007                    CMPA    1,DL
         3 000024   000027 601000 3                  TNZ     s:11096

  11095  3 000025   000001 713400                    CLIMB   exit
         3 000026   000000 401760                    pmme    nvectors=0

      926    11096    1         STEPCC = B$JIT$ -> B$JIT.STEPCC;

  11096  3 000027   000000 470400 xsym               LDP0    B$JIT$
         3 000030   000316 236100                    LDQ     206,,PR0
         3 000031   000022 772000                    QRL     18
         3 000032   000777 376007                    ANQ     511,DL
         3 000033   200003 756100                    STQ     STEPCC,,AUTO

      927    11097    1         FPT_EXIT.V.STEPCC# = STEPCC;

  11097  3 000034   000033 736000                    QLS     27
         3 000035   000004 552040 2                  STBQ    FPT_EXIT+4,'40'O
PL6.E3A0      #004=VXX$CON File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:22 Page:246  

      928    11098    2         IF STEPCC >= 6 THEN DO;

  11098  3 000036   200003 235100                    LDA     STEPCC,,AUTO
         3 000037   000006 115007                    CMPA    6,DL
         3 000040   000045 602000 3                  TNC     s:11101

      929    11099    2             CALL M$XXX(FPT_EXIT);

  11099  3 000041   000000 630400 2                  EPPR0   FPT_EXIT
         3 000042   000003 713400                    CLIMB   3
         3 000043   400400 401760                    pmme    nvectors=2

      930    11100    2            END;

  11100  3 000044   000056 710000 3                  TRA     s:11105

      931    11101    2         ELSE IF STEPCC >= 4 THEN DO;

  11101  3 000045   000004 115007                    CMPA    4,DL
         3 000046   000053 602000 3                  TNC     s:11104

      932    11102    2                 CALL M$ERR(FPT_EXIT);

  11102  3 000047   000000 630400 2                  EPPR0   FPT_EXIT
         3 000050   000002 713400                    CLIMB   err
         3 000051   400400 401760                    pmme    nvectors=2

      933    11103    2                END;

  11103  3 000052   000056 710000 3                  TRA     s:11105

      934    11104    1             ELSE CALL M$EXIT(FPT_EXIT);

  11104  3 000053   000000 630400 2                  EPPR0   FPT_EXIT
         3 000054   000001 713400                    CLIMB   exit
         3 000055   400400 401760                    pmme    nvectors=2
PL6.E3A0      #004=VXX$CON File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:22 Page:247  

      935    11105    1   END VXX$CON;

  11105  3 000056   000000 702200 xent               TSX2  ! X66_AARET

PL6.E3A0      #004=VXX$CON File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:22 Page:248  
--  Include file information  --

   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   F_DCB_D.:E05TOU  is referenced.
   VX_DCB_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   VX_FIXED_R.:E05TOU  cannot be made into a system file and is referenced.
   XU_MACRO_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   VX_MACRO_C.:E05TOU  is referenced.
   VX_PERR_C.:E05TOU  is referenced.
   VX_SUBS_C.:E05TOU  is referenced.
   VX_SWITCH_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   VX_INC_C.:E05TOU  is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure VXX$CON.
PL6.E3A0      #004=VXX$CON File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:22 Page:249  

 **** Variables and constants ****

  ****  Section 002  Data  VXX$CON

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(216)   r     1 FPT_EXIT

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w UBIN        r     1 STEPCC

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$                     0-0-0/w PTR         r     1 M$LO$
     0-0-0/w PTR         r     1 M$RF$                      0-0-0/w PTR         r     1 VX_LOF$
     0-0-0/w UBIN        r     1 VX_ONLINE                  0-0-0/w PTR         r     1 VX_RUF$

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(8856)  r     1 B$JIT                      0-0-0/d ASTR(3528)  r     1 F$DCB


   Procedure VXX$CON requires 47 words for executable code.
   Procedure VXX$CON requires 4 words of local(AUTO) storage.
PL6.E3A0      #004=VXX$CON File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:22 Page:250  

    No errors detected in file VXM$MAP.:E05TSI    .
PL6.E3A0      #004=VXX$CON File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:22 Page:251  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=VXX$CON File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:22 Page:252  
          MINI XREF LISTING

B$JIT.CPFLAGS1.SLEAZE
     10832**DCL     10832--REDEF
B$JIT.ERR.MID
     10739**DCL     10739--REDEF
B$JIT.JRESPEAK
     10900**DCL     10901--REDEF
B$JIT.ORIGINATOR_PORT.FROM_CR
     11009**DCL     11009--REDEF   11010--REDEF
B$JIT.PNR
     10913**DCL     10913--REDEF
B$JIT.STEPCC
     10965**DCL     11096>>ASSIGN
B$JIT.TSLINE
     11007**DCL     11008--REDEF
B$JIT$
      8908**DCL     10733--IMP-PTR 11096>>ASSIGN
F$DCB.ACTPOS
     11047**DCL     11047--REDEF
F$DCB.ARS#
     11021**DCL     11021--REDEF
F$DCB.ATTR
     11040**DCL     11041--REDEF
F$DCB.BORROW
     11055**DCL     11055--REDEF   11055--REDEF   11055--REDEF
F$DCB.DCBNAME.L
     11069**DCL     11069--IMP-SIZ
F$DCB.EOMCHAR#
     11025**DCL     11025--REDEF
F$DCB.FCD#
     11034**DCL     11093>>IF      11094>>IF
F$DCB.FLDID
     11050**DCL     11050--REDEF
PL6.E3A0      #004=VXX$CON File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:22 Page:253  
F$DCB.FORM$
     11044**DCL     11044--REDEF
F$DCB.FSECT
     11060**DCL     11060--REDEF
F$DCB.FSN#
     11037**DCL     11037--REDEF   11037--REDEF   11038--REDEF
F$DCB.HEADER$
     11043**DCL     11043--REDEF
F$DCB.IXTNSIZE#
     11041**DCL     11041--REDEF
F$DCB.LASTSTA$
     11030**DCL     11030--REDEF
F$DCB.LVL
     11056**DCL     11056--REDEF
F$DCB.NAME#.C
     11031**DCL     11031--REDEF
F$DCB.NOEOF
     11053**DCL     11053--REDEF
F$DCB.NRECS#
     11042**DCL     11042--REDEF
F$DCB.NRECX
     11061**DCL     11061--REDEF
F$DCB.OHDR
     11053**DCL     11053--REDEF
F$DCB.ORG#
     11036**DCL     11036--REDEF
F$DCB.PRECNO
     11059**DCL     11059--REDEF
F$DCB.RCSZ
     11065**DCL     11065--REDEF
F$DCB.RES#
     11032**DCL     11032--REDEF
F$DCB.SETX
     11044**DCL     11044--REDEF
F$DCB.TAB$
     11044**DCL     11044--REDEF
PL6.E3A0      #004=VXX$CON File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:22 Page:254  
F$DCB.TDA
     11058**DCL     11059--REDEF
F$DCB.WSN#
     11032**DCL     11032--REDEF
FPT_EXIT
     11086**DCL     11099<>CALL    11102<>CALL    11104<>CALL
FPT_EXIT.V
     11086**DCL     11086--DCLINIT
FPT_EXIT.V.STEPCC#
     11087**DCL     11087--REDEF   11097<<ASSIGN
M$ERR
      5083**DCL-ENT 11102--CALL
M$EXIT
      5083**DCL-ENT 11095--CALL    11104--CALL
M$LO$
     10643**DCL     11094>>IF
M$RF$
     10645**DCL     11093>>IF
M$XXX
      5083**DCL-ENT 11099--CALL
STEPCC
     11072**DCL     11096<<ASSIGN  11097>>ASSIGN  11098>>IF      11101>>IF
VXF$CLOSE
     11071**DCL-ENT 11093--CALL    11094--CALL
VX_BIAS.A
      9574**DCL      9575--REDEF
VX_CBUF.CHARS_A
      9508**DCL      9509--REDEF
VX_CONST_DCB.ACTPOS
     10690**DCL     10690--REDEF
VX_CONST_DCB.ARS#
     10649**DCL     10649--REDEF
VX_CONST_DCB.ATTR#
     10679**DCL     10679--REDEF   10681--REDEF
VX_CONST_DCB.BORROW
     10701**DCL     10701--REDEF   10701--REDEF   10701--REDEF
PL6.E3A0      #004=VXX$CON File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:22 Page:255  
VX_CONST_DCB.EOMCHAR#
     10656**DCL     10657--REDEF
VX_CONST_DCB.FLDID
     10693**DCL     10694--REDEF
VX_CONST_DCB.FORM$
     10685**DCL     10685--REDEF
VX_CONST_DCB.FSECT
     10708**DCL     10708--REDEF
VX_CONST_DCB.FSN#
     10675**DCL     10675--REDEF   10675--REDEF   10676--REDEF
VX_CONST_DCB.HEADER$
     10684**DCL     10685--REDEF
VX_CONST_DCB.IXTNSIZE#
     10681**DCL     10682--REDEF
VX_CONST_DCB.LASTSTA$
     10665**DCL     10665--REDEF
VX_CONST_DCB.LVL
     10702**DCL     10702--REDEF
VX_CONST_DCB.NAME#.C
     10665**DCL     10666--REDEF
VX_CONST_DCB.NOEOF
     10697**DCL     10697--REDEF
VX_CONST_DCB.NRECS#
     10682**DCL     10682--REDEF
VX_CONST_DCB.NRECX
     10709**DCL     10709--REDEF
VX_CONST_DCB.OHDR
     10698**DCL     10698--REDEF
VX_CONST_DCB.ORG#
     10673**DCL     10674--REDEF
VX_CONST_DCB.PRECNO
     10706**DCL     10706--REDEF
VX_CONST_DCB.RCSZ
     10714**DCL     10714--REDEF
VX_CONST_DCB.RES#
     10667**DCL     10667--REDEF
PL6.E3A0      #004=VXX$CON File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:22 Page:256  
VX_CONST_DCB.SETX
     10686**DCL     10686--REDEF
VX_CONST_DCB.TAB$
     10685**DCL     10685--REDEF
VX_CONST_DCB.TDA
     10705**DCL     10706--REDEF
VX_CONST_DCB.WSN#
     10667**DCL     10668--REDEF
VX_EBUF.CHARS_A
     10097**DCL     10098--REDEF
VX_EFIELD1.CHARS
     10106**DCL     10107--REDEF
VX_EFIELD2.CHARS
     10110**DCL     10111--REDEF
VX_EFIELD3.CHARS
     10114**DCL     10115--REDEF
VX_EI_KEY_BUF.KEY
     10490**DCL     10491--REDEF
VX_ERRORS
      9551**DCL      9562--REDEF
VX_ERRORS.CONFLICT_A
      9557**DCL      9558--REDEF
VX_ERRORS.UNSAT_A
      9553**DCL      9554--REDEF
VX_IMAGE_DATA.CPAGE#_A
      8688**DCL      8689--REDEF
VX_IMAGE_DATA.NODE_A$
      8700**DCL      8701--REDEF
VX_IMAGE_DATA.START_A$
      8692**DCL      8693--REDEF
VX_IMAGE_DATA.STOP_A$
      8696**DCL      8697--REDEF
VX_IMAGE_DS3.CPAGE#_A
      8757**DCL      8758--REDEF
VX_IMAGE_DS3.NODE_A$
      8769**DCL      8770--REDEF
PL6.E3A0      #004=VXX$CON File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:22 Page:257  
VX_IMAGE_DS3.START_A$
      8761**DCL      8762--REDEF
VX_IMAGE_DS3.STOP_A$
      8765**DCL      8766--REDEF
VX_IMAGE_DS4.CPAGE#_A
      8780**DCL      8781--REDEF
VX_IMAGE_DS4.NODE_A$
      8792**DCL      8793--REDEF
VX_IMAGE_DS4.START_A$
      8784**DCL      8785--REDEF
VX_IMAGE_DS4.STOP_A$
      8788**DCL      8789--REDEF
VX_IMAGE_DS5.CPAGE#_A
      8803**DCL      8804--REDEF
VX_IMAGE_DS5.NODE_A$
      8815**DCL      8816--REDEF
VX_IMAGE_DS5.START_A$
      8807**DCL      8808--REDEF
VX_IMAGE_DS5.STOP_A$
      8811**DCL      8812--REDEF
VX_IMAGE_DS6.CPAGE#_A
      8826**DCL      8827--REDEF
VX_IMAGE_DS6.NODE_A$
      8838**DCL      8839--REDEF
VX_IMAGE_DS6.START_A$
      8830**DCL      8831--REDEF
VX_IMAGE_DS6.STOP_A$
      8834**DCL      8835--REDEF
VX_IMAGE_DS7.CPAGE#_A
      8849**DCL      8850--REDEF
VX_IMAGE_DS7.NODE_A$
      8861**DCL      8862--REDEF
VX_IMAGE_DS7.START_A$
      8853**DCL      8854--REDEF
VX_IMAGE_DS7.STOP_A$
      8857**DCL      8858--REDEF
PL6.E3A0      #004=VXX$CON File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:22 Page:258  
VX_IMAGE_DS8.CPAGE#_A
      8872**DCL      8873--REDEF
VX_IMAGE_DS8.NODE_A$
      8884**DCL      8885--REDEF
VX_IMAGE_DS8.START_A$
      8876**DCL      8877--REDEF
VX_IMAGE_DS8.STOP_A$
      8880**DCL      8881--REDEF
VX_IMAGE_PROC.CPAGE#_A
      8711**DCL      8712--REDEF
VX_IMAGE_PROC.NODE_A$
      8723**DCL      8724--REDEF
VX_IMAGE_PROC.START_A$
      8715**DCL      8716--REDEF
VX_IMAGE_PROC.STOP_A$
      8719**DCL      8720--REDEF
VX_IMAGE_ROS.CPAGE#_A
      8734**DCL      8735--REDEF
VX_IMAGE_ROS.NODE_A$
      8746**DCL      8747--REDEF
VX_IMAGE_ROS.START_A$
      8738**DCL      8739--REDEF
VX_IMAGE_ROS.STOP_A$
      8742**DCL      8743--REDEF
VX_LOF$
      9542**DCL     11094<>CALL
VX_M_VECTOR.F
      8539**DCL      8543--REDEF
VX_M_VECTOR_DP.F
      8574**DCL      8578--REDEF
VX_O.ACCTN_A$
      9703**DCL      9704--REDEF
VX_O.DCB_MATCH_A$
      9712**DCL      9713--REDEF
VX_O.DCB_MATCH_HIT_A
      9718**DCL      9719--REDEF
PL6.E3A0      #004=VXX$CON File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:22 Page:259  
VX_O.FIDN_A$
      9697**DCL      9698--REDEF
VX_O.FID_A$
      9689**DCL      9690--REDEF
VX_O.INCLUDE_A$
      9709**DCL      9710--REDEF
VX_O.MAP_A
      9683**DCL      9684--REDEF
VX_O.NODCB_A
      9740**DCL      9741--REDEF
VX_O.NUM_A
      9628**DCL      9630--REDEF
VX_O.OPT_A
      9728**DCL      9729--REDEF
VX_O.PRIV_A
      9644**DCL      9646--REDEF
VX_O.SIN_A
      9597**DCL      9598--REDEF
VX_O.TCB_A
      9724**DCL      9725--REDEF
VX_OD.ACCTN_A$
      9901**DCL      9902--REDEF
VX_OD.DCB_MATCH_A$
      9910**DCL      9911--REDEF
VX_OD.FIDN_A$
      9895**DCL      9896--REDEF
VX_OD.FID_A$
      9887**DCL      9888--REDEF
VX_OD.INCLUDE_A$
      9907**DCL      9908--REDEF
VX_OD.MAP_A
      9881**DCL      9882--REDEF
VX_OD.NODCB_A
      9925**DCL      9926--REDEF
VX_OD.NUM_A
      9828**DCL      9829--REDEF
PL6.E3A0      #004=VXX$CON File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:22 Page:260  
VX_OD.PRIV_A
      9843**DCL      9844--REDEF
VX_OD.SIN_A
      9797**DCL      9798--REDEF
VX_OD.VECTOR_A$
      9916**DCL      9917--REDEF
VX_OL.MAX_A
      9772**DCL      9774--REDEF
VX_OL.MIN_A
      9757**DCL      9758--REDEF
VX_ON.ACCTN_A$
     10046**DCL     10048--REDEF
VX_ON.DCB_MATCH_A$
     10057**DCL     10059--REDEF
VX_ON.FIDN_A$
     10039**DCL     10041--REDEF
VX_ON.FID_A$
     10030**DCL     10032--REDEF
VX_ON.INCLUDE_A$
     10053**DCL     10055--REDEF
VX_ON.MAP_A
     10023**DCL     10025--REDEF
VX_ON.NODCB_A$
     10073**DCL     10074--REDEF
VX_ON.NUM_A
      9968**DCL      9970--REDEF
VX_ON.PRIV_A
      9984**DCL      9986--REDEF
VX_ON.SIN_A
      9936**DCL      9938--REDEF
VX_ON.VECTOR_A$
     10064**DCL     10065--REDEF
VX_ONLINE
      9594**DCL     11095>>IF
VX_OUHEAD.VERSION
      9383**DCL      9385--REDEF
PL6.E3A0      #004=VXX$CON File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:22 Page:261  
VX_OU_HEAD
      9326**DCL      9365--REDEF
VX_OU_HEAD.REC_A
      9338**DCL      9341--REDEF
VX_O_KEY_BUF.FORM0
      8587**DCL      8590--REDEF    8597--REDEF
VX_O_KEY_BUF_L.FORM0
      8610**DCL      8613--REDEF    8620--REDEF
VX_PASS2_REF.OU.L_START
     10276**DCL     10281--REDEF
VX_PASS2_REF.OU.L_STOP
     10282**DCL     10287--REDEF
VX_PASS2_REF.OU.MAX
     10270**DCL     10275--REDEF
VX_PASS2_REF.OU.SIZE
     10288**DCL     10293--REDEF
VX_PASS2_REF.SAT.COUNT
     10315**DCL     10321--REDEF
VX_PASS2_REF.SAT.ENT_SIZE
     10322**DCL     10328--REDEF
VX_PASS2_REF.SAT.L_START
     10301**DCL     10307--REDEF
VX_PASS2_REF.SAT.L_STOP
     10308**DCL     10314--REDEF
VX_PASS2_REF.SAT.MAX
     10295**DCL     10300--REDEF
VX_PASS2_REF.UNSAT.L_START
     10363**DCL     10368--REDEF
VX_PASS2_REF.UNSAT.L_STOP
     10369**DCL     10374--REDEF
VX_PASS2_REF.UNSAT.L_WHERE
     10375**DCL     10380--REDEF
VX_PASS2_REF.UNSAT.MAX
     10357**DCL     10362--REDEF
VX_PASS2_REF.UNSAT.PAGE#
     10387**DCL     10392--REDEF
PL6.E3A0      #004=VXX$CON File=VXM$MAP.:E05TSI                                  WED 07/30/97 08:22 Page:262  
VX_PASS2_REF.UNSAT.SIZE
     10381**DCL     10386--REDEF
VX_PHRASE.PHRASE
      9789**DCL      9791--REDEF
VX_PROGRAM_BIAS.A
      9567**DCL      9568--REDEF
VX_RUF$
      9541**DCL     11093<>CALL
VX_R_KEY_BUF.FORM0
      8636**DCL      8640--REDEF    8646--REDEF
VX_SD.A
      8264**DCL      8265--REDEF
VX_SPC.B$.MINE
     10458**DCL     10464--REDEF
VX_SPC.B$.NAME
     10437**DCL     10443--REDEF
VX_SPC.B$.SKIP
     10451**DCL     10457--REDEF
VX_SPC.B$.VALUE
     10444**DCL     10450--REDEF
VX_SPC.SEG.NAME
     10406**DCL     10412--REDEF
VX_SPC.SEG.VALUE
     10413**DCL     10419--REDEF
VX_TSX0_OVERLAY.H
     10181**DCL     10184--REDEF
