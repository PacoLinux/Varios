VERSION E05

PL6.E3A0      #001=FKA$ABORT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:31 Page:1    
        1        1        /*M* FKA$ALTKEY - Routines to handle LOAD mode for alternate indexes */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* CRT=1,CTI=4,DCI=6,SQB,ECI=3,CSI=3,IPC,DIN=2,SDI=3 */
        8        8        /*P*     NAME:     FKA$ALTKEY
        9        9                 PURPOSE:  To rebuild the alternate indexes of a file
       10       10        */
       11       11        /*F*     NAME:     FKA$ABORT
       12       12                 PURPOSE:  To handle aborts for ALTKEY
       13       13        */
       14       14        /*D*     NAME:     FKA$ABORT
       15       15                 CALL:     CALL FKA$ABORT
       16       16                 DESCRIPTION:
       17       17
       18       18                      This is a general abort routine for handling
       19       19                 unexpected traps, or monitor altreturns.  Exit control is
       20       20                 reset, so we don't go through this again. The file is closed.
       21       21                 We'll ignore any errors from the close on the assumption
       22       22                 that the original error is at least as important as any close
       23       23                 error.  If we are running in user domain, give the user an
       24       24                 error message.  Then do an M$XXX with the appropriate error
       25       25                 code.  If this is a monitor ALTKEY, the M$XXX will cause the
       26       26                 M$CLOSE to altret with whatever error we pass.
       27       27        */
       28       28         %EJECT;
PL6.E3A0      #001=FKA$ABORT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:31 Page:2    
       29       29        FKA$ABORT: PROC;
       30       30         %INCLUDE CP_6;
       31      111         %INCLUDE CP_6_SUBS;
       32      651         %INCLUDE FKA_DATA_R;
       33      667         %INCLUDE FK_DATA_C;
       34      744        /* */
       35      745         %FPT_XCON(FPTN=RESET_XCON, STCLASS=CONSTANT);
       36      759         %FPT_XXX(CODE=ERRCODE, STEPCC=ERROR, STCLASS=CONSTANT);
       37      774         %B$TCB;
       38      777         %B$ALT;
       39      785         %FKA$ERR(FPTN=CLOSERR,STCLASS=" ");
       40      791        /* */
       41      792    1     DCL FKA$CLOSE ENTRY(1) ALTRET;
       42      793    1     DCL XUR$ERRMSG ENTRY(7) ALTRET;
       43      794        /* */
       44      795    1     DCL ERRCODE BIT(36) STATIC ALIGNED;
       45      796    1     DCL DCB# UBIN;
       46      797    1     DCL B$TCB$ PTR SYMREF;
       47      798        /* */
       48      799    1           ERRCODE=B$TCB$->B$TCB.ALT$->B$ALT.ERR;
       49      800    1           DCB#=B$TCB$->B$TCB.ALT$->B$ALT.DCB#;
       50      801
       51      802    1           CALL M$XCON(RESET_XCON);
       52      803
       53      804    1           CALL FKA$CLOSE(CLOSERR) ALTRET(IGNORE);
       54      805
       55      806    1   IGNORE: ;
       56      807    1           IF FKA_MON = %NO# THEN
       57      808    1              CALL XUR$ERRMSG(ERRCODE, DCB#);
       58      809    1           CALL M$XXX(FPT_XXX);
       59      810    1   END FKA$ABORT;
       60      811         %EOD;

PL6.E3A0      #001=FKA$ABORT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:31 Page:3    
--  Include file information  --

   FK_DATA_C.:E05TOU  is referenced.
   FKA_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure FKA$ABORT.

   Procedure FKA$ABORT requires 32 words for executable code.
   Procedure FKA$ABORT requires 8 words of local(AUTO) storage.

PL6.E3A0      #001=FKA$ABORT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:31 Page:4    

 Object Unit name= FKA$ABORT                                  File name= FKA$ALTKEY.:E05TOU
 UTS= JUL 29 '97 15:31:32.48 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  RoData even  UTS     12     14  FKA$ABORT
    2   Data  even  none     1      1  FKA$ABORT
    3   Proc  even  none    32     40  FKA$ABORT
    4  RoData even  none     1      1  FKA$ABORT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     3      0   yes            yes      Std        0  FKA$ABORT

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       1 FKA$CLOSE
 yes     yes           Std       7 XUR$ERRMSG
                       nStd      0 X66_AUTO_0
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #001=FKA$ABORT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:31 Page:5    

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  FKA_MON                               B$TCB$
     B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #001=FKA$ABORT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:31 Page:6    


        1        1        /*M* FKA$ALTKEY - Routines to handle LOAD mode for alternate indexes */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7        /*X* CRT=1,CTI=4,DCI=6,SQB,ECI=3,CSI=3,IPC,DIN=2,SDI=3 */
        8        8        /*P*     NAME:     FKA$ALTKEY
        9        9                 PURPOSE:  To rebuild the alternate indexes of a file
       10       10        */
       11       11        /*F*     NAME:     FKA$ABORT
       12       12                 PURPOSE:  To handle aborts for ALTKEY
       13       13        */
       14       14        /*D*     NAME:     FKA$ABORT
       15       15                 CALL:     CALL FKA$ABORT
       16       16                 DESCRIPTION:
       17       17
       18       18                      This is a general abort routine for handling
       19       19                 unexpected traps, or monitor altreturns.  Exit control is
       20       20                 reset, so we don't go through this again. The file is closed.
       21       21                 We'll ignore any errors from the close on the assumption
       22       22                 that the original error is at least as important as any close
       23       23                 error.  If we are running in user domain, give the user an
       24       24                 error message.  Then do an M$XXX with the appropriate error
       25       25                 code.  If this is a monitor ALTKEY, the M$XXX will cause the
       26       26                 M$CLOSE to altret with whatever error we pass.
       27       27        */
       28       28         %EJECT;
PL6.E3A0      #001=FKA$ABORT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:31 Page:7    
       29       29        FKA$ABORT: PROC;

     29  3 000000   000000 700200 xent  FKA$ABORT    TSX0  ! X66_AUTO_0
         3 000001   000010 000000                    ZERO    8,0

       30       30         %INCLUDE CP_6;
       31      111         %INCLUDE CP_6_SUBS;
       32      651         %INCLUDE FKA_DATA_R;
       33      667         %INCLUDE FK_DATA_C;
       34      744        /* */
       35      745         %FPT_XCON(FPTN=RESET_XCON, STCLASS=CONSTANT);
       36      759         %FPT_XXX(CODE=ERRCODE, STEPCC=ERROR, STCLASS=CONSTANT);
       37      774         %B$TCB;
       38      777         %B$ALT;
       39      785         %FKA$ERR(FPTN=CLOSERR,STCLASS=" ");
       40      791        /* */
       41      792    1     DCL FKA$CLOSE ENTRY(1) ALTRET;
       42      793    1     DCL XUR$ERRMSG ENTRY(7) ALTRET;
       43      794        /* */
       44      795    1     DCL ERRCODE BIT(36) STATIC ALIGNED;
       45      796    1     DCL DCB# UBIN;
       46      797    1     DCL B$TCB$ PTR SYMREF;
       47      798        /* */
       48      799    1           ERRCODE=B$TCB$->B$TCB.ALT$->B$ALT.ERR;

    799  3 000002   000000 470400 xsym               LDP0    B$TCB$
         3 000003   000000 471500                    LDP1    0,,PR0
         3 000004   100102 236100                    LDQ     66,,PR1
         3 000005   000000 756000 2                  STQ     ERRCODE

       49      800    1           DCB#=B$TCB$->B$TCB.ALT$->B$ALT.DCB#;

    800  3 000006   000000 471500                    LDP1    0,,PR0
         3 000007   100101 235100                    LDA     65,,PR1
         3 000010   200005 755100                    STA     DCB#,,AUTO

       50      801
PL6.E3A0      #001=FKA$ABORT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:31 Page:8    
       51      802    1           CALL M$XCON(RESET_XCON);

    802  3 000011   000000 630400 1                  EPPR0   RESET_XCON
         3 000012   010003 713400                    CLIMB   4099
         3 000013   400400 401760                    pmme    nvectors=2

       52      803
       53      804    1           CALL FKA$CLOSE(CLOSERR) ALTRET(IGNORE);

    804  3 000014   200003 630500                    EPPR0   CLOSERR,,AUTO
         3 000015   200006 450500                    STP0    DCB#+1,,AUTO
         3 000016   200006 630500                    EPPR0   DCB#+1,,AUTO
         3 000017   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000020   000000 701000 xent               TSX1    FKA$CLOSE
         3 000021   000022 702000 3                  TSX2    IGNORE

    800  3 000022                       IGNORE       null
       54      805
       55      806    1   IGNORE: ;
       56      807    1           IF FKA_MON = %NO# THEN

    807  3 000022   000000 234000 xsym               SZN     FKA_MON
         3 000023   000034 604000 3                  TMI     s:809

       57      808    1              CALL XUR$ERRMSG(ERRCODE, DCB#);

    808  3 000024   200005 630500                    EPPR0   DCB#,,AUTO
         3 000025   200007 450500                    STP0    DCB#+2,,AUTO
         3 000026   000000 236000 4                  LDQ     0
         3 000027   200006 756100                    STQ     DCB#+1,,AUTO
         3 000030   200006 630500                    EPPR0   DCB#+1,,AUTO
         3 000031   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 000032   000000 701000 xent               TSX1    XUR$ERRMSG
         3 000033   000000 011000                    NOP     0

       58      809    1           CALL M$XXX(FPT_XXX);

PL6.E3A0      #001=FKA$ABORT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:31 Page:9    
    809  3 000034   000006 630400 1                  EPPR0   FPT_XXX
         3 000035   000003 713400                    CLIMB   3
         3 000036   400400 401760                    pmme    nvectors=2

       59      810    1   END FKA$ABORT;

    810  3 000037   000000 702200 xent               TSX2  ! X66_ARET
       60      811         %EOD;

PL6.E3A0      #001=FKA$ABORT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:31 Page:10   
--  Include file information  --

   FK_DATA_C.:E05TOU  is referenced.
   FKA_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure FKA$ABORT.
PL6.E3A0      #001=FKA$ABORT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:31 Page:11   

 **** Variables and constants ****

  ****  Section 001 RoData FKA$ABORT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     6-0-0/d STRC(216)   r     1 FPT_XXX                    0-0-0/d STRC(216)   r     1 RESET_XCON

  ****  Section 002  Data  FKA$ABORT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w BIT         r     1 ERRCODE

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w STRC(72)    r     1 CLOSERR                    5-0-0/w UBIN        r     1 DCB#

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$TCB$                     0-0-0/b BIT         r     1 FKA_MON

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/w STRC(144)   r     1 B$TCB

PL6.E3A0      #001=FKA$ABORT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:31 Page:12   

   Procedure FKA$ABORT requires 32 words for executable code.
   Procedure FKA$ABORT requires 8 words of local(AUTO) storage.
PL6.E3A0      #001=FKA$ABORT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:31 Page:13   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=FKA$ABORT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:31 Page:14   
          MINI XREF LISTING

B$ALT.CODE
       779**DCL       779--REDEF     780--REDEF     780--REDEF
B$ALT.DCB#
       780**DCL       800>>ASSIGN
B$ALT.ERR
       780**DCL       799>>ASSIGN
B$ALT.ERR.ERR#
       781**DCL       781--REDEF
B$ALT.EVID
       780**DCL       780--REDEF     780--REDEF
B$TCB.ALT$
       775**DCL       799>>ASSIGN    800>>ASSIGN
B$TCB$
       797**DCL       799>>ASSIGN    800>>ASSIGN
CLOSERR
       786**DCL       804<>CALL
DCB#
       796**DCL       800<<ASSIGN    808<>CALL
ERRCODE
       795**DCL       770--DCLINIT   799<<ASSIGN    808<>CALL
FKA$CLOSE
       792**DCL-ENT   804--CALL
FKA_MON
       659**DCL       807>>IF
FPT_XXX
       770**DCL       809<>CALL
FPT_XXX.V
       770**DCL       770--DCLINIT
FPT_XXX.V.STEPCC#
       771**DCL       771--REDEF
IGNORE
       800**LABEL     804--CALLALT
PL6.E3A0      #001=FKA$ABORT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:31 Page:15   
M$XCON
        94**DCL-ENT   802--CALL
M$XXX
        51**DCL-ENT   809--CALL
RESET_XCON
       756**DCL       802<>CALL
RESET_XCON.V
       757**DCL       756--DCLINIT
XUR$ERRMSG
       793**DCL-ENT   808--CALL
PL6.E3A0      #001=FKA$ABORT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:31 Page:16   
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #001=FKA$ABORT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:31 Page:17   
              MINI UREF LISTING

FKA$ABORT      29**PROC
FKA_ALTKEYS$     659**DCL
FKA_BOUND     662**DCL
FKA_CLOSE_DONE     666**DCL
FKA_CMDVAR     665**DCL
FKA_CMDVAR_EXIST     665**DCL
FKA_CMDVAR_SET     665**DCL
FKA_CODE19$     661**DCL
FKA_CODE20$     661**DCL
FKA_DATA_BUF     664**DCL
FKA_DATA_BUF$     664**DCL
FKA_DATA_GRAN     662**DCL
FKA_DCB$     662**DCL
FKA_DUPS     663**DCL
FKA_FIELD_START_DATA     660**DCL
FKA_FILE_OPEN     665**DCL
FKA_INDEX_BUF     663**DCL
FKA_INDEX_BUF$     664**DCL
FKA_INDEX_GRAN     662**DCL
FKA_IRKEYS$     660**DCL
FKA_IRKEYS_DATA     660**DCL
FKA_KEYSIZE     663**DCL
FKA_KFIELD$     661**DCL
FKA_KFIELD_DATA     661**DCL
FKA_KTPTR$     662**DCL
FKA_M$CLOSE_ERR     666**DCL
FKA_NUMKEYS     663**DCL
FKA_RECFIELD$     659**DCL
FKA_RECSIZE     663**DCL
FKA_START$     659**DCL
FKA_UNIQUE     659**DCL
M$ACCT      56**DCL-ENT
PL6.E3A0      #001=FKA$ABORT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:31 Page:18   
M$ACTIVATE      59**DCL-ENT
M$ALIB      52**DCL-ENT
M$ASUSER      54**DCL-ENT
M$ATTACH      61**DCL-ENT
M$BADPP      79**DCL-ENT
M$CGCTL      60**DCL-ENT
M$CGINFO      60**DCL-ENT
M$CHECK      41**DCL-ENT
M$CHGUNIT      99**DCL-ENT
M$CLOSE      39**DCL-ENT
M$CLRSTK      97**DCL-ENT
M$CMDVAR     108**DCL-ENT
M$CONFIG      69**DCL-ENT
M$CORRES      44**DCL-ENT
M$CPEXIT      53**DCL-ENT
M$CVM      77**DCL-ENT
M$CVOL      42**DCL-ENT
M$DCLFLD      69**DCL-ENT
M$DEACTIVATE      59**DCL-ENT
M$DELREC      41**DCL-ENT
M$DEQ     106**DCL-ENT
M$DETACH      61**DCL-ENT
M$DEVICE      43**DCL-ENT
M$DISPLAY     106**DCL-ENT
M$DISPRES      46**DCL-ENT
M$DLIB      52**DCL-ENT
M$DRIBBLE      69**DCL-ENT
M$DRTN      97**DCL-ENT
M$DSUSER      54**DCL-ENT
M$ENQ     105**DCL-ENT
M$EOM      64**DCL-ENT
M$ERASE      70**DCL-ENT
M$ERR      51**DCL-ENT
M$ERRMSG     102**DCL-ENT
M$EVENT      94**DCL-ENT
M$EXHUME     103**DCL-ENT
PL6.E3A0      #001=FKA$ABORT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:31 Page:19   
M$EXIT      51**DCL-ENT
M$EXTEND      43**DCL-ENT
M$FDP      75**DCL-ENT
M$FDS      74**DCL-ENT
M$FEBOOT      67**DCL-ENT
M$FECTL      68**DCL-ENT
M$FEDUMP      67**DCL-ENT
M$FID     102**DCL-ENT
M$FINDPROC      56**DCL-ENT
M$FSUSER      54**DCL-ENT
M$FVP      76**DCL-ENT
M$FWCG      60**DCL-ENT
M$GBPL      80**DCL-ENT
M$GDDL      76**DCL-ENT
M$GDP      75**DCL-ENT
M$GDS      74**DCL-ENT
M$GETDCB      45**DCL-ENT
M$GETMOUSE      85**DCL-ENT
M$GETPM      86**DCL-ENT
M$GJOB     104**DCL-ENT
M$GLINEATTR      64**DCL-ENT
M$GOODPP      79**DCL-ENT
M$GPLATEN      72**DCL-ENT
M$GPROMPT      71**DCL-ENT
M$GTRMATTR      65**DCL-ENT
M$GTRMCTL      63**DCL-ENT
M$GTRMTAB      66**DCL-ENT
M$GVP      75**DCL-ENT
M$HELP     102**DCL-ENT
M$INT      94**DCL-ENT
M$INTRTN      55**DCL-ENT
M$IOQ      90**DCL-ENT
M$JOBSTATS     104**DCL-ENT
M$KEYIN      44**DCL-ENT
M$LDEV      39**DCL-ENT
M$LDTRC      52**DCL-ENT
PL6.E3A0      #001=FKA$ABORT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:31 Page:20   
M$LIMIT      45**DCL-ENT
M$LINES      44**DCL-ENT
M$LINK      51**DCL-ENT
M$MADMUCK      47**DCL-ENT
M$MAKUSER      78**DCL-ENT
M$MBS      46**DCL-ENT
M$MDFFLD      70**DCL-ENT
M$MERC      95**DCL-ENT
M$MERCS      96**DCL-ENT
M$MIRROR      90**DCL-ENT
M$MONINFO     107**DCL-ENT
M$MPL      80**DCL-ENT
M$NODEINFO      71**DCL-ENT
M$NXTUSR     105**DCL-ENT
M$OCMSG     103**DCL-ENT
M$OLAY      51**DCL-ENT
M$OPEN      39**DCL-ENT
M$PAS      80**DCL-ENT
M$PATHCON     103**DCL-ENT
M$PDS      74**DCL-ENT
M$PFIL      41**DCL-ENT
M$PLATEN      65**DCL-ENT
M$PRECORD      43**DCL-ENT
M$PROCNAME      56**DCL-ENT
M$PROFILE      67**DCL-ENT
M$PROMPT      63**DCL-ENT
M$RACST      47**DCL-ENT
M$RDSYSLOG      88**DCL-ENT
M$READ      40**DCL-ENT
M$RELDCB      45**DCL-ENT
M$RELRES      46**DCL-ENT
M$RELSTARF      48**DCL-ENT
M$REM      48**DCL-ENT
M$RENV      95**DCL-ENT
M$REQUIRE      47**DCL-ENT
M$RETRY      96**DCL-ENT
PL6.E3A0      #001=FKA$ABORT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:31 Page:21   
M$RETRYS      96**DCL-ENT
M$REW      42**DCL-ENT
M$RLSFLD      70**DCL-ENT
M$RPRIV      98**DCL-ENT
M$RSPP      77**DCL-ENT
M$RSWITCH      99**DCL-ENT
M$RUE     105**DCL-ENT
M$SAD      78**DCL-ENT
M$SAVE      54**DCL-ENT
M$SCON      55**DCL-ENT
M$SCREECH      53**DCL-ENT
M$SENV      95**DCL-ENT
M$SETFMA      39**DCL-ENT
M$SETFP      68**DCL-ENT
M$SINPUT      66**DCL-ENT
M$SLCFLD      71**DCL-ENT
M$SMOUSE      85**DCL-ENT
M$SMPRT      77**DCL-ENT
M$SPRIV      98**DCL-ENT
M$SSC      78**DCL-ENT
M$SSWITCH      98**DCL-ENT
M$STATE     107**DCL-ENT
M$STD      79**DCL-ENT
M$STIMER      93**DCL-ENT
M$STLPP      76**DCL-ENT
M$STRAP      93**DCL-ENT
M$STRMATTR      65**DCL-ENT
M$STRMCTL      63**DCL-ENT
M$STRMTAB      66**DCL-ENT
M$SYMBIO     104**DCL-ENT
M$SYSCON      90**DCL-ENT
M$SYSID     108**DCL-ENT
M$TDCLOSE      89**DCL-ENT
M$TDIO      89**DCL-ENT
M$TDOPEN      88**DCL-ENT
M$TDREQCPU      89**DCL-ENT
PL6.E3A0      #001=FKA$ABORT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:31 Page:22   
M$TEMPWROC      83**DCL-ENT
M$TIME     106**DCL-ENT
M$TRAP      93**DCL-ENT
M$TRMISC      68**DCL-ENT
M$TRMPRG      64**DCL-ENT
M$TRTN      97**DCL-ENT
M$TRUNC      40**DCL-ENT
M$TTIMER      93**DCL-ENT
M$UC      63**DCL
M$UMPL      80**DCL-ENT
M$UNFID     102**DCL-ENT
M$UNLATCH      59**DCL-ENT
M$UNSHARE      56**DCL-ENT
M$USRFIELD      99**DCL-ENT
M$VIRTUAL      74**DCL-ENT
M$WAIT      97**DCL-ENT
M$WEOF      42**DCL-ENT
M$WRITE      40**DCL-ENT
M$WRSYSLOG      88**DCL-ENT
M$XCONRTN      55**DCL-ENT
M$XEQTIME     107**DCL-ENT
M$XFLUSH      48**DCL-ENT
M$XMOUSE      85**DCL-ENT
M$YC      53**DCL-ENT

PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:23   
       61        1        /*T***********************************************************/
       62        2        /*T*                                                         */
       63        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
       64        4        /*T*                                                         */
       65        5        /*T***********************************************************/
       66        6        /*P*     NAME:     FKA$ALTKEY
       67        7                 PURPOSE:  Main routine for rebuilding alternate indexes
       68        8        */
       69        9        /*D*     NAME:     FKA$ALTKEY
       70       10                 DESCRIPTION:
       71       11
       72       12                      This is the main routine for rebuilding alternate
       73       13                 indexes.  ALTKEY can get invoked one of two ways.  First,
       74       14                 it can get invoked as a result of a file close (see
       75       15                 FMU$ALTBLD for details) or the user can say:
       76       16                 !ALTKEY fid
       77       17
       78       18                      B$JIT.PROG_ENTRY  indicates whether the user invoked
       79       19                 ALTKEY, or the monitor did.
       80       20
       81       21                      Next, we have to set the command variable "SORT$STAT"
       82       22                 to "ERRORS" to keep SORT from spewing out statistics,
       83       23                 but still let it print error messages (since X$SORT
       84       24                 doesn't return any kind of error code, argh!).
       85       25                 This is a real pain, because the user may have it set
       86       26                 to something else, and it's not nice to change command
       87       27                 variables out from under the user.
       88       28
       89       29                      Next, take exit and interrupt control.  We have to
       90       30                 make sure that we clean up properly on exit, or the
       91       31                 file may get hung up.
       92       32
       93       33                      Open the file, and do the appropriate set up.  See
       94       34                 how much memory we have available, and let SORT have all
       95       35                 but 3 pages of it.  We need two or three pages for our
       96       36                 own use.
       97       37
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:24   
       98       38                      Set up the sort key.  Then, read in the first index
       99       39                 granule from the file.  Call SORT.  When we get back,
      100       40                 all of the alternate indexes will have been built.
      101       41                 If SORT altreturns, do an error exit with whatever error
      102       42                 SORT found.
      103       43
      104       44                      A user may have specified UNIQUE for an index that
      105       45                 had duplicates.  Here we do the user the favor of resetting
      106       46                 any UNIQUE bit for an index that had duplicates.
      107       47
      108       48                      Close the file, and release exit control.  If we
      109       49                 found any duplicates on UNIQUE indexes or got any errors
      110       50                 back from the close, then do an error exit.
      111       51
      112       52                      If this is a monitor ALTKEY and we exit with an error
      113       53                 via M$XXX, the M$CLOSE will altreturn with the error we
      114       54                 pass.
      115       55
      116       56                      To make things a little (or a lot) faster for files with
      117       57                 simple key structures, we do a few optimizations.  If the file
      118       58                 only has keys that can be compared using a normal, ASCII collating
      119       59                 sequence compare, SORT_TABLE.SECONDARY.KCE$ is set to ENTADDR(NIL),
      120       60                 so that SORT won't call FKA$COMP to do all its compares.  This
      121       61                 saves a *lot* of time.  To qualify for this, the file must have
      122       62                 key fields of only CHAR, UBIN, UTS, PDNS, or UDNS data types.  Keys
      123       63                 may have multiple segments, however.
      124       64
      125       65                      We also check each key for this case, and set IRKEYS.K.DEGENERATE
      126       66                 if the key qualifies.  This lets us short-circuit the compare process
      127       67                 in FKA$COMP for these keys.
      128       68
      129       69                      Finally, in FKA$COMP, if a key consists of only one field,
      130       70                 we go ahead and pass it to the compare routine, which is slightly
      131       71                 more efficient than always assuming the worst case.
      132       72        */
      133       73         %EJECT;
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:25   
      134       74        FKA$ALTKEY: PROC MAIN;
      135       75         %INCLUDE CP_6;
      136      156         %INCLUDE CP_6_SUBS;
      137      696         %INCLUDE FM$FIT;
      138      917         %INCLUDE FM$GRAN;
      139      986         %INCLUDE FK_PERR_C;
      140      995         %INCLUDE FKA_DATA_R;
      141     1011         %INCLUDE FK_DATA_C;
      142     1088         %INCLUDE ZL_MACRO_C;
      143     1738         %INCLUDE B$JIT;
      144     2028         %INCLUDE FM_FIELD_C;
      145     2069         %INCLUDE B$OBJECT_C;
      146     5499         %INCLUDE B_ERRORS_C;
      147     6626        /* */
      148     6627         %FPT_OPEN(FPTN=OPENSI, DCB=M$SI, FUN=UPDATE, ACS=BLOCK,
      149     6628         FPARAM=FKA_ALTKEY_BFR.FPARAM, STCLASS=CONSTANT);
      150     6737         %FPT_READ(FPTN=READ_INDEX, BUF=FKA_INDEX_BUF, KEY=FKA_INDEX_GRAN,
      151     6738         KEYS=YES, DCB=M$SI, STCLASS=CONSTANT);
      152     6777         %FPT_RELSTARF(ALTKEYS=FKA_ALTKEY_BFR, STCLASS=CONSTANT);
      153     6792         %FPT_XCON(UENTRY=FKA$XCON, STCLASS=CONSTANT);
      154     6806         %FPT_XCON(FPTN=RESET_XCON, STCLASS=CONSTANT);
      155     6820         %FPT_INT(UENTRY=FKA$BREAK, STCLASS=CONSTANT);
      156     6834         %FPT_XXX(CODE=ERRCODE, STEPCC=ERROR, STCLASS=CONSTANT);
      157     6849         %FPT_CMDVAR(FUN=FETCH, NAME=VLP_NAME, VALUE=FKA_CMDVAR,
      158     6850         STCLASS=CONSTANT);
      159     6867         %FPT_CMDVAR(FPTN=SET_SILENT, NAME=VLP_NAME, VALUE=SILENT,
      160     6868         FUN=STORE, STCLASS=CONSTANT);
      161     6885         %FPT_GDDL(RESULTS=VLP_GDDL);
      162     6898         %FPT_OPEN(FPTN=FPT_COLLATE, DCB=F$SCRF1, DISP=SCRATCH,
      163     6899         SCRUB=YES, STCLASS=STATIC);
      164     7008         %VLP_GDDL;
      165     7022         %VLP_NAME(NAME='SORT$STAT', STCLASS=CONSTANT);
      166     7049         %VLP_ERRCODE(FPTN=ERR_NOALTINDX, FCG=FK, MID=A, SEV=0,
      167     7050         ERR#=%E$NOALTINDX, STCLASS=CONSTANT);
      168     7095                          /* E$DUPKEY2 error is extracted from FMU$MUL to set MON bit */
      169     7096         %VLP_ERRCODE(FPTN=ERR_DUPS, FCG=FK, MID=A, SEV=0, MON='1'B,
      170     7097         ERR#=%E$DUPKEY2, STCLASS=CONSTANT);
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:26   
      171     7142         %B$TCB;
      172     7145         %B$ALT;
      173     7153        /* */
      174     7154    1     DCL M$SI DCB;
      175     7155    1     DCL F$SCRF1 DCB;
      176     7156        /* */
      177     7157    1     DCL B$JIT$ PTR SYMREF;
      178     7158    1     DCL B$TCB$ PTR SYMREF;
      179     7159        /* */
      180     7160         %F$DCB(DCBN=F$DCB, STCLASS="BASED(FKA_DCB$)");
      181     7217         %FM$GRAN(BASED="BASED(FKA_INDEX_BUF$)");
      182     7221         %FM$KEYTBL(BASED="BASED(FKA_KTPTR$)");
      183     7224         %FITALTKEYS(BASED="BASED(FKA_ALTKEYS$)");
      184     7230         %VLP_RECFIELD(FPTN=RECFIELD, STCLASS="BASED(FKA_RECFIELD$)");
      185     7274         %FM$FIELD_START(FPTN=FIELD_START, STCLASS="BASED(FKA_START$)");
      186     7296         %CODE19(BASED="BASED(FKA_CODE19$)");
      187     7299         %CODE20(BASED="BASED(FKA_CODE20$)");
      188     7304         %FK$ALTKEY_BFR(FPTN=FKA_ALTKEY_BFR, STCLASS="STATIC SYMDEF");
      189     7324         %FK$CCBUF(STCLASS="BASED(CCBUF$)");
      190     7346         %FMG$IRKEYS(FPTN=IRKEYS, STCLASS="BASED(FKA_IRKEYS$)");
      191     7353         %FMG$KFIELD(FPTN=KFIELD, STCLASS="BASED(FKA_KFIELD$)");
      192     7356         %VREBL_DATATYPES;
      193     7431        /* */
      194     7432         %SORT_TABLE(STCLASS="STATIC SYMDEF",ICE=FKA$INPUT,OCE=FKA$OUTPUT,KEYS=ZL_KEYS);
      195     7541         %ZL_KEYS(N=1);
      196     7558         %ZL_KEY;
      197     7618         %ZL_COLLATE(N=1);
      198     7637         %ZL_FPT(FPT=FPT_COLLATE);
      199     7665        /* */
      200     7666    1     DCL X$SORT ENTRY(1) ALTRET;
      201     7667    1     DCL FKA$INPUT ENTRY(2) ALTRET;
      202     7668    1     DCL FKA$OUTPUT ENTRY(2) ALTRET;
      203     7669    1     DCL FKA$COMP ENTRY(3);
      204     7670    1     DCL FKA$CLOSE ENTRY(1) ALTRET;
      205     7671    1     DCL FKA$XCON ENTRY ASYNC;
      206     7672    1     DCL FKA$BREAK ENTRY ASYNC;
      207     7673    1     DCL XSF$LOCCODE ENTRY(2) ALTRET;
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:27   
      208     7674    1     DCL XUR$ERRMSG ENTRY(7) ALTRET;
      209     7675        /* */
      210     7676    1     DCL 1 SILENT CONSTANT,
      211     7677    1            2 * UBIN(9) CALIGNED INIT(6),
      212     7678    1            2 * CHAR(0) CALIGNED INIT('ERRORS');
      213     7679        /* */
      214     7680    1     DCL ERRCODE BIT(36) STATIC INIT('0'B);
      215     7681    1     DCL DCB# UBIN STATIC INIT(0);
      216     7682        /* */
      217     7683    1     DCL I SBIN;
      218     7684    1     DCL MAX SBIN;
      219     7685    1     DCL LEN SBIN;
      220     7686    1     DCL J SBIN;
      221     7687    1     DCL N SBIN;
      222     7688    1     DCL FIELD SBIN;
      223     7689    1     DCL TOTAL SBIN;
      224     7690    1     DCL CCBUF$ PTR;
      225     7691         %FKA$ERR(FPTN=CLOSERR,STCLASS=" ");
      226     7697        /* */
      227     7698    2           DO INHIBIT;
      228     7699    2              FKA_FILE_OPEN=%NO#;
      229     7700    2              FKA_CMDVAR_SET=%NO#;
      230     7701    2              FKA_CLOSE_DONE=%NO#;
      231     7702    2              FKA_M$CLOSE_ERR='0'B;
      232     7703    2              END;
      233     7704
      234     7705    1           IF B$JIT.PROG_ENTRY = %PE_MLINK# THEN
      235     7706    1              FKA_MON=%YES#;
      236     7707    1           ELSE
      237     7708    1              FKA_MON=%NO#;
      238     7709
      239     7710    1           CALL M$CMDVAR(FPT_CMDVAR) ALTRET(NONE);
      240     7711    1           FKA_CMDVAR_EXIST=%YES#;
      241     7712
      242     7713    2           DO WHILE('0'B);
      243     7714    2   NONE:      FKA_CMDVAR_EXIST=%NO#;
      244     7715    2              END;
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:28   
      245     7716    1           CALL M$CMDVAR(SET_SILENT) ALTRET(MERR);
      246     7717    1           FKA_CMDVAR_SET=%YES#;
      247     7718
      248     7719    1           CALL M$XCON(FPT_XCON);
      249     7720    1           CALL M$INT(FPT_INT);
      250     7721
      251     7722    1           FKA_DCB$=DCBADDR(DCBNUM(M$SI));
      252     7723    1           CALL OPEN ALTRET(MERR);
      253     7724
      254     7725    1           IF F$DCB.ORG# = %INDEXED# THEN
      255     7726    2           DO;                             /* INDEXED FILE                       */
      256     7727    2              CALL INDEXED_SETUP ALTRET(ABORT);
      257     7728    2              END;                         /* INDEXED FILE                       */
      258     7729    1           ELSE
      259     7730    2           DO;                             /* IREL FILE                          */
      260     7731    2              CALL IREL_SETUP ALTRET(ABORT);
      261     7732    2              END;                         /* IREL FILE                          */
      262     7733
      263     7734    1           CALL M$GDDL(FPT_GDDL) ALTRET(MERR);
      264     7735    1           SORT_TABLE.MEM#=VLP_GDDL.AVAIL_PGS#-3;
      265     7736
      266     7737    1           FKA_KEYSIZE=MAX;
      267     7738    1           FKA_RECSIZE=MAX+15;
      268     7739    1           SORT_TABLE.PRIMARY.INSIZ#=FKA_RECSIZE;
      269     7740    1           ZL_KEYS.KEY1.START#=1;
      270     7741    1           ZL_KEYS.KEY1.LENGTH#=MAX+7;
      271     7742
      272     7743    1           FKA_INDEX_GRAN=0;
      273     7744    1           CALL M$READ(READ_INDEX) ALTRET(MERR);
      274     7745
      275     7746    1           FKA_KTPTR$=PINCRW(FKA_INDEX_BUF$, FM$GRAN.FCEX);
      276     7747    1           FKA_BOUND=FM$KEYTBL(0);
      277     7748
      278     7749    1           CALL X$SORT(SORT_TABLE) ALTRET(SORT_ERR);
      279     7750
      280     7751    1           IF F$DCB.ORG# = %INDEXED# THEN
      281     7752    2           DO;                             /* INDEXED                            */
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:29   
      282     7753    2              FITALTKEYS.ALTBLD='0'B;
      283     7754    2              FITALTKEYS.UNIQUEBLD='0'B;
      284     7755    3              DO I=1 TO FITALTKEYS.NUMENTS-1;
      285     7756    3                 FITALTKEYS.K.UNIQUE(I)=FKA_UNIQUE(I);
      286     7757    3                 END;
      287     7758    2              END;                         /* INDEXED                            */
      288     7759    1           ELSE
      289     7760    2           DO;                             /* IREL                               */
      290     7761    2              CODE20.ALTBLD='0'B;
      291     7762    2              CODE20.UNIQUEBLD='0'B;
      292     7763    3              DO I=1 TO IRKEYS.NKEYS-1;
      293     7764    3                 IRKEYS.K.UNIQUE(I)=FKA_UNIQUE(I);
      294     7765    3                 END;
      295     7766    2              END;                         /* IREL                               */
      296     7767
      297     7768    1           ERRCODE='0'B;
      298     7769    1           IF FKA_DUPS THEN
      299     7770    2           DO;
      300     7771    2              ERRCODE=ERR_DUPS;
      301     7772    2              DCB#=DCBNUM(M$SI);
      302     7773    2              END;
      303     7774
      304     7775    2           CALL FKA$CLOSE(CLOSERR) WHENALTRETURN DO;
      305     7776    2              IF NOT FKA_DUPS OR CLOSERR.TYPE=%UNEXPECTED THEN
      306     7777    3              DO;
      307     7778    3                 ERRCODE=CLOSERR.ERR;
      308     7779    3                 DCB#=CLOSERR.DCB#;
      309     7780    3                 END;
      310     7781    2              END;
      311     7782
      312     7783    1           IF ERRCODE ~= '0'B THEN
      313     7784    1              GOTO ABORT;
      314     7785
      315     7786    1           CALL M$XCON(RESET_XCON);
      316     7787    1           CALL M$EXIT;
      317     7788
      318     7789    1   SORT_ERR: ;
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:30   
      319     7790    1           ERRCODE=B$TCB$->B$TCB.ALT$->B$ALT.ERR;
      320     7791    1           DCB#=B$TCB$->B$TCB.ALT$->B$ALT.DCB#;
      321     7792    1           CALL FKA$CLOSE(CLOSERR) ALTRET(ABORT);
      322     7793    1           GOTO ABORT;
      323     7794
      324     7795    1   MERR:   ERRCODE=B$TCB$->B$TCB.ALT$->B$ALT.ERR;
      325     7796    1           DCB#=B$TCB$->B$TCB.ALT$->B$ALT.DCB#;
      326     7797    1   ABORT:  IF FKA_MON = %NO# THEN
      327     7798    1              CALL XUR$ERRMSG(ERRCODE, DCB#);
      328     7799
      329     7800    1           CALL M$XCON(RESET_XCON);
      330     7801    1           CALL M$XXX(FPT_XXX);
      331     7802         %EJECT;
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:31   
      332     7803        /*I*     NAME:     FIELD_START_SETUP
      333     7804                 PURPOSE:  To set up bit offsets to the start of each
      334     7805                           RECFIELD field in the FIELD_START.OFFSET array.
      335     7806                 DESCRIPTION:
      336     7807                      Figure out the starting offset to each field based
      337     7808                 on the alignment rules for the field type and the field
      338     7809                 length.
      339     7810        */
      340     7811    1   FIELD_START_SETUP: PROC;
      341     7812        /**/
      342     7813    2     DCL I UBIN;
      343     7814    2     DCL J UBIN;
      344     7815    2     DCL REC_OFFSET UBIN;
      345     7816        %EQU BYTE_ALIGNED = 1;
      346     7817        %EQU NIBBLE_ALIGNED = 2;
      347     7818        %EQU BIT_ALIGNED = 3;
      348     7819        /**/
      349     7820    2              FIELD_START.NWORDS=RECFIELD.NFIELDS# + 1;
      350     7821    2              REC_OFFSET=0;
      351     7822    2              I=0;
      352     7823
      353     7824    3              DO WHILE(I <= RECFIELD.NFIELDS#-1);
      354     7825
      355     7826    4                 DO CASE(RECFIELD.FIELD.TYPE#(I));
      356     7827
      357     7828    4                    CASE(%LIST_DATATYPE);
      358     7829    4                       CALL FIELD_START(I+1);
      359     7830    4                       FIELD_START.OFFSET(I)=FIELD_START.OFFSET(I+1);
      360     7831    5                       DO J=2 TO RECFIELD.FIELD.LEN#(I);
      361     7832    5                          CALL FIELD_START(I+1);
      362     7833    5                          END;
      363     7834    4                       FIELD_START.OFFSET(I+1)=FIELD_START.OFFSET(I);
      364     7835    4                       I=I+1;
      365     7836
      366     7837    4                    CASE(%VLIST_DATATYPE);
      367     7838    4                       CALL FIELD_START(I+1);
      368     7839    4                       FIELD_START.OFFSET(I)=FIELD_START.OFFSET(I+1);
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:32   
      369     7840    4                       REC_OFFSET=FIELD_START.OFFSET(I);
      370     7841    4                       I=I+1;
      371     7842
      372     7843    4                    CASE(ELSE);
      373     7844    4                       CALL FIELD_START(I);
      374     7845
      375     7846    4                    END;                   /* Do Case                            */
      376     7847
      377     7848    3                 I=I+1;
      378     7849    3                 END;                      /* Do While                           */
      379     7850
      380     7851    2              RETURN;
      381     7852        %EJECT;
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:33   
      382     7853    2   FIELD_START:  PROC(K);
      383     7854    3     DCL K UBIN;
      384     7855        /**/
      385     7856
      386     7857    4                 DO CASE(RECFIELD.FIELD.TYPE#(K));
      387     7858
      388     7859    4                    CASE(%NO_DATATYPE,%CHAR_DATATYPE);
      389     7860    4                       CALL SET_FIELD_START(%BYTE_ALIGNED);
      390     7861    4                       REC_OFFSET=REC_OFFSET + (RECFIELD.FIELD.LEN#(K)*9);
      391     7862
      392     7863    4                    CASE(%SBIN_DATATYPE,%UBIN_DATATYPE);
      393     7864    4                       CALL SET_FIELD_START(%BIT_ALIGNED);
      394     7865    4                       REC_OFFSET=REC_OFFSET + RECFIELD.FIELD.LEN#(K);
      395     7866
      396     7867    4                    CASE(%SFLT_DATATYPE,%UTS_DATATYPE);
      397     7868    4                       CALL SET_FIELD_START(%BYTE_ALIGNED);
      398     7869    4                       REC_OFFSET=REC_OFFSET + 36;
      399     7870
      400     7871    4                    CASE(%DFLT_DATATYPE,%DATE_DATATYPE,%TIME_DATATYPE);
      401     7872    4                       CALL SET_FIELD_START(%BYTE_ALIGNED);
      402     7873    4                       REC_OFFSET=REC_OFFSET + 72;
      403     7874
      404     7875    4                    CASE(%PDLA_DATATYPE,%PDTA_DATATYPE,%PDLE_DATATYPE,
      405     7876    4                           %PDTE_DATATYPE,%PDFLT_DATATYPE,%PDNS_DATATYPE);
      406     7877    4                       CALL SET_FIELD_START(%NIBBLE_ALIGNED);
      407     7878    4                       REC_OFFSET=REC_OFFSET + ((RECFIELD.DECFIELD.LEN#(K)/2)*9);
      408     7879    4                       IF MOD(RECFIELD.DECFIELD.LEN#(K),2)~=0 THEN /* odd length */
      409     7880    4                          IF MOD(REC_OFFSET,9)=0 THEN
      410     7881    4                             REC_OFFSET=REC_OFFSET+5; /* even nibble boundary    */
      411     7882    4                          ELSE REC_OFFSET=REC_OFFSET+4; /* odd nibble boundary   */
      412     7883
      413     7884    4                    CASE(%TEXTC_DATATYPE);
      414     7885    4                       CALL SET_FIELD_START(%BYTE_ALIGNED);
      415     7886    4                       REC_OFFSET=REC_OFFSET + 9;
      416     7887
      417     7888    4                    CASE(%TEXTH_DATATYPE);
      418     7889    4                       CALL SET_FIELD_START(%BYTE_ALIGNED);
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:34   
      419     7890    4                       REC_OFFSET=REC_OFFSET + 18;
      420     7891
      421     7892    4                    CASE(%UDNS_DATATYPE,%UDLS_DATATYPE,%UDTS_DATATYPE,
      422     7893    4                           %UDLO_DATATYPE,%UDTO_DATATYPE,%UDFLT_DATATYPE);
      423     7894    4                       CALL SET_FIELD_START(%BYTE_ALIGNED);
      424     7895    4                       REC_OFFSET=REC_OFFSET + (RECFIELD.DECFIELD.LEN#(K)*9);
      425     7896
      426     7897    4                    END;                   /* Do Case                            */
      427     7898
      428     7899    3                 RETURN;
      429     7900        %EJECT;
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:35   
      430     7901    3   SET_FIELD_START: PROC (ALIGN_TYPE);
      431     7902    4     DCL ALIGN_TYPE UBIN;
      432     7903    4     DCL EVEN UBIN;
      433     7904        /**/
      434     7905
      435     7906    5                    DO CASE(ALIGN_TYPE);
      436     7907    5                       CASE(%BYTE_ALIGNED);
      437     7908    5                          IF MOD(REC_OFFSET,9)~=0 THEN
      438     7909    5                             REC_OFFSET=((REC_OFFSET/9)*9) + 9;
      439     7910
      440     7911    5                       CASE(%NIBBLE_ALIGNED);
      441     7912    5                          EVEN=(REC_OFFSET/9)*9;
      442     7913    5                          IF REC_OFFSET > EVEN AND REC_OFFSET < EVEN+5 THEN
      443     7914    5                             REC_OFFSET=EVEN+5;
      444     7915    5                          ELSE IF REC_OFFSET > EVEN+5 THEN
      445     7916    5                                REC_OFFSET=EVEN+9;
      446     7917
      447     7918    5                       CASE(%BIT_ALIGNED);
      448     7919                                                /* Don't do anything.                 */
      449     7920
      450     7921    5                       END;                /* Do Case                            */
      451     7922
      452     7923    4                    FIELD_START.OFFSET(K)=REC_OFFSET; /* K defined in FIELD_START */
      453     7924    4                    RETURN;
      454     7925
      455     7926    4            END SET_FIELD_START;
      456     7927
      457     7928    3         END FIELD_START;
      458     7929
      459     7930    2      END FIELD_START_SETUP;
      460     7931        %EJECT;
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:36   
      461     7932        /*I*     NAME:     INDEXED_SETUP
      462     7933                 PURPOSE:  To handle set up for indexed files
      463     7934                 DESCRIPTION:
      464     7935
      465     7936                      Build a pointer to the altkey information, and
      466     7937                 find the largest key.
      467     7938        */
      468     7939         %EJECT;
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:37   
      469     7940    1   INDEXED_SETUP: PROC ALTRET;
      470     7941        /* */
      471     7942    2              FKA_ALTKEYS$=PINCRW(ADDR(FKA_ALTKEY_BFR.FPARAM), 5);
      472     7943    2              I=8;
      473     7944    2              CALL XSF$LOCCODE(FKA_ALTKEYS$, I) ALTRET(NOALT);
      474     7945
      475     7946    2              MAX=0;
      476     7947    3              DO I=0 TO FITALTKEYS.NUMENTS-1;
      477     7948    3                 FITALTKEYS.K.DUPKEY(I)='0'B;
      478     7949    3                 FKA_UNIQUE(I)=FITALTKEYS.K.UNIQUE(I);
      479     7950    3                 IF FITALTKEYS.K.KEYL(I) > MAX THEN
      480     7951    3                    MAX=FITALTKEYS.K.KEYL(I);
      481     7952    3                 END;
      482     7953
      483     7954    2              FKA_NUMKEYS=FITALTKEYS.NUMENTS;
      484     7955
      485     7956    2              RETURN;
      486     7957    2   NOALT:     ERRCODE=ERR_NOALTINDX;
      487     7958        /*E*   ERROR:  FKA-E$NOALTINDX-0
      488     7959               MESSAGE:  There are no alternate indexes in this file.
      489     7960        */
      490     7961    2              ALTRETURN;
      491     7962    2      END INDEXED_SETUP;
      492     7963         %EJECT;
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:38   
      493     7964        /*I*     NAME:     IREL_SETUP
      494     7965                 PURPOSE:  Part one of set up for IREL files
      495     7966                 DESCRIPTION:
      496     7967
      497     7968                      Find and build pointers to all of the IREL
      498     7969                 information that we need.
      499     7970        */
      500     7971         %EJECT;
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:39   
      501     7972    1   IREL_SETUP: PROC ALTRET;
      502     7973    2     DCL I SBIN;
      503     7974    2     DCL START SBIN;
      504     7975    2     DCL LEN SBIN;
      505     7976        /* */
      506     7977    2              FKA_RECFIELD$=PINCRW(ADDR(FKA_ALTKEY_BFR.FPARAM), 5);
      507     7978    2              I=18;
      508     7979    2              CALL XSF$LOCCODE(FKA_RECFIELD$, I) ALTRET(NOALT);
      509     7980
      510     7981    2              FKA_CODE19$=PINCRW(ADDR(FKA_ALTKEY_BFR.FPARAM), 5);
      511     7982    2              I=19;
      512     7983    2              CALL XSF$LOCCODE(FKA_CODE19$, I) ALTRET(NOALT);
      513     7984
      514     7985    2              FKA_CODE20$=PINCRW(ADDR(FKA_ALTKEY_BFR.FPARAM), 5);
      515     7986    2              I=20;
      516     7987    2              CALL XSF$LOCCODE(FKA_CODE20$, I) ALTRET(NOALT);
      517     7988
      518     7989    2              CALL FIELD_START_SETUP;
      519     7990    2              CALL IRSETUP;
      520     7991
      521     7992    2              SORT_TABLE.SECONDARY.KCE$ = ENTADDR(FKA$COMP);
      522     7993                                                /* Check for degenerate case.         */
      523     7994    3              DO I = 0 TO FKA_NUMKEYS - 1;
      524     7995    3                 IF NOT IRKEYS.K.DEGENERATE(I) THEN /* Not a degenerate case.    */
      525     7996    3                    RETURN;
      526     7997    3                 END;
      527     7998                                           /* Don't need FKA$COMP if degenerate case. */
      528     7999    2              SORT_TABLE.SECONDARY.KCE$ = ENTADDR(NIL);
      529     8000
      530     8001    2              RETURN;
      531     8002    2   NOALT:     ERRCODE=ERR_NOALTINDX;
      532     8003    2              ALTRETURN;
      533     8004    2      END IREL_SETUP;
      534     8005         %EJECT;
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:40   
      535     8006        /*I*     NAME:     IRSETUP
      536     8007                 PURPOSE:  Part two of set up for IREL files
      537     8008                 DESCRIPTION:
      538     8009
      539     8010                      The information has to be moved from the various
      540     8011                 code blocks to some more coherent structures.  Again,
      541     8012                 we have to find the size of the largest key.
      542     8013        */
      543     8014         %EJECT;
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:41   
      544     8015    1   IRSETUP:   PROC;
      545     8016        /* */
      546     8017    2              IRKEYS.NKEYS=CODE19.NKEYS;
      547     8018    2              N=0;
      548     8019    2              MAX=0;
      549     8020    3              DO I=0 TO CODE19.NKEYS-1;
      550     8021    3                 TOTAL = 0;
      551     8022    3                 IRKEYS.K.FIRSTFIELD(I) = N;
      552     8023    3                 IRKEYS.K.UNIQUE(I) = CODE19.K.UNIQUE(I);
      553     8024    3                 FKA_UNIQUE(I) = CODE19.K.UNIQUE(I);
      554     8025    3                 IRKEYS.K.FDA(I) = CODE20.K.FDA(I);
      555     8026    3                 IRKEYS.K.LDA(I) = CODE20.K.LDA(I);
      556     8027    3                 IRKEYS.K.DEGENERATE(I) = CODE20.K.DEGENERATE(I);
      557     8028    4                 DO UNTIL (CODE19.K.KEYEND(N-1));
      558     8029    4                    IRKEYS.K.NFIELDS(I) = IRKEYS.K.NFIELDS(I) + 1;
      559     8030    4                    KFIELD.FIELD(N) = CODE19.K.FIELDN(N);
      560     8031    4                    FIELD = CODE19.K.FIELDN(N);
      561     8032    4                    CALL SET_LEN;
      562     8033    4                    TOTAL = TOTAL + LEN;
      563     8034    4                    N = N + 1;
      564     8035    4                    END;
      565     8036    3                 IRKEYS.K.KEYL(I) = TOTAL;
      566     8037    3                 IF TOTAL > MAX THEN
      567     8038    3                    MAX = TOTAL;
      568     8039    3                 END;
      569     8040
      570     8041    2              FKA_NUMKEYS=CODE19.NKEYS;
      571     8042
      572     8043    2              RETURN;
      573     8044    2      END IRSETUP;
      574     8045         %EJECT;
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:42   
      575     8046        /*I*     NAME:     OPEN
      576     8047                 PURPOSE:  To open the file
      577     8048                 DESCRIPTION:
      578     8049
      579     8050                      If this is a monitor ALTKEY, then we call RELSTARF
      580     8051                 to do a sleazy open.  This has to be done because we need
      581     8052                 to open the file with BLOCK access, and this is not possible
      582     8053                 if someone else has the file open.  The sleazy open is a bit
      583     8054                 interesting because it opens the dcb with FUN=IN to prevent
      584     8055                 unwanted behavior when we're run down and the dcb is really
      585     8056                 closed.  However, the FMBLK privilege that ALTKEY is linked
      586     8057                 with allows us to write granules in the file anyway.  In this
      587     8058                 case, we've been passed some information in the CCBUF via the
      588     8059                 M$MLINK which wouldn't be easily available otherwise; e.g.,
      589     8060                 the CFU pointer and SETX of the file, B$JIT.ERR as it was
      590     8061                 prior to the link to ALTKEY (so it won't be forgotten), the
      591     8062                 user's FPT_CLOSE RELG option, and whether he's allowed to
      592     8063                 RELG or not (his DELF access).  These will be used later to
      593     8064                 decide how to close and exit.
      594     8065
      595     8066                      Otherwise, for a stand-alone ALTKEY, just do a normal
      596     8067                 block open.
      597     8068        */
      598     8069         %EJECT;
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:43   
      599     8070    1   OPEN:      PROC ALTRET;
      600     8071        /* */
      601     8072    2              IF FKA_MON = %YES# THEN
      602     8073    3              DO;                          /* MONITOR CLOSE                      */
      603     8074    3                 FKA_ALTKEY_BFR.CODE=%ALTKEY_OPEN#;
      604     8075    3                 FKA_ALTKEY_BFR.DCB#=DCBNUM(M$SI);
      605     8076    3                 CCBUF$=PINCRC(ADDR(B$JIT.CCBUF), -1);
      606     8077    3                 FKA_ALTKEY_BFR.CFU$=CCBUF.CFU$;
      607     8078    3                 FKA_ALTKEY_BFR.SETX=CCBUF.SETX;
      608     8079    3                 FKA_ALTKEY_BFR.RELG=CCBUF.RELG;
      609     8080    3                 FKA_ALTKEY_BFR.DELF=CCBUF.DELF;
      610     8081    3                 FKA_M$CLOSE_ERR=CCBUF.CLOSERR;
      611     8082    3                 CALL M$RELSTARF(FPT_RELSTARF) ALTRET(MERR);
      612     8083    3                 FKA_FILE_OPEN=%YES#;
      613     8084    3                 END;                      /* MONITOR CLOSE                      */
      614     8085    2              ELSE
      615     8086    3              DO;                          /* USER REBUILD                       */
      616     8087    3                 FKA_ALTKEY_BFR.DCB#=DCBNUM(M$SI);
      617     8088    3                 FKA_ALTKEY_BFR.RELG='0'B;
      618     8089    3                 FKA_ALTKEY_BFR.DELF='0'B;
      619     8090    3                 CALL M$OPEN(OPENSI) ALTRET(MERR);
      620     8091    3                 FKA_FILE_OPEN=%YES#;
      621     8092    3                 END;                      /* USER REBUILD                       */
      622     8093
      623     8094    2              RETURN;
      624     8095    2   MERR:      ALTRETURN;
      625     8096    2      END OPEN;
      626     8097         %EJECT;
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:44   
      627     8098        /*I*     NAME:     SET_LEN
      628     8099                 PURPOSE:  To get the length of a field
      629     8100                 DESCRIPTION:
      630     8101
      631     8102                      The length can be stored as either bits, nibbles, or
      632     8103                 bytes.  Get the value from the appropriate place, and do
      633     8104                 the appropriate arithmatic to get it to bytes.
      634     8105        */
      635     8106         %EJECT;
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:45   
      636     8107    1   SET_LEN:   PROC;
      637     8108        /* */
      638     8109    3              DO CASE(RECFIELD.FIELD.TYPE#(FIELD));
      639     8110    3                 CASE(%PDLA_DATATYPE, %PDTA_DATATYPE, %PDNS_DATATYPE,
      640     8111    3                  %PDTE_DATATYPE, %PDFLT_DATATYPE, %PDLE_DATATYPE,
      641     8112    3                  %DATE_DATATYPE, %TIME_DATATYPE);
      642     8113    3                    LEN=(RECFIELD.DECFIELD.LEN#(FIELD)+1)/2;
      643     8114
      644     8115    3                 CASE(%UDLS_DATATYPE, %UDTS_DATATYPE, %UDNS_DATATYPE,
      645     8116    3                        %UDLO_DATATYPE, %UDTO_DATATYPE, %UDFLT_DATATYPE);
      646     8117    3                    LEN=RECFIELD.DECFIELD.LEN#(FIELD);
      647     8118
      648     8119    3                 CASE(%SBIN_DATATYPE, %UBIN_DATATYPE, %UTS_DATATYPE);
      649     8120    3                    LEN=RECFIELD.FIELD.LEN#(FIELD)/9;
      650     8121
      651     8122    3                 CASE(ELSE);
      652     8123    3                    LEN=RECFIELD.FIELD.LEN#(FIELD);
      653     8124
      654     8125    3                 END;                      /* CASE                               */
      655     8126
      656     8127    2              RETURN;
      657     8128    2      END SET_LEN;
      658     8129    1   END FKA$ALTKEY;
      659     8130         %EOD;

PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:46   
--  Include file information  --

   B_ERRORS_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   FM_FIELD_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   ZL_MACRO_C.:TOOLE04  is referenced.
   FK_DATA_C.:E05TOU  is referenced.
   FKA_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   FK_PERR_C.:E05TOU  is referenced.
   FM$GRAN.:E05TOU  is referenced.
   FM$FIT.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure FKA$ALTKEY.

   Procedure FKA$ALTKEY requires 978 words for executable code.
   Procedure FKA$ALTKEY requires 34 words of local(AUTO) storage.

PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:47   

 Object Unit name= FKA$ALTKEY                                 File name= FKA$ALTKEY.:E05TOU
 UTS= JUL 29 '97 15:31:41.32 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  RoData even  UTS    133    205  FKA$ALTKEY
    2   Data  even  none  1139   2163  FKA$ALTKEY
    3   DCB   even  none     0      0  M$SI
    4   DCB   even  none     0      0  F$SCRF1
    5   Proc  even  none   978   1722  FKA$ALTKEY
    6  RoData even  none    17     21  FKA$ALTKEY

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     5      0   yes            yes      Main       0  FKA$ALTKEY

  ****  Data defs  ****

 Sect OctLoc  Name                           Sect OctLoc  Name
    2    100  FKA_ALTKEY_BFR                     2   2106  SORT_TABLE
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:48   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes          Async      0 FKA$XCON
         yes          Async      0 FKA$BREAK
 yes     yes           Std       1 FKA$CLOSE
 yes     yes           Std       2 FKA$INPUT
 yes     yes           Std       2 FKA$OUTPUT
 yes     yes           Std       1 X$SORT
 yes     yes           Std       7 XUR$ERRMSG
 yes     yes           Std       2 XSF$LOCCODE
         yes           Std       3 FKA$COMP
                       nStd      0 X66_MAUTO
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_MARET

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  FKA_MON                               FKA_UNIQUE
     FKA_ALTKEYS$                          FKA_RECFIELD$                    r    FKA_START$
r    FKA_IRKEYS$                      r    FKA_KFIELD$                           FKA_CODE19$
     FKA_CODE20$                           FKA_INDEX_GRAN                        FKA_KTPTR$
     FKA_BOUND                             FKA_DCB$                              FKA_NUMKEYS
     FKA_RECSIZE                           FKA_KEYSIZE                           FKA_DUPS
     FKA_INDEX_BUF                    r    FKA_INDEX_BUF$                        FKA_CMDVAR_EXIST
     FKA_CMDVAR                            FKA_FILE_OPEN                         FKA_CMDVAR_SET
     FKA_M$CLOSE_ERR                       FKA_CLOSE_DONE                        M$SI
     F$SCRF1                               B$JIT$                                B$TCB$
     B_VECTNIL
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:49   

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID                               ROSID
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:50   


       61        1        /*T***********************************************************/
       62        2        /*T*                                                         */
       63        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
       64        4        /*T*                                                         */
       65        5        /*T***********************************************************/
       66        6        /*P*     NAME:     FKA$ALTKEY
       67        7                 PURPOSE:  Main routine for rebuilding alternate indexes
       68        8        */
       69        9        /*D*     NAME:     FKA$ALTKEY
       70       10                 DESCRIPTION:
       71       11
       72       12                      This is the main routine for rebuilding alternate
       73       13                 indexes.  ALTKEY can get invoked one of two ways.  First,
       74       14                 it can get invoked as a result of a file close (see
       75       15                 FMU$ALTBLD for details) or the user can say:
       76       16                 !ALTKEY fid
       77       17
       78       18                      B$JIT.PROG_ENTRY  indicates whether the user invoked
       79       19                 ALTKEY, or the monitor did.
       80       20
       81       21                      Next, we have to set the command variable "SORT$STAT"
       82       22                 to "ERRORS" to keep SORT from spewing out statistics,
       83       23                 but still let it print error messages (since X$SORT
       84       24                 doesn't return any kind of error code, argh!).
       85       25                 This is a real pain, because the user may have it set
       86       26                 to something else, and it's not nice to change command
       87       27                 variables out from under the user.
       88       28
       89       29                      Next, take exit and interrupt control.  We have to
       90       30                 make sure that we clean up properly on exit, or the
       91       31                 file may get hung up.
       92       32
       93       33                      Open the file, and do the appropriate set up.  See
       94       34                 how much memory we have available, and let SORT have all
       95       35                 but 3 pages of it.  We need two or three pages for our
       96       36                 own use.
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:51   
       97       37
       98       38                      Set up the sort key.  Then, read in the first index
       99       39                 granule from the file.  Call SORT.  When we get back,
      100       40                 all of the alternate indexes will have been built.
      101       41                 If SORT altreturns, do an error exit with whatever error
      102       42                 SORT found.
      103       43
      104       44                      A user may have specified UNIQUE for an index that
      105       45                 had duplicates.  Here we do the user the favor of resetting
      106       46                 any UNIQUE bit for an index that had duplicates.
      107       47
      108       48                      Close the file, and release exit control.  If we
      109       49                 found any duplicates on UNIQUE indexes or got any errors
      110       50                 back from the close, then do an error exit.
      111       51
      112       52                      If this is a monitor ALTKEY and we exit with an error
      113       53                 via M$XXX, the M$CLOSE will altreturn with the error we
      114       54                 pass.
      115       55
      116       56                      To make things a little (or a lot) faster for files with
      117       57                 simple key structures, we do a few optimizations.  If the file
      118       58                 only has keys that can be compared using a normal, ASCII collating
      119       59                 sequence compare, SORT_TABLE.SECONDARY.KCE$ is set to ENTADDR(NIL),
      120       60                 so that SORT won't call FKA$COMP to do all its compares.  This
      121       61                 saves a *lot* of time.  To qualify for this, the file must have
      122       62                 key fields of only CHAR, UBIN, UTS, PDNS, or UDNS data types.  Keys
      123       63                 may have multiple segments, however.
      124       64
      125       65                      We also check each key for this case, and set IRKEYS.K.DEGENERATE
      126       66                 if the key qualifies.  This lets us short-circuit the compare process
      127       67                 in FKA$COMP for these keys.
      128       68
      129       69                      Finally, in FKA$COMP, if a key consists of only one field,
      130       70                 we go ahead and pass it to the compare routine, which is slightly
      131       71                 more efficient than always assuming the worst case.
      132       72        */
      133       73         %EJECT;
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:52   
      134       74        FKA$ALTKEY: PROC MAIN;

     74  5 000000   000000 700200 xent  FKA$ALTKEY   TSX0  ! X66_MAUTO
         5 000001   000042 000000                    ZERO    34,0

      135       75         %INCLUDE CP_6;
      136      156         %INCLUDE CP_6_SUBS;
      137      696         %INCLUDE FM$FIT;
      138      917         %INCLUDE FM$GRAN;
      139      986         %INCLUDE FK_PERR_C;
      140      995         %INCLUDE FKA_DATA_R;
      141     1011         %INCLUDE FK_DATA_C;
      142     1088         %INCLUDE ZL_MACRO_C;
      143     1738         %INCLUDE B$JIT;
      144     2028         %INCLUDE FM_FIELD_C;
      145     2069         %INCLUDE B$OBJECT_C;
      146     5499         %INCLUDE B_ERRORS_C;
      147     6626        /* */
      148     6627         %FPT_OPEN(FPTN=OPENSI, DCB=M$SI, FUN=UPDATE, ACS=BLOCK,
      149     6628         FPARAM=FKA_ALTKEY_BFR.FPARAM, STCLASS=CONSTANT);
      150     6737         %FPT_READ(FPTN=READ_INDEX, BUF=FKA_INDEX_BUF, KEY=FKA_INDEX_GRAN,
      151     6738         KEYS=YES, DCB=M$SI, STCLASS=CONSTANT);
      152     6777         %FPT_RELSTARF(ALTKEYS=FKA_ALTKEY_BFR, STCLASS=CONSTANT);
      153     6792         %FPT_XCON(UENTRY=FKA$XCON, STCLASS=CONSTANT);
      154     6806         %FPT_XCON(FPTN=RESET_XCON, STCLASS=CONSTANT);
      155     6820         %FPT_INT(UENTRY=FKA$BREAK, STCLASS=CONSTANT);
      156     6834         %FPT_XXX(CODE=ERRCODE, STEPCC=ERROR, STCLASS=CONSTANT);
      157     6849         %FPT_CMDVAR(FUN=FETCH, NAME=VLP_NAME, VALUE=FKA_CMDVAR,
      158     6850         STCLASS=CONSTANT);
      159     6867         %FPT_CMDVAR(FPTN=SET_SILENT, NAME=VLP_NAME, VALUE=SILENT,
      160     6868         FUN=STORE, STCLASS=CONSTANT);
      161     6885         %FPT_GDDL(RESULTS=VLP_GDDL);
      162     6898         %FPT_OPEN(FPTN=FPT_COLLATE, DCB=F$SCRF1, DISP=SCRATCH,
      163     6899         SCRUB=YES, STCLASS=STATIC);
      164     7008         %VLP_GDDL;
      165     7022         %VLP_NAME(NAME='SORT$STAT', STCLASS=CONSTANT);
      166     7049         %VLP_ERRCODE(FPTN=ERR_NOALTINDX, FCG=FK, MID=A, SEV=0,
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:53   
      167     7050         ERR#=%E$NOALTINDX, STCLASS=CONSTANT);
      168     7095                          /* E$DUPKEY2 error is extracted from FMU$MUL to set MON bit */
      169     7096         %VLP_ERRCODE(FPTN=ERR_DUPS, FCG=FK, MID=A, SEV=0, MON='1'B,
      170     7097         ERR#=%E$DUPKEY2, STCLASS=CONSTANT);
      171     7142         %B$TCB;
      172     7145         %B$ALT;
      173     7153        /* */
      174     7154    1     DCL M$SI DCB;
      175     7155    1     DCL F$SCRF1 DCB;
      176     7156        /* */
      177     7157    1     DCL B$JIT$ PTR SYMREF;
      178     7158    1     DCL B$TCB$ PTR SYMREF;
      179     7159        /* */
      180     7160         %F$DCB(DCBN=F$DCB, STCLASS="BASED(FKA_DCB$)");
      181     7217         %FM$GRAN(BASED="BASED(FKA_INDEX_BUF$)");
      182     7221         %FM$KEYTBL(BASED="BASED(FKA_KTPTR$)");
      183     7224         %FITALTKEYS(BASED="BASED(FKA_ALTKEYS$)");
      184     7230         %VLP_RECFIELD(FPTN=RECFIELD, STCLASS="BASED(FKA_RECFIELD$)");
      185     7274         %FM$FIELD_START(FPTN=FIELD_START, STCLASS="BASED(FKA_START$)");
      186     7296         %CODE19(BASED="BASED(FKA_CODE19$)");
      187     7299         %CODE20(BASED="BASED(FKA_CODE20$)");
      188     7304         %FK$ALTKEY_BFR(FPTN=FKA_ALTKEY_BFR, STCLASS="STATIC SYMDEF");
      189     7324         %FK$CCBUF(STCLASS="BASED(CCBUF$)");
      190     7346         %FMG$IRKEYS(FPTN=IRKEYS, STCLASS="BASED(FKA_IRKEYS$)");
      191     7353         %FMG$KFIELD(FPTN=KFIELD, STCLASS="BASED(FKA_KFIELD$)");
      192     7356         %VREBL_DATATYPES;
      193     7431        /* */
      194     7432         %SORT_TABLE(STCLASS="STATIC SYMDEF",ICE=FKA$INPUT,OCE=FKA$OUTPUT,KEYS=ZL_KEYS);
      195     7541         %ZL_KEYS(N=1);
      196     7558         %ZL_KEY;
      197     7618         %ZL_COLLATE(N=1);
      198     7637         %ZL_FPT(FPT=FPT_COLLATE);
      199     7665        /* */
      200     7666    1     DCL X$SORT ENTRY(1) ALTRET;
      201     7667    1     DCL FKA$INPUT ENTRY(2) ALTRET;
      202     7668    1     DCL FKA$OUTPUT ENTRY(2) ALTRET;
      203     7669    1     DCL FKA$COMP ENTRY(3);
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:54   
      204     7670    1     DCL FKA$CLOSE ENTRY(1) ALTRET;
      205     7671    1     DCL FKA$XCON ENTRY ASYNC;
      206     7672    1     DCL FKA$BREAK ENTRY ASYNC;
      207     7673    1     DCL XSF$LOCCODE ENTRY(2) ALTRET;
      208     7674    1     DCL XUR$ERRMSG ENTRY(7) ALTRET;
      209     7675        /* */
      210     7676    1     DCL 1 SILENT CONSTANT,
      211     7677    1            2 * UBIN(9) CALIGNED INIT(6),
      212     7678    1            2 * CHAR(0) CALIGNED INIT('ERRORS');
      213     7679        /* */
      214     7680    1     DCL ERRCODE BIT(36) STATIC INIT('0'B);
      215     7681    1     DCL DCB# UBIN STATIC INIT(0);
      216     7682        /* */
      217     7683    1     DCL I SBIN;
      218     7684    1     DCL MAX SBIN;
      219     7685    1     DCL LEN SBIN;
      220     7686    1     DCL J SBIN;
      221     7687    1     DCL N SBIN;
      222     7688    1     DCL FIELD SBIN;
      223     7689    1     DCL TOTAL SBIN;
      224     7690    1     DCL CCBUF$ PTR;
      225     7691         %FKA$ERR(FPTN=CLOSERR,STCLASS=" ");
      226     7697        /* */
      227     7698    2           DO INHIBIT;

      228     7699    2              FKA_FILE_OPEN=%NO#;

   7699  5 000002   000000 450200 xsym               STZ   ! FKA_FILE_OPEN

      229     7700    2              FKA_CMDVAR_SET=%NO#;

   7700  5 000003   000000 450200 xsym               STZ   ! FKA_CMDVAR_SET

      230     7701    2              FKA_CLOSE_DONE=%NO#;

   7701  5 000004   000000 450200 xsym               STZ   ! FKA_CLOSE_DONE

PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:55   
      231     7702    2              FKA_M$CLOSE_ERR='0'B;

   7702  5 000005   000000 450200 xsym               STZ   ! FKA_M$CLOSE_ERR

      232     7703    2              END;

      233     7704
      234     7705    1           IF B$JIT.PROG_ENTRY = %PE_MLINK# THEN

   7705  5 000006   000000 470400 xsym               LDP0    B$JIT$
         5 000007   000170 236100                    LDQ     120,,PR0
         5 000010   777000 376003                    ANQ     -512,DU
         5 000011   030000 116003                    CMPQ    12288,DU
         5 000012   000016 601000 5                  TNZ     s:7708

      235     7706    1              FKA_MON=%YES#;

   7706  5 000013   400000 236003                    LDQ     -131072,DU
         5 000014   000000 756000 xsym               STQ     FKA_MON
         5 000015   000017 710000 5                  TRA     s:7710

      236     7707    1           ELSE
      237     7708    1              FKA_MON=%NO#;

   7708  5 000016   000000 450000 xsym               STZ     FKA_MON

      238     7709
      239     7710    1           CALL M$CMDVAR(FPT_CMDVAR) ALTRET(NONE);

   7710  5 000017   000142 630400 1                  EPPR0   FPT_CMDVAR
         5 000020   420025 713400                    CLIMB   alt,+8213
         5 000021   402400 401760                    pmme    nvectors=6
         5 000022   000026 702000 5                  TSX2    NONE

      240     7711    1           FKA_CMDVAR_EXIST=%YES#;

   7711  5 000023   400000 236003                    LDQ     -131072,DU
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:56   
         5 000024   000000 756000 xsym               STQ     FKA_CMDVAR_EXIST

      241     7712
      242     7713    2           DO WHILE('0'B);

   7713  5 000025   000027 710000 5                  TRA     s:7716

      243     7714    2   NONE:      FKA_CMDVAR_EXIST=%NO#;

   7714  5 000026   000000 450000 xsym  NONE         STZ     FKA_CMDVAR_EXIST

      244     7715    2              END;

      245     7716    1           CALL M$CMDVAR(SET_SILENT) ALTRET(MERR);

   7716  5 000027   000160 630400 1                  EPPR0   SET_SILENT
         5 000030   420025 713400                    CLIMB   alt,+8213
         5 000031   402400 401760                    pmme    nvectors=6
         5 000032   000306 702000 5                  TSX2    MERR

      246     7717    1           FKA_CMDVAR_SET=%YES#;

   7717  5 000033   400000 236003                    LDQ     -131072,DU
         5 000034   000000 756000 xsym               STQ     FKA_CMDVAR_SET

      247     7718
      248     7719    1           CALL M$XCON(FPT_XCON);

   7719  5 000035   000114 630400 1                  EPPR0   FPT_XCON
         5 000036   010003 713400                    CLIMB   4099
         5 000037   400400 401760                    pmme    nvectors=2

      249     7720    1           CALL M$INT(FPT_INT);

   7720  5 000040   000130 630400 1                  EPPR0   FPT_INT
         5 000041   010002 713400                    CLIMB   4098
         5 000042   400000 401760                    pmme    nvectors=1
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:57   

      250     7721
      251     7722    1           FKA_DCB$=DCBADDR(DCBNUM(M$SI));

   7722  5 000043   000000 236007 xsym               LDQ     M$SI,DL
         5 000044   000000 470400 6                  LDP0    0
         5 000045   000000 471500                    LDP1    0,,PR0
         5 000046   100000 236106                    LDQ     0,QL,PR1
         5 000047   000000 756000 xsym               STQ     FKA_DCB$

      252     7723    1           CALL OPEN ALTRET(MERR);

   7723  5 000050   001456 701000 5                  TSX1    OPEN
         5 000051   000306 702000 5                  TSX2    MERR

      253     7724
      254     7725    1           IF F$DCB.ORG# = %INDEXED# THEN

   7725  5 000052   000000 470400 xsym               LDP0    FKA_DCB$
         5 000053   000032 236100                    LDQ     26,,PR0
         5 000054   777000 376003                    ANQ     -512,DU
         5 000055   006000 116003                    CMPQ    3072,DU
         5 000056   000062 601000 5                  TNZ     s:7731

      255     7726    2           DO;                             /* INDEXED FILE                       */

      256     7727    2              CALL INDEXED_SETUP ALTRET(ABORT);

   7727  5 000057   001053 701000 5                  TSX1    INDEXED_SETUP
         5 000060   000315 702000 5                  TSX2    ABORT

      257     7728    2              END;                         /* INDEXED FILE                       */

   7728  5 000061   000064 710000 5                  TRA     s:7734

      258     7729    1           ELSE
      259     7730    2           DO;                             /* IREL FILE                          */
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:58   

      260     7731    2              CALL IREL_SETUP ALTRET(ABORT);

   7731  5 000062   001146 701000 5                  TSX1    IREL_SETUP
         5 000063   000315 702000 5                  TSX2    ABORT

      261     7732    2              END;                         /* IREL FILE                          */

      262     7733
      263     7734    1           CALL M$GDDL(FPT_GDDL) ALTRET(MERR);

   7734  5 000064   000000 630400 2                  EPPR0   FPT_GDDL
         5 000065   430014 713400                    CLIMB   alt,+12300
         5 000066   400000 401760                    pmme    nvectors=1
         5 000067   000306 702000 5                  TSX2    MERR

      264     7735    1           SORT_TABLE.MEM#=VLP_GDDL.AVAIL_PGS#-3;

   7735  5 000070   000076 720000 2                  LXL0    VLP_GDDL+2
         5 000071   777775 621010                    EAX1    -3,X0
         5 000072   002120 741000 2                  STX1    SORT_TABLE+10

      265     7736
      266     7737    1           FKA_KEYSIZE=MAX;

   7737  5 000073   200004 235100                    LDA     MAX,,AUTO
         5 000074   000000 755000 xsym               STA     FKA_KEYSIZE

      267     7738    1           FKA_RECSIZE=MAX+15;

   7738  5 000075   000017 035007                    ADLA    15,DL
         5 000076   000000 755000 xsym               STA     FKA_RECSIZE

      268     7739    1           SORT_TABLE.PRIMARY.INSIZ#=FKA_RECSIZE;

   7739  5 000077   002106 755000 2                  STA     SORT_TABLE

PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:59   
      269     7740    1           ZL_KEYS.KEY1.START#=1;

   7740  5 000100   000001 236007                    LDQ     1,DL
         5 000101   002154 756000 2                  STQ     ZL_KEYS+2

      270     7741    1           ZL_KEYS.KEY1.LENGTH#=MAX+7;

   7741  5 000102   200004 235100                    LDA     MAX,,AUTO
         5 000103   000007 035007                    ADLA    7,DL
         5 000104   002155 755000 2                  STA     ZL_KEYS+3

      271     7742
      272     7743    1           FKA_INDEX_GRAN=0;

   7743  5 000105   000000 450000 xsym               STZ     FKA_INDEX_GRAN

      273     7744    1           CALL M$READ(READ_INDEX) ALTRET(MERR);

   7744  5 000106   000072 630400 1                  EPPR0   READ_INDEX
         5 000107   440000 713400                    CLIMB   alt,read
         5 000110   401400 401760                    pmme    nvectors=4
         5 000111   000306 702000 5                  TSX2    MERR

      274     7745
      275     7746    1           FKA_KTPTR$=PINCRW(FKA_INDEX_BUF$, FM$GRAN.FCEX);

   7746  5 000112   000000 470400 xsym               LDP0    FKA_INDEX_BUF$
         5 000113   000002 220100                    LDX0    2,,PR0
         5 000114   000000 636010                    EAQ     0,X0
         5 000115   000000 036000 xsym               ADLQ    FKA_INDEX_BUF$
         5 000116   000000 756000 xsym               STQ     FKA_KTPTR$

      276     7747    1           FKA_BOUND=FM$KEYTBL(0);

   7747  5 000117   000000 471400 xsym               LDP1    FKA_KTPTR$
         5 000120   100000 236100                    LDQ     0,,PR1
         5 000121   000033 772000                    QRL     27
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:60   
         5 000122   000000 756000 xsym               STQ     FKA_BOUND

      277     7748
      278     7749    1           CALL X$SORT(SORT_TABLE) ALTRET(SORT_ERR);

   7749  5 000123   000001 630400 6                  EPPR0   1
         5 000124   000017 631400 xsym               EPPR1   B_VECTNIL+15
         5 000125   000000 701000 xent               TSX1    X$SORT
         5 000126   000270 702000 5                  TSX2    SORT_ERR

      279     7750
      280     7751    1           IF F$DCB.ORG# = %INDEXED# THEN

   7751  5 000127   000000 470400 xsym               LDP0    FKA_DCB$
         5 000130   000032 236100                    LDQ     26,,PR0
         5 000131   777000 376003                    ANQ     -512,DU
         5 000132   006000 116003                    CMPQ    3072,DU
         5 000133   000174 601000 5                  TNZ     s:7761

      281     7752    2           DO;                             /* INDEXED                            */

      282     7753    2              FITALTKEYS.ALTBLD='0'B;

   7753  5 000134   000000 471400 xsym               LDP1    FKA_ALTKEYS$
         5 000135   000002 236000 6                  LDQ     2
         5 000136   100000 356100                    ANSQ    0,,PR1

      283     7754    2              FITALTKEYS.UNIQUEBLD='0'B;

   7754  5 000137   000000 470400 xsym               LDP0    FKA_ALTKEYS$
         5 000140   000003 236000 6                  LDQ     3
         5 000141   000000 356100                    ANSQ    0,,PR0

      284     7755    3              DO I=1 TO FITALTKEYS.NUMENTS-1;

   7755  5 000142   000001 235007                    LDA     1,DL
         5 000143   200003 755100                    STA     I,,AUTO
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:61   
         5 000144   000165 710000 5                  TRA     s:7757+1

      285     7756    3                 FITALTKEYS.K.UNIQUE(I)=FKA_UNIQUE(I);

   7756  5 000145   200003 236100                    LDQ     I,,AUTO
         5 000146   000006 402007                    MPY     6,DL
         5 000147   200003 235100                    LDA     I,,AUTO
         5 000150   000152 605000 5                  TPL     s:7756+5
         5 000151   000044 035003                    ADLA    36,DU
         5 000152   200034 755100                    STA     EVEN+2,,AUTO
         5 000153   000044 402007                    MPY     36,DL
         5 000154   000000 116003                    CMPQ    0,DU
         5 000155   000157 605000 5                  TPL     s:7756+10
         5 000156   000044 036003                    ADLQ    36,DU
         5 000157   200034 235100                    LDA     EVEN+2,,AUTO
         5 000160   000000 470400 xsym               LDP0    FKA_ALTKEYS$
         5 000161   003106 060405                    CSL     bolr='003'O
         5 000162   000000 000001 xsym               BDSC    FKA_UNIQUE,A             by=0,bit=0,n=1
         5 000163   000004 200001                    BDSC    4,Q,PR0                  by=1,bit=0,n=1

      286     7757    3                 END;

   7757  5 000164   200003 054100                    AOS     I,,AUTO
         5 000165   000000 470400 xsym               LDP0    FKA_ALTKEYS$
         5 000166   000000 236100                    LDQ     0,,PR0
         5 000167   000022 772000                    QRL     18
         5 000170   000377 376007                    ANQ     255,DL
         5 000171   200003 116100                    CMPQ    I,,AUTO
         5 000172   000145 605400 5                  TPNZ    s:7756

      287     7758    2              END;                         /* INDEXED                            */

   7758  5 000173   000231 710000 5                  TRA     s:7768

      288     7759    1           ELSE
      289     7760    2           DO;                             /* IREL                               */

PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:62   
      290     7761    2              CODE20.ALTBLD='0'B;

   7761  5 000174   000000 471400 xsym               LDP1    FKA_CODE20$
         5 000175   000031 236000 xsym               LDQ     B_VECTNIL+25
         5 000176   100001 356100                    ANSQ    1,,PR1

      291     7762    2              CODE20.UNIQUEBLD='0'B;

   7762  5 000177   000004 236000 6                  LDQ     4
         5 000200   100001 356100                    ANSQ    1,,PR1

      292     7763    3              DO I=1 TO IRKEYS.NKEYS-1;

   7763  5 000201   000001 235007                    LDA     1,DL
         5 000202   200003 755100                    STA     I,,AUTO
         5 000203   000224 710000 5                  TRA     s:7765+1

      293     7764    3                 IRKEYS.K.UNIQUE(I)=FKA_UNIQUE(I);

   7764  5 000204   200003 236100                    LDQ     I,,AUTO
         5 000205   000007 402007                    MPY     7,DL
         5 000206   200003 235100                    LDA     I,,AUTO
         5 000207   000211 605000 5                  TPL     s:7764+5
         5 000210   000044 035003                    ADLA    36,DU
         5 000211   200034 755100                    STA     EVEN+2,,AUTO
         5 000212   000044 402007                    MPY     36,DL
         5 000213   000000 116003                    CMPQ    0,DU
         5 000214   000216 605000 5                  TPL     s:7764+10
         5 000215   000044 036003                    ADLQ    36,DU
         5 000216   200034 235100                    LDA     EVEN+2,,AUTO
         5 000217   000000 470400 xsym               LDP0    FKA_IRKEYS$
         5 000220   003106 060405                    CSL     bolr='003'O
         5 000221   000000 000001 xsym               BDSC    FKA_UNIQUE,A             by=0,bit=0,n=1
         5 000222   000006 400001                    BDSC    6,Q,PR0                  by=2,bit=0,n=1

      294     7765    3                 END;

PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:63   
   7765  5 000223   200003 054100                    AOS     I,,AUTO
         5 000224   000000 470400 xsym               LDP0    FKA_IRKEYS$
         5 000225   000000 236100                    LDQ     0,,PR0
         5 000226   000032 376000 xsym               ANQ     B_VECTNIL+26
         5 000227   200003 116100                    CMPQ    I,,AUTO
         5 000230   000204 605400 5                  TPNZ    s:7764

      295     7766    2              END;                         /* IREL                               */

      296     7767
      297     7768    1           ERRCODE='0'B;

   7768  5 000231   002161 450000 2                  STZ     ERRCODE

      298     7769    1           IF FKA_DUPS THEN

   7769  5 000232   000000 234000 xsym               SZN     FKA_DUPS
         5 000233   000240 605000 5                  TPL     s:7775

      299     7770    2           DO;

      300     7771    2              ERRCODE=ERR_DUPS;

   7771  5 000234   000202 236000 1                  LDQ     ERR_DUPS
         5 000235   002161 756000 2                  STQ     ERRCODE

      301     7772    2              DCB#=DCBNUM(M$SI);

   7772  5 000236   000000 236007 xsym               LDQ     M$SI,DL
         5 000237   002162 756000 2                  STQ     DCB#

      302     7773    2              END;

      303     7774
      304     7775    2           CALL FKA$CLOSE(CLOSERR) WHENALTRETURN DO;

   7775  5 000240   200013 630500                    EPPR0   CLOSERR,,AUTO
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:64   
         5 000241   200034 450500                    STP0    EVEN+2,,AUTO
         5 000242   200034 630500                    EPPR0   EVEN+2,,AUTO
         5 000243   000017 631400 xsym               EPPR1   B_VECTNIL+15
         5 000244   000000 701000 xent               TSX1    FKA$CLOSE
         5 000245   000247 702000 5                  TSX2    s:7776
         5 000246   000261 710000 5                  TRA     s:7783

      305     7776    2              IF NOT FKA_DUPS OR CLOSERR.TYPE=%UNEXPECTED THEN

   7776  5 000247   000000 234000 xsym               SZN     FKA_DUPS
         5 000250   000254 605000 5                  TPL     s:7778
         5 000251   200014 220100                    LDX0    CLOSERR+1,,AUTO
         5 000252   000001 100003                    CMPX0   1,DU
         5 000253   000261 601000 5                  TNZ     s:7783

      306     7777    3              DO;

      307     7778    3                 ERRCODE=CLOSERR.ERR;

   7778  5 000254   200013 236100                    LDQ     CLOSERR,,AUTO
         5 000255   002161 756000 2                  STQ     ERRCODE

      308     7779    3                 DCB#=CLOSERR.DCB#;

   7779  5 000256   200014 236100                    LDQ     CLOSERR+1,,AUTO
         5 000257   777777 376007                    ANQ     -1,DL
         5 000260   002162 756000 2                  STQ     DCB#

      309     7780    3                 END;

      310     7781    2              END;

      311     7782
      312     7783    1           IF ERRCODE ~= '0'B THEN

   7783  5 000261   002161 235000 2                  LDA     ERRCODE
         5 000262   000315 601000 5                  TNZ     ABORT
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:65   

      313     7784    1              GOTO ABORT;
      314     7785
      315     7786    1           CALL M$XCON(RESET_XCON);

   7786  5 000263   000122 630400 1                  EPPR0   RESET_XCON
         5 000264   010003 713400                    CLIMB   4099
         5 000265   400400 401760                    pmme    nvectors=2

      316     7787    1           CALL M$EXIT;

   7787  5 000266   000001 713400                    CLIMB   exit
         5 000267   000000 401760                    pmme    nvectors=0

   7783  5 000270                       SORT_ERR     null
      317     7788
      318     7789    1   SORT_ERR: ;
      319     7790    1           ERRCODE=B$TCB$->B$TCB.ALT$->B$ALT.ERR;

   7790  5 000270   000000 470400 xsym               LDP0    B$TCB$
         5 000271   000000 471500                    LDP1    0,,PR0
         5 000272   100102 236100                    LDQ     66,,PR1
         5 000273   002161 756000 2                  STQ     ERRCODE

      320     7791    1           DCB#=B$TCB$->B$TCB.ALT$->B$ALT.DCB#;

   7791  5 000274   000000 471500                    LDP1    0,,PR0
         5 000275   100101 235100                    LDA     65,,PR1
         5 000276   002162 755000 2                  STA     DCB#

      321     7792    1           CALL FKA$CLOSE(CLOSERR) ALTRET(ABORT);

   7792  5 000277   200013 631500                    EPPR1   CLOSERR,,AUTO
         5 000300   200034 451500                    STP1    EVEN+2,,AUTO
         5 000301   200034 630500                    EPPR0   EVEN+2,,AUTO
         5 000302   000017 631400 xsym               EPPR1   B_VECTNIL+15
         5 000303   000000 701000 xent               TSX1    FKA$CLOSE
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:66   
         5 000304   000315 702000 5                  TSX2    ABORT

      322     7793    1           GOTO ABORT;

   7793  5 000305   000315 710000 5                  TRA     ABORT

      323     7794
      324     7795    1   MERR:   ERRCODE=B$TCB$->B$TCB.ALT$->B$ALT.ERR;

   7795  5 000306   000000 470400 xsym  MERR         LDP0    B$TCB$
         5 000307   000000 471500                    LDP1    0,,PR0
         5 000310   100102 236100                    LDQ     66,,PR1
         5 000311   002161 756000 2                  STQ     ERRCODE

      325     7796    1           DCB#=B$TCB$->B$TCB.ALT$->B$ALT.DCB#;

   7796  5 000312   000000 471500                    LDP1    0,,PR0
         5 000313   100101 235100                    LDA     65,,PR1
         5 000314   002162 755000 2                  STA     DCB#

      326     7797    1   ABORT:  IF FKA_MON = %NO# THEN

   7797  5 000315   000000 234000 xsym  ABORT        SZN     FKA_MON
         5 000316   000323 604000 5                  TMI     s:7800

      327     7798    1              CALL XUR$ERRMSG(ERRCODE, DCB#);

   7798  5 000317   000005 630400 6                  EPPR0   5
         5 000320   000020 631400 xsym               EPPR1   B_VECTNIL+16
         5 000321   000000 701000 xent               TSX1    XUR$ERRMSG
         5 000322   000000 011000                    NOP     0

      328     7799
      329     7800    1           CALL M$XCON(RESET_XCON);

   7800  5 000323   000122 630400 1                  EPPR0   RESET_XCON
         5 000324   010003 713400                    CLIMB   4099
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:67   
         5 000325   400400 401760                    pmme    nvectors=2

      330     7801    1           CALL M$XXX(FPT_XXX);

   7801  5 000326   000134 630400 1                  EPPR0   FPT_XXX
         5 000327   000003 713400                    CLIMB   3
         5 000330   400400 401760                    pmme    nvectors=2
         5 000331   001721 710000 5                  TRA     s:8129

      331     7802         %EJECT;
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:68   
      332     7803        /*I*     NAME:     FIELD_START_SETUP
      333     7804                 PURPOSE:  To set up bit offsets to the start of each
      334     7805                           RECFIELD field in the FIELD_START.OFFSET array.
      335     7806                 DESCRIPTION:
      336     7807                      Figure out the starting offset to each field based
      337     7808                 on the alignment rules for the field type and the field
      338     7809                 length.
      339     7810        */
      340     7811    1   FIELD_START_SETUP: PROC;

   7811  5 000332   200022 741300       FIELD_START* STX1  ! I+3,,AUTO

      341     7812        /**/
      342     7813    2     DCL I UBIN;
      343     7814    2     DCL J UBIN;
      344     7815    2     DCL REC_OFFSET UBIN;
      345     7816        %EQU BYTE_ALIGNED = 1;
      346     7817        %EQU NIBBLE_ALIGNED = 2;
      347     7818        %EQU BIT_ALIGNED = 3;
      348     7819        /**/
      349     7820    2              FIELD_START.NWORDS=RECFIELD.NFIELDS# + 1;

   7820  5 000333   000000 470400 xsym               LDP0    FKA_RECFIELD$
         5 000334   000000 471400 xsym               LDP1    FKA_START$
         5 000335   000000 236100                    LDQ     0,,PR0
         5 000336   000032 376000 xsym               ANQ     B_VECTNIL+26
         5 000337   000001 036007                    ADLQ    1,DL
         5 000340   100000 756100                    STQ     0,,PR1

      350     7821    2              REC_OFFSET=0;

   7821  5 000341   200025 450100                    STZ     REC_OFFSET,,AUTO

      351     7822    2              I=0;

   7822  5 000342   200023 450100                    STZ     I,,AUTO

PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:69   
      352     7823
      353     7824    3              DO WHILE(I <= RECFIELD.NFIELDS#-1);

   7824  5 000343   000463 710000 5                  TRA     s:7849

      354     7825
      355     7826    4                 DO CASE(RECFIELD.FIELD.TYPE#(I));

   7826  5 000344   200023 236100                    LDQ     I,,AUTO
         5 000345   000003 402007                    MPY     3,DL
         5 000346   000000 470400 xsym               LDP0    FKA_RECFIELD$
         5 000347   000100 101506                    MRL     fill='000'O
         5 000350   000001 020001                    ADSC6   1,Q,PR0                  cn=0,n=1
         5 000351   200034 020006                    ADSC6   EVEN+2,,AUTO             cn=0,n=6
         5 000352   200034 236100                    LDQ     EVEN+2,,AUTO
         5 000353   000057 136007                    SBLQ    47,DL
         5 000354   000002 116007                    CMPQ    2,DL
         5 000355   000357 602006 5                  TNC     s:7826+11,QL
         5 000356   000454 710000 5                  TRA     s:7844
         5 000357   000361 710000 5                  TRA     s:7829
         5 000360   000432 710000 5                  TRA     s:7838

      356     7827
      357     7828    4                    CASE(%LIST_DATATYPE);

      358     7829    4                       CALL FIELD_START(I+1);

   7829  5 000361   200023 235100                    LDA     I,,AUTO
         5 000362   000001 035007                    ADLA    1,DL
         5 000363   200036 755100                    STA     EVEN+4,,AUTO
         5 000364   200036 631500                    EPPR1   EVEN+4,,AUTO
         5 000365   200027 451500                    STP1    REC_OFFSET+2,,AUTO
         5 000366   000473 701000 5                  TSX1    FIELD_START
         5 000367   000000 011000                    NOP     0

      359     7830    4                       FIELD_START.OFFSET(I)=FIELD_START.OFFSET(I+1);

PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:70   
   7830  5 000370   000000 470400 xsym               LDP0    FKA_START$
         5 000371   200023 720100                    LXL0    I,,AUTO
         5 000372   000002 235110                    LDA     2,X0,PR0
         5 000373   000001 755110                    STA     1,X0,PR0

      360     7831    5                       DO J=2 TO RECFIELD.FIELD.LEN#(I);

   7831  5 000374   000002 235007                    LDA     2,DL
         5 000375   200024 755100                    STA     J,,AUTO
         5 000376   000411 710000 5                  TRA     s:7833+3

      361     7832    5                          CALL FIELD_START(I+1);

   7832  5 000377   200023 235100                    LDA     I,,AUTO
         5 000400   000001 035007                    ADLA    1,DL
         5 000401   200037 755100                    STA     EVEN+5,,AUTO
         5 000402   200037 630500                    EPPR0   EVEN+5,,AUTO
         5 000403   200027 450500                    STP0    REC_OFFSET+2,,AUTO
         5 000404   000473 701000 5                  TSX1    FIELD_START
         5 000405   000000 011000                    NOP     0

      362     7833    5                          END;

   7833  5 000406   200024 235100                    LDA     J,,AUTO
         5 000407   000001 035007                    ADLA    1,DL
         5 000410   200024 755100                    STA     J,,AUTO
         5 000411   200023 236100                    LDQ     I,,AUTO
         5 000412   000003 402007                    MPY     3,DL
         5 000413   000000 470400 xsym               LDP0    FKA_RECFIELD$
         5 000414   000100 101506                    MRL     fill='000'O
         5 000415   000001 120002                    ADSC6   1,Q,PR0                  cn=1,n=2
         5 000416   200034 020006                    ADSC6   EVEN+2,,AUTO             cn=0,n=6
         5 000417   200034 236100                    LDQ     EVEN+2,,AUTO
         5 000420   200024 116100                    CMPQ    J,,AUTO
         5 000421   000377 603000 5                  TRC     s:7832

      363     7834    4                       FIELD_START.OFFSET(I+1)=FIELD_START.OFFSET(I);
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:71   

   7834  5 000422   000000 471400 xsym               LDP1    FKA_START$
         5 000423   200023 720100                    LXL0    I,,AUTO
         5 000424   100001 235110                    LDA     1,X0,PR1
         5 000425   100002 755110                    STA     2,X0,PR1

      364     7835    4                       I=I+1;

   7835  5 000426   200023 235100                    LDA     I,,AUTO
         5 000427   000001 035007                    ADLA    1,DL
         5 000430   200023 755100                    STA     I,,AUTO
         5 000431   000460 710000 5                  TRA     s:7848

      365     7836
      366     7837    4                    CASE(%VLIST_DATATYPE);

      367     7838    4                       CALL FIELD_START(I+1);

   7838  5 000432   200023 235100                    LDA     I,,AUTO
         5 000433   000001 035007                    ADLA    1,DL
         5 000434   200040 755100                    STA     EVEN+6,,AUTO
         5 000435   200040 631500                    EPPR1   EVEN+6,,AUTO
         5 000436   200027 451500                    STP1    REC_OFFSET+2,,AUTO
         5 000437   000473 701000 5                  TSX1    FIELD_START
         5 000440   000000 011000                    NOP     0

      368     7839    4                       FIELD_START.OFFSET(I)=FIELD_START.OFFSET(I+1);

   7839  5 000441   000000 470400 xsym               LDP0    FKA_START$
         5 000442   200023 720100                    LXL0    I,,AUTO
         5 000443   000002 235110                    LDA     2,X0,PR0
         5 000444   000001 755110                    STA     1,X0,PR0

      369     7840    4                       REC_OFFSET=FIELD_START.OFFSET(I);

   7840  5 000445   200023 720100                    LXL0    I,,AUTO
         5 000446   000001 235110                    LDA     1,X0,PR0
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:72   
         5 000447   200025 755100                    STA     REC_OFFSET,,AUTO

      370     7841    4                       I=I+1;

   7841  5 000450   200023 236100                    LDQ     I,,AUTO
         5 000451   000001 036007                    ADLQ    1,DL
         5 000452   200023 756100                    STQ     I,,AUTO
         5 000453   000460 710000 5                  TRA     s:7848

      371     7842
      372     7843    4                    CASE(ELSE);

      373     7844    4                       CALL FIELD_START(I);

   7844  5 000454   200023 631500                    EPPR1   I,,AUTO
         5 000455   200027 451500                    STP1    REC_OFFSET+2,,AUTO
         5 000456   000473 701000 5                  TSX1    FIELD_START
         5 000457   000000 011000                    NOP     0

      374     7845
      375     7846    4                    END;                   /* Do Case                            */

      376     7847
      377     7848    3                 I=I+1;

   7848  5 000460   200023 235100                    LDA     I,,AUTO
         5 000461   000001 035007                    ADLA    1,DL
         5 000462   200023 755100                    STA     I,,AUTO

      378     7849    3                 END;                      /* Do While                           */

   7849  5 000463   000000 470400 xsym               LDP0    FKA_RECFIELD$
         5 000464   000000 236100                    LDQ     0,,PR0
         5 000465   000032 376000 xsym               ANQ     B_VECTNIL+26
         5 000466   200023 116100                    CMPQ    I,,AUTO
         5 000467   000471 600000 5                  TZE     s:7851
         5 000470   000344 603000 5                  TRC     s:7826
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:73   

      379     7850
      380     7851    2              RETURN;

   7851  5 000471   200022 221300                    LDX1  ! I+3,,AUTO
         5 000472   000001 702211                    TSX2  ! 1,X1

      381     7852        %EJECT;
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:74   
      382     7853    2   FIELD_START:  PROC(K);

   7853  5 000473   200026 741300       FIELD_START  STX1  ! REC_OFFSET+1,,AUTO

      383     7854    3     DCL K UBIN;
      384     7855        /**/
      385     7856
      386     7857    4                 DO CASE(RECFIELD.FIELD.TYPE#(K));

   7857  5 000474   200027 470500                    LDP0    @K,,AUTO
         5 000475   000000 236100                    LDQ     0,,PR0
         5 000476   000003 402007                    MPY     3,DL
         5 000477   000000 471400 xsym               LDP1    FKA_RECFIELD$
         5 000500   000100 101506                    MRL     fill='000'O
         5 000501   100001 020001                    ADSC6   1,Q,PR1                  cn=0,n=1
         5 000502   200034 020003                    ADSC6   EVEN+2,,AUTO             cn=0,n=3
         5 000503   200034 220100                    LDX0    EVEN+2,,AUTO
         5 000504   000072 100003                    CMPX0   58,DU
         5 000505   000507 602010 5                  TNC     s:7857+11,X0
         5 000506   000764 710000 5                  TRA     s:7899
         5 000507   000601 710000 5                  TRA     s:7860
         5 000510   000621 710000 5                  TRA     s:7864
         5 000511   000764 710000 5                  TRA     s:7899
         5 000512   000640 710000 5                  TRA     s:7868
         5 000513   000650 710000 5                  TRA     s:7872
         5 000514   000764 710000 5                  TRA     s:7899
         5 000515   000764 710000 5                  TRA     s:7899
         5 000516   000764 710000 5                  TRA     s:7899
         5 000517   000764 710000 5                  TRA     s:7899
         5 000520   000660 710000 5                  TRA     s:7877
         5 000521   000660 710000 5                  TRA     s:7877
         5 000522   000764 710000 5                  TRA     s:7899
         5 000523   000764 710000 5                  TRA     s:7899
         5 000524   000764 710000 5                  TRA     s:7899
         5 000525   000764 710000 5                  TRA     s:7899
         5 000526   000764 710000 5                  TRA     s:7899
         5 000527   000764 710000 5                  TRA     s:7899
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:75   
         5 000530   000764 710000 5                  TRA     s:7899
         5 000531   000764 710000 5                  TRA     s:7899
         5 000532   000764 710000 5                  TRA     s:7899
         5 000533   000764 710000 5                  TRA     s:7899
         5 000534   000601 710000 5                  TRA     s:7860
         5 000535   000725 710000 5                  TRA     s:7885
         5 000536   000764 710000 5                  TRA     s:7899
         5 000537   000621 710000 5                  TRA     s:7864
         5 000540   000660 710000 5                  TRA     s:7877
         5 000541   000764 710000 5                  TRA     s:7899
         5 000542   000764 710000 5                  TRA     s:7899
         5 000543   000764 710000 5                  TRA     s:7899
         5 000544   000764 710000 5                  TRA     s:7899
         5 000545   000764 710000 5                  TRA     s:7899
         5 000546   000660 710000 5                  TRA     s:7877
         5 000547   000764 710000 5                  TRA     s:7899
         5 000550   000764 710000 5                  TRA     s:7899
         5 000551   000764 710000 5                  TRA     s:7899
         5 000552   000764 710000 5                  TRA     s:7899
         5 000553   000764 710000 5                  TRA     s:7899
         5 000554   000764 710000 5                  TRA     s:7899
         5 000555   000764 710000 5                  TRA     s:7899
         5 000556   000764 710000 5                  TRA     s:7899
         5 000557   000660 710000 5                  TRA     s:7877
         5 000560   000745 710000 5                  TRA     s:7894
         5 000561   000745 710000 5                  TRA     s:7894
         5 000562   000745 710000 5                  TRA     s:7894
         5 000563   000745 710000 5                  TRA     s:7894
         5 000564   000745 710000 5                  TRA     s:7894
         5 000565   000764 710000 5                  TRA     s:7899
         5 000566   000764 710000 5                  TRA     s:7899
         5 000567   000764 710000 5                  TRA     s:7899
         5 000570   000764 710000 5                  TRA     s:7899
         5 000571   000745 710000 5                  TRA     s:7894
         5 000572   000660 710000 5                  TRA     s:7877
         5 000573   000764 710000 5                  TRA     s:7899
         5 000574   000764 710000 5                  TRA     s:7899
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:76   
         5 000575   000650 710000 5                  TRA     s:7872
         5 000576   000640 710000 5                  TRA     s:7868
         5 000577   000735 710000 5                  TRA     s:7889
         5 000600   000650 710000 5                  TRA     s:7872

      387     7858
      388     7859    4                    CASE(%NO_DATATYPE,%CHAR_DATATYPE);

      389     7860    4                       CALL SET_FIELD_START(%BYTE_ALIGNED);

   7860  5 000601   000007 236000 6                  LDQ     7
         5 000602   200031 756100                    STQ     @K+2,,AUTO
         5 000603   000766 701000 5                  TSX1    SET_FIELD_START
         5 000604   000000 011000                    NOP     0

      390     7861    4                       REC_OFFSET=REC_OFFSET + (RECFIELD.FIELD.LEN#(K)*9);

   7861  5 000605   200027 470500                    LDP0    @K,,AUTO
         5 000606   000000 236100                    LDQ     0,,PR0
         5 000607   000003 402007                    MPY     3,DL
         5 000610   000000 471400 xsym               LDP1    FKA_RECFIELD$
         5 000611   000100 101506                    MRL     fill='000'O
         5 000612   100001 120002                    ADSC6   1,Q,PR1                  cn=1,n=2
         5 000613   200034 020006                    ADSC6   EVEN+2,,AUTO             cn=0,n=6
         5 000614   200034 236100                    LDQ     EVEN+2,,AUTO
         5 000615   000011 402007                    MPY     9,DL
         5 000616   200025 036100                    ADLQ    REC_OFFSET,,AUTO
         5 000617   200025 756100                    STQ     REC_OFFSET,,AUTO
         5 000620   000764 710000 5                  TRA     s:7899

      391     7862
      392     7863    4                    CASE(%SBIN_DATATYPE,%UBIN_DATATYPE);

      393     7864    4                       CALL SET_FIELD_START(%BIT_ALIGNED);

   7864  5 000621   000010 236000 6                  LDQ     8
         5 000622   200031 756100                    STQ     @K+2,,AUTO
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:77   
         5 000623   000766 701000 5                  TSX1    SET_FIELD_START
         5 000624   000000 011000                    NOP     0

      394     7865    4                       REC_OFFSET=REC_OFFSET + RECFIELD.FIELD.LEN#(K);

   7865  5 000625   200027 470500                    LDP0    @K,,AUTO
         5 000626   000000 236100                    LDQ     0,,PR0
         5 000627   000003 402007                    MPY     3,DL
         5 000630   000000 471400 xsym               LDP1    FKA_RECFIELD$
         5 000631   000100 101506                    MRL     fill='000'O
         5 000632   100001 120002                    ADSC6   1,Q,PR1                  cn=1,n=2
         5 000633   200034 020006                    ADSC6   EVEN+2,,AUTO             cn=0,n=6
         5 000634   200034 236100                    LDQ     EVEN+2,,AUTO
         5 000635   200025 036100                    ADLQ    REC_OFFSET,,AUTO
         5 000636   200025 756100                    STQ     REC_OFFSET,,AUTO
         5 000637   000764 710000 5                  TRA     s:7899

      395     7866
      396     7867    4                    CASE(%SFLT_DATATYPE,%UTS_DATATYPE);

      397     7868    4                       CALL SET_FIELD_START(%BYTE_ALIGNED);

   7868  5 000640   000007 236000 6                  LDQ     7
         5 000641   200031 756100                    STQ     @K+2,,AUTO
         5 000642   000766 701000 5                  TSX1    SET_FIELD_START
         5 000643   000000 011000                    NOP     0

      398     7869    4                       REC_OFFSET=REC_OFFSET + 36;

   7869  5 000644   200025 235100                    LDA     REC_OFFSET,,AUTO
         5 000645   000044 035007                    ADLA    36,DL
         5 000646   200025 755100                    STA     REC_OFFSET,,AUTO
         5 000647   000764 710000 5                  TRA     s:7899

      399     7870
      400     7871    4                    CASE(%DFLT_DATATYPE,%DATE_DATATYPE,%TIME_DATATYPE);

PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:78   
      401     7872    4                       CALL SET_FIELD_START(%BYTE_ALIGNED);

   7872  5 000650   000007 236000 6                  LDQ     7
         5 000651   200031 756100                    STQ     @K+2,,AUTO
         5 000652   000766 701000 5                  TSX1    SET_FIELD_START
         5 000653   000000 011000                    NOP     0

      402     7873    4                       REC_OFFSET=REC_OFFSET + 72;

   7873  5 000654   200025 235100                    LDA     REC_OFFSET,,AUTO
         5 000655   000110 035007                    ADLA    72,DL
         5 000656   200025 755100                    STA     REC_OFFSET,,AUTO
         5 000657   000764 710000 5                  TRA     s:7899

      403     7874
      404     7875    4                    CASE(%PDLA_DATATYPE,%PDTA_DATATYPE,%PDLE_DATATYPE,

      405     7876    4                           %PDTE_DATATYPE,%PDFLT_DATATYPE,%PDNS_DATATYPE);
      406     7877    4                       CALL SET_FIELD_START(%NIBBLE_ALIGNED);

   7877  5 000660   000011 236000 6                  LDQ     9
         5 000661   200031 756100                    STQ     @K+2,,AUTO
         5 000662   000766 701000 5                  TSX1    SET_FIELD_START
         5 000663   000000 011000                    NOP     0

      407     7878    4                       REC_OFFSET=REC_OFFSET + ((RECFIELD.DECFIELD.LEN#(K)/2)*9);

   7878  5 000664   200027 470500                    LDP0    @K,,AUTO
         5 000665   000000 236100                    LDQ     0,,PR0
         5 000666   000003 402007                    MPY     3,DL
         5 000667   000000 471400 xsym               LDP1    FKA_RECFIELD$
         5 000670   000100 101506                    MRL     fill='000'O
         5 000671   100001 120001                    ADSC6   1,Q,PR1                  cn=1,n=1
         5 000672   200034 020006                    ADSC6   EVEN+2,,AUTO             cn=0,n=6
         5 000673   200034 236100                    LDQ     EVEN+2,,AUTO
         5 000674   000001 772000                    QRL     1
         5 000675   000011 402007                    MPY     9,DL
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:79   
         5 000676   200025 036100                    ADLQ    REC_OFFSET,,AUTO
         5 000677   200025 756100                    STQ     REC_OFFSET,,AUTO

      408     7879    4                       IF MOD(RECFIELD.DECFIELD.LEN#(K),2)~=0 THEN /* odd length */

   7879  5 000700   000000 236100                    LDQ     0,,PR0
         5 000701   000003 402007                    MPY     3,DL
         5 000702   000100 101506                    MRL     fill='000'O
         5 000703   100001 120001                    ADSC6   1,Q,PR1                  cn=1,n=1
         5 000704   200034 020006                    ADSC6   EVEN+2,,AUTO             cn=0,n=6
         5 000705   200034 236100                    LDQ     EVEN+2,,AUTO
         5 000706   000001 376007                    ANQ     1,DL
         5 000707   000764 600000 5                  TZE     s:7899

      409     7880    4                          IF MOD(REC_OFFSET,9)=0 THEN

   7880  5 000710   200025 235100                    LDA     REC_OFFSET,,AUTO
         5 000711   000043 773000                    LRL     35
         5 000712   000011 507007                    DVF     9,DL
         5 000713   000000 116003                    CMPQ    0,DU
         5 000714   000721 601000 5                  TNZ     s:7882

      410     7881    4                             REC_OFFSET=REC_OFFSET+5; /* even nibble boundary    */

   7881  5 000715   200025 235100                    LDA     REC_OFFSET,,AUTO
         5 000716   000005 035007                    ADLA    5,DL
         5 000717   200025 755100                    STA     REC_OFFSET,,AUTO
         5 000720   000764 710000 5                  TRA     s:7899

      411     7882    4                          ELSE REC_OFFSET=REC_OFFSET+4; /* odd nibble boundary   */

   7882  5 000721   200025 235100                    LDA     REC_OFFSET,,AUTO
         5 000722   000004 035007                    ADLA    4,DL
         5 000723   200025 755100                    STA     REC_OFFSET,,AUTO
         5 000724   000764 710000 5                  TRA     s:7899

      412     7883
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:80   
      413     7884    4                    CASE(%TEXTC_DATATYPE);

      414     7885    4                       CALL SET_FIELD_START(%BYTE_ALIGNED);

   7885  5 000725   000007 236000 6                  LDQ     7
         5 000726   200031 756100                    STQ     @K+2,,AUTO
         5 000727   000766 701000 5                  TSX1    SET_FIELD_START
         5 000730   000000 011000                    NOP     0

      415     7886    4                       REC_OFFSET=REC_OFFSET + 9;

   7886  5 000731   200025 235100                    LDA     REC_OFFSET,,AUTO
         5 000732   000011 035007                    ADLA    9,DL
         5 000733   200025 755100                    STA     REC_OFFSET,,AUTO
         5 000734   000764 710000 5                  TRA     s:7899

      416     7887
      417     7888    4                    CASE(%TEXTH_DATATYPE);

      418     7889    4                       CALL SET_FIELD_START(%BYTE_ALIGNED);

   7889  5 000735   000007 236000 6                  LDQ     7
         5 000736   200031 756100                    STQ     @K+2,,AUTO
         5 000737   000766 701000 5                  TSX1    SET_FIELD_START
         5 000740   000000 011000                    NOP     0

      419     7890    4                       REC_OFFSET=REC_OFFSET + 18;

   7890  5 000741   200025 235100                    LDA     REC_OFFSET,,AUTO
         5 000742   000022 035007                    ADLA    18,DL
         5 000743   200025 755100                    STA     REC_OFFSET,,AUTO
         5 000744   000764 710000 5                  TRA     s:7899

      420     7891
      421     7892    4                    CASE(%UDNS_DATATYPE,%UDLS_DATATYPE,%UDTS_DATATYPE,

      422     7893    4                           %UDLO_DATATYPE,%UDTO_DATATYPE,%UDFLT_DATATYPE);
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:81   
      423     7894    4                       CALL SET_FIELD_START(%BYTE_ALIGNED);

   7894  5 000745   000007 236000 6                  LDQ     7
         5 000746   200031 756100                    STQ     @K+2,,AUTO
         5 000747   000766 701000 5                  TSX1    SET_FIELD_START
         5 000750   000000 011000                    NOP     0

      424     7895    4                       REC_OFFSET=REC_OFFSET + (RECFIELD.DECFIELD.LEN#(K)*9);

   7895  5 000751   200027 470500                    LDP0    @K,,AUTO
         5 000752   000000 236100                    LDQ     0,,PR0
         5 000753   000003 402007                    MPY     3,DL
         5 000754   000000 471400 xsym               LDP1    FKA_RECFIELD$
         5 000755   000100 101506                    MRL     fill='000'O
         5 000756   100001 120001                    ADSC6   1,Q,PR1                  cn=1,n=1
         5 000757   200034 020006                    ADSC6   EVEN+2,,AUTO             cn=0,n=6
         5 000760   200034 236100                    LDQ     EVEN+2,,AUTO
         5 000761   000011 402007                    MPY     9,DL
         5 000762   200025 036100                    ADLQ    REC_OFFSET,,AUTO
         5 000763   200025 756100                    STQ     REC_OFFSET,,AUTO

      425     7896
      426     7897    4                    END;                   /* Do Case                            */

      427     7898
      428     7899    3                 RETURN;

   7899  5 000764   200026 221300                    LDX1  ! REC_OFFSET+1,,AUTO
         5 000765   000001 702211                    TSX2  ! 1,X1

      429     7900        %EJECT;
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:82   
      430     7901    3   SET_FIELD_START: PROC (ALIGN_TYPE);

   7901  5 000766   200030 741300       SET_FIELD_S* STX1  ! @K+1,,AUTO

      431     7902    4     DCL ALIGN_TYPE UBIN;
      432     7903    4     DCL EVEN UBIN;
      433     7904        /**/
      434     7905
      435     7906    5                    DO CASE(ALIGN_TYPE);

   7906  5 000767   200031 470500                    LDP0    @ALIGN_TYPE,,AUTO
         5 000770   000000 235100                    LDA     0,,PR0
         5 000771   000003 115007                    CMPA    3,DL
         5 000772   000774 602005 5                  TNC     s:7906+5,AL
         5 000773   001044 710000 5                  TRA     s:7923
         5 000774   001044 710000 5                  TRA     s:7923
         5 000775   000777 710000 5                  TRA     s:7908
         5 000776   001015 710000 5                  TRA     s:7912

      436     7907    5                       CASE(%BYTE_ALIGNED);

      437     7908    5                          IF MOD(REC_OFFSET,9)~=0 THEN

   7908  5 000777   200025 236100                    LDQ     REC_OFFSET,,AUTO
         5 001000   000044 737000                    LLS     36
         5 001001   000043 773000                    LRL     35
         5 001002   000011 507007                    DVF     9,DL
         5 001003   000000 116003                    CMPQ    0,DU
         5 001004   001044 600000 5                  TZE     s:7923

      438     7909    5                             REC_OFFSET=((REC_OFFSET/9)*9) + 9;

   7909  5 001005   200025 235100                    LDA     REC_OFFSET,,AUTO
         5 001006   000043 773000                    LRL     35
         5 001007   000011 507007                    DVF     9,DL
         5 001010   000044 733000                    LRS     36
         5 001011   000011 402007                    MPY     9,DL
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:83   
         5 001012   000011 036007                    ADLQ    9,DL
         5 001013   200025 756100                    STQ     REC_OFFSET,,AUTO
         5 001014   001044 710000 5                  TRA     s:7923

      439     7910
      440     7911    5                       CASE(%NIBBLE_ALIGNED);

      441     7912    5                          EVEN=(REC_OFFSET/9)*9;

   7912  5 001015   200025 236100                    LDQ     REC_OFFSET,,AUTO
         5 001016   000044 737000                    LLS     36
         5 001017   000043 773000                    LRL     35
         5 001020   000011 507007                    DVF     9,DL
         5 001021   000044 733000                    LRS     36
         5 001022   000011 402007                    MPY     9,DL
         5 001023   200032 756100                    STQ     EVEN,,AUTO

      442     7913    5                          IF REC_OFFSET > EVEN AND REC_OFFSET < EVEN+5 THEN

   7913  5 001024   200025 116100                    CMPQ    REC_OFFSET,,AUTO
         5 001025   001034 603000 5                  TRC     s:7915
         5 001026   000005 036007                    ADLQ    5,DL
         5 001027   200025 116100                    CMPQ    REC_OFFSET,,AUTO
         5 001030   001034 602000 5                  TNC     s:7915
         5 001031   001034 600000 5                  TZE     s:7915

      443     7914    5                             REC_OFFSET=EVEN+5;

   7914  5 001032   200025 756100                    STQ     REC_OFFSET,,AUTO
         5 001033   001044 710000 5                  TRA     s:7923

      444     7915    5                          ELSE IF REC_OFFSET > EVEN+5 THEN

   7915  5 001034   200032 236100                    LDQ     EVEN,,AUTO
         5 001035   000005 036007                    ADLQ    5,DL
         5 001036   200025 116100                    CMPQ    REC_OFFSET,,AUTO
         5 001037   001044 603000 5                  TRC     s:7923
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:84   

      445     7916    5                                REC_OFFSET=EVEN+9;

   7916  5 001040   200032 235100                    LDA     EVEN,,AUTO
         5 001041   000011 035007                    ADLA    9,DL
         5 001042   200025 755100                    STA     REC_OFFSET,,AUTO
         5 001043   001044 710000 5                  TRA     s:7923

      446     7917
      447     7918    5                       CASE(%BIT_ALIGNED);

      448     7919                                                /* Don't do anything.                 */
      449     7920
      450     7921    5                       END;                /* Do Case                            */

      451     7922
      452     7923    4                    FIELD_START.OFFSET(K)=REC_OFFSET; /* K defined in FIELD_START */

   7923  5 001044   200027 471500                    LDP1    @K,,AUTO
         5 001045   100000 720100                    LXL0    0,,PR1
         5 001046   200025 235100                    LDA     REC_OFFSET,,AUTO
         5 001047   000000 473400 xsym               LDP3    FKA_START$
         5 001050   300001 755110                    STA     1,X0,PR3

      453     7924    4                    RETURN;

   7924  5 001051   200030 221300                    LDX1  ! @K+1,,AUTO
         5 001052   000001 702211                    TSX2  ! 1,X1

      454     7925
      455     7926    4            END SET_FIELD_START;
      456     7927
      457     7928    3         END FIELD_START;
      458     7929
      459     7930    2      END FIELD_START_SETUP;
      460     7931        %EJECT;
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:85   
      461     7932        /*I*     NAME:     INDEXED_SETUP
      462     7933                 PURPOSE:  To handle set up for indexed files
      463     7934                 DESCRIPTION:
      464     7935
      465     7936                      Build a pointer to the altkey information, and
      466     7937                 find the largest key.
      467     7938        */
      468     7939         %EJECT;
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:86   
      469     7940    1   INDEXED_SETUP: PROC ALTRET;

   7940  5 001053   200016 741300       INDEXED_SET* STX1  ! CLOSERR+3,,AUTO

      470     7941        /* */
      471     7942    2              FKA_ALTKEYS$=PINCRW(ADDR(FKA_ALTKEY_BFR.FPARAM), 5);

   7942  5 001054   000012 236000 6                  LDQ     10
         5 001055   000000 756000 xsym               STQ     FKA_ALTKEYS$

      472     7943    2              I=8;

   7943  5 001056   000010 235007                    LDA     8,DL
         5 001057   200003 755100                    STA     I,,AUTO

      473     7944    2              CALL XSF$LOCCODE(FKA_ALTKEYS$, I) ALTRET(NOALT);

   7944  5 001060   200003 630500                    EPPR0   I,,AUTO
         5 001061   200035 450500                    STP0    EVEN+3,,AUTO
         5 001062   000013 236000 6                  LDQ     11
         5 001063   200034 756100                    STQ     EVEN+2,,AUTO
         5 001064   200034 630500                    EPPR0   EVEN+2,,AUTO
         5 001065   000020 631400 xsym               EPPR1   B_VECTNIL+16
         5 001066   000000 701000 xent               TSX1    XSF$LOCCODE
         5 001067   001142 702000 5                  TSX2    NOALT

      474     7945
      475     7946    2              MAX=0;

   7946  5 001070   200004 450100                    STZ     MAX,,AUTO

      476     7947    3              DO I=0 TO FITALTKEYS.NUMENTS-1;

   7947  5 001071   200003 450100                    STZ     I,,AUTO
         5 001072   001131 710000 5                  TRA     s:7952+1

      477     7948    3                 FITALTKEYS.K.DUPKEY(I)='0'B;
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:87   

   7948  5 001073   200003 236100                    LDQ     I,,AUTO
         5 001074   000006 402007                    MPY     6,DL
         5 001075   000000 470400 xsym               LDP0    FKA_ALTKEYS$
         5 001076   000000 620006                    EAX0    0,QL
         5 001077   000014 236000 6                  LDQ     12
         5 001100   000004 356110                    ANSQ    4,X0,PR0

      478     7949    3                 FKA_UNIQUE(I)=FITALTKEYS.K.UNIQUE(I);

   7949  5 001101   200003 236100                    LDQ     I,,AUTO
         5 001102   000330 402007                    MPY     216,DL
         5 001103   000000 116003                    CMPQ    0,DU
         5 001104   001106 605000 5                  TPL     s:7949+5
         5 001105   000044 036003                    ADLQ    36,DU
         5 001106   200003 235100                    LDA     I,,AUTO
         5 001107   001111 605000 5                  TPL     s:7949+8
         5 001110   000044 035003                    ADLA    36,DU
         5 001111   000000 470400 xsym               LDP0    FKA_ALTKEYS$
         5 001112   003005 060506                    CSL     bolr='003'O
         5 001113   000004 200001                    BDSC    4,Q,PR0                  by=1,bit=0,n=1
         5 001114   000000 000001 xsym               BDSC    FKA_UNIQUE,A             by=0,bit=0,n=1

      479     7950    3                 IF FITALTKEYS.K.KEYL(I) > MAX THEN

   7950  5 001115   200003 236100                    LDQ     I,,AUTO
         5 001116   000006 402007                    MPY     6,DL
         5 001117   000001 236106                    LDQ     1,QL,PR0
         5 001120   000033 772000                    QRL     27
         5 001121   200004 116100                    CMPQ    MAX,,AUTO
         5 001122   001130 604400 5                  TMOZ    s:7952

      480     7951    3                    MAX=FITALTKEYS.K.KEYL(I);

   7951  5 001123   200003 236100                    LDQ     I,,AUTO
         5 001124   000006 402007                    MPY     6,DL
         5 001125   000001 236106                    LDQ     1,QL,PR0
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:88   
         5 001126   000033 772000                    QRL     27
         5 001127   200004 756100                    STQ     MAX,,AUTO

      481     7952    3                 END;

   7952  5 001130   200003 054100                    AOS     I,,AUTO
         5 001131   000000 470400 xsym               LDP0    FKA_ALTKEYS$
         5 001132   000000 236100                    LDQ     0,,PR0
         5 001133   000022 772000                    QRL     18
         5 001134   000377 376007                    ANQ     255,DL
         5 001135   200003 116100                    CMPQ    I,,AUTO
         5 001136   001073 605400 5                  TPNZ    s:7948

      482     7953
      483     7954    2              FKA_NUMKEYS=FITALTKEYS.NUMENTS;

   7954  5 001137   000000 756000 xsym               STQ     FKA_NUMKEYS

      484     7955
      485     7956    2              RETURN;

   7956  5 001140   200016 221300                    LDX1  ! CLOSERR+3,,AUTO
         5 001141   000001 702211                    TSX2  ! 1,X1

      486     7957    2   NOALT:     ERRCODE=ERR_NOALTINDX;

   7957  5 001142   000201 236000 1     NOALT        LDQ     ERR_NOALTINDX
         5 001143   002161 756000 2                  STQ     ERRCODE

      487     7958        /*E*   ERROR:  FKA-E$NOALTINDX-0
      488     7959               MESSAGE:  There are no alternate indexes in this file.
      489     7960        */
      490     7961    2              ALTRETURN;

   7961  5 001144   200016 221300                    LDX1  ! CLOSERR+3,,AUTO
         5 001145   000000 702211                    TSX2  ! 0,X1

PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:89   
      491     7962    2      END INDEXED_SETUP;
      492     7963         %EJECT;
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:90   
      493     7964        /*I*     NAME:     IREL_SETUP
      494     7965                 PURPOSE:  Part one of set up for IREL files
      495     7966                 DESCRIPTION:
      496     7967
      497     7968                      Find and build pointers to all of the IREL
      498     7969                 information that we need.
      499     7970        */
      500     7971         %EJECT;
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:91   
      501     7972    1   IREL_SETUP: PROC ALTRET;

   7972  5 001146   200016 741300       IREL_SETUP   STX1  ! CLOSERR+3,,AUTO

      502     7973    2     DCL I SBIN;
      503     7974    2     DCL START SBIN;
      504     7975    2     DCL LEN SBIN;
      505     7976        /* */
      506     7977    2              FKA_RECFIELD$=PINCRW(ADDR(FKA_ALTKEY_BFR.FPARAM), 5);

   7977  5 001147   000012 236000 6                  LDQ     10
         5 001150   000000 756000 xsym               STQ     FKA_RECFIELD$

      507     7978    2              I=18;

   7978  5 001151   000022 235007                    LDA     18,DL
         5 001152   200017 755100                    STA     I,,AUTO

      508     7979    2              CALL XSF$LOCCODE(FKA_RECFIELD$, I) ALTRET(NOALT);

   7979  5 001153   200017 630500                    EPPR0   I,,AUTO
         5 001154   200035 450500                    STP0    EVEN+3,,AUTO
         5 001155   000015 236000 6                  LDQ     13
         5 001156   200034 756100                    STQ     EVEN+2,,AUTO
         5 001157   200034 630500                    EPPR0   EVEN+2,,AUTO
         5 001160   000020 631400 xsym               EPPR1   B_VECTNIL+16
         5 001161   000000 701000 xent               TSX1    XSF$LOCCODE
         5 001162   001243 702000 5                  TSX2    NOALT

      509     7980
      510     7981    2              FKA_CODE19$=PINCRW(ADDR(FKA_ALTKEY_BFR.FPARAM), 5);

   7981  5 001163   000012 236000 6                  LDQ     10
         5 001164   000000 756000 xsym               STQ     FKA_CODE19$

      511     7982    2              I=19;

PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:92   
   7982  5 001165   000023 235007                    LDA     19,DL
         5 001166   200017 755100                    STA     I,,AUTO

      512     7983    2              CALL XSF$LOCCODE(FKA_CODE19$, I) ALTRET(NOALT);

   7983  5 001167   200017 630500                    EPPR0   I,,AUTO
         5 001170   200035 450500                    STP0    EVEN+3,,AUTO
         5 001171   000016 236000 6                  LDQ     14
         5 001172   200034 756100                    STQ     EVEN+2,,AUTO
         5 001173   200034 630500                    EPPR0   EVEN+2,,AUTO
         5 001174   000020 631400 xsym               EPPR1   B_VECTNIL+16
         5 001175   000000 701000 xent               TSX1    XSF$LOCCODE
         5 001176   001243 702000 5                  TSX2    NOALT

      513     7984
      514     7985    2              FKA_CODE20$=PINCRW(ADDR(FKA_ALTKEY_BFR.FPARAM), 5);

   7985  5 001177   000012 236000 6                  LDQ     10
         5 001200   000000 756000 xsym               STQ     FKA_CODE20$

      515     7986    2              I=20;

   7986  5 001201   000024 235007                    LDA     20,DL
         5 001202   200017 755100                    STA     I,,AUTO

      516     7987    2              CALL XSF$LOCCODE(FKA_CODE20$, I) ALTRET(NOALT);

   7987  5 001203   200017 630500                    EPPR0   I,,AUTO
         5 001204   200035 450500                    STP0    EVEN+3,,AUTO
         5 001205   000017 236000 6                  LDQ     15
         5 001206   200034 756100                    STQ     EVEN+2,,AUTO
         5 001207   200034 630500                    EPPR0   EVEN+2,,AUTO
         5 001210   000020 631400 xsym               EPPR1   B_VECTNIL+16
         5 001211   000000 701000 xent               TSX1    XSF$LOCCODE
         5 001212   001243 702000 5                  TSX2    NOALT

      517     7988
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:93   
      518     7989    2              CALL FIELD_START_SETUP;

   7989  5 001213   000332 701000 5                  TSX1    FIELD_START_SETUP
         5 001214   000000 011000                    NOP     0

      519     7990    2              CALL IRSETUP;

   7990  5 001215   001247 701000 5                  TSX1    IRSETUP
         5 001216   000000 011000                    NOP     0

      520     7991
      521     7992    2              SORT_TABLE.SECONDARY.KCE$ = ENTADDR(FKA$COMP);

   7992  5 001217   000000 636000 xent               EAQ     FKA$COMP
         5 001220   002142 756000 2                  STQ     SORT_TABLE+28

      522     7993                                                /* Check for degenerate case.         */
      523     7994    3              DO I = 0 TO FKA_NUMKEYS - 1;

   7994  5 001221   200017 450100                    STZ     I,,AUTO
         5 001222   001234 710000 5                  TRA     s:7997+1

      524     7995    3                 IF NOT IRKEYS.K.DEGENERATE(I) THEN /* Not a degenerate case.    */

   7995  5 001223   200017 236100                    LDQ     I,,AUTO
         5 001224   000007 402007                    MPY     7,DL
         5 001225   000000 470400 xsym               LDP0    FKA_IRKEYS$
         5 001226   000006 236106                    LDQ     6,QL,PR0
         5 001227   040000 316007                    CANQ    16384,DL
         5 001230   001233 601000 5                  TNZ     s:7997

      525     7996    3                    RETURN;

   7996  5 001231   200016 221300                    LDX1  ! CLOSERR+3,,AUTO
         5 001232   000001 702211                    TSX2  ! 1,X1

      526     7997    3                 END;
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:94   

   7997  5 001233   200017 054100                    AOS     I,,AUTO
         5 001234   200017 236100                    LDQ     I,,AUTO
         5 001235   000000 116000 xsym               CMPQ    FKA_NUMKEYS
         5 001236   001223 604000 5                  TMI     s:7995

      527     7998                                           /* Don't need FKA$COMP if degenerate case. */
      528     7999    2              SORT_TABLE.SECONDARY.KCE$ = ENTADDR(NIL);

   7999  5 001237   000002 236000 xsym               LDQ     B_VECTNIL+2
         5 001240   002142 756000 2                  STQ     SORT_TABLE+28

      529     8000
      530     8001    2              RETURN;

   8001  5 001241   200016 221300                    LDX1  ! CLOSERR+3,,AUTO
         5 001242   000001 702211                    TSX2  ! 1,X1

      531     8002    2   NOALT:     ERRCODE=ERR_NOALTINDX;

   8002  5 001243   000201 236000 1     NOALT        LDQ     ERR_NOALTINDX
         5 001244   002161 756000 2                  STQ     ERRCODE

      532     8003    2              ALTRETURN;

   8003  5 001245   200016 221300                    LDX1  ! CLOSERR+3,,AUTO
         5 001246   000000 702211                    TSX2  ! 0,X1

      533     8004    2      END IREL_SETUP;
      534     8005         %EJECT;
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:95   
      535     8006        /*I*     NAME:     IRSETUP
      536     8007                 PURPOSE:  Part two of set up for IREL files
      537     8008                 DESCRIPTION:
      538     8009
      539     8010                      The information has to be moved from the various
      540     8011                 code blocks to some more coherent structures.  Again,
      541     8012                 we have to find the size of the largest key.
      542     8013        */
      543     8014         %EJECT;
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:96   
      544     8015    1   IRSETUP:   PROC;

   8015  5 001247   200022 741300       IRSETUP      STX1  ! I+3,,AUTO

      545     8016        /* */
      546     8017    2              IRKEYS.NKEYS=CODE19.NKEYS;

   8017  5 001250   000000 470400 xsym               LDP0    FKA_CODE19$
         5 001251   000000 471400 xsym               LDP1    FKA_IRKEYS$
         5 001252   000000 236100                    LDQ     0,,PR0
         5 001253   100000 552134                    STBQ    0,'34'O,PR1

      547     8018    2              N=0;

   8018  5 001254   200007 450100                    STZ     N,,AUTO

      548     8019    2              MAX=0;

   8019  5 001255   200004 450100                    STZ     MAX,,AUTO

      549     8020    3              DO I=0 TO CODE19.NKEYS-1;

   8020  5 001256   200003 450100                    STZ     I,,AUTO
         5 001257   001445 710000 5                  TRA     s:8039+1

      550     8021    3                 TOTAL = 0;

   8021  5 001260   200011 450100                    STZ     TOTAL,,AUTO

      551     8022    3                 IRKEYS.K.FIRSTFIELD(I) = N;

   8022  5 001261   200003 236100                    LDQ     I,,AUTO
         5 001262   000007 402007                    MPY     7,DL
         5 001263   200007 720100                    LXL0    N,,AUTO
         5 001264   000000 470400 xsym               LDP0    FKA_IRKEYS$
         5 001265   000004 740106                    STX0    4,QL,PR0

PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:97   
      552     8023    3                 IRKEYS.K.UNIQUE(I) = CODE19.K.UNIQUE(I);

   8023  5 001266   200003 236100                    LDQ     I,,AUTO
         5 001267   000007 402007                    MPY     7,DL
         5 001270   000000 621006                    EAX1    0,QL
         5 001271   200003 236100                    LDQ     I,,AUTO
         5 001272   000022 402007                    MPY     18,DL
         5 001273   000000 116003                    CMPQ    0,DU
         5 001274   001276 605000 5                  TPL     s:8023+8
         5 001275   000044 036003                    ADLQ    36,DU
         5 001276   200034 756100                    STQ     EVEN+2,,AUTO
         5 001277   000000 636011                    EAQ     0,X1
         5 001300   000022 732000                    QRS     18
         5 001301   000044 402007                    MPY     36,DL
         5 001302   000000 116003                    CMPQ    0,DU
         5 001303   001305 605000 5                  TPL     s:8023+15
         5 001304   000044 036003                    ADLQ    36,DU
         5 001305   000000 471400 xsym               LDP1    FKA_CODE19$
         5 001306   200034 235100                    LDA     EVEN+2,,AUTO
         5 001307   003106 060505                    CSL     bolr='003'O
         5 001310   100001 010001                    BDSC    1,A,PR1                  by=0,bit=1,n=1
         5 001311   000006 400001                    BDSC    6,Q,PR0                  by=2,bit=0,n=1

      553     8024    3                 FKA_UNIQUE(I) = CODE19.K.UNIQUE(I);

   8024  5 001312   200003 236100                    LDQ     I,,AUTO
         5 001313   000022 402007                    MPY     18,DL
         5 001314   000000 116003                    CMPQ    0,DU
         5 001315   001317 605000 5                  TPL     s:8024+5
         5 001316   000044 036003                    ADLQ    36,DU
         5 001317   200003 235100                    LDA     I,,AUTO
         5 001320   001322 605000 5                  TPL     s:8024+8
         5 001321   000044 035003                    ADLA    36,DU
         5 001322   000000 471400 xsym               LDP1    FKA_CODE19$
         5 001323   003005 060506                    CSL     bolr='003'O
         5 001324   100001 010001                    BDSC    1,Q,PR1                  by=0,bit=1,n=1
         5 001325   000000 000001 xsym               BDSC    FKA_UNIQUE,A             by=0,bit=0,n=1
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:98   

      554     8025    3                 IRKEYS.K.FDA(I) = CODE20.K.FDA(I);

   8025  5 001326   200003 236100                    LDQ     I,,AUTO
         5 001327   000007 402007                    MPY     7,DL
         5 001330   000000 621006                    EAX1    0,QL
         5 001331   200003 236100                    LDQ     I,,AUTO
         5 001332   000003 402007                    MPY     3,DL
         5 001333   000000 473400 xsym               LDP3    FKA_CODE20$
         5 001334   300003 236106                    LDQ     3,QL,PR3
         5 001335   000011 772000                    QRL     9
         5 001336   000007 676111                    ERQ     7,X1,PR0
         5 001337   000032 376000 xsym               ANQ     B_VECTNIL+26
         5 001340   000007 656111                    ERSQ    7,X1,PR0

      555     8026    3                 IRKEYS.K.LDA(I) = CODE20.K.LDA(I);

   8026  5 001341   200003 236100                    LDQ     I,,AUTO
         5 001342   000007 402007                    MPY     7,DL
         5 001343   000000 621006                    EAX1    0,QL
         5 001344   200003 236100                    LDQ     I,,AUTO
         5 001345   000003 402007                    MPY     3,DL
         5 001346   000000 471400 xsym               LDP1    FKA_CODE20$
         5 001347   100003 235106                    LDA     3,QL,PR1
         5 001350   100004 236106                    LDQ     4,QL,PR1
         5 001351   000022 773000                    LRL     18
         5 001352   000032 376000 xsym               ANQ     B_VECTNIL+26
         5 001353   000011 676111                    ERQ     9,X1,PR0
         5 001354   000032 376000 xsym               ANQ     B_VECTNIL+26
         5 001355   000011 656111                    ERSQ    9,X1,PR0

      556     8027    3                 IRKEYS.K.DEGENERATE(I) = CODE20.K.DEGENERATE(I);

   8027  5 001356   200003 236100                    LDQ     I,,AUTO
         5 001357   000007 402007                    MPY     7,DL
         5 001360   000000 621006                    EAX1    0,QL
         5 001361   200003 236100                    LDQ     I,,AUTO
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:99   
         5 001362   000003 402007                    MPY     3,DL
         5 001363   000000 471400 xsym               LDP1    FKA_CODE20$
         5 001364   100004 236106                    LDQ     4,QL,PR1
         5 001365   000003 772000                    QRL     3
         5 001366   000006 676111                    ERQ     6,X1,PR0
         5 001367   040000 376007                    ANQ     16384,DL
         5 001370   000006 656111                    ERSQ    6,X1,PR0

      557     8028    4                 DO UNTIL (CODE19.K.KEYEND(N-1));

      558     8029    4                    IRKEYS.K.NFIELDS(I) = IRKEYS.K.NFIELDS(I) + 1;

   8029  5 001371   200003 236100                    LDQ     I,,AUTO
         5 001372   000007 402007                    MPY     7,DL
         5 001373   000000 470400 xsym               LDP0    FKA_IRKEYS$
         5 001374   000004 720106                    LXL0    4,QL,PR0
         5 001375   000001 621010                    EAX1    1,X0
         5 001376   000004 441106                    SXL1    4,QL,PR0

      559     8030    4                    KFIELD.FIELD(N) = CODE19.K.FIELDN(N);

   8030  5 001377   200007 235100                    LDA     N,,AUTO
         5 001400   000001 735000                    ALS     1
         5 001401   000000 471400 xsym               LDP1    FKA_CODE19$
         5 001402   000000 473400 xsym               LDP3    FKA_KFIELD$
         5 001403   200007 236100                    LDQ     N,,AUTO
         5 001404   000106 100505                    MLR     fill='000'O
         5 001405   100001 200001                    ADSC9   1,A,PR1                  cn=1,n=1
         5 001406   300002 000001                    ADSC9   2,Q,PR3                  cn=0,n=1

      560     8031    4                    FIELD = CODE19.K.FIELDN(N);

   8031  5 001407   000000 471400 xsym               LDP1    FKA_CODE19$
         5 001410   000100 101505                    MRL     fill='000'O
         5 001411   100001 200001                    ADSC9   1,A,PR1                  cn=1,n=1
         5 001412   200010 000004                    ADSC9   FIELD,,AUTO              cn=0,n=4

PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:100  
      561     8032    4                    CALL SET_LEN;

   8032  5 001413   001536 701000 5                  TSX1    SET_LEN
         5 001414   000000 011000                    NOP     0

      562     8033    4                    TOTAL = TOTAL + LEN;

   8033  5 001415   200011 236100                    LDQ     TOTAL,,AUTO
         5 001416   200005 036100                    ADLQ    LEN,,AUTO
         5 001417   200011 756100                    STQ     TOTAL,,AUTO

      563     8034    4                    N = N + 1;

   8034  5 001420   200007 054100                    AOS     N,,AUTO

      564     8035    4                    END;

   8035  5 001421   200007 236100                    LDQ     N,,AUTO
         5 001422   000022 402007                    MPY     18,DL
         5 001423   000000 116003                    CMPQ    0,DU
         5 001424   001426 605000 5                  TPL     s:8035+5
         5 001425   000044 036003                    ADLQ    36,DU
         5 001426   000000 470400 xsym               LDP0    FKA_CODE19$
         5 001427   000000 066506                    CMPB    filb='0'B
         5 001430   000000 400001                    BDSC    0,Q,PR0                  by=2,bit=0,n=1
         5 001431   000002 000022 xsym               BDSC    B_VECTNIL+2              by=0,bit=0,n=18
         5 001432   001371 600000 5                  TZE     s:8029

      565     8036    3                 IRKEYS.K.KEYL(I) = TOTAL;

   8036  5 001433   200003 236100                    LDQ     I,,AUTO
         5 001434   000007 402007                    MPY     7,DL
         5 001435   200011 720100                    LXL0    TOTAL,,AUTO
         5 001436   000000 471400 xsym               LDP1    FKA_IRKEYS$
         5 001437   100005 740106                    STX0    5,QL,PR1

      566     8037    3                 IF TOTAL > MAX THEN
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:101  

   8037  5 001440   200011 236100                    LDQ     TOTAL,,AUTO
         5 001441   200004 116100                    CMPQ    MAX,,AUTO
         5 001442   001444 604400 5                  TMOZ    s:8039

      567     8038    3                    MAX = TOTAL;

   8038  5 001443   200004 756100                    STQ     MAX,,AUTO

      568     8039    3                 END;

   8039  5 001444   200003 054100                    AOS     I,,AUTO
         5 001445   000000 470400 xsym               LDP0    FKA_CODE19$
         5 001446   200003 236100                    LDQ     I,,AUTO
         5 001447   001260 604000 5                  TMI     s:8021
         5 001450   000000 116100                    CMPQ    0,,PR0
         5 001451   001260 602000 5                  TNC     s:8021

      569     8040
      570     8041    2              FKA_NUMKEYS=CODE19.NKEYS;

   8041  5 001452   000000 235100                    LDA     0,,PR0
         5 001453   000000 755000 xsym               STA     FKA_NUMKEYS

      571     8042
      572     8043    2              RETURN;

   8043  5 001454   200022 221300                    LDX1  ! I+3,,AUTO
         5 001455   000001 702211                    TSX2  ! 1,X1

      573     8044    2      END IRSETUP;
      574     8045         %EJECT;
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:102  
      575     8046        /*I*     NAME:     OPEN
      576     8047                 PURPOSE:  To open the file
      577     8048                 DESCRIPTION:
      578     8049
      579     8050                      If this is a monitor ALTKEY, then we call RELSTARF
      580     8051                 to do a sleazy open.  This has to be done because we need
      581     8052                 to open the file with BLOCK access, and this is not possible
      582     8053                 if someone else has the file open.  The sleazy open is a bit
      583     8054                 interesting because it opens the dcb with FUN=IN to prevent
      584     8055                 unwanted behavior when we're run down and the dcb is really
      585     8056                 closed.  However, the FMBLK privilege that ALTKEY is linked
      586     8057                 with allows us to write granules in the file anyway.  In this
      587     8058                 case, we've been passed some information in the CCBUF via the
      588     8059                 M$MLINK which wouldn't be easily available otherwise; e.g.,
      589     8060                 the CFU pointer and SETX of the file, B$JIT.ERR as it was
      590     8061                 prior to the link to ALTKEY (so it won't be forgotten), the
      591     8062                 user's FPT_CLOSE RELG option, and whether he's allowed to
      592     8063                 RELG or not (his DELF access).  These will be used later to
      593     8064                 decide how to close and exit.
      594     8065
      595     8066                      Otherwise, for a stand-alone ALTKEY, just do a normal
      596     8067                 block open.
      597     8068        */
      598     8069         %EJECT;
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:103  
      599     8070    1   OPEN:      PROC ALTRET;

   8070  5 001456   200016 741300       OPEN         STX1  ! CLOSERR+3,,AUTO

      600     8071        /* */
      601     8072    2              IF FKA_MON = %YES# THEN

   8072  5 001457   000000 234000 xsym               SZN     FKA_MON
         5 001460   001516 605000 5                  TPL     s:8087

      602     8073    3              DO;                          /* MONITOR CLOSE                      */

      603     8074    3                 FKA_ALTKEY_BFR.CODE=%ALTKEY_OPEN#;

   8074  5 001461   000102 450000 2                  STZ     FKA_ALTKEY_BFR+2

      604     8075    3                 FKA_ALTKEY_BFR.DCB#=DCBNUM(M$SI);

   8075  5 001462   000000 236007 xsym               LDQ     M$SI,DL
         5 001463   000100 756000 2                  STQ     FKA_ALTKEY_BFR

      605     8076    3                 CCBUF$=PINCRC(ADDR(B$JIT.CCBUF), -1);

   8076  5 001464   000000 236000 xsym               LDQ     B$JIT$
         5 001465   000020 036000 6                  ADLQ    16
         5 001466   200012 756100                    STQ     CCBUF$,,AUTO

      606     8077    3                 FKA_ALTKEY_BFR.CFU$=CCBUF.CFU$;

   8077  5 001467   200012 470500                    LDP0    CCBUF$,,AUTO
         5 001470   000000 100500                    MLR     fill='000'O
         5 001471   000002 200004                    ADSC9   2,,PR0                   cn=1,n=4
         5 001472   000101 000004 2                  ADSC9   FKA_ALTKEY_BFR+1         cn=0,n=4

      607     8078    3                 FKA_ALTKEY_BFR.SETX=CCBUF.SETX;

   8078  5 001473   000000 100500                    MLR     fill='000'O
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:104  
         5 001474   000003 200004                    ADSC9   3,,PR0                   cn=1,n=4
         5 001475   000104 000004 2                  ADSC9   FKA_ALTKEY_BFR+4         cn=0,n=4

      608     8079    3                 FKA_ALTKEY_BFR.RELG=CCBUF.RELG;

   8079  5 001476   003000 060500                    CSL     bolr='003'O
         5 001477   000005 200001                    BDSC    5,,PR0                   by=1,bit=0,n=1
         5 001500   000105 000001 2                  BDSC    FKA_ALTKEY_BFR+5         by=0,bit=0,n=1

      609     8080    3                 FKA_ALTKEY_BFR.DELF=CCBUF.DELF;

   8080  5 001501   003000 060500                    CSL     bolr='003'O
         5 001502   000005 210001                    BDSC    5,,PR0                   by=1,bit=1,n=1
         5 001503   000105 010001 2                  BDSC    FKA_ALTKEY_BFR+5         by=0,bit=1,n=1

      610     8081    3                 FKA_M$CLOSE_ERR=CCBUF.CLOSERR;

   8081  5 001504   000000 100500                    MLR     fill='000'O
         5 001505   000004 200004                    ADSC9   4,,PR0                   cn=1,n=4
         5 001506   000000 000004 xsym               ADSC9   FKA_M$CLOSE_ERR          cn=0,n=4

      611     8082    3                 CALL M$RELSTARF(FPT_RELSTARF) ALTRET(MERR);

   8082  5 001507   000110 630400 1                  EPPR0   FPT_RELSTARF
         5 001510   460010 713400                    CLIMB   alt,+24584
         5 001511   400400 401760                    pmme    nvectors=2
         5 001512   001534 702000 5                  TSX2    MERR

      612     8083    3                 FKA_FILE_OPEN=%YES#;

   8083  5 001513   400000 236003                    LDQ     -131072,DU
         5 001514   000000 756000 xsym               STQ     FKA_FILE_OPEN

      613     8084    3                 END;                      /* MONITOR CLOSE                      */

   8084  5 001515   001532 710000 5                  TRA     s:8094

PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:105  
      614     8085    2              ELSE
      615     8086    3              DO;                          /* USER REBUILD                       */

      616     8087    3                 FKA_ALTKEY_BFR.DCB#=DCBNUM(M$SI);

   8087  5 001516   000000 236007 xsym               LDQ     M$SI,DL
         5 001517   000100 756000 2                  STQ     FKA_ALTKEY_BFR

      617     8088    3                 FKA_ALTKEY_BFR.RELG='0'B;

   8088  5 001520   000031 236000 xsym               LDQ     B_VECTNIL+25
         5 001521   000105 356000 2                  ANSQ    FKA_ALTKEY_BFR+5

      618     8089    3                 FKA_ALTKEY_BFR.DELF='0'B;

   8089  5 001522   000004 236000 6                  LDQ     4
         5 001523   000105 356000 2                  ANSQ    FKA_ALTKEY_BFR+5

      619     8090    3                 CALL M$OPEN(OPENSI) ALTRET(MERR);

   8090  5 001524   000000 630400 1                  EPPR0   OPENSI
         5 001525   450000 713400                    CLIMB   alt,open
         5 001526   410400 401760                    pmme    nvectors=18
         5 001527   001534 702000 5                  TSX2    MERR

      620     8091    3                 FKA_FILE_OPEN=%YES#;

   8091  5 001530   400000 236003                    LDQ     -131072,DU
         5 001531   000000 756000 xsym               STQ     FKA_FILE_OPEN

      621     8092    3                 END;                      /* USER REBUILD                       */

      622     8093
      623     8094    2              RETURN;

   8094  5 001532   200016 221300                    LDX1  ! CLOSERR+3,,AUTO
         5 001533   000001 702211                    TSX2  ! 1,X1
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:106  

      624     8095    2   MERR:      ALTRETURN;

   8095  5 001534   200016 221300       MERR         LDX1  ! CLOSERR+3,,AUTO
         5 001535   000000 702211                    TSX2  ! 0,X1

      625     8096    2      END OPEN;
      626     8097         %EJECT;
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:107  
      627     8098        /*I*     NAME:     SET_LEN
      628     8099                 PURPOSE:  To get the length of a field
      629     8100                 DESCRIPTION:
      630     8101
      631     8102                      The length can be stored as either bits, nibbles, or
      632     8103                 bytes.  Get the value from the appropriate place, and do
      633     8104                 the appropriate arithmatic to get it to bytes.
      634     8105        */
      635     8106         %EJECT;
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:108  
      636     8107    1   SET_LEN:   PROC;

   8107  5 001536   200024 741300       SET_LEN      STX1  ! J,,AUTO

      637     8108        /* */
      638     8109    3              DO CASE(RECFIELD.FIELD.TYPE#(FIELD));

   8109  5 001537   200010 236100                    LDQ     FIELD,,AUTO
         5 001540   000003 402007                    MPY     3,DL
         5 001541   000000 116003                    CMPQ    0,DU
         5 001542   001544 605000 5                  TPL     s:8109+5
         5 001543   000006 036003                    ADLQ    6,DU
         5 001544   000000 470400 xsym               LDP0    FKA_RECFIELD$
         5 001545   000100 101506                    MRL     fill='000'O
         5 001546   000001 020001                    ADSC6   1,Q,PR0                  cn=0,n=1
         5 001547   200034 020003                    ADSC6   EVEN+2,,AUTO             cn=0,n=3
         5 001550   200034 220100                    LDX0    EVEN+2,,AUTO
         5 001551   000072 100003                    CMPX0   58,DU
         5 001552   001554 602010 5                  TNC     s:8109+13,X0
         5 001553   001710 710000 5                  TRA     s:8123
         5 001554   001710 710000 5                  TRA     s:8123
         5 001555   001674 710000 5                  TRA     s:8120
         5 001556   001710 710000 5                  TRA     s:8123
         5 001557   001710 710000 5                  TRA     s:8123
         5 001560   001710 710000 5                  TRA     s:8123
         5 001561   001710 710000 5                  TRA     s:8123
         5 001562   001710 710000 5                  TRA     s:8123
         5 001563   001710 710000 5                  TRA     s:8123
         5 001564   001710 710000 5                  TRA     s:8123
         5 001565   001646 710000 5                  TRA     s:8113
         5 001566   001646 710000 5                  TRA     s:8113
         5 001567   001710 710000 5                  TRA     s:8123
         5 001570   001710 710000 5                  TRA     s:8123
         5 001571   001710 710000 5                  TRA     s:8123
         5 001572   001710 710000 5                  TRA     s:8123
         5 001573   001710 710000 5                  TRA     s:8123
         5 001574   001710 710000 5                  TRA     s:8123
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:109  
         5 001575   001710 710000 5                  TRA     s:8123
         5 001576   001710 710000 5                  TRA     s:8123
         5 001577   001710 710000 5                  TRA     s:8123
         5 001600   001710 710000 5                  TRA     s:8123
         5 001601   001710 710000 5                  TRA     s:8123
         5 001602   001710 710000 5                  TRA     s:8123
         5 001603   001710 710000 5                  TRA     s:8123
         5 001604   001674 710000 5                  TRA     s:8120
         5 001605   001646 710000 5                  TRA     s:8113
         5 001606   001710 710000 5                  TRA     s:8123
         5 001607   001710 710000 5                  TRA     s:8123
         5 001610   001710 710000 5                  TRA     s:8123
         5 001611   001710 710000 5                  TRA     s:8123
         5 001612   001710 710000 5                  TRA     s:8123
         5 001613   001646 710000 5                  TRA     s:8113
         5 001614   001710 710000 5                  TRA     s:8123
         5 001615   001710 710000 5                  TRA     s:8123
         5 001616   001710 710000 5                  TRA     s:8123
         5 001617   001710 710000 5                  TRA     s:8123
         5 001620   001710 710000 5                  TRA     s:8123
         5 001621   001710 710000 5                  TRA     s:8123
         5 001622   001710 710000 5                  TRA     s:8123
         5 001623   001710 710000 5                  TRA     s:8123
         5 001624   001646 710000 5                  TRA     s:8113
         5 001625   001663 710000 5                  TRA     s:8117
         5 001626   001663 710000 5                  TRA     s:8117
         5 001627   001663 710000 5                  TRA     s:8117
         5 001630   001663 710000 5                  TRA     s:8117
         5 001631   001663 710000 5                  TRA     s:8117
         5 001632   001710 710000 5                  TRA     s:8123
         5 001633   001710 710000 5                  TRA     s:8123
         5 001634   001710 710000 5                  TRA     s:8123
         5 001635   001710 710000 5                  TRA     s:8123
         5 001636   001663 710000 5                  TRA     s:8117
         5 001637   001646 710000 5                  TRA     s:8113
         5 001640   001710 710000 5                  TRA     s:8123
         5 001641   001710 710000 5                  TRA     s:8123
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:110  
         5 001642   001646 710000 5                  TRA     s:8113
         5 001643   001674 710000 5                  TRA     s:8120
         5 001644   001710 710000 5                  TRA     s:8123
         5 001645   001646 710000 5                  TRA     s:8113

      639     8110    3                 CASE(%PDLA_DATATYPE, %PDTA_DATATYPE, %PDNS_DATATYPE,

      640     8111    3                  %PDTE_DATATYPE, %PDFLT_DATATYPE, %PDLE_DATATYPE,
      641     8112    3                  %DATE_DATATYPE, %TIME_DATATYPE);
      642     8113    3                    LEN=(RECFIELD.DECFIELD.LEN#(FIELD)+1)/2;

   8113  5 001646   200010 236100                    LDQ     FIELD,,AUTO
         5 001647   000003 402007                    MPY     3,DL
         5 001650   000000 116003                    CMPQ    0,DU
         5 001651   001653 605000 5                  TPL     s:8113+5
         5 001652   000006 036003                    ADLQ    6,DU
         5 001653   000100 101506                    MRL     fill='000'O
         5 001654   000001 120001                    ADSC6   1,Q,PR0                  cn=1,n=1
         5 001655   200034 020006                    ADSC6   EVEN+2,,AUTO             cn=0,n=6
         5 001656   200034 236100                    LDQ     EVEN+2,,AUTO
         5 001657   000001 036007                    ADLQ    1,DL
         5 001660   000001 772000                    QRL     1
         5 001661   200005 756100                    STQ     LEN,,AUTO
         5 001662   001720 710000 5                  TRA     s:8127

      643     8114
      644     8115    3                 CASE(%UDLS_DATATYPE, %UDTS_DATATYPE, %UDNS_DATATYPE,

      645     8116    3                        %UDLO_DATATYPE, %UDTO_DATATYPE, %UDFLT_DATATYPE);
      646     8117    3                    LEN=RECFIELD.DECFIELD.LEN#(FIELD);

   8117  5 001663   200010 236100                    LDQ     FIELD,,AUTO
         5 001664   000003 402007                    MPY     3,DL
         5 001665   000000 116003                    CMPQ    0,DU
         5 001666   001670 605000 5                  TPL     s:8117+5
         5 001667   000006 036003                    ADLQ    6,DU
         5 001670   000100 101506                    MRL     fill='000'O
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:111  
         5 001671   000001 120001                    ADSC6   1,Q,PR0                  cn=1,n=1
         5 001672   200005 020006                    ADSC6   LEN,,AUTO                cn=0,n=6
         5 001673   001720 710000 5                  TRA     s:8127

      647     8118
      648     8119    3                 CASE(%SBIN_DATATYPE, %UBIN_DATATYPE, %UTS_DATATYPE);

      649     8120    3                    LEN=RECFIELD.FIELD.LEN#(FIELD)/9;

   8120  5 001674   200010 236100                    LDQ     FIELD,,AUTO
         5 001675   000003 402007                    MPY     3,DL
         5 001676   000000 116003                    CMPQ    0,DU
         5 001677   001701 605000 5                  TPL     s:8120+5
         5 001700   000006 036003                    ADLQ    6,DU
         5 001701   000100 101506                    MRL     fill='000'O
         5 001702   000001 120002                    ADSC6   1,Q,PR0                  cn=1,n=2
         5 001703   200034 020006                    ADSC6   EVEN+2,,AUTO             cn=0,n=6
         5 001704   200034 236100                    LDQ     EVEN+2,,AUTO
         5 001705   000011 506007                    DIV     9,DL
         5 001706   200005 756100                    STQ     LEN,,AUTO
         5 001707   001720 710000 5                  TRA     s:8127

      650     8121
      651     8122    3                 CASE(ELSE);

      652     8123    3                    LEN=RECFIELD.FIELD.LEN#(FIELD);

   8123  5 001710   200010 236100                    LDQ     FIELD,,AUTO
         5 001711   000003 402007                    MPY     3,DL
         5 001712   000000 116003                    CMPQ    0,DU
         5 001713   001715 605000 5                  TPL     s:8123+5
         5 001714   000006 036003                    ADLQ    6,DU
         5 001715   000100 101506                    MRL     fill='000'O
         5 001716   000001 120002                    ADSC6   1,Q,PR0                  cn=1,n=2
         5 001717   200005 020006                    ADSC6   LEN,,AUTO                cn=0,n=6

      653     8124
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:112  
      654     8125    3                 END;                      /* CASE                               */

      655     8126
      656     8127    2              RETURN;

   8127  5 001720   000001 702211                    TSX2  ! 1,X1

      657     8128    2      END SET_LEN;
      658     8129    1   END FKA$ALTKEY;

   8129  5 001721   000000 702200 xent               TSX2  ! X66_MARET
      659     8130         %EOD;

PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:113  
--  Include file information  --

   B_ERRORS_C.:E05TOU  is referenced.
   B$OBJECT_C.:E05TOU  is referenced.
   FM_FIELD_C.:E05TOU  is referenced.
   B$JIT.:E05TOU  cannot be made into a system file and is referenced.
   ZL_MACRO_C.:TOOLE04  is referenced.
   FK_DATA_C.:E05TOU  is referenced.
   FKA_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   FK_PERR_C.:E05TOU  is referenced.
   FM$GRAN.:E05TOU  is referenced.
   FM$FIT.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure FKA$ALTKEY.
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:114  

 **** Variables and constants ****

  ****  Section 001 RoData FKA$ALTKEY

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   202-0-0/w STRC        r     1 ERR_DUPS                 201-0-0/w STRC        r     1 ERR_NOALTINDX
   142-0-0/d STRC(504)   r     1 FPT_CMDVAR               130-0-0/d STRC(144)   r     1 FPT_INT
   110-0-0/d STRC(144)   r     1 FPT_RELSTARF             114-0-0/d STRC(216)   r     1 FPT_XCON
   134-0-0/d STRC(216)   r     1 FPT_XXX                    0-0-0/d STRC(2088)  r     1 OPENSI
    72-0-0/d STRC(504)   r     1 READ_INDEX               122-0-0/d STRC(216)   r     1 RESET_XCON
   160-0-0/d STRC(504)   r     1 SET_SILENT               203-0-0/c STRC(63)    r     1 SILENT
   176-0-0/c STRC(90)    r     1 VLP_NAME

  ****  Section 002  Data  FKA$ALTKEY

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

  2162-0-0/w UBIN        r     1 DCB#                    2161-0-0/b BIT         r     1 ERRCODE
   100-0-0/d STRC(37080) r     1 FKA_ALTKEY_BFR             2-0-0/d STRC(2088)  r     1 FPT_COLLATE
     0-0-0/d STRC(72)    r     1 FPT_GDDL                2106-0-0/w STRC(1296)  r     1 SORT_TABLE
    74-0-0/d STRC(108)   r     1 VLP_GDDL                2152-0-0/w STRC(180)   r     1 ZL_KEYS

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    31-0-0/w PTR         r     1 @ALIGN_TYPE               27-0-0/w PTR         r     1 @K
    *0-0-0/w UBIN        r     1 ALIGN_TYPE                12-0-0/w PTR         r     1 CCBUF$
    13-0-0/w STRC(72)    r     1 CLOSERR                   32-0-0/w UBIN        r     1 EVEN
    10-0-0/w SBIN        r     1 FIELD                      3-0-0/w SBIN        r     1 I
    23-0-0/w UBIN        r     1 I                         17-0-0/w SBIN        r     1 I
    24-0-0/w UBIN        r     1 J                         *0-0-0/w UBIN        r     1 K
     5-0-0/w SBIN        r     1 LEN                        4-0-0/w SBIN        r     1 MAX
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:115  
     7-0-0/w SBIN        r     1 N                         25-0-0/w UBIN        r     1 REC_OFFSET
    11-0-0/w SBIN        r     1 TOTAL

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$JIT$                     0-0-0/w PTR         r     1 B$TCB$
     0-0-0/w PTR         r     1 FKA_ALTKEYS$               0-0-0/w SBIN        r     1 FKA_BOUND
     0-0-0/b BIT         r     1 FKA_CLOSE_DONE             0-0-0/c CHAR(512)   r     1 FKA_CMDVAR
     0-0-0/b BIT         r     1 FKA_CMDVAR_EXIST           0-0-0/b BIT         r     1 FKA_CMDVAR_SET
     0-0-0/w PTR         r     1 FKA_CODE19$                0-0-0/w PTR         r     1 FKA_CODE20$
     0-0-0/w PTR         r     1 FKA_DCB$                   0-0-0/b BIT         r     1 FKA_DUPS
     0-0-0/b BIT         r     1 FKA_FILE_OPEN              0-0-0/c CHAR(4096)  r     1 FKA_INDEX_BUF
     0-0-0/w PTR         r     1 FKA_INDEX_BUF$             0-0-0/w SBIN        r     1 FKA_INDEX_GRAN
     0-0-0/w PTR         r     1 FKA_IRKEYS$                0-0-0/w SBIN        r     1 FKA_KEYSIZE
     0-0-0/w PTR         r     1 FKA_KFIELD$                0-0-0/w PTR         r     1 FKA_KTPTR$
     0-0-0/w BIT         r     1 FKA_M$CLOSE_ERR            0-0-0/b BIT         r     1 FKA_MON
     0-0-0/w SBIN        r     1 FKA_NUMKEYS                0-0-0/w PTR         r     1 FKA_RECFIELD$
     0-0-0/w SBIN        r     1 FKA_RECSIZE                0-0-0/w PTR         r     1 FKA_START$
     0-0-0/b BIT         r     1 FKA_UNIQUE(0:100)

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/d STRC(8856)  r     1 B$JIT
     0-0-0/w STRC(144)   r     1 B$TCB                      0-0-0/c STRC(207)   r     1 CCBUF
     0-0-0/w STRC(54)    r     1 CODE19                     0-0-0/w STRC(180)   r     1 CODE20
     0-0-0/d ASTR(3528)  r     1 F$DCB                      0-0-0N  NULL        r     1 F$SCRF1
     0-0-0/w STRC(72)    r     1 FIELD_START                0-0-0/w STRC(4572)  r     1 FITALTKEYS
     0-0-0/w STRC(180)   r     1 FM$GRAN
     0-0-0/w UBIN(9)     r     1 FM$KEYTBL(0:279)
     0-0-0/w UBIN        r     1 FM$KT(0:69)                0-0-0/w STRC(360)   r     1 IRKEYS
     0-0-0/w STRC(81)    r     1 KFIELD                     0-0-0N  NULL        r     1 M$SI
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:116  
     0-0-0/d STRC(54)    r     1 RECFIELD


   Procedure FKA$ALTKEY requires 978 words for executable code.
   Procedure FKA$ALTKEY requires 34 words of local(AUTO) storage.
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:117  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:118  
          MINI XREF LISTING

ABORT
      7797**LABEL    7727--CALLALT  7731--CALLALT  7784--GOTO     7792--CALLALT  7793--GOTO
ALIGN_TYPE IN PROCEDURE SET_FIELD_START
      7902**DCL      7901--PROC     7906>>DOCASE
B$ALT.CODE
      7147**DCL      7147--REDEF    7148--REDEF    7148--REDEF
B$ALT.DCB#
      7148**DCL      7791>>ASSIGN   7796>>ASSIGN
B$ALT.ERR
      7148**DCL      7790>>ASSIGN   7795>>ASSIGN
B$ALT.ERR.ERR#
      7149**DCL      7149--REDEF
B$ALT.EVID
      7148**DCL      7148--REDEF    7148--REDEF
B$JIT.CCBUF
      1840**DCL      8076--ASSIGN
B$JIT.CPFLAGS1.SLEAZE
      1846**DCL      1846--REDEF
B$JIT.ERR.MID
      1753**DCL      1753--REDEF
B$JIT.JRESPEAK
      1914**DCL      1915--REDEF
B$JIT.ORIGINATOR_PORT.FROM_CR
      2023**DCL      2023--REDEF    2024--REDEF
B$JIT.PNR
      1927**DCL      1927--REDEF
B$JIT.PROG_ENTRY
      1902**DCL      7705>>IF
B$JIT.TSLINE
      2021**DCL      2022--REDEF
B$JIT$
      7157**DCL      1747--IMP-PTR  7705>>IF       8076>>ASSIGN
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:119  
B$TCB.ALT$
      7143**DCL      7790>>ASSIGN   7791>>ASSIGN   7795>>ASSIGN   7796>>ASSIGN
B$TCB$
      7158**DCL      7790>>ASSIGN   7791>>ASSIGN   7795>>ASSIGN   7796>>ASSIGN
CCBUF.CFU$
      7330**DCL      8077>>ASSIGN
CCBUF.CLOSERR
      7334**DCL      8081>>ASSIGN
CCBUF.DELF
      7340**DCL      8080>>ASSIGN
CCBUF.RELG
      7338**DCL      8079>>ASSIGN
CCBUF.SETX
      7332**DCL      8078>>ASSIGN
CCBUF$
      7690**DCL      7325--IMP-PTR  8076<<ASSIGN   8077>>ASSIGN   8078>>ASSIGN   8079>>ASSIGN   8080>>ASSIGN
      8081>>ASSIGN
CLOSERR
      7692**DCL      7775<>CALL     7792<>CALL
CLOSERR.DCB#
      7695**DCL      7779>>ASSIGN
CLOSERR.ERR
      7693**DCL      7778>>ASSIGN
CLOSERR.TYPE
      7694**DCL      7776>>IF
CODE19.K.FIELDN
      7297**DCL      8030>>ASSIGN   8031>>ASSIGN
CODE19.K.KEYEND
      7297**DCL      8028>>DOUNTIL
CODE19.K.UNIQUE
      7297**DCL      8023>>ASSIGN   8024>>ASSIGN
CODE19.NKEYS
      7297**DCL      8017>>ASSIGN   8020>>DOINDEX  8041>>ASSIGN
CODE20.ALTBLD
      7300**DCL      7761<<ASSIGN
CODE20.K.DEGENERATE
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:120  
      7301**DCL      8027>>ASSIGN
CODE20.K.FDA
      7301**DCL      8025>>ASSIGN
CODE20.K.LDA
      7301**DCL      8026>>ASSIGN
CODE20.UNIQUEBLD
      7300**DCL      7762<<ASSIGN
DCB#
      7681**DCL      7772<<ASSIGN   7779<<ASSIGN   7791<<ASSIGN   7796<<ASSIGN   7798<>CALL
ERRCODE
      7680**DCL      6845--DCLINIT  7768<<ASSIGN   7771<<ASSIGN   7778<<ASSIGN   7783>>IF       7790<<ASSIGN
      7795<<ASSIGN   7798<>CALL     7957<<ASSIGN   8002<<ASSIGN
ERR_DUPS
      7109**DCL      7771>>ASSIGN
ERR_NOALTINDX
      7062**DCL      7957>>ASSIGN   8002>>ASSIGN
EVEN IN PROCEDURE SET_FIELD_START
      7903**DCL      7912<<ASSIGN   7913>>IF       7913>>IF       7914>>ASSIGN   7915>>IF       7916>>ASSIGN
F$DCB.ACTPOS
      7193**DCL      7193--REDEF
F$DCB.ARS#
      7167**DCL      7167--REDEF
F$DCB.ATTR
      7186**DCL      7187--REDEF
F$DCB.BORROW
      7201**DCL      7201--REDEF    7201--REDEF    7201--REDEF
F$DCB.DCBNAME.L
      7215**DCL      7215--IMP-SIZ
F$DCB.EOMCHAR#
      7171**DCL      7171--REDEF
F$DCB.FLDID
      7196**DCL      7196--REDEF
F$DCB.FORM$
      7190**DCL      7190--REDEF
F$DCB.FSECT
      7206**DCL      7206--REDEF
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:121  
F$DCB.FSN#
      7183**DCL      7183--REDEF    7183--REDEF    7184--REDEF
F$DCB.HEADER$
      7189**DCL      7189--REDEF
F$DCB.IXTNSIZE#
      7187**DCL      7187--REDEF
F$DCB.LASTSTA$
      7176**DCL      7176--REDEF
F$DCB.LVL
      7202**DCL      7202--REDEF
F$DCB.NAME#.C
      7177**DCL      7177--REDEF
F$DCB.NOEOF
      7199**DCL      7199--REDEF
F$DCB.NRECS#
      7188**DCL      7188--REDEF
F$DCB.NRECX
      7207**DCL      7207--REDEF
F$DCB.OHDR
      7199**DCL      7199--REDEF
F$DCB.ORG#
      7182**DCL      7182--REDEF    7725>>IF       7751>>IF
F$DCB.PRECNO
      7205**DCL      7205--REDEF
F$DCB.RCSZ
      7211**DCL      7211--REDEF
F$DCB.RES#
      7178**DCL      7178--REDEF
F$DCB.SETX
      7190**DCL      7190--REDEF
F$DCB.TAB$
      7190**DCL      7190--REDEF
F$DCB.TDA
      7204**DCL      7205--REDEF
F$DCB.WSN#
      7178**DCL      7178--REDEF
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:122  
FIELD
      7688**DCL      8031<<ASSIGN   8109>>DOCASE   8113>>ASSIGN   8117>>ASSIGN   8120>>ASSIGN   8123>>ASSIGN
FIELD_START.NWORDS
      7288**DCL      7820<<ASSIGN
FIELD_START.OFFSET
      7290**DCL      7830<<ASSIGN   7830>>ASSIGN   7834<<ASSIGN   7834>>ASSIGN   7839<<ASSIGN   7839>>ASSIGN
      7840>>ASSIGN   7923<<ASSIGN
FIELD_START IN PROCEDURE FIELD_START_SETUP
      7853**PROC     7829--CALL     7832--CALL     7838--CALL     7844--CALL
FIELD_START_SETUP
      7811**PROC     7989--CALL
FITALTKEYS.ALTBLD
      7225**DCL      7753<<ASSIGN
FITALTKEYS.K.DUPKEY
      7227**DCL      7948<<ASSIGN
FITALTKEYS.K.KEYL
      7226**DCL      7950>>IF       7951>>ASSIGN
FITALTKEYS.K.UNIQUE
      7227**DCL      7756<<ASSIGN   7949>>ASSIGN
FITALTKEYS.NUMENTS
      7225**DCL      7755>>DOINDEX  7947>>DOINDEX  7954>>ASSIGN
FITALTKEYS.UNIQUEBLD
      7225**DCL      7754<<ASSIGN
FKA$BREAK
      7672**DCL-ENT  6831--DCLINIT
FKA$CLOSE
      7670**DCL-ENT  7775--CALL     7792--CALL
FKA$COMP
      7669**DCL-ENT  7992--ASSIGN
FKA$INPUT
      7667**DCL-ENT  7525--DCLINIT
FKA$OUTPUT
      7668**DCL-ENT  7527--DCLINIT
FKA$XCON
      7671**DCL-ENT  6804--DCLINIT
FKA_ALTKEYS$
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:123  
      1003**DCL      7225--IMP-PTR  7753>>ASSIGN   7754>>ASSIGN   7755>>DOINDEX  7756>>ASSIGN   7942<<ASSIGN
      7944<>CALL     7947>>DOINDEX  7948>>ASSIGN   7949>>ASSIGN   7950>>IF       7951>>ASSIGN   7954>>ASSIGN
FKA_ALTKEY_BFR
      7305**DCL      6789--DCLINIT
FKA_ALTKEY_BFR.CFU$
      7308**DCL      8077<<ASSIGN
FKA_ALTKEY_BFR.CODE
      7310**DCL      8074<<ASSIGN
FKA_ALTKEY_BFR.DCB#
      7306**DCL      8075<<ASSIGN   8087<<ASSIGN
FKA_ALTKEY_BFR.DELF
      7318**DCL      8080<<ASSIGN   8089<<ASSIGN
FKA_ALTKEY_BFR.FPARAM
      7321**DCL      6698--DCLINIT  7942--ASSIGN   7977--ASSIGN   7981--ASSIGN   7985--ASSIGN
FKA_ALTKEY_BFR.RELG
      7316**DCL      8079<<ASSIGN   8088<<ASSIGN
FKA_ALTKEY_BFR.SETX
      7314**DCL      8078<<ASSIGN
FKA_BOUND
      1006**DCL      7747<<ASSIGN
FKA_CLOSE_DONE
      1010**DCL      7701<<ASSIGN
FKA_CMDVAR
      1009**DCL      6862--DCLINIT
FKA_CMDVAR_EXIST
      1009**DCL      7711<<ASSIGN   7714<<ASSIGN
FKA_CMDVAR_SET
      1009**DCL      7700<<ASSIGN   7717<<ASSIGN
FKA_CODE19$
      1005**DCL      7297--IMP-PTR  7981<<ASSIGN   7983<>CALL     8017>>ASSIGN   8020>>DOINDEX  8023>>ASSIGN
      8024>>ASSIGN   8028>>DOUNTIL  8030>>ASSIGN   8031>>ASSIGN   8041>>ASSIGN
FKA_CODE20$
      1005**DCL      7300--IMP-PTR  7761>>ASSIGN   7762>>ASSIGN   7985<<ASSIGN   7987<>CALL     8025>>ASSIGN
      8026>>ASSIGN   8027>>ASSIGN
FKA_DCB$
      1006**DCL      7161--IMP-PTR  7722<<ASSIGN   7725>>IF       7751>>IF
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:124  
FKA_DUPS
      1007**DCL      7769>>IF       7776>>IF
FKA_FILE_OPEN
      1009**DCL      7699<<ASSIGN   8083<<ASSIGN   8091<<ASSIGN
FKA_INDEX_BUF
      1007**DCL      6757--DCLINIT  6758--DCLINIT
FKA_INDEX_BUF$
      1008**DCL      7218--IMP-PTR  7746>>ASSIGN   7746>>ASSIGN
FKA_INDEX_GRAN
      1006**DCL      6755--DCLINIT  6756--DCLINIT  7743<<ASSIGN
FKA_IRKEYS$
      1004**DCL      7347--IMP-PTR  7763>>DOINDEX  7764>>ASSIGN   7995>>IF       8017>>ASSIGN   8022>>ASSIGN
      8023>>ASSIGN   8025>>ASSIGN   8026>>ASSIGN   8027>>ASSIGN   8029>>ASSIGN   8029>>ASSIGN   8036>>ASSIGN
FKA_KEYSIZE
      1007**DCL      7737<<ASSIGN
FKA_KFIELD$
      1005**DCL      7354--IMP-PTR  8030>>ASSIGN
FKA_KTPTR$
      1006**DCL      7222--IMP-PTR  7222--IMP-PTR  7746<<ASSIGN   7747>>ASSIGN
FKA_M$CLOSE_ERR
      1010**DCL      7702<<ASSIGN   8081<<ASSIGN
FKA_MON
      1003**DCL      7706<<ASSIGN   7708<<ASSIGN   7797>>IF       8072>>IF
FKA_NUMKEYS
      1007**DCL      7954<<ASSIGN   7994>>DOINDEX  8041<<ASSIGN
FKA_RECFIELD$
      1003**DCL      7242--IMP-PTR  7820>>ASSIGN   7824>>DOWHILE  7826>>DOCASE   7831>>DOINDEX  7857>>DOCASE
      7861>>ASSIGN   7865>>ASSIGN   7878>>ASSIGN   7879>>IF       7895>>ASSIGN   7977<<ASSIGN   7979<>CALL
      8109>>DOCASE   8113>>ASSIGN   8117>>ASSIGN   8120>>ASSIGN   8123>>ASSIGN
FKA_RECSIZE
      1007**DCL      7738<<ASSIGN   7739>>ASSIGN
FKA_START$
      1003**DCL      7287--IMP-PTR  7820>>ASSIGN   7830>>ASSIGN   7830>>ASSIGN   7834>>ASSIGN   7834>>ASSIGN
      7839>>ASSIGN   7839>>ASSIGN   7840>>ASSIGN   7923>>ASSIGN
FKA_UNIQUE
      1003**DCL      7756>>ASSIGN   7764>>ASSIGN   7949<<ASSIGN   8024<<ASSIGN
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:125  
FM$GRAN.FCEX
      7219**DCL      7746>>ASSIGN
FM$KEYTBL
      7222**DCL      7747>>ASSIGN
FM$KT
      7222**DCL      7222--REDEF
FPT_CMDVAR
      6861**DCL      7710<>CALL
FPT_CMDVAR.V
      6863**DCL      6861--DCLINIT
FPT_COLLATE
      6964**DCL      7659--DCLINIT
FPT_COLLATE.ACSVEH_
      6966**DCL      6967--REDEF
FPT_COLLATE.ALTKEYS_
      6972**DCL      6973--REDEF    6973--REDEF
FPT_COLLATE.HDR_
      6971**DCL      6972--REDEF
FPT_COLLATE.TAB_
      6970**DCL      6971--REDEF
FPT_COLLATE.UHL_
      6964**DCL      6965--REDEF    6965--REDEF
FPT_COLLATE.V
      6973**DCL      6964--DCLINIT
FPT_COLLATE.V.FSN#
      7004**DCL      7004--REDEF    7004--REDEF
FPT_COLLATE.WSN_
      6970**DCL      6970--REDEF
FPT_GDDL
      6896**DCL      7734<>CALL
FPT_INT
      6831**DCL      7720<>CALL
FPT_INT.V
      6831**DCL      6831--DCLINIT
FPT_RELSTARF
      6788**DCL      8082<>CALL
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:126  
FPT_XCON
      6803**DCL      7719<>CALL
FPT_XCON.V
      6804**DCL      6803--DCLINIT
FPT_XXX
      6845**DCL      7801<>CALL
FPT_XXX.V
      6845**DCL      6845--DCLINIT
FPT_XXX.V.STEPCC#
      6846**DCL      6846--REDEF
I
      7683**DCL      7755<<DOINDEX  7756>>ASSIGN   7756>>ASSIGN   7763<<DOINDEX  7764>>ASSIGN   7764>>ASSIGN
      7943<<ASSIGN   7944<>CALL     7947<<DOINDEX  7948>>ASSIGN   7949>>ASSIGN   7949>>ASSIGN   7950>>IF
      7951>>ASSIGN   8020<<DOINDEX  8022>>ASSIGN   8023>>ASSIGN   8023>>ASSIGN   8024>>ASSIGN   8024>>ASSIGN
      8025>>ASSIGN   8025>>ASSIGN   8026>>ASSIGN   8026>>ASSIGN   8027>>ASSIGN   8027>>ASSIGN   8029>>ASSIGN
      8029>>ASSIGN   8036>>ASSIGN
I IN PROCEDURE FIELD_START_SETUP
      7813**DCL      7822<<ASSIGN   7824>>DOWHILE  7826>>DOCASE   7829>>CALL     7830>>ASSIGN   7830>>ASSIGN
      7831>>DOINDEX  7832>>CALL     7834>>ASSIGN   7834>>ASSIGN   7835<<ASSIGN   7835>>ASSIGN   7838>>CALL
      7839>>ASSIGN   7839>>ASSIGN   7840>>ASSIGN   7841<<ASSIGN   7841>>ASSIGN   7844<>CALL     7848<<ASSIGN
      7848>>ASSIGN
I IN PROCEDURE IREL_SETUP
      7973**DCL      7978<<ASSIGN   7979<>CALL     7982<<ASSIGN   7983<>CALL     7986<<ASSIGN   7987<>CALL
      7994<<DOINDEX  7995>>IF
INDEXED_SETUP
      7940**PROC     7727--CALL
IREL_SETUP
      7972**PROC     7731--CALL
IRKEYS.K.DEGENERATE
      7349**DCL      7995>>IF       8027<<ASSIGN
IRKEYS.K.FDA
      7350**DCL      8025<<ASSIGN
IRKEYS.K.FIRSTFIELD
      7348**DCL      8022<<ASSIGN
IRKEYS.K.KEYL
      7348**DCL      8036<<ASSIGN
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:127  
IRKEYS.K.LDA
      7351**DCL      8026<<ASSIGN
IRKEYS.K.NFIELDS
      7348**DCL      8029<<ASSIGN   8029>>ASSIGN
IRKEYS.K.UNIQUE
      7349**DCL      7764<<ASSIGN   8023<<ASSIGN
IRKEYS.NKEYS
      7347**DCL      7763>>DOINDEX  8017<<ASSIGN
IRSETUP
      8015**PROC     7990--CALL
J IN PROCEDURE FIELD_START_SETUP
      7814**DCL      7831<<DOINDEX
K IN PROCEDURE FIELD_START
      7854**DCL      7853--PROC     7857>>DOCASE   7861>>ASSIGN   7865>>ASSIGN   7878>>ASSIGN   7879>>IF
      7895>>ASSIGN   7923>>ASSIGN
KFIELD.FIELD
      7354**DCL      8030<<ASSIGN
LEN
      7685**DCL      8033>>ASSIGN   8113<<ASSIGN   8117<<ASSIGN   8120<<ASSIGN   8123<<ASSIGN
M$CMDVAR
       153**DCL-ENT  7710--CALL     7716--CALL
M$EXIT
        96**DCL-ENT  7787--CALL
M$GDDL
       121**DCL-ENT  7734--CALL
M$INT
       139**DCL-ENT  7720--CALL
M$OPEN
        84**DCL-ENT  8090--CALL
M$READ
        85**DCL-ENT  7744--CALL
M$RELSTARF
        93**DCL-ENT  8082--CALL
M$SI
      7154**DCL      7722--ASSIGN   7772>>ASSIGN   8075>>ASSIGN   8087>>ASSIGN
M$XCON
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:128  
       139**DCL-ENT  7719--CALL     7786--CALL     7800--CALL
M$XXX
        96**DCL-ENT  7801--CALL
MAX
      7684**DCL      7737>>ASSIGN   7738>>ASSIGN   7741>>ASSIGN   7946<<ASSIGN   7950>>IF       7951<<ASSIGN
      8019<<ASSIGN   8037>>IF       8038<<ASSIGN
MERR
      7795**LABEL    7716--CALLALT  7723--CALLALT  7734--CALLALT  7744--CALLALT
MERR IN PROCEDURE OPEN
      8095**LABEL    8082--CALLALT  8090--CALLALT
N
      7687**DCL      8018<<ASSIGN   8022>>ASSIGN   8028>>DOUNTIL  8030>>ASSIGN   8030>>ASSIGN   8031>>ASSIGN
      8034<<ASSIGN   8034>>ASSIGN
NOALT IN PROCEDURE INDEXED_SETUP
      7957**LABEL    7944--CALLALT
NOALT IN PROCEDURE IREL_SETUP
      8002**LABEL    7979--CALLALT  7983--CALLALT  7987--CALLALT
NONE
      7714**LABEL    7710--CALLALT
OPEN
      8070**PROC     7723--CALL
OPENSI
      6693**DCL      8090<>CALL
OPENSI.ACSVEH_
      6695**DCL      6696--REDEF
OPENSI.ALTKEYS_
      6701**DCL      6702--REDEF    6702--REDEF
OPENSI.HDR_
      6700**DCL      6701--REDEF
OPENSI.TAB_
      6699**DCL      6700--REDEF
OPENSI.UHL_
      6693**DCL      6694--REDEF    6694--REDEF
OPENSI.V
      6702**DCL      6693--DCLINIT
OPENSI.V.FSN#
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:129  
      6733**DCL      6733--REDEF    6733--REDEF
OPENSI.WSN_
      6699**DCL      6699--REDEF
READ_INDEX
      6755**DCL      7744<>CALL
READ_INDEX.STATION_
      6758**DCL      6759--REDEF
READ_INDEX.V
      6759**DCL      6755--DCLINIT
READ_INDEX.V.DVBYTE.REREAD#
      6770**DCL      6770--REDEF
READ_INDEX.V.INDX#
      6768**DCL      6768--REDEF
RECFIELD.DECFIELD.LEN#
      7251**DCL      7878>>ASSIGN   7879>>IF       7895>>ASSIGN   8113>>ASSIGN   8117>>ASSIGN
RECFIELD.FIELD
      7250**DCL      7250--REDEF
RECFIELD.FIELD.LEN#
      7250**DCL      7831>>DOINDEX  7861>>ASSIGN   7865>>ASSIGN   8120>>ASSIGN   8123>>ASSIGN
RECFIELD.FIELD.TYPE#
      7250**DCL      7826>>DOCASE   7857>>DOCASE   8109>>DOCASE
RECFIELD.NFIELDS#
      7242**DCL      7820>>ASSIGN   7824>>DOWHILE
REC_OFFSET IN PROCEDURE FIELD_START_SETUP
      7815**DCL      7821<<ASSIGN   7840<<ASSIGN   7861<<ASSIGN   7861>>ASSIGN   7865<<ASSIGN   7865>>ASSIGN
      7869<<ASSIGN   7869>>ASSIGN   7873<<ASSIGN   7873>>ASSIGN   7878<<ASSIGN   7878>>ASSIGN   7880>>IF
      7881<<ASSIGN   7881>>ASSIGN   7882<<ASSIGN   7882>>ASSIGN   7886<<ASSIGN   7886>>ASSIGN   7890<<ASSIGN
      7890>>ASSIGN   7895<<ASSIGN   7895>>ASSIGN   7908>>IF       7909<<ASSIGN   7909>>ASSIGN   7912>>ASSIGN
      7913>>IF       7913>>IF       7914<<ASSIGN   7915>>IF       7916<<ASSIGN   7923>>ASSIGN
RESET_XCON
      6817**DCL      7786<>CALL     7800<>CALL
RESET_XCON.V
      6818**DCL      6817--DCLINIT
SET_FIELD_START IN PROCEDURE FIELD_START
      7901**PROC     7860--CALL     7864--CALL     7868--CALL     7872--CALL     7877--CALL     7885--CALL
      7889--CALL     7894--CALL
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:130  
SET_LEN
      8107**PROC     8032--CALL
SET_SILENT
      6879**DCL      7716<>CALL
SET_SILENT.V
      6881**DCL      6879--DCLINIT
SILENT
      7676**DCL      6880--DCLINIT
SORT_ERR
      7783**LABEL    7749--CALLALT
SORT_TABLE
      7443**DCL      7749<>CALL
SORT_TABLE.MEM#
      7492**DCL      7735<<ASSIGN
SORT_TABLE.PRIMARY.INSIZ#
      7451**DCL      7739<<ASSIGN
SORT_TABLE.SECONDARY.KCE$
      7529**DCL      7992<<ASSIGN   7999<<ASSIGN
TOTAL
      7689**DCL      8021<<ASSIGN   8033<<ASSIGN   8033>>ASSIGN   8036>>ASSIGN   8037>>IF       8038>>ASSIGN
VLP_GDDL
      7019**DCL      6896--DCLINIT
VLP_GDDL.AVAIL_PGS#
      7020**DCL      7735>>ASSIGN
VLP_NAME
      7047**DCL      6861--DCLINIT  6879--DCLINIT
X$SORT
      7666**DCL-ENT  7749--CALL
XSF$LOCCODE
      7673**DCL-ENT  7944--CALL     7979--CALL     7983--CALL     7987--CALL
XUR$ERRMSG
      7674**DCL-ENT  7798--CALL
ZL_KEYS
      7552**DCL      7472--DCLINIT
ZL_KEYS.KEY1.LENGTH#
      7593**DCL      7741<<ASSIGN
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:131  
ZL_KEYS.KEY1.START#
      7588**DCL      7740<<ASSIGN
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:132  
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:133  
              MINI UREF LISTING

F$SCRF1    7155**DCL
FKA$ALTKEY      74**PROC
FKA_DATA_BUF    1008**DCL
FKA_DATA_BUF$    1008**DCL
FKA_DATA_GRAN    1006**DCL
FKA_FIELD_START_DATA    1004**DCL
FKA_IRKEYS_DATA    1004**DCL
FKA_KFIELD_DATA    1005**DCL
J    7686**DCL
LEN IN PROCEDURE IREL_SETUP   7975**DCL
M$ACCT     101**DCL-ENT
M$ACTIVATE     104**DCL-ENT
M$ALIB      97**DCL-ENT
M$ASUSER      99**DCL-ENT
M$ATTACH     106**DCL-ENT
M$BADPP     124**DCL-ENT
M$CGCTL     105**DCL-ENT
M$CGINFO     105**DCL-ENT
M$CHECK      86**DCL-ENT
M$CHGUNIT     144**DCL-ENT
M$CLOSE      84**DCL-ENT
M$CLRSTK     142**DCL-ENT
M$CONFIG     114**DCL-ENT
M$CORRES      89**DCL-ENT
M$CPEXIT      98**DCL-ENT
M$CVM     122**DCL-ENT
M$CVOL      87**DCL-ENT
M$DCLFLD     114**DCL-ENT
M$DEACTIVATE     104**DCL-ENT
M$DELREC      86**DCL-ENT
M$DEQ     151**DCL-ENT
M$DETACH     106**DCL-ENT
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:134  
M$DEVICE      88**DCL-ENT
M$DISPLAY     151**DCL-ENT
M$DISPRES      91**DCL-ENT
M$DLIB      97**DCL-ENT
M$DRIBBLE     114**DCL-ENT
M$DRTN     142**DCL-ENT
M$DSUSER      99**DCL-ENT
M$ENQ     150**DCL-ENT
M$EOM     109**DCL-ENT
M$ERASE     115**DCL-ENT
M$ERR      96**DCL-ENT
M$ERRMSG     147**DCL-ENT
M$EVENT     139**DCL-ENT
M$EXHUME     148**DCL-ENT
M$EXTEND      88**DCL-ENT
M$FDP     120**DCL-ENT
M$FDS     119**DCL-ENT
M$FEBOOT     112**DCL-ENT
M$FECTL     113**DCL-ENT
M$FEDUMP     112**DCL-ENT
M$FID     147**DCL-ENT
M$FINDPROC     101**DCL-ENT
M$FSUSER      99**DCL-ENT
M$FVP     121**DCL-ENT
M$FWCG     105**DCL-ENT
M$GBPL     125**DCL-ENT
M$GDP     120**DCL-ENT
M$GDS     119**DCL-ENT
M$GETDCB      90**DCL-ENT
M$GETMOUSE     130**DCL-ENT
M$GETPM     131**DCL-ENT
M$GJOB     149**DCL-ENT
M$GLINEATTR     109**DCL-ENT
M$GOODPP     124**DCL-ENT
M$GPLATEN     117**DCL-ENT
M$GPROMPT     116**DCL-ENT
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:135  
M$GTRMATTR     110**DCL-ENT
M$GTRMCTL     108**DCL-ENT
M$GTRMTAB     111**DCL-ENT
M$GVP     120**DCL-ENT
M$HELP     147**DCL-ENT
M$INTRTN     100**DCL-ENT
M$IOQ     135**DCL-ENT
M$JOBSTATS     149**DCL-ENT
M$KEYIN      89**DCL-ENT
M$LDEV      84**DCL-ENT
M$LDTRC      97**DCL-ENT
M$LIMIT      90**DCL-ENT
M$LINES      89**DCL-ENT
M$LINK      96**DCL-ENT
M$MADMUCK      92**DCL-ENT
M$MAKUSER     123**DCL-ENT
M$MBS      91**DCL-ENT
M$MDFFLD     115**DCL-ENT
M$MERC     140**DCL-ENT
M$MERCS     141**DCL-ENT
M$MIRROR     135**DCL-ENT
M$MONINFO     152**DCL-ENT
M$MPL     125**DCL-ENT
M$NODEINFO     116**DCL-ENT
M$NXTUSR     150**DCL-ENT
M$OCMSG     148**DCL-ENT
M$OLAY      96**DCL-ENT
M$PAS     125**DCL-ENT
M$PATHCON     148**DCL-ENT
M$PDS     119**DCL-ENT
M$PFIL      86**DCL-ENT
M$PLATEN     110**DCL-ENT
M$PRECORD      88**DCL-ENT
M$PROCNAME     101**DCL-ENT
M$PROFILE     112**DCL-ENT
M$PROMPT     108**DCL-ENT
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:136  
M$RACST      92**DCL-ENT
M$RDSYSLOG     133**DCL-ENT
M$RELDCB      90**DCL-ENT
M$RELRES      91**DCL-ENT
M$REM      93**DCL-ENT
M$RENV     140**DCL-ENT
M$REQUIRE      92**DCL-ENT
M$RETRY     141**DCL-ENT
M$RETRYS     141**DCL-ENT
M$REW      87**DCL-ENT
M$RLSFLD     115**DCL-ENT
M$RPRIV     143**DCL-ENT
M$RSPP     122**DCL-ENT
M$RSWITCH     144**DCL-ENT
M$RUE     150**DCL-ENT
M$SAD     123**DCL-ENT
M$SAVE      99**DCL-ENT
M$SCON     100**DCL-ENT
M$SCREECH      98**DCL-ENT
M$SENV     140**DCL-ENT
M$SETFMA      84**DCL-ENT
M$SETFP     113**DCL-ENT
M$SINPUT     111**DCL-ENT
M$SLCFLD     116**DCL-ENT
M$SMOUSE     130**DCL-ENT
M$SMPRT     122**DCL-ENT
M$SPRIV     143**DCL-ENT
M$SSC     123**DCL-ENT
M$SSWITCH     143**DCL-ENT
M$STATE     152**DCL-ENT
M$STD     124**DCL-ENT
M$STIMER     138**DCL-ENT
M$STLPP     121**DCL-ENT
M$STRAP     138**DCL-ENT
M$STRMATTR     110**DCL-ENT
M$STRMCTL     108**DCL-ENT
PL6.E3A0      #002=FKA$ALTKEY File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:31 Page:137  
M$STRMTAB     111**DCL-ENT
M$SYMBIO     149**DCL-ENT
M$SYSCON     135**DCL-ENT
M$SYSID     153**DCL-ENT
M$TDCLOSE     134**DCL-ENT
M$TDIO     134**DCL-ENT
M$TDOPEN     133**DCL-ENT
M$TDREQCPU     134**DCL-ENT
M$TEMPWROC     128**DCL-ENT
M$TIME     151**DCL-ENT
M$TRAP     138**DCL-ENT
M$TRMISC     113**DCL-ENT
M$TRMPRG     109**DCL-ENT
M$TRTN     142**DCL-ENT
M$TRUNC      85**DCL-ENT
M$TTIMER     138**DCL-ENT
M$UC     108**DCL
M$UMPL     125**DCL-ENT
M$UNFID     147**DCL-ENT
M$UNLATCH     104**DCL-ENT
M$UNSHARE     101**DCL-ENT
M$USRFIELD     144**DCL-ENT
M$VIRTUAL     119**DCL-ENT
M$WAIT     142**DCL-ENT
M$WEOF      87**DCL-ENT
M$WRITE      85**DCL-ENT
M$WRSYSLOG     133**DCL-ENT
M$XCONRTN     100**DCL-ENT
M$XEQTIME     152**DCL-ENT
M$XFLUSH      93**DCL-ENT
M$XMOUSE     130**DCL-ENT
M$YC      98**DCL-ENT
START IN PROCEDURE IREL_SETUP   7974**DCL
ZL_COLLATE    7631**DCL

PL6.E3A0      #003=FKA$BREAK File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:138  
      660        1        /*T***********************************************************/
      661        2        /*T*                                                         */
      662        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      663        4        /*T*                                                         */
      664        5        /*T***********************************************************/
      665        6        /*F*     NAME:     FKA$BREAK
      666        7                 PURPOSE:  To handle user breaks
      667        8        */
      668        9        /*D*     NAME:     FKA$BREAK
      669       10                 DESCRIPTION:
      670       11
      671       12                      Clear out breaks, and remember that we are processing
      672       13                 a break in case he hits another one.
      673       14
      674       15                      Tell the user that he hit break, and ask if he
      675       16                 wants to quit.  If he does, close the file, and abort.
      676       17                 If we got an error from the close, which may be a previous
      677       18                 M$CLOSE error if ALTKEY was linked to from M$CLOSE, we'll
      678       19                 abort with that error. Otherwise, we'll just abort with a
      679       20                 'you hit break' error.
      680       21        */
      681       22         %EJECT;
PL6.E3A0      #003=FKA$BREAK File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:139  
      682       23        FKA$BREAK: PROC ASYNC;
      683       24         %INCLUDE CP_6;
      684      105         %INCLUDE FK_PERR_C;
      685      114         %INCLUDE FK_DATA_C;
      686      191        /* */
      687      192         %FPT_PROMPT(PROMPT=PROMPT);
      688      220         %FPT_TRMPRG(RSTBRK=YES);
      689      249         %FPT_READ(DCB=M$UC, BUF=BUF1, STCLASS=CONSTANT);
      690      288         %FPT_WRITE(FPTN=WRITE_BLANK, DCB=M$UC, BUF=BLANK,
      691      289         VFC=YES, STCLASS=CONSTANT);
      692      320         %FPT_XCON(FPTN=RESET_XCON, STCLASS=CONSTANT);
      693      334         %FPT_XXX(CODE=ERRCODE, STEPCC=ERROR, STCLASS=STATIC);
      694      349         %VLP_ERRCODE(FPTN=BREAK_MSG, FCG=FK, MID=A, SEV=0,
      695      350         ERR#=%E$ALTBREAK, STCLASS=CONSTANT);
      696      395         %FKA$ERR(FPTN=CLOSERR,STCLASS=" ");
      697      401         %B$TCB;
      698      404         %B$ALT;
      699      412        /* */
      700      413    1     DCL ERRCODE BIT(36) STATIC ALIGNED;
      701      414    1     DCL BUF1 CHAR(1) STATIC INIT(' ');
      702      415    1     DCL BLANK CHAR(1) CONSTANT INIT('a');
      703      416    1     DCL BREAK SBIN STATIC INIT(0);
      704      417    1     DCL PROMPT CHAR(0) CONSTANT INIT('Type "Q" to quit ');
      705      418    1     DCL B$TCB$ PTR SYMREF;
      706      419        /* */
      707      420    1     DCL FKA$CLOSE ENTRY(1) ALTRET;
      708      421    1     DCL FKA$ABORT ENTRY;
      709      422    1     DCL XUR$ERRMSG ENTRY(7) ALTRET;
      710      423        /* */
      711      424    2           DO INHIBIT;
      712      425    2              CALL M$TRMPRG(FPT_TRMPRG) ALTRET(MONERR);
      713      426    2              IF BREAK = 1 THEN
      714      427    2                 RETURN;
      715      428    2              BREAK=1;
      716      429    2              END;
      717      430
      718      431    1           CALL M$PROMPT(FPT_PROMPT) ALTRET(MONERR);
PL6.E3A0      #003=FKA$BREAK File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:140  
      719      432    1           CALL XUR$ERRMSG(BREAK_MSG);
      720      433        /*E*   ERROR:   FKA-E$ALTBREAK-2
      721      434               MESSAGE: BREAK hit during rebuilding of alternate indexes
      722      435        */
      723      436    1           CALL M$READ(FPT_READ) ALTRET(MONERR);
      724      437    1           CALL M$WRITE(WRITE_BLANK) ALTRET(MONERR);
      725      438
      726      439    1           IF BUF1 ~= 'Q' THEN
      727      440    2           DO;                             /* CONTINUE                           */
      728      441    2              BREAK=0;
      729      442    2              RETURN;
      730      443    2              END;                         /* CONTINUE                           */
      731      444
      732      445    1           ERRCODE=BREAK_MSG;
      733      446    2           CALL FKA$CLOSE(CLOSERR) WHENALTRETURN DO;
      734      447    2              IF CLOSERR.TYPE=%OLDERR THEN
      735      448    2                 ERRCODE=CLOSERR.ERR;
      736      449    2              ELSE GOTO MONERR;
      737      450    2              END;
      738      451    1           CALL M$XCON(RESET_XCON);
      739      452    1           CALL M$XXX(FPT_XXX);
      740      453    1   MONERR: ;
      741      454    1           CALL FKA$ABORT;
      742      455    1   END FKA$BREAK;
      743      456         %EOD;

PL6.E3A0      #003=FKA$BREAK File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:141  
--  Include file information  --

   FK_DATA_C.:E05TOU  is referenced.
   FK_PERR_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure FKA$BREAK.

   Procedure FKA$BREAK requires 59 words for executable code.
   Procedure FKA$BREAK requires 8 words of local(AUTO) storage.

PL6.E3A0      #003=FKA$BREAK File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:142  

 Object Unit name= FKA$BREAK                                  File name= FKA$ALTKEY.:E05TOU
 UTS= JUL 29 '97 15:32:15.08 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none    27     33  FKA$BREAK
    2  RoData even  UTS     39     47  FKA$BREAK
    3   Proc  even  none    59     73  FKA$BREAK
    4  RoData even  none     1      1  FKA$BREAK

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     3      0   yes            yes     Async       0  FKA$BREAK

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       1 FKA$CLOSE
 yes     yes           Std       7 XUR$ERRMSG
         yes           Std       0 FKA$ABORT
                       nStd      0 X66_AAUTO
                       nStd      0 X66_AARET
                       Std       0 B_CONSPOOL_D
PL6.E3A0      #003=FKA$BREAK File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:143  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #003=FKA$BREAK File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:144  


      660        1        /*T***********************************************************/
      661        2        /*T*                                                         */
      662        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      663        4        /*T*                                                         */
      664        5        /*T***********************************************************/
      665        6        /*F*     NAME:     FKA$BREAK
      666        7                 PURPOSE:  To handle user breaks
      667        8        */
      668        9        /*D*     NAME:     FKA$BREAK
      669       10                 DESCRIPTION:
      670       11
      671       12                      Clear out breaks, and remember that we are processing
      672       13                 a break in case he hits another one.
      673       14
      674       15                      Tell the user that he hit break, and ask if he
      675       16                 wants to quit.  If he does, close the file, and abort.
      676       17                 If we got an error from the close, which may be a previous
      677       18                 M$CLOSE error if ALTKEY was linked to from M$CLOSE, we'll
      678       19                 abort with that error. Otherwise, we'll just abort with a
      679       20                 'you hit break' error.
      680       21        */
      681       22         %EJECT;
PL6.E3A0      #003=FKA$BREAK File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:145  
      682       23        FKA$BREAK: PROC ASYNC;

     23  3 000000   000000 700200 xent  FKA$BREAK    TSX0  ! X66_AAUTO
         3 000001   000010 000000                    ZERO    8,0

      683       24         %INCLUDE CP_6;
      684      105         %INCLUDE FK_PERR_C;
      685      114         %INCLUDE FK_DATA_C;
      686      191        /* */
      687      192         %FPT_PROMPT(PROMPT=PROMPT);
      688      220         %FPT_TRMPRG(RSTBRK=YES);
      689      249         %FPT_READ(DCB=M$UC, BUF=BUF1, STCLASS=CONSTANT);
      690      288         %FPT_WRITE(FPTN=WRITE_BLANK, DCB=M$UC, BUF=BLANK,
      691      289         VFC=YES, STCLASS=CONSTANT);
      692      320         %FPT_XCON(FPTN=RESET_XCON, STCLASS=CONSTANT);
      693      334         %FPT_XXX(CODE=ERRCODE, STEPCC=ERROR, STCLASS=STATIC);
      694      349         %VLP_ERRCODE(FPTN=BREAK_MSG, FCG=FK, MID=A, SEV=0,
      695      350         ERR#=%E$ALTBREAK, STCLASS=CONSTANT);
      696      395         %FKA$ERR(FPTN=CLOSERR,STCLASS=" ");
      697      401         %B$TCB;
      698      404         %B$ALT;
      699      412        /* */
      700      413    1     DCL ERRCODE BIT(36) STATIC ALIGNED;
      701      414    1     DCL BUF1 CHAR(1) STATIC INIT(' ');
      702      415    1     DCL BLANK CHAR(1) CONSTANT INIT('a');
      703      416    1     DCL BREAK SBIN STATIC INIT(0);
      704      417    1     DCL PROMPT CHAR(0) CONSTANT INIT('Type "Q" to quit ');
      705      418    1     DCL B$TCB$ PTR SYMREF;
      706      419        /* */
      707      420    1     DCL FKA$CLOSE ENTRY(1) ALTRET;
      708      421    1     DCL FKA$ABORT ENTRY;
      709      422    1     DCL XUR$ERRMSG ENTRY(7) ALTRET;
      710      423        /* */
      711      424    2           DO INHIBIT;

      712      425    2              CALL M$TRMPRG(FPT_TRMPRG) ALTRET(MONERR);

PL6.E3A0      #003=FKA$BREAK File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:146  
    425  3 000002   000012 630600 1                  EPPR0 ! FPT_TRMPRG
         3 000003   560004 713600                    CLIMB ! alt,+57348
         3 000004   400400 401760                    pmme    nvectors=2
         3 000005   000067 702200 3                  TSX2  ! MONERR

      713      426    2              IF BREAK = 1 THEN

    426  3 000006   000032 235200 1                  LDA   ! BREAK
         3 000007   000001 115207                    CMPA  ! 1,DL
         3 000010   000012 601200 3                  TNZ   ! s:428

      714      427    2                 RETURN;

    427  3 000011   000000 702200 xent               TSX2  ! X66_AARET

      715      428    2              BREAK=1;

    428  3 000012   000001 236207                    LDQ   ! 1,DL
         3 000013   000032 756200 1                  STQ   ! BREAK

      716      429    2              END;

      717      430
      718      431    1           CALL M$PROMPT(FPT_PROMPT) ALTRET(MONERR);

    431  3 000014   000000 630400 1                  EPPR0   FPT_PROMPT
         3 000015   560002 713400                    CLIMB   alt,+57346
         3 000016   401000 401760                    pmme    nvectors=3
         3 000017   000067 702000 3                  TSX2    MONERR

      719      432    1           CALL XUR$ERRMSG(BREAK_MSG);

    432  3 000020   000000 630400 4                  EPPR0   0
         3 000021   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000022   000000 701000 xent               TSX1    XUR$ERRMSG
         3 000023   000000 011000                    NOP     0

PL6.E3A0      #003=FKA$BREAK File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:147  
      720      433        /*E*   ERROR:   FKA-E$ALTBREAK-2
      721      434               MESSAGE: BREAK hit during rebuilding of alternate indexes
      722      435        */
      723      436    1           CALL M$READ(FPT_READ) ALTRET(MONERR);

    436  3 000024   000000 630400 2                  EPPR0   FPT_READ
         3 000025   440000 713400                    CLIMB   alt,read
         3 000026   401400 401760                    pmme    nvectors=4
         3 000027   000067 702000 3                  TSX2    MONERR

      724      437    1           CALL M$WRITE(WRITE_BLANK) ALTRET(MONERR);

    437  3 000030   000016 630400 2                  EPPR0   WRITE_BLANK
         3 000031   440001 713400                    CLIMB   alt,write
         3 000032   401400 401760                    pmme    nvectors=4
         3 000033   000067 702000 3                  TSX2    MONERR

      725      438
      726      439    1           IF BUF1 ~= 'Q' THEN

    439  3 000034   000031 236000 1                  LDQ     BUF1
         3 000035   777000 376003                    ANQ     -512,DU
         3 000036   121000 116003                    CMPQ    41472,DU
         3 000037   000042 600000 3                  TZE     s:445

      727      440    2           DO;                             /* CONTINUE                           */

      728      441    2              BREAK=0;

    441  3 000040   000032 450000 1                  STZ     BREAK

      729      442    2              RETURN;

    442  3 000041   000000 702200 xent               TSX2  ! X66_AARET

      730      443    2              END;                         /* CONTINUE                           */
      731      444
PL6.E3A0      #003=FKA$BREAK File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:148  
      732      445    1           ERRCODE=BREAK_MSG;

    445  3 000042   000040 236000 2                  LDQ     BREAK_MSG
         3 000043   000030 756000 1                  STQ     ERRCODE

      733      446    2           CALL FKA$CLOSE(CLOSERR) WHENALTRETURN DO;

    446  3 000044   200003 630500                    EPPR0   CLOSERR,,AUTO
         3 000045   200006 450500                    STP0    CLOSERR+3,,AUTO
         3 000046   200006 630500                    EPPR0   CLOSERR+3,,AUTO
         3 000047   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000050   000000 701000 xent               TSX1    FKA$CLOSE
         3 000051   000053 702000 3                  TSX2    s:447
         3 000052   000061 710000 3                  TRA     s:451

      734      447    2              IF CLOSERR.TYPE=%OLDERR THEN

    447  3 000053   200004 220100                    LDX0    CLOSERR+1,,AUTO
         3 000054   000002 100003                    CMPX0   2,DU
         3 000055   000067 601000 3                  TNZ     MONERR

      735      448    2                 ERRCODE=CLOSERR.ERR;

    448  3 000056   200003 236100                    LDQ     CLOSERR,,AUTO
         3 000057   000030 756000 1                  STQ     ERRCODE
         3 000060   000061 710000 3                  TRA     s:451

      736      449    2              ELSE GOTO MONERR;
      737      450    2              END;
      738      451    1           CALL M$XCON(RESET_XCON);

    451  3 000061   000032 630400 2                  EPPR0   RESET_XCON
         3 000062   010003 713400                    CLIMB   4099
         3 000063   400400 401760                    pmme    nvectors=2

      739      452    1           CALL M$XXX(FPT_XXX);

PL6.E3A0      #003=FKA$BREAK File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:149  
    452  3 000064   000022 630400 1                  EPPR0   FPT_XXX
         3 000065   000003 713400                    CLIMB   3
         3 000066   400400 401760                    pmme    nvectors=2

    445  3 000067                       MONERR       null
      740      453    1   MONERR: ;
      741      454    1           CALL FKA$ABORT;

    454  3 000067   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 000070   000000 701000 xent               TSX1    FKA$ABORT
         3 000071   000000 011000                    NOP     0

      742      455    1   END FKA$BREAK;

    455  3 000072   000000 702200 xent               TSX2  ! X66_AARET
      743      456         %EOD;

PL6.E3A0      #003=FKA$BREAK File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:150  
--  Include file information  --

   FK_DATA_C.:E05TOU  is referenced.
   FK_PERR_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure FKA$BREAK.
PL6.E3A0      #003=FKA$BREAK File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:151  

 **** Variables and constants ****

  ****  Section 001  Data  FKA$BREAK

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    32-0-0/w SBIN        r     1 BREAK                     31-0-0/c CHAR        r     1 BUF1
    30-0-0/w BIT         r     1 ERRCODE                    0-0-0/d STRC(360)   r     1 FPT_PROMPT
    12-0-0/d STRC(288)   r     1 FPT_TRMPRG                22-0-0/d STRC(216)   r     1 FPT_XXX

  ****  Section 002 RoData FKA$BREAK

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    41-0-0/c CHAR        r     1 BLANK                     40-0-0/w STRC        r     1 BREAK_MSG
     0-0-0/d STRC(504)   r     1 FPT_READ                  42-0-0/c CHAR(17)    r     1 PROMPT
    32-0-0/d STRC(216)   r     1 RESET_XCON                16-0-0/d STRC(432)   r     1 WRITE_BLANK

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w STRC(72)    r     1 CLOSERR

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0N  NULL        r     1 M$UC


   Procedure FKA$BREAK requires 59 words for executable code.
PL6.E3A0      #003=FKA$BREAK File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:152  
   Procedure FKA$BREAK requires 8 words of local(AUTO) storage.
PL6.E3A0      #003=FKA$BREAK File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:153  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #003=FKA$BREAK File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:154  
          MINI XREF LISTING

B$ALT.CODE
       406**DCL       406--REDEF     407--REDEF     407--REDEF
B$ALT.ERR.ERR#
       408**DCL       408--REDEF
B$ALT.EVID
       407**DCL       407--REDEF     407--REDEF
BLANK
       415**DCL       307--DCLINIT   308--DCLINIT
BREAK
       416**DCL       426>>IF        428<<ASSIGN    441<<ASSIGN
BREAK_MSG
       362**DCL       432<>CALL      445>>ASSIGN
BUF1
       414**DCL       268--DCLINIT   269--DCLINIT   439>>IF
CLOSERR
       396**DCL       446<>CALL
CLOSERR.ERR
       397**DCL       448>>ASSIGN
CLOSERR.TYPE
       398**DCL       447>>IF
ERRCODE
       413**DCL       345--DCLINIT   445<<ASSIGN    448<<ASSIGN
FKA$ABORT
       421**DCL-ENT   454--CALL
FKA$CLOSE
       420**DCL-ENT   446--CALL
FPT_PROMPT
       208**DCL       431<>CALL
FPT_PROMPT.V
       216**DCL       210--DCLINIT
FPT_READ
       266**DCL       436<>CALL
PL6.E3A0      #003=FKA$BREAK File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:155  
FPT_READ.STATION_
       269**DCL       270--REDEF
FPT_READ.V
       270**DCL       266--DCLINIT
FPT_READ.V.DVBYTE.REREAD#
       281**DCL       281--REDEF
FPT_READ.V.INDX#
       279**DCL       279--REDEF
FPT_TRMPRG
       236**DCL       425<>CALL
FPT_TRMPRG.V
       243**DCL       238--DCLINIT
FPT_TRMPRG.V.CTLFLG.RSTBRK#
       244**DCL       245--REDEF
FPT_XXX
       345**DCL       452<>CALL
FPT_XXX.V
       345**DCL       345--DCLINIT
FPT_XXX.V.STEPCC#
       346**DCL       346--REDEF
M$PROMPT
        57**DCL-ENT   431--CALL
M$READ
        34**DCL-ENT   436--CALL
M$TRMPRG
        58**DCL-ENT   425--CALL
M$WRITE
        34**DCL-ENT   437--CALL
M$XCON
        88**DCL-ENT   451--CALL
M$XXX
        45**DCL-ENT   452--CALL
MONERR
       445**LABEL     425--CALLALT   431--CALLALT   436--CALLALT   437--CALLALT   449--GOTO
PROMPT
       417**DCL       214--DCLINIT
PL6.E3A0      #003=FKA$BREAK File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:156  
RESET_XCON
       331**DCL       451<>CALL
RESET_XCON.V
       332**DCL       331--DCLINIT
WRITE_BLANK
       306**DCL       437<>CALL
WRITE_BLANK.STATION_
       308**DCL       308--REDEF
WRITE_BLANK.V
       309**DCL       306--DCLINIT
WRITE_BLANK.V.DVBYTE.VFC#
       315**DCL       315--REDEF
XUR$ERRMSG
       422**DCL-ENT   432--CALL
PL6.E3A0      #003=FKA$BREAK File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:157  
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #003=FKA$BREAK File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:158  
              MINI UREF LISTING

B$TCB     402**DCL
B$TCB$     418**DCL
FKA$BREAK      23**PROC
M$ACCT      50**DCL-ENT
M$ACTIVATE      53**DCL-ENT
M$ALIB      46**DCL-ENT
M$ASUSER      48**DCL-ENT
M$ATTACH      55**DCL-ENT
M$BADPP      73**DCL-ENT
M$CGCTL      54**DCL-ENT
M$CGINFO      54**DCL-ENT
M$CHECK      35**DCL-ENT
M$CHGUNIT      93**DCL-ENT
M$CLOSE      33**DCL-ENT
M$CLRSTK      91**DCL-ENT
M$CMDVAR     102**DCL-ENT
M$CONFIG      63**DCL-ENT
M$CORRES      38**DCL-ENT
M$CPEXIT      47**DCL-ENT
M$CVM      71**DCL-ENT
M$CVOL      36**DCL-ENT
M$DCLFLD      63**DCL-ENT
M$DEACTIVATE      53**DCL-ENT
M$DELREC      35**DCL-ENT
M$DEQ     100**DCL-ENT
M$DETACH      55**DCL-ENT
M$DEVICE      37**DCL-ENT
M$DISPLAY     100**DCL-ENT
M$DISPRES      40**DCL-ENT
M$DLIB      46**DCL-ENT
M$DRIBBLE      63**DCL-ENT
M$DRTN      91**DCL-ENT
PL6.E3A0      #003=FKA$BREAK File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:159  
M$DSUSER      48**DCL-ENT
M$ENQ      99**DCL-ENT
M$EOM      58**DCL-ENT
M$ERASE      64**DCL-ENT
M$ERR      45**DCL-ENT
M$ERRMSG      96**DCL-ENT
M$EVENT      88**DCL-ENT
M$EXHUME      97**DCL-ENT
M$EXIT      45**DCL-ENT
M$EXTEND      37**DCL-ENT
M$FDP      69**DCL-ENT
M$FDS      68**DCL-ENT
M$FEBOOT      61**DCL-ENT
M$FECTL      62**DCL-ENT
M$FEDUMP      61**DCL-ENT
M$FID      96**DCL-ENT
M$FINDPROC      50**DCL-ENT
M$FSUSER      48**DCL-ENT
M$FVP      70**DCL-ENT
M$FWCG      54**DCL-ENT
M$GBPL      74**DCL-ENT
M$GDDL      70**DCL-ENT
M$GDP      69**DCL-ENT
M$GDS      68**DCL-ENT
M$GETDCB      39**DCL-ENT
M$GETMOUSE      79**DCL-ENT
M$GETPM      80**DCL-ENT
M$GJOB      98**DCL-ENT
M$GLINEATTR      58**DCL-ENT
M$GOODPP      73**DCL-ENT
M$GPLATEN      66**DCL-ENT
M$GPROMPT      65**DCL-ENT
M$GTRMATTR      59**DCL-ENT
M$GTRMCTL      57**DCL-ENT
M$GTRMTAB      60**DCL-ENT
M$GVP      69**DCL-ENT
PL6.E3A0      #003=FKA$BREAK File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:160  
M$HELP      96**DCL-ENT
M$INT      88**DCL-ENT
M$INTRTN      49**DCL-ENT
M$IOQ      84**DCL-ENT
M$JOBSTATS      98**DCL-ENT
M$KEYIN      38**DCL-ENT
M$LDEV      33**DCL-ENT
M$LDTRC      46**DCL-ENT
M$LIMIT      39**DCL-ENT
M$LINES      38**DCL-ENT
M$LINK      45**DCL-ENT
M$MADMUCK      41**DCL-ENT
M$MAKUSER      72**DCL-ENT
M$MBS      40**DCL-ENT
M$MDFFLD      64**DCL-ENT
M$MERC      89**DCL-ENT
M$MERCS      90**DCL-ENT
M$MIRROR      84**DCL-ENT
M$MONINFO     101**DCL-ENT
M$MPL      74**DCL-ENT
M$NODEINFO      65**DCL-ENT
M$NXTUSR      99**DCL-ENT
M$OCMSG      97**DCL-ENT
M$OLAY      45**DCL-ENT
M$OPEN      33**DCL-ENT
M$PAS      74**DCL-ENT
M$PATHCON      97**DCL-ENT
M$PDS      68**DCL-ENT
M$PFIL      35**DCL-ENT
M$PLATEN      59**DCL-ENT
M$PRECORD      37**DCL-ENT
M$PROCNAME      50**DCL-ENT
M$PROFILE      61**DCL-ENT
M$RACST      41**DCL-ENT
M$RDSYSLOG      82**DCL-ENT
M$RELDCB      39**DCL-ENT
PL6.E3A0      #003=FKA$BREAK File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:161  
M$RELRES      40**DCL-ENT
M$RELSTARF      42**DCL-ENT
M$REM      42**DCL-ENT
M$RENV      89**DCL-ENT
M$REQUIRE      41**DCL-ENT
M$RETRY      90**DCL-ENT
M$RETRYS      90**DCL-ENT
M$REW      36**DCL-ENT
M$RLSFLD      64**DCL-ENT
M$RPRIV      92**DCL-ENT
M$RSPP      71**DCL-ENT
M$RSWITCH      93**DCL-ENT
M$RUE      99**DCL-ENT
M$SAD      72**DCL-ENT
M$SAVE      48**DCL-ENT
M$SCON      49**DCL-ENT
M$SCREECH      47**DCL-ENT
M$SENV      89**DCL-ENT
M$SETFMA      33**DCL-ENT
M$SETFP      62**DCL-ENT
M$SINPUT      60**DCL-ENT
M$SLCFLD      65**DCL-ENT
M$SMOUSE      79**DCL-ENT
M$SMPRT      71**DCL-ENT
M$SPRIV      92**DCL-ENT
M$SSC      72**DCL-ENT
M$SSWITCH      92**DCL-ENT
M$STATE     101**DCL-ENT
M$STD      73**DCL-ENT
M$STIMER      87**DCL-ENT
M$STLPP      70**DCL-ENT
M$STRAP      87**DCL-ENT
M$STRMATTR      59**DCL-ENT
M$STRMCTL      57**DCL-ENT
M$STRMTAB      60**DCL-ENT
M$SYMBIO      98**DCL-ENT
PL6.E3A0      #003=FKA$BREAK File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:162  
M$SYSCON      84**DCL-ENT
M$SYSID     102**DCL-ENT
M$TDCLOSE      83**DCL-ENT
M$TDIO      83**DCL-ENT
M$TDOPEN      82**DCL-ENT
M$TDREQCPU      83**DCL-ENT
M$TEMPWROC      77**DCL-ENT
M$TIME     100**DCL-ENT
M$TRAP      87**DCL-ENT
M$TRMISC      62**DCL-ENT
M$TRTN      91**DCL-ENT
M$TRUNC      34**DCL-ENT
M$TTIMER      87**DCL-ENT
M$UC      57**DCL
M$UMPL      74**DCL-ENT
M$UNFID      96**DCL-ENT
M$UNLATCH      53**DCL-ENT
M$UNSHARE      50**DCL-ENT
M$USRFIELD      93**DCL-ENT
M$VIRTUAL      68**DCL-ENT
M$WAIT      91**DCL-ENT
M$WEOF      36**DCL-ENT
M$WRSYSLOG      82**DCL-ENT
M$XCONRTN      49**DCL-ENT
M$XEQTIME     101**DCL-ENT
M$XFLUSH      42**DCL-ENT
M$XMOUSE      79**DCL-ENT
M$YC      47**DCL-ENT

PL6.E3A0      #004=FKA$CLOSE File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:163  
      744        1        /*T***********************************************************/
      745        2        /*T*                                                         */
      746        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      747        4        /*T*                                                         */
      748        5        /*T***********************************************************/
      749        6        /*F*     NAME:     FKA$CLOSE
      750        7                 PURPOSE:  To close the file
      751        8        */
      752        9        /*D*     NAME:     FKA$CLOSE
      753       10                 CALL:     CALL FKA$CLOSE(CLOSERR) ALTRET(LBL);
      754       11                 OUTPUT:   CLOSERR, a structure containing close error
      755       12                                    information if FKA$CLOSE altrets.
      756       13                 DESCRIPTION:
      757       14
      758       15                      If this is an IREL file, then move some information
      759       16                 from the structure we set up back to the FIT codes.
      760       17
      761       18                      Next, if the user had a command variable, restore
      762       19                 it.
      763       20
      764       21                      Finally, if the file was ever opened, tell M$RELSTARF
      765       22                 to do a sleazy close.  This sleazy close will cause the
      766       23                 file's FIT to be updated with our changes (if any) and the
      767       24                 upper levels for the alternate keys to be rebuilt.  If the
      768       25                 user specified RELG in his close fpt, that will also be
      769       26                 processed.  If M$RELSTARF altrets, either something very
      770       27                 unexpected and ugly happened (couldn't read the FIT, couldn't
      771       28                 get space in the ROSEG) or the guy wasn't allowed to RELG.
      772       29                 Whether it altrets or not, we also have to check to see
      773       30                 whether M$CLOSE passed us an older close error if we were
      774       31                 linked to from M$CLOSE.  If we find any error(s), we have
      775       32                 to pick one.  The error hierarchy is: (1) ugly M$RELSTARF
      776       33                 error, (2) older M$CLOSE error, (3) can't RELG.
      777       34
      778       35                      By the way, the M$RELSTARF close doesn't actually mark
      779       36                 ALTKEY's dcb closed.  The dcb is finally closed when ALTKEY
      780       37                 is run down.
PL6.E3A0      #004=FKA$CLOSE File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:164  
      781       38
      782       39        */
      783       40         %EJECT;
PL6.E3A0      #004=FKA$CLOSE File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:165  
      784       41        FKA$CLOSE: PROC(CLOSERR) ALTRET;
      785       42         %INCLUDE CP_6;
      786      123         %INCLUDE CP_6_SUBS;
      787      663         %INCLUDE B_ERRORS_C;
      788     1790         %INCLUDE FK_DATA_C;
      789     1867         %INCLUDE FKA_DATA_R;
      790     1883         %INCLUDE FM$FIT;
      791     2104         %INCLUDE FM_FIELD_C;
      792     2145        /* */
      793     2146         %FKA$ERR(FPTN=CLOSERR,STCLASS=" ");
      794     2152         %FPT_RELSTARF(ALTKEYS=FKA_ALTKEY_BFR, STCLASS=CONSTANT);
      795     2167         %FPT_CMDVAR(FPTN=RESTORE, NAME=VLP_NAME, FUN=STORE,
      796     2168         VALUE=FKA_CMDVAR, STCLASS=CONSTANT);
      797     2185         %FPT_CMDVAR(FPTN=DELETE, NAME=VLP_NAME, FUN=DELETE, STCLASS=CONSTANT);
      798     2202         %VLP_NAME(NAME='SORT$STAT');
      799     2229         %F$DCB(DCBN=F$DCB, STCLASS="BASED(FKA_DCB$)");
      800     2286         %FK$ALTKEY_BFR(FPTN=FKA_ALTKEY_BFR, STCLASS="SYMREF");
      801     2306         %CODE20(BASED="BASED(FKA_CODE20$)");
      802     2311         %CODE19(BASED="BASED(FKA_CODE19$)");
      803     2314         %FMG$IRKEYS(STCLASS="BASED(FKA_IRKEYS$)");
      804     2321         %B$TCB;
      805     2324         %B$ALT;
      806     2332        /* */
      807     2333    1     DCL B$TCB$ PTR SYMREF;
      808     2334        /* */
      809     2335    1     DCL I SBIN;
      810     2336    1     DCL J SBIN;
      811     2337        /* */
      812     2338        %EJECT;
PL6.E3A0      #004=FKA$CLOSE File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:166  
      813     2339    1           IF FKA_CLOSE_DONE THEN
      814     2340    1              RETURN;
      815     2341    1           CLOSERR='0'B;
      816     2342    1           IF F$DCB.ORG# = %IREL# THEN
      817     2343    2           DO;                             /* RETURN SOME INFO                   */
      818     2344    2              J=0;
      819     2345                                                /* Position to 1st alt key in CODE19  */
      820     2346    3              DO WHILE(NOT CODE19.K.KEYEND(J));
      821     2347    3                 J=J+1;
      822     2348    3                 END;
      823     2349    2              J=J+1;
      824     2350    3              DO I=1 TO CODE20.NKEYS-1;
      825     2351    3                 CODE20.K.LDA(I)=IRKEYS.K.LDA(I);
      826     2352    3                 CODE19.K.UNIQUE(J)=IRKEYS.K.UNIQUE(I);
      827     2353    4                 DO WHILE(NOT CODE19.K.KEYEND(J));
      828     2354    4                    J=J+1;
      829     2355    4                    END;
      830     2356    3                 J=J+1;
      831     2357    3                 END;
      832     2358    2              END;                         /* RETURN SOME INFO                   */
      833     2359
      834     2360    1           IF FKA_CMDVAR_SET THEN
      835     2361    2           DO;                             /* RESTORE OLD VALUE                  */
      836     2362    2              IF FKA_CMDVAR_EXIST THEN
      837     2363    3              DO;                          /* RESTORE OLD VALUE                  */
      838     2364    3                 CALL M$CMDVAR(RESTORE) ALTRET(IGNORE);
      839     2365    3                 END;                      /* RESTORE OLD VALUE                  */
      840     2366    2              ELSE
      841     2367    3              DO;                          /* DELETE                             */
      842     2368    3                 CALL M$CMDVAR(DELETE) ALTRET(IGNORE);
      843     2369    3                 END;                      /* DELETE                             */
      844     2370    2              END;                         /* RESTORE OLD VALUE                  */
      845     2371
      846     2372    1   IGNORE: FKA_ALTKEY_BFR.CODE=%ALTKEY_CLOSE#;
      847     2373    1           IF FKA_FILE_OPEN THEN
      848     2374    1              CALL M$RELSTARF(FPT_RELSTARF) ALTRET(CLSERR);
      849     2375    1           IF FKA_MON AND FKA_M$CLOSE_ERR ~= '0'B THEN
PL6.E3A0      #004=FKA$CLOSE File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:167  
      850     2376    1              GOTO OLD_ERR;
      851     2377    1           FKA_CLOSE_DONE=%YES#;
      852     2378    1           RETURN;
      853     2379    1   CLSERR: ;
      854     2380    1           CLOSERR.ERR=B$TCB$->B$TCB.ALT$->B$ALT.ERR;
      855     2381    1           CLOSERR.DCB#=B$TCB$->B$TCB.ALT$->B$ALT.DCB#;
      856     2382    1           IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE=%E$CLSREL THEN
      857     2383    1              CLOSERR.TYPE=%CANTRELG;
      858     2384    2           ELSE DO;
      859     2385    2              CLOSERR.TYPE=%UNEXPECTED;
      860     2386    2              GOTO ALT;
      861     2387    2              END;
      862     2388    1           IF FKA_MON AND FKA_M$CLOSE_ERR ~= '0'B THEN
      863     2389    2           DO;                      /* M$CLOSE error found before link to ALTKEY */
      864     2390    2   OLD_ERR:   ;
      865     2391    2              CLOSERR.TYPE=%OLDERR;
      866     2392    2              CLOSERR.ERR=FKA_M$CLOSE_ERR;
      867     2393    2              CLOSERR.DCB#=FKA_ALTKEY_BFR.DCB#;
      868     2394    2              END;                  /* M$CLOSE error found before link to ALTKEY */
      869     2395    1   ALT:    FKA_CLOSE_DONE=%YES#;
      870     2396    1           ALTRETURN;
      871     2397    1   END FKA$CLOSE;
      872     2398         %EOD;

PL6.E3A0      #004=FKA$CLOSE File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:168  
--  Include file information  --

   FM_FIELD_C.:E05TOU  is referenced.
   FM$FIT.:E05TOU  is referenced.
   FKA_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   FK_DATA_C.:E05TOU  is referenced.
   B_ERRORS_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure FKA$CLOSE.

   Procedure FKA$CLOSE requires 140 words for executable code.
   Procedure FKA$CLOSE requires 8 words of local(AUTO) storage.

PL6.E3A0      #004=FKA$CLOSE File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:169  

 Object Unit name= FKA$CLOSE                                  File name= FKA$ALTKEY.:E05TOU
 UTS= JUL 29 '97 15:32:20.52 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  RoData even  UTS     32     40  FKA$CLOSE
    2   Data  even  none     3      3  FKA$CLOSE
    3   Proc  even  none   140    214  FKA$CLOSE

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     3      0   yes    yes     yes      Std        1  FKA$CLOSE

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
                       nStd      0 X66_AUTO_1
                       nStd      0 X66_ARET
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AALT
PL6.E3A0      #004=FKA$CLOSE File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:170  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  FKA_MON                          r    FKA_IRKEYS$
     FKA_CODE19$                           FKA_CODE20$                           FKA_DCB$
     FKA_CMDVAR_EXIST                      FKA_CMDVAR                            FKA_FILE_OPEN
     FKA_CMDVAR_SET                        FKA_M$CLOSE_ERR                       FKA_CLOSE_DONE
     FKA_ALTKEY_BFR                        B$TCB$                                B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     NULLSID                               ISSID
PL6.E3A0      #004=FKA$CLOSE File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:171  


      744        1        /*T***********************************************************/
      745        2        /*T*                                                         */
      746        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      747        4        /*T*                                                         */
      748        5        /*T***********************************************************/
      749        6        /*F*     NAME:     FKA$CLOSE
      750        7                 PURPOSE:  To close the file
      751        8        */
      752        9        /*D*     NAME:     FKA$CLOSE
      753       10                 CALL:     CALL FKA$CLOSE(CLOSERR) ALTRET(LBL);
      754       11                 OUTPUT:   CLOSERR, a structure containing close error
      755       12                                    information if FKA$CLOSE altrets.
      756       13                 DESCRIPTION:
      757       14
      758       15                      If this is an IREL file, then move some information
      759       16                 from the structure we set up back to the FIT codes.
      760       17
      761       18                      Next, if the user had a command variable, restore
      762       19                 it.
      763       20
      764       21                      Finally, if the file was ever opened, tell M$RELSTARF
      765       22                 to do a sleazy close.  This sleazy close will cause the
      766       23                 file's FIT to be updated with our changes (if any) and the
      767       24                 upper levels for the alternate keys to be rebuilt.  If the
      768       25                 user specified RELG in his close fpt, that will also be
      769       26                 processed.  If M$RELSTARF altrets, either something very
      770       27                 unexpected and ugly happened (couldn't read the FIT, couldn't
      771       28                 get space in the ROSEG) or the guy wasn't allowed to RELG.
      772       29                 Whether it altrets or not, we also have to check to see
      773       30                 whether M$CLOSE passed us an older close error if we were
      774       31                 linked to from M$CLOSE.  If we find any error(s), we have
      775       32                 to pick one.  The error hierarchy is: (1) ugly M$RELSTARF
      776       33                 error, (2) older M$CLOSE error, (3) can't RELG.
      777       34
      778       35                      By the way, the M$RELSTARF close doesn't actually mark
      779       36                 ALTKEY's dcb closed.  The dcb is finally closed when ALTKEY
PL6.E3A0      #004=FKA$CLOSE File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:172  
      780       37                 is run down.
      781       38
      782       39        */
      783       40         %EJECT;
PL6.E3A0      #004=FKA$CLOSE File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:173  
      784       41        FKA$CLOSE: PROC(CLOSERR) ALTRET;

     41  3 000000   000000 700200 xent  FKA$CLOSE    TSX0  ! X66_AUTO_1
         3 000001   000010 000001                    ZERO    8,1

      785       42         %INCLUDE CP_6;
      786      123         %INCLUDE CP_6_SUBS;
      787      663         %INCLUDE B_ERRORS_C;
      788     1790         %INCLUDE FK_DATA_C;
      789     1867         %INCLUDE FKA_DATA_R;
      790     1883         %INCLUDE FM$FIT;
      791     2104         %INCLUDE FM_FIELD_C;
      792     2145        /* */
      793     2146         %FKA$ERR(FPTN=CLOSERR,STCLASS=" ");
      794     2152         %FPT_RELSTARF(ALTKEYS=FKA_ALTKEY_BFR, STCLASS=CONSTANT);
      795     2167         %FPT_CMDVAR(FPTN=RESTORE, NAME=VLP_NAME, FUN=STORE,
      796     2168         VALUE=FKA_CMDVAR, STCLASS=CONSTANT);
      797     2185         %FPT_CMDVAR(FPTN=DELETE, NAME=VLP_NAME, FUN=DELETE, STCLASS=CONSTANT);
      798     2202         %VLP_NAME(NAME='SORT$STAT');
      799     2229         %F$DCB(DCBN=F$DCB, STCLASS="BASED(FKA_DCB$)");
      800     2286         %FK$ALTKEY_BFR(FPTN=FKA_ALTKEY_BFR, STCLASS="SYMREF");
      801     2306         %CODE20(BASED="BASED(FKA_CODE20$)");
      802     2311         %CODE19(BASED="BASED(FKA_CODE19$)");
      803     2314         %FMG$IRKEYS(STCLASS="BASED(FKA_IRKEYS$)");
      804     2321         %B$TCB;
      805     2324         %B$ALT;
      806     2332        /* */
      807     2333    1     DCL B$TCB$ PTR SYMREF;
      808     2334        /* */
      809     2335    1     DCL I SBIN;
      810     2336    1     DCL J SBIN;
      811     2337        /* */
      812     2338        %EJECT;
PL6.E3A0      #004=FKA$CLOSE File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:174  
      813     2339    1           IF FKA_CLOSE_DONE THEN

   2339  3 000002   000000 234000 xsym               SZN     FKA_CLOSE_DONE
         3 000003   000005 605000 3                  TPL     s:2341

      814     2340    1              RETURN;

   2340  3 000004   000000 702200 xent               TSX2  ! X66_ARET

      815     2341    1           CLOSERR='0'B;

   2341  3 000005   200003 470500                    LDP0    @CLOSERR,,AUTO
         3 000006   000000 450100                    STZ     0,,PR0
         3 000007   000001 450100                    STZ     1,,PR0

      816     2342    1           IF F$DCB.ORG# = %IREL# THEN

   2342  3 000010   000000 471400 xsym               LDP1    FKA_DCB$
         3 000011   100032 236100                    LDQ     26,,PR1
         3 000012   777000 376003                    ANQ     -512,DU
         3 000013   015000 116003                    CMPQ    6656,DU
         3 000014   000116 601000 3                  TNZ     s:2360

      817     2343    2           DO;                             /* RETURN SOME INFO                   */

      818     2344    2              J=0;

   2344  3 000015   200005 450100                    STZ     J,,AUTO

      819     2345                                                /* Position to 1st alt key in CODE19  */
      820     2346    3              DO WHILE(NOT CODE19.K.KEYEND(J));

   2346  3 000016   000020 710000 3                  TRA     s:2348

      821     2347    3                 J=J+1;

   2347  3 000017   200005 054100                    AOS     J,,AUTO
PL6.E3A0      #004=FKA$CLOSE File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:175  

      822     2348    3                 END;

   2348  3 000020   200005 236100                    LDQ     J,,AUTO
         3 000021   000022 402007                    MPY     18,DL
         3 000022   000000 116003                    CMPQ    0,DU
         3 000023   000025 605000 3                  TPL     s:2348+5
         3 000024   000044 036003                    ADLQ    36,DU
         3 000025   000000 470400 xsym               LDP0    FKA_CODE19$
         3 000026   000000 066506                    CMPB    filb='0'B
         3 000027   000001 000001                    BDSC    1,Q,PR0                  by=0,bit=0,n=1
         3 000030   000002 000022 xsym               BDSC    B_VECTNIL+2              by=0,bit=0,n=18
         3 000031   000017 600000 3                  TZE     s:2347

      823     2349    2              J=J+1;

   2349  3 000032   200005 054100                    AOS     J,,AUTO

      824     2350    3              DO I=1 TO CODE20.NKEYS-1;

   2350  3 000033   000001 235007                    LDA     1,DL
         3 000034   200004 755100                    STA     I,,AUTO
         3 000035   000111 710000 3                  TRA     s:2357+1

      825     2351    3                 CODE20.K.LDA(I)=IRKEYS.K.LDA(I);

   2351  3 000036   200004 236100                    LDQ     I,,AUTO
         3 000037   000003 402007                    MPY     3,DL
         3 000040   000000 620006                    EAX0    0,QL
         3 000041   200004 236100                    LDQ     I,,AUTO
         3 000042   000007 402007                    MPY     7,DL
         3 000043   000000 470400 xsym               LDP0    FKA_IRKEYS$
         3 000044   000000 471400 xsym               LDP1    FKA_CODE20$
         3 000045   000002 736000                    QLS     2
         3 000046   000000 635010                    EAA     0,X0
         3 000047   000020 731000                    ARS     16
         3 000050   000105 100506                    MLR     fill='000'O
PL6.E3A0      #004=FKA$CLOSE File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:176  
         3 000051   000011 200003                    ADSC9   9,Q,PR0                  cn=1,n=3
         3 000052   100003 600003                    ADSC9   3,A,PR1                  cn=3,n=3

      826     2352    3                 CODE19.K.UNIQUE(J)=IRKEYS.K.UNIQUE(I);

   2352  3 000053   200004 236100                    LDQ     I,,AUTO
         3 000054   000374 402007                    MPY     252,DL
         3 000055   000000 116003                    CMPQ    0,DU
         3 000056   000060 605000 3                  TPL     s:2352+5
         3 000057   000044 036003                    ADLQ    36,DU
         3 000060   200006 756100                    STQ     J+1,,AUTO
         3 000061   200005 236100                    LDQ     J,,AUTO
         3 000062   000022 402007                    MPY     18,DL
         3 000063   000000 116003                    CMPQ    0,DU
         3 000064   000066 605000 3                  TPL     s:2352+11
         3 000065   000044 036003                    ADLQ    36,DU
         3 000066   200006 235100                    LDA     J+1,,AUTO
         3 000067   000000 471400 xsym               LDP1    FKA_CODE19$
         3 000070   003106 060505                    CSL     bolr='003'O
         3 000071   000006 400001                    BDSC    6,A,PR0                  by=2,bit=0,n=1
         3 000072   100001 010001                    BDSC    1,Q,PR1                  by=0,bit=1,n=1

      827     2353    4                 DO WHILE(NOT CODE19.K.KEYEND(J));

   2353  3 000073   000075 710000 3                  TRA     s:2355

      828     2354    4                    J=J+1;

   2354  3 000074   200005 054100                    AOS     J,,AUTO

      829     2355    4                    END;

   2355  3 000075   200005 236100                    LDQ     J,,AUTO
         3 000076   000022 402007                    MPY     18,DL
         3 000077   000000 116003                    CMPQ    0,DU
         3 000100   000102 605000 3                  TPL     s:2355+5
         3 000101   000044 036003                    ADLQ    36,DU
PL6.E3A0      #004=FKA$CLOSE File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:177  
         3 000102   000000 470400 xsym               LDP0    FKA_CODE19$
         3 000103   000000 066506                    CMPB    filb='0'B
         3 000104   000001 000001                    BDSC    1,Q,PR0                  by=0,bit=0,n=1
         3 000105   000002 000022 xsym               BDSC    B_VECTNIL+2              by=0,bit=0,n=18
         3 000106   000074 600000 3                  TZE     s:2354

      830     2356    3                 J=J+1;

   2356  3 000107   200005 054100                    AOS     J,,AUTO

      831     2357    3                 END;

   2357  3 000110   200004 054100                    AOS     I,,AUTO
         3 000111   000000 471400 xsym               LDP1    FKA_CODE20$
         3 000112   200004 236100                    LDQ     I,,AUTO
         3 000113   000036 604000 3                  TMI     s:2351
         3 000114   100000 116100                    CMPQ    0,,PR1
         3 000115   000036 602000 3                  TNC     s:2351

      832     2358    2              END;                         /* RETURN SOME INFO                   */

      833     2359
      834     2360    1           IF FKA_CMDVAR_SET THEN

   2360  3 000116   000000 234000 xsym               SZN     FKA_CMDVAR_SET
         3 000117   000133 605000 3                  TPL     IGNORE

      835     2361    2           DO;                             /* RESTORE OLD VALUE                  */

      836     2362    2              IF FKA_CMDVAR_EXIST THEN

   2362  3 000120   000000 234000 xsym               SZN     FKA_CMDVAR_EXIST
         3 000121   000127 605000 3                  TPL     s:2368

      837     2363    3              DO;                          /* RESTORE OLD VALUE                  */

      838     2364    3                 CALL M$CMDVAR(RESTORE) ALTRET(IGNORE);
PL6.E3A0      #004=FKA$CLOSE File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:178  

   2364  3 000122   000004 630400 1                  EPPR0   RESTORE
         3 000123   420025 713400                    CLIMB   alt,+8213
         3 000124   402400 401760                    pmme    nvectors=6
         3 000125   000133 702000 3                  TSX2    IGNORE

      839     2365    3                 END;                      /* RESTORE OLD VALUE                  */

   2365  3 000126   000133 710000 3                  TRA     IGNORE

      840     2366    2              ELSE
      841     2367    3              DO;                          /* DELETE                             */

      842     2368    3                 CALL M$CMDVAR(DELETE) ALTRET(IGNORE);

   2368  3 000127   000022 630400 1                  EPPR0   DELETE
         3 000130   420025 713400                    CLIMB   alt,+8213
         3 000131   402400 401760                    pmme    nvectors=6
         3 000132   000133 702000 3                  TSX2    IGNORE

      843     2369    3                 END;                      /* DELETE                             */

      844     2370    2              END;                         /* RESTORE OLD VALUE                  */

      845     2371
      846     2372    1   IGNORE: FKA_ALTKEY_BFR.CODE=%ALTKEY_CLOSE#;

   2372  3 000133   000002 235007       IGNORE       LDA     2,DL
         3 000134   000002 755000 xsym               STA     FKA_ALTKEY_BFR+2

      847     2373    1           IF FKA_FILE_OPEN THEN

   2373  3 000135   000000 234000 xsym               SZN     FKA_FILE_OPEN
         3 000136   000143 605000 3                  TPL     s:2375

      848     2374    1              CALL M$RELSTARF(FPT_RELSTARF) ALTRET(CLSERR);

PL6.E3A0      #004=FKA$CLOSE File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:179  
   2374  3 000137   000000 630400 1                  EPPR0   FPT_RELSTARF
         3 000140   460010 713400                    CLIMB   alt,+24584
         3 000141   400400 401760                    pmme    nvectors=2
         3 000142   000152 702000 3                  TSX2    CLSERR

      849     2375    1           IF FKA_MON AND FKA_M$CLOSE_ERR ~= '0'B THEN

   2375  3 000143   000000 234000 xsym               SZN     FKA_MON
         3 000144   000147 605000 3                  TPL     s:2377
         3 000145   000000 235000 xsym               LDA     FKA_M$CLOSE_ERR
         3 000146   000202 601000 3                  TNZ     OLD_ERR

      850     2376    1              GOTO OLD_ERR;
      851     2377    1           FKA_CLOSE_DONE=%YES#;

   2377  3 000147   400000 236003                    LDQ     -131072,DU
         3 000150   000000 756000 xsym               STQ     FKA_CLOSE_DONE

      852     2378    1           RETURN;

   2378  3 000151   000000 702200 xent               TSX2  ! X66_ARET

   2377  3 000152                       CLSERR       null
      853     2379    1   CLSERR: ;
      854     2380    1           CLOSERR.ERR=B$TCB$->B$TCB.ALT$->B$ALT.ERR;

   2380  3 000152   000000 470400 xsym               LDP0    B$TCB$
         3 000153   000000 471500                    LDP1    0,,PR0
         3 000154   100102 236100                    LDQ     66,,PR1
         3 000155   200003 473500                    LDP3    @CLOSERR,,AUTO
         3 000156   300000 756100                    STQ     0,,PR3

      855     2381    1           CLOSERR.DCB#=B$TCB$->B$TCB.ALT$->B$ALT.DCB#;

   2381  3 000157   000000 470400 xsym               LDP0    B$TCB$
         3 000160   000000 471500                    LDP1    0,,PR0
         3 000161   100101 720100                    LXL0    65,,PR1
PL6.E3A0      #004=FKA$CLOSE File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:180  
         3 000162   300001 440100                    SXL0    1,,PR3

      856     2382    1           IF B$TCB$->B$TCB.ALT$->B$ALT.ERR.CODE=%E$CLSREL THEN

   2382  3 000163   000000 471500                    LDP1    0,,PR0
         3 000164   100102 236100                    LDQ     66,,PR1
         3 000165   377770 376007                    ANQ     131064,DL
         3 000166   002330 116007                    CMPQ    1240,DL
         3 000167   000173 601000 3                  TNZ     s:2385

      857     2383    1              CLOSERR.TYPE=%CANTRELG;

   2383  3 000170   000003 221003                    LDX1    3,DU
         3 000171   300001 741100                    STX1    1,,PR3
         3 000172   000176 710000 3                  TRA     s:2388

      858     2384    2           ELSE DO;

      859     2385    2              CLOSERR.TYPE=%UNEXPECTED;

   2385  3 000173   000001 221003                    LDX1    1,DU
         3 000174   300001 741100                    STX1    1,,PR3

      860     2386    2              GOTO ALT;

   2386  3 000175   000211 710000 3                  TRA     ALT

      861     2387    2              END;
      862     2388    1           IF FKA_MON AND FKA_M$CLOSE_ERR ~= '0'B THEN

   2388  3 000176   000000 234000 xsym               SZN     FKA_MON
         3 000177   000211 605000 3                  TPL     ALT
         3 000200   000000 235000 xsym               LDA     FKA_M$CLOSE_ERR
         3 000201   000211 600000 3                  TZE     ALT

      863     2389    2           DO;                      /* M$CLOSE error found before link to ALTKEY */

PL6.E3A0      #004=FKA$CLOSE File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:181  
   2385  3 000202                       OLD_ERR      null
      864     2390    2   OLD_ERR:   ;
      865     2391    2              CLOSERR.TYPE=%OLDERR;

   2391  3 000202   000002 220003                    LDX0    2,DU
         3 000203   200003 470500                    LDP0    @CLOSERR,,AUTO
         3 000204   000001 740100                    STX0    1,,PR0

      866     2392    2              CLOSERR.ERR=FKA_M$CLOSE_ERR;

   2392  3 000205   000000 236000 xsym               LDQ     FKA_M$CLOSE_ERR
         3 000206   000000 756100                    STQ     0,,PR0

      867     2393    2              CLOSERR.DCB#=FKA_ALTKEY_BFR.DCB#;

   2393  3 000207   000000 721000 xsym               LXL1    FKA_ALTKEY_BFR
         3 000210   000001 441100                    SXL1    1,,PR0

      868     2394    2              END;                  /* M$CLOSE error found before link to ALTKEY */

      869     2395    1   ALT:    FKA_CLOSE_DONE=%YES#;

   2395  3 000211   400000 236003       ALT          LDQ     -131072,DU
         3 000212   000000 756000 xsym               STQ     FKA_CLOSE_DONE

      870     2396    1           ALTRETURN;

   2396  3 000213   000000 702200 xent               TSX2  ! X66_AALT
      871     2397    1   END FKA$CLOSE;
      872     2398         %EOD;

PL6.E3A0      #004=FKA$CLOSE File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:182  
--  Include file information  --

   FM_FIELD_C.:E05TOU  is referenced.
   FM$FIT.:E05TOU  is referenced.
   FKA_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   FK_DATA_C.:E05TOU  is referenced.
   B_ERRORS_C.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure FKA$CLOSE.
PL6.E3A0      #004=FKA$CLOSE File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:183  

 **** Variables and constants ****

  ****  Section 001 RoData FKA$CLOSE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    22-0-0/d STRC(504)   r     1 DELETE                     0-0-0/d STRC(144)   r     1 FPT_RELSTARF
     4-0-0/d STRC(504)   r     1 RESTORE

  ****  Section 002  Data  FKA$CLOSE

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c STRC(90)    r     1 VLP_NAME

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @CLOSERR                  *0-0-0/w STRC(72)    r     1 CLOSERR
     4-0-0/w SBIN        r     1 I                          5-0-0/w SBIN        r     1 J

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$TCB$                     0-0-0/d STRC(37080) r     1 FKA_ALTKEY_BFR
     0-0-0/b BIT         r     1 FKA_CLOSE_DONE             0-0-0/c CHAR(512)   r     1 FKA_CMDVAR
     0-0-0/b BIT         r     1 FKA_CMDVAR_EXIST           0-0-0/b BIT         r     1 FKA_CMDVAR_SET
     0-0-0/w PTR         r     1 FKA_CODE19$                0-0-0/w PTR         r     1 FKA_CODE20$
     0-0-0/w PTR         r     1 FKA_DCB$                   0-0-0/b BIT         r     1 FKA_FILE_OPEN
     0-0-0/w PTR         r     1 FKA_IRKEYS$                0-0-0/w BIT         r     1 FKA_M$CLOSE_ERR
     0-0-0/b BIT         r     1 FKA_MON
PL6.E3A0      #004=FKA$CLOSE File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:184  

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w STRC(2448)  r     1 B$ALT                      0-0-0/w STRC(144)   r     1 B$TCB
     0-0-0/w STRC(54)    r     1 CODE19                     0-0-0/w STRC(180)   r     1 CODE20
     0-0-0/d ASTR(3528)  r     1 F$DCB                      0-0-0/w STRC(360)   r     1 IRKEYS


   Procedure FKA$CLOSE requires 140 words for executable code.
   Procedure FKA$CLOSE requires 8 words of local(AUTO) storage.
PL6.E3A0      #004=FKA$CLOSE File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:185  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #004=FKA$CLOSE File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:186  
          MINI XREF LISTING

ALT
      2395**LABEL    2386--GOTO
B$ALT.CODE
      2326**DCL      2326--REDEF    2327--REDEF    2327--REDEF
B$ALT.DCB#
      2327**DCL      2381>>ASSIGN
B$ALT.ERR
      2327**DCL      2380>>ASSIGN
B$ALT.ERR.CODE
      2328**DCL      2382>>IF
B$ALT.ERR.ERR#
      2328**DCL      2328--REDEF
B$ALT.EVID
      2327**DCL      2327--REDEF    2327--REDEF
B$TCB.ALT$
      2322**DCL      2380>>ASSIGN   2381>>ASSIGN   2382>>IF
B$TCB$
      2333**DCL      2380>>ASSIGN   2381>>ASSIGN   2382>>IF
CLOSERR
      2147**DCL        41--PROC     2341<<ASSIGN
CLOSERR.DCB#
      2150**DCL      2381<<ASSIGN   2393<<ASSIGN
CLOSERR.ERR
      2148**DCL      2380<<ASSIGN   2392<<ASSIGN
CLOSERR.TYPE
      2149**DCL      2383<<ASSIGN   2385<<ASSIGN   2391<<ASSIGN
CLSERR
      2377**LABEL    2374--CALLALT
CODE19.K.KEYEND
      2312**DCL      2346>>DOWHILE  2353>>DOWHILE
CODE19.K.UNIQUE
      2312**DCL      2352<<ASSIGN
PL6.E3A0      #004=FKA$CLOSE File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:187  
CODE20.K.LDA
      2308**DCL      2351<<ASSIGN
CODE20.NKEYS
      2307**DCL      2350>>DOINDEX
DELETE
      2196**DCL      2368<>CALL
DELETE.V
      2198**DCL      2196--DCLINIT
F$DCB.ACTPOS
      2262**DCL      2262--REDEF
F$DCB.ARS#
      2236**DCL      2236--REDEF
F$DCB.ATTR
      2255**DCL      2256--REDEF
F$DCB.BORROW
      2270**DCL      2270--REDEF    2270--REDEF    2270--REDEF
F$DCB.DCBNAME.L
      2284**DCL      2284--IMP-SIZ
F$DCB.EOMCHAR#
      2240**DCL      2240--REDEF
F$DCB.FLDID
      2265**DCL      2265--REDEF
F$DCB.FORM$
      2259**DCL      2259--REDEF
F$DCB.FSECT
      2275**DCL      2275--REDEF
F$DCB.FSN#
      2252**DCL      2252--REDEF    2252--REDEF    2253--REDEF
F$DCB.HEADER$
      2258**DCL      2258--REDEF
F$DCB.IXTNSIZE#
      2256**DCL      2256--REDEF
F$DCB.LASTSTA$
      2245**DCL      2245--REDEF
F$DCB.LVL
      2271**DCL      2271--REDEF
PL6.E3A0      #004=FKA$CLOSE File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:188  
F$DCB.NAME#.C
      2246**DCL      2246--REDEF
F$DCB.NOEOF
      2268**DCL      2268--REDEF
F$DCB.NRECS#
      2257**DCL      2257--REDEF
F$DCB.NRECX
      2276**DCL      2276--REDEF
F$DCB.OHDR
      2268**DCL      2268--REDEF
F$DCB.ORG#
      2251**DCL      2251--REDEF    2342>>IF
F$DCB.PRECNO
      2274**DCL      2274--REDEF
F$DCB.RCSZ
      2280**DCL      2280--REDEF
F$DCB.RES#
      2247**DCL      2247--REDEF
F$DCB.SETX
      2259**DCL      2259--REDEF
F$DCB.TAB$
      2259**DCL      2259--REDEF
F$DCB.TDA
      2273**DCL      2274--REDEF
F$DCB.WSN#
      2247**DCL      2247--REDEF
FKA_ALTKEY_BFR
      2287**DCL      2164--DCLINIT
FKA_ALTKEY_BFR.CODE
      2292**DCL      2372<<ASSIGN
FKA_ALTKEY_BFR.DCB#
      2288**DCL      2393>>ASSIGN
FKA_CLOSE_DONE
      1882**DCL      2339>>IF       2377<<ASSIGN   2395<<ASSIGN
FKA_CMDVAR
      1881**DCL      2180--DCLINIT
PL6.E3A0      #004=FKA$CLOSE File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:189  
FKA_CMDVAR_EXIST
      1881**DCL      2362>>IF
FKA_CMDVAR_SET
      1881**DCL      2360>>IF
FKA_CODE19$
      1877**DCL      2312--IMP-PTR  2346>>DOWHILE  2352>>ASSIGN   2353>>DOWHILE
FKA_CODE20$
      1877**DCL      2307--IMP-PTR  2350>>DOINDEX  2351>>ASSIGN
FKA_DCB$
      1878**DCL      2230--IMP-PTR  2342>>IF
FKA_FILE_OPEN
      1881**DCL      2373>>IF
FKA_IRKEYS$
      1876**DCL      2315--IMP-PTR  2351>>ASSIGN   2352>>ASSIGN
FKA_M$CLOSE_ERR
      1882**DCL      2375>>IF       2388>>IF       2392>>ASSIGN
FKA_MON
      1875**DCL      2375>>IF       2388>>IF
FPT_RELSTARF
      2163**DCL      2374<>CALL
I
      2335**DCL      2350<<DOINDEX  2351>>ASSIGN   2351>>ASSIGN   2352>>ASSIGN
IGNORE
      2372**LABEL    2364--CALLALT  2368--CALLALT
IRKEYS.K.LDA
      2319**DCL      2351>>ASSIGN
IRKEYS.K.UNIQUE
      2317**DCL      2352>>ASSIGN
J
      2336**DCL      2344<<ASSIGN   2346>>DOWHILE  2347<<ASSIGN   2347>>ASSIGN   2349<<ASSIGN   2349>>ASSIGN
      2352>>ASSIGN   2353>>DOWHILE  2354<<ASSIGN   2354>>ASSIGN   2356<<ASSIGN   2356>>ASSIGN
M$CMDVAR
       120**DCL-ENT  2364--CALL     2368--CALL
M$RELSTARF
        60**DCL-ENT  2374--CALL
OLD_ERR
PL6.E3A0      #004=FKA$CLOSE File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:190  
      2385**LABEL    2376--GOTO
RESTORE
      2179**DCL      2364<>CALL
RESTORE.V
      2181**DCL      2179--DCLINIT
VLP_NAME
      2227**DCL      2179--DCLINIT  2196--DCLINIT
PL6.E3A0      #004=FKA$CLOSE File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:191  
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #004=FKA$CLOSE File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:192  
              MINI UREF LISTING

FKA$CLOSE      41**PROC
FKA_ALTKEYS$    1875**DCL
FKA_BOUND    1878**DCL
FKA_DATA_BUF    1880**DCL
FKA_DATA_BUF$    1880**DCL
FKA_DATA_GRAN    1878**DCL
FKA_DUPS    1879**DCL
FKA_FIELD_START_DATA    1876**DCL
FKA_INDEX_BUF    1879**DCL
FKA_INDEX_BUF$    1880**DCL
FKA_INDEX_GRAN    1878**DCL
FKA_IRKEYS_DATA    1876**DCL
FKA_KEYSIZE    1879**DCL
FKA_KFIELD$    1877**DCL
FKA_KFIELD_DATA    1877**DCL
FKA_KTPTR$    1878**DCL
FKA_NUMKEYS    1879**DCL
FKA_RECFIELD$    1875**DCL
FKA_RECSIZE    1879**DCL
FKA_START$    1875**DCL
FKA_UNIQUE    1875**DCL
M$ACCT      68**DCL-ENT
M$ACTIVATE      71**DCL-ENT
M$ALIB      64**DCL-ENT
M$ASUSER      66**DCL-ENT
M$ATTACH      73**DCL-ENT
M$BADPP      91**DCL-ENT
M$CGCTL      72**DCL-ENT
M$CGINFO      72**DCL-ENT
M$CHECK      53**DCL-ENT
M$CHGUNIT     111**DCL-ENT
M$CLOSE      51**DCL-ENT
PL6.E3A0      #004=FKA$CLOSE File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:193  
M$CLRSTK     109**DCL-ENT
M$CONFIG      81**DCL-ENT
M$CORRES      56**DCL-ENT
M$CPEXIT      65**DCL-ENT
M$CVM      89**DCL-ENT
M$CVOL      54**DCL-ENT
M$DCLFLD      81**DCL-ENT
M$DEACTIVATE      71**DCL-ENT
M$DELREC      53**DCL-ENT
M$DEQ     118**DCL-ENT
M$DETACH      73**DCL-ENT
M$DEVICE      55**DCL-ENT
M$DISPLAY     118**DCL-ENT
M$DISPRES      58**DCL-ENT
M$DLIB      64**DCL-ENT
M$DRIBBLE      81**DCL-ENT
M$DRTN     109**DCL-ENT
M$DSUSER      66**DCL-ENT
M$ENQ     117**DCL-ENT
M$EOM      76**DCL-ENT
M$ERASE      82**DCL-ENT
M$ERR      63**DCL-ENT
M$ERRMSG     114**DCL-ENT
M$EVENT     106**DCL-ENT
M$EXHUME     115**DCL-ENT
M$EXIT      63**DCL-ENT
M$EXTEND      55**DCL-ENT
M$FDP      87**DCL-ENT
M$FDS      86**DCL-ENT
M$FEBOOT      79**DCL-ENT
M$FECTL      80**DCL-ENT
M$FEDUMP      79**DCL-ENT
M$FID     114**DCL-ENT
M$FINDPROC      68**DCL-ENT
M$FSUSER      66**DCL-ENT
M$FVP      88**DCL-ENT
PL6.E3A0      #004=FKA$CLOSE File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:194  
M$FWCG      72**DCL-ENT
M$GBPL      92**DCL-ENT
M$GDDL      88**DCL-ENT
M$GDP      87**DCL-ENT
M$GDS      86**DCL-ENT
M$GETDCB      57**DCL-ENT
M$GETMOUSE      97**DCL-ENT
M$GETPM      98**DCL-ENT
M$GJOB     116**DCL-ENT
M$GLINEATTR      76**DCL-ENT
M$GOODPP      91**DCL-ENT
M$GPLATEN      84**DCL-ENT
M$GPROMPT      83**DCL-ENT
M$GTRMATTR      77**DCL-ENT
M$GTRMCTL      75**DCL-ENT
M$GTRMTAB      78**DCL-ENT
M$GVP      87**DCL-ENT
M$HELP     114**DCL-ENT
M$INT     106**DCL-ENT
M$INTRTN      67**DCL-ENT
M$IOQ     102**DCL-ENT
M$JOBSTATS     116**DCL-ENT
M$KEYIN      56**DCL-ENT
M$LDEV      51**DCL-ENT
M$LDTRC      64**DCL-ENT
M$LIMIT      57**DCL-ENT
M$LINES      56**DCL-ENT
M$LINK      63**DCL-ENT
M$MADMUCK      59**DCL-ENT
M$MAKUSER      90**DCL-ENT
M$MBS      58**DCL-ENT
M$MDFFLD      82**DCL-ENT
M$MERC     107**DCL-ENT
M$MERCS     108**DCL-ENT
M$MIRROR     102**DCL-ENT
M$MONINFO     119**DCL-ENT
PL6.E3A0      #004=FKA$CLOSE File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:195  
M$MPL      92**DCL-ENT
M$NODEINFO      83**DCL-ENT
M$NXTUSR     117**DCL-ENT
M$OCMSG     115**DCL-ENT
M$OLAY      63**DCL-ENT
M$OPEN      51**DCL-ENT
M$PAS      92**DCL-ENT
M$PATHCON     115**DCL-ENT
M$PDS      86**DCL-ENT
M$PFIL      53**DCL-ENT
M$PLATEN      77**DCL-ENT
M$PRECORD      55**DCL-ENT
M$PROCNAME      68**DCL-ENT
M$PROFILE      79**DCL-ENT
M$PROMPT      75**DCL-ENT
M$RACST      59**DCL-ENT
M$RDSYSLOG     100**DCL-ENT
M$READ      52**DCL-ENT
M$RELDCB      57**DCL-ENT
M$RELRES      58**DCL-ENT
M$REM      60**DCL-ENT
M$RENV     107**DCL-ENT
M$REQUIRE      59**DCL-ENT
M$RETRY     108**DCL-ENT
M$RETRYS     108**DCL-ENT
M$REW      54**DCL-ENT
M$RLSFLD      82**DCL-ENT
M$RPRIV     110**DCL-ENT
M$RSPP      89**DCL-ENT
M$RSWITCH     111**DCL-ENT
M$RUE     117**DCL-ENT
M$SAD      90**DCL-ENT
M$SAVE      66**DCL-ENT
M$SCON      67**DCL-ENT
M$SCREECH      65**DCL-ENT
M$SENV     107**DCL-ENT
PL6.E3A0      #004=FKA$CLOSE File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:196  
M$SETFMA      51**DCL-ENT
M$SETFP      80**DCL-ENT
M$SINPUT      78**DCL-ENT
M$SLCFLD      83**DCL-ENT
M$SMOUSE      97**DCL-ENT
M$SMPRT      89**DCL-ENT
M$SPRIV     110**DCL-ENT
M$SSC      90**DCL-ENT
M$SSWITCH     110**DCL-ENT
M$STATE     119**DCL-ENT
M$STD      91**DCL-ENT
M$STIMER     105**DCL-ENT
M$STLPP      88**DCL-ENT
M$STRAP     105**DCL-ENT
M$STRMATTR      77**DCL-ENT
M$STRMCTL      75**DCL-ENT
M$STRMTAB      78**DCL-ENT
M$SYMBIO     116**DCL-ENT
M$SYSCON     102**DCL-ENT
M$SYSID     120**DCL-ENT
M$TDCLOSE     101**DCL-ENT
M$TDIO     101**DCL-ENT
M$TDOPEN     100**DCL-ENT
M$TDREQCPU     101**DCL-ENT
M$TEMPWROC      95**DCL-ENT
M$TIME     118**DCL-ENT
M$TRAP     105**DCL-ENT
M$TRMISC      80**DCL-ENT
M$TRMPRG      76**DCL-ENT
M$TRTN     109**DCL-ENT
M$TRUNC      52**DCL-ENT
M$TTIMER     105**DCL-ENT
M$UC      75**DCL
M$UMPL      92**DCL-ENT
M$UNFID     114**DCL-ENT
M$UNLATCH      71**DCL-ENT
PL6.E3A0      #004=FKA$CLOSE File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:197  
M$UNSHARE      68**DCL-ENT
M$USRFIELD     111**DCL-ENT
M$VIRTUAL      86**DCL-ENT
M$WAIT     109**DCL-ENT
M$WEOF      54**DCL-ENT
M$WRITE      52**DCL-ENT
M$WRSYSLOG     100**DCL-ENT
M$XCON     106**DCL-ENT
M$XCONRTN      67**DCL-ENT
M$XEQTIME     119**DCL-ENT
M$XFLUSH      60**DCL-ENT
M$XMOUSE      97**DCL-ENT
M$XXX      63**DCL-ENT
M$YC      65**DCL-ENT

PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:198  
      873        1        /*T***********************************************************/
      874        2        /*T*                                                         */
      875        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      876        4        /*T*                                                         */
      877        5        /*T***********************************************************/
      878        6        /*F*     NAME:     FKA$COMP
      879        7                 ENTRY:    FKA$COMPKEY
      880        8                 PURPOSE:  To compare two IREL keys
      881        9        */
      882       10        /*D*     NAME:     FKA$COMP
      883       11                 CALL:     CALL FKA$COMP(FIRST_RECORD, SECOND_RECORD, RESULT)
      884       12                 INPUT:    FIRST_RECORD - Input record for comparison
      885       13                           SECOND_RECORD - Input record for comparison
      886       14                 OUTPUT:   RESULT - 0 - equal
      887       15                                    1 - first < second
      888       16                                    2 - first > second
      889       17                 DESCRIPTION:
      890       18
      891       19                      Assume records are equal until proven otherwise.
      892       20                 Compare the index portion of the key first.
      893       21
      894       22                      Next, compare the keys themselves.  Next, compare
      895       23                 the IDs.  The keys may be duplicates.  Finally, compare
      896       24                 the SEGCNTs.  This keeps segments within sets of duplicates
      897       25                 in their proper order.
      898       26        */
      899       27         %EJECT;
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:199  
      900       28        FKA$COMP: PROC(FIRST_RECORD, SECOND_RECORD, RESULT);
      901       29        /* */
      902       30         %INCLUDE CP_6;
      903      111         %INCLUDE FM_FIELD_C;
      904      152         %INCLUDE FKA_DATA_R;
      905      168         %INCLUDE B$OBJECT_C;
      906     3598        /* */
      907     3599    1     DCL FIRST_RECORD CHAR(FKA_RECSIZE);
      908     3600    1     DCL SECOND_RECORD CHAR(FKA_RECSIZE);
      909     3601    1     DCL RESULT SBIN;
      910     3602        /* */
      911     3603         %VREBL_DATATYPES;
      912     3678         %VLP_RECFIELD(FPTN=RECFIELD, STCLASS="BASED(FKA_RECFIELD$)");
      913     3722         %FMG$IRKEYS(FPTN=IRKEYS, STCLASS="BASED(FKA_IRKEYS$)");
      914     3729         %FMG$KFIELD(FPTN=KFIELD, STCLASS="BASED(FKA_KFIELD$)");
      915     3732        /* */
      916     3733    1     DCL FIRST$ PTR;
      917     3734    1     DCL SECOND$ PTR;
      918     3735    1     DCL INDEX# UBIN;
      919     3736    1     DCL KEY1$ PTR;
      920     3737    1     DCL KEY2$ PTR;
      921     3738    1     DCL KEYTYPE UBIN;
      922     3739    1     DCL FN UBIN;
      923     3740    1     DCL LEN UBIN;
      924     3741    1     DCL I UBIN;
      925     3742    1     DCL SIZE UBIN;
      926     3743    1     DCL TEMP1 CHAR(8) DALIGNED;
      927     3744    1     DCL TEMP2 CHAR(8) DALIGNED;
      928     3745    1     DCL POS SBIN;
      929     3746    1     DCL KEY1_TEMP CHAR(64);
      930     3747    1     DCL KEY2_TEMP CHAR(64);
      931     3748    1     DCL CHAR1 CHAR(1);
      932     3749    1     DCL SIGN CHAR(1);
      933     3750    1     DCL DIGIT CHAR(1);
      934     3751        /* */
      935     3752    1     DCL KEY1 CHAR(1) BASED(KEY1$) CALIGNED;
      936     3753    1     DCL KEY2 CHAR(1) BASED(KEY2$) CALIGNED;
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:200  
      937     3754    1     DCL INDX CHAR(1) BASED CALIGNED;
      938     3755    1     DCL ID CHAR(4) BASED CALIGNED;
      939     3756    1     DCL SEGCNT CHAR(2) BASED CALIGNED;
      940     3757    1     DCL CHR CHAR(LEN) BASED CALIGNED;
      941     3758    1     DCL CHAR4 CHAR(4) BASED CALIGNED;
      942     3759    1     DCL CHAR8 CHAR(8) BASED CALIGNED;
      943     3760        /* */
      944     3761         %EQU EQUAL=0;
      945     3762         %EQU LESS=1;
      946     3763         %EQU GREATER=2;
      947     3764         %EQU LEADING=0;
      948     3765         %EQU TRAILING=1;
      949     3766        /* */
      950     3767    1     DCL FMG$COMPUDTS ENTRY(4);
      951     3768    1     DCL FMG$COMPUDLS ENTRY(4);
      952     3769    1     DCL FMG$COMPPDLS ENTRY(4);
      953     3770    1     DCL FMG$COMPPDNS ENTRY(4);
      954     3771    1     DCL FMG$COMPPDTS ENTRY(4);
      955     3772    1     DCL FMG$COMPSFLT ENTRY(3);
      956     3773    1     DCL FMG$COMPDFLT ENTRY(3);
      957     3774    1     DCL FMG$COMPPDFLT ENTRY(4);
      958     3775    1     DCL FMG$COMPUDFLT ENTRY(4);
      959     3776        /* */
      960     3777    1           RESULT=%EQUAL;
      961     3778    1           INDEX# = ASCBIN(SUBSTR(FIRST_RECORD,0,1));
      962     3779    1           I = ASCBIN(SUBSTR(SECOND_RECORD,0,1));
      963     3780
      964     3781    2           IF INDEX# ~= I THEN DO;
      965     3782    2              IF INDEX# < I THEN
      966     3783    2                 RESULT=%LESS;
      967     3784    2              ELSE
      968     3785    2                 RESULT=%GREATER;
      969     3786    2              RETURN;
      970     3787    2              END;
      971     3788
      972     3789    1           FIRST$ = PINCRC(ADDR(FIRST_RECORD),1);
      973     3790    1           SECOND$ = PINCRC(ADDR(SECOND_RECORD),1);
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:201  
      974     3791
      975     3792    2           IF IRKEYS.K.DEGENERATE(INDEX#) THEN DO; /* Degenerate case.           */
      976     3793    2              LEN = IRKEYS.K.KEYL(INDEX#);
      977     3794    3              IF FIRST$->CHR ~= SECOND$->CHR THEN DO;
      978     3795    3                 IF FIRST$->CHR < SECOND$->CHR THEN
      979     3796    3                    RESULT = %LESS;
      980     3797    3                 ELSE
      981     3798    3                    RESULT = %GREATER;
      982     3799    3                 RETURN;
      983     3800    3                 END;
      984     3801    2              END;
      985     3802    2           ELSE DO;
      986     3803    3              IF IRKEYS.K.NFIELDS(INDEX#) = 1 THEN DO; /* Just one segment.      */
      987     3804    3                 FN = KFIELD.FIELD(IRKEYS.K.FIRSTFIELD(INDEX#));
      988     3805    3                 KEYTYPE = RECFIELD.FIELD.TYPE#(FN);
      989     3806    3                 KEY1$ = FIRST$;
      990     3807    3                 KEY2$ = SECOND$;
      991     3808    3                 CALL COMPFIELD;
      992     3809    3                 IF RESULT ~= %EQUAL THEN
      993     3810    3                    RETURN;
      994     3811    3                 END;
      995     3812    2              ELSE
      996     3813    2                 CALL COMPKEY;             /* Compare complex keys               */
      997     3814    2              END;
      998     3815
      999     3816    2           IF RESULT = %EQUAL THEN DO;     /* Compare remaining fields           */
     1000     3817    2              FIRST$=PINCRC(FIRST$, FKA_KEYSIZE);
     1001     3818    2              SECOND$=PINCRC(SECOND$, FKA_KEYSIZE);
     1002     3819
     1003     3820    3              IF FIRST$->ID ~= SECOND$->ID THEN DO; /* IDs not equal             */
     1004     3821    3                 IF FIRST$->ID < SECOND$->ID THEN
     1005     3822    3                    RESULT=%LESS;
     1006     3823    3                 ELSE
     1007     3824    3                    RESULT=%GREATER;
     1008     3825    3                 END;
     1009     3826    2              END;
     1010     3827
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:202  
     1011     3828    2           IF RESULT = %EQUAL THEN DO;     /* Compare segcnt                     */
     1012     3829    2              FIRST$=PINCRC(FIRST$, 4);
     1013     3830    2              SECOND$=PINCRC(SECOND$, 4);
     1014     3831
     1015     3832    3              IF FIRST$->SEGCNT ~= SECOND$->SEGCNT THEN DO; /* Segcnts not equal */
     1016     3833    3                 IF FIRST$->SEGCNT < SECOND$->SEGCNT THEN
     1017     3834    3                    RESULT=%LESS;
     1018     3835    3                 ELSE
     1019     3836    3                    RESULT=%GREATER;
     1020     3837    3                 END;
     1021     3838    2              END;
     1022     3839
     1023     3840    1           RETURN;
     1024     3841         %EJECT;
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:203  
     1025     3842        /*F*     NAME:     FKA$COMPKEY
     1026     3843                 PURPOSE:  To determine if two keys are equal
     1027     3844                 DESCRIPTION:
     1028     3845
     1029     3846                      This just compares two IREL keys for FKA$OUTPUT.
     1030     3847                 This will tell FKA$OUTPUT if it needs a new key, or
     1031     3848                 just an entry for a duplicate key.
     1032     3849        */
     1033     3850    1   FKA$COMPKEY: ENTRY(FIRST_RECORD, SECOND_RECORD, RESULT);
     1034     3851        /* */
     1035     3852    1           FIRST$=ADDR(FIRST_RECORD);
     1036     3853    1           SECOND$=ADDR(SECOND_RECORD);
     1037     3854    1           INDEX#=RESULT;
     1038     3855    1           RESULT=%EQUAL;
     1039     3856
     1040     3857    2           IF IRKEYS.K.NFIELDS(INDEX#) = 1 THEN DO; /* Just one segment.         */
     1041     3858    2              FN = KFIELD.FIELD(IRKEYS.K.FIRSTFIELD(INDEX#));
     1042     3859    2              KEYTYPE = RECFIELD.FIELD.TYPE#(FN);
     1043     3860    2              KEY1$ = FIRST$;
     1044     3861    2              KEY2$ = SECOND$;
     1045     3862    2              CALL COMPFIELD;
     1046     3863    2              END;
     1047     3864    1           ELSE
     1048     3865    1              CALL COMPKEY;                /* Compare complex keys               */
     1049     3866
     1050     3867    1           RETURN;
     1051     3868         %EJECT;
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:204  
     1052     3869        /*I*     NAME:     COMPFIELD
     1053     3870                 PURPOSE:  To compare two fields
     1054     3871                 DESCRIPTION:
     1055     3872
     1056     3873                      The kind of comparison we do depends on the data
     1057     3874                 type of the field.
     1058     3875        */
     1059     3876         %EJECT;
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:205  
     1060     3877    1   COMPFIELD: PROC;
     1061     3878        /* */
     1062     3879    2              LEN = RECFIELD.DECFIELD.LEN#(FN);
     1063     3880    3              DO CASE(KEYTYPE);
     1064     3881    3                 CASE(%UDTS_DATATYPE);
     1065     3882    3                    CALL FMG$COMPUDTS(KEY1, KEY2, LEN, RESULT);
     1066     3883
     1067     3884    3                 CASE(%UDLS_DATATYPE);
     1068     3885    3                    CALL FMG$COMPUDLS(KEY1, KEY2, LEN, RESULT);
     1069     3886
     1070     3887    3                 CASE(%UDLO_DATATYPE);
     1071     3888    3                    CALL COMPUDLO(KEY1, KEY2, LEN, RESULT);
     1072     3889
     1073     3890    3                 CASE(%UDTO_DATATYPE);
     1074     3891    3                    CALL COMPUDTO(KEY1, KEY2, LEN, RESULT);
     1075     3892
     1076     3893    3                 CASE(%PDLA_DATATYPE, %PDLE_DATATYPE, %DATE_DATATYPE,
     1077     3894    3                        %TIME_DATATYPE);
     1078     3895    3                    CALL FMG$COMPPDLS(KEY1, KEY2, LEN, RESULT);
     1079     3896
     1080     3897    3                 CASE(%PDNS_DATATYPE);
     1081     3898    3                    CALL FMG$COMPPDNS(KEY1, KEY2, LEN, RESULT);
     1082     3899
     1083     3900    3                 CASE(%PDTA_DATATYPE, %PDTE_DATATYPE);
     1084     3901    3                    CALL FMG$COMPPDTS(KEY1, KEY2, LEN, RESULT);
     1085     3902
     1086     3903    3                 CASE(%CHAR_DATATYPE, %UBIN_DATATYPE, %UTS_DATATYPE);
     1087     3904    3                    LEN = RECFIELD.FIELD.LEN#(FN);
     1088     3905    3                    IF KEYTYPE ~= %CHAR_DATATYPE THEN
     1089     3906    3                       LEN = LEN / 9;
     1090     3907    4                    IF KEY1$->CHR ~= KEY2$->CHR THEN DO; /* Not equal            */
     1091     3908    4                       IF KEY1$->CHR < KEY2$->CHR THEN
     1092     3909    4                          RESULT=%LESS;
     1093     3910    4                       ELSE
     1094     3911    4                          RESULT=%GREATER;
     1095     3912    4                       END;
     1096     3913
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:206  
     1097     3914    3                 CASE(%SFLT_DATATYPE);
     1098     3915    3                    LEN = RECFIELD.FIELD.LEN#(FN);
     1099     3916    3                    TEMP1=KEY1$->CHAR4;
     1100     3917    3                    TEMP2=KEY2$->CHAR4;
     1101     3918    3                    CALL FMG$COMPSFLT(TEMP1, TEMP2, RESULT);
     1102     3919
     1103     3920    3                 CASE(%DFLT_DATATYPE);
     1104     3921    3                    LEN = RECFIELD.FIELD.LEN#(FN);
     1105     3922    3                    TEMP1=KEY1$->CHAR8;
     1106     3923    3                    TEMP2=KEY2$->CHAR8;
     1107     3924    3                    CALL FMG$COMPDFLT(TEMP1, TEMP2, RESULT);
     1108     3925
     1109     3926    3                 CASE(%SBIN_DATATYPE);
     1110     3927    3                    LEN = RECFIELD.FIELD.LEN#(FN) / 9;
     1111     3928    3                    CALL COMPSBIN;
     1112     3929
     1113     3930    3                 CASE(%PDFLT_DATATYPE);
     1114     3931    3                    CALL FMG$COMPPDFLT(KEY1, KEY2, LEN, RESULT);
     1115     3932
     1116     3933    3                 CASE(%UDFLT_DATATYPE);
     1117     3934    3                    CALL FMG$COMPUDFLT(KEY1, KEY2, LEN, RESULT);
     1118     3935
     1119     3936    3                 END;                      /* CASE                               */
     1120     3937
     1121     3938    2              RETURN;
     1122     3939    2      END COMPFIELD;
     1123     3940         %EJECT;
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:207  
     1124     3941        /*I*     NAME:     COMPKEY
     1125     3942                 PURPOSE:  To compare two IREL keys
     1126     3943                 DESCRIPTION:
     1127     3944
     1128     3945                      Loop through the key definition until we hit the
     1129     3946                 end, or we reach a point where the keys are not equal.
     1130     3947
     1131     3948                      Compare the actual fields.
     1132     3949        */
     1133     3950         %EJECT;
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:208  
     1134     3951    1   COMPKEY:   PROC;
     1135     3952        /* */
     1136     3953    2              KEY1$ = FIRST$;
     1137     3954    2              KEY2$ = SECOND$;
     1138     3955
     1139     3956    3   LOOP:      DO I = IRKEYS.K.FIRSTFIELD(INDEX#) TO IRKEYS.K.FIRSTFIELD(INDEX#)+
     1140     3957    3                  IRKEYS.K.NFIELDS(INDEX#)-1;
     1141     3958    3                 FN = KFIELD.FIELD(I);
     1142     3959    3                 KEYTYPE = RECFIELD.FIELD.TYPE#(FN);
     1143     3960    3                 CALL COMPFIELD;
     1144     3961    3                 IF RESULT ~= %EQUAL THEN
     1145     3962    3                    RETURN;
     1146     3963    3                 CALL SET_SIZE;
     1147     3964    3                 KEY1$ = PINCRC(KEY1$, SIZE);
     1148     3965    3                 KEY2$ = PINCRC(KEY2$, SIZE);
     1149     3966    3                 END;
     1150     3967
     1151     3968    2              RETURN;
     1152     3969    2      END COMPKEY;
     1153     3970         %EJECT;
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:209  
     1154     3971        /*I*     NAME:     COMPSBIN
     1155     3972                 PURPOSE:  To compare two SBIN fields
     1156     3973                 DESCRIPTION:
     1157     3974
     1158     3975                      Move the SBIN fields into a full word with the
     1159     3976                 significant bytes in the high order portion of the
     1160     3977                 word.  Then, do the comparison.
     1161     3978        */
     1162     3979    1   COMPSBIN:  PROC;
     1163     3980    2     DCL CTEMP CHAR(LEN) BASED;
     1164     3981    2     DCL STEMP_KEY1 SBIN;
     1165     3982    2     DCL CTEMP_KEY1 REDEF STEMP_KEY1 CHAR(4);
     1166     3983    2     DCL STEMP_KEY2 SBIN;
     1167     3984    2     DCL CTEMP_KEY2 REDEF STEMP_KEY2 CHAR(4);
     1168     3985        /* */
     1169     3986    2              CTEMP_KEY1=KEY1$->CTEMP;
     1170     3987    2              CTEMP_KEY2=KEY2$->CTEMP;
     1171     3988
     1172     3989    2              IF STEMP_KEY1 ~= STEMP_KEY2 THEN
     1173     3990    3              DO;                          /* NOT EQUAL                          */
     1174     3991    3                 IF STEMP_KEY1 < STEMP_KEY2 THEN
     1175     3992    3                    RESULT=%LESS;
     1176     3993    3                 ELSE
     1177     3994    3                    RESULT=%GREATER;
     1178     3995    3                 END;                      /* NOT EQUAL                          */
     1179     3996
     1180     3997    2              RETURN;
     1181     3998    2      END COMPSBIN;
     1182     3999         %EJECT;
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:210  
     1183     4000        /*I*     NAME:     COMPUDLO
     1184     4001                 PURPOSE:  To compare leading overpunch fields
     1185     4002                 DESCRIPTION:
     1186     4003
     1187     4004                      Split out the sign from the digit, then compare
     1188     4005                 as unpacked decimal with a leading sign.
     1189     4006        */
     1190     4007    1   COMPUDLO:  PROC(KEY1, KEY2, LEN, RESULT);
     1191     4008    2     DCL KEY1 CHAR(64);
     1192     4009    2     DCL KEY2 CHAR(64);
     1193     4010    2     DCL LEN SBIN;
     1194     4011    2     DCL RESULT SBIN;
     1195     4012        /* */
     1196     4013    2              POS=%LEADING;
     1197     4014    2              CALL SPLIT(KEY1_TEMP, KEY1);
     1198     4015
     1199     4016    2              CALL SPLIT(KEY2_TEMP, KEY2);
     1200     4017
     1201     4018    2              CALL FMG$COMPUDLS(KEY1_TEMP, KEY2_TEMP, LEN+1, RESULT);
     1202     4019    2              RETURN;
     1203     4020    2      END COMPUDLO;
     1204     4021         %EJECT;
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:211  
     1205     4022        /*I*     NAME:     COMPUDTO
     1206     4023                 PURPOSE:  To compare trailing overpunch fields
     1207     4024                 DESCRIPTION:
     1208     4025
     1209     4026                      Split out the sign from the field, then compare
     1210     4027                 as unpacked decimal with a trailing sign.
     1211     4028        */
     1212     4029    1   COMPUDTO:  PROC(KEY1, KEY2, LEN, RESULT);
     1213     4030    2     DCL KEY1 CHAR(64);
     1214     4031    2     DCL KEY2 CHAR(64);
     1215     4032    2     DCL LEN SBIN;
     1216     4033    2     DCL RESULT SBIN;
     1217     4034        /* */
     1218     4035    2              POS=%TRAILING;
     1219     4036    2              CALL SPLIT(KEY1_TEMP, KEY1);
     1220     4037
     1221     4038    2              CALL SPLIT(KEY2_TEMP, KEY2);
     1222     4039
     1223     4040    2              CALL FMG$COMPUDLS(KEY1_TEMP, KEY2_TEMP, LEN+1, RESULT);
     1224     4041    2              RETURN;
     1225     4042    2      END COMPUDTO;
     1226     4043         %EJECT;
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:212  
     1227     4044        /*I*     NAME:     SET_SIZE
     1228     4045                 PURPOSE:  To set the size of a key field in bytes.
     1229     4046                 DESCRIPTION:
     1230     4047                      Use the LEN we already know to figure the size in bytes.
     1231     4048        */
     1232     4049    1   SET_SIZE:  PROC;
     1233     4050        /* */
     1234     4051    3              DO CASE(KEYTYPE);
     1235     4052    3                 CASE(%PDLE_DATATYPE, %PDTE_DATATYPE, %PDLA_DATATYPE,
     1236     4053    3                  %PDTA_DATATYPE, %PDNS_DATATYPE, %PDFLT_DATATYPE,
     1237     4054    3                  %DATE_DATATYPE, %TIME_DATATYPE);
     1238     4055    3                    SIZE=(LEN+1)/2;
     1239     4056
     1240     4057    3                 CASE(ELSE);
     1241     4058    3                    SIZE=LEN;
     1242     4059
     1243     4060    3                 END;                      /* Do Case                            */
     1244     4061
     1245     4062    2              RETURN;
     1246     4063    2      END SET_SIZE;
     1247     4064         %EJECT;
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:213  
     1248     4065        /*I*     NAME:     SPLIT
     1249     4066                 PURPOSE:  To split an overpunched sign
     1250     4067                 DESCRIPTION:
     1251     4068
     1252     4069                      Pick up the character to split.  Then set a
     1253     4070                 separate sign and digit.  Insert the split number
     1254     4071                 into TEMP.
     1255     4072        */
     1256     4073         %EJECT;
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:214  
     1257     4074    1   SPLIT:     PROC(TEMP, ORIG);
     1258     4075    2     DCL TEMP CHAR(64);
     1259     4076    2     DCL ORIG CHAR(64);
     1260     4077        /* */
     1261     4078    2              IF POS = %LEADING THEN
     1262     4079    2                 CALL INSERT(CHAR1, 0, 1, SUBSTR(ORIG, 0, 1));
     1263     4080    2              ELSE
     1264     4081    2                 CALL INSERT(CHAR1, 0, 1, SUBSTR(ORIG, LEN-1, 1));
     1265     4082
     1266     4083    2              IF CHAR1 = '{' THEN
     1267     4084    3              DO;                          /* +0                                 */
     1268     4085    3                 SIGN='+';
     1269     4086    3                 DIGIT='0';
     1270     4087    3                 END;                      /* +0                                 */
     1271     4088    2              ELSE
     1272     4089    2                 IF CHAR1 = '}' THEN
     1273     4090    3                 DO;                       /* -0                                 */
     1274     4091    3                    SIGN='-';
     1275     4092    3                    DIGIT='0';
     1276     4093    3                    END;                   /* -0                                 */
     1277     4094    2                 ELSE
     1278     4095    2                    IF CHAR1 < 'J' THEN
     1279     4096    3                    DO;                    /* +1 TO +9                           */
     1280     4097    3                       SIGN='+';
     1281     4098    3                       DIGIT=BINASC(ASCBIN(CHAR1)-16);
     1282     4099    3                       END;                /* +1 TO +9                           */
     1283     4100    2                    ELSE
     1284     4101    3                    DO;                    /* -1 TO -9                           */
     1285     4102    3                       SIGN='-';
     1286     4103    3                       DIGIT=BINASC(ASCBIN(CHAR1)-25);
     1287     4104    3                       END;                /* -1 TO -9                           */
     1288     4105
     1289     4106    2              CALL INSERT(TEMP, 0, 1, SIGN);
     1290     4107    2              IF POS = %LEADING THEN
     1291     4108    3              DO;                          /* LEADING SIGN                       */
     1292     4109    3                 CALL INSERT(TEMP, 1, 1, DIGIT);
     1293     4110    3                 CALL INSERT(TEMP, 2, LEN-1, SUBSTR(ORIG, 1, LEN-1));
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:215  
     1294     4111    3                 END;                      /* LEADING SIGN                       */
     1295     4112    2              ELSE
     1296     4113    3              DO;                          /* TRAILING SIGN                      */
     1297     4114    3                 CALL INSERT(TEMP, LEN-1, 1, DIGIT);
     1298     4115    3                 CALL INSERT(TEMP, 1, LEN-1, SUBSTR(ORIG, 0, LEN-1));
     1299     4116    3                 END;                      /* TRAILING SIGN                      */
     1300     4117
     1301     4118    2              RETURN;
     1302     4119    2      END SPLIT;
     1303     4120    1   END FKA$COMP;
     1304     4121         %EOD;

PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:216  
--  Include file information  --

   B$OBJECT_C.:E05TOU  is referenced.
   FKA_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   FM_FIELD_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure FKA$COMP.

   Procedure FKA$COMP requires 714 words for executable code.
   Procedure FKA$COMP requires 76 words of local(AUTO) storage.

PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:217  

 Object Unit name= FKA$COMP                                   File name= FKA$ALTKEY.:E05TOU
 UTS= JUL 29 '97 15:32:32.00 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Proc  even  none   714   1312  FKA$COMP
    2  RoData even  none     1      1  FKA$COMP

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     1      0   yes            yes      Std        3  FKA$COMP
     1    206                  yes      Std        3  FKA$COMPKEY

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       4 FMG$COMPUDTS
         yes           Std       4 FMG$COMPUDFLT
         yes           Std       4 FMG$COMPPDLS
         yes           Std       3 FMG$COMPSFLT
         yes           Std       3 FMG$COMPDFLT
         yes           Std       4 FMG$COMPPDTS
         yes           Std       4 FMG$COMPPDFLT
         yes           Std       4 FMG$COMPPDNS
         yes           Std       4 FMG$COMPUDLS
                       nStd      0 X66_AUTO_3
                       nStd      0 X66_ARET
                       Std       0 B_CONSPOOL_D
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:218  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  FKA_RECFIELD$                    r    FKA_IRKEYS$
r    FKA_KFIELD$                           FKA_RECSIZE                           FKA_KEYSIZE
     B_VECTNIL
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:219  


      873        1        /*T***********************************************************/
      874        2        /*T*                                                         */
      875        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
      876        4        /*T*                                                         */
      877        5        /*T***********************************************************/
      878        6        /*F*     NAME:     FKA$COMP
      879        7                 ENTRY:    FKA$COMPKEY
      880        8                 PURPOSE:  To compare two IREL keys
      881        9        */
      882       10        /*D*     NAME:     FKA$COMP
      883       11                 CALL:     CALL FKA$COMP(FIRST_RECORD, SECOND_RECORD, RESULT)
      884       12                 INPUT:    FIRST_RECORD - Input record for comparison
      885       13                           SECOND_RECORD - Input record for comparison
      886       14                 OUTPUT:   RESULT - 0 - equal
      887       15                                    1 - first < second
      888       16                                    2 - first > second
      889       17                 DESCRIPTION:
      890       18
      891       19                      Assume records are equal until proven otherwise.
      892       20                 Compare the index portion of the key first.
      893       21
      894       22                      Next, compare the keys themselves.  Next, compare
      895       23                 the IDs.  The keys may be duplicates.  Finally, compare
      896       24                 the SEGCNTs.  This keeps segments within sets of duplicates
      897       25                 in their proper order.
      898       26        */
      899       27         %EJECT;
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:220  
      900       28        FKA$COMP: PROC(FIRST_RECORD, SECOND_RECORD, RESULT);

     28  1 000000   000000 700200 xent  FKA$COMP     TSX0  ! X66_AUTO_3
         1 000001   000114 000003                    ZERO    76,3

      901       29        /* */
      902       30         %INCLUDE CP_6;
      903      111         %INCLUDE FM_FIELD_C;
      904      152         %INCLUDE FKA_DATA_R;
      905      168         %INCLUDE B$OBJECT_C;
      906     3598        /* */
      907     3599    1     DCL FIRST_RECORD CHAR(FKA_RECSIZE);
      908     3600    1     DCL SECOND_RECORD CHAR(FKA_RECSIZE);
      909     3601    1     DCL RESULT SBIN;
      910     3602        /* */
      911     3603         %VREBL_DATATYPES;
      912     3678         %VLP_RECFIELD(FPTN=RECFIELD, STCLASS="BASED(FKA_RECFIELD$)");
      913     3722         %FMG$IRKEYS(FPTN=IRKEYS, STCLASS="BASED(FKA_IRKEYS$)");
      914     3729         %FMG$KFIELD(FPTN=KFIELD, STCLASS="BASED(FKA_KFIELD$)");
      915     3732        /* */
      916     3733    1     DCL FIRST$ PTR;
      917     3734    1     DCL SECOND$ PTR;
      918     3735    1     DCL INDEX# UBIN;
      919     3736    1     DCL KEY1$ PTR;
      920     3737    1     DCL KEY2$ PTR;
      921     3738    1     DCL KEYTYPE UBIN;
      922     3739    1     DCL FN UBIN;
      923     3740    1     DCL LEN UBIN;
      924     3741    1     DCL I UBIN;
      925     3742    1     DCL SIZE UBIN;
      926     3743    1     DCL TEMP1 CHAR(8) DALIGNED;
      927     3744    1     DCL TEMP2 CHAR(8) DALIGNED;
      928     3745    1     DCL POS SBIN;
      929     3746    1     DCL KEY1_TEMP CHAR(64);
      930     3747    1     DCL KEY2_TEMP CHAR(64);
      931     3748    1     DCL CHAR1 CHAR(1);
      932     3749    1     DCL SIGN CHAR(1);
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:221  
      933     3750    1     DCL DIGIT CHAR(1);
      934     3751        /* */
      935     3752    1     DCL KEY1 CHAR(1) BASED(KEY1$) CALIGNED;
      936     3753    1     DCL KEY2 CHAR(1) BASED(KEY2$) CALIGNED;
      937     3754    1     DCL INDX CHAR(1) BASED CALIGNED;
      938     3755    1     DCL ID CHAR(4) BASED CALIGNED;
      939     3756    1     DCL SEGCNT CHAR(2) BASED CALIGNED;
      940     3757    1     DCL CHR CHAR(LEN) BASED CALIGNED;
      941     3758    1     DCL CHAR4 CHAR(4) BASED CALIGNED;
      942     3759    1     DCL CHAR8 CHAR(8) BASED CALIGNED;
      943     3760        /* */
      944     3761         %EQU EQUAL=0;
      945     3762         %EQU LESS=1;
      946     3763         %EQU GREATER=2;
      947     3764         %EQU LEADING=0;
      948     3765         %EQU TRAILING=1;
      949     3766        /* */
      950     3767    1     DCL FMG$COMPUDTS ENTRY(4);
      951     3768    1     DCL FMG$COMPUDLS ENTRY(4);
      952     3769    1     DCL FMG$COMPPDLS ENTRY(4);
      953     3770    1     DCL FMG$COMPPDNS ENTRY(4);
      954     3771    1     DCL FMG$COMPPDTS ENTRY(4);
      955     3772    1     DCL FMG$COMPSFLT ENTRY(3);
      956     3773    1     DCL FMG$COMPDFLT ENTRY(3);
      957     3774    1     DCL FMG$COMPPDFLT ENTRY(4);
      958     3775    1     DCL FMG$COMPUDFLT ENTRY(4);
      959     3776        /* */
      960     3777    1           RESULT=%EQUAL;

   3777  1 000002   200005 470500                    LDP0    @RESULT,,AUTO
         1 000003   000000 450100                    STZ     0,,PR0

      961     3778    1           INDEX# = ASCBIN(SUBSTR(FIRST_RECORD,0,1));

   3778  1 000004   200003 471500                    LDP1    @FIRST_RECORD,,AUTO
         1 000005   000100 101500                    MRL     fill='000'O
         1 000006   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:222  
         1 000007   200106 000004                    ADSC9   @ORIG+2,,AUTO            cn=0,n=4
         1 000010   200106 236100                    LDQ     @ORIG+2,,AUTO
         1 000011   200010 756100                    STQ     INDEX#,,AUTO

      962     3779    1           I = ASCBIN(SUBSTR(SECOND_RECORD,0,1));

   3779  1 000012   200004 473500                    LDP3    @SECOND_RECORD,,AUTO
         1 000013   000100 101500                    MRL     fill='000'O
         1 000014   300000 000001                    ADSC9   0,,PR3                   cn=0,n=1
         1 000015   200106 000004                    ADSC9   @ORIG+2,,AUTO            cn=0,n=4
         1 000016   200106 236100                    LDQ     @ORIG+2,,AUTO
         1 000017   200016 756100                    STQ     I,,AUTO

      963     3780
      964     3781    2           IF INDEX# ~= I THEN DO;

   3781  1 000020   200010 116100                    CMPQ    INDEX#,,AUTO
         1 000021   000032 600000 1                  TZE     s:3789

      965     3782    2              IF INDEX# < I THEN

   3782  1 000022   000027 602000 1                  TNC     s:3785
         1 000023   000027 600000 1                  TZE     s:3785

      966     3783    2                 RESULT=%LESS;

   3783  1 000024   000001 235007                    LDA     1,DL
         1 000025   000000 755100                    STA     0,,PR0
         1 000026   000031 710000 1                  TRA     s:3786

      967     3784    2              ELSE
      968     3785    2                 RESULT=%GREATER;

   3785  1 000027   000002 235007                    LDA     2,DL
         1 000030   000000 755100                    STA     0,,PR0

      969     3786    2              RETURN;
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:223  

   3786  1 000031   000000 702200 xent               TSX2  ! X66_ARET

      970     3787    2              END;
      971     3788
      972     3789    1           FIRST$ = PINCRC(ADDR(FIRST_RECORD),1);

   3789  1 000032   200003 236100                    LDQ     @FIRST_RECORD,,AUTO
         1 000033   200000 036007                    ADLQ    65536,DL
         1 000034   200006 756100                    STQ     FIRST$,,AUTO

      973     3790    1           SECOND$ = PINCRC(ADDR(SECOND_RECORD),1);

   3790  1 000035   200004 236100                    LDQ     @SECOND_RECORD,,AUTO
         1 000036   200000 036007                    ADLQ    65536,DL
         1 000037   200007 756100                    STQ     SECOND$,,AUTO

      974     3791
      975     3792    2           IF IRKEYS.K.DEGENERATE(INDEX#) THEN DO; /* Degenerate case.           */

   3792  1 000040   200010 236100                    LDQ     INDEX#,,AUTO
         1 000041   000007 402007                    MPY     7,DL
         1 000042   000000 474400 xsym               LDP4    FKA_IRKEYS$
         1 000043   400006 236106                    LDQ     6,QL,PR4
         1 000044   040000 316007                    CANQ    16384,DL
         1 000045   000075 600000 1                  TZE     s:3803

      976     3793    2              LEN = IRKEYS.K.KEYL(INDEX#);

   3793  1 000046   200010 236100                    LDQ     INDEX#,,AUTO
         1 000047   000007 402007                    MPY     7,DL
         1 000050   400005 236106                    LDQ     5,QL,PR4
         1 000051   000022 772000                    QRL     18
         1 000052   200015 756100                    STQ     LEN,,AUTO

      977     3794    3              IF FIRST$->CHR ~= SECOND$->CHR THEN DO;

PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:224  
   3794  1 000053   200006 475500                    LDP5    FIRST$,,AUTO
         1 000054   000000 620006                    EAX0    0,QL
         1 000055   200007 476500                    LDP6    SECOND$,,AUTO
         1 000056   200015 721100                    LXL1    LEN,,AUTO
         1 000057   040140 106540                    CMPC    fill='040'O
         1 000060   500000 000010                    ADSC9   0,,PR5                   cn=0,n=*X0
         1 000061   600000 000011                    ADSC9   0,,PR6                   cn=0,n=*X1
         1 000062   000132 600000 1                  TZE     s:3816

      978     3795    3                 IF FIRST$->CHR < SECOND$->CHR THEN

   3795  1 000063   040140 106540                    CMPC    fill='040'O
         1 000064   500000 000011                    ADSC9   0,,PR5                   cn=0,n=*X1
         1 000065   600000 000011                    ADSC9   0,,PR6                   cn=0,n=*X1
         1 000066   000072 603000 1                  TRC     s:3798

      979     3796    3                    RESULT = %LESS;

   3796  1 000067   000001 235007                    LDA     1,DL
         1 000070   000000 755100                    STA     0,,PR0
         1 000071   000074 710000 1                  TRA     s:3799

      980     3797    3                 ELSE
      981     3798    3                    RESULT = %GREATER;

   3798  1 000072   000002 235007                    LDA     2,DL
         1 000073   000000 755100                    STA     0,,PR0

      982     3799    3                 RETURN;

   3799  1 000074   000000 702200 xent               TSX2  ! X66_ARET

      983     3800    3                 END;
      984     3801    2              END;
      985     3802    2           ELSE DO;

      986     3803    3              IF IRKEYS.K.NFIELDS(INDEX#) = 1 THEN DO; /* Just one segment.      */
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:225  

   3803  1 000075   200010 236100                    LDQ     INDEX#,,AUTO
         1 000076   000007 402007                    MPY     7,DL
         1 000077   400004 720106                    LXL0    4,QL,PR4
         1 000100   000001 100003                    CMPX0   1,DU
         1 000101   000130 601000 1                  TNZ     s:3813

      987     3804    3                 FN = KFIELD.FIELD(IRKEYS.K.FIRSTFIELD(INDEX#));

   3804  1 000102   400004 236106                    LDQ     4,QL,PR4
         1 000103   000022 772000                    QRL     18
         1 000104   000000 475400 xsym               LDP5    FKA_KFIELD$
         1 000105   000100 101506                    MRL     fill='000'O
         1 000106   500002 000001                    ADSC9   2,Q,PR5                  cn=0,n=1
         1 000107   200014 000004                    ADSC9   FN,,AUTO                 cn=0,n=4

      988     3805    3                 KEYTYPE = RECFIELD.FIELD.TYPE#(FN);

   3805  1 000110   200014 236100                    LDQ     FN,,AUTO
         1 000111   000003 402007                    MPY     3,DL
         1 000112   000000 476400 xsym               LDP6    FKA_RECFIELD$
         1 000113   000100 101506                    MRL     fill='000'O
         1 000114   600001 020001                    ADSC6   1,Q,PR6                  cn=0,n=1
         1 000115   200013 020006                    ADSC6   KEYTYPE,,AUTO            cn=0,n=6

      989     3806    3                 KEY1$ = FIRST$;

   3806  1 000116   200006 236100                    LDQ     FIRST$,,AUTO
         1 000117   200011 756100                    STQ     KEY1$,,AUTO

      990     3807    3                 KEY2$ = SECOND$;

   3807  1 000120   200007 236100                    LDQ     SECOND$,,AUTO
         1 000121   200012 756100                    STQ     KEY2$,,AUTO

      991     3808    3                 CALL COMPFIELD;

PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:226  
   3808  1 000122   000254 701000 1                  TSX1    COMPFIELD
         1 000123   000000 011000                    NOP     0

      992     3809    3                 IF RESULT ~= %EQUAL THEN

   3809  1 000124   200005 470500                    LDP0    @RESULT,,AUTO
         1 000125   000000 235100                    LDA     0,,PR0
         1 000126   000132 600000 1                  TZE     s:3816

      993     3810    3                    RETURN;

   3810  1 000127   000000 702200 xent               TSX2  ! X66_ARET

      994     3811    3                 END;
      995     3812    2              ELSE
      996     3813    2                 CALL COMPKEY;             /* Compare complex keys               */

   3813  1 000130   000652 701000 1                  TSX1    COMPKEY
         1 000131   000000 011000                    NOP     0

      997     3814    2              END;

      998     3815
      999     3816    2           IF RESULT = %EQUAL THEN DO;     /* Compare remaining fields           */

   3816  1 000132   200005 470500                    LDP0    @RESULT,,AUTO
         1 000133   000000 235100                    LDA     0,,PR0
         1 000134   000161 601000 1                  TNZ     s:3828

     1000     3817    2              FIRST$=PINCRC(FIRST$, FKA_KEYSIZE);

   3817  1 000135   000000 236000 xsym               LDQ     FKA_KEYSIZE
         1 000136   000020 736000                    QLS     16
         1 000137   200006 036100                    ADLQ    FIRST$,,AUTO
         1 000140   200006 756100                    STQ     FIRST$,,AUTO

     1001     3818    2              SECOND$=PINCRC(SECOND$, FKA_KEYSIZE);
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:227  

   3818  1 000141   000000 236000 xsym               LDQ     FKA_KEYSIZE
         1 000142   000020 736000                    QLS     16
         1 000143   200007 036100                    ADLQ    SECOND$,,AUTO
         1 000144   200007 756100                    STQ     SECOND$,,AUTO

     1002     3819
     1003     3820    3              IF FIRST$->ID ~= SECOND$->ID THEN DO; /* IDs not equal             */

   3820  1 000145   200006 471500                    LDP1    FIRST$,,AUTO
         1 000146   200007 473500                    LDP3    SECOND$,,AUTO
         1 000147   040100 106500                    CMPC    fill='040'O
         1 000150   100000 000004                    ADSC9   0,,PR1                   cn=0,n=4
         1 000151   300000 000004                    ADSC9   0,,PR3                   cn=0,n=4
         1 000152   000161 600000 1                  TZE     s:3828

     1004     3821    3                 IF FIRST$->ID < SECOND$->ID THEN

   3821  1 000153   000157 603000 1                  TRC     s:3824

     1005     3822    3                    RESULT=%LESS;

   3822  1 000154   000001 235007                    LDA     1,DL
         1 000155   000000 755100                    STA     0,,PR0
         1 000156   000161 710000 1                  TRA     s:3828

     1006     3823    3                 ELSE
     1007     3824    3                    RESULT=%GREATER;

   3824  1 000157   000002 235007                    LDA     2,DL
         1 000160   000000 755100                    STA     0,,PR0

     1008     3825    3                 END;

     1009     3826    2              END;

     1010     3827
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:228  
     1011     3828    2           IF RESULT = %EQUAL THEN DO;     /* Compare segcnt                     */

   3828  1 000161   000000 115003                    CMPA    0,DU
         1 000162   000205 601000 1                  TNZ     s:3840

     1012     3829    2              FIRST$=PINCRC(FIRST$, 4);

   3829  1 000163   200006 236100                    LDQ     FIRST$,,AUTO
         1 000164   000001 036003                    ADLQ    1,DU
         1 000165   200006 756100                    STQ     FIRST$,,AUTO

     1013     3830    2              SECOND$=PINCRC(SECOND$, 4);

   3830  1 000166   200007 236100                    LDQ     SECOND$,,AUTO
         1 000167   000001 036003                    ADLQ    1,DU
         1 000170   200007 756100                    STQ     SECOND$,,AUTO

     1014     3831
     1015     3832    3              IF FIRST$->SEGCNT ~= SECOND$->SEGCNT THEN DO; /* Segcnts not equal */

   3832  1 000171   200006 471500                    LDP1    FIRST$,,AUTO
         1 000172   200007 473500                    LDP3    SECOND$,,AUTO
         1 000173   040100 106500                    CMPC    fill='040'O
         1 000174   100000 000002                    ADSC9   0,,PR1                   cn=0,n=2
         1 000175   300000 000002                    ADSC9   0,,PR3                   cn=0,n=2
         1 000176   000205 600000 1                  TZE     s:3840

     1016     3833    3                 IF FIRST$->SEGCNT < SECOND$->SEGCNT THEN

   3833  1 000177   000203 603000 1                  TRC     s:3836

     1017     3834    3                    RESULT=%LESS;

   3834  1 000200   000001 235007                    LDA     1,DL
         1 000201   000000 755100                    STA     0,,PR0
         1 000202   000205 710000 1                  TRA     s:3840

PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:229  
     1018     3835    3                 ELSE
     1019     3836    3                    RESULT=%GREATER;

   3836  1 000203   000002 235007                    LDA     2,DL
         1 000204   000000 755100                    STA     0,,PR0

     1020     3837    3                 END;

     1021     3838    2              END;

     1022     3839
     1023     3840    1           RETURN;

   3840  1 000205   000000 702200 xent               TSX2  ! X66_ARET

     1024     3841         %EJECT;
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:230  
     1025     3842        /*F*     NAME:     FKA$COMPKEY
     1026     3843                 PURPOSE:  To determine if two keys are equal
     1027     3844                 DESCRIPTION:
     1028     3845
     1029     3846                      This just compares two IREL keys for FKA$OUTPUT.
     1030     3847                 This will tell FKA$OUTPUT if it needs a new key, or
     1031     3848                 just an entry for a duplicate key.
     1032     3849        */
     1033     3850    1   FKA$COMPKEY: ENTRY(FIRST_RECORD, SECOND_RECORD, RESULT);

   3850  1 000206   000000 700200 xent  FKA$COMPKEY  TSX0  ! X66_AUTO_3
         1 000207   000114 000003                    ZERO    76,3

     1034     3851        /* */
     1035     3852    1           FIRST$=ADDR(FIRST_RECORD);

   3852  1 000210   200003 236100                    LDQ     @FIRST_RECORD,,AUTO
         1 000211   200006 756100                    STQ     FIRST$,,AUTO

     1036     3853    1           SECOND$=ADDR(SECOND_RECORD);

   3853  1 000212   200004 236100                    LDQ     @SECOND_RECORD,,AUTO
         1 000213   200007 756100                    STQ     SECOND$,,AUTO

     1037     3854    1           INDEX#=RESULT;

   3854  1 000214   200005 470500                    LDP0    @RESULT,,AUTO
         1 000215   000000 235100                    LDA     0,,PR0
         1 000216   200010 755100                    STA     INDEX#,,AUTO

     1038     3855    1           RESULT=%EQUAL;

   3855  1 000217   000000 450100                    STZ     0,,PR0

     1039     3856
     1040     3857    2           IF IRKEYS.K.NFIELDS(INDEX#) = 1 THEN DO; /* Just one segment.         */

PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:231  
   3857  1 000220   200010 236100                    LDQ     INDEX#,,AUTO
         1 000221   000007 402007                    MPY     7,DL
         1 000222   000000 471400 xsym               LDP1    FKA_IRKEYS$
         1 000223   100004 720106                    LXL0    4,QL,PR1
         1 000224   000001 100003                    CMPX0   1,DU
         1 000225   000251 601000 1                  TNZ     s:3865

     1041     3858    2              FN = KFIELD.FIELD(IRKEYS.K.FIRSTFIELD(INDEX#));

   3858  1 000226   100004 236106                    LDQ     4,QL,PR1
         1 000227   000022 772000                    QRL     18
         1 000230   000000 473400 xsym               LDP3    FKA_KFIELD$
         1 000231   000100 101506                    MRL     fill='000'O
         1 000232   300002 000001                    ADSC9   2,Q,PR3                  cn=0,n=1
         1 000233   200014 000004                    ADSC9   FN,,AUTO                 cn=0,n=4

     1042     3859    2              KEYTYPE = RECFIELD.FIELD.TYPE#(FN);

   3859  1 000234   200014 236100                    LDQ     FN,,AUTO
         1 000235   000003 402007                    MPY     3,DL
         1 000236   000000 474400 xsym               LDP4    FKA_RECFIELD$
         1 000237   000100 101506                    MRL     fill='000'O
         1 000240   400001 020001                    ADSC6   1,Q,PR4                  cn=0,n=1
         1 000241   200013 020006                    ADSC6   KEYTYPE,,AUTO            cn=0,n=6

     1043     3860    2              KEY1$ = FIRST$;

   3860  1 000242   200006 236100                    LDQ     FIRST$,,AUTO
         1 000243   200011 756100                    STQ     KEY1$,,AUTO

     1044     3861    2              KEY2$ = SECOND$;

   3861  1 000244   200007 236100                    LDQ     SECOND$,,AUTO
         1 000245   200012 756100                    STQ     KEY2$,,AUTO

     1045     3862    2              CALL COMPFIELD;

PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:232  
   3862  1 000246   000254 701000 1                  TSX1    COMPFIELD
         1 000247   000000 011000                    NOP     0

     1046     3863    2              END;

   3863  1 000250   000253 710000 1                  TRA     s:3867

     1047     3864    1           ELSE
     1048     3865    1              CALL COMPKEY;                /* Compare complex keys               */

   3865  1 000251   000652 701000 1                  TSX1    COMPKEY
         1 000252   000000 011000                    NOP     0

     1049     3866
     1050     3867    1           RETURN;

   3867  1 000253   000000 702200 xent               TSX2  ! X66_ARET

     1051     3868         %EJECT;
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:233  
     1052     3869        /*I*     NAME:     COMPFIELD
     1053     3870                 PURPOSE:  To compare two fields
     1054     3871                 DESCRIPTION:
     1055     3872
     1056     3873                      The kind of comparison we do depends on the data
     1057     3874                 type of the field.
     1058     3875        */
     1059     3876         %EJECT;
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:234  
     1060     3877    1   COMPFIELD: PROC;

   3877  1 000254   200072 741300       COMPFIELD    STX1  ! DIGIT+3,,AUTO

     1061     3878        /* */
     1062     3879    2              LEN = RECFIELD.DECFIELD.LEN#(FN);

   3879  1 000255   200014 236100                    LDQ     FN,,AUTO
         1 000256   000003 402007                    MPY     3,DL
         1 000257   000000 470400 xsym               LDP0    FKA_RECFIELD$
         1 000260   000100 101506                    MRL     fill='000'O
         1 000261   000001 120001                    ADSC6   1,Q,PR0                  cn=1,n=1
         1 000262   200015 020006                    ADSC6   LEN,,AUTO                cn=0,n=6

     1063     3880    3              DO CASE(KEYTYPE);

   3880  1 000263   200013 235100                    LDA     KEYTYPE,,AUTO
         1 000264   000072 115007                    CMPA    58,DL
         1 000265   000267 602005 1                  TNC     s:3880+4,AL
         1 000266   000650 710000 1                  TRA     s:3938
         1 000267   000650 710000 1                  TRA     s:3938
         1 000270   000610 710000 1                  TRA     s:3927
         1 000271   000650 710000 1                  TRA     s:3938
         1 000272   000534 710000 1                  TRA     s:3915
         1 000273   000562 710000 1                  TRA     s:3921
         1 000274   000650 710000 1                  TRA     s:3938
         1 000275   000650 710000 1                  TRA     s:3938
         1 000276   000650 710000 1                  TRA     s:3938
         1 000277   000650 710000 1                  TRA     s:3938
         1 000300   000437 710000 1                  TRA     s:3895
         1 000301   000621 710000 1                  TRA     s:3931
         1 000302   000650 710000 1                  TRA     s:3938
         1 000303   000650 710000 1                  TRA     s:3938
         1 000304   000650 710000 1                  TRA     s:3938
         1 000305   000650 710000 1                  TRA     s:3938
         1 000306   000650 710000 1                  TRA     s:3938
         1 000307   000650 710000 1                  TRA     s:3938
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:235  
         1 000310   000650 710000 1                  TRA     s:3938
         1 000311   000650 710000 1                  TRA     s:3938
         1 000312   000650 710000 1                  TRA     s:3938
         1 000313   000650 710000 1                  TRA     s:3938
         1 000314   000503 710000 1                  TRA     s:3904
         1 000315   000650 710000 1                  TRA     s:3938
         1 000316   000650 710000 1                  TRA     s:3938
         1 000317   000503 710000 1                  TRA     s:3904
         1 000320   000467 710000 1                  TRA     s:3901
         1 000321   000650 710000 1                  TRA     s:3938
         1 000322   000650 710000 1                  TRA     s:3938
         1 000323   000650 710000 1                  TRA     s:3938
         1 000324   000650 710000 1                  TRA     s:3938
         1 000325   000650 710000 1                  TRA     s:3938
         1 000326   000467 710000 1                  TRA     s:3901
         1 000327   000650 710000 1                  TRA     s:3938
         1 000330   000650 710000 1                  TRA     s:3938
         1 000331   000650 710000 1                  TRA     s:3938
         1 000332   000650 710000 1                  TRA     s:3938
         1 000333   000650 710000 1                  TRA     s:3938
         1 000334   000650 710000 1                  TRA     s:3938
         1 000335   000650 710000 1                  TRA     s:3938
         1 000336   000650 710000 1                  TRA     s:3938
         1 000337   000453 710000 1                  TRA     s:3898
         1 000340   000650 710000 1                  TRA     s:3938
         1 000341   000375 710000 1                  TRA     s:3885
         1 000342   000361 710000 1                  TRA     s:3882
         1 000343   000411 710000 1                  TRA     s:3888
         1 000344   000424 710000 1                  TRA     s:3891
         1 000345   000650 710000 1                  TRA     s:3938
         1 000346   000650 710000 1                  TRA     s:3938
         1 000347   000650 710000 1                  TRA     s:3938
         1 000350   000650 710000 1                  TRA     s:3938
         1 000351   000635 710000 1                  TRA     s:3934
         1 000352   000437 710000 1                  TRA     s:3895
         1 000353   000650 710000 1                  TRA     s:3938
         1 000354   000650 710000 1                  TRA     s:3938
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:236  
         1 000355   000437 710000 1                  TRA     s:3895
         1 000356   000503 710000 1                  TRA     s:3904
         1 000357   000650 710000 1                  TRA     s:3938
         1 000360   000437 710000 1                  TRA     s:3895

     1064     3881    3                 CASE(%UDTS_DATATYPE);

     1065     3882    3                    CALL FMG$COMPUDTS(KEY1, KEY2, LEN, RESULT);

   3882  1 000361   200005 236100                    LDQ     @RESULT,,AUTO
         1 000362   200111 756100                    STQ     @ORIG+5,,AUTO
         1 000363   200015 631500                    EPPR1   LEN,,AUTO
         1 000364   200110 451500                    STP1    @ORIG+4,,AUTO
         1 000365   200012 236100                    LDQ     KEY2$,,AUTO
         1 000366   200011 235100                    LDA     KEY1$,,AUTO
         1 000367   200106 757100                    STAQ    @ORIG+2,,AUTO
         1 000370   200106 630500                    EPPR0   @ORIG+2,,AUTO
         1 000371   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 000372   000000 701000 xent               TSX1    FMG$COMPUDTS
         1 000373   000000 011000                    NOP     0
         1 000374   000650 710000 1                  TRA     s:3938

     1066     3883
     1067     3884    3                 CASE(%UDLS_DATATYPE);

     1068     3885    3                    CALL FMG$COMPUDLS(KEY1, KEY2, LEN, RESULT);

   3885  1 000375   200005 236100                    LDQ     @RESULT,,AUTO
         1 000376   200111 756100                    STQ     @ORIG+5,,AUTO
         1 000377   200015 631500                    EPPR1   LEN,,AUTO
         1 000400   200110 451500                    STP1    @ORIG+4,,AUTO
         1 000401   200012 236100                    LDQ     KEY2$,,AUTO
         1 000402   200011 235100                    LDA     KEY1$,,AUTO
         1 000403   200106 757100                    STAQ    @ORIG+2,,AUTO
         1 000404   200106 630500                    EPPR0   @ORIG+2,,AUTO
         1 000405   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 000406   000000 701000 xent               TSX1    FMG$COMPUDLS
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:237  
         1 000407   000000 011000                    NOP     0
         1 000410   000650 710000 1                  TRA     s:3938

     1069     3886
     1070     3887    3                 CASE(%UDLO_DATATYPE);

     1071     3888    3                    CALL COMPUDLO(KEY1, KEY2, LEN, RESULT);

   3888  1 000411   200005 236100                    LDQ     @RESULT,,AUTO
         1 000412   200100 756100                    STQ     @LEN+1,,AUTO
         1 000413   200015 631500                    EPPR1   LEN,,AUTO
         1 000414   200077 451500                    STP1    @KEY2+1,,AUTO
         1 000415   200012 236100                    LDQ     KEY2$,,AUTO
         1 000416   200076 756100                    STQ     @KEY1+1,,AUTO
         1 000417   200011 236100                    LDQ     KEY1$,,AUTO
         1 000420   200075 756100                    STQ     DIGIT+6,,AUTO
         1 000421   000774 701000 1                  TSX1    COMPUDLO
         1 000422   000000 011000                    NOP     0
         1 000423   000650 710000 1                  TRA     s:3938

     1072     3889
     1073     3890    3                 CASE(%UDTO_DATATYPE);

     1074     3891    3                    CALL COMPUDTO(KEY1, KEY2, LEN, RESULT);

   3891  1 000424   200005 236100                    LDQ     @RESULT,,AUTO
         1 000425   200100 756100                    STQ     @LEN+1,,AUTO
         1 000426   200015 631500                    EPPR1   LEN,,AUTO
         1 000427   200077 451500                    STP1    @KEY2+1,,AUTO
         1 000430   200012 236100                    LDQ     KEY2$,,AUTO
         1 000431   200076 756100                    STQ     @KEY1+1,,AUTO
         1 000432   200011 236100                    LDQ     KEY1$,,AUTO
         1 000433   200075 756100                    STQ     DIGIT+6,,AUTO
         1 000434   001034 701000 1                  TSX1    COMPUDTO
         1 000435   000000 011000                    NOP     0
         1 000436   000650 710000 1                  TRA     s:3938

PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:238  
     1075     3892
     1076     3893    3                 CASE(%PDLA_DATATYPE, %PDLE_DATATYPE, %DATE_DATATYPE,

     1077     3894    3                        %TIME_DATATYPE);
     1078     3895    3                    CALL FMG$COMPPDLS(KEY1, KEY2, LEN, RESULT);

   3895  1 000437   200005 236100                    LDQ     @RESULT,,AUTO
         1 000440   200111 756100                    STQ     @ORIG+5,,AUTO
         1 000441   200015 631500                    EPPR1   LEN,,AUTO
         1 000442   200110 451500                    STP1    @ORIG+4,,AUTO
         1 000443   200012 236100                    LDQ     KEY2$,,AUTO
         1 000444   200011 235100                    LDA     KEY1$,,AUTO
         1 000445   200106 757100                    STAQ    @ORIG+2,,AUTO
         1 000446   200106 630500                    EPPR0   @ORIG+2,,AUTO
         1 000447   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 000450   000000 701000 xent               TSX1    FMG$COMPPDLS
         1 000451   000000 011000                    NOP     0
         1 000452   000650 710000 1                  TRA     s:3938

     1079     3896
     1080     3897    3                 CASE(%PDNS_DATATYPE);

     1081     3898    3                    CALL FMG$COMPPDNS(KEY1, KEY2, LEN, RESULT);

   3898  1 000453   200005 236100                    LDQ     @RESULT,,AUTO
         1 000454   200111 756100                    STQ     @ORIG+5,,AUTO
         1 000455   200015 631500                    EPPR1   LEN,,AUTO
         1 000456   200110 451500                    STP1    @ORIG+4,,AUTO
         1 000457   200012 236100                    LDQ     KEY2$,,AUTO
         1 000460   200011 235100                    LDA     KEY1$,,AUTO
         1 000461   200106 757100                    STAQ    @ORIG+2,,AUTO
         1 000462   200106 630500                    EPPR0   @ORIG+2,,AUTO
         1 000463   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 000464   000000 701000 xent               TSX1    FMG$COMPPDNS
         1 000465   000000 011000                    NOP     0
         1 000466   000650 710000 1                  TRA     s:3938

PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:239  
     1082     3899
     1083     3900    3                 CASE(%PDTA_DATATYPE, %PDTE_DATATYPE);

     1084     3901    3                    CALL FMG$COMPPDTS(KEY1, KEY2, LEN, RESULT);

   3901  1 000467   200005 236100                    LDQ     @RESULT,,AUTO
         1 000470   200111 756100                    STQ     @ORIG+5,,AUTO
         1 000471   200015 631500                    EPPR1   LEN,,AUTO
         1 000472   200110 451500                    STP1    @ORIG+4,,AUTO
         1 000473   200012 236100                    LDQ     KEY2$,,AUTO
         1 000474   200011 235100                    LDA     KEY1$,,AUTO
         1 000475   200106 757100                    STAQ    @ORIG+2,,AUTO
         1 000476   200106 630500                    EPPR0   @ORIG+2,,AUTO
         1 000477   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 000500   000000 701000 xent               TSX1    FMG$COMPPDTS
         1 000501   000000 011000                    NOP     0
         1 000502   000650 710000 1                  TRA     s:3938

     1085     3902
     1086     3903    3                 CASE(%CHAR_DATATYPE, %UBIN_DATATYPE, %UTS_DATATYPE);

     1087     3904    3                    LEN = RECFIELD.FIELD.LEN#(FN);

   3904  1 000503   000100 101506                    MRL     fill='000'O
         1 000504   000001 120002                    ADSC6   1,Q,PR0                  cn=1,n=2
         1 000505   200015 020006                    ADSC6   LEN,,AUTO                cn=0,n=6

     1088     3905    3                    IF KEYTYPE ~= %CHAR_DATATYPE THEN

   3905  1 000506   000025 115007                    CMPA    21,DL
         1 000507   000514 600000 1                  TZE     s:3907

     1089     3906    3                       LEN = LEN / 9;

   3906  1 000510   200015 235100                    LDA     LEN,,AUTO
         1 000511   000043 773000                    LRL     35
         1 000512   000011 507007                    DVF     9,DL
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:240  
         1 000513   200015 755100                    STA     LEN,,AUTO

     1090     3907    4                    IF KEY1$->CHR ~= KEY2$->CHR THEN DO; /* Not equal            */

   3907  1 000514   200011 471500                    LDP1    KEY1$,,AUTO
         1 000515   200015 720100                    LXL0    LEN,,AUTO
         1 000516   200012 473500                    LDP3    KEY2$,,AUTO
         1 000517   040140 106540                    CMPC    fill='040'O
         1 000520   100000 000010                    ADSC9   0,,PR1                   cn=0,n=*X0
         1 000521   300000 000010                    ADSC9   0,,PR3                   cn=0,n=*X0
         1 000522   000650 600000 1                  TZE     s:3938

     1091     3908    4                       IF KEY1$->CHR < KEY2$->CHR THEN

   3908  1 000523   000530 603000 1                  TRC     s:3911

     1092     3909    4                          RESULT=%LESS;

   3909  1 000524   000001 235007                    LDA     1,DL
         1 000525   200005 474500                    LDP4    @RESULT,,AUTO
         1 000526   400000 755100                    STA     0,,PR4
         1 000527   000650 710000 1                  TRA     s:3938

     1093     3910    4                       ELSE
     1094     3911    4                          RESULT=%GREATER;

   3911  1 000530   000002 235007                    LDA     2,DL
         1 000531   200005 474500                    LDP4    @RESULT,,AUTO
         1 000532   400000 755100                    STA     0,,PR4

     1095     3912    4                       END;

   3912  1 000533   000650 710000 1                  TRA     s:3938

     1096     3913
     1097     3914    3                 CASE(%SFLT_DATATYPE);

PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:241  
     1098     3915    3                    LEN = RECFIELD.FIELD.LEN#(FN);

   3915  1 000534   000100 101506                    MRL     fill='000'O
         1 000535   000001 120002                    ADSC6   1,Q,PR0                  cn=1,n=2
         1 000536   200015 020006                    ADSC6   LEN,,AUTO                cn=0,n=6

     1099     3916    3                    TEMP1=KEY1$->CHAR4;

   3916  1 000537   200011 471500                    LDP1    KEY1$,,AUTO
         1 000540   040100 100500                    MLR     fill='040'O
         1 000541   100000 000004                    ADSC9   0,,PR1                   cn=0,n=4
         1 000542   200020 000010                    ADSC9   TEMP1,,AUTO              cn=0,n=8

     1100     3917    3                    TEMP2=KEY2$->CHAR4;

   3917  1 000543   200012 473500                    LDP3    KEY2$,,AUTO
         1 000544   040100 100500                    MLR     fill='040'O
         1 000545   300000 000004                    ADSC9   0,,PR3                   cn=0,n=4
         1 000546   200022 000010                    ADSC9   TEMP2,,AUTO              cn=0,n=8

     1101     3918    3                    CALL FMG$COMPSFLT(TEMP1, TEMP2, RESULT);

   3918  1 000547   200005 236100                    LDQ     @RESULT,,AUTO
         1 000550   200110 756100                    STQ     @ORIG+4,,AUTO
         1 000551   200022 634500                    EPPR4   TEMP2,,AUTO
         1 000552   200107 454500                    STP4    @ORIG+3,,AUTO
         1 000553   200020 635500                    EPPR5   TEMP1,,AUTO
         1 000554   200106 455500                    STP5    @ORIG+2,,AUTO
         1 000555   200106 630500                    EPPR0   @ORIG+2,,AUTO
         1 000556   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 000557   000000 701000 xent               TSX1    FMG$COMPSFLT
         1 000560   000000 011000                    NOP     0
         1 000561   000650 710000 1                  TRA     s:3938

     1102     3919
     1103     3920    3                 CASE(%DFLT_DATATYPE);

PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:242  
     1104     3921    3                    LEN = RECFIELD.FIELD.LEN#(FN);

   3921  1 000562   000100 101506                    MRL     fill='000'O
         1 000563   000001 120002                    ADSC6   1,Q,PR0                  cn=1,n=2
         1 000564   200015 020006                    ADSC6   LEN,,AUTO                cn=0,n=6

     1105     3922    3                    TEMP1=KEY1$->CHAR8;

   3922  1 000565   200011 471500                    LDP1    KEY1$,,AUTO
         1 000566   040100 100500                    MLR     fill='040'O
         1 000567   100000 000010                    ADSC9   0,,PR1                   cn=0,n=8
         1 000570   200020 000010                    ADSC9   TEMP1,,AUTO              cn=0,n=8

     1106     3923    3                    TEMP2=KEY2$->CHAR8;

   3923  1 000571   200012 473500                    LDP3    KEY2$,,AUTO
         1 000572   040100 100500                    MLR     fill='040'O
         1 000573   300000 000010                    ADSC9   0,,PR3                   cn=0,n=8
         1 000574   200022 000010                    ADSC9   TEMP2,,AUTO              cn=0,n=8

     1107     3924    3                    CALL FMG$COMPDFLT(TEMP1, TEMP2, RESULT);

   3924  1 000575   200005 236100                    LDQ     @RESULT,,AUTO
         1 000576   200110 756100                    STQ     @ORIG+4,,AUTO
         1 000577   200022 634500                    EPPR4   TEMP2,,AUTO
         1 000600   200107 454500                    STP4    @ORIG+3,,AUTO
         1 000601   200020 635500                    EPPR5   TEMP1,,AUTO
         1 000602   200106 455500                    STP5    @ORIG+2,,AUTO
         1 000603   200106 630500                    EPPR0   @ORIG+2,,AUTO
         1 000604   000021 631400 xsym               EPPR1   B_VECTNIL+17
         1 000605   000000 701000 xent               TSX1    FMG$COMPDFLT
         1 000606   000000 011000                    NOP     0
         1 000607   000650 710000 1                  TRA     s:3938

     1108     3925
     1109     3926    3                 CASE(%SBIN_DATATYPE);

PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:243  
     1110     3927    3                    LEN = RECFIELD.FIELD.LEN#(FN) / 9;

   3927  1 000610   000100 101506                    MRL     fill='000'O
         1 000611   000001 120002                    ADSC6   1,Q,PR0                  cn=1,n=2
         1 000612   200106 020006                    ADSC6   @ORIG+2,,AUTO            cn=0,n=6
         1 000613   200106 236100                    LDQ     @ORIG+2,,AUTO
         1 000614   000011 506007                    DIV     9,DL
         1 000615   200015 756100                    STQ     LEN,,AUTO

     1111     3928    3                    CALL COMPSBIN;

   3928  1 000616   000745 701000 1                  TSX1    COMPSBIN
         1 000617   000000 011000                    NOP     0
         1 000620   000650 710000 1                  TRA     s:3938

     1112     3929
     1113     3930    3                 CASE(%PDFLT_DATATYPE);

     1114     3931    3                    CALL FMG$COMPPDFLT(KEY1, KEY2, LEN, RESULT);

   3931  1 000621   200005 236100                    LDQ     @RESULT,,AUTO
         1 000622   200111 756100                    STQ     @ORIG+5,,AUTO
         1 000623   200015 631500                    EPPR1   LEN,,AUTO
         1 000624   200110 451500                    STP1    @ORIG+4,,AUTO
         1 000625   200012 236100                    LDQ     KEY2$,,AUTO
         1 000626   200011 235100                    LDA     KEY1$,,AUTO
         1 000627   200106 757100                    STAQ    @ORIG+2,,AUTO
         1 000630   200106 630500                    EPPR0   @ORIG+2,,AUTO
         1 000631   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 000632   000000 701000 xent               TSX1    FMG$COMPPDFLT
         1 000633   000000 011000                    NOP     0
         1 000634   000650 710000 1                  TRA     s:3938

     1115     3932
     1116     3933    3                 CASE(%UDFLT_DATATYPE);

     1117     3934    3                    CALL FMG$COMPUDFLT(KEY1, KEY2, LEN, RESULT);
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:244  

   3934  1 000635   200005 236100                    LDQ     @RESULT,,AUTO
         1 000636   200111 756100                    STQ     @ORIG+5,,AUTO
         1 000637   200015 631500                    EPPR1   LEN,,AUTO
         1 000640   200110 451500                    STP1    @ORIG+4,,AUTO
         1 000641   200012 236100                    LDQ     KEY2$,,AUTO
         1 000642   200011 235100                    LDA     KEY1$,,AUTO
         1 000643   200106 757100                    STAQ    @ORIG+2,,AUTO
         1 000644   200106 630500                    EPPR0   @ORIG+2,,AUTO
         1 000645   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 000646   000000 701000 xent               TSX1    FMG$COMPUDFLT
         1 000647   000000 011000                    NOP     0

     1118     3935
     1119     3936    3                 END;                      /* CASE                               */

     1120     3937
     1121     3938    2              RETURN;

   3938  1 000650   200072 221300                    LDX1  ! DIGIT+3,,AUTO
         1 000651   000001 702211                    TSX2  ! 1,X1

     1122     3939    2      END COMPFIELD;
     1123     3940         %EJECT;
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:245  
     1124     3941        /*I*     NAME:     COMPKEY
     1125     3942                 PURPOSE:  To compare two IREL keys
     1126     3943                 DESCRIPTION:
     1127     3944
     1128     3945                      Loop through the key definition until we hit the
     1129     3946                 end, or we reach a point where the keys are not equal.
     1130     3947
     1131     3948                      Compare the actual fields.
     1132     3949        */
     1133     3950         %EJECT;
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:246  
     1134     3951    1   COMPKEY:   PROC;

   3951  1 000652   200070 741300       COMPKEY      STX1  ! DIGIT+1,,AUTO

     1135     3952        /* */
     1136     3953    2              KEY1$ = FIRST$;

   3953  1 000653   200006 236100                    LDQ     FIRST$,,AUTO
         1 000654   200011 756100                    STQ     KEY1$,,AUTO

     1137     3954    2              KEY2$ = SECOND$;

   3954  1 000655   200007 236100                    LDQ     SECOND$,,AUTO
         1 000656   200012 756100                    STQ     KEY2$,,AUTO

     1138     3955
     1139     3956    3   LOOP:      DO I = IRKEYS.K.FIRSTFIELD(INDEX#) TO IRKEYS.K.FIRSTFIELD(INDEX#)+

   3956  1 000657   200010 236100       LOOP         LDQ     INDEX#,,AUTO
         1 000660   000007 402007                    MPY     7,DL
         1 000661   000000 470400 xsym               LDP0    FKA_IRKEYS$
         1 000662   000004 236106                    LDQ     4,QL,PR0
         1 000663   000022 772000                    QRL     18
         1 000664   200016 756100                    STQ     I,,AUTO
         1 000665   000725 710000 1                  TRA     s:3966+3

     1140     3957    3                  IRKEYS.K.NFIELDS(INDEX#)-1;
     1141     3958    3                 FN = KFIELD.FIELD(I);

   3958  1 000666   000000 470400 xsym               LDP0    FKA_KFIELD$
         1 000667   200016 235100                    LDA     I,,AUTO
         1 000670   000100 101505                    MRL     fill='000'O
         1 000671   000002 000001                    ADSC9   2,A,PR0                  cn=0,n=1
         1 000672   200014 000004                    ADSC9   FN,,AUTO                 cn=0,n=4

     1142     3959    3                 KEYTYPE = RECFIELD.FIELD.TYPE#(FN);

PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:247  
   3959  1 000673   200014 236100                    LDQ     FN,,AUTO
         1 000674   000003 402007                    MPY     3,DL
         1 000675   000000 471400 xsym               LDP1    FKA_RECFIELD$
         1 000676   000100 101506                    MRL     fill='000'O
         1 000677   100001 020001                    ADSC6   1,Q,PR1                  cn=0,n=1
         1 000700   200013 020006                    ADSC6   KEYTYPE,,AUTO            cn=0,n=6

     1143     3960    3                 CALL COMPFIELD;

   3960  1 000701   000254 701000 1                  TSX1    COMPFIELD
         1 000702   000000 011000                    NOP     0

     1144     3961    3                 IF RESULT ~= %EQUAL THEN

   3961  1 000703   200005 470500                    LDP0    @RESULT,,AUTO
         1 000704   000000 235100                    LDA     0,,PR0
         1 000705   000710 600000 1                  TZE     s:3963

     1145     3962    3                    RETURN;

   3962  1 000706   200070 221300                    LDX1  ! DIGIT+1,,AUTO
         1 000707   000001 702211                    TSX2  ! 1,X1

     1146     3963    3                 CALL SET_SIZE;

   3963  1 000710   001075 701000 1                  TSX1    SET_SIZE
         1 000711   000000 011000                    NOP     0

     1147     3964    3                 KEY1$ = PINCRC(KEY1$, SIZE);

   3964  1 000712   200017 236100                    LDQ     SIZE,,AUTO
         1 000713   000020 736000                    QLS     16
         1 000714   200011 036100                    ADLQ    KEY1$,,AUTO
         1 000715   200011 756100                    STQ     KEY1$,,AUTO

     1148     3965    3                 KEY2$ = PINCRC(KEY2$, SIZE);

PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:248  
   3965  1 000716   200017 236100                    LDQ     SIZE,,AUTO
         1 000717   000020 736000                    QLS     16
         1 000720   200012 036100                    ADLQ    KEY2$,,AUTO
         1 000721   200012 756100                    STQ     KEY2$,,AUTO

     1149     3966    3                 END;

   3966  1 000722   200016 235100                    LDA     I,,AUTO
         1 000723   000001 035007                    ADLA    1,DL
         1 000724   200016 755100                    STA     I,,AUTO
         1 000725   200010 236100                    LDQ     INDEX#,,AUTO
         1 000726   000007 402007                    MPY     7,DL
         1 000727   000000 470400 xsym               LDP0    FKA_IRKEYS$
         1 000730   000004 236106                    LDQ     4,QL,PR0
         1 000731   777777 376007                    ANQ     -1,DL
         1 000732   200106 756100                    STQ     @ORIG+2,,AUTO
         1 000733   200010 236100                    LDQ     INDEX#,,AUTO
         1 000734   000007 402007                    MPY     7,DL
         1 000735   000004 236106                    LDQ     4,QL,PR0
         1 000736   000022 772000                    QRL     18
         1 000737   200106 036100                    ADLQ    @ORIG+2,,AUTO
         1 000740   200016 116100                    CMPQ    I,,AUTO
         1 000741   000743 600000 1                  TZE     s:3968
         1 000742   000666 603000 1                  TRC     s:3958

     1150     3967
     1151     3968    2              RETURN;

   3968  1 000743   200070 221300                    LDX1  ! DIGIT+1,,AUTO
         1 000744   000001 702211                    TSX2  ! 1,X1

     1152     3969    2      END COMPKEY;
     1153     3970         %EJECT;
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:249  
     1154     3971        /*I*     NAME:     COMPSBIN
     1155     3972                 PURPOSE:  To compare two SBIN fields
     1156     3973                 DESCRIPTION:
     1157     3974
     1158     3975                      Move the SBIN fields into a full word with the
     1159     3976                 significant bytes in the high order portion of the
     1160     3977                 word.  Then, do the comparison.
     1161     3978        */
     1162     3979    1   COMPSBIN:  PROC;

   3979  1 000745   200074 741300       COMPSBIN     STX1  ! DIGIT+5,,AUTO

     1163     3980    2     DCL CTEMP CHAR(LEN) BASED;
     1164     3981    2     DCL STEMP_KEY1 SBIN;
     1165     3982    2     DCL CTEMP_KEY1 REDEF STEMP_KEY1 CHAR(4);
     1166     3983    2     DCL STEMP_KEY2 SBIN;
     1167     3984    2     DCL CTEMP_KEY2 REDEF STEMP_KEY2 CHAR(4);
     1168     3985        /* */
     1169     3986    2              CTEMP_KEY1=KEY1$->CTEMP;

   3986  1 000746   200011 470500                    LDP0    KEY1$,,AUTO
         1 000747   200015 720100                    LXL0    LEN,,AUTO
         1 000750   040100 100540                    MLR     fill='040'O
         1 000751   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         1 000752   200075 000004                    ADSC9   STEMP_KEY1,,AUTO         cn=0,n=4

     1170     3987    2              CTEMP_KEY2=KEY2$->CTEMP;

   3987  1 000753   200012 471500                    LDP1    KEY2$,,AUTO
         1 000754   040100 100540                    MLR     fill='040'O
         1 000755   100000 000010                    ADSC9   0,,PR1                   cn=0,n=*X0
         1 000756   200076 000004                    ADSC9   STEMP_KEY2,,AUTO         cn=0,n=4

     1171     3988
     1172     3989    2              IF STEMP_KEY1 ~= STEMP_KEY2 THEN

   3989  1 000757   200075 236100                    LDQ     STEMP_KEY1,,AUTO
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:250  
         1 000760   200076 116100                    CMPQ    STEMP_KEY2,,AUTO
         1 000761   000772 600000 1                  TZE     s:3997

     1173     3990    3              DO;                          /* NOT EQUAL                          */

     1174     3991    3                 IF STEMP_KEY1 < STEMP_KEY2 THEN

   3991  1 000762   000767 605000 1                  TPL     s:3994

     1175     3992    3                    RESULT=%LESS;

   3992  1 000763   000001 235007                    LDA     1,DL
         1 000764   200005 473500                    LDP3    @RESULT,,AUTO
         1 000765   300000 755100                    STA     0,,PR3
         1 000766   000772 710000 1                  TRA     s:3997

     1176     3993    3                 ELSE
     1177     3994    3                    RESULT=%GREATER;

   3994  1 000767   000002 235007                    LDA     2,DL
         1 000770   200005 473500                    LDP3    @RESULT,,AUTO
         1 000771   300000 755100                    STA     0,,PR3

     1178     3995    3                 END;                      /* NOT EQUAL                          */

     1179     3996
     1180     3997    2              RETURN;

   3997  1 000772   200074 221300                    LDX1  ! DIGIT+5,,AUTO
         1 000773   000001 702211                    TSX2  ! 1,X1

     1181     3998    2      END COMPSBIN;
     1182     3999         %EJECT;
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:251  
     1183     4000        /*I*     NAME:     COMPUDLO
     1184     4001                 PURPOSE:  To compare leading overpunch fields
     1185     4002                 DESCRIPTION:
     1186     4003
     1187     4004                      Split out the sign from the digit, then compare
     1188     4005                 as unpacked decimal with a leading sign.
     1189     4006        */
     1190     4007    1   COMPUDLO:  PROC(KEY1, KEY2, LEN, RESULT);

   4007  1 000774   200074 741300       COMPUDLO     STX1  ! DIGIT+5,,AUTO

     1191     4008    2     DCL KEY1 CHAR(64);
     1192     4009    2     DCL KEY2 CHAR(64);
     1193     4010    2     DCL LEN SBIN;
     1194     4011    2     DCL RESULT SBIN;
     1195     4012        /* */
     1196     4013    2              POS=%LEADING;

   4013  1 000775   200024 450100                    STZ     POS,,AUTO

     1197     4014    2              CALL SPLIT(KEY1_TEMP, KEY1);

   4014  1 000776   200075 236100                    LDQ     @KEY1,,AUTO
         1 000777   200104 756100                    STQ     @TEMP+1,,AUTO
         1 001000   200025 630500                    EPPR0   KEY1_TEMP,,AUTO
         1 001001   200103 450500                    STP0    @RESULT+3,,AUTO
         1 001002   001174 701000 1                  TSX1    SPLIT
         1 001003   000000 011000                    NOP     0

     1198     4015
     1199     4016    2              CALL SPLIT(KEY2_TEMP, KEY2);

   4016  1 001004   200076 236100                    LDQ     @KEY2,,AUTO
         1 001005   200104 756100                    STQ     @TEMP+1,,AUTO
         1 001006   200045 630500                    EPPR0   KEY2_TEMP,,AUTO
         1 001007   200103 450500                    STP0    @RESULT+3,,AUTO
         1 001010   001174 701000 1                  TSX1    SPLIT
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:252  
         1 001011   000000 011000                    NOP     0

     1200     4017
     1201     4018    2              CALL FMG$COMPUDLS(KEY1_TEMP, KEY2_TEMP, LEN+1, RESULT);

   4018  1 001012   200077 470500                    LDP0    @LEN,,AUTO
         1 001013   000000 235100                    LDA     0,,PR0
         1 001014   000001 035007                    ADLA    1,DL
         1 001015   200106 755100                    STA     @ORIG+2,,AUTO
         1 001016   200100 236100                    LDQ     @RESULT,,AUTO
         1 001017   200113 756100                    STQ     @ORIG+7,,AUTO
         1 001020   200106 631500                    EPPR1   @ORIG+2,,AUTO
         1 001021   200112 451500                    STP1    @ORIG+6,,AUTO
         1 001022   200045 633500                    EPPR3   KEY2_TEMP,,AUTO
         1 001023   200111 453500                    STP3    @ORIG+5,,AUTO
         1 001024   200025 634500                    EPPR4   KEY1_TEMP,,AUTO
         1 001025   200110 454500                    STP4    @ORIG+4,,AUTO
         1 001026   200110 630500                    EPPR0   @ORIG+4,,AUTO
         1 001027   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 001030   000000 701000 xent               TSX1    FMG$COMPUDLS
         1 001031   000000 011000                    NOP     0

     1202     4019    2              RETURN;

   4019  1 001032   200074 221300                    LDX1  ! DIGIT+5,,AUTO
         1 001033   000001 702211                    TSX2  ! 1,X1

     1203     4020    2      END COMPUDLO;
     1204     4021         %EJECT;
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:253  
     1205     4022        /*I*     NAME:     COMPUDTO
     1206     4023                 PURPOSE:  To compare trailing overpunch fields
     1207     4024                 DESCRIPTION:
     1208     4025
     1209     4026                      Split out the sign from the field, then compare
     1210     4027                 as unpacked decimal with a trailing sign.
     1211     4028        */
     1212     4029    1   COMPUDTO:  PROC(KEY1, KEY2, LEN, RESULT);

   4029  1 001034   200074 741300       COMPUDTO     STX1  ! DIGIT+5,,AUTO

     1213     4030    2     DCL KEY1 CHAR(64);
     1214     4031    2     DCL KEY2 CHAR(64);
     1215     4032    2     DCL LEN SBIN;
     1216     4033    2     DCL RESULT SBIN;
     1217     4034        /* */
     1218     4035    2              POS=%TRAILING;

   4035  1 001035   000001 235007                    LDA     1,DL
         1 001036   200024 755100                    STA     POS,,AUTO

     1219     4036    2              CALL SPLIT(KEY1_TEMP, KEY1);

   4036  1 001037   200075 236100                    LDQ     @KEY1,,AUTO
         1 001040   200104 756100                    STQ     @TEMP+1,,AUTO
         1 001041   200025 630500                    EPPR0   KEY1_TEMP,,AUTO
         1 001042   200103 450500                    STP0    @RESULT+3,,AUTO
         1 001043   001174 701000 1                  TSX1    SPLIT
         1 001044   000000 011000                    NOP     0

     1220     4037
     1221     4038    2              CALL SPLIT(KEY2_TEMP, KEY2);

   4038  1 001045   200076 236100                    LDQ     @KEY2,,AUTO
         1 001046   200104 756100                    STQ     @TEMP+1,,AUTO
         1 001047   200045 630500                    EPPR0   KEY2_TEMP,,AUTO
         1 001050   200103 450500                    STP0    @RESULT+3,,AUTO
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:254  
         1 001051   001174 701000 1                  TSX1    SPLIT
         1 001052   000000 011000                    NOP     0

     1222     4039
     1223     4040    2              CALL FMG$COMPUDLS(KEY1_TEMP, KEY2_TEMP, LEN+1, RESULT);

   4040  1 001053   200077 470500                    LDP0    @LEN,,AUTO
         1 001054   000000 235100                    LDA     0,,PR0
         1 001055   000001 035007                    ADLA    1,DL
         1 001056   200106 755100                    STA     @ORIG+2,,AUTO
         1 001057   200100 236100                    LDQ     @RESULT,,AUTO
         1 001060   200113 756100                    STQ     @ORIG+7,,AUTO
         1 001061   200106 631500                    EPPR1   @ORIG+2,,AUTO
         1 001062   200112 451500                    STP1    @ORIG+6,,AUTO
         1 001063   200045 633500                    EPPR3   KEY2_TEMP,,AUTO
         1 001064   200111 453500                    STP3    @ORIG+5,,AUTO
         1 001065   200025 634500                    EPPR4   KEY1_TEMP,,AUTO
         1 001066   200110 454500                    STP4    @ORIG+4,,AUTO
         1 001067   200110 630500                    EPPR0   @ORIG+4,,AUTO
         1 001070   000022 631400 xsym               EPPR1   B_VECTNIL+18
         1 001071   000000 701000 xent               TSX1    FMG$COMPUDLS
         1 001072   000000 011000                    NOP     0

     1224     4041    2              RETURN;

   4041  1 001073   200074 221300                    LDX1  ! DIGIT+5,,AUTO
         1 001074   000001 702211                    TSX2  ! 1,X1

     1225     4042    2      END COMPUDTO;
     1226     4043         %EJECT;
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:255  
     1227     4044        /*I*     NAME:     SET_SIZE
     1228     4045                 PURPOSE:  To set the size of a key field in bytes.
     1229     4046                 DESCRIPTION:
     1230     4047                      Use the LEN we already know to figure the size in bytes.
     1231     4048        */
     1232     4049    1   SET_SIZE:  PROC;

   4049  1 001075   200072 741300       SET_SIZE     STX1  ! DIGIT+3,,AUTO

     1233     4050        /* */
     1234     4051    3              DO CASE(KEYTYPE);

   4051  1 001076   200013 235100                    LDA     KEYTYPE,,AUTO
         1 001077   000011 135007                    SBLA    9,DL
         1 001100   000061 115007                    CMPA    49,DL
         1 001101   001103 602005 1                  TNC     s:4051+5,AL
         1 001102   001171 710000 1                  TRA     s:4058
         1 001103   001164 710000 1                  TRA     s:4055
         1 001104   001164 710000 1                  TRA     s:4055
         1 001105   001171 710000 1                  TRA     s:4058
         1 001106   001171 710000 1                  TRA     s:4058
         1 001107   001171 710000 1                  TRA     s:4058
         1 001110   001171 710000 1                  TRA     s:4058
         1 001111   001171 710000 1                  TRA     s:4058
         1 001112   001171 710000 1                  TRA     s:4058
         1 001113   001171 710000 1                  TRA     s:4058
         1 001114   001171 710000 1                  TRA     s:4058
         1 001115   001171 710000 1                  TRA     s:4058
         1 001116   001171 710000 1                  TRA     s:4058
         1 001117   001171 710000 1                  TRA     s:4058
         1 001120   001171 710000 1                  TRA     s:4058
         1 001121   001171 710000 1                  TRA     s:4058
         1 001122   001171 710000 1                  TRA     s:4058
         1 001123   001164 710000 1                  TRA     s:4055
         1 001124   001171 710000 1                  TRA     s:4058
         1 001125   001171 710000 1                  TRA     s:4058
         1 001126   001171 710000 1                  TRA     s:4058
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:256  
         1 001127   001171 710000 1                  TRA     s:4058
         1 001130   001171 710000 1                  TRA     s:4058
         1 001131   001164 710000 1                  TRA     s:4055
         1 001132   001171 710000 1                  TRA     s:4058
         1 001133   001171 710000 1                  TRA     s:4058
         1 001134   001171 710000 1                  TRA     s:4058
         1 001135   001171 710000 1                  TRA     s:4058
         1 001136   001171 710000 1                  TRA     s:4058
         1 001137   001171 710000 1                  TRA     s:4058
         1 001140   001171 710000 1                  TRA     s:4058
         1 001141   001171 710000 1                  TRA     s:4058
         1 001142   001164 710000 1                  TRA     s:4055
         1 001143   001171 710000 1                  TRA     s:4058
         1 001144   001171 710000 1                  TRA     s:4058
         1 001145   001171 710000 1                  TRA     s:4058
         1 001146   001171 710000 1                  TRA     s:4058
         1 001147   001171 710000 1                  TRA     s:4058
         1 001150   001171 710000 1                  TRA     s:4058
         1 001151   001171 710000 1                  TRA     s:4058
         1 001152   001171 710000 1                  TRA     s:4058
         1 001153   001171 710000 1                  TRA     s:4058
         1 001154   001171 710000 1                  TRA     s:4058
         1 001155   001164 710000 1                  TRA     s:4055
         1 001156   001171 710000 1                  TRA     s:4058
         1 001157   001171 710000 1                  TRA     s:4058
         1 001160   001164 710000 1                  TRA     s:4055
         1 001161   001171 710000 1                  TRA     s:4058
         1 001162   001171 710000 1                  TRA     s:4058
         1 001163   001164 710000 1                  TRA     s:4055

     1235     4052    3                 CASE(%PDLE_DATATYPE, %PDTE_DATATYPE, %PDLA_DATATYPE,

     1236     4053    3                  %PDTA_DATATYPE, %PDNS_DATATYPE, %PDFLT_DATATYPE,
     1237     4054    3                  %DATE_DATATYPE, %TIME_DATATYPE);
     1238     4055    3                    SIZE=(LEN+1)/2;

   4055  1 001164   200015 236100                    LDQ     LEN,,AUTO
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:257  
         1 001165   000001 036007                    ADLQ    1,DL
         1 001166   000001 772000                    QRL     1
         1 001167   200017 756100                    STQ     SIZE,,AUTO
         1 001170   001173 710000 1                  TRA     s:4062

     1239     4056
     1240     4057    3                 CASE(ELSE);

     1241     4058    3                    SIZE=LEN;

   4058  1 001171   200015 236100                    LDQ     LEN,,AUTO
         1 001172   200017 756100                    STQ     SIZE,,AUTO

     1242     4059
     1243     4060    3                 END;                      /* Do Case                            */

     1244     4061
     1245     4062    2              RETURN;

   4062  1 001173   000001 702211                    TSX2  ! 1,X1

     1246     4063    2      END SET_SIZE;
     1247     4064         %EJECT;
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:258  
     1248     4065        /*I*     NAME:     SPLIT
     1249     4066                 PURPOSE:  To split an overpunched sign
     1250     4067                 DESCRIPTION:
     1251     4068
     1252     4069                      Pick up the character to split.  Then set a
     1253     4070                 separate sign and digit.  Insert the split number
     1254     4071                 into TEMP.
     1255     4072        */
     1256     4073         %EJECT;
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:259  
     1257     4074    1   SPLIT:     PROC(TEMP, ORIG);

   4074  1 001174   200102 741300       SPLIT        STX1  ! @RESULT+2,,AUTO

     1258     4075    2     DCL TEMP CHAR(64);
     1259     4076    2     DCL ORIG CHAR(64);
     1260     4077        /* */
     1261     4078    2              IF POS = %LEADING THEN

   4078  1 001175   200024 235100                    LDA     POS,,AUTO
         1 001176   001204 601000 1                  TNZ     s:4081

     1262     4079    2                 CALL INSERT(CHAR1, 0, 1, SUBSTR(ORIG, 0, 1));

   4079  1 001177   200104 470500                    LDP0    @ORIG,,AUTO
         1 001200   040100 100500                    MLR     fill='040'O
         1 001201   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
         1 001202   200065 000001                    ADSC9   CHAR1,,AUTO              cn=0,n=1
         1 001203   001211 710000 1                  TRA     s:4083

     1263     4080    2              ELSE
     1264     4081    2                 CALL INSERT(CHAR1, 0, 1, SUBSTR(ORIG, LEN-1, 1));

   4081  1 001204   200104 470500                    LDP0    @ORIG,,AUTO
         1 001205   200015 236100                    LDQ     LEN,,AUTO
         1 001206   040100 100506                    MLR     fill='040'O
         1 001207   077777 600001                    ADSC9   -1,Q,PR0                 cn=3,n=1
         1 001210   200065 000001                    ADSC9   CHAR1,,AUTO              cn=0,n=1

     1265     4082
     1266     4083    2              IF CHAR1 = '{' THEN

   4083  1 001211   200065 236100                    LDQ     CHAR1,,AUTO
         1 001212   777000 376003                    ANQ     -512,DU
         1 001213   173000 116003                    CMPQ    62976,DU
         1 001214   001222 601000 1                  TNZ     s:4089

PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:260  
     1267     4084    3              DO;                          /* +0                                 */

     1268     4085    3                 SIGN='+';

   4085  1 001215   053000 236003                    LDQ     22016,DU
         1 001216   200066 756100                    STQ     SIGN,,AUTO

     1269     4086    3                 DIGIT='0';

   4086  1 001217   060000 236003                    LDQ     24576,DU
         1 001220   200067 756100                    STQ     DIGIT,,AUTO

     1270     4087    3                 END;                      /* +0                                 */

   4087  1 001221   001260 710000 1                  TRA     s:4106

     1271     4088    2              ELSE
     1272     4089    2                 IF CHAR1 = '}' THEN

   4089  1 001222   200065 236100                    LDQ     CHAR1,,AUTO
         1 001223   777000 376003                    ANQ     -512,DU
         1 001224   175000 116003                    CMPQ    64000,DU
         1 001225   001233 601000 1                  TNZ     s:4095

     1273     4090    3                 DO;                       /* -0                                 */

     1274     4091    3                    SIGN='-';

   4091  1 001226   055000 236003                    LDQ     23040,DU
         1 001227   200066 756100                    STQ     SIGN,,AUTO

     1275     4092    3                    DIGIT='0';

   4092  1 001230   060000 236003                    LDQ     24576,DU
         1 001231   200067 756100                    STQ     DIGIT,,AUTO

     1276     4093    3                    END;                   /* -0                                 */
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:261  

   4093  1 001232   001260 710000 1                  TRA     s:4106

     1277     4094    2                 ELSE
     1278     4095    2                    IF CHAR1 < 'J' THEN

   4095  1 001233   200065 236100                    LDQ     CHAR1,,AUTO
         1 001234   777000 376003                    ANQ     -512,DU
         1 001235   112000 116003                    CMPQ    37888,DU
         1 001236   001250 603000 1                  TRC     s:4102

     1279     4096    3                    DO;                    /* +1 TO +9                           */

     1280     4097    3                       SIGN='+';

   4097  1 001237   053000 236003                    LDQ     22016,DU
         1 001240   200066 756100                    STQ     SIGN,,AUTO

     1281     4098    3                       DIGIT=BINASC(ASCBIN(CHAR1)-16);

   4098  1 001241   200065 236100                    LDQ     CHAR1,,AUTO
         1 001242   000033 772000                    QRL     27
         1 001243   000020 136007                    SBLQ    16,DL
         1 001244   000033 736000                    QLS     27
         1 001245   000000 276000 2                  ORQ     0
         1 001246   200067 756100                    STQ     DIGIT,,AUTO

     1282     4099    3                       END;                /* +1 TO +9                           */

   4099  1 001247   001260 710000 1                  TRA     s:4106

     1283     4100    2                    ELSE
     1284     4101    3                    DO;                    /* -1 TO -9                           */

     1285     4102    3                       SIGN='-';

   4102  1 001250   055000 236003                    LDQ     23040,DU
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:262  
         1 001251   200066 756100                    STQ     SIGN,,AUTO

     1286     4103    3                       DIGIT=BINASC(ASCBIN(CHAR1)-25);

   4103  1 001252   200065 236100                    LDQ     CHAR1,,AUTO
         1 001253   000033 772000                    QRL     27
         1 001254   000031 136007                    SBLQ    25,DL
         1 001255   000033 736000                    QLS     27
         1 001256   000000 276000 2                  ORQ     0
         1 001257   200067 756100                    STQ     DIGIT,,AUTO

     1287     4104    3                       END;                /* -1 TO -9                           */

     1288     4105
     1289     4106    2              CALL INSERT(TEMP, 0, 1, SIGN);

   4106  1 001260   200103 471500                    LDP1    @TEMP,,AUTO
         1 001261   040100 100500                    MLR     fill='040'O
         1 001262   200066 000001                    ADSC9   SIGN,,AUTO               cn=0,n=1
         1 001263   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1

     1290     4107    2              IF POS = %LEADING THEN

   4107  1 001264   000000 115003                    CMPA    0,DU
         1 001265   001277 601000 1                  TNZ     s:4114

     1291     4108    3              DO;                          /* LEADING SIGN                       */

     1292     4109    3                 CALL INSERT(TEMP, 1, 1, DIGIT);

   4109  1 001266   040100 100500                    MLR     fill='040'O
         1 001267   200067 000001                    ADSC9   DIGIT,,AUTO              cn=0,n=1
         1 001270   100000 200001                    ADSC9   0,,PR1                   cn=1,n=1

     1293     4110    3                 CALL INSERT(TEMP, 2, LEN-1, SUBSTR(ORIG, 1, LEN-1));

   4110  1 001271   200015 720100                    LXL0    LEN,,AUTO
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:263  
         1 001272   777777 621010                    EAX1    -1,X0
         1 001273   040140 100540                    MLR     fill='040'O
         1 001274   000000 200011                    ADSC9   0,,PR0                   cn=1,n=*X1
         1 001275   100000 400011                    ADSC9   0,,PR1                   cn=2,n=*X1

     1294     4111    3                 END;                      /* LEADING SIGN                       */

   4111  1 001276   001310 710000 1                  TRA     s:4118

     1295     4112    2              ELSE
     1296     4113    3              DO;                          /* TRAILING SIGN                      */

     1297     4114    3                 CALL INSERT(TEMP, LEN-1, 1, DIGIT);

   4114  1 001277   200015 235100                    LDA     LEN,,AUTO
         1 001300   040105 100500                    MLR     fill='040'O
         1 001301   200067 000001                    ADSC9   DIGIT,,AUTO              cn=0,n=1
         1 001302   177777 600001                    ADSC9   -1,A,PR1                 cn=3,n=1

     1298     4115    3                 CALL INSERT(TEMP, 1, LEN-1, SUBSTR(ORIG, 0, LEN-1));

   4115  1 001303   200015 720100                    LXL0    LEN,,AUTO
         1 001304   777777 621010                    EAX1    -1,X0
         1 001305   040140 100540                    MLR     fill='040'O
         1 001306   000000 000011                    ADSC9   0,,PR0                   cn=0,n=*X1
         1 001307   100000 200011                    ADSC9   0,,PR1                   cn=1,n=*X1

     1299     4116    3                 END;                      /* TRAILING SIGN                      */

     1300     4117
     1301     4118    2              RETURN;

   4118  1 001310   200102 221300                    LDX1  ! @RESULT+2,,AUTO
         1 001311   000001 702211                    TSX2  ! 1,X1
     1302     4119    2      END SPLIT;
     1303     4120    1   END FKA$COMP;
     1304     4121         %EOD;
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:264  

PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:265  
--  Include file information  --

   B$OBJECT_C.:E05TOU  is referenced.
   FKA_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   FM_FIELD_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure FKA$COMP.
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:266  

 **** Variables and constants ****

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @FIRST_RECORD             75-0-0/w PTR         r     1 @KEY1
    75-0-0/w PTR         r     1 @KEY1                     76-0-0/w PTR         r     1 @KEY2
    76-0-0/w PTR         r     1 @KEY2                     77-0-0/w PTR         r     1 @LEN
    77-0-0/w PTR         r     1 @LEN                     104-0-0/w PTR         r     1 @ORIG
     5-0-0/w PTR         r     1 @RESULT                  100-0-0/w PTR         r     1 @RESULT
   100-0-0/w PTR         r     1 @RESULT                    4-0-0/w PTR         r     1 @SECOND_RECORD
   103-0-0/w PTR         r     1 @TEMP                     65-0-0/c CHAR        r     1 CHAR1
    75-0-0/w CHAR(4)     r     1 CTEMP_KEY1                76-0-0/w CHAR(4)     r     1 CTEMP_KEY2
    67-0-0/c CHAR        r     1 DIGIT                      6-0-0/w PTR         r     1 FIRST$
    *0-0-0/c ACHR        r     1 FIRST_RECORD              14-0-0/w UBIN        r     1 FN
    16-0-0/w UBIN        r     1 I                         10-0-0/w UBIN        r     1 INDEX#
    *0-0-0/c CHAR(64)    r     1 KEY1                      *0-0-0/c CHAR(64)    r     1 KEY1
    11-0-0/w PTR         r     1 KEY1$                     25-0-0/c CHAR(64)    r     1 KEY1_TEMP
    *0-0-0/c CHAR(64)    r     1 KEY2                      *0-0-0/c CHAR(64)    r     1 KEY2
    12-0-0/w PTR         r     1 KEY2$                     45-0-0/c CHAR(64)    r     1 KEY2_TEMP
    13-0-0/w UBIN        r     1 KEYTYPE                   15-0-0/w UBIN        r     1 LEN
    *0-0-0/w SBIN        r     1 LEN                       *0-0-0/w SBIN        r     1 LEN
    *0-0-0/c CHAR(64)    r     1 ORIG                      24-0-0/w SBIN        r     1 POS
    *0-0-0/w SBIN        r     1 RESULT                    *0-0-0/w SBIN        r     1 RESULT
    *0-0-0/w SBIN        r     1 RESULT                     7-0-0/w PTR         r     1 SECOND$
    *0-0-0/c ACHR        r     1 SECOND_RECORD             66-0-0/c CHAR        r     1 SIGN
    17-0-0/w UBIN        r     1 SIZE                      75-0-0/w SBIN        r     1 STEMP_KEY1
    76-0-0/w SBIN        r     1 STEMP_KEY2                *0-0-0/c CHAR(64)    r     1 TEMP
    20-0-0/d CHAR(8)     r     1 TEMP1                     22-0-0/d CHAR(8)     r     1 TEMP2

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:267  
     0-0-0/w PTR         r     1 FKA_IRKEYS$                0-0-0/w SBIN        r     1 FKA_KEYSIZE
     0-0-0/w PTR         r     1 FKA_KFIELD$                0-0-0/w PTR         r     1 FKA_RECFIELD$
     0-0-0/w SBIN        r     1 FKA_RECSIZE

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c CHAR(4)     r     1 CHAR4                      0-0-0/c CHAR(8)     r     1 CHAR8
     0-0-0/c ACHR        r     1 CHR                        0-0-0/c ACHR        r     1 CTEMP
     0-0-0/c CHAR(4)     r     1 ID                         0-0-0/w STRC(360)   r     1 IRKEYS
     0-0-0/c CHAR        r     1 KEY1                       0-0-0/c CHAR        r     1 KEY2
     0-0-0/w STRC(81)    r     1 KFIELD                     0-0-0/d STRC(54)    r     1 RECFIELD
     0-0-0/c CHAR(2)     r     1 SEGCNT


   Procedure FKA$COMP requires 714 words for executable code.
   Procedure FKA$COMP requires 76 words of local(AUTO) storage.
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:268  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:269  
          MINI XREF LISTING

CHAR1
      3748**DCL      4079<<CALLBLT  4081<<CALLBLT  4083>>IF       4089>>IF       4095>>IF       4098>>ASSIGN
      4103>>ASSIGN
CHAR4
      3758**DCL      3916>>ASSIGN   3917>>ASSIGN
CHAR8
      3759**DCL      3922>>ASSIGN   3923>>ASSIGN
CHR
      3757**DCL      3794>>IF       3794>>IF       3795>>IF       3795>>IF       3907>>IF       3907>>IF
      3908>>IF       3908>>IF
COMPFIELD
      3877**PROC     3808--CALL     3862--CALL     3960--CALL
COMPKEY
      3951**PROC     3813--CALL     3865--CALL
COMPSBIN
      3979**PROC     3928--CALL
COMPUDLO
      4007**PROC     3888--CALL
COMPUDTO
      4029**PROC     3891--CALL
CTEMP IN PROCEDURE COMPSBIN
      3980**DCL      3986>>ASSIGN   3987>>ASSIGN
CTEMP_KEY1 IN PROCEDURE COMPSBIN
      3982**DCL      3986<<ASSIGN
CTEMP_KEY2 IN PROCEDURE COMPSBIN
      3984**DCL      3987<<ASSIGN
DIGIT
      3750**DCL      4086<<ASSIGN   4092<<ASSIGN   4098<<ASSIGN   4103<<ASSIGN   4109>>CALLBLT  4114>>CALLBLT
FIRST$
      3733**DCL      3789<<ASSIGN   3794>>IF       3795>>IF       3806>>ASSIGN   3817<<ASSIGN   3817>>ASSIGN
      3820>>IF       3821>>IF       3829<<ASSIGN   3829>>ASSIGN   3832>>IF       3833>>IF       3852<<ASSIGN
      3860>>ASSIGN   3953>>ASSIGN
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:270  
FIRST_RECORD
      3599**DCL        28--PROC     3778>>ASSIGN   3789--ASSIGN   3850--ENTRY    3852--ASSIGN
FKA_IRKEYS$
       161**DCL      3723--IMP-PTR  3792>>IF       3793>>ASSIGN   3803>>IF       3804>>ASSIGN   3857>>IF
      3858>>ASSIGN   3956>>DOINDEX  3956>>DOINDEX  3956>>DOINDEX
FKA_KEYSIZE
       164**DCL      3817>>ASSIGN   3818>>ASSIGN
FKA_KFIELD$
       162**DCL      3730--IMP-PTR  3804>>ASSIGN   3858>>ASSIGN   3958>>ASSIGN
FKA_RECFIELD$
       160**DCL      3690--IMP-PTR  3805>>ASSIGN   3859>>ASSIGN   3879>>ASSIGN   3904>>ASSIGN   3915>>ASSIGN
      3921>>ASSIGN   3927>>ASSIGN   3959>>ASSIGN
FKA_RECSIZE
       164**DCL      3599--IMP-SIZ  3600--IMP-SIZ  3778>>ASSIGN   3779>>ASSIGN
FMG$COMPDFLT
      3773**DCL-ENT  3924--CALL
FMG$COMPPDFLT
      3774**DCL-ENT  3931--CALL
FMG$COMPPDLS
      3769**DCL-ENT  3895--CALL
FMG$COMPPDNS
      3770**DCL-ENT  3898--CALL
FMG$COMPPDTS
      3771**DCL-ENT  3901--CALL
FMG$COMPSFLT
      3772**DCL-ENT  3918--CALL
FMG$COMPUDFLT
      3775**DCL-ENT  3934--CALL
FMG$COMPUDLS
      3768**DCL-ENT  3885--CALL     4018--CALL     4040--CALL
FMG$COMPUDTS
      3767**DCL-ENT  3882--CALL
FN
      3739**DCL      3804<<ASSIGN   3805>>ASSIGN   3858<<ASSIGN   3859>>ASSIGN   3879>>ASSIGN   3904>>ASSIGN
      3915>>ASSIGN   3921>>ASSIGN   3927>>ASSIGN   3958<<ASSIGN   3959>>ASSIGN
I
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:271  
      3741**DCL      3779<<ASSIGN   3781>>IF       3782>>IF       3956<<DOINDEX  3958>>ASSIGN
ID
      3755**DCL      3820>>IF       3820>>IF       3821>>IF       3821>>IF
INDEX#
      3735**DCL      3778<<ASSIGN   3781>>IF       3782>>IF       3792>>IF       3793>>ASSIGN   3803>>IF
      3804>>ASSIGN   3854<<ASSIGN   3857>>IF       3858>>ASSIGN   3956>>DOINDEX  3956>>DOINDEX  3956>>DOINDEX
IRKEYS.K.DEGENERATE
      3725**DCL      3792>>IF
IRKEYS.K.FIRSTFIELD
      3724**DCL      3804>>ASSIGN   3858>>ASSIGN   3956>>DOINDEX  3956>>DOINDEX
IRKEYS.K.KEYL
      3724**DCL      3793>>ASSIGN
IRKEYS.K.NFIELDS
      3724**DCL      3803>>IF       3857>>IF       3956>>DOINDEX
KEY1
      3752**DCL      3882<>CALL     3885<>CALL     3888<>CALL     3891<>CALL     3895<>CALL     3898<>CALL
      3901<>CALL     3931<>CALL     3934<>CALL
KEY1 IN PROCEDURE COMPUDLO
      4008**DCL      4007--PROC     4014<>CALL
KEY1 IN PROCEDURE COMPUDTO
      4030**DCL      4029--PROC     4036<>CALL
KEY1$
      3736**DCL      3752--IMP-PTR  3806<<ASSIGN   3860<<ASSIGN   3882>>CALL     3885>>CALL     3888>>CALL
      3891>>CALL     3895>>CALL     3898>>CALL     3901>>CALL     3907>>IF       3908>>IF       3916>>ASSIGN
      3922>>ASSIGN   3931>>CALL     3934>>CALL     3953<<ASSIGN   3964<<ASSIGN   3964>>ASSIGN   3986>>ASSIGN
KEY1_TEMP
      3746**DCL      4014<>CALL     4018<>CALL     4036<>CALL     4040<>CALL
KEY2
      3753**DCL      3882<>CALL     3885<>CALL     3888<>CALL     3891<>CALL     3895<>CALL     3898<>CALL
      3901<>CALL     3931<>CALL     3934<>CALL
KEY2 IN PROCEDURE COMPUDLO
      4009**DCL      4007--PROC     4016<>CALL
KEY2 IN PROCEDURE COMPUDTO
      4031**DCL      4029--PROC     4038<>CALL
KEY2$
      3737**DCL      3753--IMP-PTR  3807<<ASSIGN   3861<<ASSIGN   3882>>CALL     3885>>CALL     3888>>CALL
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:272  
      3891>>CALL     3895>>CALL     3898>>CALL     3901>>CALL     3907>>IF       3908>>IF       3917>>ASSIGN
      3923>>ASSIGN   3931>>CALL     3934>>CALL     3954<<ASSIGN   3965<<ASSIGN   3965>>ASSIGN   3987>>ASSIGN
KEY2_TEMP
      3747**DCL      4016<>CALL     4018<>CALL     4038<>CALL     4040<>CALL
KEYTYPE
      3738**DCL      3805<<ASSIGN   3859<<ASSIGN   3880>>DOCASE   3905>>IF       3959<<ASSIGN   4051>>DOCASE
KFIELD.FIELD
      3730**DCL      3804>>ASSIGN   3858>>ASSIGN   3958>>ASSIGN
LEN
      3740**DCL      3757--IMP-SIZ  3793<<ASSIGN   3794>>IF       3794>>IF       3795>>IF       3795>>IF
      3879<<ASSIGN   3882<>CALL     3885<>CALL     3888<>CALL     3891<>CALL     3895<>CALL     3898<>CALL
      3901<>CALL     3904<<ASSIGN   3906<<ASSIGN   3906>>ASSIGN   3907>>IF       3907>>IF       3908>>IF
      3908>>IF       3915<<ASSIGN   3921<<ASSIGN   3927<<ASSIGN   3931<>CALL     3934<>CALL     3980--IMP-SIZ
      3986>>ASSIGN   3987>>ASSIGN   4055>>ASSIGN   4058>>ASSIGN   4081>>CALLBLT  4110>>CALLBLT  4110>>CALLBLT
      4114>>CALLBLT  4115>>CALLBLT  4115>>CALLBLT
LEN IN PROCEDURE COMPUDLO
      4010**DCL      4007--PROC     4018>>CALL
LEN IN PROCEDURE COMPUDTO
      4032**DCL      4029--PROC     4040>>CALL
ORIG IN PROCEDURE SPLIT
      4076**DCL      4074--PROC     4079>>CALLBLT  4081>>CALLBLT  4110>>CALLBLT  4115>>CALLBLT
POS
      3745**DCL      4013<<ASSIGN   4035<<ASSIGN   4078>>IF       4107>>IF
RECFIELD.DECFIELD.LEN#
      3699**DCL      3879>>ASSIGN
RECFIELD.FIELD
      3698**DCL      3698--REDEF
RECFIELD.FIELD.LEN#
      3698**DCL      3904>>ASSIGN   3915>>ASSIGN   3921>>ASSIGN   3927>>ASSIGN
RECFIELD.FIELD.TYPE#
      3698**DCL      3805>>ASSIGN   3859>>ASSIGN   3959>>ASSIGN
RESULT
      3601**DCL        28--PROC     3777<<ASSIGN   3783<<ASSIGN   3785<<ASSIGN   3796<<ASSIGN   3798<<ASSIGN
      3809>>IF       3816>>IF       3822<<ASSIGN   3824<<ASSIGN   3828>>IF       3834<<ASSIGN   3836<<ASSIGN
      3850--ENTRY    3854>>ASSIGN   3855<<ASSIGN   3882<>CALL     3885<>CALL     3888<>CALL     3891<>CALL
      3895<>CALL     3898<>CALL     3901<>CALL     3909<<ASSIGN   3911<<ASSIGN   3918<>CALL     3924<>CALL
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:273  
      3931<>CALL     3934<>CALL     3961>>IF       3992<<ASSIGN   3994<<ASSIGN
RESULT IN PROCEDURE COMPUDLO
      4011**DCL      4007--PROC     4018<>CALL
RESULT IN PROCEDURE COMPUDTO
      4033**DCL      4029--PROC     4040<>CALL
SECOND$
      3734**DCL      3790<<ASSIGN   3794>>IF       3795>>IF       3807>>ASSIGN   3818<<ASSIGN   3818>>ASSIGN
      3820>>IF       3821>>IF       3830<<ASSIGN   3830>>ASSIGN   3832>>IF       3833>>IF       3853<<ASSIGN
      3861>>ASSIGN   3954>>ASSIGN
SECOND_RECORD
      3600**DCL        28--PROC     3779>>ASSIGN   3790--ASSIGN   3850--ENTRY    3853--ASSIGN
SEGCNT
      3756**DCL      3832>>IF       3832>>IF       3833>>IF       3833>>IF
SET_SIZE
      4049**PROC     3963--CALL
SIGN
      3749**DCL      4085<<ASSIGN   4091<<ASSIGN   4097<<ASSIGN   4102<<ASSIGN   4106>>CALLBLT
SIZE
      3742**DCL      3964>>ASSIGN   3965>>ASSIGN   4055<<ASSIGN   4058<<ASSIGN
SPLIT
      4074**PROC     4014--CALL     4016--CALL     4036--CALL     4038--CALL
STEMP_KEY1 IN PROCEDURE COMPSBIN
      3981**DCL      3982--REDEF    3989>>IF       3991>>IF
STEMP_KEY2 IN PROCEDURE COMPSBIN
      3983**DCL      3984--REDEF    3989>>IF       3991>>IF
TEMP IN PROCEDURE SPLIT
      4075**DCL      4074--PROC     4106<<CALLBLT  4109<<CALLBLT  4110<<CALLBLT  4114<<CALLBLT  4115<<CALLBLT
TEMP1
      3743**DCL      3916<<ASSIGN   3918<>CALL     3922<<ASSIGN   3924<>CALL
TEMP2
      3744**DCL      3917<<ASSIGN   3918<>CALL     3923<<ASSIGN   3924<>CALL
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:274  
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:275  
              MINI UREF LISTING

FKA$COMP      28**PROC
FKA$COMPKEY    3850**ENTRY
FKA_ALTKEYS$     160**DCL
FKA_BOUND     163**DCL
FKA_CLOSE_DONE     167**DCL
FKA_CMDVAR     166**DCL
FKA_CMDVAR_EXIST     166**DCL
FKA_CMDVAR_SET     166**DCL
FKA_CODE19$     162**DCL
FKA_CODE20$     162**DCL
FKA_DATA_BUF     165**DCL
FKA_DATA_BUF$     165**DCL
FKA_DATA_GRAN     163**DCL
FKA_DCB$     163**DCL
FKA_DUPS     164**DCL
FKA_FIELD_START_DATA     161**DCL
FKA_FILE_OPEN     166**DCL
FKA_INDEX_BUF     164**DCL
FKA_INDEX_BUF$     165**DCL
FKA_INDEX_GRAN     163**DCL
FKA_IRKEYS_DATA     161**DCL
FKA_KFIELD_DATA     162**DCL
FKA_KTPTR$     163**DCL
FKA_M$CLOSE_ERR     167**DCL
FKA_MON     160**DCL
FKA_NUMKEYS     164**DCL
FKA_START$     160**DCL
FKA_UNIQUE     160**DCL
INDX    3754**DCL
LOOP IN PROCEDURE COMPKEY   3956**LABEL
M$ACCT      56**DCL-ENT
M$ACTIVATE      59**DCL-ENT
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:276  
M$ALIB      52**DCL-ENT
M$ASUSER      54**DCL-ENT
M$ATTACH      61**DCL-ENT
M$BADPP      79**DCL-ENT
M$CGCTL      60**DCL-ENT
M$CGINFO      60**DCL-ENT
M$CHECK      41**DCL-ENT
M$CHGUNIT      99**DCL-ENT
M$CLOSE      39**DCL-ENT
M$CLRSTK      97**DCL-ENT
M$CMDVAR     108**DCL-ENT
M$CONFIG      69**DCL-ENT
M$CORRES      44**DCL-ENT
M$CPEXIT      53**DCL-ENT
M$CVM      77**DCL-ENT
M$CVOL      42**DCL-ENT
M$DCLFLD      69**DCL-ENT
M$DEACTIVATE      59**DCL-ENT
M$DELREC      41**DCL-ENT
M$DEQ     106**DCL-ENT
M$DETACH      61**DCL-ENT
M$DEVICE      43**DCL-ENT
M$DISPLAY     106**DCL-ENT
M$DISPRES      46**DCL-ENT
M$DLIB      52**DCL-ENT
M$DRIBBLE      69**DCL-ENT
M$DRTN      97**DCL-ENT
M$DSUSER      54**DCL-ENT
M$ENQ     105**DCL-ENT
M$EOM      64**DCL-ENT
M$ERASE      70**DCL-ENT
M$ERR      51**DCL-ENT
M$ERRMSG     102**DCL-ENT
M$EVENT      94**DCL-ENT
M$EXHUME     103**DCL-ENT
M$EXIT      51**DCL-ENT
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:277  
M$EXTEND      43**DCL-ENT
M$FDP      75**DCL-ENT
M$FDS      74**DCL-ENT
M$FEBOOT      67**DCL-ENT
M$FECTL      68**DCL-ENT
M$FEDUMP      67**DCL-ENT
M$FID     102**DCL-ENT
M$FINDPROC      56**DCL-ENT
M$FSUSER      54**DCL-ENT
M$FVP      76**DCL-ENT
M$FWCG      60**DCL-ENT
M$GBPL      80**DCL-ENT
M$GDDL      76**DCL-ENT
M$GDP      75**DCL-ENT
M$GDS      74**DCL-ENT
M$GETDCB      45**DCL-ENT
M$GETMOUSE      85**DCL-ENT
M$GETPM      86**DCL-ENT
M$GJOB     104**DCL-ENT
M$GLINEATTR      64**DCL-ENT
M$GOODPP      79**DCL-ENT
M$GPLATEN      72**DCL-ENT
M$GPROMPT      71**DCL-ENT
M$GTRMATTR      65**DCL-ENT
M$GTRMCTL      63**DCL-ENT
M$GTRMTAB      66**DCL-ENT
M$GVP      75**DCL-ENT
M$HELP     102**DCL-ENT
M$INT      94**DCL-ENT
M$INTRTN      55**DCL-ENT
M$IOQ      90**DCL-ENT
M$JOBSTATS     104**DCL-ENT
M$KEYIN      44**DCL-ENT
M$LDEV      39**DCL-ENT
M$LDTRC      52**DCL-ENT
M$LIMIT      45**DCL-ENT
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:278  
M$LINES      44**DCL-ENT
M$LINK      51**DCL-ENT
M$MADMUCK      47**DCL-ENT
M$MAKUSER      78**DCL-ENT
M$MBS      46**DCL-ENT
M$MDFFLD      70**DCL-ENT
M$MERC      95**DCL-ENT
M$MERCS      96**DCL-ENT
M$MIRROR      90**DCL-ENT
M$MONINFO     107**DCL-ENT
M$MPL      80**DCL-ENT
M$NODEINFO      71**DCL-ENT
M$NXTUSR     105**DCL-ENT
M$OCMSG     103**DCL-ENT
M$OLAY      51**DCL-ENT
M$OPEN      39**DCL-ENT
M$PAS      80**DCL-ENT
M$PATHCON     103**DCL-ENT
M$PDS      74**DCL-ENT
M$PFIL      41**DCL-ENT
M$PLATEN      65**DCL-ENT
M$PRECORD      43**DCL-ENT
M$PROCNAME      56**DCL-ENT
M$PROFILE      67**DCL-ENT
M$PROMPT      63**DCL-ENT
M$RACST      47**DCL-ENT
M$RDSYSLOG      88**DCL-ENT
M$READ      40**DCL-ENT
M$RELDCB      45**DCL-ENT
M$RELRES      46**DCL-ENT
M$RELSTARF      48**DCL-ENT
M$REM      48**DCL-ENT
M$RENV      95**DCL-ENT
M$REQUIRE      47**DCL-ENT
M$RETRY      96**DCL-ENT
M$RETRYS      96**DCL-ENT
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:279  
M$REW      42**DCL-ENT
M$RLSFLD      70**DCL-ENT
M$RPRIV      98**DCL-ENT
M$RSPP      77**DCL-ENT
M$RSWITCH      99**DCL-ENT
M$RUE     105**DCL-ENT
M$SAD      78**DCL-ENT
M$SAVE      54**DCL-ENT
M$SCON      55**DCL-ENT
M$SCREECH      53**DCL-ENT
M$SENV      95**DCL-ENT
M$SETFMA      39**DCL-ENT
M$SETFP      68**DCL-ENT
M$SINPUT      66**DCL-ENT
M$SLCFLD      71**DCL-ENT
M$SMOUSE      85**DCL-ENT
M$SMPRT      77**DCL-ENT
M$SPRIV      98**DCL-ENT
M$SSC      78**DCL-ENT
M$SSWITCH      98**DCL-ENT
M$STATE     107**DCL-ENT
M$STD      79**DCL-ENT
M$STIMER      93**DCL-ENT
M$STLPP      76**DCL-ENT
M$STRAP      93**DCL-ENT
M$STRMATTR      65**DCL-ENT
M$STRMCTL      63**DCL-ENT
M$STRMTAB      66**DCL-ENT
M$SYMBIO     104**DCL-ENT
M$SYSCON      90**DCL-ENT
M$SYSID     108**DCL-ENT
M$TDCLOSE      89**DCL-ENT
M$TDIO      89**DCL-ENT
M$TDOPEN      88**DCL-ENT
M$TDREQCPU      89**DCL-ENT
M$TEMPWROC      83**DCL-ENT
PL6.E3A0      #005=FKA$COMP File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:32 Page:280  
M$TIME     106**DCL-ENT
M$TRAP      93**DCL-ENT
M$TRMISC      68**DCL-ENT
M$TRMPRG      64**DCL-ENT
M$TRTN      97**DCL-ENT
M$TRUNC      40**DCL-ENT
M$TTIMER      93**DCL-ENT
M$UC      63**DCL
M$UMPL      80**DCL-ENT
M$UNFID     102**DCL-ENT
M$UNLATCH      59**DCL-ENT
M$UNSHARE      56**DCL-ENT
M$USRFIELD      99**DCL-ENT
M$VIRTUAL      74**DCL-ENT
M$WAIT      97**DCL-ENT
M$WEOF      42**DCL-ENT
M$WRITE      40**DCL-ENT
M$WRSYSLOG      88**DCL-ENT
M$XCON      94**DCL-ENT
M$XCONRTN      55**DCL-ENT
M$XEQTIME     107**DCL-ENT
M$XFLUSH      48**DCL-ENT
M$XMOUSE      85**DCL-ENT
M$XXX      51**DCL-ENT
M$YC      53**DCL-ENT

PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:281  
     1305        1        /*T***********************************************************/
     1306        2        /*T*                                                         */
     1307        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1308        4        /*T*                                                         */
     1309        5        /*T***********************************************************/
     1310        6        /*F*     NAME:     FKA$INPUT
     1311        7                 PURPOSE:  To build a record, and pass it to SORT
     1312        8        */
     1313        9        /*D*     NAME:     FKA$INPUT
     1314       10                 INPUT:    None
     1315       11                 OUTPUT:   SORT_REC - record to pass to SORT
     1316       12                           RECSIZE - size of SORT_REC
     1317       13                 DESCRIPTION:
     1318       14
     1319       15                      Because SORT_REC has such an odd format, it is
     1320       16                 not possible to build a single structure to access it.
     1321       17                 It is a series of based variables strung together.
     1322       18                 The record looks something like:
     1323       19
     1324       20                 +---------+---------------------------+
     1325       21                 | index   | key                       |
     1326       22                 +---------+
     1327       23                               .
     1328       24                               .
     1329       25                 +------------------------------------+
     1330       26                 |       ID                           |
     1331       27                 +------------------------------------+
     1332       28                 |   seg count      |                 |
     1333       29                 +------------------+                 |
     1334       30                 |           miseg  +-----------------+
     1335       31                 |                  |
     1336       32                 +------------------+
     1337       33
     1338       34                 index - one byte, the index number of this key
     1339       35                 key - variable size, in bytes
     1340       36                 ID - 4 bytes, record ID
     1341       37                 seg count - 2 bytes, identifies a specific segment in a list
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:282  
     1342       38                             of segments for a record
     1343       39                 miseg - two words, actual segment for this record, or record
     1344       40                         fragment
     1345       41
     1346       42                      NXTINDX will build the proper record.  Set the record
     1347       43                 size, then return.
     1348       44        */
     1349       45         %EJECT;
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:283  
     1350       46        FKA$INPUT: PROC(SORT_REC, RECSIZE) ALTRET;
     1351       47        /* */
     1352       48         %INCLUDE CP_6;
     1353      129         %INCLUDE CP_6_SUBS;
     1354      669         %INCLUDE FM$GRAN;
     1355      738         %INCLUDE FM$FIT;
     1356      959         %INCLUDE FK_DATA_C;
     1357     1036         %INCLUDE FKA_DATA_R;
     1358     1052         %INCLUDE FM_FIELD_C;
     1359     1093         %INCLUDE B$OBJECT_C;
     1360     4523        /* */
     1361     4524    1     DCL SORT_REC CHAR(FKA_RECSIZE);
     1362     4525    1     DCL 1 SORT_REC_BIT REDEF SORT_REC,
     1363     4526    1            2 * CHAR(FKA_RECSIZE);
     1364     4527    1     DCL RECSIZE UBIN;
     1365     4528        /* */
     1366     4529         %FPT_READ(FPTN=READ_DATA, BUF=FKA_DATA_BUF, KEY=FKA_DATA_GRAN,
     1367     4530         DCB=M$SI, KEYS=YES, STCLASS=CONSTANT);
     1368     4569         %FPT_READ(FPTN=READ_INDEX, BUF=FKA_INDEX_BUF, KEY=FKA_INDEX_GRAN,
     1369     4570         KEYS=YES, DCB=M$SI, STCLASS=CONSTANT);
     1370     4609         %F$DCB(DCBN=F$DCB, STCLASS="BASED(FKA_DCB$)");
     1371     4666        /* */
     1372     4667    1     DCL M$SI DCB;
     1373     4668        /* */
     1374     4669    1     DCL SEGX SBIN STATIC INIT(0);
     1375     4670    1     DCL SEG$ PTR STATIC;
     1376     4671    1     DCL SEGCNT SBIN STATIC INIT(0);
     1377     4672    1     DCL CRECX SBIN STATIC INIT(0);
     1378     4673    1     DCL INDEX# SBIN STATIC INIT(0);
     1379     4674    1     DCL KEY$ PTR;
     1380     4675    1     DCL ENDGRAN SBIN;
     1381     4676    1     DCL LASTSEG SBIN;
     1382     4677    1     DCL SIZE SBIN;
     1383     4678    1     DCL CHARS CHAR(SIZE) BASED;
     1384     4679    1     DCL G$ PTR;
     1385     4680    1     DCL IRKEY$ PTR;
     1386     4681    1     DCL I SBIN;
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:284  
     1387     4682    1     DCL ODD SBIN;
     1388     4683    1     DCL FN SBIN;
     1389     4684    1     DCL REC$ PTR;
     1390     4685    1     DCL F$ PTR;
     1391     4686    1     DCL LEN SBIN;
     1392     4687    1     DCL 1 BYT(0:0) CALIGNED BASED,
     1393     4688    1            2 * BIT(1) UNAL,
     1394     4689    1            2 UPPER UBIN(4) UNAL,
     1395     4690    1            2 LOWER UBIN(4) UNAL;
     1396     4691        /* */
     1397     4692    1     DCL FM_FRZERO UBIN SYMREF;
     1398     4693        /* */
     1399     4694    1     DCL SORT_REC$ PTR;
     1400     4695    1     DCL SORT_INDX UBIN(9) CALIGNED BASED(SORT_REC$);
     1401     4696    1     DCL 1 SORT_ID CALIGNED BASED(SORT_REC$),
     1402     4697    1            2 DA UBIN(26) UNAL,
     1403     4698    1            2 GX UBIN(10) UNAL;
     1404     4699    1     DCL SORT_SEGCNT UBIN(18) CALIGNED BASED(SORT_REC$);
     1405     4700    1     DCL SORT_MISEG BIT(72) CALIGNED BASED(SORT_REC$);
     1406     4701        /* */
     1407     4702         %FM$GRAN(BASED="BASED(FKA_INDEX_BUF$)");
     1408     4706         %FM$KEYTBL(BASED="BASED(FKA_KTPTR$)");
     1409     4709         %FM$MISEG(BASED="BASED(SEG$)");
     1410     4713         %FM$MISEG(BASED="STATIC", FM$MISEG=FM_MISEG);
     1411     4717         %VLP_RECFIELD(FPTN=RECFIELD, STCLASS="BASED(FKA_RECFIELD$)");
     1412     4761         %FM$FIELD_START(FPTN=FIELD_START, STCLASS="BASED(FKA_START$)");
     1413     4783         %FITALTKEYS(BASED="BASED(FKA_ALTKEYS$)");
     1414     4789         %FMG$IRKEYS(FPTN=IRKEYS, STCLASS="BASED(FKA_IRKEYS$)");
     1415     4796         %FMG$KFIELD(FPTN=KFIELD, STCLASS="BASED(FKA_KFIELD$)");
     1416     4799         %FM$KEYENT(BASED="BASED(KEY$)");
     1417     4802         %FM$IRENT(BASED="BASED(KEY$)");
     1418     4805         %VREBL_DATATYPES;
     1419     4880        /* */
     1420     4881    1     DCL FKA$ABORT ENTRY;
     1421     4882        /* */
     1422     4883    1           CALL NXTINDX ALTRET(EOF);
     1423     4884    1           RECSIZE=FKA_RECSIZE;
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:285  
     1424     4885
     1425     4886    1           RETURN;
     1426     4887    1   EOF:    ALTRETURN;
     1427     4888         %EJECT;
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:286  
     1428     4889        /*I*     NAME:     BUILD_IREL
     1429     4890                 PURPOSE:  To build an IREL key
     1430     4891                 DESCRIPTION:
     1431     4892
     1432     4893                      Set up a pointer to the current position in the
     1433     4894                 output record.  Set up a pointer to the record.
     1434     4895
     1435     4896                      Now loop through the key definition.  Move the field
     1436     4897                 from the record to the key.
     1437     4898
     1438     4899                      Finally, increment the output record pointer to
     1439     4900                 the end of the key.
     1440     4901        */
     1441     4902         %EJECT;
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:287  
     1442     4903    1   BUILD_IREL: PROC;
     1443     4904    2     DCL CHRS CHAR(LEN) BASED;
     1444     4905        /* */
     1445     4906    2              IRKEY$=SORT_REC$;
     1446     4907    2              REC$=PINCRW(FKA_DATA_BUF$, FM_MISEG.GX);
     1447     4908
     1448     4909    3              DO I=0 TO IRKEYS.K.NFIELDS(INDEX#)-1;
     1449     4910    3                 FN=KFIELD.FIELD(I+IRKEYS.K.FIRSTFIELD(INDEX#));
     1450     4911
     1451     4912    4                 DO CASE(RECFIELD.FIELD.TYPE#(FN));
     1452     4913    4                    CASE(%UDLS_DATATYPE, %UDTS_DATATYPE, %UDNS_DATATYPE,
     1453     4914    4                     %UDLO_DATATYPE, %UDTO_DATATYPE, %UDFLT_DATATYPE,
     1454     4915    4                     %PDLA_DATATYPE, %PDTA_DATATYPE, %PDNS_DATATYPE,
     1455     4916    4                     %PDTE_DATATYPE, %PDLE_DATATYPE, %PDFLT_DATATYPE,
     1456     4917    4                     %DATE_DATATYPE, %TIME_DATATYPE);
     1457     4918    4                       LEN=RECFIELD.DECFIELD.LEN#(FN);
     1458     4919
     1459     4920    4                    CASE(%SBIN_DATATYPE, %UBIN_DATATYPE, %UTS_DATATYPE);
     1460     4921    4                       LEN=RECFIELD.FIELD.LEN#(FN)/9;
     1461     4922
     1462     4923    4                    CASE(ELSE);
     1463     4924    4                       LEN=RECFIELD.FIELD.LEN#(FN);
     1464     4925
     1465     4926    4                    END;                   /* Case                               */
     1466     4927
     1467     4928    4                 DO CASE(RECFIELD.FIELD.TYPE#(FN));
     1468     4929    4                    CASE(%PDLA_DATATYPE, %PDTA_DATATYPE, %PDNS_DATATYPE,
     1469     4930    4                     %PDFLT_DATATYPE, %PDLE_DATATYPE, %PDTE_DATATYPE,
     1470     4931    4                     %DATE_DATATYPE, %TIME_DATATYPE);
     1471     4932    4                       CALL BUILD_NIBFIELD;
     1472     4933    4                       IRKEY$=PINCRC(IRKEY$, (LEN+1)/2);
     1473     4934
     1474     4935    4                    CASE(ELSE);
     1475     4936    4                       F$=PINCRC(REC$, FIELD_START.OFFSET(FN)/9);
     1476     4937    4                       IRKEY$->CHRS=F$->CHRS;
     1477     4938    4                       IRKEY$=PINCRC(IRKEY$, LEN);
     1478     4939    4                    END;                   /* CASE                               */
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:288  
     1479     4940    3                 END;                      /* DO I                               */
     1480     4941    2              SORT_REC$=PINCRC(SORT_REC$, FKA_KEYSIZE);
     1481     4942
     1482     4943    2              RETURN;
     1483     4944    2      END BUILD_IREL;
     1484     4945         %EJECT;
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:289  
     1485     4946        /*I*     NAME:     BUILD_NIBFIELD
     1486     4947                 PURPOSE:  To build a nibble field
     1487     4948                 DESCRIPTION:
     1488     4949
     1489     4950                      This moves data, one nibble at a time, from the
     1490     4951                 record to the key.  ODD indicates whether the nibble
     1491     4952                 field in the record is on an odd or even nibble boundary.
     1492     4953        */
     1493     4954         %EJECT;
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:290  
     1494     4955    1   BUILD_NIBFIELD: PROC;
     1495     4956    2     DCL TEMP UBIN(4);
     1496     4957    2     DCL I UBIN;
     1497     4958        /* */
     1498     4959    2              F$=PINCRC(REC$, FIELD_START.OFFSET(FN)/9);
     1499     4960    2              ODD=MOD(FIELD_START.OFFSET(FN), 9);
     1500     4961    2              IF ODD > 0 THEN
     1501     4962    2                 ODD=1;
     1502     4963
     1503     4964    3              DO I=0 TO LEN-1;
     1504     4965    3                 IF MOD(I+ODD, 2) = 1 THEN
     1505     4966    3                    TEMP=F$->BYT.LOWER((I+ODD)/2);
     1506     4967    3                 ELSE
     1507     4968    3                    TEMP=F$->BYT.UPPER((I+ODD)/2);
     1508     4969
     1509     4970    3                 IF MOD(I,2) = 1 THEN
     1510     4971    3                    IRKEY$->BYT.LOWER(I/2)=TEMP;
     1511     4972    3                 ELSE
     1512     4973    3                    IRKEY$->BYT.UPPER(I/2)=TEMP;
     1513     4974    3                 END;                      /* DO I                               */
     1514     4975
     1515     4976    2              RETURN;
     1516     4977    2      END BUILD_NIBFIELD;
     1517     4978         %EJECT;
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:291  
     1518     4979        /*I*     NAME:     BUILD_REC
     1519     4980                 PURPOSE:  To build a record to hand to SORT
     1520     4981                 DESCRIPTION:
     1521     4982
     1522     4983                      First, get the data granule that the record is
     1523     4984                 on.  We need it to build the key.
     1524     4985
     1525     4986                      Zero out the output record.  Set the index to
     1526     4987                 the current index that we are processing, and increment
     1527     4988                 the pointer to point to the key portion.
     1528     4989
     1529     4990                      If this is an indexed file, then just move the
     1530     4991                 character information from the record to the key.
     1531     4992                 Otherwise, if this is an IREL file, we call a subroutine
     1532     4993                 to build the key.
     1533     4994
     1534     4995                      Now store the remaining information, the ID,
     1535     4996                 SEGCNT, and MISEG.
     1536     4997        */
     1537     4998         %EJECT;
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:292  
     1538     4999    1   BUILD_REC: PROC;
     1539     5000        /* */
     1540     5001    2              IF FM_MISEG.GDA-FM_FRZERO ~= FKA_DATA_GRAN THEN
     1541     5002    3              DO;                          /* READ DATA GRANULE                  */
     1542     5003    3                 FKA_DATA_GRAN=FM_MISEG.GDA-FM_FRZERO;
     1543     5004    3                 CALL M$READ(READ_DATA) ALTRET(ERR);
     1544     5005    3                 END;                      /* READ DATA GRANULE                  */
     1545     5006
     1546     5007    2              SORT_REC_BIT='0'B;
     1547     5008    2              SORT_REC$=ADDR(SORT_REC);
     1548     5009    2              SORT_INDX=INDEX#;
     1549     5010    2              SORT_REC$=PINCRC(SORT_REC$, 1);
     1550     5011
     1551     5012    2              IF F$DCB.ORG# = %INDEXED# THEN
     1552     5013    3              DO;                          /* INDEXED FILE                       */
     1553     5014    3                 SIZE=FITALTKEYS.K.KEYL(INDEX#);
     1554     5015    3                 G$=PINCRC(FKA_DATA_BUF$,
     1555     5016    3                     FM_MISEG.GX*4+FITALTKEYS.K.KEYX(INDEX#));
     1556     5017    3                 SORT_REC$->CHARS=G$->CHARS;
     1557     5018    3                 SORT_REC$=PINCRC(SORT_REC$, FKA_KEYSIZE);
     1558     5019    3                 END;                      /* INDEXED FILE                       */
     1559     5020    2              ELSE
     1560     5021    2                 CALL BUILD_IREL;
     1561     5022
     1562     5023    2              SORT_ID.DA=FM_MISEG.GDA;
     1563     5024    2              SORT_ID.GX=FM_MISEG.GX;
     1564     5025    2              SORT_REC$=PINCRC(SORT_REC$, 4);
     1565     5026    2              SORT_SEGCNT=SEGCNT;
     1566     5027    2              SORT_REC$=PINCRC(SORT_REC$, 2);
     1567     5028    2              SORT_MISEG=FM$MISEG;
     1568     5029
     1569     5030    2              RETURN;
     1570     5031    2   ERR:       CALL FKA$ABORT;
     1571     5032    2      END BUILD_REC;
     1572     5033         %EJECT;
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:293  
     1573     5034        /*I*     NAME:     FLINK
     1574     5035                 PURPOSE:  To flink to the next index granule
     1575     5036                 DESCRIPTION:
     1576     5037
     1577     5038                      If there isn't one, altret.
     1578     5039
     1579     5040                      Otherwise remember the new FLINK, read the next
     1580     5041                 granule, and set up some variables.
     1581     5042        */
     1582     5043         %EJECT;
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:294  
     1583     5044    1   FLINK:     PROC ALTRET;
     1584     5045        /* */
     1585     5046    2              IF FM$GRAN.FLINK = 0 THEN
     1586     5047    2                 ALTRETURN;
     1587     5048
     1588     5049    2              FKA_INDEX_GRAN=FM$GRAN.FLINK-FM_FRZERO;
     1589     5050    2              CALL M$READ(READ_INDEX) ALTRET(ERR);
     1590     5051
     1591     5052    2              FKA_KTPTR$=PINCRW(FKA_INDEX_BUF$, FM$GRAN.FCEX);
     1592     5053    2              CRECX=0;
     1593     5054    2              FKA_BOUND=FM$KEYTBL(0);
     1594     5055
     1595     5056    2              RETURN;
     1596     5057    2   ERR:       CALL FKA$ABORT;
     1597     5058    2      END FLINK;
     1598     5059         %EJECT;
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:295  
     1599     5060        /*I*     NAME:     NXTINDX
     1600     5061                 PURPOSE:  To build the record for the next index
     1601     5062                 DESCRIPTION:
     1602     5063
     1603     5064                      If this is the first time through, or we have
     1604     5065                 taken care of all of the indexes, then either get
     1605     5066                 the next segment or key.  Otherwise, we have a
     1606     5067                 new index, same record.
     1607     5068
     1608     5069                      The rather convoluted IF statement basically
     1609     5070                 tries just to build indexes that are not UNIQUE.
     1610     5071                 If an index is UNIQUE, then we ignore LOAD and build
     1611     5072                 them on the fly in FMG$KEYED.
     1612     5073        */
     1613     5074         %EJECT;
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:296  
     1614     5075    1   NXTINDX:   PROC ALTRET;
     1615     5076        /* */
     1616     5077    3   LOOP:      DO WHILE('1'B);
     1617     5078    3                 IF INDEX#+1 >= FKA_NUMKEYS OR INDEX# = 0 THEN
     1618     5079    4                 DO;                       /* GET NEXT KEY                       */
     1619     5080    4                    INDEX#=1;
     1620     5081    4                    IF SEGX > 0 THEN
     1621     5082    4                       CALL NXTSEG ALTRET(EOF);
     1622     5083    4                    ELSE
     1623     5084    4                       CALL NXTKEY ALTRET(EOF);
     1624     5085    4                    END;                   /* GET NEXT KEY                       */
     1625     5086    3                 ELSE
     1626     5087    3                    INDEX#=INDEX#+1;
     1627     5088
     1628     5089    3                 IF (F$DCB.ORG# = %INDEXED# AND
     1629     5090    3                     (FITALTKEYS.UNIQUEBLD OR
     1630     5091    3                     NOT FITALTKEYS.K.UNIQUE(INDEX#))) OR
     1631     5092    3                     (F$DCB.ORG# = %IREL# AND
     1632     5093    3                     (IRKEYS.UNIQUEBLD OR
     1633     5094    3                     NOT IRKEYS.K.UNIQUE(INDEX#))) THEN
     1634     5095    4                 DO;                       /* BUILD RECORD                       */
     1635     5096    4                    CALL BUILD_REC;
     1636     5097    4                    EXIT LOOP;
     1637     5098    4                    END;                   /* BUILD RECORD                       */
     1638     5099
     1639     5100    3                 END;                      /* WHILE                              */
     1640     5101
     1641     5102    2              RETURN;
     1642     5103    2   EOF:       ALTRETURN;
     1643     5104    2      END NXTINDX;
     1644     5105         %EJECT;
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:297  
     1645     5106        /*I*     NAME:     NXTKEY
     1646     5107                 PURPOSE:  To position to the next key
     1647     5108                 DESCRIPTION:
     1648     5109
     1649     5110                      Loop until we find a non-deleted key.  If this
     1650     5111                 is the end of the granule, then try the next granule.
     1651     5112
     1652     5113                      Build a pointer to the MISEG, and save the MISEG
     1653     5114                 away.
     1654     5115        */
     1655     5116         %EJECT;
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:298  
     1656     5117    1   NXTKEY:    PROC ALTRET;
     1657     5118        /* */
     1658     5119    3              DO UNTIL (NOT FM$KEYENT.D);
     1659     5120    3                 SEGX=0;
     1660     5121    3                 SEGCNT=0;
     1661     5122    3                 CRECX=CRECX+1;
     1662     5123
     1663     5124    4                 DO WHILE(CRECX > FM$GRAN.KEYCNT);
     1664     5125    4                    CALL FLINK ALTRET(EOF);
     1665     5126    4                    CRECX=1;
     1666     5127    4                    END;
     1667     5128
     1668     5129    3                 IF CRECX >= FKA_BOUND THEN
     1669     5130    3                    SEGX=FM$KEYTBL(CRECX)+512;
     1670     5131    3                 ELSE
     1671     5132    3                    SEGX=FM$KEYTBL(CRECX);
     1672     5133    3                 KEY$=PINCRW(FKA_INDEX_BUF$, SEGX);
     1673     5134    3                 END;                      /* UNTIL                              */
     1674     5135
     1675     5136    2              IF F$DCB.ORG# = %IREL# THEN
     1676     5137    2                 SEGX=SEGX+(FM$IRENT.KLB+5)/4;
     1677     5138    2              ELSE
     1678     5139    2                 SEGX=SEGX+(FM$KEYENT.KLB+4)/4;
     1679     5140
     1680     5141    2              SEG$=PINCRW(FKA_INDEX_BUF$, SEGX);
     1681     5142    2              FM_MISEG=FM$MISEG;
     1682     5143    2              FM$MISEG.FAK='1'B;
     1683     5144
     1684     5145    2              RETURN;
     1685     5146    2   EOF:       ALTRETURN;
     1686     5147    2      END NXTKEY;
     1687     5148         %EJECT;
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:299  
     1688     5149        /*I*     NAME:     NXTSEG
     1689     5150                 PURPOSE:  To position to the next segment
     1690     5151                 DESCRIPTION:
     1691     5152
     1692     5153                      Figure out where the end of the granule is.
     1693     5154                 Increment the segment index by two.  If we fell
     1694     5155                 off the end of the granule, then read the next
     1695     5156                 granule.
     1696     5157
     1697     5158                      Now find the last segment in the current key.
     1698     5159                 If we went beyond that, then there are no more
     1699     5160                 segments, so get the next key.
     1700     5161        */
     1701     5162         %EJECT;
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:300  
     1702     5163    1   NXTSEG:    PROC ALTRET;
     1703     5164        /* */
     1704     5165    2              ENDGRAN=FM$GRAN.NAVX;
     1705     5166
     1706     5167    2              SEGX=SEGX+2;
     1707     5168    2              SEGCNT=SEGCNT+1;
     1708     5169
     1709     5170    3              DO WHILE (SEGX >= ENDGRAN);
     1710     5171    3                 CALL FLINK ALTRET(EOF);
     1711     5172    3                 CRECX=0;
     1712     5173    3                 SEGX=FM$GRAN.FCEX+SIZEW(FM$KEYTBL);
     1713     5174    3                 ENDGRAN=FM$GRAN.NAVX;
     1714     5175    3                 END;                      /* WHILE                              */
     1715     5176
     1716     5177    2              IF CRECX < FM$GRAN.KEYCNT THEN
     1717     5178    3              DO;                          /* LAST SEG IN KEY                    */
     1718     5179    3                 IF CRECX+1 < FKA_BOUND THEN
     1719     5180    3                    LASTSEG=FM$KEYTBL(CRECX+1);
     1720     5181    3                 ELSE
     1721     5182    3                    LASTSEG=FM$KEYTBL(CRECX+1)+512;
     1722     5183    3                 END;                      /* LAST SEG IN KEY                    */
     1723     5184    2              ELSE
     1724     5185    2                 LASTSEG=ENDGRAN;
     1725     5186
     1726     5187    2              IF SEGX >= LASTSEG THEN
     1727     5188    3              DO;                          /* NO MORE                            */
     1728     5189    3                 CALL NXTKEY ALTRET(EOF);
     1729     5190    3                 END;                      /* NO MORE                            */
     1730     5191
     1731     5192    2              SEG$=PINCRW(FKA_INDEX_BUF$, SEGX);
     1732     5193
     1733     5194    2              RETURN;
     1734     5195    2   EOF:       ALTRETURN;
     1735     5196    2      END NXTSEG;
     1736     5197    1   END FKA$INPUT;
     1737     5198         %EOD;

PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:301  
--  Include file information  --

   B$OBJECT_C.:E05TOU  is referenced.
   FM_FIELD_C.:E05TOU  is referenced.
   FKA_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   FK_DATA_C.:E05TOU  is referenced.
   FM$FIT.:E05TOU  is referenced.
   FM$GRAN.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure FKA$INPUT.

   Procedure FKA$INPUT requires 613 words for executable code.
   Procedure FKA$INPUT requires 30 words of local(AUTO) storage.

PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:302  

 Object Unit name= FKA$INPUT                                  File name= FKA$ALTKEY.:E05TOU
 UTS= JUL 29 '97 15:32:47.36 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  RoData even  UTS     28     34  FKA$INPUT
    2   DCB   even  none     0      0  M$SI
    3   Data  even  none     7      7  FKA$INPUT
    4   Proc  even  none   613   1145  FKA$INPUT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     4      0   yes    yes     yes      Std        2  FKA$INPUT

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       0 FKA$ABORT
                       nStd      0 X66_AUTO_2
                       nStd      0 X66_ARET
                       nStd      0 X66_AALT
                       Std       0 B_CONSPOOL_D
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:303  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  FKA_ALTKEYS$                          FKA_RECFIELD$
r    FKA_START$                       r    FKA_IRKEYS$                      r    FKA_KFIELD$
     FKA_INDEX_GRAN                        FKA_DATA_GRAN                         FKA_KTPTR$
     FKA_BOUND                             FKA_DCB$                              FKA_NUMKEYS
     FKA_RECSIZE                           FKA_KEYSIZE                           FKA_INDEX_BUF
r    FKA_INDEX_BUF$                        FKA_DATA_BUF                     r    FKA_DATA_BUF$
     M$SI                                  FM_FRZERO                             B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:304  


     1305        1        /*T***********************************************************/
     1306        2        /*T*                                                         */
     1307        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1308        4        /*T*                                                         */
     1309        5        /*T***********************************************************/
     1310        6        /*F*     NAME:     FKA$INPUT
     1311        7                 PURPOSE:  To build a record, and pass it to SORT
     1312        8        */
     1313        9        /*D*     NAME:     FKA$INPUT
     1314       10                 INPUT:    None
     1315       11                 OUTPUT:   SORT_REC - record to pass to SORT
     1316       12                           RECSIZE - size of SORT_REC
     1317       13                 DESCRIPTION:
     1318       14
     1319       15                      Because SORT_REC has such an odd format, it is
     1320       16                 not possible to build a single structure to access it.
     1321       17                 It is a series of based variables strung together.
     1322       18                 The record looks something like:
     1323       19
     1324       20                 +---------+---------------------------+
     1325       21                 | index   | key                       |
     1326       22                 +---------+
     1327       23                               .
     1328       24                               .
     1329       25                 +------------------------------------+
     1330       26                 |       ID                           |
     1331       27                 +------------------------------------+
     1332       28                 |   seg count      |                 |
     1333       29                 +------------------+                 |
     1334       30                 |           miseg  +-----------------+
     1335       31                 |                  |
     1336       32                 +------------------+
     1337       33
     1338       34                 index - one byte, the index number of this key
     1339       35                 key - variable size, in bytes
     1340       36                 ID - 4 bytes, record ID
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:305  
     1341       37                 seg count - 2 bytes, identifies a specific segment in a list
     1342       38                             of segments for a record
     1343       39                 miseg - two words, actual segment for this record, or record
     1344       40                         fragment
     1345       41
     1346       42                      NXTINDX will build the proper record.  Set the record
     1347       43                 size, then return.
     1348       44        */
     1349       45         %EJECT;
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:306  
     1350       46        FKA$INPUT: PROC(SORT_REC, RECSIZE) ALTRET;

     46  4 000000   000000 700200 xent  FKA$INPUT    TSX0  ! X66_AUTO_2
         4 000001   000036 000002                    ZERO    30,2

     1351       47        /* */
     1352       48         %INCLUDE CP_6;
     1353      129         %INCLUDE CP_6_SUBS;
     1354      669         %INCLUDE FM$GRAN;
     1355      738         %INCLUDE FM$FIT;
     1356      959         %INCLUDE FK_DATA_C;
     1357     1036         %INCLUDE FKA_DATA_R;
     1358     1052         %INCLUDE FM_FIELD_C;
     1359     1093         %INCLUDE B$OBJECT_C;
     1360     4523        /* */
     1361     4524    1     DCL SORT_REC CHAR(FKA_RECSIZE);
     1362     4525    1     DCL 1 SORT_REC_BIT REDEF SORT_REC,
     1363     4526    1            2 * CHAR(FKA_RECSIZE);
     1364     4527    1     DCL RECSIZE UBIN;
     1365     4528        /* */
     1366     4529         %FPT_READ(FPTN=READ_DATA, BUF=FKA_DATA_BUF, KEY=FKA_DATA_GRAN,
     1367     4530         DCB=M$SI, KEYS=YES, STCLASS=CONSTANT);
     1368     4569         %FPT_READ(FPTN=READ_INDEX, BUF=FKA_INDEX_BUF, KEY=FKA_INDEX_GRAN,
     1369     4570         KEYS=YES, DCB=M$SI, STCLASS=CONSTANT);
     1370     4609         %F$DCB(DCBN=F$DCB, STCLASS="BASED(FKA_DCB$)");
     1371     4666        /* */
     1372     4667    1     DCL M$SI DCB;
     1373     4668        /* */
     1374     4669    1     DCL SEGX SBIN STATIC INIT(0);
     1375     4670    1     DCL SEG$ PTR STATIC;
     1376     4671    1     DCL SEGCNT SBIN STATIC INIT(0);
     1377     4672    1     DCL CRECX SBIN STATIC INIT(0);
     1378     4673    1     DCL INDEX# SBIN STATIC INIT(0);
     1379     4674    1     DCL KEY$ PTR;
     1380     4675    1     DCL ENDGRAN SBIN;
     1381     4676    1     DCL LASTSEG SBIN;
     1382     4677    1     DCL SIZE SBIN;
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:307  
     1383     4678    1     DCL CHARS CHAR(SIZE) BASED;
     1384     4679    1     DCL G$ PTR;
     1385     4680    1     DCL IRKEY$ PTR;
     1386     4681    1     DCL I SBIN;
     1387     4682    1     DCL ODD SBIN;
     1388     4683    1     DCL FN SBIN;
     1389     4684    1     DCL REC$ PTR;
     1390     4685    1     DCL F$ PTR;
     1391     4686    1     DCL LEN SBIN;
     1392     4687    1     DCL 1 BYT(0:0) CALIGNED BASED,
     1393     4688    1            2 * BIT(1) UNAL,
     1394     4689    1            2 UPPER UBIN(4) UNAL,
     1395     4690    1            2 LOWER UBIN(4) UNAL;
     1396     4691        /* */
     1397     4692    1     DCL FM_FRZERO UBIN SYMREF;
     1398     4693        /* */
     1399     4694    1     DCL SORT_REC$ PTR;
     1400     4695    1     DCL SORT_INDX UBIN(9) CALIGNED BASED(SORT_REC$);
     1401     4696    1     DCL 1 SORT_ID CALIGNED BASED(SORT_REC$),
     1402     4697    1            2 DA UBIN(26) UNAL,
     1403     4698    1            2 GX UBIN(10) UNAL;
     1404     4699    1     DCL SORT_SEGCNT UBIN(18) CALIGNED BASED(SORT_REC$);
     1405     4700    1     DCL SORT_MISEG BIT(72) CALIGNED BASED(SORT_REC$);
     1406     4701        /* */
     1407     4702         %FM$GRAN(BASED="BASED(FKA_INDEX_BUF$)");
     1408     4706         %FM$KEYTBL(BASED="BASED(FKA_KTPTR$)");
     1409     4709         %FM$MISEG(BASED="BASED(SEG$)");
     1410     4713         %FM$MISEG(BASED="STATIC", FM$MISEG=FM_MISEG);
     1411     4717         %VLP_RECFIELD(FPTN=RECFIELD, STCLASS="BASED(FKA_RECFIELD$)");
     1412     4761         %FM$FIELD_START(FPTN=FIELD_START, STCLASS="BASED(FKA_START$)");
     1413     4783         %FITALTKEYS(BASED="BASED(FKA_ALTKEYS$)");
     1414     4789         %FMG$IRKEYS(FPTN=IRKEYS, STCLASS="BASED(FKA_IRKEYS$)");
     1415     4796         %FMG$KFIELD(FPTN=KFIELD, STCLASS="BASED(FKA_KFIELD$)");
     1416     4799         %FM$KEYENT(BASED="BASED(KEY$)");
     1417     4802         %FM$IRENT(BASED="BASED(KEY$)");
     1418     4805         %VREBL_DATATYPES;
     1419     4880        /* */
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:308  
     1420     4881    1     DCL FKA$ABORT ENTRY;
     1421     4882        /* */
     1422     4883    1           CALL NXTINDX ALTRET(EOF);

   4883  4 000002   000652 701000 4                  TSX1    NXTINDX
         4 000003   000010 702000 4                  TSX2    EOF

     1423     4884    1           RECSIZE=FKA_RECSIZE;

   4884  4 000004   000000 235000 xsym               LDA     FKA_RECSIZE
         4 000005   200004 470500                    LDP0    @RECSIZE,,AUTO
         4 000006   000000 755100                    STA     0,,PR0

     1424     4885
     1425     4886    1           RETURN;

   4886  4 000007   000000 702200 xent               TSX2  ! X66_ARET

     1426     4887    1   EOF:    ALTRETURN;

   4887  4 000010   000000 702200 xent  EOF          TSX2  ! X66_AALT

     1427     4888         %EJECT;
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:309  
     1428     4889        /*I*     NAME:     BUILD_IREL
     1429     4890                 PURPOSE:  To build an IREL key
     1430     4891                 DESCRIPTION:
     1431     4892
     1432     4893                      Set up a pointer to the current position in the
     1433     4894                 output record.  Set up a pointer to the record.
     1434     4895
     1435     4896                      Now loop through the key definition.  Move the field
     1436     4897                 from the record to the key.
     1437     4898
     1438     4899                      Finally, increment the output record pointer to
     1439     4900                 the end of the key.
     1440     4901        */
     1441     4902         %EJECT;
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:310  
     1442     4903    1   BUILD_IREL: PROC;

   4903  4 000011   200026 741300       BUILD_IREL   STX1  ! SORT_REC$+5,,AUTO

     1443     4904    2     DCL CHRS CHAR(LEN) BASED;
     1444     4905        /* */
     1445     4906    2              IRKEY$=SORT_REC$;

   4906  4 000012   200021 236100                    LDQ     SORT_REC$,,AUTO
         4 000013   200012 756100                    STQ     IRKEY$,,AUTO

     1446     4907    2              REC$=PINCRW(FKA_DATA_BUF$, FM_MISEG.GX);

   4907  4 000014   000005 236000 3                  LDQ     FM_MISEG
         4 000015   000014 772000                    QRL     12
         4 000016   001777 376007                    ANQ     1023,DL
         4 000017   000022 736000                    QLS     18
         4 000020   000000 036000 xsym               ADLQ    FKA_DATA_BUF$
         4 000021   200016 756100                    STQ     REC$,,AUTO

     1447     4908
     1448     4909    3              DO I=0 TO IRKEYS.K.NFIELDS(INDEX#)-1;

   4909  4 000022   200013 450100                    STZ     I,,AUTO
         4 000023   000333 710000 4                  TRA     s:4940+1

     1449     4910    3                 FN=KFIELD.FIELD(I+IRKEYS.K.FIRSTFIELD(INDEX#));

   4910  4 000024   000004 236000 3                  LDQ     INDEX#
         4 000025   000007 402007                    MPY     7,DL
         4 000026   000000 470400 xsym               LDP0    FKA_IRKEYS$
         4 000027   000004 236106                    LDQ     4,QL,PR0
         4 000030   000022 772000                    QRL     18
         4 000031   200013 036100                    ADLQ    I,,AUTO
         4 000032   000000 471400 xsym               LDP1    FKA_KFIELD$
         4 000033   000100 101506                    MRL     fill='000'O
         4 000034   100002 000001                    ADSC9   2,Q,PR1                  cn=0,n=1
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:311  
         4 000035   200015 000004                    ADSC9   FN,,AUTO                 cn=0,n=4

     1450     4911
     1451     4912    4                 DO CASE(RECFIELD.FIELD.TYPE#(FN));

   4912  4 000036   200015 236100                    LDQ     FN,,AUTO
         4 000037   000003 402007                    MPY     3,DL
         4 000040   000000 116003                    CMPQ    0,DU
         4 000041   000043 605000 4                  TPL     s:4912+5
         4 000042   000006 036003                    ADLQ    6,DU
         4 000043   000000 473400 xsym               LDP3    FKA_RECFIELD$
         4 000044   000100 101506                    MRL     fill='000'O
         4 000045   300001 020001                    ADSC6   1,Q,PR3                  cn=0,n=1
         4 000046   200034 020003                    ADSC6   I+2,,AUTO                cn=0,n=3
         4 000047   200034 220100                    LDX0    I+2,,AUTO
         4 000050   000072 100003                    CMPX0   58,DU
         4 000051   000053 602010 4                  TNC     s:4912+13,X0
         4 000052   000172 710000 4                  TRA     s:4924
         4 000053   000172 710000 4                  TRA     s:4924
         4 000054   000156 710000 4                  TRA     s:4921
         4 000055   000172 710000 4                  TRA     s:4924
         4 000056   000172 710000 4                  TRA     s:4924
         4 000057   000172 710000 4                  TRA     s:4924
         4 000060   000172 710000 4                  TRA     s:4924
         4 000061   000172 710000 4                  TRA     s:4924
         4 000062   000172 710000 4                  TRA     s:4924
         4 000063   000172 710000 4                  TRA     s:4924
         4 000064   000145 710000 4                  TRA     s:4918
         4 000065   000145 710000 4                  TRA     s:4918
         4 000066   000172 710000 4                  TRA     s:4924
         4 000067   000172 710000 4                  TRA     s:4924
         4 000070   000172 710000 4                  TRA     s:4924
         4 000071   000172 710000 4                  TRA     s:4924
         4 000072   000172 710000 4                  TRA     s:4924
         4 000073   000172 710000 4                  TRA     s:4924
         4 000074   000172 710000 4                  TRA     s:4924
         4 000075   000172 710000 4                  TRA     s:4924
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:312  
         4 000076   000172 710000 4                  TRA     s:4924
         4 000077   000172 710000 4                  TRA     s:4924
         4 000100   000172 710000 4                  TRA     s:4924
         4 000101   000172 710000 4                  TRA     s:4924
         4 000102   000172 710000 4                  TRA     s:4924
         4 000103   000156 710000 4                  TRA     s:4921
         4 000104   000145 710000 4                  TRA     s:4918
         4 000105   000172 710000 4                  TRA     s:4924
         4 000106   000172 710000 4                  TRA     s:4924
         4 000107   000172 710000 4                  TRA     s:4924
         4 000110   000172 710000 4                  TRA     s:4924
         4 000111   000172 710000 4                  TRA     s:4924
         4 000112   000145 710000 4                  TRA     s:4918
         4 000113   000172 710000 4                  TRA     s:4924
         4 000114   000172 710000 4                  TRA     s:4924
         4 000115   000172 710000 4                  TRA     s:4924
         4 000116   000172 710000 4                  TRA     s:4924
         4 000117   000172 710000 4                  TRA     s:4924
         4 000120   000172 710000 4                  TRA     s:4924
         4 000121   000172 710000 4                  TRA     s:4924
         4 000122   000172 710000 4                  TRA     s:4924
         4 000123   000145 710000 4                  TRA     s:4918
         4 000124   000145 710000 4                  TRA     s:4918
         4 000125   000145 710000 4                  TRA     s:4918
         4 000126   000145 710000 4                  TRA     s:4918
         4 000127   000145 710000 4                  TRA     s:4918
         4 000130   000145 710000 4                  TRA     s:4918
         4 000131   000172 710000 4                  TRA     s:4924
         4 000132   000172 710000 4                  TRA     s:4924
         4 000133   000172 710000 4                  TRA     s:4924
         4 000134   000172 710000 4                  TRA     s:4924
         4 000135   000145 710000 4                  TRA     s:4918
         4 000136   000145 710000 4                  TRA     s:4918
         4 000137   000172 710000 4                  TRA     s:4924
         4 000140   000172 710000 4                  TRA     s:4924
         4 000141   000145 710000 4                  TRA     s:4918
         4 000142   000156 710000 4                  TRA     s:4921
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:313  
         4 000143   000172 710000 4                  TRA     s:4924
         4 000144   000145 710000 4                  TRA     s:4918

     1452     4913    4                    CASE(%UDLS_DATATYPE, %UDTS_DATATYPE, %UDNS_DATATYPE,

     1453     4914    4                     %UDLO_DATATYPE, %UDTO_DATATYPE, %UDFLT_DATATYPE,
     1454     4915    4                     %PDLA_DATATYPE, %PDTA_DATATYPE, %PDNS_DATATYPE,
     1455     4916    4                     %PDTE_DATATYPE, %PDLE_DATATYPE, %PDFLT_DATATYPE,
     1456     4917    4                     %DATE_DATATYPE, %TIME_DATATYPE);
     1457     4918    4                       LEN=RECFIELD.DECFIELD.LEN#(FN);

   4918  4 000145   200015 236100                    LDQ     FN,,AUTO
         4 000146   000003 402007                    MPY     3,DL
         4 000147   000000 116003                    CMPQ    0,DU
         4 000150   000152 605000 4                  TPL     s:4918+5
         4 000151   000006 036003                    ADLQ    6,DU
         4 000152   000100 101506                    MRL     fill='000'O
         4 000153   300001 120001                    ADSC6   1,Q,PR3                  cn=1,n=1
         4 000154   200020 020006                    ADSC6   LEN,,AUTO                cn=0,n=6
         4 000155   000202 710000 4                  TRA     s:4928

     1458     4919
     1459     4920    4                    CASE(%SBIN_DATATYPE, %UBIN_DATATYPE, %UTS_DATATYPE);

     1460     4921    4                       LEN=RECFIELD.FIELD.LEN#(FN)/9;

   4921  4 000156   200015 236100                    LDQ     FN,,AUTO
         4 000157   000003 402007                    MPY     3,DL
         4 000160   000000 116003                    CMPQ    0,DU
         4 000161   000163 605000 4                  TPL     s:4921+5
         4 000162   000006 036003                    ADLQ    6,DU
         4 000163   000100 101506                    MRL     fill='000'O
         4 000164   300001 120002                    ADSC6   1,Q,PR3                  cn=1,n=2
         4 000165   200034 020006                    ADSC6   I+2,,AUTO                cn=0,n=6
         4 000166   200034 236100                    LDQ     I+2,,AUTO
         4 000167   000011 506007                    DIV     9,DL
         4 000170   200020 756100                    STQ     LEN,,AUTO
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:314  
         4 000171   000202 710000 4                  TRA     s:4928

     1461     4922
     1462     4923    4                    CASE(ELSE);

     1463     4924    4                       LEN=RECFIELD.FIELD.LEN#(FN);

   4924  4 000172   200015 236100                    LDQ     FN,,AUTO
         4 000173   000003 402007                    MPY     3,DL
         4 000174   000000 116003                    CMPQ    0,DU
         4 000175   000177 605000 4                  TPL     s:4924+5
         4 000176   000006 036003                    ADLQ    6,DU
         4 000177   000100 101506                    MRL     fill='000'O
         4 000200   300001 120002                    ADSC6   1,Q,PR3                  cn=1,n=2
         4 000201   200020 020006                    ADSC6   LEN,,AUTO                cn=0,n=6

     1464     4925
     1465     4926    4                    END;                   /* Case                               */

     1466     4927
     1467     4928    4                 DO CASE(RECFIELD.FIELD.TYPE#(FN));

   4928  4 000202   200015 236100                    LDQ     FN,,AUTO
         4 000203   000003 402007                    MPY     3,DL
         4 000204   000000 116003                    CMPQ    0,DU
         4 000205   000207 605000 4                  TPL     s:4928+5
         4 000206   000006 036003                    ADLQ    6,DU
         4 000207   000100 101506                    MRL     fill='000'O
         4 000210   300001 020001                    ADSC6   1,Q,PR3                  cn=0,n=1
         4 000211   200034 020006                    ADSC6   I+2,,AUTO                cn=0,n=6
         4 000212   200034 236100                    LDQ     I+2,,AUTO
         4 000213   000011 136007                    SBLQ    9,DL
         4 000214   000061 116007                    CMPQ    49,DL
         4 000215   000217 602006 4                  TNC     s:4928+13,QL
         4 000216   000311 710000 4                  TRA     s:4936
         4 000217   000300 710000 4                  TRA     s:4932
         4 000220   000300 710000 4                  TRA     s:4932
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:315  
         4 000221   000311 710000 4                  TRA     s:4936
         4 000222   000311 710000 4                  TRA     s:4936
         4 000223   000311 710000 4                  TRA     s:4936
         4 000224   000311 710000 4                  TRA     s:4936
         4 000225   000311 710000 4                  TRA     s:4936
         4 000226   000311 710000 4                  TRA     s:4936
         4 000227   000311 710000 4                  TRA     s:4936
         4 000230   000311 710000 4                  TRA     s:4936
         4 000231   000311 710000 4                  TRA     s:4936
         4 000232   000311 710000 4                  TRA     s:4936
         4 000233   000311 710000 4                  TRA     s:4936
         4 000234   000311 710000 4                  TRA     s:4936
         4 000235   000311 710000 4                  TRA     s:4936
         4 000236   000311 710000 4                  TRA     s:4936
         4 000237   000300 710000 4                  TRA     s:4932
         4 000240   000311 710000 4                  TRA     s:4936
         4 000241   000311 710000 4                  TRA     s:4936
         4 000242   000311 710000 4                  TRA     s:4936
         4 000243   000311 710000 4                  TRA     s:4936
         4 000244   000311 710000 4                  TRA     s:4936
         4 000245   000300 710000 4                  TRA     s:4932
         4 000246   000311 710000 4                  TRA     s:4936
         4 000247   000311 710000 4                  TRA     s:4936
         4 000250   000311 710000 4                  TRA     s:4936
         4 000251   000311 710000 4                  TRA     s:4936
         4 000252   000311 710000 4                  TRA     s:4936
         4 000253   000311 710000 4                  TRA     s:4936
         4 000254   000311 710000 4                  TRA     s:4936
         4 000255   000311 710000 4                  TRA     s:4936
         4 000256   000300 710000 4                  TRA     s:4932
         4 000257   000311 710000 4                  TRA     s:4936
         4 000260   000311 710000 4                  TRA     s:4936
         4 000261   000311 710000 4                  TRA     s:4936
         4 000262   000311 710000 4                  TRA     s:4936
         4 000263   000311 710000 4                  TRA     s:4936
         4 000264   000311 710000 4                  TRA     s:4936
         4 000265   000311 710000 4                  TRA     s:4936
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:316  
         4 000266   000311 710000 4                  TRA     s:4936
         4 000267   000311 710000 4                  TRA     s:4936
         4 000270   000311 710000 4                  TRA     s:4936
         4 000271   000300 710000 4                  TRA     s:4932
         4 000272   000311 710000 4                  TRA     s:4936
         4 000273   000311 710000 4                  TRA     s:4936
         4 000274   000300 710000 4                  TRA     s:4932
         4 000275   000311 710000 4                  TRA     s:4936
         4 000276   000311 710000 4                  TRA     s:4936
         4 000277   000300 710000 4                  TRA     s:4932

     1468     4929    4                    CASE(%PDLA_DATATYPE, %PDTA_DATATYPE, %PDNS_DATATYPE,

     1469     4930    4                     %PDFLT_DATATYPE, %PDLE_DATATYPE, %PDTE_DATATYPE,
     1470     4931    4                     %DATE_DATATYPE, %TIME_DATATYPE);
     1471     4932    4                       CALL BUILD_NIBFIELD;

   4932  4 000300   000350 701000 4                  TSX1    BUILD_NIBFIELD
         4 000301   000000 011000                    NOP     0

     1472     4933    4                       IRKEY$=PINCRC(IRKEY$, (LEN+1)/2);

   4933  4 000302   200020 236100                    LDQ     LEN,,AUTO
         4 000303   000001 036007                    ADLQ    1,DL
         4 000304   000002 506007                    DIV     2,DL
         4 000305   000020 736000                    QLS     16
         4 000306   200012 036100                    ADLQ    IRKEY$,,AUTO
         4 000307   200012 756100                    STQ     IRKEY$,,AUTO
         4 000310   000332 710000 4                  TRA     s:4940

     1473     4934
     1474     4935    4                    CASE(ELSE);

     1475     4936    4                       F$=PINCRC(REC$, FIELD_START.OFFSET(FN)/9);

   4936  4 000311   000000 474400 xsym               LDP4    FKA_START$
         4 000312   200015 720100                    LXL0    FN,,AUTO
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:317  
         4 000313   400001 236110                    LDQ     1,X0,PR4
         4 000314   000011 506007                    DIV     9,DL
         4 000315   000020 736000                    QLS     16
         4 000316   200016 036100                    ADLQ    REC$,,AUTO
         4 000317   200017 756100                    STQ     F$,,AUTO

     1476     4937    4                       IRKEY$->CHRS=F$->CHRS;

   4937  4 000320   200017 475500                    LDP5    F$,,AUTO
         4 000321   200020 721100                    LXL1    LEN,,AUTO
         4 000322   200012 476500                    LDP6    IRKEY$,,AUTO
         4 000323   040140 100540                    MLR     fill='040'O
         4 000324   500000 000011                    ADSC9   0,,PR5                   cn=0,n=*X1
         4 000325   600000 000011                    ADSC9   0,,PR6                   cn=0,n=*X1

     1477     4938    4                       IRKEY$=PINCRC(IRKEY$, LEN);

   4938  4 000326   200020 236100                    LDQ     LEN,,AUTO
         4 000327   000020 736000                    QLS     16
         4 000330   200012 036100                    ADLQ    IRKEY$,,AUTO
         4 000331   200012 756100                    STQ     IRKEY$,,AUTO

     1478     4939    4                    END;                   /* CASE                               */

     1479     4940    3                 END;                      /* DO I                               */

   4940  4 000332   200013 054100                    AOS     I,,AUTO
         4 000333   000004 236000 3                  LDQ     INDEX#
         4 000334   000007 402007                    MPY     7,DL
         4 000335   000000 470400 xsym               LDP0    FKA_IRKEYS$
         4 000336   000004 236106                    LDQ     4,QL,PR0
         4 000337   777777 376007                    ANQ     -1,DL
         4 000340   200013 116100                    CMPQ    I,,AUTO
         4 000341   000024 605400 4                  TPNZ    s:4910

     1480     4941    2              SORT_REC$=PINCRC(SORT_REC$, FKA_KEYSIZE);

PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:318  
   4941  4 000342   000000 236000 xsym               LDQ     FKA_KEYSIZE
         4 000343   000020 736000                    QLS     16
         4 000344   200021 036100                    ADLQ    SORT_REC$,,AUTO
         4 000345   200021 756100                    STQ     SORT_REC$,,AUTO

     1481     4942
     1482     4943    2              RETURN;

   4943  4 000346   200026 221300                    LDX1  ! SORT_REC$+5,,AUTO
         4 000347   000001 702211                    TSX2  ! 1,X1

     1483     4944    2      END BUILD_IREL;
     1484     4945         %EJECT;
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:319  
     1485     4946        /*I*     NAME:     BUILD_NIBFIELD
     1486     4947                 PURPOSE:  To build a nibble field
     1487     4948                 DESCRIPTION:
     1488     4949
     1489     4950                      This moves data, one nibble at a time, from the
     1490     4951                 record to the key.  ODD indicates whether the nibble
     1491     4952                 field in the record is on an odd or even nibble boundary.
     1492     4953        */
     1493     4954         %EJECT;
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:320  
     1494     4955    1   BUILD_NIBFIELD: PROC;

   4955  4 000350   200030 741300       BUILD_NIBFI* STX1  ! SORT_REC$+7,,AUTO

     1495     4956    2     DCL TEMP UBIN(4);
     1496     4957    2     DCL I UBIN;
     1497     4958        /* */
     1498     4959    2              F$=PINCRC(REC$, FIELD_START.OFFSET(FN)/9);

   4959  4 000351   000000 470400 xsym               LDP0    FKA_START$
         4 000352   200015 720100                    LXL0    FN,,AUTO
         4 000353   000001 236110                    LDQ     1,X0,PR0
         4 000354   000011 506007                    DIV     9,DL
         4 000355   000020 736000                    QLS     16
         4 000356   200016 036100                    ADLQ    REC$,,AUTO
         4 000357   200017 756100                    STQ     F$,,AUTO

     1499     4960    2              ODD=MOD(FIELD_START.OFFSET(FN), 9);

   4960  4 000360   000001 236110                    LDQ     1,X0,PR0
         4 000361   000011 506007                    DIV     9,DL
         4 000362   200014 755100                    STA     ODD,,AUTO

     1500     4961    2              IF ODD > 0 THEN

   4961  4 000363   000000 115003                    CMPA    0,DU
         4 000364   000367 604400 4                  TMOZ    s:4964

     1501     4962    2                 ODD=1;

   4962  4 000365   000001 236007                    LDQ     1,DL
         4 000366   200014 756100                    STQ     ODD,,AUTO

     1502     4963
     1503     4964    3              DO I=0 TO LEN-1;

   4964  4 000367   200032 450100                    STZ     I,,AUTO
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:321  
         4 000370   000454 710000 4                  TRA     s:4974+3

     1504     4965    3                 IF MOD(I+ODD, 2) = 1 THEN

   4965  4 000371   200032 236100                    LDQ     I,,AUTO
         4 000372   200014 036100                    ADLQ    ODD,,AUTO
         4 000373   000002 506007                    DIV     2,DL
         4 000374   000044 733000                    LRS     36
         4 000375   000001 116007                    CMPQ    1,DL
         4 000376   000413 601000 4                  TNZ     s:4968

     1505     4966    3                    TEMP=F$->BYT.LOWER((I+ODD)/2);

   4966  4 000377   200032 236100                    LDQ     I,,AUTO
         4 000400   200014 036100                    ADLQ    ODD,,AUTO
         4 000401   000002 506007                    DIV     2,DL
         4 000402   000011 402007                    MPY     9,DL
         4 000403   000000 116003                    CMPQ    0,DU
         4 000404   000406 605000 4                  TPL     s:4966+7
         4 000405   000044 036003                    ADLQ    36,DU
         4 000406   200017 470500                    LDP0    F$,,AUTO
         4 000407   003100 060506                    CSL     bolr='003'O
         4 000410   000000 050004                    BDSC    0,Q,PR0                  by=0,bit=5,n=4
         4 000411   200031 000004                    BDSC    TEMP,,AUTO               by=0,bit=0,n=4
         4 000412   000426 710000 4                  TRA     s:4970

     1506     4967    3                 ELSE
     1507     4968    3                    TEMP=F$->BYT.UPPER((I+ODD)/2);

   4968  4 000413   200032 236100                    LDQ     I,,AUTO
         4 000414   200014 036100                    ADLQ    ODD,,AUTO
         4 000415   000002 506007                    DIV     2,DL
         4 000416   000011 402007                    MPY     9,DL
         4 000417   000000 116003                    CMPQ    0,DU
         4 000420   000422 605000 4                  TPL     s:4968+7
         4 000421   000044 036003                    ADLQ    36,DU
         4 000422   200017 470500                    LDP0    F$,,AUTO
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:322  
         4 000423   003100 060506                    CSL     bolr='003'O
         4 000424   000000 010004                    BDSC    0,Q,PR0                  by=0,bit=1,n=4
         4 000425   200031 000004                    BDSC    TEMP,,AUTO               by=0,bit=0,n=4

     1508     4969
     1509     4970    3                 IF MOD(I,2) = 1 THEN

   4970  4 000426   200032 236100                    LDQ     I,,AUTO
         4 000427   000001 376007                    ANQ     1,DL
         4 000430   000001 116007                    CMPQ    1,DL
         4 000431   000442 601000 4                  TNZ     s:4973

     1510     4971    3                    IRKEY$->BYT.LOWER(I/2)=TEMP;

   4971  4 000432   200032 236100                    LDQ     I,,AUTO
         4 000433   000001 772000                    QRL     1
         4 000434   000011 402007                    MPY     9,DL
         4 000435   200012 471500                    LDP1    IRKEY$,,AUTO
         4 000436   003106 060500                    CSL     bolr='003'O
         4 000437   200031 000004                    BDSC    TEMP,,AUTO               by=0,bit=0,n=4
         4 000440   100000 050004                    BDSC    0,Q,PR1                  by=0,bit=5,n=4
         4 000441   000451 710000 4                  TRA     s:4974

     1511     4972    3                 ELSE
     1512     4973    3                    IRKEY$->BYT.UPPER(I/2)=TEMP;

   4973  4 000442   200032 236100                    LDQ     I,,AUTO
         4 000443   000001 772000                    QRL     1
         4 000444   000011 402007                    MPY     9,DL
         4 000445   200012 471500                    LDP1    IRKEY$,,AUTO
         4 000446   003106 060500                    CSL     bolr='003'O
         4 000447   200031 000004                    BDSC    TEMP,,AUTO               by=0,bit=0,n=4
         4 000450   100000 010004                    BDSC    0,Q,PR1                  by=0,bit=1,n=4

     1513     4974    3                 END;                      /* DO I                               */

   4974  4 000451   200032 235100                    LDA     I,,AUTO
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:323  
         4 000452   000001 035007                    ADLA    1,DL
         4 000453   200032 755100                    STA     I,,AUTO
         4 000454   200032 236100                    LDQ     I,,AUTO
         4 000455   000460 604000 4                  TMI     s:4976
         4 000456   200020 116100                    CMPQ    LEN,,AUTO
         4 000457   000371 604000 4                  TMI     s:4965

     1514     4975
     1515     4976    2              RETURN;

   4976  4 000460   200030 221300                    LDX1  ! SORT_REC$+7,,AUTO
         4 000461   000001 702211                    TSX2  ! 1,X1

     1516     4977    2      END BUILD_NIBFIELD;
     1517     4978         %EJECT;
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:324  
     1518     4979        /*I*     NAME:     BUILD_REC
     1519     4980                 PURPOSE:  To build a record to hand to SORT
     1520     4981                 DESCRIPTION:
     1521     4982
     1522     4983                      First, get the data granule that the record is
     1523     4984                 on.  We need it to build the key.
     1524     4985
     1525     4986                      Zero out the output record.  Set the index to
     1526     4987                 the current index that we are processing, and increment
     1527     4988                 the pointer to point to the key portion.
     1528     4989
     1529     4990                      If this is an indexed file, then just move the
     1530     4991                 character information from the record to the key.
     1531     4992                 Otherwise, if this is an IREL file, we call a subroutine
     1532     4993                 to build the key.
     1533     4994
     1534     4995                      Now store the remaining information, the ID,
     1535     4996                 SEGCNT, and MISEG.
     1536     4997        */
     1537     4998         %EJECT;
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:325  
     1538     4999    1   BUILD_REC: PROC;

   4999  4 000462   200024 741300       BUILD_REC    STX1  ! SORT_REC$+3,,AUTO

     1539     5000        /* */
     1540     5001    2              IF FM_MISEG.GDA-FM_FRZERO ~= FKA_DATA_GRAN THEN

   5001  4 000463   000006 236000 3                  LDQ     FM_MISEG+1
         4 000464   000032 376000 xsym               ANQ     B_VECTNIL+26
         4 000465   000000 136000 xsym               SBLQ    FM_FRZERO
         4 000466   000000 116000 xsym               CMPQ    FKA_DATA_GRAN
         4 000467   000500 600000 4                  TZE     s:5007

     1541     5002    3              DO;                          /* READ DATA GRANULE                  */

     1542     5003    3                 FKA_DATA_GRAN=FM_MISEG.GDA-FM_FRZERO;

   5003  4 000470   000006 236000 3                  LDQ     FM_MISEG+1
         4 000471   000032 376000 xsym               ANQ     B_VECTNIL+26
         4 000472   000000 136000 xsym               SBLQ    FM_FRZERO
         4 000473   000000 756000 xsym               STQ     FKA_DATA_GRAN

     1543     5004    3                 CALL M$READ(READ_DATA) ALTRET(ERR);

   5004  4 000474   000000 630400 1                  EPPR0   READ_DATA
         4 000475   440000 713400                    CLIMB   alt,read
         4 000476   401400 401760                    pmme    nvectors=4
         4 000477   000610 702000 4                  TSX2    ERR

     1544     5005    3                 END;                      /* READ DATA GRANULE                  */

     1545     5006
     1546     5007    2              SORT_REC_BIT='0'B;

   5007  4 000500   200003 470500                    LDP0    @SORT_REC,,AUTO
         4 000501   000000 720000 xsym               LXL0    FKA_RECSIZE
         4 000502   000140 100400                    MLR     fill='000'O
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:326  
         4 000503   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         4 000504   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0

     1547     5008    2              SORT_REC$=ADDR(SORT_REC);

   5008  4 000505   200003 236100                    LDQ     @SORT_REC,,AUTO
         4 000506   200021 756100                    STQ     SORT_REC$,,AUTO

     1548     5009    2              SORT_INDX=INDEX#;

   5009  4 000507   200021 471500                    LDP1    SORT_REC$,,AUTO
         4 000510   000100 101400                    MRL     fill='000'O
         4 000511   000004 000004 3                  ADSC9   INDEX#                   cn=0,n=4
         4 000512   100000 000001                    ADSC9   0,,PR1                   cn=0,n=1

     1549     5010    2              SORT_REC$=PINCRC(SORT_REC$, 1);

   5010  4 000513   200000 036007                    ADLQ    65536,DL
         4 000514   200021 756100                    STQ     SORT_REC$,,AUTO

     1550     5011
     1551     5012    2              IF F$DCB.ORG# = %INDEXED# THEN

   5012  4 000515   000000 471400 xsym               LDP1    FKA_DCB$
         4 000516   100032 236100                    LDQ     26,,PR1
         4 000517   777000 376003                    ANQ     -512,DU
         4 000520   006000 116003                    CMPQ    3072,DU
         4 000521   000557 601000 4                  TNZ     s:5021

     1552     5013    3              DO;                          /* INDEXED FILE                       */

     1553     5014    3                 SIZE=FITALTKEYS.K.KEYL(INDEX#);

   5014  4 000522   000004 236000 3                  LDQ     INDEX#
         4 000523   000006 402007                    MPY     6,DL
         4 000524   000000 473400 xsym               LDP3    FKA_ALTKEYS$
         4 000525   300001 236106                    LDQ     1,QL,PR3
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:327  
         4 000526   000033 772000                    QRL     27
         4 000527   200010 756100                    STQ     SIZE,,AUTO

     1554     5015    3                 G$=PINCRC(FKA_DATA_BUF$,

   5015  4 000530   000004 236000 3                  LDQ     INDEX#
         4 000531   000006 402007                    MPY     6,DL
         4 000532   300003 236106                    LDQ     3,QL,PR3
         4 000533   777777 376007                    ANQ     -1,DL
         4 000534   200034 756100                    STQ     I+2,,AUTO
         4 000535   000005 236000 3                  LDQ     FM_MISEG
         4 000536   000012 772000                    QRL     10
         4 000537   007774 376007                    ANQ     4092,DL
         4 000540   200034 036100                    ADLQ    I+2,,AUTO
         4 000541   000020 736000                    QLS     16
         4 000542   000000 036000 xsym               ADLQ    FKA_DATA_BUF$
         4 000543   200011 756100                    STQ     G$,,AUTO

     1555     5016    3                     FM_MISEG.GX*4+FITALTKEYS.K.KEYX(INDEX#));
     1556     5017    3                 SORT_REC$->CHARS=G$->CHARS;

   5017  4 000544   200011 474500                    LDP4    G$,,AUTO
         4 000545   200010 720100                    LXL0    SIZE,,AUTO
         4 000546   200021 475500                    LDP5    SORT_REC$,,AUTO
         4 000547   040140 100540                    MLR     fill='040'O
         4 000550   400000 000010                    ADSC9   0,,PR4                   cn=0,n=*X0
         4 000551   500000 000010                    ADSC9   0,,PR5                   cn=0,n=*X0

     1557     5018    3                 SORT_REC$=PINCRC(SORT_REC$, FKA_KEYSIZE);

   5018  4 000552   000000 236000 xsym               LDQ     FKA_KEYSIZE
         4 000553   000020 736000                    QLS     16
         4 000554   200021 036100                    ADLQ    SORT_REC$,,AUTO
         4 000555   200021 756100                    STQ     SORT_REC$,,AUTO

     1558     5019    3                 END;                      /* INDEXED FILE                       */

PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:328  
   5019  4 000556   000561 710000 4                  TRA     s:5023

     1559     5020    2              ELSE
     1560     5021    2                 CALL BUILD_IREL;

   5021  4 000557   000011 701000 4                  TSX1    BUILD_IREL
         4 000560   000000 011000                    NOP     0

     1561     5022
     1562     5023    2              SORT_ID.DA=FM_MISEG.GDA;

   5023  4 000561   200021 470500                    LDP0    SORT_REC$,,AUTO
         4 000562   003100 061400                    CSR     bolr='003'O
         4 000563   000006 200033 3                  BDSC    FM_MISEG+1               by=1,bit=0,n=27
         4 000564   000000 000032                    BDSC    0,,PR0                   by=0,bit=0,n=26

     1563     5024    2              SORT_ID.GX=FM_MISEG.GX;

   5024  4 000565   003100 060400                    CSL     bolr='003'O
         4 000566   000005 250012 3                  BDSC    FM_MISEG                 by=1,bit=5,n=10
         4 000567   000000 500012                    BDSC    0,,PR0                   by=2,bit=8,n=10

     1564     5025    2              SORT_REC$=PINCRC(SORT_REC$, 4);

   5025  4 000570   200021 236100                    LDQ     SORT_REC$,,AUTO
         4 000571   000001 036003                    ADLQ    1,DU
         4 000572   200021 756100                    STQ     SORT_REC$,,AUTO

     1565     5026    2              SORT_SEGCNT=SEGCNT;

   5026  4 000573   200021 470500                    LDP0    SORT_REC$,,AUTO
         4 000574   000100 101400                    MRL     fill='000'O
         4 000575   000002 000004 3                  ADSC9   SEGCNT                   cn=0,n=4
         4 000576   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2

     1566     5027    2              SORT_REC$=PINCRC(SORT_REC$, 2);

PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:329  
   5027  4 000577   400000 036007                    ADLQ    -131072,DL
         4 000600   200021 756100                    STQ     SORT_REC$,,AUTO

     1567     5028    2              SORT_MISEG=FM$MISEG;

   5028  4 000601   000001 470400 3                  LDP0    SEG$
         4 000602   200021 471500                    LDP1    SORT_REC$,,AUTO
         4 000603   000100 100500                    MLR     fill='000'O
         4 000604   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8
         4 000605   100000 000010                    ADSC9   0,,PR1                   cn=0,n=8

     1568     5029
     1569     5030    2              RETURN;

   5030  4 000606   200024 221300                    LDX1  ! SORT_REC$+3,,AUTO
         4 000607   000001 702211                    TSX2  ! 1,X1

     1570     5031    2   ERR:       CALL FKA$ABORT;

   5031  4 000610   000002 631400 xsym  ERR          EPPR1   B_VECTNIL+2
         4 000611   000000 701000 xent               TSX1    FKA$ABORT
         4 000612   000000 011000                    NOP     0

     1571     5032    2      END BUILD_REC;

   5032  4 000613   200024 221300                    LDX1  ! SORT_REC$+3,,AUTO
         4 000614   000001 702211                    TSX2  ! 1,X1

     1572     5033         %EJECT;
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:330  
     1573     5034        /*I*     NAME:     FLINK
     1574     5035                 PURPOSE:  To flink to the next index granule
     1575     5036                 DESCRIPTION:
     1576     5037
     1577     5038                      If there isn't one, altret.
     1578     5039
     1579     5040                      Otherwise remember the new FLINK, read the next
     1580     5041                 granule, and set up some variables.
     1581     5042        */
     1582     5043         %EJECT;
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:331  
     1583     5044    1   FLINK:     PROC ALTRET;

   5044  4 000615   200030 741300       FLINK        STX1  ! SORT_REC$+7,,AUTO

     1584     5045        /* */
     1585     5046    2              IF FM$GRAN.FLINK = 0 THEN

   5046  4 000616   000000 470400 xsym               LDP0    FKA_INDEX_BUF$
         4 000617   000004 235100                    LDA     4,,PR0
         4 000620   000622 601000 4                  TNZ     s:5049

     1586     5047    2                 ALTRETURN;

   5047  4 000621   000000 702211                    TSX2  ! 0,X1

     1587     5048
     1588     5049    2              FKA_INDEX_GRAN=FM$GRAN.FLINK-FM_FRZERO;

   5049  4 000622   000004 236100                    LDQ     4,,PR0
         4 000623   000000 136000 xsym               SBLQ    FM_FRZERO
         4 000624   000000 756000 xsym               STQ     FKA_INDEX_GRAN

     1589     5050    2              CALL M$READ(READ_INDEX) ALTRET(ERR);

   5050  4 000625   000016 630400 1                  EPPR0   READ_INDEX
         4 000626   440000 713400                    CLIMB   alt,read
         4 000627   401400 401760                    pmme    nvectors=4
         4 000630   000645 702000 4                  TSX2    ERR

     1590     5051
     1591     5052    2              FKA_KTPTR$=PINCRW(FKA_INDEX_BUF$, FM$GRAN.FCEX);

   5052  4 000631   000000 470400 xsym               LDP0    FKA_INDEX_BUF$
         4 000632   000002 220100                    LDX0    2,,PR0
         4 000633   000000 636010                    EAQ     0,X0
         4 000634   000000 036000 xsym               ADLQ    FKA_INDEX_BUF$
         4 000635   000000 756000 xsym               STQ     FKA_KTPTR$
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:332  

     1592     5053    2              CRECX=0;

   5053  4 000636   000003 450000 3                  STZ     CRECX

     1593     5054    2              FKA_BOUND=FM$KEYTBL(0);

   5054  4 000637   000000 471400 xsym               LDP1    FKA_KTPTR$
         4 000640   100000 236100                    LDQ     0,,PR1
         4 000641   000033 772000                    QRL     27
         4 000642   000000 756000 xsym               STQ     FKA_BOUND

     1594     5055
     1595     5056    2              RETURN;

   5056  4 000643   200030 221300                    LDX1  ! SORT_REC$+7,,AUTO
         4 000644   000001 702211                    TSX2  ! 1,X1

     1596     5057    2   ERR:       CALL FKA$ABORT;

   5057  4 000645   000002 631400 xsym  ERR          EPPR1   B_VECTNIL+2
         4 000646   000000 701000 xent               TSX1    FKA$ABORT
         4 000647   000000 011000                    NOP     0

     1597     5058    2      END FLINK;

   5058  4 000650   200030 221300                    LDX1  ! SORT_REC$+7,,AUTO
         4 000651   000001 702211                    TSX2  ! 1,X1

     1598     5059         %EJECT;
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:333  
     1599     5060        /*I*     NAME:     NXTINDX
     1600     5061                 PURPOSE:  To build the record for the next index
     1601     5062                 DESCRIPTION:
     1602     5063
     1603     5064                      If this is the first time through, or we have
     1604     5065                 taken care of all of the indexes, then either get
     1605     5066                 the next segment or key.  Otherwise, we have a
     1606     5067                 new index, same record.
     1607     5068
     1608     5069                      The rather convoluted IF statement basically
     1609     5070                 tries just to build indexes that are not UNIQUE.
     1610     5071                 If an index is UNIQUE, then we ignore LOAD and build
     1611     5072                 them on the fly in FMG$KEYED.
     1612     5073        */
     1613     5074         %EJECT;
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:334  
     1614     5075    1   NXTINDX:   PROC ALTRET;

   5075  4 000652   200022 741300       NXTINDX      STX1  ! SORT_REC$+1,,AUTO

     1615     5076        /* */
     1616     5077    3   LOOP:      DO WHILE('1'B);

   5077  4 000653                       LOOP         null
     1617     5078    3                 IF INDEX#+1 >= FKA_NUMKEYS OR INDEX# = 0 THEN

   5078  4 000653   000004 236000 3                  LDQ     INDEX#
         4 000654   000001 036007                    ADLQ    1,DL
         4 000655   000000 116000 xsym               CMPQ    FKA_NUMKEYS
         4 000656   000661 605000 4                  TPL     s:5080
         4 000657   000004 235000 3                  LDA     INDEX#
         4 000660   000673 601000 4                  TNZ     s:5087

     1618     5079    4                 DO;                       /* GET NEXT KEY                       */

     1619     5080    4                    INDEX#=1;

   5080  4 000661   000001 235007                    LDA     1,DL
         4 000662   000004 755000 3                  STA     INDEX#

     1620     5081    4                    IF SEGX > 0 THEN

   5081  4 000663   000000 236000 3                  LDQ     SEGX
         4 000664   000670 604400 4                  TMOZ    s:5084

     1621     5082    4                       CALL NXTSEG ALTRET(EOF);

   5082  4 000665   001047 701000 4                  TSX1    NXTSEG
         4 000666   000734 702000 4                  TSX2    EOF
         4 000667   000674 710000 4                  TRA     s:5089

     1622     5083    4                    ELSE
     1623     5084    4                       CALL NXTKEY ALTRET(EOF);
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:335  

   5084  4 000670   000736 701000 4                  TSX1    NXTKEY
         4 000671   000734 702000 4                  TSX2    EOF

     1624     5085    4                    END;                   /* GET NEXT KEY                       */

   5085  4 000672   000674 710000 4                  TRA     s:5089

     1625     5086    3                 ELSE
     1626     5087    3                    INDEX#=INDEX#+1;

   5087  4 000673   000004 054000 3                  AOS     INDEX#

     1627     5088
     1628     5089    3                 IF (F$DCB.ORG# = %INDEXED# AND

   5089  4 000674   000000 470400 xsym               LDP0    FKA_DCB$
         4 000675   000032 236100                    LDQ     26,,PR0
         4 000676   777000 376003                    ANQ     -512,DU
         4 000677   006000 116003                    CMPQ    3072,DU
         4 000700   000712 601000 4                  TNZ     s:5089+14
         4 000701   000000 471400 xsym               LDP1    FKA_ALTKEYS$
         4 000702   100000 236100                    LDQ     0,,PR1
         4 000703   400000 316007                    CANQ    -131072,DL
         4 000704   000727 601000 4                  TNZ     s:5096
         4 000705   000004 236000 3                  LDQ     INDEX#
         4 000706   000006 402007                    MPY     6,DL
         4 000707   100004 236106                    LDQ     4,QL,PR1
         4 000710   000400 316003                    CANQ    256,DU
         4 000711   000727 600000 4                  TZE     s:5096
         4 000712   000032 236100                    LDQ     26,,PR0
         4 000713   777000 376003                    ANQ     -512,DU
         4 000714   015000 116003                    CMPQ    6656,DU
         4 000715   000653 601000 4                  TNZ     LOOP
         4 000716   000000 471400 xsym               LDP1    FKA_IRKEYS$
         4 000717   100002 236100                    LDQ     2,,PR1
         4 000720   200000 316003                    CANQ    65536,DU
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:336  
         4 000721   000727 601000 4                  TNZ     s:5096
         4 000722   000004 236000 3                  LDQ     INDEX#
         4 000723   000007 402007                    MPY     7,DL
         4 000724   100006 236106                    LDQ     6,QL,PR1
         4 000725   400000 316007                    CANQ    -131072,DL
         4 000726   000653 601000 4                  TNZ     LOOP

     1629     5090    3                     (FITALTKEYS.UNIQUEBLD OR
     1630     5091    3                     NOT FITALTKEYS.K.UNIQUE(INDEX#))) OR
     1631     5092    3                     (F$DCB.ORG# = %IREL# AND
     1632     5093    3                     (IRKEYS.UNIQUEBLD OR
     1633     5094    3                     NOT IRKEYS.K.UNIQUE(INDEX#))) THEN
     1634     5095    4                 DO;                       /* BUILD RECORD                       */

     1635     5096    4                    CALL BUILD_REC;

   5096  4 000727   000462 701000 4                  TSX1    BUILD_REC
         4 000730   000000 011000                    NOP     0

     1636     5097    4                    EXIT LOOP;

   5097  4 000731   000732 710000 4                  TRA     s:5102

     1637     5098    4                    END;                   /* BUILD RECORD                       */
     1638     5099
     1639     5100    3                 END;                      /* WHILE                              */

     1640     5101
     1641     5102    2              RETURN;

   5102  4 000732   200022 221300                    LDX1  ! SORT_REC$+1,,AUTO
         4 000733   000001 702211                    TSX2  ! 1,X1

     1642     5103    2   EOF:       ALTRETURN;

   5103  4 000734   200022 221300       EOF          LDX1  ! SORT_REC$+1,,AUTO
         4 000735   000000 702211                    TSX2  ! 0,X1
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:337  

     1643     5104    2      END NXTINDX;
     1644     5105         %EJECT;
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:338  
     1645     5106        /*I*     NAME:     NXTKEY
     1646     5107                 PURPOSE:  To position to the next key
     1647     5108                 DESCRIPTION:
     1648     5109
     1649     5110                      Loop until we find a non-deleted key.  If this
     1650     5111                 is the end of the granule, then try the next granule.
     1651     5112
     1652     5113                      Build a pointer to the MISEG, and save the MISEG
     1653     5114                 away.
     1654     5115        */
     1655     5116         %EJECT;
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:339  
     1656     5117    1   NXTKEY:    PROC ALTRET;

   5117  4 000736   200026 741300       NXTKEY       STX1  ! SORT_REC$+5,,AUTO

     1657     5118        /* */
     1658     5119    3              DO UNTIL (NOT FM$KEYENT.D);

     1659     5120    3                 SEGX=0;

   5120  4 000737   000000 450000 3                  STZ     SEGX

     1660     5121    3                 SEGCNT=0;

   5121  4 000740   000002 450000 3                  STZ     SEGCNT

     1661     5122    3                 CRECX=CRECX+1;

   5122  4 000741   000003 054000 3                  AOS     CRECX

     1662     5123
     1663     5124    4                 DO WHILE(CRECX > FM$GRAN.KEYCNT);

   5124  4 000742   000000 470400 xsym               LDP0    FKA_INDEX_BUF$
         4 000743   000002 236100                    LDQ     2,,PR0
         4 000744   000777 376007                    ANQ     511,DL
         4 000745   000003 116000 3                  CMPQ    CRECX
         4 000746   000760 605000 4                  TPL     s:5129

     1664     5125    4                    CALL FLINK ALTRET(EOF);

   5125  4 000747   000615 701000 4                  TSX1    FLINK
         4 000750   001045 702000 4                  TSX2    EOF

     1665     5126    4                    CRECX=1;

   5126  4 000751   000001 235007                    LDA     1,DL
         4 000752   000003 755000 3                  STA     CRECX
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:340  

     1666     5127    4                    END;

   5127  4 000753   000000 470400 xsym               LDP0    FKA_INDEX_BUF$
         4 000754   000002 236100                    LDQ     2,,PR0
         4 000755   000777 376007                    ANQ     511,DL
         4 000756   000003 116000 3                  CMPQ    CRECX
         4 000757   000747 604000 4                  TMI     s:5125

     1667     5128
     1668     5129    3                 IF CRECX >= FKA_BOUND THEN

   5129  4 000760   000003 236000 3                  LDQ     CRECX
         4 000761   000000 116000 xsym               CMPQ    FKA_BOUND
         4 000762   000773 604000 4                  TMI     s:5132

     1669     5130    3                    SEGX=FM$KEYTBL(CRECX)+512;

   5130  4 000763   000000 471400 xsym               LDP1    FKA_KTPTR$
         4 000764   000100 101506                    MRL     fill='000'O
         4 000765   100000 000001                    ADSC9   0,Q,PR1                  cn=0,n=1
         4 000766   200034 000004                    ADSC9   I+2,,AUTO                cn=0,n=4
         4 000767   200034 236100                    LDQ     I+2,,AUTO
         4 000770   001000 036007                    ADLQ    512,DL
         4 000771   000000 756000 3                  STQ     SEGX
         4 000772   000777 710000 4                  TRA     s:5133

     1670     5131    3                 ELSE
     1671     5132    3                    SEGX=FM$KEYTBL(CRECX);

   5132  4 000773   000000 471400 xsym               LDP1    FKA_KTPTR$
         4 000774   000000 101506                    MRL     fill='000'O
         4 000775   100000 000001                    ADSC9   0,Q,PR1                  cn=0,n=1
         4 000776   000000 000004 3                  ADSC9   SEGX                     cn=0,n=4

     1672     5133    3                 KEY$=PINCRW(FKA_INDEX_BUF$, SEGX);

PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:341  
   5133  4 000777   000000 236000 3                  LDQ     SEGX
         4 001000   000022 736000                    QLS     18
         4 001001   000000 036000 xsym               ADLQ    FKA_INDEX_BUF$
         4 001002   200005 756100                    STQ     KEY$,,AUTO

     1673     5134    3                 END;                      /* UNTIL                              */

   5134  4 001003   200005 473500                    LDP3    KEY$,,AUTO
         4 001004   300000 234100                    SZN     0,,PR3
         4 001005   000737 604000 4                  TMI     s:5120

     1674     5135
     1675     5136    2              IF F$DCB.ORG# = %IREL# THEN

   5136  4 001006   000000 474400 xsym               LDP4    FKA_DCB$
         4 001007   400032 236100                    LDQ     26,,PR4
         4 001010   777000 376003                    ANQ     -512,DU
         4 001011   015000 116003                    CMPQ    6656,DU
         4 001012   001023 601000 4                  TNZ     s:5139

     1676     5137    2                 SEGX=SEGX+(FM$IRENT.KLB+5)/4;

   5137  4 001013   300000 236100                    LDQ     0,,PR3
         4 001014   000022 772000                    QRL     18
         4 001015   377777 376007                    ANQ     131071,DL
         4 001016   000005 036007                    ADLQ    5,DL
         4 001017   000002 772000                    QRL     2
         4 001020   000000 036000 3                  ADLQ    SEGX
         4 001021   000000 756000 3                  STQ     SEGX
         4 001022   001032 710000 4                  TRA     s:5141

     1677     5138    2              ELSE
     1678     5139    2                 SEGX=SEGX+(FM$KEYENT.KLB+4)/4;

   5139  4 001023   300000 236100                    LDQ     0,,PR3
         4 001024   000033 772000                    QRL     27
         4 001025   000377 376007                    ANQ     255,DL
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:342  
         4 001026   000004 036007                    ADLQ    4,DL
         4 001027   000002 772000                    QRL     2
         4 001030   000000 036000 3                  ADLQ    SEGX
         4 001031   000000 756000 3                  STQ     SEGX

     1679     5140
     1680     5141    2              SEG$=PINCRW(FKA_INDEX_BUF$, SEGX);

   5141  4 001032   000022 736000                    QLS     18
         4 001033   000000 036000 xsym               ADLQ    FKA_INDEX_BUF$
         4 001034   000001 756000 3                  STQ     SEG$

     1681     5142    2              FM_MISEG=FM$MISEG;

   5142  4 001035   000001 475400 3                  LDP5    SEG$
         4 001036   000000 100500                    MLR     fill='000'O
         4 001037   500000 000010                    ADSC9   0,,PR5                   cn=0,n=8
         4 001040   000005 000010 3                  ADSC9   FM_MISEG                 cn=0,n=8

     1682     5143    2              FM$MISEG.FAK='1'B;

   5143  4 001041   400000 236003                    LDQ     -131072,DU
         4 001042   500000 256100                    ORSQ    0,,PR5

     1683     5144
     1684     5145    2              RETURN;

   5145  4 001043   200026 221300                    LDX1  ! SORT_REC$+5,,AUTO
         4 001044   000001 702211                    TSX2  ! 1,X1

     1685     5146    2   EOF:       ALTRETURN;

   5146  4 001045   200026 221300       EOF          LDX1  ! SORT_REC$+5,,AUTO
         4 001046   000000 702211                    TSX2  ! 0,X1

     1686     5147    2      END NXTKEY;
     1687     5148         %EJECT;
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:343  
     1688     5149        /*I*     NAME:     NXTSEG
     1689     5150                 PURPOSE:  To position to the next segment
     1690     5151                 DESCRIPTION:
     1691     5152
     1692     5153                      Figure out where the end of the granule is.
     1693     5154                 Increment the segment index by two.  If we fell
     1694     5155                 off the end of the granule, then read the next
     1695     5156                 granule.
     1696     5157
     1697     5158                      Now find the last segment in the current key.
     1698     5159                 If we went beyond that, then there are no more
     1699     5160                 segments, so get the next key.
     1700     5161        */
     1701     5162         %EJECT;
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:344  
     1702     5163    1   NXTSEG:    PROC ALTRET;

   5163  4 001047   200024 741300       NXTSEG       STX1  ! SORT_REC$+3,,AUTO

     1703     5164        /* */
     1704     5165    2              ENDGRAN=FM$GRAN.NAVX;

   5165  4 001050   000000 470400 xsym               LDP0    FKA_INDEX_BUF$
         4 001051   000001 236100                    LDQ     1,,PR0
         4 001052   000022 772000                    QRL     18
         4 001053   200006 756100                    STQ     ENDGRAN,,AUTO

     1705     5166
     1706     5167    2              SEGX=SEGX+2;

   5167  4 001054   000002 236007                    LDQ     2,DL
         4 001055   000000 056000 3                  ASQ     SEGX

     1707     5168    2              SEGCNT=SEGCNT+1;

   5168  4 001056   000002 054000 3                  AOS     SEGCNT

     1708     5169
     1709     5170    3              DO WHILE (SEGX >= ENDGRAN);

   5170  4 001057   000000 236000 3                  LDQ     SEGX
         4 001060   200006 116100                    CMPQ    ENDGRAN,,AUTO
         4 001061   001077 604000 4                  TMI     s:5177

     1710     5171    3                 CALL FLINK ALTRET(EOF);

   5171  4 001062   000615 701000 4                  TSX1    FLINK
         4 001063   001143 702000 4                  TSX2    EOF

     1711     5172    3                 CRECX=0;

   5172  4 001064   000003 450000 3                  STZ     CRECX
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:345  

     1712     5173    3                 SEGX=FM$GRAN.FCEX+SIZEW(FM$KEYTBL);

   5173  4 001065   000000 470400 xsym               LDP0    FKA_INDEX_BUF$
         4 001066   000002 236100                    LDQ     2,,PR0
         4 001067   000022 772000                    QRL     18
         4 001070   000106 036007                    ADLQ    70,DL
         4 001071   000000 756000 3                  STQ     SEGX

     1713     5174    3                 ENDGRAN=FM$GRAN.NAVX;

   5174  4 001072   000001 236100                    LDQ     1,,PR0
         4 001073   000022 772000                    QRL     18
         4 001074   200006 756100                    STQ     ENDGRAN,,AUTO

     1714     5175    3                 END;                      /* WHILE                              */

   5175  4 001075   000000 116000 3                  CMPQ    SEGX
         4 001076   001062 604400 4                  TMOZ    s:5171

     1715     5176
     1716     5177    2              IF CRECX < FM$GRAN.KEYCNT THEN

   5177  4 001077   000002 236100                    LDQ     2,,PR0
         4 001100   000777 376007                    ANQ     511,DL
         4 001101   000003 116000 3                  CMPQ    CRECX
         4 001102   001126 604400 4                  TMOZ    s:5185

     1717     5178    3              DO;                          /* LAST SEG IN KEY                    */

     1718     5179    3                 IF CRECX+1 < FKA_BOUND THEN

   5179  4 001103   000003 236000 3                  LDQ     CRECX
         4 001104   000001 036007                    ADLQ    1,DL
         4 001105   000000 116000 xsym               CMPQ    FKA_BOUND
         4 001106   001115 605000 4                  TPL     s:5182

PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:346  
     1719     5180    3                    LASTSEG=FM$KEYTBL(CRECX+1);

   5180  4 001107   000000 471400 xsym               LDP1    FKA_KTPTR$
         4 001110   000003 235000 3                  LDA     CRECX
         4 001111   000100 101505                    MRL     fill='000'O
         4 001112   100000 200001                    ADSC9   0,A,PR1                  cn=1,n=1
         4 001113   200007 000004                    ADSC9   LASTSEG,,AUTO            cn=0,n=4
         4 001114   001130 710000 4                  TRA     s:5187

     1720     5181    3                 ELSE
     1721     5182    3                    LASTSEG=FM$KEYTBL(CRECX+1)+512;

   5182  4 001115   000000 471400 xsym               LDP1    FKA_KTPTR$
         4 001116   000003 235000 3                  LDA     CRECX
         4 001117   000100 101505                    MRL     fill='000'O
         4 001120   100000 200001                    ADSC9   0,A,PR1                  cn=1,n=1
         4 001121   200034 000004                    ADSC9   I+2,,AUTO                cn=0,n=4
         4 001122   200034 236100                    LDQ     I+2,,AUTO
         4 001123   001000 036007                    ADLQ    512,DL
         4 001124   200007 756100                    STQ     LASTSEG,,AUTO

     1722     5183    3                 END;                      /* LAST SEG IN KEY                    */

   5183  4 001125   001130 710000 4                  TRA     s:5187

     1723     5184    2              ELSE
     1724     5185    2                 LASTSEG=ENDGRAN;

   5185  4 001126   200006 235100                    LDA     ENDGRAN,,AUTO
         4 001127   200007 755100                    STA     LASTSEG,,AUTO

     1725     5186
     1726     5187    2              IF SEGX >= LASTSEG THEN

   5187  4 001130   000000 236000 3                  LDQ     SEGX
         4 001131   200007 116100                    CMPQ    LASTSEG,,AUTO
         4 001132   001135 604000 4                  TMI     s:5192
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:347  

     1727     5188    3              DO;                          /* NO MORE                            */

     1728     5189    3                 CALL NXTKEY ALTRET(EOF);

   5189  4 001133   000736 701000 4                  TSX1    NXTKEY
         4 001134   001143 702000 4                  TSX2    EOF

     1729     5190    3                 END;                      /* NO MORE                            */

     1730     5191
     1731     5192    2              SEG$=PINCRW(FKA_INDEX_BUF$, SEGX);

   5192  4 001135   000000 236000 3                  LDQ     SEGX
         4 001136   000022 736000                    QLS     18
         4 001137   000000 036000 xsym               ADLQ    FKA_INDEX_BUF$
         4 001140   000001 756000 3                  STQ     SEG$

     1732     5193
     1733     5194    2              RETURN;

   5194  4 001141   200024 221300                    LDX1  ! SORT_REC$+3,,AUTO
         4 001142   000001 702211                    TSX2  ! 1,X1

     1734     5195    2   EOF:       ALTRETURN;

   5195  4 001143   200024 221300       EOF          LDX1  ! SORT_REC$+3,,AUTO
         4 001144   000000 702211                    TSX2  ! 0,X1
     1735     5196    2      END NXTSEG;
     1736     5197    1   END FKA$INPUT;
     1737     5198         %EOD;

PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:348  
--  Include file information  --

   B$OBJECT_C.:E05TOU  is referenced.
   FM_FIELD_C.:E05TOU  is referenced.
   FKA_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   FK_DATA_C.:E05TOU  is referenced.
   FM$FIT.:E05TOU  is referenced.
   FM$GRAN.:E05TOU  is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure FKA$INPUT.
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:349  

 **** Variables and constants ****

  ****  Section 001 RoData FKA$INPUT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(504)   r     1 READ_DATA                 16-0-0/d STRC(504)   r     1 READ_INDEX

  ****  Section 003  Data  FKA$INPUT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w SBIN        r     1 CRECX                      5-0-0/w STRC(72)    r     1 FM_MISEG
     4-0-0/w SBIN        r     1 INDEX#                     1-0-0/w PTR         r     1 SEG$
     2-0-0/w SBIN        r     1 SEGCNT                     0-0-0/w SBIN        r     1 SEGX

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     4-0-0/w PTR         r     1 @RECSIZE                   3-0-0/w PTR         r     1 @SORT_REC
     6-0-0/w SBIN        r     1 ENDGRAN                   17-0-0/w PTR         r     1 F$
    15-0-0/w SBIN        r     1 FN                        11-0-0/w PTR         r     1 G$
    13-0-0/w SBIN        r     1 I                         32-0-0/w UBIN        r     1 I
    12-0-0/w PTR         r     1 IRKEY$                     5-0-0/w PTR         r     1 KEY$
     7-0-0/w SBIN        r     1 LASTSEG                   20-0-0/w SBIN        r     1 LEN
    14-0-0/w SBIN        r     1 ODD                       16-0-0/w PTR         r     1 REC$
    *0-0-0/w UBIN        r     1 RECSIZE                   10-0-0/w SBIN        r     1 SIZE
    *0-0-0/c ACHR        r     1 SORT_REC                  21-0-0/w PTR         r     1 SORT_REC$
    *0-0-0/c ASTR(0)     r     1 SORT_REC_BIT              31-0-0/w UBIN(4)     r     1 TEMP

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:350  
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 FKA_ALTKEYS$               0-0-0/w SBIN        r     1 FKA_BOUND
     0-0-0/c CHAR(4096)  r     1 FKA_DATA_BUF               0-0-0/w PTR         r     1 FKA_DATA_BUF$
     0-0-0/w SBIN        r     1 FKA_DATA_GRAN              0-0-0/w PTR         r     1 FKA_DCB$
     0-0-0/c CHAR(4096)  r     1 FKA_INDEX_BUF              0-0-0/w PTR         r     1 FKA_INDEX_BUF$
     0-0-0/w SBIN        r     1 FKA_INDEX_GRAN             0-0-0/w PTR         r     1 FKA_IRKEYS$
     0-0-0/w SBIN        r     1 FKA_KEYSIZE                0-0-0/w PTR         r     1 FKA_KFIELD$
     0-0-0/w PTR         r     1 FKA_KTPTR$                 0-0-0/w SBIN        r     1 FKA_NUMKEYS
     0-0-0/w PTR         r     1 FKA_RECFIELD$              0-0-0/w SBIN        r     1 FKA_RECSIZE
     0-0-0/w PTR         r     1 FKA_START$                 0-0-0/w UBIN        r     1 FM_FRZERO

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c STRC(9)     r     1 BYT(0:0)                   0-0-0/c ACHR        r     1 CHARS
     0-0-0/c ACHR        r     1 CHRS                       0-0-0/d ASTR(3528)  r     1 F$DCB
     0-0-0/w STRC(72)    r     1 FIELD_START                0-0-0/w STRC(4572)  r     1 FITALTKEYS
     0-0-0/w STRC(180)   r     1 FM$GRAN                    0-0-0/w ASTR(18)    r     1 FM$IRENT
     0-0-0/w ASTR(9)     r     1 FM$KEYENT
     0-0-0/w UBIN(9)     r     1 FM$KEYTBL(0:279)
     0-0-0/w UBIN        r     1 FM$KT(0:69)                0-0-0/w STRC(72)    r     1 FM$MISEG
     0-0-0/w STRC(360)   r     1 IRKEYS                     0-0-0/w STRC(81)    r     1 KFIELD
     0-0-0N  NULL        r     1 M$SI                       0-0-0/d STRC(54)    r     1 RECFIELD
     0-0-0/c STRC        r     1 SORT_ID                    0-0-0/c UBIN(9)     r     1 SORT_INDX
     0-0-0/c BIT (72)    r     1 SORT_MISEG                 0-0-0/c UBIN(18)    r     1 SORT_SEGCNT


   Procedure FKA$INPUT requires 613 words for executable code.
   Procedure FKA$INPUT requires 30 words of local(AUTO) storage.
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:351  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:352  
          MINI XREF LISTING

BUILD_IREL
      4903**PROC     5021--CALL
BUILD_NIBFIELD
      4955**PROC     4932--CALL
BUILD_REC
      4999**PROC     5096--CALL
BYT.LOWER
      4690**DCL      4966>>ASSIGN   4971<<ASSIGN
BYT.UPPER
      4689**DCL      4968>>ASSIGN   4973<<ASSIGN
CHARS
      4678**DCL      5017<<ASSIGN   5017>>ASSIGN
CHRS IN PROCEDURE BUILD_IREL
      4904**DCL      4937<<ASSIGN   4937>>ASSIGN
CRECX
      4672**DCL      5053<<ASSIGN   5122<<ASSIGN   5122>>ASSIGN   5124>>DOWHILE  5126<<ASSIGN   5129>>IF
      5130>>ASSIGN   5132>>ASSIGN   5172<<ASSIGN   5177>>IF       5179>>IF       5180>>ASSIGN   5182>>ASSIGN
ENDGRAN
      4675**DCL      5165<<ASSIGN   5170>>DOWHILE  5174<<ASSIGN   5185>>ASSIGN
EOF
      4887**LABEL    4883--CALLALT
EOF IN PROCEDURE NXTINDX
      5103**LABEL    5082--CALLALT  5084--CALLALT
EOF IN PROCEDURE NXTKEY
      5146**LABEL    5125--CALLALT
EOF IN PROCEDURE NXTSEG
      5195**LABEL    5171--CALLALT  5189--CALLALT
ERR IN PROCEDURE BUILD_REC
      5031**LABEL    5004--CALLALT
ERR IN PROCEDURE FLINK
      5057**LABEL    5050--CALLALT
F$
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:353  
      4685**DCL      4936<<ASSIGN   4937>>ASSIGN   4959<<ASSIGN   4966>>ASSIGN   4968>>ASSIGN
F$DCB.ACTPOS
      4642**DCL      4642--REDEF
F$DCB.ARS#
      4616**DCL      4616--REDEF
F$DCB.ATTR
      4635**DCL      4636--REDEF
F$DCB.BORROW
      4650**DCL      4650--REDEF    4650--REDEF    4650--REDEF
F$DCB.DCBNAME.L
      4664**DCL      4664--IMP-SIZ
F$DCB.EOMCHAR#
      4620**DCL      4620--REDEF
F$DCB.FLDID
      4645**DCL      4645--REDEF
F$DCB.FORM$
      4639**DCL      4639--REDEF
F$DCB.FSECT
      4655**DCL      4655--REDEF
F$DCB.FSN#
      4632**DCL      4632--REDEF    4632--REDEF    4633--REDEF
F$DCB.HEADER$
      4638**DCL      4638--REDEF
F$DCB.IXTNSIZE#
      4636**DCL      4636--REDEF
F$DCB.LASTSTA$
      4625**DCL      4625--REDEF
F$DCB.LVL
      4651**DCL      4651--REDEF
F$DCB.NAME#.C
      4626**DCL      4626--REDEF
F$DCB.NOEOF
      4648**DCL      4648--REDEF
F$DCB.NRECS#
      4637**DCL      4637--REDEF
F$DCB.NRECX
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:354  
      4656**DCL      4656--REDEF
F$DCB.OHDR
      4648**DCL      4648--REDEF
F$DCB.ORG#
      4631**DCL      4631--REDEF    5012>>IF       5089>>IF       5089>>IF       5136>>IF
F$DCB.PRECNO
      4654**DCL      4654--REDEF
F$DCB.RCSZ
      4660**DCL      4660--REDEF
F$DCB.RES#
      4627**DCL      4627--REDEF
F$DCB.SETX
      4639**DCL      4639--REDEF
F$DCB.TAB$
      4639**DCL      4639--REDEF
F$DCB.TDA
      4653**DCL      4654--REDEF
F$DCB.WSN#
      4627**DCL      4627--REDEF
FIELD_START.OFFSET
      4777**DCL      4936>>ASSIGN   4959>>ASSIGN   4960>>ASSIGN
FITALTKEYS.K.KEYL
      4785**DCL      5014>>ASSIGN
FITALTKEYS.K.KEYX
      4785**DCL      5015>>ASSIGN
FITALTKEYS.K.UNIQUE
      4786**DCL      5089>>IF
FITALTKEYS.UNIQUEBLD
      4784**DCL      5089>>IF
FKA$ABORT
      4881**DCL-ENT  5031--CALL     5057--CALL
FKA_ALTKEYS$
      1044**DCL      4784--IMP-PTR  5014>>ASSIGN   5015>>ASSIGN   5089>>IF       5089>>IF
FKA_BOUND
      1047**DCL      5054<<ASSIGN   5129>>IF       5179>>IF
FKA_DATA_BUF
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:355  
      1049**DCL      4549--DCLINIT  4550--DCLINIT
FKA_DATA_BUF$
      1049**DCL      4907>>ASSIGN   5015>>ASSIGN
FKA_DATA_GRAN
      1047**DCL      4547--DCLINIT  4548--DCLINIT  5001>>IF       5003<<ASSIGN
FKA_DCB$
      1047**DCL      4610--IMP-PTR  5012>>IF       5089>>IF       5089>>IF       5136>>IF
FKA_INDEX_BUF
      1048**DCL      4589--DCLINIT  4590--DCLINIT
FKA_INDEX_BUF$
      1049**DCL      4703--IMP-PTR  5046>>IF       5049>>ASSIGN   5052>>ASSIGN   5052>>ASSIGN   5124>>DOWHILE
      5133>>ASSIGN   5141>>ASSIGN   5165>>ASSIGN   5173>>ASSIGN   5174>>ASSIGN   5177>>IF       5192>>ASSIGN
FKA_INDEX_GRAN
      1047**DCL      4587--DCLINIT  4588--DCLINIT  5049<<ASSIGN
FKA_IRKEYS$
      1045**DCL      4790--IMP-PTR  4909>>DOINDEX  4910>>ASSIGN   5089>>IF       5089>>IF
FKA_KEYSIZE
      1048**DCL      4941>>ASSIGN   5018>>ASSIGN
FKA_KFIELD$
      1046**DCL      4797--IMP-PTR  4910>>ASSIGN
FKA_KTPTR$
      1047**DCL      4707--IMP-PTR  4707--IMP-PTR  5052<<ASSIGN   5054>>ASSIGN   5130>>ASSIGN   5132>>ASSIGN
      5180>>ASSIGN   5182>>ASSIGN
FKA_NUMKEYS
      1048**DCL      5078>>IF
FKA_RECFIELD$
      1044**DCL      4729--IMP-PTR  4912>>DOCASE   4918>>ASSIGN   4921>>ASSIGN   4924>>ASSIGN   4928>>DOCASE
FKA_RECSIZE
      1048**DCL      4524--IMP-SIZ  4526--IMP-SIZ  4884>>ASSIGN   5007>>ASSIGN
FKA_START$
      1044**DCL      4774--IMP-PTR  4936>>ASSIGN   4959>>ASSIGN   4960>>ASSIGN
FLINK
      5044**PROC     5125--CALL     5171--CALL
FM$GRAN.FCEX
      4704**DCL      5052>>ASSIGN   5173>>ASSIGN
FM$GRAN.FLINK
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:356  
      4704**DCL      5046>>IF       5049>>ASSIGN
FM$GRAN.KEYCNT
      4704**DCL      5124>>DOWHILE  5177>>IF
FM$GRAN.NAVX
      4703**DCL      5165>>ASSIGN   5174>>ASSIGN
FM$IRENT.KLB
      4803**DCL      4803--IMP-SIZ  5137>>ASSIGN
FM$KEYENT.D
      4800**DCL      5119>>DOUNTIL
FM$KEYENT.KLB
      4800**DCL      4800--IMP-SIZ  5139>>ASSIGN
FM$KEYTBL
      4707**DCL      5054>>ASSIGN   5130>>ASSIGN   5132>>ASSIGN   5173--ASSIGN   5180>>ASSIGN   5182>>ASSIGN
FM$KT
      4707**DCL      4707--REDEF
FM$MISEG
      4710**DCL      5028>>ASSIGN   5142>>ASSIGN
FM$MISEG.FAK
      4710**DCL      5143<<ASSIGN
FM_FRZERO
      4692**DCL      5001>>IF       5003>>ASSIGN   5049>>ASSIGN
FM_MISEG
      4714**DCL      5142<<ASSIGN
FM_MISEG.GDA
      4715**DCL      5001>>IF       5003>>ASSIGN   5023>>ASSIGN
FM_MISEG.GX
      4714**DCL      4907>>ASSIGN   5015>>ASSIGN   5024>>ASSIGN
FN
      4683**DCL      4910<<ASSIGN   4912>>DOCASE   4918>>ASSIGN   4921>>ASSIGN   4924>>ASSIGN   4928>>DOCASE
      4936>>ASSIGN   4959>>ASSIGN   4960>>ASSIGN
G$
      4679**DCL      5015<<ASSIGN   5017>>ASSIGN
I
      4681**DCL      4909<<DOINDEX  4910>>ASSIGN
I IN PROCEDURE BUILD_NIBFIELD
      4957**DCL      4964<<DOINDEX  4965>>IF       4966>>ASSIGN   4968>>ASSIGN   4970>>IF       4971>>ASSIGN
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:357  
      4973>>ASSIGN
INDEX#
      4673**DCL      4909>>DOINDEX  4910>>ASSIGN   5009>>ASSIGN   5014>>ASSIGN   5015>>ASSIGN   5078>>IF
      5078>>IF       5080<<ASSIGN   5087<<ASSIGN   5087>>ASSIGN   5089>>IF       5089>>IF
IRKEY$
      4680**DCL      4906<<ASSIGN   4933<<ASSIGN   4933>>ASSIGN   4937>>ASSIGN   4938<<ASSIGN   4938>>ASSIGN
      4971>>ASSIGN   4973>>ASSIGN
IRKEYS.K.FIRSTFIELD
      4791**DCL      4910>>ASSIGN
IRKEYS.K.NFIELDS
      4791**DCL      4909>>DOINDEX
IRKEYS.K.UNIQUE
      4792**DCL      5089>>IF
IRKEYS.UNIQUEBLD
      4790**DCL      5089>>IF
KEY$
      4674**DCL      4800--IMP-PTR  4803--IMP-PTR  5119>>DOUNTIL  5133<<ASSIGN   5137>>ASSIGN   5139>>ASSIGN
KFIELD.FIELD
      4797**DCL      4910>>ASSIGN
LASTSEG
      4676**DCL      5180<<ASSIGN   5182<<ASSIGN   5185<<ASSIGN   5187>>IF
LEN
      4686**DCL      4904--IMP-SIZ  4918<<ASSIGN   4921<<ASSIGN   4924<<ASSIGN   4933>>ASSIGN   4937>>ASSIGN
      4937>>ASSIGN   4938>>ASSIGN   4964>>DOINDEX
LOOP IN PROCEDURE NXTINDX
      5077**LABEL    5097--EXIT
M$READ
        58**DCL-ENT  5004--CALL     5050--CALL
NXTINDX
      5075**PROC     4883--CALL
NXTKEY
      5117**PROC     5084--CALL     5189--CALL
NXTSEG
      5163**PROC     5082--CALL
ODD
      4682**DCL      4960<<ASSIGN   4961>>IF       4962<<ASSIGN   4965>>IF       4966>>ASSIGN   4968>>ASSIGN
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:358  
READ_DATA
      4547**DCL      5004<>CALL
READ_DATA.STATION_
      4550**DCL      4551--REDEF
READ_DATA.V
      4551**DCL      4547--DCLINIT
READ_DATA.V.DVBYTE.REREAD#
      4562**DCL      4562--REDEF
READ_DATA.V.INDX#
      4560**DCL      4560--REDEF
READ_INDEX
      4587**DCL      5050<>CALL
READ_INDEX.STATION_
      4590**DCL      4591--REDEF
READ_INDEX.V
      4591**DCL      4587--DCLINIT
READ_INDEX.V.DVBYTE.REREAD#
      4602**DCL      4602--REDEF
READ_INDEX.V.INDX#
      4600**DCL      4600--REDEF
REC$
      4684**DCL      4907<<ASSIGN   4936>>ASSIGN   4959>>ASSIGN
RECFIELD.DECFIELD.LEN#
      4738**DCL      4918>>ASSIGN
RECFIELD.FIELD
      4737**DCL      4737--REDEF
RECFIELD.FIELD.LEN#
      4737**DCL      4921>>ASSIGN   4924>>ASSIGN
RECFIELD.FIELD.TYPE#
      4737**DCL      4912>>DOCASE   4928>>DOCASE
RECSIZE
      4527**DCL        46--PROC     4884<<ASSIGN
SEG$
      4670**DCL      4710--IMP-PTR  5028>>ASSIGN   5141<<ASSIGN   5142>>ASSIGN   5143>>ASSIGN   5192<<ASSIGN
SEGCNT
      4671**DCL      5026>>ASSIGN   5121<<ASSIGN   5168<<ASSIGN   5168>>ASSIGN
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:359  
SEGX
      4669**DCL      5081>>IF       5120<<ASSIGN   5130<<ASSIGN   5132<<ASSIGN   5133>>ASSIGN   5137<<ASSIGN
      5137>>ASSIGN   5139<<ASSIGN   5139>>ASSIGN   5141>>ASSIGN   5167<<ASSIGN   5167>>ASSIGN   5170>>DOWHILE
      5173<<ASSIGN   5187>>IF       5192>>ASSIGN
SIZE
      4677**DCL      4678--IMP-SIZ  5014<<ASSIGN   5017>>ASSIGN   5017>>ASSIGN
SORT_ID.DA
      4697**DCL      5023<<ASSIGN
SORT_ID.GX
      4698**DCL      5024<<ASSIGN
SORT_INDX
      4695**DCL      5009<<ASSIGN
SORT_MISEG
      4700**DCL      5028<<ASSIGN
SORT_REC
      4524**DCL        46--PROC     4525--REDEF    5008--ASSIGN
SORT_REC$
      4694**DCL      4695--IMP-PTR  4696--IMP-PTR  4699--IMP-PTR  4700--IMP-PTR  4906>>ASSIGN   4941<<ASSIGN
      4941>>ASSIGN   5008<<ASSIGN   5009>>ASSIGN   5010<<ASSIGN   5010>>ASSIGN   5017>>ASSIGN   5018<<ASSIGN
      5018>>ASSIGN   5023>>ASSIGN   5024>>ASSIGN   5025<<ASSIGN   5025>>ASSIGN   5026>>ASSIGN   5027<<ASSIGN
      5027>>ASSIGN   5028>>ASSIGN
SORT_REC_BIT
      4525**DCL      5007<<ASSIGN
SORT_SEGCNT
      4699**DCL      5026<<ASSIGN
TEMP IN PROCEDURE BUILD_NIBFIELD
      4956**DCL      4966<<ASSIGN   4968<<ASSIGN   4971>>ASSIGN   4973>>ASSIGN
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:360  
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:361  
              MINI UREF LISTING

FKA$INPUT      46**PROC
FKA_CLOSE_DONE    1051**DCL
FKA_CMDVAR    1050**DCL
FKA_CMDVAR_EXIST    1050**DCL
FKA_CMDVAR_SET    1050**DCL
FKA_CODE19$    1046**DCL
FKA_CODE20$    1046**DCL
FKA_DUPS    1048**DCL
FKA_FIELD_START_DATA    1045**DCL
FKA_FILE_OPEN    1050**DCL
FKA_IRKEYS_DATA    1045**DCL
FKA_KFIELD_DATA    1046**DCL
FKA_M$CLOSE_ERR    1051**DCL
FKA_MON    1044**DCL
FKA_UNIQUE    1044**DCL
M$ACCT      74**DCL-ENT
M$ACTIVATE      77**DCL-ENT
M$ALIB      70**DCL-ENT
M$ASUSER      72**DCL-ENT
M$ATTACH      79**DCL-ENT
M$BADPP      97**DCL-ENT
M$CGCTL      78**DCL-ENT
M$CGINFO      78**DCL-ENT
M$CHECK      59**DCL-ENT
M$CHGUNIT     117**DCL-ENT
M$CLOSE      57**DCL-ENT
M$CLRSTK     115**DCL-ENT
M$CMDVAR     126**DCL-ENT
M$CONFIG      87**DCL-ENT
M$CORRES      62**DCL-ENT
M$CPEXIT      71**DCL-ENT
M$CVM      95**DCL-ENT
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:362  
M$CVOL      60**DCL-ENT
M$DCLFLD      87**DCL-ENT
M$DEACTIVATE      77**DCL-ENT
M$DELREC      59**DCL-ENT
M$DEQ     124**DCL-ENT
M$DETACH      79**DCL-ENT
M$DEVICE      61**DCL-ENT
M$DISPLAY     124**DCL-ENT
M$DISPRES      64**DCL-ENT
M$DLIB      70**DCL-ENT
M$DRIBBLE      87**DCL-ENT
M$DRTN     115**DCL-ENT
M$DSUSER      72**DCL-ENT
M$ENQ     123**DCL-ENT
M$EOM      82**DCL-ENT
M$ERASE      88**DCL-ENT
M$ERR      69**DCL-ENT
M$ERRMSG     120**DCL-ENT
M$EVENT     112**DCL-ENT
M$EXHUME     121**DCL-ENT
M$EXIT      69**DCL-ENT
M$EXTEND      61**DCL-ENT
M$FDP      93**DCL-ENT
M$FDS      92**DCL-ENT
M$FEBOOT      85**DCL-ENT
M$FECTL      86**DCL-ENT
M$FEDUMP      85**DCL-ENT
M$FID     120**DCL-ENT
M$FINDPROC      74**DCL-ENT
M$FSUSER      72**DCL-ENT
M$FVP      94**DCL-ENT
M$FWCG      78**DCL-ENT
M$GBPL      98**DCL-ENT
M$GDDL      94**DCL-ENT
M$GDP      93**DCL-ENT
M$GDS      92**DCL-ENT
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:363  
M$GETDCB      63**DCL-ENT
M$GETMOUSE     103**DCL-ENT
M$GETPM     104**DCL-ENT
M$GJOB     122**DCL-ENT
M$GLINEATTR      82**DCL-ENT
M$GOODPP      97**DCL-ENT
M$GPLATEN      90**DCL-ENT
M$GPROMPT      89**DCL-ENT
M$GTRMATTR      83**DCL-ENT
M$GTRMCTL      81**DCL-ENT
M$GTRMTAB      84**DCL-ENT
M$GVP      93**DCL-ENT
M$HELP     120**DCL-ENT
M$INT     112**DCL-ENT
M$INTRTN      73**DCL-ENT
M$IOQ     108**DCL-ENT
M$JOBSTATS     122**DCL-ENT
M$KEYIN      62**DCL-ENT
M$LDEV      57**DCL-ENT
M$LDTRC      70**DCL-ENT
M$LIMIT      63**DCL-ENT
M$LINES      62**DCL-ENT
M$LINK      69**DCL-ENT
M$MADMUCK      65**DCL-ENT
M$MAKUSER      96**DCL-ENT
M$MBS      64**DCL-ENT
M$MDFFLD      88**DCL-ENT
M$MERC     113**DCL-ENT
M$MERCS     114**DCL-ENT
M$MIRROR     108**DCL-ENT
M$MONINFO     125**DCL-ENT
M$MPL      98**DCL-ENT
M$NODEINFO      89**DCL-ENT
M$NXTUSR     123**DCL-ENT
M$OCMSG     121**DCL-ENT
M$OLAY      69**DCL-ENT
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:364  
M$OPEN      57**DCL-ENT
M$PAS      98**DCL-ENT
M$PATHCON     121**DCL-ENT
M$PDS      92**DCL-ENT
M$PFIL      59**DCL-ENT
M$PLATEN      83**DCL-ENT
M$PRECORD      61**DCL-ENT
M$PROCNAME      74**DCL-ENT
M$PROFILE      85**DCL-ENT
M$PROMPT      81**DCL-ENT
M$RACST      65**DCL-ENT
M$RDSYSLOG     106**DCL-ENT
M$RELDCB      63**DCL-ENT
M$RELRES      64**DCL-ENT
M$RELSTARF      66**DCL-ENT
M$REM      66**DCL-ENT
M$RENV     113**DCL-ENT
M$REQUIRE      65**DCL-ENT
M$RETRY     114**DCL-ENT
M$RETRYS     114**DCL-ENT
M$REW      60**DCL-ENT
M$RLSFLD      88**DCL-ENT
M$RPRIV     116**DCL-ENT
M$RSPP      95**DCL-ENT
M$RSWITCH     117**DCL-ENT
M$RUE     123**DCL-ENT
M$SAD      96**DCL-ENT
M$SAVE      72**DCL-ENT
M$SCON      73**DCL-ENT
M$SCREECH      71**DCL-ENT
M$SENV     113**DCL-ENT
M$SETFMA      57**DCL-ENT
M$SETFP      86**DCL-ENT
M$SI    4667**DCL
M$SINPUT      84**DCL-ENT
M$SLCFLD      89**DCL-ENT
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:365  
M$SMOUSE     103**DCL-ENT
M$SMPRT      95**DCL-ENT
M$SPRIV     116**DCL-ENT
M$SSC      96**DCL-ENT
M$SSWITCH     116**DCL-ENT
M$STATE     125**DCL-ENT
M$STD      97**DCL-ENT
M$STIMER     111**DCL-ENT
M$STLPP      94**DCL-ENT
M$STRAP     111**DCL-ENT
M$STRMATTR      83**DCL-ENT
M$STRMCTL      81**DCL-ENT
M$STRMTAB      84**DCL-ENT
M$SYMBIO     122**DCL-ENT
M$SYSCON     108**DCL-ENT
M$SYSID     126**DCL-ENT
M$TDCLOSE     107**DCL-ENT
M$TDIO     107**DCL-ENT
M$TDOPEN     106**DCL-ENT
M$TDREQCPU     107**DCL-ENT
M$TEMPWROC     101**DCL-ENT
M$TIME     124**DCL-ENT
M$TRAP     111**DCL-ENT
M$TRMISC      86**DCL-ENT
M$TRMPRG      82**DCL-ENT
M$TRTN     115**DCL-ENT
M$TRUNC      58**DCL-ENT
M$TTIMER     111**DCL-ENT
M$UC      81**DCL
M$UMPL      98**DCL-ENT
M$UNFID     120**DCL-ENT
M$UNLATCH      77**DCL-ENT
M$UNSHARE      74**DCL-ENT
M$USRFIELD     117**DCL-ENT
M$VIRTUAL      92**DCL-ENT
M$WAIT     115**DCL-ENT
PL6.E3A0      #006=FKA$INPUT File=FKA$ALTKEY.:E05TSI                             TUE 07/29/97 15:32 Page:366  
M$WEOF      60**DCL-ENT
M$WRITE      58**DCL-ENT
M$WRSYSLOG     106**DCL-ENT
M$XCON     112**DCL-ENT
M$XCONRTN      73**DCL-ENT
M$XEQTIME     125**DCL-ENT
M$XFLUSH      66**DCL-ENT
M$XMOUSE     103**DCL-ENT
M$XXX      69**DCL-ENT
M$YC      71**DCL-ENT

PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:367  
     1738        1        /*T***********************************************************/
     1739        2        /*T*                                                         */
     1740        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1741        4        /*T*                                                         */
     1742        5        /*T***********************************************************/
     1743        6        /*F*     NAME:     FKA$OUTPUT
     1744        7                 PURPOSE:  To write a sorted record to the altkey file
     1745        8        */
     1746        9        /*D*     NAME:     FKA$OUTPUT
     1747       10                 CALL:     CALL FKA$OUTPUT(RECORD, RECORD_SIZE)
     1748       11                 INPUT:    RECORD - Sorted key
     1749       12                           RECORD_SIZE - The size of Saturn in acres
     1750       13                 DESCRIPTION:
     1751       14
     1752       15                      Build a pointer to the record.  Pick off the index
     1753       16                 from the first byte of the record.  If it doesn't match
     1754       17                 the current index, then we need to start a new index.
     1755       18                 If this is not the first time through, the write the
     1756       19                 last index granule that we built.  Next, get the FDA
     1757       20                 for the next index.  If there isn't an FDA, then read
     1758       21                 one in.  Set up the size of the key in both bytes, and
     1759       22                 words.  Now, initialize the buffer for the new granule.
     1760       23                 LASTKEY remembers the last key to determine if we build
     1761       24                 a new key, or duplicate key.
     1762       25
     1763       26                      If the record size is zero, then we are done.  Flush
     1764       27                 out the last granule.  Otherwise, write a new key to the
     1765       28                 file.
     1766       29        */
     1767       30         %EJECT;
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:368  
     1768       31        FKA$OUTPUT: PROC(RECORD, RECORD_SIZE) ALTRET;
     1769       32        /* */
     1770       33    1     DCL RECORD CHAR(RECORD_SIZE);
     1771       34    1     DCL RECORD_SIZE SBIN;
     1772       35        /* */
     1773       36         %INCLUDE CP_6;
     1774      117         %INCLUDE CP_6_SUBS;
     1775      657         %INCLUDE FKA_DATA_R;
     1776      673         %INCLUDE FK_DATA_C;
     1777      750         %INCLUDE FM_FIELD_C;
     1778      791         %INCLUDE FM$FIT;
     1779     1012         %INCLUDE FM$GRAN;
     1780     1081         %INCLUDE XU_FORMAT_C;
     1781     1243         %INCLUDE FK_PERR_C;
     1782     1252         %INCLUDE ZL_MACRO_C;
     1783     1902        /* */
     1784     1903         %FPT_READ(FPTN=READ_DATA, BUF=FKA_DATA_BUF, KEYS=YES,
     1785     1904         DCB=M$SI, KEY=FKA_DATA_GRAN, STCLASS=CONSTANT);
     1786     1943         %FPT_READ(FPTN=READ_INDEX, BUF=FKA_INDEX_BUF, KEYS=YES,
     1787     1944         DCB=M$SI, KEY=FKA_INDEX_GRAN, STCLASS=CONSTANT);
     1788     1983         %FPT_WRITE(DCB=M$SI, BUF=FKA_INDEX_BUF,
     1789     1984         KEY=FKA_INDEX_GRAN, STCLASS=CONSTANT);
     1790     2015         %FPT_RELSTARF(ALTKEYS=FKA_ALTKEY_BFR, STCLASS=CONSTANT);
     1791     2030        /* */
     1792     2031    1     DCL M$SI DCB;
     1793     2032    1     DCL M$DO DCB;
     1794     2033        /* */
     1795     2034         %F$DCB(DCBN=F$DCB, STCLASS="BASED(FKA_DCB$)");
     1796     2091         %FM$GRAN(BASED="BASED(FKA_INDEX_BUF$)");
     1797     2095         %FM$KEYTBL(BASED="BASED(FKA_KTPTR$)");
     1798     2098         %FITALTKEYS(BASED="BASED(FKA_ALTKEYS$)");
     1799     2104         %VLP_RECFIELD(FPTN=RECFIELD, STCLASS="BASED(FKA_RECFIELD$)");
     1800     2148         %FK$ALTKEY_BFR(FPTN=FKA_ALTKEY_BFR, STCLASS="SYMREF");
     1801     2168         %FMG$IRKEYS(FPTN=IRKEYS, STCLASS="BASED(FKA_IRKEYS$)");
     1802     2175         %FM$MISEG(BASED="BASED(SEG$)");
     1803     2179         %FM$KEYENT(BASED="BASED(KEY$)");
     1804     2182         %FM$IRENT(BASED="BASED(KEY$)");
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:369  
     1805     2185        /* */
     1806     2186         %SORT_TABLE(STCLASS=SYMREF);
     1807     2295        /* */
     1808     2296    1     DCL XUR$ERRMSG ENTRY(7) ALTRET;
     1809     2297    1     DCL FKA$ABORT ENTRY;
     1810     2298    1     DCL X$WRITE ENTRY(22);
     1811     2299    1     DCL FKA$COMPKEY ENTRY(3);
     1812     2300        /* */
     1813     2301    1     DCL FM_FRZERO UBIN SYMREF;
     1814     2302    1     DCL RECORD$ PTR;
     1815     2303    1     DCL NEXT_GRAN UBIN STATIC;
     1816     2304    1     DCL LAST_GRAN UBIN STATIC;
     1817     2305    1     DCL 1 LASTKEY STATIC,
     1818     2306    1            2 SIZE UBIN(18) CALIGNED,
     1819     2307    1            2 TEXT CHAR(1022) CALIGNED,
     1820     2308    1            2 BINTEXT REDEF TEXT,
     1821     2309    1               3 * CHAR(1022) CALIGNED;
     1822     2310    1     DCL LASTKEY$ PTR CONSTANT INIT(ADDR(LASTKEY.TEXT));
     1823     2311    1     DCL KEYSIZE SBIN STATIC;
     1824     2312    1     DCL KEYWORDS SBIN STATIC;
     1825     2313    1     DCL SEGCNT$ PTR STATIC;
     1826     2314    1     DCL KEYOFF SBIN STATIC;
     1827     2315    1     DCL NEXT_KEY SBIN STATIC;
     1828     2316    1     DCL RESULT SBIN STATIC;
     1829     2317    1     DCL UNIQUE BIT(1);
     1830     2318    1     DCL KEY$ PTR STATIC;
     1831     2319    1     DCL REPORT_INDEX# SBIN STATIC INIT(0);
     1832     2320    1     DCL KEY_SIZE SBIN;
     1833     2321    1     DCL KEY_TEMP(0:1023) UBIN(9) CALIGNED;
     1834     2322    1     DCL FIELD$ PTR;
     1835     2323    1     DCL ASCII BIT(1);
     1836     2324    1     DCL J SBIN;
     1837     2325    1     DCL K SBIN;
     1838     2326    1     DCL N SBIN;
     1839     2327    1     DCL SEG$ PTR;
     1840     2328    1     DCL INDEX# SBIN STATIC INIT(0);
     1841     2329    1     DCL XBUF CHAR(2100) STATIC INIT(' ');
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:370  
     1842     2330        /* */
     1843     2331    1     DCL SORT_REC_INDX UBIN(9) CALIGNED BASED(RECORD$);
     1844     2332    1     DCL SEGCNT UBIN(18) CALIGNED BASED(SEGCNT$);
     1845     2333    1     DCL 1 CHAR8 CALIGNED BASED,
     1846     2334    1            2 * CHAR(8);
     1847     2335    1     DCL TEXT CHAR(KEYSIZE) CALIGNED BASED;
     1848     2336    1     DCL 1 CLEAN_GRAN BASED,
     1849     2337    1            2 * CHAR(20),
     1850     2338    1            2 GRAN(0:1018) UBIN;
     1851     2339    1     DCL TEMPA(0:0) UBIN(9) CALIGNED BASED;
     1852     2340        /* */
     1853     2341         %EQU EQUAL=0;
     1854     2342         %EQU NOTEQUAL=1;
     1855     2343        /* */
     1856     2344    1           RECORD$=ADDR(RECORD);
     1857     2345    1           IF SORT_REC_INDX ~= INDEX# AND RECORD_SIZE > 0 THEN
     1858     2346    2           DO;                             /* NEW INDEX                          */
     1859     2347    2              IF INDEX# > 0 THEN
     1860     2348    2                 CALL M$WRITE(FPT_WRITE) ALTRET(ABORT);
     1861     2349    2              INDEX#=SORT_REC_INDX;
     1862     2350    2              IF F$DCB.ORG# = %INDEXED# THEN
     1863     2351    2                 FKA_INDEX_GRAN=FITALTKEYS.K.FDA(INDEX#);
     1864     2352    2              ELSE
     1865     2353    2                 FKA_INDEX_GRAN=IRKEYS.K.FDA(INDEX#);
     1866     2354
     1867     2355    2              IF FKA_INDEX_GRAN ~= 0 THEN
     1868     2356    3              DO;                          /* READ FIRST GRAN                    */
     1869     2357    3                 FKA_INDEX_GRAN=FKA_INDEX_GRAN-FM_FRZERO;
     1870     2358    3                 CALL M$READ(READ_INDEX) ALTRET(ABORT);
     1871     2359    3                 END;                      /* READ FIRST GRAN                    */
     1872     2360    2              ELSE
     1873     2361    3              DO;                          /* ALLOCATE FIRST GRAN                */
     1874     2362    3                 FKA_ALTKEY_BFR.CODE=%ALTKEY_EXTEND#;
     1875     2363    3                 CALL M$RELSTARF(FPT_RELSTARF) ALTRET(ABORT);
     1876     2364    3                 FKA_INDEX_GRAN=FKA_ALTKEY_BFR.DA-FM_FRZERO;
     1877     2365    3                 FM$GRAN.FLINK=0;
     1878     2366    3                 END;                      /* ALLOCATE FIRST GRAN                */
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:371  
     1879     2367
     1880     2368    2              IF F$DCB.ORG# = %INDEXED# THEN
     1881     2369    3              DO;                          /* INDEXED                            */
     1882     2370    3                 KEYSIZE=FITALTKEYS.K.KEYL(INDEX#);
     1883     2371    3                 KEYWORDS=(KEYSIZE+4)/4;
     1884     2372    3                 END;                      /* INDEXED                            */
     1885     2373    2              ELSE
     1886     2374    3              DO;                          /* IREL                               */
     1887     2375    3                 KEYSIZE=IRKEYS.K.KEYL(INDEX#);
     1888     2376    3                 KEYWORDS=(KEYSIZE+5)/4;
     1889     2377    3                 END;                      /* IREL                               */
     1890     2378
     1891     2379    2              NEXT_GRAN=FM$GRAN.FLINK;
     1892     2380    2              LAST_GRAN=0;
     1893     2381    2              CALL INIT_GRAN;
     1894     2382    2              LASTKEY.SIZE=0;
     1895     2383    2              LASTKEY.BINTEXT='0'B;
     1896     2384    2              END;                         /* NEW INDEX                          */
     1897     2385
     1898     2386    1           IF RECORD_SIZE > 0 THEN
     1899     2387    1              CALL WRITE_RECORD;
     1900     2388    1           ELSE
     1901     2389    1              CALL M$WRITE(FPT_WRITE) ALTRET(ABORT);
     1902     2390    1           RETURN;
     1903     2391    1   ABORT:  CALL FKA$ABORT;
     1904     2392         %EJECT;
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:372  
     1905     2393        /*I*     NAME:     ADDKEY
     1906     2394                 PURPOSE:  To add a new key to the file
     1907     2395                 DESCRIPTION:
     1908     2396
     1909     2397                      Compare the last key with the current key.  If
     1910     2398                 they are equal, then build a new segment.  Otherwise,
     1911     2399                 build a new key.  If the key was specified as unique,
     1912     2400                 then indicate an error as well and reset the unique indicator
     1913     2401                 for the key.
     1914     2402        */
     1915     2403         %EJECT;
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:373  
     1916     2404    1   ADDKEY:    PROC;
     1917     2405        /* */
     1918     2406    2              RESULT=%NOTEQUAL;
     1919     2407    3              IF LASTKEY.SIZE ~= 0 THEN DO; /* Compare current and last keys     */
     1920     2408    3                 IF F$DCB.ORG# = %INDEXED# OR /* INDEXED or degenerate IREL case. */
     1921     2409    3                     SORT_TABLE.SECONDARY.KCE$ = ENTADDR(NIL) OR
     1922     2410    4                     IRKEYS.K.DEGENERATE(INDEX#) THEN DO;
     1923     2411    4                    IF RECORD$->TEXT ~= LASTKEY$->TEXT THEN
     1924     2412    4                       RESULT=%NOTEQUAL;
     1925     2413    4                    ELSE
     1926     2414    4                       RESULT=%EQUAL;
     1927     2415    4                    END;
     1928     2416    4                 ELSE DO;                  /* Complex IREL compare               */
     1929     2417    4                    RESULT=INDEX#;
     1930     2418    4                    CALL FKA$COMPKEY(RECORD$->TEXT, LASTKEY$->TEXT, RESULT);
     1931     2419    4                    END;
     1932     2420    3                 END;
     1933     2421
     1934     2422    2              IF RESULT = %EQUAL THEN
     1935     2423    3              DO;                          /* DUPLICATE KEY                      */
     1936     2424    3                 IF FKA_UNIQUE(INDEX#) THEN
     1937     2425    4                 DO;                       /* It's not really unique             */
     1938     2426    4                    FKA_DUPS=%YES#;
     1939     2427    4                    FKA_UNIQUE(INDEX#)=%NO#;
     1940     2428    4                    END;                   /* It's not really unique             */
     1941     2429
     1942     2430    3                 CALL ADDSEG;
     1943     2431    3                 END;                      /* DUPLICATE KEY                      */
     1944     2432    2              ELSE
     1945     2433    2                 CALL NEWKEY;
     1946     2434
     1947     2435    2              RETURN;
     1948     2436    2      END ADDKEY;
     1949     2437         %EJECT;
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:374  
     1950     2438        /*I*     NAME:     ADDSEG
     1951     2439                 PURPOSE:  To add a new segment to a file
     1952     2440                 DESCRIPTION:
     1953     2441
     1954     2442                      If we ran out of space, then allocate a new granule.
     1955     2443                 Increment the record pointer to the MISEG.  Store the
     1956     2444                 MISEG in the file.  Update our counters and pointers.
     1957     2445        */
     1958     2446    1   ADDSEG:    PROC;
     1959     2447        /* */
     1960     2448    2              IF FM$GRAN.AVAIL < F$DCB.SPARE#+2 THEN
     1961     2449    2                 CALL ALLOCATE;
     1962     2450
     1963     2451    2              RECORD$=PINCRC(RECORD$, FKA_KEYSIZE+6);
     1964     2452    2              KEY$->FM$MISEG=RECORD$->CHAR8;
     1965     2453    2              KEY$=PINCRW(KEY$, 2);
     1966     2454    2              FM$GRAN.AVAIL=FM$GRAN.AVAIL-2;
     1967     2455    2              FM$GRAN.NAVX=FM$GRAN.NAVX+2;
     1968     2456    2              KEYOFF=KEYOFF+2;
     1969     2457
     1970     2458    2              RETURN;
     1971     2459    2      END ADDSEG;
     1972     2460         %EJECT;
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:375  
     1973     2461        /*I*     NAME:     ALLOCATE
     1974     2462                 PURPOSE:  To allocate a new granule
     1975     2463                 DESCRIPTION:
     1976     2464
     1977     2465                      If there is no next granule, then call M$RELSTARF
     1978     2466                 to do a sleazy extend of the file.  Otherwise, read
     1979     2467                 the next granule, and save the flink.  In both cases,
     1980     2468                 initialize the granule.
     1981     2469        */
     1982     2470         %EJECT;
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:376  
     1983     2471    1   ALLOCATE:  PROC;
     1984     2472        /* */
     1985     2473    2              IF NEXT_GRAN = 0 THEN
     1986     2474    3              DO;                          /* ALLOCATE ANOTHER GRANULE           */
     1987     2475    3                 FKA_ALTKEY_BFR.CODE=%ALTKEY_EXTEND#;
     1988     2476    3                 CALL M$RELSTARF(FPT_RELSTARF) ALTRET(ABORT);
     1989     2477
     1990     2478    3                 FM$GRAN.FLINK=FKA_ALTKEY_BFR.DA;
     1991     2479    3                 CALL M$WRITE(FPT_WRITE) ALTRET(ABORT);
     1992     2480    3                 FKA_INDEX_GRAN=FKA_ALTKEY_BFR.DA-FM_FRZERO;
     1993     2481    3                 CALL INIT_GRAN;
     1994     2482    3                 END;                      /* ALLOCATE ANOTHER GRANULE           */
     1995     2483    2              ELSE
     1996     2484    3              DO;                          /* GET NEXT GRAN                      */
     1997     2485    3                 FM$GRAN.FLINK=NEXT_GRAN;
     1998     2486    3                 CALL M$WRITE(FPT_WRITE) ALTRET(ABORT);
     1999     2487
     2000     2488    3                 FKA_INDEX_GRAN=NEXT_GRAN-FM_FRZERO;
     2001     2489    3                 CALL M$READ(READ_INDEX) ALTRET(ABORT);
     2002     2490
     2003     2491    3                 NEXT_GRAN=FM$GRAN.FLINK;
     2004     2492    3                 CALL INIT_GRAN;
     2005     2493    3                 END;                      /* GET NEXT GRAN                      */
     2006     2494
     2007     2495    2              RETURN;
     2008     2496    2   ABORT:     CALL FKA$ABORT;
     2009     2497    2      END ALLOCATE;
     2010     2498         %EJECT;
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:377  
     2011     2499        /*I*     NAME:     INIT_GRAN
     2012     2500                 PURPOSE:  To initialize a granule buffer
     2013     2501                 DESCRIPTION:
     2014     2502
     2015     2503                      First, clean out all but the header.  Set
     2016     2504                 the GMOD part of the stamp to the DA of the granule.
     2017     2505                 Set the FLINK and BLINK.  If this is the first granule
     2018     2506                 allocated for this index, then set the FDA.
     2019     2507
     2020     2508                      Set the LDA.  This is currently the last granule
     2021     2509                 in this index now.
     2022     2510
     2023     2511                      Initialize some more of the header, and set up
     2024     2512                 the key table.
     2025     2513        */
     2026     2514         %EJECT;
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:378  
     2027     2515    1   INIT_GRAN: PROC;
     2028     2516        /* */
     2029     2517    2              FKA_INDEX_BUF$->CLEAN_GRAN.GRAN='0'B;
     2030     2518    2              FM$GRAN.STAMP.GMOD=FKA_INDEX_GRAN;
     2031     2519    2              FM$GRAN.BLINK=LAST_GRAN;
     2032     2520    2              FM$GRAN.FLINK=0;
     2033     2521    2              IF LAST_GRAN = 0 THEN
     2034     2522    3              DO;                          /* SET FDA                            */
     2035     2523    3                 IF F$DCB.ORG# = %INDEXED# THEN
     2036     2524    3                    FITALTKEYS.K.FDA(INDEX#)=FKA_INDEX_GRAN+FM_FRZERO;
     2037     2525    3                 ELSE
     2038     2526    3                    IRKEYS.K.FDA(INDEX#)=FKA_INDEX_GRAN+FM_FRZERO;
     2039     2527    3                 END;                      /* SET FDA                            */
     2040     2528
     2041     2529    2              IF F$DCB.ORG# = %INDEXED# THEN
     2042     2530    2                 FITALTKEYS.K.LDA(INDEX#)=FKA_INDEX_GRAN+FM_FRZERO;
     2043     2531    2              ELSE
     2044     2532    2                 IRKEYS.K.LDA(INDEX#)=FKA_INDEX_GRAN+FM_FRZERO;
     2045     2533
     2046     2534    2              LAST_GRAN=FKA_INDEX_GRAN+FM_FRZERO;
     2047     2535    2              FM$GRAN.FCEX=SIZEW(FM$GRAN);
     2048     2536    2              FM$GRAN.KEYCNT=0;
     2049     2537    2              FKA_KTPTR$=PINCRW(FKA_INDEX_BUF$, SIZEW(FM$GRAN));
     2050     2538    2              FM$KEYTBL(0)=SIZEC(FM$KEYTBL);
     2051     2539    2              KEY$=PINCRW(FKA_KTPTR$, SIZEW(FM$KEYTBL));
     2052     2540    2              FM$GRAN.AVAIL=1024-POFFW(KEY$, FKA_INDEX_BUF$);
     2053     2541    2              FM$GRAN.NAVX=POFFW(KEY$, FKA_INDEX_BUF$);
     2054     2542    2              NEXT_KEY=1;
     2055     2543    2              KEYOFF=FM$GRAN.NAVX;
     2056     2544
     2057     2545    2              RETURN;
     2058     2546    2      END INIT_GRAN;
     2059     2547         %EJECT;
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:379  
     2060     2548        /*I*     NAME:     NEWKEY
     2061     2549                 PURPOSE:  To build a new key in the file
     2062     2550                 DESCRIPTION:
     2063     2551
     2064     2552                      If we don't have space for the new key, then
     2065     2553                 allocate a new granule.  Move the information from
     2066     2554                 the sorted record to the index buffer.
     2067     2555
     2068     2556                      Save this as the last key now.  Update the key
     2069     2557                 table and granule header information.
     2070     2558        */
     2071     2559         %EJECT;
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:380  
     2072     2560    1   NEWKEY:    PROC;
     2073     2561        /* */
     2074     2562    2              IF FM$GRAN.AVAIL < F$DCB.SPARE#+KEYWORDS+2 OR FM$GRAN.KEYCNT+1 > 279 THEN
     2075     2563    2                 CALL ALLOCATE;
     2076     2564
     2077     2565    2              IF F$DCB.ORG# = %INDEXED# THEN
     2078     2566    3              DO;                          /* INDEXED FILE                       */
     2079     2567    3                 FM$KEYENT.KLB=KEYSIZE;
     2080     2568    3                 FM$KEYENT.TXT=RECORD$->TEXT;
     2081     2569    3                 END;                      /* INDEXED FILE                       */
     2082     2570    2              ELSE
     2083     2571    3              DO;                          /* IREL FILE                          */
     2084     2572    3                 FM$IRENT.KLB=KEYSIZE;
     2085     2573    3                 FM$IRENT.TXT=RECORD$->TEXT;
     2086     2574    3                 END;                      /* IREL FILE                          */
     2087     2575
     2088     2576    2              LASTKEY.SIZE=KEYSIZE;
     2089     2577    2              LASTKEY.TEXT=RECORD$->TEXT;
     2090     2578    2              KEY$=PINCRW(KEY$, KEYWORDS);
     2091     2579    2              RECORD$=PINCRC(RECORD$, FKA_KEYSIZE+6);
     2092     2580    2              KEY$->FM$MISEG=RECORD$->CHAR8;
     2093     2581    2              FM$GRAN.KEYCNT=FM$GRAN.KEYCNT+1;
     2094     2582    2              FM$GRAN.AVAIL=FM$GRAN.AVAIL-KEYWORDS-2;
     2095     2583    2              FM$GRAN.NAVX=FM$GRAN.NAVX+KEYWORDS+2;
     2096     2584
     2097     2585    2              IF KEYOFF >= 512 AND FM$KEYTBL(0) = SIZEC(FM$KEYTBL) THEN
     2098     2586    3              DO;                          /* SET BOUND                          */
     2099     2587    3                 KEYOFF=KEYOFF-512;
     2100     2588    3                 FM$KEYTBL(0)=NEXT_KEY;
     2101     2589    3                 END;                      /* SET BOUND                          */
     2102     2590
     2103     2591    2              FM$KEYTBL(NEXT_KEY)=KEYOFF;
     2104     2592    2              KEYOFF=KEYOFF+KEYWORDS+2;
     2105     2593    2              NEXT_KEY=NEXT_KEY+1;
     2106     2594    2              KEY$=PINCRW(KEY$, 2);
     2107     2595
     2108     2596    2              RETURN;
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:381  
     2109     2597    2      END NEWKEY;
     2110     2598         %EJECT;
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:382  
     2111     2599        /*I*     NAME:     WRITE_RECORD
     2112     2600                 PURPOSE:  To write a record to an index granule
     2113     2601                 DESCRIPTION:
     2114     2602
     2115     2603                      Increment the record pointer to the key information.
     2116     2604                 If this is the first segment, then add a key.  Otherwise,
     2117     2605                 add a segment.
     2118     2606        */
     2119     2607         %EJECT;
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:383  
     2120     2608    1   WRITE_RECORD: PROC;
     2121     2609        /* */
     2122     2610    2              RECORD$=PINCRC(RECORD$, 1);
     2123     2611
     2124     2612    2              SEGCNT$=PINCRC(RECORD$, FKA_KEYSIZE+4);
     2125     2613    2              IF SEGCNT = 0 THEN
     2126     2614    2                 CALL ADDKEY;
     2127     2615    2              ELSE
     2128     2616    2                 CALL ADDSEG;
     2129     2617
     2130     2618    2              RETURN;
     2131     2619    2      END WRITE_RECORD;
     2132     2620    1   END FKA$OUTPUT;
     2133     2621         %EOD;

PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:384  
--  Include file information  --

   ZL_MACRO_C.:TOOLE04  is referenced.
   FK_PERR_C.:E05TOU  is referenced.
   XU_FORMAT_C.:E05TOU  is referenced.
   FM$GRAN.:E05TOU  is referenced.
   FM$FIT.:E05TOU  is referenced.
   FM_FIELD_C.:E05TOU  is referenced.
   FK_DATA_C.:E05TOU  is referenced.
   FKA_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure FKA$OUTPUT.

   Procedure FKA$OUTPUT requires 503 words for executable code.
   Procedure FKA$OUTPUT requires 284 words of local(AUTO) storage.

PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:385  

 Object Unit name= FKA$OUTPUT                                 File name= FKA$ALTKEY.:E05TOU
 UTS= JUL 29 '97 15:33:05.28 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  RoData even  UTS     45     55  FKA$OUTPUT
    2   DCB   even  none     0      0  M$SI
    3   DCB   even  none     0      0  M$DO
    4   Data  even  none   792   1430  FKA$OUTPUT
    5   Proc  even  none   503    767  FKA$OUTPUT
    6  RoData even  none     3      3  FKA$OUTPUT

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     5      0   yes    yes     yes      Std        2  FKA$OUTPUT

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
         yes           Std       0 FKA$ABORT
         yes           Std       3 FKA$COMPKEY
                       nStd      0 X66_AUTO_2
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_ARET
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:386  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  FKA_UNIQUE                            FKA_ALTKEYS$
     FKA_RECFIELD$                    r    FKA_IRKEYS$                           FKA_INDEX_GRAN
     FKA_DATA_GRAN                         FKA_KTPTR$                            FKA_DCB$
     FKA_KEYSIZE                           FKA_DUPS                              FKA_INDEX_BUF
r    FKA_INDEX_BUF$                        FKA_DATA_BUF                          M$SI
     M$DO                                  FKA_ALTKEY_BFR                        SORT_TABLE
     FM_FRZERO                             B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:387  


     1738        1        /*T***********************************************************/
     1739        2        /*T*                                                         */
     1740        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     1741        4        /*T*                                                         */
     1742        5        /*T***********************************************************/
     1743        6        /*F*     NAME:     FKA$OUTPUT
     1744        7                 PURPOSE:  To write a sorted record to the altkey file
     1745        8        */
     1746        9        /*D*     NAME:     FKA$OUTPUT
     1747       10                 CALL:     CALL FKA$OUTPUT(RECORD, RECORD_SIZE)
     1748       11                 INPUT:    RECORD - Sorted key
     1749       12                           RECORD_SIZE - The size of Saturn in acres
     1750       13                 DESCRIPTION:
     1751       14
     1752       15                      Build a pointer to the record.  Pick off the index
     1753       16                 from the first byte of the record.  If it doesn't match
     1754       17                 the current index, then we need to start a new index.
     1755       18                 If this is not the first time through, the write the
     1756       19                 last index granule that we built.  Next, get the FDA
     1757       20                 for the next index.  If there isn't an FDA, then read
     1758       21                 one in.  Set up the size of the key in both bytes, and
     1759       22                 words.  Now, initialize the buffer for the new granule.
     1760       23                 LASTKEY remembers the last key to determine if we build
     1761       24                 a new key, or duplicate key.
     1762       25
     1763       26                      If the record size is zero, then we are done.  Flush
     1764       27                 out the last granule.  Otherwise, write a new key to the
     1765       28                 file.
     1766       29        */
     1767       30         %EJECT;
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:388  
     1768       31        FKA$OUTPUT: PROC(RECORD, RECORD_SIZE) ALTRET;

     31  5 000000   000000 700200 xent  FKA$OUTPUT   TSX0  ! X66_AUTO_2
         5 000001   000434 000002                    ZERO    284,2

     1769       32        /* */
     1770       33    1     DCL RECORD CHAR(RECORD_SIZE);
     1771       34    1     DCL RECORD_SIZE SBIN;
     1772       35        /* */
     1773       36         %INCLUDE CP_6;
     1774      117         %INCLUDE CP_6_SUBS;
     1775      657         %INCLUDE FKA_DATA_R;
     1776      673         %INCLUDE FK_DATA_C;
     1777      750         %INCLUDE FM_FIELD_C;
     1778      791         %INCLUDE FM$FIT;
     1779     1012         %INCLUDE FM$GRAN;
     1780     1081         %INCLUDE XU_FORMAT_C;
     1781     1243         %INCLUDE FK_PERR_C;
     1782     1252         %INCLUDE ZL_MACRO_C;
     1783     1902        /* */
     1784     1903         %FPT_READ(FPTN=READ_DATA, BUF=FKA_DATA_BUF, KEYS=YES,
     1785     1904         DCB=M$SI, KEY=FKA_DATA_GRAN, STCLASS=CONSTANT);
     1786     1943         %FPT_READ(FPTN=READ_INDEX, BUF=FKA_INDEX_BUF, KEYS=YES,
     1787     1944         DCB=M$SI, KEY=FKA_INDEX_GRAN, STCLASS=CONSTANT);
     1788     1983         %FPT_WRITE(DCB=M$SI, BUF=FKA_INDEX_BUF,
     1789     1984         KEY=FKA_INDEX_GRAN, STCLASS=CONSTANT);
     1790     2015         %FPT_RELSTARF(ALTKEYS=FKA_ALTKEY_BFR, STCLASS=CONSTANT);
     1791     2030        /* */
     1792     2031    1     DCL M$SI DCB;
     1793     2032    1     DCL M$DO DCB;
     1794     2033        /* */
     1795     2034         %F$DCB(DCBN=F$DCB, STCLASS="BASED(FKA_DCB$)");
     1796     2091         %FM$GRAN(BASED="BASED(FKA_INDEX_BUF$)");
     1797     2095         %FM$KEYTBL(BASED="BASED(FKA_KTPTR$)");
     1798     2098         %FITALTKEYS(BASED="BASED(FKA_ALTKEYS$)");
     1799     2104         %VLP_RECFIELD(FPTN=RECFIELD, STCLASS="BASED(FKA_RECFIELD$)");
     1800     2148         %FK$ALTKEY_BFR(FPTN=FKA_ALTKEY_BFR, STCLASS="SYMREF");
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:389  
     1801     2168         %FMG$IRKEYS(FPTN=IRKEYS, STCLASS="BASED(FKA_IRKEYS$)");
     1802     2175         %FM$MISEG(BASED="BASED(SEG$)");
     1803     2179         %FM$KEYENT(BASED="BASED(KEY$)");
     1804     2182         %FM$IRENT(BASED="BASED(KEY$)");
     1805     2185        /* */
     1806     2186         %SORT_TABLE(STCLASS=SYMREF);
     1807     2295        /* */
     1808     2296    1     DCL XUR$ERRMSG ENTRY(7) ALTRET;
     1809     2297    1     DCL FKA$ABORT ENTRY;
     1810     2298    1     DCL X$WRITE ENTRY(22);
     1811     2299    1     DCL FKA$COMPKEY ENTRY(3);
     1812     2300        /* */
     1813     2301    1     DCL FM_FRZERO UBIN SYMREF;
     1814     2302    1     DCL RECORD$ PTR;
     1815     2303    1     DCL NEXT_GRAN UBIN STATIC;
     1816     2304    1     DCL LAST_GRAN UBIN STATIC;
     1817     2305    1     DCL 1 LASTKEY STATIC,
     1818     2306    1            2 SIZE UBIN(18) CALIGNED,
     1819     2307    1            2 TEXT CHAR(1022) CALIGNED,
     1820     2308    1            2 BINTEXT REDEF TEXT,
     1821     2309    1               3 * CHAR(1022) CALIGNED;
     1822     2310    1     DCL LASTKEY$ PTR CONSTANT INIT(ADDR(LASTKEY.TEXT));
     1823     2311    1     DCL KEYSIZE SBIN STATIC;
     1824     2312    1     DCL KEYWORDS SBIN STATIC;
     1825     2313    1     DCL SEGCNT$ PTR STATIC;
     1826     2314    1     DCL KEYOFF SBIN STATIC;
     1827     2315    1     DCL NEXT_KEY SBIN STATIC;
     1828     2316    1     DCL RESULT SBIN STATIC;
     1829     2317    1     DCL UNIQUE BIT(1);
     1830     2318    1     DCL KEY$ PTR STATIC;
     1831     2319    1     DCL REPORT_INDEX# SBIN STATIC INIT(0);
     1832     2320    1     DCL KEY_SIZE SBIN;
     1833     2321    1     DCL KEY_TEMP(0:1023) UBIN(9) CALIGNED;
     1834     2322    1     DCL FIELD$ PTR;
     1835     2323    1     DCL ASCII BIT(1);
     1836     2324    1     DCL J SBIN;
     1837     2325    1     DCL K SBIN;
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:390  
     1838     2326    1     DCL N SBIN;
     1839     2327    1     DCL SEG$ PTR;
     1840     2328    1     DCL INDEX# SBIN STATIC INIT(0);
     1841     2329    1     DCL XBUF CHAR(2100) STATIC INIT(' ');
     1842     2330        /* */
     1843     2331    1     DCL SORT_REC_INDX UBIN(9) CALIGNED BASED(RECORD$);
     1844     2332    1     DCL SEGCNT UBIN(18) CALIGNED BASED(SEGCNT$);
     1845     2333    1     DCL 1 CHAR8 CALIGNED BASED,
     1846     2334    1            2 * CHAR(8);
     1847     2335    1     DCL TEXT CHAR(KEYSIZE) CALIGNED BASED;
     1848     2336    1     DCL 1 CLEAN_GRAN BASED,
     1849     2337    1            2 * CHAR(20),
     1850     2338    1            2 GRAN(0:1018) UBIN;
     1851     2339    1     DCL TEMPA(0:0) UBIN(9) CALIGNED BASED;
     1852     2340        /* */
     1853     2341         %EQU EQUAL=0;
     1854     2342         %EQU NOTEQUAL=1;
     1855     2343        /* */
     1856     2344    1           RECORD$=ADDR(RECORD);

   2344  5 000002   200003 236100                    LDQ     @RECORD,,AUTO
         5 000003   200005 756100                    STQ     RECORD$,,AUTO

     1857     2345    1           IF SORT_REC_INDX ~= INDEX# AND RECORD_SIZE > 0 THEN

   2345  5 000004   200005 470500                    LDP0    RECORD$,,AUTO
         5 000005   000100 101500                    MRL     fill='000'O
         5 000006   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
         5 000007   200430 000004                    ADSC9   SEG$+11,,AUTO            cn=0,n=4
         5 000010   200430 236100                    LDQ     SEG$+11,,AUTO
         5 000011   000412 116000 4                  CMPQ    INDEX#
         5 000012   000140 600000 5                  TZE     s:2386
         5 000013   200004 471500                    LDP1    @RECORD_SIZE,,AUTO
         5 000014   100000 235100                    LDA     0,,PR1
         5 000015   000140 604400 5                  TMOZ    s:2386

     1858     2346    2           DO;                             /* NEW INDEX                          */
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:391  

     1859     2347    2              IF INDEX# > 0 THEN

   2347  5 000016   000412 236000 4                  LDQ     INDEX#
         5 000017   000024 604400 5                  TMOZ    s:2349

     1860     2348    2                 CALL M$WRITE(FPT_WRITE) ALTRET(ABORT);

   2348  5 000020   000034 630400 1                  EPPR0   FPT_WRITE
         5 000021   440001 713400                    CLIMB   alt,write
         5 000022   401400 401760                    pmme    nvectors=4
         5 000023   000153 702000 5                  TSX2    ABORT

     1861     2349    2              INDEX#=SORT_REC_INDX;

   2349  5 000024   200005 470500                    LDP0    RECORD$,,AUTO
         5 000025   000000 101500                    MRL     fill='000'O
         5 000026   000000 000001                    ADSC9   0,,PR0                   cn=0,n=1
         5 000027   000412 000004 4                  ADSC9   INDEX#                   cn=0,n=4

     1862     2350    2              IF F$DCB.ORG# = %INDEXED# THEN

   2350  5 000030   000000 471400 xsym               LDP1    FKA_DCB$
         5 000031   100032 236100                    LDQ     26,,PR1
         5 000032   777000 376003                    ANQ     -512,DU
         5 000033   006000 116003                    CMPQ    3072,DU
         5 000034   000044 601000 5                  TNZ     s:2353

     1863     2351    2                 FKA_INDEX_GRAN=FITALTKEYS.K.FDA(INDEX#);

   2351  5 000035   000412 236000 4                  LDQ     INDEX#
         5 000036   000006 402007                    MPY     6,DL
         5 000037   000000 473400 xsym               LDP3    FKA_ALTKEYS$
         5 000040   300001 236106                    LDQ     1,QL,PR3
         5 000041   000032 376000 xsym               ANQ     B_VECTNIL+26
         5 000042   000000 756000 xsym               STQ     FKA_INDEX_GRAN
         5 000043   000052 710000 5                  TRA     s:2355
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:392  

     1864     2352    2              ELSE
     1865     2353    2                 FKA_INDEX_GRAN=IRKEYS.K.FDA(INDEX#);

   2353  5 000044   000412 236000 4                  LDQ     INDEX#
         5 000045   000007 402007                    MPY     7,DL
         5 000046   000000 473400 xsym               LDP3    FKA_IRKEYS$
         5 000047   300007 236106                    LDQ     7,QL,PR3
         5 000050   000032 376000 xsym               ANQ     B_VECTNIL+26
         5 000051   000000 756000 xsym               STQ     FKA_INDEX_GRAN

     1866     2354
     1867     2355    2              IF FKA_INDEX_GRAN ~= 0 THEN

   2355  5 000052   000062 600000 5                  TZE     s:2362

     1868     2356    3              DO;                          /* READ FIRST GRAN                    */

     1869     2357    3                 FKA_INDEX_GRAN=FKA_INDEX_GRAN-FM_FRZERO;

   2357  5 000053   000000 136000 xsym               SBLQ    FM_FRZERO
         5 000054   000000 756000 xsym               STQ     FKA_INDEX_GRAN

     1870     2358    3                 CALL M$READ(READ_INDEX) ALTRET(ABORT);

   2358  5 000055   000016 630400 1                  EPPR0   READ_INDEX
         5 000056   440000 713400                    CLIMB   alt,read
         5 000057   401400 401760                    pmme    nvectors=4
         5 000060   000153 702000 5                  TSX2    ABORT

     1871     2359    3                 END;                      /* READ FIRST GRAN                    */

   2359  5 000061   000075 710000 5                  TRA     s:2368

     1872     2360    2              ELSE
     1873     2361    3              DO;                          /* ALLOCATE FIRST GRAN                */

PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:393  
     1874     2362    3                 FKA_ALTKEY_BFR.CODE=%ALTKEY_EXTEND#;

   2362  5 000062   000001 235007                    LDA     1,DL
         5 000063   000002 755000 xsym               STA     FKA_ALTKEY_BFR+2

     1875     2363    3                 CALL M$RELSTARF(FPT_RELSTARF) ALTRET(ABORT);

   2363  5 000064   000050 630400 1                  EPPR0   FPT_RELSTARF
         5 000065   460010 713400                    CLIMB   alt,+24584
         5 000066   400400 401760                    pmme    nvectors=2
         5 000067   000153 702000 5                  TSX2    ABORT

     1876     2364    3                 FKA_INDEX_GRAN=FKA_ALTKEY_BFR.DA-FM_FRZERO;

   2364  5 000070   000003 236000 xsym               LDQ     FKA_ALTKEY_BFR+3
         5 000071   000000 136000 xsym               SBLQ    FM_FRZERO
         5 000072   000000 756000 xsym               STQ     FKA_INDEX_GRAN

     1877     2365    3                 FM$GRAN.FLINK=0;

   2365  5 000073   000000 470400 xsym               LDP0    FKA_INDEX_BUF$
         5 000074   000004 450100                    STZ     4,,PR0

     1878     2366    3                 END;                      /* ALLOCATE FIRST GRAN                */

     1879     2367
     1880     2368    2              IF F$DCB.ORG# = %INDEXED# THEN

   2368  5 000075   000000 470400 xsym               LDP0    FKA_DCB$
         5 000076   000032 236100                    LDQ     26,,PR0
         5 000077   777000 376003                    ANQ     -512,DU
         5 000100   006000 116003                    CMPQ    3072,DU
         5 000101   000114 601000 5                  TNZ     s:2375

     1881     2369    3              DO;                          /* INDEXED                            */

     1882     2370    3                 KEYSIZE=FITALTKEYS.K.KEYL(INDEX#);
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:394  

   2370  5 000102   000412 236000 4                  LDQ     INDEX#
         5 000103   000006 402007                    MPY     6,DL
         5 000104   000000 471400 xsym               LDP1    FKA_ALTKEYS$
         5 000105   100001 236106                    LDQ     1,QL,PR1
         5 000106   000033 772000                    QRL     27
         5 000107   000402 756000 4                  STQ     KEYSIZE

     1883     2371    3                 KEYWORDS=(KEYSIZE+4)/4;

   2371  5 000110   000004 036007                    ADLQ    4,DL
         5 000111   000004 506007                    DIV     4,DL
         5 000112   000403 756000 4                  STQ     KEYWORDS

     1884     2372    3                 END;                      /* INDEXED                            */

   2372  5 000113   000125 710000 5                  TRA     s:2379

     1885     2373    2              ELSE
     1886     2374    3              DO;                          /* IREL                               */

     1887     2375    3                 KEYSIZE=IRKEYS.K.KEYL(INDEX#);

   2375  5 000114   000412 236000 4                  LDQ     INDEX#
         5 000115   000007 402007                    MPY     7,DL
         5 000116   000000 471400 xsym               LDP1    FKA_IRKEYS$
         5 000117   100005 236106                    LDQ     5,QL,PR1
         5 000120   000022 772000                    QRL     18
         5 000121   000402 756000 4                  STQ     KEYSIZE

     1888     2376    3                 KEYWORDS=(KEYSIZE+5)/4;

   2376  5 000122   000005 036007                    ADLQ    5,DL
         5 000123   000004 506007                    DIV     4,DL
         5 000124   000403 756000 4                  STQ     KEYWORDS

     1889     2377    3                 END;                      /* IREL                               */
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:395  

     1890     2378
     1891     2379    2              NEXT_GRAN=FM$GRAN.FLINK;

   2379  5 000125   000000 471400 xsym               LDP1    FKA_INDEX_BUF$
         5 000126   100004 235100                    LDA     4,,PR1
         5 000127   000000 755000 4                  STA     NEXT_GRAN

     1892     2380    2              LAST_GRAN=0;

   2380  5 000130   000001 450000 4                  STZ     LAST_GRAN

     1893     2381    2              CALL INIT_GRAN;

   2381  5 000131   000410 701000 5                  TSX1    INIT_GRAN
         5 000132   000000 011000                    NOP     0

     1894     2382    2              LASTKEY.SIZE=0;

   2382  5 000133   000000 220003                    LDX0    0,DU
         5 000134   000002 740000 4                  STX0    LASTKEY

     1895     2383    2              LASTKEY.BINTEXT='0'B;

   2383  5 000135   000000 100400                    MLR     fill='000'O
         5 000136   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         5 000137   000002 401776 4                  ADSC9   LASTKEY                  cn=2,n=1022

     1896     2384    2              END;                         /* NEW INDEX                          */

     1897     2385
     1898     2386    1           IF RECORD_SIZE > 0 THEN

   2386  5 000140   200004 470500                    LDP0    @RECORD_SIZE,,AUTO
         5 000141   000000 235100                    LDA     0,,PR0
         5 000142   000146 604400 5                  TMOZ    s:2389

PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:396  
     1899     2387    1              CALL WRITE_RECORD;

   2387  5 000143   000737 701000 5                  TSX1    WRITE_RECORD
         5 000144   000000 011000                    NOP     0
         5 000145   000152 710000 5                  TRA     s:2390

     1900     2388    1           ELSE
     1901     2389    1              CALL M$WRITE(FPT_WRITE) ALTRET(ABORT);

   2389  5 000146   000034 630400 1                  EPPR0   FPT_WRITE
         5 000147   440001 713400                    CLIMB   alt,write
         5 000150   401400 401760                    pmme    nvectors=4
         5 000151   000153 702000 5                  TSX2    ABORT

     1902     2390    1           RETURN;

   2390  5 000152   000000 702200 xent               TSX2  ! X66_ARET

     1903     2391    1   ABORT:  CALL FKA$ABORT;

   2391  5 000153   000002 631400 xsym  ABORT        EPPR1   B_VECTNIL+2
         5 000154   000000 701000 xent               TSX1    FKA$ABORT
         5 000155   000000 011000                    NOP     0
         5 000156   000766 710000 5                  TRA     s:2620

     1904     2392         %EJECT;
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:397  
     1905     2393        /*I*     NAME:     ADDKEY
     1906     2394                 PURPOSE:  To add a new key to the file
     1907     2395                 DESCRIPTION:
     1908     2396
     1909     2397                      Compare the last key with the current key.  If
     1910     2398                 they are equal, then build a new segment.  Otherwise,
     1911     2399                 build a new key.  If the key was specified as unique,
     1912     2400                 then indicate an error as well and reset the unique indicator
     1913     2401                 for the key.
     1914     2402        */
     1915     2403         %EJECT;
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:398  
     1916     2404    1   ADDKEY:    PROC;

   2404  5 000157   200420 741300       ADDKEY       STX1  ! SEG$+3,,AUTO

     1917     2405        /* */
     1918     2406    2              RESULT=%NOTEQUAL;

   2406  5 000160   000001 235007                    LDA     1,DL
         5 000161   000407 755000 4                  STA     RESULT

     1919     2407    3              IF LASTKEY.SIZE ~= 0 THEN DO; /* Compare current and last keys     */

   2407  5 000162   000002 220000 4                  LDX0    LASTKEY
         5 000163   000231 600000 5                  TZE     s:2422

     1920     2408    3                 IF F$DCB.ORG# = %INDEXED# OR /* INDEXED or degenerate IREL case. */

   2408  5 000164   000000 470400 xsym               LDP0    FKA_DCB$
         5 000165   000032 236100                    LDQ     26,,PR0
         5 000166   777000 376003                    ANQ     -512,DU
         5 000167   006000 116003                    CMPQ    3072,DU
         5 000170   000202 600000 5                  TZE     s:2411
         5 000171   000034 236000 xsym               LDQ     SORT_TABLE+28
         5 000172   000002 116000 xsym               CMPQ    B_VECTNIL+2
         5 000173   000202 600000 5                  TZE     s:2411
         5 000174   000412 236000 4                  LDQ     INDEX#
         5 000175   000007 402007                    MPY     7,DL
         5 000176   000000 471400 xsym               LDP1    FKA_IRKEYS$
         5 000177   100006 236106                    LDQ     6,QL,PR1
         5 000200   040000 316007                    CANQ    16384,DL
         5 000201   000216 600000 5                  TZE     s:2417

     1921     2409    3                     SORT_TABLE.SECONDARY.KCE$ = ENTADDR(NIL) OR
     1922     2410    4                     IRKEYS.K.DEGENERATE(INDEX#) THEN DO;

     1923     2411    4                    IF RECORD$->TEXT ~= LASTKEY$->TEXT THEN

PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:399  
   2411  5 000202   200005 471500                    LDP1    RECORD$,,AUTO
         5 000203   000402 722000 4                  LXL2    KEYSIZE
         5 000204   000054 473400 1                  LDP3    LASTKEY$
         5 000205   040140 106540                    CMPC    fill='040'O
         5 000206   100000 000012                    ADSC9   0,,PR1                   cn=0,n=*X2
         5 000207   300000 000012                    ADSC9   0,,PR3                   cn=0,n=*X2
         5 000210   000214 600000 5                  TZE     s:2414

     1924     2412    4                       RESULT=%NOTEQUAL;

   2412  5 000211   000001 235007                    LDA     1,DL
         5 000212   000407 755000 4                  STA     RESULT
         5 000213   000231 710000 5                  TRA     s:2422

     1925     2413    4                    ELSE
     1926     2414    4                       RESULT=%EQUAL;

   2414  5 000214   000407 450000 4                  STZ     RESULT

     1927     2415    4                    END;

   2415  5 000215   000231 710000 5                  TRA     s:2422

     1928     2416    4                 ELSE DO;                  /* Complex IREL compare               */

     1929     2417    4                    RESULT=INDEX#;

   2417  5 000216   000412 235000 4                  LDA     INDEX#
         5 000217   000407 755000 4                  STA     RESULT

     1930     2418    4                    CALL FKA$COMPKEY(RECORD$->TEXT, LASTKEY$->TEXT, RESULT);

   2418  5 000220   000000 236000 6                  LDQ     0
         5 000221   200432 756100                    STQ     SEG$+13,,AUTO
         5 000222   000054 236000 1                  LDQ     LASTKEY$
         5 000223   200005 235100                    LDA     RECORD$,,AUTO
         5 000224   200430 757100                    STAQ    SEG$+11,,AUTO
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:400  
         5 000225   200430 630500                    EPPR0   SEG$+11,,AUTO
         5 000226   000021 631400 xsym               EPPR1   B_VECTNIL+17
         5 000227   000000 701000 xent               TSX1    FKA$COMPKEY
         5 000230   000000 011000                    NOP     0

     1931     2419    4                    END;

     1932     2420    3                 END;

     1933     2421
     1934     2422    2              IF RESULT = %EQUAL THEN

   2422  5 000231   000407 235000 4                  LDA     RESULT
         5 000232   000255 601000 5                  TNZ     s:2433

     1935     2423    3              DO;                          /* DUPLICATE KEY                      */

     1936     2424    3                 IF FKA_UNIQUE(INDEX#) THEN

   2424  5 000233   000412 236000 4                  LDQ     INDEX#
         5 000234   000236 605000 5                  TPL     s:2424+3
         5 000235   000044 036003                    ADLQ    36,DU
         5 000236   000000 066406                    CMPB    filb='0'B
         5 000237   000000 000001 xsym               BDSC    FKA_UNIQUE,Q             by=0,bit=0,n=1
         5 000240   000002 000022 xsym               BDSC    B_VECTNIL+2              by=0,bit=0,n=18
         5 000241   000252 600000 5                  TZE     s:2430

     1937     2425    4                 DO;                       /* It's not really unique             */

     1938     2426    4                    FKA_DUPS=%YES#;

   2426  5 000242   400000 236003                    LDQ     -131072,DU
         5 000243   000000 756000 xsym               STQ     FKA_DUPS

     1939     2427    4                    FKA_UNIQUE(INDEX#)=%NO#;

   2427  5 000244   000412 235000 4                  LDA     INDEX#
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:401  
         5 000245   000247 605000 5                  TPL     s:2427+3
         5 000246   000044 035003                    ADLA    36,DU
         5 000247   003005 060400                    CSL     bolr='003'O
         5 000250   000002 000001 xsym               BDSC    B_VECTNIL+2              by=0,bit=0,n=1
         5 000251   000000 000001 xsym               BDSC    FKA_UNIQUE,A             by=0,bit=0,n=1

     1940     2428    4                    END;                   /* It's not really unique             */

     1941     2429
     1942     2430    3                 CALL ADDSEG;

   2430  5 000252   000261 701000 5                  TSX1    ADDSEG
         5 000253   000000 011000                    NOP     0

     1943     2431    3                 END;                      /* DUPLICATE KEY                      */

   2431  5 000254   000257 710000 5                  TRA     s:2435

     1944     2432    2              ELSE
     1945     2433    2                 CALL NEWKEY;

   2433  5 000255   000554 701000 5                  TSX1    NEWKEY
         5 000256   000000 011000                    NOP     0

     1946     2434
     1947     2435    2              RETURN;

   2435  5 000257   200420 221300                    LDX1  ! SEG$+3,,AUTO
         5 000260   000001 702211                    TSX2  ! 1,X1

     1948     2436    2      END ADDKEY;
     1949     2437         %EJECT;
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:402  
     1950     2438        /*I*     NAME:     ADDSEG
     1951     2439                 PURPOSE:  To add a new segment to a file
     1952     2440                 DESCRIPTION:
     1953     2441
     1954     2442                      If we ran out of space, then allocate a new granule.
     1955     2443                 Increment the record pointer to the MISEG.  Store the
     1956     2444                 MISEG in the file.  Update our counters and pointers.
     1957     2445        */
     1958     2446    1   ADDSEG:    PROC;

   2446  5 000261   200422 741300       ADDSEG       STX1  ! SEG$+5,,AUTO

     1959     2447        /* */
     1960     2448    2              IF FM$GRAN.AVAIL < F$DCB.SPARE#+2 THEN

   2448  5 000262   000000 470400 xsym               LDP0    FKA_DCB$
         5 000263   000040 236100                    LDQ     32,,PR0
         5 000264   000033 772000                    QRL     27
         5 000265   000002 036007                    ADLQ    2,DL
         5 000266   200430 756100                    STQ     SEG$+11,,AUTO
         5 000267   000000 471400 xsym               LDP1    FKA_INDEX_BUF$
         5 000270   100001 236100                    LDQ     1,,PR1
         5 000271   001777 376007                    ANQ     1023,DL
         5 000272   200430 116100                    CMPQ    SEG$+11,,AUTO
         5 000273   000276 605000 5                  TPL     s:2451

     1961     2449    2                 CALL ALLOCATE;

   2449  5 000274   000331 701000 5                  TSX1    ALLOCATE
         5 000275   000000 011000                    NOP     0

     1962     2450
     1963     2451    2              RECORD$=PINCRC(RECORD$, FKA_KEYSIZE+6);

   2451  5 000276   000000 236000 xsym               LDQ     FKA_KEYSIZE
         5 000277   000020 736000                    QLS     16
         5 000300   000001 036000 6                  ADLQ    1
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:403  
         5 000301   200005 036100                    ADLQ    RECORD$,,AUTO
         5 000302   200005 756100                    STQ     RECORD$,,AUTO

     1964     2452    2              KEY$->FM$MISEG=RECORD$->CHAR8;

   2452  5 000303   200005 470500                    LDP0    RECORD$,,AUTO
         5 000304   000410 471400 4                  LDP1    KEY$
         5 000305   000100 100500                    MLR     fill='000'O
         5 000306   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8
         5 000307   100000 000010                    ADSC9   0,,PR1                   cn=0,n=8

     1965     2453    2              KEY$=PINCRW(KEY$, 2);

   2453  5 000310   000410 236000 4                  LDQ     KEY$
         5 000311   000002 036003                    ADLQ    2,DU
         5 000312   000410 756000 4                  STQ     KEY$

     1966     2454    2              FM$GRAN.AVAIL=FM$GRAN.AVAIL-2;

   2454  5 000313   000000 471400 xsym               LDP1    FKA_INDEX_BUF$
         5 000314   100001 236100                    LDQ     1,,PR1
         5 000315   001777 376007                    ANQ     1023,DL
         5 000316   000002 136007                    SBLQ    2,DL
         5 000317   100001 676100                    ERQ     1,,PR1
         5 000320   001777 376007                    ANQ     1023,DL
         5 000321   100001 656100                    ERSQ    1,,PR1

     1967     2455    2              FM$GRAN.NAVX=FM$GRAN.NAVX+2;

   2455  5 000322   100001 220100                    LDX0    1,,PR1
         5 000323   000002 621010                    EAX1    2,X0
         5 000324   100001 741100                    STX1    1,,PR1

     1968     2456    2              KEYOFF=KEYOFF+2;

   2456  5 000325   000002 236007                    LDQ     2,DL
         5 000326   000405 056000 4                  ASQ     KEYOFF
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:404  

     1969     2457
     1970     2458    2              RETURN;

   2458  5 000327   200422 221300                    LDX1  ! SEG$+5,,AUTO
         5 000330   000001 702211                    TSX2  ! 1,X1

     1971     2459    2      END ADDSEG;
     1972     2460         %EJECT;
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:405  
     1973     2461        /*I*     NAME:     ALLOCATE
     1974     2462                 PURPOSE:  To allocate a new granule
     1975     2463                 DESCRIPTION:
     1976     2464
     1977     2465                      If there is no next granule, then call M$RELSTARF
     1978     2466                 to do a sleazy extend of the file.  Otherwise, read
     1979     2467                 the next granule, and save the flink.  In both cases,
     1980     2468                 initialize the granule.
     1981     2469        */
     1982     2470         %EJECT;
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:406  
     1983     2471    1   ALLOCATE:  PROC;

   2471  5 000331   200424 741300       ALLOCATE     STX1  ! SEG$+7,,AUTO

     1984     2472        /* */
     1985     2473    2              IF NEXT_GRAN = 0 THEN

   2473  5 000332   000000 235000 4                  LDA     NEXT_GRAN
         5 000333   000357 601000 5                  TNZ     s:2485

     1986     2474    3              DO;                          /* ALLOCATE ANOTHER GRANULE           */

     1987     2475    3                 FKA_ALTKEY_BFR.CODE=%ALTKEY_EXTEND#;

   2475  5 000334   000001 236007                    LDQ     1,DL
         5 000335   000002 756000 xsym               STQ     FKA_ALTKEY_BFR+2

     1988     2476    3                 CALL M$RELSTARF(FPT_RELSTARF) ALTRET(ABORT);

   2476  5 000336   000050 630400 1                  EPPR0   FPT_RELSTARF
         5 000337   460010 713400                    CLIMB   alt,+24584
         5 000340   400400 401760                    pmme    nvectors=2
         5 000341   000403 702000 5                  TSX2    ABORT

     1989     2477
     1990     2478    3                 FM$GRAN.FLINK=FKA_ALTKEY_BFR.DA;

   2478  5 000342   000003 235000 xsym               LDA     FKA_ALTKEY_BFR+3
         5 000343   000000 470400 xsym               LDP0    FKA_INDEX_BUF$
         5 000344   000004 755100                    STA     4,,PR0

     1991     2479    3                 CALL M$WRITE(FPT_WRITE) ALTRET(ABORT);

   2479  5 000345   000034 630400 1                  EPPR0   FPT_WRITE
         5 000346   440001 713400                    CLIMB   alt,write
         5 000347   401400 401760                    pmme    nvectors=4
         5 000350   000403 702000 5                  TSX2    ABORT
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:407  

     1992     2480    3                 FKA_INDEX_GRAN=FKA_ALTKEY_BFR.DA-FM_FRZERO;

   2480  5 000351   000003 236000 xsym               LDQ     FKA_ALTKEY_BFR+3
         5 000352   000000 136000 xsym               SBLQ    FM_FRZERO
         5 000353   000000 756000 xsym               STQ     FKA_INDEX_GRAN

     1993     2481    3                 CALL INIT_GRAN;

   2481  5 000354   000410 701000 5                  TSX1    INIT_GRAN
         5 000355   000000 011000                    NOP     0

     1994     2482    3                 END;                      /* ALLOCATE ANOTHER GRANULE           */

   2482  5 000356   000401 710000 5                  TRA     s:2495

     1995     2483    2              ELSE
     1996     2484    3              DO;                          /* GET NEXT GRAN                      */

     1997     2485    3                 FM$GRAN.FLINK=NEXT_GRAN;

   2485  5 000357   000000 470400 xsym               LDP0    FKA_INDEX_BUF$
         5 000360   000004 755100                    STA     4,,PR0

     1998     2486    3                 CALL M$WRITE(FPT_WRITE) ALTRET(ABORT);

   2486  5 000361   000034 630400 1                  EPPR0   FPT_WRITE
         5 000362   440001 713400                    CLIMB   alt,write
         5 000363   401400 401760                    pmme    nvectors=4
         5 000364   000403 702000 5                  TSX2    ABORT

     1999     2487
     2000     2488    3                 FKA_INDEX_GRAN=NEXT_GRAN-FM_FRZERO;

   2488  5 000365   000000 236000 4                  LDQ     NEXT_GRAN
         5 000366   000000 136000 xsym               SBLQ    FM_FRZERO
         5 000367   000000 756000 xsym               STQ     FKA_INDEX_GRAN
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:408  

     2001     2489    3                 CALL M$READ(READ_INDEX) ALTRET(ABORT);

   2489  5 000370   000016 630400 1                  EPPR0   READ_INDEX
         5 000371   440000 713400                    CLIMB   alt,read
         5 000372   401400 401760                    pmme    nvectors=4
         5 000373   000403 702000 5                  TSX2    ABORT

     2002     2490
     2003     2491    3                 NEXT_GRAN=FM$GRAN.FLINK;

   2491  5 000374   000000 470400 xsym               LDP0    FKA_INDEX_BUF$
         5 000375   000004 235100                    LDA     4,,PR0
         5 000376   000000 755000 4                  STA     NEXT_GRAN

     2004     2492    3                 CALL INIT_GRAN;

   2492  5 000377   000410 701000 5                  TSX1    INIT_GRAN
         5 000400   000000 011000                    NOP     0

     2005     2493    3                 END;                      /* GET NEXT GRAN                      */

     2006     2494
     2007     2495    2              RETURN;

   2495  5 000401   200424 221300                    LDX1  ! SEG$+7,,AUTO
         5 000402   000001 702211                    TSX2  ! 1,X1

     2008     2496    2   ABORT:     CALL FKA$ABORT;

   2496  5 000403   000002 631400 xsym  ABORT        EPPR1   B_VECTNIL+2
         5 000404   000000 701000 xent               TSX1    FKA$ABORT
         5 000405   000000 011000                    NOP     0

     2009     2497    2      END ALLOCATE;

   2497  5 000406   200424 221300                    LDX1  ! SEG$+7,,AUTO
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:409  
         5 000407   000001 702211                    TSX2  ! 1,X1

     2010     2498         %EJECT;
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:410  
     2011     2499        /*I*     NAME:     INIT_GRAN
     2012     2500                 PURPOSE:  To initialize a granule buffer
     2013     2501                 DESCRIPTION:
     2014     2502
     2015     2503                      First, clean out all but the header.  Set
     2016     2504                 the GMOD part of the stamp to the DA of the granule.
     2017     2505                 Set the FLINK and BLINK.  If this is the first granule
     2018     2506                 allocated for this index, then set the FDA.
     2019     2507
     2020     2508                      Set the LDA.  This is currently the last granule
     2021     2509                 in this index now.
     2022     2510
     2023     2511                      Initialize some more of the header, and set up
     2024     2512                 the key table.
     2025     2513        */
     2026     2514         %EJECT;
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:411  
     2027     2515    1   INIT_GRAN: PROC;

   2515  5 000410   200426 741300       INIT_GRAN    STX1  ! SEG$+9,,AUTO

     2028     2516        /* */
     2029     2517    2              FKA_INDEX_BUF$->CLEAN_GRAN.GRAN='0'B;

   2517  5 000411   000000 470400 xsym               LDP0    FKA_INDEX_BUF$
         5 000412   000100 100400                    MLR     fill='000'O
         5 000413   000002 000001 xsym               ADSC9   B_VECTNIL+2              cn=0,n=1
         5 000414   000005 007754                    ADSC9   5,,PR0                   cn=0,n=4076

     2030     2518    2              FM$GRAN.STAMP.GMOD=FKA_INDEX_GRAN;

   2518  5 000415   000000 236000 xsym               LDQ     FKA_INDEX_GRAN
         5 000416   000000 552104                    STBQ    0,'04'O,PR0

     2031     2519    2              FM$GRAN.BLINK=LAST_GRAN;

   2519  5 000417   000001 235000 4                  LDA     LAST_GRAN
         5 000420   000003 755100                    STA     3,,PR0

     2032     2520    2              FM$GRAN.FLINK=0;

   2520  5 000421   000004 450100                    STZ     4,,PR0

     2033     2521    2              IF LAST_GRAN = 0 THEN

   2521  5 000422   000453 601000 5                  TNZ     s:2529

     2034     2522    3              DO;                          /* SET FDA                            */

     2035     2523    3                 IF F$DCB.ORG# = %INDEXED# THEN

   2523  5 000423   000000 471400 xsym               LDP1    FKA_DCB$
         5 000424   100032 236100                    LDQ     26,,PR1
         5 000425   777000 376003                    ANQ     -512,DU
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:412  
         5 000426   006000 116003                    CMPQ    3072,DU
         5 000427   000442 601000 5                  TNZ     s:2526

     2036     2524    3                    FITALTKEYS.K.FDA(INDEX#)=FKA_INDEX_GRAN+FM_FRZERO;

   2524  5 000430   000412 236000 4                  LDQ     INDEX#
         5 000431   000006 402007                    MPY     6,DL
         5 000432   000000 620006                    EAX0    0,QL
         5 000433   000000 236000 xsym               LDQ     FKA_INDEX_GRAN
         5 000434   000000 036000 xsym               ADLQ    FM_FRZERO
         5 000435   000000 473400 xsym               LDP3    FKA_ALTKEYS$
         5 000436   300001 676110                    ERQ     1,X0,PR3
         5 000437   000032 376000 xsym               ANQ     B_VECTNIL+26
         5 000440   300001 656110                    ERSQ    1,X0,PR3
         5 000441   000453 710000 5                  TRA     s:2529

     2037     2525    3                 ELSE
     2038     2526    3                    IRKEYS.K.FDA(INDEX#)=FKA_INDEX_GRAN+FM_FRZERO;

   2526  5 000442   000412 236000 4                  LDQ     INDEX#
         5 000443   000007 402007                    MPY     7,DL
         5 000444   000000 620006                    EAX0    0,QL
         5 000445   000000 236000 xsym               LDQ     FKA_INDEX_GRAN
         5 000446   000000 036000 xsym               ADLQ    FM_FRZERO
         5 000447   000000 473400 xsym               LDP3    FKA_IRKEYS$
         5 000450   300007 676110                    ERQ     7,X0,PR3
         5 000451   000032 376000 xsym               ANQ     B_VECTNIL+26
         5 000452   300007 656110                    ERSQ    7,X0,PR3

     2039     2527    3                 END;                      /* SET FDA                            */

     2040     2528
     2041     2529    2              IF F$DCB.ORG# = %INDEXED# THEN

   2529  5 000453   000000 471400 xsym               LDP1    FKA_DCB$
         5 000454   100032 236100                    LDQ     26,,PR1
         5 000455   777000 376003                    ANQ     -512,DU
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:413  
         5 000456   006000 116003                    CMPQ    3072,DU
         5 000457   000473 601000 5                  TNZ     s:2532

     2042     2530    2                 FITALTKEYS.K.LDA(INDEX#)=FKA_INDEX_GRAN+FM_FRZERO;

   2530  5 000460   000412 236000 4                  LDQ     INDEX#
         5 000461   000006 402007                    MPY     6,DL
         5 000462   000000 620006                    EAX0    0,QL
         5 000463   000000 236000 xsym               LDQ     FKA_INDEX_GRAN
         5 000464   000000 036000 xsym               ADLQ    FM_FRZERO
         5 000465   000000 473400 xsym               LDP3    FKA_ALTKEYS$
         5 000466   000011 736000                    QLS     9
         5 000467   300002 676110                    ERQ     2,X0,PR3
         5 000470   000002 376000 6                  ANQ     2
         5 000471   300002 656110                    ERSQ    2,X0,PR3
         5 000472   000504 710000 5                  TRA     s:2534

     2043     2531    2              ELSE
     2044     2532    2                 IRKEYS.K.LDA(INDEX#)=FKA_INDEX_GRAN+FM_FRZERO;

   2532  5 000473   000412 236000 4                  LDQ     INDEX#
         5 000474   000007 402007                    MPY     7,DL
         5 000475   000000 620006                    EAX0    0,QL
         5 000476   000000 236000 xsym               LDQ     FKA_INDEX_GRAN
         5 000477   000000 036000 xsym               ADLQ    FM_FRZERO
         5 000500   000000 473400 xsym               LDP3    FKA_IRKEYS$
         5 000501   300011 676110                    ERQ     9,X0,PR3
         5 000502   000032 376000 xsym               ANQ     B_VECTNIL+26
         5 000503   300011 656110                    ERSQ    9,X0,PR3

     2045     2533
     2046     2534    2              LAST_GRAN=FKA_INDEX_GRAN+FM_FRZERO;

   2534  5 000504   000000 236000 xsym               LDQ     FKA_INDEX_GRAN
         5 000505   000000 036000 xsym               ADLQ    FM_FRZERO
         5 000506   000001 756000 4                  STQ     LAST_GRAN

PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:414  
     2047     2535    2              FM$GRAN.FCEX=SIZEW(FM$GRAN);

   2535  5 000507   000005 220003                    LDX0    5,DU
         5 000510   000002 740100                    STX0    2,,PR0

     2048     2536    2              FM$GRAN.KEYCNT=0;

   2536  5 000511   000000 236003                    LDQ     0,DU
         5 000512   000002 552104                    STBQ    2,'04'O,PR0

     2049     2537    2              FKA_KTPTR$=PINCRW(FKA_INDEX_BUF$, SIZEW(FM$GRAN));

   2537  5 000513   000000 236000 xsym               LDQ     FKA_INDEX_BUF$
         5 000514   000005 036003                    ADLQ    5,DU
         5 000515   000000 756000 xsym               STQ     FKA_KTPTR$

     2050     2538    2              FM$KEYTBL(0)=SIZEC(FM$KEYTBL);

   2538  5 000516   000000 471400 xsym               LDP1    FKA_KTPTR$
         5 000517   430000 236003                    LDQ     -118784,DU
         5 000520   100000 552140                    STBQ    0,'40'O,PR1

     2051     2539    2              KEY$=PINCRW(FKA_KTPTR$, SIZEW(FM$KEYTBL));

   2539  5 000521   000000 236000 xsym               LDQ     FKA_KTPTR$
         5 000522   000106 036003                    ADLQ    70,DU
         5 000523   000410 756000 4                  STQ     KEY$

     2052     2540    2              FM$GRAN.AVAIL=1024-POFFW(KEY$, FKA_INDEX_BUF$);

   2540  5 000524   000000 235000 xsym               LDA     FKA_INDEX_BUF$
         5 000525   000022 771000                    ARL     18
         5 000526   200430 755100                    STA     SEG$+11,,AUTO
         5 000527   000410 236000 4                  LDQ     KEY$
         5 000530   000022 772000                    QRL     18
         5 000531   200430 136100                    SBLQ    SEG$+11,,AUTO
         5 000532   000027 676000 xsym               ERQ     B_VECTNIL+23
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:415  
         5 000533   002001 036007                    ADLQ    1025,DL
         5 000534   000001 676100                    ERQ     1,,PR0
         5 000535   001777 376007                    ANQ     1023,DL
         5 000536   000001 656100                    ERSQ    1,,PR0

     2053     2541    2              FM$GRAN.NAVX=POFFW(KEY$, FKA_INDEX_BUF$);

   2541  5 000537   200430 755100                    STA     SEG$+11,,AUTO
         5 000540   000410 236000 4                  LDQ     KEY$
         5 000541   000022 772000                    QRL     18
         5 000542   200430 136100                    SBLQ    SEG$+11,,AUTO
         5 000543   000000 621006                    EAX1    0,QL
         5 000544   000001 741100                    STX1    1,,PR0

     2054     2542    2              NEXT_KEY=1;

   2542  5 000545   000001 236007                    LDQ     1,DL
         5 000546   000406 756000 4                  STQ     NEXT_KEY

     2055     2543    2              KEYOFF=FM$GRAN.NAVX;

   2543  5 000547   000001 236100                    LDQ     1,,PR0
         5 000550   000022 772000                    QRL     18
         5 000551   000405 756000 4                  STQ     KEYOFF

     2056     2544
     2057     2545    2              RETURN;

   2545  5 000552   200426 221300                    LDX1  ! SEG$+9,,AUTO
         5 000553   000001 702211                    TSX2  ! 1,X1

     2058     2546    2      END INIT_GRAN;
     2059     2547         %EJECT;
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:416  
     2060     2548        /*I*     NAME:     NEWKEY
     2061     2549                 PURPOSE:  To build a new key in the file
     2062     2550                 DESCRIPTION:
     2063     2551
     2064     2552                      If we don't have space for the new key, then
     2065     2553                 allocate a new granule.  Move the information from
     2066     2554                 the sorted record to the index buffer.
     2067     2555
     2068     2556                      Save this as the last key now.  Update the key
     2069     2557                 table and granule header information.
     2070     2558        */
     2071     2559         %EJECT;
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:417  
     2072     2560    1   NEWKEY:    PROC;

   2560  5 000554   200422 741300       NEWKEY       STX1  ! SEG$+5,,AUTO

     2073     2561        /* */
     2074     2562    2             IF FM$GRAN.AVAIL < F$DCB.SPARE#+KEYWORDS+2 OR FM$GRAN.KEYCNT+1 > 279 THEN

   2562  5 000555   000000 470400 xsym               LDP0    FKA_DCB$
         5 000556   000040 236100                    LDQ     32,,PR0
         5 000557   000033 772000                    QRL     27
         5 000560   000403 036000 4                  ADLQ    KEYWORDS
         5 000561   000002 036007                    ADLQ    2,DL
         5 000562   200430 756100                    STQ     SEG$+11,,AUTO
         5 000563   000000 471400 xsym               LDP1    FKA_INDEX_BUF$
         5 000564   100001 236100                    LDQ     1,,PR1
         5 000565   001777 376007                    ANQ     1023,DL
         5 000566   200430 116100                    CMPQ    SEG$+11,,AUTO
         5 000567   000574 604000 5                  TMI     s:2563
         5 000570   100002 236100                    LDQ     2,,PR1
         5 000571   000777 376007                    ANQ     511,DL
         5 000572   000427 116007                    CMPQ    279,DL
         5 000573   000576 602000 5                  TNC     s:2565

     2075     2563    2                 CALL ALLOCATE;

   2563  5 000574   000331 701000 5                  TSX1    ALLOCATE
         5 000575   000000 011000                    NOP     0

     2076     2564
     2077     2565    2              IF F$DCB.ORG# = %INDEXED# THEN

   2565  5 000576   000000 470400 xsym               LDP0    FKA_DCB$
         5 000577   000032 236100                    LDQ     26,,PR0
         5 000600   777000 376003                    ANQ     -512,DU
         5 000601   006000 116003                    CMPQ    3072,DU
         5 000602   000623 601000 5                  TNZ     s:2572

PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:418  
     2078     2566    3              DO;                          /* INDEXED FILE                       */

     2079     2567    3                 FM$KEYENT.KLB=KEYSIZE;

   2567  5 000603   000410 471400 4                  LDP1    KEY$
         5 000604   000402 236000 4                  LDQ     KEYSIZE
         5 000605   000033 736000                    QLS     27
         5 000606   100000 676100                    ERQ     0,,PR1
         5 000607   377000 376003                    ANQ     130560,DU
         5 000610   100000 656100                    ERSQ    0,,PR1

     2080     2568    3                 FM$KEYENT.TXT=RECORD$->TEXT;

   2568  5 000611   100000 236100                    LDQ     0,,PR1
         5 000612   000033 772000                    QRL     27
         5 000613   000377 376007                    ANQ     255,DL
         5 000614   200005 470500                    LDP0    RECORD$,,AUTO
         5 000615   000402 720000 4                  LXL0    KEYSIZE
         5 000616   000000 621006                    EAX1    0,QL
         5 000617   040140 100540                    MLR     fill='040'O
         5 000620   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         5 000621   100000 200011                    ADSC9   0,,PR1                   cn=1,n=*X1

     2081     2569    3                 END;                      /* INDEXED FILE                       */

   2569  5 000622   000640 710000 5                  TRA     s:2576

     2082     2570    2              ELSE
     2083     2571    3              DO;                          /* IREL FILE                          */

     2084     2572    3                 FM$IRENT.KLB=KEYSIZE;

   2572  5 000623   000410 471400 4                  LDP1    KEY$
         5 000624   000402 236000 4                  LDQ     KEYSIZE
         5 000625   000022 736000                    QLS     18
         5 000626   100000 676100                    ERQ     0,,PR1
         5 000627   377777 376003                    ANQ     131071,DU
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:419  
         5 000630   100000 656100                    ERSQ    0,,PR1

     2085     2573    3                 FM$IRENT.TXT=RECORD$->TEXT;

   2573  5 000631   100000 220100                    LDX0    0,,PR1
         5 000632   377777 360003                    ANX0    131071,DU
         5 000633   200005 470500                    LDP0    RECORD$,,AUTO
         5 000634   000402 721000 4                  LXL1    KEYSIZE
         5 000635   040140 100540                    MLR     fill='040'O
         5 000636   000000 000011                    ADSC9   0,,PR0                   cn=0,n=*X1
         5 000637   100000 400010                    ADSC9   0,,PR1                   cn=2,n=*X0

     2086     2574    3                 END;                      /* IREL FILE                          */

     2087     2575
     2088     2576    2              LASTKEY.SIZE=KEYSIZE;

   2576  5 000640   000402 720000 4                  LXL0    KEYSIZE
         5 000641   000002 740000 4                  STX0    LASTKEY

     2089     2577    2              LASTKEY.TEXT=RECORD$->TEXT;

   2577  5 000642   040000 100540                    MLR     fill='040'O
         5 000643   000000 000010                    ADSC9   0,,PR0                   cn=0,n=*X0
         5 000644   000002 401776 4                  ADSC9   LASTKEY                  cn=2,n=1022

     2090     2578    2              KEY$=PINCRW(KEY$, KEYWORDS);

   2578  5 000645   000403 236000 4                  LDQ     KEYWORDS
         5 000646   000022 736000                    QLS     18
         5 000647   000410 036000 4                  ADLQ    KEY$
         5 000650   000410 756000 4                  STQ     KEY$

     2091     2579    2              RECORD$=PINCRC(RECORD$, FKA_KEYSIZE+6);

   2579  5 000651   000000 236000 xsym               LDQ     FKA_KEYSIZE
         5 000652   000020 736000                    QLS     16
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:420  
         5 000653   000001 036000 6                  ADLQ    1
         5 000654   200005 036100                    ADLQ    RECORD$,,AUTO
         5 000655   200005 756100                    STQ     RECORD$,,AUTO

     2092     2580    2              KEY$->FM$MISEG=RECORD$->CHAR8;

   2580  5 000656   200005 470500                    LDP0    RECORD$,,AUTO
         5 000657   000410 471400 4                  LDP1    KEY$
         5 000660   000100 100500                    MLR     fill='000'O
         5 000661   000000 000010                    ADSC9   0,,PR0                   cn=0,n=8
         5 000662   100000 000010                    ADSC9   0,,PR1                   cn=0,n=8

     2093     2581    2              FM$GRAN.KEYCNT=FM$GRAN.KEYCNT+1;

   2581  5 000663   000000 473400 xsym               LDP3    FKA_INDEX_BUF$
         5 000664   300002 236100                    LDQ     2,,PR3
         5 000665   000001 036007                    ADLQ    1,DL
         5 000666   300002 552104                    STBQ    2,'04'O,PR3

     2094     2582    2              FM$GRAN.AVAIL=FM$GRAN.AVAIL-KEYWORDS-2;

   2582  5 000667   300001 236100                    LDQ     1,,PR3
         5 000670   001777 376007                    ANQ     1023,DL
         5 000671   000403 136000 4                  SBLQ    KEYWORDS
         5 000672   000002 136007                    SBLQ    2,DL
         5 000673   300001 676100                    ERQ     1,,PR3
         5 000674   001777 376007                    ANQ     1023,DL
         5 000675   300001 656100                    ERSQ    1,,PR3

     2095     2583    2              FM$GRAN.NAVX=FM$GRAN.NAVX+KEYWORDS+2;

   2583  5 000676   300001 236100                    LDQ     1,,PR3
         5 000677   000022 772000                    QRL     18
         5 000700   000403 036000 4                  ADLQ    KEYWORDS
         5 000701   000002 621006                    EAX1    2,QL
         5 000702   300001 741100                    STX1    1,,PR3

PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:421  
     2096     2584
     2097     2585    2              IF KEYOFF >= 512 AND FM$KEYTBL(0) = SIZEC(FM$KEYTBL) THEN

   2585  5 000703   000405 235000 4                  LDA     KEYOFF
         5 000704   001000 115007                    CMPA    512,DL
         5 000705   000720 604000 5                  TMI     s:2591
         5 000706   000000 474400 xsym               LDP4    FKA_KTPTR$
         5 000707   400000 236100                    LDQ     0,,PR4
         5 000710   777000 376003                    ANQ     -512,DU
         5 000711   430000 116003                    CMPQ    -118784,DU
         5 000712   000720 601000 5                  TNZ     s:2591

     2098     2586    3              DO;                          /* SET BOUND                          */

     2099     2587    3                 KEYOFF=KEYOFF-512;

   2587  5 000713   001000 336007                    LCQ     512,DL
         5 000714   000405 056000 4                  ASQ     KEYOFF

     2100     2588    3                 FM$KEYTBL(0)=NEXT_KEY;

   2588  5 000715   000406 236000 4                  LDQ     NEXT_KEY
         5 000716   000033 736000                    QLS     27
         5 000717   400000 552140                    STBQ    0,'40'O,PR4

     2101     2589    3                 END;                      /* SET BOUND                          */

     2102     2590
     2103     2591    2              FM$KEYTBL(NEXT_KEY)=KEYOFF;

   2591  5 000720   000000 474400 xsym               LDP4    FKA_KTPTR$
         5 000721   000406 235000 4                  LDA     NEXT_KEY
         5 000722   000105 101400                    MRL     fill='000'O
         5 000723   000405 000004 4                  ADSC9   KEYOFF                   cn=0,n=4
         5 000724   400000 000001                    ADSC9   0,A,PR4                  cn=0,n=1

     2104     2592    2              KEYOFF=KEYOFF+KEYWORDS+2;
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:422  

   2592  5 000725   000405 236000 4                  LDQ     KEYOFF
         5 000726   000403 036000 4                  ADLQ    KEYWORDS
         5 000727   000002 036007                    ADLQ    2,DL
         5 000730   000405 756000 4                  STQ     KEYOFF

     2105     2593    2              NEXT_KEY=NEXT_KEY+1;

   2593  5 000731   000406 054000 4                  AOS     NEXT_KEY

     2106     2594    2              KEY$=PINCRW(KEY$, 2);

   2594  5 000732   000410 236000 4                  LDQ     KEY$
         5 000733   000002 036003                    ADLQ    2,DU
         5 000734   000410 756000 4                  STQ     KEY$

     2107     2595
     2108     2596    2              RETURN;

   2596  5 000735   200422 221300                    LDX1  ! SEG$+5,,AUTO
         5 000736   000001 702211                    TSX2  ! 1,X1

     2109     2597    2      END NEWKEY;
     2110     2598         %EJECT;
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:423  
     2111     2599        /*I*     NAME:     WRITE_RECORD
     2112     2600                 PURPOSE:  To write a record to an index granule
     2113     2601                 DESCRIPTION:
     2114     2602
     2115     2603                      Increment the record pointer to the key information.
     2116     2604                 If this is the first segment, then add a key.  Otherwise,
     2117     2605                 add a segment.
     2118     2606        */
     2119     2607         %EJECT;
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:424  
     2120     2608    1   WRITE_RECORD: PROC;

   2608  5 000737   200416 741300       WRITE_RECORD STX1  ! SEG$+1,,AUTO

     2121     2609        /* */
     2122     2610    2              RECORD$=PINCRC(RECORD$, 1);

   2610  5 000740   200005 236100                    LDQ     RECORD$,,AUTO
         5 000741   200000 036007                    ADLQ    65536,DL
         5 000742   200005 756100                    STQ     RECORD$,,AUTO

     2123     2611
     2124     2612    2              SEGCNT$=PINCRC(RECORD$, FKA_KEYSIZE+4);

   2612  5 000743   000000 236000 xsym               LDQ     FKA_KEYSIZE
         5 000744   000020 736000                    QLS     16
         5 000745   000001 036003                    ADLQ    1,DU
         5 000746   200005 036100                    ADLQ    RECORD$,,AUTO
         5 000747   000404 756000 4                  STQ     SEGCNT$

     2125     2613    2              IF SEGCNT = 0 THEN

   2613  5 000750   000404 470400 4                  LDP0    SEGCNT$
         5 000751   000100 101500                    MRL     fill='000'O
         5 000752   000000 000002                    ADSC9   0,,PR0                   cn=0,n=2
         5 000753   200430 000004                    ADSC9   SEG$+11,,AUTO            cn=0,n=4
         5 000754   200430 236100                    LDQ     SEG$+11,,AUTO
         5 000755   000000 116003                    CMPQ    0,DU
         5 000756   000762 601000 5                  TNZ     s:2616

     2126     2614    2                 CALL ADDKEY;

   2614  5 000757   000157 701000 5                  TSX1    ADDKEY
         5 000760   000000 011000                    NOP     0
         5 000761   000764 710000 5                  TRA     s:2618

     2127     2615    2              ELSE
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:425  
     2128     2616    2                 CALL ADDSEG;

   2616  5 000762   000261 701000 5                  TSX1    ADDSEG
         5 000763   000000 011000                    NOP     0

     2129     2617
     2130     2618    2              RETURN;

   2618  5 000764   200416 221300                    LDX1  ! SEG$+1,,AUTO
         5 000765   000001 702211                    TSX2  ! 1,X1

     2131     2619    2      END WRITE_RECORD;
     2132     2620    1   END FKA$OUTPUT;

   2620  5 000766   000000 702200 xent               TSX2  ! X66_ARET
     2133     2621         %EOD;

PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:426  
--  Include file information  --

   ZL_MACRO_C.:TOOLE04  is referenced.
   FK_PERR_C.:E05TOU  is referenced.
   XU_FORMAT_C.:E05TOU  is referenced.
   FM$GRAN.:E05TOU  is referenced.
   FM$FIT.:E05TOU  is referenced.
   FM_FIELD_C.:E05TOU  is referenced.
   FK_DATA_C.:E05TOU  is referenced.
   FKA_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure FKA$OUTPUT.
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:427  

 **** Variables and constants ****

  ****  Section 001 RoData FKA$OUTPUT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

    50-0-0/d STRC(144)   r     1 FPT_RELSTARF              34-0-0/d STRC(432)   r     1 FPT_WRITE
    54-0-0/w PTR         r     1 LASTKEY$                   0-0-0/d STRC(504)   r     1 READ_DATA
    16-0-0/d STRC(504)   r     1 READ_INDEX

  ****  Section 004  Data  FKA$OUTPUT

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

   412-0-0/w SBIN        r     1 INDEX#                   410-0-0/w PTR         r     1 KEY$
   405-0-0/w SBIN        r     1 KEYOFF                   402-0-0/w SBIN        r     1 KEYSIZE
   403-0-0/w SBIN        r     1 KEYWORDS                   2-0-0/c STRC(9216)  r     1 LASTKEY
     1-0-0/w UBIN        r     1 LAST_GRAN                  0-0-0/w UBIN        r     1 NEXT_GRAN
   406-0-0/w SBIN        r     1 NEXT_KEY                 407-0-0/w SBIN        r     1 RESULT
   404-0-0/w PTR         r     1 SEGCNT$

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w PTR         r     1 @RECORD                    4-0-0/w PTR         r     1 @RECORD_SIZE
    *0-0-0/c ACHR        r     1 RECORD                     5-0-0/w PTR         r     1 RECORD$
    *0-0-0/w SBIN        r     1 RECORD_SIZE              415-0-0/w PTR         r     1 SEG$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:428  
     0-0-0/w PTR         r     1 FKA_ALTKEYS$               0-0-0/d STRC(37080) r     1 FKA_ALTKEY_BFR
     0-0-0/c CHAR(4096)  r     1 FKA_DATA_BUF               0-0-0/w SBIN        r     1 FKA_DATA_GRAN
     0-0-0/w PTR         r     1 FKA_DCB$                   0-0-0/b BIT         r     1 FKA_DUPS
     0-0-0/c CHAR(4096)  r     1 FKA_INDEX_BUF              0-0-0/w PTR         r     1 FKA_INDEX_BUF$
     0-0-0/w SBIN        r     1 FKA_INDEX_GRAN             0-0-0/w PTR         r     1 FKA_IRKEYS$
     0-0-0/w SBIN        r     1 FKA_KEYSIZE                0-0-0/w PTR         r     1 FKA_KTPTR$
     0-0-0/w PTR         r     1 FKA_RECFIELD$
     0-0-0/b BIT         r     1 FKA_UNIQUE(0:100)
     0-0-0/w UBIN        r     1 FM_FRZERO                  0-0-0/w STRC(1296)  r     1 SORT_TABLE

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/c STRC(72)    r     1 CHAR8                      0-0-0/w STRC(36864) r     1 CLEAN_GRAN
     0-0-0/d ASTR(3528)  r     1 F$DCB                      0-0-0/w STRC(4572)  r     1 FITALTKEYS
     0-0-0/w STRC(180)   r     1 FM$GRAN                    0-0-0/w ASTR(18)    r     1 FM$IRENT
     0-0-0/w ASTR(9)     r     1 FM$KEYENT
     0-0-0/w UBIN(9)     r     1 FM$KEYTBL(0:279)
     0-0-0/w UBIN        r     1 FM$KT(0:69)                0-0-0/w STRC(72)    r     1 FM$MISEG
     0-0-0/w STRC(360)   r     1 IRKEYS                     0-0-0N  NULL        r     1 M$SI
     0-0-0/c UBIN(18)    r     1 SEGCNT                     0-0-0/c UBIN(9)     r     1 SORT_REC_INDX
     0-0-0/c ACHR        r     1 TEXT


   Procedure FKA$OUTPUT requires 503 words for executable code.
   Procedure FKA$OUTPUT requires 284 words of local(AUTO) storage.
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:429  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:430  
          MINI XREF LISTING

ABORT
      2391**LABEL    2348--CALLALT  2358--CALLALT  2363--CALLALT  2389--CALLALT
ABORT IN PROCEDURE ALLOCATE
      2496**LABEL    2476--CALLALT  2479--CALLALT  2486--CALLALT  2489--CALLALT
ADDKEY
      2404**PROC     2614--CALL
ADDSEG
      2446**PROC     2430--CALL     2616--CALL
ALLOCATE
      2471**PROC     2449--CALL     2563--CALL
CHAR8
      2333**DCL      2452>>ASSIGN   2580>>ASSIGN
CLEAN_GRAN.GRAN
      2338**DCL      2517<<ASSIGN
F$DCB.ACTPOS
      2067**DCL      2067--REDEF
F$DCB.ARS#
      2041**DCL      2041--REDEF
F$DCB.ATTR
      2060**DCL      2061--REDEF
F$DCB.BORROW
      2075**DCL      2075--REDEF    2075--REDEF    2075--REDEF
F$DCB.DCBNAME.L
      2089**DCL      2089--IMP-SIZ
F$DCB.EOMCHAR#
      2045**DCL      2045--REDEF
F$DCB.FLDID
      2070**DCL      2070--REDEF
F$DCB.FORM$
      2064**DCL      2064--REDEF
F$DCB.FSECT
      2080**DCL      2080--REDEF
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:431  
F$DCB.FSN#
      2057**DCL      2057--REDEF    2057--REDEF    2058--REDEF
F$DCB.HEADER$
      2063**DCL      2063--REDEF
F$DCB.IXTNSIZE#
      2061**DCL      2061--REDEF
F$DCB.LASTSTA$
      2050**DCL      2050--REDEF
F$DCB.LVL
      2076**DCL      2076--REDEF
F$DCB.NAME#.C
      2051**DCL      2051--REDEF
F$DCB.NOEOF
      2073**DCL      2073--REDEF
F$DCB.NRECS#
      2062**DCL      2062--REDEF
F$DCB.NRECX
      2081**DCL      2081--REDEF
F$DCB.OHDR
      2073**DCL      2073--REDEF
F$DCB.ORG#
      2056**DCL      2056--REDEF    2350>>IF       2368>>IF       2408>>IF       2523>>IF       2529>>IF
      2565>>IF
F$DCB.PRECNO
      2079**DCL      2079--REDEF
F$DCB.RCSZ
      2085**DCL      2085--REDEF
F$DCB.RES#
      2052**DCL      2052--REDEF
F$DCB.SETX
      2064**DCL      2064--REDEF
F$DCB.SPARE#
      2059**DCL      2448>>IF       2562>>IF
F$DCB.TAB$
      2064**DCL      2064--REDEF
F$DCB.TDA
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:432  
      2078**DCL      2079--REDEF
F$DCB.WSN#
      2052**DCL      2052--REDEF
FITALTKEYS.K.FDA
      2100**DCL      2351>>ASSIGN   2524<<ASSIGN
FITALTKEYS.K.KEYL
      2100**DCL      2370>>ASSIGN
FITALTKEYS.K.LDA
      2100**DCL      2530<<ASSIGN
FKA$ABORT
      2297**DCL-ENT  2391--CALL     2496--CALL
FKA$COMPKEY
      2299**DCL-ENT  2418--CALL
FKA_ALTKEYS$
       665**DCL      2099--IMP-PTR  2351>>ASSIGN   2370>>ASSIGN   2524>>ASSIGN   2530>>ASSIGN
FKA_ALTKEY_BFR
      2149**DCL      2027--DCLINIT
FKA_ALTKEY_BFR.CODE
      2154**DCL      2362<<ASSIGN   2475<<ASSIGN
FKA_ALTKEY_BFR.DA
      2156**DCL      2364>>ASSIGN   2478>>ASSIGN   2480>>ASSIGN
FKA_DATA_BUF
       670**DCL      1923--DCLINIT  1924--DCLINIT
FKA_DATA_GRAN
       668**DCL      1921--DCLINIT  1922--DCLINIT
FKA_DCB$
       668**DCL      2035--IMP-PTR  2350>>IF       2368>>IF       2408>>IF       2448>>IF       2523>>IF
      2529>>IF       2562>>IF       2565>>IF
FKA_DUPS
       669**DCL      2426<<ASSIGN
FKA_INDEX_BUF
       669**DCL      1963--DCLINIT  1964--DCLINIT  2002--DCLINIT  2003--DCLINIT
FKA_INDEX_BUF$
       670**DCL      2092--IMP-PTR  2365>>ASSIGN   2379>>ASSIGN   2448>>IF       2454>>ASSIGN   2454>>ASSIGN
      2455>>ASSIGN   2455>>ASSIGN   2478>>ASSIGN   2485>>ASSIGN   2491>>ASSIGN   2517>>ASSIGN   2518>>ASSIGN
      2519>>ASSIGN   2520>>ASSIGN   2535>>ASSIGN   2536>>ASSIGN   2537>>ASSIGN   2540>>ASSIGN   2540>>ASSIGN
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:433  
      2541>>ASSIGN   2541>>ASSIGN   2543>>ASSIGN   2562>>IF       2562>>IF       2581>>ASSIGN   2581>>ASSIGN
      2582>>ASSIGN   2582>>ASSIGN   2583>>ASSIGN   2583>>ASSIGN
FKA_INDEX_GRAN
       668**DCL      1961--DCLINIT  1962--DCLINIT  2001--DCLINIT  2351<<ASSIGN   2353<<ASSIGN   2355>>IF
      2357<<ASSIGN   2357>>ASSIGN   2364<<ASSIGN   2480<<ASSIGN   2488<<ASSIGN   2518>>ASSIGN   2524>>ASSIGN
      2526>>ASSIGN   2530>>ASSIGN   2532>>ASSIGN   2534>>ASSIGN
FKA_IRKEYS$
       666**DCL      2169--IMP-PTR  2353>>ASSIGN   2375>>ASSIGN   2408>>IF       2526>>ASSIGN   2532>>ASSIGN
FKA_KEYSIZE
       669**DCL      2451>>ASSIGN   2579>>ASSIGN   2612>>ASSIGN
FKA_KTPTR$
       668**DCL      2096--IMP-PTR  2096--IMP-PTR  2537<<ASSIGN   2538>>ASSIGN   2539>>ASSIGN   2585>>IF
      2588>>ASSIGN   2591>>ASSIGN
FKA_RECFIELD$
       665**DCL      2116--IMP-PTR
FKA_UNIQUE
       665**DCL      2424>>IF       2427<<ASSIGN
FM$GRAN
      2092**DCL      2535--ASSIGN   2537--ASSIGN
FM$GRAN.AVAIL
      2093**DCL      2448>>IF       2454<<ASSIGN   2454>>ASSIGN   2540<<ASSIGN   2562>>IF       2582<<ASSIGN
      2582>>ASSIGN
FM$GRAN.BLINK
      2093**DCL      2519<<ASSIGN
FM$GRAN.FCEX
      2093**DCL      2535<<ASSIGN
FM$GRAN.FLINK
      2093**DCL      2365<<ASSIGN   2379>>ASSIGN   2478<<ASSIGN   2485<<ASSIGN   2491>>ASSIGN   2520<<ASSIGN
FM$GRAN.KEYCNT
      2093**DCL      2536<<ASSIGN   2562>>IF       2581<<ASSIGN   2581>>ASSIGN
FM$GRAN.NAVX
      2092**DCL      2455<<ASSIGN   2455>>ASSIGN   2541<<ASSIGN   2543>>ASSIGN   2583<<ASSIGN   2583>>ASSIGN
FM$GRAN.STAMP.GMOD
      2092**DCL      2518<<ASSIGN
FM$IRENT.KLB
      2183**DCL      2183--IMP-SIZ  2572<<ASSIGN   2573>>ASSIGN
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:434  
FM$IRENT.TXT
      2183**DCL      2573<<ASSIGN
FM$KEYENT.KLB
      2180**DCL      2180--IMP-SIZ  2567<<ASSIGN   2568>>ASSIGN
FM$KEYENT.TXT
      2180**DCL      2568<<ASSIGN
FM$KEYTBL
      2096**DCL      2538<<ASSIGN   2538--ASSIGN   2539--ASSIGN   2585>>IF       2585--IF       2588<<ASSIGN
      2591<<ASSIGN
FM$KT
      2096**DCL      2096--REDEF
FM$MISEG
      2176**DCL      2452<<ASSIGN   2580<<ASSIGN
FM_FRZERO
      2301**DCL      2357>>ASSIGN   2364>>ASSIGN   2480>>ASSIGN   2488>>ASSIGN   2524>>ASSIGN   2526>>ASSIGN
      2530>>ASSIGN   2532>>ASSIGN   2534>>ASSIGN
FPT_RELSTARF
      2026**DCL      2363<>CALL     2476<>CALL
FPT_WRITE
      2001**DCL      2348<>CALL     2389<>CALL     2479<>CALL     2486<>CALL
FPT_WRITE.STATION_
      2003**DCL      2003--REDEF
FPT_WRITE.V
      2004**DCL      2001--DCLINIT
FPT_WRITE.V.DVBYTE.VFC#
      2010**DCL      2010--REDEF
INDEX#
      2328**DCL      2345>>IF       2347>>IF       2349<<ASSIGN   2351>>ASSIGN   2353>>ASSIGN   2370>>ASSIGN
      2375>>ASSIGN   2408>>IF       2417>>ASSIGN   2424>>IF       2427>>ASSIGN   2524>>ASSIGN   2526>>ASSIGN
      2530>>ASSIGN   2532>>ASSIGN
INIT_GRAN
      2515**PROC     2381--CALL     2481--CALL     2492--CALL
IRKEYS.K.DEGENERATE
      2171**DCL      2408>>IF
IRKEYS.K.FDA
      2172**DCL      2353>>ASSIGN   2526<<ASSIGN
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:435  
IRKEYS.K.KEYL
      2170**DCL      2375>>ASSIGN
IRKEYS.K.LDA
      2173**DCL      2532<<ASSIGN
KEY$
      2318**DCL      2180--IMP-PTR  2183--IMP-PTR  2452>>ASSIGN   2453<<ASSIGN   2453>>ASSIGN   2539<<ASSIGN
      2540>>ASSIGN   2541>>ASSIGN   2567>>ASSIGN   2568>>ASSIGN   2568>>ASSIGN   2572>>ASSIGN   2573>>ASSIGN
      2573>>ASSIGN   2578<<ASSIGN   2578>>ASSIGN   2580>>ASSIGN   2594<<ASSIGN   2594>>ASSIGN
KEYOFF
      2314**DCL      2456<<ASSIGN   2456>>ASSIGN   2543<<ASSIGN   2585>>IF       2587<<ASSIGN   2587>>ASSIGN
      2591>>ASSIGN   2592<<ASSIGN   2592>>ASSIGN
KEYSIZE
      2311**DCL      2335--IMP-SIZ  2370<<ASSIGN   2371>>ASSIGN   2375<<ASSIGN   2376>>ASSIGN   2411>>IF
      2411>>IF       2418>>CALL     2418>>CALL     2567>>ASSIGN   2568>>ASSIGN   2572>>ASSIGN   2573>>ASSIGN
      2576>>ASSIGN   2577>>ASSIGN
KEYWORDS
      2312**DCL      2371<<ASSIGN   2376<<ASSIGN   2562>>IF       2578>>ASSIGN   2582>>ASSIGN   2583>>ASSIGN
      2592>>ASSIGN
LASTKEY.BINTEXT
      2308**DCL      2383<<ASSIGN
LASTKEY.SIZE
      2306**DCL      2382<<ASSIGN   2407>>IF       2576<<ASSIGN
LASTKEY.TEXT
      2307**DCL      2308--REDEF    2310--DCLINIT  2577<<ASSIGN
LASTKEY$
      2310**DCL      2411>>IF       2418>>CALL
LAST_GRAN
      2304**DCL      2380<<ASSIGN   2519>>ASSIGN   2521>>IF       2534<<ASSIGN
M$READ
        46**DCL-ENT  2358--CALL     2489--CALL
M$RELSTARF
        54**DCL-ENT  2363--CALL     2476--CALL
M$WRITE
        46**DCL-ENT  2348--CALL     2389--CALL     2479--CALL     2486--CALL
NEWKEY
      2560**PROC     2433--CALL
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:436  
NEXT_GRAN
      2303**DCL      2379<<ASSIGN   2473>>IF       2485>>ASSIGN   2488>>ASSIGN   2491<<ASSIGN
NEXT_KEY
      2315**DCL      2542<<ASSIGN   2588>>ASSIGN   2591>>ASSIGN   2593<<ASSIGN   2593>>ASSIGN
READ_DATA.STATION_
      1924**DCL      1925--REDEF
READ_DATA.V
      1925**DCL      1921--DCLINIT
READ_DATA.V.DVBYTE.REREAD#
      1936**DCL      1936--REDEF
READ_DATA.V.INDX#
      1934**DCL      1934--REDEF
READ_INDEX
      1961**DCL      2358<>CALL     2489<>CALL
READ_INDEX.STATION_
      1964**DCL      1965--REDEF
READ_INDEX.V
      1965**DCL      1961--DCLINIT
READ_INDEX.V.DVBYTE.REREAD#
      1976**DCL      1976--REDEF
READ_INDEX.V.INDX#
      1974**DCL      1974--REDEF
RECFIELD.FIELD
      2124**DCL      2124--REDEF
RECORD
        33**DCL        31--PROC     2344--ASSIGN
RECORD$
      2302**DCL      2331--IMP-PTR  2344<<ASSIGN   2345>>IF       2349>>ASSIGN   2411>>IF       2418>>CALL
      2451<<ASSIGN   2451>>ASSIGN   2452>>ASSIGN   2568>>ASSIGN   2573>>ASSIGN   2577>>ASSIGN   2579<<ASSIGN
      2579>>ASSIGN   2580>>ASSIGN   2610<<ASSIGN   2610>>ASSIGN   2612>>ASSIGN
RECORD_SIZE
        34**DCL        31--PROC       33--IMP-SIZ  2345>>IF       2386>>IF
RESULT
      2316**DCL      2406<<ASSIGN   2412<<ASSIGN   2414<<ASSIGN   2417<<ASSIGN   2418<>CALL     2422>>IF
SEG$
      2327**DCL      2176--IMP-PTR
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:437  
SEGCNT
      2332**DCL      2613>>IF
SEGCNT$
      2313**DCL      2332--IMP-PTR  2612<<ASSIGN   2613>>IF
SORT_REC_INDX
      2331**DCL      2345>>IF       2349>>ASSIGN
SORT_TABLE.SECONDARY.KCE$
      2283**DCL      2408>>IF
TEXT
      2335**DCL      2411>>IF       2411>>IF       2418<>CALL     2418<>CALL     2568>>ASSIGN   2573>>ASSIGN
      2577>>ASSIGN
WRITE_RECORD
      2608**PROC     2387--CALL
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:438  
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:439  
              MINI UREF LISTING

ASCII    2323**DCL
FIELD$    2322**DCL
FKA$OUTPUT      31**PROC
FKA_BOUND     668**DCL
FKA_CLOSE_DONE     672**DCL
FKA_CMDVAR     671**DCL
FKA_CMDVAR_EXIST     671**DCL
FKA_CMDVAR_SET     671**DCL
FKA_CODE19$     667**DCL
FKA_CODE20$     667**DCL
FKA_DATA_BUF$     670**DCL
FKA_FIELD_START_DATA     666**DCL
FKA_FILE_OPEN     671**DCL
FKA_IRKEYS_DATA     666**DCL
FKA_KFIELD$     667**DCL
FKA_KFIELD_DATA     667**DCL
FKA_M$CLOSE_ERR     672**DCL
FKA_MON     665**DCL
FKA_NUMKEYS     669**DCL
FKA_RECSIZE     669**DCL
FKA_START$     665**DCL
J    2324**DCL
K    2325**DCL
KEY_SIZE    2320**DCL
KEY_TEMP    2321**DCL
M$ACCT      62**DCL-ENT
M$ACTIVATE      65**DCL-ENT
M$ALIB      58**DCL-ENT
M$ASUSER      60**DCL-ENT
M$ATTACH      67**DCL-ENT
M$BADPP      85**DCL-ENT
M$CGCTL      66**DCL-ENT
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:440  
M$CGINFO      66**DCL-ENT
M$CHECK      47**DCL-ENT
M$CHGUNIT     105**DCL-ENT
M$CLOSE      45**DCL-ENT
M$CLRSTK     103**DCL-ENT
M$CMDVAR     114**DCL-ENT
M$CONFIG      75**DCL-ENT
M$CORRES      50**DCL-ENT
M$CPEXIT      59**DCL-ENT
M$CVM      83**DCL-ENT
M$CVOL      48**DCL-ENT
M$DCLFLD      75**DCL-ENT
M$DEACTIVATE      65**DCL-ENT
M$DELREC      47**DCL-ENT
M$DEQ     112**DCL-ENT
M$DETACH      67**DCL-ENT
M$DEVICE      49**DCL-ENT
M$DISPLAY     112**DCL-ENT
M$DISPRES      52**DCL-ENT
M$DLIB      58**DCL-ENT
M$DO    2032**DCL
M$DRIBBLE      75**DCL-ENT
M$DRTN     103**DCL-ENT
M$DSUSER      60**DCL-ENT
M$ENQ     111**DCL-ENT
M$EOM      70**DCL-ENT
M$ERASE      76**DCL-ENT
M$ERR      57**DCL-ENT
M$ERRMSG     108**DCL-ENT
M$EVENT     100**DCL-ENT
M$EXHUME     109**DCL-ENT
M$EXIT      57**DCL-ENT
M$EXTEND      49**DCL-ENT
M$FDP      81**DCL-ENT
M$FDS      80**DCL-ENT
M$FEBOOT      73**DCL-ENT
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:441  
M$FECTL      74**DCL-ENT
M$FEDUMP      73**DCL-ENT
M$FID     108**DCL-ENT
M$FINDPROC      62**DCL-ENT
M$FSUSER      60**DCL-ENT
M$FVP      82**DCL-ENT
M$FWCG      66**DCL-ENT
M$GBPL      86**DCL-ENT
M$GDDL      82**DCL-ENT
M$GDP      81**DCL-ENT
M$GDS      80**DCL-ENT
M$GETDCB      51**DCL-ENT
M$GETMOUSE      91**DCL-ENT
M$GETPM      92**DCL-ENT
M$GJOB     110**DCL-ENT
M$GLINEATTR      70**DCL-ENT
M$GOODPP      85**DCL-ENT
M$GPLATEN      78**DCL-ENT
M$GPROMPT      77**DCL-ENT
M$GTRMATTR      71**DCL-ENT
M$GTRMCTL      69**DCL-ENT
M$GTRMTAB      72**DCL-ENT
M$GVP      81**DCL-ENT
M$HELP     108**DCL-ENT
M$INT     100**DCL-ENT
M$INTRTN      61**DCL-ENT
M$IOQ      96**DCL-ENT
M$JOBSTATS     110**DCL-ENT
M$KEYIN      50**DCL-ENT
M$LDEV      45**DCL-ENT
M$LDTRC      58**DCL-ENT
M$LIMIT      51**DCL-ENT
M$LINES      50**DCL-ENT
M$LINK      57**DCL-ENT
M$MADMUCK      53**DCL-ENT
M$MAKUSER      84**DCL-ENT
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:442  
M$MBS      52**DCL-ENT
M$MDFFLD      76**DCL-ENT
M$MERC     101**DCL-ENT
M$MERCS     102**DCL-ENT
M$MIRROR      96**DCL-ENT
M$MONINFO     113**DCL-ENT
M$MPL      86**DCL-ENT
M$NODEINFO      77**DCL-ENT
M$NXTUSR     111**DCL-ENT
M$OCMSG     109**DCL-ENT
M$OLAY      57**DCL-ENT
M$OPEN      45**DCL-ENT
M$PAS      86**DCL-ENT
M$PATHCON     109**DCL-ENT
M$PDS      80**DCL-ENT
M$PFIL      47**DCL-ENT
M$PLATEN      71**DCL-ENT
M$PRECORD      49**DCL-ENT
M$PROCNAME      62**DCL-ENT
M$PROFILE      73**DCL-ENT
M$PROMPT      69**DCL-ENT
M$RACST      53**DCL-ENT
M$RDSYSLOG      94**DCL-ENT
M$RELDCB      51**DCL-ENT
M$RELRES      52**DCL-ENT
M$REM      54**DCL-ENT
M$RENV     101**DCL-ENT
M$REQUIRE      53**DCL-ENT
M$RETRY     102**DCL-ENT
M$RETRYS     102**DCL-ENT
M$REW      48**DCL-ENT
M$RLSFLD      76**DCL-ENT
M$RPRIV     104**DCL-ENT
M$RSPP      83**DCL-ENT
M$RSWITCH     105**DCL-ENT
M$RUE     111**DCL-ENT
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:443  
M$SAD      84**DCL-ENT
M$SAVE      60**DCL-ENT
M$SCON      61**DCL-ENT
M$SCREECH      59**DCL-ENT
M$SENV     101**DCL-ENT
M$SETFMA      45**DCL-ENT
M$SETFP      74**DCL-ENT
M$SI    2031**DCL
M$SINPUT      72**DCL-ENT
M$SLCFLD      77**DCL-ENT
M$SMOUSE      91**DCL-ENT
M$SMPRT      83**DCL-ENT
M$SPRIV     104**DCL-ENT
M$SSC      84**DCL-ENT
M$SSWITCH     104**DCL-ENT
M$STATE     113**DCL-ENT
M$STD      85**DCL-ENT
M$STIMER      99**DCL-ENT
M$STLPP      82**DCL-ENT
M$STRAP      99**DCL-ENT
M$STRMATTR      71**DCL-ENT
M$STRMCTL      69**DCL-ENT
M$STRMTAB      72**DCL-ENT
M$SYMBIO     110**DCL-ENT
M$SYSCON      96**DCL-ENT
M$SYSID     114**DCL-ENT
M$TDCLOSE      95**DCL-ENT
M$TDIO      95**DCL-ENT
M$TDOPEN      94**DCL-ENT
M$TDREQCPU      95**DCL-ENT
M$TEMPWROC      89**DCL-ENT
M$TIME     112**DCL-ENT
M$TRAP      99**DCL-ENT
M$TRMISC      74**DCL-ENT
M$TRMPRG      70**DCL-ENT
M$TRTN     103**DCL-ENT
PL6.E3A0      #007=FKA$OUTPUT File=FKA$ALTKEY.:E05TSI                            TUE 07/29/97 15:33 Page:444  
M$TRUNC      46**DCL-ENT
M$TTIMER      99**DCL-ENT
M$UC      69**DCL
M$UMPL      86**DCL-ENT
M$UNFID     108**DCL-ENT
M$UNLATCH      65**DCL-ENT
M$UNSHARE      62**DCL-ENT
M$USRFIELD     105**DCL-ENT
M$VIRTUAL      80**DCL-ENT
M$WAIT     103**DCL-ENT
M$WEOF      48**DCL-ENT
M$WRSYSLOG      94**DCL-ENT
M$XCON     100**DCL-ENT
M$XCONRTN      61**DCL-ENT
M$XEQTIME     113**DCL-ENT
M$XFLUSH      54**DCL-ENT
M$XMOUSE      91**DCL-ENT
M$XXX      57**DCL-ENT
M$YC      59**DCL-ENT
N    2326**DCL
REPORT_INDEX#    2319**DCL
TEMPA    2339**DCL
UNIQUE    2317**DCL
X$WRITE    2298**DCL-ENT
XBUF    2329**DCL
XUR$ERRMSG    2296**DCL-ENT

PL6.E3A0      #008=FKA$XCON File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:33 Page:445  
     2134        1        /*T***********************************************************/
     2135        2        /*T*                                                         */
     2136        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2137        4        /*T*                                                         */
     2138        5        /*T***********************************************************/
     2139        6        /*F*     NAME:     FKA$XCON
     2140        7                 PURPOSE:  To handle abnormal exits from ALTKEY
     2141        8                 DESCRIPTION:
     2142        9
     2143       10                      Reset exit control, so we don't hit this again.
     2144       11                 Save some sort of funny pointer.  Close the file.
     2145       12                 If the user didn't request the exit (e.g. ctrl-Y), then
     2146       13                 tell him what went wrong, and abort.  Otherwise, if we got
     2147       14                 an error from the close, tell him that and abort.
     2148       15        */
     2149       16         %EJECT;
PL6.E3A0      #008=FKA$XCON File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:33 Page:446  
     2150       17        FKA$XCON: PROC ASYNC;
     2151       18         %INCLUDE CP_6;
     2152       99         %INCLUDE CP_6_SUBS;
     2153      639         %INCLUDE FKA_DATA_R;
     2154      655         %INCLUDE FK_DATA_C;
     2155      732         %FPT_XXX(CODE=ERRCODE, STEPCC=ERROR, STCLASS=CONSTANT);
     2156      747        /* */
     2157      748    1     DCL XUR$ERRMSG ENTRY(7) ALTRET;
     2158      749    1     DCL FKA$CLOSE ENTRY(1) ALTRET;
     2159      750        /* */
     2160      751         %FPT_XCON(FPTN=RESET_XCON, STCLASS=CONSTANT);
     2161      765         %B$TCB;
     2162      768         %B$ALT;
     2163      776         %B$XCON;
     2164      786         %B$ECCB;
     2165      794         %FKA$ERR(FPTN=CLOSERR,STCLASS=" ");
     2166      800        /* */
     2167      801    1     DCL B$ECCB$ PTR SYMREF;
     2168      802    1     DCL B$TCB$ PTR SYMREF;
     2169      803        /* */
     2170      804    1     DCL ECCB$ PTR;
     2171      805    1     DCL ERRCODE BIT(36) STATIC;
     2172      806    1     DCL DCB# UBIN;
     2173      807        /* */
     2174      808    1           CALL M$XCON(RESET_XCON);
     2175      809    1           IF B$ECCB$->B$ECCB.XCONF.NOTCB THEN
     2176      810    1              ECCB$=B$TCB$->B$TCB.ALT$;
     2177      811    1           ELSE
     2178      812    1              ECCB$=B$TCB$->B$TCB.STK$;
     2179      813
     2180      814    1           IF NOT ECCB$->B$XCON.RNST.OPERR THEN
     2181      815    1              ERRCODE=ECCB$->B$XCON.ERR;
     2182      816    1           ELSE ERRCODE='0'B;
     2183      817    1           DCB#=0;
     2184      818
     2185      819    2           CALL FKA$CLOSE(CLOSERR) WHENALTRETURN DO;
     2186      820    2              IF ERRCODE='0'B THEN
PL6.E3A0      #008=FKA$XCON File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:33 Page:447  
     2187      821    3              DO;
     2188      822    3                 ERRCODE=CLOSERR.ERR;
     2189      823    3                 DCB#=CLOSERR.DCB#;
     2190      824    3                 END;
     2191      825    2              END;
     2192      826
     2193      827    1           IF ERRCODE ~= '0'B THEN
     2194      828    2           DO;                             /* SET ERROR                          */
     2195      829    2              IF FKA_MON = %NO# THEN
     2196      830    2                 IF DCB#=0 THEN
     2197      831    2                    CALL XUR$ERRMSG(ERRCODE);
     2198      832    2                 ELSE CALL XUR$ERRMSG(ERRCODE,DCB#);
     2199      833    2              CALL M$XXX(FPT_XXX);
     2200      834    2              END;                         /* SET ERROR                          */
     2201      835    1           ELSE
     2202      836    1              CALL M$EXIT;
     2203      837    1   END FKA$XCON;

PL6.E3A0      #008=FKA$XCON File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:33 Page:448  
--  Include file information  --

   FK_DATA_C.:E05TOU  is referenced.
   FKA_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure FKA$XCON.

   Procedure FKA$XCON requires 65 words for executable code.
   Procedure FKA$XCON requires 10 words of local(AUTO) storage.

    No errors detected in file FKA$ALTKEY.:E05TSI    .

PL6.E3A0      #008=FKA$XCON File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:33 Page:449  

 Object Unit name= FKA$XCON                                   File name= FKA$ALTKEY.:E05TOU
 UTS= JUL 29 '97 15:33:21.80 TUE                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1  RoData even  UTS     12     14  FKA$XCON
    2   Data  even  none     1      1  FKA$XCON
    3   Proc  even  none    65    101  FKA$XCON
    4  RoData even  none     1      1  FKA$XCON

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     3      0   yes            yes     Async       0  FKA$XCON

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       1 FKA$CLOSE
 yes     yes           Std       7 XUR$ERRMSG
                       nStd      0 X66_AAUTO
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AARET
PL6.E3A0      #008=FKA$XCON File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:33 Page:450  

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  FKA_MON                               B$ECCB$
     B$TCB$                                B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #008=FKA$XCON File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:33 Page:451  


     2134        1        /*T***********************************************************/
     2135        2        /*T*                                                         */
     2136        3        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
     2137        4        /*T*                                                         */
     2138        5        /*T***********************************************************/
     2139        6        /*F*     NAME:     FKA$XCON
     2140        7                 PURPOSE:  To handle abnormal exits from ALTKEY
     2141        8                 DESCRIPTION:
     2142        9
     2143       10                      Reset exit control, so we don't hit this again.
     2144       11                 Save some sort of funny pointer.  Close the file.
     2145       12                 If the user didn't request the exit (e.g. ctrl-Y), then
     2146       13                 tell him what went wrong, and abort.  Otherwise, if we got
     2147       14                 an error from the close, tell him that and abort.
     2148       15        */
     2149       16         %EJECT;
PL6.E3A0      #008=FKA$XCON File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:33 Page:452  
     2150       17        FKA$XCON: PROC ASYNC;

     17  3 000000   000000 700200 xent  FKA$XCON     TSX0  ! X66_AAUTO
         3 000001   000012 000000                    ZERO    10,0

     2151       18         %INCLUDE CP_6;
     2152       99         %INCLUDE CP_6_SUBS;
     2153      639         %INCLUDE FKA_DATA_R;
     2154      655         %INCLUDE FK_DATA_C;
     2155      732         %FPT_XXX(CODE=ERRCODE, STEPCC=ERROR, STCLASS=CONSTANT);
     2156      747        /* */
     2157      748    1     DCL XUR$ERRMSG ENTRY(7) ALTRET;
     2158      749    1     DCL FKA$CLOSE ENTRY(1) ALTRET;
     2159      750        /* */
     2160      751         %FPT_XCON(FPTN=RESET_XCON, STCLASS=CONSTANT);
     2161      765         %B$TCB;
     2162      768         %B$ALT;
     2163      776         %B$XCON;
     2164      786         %B$ECCB;
     2165      794         %FKA$ERR(FPTN=CLOSERR,STCLASS=" ");
     2166      800        /* */
     2167      801    1     DCL B$ECCB$ PTR SYMREF;
     2168      802    1     DCL B$TCB$ PTR SYMREF;
     2169      803        /* */
     2170      804    1     DCL ECCB$ PTR;
     2171      805    1     DCL ERRCODE BIT(36) STATIC;
     2172      806    1     DCL DCB# UBIN;
     2173      807        /* */
     2174      808    1           CALL M$XCON(RESET_XCON);

    808  3 000002   000006 630400 1                  EPPR0   RESET_XCON
         3 000003   010003 713400                    CLIMB   4099
         3 000004   400400 401760                    pmme    nvectors=2

     2175      809    1           IF B$ECCB$->B$ECCB.XCONF.NOTCB THEN

    809  3 000005   000000 470400 xsym               LDP0    B$ECCB$
PL6.E3A0      #008=FKA$XCON File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:33 Page:453  
         3 000006   000004 236100                    LDQ     4,,PR0
         3 000007   000200 316003                    CANQ    128,DU
         3 000010   000015 600000 3                  TZE     s:812

     2176      810    1              ECCB$=B$TCB$->B$TCB.ALT$;

    810  3 000011   000000 471400 xsym               LDP1    B$TCB$
         3 000012   100000 236100                    LDQ     0,,PR1
         3 000013   200005 756100                    STQ     ECCB$,,AUTO
         3 000014   000020 710000 3                  TRA     s:814

     2177      811    1           ELSE
     2178      812    1              ECCB$=B$TCB$->B$TCB.STK$;

    812  3 000015   000000 471400 xsym               LDP1    B$TCB$
         3 000016   100001 236100                    LDQ     1,,PR1
         3 000017   200005 756100                    STQ     ECCB$,,AUTO

     2179      813
     2180      814    1           IF NOT ECCB$->B$XCON.RNST.OPERR THEN

    814  3 000020   200005 473500                    LDP3    ECCB$,,AUTO
         3 000021   300101 236100                    LDQ     65,,PR3
         3 000022   020000 316003                    CANQ    8192,DU
         3 000023   000027 601000 3                  TNZ     s:816

     2181      815    1              ERRCODE=ECCB$->B$XCON.ERR;

    815  3 000024   300102 236100                    LDQ     66,,PR3
         3 000025   000000 756000 2                  STQ     ERRCODE
         3 000026   000030 710000 3                  TRA     s:817

     2182      816    1           ELSE ERRCODE='0'B;

    816  3 000027   000000 450000 2                  STZ     ERRCODE

     2183      817    1           DCB#=0;
PL6.E3A0      #008=FKA$XCON File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:33 Page:454  

    817  3 000030   200006 450100                    STZ     DCB#,,AUTO

     2184      818
     2185      819    2           CALL FKA$CLOSE(CLOSERR) WHENALTRETURN DO;

    819  3 000031   200003 634500                    EPPR4   CLOSERR,,AUTO
         3 000032   200010 454500                    STP4    DCB#+2,,AUTO
         3 000033   200010 630500                    EPPR0   DCB#+2,,AUTO
         3 000034   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000035   000000 701000 xent               TSX1    FKA$CLOSE
         3 000036   000040 702000 3                  TSX2    s:820
         3 000037   000047 710000 3                  TRA     s:827

     2186      820    2              IF ERRCODE='0'B THEN

    820  3 000040   000000 235000 2                  LDA     ERRCODE
         3 000041   000047 601000 3                  TNZ     s:827

     2187      821    3              DO;

     2188      822    3                 ERRCODE=CLOSERR.ERR;

    822  3 000042   200003 236100                    LDQ     CLOSERR,,AUTO
         3 000043   000000 756000 2                  STQ     ERRCODE

     2189      823    3                 DCB#=CLOSERR.DCB#;

    823  3 000044   200004 236100                    LDQ     CLOSERR+1,,AUTO
         3 000045   777777 376007                    ANQ     -1,DL
         3 000046   200006 756100                    STQ     DCB#,,AUTO

     2190      824    3                 END;

     2191      825    2              END;

     2192      826
PL6.E3A0      #008=FKA$XCON File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:33 Page:455  
     2193      827    1           IF ERRCODE ~= '0'B THEN

    827  3 000047   000000 235000 2                  LDA     ERRCODE
         3 000050   000076 600000 3                  TZE     s:836

     2194      828    2           DO;                             /* SET ERROR                          */

     2195      829    2              IF FKA_MON = %NO# THEN

    829  3 000051   000000 234000 xsym               SZN     FKA_MON
         3 000052   000072 604000 3                  TMI     s:833

     2196      830    2                 IF DCB#=0 THEN

    830  3 000053   200006 236100                    LDQ     DCB#,,AUTO
         3 000054   000062 601000 3                  TNZ     s:832

     2197      831    2                    CALL XUR$ERRMSG(ERRCODE);

    831  3 000055   000000 630400 4                  EPPR0   0
         3 000056   000017 631400 xsym               EPPR1   B_VECTNIL+15
         3 000057   000000 701000 xent               TSX1    XUR$ERRMSG
         3 000060   000000 011000                    NOP     0
         3 000061   000072 710000 3                  TRA     s:833

     2198      832    2                 ELSE CALL XUR$ERRMSG(ERRCODE,DCB#);

    832  3 000062   200006 630500                    EPPR0   DCB#,,AUTO
         3 000063   200011 450500                    STP0    DCB#+3,,AUTO
         3 000064   000000 236000 4                  LDQ     0
         3 000065   200010 756100                    STQ     DCB#+2,,AUTO
         3 000066   200010 630500                    EPPR0   DCB#+2,,AUTO
         3 000067   000020 631400 xsym               EPPR1   B_VECTNIL+16
         3 000070   000000 701000 xent               TSX1    XUR$ERRMSG
         3 000071   000000 011000                    NOP     0

     2199      833    2              CALL M$XXX(FPT_XXX);
PL6.E3A0      #008=FKA$XCON File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:33 Page:456  

    833  3 000072   000000 630400 1                  EPPR0   FPT_XXX
         3 000073   000003 713400                    CLIMB   3
         3 000074   400400 401760                    pmme    nvectors=2

     2200      834    2              END;                         /* SET ERROR                          */

    834  3 000075   000100 710000 3                  TRA     s:837

     2201      835    1           ELSE
     2202      836    1              CALL M$EXIT;

    836  3 000076   000001 713400                    CLIMB   exit
         3 000077   000000 401760                    pmme    nvectors=0

     2203      837    1   END FKA$XCON;

    837  3 000100   000000 702200 xent               TSX2  ! X66_AARET

PL6.E3A0      #008=FKA$XCON File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:33 Page:457  
--  Include file information  --

   FK_DATA_C.:E05TOU  is referenced.
   FKA_DATA_R.:E05TOU  cannot be made into a system file and is referenced.
   CP_6_SUBS.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
   B$JIT_C.:E05TOU  was found in the system file and is never referenced.
   CP_6_C.:E05TOU  was found in the system file and is referenced.
      No diagnostics issued in procedure FKA$XCON.
PL6.E3A0      #008=FKA$XCON File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:33 Page:458  

 **** Variables and constants ****

  ****  Section 001 RoData FKA$XCON

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(216)   r     1 FPT_XXX                    6-0-0/d STRC(216)   r     1 RESET_XCON

  ****  Section 002  Data  FKA$XCON

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/b BIT         r     1 ERRCODE

  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     3-0-0/w STRC(72)    r     1 CLOSERR                    6-0-0/w UBIN        r     1 DCB#
     5-0-0/w PTR         r     1 ECCB$

  ****  SYMREF variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/w PTR         r     1 B$ECCB$                    0-0-0/w PTR         r     1 B$TCB$
     0-0-0/b BIT         r     1 FKA_MON

  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

PL6.E3A0      #008=FKA$XCON File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:33 Page:459  
     0-0-0/w STRC(180)   r     1 B$ECCB                     0-0-0/w STRC(144)   r     1 B$TCB
     0-0-0/w STRC(2448)  r     1 B$XCON


   Procedure FKA$XCON requires 65 words for executable code.
   Procedure FKA$XCON requires 10 words of local(AUTO) storage.

    No errors detected in file FKA$ALTKEY.:E05TSI    .
PL6.E3A0      #008=FKA$XCON File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:33 Page:460  
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #008=FKA$XCON File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:33 Page:461  
          MINI XREF LISTING

B$ALT.CODE
       770**DCL       770--REDEF     771--REDEF     771--REDEF
B$ALT.ERR.ERR#
       772**DCL       772--REDEF
B$ALT.EVID
       771**DCL       771--REDEF     771--REDEF
B$ECCB.XCONF.NOTCB
       789**DCL       809>>IF
B$ECCB$
       801**DCL       809>>IF
B$TCB.ALT$
       766**DCL       810>>ASSIGN
B$TCB.STK$
       766**DCL       812>>ASSIGN
B$TCB$
       802**DCL       810>>ASSIGN    812>>ASSIGN
B$XCON.ERR
       783**DCL       815>>ASSIGN
B$XCON.ERR.ERR#
       783**DCL       783--REDEF
B$XCON.LIMIT.MEM
       781**DCL       781--REDEF
B$XCON.RNST.OPERR
       779**DCL       814>>IF
CLOSERR
       795**DCL       819<>CALL
CLOSERR.DCB#
       798**DCL       823>>ASSIGN
CLOSERR.ERR
       796**DCL       822>>ASSIGN
DCB#
       806**DCL       817<<ASSIGN    823<<ASSIGN    830>>IF        832<>CALL
PL6.E3A0      #008=FKA$XCON File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:33 Page:462  
ECCB$
       804**DCL       810<<ASSIGN    812<<ASSIGN    814>>IF        815>>ASSIGN
ERRCODE
       805**DCL       743--DCLINIT   815<<ASSIGN    816<<ASSIGN    820>>IF        822<<ASSIGN    827>>IF
       831<>CALL      832<>CALL
FKA$CLOSE
       749**DCL-ENT   819--CALL
FKA_MON
       647**DCL       829>>IF
FPT_XXX
       743**DCL       833<>CALL
FPT_XXX.V
       743**DCL       743--DCLINIT
FPT_XXX.V.STEPCC#
       744**DCL       744--REDEF
M$EXIT
        39**DCL-ENT   836--CALL
M$XCON
        82**DCL-ENT   808--CALL
M$XXX
        39**DCL-ENT   833--CALL
RESET_XCON
       762**DCL       808<>CALL
RESET_XCON.V
       763**DCL       762--DCLINIT
XUR$ERRMSG
       748**DCL-ENT   831--CALL      832--CALL
PL6.E3A0      #008=FKA$XCON File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:33 Page:463  
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #008=FKA$XCON File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:33 Page:464  
              MINI UREF LISTING

FKA$XCON      17**PROC
FKA_ALTKEYS$     647**DCL
FKA_BOUND     650**DCL
FKA_CLOSE_DONE     654**DCL
FKA_CMDVAR     653**DCL
FKA_CMDVAR_EXIST     653**DCL
FKA_CMDVAR_SET     653**DCL
FKA_CODE19$     649**DCL
FKA_CODE20$     649**DCL
FKA_DATA_BUF     652**DCL
FKA_DATA_BUF$     652**DCL
FKA_DATA_GRAN     650**DCL
FKA_DCB$     650**DCL
FKA_DUPS     651**DCL
FKA_FIELD_START_DATA     648**DCL
FKA_FILE_OPEN     653**DCL
FKA_INDEX_BUF     651**DCL
FKA_INDEX_BUF$     652**DCL
FKA_INDEX_GRAN     650**DCL
FKA_IRKEYS$     648**DCL
FKA_IRKEYS_DATA     648**DCL
FKA_KEYSIZE     651**DCL
FKA_KFIELD$     649**DCL
FKA_KFIELD_DATA     649**DCL
FKA_KTPTR$     650**DCL
FKA_M$CLOSE_ERR     654**DCL
FKA_NUMKEYS     651**DCL
FKA_RECFIELD$     647**DCL
FKA_RECSIZE     651**DCL
FKA_START$     647**DCL
FKA_UNIQUE     647**DCL
M$ACCT      44**DCL-ENT
PL6.E3A0      #008=FKA$XCON File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:33 Page:465  
M$ACTIVATE      47**DCL-ENT
M$ALIB      40**DCL-ENT
M$ASUSER      42**DCL-ENT
M$ATTACH      49**DCL-ENT
M$BADPP      67**DCL-ENT
M$CGCTL      48**DCL-ENT
M$CGINFO      48**DCL-ENT
M$CHECK      29**DCL-ENT
M$CHGUNIT      87**DCL-ENT
M$CLOSE      27**DCL-ENT
M$CLRSTK      85**DCL-ENT
M$CMDVAR      96**DCL-ENT
M$CONFIG      57**DCL-ENT
M$CORRES      32**DCL-ENT
M$CPEXIT      41**DCL-ENT
M$CVM      65**DCL-ENT
M$CVOL      30**DCL-ENT
M$DCLFLD      57**DCL-ENT
M$DEACTIVATE      47**DCL-ENT
M$DELREC      29**DCL-ENT
M$DEQ      94**DCL-ENT
M$DETACH      49**DCL-ENT
M$DEVICE      31**DCL-ENT
M$DISPLAY      94**DCL-ENT
M$DISPRES      34**DCL-ENT
M$DLIB      40**DCL-ENT
M$DRIBBLE      57**DCL-ENT
M$DRTN      85**DCL-ENT
M$DSUSER      42**DCL-ENT
M$ENQ      93**DCL-ENT
M$EOM      52**DCL-ENT
M$ERASE      58**DCL-ENT
M$ERR      39**DCL-ENT
M$ERRMSG      90**DCL-ENT
M$EVENT      82**DCL-ENT
M$EXHUME      91**DCL-ENT
PL6.E3A0      #008=FKA$XCON File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:33 Page:466  
M$EXTEND      31**DCL-ENT
M$FDP      63**DCL-ENT
M$FDS      62**DCL-ENT
M$FEBOOT      55**DCL-ENT
M$FECTL      56**DCL-ENT
M$FEDUMP      55**DCL-ENT
M$FID      90**DCL-ENT
M$FINDPROC      44**DCL-ENT
M$FSUSER      42**DCL-ENT
M$FVP      64**DCL-ENT
M$FWCG      48**DCL-ENT
M$GBPL      68**DCL-ENT
M$GDDL      64**DCL-ENT
M$GDP      63**DCL-ENT
M$GDS      62**DCL-ENT
M$GETDCB      33**DCL-ENT
M$GETMOUSE      73**DCL-ENT
M$GETPM      74**DCL-ENT
M$GJOB      92**DCL-ENT
M$GLINEATTR      52**DCL-ENT
M$GOODPP      67**DCL-ENT
M$GPLATEN      60**DCL-ENT
M$GPROMPT      59**DCL-ENT
M$GTRMATTR      53**DCL-ENT
M$GTRMCTL      51**DCL-ENT
M$GTRMTAB      54**DCL-ENT
M$GVP      63**DCL-ENT
M$HELP      90**DCL-ENT
M$INT      82**DCL-ENT
M$INTRTN      43**DCL-ENT
M$IOQ      78**DCL-ENT
M$JOBSTATS      92**DCL-ENT
M$KEYIN      32**DCL-ENT
M$LDEV      27**DCL-ENT
M$LDTRC      40**DCL-ENT
M$LIMIT      33**DCL-ENT
PL6.E3A0      #008=FKA$XCON File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:33 Page:467  
M$LINES      32**DCL-ENT
M$LINK      39**DCL-ENT
M$MADMUCK      35**DCL-ENT
M$MAKUSER      66**DCL-ENT
M$MBS      34**DCL-ENT
M$MDFFLD      58**DCL-ENT
M$MERC      83**DCL-ENT
M$MERCS      84**DCL-ENT
M$MIRROR      78**DCL-ENT
M$MONINFO      95**DCL-ENT
M$MPL      68**DCL-ENT
M$NODEINFO      59**DCL-ENT
M$NXTUSR      93**DCL-ENT
M$OCMSG      91**DCL-ENT
M$OLAY      39**DCL-ENT
M$OPEN      27**DCL-ENT
M$PAS      68**DCL-ENT
M$PATHCON      91**DCL-ENT
M$PDS      62**DCL-ENT
M$PFIL      29**DCL-ENT
M$PLATEN      53**DCL-ENT
M$PRECORD      31**DCL-ENT
M$PROCNAME      44**DCL-ENT
M$PROFILE      55**DCL-ENT
M$PROMPT      51**DCL-ENT
M$RACST      35**DCL-ENT
M$RDSYSLOG      76**DCL-ENT
M$READ      28**DCL-ENT
M$RELDCB      33**DCL-ENT
M$RELRES      34**DCL-ENT
M$RELSTARF      36**DCL-ENT
M$REM      36**DCL-ENT
M$RENV      83**DCL-ENT
M$REQUIRE      35**DCL-ENT
M$RETRY      84**DCL-ENT
M$RETRYS      84**DCL-ENT
PL6.E3A0      #008=FKA$XCON File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:33 Page:468  
M$REW      30**DCL-ENT
M$RLSFLD      58**DCL-ENT
M$RPRIV      86**DCL-ENT
M$RSPP      65**DCL-ENT
M$RSWITCH      87**DCL-ENT
M$RUE      93**DCL-ENT
M$SAD      66**DCL-ENT
M$SAVE      42**DCL-ENT
M$SCON      43**DCL-ENT
M$SCREECH      41**DCL-ENT
M$SENV      83**DCL-ENT
M$SETFMA      27**DCL-ENT
M$SETFP      56**DCL-ENT
M$SINPUT      54**DCL-ENT
M$SLCFLD      59**DCL-ENT
M$SMOUSE      73**DCL-ENT
M$SMPRT      65**DCL-ENT
M$SPRIV      86**DCL-ENT
M$SSC      66**DCL-ENT
M$SSWITCH      86**DCL-ENT
M$STATE      95**DCL-ENT
M$STD      67**DCL-ENT
M$STIMER      81**DCL-ENT
M$STLPP      64**DCL-ENT
M$STRAP      81**DCL-ENT
M$STRMATTR      53**DCL-ENT
M$STRMCTL      51**DCL-ENT
M$STRMTAB      54**DCL-ENT
M$SYMBIO      92**DCL-ENT
M$SYSCON      78**DCL-ENT
M$SYSID      96**DCL-ENT
M$TDCLOSE      77**DCL-ENT
M$TDIO      77**DCL-ENT
M$TDOPEN      76**DCL-ENT
M$TDREQCPU      77**DCL-ENT
M$TEMPWROC      71**DCL-ENT
PL6.E3A0      #008=FKA$XCON File=FKA$ALTKEY.:E05TSI                              TUE 07/29/97 15:33 Page:469  
M$TIME      94**DCL-ENT
M$TRAP      81**DCL-ENT
M$TRMISC      56**DCL-ENT
M$TRMPRG      52**DCL-ENT
M$TRTN      85**DCL-ENT
M$TRUNC      28**DCL-ENT
M$TTIMER      81**DCL-ENT
M$UC      51**DCL
M$UMPL      68**DCL-ENT
M$UNFID      90**DCL-ENT
M$UNLATCH      47**DCL-ENT
M$UNSHARE      44**DCL-ENT
M$USRFIELD      87**DCL-ENT
M$VIRTUAL      62**DCL-ENT
M$WAIT      85**DCL-ENT
M$WEOF      30**DCL-ENT
M$WRITE      28**DCL-ENT
M$WRSYSLOG      76**DCL-ENT
M$XCONRTN      43**DCL-ENT
M$XEQTIME      95**DCL-ENT
M$XFLUSH      36**DCL-ENT
M$XMOUSE      73**DCL-ENT
M$YC      41**DCL-ENT
