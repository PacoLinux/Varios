*M*  GFR$APPEND - Append string to READ_BUF in GOFER
*T***********************************************************
*T*                                                         *
*T* Copyright (c) Bull HN Information Systems Inc., 1992    *
*T*                                                         *
*T***********************************************************
*F*  NAME: GFR$APPEND[_COMP]
*    PURPOSE: To append the given string into READ_BUF, will set
*    an E$LD error if we lost data.
*F*  NAME: GFR$MATCH
*    PURPOSE: This routine goes through the search definition and
*    tries to match it to READ_BUF - will return if successful,
*    else will altreturn
*
        ENTDEF   GFR$APPEND_COMP  * (SOURCE_STR);
        ENTDEF   GFR$APPEND       * (SOURCE_STR);
        ENTDEF   GFR$MATCH        * ALTRET (NO_MATCH)
        SYMDEF   APPEND_VFC
        SYMDEF   APPEND_NO_VFC
 
        SYMREF   READ_BUF         * user output buffer
        SYMREF   RSIZE#           * index into output buffer
        SYMREF   ERROR#           * error# if one occurs
        SYMREF   E_LD             * lost data error code
        SYMREF   TEMP#            * just a temporary value
        SYMREF   IDXSTRL#         * length of INDEX_STR in 36 bits
        SYMREF   HEAD$            * points to headnode for line match
 
PR0     EQU      0                * argument list pointer
PR1     EQU      1                * descriptor list pointer
PR2     EQU      2                * AUTO stack pointer
PR7     EQU      7                * source string pointer
X0      EQU      0                * index string length
X1      EQU      1                * return location
X2      EQU      2                * temp value
X3      EQU      3                * index into translation table
X6      EQU      6                * source string length
        EJECT
GFR$APPEND_COMP  EQU *            * append compressed string
        LDP7     0,,PR0           * get string length/pointer
        LXL2     2,,PR1
        LDA      0,X2,PR2         * get length in 6-bit bytes
        ARS      1                * A = (A * 9) / 6
        ADA      0,X2,PR2
        EAX6     0,AL             * remember # of 6-bit bytes
 
        LDX3     0,DU             * X3 - start in UPPER case
        LDQ      =O040,DL         * set previous character to ' '
        EAA      0,,PR7           * setup the SC indirect word
        STA      READ_BUF
 
DECOM_LOOP       EQU *
        SBX6     1,DU             * see if there's a byte to get
        TMI      1,X1             * RETURN if no more bytes
        LDA      READ_BUF,SC      * get the next compressed byte
        XEC      CONTROL,AL       * check out the operation to perform
 
        QRL      18               * shift Q into bottom half
APPEND_ASCII     EQU *            * append the ascii character in A
        STQ      RSIZE#+1,SC      * output into READ_BUF
        TTN      LOSTDATA
        AOS      RSIZE#           * increment the output count
        TRA      DECOM_LOOP
 
TOGGLE           EQU *            * toggle LOWER and UPPER case
        ERX3     =O040,DU         * diff between LOWER and UPPER case
        TRA      DECOM_LOOP
 
NONASCII         EQU *            * next 2 bytes are a non-ascii char
        SBX6     2,DU             * need 2 more bytes for this one
        TMI      1,X1             * if not, we're done, so RETURN
        LDQ      READ_BUF,SC      * get the first half
        QLS      6
        ADQ      READ_BUF,SC      * and combine the second half
        TRA      APPEND_ASCII
 
REPEAT           EQU *            * next 1 byte is repeat count - 3
        SBX6     1,DU             * need 1 more byte for this one
        TMI      1,X1             * if none there, we're done - RETURN
        LDA      READ_BUF,SC      * get the repeat count
        ADA      3,DL             * make a correct repeat count
REPEAT_LOOP
        STQ      RSIZE#+1,SC      * append the repeat character
        TTN      LOSTDATA
        AOS      RSIZE#           * increment the output count
        SBA      1,DL             * until we've runout repeat value
        TPNZ     REPEAT_LOOP
        TRA      DECOM_LOOP
 
LOSTDATA         EQU *
        LDA      RSIZE#+1,SCR     * backup just in case another append
        LDA      E_LD             * LostData error
        STA      ERROR#
        TSX2     1,X1             * RETURN
 
GFR$APPEND       EQU *            * append uncompressed string
        LDP7     0,,PR0           * get string length/pointer
        LXL2     2,,PR1
        LDA      0,X2,PR2         * get length in 9-bit bytes
        LDQ      256,DL
        SBQ      RSIZE#           * Q = 256 - RSIZE# (length remain)
        CMPQ     0,X2,PR2         * compare Q to value in A
        TPL      APPEND_ALL       * see if source fits into target
        LDA      E_LD             * LostData error
        STA      ERROR#
        LDA      256,DL           * so use target length
        SBA      RSIZE#
APPEND_ALL       EQU *
        LDQ      RSIZE#           * Q = target index, A = source len
        MLR      (1,1),(0,1,,QL)
        ADSC9    0,,AL,PR7
        ADSC9    READ_BUF+3,,AL
        ASA      RSIZE#           * update target index
        TSX2     1,X1             * RETURN
 
CONTROL          EQU *            * type of operation, by control byte
        TRA      NONASCII         *  0 - non-ascii char
        TRA      TOGGLE           *  1 - toggle case
        TRA      REPEAT           *  2 - repeat last char
        LDQ      =O040,DU         *  3 - ascii ' '
        LDQ      =O041,DU         *  4 - ascii '!'
        LDQ      =O042,DU         *  5 - ascii '"'
        LDQ      =O043,DU         *  6 - ascii '#'
        LDQ      =O044,DU         *  7 - ascii '$'
        LDQ      =O045,DU         * 10 - ascii '%'
        LDQ      =O047,DU         * 11 - ascii ''''
        LDQ      =O050,DU         * 12 - ascii '('
        LDQ      =O051,DU         * 13 - ascii ')'
        LDQ      =O052,DU         * 14 - ascii '*'
        LDQ      =O053,DU         * 15 - ascii '+'
        LDQ      =O054,DU         * 16 - ascii ','
        LDQ      =O055,DU         * 17 - ascii '-'
        LDQ      =O056,DU         * 20 - ascii '.'
        LDQ      =O057,DU         * 21 - ascii '/'
        LDQ      =O060,DU         * 22 - ascii '0'
        LDQ      =O061,DU         * 23 - ascii '1'
        LDQ      =O062,DU         * 24 - ascii '2'
        LDQ      =O063,DU         * 25 - ascii '3'
        LDQ      =O064,DU         * 26 - ascii '4'
        LDQ      =O065,DU         * 27 - ascii '5'
        LDQ      =O066,DU         * 30 - ascii '6'
        LDQ      =O067,DU         * 31 - ascii '7'
        LDQ      =O070,DU         * 32 - ascii '8'
        LDQ      =O071,DU         * 33 - ascii '9'
        LDQ      =O072,DU         * 34 - ascii ':'
        LDQ      =O073,DU         * 35 - ascii ';'
        LDQ      =O074,DU         * 36 - ascii '<'
        LDQ      =O075,DU         * 37 - ascii '='
        LDQ      =O076,DU         * 40 - ascii '>'
        LDQ      =O077,DU         * 41 - ascii '?'
        LDQ      =O100,DU         * 42 - ascii '@'
        EAQ      =O101,X3         * 43 - ascii 'A' / 'a'
        EAQ      =O102,X3         * 44 - ascii 'B' / 'b'
        EAQ      =O103,X3         * 45 - ascii 'C' / 'c'
        EAQ      =O104,X3         * 46 - ascii 'D' / 'd'
        EAQ      =O105,X3         * 47 - ascii 'E' / 'e'
        EAQ      =O106,X3         * 50 - ascii 'F' / 'f'
        EAQ      =O107,X3         * 51 - ascii 'G' / 'g'
        EAQ      =O110,X3         * 52 - ascii 'H' / 'h'
        EAQ      =O111,X3         * 53 - ascii 'I' / 'i'
        EAQ      =O112,X3         * 54 - ascii 'J' / 'j'
        EAQ      =O113,X3         * 55 - ascii 'K' / 'k'
        EAQ      =O114,X3         * 56 - ascii 'L' / 'l'
        EAQ      =O115,X3         * 57 - ascii 'M' / 'm'
        EAQ      =O116,X3         * 60 - ascii 'N' / 'n'
        EAQ      =O117,X3         * 61 - ascii 'O' / 'o'
        EAQ      =O120,X3         * 62 - ascii 'P' / 'p'
        EAQ      =O121,X3         * 63 - ascii 'Q' / 'q'
        EAQ      =O122,X3         * 64 - ascii 'R' / 'r'
        EAQ      =O123,X3         * 65 - ascii 'S' / 's'
        EAQ      =O124,X3         * 66 - ascii 'T' / 't'
        EAQ      =O125,X3         * 67 - ascii 'U' / 'u'
        EAQ      =O126,X3         * 70 - ascii 'V' / 'v'
        EAQ      =O127,X3         * 71 - ascii 'W' / 'w'
        EAQ      =O130,X3         * 72 - ascii 'X' / 'x'
        EAQ      =O131,X3         * 73 - ascii 'Y' / 'y'
        EAQ      =O132,X3         * 74 - ascii 'Z' / 'z'
        LDQ      =O137,DU         * 75 - ascii '_'
        LDQ      =O174,DU         * 76 - ascii '|'
        LDQ      =O176,DU         * 77 - ascii '~'
 
        EVEN
APPEND_VFC
        DEC      -1
        TALLYB   READ_BUF+2,258,3
APPEND_NO_VFC
        DEC      0
        TALLYB   READ_BUF+3,257,0
        EJECT
GFR$MATCH       EQU *
        LDP0     HEAD$            * point to head node to match
MATCH_LOOP       EQU *
        LXL0     0,,PR0           * get the control word for the node
        TMI      =O400000+MATCH_DONE,X0*
        CANX0    4,DU             * check for CLEAR INDEX
        TZE      DONT_CLEAR
        LDQ      0,DL
DONT_CLEAR       EQU *
        LDA      RSIZE#
        STQ      TEMP#
        SBA      TEMP#            * A = valid string length after IDX
        LDX2     0,,PR0           * get length of INDEX string
REINDEX          EQU *
        SXL2     IDXSTRL#
        CMPX2    3,DU
        TNC      INDEXR,X2
 
INDEXn           EQU *            * index length > 2
        SCD      (0,1,,Q),(1)
        ADSC9    READ_BUF+3,,A
        ADSC9    3,,2,PR0
        ARG      TEMP#
        TTN      NODE_FAILED
        ADQ      TEMP#
        SBA      TEMP#
        CMPA     IDXSTRL#         * check if there's room for INDEX
        TMI      NODE_FAILED
        CMPC     (0,1,,Q),(1,1)
        ADSC9    READ_BUF+3,,X2
        ADSC9    3,,X2,PR0
        TZE      PASS
DO_REINDEX       EQU *
        ADQ      1,DL             * INDEXed, but not matched, reindex
        SBA      1,DL
        TRA      REINDEX
 
INDEXR           EQU *            * index routine for IDXL <= 2
        TRA      PASS             * if IDXL = 0, this is a PASS
        TRA      INDEX1           * if IDXL = 1, then a simple SCM
*       TRA      INDEX2           * if IDXL = 2, then a simple SCD
 
INDEX2           EQU *            * index length = 2
        SCD      (0,1,,Q),(1)
        ADSC9    READ_BUF+3,,A
        ADSC9    3,,2,PR0
        ARG      TEMP#
        TRA      INDEX12_COMMON
 
INDEX1           EQU *            * index length = 1
        SCM      (0,1,,Q),(1)
        ADSC9    READ_BUF+3,,A
        ADSC9    3,,1,PR0
        ARG      TEMP#
INDEX12_COMMON   EQU *
        TTN      NODE_FAILED
        ADQ      TEMP#
        SBA      TEMP#
 
PASS             EQU *            * index = 0, or pass
*       now check for IDENT_CHARS and BEFORE or AFTER bits in X0
*       if they don't match, goto reindex
        CANX0    1,DU             * check if absolute end wanted
        TZE      CHECK_FRONT
        CMPA     IDXSTRL#         * see if we're at the end of line
        TMOZ     CHECK_FRONT
        ADQ      IDXSTRL#         * no, so check the character
        MVT      (0,,,QL),()
        ADSC9    READ_BUF+3,,1
        ADSC9    TEMP#,,1
        ARG      IDENT_CHAR
        SBQ      IDXSTRL#
        SZN      TEMP#
        TMI      DO_REINDEX       * post last char is an IDENT char
CHECK_FRONT      EQU *
        CANX0    2,DU             * check if absolute start wanted
        TZE      NODE_PASSED
        CMPQ     0,DL             * see if we're at start of line
        TZE      NODE_PASSED
        MVT      (0,,,QL),()
        ADSC9    READ_BUF+2,3,1
        ADSC9    TEMP#,,1
        ARG      IDENT_CHAR
        SZN      TEMP#
        TMI      DO_REINDEX       * pre first char is an IDENT char
 
NODE_PASSED      EQU *
        ADQ      IDXSTRL#         * Q += size of index
        LDP0     2,,PR0           * node$ = PASS$
        TRA      MATCH_LOOP
 
NODE_FAILED      EQU *            * node match failed
        LDP0     1,,PR0           * node$ = FAIL$
        TRA      MATCH_LOOP
 
MATCH_DONE       EQU *            * the matching is completed
        ARG      0,X1             * ALTRETURN - this is a fail node
        ARG      1,X1             * RETURN - this is a pass node
 
IDENT_CHAR       EQU *            * locates identifier characters
*
     OCT   000000000000        * NUL SOH STX ETX
     OCT   000000000000        * EOT ENQ ACK BEL
     OCT   000000000000        *  BS  HT  LF  VT
     OCT   000000000000        *  FF  CR  SO  SI
     OCT   000000000000        * DLE DC1 DC2 DC3
     OCT   000000000000        * DC4 NAK SYN ETB
     OCT   000000000000        * CAN  EM SUB ESC
     OCT   000000000000        *  FS  GS  RS  US
     OCT   000000000777        * SPC   !   "   #
     OCT   777000000000        *   $   %   &   '
     OCT   000000000000        *   (   )   *   +
     OCT   000000000000        *   ,   -   .   /
     OCT   777777777777        *   0   1   2   3
     OCT   777777777777        *   4   5   6   7
     OCT   777777000000        *   8   9   :   ;
     OCT   000000000000        *   <   =   >   ?
     OCT   777777777777        *   @   A   B   C
     OCT   777777777777        *   D   E   F   G
     OCT   777777777777        *   H   I   J   K
     OCT   777777777777        *   L   M   N   O
     OCT   777777777777        *   P   Q   R   S
     OCT   777777777777        *   T   U   V   W
     OCT   777777777000        *   X   Y   Z   [
     OCT   000000000777        *   \   ]   ^   _
     OCT   000777777777        *   `   a   b   c
     OCT   777777777777        *   d   e   f   g
     OCT   777777777777        *   h   i   j   k
     OCT   777777777777        *   l   m   n   o
     OCT   777777777777        *   p   q   r   s
     OCT   777777777777        *   t   u   v   w
     OCT   777777777000        *   x   y   z   {
     OCT   000000000000        *   |   }   ~ DEL
     OCT   000000000000        *       .200-.203
     OCT   000000000000        *       .204-.207
     OCT   000000000000        *       .210-.213
     OCT   000000000000        *       .214-.217
     OCT   000000000000        *       .220-.223
     OCT   000000000000        *       .224-.227
     OCT   000000000000        *       .230-.233
     OCT   000000000000        *       .234-.237
     OCT   000000000000        *       .240-.243
     OCT   000000000000        *       .244-.247
     OCT   000000000000        *       .250-.253
     OCT   000000000000        *       .255-.257
     OCT   000000000000        *       .260-.263
     OCT   000000000000        *       .264-.267
     OCT   000000000000        *       .270-.273
     OCT   000000000000        *       .274-.277
     OCT   000000000000        *       .300-.303
     OCT   000000000000        *       .304-.307
     OCT   000000000000        *       .310-.313
     OCT   000000000000        *       .314-.317
     OCT   000000000000        *       .320-.323
     OCT   000000000000        *       .324-.327
     OCT   000000000000        *       .330-.333
     OCT   000000000000        *       .334-.337
     OCT   000000000000        *       .340-.343
     OCT   000000000000        *       .344-.347
     OCT   000000000000        *       .350-.353
     OCT   000000000000        *       .355-.357
     OCT   000000000000        *       .360-.363
     OCT   000000000000        *       .364-.367
     OCT   000000000000        *       .370-.373
     OCT   000000000000        *       .374-.377
     OCT   000000000000        *       .400-.403
     OCT   000000000000        *       .404-.407
     OCT   000000000000        *       .410-.413
     OCT   000000000000        *       .414-.417
     OCT   000000000000        *       .420-.423
     OCT   000000000000        *       .424-.427
     OCT   000000000000        *       .430-.433
     OCT   000000000000        *       .434-.437
     OCT   000000000000        *       .440-.443
     OCT   000000000000        *       .444-.447
     OCT   000000000000        *       .450-.453
     OCT   000000000000        *       .455-.457
     OCT   000000000000        *       .460-.463
     OCT   000000000000        *       .464-.467
     OCT   000000000000        *       .470-.473
     OCT   000000000000        *       .474-.477
     OCT   000000000000        *       .500-.503
     OCT   000000000000        *       .504-.507
     OCT   000000000000        *       .510-.513
     OCT   000000000000        *       .514-.517
     OCT   000000000000        *       .520-.523
     OCT   000000000000        *       .524-.527
     OCT   000000000000        *       .530-.533
     OCT   000000000000        *       .534-.537
     OCT   000000000000        *       .540-.543
     OCT   000000000000        *       .544-.547
     OCT   000000000000        *       .550-.553
     OCT   000000000000        *       .555-.557
     OCT   000000000000        *       .560-.563
     OCT   000000000000        *       .564-.567
     OCT   000000000000        *       .570-.573
     OCT   000000000000        *       .574-.577
     OCT   000000000000        *       .600-.603
     OCT   000000000000        *       .604-.607
     OCT   000000000000        *       .610-.613
     OCT   000000000000        *       .614-.617
     OCT   000000000000        *       .620-.623
     OCT   000000000000        *       .624-.627
     OCT   000000000000        *       .630-.633
     OCT   000000000000        *       .634-.637
     OCT   000000000000        *       .640-.643
     OCT   000000000000        *       .644-.647
     OCT   000000000000        *       .650-.653
     OCT   000000000000        *       .655-.657
     OCT   000000000000        *       .660-.663
     OCT   000000000000        *       .664-.667
     OCT   000000000000        *       .670-.673
     OCT   000000000000        *       .674-.677
     OCT   000000000000        *       .700-.703
     OCT   000000000000        *       .704-.707
     OCT   000000000000        *       .710-.713
     OCT   000000000000        *       .714-.717
     OCT   000000000000        *       .720-.723
     OCT   000000000000        *       .724-.727
     OCT   000000000000        *       .730-.733
     OCT   000000000000        *       .734-.737
     OCT   000000000000        *       .740-.743
     OCT   000000000000        *       .744-.747
     OCT   000000000000        *       .750-.753
     OCT   000000000000        *       .755-.757
     OCT   000000000000        *       .760-.763
     OCT   000000000000        *       .764-.767
     OCT   000000000000        *       .770-.773
     OCT   000000000000        *       .774-.777
