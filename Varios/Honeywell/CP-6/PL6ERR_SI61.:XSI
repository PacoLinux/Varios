/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/*****************************************************************************\
*                                                                             *
*     PL6ERR will read a NEW or OLD(slow) PL6 LS file and scan it for         *
* errors.  When/if found, it backs up to the preceeding PL6 statement         *
* (hopefully the one in error) and prints all lines up to but not             *
* including the next PL6 statement, at which point it resumes looking         *
* for errors.                                                                 *
*                                                                             *
* !PL6ERR. lsfile [{ON|OVER|INTO} , lofile]                                   *
*   lsfile= M$SI= #1= PL6 LS file                                             *
*   lofile= M$LO= #4= PL6ERR output                                           *
*                                                                             *
* If one gets in the habit of compiling to 'LS' files and uses PL6ERR         *
* to find the errors(if any), you can effectively get all errors out          *
* of the program before getting a listing(possibly from same LS file          *
* by using LISTER.X).  This can make a sizable improvement in productivity    *
* since instead of waiting for a listing, you just wait til the compile       *
* completes.                                                                  *
*                                                                             *
* Note: Packset managers would probably appreciate you deleting the           *
*       LS file(s) when you no longer need it/them.                           *
*                                                                             *
* The following JCL will suppress ALL printer output.                         *
*   !JOB                                                                      *
*   !RES ...                                                                  *
*   !SET M$LL NO                                                              *
*   !PL6 source,updates OVER object,lsfile(...)                               *
*   !ERASE                                                                    *
*                                                                             *
* AF/TER = [ nn | ALL]  Where nn is the number of lines of the error          *
*                       message to print.                                     *
*                    ** Default is ALL.                                       *
*                                                                             *
* AN/NOUNCE             Prints the record number and procedure name(s)        *
*                       prior to the first error in each procedure.           *
*                       Nothing is printed for a procedure if it has no       *
*                       errors.                                               *
*                    ** Default is NANNOUNCE.                                 *
*                                                                             *
* A/LL                  Instructs PL6ERR to scan ALL procedures in the        *
*                       LS file.                                              *
*                    ** Default is ALL (see ONE option for alternative).      *
*                                                                             *
* BC([name1,...]        Allows the selection of specific procedures           *
*    [num1,...] [ALL])  within the LS file, either by procedure NAME or       *
*                       its relative position(ie. 1,2,5,...).  If ALL is      *
*                       specified, ALL procedures are selected.               *
*                    ** Default is ALL.                                       *
*                                                                             *
* B/EFORE = nn          Where nn is the number of lines prior to the          *
*                       error message to print.                               *
*                    ** Default is BEFORE=1.                                  *
*                                                                             *
* C/OMPRESS             Indicates to COMPRESS multiple blanks in statements   *
*                       and/or error messages down to 1 blank.                *
*                    ** If PL6ERR is being run online and on a non-CRT        *
*                       terminal(ie. TRMATTR.HEIGHT = 0) then COMPRESS        *
*                       is the default.  Otherwise NCOMPRESS is assumed.      *
*                                                                             *
* NA/NNOUNCE            Indicates Not to ANNOUNCE procedures when errors      *
*                       are found.                                            *
*                    ** Default.                                              *
*                                                                             *
* NC/OMPRESS            Indicates Not to COMPRESS all blanks in statements    *
*                       and/or error messages down to 1 blank.                *
*                    ** For default, see COMPRESS.                            *
*                                                                             *
* NS/UMMARY             Indicates Not to print diagnostic SUMMARY messages    *
*                       for each external procedure.                          *
*                    ** Default is SUMMARY.                                   *
*                                                                             *
* NW/ARN                Indicates Not to print WARNing messages(ie. severity  *
*                       level of zero).  This is equivalent to SEVERITY>0.    *
*                       Note:  This option is only of use if the PL6 LS       *
*                              file was created with a compile that did       *
*                              not have NWARN as a option.                    *
*                    ** Default is SEVERITY>=0 (ie. all error messages)       *
*                                                                             *
* O/NE                  Indicates the LS file contains only ONE external      *
*                       procedure.  This instructs PL6ERR to either look      *
*                       at the next to the last line(record) for the          *
*                       '...errors detected in file...' which NEW PL6 outputs *
*                       or look at the last line for                          *
*                       '  --TOTAL DIAGNOSTIC ISSUED ... =   nn' which        *
*                       the OLD PL6 outputs, to determine if there were       *
*                       any errors.  If none, PL6ERR quits.  Otherwise,       *
*                       it reads the entire file looking for the error(s).    *
*                    ** Default is ALL.                                       *
*                                                                             *
* SU/MMARY              Indicates to print diagnostic SUMMARY messages        *
*                       for each external procedure.                          *
*                    ** Default.                                              *
*                                                                             *
* S/EVERITY [ ~= | <= | >= | = | < | > ] n                                    *
*                       Indicates to select errors with severities with       *
*                       the indicated relation to n (ie. SEV>3 would          *
*                       select any/only errors with severity greater than     *
*                       3).                                                   *
*                    ** Default is SEVERITY>=0 (any errors).                  *
*                                                                             *
* W/IDTH                Sets the Width of the printout(M$LO).  If not         *
*                    ** Default is taken from either the PLATEN width or RECL,*
*                       which ever is applicable.                             *
*                                                                             *
\*****************************************************************************/
%EJECT;
PL6ERR: PROC MAIN;
 
%LIST;
%INCLUDE PL6ERR_C61;
%EJECT;
%PLIST;
%INCLUDE B$JIT;
%INCLUDE CP_6;
%INCLUDE XU_MACRO_C;
%F$DCB;
%B$TCB;
%B$ALT;
 
%SUB NO='0'B;
%SUB YES='1'B;
 
/*******************/
/*                 */
/*    M$LO FPTs    */
/*                 */
/*******************/
 
%FPT_OPEN    (FPTN=OPN_LO,
              ASN=DEVICE,
              DCB=M$LO,
              RES='ME  ');
%FPT_OPEN    (FPTN=OPN_LO_ASIS,
              FUN=CREATE,
              DCB=M$LO);
%FPT_WRITE   (FPTN=WRITE_LO,
              DCB=M$LO,
              BUF=SI3.DATA);
%FPT_WRITE   (FPTN=RITE_LO,
              DCB=M$LO,
              BUF=LO_BUF);
%FPT_CLOSE   (FPTN=CLOS_LO,
              DCB=M$LO,
              DISP=SAVE);
%EJECT;
/*******************/
/*                 */
/*    M$SI FPTs    */
/*                 */
/*******************/
 
%FPT_OPEN    (FPTN=OPN_SI,
              DCB=M$SI,
              FUN=IN,
              NAME=SI_NAME,
              ASN=FILE);
%VLP_NAME    (FPTN=SI_NAME,
              NAME='*LO',
              LEN=3);
%FPT_OPEN    (FPTN=OPN_SI_ASIS,
              DCB=M$SI);
%FPT_READ    (FPTN=READ_SI,
              DCB=M$SI,
              BUF=SI_BUF);
%FPT_CLOSE   (FPTN=CLOS_SI,
              DCB=M$SI,
              DISP=SAVE);
%FPT_PRECORD (FPTN=BACKUPN,
              DCB=M$SI);
%FPT_PRECORD (FPTN=BACKUP1,
              DCB=M$SI,
              N=-2);
%FPT_PRECORD (FPTN=BACKUP2,
              DCB=M$SI,
              N=-3);
%FPT_PRECORD (FPTN=GET_NUM_RECS,
              DCB=M$SI,
              N=99999);
%FPT_PFIL    (FPTN=PFIL_BOF,
              DCB=M$SI,
              BOF=YES);
%EJECT;
%FPT_PFIL    (FPTN=PFIL_EOF,
              BOF=NO,
              DCB=M$SI);
%FPT_ERRMSG  (FPTN=ERRMSG,
              DCB=NIL,
              BUF=ERR_MESG,
              CODE=ERR_CODE,
              OUTDCB1=M$DO);
%FPT_TRMATTR (FPTN=GET_TRM_ATTR,
              DCB=M$UC,
              TRMATTR=TRMATTR);
%VLP_TRMATTR (FPTN=TRMATTR);
%FPT_INT     (FPTN=BREAK_CNTL,
              UENTRY=BREAK);
%FPT_PROMPT  (FPTN=SET_PROMPT,
              PROMPT=PROMPT_STR);
%FPT_READ    (FPTN=READ_ME,
              BUF=ME_BUF,
              DCB=M$ME);
%FPT_EXIT    (FPTN=SET_STEPCC,
              STEPCC=OK );
%EJECT;
/**********************/
/*                    */
/*    PARSER STUFF    */
/*                    */
/**********************/
 
%P_PCB     (NAME=PL6ERR_OPTS,
            N#="LENGTHC(SI_BUF)",
            R=PL6ERR_NODES,
            T=SI_BUF,
            W=WORK,
            WSZ="SIZEW(WORK)");
%PARSE$OUT (NAME=P_OUT,
            STCLASS="BASED(BLK1$)");
%PARSE$SYM (NAME=P_SYM,
            STCLASS="BASED(BLK2$)");
DCL BLK1$                    PTR;
DCL BLK2$                    PTR;
DCL BLK3$                    PTR;
DCL PL6ERR_NODES             UBIN      SYMREF;
DCL WORK                     CHAR(1340) STATIC ALIGNED;
DCL X$PARSE                  ENTRY(1)  ALTRET;
%EJECT;
DCL M$DO                     DCB;
DCL M$SI                     DCB;
DCL M$LO                     DCB;
DCL M$ME                     DCB;
 
DCL M$SI$                    PTR;
DCL M$LO$                    PTR;
DCL B$TCB$  SYMREF           PTR;
DCL B$JIT$  SYMREF           PTR;
 
DCL BREAK                    ENTRY     ASYNC;
DCL ERR_MESG                 CHAR(360) STATIC;
DCL ERR_CODE                 BIT(36)   STATIC;
%EJECT;
DCL 1 SI  STATIC,                              /*  COLUMNS  */
      2 VFC                  CHAR(1)   UNAL,   /* VFC       */
      2 PL6                  CHAR(3)   UNAL,   /* 001 - 003 */
      2 PROC_LIT             CHAR(10)  UNAL,   /* 004 - 013 */
      2 *                    CHAR(06)  UNAL,   /* 014 - 019 */
      2 PROC_NAME            CHAR(31)  UNAL,   /* 020 - 050 */
      2 FILE_NAME            CHAR(31)  UNAL,   /* 051 - 081 */
      2 DATE                 CHAR(18)  UNAL,   /* 082 - 099 */
      2 *                    CHAR(33)  UNAL;   /* 100 - 132 */
DCL 1 SI2 REDEF SI,
      2 VFC                  CHAR(1)   UNAL,   /* VFC       */
      2 PARTRGE              CHAR(7)   UNAL,   /* 001 - 007 */
      2 *                    CHAR(10)  UNAL,   /* 008 - 017 */
      2 LAST_DIGIT           CHAR(1)   UNAL,   /* 018       */
      2 PAST_STMT            CHAR(1)   UNAL,   /* 019       */
      2 *                    CHAR(46)  UNAL,   /* 020 - 065 */
      2 PROC_NAME            CHAR(31)  UNAL,   /* 066 - 096 */
      2 *                    CHAR(36)  UNAL;   /* 097 - 132 */
DCL 1 SI3 REDEF SI,
      2 *                    CHAR(1),          /* VFC       */
      2 DATA                 CHAR(132);        /* 001 - 132 */
DCL 1 SI4 REDEF SI,
      2 *                    CHAR(14)  UNAL,   /* VFC - 013 */
      2 ERROR                CHAR(15)  UNAL,   /* 014 - 028 */
      2 *                    CHAR(104);        /* 029 - 132 */
DCL 1 SI5 REDEF SI,
      2 VFC                  CHAR(1)   UNAL,   /* VFC       */
      2 LINE                 CHAR(10)  UNAL,   /* 001 - 010 */
      2 STMT                 CHAR(8)   UNAL,   /* 011 - 018 */
      2 *                    CHAR(114) UNAL;   /* 019 - 132 */
DCL 1 SI6 REDEF SI,
      2 *                    CHAR(15)  UNAL,   /* VFC - 014 */
      2 UNIT                 CHAR(1)   UNAL,   /* 015       */
      2 PROC_NAME            CHAR(3)   UNAL,   /* 016 - 018 */
      2 *                    CHAR(114) UNAL;   /* 019 - 132 */
DCL SI_BUF REDEF SI          CHAR(133);        /* VFC - 132 */
%EJECT;
DCL BC_NAME(0:99)            CHAR(32)  STATIC INIT(' '*0);
DCL COMPILE_DATE             CHAR(18)  STATIC INIT(
    'Haven''t found date');
DCL INT5                     CHAR(5)   STATIC;
DCL INT6                     CHAR(6)   STATIC;
DCL LO_BUF                   CHAR(132) STATIC;
DCL ME_BUF                   CHAR(1)   STATIC;
DCL PREV_STMT                CHAR(133) STATIC;
DCL PROC_NAME                CHAR(31)  STATIC INIT('No proc found yet');
DCL PROMPT_STR               CHAR(0)   STATIC INIT('Enter C to continue .');
DCL SEVERITY                 CHAR(1)   STATIC;
%EJECT;
DCL AFTER                    UBIN      STATIC INIT(999);
DCL BC_NUM(0:99)             UBIN      STATIC;
DCL BC_NUM_CNT               UBIN      STATIC INIT(0);
DCL BC_NAME_CNT              UBIN      STATIC INIT(0);
DCL BEFORE                   UBIN      STATIC INIT(1);
DCL BEG                      UBIN      STATIC;
DCL HEIGHT                   UBIN      STATIC;
DCL I                        SBIN      STATIC;
DCL J                        UBIN      STATIC;
DCL LEN                      UBIN      STATIC;
DCL NUM_RECS                 UBIN      STATIC INIT(0);
DCL POS                      UBIN      STATIC;
DCL PROC_ERRORS              UBIN      STATIC;
DCL PROC_NUM                 UBIN      STATIC INIT(0);
DCL PROCS_FOUND              UBIN      STATIC INIT(0);
DCL REC_CNT                  UBIN      STATIC INIT(0);
DCL SEV_OPR                  UBIN      STATIC INIT(GT#);
DCL WIDTH                    UBIN      STATIC INIT(0);
%EJECT;
DCL ALL                      BIT(1)    STATIC INIT(NO);
DCL ALL_DONE                 BIT(1)    STATIC INIT(NO);
DCL ANNOUNCE                 BIT(1)    STATIC INIT(NO);
DCL BC                       BIT(1)    STATIC INIT(NO);
DCL BC_ALL                   BIT(1)    STATIC INIT(YES);
DCL BROKEN                   UBIN      STATIC SYMDEF INIT(0);
DCL COMPRESS                 BIT(1)    STATIC INIT(NO);
DCL DEFAULT_SEV              BIT(1)    STATIC INIT(YES);
DCL ITS_A_STMT               BIT(1)    STATIC;
DCL NON_PL6_FOUND            BIT(1)    STATIC INIT(NO);
DCL ONE                      BIT(1)    STATIC INIT(YES);
DCL SUMMARY                  BIT(1)    STATIC INIT(YES);
DCL SKIP_PROC                BIT(1)    STATIC INIT(NO);
%EJECT;
START:
    M$SI$= DCBADDR(DCBNUM(M$SI));
    M$LO$= DCBADDR(DCBNUM(M$LO));
    CALL PARSE  ALTRET( EOJ );
OPEN_SI:
    IF M$SI$->F$DCB.AMR# THEN
         CALL M$OPEN(OPN_SI_ASIS)  ALTRET(CALL_ERRMSG);
    ELSE CALL M$OPEN(OPN_SI)       ALTRET(CALL_ERRMSG);
    IF M$LO$->F$DCB.AMR# THEN
         CALL M$OPEN(OPN_LO_ASIS)  ALTRET(CALL_ERRMSG);
    ELSE CALL M$OPEN(OPN_LO)       ALTRET(CALL_ERRMSG);
 
    IF WIDTH = 0 THEN
         IF M$LO$->F$DCB.RECL# ~= 0 THEN
              WIDTH= M$LO$->F$DCB.RECL#;
         ELSE IF M$LO$->F$DCB.WIDTH# ~= 0 THEN
                   WIDTH= M$LO$->F$DCB.WIDTH#;
              ELSE WIDTH= 132;  /* If all else fails, assume 132! */
    WRITE_LO.BUF_.BOUND= WIDTH-1;
 
    IF B$JIT.MODE = %M_INT# THEN DO;  /* If ONLINE */
         CALL M$INT( BREAK_CNTL );
         CALL M$PROMPT( SET_PROMPT );
         CALL M$GTRMATTR( GET_TRM_ATTR );
         IF TRMATTR.HEIGHT# = 0  AND
            (M$LO$->F$DCB.RES# = 'ME  '  OR
             M$LO$->F$DCB.RES# = 'CR  '  OR
             M$LO$->F$DCB.RES# = 'LO  ')  THEN
              COMPRESS= YES;  /* Think we're on HARDCOPY so COMPRESS */
         END;
    CALL READ_A_RECORD  ALTRET( EOJ );
    CALL CHECK_4_NEW_PROC  ALTRET( READ_SUM_LINE );
    IF SUBSTR(SI_BUF,1,1) = '*' AND
       SUBSTR(SI_BUF,8,7) ~= 'DENOTES'  THEN
         CALL PRINT  ALTRET( EOJ );
%EJECT;
READ_SUM_LINE:
    CALL FIND_SUM_LINE  ALTRET( EOJ );
    SET_STEPCC.V.STEPCC#= 4;  /* Set STEPCC upon exit indicating errors       */
    NUM_RECS= M$SI$->F$DCB.NRECS#;
    CALL READ_A_RECORD  ALTRET( EOJ );
READ_RECORDS:
    DO WHILE( '1'B );
         CALL CHECK_4_NEW_PROC  ALTRET( NEXT_REC );
         CALL ISIT_ERROR  ALTRET( FIND_STMT_IN_ERR );
NEXT_REC:
         IF ALL_DONE THEN
              GOTO EOJ;
         IF SUBSTR(SI_BUF,1,1) = '*' AND
            SUBSTR(SI_BUF,8,7) ~= 'DENOTES'  THEN
              CALL PRINT  ALTRET( EOJ );
         CALL READ_A_RECORD  ALTRET( EOJ );
         GOTO END_READ_RECORDS;
 
FIND_STMT_IN_ERR:
         IF BEFORE > 0 THEN
              CALL BACKUP(BEFORE);
 
PUTEM:
         CALL PRINT  ALTRET( CALL_ERRMSG );
         DO I = 0-(BEFORE-1) TO AFTER-1;
              CALL READ_A_RECORD  ALTRET( EOJ );
              DO WHILE( SI.VFC = 'r'  OR   /* Top of Form */
                        SI3.DATA = ' ' );  /* blank line  */
                   CALL READ_A_RECORD  ALTRET( EOJ );
                   END;
              IF (ITS_A_STMT  AND
                  I >= 0      AND
                  AFTER = 999)  THEN
                   I= AFTER; /* TERMINATE LOOP */
              ELSE IF SI.PL6 = '-- ' THEN DO;
                        CALL READ_A_RECORD  ALTRET( EOJ );
                        CALL INDEX( J,'diagnostic',SI_BUF );
                        DO WHILE( J = LENGTHC(SI_BUF) );
                            CALL READ_A_RECORD  ALTRET( EOJ );
                            CALL INDEX( J,'diagnostic',SI_BUF );
                            END;
                        CALL READ_A_RECORD  ALTRET( EOJ );
                        DO WHILE( SI3.DATA = ' ');
                           CALL READ_A_RECORD  ALTRET( EOJ );
                           END;
                        DO WHILE( SI.PROC_LIT = 'Procedure ' );
                           CALL READ_A_RECORD  ALTRET( EOJ );
                           END;
                        END;
                   ELSE CALL PRINT  ALTRET( EOJ );
              END;
         IF AFTER < 999 THEN
              DO WHILE( NOT ITS_A_STMT );
                   CALL READ_A_RECORD  ALTRET( EOJ );
                   END;
END_READ_RECORDS:
         END READ_RECORDS;
EOJ:
    CALL M$CLOSE(CLOS_LO);
    CALL M$EXIT( SET_STEPCC );
 
CALL_ERRMSG:
    ERR_CODE= B$TCB$->B$TCB.ALT$->B$ALT.ERR;
    ERRMSG.V.DCB#= B$TCB$->B$TCB.ALT$->B$ALT.DCB#;
    CALL M$ERRMSG(ERRMSG);
    CALL M$XXX;
%EJECT;
CHECK_4_NEW_PROC: PROC  ALTRET;
 
    IF SI.VFC ~= 'r' THEN  /* Top of page? */
         IF SKIP_PROC THEN
              ALTRETURN;  /* Procedure not one selected via BC */
         ELSE IF SI.VFC ~= '`' THEN
                   RETURN;
              ELSE DO;
                     SKIP_PROC= YES;
                     ALTRETURN;
                   END;
 
    IF SI.PL6 = 'PL6' THEN  DO; /* NEW PL6 heading? */
         CALL INDEX( J,' ',SI.PROC_NAME );
         IF PROC_NAME = SUBSTR(SI.PROC_NAME,0,J) THEN /* Same proc as before? */
              ALTRETURN;                   /* Yep! */
         ELSE DO;
                PROC_NAME= SUBSTR(SI.PROC_NAME,0,J);
                COMPILE_DATE= SUBSTR(SI_BUF,82,18);
              END;
         END;
    ELSE IF SI6.UNIT = 'UNIT ' THEN
              IF PROC_NAME = SI6.PROC_NAME THEN
                   ALTRETURN;
              ELSE DO;
                     PROC_NAME= SI6.PROC_NAME;
                     COMPILE_DATE= SUBSTR(SI_BUF,73,22);
                   END;
         ELSE DO;
              SKIP_PROC= YES;
              IF NOT NON_PL6_FOUND THEN DO;
                LO_BUF= '* I found a non-PL6 heading ... Continuing scan *';
                CALL M$WRITE( RITE_LO );
                CALL M$WRITE( WRITE_LO );
                NON_PL6_FOUND= YES;
                END;
              END;
    PROC_ERRORS= 0;
    PROC_NUM= PROC_NUM + 1;
    SKIP_PROC= NO;
    IF PROC_NUM = 1  OR
       ANNOUNCE      THEN
         CALL ANNOUNCE_IT;
    IF BC THEN DO;
         PROCS_FOUND= PROCS_FOUND + 1;
         DO I = 1 TO BC_NUM_CNT;
           IF PROC_NUM = BC_NUM(I) THEN
                ALTRETURN;
           END;
         DO I = 1 TO BC_NAME_CNT;
           IF PROC_NAME = BC_NAME(I) THEN
                ALTRETURN;
           END;
         PROCS_FOUND= PROCS_FOUND - 1;
         SKIP_PROC= YES;
         IF PROCS_FOUND >= BC_NUM_CNT + BC_NAME_CNT THEN
              ALL_DONE= YES;
         END;
    ALTRETURN;
 
END CHECK_4_NEW_PROC;
%EJECT;
ISIT_ERROR: PROC  ALTRET;
 
    CALL INDEX2(BEG,' Z',SUBSTR(SI4.ERROR,0,7))  ALTRET( NOT_ERROR );
 
    IF BEG > 0  AND  /* Is it a heading of the form */
       SUBSTR(SI4.ERROR,BEG-1,1) = '=' THEN /* ...NAME= Z... ? */
         GOTO NOT_ERROR;
    IF DEFAULT_SEV THEN
         GOTO ITIS_ERROR;
 
    DO CASE( SEV_OPR );
      CASE( NE# );
        IF SUBSTR(SI4.ERROR,BEG+11,1) ~= SEVERITY THEN
             GOTO ITIS_ERROR;
      CASE( LE# );
        IF SUBSTR(SI4.ERROR,BEG+11,1) <= SEVERITY THEN
             GOTO ITIS_ERROR;
      CASE( GE# );
        IF SUBSTR(SI4.ERROR,BEG+11,1) >= SEVERITY THEN
             GOTO ITIS_ERROR;
      CASE( EQ# );
        IF SUBSTR(SI4.ERROR,BEG+11,1) = SEVERITY THEN
             GOTO ITIS_ERROR;
      CASE( LT# );
        IF SUBSTR(SI4.ERROR,BEG+11,1) < SEVERITY THEN
             GOTO ITIS_ERROR;
      CASE( GT# );
        IF SUBSTR(SI4.ERROR,BEG+11,1) > SEVERITY THEN
             GOTO ITIS_ERROR;
      END;
 
NOT_ERROR:
    RETURN;
 
ITIS_ERROR:
    PROC_ERRORS= PROC_ERRORS + 1;
    IF PROC_ERRORS = 1  AND
       ANNOUNCE         THEN
         CALL ANNOUNCE_IT;
    ALTRETURN;
 
END ISIT_ERROR;
%EJECT;
PRINT: PROC  ALTRET;
 
    LEN= M$SI$->F$DCB.ARS#;
    IF COMPRESS THEN
         CALL COMPRES(SI_BUF,LEN);
    CALL M$WRITE( WRITE_LO )  ALTRET( WTF );
    RETURN;
 
WTF:
    ALTRETURN;
 
END PRINT;
%EJECT;
BACKUP: PROC(N)  ALTRET;
 
DCL N                        UBIN;
 
    IF ADDR(N) ~= ADDR(NIL) THEN DO;
         BACKUPN.V.N#= 0 - N - 1;
         CALL M$PRECORD( BACKUPN )  ALTRET( C_YA );
         REC_CNT= REC_CNT - N - 1;
         CALL READ_A_RECORD  ALTRET( OOPS );
         END;
 
    DO WHILE( (NOT ITS_A_STMT)      OR
              SI.PL6 = 'PL6'        OR
              SI3.DATA = ' ' );
         CALL M$PRECORD( BACKUP1 )  ALTRET( C_YA );
         REC_CNT= REC_CNT - 2;
         CALL READ_A_RECORD  ALTRET( OOPS );
         END;
 
C_YA:
    RETURN;
 
OOPS:
    ALTRETURN;
 
END BACKUP;
%EJECT;
PARSE: PROC  ALTRET;
 
    IF SUBSTR(B$JIT.CCBUF,B$JIT.CCDISP,1) ~= '(' THEN
         RETURN;
    PL6ERR_OPTS.NCHARS= B$JIT.CCARS - B$JIT.CCDISP - 1;
    IF SUBSTR(B$JIT.CCBUF,B$JIT.CCDISP+1,PL6ERR_OPTS.NCHARS) = ' ' THEN
         RETURN;
    PL6ERR_OPTS.TEXT$= PINCRC(ADDR(B$JIT.CCBUF),B$JIT.CCDISP+1);
    CALL X$PARSE( PL6ERR_OPTS)  ALTRET( PARSE_ERR );
    BLK1$= PL6ERR_OPTS.OUT$;
    DO I = 0 TO BLK1$->P_OUT.NSUBLKS-1;
      BLK2$= BLK1$->P_OUT.SUBLK$(I);
      POS= BLK2$->P_SYM.CODE;
      DO CASE( BLK2$->P_SYM.CODE );
        CASE( AFTER# );
          BLK3$= BLK2$->P_OUT.SUBLK$(0);
          IF BLK3$->P_SYM.CODE = NUMERIC# THEN
               CALL CHARBIN(AFTER,SUBSTR(BLK3$->P_SYM.TEXT,0,
                                          BLK3$->P_SYM.COUNT));
          ELSE AFTER= 999;
        CASE( ANNOUNCE# );
          ANNOUNCE= YES;
        CASE( ALL# );
          ALL= YES;
        CASE( BC# );
          ALL= YES;
          BC_ALL= NO;
          BC= YES;
          DO J = 0 TO BLK2$->P_OUT.NSUBLKS-1;
            BLK3$= BLK2$->P_OUT.SUBLK$(J);
            IF BLK3$->P_SYM.CODE = NUMERIC# THEN DO;
                 BC_NUM_CNT= BC_NUM_CNT + 1;
                 CALL CHARBIN(BC_NUM(BC_NUM_CNT),SUBSTR(BLK3$->P_SYM.TEXT,0,
                                                         BLK3$->P_SYM.COUNT));
                 END;
            ELSE DO;
                   BC_NAME_CNT= BC_NAME_CNT + 1;
                   BC_NAME(BC_NAME_CNT)= SUBSTR(BLK3$->P_SYM.TEXT,0,
                                                 BLK3$->P_SYM.COUNT);
                   IF BC_NAME(BC_NAME_CNT) = 'ALL' THEN DO;
                     BC_NAME_CNT= 0;
                     BC= NO;
                     BC_ALL= YES;
                     END;
                 END;
            END;
        CASE( BEFORE# );
          BLK3$= BLK2$->P_OUT.SUBLK$(0);
          CALL CHARBIN(BEFORE,SUBSTR(BLK3$->P_SYM.TEXT,0,BLK3$->P_SYM.COUNT));
        CASE( COMPRESS# );
          COMPRESS= YES;
        CASE( NANNOUNCE# );
          ANNOUNCE= NO;
        CASE( NCOMPRESS# );
          COMPRESS= NO;
        CASE( NSUMMARY# );
          SUMMARY= NO;
        CASE( NWARN# );
          DEFAULT_SEV= NO;
          SEVERITY= '0';
          SEV_OPR= GT#;
        CASE( ONE# );
          ALL= NO;
        CASE( SUMMARY# );
          SUMMARY= YES;
        CASE( SEVERITY# );
          DEFAULT_SEV= NO;
          BLK3$= BLK2$->P_OUT.SUBLK$(0);
          SEV_OPR= BLK3$->P_SYM.CODE;
          BLK3$= BLK2$->P_OUT.SUBLK$(1);
          SEVERITY= BLK3$->P_SYM.TEXT;
        CASE( WIDTH## );
          BLK3$= BLK2$->P_OUT.SUBLK$(0);
          CALL CHARBIN( WIDTH,SUBSTR(BLK3$->P_SYM.TEXT,0,BLK3$->P_SYM.COUNT) );
          IF WIDTH < 1  OR
             WIDTH > 132 THEN DO;
               LO_BUF= ' ';
               CALL INSERT( LO_BUF, BLK1$->P_OUT.SUBLK$(0)->P_SYM.CPOS +
                                       B$JIT.CCDISP + 2, 1, '^' );
               CALL M$WRITE( RITE_LO );
               LO_BUF= 'Value must be > 0 AND <= 132';
               CALL M$WRITE( RITE_LO );
               ALTRETURN;
               END;
        CASE( ELSE );
          LO_BUF= ' ';
          CALL INSERT( LO_BUF, BLK1$->P_OUT.SUBLK$(0)->P_SYM.CPOS +
                                  B$JIT.CCDISP + 2, 1, '^' );
          CALL M$WRITE( RITE_LO );
          LO_BUF= 'Oops!  PARTRGE knows of a option that PL6ERR doesn''t!';
          CALL M$WRITE( RITE_LO );
          ALTRETURN;
        END;
      END;
 
C_YA:
    RETURN;
 
PARSE_ERR:
    LO_BUF= ' ';
    CALL INSERT(LO_BUF, PL6ERR_OPTS.HI_CHAR + B$JIT.CCDISP + 2, 1, '^');
    CALL M$WRITE( RITE_LO );
    LO_BUF= 'Invalid PL6ERR option specified; Parsing stopped here';
    CALL M$WRITE( RITE_LO );
    ALTRETURN;
 
END PARSE;
%EJECT;
COMPRES: PROC(TEXT, LENGTH);
 
DCL TEXT                     CHAR(LENGTH);
DCL LENGTH                   UBIN;
 
DCL 1 SKIP_BLANKS  STATIC,
      2 *                    CHAR(32)  UNAL   INIT(' '),
      2 BLANK                BIT(9)    UNAL   INIT('000'O),
      2 *                    CHAR(479) UNAL   INIT(' ');
DCL BEG                      UBIN      STATIC;
DCL LAST                     UBIN      STATIC;
DCL LEN                      UBIN      STATIC;
DCL NEW_LEN                  UBIN      STATIC;
DCL OLD_LEN                  UBIN      STATIC;
DCL TABLEVAL                 UBIN      STATIC;
 
    CALL INDEX2(BEG,'  ',TEXT)  ALTRET( BYE );  /* Anything to do? */
    BEG= 0;
    NEW_LEN= 0;
    OLD_LEN= LENGTH;
    DO WHILE( BEG < OLD_LEN );
      CALL SEARCH(BEG,TABLEVAL,SKIP_BLANKS,TEXT,BEG)  ALTRET( FILL );
      CALL INDEX2(LAST,'  ',TEXT,BEG);
      LEN= LAST - BEG + 1;
      CALL INSERT(TEXT,NEW_LEN,LEN,SUBSTR(TEXT,BEG,LEN));
      BEG= LAST + 2;  /* Point past '  ' */
      NEW_LEN= NEW_LEN + LEN;
      END;
 
FILL:
    CALL INSERT(TEXT,NEW_LEN,LENGTH - NEW_LEN,' ');  /* Clear rest of TEXT */
    LENGTH= NEW_LEN;  /* return COMPRESsed string length */
BYE:
    RETURN;
 
END COMPRES;
%EJECT;
ANNOUNCE_IT: PROC;
 
    CALL BINCHAR(INT5,REC_CNT);
    CALL EDITSTR(INT5,0,4,'104'O,INT5);
    CALL CONCAT(LO_BUF, 'Record ', INT5, ': proc ', PROC_NAME,
                       ' compiled ', COMPILE_DATE );
    LEN= 86;
    CALL COMPRES(LO_BUF,LEN);
    CALL M$WRITE( RITE_LO );
    RETURN;
 
END ANNOUNCE_IT;
%EJECT;
READ_A_RECORD: PROC  ALTRET;
 
    SI_BUF= ' ';
    CALL M$READ( READ_SI )  ALTRET( EOF );
    REC_CNT= REC_CNT + 1;
    IF SI2.PAST_STMT = ' '  AND
       SI2.LAST_DIGIT >= '0' AND
       SI2.LAST_DIGIT <= '9' AND
       SI5.LINE ~= ' '  THEN DO;  /* Ignore lines PL6 continued */
         ITS_A_STMT= YES;
         PREV_STMT= SI_BUF;
         END;
    ELSE DO;
           ITS_A_STMT= NO;
           IF SI.VFC ~= 'A'  AND
              SUMMARY        AND
              (NOT SKIP_PROC) THEN DO;
                CALL INDEX2(BEG,'diagnostic',SI_BUF)  WHENALTRETURN DO;
                   CALL INDEX(BEG,'DIAGNOSTIC',SI_BUF);
                   END;
                IF BEG < 11 THEN
                     CALL PRINT  ALTRET( EOF );
                END;
         END;
    IF BROKEN > 0 THEN
         CALL BREAK_STATS  ALTRET( EOF );
    RETURN;
 
EOF:
    ALTRETURN;
 
END READ_A_RECORD;
%EJECT;
BREAK_STATS: PROC  ALTRET;
 
    CALL BINCHAR(INT5,REC_CNT);
    CALL EDITSTR(INT5,0,4,'104'O,INT5);
    CALL BINCHAR(INT6,NUM_RECS);
    CALL EDITSTR(INT6,0,5,'105'O,INT6);
    LO_BUF= ' ';
    IF ITS_A_STMT THEN
         CALL INSERT( LO_BUF, 0, 29, 'Line ',
                                     SI5.LINE,
                                     ' stmt ',
                                     SI5.STMT);
    CALL INSERT( LO_BUF, 29, , ' At record ',
                               INT5,
                               ' of ',
                               INT6,
                               ' in proc ',
                               PROC_NAME);
    LEN= 95;
    CALL COMPRES(LO_BUF,LEN);
    CALL M$WRITE( RITE_LO );
    IF BROKEN > 1  THEN DO;
         ME_BUF= ' ';
         CALL M$READ( READ_ME );
         IF ME_BUF ~= 'C'  AND
            ME_BUF ~= 'c'  THEN
              ALTRETURN;
         LO_BUF= ' ';
         CALL M$WRITE( RITE_LO );
         END;
    BROKEN= 0;
    RETURN;
 
END BREAK_STATS;
%EJECT;
FIND_SUM_LINE: PROC  ALTRET;
 
    IF M$SI$->F$DCB.NRECS# < 4  OR
       ALL                THEN  /* More than ONE compile went into this file? */
         RETURN;
    CALL M$PFIL( PFIL_EOF )  ALTRET( CALL_ERRMSG );
    CALL M$PRECORD( BACKUP1 )  ALTRET( CALL_ERRMSG );
    SI_BUF= ' ';
    CALL M$READ( READ_SI ) ALTRET( CALL_ERRMSG );/* Read next to the last rec */
    IF SUBSTR(SI_BUF,0,15) = 'A  --MAXIMUM XR' THEN DO; /* OLD PL6? */
         CALL M$READ( READ_SI )  ALTRET( CALL_ERRMSG ); /* Yep. Read last line*/
         CALL M$WRITE( WRITE_LO )  ALTRET( CALL_ERRMSG );
         IF SUBSTR(SI_BUF,37,7) = '=     0' THEN
              ALTRETURN;
         CALL M$PFIL( PFIL_BOF )  ALTRET( CALL_ERRMSG );
         RETURN;
         END;
    ELSE DO;  /* Is this the '... errors detected in file ...' line? */
         CALL INDEX(POS,'detected',SI_BUF);
         IF POS < LENGTHC(SI_BUF) THEN
              CALL M$WRITE( WRITE_LO )  ALTRET( CALL_ERRMSG);
         IF SUBSTR(SI_BUF,5,9) = 'No errors' THEN
              ALTRETURN;
         END;
    CALL M$PFIL( PFIL_BOF )  ALTRET( CALL_ERRMSG );
    RETURN;
 
CALL_ERRMSG:
    ERR_CODE= B$TCB$->B$TCB.ALT$->B$ALT.ERR;
    ERRMSG.V.DCB#= B$TCB$->B$TCB.ALT$->B$ALT.DCB#;
    CALL M$ERRMSG( ERRMSG );
    ALTRETURN;
 
END FIND_SUM_LINE;
 
END PL6ERR;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
BREAK: PROC ASYNC;
 
%INCLUDE CP_6;
%INCLUDE XUD_UTS_M;
%XUD$UTS_ENTRIES;
%XUD_UTS_EQU;
%FPT_TIME   (FPTN=GET_UTS,
             DEST=UTS,
             SOURCE=CLOCK,
             TSTAMP=UTS);
 
%FPT_TRMPRG (FPTN=RESET_BRK_CNT,
             RSTBRK=YES);
 
DCL BREAK_TIME               UBIN      STATIC; /* 500 .01 seconds */
DCL BROKEN                   UBIN      SYMREF;
DCL PREV_TIME                UBIN      STATIC INIT(0);
DCL UTS                      UBIN      STATIC;
DCL TEMP_UTS                 UBIN      STATIC;
 
    CALL XUD$UTS_ADJ_25TH(BREAK_TIME,0,5*%UTS_25TH_SEC#);
    CALL M$TIME( GET_UTS );
    CALL XUD$UTS_DIFF(TEMP_UTS,UTS,PREV_TIME);
    IF TEMP_UTS <= BREAK_TIME  AND
       PREV_TIME > 0 THEN
         BROKEN= BROKEN + 1;
    ELSE PREV_TIME= UTS;
    BROKEN= BROKEN + 1;
    CALL M$TRMPRG(RESET_BRK_CNT);
    RETURN;
 
END BREAK;
