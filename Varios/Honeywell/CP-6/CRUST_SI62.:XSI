/*M* RUCMPR - CoMPaRe two Run Units and see what has changed. */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
/*X* DMR,PLM=5,IND=3,CTI=3,SDI=3,MCL=10,CSI=0,ECI=0 */
                                   /*
                                        Author: D.R Calkins, LADC
                                        Date: 7/89
                                                                  */
READ_FILE: PROC(FPT_READ,TABLE);
 
%INCLUDE CP_6;
%INCLUDE CRUST_C61;
 
%FPT_READ(STCLASS=PARAM);
%TABLE (STCLASS = PARAM);
 
DCL SC_TYPE CHAR(8);
DCL NODES BIT(1);
DCL DO_ENTRY BIT(1);
DCL CUR_ADDR SBIN;
DCL TEMP SBIN;
DCL TABLE_ VECTOR STATIC SYMDEF;
 
DCL ERROR_PLACE REMEMBER STATIC SYMDEF;
DCL TEMP$ PTR SYMREF;
 
%IN_LINE (FPTN=LINE_IN,STCLASS=BASED);
DCL CHAR20 CHAR(20) BASED;
 
     TABLE_ = VECTOR(TABLE);
     TABLE.WASTED = 0;                  /* INITALIZE WASTED */
     TABLE.COUNT = 0;
     TABLE.NODE_COUNT = 0;
     DO_ENTRY ='0'B;
     CUR_ADDR = 0;
 
READ: REMEMBER  READ  IN  ERROR_PLACE;
     TEMP$->CHAR20 = '                    ';
     CALL M$READ(FPT_READ) ALTRET (ALT);
 
     SC_TYPE = TEMP$->LINE_IN.SC_TYPE;
     IF (NOT DO_ENTRY) THEN DO;
        IF (SUBSTR(TEMP$->CHAR20,0,8) = '        ')
        THEN NODES = '0'B;
        IF (NODES) THEN DO;
           TABLE.NODE.NAME(TABLE.NODE_COUNT) = TEMP$->CHAR20;
           TABLE.NODE_COUNT = TABLE.NODE_COUNT + 1;
           END;
        IF (SC_TYPE = '--------')
        THEN NODES = '1'B;
        IF (TEMP$->CHAR20 = '******** CONTROL SEC')
        THEN DO_ENTRY = '1'B;
        GOTO READ;
        END;
     IF (SC_TYPE ~= 'RODATA  ') AND
        (SC_TYPE ~= 'PROC    ') AND
        (SC_TYPE ~= 'DATA    ') THEN GOTO READ;
TYPE: REMEMBER  TYPE  IN  ERROR_PLACE;
     TABLE.PROCEDURE.SC_TYPE(TABLE.COUNT) = TEMP$->LINE_IN.SC_TYPE;
CROP: REMEMBER  CROP  IN  ERROR_PLACE;
     TABLE.PROCEDURE.NAME(TABLE.COUNT) = TEMP$->LINE_IN.PROCNAME;
SIZE: REMEMBER  SIZE  IN  ERROR_PLACE;
     CALL OCTDEC(TEMP$->LINE_IN.SIZE,TABLE.PROCEDURE.SIZE(TABLE.COUNT));
     CALL OCTDEC (TEMP$->LINE_IN.ADDRESS,TEMP);
     IF (CUR_ADDR < TEMP) THEN
        TABLE.WASTED = TABLE.WASTED + (TEMP - CUR_ADDR);
     CUR_ADDR = TEMP+TABLE.PROCEDURE.SIZE(TABLE.COUNT);
     TABLE.COUNT = TABLE.COUNT + 1;
     GOTO READ;
 
ALT: IF TABLE.NODE_COUNT = 0 THEN
     DO;
        TABLE.NODE_COUNT = 1;
        TABLE.NODE.NAME(0) = TABLE.PROCEDURE.NAME(0);
        END;
     RETURN;
 
OCTDEC: PROC(OCT,DEC);
 
DCL OCT CHAR(6) PARAM;
DCL DEC SBIN PARAM;
 
DCL LOOP SBIN;
DCL N SBIN;
 
     DEC = 0;
     DO LOOP = 0 TO 5;
        N = ASCBIN(SUBSTR(OCT,LOOP,1)) - 48;
        IF (N >= 0) THEN
           DEC = DEC * 8 + N;
        END;
     RETURN;
END;
END ;
%EOD;
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
TRAP_PROC: PROC ASYNC;
 
%INCLUDE CP_6;
%INCLUDE B_SEGIDS_C;
%INCLUDE CRUST_C61;
 
%FPT_GDS (RESULTS = TABLE_,
         SEGSIZE = 1024,
         FPTN=GDS);
 
DCL TABLE_ VECTOR SYMREF;
DCL ERROR_PLACE REMEMBER SYMREF;
 
     CALL M$GDS(GDS);
     CALL M$CLRSTK;
     UNWIND TO ERROR_PLACE;
END;
