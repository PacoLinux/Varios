VERSION E05

PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:1    
        1        1        /*M* TOU$BREAK     DEckfile Editor Routine Break Handler program */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* PLM=3,DCI=6,SQB=N,PRB=N,DTI=5,ENI=0,AND=Y,ECI=0,CSU=3,DIN=3,
        9        9             CTI=8,CRM=109,CRT=1,NLB=N,NTB=Y,MCL=110 */
       10       10
       11       11        /*P* NAME:         TOU$BREAK
       12       12             PURPOSE:      DEER Break Handler
       13       13             DESCRIPTION:  Break Control for DEER is established at DEER
       14       14                           initialization time.  A call is made to M$INT
       15       15                           to cause breaks to be  handled by  TOU$BREAK.
       16       16                           This  module  prompts  the user  to see if he
       17       17                           wishes  to  continue  and  returns (continue)
       18       18                           or unwinds (don't continue) accordingly.
       19       19             REFERENCE:    CP-6 Release C0J0
       20       20             LAST UPDATE:  06/24/83
       21       21        */
       22       22
       23       23        /*F*  NAME:        TOU$BREAK
       24       24              DESCRIPTION: Procedure Nesting Hierarchy
       25       25
       26       26              TOU$BREAK: procedure ASYNC
       27       27              TOU$BREAK_FOR_FAULT: entry ASYNC
       28       28                 BREAK_RESET: procedure ALTRET
       29       29                 BREAK_CHECK_TERMINATE: procedure ALTRET
       30       30                 BREAK_DISABLED: procedure
       31       31                 BREAK_USER_CONTINUE: procedure ALTRET
       32       32                 BREAK_ABORT_CMD: procedure
       33       33        */
       34       34        %EJECT;
PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:2    
       35       35        TOU$BREAK: PROC ASYNC ;
       36       36
       37       37        /* Include Files */
       38       38
       39       39           %INCLUDE CP_6;
       40     5598           %INCLUDE TOU_DEER_M ;
       41     7009           %INCLUDE TO_PERR_C ;
       42     7594
       43     7595        /* Variables */
       44     7596
       45     7597           %DUP (STCLASS = SYMREF) ;
       46     7740
       47     7741        /* External Entry Points */
       48     7742
       49     7743    1      DCL TOU$DU_SET_PROMPT          ENTRY ALTRET ;
       50     7744    1      DCL TOU$DU_USER_READ           ENTRY ALTRET ;
       51     7745    1      DCL TOU$DU_SET_EDIT_PROMPT     ENTRY ALTRET ;
       52     7746    1      DCL TOU$DU_USER_WRITE          ENTRY ALTRET ;
       53     7747    1      DCL TOU$DU_SYSTEM_ERRMSG       ENTRY ALTRET ;
       54     7748
       55     7749    1      DCL TOU$DU_CLOSE_IFAD          ENTRY ALTRET ;
       56     7750    1      DCL TOU$DU_CLOSE_DF            ENTRY ALTRET ;
       57     7751    1      DCL TOU$DFU_CLOSE_TEMP         ENTRY ALTRET ;
       58     7752           %EJECT ;
PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:3    
       59     7753        /* ********************
       60     7754           ********************
       61     7755           **  Main Program  **
       62     7756           ********************
       63     7757           ******************** */
       64     7758
       65     7759    1      CALL BREAK_RESET ALTRET (ABORT_COMMAND) ;
       66     7760    1      CALL BREAK_CHECK_TERMINATE ALTRET (ABORT_COMMAND) ;
       67     7761    1      IF DUP.BREAK_DISABLED
       68     7762    1      THEN CALL BREAK_DISABLED ;
       69     7763    1      ELSE CALL BREAK_USER_CONTINUE ALTRET (ABORT_COMMAND) ;
       70     7764    1      RETURN ;
       71     7765
       72     7766    1   ABORT_COMMAND:
       73     7767    1      CALL BREAK_ABORT_CMD ;
       74     7768
       75     7769        /* ********************
       76     7770           ********************
       77     7771           **  End Of  Main  **
       78     7772           ********************
       79     7773           ******************** */
       80     7774        %EJECT ;
PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:4    
       81     7775        /*D*  NAME:        TOU$BREAK_FOR_FAULT
       82     7776              ENTRY:
       83     7777              AUTHOR:      Scott S. Sheppard
       84     7778              INTERFACE:   TOU$DU_USER_WRITE
       85     7779              DESCRIPTION: This entry point is called when a fault occurs
       86     7780                           during DEER processing.
       87     7781        */
       88     7782
       89     7783    1   TOU$BREAK_FOR_FAULT: ENTRY ASYNC ;
       90     7784
       91     7785    1      DUP.PROCESS_COMPLETE = %TRUE ;
       92     7786    1      DUP.MSG_CODE = %E$BR_FAULT ;
       93     7787    1      CALL TOU$DU_USER_WRITE ;
       94     7788    1      DUP.FAULT_ERROR = %TRUE ;
       95     7789    1      CALL TOU$DU_SYSTEM_ERRMSG ;
       96     7790    1      CALL BREAK_ABORT_CMD ;
       97     7791
       98     7792        %EJECT ;
PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:5    
       99     7793        /*I*  NAME:        BREAK_RESET
      100     7794              AUTHOR:      Scott S. Sheppard
      101     7795              PURPOSE:     Resets Break Count
      102     7796              INTERFACE:   M$TRMPRG Monitor Service
      103     7797                           TOU$DU_SYSTEM_ERRMSG
      104     7798                           TOU$DU_USER_WRITE
      105     7799              INPUT:       No system data accessed.
      106     7800              OUTPUT:      Break count reset
      107     7801              DESCRIPTION: This procedure resets the break count so that four
      108     7802                           breaks in a row do not correspond to a  Control-Y.
      109     7803        */
      110     7804
      111     7805    1   BREAK_RESET: PROC ALTRET ;
      112     7806
      113     7807           %FPT_TRMPRG (FPTN   = RESET_COUNT,
      114     7808                        RSTBRK = YES) ;
      115     7837
      116     7838        /* Code */
      117     7839
      118     7840    2      CALL M$TRMPRG (RESET_COUNT) ALTRET (ERROR) ;
      119     7841    2      RETURN ;
      120     7842
      121     7843    2   ERROR:
      122     7844    2      DUP.MSG_CODE = %E$BR_TRMPRG ;
      123     7845    2      CALL TOU$DU_USER_WRITE ;
      124     7846    2      CALL TOU$DU_SYSTEM_ERRMSG ;
      125     7847    2      ALTRETURN ;
      126     7848
      127     7849    2   END BREAK_RESET ;
      128     7850        %EJECT ;
PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:6    
      129     7851        /*I*  NAME:        BREAK_CHECK_TERMINATE
      130     7852              AUTHOR:      Scott S. Sheppard
      131     7853              PURPOSE:     Terminate functions
      132     7854              INTERFACE:   None Called.
      133     7855              INPUT:       DUP.BREAK_TERMINATE
      134     7856              OUTPUT:      DUP.BREAK_TERMINATE
      135     7857              DESCRIPTION: This procedure checks to see if Break was entered
      136     7858                           during the execution of a DEER command that break
      137     7859                           should terminate. (Example: HELP, SHOWDECK, ...)
      138     7860                           When this procedure altreturns,   the user is not
      139     7861                           asked whether or not he wishes to continue. It is
      140     7862                           assumed that he does not.
      141     7863        */
      142     7864
      143     7865    1   BREAK_CHECK_TERMINATE: PROC ALTRET ;
      144     7866
      145     7867        /* Code */
      146     7868
      147     7869    2      IF DUP.BREAK_TERMINATE
      148     7870    3      THEN DO ;
      149     7871    3              DUP.BREAK_TERMINATE = %FALSE ;
      150     7872    3              ALTRETURN ;
      151     7873    3           END /* THEN */ ;
      152     7874    2      ELSE RETURN ;
      153     7875
      154     7876    2   END BREAK_CHECK_TERMINATE ;
      155     7877        %EJECT ;
PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:7    
      156     7878        /*I*  NAME:        BREAK_DISABLED
      157     7879              AUTHOR:      Scott S. Sheppard
      158     7880              PURPOSE:     Notify User of Break Disable
      159     7881              INTERFACE:   TOU$DU_USER_WRITE
      160     7882              INPUT:       DUP.DF.OPEN_TYPE - current access to the deckfile
      161     7883              OUTPUT:      DUP.MSG_CODE
      162     7884              DESCRIPTION: This procedure notifies the user that a break can
      163     7885                           not be allowed at this time.
      164     7886        */
      165     7887
      166     7888    1   BREAK_DISABLED: PROC ;
      167     7889
      168     7890    2      DCL HOLD_CODE   UBIN WORD ALIGNED ;
      169     7891
      170     7892        /* Code */
      171     7893
      172     7894    2      IF DUP.DF.OPEN_TYPE = %UPDATE_FILE
      173     7895    3      THEN DO ;
      174     7896    3              HOLD_CODE = DUP.MSG_CODE ;
      175     7897    3              DUP.MSG_CODE = %E$BR_DISABLE ;
      176     7898    3              CALL TOU$DU_USER_WRITE ;
      177     7899    3              DUP.MSG_CODE = HOLD_CODE ;
      178     7900    3           END /* THEN */ ;
      179     7901    2      ELSE /* Do Nothing */ ;
      180     7902    2      RETURN ;
      181     7903
      182     7904    2   END BREAK_DISABLED ;
      183     7905        %EJECT ;
PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:8    
      184     7906        /*I*  NAME:        BREAK_USER_CONTINUE
      185     7907              AUTHOR:      Scott S. Sheppard
      186     7908              PURPOSE:     Prompts User to continue
      187     7909              INTERFACE:   TOU$DU_SET_PROMPT
      188     7910                           TOU$DU_USER_READ
      189     7911                           TOU$DU_USER_WRITE
      190     7912                           TOU$DU_SET_EDIT_PROMPT
      191     7913              INPUT:       No system data accessed.
      192     7914              OUTPUT:      DUP.RESPONSE - contains user's reply
      193     7915                           DUP.RESPONSE_LGTH - set to expected number of chars
      194     7916              DESCRIPTION: This procedure prompts the user to determine if
      195     7917                           processing  should  continue.   This  procedure
      196     7918                           returns  if  a  'C'  is entered,  otherwise the
      197     7919                           alternate return is taken.
      198     7920        */
      199     7921        %EJECT ;
PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:9    
      200     7922    1   BREAK_USER_CONTINUE: PROC ALTRET ;
      201     7923
      202     7924    2      DCL CONTINUE       CHAR (1) CALIGNED ;
      203     7925    2      DCL SAVE_MSG_CODE  UBIN WORD ALIGNED ;
      204     7926
      205     7927        /* Code */
      206     7928
      207     7929    2      DUP.BREAK_DISABLED = %TRUE ;
      208     7930    2      DUP.HOLD_AREA = 'Break! C to continue:' ;
      209     7931    2      DUP.HOLD_AREA_LGTH = 21 ;
      210     7932    2      CALL TOU$DU_SET_PROMPT ALTRET (ERROR) ;
      211     7933    2      DUP.RESPONSE_LGTH = 1 ;
      212     7934    2      CALL TOU$DU_USER_READ ALTRET (ERROR) ;
      213     7935    2      CONTINUE = SUBSTR (DUP.RESPONSE, 0, 1) ;
      214     7936    2      CALL TOU$DU_SET_EDIT_PROMPT ALTRET (ERROR) ;
      215     7937
      216     7938    2      SAVE_MSG_CODE = DUP.MSG_CODE ;
      217     7939    2      DUP.MSG_CODE = %T$BLANK_LINE ;
      218     7940    2      CALL TOU$DU_USER_WRITE ;
      219     7941    2      DUP.MSG_CODE = SAVE_MSG_CODE ;
      220     7942    2      DUP.BREAK_DISABLED = %FALSE ;
      221     7943
      222     7944    2      IF CONTINUE = 'C'
      223     7945    2      THEN RETURN ;
      224     7946    3      ELSE DO ;
      225     7947    3              DUP.MSG_CODE = %T$BREAK_ABORT ;
      226     7948    3              CALL TOU$DU_USER_WRITE ;
      227     7949    3              ALTRETURN ;
      228     7950    3           END /* ELSE */ ;
      229     7951
      230     7952    2   ERROR:
      231     7953    2      DUP.BREAK_DISABLED = %FALSE ;
      232     7954    2      ALTRETURN ;
      233     7955
      234     7956    2   END BREAK_USER_CONTINUE ;
      235     7957        %EJECT ;
PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:10   
      236     7958        /*I*  NAME:        BREAK_ABORT_COMMAND
      237     7959              AUTHOR:      Scott S. Sheppard
      238     7960              PURPOSE:     Terminates DEER Command
      239     7961              INTERFACE:   TOU$DU_CLOSE_IFAD
      240     7962                           TOU$DU_CLOSE_DF
      241     7963                           TOU$DFU_CLOSE_TEMP
      242     7964              INPUT:       DUP.BREAK_RETURN - address of a label in TOU$DE
      243     7965                           DUP.DF.OPEN_TYPE
      244     7966              OUTPUT:      DUP.BREAK_DISABLED
      245     7967                           DUP.DF.CLOSE_TYPE
      246     7968              DESCRIPTION: This procedure terminates the current DEER command
      247     7969                           by closing DCB's and unwinding back to the driver.
      248     7970        */
      249     7971
      250     7972    1   BREAK_ABORT_CMD: PROC ;
      251     7973
      252     7974        /* Code */
      253     7975
      254     7976    2      CALL TOU$DU_CLOSE_IFAD ;
      255     7977    2      IF DUP.DF.OPEN_TYPE = %CREATE_FILE
      256     7978    2      THEN DUP.DF.CLOSE_TYPE = %DISCARD_FILE ;
      257     7979    2      ELSE DUP.DF.CLOSE_TYPE = %SAVE_FILE ;
      258     7980    2      CALL TOU$DU_CLOSE_DF ;
      259     7981    2      DUP.TEMP.CLOSE_TYPE = %DISCARD_FILE ;
      260     7982    2      CALL TOU$DFU_CLOSE_TEMP ;
      261     7983    2      DUP.BREAK_DISABLED = %FALSE ;
      262     7984
      263     7985    2      UNWIND TO DUP.BREAK_RETURN ;
      264     7986
      265     7987    2   END BREAK_ABORT_CMD ;
      266     7988    1   END TOU$BREAK ;

PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:11   
--  Include file information  --

   TO_PERR_C.:E05TOU  is referenced.
   TOU_DEER_M.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure TOU$BREAK.

   Procedure TOU$BREAK requires 148 words for executable code.
   Procedure TOU$BREAK requires 8 words of local(AUTO) storage.

    No errors detected in file TOU$BREAK.:E05TSI    .

PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:12   

 Object Unit name= TOU$BREAK                                  File name= TOU$BREAK.:E05TOU
 UTS= JUL 30 '97 06:38:32.44 WED                              Compiler= PL-6/E31         Sev=      00
 SharedLib= :SHARED_SYSTEM                                    Alt SharedLib=


    ****  Control sections  ****

 Sect   Type Bound  Init  Size OctSiz  Section name(segment info)
    0   DCB   even  none     0      0  M$UC
    1   Data  even  none     8     10  TOU$BREAK
    2  RoData even  UTS      6      6  TOU$BREAK
    3   Proc  even  none   148    224  TOU$BREAK
    4  RoData even  none     2      2  TOU$BREAK

    ****  Entry defs  ****

                              Check   Calling
                             calling  sequence
  Sect OctLoc Primary Altret sequence   type   Parms  Name
     3      0   yes            yes     Async       0  TOU$BREAK
     3     22                  yes     Async       0  TOU$BREAK_FOR_FAULT
PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:13   

  ****  Entry refs  ****

         Check        Calling
        calling       sequence
Altret sequence SRef   type   Args  Name
 yes     yes           Std       0 TOU$DU_USER_WRITE
 yes     yes           Std       0 TOU$DU_SYSTEM_ERRMSG
 yes     yes           Std       0 TOU$DU_SET_PROMPT
 yes     yes           Std       0 TOU$DU_SET_EDIT_PROMPT
 yes     yes           Std       0 TOU$DU_USER_READ
 yes     yes           Std       0 TOU$DU_CLOSE_IFAD
 yes     yes           Std       0 TOU$DU_CLOSE_DF
 yes     yes           Std       0 TOU$DFU_CLOSE_TEMP
                       nStd      0 X66_AAUTO
                       nStd      0 X66_AARET
                       Std       0 B_CONSPOOL_D
                       nStd      0 X66_AAUNWIND

  ****  Data refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     M$UC                                  DUP                                   B_VECTNIL

  ****  Segment refs  ****

  Flags:  r = read only, s = secondary
Flgs Name                             Flgs Name                             Flgs Name
     ISSID                                 NULLSID
PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:14   


        1        1        /*M* TOU$BREAK     DEckfile Editor Routine Break Handler program */
        2        2        /*T***********************************************************/
        3        3        /*T*                                                         */
        4        4        /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
        5        5        /*T*                                                         */
        6        6        /*T***********************************************************/
        7        7
        8        8        /*X* PLM=3,DCI=6,SQB=N,PRB=N,DTI=5,ENI=0,AND=Y,ECI=0,CSU=3,DIN=3,
        9        9             CTI=8,CRM=109,CRT=1,NLB=N,NTB=Y,MCL=110 */
       10       10
       11       11        /*P* NAME:         TOU$BREAK
       12       12             PURPOSE:      DEER Break Handler
       13       13             DESCRIPTION:  Break Control for DEER is established at DEER
       14       14                           initialization time.  A call is made to M$INT
       15       15                           to cause breaks to be  handled by  TOU$BREAK.
       16       16                           This  module  prompts  the user  to see if he
       17       17                           wishes  to  continue  and  returns (continue)
       18       18                           or unwinds (don't continue) accordingly.
       19       19             REFERENCE:    CP-6 Release C0J0
       20       20             LAST UPDATE:  06/24/83
       21       21        */
       22       22
       23       23        /*F*  NAME:        TOU$BREAK
       24       24              DESCRIPTION: Procedure Nesting Hierarchy
       25       25
       26       26              TOU$BREAK: procedure ASYNC
       27       27              TOU$BREAK_FOR_FAULT: entry ASYNC
       28       28                 BREAK_RESET: procedure ALTRET
       29       29                 BREAK_CHECK_TERMINATE: procedure ALTRET
       30       30                 BREAK_DISABLED: procedure
       31       31                 BREAK_USER_CONTINUE: procedure ALTRET
       32       32                 BREAK_ABORT_CMD: procedure
       33       33        */
       34       34        %EJECT;
PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:15   
       35       35        TOU$BREAK: PROC ASYNC ;

     35  3 000000   000000 700200 xent  TOU$BREAK    TSX0  ! X66_AAUTO
         3 000001   000010 000000                    ZERO    8,0

       36       36
       37       37        /* Include Files */
       38       38
       39       39           %INCLUDE CP_6;
       40     5598           %INCLUDE TOU_DEER_M ;
       41     7009           %INCLUDE TO_PERR_C ;
       42     7594
       43     7595        /* Variables */
       44     7596
       45     7597           %DUP (STCLASS = SYMREF) ;
       46     7740
       47     7741        /* External Entry Points */
       48     7742
       49     7743    1      DCL TOU$DU_SET_PROMPT          ENTRY ALTRET ;
       50     7744    1      DCL TOU$DU_USER_READ           ENTRY ALTRET ;
       51     7745    1      DCL TOU$DU_SET_EDIT_PROMPT     ENTRY ALTRET ;
       52     7746    1      DCL TOU$DU_USER_WRITE          ENTRY ALTRET ;
       53     7747    1      DCL TOU$DU_SYSTEM_ERRMSG       ENTRY ALTRET ;
       54     7748
       55     7749    1      DCL TOU$DU_CLOSE_IFAD          ENTRY ALTRET ;
       56     7750    1      DCL TOU$DU_CLOSE_DF            ENTRY ALTRET ;
       57     7751    1      DCL TOU$DFU_CLOSE_TEMP         ENTRY ALTRET ;
       58     7752           %EJECT ;
PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:16   
       59     7753        /* ********************
       60     7754           ********************
       61     7755           **  Main Program  **
       62     7756           ********************
       63     7757           ******************** */
       64     7758
       65     7759    1      CALL BREAK_RESET ALTRET (ABORT_COMMAND) ;

   7759  3 000002   000043 701000 3                  TSX1    BREAK_RESET
         3 000003   000017 702000 3                  TSX2    ABORT_COMMAND

       66     7760    1      CALL BREAK_CHECK_TERMINATE ALTRET (ABORT_COMMAND) ;

   7760  3 000004   000064 701000 3                  TSX1    BREAK_CHECK_TERMINATE
         3 000005   000017 702000 3                  TSX2    ABORT_COMMAND

       67     7761    1      IF DUP.BREAK_DISABLED

   7761  3 000006   000155 236000 xsym               LDQ     DUP+109
         3 000007   000400 316003                    CANQ    256,DU
         3 000010   000014 600000 3                  TZE     s:7763

       68     7762    1      THEN CALL BREAK_DISABLED ;

   7762  3 000011   000073 701000 3                  TSX1    BREAK_DISABLED
         3 000012   000000 011000                    NOP     0
         3 000013   000016 710000 3                  TRA     s:7764

       69     7763    1      ELSE CALL BREAK_USER_CONTINUE ALTRET (ABORT_COMMAND) ;

   7763  3 000014   000112 701000 3                  TSX1    BREAK_USER_CONTINUE
         3 000015   000017 702000 3                  TSX2    ABORT_COMMAND

       70     7764    1      RETURN ;

   7764  3 000016   000000 702200 xent               TSX2  ! X66_AARET

PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:17   
       71     7765
       72     7766    1   ABORT_COMMAND:
       73     7767    1      CALL BREAK_ABORT_CMD ;

   7767  3 000017   000174 701000 3     ABORT_COMMA* TSX1    BREAK_ABORT_CMD
         3 000020   000000 011000                    NOP     0
         3 000021   000024 710000 3                  TRA     s:7785

       74     7768
       75     7769        /* ********************
       76     7770           ********************
       77     7771           **  End Of  Main  **
       78     7772           ********************
       79     7773           ******************** */
       80     7774        %EJECT ;
PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:18   
       81     7775        /*D*  NAME:        TOU$BREAK_FOR_FAULT
       82     7776              ENTRY:
       83     7777              AUTHOR:      Scott S. Sheppard
       84     7778              INTERFACE:   TOU$DU_USER_WRITE
       85     7779              DESCRIPTION: This entry point is called when a fault occurs
       86     7780                           during DEER processing.
       87     7781        */
       88     7782
       89     7783    1   TOU$BREAK_FOR_FAULT: ENTRY ASYNC ;

   7783  3 000022   000000 700200 xent  TOU$BREAK_F* TSX0  ! X66_AAUTO
         3 000023   000010 000000                    ZERO    8,0

       90     7784
       91     7785    1      DUP.PROCESS_COMPLETE = %TRUE ;

   7785  3 000024   000400 236003                    LDQ     256,DU
         3 000025   000000 256000 xsym               ORSQ    DUP

       92     7786    1      DUP.MSG_CODE = %E$BR_FAULT ;

   7786  3 000026   000455 235007                    LDA     301,DL
         3 000027   000020 755000 xsym               STA     DUP+16

       93     7787    1      CALL TOU$DU_USER_WRITE ;

   7787  3 000030   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 000031   000000 701000 xent               TSX1    TOU$DU_USER_WRITE
         3 000032   000000 011000                    NOP     0

       94     7788    1      DUP.FAULT_ERROR = %TRUE ;

   7788  3 000033   400000 236007                    LDQ     -131072,DL
         3 000034   000000 256000 xsym               ORSQ    DUP

       95     7789    1      CALL TOU$DU_SYSTEM_ERRMSG ;

PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:19   
   7789  3 000035   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 000036   000000 701000 xent               TSX1    TOU$DU_SYSTEM_ERRMSG
         3 000037   000000 011000                    NOP     0

       96     7790    1      CALL BREAK_ABORT_CMD ;

   7790  3 000040   000174 701000 3                  TSX1    BREAK_ABORT_CMD
         3 000041   000000 011000                    NOP     0
         3 000042   000223 710000 3                  TRA     s:7988

       97     7791
       98     7792        %EJECT ;
PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:20   
       99     7793        /*I*  NAME:        BREAK_RESET
      100     7794              AUTHOR:      Scott S. Sheppard
      101     7795              PURPOSE:     Resets Break Count
      102     7796              INTERFACE:   M$TRMPRG Monitor Service
      103     7797                           TOU$DU_SYSTEM_ERRMSG
      104     7798                           TOU$DU_USER_WRITE
      105     7799              INPUT:       No system data accessed.
      106     7800              OUTPUT:      Break count reset
      107     7801              DESCRIPTION: This procedure resets the break count so that four
      108     7802                           breaks in a row do not correspond to a  Control-Y.
      109     7803        */
      110     7804
      111     7805    1   BREAK_RESET: PROC ALTRET ;

   7805  3 000043   200004 741300       BREAK_RESET  STX1  ! 4,,AUTO

      112     7806
      113     7807           %FPT_TRMPRG (FPTN   = RESET_COUNT,
      114     7808                        RSTBRK = YES) ;
      115     7837
      116     7838        /* Code */
      117     7839
      118     7840    2      CALL M$TRMPRG (RESET_COUNT) ALTRET (ERROR) ;

   7840  3 000044   000000 630400 1                  EPPR0   RESET_COUNT
         3 000045   560004 713400                    CLIMB   alt,+57348
         3 000046   400400 401760                    pmme    nvectors=2
         3 000047   000052 702000 3                  TSX2    ERROR

      119     7841    2      RETURN ;

   7841  3 000050   200004 221300                    LDX1  ! 4,,AUTO
         3 000051   000001 702211                    TSX2  ! 1,X1

      120     7842
      121     7843    2   ERROR:
      122     7844    2      DUP.MSG_CODE = %E$BR_TRMPRG ;
PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:21   

   7844  3 000052   000454 235007       ERROR        LDA     300,DL
         3 000053   000020 755000 xsym               STA     DUP+16

      123     7845    2      CALL TOU$DU_USER_WRITE ;

   7845  3 000054   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 000055   000000 701000 xent               TSX1    TOU$DU_USER_WRITE
         3 000056   000000 011000                    NOP     0

      124     7846    2      CALL TOU$DU_SYSTEM_ERRMSG ;

   7846  3 000057   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 000060   000000 701000 xent               TSX1    TOU$DU_SYSTEM_ERRMSG
         3 000061   000000 011000                    NOP     0

      125     7847    2      ALTRETURN ;

   7847  3 000062   200004 221300                    LDX1  ! 4,,AUTO
         3 000063   000000 702211                    TSX2  ! 0,X1

      126     7848
      127     7849    2   END BREAK_RESET ;
      128     7850        %EJECT ;
PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:22   
      129     7851        /*I*  NAME:        BREAK_CHECK_TERMINATE
      130     7852              AUTHOR:      Scott S. Sheppard
      131     7853              PURPOSE:     Terminate functions
      132     7854              INTERFACE:   None Called.
      133     7855              INPUT:       DUP.BREAK_TERMINATE
      134     7856              OUTPUT:      DUP.BREAK_TERMINATE
      135     7857              DESCRIPTION: This procedure checks to see if Break was entered
      136     7858                           during the execution of a DEER command that break
      137     7859                           should terminate. (Example: HELP, SHOWDECK, ...)
      138     7860                           When this procedure altreturns,   the user is not
      139     7861                           asked whether or not he wishes to continue. It is
      140     7862                           assumed that he does not.
      141     7863        */
      142     7864
      143     7865    1   BREAK_CHECK_TERMINATE: PROC ALTRET ;

   7865  3 000064   200004 741300       BREAK_CHECK* STX1  ! 4,,AUTO

      144     7866
      145     7867        /* Code */
      146     7868
      147     7869    2      IF DUP.BREAK_TERMINATE

   7869  3 000065   000155 234000 xsym               SZN     DUP+109
         3 000066   000072 605000 3                  TPL     s:7874

      148     7870    3      THEN DO ;

      149     7871    3              DUP.BREAK_TERMINATE = %FALSE ;

   7871  3 000067   000031 236000 xsym               LDQ     B_VECTNIL+25
         3 000070   000155 356000 xsym               ANSQ    DUP+109

      150     7872    3              ALTRETURN ;

   7872  3 000071   000000 702211                    TSX2  ! 0,X1

PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:23   
      151     7873    3           END /* THEN */ ;
      152     7874    2      ELSE RETURN ;

   7874  3 000072   000001 702211                    TSX2  ! 1,X1

      153     7875
      154     7876    2   END BREAK_CHECK_TERMINATE ;
      155     7877        %EJECT ;
PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:24   
      156     7878        /*I*  NAME:        BREAK_DISABLED
      157     7879              AUTHOR:      Scott S. Sheppard
      158     7880              PURPOSE:     Notify User of Break Disable
      159     7881              INTERFACE:   TOU$DU_USER_WRITE
      160     7882              INPUT:       DUP.DF.OPEN_TYPE - current access to the deckfile
      161     7883              OUTPUT:      DUP.MSG_CODE
      162     7884              DESCRIPTION: This procedure notifies the user that a break can
      163     7885                           not be allowed at this time.
      164     7886        */
      165     7887
      166     7888    1   BREAK_DISABLED: PROC ;

   7888  3 000073   200004 741300       BREAK_DISAB* STX1  ! 4,,AUTO

      167     7889
      168     7890    2      DCL HOLD_CODE   UBIN WORD ALIGNED ;
      169     7891
      170     7892        /* Code */
      171     7893
      172     7894    2      IF DUP.DF.OPEN_TYPE = %UPDATE_FILE

   7894  3 000074   000105 235000 xsym               LDA     DUP+69
         3 000075   000001 115007                    CMPA    1,DL
         3 000076   000110 601000 3                  TNZ     s:7902

      173     7895    3      THEN DO ;

      174     7896    3              HOLD_CODE = DUP.MSG_CODE ;

   7896  3 000077   000020 236000 xsym               LDQ     DUP+16
         3 000100   200005 756100                    STQ     HOLD_CODE,,AUTO

      175     7897    3              DUP.MSG_CODE = %E$BR_DISABLE ;

   7897  3 000101   000456 235007                    LDA     302,DL
         3 000102   000020 755000 xsym               STA     DUP+16

PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:25   
      176     7898    3              CALL TOU$DU_USER_WRITE ;

   7898  3 000103   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 000104   000000 701000 xent               TSX1    TOU$DU_USER_WRITE
         3 000105   000000 011000                    NOP     0

      177     7899    3              DUP.MSG_CODE = HOLD_CODE ;

   7899  3 000106   200005 235100                    LDA     HOLD_CODE,,AUTO
         3 000107   000020 755000 xsym               STA     DUP+16

      178     7900    3           END /* THEN */ ;

      179     7901    2      ELSE /* Do Nothing */ ;
      180     7902    2      RETURN ;

   7902  3 000110   200004 221300                    LDX1  ! 4,,AUTO
         3 000111   000001 702211                    TSX2  ! 1,X1

      181     7903
      182     7904    2   END BREAK_DISABLED ;
      183     7905        %EJECT ;
PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:26   
      184     7906        /*I*  NAME:        BREAK_USER_CONTINUE
      185     7907              AUTHOR:      Scott S. Sheppard
      186     7908              PURPOSE:     Prompts User to continue
      187     7909              INTERFACE:   TOU$DU_SET_PROMPT
      188     7910                           TOU$DU_USER_READ
      189     7911                           TOU$DU_USER_WRITE
      190     7912                           TOU$DU_SET_EDIT_PROMPT
      191     7913              INPUT:       No system data accessed.
      192     7914              OUTPUT:      DUP.RESPONSE - contains user's reply
      193     7915                           DUP.RESPONSE_LGTH - set to expected number of chars
      194     7916              DESCRIPTION: This procedure prompts the user to determine if
      195     7917                           processing  should  continue.   This  procedure
      196     7918                           returns  if  a  'C'  is entered,  otherwise the
      197     7919                           alternate return is taken.
      198     7920        */
      199     7921        %EJECT ;
PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:27   
      200     7922    1   BREAK_USER_CONTINUE: PROC ALTRET ;

   7922  3 000112   200004 741300       BREAK_USER_* STX1  ! 4,,AUTO

      201     7923
      202     7924    2      DCL CONTINUE       CHAR (1) CALIGNED ;
      203     7925    2      DCL SAVE_MSG_CODE  UBIN WORD ALIGNED ;
      204     7926
      205     7927        /* Code */
      206     7928
      207     7929    2      DUP.BREAK_DISABLED = %TRUE ;

   7929  3 000113   000400 236003                    LDQ     256,DU
         3 000114   000155 256000 xsym               ORSQ    DUP+109

      208     7930    2      DUP.HOLD_AREA = 'Break! C to continue:' ;

   7930  3 000115   040000 100400                    MLR     fill='040'O
         3 000116   000000 000025 2                  ADSC9   0                        cn=0,n=21
         3 000117   000142 000050 xsym               ADSC9   DUP+98                   cn=0,n=40

      209     7931    2      DUP.HOLD_AREA_LGTH = 21 ;

   7931  3 000120   000025 235007                    LDA     21,DL
         3 000121   000154 755000 xsym               STA     DUP+108

      210     7932    2      CALL TOU$DU_SET_PROMPT ALTRET (ERROR) ;

   7932  3 000122   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 000123   000000 701000 xent               TSX1    TOU$DU_SET_PROMPT
         3 000124   000170 702000 3                  TSX2    ERROR

      211     7933    2      DUP.RESPONSE_LGTH = 1 ;

   7933  3 000125   000001 235007                    LDA     1,DL
         3 000126   000016 755000 xsym               STA     DUP+14

PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:28   
      212     7934    2      CALL TOU$DU_USER_READ ALTRET (ERROR) ;

   7934  3 000127   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 000130   000000 701000 xent               TSX1    TOU$DU_USER_READ
         3 000131   000170 702000 3                  TSX2    ERROR

      213     7935    2      CONTINUE = SUBSTR (DUP.RESPONSE, 0, 1) ;

   7935  3 000132   000004 236000 xsym               LDQ     DUP+4
         3 000133   777000 376003                    ANQ     -512,DU
         3 000134   000000 276000 4                  ORQ     0
         3 000135   200005 756100                    STQ     CONTINUE,,AUTO

      214     7936    2      CALL TOU$DU_SET_EDIT_PROMPT ALTRET (ERROR) ;

   7936  3 000136   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 000137   000000 701000 xent               TSX1    TOU$DU_SET_EDIT_PROMPT
         3 000140   000170 702000 3                  TSX2    ERROR

      215     7937
      216     7938    2      SAVE_MSG_CODE = DUP.MSG_CODE ;

   7938  3 000141   000020 235000 xsym               LDA     DUP+16
         3 000142   200006 755100                    STA     SAVE_MSG_CODE,,AUTO

      217     7939    2      DUP.MSG_CODE = %T$BLANK_LINE ;

   7939  3 000143   000020 450000 xsym               STZ     DUP+16

      218     7940    2      CALL TOU$DU_USER_WRITE ;

   7940  3 000144   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 000145   000000 701000 xent               TSX1    TOU$DU_USER_WRITE
         3 000146   000000 011000                    NOP     0

      219     7941    2      DUP.MSG_CODE = SAVE_MSG_CODE ;

PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:29   
   7941  3 000147   200006 235100                    LDA     SAVE_MSG_CODE,,AUTO
         3 000150   000020 755000 xsym               STA     DUP+16

      220     7942    2      DUP.BREAK_DISABLED = %FALSE ;

   7942  3 000151   000001 236000 4                  LDQ     1
         3 000152   000155 356000 xsym               ANSQ    DUP+109

      221     7943
      222     7944    2      IF CONTINUE = 'C'

   7944  3 000153   200005 236100                    LDQ     CONTINUE,,AUTO
         3 000154   777000 376003                    ANQ     -512,DU
         3 000155   103000 116003                    CMPQ    34304,DU
         3 000156   000161 601000 3                  TNZ     s:7947

      223     7945    2      THEN RETURN ;

   7945  3 000157   200004 221300                    LDX1  ! 4,,AUTO
         3 000160   000001 702211                    TSX2  ! 1,X1

      224     7946    3      ELSE DO ;

      225     7947    3              DUP.MSG_CODE = %T$BREAK_ABORT ;

   7947  3 000161   000003 236007                    LDQ     3,DL
         3 000162   000020 756000 xsym               STQ     DUP+16

      226     7948    3              CALL TOU$DU_USER_WRITE ;

   7948  3 000163   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 000164   000000 701000 xent               TSX1    TOU$DU_USER_WRITE
         3 000165   000000 011000                    NOP     0

      227     7949    3              ALTRETURN ;

   7949  3 000166   200004 221300                    LDX1  ! 4,,AUTO
PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:30   
         3 000167   000000 702211                    TSX2  ! 0,X1

      228     7950    3           END /* ELSE */ ;
      229     7951
      230     7952    2   ERROR:
      231     7953    2      DUP.BREAK_DISABLED = %FALSE ;

   7953  3 000170   000001 236000 4     ERROR        LDQ     1
         3 000171   000155 356000 xsym               ANSQ    DUP+109

      232     7954    2      ALTRETURN ;

   7954  3 000172   200004 221300                    LDX1  ! 4,,AUTO
         3 000173   000000 702211                    TSX2  ! 0,X1

      233     7955
      234     7956    2   END BREAK_USER_CONTINUE ;
      235     7957        %EJECT ;
PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:31   
      236     7958        /*I*  NAME:        BREAK_ABORT_COMMAND
      237     7959              AUTHOR:      Scott S. Sheppard
      238     7960              PURPOSE:     Terminates DEER Command
      239     7961              INTERFACE:   TOU$DU_CLOSE_IFAD
      240     7962                           TOU$DU_CLOSE_DF
      241     7963                           TOU$DFU_CLOSE_TEMP
      242     7964              INPUT:       DUP.BREAK_RETURN - address of a label in TOU$DE
      243     7965                           DUP.DF.OPEN_TYPE
      244     7966              OUTPUT:      DUP.BREAK_DISABLED
      245     7967                           DUP.DF.CLOSE_TYPE
      246     7968              DESCRIPTION: This procedure terminates the current DEER command
      247     7969                           by closing DCB's and unwinding back to the driver.
      248     7970        */
      249     7971
      250     7972    1   BREAK_ABORT_CMD: PROC ;

   7972  3 000174   200004 741300       BREAK_ABORT* STX1  ! 4,,AUTO

      251     7973
      252     7974        /* Code */
      253     7975
      254     7976    2      CALL TOU$DU_CLOSE_IFAD ;

   7976  3 000175   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 000176   000000 701000 xent               TSX1    TOU$DU_CLOSE_IFAD
         3 000177   000000 011000                    NOP     0

      255     7977    2      IF DUP.DF.OPEN_TYPE = %CREATE_FILE

   7977  3 000200   000105 235000 xsym               LDA     DUP+69
         3 000201   000205 601000 3                  TNZ     s:7979

      256     7978    2      THEN DUP.DF.CLOSE_TYPE = %DISCARD_FILE ;

   7978  3 000202   000001 236007                    LDQ     1,DL
         3 000203   000106 756000 xsym               STQ     DUP+70
         3 000204   000206 710000 3                  TRA     s:7980
PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:32   

      257     7979    2      ELSE DUP.DF.CLOSE_TYPE = %SAVE_FILE ;

   7979  3 000205   000106 450000 xsym               STZ     DUP+70

      258     7980    2      CALL TOU$DU_CLOSE_DF ;

   7980  3 000206   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 000207   000000 701000 xent               TSX1    TOU$DU_CLOSE_DF
         3 000210   000000 011000                    NOP     0

      259     7981    2      DUP.TEMP.CLOSE_TYPE = %DISCARD_FILE ;

   7981  3 000211   000001 235007                    LDA     1,DL
         3 000212   000141 755000 xsym               STA     DUP+97

      260     7982    2      CALL TOU$DFU_CLOSE_TEMP ;

   7982  3 000213   000002 631400 xsym               EPPR1   B_VECTNIL+2
         3 000214   000000 701000 xent               TSX1    TOU$DFU_CLOSE_TEMP
         3 000215   000000 011000                    NOP     0

      261     7983    2      DUP.BREAK_DISABLED = %FALSE ;

   7983  3 000216   000001 236000 4                  LDQ     1
         3 000217   000155 356000 xsym               ANSQ    DUP+109

      262     7984
      263     7985    2      UNWIND TO DUP.BREAK_RETURN ;

   7985  3 000220   000156 237200 xsym               LDAQ  ! DUP+110
         3 000221   000000 700200 xent               TSX0  ! X66_AAUNWIND
         3 000222   000000 000200                    ZERO    0,128

      264     7986
      265     7987    2   END BREAK_ABORT_CMD ;
      266     7988    1   END TOU$BREAK ;
PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:33   

   7988  3 000223   000000 702200 xent               TSX2  ! X66_AARET

RESET_COUNT
 Sect OctLoc
   1     000   000003 777640   000004 006000   000000 177640   000000 006014    ................
   1     004   000000 000000   000000 000000   004000 000000   000000 000000    ................

(unnamed)
 Sect OctLoc
   2     000   102162 145141   153041 040103   040164 157040   143157 156164    Break! C to cont
   2     004   151156 165145   072040 040040                                    inue:

(unnamed)
 Sect OctLoc
   4     000   000040 040040   777377 777777                                    .   ....

PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:34   
--  Include file information  --

   TO_PERR_C.:E05TOU  is referenced.
   TOU_DEER_M.:E05TOU  is referenced.
   CP_6_C.:E05TOU  is referenced.
   CP_6.:E05TOU  cannot be made into a system file and is referenced.
      No diagnostics issued in procedure TOU$BREAK.
PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:35   

 **** Procedure blocks ****

LB#    Line#s    #stmts #vars Sect# OctLoc  P A C   NP Lvl/name
  0    35-  7988     70    17     3      0  y   y    0   1 TOU$BREAK
                                  3     22      y    0     TOU$BREAK_FOR_FAULT
  1  7805-  7849      7     2     3     43  y y y    0     2 BREAK_RESET
  2  7865-  7876      6     0     3     64  y y y    0     2 BREAK_CHECK_TERMINATE
  3  7888-  7904      9     1     3     73  y   y    0     2 BREAK_DISABLED
  4  7922-  7956     22     2     3    112  y y y    0     2 BREAK_USER_CONTINUE
  5  7972-  7987     10     0     3    174  y   y    0     2 BREAK_ABORT_CMD
PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:36   

    **** Executable statements  ****

  Exec cost Stmt Sec OctLoc Type   LB Label              Exec cost Stmt Sec OctLoc Type   LB Label

              35   3      0 Proc    0                              7759   3      2 Call    0
            7760   3      4 Call    0                              7761   3      6 If      0
            7762   3     11 Call    0                              7763   3     14 Call    0
            7764   3     16 Return  0                              7767   3     17 Call    0 ABORT_COMMAND
            7783   3     22 Entry   0                              7785   3     24 Assign  0
            7786   3     26 Assign  0                              7787   3     30 Call    0
            7788   3     33 Assign  0                              7789   3     35 Call    0
            7790   3     40 Call    0                              7805   3     43 Proc    1
$$$$$$$$$$  7840   3     44 MonCal  1                              7841   3     50 Return  1
            7844   3     52 Assign  1 ERROR                        7845   3     54 Call    1
            7846   3     57 Call    1                              7847   3     62 Altret  1
            7865   3     64 Proc    2                              7869   3     65 If      2
            7870   3     67 Do      2                              7871   3     67 Assign  2
            7872   3     71 Altret  2                              7874   3     72 Return  2
            7888   3     73 Proc    3                              7894   3     74 If      3
            7895   3     77 Do      3                              7896   3     77 Assign  3
            7897   3    101 Assign  3                              7898   3    103 Call    3
            7899   3    106 Assign  3                              7900   3    110 EndDo   3
            7902   3    110 Return  3                              7922   3    112 Proc    4
            7929   3    113 Assign  4                              7930   3    115 Assign  4
            7931   3    120 Assign  4                              7932   3    122 Call    4
            7933   3    125 Assign  4                              7934   3    127 Call    4
            7935   3    132 Assign  4                              7936   3    136 Call    4
            7938   3    141 Assign  4                              7939   3    143 Assign  4
            7940   3    144 Call    4                              7941   3    147 Assign  4
            7942   3    151 Assign  4                              7944   3    153 If      4
            7945   3    157 Return  4                              7946   3    161 Do      4
            7947   3    161 Assign  4                              7948   3    163 Call    4
            7949   3    166 Altret  4                              7953   3    170 Assign  4 ERROR
            7954   3    172 Altret  4                              7972   3    174 Proc    5
            7976   3    175 Call    5                              7977   3    200 If      5
            7978   3    202 Assign  5                              7979   3    205 Assign  5
            7980   3    206 Call    5                              7981   3    211 Assign  5
PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:37   
            7982   3    213 Call    5                              7983   3    216 Assign  5
            7985   3    220 Unwind  5                              7988   3    223 EndPrc  0


  **** Statement type totals  ****

    23 Assign    19 Call       1 MonCal     5 If         5 Return     4 Altret
     1 Unwind     3 Do         1 EndDo      6 Proc       1 EndPrc     1 Entry
     3 Labels

 # major stmts=   58 Code/major= 2.55 # stmts=   70 Code/stmt= 2.11  Point total=100.4
 Cost/major stmt=  2.2 Cost/stmt=  1.8 Total cost=    131.4

   0-4  $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
   4-6
   6-8
  8-10
 10-12
 12-14
 14-16
 16-18
 18-20
 20-22
 22-??  $
PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:38   

 **** Variables and constants ****

  ****  Section 001  Data  TOU$BREAK

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(288)   r     1 RESET_COUNT
     4-0-0/d STRC(144)   r         2 V


  ****  Auto variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     5-0-0/c CHAR        r     1 CONTINUE                   5-0-0/w UBIN        r     1 HOLD_CODE
     6-0-0/w UBIN        r     1 SAVE_MSG_CODE

  ****  SYMREF variables  ****

  ****  Structures  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0/d STRC(5220)  r     1 DUP
     0-1-0/c BIT         r         2 PROCESS_COMPLETE
     0-2-0/c BIT         r         2 FAULT_ERROR
     4-0-0/c CHAR(40)    r         2 RESPONSE
    16-0-0/w UBIN        r         2 RESPONSE_LGTH
    20-0-0/w UBIN        r         2 MSG_CODE
   104-0-0/w STRC(504)   r         2 DF
   105-0-0/w UBIN        r          3 OPEN_TYPE
   106-0-0/w UBIN        r          3 CLOSE_TYPE
   140-0-0/w STRC(72)    r         2 TEMP
   141-0-0/w UBIN        r          3 CLOSE_TYPE
   142-0-0/c CHAR(40)    r         2 HOLD_AREA
   154-0-0/w UBIN        r         2 HOLD_AREA_LGTH
PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:39   
   155-0-0/c BIT         r         2 BREAK_TERMINATE
   155-1-0/c BIT         r         2 BREAK_DISABLED
   156-0-0/d REMB        r         2 BREAK_RETURN


  ****  BASED and DCB variables  ****

  ****  Scalars and arrays  ****
OctLoc.c.b A Datatyp(siz) R M Lvl/name                 OctLoc.c.b A Datatyp(siz) R M Lvl/name

     0-0-0N  NULL        r     1 M$UC


   Procedure TOU$BREAK requires 148 words for executable code.
   Procedure TOU$BREAK requires 8 words of local(AUTO) storage.

    No errors detected in file TOU$BREAK.:E05TSI    .
PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:40   
          *** CROSS REFERENCE LISTING ***
**     DENOTES     IDENTIFIER DEFINITION
<<                 IDENTIFIER'S VALUE SET
>>                 IDENTIFIER'S VALUE USED
<>                 IDENTIFIER SET AND/OR USED
--                 IDENTIFIER REFERENCED
PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:41   
          MINI XREF LISTING

ABORT_COMMAND
      7767**LABEL    7759--CALLALT  7760--CALLALT  7763--CALLALT
BREAK_ABORT_CMD
      7972**PROC     7767--CALL     7790--CALL
BREAK_CHECK_TERMINATE
      7865**PROC     7760--CALL
BREAK_DISABLED
      7888**PROC     7762--CALL
BREAK_RESET
      7805**PROC     7759--CALL
BREAK_USER_CONTINUE
      7922**PROC     7763--CALL
CONTINUE IN PROCEDURE BREAK_USER_CONTINUE
      7924**DCL      7935<<ASSIGN   7944>>IF
DUP.BREAK_DISABLED
      7726**DCL      7761>>IF       7929<<ASSIGN   7942<<ASSIGN   7953<<ASSIGN   7983<<ASSIGN
DUP.BREAK_RETURN
      7728**DCL      7985>>UNWIND
DUP.BREAK_TERMINATE
      7724**DCL      7869>>IF       7871<<ASSIGN
DUP.DF.CLOSE_TYPE
      7692**DCL      7978<<ASSIGN   7979<<ASSIGN
DUP.DF.OPEN_TYPE
      7690**DCL      7894>>IF       7977>>IF
DUP.FAULT_ERROR
      7612**DCL      7788<<ASSIGN
DUP.HOLD_AREA
      7719**DCL      7930<<ASSIGN
DUP.HOLD_AREA_LGTH
      7721**DCL      7931<<ASSIGN
DUP.LOG_V
      7706**DCL      7711--REDEF
PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:42   
DUP.MSG_CODE
      7627**DCL      7786<<ASSIGN   7844<<ASSIGN   7896>>ASSIGN   7897<<ASSIGN   7899<<ASSIGN   7938>>ASSIGN
      7939<<ASSIGN   7941<<ASSIGN   7947<<ASSIGN
DUP.PROCESS_COMPLETE
      7610**DCL      7785<<ASSIGN
DUP.RESPONSE
      7620**DCL      7935>>ASSIGN
DUP.RESPONSE_LGTH
      7622**DCL      7933<<ASSIGN
DUP.TEMP.CLOSE_TYPE
      7716**DCL      7981<<ASSIGN
ERROR IN PROCEDURE BREAK_RESET
      7844**LABEL    7840--CALLALT
ERROR IN PROCEDURE BREAK_USER_CONTINUE
      7953**LABEL    7932--CALLALT  7934--CALLALT  7936--CALLALT
HOLD_CODE IN PROCEDURE BREAK_DISABLED
      7890**DCL      7896<<ASSIGN   7899>>ASSIGN
M$TRMPRG
      5551**DCL-ENT  7840--CALL
RESET_COUNT IN PROCEDURE BREAK_RESET
      7824**DCL      7840<>CALL
RESET_COUNT.V IN PROCEDURE BREAK_RESET
      7831**DCL      7826--DCLINIT
RESET_COUNT.V.CTLFLG.RSTBRK# IN PROCEDURE BREAK_RESET
      7832**DCL      7833--REDEF
SAVE_MSG_CODE IN PROCEDURE BREAK_USER_CONTINUE
      7925**DCL      7938<<ASSIGN   7941>>ASSIGN
TOU$DFU_CLOSE_TEMP
      7751**DCL-ENT  7982--CALL
TOU$DU_CLOSE_DF
      7750**DCL-ENT  7980--CALL
TOU$DU_CLOSE_IFAD
      7749**DCL-ENT  7976--CALL
TOU$DU_SET_EDIT_PROMPT
      7745**DCL-ENT  7936--CALL
TOU$DU_SET_PROMPT
PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:43   
      7743**DCL-ENT  7932--CALL
TOU$DU_SYSTEM_ERRMSG
      7747**DCL-ENT  7789--CALL     7846--CALL
TOU$DU_USER_READ
      7744**DCL-ENT  7934--CALL
TOU$DU_USER_WRITE
      7746**DCL-ENT  7787--CALL     7845--CALL     7898--CALL     7940--CALL     7948--CALL
PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:44   
              *** CROSS REFERENCE LISTING ***
    **     DENOTES     IDENTIFIER DEFINITION
    <<                 IDENTIFIER'S VALUE SET
    >>                 IDENTIFIER'S VALUE USED
    <>                 IDENTIFIER SET AND/OR USED
    --                 IDENTIFIER REFERENCED
PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:45   
              FULL UREF LISTING

DUP
      7606**DCL
DUP.BATCH_MODE
      7608**DCL
DUP.BCD_V
      7677**DCL
DUP.BCD_V.PTR$
      7680**DCL
DUP.BINARY_V
      7672**DCL
DUP.BINARY_V.PTR$
      7675**DCL
DUP.BOTTOM_LINE#
      7644**DCL
DUP.CMD$
      7624**DCL
DUP.CPU_TYPE
      7737**DCL
DUP.CURRENT_LINE#
      7642**DCL
DUP.CURRENT_PAGE#
      7640**DCL
DUP.DF
      7683**DCL
DUP.DF.ENTERED
      7684**DCL
DUP.DF.FID
      7694**DCL
DUP.DF.FID_LGTH
      7696**DCL
DUP.DF.NO_EXIST
      7686**DCL
PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:46   
DUP.DF.REPORT_ERROR
      7688**DCL
DUP.DS_V
      7617**DCL
DUP.ERROR_IMAGE
      7646**DCL
DUP.FORCE_NEW_PAGE
      7648**DCL
DUP.HDR_CODE
      7629**DCL
DUP.IFAD
      7651**DCL
DUP.IFAD.CONFIG_TAB
      7660**DCL
DUP.IFAD.DEVICE_INPUT
      7656**DCL
DUP.IFAD.DRIVE_NUMBER
      7666**DCL
DUP.IFAD.ENTERED
      7654**DCL
DUP.IFAD.FID
      7668**DCL
DUP.IFAD.FID_LGTH
      7670**DCL
DUP.IFAD.IMU_NUMBER
      7664**DCL
DUP.IFAD.IMU_TAB
      7658**DCL
DUP.IFAD.ME_ALLOWED
      7652**DCL
DUP.IFAD.NUM_VOLUMES
      7662**DCL
DUP.LINE_VFC
      7638**DCL
DUP.LOG
      7699**DCL
PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:47   
DUP.LOG.CATALOG
      7702**DCL
DUP.LOG.DECK
      7704**DCL
DUP.LOG.TYPE
      7700**DCL
DUP.LOG_V.PTR$
      7709**DCL
DUP.LOG_V_
      7711**DCL
DUP.MSG_V
      7633**DCL
DUP.MSG_V.PTR$
      7636**DCL
DUP.NUM_LINES
      7631**DCL
DUP.NUM_WORDS
      7615**DCL
DUP.SITE_ID
      7735**DCL
DUP.SITE_NAME
      7730**DCL
DUP.SITE_NAME.LGTH
      7731**DCL
DUP.SITE_NAME.TEXT
      7733**DCL
DUP.TEMP
      7713**DCL
DUP.TEMP.OPEN_TYPE
      7714**DCL
M$ACCT
      5543**DCL-ENT
M$ACTIVATE
      5546**DCL-ENT
M$ALIB
      5539**DCL-ENT
PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:48   
M$ASUSER
      5541**DCL-ENT
M$ATTACH
      5548**DCL-ENT
M$BADPP
      5566**DCL-ENT
M$CGCTL
      5547**DCL-ENT
M$CGINFO
      5547**DCL-ENT
M$CHECK
      5528**DCL-ENT
M$CHGUNIT
      5586**DCL-ENT
M$CLOSE
      5526**DCL-ENT
M$CLRSTK
      5584**DCL-ENT
M$CMDVAR
      5595**DCL-ENT
M$CONFIG
      5556**DCL-ENT
M$CORRES
      5531**DCL-ENT
M$CPEXIT
      5540**DCL-ENT
M$CVM
      5564**DCL-ENT
M$CVOL
      5529**DCL-ENT
M$DCLFLD
      5556**DCL-ENT
M$DEACTIVATE
      5546**DCL-ENT
M$DELREC
      5528**DCL-ENT
PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:49   
M$DEQ
      5593**DCL-ENT
M$DETACH
      5548**DCL-ENT
M$DEVICE
      5530**DCL-ENT
M$DISPLAY
      5593**DCL-ENT
M$DISPRES
      5533**DCL-ENT
M$DLIB
      5539**DCL-ENT
M$DRIBBLE
      5556**DCL-ENT
M$DRTN
      5584**DCL-ENT
M$DSUSER
      5541**DCL-ENT
M$ENQ
      5592**DCL-ENT
M$EOM
      5551**DCL-ENT
M$ERASE
      5557**DCL-ENT
M$ERR
      5538**DCL-ENT
M$ERRMSG
      5589**DCL-ENT
M$EVENT
      5581**DCL-ENT
M$EXHUME
      5590**DCL-ENT
M$EXIT
      5538**DCL-ENT
M$EXTEND
      5530**DCL-ENT
PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:50   
M$FDP
      5562**DCL-ENT
M$FDS
      5561**DCL-ENT
M$FEBOOT
      5554**DCL-ENT
M$FECTL
      5555**DCL-ENT
M$FEDUMP
      5554**DCL-ENT
M$FID
      5589**DCL-ENT
M$FINDPROC
      5543**DCL-ENT
M$FSUSER
      5541**DCL-ENT
M$FVP
      5563**DCL-ENT
M$FWCG
      5547**DCL-ENT
M$GBPL
      5567**DCL-ENT
M$GDDL
      5563**DCL-ENT
M$GDP
      5562**DCL-ENT
M$GDS
      5561**DCL-ENT
M$GETDCB
      5532**DCL-ENT
M$GETMOUSE
      5572**DCL-ENT
M$GETPM
      5573**DCL-ENT
M$GJOB
      5591**DCL-ENT
PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:51   
M$GLINEATTR
      5551**DCL-ENT
M$GOODPP
      5566**DCL-ENT
M$GPLATEN
      5559**DCL-ENT
M$GPROMPT
      5558**DCL-ENT
M$GTRMATTR
      5552**DCL-ENT
M$GTRMCTL
      5550**DCL-ENT
M$GTRMTAB
      5553**DCL-ENT
M$GVP
      5562**DCL-ENT
M$HELP
      5589**DCL-ENT
M$INT
      5581**DCL-ENT
M$INTRTN
      5542**DCL-ENT
M$IOQ
      5577**DCL-ENT
M$JOBSTATS
      5591**DCL-ENT
M$KEYIN
      5531**DCL-ENT
M$LDEV
      5526**DCL-ENT
M$LDTRC
      5539**DCL-ENT
M$LIMIT
      5532**DCL-ENT
M$LINES
      5531**DCL-ENT
PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:52   
M$LINK
      5538**DCL-ENT
M$MADMUCK
      5534**DCL-ENT
M$MAKUSER
      5565**DCL-ENT
M$MBS
      5533**DCL-ENT
M$MDFFLD
      5557**DCL-ENT
M$MERC
      5582**DCL-ENT
M$MERCS
      5583**DCL-ENT
M$MIRROR
      5577**DCL-ENT
M$MONINFO
      5594**DCL-ENT
M$MPL
      5567**DCL-ENT
M$NODEINFO
      5558**DCL-ENT
M$NXTUSR
      5592**DCL-ENT
M$OCMSG
      5590**DCL-ENT
M$OLAY
      5538**DCL-ENT
M$OPEN
      5526**DCL-ENT
M$PAS
      5567**DCL-ENT
M$PATHCON
      5590**DCL-ENT
M$PDS
      5561**DCL-ENT
PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:53   
M$PFIL
      5528**DCL-ENT
M$PLATEN
      5552**DCL-ENT
M$PRECORD
      5530**DCL-ENT
M$PROCNAME
      5543**DCL-ENT
M$PROFILE
      5554**DCL-ENT
M$PROMPT
      5550**DCL-ENT
M$RACST
      5534**DCL-ENT
M$RDSYSLOG
      5575**DCL-ENT
M$READ
      5527**DCL-ENT
M$RELDCB
      5532**DCL-ENT
M$RELRES
      5533**DCL-ENT
M$RELSTARF
      5535**DCL-ENT
M$REM
      5535**DCL-ENT
M$RENV
      5582**DCL-ENT
M$REQUIRE
      5534**DCL-ENT
M$RETRY
      5583**DCL-ENT
M$RETRYS
      5583**DCL-ENT
M$REW
      5529**DCL-ENT
PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:54   
M$RLSFLD
      5557**DCL-ENT
M$RPRIV
      5585**DCL-ENT
M$RSPP
      5564**DCL-ENT
M$RSWITCH
      5586**DCL-ENT
M$RUE
      5592**DCL-ENT
M$SAD
      5565**DCL-ENT
M$SAVE
      5541**DCL-ENT
M$SCON
      5542**DCL-ENT
M$SCREECH
      5540**DCL-ENT
M$SENV
      5582**DCL-ENT
M$SETFMA
      5526**DCL-ENT
M$SETFP
      5555**DCL-ENT
M$SINPUT
      5553**DCL-ENT
M$SLCFLD
      5558**DCL-ENT
M$SMOUSE
      5572**DCL-ENT
M$SMPRT
      5564**DCL-ENT
M$SPRIV
      5585**DCL-ENT
M$SSC
      5565**DCL-ENT
PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:55   
M$SSWITCH
      5585**DCL-ENT
M$STATE
      5594**DCL-ENT
M$STD
      5566**DCL-ENT
M$STIMER
      5580**DCL-ENT
M$STLPP
      5563**DCL-ENT
M$STRAP
      5580**DCL-ENT
M$STRMATTR
      5552**DCL-ENT
M$STRMCTL
      5550**DCL-ENT
M$STRMTAB
      5553**DCL-ENT
M$SYMBIO
      5591**DCL-ENT
M$SYSCON
      5577**DCL-ENT
M$SYSID
      5595**DCL-ENT
M$TDCLOSE
      5576**DCL-ENT
M$TDIO
      5576**DCL-ENT
M$TDOPEN
      5575**DCL-ENT
M$TDREQCPU
      5576**DCL-ENT
M$TEMPWROC
      5570**DCL-ENT
M$TIME
      5593**DCL-ENT
PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:56   
M$TRAP
      5580**DCL-ENT
M$TRMISC
      5555**DCL-ENT
M$TRTN
      5584**DCL-ENT
M$TRUNC
      5527**DCL-ENT
M$TTIMER
      5580**DCL-ENT
M$UC
      5550**DCL
M$UMPL
      5567**DCL-ENT
M$UNFID
      5589**DCL-ENT
M$UNLATCH
      5546**DCL-ENT
M$UNSHARE
      5543**DCL-ENT
M$USRFIELD
      5586**DCL-ENT
M$VIRTUAL
      5561**DCL-ENT
M$WAIT
      5584**DCL-ENT
M$WEOF
      5529**DCL-ENT
M$WRITE
      5527**DCL-ENT
M$WRSYSLOG
      5575**DCL-ENT
M$XCON
      5581**DCL-ENT
M$XCONRTN
      5542**DCL-ENT
PL6.E3A0      #001=TOU$BREAK File=TOU$BREAK.:E05TSI                              WED 07/30/97 06:38 Page:57   
M$XEQTIME
      5594**DCL-ENT
M$XFLUSH
      5535**DCL-ENT
M$XMOUSE
      5572**DCL-ENT
M$XXX
      5538**DCL-ENT
M$YC
      5540**DCL-ENT
RESET_COUNT.STATION_ IN PROCEDURE BREAK_RESET
      7828**DCL
RESET_COUNT.V.CTLFLG IN PROCEDURE BREAK_RESET
      7831**DCL
RESET_COUNT.V.CTLFLG.ABORTREAD# IN PROCEDURE BREAK_RESET
      7832**DCL
RESET_COUNT.V.CTLFLG.CURSORHERE# IN PROCEDURE BREAK_RESET
      7832**DCL
RESET_COUNT.V.CTLFLG.PURGEINPUT# IN PROCEDURE BREAK_RESET
      7833**DCL
RESET_COUNT.V.CTLFLG.PURGEOUTPUT# IN PROCEDURE BREAK_RESET
      7834**DCL
RESET_COUNT.V.CTLFLG.RESETBREAK IN PROCEDURE BREAK_RESET
      7833**DCL
RESET_COUNT.V.DCB# IN PROCEDURE BREAK_RESET
      7831**DCL
RESET_COUNT.V_ IN PROCEDURE BREAK_RESET
      7826**DCL
TOU$BREAK
        35**PROC
TOU$BREAK_FOR_FAULT
      7783**ENTRY
