/*M*    make_rules:c -- Initialize built-in rules        */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1989    */
/*T*                                                         */
/*T***********************************************************/
 
#include   "MAKE_Cc14"
#include   <stdlib.h>
 
#define STATIC
 
#define LINE(nm,nxt,len,t)   \
STATIC struct command_lin nm = {nxt, len, {t}}
 
#define COMMANDS(nm,ln,flags) \
STATIC struct command_list nm = {0, (struct command_line *)&ln, flags}
 
#define DEPENDANCY(nm,rule)  \
STATIC struct dependancy nm = {0, 0, 0,0,0,0}
 
#define COMPILE(nm,dp,cmd)   \
STATIC struct target_rule nm = {0, &dp, &cmd, 0}
 
 
/*F*    NAME:          complete_rules()
        PURPOSE:       Add default rules to the target list.
        DESCRIPTION:
           For each of the default rules, we check to see if it has
           been redefined.  If it has not been defined, then we add
           it to the list of rules that we will be looking at.
 
           The default rules are the following commands:
 
 
           .jcl    :
            -JOB $(JOBOPTS)
            -RES $(RESOPTS)
            -Dir $(PATH)
            -Set M$DO $+
            -Del $@
 
           .end    :
            -Del $+
            -Set M$LL NO
            -ERASE
            -Q
            -ABORT: OUTPUT '****  ERROR ****'
 
 
           .c.o    :
             $(FORMAT) $< over *$(<F),$& $(FMTOPTS)
             $(CC) *$(<F) over $@  $(COPTS)
             If $Fid_Exist('$@') then Let STEPCC = 8
 
           .6.o    :
             $(PL6) $< over $@,$&  $(PL6OPTS)
 
           .f.o    :
             $(FORTRAN) $< over $@,$&  $(FORTOPTS)
 
           .y.c    :
             $(YACC)  $(YOPTS) $<
 
           .l.c    :
             $(LEX)   $(LEXOPTS) $<
 
           .n.o    :
             $(PARTRGE) $< over $@,$&  $(PARTOPTS)
 
*/
 
 
 
 
LINE(JCL_line4,         0,16," -Let STEPCC = 0");
LINE(JCL_line3,&JCL_line4,13," -Set M$DO $+");
LINE(JCL_line2,&JCL_line3,13," -Dir .$(*D)");
LINE(JCL_line1,&JCL_line2,16," -RES $(RESOPTS)");
LINE(JCL_line0,&JCL_line1,16," -JOB $(JOBOPTS)");
 
LINE(END_line5,         0,33," -ABORT: OUTPUT '**** ERROR ****'");
LINE(END_line4,&END_line5, 6," -quit");
LINE(END_line3,&END_line4, 7," -ERASE");
LINE(END_line2,&END_line3,13," -Set M$LL NO");
LINE(END_line1,&END_line2,33," -if $Fid_Exist('$+') then DEL $+");
LINE(END_line0,&END_line1,13," -Set M$DO NO");
 
LINE(YACC_lin5,         0,25,"  $(YACC) $(YACCOPTS) %In");
LINE(YACC_lin4,&YACC_lin5, 8," -yokay:");
LINE(YACC_lin3,&YACC_lin4,24," -let In = '$(<F).$(@D)'");
LINE(YACC_lin2,&YACC_lin3,45,"  $(FORMAT) $< over $(<F).$(@D),$& $(FMTOPTS)");
LINE(YACC_lin1,&YACC_lin2,45," -if $index(In,',')>=$len(In) then goto yokay");
LINE(YACC_line,&YACC_lin1,15," -let In = '$<'");
 
LINE(LEX_line5,        0,23,"  $(LEX) $(LEXOPTS) %In");
LINE(LEX_line4,&LEX_line5, 8," -lokay:");
LINE(LEX_line3,&LEX_line4,19," -let In = '*$(<F)'");
LINE(LEX_line2,&LEX_line3,40,"  $(FORMAT) $< over *$(<F),$& $(FMTOPTS)");
LINE(LEX_line1,&LEX_line2,45," -if $index(In,',')>=$len(In) then goto lokay");
LINE(LEX_line0,&LEX_line1,15," -let In = '$<'");
 
LINE(CAP_linh,        0,40," if $fid_exist('$@')=0 then let STEPCC=8");
LINE(CAP_ling,&CAP_linh,23," -let delete mast,M0,M1");
LINE(CAP_linf,&CAP_ling,64," $(CAP) (%M0 F;*$(<F);;$(CAPFMT);$(CAPDEV) %M1;DVI;$@;RES;N;O;Q)");
LINE(CAP_line,&CAP_linf,35," $(FORMAT) $< over *$(<F),NO (NFMT)");
LINE(CAP_lind,&CAP_line,14," -Let STEPCC=0");
LINE(CAP_linc,&CAP_lind,27," -if dvpp<3 then let M1=';'");
LINE(CAP_linb,&CAP_linc,26," -if mast=1 then let M0=''");
LINE(CAP_lina,&CAP_linb,19," -Let M0='M', M1=''");
LINE(CAP_lin9,&CAP_lina,15," -del *:CAP:xeq");
LINE(CAP_lin8,&CAP_lin9,15," -xeq *:CAP:xeq");
LINE(CAP_lin7,&CAP_lin8, 4," -!q");
LINE(CAP_lin6,&CAP_lin7,21," -!se2;1p/!let dvpp=/");
LINE(CAP_lin5,&CAP_lin6,21," -!se1;1p/!let mast=/");
LINE(CAP_lin4,&CAP_lin5,13," -e *:CAP:xeq");
LINE(CAP_lin3,&CAP_lin4,46," -c :CAP.%$ACCT('E29') into *:CAP:xeq(ln(2,1))");
LINE(CAP_lin2,&CAP_lin3,46," -c :CAP.%$ACCT('E30') into *:CAP:xeq(ln(1,1))");
LINE(CAP_lin1,&CAP_lin2,26," -c NO over *:CAP:xeq (LN)");
LINE(CAP_lin0,&CAP_lin1,22," -let mast = 0, dvpp=3");
 
LINE(CPH_lino,        0,42," if $fid_exist('$@')=0 then let STEPCC = 4");
LINE(CPH_linn,&CPH_lino,16," -let STEPCC = 0");
LINE(CPH_linm,&CPH_linn,15," -del *:CAP:xeq");
LINE(CPH_linl,&CPH_linm,15," -xeq *:CAP:xeq");
LINE(CPH_link,&CPH_linl, 4," -!q");
LINE(CPH_lini,&CPH_link,31," -!if/HERMAN.X/?/HELP:/?/:./;DE");
LINE(CPH_linh,&CPH_lini,14," -!c *:CAP:xeq");
LINE(CPH_ling,&CPH_linh, 3," -e");
LINE(CPH_linf,&CPH_ling,58," $(CAP) (%M0 F;*$(<F);;HELP;HELP;$@;XXXXXX;S;*:CAP:xeq;;Q)");
LINE(CPH_line,&CPH_linf,35," $(FORMAT) $< over *$(<F),$& (NFMT)");
LINE(CPH_lind,&CPH_line,16," -let STEPCC = 0");
LINE(CPH_linc,&CPH_lind,27," -if dvpp<3 then let M1=';'");
LINE(CPH_linb,&CPH_linc,26," -if mast=1 then let M0=''");
LINE(CPH_lina,&CPH_linb,19," -let M0='M', M1=''");
LINE(CPH_lin9,&CPH_lina,15," -del *:CAP:xeq");
LINE(CPH_lin8,&CPH_lin9,15," -xeq *:CAP:xeq");
LINE(CPH_lin7,&CPH_lin8, 4," -!q");
LINE(CPH_lin6,&CPH_lin7,21," -!se2;1p/!let dvpp=/");
LINE(CPH_lin5,&CPH_lin6,21," -!se1;1p/!let mast=/");
LINE(CPH_lin4,&CPH_lin5,13," -e *:CAP:xeq");
LINE(CPH_lin3,&CPH_lin4,51," -c  :CAP.%$ACCT ('E29') into *:CAP:xeq ( ln(2,1) )");
LINE(CPH_lin2,&CPH_lin3,51," -c  :CAP.%$ACCT ('E30') into *:CAP:xeq ( ln(1,1) )");
LINE(CPH_lin1,&CPH_lin2,28," -c   NO over *:CAP:xeq (LN)");
LINE(CPH_lin0,&CPH_lin1,24," -let mast = 0, dvpp = 3");
 
LINE(MIDG_line1,          0,50," $(MIDGET) -g *$(@F) -o $@ $(MIDGOPTS) $(MIDGSRCH)");
LINE(MIDG_line, &MIDG_line1,24," $(MAKE) -f $< -g *$(@F)");
 
 
LINE(CC_line0,        0,30,"  $(CC) $< over $@,$& $(COPTS)");
LINE(PL6_line0,0,34,"  $(PL6) $< OVER $@,$&  $(PL6OPTS)");
LINE(FORT_line,0,38,"  $(FORTRAN) $< over $@,$& $(FORTOPTS)");
LINE(PART_line,0,38,"  $(PARTRGE) $< over $@,$& $(PARTOPTS)");
LINE(BMAP_line,0,35,"  $(BMAP) $< over $@,$& $(BMAPOPTS)");
LINE(PASC_line,0,37,"  $(PASCAL) $< over $@,$& $(PASCOPTS)");
LINE(HERM_line,0,37,"  $(HERMAN) $< over $@,$& $(HERMOPTS)");
LINE(LINK_line,0,32,"  $(LINK) $< over $@ $(LINKOPTS)");
LINE(TEX_line,0,33,"  $(TEX) $< over $@,$& $(TEXOPTS)");
LINE(TAN_line,0,22,"  $(TANGLE) $< over $@");
LINE(WEA_line,0,21,"  $(WEAVE) $< over $@");
LINE(FMT_line0,0,37,"  $(FORMAT)  $< OVER $@,$& $(FMTOPTS)");
LINE(COPY_line0,0,29,"  COPY $< OVER $@ $(COPYOPTS)");
 
LINE(SXEQ_line4,          0, 6," -Echo");
LINE(SXEQ_line3,&SXEQ_line4,14," -let STEPCC=0");
LINE(SXEQ_line2,&SXEQ_line3,13," -Set M$DO $+");
LINE(SXEQ_line1,&SXEQ_line2, 7," -Reset");
LINE(SXEQ_line0,&SXEQ_line1,12," -dir .$(*D)");
 
#ifdef RU
LINE(EXEQ_line8,          0,22," -$(saved_image_MAKE).");
#else
LINE(EXEQ_line9,          0, 4," -go");
LINE(EXEQ_line8,&EXEQ_line9,25," -get $(saved_image_MAKE)");
#endif
LINE(EXEQ_line7,&EXEQ_line8,20," -resume: dir .$(*D)");
LINE(EXEQ_line6,&EXEQ_line7, 7," -Reset");
LINE(EXEQ_line5,&EXEQ_line6,28," -output 'target $@ failed!'");
LINE(EXEQ_line4,&EXEQ_line5,21," -ABORT: $(DONT_ECHO)");
LINE(EXEQ_line3,&EXEQ_line4,13," -goto resume");
LINE(EXEQ_line2,&EXEQ_line3,33," -if $fid_exist('$+') then del $+");
LINE(EXEQ_line1,&EXEQ_line2, 7," -reset");
LINE(EXEQ_line0,&EXEQ_line1,14," -$(DONT_ECHO)");
 
 
 
COMMANDS(JCL_commands, JCL_line0,   02400);
COMMANDS(END_commands, END_line0,   02000);
COMMANDS(CC_commands,  CC_line0,   011600);
COMMANDS(PL6_commands, PL6_line0,   01600);
COMMANDS(FORT_commands,FORT_line,   01600);
COMMANDS(YACC_commands,YACC_line,    0200);
COMMANDS(LEX_commands, LEX_line0,    0600);
COMMANDS(CAP_commands, CAP_lin0,    01600);
COMMANDS(CPH_commands, CPH_lin0,    01600);
COMMANDS(PART_commands,PART_line,   01600);
COMMANDS(BMAP_commands,BMAP_line,   01600);
COMMANDS(PASC_commands,PASC_line,   01600);
COMMANDS(HERM_commands,HERM_line,   01600);
COMMANDS(LINK_commands,LINK_line,   01600);
COMMANDS(TEX_commands, TEX_line,    01600);
COMMANDS(TAN_commands, TAN_line,    01600);
COMMANDS(WEA_commands, WEA_line,    01600);
COMMANDS(MIDG_commands,MIDG_line,   01600);
COMMANDS(FMT_commands, FMT_line0,   01600);
COMMANDS(COPY_commands,COPY_line0,  01600);
COMMANDS(SXEQ_commands,SXEQ_line0,  01600);
COMMANDS(EXEQ_commands,EXEQ_line0,  01600);
 
 
DEPENDANCY(JCL_depend,  JCL_compile);
DEPENDANCY(END_depend,  END_compile);
DEPENDANCY(CC_depend,   CC_compile);
DEPENDANCY(PL6_depend,  PL6_compile);
DEPENDANCY(FORT_depend, FORT_compile);
DEPENDANCY(YACC_depend, YACC_compile);
DEPENDANCY(LEX_depend,  LEX_compile);
DEPENDANCY(CAP_depend,  CAP_compile);
DEPENDANCY(CPH_depend,  CPH_compile);
DEPENDANCY(PART_depend, PART_compile);
DEPENDANCY(BMAP_depend, BMAP_compile);
DEPENDANCY(PASC_depend, PASC_compile);
DEPENDANCY(HERM_depend, HERM_compile);
DEPENDANCY(LINK_depend, LINK_compile);
DEPENDANCY(TEX_depend,  TEX_compile);
DEPENDANCY(TAN_depend,  TAN_compile);
DEPENDANCY(WEA_depend,  WEA_compile);
DEPENDANCY(MIDG_depend, MIDG_compile);
DEPENDANCY(FMT_depend,  FMT_compile);
DEPENDANCY(COPY_depend, COPY_compile);
DEPENDANCY(SXEQ_depend, SXEQ_compile);
DEPENDANCY(EXEQ_depend, EXEQ_compile);
 
COMPILE(JCL_compile,   JCL_depend,   JCL_commands);
COMPILE(END_compile,   END_depend,   END_commands);
COMPILE(CC_compile,    CC_depend,    CC_commands);
COMPILE(PL6_compile,   PL6_depend,   PL6_commands);
COMPILE(FORT_compile,  FORT_depend,  FORT_commands);
COMPILE(YACC_compile,  YACC_depend,  YACC_commands);
COMPILE(LEX_compile,   LEX_depend,   LEX_commands);
COMPILE(CAP_compile,   CAP_depend,   CAP_commands);
COMPILE(CPH_compile,   CPH_depend,   CPH_commands);
COMPILE(PART_compile,  PART_depend,  PART_commands);
COMPILE(BMAP_compile,  BMAP_depend,  BMAP_commands);
COMPILE(PASC_compile,  PASC_depend,  PASC_commands);
COMPILE(HERM_compile,  HERM_depend,  HERM_commands);
COMPILE(LINK_compile,  LINK_depend,  LINK_commands);
COMPILE(TEX_compile,   TEX_depend,   TEX_commands);
COMPILE(TAN_compile,   TAN_depend,   TAN_commands);
COMPILE(WEA_compile,   WEA_depend,   WEA_commands);
COMPILE(MIDG_compile,  MIDG_depend,  MIDG_commands);
COMPILE(FMT_compile,   FMT_depend,   FMT_commands);
COMPILE(COPY_compile,  COPY_depend,  COPY_commands);
COMPILE(SXEQ_compile,  SXEQ_depend,  SXEQ_commands);
COMPILE(EXEQ_compile,  EXEQ_depend,  EXEQ_commands);
 
STATIC CONST struct {
  int                       len;
  char               *CONST nm;
  struct target_rule *CONST rule;
  }  spec_rules[] =          {
 { 4, {".jcl"}, &JCL_compile},      { 4, {".end"}, &END_compile},
 { 4, {".c.o"}, &CC_compile},       { 4, {".6.o"}, &PL6_compile},
 { 4, {".f.o"}, &FORT_compile},     { 4, {".y.c"}, &YACC_compile},
 { 4, {".l.c"}, &LEX_compile},      { 4, {".n.o"}, &PART_compile},
 { 4, {".a.o"}, &BMAP_compile},     { 4, {".o.r"}, &LINK_compile},
 { 8, {".tex.dvi"},&TEX_compile},   { 4, {".p.o"}, &PASC_compile},
 { 8, {".cap.dvi"},&CAP_compile},   { 6, {".web.p"}, &TAN_compile},
 { 8, {".web.tex"},&WEA_compile},
 { 4, {".fmt"}, &FMT_compile},      { 5, {".copy"},&COPY_compile},
 { 4, {".xeq"}, &SXEQ_compile},     { 7, {".xeqend"},&EXEQ_compile},
 {11, {".cap.herman"}, &CPH_compile},
 {12,{".herman.help"}, &HERM_compile},
 {17,{".makefile.depends"}, &MIDG_compile},
  };
 
void
complete_rules(no_built_ins)
  int   no_built_ins;
{
  int   i;
  struct sym_target *t;
 
  for ( i=0 ; i < sizeof(spec_rules)/12 ; i++)   {
     struct sym_target *s;
     struct dependancy *d;
     struct target_rule *tr;
 
     s = lookup_sym_target(spec_rules[i].nm, spec_rules[i].len, 2);
     if (!s) crash("Out of memory: complete_rules");
 
     if (!s->tg_commands && (!no_built_ins || s->tg_len == s->tg_suffix_len)) {
        s->tg_commands = tr = spec_rules[i].rule;
        d = tr->tr_depend;
        d->dp_target = s;
        d->dp_tgdepend = s->tg_depend;
        s->tg_depend   = d;
        tr->next = LineList;
        LineList       = tr;
        }
     }  /*  end of:   for( i=0 ;...)     */
 
  t = JclRules;
  while (t)   {
     struct sym_ftype   *fo = t->tg_ftype;
     struct ftype_rules *fr = fo->ft_rules;
 
     if (t->tg_commands)  {
        if (!fr) {
           int sz = (fo->ft_out - 1) * sizeof(int *)+sizeof(struct ftype_rules);
           fr = (struct ftype_rules*)malloc(sz);
           if (!fr) crash("Out of Memory: complete rules\n");
           fo->ft_rules = fr;
           fr->fr_in = fr->fr_out = 0;
           mem_ruleptrs[0] += sz;
           mem_ruleptrs[1]++;
           }
        fr->fr_rule[ fr->fr_out++ ] = t;
        }
     t = t->tg_tgrule;
     }
 
  t = JclRules;
  while (t)   {
     if (t->tg_ftype->ft_rules)
        t->tg_ftype->ft_out = t->tg_ftype->ft_rules->fr_out;
     t = t->tg_tgrule;
     }
  fmt_cmd  = (lookup_sym_target(".fmt", 4, 0))->tg_commands;
  copy_cmd = (lookup_sym_target(".copy", 5, 0))->tg_commands;
  return;
}
 
 
 
 
/*D*    NAME:          get_rule(tg, ft, flavor)
        PURPOSE:       To return the next file type that should be
                    looked at for input.
        DESCRIPTION:
           The input parameters are: a target pointer (or NULL),
           the required output file type, and a flavor that indicates
           the type of transformation that we are looking for.
 
           There are three flavors, flavor 1 is a complex
           transformation.  The output file type returned is
           guaranteed NOT to be the required output file type.
           But it is guaranteed to produce a file type that MAY
           be input to a file type that produces the required
           output file type.
 
           Flavor 2 is a simple transformation.  The target returned
           is guaranteed to produce the appropriate output file type.
 
           Finally, flavor 3 is to be used to produce the required
           output file type AFTER finding a possible complex
           derivation.
 
           Flavor 1 rules:
 
              a) Output file type produced by a single rule
 
           Flavor 2 rules:
 
              a) output file may be produced by multiple steps where
                 each step is guaranteed to be on the path to produce
                 the required output file type.
              b) if the required output file type is not produced in
                 a single step, then flavor should switch to 3 to
                 obtain remaining transformations.
 
           Flavor 3 rules:
 
              a) return next file transformation required to produce
                 the target in a "complex" derivation.
 
           Flavor 4 rules:
 
              a) output file type is ftype
              b) input file type is xtg->tg_inftype
 
           Flavor 5 rules:
              Simply return the last rule returned in mode 2.
 
*/
 
struct  sym_target *
get_rule(tg, ft, flavor, xtg)
  struct   sym_target  *tg;
  struct   sym_ftype   *ft;
  int                   flavor;
  struct   sym_target  *xtg;
{
  struct   ftype_rules *rule_list = ft->ft_rules;
  static   int          base = 0;
  static   int          last_base = 0;
  struct   ft_list  {
     struct ftype_rules *rules;
     int                 base;
     };
  static   struct ft_list stack[20];
  int                     i;
  struct   sym_ftype     *ftr;
 
  if (tg == 0)   {
     /**   Starting flavor      **/
     rule_list = ft->ft_rules;  /* Get rules creating this type  */
     if (!rule_list) return 0;  /* Nothing produces this type    */
     switch (flavor)   {
 
     case 1:
     case 2:
        stack[0].rules = rule_list;
        stack[0].base  = base = last_base = 0;
        break;
 
     case 4:
        ftr = xtg->tg_inftype; /* Get required file type  */
        for ( i=0 ; i<rule_list->fr_out ; i++)  {
           struct sym_target *t = rule_list->fr_rule[i];
           if (t->tg_inftype == ftr && t->tg_commands)
              return t;
           }
        return 0;
        }        /* end of switch(flavor)   */
     }           /* end of if (tg==0)       */
 
  switch (flavor)   {
 
  case 2:  /* A single production that produces this file */
     if (stack[0].rules->fr_out <= stack[0].base)
        return 0;
     return stack[0].rules->fr_rule[ stack[0].base++ ];
 
  case 1:  /* Multiple productions to produce this file    */
     if (last_base) base = last_base;
     while (1)   {
        struct ftype_rules *rules = stack[base].rules;
        if ( !rules || rules->fr_out <= stack[base].base)   {
           if (base == 0) return 0;
           base--;
           return stack[base].rules->fr_rule[stack[base].base-1];
           }
        else  {
           int                 fi  = stack[base].base++;
           int                  i;
           struct sym_target   *t  = rules->fr_rule[fi];
 
           base++;
           stack[base].rules = rules = t->tg_inftype->ft_rules;
           stack[base].base  = 0;
           for ( i=base-1 ; i>=0 ; i--)  {  /* don't loop rules */
              if ( rules == stack[i].rules )   {
                 stack[base].base = 262143;
                 base--;
                 break;
                 }
              }  /* end of for ( i=base-1... */
           }
        }  /* end of while(1)   */
 
  case 5:  /* Return current production                    */
     return tg;
 
  case 3:  /* Return rest of productions to produce target */
     if (!last_base) last_base = base;
     base--;
     return stack[base].rules->fr_rule[stack[base].base-1];
 
     }     /* end of switch(flavor)   */
 
  return 0;
}
