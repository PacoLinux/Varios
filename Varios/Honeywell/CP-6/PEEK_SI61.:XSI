/*M* PEEK_SI6 - list output and input queues */
/*T***********************************************************/
/*T*                                                         */
/*T* Copyright (c) Bull HN Information Systems Inc., 1990    */
/*T*                                                         */
/*T***********************************************************/
/*X* THI=1,DTI=2,IND=3,PLM=3,IAD=2 */
/*   'PEEK' - This routine scans the jobstream for input and */
/*   output from the invoking account.  Like SPY, only no    */
/*   PRIV is required, since you're only looking at your own */
/*   stuff.                                                  */
/*   DENNIS GRIESSER, Feb, 1980.                             */
 
PEEK: PROC MAIN;
 
%INCLUDE CP_6;
%INCLUDE B$JIT;
%INCLUDE B_ERRORS_C;
%INCLUDE CP_6_SUBS;
%INCLUDE PEEK_C1;
%INCLUDE XU_MACRO_C;
%INCLUDE XUD_UTS_M;
 
%XUD$UTS_ENTRIES;
%XUD_UTS_EQU;
 
%B$TCB;
%B$ALT;
%B$EXCFR;
%PARSE$OUT(STCLASS=BASED);
%PARSE$SYM(STCLASS=BASED);
 
%EJECT;
/* ALLOCATION */
 
/*     DCB declaration */
 
DCL 1 M$LO DCB;
 
/*     SYMREFs */
 
DCL PEEK_OPTIONS UBIN WORD SYMREF;
 
/*     External routines */
 
DCL X$PARSE ENTRY(1) ALTRET;
 
/*     FPT creation */
 
/*         M$LO */
 
        %FPT_OPEN    (FPTN=FPT_OPEN_OUT_DEV,
          STCLASS=STATIC,
          DCB=M$LO);
        %FPT_WRITE   (FPTN=FPT_WRITE_OUT_DEV,
          BUF=OUT_DEV_BUF,
          DCB=M$LO);
        %FPT_CLOSE   (FPTN=FPT_CLOSE_OUT_DEV,
          STCLASS=STATIC,
          DCB=M$LO);
 
/*         ASSORTED MONITOR SERVICES */
 
%FPT_JOBSTATS   (FPTN=FPT_JOB_STATS,
  STCLASS=STATIC,
  CRITERIA=VLP_CRITERIA,
  ORDER=SRCH,
  OUTPUT=NO,
  RESULTS=VLR_JOBSTATS_ISRCH);
%FPT_JOBSTATS   (FPTN=FPT_OUT_STATS,
  STCLASS=STATIC,
  CRITERIA=VLP_CRITERIA,
  ORDER=SRCH,
  OUTPUT=YES,
  RESULTS=VLR_JOBSTATS_OSRCH);
%FPT_TIME  (FPTN=FPT_MAKE_TIME,
  STCLASS=STATIC,
  DEST=LOCAL,
  SOURCE=UTS,
  TSTAMP=TIM_BUF,
  TIME=LOCAL_TIME);
%FPT_TIME  (FPTN=FPT_TIME,
  STCLASS=STATIC,
  DEST=UTS,
  SOURCE=CLOCK,
  TSTAMP=NOW_TIME);
%FPT_DISPLAY (FPTN=FPT_DISPLAY,
  STCLASS=STATIC,
  RESULTS=VLR_DISPLAY);
%P_PCB(NAME=PCB_OPTIONS,
  T=OPTION_BUF,
  R=PEEK_OPTIONS,
  W=PARSE_AREA,
  WSZ=512,
  STCLASS=STATIC);
%FPT_PRIV( FPTN=FPT_PRIV_DISPJOB,
  AUTH=YES,
   PRIV=%PR_DISPJOB#);
 
/*     VLP creation */
 
%VLP_CRITERIA   (FPTN=VLP_CRITERIA,
  ACCT='        ' );
 
/*     VLR creation */
 
%VLR_JOBSTATS_ISRCH  (NJOB=40);
%VLR_JOBSTATS_OSRCH  (NFIL=40);
%VLR_DISPLAY;
 
/*     VLA creation */
 
%VLA_JOBSTATS_ISRCH (FPTN=B$VLA_JOBSTATS_ISRCH,
        STCLASS="BASED (JOB$)");
%VLA_JOBSTATS_OSRCH (FPTN=B$VLA_JOBSTATS_OSRCH,
        STCLASS="BASED (OUTPUT$)");
%EJECT;
/*     BUFFERS */
 
DCL 1 OUT_DEV_BUF CHAR (80) STATIC;
DCL 1 TIM_BUF UBIN STATIC;
DCL 1 LOCAL_TIME CHAR (8) STATIC;
DCL 1 NOW_TIME UBIN WORD STATIC;
DCL OPTION_BUF CHAR(256) STATIC;
DCL PARSE_AREA(0:511) SBIN STATIC;
 
/*     DATA STRUCTURES AND FORMATS */
 
DCL 1 HDR_JOB STATIC,
      2 * CHAR(0) INIT ('SYSID   NAME') UNAL,
      2 ACC CHAR(0) INIT ('     ') UNAL, /* May become .ACCT                  */
      2 * CHAR(0) INIT ('     FLAGS WSN      SUBMIT   START    STATUS  WAIT PRIO TIME   ') UNAL;
DCL 1 HDR_JOB1 REDEF HDR_JOB CHAR (80);
DCL 1 HDR_OUT STATIC,
      2 * CHAR(0) INIT ('SYSID     NAME') UNAL,
      2 ACC CHAR(0) INIT ('     ') UNAL, /* May become .ACCT                  */
      2 * CHAR(0) INIT ('     FORM         COPIES DEV  WSN      GRAN STATUS    PRIO   ') UNAL;
DCL 1 HDR_OUT1 REDEF HDR_OUT CHAR (80);
DCL 1 JOB STATIC,
      2 SYSID CHAR (6) UNAL,
      2 RR CHAR (1) UNAL,
      2 * CHAR (1) UNAL,
      2 NAME CHAR (13) UNAL,
      2 * CHAR (1) UNAL,
      2 FLAG,
        3 A CHAR (1) UNAL,
        3 O CHAR (1) UNAL,
        3 D CHAR (1) UNAL,
        3 R CHAR (1) UNAL,
        3 F CHAR (1) UNAL,
      2 * CHAR (1) UNAL,
      2 WSN CHAR (8) UNAL,
      2 * CHAR (1) UNAL,
      2 SUB_TIME CHAR (8) UNAL,
      2 * CHAR (1) UNAL,
      2 START_TIME CHAR (8) UNAL,
      2 * CHAR (1) UNAL,
      2 STATUS CHAR (7) UNAL,
      2 * CHAR (1) UNAL,
      2 WAIT CHAR (4) UNAL,
      2 * CHAR (1) UNAL,
      2 PRIO CHAR (4) UNAL,
      2 * CHAR (1) UNAL,
      2 TIM_USED CHAR (2) UNAL,
      2 SLASH CHAR (1) UNAL,
      2 MAX_TIM CHAR(2) UNAL;
DCL 1 JOB_SPACE REDEF JOB CHAR (78);
%EJECT;
DCL 1 OUTPUT STATIC,
      2 SYSID CHAR (6) UNAL,
      2 NUM_SEP CHAR(1) UNAL,
      2 NUMBER CHAR(2) UNAL,
      2 * CHAR (1) UNAL,
      2 NAME CHAR (13) UNAL,
      2 * CHAR (1) UNAL,
      2 FORM CHAR (12) UNAL,
      2 * CHAR (1) UNAL,
      2 COPIES CHAR (6) UNAL,
      2 * CHAR (1) UNAL,
      2 DEV CHAR (2) UNAL,
      2 DEV_NAME CHAR (2) UNAL,
      2 * CHAR (1) UNAL,
      2 WSN CHAR (8) UNAL,
      2 * CHAR (1) UNAL,
      2 GRAN CHAR (4) UNAL,
      2 * CHAR (1) UNAL,
      2 STATUS CHAR (9) UNAL,
      2 * CHAR (1) UNAL,
      2 PRIO CHAR (4) UNAL,
      2 * CHAR (3) UNAL;
DCL 1 OUTPUT_SPACE REDEF OUTPUT CHAR (80);
%EJECT;
/*     POINTERS AND COUNTERS AND FLAGS */
 
DCL 1 B$JIT$ PTR SYMREF;
DCL 1 JOB$ PTR;
DCL 1 OUTPUT$ PTR;
DCL PRINT_COUNT UBIN STATIC;
DCL 1 B$TCB$ PTR SYMREF;
DCL 1 PRIVED BIT (1) UNAL STATIC INIT ('0'B);
DCL 1 INDEX_VAL UBIN WORD STATIC;
DCL GET_DISPJOB BIT(1) STATIC INIT('0'B);
DCL DO_OUTPUTS BIT(1) STATIC INIT('1'B);
DCL DO_JOBS BIT(1) STATIC INIT('1'B);
DCL N SBIN STATIC;
DCL NCHARS CHAR(N) BASED UNAL;
DCL JOBS_LISTED BIT(1) STATIC INIT('0'B);
DCL MINE_ONLY BIT(1) STATIC INIT('0'B);
DCL TEMP_UTS SBIN;
%EJECT;
/* PROCEDURE */
/*     OPTION CHECKING */
 
   N = B$JIT.CCARS - B$JIT.CCDISP;
   IF N > 0
    THEN DO;
          PCB_OPTIONS.NCHARS = N;
          ADDR(OPTION_BUF)->NCHARS = PINCRC( ADDR(B$JIT.CCBUF), B$JIT.CCDISP )->NCHARS;
          CALL X$PARSE( PCB_OPTIONS ) ALTRET( SYNERR );
          DO WHILE('0'B);
SYNERR:        ;
               OUT_DEV_BUF = ' *** Syntax error';
               CALL M$WRITE (FPT_WRITE_OUT_DEV);
               CALL M$EXIT;
             END;
          DO_OUTPUTS = '0'B;
          DO_JOBS = '0'B;
          DO N=0 TO PCB_OPTIONS.OUT$->OUT$BLK.NSUBLKS-1;
               DO CASE( PCB_OPTIONS.OUT$->OUT$BLK.SUBLK$(N)->OUT$BLK.CODE );
                CASE( %GET_DISPJOB );
                  GET_DISPJOB = '1'B;
                CASE( %DO_OUTPUTS );
                  DO_OUTPUTS = '1'B;
                CASE( %DO_JOBS );
                  DO_JOBS = '1'B;
                CASE( %MINE_ONLY );
                  MINE_ONLY = '1'B;
                END;
             END;
        END;
 
   IF GET_DISPJOB
    THEN CALL M$SPRIV (FPT_PRIV_DISPJOB) ALTRET (NO_DISPJOB);
 
/*     MAIN ROUTINE */
 
BEGIN: ;
   IF B$JIT.PRIV.ACTIVE & %PR_DISPJOB#
    THEN
     DO;
          IF NOT MINE_ONLY
           THEN DO;
                 PRIVED = '1'B;
                 HDR_OUT.ACC = '.ACCT';
                 HDR_JOB.ACC = '.ACCT';
               END;
           ELSE DO;
                 CALL M$RPRIV (FPT_PRIV_DISPJOB) ALTRET (NO_DISPJOB);
               END;
        END;
    ELSE DO;
          IF GET_DISPJOB
           THEN DO;
NO_DISPJOB:      ;
                 OUT_DEV_BUF = ' *** You don''t have DISPJOB privilege';
                 CALL M$WRITE (FPT_WRITE_OUT_DEV);
                 CALL M$EXIT;
               END;
        END;
DO_JOB: ;
   IF NOT DO_JOBS THEN GOTO DO_OUTPUT;
   CALL M$JOBSTATS (FPT_JOB_STATS) ALTRET (JOBS_ALTRET);
PRINT_JOBS: OUT_DEV_BUF=HDR_JOB1;
   CALL M$WRITE (FPT_WRITE_OUT_DEV);
   CALL M$TIME (FPT_TIME);
   CALL M$DISPLAY (FPT_DISPLAY);
   JOB$=ADDR (VLR_JOBSTATS_ISRCH.J);
   DO PRINT_COUNT=1 TO VLR_JOBSTATS_ISRCH.FOUND;
EACH_JOB: JOB_SPACE=' ';
        CALL BINCHAR (JOB.SYSID,B$VLA_JOBSTATS_ISRCH.SYSID);
        IF B$VLA_JOBSTATS_ISRCH.FLG.RR2
         THEN JOB.RR='R';
         ELSE JOB.RR=' ';
        JOB.NAME=B$VLA_JOBSTATS_ISRCH.JNAME;
        IF PRIVED
         THEN
          DO;
               CALL INDEX1( N, ' ', B$VLA_JOBSTATS_ISRCH.ACCT );
               CALL INDEX1( INDEX_VAL, ' ', JOB.NAME );
               IF INDEX_VAL + 1 + N > LENGTHC(JOB.NAME)
                THEN DO;                /* Both jobname and account won't fit */
                      IF INDEX_VAL + 1 + 3 > LENGTHC(JOB.NAME)
                       THEN DO;         /* Even 3 chars of account won't fit  */
                             N = 3; /* 3 chars of account; rest for jobname   */
                             INDEX_VAL = LENGTHC(JOB.NAME) - (1 + N);
                           END;
                       ELSE DO;    /* Jobname will fit if account truncated   */
                             N = LENGTHC(JOB.NAME) - (1 + INDEX_VAL);
                           END;
                    END;
                ELSE ;                  /* Both jobname and account fit       */
               CALL INSERT( JOB.NAME, INDEX_VAL, ,
                 '.', SUBSTR(B$VLA_JOBSTATS_ISRCH.ACCT, 0, N) );
             END;
        IF B$VLA_JOBSTATS_ISRCH.FLG.ACC
         THEN JOB.FLAG.A='A';
        IF B$VLA_JOBSTATS_ISRCH.FLG.O1
         THEN JOB.FLAG.O='O';
        IF B$VLA_JOBSTATS_ISRCH.FLG.RA
         THEN JOB.FLAG.D='D';
        IF B$VLA_JOBSTATS_ISRCH.FLG.RR
         THEN JOB.FLAG.R='R';
        IF B$VLA_JOBSTATS_ISRCH.FLG.O3
         THEN JOB.FLAG.F='F';
        JOB.WSN=B$VLA_JOBSTATS_ISRCH.WSN;
        TIM_BUF=B$VLA_JOBSTATS_ISRCH.SUBMIT_TIME;
        CALL M$TIME (FPT_MAKE_TIME);
        JOB.SUB_TIME=LOCAL_TIME;
        DO CASE (B$VLA_JOBSTATS_ISRCH.PRIO);
         CASE (%JP_RUN#);
           JOB.STATUS='RUNNING';
           TIM_BUF=B$VLA_JOBSTATS_ISRCH.START_TIME;
           CALL M$TIME (FPT_MAKE_TIME);
           JOB.START_TIME=LOCAL_TIME;
           CALL XUD$UTS_DIFF_SEC(TEMP_UTS,B$VLA_JOBSTATS_ISRCH.START_TIME,NOW_TIME);
           TEMP_UTS = TEMP_UTS / 60;
           TEMP_UTS = TEMP_UTS / VLR_DISPLAY.ETMF;
           CALL BINCHAR (JOB.TIM_USED, TEMP_UTS);
         CASE (%JP_FOLL#);
           JOB.STATUS='FOLLOW';
         CASE (%JP_RUNAFTER#);
           JOB.STATUS='RUNAFTR';
         CASE (%JP_WPART#);
           JOB.STATUS='PART''N';
         CASE (%JP_WPS#);
           JOB.STATUS='PAKWAIT';
         CASE (ELSE);
           CALL BINCHAR (JOB.WAIT,B$VLA_JOBSTATS_ISRCH.AHEAD);
           CALL EDITCHAR (JOB.WAIT,0,3,'MVZB3,MVC1',JOB.WAIT);
           JOB.STATUS='WAITING';
           CALL BINCHAR (JOB.PRIO,B$VLA_JOBSTATS_ISRCH.PRIO);
           CALL EDITCHAR (JOB.PRIO,0,3,'MVZB3,MVC1',JOB.PRIO);
         END;                           /* END CASE                           */
        JOB.SLASH='/';
        CALL XUD$UTS_DIFF_SEC(TEMP_UTS,B$VLA_JOBSTATS_ISRCH.TIM,0);
        TEMP_UTS = TEMP_UTS/60;
        CALL BINCHAR (JOB.MAX_TIM, TEMP_UTS);
        OUT_DEV_BUF=JOB_SPACE;
        CALL M$WRITE (FPT_WRITE_OUT_DEV);
        JOB$=PINCRC (JOB$,SIZEC (VLR_JOBSTATS_ISRCH.J (0) ) );
      END;
AFTER_JOBS: ;
   JOBS_LISTED = %YES#;
   GOTO DO_OUTPUT;
NO_JOBS: OUT_DEV_BUF='...No pending JOBs.';
   CALL M$WRITE (FPT_WRITE_OUT_DEV);
   JOBS_LISTED = %YES#;
%EJECT;
DO_OUTPUT: ;
   IF NOT DO_OUTPUTS THEN GOTO FINIS;
   IF JOBS_LISTED
    THEN DO;
          OUT_DEV_BUF = ' ';
          CALL M$WRITE (FPT_WRITE_OUT_DEV);
        END;
   CALL M$JOBSTATS (FPT_OUT_STATS) ALTRET (OUT_ALTRET);
PRINT_OUTS: OUT_DEV_BUF=HDR_OUT1;
   CALL M$WRITE (FPT_WRITE_OUT_DEV);
   OUTPUT$=ADDR (VLR_JOBSTATS_OSRCH.F);
   DO PRINT_COUNT=1 TO VLR_JOBSTATS_OSRCH.FOUND;
EACH_OUT: OUTPUT_SPACE=' ';
        CALL BINCHAR (OUTPUT.SYSID,B$VLA_JOBSTATS_OSRCH.SYSID);
        DO CASE (B$VLA_JOBSTATS_OSRCH.MODE);
         CASE (%MODE_INT#);
           OUTPUT.NUM_SEP = 'I';
         CASE (%MODE_BATCH#);
           OUTPUT.NUM_SEP = 'B';
         CASE (%MODE_GHOST#);
           OUTPUT.NUM_SEP = 'G';
         CASE (%MODE_TP#);
           OUTPUT.NUM_SEP = 'T';
         END;
        IF B$VLA_JOBSTATS_OSRCH.NUM ~= 1 OR
          B$VLA_JOBSTATS_OSRCH.MODE ~= %MODE_BATCH#
         THEN
           CALL BINCHAR (OUTPUT.NUMBER,B$VLA_JOBSTATS_OSRCH.NUM);
        OUTPUT.FORM=B$VLA_JOBSTATS_OSRCH.FORM;
        OUTPUT.NAME=B$VLA_JOBSTATS_OSRCH.JNAME;
        IF PRIVED
         THEN
          DO;
               CALL INDEX1( N, ' ', B$VLA_JOBSTATS_OSRCH.ACCT );
               CALL INDEX1( INDEX_VAL, ' ', OUTPUT.NAME );
               IF INDEX_VAL + 1 + N > LENGTHC(OUTPUT.NAME)
                THEN DO;                /* Both jobname and account won't fit */
                      IF INDEX_VAL + 1 + 3 > LENGTHC(OUTPUT.NAME)
                       THEN DO;         /* Even 3 chars of account won't fit  */
                             N = 3; /* 3 chars of account; rest for jobname   */
                             INDEX_VAL = LENGTHC(OUTPUT.NAME) - (1 + N);
                           END;
                       ELSE DO;    /* Jobname will fit if account truncated   */
                             N = LENGTHC(OUTPUT.NAME) - (1 + INDEX_VAL);
                           END;
                    END;
                ELSE ;                  /* Both jobname and account fit       */
               CALL INSERT( OUTPUT.NAME, INDEX_VAL, ,
                 '.', SUBSTR(B$VLA_JOBSTATS_OSRCH.ACCT, 0, N) );
             END;
        CALL BINCHAR (OUTPUT.COPIES,B$VLA_JOBSTATS_OSRCH.COPIES);
        CALL EDITCHAR (OUTPUT.COPIES,0,5,'MVZB3,MVC1',OUTPUT.COPIES);
        OUTPUT.DEV=B$VLA_JOBSTATS_OSRCH.DEVTYP;
        OUTPUT.DEV_NAME=B$VLA_JOBSTATS_OSRCH.DEVNAME;
        IF B$VLA_JOBSTATS_OSRCH.TNAME ~= ' ' THEN
           OUTPUT.WSN=B$VLA_JOBSTATS_OSRCH.TNAME;
         ELSE
           OUTPUT.WSN=B$VLA_JOBSTATS_OSRCH.WOD;
        CALL BINCHAR (OUTPUT.GRAN,B$VLA_JOBSTATS_OSRCH.GRANS);
        CALL EDITCHAR (OUTPUT.GRAN,0,3,'MVZB3,MVC1',OUTPUT.GRAN);
        DO CASE (B$VLA_JOBSTATS_OSRCH.PRIO);
         CASE (%FP_MFW#);
           OUTPUT.STATUS='M-F WAIT';
         CASE (%FP_HOLD#);
           OUTPUT.STATUS='HOLD';
         CASE (%FP_SPILLED#);
           OUTPUT.STATUS='SPILLED';
         CASE (ELSE);
           IF B$VLA_JOBSTATS_OSRCH.DEVNAME ~= '  '
            THEN
              OUTPUT.STATUS='PRINTING';
            ELSE
             DO;
                  OUTPUT.STATUS='WAITING';
                  CALL BINCHAR (OUTPUT.PRIO,B$VLA_JOBSTATS_OSRCH.PRIO);
                  CALL EDITCHAR (OUTPUT.PRIO,0,3,'MVZB3,MVC1',OUTPUT.PRIO);
                END;
         END;                           /* END CASE                           */
        OUT_DEV_BUF=OUTPUT_SPACE;
        CALL M$WRITE (FPT_WRITE_OUT_DEV);
        OUTPUT$=PINCRC (OUTPUT$,SIZEC (VLR_JOBSTATS_OSRCH.F (0) ) );
      END;
AFTER_OUT: ;
   GOTO FINIS;
NO_OUTPUT: ;
   OUT_DEV_BUF='...No output pending.';
   CALL M$WRITE (FPT_WRITE_OUT_DEV);
FINIS: RETURN;
%EJECT;
/*     SPECIAL ROUTINES */
JOBS_ALTRET: IF B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR.CODE=%E$NOTFND
    THEN GOTO NO_JOBS;
   VLR_JOBSTATS_ISRCH.FOUND=40;
   GOTO PRINT_JOBS;
 
OUT_ALTRET: IF B$TCB$ -> B$TCB.ALT$ -> B$ALT.ERR.CODE=%E$NOTFND
    THEN GOTO NO_OUTPUT;
   VLR_JOBSTATS_OSRCH.FOUND=40;
   GOTO PRINT_OUTS;
END PEEK;
