

CC.C03    File=zbk$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=1  
        1         1             /*M*  NAME: zbk$driver:c - the main processor of c.g. code.  */
        2         2             /*P*  Name: zbk$driver:c
        3         3                   Purpose: This is the driver routine for the generation of CP-6
        4         4                   object units. Amoung the functions that are performed
        5         5                   in this routine are the generation of the specific
        6         6                   parts of the object unit that have to do with the initial
        7         7                   and final phases of the object unit generation.
        8         8             */
        9         9             #include <stdio:h>
       10        10             #include <errno:h>
       11        11             #include "zbk$ougen:h"
       12        12             #include "zbk$tables:h"
       13        13
       14        14             #define pl6str(_s_)  ( *(int *) zbk_buffer =0,\
       15        14                   strcpy( &zbk_buffer[2], _s_ ),\
       16        14                   *(int *)zbk_buffer |= strlen( &zbk_buffer[2] ) << 18)
       17        17
       18        18             #define  pl6str2(_s_)  ( *(int *) zbk_buffer =0,\
       19        18                   strcpy( &zbk_buffer[1], _s_ ),\
       20        18                   *(int *)zbk_buffer |= strlen( &zbk_buffer[1] ) << 27)
       21        21
       22        22              extern char zbk_buffer[];
       23        23
       24        24
       25        25             extern int zbk_reloc_addr ;
       26        26
       27        27             extern struct zbk_reloc_struct reloc[8] ;
       28        28
       29        29             extern int zbk_reloc_directive ;
       30        30             extern int zbk_reloc_type ;
       31        31             extern int zbk_reloc_section ;
       32        32
       33        33             extern int xbo_seg_ref_id;
       34        34             extern int zbk_procsec ;
       35        35             extern int zbk_datasec ;
       36        36             extern int zbk_conssec ;
       37        37             extern int zbk_first_func_flag;
CC.C03    File=zbk$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=2  
       38        38             extern int zbk_debug_flag ; /* temp setting- need real ref to global set
       39        39                                    in the root by options scanner. */
       40        40
       41        41             extern void zbk$close_debug_blks();
       42        42
       43        43             extern int zbk_first_blk_flag ;
       44        44             extern int zbk_int_constant_flag;
       45        45             extern int zbk_first_prog_line;
       46        46             extern int zbk_symdef_flag ;
       47        47             extern int zbk_static_terminate_flag;
       48        48             extern int zbk_static_data_flag;
       49        49             extern char zbk_static_con_name[130];
       50        50             extern char zbk_static_data_name[130];
       51        51             extern int zbk_static_con_ref_num;
       52        52             extern int zbk_static_data_ref_num;
       53        53             extern int zbk_static_con_size ;
       54        54             extern int zbk_static_data_size ;
       55        55             extern int zbk_static_first_use_flag ;
       56        56             extern int *zbk_string_ptr ;
       57        57             extern labels_p zbk_first_lbl_tbl_ptr;
       58        58             extern labels_p zbk_lbl_tbl_ptr ;
       59        59             extern sym_tbl_p zbk_first_sym_tbl_ptr ;
       60        60             extern sym_tbl_p zbk_sym_tbl_ptr;
       61        61             extern line_tbl_p zbk_line_tbl_ptr;
       62        62             extern int zbk_curr_con_section; /* the current active control section. */
       63        63
       64        64             extern char zbk_progname[65];  /* hold prog/file name being compiler.*/
       65        65             extern int zbk_oudcbnum ;
       66        66             extern int *zbk_oudcbptr ;
       67        67             extern char zbk_ououtput[130];
       68        68             extern char zbk_cginput[] ;
       69        69             extern int zbk_error_severity;
       70        70             extern int zbk_forward_ref_flag ;
       71        71             extern int zbk_forward_ref_count;
       72        72             extern int zbk_integer_only_flag;
       73        73             #define BRK_FMT   "%s File=%s  Line=%d   Function=%s,\n"
       74        74
CC.C03    File=zbk$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=3  
       75        75             extern void zbk$set_data_ref_num();
       76        76             extern void zbk$set_con_ref_num();
       77        77             extern void zbk$walk_lbls();
       78        78             extern void zbk$walk_vars();
       79        79             extern void zbk$check_for_static_terminate();
       80        80             extern void zbk$check_if_first_call();
       81        81             extern void zbk$chk_entref_names();
       82        82             extern short *zbk$myalloc();
       83        83
       84        84
       85        85             extern char zbk_blnk_buff[] ;
       86        86
       87        87
       88        88
       89        89             extern int zbk_lo_flag ; /* dummy for the moment - should be an
       90        90                                   external reference to flag set in root. */
       91        91             extern int zbk_two_arg ;
       92        92             extern int zbk_zero_arg ;
       93        93             extern int zbk_one_arg ;
       94        94             extern int zbk_three_arg ;
       95        95             extern int zbk_minus_one_arg ;
       96        96             extern int zbk_compiler_id ;
       97        97             extern char B_VERSION [];
       98        98             extern int zbk_codesect ;
       99        99             extern int zbk_datasect ;
      100       100             extern int zbk_zeroinit ;
      101       101             extern int zbk_evenbound ;
      102       102             extern int zbk_noinit ;
      103       103             extern int zbk_eightbound ;
      104       104             extern int zbk_conssect  ;
      105       105             extern int zbk_static_func_count;
      106       106             extern int zbk_noname ;
      107       107
      108       108             extern int zbk_trustme ;
      109       109             extern int zbk_static_function_flag;
      110       110
      111       111
CC.C03    File=zbk$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=4  
      112       112             int zbk_actual_stmt_count;
      113       113
      114       114             int zbk_four_val = 4;
      115       115             int zbk_eight_val = 8;
      116       116             int zbk_fourteen_val = 14;
      117       117             int zbk_seventeen_val = 17;
      118       118
      119       119             /*I*  NAME: zbk$ouinit
      120       120                   The following routine contains the initial call to the
      121       121                   xuo object unit generator routines. This routine also
      122       122                   sets up three constrol sections for the procedure, data
      123       123                   and constant areas to be associated with the users
      124       124                   program.
      125       125             */
      126       126             zbk$ouinit () {
      127       127    1        int name_offset;
      128       128    1        int schema ;
      129       129    1        struct v_num {
      130       130    2              unsigned lett :9;
      131       131    2              unsigned release :9;
      132       132    2              unsigned fill1 :18;
      133       133    2              }  version;
      134       134    1
      135       135    1        void zbk$errhandler();
      136       136    1        void *entptr;
      137       137    1
      138       138    1
      139       139    1              if (zbk_static_data_flag != 0 ) return;
      140       140    1              zbk_static_con_ref_num = 0;
      141       141    1              zbk_static_data_ref_num = 0;
      142       142    1              zbk_static_function_flag = 0;
      143       143    1
      144       144    1              XUO$BUFINIT (N,N,N,N,N,N,
      145       145    1                    N,N,N,N,N,
      146       146    1                    &zbk_eight_val,N,N,N,N, &zbk_three_arg);
      147       147    1        /*    zbk_buffer initialization has taken place in the above statement. */
      148       148    1
CC.C03    File=zbk$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=5  
      149       149    1              if (zbk_debug_flag != 0)
      150       150    1                schema = -1 ;
      151       151    1              else
      152       152    1                schema = 0 ;
      153       153    1
      154       154    1              pl6str2 (":SHARED_C");
      155       155    1              entptr = (void (*)()) zbk$errhandler ;
      156       156    1              version.lett = B_VERSION[1];
      157       157    1              version.release = 0 ;
      158       158    1              version.fill1 = 2 ;
      159       159    1              XUO$OUINIT (&zbk_oudcbnum, &zbk_zero_arg, &schema, &zbk_compiler_id,
      160       160    1                   &version, zbk_buffer , N, &entptr ,
      161       161    1                   N, &zbk_trustme);
      162       162    1
      163       163    1        /*    build the sections for the code, data and constant areas. */
      164       164    1
      165       165    1              pl6str (zbk_progname);
      166       166    1
      167       167    1              XUO$DNAME (zbk_buffer, &name_offset);
      168       168    1              XUO$SECTBUILD (&zbk_codesect, &name_offset, &zbk_procsec, &zbk_zeroinit,

      169       169    1                       &zbk_eightbound);
      170       170    1
      171       171    1              XUO$SECTBUILD (&zbk_datasect, &zbk_noname, &zbk_datasec, &zbk_zeroinit,
      172       172    1                      &zbk_evenbound);
      173       173    1
      174       174    1              XUO$SECTBUILD (&zbk_conssect, &zbk_noname, &zbk_conssec, &zbk_noinit,
      175       175    1                      &zbk_evenbound);
      176       176    1              if (zbk_static_con_size !=0) {
      177       177    2                 pl6str (zbk_static_con_name);
      178       178    2                 XUO$RNAME(zbk_buffer, &name_offset);
      179       179    2                 XUO$SREF(&name_offset, &zbk_zero_val, &zbk_static_con_ref_num,
      180       180    2                     &zbk_zeroinit);
      181       181    2                  }
      182       182    1              if (zbk_static_data_size !=0) {
      183       183    2                 pl6str (zbk_static_data_name);
      184       184    2                 XUO$RNAME(zbk_buffer, &name_offset);
CC.C03    File=zbk$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=6  
      185       185    2                 XUO$SREF(&name_offset, &zbk_zero_val, &zbk_static_data_ref_num,
      186       186    2                     &zbk_zero_val);
      187       187    2                  }
      188       188    1              if (zbk_static_data_size !=0 || zbk_static_con_size != 0) {
      189       189    2                pl6str (zbk_static_total_name);
      190       190    2                XUO$RNAME(zbk_buffer, &name_offset);
      191       191    2                XUO$EREF(&name_offset, &zbk_zero_val, &zbk_minus_one_arg,&zbk_zero_val
                               ,
      192       192    2                    &zbk_std_call, &zbk_zero_val, &schema );
      193       193    2                zbk$set_con_ref_num();
      194       194    2                zbk$set_data_ref_num();
      195       195    2                }
      196       196    1
      197       197    1              pl6str ("ISSID");
      198       198    1              XUO$RNAME( zbk_buffer, &name_offset);
      199       199    1              XUO$SEGREF ( &name_offset, &xbo_seg_ref_id);
      200       200    1
      201       201    1
      202       202    1              zbk_s_s_table[zbk_procsec].size = 0;
      203       203    1              zbk_s_s_table[zbk_datasec].size = 0;
      204       204    1              zbk_s_s_table[zbk_conssec].size = 0;
      205       205    1
      206       206    1              zbk_s_s_table[zbk_procsec].curr_offset = 0;
      207       207    1              zbk_s_s_table[zbk_datasec].curr_offset = 0;
      208       208    1              zbk_s_s_table[zbk_conssec].curr_offset = 0;
      209       209    1
      210       210    1              zbk_first_blk_flag = 1;
      211       211    1              zbk_first_prog_line = 1;
      212       212    1              zbk_forward_ref_count = 0;
      213       213    1              zbk_forward_ref_flag  = 0;
      214       214    1              zbk_ref_name_flag = 0;
      215       215    1              zbk_curr_con_section = 0;
      216       216    1              zbk_first_func_flag = 0;
      217       217    1              zbk_blk_count = 0;
      218       218    1              zbk_stmt_count = 0;
      219       219    1              zbk_actual_stmt_count = 0;
      220       220    1
CC.C03    File=zbk$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=7  
      221       221    1              return;
      222       222    1              }
      223       223
      224       224
      225       225
      226       226             /*    The following are the error handling routines used for errors
      227       227                   in o.u. generation or in generating LO listings.
      228       228             */
      229       229             void zbk$errhandler (code)
      230       230                   int *code ;  {
      231       231    1              XBI_SET_ERRNO(code);
      232       232    1              perror((char *) 0);
      233       233    1              exit(-1);
      234       234    1              }
      235       235
      236       236             void zbk$loerrhandler (code)
      237       237                   int *code; {
      238       238    1              XBI_SET_ERRNO(code);
      239       239    1              perror((char *) 0);
      240       240    1              exit(-1);
      241       241    1              }
      242       242
      243       243
      244       244             /*i*
      245       245                   name: zbk$get_value
      246       246                   purpose: This routine gets the characters off the input
      247       247                   stream and builds an integer value from it. The value is
      248       248                   assumed to be unsigned.
      249       249             */
      250       250             zbk$get_value() {
      251       251    1        int val ,c , eof_flag, eol_flag ;
      252       252    1        FILE *infile ;
      253       253    1        int neg_flag ;
      254       254    1              neg_flag = 0;
      255       255    1
      256       256    1              while ((c=getc(infile)) == ' ' || c == '+' ) {
      257       257    2                  }
CC.C03    File=zbk$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=8  
      258       258    1
      259       259    1              if (c == '-') {
      260       260    2                c = getc(infile);
      261       261    2
      262       262    2                neg_flag = -1; }
      263       263    1              if (c == EOF || c == '\n') {
      264       264    2                if (c == EOF) {
      265       265    3                  eof_flag = -1;
      266       266    3                 }
      267       267    2                eol_flag = -1 ;
      268       268    2                return(0) ;
      269       269    2                }
      270       270    1              if (c == ',') return(0);
      271       271    1
      272       272    1              val = c - '0'  ;
      273       273    1              while ((c=getc(infile)) != ' ' && c != ',' && c != '\n' ) {
      274       274    2
      275       275    2                val *= 10 ;
      276       276    2                val += (c - '0' ); }
      277       277    1
      278       278    1
      279       279    1              if ( c == '\n' ) {
      280       280    2                eol_flag = -1;
      281       281    2               }
      282       282    1
      283       283    1              if (neg_flag != 0) {
      284       284    2                val = -val; }
      285       285    1              return (val);
      286       286    1              }
      287       287
      288       288             /*i*
      289       289                   name: zbk$outerm
      290       290                   purpose: This is the routine to finsih the building of the
      291       291                   object unit. It sets the sizes for the control section
      292       292                   as well as making sure the forward references are satisfied.
      293       293
      294       294             */
CC.C03    File=zbk$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=9  
      295       295             zbk$outerm ()   {
      296       296    1        void zbk$forward_ref_process();
      297       297    1        void zbk$loerrhandler();
      298       298    1        void LOSTMT_HANDLER();
      299       299    1        int sect_size;
      300       300    1        int *dcbptr ;
      301       301    1        void *ent_ptr;
      302       302    1        void *ent_ptr1;
      303       303    1        void *ent_ptr2;
      304       304    1        extern int zbk_list_options_lo;
      305       305    1        extern int zbk_list_options_dmap;
      306       306    1        extern int zbk_list_options_pmap;
      307       307    1        extern int zbk_list_options_mdmap;
      308       308    1        int name_offset;
      309       309    1        char tmp1[200];
      310       310    1
      311       311    1              if (zbk_static_data_flag != 0 ) {
      312       312    2                zbk$check_for_static_terminate ();
      313       313    2                return; }
      314       314    1
      315       315    1
      316       316    1
      317       317    1              if (zbk_s_s_table[zbk_procsec].curr_offset != 0) {
      318       318    2                sect_size = zbk_s_s_table[zbk_procsec].curr_offset + 1;
      319       319    2                XUO$SECTSIZE (&zbk_procsec, &sect_size );
      320       320    2                }
      321       321    1              if (zbk_s_s_table[zbk_conssec].curr_offset != 0) {
      322       322    2                sect_size = zbk_s_s_table[zbk_conssec].curr_offset + 1;
      323       323    2                XUO$SECTSIZE (&zbk_conssec, &sect_size );
      324       324    2                }
      325       325    1              if (zbk_s_s_table[zbk_datasec].curr_offset != 0) {
      326       326    2                sect_size = zbk_s_s_table[zbk_datasec].curr_offset + 1;
      327       327    2                XUO$SECTSIZE (&zbk_datasec, &sect_size );
      328       328    2                }
      329       329    1
      330       330    1        /*    if (zbk_static_func_count != 0) {
      331       331    1                zbk$chk_entref_names(); }   */ /* skip this code for time being. */
CC.C03    File=zbk$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=10 
      332       332    1
      333       333    1              if (zbk_forward_ref_count != 0) {  /* have forward refs in the prog. */
      334       334    2                dcbptr = zbk_oudcbptr;
      335       335    2                ent_ptr = (void (*)()) zbk$forward_ref_process ;
      336       336    2                XUO$FRWD_REF (&zbk_procsec, &ent_ptr ,
      337       337    2                       &dcbptr );
      338       338    2                if (zbk_s_s_table[zbk_conssec].curr_offset != 0) {
      339       339    3                  XUO$FRWD_REF (&zbk_conssec, &ent_ptr ,
      340       340    3                       &dcbptr );  }
      341       341    2                if (zbk_s_s_table[zbk_datasec].curr_offset != 0) {
      342       342    3                  XUO$FRWD_REF (&zbk_datasec, &ent_ptr ,
      343       343    3                       &dcbptr );  }
      344       344    2                /*  do the forward ref processing.   */
      345       345    2              }  /* enof of the forward ref processing. */
      346       346    1
      347       347    1              if (zbk_debug_flag != 0) {
      348       348    2                XUO$LOGBLKTERM ();
      349       349    2               }
      350       350    1              if (strcmp(zbk_progname, "main") == 0) {
      351       351    2                pl6str ("main#main");
      352       352    2                XUO$DNAME( zbk_buffer, &name_offset);
      353       353    2                XUO$EDEF(&zbk_procsec, &zbk_four_val, &name_offset, &zbk_zero_val,
      354       354    2                  &zbk_minus_one_arg, &zbk_zero_val, &zbk_std_call, &zbk_zero_val);
      355       355    2                XUO$HEADSTART(&zbk_one_arg, &zbk_procsec, &zbk_four_val);
      356       356    2              }
      357       357    1              if (zbk_static_function_flag == 0) {  /* have global function. */
      358       358    2                pl6str (zbk_progname);  }
      359       359    1              else {
      360       360    2                strcpy(tmp1, zbk_progname);
      361       361    2                strcat(tmp1, "#");
      362       362    2                strcat(tmp1, zbk_static_name);
      363       363    2                pl6str(tmp1);    }
      364       364    1
      365       365    1              zbk$close_debug_blks();  /* finish off the debug block stuff. */
      366       366    1              if (zbk_buffer[1] > 31) {  /********** temp **********/
      367       367    2                zbk_buffer[1] = 31;
      368       368    2                zbk_buffer[32] = '#'; }
CC.C03    File=zbk$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=11 
      369       369    1
      370       370    1              XUO$HEADNAME ( zbk_buffer );
      371       371    1
      372       372    1              XUO$HEAD_SEVERITY (&zbk_error_severity);
      373       373    1
      374       374    1              XUO$OUTERM () ;  /* finsih the o.u building .   */
      375       375    1              ZB_CLOSE_OU_FILE (&zbk_oudcbnum);
      376       376    1
      377       377    1              if (zbk_lo_flag != 0) {
      378       378    2                ent_ptr2 = (void (*)()) zbk$loerrhandler ;
      379       379    2                ent_ptr1 = (void (*)()) LOSTMT_HANDLER;
      380       380    2                strcpy ( &zbk_buffer[0], &zbk_buffer[1]);
      381       381    2                ZPC$UNGMAP (
      382       382    2                          &zbk_oudcbnum,
      383       383    2                          zbk_buffer,
      384       384    2                          & zbk_list_options_lo,
      385       385    2                          & zbk_list_options_dmap,
      386       386    2                          & zbk_list_options_pmap,
      387       387    2                          & zbk_list_options_mdmap,
      388       388    2                          &ent_ptr1,
      389       389    2                          &ent_ptr2
      390       390    2                );
      391       391    2                }
      392       392    1
      393       393    1              return;   }  /* end of the zbk$outerm function. */
      394       394
      395       395             /*i*
      396       396                   name: zbk$forward_ref_process
      397       397                   purpose: This routine is the one to set up the lbls, etc
      398       398                   the have forward references in them and need to have them
      399       399                   statisfied. See XUO$FRWD_REF for the details on who this
      400       400                   works. This routine is called by XUO$FRWD_REF.
      401       401
      402       402             */
      403       403             void zbk$forward_ref_process (old_oper,oper_type,new_oper,reloc_oper,
      404       404                                  start_bit, end_bit)
      405       405             int *old_oper;
CC.C03    File=zbk$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=12 
"zbk$driver:c.:ZBC3TSI", line 405: (warning) identifier "start_bit" is not used
"zbk$driver:c.:ZBC3TSI", line 405: (warning) identifier "end_bit" is not used
      406       406             int *oper_type;
      407       407             int *new_oper;
      408       408             int *reloc_oper;
      409       409             int *start_bit;
      410       410             int *end_bit;
      411       411
      412       412                      {    /*   start of the program...   */
      413       413    1        #define OPERCONSTANT 4
      414       414    1        #define RELOCOPADD 1
      415       415    1        struct zbk_sym_tbl *ss;
      416       416    1        struct zbk_labels   *pp;
      417       417    1
      418       418    1              switch (*reloc_oper)  {
      419       419    2                case FREF_LBL:
      420       420    2                  pp = (struct zbk_labels *) zbk_fwd_p->fwd_tbl[*old_oper];
      421       421    2                  *new_oper = pp->offset;
      422       422    2                  *oper_type = OPERCONSTANT;
      423       423    2                  break;
      424       424    2                case FREF_AUTO:
      425       425    2                  ss = (struct zbk_sym_tbl *) zbk_fwd_p->fwd_tbl[*old_oper];
      426       426    2                  *new_oper = ss->offset;
      427       427    2                  *oper_type = OPERCONSTANT;
      428       428    2                  break;
      429       429    2                case FREF_DBL:
      430       430    2                  *oper_type = OPERCONSTANT;
      431       431    2                  break;
      432       432    2                case FREF_SLBL:
      433       433    2                  pp = (struct zbk_labels *) zbk_fwd_p->fwd_tbl[*old_oper];
      434       434    2                  *new_oper = pp->reloc_section;
      435       435    2                  *oper_type = SECTION_TYPE;
      436       436    2                  break;
      437       437    2                case FREF_SNAM:
      438       438    2                  ss = (struct zbk_sym_tbl *) zbk_fwd_p->fwd_tbl[*old_oper];
      439       439    2                  *new_oper = ss->reloc_section;
      440       440    2                  *oper_type = SECTION_TYPE;
CC.C03    File=zbk$driver:c.:ZBC3TSI                                                Fri Aug 22 1997  Page=13 
      441       441    2                  break;
      442       442    2              }   /* end of the switch on reloc_oper. */
      443       443    1              *reloc_oper = RELOCOPADD;
      444       444    1              return;  /* back to o.u. generator.  */
      445       445    1              }  /* this is the end of zbk$forward_ref_process function. */
      446       446
---  Include file information  ---

   stdio:h.:LIBRARY. is referenced
   errno:h.:LIBRARY. is referenced
   zbk$ougen:h.:ZBC3TOU. is referenced
   zbk$tables:h.:ZBC3TOU. is referenced

2 warnings were detected in the file zbk$driver:c.:ZBC3TSI
