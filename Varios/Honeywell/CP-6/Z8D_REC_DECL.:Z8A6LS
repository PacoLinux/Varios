

09:13 AUG 09 '97 Z8D_REC_DECL.:Z8A6SI/Z8D_REC_DECL.:Z8A6TUI                1    
    1      /*T***********************************************************/
    2      /*T*                                                         */
    3      /*T* Copyright (c) Bull HN Information Systems Inc., 1997    */
    4      /*T*                                                         */
    5      /*T***********************************************************/
    6      /* LEX_REC_DECL is for Z8DR$RECORD_DECL and it's subsidiaries */
    7
    8      /* Put all %EQU's after here */
    9      %EQU NO_USAGE                 = 0;
   10      %EQU NO_INT2_SPECIFIED        = 0;
   11      %EQU SINGLE_DIMENSION         = 1;
   12      %EQU LENGTH_OF_4095           = 4095;
   13      %EQU NO_SCALE_FACTOR          = 0;
   14      %EQU LEVEL_01                 = 01;
   15      %EQU LEVEL_49                 = 49;
   16      %EQU LEVEL_66                 = 66;
   17      %EQU LEVEL_77                 = 77;
   18      %EQU LEVEL_88                 = 88;
   19      %EQU INVALID_LEVEL#           = 50;
   20      %EQU NO_ERROR                 = 0;
   21      %EQU ALT_RETURN               = '0'B;
   22      %EQU ASTERISK                 = '*';
   23      %EQU PIC_SIGN_CHARACTER       = 'S';
   24      %EQU ANSI_MAX_DIGITS          = 18;
   25      %EQU MAX_PIC_STR_LENGTH       = 30;
   26      %EQU COMP1_MAX_PIC_DIGITS     = 4;
   27    * %EQU COMP2_MAX_PIC_DIGITS     = 9;
   28      %EQU COMP11_MAX_PIC_DIGITS    = 8;
   29      %EQU DEFAULT_NUMERIC_WIDTH    = 4;
   30      %EQU DEFAULT_NUMERIC_SCALE    = 0;
   31    * %EQU BULL_MAX_PIC_DIGITS      = 59;
   32    * %EQU BULL_MAX_SF              = 31;
   33
   34      /* Declaration macros are to be placed after this point */
   35
   36      %MACRO REDUCED_DATA_INFO (@LVL = 2);
   37
09:13 AUG 09 '97 Z8D_REC_DECL.:Z8A6SI/Z8D_REC_DECL.:Z8A6TUI                2    
   38             2 USAGE           UNAL,
   39              3 TYPE          SBIN WORD,
   40             2 LEVEL           UNAL,
   41              3 CURRENT       SBIN WORD,
   42              3 PREVIOUS      SBIN WORD,
   43              3 NEXT          SBIN WORD,
   44             2 SIGN            UNAL,
   45              3 LOCATION      SBIN WORD,
   46              3 TYPE          SBIN WORD,
   47              3 LINE          SBIN WORD,
   48              3 COLUMN        SBIN WORD,
   49             2 RENAMES         UNAL,
   50              3 START_ST$     PTR,
   51              3 END_ST$       PTR,
   52              3 NEW_RENAMES$  PTR,
   53             2 REDEFINES       UNAL,
   54              3 OBJECT$       PTR,
   55             2 LTS$          PTR,
   56             2 INDEXES$      PTR,
   57             2 DIMS$         PTR,
   58             2 CONST$        PTR,
   59             2 OCCURS               UNAL,
   60              3 INT1                SBIN WORD,
   61              3 INT2                SBIN WORD,
   62              3 DEPENDING$          PTR,
   63             2 TYPE                 SBIN WORD,
   64             2 DESC                  UNAL,
   65             %DESCRIPTOR             (LVL =  3);
   66             2 B               UNAL,
   67              3 ELEMENTARY    BOOLEAN,
   68              3 ASTERISK      BOOLEAN,
   69              3 SIGN_FOUND    BOOLEAN,
   70              3 CONDITION_NAME BOOLEAN,
   71              3 DIMENSIONED   BOOLEAN,
   72              3 LONG          BOOLEAN,
   73              3 REDEF_SUB     BOOLEAN,
   74              3 GREATER_256K       BOOLEAN,
09:13 AUG 09 '97 Z8D_REC_DECL.:Z8A6SI/Z8D_REC_DECL.:Z8A6TUI                3    
   75              3 LENGTH_4096   BOOLEAN,
   76              3 PIC_CLAUSE    BOOLEAN,
   77              3 RENAMES       BOOLEAN,
   78              3 DIGIT         BOOLEAN,
   79              3 SYNC          BOOLEAN,
   80              3 OCCURS        BOOLEAN,
   81              3 SIGN_PROPAGATED BOOLEAN,
   82              3 SIGN_PRESENT  BOOLEAN,
   83              3 JUSTIFIED     BOOLEAN,
   84              3 CLASS         UBIN(3) UNAL,
   85              3 ASTERISK_SUPRESS BOOLEAN,
   86              3 P             BOOLEAN,
   87              3 EXTERNAL      BOOLEAN,
   88              3 GLOBAL        BOOLEAN,
   89              3 LINKAGE       BOOLEAN,
   90              3 KANJI         BOOLEAN,
   91              3 *             BIT(10) UNAL;
   92
   93      %MEND;
   94      %EJECT;

09:13 AUG 09 '97 Z8D_REC_DECL.:Z8A6SI/Z8D_REC_DECL.:Z8A6TUI                4    
   95      %MACRO GROUP_DECL (@STCLASS = EXTROOT);
   96
   97         DCL 1 GROUP                ALIGNED @STCLASS,
   98              2 USAGE               UNAL,
   99               3 TYPE               SBIN WORD,
  100               3 LEVEL              SBIN WORD,
  101              2 VALUE               UNAL,
  102               3 LEVEL              SBIN WORD,
  103               3 LINE               SBIN WORD,
  104               3 COLUMN             SBIN WORD;
  105
  106      %MEND;
  107      %EJECT;

09:13 AUG 09 '97 Z8D_REC_DECL.:Z8A6SI/Z8D_REC_DECL.:Z8A6TUI                5    
  108      /* Insert macros after this point */
  109      %MACRO UPDATE_GROUP_USAGE (@USAGE = %NO_USAGE,
  110                                     @LEVEL = %LEVEL_01);
  111
  112         DO;
  113           GROUP.USAGE.LEVEL = @LEVEL;
  114           GROUP.USAGE.TYPE  = @USAGE;
  115         END;
  116
  117      %MEND;
  118      %EJECT;

09:13 AUG 09 '97 Z8D_REC_DECL.:Z8A6SI/Z8D_REC_DECL.:Z8A6TUI                6    
  119      %MACRO DELETE_CLAUSE (@CLAUSE$ = PIC_CLAUSE$);
  120
  121         DO;
  122           CALL Z8ED$DISPOSE_ABSSYN_TREE (CDECL$ -> LX_REC_DECL.P.@CLAUSE$);
  123         END;
  124
  125      %MEND;
  126      %EJECT;

09:13 AUG 09 '97 Z8D_REC_DECL.:Z8A6SI/Z8D_REC_DECL.:Z8A6TUI                7    
  127      %MACRO DEFAULT_PIC;
  128
  129         DO;
  130           PIC_OUT.TYPE     = %PIC_TY_N;
  131           PIC_OUT.LEFT     = %DEFAULT_NUMERIC_WIDTH;
  132           PIC_OUT.WIDTH    = %DEFAULT_NUMERIC_WIDTH;
  133           PIC_OUT.SCALE    = %DEFAULT_NUMERIC_SCALE;
  134           PIC_OUT.EIS_TYPE = %PIC_EIS_NS;
  135
  136           IF CDECL$ -> LX_REC_DECL.P.VALUE$ ~= ADDR(NIL) THEN
  137             %DELETE_CLAUSE (@CLAUSE$ = VALUE$);
  138         END;
  139
  140      %MEND;
  141      %EJECT;

09:13 AUG 09 '97 Z8D_REC_DECL.:Z8A6SI/Z8D_REC_DECL.:Z8A6TUI                8    
  142      %MACRO PIC_ERROR (@ERROR_# = %E$NO_PIC_ON_GROUP,
  143                        @LINE_#  = CDECL$ -> LX_REC_DECL.P.PIC_CLAUSE$ -> LX_ITEM.LINE,
  144                        @COL_#   = CDECL$ -> LX_REC_DECL.P.PIC_CLAUSE$ -> LX_ITEM.COLUMN,
  145                        @PLUG1$    = );
  146
  147         DO;
  148           %CONDITIONAL_ERROR (@LX_ITEM$ = CDECL$ -> LX_REC_DECL.P.PIC_CLAUSE$,
  149                               @ERROR#   = @ERROR_#,
  150                               @LINE     = @LINE_#,
  151                               @COLUMN   = @COL_#,
  152                               @PLUG1    = @PLUG1$);
  153         END;
  154
  155      %MEND;
  156      %EJECT;

09:13 AUG 09 '97 Z8D_REC_DECL.:Z8A6SI/Z8D_REC_DECL.:Z8A6TUI                9    
  157      %MACRO USAGE_ERROR (@ERROR_# = %E$NO_PIC_USAGE_OR_GROUP,
  158                          @LINE_#  = CDECL$ -> LX_REC_DECL.P.USAGE$ -> LX_ITEM.LINE,
  159                          @COL_#   = CDECL$ -> LX_REC_DECL.P.USAGE$ -> LX_ITEM.COLUMN,
  160                          @PLUG1$    = ,
  161                          @CONDITIONAL (YES='1'B,NO='0'B) = '1'B);
  162
  163         DO;
  164           %IF @CONDITIONAL;
  165             %CONDITIONAL_ERROR (@LX_ITEM$ = CDECL$ -> LX_REC_DECL.P.USAGE$,
  166                                 @ERROR#   = @ERROR_#,
  167                                 @LINE     = @LINE_#,
  168                                 @COLUMN   = @COL_#,
  169                                 @PLUG1    = @PLUG1$);
  170           %ELSE;
  171             CALL Z8AE$ERROR(@ERROR_#, @LINE_#, @COL_#, @PLUG1$);
  172           %ENDIF;
  173         END;
  174
  175      %MEND;
  176      %EJECT;

09:13 AUG 09 '97 Z8D_REC_DECL.:Z8A6SI/Z8D_REC_DECL.:Z8A6TUI                10   
  177      %MACRO LEVEL_ERROR (@ERROR_# = %E$INVALID_LEVEL_NUMBER,
  178                          @LINE_#  = CDECL$ -> LX_REC_DECL.P.LEVEL_NO$ -> LX_ITEM.LINE,
  179                          @COL_#   = CDECL$ -> LX_REC_DECL.P.LEVEL_NO$ -> LX_ITEM.COLUMN,
  180                          @PLUG1$    = );
  181
  182         DO;
  183           %CONDITIONAL_ERROR (@LX_ITEM$ = CDECL$ -> LX_REC_DECL.P.LEVEL_NO$,
  184                               @ERROR#   = @ERROR_#,
  185                               @LINE     = @LINE_#,
  186                               @COLUMN   = @COL_#,
  187                               @PLUG1    = @PLUG1$);
  188         END;
  189
  190      %MEND;
  191      %EJECT;

09:13 AUG 09 '97 Z8D_REC_DECL.:Z8A6SI/Z8D_REC_DECL.:Z8A6TUI                11   
  192      %MACRO OCCURS_ERROR (@ERROR_# = %E$OCCURS_ON_LEVEL_1,
  193                           @LINE_#  = CDECL$ -> LX_REC_DECL.P.OCCURS$ -> LX_ITEM.LINE,
  194                           @COL_#   = CDECL$ -> LX_REC_DECL.P.OCCURS$ -> LX_ITEM.COLUMN,
  195                           @PLUG1$    = );
  196
  197         DO;
  198           %CONDITIONAL_ERROR (@LX_ITEM$ = CDECL$ -> LX_REC_DECL.P.OCCURS$,
  199                               @ERROR#   = @ERROR_#,
  200                               @LINE     = @LINE_#,
  201                               @COLUMN   = @COL_#,
  202                               @PLUG1    = @PLUG1$);
  203         END;
  204
  205      %MEND;
  206      %EJECT;

09:13 AUG 09 '97 Z8D_REC_DECL.:Z8A6SI/Z8D_REC_DECL.:Z8A6TUI                12   
  207      %MACRO BLANK_ERROR (@ERROR_# = %E$BWZ_MUST_BE_DISPLAY,
  208                          @LINE_#  = CDECL$ -> LX_REC_DECL.P.BLANK$ -> LX_ITEM.LINE,
  209                          @COL_#   = CDECL$ -> LX_REC_DECL.P.BLANK$ -> LX_ITEM.COLUMN,
  210                          @PLUG1$    = );
  211
  212         DO;
  213           %CONDITIONAL_ERROR (@LX_ITEM$ = CDECL$ -> LX_REC_DECL.P.BLANK$,
  214                               @ERROR#   = @ERROR_#,
  215                               @LINE     = @LINE_#,
  216                               @COLUMN   = @COL_#,
  217                               @PLUG1    = @PLUG1$);
  218         END;
  219
  220      %MEND;
  221      %EJECT;

09:13 AUG 09 '97 Z8D_REC_DECL.:Z8A6SI/Z8D_REC_DECL.:Z8A6TUI                13   
  222      %MACRO JUST_ERROR (@ERROR_# = %E$JUSTIFIED_NOT_ELEMENTARY,
  223                          @LINE_#  = CDECL$ -> LX_REC_DECL.P.JUSTIFIED$ -> LX_ITEM.LINE,
  224                          @COL_#   = CDECL$ -> LX_REC_DECL.P.JUSTIFIED$ -> LX_ITEM.COLUMN,
  225                          @PLUG1$    = );
  226
  227         DO;
  228           %CONDITIONAL_ERROR (@LX_ITEM$ = CDECL$ -> LX_REC_DECL.P.JUSTIFIED$,
  229                               @ERROR#   = @ERROR_#,
  230                               @LINE     = @LINE_#,
  231                               @COLUMN   = @COL_#,
  232                               @PLUG1    = @PLUG1$);
  233         END;
  234
  235      %MEND;
  236      %EJECT;

09:13 AUG 09 '97 Z8D_REC_DECL.:Z8A6SI/Z8D_REC_DECL.:Z8A6TUI                14   
  237      %MACRO EXTERNAL_ERROR (@ERROR_# = %E$EXTERNAL_IN_WRONG_CONTEXT,
  238                          @LINE_#  = CDECL$ -> LX_REC_DECL.P.EXTERNAL$ -> LX_ITEM.LINE,
  239                          @COL_#   = CDECL$ -> LX_REC_DECL.P.EXTERNAL$ -> LX_ITEM.COLUMN,
  240                          @PLUG1$    = );
  241
  242         DO;
  243           %CONDITIONAL_ERROR (@LX_ITEM$ = CDECL$ -> LX_REC_DECL.P.EXTERNAL$,
  244                               @ERROR#   = @ERROR_#,
  245                               @LINE     = @LINE_#,
  246                               @COLUMN   = @COL_#,
  247                               @PLUG1    = @PLUG1$);
  248         END;
  249
  250      %MEND;
  251      %EJECT;

09:13 AUG 09 '97 Z8D_REC_DECL.:Z8A6SI/Z8D_REC_DECL.:Z8A6TUI                15   
  252      %MACRO GLOBAL_ERROR (@ERROR_# = %E$EXTERNAL_IN_WRONG_CONTEXT,
  253                          @LINE_#  = CDECL$ -> LX_REC_DECL.P.GLOBAL$ -> LX_ITEM.LINE,
  254                          @COL_#   = CDECL$ -> LX_REC_DECL.P.GLOBAL$ -> LX_ITEM.COLUMN,
  255                          @PLUG1$    = );
  256
  257         DO;
  258           %CONDITIONAL_ERROR (@LX_ITEM$ = CDECL$ -> LX_REC_DECL.P.GLOBAL$,
  259                               @ERROR#   = @ERROR_#,
  260                               @LINE     = @LINE_#,
  261                               @COLUMN   = @COL_#,
  262                               @PLUG1    = @PLUG1$);
  263         END;
  264
  265      %MEND;
  266      %EJECT;

09:13 AUG 09 '97 Z8D_REC_DECL.:Z8A6SI/Z8D_REC_DECL.:Z8A6TUI                16   
  267      %MACRO SYNC_ERROR (@ERROR_# = %E$SYNC_NOT_ELEMENTARY,
  268                          @LINE_#  = CDECL$ -> LX_REC_DECL.P.SYNC$ -> LX_ITEM.LINE,
  269                          @COL_#   = CDECL$ -> LX_REC_DECL.P.SYNC$ -> LX_ITEM.COLUMN,
  270                          @PLUG1$    = );
  271
  272         DO;
  273           %CONDITIONAL_ERROR (@LX_ITEM$ = CDECL$ -> LX_REC_DECL.P.SYNC$,
  274                               @ERROR#   = @ERROR_#,
  275                               @LINE     = @LINE_#,
  276                               @COLUMN   = @COL_#,
  277                               @PLUG1    = @PLUG1$);
  278         END;
  279
  280      %MEND;
  281      %EJECT;

09:13 AUG 09 '97 Z8D_REC_DECL.:Z8A6SI/Z8D_REC_DECL.:Z8A6TUI                17   
  282      %MACRO REDEFINES_ERROR (@ERROR_# = %E$NON_ADJACENT_REDEF,
  283                          @LINE_#  = CDECL$ -> LX_REC_DECL.P.REDEFINES$ -> LX_ITEM.LINE,
  284                          @COL_#   = CDECL$ -> LX_REC_DECL.P.REDEFINES$ -> LX_ITEM.COLUMN,
  285                          @PLUG1$    = ,
  286                          @PLUG2$    = );
  287
  288         DO;
  289           %CONDITIONAL_ERROR (@LX_ITEM$ = CDECL$ -> LX_REC_DECL.P.REDEFINES$,
  290                               @ERROR#   = @ERROR_#,
  291                               @LINE     = @LINE_#,
  292                               @COLUMN   = @COL_#,
  293                               @PLUG1    = @PLUG1$,
  294                               @PLUG2    = @PLUG2$);
  295         END;
  296
  297      %MEND;
  298      %EJECT;

09:13 AUG 09 '97 Z8D_REC_DECL.:Z8A6SI/Z8D_REC_DECL.:Z8A6TUI                18   
  299      %MACRO UPDATE_HIER_STK (@STK_PTR     = HIER_STK_PTR,
  300                              @QLT$        = "ADDR(NIL)",
  301                              @DIMS$       = "ADDR(NIL)",
  302                              @LEVEL#      = %INVALID_LEVEL#,
  303                              @USAGE_TYPE  = %NO_USAGE,
  304                              @B           = '0'B,
  305                              @SIGN_LINE   = 0,
  306                              @SIGN_COL    = 0,
  307                              @SIGN_LOC    = 0,
  308                              @SIGN_TYPE   = 0);
  309
  310         DO;
  311           HIER_STK.QLT$            (@STK_PTR) = @QLT$;
  312           HIER_STK.DIMS$           (@STK_PTR) = @DIMS$;
  313           HIER_STK.LEVEL#          (@STK_PTR) = @LEVEL#;
  314           HIER_STK.USAGE_TYPE      (@STK_PTR) = @USAGE_TYPE;
  315           HIER_STK.SIGN.LINE       (@STK_PTR) = @SIGN_LINE;
  316           HIER_STK.SIGN.COLUMN     (@STK_PTR) = @SIGN_COL;
  317           HIER_STK.SIGN.LOCATION   (@STK_PTR) = @SIGN_LOC;
  318           HIER_STK.SIGN.TYPE       (@STK_PTR) = @SIGN_TYPE;
  319           HIER_STK.B               (@STK_PTR) = @B;
  320         END;
  321
  322      %MEND;
  323      %EJECT;

09:13 AUG 09 '97 Z8D_REC_DECL.:Z8A6SI/Z8D_REC_DECL.:Z8A6TUI                19   
  324      %MACRO RENAMES_LVL_CHK (@LEVEL# = ,
  325                                  @ST$$   = ,
  326                                  @LINE#  = ,
  327                                  @COL#   = );
  328
  329         DO CASE (@LEVEL#);
  330           CASE (%LEVEL_01, %LEVEL_66, %LEVEL_77, %LEVEL_88);
  331             CALL Z8AE$ERROR (%E$ILL_START_LEVEL_RENAMES,
  332                              @LINE#,
  333                              @COL#);
  334           CASE (%LEVEL_02);
  335             IF @ST$$ -> SCALAR.QLT$ -> QLT.B.RENAMES THEN
  336               CALL Z8AE$ERROR (%E$ILL_START_LEVEL_RENAMES,
  337                                @LINE#,
  338                                @COL#);
  339           CASE(ELSE);
  340
  341         END;
  342
  343      %MEND;
  344      %EJECT;

09:13 AUG 09 '97 Z8D_REC_DECL.:Z8A6SI/Z8D_REC_DECL.:Z8A6TUI                20   
  345      %MACRO DECIPHER_PIC_LENGTH (@LENGTH = );
  346
  347         DO;
  348           IF - PIC_OUT.SCALE > PIC_OUT.WIDTH THEN
  349             IF PIC_OUT.EIS_TYPE ~= %PIC_EIS_NS THEN
  350               @LENGTH = PIC_OUT.WIDTH - 1;
  351             ELSE
  352               @LENGTH = PIC_OUT.WIDTH;
  353           ELSE
  354             IF PIC_OUT.SCALE <= %NO_SCALE_FACTOR THEN
  355               @LENGTH = PIC_OUT.LEFT - PIC_OUT.SCALE;
  356             ELSE
  357               @LENGTH = PIC_OUT.LEFT;
  358         END;
  359
  360      %MEND;
  361      %EJECT;

09:13 AUG 09 '97 Z8D_REC_DECL.:Z8A6SI/Z8D_REC_DECL.:Z8A6TUI                21   
  362      %MACRO GET_SIGN (@LOCATION = ,
  363                       @SIGN     = );
  364
  365           DO;
  366             IF PIC_OUT.EIS_TYPE = %PIC_EIS_NS THEN
  367               @SIGN = %NO_SIGN;
  368             ELSE
  369               DO CASE (@LOCATION);
  370                 CASE (%SIGN_POS_TRAILING);
  371                   @SIGN = %TRAILING_SIGN;
  372
  373                 CASE (%SIGN_POS_LEADING);
  374                   @SIGN = %LEADING_SIGN;
  375               END;
  376
  377           END;
  378      %MEND;
  379      %EJECT;

09:13 AUG 09 '97 Z8D_REC_DECL.:Z8A6SI/Z8D_REC_DECL.:Z8A6TUI                22   
  380      %MACRO ADJUST_FOR_OVERPUNCH (@SIGN_TYPE = ,
  381                                   @LENGTH    = ,
  382                                   @TYPE      = );
  383
  384         DO CASE (@SIGN_TYPE);
  385           CASE(%SIGN_TYPE_OVERPUNCH);
  386             IF REDUCED_DATA.B.CLASS = %CLASS_EDITED THEN
  387               @TYPE = %TYD;
  388             ELSE
  389               DO;
  390                 @TYPE = %TYO;
  391                 @LENGTH = @LENGTH - 1;
  392               END;
  393
  394           CASE(%SIGN_TYPE_SEPARATE);
  395             @TYPE   = %TYD;
  396
  397         END; /* Case */
  398
  399      %MEND;
  400      %EJECT;

09:13 AUG 09 '97 Z8D_REC_DECL.:Z8A6SI/Z8D_REC_DECL.:Z8A6TUI                23   
  401      %MACRO INITIALIZE_REDUCED_DATA;
  402
  403         DO;
  404           REDUCED_DATA                    = '0'O;
  405           REDUCED_DATA.LTS$               = ADDR(NIL);
  406           REDUCED_DATA.DIMS$              = ADDR(NIL);
  407           REDUCED_DATA.INDEXES$           = ADDR(NIL);
  408           REDUCED_DATA.CONST$             = ADDR(NIL);
  409           REDUCED_DATA.RENAMES.START_ST$  = ADDR(NIL);
  410           REDUCED_DATA.RENAMES.END_ST$    = ADDR(NIL);
  411           REDUCED_DATA.RENAMES.NEW_RENAMES$ = ADDR(NIL);
  412           REDUCED_DATA.REDEFINES.OBJECT$  = ADDR(NIL);
  413           REDUCED_DATA.OCCURS.DEPENDING$  = ADDR(NIL);
  414         END;
  415
  416      %MEND;
  417      %EJECT;

09:13 AUG 09 '97 Z8D_REC_DECL.:Z8A6SI/Z8D_REC_DECL.:Z8A6TUI                24   
  418      %MACRO CHANGE_LEVEL_TO_CONSEC (@LEVEL = );
  419
  420         DO;
  421           IF @LEVEL = %LEVEL_66 THEN
  422             @LEVEL = 02;
  423           ELSE
  424             IF @LEVEL = %LEVEL_77 THEN
  425               @LEVEL = %LEVEL_01;
  426             ELSE
  427               DO CASE (@LEVEL);
  428                 CASE (
  429                       %LEVELS_00_THRU_49;
  430                      );
  431                   /* OK */
  432
  433                 CASE (ELSE);
  434                   @LEVEL = %LEVEL_01;
  435               END;
  436         END;
  437
  438      %MEND;
  439      %EJECT;

09:13 AUG 09 '97 Z8D_REC_DECL.:Z8A6SI/Z8D_REC_DECL.:Z8A6TUI                25   
  440      %MACRO LEVELS_00_THRU_49;
  441         1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,
  442         26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,
  443         48,49,0
  444      %MEND;

