      PROGRAM FLASH
C*T***********************************************************  
C*T*                                                         *  
C*T* Copyright (c) Bull HN Information Systems Inc., 1989    *  
C*T*                                                         *  
C*T***********************************************************  
C *
C *      This program reads in the output from Stats for "Di Fep Extended"
C *      commands.  We are concerned primarily with the LCP-6 and Async stats;
C *      we ignore Bisync and any other handlers which may be present.  Of
C *      course, the enterprizing user is more than welcome to add support for
C *      the handler(s) of his (or her) choice . . .
C *
C *      FLASH reads in the output from Stats via F$105; the file
C *      can be captured by setting M$LO somewhere and then running Stats.
C *      We assume that F$200 is aimed at a file somewhere; it will be linked
C *      as DCB3 on the command line.  This program should be invoked as:
C *
C *         !FLASH.X stats_output_file  into  munged_stats_file
C *
C *      Andrew E. Birner, 07 Mar, '86
C *
C /********************************************************************
C *                                                                   *
C * This program  is a gratuitous contribution and  is offered as is. *
C * Zenith  makes  no  representations  or  warranties  of  any kind, *
C * express  or  implied,  relating  to  freedom  from  infringement, *
C * accuracy,  error-freedom  or   performance,  and  shall  have  no *
C * liability  or responsibility  to users  for damages  of any kind, *
C * including special, indirect or consequential damages, arising out *
C * of  or resulting  from use,  modification or  reproduction of the *
C * program.                                                          *
C *                                                                   *
C * No  warranty  is  made  by  the  contributor  as to the accuracy, *
C * maintenance, and functioning of the program and related material. *
C * No  responsibility is  assumed by  the contributor  in connection *
C * therewith.                                                        *
C *                                                                   *
C ********************************************************************/
      CHARACTER INBUFF*133, TBUFF*133, OUTBUFF*511
      INTEGER BUFF$IX, IOS200, JTOTUSER, JJ, LINESPEEDS (13),
     1        BYTES_PER_MIN (4)
C
      CHARACTER MONTHS (12)*3 /
     1            'JAN',
     2            'FEB',
     3            'MAR',
     4            'APR',
     5            'MAY',
     6            'JUN',
     7            'JUL',
     8            'AUG',
     9            'SEP',
     A            'OCT',
     B            'NOV',
     C            'DEC'       /
C *
C *      Open output file; abort if we can't
C *
      OPEN (200, RECL=511, IOSTAT=IOS200)
C
      IF ( IOS200 .NE. 0 ) THEN
         CALL ERRPRINT (IOS200, 200)
         CALL EXIT (6)
      END IF 
C
1000  CONTINUE 
C *
C *      Start -- read until we get the timespan record
C *
      INBUFF = ' '
      REPEAT 1010, WHILE  ( INBUFF (09:12) .NE. 'from'  .AND.INBUFF (1
     10:13) .NE. 'from'         )
         READ (105,'(A)',END=1150) INBUFF
1010  CONTINUE 
C *
C *      If two-digit fep #, shift rest of record to get dates in proper
C *      columns.  (Yes, it's ugly, but it works.)
C *
      IF ( INBUFF (10:13) .EQ. 'from' ) THEN
         TBUFF = INBUFF (2:)
         INBUFF = TBUFF
      END IF 
C *
C *      Re-format the date and time . . .
C *
      BUFF$IX = 14
      OUTBUFF = INBUFF (27:28) // '  ' // INBUFF (23:24) // ' ' 
     1//INBUFF (33:37)
C
      DO 1020 , I = 1, 12
         IF ( INBUFF (19:21) .EQ. MONTHS (I) ) THEN
            WRITE (OUTBUFF (3:4), '(I2.2)') I
            GOTO 1030 
         END IF 
1020  CONTINUE 
      OUTPUT '*** Illegal Month!!', INBUFF
      CALL EXIT (6)
C *
C *      Space down to LCP-6 Monitor stats (execution time breakdown) --
C *
1030  CONTINUE 
      REPEAT 1040, WHILE  ( INBUFF (3:11) .NE. '*** LCP-6' )
         READ (105, '(A)', END=1160) INBUFF
1040  CONTINUE 
C
      DO 1050 , I = 1, 5
         READ (105,'(31X,A)',END=1160) OUTBUFF (BUFF$IX:(BUFF$IX+5))
         BUFF$IX = BUFF$IX + 7
1050  CONTINUE 
C *
C *      Handle case where idle time isn't printed!
C *
      IF ( OUTBUFF ((BUFF$IX-7):(BUFF$IX-2)) .EQ. ' ' ) THEN
         OUTBUFF ((BUFF$IX-7):(BUFF$IX-2)) =OUTBUFF ((BUFF$IX-14)
     1      :(BUFF$IX-9))
         OUTBUFF ((BUFF$IX-14):(BUFF$IX-9)) = ' '
      END IF 
C *
C *      Space down to memory pool stats . . .
C *
      REPEAT 1060, WHILE  ( INBUFF (3:13) .NE. 'Memory pool' )
         READ (105,'(A)',END=1160) INBUFF
1060  CONTINUE 
C
      DO 1070 , I = 1, 5
         READ (105,'(43X,A)',END=1160) OUTBUFF (BUFF$IX:(BUFF$IX+3))
         BUFF$IX = BUFF$IX + 5
1070  CONTINUE 
C *
C *      Space down to user class breakdown; accumulate a count . . .
C *
      REPEAT 1080, WHILE  ( INBUFF (3:14) .NE. '-User class-' )
         READ (105,'(A)',END=1160) INBUFF
1080  CONTINUE 
C
      JTOTUSER = 0
      JJ = -1
      REPEAT 1090, WHILE ( JJ .NE. 0 )
         READ (105,'(37X,I2)',END=1160) JJ
         JTOTUSER = JTOTUSER + JJ
1090  CONTINUE 
C
      WRITE (OUTBUFF (BUFF$IX:(BUFF$IX+1)), '(I2)') JTOTUSER
      BUFF$IX = BUFF$IX + 3
C *
C *      Skip down to Async's stats -
C *
      REPEAT 1100, WHILE  ( INBUFF (3:11) .NE. '*** ASYNC' )
         READ (105,'(A)',END=1160) INBUFF
1100  CONTINUE 
C *
C *      Handle any of Async's stats that might be present
C *
      READ (105,'(A)',END=1160) INBUFF
C
      REPEAT 1110, WHILE  ( INBUFF (3:5) .NE. '***' )
C
         IF ( INBUFF (3:13) .EQ. 'Line speeds' ) THEN
            READ (105,'(1X,13I)',END=1160) LINESPEEDS
            WRITE (OUTBUFF (79:117), '(13I3)') LINESPEEDS
         ELSE IF ( INBUFF (3:13) .EQ. 'words total' ) THEN
            OUTBUFF (118:141) = INBUFF (15:22) // INBUFF (33:40)
     1            //INBUFF (56:63)
         ELSE IF ( INBUFF (7:16) .EQ. 'rrupts/min' ) THEN
            OUTBUFF (170:174) = INBUFF (46:50)
            OUTBUFF (175:179) = INBUFF (61:65)
         ELSE IF ( INBUFF (3:13) .EQ. '% Interrupt' ) THEN
            OUTBUFF (180:186) = INBUFF (44:50)
            OUTBUFF (187:193) = INBUFF (59:65)
         END IF 
C
         READ (105,'(A)',END=1160) INBUFF
1110  CONTINUE 
C *
C *      Grab some VDH stats for ASYNC
C *
      REPEAT 1120, WHILE ( INBUFF (7:14)  .NE. 'VDH stat'  .AND.I
     1NBUFF (35:42) .NE. 'ASYNC   '        )
         READ (105,'(A)',END=1160) INBUFF
1120  CONTINUE 
C
      OUTBUFF (76:78) = INBUFF (69:71)
C
      IF ( INBUFF (69:71) .NE. '  0' ) THEN
         REPEAT 1130, WHILE ( INBUFF (2:) .NE. ' ' )
            IF ( INBUFF (3:13) .EQ. '% Scheduled' ) THEN
               OUTBUFF (194:200) = INBUFF (36:42)
            END IF 
            READ (105,'(A)',END=1160) INBUFF
1130     CONTINUE 
C
         READ (105,'(A)',END=1160) INBUFF
         IF ( INBUFF (5:10) .EQ. '-Item-' ) THEN
            REPEAT 1140, WHILE (INBUFF (12:25) .NE. 'data bytes/min'.
     1            AND. INBUFF (2:) .NE. ' ')
               READ (105,'(A)',END=1160) INBUFF
1140        CONTINUE 
C
            IF ( INBUFF (2:) .NE. ' ' ) THEN
               READ (INBUFF (29:80), '(4I)') BYTES_PER_MIN
               WRITE (OUTBUFF (142:169), '(4I7)') BYTES_PER_MIN
            END IF 
         END IF 
      END IF 
C *
C *      Write the fool buffer --
C *
      WRITE (200,'(A)') OUTBUFF (1:200)
C *
C *      Go back for another one!
C *
      GOTO 1000 
C *
C *      Close up shop and go home . . .
C *
1150  CONTINUE 
      CLOSE (UNIT=200, STATUS='KEEP')
      STOP 
C *
C *      Error routine for premature EOF on unit 105 --
C *
1160  CONTINUE 
      OUTPUT '*** Premature EOF on F$105 --', BUFF$IX, OUTBUFF (1:100),
     1OUTBUFF (101:200),OUTBUFF (201:300),OUTBUFF (301:400),OUTBUFF (
     2401:500),OUTBUFF (501:511)
C *
C *      End of routine FLASH
C *
      E N D 
