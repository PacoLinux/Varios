

CC.C03    File=zbe$il1_formal:c.:ZBC3TSI                                            Fri Aug 22 1997  Page=1  
        1         1             /* $Header: il1_formal.c,v 1.3 87/03/10 11:14:00 ceriel Exp $ */
        2         2             /*
        3         3              * (c) copyright 1987 by the Vrije Universiteit, Amsterdam, The Netherlands.
        4         4              * See the copyright notice in the ACK home directory, in the file "Copyright"
                               .
        5         5              */
        6         6             /*  I N L I N E   S U B S T I T U T I O N
        7         7              *
        8         8              *  I L 1 _ F O R M A L . C
        9         9              */
       10        10
       11        11             #include "types:h"
       12        12             #include "il:h"
       13        13             #include "debug:h"
       14        14             #include "alloc:h"
       15        15             #include "global:h"
       16        16             #include "lset:h"
       17        17             #include "il1_aux:h"
       18        18             #include "il1_formal:h"
       19        19
       20        20             #define NOT_USED(f)   (!(f->f_flags & USEMASK))
       21        21             #define USED_ONCE(f)  f->f_flags |= FF_ONCEUSED
       22        22             #define USED_OFTEN(f) f->f_flags |= FF_OFTENUSED
       23        23             #define BADFORMAL(f)  f->f_flags |= FF_BAD
       24        24
       25        25             #define OUTSIDE_LOOP(b)  (Lnrelems(b->b_loops) == 0)
       26        26             #define IS_FORMAL(x)  (x >= 0)
       27        27
       28        28
       29        29
       30        30             formal_p find_formal(p,type,off)
       31        31              proc_p  p;
       32        32              int   type;
       33        33              offset  off;
       34        34             {
       35        35    1         /* Find a formal parameter of p
       36        36    1          * If the formal overlaps with an existing formal
CC.C03    File=zbe$il1_formal:c.:ZBC3TSI                                            Fri Aug 22 1997  Page=2  
       37        37    1          * or has an unknown type (i.e. its address is used)
       38        38    1          * 0 is returned.
       39        39    1          */
       40        40    1
       41        41    1         formal_p f,prev,nf;
       42        42    1
       43        43    1         if (type == UNKNOWN) return (formal_p) 0;
       44        44    1         prev = (formal_p) 0;
       45        45    1         for (f = p->P_FORMALS; f != (formal_p) 0; f = f->f_next) {
       46        46    2            if (f->f_offset >= off) break;
       47        47    2            prev = f;
       48        48    2         }
       49        49    1         if (f != (formal_p) 0 && f->f_offset == off) {
       50        50    2            return (same_size(f->f_type,type) ? f : (formal_p) 0);
       51        51    2         }
       52        52    1         if (f != (formal_p) 0 && par_overlap(off,type,f->f_offset,f->f_type)) {
       53        53    2            return (formal_p) 0;
       54        54    2         }
       55        55    1         if (prev != (formal_p) 0 && par_overlap(prev->f_offset,prev->f_type,
       56        56    1                     off,type)) {
       57        57    2            return (formal_p) 0;
       58        58    2         }
       59        59    1         nf = newformal();
       60        60    1         nf->f_type = type;
       61        61    1         nf->f_offset = off;
       62        62    1         if (prev == (formal_p) 0) {
       63        63    2            p->P_FORMALS = nf;
       64        64    2         } else {
       65        65    2            prev->f_next = nf;
       66        66    2         }
       67        67    1         nf->f_next = f;
       68        68    1         return nf;
       69        69    1        }
       70        70
       71        71
       72        72
       73        73             STATIC no_inl_pars(p)
CC.C03    File=zbe$il1_formal:c.:ZBC3TSI                                            Fri Aug 22 1997  Page=3  
       74        74              proc_p p;
       75        75             {
       76        76    1         /* p may not have any in line parameters */
       77        77    1
       78        78    1         p->p_flags2 |= PF_NO_INLPARS;
       79        79    1         remov_formals(p);
       80        80    1        }
       81        81
       82        82
       83        83
       84        84             STATIC inc_use(f,b)
       85        85              formal_p f;
       86        86              bblock_p b;
       87        87             {
       88        88    1         /* Increment the use count of formal f.
       89        89    1          * The counter has only three states: not used,
       90        90    1          * used once, used more than once.
       91        91    1          * We count the number of times the formal
       92        92    1          * is used dynamically (rather than statically),
       93        93    1          * so if it is used in a loop, the counter
       94        94    1          * is always set to more than once.
       95        95    1          */
       96        96    1
       97        97    1         if (NOT_USED(f) && OUTSIDE_LOOP(b)) {
       98        98    2            USED_ONCE(f);
       99        99    2         } else {
      100       100    2            USED_OFTEN(f);
      101       101    2         }
      102       102    1        }
      103       103
      104       104
      105       105
      106       106             formal(p,b,off,type,usage)
      107       107              proc_p    p;
      108       108              bblock_p  b;
      109       109              offset    off;
      110       110              int       type,
CC.C03    File=zbe$il1_formal:c.:ZBC3TSI                                            Fri Aug 22 1997  Page=4  
      111       111                   usage;
      112       112             {
      113       113    1         /* Analyze a reference to a parameter of p
      114       114    1          * (occurring within basic block b).
      115       115    1          * The parameter has offset off. If this
      116       116    1          * offset is less than 0, it is not a
      117       117    1          * parameter, but a local.
      118       118    1          * The type can be SINGLE (1 word), DOUBLE
      119       119    1          * (2 words), POINTER or UNKNOWN.
      120       120    1          */
      121       121    1
      122       122    1         formal_p f;
      123       123    1
      124       124    1         if (!IS_FORMAL(off) || !SUITABLE(p) || !INLINE_PARS(p)) return;
      125       125    1         /* We are not interested in formal parameters of
      126       126    1          * proccedures that will never be expanded in line,
      127       127    1          * or whose parameters will not be expanded in line.
      128       128    1          */
      129       129    1         f = find_formal(p,type,off);
      130       130    1         /* Find the formal; if not found, create one;
      131       131    1          * if inconsistent with previous formals (e.g.
      132       132    1          * overlapping formals) then return 0;
      133       133    1          * also fills in its type.
      134       134    1          */
      135       135    1         if (f == (formal_p) 0) {
      136       136    2            no_inl_pars(p);
      137       137    2            /* parameters of p may not be expanded in line */
      138       138    2         } else {
      139       139    2            if (usage == CHANGE) {
      140       140    3               /* don't expand f in line */
      141       141    3               BADFORMAL(f);
      142       142    3            } else {
      143       143    3               inc_use(f,b); /* increment use count */
      144       144    3            }
      145       145    2         }
      146       146    1        }
      147       147
CC.C03    File=zbe$il1_formal:c.:ZBC3TSI                                            Fri Aug 22 1997  Page=5  
---  Include file information  ---

   zbe$types:h.:ZBC3TOU. is referenced
   zbe$il:h.:ZBC3TOU. is referenced
   zbe$debug:h.:ZBC3TOU. is referenced
   zbe$alloc:h.:ZBC3TOU. is referenced
   zbe$global:h.:ZBC3TOU. is referenced
   zbe$lset:h.:ZBC3TOU. is referenced
   zbe$il1_aux:h.:ZBC3TOU. is referenced
   zbe$il1_formal:h.:ZBC3TOU. is referenced

No diagnostics were issued in the file zbe$il1_formal:c.:ZBC3TSI
